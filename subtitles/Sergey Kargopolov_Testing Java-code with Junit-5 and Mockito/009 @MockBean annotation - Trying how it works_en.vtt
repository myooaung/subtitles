WEBVTT
1
00:00:00.210 --> 00:00:04.300
In this lesson, I'm going to run my test method and see how it works.

2
00:00:04.320 --> 00:00:06.250
I will save changes to this method.

3
00:00:06.270 --> 00:00:10.380
I will scroll up and I will run it to see how it works.

4
00:00:13.670 --> 00:00:15.440
Now that this man has failed.

5
00:00:15.440 --> 00:00:19.190
And if I scroll down, I will see the reason.

6
00:00:20.300 --> 00:00:23.460
So here I see the details of a GDP request.

7
00:00:23.480 --> 00:00:25.340
Let's expand it a little bit.

8
00:00:27.330 --> 00:00:29.130
I see exception.

9
00:00:30.090 --> 00:00:32.100
Method argument not valid.

10
00:00:32.100 --> 00:00:34.110
So there is invalid argument.

11
00:00:35.000 --> 00:00:39.830
And I see the status code 400, which stands for bad request.

12
00:00:39.890 --> 00:00:44.720
So one of the arguments that I have provided is invalid firstname.

13
00:00:44.720 --> 00:00:49.210
Last name and email address does not have correct email format.

14
00:00:49.220 --> 00:00:51.110
So this is where I made a mistake.

15
00:00:51.230 --> 00:00:58.250
Let's go back up to our test method and provide email address that has correct format email at for example

16
00:00:58.250 --> 00:00:59.420
test dot com.

17
00:01:00.420 --> 00:01:08.250
And if you wonder how this validation was done, then if I go to controller method and scroll down a

18
00:01:08.250 --> 00:01:14.790
little bit to my method under test for this method I have configured been validation and I have used

19
00:01:14.790 --> 00:01:17.910
valid annotation together with request body.

20
00:01:17.910 --> 00:01:27.210
And if I open a user details request model object, then here each field is annotated with validation

21
00:01:27.210 --> 00:01:27.960
annotation.

22
00:01:27.960 --> 00:01:30.600
So this is how validation is done.

23
00:01:30.810 --> 00:01:36.690
Spring framework does it for us automatically, but I need to enable this validation and provide validation

24
00:01:36.690 --> 00:01:42.810
annotations for the bean that I want to be validated and for this validation to work.

25
00:01:42.810 --> 00:01:50.460
I have also added one additional dependency to my project that is called Sprint Boot Starter Validation.

26
00:01:50.670 --> 00:01:56.010
Okay, so now let's close it and let's go back to our test method.

27
00:01:59.550 --> 00:02:05.160
And we have provided correct email address or email address that has correct format.

28
00:02:05.370 --> 00:02:09.479
And I can now run my test method again and see if it works.

29
00:02:11.730 --> 00:02:13.500
And this time it passes.

30
00:02:13.500 --> 00:02:20.340
And the fact that being validation works and that this method is now successful tells me that my create

31
00:02:20.340 --> 00:02:26.250
used method in the rest controller class is well integrated with Sprint Framework and the forward slash

32
00:02:26.250 --> 00:02:30.960
users API endpoint that I use to send this request.

33
00:02:31.230 --> 00:02:33.570
This one does also work.

34
00:02:33.750 --> 00:02:39.270
All right, so let's try failing it by introducing a little bug in the controller class.

35
00:02:39.390 --> 00:02:45.600
I'll go to use this controller and let's assume that I have accidentally made some mistake.

36
00:02:45.600 --> 00:02:46.470
For example.

37
00:02:46.620 --> 00:02:53.940
I will use create user object and I will maybe set user ID to an empty string.

38
00:02:53.970 --> 00:02:57.780
Let's save changes and run our test method again.

39
00:03:02.650 --> 00:03:10.360
And now when test method fails and if I scroll down to read the error message description here I see

40
00:03:10.360 --> 00:03:13.080
that user id should not be empty.

41
00:03:13.090 --> 00:03:17.950
So I have a failing assertion for user ID, which is an expected result.

42
00:03:17.980 --> 00:03:19.320
Now let's fix it.

43
00:03:19.330 --> 00:03:23.560
I will remove this change, save it and run it again.

44
00:03:23.560 --> 00:03:25.990
And I'm expecting it to pass again.

45
00:03:27.550 --> 00:03:28.870
And it passes.

46
00:03:29.200 --> 00:03:29.530
All right.

47
00:03:29.530 --> 00:03:37.870
So it works and it proves that our create user method in the controller class is triggered when a HTTP

48
00:03:37.870 --> 00:03:42.670
post request is sent to a forward slash user's API endpoint.

49
00:03:42.670 --> 00:03:51.520
And it proves that these method under test can successfully read user details from request body and

50
00:03:51.520 --> 00:03:56.560
that integration of this method with Sprint framework does also work.

51
00:03:56.740 --> 00:04:02.650
All right, so let's continue and let's create one more test method to check if the validation of our

52
00:04:02.650 --> 00:04:04.930
HTTP request body does work.

53
00:04:04.930 --> 00:04:09.700
We did see it working, but this is because I have accidentally made a mistake.

54
00:04:09.820 --> 00:04:16.660
But this time I'm going to write a test method to assert that if one of the required fields is missing,

55
00:04:16.660 --> 00:04:23.500
then my API endpoint will respond back with a bad request or HTTP status code 400.

56
00:04:23.500 --> 00:04:24.550
So let's do that.

