1
00:00:00,240 --> 00:00:06,000
In this lesson we're going to test if the returned user object contains correct first name.

2
00:00:06,330 --> 00:00:09,270
And I will start by creating a New Testament it.

3
00:00:11,980 --> 00:00:14,890
I'm going to test the scene, create using method.

4
00:00:14,890 --> 00:00:17,470
So method under test is create its user.

5
00:00:17,680 --> 00:00:25,240
And this is why I'm starting the name of my test method test create user now then goes underscore and

6
00:00:25,240 --> 00:00:31,030
then as condition or state change, I will continue when user is created.

7
00:00:31,870 --> 00:00:36,910
I want the return to that object to contain correct or the same first name.

8
00:00:40,600 --> 00:00:44,890
Something like this, and that will create mental structure by adding to it.

9
00:00:44,890 --> 00:00:45,760
Three sections.

10
00:00:48,850 --> 00:00:50,740
A wrench act and assert.

11
00:00:51,250 --> 00:00:54,520
Now in this method, I'm going to invoke the create use method.

12
00:00:54,700 --> 00:00:57,700
So the arrange section will be very much the same.

13
00:00:57,850 --> 00:01:04,239
And what I can do, I can scroll up here and copy the entire orange section from my previous method

14
00:01:04,720 --> 00:01:06,190
and paste it here.

15
00:01:07,030 --> 00:01:13,060
Now that I have my arrange section prepared, I will use this information to invoke method under test.

16
00:01:18,750 --> 00:01:26,220
And now that I have my act section ready, I will validate that the return to that object contains the

17
00:01:26,340 --> 00:01:27,600
same first name.

18
00:01:27,900 --> 00:01:30,890
And to do that I will use assert equals assertion.

19
00:01:32,380 --> 00:01:40,930
Expected value is stored in a local variable first name and the actual value will read from the user

20
00:01:40,930 --> 00:01:41,400
object.

21
00:01:42,800 --> 00:01:49,640
Now my test method does not compile and this means that I need to switch to application code and implement

22
00:01:49,640 --> 00:01:51,740
the get first name method first.

23
00:01:51,920 --> 00:01:56,780
To do that, that will open the user class and will add one member variable.

24
00:01:58,250 --> 00:02:03,650
I will also need and get the method for it so I will do right mouse click generate.

25
00:02:04,800 --> 00:02:05,390
Get their.

26
00:02:06,430 --> 00:02:07,930
And then select first thing.

27
00:02:08,380 --> 00:02:10,150
Now I have I get a method for it.

28
00:02:10,539 --> 00:02:16,630
If I save changes in this user class and go back to my test method, my code now compiles flow.

29
00:02:17,080 --> 00:02:18,790
All right, so I have an assertion.

30
00:02:18,790 --> 00:02:23,500
I don't have any completion there and they can try running this test and see if it works.

31
00:02:23,890 --> 00:02:24,680
So let's try.

32
00:02:24,730 --> 00:02:26,980
I will execute this test method.

33
00:02:28,900 --> 00:02:29,770
And advance.

34
00:02:30,160 --> 00:02:37,330
My assertion has failed because expected value is surging, but the actual value that was returned from

35
00:02:37,330 --> 00:02:39,550
the user object is now.

36
00:02:39,940 --> 00:02:46,150
It looks like the user's first name that has been returned by the get first name method is now, and

37
00:02:46,150 --> 00:02:48,850
this means that the first name is not initialized.

38
00:02:49,240 --> 00:02:52,360
So let's open create user method and have a look at it.

39
00:02:52,750 --> 00:02:54,130
This is my interface.

40
00:02:54,130 --> 00:02:59,380
I will go to implementation of my interface in the user service implementation class.

41
00:02:59,830 --> 00:03:06,250
And here in this method that creates new user, I'm returning an empty user object.

42
00:03:06,340 --> 00:03:10,090
It creates a new user option but does not initialize any properties.

43
00:03:10,540 --> 00:03:15,490
So I will need to at least give it user first name for it to initialize it.

44
00:03:15,790 --> 00:03:21,550
Now I will open the user class and I will create a constructor to initialize first name.

45
00:03:22,120 --> 00:03:28,720
To do that I will do right mouse click and then choose generate and then select constructor and will.

46
00:03:28,720 --> 00:03:30,820
So at first name click on okay.

47
00:03:31,150 --> 00:03:35,920
And now I have constructor that initialize this first name, I'll save changes here.

48
00:03:36,130 --> 00:03:39,980
I will go to a user service implementation, save changes here.

49
00:03:40,060 --> 00:03:46,600
Now this line of code compiles and now I will go back to a user service test method and try running

50
00:03:46,600 --> 00:03:48,370
this test method one more time.

51
00:03:51,750 --> 00:03:53,010
And now it passes.

52
00:03:53,640 --> 00:04:01,130
This means that this assertion successfully validates the expected value of first name, which is Sergei

53
00:04:01,140 --> 00:04:05,460
is equal to the actual value that has been returned from the user object.

54
00:04:06,030 --> 00:04:12,300
All right, so our test method passes, and the next step in the development process is to refactor.

55
00:04:12,680 --> 00:04:14,180
Let's do it in the following lesson.

