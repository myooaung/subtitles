WEBVTT

00:00.450 --> 00:02.010
Now it's time to log in.

00:02.250 --> 00:04.800
So go to the logging component.

00:04.800 --> 00:07.500
And here let's add this set up.

00:10.640 --> 00:21.020
And here we will create also the data which is from a reactive not forget to import reactive from view.

00:21.230 --> 00:25.400
And we will add the email here and the password.

00:28.300 --> 00:33.990
Let's return to the data and let's add it here as a model.

00:34.000 --> 00:40.000
So we model data that email and here is data.

00:41.080 --> 00:48.820
So we model data that Persaud No, we need to submit form.

00:49.030 --> 00:56.980
So let's add the function submit and let's return it in the end.

01:00.630 --> 01:07.740
And here when we submit that prevent it will be equal to the submit function.

01:08.640 --> 01:10.920
So that should be it.

01:11.280 --> 01:16.020
And now in the submit function we will post this information.

01:16.020 --> 01:17.820
So we have to get access.

01:18.600 --> 01:20.970
Uh, let's import here.

01:25.240 --> 01:31.390
Active from Marxists in the old make this synchronous and we will get.

01:34.240 --> 01:37.090
The response is equal to it.

01:37.510 --> 01:48.850
Across that post it is the p localhost port 8000 slash API slash log in and we will send the data.

01:49.660 --> 01:52.420
So that's it for the moment.

01:52.480 --> 01:57.880
But we need to add more stuff to this request.

01:58.240 --> 02:07.480
So first, uh, when we log in, we will get the access token in the response, but we won't get the

02:07.480 --> 02:09.040
refresh token like this.

02:09.820 --> 02:14.980
We need to add an option here, which is with credentials to through.

02:16.450 --> 02:25.960
So with this option, we can get the the refresh token in an HDP only cookie, but still the frontend

02:25.960 --> 02:27.790
won't be able to access it.

02:28.660 --> 02:31.210
So we go to the refresh token.

02:31.330 --> 02:40.020
The access token is in the response and the uh, toward that, the access token in the headers.

02:40.060 --> 02:47.560
We have to use this access not with access defaults headers.

02:48.400 --> 02:50.830
Common authorization

02:54.010 --> 02:58.660
is equal to this string bearer here.

02:59.380 --> 03:00.070
Space.

03:02.230 --> 03:08.530
Response, that data, that token, and that's it.

03:08.770 --> 03:20.230
So when we submit no, we will add the the token in the header and this will be applied for every request

03:21.070 --> 03:22.470
and the latitude.

03:22.540 --> 03:24.180
Next authority will see.

03:24.610 --> 03:26.620
We will get the authenticated user.

03:27.040 --> 03:30.130
Still, we need to redirect after we log in.

03:30.310 --> 03:34.250
So we'll get the outer hue which is equal to use.

03:34.510 --> 03:38.950
Rather, don't forget also to import it.

03:39.310 --> 03:42.580
In the end here we will wait it out there.

03:43.000 --> 03:48.880
Push to the main page and that's it.

03:49.300 --> 03:51.190
Now let's try to log in.

03:51.430 --> 03:59.710
So I will use the same user that I created, and if I sign in and I will get redirected to the homepage,

03:59.710 --> 04:03.470
it means that I successfully logged in.

04:03.490 --> 04:06.400
Also, let's check the application here.

04:06.430 --> 04:07.000
Cookies.

04:07.780 --> 04:11.990
We will see a refresh token, which is a setup only.

04:12.370 --> 04:15.040
So that is working fine.

04:15.610 --> 04:18.820
And if we try to log in again.

04:20.370 --> 04:20.760
Oh.

04:21.240 --> 04:25.170
I will login now with the same user.

04:27.100 --> 04:33.760
We will still login, but this time we will have also the authorization.

04:34.120 --> 04:37.150
We have the bearer token in the headers.

04:37.630 --> 04:41.230
So the buried token is also added here.

04:41.920 --> 04:47.950
Now in the next story, let's get the authenticated user from this header.
