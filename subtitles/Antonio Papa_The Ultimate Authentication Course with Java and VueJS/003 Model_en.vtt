WEBVTT

00:00.150 --> 00:01.890
Our database and tables are ready.

00:03.640 --> 00:09.610
We need to implement an object in Java that will map to that table.

00:10.480 --> 00:13.330
We are going to use Java all our M.

00:13.330 --> 00:15.700
So object relationship model model.

00:16.210 --> 00:18.910
It means that we have java object.

00:18.910 --> 00:24.910
That is the exact image of the database of the data structure that we have on the database.

00:26.320 --> 00:27.790
So going to create.

00:29.630 --> 00:30.020
Class.

00:31.130 --> 00:32.690
We call it user.

00:35.880 --> 00:37.740
I mean, have its target.

00:38.880 --> 00:41.160
And this class is the.

00:43.480 --> 00:46.870
The class that will represent my using database.

00:47.320 --> 00:53.380
So all the information that I have on my database table, I will have to audit here.

00:54.570 --> 00:59.160
So I have private long I.D..

01:01.330 --> 01:03.370
Private string.

01:04.930 --> 01:05.380
First thing.

01:07.550 --> 01:08.480
Private string.

01:09.080 --> 01:09.560
Last name.

01:13.390 --> 01:15.610
Private string email.

01:18.000 --> 01:19.590
Private drink.

01:20.760 --> 01:21.210
Buzzer.

01:25.400 --> 01:31.820
Now to end all these private fields, I will need getters and setters.

01:32.450 --> 01:34.400
And we need a constructor to the class.

01:34.910 --> 01:40.550
This is where the dependency that's the dependency called Lombok that I mentioned.

01:40.550 --> 01:43.010
It will facilitate the work that we have to do.

01:44.360 --> 01:49.010
So I will use this annotation getter.

01:50.980 --> 01:54.340
And these are notation setter.

01:56.450 --> 01:57.380
And these will.

01:59.070 --> 01:59.370
We look.

02:00.920 --> 02:08.540
Create and generate getters and setters for every field on this in this entity.

02:08.750 --> 02:10.430
So on this object.

02:11.590 --> 02:19.540
You will see it when you interact with it is as if you generated to get their ancestors or selves.

02:20.590 --> 02:28.270
It's not only forget those ancestors that need, it is also allows to generate constructors and other

02:28.270 --> 02:29.590
things like that to string.

02:31.660 --> 02:33.490
For example, you can also do that.

02:36.260 --> 02:40.130
Two string generated two string metal in a standard way for everything.

02:42.830 --> 02:47.000
And that also sought to generate constructors in constructors in this case.

02:47.150 --> 02:47.990
I don't want that.

02:48.110 --> 02:51.860
I want to have my own constructor defined.

02:53.450 --> 03:01.040
So I will, uh, generate constructor for all methods.

03:01.430 --> 03:04.850
Okay, but I'm going to make this constructor private.

03:07.090 --> 03:13.840
The reason for this, we are going to use Java pattern, which is the factory method.

03:14.950 --> 03:19.870
So if I want to create a new user, I will not use the constructor to do that.

03:20.830 --> 03:24.040
I will have static methods type user.

03:27.160 --> 03:27.820
Called off.

03:29.210 --> 03:31.130
It is the factory method pattern.

03:31.790 --> 03:34.160
So it will be first name.

03:35.800 --> 03:36.430
String.

03:37.590 --> 03:38.340
Last name.

03:40.860 --> 03:41.460
String.

03:42.590 --> 03:45.290
Email string.

03:47.580 --> 03:48.090
Password.

03:53.620 --> 03:54.940
And then I will return.

03:57.210 --> 03:58.940
Any misuse of user.

04:02.840 --> 04:10.070
No first name, last name, email and password.

04:12.290 --> 04:12.550
Okay.

04:14.430 --> 04:20.670
And because this constructor is private, it can be used here but cannot be used outside.

04:20.940 --> 04:24.470
So you will never be able to create anything with the constructor.

04:24.480 --> 04:26.430
You lose it with this method.

04:28.200 --> 04:28.800
You see that?

04:28.800 --> 04:29.520
The ads?

04:29.520 --> 04:29.850
No.

04:30.150 --> 04:32.290
The ad is managed by the database.

04:32.310 --> 04:34.110
We define it as an identity field.

04:35.130 --> 04:41.640
And in fact, here we also have to to give this information to a string.

04:41.640 --> 04:47.220
So we need to annotate these fields with ID.

04:48.810 --> 04:52.140
This one from our Spring Framework Data and a patient ID.

04:54.970 --> 05:00.070
Need to be careful because there is also another famous idea annotation from Java Persistence.

05:01.480 --> 05:03.630
That's not what we need in this case.

05:03.640 --> 05:06.970
So we need this or spring framework data annotation ID.

05:07.780 --> 05:10.150
This is the one we should use.

05:12.220 --> 05:20.560
And one last thing missing this constructor we are going to annotate with persistence constructor.

05:20.560 --> 05:23.200
Okay, so this is total spring.

05:23.200 --> 05:24.220
This is the constructor.

05:24.220 --> 05:31.510
That's my GBC spring data GDC will use when mapping data from user to here.

05:32.020 --> 05:34.710
This is what we want to have.

05:37.100 --> 05:40.310
And for the moment, this is a.

05:41.490 --> 05:42.890
Everything we need.

05:43.950 --> 05:48.240
We don't need to get those ancestors because Lombok will do this for us.

05:49.170 --> 05:56.620
So we have a model that represents our database going to live presentation mode.

05:58.650 --> 06:00.480
My file is ready.

06:01.080 --> 06:06.620
I relaunched the application to make sure I didn't break anything that still compact compiles it.

06:06.630 --> 06:07.500
I don't have any error.

06:07.920 --> 06:09.270
So the application is running.

06:11.800 --> 06:14.980
Now the only thing missing is to commit my changes.

06:15.340 --> 06:21.190
So step three more already and I can commit and go to the next step.
