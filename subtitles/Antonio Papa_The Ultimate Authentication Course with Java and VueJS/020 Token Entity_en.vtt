WEBVTT

00:00.660 --> 00:09.420
Next up on a video to be to start the data model that allows us to keep track on the back end of the

00:09.420 --> 00:16.950
tokens that we issued so that when we are identifying users, we are not just relying on the information

00:16.950 --> 00:18.630
that user that is sent.

00:18.930 --> 00:26.250
But that we have a way to validate on our site that indeed that refresh token belongs to that user and

00:26.250 --> 00:29.880
that we issued tokens ourselves.

00:30.660 --> 00:40.470
To start, we have to change our implementation database and we'll paste that structure just to save

00:40.470 --> 00:41.160
a few seconds.

00:42.060 --> 00:49.020
This is the structure that we're going to, to to the so we create a table table called token.

00:51.030 --> 00:58.410
Do you have an idea to identify each row refresh token expire that issue that and a reference to user.

00:58.420 --> 01:07.890
So I want to have foreign key that says this table is a many to one relationship to user.

01:08.160 --> 01:15.090
So one user will have many issue issue tokens and we'll keep track of them on the database.

01:16.110 --> 01:20.760
We need to add a new Java class to be a record called Token.

01:22.070 --> 01:22.340
Okay.

01:25.890 --> 01:27.000
So token.

01:27.000 --> 01:28.320
We love string.

01:30.080 --> 01:30.920
Refresh token.

01:33.970 --> 01:36.400
Local time issued at.

01:37.950 --> 01:40.650
Local time ex fired.

01:40.650 --> 01:41.070
That's.

01:44.280 --> 01:44.540
That's.

01:44.550 --> 01:44.780
It's.

01:47.670 --> 01:49.830
My record is done in my user.

01:49.830 --> 01:50.790
I need to create.

01:53.670 --> 01:54.980
A map of collection.

01:56.420 --> 01:57.050
Private.

01:58.040 --> 01:58.610
Final.

02:02.010 --> 02:03.660
Set of token.

02:07.150 --> 02:07.990
I call it tokens.

02:10.260 --> 02:11.820
And this will be a new set.

02:14.540 --> 02:16.760
I will need to change the constructor.

02:19.090 --> 02:22.360
I will allow a collection on the constructor.

02:24.470 --> 02:33.650
A collection of token tokens, and these are called DOT tokens stored at all tokens.

02:37.800 --> 02:44.430
And here in the construction, I will do collections, empty lists.

02:46.700 --> 02:48.680
I would love three methods here.

02:49.580 --> 02:50.570
Public void.

02:55.750 --> 02:57.760
Public votes.

02:59.230 --> 03:00.640
I'm talking.

03:06.330 --> 03:08.550
These tokens.

03:09.610 --> 03:09.890
I.

03:16.200 --> 03:19.470
These tokens had token.

03:24.400 --> 03:25.840
I will create also.

03:27.210 --> 03:27.660
Public.

03:29.480 --> 03:30.140
Boolean.

03:32.520 --> 03:33.370
That's.

03:36.250 --> 03:37.540
Uh, remove token.

03:42.620 --> 03:43.700
Token token.

03:46.250 --> 03:50.000
These tokens are more token.

03:52.020 --> 03:53.900
I will return this.

03:59.200 --> 04:02.260
And I will also add another one also.

04:02.320 --> 04:06.070
Boolean remove token.

04:09.000 --> 04:09.870
Token if.

04:11.910 --> 04:14.310
Uh, predicates.

04:18.660 --> 04:20.470
Super token.

04:22.940 --> 04:23.520
Pretty good.

04:23.670 --> 04:28.370
This will allow me to do a removal based on the filter, so I'll return.

04:30.690 --> 04:32.910
These are tokens talked.

04:35.770 --> 04:37.000
Remove all.

04:38.110 --> 04:39.250
Based on the predictions.

04:40.630 --> 04:41.440
Sorry, not remove.

04:41.440 --> 04:44.260
All remove is based on the predicted.

04:45.370 --> 04:45.820
And.

04:47.420 --> 04:48.070
That's it.

04:48.080 --> 04:52.070
I have my guitar and up, but I don't want to forget that and settle for this.

04:52.940 --> 04:57.530
So I will move this from here.

04:59.650 --> 05:01.060
I'll move it here.

05:01.070 --> 05:01.900
So here.

05:01.910 --> 05:02.830
Just to get there.

05:04.790 --> 05:07.760
Huge trendsetters yet to set her.

05:09.740 --> 05:14.090
You get around Sutter and you get there.

05:14.120 --> 05:15.080
And Sutter.

05:17.810 --> 05:19.930
And here I thought so.

05:20.330 --> 05:21.410
It's also strange.

05:23.880 --> 05:24.500
Please.

05:24.510 --> 05:27.360
We don't have too many lines of code.

05:30.940 --> 05:32.500
And it's done on my user.

05:33.100 --> 05:39.670
So this class also, it's it has a same name as that one, which means that if we use them in the same

05:39.670 --> 05:46.720
place, we will need to reference them through the, um, the, the foo foo name.

05:47.260 --> 05:47.950
I don't want that.

05:47.950 --> 05:50.890
So I'll just refactor and rename this to JWT.

05:51.160 --> 05:56.160
This is the mapping to the digital bootie and I will also adapt this class.

05:56.170 --> 05:57.010
So we'll will be.

06:00.250 --> 06:00.670
Get their.

06:03.800 --> 06:04.620
Private.

06:05.540 --> 06:07.100
Final long.

06:08.720 --> 06:08.960
Sorry.

06:14.780 --> 06:17.150
Get her private.

06:17.390 --> 06:20.420
Final time.

06:23.750 --> 06:25.040
He shoots at.

06:28.350 --> 06:34.810
I won't also get her private funnel or call time.

06:36.110 --> 06:38.120
It's duration.

06:40.100 --> 06:41.870
Expiration.

06:41.870 --> 06:42.320
Yes.

06:42.320 --> 06:43.400
So it's cold here.

06:46.190 --> 06:51.080
Now we need to add this constructor parameters refactor.

06:51.830 --> 06:53.420
I have some weird things here.

06:53.430 --> 06:54.140
Okay.

06:54.770 --> 06:56.030
I will refactor this.

06:58.410 --> 07:00.180
He shoots at

07:03.570 --> 07:04.050
far.

07:05.970 --> 07:06.870
Expiration.

07:09.140 --> 07:10.370
He calls this.

07:16.590 --> 07:17.580
Inspiration.

07:25.150 --> 07:28.620
Then you need to do it like this.

07:32.100 --> 07:34.140
Local date time.

07:40.250 --> 07:41.110
For instance.

07:44.130 --> 07:45.100
Uh, zone.

07:45.180 --> 07:46.710
I did see some defaults.

07:49.840 --> 07:52.420
Time for instant.

07:56.290 --> 07:56.490
So.

07:56.500 --> 07:57.640
No, this is my fault.

08:00.340 --> 08:06.370
I will delete these matters and replace its usage because basically it does the same thing as here and

08:06.370 --> 08:06.760
here.

08:06.760 --> 08:09.190
I will also have VAR claims.

08:11.530 --> 08:12.250
Equals.

08:12.340 --> 08:15.850
I will remove these claims there.

08:18.910 --> 08:23.920
Game and now I will also do user.

08:25.290 --> 08:28.980
Ready equals claims dot.

08:30.640 --> 08:31.660
Get user I.D..

08:35.170 --> 08:37.080
And then I'm all for it.

08:37.090 --> 08:45.400
Shoots at it, calls claims that got issued at the expiration

08:48.310 --> 08:53.980
claims that get expiration and then return a new trailer with t.

08:54.960 --> 08:57.210
I have to change this also to return to the routine.

08:58.230 --> 09:00.510
You should witty.

09:00.510 --> 09:03.900
And yet I will use tokens that I already have.

09:07.350 --> 09:09.120
I use ready?

09:12.610 --> 09:14.170
And then local time.

09:17.240 --> 09:18.500
Of instant.

09:21.290 --> 09:24.950
And she we will do instant.

09:28.770 --> 09:29.880
He sent.

09:32.110 --> 09:33.700
Of her book the second.

09:37.840 --> 09:39.280
You should at.

09:41.170 --> 09:42.040
You get time.

09:45.190 --> 09:45.910
And I miss missing.

09:45.910 --> 09:51.700
So when I see some default here, so I'll still copy this.

09:56.560 --> 09:59.830
It's the same, he said of his shoot at Expedition.

10:01.840 --> 10:04.800
Of course, this man's finish.

10:05.040 --> 10:09.660
I need to find problems here.

10:09.660 --> 10:11.060
The problem is easy to solve.

10:11.100 --> 10:11.610
It's.

10:12.060 --> 10:12.960
Get you ready.

10:14.530 --> 10:15.000
Here.

10:15.340 --> 10:17.140
This user I.D. is no longer.

10:17.140 --> 10:18.700
You said it is a JWT.

10:19.510 --> 10:21.250
So I'll call it refresh.

10:25.390 --> 10:31.300
And these in fact, what I want you to have here and here, I want to have this.

10:33.900 --> 10:35.550
I still have one issue here.

10:41.170 --> 10:42.090
Uh, missing.

10:42.820 --> 10:42.950
Yeah.

10:43.260 --> 10:43.600
This.

10:45.870 --> 10:46.530
And here.

10:49.940 --> 10:51.560
I was this.

10:53.920 --> 10:54.840
So I have you.

10:55.270 --> 10:57.650
I keep the structure of my program.

10:57.670 --> 11:02.830
I keep one class, which is a representation of my JSON web token.

11:03.250 --> 11:05.560
I have it here and contains all the information.

11:05.860 --> 11:07.660
I'm not allowing anyone to change these.

11:07.660 --> 11:12.910
This is private, so I just get a immutable representation of what I want.

11:15.610 --> 11:19.030
Again, I keep the structure of logging in the class logging.

11:19.030 --> 11:25.690
So my logging class is the one that is able to handle me a generic representation.

11:27.820 --> 11:30.770
With the validation that that I want when I ask for it.

11:32.150 --> 11:40.100
And service contains all the logic what I will implement and the rest.

11:41.700 --> 11:43.350
Now it's time to run the application.

11:46.190 --> 11:48.020
And to see if everything still works.

11:51.050 --> 11:52.670
So I don't have a refresh token.

11:53.090 --> 11:56.750
I will need to log in logging works.

11:58.130 --> 12:01.760
Let's get access token to get authenticated user.

12:07.950 --> 12:10.200
I get authenticate to users, so it works.

12:10.860 --> 12:15.450
Refresh token works logout works.

12:15.450 --> 12:16.080
I logged out.

12:16.080 --> 12:24.180
I try to refresh again, no tokens, so my endpoints are working and I changed my application to be

12:24.180 --> 12:28.530
able to deal with the future change that I need to do.

12:28.530 --> 12:37.680
So it's important when we build an application, if we see that the design, it's the structure is not

12:39.120 --> 12:43.140
helping us, it's we are going against the implementation.

12:43.470 --> 12:50.040
He's also important to take a step back, think of it and redesign, which was what we did here.

12:50.040 --> 12:57.210
We clearly we will need the expression issue that user ID we need to store it here so we will need to

12:57.210 --> 12:59.520
handle it in these two classes.

12:59.610 --> 13:01.980
So we need to adjust the class as well.

13:02.100 --> 13:07.190
In the next video we will go through the actual implementation of the logic needed behind.
