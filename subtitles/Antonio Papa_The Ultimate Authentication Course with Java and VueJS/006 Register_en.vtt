WEBVTT

00:00.030 --> 00:00.990
Authentication API.

00:01.260 --> 00:05.550
The first thing that we're going to need is a registry endpoint to register new users.

00:07.350 --> 00:07.710
So.

00:09.170 --> 00:09.800
To do that.

00:11.780 --> 00:19.280
I'm going to add a post mapping recipes, post changes, states, create resources.

00:19.280 --> 00:20.840
So I'm going to create a new resource.

00:20.840 --> 00:22.040
I'm going to create a new user.

00:23.700 --> 00:27.750
And the value of this will be a slush register.

00:30.000 --> 00:32.620
I'm going to map this.

00:34.880 --> 00:36.050
To a methods.

00:37.360 --> 00:38.500
Called Register.

00:42.000 --> 00:44.100
This method will return a user.

00:44.130 --> 00:46.620
I want to return the user information that I created.

00:47.760 --> 00:50.820
And I'm going to.

00:53.750 --> 00:55.880
To use this notation request body.

00:55.880 --> 01:03.080
So I'm telling spring framework know that this, uh, object that I'm putting here, which will also

01:03.080 --> 01:08.210
be the object user, is a representation of my request.

01:10.160 --> 01:15.950
Now use this and then I want to have access to my repository that I created.

01:16.610 --> 01:19.070
So it private final.

01:20.120 --> 01:20.630
User.

01:21.940 --> 01:22.630
User rapport.

01:24.360 --> 01:25.740
It's going to be called User Report.

01:27.350 --> 01:31.820
Now I'm going to add this to the constructor because spring uses constructor injection.

01:33.450 --> 01:35.840
To inject the controller.

01:35.850 --> 01:41.340
What this means is that spring will detect that the repository exists.

01:42.810 --> 01:49.800
There will be a bin with this user repository and spring will when generating the bin that announces

01:50.220 --> 01:57.600
the request mapping, it will inject here the class that I need, the implementation that I need, and

01:57.600 --> 02:01.290
on my registered method I'll return user repo.

02:02.300 --> 02:03.920
Dot save.

02:03.920 --> 02:06.770
We see here all the methods that are in the crude repository.

02:07.280 --> 02:11.750
By default, just by sustaining it, we save the user that we receive.

02:15.000 --> 02:15.300
Okay.

02:18.740 --> 02:19.550
And this is it.

02:22.460 --> 02:26.210
We can now leave or presentation mode.

02:27.110 --> 02:27.560
We can.

02:27.770 --> 02:29.090
We launched the application.

02:31.940 --> 02:32.480
It runs.

02:34.250 --> 02:38.510
And if I send my request, I have it here already.

02:38.510 --> 02:39.050
A request?

02:40.750 --> 02:44.590
First name, a last name, a email, a password.

02:44.620 --> 02:47.650
I am not sending it because it is ended by a database.

02:48.190 --> 02:50.350
If I send this, I get an error forbidden.

02:51.610 --> 02:52.610
The reason for that?

02:54.270 --> 02:55.710
He's on my spring security.

02:59.390 --> 03:02.240
I need to disable.

03:05.000 --> 03:05.560
See us.

03:06.050 --> 03:10.170
RF Okay, well, we are going to use, uh.

03:11.460 --> 03:19.530
JWT two for authentication or going to authentication with Jason a token we don't need um, cross-site

03:19.530 --> 03:22.170
request forgery protection.

03:22.440 --> 03:28.770
This is to be used when to use session cookies, for example, which is not what we are going to, to

03:28.860 --> 03:29.160
use.

03:29.520 --> 03:36.180
So we need to disable this because in this case is not allowing our application to.

03:37.180 --> 03:38.980
Um, to authenticate.

03:42.070 --> 03:44.050
And now if I relaunched my application.

03:49.550 --> 03:53.510
If I send again my requests, it creates a user.

03:53.750 --> 03:58.800
83/1 name, a last name, a email a at a dot com password.

03:58.860 --> 04:01.730
B So my application is working.

04:02.810 --> 04:05.330
I'm saving things on the base.

04:05.330 --> 04:13.130
If I open my table now I see that I have a few users here, one that I just created and the others I

04:13.130 --> 04:16.700
had created in in some attempts before.

04:17.150 --> 04:18.380
Well, building the test cases.

04:20.000 --> 04:23.840
So the application is working as we expect.

04:24.970 --> 04:25.720
We can stop.

04:26.720 --> 04:27.590
The application.

04:29.030 --> 04:33.080
And as always, we can commit these changes.

04:33.800 --> 04:35.510
We can view what we are changing.

04:38.290 --> 04:40.660
So we can go meet step.

04:41.840 --> 04:42.410
Six.

04:45.610 --> 04:52.570
Register and point is always good to keep track of the iterations that we do when I work at Commit.
