WEBVTT

00:00.090 --> 00:05.070
It's now time to change your login and point to return information in a more standard way.

00:05.580 --> 00:07.740
We're going to use JWT or JSON.

00:07.740 --> 00:15.480
Web token is an industry standard to exchange security claims between two systems to parties to applications.

00:17.490 --> 00:24.060
Jason What token looks like this is an encoded string of characters and then can then be decoded to

00:24.270 --> 00:30.540
check this information and it can be validated if the if it's properly signed.

00:32.730 --> 00:33.780
We're going to start.

00:34.170 --> 00:37.140
The first thing is to change bom.

00:37.650 --> 00:42.780
We need to add dependencies here to to use json a token.

00:43.320 --> 00:50.670
So I'm going to add a new dependency to be hired or JSON web token.

00:52.110 --> 00:55.620
And the first one that I need to add is JWT API.

00:56.310 --> 01:03.210
I need to add another dependency which is also IO dot Jason or token because this API doesn't have implementation.

01:03.210 --> 01:05.970
So I need to pick one in the implementation.

01:06.210 --> 01:08.400
It would be needed at runtime.

01:10.320 --> 01:19.980
And I add a third dependency which will be done when we want to, uh, and marshal the object into Jason.

01:19.980 --> 01:23.970
So to, to use on the API we need IO dot Jason web token.

01:25.590 --> 01:30.180
We could use either Jason or Jackson.

01:30.740 --> 01:31.890
I'm going to use Jackson.

01:35.470 --> 01:44.410
I can leave now the presentation mode reload maven and I can go to my authentication controller here.

01:45.190 --> 01:47.680
I will first change my log in response.

01:47.680 --> 01:49.930
We don't want to return it.

01:50.170 --> 01:52.930
First name, last name, email.

01:53.440 --> 01:56.440
So I'm going to delete all of this.

01:56.440 --> 01:59.170
I'm going to just return a string with token.

02:00.700 --> 02:04.060
And here this will not be a user, it will be a token.

02:05.680 --> 02:08.140
And in my log in response, I will just return.

02:11.790 --> 02:16.740
Token dot get token will be a token object, not a string.

02:18.210 --> 02:21.030
So here my changes are done.

02:22.990 --> 02:24.360
And we need to create a new class.

02:27.300 --> 02:28.810
I need to create a new class here.

02:28.850 --> 02:30.020
I will call it token.

02:33.000 --> 02:33.330
And.

02:33.330 --> 02:33.780
Yes.

02:36.840 --> 02:41.250
To be a private final string token.

02:42.570 --> 02:43.890
I will need to get there for this.

02:46.500 --> 02:47.940
I will create a constructor.

02:50.470 --> 02:53.650
But it would be a private constructor.

02:54.650 --> 02:58.000
Okay, this is so I don't allow this class to be instantiated.

02:58.390 --> 03:01.210
And I will build a public static.

03:04.580 --> 03:06.050
Uh, factory method of.

03:06.740 --> 03:09.410
I need a long user ID.

03:13.540 --> 03:22.450
I need a long, uh, validity in minutes, and I need a string.

03:24.990 --> 03:25.650
Secret key.

03:29.160 --> 03:31.860
I will implement also a private static.

03:34.530 --> 03:35.680
Uh, method.

03:37.520 --> 03:38.690
Well, let me do this for now.

03:39.030 --> 03:40.500
So I'll just return here.

03:42.390 --> 03:44.370
I will other var.

03:44.370 --> 03:47.010
I will call it issue.

03:49.460 --> 03:50.120
He should wait.

03:52.130 --> 03:52.880
And it will be.

03:54.500 --> 03:55.280
Instance?

03:55.280 --> 03:55.610
No.

04:00.150 --> 04:05.010
And these will return to an object, you know.

04:05.490 --> 04:10.320
So I will then use your WTS builder.

04:12.530 --> 04:17.020
It'll be my token of our token.

04:20.000 --> 04:31.640
So she told Yes Builder, I will either claim my claim will be a user ID value.

04:31.640 --> 04:32.720
It will be user ID.

04:35.530 --> 04:41.260
I will also set issue at issue date.

04:43.830 --> 04:51.210
Issued a notice of type instance and these uses dates to create the date from instance we are going

04:51.210 --> 04:52.200
to use to.

04:54.530 --> 05:03.140
Javits changes U.S. into dates into that API so we lose proper fields.

05:06.300 --> 05:10.560
We need to set also the expiration date and these will to be also date.

05:10.740 --> 05:12.220
From Mateta.

05:12.250 --> 05:13.380
I will say that is no.

05:15.070 --> 05:15.520
Plus.

05:17.700 --> 05:21.300
Uh, so it's issue date plus.

05:23.750 --> 05:29.660
Validity in minutes and then I will use temporal units.

05:29.870 --> 05:31.670
Uh, coronal unit minutes

05:35.150 --> 05:35.840
sine which.

05:38.940 --> 05:40.440
Signature algorithm.

05:44.690 --> 05:46.160
It's just two, five, six.

05:46.670 --> 05:48.680
And I will lose my secret key here.

05:49.580 --> 05:51.620
And then I will return these with compact.

05:56.090 --> 05:58.610
This will be my token, so I'll return.

06:02.270 --> 06:05.450
Token of token.

06:11.580 --> 06:11.940
Sorry.

06:14.950 --> 06:15.610
Return.

06:20.700 --> 06:21.690
Eternity is actually.

06:36.330 --> 06:37.560
You too can.

06:40.160 --> 06:40.730
We this?

06:44.010 --> 06:44.250
Okay.

07:04.430 --> 07:04.840
So.

07:06.220 --> 07:11.840
And I say, okay, so this is how I usually return my token.

07:14.420 --> 07:16.790
No one motorization service in logging.

07:22.510 --> 07:24.400
I will still find by email.

07:24.400 --> 07:26.110
I will still see the passwords much.

07:26.830 --> 07:33.630
But here then I will return token of user get I.D..

07:33.880 --> 07:36.190
I would love the validity of one minute.

07:38.070 --> 07:39.150
Can say 10 minutes.

07:39.450 --> 07:41.580
I am adding the L because it's long 19th.

07:42.210 --> 07:49.350
And here I have my very long and secured and.

07:52.900 --> 07:56.110
Safe, secret key.

08:03.470 --> 08:05.690
They will say that this is for my access token.

08:10.890 --> 08:11.850
Have an issue.

08:11.850 --> 08:12.720
Huge.

08:12.780 --> 08:13.380
Yes.

08:13.390 --> 08:14.940
Returns of type token.

08:19.680 --> 08:21.270
And it sits on my service.

08:24.630 --> 08:26.460
So now my controller, everything is fine.

08:27.810 --> 08:29.250
I can launch my application.

08:33.010 --> 08:34.470
Now if I try to log in.

08:42.370 --> 08:42.990
Okay.

08:43.000 --> 08:44.440
I made a mistake here.

08:45.550 --> 08:47.290
Let's stop this on my token.

08:48.100 --> 08:53.140
These secret needs to be built in base64, so I need to do base64.

08:55.350 --> 08:55.920
ENCODE.

09:05.470 --> 09:07.120
Uh, getting colder.

09:07.150 --> 09:12.370
Getting colder, getting colder and cold to string.

09:17.690 --> 09:22.440
Then he will use secret key and the secret key being bites.

09:22.440 --> 09:25.700
So get bites in your it, which is what you're using.

09:27.290 --> 09:28.370
I run this again.

09:30.110 --> 09:32.750
I sent my authentication and now I have a token.

09:33.770 --> 09:35.360
I can copy the token here.

09:37.220 --> 09:39.530
I can pass it here.

09:48.750 --> 09:51.240
Handed off my user ID.

09:52.760 --> 10:00.480
He should at expiration date evaluate signature because it's not validated yet.

10:03.800 --> 10:06.980
But this token contains the information I want.

10:13.190 --> 10:14.360
I will have to work my.

10:17.810 --> 10:18.650
Secrets here.

10:21.950 --> 10:22.940
To validate.

10:22.940 --> 10:24.080
I can also do that.

10:24.080 --> 10:25.490
Just to show.

10:28.380 --> 10:29.160
It works.

10:29.190 --> 10:32.070
So I'll take my secret key.

10:34.520 --> 10:35.690
I mean it here.

10:37.370 --> 10:39.980
And as you can see, the signature is valid.

10:42.240 --> 10:46.260
So we are able to the coast tokenised and validated it was properly sent.
