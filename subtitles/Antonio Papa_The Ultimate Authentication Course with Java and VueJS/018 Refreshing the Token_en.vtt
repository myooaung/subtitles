WEBVTT

00:00.390 --> 00:07.590
Next step on an application is to implement a reflection point that will allow us to refresh the access

00:07.590 --> 00:08.580
token that we have.

00:09.340 --> 00:12.210
Okay, we start in the controller.

00:13.140 --> 00:15.560
We keep the same consistency.

00:15.570 --> 00:17.400
We try to start in same place.

00:21.010 --> 00:22.810
We'll implement a post mapping.

00:26.210 --> 00:28.640
Value will be done.

00:30.050 --> 00:30.620
Refresh.

00:36.130 --> 00:41.650
Public method that will return a refresh refresh response to be my aim, my video.

00:43.980 --> 00:44.670
Refresh.

00:47.070 --> 00:49.560
And here is where it gets interesting.

00:50.730 --> 00:54.240
I wouldn't inject a cookie in spring.

00:54.240 --> 00:58.160
These just these invitation cookie value and I need to specify the name of the cookie.

00:58.170 --> 01:04.740
So refresh token to be of type screen going to be my refresh token.

01:08.160 --> 01:12.720
And I need also my HTP servlet response.

01:15.230 --> 01:19.630
I end of the response so I will needs this method here.

01:22.540 --> 01:23.620
Actually, I'm not sorry.

01:23.860 --> 01:25.520
I will not need this year for sure.

01:25.540 --> 01:26.800
You just refresh, Duncan.

01:35.220 --> 01:35.850
And here.

01:36.890 --> 01:39.230
And we'll return.

01:39.440 --> 01:41.960
I still need to refine this refresh response.

01:43.070 --> 01:45.590
So record refresh response.

01:48.690 --> 01:51.600
Strong message.

01:51.720 --> 01:54.360
I just want to have a message with a token for now.

01:56.190 --> 01:57.000
I would refresh.

01:59.510 --> 02:03.020
And you only think.

02:05.570 --> 02:14.420
So your uncle, you still don't know anything else they have to do here is to to to fetch to to return

02:14.420 --> 02:17.900
to the entity with to fetch that user.

02:17.900 --> 02:19.580
So return.

02:22.940 --> 02:25.610
New refresh response.

02:27.460 --> 02:28.150
What service?

02:31.640 --> 02:33.470
And here I'm just checking.

02:36.780 --> 02:38.540
Still deciding what I'm going to use.

02:39.600 --> 02:39.810
What?

02:39.810 --> 02:40.500
Service.

02:41.070 --> 02:41.610
Refresh.

02:41.610 --> 02:42.210
Access.

02:45.200 --> 02:46.370
Refresh access.

02:46.940 --> 02:50.540
And they have to pass refresh like.

02:51.470 --> 02:55.310
Okay, this method doesn't exist.

02:55.310 --> 02:56.450
So it means I need to create.

02:57.920 --> 03:02.000
It will return a token, not a string.

03:07.420 --> 03:08.710
So this will cause an issue here.

03:10.900 --> 03:16.340
It will cause an issue here because if this returns a token we need to do get to.

03:19.010 --> 03:19.430
It's.

03:20.920 --> 03:24.340
Its soft for for controller is soft.

03:24.910 --> 03:30.250
So refresh axis, what are we going to do in the refresh since we are going to.

03:31.380 --> 03:32.580
We have the refresh token.

03:32.970 --> 03:39.930
We will find a user for the refresh token and we just need to provide a new access token.

03:42.830 --> 03:44.450
How will this work?

03:44.480 --> 03:51.620
So we already built a method that allows us to get a user ID from tokens.

03:51.620 --> 03:52.280
So in token.

03:55.820 --> 03:58.240
From refresh skin.

03:59.690 --> 04:00.770
Refreshed or constricted.

04:02.330 --> 04:06.350
We build reusable methods whenever, whatever, whatever we can, we can.

04:06.770 --> 04:09.940
In this case, we built already method that we can use now.

04:09.950 --> 04:10.730
So we use it.

04:11.390 --> 04:13.070
We don't need to repeat code.

04:14.310 --> 04:14.760
And.

04:16.350 --> 04:16.800
After.

04:16.980 --> 04:18.340
We just need to get.

04:19.020 --> 04:19.980
And you logging.

04:21.330 --> 04:24.990
So what I'm going to do here in the logging class.

04:29.430 --> 04:30.270
In log in class.

04:30.270 --> 04:40.080
I'm going I'm going to write in letters that will allow me to refresh token because my and the logic

04:40.080 --> 04:42.990
of of log in is being handled here.

04:43.920 --> 04:50.760
It's where I'm defining I in the logic of building the token itself using the token class, but the

04:50.760 --> 04:55.530
logic of and the link to the log in, it's done here.

04:58.070 --> 04:59.420
So we built a public.

05:02.240 --> 05:02.750
Static.

05:05.480 --> 05:07.300
A logging of.

05:11.200 --> 05:12.430
Long user ID.

05:19.190 --> 05:20.240
Long Israeli.

05:23.880 --> 05:25.530
String axis secret.

05:28.830 --> 05:30.810
And talking.

05:35.600 --> 05:43.730
And a refreshed look in this case to be a string, I'll say token refresh took.

05:47.600 --> 05:47.740
Yeah.

05:48.200 --> 05:53.870
And it's important to build it as a token because if it was a string, we already have a method like

05:53.870 --> 05:57.050
this, so it will not be possible and we will return.

05:57.050 --> 05:57.800
And you log in.

06:00.780 --> 06:03.060
Which will contain a token.

06:05.560 --> 06:07.680
Of you already.

06:09.920 --> 06:10.430
One out.

06:12.510 --> 06:13.350
Access secret.

06:15.750 --> 06:17.100
And the other will be.

06:18.600 --> 06:19.440
My refreshed looking.

06:22.650 --> 06:22.980
That's it.

06:23.700 --> 06:24.060
Okay.

06:24.810 --> 06:27.000
And then in my token class.

06:30.680 --> 06:32.390
In my service class.

06:33.860 --> 06:36.590
And we live off our logging.

06:38.090 --> 06:39.290
Logging of.

06:41.650 --> 06:51.700
User I.D. So I get my user I.D., I get my access token secret and I will have a token.

06:53.410 --> 06:56.380
I want to reuse my refresh token.

06:56.920 --> 07:00.490
So in this case, I will not be able to build.

07:02.400 --> 07:03.330
At a token.

07:06.310 --> 07:08.320
Of me no matter like this.

07:09.390 --> 07:16.680
Because I define it as immutable and I didn't want to have this constructor, so I will add the new

07:16.680 --> 07:17.130
method.

07:49.950 --> 07:51.390
Token of refresh talk.

07:54.220 --> 07:54.580
Okay.

07:55.090 --> 07:55.480
So.

07:58.370 --> 07:59.140
Like this.

07:59.150 --> 08:00.160
I have my token

08:02.710 --> 08:10.420
building through the metal glass and it could be a bit weird why we are using factory methods instead

08:10.420 --> 08:12.940
of just allowing to instantiate token zero in there.

08:14.410 --> 08:15.340
It's an option.

08:15.640 --> 08:22.390
I prefer sometimes to to this kind of objects that they are almost immutable by nature.

08:22.630 --> 08:31.540
I prefer to have this these kind of things to to avoid having people initiating them and charging them,

08:31.540 --> 08:32.020
etc..

08:33.250 --> 08:35.290
You just want one different button.

08:35.290 --> 08:39.760
And we started it to include a button, so we will keep using it.

08:42.750 --> 08:44.700
So in this case, I have my token.

08:45.240 --> 08:46.440
I have my log in.

08:48.540 --> 08:50.220
I will return my logging.

08:58.190 --> 09:00.740
I have an error, of course, because this is.

09:03.550 --> 09:04.570
Blogging, not talking.

09:07.030 --> 09:09.190
And this could be changed to an inland variable.

09:12.640 --> 09:18.610
And these can also be adults and there is no real gain.

09:19.900 --> 09:23.630
So in this case, to get access to conduct get.

09:24.490 --> 09:26.280
But it's the same same thing.

09:26.590 --> 09:27.370
So we can run.

09:29.730 --> 09:30.060
This.

09:32.220 --> 09:34.810
We will test this by getting a.

09:36.410 --> 09:38.480
My logging user.

09:38.870 --> 09:39.770
Logging my user.

09:41.840 --> 09:45.590
I have my cookie here.

09:47.300 --> 09:49.640
So now when I call my refreshed token.

09:51.610 --> 09:56.550
I am able to refresh it and I have a new access token because I have my cookie.

09:57.120 --> 09:58.320
I have the cookie in the request.

10:00.570 --> 10:02.470
And I was able to work with it.

10:02.520 --> 10:03.390
I have my cookie.

10:03.390 --> 10:03.660
You.

10:05.500 --> 10:07.810
So it works as we expected.

10:08.350 --> 10:19.180
And we also use the bits and different buttons in in Java to have this log in and token and encapsulated

10:19.180 --> 10:27.130
and not contained and not incentivising people to just build instances whenever they can.

10:27.520 --> 10:29.800
Most importantly, we preserve the logic.

10:30.730 --> 10:32.920
We have this definition of the validity.

10:33.220 --> 10:41.050
It's always in the same place, which means that even if we want to make it customisable, we could.

10:41.620 --> 10:42.940
But a good start.

10:44.420 --> 10:47.390
Private static final.

10:53.280 --> 10:54.000
And.

10:57.750 --> 11:01.440
Access token validity.

11:04.110 --> 11:06.660
When hell, I'm missing the tape.

11:07.050 --> 11:07.560
It is long.

11:25.150 --> 11:25.760
These as well.

11:25.780 --> 11:28.450
So access token validity.

11:30.640 --> 11:32.020
Access token validity.

11:34.230 --> 11:35.130
Refresh.

11:42.900 --> 11:44.250
Refresh talking to you.

11:44.550 --> 11:45.580
So it's.

11:47.210 --> 11:48.530
1440.

11:49.100 --> 11:55.150
So it's good when we have all the same responsibility in one class.

11:55.160 --> 12:06.830
In this case, my class logging is responsible for creating new tokens and to manage my, my, my logged

12:06.830 --> 12:17.210
in status is managed here and my token ID class is just responsible to do the building and passing of

12:17.630 --> 12:24.500
the JWT token from string to something and extract something from.

12:24.500 --> 12:25.790
That's that string.

12:26.660 --> 12:31.820
And my app or service is the notification service.

12:31.820 --> 12:35.300
So he's responsible for everything, everything else.
