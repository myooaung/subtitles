WEBVTT

00:00.870 --> 00:04.170
Unless very creative registrant points, it's working.

00:04.170 --> 00:06.570
We saw that we can create users.

00:07.200 --> 00:15.450
So now it's time to create the logging endpoint to allow us to authenticate user start with a post mapping.

00:16.580 --> 00:19.040
And we defined the endpoint that we need.

00:19.640 --> 00:26.120
So in this case, I want thus logging, I will keep the same structure to the same conversion.

00:26.120 --> 00:30.200
So I left logging response to return a logging response object.

00:31.280 --> 00:40.010
I will call my method logging and my, uh, the body of the request will be, uh, structured as the

00:40.040 --> 00:41.840
logging, uh, request.

00:44.550 --> 00:45.000
Object.

00:47.150 --> 00:50.090
That doesn't exist yet, but we are going to create it right away.

00:50.690 --> 00:53.460
We use Java records as before.

00:53.480 --> 00:59.000
So my logging request will be simply a string email.

01:00.020 --> 01:01.040
String password.

01:04.160 --> 01:11.510
And for the log in response, I will copy exactly the same structure that I'm using in the register

01:11.510 --> 01:11.970
and points.

01:11.990 --> 01:14.390
I will change the name to log in response.

01:16.640 --> 01:19.850
In this case, one could argue.

01:21.660 --> 01:25.450
Why not using the same object if the object is already here?

01:25.470 --> 01:29.580
Why do I duplicate gold instead of just using the same object?

01:30.630 --> 01:31.230
And the reason?

01:31.440 --> 01:34.100
And the answer to that is that these two objects.

01:34.110 --> 01:40.980
So first of all, they are not classes, they are records, and they are objects with two different

01:40.980 --> 01:41.560
purposes.

01:41.670 --> 01:44.370
This is a responsible record.

01:45.450 --> 01:52.230
Its purpose is to, um, structure the response of the register in point call and log.

01:52.230 --> 01:55.500
And response is to structure the response of the logging in point.

01:56.460 --> 01:59.610
And at this point in time, the response is the same.

01:59.610 --> 02:03.600
But in the future they might f different responses.

02:03.750 --> 02:10.980
And by clearly separating these two concerns in different records, we make sure that in the future,

02:10.980 --> 02:15.870
if we have to change one or the other, we will not have side effects and we will not have to do these

02:15.870 --> 02:16.470
impact analysis.

02:16.470 --> 02:22.410
So just a good practice to use these different purpose, um, records.

02:25.460 --> 02:27.140
So my application, I need my user.

02:27.140 --> 02:29.870
I need to find a user for this email that I'm going to receive.

02:31.220 --> 02:38.960
So in my old service, I will create a method logging and this method will take logging request.

02:41.460 --> 02:41.910
Email.

02:43.790 --> 02:44.830
And logging request.

02:45.580 --> 02:48.350
But those are the arguments of my method.

02:49.550 --> 02:53.090
I will gently ask my ID to create a method.

02:54.870 --> 03:02.220
Method of return type user to take a string email, string password and for the moment it returns null.

03:02.610 --> 03:03.990
For the moment, it's it's fine.

03:08.080 --> 03:08.590
So.

03:09.810 --> 03:10.630
On my controller.

03:10.630 --> 03:11.490
I will return.

03:13.240 --> 03:17.170
And you log into response.

03:19.930 --> 03:21.520
And if you see the scene as you go off, log in.

03:21.520 --> 03:24.280
The response is I.D. first name, last name, email.

03:24.760 --> 03:28.170
So, user load I.D..

03:31.010 --> 03:32.480
User first name.

03:34.240 --> 03:36.280
User last name.

03:37.900 --> 03:40.680
User email we see that's.

03:41.970 --> 03:43.590
The editor helped me with that.

03:44.670 --> 03:47.220
So return log and response I.D..

03:47.250 --> 03:48.390
First name, last name.

03:48.390 --> 03:48.990
Email.

03:50.830 --> 03:52.840
My controller is implemented.

03:53.230 --> 04:00.310
We go to the logging method in the service I'm knowing authorization, service or service as I called

04:00.310 --> 04:00.460
it.

04:01.510 --> 04:01.840
Indeed.

04:01.840 --> 04:06.160
I need to simply do, uh, I need to do two things.

04:07.120 --> 04:11.140
I need to find my user by email.

04:13.770 --> 04:14.760
I need to.

04:15.890 --> 04:17.480
See if the passwords.

04:19.790 --> 04:20.240
Much.

04:21.740 --> 04:23.750
And I have to return my.

04:24.260 --> 04:24.590
That's it.

04:26.520 --> 04:27.570
Find you there by email.

04:27.750 --> 04:29.790
So I want to find my user.

04:31.680 --> 04:38.520
And I use my repository as a user repo and I need to find and I don't have a method yet to find by email.

04:38.520 --> 04:39.570
So I'll write it like this.

04:39.570 --> 04:40.650
Find by email.

04:42.380 --> 04:49.760
Java is a verbose language, so you should write long methods and the methods should be descriptive.

04:50.180 --> 04:58.980
And sometimes it's a bit too much, too much information on the screen, but sometimes it comes, uh,

04:59.290 --> 05:02.330
you know, there is a reason for, for this to be like that.

05:03.020 --> 05:04.370
And this is one of these cases.

05:04.370 --> 05:12.800
And in fact, I will now kindly ask my editor to also create this method on my user repository class.

05:13.040 --> 05:21.680
So my user repo, this class will return an optional user because the user might or might not exist

05:21.680 --> 05:22.280
for this email.

05:24.570 --> 05:30.840
And in fact, when I write it like this spring data, which is the framework that we're using, we'll,

05:30.990 --> 05:35.430
uh, write a query in a background that is something like this.

05:38.720 --> 05:41.120
Email equals email.

05:41.490 --> 05:49.670
Okay, this is what it's done with this email being that you may hear the argument in the background,

05:49.670 --> 05:51.680
the framework will write this query for us.

05:51.860 --> 05:57.920
So it will find, uh, to do not to select all but select one.

05:59.700 --> 06:02.430
Where email, uh, equals email.

06:02.430 --> 06:04.220
So we don't need to worry about this.

06:04.230 --> 06:12.750
The framework will do, uh, for us in this case, having to write a longer, long letter names.

06:12.810 --> 06:14.060
It's comes to.

06:14.860 --> 06:15.010
To.

06:15.090 --> 06:15.480
Other than to.

06:16.930 --> 06:18.190
So I find my email.

06:18.190 --> 06:21.340
This is of the optional user, so I might not find it.

06:22.330 --> 06:23.410
If I don't find it.

06:24.380 --> 06:26.690
I will throw an exception.

06:26.900 --> 06:31.670
So in this case I will throw a new response status except exception.

06:31.670 --> 06:36.470
We are always using the same expert exception issue status bed request.

06:37.900 --> 06:39.430
And I will say.

06:41.660 --> 06:43.670
Invalid credentials.

06:43.700 --> 06:50.540
Okay, so if I don't find a user for this email, I will throw the request with the invalid credentials.

06:51.710 --> 06:53.300
Then I need to see if the passwords match.

06:54.400 --> 06:55.090
So if.

06:56.970 --> 06:59.010
And I will use my password recorder for this.

07:00.730 --> 07:02.800
Which contains the metal matches.

07:03.130 --> 07:09.790
And if you see the signature, the method will compare a raw password with the encoded password without

07:09.790 --> 07:12.250
being without digging into detail.

07:12.850 --> 07:19.600
But the password is stored usually with the salt to add to to avoid that.

07:19.720 --> 07:25.960
If you encode the password, you will find that you think if we called multiple times the same password.

07:26.620 --> 07:28.540
If you don't use the salt, you get the same result.

07:28.780 --> 07:40.060
So despite not being able to, uh, decode, um, the code again, the password, we also, you will

07:40.180 --> 07:47.230
always be able to to see to two different people add the same password of not so to avoid these, usually

07:47.230 --> 07:53.950
they are stored with we the salt that solves this issue and causes.

07:55.110 --> 08:00.930
Passwords that are encoded multiple times to have always different output and the pace.

08:01.320 --> 08:02.550
So my robust word.

08:03.820 --> 08:04.630
When I received it.

08:05.200 --> 08:08.110
And then my uncle, the password user gets the password.

08:10.130 --> 08:11.990
And in case I want to negate this.

08:11.990 --> 08:13.280
So if they don't match.

08:15.000 --> 08:17.340
I want to draw new response.

08:17.340 --> 08:18.210
State is exception.

08:21.890 --> 08:23.750
HTP status by request.

08:27.080 --> 08:27.980
In this case.

08:30.160 --> 08:32.950
You have all these provincials.

08:38.530 --> 08:39.970
Same errors as above.

08:40.570 --> 08:47.590
Here we opt to hide the fact if the wrong credential is the user or the password.

08:48.310 --> 08:49.810
This is simply to.

08:51.270 --> 08:58.890
If someone is trying to find use of password by, uh, brute force, uh, we added this piece of information

08:58.890 --> 09:04.950
from, from them, and then we just return the user and we can clean up these comments.

09:04.950 --> 09:06.480
They're not needed anymore.

09:11.450 --> 09:11.990
Screen.

09:13.850 --> 09:16.040
So I'm leaving presentation mode.

09:16.550 --> 09:17.930
I will run my application.

09:21.350 --> 09:21.690
Bozeman.

09:21.890 --> 09:23.120
I will try to login.

09:25.520 --> 09:25.970
Log in.

09:26.060 --> 09:27.230
My password is correct.

09:27.230 --> 09:28.610
If my password is wrong.

09:29.390 --> 09:35.270
I have all these credentials is my password is correct, but my email doesn't exist.

09:37.420 --> 09:39.640
I get also wrong credentials.

09:41.570 --> 09:47.030
So my logging in point is working as we, uh, we expected.

09:48.830 --> 09:50.570
Only thing left is to commit.

09:52.330 --> 09:52.930
The changes.

09:53.740 --> 09:55.420
Step 11 Logging in point.

09:56.900 --> 09:59.690
Changed to controller was changed.

10:01.180 --> 10:01.960
Service.

10:03.300 --> 10:09.600
And we also changed the repository to implement these methods so we can commit.

10:10.970 --> 10:12.110
And seeing the next video.
