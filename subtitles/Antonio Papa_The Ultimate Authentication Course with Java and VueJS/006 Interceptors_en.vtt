WEBVTT

00:00.210 --> 00:06.750
So we successfully got the authenticated user, but we got that user only for 30 seconds because the

00:06.750 --> 00:08.550
access token expires.

00:08.850 --> 00:17.090
So now let's use the refresh token to generate another access token for that or create a directory.

00:17.100 --> 00:18.870
I'll call it interceptors.

00:22.870 --> 00:33.010
Inside all create a new typescript file and call it active and the in the main that is all import here.

00:36.010 --> 00:42.070
Interceptor auctions in the main that is.

00:42.460 --> 00:47.080
So we imported this file, but currently it does not do anything.

00:47.080 --> 00:54.250
So here let's import access from auctions and let's add some default values.

00:54.730 --> 01:01.420
The first one that we will add is active defaults based URL is equal.

01:02.140 --> 01:12.370
And for this all the old go to the register component and I will cut this prefix old at this end.

01:12.370 --> 01:20.130
All added here and now with this change the request will look better.

01:20.140 --> 01:27.520
So this is a post request to the register end point and we can refactor all the other requests.

01:27.610 --> 01:29.980
So this is the log in.

01:29.980 --> 01:34.570
And when we get the authenticated user, we just send the great request to the user.

01:35.080 --> 01:41.440
So that is the first change that will improve our code.

01:42.010 --> 01:52.510
The second one is using an interceptor for our refresh token for that old use active interceptors.

01:53.590 --> 02:01.450
For the response and we will use the use function so we will intercept every response.

02:02.350 --> 02:07.730
The first case here is when the response is successful.

02:07.750 --> 02:10.240
We don't want to handle that case.

02:10.240 --> 02:14.610
So the response will return directly the response.

02:14.620 --> 02:17.050
So we don't want to intercept that.

02:17.980 --> 02:21.010
We want to intercept the error case.

02:21.020 --> 02:24.670
So when we get an error, what do we want to do?

02:25.720 --> 02:32.350
If we if the token is expired, it will return status code of 401.

02:32.350 --> 02:36.850
So we'll make the condition if error that response.

02:40.450 --> 02:46.480
That status is equal to 401.

02:48.790 --> 02:50.950
What do we want to do?

02:51.400 --> 02:51.700
So.

02:53.150 --> 02:59.710
In this case, we want to send the request to the refresh token to get a new access token.

02:59.720 --> 03:03.910
So we'll get the response here is equal to it.

03:04.550 --> 03:06.860
So let's make this function synchronous.

03:08.630 --> 03:10.850
We will await actions.

03:12.260 --> 03:16.340
Will send a post request to the refresh token.

03:16.880 --> 03:18.110
To the refresh endpoint.

03:18.110 --> 03:18.410
Sorry.

03:19.640 --> 03:28.940
We do not need to send any data, but we need to add with credentials to through because we need to

03:28.940 --> 03:33.790
send the refresh token in the other request.

03:33.800 --> 03:40.070
For example, the user here, we don't need to send the refresh token because we need only the access

03:40.070 --> 03:40.610
token here.

03:41.210 --> 03:48.020
But in this request we need to send also the refresh token in the back and will use it.

03:48.830 --> 03:59.570
And if the response is successful, which means response, that status is equal to 200, then it means

03:59.570 --> 04:06.970
we have to get the bear token again, like this old copy of this code.

04:07.820 --> 04:10.340
I'll go to access and I'll put it here.

04:10.340 --> 04:20.630
So access default headers authorization will be the new bear token and we have to do the same request

04:20.630 --> 04:21.260
again.

04:21.260 --> 04:28.220
So for that we need to return access and insert output error that config.

04:29.570 --> 04:30.980
So inside the.

04:32.320 --> 04:32.640
Error.

04:32.650 --> 04:39.460
That config contains all information regarding the previous request, and if we do it like this, it

04:39.460 --> 04:42.520
means that we have to do the same request.

04:43.360 --> 04:51.910
And if we don't get the 401 error or something else, we will return directly the error here.

04:52.570 --> 04:53.770
And that's it.

04:54.520 --> 04:59.540
This is how we use an interceptor to use our refresh token.

04:59.920 --> 05:05.950
And with this change now we can see that we are getting our user.

05:06.610 --> 05:14.920
If we inspect now and if we refresh, we can see that we are calling the user here.

05:15.700 --> 05:18.490
It is another unauthenticated.

05:18.850 --> 05:27.220
And then immediately we call the refresh endpoint, which we get a new token and then we call the user

05:27.220 --> 05:31.710
again, which this time we get the authenticated user.

05:31.720 --> 05:37.060
So this was the part where we do the request again and that's it.

05:37.240 --> 05:41.110
This is how we use the refresh token.

05:41.600 --> 05:46.840
Now in the next tutorial, let's get a logout button here.
