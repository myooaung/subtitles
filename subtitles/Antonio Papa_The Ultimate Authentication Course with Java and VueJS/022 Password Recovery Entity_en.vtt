WEBVTT

00:00.090 --> 00:09.360
Next step is to build a forgot endpoint to be used when we forgot, forget the password and we need

00:09.360 --> 00:18.930
to use it, uh, to, to, to call the, to call the process to and restore that password.

00:19.320 --> 00:21.780
We will start with a key machine.

00:22.050 --> 00:23.550
We will need a new table for this.

00:25.560 --> 00:28.650
So I will create a new table.

00:31.530 --> 00:34.130
Create his table.

00:34.140 --> 00:41.070
If not exists, I will call it password recovery.

00:49.490 --> 00:49.940
Okay.

00:50.180 --> 00:51.510
And then you laugh.

00:51.710 --> 00:52.080
And I.

00:54.540 --> 00:57.240
Which shall be identity and not to.

01:01.840 --> 01:03.190
And a token.

01:08.500 --> 01:09.310
Also not new.

01:11.230 --> 01:17.500
And also in reference to my user, I will connect this to the to the main database.

01:17.500 --> 01:20.190
So I will associate with the for any key.

01:20.830 --> 01:27.490
I'll just call it foreign key password recovery user.

01:27.910 --> 01:32.920
Foreign Key User References user dot 90.

01:33.760 --> 01:46.090
So I'm defining here constraint saying that this user is my foreign key to link at domain main user

01:46.090 --> 01:46.390
table.

01:48.400 --> 01:49.960
So this site is done.

01:50.440 --> 02:00.250
I will also need to build my model, so I need to go to my data layer and I will as a new Java class.

02:00.610 --> 02:03.190
It will be also a record.

02:04.090 --> 02:07.600
I will call it password recovery.

02:15.720 --> 02:20.100
And my best recovery will be just a token.

02:22.930 --> 02:25.570
So for brevity, write it like this.

02:26.560 --> 02:29.350
So public record password recovery string token.

02:30.760 --> 02:32.800
I need to change my user implementation.

02:32.800 --> 02:34.450
I need a second collection.

02:36.520 --> 02:42.940
So private final sets of recovery.

02:49.380 --> 02:50.190
You know, since.

02:53.370 --> 02:57.330
And I would love to do the same thing I did here.

02:58.440 --> 03:04.380
So these sorts of recoveries aren't.

03:07.680 --> 03:12.930
At home, no pasties also in the constructor.

03:16.080 --> 03:20.700
So it'll be a collection of bus recovery.

03:23.790 --> 03:24.300
Conscious.

03:24.340 --> 03:30.360
Plus recovery's precise, more readable.

03:30.360 --> 03:36.150
So I create a map of collection and set passwords.

03:39.340 --> 03:43.900
As I adds in the constructor, I add my arguments.

03:43.900 --> 03:51.490
So I mean, let's also pass a collection, which means that here I will have to also add collections.

03:53.030 --> 03:53.150
The.

03:55.770 --> 03:56.010
Okay.

03:56.010 --> 04:03.360
So we initialize as empty and of course we need the same helper methods that we have for tokens.

04:03.360 --> 04:05.340
We will also create them.

04:05.340 --> 04:10.650
So public void of passwords.

04:12.660 --> 04:13.380
Recovery.

04:17.590 --> 04:18.550
Search recovery.

04:20.020 --> 04:24.550
These dot password recovery dots as.

04:26.310 --> 04:27.450
But the recovery.

04:31.780 --> 04:38.170
Public Boolean remove password recovery.

04:47.760 --> 04:53.610
These dot buster recoveries actually have to return this.

04:55.460 --> 04:57.500
Plus, recovery's not remove

05:00.530 --> 05:02.510
recoveries, so I'll remove that object.

05:02.510 --> 05:05.150
And finally I will.

05:06.410 --> 05:15.980
Public Boolean remove password recovery if predicate

05:18.470 --> 05:19.310
cashier mark

05:22.670 --> 05:23.780
password recovery.

05:26.720 --> 05:27.800
Uh, predicates.

05:33.670 --> 05:37.320
Return these recoveries or remove.

05:40.110 --> 05:40.830
Predicate.

05:43.820 --> 05:45.470
And this should be it.

05:45.480 --> 05:47.930
So my model is updated.

05:47.960 --> 05:55.580
I also I have now the link between the two entities and I'm starting I'm constructing it with an empty

05:55.580 --> 06:01.610
list and then I'm fetching the data that, uh, that I need from the.

06:04.070 --> 06:13.130
So from the new model and I have these helper methods to allow me to handle this internal mapping.

06:14.300 --> 06:15.470
So this is done.

06:16.910 --> 06:21.710
I will need a new method also on the repository.

06:22.010 --> 06:23.130
So I will add it.

06:24.240 --> 06:32.180
Now it's very similar to the one I already did custom, so it will also return an optional off type

06:32.180 --> 06:32.660
user.

06:36.120 --> 06:37.440
Fines by

06:40.170 --> 06:40.770
buzzer.

06:45.630 --> 06:47.340
Password recovery.

06:51.380 --> 06:52.340
Recovery still can.

06:56.930 --> 06:58.010
Best sort of recovery still.

06:59.030 --> 06:59.420
Okay.

07:00.620 --> 07:02.360
And string token.

07:02.360 --> 07:09.470
As we said last time, the name methods will not work which spring that gdb c for the moment.

07:10.220 --> 07:12.080
But we follow the same pattern.

07:12.080 --> 07:14.420
It makes it easier in the future if we have to.

07:14.660 --> 07:18.860
If this is already supported, we can always implement.

07:22.330 --> 07:29.320
So in this case I will add multi-line string.

07:33.240 --> 07:33.900
It's here.

07:41.070 --> 07:45.780
So select new star from.

07:50.110 --> 07:54.760
From user, you know, join.

07:59.130 --> 08:02.330
Best friends recovery.

08:08.130 --> 08:14.940
PR um, you know, tiny equals PR and not user.

08:19.270 --> 08:27.250
We're pure token equals token like this token.

08:34.280 --> 08:34.690
Okay.

08:34.700 --> 08:35.690
So it's fine.

08:37.220 --> 08:41.570
It's not detected yet because we didn't run and refreshed the database.

08:42.200 --> 08:47.150
But as soon as we do, it will work fine and correct.

08:49.510 --> 08:49.930
This.

08:52.470 --> 08:54.210
So we have proper inundation.

09:00.180 --> 09:01.290
So this is done as well.

09:03.570 --> 09:11.370
Now I have to go back to the controller to implement the forward method.
