WEBVTT

00:00.150 --> 00:04.140
Now it's time to create the actual endpoint to get to the authenticated user.

00:04.770 --> 00:06.450
This will be a different endpoint.

00:08.960 --> 00:10.520
It's not a post mapping.

00:11.480 --> 00:15.920
In this case we are just getting information so we do not have a payload.

00:15.920 --> 00:21.440
It will be just a request and and the others associated with it.

00:21.770 --> 00:23.600
So get mapping.

00:25.520 --> 00:27.920
We are mapping now, we are going to have get mapping.

00:27.920 --> 00:32.930
It will be HTP get endpoint value, it will be user.

00:33.710 --> 00:36.980
Oh, it's the same one that we defined in the interceptor before.

00:37.700 --> 00:40.850
So we're in the Web MVC configuration.

00:40.850 --> 00:44.870
So we are saying that the intercept that applies to this path, this is the path that's going to apply

00:44.870 --> 00:45.080
to.

00:45.690 --> 00:45.870
Okay.

00:47.410 --> 00:51.160
Get mapping value user public.

00:52.650 --> 00:53.540
Use a response.

00:57.440 --> 00:57.830
User.

00:59.000 --> 01:05.360
Same structure that we've been following so far and we are going to need the server request.

01:05.370 --> 01:07.940
Your HTP servlet request.

01:09.190 --> 01:10.250
Scarlett request.

01:14.170 --> 01:23.410
And what we did in the last video was to define already defined to to put in place the interceptor that

01:23.410 --> 01:25.690
will allow me to get the user from the request.

01:28.980 --> 01:29.310
To do.

01:29.310 --> 01:35.250
So what we are going to to do is simply var user.

01:38.620 --> 01:39.130
User.

01:43.100 --> 01:44.090
And from the request.

01:47.330 --> 01:48.290
Get adequate.

01:50.130 --> 01:50.490
User.

01:54.380 --> 01:55.190
Import class.

01:55.670 --> 01:57.770
It's my user, the one that I define it.

02:04.220 --> 02:05.390
And we return.

02:07.190 --> 02:10.780
And you use the response.

02:10.790 --> 02:16.630
I don't have it funded yet, so my user response will be exactly the same as my register response.

02:18.410 --> 02:19.070
For the moment.

02:20.930 --> 02:22.760
So I use the same butter.

02:27.210 --> 02:31.550
Use a response and return the response.

02:31.560 --> 02:32.890
User dots.

02:32.930 --> 02:33.450
Get ID.

02:34.500 --> 02:34.980
User ID.

02:34.980 --> 02:36.060
Get first name.

02:36.930 --> 02:37.410
User.

02:37.410 --> 02:38.430
Get last name.

02:39.480 --> 02:40.740
User get email.

02:43.840 --> 02:44.590
And that closes.

02:48.520 --> 02:49.600
So my end point is here.

02:51.160 --> 02:52.180
We launched the application.

02:57.000 --> 02:58.500
And I will call my API user.

03:01.030 --> 03:02.260
So I have an issue here.

03:02.440 --> 03:02.960
Yes, it is.

03:02.980 --> 03:05.680
No, let me login.

03:08.050 --> 03:13.960
Let me copy this authenticated user.

03:14.320 --> 03:15.160
I have my bare.

03:16.850 --> 03:17.210
Okay.

03:18.020 --> 03:20.390
And I need to add my token after the better.

03:25.440 --> 03:26.760
I still have an issue here.

03:27.720 --> 03:31.020
So let's check and debug what is happening.

03:33.770 --> 03:37.880
Using his new means that most likely my interceptor is not working.

03:42.340 --> 03:42.750
Okay.

03:42.760 --> 03:43.600
This part is wrong.

03:43.600 --> 03:44.320
Is API.

03:46.280 --> 03:47.360
Uh, slash user.

04:00.740 --> 04:01.020
Okay.

04:01.020 --> 04:04.700
It is correct, Beth, but I have an issue with.

04:09.500 --> 04:10.270
The issue here.

04:10.310 --> 04:10.790
Why?

04:14.140 --> 04:20.530
Because I checked, I copied the refresh token and not the access token.

04:21.250 --> 04:22.990
That's why I'm having this issue.

04:24.040 --> 04:24.760
Which is good.

04:24.820 --> 04:26.860
Is that your application is.

04:29.490 --> 04:33.490
Doing well know is good.

04:33.750 --> 04:34.710
Oh, does this work?

04:35.190 --> 04:35.600
And it.

04:35.610 --> 04:38.250
These interceptors are not easy to understand.

04:39.910 --> 04:41.640
We launched the application in your big mode.

04:41.880 --> 04:43.470
And I will put a debug here.

04:45.750 --> 04:48.750
And I will put debug on my interceptor.

04:49.560 --> 04:51.660
And when running in your book, what will see?

04:55.110 --> 04:58.620
When I send my request, it will stop in the interceptor.

04:59.130 --> 05:06.010
The letter is running before everything else, even before the request is sent to slash user or to slash

05:06.030 --> 05:08.070
logging, whatever it goes.

05:08.340 --> 05:09.420
The interceptor is run.

05:12.490 --> 05:13.750
In the next step is here.

05:14.440 --> 05:16.150
And if I look now in my request.

05:22.630 --> 05:28.300
In my attributes I will show briefly in.

05:30.940 --> 05:32.410
I feel it expression.

05:34.030 --> 05:36.820
I think tourism attributes that returns all of them.

05:43.450 --> 05:43.950
Okay.

05:43.960 --> 05:44.530
We have.

05:47.220 --> 05:49.600
A lot of attributes here, but we have users.

05:49.600 --> 05:54.640
So in my request I added this attribute.

05:55.570 --> 05:55.960
That's.

05:55.960 --> 05:56.500
I need it.

05:57.310 --> 05:58.490
And this is how it works.

05:58.520 --> 06:03.910
So we define it basically one method that we run before any other end points.

06:04.420 --> 06:13.510
And this is usually the place where we put some of these security constraints that are used and across

06:13.790 --> 06:14.530
all other methods.

06:14.710 --> 06:22.810
So if this same user information would be needed in other endpoints, you just have to do exactly the

06:22.810 --> 06:27.190
same and you let the information available in the HTP request.
