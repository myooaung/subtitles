WEBVTT

00:00.780 --> 00:09.120
Final step on an application is to implement Google Authenticator to allow us to signing also with a

00:09.120 --> 00:11.400
Google account to this.

00:11.820 --> 00:16.470
To do that, we go to Google dot dot, dot, google dot com.

00:17.670 --> 00:24.930
We go to console and we can search apps and services credentials.

00:27.120 --> 00:29.760
And we will create.

00:31.010 --> 00:32.760
And you and.

00:34.320 --> 00:36.030
Oscar Grant 80.

00:38.380 --> 00:39.490
Create credentials.

00:41.090 --> 00:41.990
Wealth granted

00:44.570 --> 00:46.670
application type will be web application.

00:48.050 --> 00:49.440
I'll call this my up.

00:53.100 --> 00:58.020
And we will need to as the allowed human rights.

00:58.050 --> 01:01.080
So in this case I'm going to use.

01:03.890 --> 01:10.450
And same ones that we had already for the in the, in the back end.

01:10.460 --> 01:18.830
So in back end we allowed, uh, front end you arise from, uh, localhost 3088 and 4200.

01:21.660 --> 01:24.390
So we will allow these as well.

01:25.110 --> 01:30.720
We will create and we will get an I.D. and secrets that we're going to need.

01:31.590 --> 01:32.560
So back to the code.

01:32.910 --> 01:37.380
We start with Paul Maximo and I'm going to add a dependency.

01:39.770 --> 01:42.380
Com not google API client.

01:42.380 --> 01:43.400
Google API client.

01:43.430 --> 01:47.300
Latest version is 1.3.2.

01:48.350 --> 01:50.750
This is the one we are going to use.

01:52.220 --> 01:55.850
And then in the controller we need to add a new post mapping.

02:00.220 --> 02:01.390
My Valley view will be.

02:03.510 --> 02:05.610
Slash Google+.

02:10.670 --> 02:13.490
And same thing, same structure.

02:15.040 --> 02:16.150
Google of.

02:17.880 --> 02:18.570
Response.

02:23.800 --> 02:25.180
What response?

02:26.020 --> 02:27.800
Google of.

02:30.050 --> 02:30.590
Google.

02:34.020 --> 02:37.770
Request body Google of.

02:39.590 --> 02:40.310
Requests.

02:46.200 --> 02:49.560
We implement two records.

03:02.210 --> 03:06.380
So in this case, be string token.

03:08.150 --> 03:10.790
String secret.

03:19.010 --> 03:19.940
And string code.

03:27.060 --> 03:27.990
In response.

03:33.400 --> 03:37.450
Well, the response in this case would be just shrink.

03:39.580 --> 03:39.940
Token.

03:48.270 --> 03:49.440
I guess so.

03:50.070 --> 03:53.910
Only thing left to implement my logging.

03:56.430 --> 04:03.630
We what service never call Google was again.

04:09.010 --> 04:12.040
In fact, I'll just need to pass the token.

04:14.280 --> 04:17.610
So we're off requests.

04:19.470 --> 04:19.890
Token.

04:24.940 --> 04:28.250
In the area will return you.

04:30.900 --> 04:32.190
Google's response?

04:34.080 --> 04:35.150
No dot.

04:37.850 --> 04:40.130
I will implement this all the time.

04:40.490 --> 04:42.110
So please to turn logging.

04:44.360 --> 04:44.870
Okay.

04:46.640 --> 04:59.360
So we will be looking to get access to can get token so something can drill on this method.

05:04.620 --> 05:10.980
I'll start by using a Google Plus or Google I.D. to token of verify it.

05:12.630 --> 05:14.240
I will call it simply verifier.

05:16.990 --> 05:17.200
They?

05:17.200 --> 05:21.340
I need also Google I.D. token to be my token.

05:23.530 --> 05:24.760
These are all initials.

05:25.510 --> 05:25.840
No.

05:29.430 --> 05:30.270
Then I will try.

05:33.510 --> 05:34.000
35.

05:36.620 --> 05:38.000
Equals new.

05:42.710 --> 05:44.780
Google token.

05:46.850 --> 05:48.560
Google I.D. token verifier.

05:50.360 --> 05:51.200
It's not new.

05:51.980 --> 05:53.630
Use Google I.D. Token.

05:53.630 --> 05:55.910
A 55 year builder.

05:58.170 --> 06:03.380
And this builder will take Google Nuts.

06:03.600 --> 06:08.100
HTP Transports New Trucks to transport.

06:11.790 --> 06:14.220
And also second argument is a new.

06:15.990 --> 06:17.160
Jesus on factory.

06:24.230 --> 06:24.480
Sit.

06:24.650 --> 06:25.280
Audience.

06:33.630 --> 06:35.150
So I have to catch some.

06:37.100 --> 06:37.890
What is your.

06:58.180 --> 07:00.310
I know I need to do this.

07:06.850 --> 07:08.680
And I'll be able to set audience.

07:13.530 --> 07:14.460
Collectors.

07:22.510 --> 07:24.580
Not collectors collections.

07:26.330 --> 07:26.690
Single.

07:26.700 --> 07:28.430
Totally least this is what they need.

07:29.630 --> 07:34.910
And we have here something that doesn't exist yet.

07:35.480 --> 07:36.080
Which.

07:37.190 --> 07:39.970
Will be the client entity.

07:41.040 --> 07:44.190
So I it up by A.D..

07:46.970 --> 07:47.600
And then.

07:49.410 --> 07:50.460
I will build.

07:52.230 --> 08:04.140
So my verifier is, you know, my I.D. token will be equal to verify, verifier, verify.

08:05.630 --> 08:09.500
Token in this case, the token that comes here.

08:10.860 --> 08:11.250
Okay.

08:12.030 --> 08:17.040
I'm still missing this, so I will create field.

08:18.660 --> 08:19.830
My feeling would be final.

08:24.520 --> 08:26.500
I needs, of course.

08:31.410 --> 08:34.050
Not sure why we're here.

08:35.010 --> 08:36.060
So this will be final.

08:38.540 --> 08:48.740
I added to the constructive parameter here and I will use the same thing, so I'll take this from the

08:48.740 --> 08:49.370
configuration.

08:50.030 --> 08:51.920
In this case, security.

08:54.900 --> 08:57.950
Google clients 80.

09:01.120 --> 09:05.230
Go and call Google client I.D. to keep it simple.

09:06.340 --> 09:09.130
So now on my application properties.

09:10.100 --> 09:12.230
I will just add here.

09:16.240 --> 09:16.960
Equals.

09:17.830 --> 09:19.780
I go to my Google Chrome.

09:20.910 --> 09:23.320
Copy that client I.D. and they can paste.

09:23.500 --> 09:23.760
Sure.

09:25.650 --> 09:29.490
So if he's working on world service.

09:34.190 --> 09:35.780
I have my 82 tucano.

09:38.280 --> 09:42.150
If I have an exception here, I will throw.

09:43.510 --> 09:44.650
A new error.

09:53.000 --> 09:55.610
One of my heroes would be.

10:02.160 --> 10:02.970
Credentials are.

10:07.800 --> 10:10.020
Then after this, if.

10:12.830 --> 10:19.790
Ed is no so if didn't fail but 82 Cohen is still no it could up a.

10:25.630 --> 10:28.840
I through and you use are not found error.

10:30.390 --> 10:30.650
Okay.

10:30.660 --> 10:31.740
There's no user.

10:37.720 --> 10:39.730
Then there is one Google Glass.

10:41.000 --> 10:47.410
That's a payload class from Google payloads.

10:47.920 --> 10:51.340
And these equals to 82 candidates get pooled.

10:56.440 --> 11:00.270
Then I take this string.

11:02.450 --> 11:06.470
Here I have the information that that I need from this display.

11:07.550 --> 11:14.920
In our case, we just want for email equals payload.

11:14.930 --> 11:15.680
Get email

11:18.380 --> 11:23.300
or first name equals payload.

11:25.780 --> 11:26.320
Get.

11:27.740 --> 11:28.280
And.

11:34.170 --> 11:36.990
Get them Google calls.

11:37.800 --> 11:39.600
First name to give a name.

11:44.490 --> 11:45.570
And last name.

11:51.870 --> 11:52.800
He's the family name.

11:58.390 --> 11:59.350
So it's.

12:00.560 --> 12:01.730
I have the information I need.

12:03.660 --> 12:09.150
Now, the last thing that I will do is to see if this user already existed.

12:09.150 --> 12:09.900
Similar device.

12:10.440 --> 12:11.910
So user oppo.

12:13.200 --> 12:14.340
Find by email.

12:15.270 --> 12:15.840
Email.

12:18.200 --> 12:19.010
Or else.

12:22.970 --> 12:23.650
And it is.

12:23.660 --> 12:25.460
Or else I will use.

12:29.530 --> 12:35.130
I will use my one black expression to say, uh.

12:39.410 --> 12:40.160
User.

12:42.850 --> 12:43.300
All.

12:45.020 --> 12:46.730
To be a first name.

12:49.470 --> 12:50.280
Last name.

12:52.520 --> 13:01.970
Email and for the password I will generate a random, random, unique identifier.

13:02.480 --> 13:11.180
It doesn't really matter a lot because this is not the standard authentication flaw.

13:14.220 --> 13:15.630
Then he took us to two string.

13:34.410 --> 13:35.190
So I'll just.

13:35.190 --> 13:37.170
Just drink up.

13:37.410 --> 13:43.020
I will just use this random two string to generate a random password.

13:43.050 --> 13:47.790
It doesn't matter, because this user is not authenticated with password.

13:48.450 --> 13:57.300
It will always create a user so the user can later on used to uh, forgot endpoint to update this password.

13:58.080 --> 14:05.070
We are just creating one generic and actually I thought this.

14:08.020 --> 14:09.040
I just need this.

14:11.100 --> 14:12.290
And it's done correctly.

14:13.910 --> 14:14.680
It's like this.

14:14.690 --> 14:21.710
And here, because I'm creating a new user in this situation, I need to force save.

14:22.970 --> 14:26.900
So I will do user repo save user.

14:29.480 --> 14:32.980
And then I will copy what I already have in the log in.

14:32.990 --> 14:38.540
So it's the same, same thing, generating the token exactly as before.

14:39.200 --> 14:43.580
So just copy the same thing to paste here.

14:46.980 --> 14:48.510
So I have my log in.

14:49.860 --> 14:56.760
And in this case, I'm already learned that I have duplicated code.

14:58.200 --> 15:04.590
So it's a good thing when we have this to extract the method.

15:07.380 --> 15:10.710
And it could be this get blogging from user.

15:11.310 --> 15:15.360
So I'll refactor ideally over private method.

15:15.930 --> 15:18.420
And this private method should be called in three places.

15:18.420 --> 15:28.980
I think he is slightly different because we are using the refresh token and it's not exactly the same.

15:29.850 --> 15:33.000
But uh, everyone else is the same.

15:34.470 --> 15:42.570
There is only one small thing that I will, uh, will also do, and that is a typo.

15:42.600 --> 15:48.490
When we created the token that we need to create to the user here.

15:48.510 --> 15:54.110
I saved the TFA secret as no, but in fact, this needs to be empty string.

15:57.580 --> 16:02.800
This is because in the schema we didn't define this has not known.

16:04.060 --> 16:15.280
So because it's not defined as not thought, we will, we are still allowed to, um, to set the value

16:15.280 --> 16:15.540
as well.

16:16.000 --> 16:17.350
So we had two options.

16:17.650 --> 16:18.970
One is to change that the base.

16:19.360 --> 16:21.730
Second line is to change user here.

16:21.760 --> 16:24.610
I just change this so every time I create a new user.

16:24.790 --> 16:27.790
This is the only method that allows to create a new user on that device.

16:28.240 --> 16:34.420
Our creators, uh, we the the empty string there, and everything will work.

16:35.260 --> 16:36.520
Just stop this.

16:37.700 --> 16:40.220
Rerun my application to make sure that everything is fine.

16:42.710 --> 16:43.880
And it's not.

16:52.660 --> 16:55.000
So it will not resolve the.

16:57.660 --> 16:58.380
Property.

17:04.010 --> 17:05.870
I have a typo here, so I missed.

17:05.930 --> 17:06.800
Hey there.

17:07.730 --> 17:08.970
So no info launch.

17:11.450 --> 17:12.350
Everything is fine.

17:14.360 --> 17:18.020
And my application is working with all endpoints.
