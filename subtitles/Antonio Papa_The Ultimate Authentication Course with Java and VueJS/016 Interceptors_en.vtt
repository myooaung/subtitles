WEBVTT

00:00.450 --> 00:03.930
It's no time to create an endpoint that returns the authenticated user.

00:04.530 --> 00:10.790
This is something that is very common in applications just to have an endpoint that tells me which is

00:10.800 --> 00:12.930
user that is logged in.

00:13.380 --> 00:17.350
And to do that, we are going to use what is called an interceptor.

00:17.370 --> 00:25.910
So we are not going to do find it and we are going to use the token information that is in the other

00:25.920 --> 00:26.730
in the request.

00:28.520 --> 00:34.470
Because when you you you are using an authentication flow is very is very common and is this sort of

00:34.480 --> 00:40.580
delineation flow in particular you log in, you get a refresh token and then.

00:42.410 --> 00:44.360
You will sense the excess.

00:44.690 --> 00:49.550
You send a token when you know of others requests in the authorization either.

00:49.820 --> 00:57.320
And these we this authorization error is oh we are going to to say if the user is known or not to the

00:57.320 --> 01:00.370
application and what is the developer.

01:00.710 --> 01:01.040
So.

01:02.330 --> 01:06.800
Going to implement it here, but we are going to start actually by The Intercept.

01:06.890 --> 01:10.250
So I'm going to get a new package interceptor.

01:13.670 --> 01:20.520
Now I'm going to have a new class to be authorization.

01:22.790 --> 01:25.220
Interceptor I'm going to at.

01:26.520 --> 01:28.410
This class.

01:30.230 --> 01:36.770
And it's a it's not just one of the simplest lists, but it's also not very earth.

01:37.190 --> 01:39.890
So implements and interceptor.

01:42.470 --> 01:46.010
And I need to say that it's a component.

01:46.080 --> 01:46.280
Okay.

01:46.280 --> 01:49.430
Those are two string specific annotations.

01:49.430 --> 01:52.820
Component means that will be managed as a been in spring.

01:53.510 --> 01:59.240
And so spring will be able to manage injection, for example, for this class.

01:59.600 --> 02:04.220
And the interceptor means that it's a specific type of cluster to analyze.

02:05.360 --> 02:10.160
I will have to inject my authorization of service here.

02:11.360 --> 02:11.750
Okay.

02:12.890 --> 02:15.290
It's the main service that we have here.

02:16.670 --> 02:17.420
And this will be.

02:19.800 --> 02:20.700
Constructor, inject it

02:23.610 --> 02:24.720
and then I will override.

02:26.730 --> 02:28.650
I will overrides the pre and all method.

02:29.340 --> 02:29.550
Okay.

02:30.030 --> 02:37.170
Because this means that this interceptor will be real and will end old request before it's rooted in

02:37.170 --> 02:44.640
the controller before even before the request, even before we see the request goes to slash user,

02:44.640 --> 02:47.910
to slash login, to slash resistor, we will end all these.

02:48.180 --> 02:48.390
Okay.

02:49.020 --> 02:59.730
And to do to do that we are going to do and string authorization either.

03:02.140 --> 03:04.380
Request Dot get Heather.

03:06.290 --> 03:07.190
Authorization.

03:10.080 --> 03:10.470
Here.

03:13.930 --> 03:16.220
No, uh, validation here.

03:16.240 --> 03:17.980
So if this is new.

03:20.940 --> 03:21.510
He's known.

03:26.060 --> 03:27.830
Or if it doesn't start.

03:31.720 --> 03:34.540
Starts with, uh, better.

03:41.620 --> 03:42.250
Thrown you.

03:45.000 --> 03:45.500
Uh.

03:46.790 --> 03:47.270
No.

03:48.530 --> 03:51.020
Better token at a.

03:54.510 --> 03:54.680
Okay.

03:55.260 --> 03:56.140
This doesn't exist.

03:56.160 --> 04:01.140
I will create this together with the other errors.

04:05.560 --> 04:08.590
Ants and just copy for simplicity.

04:26.130 --> 04:26.880
No better talking.

04:31.980 --> 04:41.280
And basically what these means is that the authorization either starts always with better space and

04:41.280 --> 04:44.880
then you have the JWT token that we discussed before.

04:45.240 --> 04:49.530
This is how it's structured in India in requests.

04:49.950 --> 04:51.330
So we are going to use this.

04:51.690 --> 04:58.650
What this validation is doing is if I don't have an authorization either at all or if I have an authorization

04:58.650 --> 05:02.250
either, but it doesn't begin with bare space something.

05:02.550 --> 05:06.060
I don't even look at it and they say I don't have a valid beta token.

05:06.690 --> 05:11.130
Then what I will do is request, set attribute.

05:12.690 --> 05:13.800
I will call it user.

05:15.930 --> 05:20.340
And then I will use my service to find.

05:28.800 --> 05:30.450
It gets user.

05:35.370 --> 05:35.910
From talking.

05:36.690 --> 05:37.020
Okay.

05:37.080 --> 05:38.970
Now we'll pursue the string.

05:39.420 --> 05:43.500
Um, I'll pursue my, uh, my token.

05:43.740 --> 05:45.660
In this case, it will be authorization.

05:45.660 --> 05:47.520
Whether substring.

05:47.790 --> 05:48.230
Seven.

05:49.980 --> 05:50.520
It means that.

05:50.670 --> 05:52.020
Better space.

05:52.140 --> 05:53.520
So these are seven digits.

05:53.520 --> 05:56.550
I want everything that this past year, which will be my token.

05:58.680 --> 05:59.810
This method doesn't exist.

05:59.820 --> 06:00.750
I need to implement.

06:01.170 --> 06:07.530
It will return user object and it will take a string, which is my token.

06:09.570 --> 06:11.750
So how do I implements?

06:11.760 --> 06:13.980
This is the next question.

06:14.640 --> 06:15.840
How do I implement environment?

06:16.470 --> 06:29.010
Now if we can find the user in the token, we can we can produce the utility for a user ID.

06:29.610 --> 06:31.440
We can also do it.

06:33.320 --> 06:35.110
So what we'll do is the opposite of this.

06:37.050 --> 06:38.150
I will create a public.

06:40.890 --> 06:42.810
Public static.

06:45.030 --> 06:45.330
Long.

06:48.850 --> 06:49.240
From.

06:56.400 --> 06:57.150
From.

07:00.230 --> 07:00.770
And.

07:02.320 --> 07:03.370
String token.

07:06.100 --> 07:08.260
String secret key.

07:12.820 --> 07:13.140
Uh.

07:13.150 --> 07:13.930
I will return.

07:14.360 --> 07:20.140
Knew she w t s master builder.

07:25.090 --> 07:27.400
Not new, she told years past revealed her.

07:28.740 --> 07:32.940
DOT said signing key base 64.

07:34.580 --> 07:38.570
Get encoder and call to string.

07:39.260 --> 07:40.220
My secret key.

07:40.790 --> 07:41.870
I still have to do these.

07:41.870 --> 07:42.530
Get bites.

07:44.430 --> 07:44.620
Yes.

07:44.670 --> 07:45.030
Eight.

07:48.200 --> 07:48.860
Builds.

07:50.800 --> 07:51.460
Pass.

07:53.440 --> 07:53.860
Token.

07:57.470 --> 07:58.190
And get body.

07:59.330 --> 08:06.920
And these get body will retain return claims to return a set of claims.

08:08.090 --> 08:15.710
So JWT claims we saw when when we saw the token go to the line, we see that we have claims and we are

08:15.710 --> 08:17.480
adding one claim here which is user ID.

08:17.930 --> 08:21.440
So it will return me a set of claims.

08:22.040 --> 08:22.910
This is what I have here.

08:23.210 --> 08:27.200
So means that I have to get the claim with user ID.

08:28.970 --> 08:34.130
I need to get this claim and this claim is of type long.

08:35.490 --> 08:35.970
C+.

08:40.170 --> 08:42.060
So that's these returns long.

08:45.360 --> 08:45.510
Okay.

08:45.810 --> 08:52.590
So we have a method that allows us to fetch user ID from token and to decode.

08:56.340 --> 09:05.010
So I can say that my VR user ID equals token from token.

09:06.820 --> 09:07.960
Refreshed or considerate.

09:11.480 --> 09:13.720
So this is now valid.

09:14.330 --> 09:16.940
So it's still secret not to refresh.

09:18.230 --> 09:20.960
This is something that's easy to do.

09:21.500 --> 09:22.700
So I will return.

09:25.240 --> 09:28.910
User Report filed by Adi.

09:31.380 --> 09:32.300
User I.D..

09:35.100 --> 09:36.360
Or else through.

09:38.490 --> 09:43.320
And I will write a new class for this user.

09:43.590 --> 09:46.050
Not found error.

09:48.210 --> 09:50.580
And it would be new.

09:52.980 --> 09:53.970
I need to implement.

09:55.680 --> 10:00.240
I rely on these in error for the others I'm at.

10:02.500 --> 10:03.460
Extends.

10:05.710 --> 10:07.360
Response state is exception.

10:10.130 --> 10:13.940
Public use or not found error.

10:17.650 --> 10:18.310
Super.

10:19.370 --> 10:27.920
It used to be starters per requests and I just the message user not phone.

10:35.830 --> 10:38.830
And this could be replaced by an imagined variable probably.

10:39.130 --> 10:42.430
I think this is what is suggesting.

10:43.640 --> 10:43.970
No.

10:44.210 --> 10:45.350
But they will replace it.

10:45.380 --> 10:48.300
We don't need this many lines of codes.

10:48.320 --> 10:51.980
We can write these in one line out here.

10:54.250 --> 10:55.060
So you're fine.

10:59.320 --> 11:02.890
So in my authorization of the scepter, I'm now able to do this.

11:06.450 --> 11:10.590
Managers have to return to efficiencies.

11:10.710 --> 11:11.540
If, doesn't it?

11:11.550 --> 11:13.050
It will be with exceptions.

11:13.500 --> 11:16.470
But you just have to return to.

11:19.700 --> 11:20.050
Okay.

11:20.060 --> 11:25.550
In this case, I think this could be cleaned because we don't return any any exception.

11:26.780 --> 11:29.630
What is missing is the configuration file.

11:30.860 --> 11:34.340
So I will call it Web MVC config.

11:37.610 --> 11:42.170
And this configuration file will tell me will tell the application.

11:44.000 --> 11:47.510
To which roads I apply this interceptor.

11:49.470 --> 11:54.120
This is missing and this implements Web MVC computer.

11:58.520 --> 11:59.900
This is a configuration class.

12:06.850 --> 12:08.500
And I need you to.

12:11.870 --> 12:12.680
To inject.

12:12.740 --> 12:15.020
So I need to create.

12:16.570 --> 12:17.440
My constructor.

12:19.890 --> 12:20.370
Private.

12:21.120 --> 12:24.540
Final implementation.

12:25.710 --> 12:27.210
Authorization interceptor.

12:31.290 --> 12:32.190
I need to inject.

12:36.420 --> 12:42.540
Structure injection and then I will overwrites the pre and all method.

12:46.070 --> 12:47.840
Sorry not to be intimate of you.

12:47.840 --> 12:48.200
No matter.

12:48.200 --> 12:49.880
These intercepted the ads.

12:51.050 --> 12:52.870
Interceptors method.

12:52.910 --> 12:54.530
So this one I will overwrite.

12:56.060 --> 12:57.350
They will say registry.

12:59.250 --> 13:00.420
As Interceptor.

13:02.350 --> 13:03.530
Authorization interceptor.

13:05.740 --> 13:09.460
I've passed buttons slush either.

13:11.020 --> 13:12.460
In this case, we are.

13:13.650 --> 13:14.670
Going to.

13:15.690 --> 13:19.380
Yeah, it's it's it's it's a trial.

13:19.380 --> 13:26.820
So we not going to implement a huge amount of, of it, but we can use up off buttons, but we can also

13:26.820 --> 13:32.580
use, uh, the other one which is exclude both buttons.

13:32.580 --> 13:40.020
So this means that if you want to use everywhere, except in some places, you define the ones where

13:40.020 --> 13:40.860
you don't want to use.

13:41.190 --> 13:43.980
In this case, we are going to use it only in the user.

13:45.180 --> 13:47.700
So the next step is in.

13:47.700 --> 13:50.490
The interceptor is built.

13:53.540 --> 13:55.940
And it's it's it's done.

13:55.950 --> 13:58.010
So it's configuration is here.

13:59.300 --> 14:07.280
The code of the interceptor is here on the preamble method, we are the two new errors and we added

14:07.280 --> 14:12.870
also on the token and on the authorization service the parameters that we need to annihilate.

14:13.160 --> 14:20.240
In the next video, we are going to implement the actual endpoint and see how it works in practice.
