WEBVTT

00:00.270 --> 00:02.610
For now, it's time to register our user.

00:02.910 --> 00:05.420
So let's go to the register component.

00:05.430 --> 00:09.600
And, uh, here, let's add the setup.

00:14.490 --> 00:17.580
So we will use view three composition API.

00:17.610 --> 00:20.360
So we need to add everything in the setup.

00:20.370 --> 00:24.840
So here I will create a variable, I'll call it data.

00:25.590 --> 00:28.170
It will be equal to reactive.

00:29.460 --> 00:32.760
So we introduced this function.

00:33.690 --> 00:36.060
We need to import reactive from view.

00:36.690 --> 00:41.850
And inside this function we will have all our inputs.

00:41.850 --> 00:45.090
So for each input we will put it here.

00:45.090 --> 00:49.530
So we need a first name and we need to initialize them.

00:49.530 --> 00:52.170
So by default it will be empty.

00:53.280 --> 00:57.090
Last name, empty email.

00:58.050 --> 01:04.650
A password and a password underscore confirm.

01:07.000 --> 01:08.050
So that's it.

01:08.650 --> 01:12.910
Also, to use this value, we have to return it.

01:12.910 --> 01:15.940
So we will return the data there.

01:17.500 --> 01:27.160
So we added this reactive values and that to move them to our inputs, we have to use a V model data

01:27.160 --> 01:29.500
that the first name here.

01:30.310 --> 01:39.310
So this means that every time we change the inputs so we make changes here, it will be reflected to

01:39.310 --> 01:40.660
this variable.

01:41.380 --> 01:44.560
Let's add the same thing for the other inputs.

01:44.560 --> 01:56.200
So this is the last name, this is the email, this is the password and this is the password code here.

01:57.850 --> 01:59.950
So we mapped all the values.

02:00.490 --> 02:05.380
So when we change these values, it will be reflected to this data variable.

02:05.710 --> 02:08.470
And now what is left is to submit the form.

02:08.470 --> 02:10.450
For that we need to create a function.

02:10.690 --> 02:12.220
So all create the function.

02:12.220 --> 02:12.790
Submit.

02:16.670 --> 02:20.240
And the old keep it empty in the oval.

02:20.240 --> 02:22.100
Return it for the moment, submit.

02:24.530 --> 02:33.290
So this function will be used when we submit this form to submit this form, add the here and submit

02:35.090 --> 02:37.520
will be equal to this submit function.

02:39.290 --> 02:44.750
I will also add here that prevent because if I don't add the prevent.

02:44.750 --> 02:46.700
So let's just console.log here.

02:51.900 --> 02:57.400
If we submit the form, we will see that our page refreshes.

02:57.420 --> 02:58.560
We don't want that.

02:58.650 --> 03:01.200
So we need to adhere that prevent.

03:03.930 --> 03:05.880
So it would prevent that behavior.

03:06.210 --> 03:10.980
And now when we type submit, we can see that our page won't be refreshed.

03:11.520 --> 03:12.360
So that's it.

03:12.870 --> 03:16.590
Now let's complete here the submit function.

03:17.100 --> 03:20.910
And to complete it, I will install another package.

03:21.030 --> 03:23.490
So npm install access.

03:24.330 --> 03:28.230
This is a package that will help us send each of the requests.

03:30.090 --> 03:33.560
We need also to install the type.

03:33.580 --> 03:46.770
So is a dependency types actions because in this course we will use a typescript and the first we have

03:46.770 --> 03:50.040
to import access here from Arxiv.

03:51.540 --> 03:55.260
And if you want to use TypeScript in this template.

03:55.980 --> 03:57.300
So this should be like this.

03:59.520 --> 04:02.840
In the script tag here we have to add lung.

04:03.290 --> 04:03.810
Yes.

04:05.070 --> 04:05.910
And that's it.

04:05.920 --> 04:09.600
We are using TypeScript in this code here.

04:10.170 --> 04:16.830
But unfortunately, there is not TypeScript code, so it looks similar, even if it is JavaScript,

04:16.840 --> 04:18.270
even if it is TypeScript.

04:19.020 --> 04:23.820
So we imported active and now old.

04:23.820 --> 04:34.380
Make this function synchronous and we will await actions will send a post request to DP localhost port

04:34.380 --> 04:45.240
it thousandth this API slash register and the information that we will send in the backend is this one.

04:45.720 --> 04:52.500
So that's why I created this data variable and we will pass directly the data here.

04:53.550 --> 04:54.870
And that should be it.

04:55.740 --> 05:02.700
And if this request is successful, we want to redirect to our logging component.

05:02.820 --> 05:11.250
So for that, we need to create another variable here, or alter, which is equal to use or alter.

05:12.390 --> 05:21.690
And don't forget to import user order from viewers out there know that we got this variable.

05:22.080 --> 05:30.870
After this request is successful, we will wait around the push to log in.

05:31.860 --> 05:33.420
And that should be it.

05:34.260 --> 05:42.360
Now, if we go to our frontend, if we register a user here, we'll make a user called B.

05:44.900 --> 05:52.730
And if we submit now and we direct to the logging page, it means that the registration was successful.

05:52.730 --> 05:55.730
Let's submit and we redirected.

05:56.000 --> 05:59.810
This means so that our registration was successful.

05:59.840 --> 06:04.400
Now in the next autofill let's use that user to log in.
