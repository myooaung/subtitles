WEBVTT

00:01.840 --> 00:03.370
You have to register points.

00:03.520 --> 00:04.960
We have the basic validation.

00:05.230 --> 00:06.340
We are saving the data.

00:07.460 --> 00:16.030
However, we are not using the framework as it is supposed to be used regarding its structure.

00:16.930 --> 00:19.780
So the controller layer.

00:20.230 --> 00:25.960
So this this controller, it's called spring MVC model view controller.

00:26.260 --> 00:27.940
In this case, the controller is the view.

00:28.720 --> 00:29.980
So you should not.

00:30.220 --> 00:31.030
Um.

00:32.610 --> 00:39.240
It's a bit ambiguous because in MVC you have one controller, which doesn't really translate to the

00:39.240 --> 00:42.300
controller that you have, uh, in, in spring.

00:42.750 --> 00:47.040
So in spring controller is if you layer, it should not change.

00:47.940 --> 00:54.450
The data should not and the should not f validation should not have rules.

00:54.630 --> 01:04.400
So the controller ideally only as changes that are related with the HDP request, HDP response and,

01:04.410 --> 01:05.880
and this kind of of things.

01:06.660 --> 01:10.070
What we have here, the validating requests.

01:10.080 --> 01:12.590
It's business logic, right?

01:12.750 --> 01:15.390
It's logic that belongs somewhere else.

01:15.990 --> 01:23.330
And in spring, this belongs in clusters of a specific type, which is type surface.

01:23.580 --> 01:25.800
So in surface classes is very short.

01:26.160 --> 01:32.010
And all this kind of logic is where you should if the information that that you need.

01:32.610 --> 01:35.370
So we're going to restructure this a bit.

01:35.670 --> 01:36.000
Okay.

01:36.150 --> 01:40.140
Going to create some such packages.

01:41.960 --> 01:44.900
I am going to create my.

01:46.610 --> 01:46.950
Uh.

01:47.990 --> 01:48.410
User.

01:52.490 --> 01:52.880
Package.

01:52.910 --> 01:53.270
Okay.

01:54.080 --> 01:56.990
The user package will get user repo.

02:02.930 --> 02:04.550
And it will get my user.

02:06.370 --> 02:07.510
I would refactor this.

02:08.900 --> 02:10.280
So just finishing here.

02:10.460 --> 02:12.620
So I have my information.

02:13.980 --> 02:15.610
Actually, I'm going to rename this.

02:15.880 --> 02:23.890
I don't like to have something user, user, so I'm going to change it to data and I will leave the

02:23.890 --> 02:30.790
controller here because it's one controller per application and I will add another package which is

02:30.790 --> 02:31.600
called service.

02:32.380 --> 02:37.630
So in this controller, I will have all the services that I want in this package.

02:37.630 --> 02:39.220
I will have all the services that I want.

02:40.580 --> 02:41.870
So I'll create all my.

02:43.200 --> 02:45.720
Authorization, service or service.

02:50.230 --> 02:50.920
She's a class.

02:52.700 --> 02:56.000
First thing I'm going to do is to annotate this with.

02:56.990 --> 03:01.490
Service invitation to tell spring that this is a service plus.

03:02.990 --> 03:07.520
Second thing I'm going to do is to add the repository here.

03:10.410 --> 03:11.270
Use a repo.

03:13.990 --> 03:14.680
He's a rebel.

03:16.870 --> 03:18.670
And this is constructed perimeter.

03:23.310 --> 03:23.580
Okay.

03:24.860 --> 03:25.580
I can leave now.

03:27.530 --> 03:29.810
I go to Mark, my authentication controller.

03:32.170 --> 03:34.330
And here instead of.

03:36.300 --> 03:38.100
Everybody is a rebel directly here.

03:38.730 --> 03:41.460
We should not rest on the controller.

03:42.230 --> 03:43.270
Classes should.

03:45.990 --> 03:50.490
Unless he's very straightforward to use cases, which is not the case of of this course.

03:51.620 --> 03:54.990
They they they need to to go to the health service.

03:55.010 --> 03:59.570
So I'm going to outsource your health service.

03:59.640 --> 04:04.440
I'm going to delete this and regenerates constructor again.

04:06.460 --> 04:08.170
So I have my health service.

04:09.610 --> 04:13.570
I will replace this by my health service.

04:15.850 --> 04:17.040
I will clean this.

04:22.600 --> 04:24.130
Uh, all service.

04:25.330 --> 04:26.290
And they will call it.

04:27.670 --> 04:28.210
Resister.

04:29.140 --> 04:32.500
Instead of calling it safe, I will call it register.

04:35.350 --> 04:38.230
And I no longer take a user object.

04:38.500 --> 04:40.330
I will take the individual.

04:41.820 --> 04:42.440
Requests.

04:42.440 --> 04:44.120
So register requests.

04:45.170 --> 04:46.040
BuzzFeed confirm.

04:49.340 --> 04:49.700
Okay.

04:50.060 --> 04:50.570
This is.

04:52.250 --> 04:53.570
The arguments that my.

04:55.250 --> 04:56.170
Method will take.

04:56.180 --> 04:57.230
It doesn't exist.

04:57.320 --> 05:00.110
I'm going to create an not service.

05:00.110 --> 05:00.440
Okay.

05:01.010 --> 05:03.320
And it will return user type.

05:07.050 --> 05:07.890
This is all fine.

05:08.640 --> 05:10.430
I mean, old service.

05:10.440 --> 05:10.680
No.

05:12.950 --> 05:13.110
Okay.

05:13.260 --> 05:14.480
My email, my password.

05:14.480 --> 05:15.650
My password to confirm.

05:17.730 --> 05:19.230
And I will return.

05:20.490 --> 05:21.210
User repo.

05:24.350 --> 05:24.890
Safe.

05:26.270 --> 05:28.610
And here I'm going to the user of.

05:31.550 --> 05:32.270
First name.

05:34.140 --> 05:36.390
Last name email.

05:38.140 --> 05:38.670
And password.

05:45.910 --> 05:46.180
Okay.

05:48.990 --> 05:51.570
So what is still.

05:52.560 --> 05:53.370
Left to be done.

05:55.110 --> 05:56.550
Is to move this validation.

06:03.700 --> 06:04.960
To insert this method.

06:09.050 --> 06:11.180
So instead of having the validation.

06:14.480 --> 06:14.870
There.

06:14.870 --> 06:15.860
I will have it here.

06:18.830 --> 06:22.220
And we're going to have through this request, we simply called passwords.

06:23.830 --> 06:26.020
And these simple passwords, gopher.

06:32.430 --> 06:32.670
Okay.

06:33.180 --> 06:38.970
I zoom out CO2 if I if my authorization service class.

06:40.170 --> 06:40.870
It does.

06:41.340 --> 06:41.970
Register.

06:42.840 --> 06:43.740
Register matters.

06:44.370 --> 06:49.320
It validates if the passwords are the same and if they are not.

06:49.560 --> 06:50.730
I get the exception.

06:50.940 --> 06:52.860
The exception is raised anywhere.

06:52.950 --> 06:56.940
So this exception will still generate the error that we saw.

06:58.440 --> 07:06.300
And on my controller I have a simpler method, so I'm simply calling the register service.

07:06.360 --> 07:07.440
I get my user.

07:09.560 --> 07:09.950
Okay.

07:10.490 --> 07:15.320
And then I'm creating the response only with the fields I need.

07:19.750 --> 07:24.220
So this is how usually applications are structured.

07:25.560 --> 07:26.790
And they still need to.

07:28.550 --> 07:29.990
Optimize imports.

07:34.460 --> 07:35.030
To remove.

07:36.070 --> 07:37.630
Two imports that are not needed.

07:38.850 --> 07:39.010
Okay.

07:39.060 --> 07:40.380
So application is here.

07:40.890 --> 07:44.850
If my end point, I have my request and response template, see if I need to change.

07:44.850 --> 07:48.000
They are very accessible and I have the structure I want.

07:49.480 --> 07:50.590
In the project wise.

07:50.590 --> 07:57.070
I have my service here, I have my application, I have my controller, I have my service here, I have

07:57.070 --> 08:00.010
my data classes here, they have my configuration here.

08:00.010 --> 08:06.880
So the only thing left is to commit this nine step and we just.

08:09.420 --> 08:10.260
Implemented.

08:12.400 --> 08:13.210
Surface layer.
