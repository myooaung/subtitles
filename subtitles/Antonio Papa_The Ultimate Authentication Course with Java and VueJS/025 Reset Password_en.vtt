WEBVTT

00:00.510 --> 00:09.330
An excellent point to implement is the resets and points that will actually allow us to change or password.

00:09.930 --> 00:10.200
Okay.

00:10.850 --> 00:18.480
So going to be like now same thing post mapping as pretty much everything else that involves sending

00:18.480 --> 00:19.110
information.

00:21.680 --> 00:23.100
The value will be slashed.

00:23.150 --> 00:23.630
Reset.

00:26.540 --> 00:26.900
So.

00:26.900 --> 00:31.310
Public Research Response.

00:32.090 --> 00:35.330
Research request.

00:35.330 --> 00:39.710
Body research request.

00:44.840 --> 00:45.440
Sit.

00:47.610 --> 00:49.950
Record reset requests.

01:00.520 --> 01:03.390
It'll to be string token.

01:03.400 --> 01:07.960
I want to have the token that I sent on the reset email.

01:08.800 --> 01:12.280
I will receive it from the frontend string password.

01:15.650 --> 01:20.090
And string passwords confirm.

01:23.730 --> 01:27.060
And as before, we don't want this in case.

01:27.090 --> 01:30.840
So we'll annotate this with Jason property.

01:35.830 --> 01:40.540
Value b underscore buzzwords confirm.

01:42.970 --> 01:43.190
Yeah.

01:43.330 --> 01:44.530
And other records.

01:45.220 --> 01:46.110
Reset.

01:47.080 --> 01:50.230
Response will be simple.

01:50.500 --> 01:52.270
String message.

01:56.860 --> 01:57.220
Okay.

01:57.220 --> 02:01.090
So this is what's what they built.

02:02.950 --> 02:04.690
My endpoint slash research.

02:04.690 --> 02:11.440
Research request for what name here of college research request.

02:11.440 --> 02:18.760
So it my it's my request body and I have my um, signature here.

02:18.760 --> 02:24.010
Request would be token password and password confirm what do I have to implement?

02:24.580 --> 02:31.780
What surface reset method doesn't exist yet, but I will implement the reset method.

02:32.380 --> 02:39.400
I will send the research requests from the reset request.

02:40.510 --> 02:41.560
I will send the token.

02:42.880 --> 02:43.120
Okay.

02:44.560 --> 02:46.000
I will send the password.

02:49.520 --> 02:51.530
And they will send the password to confirm.

02:56.930 --> 02:58.490
That will be my body signature.

03:01.160 --> 03:02.420
And then I will return.

03:03.440 --> 03:04.010
And you?

03:05.400 --> 03:12.780
Reset reset response in this case to be success.

03:19.210 --> 03:21.850
So basically we return to success.

03:21.850 --> 03:27.110
And if something happens in the processing we raised an exception in between so or error.

03:27.150 --> 03:33.210
It's and it's and that way so I'll create a method here token password password.

03:33.230 --> 03:34.300
Confirm all of these.

03:34.300 --> 03:36.040
This is nice.

03:36.050 --> 03:38.050
This is what's what they want.

03:38.680 --> 03:46.270
So I just need to implement the logic of what I'm doing here.

03:46.870 --> 03:49.810
So we still need to validate passwords.

03:51.500 --> 03:56.750
And I believe when we register, we already have that validation, so I'll just copy it.

04:01.040 --> 04:06.980
So if I my passwords do not match, I will do it.

04:07.580 --> 04:08.210
Same error.

04:08.480 --> 04:09.740
Passwords do not match error.

04:10.280 --> 04:13.910
We could build a method that does this, but the method is so simple.

04:14.810 --> 04:17.900
Yeah, it could be could be done.

04:17.900 --> 04:20.360
But in this case, I am not doing it.

04:23.230 --> 04:29.140
But for sure, we should, uh, we should have this these kind of things.

04:29.140 --> 04:33.580
Centralized user reports.

04:35.690 --> 04:39.230
And I will use the method that I built.

04:39.650 --> 04:49.820
So I will fetch my user from token or else through an invalid link.

04:49.850 --> 04:51.200
So it's a new error.

04:51.830 --> 04:54.680
Invalid link error.

04:56.480 --> 04:56.780
Okay.

04:57.590 --> 04:59.300
I will create it like this.

05:01.950 --> 05:03.110
Invalid link error.

05:03.120 --> 05:04.920
I will have to create the class.

05:07.540 --> 05:08.440
To be in error?

05:08.620 --> 05:09.160
Yes.

05:11.890 --> 05:16.630
And so extends a response status exception.

05:19.830 --> 05:20.400
Public.

05:21.000 --> 05:22.650
Invalid link error.

05:25.100 --> 05:25.580
Um.

05:27.260 --> 05:36.740
These super HTP status requests message invalid link.

05:39.480 --> 05:44.340
So we use the same recipe that we used before.

05:44.970 --> 05:46.470
Methods is working.

05:48.390 --> 05:50.130
We have or use it from token.

05:51.150 --> 05:57.540
What we do then is user sets password to the new password.

05:57.960 --> 05:59.320
History certainly successful.

05:59.790 --> 06:02.430
So if the passwords do not match, I'm raising zero here.

06:02.850 --> 06:08.700
If the token is not valid, I'm raising error here.

06:09.720 --> 06:17.760
And when we set the password, we also need to remind us that we have password encoder to encode the

06:17.760 --> 06:18.270
passwords.

06:20.130 --> 06:25.170
It's easy to forget these kind of things, but it's it's done.

06:26.430 --> 06:33.060
And in this case, user remove password recovery.

06:33.060 --> 06:35.490
So what time?

06:35.850 --> 06:37.800
Uh, password recovery.

06:37.800 --> 06:38.040
He.

06:40.900 --> 06:49.180
What I'm doing here is to say, okay, I will remove my password recovery because the user over it,

06:49.480 --> 06:52.840
it's only allowed to reset the password on each link.

06:53.260 --> 06:58.840
So as soon as we we have the link, we set the password, we remove it.

06:59.380 --> 06:59.680
Okay.

07:03.320 --> 07:05.600
So in this case, I just have to compare.

07:08.950 --> 07:14.410
Objects equals password recovery token.

07:17.220 --> 07:17.810
We talk?

07:23.450 --> 07:24.260
Nothing I do.

07:26.070 --> 07:28.080
User approved safe user.

07:34.430 --> 07:34.790
Okay.

07:34.790 --> 07:36.320
So this is my method.

07:43.400 --> 07:46.280
It's simply these change that I do.

07:47.460 --> 07:53.450
And because my service is transactional, this will, uh, in this case, it's not.

07:53.540 --> 08:00.030
So we will annotate this, uh, with no effective need.

08:00.410 --> 08:03.650
So what happens is that I'm reading the user from the database.

08:03.650 --> 08:07.100
I'm setting these two things, and then I saving my user at the end.

08:07.100 --> 08:16.430
So this safe operation it to be and you know, you will save the password.

08:17.030 --> 08:21.380
Uh, and, and to, to, to change your password and removal of token.

08:21.680 --> 08:23.960
You will save them here at the same time.

08:26.020 --> 08:27.880
Then the only thing left to do is testing.

08:27.880 --> 08:29.020
So I will run this.

08:32.690 --> 08:38.370
We already have created some password recoveries that we will use.

08:38.390 --> 08:46.550
So I will take this token that I had created before, and in my testing I will send my a reset user.

08:47.960 --> 08:51.720
So I will have my token here and I will change it.

08:51.800 --> 08:53.480
My password to one, two, three, four.

08:55.580 --> 08:57.650
So I will send I have a success.

08:58.310 --> 09:00.560
So if I refresh these these entries appear.

09:01.340 --> 09:05.020
Okay, these entry disappeared my password.

09:05.030 --> 09:11.180
Now, if I tried to log in, uh, invalid credentials because I changed my password.

09:11.180 --> 09:12.650
Password to one, two, three, four.

09:14.270 --> 09:15.170
Now it should work.

09:15.980 --> 09:16.490
He does.

09:17.090 --> 09:21.170
And then just to go back, I will do the same again.

09:21.500 --> 09:23.660
And also clean up the database.

09:23.870 --> 09:27.650
So I'll change one, two, three, four to a again.

09:29.660 --> 09:30.650
I will send it again.

09:32.480 --> 09:35.810
So my database, it's empty.

09:35.810 --> 09:36.530
No, no.

09:36.530 --> 09:37.880
Pending password recoveries.

09:37.880 --> 09:38.750
I used all of them.

09:40.180 --> 09:43.540
And now if I tried to log in with one, two, three, four, it would not work.

09:43.540 --> 09:46.960
If I tried to log in with a it will work.

09:47.170 --> 09:50.800
So a reset and point is implemented on working.
