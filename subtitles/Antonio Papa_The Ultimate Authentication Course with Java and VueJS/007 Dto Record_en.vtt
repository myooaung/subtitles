WEBVTT

00:00.030 --> 00:00.160
Okay.

00:00.180 --> 00:02.280
So we have our first end points.

00:03.540 --> 00:12.360
We do some interesting things already, but we need to keep in mind also the long term of the application,

00:12.360 --> 00:20.250
even during the course we are going to to create many end points and we need to keep things clean and

00:20.640 --> 00:21.240
organized.

00:22.260 --> 00:28.860
One of the things I want to do is to change a bit the way we are using.

00:28.860 --> 00:38.880
So this kind of API design is very specific to J to Java and I want to use underscores instead of the

00:38.880 --> 00:45.090
camel case to identify the API request body.

00:46.710 --> 00:48.090
How can I do that?

00:49.050 --> 00:52.800
How can I do that in this in this context?

00:55.070 --> 00:56.030
There is one option.

00:56.870 --> 00:57.090
Okay.

00:57.890 --> 01:00.860
I could go to the user class that I have here.

01:05.620 --> 01:07.090
I can go to.

01:08.150 --> 01:08.870
First name.

01:10.440 --> 01:13.050
And I can say Jason property.

01:17.420 --> 01:17.930
First thing.

01:23.310 --> 01:25.380
And for the last time, I can say.

01:28.650 --> 01:29.640
Jason property.

01:31.350 --> 01:31.770
Last time.

01:37.240 --> 01:37.420
Okay.

01:39.070 --> 01:39.850
And this will work.

01:41.230 --> 01:42.370
If I run the application.

01:44.820 --> 01:49.170
If I register the user again, I have my I.D..

01:50.190 --> 01:50.330
Okay.

01:50.430 --> 01:50.940
84.

01:51.570 --> 01:52.170
This works.

01:52.320 --> 01:57.930
And I see that the application also changed the output response.

01:58.260 --> 02:03.270
So here we see already one problem of this approach is that by changing the request.

02:04.240 --> 02:06.520
You are also changing the response.

02:07.210 --> 02:08.800
And sometimes you want this.

02:09.220 --> 02:12.940
In this case, it's moving from camel case to underscore.

02:13.300 --> 02:16.480
So you could want this, but sometimes you don't.

02:17.350 --> 02:20.230
And this is the problem of this approach.

02:21.700 --> 02:24.040
So I roll back this change, okay?

02:24.040 --> 02:25.390
I will stop my application.

02:26.890 --> 02:29.170
I will roll back this this change.

02:31.560 --> 02:32.450
And I.

02:33.910 --> 02:39.250
Just remove the import and I will go to my controller.

02:40.970 --> 02:45.470
What I am going to do now is to use a feature of Java 14.

02:45.860 --> 02:51.560
That's the main one of the main reason why we're using also Java 17 is to have all of these good features.

02:52.220 --> 02:55.130
I'm going to use the record

02:58.400 --> 03:02.810
and I'm going to create the register request.

03:04.400 --> 03:07.850
And this is what usually is called a you.

03:10.440 --> 03:10.770
Okay.

03:11.100 --> 03:11.830
I'll do it.

03:11.910 --> 03:12.600
Uh.

03:15.900 --> 03:18.540
Four pack book presentation mode.

03:21.510 --> 03:22.950
So I want records.

03:27.540 --> 03:29.220
Register requests.

03:33.290 --> 03:35.080
This is usually called ed.

03:35.240 --> 03:36.590
You is a very famous button.

03:37.470 --> 03:39.290
It stands for data transfer object.

03:39.890 --> 03:43.400
Uh, I think it comes from a book from Martin Fowler.

03:43.400 --> 03:50.270
It is a good reference in software design, but it's the idea that you, when you need to transfer objects

03:50.270 --> 03:58.460
between applications, sometimes even between layers of applications, you create an object that whose

03:58.460 --> 04:03.290
only responsibility is to transfer data between those applications.

04:03.710 --> 04:03.900
Okay.

04:03.960 --> 04:05.450
And this is what we are going to do.

04:05.450 --> 04:07.190
And records are very good for that.

04:07.610 --> 04:12.890
So what I want to say is that my register request.

04:14.680 --> 04:17.070
He's going to have a strong first name.

04:19.090 --> 04:20.380
String last name.

04:26.720 --> 04:30.800
String email and string passwords.

04:35.320 --> 04:35.620
Okay.

04:37.770 --> 04:38.160
And.

04:40.240 --> 04:41.530
This has the same problem.

04:41.530 --> 04:43.360
First name, it's Java camel case.

04:43.390 --> 04:47.880
So in JSON it will be also um, java camel case.

04:48.250 --> 04:54.880
So I will use here the jaison property to say that I want this.

04:56.700 --> 04:58.680
To be first time.

05:01.870 --> 05:02.830
And I want this.

05:06.000 --> 05:07.020
To be listening.

05:12.860 --> 05:13.280
Like that.

05:14.250 --> 05:14.550
Okay.

05:17.530 --> 05:22.750
And usually when you are registering a user, you don't put just the password.

05:22.750 --> 05:26.740
You put the password and the confirmation of the password to avoid any mistakes that you might do.

05:27.460 --> 05:30.850
So I'm going to add this here already.

05:33.510 --> 05:34.020
Password.

05:34.140 --> 05:34.740
Confirm.

05:37.190 --> 05:39.650
And I will also change the name of this

05:42.800 --> 05:43.760
Jason property.

05:46.240 --> 05:48.070
I call it passwords.

05:50.250 --> 05:50.640
Go for?

05:53.840 --> 05:54.110
Okay.

05:54.890 --> 05:56.030
Excuse the long string.

05:56.090 --> 06:00.140
I will break this down to make it easier to read.

06:06.760 --> 06:07.340
It's okay.

06:09.200 --> 06:15.170
So this is my records that will be the mapping for this.

06:16.510 --> 06:16.840
Okay.

06:18.010 --> 06:23.050
So now the next step is to say register requests.

06:29.040 --> 06:30.090
And this would be my user.

06:32.280 --> 06:40.120
And all these matter no longer knows, because this safe method takes a user user from the database.

06:40.140 --> 06:41.460
It's not the request.

06:42.000 --> 06:47.070
So I will also change here the name for register requests.

06:49.020 --> 06:55.380
And what I will do is here we created the factory method.

06:56.600 --> 06:57.470
User of.

07:00.100 --> 07:04.360
And I will use first name register requests.

07:06.130 --> 07:06.700
First name.

07:09.800 --> 07:10.820
Register request.

07:10.820 --> 07:11.360
Last name.

07:17.170 --> 07:18.420
The request email.

07:21.160 --> 07:22.630
Rooster request, buster.

07:31.130 --> 07:31.460
Okay.

07:32.610 --> 07:33.540
And this is my.

07:36.930 --> 07:40.350
This is my implementation so I can leave.

07:42.110 --> 07:42.470
This.

07:44.800 --> 07:46.330
I will ask my application again.

07:50.250 --> 07:51.490
I will go to postman.

07:51.510 --> 07:53.160
I will send the request again.

07:53.730 --> 07:54.360
And it.

07:54.420 --> 07:54.940
It works.

07:56.370 --> 07:58.560
So I don't have anything here.

07:58.980 --> 08:01.590
The user is mapped to the database.

08:01.590 --> 08:02.440
But by spring.

08:02.460 --> 08:03.150
I don't have.

08:03.570 --> 08:05.430
I'm not naming properties here.

08:06.000 --> 08:09.940
I'm naming this in my ditto object.

08:11.100 --> 08:17.250
You could extract this to to a separate file if you want.

08:19.650 --> 08:23.660
Personally, for Java records, I use this syntax.

08:23.670 --> 08:23.840
Okay.

08:23.880 --> 08:28.200
I'm just, uh, remove the indentation here.

08:29.280 --> 08:37.800
For Java records, I really prefer to have this close to the to the end point is a very concise syntax.

08:38.220 --> 08:41.760
So I prefer to have it here than to do with somewhere else.

08:43.890 --> 08:44.880
And we can do.

08:47.040 --> 08:51.630
We can do the same for the response so we can have record.

08:53.500 --> 08:55.210
Uh, response.

08:57.990 --> 08:59.820
Uh, request, um.

09:01.590 --> 09:02.580
Register response.

09:08.080 --> 09:09.100
And the era we have.

09:11.290 --> 09:12.910
Pretty much the same thing until.

09:14.570 --> 09:14.990
This.

09:17.760 --> 09:18.040
Hey.

09:18.780 --> 09:21.780
I don't want to send my password back.

09:23.840 --> 09:27.050
I just want to, um.

09:27.410 --> 09:30.260
I just want to send the information.

09:30.260 --> 09:31.970
First name, last name and email.

09:32.060 --> 09:33.510
That's all I want to return.

09:34.880 --> 09:35.750
So I.

09:37.000 --> 09:37.840
Return here.

09:38.920 --> 09:40.000
Register response.

09:41.600 --> 09:41.930
Okay.

09:41.960 --> 09:42.920
And they will have to change.

09:42.920 --> 09:48.080
This will create for user articles this.

09:54.460 --> 09:55.900
Go swimming again.

09:56.170 --> 09:56.950
Var user.

09:58.620 --> 09:58.950
Okay.

09:59.850 --> 10:02.850
And I still have to return, so I will do return here.

10:05.950 --> 10:07.060
The Register response.

10:07.780 --> 10:12.580
I need to create a new registered, responsible, new registered response.

10:16.010 --> 10:16.610
User.

10:18.440 --> 10:19.220
It was time.

10:20.720 --> 10:21.290
User.

10:22.470 --> 10:26.850
Get last name user get email.

10:30.110 --> 10:30.830
And finally.

10:32.840 --> 10:33.350
User.

10:37.610 --> 10:38.030
And it's.

10:38.030 --> 10:38.660
It's.

10:39.750 --> 10:39.960
Yeah.

10:41.490 --> 10:42.420
Nothing more to add.

10:45.270 --> 10:46.440
Uh, no.

10:47.580 --> 10:49.560
I want to return the ID for the moment.

10:50.940 --> 10:51.750
Long and.

10:54.140 --> 10:55.040
So user.

10:57.420 --> 10:57.780
Heidi.

10:58.870 --> 10:59.170
Okay.

11:06.050 --> 11:07.430
So this is.

11:08.660 --> 11:09.160
Why?

11:09.170 --> 11:11.390
It is a main reason why we use videos.

11:12.380 --> 11:17.060
It's because we want to to split.

11:17.090 --> 11:21.200
Most of the times we want to have requests different from the response.

11:21.620 --> 11:27.830
And a record is really a clean way of, uh, of doing this.

11:28.130 --> 11:28.430
It's.

11:28.430 --> 11:30.350
It's compact, it's concise.

11:31.130 --> 11:33.860
So this is the reason why we are using it.

11:36.680 --> 11:39.800
So I'm going to restart the application.

11:44.050 --> 11:46.210
Going to send a new register request.

11:47.910 --> 11:54.500
And this time I have my first, first lust I.D. and email.

11:55.260 --> 11:56.730
I have it here.

11:57.420 --> 11:57.780
Okay.

11:57.810 --> 12:06.360
Now I have the rock record as I want with the information I want, which is different from this one.
