WEBVTT

00:00.030 --> 00:02.190
Repositories implemented.

00:02.190 --> 00:04.360
We have our data model implemented.

00:04.380 --> 00:08.340
We have repositories enable the application runs.

00:08.340 --> 00:10.770
So it's time to start working on the API.

00:11.520 --> 00:13.620
Going to create a new Java class.

00:15.030 --> 00:16.890
We're going to call it off controller.

00:22.820 --> 00:26.390
And the first thing I'm going to do is annotate this with rest controller.

00:27.230 --> 00:37.110
So Rest Control is this special spring annotation that will tell that this class is a controller.

00:37.140 --> 00:40.580
It those requests that are dispatched to the server.

00:40.910 --> 00:48.750
They are and allowed by this class and the rest controller because there is also one application when

00:48.860 --> 00:56.240
notation called controller at rest controller actually extends a controller and adds some other things

00:56.240 --> 00:57.230
like that.

00:57.230 --> 00:59.930
Every request will have a response body, for example.

01:00.890 --> 01:07.370
So next step is to do a request mapping and to say that I want.

01:08.690 --> 01:14.720
All the requests that are done to API to be handled by this class is what I'm doing here.

01:15.080 --> 01:15.980
Every request.

01:17.000 --> 01:24.590
To slash CPI will be mapped list and the next step is to do and get mapping.

01:27.670 --> 01:28.180
Valley.

01:29.890 --> 01:30.430
Slush.

01:30.550 --> 01:31.000
Ello.

01:33.310 --> 01:38.800
And I will map this slush yellow to this method.

01:41.580 --> 01:41.930
Call them.

01:42.210 --> 01:42.720
Hello.

01:43.830 --> 01:44.760
No arguments.

01:46.290 --> 01:47.790
And then I will just return.

01:49.990 --> 01:52.090
A string that says, look.

02:02.130 --> 02:07.800
So every request in API slash hello will be handled by this method.

02:10.200 --> 02:11.310
It's time for me to run.

02:14.980 --> 02:15.820
My application.

02:23.510 --> 02:26.450
And now if I do, uh, requests.

02:31.500 --> 02:36.210
If when you get request local posts.

02:40.510 --> 02:40.990
Hello.

02:44.430 --> 02:46.050
To be a thousand.

02:50.960 --> 02:52.430
We call it a low request.

02:54.730 --> 02:55.810
He'd say, get requests.

02:56.110 --> 02:57.430
If I send these requests.

02:58.360 --> 03:00.310
I have 411 authorized.

03:03.440 --> 03:06.410
And if I do this in the browser.

03:14.580 --> 03:16.920
I will have a please signing message.

03:18.450 --> 03:25.200
This happens because we are using spring security and we didn't disable it yet.

03:25.830 --> 03:34.320
So spring security still securing your application and we will have to disable it too because we are

03:34.320 --> 03:37.950
not working with spring security for authentication.

03:37.950 --> 03:39.180
We are building something ourselves.

03:39.840 --> 03:42.770
So I need to create or create a package this time.

03:43.020 --> 03:43.220
Okay.

03:43.410 --> 03:46.830
Config to store all the configurations of our application.

03:47.490 --> 03:55.560
Now create a new java class and these will have a class will be called security config.

04:01.360 --> 04:01.630
Okay.

04:01.630 --> 04:02.290
I went, What

04:06.070 --> 04:10.120
first thing I'm going to do is to annotate this as a configuration class.

04:10.540 --> 04:10.810
Okay.

04:12.250 --> 04:14.770
Something tells me it's a spring.

04:14.960 --> 04:15.970
Uh, spring.

04:15.970 --> 04:21.160
Uh, configurations, spring invitations that tell that these are configuration class.

04:23.640 --> 04:27.300
This extends Web security configured and adaptive.

04:29.340 --> 04:31.590
This is the way that we customized spring security.

04:31.590 --> 04:40.080
It's extending this this class in Springwood and now I'm going to override methods.

04:40.170 --> 04:41.940
So those are the methods of the class.

04:41.940 --> 04:43.020
I want to override this one.

04:43.740 --> 04:47.910
So it's protected method, HTP security.

04:48.910 --> 04:50.950
And then I want to do HTP.

04:55.380 --> 04:57.270
Authorize HDP requests.

04:59.330 --> 05:05.300
And matures so all requests that mature much this pattern.

05:06.640 --> 05:08.170
So any pattern.

05:10.950 --> 05:11.580
Permit all.

05:14.460 --> 05:21.420
I want to to permit to allow all requests that match this pattern to be handled.

05:23.050 --> 05:23.890
So I can now.

05:25.010 --> 05:26.180
Relaunched the application.

05:30.750 --> 05:35.010
If I run my request again, I will get my string a little.

05:35.820 --> 05:37.500
I can show it in the browser as well.

05:39.770 --> 05:40.200
API.

05:40.250 --> 05:41.780
Aiello now says it will.

05:41.960 --> 05:47.870
So my security configuration is now disabled and we can implement the methods that we want.

05:48.920 --> 05:50.540
We are ready to work on the rest.
