WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.700
in this video,

00:00:01.700 --> 00:00:07.740
we're gonna talk about interfaces if you ask somebody what is an Inter pares they're going

00:00:07.740 --> 00:00:12.970
to say and interferes his collection off abstract methods and constant,

00:00:12.970 --> 00:00:14.150
which is right.

00:00:14.150 --> 00:00:16.110
But how does it make sense?

00:00:16.110 --> 00:00:17.040
And if you ask them,

00:00:17.040 --> 00:00:19.070
what is the purpose off interfaces,

00:00:19.070 --> 00:00:24.860
then they're going to say the purpose off interfaces is to solve the problem off multiple

00:00:24.860 --> 00:00:25.650
inheritance,

00:00:25.650 --> 00:00:27.540
which is also true.

00:00:27.540 --> 00:00:29.420
But that's not it.

00:00:29.420 --> 00:00:33.900
Interfaces are not introduced to solve the problem off multiple inheritance.

00:00:33.900 --> 00:00:35.270
There's a different purpose to it.

00:00:35.270 --> 00:00:39.460
We're gonna take a look at how it solves the problem off multiple inheritance.

00:00:39.460 --> 00:00:43.570
But let us try to understand the actual intent off.

00:00:43.570 --> 00:00:47.410
Introducing the interface is take a look at this.

00:00:47.410 --> 00:00:50.890
Let's say we have Let's say there are three software companies,

00:00:50.890 --> 00:00:53.020
as one has to,

00:00:53.020 --> 00:01:00.380
and as three and they're all specialized in providing the source scored for robots.

00:01:00.380 --> 00:01:08.690
Let's assume they have class files se hard one or two in our tree.

00:01:08.690 --> 00:01:11.180
Inside,

00:01:11.180 --> 00:01:12.730
this class files the right.

00:01:12.730 --> 00:01:15.880
The source scored for the Robert so it can have.

00:01:15.880 --> 00:01:17.850
But that's like move,

00:01:17.850 --> 00:01:23.650
and inside this method it will have some instructions to instruct the robot to move.

00:01:23.650 --> 00:01:24.680
Similarly,

00:01:24.680 --> 00:01:37.410
there can be stopped method except for and here this can have walk method and Haltom it

00:01:37.410 --> 00:01:52.250
that And here it can have again walk and pause so on in support.

00:01:52.250 --> 00:01:56.400
If you observe the task performed by all these methods,

00:01:56.400 --> 00:01:57.290
Stop,

00:01:57.290 --> 00:01:58.160
halt!

00:01:58.160 --> 00:02:01.870
And pause is essentially to stop the robot.

00:02:01.870 --> 00:02:07.950
The goal off this method is ultimately the same is to stop the robot keeping that in mind,

00:02:07.950 --> 00:02:09.580
let's assume that you have a robot.

00:02:09.580 --> 00:02:12.460
And since you're not such a big taking,

00:02:12.460 --> 00:02:16.250
you can't write a court similar to this by yourself.

00:02:16.250 --> 00:02:18.990
All you know is basics off Java.

00:02:18.990 --> 00:02:24.060
You know how to create an object off a class and make use off the method sins at that class

00:02:24.060 --> 00:02:24.060
?

00:02:24.060 --> 00:02:25.130
Nothing more than that.

00:02:25.130 --> 00:02:26.960
So since your knowledge and writing,

00:02:26.960 --> 00:02:28.250
the court is pretty limited.

00:02:28.250 --> 00:02:33.680
What you're gonna do is you're gonna purchase a court from company s one.

00:02:33.680 --> 00:02:35.250
Essentially,

00:02:35.250 --> 00:02:36.210
the class file,

00:02:36.210 --> 00:02:38.070
the bite cut off the source.

00:02:38.070 --> 00:02:38.420
Good.

00:02:38.420 --> 00:02:41.800
And what you're gonna do is you're gonna create an object off this class.

00:02:41.800 --> 00:02:42.670
Harvard,

00:02:42.670 --> 00:02:46.380
a new are one.

00:02:46.380 --> 00:02:49.840
And make use off all the methods inside it.

00:02:49.840 --> 00:02:50.730
Object,

00:02:50.730 --> 00:02:57.350
dog move and object d'art stop etcetera.

00:02:57.350 --> 00:03:00.890
Now we have a very serious problem here.

00:03:00.890 --> 00:03:09.940
Can you guess what it iss Let's assume that you realised the court provided by companies to

00:03:09.940 --> 00:03:12.450
is more relevant for your purpose.

00:03:12.450 --> 00:03:18.320
And you thought the court provided by companies to is more efficient and is performing the

00:03:18.320 --> 00:03:20.750
test faster than the source scored,

00:03:20.750 --> 00:03:22.140
provided by company s one.

00:03:22.140 --> 00:03:25.760
So he just wanted to switch to this source scored.

00:03:25.760 --> 00:03:29.830
So what you're gonna do is instead of our one you're gonna say are too,

00:03:29.830 --> 00:03:32.950
which is a class file from this company.

00:03:32.950 --> 00:03:37.300
But how do we make changes in here,

00:03:37.300 --> 00:03:38.170
For example?

00:03:38.170 --> 00:03:38.810
Instead,

00:03:38.810 --> 00:03:40.210
off the mattered move,

00:03:40.210 --> 00:03:44.510
you're gonna have to use the method walk instead of demented Stop.

00:03:44.510 --> 00:03:46.480
You're gonna have to use the method.

00:03:46.480 --> 00:03:47.010
Halt.

00:03:47.010 --> 00:03:49.400
So for this purpose,

00:03:49.400 --> 00:03:54.650
you need to go look at the documentation and try to understand what they're doing.

00:03:54.650 --> 00:03:55.110
You know what?

00:03:55.110 --> 00:04:00.760
I understand what the source code is doing to be able to make changes to our court,

00:04:00.760 --> 00:04:04.350
and we're just talking about a single class while,

00:04:04.350 --> 00:04:07.280
but in reality it would be an entire project.

00:04:07.280 --> 00:04:12.350
It's very time consuming and a messy process to make changes everywhere.

00:04:12.350 --> 00:04:13.740
Now in future.

00:04:13.740 --> 00:04:18.790
Let's Let's say you wanted to move to some other render maybe s story company.

00:04:18.790 --> 00:04:20.710
Then you'll end up doing the same.

00:04:20.710 --> 00:04:22.750
It's pretty pain taking process.

00:04:22.750 --> 00:04:25.560
How do we get drink off this problem?

00:04:25.560 --> 00:04:31.060
The salvation is interfaces.

00:04:31.060 --> 00:04:37.160
You can think often interference as an abstract class except the differences interfaces

00:04:37.160 --> 00:04:43.600
will not have methods with behavior off course with the introduction off.

00:04:43.600 --> 00:04:44.240
Deform it.

00:04:44.240 --> 00:04:45.830
That's in Java 1.8.

00:04:45.830 --> 00:04:47.890
You can have some behavior written,

00:04:47.890 --> 00:04:50.110
will talk about it at later point of time.

00:04:50.110 --> 00:04:57.950
But for no assume that an interferes can only have abstract methods and constant so the

00:04:57.950 --> 00:05:00.690
syntax off defining an interference would be something like this.

00:05:00.690 --> 00:05:04.100
We don't take a look at the example in our next radio,

00:05:04.100 --> 00:05:06.150
but just for the sake of this example,

00:05:06.150 --> 00:05:08.490
let's see the syntax for abstract last,

00:05:08.490 --> 00:05:12.200
you're gonna have to say class abstract,

00:05:12.200 --> 00:05:17.350
last name and you will have the signatures off the method.

00:05:17.350 --> 00:05:20.530
But coming to interface instead of clouds.

00:05:20.530 --> 00:05:28.040
You're gonna say in defense and you get it off this world abstract because it is implicitly

00:05:28.040 --> 00:05:29.950
assume that it is abstract.

00:05:29.950 --> 00:05:31.340
That's called this.

00:05:31.340 --> 00:05:31.940
I won.

00:05:31.940 --> 00:05:38.530
I stands were interface and only one have is signatures off these methods and you don't

00:05:38.530 --> 00:05:38.800
have to.

00:05:38.800 --> 00:05:39.660
Explicitly,

00:05:39.660 --> 00:05:40.990
Marv,

00:05:40.990 --> 00:05:45.580
this has abstract because the Java compiler does that implicitly.

00:05:45.580 --> 00:05:51.290
What are the matters you have in here Will be marked as abstract methods and whatever the

00:05:51.290 --> 00:05:57.180
variable that you have in here say in Texas equals 10 or whatever by default compiler will

00:05:57.180 --> 00:06:00.580
assume them to be off final static.

00:06:00.580 --> 00:06:03.810
You can't have a variable that is not off final static.

00:06:03.810 --> 00:06:04.900
Essentially,

00:06:04.900 --> 00:06:07.860
you're just going to have only the constants in an interface.

00:06:07.860 --> 00:06:10.310
But coming back to our example,

00:06:10.310 --> 00:06:12.490
Hader's and interfere solve the problem.

00:06:12.490 --> 00:06:15.840
All these companies as one s two s three,

00:06:15.840 --> 00:06:20.740
they're gonna have a small meeting and they're gonna discuss about their problems.

00:06:20.740 --> 00:06:25.980
They found out that customers are finding it difficult to move to a different vendor.

00:06:25.980 --> 00:06:32.050
The guy from S one says there's a customer who is interested in taking our cold,

00:06:32.050 --> 00:06:38.270
but he's not taking our code because there's a lot off task involved in making changes.

00:06:38.270 --> 00:06:41.170
Same is the problem with other companies as well.

00:06:41.170 --> 00:06:46.890
So all these three companies will come to an agreement that whatever the class was that

00:06:46.890 --> 00:06:47.450
we're right,

00:06:47.450 --> 00:06:53.030
we'll have the same signature for their methods and the way off.

00:06:53.030 --> 00:06:56.060
Standardizing that process is through an interface.

00:06:56.060 --> 00:07:02.390
So all these three companies will discuss and figure out an interface for a typical Robert

00:07:02.390 --> 00:07:02.390
.

00:07:02.390 --> 00:07:08.850
It will have all the methods sick natures like maybe walk,

00:07:08.850 --> 00:07:10.800
run,

00:07:10.800 --> 00:07:12.200
navigate,

00:07:12.200 --> 00:07:12.850
whatever.

00:07:12.850 --> 00:07:16.570
Whatever are the typical behavior off robot?

00:07:16.570 --> 00:07:20.070
They will decide and put it inside this interface.

00:07:20.070 --> 00:07:25.320
And all these class files in here are going to implement this interface.

00:07:25.320 --> 00:07:28.250
So instead of saying extends,

00:07:28.250 --> 00:07:31.300
that's called this interferes.

00:07:31.300 --> 00:07:31.870
I won.

00:07:31.870 --> 00:07:33.760
So instead of saying,

00:07:33.760 --> 00:07:34.580
extends,

00:07:34.580 --> 00:07:39.820
I want we're going to use the keyboard called Implements again.

00:07:39.820 --> 00:07:41.420
We're gonna take a look at this example,

00:07:41.420 --> 00:07:44.760
nor in our next radio implement,

00:07:44.760 --> 00:07:45.320
I won,

00:07:45.320 --> 00:07:48.380
and everybody's going to do the same implement.

00:07:48.380 --> 00:07:48.840
I won.

00:07:48.840 --> 00:07:50.450
And by doing so,

00:07:50.450 --> 00:07:58.980
all these class files are forced their forced to have to do some behavior for all the

00:07:58.980 --> 00:08:00.710
methods inside that interface.

00:08:00.710 --> 00:08:01.370
Now,

00:08:01.370 --> 00:08:04.210
how is this solving the problem off the customer?

00:08:04.210 --> 00:08:06.820
Let me explain the customer.

00:08:06.820 --> 00:08:07.650
I mean you,

00:08:07.650 --> 00:08:09.630
in this example instead,

00:08:09.630 --> 00:08:10.830
off saying are too.

00:08:10.830 --> 00:08:18.170
He's going to create a reference type off this interface I want so instead apart to his

00:08:18.170 --> 00:08:27.540
going to say I want and this reference type off interface bill Point to say this class

00:08:27.540 --> 00:08:28.440
object are,

00:08:28.440 --> 00:08:28.950
too.

00:08:28.950 --> 00:08:29.590
No.

00:08:29.590 --> 00:08:30.550
By doing so,

00:08:30.550 --> 00:08:34.370
he can only access the methods that are defined inside this interface.

00:08:34.370 --> 00:08:35.790
He can't access the method.

00:08:35.790 --> 00:08:36.720
Move anymore,

00:08:36.720 --> 00:08:43.050
is going to access the method walk whatever is there in the interface now in future,

00:08:43.050 --> 00:08:46.540
if you decide to move to a different vendor,

00:08:46.540 --> 00:08:52.330
all you have to do is to change the object to which this reference type is pointing toe.

00:08:52.330 --> 00:08:52.920
Say,

00:08:52.920 --> 00:08:53.780
Ortrie.

00:08:53.780 --> 00:08:55.810
Something like this.

00:08:55.810 --> 00:08:59.130
Now you don't have to make changes anywhere else in the court.

00:08:59.130 --> 00:09:00.020
The reason is,

00:09:00.020 --> 00:09:03.100
since everybody inherited or implemented,

00:09:03.100 --> 00:09:04.010
this interferes,

00:09:04.010 --> 00:09:06.850
and you use that in the first as the difference type.

00:09:06.850 --> 00:09:11.020
The methods are going to remain same for all the vendors.

00:09:11.020 --> 00:09:14.150
Isn't that amazing?

00:09:14.150 --> 00:09:17.790
So from your prospective,

00:09:17.790 --> 00:09:25.800
by using an interface you have the flexibility to switch to different vendor hasn't been

00:09:25.800 --> 00:09:26.370
required.

00:09:26.370 --> 00:09:27.880
At the same time,

00:09:27.880 --> 00:09:33.790
there is improvement in the maintain ability of the court and the time it takes to make

00:09:33.790 --> 00:09:35.050
changes to your court.

00:09:35.050 --> 00:09:36.400
Also,

00:09:36.400 --> 00:09:38.390
if you're switching to a different vendor,

00:09:38.390 --> 00:09:41.450
you don't need to know the engineers off their court,

00:09:41.450 --> 00:09:45.280
and you don't need to understand what the court is doing,

00:09:45.280 --> 00:09:47.630
for example,

00:09:47.630 --> 00:09:49.030
without the interfaces.

00:09:49.030 --> 00:09:49.740
Instead,

00:09:49.740 --> 00:09:50.650
off stop matter,

00:09:50.650 --> 00:09:56.700
you'll have to figure out what your new vendor is using and make changes here.

00:09:56.700 --> 00:09:58.320
But with the interfaces,

00:09:58.320 --> 00:10:00.370
no matter which vendor you use,

00:10:00.370 --> 00:10:02.410
you're going to have the same method.

00:10:02.410 --> 00:10:09.120
So essentially all these vendors will expose this interface and make it public to everyone

00:10:09.120 --> 00:10:09.120
.

00:10:09.120 --> 00:10:11.690
And people like you will look at this interface.

00:10:11.690 --> 00:10:13.510
They don't look at source court.

00:10:13.510 --> 00:10:20.180
So this is kind of like an abstraction mechanism which is also one of the major features

00:10:20.180 --> 00:10:25.950
off object oriented programming language and and also these vendors will keep this.

00:10:25.950 --> 00:10:28.350
Our source scored proprietary.

00:10:28.350 --> 00:10:31.350
They don't want to expose it and make it public,

00:10:31.350 --> 00:10:33.500
so but still,

00:10:33.500 --> 00:10:36.360
they can just expose only the limited details,

00:10:36.360 --> 00:10:39.850
like the method signatures exposing the interface.

00:10:39.850 --> 00:10:42.100
On the other hand,

00:10:42.100 --> 00:10:47.840
the benefits that the companies like has one S two s three will have is again the

00:10:47.840 --> 00:10:51.770
possibility that they're offering to their customers to switch to a different vendor.

00:10:51.770 --> 00:10:52.690
In a way,

00:10:52.690 --> 00:10:56.900
all these companies are forced toe implement this interface.

00:10:56.900 --> 00:11:00.690
The reason is only if the company in Pullman's isn't office,

00:11:00.690 --> 00:11:03.990
will the customers like you prefer their court.

00:11:03.990 --> 00:11:06.800
And also another benefit is,

00:11:06.800 --> 00:11:08.290
let's say there is no interface.

00:11:08.290 --> 00:11:13.050
And if they make changes to this method definition,

00:11:13.050 --> 00:11:15.570
then whoever or their clients,

00:11:15.570 --> 00:11:20.920
they'll end up getting compilation errors because now the signature changed.

00:11:20.920 --> 00:11:22.380
But with interfaces,

00:11:22.380 --> 00:11:24.090
there's no scope for change.

00:11:24.090 --> 00:11:27.150
It's going to remain the same thing forever.

00:11:27.150 --> 00:11:27.860
In fact,

00:11:27.860 --> 00:11:30.290
if you try to make changes to the signature of this map,

00:11:30.290 --> 00:11:30.740
that move,

00:11:30.740 --> 00:11:34.320
let's say then you're gonna have a compilation error.

00:11:34.320 --> 00:11:36.680
So there is no room for mistakes as well.

00:11:36.680 --> 00:11:39.000
So that's all water and interfaces.

00:11:39.000 --> 00:11:43.570
We're gonna take a look at some of the interesting examples going forward statement.

