WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.260
in this video,

00:00:01.260 --> 00:00:09.210
I'm going to talk about a keyboard called Super Super is a key word that we can use to

00:00:09.210 --> 00:00:15.850
access the parent place or super class constructor mattered or member variables.

00:00:15.850 --> 00:00:18.290
Here is the example for that.

00:00:18.290 --> 00:00:21.840
I'm just creating an object off class dog.

00:00:21.840 --> 00:00:22.810
That too,

00:00:22.810 --> 00:00:23.610
in work.

00:00:23.610 --> 00:00:27.820
The doctors constructor inside the constructor,

00:00:27.820 --> 00:00:32.310
amusing the keywords super to call the super class constructor,

00:00:32.310 --> 00:00:39.410
which is animal in that I have a default constructor with in which we're just printing a

00:00:39.410 --> 00:00:39.890
string.

00:00:39.890 --> 00:00:48.820
We're also able to call a method inside super class by using the super keyword we can also

00:00:48.820 --> 00:00:49.210
access.

00:00:49.210 --> 00:00:52.950
Remember very bolts with super key work.

00:00:52.950 --> 00:00:59.190
This is essentially like this keyword that we had talked earlier,

00:00:59.190 --> 00:01:02.050
but to Paris for support class.

00:01:02.050 --> 00:01:03.950
Let's run the program.

00:01:03.950 --> 00:01:13.850
It won't animal class constructor from this instruction,

00:01:13.850 --> 00:01:23.960
and we caught walking from this instruction and rebel to access the member variables

00:01:23.960 --> 00:01:25.510
without any errors.

00:01:25.510 --> 00:01:26.150
That's great.

00:01:26.150 --> 00:01:27.840
And finally,

00:01:27.840 --> 00:01:29.640
we're printing this string.

00:01:29.640 --> 00:01:35.350
Also know that when you're calling a constructor off a super class is in the super keyword

00:01:35.350 --> 00:01:40.090
that it has to be the first line off the constructor.

00:01:40.090 --> 00:01:41.700
For example,

00:01:41.700 --> 00:01:47.170
if I just cover this end pasted in here will get an error.

00:01:47.170 --> 00:01:49.590
Let's see what that says it is.

00:01:49.590 --> 00:01:52.870
Constructor call must be for statement in a constructor.

00:01:52.870 --> 00:01:54.750
So that's invalid.

00:01:54.750 --> 00:01:58.610
I cannot keep this treatment in here as go.

00:01:58.610 --> 00:02:01.210
It has to be the first statement.

00:02:01.210 --> 00:02:08.010
Even if you don't specify super in here by default,

00:02:08.010 --> 00:02:12.050
Java compiler will implicitly put a super statement in here.

00:02:12.050 --> 00:02:14.980
If you don't believe me,

00:02:14.980 --> 00:02:18.710
admit on this class and would get the exact same out.

00:02:18.710 --> 00:02:19.990
But as before,

00:02:19.990 --> 00:02:26.790
So Joe has implicitly put this super keyword in here to call the parent class parent class

00:02:26.790 --> 00:02:30.810
constructor to demonstrate the same in more detail.

00:02:30.810 --> 00:02:35.320
Let me just get rid off all this to me.

00:02:35.320 --> 00:02:37.150
Just get rid off these two lines in here.

00:02:37.150 --> 00:02:39.020
That said the file,

00:02:39.020 --> 00:02:45.920
Let's do control shift death to give a proper indentation to the court.

00:02:45.920 --> 00:02:49.070
We have a constructor in here.

00:02:49.070 --> 00:02:54.480
Let me also one comment This constructor in living being class,

00:02:54.480 --> 00:02:56.170
check the fight.

00:02:56.170 --> 00:02:59.140
We have three constructors in all.

00:02:59.140 --> 00:03:09.750
These three files were no longer needed.

00:03:09.750 --> 00:03:11.500
Now,

00:03:11.500 --> 00:03:15.500
by creating this grating object off the dog class,

00:03:15.500 --> 00:03:21.480
it's going to call this constructor and implicitly Java will put a super statement in here

00:03:21.480 --> 00:03:23.890
so super would be called.

00:03:23.890 --> 00:03:29.530
That means it will involve the constructor of animal class and even in here,

00:03:29.530 --> 00:03:35.590
the first statement off this constructor would be super so it will call the constructor off

00:03:35.590 --> 00:03:36.340
living being.

00:03:36.340 --> 00:03:44.710
So I would see this message first and then we'll see Animal class constructor and then

00:03:44.710 --> 00:03:45.410
we'll see.

00:03:45.410 --> 00:03:47.160
Dark class constructor.

00:03:47.160 --> 00:03:49.170
Let's Strider on this program.

00:03:49.170 --> 00:03:50.550
There you go.

00:03:50.550 --> 00:04:00.050
Now Justin gets if you get rid off the default constructor and make use off some Param

00:04:00.050 --> 00:04:01.000
addressed constructor,

00:04:01.000 --> 00:04:08.040
let's say in Texas or something would get her because it is expecting default constructor

00:04:08.040 --> 00:04:11.110
to be present in order picked.

00:04:11.110 --> 00:04:13.130
This error will have explicitly.

00:04:13.130 --> 00:04:15.370
He was a super key would.

00:04:15.370 --> 00:04:22.010
And he was the constructor of the barren class that they will get rid off.

00:04:22.010 --> 00:04:23.070
They're not.

00:04:23.070 --> 00:04:26.080
This brings me to talk about a couple of other topics.

00:04:26.080 --> 00:04:28.860
Instance.

00:04:28.860 --> 00:04:31.720
Initialize er block and static block.

00:04:31.720 --> 00:04:32.830
Let's talk about them.

00:04:32.830 --> 00:04:36.350
Let's first talk about instance initialized block.

00:04:36.350 --> 00:04:40.450
Let's say we have a couple off more constructors in here,

00:04:40.450 --> 00:04:45.890
but saying why?

00:04:45.890 --> 00:04:57.320
And a default constructor said the No.

00:04:57.320 --> 00:05:01.950
Let's say there is a piece off court that is common in all these constructors,

00:05:01.950 --> 00:05:04.550
I'll have to fight it repeatedly.

00:05:04.550 --> 00:05:06.050
In each and every constructor,

00:05:06.050 --> 00:05:13.740
there's worker and for this we use instance initialize a block is just an empty block with

00:05:13.740 --> 00:05:20.850
couple of curly braces and inside which you would right all the instructions that you want

00:05:20.850 --> 00:05:24.850
to be exhibited before excluding any off this constructors.

00:05:24.850 --> 00:05:40.380
Let's just stun dart out dot Tell him no matter which constructor you call,

00:05:40.380 --> 00:05:43.650
it's going to first execute this block.

00:05:43.650 --> 00:05:47.360
Let me demonstrate to you that instead,

00:05:47.360 --> 00:05:48.630
off doc class,

00:05:48.630 --> 00:06:03.380
let me just create an object off the animal class that's from the program.

00:06:03.380 --> 00:06:11.350
So first the living being constructor got executed and then the instance initialize er

00:06:11.350 --> 00:06:16.670
block and then the animal class constructor.

00:06:16.670 --> 00:06:21.810
So what has actually happened when we created an object off annual class?

00:06:21.810 --> 00:06:24.540
Since we didn't send any perimeters in here,

00:06:24.540 --> 00:06:26.990
it's going to call the Deep All Constructor.

00:06:26.990 --> 00:06:32.100
The first statement off the default constructor would be super.

00:06:32.100 --> 00:06:37.910
This will call the constructor of the super class and hands who have seen this message live

00:06:37.910 --> 00:06:39.000
in class instructor.

00:06:39.000 --> 00:06:45.850
And the next statement would be to call the instance initial as a block.

00:06:45.850 --> 00:06:49.310
And hence we see this message instance,

00:06:49.310 --> 00:06:50.290
in a block,

00:06:50.290 --> 00:06:51.840
and after that,

00:06:51.840 --> 00:06:54.350
the actual constructor will get executed.

00:06:54.350 --> 00:06:56.290
By looking at the output,

00:06:56.290 --> 00:07:00.710
you may be tempted to think that this is called first,

00:07:00.710 --> 00:07:04.090
but actually the constructor will be called first.

00:07:04.090 --> 00:07:09.670
But the instance initialized block will be called before executing the statement in the

00:07:09.670 --> 00:07:10.330
constructor.

00:07:10.330 --> 00:07:12.500
So somewhere in here will call.

00:07:12.500 --> 00:07:13.310
Instance,

00:07:13.310 --> 00:07:15.860
initialize a block hope that makes sense.

00:07:15.860 --> 00:07:23.960
So whenever we create an object to call the constructor first and then the full statement

00:07:23.960 --> 00:07:28.770
off constructor would be super if there is no super class present that the first

00:07:28.770 --> 00:07:33.940
instruction would be is to call the instance initialize a block and then the rest of the

00:07:33.940 --> 00:07:36.770
statements in the constructor would be executed home.

00:07:36.770 --> 00:07:37.620
That makes sense.

00:07:37.620 --> 00:07:40.650
Now let's talk about static block.

00:07:40.650 --> 00:07:46.090
The way the present static block is is the same for you to present an instance initial as a

00:07:46.090 --> 00:07:46.610
block,

00:07:46.610 --> 00:07:49.150
but with the world static.

00:07:49.150 --> 00:07:52.480
We've talked about the keyword static many times before,

00:07:52.480 --> 00:07:54.370
and with a static.

00:07:54.370 --> 00:07:57.330
This block is associate ID with the class,

00:07:57.330 --> 00:07:58.510
not with the object.

00:07:58.510 --> 00:08:05.110
So there's blocking here will be executed only once per class,

00:08:05.110 --> 00:08:08.510
no matter how many objects you create from the class,

00:08:08.510 --> 00:08:13.010
and this were obviously did the highest priority.

00:08:13.010 --> 00:08:13.670
In fact,

00:08:13.670 --> 00:08:15.250
it's not about the priorities.

00:08:15.250 --> 00:08:21.290
Before even creating the object this block would be executed and then to stop them would

00:08:21.290 --> 00:08:22.630
would come into picture.

00:08:22.630 --> 00:08:26.880
Let's a static block and let's run the program.

00:08:26.880 --> 00:08:31.360
Static block and restaurant instructions follow.

00:08:31.360 --> 00:08:34.350
So when will the static block gets called?

00:08:34.350 --> 00:08:36.820
Ecstatic Block will get in,

00:08:36.820 --> 00:08:39.210
walked in the classes first loaded.

00:08:39.210 --> 00:08:40.790
That means Heather,

00:08:40.790 --> 00:08:42.090
when the object is created,

00:08:42.090 --> 00:08:46.560
are then one of the static members is involved to,

00:08:46.560 --> 00:08:47.190
For example,

00:08:47.190 --> 00:08:47.640
we have,

00:08:47.640 --> 00:08:48.390
let's say,

00:08:48.390 --> 00:08:49.850
a method which is off static,

00:08:49.850 --> 00:08:50.900
static,

00:08:50.900 --> 00:08:52.860
uh,

00:08:52.860 --> 00:08:54.230
say wide.

00:08:54.230 --> 00:09:12.450
Some matter and system don our dog to blend told and static met shared the file.

00:09:12.450 --> 00:09:13.720
No,

00:09:13.720 --> 00:09:17.190
I can just use the last name to access that met the sense of static.

00:09:17.190 --> 00:09:19.770
So that's animal.

00:09:19.770 --> 00:09:28.250
Don't some electron the program.

00:09:28.250 --> 00:09:31.500
Fair enough static block.

00:09:31.500 --> 00:09:33.050
And then the static method.

00:09:33.050 --> 00:09:34.480
All right,

00:09:34.480 --> 00:09:36.180
to hope this all makes sense.

00:09:36.180 --> 00:09:37.650
See you in my next radio

