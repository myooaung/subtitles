WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.300
I'm not sure if you're aware of this,

00:00:02.300 --> 00:00:05.050
but we do have a psychology tracking system.

00:00:05.050 --> 00:00:12.740
Each and everyone up or radio will go to the system to make sure that the viewer is able to

00:00:12.740 --> 00:00:13.900
understand the concepts.

00:00:13.900 --> 00:00:14.490
Clearly,

00:00:14.490 --> 00:00:22.050
if the rating is below nine out of 10 then that means explanation needs to be improved.

00:00:22.050 --> 00:00:27.340
The rating that I got for my previous two videos is 7.5.

00:00:27.340 --> 00:00:33.800
That means some of you must be having some kind off confusion there on this object and

00:00:33.800 --> 00:00:34.420
classes.

00:00:34.420 --> 00:00:38.690
So this particular video will I'll try my best to bring clarity on it.

00:00:38.690 --> 00:00:40.780
And even in my next video,

00:00:40.780 --> 00:00:43.070
we're going to get into the technicalities off it.

00:00:43.070 --> 00:00:45.960
And you will definitely better understand the concept.

00:00:45.960 --> 00:00:48.820
Okay,

00:00:48.820 --> 00:00:49.000
Now,

00:00:49.000 --> 00:00:49.880
take a minute.

00:00:49.880 --> 00:00:54.350
Or maybe pause the video and try to figure out the output off this program.

00:00:54.350 --> 00:00:58.470
Okay,

00:00:58.470 --> 00:00:59.710
let's move on.

00:00:59.710 --> 00:01:07.150
We have created an object one and we're calling its constructor with the values 10 and 40.

00:01:07.150 --> 00:01:09.190
This is a parametric constructor,

00:01:09.190 --> 00:01:16.480
and these two para meters were just simply assigning to these very belts X and y.

00:01:16.480 --> 00:01:21.390
And when we execute the statement,

00:01:21.390 --> 00:01:29.270
its object one which is this dot edition will invoke this and it will find the addition off

00:01:29.270 --> 00:01:29.970
X and y.

00:01:29.970 --> 00:01:32.340
So what's expected?

00:01:32.340 --> 00:01:32.720
Output.

00:01:32.720 --> 00:01:34.540
Here it's 50.

00:01:34.540 --> 00:01:38.060
Now coming to second object.

00:01:38.060 --> 00:01:44.190
We're creating a new object all together with a different value 20 and 20.

00:01:44.190 --> 00:01:50.070
So the values of X and why would be 20 and 20 for this particular instance?

00:01:50.070 --> 00:01:53.610
So this is one story.

00:01:53.610 --> 00:01:55.260
This is a different story.

00:01:55.260 --> 00:01:59.060
I'll bring you clarity on this in my next video,

00:01:59.060 --> 00:02:03.150
where we get into some technicalities and see how memory location is done.

00:02:03.150 --> 00:02:06.870
Remember our example around houses.

00:02:06.870 --> 00:02:11.790
Using one single template we create multiple houses in the similar fashion were using

00:02:11.790 --> 00:02:14.970
single class to create multiple objects.

00:02:14.970 --> 00:02:19.730
We have two objects in here and each with a different state.

00:02:19.730 --> 00:02:23.920
Just as I have explained in that example of houses,

00:02:23.920 --> 00:02:29.850
you may want to revisit that radio if you wanted to check that out.

00:02:29.850 --> 00:02:32.950
But in here for object to,

00:02:32.950 --> 00:02:34.260
we have two different values.

00:02:34.260 --> 00:02:43.340
2020 and the it result off addition would be 40 for the statement would have object three,

00:02:43.340 --> 00:02:50.920
but for which we're ascending object one so object tree will constitute the same values.

00:02:50.920 --> 00:02:52.160
10 and 40.

00:02:52.160 --> 00:02:54.570
This is somewhat more,

00:02:54.570 --> 00:03:00.010
more or less similar to and X equals 10.

00:03:00.010 --> 00:03:05.000
And why equals X?

00:03:05.000 --> 00:03:07.470
This is somewhat similar.

00:03:07.470 --> 00:03:10.200
Remember,

00:03:10.200 --> 00:03:10.720
I said,

00:03:10.720 --> 00:03:13.480
this is like a user defined data type,

00:03:13.480 --> 00:03:14.850
and this is primitive type,

00:03:14.850 --> 00:03:20.200
and you can use this user defined data time just as primitive type.

00:03:20.200 --> 00:03:27.140
And hence even assigning is possible because object one an object,

00:03:27.140 --> 00:03:29.550
three or off same type mats.

00:03:29.550 --> 00:03:31.700
So what's the value?

00:03:31.700 --> 00:03:34.420
What is the result off this instruction?

00:03:34.420 --> 00:03:36.760
It would again be 50.

00:03:36.760 --> 00:03:41.450
Object for we're ascending object three,

00:03:41.450 --> 00:03:45.300
which in turn is being a sane to object one.

00:03:45.300 --> 00:03:52.250
So the result off object for object for should be seen as well,

00:03:52.250 --> 00:03:55.380
coming to object.

00:03:55.380 --> 00:03:55.970
Five.

00:03:55.970 --> 00:04:01.050
We have instead off assigning the values.

00:04:01.050 --> 00:04:04.470
I'm just trying to take the values from the object.

00:04:04.470 --> 00:04:04.770
One.

00:04:04.770 --> 00:04:07.220
When we created this object,

00:04:07.220 --> 00:04:08.400
we have actually a saint.

00:04:08.400 --> 00:04:10.030
The value 10 toe,

00:04:10.030 --> 00:04:11.070
very blacks.

00:04:11.070 --> 00:04:21.500
So this would be 10 and this would before he The result off this statement would be 50 as

00:04:21.500 --> 00:04:21.880
well.

00:04:21.880 --> 00:04:24.750
Let's stretch around the program,

00:04:24.750 --> 00:04:33.150
See,

00:04:33.150 --> 00:04:35.250
just as we expected.

00:04:35.250 --> 00:04:38.790
See you in my next video

