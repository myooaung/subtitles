WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.440 --> 00:00:06.060
Let's talk about the factory methods which are introduced in Java version nine.

00:00:06.060 --> 00:00:09.660
Let's say that I'd like to create an immutable list.

00:00:09.660 --> 00:00:11.265
Now before Java nine,

00:00:11.265 --> 00:00:13.035
This is how I supposed to do it.

00:00:13.035 --> 00:00:15.910
I'm going to first create a list.

00:00:16.580 --> 00:00:21.280
And this is going to hold list of string element.

00:00:22.460 --> 00:00:31.200
We provide the implementation and the statement.

00:00:31.200 --> 00:00:36.420
I'll do Control Shift O to import the acquired classes and interfaces.

00:00:36.420 --> 00:00:38.940
And once we have this,

00:00:38.940 --> 00:00:42.820
we can then add list of elements.

00:00:42.820 --> 00:00:47.610
I'm just simply going to add some random elements,

00:00:48.970 --> 00:00:59.639
maybe Apple or whatever doesn't matter.

00:01:02.860 --> 00:01:11.960
And then finally, we have to convert this into an immutable list by using one of

00:01:11.960 --> 00:01:14.550
the methods of collections

00:01:20.740 --> 00:01:24.705
on modifiable list.

00:01:24.705 --> 00:01:28.015
And we provide list as the argument.

00:01:28.015 --> 00:01:34.465
I'll do says Out and then finally, display the list.

00:01:34.465 --> 00:01:37.490
This obviously runs.

00:01:39.810 --> 00:01:43.135
And the fact that this is immutable,

00:01:43.135 --> 00:01:45.445
if you tried to add another element,

00:01:45.445 --> 00:01:47.780
you went to see an adder.

00:01:57.720 --> 00:02:01.614
Okay, it says unsupported operation exception.

00:02:01.614 --> 00:02:07.630
However, with factory methods which are introduced in Java version nine,

00:02:07.630 --> 00:02:12.325
we didn't have to write so many lines of code.

00:02:12.325 --> 00:02:14.515
This is very verbose.

00:02:14.515 --> 00:02:19.195
Instead, we can bring everything in here to a single line.

00:02:19.195 --> 00:02:24.250
We can actually accomplish the same by using lambda expressions,

00:02:24.250 --> 00:02:27.745
but into sacrifice on readability.

00:02:27.745 --> 00:02:32.030
Let's use one of the factor methods

00:02:32.640 --> 00:02:41.000
and see how it works.

00:02:41.520 --> 00:02:45.970
I'm going to say list dot off.

00:02:45.970 --> 00:02:47.860
This is static method.

00:02:47.860 --> 00:02:51.070
I don't have to create an instance to call it.

00:02:51.070 --> 00:02:54.460
And we have multiple variants of this method.

00:02:54.460 --> 00:02:56.440
Since we went to pass three arguments,

00:02:56.440 --> 00:03:01.675
I'm going to choose this method and pass those three arguments.

00:03:01.675 --> 00:03:12.229
Apple, banana, and pineapple.

00:03:13.470 --> 00:03:16.850
Let's suss out this.

00:03:16.860 --> 00:03:24.190
Save the file. And this should give us the same result.

00:03:24.190 --> 00:03:28.255
And this list is also immutable.

00:03:28.255 --> 00:03:34.490
So if you try to modify the list by maybe adding an element,

00:03:39.720 --> 00:03:43.820
then you're going to see the same adder.

00:03:45.690 --> 00:03:51.310
So what have we accomplished with the factor methods here?

00:03:51.310 --> 00:03:54.190
One thing that is very evident here is that we are able

00:03:54.190 --> 00:03:56.935
to reduce the number of lines of code.

00:03:56.935 --> 00:03:58.630
But apart from that,

00:03:58.630 --> 00:04:00.790
our list is also a mutable.

00:04:00.790 --> 00:04:03.460
And another thing which is quite significant is

00:04:03.460 --> 00:04:07.330
that we didn't explicitly mentioned the implementation of list.

00:04:07.330 --> 00:04:09.685
It's taken get automatically,

00:04:09.685 --> 00:04:13.450
meaning that the factor method is designed to pick

00:04:13.450 --> 00:04:18.075
the best implementation depending on the number of arguments that you provide.

00:04:18.075 --> 00:04:21.799
So that's another advantage in using the factory methods.

00:04:21.799 --> 00:04:27.679
We have factor methods for other collections as well like set, map, etc.

00:04:27.679 --> 00:04:31.565
And for map, you need to provide the key-value pairs.

00:04:31.565 --> 00:04:36.485
Let me try to show it. You can say map off.

00:04:36.485 --> 00:04:41.705
And you can provide the arguments in the form of key-value pairs.

00:04:41.705 --> 00:04:44.495
So if you were to add to elements in the map,

00:04:44.495 --> 00:04:48.270
you have to provide for arguments.
