WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.460
So what exactly are Java modules?

00:00:02.460 --> 00:00:04.995
Let us try to understand it with an example.

00:00:04.995 --> 00:00:08.505
So going back to our previous example where the banking gap

00:00:08.505 --> 00:00:12.300
is trying to send emails using the email app JAR file.

00:00:12.300 --> 00:00:13.725
And at the same time,

00:00:13.725 --> 00:00:15.974
we don't want the banking app to access

00:00:15.974 --> 00:00:20.085
the public classes available under util package off email app.

00:00:20.085 --> 00:00:23.895
So with modules, we can put that restriction.

00:00:23.895 --> 00:00:26.385
So this time inside the email app,

00:00:26.385 --> 00:00:31.470
we're going to introduce another file called module hyphen info dot Java.

00:00:31.470 --> 00:00:35.095
Here we're given the name of the module as com dot HTML app.

00:00:35.095 --> 00:00:38.030
This is actually recommended naming convention

00:00:38.030 --> 00:00:41.600
where he would give the same name as with the root package name.

00:00:41.600 --> 00:00:44.974
And then inside which we're doing a bunch of exports.

00:00:44.974 --> 00:00:47.330
We're exploiting the email package.

00:00:47.330 --> 00:00:50.255
We're exporting the operation package.

00:00:50.255 --> 00:00:52.385
We're also exporting the connect package.

00:00:52.385 --> 00:00:56.045
But we didn't export the util package.

00:00:56.045 --> 00:00:59.060
Meaning that whoever wants to use the email app,

00:00:59.060 --> 00:01:01.865
they can access all the public classes available in

00:01:01.865 --> 00:01:05.255
whatever the packages that were exported by the email app.

00:01:05.255 --> 00:01:10.265
But they won't be able to access the packages that are not exported.

00:01:10.265 --> 00:01:13.069
For example, the util package.

00:01:13.069 --> 00:01:14.915
So by stating this,

00:01:14.915 --> 00:01:18.050
the classes inside the utils class or only

00:01:18.050 --> 00:01:22.940
restricted within this module and not outside the module.

00:01:22.940 --> 00:01:25.145
And inside the banking app,

00:01:25.145 --> 00:01:29.645
you're going to have the same file module, hyphen info.plist.

00:01:29.645 --> 00:01:32.930
And it is also going to have a unique name.

00:01:32.930 --> 00:01:35.374
In this case it's com dot bandgap.

00:01:35.374 --> 00:01:39.320
And then inside that we've mentioned water,

00:01:39.320 --> 00:01:40.835
all the modules it requires.

00:01:40.835 --> 00:01:45.635
In this case we just define one module and that is com dot HTML app,

00:01:45.635 --> 00:01:50.525
because banking app wants to use that in order to send emails.

00:01:50.525 --> 00:01:51.740
Now guess what?

00:01:51.740 --> 00:01:54.350
The banking app can actually import all the packages of

00:01:54.350 --> 00:01:58.040
email app that were exported by email app.

00:01:58.040 --> 00:02:03.485
But it won't be able to access the util package or its classes.

00:02:03.485 --> 00:02:05.780
So what's the module here?

00:02:05.780 --> 00:02:11.435
Well, just tells you have packages to manage the visibility of classes and interfaces.

00:02:11.435 --> 00:02:16.655
You have modules to manage the visibility of packages and their classes.

00:02:16.655 --> 00:02:18.515
And believe it or not,

00:02:18.515 --> 00:02:22.865
this is all it takes to get rid of all the problems we had talked previously.

00:02:22.865 --> 00:02:28.650
If you want to understand how then into key porch in coming lectures.
