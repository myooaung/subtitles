WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.220
in this video,

00:00:02.220 --> 00:00:06.730
we're gonna talk about some of the problems that destroyed in multi trading programming

00:00:06.730 --> 00:00:09.130
we've already talked about.

00:00:09.130 --> 00:00:11.290
What's a deadlock in this video?

00:00:11.290 --> 00:00:19.070
We're gonna talk about something called a live lock and a situation called starvation In

00:00:19.070 --> 00:00:20.250
case of deadlock.

00:00:20.250 --> 00:00:25.900
Two or more threats are going to wait for each other for the lock to be available.

00:00:25.900 --> 00:00:27.900
We've already talked about it,

00:00:27.900 --> 00:00:30.350
but in case off live lock,

00:00:30.350 --> 00:00:34.350
both the threats are going to be alive.

00:00:34.350 --> 00:00:36.580
Unlike the deadlock case,

00:00:36.580 --> 00:00:38.650
where the board threads are blocked,

00:00:38.650 --> 00:00:41.730
they can't progress with executing the task in hand.

00:00:41.730 --> 00:00:42.850
But in here,

00:00:42.850 --> 00:00:44.470
in case off Lifelock.

00:00:44.470 --> 00:00:49.450
But the tests are going toe execute forever and for a reason.

00:00:49.450 --> 00:00:53.620
Take a look at this example has assumed that there are two friends,

00:00:53.620 --> 00:00:55.350
their friends in the childhood,

00:00:55.350 --> 00:00:57.660
and they happen to meet each other,

00:00:57.660 --> 00:00:59.750
saying a shopping mall after,

00:00:59.750 --> 00:00:59.950
say,

00:00:59.950 --> 00:01:00.750
10 years,

00:01:00.750 --> 00:01:02.490
they both see each other.

00:01:02.490 --> 00:01:04.470
Krish and JIA,

00:01:04.470 --> 00:01:06.570
the boat wanted to talk each other,

00:01:06.570 --> 00:01:09.750
but then nobody wants to initiate First.

00:01:09.750 --> 00:01:16.970
Chris is going toe wait for G out to say hello and Wise Worsen Jr is going to wait for

00:01:16.970 --> 00:01:21.430
Chris to say hello first and that's exactly what we're doing here.

00:01:21.430 --> 00:01:22.350
In this logic,

00:01:22.350 --> 00:01:30.530
the initial state off said Hello is false because nobody said hello and Krish is going to

00:01:30.530 --> 00:01:32.930
check to see if hello is being said by the other person.

00:01:32.930 --> 00:01:33.910
If not,

00:01:33.910 --> 00:01:39.650
he's going to wait for five seconds and he keep waiting forever until hello is said,

00:01:39.650 --> 00:01:41.230
on the other hand,

00:01:41.230 --> 00:01:48.610
years doing exactly same thing she's expecting Christo say hello and both these parties are

00:01:48.610 --> 00:01:51.130
never going to set this flat to true.

00:01:51.130 --> 00:01:53.530
Have you run this program?

00:01:53.530 --> 00:01:58.090
Both these threats are going to wait for each other forever.

00:01:58.090 --> 00:01:59.390
That's on the program,

00:01:59.390 --> 00:02:08.870
and you would see for every five seconds you're going to see these messages getting

00:02:08.870 --> 00:02:11.080
repeated and this happens forever.

00:02:11.080 --> 00:02:12.450
Let's stop the program.

00:02:12.450 --> 00:02:15.920
So the solution to this is pretty obvious.

00:02:15.920 --> 00:02:21.350
You should never write such kind of a logic where the execution will never end.

00:02:21.350 --> 00:02:26.760
Now let's talk about a situation called starvation threats.

00:02:26.760 --> 00:02:31.610
Starvation is a situation where threats will keep waiting forever,

00:02:31.610 --> 00:02:37.980
are starved to death because another threat enters the synchronous section and it remains

00:02:37.980 --> 00:02:41.190
there for a very long period of time or forever.

00:02:41.190 --> 00:02:43.760
In this example,

00:02:43.760 --> 00:02:53.040
we have a synchronized method in which we're trying to deal with the file like so and every

00:02:53.040 --> 00:02:58.180
thread wanted to create a file and write some cunt Internet in the scares.

00:02:58.180 --> 00:03:03.700
The first thread that's going to enter inside the singleness section will never finish the

00:03:03.700 --> 00:03:04.290
task,

00:03:04.290 --> 00:03:07.190
because the court is having a bad logic.

00:03:07.190 --> 00:03:09.450
Something like this in here.

00:03:09.450 --> 00:03:11.880
We're looping through forever,

00:03:11.880 --> 00:03:13.540
and due to this,

00:03:13.540 --> 00:03:15.210
the lock will never get freed.

00:03:15.210 --> 00:03:22.410
And so other threats cannot enter the synchronize section and acquire a system resource are

00:03:22.410 --> 00:03:24.880
right content into some kind of a file.

00:03:24.880 --> 00:03:29.550
Let's run this program and see the output.

00:03:29.550 --> 00:03:36.740
So one of these threads has entered insiders and created this file in the location test

00:03:36.740 --> 00:03:37.150
dinner.

00:03:37.150 --> 00:03:38.450
Let's go there,

00:03:38.450 --> 00:03:40.050
Here I am.

00:03:40.050 --> 00:03:42.330
So Threat T one entered post,

00:03:42.330 --> 00:03:44.280
and it has created the file,

00:03:44.280 --> 00:03:46.150
writing some content into it.

00:03:46.150 --> 00:03:47.230
But Dan,

00:03:47.230 --> 00:03:48.610
it struck.

00:03:48.610 --> 00:03:49.600
In this logic,

00:03:49.600 --> 00:03:52.150
no other threat can never enter this section.

00:03:52.150 --> 00:03:54.300
The program goes forever,

00:03:54.300 --> 00:03:57.840
but stop this so the solution is again.

00:03:57.840 --> 00:04:03.050
You shouldn't have such bad logic that's scattered off this and then run the program,

00:04:03.050 --> 00:04:08.680
and all the threats are going to have opportunity to create the file and write some content

00:04:08.680 --> 00:04:09.140
in it.

00:04:09.140 --> 00:04:10.750
Let's go to the directory.

00:04:10.750 --> 00:04:21.270
Here we have them and program finishes executing threats.

00:04:21.270 --> 00:04:25.430
Television can also happen when I say you have 10.

00:04:25.430 --> 00:04:26.420
Threats are off,

00:04:26.420 --> 00:04:28.530
which we get a couple of threats.

00:04:28.530 --> 00:04:31.410
The least priority the threats would lease.

00:04:31.410 --> 00:04:35.460
Priority may not get enough CPU cycles to get executed,

00:04:35.460 --> 00:04:39.790
So these two threats are again starving.

00:04:39.790 --> 00:04:41.800
That's it on this video.

00:04:41.800 --> 00:04:43.080
See you in my next video.

