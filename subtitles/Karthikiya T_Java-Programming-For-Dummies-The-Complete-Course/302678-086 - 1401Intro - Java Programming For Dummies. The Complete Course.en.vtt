WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.630
in this chapter,

00:00:01.630 --> 00:00:06.770
we're gonna talk about multi threading before we understand what is multi threading.

00:00:06.770 --> 00:00:09.480
Let us try to understand what is multi tasking.

00:00:09.480 --> 00:00:11.600
Take a look at this example.

00:00:11.600 --> 00:00:17.150
Let's say there is a person and his watching TV while his watching TV,

00:00:17.150 --> 00:00:21.660
his old table to eat popcorn and when his doing boat.

00:00:21.660 --> 00:00:25.000
He's also able to attend a car as part.

00:00:25.000 --> 00:00:29.780
This person Hate thinks that he's performing all this town simultaneously,

00:00:29.780 --> 00:00:36.200
but actually his brain is allocating few seconds off time on each one of these tests,

00:00:36.200 --> 00:00:41.140
and they're switching between the task so quickly that the person feels that he is doing

00:00:41.140 --> 00:00:42.810
all this staff simultaneously.

00:00:42.810 --> 00:00:43.660
For example,

00:00:43.660 --> 00:00:48.070
his brain is a locating two seconds off time in watching TV,

00:00:48.070 --> 00:00:54.090
said three seconds off time eating popcorn and a few seconds off time in attending the car

00:00:54.090 --> 00:00:54.090
,

00:00:54.090 --> 00:01:00.590
and it to just between all the staff so quickly that the person thinks that he is

00:01:00.590 --> 00:01:03.080
performing all the staff simultaneously.

00:01:03.080 --> 00:01:06.190
Same is the case with computers.

00:01:06.190 --> 00:01:11.590
If you have a computer with single processor and the reason why are able to run so many

00:01:11.590 --> 00:01:15.350
applications at the same time like put a shop,

00:01:15.350 --> 00:01:23.170
Microsoft Word are any game is because this processor is allocating some nanoseconds off

00:01:23.170 --> 00:01:26.250
time on each one off these applications,

00:01:26.250 --> 00:01:29.010
or let's call it processes.

00:01:29.010 --> 00:01:31.360
And it's just between.

00:01:31.360 --> 00:01:38.460
All these different applications are process so fast that as a user you feel that you're

00:01:38.460 --> 00:01:40.860
able to run all these applications simultaneously.

00:01:40.860 --> 00:01:43.050
So in both these cases,

00:01:43.050 --> 00:01:46.530
there is no actual simultaneous behavior.

00:01:46.530 --> 00:01:52.220
So when does computer perform tasks simultaneously is then you have more than two

00:01:52.220 --> 00:01:53.050
processors.

00:01:53.050 --> 00:01:57.120
Although you have one single physical Prosser,

00:01:57.120 --> 00:01:59.700
it can have more than two course.

00:01:59.700 --> 00:02:02.790
A core is just a logical division off a prosser,

00:02:02.790 --> 00:02:06.150
and each core would act just as another processor.

00:02:06.150 --> 00:02:10.250
When you have a processor at physical processor with two course,

00:02:10.250 --> 00:02:16.550
that means your system can perform two processes or two applications simultaneously.

00:02:16.550 --> 00:02:23.460
So now you can run photo shop and Microsoft Ward simultaneously.

00:02:23.460 --> 00:02:30.070
Where each processor is dedicated to run one application or a process,

00:02:30.070 --> 00:02:32.680
it's as good as having two brains,

00:02:32.680 --> 00:02:34.770
and each brain is allocated toe.

00:02:34.770 --> 00:02:35.650
One task.

00:02:35.650 --> 00:02:37.290
Now,

00:02:37.290 --> 00:02:41.680
since we're able to perform two processes simultaneously,

00:02:41.680 --> 00:02:47.550
this is called process based multi tasking.

00:02:47.550 --> 00:02:49.070
Under the type off,

00:02:49.070 --> 00:02:53.320
multitasking is called trend based multi tasking.

00:02:53.320 --> 00:02:54.650
Let's see water tears.

00:02:54.650 --> 00:02:57.290
Let us try to understand what is at threat.

00:02:57.290 --> 00:03:01.000
You can think off thread as a sub process.

00:03:01.000 --> 00:03:01.670
For example,

00:03:01.670 --> 00:03:04.700
let us consider Microsoft Lord in Microsoft board.

00:03:04.700 --> 00:03:08.930
There's a process that takes in the input from the keyboard from the user,

00:03:08.930 --> 00:03:11.050
and that's where you're able to see the text.

00:03:11.050 --> 00:03:16.790
And there could be another process running behind that will that will check the spelling

00:03:16.790 --> 00:03:18.250
off whatever your type.

00:03:18.250 --> 00:03:22.890
So each one off this up process can be termed as a threat,

00:03:22.890 --> 00:03:29.190
whereas from programming perspective it's an individual piece off exhibition off a program

00:03:29.190 --> 00:03:29.190
.

00:03:29.190 --> 00:03:31.460
Let me just explain you what I mean.

00:03:31.460 --> 00:03:33.150
Let's say you have a job,

00:03:33.150 --> 00:03:41.280
a program and say you have instructions on downloading your file and you have instructions

00:03:41.280 --> 00:03:43.300
that will that will do some man.

00:03:43.300 --> 00:03:47.510
Now both these sections off court are completely independent off each other.

00:03:47.510 --> 00:03:53.820
We don't want this section off court to wait for the file to get downloaded because this

00:03:53.820 --> 00:03:56.660
section off court has nothing to do with file download.

00:03:56.660 --> 00:04:03.550
So what we can do is we can separate board this sections and run them as two different

00:04:03.550 --> 00:04:05.240
process or so process.

00:04:05.240 --> 00:04:06.450
In our example,

00:04:06.450 --> 00:04:09.960
if you were to write the source code for Microsoft Word,

00:04:09.960 --> 00:04:20.350
then you'd have to sections off court That will do both these tests simultaneously so you

00:04:20.350 --> 00:04:23.250
can think off thread as a sub process when you run the program,

00:04:23.250 --> 00:04:25.460
whereas from program prospective,

00:04:25.460 --> 00:04:28.300
it's an individual piece off exhibition off a program.

00:04:28.300 --> 00:04:31.450
So what is the actual purpose off multi threading?

00:04:31.450 --> 00:04:34.560
Let's do you have a processor with two course,

00:04:34.560 --> 00:04:37.360
and let's assume that you didn't program,

00:04:37.360 --> 00:04:38.950
but multitude ring in mind.

00:04:38.950 --> 00:04:40.550
Now,

00:04:40.550 --> 00:04:41.910
if you run this program,

00:04:41.910 --> 00:04:47.310
the center program will be run only on a single logical processor while we keep the second

00:04:47.310 --> 00:04:48.410
Prosser Idol.

00:04:48.410 --> 00:04:52.480
But whereas if you called with multi training in mind,

00:04:52.480 --> 00:04:57.540
you would identify sections off court that are independent of each other and you would run

00:04:57.540 --> 00:04:58.450
them separately,

00:04:58.450 --> 00:05:04.400
your program bullet lives both this processors and each that would run on each one off

00:05:04.400 --> 00:05:06.170
these logical processors.

00:05:06.170 --> 00:05:06.860
So that way,

00:05:06.860 --> 00:05:10.790
if it takes 10 seconds to run the program with multi threading,

00:05:10.790 --> 00:05:13.760
you were drawn it and only maybe six seconds.

00:05:13.760 --> 00:05:18.850
So the basic purpose off multi training is to make the most off existing processors,

00:05:18.850 --> 00:05:21.520
and that's how we improved performance.

00:05:21.520 --> 00:05:26.850
We're gonna take a look at an example where I demonstrate you the utilization off the

00:05:26.850 --> 00:05:30.050
processor with multi trading and without multi threading.

00:05:30.050 --> 00:05:30.780
Now,

00:05:30.780 --> 00:05:37.230
since we're able to run multiple threads simultaneously with each tread on each one off

00:05:37.230 --> 00:05:38.080
this Prosser,

00:05:38.080 --> 00:05:40.500
this is called thread.

00:05:40.500 --> 00:05:42.550
Best multitasking.

00:05:42.550 --> 00:05:43.850
Oh,

00:05:43.850 --> 00:05:46.760
are multi threading?

00:05:46.760 --> 00:05:49.770
Hope that makes sense.

00:05:49.770 --> 00:05:51.350
See you in my next video.

