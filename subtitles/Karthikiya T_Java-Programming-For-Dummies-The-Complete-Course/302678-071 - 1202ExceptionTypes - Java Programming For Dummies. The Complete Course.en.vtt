WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.840
All right,

00:00:00.840 --> 00:00:02.380
let's continue in this.

00:00:02.380 --> 00:00:02.590
Really?

00:00:02.590 --> 00:00:05.880
We're gonna take a look at the types off exceptions.

00:00:05.880 --> 00:00:06.670
Basically,

00:00:06.670 --> 00:00:08.860
there are two categories off exceptions.

00:00:08.860 --> 00:00:16.070
We have checked exceptions and unchecked exceptions,

00:00:16.070 --> 00:00:18.230
and within the inject exceptions,

00:00:18.230 --> 00:00:20.540
we have a couple of more categories.

00:00:20.540 --> 00:00:28.580
There are Harris and from time exceptions,

00:00:28.580 --> 00:00:30.810
the example,

00:00:30.810 --> 00:00:36.520
which we have just taking a look at the no point exception is an example off runtime

00:00:36.520 --> 00:00:37.350
exceptions.

00:00:37.350 --> 00:00:43.530
All these runtime exceptions are due to the programming error are due to bad handling off

00:00:43.530 --> 00:00:44.350
exceptions.

00:00:44.350 --> 00:00:46.600
But when it comes to errors,

00:00:46.600 --> 00:00:51.080
these are actually not within the hands off a programmer.

00:00:51.080 --> 00:00:58.140
These errors are dependent on the hardware on on which here on the program I'm not talking

00:00:58.140 --> 00:01:00.920
about the compile time mirrors this syntax errors or,

00:01:00.920 --> 00:01:01.450
you know,

00:01:01.450 --> 00:01:06.800
if we're the same value off a 14 that that's all compelled to mirrors these kind of errors

00:01:06.800 --> 00:01:08.080
are still exceptions.

00:01:08.080 --> 00:01:08.480
I mean,

00:01:08.480 --> 00:01:09.810
they come during the run time.

00:01:09.810 --> 00:01:14.270
A good example of these errors could be the stack overflow error,

00:01:14.270 --> 00:01:17.550
which were looked at in our previous example.

00:01:17.550 --> 00:01:20.500
I'm going to demonstrate the same in a while.

00:01:20.500 --> 00:01:22.760
Maybe I'm just going to demonstrate,

00:01:22.760 --> 00:01:25.450
and then we'll talk about the checked exceptions.

00:01:25.450 --> 00:01:29.280
So in here I'm just going to create another method.

00:01:29.280 --> 00:01:30.550
Static.

00:01:30.550 --> 00:01:35.750
Why you met Rickerson?

00:01:35.750 --> 00:01:43.930
New percussion.

00:01:43.930 --> 00:01:46.650
We're just going to call the exact same method.

00:01:46.650 --> 00:01:49.950
And from here,

00:01:49.950 --> 00:01:59.950
we're going to call this method that's coming taught all these lines.

00:01:59.950 --> 00:02:02.080
If you run this program,

00:02:02.080 --> 00:02:07.310
this method is going to call itself forever until the stat gets full.

00:02:07.310 --> 00:02:07.820
Now,

00:02:07.820 --> 00:02:08.700
what is the stack?

00:02:08.700 --> 00:02:10.920
We talked about it a 1,000,000 times.

00:02:10.920 --> 00:02:16.090
The stack is a memory location where a dedicated section will be a located for each method

00:02:16.090 --> 00:02:16.510
call.

00:02:16.510 --> 00:02:18.460
That's on this program.

00:02:18.460 --> 00:02:22.260
Here we have it.

00:02:22.260 --> 00:02:25.500
If you go up a little bit,

00:02:25.500 --> 00:02:28.540
we got stack or flu.

00:02:28.540 --> 00:02:29.050
Ever.

00:02:29.050 --> 00:02:35.420
This method has called itself to an extent where the memories full.

00:02:35.420 --> 00:02:39.690
Now this is dependent on the hardware on which Iran,

00:02:39.690 --> 00:02:41.810
If you said that given perimeters to you,

00:02:41.810 --> 00:02:43.150
less more memory,

00:02:43.150 --> 00:02:45.900
then this would delay the error.

00:02:45.900 --> 00:02:46.540
Right?

00:02:46.540 --> 00:02:48.250
So these are called errors.

00:02:48.250 --> 00:02:51.130
Now let's talk about checked exceptions.

00:02:51.130 --> 00:02:52.970
What is a checked exception?

00:02:52.970 --> 00:02:54.260
As I mentioned,

00:02:54.260 --> 00:02:58.310
the major job off compiler is not to fix errors in your court.

00:02:58.310 --> 00:02:59.980
Its job is to translate your court.

00:02:59.980 --> 00:03:05.150
But however it's going to try its best to make make you write a clean court.

00:03:05.150 --> 00:03:08.770
That's where the checked exceptions will come into picture.

00:03:08.770 --> 00:03:10.750
When the Compel A scans your code,

00:03:10.750 --> 00:03:12.840
it's going to make a guess,

00:03:12.840 --> 00:03:15.580
just as you have predicted that there is a possibility off.

00:03:15.580 --> 00:03:17.000
No point exception in here.

00:03:17.000 --> 00:03:22.350
The compiler is going is also going to try its level best to make a guess on such

00:03:22.350 --> 00:03:23.120
exceptions.

00:03:23.120 --> 00:03:24.790
One such example.

00:03:24.790 --> 00:03:26.320
Often exception is vile,

00:03:26.320 --> 00:03:27.450
not one exception.

00:03:27.450 --> 00:03:30.200
I'm just going to pass the line off court.

00:03:30.200 --> 00:03:31.610
Essentially,

00:03:31.610 --> 00:03:33.380
let's import that class.

00:03:33.380 --> 00:03:34.850
Essentially,

00:03:34.850 --> 00:03:42.960
what this instruction is doing is we're just kind of getting a filed reader so that we can

00:03:42.960 --> 00:03:48.050
read the content inside this file in the subsequent instructions.

00:03:48.050 --> 00:03:50.090
But what were more industries?

00:03:50.090 --> 00:03:51.450
It has thrown an error.

00:03:51.450 --> 00:03:52.320
Let's see war,

00:03:52.320 --> 00:03:52.970
it tastes.

00:03:52.970 --> 00:03:54.220
Unhand,

00:03:54.220 --> 00:03:57.050
Aled Exception type file not found exception.

00:03:57.050 --> 00:04:02.830
So in here the computer made a guess that there is a possibility that we get fined,

00:04:02.830 --> 00:04:03.910
not run exception.

00:04:03.910 --> 00:04:05.200
What that means is,

00:04:05.200 --> 00:04:08.010
I have specified apart to a file.

00:04:08.010 --> 00:04:10.170
What if this pile is not existed?

00:04:10.170 --> 00:04:13.350
We're going to get a file not found exception when we run the program,

00:04:13.350 --> 00:04:18.610
so compiler is kind off telling us toe handle this exception because there is a possibility

00:04:18.610 --> 00:04:21.440
off files are being present in the specified location,

00:04:21.440 --> 00:04:27.130
so the programmer is forced to provide the handler for this.

00:04:27.130 --> 00:04:29.700
Only then will the compiler compile the program.

00:04:29.700 --> 00:04:32.360
Even though this file is actually present,

00:04:32.360 --> 00:04:37.210
Compiler is still going to ask the programmer to handle that exception.

00:04:37.210 --> 00:04:40.370
These kind of exceptions are called checked exceptions.

00:04:40.370 --> 00:04:44.220
That's because these exceptions are checked by the compiler,

00:04:44.220 --> 00:04:45.410
not by the programmer.

00:04:45.410 --> 00:04:46.650
Hope that makes sense.

00:04:46.650 --> 00:04:50.800
So we talked about all the types off exceptions.

00:04:50.800 --> 00:04:52.920
One is the error,

00:04:52.920 --> 00:04:54.780
like stack overflow error.

00:04:54.780 --> 00:04:57.170
That's why it's called an error.

00:04:57.170 --> 00:05:01.070
And we talked about runtime exception like,

00:05:01.070 --> 00:05:01.680
for example,

00:05:01.680 --> 00:05:02.920
null Pointer exception.

00:05:02.920 --> 00:05:06.310
And we'll take a look at the checked exceptions,

00:05:06.310 --> 00:05:07.870
which are checked by the compiler,

00:05:07.870 --> 00:05:08.770
for example,

00:05:08.770 --> 00:05:09.870
file not found.

00:05:09.870 --> 00:05:10.670
Exception,

00:05:10.670 --> 00:05:11.330
etcetera.

00:05:11.330 --> 00:05:14.640
We're gonna take a look at holy stuff exceptions.

00:05:14.640 --> 00:05:15.130
Of course,

00:05:15.130 --> 00:05:18.810
we're not going to go deep and write code for each and every thing.

00:05:18.810 --> 00:05:21.990
It's not what the time you can experiment it on your own,

00:05:21.990 --> 00:05:26.820
but we'll definitely be covering all the popular exceptions that you would typically come

00:05:26.820 --> 00:05:28.990
across when you write our programs.

00:05:28.990 --> 00:05:31.050
See you in my next radio

