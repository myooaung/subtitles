WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.820
in this week,

00:00:00.820 --> 00:00:03.600
we're gonna talk about finally block.

00:00:03.600 --> 00:00:09.840
Sometimes he might want execute set off instructions regardless off there is an exception

00:00:09.840 --> 00:00:10.380
or not.

00:00:10.380 --> 00:00:11.800
For example,

00:00:11.800 --> 00:00:13.650
I think off the scenario.

00:00:13.650 --> 00:00:16.400
Let's say you have a program,

00:00:16.400 --> 00:00:24.850
a Java program and all we're trying to do in here is to do something with one of the local

00:00:24.850 --> 00:00:26.890
system files in your hard drive.

00:00:26.890 --> 00:00:30.250
Maybe a TXT file.

00:00:30.250 --> 00:00:35.750
It's not possible for the Java virtual machine to directly access those files.

00:00:35.750 --> 00:00:41.110
It needs to take help from the underlying operating system.

00:00:41.110 --> 00:00:43.910
And in order to take help from the operating system,

00:00:43.910 --> 00:00:52.220
JBM is going to use near to interface and need to Ribery's If you remember,

00:00:52.220 --> 00:00:57.380
we've talked about new interface and native libraries when we talked about the Java Virtual

00:00:57.380 --> 00:00:58.390
Machine architecture.

00:00:58.390 --> 00:01:00.560
So this is where this,

00:01:00.560 --> 00:01:00.700
too,

00:01:00.700 --> 00:01:01.740
will come into picture.

00:01:01.740 --> 00:01:05.560
So first JBM needs to place a request to operating system,

00:01:05.560 --> 00:01:09.570
asking that it wants to do something with the local system files.

00:01:09.570 --> 00:01:14.530
Now the operating system will lead the reject or grant that program.

00:01:14.530 --> 00:01:20.990
The reason for this request and approval is to address one of the problems with this.

00:01:20.990 --> 00:01:22.180
For example,

00:01:22.180 --> 00:01:22.500
that said,

00:01:22.500 --> 00:01:23.710
there is another program,

00:01:23.710 --> 00:01:26.680
which is trying to access the same exact file.

00:01:26.680 --> 00:01:32.390
It's a then become let two programs headed the same file.

00:01:32.390 --> 00:01:34.080
It's going to create ambiguity.

00:01:34.080 --> 00:01:34.590
Actually,

00:01:34.590 --> 00:01:39.050
it's not ideal to call two programs accessing the same file.

00:01:39.050 --> 00:01:45.170
Maybe I should call this as two processes trying to did the same file think offered this

00:01:45.170 --> 00:01:45.420
way.

00:01:45.420 --> 00:01:48.800
Let's say we have two different Porter editing Softwares,

00:01:48.800 --> 00:01:53.650
se photo shop and something else,

00:01:53.650 --> 00:01:57.360
and both are tryingto edit the same exact fine.

00:01:57.360 --> 00:02:00.060
Wouldn't that create ambiguity?

00:02:00.060 --> 00:02:01.940
So to address this problem,

00:02:01.940 --> 00:02:08.700
operating system will grant the acquisition off the system resource like file only 21

00:02:08.700 --> 00:02:09.720
process at a time.

00:02:09.720 --> 00:02:11.590
Once that process,

00:02:11.590 --> 00:02:13.540
do whatever it wants to do with the fire,

00:02:13.540 --> 00:02:17.350
then the operating system will grant other processes.

00:02:17.350 --> 00:02:23.840
So it's the responsibility off the Java programmer to tell the operating system that it has

00:02:23.840 --> 00:02:27.260
performed all the operations that it wants to do on that file,

00:02:27.260 --> 00:02:30.520
and now it's free for the process to take.

00:02:30.520 --> 00:02:34.980
So in here you have instructions that will edit the file,

00:02:34.980 --> 00:02:41.320
and finally you have instructions that will tell the operating system that you're done

00:02:41.320 --> 00:02:42.350
using that file.

00:02:42.350 --> 00:02:48.450
But what if there is some kind off an exception in here,

00:02:48.450 --> 00:02:51.270
and that's going to cause a serious problem.

00:02:51.270 --> 00:02:54.190
These set off instructions will never get executed,

00:02:54.190 --> 00:02:58.600
which also means that this process acquired this resource,

00:02:58.600 --> 00:02:59.950
but it didn't treat it.

00:02:59.950 --> 00:03:02.740
Now operating system will wait forever,

00:03:02.740 --> 00:03:05.910
waiting for the resource to be freed by this process,

00:03:05.910 --> 00:03:07.210
which will never happen.

00:03:07.210 --> 00:03:08.180
And so,

00:03:08.180 --> 00:03:08.940
in this case,

00:03:08.940 --> 00:03:11.490
we can't use the hard drive in other processes.

00:03:11.490 --> 00:03:14.560
This is where the finally block coming to picture.

00:03:14.560 --> 00:03:19.470
If we could wrap this cord in finally block,

00:03:19.470 --> 00:03:23.200
then no matter if there is an exception or not in the proceeding court,

00:03:23.200 --> 00:03:27.870
the instructions in the finally block will get executed anyhow,

00:03:27.870 --> 00:03:32.640
so that way will be able to free the resources for other process.

00:03:32.640 --> 00:03:35.890
This is not only in case off acquiring the system resource.

00:03:35.890 --> 00:03:40.840
This is also applicable when you're trying to acquire a day the best connection.

00:03:40.840 --> 00:03:51.050
Now let's go back to our workbench and see how we can make use off the finally block.

00:03:51.050 --> 00:03:57.810
This is a very simple program that would generate an elbow into exception.

00:03:57.810 --> 00:04:03.080
Let's run it pretty well and good.

00:04:03.080 --> 00:04:03.710
Now,

00:04:03.710 --> 00:04:05.530
how do we write a finally block?

00:04:05.530 --> 00:04:07.890
You just have to use the keyword finally,

00:04:07.890 --> 00:04:14.650
and within the curly braces you will have all the cleanup court that I was talking about.

00:04:14.650 --> 00:04:25.460
Maybe you would want to disconnect from database released this system resource,

00:04:25.460 --> 00:04:27.310
etcetera.

00:04:27.310 --> 00:04:33.690
We're gonna talk about database connections and according the system resource at little

00:04:33.690 --> 00:04:34.550
point of time.

00:04:34.550 --> 00:04:36.610
But for the sake off this example,

00:04:36.610 --> 00:04:51.260
let's just simply use since out statement and probably block now.

00:04:51.260 --> 00:04:53.060
Even if we have an exception in here,

00:04:53.060 --> 00:04:56.350
this land off court will get executed.

00:04:56.350 --> 00:04:59.650
There it is.

00:04:59.650 --> 00:05:02.090
And even if we don't,

00:05:02.090 --> 00:05:04.190
that will get executed.

00:05:04.190 --> 00:05:10.880
Now you may ask me if we have the statement right after the try,

00:05:10.880 --> 00:05:11.810
catch block,

00:05:11.810 --> 00:05:14.610
like so even in that case,

00:05:14.610 --> 00:05:17.100
this instruction will get executed regardless off.

00:05:17.100 --> 00:05:18.470
If there is an exceptional not,

00:05:18.470 --> 00:05:19.570
for example,

00:05:19.570 --> 00:05:21.280
it's executed,

00:05:21.280 --> 00:05:24.420
and even if we have an exception,

00:05:24.420 --> 00:05:26.810
it will be executed.

00:05:26.810 --> 00:05:31.850
But there could be a case where the instructions after the catch block will never get

00:05:31.850 --> 00:05:32.400
executed.

00:05:32.400 --> 00:05:33.860
For example,

00:05:33.860 --> 00:05:35.420
it's under this changes.

00:05:35.420 --> 00:05:42.650
Let's assume that you have all this court inside a method and you're returning out of that

00:05:42.650 --> 00:05:46.210
method by using return keyboard.

00:05:46.210 --> 00:05:46.840
Then,

00:05:46.840 --> 00:05:47.730
in that case,

00:05:47.730 --> 00:05:50.540
all the subsequent instructions after the try,

00:05:50.540 --> 00:05:52.560
Catch Block will never get executed.

00:05:52.560 --> 00:05:56.060
But instructions and finally block will get executed.

00:05:56.060 --> 00:05:59.130
Another such case is,

00:05:59.130 --> 00:06:03.950
let's say you have an exception that is not handled in this case.

00:06:03.950 --> 00:06:05.630
We just turned up onto exception.

00:06:05.630 --> 00:06:11.420
But what if there is Hair Index Autobahn exception and is not caught in here?

00:06:11.420 --> 00:06:12.450
In that case,

00:06:12.450 --> 00:06:15.850
all the subsequent instructions will never get executed.

00:06:15.850 --> 00:06:19.910
But the instructions inside the panel it Brock will get executed.

00:06:19.910 --> 00:06:21.390
Another snotty,

00:06:21.390 --> 00:06:22.370
which I could think off,

00:06:22.370 --> 00:06:22.850
is,

00:06:22.850 --> 00:06:25.860
let's say you have an exception inside the catch block.

00:06:25.860 --> 00:06:27.750
The same thing will happen now.

00:06:27.750 --> 00:06:28.810
That being said,

00:06:28.810 --> 00:06:34.180
there could be a scenario where the court inside the panel block will never get executed.

00:06:34.180 --> 00:06:35.240
For example,

00:06:35.240 --> 00:06:42.150
if you explicitly exit out of the program by using system dot Exit,

00:06:42.150 --> 00:06:47.670
then it's going to cause the program to stop abruptly.

00:06:47.670 --> 00:06:52.250
You may want to explore this method exit on your own.

00:06:52.250 --> 00:06:56.460
A quick Google should help are in.

00:06:56.460 --> 00:06:58.720
Guess if there is an error.

00:06:58.720 --> 00:07:00.400
I mean something like a stack,

00:07:00.400 --> 00:07:03.710
all of redder or something than even In that case,

00:07:03.710 --> 00:07:10.050
the court inside the finally block will never get executed because any where's the enter

00:07:10.050 --> 00:07:12.820
program is going to crash under such scenarios.

00:07:12.820 --> 00:07:16.880
So there is no real purpose off releasing the resource.

00:07:16.880 --> 00:07:17.330
Okay,

00:07:17.330 --> 00:07:18.250
pretty well and good.

00:07:18.250 --> 00:07:24.800
Now you may have confusion between the finally block and the finalized matter we talked

00:07:24.800 --> 00:07:25.650
about earlier.

00:07:25.650 --> 00:07:27.650
The boat or distinct.

00:07:27.650 --> 00:07:31.570
Although the purpose off this two are almost similar,

00:07:31.570 --> 00:07:33.690
they were used in two different contexts.

00:07:33.690 --> 00:07:38.990
The finalize matter will get called when the corresponding object is going to get destroyed

00:07:38.990 --> 00:07:38.990
.

00:07:38.990 --> 00:07:41.370
But whereas finally is different,

00:07:41.370 --> 00:07:43.950
it has something to do with exceptions.

00:07:43.950 --> 00:07:46.940
Hope that distinction is pretty clear.

00:07:46.940 --> 00:07:47.900
Now,

00:07:47.900 --> 00:07:50.890
this will summarize the chapter on exception handling.

00:07:50.890 --> 00:07:51.920
That being said,

00:07:51.920 --> 00:07:57.530
we're gonna get back and talk about all the popular exceptions that are out there in the

00:07:57.530 --> 00:07:58.610
software industry.

00:07:58.610 --> 00:08:00.950
It's just that at this point of time,

00:08:00.950 --> 00:08:06.090
we haven't yet acquired enough knowledge to be able to comfortably understand all those

00:08:06.090 --> 00:08:06.860
exceptions.

00:08:06.860 --> 00:08:11.670
So we're gonna come back and go through all the list off exceptions at later point off time

00:08:11.670 --> 00:08:11.670
.

00:08:11.670 --> 00:08:17.250
And definitely I'm not going to show an example off which in every exception I'll just make

00:08:17.250 --> 00:08:19.730
sure that you're pretty well ever up.

00:08:19.730 --> 00:08:23.460
All sorts off popular exceptions are their hope.

00:08:23.460 --> 00:08:24.260
That makes sense.

00:08:24.260 --> 00:08:25.860
See you in my next video

