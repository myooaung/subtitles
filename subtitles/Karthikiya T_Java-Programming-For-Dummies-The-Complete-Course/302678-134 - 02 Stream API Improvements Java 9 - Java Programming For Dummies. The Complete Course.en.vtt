WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.900
In this video, we're going to take a look at some of the improvements that were

00:00:03.900 --> 00:00:07.710
brought in and stream API in Java version nine.

00:00:07.710 --> 00:00:09.105
So to demonstrate it,

00:00:09.105 --> 00:00:12.820
I'm going to actually create an integer stream.

00:00:12.920 --> 00:00:16.390
We're going to iterate through them.

00:00:17.600 --> 00:00:27.940
I'm going to start with the value one and would like to increment the value by one.

00:00:29.390 --> 00:00:35.160
The first method that I'd like to demonstrate is so-called take while.

00:00:35.160 --> 00:00:39.310
This method would allow me to enter a predicate.

00:00:39.310 --> 00:00:45.605
And we'll keep on accepting the elements till the point this condition is satisfied.

00:00:45.605 --> 00:00:47.720
Once this condition is failed,

00:00:47.720 --> 00:00:51.154
then will stop accepting the new elements.

00:00:51.154 --> 00:00:56.540
Going to say x is less than ten.

00:00:56.540 --> 00:01:04.560
And let's print the elements for each system.out.

00:01:05.980 --> 00:01:10.520
Print L, and save the file.

00:01:10.520 --> 00:01:13.920
And let's launch our application.

00:01:17.020 --> 00:01:21.900
So the values are printed until nine.

00:01:23.050 --> 00:01:32.420
In short, we will take the elements while this condition is met.

00:01:32.420 --> 00:01:36.110
The opposite of this is drop

00:01:36.110 --> 00:01:42.530
while we'll drop the elements till the point this condition is met.

00:01:42.530 --> 00:01:46.159
So we're not going to see all these elements,

00:01:46.159 --> 00:01:48.785
but we'll see the rest of the elements.

00:01:48.785 --> 00:01:52.265
The problem here is this would just go on forever.

00:01:52.265 --> 00:01:54.950
We're just going to drop the elements until nine,

00:01:54.950 --> 00:01:58.895
and we keep on printing the rest of the integers.

00:01:58.895 --> 00:02:03.780
Let me just run the program and show you what I mean.

00:02:06.220 --> 00:02:10.460
So this is going to go on till

00:02:10.460 --> 00:02:15.180
the time we hit the max value went explicitly stopped this.

00:02:17.230 --> 00:02:22.100
So what down and allows us to do is we can now have a

00:02:22.100 --> 00:02:28.130
predicate to go to the description of the iterate method.

00:02:28.130 --> 00:02:30.980
We now have a couple of variants of this method.

00:02:30.980 --> 00:02:33.680
One is with two parameters which we have just used,

00:02:33.680 --> 00:02:36.065
and the other width three parameters.

00:02:36.065 --> 00:02:40.100
So we have this hasNext, a predicate.

00:02:40.100 --> 00:02:42.515
We can put the condition,

00:02:42.515 --> 00:02:45.360
for instance that says

00:02:48.160 --> 00:02:54.630
I is less than 50 or whatever.

00:02:54.670 --> 00:03:01.440
Saved the file. And let's now longshot application once again.

00:03:01.510 --> 00:03:06.815
And it's just going to print the values until 50.

00:03:06.815 --> 00:03:14.525
But if you notice, it shouldn't print the initial nine values. That speakers.

00:03:14.525 --> 00:03:16.235
For those values.

00:03:16.235 --> 00:03:20.040
We have this condition becoming true.
