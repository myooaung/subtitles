WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.940
All right,

00:00:00.940 --> 00:00:02.640
let's continue in this.

00:00:02.640 --> 00:00:02.890
Really?

00:00:02.890 --> 00:00:05.980
We're gonna talk about intermediate operations.

00:00:05.980 --> 00:00:09.110
I already have this program run.

00:00:09.110 --> 00:00:10.950
And for your convenience,

00:00:10.950 --> 00:00:13.280
I'm going to get it off this panel.

00:00:13.280 --> 00:00:15.550
You can get it back whenever you want.

00:00:15.550 --> 00:00:18.220
So in here,

00:00:18.220 --> 00:00:19.510
I have couple off less.

00:00:19.510 --> 00:00:20.530
When it's off integer,

00:00:20.530 --> 00:00:21.780
the other is off string.

00:00:21.780 --> 00:00:23.510
I'm using the matter.

00:00:23.510 --> 00:00:24.890
Filter toe.

00:00:24.890 --> 00:00:31.190
Filter out some of the elements from the indigent stream based on this condition.

00:00:31.190 --> 00:00:32.650
So basically,

00:00:32.650 --> 00:00:38.020
the filter mother will eliminate all the elements that are not greater than five.

00:00:38.020 --> 00:00:44.290
So the resultant stream is going to constitute all these values which are greater than five

00:00:44.290 --> 00:00:44.290
.

00:00:44.290 --> 00:00:45.380
Map,

00:00:45.380 --> 00:00:46.400
on the other hand,

00:00:46.400 --> 00:00:48.550
is similar to filter,

00:00:48.550 --> 00:00:53.310
except it's not going to eliminate any elements from the stream.

00:00:53.310 --> 00:00:57.930
It would just simply apply this function on each and every element.

00:00:57.930 --> 00:01:00.250
So here is the output off map.

00:01:00.250 --> 00:01:04.250
The function is applied on all elements.

00:01:04.250 --> 00:01:10.850
You can use the methods map to end map too long and map to double.

00:01:10.850 --> 00:01:19.110
To convert the stream into a primitive type stream in the scarce were converting our stream

00:01:19.110 --> 00:01:20.100
off strings.

00:01:20.100 --> 00:01:25.830
Which is this to perimeter ent stream.

00:01:25.830 --> 00:01:28.790
Same is the case with this to instructions,

00:01:28.790 --> 00:01:30.660
Wrong stream and double stream.

00:01:30.660 --> 00:01:35.670
It could also start the stream in a particular order.

00:01:35.670 --> 00:01:39.320
If it's an indigent stream by default,

00:01:39.320 --> 00:01:42.170
it's going to be sorted as ascending order.

00:01:42.170 --> 00:01:45.280
So we got the stream started in here.

00:01:45.280 --> 00:01:48.300
If you want to start the stream in divorce order,

00:01:48.300 --> 00:01:51.700
then you're gonna pass in the Comparator like so.

00:01:51.700 --> 00:01:56.650
And we got the stream Salter into us order.

00:01:56.650 --> 00:01:57.460
Also,

00:01:57.460 --> 00:02:02.700
you can sort your own custom objects by creating your own comparator.

00:02:02.700 --> 00:02:07.070
We've already taken Look at such example in collections chapter.

00:02:07.070 --> 00:02:16.510
The Skip mattered will let us skip some and number off elements at the start of the stream

00:02:16.510 --> 00:02:16.510
.

00:02:16.510 --> 00:02:24.780
So we got rest of the elements and finally we have the limit method.

00:02:24.780 --> 00:02:25.270
We,

00:02:25.270 --> 00:02:25.670
in fact,

00:02:25.670 --> 00:02:33.040
had already talked about it and this example this exact same thing we have in here.

00:02:33.040 --> 00:02:38.950
So this should summarize on intermediate operations.

00:02:38.950 --> 00:02:47.690
Also note that the limit method is also called as a short circuit operation because it will

00:02:47.690 --> 00:02:53.090
return a finance stream from an infinite stream without dismantled.

00:02:53.090 --> 00:02:56.720
The stream keeps on getting random into your numbers.

00:02:56.720 --> 00:03:00.850
So we always use some kind off a matter like this.

00:03:00.850 --> 00:03:04.450
So these are pretty much the intermediate operations.

00:03:04.450 --> 00:03:09.060
See you in my next radio

