WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.080
in this lesson,

00:00:01.080 --> 00:00:03.850
we'll talk about unity operators.

00:00:03.850 --> 00:00:06.180
Let's double click the fire.

00:00:06.180 --> 00:00:09.650
Let's double like the tap to expand it.

00:00:09.650 --> 00:00:10.940
We have,

00:00:10.940 --> 00:00:11.230
you know,

00:00:11.230 --> 00:00:19.630
replace operators which tells job but that the integer is a positive into June and we have

00:00:19.630 --> 00:00:26.280
unity minus operator which tells job but that this number is the negative integer if you

00:00:26.280 --> 00:00:30.700
don't give any operator here by default Jabba Bill,

00:00:30.700 --> 00:00:33.650
assume this to be a positive integer.

00:00:33.650 --> 00:00:37.550
We have unity increments operator,

00:00:37.550 --> 00:00:44.890
and the operator looks something like this to consider you two plus signs and when we say a

00:00:44.890 --> 00:00:45.250
place,

00:00:45.250 --> 00:00:54.390
bless what this does is it will increment value by one So it essentially does a equals a

00:00:54.390 --> 00:01:01.150
placement in with an increment operator we have post increment and the pre increment.

00:01:01.150 --> 00:01:08.360
So in this instruction were doing post increment which means we're printing the current

00:01:08.360 --> 00:01:12.370
value off a and then we're incriminating the variable A.

00:01:12.370 --> 00:01:14.030
So if you execute,

00:01:14.030 --> 00:01:20.610
the statement would get 20 but But the next time you use a value a weakened increment value

00:01:20.610 --> 00:01:24.310
for example this instruction prince the incremental around you.

00:01:24.310 --> 00:01:29.920
But when it comes to pre increment were implementing the value off here by one before we

00:01:29.920 --> 00:01:30.550
print it.

00:01:30.550 --> 00:01:37.190
So this statement will actually print the incremental value and we have decriminalize

00:01:37.190 --> 00:01:37.820
operator.

00:01:37.820 --> 00:01:41.290
It has to contribute to minus signs.

00:01:41.290 --> 00:01:44.670
And what this essentially does is this.

00:01:44.670 --> 00:01:48.560
It does yea equals a minus one.

00:01:48.560 --> 00:01:51.910
It will decriminalise value off a variable by one.

00:01:51.910 --> 00:01:58.020
Even in here we have post D agreement and predicament imposed a criminal.

00:01:58.020 --> 00:02:01.770
We'll print the value off a and then we'll increment.

00:02:01.770 --> 00:02:03.880
So in this instruction,

00:02:03.880 --> 00:02:06.220
the value off he is currently 20.

00:02:06.220 --> 00:02:09.880
So in this instruction it would just write a reprint the value 20.

00:02:09.880 --> 00:02:11.680
But after it prints,

00:02:11.680 --> 00:02:14.850
it will decriminalise value off a by one.

00:02:14.850 --> 00:02:17.890
And the next time we used available A,

00:02:17.890 --> 00:02:20.110
we get the decree mentored value,

00:02:20.110 --> 00:02:21.390
which is 19.

00:02:21.390 --> 00:02:23.510
When it comes to predicament,

00:02:23.510 --> 00:02:25.390
we are dick lamenting the value,

00:02:25.390 --> 00:02:27.300
how fear and then printing it.

00:02:27.300 --> 00:02:28.990
Finally,

00:02:28.990 --> 00:02:31.760
we have logical complement operators.

00:02:31.760 --> 00:02:33.700
This were just reversed.

00:02:33.700 --> 00:02:36.080
The result offer bowling value,

00:02:36.080 --> 00:02:37.310
for example,

00:02:37.310 --> 00:02:39.160
is a greater than be.

00:02:39.160 --> 00:02:44.260
We have A and B and is indeed greater than be.

00:02:44.260 --> 00:02:50.670
The result off the statement would be true and the result off this treatment would be false

00:02:50.670 --> 00:02:50.670
,

00:02:50.670 --> 00:02:53.650
because we're essentially having the same equation here.

00:02:53.650 --> 00:02:55.550
But we're kind off.

00:02:55.550 --> 00:02:57.230
No getting it.

00:02:57.230 --> 00:03:00.760
So the value of this instruction would be false.

00:03:00.760 --> 00:03:02.350
Let's try to run the program.

00:03:02.350 --> 00:03:11.320
All right,

00:03:11.320 --> 00:03:12.450
here is output.

00:03:12.450 --> 00:03:21.560
The initial value off A is 20 and we are showing the result off this instruction.

00:03:21.560 --> 00:03:22.650
Hey,

00:03:22.650 --> 00:03:23.000
place,

00:03:23.000 --> 00:03:25.980
bless the value off is printed first,

00:03:25.980 --> 00:03:37.050
which is 20 and then the value off a post increment is 21 in here we're doing pre increment

00:03:37.050 --> 00:03:37.050
,

00:03:37.050 --> 00:03:44.780
so the value ofa is incremental and is printed at the same time because it's after the

00:03:44.780 --> 00:03:46.020
increment operator,

00:03:46.020 --> 00:03:51.400
we have the value A So the current value off he is 21.

00:03:51.400 --> 00:03:57.810
It's now incremental to 22 in here were just resetting the value off a back to 20.

00:03:57.810 --> 00:04:05.170
Now we did post the criminal the value off years printed.

00:04:05.170 --> 00:04:08.000
And then in the next instruction,

00:04:08.000 --> 00:04:15.030
we have the discriminative value and hence the result is 19 in here were doing pre

00:04:15.030 --> 00:04:15.850
recruitment.

00:04:15.850 --> 00:04:20.930
The value off a is dick lamented and printed at the same time.

00:04:20.930 --> 00:04:24.350
And we have logical complement.

00:04:24.350 --> 00:04:28.100
Operator is eager to then be true.

00:04:28.100 --> 00:04:33.150
And the logical complement off a greater than be is false.

00:04:33.150 --> 00:04:40.200
We'll understand and would definitely be using all these operators in our future.

00:04:40.200 --> 00:04:41.010
Gramps

