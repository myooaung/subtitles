WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.280
in the sweeter.

00:00:01.280 --> 00:00:04.050
We're gonna talk about callable interface.

00:00:04.050 --> 00:00:06.100
Take a look at this example.

00:00:06.100 --> 00:00:11.900
I'm creating a reasonable task and I'm running it by creating a new thread.

00:00:11.900 --> 00:00:13.250
Just like so.

00:00:13.250 --> 00:00:18.250
One of the issues with rentable task is that it cannot return a result.

00:00:18.250 --> 00:00:19.600
For example,

00:00:19.600 --> 00:00:26.550
I can't say return Expressway.

00:00:26.550 --> 00:00:30.550
This is going to give me a compound time error.

00:00:30.550 --> 00:00:32.340
And that's very obvious,

00:00:32.340 --> 00:00:34.590
because if you take a look at the interface,

00:00:34.590 --> 00:00:37.720
the matter run is not going to return anything.

00:00:37.720 --> 00:00:40.060
It is returning white,

00:00:40.060 --> 00:00:40.950
which means nothing.

00:00:40.950 --> 00:00:44.080
So same goes in here as well.

00:00:44.080 --> 00:00:46.440
So what can we do?

00:00:46.440 --> 00:00:49.850
We can make use off the callable interface,

00:00:49.850 --> 00:00:52.970
which is going to return a general perimeter.

00:00:52.970 --> 00:00:54.760
Not this could be integer.

00:00:54.760 --> 00:00:57.000
This could be double.

00:00:57.000 --> 00:00:58.760
This could be your own object.

00:00:58.760 --> 00:00:59.890
Whatever it is,

00:00:59.890 --> 00:01:03.310
it can certainly make use off colorable interface.

00:01:03.310 --> 00:01:08.500
That's important act.

00:01:08.500 --> 00:01:11.210
No,

00:01:11.210 --> 00:01:14.850
we don't have any compulsion mirrors in the task,

00:01:14.850 --> 00:01:18.060
which is a callable task in here.

00:01:18.060 --> 00:01:21.450
We certainly will have an error because unfortunately,

00:01:21.450 --> 00:01:25.590
the threat constructor will not accept a callable task.

00:01:25.590 --> 00:01:27.570
What we need to make use office.

00:01:27.570 --> 00:01:33.790
The zero service I'm going to say Is he good or so this.

00:01:33.790 --> 00:01:36.550
Let's give it some name.

00:01:36.550 --> 00:01:38.590
Ache,

00:01:38.590 --> 00:01:39.460
walls,

00:01:39.460 --> 00:01:50.250
exhibitors dart new single thread executor control shift tone.

00:01:50.250 --> 00:01:56.770
Now this instruction is going to create an executor service but just one single threat.

00:01:56.770 --> 00:01:59.910
This is where this method will come in handy.

00:01:59.910 --> 00:02:05.050
Since you can make use off the thread constructor to deal with callable task,

00:02:05.050 --> 00:02:07.750
it can use executive service just like so,

00:02:07.750 --> 00:02:17.050
And he will use this object and call the method Submit The exhibit matter is going to

00:02:17.050 --> 00:02:20.450
accept rentable interface as an argument.

00:02:20.450 --> 00:02:23.350
So we had to use the method submit,

00:02:23.350 --> 00:02:25.470
which will accept a horrible task.

00:02:25.470 --> 00:02:32.780
And we're gonna submit this task and after you do so just as in our previous example,

00:02:32.780 --> 00:02:39.560
you gonna call the shutdown because you get a service dot shut down.

00:02:39.560 --> 00:02:40.680
Now,

00:02:40.680 --> 00:02:42.210
we don't have a compound time error,

00:02:42.210 --> 00:02:46.400
but how are we going to get the value being returned from this task?

00:02:46.400 --> 00:02:52.050
The submit method is going to return an object called future.

00:02:52.050 --> 00:02:54.290
The future object is going to hold.

00:02:54.290 --> 00:02:56.500
They're returned result.

00:02:56.500 --> 00:02:59.030
Let's see how we can make use off it.

00:02:59.030 --> 00:03:01.870
I'm going to say future.

00:03:01.870 --> 00:03:07.890
The future is going to accept one gender perimeter in the scarce.

00:03:07.890 --> 00:03:14.010
We wanted to be in digital because that's what the result type is going to be.

00:03:14.010 --> 00:03:14.860
By the way,

00:03:14.860 --> 00:03:17.350
let's make this as integer.

00:03:17.350 --> 00:03:19.430
Just reward the confusion,

00:03:19.430 --> 00:03:24.950
integer and even this is going to be in danger.

00:03:24.950 --> 00:03:30.050
It's called this future.

00:03:30.050 --> 00:03:33.010
Let's do control shit Don't.

00:03:33.010 --> 00:03:34.380
Now,

00:03:34.380 --> 00:03:35.550
if you take a note,

00:03:35.550 --> 00:03:39.150
the Koblenz office is accepting one General Param Eter,

00:03:39.150 --> 00:03:43.570
and that is the written type off this method call.

00:03:43.570 --> 00:03:45.270
In this case,

00:03:45.270 --> 00:03:51.860
it's indigenous because compiler can figure that out by looking at this code inside the

00:03:51.860 --> 00:03:52.830
land expression.

00:03:52.830 --> 00:03:59.870
So this will work coming back on the future object you're gonna make use off a method

00:03:59.870 --> 00:04:02.370
called Get Future.

00:04:02.370 --> 00:04:06.850
Don't get now.

00:04:06.850 --> 00:04:11.000
The call future don't get is going to keep the calling thread.

00:04:11.000 --> 00:04:11.690
In this case,

00:04:11.690 --> 00:04:19.340
it's the main tread in waiting state until some result will get returned from the callable

00:04:19.340 --> 00:04:19.980
task.

00:04:19.980 --> 00:04:21.320
In this case,

00:04:21.320 --> 00:04:22.670
it's going to be pretty quick,

00:04:22.670 --> 00:04:25.260
So let's put another instruction here,

00:04:25.260 --> 00:04:30.490
say thread dot Sleep said 10 seconds.

00:04:30.490 --> 00:04:36.400
Now you might be wondering why the compiler is not complaining about the checked exceptions

00:04:36.400 --> 00:04:36.400
.

00:04:36.400 --> 00:04:42.990
That this leave meant that can potentially throw is because the call matter in here is also

00:04:42.990 --> 00:04:44.870
going to throw the exception.

00:04:44.870 --> 00:04:47.440
Object will talk about it in a minute.

00:04:47.440 --> 00:04:49.050
Let's continue with our example,

00:04:49.050 --> 00:04:53.590
but at least we should be seeing a compact a mirror in here.

00:04:53.590 --> 00:04:57.190
The reason we don't is because we're already dealing with those.

00:04:57.190 --> 00:05:00.400
Exceptions isn't the Trotsky Ward.

00:05:00.400 --> 00:05:03.670
So now we should get a combat a mirror.

00:05:03.670 --> 00:05:06.950
Let's handled exception with the try catch block.

00:05:06.950 --> 00:05:11.050
Let's get it off some of these comment in here.

00:05:11.050 --> 00:05:13.750
That looks a lot cleaner.

00:05:13.750 --> 00:05:14.540
Now.

00:05:14.540 --> 00:05:17.350
What do you want to do is you want to use this his out statement,

00:05:17.350 --> 00:05:21.150
just to be able to print the result that this task is returning.

00:05:21.150 --> 00:05:23.600
So that's it.

00:05:23.600 --> 00:05:24.790
That's on the program.

00:05:24.790 --> 00:05:26.350
And after 10 seconds,

00:05:26.350 --> 00:05:27.500
you should see the result.

00:05:27.500 --> 00:05:28.350
30.

00:05:28.350 --> 00:05:40.750
There you have it.

00:05:40.750 --> 00:05:46.870
Sometimes you may not want to wait for the task to get finished.

00:05:46.870 --> 00:05:49.180
You want to wait for a certain period of time,

00:05:49.180 --> 00:05:52.550
after which he wanted to stop the operation.

00:05:52.550 --> 00:05:54.050
For that,

00:05:54.050 --> 00:05:57.800
he can make use off some of the methods available on day future object,

00:05:57.800 --> 00:05:59.260
for instance,

00:05:59.260 --> 00:06:02.750
let's say we wanted to wait for five seconds in the main thread,

00:06:02.750 --> 00:06:05.050
so I did not sleep.

00:06:05.050 --> 00:06:11.710
Se five seconds against is going to throw the exceptions.

00:06:11.710 --> 00:06:17.070
Sorry about all the mess in here.

00:06:17.070 --> 00:06:20.650
Let's bear it for for some time.

00:06:20.650 --> 00:06:24.650
I'm going to say future.

00:06:24.650 --> 00:06:27.690
I'm going to put in it and then if close,

00:06:27.690 --> 00:06:30.720
so it's going to be future dot He's done.

00:06:30.720 --> 00:06:33.820
This matter is going to return a Boolean value.

00:06:33.820 --> 00:06:35.220
If it returns true,

00:06:35.220 --> 00:06:37.200
that means the task is done.

00:06:37.200 --> 00:06:39.610
And if it is false,

00:06:39.610 --> 00:06:40.760
it's the other way.

00:06:40.760 --> 00:06:43.750
So if the task is not done,

00:06:43.750 --> 00:06:53.160
what we want to do is we want to say future Dart canceled operation the scans the mother is

00:06:53.160 --> 00:06:54.410
going to take in one.

00:06:54.410 --> 00:06:55.720
Bullen Param Eter.

00:06:55.720 --> 00:06:56.460
In this case,

00:06:56.460 --> 00:06:58.450
we wanted to be true.

00:06:58.450 --> 00:06:59.530
Why?

00:06:59.530 --> 00:07:00.510
It has to be true.

00:07:00.510 --> 00:07:02.480
Go ahead and read the description.

00:07:02.480 --> 00:07:03.830
Uh,

00:07:03.830 --> 00:07:11.770
it says true if the thread executing this task should be interrupted Yes,

00:07:11.770 --> 00:07:16.330
we want the threat Executive This task to be interrupted otherwise in progress,

00:07:16.330 --> 00:07:18.650
tests are allowed to complete,

00:07:18.650 --> 00:07:21.040
so we'll keep it as true.

00:07:21.040 --> 00:07:22.360
No,

00:07:22.360 --> 00:07:28.890
the program are the main thread is going to wait for five seconds afterwards is going to

00:07:28.890 --> 00:07:33.710
cancel this task and we already know this is taking 10 seconds.

00:07:33.710 --> 00:07:35.950
So this should come first,

00:07:35.950 --> 00:07:38.050
let's run the program.

00:07:38.050 --> 00:07:45.930
You see cancellation exception.

00:07:45.930 --> 00:07:48.470
The exception is thrown by this method.

00:07:48.470 --> 00:07:54.500
Get because we cancel the operation before the result is already present.

00:07:54.500 --> 00:07:55.000
Now,

00:07:55.000 --> 00:07:58.050
if you observe the program didn't stop,

00:07:58.050 --> 00:08:06.730
let's run it again because we got an exception in the main thread that stopped the program

00:08:06.730 --> 00:08:07.630
explicitly.

00:08:07.630 --> 00:08:13.350
And let's deal with that exception on when to use another catch block for the get method

00:08:13.350 --> 00:08:14.540
the stem.

00:08:14.540 --> 00:08:17.350
It's going to be exception.

00:08:17.350 --> 00:08:18.170
No,

00:08:18.170 --> 00:08:19.240
let's run the program.

00:08:19.240 --> 00:08:27.490
You should see a proper result program got terminated pretty well and good.

00:08:27.490 --> 00:08:29.040
Likewise.

00:08:29.040 --> 00:08:32.360
There a couple of other exceptions that this get me the truth.

00:08:32.360 --> 00:08:34.350
You can see them in here,

00:08:34.350 --> 00:08:39.250
but the description I never let me just undo all those changes.

00:08:39.250 --> 00:08:44.910
I just wanted to explain you that you can interrupt the task if you wanted to.

00:08:44.910 --> 00:08:52.460
So one another thing about the calibre and offices that the calm it that is going to throw

00:08:52.460 --> 00:08:53.540
an exception as well.

00:08:53.540 --> 00:08:59.010
Unlike discernible interface whose Mitterrand is not going to throw the exception.

00:08:59.010 --> 00:09:00.140
And in fact,

00:09:00.140 --> 00:09:03.780
we have all really looked at an example the sleep method,

00:09:03.780 --> 00:09:09.140
Whatever the exception that this sleep mother can potentially throw needs to be handled in

00:09:09.140 --> 00:09:10.770
the calling threat,

00:09:10.770 --> 00:09:12.860
and that's what we have to put the try,

00:09:12.860 --> 00:09:16.150
catch block in here and deal with such exceptions.

00:09:16.150 --> 00:09:20.360
So that's it on the callable interface.

00:09:20.360 --> 00:09:21.110
By the way,

00:09:21.110 --> 00:09:25.770
you can also make use off fixed threat pool for callable tests as well.

00:09:25.770 --> 00:09:30.630
Let's take a look at an example off it to save your time.

00:09:30.630 --> 00:09:33.880
Let me just write the program and then I'll get back to you.

00:09:33.880 --> 00:09:40.370
So in here have created an executor service with a fixed rate pull off size five.

00:09:40.370 --> 00:09:50.270
And I'm isn't a for loop to submit the same task 10 times to the executor service,

00:09:50.270 --> 00:09:57.280
and all these white threats will be activated with the task being submitted at the same

00:09:57.280 --> 00:09:57.850
time,

00:09:57.850 --> 00:10:02.250
the future object that each one of these submit method returns.

00:10:02.250 --> 00:10:04.650
I went to store it in the list.

00:10:04.650 --> 00:10:11.550
I'm looking through all the future objects and trying to get the result.

00:10:11.550 --> 00:10:13.690
It's as simple as that.

00:10:13.690 --> 00:10:14.680
Finally,

00:10:14.680 --> 00:10:18.990
I'm doing the shutdown that's on the program,

00:10:18.990 --> 00:10:23.650
and we should see the results off all these 10 tasks,

00:10:23.650 --> 00:10:26.910
which is going to be 30 Peritus.

00:10:26.910 --> 00:10:29.330
It's as simple as that.

00:10:29.330 --> 00:10:30.750
See you in my next radio

