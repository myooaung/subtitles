WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.430
in this video,

00:00:01.430 --> 00:00:04.250
we're gonna talk about Mr Classes.

00:00:04.250 --> 00:00:06.380
Take a look at this.

00:00:06.380 --> 00:00:12.450
Let's say we have Class A and Class B and all the members off Class B.

00:00:12.450 --> 00:00:22.570
Our public and the only reason by Class B's members are public is because classier is using

00:00:22.570 --> 00:00:25.410
them classy.

00:00:25.410 --> 00:00:28.270
A needs access to all the members off Class B.

00:00:28.270 --> 00:00:29.780
No,

00:00:29.780 --> 00:00:31.890
let's say classy is not there.

00:00:31.890 --> 00:00:37.350
Then we can gladly mark all the members off plans be as private,

00:00:37.350 --> 00:00:39.700
not just because of one class.

00:00:39.700 --> 00:00:44.750
We're making all the members of Class B as public.

00:00:44.750 --> 00:00:47.950
This is clearly a problem.

00:00:47.950 --> 00:00:54.300
This will impact one off the major features off object oriented programming language.

00:00:54.300 --> 00:00:56.150
His encapsulation.

00:00:56.150 --> 00:01:02.750
We need to try our best to make as many members as possible.

00:01:02.750 --> 00:01:03.430
Two.

00:01:03.430 --> 00:01:03.890
Private.

00:01:03.890 --> 00:01:09.150
But Java gives us a solution to this problem.

00:01:09.150 --> 00:01:13.790
We can make a class sit inside on another class.

00:01:13.790 --> 00:01:16.620
So what class Inside another class.

00:01:16.620 --> 00:01:17.410
In this case,

00:01:17.410 --> 00:01:24.750
we just simply put this class a inside Class B so that he being a member of Class B,

00:01:24.750 --> 00:01:30.570
the classy will have access to its private variables to Class B's private very books and

00:01:30.570 --> 00:01:31.550
private methods.

00:01:31.550 --> 00:01:39.090
So the problem is solved Now we can gladly make all the members off be as private.

00:01:39.090 --> 00:01:42.360
This will improve the encapsulation,

00:01:42.360 --> 00:01:49.160
and that's clearly a great advantage coming to us in tax.

00:01:49.160 --> 00:01:50.160
It's pretty simple.

00:01:50.160 --> 00:01:54.190
We have a Class B.

00:01:54.190 --> 00:02:03.540
It will have its all member fields and member methods and written this curly braces will

00:02:03.540 --> 00:02:07.350
have another class defined class A,

00:02:07.350 --> 00:02:16.050
and then it will have its own member fields and member methods has simple as that.

00:02:16.050 --> 00:02:20.860
So we're basically nesting a class inside another class.

00:02:20.860 --> 00:02:42.470
It's called Mr the Class and that we have static Mr Class and known Static Mr Class.

00:02:42.470 --> 00:02:47.170
This is also called as in your class.

00:02:47.170 --> 00:02:54.330
Now let's take a look at board these examples in our workbench.

00:02:54.330 --> 00:02:55.450
See you there.

00:02:55.450 --> 00:02:59.770
Let's talk about static nested class first.

00:02:59.770 --> 00:03:05.470
So in here we have the ultra class and then inside it,

00:03:05.470 --> 00:03:07.230
we have another class defined.

00:03:07.230 --> 00:03:09.520
Wouldn't this class?

00:03:09.520 --> 00:03:13.550
We have a method that just simply prints a message.

00:03:13.550 --> 00:03:19.280
But do taking note of this keyboard static and miss ecstatic.

00:03:19.280 --> 00:03:24.800
This class in here will not have direct taxes to the instance very bolts,

00:03:24.800 --> 00:03:30.550
because when we have a static member just as static method,

00:03:30.550 --> 00:03:34.470
a static class is associated with the class.

00:03:34.470 --> 00:03:44.140
It's not associated with an instance in order to access this method met from how tight this

00:03:44.140 --> 00:03:45.300
class this is,

00:03:45.300 --> 00:03:51.850
how you would do this is the name off the auto class and then the inner class.

00:03:51.850 --> 00:03:53.590
But the dot operator,

00:03:53.590 --> 00:04:02.120
you'll get some name and the new you're gonna repeat the same thing so that we got an

00:04:02.120 --> 00:04:04.270
object off the Nestor class.

00:04:04.270 --> 00:04:11.970
They can call the method like so not this statement makes complete sense because let's say

00:04:11.970 --> 00:04:14.370
we have a method which is off static.

00:04:14.370 --> 00:04:16.250
How do we access that method?

00:04:16.250 --> 00:04:18.030
We use the class name.

00:04:18.030 --> 00:04:20.220
That's exactly what we're doing here.

00:04:20.220 --> 00:04:26.350
This class in here is more or less like a member method,

00:04:26.350 --> 00:04:27.060
so,

00:04:27.060 --> 00:04:27.370
you know,

00:04:27.370 --> 00:04:27.850
taxes.

00:04:27.850 --> 00:04:31.740
This we can just use the class name.

00:04:31.740 --> 00:04:33.550
Since this is says this a static.

00:04:33.550 --> 00:04:40.350
And that's what we did who used the class name toe access its member.

00:04:40.350 --> 00:04:41.410
In this case,

00:04:41.410 --> 00:04:42.860
it's just another class,

00:04:42.860 --> 00:04:46.290
and then we do need to create an object off the class.

00:04:46.290 --> 00:04:51.350
That's because the member function that we're trying to access is not static,

00:04:51.350 --> 00:04:57.050
so we need to have an instance or an object to be able to access this method.

00:04:57.050 --> 00:05:04.130
So in here we have a new key were used that will create a new object of the inner class and

00:05:04.130 --> 00:05:07.450
using that in her class object were able to call this method.

00:05:07.450 --> 00:05:09.220
And let's say,

00:05:09.220 --> 00:05:11.550
if this is static for the time being,

00:05:11.550 --> 00:05:15.250
let's have the file.

00:05:15.250 --> 00:05:20.090
And then I bet we would be able to access it directly,

00:05:20.090 --> 00:05:25.780
like so There it is.

00:05:25.780 --> 00:05:29.510
Let's under those changes.

00:05:29.510 --> 00:05:35.450
If you're on this file,

00:05:35.450 --> 00:05:39.590
then you would just see this message printed.

00:05:39.590 --> 00:05:40.750
Let's go to Detroit.

00:05:40.750 --> 00:05:54.050
There you go.

00:05:54.050 --> 00:06:01.800
Now let's take a look at non static nested class or in her class.

00:06:01.800 --> 00:06:05.840
We have the simmers in tax.

00:06:05.840 --> 00:06:08.550
For this we have another glass,

00:06:08.550 --> 00:06:11.760
and inside that we have and in her class.

00:06:11.760 --> 00:06:13.250
But there's one key difference.

00:06:13.250 --> 00:06:15.850
This class in here is not static,

00:06:15.850 --> 00:06:21.380
and the baby access the member methods off dinner plans is like this.

00:06:21.380 --> 00:06:22.160
First of all,

00:06:22.160 --> 00:06:24.520
we need to create an object off the order class,

00:06:24.520 --> 00:06:31.460
and then we will create the object off the inner class.

00:06:31.460 --> 00:06:33.530
He isn't the reference off.

00:06:33.530 --> 00:06:35.840
The outer class will take a look at how it's done,

00:06:35.840 --> 00:06:39.160
and then we'll be able to access its member methods.

00:06:39.160 --> 00:06:40.640
So this is how it is.

00:06:40.640 --> 00:06:42.430
We have an object off class,

00:06:42.430 --> 00:06:48.710
and then you need to have the falling syntax Toby To be able to get the control of dinner

00:06:48.710 --> 00:06:51.120
plans and access its member functions.

00:06:51.120 --> 00:06:59.390
You have the name off the auto glass and then name of the class with the daughter operator

00:06:59.390 --> 00:06:59.390
.

00:06:59.390 --> 00:07:05.410
Give any name in here and then the object off water glass.

00:07:05.410 --> 00:07:06.190
Start new.

00:07:06.190 --> 00:07:10.390
This is very important to say this is what does the magic.

00:07:10.390 --> 00:07:16.250
It will create an instance off dinner class and then here it is,

00:07:16.250 --> 00:07:17.950
were able to call that method.

00:07:17.950 --> 00:07:20.050
If you run this program,

00:07:20.050 --> 00:07:22.000
you would see this message.

00:07:22.000 --> 00:07:26.680
That's what Did you do that?

00:07:26.680 --> 00:07:32.550
There it is.

00:07:32.550 --> 00:07:42.680
Let's talk about some of the key differences between these two types of Mr classes.

00:07:42.680 --> 00:07:44.380
Static and non static.

00:07:44.380 --> 00:07:44.880
Mr.

00:07:44.880 --> 00:07:45.580
Classes.

00:07:45.580 --> 00:07:48.450
Unlike a static Mr Class,

00:07:48.450 --> 00:07:54.410
the inner class will have access to the instance variables for obvious reasons.

00:07:54.410 --> 00:07:57.050
Because this class is not static.

00:07:57.050 --> 00:08:00.270
Hence it is associated with an instance,

00:08:00.270 --> 00:08:01.620
not with the class.

00:08:01.620 --> 00:08:04.150
If we have a variable defined in here,

00:08:04.150 --> 00:08:10.890
then we can gladly access those member fields off the order class from the inner class.

00:08:10.890 --> 00:08:18.070
But that's not the case with the inner class in here because it's static and it does not

00:08:18.070 --> 00:08:19.810
have access to instance variables.

00:08:19.810 --> 00:08:23.410
Now that being said,

00:08:23.410 --> 00:08:24.920
we cannot.

00:08:24.920 --> 00:08:33.550
Java does not encourage us to declare any static members in here be it static fields or

00:08:33.550 --> 00:08:36.780
static methods inside this in her class,

00:08:36.780 --> 00:08:39.550
there is one good reason to do so.

00:08:39.550 --> 00:08:44.590
That's because it for a while it the definition off static.

00:08:44.590 --> 00:08:51.340
When you say a member of static that will signify that we shouldn't be needing to create an

00:08:51.340 --> 00:08:54.080
instance to be able to access it.

00:08:54.080 --> 00:08:56.130
We should be able to access it,

00:08:56.130 --> 00:08:57.350
but just a class name.

00:08:57.350 --> 00:09:00.720
But if we have a static member in here,

00:09:00.720 --> 00:09:01.680
for example,

00:09:01.680 --> 00:09:09.080
there's no way we can access it without ever creating an instance off its odor class.

00:09:09.080 --> 00:09:13.440
Because only when we create an instance off the order class build,

00:09:13.440 --> 00:09:15.760
we ever get control off.

00:09:15.760 --> 00:09:16.700
It's in your class,

00:09:16.700 --> 00:09:19.240
so it just doesn't make a lot of sense.

00:09:19.240 --> 00:09:21.180
And hence the designers off.

00:09:21.180 --> 00:09:28.510
Our decided not to support static members inside and known static in her class,

00:09:28.510 --> 00:09:33.950
but that being said we have,

00:09:33.950 --> 00:09:36.600
we can still create constants.

00:09:36.600 --> 00:09:37.900
For example,

00:09:37.900 --> 00:09:42.950
static final X equals stent are static final.

00:09:42.950 --> 00:09:45.990
The pie is 3.14 etcetera.

00:09:45.990 --> 00:09:48.520
That is a lot inside this class.

00:09:48.520 --> 00:09:49.950
You can give it a try if you want,

00:09:49.950 --> 00:09:56.390
and one of the beauty off this inner classes is that you can make use off the acts of

00:09:56.390 --> 00:10:01.890
specify IRS just as you do on member methods.

00:10:01.890 --> 00:10:03.670
You can have public,

00:10:03.670 --> 00:10:05.660
private protected and default access.

00:10:05.660 --> 00:10:10.470
Pass fires on and method in the same way you can have all those access.

00:10:10.470 --> 00:10:13.250
Specify IRS for inter class as well.

00:10:13.250 --> 00:10:14.460
For example,

00:10:14.460 --> 00:10:24.440
I can make this private doing so obviously we'll get an aero here because we cannot

00:10:24.440 --> 00:10:25.300
understand shit.

00:10:25.300 --> 00:10:27.190
Didn't know class anymore.

00:10:27.190 --> 00:10:29.940
We can instantly ate it,

00:10:29.940 --> 00:10:33.160
but only within the class in which it is reciting.

00:10:33.160 --> 00:10:41.250
Only the outer class will have the permission to create instance off the inner class.

00:10:41.250 --> 00:10:42.750
Let's undo that.

00:10:42.750 --> 00:10:47.670
Now you might be wondering when we don't have access to.

00:10:47.670 --> 00:10:48.620
Okay,

00:10:48.620 --> 00:10:52.680
let's go here when we don't have access to the instance Variables.

00:10:52.680 --> 00:10:57.150
What is the real reason why we would ever want to use a static and low class?

00:10:57.150 --> 00:10:59.100
One of the key examples,

00:10:59.100 --> 00:11:00.590
which I can explain right now,

00:11:00.590 --> 00:11:14.150
is this in here but have access to private constructor that's trying to create and create a

00:11:14.150 --> 00:11:15.050
constructor.

00:11:15.050 --> 00:11:36.790
But some message from my weight construct toe all right.

00:11:36.790 --> 00:11:38.590
Inside this method,

00:11:38.590 --> 00:11:41.890
we can create an object off this class.

00:11:41.890 --> 00:11:44.770
Let's come in this line.

00:11:44.770 --> 00:12:00.100
And now from here,

00:12:00.100 --> 00:12:01.270
if you run this program,

00:12:01.270 --> 00:12:05.110
we'll call this method and we have access.

00:12:05.110 --> 00:12:07.860
We have created an object off the ultra class,

00:12:07.860 --> 00:12:15.250
but taken note that you cannot create an object off a class whose constructor is private.

00:12:15.250 --> 00:12:19.610
We cannot create the object directly from this class,

00:12:19.610 --> 00:12:22.350
but we're able to do so in here.

00:12:22.350 --> 00:12:30.290
That's because this is a static class and were able to call this method we thought ever

00:12:30.290 --> 00:12:33.890
creating an instance off its order class in here.

00:12:33.890 --> 00:12:37.250
We have never created the instance off the ultra class.

00:12:37.250 --> 00:12:41.440
But whereas coming to inner class the non static in the class,

00:12:41.440 --> 00:12:45.800
we do have to create the instance off the out of class.

00:12:45.800 --> 00:12:48.950
And we cannot if we have a private method in here.

00:12:48.950 --> 00:12:49.980
Now,

00:12:49.980 --> 00:12:55.490
let's try to run this program run file,

00:12:55.490 --> 00:13:02.200
I said from private constructor great se you in my next video

