WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.400
in this chapter,

00:00:01.400 --> 00:00:05.310
we're gonna talk about stream FBI Possible.

00:00:05.310 --> 00:00:09.710
Let me clarify that whenever I use the term stream in this chapter,

00:00:09.710 --> 00:00:17.110
I don't mean to say input stream our output stream stream in this chapter or in this

00:00:17.110 --> 00:00:17.710
context,

00:00:17.710 --> 00:00:18.500
is different.

00:00:18.500 --> 00:00:20.170
We'll talk about it pretty soon.

00:00:20.170 --> 00:00:22.300
Consider the following example.

00:00:22.300 --> 00:00:25.850
Given a list off string element,

00:00:25.850 --> 00:00:29.400
I need to perform these three tests.

00:00:29.400 --> 00:00:35.050
Test number one is to store the list as a into journalist and test number two.

00:00:35.050 --> 00:00:40.620
Remove odd numbers from the list and store the even numbers in the list and number three.

00:00:40.620 --> 00:00:43.920
Find the some off all the remaining even numbers.

00:00:43.920 --> 00:00:48.750
Let me save your time by pausing this video right the cord and get back.

00:00:48.750 --> 00:00:54.010
So here we have the court for each one off this stance in here.

00:00:54.010 --> 00:00:59.800
I'm just looking to all the elements in the list and converting each element into integer,

00:00:59.800 --> 00:01:02.690
using the parson to matter off into your class.

00:01:02.690 --> 00:01:06.440
And I'm storing each one of these elements into a new list,

00:01:06.440 --> 00:01:08.050
which is an interview list.

00:01:08.050 --> 00:01:09.990
And in our second task,

00:01:09.990 --> 00:01:16.180
I've created a new list and in here under storing all the elements that are divisible by

00:01:16.180 --> 00:01:18.900
two and using this list,

00:01:18.900 --> 00:01:23.840
I'm trying to find the some off all the elements present in that list and I'm printing the

00:01:23.840 --> 00:01:24.550
output.

00:01:24.550 --> 00:01:29.250
Let's run the program and you should see 30.

00:01:29.250 --> 00:01:30.870
It is expected,

00:01:30.870 --> 00:01:37.190
but definitely this is a most way off writing the code because we're using four look

00:01:37.190 --> 00:01:38.250
multiple times.

00:01:38.250 --> 00:01:42.060
We could use a pullup only ones and get our has done.

00:01:42.060 --> 00:01:43.970
Let's see how we can do that.

00:01:43.970 --> 00:01:46.630
I'm going to get it off the entire court in here.

00:01:46.630 --> 00:01:48.770
Do take in order of all our tests,

00:01:48.770 --> 00:01:54.200
I'm going to come by in all this task together and write a shorter code.

00:01:54.200 --> 00:01:55.480
So for this,

00:01:55.480 --> 00:02:04.850
I'm going to use for each construct for string str and string list.

00:02:04.850 --> 00:02:11.060
So for each in their element in the list,

00:02:11.060 --> 00:02:16.180
I'm going to convert that into an integer and port this I'm going to introduce a new

00:02:16.180 --> 00:02:34.390
variable and let's call it value it close zero and in here wow equals integer integer dot

00:02:34.390 --> 00:02:42.980
parson str The statement would convert the current element to integer and wouldn't have if

00:02:42.980 --> 00:02:49.740
condition in here like end while more off two equals equals zero.

00:02:49.740 --> 00:02:53.570
That means the number is divisible by two.

00:02:53.570 --> 00:02:54.660
In that case,

00:02:54.660 --> 00:03:01.300
we assume that the number is uneven number and we're going to say some equal someplace,

00:03:01.300 --> 00:03:06.500
the current element that is converted to integer and guess what?

00:03:06.500 --> 00:03:07.880
That's all there is to it.

00:03:07.880 --> 00:03:11.050
Let's run the program and expect the same result.

00:03:11.050 --> 00:03:12.250
Awesome.

00:03:12.250 --> 00:03:17.210
Now let's see how we can accomplish the same set off tasks using streams.

00:03:17.210 --> 00:03:18.400
But before that,

00:03:18.400 --> 00:03:22.910
let us understand what is the stream with a wonderful example?

00:03:22.910 --> 00:03:24.390
Let's go toe white board.

00:03:24.390 --> 00:03:28.470
Let's say you have a reserve wear with some water in it.

00:03:28.470 --> 00:03:34.760
Now your task is to purify this water from there is a wire and collected into some

00:03:34.760 --> 00:03:35.550
container.

00:03:35.550 --> 00:03:38.180
And for this purpose,

00:03:38.180 --> 00:03:39.950
you're going to install a pipeline.

00:03:39.950 --> 00:03:41.120
Once you do,

00:03:41.120 --> 00:03:44.710
so the water will keep flowing in the pipeline.

00:03:44.710 --> 00:03:48.100
The water in here is nothing but a stream.

00:03:48.100 --> 00:03:51.160
We got stream off water in this pipeline.

00:03:51.160 --> 00:03:53.480
Now you wanted to purify this water.

00:03:53.480 --> 00:04:00.680
Now you'll pass this water into a section where it will remove impurities from the water

00:04:00.680 --> 00:04:01.970
again.

00:04:01.970 --> 00:04:03.050
In the process,

00:04:03.050 --> 00:04:09.730
you would let the water flow into another section where you would kill the bacteria present

00:04:09.730 --> 00:04:12.500
in the water and like wires.

00:04:12.500 --> 00:04:15.650
You let the water flow into the final stage,

00:04:15.650 --> 00:04:22.920
where you would add minerals into the water and then you'll finally collect the purified

00:04:22.920 --> 00:04:24.780
water into the container.

00:04:24.780 --> 00:04:30.800
So now we got a stream off water and it is going to multiple processors to ultimately get

00:04:30.800 --> 00:04:32.200
the result we wanted to get.

00:04:32.200 --> 00:04:36.100
The purified water stream in Java is no exception.

00:04:36.100 --> 00:04:37.580
Just like here,

00:04:37.580 --> 00:04:39.920
the water stream is having a source which,

00:04:39.920 --> 00:04:45.600
in the scarce is there is a war off water streaming Java is going to have a source.

00:04:45.600 --> 00:04:46.890
In our example.

00:04:46.890 --> 00:04:49.490
It's list off spring elements.

00:04:49.490 --> 00:04:54.050
And just as the water is flowing through multiple processes,

00:04:54.050 --> 00:05:01.350
our stream in job is going to go through multiple functions or methods in Java terms to get

00:05:01.350 --> 00:05:02.380
a final result.

00:05:02.380 --> 00:05:05.450
So instead off remove impurities.

00:05:05.450 --> 00:05:09.620
It's going to be called to a method called map to end,

00:05:09.620 --> 00:05:15.970
which will convert the stream off string elements into a stream off into gear elements and

00:05:15.970 --> 00:05:17.650
insert off kill bacteria.

00:05:17.650 --> 00:05:21.630
It's going to be a call to a matter called Filter,

00:05:21.630 --> 00:05:24.800
which will eliminate some of the elements in the stream.

00:05:24.800 --> 00:05:31.500
There's drawn certain conditions in our example in our task to weaken element all the

00:05:31.500 --> 00:05:36.760
elements that are not divisible by two and instead off add minerals.

00:05:36.760 --> 00:05:42.930
It's going to be mattered some which will find the some off all the remaining elements.

00:05:42.930 --> 00:05:44.160
And finally,

00:05:44.160 --> 00:05:45.550
you would get the result.

00:05:45.550 --> 00:05:52.980
Let's see how we can accomplish this programmatically now,

00:05:52.980 --> 00:05:58.240
just as we created stream off water with Reservoir as a source,

00:05:58.240 --> 00:06:03.490
we're going to create a stream off string elements with this list of the source.

00:06:03.490 --> 00:06:04.850
For that,

00:06:04.850 --> 00:06:12.660
I'm going to call the Stream Mattered off the list interface Just going to be string list

00:06:12.660 --> 00:06:14.150
dot stream.

00:06:14.150 --> 00:06:15.450
Now,

00:06:15.450 --> 00:06:16.510
as your guests,

00:06:16.510 --> 00:06:18.800
this is going to be a deep old method.

00:06:18.800 --> 00:06:28.560
Let's start the stream into a stream object and is going to accept one genic perimeter,

00:06:28.560 --> 00:06:29.580
which in this case,

00:06:29.580 --> 00:06:34.060
is going to be string because we have a stream off string elements.

00:06:34.060 --> 00:06:35.850
Let's do import.

00:06:35.850 --> 00:06:38.150
Let's do it a name.

00:06:38.150 --> 00:06:42.080
Now let's more onto our first task.

00:06:42.080 --> 00:06:46.060
We're gonna convert the stream into an indigent stream.

00:06:46.060 --> 00:06:47.850
How do we do that?

00:06:47.850 --> 00:06:54.340
We're gonna say asked your stream dot map.

00:06:54.340 --> 00:06:57.650
Do int is a method that you wanna call.

00:06:57.650 --> 00:07:02.770
This is going to convert the string stream into an indigent stream,

00:07:02.770 --> 00:07:05.250
but going to tell how to do so,

00:07:05.250 --> 00:07:07.560
and for that purpose,

00:07:07.560 --> 00:07:11.050
this matter is going to accept one function interprets as an argument.

00:07:11.050 --> 00:07:12.940
As you can see it,

00:07:12.940 --> 00:07:15.560
it's going to be too in function.

00:07:15.560 --> 00:07:20.990
So let's make use off that we can certainly make use off alarmed expression here.

00:07:20.990 --> 00:07:23.100
And the Lambda expressions say,

00:07:23.100 --> 00:07:31.660
is integer that person and is going to take their element and that's it.

00:07:31.660 --> 00:07:33.250
Reaching every element.

00:07:33.250 --> 00:07:41.350
This will be executed and ultimately our stream would constitute stream off integers.

00:07:41.350 --> 00:07:44.740
But we to store the stream somewhere.

00:07:44.740 --> 00:07:48.890
It's going to be int stream.

00:07:48.890 --> 00:07:54.800
That's important that now let's move on to next task,

00:07:54.800 --> 00:07:59.650
where we would remove all the integer elements that are not divisible by two.

00:07:59.650 --> 00:08:01.150
For this,

00:08:01.150 --> 00:08:07.750
I'm going to say in stream dot filter.

00:08:07.750 --> 00:08:10.930
No filter is going to accept one function interface,

00:08:10.930 --> 00:08:14.000
which is going to be into predicate now.

00:08:14.000 --> 00:08:19.650
This is the condition under which the pills the mother will decide whether to keep the

00:08:19.650 --> 00:08:21.490
element or to remove it.

00:08:21.490 --> 00:08:23.810
So let's make use off that.

00:08:23.810 --> 00:08:25.500
So for each element,

00:08:25.500 --> 00:08:28.170
we want to do the following Now,

00:08:28.170 --> 00:08:40.710
whatever the logic that you provide here has to return a Boolean value a more two equals

00:08:40.710 --> 00:08:41.850
equals zero.

00:08:41.850 --> 00:08:46.350
Then we want toe Keep that element again.

00:08:46.350 --> 00:08:52.810
This will return the in stream which would know constitute on the limited set off elements

00:08:52.810 --> 00:08:52.810
.

00:08:52.810 --> 00:08:56.500
Because we have eliminated some of the elements based on this condition,

00:08:56.500 --> 00:08:58.760
let's call it in Stream one.

00:08:58.760 --> 00:09:00.510
And finally,

00:09:00.510 --> 00:09:04.990
we're gonna find the sum of all the left or elements for that.

00:09:04.990 --> 00:09:13.520
I'm going to call the method called some and with this were done with all our tests,

00:09:13.520 --> 00:09:15.050
Let's run the program.

00:09:15.050 --> 00:09:17.390
The result is,

00:09:17.390 --> 00:09:18.310
as expected,

00:09:18.310 --> 00:09:21.060
not just for the sake off your understanding.

00:09:21.060 --> 00:09:25.450
I have written caught separately for each one of these individual tasks.

00:09:25.450 --> 00:09:26.930
But in fact,

00:09:26.930 --> 00:09:30.280
we can write all these in just one statement.

00:09:30.280 --> 00:09:37.860
So let me just do that for you when to copy this and have it in here.

00:09:37.860 --> 00:09:44.990
And then I'm going to copy this and then ignore this intact errors will get it off them

00:09:44.990 --> 00:09:45.870
pretty soon.

00:09:45.870 --> 00:09:48.250
And I'm going to say,

00:09:48.250 --> 00:09:59.980
don't some the resultant value is going to be end and now we can get it off everything in

00:09:59.980 --> 00:10:00.600
here.

00:10:00.600 --> 00:10:03.850
But just display this variable.

00:10:03.850 --> 00:10:05.030
The result.

00:10:05.030 --> 00:10:12.070
Let me just put this in individual lines that will make the cord look a lot cleaner.

00:10:12.070 --> 00:10:14.440
Let's save the file and run the program,

00:10:14.440 --> 00:10:20.860
and result is as expected Now.

00:10:20.860 --> 00:10:24.250
What is the difference between these two examples?

00:10:24.250 --> 00:10:25.430
Again,

00:10:25.430 --> 00:10:30.840
this is more often functional programming than our traditional Java program.

00:10:30.840 --> 00:10:33.070
In this example,

00:10:33.070 --> 00:10:36.610
we're not only focused on what needs to be done,

00:10:36.610 --> 00:10:41.910
but also how it needs to be done by using external I traitors.

00:10:41.910 --> 00:10:47.790
Whereas in here we're just focused on what needs to be done,

00:10:47.790 --> 00:10:53.450
and everything else is handled by these methods using internal I traitors.

00:10:53.450 --> 00:10:54.070
Also,

00:10:54.070 --> 00:11:00.170
if you notice in here we have clubbed or combined all our task in one go.

00:11:00.170 --> 00:11:02.820
This might look little confusing,

00:11:02.820 --> 00:11:07.110
whereas in here with still retained the sequence of four tasks.

00:11:07.110 --> 00:11:10.360
So this looks ordered and more meaningful,

00:11:10.360 --> 00:11:12.160
or should I say,

00:11:12.160 --> 00:11:17.480
more expressive and closer to human understandable language.

00:11:17.480 --> 00:11:17.770
Now,

00:11:17.770 --> 00:11:22.950
since you're used to writing Java programs using object oriented programming approach,

00:11:22.950 --> 00:11:26.450
it might take a while to digest in start using streams.

00:11:26.450 --> 00:11:32.500
But I bet if you show these two programs to someone who never programmed before,

00:11:32.500 --> 00:11:36.550
he would understand streams better than this program.

00:11:36.550 --> 00:11:40.430
When we talk about battle streams,

00:11:40.430 --> 00:11:46.140
you'll also understand that there will be significant performance benefit as well with

00:11:46.140 --> 00:11:46.850
streams,

00:11:46.850 --> 00:11:48.700
so stay tuned

