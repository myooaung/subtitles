WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.750
in this video,

00:00:02.750 --> 00:00:09.480
we're gonna take a look at how we can create a tread on our own for this purpose.

00:00:09.480 --> 00:00:11.420
Please import the project,

00:00:11.420 --> 00:00:17.590
multi threading into your workspace and open up this file main threat example.

00:00:17.590 --> 00:00:22.370
All I'm doing here is I'm just throwing a simple exception,

00:00:22.370 --> 00:00:24.550
which is not wonder exception.

00:00:24.550 --> 00:00:30.120
And the reason why I'm doing so is because to demonstrate your that so far,

00:00:30.120 --> 00:00:35.780
although we haven't explicitly created treads on our own jbm has done that for us.

00:00:35.780 --> 00:00:36.820
By default,

00:00:36.820 --> 00:00:43.250
jbm will create a thread called Main and thus the reason whenever you have an exception,

00:00:43.250 --> 00:00:48.810
you would see a message that starts with an exception in trade Main.

00:00:48.810 --> 00:00:54.070
Let me just show you what I mean Exception and thread main.

00:00:54.070 --> 00:00:59.870
That's because gave IAM has created a thread which is main trade.

00:00:59.870 --> 00:01:04.410
Now let's see how we can create threads on our own.

00:01:04.410 --> 00:01:08.140
A separate piece off exhibition off a program.

00:01:08.140 --> 00:01:11.050
In this example.

00:01:11.050 --> 00:01:13.450
I'm doing something in here,

00:01:13.450 --> 00:01:21.750
and I'm also taking the time when the program starts and the time when the program ends,

00:01:21.750 --> 00:01:27.910
and ultimately I'm calculating the difference between both the time just to see how much

00:01:27.910 --> 00:01:29.570
time it takes around this program.

00:01:29.570 --> 00:01:33.390
In here I have a couple off four loops,

00:01:33.390 --> 00:01:34.850
which are very similar,

00:01:34.850 --> 00:01:41.430
and what I'm doing here is I'm trying to do some math that would ultimately it relies the

00:01:41.430 --> 00:01:42.070
CPU.

00:01:42.070 --> 00:01:47.950
So doing this math is quite sepia demanding operation.

00:01:47.950 --> 00:01:50.960
And that's exactly what I wanted.

00:01:50.960 --> 00:01:53.470
Let me run this program,

00:01:53.470 --> 00:01:56.950
and it's going to take quite a lot of time.

00:01:56.950 --> 00:02:00.970
Maybe I'll just pause the video and come back again.

00:02:00.970 --> 00:02:07.350
So it took a total off sound 6000 milliseconds,

00:02:07.350 --> 00:02:07.950
which,

00:02:07.950 --> 00:02:11.750
which is when converted its sound a six second.

00:02:11.750 --> 00:02:16.760
Now let's see if we can improve the execution time by using multi threading.

00:02:16.760 --> 00:02:17.820
Now,

00:02:17.820 --> 00:02:19.240
just by looking at the score,

00:02:19.240 --> 00:02:22.420
I could identify two sections off court,

00:02:22.420 --> 00:02:25.450
which are completely independent off each other,

00:02:25.450 --> 00:02:29.080
and I think we can run simultaneously.

00:02:29.080 --> 00:02:31.550
Can you identify those two sections?

00:02:31.550 --> 00:02:33.620
It's simple.

00:02:33.620 --> 00:02:36.930
These two sections are exactly at into go,

00:02:36.930 --> 00:02:42.460
so that means we can perform these two sections simultaneously or concurrently.

00:02:42.460 --> 00:02:45.150
Let's see how we can achieve that.

00:02:45.150 --> 00:02:48.580
There are two ways to achieve that one.

00:02:48.580 --> 00:02:51.550
By implementing a reasonable inter fest.

00:02:51.550 --> 00:02:53.880
This is just a plain glass file,

00:02:53.880 --> 00:03:04.250
and all I'm going to do here is I'm going to implement implements Runabout.

00:03:04.250 --> 00:03:06.390
No.

00:03:06.390 --> 00:03:07.570
By doing so,

00:03:07.570 --> 00:03:12.920
I will be forced to add all the unimplemented methods.

00:03:12.920 --> 00:03:17.690
The honorable interface has only one mattered defined,

00:03:17.690 --> 00:03:19.790
which is with the name rum.

00:03:19.790 --> 00:03:22.610
This is the mattered where all the magic happens.

00:03:22.610 --> 00:03:28.530
All you want to do here is you want to insert the code that you want to be part off as a

00:03:28.530 --> 00:03:30.910
separate process or whatever.

00:03:30.910 --> 00:03:34.320
I'm saying as individual piece off exhibition of program,

00:03:34.320 --> 00:03:36.050
he wanted to be here.

00:03:36.050 --> 00:03:37.810
In this case,

00:03:37.810 --> 00:03:45.130
it's going to be this That's to control sea and control.

00:03:45.130 --> 00:03:47.710
We credible and good.

00:03:47.710 --> 00:03:59.390
Let's also try the time I'm going to take the start time and the end time,

00:03:59.390 --> 00:04:02.040
and ultimately I'll find the difference between the two.

00:04:02.040 --> 00:04:04.900
But before the start,

00:04:04.900 --> 00:04:05.990
time and end time,

00:04:05.990 --> 00:04:07.860
I need to do something.

00:04:07.860 --> 00:04:16.570
Somehow I need to create a new trend and run these set off instructions twice.

00:04:16.570 --> 00:04:18.100
And for that,

00:04:18.100 --> 00:04:21.600
I have to create to threats that run simultaneously,

00:04:21.600 --> 00:04:25.400
and both the threats will ultimately run the same piece off court.

00:04:25.400 --> 00:04:30.470
The reason why I'm running the same piece off court is because that's exactly what we're

00:04:30.470 --> 00:04:31.100
doing here.

00:04:31.100 --> 00:04:35.060
We have same piece off court running twice in this case,

00:04:35.060 --> 00:04:39.260
this court will have to wait under this finishes.

00:04:39.260 --> 00:04:42.290
But in this example,

00:04:42.290 --> 00:04:45.430
I'm going to do them concrete Lee or simultaneously,

00:04:45.430 --> 00:04:49.660
and that can improve the overall time off execution.

00:04:49.660 --> 00:04:52.170
Let's if that's the case.

00:04:52.170 --> 00:04:55.880
So I'm going to create an object off a thread class.

00:04:55.880 --> 00:05:01.470
I went to call it t one coast new thread.

00:05:01.470 --> 00:05:05.470
Pretty going good.

00:05:05.470 --> 00:05:08.150
I need to create another thread.

00:05:08.150 --> 00:05:12.950
Let's call it t two.

00:05:12.950 --> 00:05:14.450
Save the file.

00:05:14.450 --> 00:05:17.530
In order to stop the execution,

00:05:17.530 --> 00:05:25.550
we're gonna say 21 dot start and t two dot start.

00:05:25.550 --> 00:05:27.310
You know,

00:05:27.310 --> 00:05:27.650
next,

00:05:27.650 --> 00:05:31.190
Really A will understand what this start method exactly does.

00:05:31.190 --> 00:05:32.310
But for now,

00:05:32.310 --> 00:05:39.350
we can think off this as this will actually initiate the instigation off the threat.

00:05:39.350 --> 00:05:44.490
Basically execution of whatever the court that you have inside this this run method.

00:05:44.490 --> 00:05:48.250
But here we are lacking something.

00:05:48.250 --> 00:05:52.350
This trade is not aware of this code in the run method,

00:05:52.350 --> 00:05:54.880
the way become way that is,

00:05:54.880 --> 00:05:59.080
to create an object off the class where the run method is implemented.

00:05:59.080 --> 00:06:01.380
New,

00:06:01.380 --> 00:06:04.310
vulnerable example,

00:06:04.310 --> 00:06:11.550
and we're gonna pass this object to the constructor of the tread class that sold it is to

00:06:11.550 --> 00:06:11.990
it.

00:06:11.990 --> 00:06:12.540
Now,

00:06:12.540 --> 00:06:20.010
what we're exactly done here is we sort of created couple off threads and we have initiated

00:06:20.010 --> 00:06:20.360
them,

00:06:20.360 --> 00:06:23.650
and these two threats will run will now run simultaneously.

00:06:23.650 --> 00:06:27.650
But we have a problem with the timer here because,

00:06:27.650 --> 00:06:29.230
as I said,

00:06:29.230 --> 00:06:32.730
the main itself is treated as another trick.

00:06:32.730 --> 00:06:35.950
So although we have explicitly created to threats in here,

00:06:35.950 --> 00:06:36.640
well,

00:06:36.640 --> 00:06:42.030
we've actually have three threads in here because one is the main trahant.

00:06:42.030 --> 00:06:47.760
So if we run this program while these two threats are going on,

00:06:47.760 --> 00:06:52.100
our main trip finishes and it prints the time we don't want that.

00:06:52.100 --> 00:06:59.740
What we want to make sure is that only when these two threads are not actively running do

00:06:59.740 --> 00:07:02.750
we want to go ahead with the rest of the instructions.

00:07:02.750 --> 00:07:03.980
So for that,

00:07:03.980 --> 00:07:13.020
we're gonna use the method called he's alive when to use a while loop to you on dot He's

00:07:13.020 --> 00:07:13.650
alive.

00:07:13.650 --> 00:07:15.010
Oh,

00:07:15.010 --> 00:07:17.250
are t two daughters alive.

00:07:17.250 --> 00:07:23.140
So in our main trend,

00:07:23.140 --> 00:07:28.250
we always continuously check to see if data off this to threats are alive.

00:07:28.250 --> 00:07:29.850
If they're alive,

00:07:29.850 --> 00:07:31.270
then just keep looping.

00:07:31.270 --> 00:07:35.530
And once these two threats come to a dead state,

00:07:35.530 --> 00:07:37.950
which will talk about in our next radio.

00:07:37.950 --> 00:07:41.750
That means we're done with execution of these threads,

00:07:41.750 --> 00:07:46.290
then these alive state written false when both off,

00:07:46.290 --> 00:07:52.140
these are false and will exit off the slope and would ultimately calculate the end time and

00:07:52.140 --> 00:07:53.730
would print the total time.

00:07:53.730 --> 00:07:59.550
Now let's see if there is an improvement in the time that's from the program,

00:07:59.550 --> 00:08:12.190
thinking I'm going to pause the video and we've got back here it is.

00:08:12.190 --> 00:08:17.180
While it took 75 seconds or so without multi trading with multitude ing,

00:08:17.180 --> 00:08:19.650
it just took over 38 seconds.

00:08:19.650 --> 00:08:22.220
It's almost half the time,

00:08:22.220 --> 00:08:25.730
and that's exactly the beauty off.

00:08:25.730 --> 00:08:26.770
Using multi threading,

00:08:26.770 --> 00:08:33.890
let us take a look at one another approach where you can create multiple trends.

00:08:33.890 --> 00:08:42.370
You can quit threats either by using reasonable interface or directly extending the class

00:08:42.370 --> 00:08:44.200
thread which have done here.

00:08:44.200 --> 00:08:45.930
In fact,

00:08:45.930 --> 00:08:48.250
you're going tohave exact same chord in here.

00:08:48.250 --> 00:08:52.140
Let's to control sea and control.

00:08:52.140 --> 00:08:59.470
We gonna have exact same court in here and in strong implements rentable,

00:08:59.470 --> 00:09:08.260
you're gonna say extends thread class.

00:09:08.260 --> 00:09:16.140
Let's train the name of the class name to thread class.

00:09:16.140 --> 00:09:17.150
Example.

00:09:17.150 --> 00:09:18.090
Now,

00:09:18.090 --> 00:09:21.350
this time you don't have to pass in the object.

00:09:21.350 --> 00:09:22.770
In fact,

00:09:22.770 --> 00:09:28.140
you don't don't have to create a new thread object that's deleted.

00:09:28.140 --> 00:09:29.780
Instead,

00:09:29.780 --> 00:09:36.150
you can use object of the same class to call the start method.

00:09:36.150 --> 00:09:43.080
The reason is we have already inherited all the properties and behavior of the Turk class.

00:09:43.080 --> 00:09:44.790
Of course,

00:09:44.790 --> 00:09:48.700
this name needs to be changed to thread class example.

00:09:48.700 --> 00:09:54.190
And if you want to create another thread,

00:09:54.190 --> 00:10:01.240
then you can just create another object that's called this object one an object to I'm

00:10:01.240 --> 00:10:06.390
going to start the tread off object one and I'm going to start the threat off object to

00:10:06.390 --> 00:10:09.550
Same thing goes in here,

00:10:09.550 --> 00:10:20.190
Let's run the program and you would pretty much get the same output.

00:10:20.190 --> 00:10:25.900
What we've got in our reasonable example have meatballs.

00:10:25.900 --> 00:10:29.360
The video There it is.

00:10:29.360 --> 00:10:32.080
It just took 30 it seconds.

00:10:32.080 --> 00:10:38.410
So which approach should you follow?

00:10:38.410 --> 00:10:42.650
Should you implement Tirana boon to face or extend the threat class,

00:10:42.650 --> 00:10:47.980
I would recommend you to always go ahead with implement amenable interface.

00:10:47.980 --> 00:10:52.450
One good reason for that is if you use and interferes,

00:10:52.450 --> 00:10:59.150
you still have the possibility of extending another class in the scarce since your watered

00:10:59.150 --> 00:11:02.080
extended a class which is the thread class.

00:11:02.080 --> 00:11:07.150
It cannot extend any other class because Java does not support multiple inheritance.

00:11:07.150 --> 00:11:07.500
Also,

00:11:07.500 --> 00:11:09.590
in terms off good design practices,

00:11:09.590 --> 00:11:16.160
it's always recommended that you use rentable interface will stay away in our examples.

00:11:16.160 --> 00:11:16.950
Pretty soon,

00:11:16.950 --> 00:11:20.720
not talking about the CPU utilization,

00:11:20.720 --> 00:11:22.630
I said when we use multi trading,

00:11:22.630 --> 00:11:26.180
we would improve digitalization off the Cebu.

00:11:26.180 --> 00:11:29.590
Let's see if we're right and for this purpose,

00:11:29.590 --> 00:11:33.130
I have opened the task manager for Windows.

00:11:33.130 --> 00:11:35.720
I'm not sure what it is for Mac users.

00:11:35.720 --> 00:11:38.800
So this is the current graph of DISIP utilization.

00:11:38.800 --> 00:11:45.280
Let me run the program with orders in the multi threading and see how the CPS bite looks.

00:11:45.280 --> 00:11:55.260
The utilization is owned 39% 38 worsen,

00:11:55.260 --> 00:12:02.050
and it's going to remain same for 75 seconds or so.

00:12:02.050 --> 00:12:04.320
Let me balls the video.

00:12:04.320 --> 00:12:07.990
So this is how it looks.

00:12:07.990 --> 00:12:15.090
The CPI utilization is fluctuating between 31 to 39 this kind of stable in that range.

00:12:15.090 --> 00:12:24.010
Now let's see DISIP utilization when we use the multi trailing let's run this program and

00:12:24.010 --> 00:12:25.150
go to test manager.

00:12:25.150 --> 00:12:27.650
Take a look at that.

00:12:27.650 --> 00:12:37.260
The utilization has increased to 67% 68% It's fluctuating somewhere around there.

00:12:37.260 --> 00:12:40.790
Let me just pause the video and get back.

00:12:40.790 --> 00:12:44.010
That's it.

00:12:44.010 --> 00:12:44.880
We're done.

00:12:44.880 --> 00:12:46.630
So So we got magazine,

00:12:46.630 --> 00:12:46.760
um,

00:12:46.760 --> 00:12:50.300
utilization off CP when we refused multi trading.

00:12:50.300 --> 00:12:57.390
That's because each one of these threads would run on individual Prosser course.

00:12:57.390 --> 00:12:58.650
All right,

00:12:58.650 --> 00:13:01.570
let's continue in our next video.

