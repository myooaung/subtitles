WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.340
in this video,

00:00:01.340 --> 00:00:05.210
I'm going to talk about past their value and passed the reference.

00:00:05.210 --> 00:00:09.750
Take a look at this program will have a main method.

00:00:09.750 --> 00:00:11.530
And inside the main method,

00:00:11.530 --> 00:00:19.520
we have initialized available X and we're sending that as a perimeter to a method which is

00:00:19.520 --> 00:00:20.790
in another class.

00:00:20.790 --> 00:00:22.970
Here is how it works.

00:00:22.970 --> 00:00:32.050
We'll have a stack memory and that a block will be located two main and that will have the

00:00:32.050 --> 00:00:34.000
value X just tend.

00:00:34.000 --> 00:00:37.450
When we call a matter from inside the main,

00:00:37.450 --> 00:00:43.920
we're going to stack up under the block for that method and know that we're sending this

00:00:43.920 --> 00:00:45.120
pyramid or X.

00:00:45.120 --> 00:00:48.790
If we are talking about past the reference,

00:00:48.790 --> 00:00:55.030
then we're actually sending this value to this block in Java.

00:00:55.030 --> 00:00:57.990
It is not supported in Java.

00:00:57.990 --> 00:01:00.480
There is nothing called pass by reference.

00:01:00.480 --> 00:01:02.340
We only have passed their value.

00:01:02.340 --> 00:01:06.130
We're in will send a copy off the variable.

00:01:06.130 --> 00:01:08.210
So when we do this,

00:01:08.210 --> 00:01:15.660
we're actually making a clone or a copy off this field and we're sending it to this method

00:01:15.660 --> 00:01:18.100
so we'll have another variable.

00:01:18.100 --> 00:01:22.820
The scope of this variable is within this matter,

00:01:22.820 --> 00:01:27.390
and once this method exits,

00:01:27.390 --> 00:01:35.280
then this block will get freed if we are using past the reference than the value Off X

00:01:35.280 --> 00:01:36.710
would be 20.

00:01:36.710 --> 00:01:39.900
That's because we're building the value here.

00:01:39.900 --> 00:01:43.250
But since Java is possible value,

00:01:43.250 --> 00:01:48.660
the value off experts still remain as 10 not 20.

00:01:48.660 --> 00:01:52.620
Now we understood what Response Battalion past reference.

00:01:52.620 --> 00:01:55.940
Let's take a look at our code.

00:01:55.940 --> 00:01:59.660
I have jotted down three different scenarios in our scenario.

00:01:59.660 --> 00:02:03.830
One we have available X and we're sending that as a perimeter.

00:02:03.830 --> 00:02:11.040
The initial value of X is 10 and after we send that value for the variable to this matter

00:02:11.040 --> 00:02:16.000
example one we're updating the value affects 200.

00:02:16.000 --> 00:02:22.000
The line next to it is we're just printing the value of X.

00:02:22.000 --> 00:02:25.350
Since Java is possible value,

00:02:25.350 --> 00:02:28.040
we're not actually sending this X.

00:02:28.040 --> 00:02:30.630
We're actually making a clone or copy,

00:02:30.630 --> 00:02:33.380
and there will send were sending the copy toe this method.

00:02:33.380 --> 00:02:34.580
So,

00:02:34.580 --> 00:02:35.300
in essence,

00:02:35.300 --> 00:02:38.590
nothing will get updated at least and main method.

00:02:38.590 --> 00:02:45.140
The Value 100 is applicable.

00:02:45.140 --> 00:02:50.250
All the operations that you do in this example one method and once we come out off it,

00:02:50.250 --> 00:02:53.510
the value would still retain to 10.

00:02:53.510 --> 00:02:56.640
So the output off the statement would be 10.

00:02:56.640 --> 00:03:00.840
The confusion arises.

00:03:00.840 --> 00:03:01.620
However,

00:03:01.620 --> 00:03:02.950
when we send an object,

00:03:02.950 --> 00:03:06.690
objects are references.

00:03:06.690 --> 00:03:09.390
And this might sound a little confusing,

00:03:09.390 --> 00:03:14.560
because when you're sending a reference that might sound as possible reference,

00:03:14.560 --> 00:03:15.270
which is wrong,

00:03:15.270 --> 00:03:18.850
we're still sending the reference type as a value.

00:03:18.850 --> 00:03:22.320
When you're actually sending this Matt object,

00:03:22.320 --> 00:03:25.690
we're actually sending a copy off the reverence object.

00:03:25.690 --> 00:03:27.810
A copy of the reference.

00:03:27.810 --> 00:03:28.710
I mean,

00:03:28.710 --> 00:03:34.760
this Matt object would only constitute the address wherever this object is reciting in the

00:03:34.760 --> 00:03:35.440
hip memory.

00:03:35.440 --> 00:03:36.950
And,

00:03:36.950 --> 00:03:37.620
in example,

00:03:37.620 --> 00:03:42.020
two Mattern were essentially a copy of the address.

00:03:42.020 --> 00:03:44.000
And when we do so,

00:03:44.000 --> 00:03:48.250
this new wearable in here will have that address assigned,

00:03:48.250 --> 00:03:54.150
and the scope of this variable is actually in within the block off.

00:03:54.150 --> 00:03:54.670
This.

00:03:54.670 --> 00:03:57.670
I think this can be better explained in the white board.

00:03:57.670 --> 00:04:01.560
Let me take you there again.

00:04:01.560 --> 00:04:02.650
Quit says,

00:04:02.650 --> 00:04:02.860
Um,

00:04:02.860 --> 00:04:06.030
We have a stack memory and hate memory.

00:04:06.030 --> 00:04:09.870
Since we have created two new objects,

00:04:09.870 --> 00:04:12.090
will have an object off.

00:04:12.090 --> 00:04:18.780
Examples will have another object formats with some addresses.

00:04:18.780 --> 00:04:20.090
In our main method,

00:04:20.090 --> 00:04:24.000
Stack Block will have this reference Variables O.

00:04:24.000 --> 00:04:24.120
B.

00:04:24.120 --> 00:04:25.860
J and Matt or B.

00:04:25.860 --> 00:04:26.250
J.

00:04:26.250 --> 00:04:29.860
We're good so far now,

00:04:29.860 --> 00:04:35.390
when here were calling and method and many where we call a matter will have a new bra

00:04:35.390 --> 00:04:37.050
creator in the stack for that method,

00:04:37.050 --> 00:04:38.990
for example,

00:04:38.990 --> 00:04:46.550
to And when we're sending this object were not actually sending this reference type.

00:04:46.550 --> 00:04:49.250
We're actually sending a copy off it.

00:04:49.250 --> 00:04:54.200
So a copy off this is made and is made available here as well.

00:04:54.200 --> 00:04:57.590
Matt's object.

00:04:57.590 --> 00:05:05.080
But taking north off this both these two reference variables are actually pointing to the

00:05:05.080 --> 00:05:07.550
same object.

00:05:07.550 --> 00:05:11.690
Hence this statement In here Object,

00:05:11.690 --> 00:05:17.560
don't X If we make it 200 the change will reflect in here as well.

00:05:17.560 --> 00:05:21.690
When we do system dot r dot print of them mats object,

00:05:21.690 --> 00:05:28.780
not addition that it's going to find the some off 100 fight because the Value X,

00:05:28.780 --> 00:05:29.800
which was five,

00:05:29.800 --> 00:05:31.680
is no abated 200.

00:05:31.680 --> 00:05:33.840
Now let's go back to our court.

00:05:33.840 --> 00:05:36.150
We have a tortoise.

00:05:36.150 --> 00:05:36.850
Now you're here.

00:05:36.850 --> 00:05:39.870
I'm essentially doing the same thing,

00:05:39.870 --> 00:05:40.870
what we're doing here.

00:05:40.870 --> 00:05:44.450
But if you go inside the mother example three.

00:05:44.450 --> 00:05:52.850
I'm creating a new mats object and assigning that object to this new reference variable.

00:05:52.850 --> 00:05:58.000
And and then I'm trying to update the value of X in here.

00:05:58.000 --> 00:06:01.720
I have jotted the same court in our white board as well.

00:06:01.720 --> 00:06:04.540
And let me explain you over there.

00:06:04.540 --> 00:06:06.650
Once again,

00:06:06.650 --> 00:06:09.740
we'll have a stack memory and heat memory,

00:06:09.740 --> 00:06:11.870
but two objects,

00:06:11.870 --> 00:06:12.700
one is off.

00:06:12.700 --> 00:06:13.380
Examples.

00:06:13.380 --> 00:06:17.250
One is off mats when we when the interpreter comes,

00:06:17.250 --> 00:06:21.270
of course with the statement will have another block for that matter.

00:06:21.270 --> 00:06:31.570
Example three and by the remain blocked will have object and mats object.

00:06:31.570 --> 00:06:36.400
Since you sent this object as a perimeter to this matter,

00:06:36.400 --> 00:06:40.130
we're going to have another copy off this reference variable.

00:06:40.130 --> 00:06:42.640
Great.

00:06:42.640 --> 00:06:45.030
So we've reached till this point.

00:06:45.030 --> 00:06:46.550
Now,

00:06:46.550 --> 00:06:50.050
when this statement is interpreted,

00:06:50.050 --> 00:06:53.430
will create a new object altogether,

00:06:53.430 --> 00:06:56.190
says 1/3 object.

00:06:56.190 --> 00:06:58.250
And the name.

00:06:58.250 --> 00:07:01.260
The reference named that we used his new object here,

00:07:01.260 --> 00:07:13.780
and we assigned this reference to or B J so over here was actually pointing to this object

00:07:13.780 --> 00:07:14.390
earlier.

00:07:14.390 --> 00:07:21.590
But with this line now it's pointing to whatever this reference wearable is pointing toe.

00:07:21.590 --> 00:07:23.720
Now this is pointing.

00:07:23.720 --> 00:07:25.380
Do this object.

00:07:25.380 --> 00:07:30.010
Hence even this would start pointing to this object.

00:07:30.010 --> 00:07:34.070
This is no longer pointed to actual object.

00:07:34.070 --> 00:07:39.580
So whatever updates I do with object or X equal to 20 or object or y equals story.

00:07:39.580 --> 00:07:43.010
It will be updated in this particular object,

00:07:43.010 --> 00:07:47.230
but not the original one based on your understanding.

00:07:47.230 --> 00:07:47.470
Okay,

00:07:47.470 --> 00:07:53.340
let's go back to record not trying to look at the code and try to guess the output on this

00:07:53.340 --> 00:07:54.150
program.

00:07:54.150 --> 00:07:57.790
The output off this would be 10.

00:07:57.790 --> 00:08:04.130
The output off this would be 105 and they are put off.

00:08:04.130 --> 00:08:06.510
This would be would still be one.

00:08:06.510 --> 00:08:06.960
Terrifying.

00:08:06.960 --> 00:08:08.510
There won't be any difference.

00:08:08.510 --> 00:08:10.650
Let's on the program.

00:08:10.650 --> 00:08:14.470
There you go.

