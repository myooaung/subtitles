WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.510
in this video,

00:00:01.510 --> 00:00:07.180
we're gonna talk about anonymous in our classes and see how we can improve our multitude in

00:00:07.180 --> 00:00:08.550
code using them.

00:00:08.550 --> 00:00:10.850
Take a look at this example.

00:00:10.850 --> 00:00:18.710
Have just created an object off class dog which is having a method called bark and that

00:00:18.710 --> 00:00:21.350
just print the message barking.

00:00:21.350 --> 00:00:24.250
And in here we're just calling that method.

00:00:24.250 --> 00:00:25.910
You're on this program.

00:00:25.910 --> 00:00:28.790
You would obviously see this message.

00:00:28.790 --> 00:00:31.340
But let's say I wanted to all right,

00:00:31.340 --> 00:00:32.570
the matter all right,

00:00:32.570 --> 00:00:36.950
the behavior off this dog right here only for this time.

00:00:36.950 --> 00:00:40.620
So as you can guess for that,

00:00:40.620 --> 00:00:42.300
I create a new class.

00:00:42.300 --> 00:00:49.950
Let's call it dog extended.

00:00:49.950 --> 00:00:59.050
And I'm going to use the keyboard extent dunk,

00:00:59.050 --> 00:01:01.950
and I'm going to do a different behavior.

00:01:01.950 --> 00:01:10.450
Now if I run this program,

00:01:10.450 --> 00:01:12.350
you would still see the same message.

00:01:12.350 --> 00:01:21.550
But if we have the pain class difference type and make it a point to the child class object

00:01:21.550 --> 00:01:34.230
now the behavior is going to change because off the polymorphism no,

00:01:34.230 --> 00:01:35.550
if you take a note,

00:01:35.550 --> 00:01:39.980
this is the only time I wanted the behavior to be overridden.

00:01:39.980 --> 00:01:42.770
And even though if it is just one time,

00:01:42.770 --> 00:01:44.570
I wanted to order in the behavior.

00:01:44.570 --> 00:01:49.170
I still have to create another class and override the matter.

00:01:49.170 --> 00:01:51.850
This is quite a TDs job.

00:01:51.850 --> 00:01:53.270
Fortunately,

00:01:53.270 --> 00:01:54.050
in Java,

00:01:54.050 --> 00:01:57.070
we can override the matter then in their itself,

00:01:57.070 --> 00:02:03.290
wherever we wanted to attain a different behavior and we can do so by using anonymous

00:02:03.290 --> 00:02:09.280
classes and anonymous class is just as a local class that is local to a method,

00:02:09.280 --> 00:02:12.460
except it does not have any name to it.

00:02:12.460 --> 00:02:21.450
So what that means is we can use this entire block without copying the name of the class

00:02:21.450 --> 00:02:27.550
and have it in here.

00:02:27.550 --> 00:02:30.230
That's coming.

00:02:30.230 --> 00:02:36.750
These two lines this has created and anonymous class.

00:02:36.750 --> 00:02:38.760
But we have a problem.

00:02:38.760 --> 00:02:44.450
You also need to tell the compiler for which class are we all right in the behavior.

00:02:44.450 --> 00:02:51.780
So we need to tell the compiler dependent class off this and the way we convey the compel

00:02:51.780 --> 00:03:00.600
her The same is by isn't the statement like so?

00:03:00.600 --> 00:03:02.550
And we tend with the same Mikala.

00:03:02.550 --> 00:03:09.790
All that the statement looks like we have created an object off the dog class.

00:03:09.790 --> 00:03:11.380
Actually,

00:03:11.380 --> 00:03:12.460
it's not the case.

00:03:12.460 --> 00:03:19.050
We have actually created an instance off the anonymous class that does not have any name

00:03:19.050 --> 00:03:24.840
and that anonymous class is actually the child class off the dark class,

00:03:24.840 --> 00:03:27.150
and we're assigning that object.

00:03:27.150 --> 00:03:30.420
Teoh the reference type off the parent object,

00:03:30.420 --> 00:03:32.310
which is the dark class.

00:03:32.310 --> 00:03:33.950
If it turns confusing,

00:03:33.950 --> 00:03:36.250
go back and listen to my statement again.

00:03:36.250 --> 00:03:38.660
But where else?

00:03:38.660 --> 00:03:41.050
If you get rid off this curly braces,

00:03:41.050 --> 00:03:44.800
this is a different story.

00:03:44.800 --> 00:03:50.450
This is like you have a reference type of dog and you're pointing to the dog object.

00:03:50.450 --> 00:03:57.230
But if you have curly braces and you have over it and matter like this and what this means

00:03:57.230 --> 00:04:02.220
is you have actually created an anonymous class that does not have any name,

00:04:02.220 --> 00:04:05.370
and you have overridden the method off the dark class,

00:04:05.370 --> 00:04:06.970
which in the skins is bark.

00:04:06.970 --> 00:04:10.250
Now you can use this object to call the bark method,

00:04:10.250 --> 00:04:21.580
and we get the result off the overdid method that's on the program.

00:04:21.580 --> 00:04:23.110
There it is,

00:04:23.110 --> 00:04:29.650
So now we can easily get it off this class dog extended altogether.

00:04:29.650 --> 00:04:34.350
So that's the beauty off anonymous classes.

00:04:34.350 --> 00:04:35.840
In fact,

00:04:35.840 --> 00:04:37.700
since this is the only time you're calling,

00:04:37.700 --> 00:04:45.650
the bark matter can actually get it off difference type in here and just called the method

00:04:45.650 --> 00:04:50.250
bark directly like so and it was still print the same.

00:04:50.250 --> 00:04:54.530
Now why am I explaining this?

00:04:54.530 --> 00:04:57.150
Let's see how we can improve our multitude in court.

00:04:57.150 --> 00:04:59.500
Now See,

00:04:59.500 --> 00:05:06.840
I have created a new class which is available in example ordered Java and I have the exact

00:05:06.840 --> 00:05:13.600
chord after that off what we had in our other honorable examples and in our anonymous class

00:05:13.600 --> 00:05:17.060
example have created an object off this class.

00:05:17.060 --> 00:05:20.320
I'm person that object to construct off thread their way.

00:05:20.320 --> 00:05:23.140
We're creating a threat now.

00:05:23.140 --> 00:05:26.090
This is the only place where I want the matter off.

00:05:26.090 --> 00:05:28.400
That interface run above to be overridden.

00:05:28.400 --> 00:05:32.250
Why should I create a new class for that purpose?

00:05:32.250 --> 00:05:34.080
So what can I do?

00:05:34.080 --> 00:05:36.600
I can certainly make use off anonymous classes.

00:05:36.600 --> 00:05:51.200
Copy this code from here and let me get rid off this and built a door here.

00:05:51.200 --> 00:05:58.840
This will create in an almost plants but compel er will expect us to tell for which class

00:05:58.840 --> 00:06:01.760
we have overridden this matter and the skins.

00:06:01.760 --> 00:06:02.640
It's run a ball.

00:06:02.640 --> 00:06:05.610
Brahma Bull,

00:06:05.610 --> 00:06:09.090
you rentable.

00:06:09.090 --> 00:06:14.640
That's end with the semi Colin.

00:06:14.640 --> 00:06:18.250
And now we can pass this object.

00:06:18.250 --> 00:06:24.190
It's red and everything works perfect and we can now Certainly.

00:06:24.190 --> 00:06:26.250
Get rid off this class in here.

00:06:26.250 --> 00:06:30.110
Let's run it.

00:06:30.110 --> 00:06:32.850
There you have it.

00:06:32.850 --> 00:06:36.200
Now let's try to make this coat a lot cleaner.

00:06:36.200 --> 00:06:44.150
I'm going to move this entire functionality Do a matter you call it.

00:06:44.150 --> 00:06:46.950
Probably ecstatic.

00:06:46.950 --> 00:06:51.650
Some method I'm going to press according here.

00:06:51.650 --> 00:06:59.850
Of course we want to have the rich in time and I'll call that matter from here.

00:06:59.850 --> 00:07:02.660
If you take a note,

00:07:02.660 --> 00:07:09.320
the construction of the trip class is going to take the object off the class that

00:07:09.320 --> 00:07:10.330
improvements rentable.

00:07:10.330 --> 00:07:11.490
So instead,

00:07:11.490 --> 00:07:12.850
off passing the object,

00:07:12.850 --> 00:07:16.550
I was trying to recreate the object right there.

00:07:16.550 --> 00:07:24.050
There is no problem or whatsoever that's scattered all this semi colon.

00:07:24.050 --> 00:07:29.930
Now there are two things that are very obvious to the compiler companion reserve,

00:07:29.930 --> 00:07:33.650
where the kind of object that were passing to this trip Constructor,

00:07:33.650 --> 00:07:40.790
the compiler is also have air that the only matter that we can possibly all right is the

00:07:40.790 --> 00:07:43.760
run matter with Java 1.8.

00:07:43.760 --> 00:07:46.250
With the introduction off Lambda expressions,

00:07:46.250 --> 00:07:54.020
we can now get it off all these unnecessary details that the compiler is aware of so we can

00:07:54.020 --> 00:08:04.750
get it off This object declaration here and the end in college breeze.

00:08:04.750 --> 00:08:08.570
We can also get it off this matter definition,

00:08:08.570 --> 00:08:17.250
including the keyword or right now this is spread t well and good.

00:08:17.250 --> 00:08:25.210
We can get it all this would be calling from here the only thing that the compiler wants us

00:08:25.210 --> 00:08:30.850
to specify his number off para meters that we're passing to the matter some.

00:08:30.850 --> 00:08:33.840
In this case there are none.

00:08:33.840 --> 00:08:39.950
So way to tell the compiler by using the job I ate lamb,

00:08:39.950 --> 00:08:44.020
a expression like silk.

00:08:44.020 --> 00:08:47.910
We have dedicated an entire chapter.

00:08:47.910 --> 00:08:49.120
Talk me about Java.

00:08:49.120 --> 00:08:51.850
One daughter features until that point.

00:08:51.850 --> 00:08:55.450
Don't have to invest too much time in understanding.

00:08:55.450 --> 00:08:57.150
Javal one dot It Peters,

00:08:57.150 --> 00:09:00.350
Just try to understand what I'm doing here.

00:09:00.350 --> 00:09:03.140
Now there is one more improvement we can do.

00:09:03.140 --> 00:09:10.850
We can get it off this reference type in here and directly call that method stocked.

00:09:10.850 --> 00:09:15.550
This will do everything Isn't that wonderful?

00:09:15.550 --> 00:09:22.050
We have significantly there juiced the lines off code and we haven't created other class

00:09:22.050 --> 00:09:24.550
implementing the honorable interface.

00:09:24.550 --> 00:09:30.700
That's the beauty off Lambda Expressions now again will talk about limit expressions and

00:09:30.700 --> 00:09:35.240
all the java one daughter features a clear a chapter in future.

00:09:35.240 --> 00:09:40.180
Let's he wanted to create another thread only have to do is control C and control.

00:09:40.180 --> 00:09:43.050
We do this a different name,

00:09:43.050 --> 00:09:45.450
some new,

00:09:45.450 --> 00:09:47.750
and you're gonna provide the behavior.

00:09:47.750 --> 00:09:50.010
But the sake of example,

00:09:50.010 --> 00:09:53.410
I'm just comping the same court.

00:09:53.410 --> 00:09:59.050
Make sure you do some some task in here.

00:09:59.050 --> 00:10:06.040
You do some of the task in here and what this two times should be independent off each

00:10:06.040 --> 00:10:06.350
other.

00:10:06.350 --> 00:10:07.780
So now,

00:10:07.780 --> 00:10:11.590
but using anonymous classes and lavender expressions,

00:10:11.590 --> 00:10:16.680
we have significantly improved the readability and the maintain ability off the court.

00:10:16.680 --> 00:10:18.390
Off course.

00:10:18.390 --> 00:10:19.440
At a first glance,

00:10:19.440 --> 00:10:22.250
the Lambda expression might look confusing,

00:10:22.250 --> 00:10:24.160
but once they're used to it,

00:10:24.160 --> 00:10:28.120
it will learn the comfort off using well,

00:10:28.120 --> 00:10:34.440
it One last thing that I want to tell you is this land expression is only applicable when

00:10:34.440 --> 00:10:40.280
you have an interface that has exactly one method talking about the rentable interface,

00:10:40.280 --> 00:10:44.720
it just has one matter which is with the name run.

00:10:44.720 --> 00:10:49.830
And that's why we're able to make use off the Lambda expressions and these kind of

00:10:49.830 --> 00:10:55.070
interfaces with just one method or called functional interfaces which were introduced in

00:10:55.070 --> 00:10:58.890
Javon about it specifically for usage.

00:10:58.890 --> 00:11:02.830
The lamott expressions have been just show you a quick example.

00:11:02.830 --> 00:11:04.250
Off functioned office.

00:11:04.250 --> 00:11:06.850
Let me create a new and office,

00:11:06.850 --> 00:11:18.990
and let's have on matter,

00:11:18.990 --> 00:11:22.450
define wide some name.

00:11:22.450 --> 00:11:29.400
In order to make this interface a function in office,

00:11:29.400 --> 00:11:36.630
you can use the annotation functional in purpose and that if you try to create another

00:11:36.630 --> 00:11:37.020
matter,

00:11:37.020 --> 00:11:46.040
if you try to define another method that's going to show was an ever saying invalid,

00:11:46.040 --> 00:11:46.490
functional,

00:11:46.490 --> 00:11:47.780
interfere sanitation.

00:11:47.780 --> 00:11:50.920
This example is not a function office,

00:11:50.920 --> 00:11:57.670
so the developer cannot add another method accidentally because we might be using this

00:11:57.670 --> 00:12:01.250
interferes in our Lambda expressions throughout our project.

00:12:01.250 --> 00:12:05.150
Hope that makes ends See you in my next video.

