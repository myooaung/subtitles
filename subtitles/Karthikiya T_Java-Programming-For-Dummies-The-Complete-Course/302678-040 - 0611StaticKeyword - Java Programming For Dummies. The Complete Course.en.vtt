WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.680
in this video,

00:00:01.680 --> 00:00:06.860
I'm going to talk about the static key work and for this purpose I have created.

00:00:06.860 --> 00:00:08.310
This class called Khar,

00:00:08.310 --> 00:00:10.000
with three variables,

00:00:10.000 --> 00:00:11.630
will count,

00:00:11.630 --> 00:00:13.950
gear count and the height off the car.

00:00:13.950 --> 00:00:18.350
We have a constructor that will initialize these very belts,

00:00:18.350 --> 00:00:25.710
and we also have a display matter that will just simply display these very boats that the

00:00:25.710 --> 00:00:26.960
current object holds.

00:00:26.960 --> 00:00:29.280
In our main method.

00:00:29.280 --> 00:00:33.690
We have instance she hated for objects off glass car,

00:00:33.690 --> 00:00:36.170
and we're just in walking the mattered,

00:00:36.170 --> 00:00:36.990
displaying.

00:00:36.990 --> 00:00:39.450
Let's tried her on this program.

00:00:39.450 --> 00:00:43.200
Cool.

00:00:43.200 --> 00:00:48.680
Let's go the white board and see how the memory management is done for this program.

00:00:48.680 --> 00:00:57.790
And do keep a note that we have four different objects created so in our heap will have

00:00:57.790 --> 00:01:02.140
four different objects created off class car.

00:01:02.140 --> 00:01:02.980
Now,

00:01:02.980 --> 00:01:04.030
if you have noticed,

00:01:04.030 --> 00:01:11.460
there is one variable in this class whose value is common for all the objects that is

00:01:11.460 --> 00:01:14.550
number off wheels of Alba For any car,

00:01:14.550 --> 00:01:18.140
the number off wheels available were always before headless.

00:01:18.140 --> 00:01:19.710
For the sake off explanation.

00:01:19.710 --> 00:01:25.220
Let's assume zone and we're creating four different objects were also creating four

00:01:25.220 --> 00:01:28.610
different memory locations for the variable number off wheels,

00:01:28.610 --> 00:01:31.580
so this were grizzled in creation,

00:01:31.580 --> 00:01:32.980
off 16 bytes of memory.

00:01:32.980 --> 00:01:35.430
Since indigent takes four bytes of memory,

00:01:35.430 --> 00:01:40.370
this is not the efficient way off memory management.

00:01:40.370 --> 00:01:43.850
So what we're going to do is we're gonna mark this variable,

00:01:43.850 --> 00:01:44.820
ask static.

00:01:44.820 --> 00:01:51.350
What that would result in is this variable will no longer be associated with the object.

00:01:51.350 --> 00:01:52.450
Instant.

00:01:52.450 --> 00:01:54.600
It will be associated with a class,

00:01:54.600 --> 00:02:02.580
and this variable will be moved to a new memory location called Berman Generation.

00:02:02.580 --> 00:02:08.580
And whatever recites in the permanent generation space is actually associated with the

00:02:08.580 --> 00:02:09.220
class,

00:02:09.220 --> 00:02:10.650
not with an object.

00:02:10.650 --> 00:02:12.250
And no,

00:02:12.250 --> 00:02:14.720
instead of creating 16 bytes off memory,

00:02:14.720 --> 00:02:16.870
we're just creating four bytes of memory.

00:02:16.870 --> 00:02:21.620
And this memory location will share will be shared across all the objects.

00:02:21.620 --> 00:02:26.770
All the objects will be able to access this memory location and be able to get the value or

00:02:26.770 --> 00:02:27.680
even change the value.

00:02:27.680 --> 00:02:29.090
No,

00:02:29.090 --> 00:02:31.380
let's go back to our program and see how it's done.

00:02:31.380 --> 00:02:36.550
Programmatically So every time we're creating a new object,

00:02:36.550 --> 00:02:39.090
we're also setting the value off number of wheels available.

00:02:39.090 --> 00:02:47.870
Now we can get rid off this off course.

00:02:47.870 --> 00:02:50.370
We will have a rose here because you know constructor.

00:02:50.370 --> 00:02:54.880
We're expecting a perimeter number off reads available.

00:02:54.880 --> 00:02:58.050
Let's get rid off that.

00:02:58.050 --> 00:03:03.650
Let's make the will count static.

00:03:03.650 --> 00:03:05.850
Everything looks good.

00:03:05.850 --> 00:03:11.720
That's tried to run the program good.

00:03:11.720 --> 00:03:13.390
We got the same result Now.

00:03:13.390 --> 00:03:18.250
This particular program doesn't necessarily demonstrate the use of staticky work.

00:03:18.250 --> 00:03:19.990
Let me give another example.

00:03:19.990 --> 00:03:25.150
Let's say we wanted to count number off objects created for a particular class.

00:03:25.150 --> 00:03:29.110
For that have been Just get rid off this.

00:03:29.110 --> 00:03:31.250
Or maybe I just I just commend this out,

00:03:31.250 --> 00:03:40.750
but slash star and star slash We'll talk about commence in future videos,

00:03:40.750 --> 00:03:51.380
and what I'm going to do here is I'm going to create a new wearable which is static and

00:03:51.380 --> 00:03:56.600
count equals zero and you know,

00:03:56.600 --> 00:03:57.450
a constructor.

00:03:57.450 --> 00:03:59.950
Every time we invoked the constructor,

00:03:59.950 --> 00:04:02.460
we're just going to incriminate the cone.

00:04:02.460 --> 00:04:13.110
So every time we create an object but also invoking its constructor and we're just going to

00:04:13.110 --> 00:04:18.650
increment this static counter now,

00:04:18.650 --> 00:04:20.080
we nodded to display this.

00:04:20.080 --> 00:04:27.550
We can just access this variable in here count without using the object off this class.

00:04:27.550 --> 00:04:28.880
Like I said,

00:04:28.880 --> 00:04:32.560
my market variable or a method as static,

00:04:32.560 --> 00:04:34.970
it's no longer associated with an object.

00:04:34.970 --> 00:04:41.800
It's associated with the class so we can access this particular field even without creating

00:04:41.800 --> 00:04:42.840
an object.

00:04:42.840 --> 00:04:44.670
Let's see how it's done.

00:04:44.670 --> 00:04:52.910
System dot out dot print Ellen Car,

00:04:52.910 --> 00:04:56.060
which is the name of the class and the auto suggestion,

00:04:56.060 --> 00:04:57.600
shows the count.

00:04:57.600 --> 00:05:06.830
Now let's try to run the program report,

00:05:06.830 --> 00:05:07.770
which is expected.

00:05:07.770 --> 00:05:11.480
Let's not make this a class variable.

00:05:11.480 --> 00:05:13.480
Let's make this an instance.

00:05:13.480 --> 00:05:13.940
Variable.

00:05:13.940 --> 00:05:24.980
And now let's try to run the program and see the output our sins.

00:05:24.980 --> 00:05:30.180
This very believes no longer associated with the class we cannot access with the class name

00:05:30.180 --> 00:05:34.450
we can access with the object name and whichever object you're going to use.

00:05:34.450 --> 00:05:37.300
We get its associated value,

00:05:37.300 --> 00:05:41.850
so I don't see any purpose in demonstrating this.

00:05:41.850 --> 00:05:43.740
Let's get rid off this,

00:05:43.740 --> 00:05:47.590
and we're just going to rename this back to Static.

00:05:47.590 --> 00:05:50.190
Save the file.

00:05:50.190 --> 00:05:52.220
In the similar fashion,

00:05:52.220 --> 00:05:53.470
we can have static methods.

00:05:53.470 --> 00:05:54.040
Hasbro.

00:05:54.040 --> 00:05:56.040
And just as static variables,

00:05:56.040 --> 00:06:00.470
static methods are linked to a class not with an object.

00:06:00.470 --> 00:06:02.300
Let me just demonstrate it.

00:06:02.300 --> 00:06:06.150
I'm going to create a new mattered here,

00:06:06.150 --> 00:06:09.910
which is static,

00:06:09.910 --> 00:06:10.410
wide,

00:06:10.410 --> 00:06:14.890
static method,

00:06:14.890 --> 00:06:36.650
and I'm just going to do system that out dot print Ellen Count and in here,

00:06:36.650 --> 00:06:47.550
we can get rid off the statement instead of saying car not count.

00:06:47.550 --> 00:06:53.250
I'm just going to call that method card dot static method.

00:06:53.250 --> 00:06:59.050
Let's save the file and run the program.

00:06:59.050 --> 00:07:06.650
There's one key point to understand here.

00:07:06.650 --> 00:07:14.410
The static matter in here is not ever off the objects that are created with the class.

00:07:14.410 --> 00:07:16.360
Essentially,

00:07:16.360 --> 00:07:18.720
What that means is when you according method,

00:07:18.720 --> 00:07:19.640
using an object,

00:07:19.640 --> 00:07:23.390
we send the current object as a perimeter implicitly.

00:07:23.390 --> 00:07:27.920
But that's not the case with the static method because we don't have an object in first

00:07:27.920 --> 00:07:28.400
place.

00:07:28.400 --> 00:07:30.110
We're just simply using the class name.

00:07:30.110 --> 00:07:32.490
And with that being said,

00:07:32.490 --> 00:07:36.070
in our static method,

00:07:36.070 --> 00:07:39.510
we cannot access any instance variables.

00:07:39.510 --> 00:07:43.700
We can access only static methods or static variables.

00:07:43.700 --> 00:07:46.390
The counting here s static.

00:07:46.390 --> 00:07:49.170
If we get rid off the statement in here,

00:07:49.170 --> 00:07:50.520
we're going,

00:07:50.520 --> 00:07:51.830
we're going to get an error,

00:07:51.830 --> 00:07:53.260
and that's pretty expected.

00:07:53.260 --> 00:08:00.320
So from static matter,

00:08:00.320 --> 00:08:03.720
we can only call other static methods or static,

00:08:03.720 --> 00:08:04.550
very bolts.

00:08:04.550 --> 00:08:13.300
Now can you try to figure out why main method is static?

00:08:13.300 --> 00:08:15.750
Pause the video and try to guess.

00:08:15.750 --> 00:08:19.230
Okay,

00:08:19.230 --> 00:08:22.350
lets assume that Maine is not a static mattered.

00:08:22.350 --> 00:08:28.510
Then somebody has to take care of creating an object off this class and then we invoke this

00:08:28.510 --> 00:08:28.850
method,

00:08:28.850 --> 00:08:30.960
Means was grating it.

00:08:30.960 --> 00:08:37.850
Nobody the JV him off the jbm way of solving this problem is it will expect us to write a

00:08:37.850 --> 00:08:40.650
method with exact same name mean,

00:08:40.650 --> 00:08:42.070
including the case,

00:08:42.070 --> 00:08:43.950
and it has to be static.

00:08:43.950 --> 00:08:47.280
So that JBM can easily access this method,

00:08:47.280 --> 00:08:50.650
using the class itself really without creating an object.

00:08:50.650 --> 00:08:54.030
Because when you create an object,

00:08:54.030 --> 00:08:57.850
it's going to result in creation off memory location as well,

00:08:57.850 --> 00:08:59.550
which is not required.

00:08:59.550 --> 00:09:07.960
So that makes ends right also.

00:09:07.960 --> 00:09:08.460
In fact,

00:09:08.460 --> 00:09:13.250
we've been using the static matter throughout or course so far.

00:09:13.250 --> 00:09:15.090
Let me show you what I mean.

00:09:15.090 --> 00:09:17.140
The system dot r dot print Ellen,

00:09:17.140 --> 00:09:25.300
what is this system is a class in which we have a static member out,

00:09:25.300 --> 00:09:29.750
which in itself is a reference variable,

00:09:29.750 --> 00:09:32.710
and our dot print Ellen is nothing.

00:09:32.710 --> 00:09:44.010
But we're just calling the printer and method off object out hope that makes sense now.

00:09:44.010 --> 00:09:47.660
This static valuable doesn't necessarily have to be a primitive time.

00:09:47.660 --> 00:09:49.800
It can also be a reference type as well.

00:09:49.800 --> 00:09:54.990
There is one risk associated with static very more.

00:09:54.990 --> 00:09:58.060
Let me show you what I mean.

00:09:58.060 --> 00:10:07.390
Since the static variable is accessible across entire application from anywhere in the

00:10:07.390 --> 00:10:07.920
program,

00:10:07.920 --> 00:10:15.160
we can change the valuable and that will impact all the objects had crossed the application

00:10:15.160 --> 00:10:18.110
which is not intended.

00:10:18.110 --> 00:10:19.320
For example,

00:10:19.320 --> 00:10:24.290
I don't want anybody to change the value off number of wheels available because I know it

00:10:24.290 --> 00:10:25.490
would always before.

00:10:25.490 --> 00:10:27.370
So how do we can do this?

00:10:27.370 --> 00:10:30.900
We can handle this by using the keyword called final.

00:10:30.900 --> 00:10:32.650
Let's go back to our program.

00:10:32.650 --> 00:10:37.520
So instead of just calling it static and real count,

00:10:37.520 --> 00:10:39.830
I'm going to call it final.

00:10:39.830 --> 00:10:44.950
Static in 12 will count now from the display matter,

00:10:44.950 --> 00:10:48.290
I want to change the value off recount.

00:10:48.290 --> 00:10:58.440
It just won't allow me to do that.

00:10:58.440 --> 00:10:59.470
No,

00:10:59.470 --> 00:11:03.500
Cierra cannot assign value to final Variable will count.

00:11:03.500 --> 00:11:07.900
Great.

00:11:07.900 --> 00:11:08.690
I guess we're good

