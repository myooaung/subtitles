WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.260
One of the other concerns that the Java developers had back then before

00:00:04.260 --> 00:00:09.600
the module system came into existence is that the Java runtime being quite heavy.

00:00:09.600 --> 00:00:11.535
Well, what do I mean by that?

00:00:11.535 --> 00:00:15.090
The zhao platform consists of hundreds of packages,

00:00:15.090 --> 00:00:19.110
but not all of them are actually essential to run your application.

00:00:19.110 --> 00:00:22.800
As an example, say that you are writing code for a device

00:00:22.800 --> 00:00:26.595
which doesn't have support for the GUI or graphical user interface,

00:00:26.595 --> 00:00:29.625
then obviously it doesn't make sense to have

00:00:29.625 --> 00:00:33.705
those libraries to support graphical user interface.

00:00:33.705 --> 00:00:35.175
Or in other sense,

00:00:35.175 --> 00:00:37.665
let's say you're writing a Hello World application.

00:00:37.665 --> 00:00:40.260
It doesn't make sense to have libraries like swing

00:00:40.260 --> 00:00:44.240
UI or crypto libraries or XML parsers, et cetera.

00:00:44.240 --> 00:00:47.480
It's like you're going out to a shop to purchase something.

00:00:47.480 --> 00:00:51.230
And then the shopkeeper tells you that your app to purchase

00:00:51.230 --> 00:00:55.235
everything in the shop because you never know what you might need in future.

00:00:55.235 --> 00:00:57.440
It doesn't make sense at all.

00:00:57.440 --> 00:01:02.360
If you unnecessarily bloat your enrollment with libraries that you don't need.

00:01:02.360 --> 00:01:05.135
Then smaller devices like Raspberry Pi's,

00:01:05.135 --> 00:01:09.485
mobile phones or TV set-top boxes may not be able to support it.

00:01:09.485 --> 00:01:13.190
And even worse, if you're hosting your application on a cloud and

00:01:13.190 --> 00:01:18.485
Norman and defer using some containerization technology like Docker.

00:01:18.485 --> 00:01:22.160
Then obviously this is going to incur some additional costs

00:01:22.160 --> 00:01:27.140
because the bigger the footprint, the hierarchy costs.

00:01:27.140 --> 00:01:30.650
The art dot jar, which is their runtime library,

00:01:30.650 --> 00:01:35.465
had just couple of a 100 files during the initial releases of Java.

00:01:35.465 --> 00:01:41.750
But now this has become one big monolithic application consisting of thousands of files.

00:01:41.750 --> 00:01:48.170
So what Oracle has done for us is it has actually segregated this entire RT dot jar.

00:01:48.170 --> 00:01:51.470
In fact, they've segregated the entire JDK into

00:01:51.470 --> 00:01:55.970
multiple concerns so that you can actually now create your own runtime.

00:01:55.970 --> 00:01:59.750
But just the libraries that you'll be needing to run your application.

00:01:59.750 --> 00:02:05.285
Essentially, this would bring down the size from few hundreds of MBS,

00:02:05.285 --> 00:02:06.920
just maybe ten MBR.

00:02:06.920 --> 00:02:10.370
So if this statement doesn't make sense,

00:02:10.370 --> 00:02:14.990
then you'd have to hold on until we talk about the module system,

00:02:14.990 --> 00:02:17.490
which is coming next.
