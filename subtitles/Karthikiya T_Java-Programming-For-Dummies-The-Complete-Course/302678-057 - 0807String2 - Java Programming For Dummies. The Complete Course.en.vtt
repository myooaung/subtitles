WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.740
open the class called String Immutable.

00:00:03.740 --> 00:00:05.920
Under the package string package.

00:00:05.920 --> 00:00:07.250
Let's expand it.

00:00:07.250 --> 00:00:11.690
Can you make a guess on the output off this program?

00:00:11.690 --> 00:00:16.250
We have a string here.

00:00:16.250 --> 00:00:25.040
We're trying to convert that string to upper case and we're printing it without would be a

00:00:25.040 --> 00:00:25.600
per guess.

00:00:25.600 --> 00:00:30.510
Apple are Would it still be apple horrid?

00:00:30.510 --> 00:00:32.760
Stringer said to be immutable.

00:00:32.760 --> 00:00:35.890
That means once the string is there in the memory,

00:00:35.890 --> 00:00:37.690
nobody can ever change it.

00:00:37.690 --> 00:00:40.680
And when I say string is immutable,

00:00:40.680 --> 00:00:43.300
I'm only talking about the literal,

00:00:43.300 --> 00:00:45.290
the right hand side off this equal sign.

00:00:45.290 --> 00:00:50.550
We can always change toe which object this reference type points to.

00:00:50.550 --> 00:00:53.350
If we run this program,

00:00:53.350 --> 00:00:56.490
he will not see the upper case.

00:00:56.490 --> 00:00:56.990
Apple.

00:00:56.990 --> 00:01:00.670
You would still see the apple lower case Apple.

00:01:00.670 --> 00:01:09.720
It's on the program now before you start yelling,

00:01:09.720 --> 00:01:11.350
what the hell is going on?

00:01:11.350 --> 00:01:15.680
I'll take you to the white board and explain you in more detail.

00:01:15.680 --> 00:01:16.180
Fashion.

00:01:16.180 --> 00:01:17.580
Let's go there.

00:01:17.580 --> 00:01:32.270
So again we have are stacked memory and he'd memory Now this statement in here,

00:01:32.270 --> 00:01:34.970
as we've looked at in our previous example,

00:01:34.970 --> 00:01:35.650
well,

00:01:35.650 --> 00:01:45.040
essentially create a new string object using the keyword new so their friends type would

00:01:45.040 --> 00:01:46.350
decide in this stack.

00:01:46.350 --> 00:01:51.290
Kendall point to an object inside the hate memory,

00:01:51.290 --> 00:01:54.080
which in this case,

00:01:54.080 --> 00:01:56.950
it would be string Apple.

00:01:56.950 --> 00:02:01.050
This is not the case in gets off string.

00:02:01.050 --> 00:02:08.650
What actually would happen is we have a special memory inside this heap,

00:02:08.650 --> 00:02:12.120
which is called String Pull,

00:02:12.120 --> 00:02:20.550
and this string object would be created in here,

00:02:20.550 --> 00:02:28.650
and this reference type would point to this object.

00:02:28.650 --> 00:02:31.470
So why do we have a string pull?

00:02:31.470 --> 00:02:37.250
You will understand that in a minute you will also understand why string is immutable.

00:02:37.250 --> 00:02:53.820
Let's say I have another statement that says Strength string has to your to equals happily

00:02:53.820 --> 00:02:57.950
the exact same string what we have here.

00:02:57.950 --> 00:03:05.090
So this being reference type will have it inside the stack last year or two.

00:03:05.090 --> 00:03:10.310
This statement will not create a new object inside the string pull.

00:03:10.310 --> 00:03:10.900
Instead,

00:03:10.900 --> 00:03:17.050
it were just point to the exact same object because they're essentially holding the same

00:03:17.050 --> 00:03:18.700
exact strength.

00:03:18.700 --> 00:03:19.550
Happel.

00:03:19.550 --> 00:03:24.040
No.

00:03:24.040 --> 00:03:28.460
Can you guess why age our designers made string as immutable?

00:03:28.460 --> 00:03:37.850
That's because that's what we have a statement that says that's your dot to upper case.

00:03:37.850 --> 00:03:41.250
If the string is mutable,

00:03:41.250 --> 00:03:46.050
then this statement will make changes to the actual object.

00:03:46.050 --> 00:03:51.680
And this will impact s tr two because it is pointing to the exact same object.

00:03:51.680 --> 00:03:52.990
Likewise,

00:03:52.990 --> 00:03:58.270
there could be many number off string references which are pointing to the same object

00:03:58.270 --> 00:04:00.310
across all the programs.

00:04:00.310 --> 00:04:06.250
So we cannot let the programmer make changes to that string at any given point of time.

00:04:06.250 --> 00:04:11.070
So this answers way string is made immutable.

00:04:11.070 --> 00:04:15.330
But why do we have a string pull in here by now?

00:04:15.330 --> 00:04:16.290
You should have understood it.

00:04:16.290 --> 00:04:20.650
We have string pull primarily to save the memory.

00:04:20.650 --> 00:04:26.150
So these two string reference types are pointing to the same object.

00:04:26.150 --> 00:04:31.940
We didn't create two different objects for these two instructions that says the memory off

00:04:31.940 --> 00:04:31.940
.

00:04:31.940 --> 00:04:32.790
One object.

00:04:32.790 --> 00:04:37.310
If we have 100 strings created which are holding the same name,

00:04:37.310 --> 00:04:38.880
same string apple,

00:04:38.880 --> 00:04:44.740
then all of them would actually point to the single object in the string pool.

00:04:44.740 --> 00:04:48.290
And it won't create multiple objects.

00:04:48.290 --> 00:04:53.080
So there's a great memory advantage.

00:04:53.080 --> 00:04:55.130
But just in case,

00:04:55.130 --> 00:05:01.230
if you decide toe not bother about memory and if you decide to create string,

00:05:01.230 --> 00:05:02.530
object and heap memory,

00:05:02.530 --> 00:05:04.280
there is a way to do that as well.

00:05:04.280 --> 00:05:14.600
So this is how you do that string s one equals new string.

00:05:14.600 --> 00:05:19.940
And then you will pass the string as an argument to the constructor of this class.

00:05:19.940 --> 00:05:20.900
Which would be,

00:05:20.900 --> 00:05:21.220
say,

00:05:21.220 --> 00:05:21.950
banana.

00:05:21.950 --> 00:05:28.490
This instruction will create an object inside the heap memory as well ass.

00:05:28.490 --> 00:05:32.600
A copy would be created inside the string pool.

00:05:32.600 --> 00:05:36.700
Now let's say we have another statement,

00:05:36.700 --> 00:05:37.950
exact same statement,

00:05:37.950 --> 00:05:41.350
but a different name.

00:05:41.350 --> 00:05:50.640
New string se banana.

00:05:50.640 --> 00:06:00.140
Ignore the type of now this will create another object inside the hip memory.

00:06:00.140 --> 00:06:03.850
So although the strings are same in this case,

00:06:03.850 --> 00:06:07.530
two different objects would be created in the Haight memory.

00:06:07.530 --> 00:06:11.210
Now let's say we have one more statement.

00:06:11.210 --> 00:06:19.550
Say string has three banana.

00:06:19.550 --> 00:06:23.390
Would this create a new object in the string?

00:06:23.390 --> 00:06:31.770
Pull it want because by doing the statement were created an object in heat memory as well

00:06:31.770 --> 00:06:32.870
as in the string pool.

00:06:32.870 --> 00:06:34.200
So this statement,

00:06:34.200 --> 00:06:44.620
the history will point two banana in the string pool hope that makes perfect sense.

00:06:44.620 --> 00:06:46.650
Let's let's go back to our program.

00:06:46.650 --> 00:06:48.500
But before that,

00:06:48.500 --> 00:06:51.020
let me just show you one off the security threats.

00:06:51.020 --> 00:06:54.650
Had it been the case that the string is mutable,

00:06:54.650 --> 00:07:00.950
let's say you have two computers.

00:07:00.950 --> 00:07:03.760
Computer one is authentic,

00:07:03.760 --> 00:07:05.640
and computer to is insecure.

00:07:05.640 --> 00:07:06.670
It has some malicious,

00:07:06.670 --> 00:07:07.620
softer in it.

00:07:07.620 --> 00:07:11.650
And you don't want to access that mission from your program.

00:07:11.650 --> 00:07:14.210
In your program,

00:07:14.210 --> 00:07:20.380
you have a method that just connect and you gonna send the IPAD result or the system name

00:07:20.380 --> 00:07:21.710
has a perimeter.

00:07:21.710 --> 00:07:27.250
Your program will check to see if if the connection is secure,

00:07:27.250 --> 00:07:29.490
If it is not secure,

00:07:29.490 --> 00:07:30.830
then you want exit.

00:07:30.830 --> 00:07:33.280
If it is secure,

00:07:33.280 --> 00:07:36.950
then you're gonna go ahead and connect and do some operations.

00:07:36.950 --> 00:07:40.960
The letter you sent argument as Computer one.

00:07:40.960 --> 00:07:49.050
This check will pass because it's a good computer.

00:07:49.050 --> 00:07:52.150
But before you reach the statement,

00:07:52.150 --> 00:07:59.650
connect some other program but modified the string to computer too.

00:07:59.650 --> 00:08:07.240
So you're you're actually connecting to a computer which has malicious content in it.

00:08:07.240 --> 00:08:10.480
This is a serious security trip.

00:08:10.480 --> 00:08:12.720
Thankfully,

00:08:12.720 --> 00:08:14.410
string being immutable.

00:08:14.410 --> 00:08:18.500
Nobody can ever change this computer.

00:08:18.500 --> 00:08:21.790
One hope that clarifies.

00:08:21.790 --> 00:08:26.950
Let me just on comment the scored in here.

00:08:26.950 --> 00:08:29.840
In our previous example,

00:08:29.840 --> 00:08:35.020
we have already looked at the use off double equal sign for primitive.

00:08:35.020 --> 00:08:35.750
There are times,

00:08:35.750 --> 00:08:42.820
but this operator will also help us in checking to see if this to reference types are

00:08:42.820 --> 00:08:45.050
pointing to the same object or not.

00:08:45.050 --> 00:08:48.280
Can you make it?

00:08:48.280 --> 00:08:52.900
Guess on the output off this tree instructions.

00:08:52.900 --> 00:08:59.450
Okay.

00:08:59.450 --> 00:09:09.050
This land will create a new object in the string bull and has their prints.

00:09:09.050 --> 00:09:10.800
Hey,

00:09:10.800 --> 00:09:18.610
we have another prince be and we'll actually point to the exact same object created in the

00:09:18.610 --> 00:09:19.450
string pool.

00:09:19.450 --> 00:09:27.050
So hence the or put off this line would be true.

00:09:27.050 --> 00:09:33.050
These two reprints types are actually pointing to the exact same object in the string pool

00:09:33.050 --> 00:09:33.050
.

00:09:33.050 --> 00:09:35.030
Coming to this.

00:09:35.030 --> 00:09:39.950
This instruction will create a new object inside the hip memory.

00:09:39.950 --> 00:09:46.950
And this instruction will also create a new object in the string pool.

00:09:46.950 --> 00:09:52.650
This will point to the object residing in the string poor.

00:09:52.650 --> 00:09:55.350
But these two are two different objects.

00:09:55.350 --> 00:09:57.310
One is in the hip memory.

00:09:57.310 --> 00:09:59.850
One is in the string pool.

00:09:59.850 --> 00:10:02.690
So this statement would region faults.

00:10:02.690 --> 00:10:04.660
Now,

00:10:04.660 --> 00:10:05.650
how about this?

00:10:05.650 --> 00:10:11.470
These two are two different objects in the heat memory and hence this would be faults.

00:10:11.470 --> 00:10:13.250
Let's stretch on the program.

00:10:13.250 --> 00:10:16.700
There you go.

