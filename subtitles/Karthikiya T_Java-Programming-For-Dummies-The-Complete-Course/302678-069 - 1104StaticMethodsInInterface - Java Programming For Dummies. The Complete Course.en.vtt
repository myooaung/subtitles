WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.740
In our previous William,

00:00:01.740 --> 00:00:06.000
we talked about deform Inter's or also known as defender methods.

00:00:06.000 --> 00:00:12.530
What I should have also mentioned is that interfaces support static matter starting from

00:00:12.530 --> 00:00:13.850
Java 1.8.

00:00:13.850 --> 00:00:15.350
Actually,

00:00:15.350 --> 00:00:17.570
Java designers should have introduced addict Met.

00:00:17.570 --> 00:00:18.950
That's much before,

00:00:18.950 --> 00:00:23.810
but they thought that it would while it the rule off interface where an interface cannot

00:00:23.810 --> 00:00:25.110
have implementation.

00:00:25.110 --> 00:00:27.590
But in job on eight,

00:00:27.590 --> 00:00:30.360
with the introduction off default mint,

00:00:30.360 --> 00:00:31.400
it's anyway,

00:00:31.400 --> 00:00:36.760
they have violated the rule off interferes a little bit by allowing us to provide the

00:00:36.760 --> 00:00:38.250
default implementation.

00:00:38.250 --> 00:00:40.650
And since we did so,

00:00:40.650 --> 00:00:42.640
there's nothing wrong in yellowing,

00:00:42.640 --> 00:00:43.910
static methods as well.

00:00:43.910 --> 00:00:49.530
So the way you define a static method in Saturn interface his same as a static method.

00:00:49.530 --> 00:00:51.350
Inside a class,

00:00:51.350 --> 00:00:52.790
for example,

00:00:52.790 --> 00:01:01.940
you gonna do static wide something off the chart,

00:01:01.940 --> 00:01:05.750
and you can have anything that you want to have in here.

00:01:05.750 --> 00:01:14.970
And in order to access this method,

00:01:14.970 --> 00:01:17.770
you can always use the interface name.

00:01:17.770 --> 00:01:18.970
So,

00:01:18.970 --> 00:01:19.860
in our example,

00:01:19.860 --> 00:01:22.750
it's commend this out.

00:01:22.750 --> 00:01:26.670
I did control Shift slash.

00:01:26.670 --> 00:01:27.570
I guess it's ah,

00:01:27.570 --> 00:01:34.450
forward slash to comment out this electric part and in here I'm just going to call that

00:01:34.450 --> 00:01:34.860
matter.

00:01:34.860 --> 00:01:40.940
Let's save the file land on the program well and good.

00:01:40.940 --> 00:01:43.930
Another thing to know it is you cannot alright,

00:01:43.930 --> 00:01:44.840
this static method,

00:01:44.840 --> 00:01:47.460
even if you have the same signature.

00:01:47.460 --> 00:01:48.640
For example,

00:01:48.640 --> 00:01:52.090
I'm just going to copy the same method in here.

00:01:52.090 --> 00:01:59.990
Now this looks as though this matter got overridden,

00:01:59.990 --> 00:02:02.080
but in reality it's not.

00:02:02.080 --> 00:02:03.300
For example,

00:02:03.300 --> 00:02:07.450
if I use the sanitation override in here,

00:02:07.450 --> 00:02:15.540
it's going to throw a compile time error saying the matter Static method off type frog must

00:02:15.540 --> 00:02:18.250
all right or improvement a super type matter.

00:02:18.250 --> 00:02:19.460
Basically,

00:02:19.460 --> 00:02:25.230
what this means is the compiler did not find this method in the inter fest that is off,

00:02:25.230 --> 00:02:26.060
not static.

00:02:26.060 --> 00:02:27.400
So we get rid off.

00:02:27.400 --> 00:02:31.060
This can be overridden.

00:02:31.060 --> 00:02:31.750
Now,

00:02:31.750 --> 00:02:33.550
looking at this interface,

00:02:33.550 --> 00:02:37.550
this looks as though this is an abstract class right.

00:02:37.550 --> 00:02:42.510
An abstract class can have abstract method and also can have static methods.

00:02:42.510 --> 00:02:44.460
So what is the real difference?

00:02:44.460 --> 00:02:50.750
There seem to be no big difference between an interferes and an abstract class,

00:02:50.750 --> 00:02:53.080
but there is a difference.

00:02:53.080 --> 00:02:55.850
Unlike an abstract class,

00:02:55.850 --> 00:02:56.890
since it's a class,

00:02:56.890 --> 00:02:59.410
it has some kind off a state.

00:02:59.410 --> 00:03:02.650
You can always have variable defined on top,

00:03:02.650 --> 00:03:06.820
whereas in an interference it cannot have a state.

00:03:06.820 --> 00:03:11.550
You can only have constant in an interface which are public back and final.

00:03:11.550 --> 00:03:13.880
And since there is no state,

00:03:13.880 --> 00:03:16.590
there is no purpose off having you constructor.

00:03:16.590 --> 00:03:19.590
So interfaces cannot have a constructor.

00:03:19.590 --> 00:03:20.860
There's no meaning offer,

00:03:20.860 --> 00:03:22.250
and obviously,

00:03:22.250 --> 00:03:24.630
since there is no constructor,

00:03:24.630 --> 00:03:27.450
it cannot create an object often interface.

00:03:27.450 --> 00:03:31.070
You can only have it as a reference type,

00:03:31.070 --> 00:03:37.720
but you can never create an object or you can never create an instance often interface hope

00:03:37.720 --> 00:03:38.710
that makes sense.

