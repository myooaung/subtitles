WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.980
Alright, to start off,

00:00:01.980 --> 00:00:05.700
let us try to understand what are modules by exploring some of

00:00:05.700 --> 00:00:11.235
the existing modules in gedit k. In order to take a look at some of the existing modules,

00:00:11.235 --> 00:00:19.980
we can type in the command java hyphen, hyphen, hyphen modules.

00:00:19.980 --> 00:00:25.125
So this has listed some update distinct modules.

00:00:25.125 --> 00:00:30.135
The ones that are starting with Java or the standard Java modules,

00:00:30.135 --> 00:00:35.530
and the ones that are starting with dedicate a specific modules.

00:00:35.810 --> 00:00:41.080
And if you notice, each one of these modules is an invitation.

00:00:41.080 --> 00:00:48.270
So what that means is this module right here belongs to this version of Java.

00:00:49.150 --> 00:00:53.540
We can actually take a look at the description of each one of these modules.

00:00:53.540 --> 00:00:56.400
Let's take a look at one of them.

00:00:56.530 --> 00:01:02.165
Maybe. Let's take a look at Java dot xml module.

00:01:02.165 --> 00:01:10.535
So I would use the same command except I'm going to say describe module,

00:01:10.535 --> 00:01:15.845
java dot xml, file scroll a bit.

00:01:15.845 --> 00:01:20.885
You notice that this module has exported bunch of packages.

00:01:20.885 --> 00:01:24.930
What other modules can actually use.

00:01:26.050 --> 00:01:32.760
And this module also requires other module called java dot base.

00:01:32.800 --> 00:01:37.250
The uses directive states that this is trying to

00:01:37.250 --> 00:01:43.080
use a solvus and here are the list of services that it is using.

00:01:44.800 --> 00:01:50.900
And we also have exports with two,

00:01:50.900 --> 00:01:58.370
meaning that this package right here would only be exported to a specific module.

00:01:58.370 --> 00:02:00.695
In this case it's crypto module.

00:02:00.695 --> 00:02:03.330
We can do that as well.

00:02:03.330 --> 00:02:06.940
We can actually take a look at all these inside

00:02:06.940 --> 00:02:11.690
the genetic directory as well. Let's get there.

00:02:12.840 --> 00:02:17.545
So here it is. We now have the j march directory.

00:02:17.545 --> 00:02:25.040
And you're going to see the exact same modules that we've seen on the command prompt.

00:02:25.980 --> 00:02:30.370
We've actually take a look at what's inside it.

00:02:30.370 --> 00:02:37.210
All you would see are bunch of class files that are inside that module.

00:02:37.210 --> 00:02:41.180
So essentially these are similar to jar files.

00:02:48.310 --> 00:02:55.415
So here we have some class files.

00:02:55.415 --> 00:02:57.755
I'm just trying to go random,

00:02:57.755 --> 00:03:04.920
but it would have all the classifiers that belong to this module.

00:03:05.230 --> 00:03:08.840
So earlier we had big monolith.

00:03:08.840 --> 00:03:11.120
But with Project Jigsaw,

00:03:11.120 --> 00:03:13.445
which were started back in 2008,

00:03:13.445 --> 00:03:17.195
they are segregated the entire JDK into multiple modules,

00:03:17.195 --> 00:03:20.510
and so they have become more manageable pieces.

00:03:20.510 --> 00:03:24.650
Part of the reason how Oracle is able to release new features.

00:03:24.650 --> 00:03:27.950
Everyone survive every six months to be precise,

00:03:27.950 --> 00:03:31.580
because this marginalization of

00:03:31.580 --> 00:03:37.590
the entire project has helped them develop and test in rapid manner.

00:03:42.010 --> 00:03:46.820
Households mentioned that we can actually create JRE enrollment for

00:03:46.820 --> 00:03:49.475
smaller devices without having

00:03:49.475 --> 00:03:53.405
all those libraries that we don't need to run our application.

00:03:53.405 --> 00:03:57.529
Well, we have a tool specifically for that purpose.

00:03:57.529 --> 00:04:03.140
We can create a runtime and ROM and using a tool called J link.

00:04:03.140 --> 00:04:08.495
So forget inside the bin directory and search for J link.

00:04:08.495 --> 00:04:10.740
So here you have that tool.

00:04:10.740 --> 00:04:12.805
Let's try to use it.

00:04:12.805 --> 00:04:15.805
Can just run a command.

00:04:15.805 --> 00:04:24.770
We're going to say J link module path.

00:04:26.040 --> 00:04:28.165
J modes.

00:04:28.165 --> 00:04:30.550
If you remember, that's the directory where

00:04:30.550 --> 00:04:40.639
our modules or reciting.

00:04:42.300 --> 00:04:45.655
And then you're going to specify the module,

00:04:45.655 --> 00:04:50.005
or modules, add modules.

00:04:50.005 --> 00:04:55.385
In this case, I'm just simply going to say Java base module.

00:04:55.385 --> 00:05:00.845
And we're going to output the JRD to a specific directory.

00:05:00.845 --> 00:05:06.620
Output. I went to say a slash,

00:05:06.620 --> 00:05:17.070
maybe new JRE, slash JRE or whatever.

00:05:17.530 --> 00:05:21.600
Can we got the typo error?

00:05:24.640 --> 00:05:31.050
And this should create a runtime and ROM meant in this directory.

00:05:31.240 --> 00:05:42.240
Let's take a look. If it did. So here it is.

00:05:43.930 --> 00:05:49.560
So down the line we are going to take a look at how to create our own modules.

00:05:50.080 --> 00:05:54.905
So you can actually specify your own module in here.

00:05:54.905 --> 00:05:59.180
And gelding will actually create the runtime environment

00:05:59.180 --> 00:06:04.920
with all the libraries required to run gesture application.
