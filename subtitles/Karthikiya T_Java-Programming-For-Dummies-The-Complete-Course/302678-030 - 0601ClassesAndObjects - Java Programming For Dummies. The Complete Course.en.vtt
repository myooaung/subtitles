WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.700
in this chapter,

00:00:01.700 --> 00:00:04.130
we're gonna talk about classes and objects,

00:00:04.130 --> 00:00:06.240
and in this particular video,

00:00:06.240 --> 00:00:11.220
we're gonna get a glimpse off what classes are and more objects are now.

00:00:11.220 --> 00:00:15.700
I have a contrition between classes and objects as to where to start from.

00:00:15.700 --> 00:00:21.000
Should I start explaining about classes or should have start explaining about objects?

00:00:21.000 --> 00:00:24.950
But I thought it would be better to start with neither.

00:00:24.950 --> 00:00:26.210
Instead,

00:00:26.210 --> 00:00:27.820
I would start with methods.

00:00:27.820 --> 00:00:28.640
Now,

00:00:28.640 --> 00:00:30.700
if you go take a look at other tutorials,

00:00:30.700 --> 00:00:34.330
they must stop by giving the definitions of classes and objects,

00:00:34.330 --> 00:00:36.400
which I feel that this one off time,

00:00:36.400 --> 00:00:39.890
you may not be able to understand my way off.

00:00:39.890 --> 00:00:41.290
Teaching is different.

00:00:41.290 --> 00:00:43.370
I'm going to give you a real time example,

00:00:43.370 --> 00:00:46.980
and from that you can easily make all definitions.

00:00:46.980 --> 00:00:49.320
That makes more sense.

00:00:49.320 --> 00:00:50.950
Anyway,

00:00:50.950 --> 00:00:52.500
Let's get started.

00:00:52.500 --> 00:00:54.380
Let's talk about methods.

00:00:54.380 --> 00:00:58.550
Let's say we have an e commerce website,

00:00:58.550 --> 00:01:03.410
something like eBay or Amazon that was written using Java.

00:01:03.410 --> 00:01:08.930
And let's say our court or sore scored constitute off 2000 mines off court.

00:01:08.930 --> 00:01:12.350
It would probably be exceeding one million lines off court.

00:01:12.350 --> 00:01:14.280
But just for the sake of explanation,

00:01:14.280 --> 00:01:19.500
let's assume so and the intercourse is under one block.

00:01:19.500 --> 00:01:20.620
Now,

00:01:20.620 --> 00:01:21.450
with in this court,

00:01:21.450 --> 00:01:24.590
we might have set off instructions spanning across,

00:01:24.590 --> 00:01:25.740
tended on the lanes.

00:01:25.740 --> 00:01:27.850
That does a particular task.

00:01:27.850 --> 00:01:29.090
For example,

00:01:29.090 --> 00:01:37.150
add product to the cart and there could be another set of instructions that does delete

00:01:37.150 --> 00:01:39.690
product from the cart.

00:01:39.690 --> 00:01:49.940
And there could be instructions on applying the coupon or something like make payment,

00:01:49.940 --> 00:01:52.350
etcetera.

00:01:52.350 --> 00:01:55.380
Now we have a problem.

00:01:55.380 --> 00:01:59.200
Here we are lacking cold readability.

00:01:59.200 --> 00:02:05.530
Let's he wanted to perform the same operation ad at later point of time.

00:02:05.530 --> 00:02:09.250
Then you're gonna write this set off instructions than 20 alliance again.

00:02:09.250 --> 00:02:15.160
Somewhere over here that's going to increase the complexity and reduce the readability.

00:02:15.160 --> 00:02:21.140
The new programmer who will take a look at your program will definitely course you.

00:02:21.140 --> 00:02:24.130
So what is the solution?

00:02:24.130 --> 00:02:27.550
We're gonna create methods.

00:02:27.550 --> 00:02:30.550
If you're ever functions in other programming languages,

00:02:30.550 --> 00:02:33.450
that's nothing but methods in Java.

00:02:33.450 --> 00:02:38.570
So what we essentially do is we're gonna take out the set off instructions that does a

00:02:38.570 --> 00:02:39.670
particular task,

00:02:39.670 --> 00:02:44.750
separated out spirit inside another block,

00:02:44.750 --> 00:02:52.090
and we would have named this block something something like addition or something like that

00:02:52.090 --> 00:02:52.090
.

00:02:52.090 --> 00:02:57.880
And whenever we need to execute this set off instructions and strove writing.

00:02:57.880 --> 00:03:05.250
All the stem lines were just going to simply call this block a statement using this name

00:03:05.250 --> 00:03:06.750
addition.

00:03:06.750 --> 00:03:09.040
Similarly,

00:03:09.040 --> 00:03:11.860
next time you'll have to do the same set off operations.

00:03:11.860 --> 00:03:19.940
Then you're gonna simply call this block using this name again that will reduce 2000 lines

00:03:19.940 --> 00:03:20.100
off,

00:03:20.100 --> 00:03:22.380
cored into 50 lines.

00:03:22.380 --> 00:03:25.730
This will increase the readability.

00:03:25.730 --> 00:03:26.330
Also,

00:03:26.330 --> 00:03:28.070
the court is more organized.

00:03:28.070 --> 00:03:37.250
And this block off statement that I'm talking about is nothing but methods in Java now that

00:03:37.250 --> 00:03:43.870
straight a former definition off a method a method is nothing but a set off instructions in

00:03:43.870 --> 00:03:49.510
a block that does a particular task and that block off statements will have a name tacked

00:03:49.510 --> 00:03:54.180
to it so that we can use it to execute those block off statements.

00:03:54.180 --> 00:03:58.790
Let's goto our workbench and see how this works.

00:03:58.790 --> 00:04:04.530
Open the file named classes and objects under the project classes and objects.

00:04:04.530 --> 00:04:10.440
Now I'm going to simply copy paste accord from switch statement example that we talked

00:04:10.440 --> 00:04:11.350
about earlier.

00:04:11.350 --> 00:04:15.850
I'm just going to copy the court inside this block.

00:04:15.850 --> 00:04:17.250
The main block.

00:04:17.250 --> 00:04:22.650
How do you control C and bested over here inside this main block?

00:04:22.650 --> 00:04:27.500
I went to save it.

00:04:27.500 --> 00:04:35.090
Now let's say we want to separate the statement out and put this inside another block.

00:04:35.090 --> 00:04:38.350
The first thing is to take this statement.

00:04:38.350 --> 00:04:41.220
This could be one or more statements.

00:04:41.220 --> 00:04:46.370
But in our example is just one statement What is going to do?

00:04:46.370 --> 00:04:47.180
Control X?

00:04:47.180 --> 00:04:56.550
And when I take that statement out of this block like this and what we're going to do is

00:04:56.550 --> 00:05:02.670
begin to call the statement or statements from here.

00:05:02.670 --> 00:05:06.250
How do you do that went to do the statement,

00:05:06.250 --> 00:05:09.650
The R D settle statements and name.

00:05:09.650 --> 00:05:15.880
So for that went to create another block isn't curly braces.

00:05:15.880 --> 00:05:18.680
And we're gonna give it a name.

00:05:18.680 --> 00:05:21.650
Something like addition,

00:05:21.650 --> 00:05:29.200
not this block off statements is not ever off these two wearables.

00:05:29.200 --> 00:05:34.850
And be because nb old initialized over here in a different block.

00:05:34.850 --> 00:05:38.350
So the scope of this variable are within this block.

00:05:38.350 --> 00:05:46.860
So what we're going to do is when a new parent assists something like that and we're gonna

00:05:46.860 --> 00:05:50.320
send these two wary bolts from here.

00:05:50.320 --> 00:05:50.740
So,

00:05:50.740 --> 00:05:51.240
first of all,

00:05:51.240 --> 00:05:57.080
let's put this over here and send a coma be.

00:05:57.080 --> 00:06:01.230
And since this is a statement by itself,

00:06:01.230 --> 00:06:02.850
gonna end with a semi colon.

00:06:02.850 --> 00:06:06.170
We have sent and be here,

00:06:06.170 --> 00:06:07.700
but we're not receiving it here.

00:06:07.700 --> 00:06:08.790
How do we do that?

00:06:08.790 --> 00:06:16.230
We will give the type of the variable and that we're expecting in A and in B.

00:06:16.230 --> 00:06:18.750
Now,

00:06:18.750 --> 00:06:24.600
this block or statements will be aware off this to wearables and beat We have another

00:06:24.600 --> 00:06:31.020
problem here was that whenever we execute as certain block off instructions,

00:06:31.020 --> 00:06:33.150
we're going to expect something out off it.

00:06:33.150 --> 00:06:35.190
Sometimes we don't,

00:06:35.190 --> 00:06:40.700
but here we're just doing system that outdoor printed on a Please be and we're printing it

00:06:40.700 --> 00:06:40.700
.

00:06:40.700 --> 00:06:42.020
In this case,

00:06:42.020 --> 00:06:48.210
there is nothing that we want to give back to the to the block where we're calling this

00:06:48.210 --> 00:06:48.800
matter from.

00:06:48.800 --> 00:06:53.370
So what we do is we say white,

00:06:53.370 --> 00:07:00.080
which means I'm not sending anything from this block off statements or from this Method

00:07:00.080 --> 00:07:04.730
edition in guess if you want to send something,

00:07:04.730 --> 00:07:08.340
then you might want to use the keyword called written.

00:07:08.340 --> 00:07:11.370
We'll talk about it in detail at later point off.

00:07:11.370 --> 00:07:14.560
So for now,

00:07:14.560 --> 00:07:16.470
this is it.

00:07:16.470 --> 00:07:18.970
We have a proper method,

00:07:18.970 --> 00:07:21.490
declared or defined.

00:07:21.490 --> 00:07:22.480
Whatever you call it.

00:07:22.480 --> 00:07:26.930
There's one little first year since this is a static block.

00:07:26.930 --> 00:07:28.420
Wouldn't talk about static block,

00:07:28.420 --> 00:07:29.440
but we will in a while.

00:07:29.440 --> 00:07:31.090
Ah,

00:07:31.090 --> 00:07:33.350
this has to be static.

00:07:33.350 --> 00:07:36.150
We'll talk about staticky would later point of time.

00:07:36.150 --> 00:07:37.760
But this is it.

00:07:37.760 --> 00:07:42.380
This will essentially does the same thing what we're doing here.

00:07:42.380 --> 00:07:43.940
But in this example,

00:07:43.940 --> 00:07:45.410
we just have one instruction.

00:07:45.410 --> 00:07:46.030
That's it.

00:07:46.030 --> 00:07:48.420
These are 10 or 20 lines off court.

00:07:48.420 --> 00:07:51.880
Then that would make perfect sense to use methods instead,

00:07:51.880 --> 00:07:53.440
off writing the court over here.

00:07:53.440 --> 00:07:58.160
If around this program it's going to yield the same result,

00:07:58.160 --> 00:08:00.770
let me save your time by not running in.

00:08:00.770 --> 00:08:03.130
Great.

00:08:03.130 --> 00:08:05.810
Now we understood what mattered is.

00:08:05.810 --> 00:08:12.800
It's essentially a block off statements that does a particular task.

00:08:12.800 --> 00:08:15.380
And we're gonna give that block off statements,

00:08:15.380 --> 00:08:18.160
a particular name so that using that name,

00:08:18.160 --> 00:08:21.480
we can execute that broke off statements anywhere in the program.

00:08:21.480 --> 00:08:25.550
So next time we want to execute this set off statements,

00:08:25.550 --> 00:08:29.180
we're just going to do copy pissed off this control,

00:08:29.180 --> 00:08:29.570
see?

00:08:29.570 --> 00:08:31.530
And maybe we're gonna put it over here.

00:08:31.530 --> 00:08:32.310
By the way,

00:08:32.310 --> 00:08:33.500
that's that's illegal.

00:08:33.500 --> 00:08:38.380
To put it over here that saved the file grit.

00:08:38.380 --> 00:08:42.170
Let's go back to our whiteboard now.

00:08:42.170 --> 00:08:46.650
Obviously we don't want and the entire court to be under one file.

00:08:46.650 --> 00:08:50.150
Think about Amazon or eBay,

00:08:50.150 --> 00:08:53.550
where the source code will be millions off lines off court.

00:08:53.550 --> 00:08:59.090
How could it be possible to manage the court if it is under one single file?

00:08:59.090 --> 00:09:05.170
Probably the entire court is split across multiple fights.

00:09:05.170 --> 00:09:06.390
Class Wilde's.

00:09:06.390 --> 00:09:11.380
So what we're going to do is we're create multiple files,

00:09:11.380 --> 00:09:13.200
essentially class files in Java.

00:09:13.200 --> 00:09:22.370
Say we're gonna have a file called We're gonna have a class file called Product that has

00:09:22.370 --> 00:09:25.270
the methods that are related to product.

00:09:25.270 --> 00:09:26.080
For example,

00:09:26.080 --> 00:09:35.650
ad product remove product and we're gonna have another class that's going to do check out.

00:09:35.650 --> 00:09:39.420
And this may constitute mint.

00:09:39.420 --> 00:09:42.640
That's like a play Cooper.

00:09:42.640 --> 00:09:46.750
Or maybe make payment.

00:09:46.750 --> 00:09:50.340
No,

00:09:50.340 --> 00:09:52.770
let's understand this in our example.

00:09:52.770 --> 00:09:56.810
So what?

00:09:56.810 --> 00:10:00.850
What we'll do now is we're gonna take this method out from here,

00:10:00.850 --> 00:10:03.040
are over here to a different file.

00:10:03.040 --> 00:10:04.680
So for that,

00:10:04.680 --> 00:10:06.730
we need to create another class file.

00:10:06.730 --> 00:10:13.590
So let's do control C and control we that will create a corner of this class.

00:10:13.590 --> 00:10:16.650
We're gonna name this class as mats,

00:10:16.650 --> 00:10:20.350
crass click re factor.

00:10:20.350 --> 00:10:25.550
And we won't get rid off this entire court in here.

00:10:25.550 --> 00:10:26.630
In fact,

00:10:26.630 --> 00:10:29.270
we're gonna get rid off this entire block altogether.

00:10:29.270 --> 00:10:34.580
We don't need mean method here for the entire application will be needing only one single

00:10:34.580 --> 00:10:35.210
main method.

00:10:35.210 --> 00:10:37.220
We'll talk about it later.

00:10:37.220 --> 00:10:41.090
But now let's move it.

00:10:41.090 --> 00:10:47.400
Or here first I'm going to do can relax.

00:10:47.400 --> 00:10:49.950
Cut it from their invested over here.

00:10:49.950 --> 00:10:59.520
We definitely will have a narrow here because the matter is no longer existing here.

00:10:59.520 --> 00:11:06.260
So how do we call this method residing in another class?

00:11:06.260 --> 00:11:08.860
This is how we're going to do.

00:11:08.860 --> 00:11:14.050
I'm going to say somewhere over here,

00:11:14.050 --> 00:11:20.800
Matt O.

00:11:20.800 --> 00:11:21.000
B.

00:11:21.000 --> 00:11:22.590
J stands for object.

00:11:22.590 --> 00:11:32.680
And we're gonna create and new object using the keyword called New and then again,

00:11:32.680 --> 00:11:36.410
mats type of guy right there.

00:11:36.410 --> 00:11:39.140
So what did we just do?

00:11:39.140 --> 00:11:41.850
We created an object.

00:11:41.850 --> 00:11:43.460
Ladles and gentlemen,

00:11:43.460 --> 00:11:46.750
welcome to object or inter programming language.

00:11:46.750 --> 00:11:49.800
This is what is object.

00:11:49.800 --> 00:11:50.350
Of course,

00:11:50.350 --> 00:11:54.130
we're gonna talk about in detail in a while now.

00:11:54.130 --> 00:11:55.480
Using that object,

00:11:55.480 --> 00:12:01.480
we can call that method by doing object dot addition.

00:12:01.480 --> 00:12:05.380
Let's continue in our next radio

