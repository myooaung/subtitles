WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.060
in this video,

00:00:02.060 --> 00:00:07.170
we're gonna talk about something called a trick pool for this purpose.

00:00:07.170 --> 00:00:09.720
I want you to open this file threat.

00:00:09.720 --> 00:00:10.650
Full example.

00:00:10.650 --> 00:00:12.320
Under the project,

00:00:12.320 --> 00:00:16.400
Multi threading extended in here.

00:00:16.400 --> 00:00:19.110
I'm creating a thread and then I'm stopping it.

00:00:19.110 --> 00:00:23.600
We can certainly make use off alarmed expression in here.

00:00:23.600 --> 00:00:24.680
Let's do that.

00:00:24.680 --> 00:00:31.350
It's going to be as simple as that.

00:00:31.350 --> 00:00:36.690
There we have the land expression and everything works well.

00:00:36.690 --> 00:00:38.800
And since we're calling this matter,

00:00:38.800 --> 00:00:43.650
start only once we can do it in line right here.

00:00:43.650 --> 00:00:45.000
Now we can get it off.

00:00:45.000 --> 00:00:46.960
This has,

00:00:46.960 --> 00:00:47.710
alas,

00:00:47.710 --> 00:00:55.250
this that said the pile and run The program looks perfect.

00:00:55.250 --> 00:01:01.050
Now this statement in here is actually combination off two sections.

00:01:01.050 --> 00:01:10.380
Number one is creation off thread and starting it and number two is the task that the

00:01:10.380 --> 00:01:11.650
street is performing.

00:01:11.650 --> 00:01:13.140
In this case,

00:01:13.140 --> 00:01:17.960
it's justice his out statement with some text,

00:01:17.960 --> 00:01:19.900
which will be displayed on the console.

00:01:19.900 --> 00:01:25.250
But you could have every big task performing very complex computations.

00:01:25.250 --> 00:01:27.390
For the sake of this example,

00:01:27.390 --> 00:01:29.950
I'm just going to use their says out statement.

00:01:29.950 --> 00:01:33.550
Let me separate this section out.

00:01:33.550 --> 00:01:39.520
That looks more meaningful now.

00:01:39.520 --> 00:01:44.100
The Islamic expression would be off type run nable interface.

00:01:44.100 --> 00:01:45.020
I'm going to call it.

00:01:45.020 --> 00:01:48.230
The task equals the land expression,

00:01:48.230 --> 00:01:52.550
and I wont this thread to execute this task.

00:01:52.550 --> 00:01:56.050
The program will work just as before,

00:01:56.050 --> 00:01:58.100
pretty well and good.

00:01:58.100 --> 00:02:04.910
Now what I wanted to do is I wanted to create 10 different tasks and exhibit them

00:02:04.910 --> 00:02:06.030
simultaneously.

00:02:06.030 --> 00:02:07.490
And for this purpose,

00:02:07.490 --> 00:02:09.210
I'm going to create a list,

00:02:09.210 --> 00:02:14.420
a list that constitute the stop elements off type rentable interface.

00:02:14.420 --> 00:02:16.510
I already have the core ready with me.

00:02:16.510 --> 00:02:20.800
I'm just going to copy it and paste it all here just to save your time.

00:02:20.800 --> 00:02:25.300
So I have a list in here.

00:02:25.300 --> 00:02:30.350
Let's do control ship toe to import a quiet classes or interfaces.

00:02:30.350 --> 00:02:36.680
I'm calling it task because it's going to constitute list off task,

00:02:36.680 --> 00:02:38.290
and each task is alarmed.

00:02:38.290 --> 00:02:41.270
Expression off type rentable interface,

00:02:41.270 --> 00:02:42.100
of course,

00:02:42.100 --> 00:02:48.720
and using admitted amounting all these task just as you see it here now,

00:02:48.720 --> 00:02:52.810
the next thing that I want to do is to exit your them simultaneously.

00:02:52.810 --> 00:02:56.850
I'm going to make use off the for each method in job.

00:02:56.850 --> 00:02:58.570
So far,

00:02:58.570 --> 00:03:07.690
each task off time probable from the task.

00:03:07.690 --> 00:03:14.700
I'm going to perform this.

00:03:14.700 --> 00:03:18.140
Let's run the program,

00:03:18.140 --> 00:03:22.240
and it works perfectly well.

00:03:22.240 --> 00:03:28.850
We can certainly make use off a stream instead off using our traditional for each loop.

00:03:28.850 --> 00:03:30.360
Let's do so.

00:03:30.360 --> 00:03:32.550
It's coming this out.

00:03:32.550 --> 00:03:38.850
All I'm going to do is say task dot stream,

00:03:38.850 --> 00:03:41.350
not porridge.

00:03:41.350 --> 00:03:48.510
And for each and every task I wanted to perform exactly same thing.

00:03:48.510 --> 00:03:52.970
Let's best a door here and we're done.

00:03:52.970 --> 00:03:55.550
The program runs just as before.

00:03:55.550 --> 00:04:00.140
Although this program looks OK,

00:04:00.140 --> 00:04:02.950
we have a very serious problem in here.

00:04:02.950 --> 00:04:05.810
The problem in here is a region.

00:04:05.810 --> 00:04:11.890
Every task we're creating a trip maintain the state of the thread and destroying the threat

00:04:11.890 --> 00:04:11.890
.

00:04:11.890 --> 00:04:13.450
Once the task is finished,

00:04:13.450 --> 00:04:16.750
we're doing it for each and every task in here.

00:04:16.750 --> 00:04:23.150
We already know that creating and maintaining a threat is an expensive process.

00:04:23.150 --> 00:04:29.110
It will cost us processor utilization and memory and say,

00:04:29.110 --> 00:04:35.610
if you have 1000 task to be performed and if you create threat for each and every task like

00:04:35.610 --> 00:04:36.200
this,

00:04:36.200 --> 00:04:39.970
you will soon run out off memory and your application would crash.

00:04:39.970 --> 00:04:42.920
Even if your application wouldn't crash,

00:04:42.920 --> 00:04:47.510
at least it will affect you in terms off your application performance.

00:04:47.510 --> 00:04:49.370
So to address this problem,

00:04:49.370 --> 00:04:51.650
we have at thread pool.

00:04:51.650 --> 00:04:54.260
The concept off Threat pool goes like this.

00:04:54.260 --> 00:04:58.660
We create a fixed number off threads regardless off number off,

00:04:58.660 --> 00:05:06.450
deaths in hand to be performed and all the tasks performed by those fixed number off trends

00:05:06.450 --> 00:05:06.450
.

00:05:06.450 --> 00:05:10.620
The best way to understand is to take a look at one such example.

00:05:10.620 --> 00:05:16.380
So the first thing that we need to do is create the threat pool for that purpose.

00:05:16.380 --> 00:05:19.110
I'm going to use executor service.

00:05:19.110 --> 00:05:29.280
I'm going to call it Threat Pool as it would constitute pull off threads.

00:05:29.280 --> 00:05:41.860
And in here I'm going to say Executors dart new fixed tread pool and in here we're going to

00:05:41.860 --> 00:05:42.760
do some number.

00:05:42.760 --> 00:05:45.050
I want this to be five.

00:05:45.050 --> 00:05:49.500
Let's import the class now.

00:05:49.500 --> 00:05:54.570
What we have achieved with this instruction is that we have initiated the executor service

00:05:54.570 --> 00:05:57.320
and then it's going to take care off.

00:05:57.320 --> 00:06:02.640
Creating a pull off threads in the scales is going to be five threads.

00:06:02.640 --> 00:06:04.770
Until this point,

00:06:04.770 --> 00:06:10.560
those threats are not going to perform anything because we didn't ask the your service to

00:06:10.560 --> 00:06:11.950
perform all the stance.

00:06:11.950 --> 00:06:18.700
You can think off executive service as a company or a service provider who is going to take

00:06:18.700 --> 00:06:23.410
in the task given by the customers and the service.

00:06:23.410 --> 00:06:28.910
Or the company will then assign each one off the task to the workers in the company,

00:06:28.910 --> 00:06:34.850
the workers in here or nothing but the threads which it has created.

00:06:34.850 --> 00:06:41.910
So let's see how we can assign the task to the executor service again.

00:06:41.910 --> 00:06:45.710
We can certainly make use off the streams.

00:06:45.710 --> 00:06:53.640
I'm actually going to make changes to this instruction to read the task to this executive

00:06:53.640 --> 00:06:55.120
service or the threat pool.

00:06:55.120 --> 00:06:58.290
Whatever you call it in here,

00:06:58.290 --> 00:07:03.850
I'm going to say threat full dark.

00:07:03.850 --> 00:07:08.440
We have a method called execute.

00:07:08.440 --> 00:07:15.180
We're asking the Esguerra service to execute a certain task.

00:07:15.180 --> 00:07:16.190
In this case,

00:07:16.190 --> 00:07:17.020
we're ascending.

00:07:17.020 --> 00:07:23.940
All our task using the for each method now as a programmer were not really taken care off

00:07:23.940 --> 00:07:25.350
managing these threats.

00:07:25.350 --> 00:07:26.900
It all be taken care.

00:07:26.900 --> 00:07:28.190
But Exhibitor Service,

00:07:28.190 --> 00:07:29.370
for instance,

00:07:29.370 --> 00:07:34.200
we didn't create the threat explicitly on our own using new thread,

00:07:34.200 --> 00:07:42.410
and we didn't tell which thread to execute which task those air all be handled by the

00:07:42.410 --> 00:07:43.750
Hillsborough service.

00:07:43.750 --> 00:07:47.290
So as you keep adding the Tasked with executor service,

00:07:47.290 --> 00:07:53.490
the Exhibitor Services going to ask each one of these threads to execute the task.

00:07:53.490 --> 00:07:59.450
So now the executor service is not going to perform all these staff simultaneously.

00:07:59.450 --> 00:08:03.250
It will take five times at a time,

00:08:03.250 --> 00:08:07.000
as there are fight reds in the thread pool.

00:08:07.000 --> 00:08:10.490
The rest of the task will be waiting in the queue.

00:08:10.490 --> 00:08:11.890
Unwto,

00:08:11.890 --> 00:08:14.490
one of the threads finishes executing it,

00:08:14.490 --> 00:08:16.490
respect to task in hand.

00:08:16.490 --> 00:08:22.950
And so ultimately all these tests will be performed by this fight threats.

00:08:22.950 --> 00:08:30.570
So no matter how many tests you have be 1,000,000 or 10,000 all those tests will be

00:08:30.570 --> 00:08:33.300
performed only by these fight threats.

00:08:33.300 --> 00:08:37.870
The best way to understand what this matter does the new fixed readies to read its

00:08:37.870 --> 00:08:46.050
description creates a threat pool that reuses a fixed number off threads and at any point

00:08:46.050 --> 00:08:48.430
at most and threats in this case,

00:08:48.430 --> 00:08:49.120
it's fighter.

00:08:49.120 --> 00:08:51.660
It will be active crossing the task,

00:08:51.660 --> 00:08:53.100
and that's very obvious.

00:08:53.100 --> 00:08:56.970
It's going to perform at most off five test simultaneously,

00:08:56.970 --> 00:09:01.350
and if additional tests are submitted when the threats are active,

00:09:01.350 --> 00:09:04.270
they will wait in the queue until the trade is available.

00:09:04.270 --> 00:09:05.920
And that's what I said.

00:09:05.920 --> 00:09:13.460
Let's writer on the program and see what happens All the threats are executed

00:09:13.460 --> 00:09:16.760
simultaneously and at max.

00:09:16.760 --> 00:09:19.840
Only fire threats can be executed simultaneously.

00:09:19.840 --> 00:09:23.350
But not that the program is never going to end.

00:09:23.350 --> 00:09:28.010
We need to shut down the executor service for that.

00:09:28.010 --> 00:09:37.100
We're going to call the Matin Threat pool dot shut down And what this matter does.

00:09:37.100 --> 00:09:37.750
Let's go through.

00:09:37.750 --> 00:09:43.530
The description initiates an orderly shutdown in which previously submitted tasks are

00:09:43.530 --> 00:09:44.150
executed,

00:09:44.150 --> 00:09:47.250
but no new task will be accepted.

00:09:47.250 --> 00:09:52.370
Let's from the program now and program gets terminated.

00:09:52.370 --> 00:09:58.570
And if you try to assign a task to the executor service after you shut down,

00:09:58.570 --> 00:10:00.750
we're going to get an exception.

00:10:00.750 --> 00:10:02.350
Let's try doing so.

00:10:02.350 --> 00:10:04.580
We're going to say,

00:10:04.580 --> 00:10:07.290
Cast 11 insecurity,

00:10:07.290 --> 00:10:11.890
attend with the semi colons and run the program.

00:10:11.890 --> 00:10:19.380
The Garden exception saying rejected execution exception that makes complete sense.

00:10:19.380 --> 00:10:20.770
And finally,

00:10:20.770 --> 00:10:22.930
just as we have a fixed rate pool,

00:10:22.930 --> 00:10:27.960
we also got many such mechanisms provided by the Executor service,

00:10:27.960 --> 00:10:32.510
and you can explore them in here.

00:10:32.510 --> 00:10:34.750
We got new cast threat pool,

00:10:34.750 --> 00:10:39.260
so it's going to create a threat pool that creates new threats as needed.

00:10:39.260 --> 00:10:43.940
But we'll reuse previously constructed threads when they are available.

00:10:43.940 --> 00:10:47.350
We can make use off this in this context,

00:10:47.350 --> 00:10:54.280
let's from the program and pretty well.

00:10:54.280 --> 00:10:54.750
I'm good.

00:10:54.750 --> 00:10:56.090
Essentially,

00:10:56.090 --> 00:11:02.850
the executor service will actually decide how many threats to create best on the task

00:11:02.850 --> 00:11:03.600
available,

00:11:03.600 --> 00:11:04.290
etcetera.

00:11:04.290 --> 00:11:06.830
You don't have to make a wild guess,

00:11:06.830 --> 00:11:09.350
a number off dress to be created on your own.

00:11:09.350 --> 00:11:11.760
But let's undo.

00:11:11.760 --> 00:11:17.960
We also got many such methods.

00:11:17.960 --> 00:11:19.460
For example,

00:11:19.460 --> 00:11:21.470
new single thread Execute er.

00:11:21.470 --> 00:11:28.780
It's going to create an executor that uses a single worker thread operating,

00:11:28.780 --> 00:11:30.840
often unbounded kill.

00:11:30.840 --> 00:11:32.440
So,

00:11:32.440 --> 00:11:32.900
basically,

00:11:32.900 --> 00:11:35.580
does not going to create multiple threads.

00:11:35.580 --> 00:11:41.450
I was just going to be only one single threat that will perform all the tasks sequentially

00:11:41.450 --> 00:11:41.450
.

00:11:41.450 --> 00:11:43.560
You'll see the usefulness off this,

00:11:43.560 --> 00:11:46.370
and we talk about colorable interface,

00:11:46.370 --> 00:11:48.780
which will be in the coming videos.

00:11:48.780 --> 00:11:49.750
So likewise,

00:11:49.750 --> 00:11:51.180
we got many such methods.

00:11:51.180 --> 00:11:58.210
I would really increase you to go to these descriptions and explore and experiment,

00:11:58.210 --> 00:12:06.900
and I believe that by now your capable off exploring Java concepts on your own.

00:12:06.900 --> 00:12:09.590
That's the primary intent off this course.

00:12:09.590 --> 00:12:15.230
The intend of this course is not to explain each and every matter that job offers.

00:12:15.230 --> 00:12:20.010
The intent of this course is to make you stand on your own legs.

00:12:20.010 --> 00:12:22.650
So go and explore all these methods.

00:12:22.650 --> 00:12:26.190
They're pretty self explanatory.

00:12:26.190 --> 00:12:27.500
If you read the description,

00:12:27.500 --> 00:12:29.550
see you in my next video

