WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.590
in this,

00:00:00.590 --> 00:00:00.760
really?

00:00:00.760 --> 00:00:04.780
We're gonna talk about exceptions in Java for this purpose.

00:00:04.780 --> 00:00:10.940
Do import this project exception into rock space and open up these files we talked about

00:00:10.940 --> 00:00:11.850
compile time errors.

00:00:11.850 --> 00:00:12.460
For example,

00:00:12.460 --> 00:00:13.990
if I type in some random text,

00:00:13.990 --> 00:00:16.450
it's going to show us a compiled a mirror.

00:00:16.450 --> 00:00:17.520
Similarly,

00:00:17.520 --> 00:00:22.690
if you're trying to assign a float value to an integer,

00:00:22.690 --> 00:00:24.900
it's going to throw us a combat.

00:00:24.900 --> 00:00:30.450
A mirror compiler will not compile the program unless we fix all these errors.

00:00:30.450 --> 00:00:31.570
That being said,

00:00:31.570 --> 00:00:37.440
the ultimate job off compiler is to translate your court into a language that A J.

00:00:37.440 --> 00:00:38.430
Green can understand.

00:00:38.430 --> 00:00:43.670
That means the byte code compel A does not take full responsibility on fixing your errors.

00:00:43.670 --> 00:00:45.350
It will only try its best.

00:00:45.350 --> 00:00:50.870
What I mean by that is that there could be a scenario where an error could come when you

00:00:50.870 --> 00:00:51.650
run the program.

00:00:51.650 --> 00:00:54.870
That means Compiler compiles the program such a swirly,

00:00:54.870 --> 00:00:57.810
but an error could come when we run the program.

00:00:57.810 --> 00:01:02.660
These kind of arrows that come during the run time are called exceptions.

00:01:02.660 --> 00:01:03.920
Well,

00:01:03.920 --> 00:01:08.600
the actual definition often exception is not an error that comes in during the run time.

00:01:08.600 --> 00:01:09.150
In fact,

00:01:09.150 --> 00:01:10.650
we're going to form our own definition.

00:01:10.650 --> 00:01:11.500
Often exception.

00:01:11.500 --> 00:01:15.070
After we take a look at this example in here,

00:01:15.070 --> 00:01:20.730
I have just created an object off this class exception temp in which I have a matter that

00:01:20.730 --> 00:01:22.150
will just temperate on the string.

00:01:22.150 --> 00:01:25.940
We have few instructions in here,

00:01:25.940 --> 00:01:27.600
and we know what those are.

00:01:27.600 --> 00:01:33.590
I'm calling this method and passing this object as an argument inside this matter.

00:01:33.590 --> 00:01:35.820
I'm calling another matter matter too,

00:01:35.820 --> 00:01:41.750
and I'm passing in the same object and we're using that object to call this example Method

00:01:41.750 --> 00:01:43.070
pretty well and good.

00:01:43.070 --> 00:01:44.590
Let's see the output first.

00:01:44.590 --> 00:01:46.720
Pretty well and good.

00:01:46.720 --> 00:01:49.950
Now let's am passing in here now.

00:01:49.950 --> 00:01:52.810
Maybe accidentally,

00:01:52.810 --> 00:01:53.250
No,

00:01:53.250 --> 00:01:55.780
let's run the program and see what's going to happen.

00:01:55.780 --> 00:02:03.190
It has exhibited these two lines off court and something went wrong in here due to which

00:02:03.190 --> 00:02:06.150
these instructions didn't get executed.

00:02:06.150 --> 00:02:08.680
So what has actually happened?

00:02:08.680 --> 00:02:10.450
Let's take a look.

00:02:10.450 --> 00:02:15.430
We're passing all here eventually to end up in here,

00:02:15.430 --> 00:02:18.600
so it's going to be like this now.

00:02:18.600 --> 00:02:19.460
That example,

00:02:19.460 --> 00:02:20.740
which doesn't make sense.

00:02:20.740 --> 00:02:22.750
It has to be an object.

00:02:22.750 --> 00:02:28.760
The reason why this is called a null pointer exception is called the reference type is

00:02:28.760 --> 00:02:32.500
actually pointing to know Or do I mean by that,

00:02:32.500 --> 00:02:33.170
for example,

00:02:33.170 --> 00:02:36.440
have a reference type object O.

00:02:36.440 --> 00:02:36.570
B.

00:02:36.570 --> 00:02:37.050
J.

00:02:37.050 --> 00:02:42.500
And this reference type is pointing to know,

00:02:42.500 --> 00:02:46.100
and that's why it is called a Null Pointer exception.

00:02:46.100 --> 00:02:48.020
And this exception will only come.

00:02:48.020 --> 00:02:49.970
And when we run the program,

00:02:49.970 --> 00:02:56.750
it's okay to have exceptions here and there,

00:02:56.750 --> 00:03:00.250
but it shouldn't cause the entire program to crash.

00:03:00.250 --> 00:03:01.530
In this example,

00:03:01.530 --> 00:03:03.670
these two instructions are innocent.

00:03:03.670 --> 00:03:04.060
Still,

00:03:04.060 --> 00:03:05.080
they didn't get exhibited.

00:03:05.080 --> 00:03:07.040
This is a big concern,

00:03:07.040 --> 00:03:09.040
especially for bigger applications.

00:03:09.040 --> 00:03:15.030
We can't expect the entire software to crash just because off one single exception behind

00:03:15.030 --> 00:03:17.500
the scenes and there is a good reason why.

00:03:17.500 --> 00:03:20.560
Jbm don't execute all the subsequent instructions.

00:03:20.560 --> 00:03:25.880
That's because JBM thinks that if it executes all the subsequent instructions,

00:03:25.880 --> 00:03:28.790
there could be side effects due to the failure.

00:03:28.790 --> 00:03:29.710
In this line,

00:03:29.710 --> 00:03:33.270
it makes sense from JV and prospective,

00:03:33.270 --> 00:03:39.620
but from programmer prospective he want all the stopped instructions Toby executed.

00:03:39.620 --> 00:03:43.020
Regardless off there is an exception somewhere in the middle of the court.

00:03:43.020 --> 00:03:49.260
How do we handle this is by using exception handling before we take a look at the exception

00:03:49.260 --> 00:03:49.850
handling.

00:03:49.850 --> 00:03:52.970
Let us talk about something called the call stack.

00:03:52.970 --> 00:03:56.850
Whenever JBM comes across with an exception,

00:03:56.850 --> 00:03:58.380
the JV um,

00:03:58.380 --> 00:04:02.370
is going to create an object off the particular exception.

00:04:02.370 --> 00:04:02.890
In this case,

00:04:02.890 --> 00:04:04.180
it's null Pointer exception,

00:04:04.180 --> 00:04:08.350
and the gym is going to throw that exception.

00:04:08.350 --> 00:04:11.280
When Jerry in throws that exception,

00:04:11.280 --> 00:04:15.560
there has to be something that will catch it in this program.

00:04:15.560 --> 00:04:16.780
We don't have anything to catch it.

00:04:16.780 --> 00:04:22.570
So JV M tries to find some block off court that will catch the exception.

00:04:22.570 --> 00:04:27.850
If it doesn't find Devin will throw that exception to the calling method,

00:04:27.850 --> 00:04:29.020
which in this case,

00:04:29.020 --> 00:04:34.460
this method and even in here we don't have any block that will catch that exception.

00:04:34.460 --> 00:04:37.120
The German keeps throwing that exception,

00:04:37.120 --> 00:04:40.080
and it will eventually end up in the main method.

00:04:40.080 --> 00:04:41.550
And even in here,

00:04:41.550 --> 00:04:45.040
we don't have a catch block or a handler code.

00:04:45.040 --> 00:04:49.750
And hence Jevon will just stop executing Christoph the instructions,

00:04:49.750 --> 00:04:51.880
and it will just abruptly stopped the program.

00:04:51.880 --> 00:04:52.910
So somehow,

00:04:52.910 --> 00:04:53.960
as a programmer,

00:04:53.960 --> 00:04:56.800
we need to convey the JV M that it took.

00:04:56.800 --> 00:04:57.950
If you find exception,

00:04:57.950 --> 00:05:01.360
I still want to continue with dressed off May instructions.

00:05:01.360 --> 00:05:05.490
So how do we convey the same by just looking at this program.

00:05:05.490 --> 00:05:10.430
He could make a guess that there is a possibility off getting in a pointer exception in

00:05:10.430 --> 00:05:10.990
this line.

00:05:10.990 --> 00:05:16.000
So what you're going to do is you're going to wrap this cord.

00:05:16.000 --> 00:05:18.910
You could have more than one lines.

00:05:18.910 --> 00:05:19.550
Obviously,

00:05:19.550 --> 00:05:29.530
you can wrap this court into a block called Try Block as simple as that.

00:05:29.530 --> 00:05:32.200
By doing this,

00:05:32.200 --> 00:05:37.660
you're telling the JV m that try this block off court And within this block,

00:05:37.660 --> 00:05:43.660
if you come across with any kind of exceptions for that exception and I'll catch it and the

00:05:43.660 --> 00:05:46.850
way you catch it is by using the key word catch.

00:05:46.850 --> 00:05:57.450
And what is that exception that you're trying to catch is null Pointer exception and you

00:05:57.450 --> 00:05:58.880
have the handler court in here.

00:05:58.880 --> 00:06:00.160
By doing so,

00:06:00.160 --> 00:06:00.990
you're letting the Jerry,

00:06:00.990 --> 00:06:07.280
um know that your affair off the potential exception that's going to come in here now from

00:06:07.280 --> 00:06:08.110
Devin Prospect,

00:06:08.110 --> 00:06:11.740
Isn't it sure that your affair off what you're doing,

00:06:11.740 --> 00:06:14.780
it won't mind exhibiting to stop the instructions.

00:06:14.780 --> 00:06:15.570
Now,

00:06:15.570 --> 00:06:16.650
if you're on the program,

00:06:16.650 --> 00:06:18.800
everything run smoothly.

00:06:18.800 --> 00:06:21.150
Despite having an exception in here.

00:06:21.150 --> 00:06:24.410
Alternatively,

00:06:24.410 --> 00:06:32.240
you can just use the ideas facility to wrap discordance.

00:06:32.240 --> 00:06:37.830
I'd try and catch is by going to source surround with try,

00:06:37.830 --> 00:06:38.650
catch block.

00:06:38.650 --> 00:06:43.650
Let's on the program pretty well and good,

00:06:43.650 --> 00:06:47.550
and you see the call stack in here.

00:06:47.550 --> 00:06:48.560
Well,

00:06:48.560 --> 00:06:53.150
that's what is an exception in general and how we basically handle it.

00:06:53.150 --> 00:06:56.050
Let's continue in our next radio.

