WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.040
OK,

00:00:01.040 --> 00:00:01.750
in this video,

00:00:01.750 --> 00:00:06.280
we're gonna talk about volatile keyboard as,

00:00:06.280 --> 00:00:06.450
um,

00:00:06.450 --> 00:00:08.350
that we have a code,

00:00:08.350 --> 00:00:15.000
and in that we have a variable with the value off 10 a saint.

00:00:15.000 --> 00:00:21.740
And let's assume we have a couple of threads t one and T two and NT one.

00:00:21.740 --> 00:00:24.460
All we're doing is we're incriminating the value off,

00:00:24.460 --> 00:00:25.930
see for,

00:00:25.930 --> 00:00:26.240
say,

00:00:26.240 --> 00:00:27.250
seven times.

00:00:27.250 --> 00:00:31.960
And in t two,

00:00:31.960 --> 00:00:38.990
all we're doing is we're periodically reading the value off see from the memory.

00:00:38.990 --> 00:00:41.300
So in our memory,

00:00:41.300 --> 00:00:44.250
the initial Valley off see would be 10.

00:00:44.250 --> 00:00:50.220
Let's assume that we have a joke or Prosser and each one off.

00:00:50.220 --> 00:00:53.150
These threats are running simultaneously on me,

00:00:53.150 --> 00:00:53.350
John,

00:00:53.350 --> 00:00:54.260
off this course.

00:00:54.260 --> 00:00:57.010
So t one goes in core one,

00:00:57.010 --> 00:01:03.910
and it tries to perform the operation off increment in the value seven times.

00:01:03.910 --> 00:01:06.370
Now for the sake of performance.

00:01:06.370 --> 00:01:12.540
The way the court is executed is the operating system is going to copy all the required

00:01:12.540 --> 00:01:18.950
variables into a local kasher that recites in the CPU core.

00:01:18.950 --> 00:01:26.270
And the process is going to use that kasher to perform operations.

00:01:26.270 --> 00:01:30.590
So it's going to copy the value off 10 initially to the cachet,

00:01:30.590 --> 00:01:36.380
and it's going to increment the value by one which will make it to 11 and again in

00:01:36.380 --> 00:01:37.550
increments valued,

00:01:37.550 --> 00:01:39.450
which will make it to 12.

00:01:39.450 --> 00:01:41.140
Whatever it is,

00:01:41.140 --> 00:01:44.200
it's updating the value in the local kasher,

00:01:44.200 --> 00:01:45.650
not in natural memory,

00:01:45.650 --> 00:01:51.050
because it's expensive to read the value from memory and put it back in memory again.

00:01:51.050 --> 00:01:53.390
Read it Every time you want to increment value,

00:01:53.390 --> 00:01:55.490
it's going to cause the performance.

00:01:55.490 --> 00:01:59.770
So operating system uses the local cash for that.

00:01:59.770 --> 00:02:03.160
But we have a problem associated with that threat.

00:02:03.160 --> 00:02:03.560
To,

00:02:03.560 --> 00:02:04.680
on the other hand,

00:02:04.680 --> 00:02:06.410
is not getting the updated value.

00:02:06.410 --> 00:02:08.850
When it just trying to read the value of C,

00:02:08.850 --> 00:02:11.980
it's still getting the value.

00:02:11.980 --> 00:02:16.060
Ask 10 while in the local cachet off core one,

00:02:16.060 --> 00:02:18.630
it told her increment a couple of times.

00:02:18.630 --> 00:02:19.810
And the Value Store.

00:02:19.810 --> 00:02:22.380
So in this kind off mechanism,

00:02:22.380 --> 00:02:25.030
there is no guarantee when the U.

00:02:25.030 --> 00:02:25.290
S.

00:02:25.290 --> 00:02:31.410
Will crush all the data and the cash back to the memory and then make the data available

00:02:31.410 --> 00:02:32.500
for threat to.

00:02:32.500 --> 00:02:37.820
So the point I want to make here is stretched is not getting the updated value.

00:02:37.820 --> 00:02:42.300
So the solution is if you make this variable well,

00:02:42.300 --> 00:02:42.920
a tile,

00:02:42.920 --> 00:02:48.400
what's going to happen is all the read write operations will be performed directly on the

00:02:48.400 --> 00:02:48.940
memory.

00:02:48.940 --> 00:02:54.780
This variable will not be copied into the local kasher forever increment.

00:02:54.780 --> 00:02:59.910
The value off that variable would be fetched from the memory and is written back to the

00:02:59.910 --> 00:03:00.450
memory.

00:03:00.450 --> 00:03:05.060
And so we always are guaranteed to get the updated value.

00:03:05.060 --> 00:03:07.150
So in multi threaded programming,

00:03:07.150 --> 00:03:10.600
this is very important at times.

00:03:10.600 --> 00:03:12.700
You know,

00:03:12.700 --> 00:03:15.620
next week we're gonna talk about into threat communication,

00:03:15.620 --> 00:03:18.270
and as part off the example,

00:03:18.270 --> 00:03:24.310
we're going to have to use the water tal keyword So we'll see an example off it in next

00:03:24.310 --> 00:03:24.780
video.

00:03:24.780 --> 00:03:29.150
Now let's also talk about the happens before relationship.

00:03:29.150 --> 00:03:34.360
Let's say there are two threads Friday and trade be and lets it read.

00:03:34.360 --> 00:03:38.010
B is dependent on the right operation off ready.

00:03:38.010 --> 00:03:39.210
In that case,

00:03:39.210 --> 00:03:46.050
we want to make sure that the right operation happens before the read operation.

00:03:46.050 --> 00:03:47.660
So in other words,

00:03:47.660 --> 00:03:52.120
it's basically just simply the results off a right.

00:03:52.120 --> 00:03:58.310
The one thread are guaranteed to be visible to a read by another Trent.

00:03:58.310 --> 00:04:03.740
Only the right operation happens before the read operation.

00:04:03.740 --> 00:04:04.850
Hope that's clear.

00:04:04.850 --> 00:04:06.960
All right,

00:04:06.960 --> 00:04:08.350
see you in my next video

