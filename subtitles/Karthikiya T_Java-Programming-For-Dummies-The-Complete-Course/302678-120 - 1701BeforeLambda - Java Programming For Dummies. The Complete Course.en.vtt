WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.470
in this chapter,

00:00:01.470 --> 00:00:04.190
we're gonna talk about Lambda Expressions.

00:00:04.190 --> 00:00:05.830
First of all,

00:00:05.830 --> 00:00:09.950
let me clarify that Lambda expressions are like icing on the cake.

00:00:09.950 --> 00:00:12.650
You can live without lambda expressions,

00:00:12.650 --> 00:00:14.710
but that being said,

00:00:14.710 --> 00:00:17.900
Lambda Expressions offer you to write a clean code.

00:00:17.900 --> 00:00:18.810
That is,

00:00:18.810 --> 00:00:21.300
is it to understand more readable?

00:00:21.300 --> 00:00:22.420
And hence,

00:00:22.420 --> 00:00:23.550
as a by product,

00:00:23.550 --> 00:00:26.750
you get a more maintainable code as well.

00:00:26.750 --> 00:00:27.550
And that,

00:00:27.550 --> 00:00:27.690
too,

00:00:27.690 --> 00:00:29.610
with minimal set off instructions.

00:00:29.610 --> 00:00:30.170
Also,

00:00:30.170 --> 00:00:34.580
Lambda expressions have a significant role when used with stream A p I.

00:00:34.580 --> 00:00:36.540
But in this chapter,

00:00:36.540 --> 00:00:37.660
we just woke us down.

00:00:37.660 --> 00:00:44.420
Understanding Lambda Expressions and Method of Francis will talk about stream FBI at later

00:00:44.420 --> 00:00:45.280
point of time.

00:00:45.280 --> 00:00:46.620
In this example,

00:00:46.620 --> 00:00:51.050
I've just created couple off string objects and I'm passing them as an argument to this

00:00:51.050 --> 00:00:52.150
matter Display.

00:00:52.150 --> 00:00:57.010
And all this method is doing is display the string on the console.

00:00:57.010 --> 00:01:02.800
Now what I wanted to accomplish here is I want to send a piece off cord.

00:01:02.800 --> 00:01:15.890
Some called here and I'm going to pass this court as an argument to this method and this

00:01:15.890 --> 00:01:17.750
method were executed that piece up court.

00:01:17.750 --> 00:01:21.630
How do we accomplish this for this purpose?

00:01:21.630 --> 00:01:23.450
I'm going to create an inter press.

00:01:23.450 --> 00:01:25.450
Let's get off this first.

00:01:25.450 --> 00:01:33.660
It's called this method execute that would make more sense.

00:01:33.660 --> 00:01:35.990
So let's create an interface.

00:01:35.990 --> 00:01:39.540
And just as we have a member class,

00:01:39.540 --> 00:01:45.890
we can have a member in defense that will have the scope of this class interface.

00:01:45.890 --> 00:01:49.050
I'm going to call it math interface.

00:01:49.050 --> 00:01:54.010
I'm going to define exactly one method in here wide.

00:01:54.010 --> 00:02:02.240
Find some now what I want to do here in the main map that is owned to create a class that

00:02:02.240 --> 00:02:06.250
is local to this method class.

00:02:06.250 --> 00:02:12.770
Some name implements map.

00:02:12.770 --> 00:02:14.300
Now,

00:02:14.300 --> 00:02:15.090
by doing so,

00:02:15.090 --> 00:02:20.850
we do pride implementation for the only matter present in this interface.

00:02:20.850 --> 00:02:22.420
In this guess,

00:02:22.420 --> 00:02:30.140
I'm just going to say sis out 10 plus 10 Now in the next step,

00:02:30.140 --> 00:02:33.550
I'm going to create an instance off this class,

00:02:33.550 --> 00:02:37.550
some name object,

00:02:37.550 --> 00:02:39.150
new,

00:02:39.150 --> 00:02:41.290
some name.

00:02:41.290 --> 00:02:43.690
But as I have already mentioned,

00:02:43.690 --> 00:02:49.180
when you're going to create an instance off a class that implements and interferes always

00:02:49.180 --> 00:02:51.280
have interface as the reference type,

00:02:51.280 --> 00:02:54.780
it's a good practice.

00:02:54.780 --> 00:03:00.550
Now we can send this object toe this method,

00:03:00.550 --> 00:03:02.510
but we have a problem here.

00:03:02.510 --> 00:03:08.050
The type of argument that this matter is expecting is string.

00:03:08.050 --> 00:03:10.150
So we entertained this too.

00:03:10.150 --> 00:03:14.250
Matt Type.

00:03:14.250 --> 00:03:17.660
And let's call this or B J.

00:03:17.660 --> 00:03:19.260
That would make more sense.

00:03:19.260 --> 00:03:22.850
And in here I'm going to call that method,

00:03:22.850 --> 00:03:24.350
find some.

00:03:24.350 --> 00:03:33.740
And obviously we can now pass this object as an argument and come better will not complain

00:03:33.740 --> 00:03:35.620
in here.

00:03:35.620 --> 00:03:38.360
We have declared the class and then Winston.

00:03:38.360 --> 00:03:45.510
She hated that class to create an object who can do this Two steps in one go with anonymous

00:03:45.510 --> 00:03:46.360
in their classes.

00:03:46.360 --> 00:03:51.500
If you want to know about anonymous in the classes than please go back and take a look at

00:03:51.500 --> 00:03:53.320
my video on the same.

00:03:53.320 --> 00:04:04.510
So let's make this and anonymous in your class it's going to have the pollings in tax.

00:04:04.510 --> 00:04:06.050
Now we can get it off.

00:04:06.050 --> 00:04:09.820
This credible in Good.

00:04:09.820 --> 00:04:15.350
Now we kind off accomplished what we wanted.

00:04:15.350 --> 00:04:17.150
We have a variable,

00:04:17.150 --> 00:04:18.450
which is off type math,

00:04:18.450 --> 00:04:26.270
and we have some kind off a block that would constitute the code that we wanted to execute

00:04:26.270 --> 00:04:26.270
.

00:04:26.270 --> 00:04:29.880
And when they passed this object as an argument to this method,

00:04:29.880 --> 00:04:32.400
we're calling the method points,

00:04:32.400 --> 00:04:32.810
um,

00:04:32.810 --> 00:04:41.470
to execute that block off instructions that's on the program so we kind off accomplished

00:04:41.470 --> 00:04:42.840
what we wanted,

00:04:42.840 --> 00:04:45.140
but not exactly true,

00:04:45.140 --> 00:04:47.250
because if you take a look,

00:04:47.250 --> 00:04:51.070
all they were just interested in executing the statement.

00:04:51.070 --> 00:04:54.030
There's a lot of junk in here we're passing.

00:04:54.030 --> 00:04:57.410
We're creating a class in Stan sharing it,

00:04:57.410 --> 00:05:02.150
and then we're passing that instance or an object to this method.

00:05:02.150 --> 00:05:08.750
So essentially we still didn't accomplished our task off sending a block off court.

00:05:08.750 --> 00:05:12.540
We're not sending block off court that we won't execute.

00:05:12.540 --> 00:05:17.350
We're sending an object that has block off court now,

00:05:17.350 --> 00:05:18.340
at later point of time,

00:05:18.340 --> 00:05:23.050
let's he wanted to have another implementation off this math and affairs.

00:05:23.050 --> 00:05:29.450
And for that you're going to create another set off 10 lines.

00:05:29.450 --> 00:05:32.250
Quite object one,

00:05:32.250 --> 00:05:35.350
and then you will pass it as an argument.

00:05:35.350 --> 00:05:41.290
This is kind off like an overkill.

00:05:41.290 --> 00:05:47.350
We're not only sending this block off instruction along with their we're also sending an

00:05:47.350 --> 00:05:49.440
object that wraps this code.

00:05:49.440 --> 00:05:49.980
You know,

00:05:49.980 --> 00:05:50.530
next video.

00:05:50.530 --> 00:05:53.210
That's what we're going to talk about.

00:05:53.210 --> 00:05:59.240
We're going to take a look at how we can send a block off court rather than an object that

00:05:59.240 --> 00:06:00.490
has the lock off court.

00:06:00.490 --> 00:06:02.550
See you in my next video

