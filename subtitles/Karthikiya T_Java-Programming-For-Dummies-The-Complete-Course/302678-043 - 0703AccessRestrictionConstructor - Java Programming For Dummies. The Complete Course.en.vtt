WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.320
in this video,

00:00:01.320 --> 00:00:04.950
we're gonna talk about access restriction for constructors.

00:00:04.950 --> 00:00:05.980
Now,

00:00:05.980 --> 00:00:07.000
in this class A,

00:00:07.000 --> 00:00:11.050
our constructors stands for access restriction.

00:00:11.050 --> 00:00:11.790
Constructors.

00:00:11.790 --> 00:00:14.170
We have everything static.

00:00:14.170 --> 00:00:15.990
We have starting methods.

00:00:15.990 --> 00:00:22.800
And whatever we're gonna use inside the static method are going to be ecstatic as well.

00:00:22.800 --> 00:00:24.380
So what?

00:00:24.380 --> 00:00:26.050
We have already bulls out static?

00:00:26.050 --> 00:00:28.450
No.

00:00:28.450 --> 00:00:29.670
A question for you.

00:00:29.670 --> 00:00:36.870
Does it make sense to create an object off this class when you don't have any methods or

00:00:36.870 --> 00:00:38.630
variables that you can access?

00:00:38.630 --> 00:00:39.450
But that object,

00:00:39.450 --> 00:00:40.680
What is the purpose?

00:00:40.680 --> 00:00:41.850
Off creating object?

00:00:41.850 --> 00:00:44.290
There is no purpose.

00:00:44.290 --> 00:00:47.750
And we're trying to do the same thing in here.

00:00:47.750 --> 00:00:55.800
So we don't want users to create objects off my class here constructors to save their

00:00:55.800 --> 00:00:56.360
memory.

00:00:56.360 --> 00:00:58.250
So what I'm going to do,

00:00:58.250 --> 00:01:00.610
I'm going to create a constructor.

00:01:00.610 --> 00:01:07.970
So that will write the default constructor Control C and Control Re.

00:01:07.970 --> 00:01:13.750
And that's it.

00:01:13.750 --> 00:01:17.100
This is a default.

00:01:17.100 --> 00:01:20.130
Empty constructor still will be able to access.

00:01:20.130 --> 00:01:22.530
But if you make this as private,

00:01:22.530 --> 00:01:27.790
then guess what?

00:01:27.790 --> 00:01:29.360
We cannot create an object.

00:01:29.360 --> 00:01:32.010
We cannot instance she it at class.

00:01:32.010 --> 00:01:33.430
We're getting better.

00:01:33.430 --> 00:01:40.400
That's because this constructor in here is only accessible with in this class,

00:01:40.400 --> 00:01:43.810
and it is not visible outside this class.

00:01:43.810 --> 00:01:45.250
As simple as that.

00:01:45.250 --> 00:01:47.980
We're saving memory.

00:01:47.980 --> 00:01:54.280
So this is one purpose why you want to use a private constructor?

00:01:54.280 --> 00:01:56.450
Okay,

00:01:56.450 --> 00:02:00.650
let's to control Z and shared the file.

00:02:00.650 --> 00:02:07.840
We have another usage off private constructors.

00:02:07.840 --> 00:02:11.460
If you want to follow a single tone design pattern,

00:02:11.460 --> 00:02:13.450
a singleton design pattern,

00:02:13.450 --> 00:02:14.550
he's nothing.

00:02:14.550 --> 00:02:19.150
But we won't let anybody create more than one instance of a class.

00:02:19.150 --> 00:02:21.550
Take a look at this class.

00:02:21.550 --> 00:02:26.870
We cannot instead,

00:02:26.870 --> 00:02:34.310
she it or create an object because we have only one constructor and that is private like

00:02:34.310 --> 00:02:34.550
Well,

00:02:34.550 --> 00:02:36.650
like we've seen in our previous example.

00:02:36.650 --> 00:02:39.480
But we're gonna let access.

00:02:39.480 --> 00:02:41.350
We're gonna let the user access.

00:02:41.350 --> 00:02:42.360
This mattered.

00:02:42.360 --> 00:02:45.460
Since this is public,

00:02:45.460 --> 00:02:47.750
anybody would be able to access this method.

00:02:47.750 --> 00:02:53.650
And what we're returning in this method is the instance off this class itself,

00:02:53.650 --> 00:02:57.050
because we have access to this constructor.

00:02:57.050 --> 00:03:09.380
Wouldn't this class So we sort of created an instance using the new nooky ward and we

00:03:09.380 --> 00:03:14.850
returned that object to whoever is calling and that's exactly what we're doing here.

00:03:14.850 --> 00:03:16.700
Whitman.

00:03:16.700 --> 00:03:17.310
Comment.

00:03:17.310 --> 00:03:22.260
But these lengths that saved the file.

00:03:22.260 --> 00:03:27.560
I have great a couple off instances.

00:03:27.560 --> 00:03:28.490
In fact,

00:03:28.490 --> 00:03:29.130
I didn't quit.

00:03:29.130 --> 00:03:30.310
Couple of instances.

00:03:30.310 --> 00:03:37.060
Let me explain what I mean in here have requested for this instance.

00:03:37.060 --> 00:03:39.850
As we discussed when we talked about the static,

00:03:39.850 --> 00:03:44.560
you board that all the static variables are associated with the class,

00:03:44.560 --> 00:03:45.880
not with an object.

00:03:45.880 --> 00:03:50.090
So regardless off how many objects were creating,

00:03:50.090 --> 00:03:54.260
we're ultimately pointing to the same field,

00:03:54.260 --> 00:03:57.170
and that is associated with the class.

00:03:57.170 --> 00:03:59.790
Whatever we're returning in here,

00:03:59.790 --> 00:04:01.300
object is off static.

00:04:01.300 --> 00:04:10.200
You may want to revisit that video where we talked about the static keyboard,

00:04:10.200 --> 00:04:11.790
if the sounds confusing.

00:04:11.790 --> 00:04:16.040
But in here we're sort of God,

00:04:16.040 --> 00:04:17.380
the instance of the class,

00:04:17.380 --> 00:04:19.550
the static instance.

00:04:19.550 --> 00:04:25.970
I would say we have be regard the same instance.

00:04:25.970 --> 00:04:34.150
If I updated the value off X variable in here using the Pfosten stance,

00:04:34.150 --> 00:04:39.450
then it's going to reflect in the second instance as well.

00:04:39.450 --> 00:04:42.760
So in these two lines,

00:04:42.760 --> 00:04:44.750
I'm printing the value of X,

00:04:44.750 --> 00:04:46.050
using both the objects.

00:04:46.050 --> 00:04:56.420
So even though I used the object A to said the value of X hit brilliant reflector in here

00:04:56.420 --> 00:04:56.870
as well,

00:04:56.870 --> 00:05:00.570
so the output off this too would be seen.

00:05:00.570 --> 00:05:02.750
Let's try to run this program.

00:05:02.750 --> 00:05:13.890
There you go now I'm using the terms object and instance.

00:05:13.890 --> 00:05:21.310
The boat essentially means saying we're gonna create an instance off a class and recorded

00:05:21.310 --> 00:05:22.080
an object.

00:05:22.080 --> 00:05:24.550
So don't get confused.

00:05:24.550 --> 00:05:29.250
I hope that's clear.

00:05:29.250 --> 00:05:32.250
See you in my next chapter.

