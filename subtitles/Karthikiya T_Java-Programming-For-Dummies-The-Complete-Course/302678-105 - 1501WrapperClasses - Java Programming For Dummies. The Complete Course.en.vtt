WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.080
in this chapter,

00:00:03.080 --> 00:00:06.850
we're gonna talk about General X and the special in this video.

00:00:06.850 --> 00:00:09.650
We're gonna talk about rapper classes in Java.

00:00:09.650 --> 00:00:11.200
For that,

00:00:11.200 --> 00:00:12.620
I would like you open this file.

00:00:12.620 --> 00:00:15.350
Primitive wrappers under the project Generics.

00:00:15.350 --> 00:00:21.790
In here I have the era defined and this is a stringer.

00:00:21.790 --> 00:00:28.450
A with the size off to that means we can't insert more than two elements.

00:00:28.450 --> 00:00:31.280
But when we try to insert 1/3 element,

00:00:31.280 --> 00:00:33.610
we went to get their index out of bounds.

00:00:33.610 --> 00:00:36.150
Exception statement on the program.

00:00:36.150 --> 00:00:38.260
There it is.

00:00:38.260 --> 00:00:39.350
Let's come in this out.

00:00:39.350 --> 00:00:46.660
So that's clearly a problem We won't in every that expand doesn't when we add new elements

00:00:46.660 --> 00:00:50.450
and that's where this era list comes into picture.

00:00:50.450 --> 00:00:55.060
We'll talk more on every list that syntax off it,

00:00:55.060 --> 00:00:57.650
etcetera when we talk about collections.

00:00:57.650 --> 00:00:59.040
But for now,

00:00:59.040 --> 00:01:03.580
think off a realist as Henery that has a variable size.

00:01:03.580 --> 00:01:05.790
That means as and when we add new elements,

00:01:05.790 --> 00:01:08.250
the sides off there is going to expand by itself.

00:01:08.250 --> 00:01:10.510
But we have a limitation here.

00:01:10.510 --> 00:01:12.170
Passport design.

00:01:12.170 --> 00:01:15.810
Their list is going to accept only objects.

00:01:15.810 --> 00:01:25.420
We can't pass any primitive type in here like int our float except But there could be cases

00:01:25.420 --> 00:01:30.650
where we want to add indigenous as elements to the centralised,

00:01:30.650 --> 00:01:34.850
and we cannot use their because the sizes fixed.

00:01:34.850 --> 00:01:37.750
And that's where the rapper classes will come into picture.

00:01:37.750 --> 00:01:41.750
In here I have the primitive type int.

00:01:41.750 --> 00:01:46.790
We can get the object of presentation off this primitive type end by using the class

00:01:46.790 --> 00:01:49.850
integer whose parent is the number class,

00:01:49.850 --> 00:01:55.960
and we're gonna create a new instance off the class by passing an integer value as an

00:01:55.960 --> 00:01:57.400
argument to this constructor.

00:01:57.400 --> 00:01:58.750
By doing so,

00:01:58.750 --> 00:02:03.010
this is going to be as good as the primitive went.

00:02:03.010 --> 00:02:04.150
But it's an object,

00:02:04.150 --> 00:02:09.950
and now we can gladly pass an object to constructs like this.

00:02:09.950 --> 00:02:10.900
So,

00:02:10.900 --> 00:02:11.550
for example,

00:02:11.550 --> 00:02:14.990
we can say integer instead of the string.

00:02:14.990 --> 00:02:15.630
And,

00:02:15.630 --> 00:02:16.330
of course,

00:02:16.330 --> 00:02:19.410
we need to keep adding into just not the spring in here.

00:02:19.410 --> 00:02:21.290
When we change the data type in here,

00:02:21.290 --> 00:02:23.290
it's under those changes.

00:02:23.290 --> 00:02:25.170
Again,

00:02:25.170 --> 00:02:26.270
we'll talk about a release,

00:02:26.270 --> 00:02:27.270
that letter pawn off time.

00:02:27.270 --> 00:02:35.250
Now if you see the class into Joe's kind off acting like a rapper for the primitive end,

00:02:35.250 --> 00:02:37.340
which means internally,

00:02:37.340 --> 00:02:40.380
this statement is going to use the permit event.

00:02:40.380 --> 00:02:42.020
But for us,

00:02:42.020 --> 00:02:46.350
we're actually dealing with the into your object hope that makes sense.

00:02:46.350 --> 00:02:54.030
This is called boxing because we're kind of taking the primitive end and we're boxing it or

00:02:54.030 --> 00:02:56.250
wrapping it and making it look like an object.

00:02:56.250 --> 00:02:57.040
Now,

00:02:57.040 --> 00:02:58.150
in this statement,

00:02:58.150 --> 00:03:03.020
we're finding the addition or the some off two integers.

00:03:03.020 --> 00:03:06.650
But one is primitive int and the other is integer.

00:03:06.650 --> 00:03:11.450
The place operator is going to accept only the primitive data types.

00:03:11.450 --> 00:03:16.720
So in here Java automatically does unboxing for us.

00:03:16.720 --> 00:03:17.470
Essentially,

00:03:17.470 --> 00:03:24.070
what this means is the object is again converted back to prone to end just for this

00:03:24.070 --> 00:03:25.170
calculation to happen.

00:03:25.170 --> 00:03:26.380
And this is called.

00:03:26.380 --> 00:03:33.020
Unboxing also answered all creating a new object aken directly a sign of value and is

00:03:33.020 --> 00:03:38.750
internally going to create an object for us and make this reprints type point to that

00:03:38.750 --> 00:03:39.150
object.

00:03:39.150 --> 00:03:40.330
Similarly,

00:03:40.330 --> 00:03:46.900
we have the primitive type double the object of presentation off primitive type double is

00:03:46.900 --> 00:03:48.050
again double,

00:03:48.050 --> 00:03:55.770
but with a capital letter D and no do one is going to act like the object of presentation

00:03:55.770 --> 00:03:56.570
off double.

00:03:56.570 --> 00:04:02.690
Now we can gladly send this object to construct like a realist.

00:04:02.690 --> 00:04:03.750
Similarly,

00:04:03.750 --> 00:04:11.700
we have other rapper glasses by floor trucked long and they're all child classes off the

00:04:11.700 --> 00:04:12.030
number,

00:04:12.030 --> 00:04:14.430
class like ways.

00:04:14.430 --> 00:04:16.650
We also have the character class,

00:04:16.650 --> 00:04:20.920
which you can use to have an object of presentation off carded.

00:04:20.920 --> 00:04:24.040
A type and another advantage off.

00:04:24.040 --> 00:04:29.590
Using the rapper classes is you can make use off the methods inside these classes that are

00:04:29.590 --> 00:04:30.450
pre defined.

00:04:30.450 --> 00:04:31.940
For example,

00:04:31.940 --> 00:04:35.890
I can say si dot and you got a lot off methods,

00:04:35.890 --> 00:04:37.150
Constance,

00:04:37.150 --> 00:04:39.640
etcetera that you can make use off.

00:04:39.640 --> 00:04:44.450
You can explore the methods by reading the description in here.

00:04:44.450 --> 00:04:48.980
So that's it for this video.

00:04:48.980 --> 00:04:50.680
With this in mind,

00:04:50.680 --> 00:04:54.950
we're good to go with understanding what our generous X in Java.

