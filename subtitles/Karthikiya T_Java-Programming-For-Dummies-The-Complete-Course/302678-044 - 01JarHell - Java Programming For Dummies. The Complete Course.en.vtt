WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.370
Before we dive in and understand what is

00:00:02.370 --> 00:00:05.880
JPL mess which is introduced in Java washing line.

00:00:05.880 --> 00:00:08.010
It might be worthwhile to understand some of

00:00:08.010 --> 00:00:11.640
the problems that were existing prior to Java nine version.

00:00:11.640 --> 00:00:15.960
And in this video specifically we are going to talk about the problem of John hell.

00:00:15.960 --> 00:00:20.955
John held refers to the problems arising due to the class loading mechanism.

00:00:20.955 --> 00:00:24.255
Let's talk about couple of such problems.

00:00:24.255 --> 00:00:28.570
The first one is the problem of forgotten dependencies.

00:00:28.570 --> 00:00:33.695
Imagine that you have a project and it depends on a bunch of other projects or libraries.

00:00:33.695 --> 00:00:38.645
And in turn, these libraries might be requiring a bunch of other libraries.

00:00:38.645 --> 00:00:41.465
Now before the tools like Maven or Gradle,

00:00:41.465 --> 00:00:43.400
this is something that we have to do manually.

00:00:43.400 --> 00:00:47.465
I mean, TOPO would have to search on the internet for all these jar files,

00:00:47.465 --> 00:00:50.300
download them, make them part of the project,

00:00:50.300 --> 00:00:53.105
builder project, and then deploy it onto the server.

00:00:53.105 --> 00:00:56.540
The problem here is since this is done manually,

00:00:56.540 --> 00:01:00.980
there's a high chance that the dollar per might be missing some of the jars.

00:01:00.980 --> 00:01:04.610
And if that happens whenever somebody what to use a feature of

00:01:04.610 --> 00:01:09.485
your application that might be requiring a class residing in one of these missing jars,

00:01:09.485 --> 00:01:16.659
then that would give us no class deaf found error and the application would crash.

00:01:16.659 --> 00:01:22.435
Another problem that might arise pertaining to jog hell is so-called shadowing.

00:01:22.435 --> 00:01:24.520
Shadowing might happen when you have

00:01:24.520 --> 00:01:28.105
two libraries having the same class with the exact same name.

00:01:28.105 --> 00:01:31.900
Again, let's say that you have your project and you're using two versions

00:01:31.900 --> 00:01:35.635
of the same library inside the version 3.1a,

00:01:35.635 --> 00:01:37.735
Imagine that you have the class with name,

00:01:37.735 --> 00:01:40.750
email manager, and has the method send.

00:01:40.750 --> 00:01:43.495
And inside the version three or two,

00:01:43.495 --> 00:01:46.990
you have the exact same class with the exact same name.

00:01:46.990 --> 00:01:51.565
But the method name is now changed to send email.

00:01:51.565 --> 00:01:53.505
Or the problem here is,

00:01:53.505 --> 00:01:57.830
you can never predict which one of these classes would be picked up by the class loader.

00:01:57.830 --> 00:02:01.985
If the class loader happens to pick the one from the Washington No.2.

00:02:01.985 --> 00:02:06.725
And inside your project you use the code email manager dot send,

00:02:06.725 --> 00:02:09.095
which actually belongs to Washington No.1.

00:02:09.095 --> 00:02:14.465
Your application would essentially break and would give us an adder.

00:02:14.465 --> 00:02:16.160
Added to that.

00:02:16.160 --> 00:02:19.445
If you happen to use one of the classes in Washington No.1,

00:02:19.445 --> 00:02:23.615
the class loader would also load that class promotion 3.1a,

00:02:23.615 --> 00:02:27.740
meaning gradually mixing these two libraries and using classes in

00:02:27.740 --> 00:02:33.080
both these libraries that might actually yield some inconsistent application behavior.

00:02:33.080 --> 00:02:36.485
And this is something we definitely need to address.

00:02:36.485 --> 00:02:39.530
Now if you're familiar with tools like Maven Gradle,

00:02:39.530 --> 00:02:42.005
then you might have guessed it right.

00:02:42.005 --> 00:02:46.760
They might actually solve majority of this problem, but not completely.

00:02:46.760 --> 00:02:53.100
It's still possible to reproduce these issues even with tools like Maven end, Gradle.
