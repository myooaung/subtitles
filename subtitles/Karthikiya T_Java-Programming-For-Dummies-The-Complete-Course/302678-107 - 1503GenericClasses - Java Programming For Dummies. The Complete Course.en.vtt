WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.410
in this video,

00:00:01.410 --> 00:00:05.660
we're gonna talk about gender classes for the purpose off.

00:00:05.660 --> 00:00:06.630
This example,

00:00:06.630 --> 00:00:08.850
I have created three classes,

00:00:08.850 --> 00:00:11.390
an integer class dot java.

00:00:11.390 --> 00:00:15.200
I have a very bewitches off type integer,

00:00:15.200 --> 00:00:22.410
and we have setter and together to set the value of this variable and to get the value off

00:00:22.410 --> 00:00:23.170
this variable.

00:00:23.170 --> 00:00:25.170
Similarly,

00:00:25.170 --> 00:00:27.200
we have double class or java,

00:00:27.200 --> 00:00:31.800
and in here we're doing exact same thing center and get her.

00:00:31.800 --> 00:00:34.880
But the type of data is double.

00:00:34.880 --> 00:00:36.370
Similarly,

00:00:36.370 --> 00:00:40.180
we have the string class with a string variable.

00:00:40.180 --> 00:00:41.720
So basically they intend off.

00:00:41.720 --> 00:00:49.500
All these three classes is same except the different terms off the type of data and in our

00:00:49.500 --> 00:00:50.970
gender class example,

00:00:50.970 --> 00:00:53.750
have created an object off all these three classes.

00:00:53.750 --> 00:00:57.750
And I'm calling settles and getters for integer class.

00:00:57.750 --> 00:01:02.850
I have said the value as 10 and when I do get war,

00:01:02.850 --> 00:01:07.450
it's going to return me the entered your object.

00:01:07.450 --> 00:01:13.750
And that will enable me to call the method raw specific to into your object.

00:01:13.750 --> 00:01:17.350
So I'm able to call this method double value,

00:01:17.350 --> 00:01:19.610
which is off into your classmethod.

00:01:19.610 --> 00:01:20.560
Similarly,

00:01:20.560 --> 00:01:23.710
when we get the double object in here,

00:01:23.710 --> 00:01:26.590
I'm calling a matter that is specific to double.

00:01:26.590 --> 00:01:27.780
Same is the case,

00:01:27.780 --> 00:01:31.980
but the string object and trying to get the cow at index one.

00:01:31.980 --> 00:01:32.980
Not two more.

00:01:32.980 --> 00:01:36.050
If I wanted to add one more class with a different data type,

00:01:36.050 --> 00:01:39.670
I had to create another class just as these three.

00:01:39.670 --> 00:01:41.610
That's an additional overhead.

00:01:41.610 --> 00:01:43.250
How can we get it off it?

00:01:43.250 --> 00:01:46.850
One solution is to create a single class,

00:01:46.850 --> 00:01:49.800
which will have a variable,

00:01:49.800 --> 00:01:51.250
which is off type object.

00:01:51.250 --> 00:01:54.730
And since object is the ultimate parent off,

00:01:54.730 --> 00:01:58.900
every class in Java in digital double sting are no exception.

00:01:58.900 --> 00:02:01.560
They're all child glasses off object.

00:02:01.560 --> 00:02:04.480
So if I create an instance off this class,

00:02:04.480 --> 00:02:09.050
it's going to accept any kind off data type as long as it is object.

00:02:09.050 --> 00:02:12.350
So let's change that.

00:02:12.350 --> 00:02:15.140
Since Ralph using into your class,

00:02:15.140 --> 00:02:18.980
I'm going to replace everything with this object class.

00:02:18.980 --> 00:02:20.630
And no,

00:02:20.630 --> 00:02:23.690
we can get it off all these three classes.

00:02:23.690 --> 00:02:25.660
We can delete them,

00:02:25.660 --> 00:02:26.940
but but for your reference,

00:02:26.940 --> 00:02:29.020
I'm going to leave them there.

00:02:29.020 --> 00:02:32.130
But clearly we have one problem here in here.

00:02:32.130 --> 00:02:37.990
We're trying to access a matter that is specific to the into your class and in here the

00:02:37.990 --> 00:02:40.650
double class and in here The string class.

00:02:40.650 --> 00:02:44.950
So what can we do way to typecast this?

00:02:44.950 --> 00:02:46.680
Let's do that.

00:02:46.680 --> 00:02:51.350
Let's typecast just to integer.

00:02:51.350 --> 00:02:56.840
Let's organized the Prentice's and similarly,

00:02:56.840 --> 00:03:02.550
we need to typecast this to Double and this to string,

00:03:02.550 --> 00:03:07.650
which will definitely prostrate any programmer in the world.

00:03:07.650 --> 00:03:09.590
Another problem is,

00:03:09.590 --> 00:03:11.550
let's come in this code.

00:03:11.550 --> 00:03:16.330
I can literally set any kind of value in here.

00:03:16.330 --> 00:03:19.270
I can even pass string now.

00:03:19.270 --> 00:03:25.720
This is going to pose the runtime exception because we cannot cast a string to an indigent

00:03:25.720 --> 00:03:29.550
class caste exception.

00:03:29.550 --> 00:03:31.470
So this is clearly a problem,

00:03:31.470 --> 00:03:33.910
so we cannot use the object class.

00:03:33.910 --> 00:03:35.310
What is the solution?

00:03:35.310 --> 00:03:37.250
General classes answer.

00:03:37.250 --> 00:03:44.200
Let me copy this court from here and passed it over here and right after the class name,

00:03:44.200 --> 00:03:46.700
we're going to have the type perimeter.

00:03:46.700 --> 00:03:48.330
And of course,

00:03:48.330 --> 00:03:50.650
it's going to go in anger.

00:03:50.650 --> 00:03:54.330
Braces has a good naming convention.

00:03:54.330 --> 00:03:56.500
Let's use Capital letter T,

00:03:56.500 --> 00:03:59.660
and wherever you're using specific,

00:03:59.660 --> 00:04:00.570
they're a type.

00:04:00.570 --> 00:04:03.250
We're gonna replace it with this gender type.

00:04:03.250 --> 00:04:08.650
So held a control f replace it with capital T.

00:04:08.650 --> 00:04:13.430
And I want to replace it everywhere I see it in this class,

00:04:13.430 --> 00:04:16.730
replace all now guess what,

00:04:16.730 --> 00:04:18.250
in our example,

00:04:18.250 --> 00:04:25.670
we can now views the gender class like so,

00:04:25.670 --> 00:04:29.850
but we can send the type argument.

00:04:29.850 --> 00:04:32.210
In this case,

00:04:32.210 --> 00:04:33.950
it's integer.

00:04:33.950 --> 00:04:36.900
You have to have the same thing in here.

00:04:36.900 --> 00:04:38.120
Of course,

00:04:38.120 --> 00:04:40.780
this class is going to be the gender class,

00:04:40.780 --> 00:04:44.950
and now we have a compile time error company.

00:04:44.950 --> 00:04:47.790
Tim Mirrors are less expensive compared to run.

00:04:47.790 --> 00:04:55.350
Temer's so In Here were forced to provide only integer type has an argument,

00:04:55.350 --> 00:05:02.600
and another advantage is we no longer need to typecast assistant teacher because Javan

00:05:02.600 --> 00:05:03.620
knows it already.

00:05:03.620 --> 00:05:08.790
Job is everywhere that the only perimeter that we consent is off type integer.

00:05:08.790 --> 00:05:13.550
Now we can gladly unq Ament these lines off court.

00:05:13.550 --> 00:05:15.450
And of course,

00:05:15.450 --> 00:05:19.150
you're going to use the gender class construct here.

00:05:19.150 --> 00:05:27.650
This is going to be double Skopje.

00:05:27.650 --> 00:05:29.700
This stroll here,

00:05:29.700 --> 00:05:34.860
it's going to be a string credible and good.

00:05:34.860 --> 00:05:42.610
Now you can go ahead and feel free to delete all these files and use only the gender class

00:05:42.610 --> 00:05:42.610
.

00:05:42.610 --> 00:05:43.400
No.

00:05:43.400 --> 00:05:43.800
Two more.

00:05:43.800 --> 00:05:47.700
If I wanted to add the similar functionality for another data type,

00:05:47.700 --> 00:05:49.950
I don't have to create another class.

00:05:49.950 --> 00:05:57.800
I can simply use the same gender class one of the most confused terms We're learning.

00:05:57.800 --> 00:06:03.850
The General X in Java is the difference between die para meter and the type argument.

00:06:03.850 --> 00:06:08.090
Whatever we have here is a perimeter.

00:06:08.090 --> 00:06:11.350
And whatever we're sending from here is an argument.

00:06:11.350 --> 00:06:14.870
So this is going to be a type argument,

00:06:14.870 --> 00:06:20.960
and this is the type para meter hope that makes sense.

00:06:20.960 --> 00:06:21.860
Lastly,

00:06:21.860 --> 00:06:27.480
let me just point out that whatever the methods that were going to write in here again,

00:06:27.480 --> 00:06:29.490
they have to be types.

00:06:29.490 --> 00:06:29.910
If,

00:06:29.910 --> 00:06:35.250
just as our previous example and we talked about the gender methods,

00:06:35.250 --> 00:06:40.520
we cannot have a cord that is not compatible with the type of arguments expected in that

00:06:40.520 --> 00:06:40.850
method.

00:06:40.850 --> 00:06:42.360
All right.

00:06:42.360 --> 00:06:46.370
I guess it makes lot of sense to use gender classes at times.

00:06:46.370 --> 00:06:47.040
Definitely.

00:06:47.040 --> 00:06:49.760
It will help dull purse right at lean court.

00:06:49.760 --> 00:06:50.460
All right,

00:06:50.460 --> 00:06:51.850
see you in my next video.

