WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:06.460
in this video we're gonna talk about before dinner before reader is used for the sake off

00:00:06.460 --> 00:00:07.250
efficiency.

00:00:07.250 --> 00:00:09.160
Let me give you a real time example.

00:00:09.160 --> 00:00:16.290
Let's say you have a river with some water and let's say there is some kind off a pipeline

00:00:16.290 --> 00:00:17.650
connected to that river.

00:00:17.650 --> 00:00:21.050
In one end off the pipeline,

00:00:21.050 --> 00:00:25.510
there is a tap that will control the flow off water.

00:00:25.510 --> 00:00:27.520
If a turn off this tap,

00:00:27.520 --> 00:00:28.750
the floor will stop.

00:00:28.750 --> 00:00:30.790
If you don't it on,

00:00:30.790 --> 00:00:32.110
the water will start flowing.

00:00:32.110 --> 00:00:38.000
And let's say your house is located in some remote location.

00:00:38.000 --> 00:00:40.150
Where there is no supplee off water.

00:00:40.150 --> 00:00:43.520
Little's assume that you only have one container,

00:00:43.520 --> 00:00:45.790
which is off capacity one leader.

00:00:45.790 --> 00:00:48.840
Let's say the distance between these two is,

00:00:48.840 --> 00:00:49.030
say,

00:00:49.030 --> 00:00:50.070
10 kilometers.

00:00:50.070 --> 00:00:51.850
No.

00:00:51.850 --> 00:00:53.200
Every time you need water,

00:00:53.200 --> 00:00:58.150
you need to walk for 10 Gloria's Collect the water off one liter and come back.

00:00:58.150 --> 00:01:00.550
This is very tedious job,

00:01:00.550 --> 00:01:03.110
So instead of doing it in this manner,

00:01:03.110 --> 00:01:06.650
you would rather porches a container off,

00:01:06.650 --> 00:01:06.860
say,

00:01:06.860 --> 00:01:07.850
50 leaders.

00:01:07.850 --> 00:01:13.330
You would take that container to the location where the water is available,

00:01:13.330 --> 00:01:19.150
fill the container and get it back and pour it on your or had tank.

00:01:19.150 --> 00:01:19.700
Now,

00:01:19.700 --> 00:01:20.260
this way,

00:01:20.260 --> 00:01:26.410
you're getting a lot of water in one go so you don't have to go 50 times to get 50 litres

00:01:26.410 --> 00:01:26.950
of water.

00:01:26.950 --> 00:01:28.180
Now,

00:01:28.180 --> 00:01:31.650
this is exactly what we can achieve you with before reader.

00:01:31.650 --> 00:01:32.800
So far,

00:01:32.800 --> 00:01:38.960
when you read the data using input stream leader or piling put stream using the reed matter

00:01:38.960 --> 00:01:38.960
,

00:01:38.960 --> 00:01:43.090
you're fetching data all the way from the hard disk.

00:01:43.090 --> 00:01:45.590
In comparison with this example with our job,

00:01:45.590 --> 00:01:46.390
for example,

00:01:46.390 --> 00:01:53.200
we can replace this river with our file inside the hard disk,

00:01:53.200 --> 00:02:03.060
and the tap can be replaced with the input stream that we create in the house can be

00:02:03.060 --> 00:02:05.350
replaced with our Java program.

00:02:05.350 --> 00:02:12.680
So if you use the reed matter off a their input stream reader or the violin bloodstream,

00:02:12.680 --> 00:02:18.120
every call of this matter is going to fetch data from the hardest.

00:02:18.120 --> 00:02:19.770
So each and every character.

00:02:19.770 --> 00:02:21.250
If this is a character stream,

00:02:21.250 --> 00:02:27.480
then for every character way to go all the way to the hard disk and get that character to

00:02:27.480 --> 00:02:28.150
our program.

00:02:28.150 --> 00:02:30.750
This is very expensive process.

00:02:30.750 --> 00:02:32.260
Also,

00:02:32.260 --> 00:02:34.570
if you remember in one ofour,

00:02:34.570 --> 00:02:39.050
previous videos have explained that we will make use off the NATO interfaces,

00:02:39.050 --> 00:02:44.640
and we actually take help from the operating system to get access to the files inside the

00:02:44.640 --> 00:02:45.350
hard disk,

00:02:45.350 --> 00:02:47.720
and that's a very expensive process.

00:02:47.720 --> 00:02:54.700
So instrument for Use the buffered reader instead off getting one character at a time.

00:02:54.700 --> 00:02:59.750
It's going to get one chunk off characters in one go and is going to store.

00:02:59.750 --> 00:03:05.250
And the RAM memory in this example is the overhead tank.

00:03:05.250 --> 00:03:08.950
Once we have a chunk off data.

00:03:08.950 --> 00:03:10.450
Not all the data,

00:03:10.450 --> 00:03:10.970
by the way,

00:03:10.970 --> 00:03:14.050
just a chunk of data in the RAM memory.

00:03:14.050 --> 00:03:15.860
With our program,

00:03:15.860 --> 00:03:17.970
it's very easy to access the data,

00:03:17.970 --> 00:03:19.390
and it's very faster.

00:03:19.390 --> 00:03:21.850
And when we're accessing this matter,

00:03:21.850 --> 00:03:30.060
the buffering mechanism is going to refill this buffer with next stream of data.

00:03:30.060 --> 00:03:33.890
We can also set the size off this buffer.

00:03:33.890 --> 00:03:39.250
Now let's go back to our program and see how we can make use off the before reader.

00:03:39.250 --> 00:03:40.270
All right,

00:03:40.270 --> 00:03:41.000
here we are.

00:03:41.000 --> 00:03:47.550
All that I need to do is to create an object off the buffered reader.

00:03:47.550 --> 00:03:56.590
I'll do control space to auto complete Let's call it B R stands for before reader and

00:03:56.590 --> 00:04:01.350
equals new again control space.

00:04:01.350 --> 00:04:08.210
But for reader and the kind of argument that the constructor off the before reader would

00:04:08.210 --> 00:04:14.050
expect is an object off the character stream in here.

00:04:14.050 --> 00:04:17.050
This is the pile input stream,

00:04:17.050 --> 00:04:23.870
and we have wrapped this input stream with input stream reader that will make the stream

00:04:23.870 --> 00:04:24.950
the character stream.

00:04:24.950 --> 00:04:30.150
So this is exactly what we're gonna pass as an argument to the before reader.

00:04:30.150 --> 00:04:33.270
Let's get it off all this court in here.

00:04:33.270 --> 00:04:38.410
Or maybe just I would come in this out for your future reference.

00:04:38.410 --> 00:04:44.650
And in here I'm going to create a variable off string will see way in a minute.

00:04:44.650 --> 00:04:47.080
Now call this lane.

00:04:47.080 --> 00:04:53.250
I'm also going to have a wilder and inside the wild Look,

00:04:53.250 --> 00:04:57.590
I'm going to do line equals.

00:04:57.590 --> 00:04:59.850
I'm going to use the bump aerator object.

00:04:59.850 --> 00:05:02.570
Don't now see the magic.

00:05:02.570 --> 00:05:04.770
We got a matter called read line.

00:05:04.770 --> 00:05:10.250
The real and matter will help us read data from a file when byline.

00:05:10.250 --> 00:05:13.600
And once this matter returns,

00:05:13.600 --> 00:05:14.150
no,

00:05:14.150 --> 00:05:17.350
that means there is nothing left to be read from the buffer.

00:05:17.350 --> 00:05:20.150
Let's just do this out,

00:05:20.150 --> 00:05:25.380
and we don't simply print that line.

00:05:25.380 --> 00:05:27.300
Let's run the program,

00:05:27.300 --> 00:05:28.760
By the way,

00:05:28.760 --> 00:05:34.660
let's change this back to introduce and in here.

00:05:34.660 --> 00:05:42.230
We don't have to have the utf eight encoding anymore because all the characters inside this

00:05:42.230 --> 00:05:45.760
to rose dot txt will belong to ask you character set.

00:05:45.760 --> 00:05:49.250
Let's run the program pretty good.

00:05:49.250 --> 00:05:53.250
We also have buffered input stream,

00:05:53.250 --> 00:06:03.950
and this class will help us use the buffering feature for the byte stream.

00:06:03.950 --> 00:06:10.260
So in here it cannot take the character stream.

00:06:10.260 --> 00:06:11.750
It will take the blood stream.

00:06:11.750 --> 00:06:22.710
You're gonna have to use a different method in here br dot read and is going to return an

00:06:22.710 --> 00:06:30.480
integer so high and similarly minus one.

00:06:30.480 --> 00:06:37.650
We'll print that indigent and we can put that back to cap.

00:06:37.650 --> 00:06:41.390
Let's run this program.

00:06:41.390 --> 00:06:42.410
Obviously,

00:06:42.410 --> 00:06:44.470
since we used the parental and method,

00:06:44.470 --> 00:06:49.450
it's going to print a character along with the new land character.

00:06:49.450 --> 00:06:55.250
Let's get it off this and use the print method pretty well.

00:06:55.250 --> 00:06:55.660
I'm good.

00:06:55.660 --> 00:06:57.200
Just remember,

00:06:57.200 --> 00:07:01.890
one thing is that it's always better to use the character stream when you're dealing with

00:07:01.890 --> 00:07:03.000
the textual data.

00:07:03.000 --> 00:07:06.750
Since two Rudar text is holding the textual information,

00:07:06.750 --> 00:07:11.050
let's undo the changes and use before reader.

00:07:11.050 --> 00:07:13.890
Now you may wonder,

00:07:13.890 --> 00:07:16.410
when did we ever use file input stream?

00:07:16.410 --> 00:07:20.700
I mean the byte stream If you're dealing with an image file,

00:07:20.700 --> 00:07:23.880
are a music file for a video file.

00:07:23.880 --> 00:07:25.550
It's better that you use.

00:07:25.550 --> 00:07:26.690
Or in fact,

00:07:26.690 --> 00:07:29.450
you have to use the byte stream Nordic character stream.

00:07:29.450 --> 00:07:32.940
It's only when you have to deal with the characters.

00:07:32.940 --> 00:07:36.950
You should use a character string and no matter what stream you use,

00:07:36.950 --> 00:07:40.160
always make use off the buffering mechanism,

00:07:40.160 --> 00:07:43.850
and that will improve the performance dramatically.

00:07:43.850 --> 00:07:44.760
All right,

00:07:44.760 --> 00:07:46.250
that's it for this video.

00:07:46.250 --> 00:07:46.690
Oh,

00:07:46.690 --> 00:07:47.260
wait a minute.

00:07:47.260 --> 00:07:51.980
I guess I have one more thing to say just as we used before.

00:07:51.980 --> 00:07:52.920
Reader for input,

00:07:52.920 --> 00:07:55.280
character stream we can have.

00:07:55.280 --> 00:07:59.420
But for writer for character or put stream.

00:07:59.420 --> 00:08:02.970
Let's do that and have a complete example.

00:08:02.970 --> 00:08:08.230
So we're gonna have the file are put.

00:08:08.230 --> 00:08:14.250
Stream out equals new filer Put stream.

00:08:14.250 --> 00:08:18.450
Let's copy this argument.

00:08:18.450 --> 00:08:21.050
Two DUIs.

00:08:21.050 --> 00:08:30.490
Let's call this Bufford output and we're gonna have to convert this byte stream into the

00:08:30.490 --> 00:08:47.260
character stream Output stream writer new or put stream writer and we're gonna pass in the

00:08:47.260 --> 00:08:54.410
byte stream object and finally we're gonna have.

00:08:54.410 --> 00:09:11.410
But for a writer new before writer and the past are put stream writer object,

00:09:11.410 --> 00:09:15.450
which is a character stream character or put stream,

00:09:15.450 --> 00:09:23.900
and now we can just simply use this before writer to write the data into the file.

00:09:23.900 --> 00:09:29.350
It said the file and run the program.

00:09:29.350 --> 00:09:32.550
Let's go to the stop and hear this.

00:09:32.550 --> 00:09:33.370
Well,

00:09:33.370 --> 00:09:34.150
that's funny.

00:09:34.150 --> 00:09:37.310
I guess we have to flush the data.

00:09:37.310 --> 00:09:39.210
Let's do that.

00:09:39.210 --> 00:09:46.730
But for writer dot flush,

00:09:46.730 --> 00:09:50.850
This is what will actually dump all the daring to the file.

00:09:50.850 --> 00:09:59.300
Let's save it and run the program hair it is.

00:09:59.300 --> 00:10:03.520
You may ask me why we have everything under one line.

00:10:03.520 --> 00:10:06.550
It's not actually having everything under one line.

00:10:06.550 --> 00:10:08.170
Basically,

00:10:08.170 --> 00:10:10.140
the real and method well,

00:10:10.140 --> 00:10:13.060
actually omit the new line character.

00:10:13.060 --> 00:10:17.470
If you take a look at the job our dogs and see the description off what the new land

00:10:17.470 --> 00:10:18.550
mattered were written.

00:10:18.550 --> 00:10:20.150
This is what it tastes.

00:10:20.150 --> 00:10:25.080
A string containing the contents off the line,

00:10:25.080 --> 00:10:28.350
not including the line termination character.

00:10:28.350 --> 00:10:29.640
Or now,

00:10:29.640 --> 00:10:31.850
if the end of the stream has been reached,

00:10:31.850 --> 00:10:35.950
and that's why we got everything under a single line,

00:10:35.950 --> 00:10:38.250
no going back to our example,

00:10:38.250 --> 00:10:42.250
we can always increase the size off the buffer.

00:10:42.250 --> 00:10:45.450
You just have to provide another argument.

00:10:45.450 --> 00:10:52.900
The default size off the before used by the but for reader is 8192 characters.

00:10:52.900 --> 00:10:53.800
However,

00:10:53.800 --> 00:10:57.730
we can configure the size off the buffer to any size we want.

00:10:57.730 --> 00:11:02.920
So all you have to do to increase the bumper size is to send in another argument to the

00:11:02.920 --> 00:11:03.780
constructor.

00:11:03.780 --> 00:11:04.590
Basically,

00:11:04.590 --> 00:11:11.440
the amount off bites off buffer you'd need and always keep in mind has a good practice.

00:11:11.440 --> 00:11:13.850
Instead of typing in some number,

00:11:13.850 --> 00:11:23.430
try to type in in the multiples off 1024 because it makes 1024 bites to make one K B off

00:11:23.430 --> 00:11:23.950
memory.

00:11:23.950 --> 00:11:27.280
And if you gyu multiples off eight,

00:11:27.280 --> 00:11:30.980
that means we're gonna have the buffer off size eight KB.

00:11:30.980 --> 00:11:34.250
The program will run just as before.

00:11:34.250 --> 00:11:40.790
Let's close the file and re open it pretty well and good.

00:11:40.790 --> 00:11:42.980
All right,

00:11:42.980 --> 00:11:44.350
that's it for this video.

00:11:44.350 --> 00:11:45.780
Thanks for watching

