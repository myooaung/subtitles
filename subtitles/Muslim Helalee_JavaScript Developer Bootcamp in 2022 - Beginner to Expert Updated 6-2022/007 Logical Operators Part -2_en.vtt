WEBVTT
1
00:00:00.680 --> 00:00:01.520
Hi, everyone.

2
00:00:01.550 --> 00:00:07.820
In this lecture, we are going to talk about the illogical or and illogical not operators.

3
00:00:09.040 --> 00:00:13.010
All right, so we have covered the logical end operator.

4
00:00:13.330 --> 00:00:20.380
Now it's time to cover the logical owner, operator, dialogical or operator has a simple of a symbol

5
00:00:20.380 --> 00:00:26.530
of double pipe characters and the character on top of my keyboard, in my keyboard.

6
00:00:26.530 --> 00:00:29.290
It's on top of the entire key or the return key.

7
00:00:30.160 --> 00:00:30.570
All right.

8
00:00:30.790 --> 00:00:37.420
And what what this logical operator does is we have to boolean expressions, OK, at least we should

9
00:00:37.420 --> 00:00:38.920
have to boolean expressions.

10
00:00:39.130 --> 00:00:46.430
And when one of the boolean expressions evaluates to true, this operator is going to return.

11
00:00:46.430 --> 00:00:46.960
True.

12
00:00:47.380 --> 00:00:49.660
Whatever logic that we have.

13
00:00:49.720 --> 00:00:50.050
All right.

14
00:00:50.260 --> 00:00:52.650
So let's go ahead and let's take a look at it.

15
00:00:52.780 --> 00:00:53.560
I'm just going to go ahead.

16
00:00:53.570 --> 00:00:54.940
I'm going to say example one.

17
00:00:56.340 --> 00:01:08.430
This is the logical or operator and we're going to say if F two is greater than one and or this is or

18
00:01:08.520 --> 00:01:12.330
this is the or operator and five is less than seven.

19
00:01:12.780 --> 00:01:13.230
Right.

20
00:01:14.690 --> 00:01:18.710
So we are going to take a look at this one.

21
00:01:20.350 --> 00:01:25.720
I'm just going to go ahead, I'm going to change this to three, because I want one side of this boolean

22
00:01:25.720 --> 00:01:30.520
expression to return false so we can see how this operator works.

23
00:01:30.800 --> 00:01:33.190
OK, and we are going to print to the console.

24
00:01:33.700 --> 00:01:36.610
We are going to log to the console success.

25
00:01:37.480 --> 00:01:38.060
Let's save it.

26
00:01:38.230 --> 00:01:39.840
And we can see success here.

27
00:01:40.360 --> 00:01:47.410
And now let's go over the syntax so we have our if statement and deconditioned part of the statement

28
00:01:47.410 --> 00:01:51.580
we have if two is greater than three, this is incorrect.

29
00:01:51.610 --> 00:01:57.440
So this boolean expression returns false or five is less than seven.

30
00:01:57.460 --> 00:02:00.040
This boolean expression returns true.

31
00:02:00.280 --> 00:02:07.150
So one side of this operator is true, which is this side and the other side of the operator is false.

32
00:02:07.390 --> 00:02:12.460
But still, because this is the logical or operator is it is going to return.

33
00:02:12.460 --> 00:02:12.850
True.

34
00:02:13.060 --> 00:02:14.860
It is going to run our code.

35
00:02:15.060 --> 00:02:15.340
All right.

36
00:02:15.520 --> 00:02:17.260
Let's go over one more example.

37
00:02:18.420 --> 00:02:25.080
These are really, really simple example to ex maple wrong tree.

38
00:02:27.280 --> 00:02:32.770
All right, so in here, what I'm gonna do is I'm going to create an if statement and the statement

39
00:02:32.770 --> 00:02:41.050
we are going to say 10 is greater than eight or or eight is greater than five.

40
00:02:41.260 --> 00:02:42.380
OK, five.

41
00:02:43.420 --> 00:02:48.610
And we are going to print to the console our previous message, which is success.

42
00:02:48.970 --> 00:02:51.370
And now you guys can see that it says eight.

43
00:02:51.380 --> 00:02:53.080
A ten is greater than it.

44
00:02:53.290 --> 00:02:55.190
This part is true.

45
00:02:55.300 --> 00:02:55.690
Right.

46
00:02:55.810 --> 00:02:58.440
And this part says eight is greater than five.

47
00:02:58.690 --> 00:03:00.340
And this part is true as well.

48
00:03:00.490 --> 00:03:02.800
And we can see that the code has run.

49
00:03:03.040 --> 00:03:13.600
So for us to get a true return, a return of true from a logical or operator, at least one side of

50
00:03:13.600 --> 00:03:17.080
that operator should evaluate to true and even both.

51
00:03:17.080 --> 00:03:21.860
And if both sides of the operator they evaluate to true, we are still going to get that.

52
00:03:22.050 --> 00:03:26.500
OK, so this is how the logical or operator works.

53
00:03:26.740 --> 00:03:34.480
Now, let's go ahead and let's talk about the logical, not the logical and not operator.

54
00:03:36.660 --> 00:03:45.360
All right, and the symbol for this one is, I'm sure I should put it right here, it's just an exclamation

55
00:03:45.360 --> 00:03:45.620
mark.

56
00:03:45.960 --> 00:03:54.240
Now, this exclamation mark works in the same way as we had for a Renana quality operators.

57
00:03:54.420 --> 00:03:58.940
We had the non-equity quality operator and we had the strict nanny quality operator.

58
00:03:59.130 --> 00:04:07.650
It works in the same way, OK, it returns true if the expression, if any expression is false.

59
00:04:08.220 --> 00:04:14.750
So for this operator to run our code, the expression should be incorrect.

60
00:04:14.760 --> 00:04:15.850
It should be false.

61
00:04:16.170 --> 00:04:16.579
All right.

62
00:04:17.040 --> 00:04:18.750
So let's go ahead and let's see.

63
00:04:19.019 --> 00:04:26.430
Let's create a variable variable of temperature and you're going to set it to 22 degrees C or Fahrenheit.

64
00:04:27.060 --> 00:04:30.030
OK, I'm just going to say C Celsius.

65
00:04:30.210 --> 00:04:35.220
Now, F temperature is equal to 20.

66
00:04:36.270 --> 00:04:39.240
F temperature is equal to 20 percent of log.

67
00:04:40.710 --> 00:04:41.460
Really.

68
00:04:42.090 --> 00:04:45.270
OK, just consider like really let's say it.

69
00:04:45.630 --> 00:04:52.110
And then we can see we don't see anything in the console because temperature has a value of 22.

70
00:04:52.290 --> 00:04:58.110
But here the condition says F temperature is equal to 20, then run this code.

71
00:04:58.350 --> 00:04:58.710
Right.

72
00:05:00.150 --> 00:05:08.280
Now, what if I put the logical nonoperating here now this expression is false, right, because temperature

73
00:05:08.280 --> 00:05:10.750
is not going to be equal to 20.

74
00:05:10.830 --> 00:05:11.160
All right.

75
00:05:11.310 --> 00:05:15.660
When the temperature is not equal to 20, we want to run this.

76
00:05:15.840 --> 00:05:16.190
All right.

77
00:05:16.200 --> 00:05:23.370
When I save it, when I say that we should be able to see it, which we don't, because the this expression

78
00:05:23.370 --> 00:05:24.780
is false by default.

79
00:05:24.910 --> 00:05:29.130
And when we put another false in front of it, then it is double minus.

80
00:05:29.310 --> 00:05:32.970
Double minus is going to result in a plus, which is not something that we want.

81
00:05:33.180 --> 00:05:39.210
So let's put it to 20 and we should be able to see our code in here.

82
00:05:40.530 --> 00:05:47.400
And the problem is, I think that this should be inside parenthesis parentheses, because this expression

83
00:05:47.640 --> 00:05:55.850
should be applied, this this logical operators are not expression should be applied on this whole condition

84
00:05:55.860 --> 00:06:01.950
when we say what we are going to see, really, because in here, it's such temperature is 20.

85
00:06:02.160 --> 00:06:02.490
All right.

86
00:06:02.640 --> 00:06:05.730
But in here we have temperature is actually 22.

87
00:06:05.910 --> 00:06:08.270
So temperature is not equal to 20.

88
00:06:08.460 --> 00:06:14.540
So how can we return this plus statement or positive statement?

89
00:06:14.730 --> 00:06:17.040
How can we turn it into a negative statement?

90
00:06:17.220 --> 00:06:19.280
We just add a negative in the front of it.

91
00:06:19.530 --> 00:06:23.780
So it says when temperature is not equal to 20 percent, this one.

92
00:06:24.180 --> 00:06:24.540
All right.

93
00:06:24.790 --> 00:06:26.820
And we see it says really?

94
00:06:27.330 --> 00:06:27.700
All right.

95
00:06:27.840 --> 00:06:31.110
So this is how the logical not operator works.

96
00:06:31.290 --> 00:06:37.290
It works when the statement is false, when the statement is false, then we are going to see that it

97
00:06:37.290 --> 00:06:37.530
works.

98
00:06:37.770 --> 00:06:40.200
Let's put it to 20 and let's take a look at it.

99
00:06:40.980 --> 00:06:43.740
And now you can see the temperature is 20.

100
00:06:43.920 --> 00:06:47.970
But in here, in here, we also say that the temperature is 20.

101
00:06:48.360 --> 00:06:56.280
And this logical not operator says when the temperature is not 20, but the variable says that the temperature

102
00:06:56.280 --> 00:06:56.930
is 20.

103
00:06:57.180 --> 00:07:03.720
So this is sort of like a paradoxical idea, the temperature when the temperature is not equal to 20,

104
00:07:04.170 --> 00:07:05.760
but in here it says 20.

105
00:07:05.910 --> 00:07:11.470
So if you put it to any value other than to any, we should be able to see our concerns low.

106
00:07:11.670 --> 00:07:13.890
So let's take a look at 54.

107
00:07:14.070 --> 00:07:15.810
Let's put it to 110.

108
00:07:16.140 --> 00:07:18.310
Let's put it to, I don't know, like 19.

109
00:07:18.510 --> 00:07:26.100
So in any other condition, we are going to see except for 20, because in 20, this operator is not

110
00:07:26.100 --> 00:07:27.270
going to return.

111
00:07:27.840 --> 00:07:28.320
True.

112
00:07:28.320 --> 00:07:30.210
It is going to return false.

113
00:07:30.390 --> 00:07:32.940
OK, because this is a not operator.

114
00:07:34.300 --> 00:07:38.050
Let's put it to 22 once more, so that's it for this lecture.

115
00:07:38.170 --> 00:07:40.120
See you guys in the next one.

