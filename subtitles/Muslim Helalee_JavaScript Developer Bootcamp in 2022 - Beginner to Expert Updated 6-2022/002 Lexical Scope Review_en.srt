1
00:00:02,400 --> 00:00:03,280
Hi, everyone.

2
00:00:03,300 --> 00:00:07,650
In this lecture, we are going to go over the lexical scope one more time.

3
00:00:09,080 --> 00:00:17,000
All right, so the reason that I'm reviewing this lexical scope is because for our next two lectures

4
00:00:17,000 --> 00:00:23,420
in this chapter, we are going to talk about the function scope one more time and also the EFFI pattern,

5
00:00:23,720 --> 00:00:26,240
the immediately invoked function expression.

6
00:00:27,200 --> 00:00:33,410
And also we are going to talk about the block scoping finally the block, scoping the scope, which

7
00:00:33,410 --> 00:00:39,020
was newly created in starting the E 2015 version of JavaScript.

8
00:00:39,710 --> 00:00:40,070
All right.

9
00:00:40,070 --> 00:00:51,890
So lexical scope is this idea that there are two stages to running a program, OK, inside the browser,

10
00:00:51,890 --> 00:00:54,020
running an application inside the browser.

11
00:00:54,500 --> 00:01:04,010
So the idea of scoping being nested in each other, which are decided at compile time, not a runtime.

12
00:01:04,310 --> 00:01:12,800
And also the idea and secondly, the idea of a compiler or parser like the idea that a compiler or parser

13
00:01:12,800 --> 00:01:17,410
is figuring out all the scope's before code execution happens.

14
00:01:17,990 --> 00:01:24,830
So the compiler is going to go ahead and grab all the formal declarations in here like this line line

15
00:01:24,830 --> 00:01:30,800
number one, line number three, and then line number four, line number six.

16
00:01:31,280 --> 00:01:32,520
And that's it.

17
00:01:32,540 --> 00:01:39,840
So all these four formal declarations and it is going to contact the scope manager for their scope's.

18
00:01:40,130 --> 00:01:48,020
The scope manager is going to specify that this war movie has a scope of global scope or like the global

19
00:01:48,020 --> 00:01:48,620
box.

20
00:01:49,220 --> 00:01:54,290
The other movie also has the global also is present inside the global box.

21
00:01:55,130 --> 00:01:59,820
This VAR movie isn't is present inside the other movie box.

22
00:02:00,410 --> 00:02:06,680
This again movie declaration is also present inside this this other movie box.

23
00:02:07,130 --> 00:02:09,740
And after that we have no formal declarations.

24
00:02:09,740 --> 00:02:11,850
The compilation is done then.

25
00:02:12,110 --> 00:02:18,330
Now this stage of compilation, this happens very, very fast and it is usually transparent.

26
00:02:18,350 --> 00:02:20,420
This is like actually transparent.

27
00:02:20,540 --> 00:02:23,000
You can see it, we can understand it.

28
00:02:23,010 --> 00:02:28,550
We know that there is a compilation stage, but we don't see it actually like running and asking all

29
00:02:28,550 --> 00:02:29,360
these questions.

30
00:02:29,360 --> 00:02:30,060
Of course not.

31
00:02:30,620 --> 00:02:38,450
And then when we get to co-generation, we grab this like we first specify whether and a declaration

32
00:02:38,450 --> 00:02:43,730
is a target reference, a variable is a target reference or it is a source reference.

33
00:02:44,150 --> 00:02:48,770
If it is a target of reference, you are going to grab the value and store it inside the like.

34
00:02:48,770 --> 00:02:53,690
We are going to allocate a small like a space in memory.

35
00:02:53,690 --> 00:02:59,690
If it is a source reference, we are going to trace it to the source, which is right here, and then

36
00:02:59,690 --> 00:03:01,230
we are going to go over that.

37
00:03:01,580 --> 00:03:08,210
So if the source is a function, then we need to create another like scope for that.

38
00:03:08,210 --> 00:03:14,780
Even though the scope is created, we need to allocate a different portion in memory for this function

39
00:03:14,780 --> 00:03:21,050
because this is present inside a different scope, this variable declaration and this function.

40
00:03:21,080 --> 00:03:21,420
Right.

41
00:03:21,650 --> 00:03:23,320
So this is actually how it works.

42
00:03:23,570 --> 00:03:27,650
There is another kind of scope as well, and that is the dynamic scope.

43
00:03:27,890 --> 00:03:31,970
That is not what JavaScript is, not a dynamically scope language.

44
00:03:31,970 --> 00:03:40,370
It is a lexically scoped language, a right and well, dynamically scoped languages that are not that

45
00:03:40,370 --> 00:03:50,970
common, like languages like Perl and com unless they allow you to switch between the static scope,

46
00:03:51,230 --> 00:03:54,650
static scope and dynamic scope.

47
00:03:55,250 --> 00:03:58,490
And they're not actually that common.

48
00:03:58,760 --> 00:04:01,940
So JavaScript is lexically scoped language.

49
00:04:01,940 --> 00:04:05,720
And this is how we would like to think that this code is generated.

50
00:04:05,960 --> 00:04:09,170
Well, not that this is how actually the code is generated.

51
00:04:09,180 --> 00:04:09,530
Right.

52
00:04:09,980 --> 00:04:13,040
So this is going to be it for this lecture.

53
00:04:13,040 --> 00:04:15,620
But before wrapping up, let's go ahead and let's save it.

54
00:04:15,620 --> 00:04:19,190
We get our error because we talked about this code since before.

55
00:04:20,600 --> 00:04:30,050
We know that, again, movie belongs to this to the scope of this other movie function or box, if you

56
00:04:30,050 --> 00:04:30,340
will.

57
00:04:30,710 --> 00:04:31,100
All right.

58
00:04:31,250 --> 00:04:34,700
And it is accessible only within that scope.

59
00:04:34,700 --> 00:04:37,790
It is not accessible outside that scope.

60
00:04:38,000 --> 00:04:41,330
That's why we see an error at line fourteen.

61
00:04:41,720 --> 00:04:43,550
So this is going to be it for this year.

62
00:04:43,550 --> 00:04:51,080
And the next lecture, we are going to talk about the function scope and the EFFI pattern and why we

63
00:04:51,440 --> 00:04:55,160
why we should use Effi and where we should use it.

64
00:04:55,430 --> 00:04:55,820
Right.

65
00:04:56,060 --> 00:04:58,160
So see you guys in the next lecture.

