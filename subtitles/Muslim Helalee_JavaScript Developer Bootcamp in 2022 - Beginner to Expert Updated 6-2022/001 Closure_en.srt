1
00:00:02,130 --> 00:00:03,090
Hi, everyone.

2
00:00:03,180 --> 00:00:06,030
In this lecture, we're going to talk about closure.

3
00:00:07,900 --> 00:00:16,300
All right, so what is closure and why do we need to talk about it now, the idea of closure predates

4
00:00:16,300 --> 00:00:17,690
computer science itself.

5
00:00:17,710 --> 00:00:22,070
It actually came to us from Lambda Calculus.

6
00:00:23,050 --> 00:00:28,180
Now, to be able to understand closure, we need a firm understanding of the lexical scope.

7
00:00:28,180 --> 00:00:32,229
And as of now, we do have that firm understanding.

8
00:00:32,650 --> 00:00:38,870
Now let's dive into a proper definition of closure that makes sense in the context of jobs.

9
00:00:39,430 --> 00:00:40,540
Now, what is closure?

10
00:00:40,570 --> 00:00:45,900
Closure is when a function is able to remember and access its lexical scope.

11
00:00:46,240 --> 00:00:46,630
All right.

12
00:00:46,930 --> 00:00:50,650
Even when that function executes in a different scope.

13
00:00:51,100 --> 00:00:51,690
Now what?

14
00:00:51,900 --> 00:00:53,110
What do I mean by that?

15
00:00:53,410 --> 00:00:56,490
So let's go over an example right now.

16
00:00:56,500 --> 00:00:58,030
Let's say we have a function.

17
00:00:58,420 --> 00:01:00,180
The function is called book.

18
00:01:00,220 --> 00:01:02,830
The Identifier for the function is book.

19
00:01:03,310 --> 00:01:05,860
And I just passed it in name parameter.

20
00:01:06,280 --> 00:01:07,900
And what does this function is going to?

21
00:01:07,900 --> 00:01:12,490
This function is going to implement a set time out.

22
00:01:12,980 --> 00:01:20,620
And in here I'm going to create another function and I'm going to call it, let's say, other book.

23
00:01:21,790 --> 00:01:28,780
OK, and I'm not going to pass in any parameter, what I'm going to pass is so that said, the time

24
00:01:28,780 --> 00:01:34,930
out to 500 milliseconds, why are we going to passan is a console lock, right?

25
00:01:35,050 --> 00:01:35,990
And I'm going to say no.

26
00:01:36,340 --> 00:01:41,230
So now keep in mind that this console log is actually inside this function, right?

27
00:01:41,440 --> 00:01:42,850
So it's inside this function.

28
00:01:43,990 --> 00:01:53,860
Now, the idea of closure states that if the function other book can access the this name parameter

29
00:01:54,190 --> 00:02:01,510
from the from its parent to all the way to hear and execute it to the console, then it would mean that

30
00:02:01,510 --> 00:02:04,280
this is closure and closure actually exists.

31
00:02:04,570 --> 00:02:08,919
So let's go ahead and let's call the outer function.

32
00:02:08,919 --> 00:02:12,300
And I'm just going to say the two towers.

33
00:02:13,210 --> 00:02:17,200
And when I save it, we can see that we get the two towers here.

34
00:02:17,230 --> 00:02:17,620
Right.

35
00:02:17,890 --> 00:02:25,150
There was a little lag because that was half a second had to pass for this console log to work.

36
00:02:25,420 --> 00:02:26,610
That that's why we did.

37
00:02:26,620 --> 00:02:31,120
We saw like a little bit of lag there right now.

38
00:02:31,990 --> 00:02:37,600
What happens in here is this function, this book function has just completed.

39
00:02:37,870 --> 00:02:45,610
And after it runs, even though the book function is executed, is compiled away, then this other book

40
00:02:45,610 --> 00:02:46,420
function runs.

41
00:02:46,630 --> 00:02:52,630
So typically, we shouldn't have access to this name for a while because it has already completed,

42
00:02:52,990 --> 00:02:55,660
but because closure preserved it.

43
00:02:55,810 --> 00:02:59,300
We do have access to that name variable right now.

44
00:02:59,300 --> 00:03:06,160
You have to keep in mind that JavaScript engines essentially implement closure as a linkage to the entire

45
00:03:06,160 --> 00:03:09,520
scope, not on a per variable basis.

46
00:03:09,730 --> 00:03:15,880
So it is best to assume that closure, even though academically it's per variable, it is best to assume

47
00:03:15,880 --> 00:03:18,250
closure is a skill based operation.

48
00:03:18,610 --> 00:03:26,950
And it is not something you have to do special with a function other than you just have to access a

49
00:03:26,950 --> 00:03:30,550
variable outside and then you have to pass the function somewhere.

50
00:03:30,880 --> 00:03:35,850
That's all you have to do to observe the idea that closure exists.

51
00:03:36,220 --> 00:03:40,410
Think about what it would be like if you had a function that didn't have closure.

52
00:03:40,840 --> 00:03:47,320
Like if you are in a language that had first class functions such as JavaScript and lexical scope,

53
00:03:47,530 --> 00:03:53,350
again, such as JavaScript, but didn't have closure, you'd pass this function somewhere else.

54
00:03:53,350 --> 00:03:54,610
And all of the sudden.

55
00:03:55,590 --> 00:04:01,980
It would forget all about its variables if you have a lexical if you have lexical scope on first class

56
00:04:01,980 --> 00:04:08,040
functions, you're going to have you're going to have to have closure because it wouldn't make sense.

57
00:04:08,040 --> 00:04:09,370
Not right.

58
00:04:09,600 --> 00:04:12,150
So let's go over another example as well.

59
00:04:12,150 --> 00:04:14,920
And this is going to be the last example in this lecture.

60
00:04:16,800 --> 00:04:17,630
Come on, buddy.

61
00:04:18,000 --> 00:04:19,390
Example number two.

62
00:04:19,649 --> 00:04:24,810
So what are we to do in this example as I'm going to create a function called Aske?

63
00:04:25,320 --> 00:04:34,440
So let's say ask and I'm going to pass in a question as a parameter and this function is going to return

64
00:04:34,440 --> 00:04:35,640
another function.

65
00:04:36,750 --> 00:04:39,690
That is going to be other question.

66
00:04:41,100 --> 00:04:43,350
I'm not going to pass in any parameter in here.

67
00:04:43,650 --> 00:04:45,860
I'm just going to say Kansa log.

68
00:04:46,020 --> 00:04:54,750
Now, what I'm going to do is I'm going to access the question, the question variable parameter from

69
00:04:54,750 --> 00:04:55,150
here.

70
00:04:55,200 --> 00:04:55,490
Right.

71
00:04:55,980 --> 00:05:00,360
So what this is going to do is whenever I call this aske function.

72
00:05:00,540 --> 00:05:00,900
All right.

73
00:05:01,020 --> 00:05:05,510
And Passan an argument, so let's call it let's pass in an argument.

74
00:05:05,970 --> 00:05:12,150
This argument is going to get passed inside this parameter instead of this parameter, and then it is

75
00:05:12,150 --> 00:05:13,380
going to be passed in here.

76
00:05:13,590 --> 00:05:21,360
If this this process is completed, the way that I explained it, then it would mean that we do have

77
00:05:21,360 --> 00:05:22,680
closure in JavaScript.

78
00:05:23,100 --> 00:05:23,520
Right.

79
00:05:23,820 --> 00:05:28,160
So let's go ahead on the story inside another variable.

80
00:05:28,170 --> 00:05:29,160
My question.

81
00:05:29,880 --> 00:05:30,300
Right.

82
00:05:30,300 --> 00:05:32,310
And that's call my question.

83
00:05:32,310 --> 00:05:33,780
My question.

84
00:05:34,820 --> 00:05:39,660
And when I say it, we can see that we get really first and then we get the two towers.

85
00:05:39,950 --> 00:05:45,340
The reason that this happens is because time out, that is actually an asynchronous method.

86
00:05:46,220 --> 00:05:47,670
But I don't want to talk about it here.

87
00:05:47,690 --> 00:05:55,640
We are going to cover asynchronous programming after we are done with the object oriented programming.

88
00:05:55,720 --> 00:05:58,250
OK, so I don't want to talk about it.

89
00:05:58,280 --> 00:06:03,250
I don't want to dive into why this really came first and then the two towers.

90
00:06:03,620 --> 00:06:08,990
But what what what I do want to talk about is this scope, this function.

91
00:06:08,990 --> 00:06:09,980
Other question.

92
00:06:09,980 --> 00:06:17,210
It has access to the variable question which comes from this parameter and the value for it passed into

93
00:06:17,420 --> 00:06:20,420
this function call as an argument.

94
00:06:20,780 --> 00:06:26,480
So even though this asked question, it has compiled data, it has run, it is done, it is completed.

95
00:06:26,840 --> 00:06:29,900
We still have access to this question.

96
00:06:30,360 --> 00:06:30,710
All right.

97
00:06:30,950 --> 00:06:39,170
The reason for that is because JavaScript has closure and closure that preserves this question variable

98
00:06:39,180 --> 00:06:40,460
so we can access it.

99
00:06:41,060 --> 00:06:41,420
Right.

100
00:06:42,320 --> 00:06:45,440
So this is going to be at for this lecture.

101
00:06:45,440 --> 00:06:47,690
And I'm sure that you understood closure.

102
00:06:47,930 --> 00:06:50,260
Here is the link to Emdin Page.

103
00:06:50,360 --> 00:06:56,710
You can go ahead and read more about it and like dive into more advanced examples there.

104
00:06:57,080 --> 00:07:01,250
So there is going to be one more lecture in this chapter.

105
00:07:01,490 --> 00:07:05,660
And I just want to talk about what closing over variables mean.

106
00:07:05,730 --> 00:07:06,020
Right.

107
00:07:06,290 --> 00:07:08,630
So see you guys in the next lecture.

