WEBVTT
1
00:00:01.530 --> 00:00:07.860
Hi, everyone, in this next year, we are going to talk about the return key word for functions.

2
00:00:09.090 --> 00:00:17.250
All right, so what is this return key word that that needs a dedicated lecture, so the return key

3
00:00:17.250 --> 00:00:19.290
word calculates something.

4
00:00:19.860 --> 00:00:23.130
It processes the code that we pass into it.

5
00:00:23.850 --> 00:00:25.500
They end the function.

6
00:00:25.530 --> 00:00:35.100
Now, the cool thing about the return key word is that not not no line of code is going to run after

7
00:00:35.130 --> 00:00:36.140
the return key.

8
00:00:36.960 --> 00:00:37.260
All right.

9
00:00:37.380 --> 00:00:42.510
So the return key key word is always going to be the end of any function.

10
00:00:42.630 --> 00:00:44.780
It says like, wrap everything up.

11
00:00:44.970 --> 00:00:46.140
We are done here.

12
00:00:46.420 --> 00:00:46.790
Right?

13
00:00:46.800 --> 00:00:47.780
It's sort of like that.

14
00:00:48.000 --> 00:00:51.600
So let's go ahead and let's take a look at the key word.

15
00:00:51.600 --> 00:00:53.540
And in practice.

16
00:00:53.850 --> 00:00:59.640
So in the first example, what I'm going to do is I'm going to create a function if I can.

17
00:01:00.420 --> 00:01:01.970
Why what?

18
00:01:03.030 --> 00:01:03.440
Right.

19
00:01:03.450 --> 00:01:10.620
So in here in the function name, I'm just going to call it some in the parameters or programs.

20
00:01:11.100 --> 00:01:12.770
I'm just going to pass in A and B..

21
00:01:13.170 --> 00:01:15.360
So what do I want this function to do?

22
00:01:15.370 --> 00:01:19.550
I want this function to return A plus B.

23
00:01:19.590 --> 00:01:21.060
Yes, that's right.

24
00:01:21.420 --> 00:01:25.410
For to write the return to where you just try to return that set.

25
00:01:26.640 --> 00:01:29.520
So now this function has a return something.

26
00:01:30.030 --> 00:01:31.890
But why don't we see anything?

27
00:01:31.890 --> 00:01:34.220
Because we haven't called the function yet.

28
00:01:34.740 --> 00:01:38.450
So calling the function is the same, has the same ideology.

29
00:01:38.460 --> 00:01:45.610
We should always call the function if we want the function to perform its task, whatever that may be.

30
00:01:46.350 --> 00:01:53.520
So we are going to say console does log and we are going to call the sum function and we are going to

31
00:01:53.520 --> 00:01:55.130
pass in two arguments.

32
00:01:55.320 --> 00:01:57.190
So it's going to be 10 and 12.

33
00:01:57.210 --> 00:02:00.500
So when I say that, we are going to see twenty two in here.

34
00:02:00.820 --> 00:02:01.290
All right.

35
00:02:02.560 --> 00:02:10.000
So if I were if I were to go ahead and if I were to say another consultor log here and I would say like

36
00:02:10.690 --> 00:02:13.780
15 plus 22 and I know save it.

37
00:02:14.380 --> 00:02:17.910
Now, where is this concern like you guys can see?

38
00:02:18.060 --> 00:02:23.230
I'm not sure if you if you can see it, but it's actually a bit faded out.

39
00:02:23.230 --> 00:02:25.270
It's, you know, a bit transparent.

40
00:02:25.270 --> 00:02:26.950
I would see the opacity is lower.

41
00:02:27.400 --> 00:02:34.930
It's it's not as bright as this one because this consider log this piece of code, it comes after the

42
00:02:34.930 --> 00:02:37.660
return to work and after the return.

43
00:02:37.660 --> 00:02:41.050
Nothing is going to run if it is after the return.

44
00:02:41.650 --> 00:02:47.950
It doesn't matter how many lines of code you have here, even if you have like like tens of tens of

45
00:02:47.950 --> 00:02:53.830
lines of code, it doesn't matter when the return to work and the code ends right there.

46
00:02:54.250 --> 00:02:54.640
Right.

47
00:02:55.940 --> 00:03:02.390
So this is the first example and I want to show you one more thing, that we can capture the results

48
00:03:02.390 --> 00:03:06.170
of a function and store it inside another variable.

49
00:03:06.500 --> 00:03:13.340
Now, that is a common thing that that we would do in our applications, because when a function calculates

50
00:03:13.340 --> 00:03:18.580
something, we want to grab that calculated value and do something with it.

51
00:03:18.830 --> 00:03:21.590
We want to apply some logic to it.

52
00:03:21.620 --> 00:03:26.470
OK, we just want we just don't want it to be shown on the console.

53
00:03:26.630 --> 00:03:28.340
That is not the thing that we want.

54
00:03:28.490 --> 00:03:30.950
We wanted to do something for us.

55
00:03:30.980 --> 00:03:32.710
We want to do something on it.

56
00:03:33.050 --> 00:03:36.110
So we should be able to access that value.

57
00:03:36.120 --> 00:03:38.090
So we have a value of twenty two.

58
00:03:38.300 --> 00:03:41.720
How can we store that value of twenty two.

59
00:03:41.720 --> 00:03:42.760
And I'm going to show you how.

60
00:03:43.040 --> 00:03:45.730
So we are going to say some numbers.

61
00:03:45.770 --> 00:03:52.700
So this is another variable and I'm going to set it equal to the sum function whose parent whose arguments

62
00:03:52.700 --> 00:03:53.920
are 10 and 12.

63
00:03:53.930 --> 00:03:56.780
And I'm going to comment about this part now.

64
00:03:56.990 --> 00:04:03.110
We have successfully with just one line of code, have captured the result of this function and why

65
00:04:03.110 --> 00:04:05.780
we can see it, because we have not consider login.

66
00:04:06.080 --> 00:04:11.840
So if I were to go ahead and say consider log, but this time I'm not going to call the function, I'm

67
00:04:11.840 --> 00:04:12.620
just going to pass.

68
00:04:12.620 --> 00:04:14.750
And the variable name we are going to see.

69
00:04:14.750 --> 00:04:15.330
Twenty two.

70
00:04:16.029 --> 00:04:16.399
All right.

71
00:04:16.579 --> 00:04:22.360
Because the this function has been called as a value for this variable.

72
00:04:22.960 --> 00:04:23.270
Right.

73
00:04:23.360 --> 00:04:29.210
And when you call the variable, the variable has successfully captured the value of this function.

74
00:04:29.420 --> 00:04:31.640
That's why we can see 22 right here.

75
00:04:32.240 --> 00:04:34.690
So I just wanted to talk about this as well.

76
00:04:35.150 --> 00:04:35.440
Right.

77
00:04:35.480 --> 00:04:39.140
So now let's go ahead and let's talk about the second example.

78
00:04:40.320 --> 00:04:46.290
All right, so in the second example, what I'm going to do is I'm going to pass in an F statement,

79
00:04:46.470 --> 00:04:51.070
as a code, as a block of code for a function.

80
00:04:51.270 --> 00:04:56.820
So let's go ahead and let's write function and let's give it a name, because I want this function to

81
00:04:56.820 --> 00:05:01.620
portray like a real world kind of situation, sort of a real word.

82
00:05:01.620 --> 00:05:09.630
But it's not going to be a complete application because we have not arrived at our like projects for

83
00:05:09.630 --> 00:05:10.530
discourse yet.

84
00:05:10.530 --> 00:05:11.530
We are going to get there.

85
00:05:11.550 --> 00:05:12.000
All right.

86
00:05:12.980 --> 00:05:15.290
So we are going to say check core.

87
00:05:17.180 --> 00:05:23.210
Chick score, right, and in here, we are going to pass on to our two parameters, so we're going to

88
00:05:23.210 --> 00:05:31.370
stay current with another our current score and you guys can see the camel casing in here.

89
00:05:31.670 --> 00:05:35.810
The second word's first letterer has been capitalized.

90
00:05:36.260 --> 00:05:36.620
Right.

91
00:05:36.770 --> 00:05:39.370
And we are going to say a passing score.

92
00:05:39.650 --> 00:05:49.340
We are going to check whether a student has the current score of any student is enough to be able for

93
00:05:49.340 --> 00:05:55.160
that student to be able to pass or if the or when the student cannot pass, we're just going to say

94
00:05:55.160 --> 00:05:55.520
fail.

95
00:05:56.240 --> 00:06:00.380
So in here, we are going to implement an if statement because we have a condition.

96
00:06:00.740 --> 00:06:08.270
We have the current score is either equal to or greater than the passing score we want to present to

97
00:06:08.270 --> 00:06:09.620
the council passed.

98
00:06:09.860 --> 00:06:15.170
And when this and in any other in any other scenario we want to say failed.

99
00:06:15.710 --> 00:06:21.060
So if the current score is less than the passing score, the student has simply failed.

100
00:06:21.080 --> 00:06:21.920
Unfortunately.

101
00:06:23.170 --> 00:06:31.480
So we are going to say current score is greater than or equal to passing score if if the current score

102
00:06:31.480 --> 00:06:35.260
is equal to or greater than the passing score, what do we want to do?

103
00:06:35.290 --> 00:06:40.330
We want to say return, return a string.

104
00:06:40.330 --> 00:06:42.010
And the string says past.

105
00:06:43.370 --> 00:06:45.960
So so this is our condition.

106
00:06:46.010 --> 00:06:49.040
What if the current score is less than the passing score?

107
00:06:49.400 --> 00:06:49.780
All right.

108
00:06:49.940 --> 00:06:56.660
So for that, we are going to add an ounce statement and in any other scenario, we want to pass in.

109
00:06:57.950 --> 00:07:05.070
Failed, let's save it now, we don't see anything but because for one, we have not called the function

110
00:07:05.070 --> 00:07:12.320
and for two, I'm not sure if we if we say for two and for two, we have not posted any arguments.

111
00:07:12.320 --> 00:07:17.360
So let's go ahead and let's call the function check score and let's pass.

112
00:07:17.360 --> 00:07:23.390
And now let's pass on the current score, because the first argument is going to be the current score

113
00:07:23.540 --> 00:07:25.970
and the second argument is going to be the passing score.

114
00:07:26.150 --> 00:07:29.030
So I'm going to pass in 94, the correct score.

115
00:07:29.420 --> 00:07:32.930
And now you guys can see this passing score has an underlying.

116
00:07:33.050 --> 00:07:37.940
It means that the return of the passing score and this Intellisense is so cool.

117
00:07:38.060 --> 00:07:42.500
It even gives you the options that you that you will get at the end.

118
00:07:42.650 --> 00:07:46.040
So you will get either pass you or you will get failed.

119
00:07:47.060 --> 00:07:51.190
And I'm going to put the passing score at 55 and let's save it.

120
00:07:51.320 --> 00:07:52.490
We don't see anything.

121
00:07:52.610 --> 00:07:57.710
So let's go ahead and let's capture the result inside a another variable.

122
00:07:57.710 --> 00:08:03.890
And we are going to call it net result, be equal to check score and we are going to consider a log

123
00:08:03.900 --> 00:08:04.520
result.

124
00:08:05.700 --> 00:08:13.560
And let's say results and let's save it, and it says passed because the check score is 90 and the passing

125
00:08:13.560 --> 00:08:18.080
score is 55 and this condition is met, this condition is true.

126
00:08:18.270 --> 00:08:21.400
So let's go ahead and let's check it out for some more conditions.

127
00:08:21.540 --> 00:08:23.370
So what if we pass 85?

128
00:08:23.700 --> 00:08:25.160
We are going to reconsider.

129
00:08:25.170 --> 00:08:26.100
It says past.

130
00:08:26.530 --> 00:08:34.409
Let's go ahead and let's check it for 55, because whenever you apply these sort of conditions, you

131
00:08:34.409 --> 00:08:36.450
should check him at the boundaries as well.

132
00:08:36.690 --> 00:08:40.140
And the boundary is 55 and 55.

133
00:08:41.309 --> 00:08:41.690
All right.

134
00:08:41.880 --> 00:08:46.480
So if I pass it there, we are going to see we are going to see passed as well.

135
00:08:47.850 --> 00:08:48.390
All right.

136
00:08:48.400 --> 00:08:48.750
All right.

137
00:08:49.440 --> 00:08:53.040
Let's go ahead and let's check for the else statement.

138
00:08:53.310 --> 00:08:59.820
So in this time, what I'm going to do is I'm going to pass a smaller number for the current score than

139
00:08:59.820 --> 00:09:00.660
the passing score.

140
00:09:00.690 --> 00:09:07.950
So this statement is implemented and we are going to see failed even if we check it at the boundary,

141
00:09:07.950 --> 00:09:10.980
which is 50 for you guessed it right.

142
00:09:11.340 --> 00:09:12.470
We are going to see failed.

143
00:09:13.420 --> 00:09:16.940
All right, so this is actually how we can all right.

144
00:09:16.960 --> 00:09:21.850
Let's just keep coming to that commented in one piece so we don't see that error.

145
00:09:22.720 --> 00:09:23.080
All right.

146
00:09:23.090 --> 00:09:26.710
So this is how we can implement if statements within functions.

147
00:09:26.710 --> 00:09:29.260
And this is something this is very, very common.

148
00:09:29.560 --> 00:09:34.780
So what I'm going to do is I'm going to comment about everything because this was very long, right?

149
00:09:34.870 --> 00:09:36.550
I mean, this code is long.

150
00:09:36.670 --> 00:09:38.530
We can even make it shorter.

151
00:09:38.710 --> 00:09:44.920
So so the third example, which is not actually an example, I'm just going to say shorter version.

152
00:09:46.180 --> 00:09:50.140
And what I'm going to do is I'm going to copy dysfunction and I'm going to put it here.

153
00:09:50.620 --> 00:09:53.560
And let's go ahead and let's commented and.

154
00:09:54.010 --> 00:09:54.370
All right.

155
00:09:54.520 --> 00:09:56.600
So now let's see what we can do here.

156
00:09:56.980 --> 00:10:04.210
So if I were to remove if I were just to take the return out and remove this, this function would still

157
00:10:04.210 --> 00:10:04.540
work.

158
00:10:04.540 --> 00:10:05.020
Why?

159
00:10:05.770 --> 00:10:08.440
Because this is just an if statement.

160
00:10:08.440 --> 00:10:11.740
If this condition is met, this code is going to run.

161
00:10:11.890 --> 00:10:15.580
And if the condition is not met, this code is not going to run.

162
00:10:15.880 --> 00:10:22.720
And this block of code, if the condition is not met, the block of F statement is not going to run.

163
00:10:22.870 --> 00:10:29.500
And we are going to automatically come to this part and you might say, OK, when we have a return inside

164
00:10:29.500 --> 00:10:35.950
a function, we just saw the return key it no code can run after it.

165
00:10:37.060 --> 00:10:42.400
It is true, no code can run after it if that return key has run.

166
00:10:42.850 --> 00:10:50.230
I mean, when this whenever you use the return keys inside if statements, the condition has to be true

167
00:10:50.590 --> 00:10:53.200
for this return to be calculated.

168
00:10:53.530 --> 00:10:58.300
I mean, when the condition is not true, this block of code is not going to run at all.

169
00:10:58.870 --> 00:11:02.980
So when this block of code is does not run, we get to this part.

170
00:11:03.310 --> 00:11:04.380
This part runs.

171
00:11:04.540 --> 00:11:10.090
So I'm just going to go over this concept one more time because I feel like it's like a bit shaky.

172
00:11:10.600 --> 00:11:10.980
All right.

173
00:11:11.140 --> 00:11:18.400
So whenever we talk about only one single if statements, what do we do is first off, we check for

174
00:11:18.400 --> 00:11:19.150
a condition.

175
00:11:19.420 --> 00:11:26.950
And when the condition is met, we run some sort of code, we run some sort of programmed logic.

176
00:11:27.280 --> 00:11:27.640
All right.

177
00:11:27.790 --> 00:11:35.410
And when the condition is not true, whatever is inside this curly brace of this, if statement is not

178
00:11:35.410 --> 00:11:41.010
going to run, that's why this return statement is not going to run.

179
00:11:41.920 --> 00:11:44.890
This is the reason, number one, that we can do this.

180
00:11:45.070 --> 00:11:50.620
And the reason, number two is that this return is code to this if statement.

181
00:11:51.190 --> 00:11:53.080
We haven't talked about scopes yet.

182
00:11:53.260 --> 00:11:56.020
We are going to talk about them in the next lecture.

183
00:11:56.260 --> 00:11:59.140
But I just I just gave you a heads up about scopes.

184
00:12:00.250 --> 00:12:02.980
They are basically how JavaScript works.

185
00:12:03.220 --> 00:12:03.600
All right.

186
00:12:04.390 --> 00:12:06.220
So this returns.

187
00:12:06.460 --> 00:12:11.630
Keyword is code to this if statement and then it is Skoch to this function.

188
00:12:11.800 --> 00:12:18.070
So when the if statement does not run, this return keyword is not going to run and then we are going

189
00:12:18.070 --> 00:12:19.470
to automatically come to this.

190
00:12:19.750 --> 00:12:25.950
So when the condition is not met, it is automatically going to come to the return failed.

191
00:12:26.110 --> 00:12:28.660
So we don't need to provide another statement.

192
00:12:28.660 --> 00:12:33.680
We can surely not shorten it up or code and make it simpler as a result.

193
00:12:34.000 --> 00:12:35.320
So let's copy all that.

194
00:12:35.320 --> 00:12:36.400
Let's put it here.

195
00:12:36.670 --> 00:12:39.760
Let's come in this one out and let's comment each of them out.

196
00:12:39.760 --> 00:12:40.480
One by one.

197
00:12:40.690 --> 00:12:48.310
We see past comments out and we see past past failed.

198
00:12:49.000 --> 00:12:49.560
Failed.

199
00:12:49.780 --> 00:12:50.140
All right.

200
00:12:50.290 --> 00:12:53.080
So our logic performs well.

201
00:12:53.350 --> 00:12:54.190
That's it for this.

202
00:12:54.190 --> 00:12:56.710
Let's see you guys in the next one.

