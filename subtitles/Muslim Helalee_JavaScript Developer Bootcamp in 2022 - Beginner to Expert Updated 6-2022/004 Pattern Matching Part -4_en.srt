1
00:00:01,920 --> 00:00:10,680
Hi, everyone, in this lecture, we're going to talk about the marching part for Arri, so these lectures

2
00:00:10,680 --> 00:00:14,840
that were supposed to be these fires, like eight examples in one lecture.

3
00:00:15,240 --> 00:00:20,210
Well, I designed them to be like only one lecture, but they are spanning over two lectures.

4
00:00:20,490 --> 00:00:26,970
So originally I was I was I thought I was going to have like five marching parts, but I think they

5
00:00:26,970 --> 00:00:28,290
are going to go to ten.

6
00:00:28,650 --> 00:00:34,020
So it doesn't matter how many parts, as long as you understand what how these patterns they work.

7
00:00:34,380 --> 00:00:40,880
So getting the matched characters with lazy matching and the it is going to be the question mark.

8
00:00:41,190 --> 00:00:51,720
Now, what is lasing matching now by default, whenever rejects regular expression searches for a pattern

9
00:00:51,720 --> 00:00:56,130
inside a string or a line of code, it does a greedy match.

10
00:00:56,130 --> 00:00:57,340
What is what does it mean?

11
00:00:57,360 --> 00:01:01,950
It means that it finds all the irrelevant and possible patterns.

12
00:01:02,100 --> 00:01:04,140
It finds all of the patterns.

13
00:01:04,599 --> 00:01:06,860
It's not like sufficing to one pattern.

14
00:01:06,870 --> 00:01:08,640
It's going to find all of the patterns.

15
00:01:09,180 --> 00:01:17,250
And what we can do is with a question mark, we can change this behavior from greedy, like getting

16
00:01:17,250 --> 00:01:22,440
all of everything too lazy to getting none of anything.

17
00:01:22,530 --> 00:01:22,920
All right.

18
00:01:23,430 --> 00:01:28,950
So let's go ahead and let's take a look at this, an example.

19
00:01:28,950 --> 00:01:32,460
So we are going to say let Reg.

20
00:01:32,730 --> 00:01:36,530
So this is going to be 13 X be equal to now.

21
00:01:36,540 --> 00:01:40,140
First off, I'm going to show you a grid match.

22
00:01:40,440 --> 00:01:48,120
So let's say we have a T there is any word inside that string that we are looking for.

23
00:01:48,300 --> 00:01:52,410
And that word starts with with a T, with a capital T, of course.

24
00:01:52,710 --> 00:02:00,420
And then we are going to provide the wild card, a character, the wild card character is going to grab

25
00:02:00,420 --> 00:02:03,450
everything that comes after this t right.

26
00:02:03,450 --> 00:02:05,010
So let's go ahead and let's save it.

27
00:02:05,020 --> 00:02:10,560
So I'm going to grab this, put it right here, common this one.

28
00:02:10,560 --> 00:02:17,010
And and let's grab this to say 13 and this should be sentence first.

29
00:02:17,340 --> 00:02:25,140
So if I save it, we can see that we get only t h if I put in the G we get the t h again because there

30
00:02:25,140 --> 00:02:27,840
is only one occurrence of that and we only got that.

31
00:02:28,200 --> 00:02:29,760
So what do we want to do?

32
00:02:30,120 --> 00:02:37,710
We want this wild card character to grab everything that comes after this t so I can show you the greedy

33
00:02:37,710 --> 00:02:47,610
part and that think actually can have zero or more occurrences, which means that this wild card character,

34
00:02:47,640 --> 00:02:51,000
this dot can have zero or more occurrences.

35
00:02:51,000 --> 00:02:55,530
And if I put it in a star, you can see that we have selected everything.

36
00:02:56,370 --> 00:02:59,040
That's because this is the wild card character.

37
00:02:59,040 --> 00:03:01,110
It selects everything there is.

38
00:03:01,680 --> 00:03:09,570
But for it to select, we need to say that this one character at this dot, it occurs zero more times,

39
00:03:09,570 --> 00:03:14,820
meaning that this dot is going to go ahead and grab this edge.

40
00:03:15,090 --> 00:03:19,140
It is going to grab the value of each and then the value of E and then the space.

41
00:03:19,140 --> 00:03:19,800
And then one.

42
00:03:19,800 --> 00:03:20,460
And then one.

43
00:03:20,850 --> 00:03:21,230
All right.

44
00:03:21,570 --> 00:03:25,140
So this dot, it occurs zero more times.

45
00:03:25,140 --> 00:03:27,420
That's why we just provided with the asterisk.

46
00:03:27,630 --> 00:03:30,000
And this shows us the greedy much.

47
00:03:30,570 --> 00:03:35,910
So how can we make sure that our matches, they are not greedy, but they're lazy.

48
00:03:37,140 --> 00:03:42,840
What I'm going to do is I'm just going to provide in the question mark and when I save it, we just

49
00:03:42,840 --> 00:03:46,020
get the T so we don't get anything.

50
00:03:46,020 --> 00:03:54,900
Even though there is a wild card character in here and it is going to grab the T that after which there

51
00:03:54,900 --> 00:03:55,920
is something.

52
00:03:55,950 --> 00:03:57,630
We don't know what that thing is.

53
00:03:57,720 --> 00:04:02,850
There could be h like in there or there could be like E in T.

54
00:04:03,060 --> 00:04:03,510
Right.

55
00:04:04,770 --> 00:04:07,050
So this is called lazy magic.

56
00:04:07,470 --> 00:04:10,260
We just go ahead and grab the first occurrence of that.

57
00:04:11,930 --> 00:04:18,680
The next thing that I want to talk about is our example, number 14, where we are matching the beginning

58
00:04:18,680 --> 00:04:19,970
string patterns.

59
00:04:20,000 --> 00:04:24,560
This is where that Carrott character has a.

60
00:04:25,730 --> 00:04:26,510
Different meaning.

61
00:04:26,810 --> 00:04:34,070
So let's go ahead and let's create Regg 14 X, and what I'm going to do is I'm not going to use brackets

62
00:04:34,370 --> 00:04:42,890
and I'm going to say, give me give me the there, which is at the start of that at the start of the

63
00:04:42,890 --> 00:04:43,370
string.

64
00:04:43,790 --> 00:04:44,140
All right.

65
00:04:44,150 --> 00:04:50,570
So I just want to get that the now the kerosine is outside the brackets, so it matches the beginning

66
00:04:50,570 --> 00:04:55,550
only it only matches the beginning, even though we have something towards the end.

67
00:04:56,150 --> 00:04:59,940
So let's go ahead and let's provide t e at the end as well.

68
00:04:59,960 --> 00:05:06,800
So it's the same thp scra these what I'm right about right here.

69
00:05:06,810 --> 00:05:09,110
That's uncommon them and.

70
00:05:11,850 --> 00:05:16,140
Let's provide 14 so we get only one tea, and why is that?

71
00:05:16,560 --> 00:05:24,190
Because this says that we only want to get the tea, which is at the start of that string.

72
00:05:24,240 --> 00:05:25,710
We don't care about the ending.

73
00:05:25,890 --> 00:05:33,200
So even if I put in the case in certain instances, insensitive flag, the I flag, we still get one

74
00:05:33,210 --> 00:05:33,750
Tichy.

75
00:05:34,320 --> 00:05:34,550
Right.

76
00:05:34,570 --> 00:05:35,390
So it doesn't matter.

77
00:05:35,730 --> 00:05:42,660
The next example is almost the same thing, and that is the matching the ending string patterns.

78
00:05:43,740 --> 00:05:47,080
So we are going to grab whatever it is at the end of that.

79
00:05:47,250 --> 00:05:53,280
So for that, I'm going to again use this example and I'm going to scrub this 14 and I'm going to change

80
00:05:53,280 --> 00:05:56,040
it to 15, comment back everyone.

81
00:05:56,060 --> 00:05:57,690
And now kerosine.

82
00:05:57,690 --> 00:05:59,190
It grabbed the beginning.

83
00:05:59,760 --> 00:06:03,300
But for the ending, we are going to use a dollar sign.

84
00:06:03,450 --> 00:06:07,970
And if I save it, we just get the now the index of this is 89.

85
00:06:08,250 --> 00:06:09,450
But what about this?

86
00:06:10,110 --> 00:06:11,700
The index of that is zero.

87
00:06:11,730 --> 00:06:16,980
You can see that we have selected the ending tachy and we have selected these starting to in here.

88
00:06:17,700 --> 00:06:23,080
So these are calls the beginning and ending string patterns.

89
00:06:23,130 --> 00:06:24,390
This is how we can grab them.

90
00:06:24,690 --> 00:06:30,370
And finally, we are going to talk about the W which selects.

91
00:06:30,390 --> 00:06:31,200
So I'm just going to.

92
00:06:32,440 --> 00:06:38,950
Put in the comment, so this is example 16, we want to match all letters and numbers.

93
00:06:39,900 --> 00:06:45,610
And underscore, so it is going to much underscore as well.

94
00:06:45,990 --> 00:06:51,470
So let's create that regular 16 expression.

95
00:06:51,960 --> 00:06:58,040
So if you provide a backward slash, I think it's called the backwards and a lowercase.

96
00:06:58,080 --> 00:07:05,420
Keep in mind, this is a lowercase W. So I'm just going to say lowercase W..

97
00:07:06,150 --> 00:07:06,570
Right.

98
00:07:07,810 --> 00:07:11,200
Now, a lowercase W matches, what does it match?

99
00:07:12,130 --> 00:07:17,470
It doesn't light it up, it just matches it a r, a through Z.

100
00:07:18,910 --> 00:07:21,880
And number zero through nine.

101
00:07:22,750 --> 00:07:28,480
And underscore, so it matches all the letters, all the numbers and also underscore.

102
00:07:28,930 --> 00:07:38,800
So if I were to go ahead and try to copy this, but I'm here and log them to the console, we are going

103
00:07:38,800 --> 00:07:39,840
to see the results.

104
00:07:39,850 --> 00:07:43,900
So we are going to see this right now.

105
00:07:45,730 --> 00:07:51,340
So why is it t so we have oh, we need to get all the occurrences of that.

106
00:07:51,340 --> 00:07:54,710
So I'm just going to provide I want to print all of them to the console.

107
00:07:55,300 --> 00:07:56,960
So now there we go.

108
00:07:57,100 --> 00:07:59,080
So we have selected everything.

109
00:07:59,080 --> 00:08:01,060
There is all the digits.

110
00:08:01,630 --> 00:08:09,280
But let's say if you have an add sign, so at whatever, so add it is not going to grab the outside.

111
00:08:09,310 --> 00:08:16,090
You can see that there is in the outside you can provide in like two percentages, like an ampersand

112
00:08:16,090 --> 00:08:19,420
asterisk, parentheses, brackets.

113
00:08:19,690 --> 00:08:26,150
It doesn't matter what you provide because the w it only grabs letters, numbers and the underscore.

114
00:08:26,350 --> 00:08:33,580
So if I were to provide Fox underscore, we are going to see the underscore right here.

115
00:08:34,270 --> 00:08:34,600
Right.

116
00:08:34,840 --> 00:08:41,039
So this is it for matching part number for next lecture.

117
00:08:41,049 --> 00:08:43,600
We are going to talk about the matching part number five.

118
00:08:43,780 --> 00:08:44,950
See you guys that.

