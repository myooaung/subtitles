WEBVTT
1
00:00:01.850 --> 00:00:02.810
Hi, everyone.

2
00:00:02.840 --> 00:00:10.910
In this lecture, we are going to talk about variable hosting all right, now, before diving into this

3
00:00:10.910 --> 00:00:19.430
whole topic of hoisting, I should tell you that the JavaScript engine does not hoist it doesn't move

4
00:00:19.430 --> 00:00:21.740
things around as it is suggested.

5
00:00:22.220 --> 00:00:26.770
Hoisting is actually a metaphor that we have made up.

6
00:00:27.200 --> 00:00:35.810
It is an English language convention that we have made up to discuss the idea of lexical scope without

7
00:00:35.810 --> 00:00:38.090
thinking about the lexical scope.

8
00:00:38.750 --> 00:00:47.590
Now, hoisting is just our lexical scope that we have covered in the past two chapters, and it is nothing

9
00:00:47.600 --> 00:00:47.870
else.

10
00:00:47.900 --> 00:00:48.280
All right.

11
00:00:48.830 --> 00:00:56.660
Now, if you know the lexical scope and if you know that there are two stages, there are two passes,

12
00:00:56.930 --> 00:01:01.300
the compilation and the execution or the parsing and the execution.

13
00:01:01.310 --> 00:01:06.290
It doesn't matter if you call it a compilation or if you call it parsing.

14
00:01:06.650 --> 00:01:14.930
If you know, there are these two passes inside a lexical scope, then you will know what heisting is

15
00:01:14.930 --> 00:01:18.280
and you will never be confused by hoisting, OK?

16
00:01:18.350 --> 00:01:25.580
And you will never be misinformed by hoisting because hoisting is not actually a real thing.

17
00:01:25.590 --> 00:01:26.240
It is.

18
00:01:26.240 --> 00:01:35.270
This lets the idea of JavaScript being lexically scope language, right and hoisting means that the

19
00:01:35.270 --> 00:01:42.320
execution engine, it literally it moves our code like up and down, it rearranges our code.

20
00:01:42.470 --> 00:01:44.090
And that's not what it is.

21
00:01:44.330 --> 00:01:44.690
Right.

22
00:01:45.080 --> 00:01:47.150
And that's not what happens.

23
00:01:48.110 --> 00:01:53.540
Now, before talking about this example, what I want to do is I want to go ahead and open up this.

24
00:01:53.540 --> 00:01:58.070
I have opened up this developer, that Mozilla dot org, and it's just hosting.

25
00:01:58.250 --> 00:02:05.690
We are going to go over hosting because this is one of the like one of the most mis like informed,

26
00:02:05.810 --> 00:02:12.300
like, I don't know, like one of the most misused term in Java in the JavaScript world.

27
00:02:12.740 --> 00:02:21.140
Now it says hosting is a term you will not find used in any normative specification process prior to

28
00:02:21.740 --> 00:02:24.730
ECMAScript 2015 language specification.

29
00:02:25.250 --> 00:02:31.430
Now, hoisting didn't even exist before ECMAScript 2015.

30
00:02:31.610 --> 00:02:37.550
Hosting was thought was thought up as a general way of thinking.

31
00:02:38.120 --> 00:02:40.100
Is the same thing that I told you.

32
00:02:40.400 --> 00:02:47.690
Hosting was thought up as a general way of thinking about how execution contexts, specifically the

33
00:02:47.690 --> 00:02:50.120
creation and execution phases.

34
00:02:50.390 --> 00:02:51.440
There are two phases.

35
00:02:51.440 --> 00:02:53.770
There are two passes work in JavaScript.

36
00:02:54.200 --> 00:02:59.150
However, the concept can be a little confusing at first, but I do not agree with this part.

37
00:02:59.150 --> 00:03:02.210
Hosting is very simple conceptually.

38
00:03:02.810 --> 00:03:10.670
For example, a strict definition of hosting suggests that variable and function declarations are physically

39
00:03:10.670 --> 00:03:13.160
moved to the top of your code.

40
00:03:13.370 --> 00:03:16.340
But this is not in fact, what happens.

41
00:03:16.700 --> 00:03:17.860
This is incorrect.

42
00:03:17.870 --> 00:03:25.010
The JavaScript engine doesn't physically like move your rearrange your code.

43
00:03:25.010 --> 00:03:26.380
It's not what happens.

44
00:03:26.780 --> 00:03:29.120
That's how the execution works.

45
00:03:29.120 --> 00:03:33.890
But the execution, like, uses the executable code to execute it.

46
00:03:33.980 --> 00:03:35.960
It doesn't rearrange your code.

47
00:03:36.290 --> 00:03:36.650
Right.

48
00:03:36.830 --> 00:03:44.120
So unless it says here instead the variable and function declarations are put into memory during the

49
00:03:44.120 --> 00:03:48.410
compiler phase, but stay exactly where you tag them in your code.

50
00:03:48.740 --> 00:03:49.060
Right.

51
00:03:49.640 --> 00:03:53.480
So there are like many examples of hosting here.

52
00:03:53.480 --> 00:04:01.310
You can go over them, but they just wanted to show you the what what actually the documentation says.

53
00:04:01.490 --> 00:04:08.360
Now, this is not the specification because there is actually something inside this documentation.

54
00:04:09.080 --> 00:04:15.440
And that thing is there is something inside this documentation.

55
00:04:15.440 --> 00:04:24.080
There is a sentence inside this documentation, which unfortunately, according to the ECMAScript specification,

56
00:04:24.350 --> 00:04:25.490
is inaccurate.

57
00:04:25.820 --> 00:04:32.870
And we are going to talk about this inaccuracy, this misinformation, which is very, very unfortunate

58
00:04:32.870 --> 00:04:40.160
because MDN is like like the go to documentation for JavaScript, for HMRC assistant JavaScript.

59
00:04:40.370 --> 00:04:45.770
And this is very, very unfortunate that this information is not in fact accurate.

60
00:04:46.340 --> 00:04:52.160
Letton it says Letang cost consed are not also hosted, but this is not accurate.

61
00:04:52.160 --> 00:04:56.120
Let and they do hoist but they hoist in a different way.

62
00:04:57.200 --> 00:05:00.800
We are going to talk about this inaccuracy in our like.

63
00:05:01.260 --> 00:05:06.400
In temporal temporal deadzone lecture, which is like two lectures ahead of us.

64
00:05:06.420 --> 00:05:13.740
All right, so what I'm going to do is we are going to come inside the Savar and I think we should be

65
00:05:13.740 --> 00:05:22.170
able to see unqualified vare hosting because variable declarations and declarations in general are processed

66
00:05:22.170 --> 00:05:30.090
before any code is executed by declaring a variable anywhere in the code is equivalent to declaring

67
00:05:30.090 --> 00:05:30.820
it at the top.

68
00:05:31.170 --> 00:05:38.670
This also means that a variable can appear, it can appear to be used before it's to declare this behavior

69
00:05:38.670 --> 00:05:39.740
is called hoisting.

70
00:05:40.260 --> 00:05:42.170
But this is not actually hoisting.

71
00:05:42.180 --> 00:05:43.800
This is what we have talked about.

72
00:05:43.800 --> 00:05:48.870
We have talked about how the compilation stage works.

73
00:05:49.110 --> 00:05:59.400
The compilation stage is mainly like concerned with this variable declaration.

74
00:05:59.410 --> 00:06:05.580
The variable initialization is done inside in the execution stage.

75
00:06:05.850 --> 00:06:14.330
We know that the compiler is going to ask the scope manager that have you heard of this identifier?

76
00:06:14.340 --> 00:06:21.510
The scope manager is going to say no, but the scope manager is going to specify where this exists.

77
00:06:22.410 --> 00:06:28.440
And when we talked about it in the compilation state, we didn't care what the value was because that

78
00:06:28.440 --> 00:06:38.880
is the job of the execution, to store it, to allocate it, to allocate like kind of the word, to

79
00:06:38.880 --> 00:06:42.930
allocate like a memory to a like space in memory to it.

80
00:06:43.290 --> 00:06:50.250
OK, so we know that there are two passes and because there are two passes, the first pass is the variable

81
00:06:50.250 --> 00:06:53.710
declaration and then we have the variable initialization.

82
00:06:54.150 --> 00:07:01.020
This is why people get confused, because this is run first, then the Soren's.

83
00:07:01.680 --> 00:07:06.570
It's like this code goes all the way to the top, but that's not where it goes.

84
00:07:06.570 --> 00:07:11.290
It stays in its place and this is where the misconception comes in.

85
00:07:11.610 --> 00:07:19.230
So if I were to save this code, if I were to say this code, we would be able to see for undefined

86
00:07:19.230 --> 00:07:22.110
because in here book is not defined in here.

87
00:07:22.110 --> 00:07:23.190
Book is not defined.

88
00:07:23.910 --> 00:07:26.850
Excuse me, in here book is sorry.

89
00:07:26.850 --> 00:07:27.510
This is movie.

90
00:07:28.500 --> 00:07:29.910
Book is not defined here.

91
00:07:29.910 --> 00:07:31.320
Movie is not defined here.

92
00:07:31.320 --> 00:07:32.550
Book is not defined here.

93
00:07:32.550 --> 00:07:36.170
Book movie is not defined here, but they are defined here.

94
00:07:36.450 --> 00:07:41.090
So if I say that we can see for undefined then we can see Dune and the movie Dune.

95
00:07:41.760 --> 00:07:42.150
All right.

96
00:07:42.150 --> 00:07:45.450
But this is now this is our regular code.

97
00:07:45.450 --> 00:07:45.780
All right.

98
00:07:45.960 --> 00:07:52.410
Now this is not a best practice to declare your variables like to create auto globalists, to declare

99
00:07:52.410 --> 00:07:55.370
them inside the global scope and then initialize them.

100
00:07:55.380 --> 00:07:58.800
This is not a best practice, but this is our regular code.

101
00:07:59.040 --> 00:08:00.360
Now, what does the.

102
00:08:02.160 --> 00:08:11.340
I'm just going to do a few dashes, the hoisting misconception, misconception, the.

103
00:08:11.720 --> 00:08:13.800
What does the hoisting misconception say?

104
00:08:14.220 --> 00:08:19.050
The hoisting misconception says that I'm just going to grab that uncommented out.

105
00:08:19.290 --> 00:08:25.380
It says that this EVAR book is comes all the way here to the top of our coat.

106
00:08:26.250 --> 00:08:34.440
And let's go ahead and let's let's put the movie, the book back here as well.

107
00:08:34.780 --> 00:08:35.820
And this one.

108
00:08:36.929 --> 00:08:41.789
Skopje's, let's put it here, let's remove the VA from here as well.

109
00:08:42.059 --> 00:08:49.440
Now this is what the what hoisting suggests, that whenever the JavaScript runs your code, what it

110
00:08:49.440 --> 00:08:55.440
does, it grabs all of your variables that a VA variable declarations not let.

111
00:08:55.710 --> 00:08:59.040
OK, that is hoisted in a different way.

112
00:08:59.160 --> 00:09:00.180
That does host.

113
00:09:00.180 --> 00:09:04.500
But we are going to talk about let in two letters from now.

114
00:09:04.530 --> 00:09:04.890
All right.

115
00:09:05.280 --> 00:09:06.020
Let on const.

116
00:09:06.090 --> 00:09:08.050
But now we're just discussing VA.

117
00:09:08.340 --> 00:09:11.010
Keep in mind that these only apply to VA.

118
00:09:11.010 --> 00:09:12.840
They don't apply to let and const.

119
00:09:14.430 --> 00:09:21.120
So it says that when the JavaScript engine runs this we can see our book and our movie here, then all

120
00:09:21.120 --> 00:09:22.660
the way they are defined right here.

121
00:09:22.680 --> 00:09:26.550
So if I were to save this, we will be able to see the same result.

122
00:09:26.880 --> 00:09:29.000
But this is not actually what happens.

123
00:09:29.040 --> 00:09:31.350
The code is not rearranged.

124
00:09:32.220 --> 00:09:32.570
All right.

125
00:09:32.730 --> 00:09:42.440
And this is like a major misconception because each statement actually has to pass.

126
00:09:42.750 --> 00:09:45.740
The first pass is going to be the compilation pass.

127
00:09:45.930 --> 00:09:50.370
So I'm just going to I'm I'm going to put them here and I'm going to come in this one out.

128
00:09:50.550 --> 00:09:54.200
So you know what the hoisting misconception is, right?

129
00:09:54.320 --> 00:09:58.740
I'm going to come and this back in because the any statement has to pass.

130
00:09:58.950 --> 00:10:01.170
Any formal declaration has to pass.

131
00:10:01.590 --> 00:10:03.900
That's where the hoisting misconception comes.

132
00:10:04.290 --> 00:10:10.170
People say developers say, OK, that this part goes all the way to top and it execute and it's compiled

133
00:10:10.170 --> 00:10:10.530
there.

134
00:10:10.710 --> 00:10:13.280
And then and then this part is stored in the memory.

135
00:10:13.290 --> 00:10:14.550
But that's not how it works.

136
00:10:15.190 --> 00:10:16.080
It does work.

137
00:10:16.170 --> 00:10:18.150
It's always somehow like that.

138
00:10:18.150 --> 00:10:20.220
But this never goes to the top.

139
00:10:20.490 --> 00:10:26.280
Hoisting says the code is rearranged, but that's not something that actually happens.

140
00:10:26.670 --> 00:10:27.750
It doesn't happen.

141
00:10:27.750 --> 00:10:33.080
It just goes it goes through a compilation state or a passing state.

142
00:10:33.300 --> 00:10:43.030
And after all, the formal declarations and their respective scopes have been defined that identifiers

143
00:10:43.050 --> 00:10:50.880
Copeland will be handed over to the execution engine so the execution engine knows, OK, which verra

144
00:10:50.890 --> 00:10:54.410
which value should be allocated, which space of memory.

145
00:10:55.180 --> 00:10:55.530
Right.

146
00:10:55.680 --> 00:10:59.220
So I think we are done here.

147
00:11:00.030 --> 00:11:01.560
I just wanted to show you this.

148
00:11:01.560 --> 00:11:08.370
And there is one more thing that I want to do here is I'm just going to grab this and, you know, I'm

149
00:11:08.370 --> 00:11:14.040
going to go to the bottom of the code and I'm going to create a common paste it right here and I'm going

150
00:11:14.040 --> 00:11:16.680
to grab the other link as well.

151
00:11:16.690 --> 00:11:18.690
So you have it as a reference.

152
00:11:19.170 --> 00:11:21.630
You can go to it and you can read about it.

153
00:11:22.360 --> 00:11:22.770
All right.

154
00:11:22.800 --> 00:11:28.710
So this is going to be it for variable hosting, which actually nothing is hoisted.

155
00:11:28.860 --> 00:11:34.140
And then we are going to talk about the function hosting, which is discussed right here in our next

156
00:11:34.140 --> 00:11:34.540
lecture.

157
00:11:34.680 --> 00:11:37.140
So see you guys in the next lecture.

