WEBVTT
1
00:00:01.380 --> 00:00:06.630
Hi, everyone, in this lecture, we are going to introduce the this keyword.

2
00:00:07.730 --> 00:00:15.890
All right, so a functions this keyword represents or references an execution context for that call,

3
00:00:16.250 --> 00:00:23.630
a context in which that call was being made, and that is determined entirely by how the function is

4
00:00:23.630 --> 00:00:24.020
called.

5
00:00:24.200 --> 00:00:29.480
In other words, the this key word assignment of a function.

6
00:00:30.140 --> 00:00:36.980
If you look at that function that has the this key word in it, it's assigned based upon how the function

7
00:00:36.980 --> 00:00:37.790
is called.

8
00:00:37.790 --> 00:00:38.180
Right.

9
00:00:39.200 --> 00:00:45.140
Which is the counterintuitive part, because most people think that you could look at a function and

10
00:00:45.140 --> 00:00:47.600
figure out whether this keyword is going to point out.

11
00:00:47.870 --> 00:00:53.020
But the definition of the function doesn't matter at all to determining the rescuer.

12
00:00:53.030 --> 00:01:00.140
The only thing that matters is how does that function gets invoked, get invoked.

13
00:01:00.830 --> 00:01:08.210
If that sounds familiar to you, it's because we have sort of already talked about a flexible reuseable

14
00:01:08.210 --> 00:01:09.110
context.

15
00:01:09.120 --> 00:01:09.460
Right.

16
00:01:09.680 --> 00:01:18.950
Like, very briefly, it was when we talked about when we we talked about the scopes, the lexical scope,

17
00:01:18.950 --> 00:01:19.820
the block scope.

18
00:01:20.090 --> 00:01:24.650
We just talked about the dynamic scope for like a few seconds, very briefly.

19
00:01:24.890 --> 00:01:31.310
So in other words, that this keyword is JavaScript version of a dynamic scope.

20
00:01:32.200 --> 00:01:37.390
And it's a way of having a flexible, reusable behavior.

21
00:01:37.930 --> 00:01:41.210
Right now, we have here a code snippet, right?

22
00:01:41.440 --> 00:01:51.220
So and I'm just going to go ahead and explain to you, if JavaScript were to be like a dynamically scoped

23
00:01:51.220 --> 00:01:56.210
language, how this code would run and what would we see inside the console?

24
00:01:56.440 --> 00:02:02.590
I mean, that's not what we are going to see inside the console because JavaScript doesn't have a dynamic

25
00:02:02.590 --> 00:02:03.190
scope.

26
00:02:03.370 --> 00:02:09.039
We can mimic the behavior of a dynamic scope using this key keyword.

27
00:02:09.220 --> 00:02:15.790
But before going there, what is this dynamic SCO saying here we have a variable declaration movie,

28
00:02:15.790 --> 00:02:21.700
Avatar, and we have a function that says other movie inside this function, we have a console log that

29
00:02:21.700 --> 00:02:28.210
points to this variable movie, and then we have another function that says other other movie.

30
00:02:28.750 --> 00:02:32.630
And the other movie is called Inside This other other movie.

31
00:02:32.650 --> 00:02:33.970
See, it's called Inside.

32
00:02:34.180 --> 00:02:37.280
And at the end, we just call the other other movie.

33
00:02:37.600 --> 00:02:42.010
So whenever we I call this, this function is going to get invoked.

34
00:02:42.250 --> 00:02:47.590
And when this function gets invoked, we are going to we are going to call the other movie function

35
00:02:47.890 --> 00:02:50.710
and then this function is going to invoke get invoked.

36
00:02:50.720 --> 00:02:55.750
But what what this movie is going to what is going to be the value of this movie?

37
00:02:56.050 --> 00:02:58.750
Now we know what the value is going to be.

38
00:02:58.750 --> 00:03:05.260
The value is going to be Avatar because console lock is going to this console is not defined in the

39
00:03:05.260 --> 00:03:07.150
scope of this function.

40
00:03:07.180 --> 00:03:15.730
So in a lexically scoped language, when we cannot find a reference to a variable, we just or to a

41
00:03:16.570 --> 00:03:23.230
property or to a method, we just go one level up and when we go one level up, we can see the reference

42
00:03:23.230 --> 00:03:23.970
is right here.

43
00:03:23.980 --> 00:03:25.470
So we passed the loops.

44
00:03:26.020 --> 00:03:27.880
We just passed the avatar in here.

45
00:03:28.360 --> 00:03:29.800
And what does this movie name?

46
00:03:29.830 --> 00:03:32.110
So the movie name is actually a parameter.

47
00:03:32.110 --> 00:03:35.160
The parameter is going to have an argument of The Godfather.

48
00:03:35.590 --> 00:03:39.160
So we are going to have Avatar and Avatar and The Godfather.

49
00:03:39.430 --> 00:03:42.370
Now, this is what a lexical scope language would do.

50
00:03:42.610 --> 00:03:47.650
But if we had if we had a dynamic scope, what then?

51
00:03:48.640 --> 00:03:55.900
What then would happen is this movie because this function, other movie is called From Inside This

52
00:03:55.900 --> 00:03:56.440
Function.

53
00:03:57.610 --> 00:04:03.790
This movie variable will have pointed to this movie and we would have seen District nine.

54
00:04:04.800 --> 00:04:11.310
Instead of Avatar, so because this is not a dynamic language, and if I save it, we just see Avatar

55
00:04:11.310 --> 00:04:12.300
and The Godfather.

56
00:04:12.930 --> 00:04:16.500
OK, so this is how dynamic scope's they work.

57
00:04:16.860 --> 00:04:22.350
Now, we know that this might seem weird, that this movie is going to come from here, and that's because

58
00:04:22.350 --> 00:04:26.850
we are used to thinking lexically, not dynamically.

59
00:04:27.180 --> 00:04:35.190
Now, what the this keyword is going to do for us is it is going to like I like to imitate the behavior

60
00:04:35.190 --> 00:04:37.330
of a dynamically scop language.

61
00:04:37.650 --> 00:04:41.910
So let's go over let's go ahead on this console, this comment, this one out.

62
00:04:42.300 --> 00:04:48.630
And what I'm going to do is I'm just going to paste this code in here and I'm going to say example I

63
00:04:48.630 --> 00:04:53.130
could say example to even though this was our example.

64
00:04:53.130 --> 00:04:54.810
One example.

65
00:04:56.540 --> 00:05:08.220
Example one, and I'm just going to say dynamic scoping, let's remove that, let's save it and let's

66
00:05:08.230 --> 00:05:09.550
come here and let's face it.

67
00:05:09.820 --> 00:05:15.460
So what I'm going to do is I'm also going to grab this and I'm going to put it right here and I'm going

68
00:05:15.460 --> 00:05:22.090
to change it to see Black Panther to save it.

69
00:05:22.300 --> 00:05:22.690
Oops.

70
00:05:23.050 --> 00:05:24.210
I shouldn't have saved it.

71
00:05:24.220 --> 00:05:28.330
That ruined the surprise I was I was trying to do so.

72
00:05:28.330 --> 00:05:32.200
We do have here a new method that we have not used so far.

73
00:05:32.350 --> 00:05:34.050
And this is the call method.

74
00:05:34.210 --> 00:05:38.920
And for that, before even talking about this code, I'm just going to paste in this comment.

75
00:05:39.070 --> 00:05:41.070
And this is oops, I did it again.

76
00:05:41.080 --> 00:05:42.280
I don't know why I'm doing it.

77
00:05:43.390 --> 00:05:45.100
Just just ignore the console.

78
00:05:45.100 --> 00:05:46.300
Ignore what you saw there.

79
00:05:46.340 --> 00:05:46.660
Right.

80
00:05:46.660 --> 00:05:48.100
Because we are going to go over that.

81
00:05:48.380 --> 00:05:54.160
If you want to read about this call method, you're going to go ahead and go to this Web page and you

82
00:05:54.160 --> 00:05:54.910
can read about it.

83
00:05:54.920 --> 00:05:56.150
This is documentation.

84
00:05:56.760 --> 00:05:57.120
All right.

85
00:05:57.130 --> 00:06:02.260
So in here we have like we still have our other movie.

86
00:06:02.500 --> 00:06:04.930
OK, we have our other other movie.

87
00:06:05.110 --> 00:06:08.410
But inside this other other movie, we have an object.

88
00:06:09.080 --> 00:06:12.490
OK, now there are four ways to call a function.

89
00:06:12.490 --> 00:06:18.790
And starting from our next lecture, we are going to talk about all of those function calls in like

90
00:06:18.790 --> 00:06:24.930
in depth, the reason that we are going to talk about it, because they are directly related to this

91
00:06:25.030 --> 00:06:26.470
key word, OK?

92
00:06:28.030 --> 00:06:35.320
All right, so in here, whenever I call this other other movie, this function is going to get invoked

93
00:06:35.320 --> 00:06:42.400
and when dysfunction is going to get invoked, we are going to see my context object that has one property

94
00:06:42.400 --> 00:06:42.730
in it.

95
00:06:43.030 --> 00:06:48.430
And then we are going to see other movie, which is dysfunction get called by the columnist.

96
00:06:48.460 --> 00:06:53.200
Another call method accepts an object and an argument.

97
00:06:53.440 --> 00:06:54.700
So this is the argument.

98
00:06:54.700 --> 00:06:56.230
My context is coming.

99
00:06:56.590 --> 00:07:04.030
So and then in here inside the console log, we have this movie right now.

100
00:07:04.540 --> 00:07:07.380
We have to my contexts right now.

101
00:07:07.390 --> 00:07:12.500
I told you, just ignore what you saw inside the console because that was I shouldn't have done that.

102
00:07:12.520 --> 00:07:13.640
I ruined the surprise.

103
00:07:14.020 --> 00:07:20.200
Now I'm going to talk about it now in the lexically scoped language, when we cannot find this reference

104
00:07:20.200 --> 00:07:22.660
to this console, we are going to go one level up.

105
00:07:23.020 --> 00:07:24.520
We do go one level up.

106
00:07:24.520 --> 00:07:25.810
But what about this?

107
00:07:26.110 --> 00:07:30.310
Inside the parentheses, we know that's what this movie name is going to be.

108
00:07:30.460 --> 00:07:32.470
Actually, this is not movie name.

109
00:07:32.470 --> 00:07:35.260
I should just change it to movie description.

110
00:07:36.010 --> 00:07:40.110
Let me just go ahead and copy it and put it right here as well.

111
00:07:40.360 --> 00:07:46.390
So this is movie description because this is movie name and we know what this says it is going to be.

112
00:07:46.390 --> 00:07:47.320
This is coming.

113
00:07:47.320 --> 00:07:48.520
So that part is clear.

114
00:07:48.760 --> 00:07:49.660
What about this?

115
00:07:49.660 --> 00:07:52.200
So what is this in this context?

116
00:07:52.660 --> 00:07:57.670
So this is going to refer to a dynamic scope.

117
00:07:58.310 --> 00:07:58.630
Right.

118
00:07:58.870 --> 00:08:05.290
And we can find out what this points are whenever we go to the call site.

119
00:08:05.710 --> 00:08:07.630
Where is the call side for this function?

120
00:08:07.780 --> 00:08:09.520
It is on line number thirty two.

121
00:08:09.520 --> 00:08:12.040
In my case, this is the call side.

122
00:08:12.370 --> 00:08:17.890
So in the call side, we can see that we have other movie that call my context.

123
00:08:18.340 --> 00:08:22.320
So the first part is my context and then we have our argument.

124
00:08:22.900 --> 00:08:24.850
So what is this my context?

125
00:08:25.060 --> 00:08:29.500
This my context has inside of it a movie key.

126
00:08:29.530 --> 00:08:37.980
OK, if this key were to be something else, we were we wouldn't be able to use this this keyword for

127
00:08:37.990 --> 00:08:38.980
this key word.

128
00:08:39.010 --> 00:08:39.400
Right.

129
00:08:39.760 --> 00:08:46.270
So that this keyword is going to refer to this my context and it is going to say dot movie.

130
00:08:46.420 --> 00:08:54.520
It is like whenever you grab an object and you want to access a property of that object, you just use

131
00:08:54.520 --> 00:08:55.570
the dot notation.

132
00:08:56.050 --> 00:08:57.180
So think of this.

133
00:08:57.190 --> 00:09:01.240
So in this case, the this keyword is actually this object.

134
00:09:01.750 --> 00:09:04.030
It is referring to this object.

135
00:09:04.450 --> 00:09:05.560
Why this object?

136
00:09:05.560 --> 00:09:08.590
Because and why not this object?

137
00:09:08.830 --> 00:09:16.300
You can see that lexically scoping that this should refer to the to the to the let my context, which

138
00:09:16.300 --> 00:09:18.400
is inside the which is in the global scope.

139
00:09:18.730 --> 00:09:21.790
And we saw how it worked inside our first example.

140
00:09:21.790 --> 00:09:24.700
But the this keyword is going to mimic.

141
00:09:25.670 --> 00:09:35.870
A dynamic, dynamic scope kind of situation, right, so dynamically instead of going up, instead of

142
00:09:35.870 --> 00:09:42.110
grabbing this, it is going to take a look at where the function is called, the function is called

143
00:09:42.110 --> 00:09:42.800
right here.

144
00:09:43.040 --> 00:09:45.560
And we have in my context.

145
00:09:46.040 --> 00:09:46.420
All right.

146
00:09:46.580 --> 00:09:52.420
And that my context is going to be the thing that this is going to be referring to.

147
00:09:52.820 --> 00:09:55.320
So you can think of this as that.

148
00:09:55.400 --> 00:09:58.370
This is as my context, that movie.

149
00:09:58.610 --> 00:10:04.220
We have an object and we have we want access a property from that object, which is movie, and we use

150
00:10:04.220 --> 00:10:05.190
the dot notation.

151
00:10:05.690 --> 00:10:11.990
So this is going to refer to my context instead of referring to this, because now we are talking dynamically

152
00:10:11.990 --> 00:10:13.070
about the Diski work.

153
00:10:13.730 --> 00:10:16.380
And if I save it, we can see that we have Avatar.

154
00:10:16.670 --> 00:10:20.690
Now, if you're wondering, I'm just going to copy this and I'm going to bring it out.

155
00:10:20.990 --> 00:10:29.180
Now, if the movie is called Outside, this other movie is called Outside Online Numbers.

156
00:10:29.210 --> 00:10:31.010
Thirty five now.

157
00:10:31.310 --> 00:10:37.820
And in this case, what the this keyword is going to point out, we have four for us to be able to understand

158
00:10:37.820 --> 00:10:43.670
what the this keyword is pointing out, we should go all the way to where that function is called and

159
00:10:43.670 --> 00:10:46.560
take a look at how that function is called.

160
00:10:46.850 --> 00:10:49.460
So this function is called again with the call method.

161
00:10:49.670 --> 00:10:52.190
The call method accepts an object.

162
00:10:52.520 --> 00:10:55.280
And then we have this simple string.

163
00:10:55.640 --> 00:10:55.940
Right.

164
00:10:56.120 --> 00:10:58.160
Which which does nothing, basically.

165
00:10:59.840 --> 00:11:02.670
And I'm just going to say, not right now.

166
00:11:02.720 --> 00:11:09.260
What is this my context this my context has been specified in here and inside that we have a property

167
00:11:09.260 --> 00:11:10.420
called movie.

168
00:11:10.880 --> 00:11:17.900
So if I were to save this, we should see one this key word that points to Avatar and the next this

169
00:11:17.900 --> 00:11:24.950
key word should point to this movie because this my my context is in the global scope.

170
00:11:25.160 --> 00:11:26.780
So it should point at this one.

171
00:11:27.020 --> 00:11:27.460
Right.

172
00:11:28.890 --> 00:11:36.740
Let's save it, and in here we can see the Black Panther two is not coming and then Avatar is coming.

173
00:11:36.840 --> 00:11:37.200
All right.

174
00:11:37.440 --> 00:11:38.460
So we can see that.

175
00:11:39.430 --> 00:11:46.360
F if the my context is inside, the global scope is going to point to that, if it is inside the function

176
00:11:46.360 --> 00:11:48.430
scope, it is going to point to that.

177
00:11:48.910 --> 00:11:53.530
We don't know where it is, wherever it is that this key word is going to point out that.

178
00:11:53.920 --> 00:11:54.270
Right.

179
00:11:54.460 --> 00:11:56.940
So this is going to be it for this lecture.

180
00:11:57.130 --> 00:12:04.210
Now we know what the this keyword is, what it does and how it provides us with, like, this dynamic

181
00:12:04.210 --> 00:12:05.110
flexibility.

182
00:12:05.290 --> 00:12:05.650
Right.

183
00:12:07.090 --> 00:12:11.740
And and by the way, that's why did this key word exists.

184
00:12:12.760 --> 00:12:21.110
It exists, it was created so we can invoke functions in these different contexts.

185
00:12:21.610 --> 00:12:22.900
That's it for this nature.

186
00:12:22.960 --> 00:12:24.490
See you guys in the next one.

