WEBVTT
1
00:00:01.830 --> 00:00:08.820
Hi, everyone, welcome to the second part of the matching of patterns.

2
00:00:10.410 --> 00:00:17.610
All right, so what I'm going to do is I'm just going to say matching part one plus part two.

3
00:00:17.610 --> 00:00:20.340
So let's provide to here.

4
00:00:21.060 --> 00:00:23.730
So we this is part one and part two.

5
00:00:24.150 --> 00:00:29.520
So I should probably change this, these names, but I'm not going to so I'm just going to leave it

6
00:00:29.520 --> 00:00:29.950
like that.

7
00:00:30.420 --> 00:00:34.240
So inside this fourth example, we are going to change the method.

8
00:00:34.800 --> 00:00:37.760
Now we will we are getting the match to word.

9
00:00:37.770 --> 00:00:43.890
OK, so whichever word matches our criteria of this regular expressions.

10
00:00:44.370 --> 00:00:44.760
Right.

11
00:00:45.780 --> 00:00:52.300
And now we want to get the word we don't want to know whether or not that word exists.

12
00:00:52.470 --> 00:00:55.620
So what the test method gave us was a boolean.

13
00:00:55.950 --> 00:01:04.680
So it told us whether that pattern that we have been looking inside that specific sentence is, is the

14
00:01:04.680 --> 00:01:06.630
pattern exists.

15
00:01:06.630 --> 00:01:12.000
Does the Pernot is does the pattern exist inside the sentence or it doesn't.

16
00:01:12.780 --> 00:01:15.270
So it was just like true or false?

17
00:01:15.270 --> 00:01:16.260
It exists.

18
00:01:16.410 --> 00:01:16.860
True.

19
00:01:17.010 --> 00:01:18.060
It doesn't exist.

20
00:01:18.330 --> 00:01:18.840
False.

21
00:01:19.140 --> 00:01:23.560
Now, not only we want to know, but we want to grab it as well.

22
00:01:23.580 --> 00:01:25.170
We want to use that.

23
00:01:27.230 --> 00:01:28.160
Word as well.

24
00:01:28.190 --> 00:01:31.990
OK, so we need to grab it, we will we want to print it to the council.

25
00:01:32.510 --> 00:01:32.900
All right.

26
00:01:33.050 --> 00:01:38.060
So what I want to do is I'm going to create our Regg for X.

27
00:01:38.060 --> 00:01:39.770
So this is the fourth example.

28
00:01:40.070 --> 00:01:42.310
I'm sure you are getting the gist of this.

29
00:01:42.860 --> 00:01:43.250
All right.

30
00:01:43.340 --> 00:01:45.700
And in here, we are going to provide our pattern.

31
00:01:45.950 --> 00:01:51.500
So what it is that what is the word that we're looking for so we could go ahead.

32
00:01:52.490 --> 00:01:55.190
And we could look for a fox.

33
00:01:55.430 --> 00:02:00.500
All right, we could look for a fox, and I'm just going to provide the that in here.

34
00:02:00.830 --> 00:02:01.190
All right.

35
00:02:01.340 --> 00:02:08.810
So we could go ahead and we could say I we could provide the flock because in case the fox is upper

36
00:02:08.810 --> 00:02:11.660
case or lower case, we don't care about that.

37
00:02:11.900 --> 00:02:16.460
We just want to grab this fox, even though we know that this fox is lower case.

38
00:02:16.670 --> 00:02:20.840
But imagine you have like 10 pages of text.

39
00:02:20.840 --> 00:02:22.780
How would you find Fox in that?

40
00:02:22.940 --> 00:02:24.920
That's why you use regular expression.

41
00:02:25.070 --> 00:02:29.570
If Fox is right in front of you, you don't need to use regular expressions in the first place.

42
00:02:29.870 --> 00:02:32.670
You use it because you don't know what you're looking.

43
00:02:32.690 --> 00:02:34.250
You just provide the pattern.

44
00:02:34.430 --> 00:02:38.840
You don't know whether or not that pattern exists within that text.

45
00:02:39.050 --> 00:02:42.020
That's why we use we use the test method.

46
00:02:42.230 --> 00:02:47.780
The test method told us, yes, whatever you're looking for, it does exist.

47
00:02:48.500 --> 00:02:51.380
But it didn't give us any way of grabbing it.

48
00:02:51.380 --> 00:02:55.450
But the match method is going to allow us to grab it.

49
00:02:55.850 --> 00:03:00.650
So let's copy these two lines right in here and let's come in them.

50
00:03:00.650 --> 00:03:06.410
And so this is going to be four, right?

51
00:03:06.560 --> 00:03:09.820
But instead of the test, we are going to go with the match method.

52
00:03:10.160 --> 00:03:12.800
So we are going to grab our sentence first.

53
00:03:13.490 --> 00:03:13.880
Right.

54
00:03:14.060 --> 00:03:18.980
And then we want to make sure what it is that we want to match it to that sentence.

55
00:03:19.430 --> 00:03:26.260
So first, we want to we want to test we want to test this with that sentence.

56
00:03:26.450 --> 00:03:29.990
Now we want to match the sentence with this regular expression.

57
00:03:30.470 --> 00:03:35.240
And in here, what I'm going to do is I'm going to pass in our for X.

58
00:03:36.260 --> 00:03:42.950
And I'm going to say it and it is going to give us that, and indeed this is an array, so it looks

59
00:03:42.950 --> 00:03:43.710
like an array.

60
00:03:43.760 --> 00:03:44.770
So it behaves.

61
00:03:44.780 --> 00:03:46.130
It is an array, actually.

62
00:03:47.560 --> 00:03:53.680
All right, and it gives us all this information, so if I zoom out, it says we have the first index

63
00:03:53.680 --> 00:03:54.850
is going to be Fox.

64
00:03:55.030 --> 00:03:57.100
It is the word that we are looking for.

65
00:03:57.250 --> 00:04:06.160
So now using our index, we know how we can extract the word fox to use it in anywhere, anywhere,

66
00:04:06.160 --> 00:04:07.370
anywhere else we want.

67
00:04:07.990 --> 00:04:11.850
So it gives us which index it is that it starts.

68
00:04:11.870 --> 00:04:12.300
All right.

69
00:04:12.490 --> 00:04:19.000
So if I count one, two, three, four, five, six, seven, eight, nine, ten, I know it's silly,

70
00:04:19.000 --> 00:04:23.860
but I got to count 11, 12, 13, 14, 15, 16.

71
00:04:24.160 --> 00:04:26.800
So it starts right at the index of 16.

72
00:04:27.430 --> 00:04:28.940
Oh, it starts from zero.

73
00:04:28.990 --> 00:04:34.480
Now, the index of this is 16 because I started from one, but the indices, they start from zero.

74
00:04:35.230 --> 00:04:35.700
All right.

75
00:04:35.710 --> 00:04:38.080
And this is where the input actually is.

76
00:04:38.090 --> 00:04:42.830
So we can grab the input, we can grab the fox, we can grab whatever it is that we want.

77
00:04:43.420 --> 00:04:46.630
So this is what the match method is going to give us.

78
00:04:46.630 --> 00:04:49.420
The match method is going to give us that word.

79
00:04:49.570 --> 00:04:54.730
And in case we don't have it, we are going to get it now because we don't have it.

80
00:04:55.810 --> 00:05:00.880
So I'm just going to provide Fox and I'm going to provide box as well.

81
00:05:01.540 --> 00:05:08.720
So you get the gist, you know, that we do get now in the regular expressions as well.

82
00:05:10.090 --> 00:05:12.160
So this is our example.

83
00:05:12.170 --> 00:05:14.560
Number four, let's dive into the example.

84
00:05:14.560 --> 00:05:16.390
Number five in the example.

85
00:05:16.390 --> 00:05:21.130
Number five, we want to grab the match words.

86
00:05:21.910 --> 00:05:24.700
Now, so far, we used to grab only one word.

87
00:05:24.940 --> 00:05:26.820
What if you want to grab more than that?

88
00:05:27.130 --> 00:05:32.770
So for that, what we are going to do is you are going to use the gif like, all right, so let's create

89
00:05:32.770 --> 00:05:34.350
our regular expressions.

90
00:05:34.960 --> 00:05:35.920
By this time.

91
00:05:35.920 --> 00:05:40.030
I know you you get what the regular expressions are, what they do.

92
00:05:40.330 --> 00:05:45.460
So because there are two the inside the sentence, I want to grab both of them.

93
00:05:45.460 --> 00:05:48.790
But one of these is lower upper case.

94
00:05:48.790 --> 00:05:54.040
The other one is lower case or I'm not sure which is upper case war, which is lower case.

95
00:05:54.040 --> 00:05:58.000
I'm just going to provide the if like just to ignore the case sensitiveness.

96
00:05:58.180 --> 00:06:05.260
And if I provide the gif, like we are going to grab all of all of the occurrences of this THC inside

97
00:06:05.260 --> 00:06:06.040
the sentence.

98
00:06:07.390 --> 00:06:11.950
So let's copy this to put them right here uncommented.

99
00:06:14.420 --> 00:06:22.190
And I'm just going to say five, and when I say it, we get twitchy, uppercase, lowercase, because

100
00:06:22.190 --> 00:06:26.630
it gives us all the occurrences and if I remove it, we get only the first occurrence.

101
00:06:27.110 --> 00:06:27.380
G.

102
00:06:27.450 --> 00:06:30.070
Gisli gives us all the occurrences that are there.

103
00:06:30.620 --> 00:06:38.630
So the third the sixth example is going to be we are getting the match words with the dot notation.

104
00:06:38.700 --> 00:06:44.620
OK, so what I'm going to do before that is I'm just going to come in this one out.

105
00:06:44.630 --> 00:06:46.330
I hope you're not getting confused.

106
00:06:46.850 --> 00:06:50.360
So this is the wild card character.

107
00:06:50.360 --> 00:06:52.580
This dot is the wild card character.

108
00:06:52.880 --> 00:06:59.600
If you just provide the dots there, it is going to grab everything there is inside that that string.

109
00:06:59.840 --> 00:07:07.880
So we are going to say a reg six X and we are going to say that what it is that we don't know what the

110
00:07:07.910 --> 00:07:09.130
starting letter is.

111
00:07:09.140 --> 00:07:10.760
So I'm just going to provide a dot.

112
00:07:10.910 --> 00:07:17.450
But I do know the middle character is oh, and gosh, I don't know what the ending character is.

113
00:07:17.450 --> 00:07:24.320
So I'm just going to provide another dot and I'm going to say, gee, I want to grab all instances of

114
00:07:24.320 --> 00:07:24.880
this.

115
00:07:25.580 --> 00:07:31.540
So we are just going to print it to the console and console will tell us what we have selected.

116
00:07:31.550 --> 00:07:37.070
So let's change this to six set.

117
00:07:37.400 --> 00:07:42.710
Now we get row, we get Fox, we get space over and we get done.

118
00:07:42.770 --> 00:07:43.820
And why do we do?

119
00:07:43.850 --> 00:07:44.750
Why do we get that?

120
00:07:45.110 --> 00:07:48.200
So we don't care what the before character is.

121
00:07:48.200 --> 00:07:49.640
That's why we provide that.

122
00:07:49.640 --> 00:07:50.960
It could it be anything?

123
00:07:51.350 --> 00:07:53.090
It could be anything.

124
00:07:53.960 --> 00:07:59.600
We only care that in the middle it is going to have an hour and we don't care what what it has at the

125
00:07:59.600 --> 00:07:59.930
end.

126
00:08:00.290 --> 00:08:08.450
So take this, for example, r o w so we don't care what's in the at the start, which is like keep

127
00:08:08.450 --> 00:08:11.240
in mind that this is a three character word.

128
00:08:11.510 --> 00:08:17.810
So even though Brown is like a five character word, we have just selected the three of the three which

129
00:08:17.810 --> 00:08:19.070
are inside there.

130
00:08:19.520 --> 00:08:25.280
So this is a regular expression is really, really delicate when it comes to finding patterns.

131
00:08:25.370 --> 00:08:30.110
And this is why this is really advanced finding and searching for patterns.

132
00:08:30.110 --> 00:08:32.120
That's why we use regular expressions.

133
00:08:32.450 --> 00:08:35.360
So it doesn't care about the B, it doesn't care about the end.

134
00:08:35.539 --> 00:08:43.669
It just cares about the R O.W. because this r O.W. matches this pattern because we have any character

135
00:08:43.669 --> 00:08:46.850
and then we have O and we then we have another any character.

136
00:08:47.300 --> 00:08:53.180
So it matches the r o r o w the fox, the space of even this one.

137
00:08:53.540 --> 00:08:59.840
Like we have a space here then we have O and then we have we we don't care what comes before V what

138
00:08:59.840 --> 00:09:00.320
character.

139
00:09:00.320 --> 00:09:02.920
We don't care what, what character comes after.

140
00:09:03.200 --> 00:09:08.630
We just care that there should be a V a sorry an O in the middle and then we get dog as well.

141
00:09:09.720 --> 00:09:12.340
All right, so let's do this.

142
00:09:12.360 --> 00:09:18.110
I'm just going to copy it down down below and just provide one dot.

143
00:09:18.480 --> 00:09:26.970
This is the wild card character and it is going to grab all of the instances of all of the characters

144
00:09:26.970 --> 00:09:27.930
inside the string.

145
00:09:27.930 --> 00:09:33.250
And you can see all of them right here, one by one, the quick brown fox, all of them.

146
00:09:33.720 --> 00:09:37.140
So this is called also called the wild card character.

147
00:09:38.460 --> 00:09:40.350
Now, this is example number six.

148
00:09:40.350 --> 00:09:43.620
Let's dive into the example number seven.

149
00:09:43.800 --> 00:09:50.280
And in the example, number seven, we are going to use the brackets, not the text editor, but the

150
00:09:50.580 --> 00:09:51.150
symbols.

151
00:09:51.600 --> 00:09:55.160
So we we are getting the matched characters with the brackets.

152
00:09:55.440 --> 00:09:58.650
So whenever we use brackets, we are looking for.

153
00:09:59.620 --> 00:10:08.230
What is that we are looking for specific range of characters or specific characters that we are looking

154
00:10:08.230 --> 00:10:08.570
for.

155
00:10:08.920 --> 00:10:15.220
So I'm just going to say a range of seven X and now what it is that we are looking for.

156
00:10:15.220 --> 00:10:17.170
First off, let's provide our brackets.

157
00:10:17.470 --> 00:10:21.250
So I'm looking for all the B's, all the D and all the edges.

158
00:10:22.080 --> 00:10:27.520
OK, and let's see how many B's D and X we have.

159
00:10:28.300 --> 00:10:33.570
So let's come in them and let's grab this six and provide a seven.

160
00:10:33.880 --> 00:10:35.230
And now we can see.

161
00:10:35.230 --> 00:10:42.700
Oh, we should now you can see because we don't have the gif, like we can get only one instance of

162
00:10:42.730 --> 00:10:44.140
the first thing that we find.

163
00:10:44.440 --> 00:10:49.060
So out of the BD edge which one comes first inside the sentence.

164
00:10:49.450 --> 00:10:56.380
So if I come on top we can see that out of those three, which is the first character that comes in

165
00:10:56.380 --> 00:10:59.710
first, are firstly inside the string.

166
00:11:00.010 --> 00:11:04.260
But if I provide the G flag in here and save it, we get all of them.

167
00:11:04.480 --> 00:11:12.350
So we have to choose A one B and one inside that regular inside that sentence.

168
00:11:12.370 --> 00:11:19.930
And finally, for our final example, we are going to grab the alphabets.

169
00:11:20.200 --> 00:11:20.680
Right.

170
00:11:20.860 --> 00:11:27.160
So this is getting the matched characters of Alphabet with brackets.

171
00:11:27.370 --> 00:11:34.290
So we want to know which alphabet, which letters of the alphabet exist within this strength.

172
00:11:34.600 --> 00:11:35.610
We want to know that.

173
00:11:36.070 --> 00:11:39.270
So for that, I'm going to create another regular expression.

174
00:11:40.090 --> 00:11:41.800
So how do we do that?

175
00:11:41.980 --> 00:11:48.640
First off, let's open our brackets and we want to find the characters in the alphabet from all the

176
00:11:48.640 --> 00:11:52.450
way to Z, and we want to grab all instances of that.

177
00:11:52.450 --> 00:11:54.640
And we want to ignore the case sensitiveness.

178
00:11:55.390 --> 00:11:57.580
Very, very simple, right?

179
00:11:57.580 --> 00:12:02.580
That's why we have started with the basics and now we are building on that and the basics.

180
00:12:03.280 --> 00:12:06.690
So let's grab this and let's put it eight.

181
00:12:07.870 --> 00:12:14.470
So these are all the letters that we have in here, all eight from all the way to Z.

182
00:12:14.980 --> 00:12:15.340
All right.

183
00:12:15.460 --> 00:12:20.910
We have selected all instances of all instances of these letters.

184
00:12:20.920 --> 00:12:21.520
So.

185
00:12:21.670 --> 00:12:23.070
So this is our THP.

186
00:12:23.080 --> 00:12:30.030
This is the quick brown fox jumps over THP the lazy duck.

187
00:12:30.520 --> 00:12:30.850
All right.

188
00:12:30.850 --> 00:12:35.230
So we have selected all that and we have ignored the case sensitiveness.

189
00:12:35.920 --> 00:12:38.080
So this is going to be it for this lecture.

190
00:12:38.080 --> 00:12:43.090
In the next lecture, we're going to have the matching part three.

191
00:12:43.130 --> 00:12:44.350
See you guys then.

