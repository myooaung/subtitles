WEBVTT
1
00:00:01.560 --> 00:00:02.440
Hi, everyone.

2
00:00:02.580 --> 00:00:07.380
In this election, we will be creating our circles on the on the screen.

3
00:00:08.170 --> 00:00:08.730
All right.

4
00:00:08.970 --> 00:00:15.540
So what I'm going to do is I'm going to come on top of our game loop and in here I'm going to say I'm

5
00:00:15.540 --> 00:00:19.080
going to create the I'm going to call it the balls array.

6
00:00:20.440 --> 00:00:26.150
Right, and first off, let's go ahead and let's declare that as an empty threat.

7
00:00:26.210 --> 00:00:32.710
I'm just going to say Iraq equals an empty array and then we are going to iterate over that.

8
00:00:32.850 --> 00:00:33.210
Right.

9
00:00:33.220 --> 00:00:35.080
And we are going to populated.

10
00:00:35.380 --> 00:00:35.750
All right.

11
00:00:35.980 --> 00:00:40.740
So what I'm going to do is I'm going to say four letters are equal to zero.

12
00:00:41.020 --> 00:00:44.250
So the eye or the loop variable is going to start from zero.

13
00:00:44.380 --> 00:00:46.210
And how many times it should iterate?

14
00:00:46.390 --> 00:00:48.440
It should iterate 500 times.

15
00:00:48.850 --> 00:00:50.920
So I want to create 500 circles.

16
00:00:50.950 --> 00:00:52.930
I want wanted to be 500 times.

17
00:00:53.620 --> 00:00:56.350
And each time we are going to incremented by one.

18
00:00:56.380 --> 00:00:57.340
So first things first.

19
00:00:57.640 --> 00:00:59.890
Let's create the radius of a circle.

20
00:01:00.970 --> 00:01:03.190
The radius of the circle is going to be 30.

21
00:01:03.760 --> 00:01:07.620
The second thing is going to be we are going to randomize the exposition.

22
00:01:08.470 --> 00:01:11.560
So I'm going to say math dot random.

23
00:01:13.410 --> 00:01:21.960
And because we want to randomize the the exposition within the canvas canvases with so I'm going to

24
00:01:21.960 --> 00:01:29.520
say canvas element done with now here is where where we implement that second part of the detection,

25
00:01:29.790 --> 00:01:34.110
collision detection, and that is whenever we create the circles.

26
00:01:34.320 --> 00:01:34.830
You know what?

27
00:01:34.830 --> 00:01:36.630
I'm not going to implemented as of now.

28
00:01:36.630 --> 00:01:43.290
I'm going to implement it later so you can really see what I mean by, like, circles not being created

29
00:01:43.470 --> 00:01:45.600
off the canvas originally.

30
00:01:46.140 --> 00:01:49.200
So let's change this to the Y.

31
00:01:49.590 --> 00:01:54.390
The Y position should be within the canvas height.

32
00:01:55.140 --> 00:01:55.470
Right.

33
00:01:55.470 --> 00:01:58.320
And then I'm going to create the X velocity.

34
00:01:58.320 --> 00:02:02.160
So X V is going to be our random number.

35
00:02:02.160 --> 00:02:04.000
So random function.

36
00:02:05.280 --> 00:02:08.639
Now I think it was the previous project.

37
00:02:08.639 --> 00:02:12.570
I'm not really sure about that, where we talked about some sort of.

38
00:02:14.750 --> 00:02:27.830
Like having to come up with a kind of a random sine function, and for that, if we had like evalu which

39
00:02:27.860 --> 00:02:31.400
was greater than zero point five, I think it was the stars.

40
00:02:31.430 --> 00:02:32.600
I'm not really sure about that.

41
00:02:32.630 --> 00:02:35.720
You guys could go ahead and check that out and you know what I mean.

42
00:02:35.720 --> 00:02:41.030
If you have completed those projects, like if the value was above point five, we would return in a

43
00:02:41.030 --> 00:02:42.640
positive sign.

44
00:02:42.650 --> 00:02:46.910
And if it was less than that, we would return a negative sign in this lecture.

45
00:02:46.940 --> 00:02:52.190
What I'm going to do is I'm going to come up with another way of doing that and I'm going to say minus

46
00:02:52.190 --> 00:02:53.240
zero point five.

47
00:02:54.480 --> 00:02:56.670
And I'm going to grab this entire thing.

48
00:02:57.800 --> 00:03:05.230
OK, and I'm going to add on plus sorry times to so what is this going to give me?

49
00:03:05.420 --> 00:03:09.290
So the highest number that the math that random is going to give me is one.

50
00:03:09.650 --> 00:03:14.030
So one minus zero point five, we get a positive number, right.

51
00:03:14.030 --> 00:03:14.780
Times two.

52
00:03:15.290 --> 00:03:19.210
And what is this, the smallest number that this matter random is going to give us?

53
00:03:19.220 --> 00:03:22.310
And that is going to be zero zero zero oops.

54
00:03:22.820 --> 00:03:29.540
So zero minus zero point five, we get a negative number, a negative sign and that is going to give

55
00:03:29.540 --> 00:03:30.400
us a negative sign.

56
00:03:30.410 --> 00:03:36.800
So each time we refresh the page, one of our balls is going to be moving towards the positive direction

57
00:03:37.640 --> 00:03:43.640
with a positive velocity and the other ball is going to be towards the negative direction with a negative

58
00:03:44.120 --> 00:03:44.770
velocity.

59
00:03:45.200 --> 00:03:50.830
That's how we randomize velocity and also the velocity direction.

60
00:03:51.250 --> 00:03:52.190
It's very simple.

61
00:03:53.360 --> 00:03:59.840
And then what I'm going to do is I'm going to grab our red color and I'm going to say math dot random.

62
00:03:59.870 --> 00:04:04.700
So we are going to say math are random times 255.

63
00:04:05.420 --> 00:04:05.750
Right.

64
00:04:05.750 --> 00:04:12.620
And I'm going to say I'm going to call math that seal on this because math that seal what it is going

65
00:04:12.620 --> 00:04:15.740
to give us is going to give us the highest number.

66
00:04:16.130 --> 00:04:19.600
Whenever we are rounding up, we are going to give us the highest number.

67
00:04:19.910 --> 00:04:26.270
So if we say one point, if the math are random, is going to give us zero point nine, we are always

68
00:04:26.270 --> 00:04:27.090
going to get one.

69
00:04:27.230 --> 00:04:34.340
So one times 255, we will determine what the range for our color is going to be.

70
00:04:34.700 --> 00:04:37.250
The same thing is going to go for the green.

71
00:04:39.410 --> 00:04:43.130
And let's right green here and also blue.

72
00:04:44.240 --> 00:04:49.940
So finally, what I want to do is I want to grab all of these because we do have our constructor right

73
00:04:49.940 --> 00:04:56.360
here and I want to instantiate this run balls and I want to push all them here so we can actually access

74
00:04:56.390 --> 00:04:59.390
these this keywords that this keywords in here.

75
00:04:59.660 --> 00:05:02.980
So we cannot access them because they don't have any value.

76
00:05:03.170 --> 00:05:04.730
So let's provide them with value.

77
00:05:04.730 --> 00:05:09.740
And I'm going to say here, I'm going to grab our balls are right and I'm going to say dot push.

78
00:05:10.010 --> 00:05:11.620
What do we want to push to that array?

79
00:05:11.870 --> 00:05:16.190
We want to push the an instantiation of the run balls class.

80
00:05:17.570 --> 00:05:22.830
And the exposition is going to be the exposition that we have provided here, and then we have the wife

81
00:05:22.880 --> 00:05:32.360
position, we have the X velocity, the Y velocity, we have our radius, we have our the red color,

82
00:05:32.360 --> 00:05:34.990
the green color and the blue color.

83
00:05:35.630 --> 00:05:36.440
So let's save it.

84
00:05:36.560 --> 00:05:42.890
And now what I want what I have to do is I need to call I need to grab this array and I need to update

85
00:05:42.890 --> 00:05:47.020
it within this made balls as well.

86
00:05:47.240 --> 00:05:49.550
That's when we can actually see them.

87
00:05:49.580 --> 00:05:51.980
So what I'm going to do is I'm going to create a for a loop.

88
00:05:53.340 --> 00:05:58.710
And I'm going to say for Alat Kay, this time, I'm going to grab Kay and I'm going to say it should

89
00:05:58.710 --> 00:06:04.580
be equal to zero at first and then case should go all the way to balls, a red dot length.

90
00:06:04.770 --> 00:06:08.110
So we have created all four circles within this array.

91
00:06:08.340 --> 00:06:14.910
Now we need to iterate over this array and each in each iteration, you know that this request animation

92
00:06:14.910 --> 00:06:18.190
frame is going to run this function 60 times for one second.

93
00:06:18.540 --> 00:06:24.030
So in each iteration, we are going to print one circle to the screen.

94
00:06:24.510 --> 00:06:27.990
It is going to happen so fast that we should not see any lagging.

95
00:06:28.830 --> 00:06:30.560
So what do we want to do?

96
00:06:30.570 --> 00:06:32.160
We want to grab our balls array.

97
00:06:32.610 --> 00:06:38.430
And from there, this is going to iterate over each of these each of the items within that ball.

98
00:06:38.550 --> 00:06:44.460
And then we are going to update our advance function room to call that function here as well.

99
00:06:44.700 --> 00:06:46.500
So let's say that let's come here.

100
00:06:47.190 --> 00:06:55.020
Why we do not see anything and then we log that and let me go to the console if there are any errors

101
00:06:55.020 --> 00:06:55.380
there.

102
00:06:56.740 --> 00:07:05.260
OK, so let's come to the we don't have any errors there, and so we have what I'm going to do is I'm

103
00:07:05.260 --> 00:07:08.020
just going to go ahead and I'm going to cancel this.

104
00:07:08.420 --> 00:07:08.890
All right.

105
00:07:08.920 --> 00:07:11.310
So is there anything wrong there?

106
00:07:11.320 --> 00:07:14.180
So I was right.

107
00:07:14.200 --> 00:07:15.850
Let's get to the console.

108
00:07:16.060 --> 00:07:16.570
There we go.

109
00:07:16.570 --> 00:07:19.150
So you can see that we have 500 different.

110
00:07:19.520 --> 00:07:25.650
And if I bring this up and if I open this, you can see that in each of these we have a run balls,

111
00:07:25.660 --> 00:07:32.110
constructor or class, and it is going to have a different blue color, a different blue color, green

112
00:07:32.110 --> 00:07:39.790
radius, red white exposition, the velocity, the Y position, the velocity, everything.

113
00:07:39.790 --> 00:07:41.920
Every time it is going to be different.

114
00:07:43.330 --> 00:07:43.690
Right.

115
00:07:43.700 --> 00:07:44.410
And.

116
00:07:47.030 --> 00:07:49.850
Let's see what's happening here.

117
00:07:51.690 --> 00:07:59.930
All right, so I'm going to come here, we have called our update balance here and this drawer balance,

118
00:08:00.300 --> 00:08:02.400
this is responsible for drawing that.

119
00:08:02.640 --> 00:08:06.420
And the way that I'm looking at it is we have not called it.

120
00:08:06.430 --> 00:08:10.350
So I'm going to call that within this update balance function.

121
00:08:10.530 --> 00:08:13.590
So I'm going to say this dot draw, boss.

122
00:08:14.470 --> 00:08:17.620
And let's call it let's save it and there we go.

123
00:08:18.340 --> 00:08:19.690
Here are our circles.

124
00:08:19.700 --> 00:08:21.130
I'm just going to refresh the page.

125
00:08:21.280 --> 00:08:28.160
You can see that the radius, the radar is really big and there is still seems to be some problem here.

126
00:08:28.510 --> 00:08:35.919
Now, you can see that, for example, if we track one ball, for example, this this green ball, I

127
00:08:35.919 --> 00:08:38.650
think this is green or this orange one.

128
00:08:38.650 --> 00:08:43.299
You can see when it hits the page, the side of the page, it bounces off and there it goes.

129
00:08:43.570 --> 00:08:47.400
It goes up this light orange and it should bounce off this as well.

130
00:08:47.650 --> 00:08:49.720
It did bounce off and it is coming down.

131
00:08:49.730 --> 00:08:52.210
We are going to track trace this ball.

132
00:08:52.240 --> 00:08:52.990
There it is.

133
00:08:53.000 --> 00:08:53.630
There we go.

134
00:08:53.650 --> 00:08:54.160
Come on.

135
00:08:54.160 --> 00:08:54.780
Come on, come on.

136
00:08:55.090 --> 00:08:57.030
It should bounce off this edge as well.

137
00:08:58.540 --> 00:09:02.360
So there we go, it should bounce off of it.

138
00:09:02.740 --> 00:09:06.810
It bounced off and finally the left side, it is going there.

139
00:09:07.000 --> 00:09:14.440
So this is the ball that we are tracking and there we go so that the collision detection for bouncing

140
00:09:14.440 --> 00:09:16.000
off, that is complete.

141
00:09:16.180 --> 00:09:21.400
But you can see that like, for example, this dark blue one, it is caught in the bottom edge.

142
00:09:21.610 --> 00:09:23.380
This is caught in the top edge.

143
00:09:23.380 --> 00:09:27.670
The these these three balls that have been caught in the left.

144
00:09:27.970 --> 00:09:29.980
These a lot of them have been caught on.

145
00:09:29.980 --> 00:09:30.420
Right.

146
00:09:30.580 --> 00:09:31.550
We need to come.

147
00:09:31.960 --> 00:09:34.000
We need to accommodate for those as well.

148
00:09:34.360 --> 00:09:36.190
So I just wanted to show you that.

149
00:09:36.190 --> 00:09:39.630
And now what I'm going to do is I'm going to do that logic.

150
00:09:39.880 --> 00:09:48.700
So what we are going to do is for the right side, we need to subtract the whole diameter of that circle

151
00:09:48.850 --> 00:09:56.830
from the canvas width so the circle doesn't even go like one pixel off that the edge of the screen and

152
00:09:56.830 --> 00:10:00.010
the diameter of any circle is going to be radius.

153
00:10:00.010 --> 00:10:07.540
Time to see if I know you can see that there is no circle being cut in the right side of the screen.

154
00:10:08.110 --> 00:10:08.360
Right.

155
00:10:08.680 --> 00:10:10.680
So what are the left side of the screen?

156
00:10:10.930 --> 00:10:14.590
We know that the left side of the screen is going to be zero.

157
00:10:14.620 --> 00:10:21.610
So what I'm going to do is I'm going to add on the radius to this and it is going to take care of the

158
00:10:22.000 --> 00:10:24.550
right side of the sorry, the left side of the screen.

159
00:10:24.820 --> 00:10:28.830
And then you can see there are inner circles I cut in there as well.

160
00:10:29.050 --> 00:10:31.390
So the same thing is going to go for the height.

161
00:10:31.630 --> 00:10:34.000
So what I'm going to do is I'm just going to copy that.

162
00:10:35.440 --> 00:10:41.690
Pasted right here, and I'm going to change this to ijtihad it and it should work.

163
00:10:41.950 --> 00:10:50.440
So basically what we did was for the positive direction we subtracted the entire diameter and we added

164
00:10:50.470 --> 00:10:55.550
the radius because for the negative direction, we need to add on the radius.

165
00:10:55.990 --> 00:11:06.220
You remember that in here, that if I add if I subtract the radius from the X position or if I add the

166
00:11:06.220 --> 00:11:11.770
radius to the zero, this the collision detection is still going to work.

167
00:11:12.100 --> 00:11:20.950
Because if I move this argument to this side of this inequality in mathematics, this the sign of it

168
00:11:20.950 --> 00:11:22.500
is going to change to positive.

169
00:11:22.930 --> 00:11:27.130
So minus this, the radius is going to be zero plus this radius.

170
00:11:27.460 --> 00:11:33.190
So if you want if we want to detect the collision on the negative side of the screen, which is left

171
00:11:33.190 --> 00:11:37.100
in top, we only have to add added on to the zero.

172
00:11:37.210 --> 00:11:38.080
That's what we did.

173
00:11:38.080 --> 00:11:39.550
We added on to that.

174
00:11:41.000 --> 00:11:47.300
And now you can see that all of our circles are bouncing off, and in the time of creating the circles,

175
00:11:47.300 --> 00:11:50.430
each time we refresh the page, we create the circus.

176
00:11:50.450 --> 00:11:57.380
They will be created within the country within the constraints of this canvas.

177
00:11:57.800 --> 00:12:00.900
And with this, our lecturer comes to an end.

178
00:12:00.920 --> 00:12:02.600
See you guys in the next one.

