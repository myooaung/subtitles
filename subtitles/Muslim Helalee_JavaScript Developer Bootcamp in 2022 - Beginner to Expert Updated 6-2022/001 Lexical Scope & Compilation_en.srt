1
00:00:01,330 --> 00:00:02,290
Hi, everyone.

2
00:00:02,500 --> 00:00:08,910
In this next year, we are going to talk about lexical scope and compilation, right?

3
00:00:09,160 --> 00:00:17,800
So here I have a code snippet, but before diving into that, I want to tell you one thing, and then

4
00:00:17,800 --> 00:00:21,920
we are going to jump into this lecture and we are going to formally start this lecture.

5
00:00:22,360 --> 00:00:24,600
Now, I know we have talked about the lexicon.

6
00:00:24,940 --> 00:00:27,190
We have talked about scopes before.

7
00:00:27,670 --> 00:00:37,750
And the reason that I want to restate all this is because now we are looking at JavaScript.

8
00:00:39,100 --> 00:00:39,850
Exactly.

9
00:00:39,850 --> 00:00:47,290
Or specifically at the inner workings of JavaScript, how JavaScript executes code under the hood,

10
00:00:47,410 --> 00:00:49,630
how JavaScript works under the hood.

11
00:00:49,660 --> 00:00:56,590
So now we are popping up the Howard and we want to take a look at the inner workings of JavaScript and

12
00:00:56,590 --> 00:00:58,210
the inner workings of JavaScript.

13
00:00:58,240 --> 00:01:05,800
They start with with the lexical scope because JavaScript is a lexically scoped language.

14
00:01:05,830 --> 00:01:15,910
OK, so now before doing and also I want to tell you that the this chapter and the next two chapters,

15
00:01:16,240 --> 00:01:19,120
we are going to dive really deep into theory.

16
00:01:19,160 --> 00:01:25,000
So there is not going to be a lot of, like, code snippets or a lot of like challenges or exercises

17
00:01:25,000 --> 00:01:25,990
or examples.

18
00:01:26,290 --> 00:01:30,850
They're not there are not maybe like like like five examples and that's it.

19
00:01:31,060 --> 00:01:35,750
But we are going to dive very, very deep into these theoretical parts.

20
00:01:36,040 --> 00:01:43,000
That's why I've situated these chapters here, because now you know how how how you can manipulate the

21
00:01:43,000 --> 00:01:47,050
DOM, how how to make any website dynamic.

22
00:01:47,050 --> 00:01:49,720
But you should know how JavaScript works.

23
00:01:49,720 --> 00:01:55,360
And if I were to like include these chapters at the start of this course, then that would have scared

24
00:01:55,360 --> 00:01:58,660
you away, because these are really, really advanced topics.

25
00:01:58,660 --> 00:02:06,070
And I and I'm and you should have like beginner to intermediate level knowledge of JavaScript so you

26
00:02:06,070 --> 00:02:08,780
can understand how JavaScript works.

27
00:02:09,039 --> 00:02:14,770
This is ironic that you should be like an intermediate developer to be able to understand how it works,

28
00:02:14,770 --> 00:02:18,520
but this is how it's going to go ahead and be shaped.

29
00:02:18,830 --> 00:02:19,150
All right.

30
00:02:19,150 --> 00:02:20,410
So first things first.

31
00:02:20,410 --> 00:02:21,220
What is scope?

32
00:02:21,580 --> 00:02:24,310
Scope is where we look for things.

33
00:02:25,060 --> 00:02:26,110
What do we look for?

34
00:02:26,320 --> 00:02:32,350
We look for JavaScript identifiers like like this X and this Y in here.

35
00:02:32,590 --> 00:02:41,590
Right now, the primary goals of variables in any JavaScript project are either to assign some think,

36
00:02:41,920 --> 00:02:47,140
OK, to assign something to it or to retrieve its assigned value.

37
00:02:47,590 --> 00:02:51,880
So in this case, what we have is this is a target reference.

38
00:02:52,580 --> 00:02:58,060
I'm just going to write in front of its name and I'm just going to call a target reference because we

39
00:02:58,060 --> 00:02:59,710
are assigning to it so.

40
00:02:59,860 --> 00:03:06,130
So any identifier in JavaScript, it is either a targeted reference or a source reference.

41
00:03:06,460 --> 00:03:12,760
In this case, this is a source reference because we are retrieving its value.

42
00:03:12,760 --> 00:03:13,100
All right.

43
00:03:13,390 --> 00:03:19,300
So whenever you're assigning a value to an identifier, it is a target reference.

44
00:03:19,660 --> 00:03:24,300
And whenever you're not assigning any value to it, it is a source reference.

45
00:03:24,310 --> 00:03:33,700
So those are the two scenarios in which any JavaScript identifier can exist, either target reference

46
00:03:33,700 --> 00:03:34,930
or source reference.

47
00:03:35,230 --> 00:03:35,560
Right.

48
00:03:35,830 --> 00:03:43,360
So when the JavaScript sees this variable, it says, where is the position of this variable?

49
00:03:43,600 --> 00:03:44,610
That is number one.

50
00:03:44,890 --> 00:03:46,540
Where is the position of this variable?

51
00:03:46,750 --> 00:03:49,750
The position of this variable is the global scope.

52
00:03:50,140 --> 00:03:52,180
So it is not inside any block.

53
00:03:52,180 --> 00:03:53,710
It's not inside any function.

54
00:03:53,710 --> 00:03:55,270
It's not inside anything.

55
00:03:55,720 --> 00:03:58,150
It is so it is inside the global scope.

56
00:03:58,450 --> 00:04:01,370
And secondly, what scope does it belong to?

57
00:04:01,630 --> 00:04:03,120
So where is it?

58
00:04:03,130 --> 00:04:04,540
It's inside a scope.

59
00:04:04,810 --> 00:04:06,370
What scope does it belong to?

60
00:04:06,670 --> 00:04:08,560
That scope is the global scope.

61
00:04:08,950 --> 00:04:13,330
Now, JavaScript is not an interpreted language.

62
00:04:13,840 --> 00:04:20,620
JavaScript does not run the code line by line, like line two and then line three and then line five.

63
00:04:20,649 --> 00:04:21,010
Right.

64
00:04:22,210 --> 00:04:27,130
JavaScript is actually a compiled language or parsed.

65
00:04:27,130 --> 00:04:35,350
If you feel better about past, it means that JavaScript requires a processing step called compilation

66
00:04:35,620 --> 00:04:36,760
or a compilation.

67
00:04:36,760 --> 00:04:45,370
Doesn't matter, but it does have a compilation or in an in-between stage that we cannot see.

68
00:04:45,550 --> 00:04:52,780
OK, so the way JavaScript code works is is actually the meaning of all these three chapters.

69
00:04:52,780 --> 00:04:56,190
But I'm going to give you a trailer of that so we have a code.

70
00:04:56,470 --> 00:05:00,610
This code is going to be compiled inside here and then it is going.

71
00:05:00,690 --> 00:05:08,280
To be presented to the PVM or a virtual machine inside this browser, which in case of the Google Chrome

72
00:05:08,280 --> 00:05:13,520
is the V8 engine and that V8 engine is going to execute the JavaScript code.

73
00:05:13,950 --> 00:05:18,990
How does the code is getting executed is actually the compiler theory.

74
00:05:20,010 --> 00:05:28,120
The compiler theory is the theory that, well, arguably all the computer science world is based upon.

75
00:05:28,320 --> 00:05:35,040
So if you understand the compiler theory, basically you understand you you get a six degree, OK,

76
00:05:35,220 --> 00:05:38,840
you are a certified computer science engineer, right?

77
00:05:39,120 --> 00:05:42,010
So there are three stages in compiler theory.

78
00:05:42,030 --> 00:05:48,900
The first stages, Lexing and tokenization, Lexing or tokenization, is the process of converting a

79
00:05:48,900 --> 00:05:53,510
sequence of characters such as in a program or a Web page.

80
00:05:53,520 --> 00:06:02,040
In our case, what page into a sequence of tokens and tokens are strings with an assigned and thus identified

81
00:06:02,040 --> 00:06:02,630
meaning.

82
00:06:02,700 --> 00:06:02,980
Right.

83
00:06:03,870 --> 00:06:05,920
The second stage is passing.

84
00:06:06,750 --> 00:06:09,150
OK, so the first stage is writing this.

85
00:06:09,570 --> 00:06:12,710
The second stage is passing which or compilation.

86
00:06:12,870 --> 00:06:18,150
So we have written our code now the second stage is passing and the passing.

87
00:06:19,620 --> 00:06:27,520
We, we grab all of our tokens and we convert them, OK, we convert them into abstract syntax.

88
00:06:28,350 --> 00:06:32,670
And in this third stage we have our code generation.

89
00:06:32,700 --> 00:06:35,010
So the third part is the code generation.

90
00:06:35,370 --> 00:06:44,040
And in that stage we take our abstract syntax tree and produce other executable forms of this program.

91
00:06:44,430 --> 00:06:51,900
So first off, we write the program, then the program is passed and then after the program is passed,

92
00:06:52,170 --> 00:06:56,790
the code is converted to a program.

93
00:06:56,940 --> 00:07:00,210
After the code is passed, the code is converted to a program.

94
00:07:00,690 --> 00:07:10,800
Now, this shows how a program gets processed from its textual format into some kind of representation

95
00:07:11,010 --> 00:07:12,770
that can be executed.

96
00:07:13,050 --> 00:07:19,920
So the very, very essential and critical stage here is the completion stage or the parsing.

97
00:07:20,700 --> 00:07:23,000
That's why I've given you this example here.

98
00:07:23,310 --> 00:07:32,400
So if JavaScript were to like to interpret this code line by line by line, we would see like a console

99
00:07:32,400 --> 00:07:34,110
log of 10.

100
00:07:34,110 --> 00:07:41,460
We would see inside the log a ten and then we would see an error because we are declaring this constant

101
00:07:41,460 --> 00:07:43,830
variable, but we are not initializing it.

102
00:07:44,100 --> 00:07:51,360
So declaring a variable means that you write the variable and the identifier, but you do not write

103
00:07:51,360 --> 00:07:52,770
the assignment expression.

104
00:07:53,250 --> 00:07:58,640
But if you write that, then it means that you have declared it and you have initialized that variable.

105
00:07:58,950 --> 00:08:04,350
So we cannot declare any constant variables without initializing them.

106
00:08:04,680 --> 00:08:07,200
That's not how constants work, right?

107
00:08:07,470 --> 00:08:14,880
So if I were to save this before, like this constant like just comment out the constant, we can see

108
00:08:14,880 --> 00:08:17,520
that we have 10 here and everything is well.

109
00:08:17,820 --> 00:08:26,670
But if JavaScript were and in interpreted language, if JavaScript interpreted this code, run this

110
00:08:26,670 --> 00:08:32,970
code from top to bottom or line by line, we would see ten and then this error.

111
00:08:33,090 --> 00:08:43,220
But we don't see 10 because there is a compilation step involved here and this shows the compilation.

112
00:08:43,320 --> 00:08:43,740
All right.

113
00:08:43,919 --> 00:08:53,430
That's why I've given you this example now before handing this code over to a VM or to the code execution

114
00:08:53,430 --> 00:08:55,320
engine or to the execution engine.

115
00:08:55,560 --> 00:09:00,570
The JavaScript parses this code, compiles it, and it sees an error here.

116
00:09:00,720 --> 00:09:02,880
And it says that there is an error here.

117
00:09:03,000 --> 00:09:04,560
And what is the error missing?

118
00:09:04,560 --> 00:09:07,050
Initialize your and const declaration.

119
00:09:07,290 --> 00:09:12,360
So we have declared this const, but there is no initialize initialization in here.

120
00:09:12,390 --> 00:09:12,780
Right.

121
00:09:13,670 --> 00:09:14,060
So.

122
00:09:16,270 --> 00:09:19,280
When does actually this compilation happen?

123
00:09:19,300 --> 00:09:27,880
It does not happen and runtime contrary to popular belief that the JavaScript compilation happens at

124
00:09:27,880 --> 00:09:29,930
runtime, but it doesn't happen at runtime.

125
00:09:30,160 --> 00:09:32,830
It is actually a two step process.

126
00:09:33,160 --> 00:09:40,210
The first step is the compilation or the parsing, and the second step is the runtime or the code execution.

127
00:09:40,630 --> 00:09:49,420
OK, now you can think of it as like in this case that we have identifiers, OK, and we have units

128
00:09:49,420 --> 00:09:49,960
of scope.

129
00:09:50,110 --> 00:09:54,480
So our X in here is an identifier and we have units of scope.

130
00:09:54,790 --> 00:09:59,890
So before we have before we have sex, we had functions primarily functions.

131
00:10:00,250 --> 00:10:03,130
But as of a year six, we have blocks as well.

132
00:10:03,310 --> 00:10:09,750
OK, because as a few sex we have left and consed, which we are going to dive very deep.

133
00:10:09,760 --> 00:10:16,030
That's why we have started working through these inner workings with this vare.

134
00:10:16,060 --> 00:10:16,480
Right.

135
00:10:16,660 --> 00:10:17,920
Not the letton concept.

136
00:10:19,090 --> 00:10:24,900
And I'm going to now what I'm going to do is I'm going to give you another code snippet right here.

137
00:10:24,910 --> 00:10:26,220
I'm just going to pasted here.

138
00:10:26,530 --> 00:10:27,700
This is very simple.

139
00:10:27,850 --> 00:10:29,920
And I'm going to comment out this first one.

140
00:10:30,120 --> 00:10:30,490
Right.

141
00:10:30,790 --> 00:10:34,840
And I'm going to say example to now.

142
00:10:34,840 --> 00:10:40,000
What we are going to do is we are going to go over the first stage, which is the compilation.

143
00:10:40,360 --> 00:10:44,640
And in the next lecture, we are going to talk about the code execution.

144
00:10:45,340 --> 00:10:49,430
I think this is like a very good approach.

145
00:10:49,450 --> 00:10:56,380
So in this lecture, what in this front, from now on until the lecture ends, we are going to talk

146
00:10:56,380 --> 00:11:01,030
about the compilation compilation or the passing stage.

147
00:11:01,420 --> 00:11:06,040
And in the next lecture, we are going to talk about how this code is actually executed.

148
00:11:07,200 --> 00:11:09,750
All right, so let's go ahead and start.

149
00:11:09,780 --> 00:11:15,990
So before doing that, I'm just going to because this topic is like a bit difficult and it's a bit dry.

150
00:11:16,640 --> 00:11:20,910
We are going to like and talk about it like like in a fun way.

151
00:11:21,150 --> 00:11:28,350
So think of think of it like we have a scope manager or a Scopa and then we have a compiler.

152
00:11:28,740 --> 00:11:36,720
So whatever you write all this, all of them, they are assigned to their specific scopes and those

153
00:11:36,720 --> 00:11:40,440
assignments, they are handled by the scope manager.

154
00:11:40,650 --> 00:11:45,780
And then before the code execution, we have the compilation stage.

155
00:11:46,020 --> 00:11:53,050
And that compilation stage is the is like handled by the compilation manager or by the compiler.

156
00:11:53,280 --> 00:11:55,500
So we have Scopa and we have compiled.

157
00:11:55,830 --> 00:12:05,760
So before handing this into the JavaScript VM or code or execution engine, we need to create a plan

158
00:12:05,760 --> 00:12:09,210
for all of the identifiers and the scopes.

159
00:12:09,490 --> 00:12:13,390
OK, and that plan we are going to call it the execution plan.

160
00:12:13,890 --> 00:12:15,180
Now think of it like this.

161
00:12:15,300 --> 00:12:17,310
So we have novels or books.

162
00:12:17,670 --> 00:12:18,720
Both of them are the same.

163
00:12:18,730 --> 00:12:26,570
So we have novels in here which are our identifiers and we have scopes here which are our boxes.

164
00:12:26,700 --> 00:12:28,050
So think of it like this.

165
00:12:28,230 --> 00:12:34,080
You have a bunch of novels or a bunch of books and you want to put them inside their specific boxes,

166
00:12:34,390 --> 00:12:34,720
right.

167
00:12:34,950 --> 00:12:39,810
So first off, what do we do as an online one?

168
00:12:40,080 --> 00:12:45,260
Now, in the compilation stage we have, we need to compile this code.

169
00:12:45,630 --> 00:12:53,070
So the first thing that the compiler is going to ask the scope manager is that online eight, what do

170
00:12:53,070 --> 00:12:57,190
we have is we have a declaration, OK?

171
00:12:57,220 --> 00:13:02,220
And inside this declaration, we have an identifier called novel.

172
00:13:02,460 --> 00:13:08,160
And and it asks the scope manager that have you heard of this novel?

173
00:13:08,340 --> 00:13:10,860
Do you know what this identifier is?

174
00:13:11,190 --> 00:13:18,750
And the scope manager is going to say, no, I have not heard of it, but here is your scope.

175
00:13:18,750 --> 00:13:19,950
Here is your box.

176
00:13:20,130 --> 00:13:24,350
You can put the VA novel inside this box.

177
00:13:24,600 --> 00:13:25,890
So what does that box?

178
00:13:26,040 --> 00:13:27,900
That box is the global scope.

179
00:13:27,900 --> 00:13:29,420
And I'm just going to write G.S..

180
00:13:29,970 --> 00:13:31,380
This is the global scope, OK?

181
00:13:31,590 --> 00:13:36,410
And then we are going to come to because this is the compilation stage, not the execution stage.

182
00:13:36,630 --> 00:13:38,480
This is how this would play out.

183
00:13:38,490 --> 00:13:38,840
Right.

184
00:13:40,140 --> 00:13:43,370
So in here, we also have a function declaration.

185
00:13:43,380 --> 00:13:44,840
This is another declaration.

186
00:13:45,060 --> 00:13:49,260
So the compiler is going to ask the scope manager, have you heard about the other book?

187
00:13:49,470 --> 00:13:53,640
The scope manager is going to say no, but here is your box.

188
00:13:53,790 --> 00:13:59,370
You can put this this novel or this book inside this box.

189
00:13:59,520 --> 00:14:00,870
And what is that box?

190
00:14:00,870 --> 00:14:03,690
That box is, again, the global scope.

191
00:14:03,970 --> 00:14:04,320
Right.

192
00:14:04,470 --> 00:14:10,110
And then we are going to come to line 15 and we have another identifier.

193
00:14:10,560 --> 00:14:18,390
And we are going to the compiler is going to ask the same question from the scope manager.

194
00:14:18,390 --> 00:14:24,960
And the compiler is going to ask, have you heard of any identifier called write book?

195
00:14:25,260 --> 00:14:28,920
The scope manager is going to say no, but here is your scope.

196
00:14:28,920 --> 00:14:30,360
What is the scope again?

197
00:14:30,360 --> 00:14:32,820
It is the global scope.

198
00:14:32,820 --> 00:14:40,020
I know I have missed this VA and this VA and but after this function, we are going to go back.

199
00:14:40,020 --> 00:14:45,510
All right, because I'm just coming from top to bottom, because this is the first time that we are

200
00:14:45,510 --> 00:14:46,530
talking about this.

201
00:14:47,760 --> 00:14:50,130
So this is not actually how compilation works.

202
00:14:50,130 --> 00:14:50,970
It works.

203
00:14:51,120 --> 00:14:57,750
It goes into this function and from there it goes into this and it after it compiles this function and

204
00:14:57,750 --> 00:14:59,070
goes inside the function.

205
00:14:59,340 --> 00:15:05,520
But for the sake of understanding and for the sake of teaching, that's why I, I jumped from this function

206
00:15:05,520 --> 00:15:06,260
to this function.

207
00:15:06,720 --> 00:15:07,980
Now this function is done.

208
00:15:07,980 --> 00:15:14,070
And after this, we have no declarations, no formal declarations inside the global scope.

209
00:15:14,370 --> 00:15:16,680
So these are not declarations.

210
00:15:16,680 --> 00:15:18,480
OK, this is our execution code.

211
00:15:18,480 --> 00:15:20,700
We are going to talk about this in our next lecture.

212
00:15:21,780 --> 00:15:28,260
So we are going to come back to our other book now because functions, they have specific scopes for

213
00:15:28,260 --> 00:15:28,480
them.

214
00:15:28,650 --> 00:15:31,590
OK, so think of this entire thing.

215
00:15:31,590 --> 00:15:36,870
One big box and inside that big box, you have another small box.

216
00:15:37,350 --> 00:15:39,420
And what is inside the small box?

217
00:15:39,420 --> 00:15:44,390
We have another formal declaration by the name of novel.

218
00:15:44,400 --> 00:15:47,370
OK, so the identifier name is novel.

219
00:15:47,370 --> 00:15:51,120
We are going to ask the scope of this function now.

220
00:15:51,120 --> 00:15:54,960
We are not going to ask the scope of this this global scope.

221
00:15:54,960 --> 00:15:57,180
We are going to ask the scope of this function.

222
00:15:57,180 --> 00:16:01,320
Have you heard about any identifier called novel?

223
00:16:01,320 --> 00:16:04,800
It is going to say no, but here is your box.

224
00:16:05,040 --> 00:16:06,310
So this box is going.

225
00:16:06,410 --> 00:16:13,880
To be function scop, I'm just going to say AIFS or the function sko console log is not a formal declaration,

226
00:16:13,890 --> 00:16:16,310
so we are going to move past and we are going to come here.

227
00:16:16,970 --> 00:16:17,980
So the same thing.

228
00:16:18,320 --> 00:16:25,250
We have a formal declaration inside a function scope, so we are not going to ask the global scope.

229
00:16:25,500 --> 00:16:28,640
OK, so we are going to ask the functions of the scope.

230
00:16:28,640 --> 00:16:35,060
Manager in this case is going to be the function scope and it is going to give us a box.

231
00:16:35,060 --> 00:16:37,200
And that box is called the function scope.

232
00:16:37,490 --> 00:16:40,660
So now at this point, the compilation is done.

233
00:16:41,150 --> 00:16:42,860
And what do we have here now?

234
00:16:42,870 --> 00:16:47,960
The take away is that a lexically scoped language like like japes.

235
00:16:48,770 --> 00:16:55,780
The execution plan is created at the compile time by the compiler, not a runtime.

236
00:16:55,970 --> 00:17:04,640
So and everything that we did here is actually we created an execution plot, a plan for executing this

237
00:17:04,640 --> 00:17:05,210
code.

238
00:17:05,240 --> 00:17:05,630
Right.

239
00:17:07,010 --> 00:17:16,910
This execution plan is used at the runtime, but it is certainly determined at the compile time.

240
00:17:16,920 --> 00:17:19,800
OK, so why why does this happen?

241
00:17:19,849 --> 00:17:25,089
This happens because the engine, the execution engine just runs the code.

242
00:17:25,430 --> 00:17:29,000
This makes the engine work faster as everything is known.

243
00:17:29,240 --> 00:17:35,810
And the engine has received a plan to optimize its work based on that plan.

244
00:17:35,870 --> 00:17:37,510
OK, so what is the plan?

245
00:17:37,520 --> 00:17:45,200
The plan involves our identifiers and involves our scopes so we know where our identifiers are, what

246
00:17:45,500 --> 00:17:50,950
sorry, what our identifiers are and which scope do they belong to?

247
00:17:51,200 --> 00:17:55,820
So we mainly have the global scope and the function scope for our identifiers.

248
00:17:56,150 --> 00:18:01,670
So we are going to take this example to our next lecture where we will talk about the lexical scope

249
00:18:01,670 --> 00:18:04,980
and the actual code execution.

250
00:18:05,000 --> 00:18:06,170
See you guys that.

