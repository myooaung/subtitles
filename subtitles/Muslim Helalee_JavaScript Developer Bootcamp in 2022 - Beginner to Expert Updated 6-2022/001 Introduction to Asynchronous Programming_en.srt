1
00:00:01,569 --> 00:00:02,510
Hi, everyone.

2
00:00:02,530 --> 00:00:07,240
In this lecture, I'm going to introduce you to asynchronous programming.

3
00:00:08,710 --> 00:00:16,390
All right, so asynchronous programming is the backbone of the modern Web development in JavaScript,

4
00:00:16,690 --> 00:00:24,610
and yet JavaScript is single threaded and synchronously execute single threaded, it means that one

5
00:00:24,610 --> 00:00:26,320
command runs at a time.

6
00:00:26,680 --> 00:00:32,350
JavaScript cannot run two commands at the same time and synchronously executed.

7
00:00:32,350 --> 00:00:38,830
It means that each line is run as the plan for the execution is created during the compile time.

8
00:00:39,880 --> 00:00:41,880
So what if we have a challenge?

9
00:00:41,890 --> 00:00:48,840
For example, you open up the Twitter page and for example, you want to get more tweets from the server.

10
00:00:48,850 --> 00:00:52,720
For example, you're scrolling down, or for example, you open a Facebook page or.

11
00:00:52,720 --> 00:00:52,980
Right.

12
00:00:53,740 --> 00:01:01,330
And when you scroll down and when you want to grab when you want to see new posts until the new posts

13
00:01:01,330 --> 00:01:04,629
load, what if you couldn't do anything else?

14
00:01:05,440 --> 00:01:13,240
What if you had to wait for the server to respond to the scroll event and and send you the data?

15
00:01:13,250 --> 00:01:20,920
And until the data is fetched, you had to wait and you couldn't like like write a comment.

16
00:01:20,920 --> 00:01:26,440
You couldn't, like, do a like or anything else that is called synchronous programming.

17
00:01:26,470 --> 00:01:26,830
All right.

18
00:01:27,190 --> 00:01:32,520
Now, let's go ahead and let's talk about, first off, Synchronoss.

19
00:01:32,890 --> 00:01:39,010
What is I'm just going to give you a very, very, very, very simple example of synchronous JavaScript.

20
00:01:39,130 --> 00:01:47,200
And then we are going to dive into two examples of asynchronous JavaScript and what helps JavaScript

21
00:01:47,200 --> 00:01:53,920
achieve this asynchronous state of the modern Web development, because JavaScript is single threaded

22
00:01:54,100 --> 00:02:01,030
and we know for sure that we do have an asynchronous programming like Twitter or like like like you

23
00:02:01,030 --> 00:02:08,289
can see like in most of the websites where whenever you do something with the Web page, the Web page

24
00:02:08,289 --> 00:02:13,750
sends the information or the data, but the page does not reload.

25
00:02:13,750 --> 00:02:17,320
When the page doesn't reload, it means it's asynchronous programming.

26
00:02:17,500 --> 00:02:20,860
And we see that all the time in our Web pages.

27
00:02:20,920 --> 00:02:21,220
Right.

28
00:02:22,400 --> 00:02:28,730
But what helps JavaScript achieve asynchronous programming are going to get to that, but first, what

29
00:02:28,730 --> 00:02:29,890
is Synchronoss code?

30
00:02:29,900 --> 00:02:31,200
What is asynchronous code?

31
00:02:31,490 --> 00:02:36,980
These are going to be very, very simple examples, but they're going to convey the point of what is

32
00:02:36,980 --> 00:02:38,640
synchronous and what is asynchronous.

33
00:02:39,020 --> 00:02:43,970
Let's say we have a function and this function is going to say just hello.

34
00:02:47,000 --> 00:02:49,860
And I'm going to say cancel that log.

35
00:02:50,630 --> 00:02:51,680
Just say hello.

36
00:02:51,830 --> 00:02:52,250
All right.

37
00:02:52,500 --> 00:02:56,480
And then I'm going to come down here and I'm going to call this function.

38
00:02:56,490 --> 00:02:56,900
Hello.

39
00:02:58,270 --> 00:02:59,830
OK, but I'm not.

40
00:02:59,960 --> 00:03:05,170
Hello, I'm not going to save it, so I'm going to come down here and I'm going to do another concer

41
00:03:05,170 --> 00:03:05,560
lock.

42
00:03:07,580 --> 00:03:12,650
And I'm going to say hello again.

43
00:03:13,250 --> 00:03:21,050
Now, if I save it, you would see that the first executable line of code in the VMS is going to be

44
00:03:21,050 --> 00:03:21,410
this.

45
00:03:21,620 --> 00:03:24,710
And this is going to call this function and the function.

46
00:03:24,710 --> 00:03:26,930
Just basically print hello to the console.

47
00:03:27,320 --> 00:03:30,920
And then the next executable line of code is this console lock.

48
00:03:31,220 --> 00:03:34,400
And then we can see that hello again is going to be printed.

49
00:03:34,670 --> 00:03:38,690
So first off, we are going to say hello and then we are going to say hello again.

50
00:03:39,470 --> 00:03:41,760
So if I were to say it, we can see that.

51
00:03:42,020 --> 00:03:47,390
So this is an example of a this is an example of synchronous code.

52
00:03:48,020 --> 00:03:48,900
And what does it mean?

53
00:03:48,920 --> 00:03:57,200
It means that for the console log line to run, we needed to wait, that this function is executed until

54
00:03:57,200 --> 00:03:59,540
this function is called in here.

55
00:03:59,660 --> 00:04:04,330
And then the parentheses, they execute this function until this execution is done.

56
00:04:04,370 --> 00:04:06,200
We should not see any hello again.

57
00:04:06,440 --> 00:04:09,670
And after this line is done, then we see hello again.

58
00:04:10,250 --> 00:04:12,380
This is an example of Synchronoss code.

59
00:04:12,380 --> 00:04:18,560
I know we we have done a lot of this, but we have not talked about it in the context of asynchronous

60
00:04:18,560 --> 00:04:19,149
programming.

61
00:04:19,430 --> 00:04:23,140
Now we are talking about it in this context.

62
00:04:24,140 --> 00:04:24,500
All right.

63
00:04:24,770 --> 00:04:32,420
So what if I just go ahead and copy this code uncommented out and I pasted down below and I grab the

64
00:04:32,420 --> 00:04:38,990
synchronous JS and I paste it because asynchronous is very, very difficult for me to write and they

65
00:04:38,990 --> 00:04:40,910
just say asynchronous JS.

66
00:04:41,330 --> 00:04:47,810
But instead of instead of calling the function very normal right here, I'm just going to delete it

67
00:04:47,810 --> 00:04:53,630
and I'm going to create a set time out and in here I'm going to pass and the function call and I'm just

68
00:04:53,630 --> 00:04:56,550
going to say hello and then the second.

69
00:04:56,570 --> 00:05:01,190
So the first argument is going to be the time handler handler.

70
00:05:01,190 --> 00:05:03,740
And the second thing argument is timeout.

71
00:05:03,740 --> 00:05:09,090
No one has time and no, let's put it to 1000 milliseconds or one second.

72
00:05:09,710 --> 00:05:16,250
So if I were to save it, what we should see on the console, let me clear that up so we should see

73
00:05:16,250 --> 00:05:20,600
the first stuff we because this is the first executable line of code.

74
00:05:20,600 --> 00:05:20,950
Right.

75
00:05:21,260 --> 00:05:22,160
So we should see that.

76
00:05:22,160 --> 00:05:24,050
We should wait for one second.

77
00:05:25,080 --> 00:05:30,900
And after one second passes, we should see that this Halo function is run, right?

78
00:05:31,110 --> 00:05:32,790
So this Halo function is right.

79
00:05:32,910 --> 00:05:34,160
And what is this going to do?

80
00:05:34,170 --> 00:05:36,390
It is going to print hello to the console.

81
00:05:37,200 --> 00:05:42,810
And after it frenzied, then we should see hello again, because JavaScript can do one thing at a time

82
00:05:43,080 --> 00:05:44,840
and that one thing at a time.

83
00:05:44,850 --> 00:05:50,010
Firstly, it is going to be calculating that one 1000 milliseconds.

84
00:05:50,310 --> 00:05:58,730
So it counts one millisecond to millisecond, 100 millisecond, 900, 999 hundred and ninety nine nine

85
00:05:59,130 --> 00:06:02,760
and then 1000 yay, 1000 milliseconds.

86
00:06:02,820 --> 00:06:06,120
That is up then because it is counting this, right.

87
00:06:06,270 --> 00:06:09,220
It is counting it so it can do anything else.

88
00:06:09,630 --> 00:06:15,420
So logically this should happen that when when the 1000 milliseconds is over.

89
00:06:16,620 --> 00:06:22,680
This Halloween is going to run dysfunction, dysfunction is going to be invoked, and what is the function

90
00:06:22,680 --> 00:06:25,640
going to do is just print and then we should see again, hell.

91
00:06:26,820 --> 00:06:28,730
So let's save it and let's see what we get.

92
00:06:29,430 --> 00:06:36,120
But that is not that is not what we get, because this is asynchronous programming, because said time

93
00:06:36,120 --> 00:06:42,570
out is actually an asynchronous method provided to JavaScript by the browser.

94
00:06:42,900 --> 00:06:53,250
Now browser, these web browsers like the Chrome Safari, Firefox macros are like i.e. they are very,

95
00:06:53,250 --> 00:06:55,310
very, very, very powerful.

96
00:06:55,680 --> 00:07:00,930
Now, in this chapter, we are going to dive into their power browsers.

97
00:07:00,930 --> 00:07:06,420
They provide us with a set of Web APIs.

98
00:07:06,990 --> 00:07:08,880
We have used some of these APIs.

99
00:07:08,880 --> 00:07:11,730
We are going to take a deeper look at the Web APIs.

100
00:07:12,120 --> 00:07:18,720
I think it's let me take a look at it's the lecture after the next lecture and the next lecture, we're

101
00:07:18,720 --> 00:07:24,750
going to talk about the call stack specifically at what JavaScript does at the runtime.

102
00:07:24,750 --> 00:07:28,650
We know what it does at the execution sorry, at the compile time.

103
00:07:28,800 --> 00:07:35,190
But what it actually does at the runtime, we are going to take a visual representation of that, which

104
00:07:35,190 --> 00:07:38,670
is really cool, which is again provided to us by the browser.

105
00:07:38,910 --> 00:07:41,370
So browsers, they're really, really powerful.

106
00:07:41,820 --> 00:07:50,280
When JavaScript is not enough, the browsers they take over and they provide us with web browser APIs

107
00:07:50,580 --> 00:07:54,180
with no background APIs and promises.

108
00:07:54,180 --> 00:07:59,200
And a lot of the API, all of these APIs, they're provided to us by the browser.

109
00:07:59,880 --> 00:08:03,380
This is not Java, this is not JavaScript, this is browser.

110
00:08:03,900 --> 00:08:11,520
So what is happening here is whenever a JavaScript sees this set time out, it is going to hand it over

111
00:08:11,520 --> 00:08:12,360
to the browser.

112
00:08:12,960 --> 00:08:21,420
The JavaScript is going to say to the browser that take this and remind me after 1000 milliseconds that

113
00:08:21,420 --> 00:08:22,980
I have to invoke this function.

114
00:08:23,440 --> 00:08:31,380
And you do this, the browser, a browser, do this graph the set time out and count from one millisecond

115
00:08:31,380 --> 00:08:32,240
up to 1000.

116
00:08:32,640 --> 00:08:36,380
In the meantime, I'm going to execute the next line of code.

117
00:08:37,080 --> 00:08:38,520
So what does this mean?

118
00:08:38,669 --> 00:08:46,440
It means that until the server is going to be sending you the data, that is going to be handled by

119
00:08:46,440 --> 00:08:47,130
the browser.

120
00:08:47,430 --> 00:08:51,680
So the browser comes to the rescue of JavaScript, OK?

121
00:08:52,050 --> 00:08:55,950
And so JavaScript can do other things right.

122
00:08:56,100 --> 00:09:00,780
Until the browser can get this data, can fetch the data.

123
00:09:01,170 --> 00:09:08,910
JavaScript is going to allow you to click to write a comment, to display an image until the images

124
00:09:08,910 --> 00:09:13,080
or until the posts are fetched from the server.

125
00:09:13,380 --> 00:09:13,740
All right.

126
00:09:13,980 --> 00:09:17,100
So that's so there are actually two people working.

127
00:09:17,400 --> 00:09:18,660
The first one is JavaScript.

128
00:09:18,660 --> 00:09:20,040
The second one is the browser.

129
00:09:20,340 --> 00:09:21,510
How is the browser working?

130
00:09:21,510 --> 00:09:29,520
The browsers work is in the form of APIs application application programming interface, which we are

131
00:09:29,520 --> 00:09:30,750
going to talk about later.

132
00:09:30,770 --> 00:09:31,200
Right.

133
00:09:32,270 --> 00:09:34,670
So that's actually how it works.

134
00:09:35,060 --> 00:09:43,160
Just to recap, JavaScript is going to give this time out because it's a browser API, it's a timer,

135
00:09:43,370 --> 00:09:47,570
it is going to hand it over to the browser, say, OK, this is your responsibility.

136
00:09:47,570 --> 00:09:50,480
You got to count from one to 1000 millisecond.

137
00:09:50,720 --> 00:09:55,700
And after your count is over, just to remind me that I have to invoke a function, I don't want to

138
00:09:55,700 --> 00:09:56,360
think about it.

139
00:09:56,780 --> 00:09:58,850
And the JavaScript is going to run this.

140
00:09:58,850 --> 00:10:06,230
And after 1000 milliseconds, the browser API is going to say, OK, here we go, 1000 milliseconds

141
00:10:06,230 --> 00:10:10,140
have passed, go and invoke this function and this function is invoked.

142
00:10:10,760 --> 00:10:14,800
Now, you might be asking, what if I'm just going to copy it down below?

143
00:10:15,860 --> 00:10:19,030
What if I go ahead and come in this one out?

144
00:10:19,040 --> 00:10:19,730
You might be asking.

145
00:10:19,870 --> 00:10:22,600
OK, so this is 1000 milliseconds.

146
00:10:22,610 --> 00:10:24,200
What if we put it to zero?

147
00:10:25,580 --> 00:10:26,780
What would happen then?

148
00:10:28,340 --> 00:10:35,000
So I'm going to tell you what would happen that even though it is zero milliseconds, but this time

149
00:10:35,000 --> 00:10:41,740
out is still going to be is still going to take some time to be handed over to the browser API.

150
00:10:42,470 --> 00:10:44,310
This is actually the browser API.

151
00:10:44,780 --> 00:10:50,260
So until the browser API starts working, JavaScript is going to move on to this.

152
00:10:50,570 --> 00:10:55,990
So JavaScript doesn't care how many, how many milliseconds or how many seconds are in here.

153
00:10:57,080 --> 00:11:01,470
JavaScript is just going to hand this over to the browser and JavaScript is going to move on.

154
00:11:01,730 --> 00:11:05,050
It doesn't matter even if it has zero milliseconds.

155
00:11:05,240 --> 00:11:09,200
So if I run this code, we are going to see the same representation once more.

156
00:11:10,460 --> 00:11:17,270
See, even if we are going to get hello again first, because even if it is zero milliseconds, it is

157
00:11:17,270 --> 00:11:19,190
handed over to the browser.

158
00:11:20,160 --> 00:11:25,770
We are not interested in this part, we are interested in the set time out itself, it has handed over

159
00:11:25,950 --> 00:11:32,280
JavaScript, moves on and runs this line of code first, and then the set time out is going to be reminded

160
00:11:32,280 --> 00:11:37,650
by the browser that, OK, there was only like zero milliseconds and I counted them.

161
00:11:37,650 --> 00:11:38,400
And here we go.

162
00:11:38,550 --> 00:11:40,660
And JavaScript is going to invoke this function.

163
00:11:41,460 --> 00:11:45,660
So this is how actually asynchronous a code is going to run.

164
00:11:45,970 --> 00:11:52,290
And in this chapter, we are going to talk about all of the older technologies, the callbacks, and

165
00:11:52,290 --> 00:11:59,700
then the newer standards, the promises and the API and also the hot topic, which is async 08.

166
00:11:59,940 --> 00:12:01,740
So see you guys in the next lecture.

