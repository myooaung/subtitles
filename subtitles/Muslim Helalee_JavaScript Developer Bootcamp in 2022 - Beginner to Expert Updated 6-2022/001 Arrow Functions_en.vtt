WEBVTT
1
00:00:01.110 --> 00:00:08.130
Hi, everyone, welcome to the advanced JavaScript Data Structures and Functions chapter.

2
00:00:09.060 --> 00:00:15.060
All right, so what we're going to do in this chapter is we're going to start looking at the at the

3
00:00:15.060 --> 00:00:20.910
aero functions, which I think we have talked about them for a couple of times before.

4
00:00:20.910 --> 00:00:27.840
During your projects, we're going to go over the aero functions, syntax like formally or officially,

5
00:00:28.300 --> 00:00:36.710
and then we are going to talk about six of the the most advanced and higher order array methods.

6
00:00:36.720 --> 00:00:40.860
And then we're going to talk about three object methods in this chapter.

7
00:00:40.890 --> 00:00:41.190
Right.

8
00:00:41.370 --> 00:00:47.760
So we're going to start working with aero functions and then we are going to dive into aero sorry arrays

9
00:00:47.760 --> 00:00:48.830
and then objects.

10
00:00:49.200 --> 00:00:50.370
So aero functions.

11
00:00:50.370 --> 00:00:53.030
We are going to go over four different examples.

12
00:00:53.040 --> 00:00:57.630
The first example, we're going to have a function declaration with no parameters.

13
00:00:57.960 --> 00:01:00.900
So let's go ahead and let's create the function.

14
00:01:01.110 --> 00:01:06.630
And this function is going to create random random numbers.

15
00:01:06.900 --> 00:01:07.320
All right.

16
00:01:07.620 --> 00:01:09.360
From one to 10.

17
00:01:09.510 --> 00:01:09.870
Right.

18
00:01:10.110 --> 00:01:20.130
So it is going to return math dot floor because because the round method, the sorry, the random method

19
00:01:20.400 --> 00:01:23.790
actually creates random numbers from zero to one.

20
00:01:23.790 --> 00:01:25.490
So zero point one zero point two.

21
00:01:25.680 --> 00:01:31.350
So we get decimal to convert them into like integers, like whole numbers.

22
00:01:31.590 --> 00:01:39.930
We are going to use the math, that floor method, and now we are going to write our math that random.

23
00:01:41.100 --> 00:01:44.870
And whenever you do this, it is going to return and it says returns.

24
00:01:44.940 --> 00:01:47.040
And what is this?

25
00:01:47.040 --> 00:01:55.310
I cannot pronounce it so random, pseudo random, pseudo random number between zero and one.

26
00:01:55.890 --> 00:02:01.720
So but we want between zero and 10, so I'm just going to multiply it by 10.

27
00:02:02.220 --> 00:02:04.590
OK, so this is our function declaration.

28
00:02:04.800 --> 00:02:11.700
We are not like mainly concerned with how function sorry, with how function declarations are created

29
00:02:12.330 --> 00:02:15.090
because we know we have created like a ton of them.

30
00:02:15.510 --> 00:02:24.090
We are concerned with how we can change a function declaration, declaration with a change it to a function,

31
00:02:24.090 --> 00:02:25.190
to an error function.

32
00:02:25.470 --> 00:02:34.530
So let us grab the random number, let us grab that random number and store it within that variable.

33
00:02:35.220 --> 00:02:42.890
And I'm going to say consolidate lock and random number random.

34
00:02:42.900 --> 00:02:46.370
Where is it now if I save it?

35
00:02:46.650 --> 00:02:51.470
So each time when I reload, we are going to get a different number, see a different random number.

36
00:02:51.840 --> 00:02:56.130
So how would we go ahead and convert this into an arrow function?

37
00:02:56.550 --> 00:03:00.240
So I'm just going to say air row function.

38
00:03:00.900 --> 00:03:07.140
So for converting this into error function, I'm just going to grab this function and I'm going to paste

39
00:03:07.140 --> 00:03:11.820
it right here and I'm going to tell you how you can convert this into an error function.

40
00:03:12.180 --> 00:03:14.670
Now, keep in mind that error functions.

41
00:03:14.670 --> 00:03:16.560
They are function expressions.

42
00:03:16.950 --> 00:03:21.120
So in order to convert this into an error function, it's copied here.

43
00:03:21.300 --> 00:03:23.280
We need to have a function expression.

44
00:03:23.520 --> 00:03:27.030
So I'm going to remove this function with I'm going to replace it with LAT.

45
00:03:28.170 --> 00:03:34.110
And we have this is the function name and I'm just going to provide a inequality there.

46
00:03:34.380 --> 00:03:38.880
OK, and then you can see that the error functions.

47
00:03:38.880 --> 00:03:41.850
They don't have the function keyword inside of them.

48
00:03:42.310 --> 00:03:42.660
Right.

49
00:03:42.780 --> 00:03:47.210
And I'm going to say you just have to provide a fat error here and now.

50
00:03:47.220 --> 00:03:47.730
That's it.

51
00:03:48.030 --> 00:03:49.700
So this is an error function.

52
00:03:49.740 --> 00:03:53.420
This is how you can convert a function declaration into an error function.

53
00:03:53.850 --> 00:03:59.880
So inside here, you can pass in the parameters so you can have one parameter to parameter three parameters.

54
00:03:59.880 --> 00:04:00.710
Doesn't matter.

55
00:04:00.960 --> 00:04:03.240
You can pass and pass them in there.

56
00:04:03.660 --> 00:04:08.700
Now, this could this might seem like a lot longer way of doing it.

57
00:04:08.970 --> 00:04:11.940
There is actually a I'm just going to write longer.

58
00:04:12.210 --> 00:04:14.010
There is actually shorter version.

59
00:04:15.270 --> 00:04:20.820
And I didn't want to show you that until we got we got the longer version first.

60
00:04:21.029 --> 00:04:25.440
Now, what I'm going to do is I'm going to copy that and I'm going to paste it and we are going to make

61
00:04:25.440 --> 00:04:25.510
it.

62
00:04:25.530 --> 00:04:25.920
Sure.

63
00:04:26.130 --> 00:04:30.650
So you can see that we are only running one line of code and it is basically saying return.

64
00:04:30.840 --> 00:04:37.140
So we don't need the return key word when it comes to having one line of code and running that line

65
00:04:37.140 --> 00:04:39.900
of code, basically returning that line of code.

66
00:04:40.620 --> 00:04:41.610
We don't need that.

67
00:04:41.910 --> 00:04:45.860
And when it is one line of code, we do not need the curly braces as well.

68
00:04:46.480 --> 00:04:46.860
Right.

69
00:04:46.860 --> 00:04:50.610
And let's remove that space and that's it.

70
00:04:51.180 --> 00:04:57.570
So this is how you can convert an error function into, sorry, a function declaration, into an error

71
00:04:57.570 --> 00:04:57.980
function.

72
00:04:58.350 --> 00:05:02.280
And now what I'm going to do is I'm just going to call it a call.

73
00:05:02.280 --> 00:05:04.740
This a different name and I'm going to say other.

74
00:05:06.520 --> 00:05:08.670
Their random number.

75
00:05:08.860 --> 00:05:13.090
All right, I just called it that and we can store it inside a variable.

76
00:05:14.160 --> 00:05:18.540
And we can say that random number, the same variable.

77
00:05:19.950 --> 00:05:22.670
Let's store the other random number.

78
00:05:22.890 --> 00:05:24.120
All right, inside here.

79
00:05:24.390 --> 00:05:33.800
And now let's consider it on this consolidated log and we have random save it and we get through.

80
00:05:34.050 --> 00:05:39.270
So each time you click, you can see that each time you're going to get a different number.

81
00:05:39.540 --> 00:05:42.480
So this is the first example that we went over.

82
00:05:42.750 --> 00:05:44.730
And the second example, you know what?

83
00:05:44.730 --> 00:05:49.560
I'm just going to copy this entire thing and I'm going to pasted down here.

84
00:05:50.570 --> 00:05:56.630
And we are going to say this is example number two and the example, number two, I'm going to remove

85
00:05:56.630 --> 00:05:59.050
this from here because this is empty.

86
00:06:00.140 --> 00:06:04.140
And the example, number two, well, basically, we don't do anything different.

87
00:06:04.140 --> 00:06:06.290
So I'm just going to go ahead and speed things up.

88
00:06:06.590 --> 00:06:09.500
We just add inside our function declaration.

89
00:06:10.900 --> 00:06:13.450
So where is example no, that's example No.

90
00:06:13.450 --> 00:06:15.250
One, this is example number two.

91
00:06:15.550 --> 00:06:21.130
So inside our function declaration, we just add a parameter in here.

92
00:06:22.410 --> 00:06:27.150
I'm going to grab this copy and put it right here so we know where examples are.

93
00:06:27.840 --> 00:06:33.780
So what I'm going to do is I'm going to comment this function back in and I'm going to name it is positive

94
00:06:33.780 --> 00:06:37.290
as positive, positive.

95
00:06:37.290 --> 00:06:39.630
And in here I'm going to pass a number.

96
00:06:40.110 --> 00:06:45.960
And I want this function to return no greater or equal to zero.

97
00:06:46.800 --> 00:06:49.540
OK, and we are going to change the.

98
00:06:49.920 --> 00:06:53.870
We can store it inside this, but that would not be accurate.

99
00:06:54.300 --> 00:06:57.240
So let's grab this is positive.

100
00:06:57.240 --> 00:07:00.520
Let's put it right here and we are going to a result.

101
00:07:00.810 --> 00:07:06.030
So these positive function result is going to be stored within this variable.

102
00:07:06.480 --> 00:07:12.990
And we are going to call the function in here and we need to pass the test positive result inside the

103
00:07:12.990 --> 00:07:15.260
console log so we can see it on the console.

104
00:07:16.170 --> 00:07:16.540
Right.

105
00:07:16.590 --> 00:07:23.600
So, OK, so in here, I need to execute the functions I need to pass on, for example, five.

106
00:07:24.120 --> 00:07:25.680
So five is positive.

107
00:07:25.680 --> 00:07:28.320
If I pass in zero, that's still true.

108
00:07:28.500 --> 00:07:33.270
But if I pass a negative one, we get false because negative one is not positive.

109
00:07:33.550 --> 00:07:36.240
Basically, you know how actually this works.

110
00:07:36.570 --> 00:07:38.580
So we are going to grab this function.

111
00:07:39.600 --> 00:07:41.310
We are going to put it right here.

112
00:07:42.000 --> 00:07:45.350
I'm going to remove the function keyword and I'm going to replace it with light.

113
00:07:45.750 --> 00:07:47.430
So this is going to be the function name.

114
00:07:47.430 --> 00:07:50.220
I'm going to provide an equal sign here.

115
00:07:50.430 --> 00:07:53.220
And then this is this part we are not going to touch.

116
00:07:53.220 --> 00:07:58.770
We are just going to provide a fat error there or what we should we shouldn't call it fat, but just

117
00:07:58.770 --> 00:07:59.460
an error there.

118
00:08:00.120 --> 00:08:04.770
And I could come and this part out and cancel.

119
00:08:04.830 --> 00:08:11.760
OK, here we get is positive has already been declared, so is positive.

120
00:08:11.760 --> 00:08:15.780
Five letters positive equals to this.

121
00:08:15.780 --> 00:08:17.460
We are we just this.

122
00:08:17.460 --> 00:08:21.300
Oh it's because of that we get to see.

123
00:08:21.780 --> 00:08:23.580
But this is the longer version.

124
00:08:23.850 --> 00:08:24.200
Right.

125
00:08:24.240 --> 00:08:25.410
I'm just going to write longer.

126
00:08:25.650 --> 00:08:27.650
We could go ahead and make this shorter.

127
00:08:27.900 --> 00:08:31.230
Keep in mind that this works with return very well.

128
00:08:31.650 --> 00:08:37.669
So if I were to copy this and commented out, come here, let's paste it here.

129
00:08:37.890 --> 00:08:42.929
So because this function is only returning something over there or functions, if you just go ahead

130
00:08:42.929 --> 00:08:45.510
and remove the return key, it is still going to work.

131
00:08:45.810 --> 00:08:50.340
And because this is only one line, we can go ahead and remove that as well.

132
00:08:50.610 --> 00:08:53.430
So this is how short the arrow function can get.

133
00:08:54.060 --> 00:08:57.420
So this was the second example and the third example.

134
00:08:57.780 --> 00:09:06.980
We are going to talk about using two parameters inside the the function declaration part.

135
00:09:07.860 --> 00:09:09.330
So that's.

136
00:09:12.370 --> 00:09:16.270
This is an example, too, so this has got to be our example three.

137
00:09:17.500 --> 00:09:20.710
OK, so I'm going to remove the Arrow function code from here.

138
00:09:20.740 --> 00:09:26.210
I hope you're not getting confused because this is advanced and I'm hoping you're following.

139
00:09:26.260 --> 00:09:32.330
We are just creating function declarations and we are converting them to our functions.

140
00:09:32.620 --> 00:09:37.900
So in here, what I what I'm going to do for the third example is I'm going to create a function called

141
00:09:37.900 --> 00:09:47.800
multiply and we're going to multiply X with Y and we're going to say a return X times Y.

142
00:09:49.430 --> 00:09:54.290
And now let's come in these guys and and let's grab this.

143
00:09:55.230 --> 00:10:03.750
And we are going to say multiply results and the function name is multiply.

144
00:10:05.100 --> 00:10:10.390
Multiply, so we have two parameters, we need to provide two arguments.

145
00:10:11.010 --> 00:10:14.870
So I'm just going to say 15, five times 15, we get 75.

146
00:10:15.270 --> 00:10:18.030
So this is how this function declaration was created.

147
00:10:18.280 --> 00:10:25.080
If we were to convert it to an arrow function, we would say let other multiply.

148
00:10:25.380 --> 00:10:33.900
So this is the function name equal to our parentheses inside which we pass in A and B, our parameter

149
00:10:33.900 --> 00:10:41.100
parameters, and then the arrow itself and then curly braces, because we only have one line of code.

150
00:10:41.110 --> 00:10:42.600
We don't need curly braces.

151
00:10:42.780 --> 00:10:44.910
We just say six times y.

152
00:10:46.590 --> 00:10:50.520
And then we are going to store this inside a variable.

153
00:10:51.480 --> 00:10:56.970
All right, so what I'm going to do is we could store it or we could just go ahead and call it, cancel

154
00:10:57.300 --> 00:11:06.540
that lock, either multiply and Passan, let's say 10 for the for A and 20 for B.

155
00:11:06.540 --> 00:11:09.150
And when I say it says X.

156
00:11:10.640 --> 00:11:11.870
Oh, sorry.

157
00:11:11.890 --> 00:11:14.310
This should be a and this should be.

158
00:11:15.340 --> 00:11:16.590
And now we get 200.

159
00:11:16.960 --> 00:11:21.160
So this syntax is really shorter than the function declaration.

160
00:11:21.430 --> 00:11:23.980
This is only one line, but now this is three lines.

161
00:11:25.750 --> 00:11:29.080
But our functions do have their own place where they should be used.

162
00:11:29.090 --> 00:11:32.740
But it's really good, good idea.

163
00:11:32.740 --> 00:11:38.260
If you have, like, very minimal lines of code, you can use our functions, but.

164
00:11:39.410 --> 00:11:45.500
Using our functions, if you are a beginner, might not be a good idea because it is really, really

165
00:11:45.500 --> 00:11:53.600
a short syntax and you need to be really comfortable with this syntax to not to not get confused.

166
00:11:54.350 --> 00:12:01.310
That's why my suggestion for you is just go on and keep using function declarations until you are OK

167
00:12:01.310 --> 00:12:07.760
with the function expression, which is this array function, or you can go ahead and mix them up.

168
00:12:07.940 --> 00:12:14.300
It all of them like dun do do not ever let anyone tell you which one is better, which one is not.

169
00:12:14.450 --> 00:12:17.420
It's all an opinion, OK, everyone has their opinions.

170
00:12:18.710 --> 00:12:22.040
You can go ahead and work with any of them.

171
00:12:22.040 --> 00:12:25.430
You can use function declaration, error functions, function expressions.

172
00:12:25.880 --> 00:12:27.020
Either of them is fine.

173
00:12:27.260 --> 00:12:33.260
I myself, I like function declarations that that's why throughout the projects of use function declarations

174
00:12:33.590 --> 00:12:34.790
because they are named.

175
00:12:34.790 --> 00:12:36.320
I know what I'm doing.

176
00:12:36.650 --> 00:12:39.350
I can come up with almost with good names.

177
00:12:39.350 --> 00:12:40.940
I think I can come up with names.

178
00:12:40.940 --> 00:12:44.390
I know naming is really hard in this programming world.

179
00:12:45.260 --> 00:12:51.440
That's why I always use function declarations because the name is going to tell me what it is that I'm

180
00:12:51.440 --> 00:12:52.520
actually trying to do.

181
00:12:53.030 --> 00:12:56.090
And I like the syntax or function declaration better.

182
00:12:56.090 --> 00:13:01.520
It's more readable, more understandable than, let's say, this understanding.

183
00:13:01.520 --> 00:13:04.600
This line is more complicated than understanding Valla.

184
00:13:05.060 --> 00:13:08.840
I mean, we are creating a function and we are storing it inside a variable.

185
00:13:09.110 --> 00:13:12.890
We are calling that variable and then we are executing that variable.

186
00:13:13.190 --> 00:13:17.000
It's a bit more like Hassel, which I don't like.

187
00:13:17.000 --> 00:13:21.740
That's why most of the times I use Ariff sorry, the function declarations.

188
00:13:22.040 --> 00:13:26.780
I do use error function sometimes, but my preferences function declarations.

189
00:13:27.080 --> 00:13:31.910
And for our final example, let me comment everything out.

190
00:13:31.910 --> 00:13:39.920
We are going to go over a callback function, a synchronous callback function, not asynchronous synchronous

191
00:13:39.920 --> 00:13:40.910
callback function.

192
00:13:41.840 --> 00:13:44.500
We are going to get to the asynchronous as well.

193
00:13:44.990 --> 00:13:47.390
So this is going to be example number four.

194
00:13:47.600 --> 00:13:50.480
And you might have noticed that we have a button here.

195
00:13:50.760 --> 00:13:54.710
So what I'm going to do is I'm going to grab that button const.

196
00:13:55.130 --> 00:14:00.470
I'm going to say BTN document dot query selector.

197
00:14:01.340 --> 00:14:02.540
Let's grab the button.

198
00:14:04.570 --> 00:14:11.290
And I'm just going to be selected by the element name, right, and we are going to subtract, add event

199
00:14:11.300 --> 00:14:13.210
listener, let's add an event.

200
00:14:13.410 --> 00:14:17.290
The event is Kleck and when the click happens, we want to run a function.

201
00:14:17.560 --> 00:14:19.360
We want to run an error function.

202
00:14:19.390 --> 00:14:21.670
This is how an error function is created.

203
00:14:21.700 --> 00:14:25.150
This is basically the syntax and what is their function going to do?

204
00:14:25.150 --> 00:14:32.260
Their function is going to grab the document, the body and it is going to tap into the world of style.

205
00:14:33.010 --> 00:14:36.550
And from there we are going to grab the background color.

206
00:14:37.540 --> 00:14:45.430
All right, and we are going to change it to green, so whenever this button is collected, the background

207
00:14:45.430 --> 00:14:47.100
color of the body, it should be green.

208
00:14:47.110 --> 00:14:48.430
So click it is green.

209
00:14:49.030 --> 00:14:55.300
We can make this shorter, even shorter, because we are running one line of code so it can just copy

210
00:14:55.300 --> 00:15:03.070
it down below and come in this part out, even though it is not going to be like hopefully it should

211
00:15:03.070 --> 00:15:03.900
be on one line.

212
00:15:04.150 --> 00:15:12.880
So I'm going to remove this curly brace, remove this one from there and save it and cut missing.

213
00:15:13.600 --> 00:15:14.060
Huh.

214
00:15:14.800 --> 00:15:16.170
Let's remove this one.

215
00:15:16.180 --> 00:15:19.360
Let's bring this up on one line.

216
00:15:22.100 --> 00:15:28.610
Let's bring this up, let's say that this rearranges it like this, that's because of the prettier cut

217
00:15:28.610 --> 00:15:32.300
formatter that I have on, but we can shorten to this as well.

218
00:15:32.300 --> 00:15:34.680
And if I click the background, color changes to green.

219
00:15:35.000 --> 00:15:36.590
So that's it for this lecture.

220
00:15:36.590 --> 00:15:38.270
We talked about the error functions.

221
00:15:38.570 --> 00:15:46.100
And for the next several lectures, we are going to go over some very higher order and useful array

222
00:15:46.100 --> 00:15:50.450
methods that you will be using all the time or creating complex applications.

223
00:15:50.720 --> 00:15:51.890
See you guys then.

