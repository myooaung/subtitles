WEBVTT
1
00:00:01.420 --> 00:00:05.800
Hi, everyone, in this lecture, we are going to reintroduce iRace.

2
00:00:07.330 --> 00:00:18.580
All right, so a race starting from the 2015 or ESX, we call him a literal they are collections of

3
00:00:18.580 --> 00:00:26.200
data that data could be songs, posts, comments, numbers, levels of game or anything that you can

4
00:00:26.200 --> 00:00:26.720
think of.

5
00:00:26.740 --> 00:00:35.290
OK, so we are going to go over the syntax of an array and how we can create arrays, OK, and what

6
00:00:35.290 --> 00:00:38.630
kind of data and array can have inside of it.

7
00:00:39.100 --> 00:00:44.800
So in order to create an array, we have to first specify a variable.

8
00:00:45.070 --> 00:00:54.070
We can create arrays using the left keyword, the Aulet variable, and we can also create create arrays

9
00:00:54.070 --> 00:00:56.690
using the const constant variable.

10
00:00:56.800 --> 00:00:57.090
Right.

11
00:00:57.490 --> 00:01:01.570
So the first array that I want to create is going to have a name of numbers.

12
00:01:01.810 --> 00:01:04.629
So now this is the name of our array.

13
00:01:04.660 --> 00:01:09.590
OK, we can access our array of numbers by the name of numbers.

14
00:01:09.610 --> 00:01:17.590
OK, then we open our brackets and inside this brackets is the realm of arrays in JavaScript.

15
00:01:17.780 --> 00:01:24.700
So I'm just going to put in one and we should separate the items or the values by comma.

16
00:01:24.880 --> 00:01:31.690
OK, now this idea of separating values by comma is the same as in JavaScript objects.

17
00:01:31.720 --> 00:01:39.940
OK, now arrays are our very first chapter in this chapter is going to be our very first chapter that

18
00:01:39.940 --> 00:01:42.880
we talk about, JavaScript data structures.

19
00:01:43.090 --> 00:01:48.330
OK, so one of the JavaScript data structures is arrays and the other is objects.

20
00:01:48.350 --> 00:01:48.730
All right.

21
00:01:48.880 --> 00:01:54.100
So in this chapter and in the next chapter, we are going to cover both of the JavaScript data structures.

22
00:01:54.470 --> 00:01:54.850
All right.

23
00:01:55.720 --> 00:02:01.840
So let's go ahead and write two separated by a comma and then three, then separated by a comma, then

24
00:02:01.840 --> 00:02:03.960
for separated by a comma, then five.

25
00:02:04.030 --> 00:02:10.870
OK, now let's go ahead and let's cancel it to this logic, to the console numbers.

26
00:02:11.110 --> 00:02:13.270
Now, this numbers is not a string.

27
00:02:13.270 --> 00:02:15.460
This is a valid JavaScript identifier.

28
00:02:15.670 --> 00:02:22.690
It is the name of this this array when we say it and when we take a look inside our console, we can

29
00:02:22.690 --> 00:02:27.460
see that we have our brackets and we have one, two, three, four and five here.

30
00:02:27.910 --> 00:02:29.230
And when we expand it.

31
00:02:29.320 --> 00:02:31.260
So this part is familiar to you.

32
00:02:31.270 --> 00:02:32.410
This is the index.

33
00:02:32.620 --> 00:02:34.890
So the index of the first item is zero.

34
00:02:35.170 --> 00:02:37.300
The second item has an index of one.

35
00:02:37.300 --> 00:02:39.280
The third item has an index of two.

36
00:02:39.520 --> 00:02:44.110
The fourth one has an index of three, and the fifth item has an index of four.

37
00:02:44.370 --> 00:02:47.170
And the length of this array is five.

38
00:02:47.320 --> 00:02:50.950
So the length is always going to be one more than the index.

39
00:02:50.980 --> 00:02:56.610
The final index or the final index is one less than the length of that array.

40
00:02:56.890 --> 00:02:58.490
And in here it says a rate.

41
00:02:58.530 --> 00:02:58.860
Right.

42
00:02:59.020 --> 00:03:00.790
So this is our our array.

43
00:03:00.790 --> 00:03:06.340
And if we click here, these are all the methods that we can apply on our arrays.

44
00:03:07.000 --> 00:03:07.440
All right.

45
00:03:07.690 --> 00:03:10.180
Now, we have talked about methods before.

46
00:03:10.360 --> 00:03:16.810
They are basically functions that that can be called upon objects.

47
00:03:16.990 --> 00:03:19.170
And in here, you guys can see it says object.

48
00:03:19.360 --> 00:03:23.350
Now, a common misconception is that arrays are objects.

49
00:03:23.560 --> 00:03:25.270
Arrays are not objects.

50
00:03:25.270 --> 00:03:27.820
They behave like objects, like strings.

51
00:03:28.120 --> 00:03:30.160
They can behave like objects.

52
00:03:30.340 --> 00:03:34.690
That's why we can borrow object methods for arrays as well.

53
00:03:34.840 --> 00:03:37.060
And they are not called object methods.

54
00:03:37.270 --> 00:03:43.470
They are called array methods because they are called upon arrays and our act as objects.

55
00:03:43.480 --> 00:03:47.660
That's why we can't call methods upon arrays.

56
00:03:47.680 --> 00:03:48.100
All right.

57
00:03:49.210 --> 00:03:52.210
So this is how we can create an array here.

58
00:03:52.620 --> 00:03:55.690
I'm going to go ahead and I'm going to create another array as well.

59
00:03:55.990 --> 00:03:58.560
And I'm going to call it Let Koller's.

60
00:03:58.840 --> 00:04:01.630
So this array is going to be a combination of colors.

61
00:04:01.780 --> 00:04:03.730
And in here we are going to have strings.

62
00:04:04.240 --> 00:04:07.510
So strings should be provided inside quotes.

63
00:04:07.810 --> 00:04:12.370
So the first one is red, the second one is green.

64
00:04:13.710 --> 00:04:17.000
All right, and the third one is going to be blue.

65
00:04:17.260 --> 00:04:21.180
We can go ahead and consider log our array of colors as well.

66
00:04:23.300 --> 00:04:29.870
And we are going to see that we have the length is three and the final index is going to be two, we

67
00:04:29.870 --> 00:04:32.160
have red, green and blue.

68
00:04:32.360 --> 00:04:32.760
Right.

69
00:04:32.930 --> 00:04:40.310
So this is where now keep in mind that when you whenever you create a write the values, the type,

70
00:04:40.310 --> 00:04:43.530
the data types, they they can be different.

71
00:04:43.550 --> 00:04:47.390
OK, you can go ahead and mix data types in arrays.

72
00:04:47.600 --> 00:04:48.680
So I'm just going to go ahead.

73
00:04:48.690 --> 00:04:50.510
I'm going to create a mixed array.

74
00:04:50.900 --> 00:04:54.860
And in here we are going to provide a string of yellow.

75
00:04:56.370 --> 00:04:56.750
Right.

76
00:04:56.800 --> 00:05:02.590
And I'm going to provide a number, which is a different data type, and I'm going to provide a no,

77
00:05:02.800 --> 00:05:04.560
OK, it has a different type.

78
00:05:04.810 --> 00:05:09.880
We have undefined and we have not a number.

79
00:05:09.880 --> 00:05:13.810
And we can also provide a boolean right now.

80
00:05:13.810 --> 00:05:20.060
All of them, they are actually primitive data types, but they're actually their type is different.

81
00:05:20.320 --> 00:05:21.390
This is a string.

82
00:05:21.400 --> 00:05:22.990
This is a no, this is no.

83
00:05:22.990 --> 00:05:23.860
This is undefined.

84
00:05:24.100 --> 00:05:25.060
This is not a number.

85
00:05:25.060 --> 00:05:26.140
And this is true.

86
00:05:26.410 --> 00:05:29.710
And if I go ahead and if I log it to the console.

87
00:05:31.030 --> 00:05:38.350
Mixed, let's save it, we can see that we have we have yellow, we have 45 now, undefined no no number

88
00:05:38.350 --> 00:05:39.060
and true.

89
00:05:39.340 --> 00:05:43.080
All right, the length is six, but the final index is five.

90
00:05:43.480 --> 00:05:46.600
So we can combine different data as well.

91
00:05:46.600 --> 00:05:51.520
We can combine numbers with strings with but like with boolean expressions.

92
00:05:51.520 --> 00:05:51.880
Right.

93
00:05:53.140 --> 00:06:00.400
So in here, what I want to do is I want to show you a way that you can go ahead and you can access

94
00:06:00.670 --> 00:06:08.550
different items, different values of a an array based on their index.

95
00:06:08.590 --> 00:06:09.070
All right.

96
00:06:11.880 --> 00:06:16.770
So what I'm going to do is I'm just going to go ahead and I'm going to comment about this and I'm going

97
00:06:16.770 --> 00:06:24.660
to add in here a comment that says accessing accessing a specific value of an index.

98
00:06:24.980 --> 00:06:25.140
Right.

99
00:06:25.170 --> 00:06:32.880
So in here, in the array of colors, let's say you want to access the index of one and we want to see

100
00:06:32.880 --> 00:06:38.010
what what is going to be that value that is associated with the index of one.

101
00:06:38.220 --> 00:06:44.460
So first off, you just go ahead and reference the array and then we open our brackets again and we

102
00:06:44.460 --> 00:06:45.570
provided with one.

103
00:06:45.720 --> 00:06:48.110
And in here you guys can see we have green.

104
00:06:48.390 --> 00:06:51.300
We can do it one more time and let's put it to two.

105
00:06:51.600 --> 00:06:53.300
We are going to get our blue.

106
00:06:53.490 --> 00:07:01.560
We can go ahead and we can go to our mix and we can check for what is what is the value that is associated

107
00:07:01.560 --> 00:07:02.670
with the index of two.

108
00:07:02.820 --> 00:07:10.560
So if I go ahead and if I am coming this two again, the console log of colors and the mixed array,

109
00:07:10.740 --> 00:07:17.170
we can see that if we expand this, the let's go ahead and comment out these two as well.

110
00:07:17.520 --> 00:07:21.940
So in colors, what is the value that is associated with the index of one?

111
00:07:22.200 --> 00:07:25.860
So if we come to the index of one, the value associated with that is green.

112
00:07:26.040 --> 00:07:27.650
That's why we get green here.

113
00:07:27.930 --> 00:07:30.380
And if I comment in this one as well.

114
00:07:30.540 --> 00:07:33.870
So what is the value which is associated with the index of two?

115
00:07:34.080 --> 00:07:35.610
That should be our blue.

116
00:07:35.660 --> 00:07:37.200
So this is the index of two.

117
00:07:37.530 --> 00:07:38.520
This is index of two.

118
00:07:38.520 --> 00:07:42.390
And the value associated with that is actually blue, right?

119
00:07:43.350 --> 00:07:49.650
And in the mixed area, what is the value which is associated with the index stuff, with the with the

120
00:07:49.650 --> 00:07:50.520
index of two?

121
00:07:50.700 --> 00:07:51.500
It is not.

122
00:07:51.510 --> 00:07:52.700
So let's take a look at it.

123
00:07:52.830 --> 00:07:54.000
So this is index of two.

124
00:07:54.030 --> 00:07:55.260
The value is not.

125
00:07:55.650 --> 00:07:56.070
All right.

126
00:07:56.550 --> 00:07:59.170
We can change these values as well.

127
00:07:59.220 --> 00:07:59.610
All right.

128
00:07:59.760 --> 00:08:02.760
So let's go ahead and comment this one out.

129
00:08:03.120 --> 00:08:05.940
And I'm going to leave the I'm going to come this one in as well.

130
00:08:06.090 --> 00:08:07.590
I'm going to leave all three of them here.

131
00:08:07.830 --> 00:08:09.960
So first off, we have to access it.

132
00:08:10.110 --> 00:08:12.420
So we go into our numbers array.

133
00:08:13.380 --> 00:08:13.770
All right.

134
00:08:13.920 --> 00:08:20.970
And we grab any any value that is associated with the with the index of four.

135
00:08:20.970 --> 00:08:22.930
And we change it to 25.

136
00:08:23.400 --> 00:08:28.990
Let's save it and let's go ahead and let's consult the log that array.

137
00:08:29.130 --> 00:08:31.710
OK, I'm just going to copy it from from here.

138
00:08:31.740 --> 00:08:33.059
This is the numbers array.

139
00:08:33.990 --> 00:08:40.799
And let's face it, and let's say now you guys can see that in our original array has not been changed.

140
00:08:40.799 --> 00:08:44.930
Our original array is one, two, three, five, four and five.

141
00:08:45.180 --> 00:08:51.840
But this array has been changed here because we have grabbed the index four and this five has an index

142
00:08:51.840 --> 00:08:54.860
of four and we have changed it to 25.

143
00:08:55.260 --> 00:08:57.270
We can do this as well.

144
00:08:57.420 --> 00:09:05.250
And the final thing that I want to talk about here is that we can add an item to the end of an array

145
00:09:05.250 --> 00:09:05.790
as well.

146
00:09:05.910 --> 00:09:07.830
So I'm here.

147
00:09:07.830 --> 00:09:11.100
I'm just going to go ahead and come into changing.

148
00:09:12.300 --> 00:09:26.280
Changing the array values, right, and in here, I'm going to add a comment adding to the the end of

149
00:09:26.280 --> 00:09:27.380
an array.

150
00:09:28.790 --> 00:09:36.160
OK, so for that one I'm going to do is I'm going to grab the mixed array and when we grab the mixture,

151
00:09:36.170 --> 00:09:41.340
we say the mixed array, that length, what do we want to add at the end of it?

152
00:09:41.630 --> 00:09:43.620
We want to add at the end of it gaming.

153
00:09:43.790 --> 00:09:44.180
Right.

154
00:09:44.450 --> 00:09:47.090
And now let's go ahead and let's consider Sloggett.

155
00:09:47.570 --> 00:09:48.140
Let's save it.

156
00:09:48.320 --> 00:09:52.520
And then you guys can see in here, I'm just going to go ahead and I'm going to expand this.

157
00:09:52.520 --> 00:09:54.830
I'm going to increase the width of this window a bit more.

158
00:09:55.280 --> 00:09:55.880
So in here.

159
00:09:55.880 --> 00:10:05.320
You guys can see that from line number 16, which is right here, we have yellow 41, 45 now, undefined,

160
00:10:05.330 --> 00:10:06.620
not a number and true.

161
00:10:06.830 --> 00:10:14.390
But in here from line twenty nine, which is exactly this line we have gaming added a string of gaming

162
00:10:14.390 --> 00:10:16.070
added to the end of our array.

163
00:10:16.370 --> 00:10:16.720
All right.

164
00:10:16.910 --> 00:10:19.310
So that it for the introduction of a race.

165
00:10:19.940 --> 00:10:26.420
From the next lecture onwards, we are going to talk about some methods that we can apply on the race.

166
00:10:26.420 --> 00:10:28.600
So see you guys in the next lecture.

