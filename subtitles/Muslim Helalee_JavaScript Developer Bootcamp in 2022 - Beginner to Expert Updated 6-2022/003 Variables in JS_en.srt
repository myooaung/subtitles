1
00:00:00,620 --> 00:00:08,210
Hi, everyone, in this letter, we're going to go over very bold declarations and variable naming conventions

2
00:00:08,210 --> 00:00:09,230
in JavaScript.

3
00:00:10,210 --> 00:00:21,280
All right, so JavaScript is a case sensitive language and uses Unicode characters set right in JavaScript

4
00:00:21,280 --> 00:00:25,540
instructions are called statements and are separated by semicolons.

5
00:00:26,020 --> 00:00:35,260
And the way that JavaScript passes code and makes our website dynamic is that the source text of JavaScript

6
00:00:35,650 --> 00:00:43,810
scripts get scanned from left to right and is converted into a sequence of input elements which are

7
00:00:43,810 --> 00:00:44,920
called tokens.

8
00:00:45,070 --> 00:00:52,510
And you guys saw the token when we in one of our previous chapters and I think I think it was the previous

9
00:00:52,510 --> 00:00:52,920
chapter.

10
00:00:52,930 --> 00:00:53,260
Right.

11
00:00:53,950 --> 00:01:01,330
And control of characters line Terminator's comments or white spaces right now comments.

12
00:01:01,540 --> 00:01:03,210
We have talked about the comments.

13
00:01:03,220 --> 00:01:07,590
It's the kind of code that you don't want it to run inside the browser.

14
00:01:07,870 --> 00:01:10,870
They are discarded during script execution.

15
00:01:11,310 --> 00:01:19,060
Right now, let's go ahead and let's talk about the main topic of this lesson, and that is variable

16
00:01:19,060 --> 00:01:19,990
declarations.

17
00:01:20,980 --> 00:01:24,640
JavaScript has three kinds of variable declarations.

18
00:01:25,240 --> 00:01:25,550
Right.

19
00:01:25,630 --> 00:01:28,690
So I'm just going to go ahead and create a multiline comment.

20
00:01:28,990 --> 00:01:36,130
The first one, which was used for a very long time is var the second one, which is the newer syntax

21
00:01:36,130 --> 00:01:39,790
is led and the third one is Consed.

22
00:01:40,370 --> 00:01:44,620
I'm just going to write a variable declarations.

23
00:01:45,490 --> 00:01:45,880
Right.

24
00:01:45,910 --> 00:01:48,720
So these are variable declarations.

25
00:01:48,730 --> 00:01:55,480
There are three kinds of variable declarations now before diving into declaring variables with these.

26
00:01:55,720 --> 00:02:02,950
What I want to do is I just want to very briefly talk about the naming conventions for a variable declarations

27
00:02:03,160 --> 00:02:06,870
and I want to tell you why we should talk about naming conventions.

28
00:02:07,720 --> 00:02:09,400
Now, first things first.

29
00:02:09,610 --> 00:02:19,060
VAR declares a variable optionally initializing it to a value that declares a block scoped local variable

30
00:02:19,060 --> 00:02:26,630
optionally initializing it to value and const declare the blocks code read-only name constant.

31
00:02:27,040 --> 00:02:30,790
Now what is the difference between let const and var?

32
00:02:31,780 --> 00:02:36,840
We are going to discuss the difference between Leron const, but we are going to postpone the different

33
00:02:36,850 --> 00:02:39,850
the talk of war to one of our next chapters.

34
00:02:40,220 --> 00:02:40,570
Right.

35
00:02:40,720 --> 00:02:47,050
So now go ahead, let's go ahead and let's talk about the variable naming conventions and why we should

36
00:02:47,050 --> 00:02:48,790
talk about such a topic.

37
00:02:49,330 --> 00:02:51,950
So I am inside my e-mail file.

38
00:02:51,980 --> 00:02:55,810
OK, I just want to show you practically why we should talk about that.

39
00:02:57,190 --> 00:02:58,600
So in here, I created.

40
00:02:59,020 --> 00:03:06,520
Let's go ahead and let's say I create an one and I give it a class of main dush heading and I say some

41
00:03:06,520 --> 00:03:10,170
very important title.

42
00:03:11,030 --> 00:03:13,930
OK, it says some very important time.

43
00:03:14,830 --> 00:03:20,760
Now, the naming convention for classes and team is separating.

44
00:03:20,770 --> 00:03:23,800
If there is one word, just write the word mean.

45
00:03:24,040 --> 00:03:27,640
And if there are two words, we just separate them by a dash.

46
00:03:27,670 --> 00:03:30,280
OK, it's happening.

47
00:03:30,490 --> 00:03:30,910
All right.

48
00:03:31,870 --> 00:03:38,050
So this is the naming convention for a class inside the JavaScript Asara Inside Stadium.

49
00:03:38,500 --> 00:03:43,770
This naming convention also applies to IDE's in an e-mail.

50
00:03:44,110 --> 00:03:52,150
So each language, be it a markup language or a stylesheet language or a programming language like JavaScript,

51
00:03:52,150 --> 00:03:54,390
has some sort of naming convention.

52
00:03:54,700 --> 00:03:58,300
It doesn't matter what the naming convention refers to.

53
00:03:58,540 --> 00:04:02,340
What matters is that we have to follow that naming convention.

54
00:04:02,860 --> 00:04:03,200
All right.

55
00:04:03,340 --> 00:04:09,540
So if we go ahead and if we say hatting, if we do it like this, it is very well valid.

56
00:04:09,550 --> 00:04:13,180
But this is not the naming convention for HTML.

57
00:04:13,390 --> 00:04:16,630
This is actually the naming convention for JavaScript.

58
00:04:16,660 --> 00:04:24,190
OK, so in JavaScript, the naming convention is the same has the same underlying concepts as a.

59
00:04:25,090 --> 00:04:25,890
It has to.

60
00:04:25,910 --> 00:04:28,930
The first thing is that it has to make sense.

61
00:04:29,260 --> 00:04:29,600
All right.

62
00:04:29,890 --> 00:04:31,230
So this is on each one.

63
00:04:31,240 --> 00:04:32,910
This is an element.

64
00:04:32,950 --> 00:04:40,170
This is a title I can't write here like let's say main dush para like like a call it.

65
00:04:40,420 --> 00:04:41,890
This is the main paragraph.

66
00:04:41,890 --> 00:04:49,570
It doesn't make sense because this is an element, this is a heading element and we should call it a

67
00:04:49,570 --> 00:04:49,920
heading.

68
00:04:50,200 --> 00:04:55,870
So this is the first thing that this the name, the name has to make sense.

69
00:04:56,020 --> 00:04:59,680
And this concept applies on the Java in JavaScript as well.

70
00:04:59,830 --> 00:05:01,390
I'm just going to show you in a minute.

71
00:05:01,750 --> 00:05:05,440
And the second thing is that it has to be understandable.

72
00:05:05,730 --> 00:05:13,750
OK, now if I go ahead and if I say like main head or if I just go ahead and if I say title, no title

73
00:05:13,750 --> 00:05:17,530
is a very valid class name for this H1.

74
00:05:17,830 --> 00:05:22,690
But what if down the road we have an edge to that has the same class.

75
00:05:22,690 --> 00:05:29,140
That's a title I have, I have the same class name.

76
00:05:30,350 --> 00:05:32,440
Come on buddy class.

77
00:05:33,070 --> 00:05:34,120
Now what about this?

78
00:05:34,330 --> 00:05:40,480
Now, this is not a good practice because whenever you have an one, you have different starling's for

79
00:05:40,480 --> 00:05:42,610
each one and different Starling's for a stick.

80
00:05:43,210 --> 00:05:49,210
Now both of them are very valid class names, but they are not understandable.

81
00:05:49,570 --> 00:05:52,270
OK, so we have to make it.

82
00:05:53,050 --> 00:05:57,000
We have to write class names in a way that they are understandable.

83
00:05:57,220 --> 00:06:00,510
For example, main title subtitle.

84
00:06:00,890 --> 00:06:02,440
Now these are understand.

85
00:06:02,740 --> 00:06:10,540
OK, now the third concept, which only applies in JavaScript is that they should be Tamela cased.

86
00:06:11,350 --> 00:06:14,500
So I'm just going to write the concepts here.

87
00:06:14,530 --> 00:06:16,810
The first one is it should make.

88
00:06:17,670 --> 00:06:18,300
Come on.

89
00:06:18,640 --> 00:06:21,360
What has happened to me, it should make sense.

90
00:06:22,140 --> 00:06:28,510
The second one is it should be understandable, understandable.

91
00:06:28,560 --> 00:06:30,810
And the third one is should be camel.

92
00:06:32,000 --> 00:06:41,310
Camil case and the Campbell case syntax says that the first word should be all lowercase.

93
00:06:41,390 --> 00:06:50,620
OK, and starting from the second word and onwards, the first letter of each word has to be capitalized,

94
00:06:50,960 --> 00:06:51,590
for example.

95
00:06:51,620 --> 00:06:58,130
OK, so this is a word, Camil, and you guys can see that this is lower case, but this case is a second

96
00:06:58,160 --> 00:06:58,490
word.

97
00:06:59,180 --> 00:07:03,190
And the first letter of this second word is capitalized.

98
00:07:03,560 --> 00:07:10,290
And if there were more words, then each of the words, the starting letter has to be capitalized.

99
00:07:10,350 --> 00:07:11,900
OK, I'm going to show you this.

100
00:07:12,110 --> 00:07:20,480
So if I go ahead and if I say let AIG call 25, let's say it, let's go ahead and log it to our console

101
00:07:20,480 --> 00:07:24,000
so we can see our result and we are going to get 25.

102
00:07:24,050 --> 00:07:31,010
OK, so this is when we have one word inside our variable declarations.

103
00:07:31,140 --> 00:07:34,100
I'm going to tell you what this line means in just a minute.

104
00:07:34,130 --> 00:07:34,550
All right.

105
00:07:35,390 --> 00:07:37,200
What if we have more than one word?

106
00:07:37,220 --> 00:07:39,380
What if we have two words like first name?

107
00:07:39,830 --> 00:07:42,980
We could go ahead and we could say first name like this.

108
00:07:43,190 --> 00:07:45,830
But this is not a good practice in JavaScript.

109
00:07:45,850 --> 00:07:52,120
This is an e-mail naming convention, not a JavaScript naming convention.

110
00:07:52,310 --> 00:07:55,790
So for JavaScript, we have like in here, we have two words.

111
00:07:56,030 --> 00:07:57,470
The first word is first.

112
00:07:57,650 --> 00:08:00,410
The second word is name for the name.

113
00:08:00,410 --> 00:08:07,460
The first letter should be capitalized if there is any other word, for example, the first name and

114
00:08:07,640 --> 00:08:10,160
second name.

115
00:08:10,400 --> 00:08:17,180
And now you can see that the first letter of each of the second each of each of the words after the

116
00:08:17,180 --> 00:08:19,240
second word is capitalized.

117
00:08:19,550 --> 00:08:25,610
And the reason for this is that this syntax, this naming is much better readable.

118
00:08:25,850 --> 00:08:33,740
Then let's just like putting it like this or maybe like first name and second name.

119
00:08:34,190 --> 00:08:37,429
Now, this is not that readable as opposed to this one.

120
00:08:38,159 --> 00:08:38,480
Right?

121
00:08:38,490 --> 00:08:41,179
So I'm just going to go ahead and I'm going to remove all of that.

122
00:08:41,179 --> 00:08:45,290
And I'm going to say and we are going to say the log.

123
00:08:47,610 --> 00:08:56,040
First, not first, first name, and when I say it, it brings it prints it to the console.

124
00:08:56,670 --> 00:08:59,410
Now, this is one of the variable declarations.

125
00:08:59,700 --> 00:09:02,400
Now, why do we need variables in JavaScript?

126
00:09:02,400 --> 00:09:10,140
Is whenever we want to apply dynamic ness or functionality to any website, we first have to grab that

127
00:09:10,170 --> 00:09:11,150
HTML element.

128
00:09:11,490 --> 00:09:19,290
And when we grab that is element, because JavaScript is a programming language, we have to store that

129
00:09:19,290 --> 00:09:20,550
element somewhere.

130
00:09:20,880 --> 00:09:21,250
Right?

131
00:09:21,420 --> 00:09:26,730
We have to store that element somewhere now to store an element.

132
00:09:26,730 --> 00:09:33,120
We can use our primitive data types, which are numbers, booleans, strings and that sort of thing,

133
00:09:33,510 --> 00:09:37,730
and we can use our reference data types.

134
00:09:37,950 --> 00:09:43,110
That's why we have primitive and reference data types, because they store information.

135
00:09:43,260 --> 00:09:44,870
And what information is that?

136
00:09:44,880 --> 00:09:48,630
That is our HTML elements, just as an example.

137
00:09:48,660 --> 00:09:50,160
OK, this is an example.

138
00:09:50,790 --> 00:09:54,780
It is valid, but it is a very beginner level example.

139
00:09:55,100 --> 00:09:55,410
Right.

140
00:09:55,590 --> 00:09:57,520
So we store that information.

141
00:09:57,780 --> 00:09:59,780
Think of this as a box.

142
00:10:00,120 --> 00:10:03,900
Think of any variable in JavaScript as a box.

143
00:10:04,110 --> 00:10:09,570
So the box, for example, you're moving out, you're moving to a new city, you're moving to a new

144
00:10:09,570 --> 00:10:10,530
house, for example.

145
00:10:10,530 --> 00:10:15,170
You have purchased a house for yourself and you move to that house, OK?

146
00:10:15,510 --> 00:10:19,470
So you put all of your stuff inside these boxes, OK?

147
00:10:19,500 --> 00:10:22,620
And you call one of the boxes like frijoles.

148
00:10:22,980 --> 00:10:29,640
The other one like like, I don't know, like cushions or the other one like picture frames and the

149
00:10:29,640 --> 00:10:30,690
other one like books.

150
00:10:30,930 --> 00:10:34,200
So that box is going to be your variable.

151
00:10:34,530 --> 00:10:39,110
OK, I'm just going to write it here so it makes sense and you do not forget it.

152
00:10:39,570 --> 00:10:43,320
So the box represents our variable.

153
00:10:44,560 --> 00:10:54,430
All right, so the box label represents our variable variable name and these naming conventions, they

154
00:10:54,440 --> 00:11:03,310
are applied on the variable name and I'm just going to write here like LAT Consed or Vah.

155
00:11:03,440 --> 00:11:05,800
OK, so these are our variables.

156
00:11:06,040 --> 00:11:08,190
The variable name that we have used here.

157
00:11:08,200 --> 00:11:11,170
I'm just going to write first name, right.

158
00:11:12,410 --> 00:11:24,220
And whatever is inside the box inside or I'm just going to say box content is going to be variable stored

159
00:11:24,220 --> 00:11:24,840
info.

160
00:11:25,240 --> 00:11:34,180
OK, and in this case, in the case of our first name, it is Muslin or let's go ahead and remove remove

161
00:11:34,180 --> 00:11:36,620
the quotes because we just store the information.

162
00:11:36,640 --> 00:11:37,590
This is the information.

163
00:11:38,080 --> 00:11:46,660
So again, variable is our box, like let constant vare and then we have the box label which which is

164
00:11:46,660 --> 00:11:53,170
the variable name, because if you like, if you do not name your boxes, then how would you find,

165
00:11:53,170 --> 00:11:55,900
for example, like where do you put your box?

166
00:11:56,290 --> 00:12:04,480
So naming the variables is an easier way for us to find which kind of information or which kind of books

167
00:12:04,690 --> 00:12:07,660
in this case information we are looking for.

168
00:12:07,970 --> 00:12:15,760
OK, and what do we get that we get the variable stored info or the box content?

169
00:12:16,030 --> 00:12:19,480
OK, so this is how variables work in JavaScript.

170
00:12:19,780 --> 00:12:28,780
Now, that is the difference between left and const, is that whenever you you declare a variable with

171
00:12:28,780 --> 00:12:34,560
the left, you can read assign that variable, for example, here, ages 25.

172
00:12:34,720 --> 00:12:37,450
Let's go ahead and let's talk about this first name.

173
00:12:37,460 --> 00:12:38,950
I'm just going to comment on the H.

174
00:12:39,850 --> 00:12:42,070
So here first name is Muslim.

175
00:12:42,580 --> 00:12:49,600
We can go ahead and we can say first name and set it to, I don't know, like John.

176
00:12:50,620 --> 00:12:59,480
And if we save it and if we copy our consular log and now guests can see now the first name was Muslim.

177
00:12:59,500 --> 00:13:00,990
Now it is John.

178
00:13:01,060 --> 00:13:03,520
OK, it doesn't matter how many times we call it.

179
00:13:03,520 --> 00:13:05,470
It is also is always going to be, John.

180
00:13:05,890 --> 00:13:13,690
Now, this is perfectly valid in inlet, but as far as cost is concerned, you cannot really change

181
00:13:13,690 --> 00:13:17,530
the name or reassign the variable to something else.

182
00:13:17,800 --> 00:13:25,480
You cannot change the variable stored information when it comes to const and the primitive data types.

183
00:13:25,690 --> 00:13:32,740
But when it comes to const and the reference data types, you can do that because reference data types

184
00:13:33,070 --> 00:13:37,750
are not stored inside the JavaScript memory, inside the computer memory.

185
00:13:38,050 --> 00:13:44,970
A reference to that data structure or reference type is stored.

186
00:13:45,160 --> 00:13:49,100
We are going to talk about that a lot when we get to their specific chapters.

187
00:13:49,540 --> 00:13:57,400
So in here, if I go ahead and if I say first name, let's set it to Muslem, let's consider the log

188
00:13:58,840 --> 00:14:04,740
our first, not inside the quotes or first name, and then we get our Muslim.

189
00:14:05,050 --> 00:14:14,590
OK, but what if I go ahead and if I grab the first name and I reassign it to Mike, and if I do that,

190
00:14:14,590 --> 00:14:19,840
it says uncaught type error assignment to constant variable.

191
00:14:20,020 --> 00:14:22,420
And it even gives us the address.

192
00:14:22,540 --> 00:14:25,420
And if I click there, it comes from line twenty six.

193
00:14:25,690 --> 00:14:27,330
This is where the error comes from.

194
00:14:27,670 --> 00:14:34,000
It says that assignment to constant variable, even though it is a variable, it is a constant variable.

195
00:14:34,360 --> 00:14:37,690
So we cannot reassign constant variables.

196
00:14:37,900 --> 00:14:43,510
And you might ask what is the use of a constant variable when you have a large application where you

197
00:14:43,510 --> 00:14:49,900
have a lot of like hundreds of variables and thousands of lines of code, it is a good practice to use

198
00:14:49,900 --> 00:14:56,830
const because when you assign first name Muslim, for example, and many hundred lines of code later,

199
00:14:57,160 --> 00:15:04,450
when you by mistake, of course, or unknowingly, of course, you re assigned first name, it is going

200
00:15:04,450 --> 00:15:05,220
to throw an error.

201
00:15:05,260 --> 00:15:10,060
It is going to it is going to tell you that you have assigned first name before.

202
00:15:10,270 --> 00:15:17,530
So it is a good practice to use const, but const has definitely its pros and cons most of the time.

203
00:15:17,530 --> 00:15:23,410
Some of the times we want to change the variable like first name is first Muslim and then the first

204
00:15:23,410 --> 00:15:25,420
name is John and then it's Sandra.

205
00:15:25,420 --> 00:15:27,940
And then it is, I don't know, like Monica.

206
00:15:27,940 --> 00:15:29,550
And then it is like whatever.

207
00:15:29,710 --> 00:15:30,100
Right.

208
00:15:30,280 --> 00:15:38,710
So sometimes we want to reassign it and other times we do not want to reassign our first name and our

209
00:15:38,710 --> 00:15:39,370
variables.

210
00:15:39,370 --> 00:15:42,340
And that's where we use const.

211
00:15:42,580 --> 00:15:43,950
So that's it for this lecture.

212
00:15:44,130 --> 00:15:46,170
See you guys in the next one.

