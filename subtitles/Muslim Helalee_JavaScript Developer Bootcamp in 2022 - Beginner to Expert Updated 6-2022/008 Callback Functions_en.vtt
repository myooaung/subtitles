WEBVTT
1
00:00:01.910 --> 00:00:02.910
Hi, everyone.

2
00:00:02.930 --> 00:00:06.260
In this next year, we are going to talk about callback functions.

3
00:00:07.510 --> 00:00:13.610
All right, so here in the e-mail, what we have is we have a button that says get data.

4
00:00:14.230 --> 00:00:21.040
So whenever we click this button, we will be making in EPA requests to an API endpoint.

5
00:00:21.250 --> 00:00:26.280
And that API endpoint is going to provide us with Jason data.

6
00:00:26.350 --> 00:00:26.770
All right.

7
00:00:27.050 --> 00:00:29.340
And here we have two images as well.

8
00:00:29.350 --> 00:00:30.580
One image is for Cat.

9
00:00:30.580 --> 00:00:31.810
The other one is for a dog.

10
00:00:32.170 --> 00:00:39.330
Now, these images they don't have anything with they don't have anything to do with with this EPA request.

11
00:00:39.760 --> 00:00:49.060
The purpose of these images is just to show you that asynchronous code actually doesn't block that doesn't

12
00:00:49.060 --> 00:00:51.380
block the code execution.

13
00:00:51.730 --> 00:00:59.680
So until that that asynchronous code is executed, JavaScript can go ahead and can run other tasks,

14
00:00:59.680 --> 00:01:01.590
can execute other tasks.

15
00:01:02.080 --> 00:01:05.570
And in this case, we have some simple styling for the button.

16
00:01:05.950 --> 00:01:08.560
Here are the simple styling for the images.

17
00:01:08.680 --> 00:01:11.320
And you can see that the images, they have a display of none.

18
00:01:11.330 --> 00:01:13.030
So by default, we don't see them.

19
00:01:13.480 --> 00:01:16.680
And that we here we have a dynamic class, which is show.

20
00:01:16.930 --> 00:01:24.010
So whenever we click on this button, I'm going to show the images and I'm going to retrieve data as

21
00:01:24.010 --> 00:01:24.300
well.

22
00:01:24.520 --> 00:01:29.380
And we are going to see which one comes first, which one is going to be shown first.

23
00:01:29.860 --> 00:01:30.160
All right.

24
00:01:30.220 --> 00:01:36.130
So in the HDMI, I have selected the button, the CAD image, the dog image, and I've also created

25
00:01:36.130 --> 00:01:38.570
the event listener for the get button.

26
00:01:39.880 --> 00:01:42.870
So now we are talking about the callback functions.

27
00:01:42.880 --> 00:01:48.430
First off, let's go ahead and let's create the get the get data function this function.

28
00:01:49.000 --> 00:01:52.460
So get data just going to create this function.

29
00:01:52.780 --> 00:01:58.360
So now whenever we are talking about callback functions, it means that we are going to pass the callback

30
00:01:58.360 --> 00:02:05.980
function if the status is 200 and the state is for app and we are also going to pass it.

31
00:02:05.990 --> 00:02:07.910
So this is going to be a success rate.

32
00:02:08.350 --> 00:02:10.330
What if it is not a success?

33
00:02:11.110 --> 00:02:14.440
What if the state is ready status for.

34
00:02:14.440 --> 00:02:19.780
But still we have done something incorrect with the HTP request that we are making.

35
00:02:20.300 --> 00:02:22.150
What if they're already state is for?

36
00:02:22.150 --> 00:02:28.350
And the status is not 200, the status is 400 a client error.

37
00:02:28.630 --> 00:02:33.940
How can we like simulate an error so we can catch it and we can resolve it.

38
00:02:34.360 --> 00:02:34.570
Right.

39
00:02:34.690 --> 00:02:42.940
But caching and resolving errors, that is well actually what we are going to do when we get to promises.

40
00:02:42.940 --> 00:02:51.280
But I'm just going to throw this idea to you so you know that when you're getting data, there are bound

41
00:02:51.280 --> 00:02:52.100
to be errors.

42
00:02:52.450 --> 00:02:58.150
OK, and you need to find out where those errors are coming from, how you can prevent those errors,

43
00:02:58.420 --> 00:03:00.670
how you can understand what is the source of that.

44
00:03:01.330 --> 00:03:07.870
So first off, what I'm going to do as I'm going to create a function expression and I'm going to call

45
00:03:07.870 --> 00:03:09.700
it Get to Duse.

46
00:03:10.220 --> 00:03:10.600
Right.

47
00:03:11.140 --> 00:03:14.250
And I'm going to pass in here a callback keyword.

48
00:03:14.860 --> 00:03:16.880
This is going to be a callback function.

49
00:03:17.050 --> 00:03:22.570
Now, the name for the callback function could be callback itself, could be c.B or it could be anything

50
00:03:22.570 --> 00:03:23.170
that you want.

51
00:03:23.420 --> 00:03:29.330
I'm writing callback here because this is the most intuitive way.

52
00:03:29.350 --> 00:03:29.710
All right.

53
00:03:29.720 --> 00:03:31.550
So here we have an error function.

54
00:03:32.050 --> 00:03:37.420
Now, first off, we are going to go over those four steps and then we are going to take a look at the

55
00:03:37.420 --> 00:03:38.300
callback function.

56
00:03:38.620 --> 00:03:42.160
So what was the first step in order to make an error request?

57
00:03:43.130 --> 00:03:50.090
OK, so the first step is to instantiate a new XIKAR object, so I'm going to call it Karns, I'm going

58
00:03:50.090 --> 00:03:57.720
to call it data and new XML htp request or char object.

59
00:03:57.950 --> 00:03:59.210
So this is the first step.

60
00:03:59.390 --> 00:04:05.230
The second step was to create the open or to call the open method.

61
00:04:05.420 --> 00:04:08.810
So we are going to say data open now inside the open.

62
00:04:09.020 --> 00:04:16.190
We are going to pass our HTTP method and then we are going to pass the you the API endpoint, which

63
00:04:16.190 --> 00:04:18.300
I'm just going to go ahead and grab it from here.

64
00:04:19.370 --> 00:04:25.460
This is communicating this to the same Jason, a placeholder server, and we are getting the list of

65
00:04:25.460 --> 00:04:25.910
to DOS.

66
00:04:26.060 --> 00:04:32.660
And you know, if you want to get photos, you just in photos, albums, users, posts, comments,

67
00:04:32.960 --> 00:04:36.310
you just change this with that, whatever it is that you want to grow.

68
00:04:36.590 --> 00:04:39.590
And we are going to set true for a synchronicity.

69
00:04:40.560 --> 00:04:46.920
OK, so in here, what I'm going to do is, instead of doing OnLoad, we are going to add an event listener

70
00:04:47.190 --> 00:04:49.040
on the really state change.

71
00:04:49.320 --> 00:04:51.630
So DataDot add event listener.

72
00:04:51.990 --> 00:04:54.130
So you know that both ways it is going to work.

73
00:04:54.450 --> 00:04:57.710
Ready state change and we are going to run a function.

74
00:04:58.290 --> 00:05:02.490
Now this function, this part is actually the third step.

75
00:05:02.520 --> 00:05:09.720
So this is the step when the if, if the request is successful, what do we want to do with that date?

76
00:05:10.020 --> 00:05:13.490
First off, we need to know that that request is successful.

77
00:05:13.800 --> 00:05:16.530
So I'm going to say this DOT status.

78
00:05:18.650 --> 00:05:30.710
OK, so this status, when the status is 200, not 2000, and when the aready state so red state equals

79
00:05:30.710 --> 00:05:32.720
four, what do we want to do?

80
00:05:33.140 --> 00:05:37.280
All right, we want to grab our data, right?

81
00:05:37.290 --> 00:05:40.040
We want to grab it and we want to print it to the council.

82
00:05:40.340 --> 00:05:43.070
But I don't want it to be like in that Jason Fermat.

83
00:05:43.070 --> 00:05:47.040
I want to convert it to a value that is readable by JavaScript.

84
00:05:47.300 --> 00:05:49.940
So first off, we are going to grab that data.

85
00:05:49.940 --> 00:05:53.870
That data is going to be data, that response text.

86
00:05:54.590 --> 00:05:58.250
Then I'm going to call a method which is pass on it.

87
00:05:59.660 --> 00:06:08.510
Pass, right, and this method belongs to Jason, so we are going to say, Jason, that pass now it

88
00:06:08.510 --> 00:06:13.970
is going to grab our response sticks and it is going to pass it to a value that is readable by JavaScript.

89
00:06:14.300 --> 00:06:16.610
Let's store this inside a variable as well.

90
00:06:16.610 --> 00:06:22.400
And I'm going to call it data retrieved retrieved.

91
00:06:23.150 --> 00:06:23.510
All right.

92
00:06:24.350 --> 00:06:26.990
So now we have got we have gotten our data.

93
00:06:27.260 --> 00:06:29.530
Let's log it to the console as well.

94
00:06:29.540 --> 00:06:31.280
So we have data retrieved.

95
00:06:32.160 --> 00:06:41.670
OK, so this is what what is going to happen when we have a status of 200 and a ready status for what

96
00:06:41.670 --> 00:06:48.440
if we have already stated for what if all the what if we get the response next?

97
00:06:48.450 --> 00:06:57.540
But the request itself, it is not a four, it is not a 200 status request itself hasn't been successful.

98
00:06:58.140 --> 00:07:01.910
So why don't we need to do as and we need to create another answer for that.

99
00:07:02.190 --> 00:07:06.830
And I'm going to say this already state four, right.

100
00:07:07.290 --> 00:07:11.130
You can create as many as you want, but I'm just going to create two.

101
00:07:11.340 --> 00:07:18.630
One is for when we have started a status of 200, a logical operator and ready state four and one we

102
00:07:18.630 --> 00:07:20.970
only have when they already state is four.

103
00:07:21.540 --> 00:07:28.590
And in here, what I'm going to do is I'm just going to say concealed lock error.

104
00:07:29.010 --> 00:07:32.310
Fetching fetching date.

105
00:07:33.280 --> 00:07:37.390
Right, so we have an error fishing data and what is the final step?

106
00:07:37.390 --> 00:07:45.240
The final step is actually to send this to send this a request.

107
00:07:45.250 --> 00:07:52.060
So we are going to say DataDot sent that set, but when we save it and when we click, nothing happens

108
00:07:52.060 --> 00:07:55.880
because this get to do function, it has to be called.

109
00:07:56.230 --> 00:07:56.740
All right.

110
00:07:57.160 --> 00:07:58.660
And in here I have passed.

111
00:07:58.660 --> 00:08:03.430
And the callback why don't we want to do is I'm going to remove the callback for now.

112
00:08:03.430 --> 00:08:06.640
We are going to make this work and then I'm going to come back to the callback.

113
00:08:07.030 --> 00:08:13.510
Now, this function, because we have used let it well, it doesn't actually matter if you use let or

114
00:08:13.510 --> 00:08:22.150
const or even Warren here, because these variable declarations are Pskov to this to this function.

115
00:08:22.360 --> 00:08:27.570
If I go out of this function and call this get to this function, it is going to throw an error.

116
00:08:27.850 --> 00:08:30.340
So we need to stay inside this function.

117
00:08:30.370 --> 00:08:34.900
So what I'm going to do is inside the function getdata, I'm going to call that function.

118
00:08:34.900 --> 00:08:37.059
So I'm going to say get to do this.

119
00:08:37.299 --> 00:08:37.750
All right.

120
00:08:38.020 --> 00:08:40.780
And let's just go ahead and call it.

121
00:08:40.780 --> 00:08:41.590
Let's save it.

122
00:08:42.130 --> 00:08:43.230
Let's click on it.

123
00:08:43.240 --> 00:08:44.860
We don't get anything.

124
00:08:45.220 --> 00:08:52.390
Yeah, we do get so we we got 200 to DOS because by default, Jason Placeholder is going to give you

125
00:08:52.390 --> 00:08:53.490
200 to do.

126
00:08:54.190 --> 00:08:54.820
All right.

127
00:08:54.840 --> 00:08:56.830
So this is Jason Placeholder.

128
00:08:56.830 --> 00:09:01.990
If I come in here, we are going to have 200 Tiddas.

129
00:09:03.570 --> 00:09:10.260
So that's what we got in here right now, our request is done, everything is done, but now let's come

130
00:09:10.260 --> 00:09:11.590
back to the callback function.

131
00:09:11.850 --> 00:09:15.680
So I'm going to I'm going to put in the callback parameter here.

132
00:09:15.990 --> 00:09:22.140
So each parameter requires an argument to be passed as a as a value for that parameter.

133
00:09:22.410 --> 00:09:24.780
The argument is going to be is going to be here.

134
00:09:24.780 --> 00:09:31.230
But instead of putting a single value, I'm going to put in a function and this function is going to

135
00:09:31.230 --> 00:09:32.710
be the callback function.

136
00:09:33.060 --> 00:09:36.990
So this function is going to have two parameters, two parameters.

137
00:09:38.130 --> 00:09:41.160
The convention is that the first parameter is going to be error.

138
00:09:41.310 --> 00:09:44.750
And the second one is we are going to get the data.

139
00:09:44.760 --> 00:09:46.420
The second one is going to be data.

140
00:09:46.890 --> 00:09:50.260
So this is going to be a an error function.

141
00:09:50.460 --> 00:09:57.510
So what I'm going to do first is I'm going to say cancel log and I'm just going to say call back.

142
00:09:58.110 --> 00:09:58.470
Right.

143
00:09:58.770 --> 00:10:00.240
And success.

144
00:10:00.810 --> 00:10:01.410
Let's have it.

145
00:10:01.560 --> 00:10:03.660
So now we haven't called this function.

146
00:10:03.960 --> 00:10:07.960
We have passed it as a parameter here, but it has not been called.

147
00:10:08.190 --> 00:10:15.480
So what I'm going to do is I'm going to come here now if if we get the data, it means there has been

148
00:10:15.480 --> 00:10:16.050
no error.

149
00:10:16.290 --> 00:10:21.710
So I'm going to call the callback function in here and I'm also going to call it in here.

150
00:10:22.050 --> 00:10:28.720
The reason that I call it in here is because when when we get the data, we need to grab that data.

151
00:10:28.920 --> 00:10:32.240
And in here, when we don't get the data, we need to print the error.

152
00:10:32.670 --> 00:10:37.860
So I'm going to remove this cancer log and I'm going to remove this one as well.

153
00:10:38.730 --> 00:10:43.080
And in here, what I'm going to do, because we have we have two parameters.

154
00:10:43.080 --> 00:10:44.270
We need two arguments.

155
00:10:44.820 --> 00:10:45.170
All right.

156
00:10:45.330 --> 00:10:47.670
So the first parameter is error.

157
00:10:48.000 --> 00:10:52.610
Whenever this request is successful, it means we don't have any error.

158
00:10:52.740 --> 00:10:54.730
So I'm just going to pass an undefined for that.

159
00:10:55.050 --> 00:10:56.470
And what about our data?

160
00:10:56.760 --> 00:11:04.200
So when we have when the request is successful, we just want to grab the data retrieved, data retrieved.

161
00:11:05.090 --> 00:11:05.480
All right.

162
00:11:05.670 --> 00:11:09.590
So what about this error whenever we have an error?

163
00:11:10.290 --> 00:11:10.650
Right.

164
00:11:10.660 --> 00:11:16.220
I'm just going to write here error fetching data.

165
00:11:16.560 --> 00:11:16.830
Right.

166
00:11:17.010 --> 00:11:19.270
What about the success?

167
00:11:19.620 --> 00:11:21.360
What about whether it is success?

168
00:11:21.630 --> 00:11:24.570
Because we are inside the NSF for the error.

169
00:11:24.570 --> 00:11:26.940
It means that the success is undefined.

170
00:11:27.300 --> 00:11:28.710
I'm just going to pass it undefined.

171
00:11:28.980 --> 00:11:37.470
Now, if I go ahead and if I click on this, we get callbacks success because the callback is, of course,

172
00:11:37.470 --> 00:11:38.000
successful.

173
00:11:38.010 --> 00:11:43.650
I'm just going to make this model and I'm going to make this bigger because I will be trying some things

174
00:11:43.650 --> 00:11:43.900
here.

175
00:11:44.250 --> 00:11:46.840
So now the callback is successful.

176
00:11:47.130 --> 00:11:52.220
Now, what I want to do is I want to simulate this elusive because I want to get this error as well.

177
00:11:52.620 --> 00:11:52.890
Right.

178
00:11:53.160 --> 00:11:58.880
So what I want to do is I'm just going to comment that want to copy it down below and to the before

179
00:11:58.890 --> 00:12:03.540
writing the to dos, I'm going to say curity all right.

180
00:12:03.790 --> 00:12:04.740
And I'm going to save it.

181
00:12:04.740 --> 00:12:11.780
And when I click on it now, you can see that we still get our callback success, but we get an error

182
00:12:11.780 --> 00:12:13.320
before or for now.

183
00:12:13.320 --> 00:12:19.240
Let's go back where, where did we have the errors getting text data.

184
00:12:19.260 --> 00:12:20.770
I think it was Jason.

185
00:12:20.790 --> 00:12:21.620
Yeah, it's here.

186
00:12:21.990 --> 00:12:28.250
So now we can see that the errors from 400 to 499, they are client errors.

187
00:12:28.350 --> 00:12:29.460
And what does that mean?

188
00:12:29.610 --> 00:12:33.750
It means that the error is happening on our part.

189
00:12:33.750 --> 00:12:35.720
We are doing something incorrect.

190
00:12:35.730 --> 00:12:36.980
We are doing something wrong.

191
00:12:37.230 --> 00:12:38.900
That's why we see an error.

192
00:12:39.150 --> 00:12:40.530
It means it's our fault.

193
00:12:40.530 --> 00:12:40.890
It is.

194
00:12:41.070 --> 00:12:42.930
The error is on the client side.

195
00:12:42.930 --> 00:12:44.610
It is not on the server side.

196
00:12:44.610 --> 00:12:45.660
The servers are right.

197
00:12:45.660 --> 00:12:50.010
The adjacent placeholder server or API endpoint is working correctly.

198
00:12:50.010 --> 00:12:53.250
But we have made a mistake.

199
00:12:53.520 --> 00:12:55.590
That's what the client side addresses.

200
00:12:55.800 --> 00:13:01.980
If it were to be five hundred to 599, then that would be like we are doing everything right.

201
00:13:01.980 --> 00:13:08.810
But the server is down for at the moment or there are too many requests that the server cannot handle.

202
00:13:09.210 --> 00:13:10.680
Now, that's besides the point.

203
00:13:10.680 --> 00:13:14.610
The point is that we get the callback success and this is this message.

204
00:13:14.880 --> 00:13:18.750
But now even if we have the error, we have the callback success.

205
00:13:18.750 --> 00:13:22.980
And and when we have the data, we get the same thing, callback success.

206
00:13:23.280 --> 00:13:26.010
So clearly, we need to do more things in here.

207
00:13:26.310 --> 00:13:31.050
So what I am going to do here is I'm going to pass in and if statement.

208
00:13:31.060 --> 00:13:36.300
So I'm going to say if now if we have an error, what do I want to do?

209
00:13:36.870 --> 00:13:43.830
I want to say cancel the log, just log the error if we have an error, OK?

210
00:13:44.190 --> 00:13:48.870
And else it means elss whenever we don't have an error.

211
00:13:49.110 --> 00:13:50.310
So there are two cases.

212
00:13:50.310 --> 00:13:56.130
If we have an error, if we don't have an error, if we do not have an error, just go ahead and log

213
00:13:56.130 --> 00:14:02.940
to the console our to do data now we can see that both of them are highly.

214
00:14:02.970 --> 00:14:06.970
Did it means that we have selected them correctly, now let's save it and let's check it out.

215
00:14:07.200 --> 00:14:13.770
So if I click on this, because this is an error we are making, this API endpoint is incorrect.

216
00:14:13.770 --> 00:14:17.850
We see error fetching data and we get this error for or for now.

217
00:14:17.850 --> 00:14:25.260
If I come in this one out and comment, this one loops back in and save it and click on this.

218
00:14:25.830 --> 00:14:26.490
What do we get?

219
00:14:26.490 --> 00:14:28.530
We get all the Tiddas, all right.

220
00:14:28.740 --> 00:14:30.090
We get all the to do.

221
00:14:30.090 --> 00:14:32.330
So let me just bring it here.

222
00:14:32.550 --> 00:14:37.040
So these are all the 200 reduced to which we made the request.

223
00:14:37.260 --> 00:14:39.570
So this is how callbacks they work.

224
00:14:39.800 --> 00:14:40.170
All right.

225
00:14:40.350 --> 00:14:47.070
The callbacks are the keyword for that callback function or the function identifier as partisan as a

226
00:14:47.070 --> 00:14:47.790
parameter.

227
00:14:48.360 --> 00:14:55.380
And then when we call the parent function or that function, get to DOS, we pass in our.

228
00:14:57.320 --> 00:15:03.400
We pass a function as a as an argument, we don't pass just one single value winner.

229
00:15:03.470 --> 00:15:04.910
We never we have never done this.

230
00:15:04.910 --> 00:15:06.260
I'm not sure if you have done it.

231
00:15:06.560 --> 00:15:08.030
And I'm negative on this.

232
00:15:08.030 --> 00:15:09.200
We have never done this.

233
00:15:09.440 --> 00:15:15.470
We have never passed a function into and as an argument for a function call.

234
00:15:15.710 --> 00:15:16.430
So we pass.

235
00:15:16.430 --> 00:15:21.260
And this is actually the function declaration, sorry, the function definition.

236
00:15:21.590 --> 00:15:23.540
And where do we call that function?

237
00:15:23.720 --> 00:15:29.590
We call it when the request is successful and we call it when the request is not successful, when there

238
00:15:29.600 --> 00:15:30.420
is some error.

239
00:15:30.980 --> 00:15:35.300
Now you can see that you can you can't you can create more functions.

240
00:15:35.570 --> 00:15:41.840
What if let's say you have multiple files, multiple API endpoints that you want to call, that you

241
00:15:41.840 --> 00:15:43.190
want to make requests to.

242
00:15:43.190 --> 00:15:49.130
For example, you get data from one API and then you want to wait until that data is received so you

243
00:15:49.130 --> 00:15:51.650
can do something with that data.

244
00:15:51.650 --> 00:15:56.810
And in doing so, you want to grab data from from another API endpoint as well.

245
00:15:57.020 --> 00:16:03.380
So you might be doing like your you might be making requests to multiple APIs at the same time.

246
00:16:03.860 --> 00:16:09.560
And you can see that you you will have to create multiple callback functions in here because you have

247
00:16:09.560 --> 00:16:13.370
multiple API requests, Sara HTP requests.

248
00:16:13.610 --> 00:16:16.040
And this is going to get very, very messy.

249
00:16:16.220 --> 00:16:21.080
And that's when we get to a term very, very popular among developers.

250
00:16:21.080 --> 00:16:25.690
And that is the callback hell, because everything is chained together.

251
00:16:25.700 --> 00:16:32.480
Everything is like very cluster clustered together, very dense, and it is very difficult to maintain,

252
00:16:32.480 --> 00:16:33.560
very difficult to read.

253
00:16:33.860 --> 00:16:40.340
We are going to take a look at an example of callback hell and then we are going to introduce promises

254
00:16:40.670 --> 00:16:44.960
and then we are going to change the promises.

255
00:16:44.960 --> 00:16:49.200
Then we are going to introduce fetch, which is even better than promises.

256
00:16:49.340 --> 00:16:53.940
And finally, we are going to go for async O8, which is even better than fetch.

257
00:16:54.860 --> 00:16:55.280
All right.

258
00:16:55.290 --> 00:17:00.260
So the final thing that I want to do here is those two images.

259
00:17:00.260 --> 00:17:07.670
I just want to grab the images and I want to show you that asynchronous data is a non blocking data,

260
00:17:07.819 --> 00:17:15.349
doesn't it means that whenever you have, you want to run a code because this code is done by is implemented

261
00:17:15.349 --> 00:17:19.800
by the browser, JavaScript is free to move on and to do other stuff.

262
00:17:20.270 --> 00:17:23.300
So what I am going to do is I'm going to grab the cat.

263
00:17:24.410 --> 00:17:26.540
You know, you can see that we have selected them here.

264
00:17:26.839 --> 00:17:29.200
So I'm going to say cat that class list.

265
00:17:29.210 --> 00:17:30.960
I just want to add a class to it.

266
00:17:31.280 --> 00:17:37.840
What does that class, the class show, I want to add that to the dog class as well.

267
00:17:37.850 --> 00:17:40.090
So I'm just going to say, dog.

268
00:17:40.370 --> 00:17:41.370
So what does this mean?

269
00:17:41.390 --> 00:17:46.610
It means that whenever I click on this button, we are going to see we are going to get the request

270
00:17:47.420 --> 00:17:48.470
sorry, their response.

271
00:17:48.470 --> 00:17:53.200
And we are we will be showing this on the Web page as well.

272
00:17:53.480 --> 00:17:55.460
So let's say that it's click on it.

273
00:17:55.820 --> 00:17:58.520
You can see that for a very split second.

274
00:17:58.520 --> 00:18:02.750
I'm just going to increase this and I'm going to bring this one down.

275
00:18:02.960 --> 00:18:06.850
If you just pay very, very close attention, I'm going to zoom out a little.

276
00:18:07.400 --> 00:18:07.790
All right.

277
00:18:07.880 --> 00:18:09.470
So I'm just going to refresh.

278
00:18:09.470 --> 00:18:14.180
When I click on this, we first see the images and then the data is retrieved.

279
00:18:14.510 --> 00:18:19.760
It means that JavaScript is doing two things at the same time, but that's not actually the reality.

280
00:18:20.090 --> 00:18:27.380
So let's click see first the images and then the data, because this data is retrieved by the browser,

281
00:18:27.380 --> 00:18:28.410
not the JavaScript.

282
00:18:28.760 --> 00:18:33.590
So if I just refresh and when I click, the page doesn't refresh.

283
00:18:33.620 --> 00:18:36.050
That's the good thing about asynchronous programming.

284
00:18:37.010 --> 00:18:43.760
See, so these images, they come first and then this data has to be retrieved, so that's it for this

285
00:18:43.760 --> 00:18:44.330
lecture.

286
00:18:44.750 --> 00:18:48.110
In the next lecture, we're going to take a look at callback.

287
00:18:48.110 --> 00:18:48.380
Hell.

288
00:18:48.740 --> 00:18:49.760
See you guys then.

