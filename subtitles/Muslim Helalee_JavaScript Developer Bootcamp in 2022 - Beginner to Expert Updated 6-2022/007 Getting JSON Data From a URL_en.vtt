WEBVTT
1
00:00:02.200 --> 00:00:07.060
Hi, everyone, in this lecture, we're going to get Jason data from a U.

2
00:00:07.060 --> 00:00:07.600
RL.

3
00:00:08.620 --> 00:00:13.880
All right, so this is where things get real.

4
00:00:13.900 --> 00:00:17.450
All right, so we have a website here, which is Jason Placeholder.

5
00:00:17.830 --> 00:00:18.190
All right.

6
00:00:18.340 --> 00:00:24.960
And this Jason Placeholder, it is free to use fake online rest APIs for testing and prototyping.

7
00:00:25.680 --> 00:00:25.930
Right.

8
00:00:26.050 --> 00:00:28.510
So let's say so.

9
00:00:28.510 --> 00:00:29.770
This is a fetch code.

10
00:00:29.770 --> 00:00:31.960
We are going to go over the API as well.

11
00:00:31.990 --> 00:00:39.160
I don't want to go over it here, but what do we do now is we are actually sending a request to an API

12
00:00:39.160 --> 00:00:39.790
endpoint.

13
00:00:40.000 --> 00:00:44.320
So this that you can see inside the quotes is actually an API endpoint.

14
00:00:45.880 --> 00:00:48.650
That I showed you in the Ajax Lecture.

15
00:00:48.880 --> 00:00:54.490
So if I click on it, it is going to make a request to this API endpoint and it is going to grab the

16
00:00:54.490 --> 00:00:58.720
response and it is going to grab the response and log it to the console.

17
00:00:58.840 --> 00:01:02.190
So if I click on it, this is what the response is going to be.

18
00:01:02.530 --> 00:01:11.470
So we can use this Jason Placeholder to get posts, comments, albums, photos to DOS users, and we

19
00:01:11.470 --> 00:01:13.550
can do different methods as well.

20
00:01:13.960 --> 00:01:21.280
So this allows us this Jason Placeholder allows us to interact with a rest API.

21
00:01:22.550 --> 00:01:29.040
Which is the kind of API that is done on the backend and Grob data right from the server.

22
00:01:29.360 --> 00:01:32.240
So this is going to implement this.

23
00:01:32.390 --> 00:01:40.100
This is going to mimic this online interaction of data, making the request and receiving the adjacent

24
00:01:40.160 --> 00:01:40.490
data.

25
00:01:40.880 --> 00:01:42.370
So this is available here.

26
00:01:42.380 --> 00:01:43.360
I'm not going to close it.

27
00:01:43.370 --> 00:01:45.240
I've given you the link here.

28
00:01:45.740 --> 00:01:47.610
So what we are going to do is this.

29
00:01:47.780 --> 00:01:53.210
The steps are the same, but we are going to do one thing differently here, and that is that we are

30
00:01:53.210 --> 00:01:59.390
going to add a different event listener and we are going to listen for a state change event.

31
00:01:59.630 --> 00:02:02.110
And when they're ready, state change event happens.

32
00:02:02.420 --> 00:02:03.560
We are going to grab that.

33
00:02:03.560 --> 00:02:05.490
We are going to do something with the data.

34
00:02:05.840 --> 00:02:08.440
So from now on, we are going to do it this way.

35
00:02:08.810 --> 00:02:13.630
So why don't we need to do is first off, I'm going to go ahead and I'm going to grab our button.

36
00:02:13.910 --> 00:02:17.590
So instead, each time we do have a button that says get data.

37
00:02:18.200 --> 00:02:21.560
So I'm going to say get data B10.

38
00:02:22.710 --> 00:02:31.860
Very generic name, so document query selector, and I'm just going to use the element selector, so

39
00:02:31.860 --> 00:02:36.350
we are going to say get data button when I click this button.

40
00:02:36.360 --> 00:02:38.330
So add an event listener.

41
00:02:39.000 --> 00:02:43.020
When I click this button, get the data right.

42
00:02:43.470 --> 00:02:44.880
So what does that function?

43
00:02:44.910 --> 00:02:48.340
So we are going to say function, get data.

44
00:02:49.620 --> 00:02:51.150
So what are the first steps?

45
00:02:51.160 --> 00:02:59.940
The first step to make your request is just instantiate the new a new feature object.

46
00:03:00.300 --> 00:03:02.650
And this time I'm going to call it data.

47
00:03:02.730 --> 00:03:08.370
OK, I'm not going to call it new H.R. or ex, H.R. O'Bagy or anything weird like that.

48
00:03:08.580 --> 00:03:14.030
I'm just going to call the data and I'm going to say new XML htp request.

49
00:03:14.040 --> 00:03:16.490
So step one is done now.

50
00:03:16.500 --> 00:03:20.160
Step two is actually setting up that request.

51
00:03:20.160 --> 00:03:23.820
So I'm going to say DataDot open now.

52
00:03:23.820 --> 00:03:31.080
What is the method the method is going to be get and what is the what is the URL or to be accurate,

53
00:03:31.080 --> 00:03:37.020
what is the request to your URL or to be even more accurate, what is the API endpoint?

54
00:03:37.560 --> 00:03:40.410
The API endpoint is right here.

55
00:03:41.700 --> 00:03:47.790
This is the airport, so now the way that you can use this Jason Placeholder, as you can see the after

56
00:03:47.790 --> 00:03:54.480
dot com, it's a slash to DOS and it says one, it means that it is going to grab the idea to do what

57
00:03:54.480 --> 00:03:57.510
has which has a user idea, which has an idea of one.

58
00:03:58.110 --> 00:04:03.690
So instead of to DOS, if you want to grab posts, you just say slash posts.

59
00:04:04.150 --> 00:04:04.500
Right.

60
00:04:04.740 --> 00:04:06.390
So you grab this.

61
00:04:07.540 --> 00:04:15.430
You grab all of this, copy it, you come here, you paste it here, so you want to get the posts or

62
00:04:15.430 --> 00:04:16.570
you want to get the traduce.

63
00:04:17.050 --> 00:04:21.360
So if you get the traduce, I think there are only 200.

64
00:04:21.370 --> 00:04:22.240
Yeah, a lot.

65
00:04:22.540 --> 00:04:25.480
If you get the users, you're going to get to 10 users.

66
00:04:25.720 --> 00:04:29.200
So let's change this to users.

67
00:04:29.740 --> 00:04:34.450
Let's remove the final slash and we are going to get it asynchronously.

68
00:04:34.870 --> 00:04:36.840
So now the second step is done.

69
00:04:36.850 --> 00:04:38.170
What is the third step?

70
00:04:38.170 --> 00:04:41.600
The third step is what do we want to do when you receive that data?

71
00:04:41.920 --> 00:04:44.650
So we are going to say data that at a million listener.

72
00:04:45.990 --> 00:04:53.300
That at a wellness center and we are going to listen for a red state change and we know what the red

73
00:04:53.370 --> 00:05:01.920
state change is, red state change event, and when that event is fired, when the red state change

74
00:05:01.920 --> 00:05:07.130
happens, it means that the states, they go from zero, which is unsaid.

75
00:05:07.290 --> 00:05:14.730
Then they go to one, which is when the open excuse me, when the open method is called, then they

76
00:05:14.730 --> 00:05:16.530
go to two for it.

77
00:05:16.530 --> 00:05:19.290
When is four, which is when we get the letters.

78
00:05:19.800 --> 00:05:22.290
And what was the third one?

79
00:05:22.290 --> 00:05:25.380
The third one is when the request is loading.

80
00:05:25.830 --> 00:05:27.240
I'm not reading from the slides.

81
00:05:27.240 --> 00:05:30.390
I'm just I just memorized it in the previous lecture.

82
00:05:30.930 --> 00:05:34.610
And the fourth state is when the request is completed.

83
00:05:34.980 --> 00:05:38.160
So when the ready state, they are changing.

84
00:05:38.520 --> 00:05:43.070
This event is going to fire on this data or this new XIKAR object.

85
00:05:43.860 --> 00:05:46.590
And what do we want to look specifically for?

86
00:05:46.620 --> 00:05:58.050
We want to say this, that status should be equal to 200 and this dot red state should be what is the

87
00:05:58.050 --> 00:05:59.790
state that we are interested in?

88
00:05:59.790 --> 00:06:05.640
That is state number four when everything is completed and then we are going to grab our data and we

89
00:06:05.640 --> 00:06:07.140
want to log it.

90
00:06:08.600 --> 00:06:08.840
To the.

91
00:06:10.010 --> 00:06:15.290
So this is step number three, what is step number four, sending the request.

92
00:06:15.290 --> 00:06:17.570
So DataDot send.

93
00:06:19.260 --> 00:06:25.830
So it does make this window smaller, so if I were to click on this getData, we should be able to get

94
00:06:25.840 --> 00:06:26.580
data, right?

95
00:06:26.610 --> 00:06:27.630
So that's click.

96
00:06:28.660 --> 00:06:36.400
Oh, he took took a little, so it took some time to get the data, but that's why I clicked again.

97
00:06:36.410 --> 00:06:39.140
So let's click on data and we do get the data.

98
00:06:39.310 --> 00:06:40.450
So this is the data.

99
00:06:40.450 --> 00:06:41.640
We have 10 users.

100
00:06:41.920 --> 00:06:43.810
I can zoom out a little bit.

101
00:06:44.580 --> 00:06:46.840
And so this is Aidy one.

102
00:06:46.840 --> 00:06:51.040
This is the name Linn Graham, user name Brett.

103
00:06:51.730 --> 00:06:53.900
This is Editta Irvan.

104
00:06:53.920 --> 00:06:55.180
How how well.

105
00:06:55.990 --> 00:06:59.920
And then we have Clementino Bunch.

106
00:06:59.920 --> 00:07:02.050
But but yeah.

107
00:07:02.920 --> 00:07:05.110
Anyways, so we have 10 users.

108
00:07:05.290 --> 00:07:07.270
You can see that this is Jason.

109
00:07:07.840 --> 00:07:14.460
How do we turn, how do we convert it to a valid JavaScript thing or value.

110
00:07:14.530 --> 00:07:21.040
Not think we could just say let users, let's store it here and we could say Jason did pass.

111
00:07:22.600 --> 00:07:23.830
What do we want to pass.

112
00:07:24.340 --> 00:07:26.560
We want to pass the data of course.

113
00:07:27.250 --> 00:07:27.820
What else?

114
00:07:28.860 --> 00:07:39.060
And OK, so we have data, we want to parse the response text, so this data response.

115
00:07:40.720 --> 00:07:47.110
60, click on it, save it, click here and let's wait for it.

116
00:07:47.730 --> 00:07:49.060
Oh, we are not logging it.

117
00:07:49.870 --> 00:07:51.130
What am I waiting for?

118
00:07:51.640 --> 00:07:53.860
So let's log it as well.

119
00:07:53.890 --> 00:08:02.890
Users just click on it and voila, we get a regular JavaScript array with a bunch of objects in it and

120
00:08:02.890 --> 00:08:07.990
we get all the now these information, all of them, they are more readable and these objects are also

121
00:08:07.990 --> 00:08:08.620
nested.

122
00:08:08.770 --> 00:08:09.840
So this is a nest.

123
00:08:10.000 --> 00:08:12.270
This is an object nested within an object.

124
00:08:12.700 --> 00:08:13.800
That's a cool thing, right?

125
00:08:13.990 --> 00:08:21.220
You can use all this data, for example, to generate random users to generate random like testimonials

126
00:08:21.220 --> 00:08:21.880
if you want.

127
00:08:21.880 --> 00:08:27.610
If that is if you're doing prototyping, you can do this data to generate everything that you want.

128
00:08:28.120 --> 00:08:28.440
All right.

129
00:08:28.570 --> 00:08:30.880
So this is going to be it for this lecture.

130
00:08:30.890 --> 00:08:32.830
And let me just go over this one more time.

131
00:08:32.830 --> 00:08:38.559
So we instantiated the new XIKAR object in the second step.

132
00:08:38.559 --> 00:08:41.289
We created the requestor.

133
00:08:41.289 --> 00:08:44.860
We set up the request, we set it up, we set up the request.

134
00:08:45.340 --> 00:08:50.740
And third state, we were listening for it, registering ready state change event.

135
00:08:51.310 --> 00:08:56.030
And when the ready state was four, we ran this code.

136
00:08:56.350 --> 00:09:02.740
So this code, you know, that this when this code runs, it has a status of 200 and the registered

137
00:09:02.740 --> 00:09:06.130
is four because otherwise this code will never run.

138
00:09:07.000 --> 00:09:09.280
So so how do we know that?

139
00:09:09.430 --> 00:09:13.430
How do we know that this code will never run if the status is different?

140
00:09:14.140 --> 00:09:16.250
So let me just make the smaller.

141
00:09:16.270 --> 00:09:17.680
Let me just increase this.

142
00:09:17.860 --> 00:09:20.860
So now you can see that this is the request you, Earl.

143
00:09:20.890 --> 00:09:22.610
This is the API endpoint.

144
00:09:23.080 --> 00:09:24.970
What if I mess something up in here?

145
00:09:25.240 --> 00:09:26.090
What do we get there?

146
00:09:26.290 --> 00:09:34.870
So instead of users, user user users says if I just add an E there and if I save it and when I click

147
00:09:34.870 --> 00:09:36.150
on it, what do we get?

148
00:09:36.460 --> 00:09:46.780
We get a status of four for all right, get this is an error c this is like a typical error 404.

149
00:09:46.960 --> 00:09:58.390
If I come to the Ajax file less than four and if I come here, we know that errors in the range of 400

150
00:09:58.390 --> 00:10:02.250
to 499, they are called client errors.

151
00:10:02.470 --> 00:10:03.280
What does it mean.

152
00:10:03.280 --> 00:10:04.390
It is a client error.

153
00:10:04.390 --> 00:10:05.130
What does it mean?

154
00:10:05.140 --> 00:10:05.920
Who is client.

155
00:10:06.280 --> 00:10:07.030
Me and you.

156
00:10:07.030 --> 00:10:14.290
The people who are making their request, they are the clients, the people who are receiving the request

157
00:10:14.290 --> 00:10:15.700
and making their response.

158
00:10:15.700 --> 00:10:16.660
They are the server.

159
00:10:17.050 --> 00:10:17.800
Very simple.

160
00:10:18.100 --> 00:10:22.000
So this is an error on our part, not on the servers far.

161
00:10:22.150 --> 00:10:26.320
So the server is working correctly, but we made an 404 error.

162
00:10:26.560 --> 00:10:28.040
So this is a client HR.

163
00:10:28.060 --> 00:10:32.200
It means that we missed something up in our code and we missed this.

164
00:10:33.190 --> 00:10:36.310
That's why we say that we are listening for this.

165
00:10:36.520 --> 00:10:38.200
We are only logging.

166
00:10:38.200 --> 00:10:43.120
And you can see that we didn't log anything because the status was not 200.

167
00:10:43.360 --> 00:10:49.660
And now if I save it and when I click it because the status is 200, we do get our data successfully.

168
00:10:50.050 --> 00:10:51.310
That's it for this lecture.

169
00:10:51.310 --> 00:10:52.900
See you guys in the next one.

