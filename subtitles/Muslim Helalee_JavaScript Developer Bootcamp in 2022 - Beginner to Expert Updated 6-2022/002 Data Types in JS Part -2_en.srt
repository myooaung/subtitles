1
00:00:01,070 --> 00:00:01,970
Hi, everyone.

2
00:00:02,150 --> 00:00:08,630
In this lecture, we talk about the big and primitive data type and the reference data types.

3
00:00:10,220 --> 00:00:17,300
All right, so the big and data type is a special numeric type that provides support for integers of

4
00:00:17,300 --> 00:00:18,620
arbitrary length.

5
00:00:19,570 --> 00:00:19,940
Right.

6
00:00:20,320 --> 00:00:27,010
So, for example, if we go ahead and if we specify a big event, let's say let's just give the variable

7
00:00:27,010 --> 00:00:32,740
name big enough and we can provide like an arbitrary length, for example, this.

8
00:00:32,980 --> 00:00:36,250
So we have one, two, three, all the way to zero again.

9
00:00:36,260 --> 00:00:38,680
So these are ten, ten numbers.

10
00:00:38,680 --> 00:00:39,940
They're ten here.

11
00:00:39,940 --> 00:00:40,840
That's 20.

12
00:00:41,200 --> 00:00:42,130
That's 30.

13
00:00:42,310 --> 00:00:46,810
So the length of this arbitrary number is 40 digits.

14
00:00:47,140 --> 00:00:48,180
And that is a lot.

15
00:00:48,430 --> 00:00:55,060
And when you toss in just an end, at the end of that number, that number becomes a big integer.

16
00:00:55,360 --> 00:00:55,770
Right.

17
00:00:56,800 --> 00:01:02,740
That's why it is called a big integer, so if you go ahead and if you call big and we are going to get

18
00:01:02,740 --> 00:01:04,190
that number right.

19
00:01:04,450 --> 00:01:10,990
So this is the first way that the beginning to created a big int is created by appending end to the

20
00:01:10,990 --> 00:01:18,580
end of an integer literal or by calling the function begin that creates begins from strings, numbers

21
00:01:18,580 --> 00:01:19,340
or whatever.

22
00:01:20,050 --> 00:01:20,380
All right.

23
00:01:20,500 --> 00:01:23,530
So we can create big int in another way as well.

24
00:01:23,710 --> 00:01:26,110
So I'm just going to go ahead and I'm going to say big.

25
00:01:27,310 --> 00:01:33,820
And to and for that, we are going to call the big event function.

26
00:01:34,330 --> 00:01:41,610
OK, so this is the function and inside here we can create begins of any string or any number.

27
00:01:41,920 --> 00:01:42,690
In this case.

28
00:01:42,700 --> 00:01:46,760
I'm just going to go ahead and I'm going to create of of of this number.

29
00:01:47,110 --> 00:01:53,110
So whenever you call the function begin, you don't have to toss in the number.

30
00:01:53,290 --> 00:01:53,650
Right.

31
00:01:53,950 --> 00:02:01,840
So now if we go ahead and if you call it big and two, we should be able to get our number and there

32
00:02:01,840 --> 00:02:02,350
it is.

33
00:02:02,560 --> 00:02:08,380
And then we guys can see that even though we have not added an end at the end of the number, we still

34
00:02:08,380 --> 00:02:08,820
get.

35
00:02:08,830 --> 00:02:16,080
And because this is a big integer, we have said so in here by creating the function.

36
00:02:16,520 --> 00:02:16,870
Right.

37
00:02:17,740 --> 00:02:20,320
So this is how big an works in JavaScript.

38
00:02:20,590 --> 00:02:25,420
The next part that I want to talk about is the reference types in JavaScript.

39
00:02:25,660 --> 00:02:30,460
So what I'm going to do is I'm just going to go ahead and I'm going to come in this copy this line pasted

40
00:02:30,460 --> 00:02:35,050
right here and I'm going to change it to two reference.

41
00:02:37,340 --> 00:02:39,470
Reference types in JavaScript.

42
00:02:39,800 --> 00:02:45,570
So there are actually three reference types in three major reference types in JavaScript.

43
00:02:45,830 --> 00:02:50,120
We have a lot, OK, but the main ones are iRace.

44
00:02:52,100 --> 00:02:56,260
Fire objects and functions.

45
00:02:56,330 --> 00:03:01,520
OK, and we in this lecture very quickly, we are going to talk about each one of them.

46
00:03:02,030 --> 00:03:10,880
So arrays are like they are a global object, that they are used in the construction of arrays, which

47
00:03:10,880 --> 00:03:13,270
are high level lists like objects.

48
00:03:13,670 --> 00:03:20,270
So in simple layman terms, arrays, they are used to store information.

49
00:03:21,170 --> 00:03:28,760
Now, what kind of information now arrays and objects, they are actually called JavaScript data structures.

50
00:03:29,180 --> 00:03:29,510
All right.

51
00:03:29,630 --> 00:03:36,500
And I have dedicated separate chapters for iRace objects and functions.

52
00:03:36,680 --> 00:03:37,030
All right.

53
00:03:37,190 --> 00:03:41,200
So this is just an introductory lecture to the world of arrays.

54
00:03:41,480 --> 00:03:50,900
We are going to talk about race a lot in this course, a race they are used to store list information.

55
00:03:51,410 --> 00:03:57,230
Think of a race sort of list you will or will list in the.

56
00:03:57,680 --> 00:03:59,150
OK, let's think of it like that.

57
00:03:59,480 --> 00:04:02,030
We just have items inside the list.

58
00:04:02,330 --> 00:04:08,810
So the way we create an array is first we use our variables in JavaScript.

59
00:04:09,020 --> 00:04:13,650
We select, now we provide the name of the arrays, which is numbers.

60
00:04:13,940 --> 00:04:18,459
Now what what does this numbers array has inside of it?

61
00:04:18,740 --> 00:04:21,800
So the syntax for an array is is brackets.

62
00:04:22,850 --> 00:04:23,290
All right.

63
00:04:23,510 --> 00:04:30,710
The syntax for an object is curly braces and the function is like a combination of parentheses and curly

64
00:04:30,710 --> 00:04:31,270
braces.

65
00:04:31,640 --> 00:04:31,940
Right.

66
00:04:32,390 --> 00:04:37,340
So inside here, what I'm going to do is I'm just going to say one, two and three.

67
00:04:37,640 --> 00:04:44,690
So right now we have successfully created an array that has a name of numbers.

68
00:04:44,840 --> 00:04:50,710
And the information stored inside that array is numbers one, two and three.

69
00:04:50,930 --> 00:04:51,380
All right.

70
00:04:51,390 --> 00:04:52,700
So this is our array.

71
00:04:52,910 --> 00:04:56,710
We can take a look at our array inside the console.

72
00:04:57,110 --> 00:05:00,220
So we just go ahead and write the name of the array.

73
00:05:00,590 --> 00:05:06,070
Right now, in this case, you might ask, OK, that this numbers it's actually a word, right?

74
00:05:06,080 --> 00:05:07,450
It's a set of characters.

75
00:05:07,670 --> 00:05:09,160
So this is a string.

76
00:05:09,230 --> 00:05:09,560
Right.

77
00:05:09,740 --> 00:05:12,020
So we should we should put it inside quotes.

78
00:05:12,230 --> 00:05:14,090
But this is not actually string.

79
00:05:14,090 --> 00:05:16,660
It is a valid JavaScript identifier.

80
00:05:16,850 --> 00:05:21,520
It means that it is a variable name now, variable names.

81
00:05:21,710 --> 00:05:25,870
They should not be represented inside quotes, only strength's.

82
00:05:25,880 --> 00:05:27,170
This is not a string.

83
00:05:27,180 --> 00:05:29,840
This is a JavaScript identifier.

84
00:05:30,230 --> 00:05:35,240
When we use JavaScript identifiers, we do not surround them by quotes.

85
00:05:35,600 --> 00:05:36,230
Let's say it.

86
00:05:38,210 --> 00:05:44,750
All right, so let's go ahead and open it with Life Story first, let's go to the console and we should

87
00:05:44,750 --> 00:05:46,430
be able to see right here.

88
00:05:46,910 --> 00:05:48,620
I'm just going to go ahead and say it again.

89
00:05:48,780 --> 00:05:49,920
So this is our right.

90
00:05:49,940 --> 00:05:53,010
And you guys can see that we have the item.

91
00:05:53,270 --> 00:05:56,270
The first item has an index of zero.

92
00:05:56,450 --> 00:05:57,800
The value is one.

93
00:05:57,830 --> 00:06:00,800
The second item has an index of one, the values two.

94
00:06:00,980 --> 00:06:07,160
And the third item has an index of two values through the length and the length is three.

95
00:06:07,760 --> 00:06:13,670
One thing to keep in mind is that the index number is always one less than the length and it says a

96
00:06:13,670 --> 00:06:14,710
right right here.

97
00:06:14,810 --> 00:06:15,100
Right.

98
00:06:15,350 --> 00:06:17,440
So this is how we can create an array.

99
00:06:17,660 --> 00:06:24,560
We can create objects and functions as well, which I'm just going to go ahead and show you how we can

100
00:06:24,560 --> 00:06:25,430
do that as well.

101
00:06:26,060 --> 00:06:31,500
Now, keep in mind that this is actually like an introduction to a race.

102
00:06:31,500 --> 00:06:39,380
So I'm not going to go in-depth into these topics because I have dedicated separate chapters for separate

103
00:06:39,380 --> 00:06:41,510
data structures in JavaScript.

104
00:06:41,540 --> 00:06:41,870
All right.

105
00:06:42,080 --> 00:06:45,650
So the next data structure that I want to talk about is an object.

106
00:06:46,400 --> 00:06:50,090
The object class represents one of JavaScript data types.

107
00:06:50,090 --> 00:06:55,190
It is used to store various key collections and more complex entities.

108
00:06:55,710 --> 00:07:00,020
Now, arrays and objects, both of them store information.

109
00:07:00,500 --> 00:07:04,400
Now, you might ask, okay, what is the difference between an array and an object?

110
00:07:04,790 --> 00:07:12,350
The first difference is that arrays, they only store values or only store one pair of values.

111
00:07:12,660 --> 00:07:21,350
OK, so it means that we only have one, two, three, or we have like John Mike Ross channeler or whatever.

112
00:07:21,530 --> 00:07:30,710
OK, we either have that or we have only values in arrays, but in objects we have a combination of

113
00:07:30,950 --> 00:07:32,570
key value pairs.

114
00:07:32,870 --> 00:07:33,280
All right.

115
00:07:33,470 --> 00:07:34,540
So I'm just going to go ahead.

116
00:07:34,580 --> 00:07:40,550
I'm going to create an object and I'm going to use another JavaScript variable.

117
00:07:40,700 --> 00:07:42,110
And that is the concept.

118
00:07:42,670 --> 00:07:43,190
All right.

119
00:07:43,190 --> 00:07:45,380
And I'm going to say person, OK.

120
00:07:46,040 --> 00:07:49,820
Now, objects, they're represented by curly braces.

121
00:07:50,060 --> 00:07:55,940
So in here, what I'm going to do is I'm just going to go ahead and I'm going to say name and I'm going

122
00:07:55,940 --> 00:07:58,460
to put the name inside the quotes.

123
00:07:58,580 --> 00:07:59,810
And then you guys can see this.

124
00:07:59,810 --> 00:08:01,520
Mike is a string.

125
00:08:01,520 --> 00:08:03,960
It's not a valid JavaScript identifier.

126
00:08:03,980 --> 00:08:08,060
That's why we should put it inside and inside the inside quotes.

127
00:08:08,300 --> 00:08:12,590
And I'm going to say age and the ages, let's say 35.

128
00:08:12,710 --> 00:08:19,330
And because age is no, we don't have to put it inside, inside any kind of quotations or quotes.

129
00:08:19,850 --> 00:08:23,420
So this is the difference between an array and an object.

130
00:08:23,600 --> 00:08:27,680
You guys can see that we have a key and then we have a value.

131
00:08:27,830 --> 00:08:30,930
And this key value is called a pair.

132
00:08:31,730 --> 00:08:36,380
OK, this is key value pair.

133
00:08:36,799 --> 00:08:46,010
OK, and Joe and objects, they are collections of key value pairs or I'm just going to call them properties

134
00:08:46,460 --> 00:08:49,850
or they are collection of properties.

135
00:08:50,190 --> 00:08:50,630
Right.

136
00:08:51,660 --> 00:08:54,290
We are going to use this term properties a lot.

137
00:08:54,560 --> 00:08:58,040
We can take a look at our object inside the console as well.

138
00:08:58,280 --> 00:09:04,550
And we just for that, we just say cancel the log and then we provide the name of the object, if you

139
00:09:04,550 --> 00:09:05,240
put it here.

140
00:09:05,390 --> 00:09:09,950
So this is the difference between an array and the representation of an object.

141
00:09:10,250 --> 00:09:15,550
The object, the H has a value of 35 and the name has a value of money.

142
00:09:15,800 --> 00:09:23,210
And if this seems odd to you that the name comes first and then the H, it's because that it has been

143
00:09:23,210 --> 00:09:27,290
Alphabeat basically rearranged and it says object.

144
00:09:27,500 --> 00:09:32,000
OK, I'm not going to tell you what these are because these are way advanced down the road.

145
00:09:32,450 --> 00:09:32,780
All right.

146
00:09:32,800 --> 00:09:34,850
So this is an array and this is an object.

147
00:09:35,150 --> 00:09:38,870
The next thing that I want to talk about is a JavaScript function.

148
00:09:39,110 --> 00:09:41,480
Now, functions that are not data structures.

149
00:09:41,480 --> 00:09:48,950
Functions are used to calculate some something or to perform some sort of logic for us.

150
00:09:49,020 --> 00:09:54,650
OK, so I'm just going to go ahead and I'm going to create a very, very simple function to create a

151
00:09:54,650 --> 00:09:55,040
function.

152
00:09:55,040 --> 00:10:00,320
We just write the name, the keyword function and then the give the function and name, which is at

153
00:10:00,790 --> 00:10:02,180
right now.

154
00:10:02,180 --> 00:10:04,010
What do we want this function to do?

155
00:10:04,250 --> 00:10:12,020
We want this function to combine, to add twelve to three and then divide and then multiply the result

156
00:10:12,020 --> 00:10:12,770
by ten.

157
00:10:13,120 --> 00:10:13,490
All right.

158
00:10:13,730 --> 00:10:15,380
Let's say that nothing happens.

159
00:10:15,620 --> 00:10:19,700
I'm just going to go ahead and comment about this, console the logs, because I want the console to

160
00:10:19,700 --> 00:10:20,480
be empty.

161
00:10:21,320 --> 00:10:28,540
Now, nothing happens y because whenever you create a function you have to call that function.

162
00:10:28,820 --> 00:10:31,860
Now all functions in JavaScript are asleep.

163
00:10:31,910 --> 00:10:32,960
Think of it like this.

164
00:10:33,260 --> 00:10:34,310
They are asleep.

165
00:10:34,550 --> 00:10:37,000
Right, whenever you want the phone.

166
00:10:37,210 --> 00:10:43,960
And to do something, you have to poke it with a pokey thing and you have to wake it, you have to tell

167
00:10:43,960 --> 00:10:47,560
it to wake up and perform this and do this.

168
00:10:47,830 --> 00:10:52,980
So in order to wake any function up, we have to call the function.

169
00:10:53,320 --> 00:10:57,220
So the function name is ADD and we are just calling the function.

170
00:10:57,430 --> 00:11:01,810
And now the function has been called and the function is awake.

171
00:11:02,260 --> 00:11:07,210
We can see the result, but it doesn't mean that the function is still sleeping.

172
00:11:07,450 --> 00:11:10,090
We can see the result for ourselves as well.

173
00:11:10,300 --> 00:11:16,840
So what I'm going to do is I'm just going to go ahead and I'm going to provide this and in parentheses

174
00:11:16,840 --> 00:11:21,880
and I'm going to say cancel the lot because I want to show you the results of the function.

175
00:11:22,180 --> 00:11:26,380
So the function grabs 12th 12 and it adds three to it.

176
00:11:26,380 --> 00:11:28,360
That's 15, 15 times 10.

177
00:11:28,570 --> 00:11:30,230
We get 150.

178
00:11:30,730 --> 00:11:37,720
So first four again, I'm just going to go ahead over this idea one more time, that whenever you create

179
00:11:37,720 --> 00:11:39,610
a function, that function is asleep.

180
00:11:39,790 --> 00:11:46,480
You have to call it if you want the function to perform some sort of task or to implement some sort

181
00:11:46,480 --> 00:11:47,230
of logic.

182
00:11:47,560 --> 00:11:51,010
When we call it, we call the function by its name.

183
00:11:51,040 --> 00:11:59,590
OK, like let's say, hey, the add function, get up and add this number and do this mathematical operation

184
00:11:59,740 --> 00:12:01,750
and the function gets up and does it.

185
00:12:02,470 --> 00:12:03,250
That's it for this.

186
00:12:03,250 --> 00:12:05,290
Let's see you guys in the next one.

