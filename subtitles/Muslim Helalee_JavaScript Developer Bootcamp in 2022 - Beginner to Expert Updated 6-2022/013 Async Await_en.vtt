WEBVTT
1
00:00:01.770 --> 00:00:06.570
Hi, everyone, in this lecture, we are going to talk about the async await.

2
00:00:07.840 --> 00:00:15.610
All right, so what are what is this async and what is the await key word that is only permitted inside

3
00:00:15.610 --> 00:00:17.140
of the issing now?

4
00:00:17.140 --> 00:00:24.340
And it this is all these two pages of resources that are available for you inside this file, right

5
00:00:24.340 --> 00:00:26.320
inside the async a lecture file.

6
00:00:27.280 --> 00:00:30.070
We're going to go over it as the MDN explains it.

7
00:00:30.070 --> 00:00:34.870
And then we are going to go ahead and we are going to talk about it in our own language.

8
00:00:35.200 --> 00:00:38.710
So an async and async function is a function.

9
00:00:38.710 --> 00:00:39.400
Declare what?

10
00:00:39.410 --> 00:00:40.210
The async key.

11
00:00:40.750 --> 00:00:45.100
So when you put async in front of any function that becomes an async function.

12
00:00:45.580 --> 00:00:53.350
Async functions are instances of the async function constructor and we know what constructors are.

13
00:00:53.350 --> 00:00:53.680
Right.

14
00:00:54.040 --> 00:00:55.340
And the await key word.

15
00:00:55.780 --> 00:00:58.510
Keep this in mind is permitted within them.

16
00:00:59.140 --> 00:01:07.660
Now the async we await keywords enable asynchronous promise based behavior to be written in a cleaner

17
00:01:07.660 --> 00:01:13.380
style of avoiding the need to explicitly configure promised change.

18
00:01:14.140 --> 00:01:17.240
So asynchronous async away.

19
00:01:17.260 --> 00:01:18.460
They also implement

20
00:01:20.860 --> 00:01:22.280
promises under the hood.

21
00:01:22.300 --> 00:01:22.660
All right.

22
00:01:22.900 --> 00:01:30.100
But they provide even a much simpler syntax for us to make HTTP requests.

23
00:01:30.280 --> 00:01:34.750
So we learned how we can issue requests with the H.R. object.

24
00:01:35.020 --> 00:01:36.220
That was way number one.

25
00:01:36.460 --> 00:01:43.750
And when we talked about the callbacks and the promises, we basically like modernized our code further.

26
00:01:44.260 --> 00:01:49.590
And then we learned a new a newer method, which was the API to make requests.

27
00:01:49.600 --> 00:01:49.890
Right.

28
00:01:50.110 --> 00:01:56.640
And now we are learning another method, which is a syncopate to make requests, to make requests.

29
00:01:56.860 --> 00:01:58.600
So what is this now?

30
00:01:58.600 --> 00:02:05.410
What I'm going to talk about is this async function constructor, because all async functions are instances.

31
00:02:05.680 --> 00:02:06.550
Keep this in mind.

32
00:02:06.910 --> 00:02:14.110
Instances of this function constructor, the async function constructor creates a new async function

33
00:02:14.110 --> 00:02:14.710
object.

34
00:02:15.160 --> 00:02:17.260
So it is actually an object.

35
00:02:17.410 --> 00:02:17.770
Right?

36
00:02:17.770 --> 00:02:20.770
So objects have properties, objects have methods.

37
00:02:21.250 --> 00:02:26.880
In JavaScript, every asynchronous function is actually an async function object.

38
00:02:27.620 --> 00:02:27.950
Right.

39
00:02:28.420 --> 00:02:34.630
So whenever we create an async function, it is, it is actually meaning.

40
00:02:34.630 --> 00:02:40.180
It actually means that we are instantiating an async function constructor.

41
00:02:40.960 --> 00:02:41.250
All right.

42
00:02:41.380 --> 00:02:47.920
So keep this in mind that what do we what we are doing under the hood, we are using constructors under

43
00:02:47.920 --> 00:02:48.410
the hood.

44
00:02:48.670 --> 00:02:49.490
Keep this in mind.

45
00:02:49.520 --> 00:02:49.780
Right.

46
00:02:49.990 --> 00:02:56.790
So what I'm going to do is add one more thing that the await key word and I'm going to come down here.

47
00:02:57.070 --> 00:03:01.120
Here is this thing that you need to keep in mind.

48
00:03:01.390 --> 00:03:04.450
The key word is only valid inside the async function.

49
00:03:04.630 --> 00:03:07.390
If you use it outside, you're going to see a syntax error.

50
00:03:07.600 --> 00:03:09.000
So keep this in mind as well.

51
00:03:09.400 --> 00:03:14.940
If you want to read more about it, you can just go over this spec one more time.

52
00:03:15.100 --> 00:03:16.390
You can go over another.

53
00:03:16.570 --> 00:03:21.130
The docs that was in the spec, the spec is on a coma.

54
00:03:21.640 --> 00:03:25.020
But if you want to go over the documentation, you can how you can.

55
00:03:25.240 --> 00:03:28.540
These are the lengths you can go over there and you can read all about it.

56
00:03:29.020 --> 00:03:34.150
But now we are going to explain this asynchronous async away in our own language.

57
00:03:34.600 --> 00:03:41.140
Now, the async function is an asynchronous function that doesn't block the code execution's and it

58
00:03:41.140 --> 00:03:42.880
is handled by the browser.

59
00:03:43.300 --> 00:03:49.810
OK, so after a definition of the async away async function, it returns a promise.

60
00:03:50.480 --> 00:03:56.740
OK, so when the when it returns a promise, we can use that then method.

61
00:03:57.310 --> 00:04:03.550
And what it does is it is going to hold the variable assignment until the request is resolved.

62
00:04:03.940 --> 00:04:11.200
When they're when the request is resolved, then it is going to assign the fetched value to the value

63
00:04:11.650 --> 00:04:13.120
to the variable response.

64
00:04:13.120 --> 00:04:16.140
And let's go ahead and let's take a look at this.

65
00:04:16.420 --> 00:04:21.690
So I'm going to go ahead and I'm going to create a function and I'm going to say get posts.

66
00:04:22.930 --> 00:04:25.450
There are no more objects.

67
00:04:25.470 --> 00:04:25.930
Right?

68
00:04:26.410 --> 00:04:27.430
We are done with those.

69
00:04:27.820 --> 00:04:29.540
Now, this is a regular function.

70
00:04:29.650 --> 00:04:37.810
What makes this function and a synchronous function is just go ahead and provide async the OK, just

71
00:04:37.810 --> 00:04:39.520
make sure you type it correctly.

72
00:04:39.550 --> 00:04:41.410
So just say async.

73
00:04:41.860 --> 00:04:44.620
And now it has become an in synchronous function.

74
00:04:44.680 --> 00:04:45.420
Very simple.

75
00:04:45.430 --> 00:04:45.670
Right.

76
00:04:46.180 --> 00:04:51.640
So what we are going to do is when you say async, you need to use a wait as well.

77
00:04:52.030 --> 00:04:57.100
Async await what is the keyword is going to do the wait keyword.

78
00:04:57.550 --> 00:05:01.540
I'm just going to write it through the key word.

79
00:05:01.540 --> 00:05:06.550
We are going to fetch some data and I'm sure the syntax is similar to this is the.

80
00:05:07.430 --> 00:05:17.540
That we used with this in Kuwait, now it is going to fetch content or data from ops from an API endpoint.

81
00:05:18.440 --> 00:05:23.060
So let's go ahead and make this smaller, make this one bigger.

82
00:05:23.090 --> 00:05:24.290
I don't want to zoom out.

83
00:05:25.050 --> 00:05:25.310
Right.

84
00:05:25.310 --> 00:05:27.220
That's why I'm switching this.

85
00:05:27.530 --> 00:05:35.000
So the wait is going to fetch this data, but the wait is actually not going to fetch this data.

86
00:05:35.010 --> 00:05:37.730
This fetch is going to grab this data for us.

87
00:05:38.210 --> 00:05:46.280
What the await keyword has specifically designed to do is the await queue keyword is going to wait.

88
00:05:46.880 --> 00:05:48.110
That's why it says a wait.

89
00:05:48.500 --> 00:05:53.090
It is going to wait until all of the data is brought back to us.

90
00:05:53.450 --> 00:05:55.880
And then when we say const.

91
00:05:57.090 --> 00:05:59.820
CONSED response.

92
00:06:02.080 --> 00:06:07.560
It is going to store it inside this variable, I'm going to I'm going to explain this one more time.

93
00:06:08.440 --> 00:06:13.850
So the await keyword is going to await this request and not run this piece of code.

94
00:06:14.410 --> 00:06:20.890
Of course, the Fed is going to make a request to this API endpoint, but the Fed is not going to do

95
00:06:20.890 --> 00:06:24.700
anything else until that request is successfully completed.

96
00:06:24.880 --> 00:06:32.110
And the aready status for and when the ready status for this await key word is going to assign what

97
00:06:32.110 --> 00:06:35.700
comes from this API, what am I doing?

98
00:06:36.190 --> 00:06:42.240
What comes from this is going to store it inside this response variable so we can access it.

99
00:06:42.490 --> 00:06:45.220
So let's go ahead and log it.

100
00:06:45.370 --> 00:06:47.660
And keep in mind, this is going to return.

101
00:06:47.680 --> 00:06:52.760
A promise of this entire thing, in fact, is going to return the promise.

102
00:06:53.080 --> 00:06:55.360
So let's consider Lagoa response.

103
00:06:56.110 --> 00:06:57.850
And if I save it.

104
00:06:58.930 --> 00:07:04.730
OK, and OK, so we are not calling this function, we need to call that function as well.

105
00:07:05.050 --> 00:07:09.670
So I'm in here, I'm going to say get posts, just call it.

106
00:07:09.670 --> 00:07:11.100
Let's wait for the response.

107
00:07:11.440 --> 00:07:12.210
There we go.

108
00:07:12.250 --> 00:07:13.600
This is our response.

109
00:07:13.600 --> 00:07:15.120
And what am I?

110
00:07:15.830 --> 00:07:17.320
I think that's OK.

111
00:07:18.220 --> 00:07:19.480
So this is our response.

112
00:07:19.480 --> 00:07:25.000
And if we come here and if you take a look at this response that we got and if you take a look at the

113
00:07:25.810 --> 00:07:29.250
response that we got, they are identical.

114
00:07:29.260 --> 00:07:29.620
Right?

115
00:07:29.620 --> 00:07:32.050
We have a status, which is the status.

116
00:07:32.710 --> 00:07:34.050
They are identical.

117
00:07:34.480 --> 00:07:35.370
What does that mean?

118
00:07:35.380 --> 00:07:38.800
It means if we want to grab this data.

119
00:07:39.870 --> 00:07:40.750
What should we do?

120
00:07:41.580 --> 00:07:47.820
We need to call the DA Jason method, so what I'm going to do in here is I'm going to create another

121
00:07:47.820 --> 00:07:56.550
constant and I'm going to say posts data and we are going to say await response.

122
00:07:57.740 --> 00:08:08.270
Response dart, Jason, and now we have successfully done three things we know the Jason method is going

123
00:08:08.270 --> 00:08:09.800
to do three things for us.

124
00:08:10.380 --> 00:08:10.650
All right.

125
00:08:10.850 --> 00:08:16.900
The first thing is it is going to convert all our response to a Jason file.

126
00:08:17.570 --> 00:08:19.460
And after that, it is going to read it.

127
00:08:19.460 --> 00:08:24.890
And the third thing is it is going to pass it to something that JavaScript can understand.

128
00:08:25.990 --> 00:08:36.020
All right, so if I were to say canceled blog posts, date and save it, we get our data 100 users.

129
00:08:36.309 --> 00:08:41.440
So if you make a request to users, sorry, this is posts.

130
00:08:41.799 --> 00:08:43.390
We get 100 posts.

131
00:08:43.659 --> 00:08:44.080
Right.

132
00:08:44.710 --> 00:08:50.500
So this is very, very simple, much simpler that we used to do.

133
00:08:50.500 --> 00:08:52.150
So basically two lines of code.

134
00:08:52.990 --> 00:08:59.530
I know we haven't actually gone through the process of catching and throwing errors, and that is what

135
00:08:59.530 --> 00:09:06.730
we are going to complete in our next lecture, that how the error handling is going to work in the realm

136
00:09:06.730 --> 00:09:07.620
of async away.

137
00:09:07.990 --> 00:09:10.060
But it is very simple, right.

138
00:09:10.300 --> 00:09:18.190
So what is this keyword is going to do here is it is going to wait until this Jason method does its

139
00:09:18.190 --> 00:09:22.540
three things and then it is going to assign the value to the data.

140
00:09:23.710 --> 00:09:29.820
Now you might ask, OK, this is waiting until something is completed and then it is going to do something.

141
00:09:30.070 --> 00:09:36.020
Doesn't that sound like synchronous code rather than asynchronous code.

142
00:09:36.190 --> 00:09:42.490
Now it is not synchronous, it is still asynchronous, but just in the context of this line of code,

143
00:09:42.490 --> 00:09:50.370
it is just waiting until it gets the data because if it doesn't weight, the Post's data is not completed.

144
00:09:50.590 --> 00:09:56.950
Just think of it as the reddest state is not for it is waiting until all the red states starts from

145
00:09:56.950 --> 00:09:58.830
zero, then go one, two, three.

146
00:09:58.990 --> 00:10:04.660
And when it reaches four and when it's completed, then it is going to assign this to this date to this

147
00:10:04.660 --> 00:10:05.290
variable.

148
00:10:06.250 --> 00:10:12.880
If it assigns it any time earlier, we are going to get an error because the red state is not yet for

149
00:10:13.180 --> 00:10:15.790
we have not achieved the completion status.

150
00:10:16.750 --> 00:10:17.080
Right.

151
00:10:17.410 --> 00:10:24.850
And the other reason that this is not a this is not synchronous code, this is in fact asynchronous

152
00:10:24.850 --> 00:10:28.790
code is that we could just test it so we can say cancel.

153
00:10:28.990 --> 00:10:32.500
I'm just going to say two plus five and I'm going to do one down here.

154
00:10:32.500 --> 00:10:37.830
So one before the function call and one after the function call in in here I'm going to say 50.

155
00:10:38.500 --> 00:10:41.910
So if I were to save this, what should we see inside the console?

156
00:10:42.280 --> 00:10:48.070
So inside the console we should see first this council log, then this one.

157
00:10:48.280 --> 00:10:56.170
And because this async function is handed over to the browser, we should see it like like in the third

158
00:10:56.170 --> 00:10:56.600
order.

159
00:10:56.980 --> 00:11:04.510
So if I say it, we see seven this console log, we see twenty when this is so you can see that JavaScript

160
00:11:04.510 --> 00:11:08.110
jumped over this one because this was handed over to the browser.

161
00:11:08.320 --> 00:11:11.260
So JavaScript could go on and execute this line.

162
00:11:11.410 --> 00:11:16.900
And when the browser was done, the browser handed it over back to JavaScript and JavaScript, logged

163
00:11:16.900 --> 00:11:17.620
it to the console.

164
00:11:18.250 --> 00:11:21.330
Very, very, very simple ideology in here.

165
00:11:21.790 --> 00:11:28.150
So what I'm going to do is I'm just going to use the DOT then method here as well, just to show you

166
00:11:28.510 --> 00:11:38.260
that this if we go ahead and if I just go ahead and return the Post's data, what this is going to do

167
00:11:38.260 --> 00:11:42.940
is it is going to return this entire block is going to return a promise.

168
00:11:43.210 --> 00:11:43.600
All right.

169
00:11:43.780 --> 00:11:45.970
So we know that this is going to return a promise.

170
00:11:45.970 --> 00:11:49.800
We talked about that so we can use a dot then method.

171
00:11:50.230 --> 00:11:53.920
So inside this dot, then I'm just going to say data.

172
00:11:56.090 --> 00:11:57.890
And we are going to say can't.

173
00:11:59.630 --> 00:12:06.210
Console log data, let's save it, and now we get the same result, right?

174
00:12:06.380 --> 00:12:12.650
So you either called that caller there, but that's not actually the best way of doing it, because

175
00:12:13.280 --> 00:12:20.030
this is where we call the data, where we get when the promise is resolved and then we can throw a catch

176
00:12:20.030 --> 00:12:22.920
there when we promise is is rejected.

177
00:12:23.270 --> 00:12:28.160
So this is actually the way that we are going to do it in our next election.

178
00:12:28.370 --> 00:12:29.900
So see you guys that.

