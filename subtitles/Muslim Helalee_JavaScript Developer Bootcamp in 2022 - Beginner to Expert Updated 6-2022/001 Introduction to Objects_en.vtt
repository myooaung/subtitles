WEBVTT
1
00:00:00.950 --> 00:00:01.920
Hi, everyone.

2
00:00:02.120 --> 00:00:06.230
In this lecture, we are going to reintroduce objects.

3
00:00:07.240 --> 00:00:15.100
All right, so we have talked about what objects are right, but this chapter is dedicated to talking

4
00:00:15.100 --> 00:00:16.870
about objects more deeply.

5
00:00:16.880 --> 00:00:20.320
We are going to dive deep into the subject of objects.

6
00:00:20.410 --> 00:00:21.550
Right now.

7
00:00:21.560 --> 00:00:24.210
Objects are another data structures.

8
00:00:24.850 --> 00:00:29.540
They are actually the core of JavaScript or objects.

9
00:00:29.770 --> 00:00:38.260
Now, since the start, since the release of year 2015 or ESX, we do not call them objects any more.

10
00:00:38.260 --> 00:00:40.660
But that's just for simplicity purposes.

11
00:00:41.140 --> 00:00:43.950
Their actual name is an object literal.

12
00:00:43.960 --> 00:00:44.320
All right.

13
00:00:44.470 --> 00:00:46.930
And they store a key value pairs.

14
00:00:46.960 --> 00:00:47.260
OK.

15
00:00:48.570 --> 00:00:55.380
Now, objects and arrays, both of them are data structures, all right, but the information stored

16
00:00:55.380 --> 00:01:03.390
in objects are properties and are represented as key value pairs as opposed to items in arrays.

17
00:01:03.780 --> 00:01:12.210
Therefore, we can store more complex data with objects, and accessing such properties is done by accessing

18
00:01:12.210 --> 00:01:12.840
their keys.

19
00:01:12.990 --> 00:01:13.310
Right.

20
00:01:14.010 --> 00:01:18.360
So key value pairs and objects are actually called properties.

21
00:01:18.630 --> 00:01:19.020
All right.

22
00:01:19.170 --> 00:01:27.670
And because we have because we can store key value pairs in objects, we can store more complex data.

23
00:01:27.700 --> 00:01:28.060
All right.

24
00:01:28.800 --> 00:01:38.070
But as with arrays, we can use const as with arrays, we can use const with objects because like arrays,

25
00:01:38.070 --> 00:01:40.980
objects are also referenced by their names.

26
00:01:41.160 --> 00:01:48.760
As long as we do not change the reference of the object, we should be fine if we use const with objects.

27
00:01:48.990 --> 00:01:54.560
So let's go ahead and let's create our very first object and I'm going to call it address.

28
00:01:54.600 --> 00:02:02.550
So the name of this object, we are going to use const and let and we are going to use const for objects

29
00:02:02.550 --> 00:02:04.940
and for a raise as much as we can.

30
00:02:04.960 --> 00:02:05.260
Right.

31
00:02:05.400 --> 00:02:12.150
So we are going to say address and now the syntax for any object is a curly brace, right.

32
00:02:12.480 --> 00:02:18.240
It is a curly brace and inside the curly brace we are going to have a key and we we are going to have

33
00:02:18.240 --> 00:02:18.810
a value.

34
00:02:19.080 --> 00:02:24.210
These key and values, they are going to create a pair.

35
00:02:24.450 --> 00:02:27.390
That's why they're called key value pairs.

36
00:02:27.840 --> 00:02:33.270
And all of these key value pairs are called properties of this object.

37
00:02:33.660 --> 00:02:34.000
Right.

38
00:02:34.740 --> 00:02:37.560
So the country this is the key.

39
00:02:37.830 --> 00:02:38.250
Right.

40
00:02:39.360 --> 00:02:41.130
And the value is going to be turkey.

41
00:02:41.560 --> 00:02:41.970
Right.

42
00:02:42.510 --> 00:02:51.030
And always we always separate key value pairs, this combination, this combo with eCom.

43
00:02:51.210 --> 00:02:55.920
So this ideology is the same in arrays and in objects.

44
00:02:56.430 --> 00:02:56.820
Right.

45
00:02:57.300 --> 00:02:58.740
And I'm going to say city.

46
00:03:00.230 --> 00:03:04.620
And keep in mind that these are colon's they are not semicolon, they're just calling.

47
00:03:04.620 --> 00:03:06.610
So I'm going to zoom in country.

48
00:03:06.800 --> 00:03:10.340
This is our key colon colon.

49
00:03:10.340 --> 00:03:13.250
Then we have our value, all right.

50
00:03:13.340 --> 00:03:21.950
And then we have comma and then we have again and a key colon value, comma and so on and so forth.

51
00:03:27.040 --> 00:03:30.610
All right, so the city is going to be Istanbul.

52
00:03:31.730 --> 00:03:39.330
All right, so let's save it and now how can we take a look at the object inside the browser as we just

53
00:03:39.330 --> 00:03:46.010
go going to go ahead and we are going to consider log the name of that object and now you guys can see

54
00:03:46.010 --> 00:03:48.160
that the syntax has been changed.

55
00:03:48.770 --> 00:03:53.060
Now, as with arrays, we had brackets with with objects.

56
00:03:53.060 --> 00:03:55.310
We have curly braces.

57
00:03:55.310 --> 00:03:55.670
All right.

58
00:03:55.790 --> 00:03:57.430
And here it says object.

59
00:03:57.710 --> 00:03:58.640
We have a city.

60
00:03:58.640 --> 00:04:01.460
The value is Istanbul and we have a country.

61
00:04:01.730 --> 00:04:02.660
The value is.

62
00:04:03.320 --> 00:04:03.620
All right.

63
00:04:03.770 --> 00:04:07.640
So we have just created our very first object.

64
00:04:07.870 --> 00:04:13.420
OK, now, the next thing that I want to talk about is accessing the object data.

65
00:04:13.430 --> 00:04:15.890
How can we access the object data?

66
00:04:16.070 --> 00:04:21.649
Well, actually, there are two methods that we can access the data from any object.

67
00:04:22.019 --> 00:04:28.020
OK, and accessing the properties of an object is done through the DOT syntax.

68
00:04:28.040 --> 00:04:28.340
All right.

69
00:04:28.670 --> 00:04:31.970
The DOT syntax is also used for accessing methods.

70
00:04:32.450 --> 00:04:33.500
Now, keep this in mind.

71
00:04:33.650 --> 00:04:37.370
We do have the DOT syntax like dot push that length.

72
00:04:37.550 --> 00:04:44.660
But some of some of those dot syntaxes, they are used for accessing methods and some of them are used

73
00:04:44.660 --> 00:04:46.220
for accessing properties.

74
00:04:47.140 --> 00:04:51.380
The difference is in the parentheses, right, the concept is the same.

75
00:04:51.970 --> 00:04:55.530
All right, so we are going to go ahead and we're going to say concertante lock.

76
00:04:56.470 --> 00:05:02.350
First off, we are going to access the name of the object and through the dot notation, whenever I

77
00:05:02.350 --> 00:05:04.270
had done, you guys can see that here.

78
00:05:04.270 --> 00:05:06.310
It's a city and it's this country.

79
00:05:06.460 --> 00:05:09.520
And when the cube is blue, it means these are properties.

80
00:05:09.700 --> 00:05:16.450
And when the cube is purple and in the right and the upright direction, then that is going to be a

81
00:05:16.450 --> 00:05:17.080
property.

82
00:05:18.160 --> 00:05:19.590
So that's going to be a method.

83
00:05:19.750 --> 00:05:23.590
But when the cube is lying and it's blue, then it is a property.

84
00:05:23.590 --> 00:05:26.270
And when I click on the city, we are going to get this number.

85
00:05:26.950 --> 00:05:27.370
All right.

86
00:05:28.150 --> 00:05:29.140
Very, very cool.

87
00:05:29.260 --> 00:05:32.260
And we are going to say it is very BCU.

88
00:05:33.270 --> 00:05:38.580
To four, but this is a string, so we should provide it inside quotes.

89
00:05:39.830 --> 00:05:46.010
Istanbul is very beautiful, right, so we can do this as well, of course, they should do it in two

90
00:05:46.010 --> 00:05:48.570
steps so there is no confusion.

91
00:05:48.920 --> 00:05:49.360
All right.

92
00:05:49.460 --> 00:05:59.150
So this is the first method that we can use to access the data from any from any object we can use templates,

93
00:05:59.150 --> 00:06:01.550
strings as well, or template literals.

94
00:06:01.760 --> 00:06:07.400
And for that, what I'm going to do is I'm going to create I'm going to do some tactics and we are going

95
00:06:07.400 --> 00:06:11.910
to create our template literal and we are going to say address.

96
00:06:11.930 --> 00:06:15.940
So this is our object and the object is stored within a variable.

97
00:06:15.950 --> 00:06:16.340
Right.

98
00:06:16.580 --> 00:06:18.260
So this is the variable name.

99
00:06:18.270 --> 00:06:19.100
This is address.

100
00:06:19.220 --> 00:06:20.340
And what do we want to get?

101
00:06:20.360 --> 00:06:29.930
We want to grab the country property and we say has an astounding, astounding scenery.

102
00:06:31.570 --> 00:06:40.140
And it says Turkey has an its and Turkey has an astounding sener, right, so we can access them through

103
00:06:40.360 --> 00:06:42.850
back ticks or the Templar strings as well.

104
00:06:43.600 --> 00:06:45.990
OK, so, so far, so good.

105
00:06:46.930 --> 00:06:50.740
And we are going to move on to the next method that we can access.

106
00:06:51.010 --> 00:06:54.460
And this method is called through a raid brackets.

107
00:06:54.490 --> 00:06:54.850
All right.

108
00:06:55.030 --> 00:06:58.670
I'm just going to go ahead and I'm going to copy the comment and I'm going to paste it right here.

109
00:06:59.110 --> 00:06:59.470
All right.

110
00:06:59.560 --> 00:07:03.250
So accessing the object data method to array brackets.

111
00:07:03.610 --> 00:07:03.980
All right.

112
00:07:04.150 --> 00:07:11.300
And these are used for a number of properties and strings of multiple words as object properties.

113
00:07:11.710 --> 00:07:17.430
Now, so far, we have seen that these strings, these sort of these keys, they have only one word.

114
00:07:17.710 --> 00:07:19.420
What if they have two words?

115
00:07:19.990 --> 00:07:24.520
Then we cannot use the dot notation, because in that case, we would say city.

116
00:07:24.520 --> 00:07:29.080
And then a space space is in property names and in method names.

117
00:07:29.080 --> 00:07:31.510
They are invalid JavaScript syntax.

118
00:07:32.050 --> 00:07:40.790
And for that we can use the second we can use the second method to access the data from an object.

119
00:07:41.080 --> 00:07:45.970
So I'm going to go ahead and I'm going to comment about the object and I'm going to create another object

120
00:07:45.970 --> 00:07:50.200
of person so we can have more data to work with.

121
00:07:50.350 --> 00:07:52.150
So the name is going to be.

122
00:07:54.440 --> 00:08:02.690
I don't know, like Sam, let's name him Sam, and the Age is going to be 31, right.

123
00:08:03.470 --> 00:08:08.630
And then we have full address, right.

124
00:08:09.050 --> 00:08:12.110
Full address is going to be Athans.

125
00:08:13.520 --> 00:08:19.670
Athens, Greece, I hope I'm pronouncing that correctly and the job.

126
00:08:20.760 --> 00:08:24.180
Is going to be Captain America.

127
00:08:25.540 --> 00:08:30.840
Right, so now you guys can see it through an error here, because there is a comma missing there.

128
00:08:31.200 --> 00:08:39.260
You should never miss your come and nineteen ninety or 1984 or 85.

129
00:08:39.539 --> 00:08:40.600
What am I writing here?

130
00:08:40.890 --> 00:08:46.220
85 is the dō dobe date of birth.

131
00:08:46.800 --> 00:08:49.010
So this is a valid JavaScript object.

132
00:08:49.170 --> 00:08:50.010
We can't now.

133
00:08:50.010 --> 00:08:54.000
I have I have I have done something diverse.

134
00:08:54.240 --> 00:08:56.580
We have used multiple words as keys.

135
00:08:56.580 --> 00:09:00.590
We have used numbers, eskies, because I will show you how the second method works.

136
00:09:00.900 --> 00:09:02.910
So we are going to say Konzerthaus log.

137
00:09:03.970 --> 00:09:11.880
First off, let's go ahead and log the person object and it is person, and so this is our object,

138
00:09:11.890 --> 00:09:12.300
all right.

139
00:09:12.330 --> 00:09:13.760
Everything everything is there.

140
00:09:14.350 --> 00:09:18.710
Now, what I'm going to do is let's go ahead and let's say we want to grab the edge.

141
00:09:19.240 --> 00:09:24.820
So if I put in the dart, we can grab the H like this, just 30 Asias 31.

142
00:09:24.830 --> 00:09:25.200
Right.

143
00:09:25.540 --> 00:09:30.940
But the other method is through this, we can grab it through like this as well.

144
00:09:31.210 --> 00:09:35.780
Now, keep in mind that this age is not a valid JavaScript identifier.

145
00:09:35.980 --> 00:09:43.240
That's why you should put it inside inside quotations, the keys in any object.

146
00:09:43.270 --> 00:09:46.300
They are not valid JavaScript identifiers.

147
00:09:46.510 --> 00:09:54.460
That's why if I go ahead and if I if I declare another age here, this is going to be all right, because

148
00:09:54.460 --> 00:09:59.570
this age is a variable and this age is actually a key inside an object.

149
00:09:59.770 --> 00:10:03.870
So this is a fun fact about JavaScript object keys as well.

150
00:10:04.450 --> 00:10:10.870
And that's why whenever your access is accessing them through brackets, you should you should provide

151
00:10:10.870 --> 00:10:20.820
them insights, inside quotations so we can go ahead and we can grab the 1990 but 1985 sorry, 1985.

152
00:10:21.040 --> 00:10:23.860
But if I do it like this, it is going to give us the job.

153
00:10:24.040 --> 00:10:30.970
We can't do it like this and we can do it like the through the quotations as well.

154
00:10:31.210 --> 00:10:31.570
All right.

155
00:10:31.750 --> 00:10:32.920
This is a best practice.

156
00:10:32.920 --> 00:10:34.090
You should do it like this.

157
00:10:34.720 --> 00:10:35.210
All right.

158
00:10:35.230 --> 00:10:36.280
So let's check it out.

159
00:10:36.310 --> 00:10:39.520
Let's check out The Age, whether or not it works like that.

160
00:10:40.530 --> 00:10:46.650
Age is not defined, see, so this is a number, so numbers, we can use numbers themselves or we can

161
00:10:46.860 --> 00:10:50.420
use numbers, strings, because JavaScript coerces the time.

162
00:10:50.610 --> 00:10:51.960
So there is no problem there.

163
00:10:52.140 --> 00:10:57.840
But as far as the strings are concerned, we should provide them inside their quotations.

164
00:10:58.090 --> 00:10:58.470
Right.

165
00:10:58.920 --> 00:11:08.050
And and now for the final one, once and for the most, like a weighted one is this one.

166
00:11:08.220 --> 00:11:10.260
So we are going to say full.

167
00:11:11.280 --> 00:11:17.970
Actress and we should be able to get it, says Athens, Greece, Greece, but what if we use the dot

168
00:11:17.970 --> 00:11:22.270
notation with the with two words for a key?

169
00:11:22.500 --> 00:11:25.750
So if I say four, we are going to get this, OK?

170
00:11:25.820 --> 00:11:27.510
This is not what I want to get.

171
00:11:27.520 --> 00:11:30.480
This is for and address.

172
00:11:30.640 --> 00:11:31.440
Let's save it.

173
00:11:31.950 --> 00:11:36.230
And now we get missing this after argument list.

174
00:11:36.560 --> 00:11:38.080
Now, this is incorrect.

175
00:11:38.100 --> 00:11:41.160
This is an error in JavaScript console.

176
00:11:41.630 --> 00:11:44.460
Audiences expected this comma, right.

177
00:11:44.790 --> 00:11:52.650
Because this is not a valid JavaScript code inside your properties and inside your methods, you should

178
00:11:52.650 --> 00:11:55.300
not have spaces.

179
00:11:55.440 --> 00:11:59.890
So if I do this, we are still not going to get it because it says undefined.

180
00:12:00.180 --> 00:12:07.110
So the only way that we can get a key that has more than one word is through the bracket, through the

181
00:12:07.110 --> 00:12:08.100
bracket notation.

182
00:12:08.310 --> 00:12:08.640
All right.

183
00:12:08.850 --> 00:12:09.810
So that's it for this.

184
00:12:10.140 --> 00:12:11.850
See you guys in the next one.

