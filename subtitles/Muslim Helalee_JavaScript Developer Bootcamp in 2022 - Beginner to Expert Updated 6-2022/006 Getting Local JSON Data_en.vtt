WEBVTT
1
00:00:01.740 --> 00:00:08.520
Hi, everyone, this lecture, we are going to get local data from a Jason file.

2
00:00:09.550 --> 00:00:18.250
All right, so this lecture is meant to mimic this behavior of Jason's drink, receiving that Jason's

3
00:00:18.250 --> 00:00:25.480
drink, passing that, Jason's drinking, printing it on the screen or just putting it inside a a suction

4
00:00:25.480 --> 00:00:27.390
container and HTML element.

5
00:00:27.670 --> 00:00:34.150
So this section this lecture is just just we just want to go over what is Jason data?

6
00:00:34.300 --> 00:00:40.210
How do we know what is Jason data, how we can pass it, how we can use it inside our Web page.

7
00:00:40.600 --> 00:00:42.880
And I know this is still local.

8
00:00:42.880 --> 00:00:43.270
Right.

9
00:00:43.270 --> 00:00:49.190
But the example works for any like online you URL as well.

10
00:00:49.390 --> 00:00:49.690
Right.

11
00:00:49.930 --> 00:00:53.360
So first off, let's go over the syntax for the Jason.

12
00:00:53.740 --> 00:01:04.840
So in order to create a Jason file excuse me, the extension name is Jason O n Jason or Jason doesn't

13
00:01:04.840 --> 00:01:05.530
really matter.

14
00:01:06.880 --> 00:01:12.190
So whenever you you write whatever Dot Jason, you're going to get this.

15
00:01:12.370 --> 00:01:18.880
So you can see that I'm just going to zoom in, hopefully unable to zoom out if I come here.

16
00:01:19.060 --> 00:01:20.830
OK, I'm able to write into.

17
00:01:20.920 --> 00:01:22.030
OK, what about here.

18
00:01:22.950 --> 00:01:31.680
I can do it for rejuvenator settings for it, whatever, so in here, what we have is you can see that

19
00:01:31.920 --> 00:01:35.960
we have curly braces for JavaScript, we have JS for e-mail.

20
00:01:35.970 --> 00:01:43.230
We have greater greater than sine and less than sine.

21
00:01:43.560 --> 00:01:44.560
Kind of forgot the name.

22
00:01:45.030 --> 00:01:47.170
So this is a Jason file.

23
00:01:47.190 --> 00:01:51.870
You can see that this is it has a different extension name a different icon.

24
00:01:52.290 --> 00:02:01.980
And what we have in here is if you call back our animal trivia quiz application, we had 10 questions.

25
00:02:02.340 --> 00:02:07.850
Those questions, they were inside an array of they were an array of objects.

26
00:02:08.160 --> 00:02:08.419
Right.

27
00:02:08.550 --> 00:02:11.130
So for the array items, we had objects.

28
00:02:11.130 --> 00:02:12.720
I just copied it from there.

29
00:02:12.870 --> 00:02:17.670
That's and I just removed the correct answer from here and the image.

30
00:02:18.030 --> 00:02:21.240
So we just have the question and all the for answer choices.

31
00:02:21.480 --> 00:02:27.600
Now, the difference is now you can see that we have our bracket there and we have our ending bracket

32
00:02:27.600 --> 00:02:27.840
here.

33
00:02:27.840 --> 00:02:34.770
So it looks like an array, but different says we don't have any let Konsta var we don't have any variable

34
00:02:34.770 --> 00:02:40.350
and we don't have any identifier, an equal sign and in the object.

35
00:02:42.040 --> 00:02:50.500
The keys and the values, all of them should be surrounded by double quotes and the final one, the

36
00:02:50.500 --> 00:02:52.540
final item doesn't have a comma.

37
00:02:52.570 --> 00:02:57.150
I think that's the same with a race, but the final one does enough.

38
00:02:57.370 --> 00:02:59.760
If you provide a comma, it is going to throw an error.

39
00:03:00.130 --> 00:03:01.560
It's a trailing comma.

40
00:03:01.570 --> 00:03:04.300
Jason's line 71.

41
00:03:04.420 --> 00:03:08.030
So if I come here just to remove it, it tells you what to do.

42
00:03:08.500 --> 00:03:10.120
So this is a Jason file.

43
00:03:10.120 --> 00:03:17.530
What we are going to do is we think we just want to replicate this as as it is coming from for us,

44
00:03:17.530 --> 00:03:20.220
from the server coming to us from the server.

45
00:03:20.560 --> 00:03:24.700
So and what is what it is exactly that I want to do in this lecture?

46
00:03:24.700 --> 00:03:30.010
I want to be able to click on these questions and print all the questions.

47
00:03:30.010 --> 00:03:33.190
And inside this Web page, I want to do that.

48
00:03:33.730 --> 00:03:41.770
And you can see that this is a hands on practical example, that we get data and we use that data inside

49
00:03:41.770 --> 00:03:42.520
our website.

50
00:03:42.850 --> 00:03:47.980
We have some basic styling for the paragraph, for the search, for the button, for the paragraph and

51
00:03:47.980 --> 00:03:48.670
for the airline.

52
00:03:48.970 --> 00:03:52.240
I have provided them in line internally.

53
00:03:52.240 --> 00:03:59.170
Sorry, not in line internally because I didn't want it to create, like, clutter this workspace that

54
00:03:59.170 --> 00:03:59.860
we have here.

55
00:03:59.870 --> 00:04:01.290
So I just provided it here.

56
00:04:01.300 --> 00:04:07.110
They are very, very simple and they are just basically this and the paragraph.

57
00:04:07.120 --> 00:04:11.470
You don't have any paragraph, you don't have any allies, but when you create them, they're going

58
00:04:11.470 --> 00:04:12.600
to grab these styles.

59
00:04:12.610 --> 00:04:15.470
So let's dive into this lecture now.

60
00:04:15.640 --> 00:04:22.089
So first off, I don't need to do is I'm going to say consed I'm going to grab the questions Beaton

61
00:04:22.660 --> 00:04:29.800
because whenever I click that this is going to fire that HTP request to the server.

62
00:04:29.800 --> 00:04:30.760
Where is the server.

63
00:04:30.770 --> 00:04:35.550
This is the server and we are going to grab the data so we need to grab this.

64
00:04:35.560 --> 00:04:40.050
So it is going to be questions BTN and we are going to say document.

65
00:04:40.420 --> 00:04:44.130
This is the simpler part that is also simple as well.

66
00:04:44.140 --> 00:04:45.590
So but um.

67
00:04:46.210 --> 00:04:52.100
And in here this is questions container.

68
00:04:53.550 --> 00:04:59.810
Container container, and this is going to be questions container.

69
00:05:00.750 --> 00:05:03.170
All right, so we have successfully selected them.

70
00:05:04.470 --> 00:05:08.790
What we are going to do is we're going to say questions button dot out of them, listener.

71
00:05:09.000 --> 00:05:10.440
We're listening for an event.

72
00:05:10.440 --> 00:05:13.540
And that event is going to be kallick when we click it.

73
00:05:14.160 --> 00:05:19.050
We want to get what we want to get questions right now.

74
00:05:19.050 --> 00:05:24.060
Let's define this function, function, get questions.

75
00:05:24.510 --> 00:05:25.010
All right.

76
00:05:25.680 --> 00:05:30.060
And so now remember, we have four easy steps.

77
00:05:30.060 --> 00:05:32.580
One instantiate a new teacher object.

78
00:05:32.850 --> 00:05:38.840
So const I could call it new, but in this in this scenario it is new.

79
00:05:38.850 --> 00:05:45.950
So I'm just going to say no and I'm going to say x h r LBG.

80
00:05:45.960 --> 00:05:48.640
So you know that you can give it any name that you want.

81
00:05:49.380 --> 00:05:51.650
Some people, even politics itself.

82
00:05:52.170 --> 00:05:57.980
So it is going to be xml, htp, xml, htp request.

83
00:05:57.990 --> 00:05:59.730
So the step one is done.

84
00:06:00.060 --> 00:06:03.270
The next step is to set up the request.

85
00:06:03.600 --> 00:06:05.130
How do we set up the request.

86
00:06:05.130 --> 00:06:11.910
We just go ahead and use the open method and we say open the open method is going to grab three arguments.

87
00:06:12.180 --> 00:06:14.690
The first one is their request method.

88
00:06:14.910 --> 00:06:16.550
We want to get data.

89
00:06:17.160 --> 00:06:21.600
So whenever we want to retrieve data, we just use the get method.

90
00:06:22.950 --> 00:06:25.400
Where is the request you orl the request.

91
00:06:25.400 --> 00:06:27.960
Your URL is six dot questions.

92
00:06:29.430 --> 00:06:30.960
Make sure to spell it correctly.

93
00:06:31.440 --> 00:06:37.950
Questions start Jesso and Jason and we need to provide the flag.

94
00:06:37.950 --> 00:06:41.730
Whether it is synchronous or asynchronous, it is asynchronous.

95
00:06:41.730 --> 00:06:44.290
That's why that is the whole idea of this chapter.

96
00:06:44.670 --> 00:06:47.730
So what I'm going to do is the next step.

97
00:06:47.850 --> 00:06:52.890
We are going to write the next step, which is actually which is usually the largest step, the biggest

98
00:06:52.890 --> 00:06:53.150
step.

99
00:06:53.430 --> 00:06:59.520
So in this step, we want to we want to know what do we want to do when we get this data, when the

100
00:06:59.520 --> 00:07:08.790
status is completed, when it is like 200, what do we want to do with that data?

101
00:07:09.900 --> 00:07:18.780
So what I'm going to do is I'm going to say new XIKAR object onload and we're going to run a function

102
00:07:18.810 --> 00:07:20.990
right now.

103
00:07:21.030 --> 00:07:23.770
What happens when I get the data?

104
00:07:23.790 --> 00:07:24.670
What do I want to do?

105
00:07:24.900 --> 00:07:29.370
First off, we need to know if the status is 200.

106
00:07:29.910 --> 00:07:34.660
But there is something else that is the red state property that we need to know as well.

107
00:07:34.980 --> 00:07:37.910
So what are we to do is I'm going to say consider log.

108
00:07:37.920 --> 00:07:44.970
First off, let's log the this keyword and the final step is actually sending the request.

109
00:07:44.980 --> 00:07:47.510
So new char object doesn't.

110
00:07:48.600 --> 00:07:53.250
So I'm just going to click on this and we get this request.

111
00:07:53.520 --> 00:08:00.360
And if I come here and if I come to the ready state, it says for why does it say for and why is it

112
00:08:00.360 --> 00:08:00.930
important?

113
00:08:01.260 --> 00:08:04.280
Here is the MDN documentation for it.

114
00:08:04.290 --> 00:08:09.950
I'm just going to copy the link and we are going to provide you with that link.

115
00:08:09.960 --> 00:08:10.440
You know what?

116
00:08:10.440 --> 00:08:13.190
I'm going to provide you with that link right here.

117
00:08:13.620 --> 00:08:15.150
So in case you want to go back to it.

118
00:08:15.720 --> 00:08:19.560
So it performs property returns.

119
00:08:19.560 --> 00:08:27.330
The state of an XIKAR client is in the state, an exit your client is in.

120
00:08:27.360 --> 00:08:27.660
All right.

121
00:08:27.870 --> 00:08:29.960
So there are actually five states.

122
00:08:30.510 --> 00:08:36.940
The first one is zero, which is on set, which is the client has been created open, not called yet.

123
00:08:37.500 --> 00:08:42.299
This some developers don't call this as a like as a state.

124
00:08:42.539 --> 00:08:45.510
They just say, OK, when you do open, then it counts.

125
00:08:45.540 --> 00:08:47.370
So then we have only four states.

126
00:08:47.700 --> 00:08:49.990
But but in reality, we have five.

127
00:08:50.490 --> 00:08:55.380
So first one is on set, which is the value for the already state, the value that we see.

128
00:08:55.380 --> 00:08:56.200
Right.

129
00:08:56.880 --> 00:08:57.630
Where are you?

130
00:08:58.930 --> 00:08:59.720
Come on, buddy.

131
00:09:00.460 --> 00:09:05.650
So if I come here, you can see that the real estate value isn't for, I'm just going to zoom in so

132
00:09:05.650 --> 00:09:06.440
you can see it better.

133
00:09:06.610 --> 00:09:10.660
So this is for we are going to get to for one is it is open.

134
00:09:10.660 --> 00:09:16.450
The open method has been called to headers received three.

135
00:09:16.450 --> 00:09:19.000
It is loading, loading response.

136
00:09:19.000 --> 00:09:20.980
Text holds partial data.

137
00:09:20.980 --> 00:09:25.480
It means it has not completed yet and ready state for it means it's done.

138
00:09:25.480 --> 00:09:26.570
The operation is complete.

139
00:09:26.860 --> 00:09:33.100
So in reality, what is the real state number or value that we are looking for?

140
00:09:33.340 --> 00:09:34.810
It's for right.

141
00:09:35.110 --> 00:09:38.770
So what I'm going to do is I'm going to bring this down and I'm going to.

142
00:09:40.110 --> 00:09:50.940
Remove this and I'm going to say, if this Dott status equals 200, we are going to use the logical

143
00:09:50.940 --> 00:09:58.890
and operator and we are going to say this, that red state also equals four.

144
00:09:59.280 --> 00:10:01.410
Then we want to do something.

145
00:10:01.750 --> 00:10:02.110
All right.

146
00:10:02.400 --> 00:10:09.990
So this is a typical way of doing like like doing setting up the data.

147
00:10:09.990 --> 00:10:12.730
When we receive the data, what do we want to do with that data?

148
00:10:13.050 --> 00:10:18.390
We don't want to do anything with the data if the status is not 200 and the red state is not four.

149
00:10:18.630 --> 00:10:21.800
So if the data is not ready, the data is not completed.

150
00:10:21.810 --> 00:10:22.760
We have made an error.

151
00:10:22.770 --> 00:10:24.390
I don't want to do anything with the data.

152
00:10:24.390 --> 00:10:25.950
I don't want to mess up my webpage.

153
00:10:25.950 --> 00:10:26.260
Right.

154
00:10:26.760 --> 00:10:28.870
So we need to make sure that this happens.

155
00:10:29.160 --> 00:10:33.750
So now what I'm going to do is we are going to grab our questions.

156
00:10:34.500 --> 00:10:35.940
Where are our questions?

157
00:10:35.940 --> 00:10:42.290
Our questions are inside this Jason file that we have made a reference to them in right here.

158
00:10:42.860 --> 00:10:43.150
Right.

159
00:10:43.290 --> 00:10:45.230
So if I were to go ahead.

160
00:10:45.300 --> 00:10:51.120
So what I'm going to do is I'm going to go ahead and I'm going to create a variable called questions.

161
00:10:51.720 --> 00:10:54.540
And in here, what I want to do is now.

162
00:10:55.470 --> 00:11:02.160
If we look at this at the response text that we are getting, so I'm just going to bring this up.

163
00:11:02.340 --> 00:11:04.790
So what is the response to the text that we are getting?

164
00:11:04.800 --> 00:11:08.370
This is very, very I hope it is not confusing.

165
00:11:08.380 --> 00:11:14.670
So the response text is actually if you look closely at it, it resembles ANORO.

166
00:11:14.880 --> 00:11:19.560
It starts from the top left and ends at the bottom right, the brackets.

167
00:11:19.830 --> 00:11:24.990
And inside that it seems as though we have objects separated by commas.

168
00:11:25.260 --> 00:11:29.560
And the keys are in double quotes and the values are in double quotes as well.

169
00:11:29.970 --> 00:11:32.700
So what is the response to the response text?

170
00:11:33.510 --> 00:11:40.310
Actually, so the response text, what it is actually is our adjacent file, right?

171
00:11:40.320 --> 00:11:42.780
I could show you that before doing this.

172
00:11:42.780 --> 00:11:45.570
I could just say console, dot, log.

173
00:11:45.570 --> 00:11:48.660
I should have probably done this response text.

174
00:11:48.660 --> 00:11:50.460
And when I say it, when I click on it.

175
00:11:50.670 --> 00:11:52.470
So this is our response text.

176
00:11:52.710 --> 00:11:55.030
But you can see that this is not valid JavaScript.

177
00:11:55.050 --> 00:11:57.180
This is Jason, but not valid JavaScript.

178
00:11:57.540 --> 00:12:02.480
So we need to convert it to something that can be read by JavaScript.

179
00:12:02.970 --> 00:12:04.950
So we do get the response text.

180
00:12:05.110 --> 00:12:11.280
So what I'm going to do is I'm going to grab this response text and I'm going to store it inside a variable

181
00:12:11.640 --> 00:12:16.230
and I'm going to call it questions and I'm going to store it in here.

182
00:12:16.230 --> 00:12:22.080
But because this is Jason and Jason is not readable in JavaScript, we need to parse it.

183
00:12:22.530 --> 00:12:24.060
So I'm just going to say.

184
00:12:25.270 --> 00:12:33.760
Jason does pass very, very we have done this, Jason, that pass in our to do up and in our budget

185
00:12:33.760 --> 00:12:42.130
up when we interacted with local storage because we are mimicking the database database databases or,

186
00:12:42.670 --> 00:12:43.870
I don't know, the chloroform.

187
00:12:43.870 --> 00:12:47.320
I think it's databases there except Jason data.

188
00:12:47.500 --> 00:12:49.340
They don't accept plain JavaScript.

189
00:12:49.600 --> 00:12:56.170
That's why the local storage we need to say, Jason, that string Jeffie, Jason, the string ify is

190
00:12:56.170 --> 00:12:58.140
going to convert it to a Jason strength.

191
00:12:58.480 --> 00:13:04.810
And Jason, that pass is going to grab that Jason string and convert it to an JavaScript object or string

192
00:13:04.810 --> 00:13:08.470
or value or whatever that it is that we are looking for.

193
00:13:08.650 --> 00:13:14.430
So now, if I were to look at this question, what what is the question is going to return.

194
00:13:14.950 --> 00:13:17.880
So if I click on it, you can see that we have a normal array.

195
00:13:18.640 --> 00:13:21.610
I mean, why couldn't it be normal RF right from the start?

196
00:13:21.610 --> 00:13:27.730
And inside each array we have, inside the array, we have objects inside each object.

197
00:13:27.740 --> 00:13:28.860
We have these things.

198
00:13:29.860 --> 00:13:33.430
So we have successfully passed the data that we are getting.

199
00:13:33.700 --> 00:13:38.190
Keep in mind that this data is being is being given to us.

200
00:13:38.200 --> 00:13:40.070
We are requesting this data.

201
00:13:40.450 --> 00:13:44.440
This is this is like a asynchronous code that we are doing here.

202
00:13:44.680 --> 00:13:47.560
This is really interesting what we are doing here.

203
00:13:47.570 --> 00:13:51.100
This is something that we don't have inside our e-mail.

204
00:13:51.280 --> 00:13:57.870
We don't have inside our JavaScript, but we are getting it so called on the fly, right?

205
00:13:58.300 --> 00:13:59.590
So we are getting it like that.

206
00:13:59.800 --> 00:14:02.820
So what I'm going to do is I want to print it.

207
00:14:02.830 --> 00:14:05.860
I want to I want to grab this data and put it right here.

208
00:14:05.890 --> 00:14:11.370
Now, it is in a readable format, so I can put it inside and HTML tag.

209
00:14:11.650 --> 00:14:18.120
So what I'm going to do here is I'm going to I'm going to declare a questions, results variable.

210
00:14:18.130 --> 00:14:20.050
So questions results.

211
00:14:20.050 --> 00:14:26.890
But I'm going to set it to an empty string at first and then we are going to grab our questions because

212
00:14:26.890 --> 00:14:29.950
there are ten of them and it is an array.

213
00:14:29.950 --> 00:14:31.960
So we could do the for each one.

214
00:14:32.040 --> 00:14:34.780
What was that so we could do for each.

215
00:14:35.140 --> 00:14:42.640
So this should be capital and inside the for each one I'm going to do is I'm going to say that for each

216
00:14:42.640 --> 00:14:43.450
question.

217
00:14:43.450 --> 00:14:46.210
What do I want to do for each of the questions?

218
00:14:46.510 --> 00:14:53.530
I want to grab the questions resolved and I want to add on to the questions result, because if you

219
00:14:53.530 --> 00:15:00.640
just provide it with an equal sign, each time we get our data, the previous data will be overwritten

220
00:15:00.640 --> 00:15:01.690
by the new data.

221
00:15:01.960 --> 00:15:06.490
If you provide the plus sign, the previous data will be added to the new data.

222
00:15:06.880 --> 00:15:09.520
They will sitting peacefully next to each other.

223
00:15:09.700 --> 00:15:11.800
Otherwise they're going to override each other.

224
00:15:12.190 --> 00:15:15.040
And let's use our favorite tactics.

225
00:15:15.070 --> 00:15:19.120
So in here, what I'm going to do is I'm going to create a dual.

226
00:15:20.930 --> 00:15:22.400
And you will.

227
00:15:23.390 --> 00:15:29.620
And inside the school, what do we have so inside the school, I'm going to create a paragraph first,

228
00:15:30.560 --> 00:15:35.590
this is an e-mail element inside the paragraph.

229
00:15:35.600 --> 00:15:36.550
What do I want to do?

230
00:15:37.070 --> 00:15:40.050
The paragraph is going to be the question that we have.

231
00:15:40.190 --> 00:15:46.580
So the paragraph, the how many different sounds a can of cat make, that is going to be our paragraph.

232
00:15:46.580 --> 00:15:50.360
So we are going to do a template string or a template.

233
00:15:50.480 --> 00:15:51.710
We are doing it.

234
00:15:51.710 --> 00:15:53.930
We are just going to grab the value dynamically.

235
00:15:54.260 --> 00:16:01.520
So we are going to say from the questions object, you can see that the question is actually an object.

236
00:16:01.520 --> 00:16:05.930
It says Protoje object from the questions object.

237
00:16:06.200 --> 00:16:11.340
I want to grasp the question, but what do we have here?

238
00:16:11.360 --> 00:16:14.180
This is the function parameter.

239
00:16:14.360 --> 00:16:20.210
So I'm going to grab this function parameter because we are doing it for each f for each this parameter

240
00:16:20.210 --> 00:16:27.100
is going to take each time it loops over this array, it is going to grab one of these questions.

241
00:16:27.440 --> 00:16:34.940
So the first time that it grabs a question, I want that this parameter to graph for me the question

242
00:16:35.150 --> 00:16:35.830
itself.

243
00:16:36.410 --> 00:16:38.700
So question.

244
00:16:39.140 --> 00:16:39.560
All right.

245
00:16:39.770 --> 00:16:41.200
So I hope you're not getting confused.

246
00:16:41.510 --> 00:16:43.220
This question is the parameter.

247
00:16:43.490 --> 00:16:47.780
This DOT question is the property of that object that we want to graph.

248
00:16:47.780 --> 00:16:49.450
I'm sure you're not getting confused.

249
00:16:50.000 --> 00:16:54.380
So next up, we have an ally in line.

250
00:16:54.920 --> 00:17:00.050
So I'm going to create this line and what is going to be inside the Salai.

251
00:17:00.320 --> 00:17:05.300
So we are going to have four allies and inside these four allies, we are going to have a choice, A,

252
00:17:05.300 --> 00:17:13.460
B, C and D. So we are going to say question, go ahead the question and grab me the choice.

253
00:17:14.520 --> 00:17:20.010
A and then we are going to copy it a few times and let's remove these lines.

254
00:17:21.470 --> 00:17:23.460
OK, I think this is better.

255
00:17:24.650 --> 00:17:30.410
So this time it is going to be the second time it's going to be, then it is going to be C, then it

256
00:17:30.410 --> 00:17:31.130
is going to be D.

257
00:17:31.490 --> 00:17:34.460
So basically we are creating an element there.

258
00:17:36.400 --> 00:17:36.800
Right.

259
00:17:36.820 --> 00:17:43.750
So I think the extreme element is done, the final thing that we need to do is we need to append it

260
00:17:43.750 --> 00:17:44.610
to a parent.

261
00:17:44.650 --> 00:17:45.670
What is the parent?

262
00:17:45.670 --> 00:17:47.400
The parent is questions container.

263
00:17:47.740 --> 00:17:50.770
So questions container.

264
00:17:51.400 --> 00:17:57.510
And we are going to say that in our e-mail because we are pending an e-mail arment.

265
00:17:57.520 --> 00:18:02.670
That's why we are not saying in our text interest e-mail is going to create that element for us.

266
00:18:03.130 --> 00:18:04.600
And what do we want to do?

267
00:18:04.870 --> 00:18:10.470
We want to grab the question result and append it to the questions container and let's save it.

268
00:18:10.720 --> 00:18:15.430
So when I click on it, we get an error in our e-mail of NUL.

269
00:18:16.180 --> 00:18:18.670
So we have questions container this.

270
00:18:18.670 --> 00:18:19.810
So let's come here.

271
00:18:20.410 --> 00:18:23.430
We have a section that is question.

272
00:18:23.440 --> 00:18:25.900
So we have not selected that.

273
00:18:28.660 --> 00:18:36.250
Properly so I might have done a mistake here, so let's click, we get the same thing, documented query

274
00:18:36.250 --> 00:18:36.980
selector.

275
00:18:37.810 --> 00:18:39.870
Oh, we missed a dot here.

276
00:18:39.880 --> 00:18:40.260
Sorry.

277
00:18:40.840 --> 00:18:43.120
So if I click on it, we do get our questions.

278
00:18:43.120 --> 00:18:44.950
So let's move this.

279
00:18:45.160 --> 00:18:47.470
And now this is a synchronous code.

280
00:18:47.470 --> 00:18:48.850
So we get our first class.

281
00:18:48.860 --> 00:18:55.290
You can see that this has like a relatively minimalistic UI that is nice to look at.

282
00:18:55.300 --> 00:18:57.100
Like honestly, it is a nice shortcut.

283
00:18:57.430 --> 00:19:02.910
It has if it font of times New Roman, we could change it here as well.

284
00:19:03.400 --> 00:19:07.840
We could just say body, we could say font family.

285
00:19:08.320 --> 00:19:14.650
Aryal And when I say it now, when I click on and notice the page doesn't reload, so click the page

286
00:19:14.650 --> 00:19:15.460
doesn't reload.

287
00:19:15.640 --> 00:19:18.370
We get all of our data on the fly.

288
00:19:18.880 --> 00:19:20.140
We get ten questions.

289
00:19:20.140 --> 00:19:28.690
You could go ahead and change that trivia application that we had an email questionnaire to make it

290
00:19:28.690 --> 00:19:29.490
look like this.

291
00:19:29.490 --> 00:19:34.660
So when the the questions they come dynamically, you can create more questions inside this.

292
00:19:35.260 --> 00:19:37.960
And whenever you click, you are going to get more questions.

293
00:19:38.260 --> 00:19:43.150
You can basically redo that using this this way asynchronously.

294
00:19:43.660 --> 00:19:46.350
You can implement that inside your own website as well.

295
00:19:46.480 --> 00:19:46.840
Right.

296
00:19:47.080 --> 00:19:48.730
So this is what we done here.

297
00:19:48.730 --> 00:19:50.500
Just to recap, you know what?

298
00:19:50.500 --> 00:19:52.270
I'm just going to go small.

299
00:19:52.300 --> 00:19:53.200
Just to recap.

300
00:19:53.470 --> 00:19:54.910
We had adjacent file.

301
00:19:56.950 --> 00:19:59.890
We instantiated the new XIKAR object.

302
00:20:00.220 --> 00:20:02.950
We set up the request.

303
00:20:03.520 --> 00:20:04.240
We did.

304
00:20:04.510 --> 00:20:06.580
We declared what we want to do.

305
00:20:06.580 --> 00:20:12.550
We said what we want to do with when we get that request, which is the most difficult part in comparison

306
00:20:12.550 --> 00:20:13.960
to the other steps.

307
00:20:14.350 --> 00:20:20.260
And then we actually send the request when we got their request, when we got the data or we got the

308
00:20:20.260 --> 00:20:28.960
response, we said that the questions that data sorry, the data that we got, it was it should be passed

309
00:20:28.960 --> 00:20:31.390
so it can be a readable in JavaScript.

310
00:20:31.660 --> 00:20:39.250
And then we we stored the data inside a well and then we appended the URL to the sections that we have

311
00:20:39.250 --> 00:20:39.580
here.

312
00:20:40.030 --> 00:20:43.180
And every all of the data is right here.

313
00:20:43.180 --> 00:20:47.770
And if I reload the page, the data comes asynchronously.

314
00:20:47.770 --> 00:20:50.410
It means that we don't need to reload the page.

315
00:20:50.440 --> 00:20:53.440
That's it for this example and for this lecture.

316
00:20:53.440 --> 00:20:55.030
See you guys in the next one.

