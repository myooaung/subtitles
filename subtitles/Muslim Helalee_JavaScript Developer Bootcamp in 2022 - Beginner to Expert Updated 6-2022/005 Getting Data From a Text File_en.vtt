WEBVTT
1
00:00:01.580 --> 00:00:07.880
Hi, everyone, in this lecture, we are going to get text data, all right.

2
00:00:08.119 --> 00:00:12.510
So in this next year, we are going to get data from a text file.

3
00:00:13.760 --> 00:00:18.200
And if I open up the text file, we just have hey there in that file.

4
00:00:18.440 --> 00:00:23.050
And that is in the same directory as our JavaScript file.

5
00:00:23.150 --> 00:00:23.540
All right.

6
00:00:23.700 --> 00:00:25.490
And this.

7
00:00:27.050 --> 00:00:32.150
And data is going to be local data, which means it is present in our own computer.

8
00:00:32.659 --> 00:00:32.990
All right.

9
00:00:33.110 --> 00:00:39.890
So so in this picture, we are not we are not going to be communicating with an API endpoint.

10
00:00:39.890 --> 00:00:43.170
Rather, we are going to be communicating with a local fire.

11
00:00:43.790 --> 00:00:44.090
All right.

12
00:00:44.330 --> 00:00:49.340
But nonetheless, an EPA request is made in four easy steps.

13
00:00:49.700 --> 00:00:55.150
I have outlined the steps here so it is easier for us to know what we are going to do.

14
00:00:55.430 --> 00:01:01.670
First, we are going to instantiate in New York City our object to create the request or request.

15
00:01:01.880 --> 00:01:03.950
Where is the T request set up?

16
00:01:04.280 --> 00:01:13.640
This three decide what to do with the data received so far fetched, which is the new fancy term if

17
00:01:13.640 --> 00:01:17.180
the request is successful and for send the request.

18
00:01:17.190 --> 00:01:19.120
So let's go ahead and let's do that.

19
00:01:19.460 --> 00:01:24.710
But how do I want to how do I want to do this is whenever I click on this button.

20
00:01:25.220 --> 00:01:26.300
I want to, I want to.

21
00:01:26.300 --> 00:01:26.720
Oops.

22
00:01:26.930 --> 00:01:27.770
Where did that go.

23
00:01:29.120 --> 00:01:36.260
I want to grab the content of the text file and I want to print it in this paragraph, I want to just

24
00:01:36.260 --> 00:01:37.660
put it inside this paragraph.

25
00:01:37.910 --> 00:01:39.320
So first things first.

26
00:01:39.590 --> 00:01:42.440
Let's go ahead and grab the button.

27
00:01:42.440 --> 00:01:48.650
So I'm just going to say document, query selector and we are going to say button.

28
00:01:49.470 --> 00:01:50.630
I'm going to copy it down.

29
00:01:50.630 --> 00:01:53.050
I'm going to grab our paragraph as well.

30
00:01:54.060 --> 00:02:03.120
Para and it is going to be documented that query like Turpie now when when the button is collect.

31
00:02:04.670 --> 00:02:10.820
I want to run a function and that function is going to grab the data from the text file, so it is the

32
00:02:10.820 --> 00:02:12.080
text data.

33
00:02:12.290 --> 00:02:12.620
All right.

34
00:02:12.830 --> 00:02:14.900
Now, these are not the first steps.

35
00:02:15.110 --> 00:02:17.510
The first steps are going to be here.

36
00:02:17.690 --> 00:02:19.650
That is an EPA request.

37
00:02:19.670 --> 00:02:21.410
This is not an EPA request.

38
00:02:21.740 --> 00:02:31.400
We have we have just set up the the event that we want to do, the event that we want to make this EPA

39
00:02:31.430 --> 00:02:32.050
request.

40
00:02:32.060 --> 00:02:32.370
All right.

41
00:02:32.630 --> 00:02:40.970
So now what I'm going to do is I'm going to say function text data and what do I want to do inside this

42
00:02:40.970 --> 00:02:41.480
function?

43
00:02:41.960 --> 00:02:46.540
Inside this function, I want to make and request what are the steps?

44
00:02:46.550 --> 00:02:48.470
There are four easy steps in there.

45
00:02:48.710 --> 00:02:53.190
So step number one, initiate instantiate a new X, H.R. object.

46
00:02:53.570 --> 00:03:00.260
So we are going to say consed new X h.e.r LBG.

47
00:03:01.450 --> 00:03:06.930
I could say I object or could say just or I could just say Newark's HRR, right?

48
00:03:07.240 --> 00:03:08.860
So I'm going to say new.

49
00:03:09.190 --> 00:03:10.450
You know what the new keyword is?

50
00:03:10.450 --> 00:03:12.090
I'm not going to go over this one more time.

51
00:03:12.820 --> 00:03:16.470
I'm going to say Zemo HTP request and that's it.

52
00:03:16.810 --> 00:03:25.180
And if I can still log this new XIKAR, there are some properties and methods available to us whenever

53
00:03:25.180 --> 00:03:28.240
we instantiate an annex char object.

54
00:03:28.780 --> 00:03:37.240
These are the methods we will be interested more in the reddest state and the response text and I think

55
00:03:37.240 --> 00:03:38.380
that's going to be it.

56
00:03:39.190 --> 00:03:42.850
We are we will we might have we might use some other ones as well.

57
00:03:43.240 --> 00:03:43.570
All right.

58
00:03:43.580 --> 00:03:48.540
So now we know what the object is going to give us.

59
00:03:48.850 --> 00:03:50.800
Now the first step is done.

60
00:03:50.800 --> 00:03:51.820
And you know what?

61
00:03:51.820 --> 00:03:54.820
Because this is advanced, I don't need to leave it there.

62
00:03:54.820 --> 00:03:57.410
I'm just going to say step one.

63
00:03:57.430 --> 00:04:02.980
So this is step one is done and then the next step are going to create the request.

64
00:04:03.160 --> 00:04:06.850
So New York's H.R. dot open.

65
00:04:07.300 --> 00:04:16.269
Whenever I say dot open there, it is going to set their request method requests, YORO and Synchronoss

66
00:04:16.269 --> 00:04:16.810
FLAC.

67
00:04:17.260 --> 00:04:17.589
All right.

68
00:04:17.720 --> 00:04:19.600
So what is the request method?

69
00:04:19.630 --> 00:04:21.610
The request method is going to be get.

70
00:04:22.150 --> 00:04:28.090
We know what getas get is going to retrieve information or retrieve data again.

71
00:04:28.090 --> 00:04:31.810
If you want to go over that get had post.

72
00:04:32.620 --> 00:04:35.980
But the most common ones that are included there.

73
00:04:36.010 --> 00:04:43.060
OK, I've given you the I have provided you with them in the Ajax Lecture.

74
00:04:43.450 --> 00:04:48.790
And the second is the the request you are in this case it is local.

75
00:04:48.790 --> 00:04:54.100
So I'm just going to say five dot info dot 60, as with any other

76
00:04:56.650 --> 00:04:58.670
source that you would use.

77
00:04:59.050 --> 00:05:00.640
OK, this this is the source.

78
00:05:00.940 --> 00:05:02.490
So we are in the same directory.

79
00:05:02.500 --> 00:05:05.230
I'm just going to provide the name and it is going to grab it.

80
00:05:05.470 --> 00:05:12.960
And finally, we are going to say true, because if you say false, then the code is going to be async.

81
00:05:13.180 --> 00:05:16.900
Sorry, the code is going to be synchronous, not async.

82
00:05:17.140 --> 00:05:22.300
When you say true, it means the code is going to run asynchronously and we do want it to run asynchronously.

83
00:05:22.660 --> 00:05:23.710
So there we go.

84
00:05:23.710 --> 00:05:25.840
Step number two is done.

85
00:05:27.890 --> 00:05:35.270
OK, so let's go on to step number three, so decide what to do with the data received or fetched if

86
00:05:35.600 --> 00:05:37.030
the request is successful.

87
00:05:37.190 --> 00:05:38.980
So we do have an effect there, right.

88
00:05:39.140 --> 00:05:43.720
So what I'm going to do is I'm going to say new say to our dot onload.

89
00:05:44.270 --> 00:05:50.750
Now, this onload is actually going to grab a function expression, right?

90
00:05:50.930 --> 00:05:58.250
So I'm going to pass in a function expression and this is going to be called when we get the data and

91
00:05:58.250 --> 00:05:59.870
when the request is successful.

92
00:05:59.880 --> 00:06:01.640
So I'm going to say F.

93
00:06:02.760 --> 00:06:11.840
This that status, we know the status of the TTP and if it is 200, then we are going to do something.

94
00:06:12.610 --> 00:06:16.210
Now, what the this keyword in this case is going to refer to?

95
00:06:16.800 --> 00:06:17.120
All right.

96
00:06:17.250 --> 00:06:20.460
So we know we know how this keyboard works.

97
00:06:20.710 --> 00:06:27.450
That's why we studied the this keyword before actually coming to asynchronous programming, because

98
00:06:27.450 --> 00:06:31.540
the this key word is used a lot and is async code.

99
00:06:32.040 --> 00:06:32.370
All right.

100
00:06:32.380 --> 00:06:35.490
And whenever it is used, you should know what it is pointing at.

101
00:06:35.520 --> 00:06:40.170
So this this we need to go to the context of this function.

102
00:06:40.170 --> 00:06:41.460
Where is this function called?

103
00:06:41.460 --> 00:06:44.930
The function is called within the text data function.

104
00:06:45.090 --> 00:06:49.530
So whenever we call the text data function, it is going to call this function.

105
00:06:49.560 --> 00:06:51.420
So here is the call site.

106
00:06:51.960 --> 00:06:58.170
The call side of this is the new X download, although this is actually calling the function.

107
00:06:58.500 --> 00:07:00.030
What is the new XIKAR?

108
00:07:00.300 --> 00:07:05.090
It is and TTP request that we are setting up.

109
00:07:05.280 --> 00:07:12.510
So this the status actually refers to the new HTTP request status that we are just setting it up.

110
00:07:13.880 --> 00:07:22.520
And when the status is set up, why do I want to do so, we can go ahead and from here we can see that

111
00:07:22.520 --> 00:07:24.110
we have our response text.

112
00:07:24.410 --> 00:07:30.590
So what I'm going to do as from right here, I'm going to grab a response text and I'm going to log

113
00:07:30.590 --> 00:07:34.370
it to the council, that log response text.

114
00:07:34.790 --> 00:07:38.650
But I'm going to say this response text.

115
00:07:38.950 --> 00:07:39.370
All right.

116
00:07:39.620 --> 00:07:47.630
So now the object is instantiated, the request is set up.

117
00:07:47.960 --> 00:07:52.070
And this is step this is step number three.

118
00:07:52.280 --> 00:07:55.160
We know what we want to do when we get the data.

119
00:07:56.370 --> 00:07:59.590
And after this, the final step, send the request.

120
00:07:59.600 --> 00:08:04.770
So new X XIKAR dot sent, save it.

121
00:08:05.390 --> 00:08:07.850
So when I click on it, we get hey there.

122
00:08:08.060 --> 00:08:08.360
See.

123
00:08:08.630 --> 00:08:10.070
So where is it coming from.

124
00:08:10.280 --> 00:08:12.680
The hey there is going to be coming from ok.

125
00:08:12.680 --> 00:08:18.980
I am, I am just a t xda file.

126
00:08:20.010 --> 00:08:27.000
Save it, and now I click, click on it, it says that so we know what we are just constantly we are

127
00:08:27.000 --> 00:08:28.610
just logging it to the console.

128
00:08:29.070 --> 00:08:33.380
What we can do is we can log to the console, the this keyword as well.

129
00:08:34.110 --> 00:08:37.919
And the this keyword is going to be pointing at this XIKAR object.

130
00:08:38.250 --> 00:08:43.440
So if I save it and if I click on it, you can see that we get the same access to our object.

131
00:08:43.440 --> 00:08:48.470
But in this case, it is not an empty object.

132
00:08:49.020 --> 00:08:49.680
Why?

133
00:08:49.860 --> 00:08:51.990
Because we have provided it.

134
00:08:52.170 --> 00:08:58.890
We have set up we have set up the request we have we know what we want to do with it and we have send

135
00:08:58.890 --> 00:08:59.600
that request.

136
00:08:59.850 --> 00:09:02.730
So now we can see that we have response text right here.

137
00:09:02.910 --> 00:09:05.250
You can see that the status is 200.

138
00:09:05.820 --> 00:09:14.550
When the status is 200, it means that if I come back to here, when the status is 200, this is a successful

139
00:09:14.550 --> 00:09:15.120
response.

140
00:09:15.120 --> 00:09:20.000
That's why we are going to say we are going to look for a status of two 200.

141
00:09:20.340 --> 00:09:26.700
Now, this if statement that we have done here, it is lacking another very, very important part.

142
00:09:28.040 --> 00:09:34.160
And that is the aready state, which is related to the XIKAR object, which we are going to cover later,

143
00:09:34.160 --> 00:09:40.730
but for now, what I wanted to do is I just wanted to show you how you can get local data, data from

144
00:09:40.730 --> 00:09:41.340
a text.

145
00:09:41.540 --> 00:09:48.230
Now, if you want to get data, if you want to grab data for a name from an API endpoint, just go ahead

146
00:09:48.230 --> 00:09:53.150
and put the API endpoint in here and click and just run this or click this code.

147
00:09:53.150 --> 00:09:54.240
It is going to grab it.

148
00:09:54.260 --> 00:09:55.140
It doesn't matter.

149
00:09:55.520 --> 00:09:56.840
The idea is the same.

150
00:09:57.320 --> 00:10:00.130
The implementation could be like a little bit different.

151
00:10:00.140 --> 00:10:08.590
But this idea of these four steps, it is going to apply whenever you are using where you're doing your

152
00:10:08.600 --> 00:10:12.620
requests, using the this extra object.

153
00:10:12.620 --> 00:10:14.760
If you're doing that, then it is going to be the same.

154
00:10:15.200 --> 00:10:18.550
So and I'm just going to provide step number four.

155
00:10:19.010 --> 00:10:21.640
So that's it for this lecture in the next lecture.

156
00:10:21.650 --> 00:10:27.980
What we are going to do as we know how we can get the text data and there we go.

157
00:10:28.130 --> 00:10:30.230
Oh, there is one more thing missing.

158
00:10:30.230 --> 00:10:30.650
I'm sorry.

159
00:10:30.950 --> 00:10:36.830
And at the start of this lecture, I told you when I click on it, I want to print it to the Web page.

160
00:10:36.830 --> 00:10:38.480
I want to I want to print it there.

161
00:10:38.480 --> 00:10:43.430
So I'm just going to come and those ones out and I'm going to come.

162
00:10:43.550 --> 00:10:45.950
I'm going to leave them here because they are critical.

163
00:10:46.140 --> 00:10:47.540
Let's bring that up.

164
00:10:48.200 --> 00:10:54.050
So what I want to do here is I'm going to grab my paragraph and I'm going to say inner text should be

165
00:10:54.050 --> 00:10:58.730
equal to what should be equal to this response text.

166
00:10:58.800 --> 00:10:59.410
Let's save it.

167
00:10:59.600 --> 00:11:03.920
And now when I click it, it says I'm just a text file hater.

168
00:11:04.290 --> 00:11:08.290
And now keep in mind that this request is asynchronous.

169
00:11:08.300 --> 00:11:09.480
This is not synchronous.

170
00:11:09.890 --> 00:11:16.050
So the way that I am loading this, you can see that this I think this is an icon of the globe.

171
00:11:16.100 --> 00:11:17.120
Yeah, it is the globe.

172
00:11:17.330 --> 00:11:19.790
So when I reload, you can see that it is flashing.

173
00:11:19.790 --> 00:11:20.690
It's flickering.

174
00:11:20.690 --> 00:11:21.050
Right.

175
00:11:21.440 --> 00:11:24.530
But when I click on this get info, it doesn't flash.

176
00:11:24.530 --> 00:11:25.640
It doesn't flicker.

177
00:11:26.300 --> 00:11:29.130
It means that the page is not reloaded.

178
00:11:29.330 --> 00:11:35.210
This is the good thing about asynchronous without reloading the page, which takes a lot of time and

179
00:11:35.210 --> 00:11:36.560
reloading everything.

180
00:11:36.560 --> 00:11:43.580
And maybe there are like 10000 requests on that page and it takes a lot of time, like a minute for

181
00:11:43.580 --> 00:11:45.230
slower connections like myself.

182
00:11:45.740 --> 00:11:50.120
But when you do asynchronous, when you just click, you can see the page doesn't reload, see?

183
00:11:51.470 --> 00:11:59.990
The icon doesn't flicker, so click doesn't flicker, but if I reload, it flickers, see for a split

184
00:11:59.990 --> 00:12:00.550
second.

185
00:12:01.190 --> 00:12:02.450
That's it for this lecture.

186
00:12:02.480 --> 00:12:04.280
See you guys in the next one.

