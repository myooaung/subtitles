WEBVTT
1
00:00:01.890 --> 00:00:02.740
Hi, everyone.

2
00:00:02.910 --> 00:00:06.300
In this lecture, we are going to talk about Ajax.

3
00:00:07.400 --> 00:00:14.480
All right, so this is going to be another theoretical lecture starting from our next lecture, we're

4
00:00:14.480 --> 00:00:19.270
going to dive into how we can implement a JavaScript.

5
00:00:19.420 --> 00:00:23.760
But first, we need to understand the theory behind the practice.

6
00:00:24.140 --> 00:00:27.830
So we have Ajax, which is asynchronous JavaScript and XML.

7
00:00:28.910 --> 00:00:31.250
We know the asynchronous JavaScript part.

8
00:00:31.260 --> 00:00:34.250
We have talked about a lot and I'm not going to go over again.

9
00:00:34.670 --> 00:00:39.200
The XML is actually referring to the XML http request.

10
00:00:39.590 --> 00:00:46.910
The XML HTP request is an object that is used to communicate with the server.

11
00:00:47.180 --> 00:00:47.600
All right.

12
00:00:47.900 --> 00:00:54.320
So whenever as a client or whenever the browser or whenever you are, for example, let's say you are

13
00:00:54.320 --> 00:01:02.810
on YouTube and you're you click on a video, what happens and HTTP request or a hypertext transfer protocol

14
00:01:02.810 --> 00:01:07.700
request is made to the server or is made to that API endpoint.

15
00:01:08.180 --> 00:01:11.330
The request is met to this to an API endpoint.

16
00:01:11.330 --> 00:01:16.430
That API endpoint is going to grab our request and it is going to give it to the server.

17
00:01:17.000 --> 00:01:21.590
Right, because the communication layer is actually API.

18
00:01:21.590 --> 00:01:23.270
API allows us to communicate.

19
00:01:23.480 --> 00:01:30.330
That is the channel, OK, and we through that channel we make HTP requests and we get a response.

20
00:01:30.680 --> 00:01:38.070
Now typically we used to get responses in amount, but we get nowadays we get responses in.

21
00:01:38.090 --> 00:01:42.860
Jason, recently for the past few years, we get responses in Jason.

22
00:01:42.870 --> 00:01:47.930
Jason is JavaScript object notation and it is actually a strength.

23
00:01:49.370 --> 00:01:57.050
And you can there are methods like pass where you can convert that into something that we can understand

24
00:01:57.800 --> 00:01:59.030
in JavaScript.

25
00:01:59.060 --> 00:01:59.380
Right.

26
00:01:59.390 --> 00:02:00.860
And we can use it in JavaScript.

27
00:02:01.370 --> 00:02:01.760
All right.

28
00:02:01.770 --> 00:02:05.180
So so this request is made to the server.

29
00:02:05.220 --> 00:02:11.030
The server is going to respond with your data and you will be able to, for example, to view posts,

30
00:02:11.030 --> 00:02:17.870
view to DOS, view users, leave a post and do anything that you normally do on the Internet.

31
00:02:18.530 --> 00:02:18.910
All right.

32
00:02:19.040 --> 00:02:20.830
So this is how it works.

33
00:02:20.840 --> 00:02:26.750
Now, coming back to the TTP now before coming here, I just want to talk about the API endpoint.

34
00:02:27.080 --> 00:02:31.580
The API endpoint is where you make that request inside this JavaScript file.

35
00:02:31.760 --> 00:02:33.680
Inside a JavaScript file.

36
00:02:35.180 --> 00:02:43.100
And the API, in case you're wondering, is created using any backend language like Python and Ruby,

37
00:02:43.100 --> 00:02:49.040
Java, JavaScript or anything else or go, you can create APIs.

38
00:02:49.040 --> 00:02:54.620
In case you're wondering about that, if you are a font fronton developer, then you should mainly be

39
00:02:54.620 --> 00:02:58.670
concerned with using and interacting with that API, not creating it.

40
00:02:58.670 --> 00:03:00.590
If you know how to create it, that's even better.

41
00:03:01.040 --> 00:03:07.400
But if you are a fool, if you're a full stack, or if you're thinking of becoming a false force, then

42
00:03:07.400 --> 00:03:12.020
you should know how APIs are created and should be able to design APIs.

43
00:03:12.020 --> 00:03:18.980
You should know the best practices in API design and I think we are done with this diagram.

44
00:03:18.990 --> 00:03:24.530
So Ajax is a I'm just going to go over this Ajax one more time.

45
00:03:24.530 --> 00:03:27.170
Ajax is asynchronous JavaScript and XML.

46
00:03:27.470 --> 00:03:31.370
Why do we need Ajax is because Ajax has two major features.

47
00:03:31.370 --> 00:03:38.990
One, Ajax allows us to make requests to the server without reloading the page, and two, Ajax allows

48
00:03:38.990 --> 00:03:41.480
us to receive and work with data from the server.

49
00:03:41.780 --> 00:03:42.130
Right.

50
00:03:42.320 --> 00:03:51.230
So that's why we use Ajax and well, there are new methods, newer methods like API and the Async,

51
00:03:51.230 --> 00:03:57.380
a suite which don't use Ajax or the XML, which do not use that.

52
00:03:57.380 --> 00:04:03.410
But still we are going to go over this old way of doing it, the old school way of doing it, because

53
00:04:03.410 --> 00:04:09.800
if you understand that, you will be able to understand the newer methods like Fritschi API, like the

54
00:04:12.680 --> 00:04:14.960
the async await.

55
00:04:15.140 --> 00:04:16.700
You can understand them better.

56
00:04:17.029 --> 00:04:17.329
Right.

57
00:04:17.450 --> 00:04:20.300
So at the end of this lecture, I just want to give you these resources.

58
00:04:20.329 --> 00:04:22.370
This is the TTP status codes.

59
00:04:22.670 --> 00:04:28.910
You need to understand this because depending on whenever you make a request to the server, they request

60
00:04:29.240 --> 00:04:34.970
it doesn't matter what their request is, it is definitely going to have a specific status.

61
00:04:35.390 --> 00:04:41.870
Now, that status is going to give you an information, the kind of information that you will understand,

62
00:04:41.870 --> 00:04:48.920
OK, whether my request has been successful, whether I have been redirected, whether I have an error

63
00:04:48.920 --> 00:04:52.340
on the client side or an error on the server side.

64
00:04:52.400 --> 00:04:53.750
What is the problem?

65
00:04:54.020 --> 00:04:56.690
Why did I why didn't I get my information?

66
00:04:57.320 --> 00:05:01.880
Or if I didn't get my information, what was the status code for that?

67
00:05:02.150 --> 00:05:08.720
We're going to work with this status code of 200 more than the rest of them.

68
00:05:09.860 --> 00:05:12.170
But these are these are provided here.

69
00:05:12.170 --> 00:05:19.400
You can go to this issue, TTP status, and you can read about all specific individual status status

70
00:05:19.400 --> 00:05:19.940
codes.

71
00:05:20.060 --> 00:05:20.510
All right.

72
00:05:20.750 --> 00:05:26.750
And you should know this as well as because we're working now with the servers.

73
00:05:26.750 --> 00:05:32.060
That's why we need to understand what this HTTP status codes are.

74
00:05:32.570 --> 00:05:36.470
And then we have TTP methods for the most part for this chapter.

75
00:05:36.680 --> 00:05:38.420
We're going to use the get method.

76
00:05:38.660 --> 00:05:47.510
The gett method requests a representation of the specified resource requests using GET should only retrieve

77
00:05:47.510 --> 00:05:48.050
data.

78
00:05:48.050 --> 00:05:54.050
So we we are going to use that get for the most part for this chapter because we want to retrieve data.

79
00:05:54.170 --> 00:06:00.530
First off, we are going to start with the local data, the data that is inside this chapter.

80
00:06:00.860 --> 00:06:09.650
And then what we are going to do is we are going to grab we are going to fetch data from an API endpoint

81
00:06:09.650 --> 00:06:10.100
as well.

82
00:06:10.310 --> 00:06:11.810
So that's it for this lecture.

83
00:06:11.810 --> 00:06:13.880
See you guys in the next one.

