1
00:00:01,670 --> 00:00:02,520
Hi, everyone.

2
00:00:02,540 --> 00:00:05,720
In this lecture, we are going to talk about Web APIs.

3
00:00:07,290 --> 00:00:16,470
All right, now, we we did touch on this topic in our first nature and just to recap where we are used

4
00:00:16,470 --> 00:00:23,160
to extend the capability of JavaScript because JavaScript is single threaded some there are some tasks

5
00:00:23,160 --> 00:00:26,220
the JavaScript is going to ask the browser to do.

6
00:00:27,070 --> 00:00:33,760
All right, and those are Web APIs, those are the browser features that the browser actually does for

7
00:00:33,760 --> 00:00:34,760
us, right?

8
00:00:34,990 --> 00:00:41,950
That's how we can implement asynchronous programming through JavaScript because JavaScript is not alone.

9
00:00:41,980 --> 00:00:45,250
Web APIs are there with JavaScript.

10
00:00:45,640 --> 00:00:47,590
So this is an Indian Web page.

11
00:00:48,520 --> 00:00:49,870
This is Web APIs.

12
00:00:50,260 --> 00:00:55,450
And here is a list of all the APIs that are available.

13
00:00:55,450 --> 00:00:58,210
Now, I think we have talked about a few of these.

14
00:00:58,720 --> 00:01:05,830
So let's start from the and I just want to say that I wanted to do a project with the Bluetooth API.

15
00:01:06,700 --> 00:01:10,720
But unfortunately, you know, that's the thing with Afghanistan.

16
00:01:10,720 --> 00:01:21,010
I couldn't find like Bluetooth devices like Bluetooth lamps or Bluetooth like RC cars and that sort

17
00:01:21,010 --> 00:01:21,400
of thing.

18
00:01:22,340 --> 00:01:24,250
So I you know what?

19
00:01:24,250 --> 00:01:32,800
I decided to not to do it because there was actually a website for it where you can change the color

20
00:01:32,800 --> 00:01:39,550
of the light bulb on the screen and there was no actual physical device.

21
00:01:39,970 --> 00:01:46,450
So I didn't want to do that because that wasn't like a very, really interesting thing to do.

22
00:01:47,170 --> 00:01:54,760
I wanted to for example, if I could find in the market like buy something like a drone or a car or

23
00:01:54,760 --> 00:02:00,100
like a wireless Bluetooth heartbeat detector.

24
00:02:00,250 --> 00:02:01,630
But I couldn't find anything.

25
00:02:01,630 --> 00:02:08,169
So I decided to not do this Bluetooth API because I thought this was like really, really cool, really

26
00:02:08,169 --> 00:02:11,980
interesting that you can do these kind of things with JavaScript.

27
00:02:12,220 --> 00:02:18,790
But unfortunately, maybe like if I could find I'm going to update this course with that project, I'm

28
00:02:18,790 --> 00:02:20,740
going to show you how you can control it.

29
00:02:20,740 --> 00:02:22,440
Drone with your browser.

30
00:02:22,780 --> 00:02:24,940
That was really cool.

31
00:02:25,240 --> 00:02:29,440
But I couldn't I couldn't find any device, so I just decided not to do it.

32
00:02:29,650 --> 00:02:31,820
That was something that I wanted to share with you.

33
00:02:32,050 --> 00:02:39,670
So in the see in this section, we have talked about the canvas API where we implemented the drawing

34
00:02:39,670 --> 00:02:40,360
application.

35
00:02:40,360 --> 00:02:46,160
We are going to dive more into the canvas later on when we get to our game development section.

36
00:02:47,170 --> 00:02:48,890
We have talked about the console.

37
00:02:48,940 --> 00:02:49,330
All right.

38
00:02:49,400 --> 00:02:50,890
We have used it a lot.

39
00:02:51,130 --> 00:02:52,570
So here we can see the dumb.

40
00:02:52,570 --> 00:02:55,000
So dumb is also a Web API.

41
00:02:55,450 --> 00:03:02,530
All the dumb events, click handlers, everything, event handlers, all of them are handled by the

42
00:03:02,590 --> 00:03:04,740
BI, are implemented by Dume.

43
00:03:05,020 --> 00:03:07,410
You can see the rest of them all here.

44
00:03:07,540 --> 00:03:10,000
I'm just going to go over the ones that we have covered.

45
00:03:10,000 --> 00:03:12,940
We have talked about the drag and drop API.

46
00:03:13,630 --> 00:03:16,300
You can see that we have geolocation gamepad.

47
00:03:16,300 --> 00:03:20,560
There are a lot of things we are going to cover the API as well.

48
00:03:21,630 --> 00:03:27,960
All right, so now if I come here, we have talked about the pointer events and see assess, right.

49
00:03:27,960 --> 00:03:32,510
And OK, so what else have we covered here?

50
00:03:32,730 --> 00:03:35,460
We have talked about the storage, which was local storage.

51
00:03:35,730 --> 00:03:39,840
We used it for the budget app and for the to do list app.

52
00:03:40,650 --> 00:03:43,460
And this WebSocket, this is also a cool thing.

53
00:03:43,470 --> 00:03:47,670
It allows you to create a real time chat application.

54
00:03:48,090 --> 00:03:48,510
All right.

55
00:03:48,810 --> 00:03:52,650
So, OK, so what else have we covered?

56
00:03:56,020 --> 00:04:01,420
I think that's a there is nothing else that I can see that comes to my mind that we have covered so

57
00:04:01,420 --> 00:04:03,280
far because we have had a lot of projects.

58
00:04:03,610 --> 00:04:06,220
So this page is available for you.

59
00:04:06,380 --> 00:04:07,380
It's right here.

60
00:04:07,390 --> 00:04:11,640
So if you open this, we don't have any codes here in this lecture.

61
00:04:11,860 --> 00:04:15,080
This is just like I'm just going to give you a few resources.

62
00:04:15,310 --> 00:04:16,380
This is the first one.

63
00:04:16,630 --> 00:04:17,649
This is the second one.

64
00:04:17,649 --> 00:04:19,100
There is a third one as well.

65
00:04:19,959 --> 00:04:21,339
This is the third one, actually.

66
00:04:21,380 --> 00:04:25,780
I'm just going to copy this and I'm going to this is actually the second one.

67
00:04:25,840 --> 00:04:27,300
So we pasted there.

68
00:04:27,790 --> 00:04:31,450
So now we know what we were APSA.

69
00:04:31,750 --> 00:04:35,500
We were using them, but we didn't have a proper name for them.

70
00:04:35,500 --> 00:04:38,820
We'd never said that drag and drop is like an API.

71
00:04:39,010 --> 00:04:41,020
I might have mentioned that what, once.

72
00:04:41,020 --> 00:04:47,950
But we never like really like we never really grasp this idea of API.

73
00:04:48,260 --> 00:04:54,550
OK, so in this in this chapter, what we are going to do is we need to master asynchronous programming

74
00:04:54,550 --> 00:05:00,700
and the idea that we have Web APIs now we know what the Web is, right.

75
00:05:01,090 --> 00:05:02,090
But we don't oops.

76
00:05:02,800 --> 00:05:04,600
We know what what this part is.

77
00:05:04,600 --> 00:05:05,770
But what about this part?

78
00:05:05,770 --> 00:05:09,910
What actually is an API right now?

79
00:05:10,210 --> 00:05:16,600
You can see that APIs like like everywhere on this page and you're going to hear a lot and you have

80
00:05:16,600 --> 00:05:17,560
heard it a lot.

81
00:05:17,560 --> 00:05:23,170
But if you're not sure, I'm going to try to explain it using this website.

82
00:05:23,800 --> 00:05:29,620
This website is just going to grab videos from YouTube and you can create them, create a playlist,

83
00:05:29,920 --> 00:05:30,480
for example.

84
00:05:30,490 --> 00:05:31,630
This is the MNM.

85
00:05:31,930 --> 00:05:35,650
And when you click on this button, it is going to play this video.

86
00:05:36,310 --> 00:05:41,790
And I'm going to explain to you what appears what an API is through this video.

87
00:05:42,130 --> 00:05:48,400
But before diving into what an API is in the world of programming, we need to know what an API is in

88
00:05:48,400 --> 00:05:49,120
real life.

89
00:05:50,290 --> 00:05:59,590
Now, APIs, they do not only refer to Web APIs, we we have a lot a lot of different APIs now, actually,

90
00:05:59,590 --> 00:06:01,960
for other devices that we have.

91
00:06:01,960 --> 00:06:04,000
We don't call them API, OK?

92
00:06:04,210 --> 00:06:05,950
We just call him an interface.

93
00:06:06,250 --> 00:06:10,480
Now, API is an application programming interface.

94
00:06:10,930 --> 00:06:13,510
We are going to start with the interface word.

95
00:06:13,840 --> 00:06:18,700
Now, the interface of a device allows you to interact with that device.

96
00:06:19,000 --> 00:06:20,890
For example, you have a keyboard.

97
00:06:21,220 --> 00:06:23,200
What is the interface of the keyboard?

98
00:06:23,200 --> 00:06:26,770
All the keys that you can press on, you can press.

99
00:06:27,280 --> 00:06:28,900
You have a TV remote.

100
00:06:28,900 --> 00:06:33,250
That remote allows you to interact with the TV.

101
00:06:33,440 --> 00:06:33,820
Right?

102
00:06:34,040 --> 00:06:38,440
So we have interfaces in our real life.

103
00:06:38,440 --> 00:06:43,300
And what the interfaces actually allow us to do are two things.

104
00:06:43,300 --> 00:06:49,600
One, they allow us to interact with that specific device that we want to work with.

105
00:06:49,750 --> 00:06:55,050
And number two, they abstract away the implementation part.

106
00:06:55,360 --> 00:07:00,070
So whenever you're using, for example, your TV remote, TV remote.

107
00:07:00,070 --> 00:07:00,370
Right.

108
00:07:00,520 --> 00:07:07,450
And when you switch channels, you don't care or and you don't know how actually that TV remote switches

109
00:07:07,450 --> 00:07:08,230
the channels.

110
00:07:08,590 --> 00:07:09,370
You don't know that.

111
00:07:09,550 --> 00:07:11,680
And we are not concerned about that.

112
00:07:11,890 --> 00:07:16,030
We are only concerned about, for example, like switching to our favorite channel.

113
00:07:16,390 --> 00:07:16,720
Right.

114
00:07:16,960 --> 00:07:22,450
So that interface allows us to interact with that TV.

115
00:07:22,810 --> 00:07:29,140
And also it abstracts away the implementation part, which is the part that we don't want to concern

116
00:07:29,140 --> 00:07:29,960
ourselves with.

117
00:07:30,160 --> 00:07:34,840
Now, imagine like there are a lot of devices.

118
00:07:35,140 --> 00:07:37,630
I'm just going to go with electronic first.

119
00:07:37,780 --> 00:07:43,360
There are a lot of electronic devices in our lives, more so in foreign countries than Afghanistan.

120
00:07:43,360 --> 00:07:46,640
But still here we do have electronic devices.

121
00:07:47,170 --> 00:07:53,770
Now, imagine if you wanted to use any of them, you would you would have to go through the process

122
00:07:53,770 --> 00:07:59,110
of learning how that device works, but and how difficult that would have been.

123
00:07:59,110 --> 00:08:04,090
OK, that would have been like frustrating all the time that I have to learn, even though even even

124
00:08:04,090 --> 00:08:05,590
when I'm eating, I have to learn.

125
00:08:05,590 --> 00:08:09,970
Even when I'm sleeping, I have to learn even when I'm like walking.

126
00:08:09,970 --> 00:08:10,780
I have to learn.

127
00:08:11,020 --> 00:08:15,370
Now, that's the good part about interfaces, interfaces.

128
00:08:15,370 --> 00:08:20,080
They allow us to, for example, turn on that oven right.

129
00:08:20,500 --> 00:08:27,430
Turn it on and work with it or bake something or cook something without even thinking about how that

130
00:08:27,430 --> 00:08:28,260
oven works.

131
00:08:28,570 --> 00:08:32,049
So this is the whole idea of an interface now.

132
00:08:32,789 --> 00:08:41,260
And application programming interface or an API is a computing interface which defines interactions

133
00:08:41,559 --> 00:08:44,560
between multiple software intermediaries.

134
00:08:44,800 --> 00:08:53,320
It defines the kinds of calls and requests that can be made, how to make them the data formats that

135
00:08:53,320 --> 00:08:54,790
should be used and the.

136
00:08:54,910 --> 00:08:56,340
Conventions to follow.

137
00:08:57,180 --> 00:09:04,260
All right, now let's try everything back to go together, interfaces allow us to interact or communicate

138
00:09:04,260 --> 00:09:09,900
with an object now, be it a physical object or a software object.

139
00:09:09,930 --> 00:09:14,460
Now you're getting how we are coming back to JavaScript objects, right?

140
00:09:15,100 --> 00:09:19,500
As a user of the interface, we do not need to understand the implementation.

141
00:09:19,500 --> 00:09:19,720
Right.

142
00:09:20,010 --> 00:09:23,340
We do not need to know how a how the how it works.

143
00:09:23,340 --> 00:09:27,710
We just need to know what we have been allowed to change your seat.

144
00:09:28,050 --> 00:09:29,830
So you're changing the channels.

145
00:09:29,850 --> 00:09:31,530
That is what you're allowed to do.

146
00:09:31,680 --> 00:09:33,120
We don't care about anything else.

147
00:09:33,120 --> 00:09:36,090
We just care about what is allowed to us to do.

148
00:09:37,120 --> 00:09:41,540
All right, interfaces, as I told you, abstract away the implementation.

149
00:09:41,800 --> 00:09:50,330
Now, while the UI is made for the user of the application, the API is made for the application programmer.

150
00:09:50,680 --> 00:09:55,500
Now, we as a programmers, we are not concerned with the interface.

151
00:09:55,510 --> 00:10:00,820
We are concerned with the API, with the application programming interface.

152
00:10:01,210 --> 00:10:05,220
We are concerned with the code side of this entire application.

153
00:10:05,500 --> 00:10:07,110
So here we have a website.

154
00:10:07,270 --> 00:10:12,860
I don't know how this this is pronounced this you list you.

155
00:10:12,880 --> 00:10:19,390
I don't know what how this is pronounced, but still so this we are not concerned about how these how

156
00:10:19,810 --> 00:10:20,820
all this works.

157
00:10:20,830 --> 00:10:27,480
We are concerned about the code behind this, OK, the code that fetches this data for us.

158
00:10:27,670 --> 00:10:28,750
We are concerned about that.

159
00:10:29,060 --> 00:10:29,320
Right.

160
00:10:29,500 --> 00:10:30,070
Why?

161
00:10:30,070 --> 00:10:37,450
Because whenever you're interacting with an API, for example, the canvas API, you remember when we

162
00:10:37,450 --> 00:10:45,520
initialize this canvas in our Web page, we needed to to say what kind of canvas it is that we want.

163
00:10:45,790 --> 00:10:46,660
We wanted a

164
00:10:49,330 --> 00:10:50,500
2D canvas.

165
00:10:50,740 --> 00:10:51,130
All right.

166
00:10:51,280 --> 00:10:54,130
So that is the expectation of the API.

167
00:10:54,460 --> 00:10:58,450
API expects you to use it in a certain way.

168
00:10:58,900 --> 00:11:01,390
And the canvas API is used in a 2D.

169
00:11:02,080 --> 00:11:02,410
Right.

170
00:11:02,650 --> 00:11:10,260
And that expectation allows us or sets the limit for us on how we can use data that API.

171
00:11:10,720 --> 00:11:12,730
So how actually this API works.

172
00:11:12,730 --> 00:11:15,870
Now we know what the APIs but how actually this works.

173
00:11:16,120 --> 00:11:23,320
So if I'm just going to like lower this volume like maybe like to six when I click on this button,

174
00:11:23,950 --> 00:11:27,850
even though this button has nothing to do with this YouTube page.

175
00:11:28,180 --> 00:11:37,450
But what it does is when I click on it and HTML sorry I e-mail an EPA request is made to the YouTube

176
00:11:37,450 --> 00:11:38,050
servers.

177
00:11:38,470 --> 00:11:39,700
And what is that request?

178
00:11:39,700 --> 00:11:43,510
The request is to play this Eminem rap song.

179
00:11:43,780 --> 00:11:47,710
Right, to play this video and the web.

180
00:11:47,980 --> 00:11:51,640
The YouTube server is going to respond with this video.

181
00:11:52,150 --> 00:11:52,470
Right.

182
00:11:52,630 --> 00:11:55,930
So if I were to reload this, it might take like a few seconds.

183
00:11:55,930 --> 00:11:59,110
Until then, I'm going to explain this.

184
00:11:59,410 --> 00:12:01,900
You can see that whenever you reload, you go ahead.

185
00:12:01,900 --> 00:12:09,160
You can see everything like many singers here, for example, Maroon five, if you click on it, it

186
00:12:09,160 --> 00:12:11,080
is going to show you all the lists.

187
00:12:11,080 --> 00:12:13,480
When you clicked, you made a request.

188
00:12:13,480 --> 00:12:14,590
What was the request?

189
00:12:14,860 --> 00:12:22,120
The request went to the server of the celesta and it asked, OK, I want to grab all the songs of Maroon

190
00:12:22,120 --> 00:12:24,310
five, which are on your server.

191
00:12:24,310 --> 00:12:25,330
Just give them to me.

192
00:12:25,870 --> 00:12:28,090
And the server responded with this.

193
00:12:28,460 --> 00:12:28,960
All right.

194
00:12:29,960 --> 00:12:38,840
OK, so this is how AIPA calls they're made, OK, this in simple terms, you make a request and the

195
00:12:38,840 --> 00:12:41,880
person on the other side is going to give you something.

196
00:12:42,410 --> 00:12:44,270
Now, the channel through which.

197
00:12:45,520 --> 00:12:53,410
OK, the channel through which you make this request and the channel through which that other person

198
00:12:53,410 --> 00:12:59,710
is going to give you your response, that channel is very simple.

199
00:12:59,930 --> 00:13:01,780
Again, I'm just going to reiterate this.

200
00:13:02,890 --> 00:13:11,950
When you make a request to a server for data and that server responds with the data that you asked for,

201
00:13:12,550 --> 00:13:18,370
the channel through which this communication happens is called an API.

202
00:13:18,850 --> 00:13:23,530
Right now, we have a lot different types of APIs you can see here.

203
00:13:23,710 --> 00:13:24,970
These are Web apps.

204
00:13:24,980 --> 00:13:32,290
We have many other each website, for example, Spotify has a way as an API, for example, PIXELS has

205
00:13:32,290 --> 00:13:35,260
an API, YouTube has an API, Facebook has an API.

206
00:13:35,620 --> 00:13:41,470
All the Web pages that you can see on the on the Internet, all of them, they have APIs.

207
00:13:41,800 --> 00:13:48,190
Some are some are available for you to implement in your programs, for example, like the YouTube API

208
00:13:48,610 --> 00:13:53,600
is is available for you to implement in your program.

209
00:13:53,740 --> 00:14:00,400
And what that API would allow you to do is, for example, you can grab a list of, for example, songs

210
00:14:00,400 --> 00:14:05,320
or music videos, video, music, music videos.

211
00:14:05,320 --> 00:14:09,880
And you can you can just insert that into your website without doing any extra thing.

212
00:14:10,210 --> 00:14:11,890
And it is always going to be there.

213
00:14:11,890 --> 00:14:18,730
If the author of that playlist changes that playlist, the playlist is going to change automatically

214
00:14:18,730 --> 00:14:19,790
in your website as well.

215
00:14:20,350 --> 00:14:22,630
So this is what an API is.

216
00:14:22,630 --> 00:14:29,020
This is what why we use APIs and we are sort of done with this discussion of the API.

217
00:14:29,320 --> 00:14:35,050
If you're not sure, you can just go ahead and like we watch this video one more time.

218
00:14:35,440 --> 00:14:39,850
And at the end of this video, I'm just going to give you one other resource as well.

219
00:14:40,630 --> 00:14:45,880
And this is just to visualize the call stack, what the Web APIs they do.

220
00:14:45,880 --> 00:14:47,110
And what is the call by?

221
00:14:47,110 --> 00:14:48,220
Q What is this?

222
00:14:48,220 --> 00:14:50,950
You can see these arrows of the circular arrows.

223
00:14:51,430 --> 00:14:54,040
They're called the event loop.

224
00:14:54,410 --> 00:15:01,150
OK, so if I were now we have this code here and what this code is, what this does is we have a button.

225
00:15:01,150 --> 00:15:05,350
When we click that button, we are going to run a set time out function.

226
00:15:05,350 --> 00:15:10,990
That's a time that function is going to run a function timer within that function time or function.

227
00:15:11,590 --> 00:15:13,390
We're going to log to the console.

228
00:15:13,600 --> 00:15:14,680
You click to me.

229
00:15:15,280 --> 00:15:15,640
Right.

230
00:15:15,640 --> 00:15:18,910
And that's a timeout is going to run after two seconds.

231
00:15:19,630 --> 00:15:24,390
In the meantime, we are going to run console log and then there's a timeout and then this console.

232
00:15:24,760 --> 00:15:30,040
So before actually running this, let's go over the how this is going to run.

233
00:15:30,040 --> 00:15:34,470
I'm just going to zoom in a bit more like I think this is readable now.

234
00:15:35,020 --> 00:15:41,320
Now, how this is going to run is whenever I say save and run, it is going to run this code first.

235
00:15:41,320 --> 00:15:46,060
But it it it it is going to find out, OK, that this is a click event.

236
00:15:46,450 --> 00:15:48,790
This happens whenever I click this button.

237
00:15:49,000 --> 00:15:55,750
So this code, because this is a DOM interaction, it is going to be handed over to the Web API to this

238
00:15:55,750 --> 00:15:56,830
section on the right.

239
00:15:57,280 --> 00:16:03,400
And then we are going to come to this line of this line of code, because this is done by this is actually

240
00:16:03,400 --> 00:16:07,420
a done by the this is a console API.

241
00:16:07,420 --> 00:16:10,210
This is done by the Web API as well.

242
00:16:10,210 --> 00:16:16,390
But but we are not this is not like any click event that we have to wait for the user to click or this

243
00:16:16,390 --> 00:16:20,440
is not a set timeout function that we have to wait for

244
00:16:23,110 --> 00:16:25,960
for some time so we can implement this function.

245
00:16:25,960 --> 00:16:28,420
This is just log in to the console.

246
00:16:28,420 --> 00:16:28,720
Hi.

247
00:16:28,900 --> 00:16:34,240
So we are going to immediately push it to the call stack and then pop it from the call stack.

248
00:16:34,390 --> 00:16:40,660
And the result is just going to be high in the console and the and the console off the webpage and the

249
00:16:40,660 --> 00:16:41,770
console of the browser.

250
00:16:41,770 --> 00:16:42,160
Right.

251
00:16:42,250 --> 00:16:46,960
And then we are going to come to this time out function now, this time out function.

252
00:16:46,960 --> 00:16:49,540
It requires five seconds to pass.

253
00:16:49,930 --> 00:16:56,530
Now, this is going to be handed over to the Web APIs because timers are are handled by Web APIs as

254
00:16:56,530 --> 00:16:56,730
well.

255
00:16:56,740 --> 00:16:59,440
This is an asynchronous code, right?

256
00:17:00,280 --> 00:17:04,960
Asynchronous code means that this code can run in here.

257
00:17:05,410 --> 00:17:09,160
And in the meantime, we can run the other line of code as well.

258
00:17:09,310 --> 00:17:15,910
It means that in at the same time, we can run multiple tasks, even though JavaScript is single threaded,

259
00:17:16,150 --> 00:17:18,640
even the JavaScript can run only one task.

260
00:17:19,089 --> 00:17:22,990
That's what the whole ideology behind asynchronous programming is.

261
00:17:23,260 --> 00:17:29,500
So we are going to pass it to the Web APIs and we're going to ask the Web API, OK, this is this is

262
00:17:29,500 --> 00:17:30,070
your job.

263
00:17:30,070 --> 00:17:31,060
You should handle this.

264
00:17:31,060 --> 00:17:36,960
And remind me after five seconds, after five seconds pass, they are going to come to the callback

265
00:17:36,960 --> 00:17:43,960
queue and the event loop is going to push it to the call stack when it is pushed to the constuction.

266
00:17:43,990 --> 00:17:44,650
We are not.

267
00:17:44,650 --> 00:17:49,900
No longer concerned with the sad time on because said time out is not our responsibility.

268
00:17:49,930 --> 00:17:56,710
It is the responsibility of the Web API when the timer finishes the function, said time out is going

269
00:17:56,710 --> 00:17:58,360
to come to the callback queue.

270
00:17:58,780 --> 00:18:07,150
Now, think of this callback queue as a way of reminding the JavaScript engine once more that you have

271
00:18:07,150 --> 00:18:08,380
something to do.

272
00:18:08,530 --> 00:18:10,180
You should have done this.

273
00:18:10,390 --> 00:18:16,330
You should do this after five seconds and now that five seconds have passed, grab your function and

274
00:18:16,330 --> 00:18:17,380
implement that function.

275
00:18:17,920 --> 00:18:25,360
It's no longer my responsibility because I counted from one to 5000 milliseconds and then I gave you

276
00:18:25,360 --> 00:18:25,860
the function.

277
00:18:25,870 --> 00:18:26,860
The rest is up to you.

278
00:18:27,340 --> 00:18:28,440
What do you want to do with it?

279
00:18:28,810 --> 00:18:30,490
That's what the callback is.

280
00:18:30,490 --> 00:18:37,540
The callback queue is going to grab the tasks from Web APIs and it is going to push it to the cost.

281
00:18:38,020 --> 00:18:43,300
The cost stack is the territory of JavaScript, VM or execution engine.

282
00:18:43,870 --> 00:18:44,190
Right.

283
00:18:44,350 --> 00:18:51,070
So in the meantime, the set time out is calculating in the Web API because you can see we have three

284
00:18:51,070 --> 00:18:52,230
friends actually in here.

285
00:18:52,480 --> 00:18:55,240
Well, this is not actually a friend, only these two.

286
00:18:55,510 --> 00:18:58,140
This is just pushing it back to back to the stack.

287
00:18:58,510 --> 00:19:00,970
In the meantime, we are going to run console log as well.

288
00:19:00,970 --> 00:19:03,370
So I'm going to say and save and run it.

289
00:19:03,640 --> 00:19:06,280
And I'm just going to let you just go ahead and watch it.

290
00:19:06,280 --> 00:19:07,870
It is going to run a bit quickly.

291
00:19:07,870 --> 00:19:10,930
And that's where they should have made it like a bit slower.

292
00:19:11,200 --> 00:19:12,760
So it's really visible.

293
00:19:12,760 --> 00:19:16,530
But still, I'm going to run it a couple of times so you can understand what happens.

294
00:19:16,750 --> 00:19:17,530
So there we go.

295
00:19:30,110 --> 00:19:32,880
All right, so we are done with this process.

296
00:19:32,900 --> 00:19:34,290
So actually, what happened?

297
00:19:34,310 --> 00:19:36,080
I'm just going to go over this one more time.

298
00:19:37,070 --> 00:19:42,370
Whenever we click and we run, this is calculated, OK?

299
00:19:42,740 --> 00:19:47,000
When this code is run, it is because this is a dumb it is going to be passed to the dumb.

300
00:19:47,300 --> 00:19:49,880
Why it stayed here is because of this click.

301
00:19:49,880 --> 00:19:51,620
If I click, then this code runs.

302
00:19:51,620 --> 00:19:53,930
If I don't click, then this code will never run.

303
00:19:54,590 --> 00:19:54,880
Right.

304
00:19:55,130 --> 00:20:01,100
So whenever we run the code, this is going to be passed to the Web API and then we are going to run

305
00:20:01,100 --> 00:20:04,160
the console like, hey, we are going to run it.

306
00:20:04,160 --> 00:20:08,780
And then immediately it is going to be popped from the stack because it's done.

307
00:20:08,780 --> 00:20:10,580
When it is done, it should good.

308
00:20:11,030 --> 00:20:12,860
It should go away when it is done.

309
00:20:13,040 --> 00:20:18,680
And then we are going to go to sit time out and said time out is going to be passed to the Web API and

310
00:20:18,680 --> 00:20:21,740
then after five seconds it is going to come to the callback queue.

311
00:20:21,740 --> 00:20:25,250
The event loop is going to push it back to the call stack.

312
00:20:25,610 --> 00:20:29,620
It is it's going to push the time out function, not the set timer.

313
00:20:29,780 --> 00:20:35,750
So time out is done and the time out is going to run this call, this console log.

314
00:20:35,750 --> 00:20:41,480
But even before this five seconds runs, we are going to log to the console.

315
00:20:41,480 --> 00:20:44,680
Welcome to Lapore Loop or whatever.

316
00:20:45,080 --> 00:20:46,810
So it goes to the Web API.

317
00:20:46,820 --> 00:20:52,520
This is run it pages pass to the Web API and this console luggage run.

318
00:20:52,820 --> 00:20:53,270
Oops.

319
00:20:53,480 --> 00:20:55,360
I think I should do it one one more time.

320
00:20:55,580 --> 00:21:02,810
So console log is run popped past to the Web API, this console longest run and popped and we wait for

321
00:21:02,810 --> 00:21:07,910
five seconds, see the timeout function and the timeout function implements the console lock and then

322
00:21:07,910 --> 00:21:08,420
we are done.

323
00:21:08,570 --> 00:21:10,100
Now we are waiting for the click.

324
00:21:10,100 --> 00:21:14,100
If I click on it what is going to happen if I click on it?

325
00:21:14,100 --> 00:21:18,230
You are going to run a function which is the click the clock event.

326
00:21:18,230 --> 00:21:23,480
We are going to run that which is going to run this set time out and we are going to wait for two seconds.

327
00:21:23,840 --> 00:21:26,780
What in this case, what do you think in this case?

328
00:21:27,140 --> 00:21:32,780
What do you think in the case of said this Satima, what do you think is going to come to the callback?

329
00:21:32,780 --> 00:21:32,990
You.

330
00:21:34,320 --> 00:21:40,560
You're right, the timer function is going to come to the call by Cube because that is the part which

331
00:21:40,560 --> 00:21:43,820
is not yet run, the timer runs in the Web API.

332
00:21:43,850 --> 00:21:45,090
We don't run it again.

333
00:21:45,540 --> 00:21:49,700
When the timer comes in, time or function comes into the callback.

334
00:21:49,890 --> 00:21:56,190
The envelope loop is going to push it back to the call stack and the call stack is going to run the

335
00:21:56,190 --> 00:21:58,040
set time this time or function.

336
00:21:58,410 --> 00:22:00,260
What is this time or function going to do?

337
00:22:00,270 --> 00:22:02,270
It is simply going to log to the console.

338
00:22:02,580 --> 00:22:04,230
So let's run this one more time.

339
00:22:05,010 --> 00:22:05,700
All right.

340
00:22:06,420 --> 00:22:07,960
Clear set time out.

341
00:22:07,980 --> 00:22:12,750
This runs time function, which is time out comes here.

342
00:22:12,750 --> 00:22:13,500
It comes here.

343
00:22:13,500 --> 00:22:15,840
It runs the console log and then both of them pop.

344
00:22:16,320 --> 00:22:22,350
And when I click on this, you see unclick it runs this set time out, set time and waits for two seconds.

345
00:22:22,350 --> 00:22:24,720
This is timer and timer, just console logs it.

346
00:22:25,650 --> 00:22:29,940
So this is the entire ideology behind asynchronous programming.

347
00:22:29,940 --> 00:22:36,540
Starting from our next lecture, we are going to dive into Ajax, asynchronous JavaScript and XML and

348
00:22:36,540 --> 00:22:39,060
we are going to work with the real data.

349
00:22:39,060 --> 00:22:40,340
We are going to grab data.

350
00:22:40,350 --> 00:22:41,840
We are going to make requests.

351
00:22:42,180 --> 00:22:48,840
So this chapter is starting from next lecture is going to get really, really, really interesting.

352
00:22:49,080 --> 00:22:49,920
See you guys.

353
00:22:49,920 --> 00:22:50,160
The.

