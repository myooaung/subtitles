1
00:00:02,029 --> 00:00:02,969
Hi, everyone.

2
00:00:02,990 --> 00:00:06,470
In this lecture, we're going to talk about blocks coping.

3
00:00:07,540 --> 00:00:14,650
All right, so in this lecture, we are specifically covering blocks, coping with vare blocks, coping

4
00:00:14,650 --> 00:00:17,230
with letters and blocks, coping with CONSED.

5
00:00:17,800 --> 00:00:22,330
So so this is the syntax for a block.

6
00:00:22,360 --> 00:00:22,780
All right.

7
00:00:22,960 --> 00:00:31,090
And in here, first off, in the global scope, we have a var variable, a declaration and it is initialized

8
00:00:31,090 --> 00:00:33,040
with this name equals Clent.

9
00:00:33,550 --> 00:00:40,900
We have another name and now the identifier is the same inside the block and outside the outside the

10
00:00:40,900 --> 00:00:42,420
block, inside the global scope.

11
00:00:42,430 --> 00:00:46,270
So inside the global scope and inside the block we have the same identifier.

12
00:00:47,440 --> 00:00:49,660
But the expression assignment is different.

13
00:00:50,020 --> 00:00:51,970
The value is different.

14
00:00:52,300 --> 00:00:52,630
Right.

15
00:00:52,780 --> 00:00:57,100
So what I'm going to do is first off, I'm going to comment down the block and we are going to run this

16
00:00:57,100 --> 00:00:57,430
code.

17
00:00:57,610 --> 00:01:01,050
And we know that we can we are going to get Clent.

18
00:01:01,060 --> 00:01:01,400
All right.

19
00:01:01,660 --> 00:01:05,790
So what if I go ahead and if I run the code inside the block?

20
00:01:06,340 --> 00:01:10,030
Now, we know that VARs, they are not block scoped.

21
00:01:10,060 --> 00:01:15,060
They are either function scoped or their scope is the global scope.

22
00:01:15,400 --> 00:01:22,840
So they have only they attach only then they attach themselves only to two scope's the scope of the

23
00:01:22,840 --> 00:01:25,040
function or the global scope.

24
00:01:25,270 --> 00:01:33,460
So this block scope shouldn't have any effect on this var and we should see the value of this name changed

25
00:01:33,460 --> 00:01:34,850
from Klann to guard.

26
00:01:35,170 --> 00:01:42,310
And if I say that we can see that in here inside the block, which is line number six, we can see Guardian

27
00:01:42,610 --> 00:01:46,740
and outside the block, inside the global scope, we can see Gardian as well.

28
00:01:46,990 --> 00:01:55,720
So it means that if you provide blocks or if you don't, they have no effect on var.

29
00:01:55,720 --> 00:01:59,470
So what I'm going to say here, I'm just going to write no effect.

30
00:01:59,650 --> 00:02:00,010
Right.

31
00:02:00,610 --> 00:02:06,040
So what I'm going to do is I'm going to come and copy this and coming this out and now we are going

32
00:02:06,040 --> 00:02:07,900
to go ahead and paste it right here.

33
00:02:07,900 --> 00:02:15,310
And now what I'm going to do here is we are going to change inside this block.

34
00:02:15,310 --> 00:02:20,650
We are going to change the the VA to let and we will discuss that.

35
00:02:20,650 --> 00:02:28,120
OK, so we know that War Avar doesn't work because it attaches itself to a function scope or to the

36
00:02:28,120 --> 00:02:28,850
global scope.

37
00:02:28,870 --> 00:02:29,230
All right.

38
00:02:29,710 --> 00:02:33,190
But why do we have to like test it for letting consed?

39
00:02:34,140 --> 00:02:36,160
I think it was the previous Luxuria.

40
00:02:36,160 --> 00:02:42,370
It was the previous lecture that we talked about the immediately invoked function expression pattern,

41
00:02:42,370 --> 00:02:47,670
the EFFI pattern and one of the great use cases of an F.

42
00:02:48,610 --> 00:03:00,010
But what is six or is or accurately e 2015 gave us was block scoping created with let and var we can

43
00:03:00,730 --> 00:03:08,800
follow the principle of Leia's exposure or at least privilege by using a block rather than an iffy so

44
00:03:08,800 --> 00:03:16,600
we can use a block to do the same thing, to hide the information that we do not want any developer

45
00:03:16,600 --> 00:03:18,340
to change by mistake.

46
00:03:18,340 --> 00:03:21,450
Of course they are not doing it deliberately, but by mistake.

47
00:03:22,040 --> 00:03:22,510
All right.

48
00:03:22,510 --> 00:03:31,930
So let on const were created so we can make a declaration inside a block, OK, and they turn that block

49
00:03:31,930 --> 00:03:43,330
into a scope block or into a scope and blocks are not scope's until until they have let or const inside

50
00:03:43,330 --> 00:03:45,650
of them and that makes them a block.

51
00:03:46,180 --> 00:03:53,470
Now you have to keep in mind that not all curly braces are scope's because we just saw that we had curly

52
00:03:53,470 --> 00:03:56,200
braces here, but this wasn't its scope.

53
00:03:56,200 --> 00:03:56,590
Right.

54
00:03:56,890 --> 00:04:03,790
But if we have curly braces here, this is not a scope until we use either let or CONSED.

55
00:04:04,720 --> 00:04:09,250
This is one of the major reasons that we use lead and const.

56
00:04:09,580 --> 00:04:18,100
I mean, like most developers, they do prefer a like let or consed let consed over the VA because they

57
00:04:18,100 --> 00:04:24,130
think OK, that VA doesn't have any use case, but in fact VA has its own use case.

58
00:04:24,370 --> 00:04:30,760
I know it's like old syntax, but there are many things that are old syntax like the function declaration.

59
00:04:31,390 --> 00:04:33,040
But we still use them right.

60
00:04:33,430 --> 00:04:40,780
So va they have a different use case letter and const they have a different use case.

61
00:04:41,050 --> 00:04:49,150
I mean they do create a scope of themselves, but they are more like error prone than VA because va

62
00:04:49,150 --> 00:04:55,630
we know that it only attaches itself to a function and we know it attaches itself to a to the global

63
00:04:55,630 --> 00:04:56,410
scope as well.

64
00:04:56,650 --> 00:05:07,090
But what let whenever you use it, let inside any curly braces that curly braces becomes a a scope.

65
00:05:07,150 --> 00:05:13,480
And whenever you want to think about it, that how that code runs, then you have to create another

66
00:05:13,480 --> 00:05:17,940
scope inside during the compilation or the passing stages as well.

67
00:05:18,430 --> 00:05:26,140
So it makes things a little bit more complicated, but at the same time, we can, like, follow the

68
00:05:26,140 --> 00:05:28,010
principle of the least exposure.

69
00:05:28,330 --> 00:05:33,090
So there are some upsides and there are some downsides to using let in concert.

70
00:05:33,700 --> 00:05:40,600
We are going to discuss in cons along with VARE even more in our next lecture, sorry, next chapter.

71
00:05:40,960 --> 00:05:44,020
When we get to hoisting, we will talk about that as well.

72
00:05:44,020 --> 00:05:47,660
And what hosting is and is it even a real thing?

73
00:05:48,160 --> 00:05:57,550
And so at this point in this lecture, we are just like we are just we just want to know how this light

74
00:05:57,550 --> 00:06:00,720
creates a block and whether or not it does create.

75
00:06:01,240 --> 00:06:09,130
So in here we have a variable, we have an identifier name which is declared with VAR and here the same

76
00:06:09,130 --> 00:06:11,080
identifier, but declare with let.

77
00:06:11,710 --> 00:06:18,070
The result that we saw with Vav us was that VA didn't care about this coronaviruses.

78
00:06:18,070 --> 00:06:22,330
So it was as if these curly braces, they weren't present.

79
00:06:22,690 --> 00:06:30,700
And we re for example, we, I know there is no such thing as real declaration, but we did declare

80
00:06:30,700 --> 00:06:36,520
this a reassign the variable, this identifier to different value.

81
00:06:37,060 --> 00:06:37,970
But in here.

82
00:06:38,110 --> 00:06:43,720
So what we have is we have Veillette and we have we have we have log to the console name and we have

83
00:06:44,140 --> 00:06:47,210
log to the console name outside this block club as well.

84
00:06:47,680 --> 00:06:55,400
Now, we are going to go over this because it creates a scope from these inside these curly braces.

85
00:06:56,500 --> 00:07:02,440
It means that this identifier of name is not accessible outside the scope.

86
00:07:02,860 --> 00:07:04,020
It is not accessible.

87
00:07:04,360 --> 00:07:09,340
So when it is not accessible, what is going to what this console log is going to do?

88
00:07:09,560 --> 00:07:18,610
It is either going to throw an error like undefined like name is not defined or or if the name is defined,

89
00:07:18,610 --> 00:07:23,090
it is just going to log the value to the like to the console.

90
00:07:23,590 --> 00:07:29,110
So if I were to save this, we should see Guardian and then we should see Clent.

91
00:07:29,110 --> 00:07:30,160
So let's save it.

92
00:07:30,400 --> 00:07:32,890
And this is how how this is the difference.

93
00:07:33,250 --> 00:07:36,130
Of course one of the differences between Lit and VAR.

94
00:07:37,530 --> 00:07:43,030
And the differences in their scope, it doesn't mean that war is bad, let is good.

95
00:07:43,050 --> 00:07:43,580
No, no, no.

96
00:07:44,400 --> 00:07:50,430
The differences in their scope and you should know how these work when you know them, you will understand

97
00:07:50,670 --> 00:07:52,590
where I should use which.

98
00:07:52,830 --> 00:07:58,740
OK, so when it comes to functions, it doesn't really matter if you use Valette or Kohn's, but when

99
00:07:58,740 --> 00:08:05,370
it comes to a block, a set of curly braces that you want to make a scope, then you should go with

100
00:08:05,370 --> 00:08:06,570
Let or CONSED.

101
00:08:07,020 --> 00:08:12,450
And you should keep in mind that these declarations, they should always be at the top of the scope.

102
00:08:12,810 --> 00:08:17,490
All of your variable declarations should be at the top of your scope.

103
00:08:17,730 --> 00:08:24,120
That's why during the past twenty six projects, all of our declarations for the most part there were

104
00:08:24,120 --> 00:08:26,190
at the top of the scope.

105
00:08:26,190 --> 00:08:26,530
Right.

106
00:08:27,840 --> 00:08:32,940
So what I'm going to do is just going to copy this and I'm going to come in this one out and we are

107
00:08:32,940 --> 00:08:37,900
going to come down and see and pasted here and I'm going to change this led to CONSED.

108
00:08:38,850 --> 00:08:43,169
Now we know that Consed cannot be reassigned and all that.

109
00:08:43,169 --> 00:08:49,560
But what, what if what, what is going to, what Consed is going to do here.

110
00:08:49,890 --> 00:08:52,290
So Consed is going to do the same thing.

111
00:08:52,320 --> 00:09:00,420
So I'm just going to trash this so that the variable which has been the identifier which has been declared

112
00:09:00,420 --> 00:09:08,170
through const or initialized through const, will be only accessed within that specific scope.

113
00:09:08,430 --> 00:09:14,130
So this concept the should give us Guardian and this council, the log she should give us either an

114
00:09:14,130 --> 00:09:22,500
error like it is not defined or when it is defined here we should get like Guardian and then for this

115
00:09:22,500 --> 00:09:24,150
one we should get Clent.

116
00:09:24,420 --> 00:09:32,940
And when I say it, we get the exact same thing printed on the lock and in the console.

117
00:09:33,540 --> 00:09:42,420
So VARs they attach themselves to the function scope or to the I'm just going to write has fact.

118
00:09:43,200 --> 00:09:47,940
I think this conveys the point so far.

119
00:09:47,940 --> 00:09:53,970
They attach themselves to function scope and to the global scope that they attach themselves to the

120
00:09:53,970 --> 00:09:56,880
block scope in any scope that they are.

121
00:09:56,880 --> 00:09:58,830
They create a scope for themselves.

122
00:09:59,070 --> 00:10:04,900
And of course they do attach themselves to the global scope whenever they're used there.

123
00:10:05,520 --> 00:10:10,110
So this is going to be it for this lecture and this chapter in the next chapter.

124
00:10:10,110 --> 00:10:17,610
We are just going to go over what hosting is and how you should allow what it is, how it works and

125
00:10:17,610 --> 00:10:18,960
is it even a real thing?

126
00:10:19,290 --> 00:10:19,620
All right.

127
00:10:19,830 --> 00:10:21,860
So see you guys in the next chapter.

