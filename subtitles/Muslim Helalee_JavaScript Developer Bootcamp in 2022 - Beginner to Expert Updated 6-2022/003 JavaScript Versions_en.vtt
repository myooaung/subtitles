WEBVTT
1
00:00:02.310 --> 00:00:09.600
Hi, everyone, in this letter, I want to talk about the JavaScript versions, all right, now, before

2
00:00:09.600 --> 00:00:14.720
starting this lecture, I have to mention that this nature is not actually mandatory.

3
00:00:14.850 --> 00:00:20.700
You can go ahead and skip this lecture and you can go to the next election where we create a JavaScript

4
00:00:20.700 --> 00:00:26.180
file and link it to this e-mail where we start practicing JavaScript.

5
00:00:26.190 --> 00:00:26.550
All right.

6
00:00:27.060 --> 00:00:31.650
And then when you gain some sort of knowledge of JavaScript, you can come back.

7
00:00:31.890 --> 00:00:38.100
But if you're really fond of theory, I just want to go over, like in a couple of minutes, just go

8
00:00:38.100 --> 00:00:43.920
over how JavaScript was created and what different versions of JavaScript mean, OK?

9
00:00:45.160 --> 00:00:49.460
So JavaScript is actually an ECMAScript standard.

10
00:00:49.480 --> 00:00:56.200
All right, JavaScript is an implementation of the ECMAScript standard, and you might you might have

11
00:00:56.200 --> 00:00:58.970
heard like E is six years, seven years.

12
00:00:58.990 --> 00:01:02.580
2015 is 2016 and so on and so forth.

13
00:01:02.920 --> 00:01:09.700
Now, for a very long time, the version of JavaScript that all browsers ran was ECMAScript three.

14
00:01:10.260 --> 00:01:10.620
All right.

15
00:01:10.930 --> 00:01:17.770
Version four was canceled due to feature creep, which means that there were they were trying to add

16
00:01:17.770 --> 00:01:19.300
too many things at once.

17
00:01:19.720 --> 00:01:23.050
Well, iOS five was a huge version for JavaScript.

18
00:01:23.890 --> 00:01:29.330
iOS 215, which is also called ESX, was also a huge version.

19
00:01:29.680 --> 00:01:38.200
Since then, the ones in charge decided to release one version per year to avoid having too much time

20
00:01:38.200 --> 00:01:39.790
idle between releases.

21
00:01:39.820 --> 00:01:48.310
OK, now we have JavaScript versions from iOS three all the way to E 11, OK?

22
00:01:48.850 --> 00:01:54.520
And they are all referring to a standard called ECMAScript.

23
00:01:54.790 --> 00:01:58.930
ECMAScript is the standard upon which JavaScript is based.

24
00:01:59.170 --> 00:02:04.030
It is often abbreviated to s ECMAScript s right.

25
00:02:04.210 --> 00:02:09.280
That's why JavaScript is called E like the different versions of JavaScript.

26
00:02:09.280 --> 00:02:13.640
They're called E is like five years, six years, seven years, eight.

27
00:02:13.660 --> 00:02:20.260
OK, now besides JavaScript, other languages also have implemented ECMAScript before.

28
00:02:20.620 --> 00:02:28.030
We have an action script, which is the flash scripting language, which is like losing its popularity

29
00:02:28.030 --> 00:02:31.010
and has been officially discontinued in 2020.

30
00:02:31.510 --> 00:02:40.960
We also had J script, which was Microsoft scripting dialect, and when the browser wars were at their

31
00:02:40.960 --> 00:02:47.550
peak, Microsoft had to come up with with its own version of the Internet Explorer and the language.

32
00:02:47.570 --> 00:02:47.880
Right.

33
00:02:48.340 --> 00:02:51.130
But of course, JavaScript, we should never forget.

34
00:02:51.130 --> 00:02:56.860
The JavaScript is the most popular and widely used implementation of iOS.

35
00:02:57.670 --> 00:03:00.460
You might ask, okay, why this odd name?

36
00:03:00.460 --> 00:03:01.060
Eckmann.

37
00:03:01.270 --> 00:03:08.920
Now, Eckmann is an international Suess Standards Association that is in charge of defining international

38
00:03:08.920 --> 00:03:09.580
standards.

39
00:03:09.820 --> 00:03:15.490
When JavaScript was created, it was presented by Netscape and Sun Microsystems.

40
00:03:16.180 --> 00:03:21.460
Now Sun Microsystems is the maker of Java programming language.

41
00:03:21.610 --> 00:03:23.290
And now you guys know that word.

42
00:03:23.290 --> 00:03:25.450
The name of JavaScript comes from.

43
00:03:25.600 --> 00:03:30.880
It is a very poor choice of name, but it's the one that we have to live with.

44
00:03:30.890 --> 00:03:31.300
All right.

45
00:03:32.410 --> 00:03:42.090
And they presented the JavaScript to XMA and they gave it the name Alkmaar Dash 262, alias ECMAScript.

46
00:03:42.310 --> 00:03:42.670
Right.

47
00:03:43.060 --> 00:03:48.420
So as of now, the only popular language supporting ECMAScript spec is JavaScript.

48
00:03:48.730 --> 00:03:57.790
The current version of JS is ECMAScript 220 or twenty twenty or is 11, which was released in June 2020,

49
00:03:58.570 --> 00:04:00.820
which we are going to talk about as well.

50
00:04:01.430 --> 00:04:08.470
Now, the major improvement of JavaScript came with the ESX version, which is also called ECMAScript

51
00:04:08.470 --> 00:04:09.250
2015.

52
00:04:09.580 --> 00:04:14.350
Now the year is added to the name because it was released in that year.

53
00:04:14.700 --> 00:04:19.870
OK, and this version is a fundamental version of the ECMAScript standard.

54
00:04:20.290 --> 00:04:26.440
Before E 2015, ECMAScript specifications were commonly called by the additions.

55
00:04:26.710 --> 00:04:35.400
So E is five is the official name for the ECMAScript specification update published in 29 in 2009,

56
00:04:35.410 --> 00:04:37.270
sorry, in 2009.

57
00:04:37.840 --> 00:04:43.570
Now, what does this why does this happen during the process that led to his 2015?

58
00:04:43.750 --> 00:04:48.310
The name was changed from ESX to year 2015.

59
00:04:48.520 --> 00:04:54.280
But since this was done late, people still referenced it as he is six.

60
00:04:54.520 --> 00:04:59.440
OK, and the community of developers, they have not left the edition.

61
00:04:59.440 --> 00:05:06.180
Naming Behind the World is still calling iOS releases by edition numbers, which is actually incorrect.

62
00:05:06.430 --> 00:05:14.200
You have to call the press releases not by edition no, but by the year in which they are published.

63
00:05:14.740 --> 00:05:22.030
Now published four years after the latest standard revision, ECMAScript five point one.

64
00:05:22.330 --> 00:05:27.100
It is also marked with the switch from edition number to your number.

65
00:05:27.340 --> 00:05:31.330
So it should not be named ESX, although everyone calls it as such.

66
00:05:31.330 --> 00:05:34.830
But yes, 2015 is more appropriate instead.

67
00:05:35.260 --> 00:05:37.240
Now just bear with me.

68
00:05:37.240 --> 00:05:45.100
We are getting to the end of the matter is five was 10 years in the making from 1999 to 2009.

69
00:05:45.430 --> 00:05:50.080
And as such it was also a fundamental and very important revision of the language.

70
00:05:50.350 --> 00:05:58.140
But now so much time has passed and it is not worth discussing how previous five code worked.

71
00:05:58.150 --> 00:05:58.540
All right.

72
00:05:58.810 --> 00:06:06.250
So since this long time passed between iOS 5.1 and he is six, the release is full of important new

73
00:06:06.250 --> 00:06:14.230
features and major changes in suggested best practices in developing JavaScript programs to understand

74
00:06:14.230 --> 00:06:16.720
how fundamentally Estonia 2015 is.

75
00:06:17.690 --> 00:06:27.110
We just have to keep in mind that this version, this just with one that is 215 or ESX version came

76
00:06:27.350 --> 00:06:33.660
the specification document went from 250 pages to almost 600 pages.

77
00:06:34.010 --> 00:06:39.890
So at the end of this letter, I just want to say that in this course, we are not going to talk about

78
00:06:39.890 --> 00:06:44.470
the E five or previous versions.

79
00:06:44.660 --> 00:06:54.380
We are going to start studying JavaScript by starting from the from the major changes that came in the

80
00:06:54.380 --> 00:06:54.830
language.

81
00:06:54.830 --> 00:07:00.080
And that was e 2015 or as the community calls it, is ESX.

82
00:07:00.230 --> 00:07:07.940
So we are going to start studying JavaScript, starting from the ESX all the way to iOS 11 orat, which

83
00:07:07.940 --> 00:07:09.920
is the latest version of JavaScript.

84
00:07:10.190 --> 00:07:11.630
So that's it for this lecture.

85
00:07:11.750 --> 00:07:13.700
See you guys in the next one.

