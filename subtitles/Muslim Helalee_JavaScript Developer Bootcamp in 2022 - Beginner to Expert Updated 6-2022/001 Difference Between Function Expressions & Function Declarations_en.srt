1
00:00:01,200 --> 00:00:07,650
Hi, everyone, in this lecture, we are going to go over the difference between function expression's

2
00:00:07,860 --> 00:00:09,720
and function declarations.

3
00:00:11,450 --> 00:00:18,530
All right, so we know that there are a lot of syntactical differences, but the difference that I want

4
00:00:18,530 --> 00:00:26,930
to point out is based on their scope, which scope these functions belong to and which scope do they

5
00:00:26,930 --> 00:00:27,770
create.

6
00:00:27,810 --> 00:00:28,160
All right.

7
00:00:28,460 --> 00:00:35,220
So on line one, we have a function declaration that has a name of my movie rating and we have canceled

8
00:00:35,450 --> 00:00:36,160
it right here.

9
00:00:36,560 --> 00:00:39,140
We have just called the function.

10
00:00:39,140 --> 00:00:40,960
We have not executed the function.

11
00:00:40,970 --> 00:00:41,320
All right.

12
00:00:41,690 --> 00:00:45,680
So online three, we have a function expression.

13
00:00:46,340 --> 00:00:48,850
The variable name is your movie rating.

14
00:00:48,860 --> 00:00:53,770
However, this function expression is not an anonymous function expression.

15
00:00:53,780 --> 00:00:58,790
This is in named a so-called named function expression.

16
00:00:58,820 --> 00:00:59,150
Right.

17
00:00:59,360 --> 00:01:07,070
And this is the job of this is just this council logs another rating.

18
00:01:07,070 --> 00:01:07,880
We just call it.

19
00:01:07,880 --> 00:01:09,290
We don't run it.

20
00:01:09,290 --> 00:01:10,960
We don't execute the function.

21
00:01:11,330 --> 00:01:15,170
And finally, we have our three consulates.

22
00:01:15,410 --> 00:01:19,760
So the first council log, this refers to this function.

23
00:01:19,970 --> 00:01:26,660
The second one is actually the council lugging this variable that has it, that is pointing to a function.

24
00:01:27,200 --> 00:01:27,560
Right.

25
00:01:27,560 --> 00:01:33,420
And finally, we are going to cancel this another another rating, which is this function.

26
00:01:33,470 --> 00:01:41,780
So before actually saving this and showing you the results here, I'm going to go over the theory.

27
00:01:42,170 --> 00:01:51,840
So in theory, function declarations such as this one, they create or they they add their names or

28
00:01:51,840 --> 00:01:53,240
a slash identifier.

29
00:01:53,300 --> 00:01:57,620
This is the name of the function they added to their inclosing scope.

30
00:01:57,810 --> 00:01:58,850
What do I mean by that?

31
00:01:59,120 --> 00:02:05,600
So if the function declaration is inside the global scope, the identifier of that function declaration

32
00:02:05,960 --> 00:02:09,310
will also be accessible inside the global scope.

33
00:02:10,009 --> 00:02:10,370
Right.

34
00:02:10,669 --> 00:02:18,230
But if the function declaration is inside another function declaration, then the identifier, as is

35
00:02:18,230 --> 00:02:23,480
going to be like a nested scope, which we talked about in the previous chapter, which can only be

36
00:02:23,480 --> 00:02:25,730
accessed within the parent scope.

37
00:02:26,190 --> 00:02:26,510
Right.

38
00:02:26,720 --> 00:02:29,830
And what do we have here is next up.

39
00:02:29,840 --> 00:02:34,730
We have the function, expression and function expressions.

40
00:02:34,910 --> 00:02:40,190
They add their name or identifier to their own scope.

41
00:02:40,460 --> 00:02:46,540
So the name of this function expression can only be accessed within the scope of this function.

42
00:02:47,270 --> 00:02:52,890
So whenever you create a function expression, so this is a preference how you want to code.

43
00:02:52,910 --> 00:02:56,310
OK, this is like the code coding styles.

44
00:02:56,330 --> 00:02:58,250
Everybody has a different coding style.

45
00:02:59,510 --> 00:03:06,530
So it is a recommendation that whenever you create a function expression, do always name that function

46
00:03:06,530 --> 00:03:13,550
expression because you can clearly access the name of this function expression, OK, you cannot access

47
00:03:13,550 --> 00:03:15,140
it inside the global scope.

48
00:03:15,140 --> 00:03:19,970
It means that there is not going to be any naming collision down the road.

49
00:03:20,000 --> 00:03:25,340
OK, so there is not going to be anything like that and it is accessible, you know what the name of

50
00:03:25,340 --> 00:03:27,450
the function is and you know how you can access it.

51
00:03:28,130 --> 00:03:28,520
All right.

52
00:03:28,670 --> 00:03:37,010
So if we were to go ahead and to save this code, we should be able to see this function, this function

53
00:03:37,010 --> 00:03:40,370
and this variables assignment expression.

54
00:03:40,640 --> 00:03:44,990
But we should see an error as far as this another rating is concerned.

55
00:03:45,260 --> 00:03:48,480
So if I say it, we can see that we see our function.

56
00:03:48,510 --> 00:03:50,470
So how does this actually work?

57
00:03:50,960 --> 00:03:52,360
This is a function.

58
00:03:52,370 --> 00:03:53,720
This is a declaration.

59
00:03:54,410 --> 00:03:59,450
And whenever we declare functions, they are they are compiled away.

60
00:03:59,480 --> 00:04:03,130
They are like done in in the compilation stage.

61
00:04:03,440 --> 00:04:07,360
So there is nothing in the execution stage.

62
00:04:07,640 --> 00:04:16,130
So there is nothing in the compilation stage because they are done and nothing in the execution stage

63
00:04:16,310 --> 00:04:18,560
because they are done.

64
00:04:18,560 --> 00:04:19,970
They have been compiled away.

65
00:04:20,029 --> 00:04:22,670
And this is a function expression.

66
00:04:22,670 --> 00:04:30,560
This is different because we have a var, we have a a variable declaration here.

67
00:04:30,560 --> 00:04:32,800
Again, we have initialized to this value.

68
00:04:33,260 --> 00:04:41,360
So the execution engine is going to come to line number three and in here it is going to grab this var

69
00:04:41,630 --> 00:04:49,010
your your movie rating and it can see that it is a target reference to which this, this is apply.

70
00:04:49,310 --> 00:04:54,440
But, but again, because this is pointing to a function, we need to grab that function.

71
00:04:54,650 --> 00:05:00,470
So we grabbed the name of this variable and we put it inside this console.

72
00:05:00,520 --> 00:05:08,480
Luxo this var is going to immediately come to line number eight and it is going to run this, but before

73
00:05:08,480 --> 00:05:10,850
that because we are on the line one.

74
00:05:11,030 --> 00:05:18,530
We have our function and of course, we are going to talk about hoisting in our next chapter, but basically

75
00:05:18,530 --> 00:05:26,480
what that is, is or this lexical scope, how it works is the functions function declarations that are

76
00:05:26,630 --> 00:05:29,930
executed first and then function expressions.

77
00:05:29,930 --> 00:05:31,040
They are executed.

78
00:05:31,370 --> 00:05:31,760
Right.

79
00:05:32,180 --> 00:05:39,950
And so that's why we can see our my movie rating first and then we can see that your movie rating and

80
00:05:39,950 --> 00:05:45,380
whenever we access the another rating, which is this function, we cannot get it.

81
00:05:45,380 --> 00:05:49,430
And it says a reference or another rating is not defined.

82
00:05:49,730 --> 00:05:52,400
So we cannot get a reference to that.

83
00:05:52,400 --> 00:05:53,690
We cannot get the reference.

84
00:05:53,720 --> 00:05:55,460
So what is this another rating?

85
00:05:55,470 --> 00:05:56,660
We don't know what that is.

86
00:05:57,200 --> 00:06:00,510
Then how can we how can we log it to the console?

87
00:06:00,920 --> 00:06:08,150
So just to recap the difference between function declarations in this code, perspective with the function

88
00:06:08,150 --> 00:06:14,450
expression is that function declarations, they add their identifier or their name to the inclosing

89
00:06:14,450 --> 00:06:21,500
scope, a.k.a. in the scope in which their present and function, the expressions they add their identifier

90
00:06:21,800 --> 00:06:24,050
to their own scope.

91
00:06:24,380 --> 00:06:26,540
You might not have seen this very much.

92
00:06:26,540 --> 00:06:33,590
You might see like you might have seen like a function expression, like a variable declaration on one

93
00:06:33,590 --> 00:06:38,900
side and on the other side, you might have seen a lot like an anonymous function.

94
00:06:38,900 --> 00:06:44,150
So that works as well as I told you guys that this is like a preference.

95
00:06:44,630 --> 00:06:52,820
You whenever you get to coding you, you are bound to create styles and methods for yourself and you

96
00:06:52,820 --> 00:06:54,980
will know which way works better for you.

97
00:06:55,280 --> 00:06:57,010
There is this is not a good thing.

98
00:06:57,020 --> 00:06:58,250
This is not a bad thing.

99
00:06:58,260 --> 00:07:00,830
This is just simply a matter of preference.

100
00:07:01,110 --> 00:07:01,440
Right.

101
00:07:01,610 --> 00:07:03,440
Some people love function expressions.

102
00:07:03,440 --> 00:07:05,740
Some people love function declarations.

103
00:07:05,740 --> 00:07:08,120
Some people love aira functions a lot.

104
00:07:08,120 --> 00:07:10,340
They do all of their stuff with error functions.

105
00:07:10,360 --> 00:07:12,970
Some people love name and function expressions.

106
00:07:12,980 --> 00:07:14,780
It depends on which.

107
00:07:14,780 --> 00:07:21,710
It doesn't matter actually which route you take or either you combine all of them together as long as

108
00:07:21,860 --> 00:07:27,980
you know how they work, how they how the scoping works, how this lexical scoping of JavaScript works.

109
00:07:28,130 --> 00:07:30,490
As long as you know that you should be good to go.

110
00:07:30,950 --> 00:07:33,550
This this is going to be it for this lecture.

111
00:07:33,560 --> 00:07:35,180
See you guys in the next one.

