WEBVTT
1
00:00:01.850 --> 00:00:07.190
Hi, everyone, and this lecture, we're going to talk about the array for each method.

2
00:00:08.180 --> 00:00:16.670
All right, so let's say we have an array of birth songs of all time and that array actually has enough

3
00:00:16.890 --> 00:00:20.810
objects as items inside of it, so.

4
00:00:21.940 --> 00:00:29.770
We have an artist and we have his song and we have one, two, three, four, five and six, so we have

5
00:00:29.770 --> 00:00:35.200
six items within this array so we can use a regular for loops for this.

6
00:00:35.350 --> 00:00:41.200
But I want to talk about the higher order methods, and this time I want to talk about the four each.

7
00:00:41.350 --> 00:00:48.070
So we are going to grab our array of best songs and we are going to say for each and now the name suggests

8
00:00:48.100 --> 00:00:50.560
OK, suggests it all.

9
00:00:50.950 --> 00:00:52.320
It says for each.

10
00:00:52.330 --> 00:00:57.850
So for each of the items within this array, I want to do a specific thing.

11
00:00:58.420 --> 00:01:00.090
What is that specific thing?

12
00:01:00.100 --> 00:01:03.850
I want to run it if callback function.

13
00:01:04.060 --> 00:01:04.459
Right.

14
00:01:04.780 --> 00:01:10.750
So it says performs the specified even though this even this says the same thing, performs the specified

15
00:01:10.750 --> 00:01:14.820
action for each element in an array for each of them.

16
00:01:14.830 --> 00:01:16.460
I want to do a specific thing.

17
00:01:16.870 --> 00:01:19.170
So this is going to be best song.

18
00:01:19.180 --> 00:01:22.990
This is our argument.

19
00:01:23.340 --> 00:01:25.620
OK, sorry, this is our parameter.

20
00:01:25.630 --> 00:01:27.480
We're going to use an arrow function.

21
00:01:27.940 --> 00:01:30.220
You could put that inside parentheses or not.

22
00:01:30.220 --> 00:01:31.180
It doesn't really matter.

23
00:01:31.360 --> 00:01:33.460
And I want to say cancel that log.

24
00:01:34.570 --> 00:01:36.070
Best song.

25
00:01:37.150 --> 00:01:44.320
So let's open this up to inspect, and if I save it, we are going to get all the iterations of that

26
00:01:44.530 --> 00:01:51.010
so you can do this with regular for a loop and like five, six lines, but you can do this with one

27
00:01:51.010 --> 00:01:52.720
line of four each.

28
00:01:52.870 --> 00:01:59.790
So it is going you can see that the code for murder has put parentheses around this function parameter.

29
00:02:00.040 --> 00:02:03.430
So we have a function parameter and we what do we want this function to do?

30
00:02:03.670 --> 00:02:11.410
We want this function to print to the console the for each variable or the function parameter itself.

31
00:02:11.860 --> 00:02:13.310
OK, and then we get this.

32
00:02:13.330 --> 00:02:15.910
So this is on each iteration.

33
00:02:16.210 --> 00:02:20.170
We are going to grab one of these and we are going to get six iterations.

34
00:02:20.170 --> 00:02:24.090
That's why why we are we have six artists in here.

35
00:02:24.490 --> 00:02:24.850
All right.

36
00:02:25.030 --> 00:02:25.910
So that's it.

37
00:02:25.930 --> 00:02:27.010
Very short method.

38
00:02:27.010 --> 00:02:33.730
But the reason that I'm not explaining more is because we have talked a lot about the for each right.

39
00:02:33.790 --> 00:02:35.110
And this is really simple.

40
00:02:35.350 --> 00:02:39.070
It just loops over this array, all the items inside the array.

41
00:02:39.070 --> 00:02:44.830
And each time it grabs one of the items, it does something because there are six items.

42
00:02:44.980 --> 00:02:47.670
It did that thing six times.

43
00:02:47.890 --> 00:02:50.990
That's basically the whole premise of this foreach.

44
00:02:51.220 --> 00:02:52.960
See you guys in the next lecture.

