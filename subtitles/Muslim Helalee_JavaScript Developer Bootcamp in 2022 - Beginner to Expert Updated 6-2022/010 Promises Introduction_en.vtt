WEBVTT
1
00:00:01.960 --> 00:00:02.930
Hi, everyone.

2
00:00:03.190 --> 00:00:07.360
In this lecture, we are going to talk about ESX promises.

3
00:00:08.370 --> 00:00:20.040
All right, so promises are a new addition to JavaScript e 2015 version, which allow us to make HDTV

4
00:00:20.040 --> 00:00:22.950
requests much better, much cleaner.

5
00:00:23.040 --> 00:00:27.930
All right, so what are we going to do is in this lecture, I'm going to introduce you to promises,

6
00:00:27.930 --> 00:00:33.750
and we are going to do a very, very, very simple example.

7
00:00:34.410 --> 00:00:39.660
And in the next lecture, we're going to clean up our code using promises.

8
00:00:40.140 --> 00:00:40.500
All right.

9
00:00:40.740 --> 00:00:45.120
So what I'm going to do is, first off, let's go over what actually promises are.

10
00:00:45.330 --> 00:00:54.120
A promise is actually an object representing the eventual completion or failure of an asynchronous operation.

11
00:00:54.420 --> 00:01:00.930
Now, you have to keep this in mind that a promise when you whenever you used promises, a promise allows

12
00:01:00.930 --> 00:01:02.790
us to use two key words.

13
00:01:02.820 --> 00:01:03.870
One is resolve.

14
00:01:03.870 --> 00:01:05.129
The other one is reject.

15
00:01:05.430 --> 00:01:10.170
Reject is when we use reject, sorry, resolve.

16
00:01:10.410 --> 00:01:15.910
When we use the resolve, we are working with the completion of that request.

17
00:01:16.050 --> 00:01:17.900
What do we want to do with that request?

18
00:01:18.210 --> 00:01:21.340
And when we say reject, it means there has been some error.

19
00:01:21.360 --> 00:01:23.040
What do we want to do with that error?

20
00:01:23.730 --> 00:01:24.020
All right.

21
00:01:24.180 --> 00:01:32.130
So essentially a promise is a returned object to which we attach callbacks now and now.

22
00:01:32.130 --> 00:01:38.910
We don't pass callbacks and into this promise function, we just attach callbacks.

23
00:01:38.910 --> 00:01:43.290
And the callbacks are like 10 or DataCash, which we are going to go over.

24
00:01:43.770 --> 00:01:46.330
So now let's go ahead and let's first off.

25
00:01:46.680 --> 00:01:51.450
Now, if you want to read more about promises, here is the link and you can go ahead and read more.

26
00:01:52.020 --> 00:01:55.260
So what I'm going to do is I'm just going to say my first promise.

27
00:01:56.100 --> 00:01:56.550
All right.

28
00:01:57.030 --> 00:02:02.940
And the promises are instantiated using the new key word.

29
00:02:03.090 --> 00:02:03.390
Right.

30
00:02:03.420 --> 00:02:05.250
So we are going to see a new promise.

31
00:02:05.850 --> 00:02:09.270
Each time you want to create a promise, you're going to see new promise.

32
00:02:09.690 --> 00:02:10.139
All right.

33
00:02:10.139 --> 00:02:12.290
And this is capital.

34
00:02:12.840 --> 00:02:16.000
So in here now, here is where the promise is.

35
00:02:16.020 --> 00:02:20.540
So we are going to have a resolve key and then we are going to have a reject.

36
00:02:21.150 --> 00:02:23.700
So we are going to pass and resolve.

37
00:02:24.660 --> 00:02:26.740
All right, and we are going to say reject.

38
00:02:27.330 --> 00:02:29.460
So this is going to be an error function.

39
00:02:30.920 --> 00:02:37.100
Now, inside this function, what do I want to do in this very simple example, I'm just going to use

40
00:02:37.100 --> 00:02:43.910
a set time and function and this time my function is going to method is going to carry out the function

41
00:02:44.090 --> 00:02:45.770
and what is the function going to do?

42
00:02:46.100 --> 00:02:56.450
The function after exactly 1000 milliseconds is going to either, say, resolve and passan success and

43
00:02:56.450 --> 00:03:02.590
log it to the console or the function is going to say a reject in person.

44
00:03:02.960 --> 00:03:05.120
Who would see?

45
00:03:06.240 --> 00:03:11.450
All right, so first off, I'm just going to comment about the reject part now, the promises created,

46
00:03:11.880 --> 00:03:14.750
but the thing is that we have not come.

47
00:03:15.060 --> 00:03:18.110
We have not we have not called this my first promise function.

48
00:03:18.480 --> 00:03:21.120
So what I'm going to do is I'm going to call it down here.

49
00:03:21.390 --> 00:03:24.780
And whatever you call that function, you call it like this.

50
00:03:25.200 --> 00:03:29.910
But instead of doing that, we are going to remove the parentheses and we are going to say that then.

51
00:03:31.640 --> 00:03:38.280
All right, now here, it says, attaches callbacks for the resolution and a rejection of the promise.

52
00:03:38.720 --> 00:03:41.120
So this is inside this.

53
00:03:41.120 --> 00:03:43.910
We are going to pass in a callback function.

54
00:03:44.610 --> 00:03:45.020
All right.

55
00:03:45.170 --> 00:03:50.870
Or actually, we're going to attach a callback function to this promise, which is going to run when

56
00:03:50.870 --> 00:03:55.760
the promise is resolved, meaning it's successful or the promise is rejected.

57
00:03:55.760 --> 00:03:56.660
Meaning works.

58
00:03:57.500 --> 00:03:57.920
All right.

59
00:03:57.920 --> 00:04:00.240
So let's see.

60
00:04:00.740 --> 00:04:06.560
So what I'm going to do is we are going to first resolve the promise and then we are going to reject

61
00:04:06.560 --> 00:04:07.160
the promise.

62
00:04:08.870 --> 00:04:13.140
All right, so here it says the callback to execute when the promise is resolved.

63
00:04:13.520 --> 00:04:14.920
So what do I want to do?

64
00:04:14.930 --> 00:04:17.040
I want to grab our six.

65
00:04:17.060 --> 00:04:24.170
I want to create a a parameter of success message and I want to print it.

66
00:04:25.340 --> 00:04:32.990
To the concerts, I'm going to say console does log, print white, print our success message, success

67
00:04:32.990 --> 00:04:33.710
message.

68
00:04:35.740 --> 00:04:37.120
Success.

69
00:04:37.930 --> 00:04:39.120
Come on, why can't I?

70
00:04:39.160 --> 00:04:41.310
Oh, because I misspelled it there.

71
00:04:42.340 --> 00:04:45.400
Come on, buddy, it's a success story.

72
00:04:46.300 --> 00:04:47.330
All right, so now.

73
00:04:47.350 --> 00:04:51.880
So this is when the promise, this part, this callback is when the promise is resolved.

74
00:04:52.210 --> 00:04:54.590
What if the promise is rejected?

75
00:04:54.820 --> 00:05:00.550
So after this call back, we are going to toss in one comma and then we are going to create the other

76
00:05:00.550 --> 00:05:01.110
function.

77
00:05:01.450 --> 00:05:01.790
Right.

78
00:05:02.080 --> 00:05:06.430
So I'm not going to hit enter the prettier is going to take care of that.

79
00:05:06.430 --> 00:05:11.670
So I'm just going to say error MSJ and when the error happens, what do I want to do?

80
00:05:12.010 --> 00:05:16.150
I want to log to the console, that error message.

81
00:05:17.010 --> 00:05:17.320
Right.

82
00:05:17.350 --> 00:05:18.070
I'm going to save it.

83
00:05:18.080 --> 00:05:18.460
So.

84
00:05:20.100 --> 00:05:23.610
Have I opened it now we get success, of course, after one second.

85
00:05:23.670 --> 00:05:26.270
I shouldn't have saved it because I want to explain it.

86
00:05:26.550 --> 00:05:27.660
So now this.

87
00:05:27.900 --> 00:05:29.840
We have created our promise.

88
00:05:29.880 --> 00:05:31.170
This is our new promise.

89
00:05:31.410 --> 00:05:34.890
We whenever you create promise, you say new promise.

90
00:05:34.920 --> 00:05:41.520
So either you return that new promise inside a function or you can create it as a function expression

91
00:05:41.520 --> 00:05:41.890
as well.

92
00:05:43.080 --> 00:05:48.990
And this new promise is going to run the Satima function in this a time out function.

93
00:05:49.140 --> 00:05:50.340
This is just a timer.

94
00:05:50.640 --> 00:05:54.760
It means that it is going to run a specific code after one second.

95
00:05:55.230 --> 00:06:00.510
So after one second, we going to resolve the promise, meaning that the promise is successful.

96
00:06:00.660 --> 00:06:00.930
Right.

97
00:06:01.320 --> 00:06:06.270
And we can also go ahead and comment this one out and come this one and the project.

98
00:06:06.280 --> 00:06:11.920
So after one second, we want to reject that promise, meaning that there has been some error.

99
00:06:12.240 --> 00:06:18.350
So if the promise is success, success, and if I save it, we in here we can see success.

100
00:06:18.960 --> 00:06:20.630
But what if the promises reject?

101
00:06:20.640 --> 00:06:21.720
What do we get then?

102
00:06:22.050 --> 00:06:23.600
We should get this right.

103
00:06:24.450 --> 00:06:27.170
So if I save it, we get what's right.

104
00:06:27.330 --> 00:06:33.600
The reason for that is we have created these resolves resolve and rejected functions.

105
00:06:33.930 --> 00:06:39.870
We have called them here, but we have never defined these functions.

106
00:06:39.870 --> 00:06:43.410
Were the function definition for this resolve and this reject?

107
00:06:43.770 --> 00:06:44.500
Here they are.

108
00:06:44.760 --> 00:06:51.630
So this part that I have just highlighted, this is the function definition for resolve and this part

109
00:06:51.630 --> 00:06:54.470
that I've highlighted, this is the function definition for upsy.

110
00:06:54.750 --> 00:07:00.540
That's why Woodsey is actually an argument to this error message parameter.

111
00:07:00.780 --> 00:07:05.150
That's why when you say council log error message, what is the value of the error message?

112
00:07:05.190 --> 00:07:06.910
It's what's right.

113
00:07:07.170 --> 00:07:13.410
So this is how we can this is well, actually, how you use promise is very, very simple example,

114
00:07:13.710 --> 00:07:15.750
but it shows you how promises work.

115
00:07:16.180 --> 00:07:16.560
Right.

116
00:07:16.560 --> 00:07:19.710
And how you resolve or either reject a case.

117
00:07:20.040 --> 00:07:25.140
There is another way of calling that promise, that promise function.

118
00:07:25.140 --> 00:07:25.500
Right.

119
00:07:25.650 --> 00:07:35.040
And that and instead of doing this comma and then the error this the reject function definition, we

120
00:07:35.040 --> 00:07:41.730
can also use the dot catch method, which is a better syntax than this one, because this is let's say

121
00:07:41.730 --> 00:07:47.460
you have multiple promises, then this is going to get really messy and it's going to be hard to read

122
00:07:47.820 --> 00:07:53.200
when this results, function ends and where does the reject function starts.

123
00:07:53.370 --> 00:08:00.950
So instead of writing this, there is actually another syntax and I'm just going to say that then plus

124
00:08:00.960 --> 00:08:02.180
dot catch.

125
00:08:03.000 --> 00:08:03.450
All right.

126
00:08:03.480 --> 00:08:09.300
So in here, what we're going to do is we're going to grab our my first promise, we are going to call

127
00:08:09.300 --> 00:08:15.090
it and we're going to say that now this part is the same inside the dot then.

128
00:08:15.090 --> 00:08:20.820
And we are going to say success MSJ and then we are going to run this function.

129
00:08:21.390 --> 00:08:26.310
This function is simply going to log to the console, the success message.

130
00:08:27.310 --> 00:08:29.150
Success message.

131
00:08:29.710 --> 00:08:36.610
Now, what what about the reject one now instead of, like providing a comma and writing the function

132
00:08:36.610 --> 00:08:42.179
there after this then is completed, where is this then done, then completed?

133
00:08:43.299 --> 00:08:47.120
So this parentheses starts there and this one ends here.

134
00:08:47.380 --> 00:08:49.960
So at the end, I'm just going to say that catch.

135
00:08:50.530 --> 00:08:58.570
So this dot catch is going to automatically catch the callback to execute when the promise is rejected.

136
00:08:58.600 --> 00:09:00.430
So the Intellisense says it.

137
00:09:00.430 --> 00:09:01.110
All right.

138
00:09:01.120 --> 00:09:02.940
I don't need to explain it.

139
00:09:03.790 --> 00:09:10.060
So in here we are going to say error messages and we are going to run a function.

140
00:09:10.690 --> 00:09:15.160
This function is going to log to the console, our error message.

141
00:09:15.160 --> 00:09:21.160
And when I say that this is the good thing about code formatter, this prettier than you can see that

142
00:09:21.160 --> 00:09:25.000
this dot then is on a different line, very, very readable.

143
00:09:25.270 --> 00:09:29.100
This dot catch is on a different line, very, very readable.

144
00:09:29.110 --> 00:09:35.860
And when I close that just comment in our resolve and when I serve it after one second, we see success

145
00:09:36.460 --> 00:09:38.640
and comments are not common.

146
00:09:38.710 --> 00:09:39.570
This one in after.

147
00:09:39.580 --> 00:09:44.050
Once again, we see what see and this is actually a better syntax.

148
00:09:44.500 --> 00:09:46.240
I'm not going to be using this anymore.

149
00:09:46.330 --> 00:09:48.870
This part this is you could do this.

150
00:09:48.880 --> 00:09:49.690
It doesn't matter.

151
00:09:50.470 --> 00:09:52.960
Both of them are available by this promise.

152
00:09:53.590 --> 00:09:55.060
It's just a preference.

153
00:09:55.060 --> 00:10:00.730
But I think for teaching purposes, this is better because this is easier for you to understand and

154
00:10:00.730 --> 00:10:02.800
easier for me to maintain.

155
00:10:03.970 --> 00:10:05.110
That's it for this lecture.

156
00:10:05.140 --> 00:10:06.670
See you guys in the next one.

