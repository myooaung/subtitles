WEBVTT
1
00:00:02.190 --> 00:00:09.420
Hi, everyone, in this year, we are going to talk about the dynamic global variables and the strict

2
00:00:09.420 --> 00:00:09.870
marked.

3
00:00:11.580 --> 00:00:19.920
All right, so before starting this lecture, I can see there is a typo inside the name, there is a

4
00:00:19.920 --> 00:00:26.750
missing dynamic global variable and there is one missing here very long.

5
00:00:27.090 --> 00:00:28.710
That's why this happened.

6
00:00:29.130 --> 00:00:32.450
So let's add it right here.

7
00:00:32.460 --> 00:00:33.170
Let's save it.

8
00:00:33.570 --> 00:00:35.670
So we do have access to it.

9
00:00:36.000 --> 00:00:40.470
Let's open up a life server and now we are going to go to inspect.

10
00:00:41.040 --> 00:00:41.690
All right.

11
00:00:41.700 --> 00:00:44.160
So what do we have here?

12
00:00:44.340 --> 00:00:47.010
So we have, again, a formal declaration here.

13
00:00:47.020 --> 00:00:48.960
Now we have a code snippet here.

14
00:00:49.350 --> 00:00:55.110
And and you can see that I have commented our line number two, line number six, line number 10 to

15
00:00:55.110 --> 00:00:57.750
12 because we are going to go through them.

16
00:00:57.750 --> 00:00:58.100
All right.

17
00:00:58.350 --> 00:01:03.960
Now, what I want to say is there is a difference here and there and there are differences in line number

18
00:01:03.960 --> 00:01:10.440
four and line number five, because this different difference is related to dynamic global variables.

19
00:01:11.910 --> 00:01:14.010
There is another mistake here as well.

20
00:01:14.610 --> 00:01:15.990
It doesn't matter.

21
00:01:15.990 --> 00:01:16.890
I'm not going to fix it.

22
00:01:17.010 --> 00:01:25.920
You can fix it yourselves because I should dive into this lecture and why you should, like, generally

23
00:01:25.920 --> 00:01:28.440
use strict mode inside your applications.

24
00:01:28.920 --> 00:01:29.300
All right.

25
00:01:29.460 --> 00:01:33.120
So let's go ahead and let's talk about this.

26
00:01:33.120 --> 00:01:34.050
How so?

27
00:01:34.050 --> 00:01:35.160
There are two stages.

28
00:01:35.370 --> 00:01:37.380
We know that there are two stages.

29
00:01:37.380 --> 00:01:42.150
The first stages, the completion stage inside of which we make the execution plan.

30
00:01:42.330 --> 00:01:50.070
And inside the one, the second stage is the execution of the code inside which we pass into the VM

31
00:01:50.070 --> 00:01:55.440
or to the JavaScript engine, the execution plan, so that engine can execute this code.

32
00:01:57.090 --> 00:02:03.210
All right, so what I'm going to do is I'm going to go smoothly over the compilation stage and the execution

33
00:02:03.210 --> 00:02:09.900
stage, and then we are going to discuss what dynamic global variables or auto globalists are, what

34
00:02:09.900 --> 00:02:16.200
is what is good about them, what is bad about them, OK, and what what they are, what there even

35
00:02:16.200 --> 00:02:16.440
are.

36
00:02:16.980 --> 00:02:24.660
So at the end, the compilation stage, we are interested in finding formal declarations and also setting

37
00:02:24.660 --> 00:02:27.510
values to them and the execution stage.

38
00:02:27.510 --> 00:02:30.720
We grab those formal declarations and we go from there.

39
00:02:30.720 --> 00:02:38.160
We grab the value of these formal declarations and we store them inside like and we allocate a specific

40
00:02:38.160 --> 00:02:39.730
place in memory to them.

41
00:02:40.500 --> 00:02:40.830
All right.

42
00:02:40.990 --> 00:02:48.930
So on line one, the compiler is is going to ask the scope manager, have you heard of any variable

43
00:02:48.930 --> 00:02:49.740
called novel?

44
00:02:49.920 --> 00:02:56.160
Because this is the first instance of this variable, then the scope manager is going to say no, but

45
00:02:56.340 --> 00:03:01.830
is going to give you give the compiler a scope and that is the global scope.

46
00:03:01.840 --> 00:03:04.890
So this is going to be present inside the global scale.

47
00:03:05.340 --> 00:03:11.340
Then we are going to come to line number three, which is a formal declaration, a function declaration.

48
00:03:11.790 --> 00:03:14.640
And the identifier is other book.

49
00:03:14.850 --> 00:03:20.580
The compiler is going to ask the scope manager, have you heard of this?

50
00:03:20.730 --> 00:03:22.830
Have you heard about this or of this?

51
00:03:23.070 --> 00:03:30.150
And the scope manager is going to say no, but is going to give out the box inside, which we are going

52
00:03:30.150 --> 00:03:31.800
to put this book.

53
00:03:31.800 --> 00:03:35.300
And that box is still the global scope, right?

54
00:03:35.310 --> 00:03:36.720
That is the global box.

55
00:03:37.410 --> 00:03:43.200
Inside this function, we have a novel, but this is not a formal declaration because we don't have

56
00:03:43.200 --> 00:03:51.120
any, like, declarative keywords like Varlet and CONSED and we come to line number five, the same

57
00:03:51.120 --> 00:03:51.920
cases here.

58
00:03:51.960 --> 00:03:53.760
This is not a formal declaration.

59
00:03:54.060 --> 00:04:01.320
Then we are going to come because compiler is interested in formal declarations and finding the assignment

60
00:04:01.320 --> 00:04:03.720
expressions for those formal declarations.

61
00:04:04.110 --> 00:04:08.040
Line number six is a formal declaration, but it is commented out.

62
00:04:08.050 --> 00:04:10.950
So this code is a common, this is a common.

63
00:04:10.950 --> 00:04:11.880
This is not a code.

64
00:04:11.880 --> 00:04:12.660
So it doesn't run.

65
00:04:13.410 --> 00:04:14.820
It is not compiled.

66
00:04:15.450 --> 00:04:18.029
Consider log is not a formal declaration.

67
00:04:18.029 --> 00:04:22.590
So we go out of this function, we go to and line number ten to 12.

68
00:04:22.590 --> 00:04:24.680
We don't have any formal declarations.

69
00:04:24.990 --> 00:04:27.540
So now the plan is completed.

70
00:04:27.960 --> 00:04:29.220
What is inside the plan?

71
00:04:29.220 --> 00:04:36.570
Inside the plan, we have a variable and I'd add an identifier called novel, which is present inside

72
00:04:36.570 --> 00:04:37.410
the global scope.

73
00:04:37.740 --> 00:04:44.340
And the other thing that we have inside the plan is we have another function declaration or another

74
00:04:44.340 --> 00:04:50.450
formal declaration by the name of another book, and that is present inside the global scope as well.

75
00:04:50.550 --> 00:04:54.510
So we have our identifiers and we have our scopes.

76
00:04:54.840 --> 00:04:58.530
Now we hand over this plan to the execution engine.

77
00:04:58.560 --> 00:05:06.840
The execution engine is going to again get in contact with the scope manager, not the compiler, the

78
00:05:06.840 --> 00:05:07.650
scope manager.

79
00:05:07.650 --> 00:05:15.660
And it is going to take a look at the role that these identifiers they play.

80
00:05:15.960 --> 00:05:20.910
So their role is either going to be a target reference or a source reference.

81
00:05:21.210 --> 00:05:27.180
So if there are a source, if there are targeted reference, their value is going to be stored.

82
00:05:27.180 --> 00:05:29.880
If there is a source reference, they're going to be called.

83
00:05:30.120 --> 00:05:36.450
And then again, their value is going to be like their value is going to be are going to find their

84
00:05:36.450 --> 00:05:38.000
value and we are going to store that.

85
00:05:38.550 --> 00:05:42.810
So if we when we come here, we can see that this is a Targo reference.

86
00:05:42.810 --> 00:05:47.280
So we grabbed this value and restore it somewhere so we can access it later.

87
00:05:48.540 --> 00:05:51.390
This is what the execution engine is going to do.

88
00:05:51.660 --> 00:05:53.400
Then it is going to come in here.

89
00:05:53.400 --> 00:05:58.500
But because this is a function and the function must be called, it is going to skip over.

90
00:05:58.710 --> 00:06:03.300
The function has been compiled, but the function requires calling.

91
00:06:03.510 --> 00:06:09.270
So in here we have a source reference and this other book is going to call this function.

92
00:06:09.270 --> 00:06:13.370
But this parentheses is what is going to execute this function.

93
00:06:13.650 --> 00:06:18.840
So because of this parentheses, we are going to come to line number all the a line number four and

94
00:06:18.840 --> 00:06:20.490
we are going to enter this function.

95
00:06:20.850 --> 00:06:25.860
So we are going to jump over this function to where the function is called and we are going to come

96
00:06:25.860 --> 00:06:26.900
back to function.

97
00:06:26.940 --> 00:06:27.450
Right.

98
00:06:28.440 --> 00:06:32.130
So now this other book is in the source reference.

99
00:06:32.760 --> 00:06:34.230
How how do we get the source?

100
00:06:34.230 --> 00:06:36.960
We go to back to the function inside the function.

101
00:06:36.960 --> 00:06:44.730
We have a it is not a formal declaration, but we see that we have it and an identifier by the name

102
00:06:44.730 --> 00:06:47.360
of novel and there is a value to it.

103
00:06:47.640 --> 00:06:49.260
So we need to store this value.

104
00:06:49.260 --> 00:06:49.650
Right.

105
00:06:50.010 --> 00:06:51.810
We need to grab it and we need to store it.

106
00:06:52.140 --> 00:06:54.090
But this is not a formal declaration.

107
00:06:54.090 --> 00:06:55.800
How do we store this?

108
00:06:56.380 --> 00:06:58.540
This is a target reference, right?

109
00:06:59.440 --> 00:07:03.010
So we are going to ask the scope of this function.

110
00:07:03.040 --> 00:07:04.550
Have you heard of this novel?

111
00:07:04.870 --> 00:07:08.390
The scope is going to say no, the function scope.

112
00:07:08.410 --> 00:07:14.680
We know that this novel is inside this function, but the function scope, we never assigned any scope

113
00:07:14.920 --> 00:07:15.490
to this.

114
00:07:15.910 --> 00:07:18.720
So we know we don't know what the scope of this is.

115
00:07:18.940 --> 00:07:26.960
So it is this novel is not like it is initialized or like formally declared inside this function.

116
00:07:27.550 --> 00:07:35.530
So whenever something some identifier is not formally declared inside a scope or in this case, inside

117
00:07:35.530 --> 00:07:38.530
this functions go, it is going to go one level up.

118
00:07:39.190 --> 00:07:41.590
And what it is going to go one level up.

119
00:07:42.880 --> 00:07:44.890
It is going to come to the global scope.

120
00:07:44.890 --> 00:07:51.820
The execution engine is going to ask the global scope, like, what have you like what is this novel,

121
00:07:52.000 --> 00:07:52.990
the global scope?

122
00:07:53.350 --> 00:08:00.250
Well, we would like the global scope for the global scope to say no, because this novel doesn't have

123
00:08:00.250 --> 00:08:02.110
any let consider far.

124
00:08:02.320 --> 00:08:07.000
But the global scope is going to say, yeah, I know what this novel is.

125
00:08:07.480 --> 00:08:14.650
It is a formal declaration and I assign it to a scope right now.

126
00:08:14.920 --> 00:08:22.420
Now, keep in mind, whenever we are working with formal declarations, they are assigned to their scopes

127
00:08:22.420 --> 00:08:23.710
at compile time.

128
00:08:24.400 --> 00:08:30.670
But this novel, this was not assigned to its scope at compile time.

129
00:08:30.670 --> 00:08:37.330
It was assigned to its scope at runtime because at runtime this novel came up OK.

130
00:08:37.600 --> 00:08:43.360
Well, actually, this is not accurate because we do have a novel declaration here.

131
00:08:43.539 --> 00:08:50.260
When this novel comes up, the value of a thousand splendid suns is going to change to the value of

132
00:08:50.260 --> 00:08:52.420
a map and the mountains echoed.

133
00:08:52.780 --> 00:09:00.250
That's why if I go ahead and if I comment in this novel, we are going to see a thousand splendid suns.

134
00:09:00.880 --> 00:09:07.930
But if I comment in the novel, after the function is executed, we are going to see that the novel

135
00:09:07.930 --> 00:09:11.770
now says and the mountains echoed because when this.

136
00:09:12.800 --> 00:09:20.240
Identifier because JavaScript is a lexically scoped language when this comes up, it is going to because

137
00:09:20.240 --> 00:09:28.640
this has been in, Dekel declared, not also initialized, of course, but when this comes here, it's

138
00:09:28.640 --> 00:09:34.010
when it comes here, this value for the novel is going to be replaced by this one.

139
00:09:34.010 --> 00:09:34.910
We know this.

140
00:09:35.150 --> 00:09:39.920
OK, this is going to be replaced by that, that this is not something new.

141
00:09:40.580 --> 00:09:43.010
But the important part is this topic.

142
00:09:43.340 --> 00:09:50.750
And this novel is not a dynamic global variable because the identifier was created here.

143
00:09:50.900 --> 00:09:52.810
The identifier is created there.

144
00:09:53.120 --> 00:09:54.800
So we didn't do anything new.

145
00:09:55.010 --> 00:10:02.630
It moved one level up, OK, it moved up, but it did not convert to a dynamic global variable when

146
00:10:02.630 --> 00:10:09.530
the topic, it moves one level up because there is no topic declared in the global scope.

147
00:10:10.130 --> 00:10:14.600
We should see an error rate because this is not a formal declaration.

148
00:10:15.590 --> 00:10:22.520
And we said that novel is not a formal declaration as well, but a novel is not a formal declaration

149
00:10:22.520 --> 00:10:28.130
inside this function scope, but it is a formal declaration inside the global scope.

150
00:10:28.430 --> 00:10:30.460
That's why we see the value for it.

151
00:10:30.800 --> 00:10:36.440
So this when it comes inside the global scope, it is a formal declaration, right?

152
00:10:36.650 --> 00:10:41.120
Because we have formally declared war novel equals this value.

153
00:10:42.020 --> 00:10:44.210
We have just changed a value that set.

154
00:10:44.630 --> 00:10:53.060
But when the topic comes up like this, we don't see any Varin here or any letton here, but still we

155
00:10:53.060 --> 00:10:54.770
are not going to see any error.

156
00:10:54.800 --> 00:11:03.620
The reason for that is at the early days, in the early days when when JavaScript was created and because

157
00:11:03.830 --> 00:11:05.840
like JavaScript was difficult.

158
00:11:07.660 --> 00:11:16.060
All right, they created, like the idea of Auto Global's and whenever you just go ahead and write an

159
00:11:16.060 --> 00:11:20.170
identifier and assign a value to it, it is not going to throw an error.

160
00:11:20.410 --> 00:11:28.030
OK, and it is going to assign a four letter const the the JavaScript is going to assign itself.

161
00:11:28.300 --> 00:11:33.280
But this this variable, this identifier doesn't have a scope.

162
00:11:33.490 --> 00:11:40.420
And when it comes up at the execution time, this scope is going to is going to be assigned to it as

163
00:11:40.420 --> 00:11:46.660
the global scope and the difference between this topic and this novel, as I hope I'm not getting you

164
00:11:46.660 --> 00:11:53.220
confused, is that when the novel came up, we did have a formal declaration for the novel.

165
00:11:53.230 --> 00:11:54.110
It is right here.

166
00:11:54.580 --> 00:11:59.110
So this is not an auto global.

167
00:11:59.350 --> 00:12:04.090
But when this topic came up, it became an auto global.

168
00:12:04.090 --> 00:12:05.530
What is it now to global?

169
00:12:05.710 --> 00:12:12.930
Ainata Global is any identifier whose scope is determined at runtime, not at compile time.

170
00:12:13.360 --> 00:12:19.900
So all these scopes we talked about how at compile time we want to know what our identifiers are and

171
00:12:19.900 --> 00:12:25.570
what their scope is, but we didn't know what this identifier is and what the scope is.

172
00:12:25.840 --> 00:12:32.560
We knew what this identifier is and what the scope is because it has been defined here and we know we

173
00:12:32.560 --> 00:12:34.900
knew it would travel one level up.

174
00:12:35.770 --> 00:12:37.990
So we knew what the scope for this was.

175
00:12:37.990 --> 00:12:43.960
The scope for this from the start was global scope, but we didn't know what the scope for the topic

176
00:12:43.960 --> 00:12:44.280
was.

177
00:12:44.560 --> 00:12:49.780
We knew that it would travel one level up, but we didn't know what the scope was.

178
00:12:49.780 --> 00:12:51.670
And the scope is the global scope.

179
00:12:52.270 --> 00:12:52.630
Right.

180
00:12:52.870 --> 00:12:55.740
And this scope is determined at runtime.

181
00:12:56.650 --> 00:13:03.000
This is the problem with not formally declaring your your variables.

182
00:13:03.700 --> 00:13:06.580
Now, you're not going to see, like, much of a difference.

183
00:13:06.590 --> 00:13:09.120
This is a bad practice when you do it this way.

184
00:13:09.160 --> 00:13:12.580
This is a really, really bad practice among the community.

185
00:13:13.060 --> 00:13:17.950
But the problem is like the biggest there are there is a lot of differences, but the biggest one is

186
00:13:17.950 --> 00:13:19.080
the performance issue.

187
00:13:19.570 --> 00:13:20.050
All right.

188
00:13:20.230 --> 00:13:29.970
And as a business practice, never under any circumstance like create or to globalize like this.

189
00:13:30.640 --> 00:13:34.440
So how do we know that this topic is actually in the global scope?

190
00:13:34.780 --> 00:13:39.160
So what I'm going to do is I'm just going to comment on this council log because this council log is

191
00:13:39.160 --> 00:13:40.860
actually in the global scope as well.

192
00:13:41.440 --> 00:13:46.030
So if this topic is not inside the global scope, we should see an error.

193
00:13:46.030 --> 00:13:48.810
When I say that, we can see that it's says family.

194
00:13:49.510 --> 00:13:52.210
So this council log it access.

195
00:13:52.240 --> 00:13:57.550
This is in the source position and it needs to retrieve the value of this novel.

196
00:13:57.820 --> 00:14:04.720
So the value of this novel, sorry, sorry, the value of this topic was not retrieved from inside.

197
00:14:04.720 --> 00:14:08.560
This function is it was retrieved like this.

198
00:14:09.280 --> 00:14:18.760
OK, so this execution engine executed, executed, executed this code as though this topic is inside

199
00:14:18.760 --> 00:14:26.680
the global scope because JavaScript is a lexically scoped language, and whenever we cannot find the

200
00:14:26.680 --> 00:14:34.930
reference for any identifier, we go one level up, as with this console lock.

201
00:14:34.960 --> 00:14:38.230
So we go one level of the console log goes one level up.

202
00:14:38.380 --> 00:14:41.050
And there we either find it or we don't.

203
00:14:41.050 --> 00:14:43.450
If we find it, we just log it.

204
00:14:43.480 --> 00:14:45.870
Or if we don't find it, we are going to throw an error.

205
00:14:46.510 --> 00:14:46.870
Right.

206
00:14:47.470 --> 00:14:49.570
So I hope this is clear as well.

207
00:14:49.600 --> 00:14:53.020
So this was another coroner case, but what about this?

208
00:14:53.020 --> 00:14:59.010
Let we know we do have a letter here and this is a formal declaration.

209
00:14:59.020 --> 00:14:59.400
Right.

210
00:14:59.650 --> 00:15:06.910
So the scope of this, because let they are block scopes, OK, their scope is different.

211
00:15:07.240 --> 00:15:09.660
Alafia six, we have blocks.

212
00:15:09.670 --> 00:15:09.860
So.

213
00:15:09.880 --> 00:15:12.970
Well, ESX is not the correct terminology.

214
00:15:13.180 --> 00:15:17.290
The correct terminology is E 2015 as a first 2015.

215
00:15:17.290 --> 00:15:19.380
We have block scopes as well.

216
00:15:19.600 --> 00:15:21.880
So that creates a block scope.

217
00:15:22.600 --> 00:15:29.440
OK, so whenever we have this, does this travel one level up as well.

218
00:15:30.270 --> 00:15:38.170
No lead does not travel let is limited to its scope and cost the limited to their scope.

219
00:15:38.370 --> 00:15:45.690
So whenever I counsel log no here, we are going to get a reference here because we could not reference

220
00:15:45.990 --> 00:15:48.540
the value for this identifier.

221
00:15:48.750 --> 00:15:50.640
What is the value for this number?

222
00:15:50.880 --> 00:15:56.820
The execution engine doesn't know what the value is because inside the global scope, we don't have

223
00:15:56.820 --> 00:16:03.570
any formal declaration inside which the identifier has a name call number.

224
00:16:03.750 --> 00:16:05.990
So it says no is not defined.

225
00:16:06.000 --> 00:16:08.310
We have not defined it inside the global scope.

226
00:16:08.610 --> 00:16:11.430
Of course, inside this function scope, we do have it.

227
00:16:11.760 --> 00:16:17.440
But because this is limited to this scope, it is not going to travel one level up.

228
00:16:17.460 --> 00:16:19.620
That's why we cannot access it here.

229
00:16:20.190 --> 00:16:20.610
Right.

230
00:16:21.060 --> 00:16:27.670
So now this is this topic is an error, right.

231
00:16:28.230 --> 00:16:35.090
So how do we how can we make sure that in our applications we avoid creating articles?

232
00:16:35.370 --> 00:16:41.430
There is another feature of JavaScript, which is by default off, and that is the strict might.

233
00:16:41.700 --> 00:16:48.270
Whenever you go ahead to the top of your application, just write this up in quotes and write you strict.

234
00:16:48.450 --> 00:16:54.900
It means that now we are switching to the strict mode and we see we should see some errors being thrown

235
00:16:54.900 --> 00:16:55.440
around.

236
00:16:55.710 --> 00:17:03.230
And now in here we see that topic is not defined at other book and at here.

237
00:17:03.780 --> 00:17:07.680
So it is not defined at other it is not defined in here online.

238
00:17:07.680 --> 00:17:13.319
No sex and it is not also defined on this other book.

239
00:17:13.470 --> 00:17:15.540
And we cannot call it in here as well.

240
00:17:16.290 --> 00:17:22.170
OK, on line number 10, this it did not even come to here, OK?

241
00:17:22.200 --> 00:17:24.170
It couldn't call it there.

242
00:17:24.480 --> 00:17:26.730
So I'm just going to go ahead and reload the page.

243
00:17:27.960 --> 00:17:35.280
We can see that we have this this this has been printed to the to the screen because we are in the strict

244
00:17:35.280 --> 00:17:35.670
mode.

245
00:17:35.970 --> 00:17:37.070
But what about this?

246
00:17:37.080 --> 00:17:45.480
So if I were to grab this and put it down here, we can see that because there is an error here, nothing

247
00:17:45.480 --> 00:17:50.100
after that is as has been executed.

248
00:17:50.370 --> 00:17:53.790
So this error is actually in the compilation stage.

249
00:17:54.090 --> 00:17:55.560
In the compilation stage.

250
00:17:55.560 --> 00:18:00.540
We don't know what this topic belongs to, what we don't know what it belongs to.

251
00:18:00.870 --> 00:18:10.170
We know that this novel belongs to this novel right here, even though this novel is beneath dysfunction,

252
00:18:10.170 --> 00:18:17.700
dysfunction, dysfunction called because function call is on line number nine and this var is on line

253
00:18:17.700 --> 00:18:18.660
number thirteen.

254
00:18:18.840 --> 00:18:24.780
But when this comes out of here, it is going to be assigned to the value of novel right here.

255
00:18:25.080 --> 00:18:28.140
That's why the topic is not defined.

256
00:18:28.140 --> 00:18:34.530
But the novel is actually defined right here, even though it's here because JavaScript doesn't run

257
00:18:34.530 --> 00:18:36.900
it line by line, it compiles it first.

258
00:18:37.260 --> 00:18:45.500
We grab all the identifiers, we grab all the scopes, and then we present it to the execution engine.

259
00:18:45.810 --> 00:18:47.580
We don't know what the scope for this is.

260
00:18:47.580 --> 00:18:50.820
That's why the execution engine runs a reference letter.

261
00:18:51.120 --> 00:18:55.950
It means that we don't know what this topic what is the reference of this topic?

262
00:18:56.610 --> 00:19:01.530
We don't know whether or not this is a target reference or this is a source reference.

263
00:19:01.860 --> 00:19:05.880
So this is a good practice to use struct inside your applications.

264
00:19:06.300 --> 00:19:16.620
And in case you're wondering the strict mode, if if your applications are going to crash or if you

265
00:19:16.620 --> 00:19:24.170
will be able to to use any specific feature of JavaScript when the stroke mode is on or not.

266
00:19:24.300 --> 00:19:27.270
No, there is not actually any real thing like that.

267
00:19:27.660 --> 00:19:28.200
So.

268
00:19:30.000 --> 00:19:34.500
Just keep in mind that in er six classes and modules, we are going to.

269
00:19:34.860 --> 00:19:40.500
We are going to talk about Iesus six classes, the strict mode is assumed, so you do not need to turn

270
00:19:40.500 --> 00:19:40.950
it on.

271
00:19:40.950 --> 00:19:41.390
It is.

272
00:19:41.430 --> 00:19:48.360
It is also on in JavaScript transpires such as babble, OK, and other tools like that.

273
00:19:48.750 --> 00:19:52.620
But in your regular JavaScript the strike mode is off.

274
00:19:52.950 --> 00:20:00.510
And that that is like one of the first things that JavaScript developers like the creators of JavaScript

275
00:20:00.510 --> 00:20:01.560
decided on.

276
00:20:01.860 --> 00:20:03.060
So you can turn it on.

277
00:20:03.060 --> 00:20:09.570
But if you're using JavaScript classes, district mode is assumes you don't do not need to turn it on.

278
00:20:10.140 --> 00:20:11.820
This is it for this lecture.

279
00:20:11.830 --> 00:20:18.390
Now we know how we know concretely how JavaScript runs and what is the strict mode, what are different

280
00:20:18.390 --> 00:20:18.900
scopes?

281
00:20:19.200 --> 00:20:22.800
How are the identifiers assigned to different scopes?

282
00:20:23.070 --> 00:20:29.520
And what we are going to do in the next lecture is we are going to talk about the nested scope and our

283
00:20:29.520 --> 00:20:33.510
discussion of this chapter is going to come to an end.

284
00:20:33.750 --> 00:20:35.550
See you guys in the next lecture.

