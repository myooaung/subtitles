WEBVTT
1
00:00:01.330 --> 00:00:05.800
Hi, everyone, in this last year, we are going to talk about more Arae methods.

2
00:00:07.180 --> 00:00:12.550
All right, so the first method in this lecture that I want to talk about is the includes method, which

3
00:00:12.550 --> 00:00:14.540
is the seventh method, totally.

4
00:00:14.980 --> 00:00:20.410
So we are going to go ahead and create an array and I'm going to call it moods one.

5
00:00:21.160 --> 00:00:21.610
Right.

6
00:00:22.420 --> 00:00:26.080
And the items inside this array are going to be happy.

7
00:00:27.670 --> 00:00:32.409
And then we have set and then we have satisfied.

8
00:00:32.840 --> 00:00:33.190
Right.

9
00:00:33.400 --> 00:00:36.880
Let's log this array to the console.

10
00:00:40.590 --> 00:00:46.150
And we are going to say move to one, let's save it, so we have happy, sad and satisfied.

11
00:00:46.410 --> 00:00:55.050
So how can we check if something or an item exists within the right and this method works in the same

12
00:00:55.050 --> 00:00:56.710
way as with strings.

13
00:00:57.000 --> 00:01:02.110
So what I'm going to do is I'm just going to say that includes what do we want to look for?

14
00:01:02.130 --> 00:01:03.860
We want to look for happy.

15
00:01:04.560 --> 00:01:08.880
So we are going to put it inside a quotation and this returns.

16
00:01:08.880 --> 00:01:09.140
True.

17
00:01:09.300 --> 00:01:14.690
So the result of this includes method for a raise is going to be a boolean.

18
00:01:14.760 --> 00:01:15.090
All right.

19
00:01:15.270 --> 00:01:21.570
So we can go ahead and do one more, one more and let's call it, I don't know, like.

20
00:01:23.040 --> 00:01:25.380
Uh, frustrated.

21
00:01:26.880 --> 00:01:32.050
And it's in return is false because we don't have frustrated inside this array.

22
00:01:32.280 --> 00:01:34.620
So this is how the includes method works.

23
00:01:34.770 --> 00:01:36.750
I'm not going to comment that out.

24
00:01:36.760 --> 00:01:37.650
I'm going to keep it there.

25
00:01:37.950 --> 00:01:42.600
The next method that I want to talk about is the concat method.

26
00:01:43.540 --> 00:01:49.270
All right, and it combines or merges two or more iRace together, right?

27
00:01:49.510 --> 00:01:52.080
So we are going to create another array as well.

28
00:01:52.090 --> 00:01:54.560
And I'm going to call it moods, too.

29
00:01:55.030 --> 00:01:55.500
All right.

30
00:01:55.990 --> 00:02:01.690
And this array is going to have frustrated inside of it as an item.

31
00:02:01.960 --> 00:02:05.020
Then we have uncertain.

32
00:02:05.500 --> 00:02:06.060
Right.

33
00:02:06.610 --> 00:02:09.160
And then we have relaxed.

34
00:02:10.780 --> 00:02:11.130
Right.

35
00:02:11.320 --> 00:02:14.480
So we have one array here and the other arrays here.

36
00:02:14.680 --> 00:02:19.140
Let's let's say we want to merge these two arrays together.

37
00:02:19.330 --> 00:02:21.710
So we are going to say cancel the log.

38
00:02:22.180 --> 00:02:28.180
First off, we are going to grab our first array and we are going to say that concat.

39
00:02:28.690 --> 00:02:31.130
What do we want to add to this array?

40
00:02:31.150 --> 00:02:32.710
What do we want to merge it with?

41
00:02:32.710 --> 00:02:35.440
We are going to grab our secondary moots, too.

42
00:02:35.590 --> 00:02:41.080
So we have happy, satisfied, As'ad, satisfied, frustrated, uncertain, relaxed.

43
00:02:41.650 --> 00:02:44.380
OK, so we can go the other way around as well.

44
00:02:44.710 --> 00:02:50.050
We want to grab our first moots array and we want to add it to this.

45
00:02:50.920 --> 00:02:54.940
And we grab this and we grab the first moots around.

46
00:02:54.940 --> 00:02:59.360
We added to the second one and when we save it, you guys can see that the order is reversed.

47
00:02:59.710 --> 00:03:02.200
This is mood one, then mood two.

48
00:03:02.500 --> 00:03:05.190
But this is mood to then mood one.

49
00:03:05.320 --> 00:03:06.910
So you can go either way.

50
00:03:08.110 --> 00:03:17.940
The next method that I want to talk about is going to be the the reverse method, and this method reverses

51
00:03:17.950 --> 00:03:18.670
and array.

52
00:03:18.760 --> 00:03:19.140
All right.

53
00:03:19.300 --> 00:03:23.990
So let's go ahead and let's consider log one of the arrays.

54
00:03:24.030 --> 00:03:25.690
Let's grab a mahmud's one.

55
00:03:26.260 --> 00:03:31.900
OK, so this is Muj one, and let's call the reverse method on it.

56
00:03:32.120 --> 00:03:32.710
Let's save it.

57
00:03:32.800 --> 00:03:36.520
And then you guys can see we have satisfied and then side then happy.

58
00:03:36.730 --> 00:03:38.530
This array has been reversed.

59
00:03:39.040 --> 00:03:39.410
Right.

60
00:03:39.910 --> 00:03:42.220
So this is the reverse method.

61
00:03:42.400 --> 00:03:50.550
The next and final method that I want to talk about is the join method join method.

62
00:03:51.310 --> 00:03:54.460
This converts the right to a string.

63
00:03:54.460 --> 00:03:57.240
This converts any right to a string.

64
00:03:57.370 --> 00:03:57.670
Right.

65
00:03:57.850 --> 00:04:02.740
So, for example, let's grab our second array, this moots to array.

66
00:04:02.950 --> 00:04:06.340
We are going to consider to the log so we can see our results.

67
00:04:06.940 --> 00:04:07.350
All right.

68
00:04:07.510 --> 00:04:12.670
So let's grab moods, too, and we are going to say dot join.

69
00:04:13.350 --> 00:04:20.470
OK, so first off, let's just call the DOT join and we we can see that this array has been converted

70
00:04:20.470 --> 00:04:23.350
into a string, into a string of words.

71
00:04:23.350 --> 00:04:23.720
Right.

72
00:04:23.890 --> 00:04:32.380
So when we don't provide it with any argument inside the joint array, what if what if I provided with

73
00:04:32.380 --> 00:04:34.600
just an empty string, that's it.

74
00:04:35.260 --> 00:04:37.150
And let's save it.

75
00:04:37.450 --> 00:04:43.840
And then we can see that the commas, they have been removed because when you provide it, when you

76
00:04:43.840 --> 00:04:48.850
don't provide anything, we are going to grab the we are going to have the entire I'm sorry, this is

77
00:04:48.850 --> 00:04:49.300
the array.

78
00:04:49.750 --> 00:04:54.970
But when we provided with an empty string, we have different items inside and array.

79
00:04:55.300 --> 00:05:01.670
And what is the character that combines those different items inside that array?

80
00:05:02.260 --> 00:05:03.310
It is the comma.

81
00:05:03.670 --> 00:05:10.720
And in here, what do we want to do is what do we what we do is actually we remove that comma, we replace

82
00:05:10.720 --> 00:05:15.640
that comma with whatever is inside the string, because this is an empty string.

83
00:05:15.760 --> 00:05:17.050
We don't have anything.

84
00:05:17.050 --> 00:05:20.740
And everything is like like everything is like one word.

85
00:05:20.740 --> 00:05:22.840
Frustrated, uncertain and relaxed.

86
00:05:23.290 --> 00:05:23.680
Right.

87
00:05:24.820 --> 00:05:27.730
So what if we change that comma?

88
00:05:28.700 --> 00:05:33.860
With a space and then we can see this is actually how it works.

89
00:05:34.220 --> 00:05:37.710
All right, we can do one more, right?

90
00:05:37.910 --> 00:05:43.630
We can change it with a dash and we can see frustrated, uncertain, relaxed.

91
00:05:44.060 --> 00:05:44.330
All right.

92
00:05:44.340 --> 00:05:48.540
So this is the join method and that's it for now for our methods.

93
00:05:48.800 --> 00:05:51.690
There are two more things that I want to discuss in this video.

94
00:05:51.920 --> 00:05:58.280
The first thing is that we are nesting and the second thing is using CONSED with arrays.

95
00:05:58.640 --> 00:05:59.030
Right.

96
00:05:59.420 --> 00:06:02.330
So I'm just going to come here and I'm going to say nesting.

97
00:06:02.540 --> 00:06:06.150
We can nest one array inside another array.

98
00:06:06.200 --> 00:06:06.580
Right.

99
00:06:06.800 --> 00:06:14.780
So we can have an array of not items but an array of sorry, an array of arrays.

100
00:06:14.780 --> 00:06:17.090
It was very difficult for me to pronounce.

101
00:06:18.680 --> 00:06:26.490
So we have and we have a great array of arrays, we can't do this as well.

102
00:06:26.870 --> 00:06:29.990
So first off, let's go ahead and let's create our array.

103
00:06:30.110 --> 00:06:32.870
And I'm just going to call it favs favorites.

104
00:06:33.080 --> 00:06:33.500
Right.

105
00:06:33.750 --> 00:06:35.890
And this is incorrect.

106
00:06:35.900 --> 00:06:39.910
It's Consed Favs or favorites.

107
00:06:40.520 --> 00:06:41.880
So this is our array.

108
00:06:41.940 --> 00:06:42.320
Right.

109
00:06:42.440 --> 00:06:45.940
And inside this array, we can have a bunch of more arrays.

110
00:06:46.460 --> 00:06:51.440
OK, and the first array is going to hold the name of movies and movie names.

111
00:06:51.450 --> 00:06:54.020
So the first one is definitely in-game.

112
00:06:54.680 --> 00:06:57.830
Then we have infinity.

113
00:06:59.160 --> 00:07:07.260
Infinite T wars, then we have civil wars.

114
00:07:08.540 --> 00:07:16.750
Then we have Iron Man and finally we have Thor, right?

115
00:07:16.850 --> 00:07:22.600
So this is our first story, but this is actually an item of this, right?

116
00:07:22.730 --> 00:07:25.580
So we have to separate the items by a comma.

117
00:07:26.720 --> 00:07:28.420
This is going to be our secondary.

118
00:07:28.580 --> 00:07:33.560
What I'm going to do is I'm just going to go ahead and and increase the width of this window so we can

119
00:07:33.560 --> 00:07:34.370
see everything.

120
00:07:34.550 --> 00:07:36.150
Everything should be on one line.

121
00:07:36.170 --> 00:07:36.560
All right.

122
00:07:36.860 --> 00:07:41.180
And this one is going to be the name of superheroes, this era.

123
00:07:41.330 --> 00:07:52.070
And I'm going to say Batman, Batman and then Superman and then Wonder Woman, the Trinity.

124
00:07:52.850 --> 00:07:53.480
All right.

125
00:07:53.660 --> 00:07:58.810
So the next array is going to be the name of Marvel superheroes.

126
00:07:59.000 --> 00:08:00.770
So we have Spiderman.

127
00:08:03.040 --> 00:08:08.330
Spy door man, so this is where is the deal?

128
00:08:08.690 --> 00:08:13.490
This is Spiderman and then we have you know what?

129
00:08:13.640 --> 00:08:18.260
I'm just going to go ahead and copy the rest of them, because it's super simple.

130
00:08:18.380 --> 00:08:19.940
I don't want to waste more time.

131
00:08:19.940 --> 00:08:22.310
And let's go ahead and let's uncommented.

132
00:08:22.550 --> 00:08:31.430
So this is movies, superheroes, and then again, superheroes, directors and actors, favorite actors.

133
00:08:32.120 --> 00:08:32.539
All right.

134
00:08:32.539 --> 00:08:33.770
So we have Fab's.

135
00:08:33.860 --> 00:08:38.000
So this is an array of arrays right here inside this array.

136
00:08:38.210 --> 00:08:42.799
We have five other arrays as as array items to this array.

137
00:08:43.159 --> 00:08:47.900
So let's go ahead and let's consider log our favs array.

138
00:08:48.420 --> 00:08:51.980
And now you guys can see we have five more arrays inside there.

139
00:08:52.160 --> 00:08:57.890
And each of them, well, I should probably make this smaller and make this one bigger so we can see

140
00:08:57.890 --> 00:08:58.600
everything better.

141
00:08:59.480 --> 00:09:06.550
I'm going to zoom out of it, so this is this is our first arrest and this array has an index of zero.

142
00:09:06.590 --> 00:09:08.390
The length of this array is five.

143
00:09:08.390 --> 00:09:09.590
The length of this is three.

144
00:09:09.590 --> 00:09:15.560
And you can see, although we have a lot of information inside the console and we can use all this information

145
00:09:15.560 --> 00:09:16.910
to our own benefit.

146
00:09:17.430 --> 00:09:17.690
Right.

147
00:09:17.720 --> 00:09:23.670
So the first array has an index of zero all the way to the last array, which has an index of four.

148
00:09:24.410 --> 00:09:29.650
We can go ahead and we can access any array based on their index.

149
00:09:29.660 --> 00:09:32.880
So let's go ahead and access the array, which has an index of one.

150
00:09:33.260 --> 00:09:34.120
So this is done.

151
00:09:34.130 --> 00:09:34.450
All right.

152
00:09:34.790 --> 00:09:39.920
We can access an array that has an index of for this, is that right?

153
00:09:39.980 --> 00:09:40.340
All right.

154
00:09:40.490 --> 00:09:43.760
So we can access those index indices.

155
00:09:44.270 --> 00:09:52.790
We can also access, for example, inside this array number for the inside the array, which has an

156
00:09:52.790 --> 00:09:53.630
index of four.

157
00:09:53.810 --> 00:09:56.450
We can access the individual items as well.

158
00:09:56.600 --> 00:10:01.870
And for that we provide another Brackett's and then we have the DiCaprio.

159
00:10:02.210 --> 00:10:06.150
So let's let's take a look at what the syntax actually means.

160
00:10:06.410 --> 00:10:08.300
So we have an array of arrays.

161
00:10:08.600 --> 00:10:12.500
The array, which has an index of four is this array.

162
00:10:13.110 --> 00:10:17.750
And the items inside this array are DiCaprio, Harvey, Toby and Andrew.

163
00:10:18.260 --> 00:10:18.590
All right.

164
00:10:18.740 --> 00:10:27.430
And the and when we whenever we open this array, the item which has the index of zero is DiCaprio.

165
00:10:27.950 --> 00:10:29.540
That's why we have chosen to copy.

166
00:10:29.750 --> 00:10:32.160
So we are going to levels deep.

167
00:10:32.420 --> 00:10:32.750
All right.

168
00:10:32.990 --> 00:10:38.580
We can use templates, strings or template literals with these arrays as well.

169
00:10:38.630 --> 00:10:44.030
So what I'm going to do is I'm just going to copy it down here and I'm going to remove.

170
00:10:45.370 --> 00:10:51.400
Everything and I'm going to provide back ticks, all right, and remove everything, and we are going

171
00:10:51.400 --> 00:10:57.970
to say we are going to top our because whenever we are talking with template literals, we should provide

172
00:10:57.970 --> 00:11:05.940
it with the variable name, template, template literals just only work with variable names.

173
00:11:05.950 --> 00:11:06.280
Right.

174
00:11:06.460 --> 00:11:10.030
So I'm just going to go ahead and provided this one in here.

175
00:11:10.980 --> 00:11:15.970
All right, so what is the result of this we know the result of this as DiCaprio.

176
00:11:16.200 --> 00:11:17.070
We know that, right?

177
00:11:17.340 --> 00:11:18.650
It is DiCaprio.

178
00:11:18.780 --> 00:11:20.040
And I'm going to say is.

179
00:11:23.350 --> 00:11:27.520
Let's go ahead and you know what, I'm going to change it, so what I'm going to do is I'm going to

180
00:11:27.520 --> 00:11:30.790
grab the array that has an index of three.

181
00:11:31.600 --> 00:11:39.280
And I want this I want to grab that one so that this item, RIFs, what is the index of Reeves'?

182
00:11:39.280 --> 00:11:48.940
The index of Reeves' is to so I'm going to provide it here is directing the new Batman movie.

183
00:11:49.910 --> 00:11:56.300
And let's capitalize, save it, Reeves is directing the new Batman movie.

184
00:11:56.450 --> 00:12:00.470
So this is how we can extract information from a race, right?

185
00:12:00.710 --> 00:12:03.980
So this is the first safe topic that I wanted to talk about.

186
00:12:04.430 --> 00:12:09.260
The second topic is that we can use CONSED with a race.

187
00:12:09.500 --> 00:12:16.610
We know that constants these these are used whenever we do not want to change the variable.

188
00:12:16.760 --> 00:12:25.010
OK, but they are used with whenever we use constants with primitive data types, we cannot reassign

189
00:12:25.010 --> 00:12:26.390
that variable name.

190
00:12:26.420 --> 00:12:26.680
Right.

191
00:12:26.900 --> 00:12:31.060
But why do we use them with reference data types?

192
00:12:31.070 --> 00:12:36.380
Because in reference data types, a reference to this array has been stored inside the memory.

193
00:12:36.680 --> 00:12:44.120
When the very first the very first lecture in the second chapter, we talked about how JavaScript is

194
00:12:44.120 --> 00:12:45.560
a high level language.

195
00:12:45.710 --> 00:12:51.380
It means that it takes care of memory management so we don't have to worry about memory management,

196
00:12:51.380 --> 00:12:54.860
OK, as opposed to lower level, lower level languages.

197
00:12:55.430 --> 00:12:55.740
All right.

198
00:12:55.880 --> 00:13:04.100
So whenever we use const variable with an array and arrays are reference types, meaning that a reference

199
00:13:04.100 --> 00:13:06.860
to this array has been stored inside the memory.

200
00:13:07.220 --> 00:13:09.940
So this this this array has not been stored.

201
00:13:10.160 --> 00:13:13.280
The reference, which is this moots one has been stored.

202
00:13:13.600 --> 00:13:13.940
All right.

203
00:13:14.180 --> 00:13:20.780
So as long as we do not change, we do not re declare moots one, we should be good.

204
00:13:20.990 --> 00:13:25.220
OK, so now you guys saw how we only had fiefs, right.

205
00:13:25.310 --> 00:13:27.170
And we changed that phasuk.

206
00:13:27.170 --> 00:13:30.070
OK, we accessed it in here, for example.

207
00:13:31.160 --> 00:13:32.000
This is the card.

208
00:13:32.040 --> 00:13:33.290
So this is Modesta.

209
00:13:33.470 --> 00:13:36.380
But we added moots one to Mountstuart.

210
00:13:36.560 --> 00:13:38.750
We actually changed this array.

211
00:13:38.970 --> 00:13:39.320
Right.

212
00:13:39.560 --> 00:13:45.260
So what I'm going to do is I'm going to comment about everything here and I'm going to show you how

213
00:13:45.260 --> 00:13:46.070
we did this.

214
00:13:46.250 --> 00:13:52.730
So I'm going to comment in these two scenarios can see, even though moots one and still both of them

215
00:13:52.730 --> 00:13:58.830
are constant variables, but we were able to change the data inside that array.

216
00:13:59.120 --> 00:14:05.600
We cannot redeclared Mountstuart, for example, if I were to say I'm just going to comment here, not

217
00:14:05.600 --> 00:14:06.410
allowed.

218
00:14:08.910 --> 00:14:13.250
And it's going to be and it's going to be like every right.

219
00:14:13.590 --> 00:14:21.390
So if I go ahead and if I say I want to change moods one to another array of, let's say one and two,

220
00:14:21.570 --> 00:14:24.380
we are going to see assignment to constant variable.

221
00:14:24.600 --> 00:14:29.220
We cannot change there because this moots one is a reference.

222
00:14:29.220 --> 00:14:33.840
We cannot change the reference, but we can change the data inside of that.

223
00:14:34.170 --> 00:14:43.590
OK, so this is why it is a best practice to use CONSED with arrays and with objects, because we can

224
00:14:43.590 --> 00:14:45.420
modify the array itself.

225
00:14:45.420 --> 00:14:50.850
As you guys can see here, we have added three items to this Mudd's one array, but we cannot.

226
00:14:50.850 --> 00:14:59.010
We declare redeclared modes one and this and that keeps that prevents our application from breaking

227
00:14:59.010 --> 00:15:07.380
down, that prevents from bugs to be created inside our application and for us to waste our time debugging

228
00:15:07.380 --> 00:15:08.040
that code.

229
00:15:08.520 --> 00:15:10.230
And I just wanted to mention this.

230
00:15:10.230 --> 00:15:11.600
And that's it for this letter.

231
00:15:11.760 --> 00:15:13.500
See you guys in the next one.

