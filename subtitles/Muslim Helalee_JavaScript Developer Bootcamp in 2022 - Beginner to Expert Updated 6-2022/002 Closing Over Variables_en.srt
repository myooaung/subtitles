1
00:00:00,810 --> 00:00:01,780
Hi, everyone.

2
00:00:01,800 --> 00:00:06,689
In this next year, we're going to go over closing over variables.

3
00:00:07,660 --> 00:00:14,410
All right, so in this example, we are going to talk about the idea that closure is about capturing

4
00:00:14,410 --> 00:00:19,050
values, but closure doesn't have anything to do with values at all.

5
00:00:19,420 --> 00:00:19,770
Right.

6
00:00:20,080 --> 00:00:28,420
As a matter of fact, if you don't close over a value, there is no such thing as closing over a value.

7
00:00:28,630 --> 00:00:28,980
Right.

8
00:00:29,260 --> 00:00:33,160
So in here, what we have is we have a let.

9
00:00:33,430 --> 00:00:35,470
We have a verbal declaration in here.

10
00:00:35,470 --> 00:00:36,400
And this is movie.

11
00:00:36,430 --> 00:00:37,240
The Revenant.

12
00:00:37,480 --> 00:00:37,830
All right.

13
00:00:37,930 --> 00:00:44,470
But if I go ahead and run this code, we can see that Django Unchained, Unchained, where is this coming

14
00:00:44,470 --> 00:00:44,740
from?

15
00:00:44,980 --> 00:00:47,800
So we can see that this council log is right here.

16
00:00:47,890 --> 00:00:48,280
Right.

17
00:00:48,470 --> 00:00:52,470
And it is going to look for this movie, for this movie variable.

18
00:00:52,810 --> 00:00:55,300
It cannot find it within this scope.

19
00:00:55,330 --> 00:00:55,600
All right.

20
00:00:55,600 --> 00:00:59,800
So what it is going to do is it's going to travel outside this scope.

21
00:01:00,050 --> 00:01:00,370
All right.

22
00:01:00,580 --> 00:01:08,380
But when it travels outside the scope, it is going to grab this value because this is the latest declaration,

23
00:01:08,860 --> 00:01:14,200
the latest very valuable declaration that we have in here by the name of a movie.

24
00:01:14,620 --> 00:01:20,860
It's like we have declared a movie here, but we have reassigned it to something else in here and it

25
00:01:20,860 --> 00:01:22,420
is going to grab this.

26
00:01:22,640 --> 00:01:30,020
OK, the reason for that is that the function call comes after this movie, right?

27
00:01:30,220 --> 00:01:35,680
So if I were to copy this function call and put it in here, we could see that The Revenant is called

28
00:01:35,860 --> 00:01:37,030
from number eight.

29
00:01:37,580 --> 00:01:39,890
We can see that we're OK.

30
00:01:39,970 --> 00:01:45,430
So, yeah, here is line number five, The Revenant, and then from line number five, Django Unchained.

31
00:01:46,150 --> 00:01:52,750
OK, so closure doesn't have anything to do with the with the value for that variable.

32
00:01:52,990 --> 00:01:55,300
It is just looking for that variable.

33
00:01:55,540 --> 00:02:00,220
That's why it is closing over or closing over a variable.

34
00:02:00,580 --> 00:02:00,880
All right.

35
00:02:01,000 --> 00:02:05,500
It is a code based operation, but it is closing over a variable.

36
00:02:06,330 --> 00:02:06,670
All right.

37
00:02:06,910 --> 00:02:09,850
Now, let's go ahead and let's tackle another example.

38
00:02:10,820 --> 00:02:15,710
And this is going to be example number four, and for this, I'm just going to comment about both of

39
00:02:15,710 --> 00:02:17,690
the both of these function calls.

40
00:02:18,350 --> 00:02:25,280
And what I'm going to do here is I'm just going to go ahead and copy this example and put it right here.

41
00:02:25,520 --> 00:02:28,910
And I'm going to uncommented now before I save it.

42
00:02:29,830 --> 00:02:33,020
What do you think is going to happen here right now?

43
00:02:33,040 --> 00:02:39,160
Think of this like you have, for example, multiple handwritten handlers to an array of buttons, for

44
00:02:39,160 --> 00:02:43,690
example, and this function that is being created in each iteration.

45
00:02:44,410 --> 00:02:53,410
And it has the appearance that what it is doing is closing over the the I value in each iteration,

46
00:02:53,770 --> 00:02:57,850
because here we are calling the event the value for that.

47
00:02:58,240 --> 00:03:03,700
So we have said before, I should go all the way to less than three and then we're going to increment

48
00:03:03,700 --> 00:03:07,480
I by one equal to less equal or less than three.

49
00:03:07,930 --> 00:03:17,410
And then each time the eye is iterates over this over this loop, over the slope, it is going to grab

50
00:03:17,410 --> 00:03:18,430
one one value.

51
00:03:18,430 --> 00:03:22,030
So it's going to be one, two or it is going to be three.

52
00:03:22,060 --> 00:03:22,440
Right.

53
00:03:23,610 --> 00:03:26,130
And that value is going to be passed in here.

54
00:03:26,140 --> 00:03:30,580
It means that the first function is going to be called after one second.

55
00:03:30,850 --> 00:03:34,660
The second function is going to be called after two seconds and then three seconds.

56
00:03:34,960 --> 00:03:41,560
And each time we should be able to see the eye variable itself and the value for that I variable rate

57
00:03:41,830 --> 00:03:47,500
and will logically, we should be able to see one eye two and three.

58
00:03:47,890 --> 00:03:48,310
Right.

59
00:03:49,370 --> 00:03:51,350
But when I run it.

60
00:03:52,810 --> 00:03:59,290
What we can see is we just see I'm just going to zoom in and we just see that we have three iterations

61
00:03:59,290 --> 00:04:01,420
and just going to, you know, increase this.

62
00:04:01,990 --> 00:04:05,150
So it is really a really visible.

63
00:04:05,170 --> 00:04:14,290
We don't need that big of Vasko window so we can see that this eye variable with a value of four has

64
00:04:14,290 --> 00:04:23,840
run four, four, three times, even though it says that the eye goes less than equal or less than three.

65
00:04:24,070 --> 00:04:29,050
Why do we have for so first off, I'm just going to explain to you guys why we have four here, and

66
00:04:29,050 --> 00:04:32,680
then I'm going to tell you why why it has run.

67
00:04:32,920 --> 00:04:34,620
This code has run three times.

68
00:04:34,750 --> 00:04:39,140
Why don't we see one, then eye two and then three?

69
00:04:39,160 --> 00:04:39,900
Why we don't see.

70
00:04:40,060 --> 00:04:47,560
So first of why the eye variable has a value for the reason for that is four is the value for the final

71
00:04:47,560 --> 00:04:48,220
iteration.

72
00:04:49,180 --> 00:04:56,200
So when the eye is what we are going to check it against this condition and when this condition is going

73
00:04:56,200 --> 00:05:00,160
to is going to be true, we are going to run this code after this code runs.

74
00:05:00,310 --> 00:05:02,190
We are going to increment it by one.

75
00:05:02,440 --> 00:05:07,670
Now, the eye is two, so I equals two and two is less than three.

76
00:05:07,990 --> 00:05:09,610
So this condition is true.

77
00:05:09,700 --> 00:05:14,820
And then we are going to run this code and then after the code is run, we are going to increment the

78
00:05:14,830 --> 00:05:15,640
Ibai by one.

79
00:05:16,920 --> 00:05:24,600
So now this is three, this condition is still true because it says less than or equal to three, and

80
00:05:24,600 --> 00:05:31,920
then we are going to run this this coat and then excuse me, then we are going to increment the eye

81
00:05:31,920 --> 00:05:34,010
by one, which is four.

82
00:05:34,380 --> 00:05:43,530
And when we compare it to this condition, we evaluated to this condition or we compare, I think compare

83
00:05:43,530 --> 00:05:47,850
is a better word, then this condition is no longer going to be true.

84
00:05:48,000 --> 00:05:55,140
But the eye, the disvalue for the eye variable is what the value the final value that the eye variable

85
00:05:55,140 --> 00:05:56,230
got was for.

86
00:05:56,730 --> 00:05:58,590
I know that this code didn't run.

87
00:05:58,590 --> 00:06:04,260
If this code were to run, we wouldn't see three iterations, we would see four iterations.

88
00:06:04,560 --> 00:06:08,900
But the final value for the eye because we incremented it was four.

89
00:06:08,910 --> 00:06:10,080
That's why we see four.

90
00:06:10,230 --> 00:06:12,660
And why do we need why do we see that?

91
00:06:12,850 --> 00:06:18,980
If I has been repeated three times, why don't we see one eye two and three?

92
00:06:19,780 --> 00:06:26,910
OK, so we are expecting it to print out equal to one eye, equal to two and equal to three.

93
00:06:27,150 --> 00:06:31,890
But when we run it, it it prints out four, four and four.

94
00:06:31,920 --> 00:06:32,290
Right.

95
00:06:32,850 --> 00:06:33,330
Why?

96
00:06:33,330 --> 00:06:36,270
Because there is only one eye variable.

97
00:06:36,450 --> 00:06:45,430
That's why now there is an eye variable rate and it is here on line 18.

98
00:06:45,690 --> 00:06:52,080
OK, there is only one eye variable but and there is only one of them.

99
00:06:52,290 --> 00:06:58,790
OK, so we don't have like any eye variable and then we have a variable or we have another variable.

100
00:06:58,830 --> 00:06:59,100
Right.

101
00:06:59,400 --> 00:07:01,110
And we have three functions.

102
00:07:01,110 --> 00:07:02,430
How many functions do we have?

103
00:07:02,610 --> 00:07:05,250
We have three functions, even though this is one function.

104
00:07:05,460 --> 00:07:08,940
But it is going to be it is going to run four, three times.

105
00:07:09,120 --> 00:07:10,780
So we end up with three functions.

106
00:07:11,040 --> 00:07:16,170
Now, if you wanted to have three separate values, how many variables do we need?

107
00:07:16,650 --> 00:07:18,450
We need three variables, right?

108
00:07:18,640 --> 00:07:21,090
We only have one variable that is in here.

109
00:07:21,880 --> 00:07:25,200
OK, so of course, it can only have one value.

110
00:07:25,380 --> 00:07:31,890
And in this case, it is going to have the value that occurs at the end of the loop, which is the value

111
00:07:31,890 --> 00:07:39,300
for we can't effectively use closure until we I just I just want to go over the theory first and then

112
00:07:39,300 --> 00:07:42,750
we are going to solve this problem in two different cases.

113
00:07:43,260 --> 00:07:50,610
Now, I want to say that we cannot effectively, effectively use closure until we separate ourselves

114
00:07:50,790 --> 00:07:55,020
from that, from that perception of capturing values.

115
00:07:55,470 --> 00:08:00,810
It is not capturing a value, but preserving access to a variable.

116
00:08:00,960 --> 00:08:09,690
OK, so if we wanted to solve this problem and and we analyzed that, I need separate variables, we

117
00:08:09,690 --> 00:08:13,990
have seen several multiple different examples of how to create variables.

118
00:08:14,340 --> 00:08:21,030
Now, if you want to create more than more than one variable with the same name, we need to make new

119
00:08:21,030 --> 00:08:21,840
scope's.

120
00:08:22,020 --> 00:08:22,410
Right.

121
00:08:22,560 --> 00:08:24,990
So we could do an iffy here.

122
00:08:24,990 --> 00:08:32,460
But they are much more common way now that we have ESX, now that we have blocks scoping.

123
00:08:32,460 --> 00:08:40,000
And you know, what I want I'm talking about is to just stick a block scope declaration and the iteration.

124
00:08:40,500 --> 00:08:43,409
So what I'm going to do is I'm just going to copy this.

125
00:08:43,710 --> 00:08:45,990
I'm just going to copy it and I'm going to comment it out.

126
00:08:47,420 --> 00:08:54,890
I'm going to say example five, let's face it here, so in here, what I'm going to do is I'm going

127
00:08:54,890 --> 00:09:04,250
to create a variable J and I'm going to set it to I and then we are going to grab J in here, I in here

128
00:09:04,250 --> 00:09:05,750
and we are going to pass J there.

129
00:09:05,750 --> 00:09:07,700
And I'm going to pass in here as well.

130
00:09:08,240 --> 00:09:16,640
So now if I were to save this, we're going to see J one J two and we're going to create three now.

131
00:09:16,760 --> 00:09:19,060
So now the letter J.

132
00:09:19,100 --> 00:09:26,330
This part is going to run every time for the loop, every time the loop iterates and it is going to

133
00:09:26,330 --> 00:09:29,900
create a whole new J variable.

134
00:09:30,920 --> 00:09:38,390
In that whole new iteration of that loop, excuse me, so each time this loop runs, we are going to

135
00:09:38,390 --> 00:09:46,430
create a whole new variable and therefore we get the values which are one, two and three.

136
00:09:47,820 --> 00:09:54,270
We see the difference between capturing a value and closing over a variable, but there is we can say

137
00:09:54,270 --> 00:10:01,590
that there was an even better way of solving this problem because that perpetual problem of undoing

138
00:10:01,590 --> 00:10:09,510
for var I in here and then my closure, closure's aren't capturing values.

139
00:10:09,780 --> 00:10:10,140
All right.

140
00:10:10,470 --> 00:10:18,600
So ESX has is six has solved this problem by saying that if you use Aulet on your for a loop we will

141
00:10:18,600 --> 00:10:22,410
automatically create a new life for each iteration.

142
00:10:23,750 --> 00:10:31,190
OK, and instead of creating just one that belongs to the whole for a loop here, there is going to

143
00:10:31,190 --> 00:10:34,610
be a brand new eye for each iteration.

144
00:10:34,640 --> 00:10:35,810
So let's go over that.

145
00:10:35,810 --> 00:10:37,620
Let's see how that's going to work.

146
00:10:37,850 --> 00:10:39,590
I'm just going to comment that part out.

147
00:10:39,590 --> 00:10:43,400
And I'm going to come down here and I'm going to say why they're right.

148
00:10:44,210 --> 00:10:45,710
For example, sex.

149
00:10:45,980 --> 00:10:47,760
Let's face the code in here.

150
00:10:48,680 --> 00:10:49,070
All right.

151
00:10:49,280 --> 00:10:54,830
And what I'm going to do is I'm just going to change this far to let and when I save it.

152
00:10:55,940 --> 00:11:02,810
We see one eye two and a three now each of these iterations is going to be printed after exactly one

153
00:11:02,810 --> 00:11:03,180
second.

154
00:11:03,530 --> 00:11:04,930
So this takes one second.

155
00:11:04,940 --> 00:11:09,260
And when this is printed after another second, this is printed and then this is printed.

156
00:11:09,890 --> 00:11:17,480
And we can see that each time each time we have a different eye variable because they are they have

157
00:11:17,480 --> 00:11:18,530
different values.

158
00:11:19,310 --> 00:11:20,690
Now, what does that mean?

159
00:11:20,720 --> 00:11:25,520
It means that closure just magically works.

160
00:11:25,800 --> 00:11:33,500
OK, so the point is, if you need multiple different values being closed over, you need multiple different

161
00:11:33,500 --> 00:11:34,640
variables.

162
00:11:35,360 --> 00:11:40,450
You need to close over different variables and not try to capture different values.

163
00:11:41,060 --> 00:11:42,500
So we just saw that.

164
00:11:43,220 --> 00:11:49,610
How close in the past in the previous letter, we saw how close your works actually what closure is

165
00:11:50,000 --> 00:11:52,010
and how it works and why it works.

166
00:11:52,010 --> 00:11:59,270
And in here, we just solved a problem that with that was created with VA and we just solved it, Willette.

167
00:11:59,600 --> 00:12:02,060
And now we know how we solved it.

168
00:12:02,570 --> 00:12:09,830
The reason that we solved it is whenever we stick this let into the scope, it is going to create a

169
00:12:09,830 --> 00:12:10,790
brand new.

170
00:12:11,810 --> 00:12:19,850
Variable, each time this for loop runs, it is some it is something that you want whenever you're creating

171
00:12:19,850 --> 00:12:20,470
for loops.

172
00:12:20,840 --> 00:12:25,680
That's why you passan let I be passing the little keyword, right.

173
00:12:25,820 --> 00:12:29,940
So this is going to be it for this lecture and also for this chapter.

174
00:12:30,140 --> 00:12:32,290
See you guys in the next chapter.

175
00:12:32,360 --> 00:12:39,110
We finally we will start talking about object oriented programming, and I'm super, super excited for

176
00:12:39,110 --> 00:12:39,290
that.

177
00:12:39,680 --> 00:12:40,940
See you guys then.

