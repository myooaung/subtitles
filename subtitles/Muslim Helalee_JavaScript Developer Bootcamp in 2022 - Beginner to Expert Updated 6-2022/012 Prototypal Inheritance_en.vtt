WEBVTT
1
00:00:01.359 --> 00:00:07.240
Hi, everyone, in this lecture, we are going to talk about the prototypical inheritance.

2
00:00:08.580 --> 00:00:16.950
All right, so let's imagine if we wanted to do a true sort of child class in the prototype prototyping

3
00:00:16.970 --> 00:00:20.570
style, and what would we do then?

4
00:00:20.610 --> 00:00:24.420
OK, for example, we have a a function.

5
00:00:24.420 --> 00:00:27.800
We have a another workshop function.

6
00:00:28.230 --> 00:00:29.300
And what do we want to do?

7
00:00:29.460 --> 00:00:37.200
We want to grab this workshop function and we want to inherit or extend from it its methods or its properties

8
00:00:37.200 --> 00:00:39.810
or whatever its God to this another workshop.

9
00:00:40.230 --> 00:00:43.800
We know how we can do it with the class constructors.

10
00:00:44.580 --> 00:00:46.110
We don't how we can do it with that.

11
00:00:46.230 --> 00:00:53.240
We just say extents and then we toss in the class, the constructor name and that's it.

12
00:00:53.670 --> 00:00:58.050
But what do we do in the regular old school prototypes style?

13
00:00:58.060 --> 00:00:58.860
What do we do then?

14
00:00:59.460 --> 00:01:05.220
What do we do is we say another workshop, that prototype we grab the prototype of the another workshop,

15
00:01:05.400 --> 00:01:09.480
which is that object that we don't have a name for it.

16
00:01:09.690 --> 00:01:13.790
And we say that object that create workshop prototype.

17
00:01:14.070 --> 00:01:14.450
All right.

18
00:01:14.790 --> 00:01:15.840
And what does that mean?

19
00:01:16.200 --> 00:01:24.450
It means that we are saying take the prototype that I initially got, take this prototype that I initially

20
00:01:24.450 --> 00:01:31.890
got, which is not what I want, and change where it is linked to make sure that a lengths to workshop

21
00:01:31.890 --> 00:01:38.010
that prototype, no object that create does two things.

22
00:01:38.040 --> 00:01:41.370
This method object that create does two things.

23
00:01:41.380 --> 00:01:46.440
OK, it is a utility built into in the first five and it does two things.

24
00:01:46.680 --> 00:01:54.870
I'm going to list the two things and I'm going to let you think if those two things sound familiar to

25
00:01:54.870 --> 00:01:55.020
you.

26
00:01:55.490 --> 00:01:55.830
Right.

27
00:01:57.060 --> 00:02:02.580
The first thing that object that career does is create a brand new object.

28
00:02:03.090 --> 00:02:09.720
And then the second thing it does is link that object to another object.

29
00:02:10.509 --> 00:02:19.050
OK, so it is the first two steps of the new algorithm and the specific API method called object that

30
00:02:19.050 --> 00:02:19.550
create.

31
00:02:19.830 --> 00:02:25.530
So the first two steps of the new keyword is done using the object that creates.

32
00:02:25.530 --> 00:02:30.360
So it creates a brand new object and it links it to another object.

33
00:02:30.360 --> 00:02:35.220
What does that another object that another object is right there, right here.

34
00:02:35.640 --> 00:02:39.600
That another object is the main JavaScript object.

35
00:02:39.960 --> 00:02:47.280
So if I were to open this image once more and if I come here even though the names are different, but

36
00:02:47.280 --> 00:02:53.520
you can think of think about it like this, so we have a another instead of this workshop, we have

37
00:02:53.520 --> 00:02:57.450
another workshop function and another workshop.

38
00:02:57.450 --> 00:03:01.500
That prototype is going to refer to this object for which we don't have a name.

39
00:03:02.190 --> 00:03:08.610
And then when we say object that create it is going to create a brand new object like this and it is

40
00:03:08.610 --> 00:03:15.800
going to link it to another object, which is object, another workshop, that prototype.

41
00:03:16.380 --> 00:03:16.710
Right.

42
00:03:17.700 --> 00:03:28.410
So using this line of code, we can extend or inherit from the from a parent via prototype or from a

43
00:03:28.410 --> 00:03:31.290
parent function into a child function.

44
00:03:31.800 --> 00:03:32.160
Right.

45
00:03:32.280 --> 00:03:33.690
We can inherit from it.

46
00:03:34.110 --> 00:03:41.130
So now if we come to line number six, if I come here right now, what do we want to do?

47
00:03:41.130 --> 00:03:45.720
We want to find all what all these this keywords, all of them.

48
00:03:46.050 --> 00:03:47.360
What do they refer to?

49
00:03:47.880 --> 00:03:52.890
So what I'm going to do is I'm going to come to line number sixteen right soon here.

50
00:03:52.890 --> 00:03:58.740
What do we have is we have a new keyword that does those four things that we have done so many times.

51
00:03:58.740 --> 00:03:59.070
Right.

52
00:03:59.550 --> 00:04:02.940
And it is going to invoke this function, another function.

53
00:04:03.240 --> 00:04:09.900
And we know that both of these functions, this another workshop and this workshop, both of them refer

54
00:04:09.900 --> 00:04:13.860
to the two one object, that object that we don't have a name for.

55
00:04:15.030 --> 00:04:17.130
And we pass in note, right?

56
00:04:17.430 --> 00:04:20.190
So whenever we pass in Noah, what does that mean?

57
00:04:20.220 --> 00:04:26.510
It means that there is something inside this, another workshop that is going to grab the snow.

58
00:04:26.730 --> 00:04:32.550
So whenever I pass in, Noah, so why don't we have to do is I'm going to copy this and I'm going to

59
00:04:32.550 --> 00:04:33.750
paste it right here.

60
00:04:34.200 --> 00:04:39.600
The reason that I just copied it, even though this is not actually like literally this is this is not

61
00:04:39.600 --> 00:04:40.050
happening.

62
00:04:40.240 --> 00:04:41.800
We are not rearranging the code.

63
00:04:41.880 --> 00:04:45.290
This this is something that I'm doing so you can understand.

64
00:04:45.630 --> 00:04:53.490
So whenever we inherit from whenever we do this line, it means that this teacher is inherited in here

65
00:04:53.490 --> 00:04:53.880
as well.

66
00:04:54.330 --> 00:05:02.310
So if I say Noah, Noah is going to be copied from here and is going to be passed in here, passed in

67
00:05:02.310 --> 00:05:03.750
here and passed in here.

68
00:05:04.020 --> 00:05:10.620
So now the this key word of the workshop function is referring to what it is referring to this Geass

69
00:05:10.620 --> 00:05:18.060
class, because the genius class is the object and the final step of this new Keywood, what was it?

70
00:05:18.420 --> 00:05:26.460
If the function does not return, an object with the new keyword assumes you meant to return that this

71
00:05:26.460 --> 00:05:27.030
key word.

72
00:05:27.330 --> 00:05:29.310
And what is this key we're referring to?

73
00:05:29.950 --> 00:05:34.170
We go to the call site, whereas the concept, the concept is right here.

74
00:05:34.350 --> 00:05:40.130
So it is referring to this JS class and this jazz class has a teacher property on it.

75
00:05:40.350 --> 00:05:41.720
And what is the value for that?

76
00:05:41.730 --> 00:05:42.360
It is no.

77
00:05:42.600 --> 00:05:44.370
So this teacher is going to be.

78
00:05:44.370 --> 00:05:46.560
No, I'm just going to go back a few levels.

79
00:05:47.430 --> 00:05:49.790
I don't need to really, like, literally do it.

80
00:05:50.130 --> 00:05:53.100
So this Noah is going to be passed right here.

81
00:05:53.110 --> 00:05:55.720
We are going to see that this teacher is actually Noah.

82
00:05:56.040 --> 00:05:58.650
So this keyword is going to be pointing to Noah.

83
00:06:00.070 --> 00:06:04.870
And this keyword is actually pointing to this Geass class, right?

84
00:06:05.320 --> 00:06:12.760
So now what we are going to do is I'm going to come to here to this Jayce class that speak up and now

85
00:06:12.760 --> 00:06:16.000
we are going to go one level up the prototype chain.

86
00:06:16.010 --> 00:06:18.400
So all of this this is called parotid.

87
00:06:18.400 --> 00:06:26.680
Whenever we grab a property from a parent, it is going to it is going to be called inheritance or in

88
00:06:26.680 --> 00:06:28.840
the class syntax.

89
00:06:28.840 --> 00:06:31.590
We just call it extending or extension.

90
00:06:31.600 --> 00:06:32.110
That's it.

91
00:06:32.770 --> 00:06:40.390
So this is what this is how we inherited this into here or actually this another workshop inherited

92
00:06:40.390 --> 00:06:41.350
this line of code.

93
00:06:41.740 --> 00:06:45.200
And now that's why these these are known.

94
00:06:45.230 --> 00:06:45.560
Right.

95
00:06:45.880 --> 00:06:50.350
But if we come here, this is actually the true part of the prototype of change.

96
00:06:51.520 --> 00:06:55.660
We can see that we have a reduced class and a speaker method on it.

97
00:06:56.320 --> 00:07:00.460
If we come to the gist class, do we have a speaker from speaker method on it?

98
00:07:00.490 --> 00:07:01.240
No, we don't.

99
00:07:01.450 --> 00:07:07.330
So there is that object right here, like let's say this is the genius object, even though this is

100
00:07:07.330 --> 00:07:11.430
Jianguo, think of it like it just does it have a speaker method on it.

101
00:07:11.440 --> 00:07:12.520
No it doesn't.

102
00:07:12.880 --> 00:07:18.250
So what we are going to do is we are going to go one level up so the level up is going to be another

103
00:07:18.250 --> 00:07:18.820
workshop.

104
00:07:18.820 --> 00:07:23.750
Does another workshop have a another workshop that prototype?

105
00:07:24.040 --> 00:07:26.590
Does it have a speaker method on it?

106
00:07:26.620 --> 00:07:26.900
No.

107
00:07:27.040 --> 00:07:29.590
So what we are going to do, we are going to go one level up.

108
00:07:29.890 --> 00:07:37.480
The level up is this was another workshop prototype and the second level up is workshop, the prototype,

109
00:07:37.720 --> 00:07:38.620
which is this one.

110
00:07:38.830 --> 00:07:41.620
Does this have a speaker method on it?

111
00:07:42.220 --> 00:07:44.140
Well, actually, this is another workshop.

112
00:07:44.140 --> 00:07:44.440
Has it?

113
00:07:44.440 --> 00:07:52.090
Sorry, I kind of messed it up when whenever we look at the Aegis class, whether or not it has a speaker

114
00:07:52.360 --> 00:07:53.110
speaker method.

115
00:07:53.120 --> 00:07:53.920
No, it doesn't.

116
00:07:54.160 --> 00:07:55.480
So we go one level up.

117
00:07:55.730 --> 00:08:03.610
If we go to the object to which this another workshop is pointing with this prototype property, does

118
00:08:03.610 --> 00:08:05.170
that have you speak of method on it?

119
00:08:05.200 --> 00:08:05.950
Yes, it does.

120
00:08:06.610 --> 00:08:12.640
And in here, what we are going to do is we are going to pass and this teacher's J.S. in here and we

121
00:08:12.640 --> 00:08:13.930
are going to pass it in here.

122
00:08:14.740 --> 00:08:17.110
So here we have again this key word.

123
00:08:17.380 --> 00:08:21.730
What is this key is going to be pointing yet we need to go to the car side.

124
00:08:22.180 --> 00:08:24.050
Where is the car side of this function?

125
00:08:24.070 --> 00:08:26.590
So this function is the speaker function, right?

126
00:08:26.890 --> 00:08:28.870
Where is the concept for the speaker function?

127
00:08:28.900 --> 00:08:34.049
The concept is right here so that this key word is going to be pointing at the JS class as well.

128
00:08:35.580 --> 00:08:44.610
All right, so and in here, what we have is we have called the workshop dot com through the explicit

129
00:08:44.610 --> 00:08:46.410
binding, we have called it right here.

130
00:08:46.590 --> 00:08:54.380
And this in here is all of these this is all of them are going to be pointing to the jazz class.

131
00:08:54.720 --> 00:09:05.070
So if I save it this concer log this the teacher, because this workshop, that prototype has a ask

132
00:09:05.070 --> 00:09:06.510
and ask method on it.

133
00:09:06.510 --> 00:09:08.040
It hasn't asked method on it.

134
00:09:08.280 --> 00:09:11.850
And the this keyword is going to be pointing to the Jesus object.

135
00:09:12.510 --> 00:09:14.750
What we are going to get as the consul lock.

136
00:09:14.790 --> 00:09:18.950
We are going to get Noer and what is the question, teachers genius.

137
00:09:18.960 --> 00:09:21.210
I'm just going to toss in three question marks.

138
00:09:21.390 --> 00:09:22.560
So it is a question.

139
00:09:22.560 --> 00:09:28.800
And when I say it, we get the Nowhat teachers Jesus once more very, very quickly.

140
00:09:28.800 --> 00:09:32.190
If you if you know what it is, then just that's it for you.

141
00:09:32.550 --> 00:09:35.880
If you if you're not sure, I'm just going to go over this very quickly.

142
00:09:36.300 --> 00:09:36.670
All right.

143
00:09:36.750 --> 00:09:44.730
So what we did was, first off, we we inherited all the everything that the workshop function had inside

144
00:09:44.730 --> 00:09:45.930
the another workshop.

145
00:09:46.270 --> 00:09:46.680
All right.

146
00:09:46.900 --> 00:09:53.460
And after that, what we did was we called the workshop through the explicit binding in here.

147
00:09:53.910 --> 00:09:55.350
But we have it this key word.

148
00:09:55.470 --> 00:09:59.000
So we need to know where this word, this this key word is pointing it.

149
00:09:59.370 --> 00:10:01.920
So we need to go to the call side.

150
00:10:01.920 --> 00:10:03.540
Where is the concept for the workshop?

151
00:10:03.540 --> 00:10:12.360
The concept for the workshop is actually right here, but still we cannot find it because it is here,

152
00:10:12.360 --> 00:10:15.390
but it is called inside the another workshop function.

153
00:10:15.930 --> 00:10:16.260
Right.

154
00:10:16.530 --> 00:10:18.980
Where is the call for the another workshop function?

155
00:10:19.010 --> 00:10:19.800
It is right here.

156
00:10:19.950 --> 00:10:26.340
And we know that the this keyword is going to be is will be pointing not as will be will be pointing

157
00:10:26.340 --> 00:10:27.390
at the class.

158
00:10:28.020 --> 00:10:28.370
Right.

159
00:10:28.710 --> 00:10:35.100
So the Geass class is an object that that this key word is going to be pointing at.

160
00:10:35.260 --> 00:10:39.450
And what is the property that that is associated with the this keyword?

161
00:10:39.450 --> 00:10:40.740
It is the teacher property.

162
00:10:40.980 --> 00:10:44.610
So this teacher property is going to be copied down to this object.

163
00:10:45.910 --> 00:10:49.720
All right, and what is the value for that, the value for that is going to be no.

164
00:10:50.560 --> 00:10:57.730
So we know that this this call, we know that the call method or the appli method or the BINDE method,

165
00:10:58.030 --> 00:11:03.030
they take as their first argument that this keyword so this keyword is going to be this object.

166
00:11:03.370 --> 00:11:06.650
And we know that the teacher is going to be no.

167
00:11:07.390 --> 00:11:10.120
And this teacher is going to be a teacher.

168
00:11:10.120 --> 00:11:11.290
That's why it is going to be.

169
00:11:11.290 --> 00:11:11.580
No.

170
00:11:12.070 --> 00:11:17.890
And if we come to line number 18, we call the speaker method on the class object.

171
00:11:18.730 --> 00:11:25.020
And for this, if we go and look at the object, the class doesn't have a speaker.

172
00:11:25.030 --> 00:11:30.610
So we go one level up and we can find it in the prototype of another workshop.

173
00:11:31.030 --> 00:11:32.610
It does have a speaker method.

174
00:11:32.920 --> 00:11:35.980
And what it does, it executes this don't ask.

175
00:11:36.700 --> 00:11:38.710
Now, what is this referring to?

176
00:11:38.710 --> 00:11:40.240
We need to go to the call side.

177
00:11:40.540 --> 00:11:42.550
Where is the call side for this function?

178
00:11:42.560 --> 00:11:43.490
It is right here.

179
00:11:43.780 --> 00:11:48.680
So this this key word right here is going to be pointing at the jazz class as well.

180
00:11:49.210 --> 00:11:53.560
So this, this and the this one as well.

181
00:11:53.950 --> 00:11:56.950
All these three, this is all of them.

182
00:11:56.950 --> 00:11:59.080
They're going to be pointing at the Aegis class.

183
00:11:59.740 --> 00:12:08.350
But because this workshop, that prototype that ask this workshop prototype object, it has a aske method

184
00:12:08.350 --> 00:12:08.740
on it.

185
00:12:09.070 --> 00:12:14.850
This Aske method will have been inherited by the another workshop as well.

186
00:12:15.190 --> 00:12:16.840
So it is right here as well.

187
00:12:16.870 --> 00:12:23.080
So in this case, this the teacher will also be pointing at deejay's class for which the value is no.

188
00:12:23.080 --> 00:12:30.040
And that's why when we save it, we get now it is a very, very complicated case of prototyping inheritance.

189
00:12:30.430 --> 00:12:37.020
And this this is exactly equivalent to what we did here to the extents and superclass.

190
00:12:37.270 --> 00:12:38.080
So what we did.

191
00:12:38.380 --> 00:12:41.290
OK, so this has super what we did here.

192
00:12:42.270 --> 00:12:47.370
This, this that I've highlighted here is exactly the same as what I've done here.

193
00:12:47.730 --> 00:12:49.000
This is exactly the same.

194
00:12:49.230 --> 00:12:50.760
So the choice is up to you.

195
00:12:50.970 --> 00:12:51.960
Which one do we want?

196
00:12:51.990 --> 00:12:52.860
Do you want to use?

197
00:12:53.010 --> 00:12:58.380
I told you, if you want to do like the class syntax, you want to do the class syntax, which is a

198
00:12:58.380 --> 00:13:00.420
template for creating objects.

199
00:13:00.430 --> 00:13:07.770
That's why it is called object oriented programming, or some people call it object oriented programming.

200
00:13:08.700 --> 00:13:13.740
All right, because even though this is not an object, this class I'm just going to highlight, I'm

201
00:13:13.740 --> 00:13:19.140
just going to come in it and so it is visible, we are going to do this.

202
00:13:19.150 --> 00:13:22.350
There is no super with the prototype inheritance.

203
00:13:22.560 --> 00:13:23.840
That's why I'm not going to do it.

204
00:13:23.850 --> 00:13:25.430
There is no way to do it, actually.

205
00:13:26.040 --> 00:13:29.000
So this is the class syntax.

206
00:13:29.010 --> 00:13:29.430
All right.

207
00:13:29.700 --> 00:13:32.520
And this is what it looks underneath.

208
00:13:33.120 --> 00:13:33.490
All right.

209
00:13:33.990 --> 00:13:36.180
So this is what you're driving.

210
00:13:36.750 --> 00:13:39.440
This is what the engine looks like, right.

211
00:13:39.480 --> 00:13:44.430
So it is up to you that you want to use this syntax or you want to use this syntax.

212
00:13:44.430 --> 00:13:47.400
But it is a best practice that you use this syntax.

213
00:13:47.580 --> 00:13:52.050
You can see that it is way easier, way simpler than what we had there.

214
00:13:52.080 --> 00:13:54.290
OK, I should come in this to end as well.

215
00:13:55.230 --> 00:13:56.100
What do we have there?

216
00:13:56.400 --> 00:13:58.650
And this gets very, very confusing.

217
00:13:58.650 --> 00:14:05.430
If you have two or more like if you have 10, 15 instances of classes, different classes, then it

218
00:14:05.430 --> 00:14:06.870
is going to get very confusing.

219
00:14:06.870 --> 00:14:09.930
But this this syntax is very readable.

220
00:14:10.110 --> 00:14:12.020
We know where is our workshop class.

221
00:14:12.030 --> 00:14:14.520
We know that we have extended the workshop class.

222
00:14:14.850 --> 00:14:19.500
So all of these are going to be copied here or they are going to be inherited here.

223
00:14:19.800 --> 00:14:20.890
We just say extend.

224
00:14:20.920 --> 00:14:22.920
So is there going to be extended here?

225
00:14:23.180 --> 00:14:28.210
And we we also have a speaker method on this, another workshop.

226
00:14:28.350 --> 00:14:34.980
So now the workshop, it has two methods, but the another workshop, it has three methods.

227
00:14:34.980 --> 00:14:38.220
One method is in here and two other methods are here.

228
00:14:39.450 --> 00:14:45.830
And in this, another workshop has access to its own method, as well as the methods of its parent,

229
00:14:46.080 --> 00:14:47.410
the same thing happens here.

230
00:14:47.580 --> 00:14:51.070
It's not that visible, but that's exactly what's happening.

231
00:14:51.360 --> 00:14:54.890
So this is the sugar layer that people call it.

232
00:14:54.900 --> 00:14:56.890
This is the syntactic sugar.

233
00:14:57.150 --> 00:15:02.340
In case you're wondering what the excuse me what these syntactic sugar looks like.

234
00:15:02.350 --> 00:15:08.700
So this is the syntactic sugar and that's why it is called sugar, because it is much better looking

235
00:15:08.700 --> 00:15:16.540
and awesomer syntax for classes than what we had, like prototypical inheritance or prototypes.

236
00:15:16.800 --> 00:15:18.390
So this is the class syntax.

237
00:15:18.700 --> 00:15:20.400
This is the prototype syntax.

238
00:15:20.430 --> 00:15:22.380
This is what's what's happening underneath.

239
00:15:22.590 --> 00:15:24.060
And it gets very confusing.

240
00:15:24.090 --> 00:15:26.190
Now, this is a very, very simple thing.

241
00:15:26.370 --> 00:15:28.650
We are just logging something to the console.

242
00:15:28.890 --> 00:15:35.400
Now, imagine if you were to create an application that how like like at least 200, 300 lines of code.

243
00:15:35.970 --> 00:15:42.570
Now, imagine the work that you have to do, but when it comes to class syntax, it's way easier if

244
00:15:42.570 --> 00:15:43.830
you use this syntax.

245
00:15:44.250 --> 00:15:47.100
We know our constructor, we know our methods.

246
00:15:47.100 --> 00:15:51.450
We know what extents, what class extends what.

247
00:15:51.750 --> 00:15:55.590
We know the instances that we have instantiated.

248
00:15:55.950 --> 00:15:57.180
We know all of that.

249
00:15:57.180 --> 00:16:01.720
And it is very simple to read this syntax is simpler than this one.

250
00:16:01.920 --> 00:16:05.010
That's why we just went over this syntax.

251
00:16:05.010 --> 00:16:10.230
But this and this is not the syntax that we will be using, because I told you that if you want to do

252
00:16:10.490 --> 00:16:17.100
a class oriented, then if you want to use classes, then you should do the proper syntax.

253
00:16:17.100 --> 00:16:19.120
You should not do like this prototypes.

254
00:16:19.470 --> 00:16:27.090
This was just so you can understand what is happening between behind the classes or underneath the classes

255
00:16:27.090 --> 00:16:28.880
and where the classes have come from.

256
00:16:29.640 --> 00:16:29.940
Right.

257
00:16:29.940 --> 00:16:34.700
And the classes, they do have a super keyword, which you cannot find in the prototypes.

258
00:16:34.710 --> 00:16:40.450
It was not there is not equivalent to the super keyword before E 2015.

259
00:16:41.100 --> 00:16:42.280
That's it for this lecture.

260
00:16:42.300 --> 00:16:44.090
See you guys in the next one.

