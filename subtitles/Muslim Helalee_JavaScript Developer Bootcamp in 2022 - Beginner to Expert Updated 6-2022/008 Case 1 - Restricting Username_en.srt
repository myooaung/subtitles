1
00:00:02,420 --> 00:00:07,610
Hi, everyone, in this lecture, we are going to go over the first case.

2
00:00:09,300 --> 00:00:17,820
All right, so in case one, we are working with restricting usernames now, this is the case, one,

3
00:00:17,820 --> 00:00:19,710
we have some requirements.

4
00:00:20,010 --> 00:00:26,000
The first requirement, these requirements are going to be implemented using our regular expressions,

5
00:00:26,010 --> 00:00:26,520
knowledge.

6
00:00:27,720 --> 00:00:30,690
Now, the there should be at least two letters.

7
00:00:31,050 --> 00:00:31,470
All right.

8
00:00:32,070 --> 00:00:33,570
Numbers should be at the end.

9
00:00:33,690 --> 00:00:36,990
If there are any in any numbers, they should be at the end.

10
00:00:37,290 --> 00:00:40,560
Letters can be either lowercase or uppercase.

11
00:00:40,740 --> 00:00:47,670
Now, these are the requirements that we as developers implement so that the user has to follow these

12
00:00:47,670 --> 00:00:51,130
requirements of of creating his user name.

13
00:00:51,270 --> 00:00:52,740
OK, excuse me.

14
00:00:53,520 --> 00:00:59,450
And for if there are two letters, they cannot contain numbers.

15
00:00:59,850 --> 00:01:08,330
So if you have like a two letter like let's say fo efo, then they are like one of these letters.

16
00:01:08,340 --> 00:01:10,720
It cannot be like a number like EF1.

17
00:01:11,190 --> 00:01:11,560
All right.

18
00:01:11,940 --> 00:01:16,620
So both of them should be like actual letters.

19
00:01:16,890 --> 00:01:20,750
If there are more than that, then they could contain numbers.

20
00:01:21,060 --> 00:01:25,350
So we need to have like we are going to end up with a pretty int..

21
00:01:25,350 --> 00:01:32,300
I would say I wouldn't I wouldn't say advanced, but an intermediate level kind of regular expression.

22
00:01:32,700 --> 00:01:37,770
So what I'm going to do is I'm going to create the regular expression first and then we are going to

23
00:01:37,770 --> 00:01:42,230
create our user name and we are going to test it tested.

24
00:01:42,240 --> 00:01:44,100
OK, we are just going to test that set.

25
00:01:44,340 --> 00:01:47,130
So let's open the console.

26
00:01:48,130 --> 00:01:56,440
All right, so we are going to say username check, username check, this is a regular expression.

27
00:01:56,650 --> 00:01:58,030
So everything comes in here.

28
00:01:58,330 --> 00:02:02,920
Now we want now let's go over the requirements one more time.

29
00:02:03,130 --> 00:02:05,260
So we want to have at least two letters.

30
00:02:05,530 --> 00:02:08,340
OK, the numbers should be at the end.

31
00:02:08,350 --> 00:02:11,230
So it means that the letters should be at the start.

32
00:02:12,380 --> 00:02:19,190
What is the character that we use to make sure that we are working with the beginning of string patterns?

33
00:02:19,210 --> 00:02:20,730
I'm sure you remember.

34
00:02:21,070 --> 00:02:22,680
So if I if I just come here.

35
00:02:22,870 --> 00:02:29,160
So Carrott matches the start of this of the string, so I'm just going to put in a carrot.

36
00:02:29,260 --> 00:02:33,440
It means that whatever comes after the carrot is going to be at the start.

37
00:02:33,700 --> 00:02:37,150
So at the start, we want to have letters and letters.

38
00:02:38,470 --> 00:02:41,230
They could be uppercase and lowercase.

39
00:02:43,970 --> 00:02:51,670
So I'm going to say all the uppercase letters and all the lowercase letters, they could be at the start,

40
00:02:51,950 --> 00:02:53,850
so the start part is done.

41
00:02:54,200 --> 00:02:55,880
So this part is done.

42
00:02:56,890 --> 00:03:03,160
OK, these two parts, actually, both of them, they are done, and now what we want to do is we want

43
00:03:03,160 --> 00:03:09,550
to make sure that we have at least two letters, OK, because that is the minimum.

44
00:03:09,550 --> 00:03:12,340
You cannot have like a blank username.

45
00:03:12,340 --> 00:03:14,010
You should at least write something.

46
00:03:14,320 --> 00:03:16,480
So we need to have at least two.

47
00:03:16,660 --> 00:03:23,230
That's why we are going to use quantities, specifiers, because we are implementing the quantity,

48
00:03:23,230 --> 00:03:26,170
the number of times something should be there.

49
00:03:26,470 --> 00:03:32,190
So it should be at least two and it could be like 10, 15 to an infinity number.

50
00:03:32,200 --> 00:03:35,320
It could be like 50, like 100 or 1000.

51
00:03:35,320 --> 00:03:38,260
We don't care about that, but there should be at least two.

52
00:03:38,440 --> 00:03:40,630
So we provided the minimum range.

53
00:03:40,780 --> 00:03:43,900
The maximum range could be specified by the user.

54
00:03:44,050 --> 00:03:49,900
You could go ahead and say like the maximum range for a user name could be like 140 characters, but

55
00:03:49,900 --> 00:03:50,920
I'm not going to do that.

56
00:03:51,100 --> 00:03:53,590
That's why we just specified the lower bound.

57
00:03:53,800 --> 00:03:56,080
The upper bound is up to the user.

58
00:03:56,080 --> 00:03:58,990
We want to provide the user with some flexibility as well.

59
00:03:59,740 --> 00:04:02,920
Now, after now, these are the letter of parts.

60
00:04:03,220 --> 00:04:04,440
What about the numbers?

61
00:04:04,840 --> 00:04:06,940
So we want to grab numbers as well.

62
00:04:06,970 --> 00:04:13,660
Right now we want to which we have to provide the pattern that allows for the numbers and that is this

63
00:04:13,660 --> 00:04:16,779
D it is going to grab all numbers.

64
00:04:16,779 --> 00:04:21,070
If we provided with a capital D, it is going to grab all the numbers.

65
00:04:21,519 --> 00:04:21,880
Right.

66
00:04:22,029 --> 00:04:26,950
And we want to grab the numbers that have zero or more occurrences.

67
00:04:27,430 --> 00:04:30,700
And you might ask, OK, why zero and more occurrences?

68
00:04:30,700 --> 00:04:36,220
Why not one or more occurrences or to be accurate, why asterisk.

69
00:04:36,220 --> 00:04:36,670
Why not?

70
00:04:36,670 --> 00:04:41,560
Plus because at the beginning we said at least two letters.

71
00:04:42,160 --> 00:04:48,340
If there are two, I'm not like my throat is closing up and I'm not sure what's happening and I apologize

72
00:04:48,340 --> 00:04:48,760
for that.

73
00:04:50,050 --> 00:04:56,050
At the beginning we said that we want at least two letters and if there are only two letters, they

74
00:04:56,050 --> 00:04:57,550
cannot contain numbers.

75
00:04:57,850 --> 00:05:05,380
So when they cannot contain numbers, it means that we have is zero occurrence of numbers.

76
00:05:06,070 --> 00:05:08,290
OK, so what is the zero occurrence?

77
00:05:08,290 --> 00:05:17,170
That's asterisk if you provide plus you should have at least one because plus is one or more matches.

78
00:05:17,170 --> 00:05:24,670
But Asterisk says zero because we have given the user of flexibility to not include any numbers if the

79
00:05:24,670 --> 00:05:25,420
user wants.

80
00:05:25,690 --> 00:05:30,120
But in that case, the user must have at least two letters.

81
00:05:30,880 --> 00:05:34,690
So if there are only two letters, they cannot contain numbers.

82
00:05:34,690 --> 00:05:37,530
So we don't have any occurrence of any number.

83
00:05:37,750 --> 00:05:39,790
That's why we are going to use the asterisk.

84
00:05:39,950 --> 00:05:41,430
I'm sure you got the point.

85
00:05:41,890 --> 00:05:45,610
So we are going to grab the asterisk and we are going to put it there.

86
00:05:45,850 --> 00:05:52,150
And now a cool thing is the other thing that the numbers should be at the end because the letters are

87
00:05:52,150 --> 00:05:58,050
at the start, the numbers, they should be at the end and let's put on the dollar sign.

88
00:05:58,510 --> 00:06:00,840
So this is a regular expression.

89
00:06:01,120 --> 00:06:02,180
Very, very simple.

90
00:06:02,530 --> 00:06:03,970
Now, let's check it out.

91
00:06:04,240 --> 00:06:05,860
So we have our user name.

92
00:06:07,360 --> 00:06:10,840
First off, I'm just going to say SDK software development kit.

93
00:06:11,170 --> 00:06:12,040
I mean, why not?

94
00:06:12,110 --> 00:06:12,750
That's cool.

95
00:06:13,210 --> 00:06:17,230
So let's say check status.

96
00:06:17,230 --> 00:06:20,820
We are checking for the status, whether it is true or false.

97
00:06:21,280 --> 00:06:27,610
So we are going to grab our user name check and which is a regular expression and we are going to test

98
00:06:27,940 --> 00:06:28,780
the user name.

99
00:06:30,820 --> 00:06:38,650
And we are going to log to the console, the checked status, so if I save it, we get through.

100
00:06:38,680 --> 00:06:40,450
Why why do we get through?

101
00:06:40,720 --> 00:06:45,430
Because we have at least two characters and then we have a number.

102
00:06:45,460 --> 00:06:48,460
We have like a third character, which is a number.

103
00:06:48,610 --> 00:06:49,660
So we have it sorry.

104
00:06:49,810 --> 00:06:54,690
We have at least two characters, which are letters and a third one is optional.

105
00:06:54,730 --> 00:07:00,340
The user can provide because we have specified the range so the user can provide two or more.

106
00:07:01,350 --> 00:07:10,560
So even if I were to come and this one out and to just provide SD or ČESKÉ software kit, we should

107
00:07:10,560 --> 00:07:13,410
see true as well, because this is the minimum requirement.

108
00:07:13,410 --> 00:07:21,060
But if I were to say, OK, we should get false because this is not we should have at least to see.

109
00:07:21,240 --> 00:07:23,190
So the lower bound can only be two.

110
00:07:23,190 --> 00:07:24,090
It cannot be one.

111
00:07:24,090 --> 00:07:25,340
We cannot go less than two.

112
00:07:25,560 --> 00:07:27,990
We can go above that like cattle.

113
00:07:29,330 --> 00:07:35,060
We can't go above that, but we cannot go below that, right, so we have tested it for the.

114
00:07:38,240 --> 00:07:45,580
There is yeah, we have tested it for the letters, let's test it for the numbers.

115
00:07:45,770 --> 00:07:52,640
So if I put in canine and we have said that at least two letters, there should be at least two letters.

116
00:07:53,150 --> 00:07:58,320
And one, there are two letters, they cannot contain numbers.

117
00:07:59,300 --> 00:08:01,970
That's why inside these brackets, we just have letters.

118
00:08:02,120 --> 00:08:03,900
And if I save it, we get a false.

119
00:08:04,370 --> 00:08:11,110
So whenever you're creating a regular expression, you should test it on all of the possible scenarios.

120
00:08:11,120 --> 00:08:18,410
I know it takes time, but this is how you, like, remove the issues from your software or your application

121
00:08:18,410 --> 00:08:21,080
or your webapp in case there are any.

122
00:08:21,110 --> 00:08:27,100
So your application should work perfectly fine in all 100 percent of scenarios.

123
00:08:27,260 --> 00:08:32,230
It doesn't matter what the scenario is, you shouldn't provide loopholes for users to exploit.

124
00:08:32,539 --> 00:08:34,220
So this works as well.

125
00:08:34,520 --> 00:08:39,409
Now let's do K K nine.

126
00:08:39,650 --> 00:08:44,750
We should get through because we have at least two letters and then we have a number and that number

127
00:08:44,750 --> 00:08:45,410
is at the end.

128
00:08:45,620 --> 00:08:53,930
If this number is by any means in the front, we get we should do this.

129
00:08:54,080 --> 00:08:58,370
We get a false because we have said that numbers, they appear at the end s..

130
00:08:58,700 --> 00:09:03,200
So so far everything is working perfectly fine and.

131
00:09:05,340 --> 00:09:09,750
And I'm just going to say Java script.

132
00:09:11,340 --> 00:09:16,840
Rux, so now this is everything that we have done, rocks like.

133
00:09:18,150 --> 00:09:24,450
3000, if you know what I mean, Servet, and we get true because all of the conditions, all of the

134
00:09:24,450 --> 00:09:25,430
conditions are met.

135
00:09:25,710 --> 00:09:28,140
So now we are done with this.

136
00:09:28,140 --> 00:09:29,070
We are done with this.

137
00:09:29,070 --> 00:09:36,090
But because I really care about you, I'm going to give you another comment and I'm going to just sit

138
00:09:36,090 --> 00:09:40,590
right here and it says it breaks down this regular expression.

139
00:09:40,920 --> 00:09:45,990
This is because I really care about your learning, about you learning every part of it.

140
00:09:46,140 --> 00:09:52,050
And that's why, in case you forget, you can come back and you can see which part actually does what.

141
00:09:52,500 --> 00:09:55,050
I just did this and I've inserted it.

142
00:09:55,350 --> 00:09:57,300
And good luck.

143
00:09:57,320 --> 00:09:59,250
See you guys in the next case.

