1
00:00:02,410 --> 00:00:07,120
Hi, everyone, in this letter, we are going to talk about Function Expression's.

2
00:00:08,800 --> 00:00:17,920
All right, so what our function expressions now functions when functions are stored inside variables,

3
00:00:18,490 --> 00:00:20,460
they are called function expressions.

4
00:00:20,620 --> 00:00:23,700
So let's go ahead and let's open this with live server.

5
00:00:24,370 --> 00:00:27,640
And what I'm going to do is I'm just going to bring it here.

6
00:00:27,640 --> 00:00:29,270
And let's close this page.

7
00:00:29,290 --> 00:00:31,850
Let's open it with let's go to the console.

8
00:00:31,870 --> 00:00:32,290
All right.

9
00:00:33,070 --> 00:00:41,260
So when functions, they are passed in as stored data for a variable, then they are called function

10
00:00:41,260 --> 00:00:41,970
expressions.

11
00:00:42,430 --> 00:00:49,390
So when they are standalone named functions, they are called function declarations or function statements.

12
00:00:49,570 --> 00:00:54,310
And when they are stored inside variables, they're called function expressions.

13
00:00:54,580 --> 00:00:57,780
Function expressions are also anonymous functions.

14
00:00:57,910 --> 00:00:59,620
It means they have no name.

15
00:01:00,010 --> 00:01:00,430
All right.

16
00:01:01,690 --> 00:01:05,730
So let's go ahead and let's create a regular function.

17
00:01:06,110 --> 00:01:06,430
Right.

18
00:01:06,550 --> 00:01:10,240
So what I'm going to do is I'm going to create a function expression right off the bat.

19
00:01:10,480 --> 00:01:16,690
So we have illit and we are going to give it a variable name that is Calc Nums.

20
00:01:17,950 --> 00:01:24,940
All right, and we are going to set it equal to function now, keep in mind that this function has no

21
00:01:24,940 --> 00:01:25,220
name.

22
00:01:25,240 --> 00:01:27,370
So we do not provide it with the name.

23
00:01:27,940 --> 00:01:28,410
Right.

24
00:01:28,420 --> 00:01:35,980
And we are going to say Z and W, we provide two parameters for this function and we want the function

25
00:01:35,980 --> 00:01:36,940
to return.

26
00:01:38,540 --> 00:01:47,300
What does it what should it return, it should return zipless to W, divided by Z minus, let's save

27
00:01:47,300 --> 00:01:47,400
it.

28
00:01:47,720 --> 00:01:54,200
So now what we could what we can do with this, the way we can call this function is remember that when

29
00:01:54,200 --> 00:01:57,870
we call the function, we call the function by the function name.

30
00:01:58,310 --> 00:02:06,020
Now here the function doesn't have a name, but this variable has a name and that variable name acts

31
00:02:06,020 --> 00:02:07,700
as the function name.

32
00:02:08,690 --> 00:02:11,460
And you might ask, OK, how is this possible?

33
00:02:12,770 --> 00:02:22,580
The reason that this this is possible is because functions are not objects, but they behave like objects.

34
00:02:22,620 --> 00:02:28,510
Other data types would be them prime, primitive or reference steps.

35
00:02:28,760 --> 00:02:33,440
They can behave like objects, but they are not objects.

36
00:02:33,770 --> 00:02:34,100
Right.

37
00:02:35,090 --> 00:02:42,890
So the way we can access this function is through the variable name and that variable name becomes the

38
00:02:42,890 --> 00:02:44,120
name of this function.

39
00:02:44,810 --> 00:02:45,100
All right.

40
00:02:45,200 --> 00:02:48,020
So let's go ahead on this call coconut's.

41
00:02:48,350 --> 00:02:55,190
And when we open parentheses, we get an Intellisense that we can insert a number or the result is going

42
00:02:55,190 --> 00:03:04,850
to be a number and we should insert Z first and then W so if I were to insert Z 15 and had comma, you

43
00:03:04,850 --> 00:03:13,550
guys can see that the underlying has shifted from Z to W, and when I put it to any five there and unsaved,

44
00:03:13,760 --> 00:03:16,180
we are going to get as a result negative for.

45
00:03:16,850 --> 00:03:19,780
All right, so let's pass in another value.

46
00:03:20,360 --> 00:03:23,040
We could call it as many times as we want 50.

47
00:03:23,360 --> 00:03:24,320
We are going to get three.

48
00:03:25,040 --> 00:03:25,580
All right.

49
00:03:25,910 --> 00:03:28,550
So this is a function expression.

50
00:03:29,000 --> 00:03:35,930
We use function expressions because when when we just one right off the bat control, the result of

51
00:03:35,930 --> 00:03:38,340
that function is stored inside a variable.

52
00:03:38,960 --> 00:03:39,280
All right.

53
00:03:39,500 --> 00:03:41,630
So this is a function expression.

54
00:03:42,240 --> 00:03:46,370
We can also use functions in arrays and objects.

55
00:03:46,800 --> 00:03:47,150
All right.

56
00:03:47,170 --> 00:03:52,490
So what I'm going to do is we are going to go ahead and we are going to work with functions in arrays

57
00:03:52,490 --> 00:03:53,560
and in objects.

58
00:03:53,570 --> 00:03:55,660
I'm just going to go ahead and paste in this comment.

59
00:03:56,030 --> 00:03:57,500
So now let's go ahead and let's see.

60
00:03:57,500 --> 00:04:05,930
We have a a function we have a function declaration that says average mike score.

61
00:04:06,890 --> 00:04:14,270
Notice the camel casing and we have two parameters, one is score, and the next one is my score.

62
00:04:14,660 --> 00:04:19,190
All right, so this is a function and this function is going to return.

63
00:04:20,180 --> 00:04:20,540
What?

64
00:04:20,540 --> 00:04:25,670
It is going to return my score plus five.

65
00:04:27,490 --> 00:04:30,220
Divided by score, right?

66
00:04:30,400 --> 00:04:32,660
So this is what this function is going to return.

67
00:04:32,950 --> 00:04:38,920
Now, what I want to do is I want to create another function, which is actually a function expression,

68
00:04:39,430 --> 00:04:45,970
just to show you how we can work with these functions and function expressions, OK, and how we can

69
00:04:45,970 --> 00:04:49,020
use them inside arrays and inside objects.

70
00:04:49,790 --> 00:04:50,110
Right.

71
00:04:50,500 --> 00:04:51,340
So now.

72
00:04:52,900 --> 00:05:01,600
What I'm going to do is I'm going to just call it average Joey score, so the naming convention is the

73
00:05:01,600 --> 00:05:01,920
same.

74
00:05:01,930 --> 00:05:05,220
So we have average my score, average Joes score.

75
00:05:05,260 --> 00:05:05,590
Right.

76
00:05:05,770 --> 00:05:08,680
And we are going to say it is equal to function.

77
00:05:09,240 --> 00:05:10,960
Let's create the block as well.

78
00:05:12,010 --> 00:05:15,220
And we are going to pass in two parameters as well.

79
00:05:15,550 --> 00:05:22,300
And the parameters, one of the parameters is going to be score and the other one is going to be Joey

80
00:05:23,230 --> 00:05:23,870
score.

81
00:05:24,370 --> 00:05:24,820
All right.

82
00:05:25,540 --> 00:05:29,320
So in here, what do I want this function expression to do?

83
00:05:31,060 --> 00:05:39,200
I wanted to return to just go ahead and return the JOI score divided by the score.

84
00:05:39,790 --> 00:05:46,420
Now keep in mind the mix score, whatever is the mike score is going to be added by five, then divided

85
00:05:46,420 --> 00:05:49,120
by score because Mike has been a good student.

86
00:05:49,120 --> 00:05:52,140
So I just give him five five scores for free.

87
00:05:52,480 --> 00:06:00,610
But as far as Joe is concerned, Joe is not a super attendance student, is like the attention is all

88
00:06:00,610 --> 00:06:05,110
over the place and I'm not going to give him five extra scores extra mark.

89
00:06:05,110 --> 00:06:07,480
OK, so keep this in mind as one.

90
00:06:08,850 --> 00:06:15,110
So now what I'm going to do is I'm going to go ahead and I'm going to create a I'm going to create a

91
00:06:15,390 --> 00:06:22,170
an array because we want to use these two functions inside an array and why they are function declarations

92
00:06:22,170 --> 00:06:23,430
and function expressions.

93
00:06:23,850 --> 00:06:30,620
Because I want to show you guys that inside arrays and objects, we can use both kinds of functions.

94
00:06:30,630 --> 00:06:35,880
So it doesn't matter whether you have a function expression or you have a function declaration.

95
00:06:36,360 --> 00:06:42,570
So what I'm going to do is I'm going to use const for creating arrays because this is a good practice,

96
00:06:42,870 --> 00:06:44,220
if I can get it right.

97
00:06:44,250 --> 00:06:52,800
So this is CONSED and I'm going to name this const this array scores and in here I'm going to call the

98
00:06:52,800 --> 00:06:55,140
functions by their function names.

99
00:06:55,290 --> 00:06:55,590
Right.

100
00:06:55,770 --> 00:07:02,610
So I'm going to say average my score and average Joe we score.

101
00:07:02,850 --> 00:07:09,960
Now keep in mind that this is, this is let this is a variable declaration and this variable declaration

102
00:07:09,960 --> 00:07:12,260
has been done in the global scope.

103
00:07:12,450 --> 00:07:17,250
It's not limited to any scope when it is granted in the global scope.

104
00:07:17,250 --> 00:07:21,150
It is accessible in any other scope that follows it.

105
00:07:21,470 --> 00:07:21,810
All right.

106
00:07:21,900 --> 00:07:25,230
And this function has also been declared in the global scope.

107
00:07:25,410 --> 00:07:32,880
So we can access this because global scope is the parent of all other scopes so we can access the values

108
00:07:32,880 --> 00:07:38,640
from the parent, or that's why we can access these two functions inside this array.

109
00:07:39,600 --> 00:07:42,000
And keep in mind, they are not strings.

110
00:07:42,000 --> 00:07:44,190
They're are valid JavaScript identifiers.

111
00:07:44,370 --> 00:07:49,950
That's why we do not provide them with quotes or quotations.

112
00:07:50,190 --> 00:07:56,940
So now what I want to do is I want to loop loop through this array and we know how we can do that.

113
00:07:56,940 --> 00:08:02,280
We create a for loop and then let's go ahead and let's get provided with the structure as well.

114
00:08:02,610 --> 00:08:06,960
The loop variable is going to be I and it is going to start from zero.

115
00:08:08,040 --> 00:08:09,720
So this is the initial expression.

116
00:08:09,720 --> 00:08:15,180
What is the condition in the loop should run as long as the scores.

117
00:08:16,260 --> 00:08:20,000
Scores that length and what is the scores dazzling?

118
00:08:20,250 --> 00:08:26,350
So first off, before before even applying that, let's go ahead and let's consider.

119
00:08:26,370 --> 00:08:28,440
Look, I mean, I should have done it before.

120
00:08:28,770 --> 00:08:29,820
Let's consider log.

121
00:08:29,820 --> 00:08:33,090
The scores are right and let's see what what we get there.

122
00:08:33,299 --> 00:08:36,900
And then you guys can see the lengths to and we get two functions.

123
00:08:36,900 --> 00:08:41,130
And when I click on it, we have a function and this function.

124
00:08:41,130 --> 00:08:45,030
And in the end, the what is this called?

125
00:08:45,030 --> 00:08:47,790
The tooltip kind of forgot the word there.

126
00:08:48,090 --> 00:08:50,280
The tooltip shows me the function itself.

127
00:08:50,580 --> 00:08:58,400
I mean, it doesn't it doesn't calculate anything because we have not Pastan arguments to these parameters.

128
00:08:58,410 --> 00:09:02,600
That's why it returns the arguments as no.

129
00:09:02,880 --> 00:09:11,160
And this is where no one is used, because we have we have provided it no by like deliberately.

130
00:09:11,160 --> 00:09:15,210
And until we pass in arguments, it is going to show no.

131
00:09:15,600 --> 00:09:17,970
And the arguments are no, the color is no.

132
00:09:18,120 --> 00:09:23,100
And the length is to the name is Mike and the rest of the information there.

133
00:09:23,580 --> 00:09:27,040
So I'm just going to go ahead and I'm going to comment that one out.

134
00:09:27,900 --> 00:09:30,480
So what do I want this for loop to do?

135
00:09:30,870 --> 00:09:37,340
I want to create another variable that is a result and I want to capture the result.

136
00:09:37,500 --> 00:09:44,570
So the result is going to be the scores whenever the scores and we are going to get the index.

137
00:09:45,150 --> 00:09:53,610
So when the new variable has a value of zero and when it comes here, this course that has we we are

138
00:09:53,610 --> 00:09:56,960
going to access an index of zero.

139
00:09:57,270 --> 00:09:58,830
So what is the index of zero?

140
00:09:58,830 --> 00:10:02,310
The index of zero is going to be the average mix score function.

141
00:10:03,000 --> 00:10:04,530
That is going to be the index of zero.

142
00:10:04,710 --> 00:10:09,720
And for the second time when this loop runs, which I just forgot to add the increment.

143
00:10:11,130 --> 00:10:18,750
The variable is going to have a value of one and the discourse is going to access the item that has

144
00:10:18,930 --> 00:10:25,130
a an index of one associated with it and it is going to grab the average Jobi score.

145
00:10:25,180 --> 00:10:25,560
Right.

146
00:10:25,690 --> 00:10:32,260
And we want to store this information inside this results variable.

147
00:10:32,580 --> 00:10:34,000
And what do we want to do with that?

148
00:10:34,020 --> 00:10:36,420
We want to simply cancel the log in.

149
00:10:36,570 --> 00:10:42,050
Of course, in real world applications, we are going to do so much more with that.

150
00:10:42,270 --> 00:10:45,180
But for now, we just want to consider log it.

151
00:10:46,180 --> 00:10:52,680
Consider last resort, let's save it, and now you guys can see we actually get the functions back because

152
00:10:52,680 --> 00:10:56,790
we have not provided any arguments to those functions.

153
00:10:57,000 --> 00:10:58,830
That's why we get the functions.

154
00:10:59,090 --> 00:11:01,960
So how can we add the argument to those functions?

155
00:11:02,190 --> 00:11:10,640
Now we know that this cause this cause Arae, it grabs either the first function or the second function.

156
00:11:10,890 --> 00:11:15,180
So whenever it grabs the first function, this is how it is going to look like.

157
00:11:15,570 --> 00:11:22,950
So when the eye is zero, it is going to grab the index of zero item, the item which is associated

158
00:11:22,950 --> 00:11:24,060
with the index of zero.

159
00:11:24,210 --> 00:11:30,040
And the item associated with that is this function and it is going to be passed right here.

160
00:11:30,570 --> 00:11:37,590
So when the function is passed right here, so technically we can add parentheses and inside those parentheses

161
00:11:37,740 --> 00:11:40,260
we can add our arguments.

162
00:11:40,710 --> 00:11:42,150
So this is how cool it is.

163
00:11:42,360 --> 00:11:47,190
So what I'm going to do is I'm going to go back to the scores array and I'm going to do this.

164
00:11:48,620 --> 00:11:56,780
All right, so whenever whenever we grab the I'm just going to pass in the eye because that's why we're

165
00:11:56,780 --> 00:11:57,890
using the for a loop.

166
00:11:58,280 --> 00:11:58,670
All right.

167
00:11:58,820 --> 00:12:08,120
So whenever the eye has a value of zero, the condition is true because the length of this entire array

168
00:12:08,120 --> 00:12:10,790
is two and zero is less than two.

169
00:12:11,300 --> 00:12:11,600
Oops.

170
00:12:11,600 --> 00:12:17,440
I shouldn't have saved it shows both of these scores here and zero is less than two.

171
00:12:17,720 --> 00:12:20,540
So this condition is true and this code runs.

172
00:12:20,750 --> 00:12:26,230
And when this code runs, we grab the scores are right and the eye has a value of zero.

173
00:12:26,570 --> 00:12:30,490
So we access the item that has an index of zero.

174
00:12:30,740 --> 00:12:31,940
What is that item?

175
00:12:31,940 --> 00:12:37,550
The item is the average mike score and even the average mike score is access.

176
00:12:37,790 --> 00:12:40,100
We pass in two arguments to that.

177
00:12:40,370 --> 00:12:46,910
The first argument is going to be the score and the second argument is going to be the score for that

178
00:12:46,910 --> 00:12:48,350
specific person.

179
00:12:49,720 --> 00:12:56,140
That's why for Mike, for Mike, we are going to get point to five and for Joey we are going to get

180
00:12:56,140 --> 00:13:01,020
point to and the reason that we get point to five is because we added five to this score.

181
00:13:01,420 --> 00:13:01,780
All right.

182
00:13:01,870 --> 00:13:03,810
And then we consider the results.

183
00:13:04,390 --> 00:13:12,340
This is how cool it is when we use functions with arrays and when we use loops with arrays.

184
00:13:12,550 --> 00:13:12,820
Right.

185
00:13:12,830 --> 00:13:14,200
This is how cool it is.

186
00:13:15,860 --> 00:13:18,380
So this is how we can use.

187
00:13:20,120 --> 00:13:28,880
A race with with functions now, well, actually, I wanted to, like, combine I wanted to finish this

188
00:13:28,880 --> 00:13:33,620
lecture here, but now looking at the at the time, it's been 14 minutes almost.

189
00:13:33,860 --> 00:13:38,660
So the object and function part we are going to cover in the next lecture.

190
00:13:38,660 --> 00:13:40,670
So see you guys in the next one.

