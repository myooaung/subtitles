WEBVTT
1
00:00:01.190 --> 00:00:08.060
Hi, everyone, in this lecture, we're going to talk about the second case, which is password strength.

2
00:00:09.300 --> 00:00:09.900
All right.

3
00:00:10.200 --> 00:00:17.100
So in the second case, the requirements are simple, but the regular expression is going to be a bit

4
00:00:17.100 --> 00:00:17.990
more complicated.

5
00:00:18.000 --> 00:00:20.640
You could say this is an advance regular expression.

6
00:00:21.030 --> 00:00:24.050
Password's must be at least eight characters.

7
00:00:24.180 --> 00:00:28.460
It doesn't say letters or like numbers or whatever.

8
00:00:28.500 --> 00:00:30.060
They should be at least eight characters.

9
00:00:30.330 --> 00:00:33.750
Passwords must contain at least two consecutive digits.

10
00:00:34.170 --> 00:00:39.540
So to do the digits, digits, two digits, which are next to each other.

11
00:00:39.900 --> 00:00:45.720
So first off, let's create the regular expression and I'm going to call it pass check.

12
00:00:47.280 --> 00:00:55.530
And OK, so first off, what we are going to do as we want to have at least eight, at least eight characters,

13
00:00:55.540 --> 00:00:57.870
OK, so we could have more than that.

14
00:00:58.140 --> 00:01:00.890
But the exact number is going to be eight.

15
00:01:00.910 --> 00:01:03.120
So we could have like at least eight.

16
00:01:03.120 --> 00:01:04.620
We could have 10, 12.

17
00:01:04.860 --> 00:01:07.990
Doesn't really matter, but there should be at least eight.

18
00:01:08.370 --> 00:01:14.130
So what I'm going to do is I'm going to create a positive look ahead and I'm going to say, so this

19
00:01:14.130 --> 00:01:17.370
is a positive look ahead because it is at the start.

20
00:01:17.760 --> 00:01:19.940
It is what we are looking for.

21
00:01:20.100 --> 00:01:26.270
What we are looking for is eight consecutive digits sorry, eight consecutive characters at the start.

22
00:01:26.280 --> 00:01:29.150
Those characters, they could be numbers or digits.

23
00:01:29.310 --> 00:01:34.160
That's why I'm just going to provide a lowercase W and the quantity specified.

24
00:01:34.980 --> 00:01:35.850
It could start.

25
00:01:36.090 --> 00:01:39.750
We could do this or we could just provide an eight both.

26
00:01:39.750 --> 00:01:42.690
In both cases it is going to work for us.

27
00:01:42.970 --> 00:01:51.090
OK, but for now I'm just going to provide at eight because the exact number of characters should be

28
00:01:51.090 --> 00:01:51.510
eight.

29
00:01:52.500 --> 00:01:56.610
If I provided eight or above, we could say that that works as well.

30
00:01:56.610 --> 00:01:58.200
But I'm going to do it.

31
00:01:58.360 --> 00:02:00.900
I'm going to do this regular expression differently.

32
00:02:01.170 --> 00:02:01.470
Right.

33
00:02:01.480 --> 00:02:06.030
So the first part of the regular expression is not in the second part.

34
00:02:06.690 --> 00:02:13.740
What do we have is that we are going to create another lookahead and this lookahead is going to look

35
00:02:13.740 --> 00:02:14.250
for.

36
00:02:16.610 --> 00:02:20.000
Where the letters they sent.

37
00:02:22.060 --> 00:02:27.670
And what do I mean by that, I mean, for example, let's you know what, let's go ahead and create

38
00:02:27.690 --> 00:02:27.900
it.

39
00:02:28.090 --> 00:02:30.610
Let's create a password.

40
00:02:31.630 --> 00:02:42.790
And let's say we have like cosmic tech now, cosmic tech has ten it has ten characters.

41
00:02:43.660 --> 00:02:50.290
And what I mean by this, lookahead that it is going to look for the last letter.

42
00:02:50.650 --> 00:02:51.010
All right.

43
00:02:51.010 --> 00:02:56.700
Because we have said that passwords must contain at least two consecutive digits.

44
00:02:57.010 --> 00:03:05.290
So wherever the last character is, B, that last character, a letter in this case, which is EDG or

45
00:03:05.290 --> 00:03:07.450
a number which is like, let's say eight.

46
00:03:08.680 --> 00:03:11.990
So after that, after that last character.

47
00:03:12.430 --> 00:03:13.780
So this could be in here.

48
00:03:13.780 --> 00:03:17.850
This could be in the middle as long as this lookahead is satisfied.

49
00:03:17.860 --> 00:03:19.490
This is true, OK?

50
00:03:19.960 --> 00:03:23.120
And because you can see that this is a condition as well.

51
00:03:23.380 --> 00:03:31.660
Now, when the last character and after the last character, we want to make sure that we insert two

52
00:03:31.660 --> 00:03:36.650
numbers there and we want to make sure that last character is actually a letter.

53
00:03:36.940 --> 00:03:43.660
So what I'm going to do is we are going to grab all the all the non numbers and then I'm going to pass

54
00:03:43.660 --> 00:03:51.730
in numbers how many times I want this number to be I want this number to be at least two times, but

55
00:03:51.940 --> 00:03:55.030
this number could have zero or more occurrences.

56
00:03:55.330 --> 00:04:01.060
The reason for that is we might have take one to three and then after that we might have 45.

57
00:04:01.360 --> 00:04:04.900
So in this case, this number actually has five occurrences.

58
00:04:05.210 --> 00:04:08.130
It doesn't have like zero or two occurrences.

59
00:04:08.410 --> 00:04:10.630
That's why we are going to do it like this.

60
00:04:10.750 --> 00:04:18.430
So if I were to save it and cancel log, it canceled log.

61
00:04:20.170 --> 00:04:23.560
And let's go ahead and check it out.

62
00:04:24.010 --> 00:04:31.810
Let's a pass check that Servet, it still says invalid, regular expression, nothing to repeat at.

63
00:04:32.200 --> 00:04:33.760
Oh, we didn't test it.

64
00:04:33.770 --> 00:04:34.300
I'm sorry.

65
00:04:34.840 --> 00:04:37.120
This is check status.

66
00:04:37.280 --> 00:04:38.920
This is not pass check.

67
00:04:39.310 --> 00:04:42.160
This is check status.

68
00:04:43.070 --> 00:04:49.540
OK, so I'm going to say let check status be equal to scrub or pass.

69
00:04:49.540 --> 00:04:53.550
Check the test that's passing the password.

70
00:04:53.560 --> 00:04:54.790
That's how it works.

71
00:04:55.750 --> 00:04:59.530
So we have pass check test.

72
00:05:01.090 --> 00:05:02.650
Nothing to repeat.

73
00:05:04.240 --> 00:05:10.120
OK, so this is the password, so this is our first.

74
00:05:11.030 --> 00:05:14.570
And this is our second lookahead.

75
00:05:17.020 --> 00:05:18.400
Oh, this is incorrect.

76
00:05:18.850 --> 00:05:23.920
We shouldn't have zero more occurrences of this number, we're going to have zero more or more occurrences

77
00:05:24.250 --> 00:05:27.100
of the thing, which is not a number.

78
00:05:27.340 --> 00:05:30.320
We could have zero more zero or more occurrences of that.

79
00:05:30.790 --> 00:05:37.630
So this is how this aid is going to work with this asterisk, because we have said eight, but we have

80
00:05:37.630 --> 00:05:39.400
more than clear clearly.

81
00:05:39.610 --> 00:05:44.200
And those more than eight, they are compensated by this asterisk.

82
00:05:44.470 --> 00:05:49.030
That's why when the asterisk asterisk was gone, we didn't have the repeat.

83
00:05:49.330 --> 00:05:54.790
So when I say it is true because we have at least eight characters in here, this is checking for the

84
00:05:54.790 --> 00:05:58.600
eight characters and we have at least two consecutive digits.

85
00:05:58.870 --> 00:06:06.400
And Haridas, so if I were to come in this one out and if I do one, we are going to get false because

86
00:06:07.210 --> 00:06:09.430
we don't have two consecutive digits.

87
00:06:09.700 --> 00:06:14.330
We have only one if I put it like 12.

88
00:06:14.380 --> 00:06:15.520
This is going to return.

89
00:06:15.520 --> 00:06:18.670
True, because we have two consecutive digits.

90
00:06:19.000 --> 00:06:24.100
OK, so this is going to be it for our second case and for Uri's.

91
00:06:24.370 --> 00:06:26.560
I'm just going to provide you with this as well.

92
00:06:26.560 --> 00:06:30.070
In case you get confused, you can go ahead and check this one out.

93
00:06:31.590 --> 00:06:36.720
This is a quantity specified, they're looking for the exact number of occurrences, which is eight.

94
00:06:36.750 --> 00:06:37.530
So.

95
00:06:38.480 --> 00:06:46.250
Should know it doesn't work like that, OK, so I'm just going to go over this one more time, the first

96
00:06:46.580 --> 00:06:53.390
lookahead the first condition was that we should have characters and we should have we should have characters

97
00:06:53.390 --> 00:07:01.450
be those numbers or letters or a combination of them, and they should be at least eight.

98
00:07:02.450 --> 00:07:05.950
Then the second lookahead said that, what do we want?

99
00:07:06.200 --> 00:07:09.950
We want wherever the number, the numbers end.

100
00:07:11.240 --> 00:07:18.240
OK, so those numbers which end there might have zero occurrence or they might have more than that zero

101
00:07:18.240 --> 00:07:18.720
occurrence.

102
00:07:19.040 --> 00:07:25.130
We want to insert two digits so you can see that then the numbers there and here.

103
00:07:25.670 --> 00:07:31.280
And when the numbers in here, how many occurrences do do those nine numbers have?

104
00:07:31.610 --> 00:07:35.180
So this is where the nine numbers and how many occurrences they have.

105
00:07:35.180 --> 00:07:36.650
They have 10 occurrences.

106
00:07:36.920 --> 00:07:38.620
So they could have 10 occurrences.

107
00:07:38.630 --> 00:07:39.560
We don't care about that.

108
00:07:39.890 --> 00:07:42.800
But right after that, we should have two digits.

109
00:07:43.580 --> 00:07:51.290
OK, so we are looking for where for where the numbers they end were the non number.

110
00:07:51.290 --> 00:07:54.140
And I hope, like, this is the confusing part.

111
00:07:55.220 --> 00:07:56.230
The rest is clear.

112
00:07:56.390 --> 00:07:58.410
So I'm just going to go over this one more time.

113
00:07:58.850 --> 00:08:01.200
So this is where the union number ends?

114
00:08:01.250 --> 00:08:02.420
It's right at this.

115
00:08:02.840 --> 00:08:05.270
So I'm just going to go ahead and capitalise this edge.

116
00:08:06.130 --> 00:08:08.240
OK, so if I say it, we still get through.

117
00:08:08.480 --> 00:08:10.840
So this is where that number ends.

118
00:08:11.630 --> 00:08:15.640
So how many occurrences do those nine numbers have?

119
00:08:15.890 --> 00:08:20.690
They have zero or more occurrences because there are clearly ten of those.

120
00:08:20.870 --> 00:08:23.460
So it's not zero and it isn't more than zero.

121
00:08:23.480 --> 00:08:23.860
Right.

122
00:08:24.380 --> 00:08:28.050
And right after that, we should have two digits.

123
00:08:28.700 --> 00:08:36.799
So if I were to provide 25 here, then in this context of 25, what this is going to refer to, I'm

124
00:08:36.799 --> 00:08:38.440
going to give you I'm going to tell you what.

125
00:08:38.750 --> 00:08:44.390
So we said that we want two consecutive digits and these two consecutive digits are going to be this

126
00:08:44.420 --> 00:08:44.900
12th.

127
00:08:45.170 --> 00:08:47.740
We are not considering this 25.

128
00:08:47.750 --> 00:08:48.290
Why?

129
00:08:48.740 --> 00:08:55.640
Because in here we said we want to look for when the non numbers are finishing, are finishing.

130
00:08:55.910 --> 00:08:57.110
They have finished here.

131
00:08:57.530 --> 00:09:04.040
And this asterisk is going to give us the occurrences for the union numbers and then we are going to

132
00:09:04.040 --> 00:09:05.030
have two digits.

133
00:09:05.180 --> 00:09:07.400
So right after it, you are going to have 12.

134
00:09:07.550 --> 00:09:09.940
So we are not considering this 25.

135
00:09:09.950 --> 00:09:13.850
OK, so this is how this is going to work and we still get through.

136
00:09:13.940 --> 00:09:16.670
It means that this password is actually accurate.

137
00:09:17.360 --> 00:09:18.570
That's it for this lecture.

138
00:09:18.590 --> 00:09:20.180
See you guys in the next one.

