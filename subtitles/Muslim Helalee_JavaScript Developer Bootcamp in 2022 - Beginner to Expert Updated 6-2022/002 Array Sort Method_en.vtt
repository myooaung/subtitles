WEBVTT
1
00:00:02.080 --> 00:00:02.870
Hi, everyone.

2
00:00:02.890 --> 00:00:07.000
In this next year, we are going to talk about the array sword method.

3
00:00:08.350 --> 00:00:15.190
All right, so the array of Metho Salzhauer are race based based on their based on the alphabet's,

4
00:00:15.220 --> 00:00:15.580
right.

5
00:00:15.850 --> 00:00:20.530
And also it mutates or changes the original right.

6
00:00:20.920 --> 00:00:26.170
So if you have two arrays like names and numbers here, we can go ahead and sort them based on their

7
00:00:26.650 --> 00:00:29.380
character code or get to be more accurate.

8
00:00:29.560 --> 00:00:32.530
So let's grab the names and we are going to call the sort method.

9
00:00:32.800 --> 00:00:38.830
And if I save it, we can see that Mark is number two and Sandia's number four because this assorting

10
00:00:39.130 --> 00:00:40.720
based on the alphabets.

11
00:00:40.720 --> 00:00:48.010
But if we were to go ahead and Tussaud numbers, we're going to get a different.

12
00:00:49.870 --> 00:00:57.970
Result because the arrest method by default is going to sort everything based on character quotes and

13
00:00:57.970 --> 00:01:01.300
based on the character, Conine has the biggest character.

14
00:01:01.330 --> 00:01:06.690
So that's why it's at the end, even though nine is smaller than twelve hundred and forty five.

15
00:01:07.060 --> 00:01:15.040
So if we come here to this IMDB page, we can see that the search methods, it says it gives us all

16
00:01:15.040 --> 00:01:20.650
the information about that, but it also gives us another kind of information and that is the compare

17
00:01:20.660 --> 00:01:21.100
function.

18
00:01:21.460 --> 00:01:28.540
So if you want our numbers to be sorted, ascending in an ascending order, like from small to big or

19
00:01:28.690 --> 00:01:34.340
in an in a descending order from big to small, we should we should pass in a compare function.

20
00:01:35.320 --> 00:01:38.140
Now we are going to create the COMPAR function.

21
00:01:38.460 --> 00:01:38.980
All right.

22
00:01:40.300 --> 00:01:49.390
So I'm going to say let me sort func and we are going to grab our array and we are going to call a sort

23
00:01:49.390 --> 00:01:50.050
method on it.

24
00:01:50.320 --> 00:01:53.470
We are just storing the results in here.

25
00:01:53.530 --> 00:01:53.920
That's it.

26
00:01:54.310 --> 00:01:56.890
So this is going to receive a callback function.

27
00:01:57.070 --> 00:01:58.870
It is going to have two parameters.

28
00:01:59.020 --> 00:02:01.190
The parameters could be almost anything.

29
00:02:01.210 --> 00:02:07.420
And just choosing A and B and working to return A minus B, save it.

30
00:02:07.430 --> 00:02:07.810
So.

31
00:02:09.389 --> 00:02:19.020
When we do that, it says returns, and B, if this function returns less than zero, then sort it unindexed

32
00:02:19.020 --> 00:02:20.580
index lower than B, right.

33
00:02:22.340 --> 00:02:30.050
And that is a comes first, so let's go ahead and let's go ahead, where is our console?

34
00:02:30.260 --> 00:02:31.760
Is it right here?

35
00:02:32.540 --> 00:02:37.550
And now let's go ahead and let's call this function, console the lock.

36
00:02:38.270 --> 00:02:40.070
And what I'm going to do is.

37
00:02:42.190 --> 00:02:51.910
I'm going to say sort funk, save it, and now you can see that this has arranged them from in an ascending

38
00:02:51.910 --> 00:02:53.810
order, like from small to big.

39
00:02:54.100 --> 00:02:59.080
So I'm just going to say small to big.

40
00:02:59.470 --> 00:02:59.780
Right.

41
00:03:00.040 --> 00:03:10.300
So this is sort of function it if the first value if the f the the result of this is negative one,

42
00:03:10.300 --> 00:03:15.880
which is less than zero, if it is negative one or less than zero, we see that A comes first.

43
00:03:16.120 --> 00:03:24.160
So let's say if if I come here so let's say A is five and B is eight, so five minus eight we are going

44
00:03:24.160 --> 00:03:29.820
to get three sorry, minus three and minus three is less than zero.

45
00:03:29.830 --> 00:03:30.120
Right.

46
00:03:30.370 --> 00:03:33.670
So when we get less than zero, eight comes first.

47
00:03:33.790 --> 00:03:35.440
It means that A is smaller.

48
00:03:35.830 --> 00:03:43.510
When we get a zero out of this, for example A is five and B is five in both cases.

49
00:03:43.630 --> 00:03:46.770
So it's for example, we have two fives in here.

50
00:03:46.780 --> 00:03:52.780
So if I were to just put in five, then it means that five minus five, we are going to get zero.

51
00:03:53.230 --> 00:03:57.550
When we get zero, we do not want to change the position.

52
00:03:57.550 --> 00:04:03.150
So return zero, leave and be unchanged with respect to each other.

53
00:04:03.250 --> 00:04:03.640
Right.

54
00:04:04.030 --> 00:04:11.770
But if this is a positive number, for example, let's say A is 11 in this case.

55
00:04:12.530 --> 00:04:16.769
And let me put in like a smaller number here as well.

56
00:04:16.779 --> 00:04:18.130
Let's put an eight here.

57
00:04:18.459 --> 00:04:20.070
So let's say A is eleven.

58
00:04:20.200 --> 00:04:22.150
Now it's comparing eleven with eight.

59
00:04:22.420 --> 00:04:26.000
When A is eleven, A, B is eight, we are going to get three.

60
00:04:26.530 --> 00:04:32.890
So when when this returns a positive number, we are going to say that the B comes first.

61
00:04:32.910 --> 00:04:33.240
Right.

62
00:04:33.610 --> 00:04:35.530
So F greater than zero.

63
00:04:35.900 --> 00:04:40.210
B to an index lower than A, that's B comes first.

64
00:04:40.210 --> 00:04:41.020
Very simple.

65
00:04:41.020 --> 00:04:46.150
Just keep this in mind that whenever we do A and B on this nums.

66
00:04:47.590 --> 00:04:51.190
It is going to grab all the all these numbers and compare them to each other.

67
00:04:51.400 --> 00:04:57.990
It is going to assign one to A and the other to be and it is going to set a return A minus B F.

68
00:04:58.000 --> 00:05:05.740
I'm just going to say in here, while I hope it's not getting it's not getting confusing.

69
00:05:06.070 --> 00:05:16.770
So I'm just going to write here f if the result I'm just going to say f result is greater than zero,

70
00:05:17.440 --> 00:05:18.400
what do we want to do.

71
00:05:18.550 --> 00:05:21.330
We want to we want the B to come first.

72
00:05:21.610 --> 00:05:22.750
So what comes first.

73
00:05:22.750 --> 00:05:23.680
The become first.

74
00:05:23.950 --> 00:05:27.570
So F a result is equal to zero.

75
00:05:28.510 --> 00:05:29.380
What do we want to do.

76
00:05:30.100 --> 00:05:32.440
We want to say unchanged.

77
00:05:32.740 --> 00:05:34.030
We don't want to change anything.

78
00:05:34.660 --> 00:05:40.600
Basically the position and f result is less than zero, which means negative.

79
00:05:41.380 --> 00:05:43.030
Then ACMS first.

80
00:05:43.420 --> 00:05:44.410
Very, very simple.

81
00:05:44.620 --> 00:05:49.550
Now you do the math, you do the substitution and you will understand what I mean.

82
00:05:49.900 --> 00:05:52.440
So there are two ways that this function works.

83
00:05:52.450 --> 00:05:57.550
So this is the first way that it's ascending from smaller to bigger.

84
00:05:57.910 --> 00:05:59.350
There is another way as well.

85
00:05:59.350 --> 00:06:03.550
And that I'm just going to say B minus A.

86
00:06:04.090 --> 00:06:05.620
B minus A.

87
00:06:07.320 --> 00:06:12.000
So and this is going to say big to small.

88
00:06:13.710 --> 00:06:19.100
Let's save it and let's come inside our log and we can see that it starts from Vegas and it goes to

89
00:06:19.100 --> 00:06:22.960
the smallest, but for this example, this only works.

90
00:06:23.740 --> 00:06:25.690
Keep this in mind for this example.

91
00:06:25.960 --> 00:06:27.790
For this one, we should change it.

92
00:06:28.060 --> 00:06:32.090
So this is going to be a and now this is going to be all right.

93
00:06:32.350 --> 00:06:35.950
So this is how the sword method works for iRace.

94
00:06:36.280 --> 00:06:41.140
See you guys in the next lecture where we will talk about the foreach method.

