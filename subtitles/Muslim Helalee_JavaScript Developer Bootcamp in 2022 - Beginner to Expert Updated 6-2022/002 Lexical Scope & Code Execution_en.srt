1
00:00:01,530 --> 00:00:07,410
Hi, everyone, in this last year, we're going to talk about the lexical scope and the executing of

2
00:00:07,410 --> 00:00:08,039
the code.

3
00:00:09,500 --> 00:00:12,840
All right, so we know how this code is compiled.

4
00:00:12,890 --> 00:00:15,150
We just talked about it in the previous lecture.

5
00:00:15,860 --> 00:00:21,290
Now, in this lecture, what I want to do is I want to talk about now that that now that our plan is

6
00:00:21,290 --> 00:00:23,390
set up, what is the next step?

7
00:00:23,420 --> 00:00:31,000
What is the executing the execution engine or the executioner is going to do?

8
00:00:31,430 --> 00:00:31,780
All right.

9
00:00:31,940 --> 00:00:37,380
So there is no more declaration, OK, just executable code.

10
00:00:37,610 --> 00:00:45,920
Now, in this case, line number two is actually two statements, it might seem like as one statement,

11
00:00:45,920 --> 00:00:49,130
but it is actually to stem the novel part.

12
00:00:49,130 --> 00:00:50,600
This part, this part.

13
00:00:50,600 --> 00:00:58,550
Remember it just the compiler asked the scope manager, have you heard of this identifier novel?

14
00:00:58,820 --> 00:01:01,790
And the scope manager said, no, but here is your scope.

15
00:01:02,180 --> 00:01:03,960
You are inside the global scope.

16
00:01:03,980 --> 00:01:05,960
We never talked about this value, right?

17
00:01:06,180 --> 00:01:12,890
We didn't talk about the value of that novel because the value of the novel is the second part.

18
00:01:12,890 --> 00:01:17,690
And this part is handled by the execution engine right now.

19
00:01:17,690 --> 00:01:24,110
The compiler created the plan for the identifiers and it gave it to the execution engine.

20
00:01:24,150 --> 00:01:30,950
OK, now, in the previous lecture, we talked about how a variable has two goals.

21
00:01:31,160 --> 00:01:38,270
It could either be a rough front, a targeted reference, or it could be a source reference where the

22
00:01:38,750 --> 00:01:44,660
variable is defined, where the identifier is defined or is initialized.

23
00:01:44,660 --> 00:01:47,930
That's where the that's the assignment of a value.

24
00:01:47,930 --> 00:01:54,800
That is where it is a targets reference and where it is called right here or right here in these two

25
00:01:54,800 --> 00:01:55,370
cases.

26
00:01:56,210 --> 00:02:03,140
Then they are in the source reference or in the source position because by this to function calls,

27
00:02:03,350 --> 00:02:05,460
we want to retrieve their values.

28
00:02:05,480 --> 00:02:12,950
OK, the target and the source references are created at the execution time and at compile time we create

29
00:02:12,950 --> 00:02:14,570
formal declarations.

30
00:02:14,570 --> 00:02:17,370
So we created formal declarations and their scope.

31
00:02:17,750 --> 00:02:23,180
So in this case, the people who are talking are the scope manager, again, the scope manager.

32
00:02:23,180 --> 00:02:32,480
And at this time, because the compilation is done, the virtual machine or the jet engine, or which

33
00:02:32,480 --> 00:02:40,520
I would like to call it the executioner, is now the execution engine and the scope manager or the scope

34
00:02:40,520 --> 00:02:41,920
manager and the executioner.

35
00:02:41,930 --> 00:02:43,310
They're going to talk now.

36
00:02:43,310 --> 00:02:49,970
The executioner is going to grab the identifier, which is the target reference from the scope or the

37
00:02:49,970 --> 00:02:55,640
scope manager, and assign a value to it because it should dedicate a location in memory to it.

38
00:02:56,030 --> 00:03:01,460
So it is going to ask the scope manager, have you heard of this novel?

39
00:03:01,670 --> 00:03:07,010
And the scope manager is going to say, yes, here is the value for it and this value is going to be

40
00:03:07,700 --> 00:03:08,270
stored.

41
00:03:08,270 --> 00:03:15,740
Nasacort stored inside a tiny space inside this, the memory by the execution engine.

42
00:03:15,800 --> 00:03:16,190
All right.

43
00:03:17,480 --> 00:03:22,420
So what we are going to do is we are going to go to line number four, OK?

44
00:03:23,990 --> 00:03:29,460
And because this is a declaration, we are not going to.

45
00:03:29,480 --> 00:03:36,140
This is not executable code from there, we are going to move on to line number nine because this is

46
00:03:36,140 --> 00:03:37,540
another declaration.

47
00:03:37,550 --> 00:03:41,670
We are not actually assigning any value to this.

48
00:03:41,690 --> 00:03:46,690
These are declarations we are not going to ask for anything from the scope manager.

49
00:03:46,700 --> 00:03:53,560
So we are just going to jump into line number 14 and line number 15.

50
00:03:53,600 --> 00:03:53,980
All right.

51
00:03:54,110 --> 00:03:57,580
So what I'm going to do is I'm just going to go ahead and remove that, OK?

52
00:03:57,770 --> 00:04:01,900
We don't really need to write code execution at that point.

53
00:04:02,120 --> 00:04:04,160
So what do we have on line 13?

54
00:04:04,430 --> 00:04:05,510
Online 13?

55
00:04:05,520 --> 00:04:08,360
The other book is in source position, right?

56
00:04:08,540 --> 00:04:10,940
Because we are not assigning anything to it.

57
00:04:11,120 --> 00:04:13,480
So we are retrieving values from it.

58
00:04:13,910 --> 00:04:22,280
The parenthesis, these parentheses, they execute the function, these they the other book is going

59
00:04:22,280 --> 00:04:23,480
to call the function.

60
00:04:23,750 --> 00:04:26,480
The parentheses is going to execute the function.

61
00:04:26,510 --> 00:04:26,840
Right.

62
00:04:28,420 --> 00:04:36,160
And the other book references the function that has a scope of itself, this is very, very important

63
00:04:36,160 --> 00:04:36,560
in here.

64
00:04:36,880 --> 00:04:40,930
Now, the execution, what is the execution or the execution engine is going to do?

65
00:04:41,230 --> 00:04:45,550
The execution engine is going to go to line number three in this case.

66
00:04:47,120 --> 00:04:55,400
All right, but the console identifier has not been declared there, so it is going to go to line number

67
00:04:55,400 --> 00:04:56,970
four before that, OK?

68
00:04:57,230 --> 00:04:59,900
It is going to go to line number four before that.

69
00:05:00,140 --> 00:05:06,200
And we know that the VA novel, it has not been it has been specified here.

70
00:05:06,320 --> 00:05:08,630
And the value for that is Moby Dick.

71
00:05:08,780 --> 00:05:12,140
And it is going to grab this and it is going to grab this value.

72
00:05:12,140 --> 00:05:14,910
It is going to store it inside the memory.

73
00:05:16,220 --> 00:05:16,690
All right.

74
00:05:16,700 --> 00:05:22,000
I hope you are not getting confused when we get we call the function a line number 13.

75
00:05:22,520 --> 00:05:27,010
This is the function call and these parentheses, they execute this function.

76
00:05:27,230 --> 00:05:34,460
So whenever we want to execute any function in the at runtime, we should go to the function itself.

77
00:05:34,640 --> 00:05:36,420
So what do we have inside this function?

78
00:05:36,440 --> 00:05:38,870
We have a formal declaration.

79
00:05:39,200 --> 00:05:39,550
All right.

80
00:05:39,740 --> 00:05:45,590
So inside this formal declaration, even though it is a formal declaration, we have an assignment of

81
00:05:45,590 --> 00:05:46,180
a value.

82
00:05:46,700 --> 00:05:51,600
This value should be stored inside the memory because we might use it down the road.

83
00:05:51,640 --> 00:05:51,950
Right.

84
00:05:52,850 --> 00:05:59,830
So this value is going to be used and this value is retrieved from the scope of this function.

85
00:06:00,020 --> 00:06:00,380
Right.

86
00:06:00,630 --> 00:06:04,160
And then the execution is going to go to line number five.

87
00:06:04,460 --> 00:06:04,850
All right.

88
00:06:05,120 --> 00:06:11,600
And in line number five, because this console, this console, I'm not talking about the log method,

89
00:06:11,900 --> 00:06:12,990
this log method.

90
00:06:13,220 --> 00:06:15,070
This is this is actually a method.

91
00:06:15,260 --> 00:06:16,580
So we have a console.

92
00:06:16,880 --> 00:06:22,830
The console is not specified or it is not declared inside this function.

93
00:06:23,150 --> 00:06:24,290
What do we do then?

94
00:06:25,220 --> 00:06:32,150
Now, the key to understanding any lexically scoped language is, oops, what did I do wrong here?

95
00:06:32,510 --> 00:06:37,070
So the key to understanding any just going to say console the log.

96
00:06:37,340 --> 00:06:38,450
What did we have here?

97
00:06:39,270 --> 00:06:47,970
I think we had some book in here, I'm just going to add some book now, the key to understanding any

98
00:06:47,970 --> 00:06:56,400
lexically scoped language is whenever we cannot find a reference to an identifier inside a specific

99
00:06:56,400 --> 00:06:59,870
scope or in this case, inside a function scope.

100
00:07:00,060 --> 00:07:01,250
This is very important.

101
00:07:01,620 --> 00:07:09,540
We go one level up, so consider log is going to come is going to get out of this function scope and

102
00:07:09,540 --> 00:07:11,280
it is going to come to the global scope.

103
00:07:11,910 --> 00:07:17,270
Now, inside the global scope, we do have an identifier called console.

104
00:07:17,730 --> 00:07:23,280
I know we have not explicitly specified that, but it is available to us by JavaScript.

105
00:07:24,270 --> 00:07:28,130
And this identifier, it has some properties and some methods.

106
00:07:28,410 --> 00:07:31,350
One of the methods is Laucke, right.

107
00:07:31,470 --> 00:07:33,210
And it is going to log some book.

108
00:07:33,210 --> 00:07:39,360
That's why there is no error on this line, because JavaScript is a lexically scoped language.

109
00:07:39,660 --> 00:07:41,280
It has a lexical scope.

110
00:07:41,400 --> 00:07:49,830
And in lexical scope, whenever we cannot find a reference to a source identifier, we go one level

111
00:07:49,830 --> 00:07:50,130
up.

112
00:07:50,520 --> 00:07:58,950
And when we come to this global scope, because console is defined inside the global scope, because

113
00:07:58,950 --> 00:08:04,770
it is defined there, we are not going to see an error, but we are going to see that some book has

114
00:08:04,770 --> 00:08:06,500
been printed to the console here.

115
00:08:06,690 --> 00:08:08,310
So I'm just going to go ahead and save it.

116
00:08:08,550 --> 00:08:12,480
Some book has been printed here, right, because of this function.

117
00:08:12,930 --> 00:08:19,050
So now the execution engine or the executioner is going to come to line number 14.

118
00:08:19,410 --> 00:08:30,330
And because this is and this code is executable now when it comes to here, because this code this part

119
00:08:30,330 --> 00:08:37,320
is the is the calling, the function and the parentheses is actually the part where executes the function.

120
00:08:37,480 --> 00:08:39,510
So we are going to go inside this function.

121
00:08:39,510 --> 00:08:40,789
We are going to go to this function.

122
00:08:41,070 --> 00:08:46,080
So because functions have scope's, we are going to insert the scope of this function.

123
00:08:46,500 --> 00:08:51,090
So we have a formal declaration from which we are going to grab the value and we are going to store

124
00:08:51,090 --> 00:08:52,080
it inside memory.

125
00:08:52,470 --> 00:08:54,690
And then again, we have the same thing.

126
00:08:55,260 --> 00:09:02,400
We have a concept along the console is not specified inside this function, but this console is different

127
00:09:02,400 --> 00:09:13,110
than this console because this console, online number 10, it actually grabs the value of this identifier

128
00:09:13,110 --> 00:09:14,030
right now.

129
00:09:14,400 --> 00:09:22,860
So before this console moves one level up, this console is going to grab the value of the right novel

130
00:09:23,280 --> 00:09:30,540
and it which is why and it is going to print it to the console lock, which is going to print it to

131
00:09:30,540 --> 00:09:36,690
the console because it is going to grab the value and it would seem something like this.

132
00:09:36,870 --> 00:09:38,250
So we have a console lock.

133
00:09:38,250 --> 00:09:41,940
It is going to grab this value the value inside this.

134
00:09:42,270 --> 00:09:46,650
It is going to grab this, copy it and it is going to paste it.

135
00:09:47,010 --> 00:09:47,520
Right.

136
00:09:47,520 --> 00:09:48,790
Oops, where am I.

137
00:09:49,320 --> 00:09:51,090
So it is going to come here.

138
00:09:51,330 --> 00:09:57,510
It is going to paste it here and put it inside quotes because this is not a valid identifier and it

139
00:09:57,510 --> 00:10:01,560
is going to come up and when we save it we get that right.

140
00:10:02,630 --> 00:10:09,890
So this is actually how it how the council log works and how a lexically scoped language works.

141
00:10:10,400 --> 00:10:10,760
All right.

142
00:10:10,970 --> 00:10:16,400
So so far we have talked about the and what was the previous lecture?

143
00:10:16,400 --> 00:10:23,500
We have talked about the compilation and also we have talked about the execution.

144
00:10:23,810 --> 00:10:31,790
So the takeaway here is that when we reference a variable in a target position, we need to look it

145
00:10:31,790 --> 00:10:32,210
up.

146
00:10:32,630 --> 00:10:37,510
When we reference a variable in a source position, we need to lock it up.

147
00:10:37,730 --> 00:10:43,940
So a look up process is like like a lock up process is involved in here.

148
00:10:44,250 --> 00:10:49,250
OK, so far we have looked at everything that we have looked for.

149
00:10:49,250 --> 00:10:50,810
We were able to find them.

150
00:10:51,110 --> 00:10:55,730
What about if we look for something and we cannot find it now?

151
00:10:55,730 --> 00:10:57,760
We are going to talk about that as well.

152
00:10:58,010 --> 00:11:02,240
But I just want to make sure that you understand this these two processes.

153
00:11:02,270 --> 00:11:06,010
This is a two process kind of thing in JavaScript.

154
00:11:06,560 --> 00:11:13,850
First one is the compilation where all the identifiers and the scopes are, and second step is the execution,

155
00:11:14,060 --> 00:11:17,180
where all the compilation of parsing runs.

156
00:11:17,420 --> 00:11:25,460
OK, and at the end of this lecture, I want to congratulate you, congratulate you on understanding

157
00:11:25,460 --> 00:11:26,630
how JavaScript works.

158
00:11:26,900 --> 00:11:29,330
You have learned how JavaScript works.

159
00:11:29,630 --> 00:11:31,580
So see you guys in the next lecture.

