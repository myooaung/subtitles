1
00:00:01,700 --> 00:00:05,960
Hi, everyone, in this lecture, we are going to fetch no facts.

2
00:00:07,590 --> 00:00:16,260
All right, so this is the website, and this is how the kind of data that we can have, if you go deep

3
00:00:16,260 --> 00:00:22,500
into this, you can have the type of trivia type, which is trivia math date year.

4
00:00:22,860 --> 00:00:28,490
And it is the default value or the default type is going to be trivia.

5
00:00:28,800 --> 00:00:35,120
And this is going to be the API to which we are we will be making our requests excuse me.

6
00:00:35,520 --> 00:00:42,990
And if I put it here and put like, I don't know, like 30, I don't like let's say 99 aged 99, you're

7
00:00:42,990 --> 00:00:43,790
going to get this.

8
00:00:44,070 --> 00:00:49,200
So an unknown number of names of a lot of the names of attributes of God and Corran.

9
00:00:49,650 --> 00:00:49,950
Yeah.

10
00:00:50,910 --> 00:00:59,100
OK, so I could say like 10, we are going to set a number of dots in a to track to track to.

11
00:01:00,150 --> 00:01:00,510
All right.

12
00:01:00,550 --> 00:01:06,210
So that's basically the API, the API in point to which we are we will be making our calls.

13
00:01:06,720 --> 00:01:11,120
And now if we come down here, let's see what else we have.

14
00:01:11,520 --> 00:01:16,260
So we have this is going to be the call to that API and.

15
00:01:16,710 --> 00:01:17,600
All right.

16
00:01:17,610 --> 00:01:25,200
So we have the call to that and see if if we need to make another request to this.

17
00:01:26,370 --> 00:01:33,550
All right, so that is going to give us this, but the thing is that this EPA is going to give us a

18
00:01:33,590 --> 00:01:34,290
tax.

19
00:01:34,590 --> 00:01:39,520
So instead of the Jason method, we are going to use the text method.

20
00:01:40,410 --> 00:01:41,090
All right.

21
00:01:41,130 --> 00:01:42,440
So, yeah, right here.

22
00:01:42,450 --> 00:01:46,320
So you can see that it says dot text and it is going to give us the data.

23
00:01:46,650 --> 00:01:53,670
So we are going to use the text method instead of the dot, Jason, because we are going to be getting

24
00:01:53,670 --> 00:01:54,240
text.

25
00:01:54,240 --> 00:01:57,540
So let's go ahead and let's create our UI.

26
00:01:58,480 --> 00:02:00,580
What I'm going to do to save you time.

27
00:02:00,600 --> 00:02:01,680
I'm just going to paste this.

28
00:02:02,100 --> 00:02:05,940
This is the fact button fact input and fact paragraph.

29
00:02:06,240 --> 00:02:14,430
When I click the fact when I put the fact input and click the fact button, the fact itself should come

30
00:02:14,430 --> 00:02:15,660
inside this paragraph.

31
00:02:16,290 --> 00:02:19,580
And now so the event is going to be on the fact button.

32
00:02:19,590 --> 00:02:20,820
So it's going to be added.

33
00:02:20,820 --> 00:02:21,560
Event listener.

34
00:02:22,140 --> 00:02:27,700
Let's go and say click and when we click we want to run a function.

35
00:02:28,470 --> 00:02:28,850
All right.

36
00:02:29,070 --> 00:02:34,200
Now what when whenever we click that button, what do we want to do?

37
00:02:34,210 --> 00:02:41,670
We want to grab the value of the input and provide it to that function for fetching the data.

38
00:02:42,120 --> 00:02:44,970
So how can we find out the value of the input?

39
00:02:44,980 --> 00:02:47,460
So I'm just going to call it number.

40
00:02:48,810 --> 00:02:50,640
And it's simple.

41
00:02:50,640 --> 00:02:53,160
We just say fact input value.

42
00:02:53,400 --> 00:02:55,650
And this is going to give us the value for that.

43
00:02:55,710 --> 00:03:04,700
We can go ahead and log it to the council to just check that our theory works to come here.

44
00:03:04,710 --> 00:03:05,520
All right.

45
00:03:05,520 --> 00:03:08,010
Let's open this up with my server.

46
00:03:09,050 --> 00:03:11,070
And there we go.

47
00:03:11,180 --> 00:03:13,760
So let's open up the console.

48
00:03:14,060 --> 00:03:15,790
I'm just going to put it on the side.

49
00:03:15,800 --> 00:03:18,900
Let's go to console father, always daughter.

50
00:03:19,580 --> 00:03:26,030
So if I were to provide here like 65 and click this button, we are going to get 65.

51
00:03:26,510 --> 00:03:29,930
It doesn't matter what what number you provide, 61.

52
00:03:29,930 --> 00:03:31,510
You are going to get 61.

53
00:03:31,790 --> 00:03:34,480
73, you are going to get 73.

54
00:03:34,790 --> 00:03:36,170
Now, it's cool, right?

55
00:03:36,180 --> 00:03:37,160
We are getting the number.

56
00:03:37,160 --> 00:03:42,470
But the problem is that this number, it is not actually a number.

57
00:03:42,470 --> 00:03:43,670
It's actually a string.

58
00:03:43,790 --> 00:03:46,430
You can see that's why it's it's white.

59
00:03:47,000 --> 00:03:51,680
So we need to convert it to a number and to be able to convert it to a number.

60
00:03:51,690 --> 00:03:59,780
And I'm going to say pass and you could use percent or parts float.

61
00:03:59,780 --> 00:04:00,790
Doesn't really matter.

62
00:04:01,160 --> 00:04:03,220
So now it is converted to a number.

63
00:04:03,230 --> 00:04:10,400
Let's store it somewhere and I'm going to say no data or no.

64
00:04:10,640 --> 00:04:10,900
Hmm.

65
00:04:11,530 --> 00:04:13,730
No, I'm just going to call it number of fact.

66
00:04:14,420 --> 00:04:18,560
And now if I cancel log that we should get a blue one.

67
00:04:19,750 --> 00:04:28,990
Right, so now if I say 15 and 13 click, you can see now we get a blue and it means that this is going

68
00:04:28,990 --> 00:04:30,490
to be a number.

69
00:04:30,500 --> 00:04:32,410
So if I say type of.

70
00:04:34,090 --> 00:04:38,140
Type of number fact.

71
00:04:39,230 --> 00:04:49,130
No fact we get on the fine should be in inside a foot inside here, so let's go Sloggett Typesof.

72
00:04:49,640 --> 00:04:52,190
No, no fact.

73
00:04:52,520 --> 00:04:53,480
You should get no.

74
00:04:54,520 --> 00:04:59,850
And we need to enter, that's why it didn't work click we get a number.

75
00:05:00,100 --> 00:05:02,310
All right, so we are done with this part.

76
00:05:02,320 --> 00:05:06,760
We have successfully grabbed our input and we have converted it into a no.

77
00:05:07,030 --> 00:05:10,210
The only thing remaining is just fetch the fact.

78
00:05:10,630 --> 00:05:14,080
So I'm going to create that function in as an argument.

79
00:05:14,080 --> 00:05:15,720
You are going to pass and the number.

80
00:05:16,270 --> 00:05:19,000
So this is going to be our async function.

81
00:05:19,690 --> 00:05:25,720
So I'm going to say function fetch fact, let's passan number.

82
00:05:27,070 --> 00:05:27,500
Right.

83
00:05:27,940 --> 00:05:29,860
So, all right.

84
00:05:29,860 --> 00:05:38,910
So first off, I'm going to create a fact, you orl constant variable and I'm going to grab the euro,

85
00:05:38,950 --> 00:05:40,570
which we know what that is.

86
00:05:40,930 --> 00:05:42,040
We just work with it.

87
00:05:42,040 --> 00:05:42,400
Right.

88
00:05:42,430 --> 00:05:45,160
So this is going to be the euro, except the number.

89
00:05:45,160 --> 00:05:47,630
The number is something that the user inserts.

90
00:05:48,100 --> 00:05:49,750
So I'm just going to put it right here.

91
00:05:49,990 --> 00:05:50,400
All right.

92
00:05:50,680 --> 00:05:55,580
And then what we are going to do is you can see that this is HTP.

93
00:05:55,600 --> 00:05:57,100
It's not a https.

94
00:05:57,100 --> 00:06:02,690
So it is going to create some issues if you want to use this API in a real world application.

95
00:06:03,070 --> 00:06:10,660
So what we can do is there is actually something called the course anywhere.

96
00:06:10,660 --> 00:06:13,190
And I'm just going to give you the URL for that.

97
00:06:13,690 --> 00:06:18,580
So this is going to be, of course, anywhere that Heroku of dot com.

98
00:06:18,940 --> 00:06:26,560
And if we use this euro, it is this is going to be a proxy uttara and simply it is going to allow us

99
00:06:26,560 --> 00:06:32,730
to use this http inside a HTTP website, https website.

100
00:06:32,980 --> 00:06:40,120
So we are going to just copy that and let's come here and I'm going to create a constant and I'm going

101
00:06:40,120 --> 00:06:42,010
to call it proxy Uttara.

102
00:06:43,710 --> 00:06:48,860
Let's put it right here, so that's simple, it's just this simple, right?

103
00:06:48,870 --> 00:06:54,360
If you want to read more about this, you can just go to the GitHub repo, just click on it.

104
00:06:54,960 --> 00:07:00,480
So if you just select this and open it right here, this is the GitHub repo in case you're, like,

105
00:07:00,480 --> 00:07:02,420
interested in reading more about it.

106
00:07:02,430 --> 00:07:03,320
It's all here.

107
00:07:03,330 --> 00:07:05,100
This is a report that.

108
00:07:05,100 --> 00:07:05,460
Right.

109
00:07:05,460 --> 00:07:06,950
But I'm not going to go there.

110
00:07:07,080 --> 00:07:10,560
The you are all of this is stored right here.

111
00:07:10,890 --> 00:07:13,930
And through this, you are all you can grab that GitHub.

112
00:07:14,820 --> 00:07:17,340
Now, let's actually fetch the data.

113
00:07:17,340 --> 00:07:25,320
So we are going to say CONSED response and we are going to wait until the response is completed.

114
00:07:25,830 --> 00:07:26,250
Right.

115
00:07:26,250 --> 00:07:29,370
And we are going to say fetch.

116
00:07:29,760 --> 00:07:33,120
So the fetch is going to grab our proxy.

117
00:07:33,120 --> 00:07:34,440
You are a first.

118
00:07:34,440 --> 00:07:35,530
So proxy you are.

119
00:07:37,160 --> 00:07:43,140
And you know what, I'm just going to use we could use this method.

120
00:07:43,250 --> 00:07:44,980
I'm going to use my tactics.

121
00:07:45,470 --> 00:07:48,860
So first off, we are going to pass in our proxy URL.

122
00:07:50,920 --> 00:07:52,450
And then.

123
00:07:53,490 --> 00:08:01,710
I'm going to pass and the fact you are the earl of itself, the fact numbers, and then so the user

124
00:08:01,710 --> 00:08:03,750
has to enter a fact, right?

125
00:08:03,750 --> 00:08:04,410
A number.

126
00:08:04,620 --> 00:08:08,610
And that number we saw that it has to be at the end of this.

127
00:08:08,980 --> 00:08:09,900
You are right.

128
00:08:10,080 --> 00:08:15,930
That's why we have the proxy URL is first and then we have the fact you are and at the end of the fact

129
00:08:15,930 --> 00:08:20,460
you are, we are going to pass on that input that the user is going to do.

130
00:08:21,670 --> 00:08:22,620
And what is the input?

131
00:08:22,620 --> 00:08:24,740
The input is going to be simply no.

132
00:08:25,050 --> 00:08:28,820
So the value for this is going to be passed here and then passed here.

133
00:08:29,430 --> 00:08:29,790
Right.

134
00:08:29,910 --> 00:08:33,960
And now, because we are we are getting taxed.

135
00:08:33,960 --> 00:08:36,360
We need to specify through.

136
00:08:36,809 --> 00:08:38,700
We need to specify our method.

137
00:08:39,270 --> 00:08:45,570
And let's say method is going to be get let's specify our headers as well.

138
00:08:46,350 --> 00:08:50,910
So the in the headers, what we are going to do is we are going to say X.

139
00:08:51,270 --> 00:08:58,290
Dasch requested X, Dasch requested Dasch with.

140
00:08:58,920 --> 00:09:02,400
Now this request comes from this proxy.

141
00:09:02,400 --> 00:09:03,450
You are all that we have.

142
00:09:03,660 --> 00:09:07,070
We need to specify what is the kind of request that we are making.

143
00:09:07,440 --> 00:09:10,950
So I'm just going to say plain text and we should be good to go.

144
00:09:11,190 --> 00:09:15,240
So we are going to say Kansa log response.

145
00:09:15,480 --> 00:09:17,910
You should get a response of pending.

146
00:09:18,750 --> 00:09:19,080
All right.

147
00:09:19,090 --> 00:09:24,180
So if I enter a number of like say, 88 and if I click on it.

148
00:09:25,150 --> 00:09:26,430
We get this response.

149
00:09:26,500 --> 00:09:32,590
All right, so this is the response is not pending because we have a wait here and now let's convert

150
00:09:32,590 --> 00:09:36,270
it into something that's readable by us, of course.

151
00:09:36,850 --> 00:09:43,440
So I'm going to create another concept and I'm going to say response data.

152
00:09:44,230 --> 00:09:47,980
We are going to wait until that response to data is parsed.

153
00:09:48,340 --> 00:09:56,050
So response dot, this time we're going to use the text method and now let's put in their response data

154
00:09:56,290 --> 00:09:57,500
inside the console.

155
00:09:57,520 --> 00:10:01,920
So if I add 64 Kaleck, we should get a response.

156
00:10:01,930 --> 00:10:07,790
You can see is the number of demons in the dictionary inferno.

157
00:10:08,240 --> 00:10:09,030
All right.

158
00:10:09,040 --> 00:10:09,940
Very dark.

159
00:10:11,360 --> 00:10:15,390
Golden desks in the myth of the Tower Hanoi, right?

160
00:10:15,770 --> 00:10:16,660
Weird stuff.

161
00:10:17,060 --> 00:10:24,050
So we have successfully grabbed our response and now the only thing is we need our FACTA paragraph,

162
00:10:24,050 --> 00:10:27,500
which we have already grabbed it right here.

163
00:10:27,500 --> 00:10:34,490
And we say that in our text, this time to ends response date.

164
00:10:35,120 --> 00:10:42,650
So this time, like in contrast to the joke that we did, response dated a joke.

165
00:10:42,920 --> 00:10:44,480
We don't have anything like that.

166
00:10:44,490 --> 00:10:46,070
We basically get a text.

167
00:10:46,400 --> 00:10:48,440
That's why we do the text method.

168
00:10:48,680 --> 00:10:53,750
If you do the Jason, then it is going to give you a syntax error with the token of Jason.

169
00:10:54,380 --> 00:10:54,730
Right.

170
00:10:54,830 --> 00:11:00,410
And this response, these variable names, they don't have to be this these variable names, they are

171
00:11:00,410 --> 00:11:01,760
arbitrary, optional.

172
00:11:02,000 --> 00:11:03,530
You can name it whatever you want.

173
00:11:03,530 --> 00:11:09,080
You can say Rick Morrey and I don't know, like Simpson, whatever.

174
00:11:09,590 --> 00:11:09,920
Right.

175
00:11:09,920 --> 00:11:11,290
You can name it, whatever you want.

176
00:11:11,540 --> 00:11:16,070
So if I say 34 click, we should get a number.

177
00:11:16,070 --> 00:11:17,540
We should get a response here.

178
00:11:17,540 --> 00:11:26,990
So and if I say 51, Area 51, do we get that they are done with number of antimony.

179
00:11:27,530 --> 00:11:27,880
All right.

180
00:11:28,040 --> 00:11:30,910
So with this, our lecturer comes to an end.

181
00:11:30,920 --> 00:11:37,100
So whenever you enter a number and click a fact, you are going to get a fact which this is besides

182
00:11:37,100 --> 00:11:37,550
the point.

183
00:11:37,550 --> 00:11:42,840
The point was we were able to fetch data using the async a weight function.

184
00:11:43,160 --> 00:11:48,200
Now, these two projects, they were very simple, becoming projects.

185
00:11:48,200 --> 00:11:51,770
They are they have a more real life kind of tone to them.

186
00:11:52,140 --> 00:11:56,090
Of course, you can use this as a fun thing inside your applications.

187
00:11:56,570 --> 00:12:02,180
But those projects, they are going to have like a little bit more with the Saddam manipulation, because

188
00:12:03,200 --> 00:12:05,840
there are two sides to asynchronous programming.

189
00:12:05,840 --> 00:12:11,840
One, you need to be able to fetch the data and that should be your priority facing the data.

190
00:12:12,110 --> 00:12:18,890
When that fetch is successful, then what do you want to do with that data that you have just retrieved

191
00:12:19,100 --> 00:12:21,440
from a specific API endpoint?

192
00:12:21,860 --> 00:12:30,320
So the the one side is fetching, the other side is converting that data into a meaningful form to be

193
00:12:30,320 --> 00:12:32,110
used inside your application.

194
00:12:32,720 --> 00:12:34,440
That's it for this chapter.

195
00:12:34,460 --> 00:12:35,810
See you guys in the next.

