WEBVTT
1
00:00:01.960 --> 00:00:02.890
Hi, everyone.

2
00:00:03.010 --> 00:00:08.080
In this letter, we are going to implement the shuffling functionality for our Cartes.

3
00:00:09.240 --> 00:00:18.270
All right, so so far, the card, the deck of cards or the memory game is completed, but there is

4
00:00:18.270 --> 00:00:19.880
a big problem with that.

5
00:00:20.220 --> 00:00:23.430
We know where every image exists, right?

6
00:00:23.460 --> 00:00:31.410
So if we just click on them, we can and see all of them because they are nicely arranged next to each

7
00:00:31.410 --> 00:00:31.650
other.

8
00:00:31.860 --> 00:00:34.640
So if even if I refresh, they are going to stay in there.

9
00:00:35.370 --> 00:00:36.410
That was a mouse click.

10
00:00:36.780 --> 00:00:38.870
They are going to stay in their own spot.

11
00:00:38.910 --> 00:00:39.330
Right.

12
00:00:39.900 --> 00:00:41.190
But this is not what we want.

13
00:00:41.190 --> 00:00:43.760
We want to surprise our users.

14
00:00:43.770 --> 00:00:44.130
Right.

15
00:00:44.430 --> 00:00:52.680
So what I'm going to do is I'm going to create a function and we are going to call them shuffle very

16
00:00:52.680 --> 00:00:53.280
generic.

17
00:00:54.120 --> 00:00:54.570
Right.

18
00:00:54.570 --> 00:00:57.020
And what do we want to do here now?

19
00:00:57.030 --> 00:00:59.550
We want to iterate over all of our cards.

20
00:00:59.560 --> 00:01:06.000
So we are going to grab our cards and we are going to say that for each and we are going to run a function.

21
00:01:06.570 --> 00:01:10.260
This writing, this function here is not the optimum way of doing it.

22
00:01:10.270 --> 00:01:12.090
We could use an arrow function.

23
00:01:12.390 --> 00:01:14.910
But, you know, I've just used it a few times.

24
00:01:14.910 --> 00:01:18.870
I do not want to, like, really, really focus on arrow functions, though.

25
00:01:18.870 --> 00:01:25.380
They are a better and these sort of scenarios, they're a better choice than our regular functions era

26
00:01:25.380 --> 00:01:25.880
functions.

27
00:01:25.890 --> 00:01:34.510
There are new additions to ESX, JavaScript or iOS officially e 2015 edition of JavaScript.

28
00:01:35.350 --> 00:01:35.700
Right.

29
00:01:35.850 --> 00:01:42.660
But we are going to start using them all over the place whenever we officially study them, like in

30
00:01:42.660 --> 00:01:43.190
theory.

31
00:01:43.500 --> 00:01:43.980
All right.

32
00:01:44.580 --> 00:01:49.200
So we need here a loop variable, which is going to be cards card.

33
00:01:49.410 --> 00:01:58.800
And first off, we need to we need to come up with a way that according to that method, we can shuffle

34
00:01:58.800 --> 00:01:59.370
the cards.

35
00:01:59.880 --> 00:02:06.090
Now, if I go back to our success and if I come here, this is our memory game.

36
00:02:06.090 --> 00:02:06.330
Right.

37
00:02:06.360 --> 00:02:10.160
This is the container for a memory game and this is our memory game.

38
00:02:10.169 --> 00:02:12.780
So inside the memory game, we have 12 diffs.

39
00:02:13.230 --> 00:02:17.050
And each of these divs is actually a memory card.

40
00:02:17.250 --> 00:02:19.390
That's why we have to have cards, right.

41
00:02:19.650 --> 00:02:23.520
So let me collapse all of them.

42
00:02:25.220 --> 00:02:33.530
So these Twelve's these 12 cards, they're actually Twala Fleck's items because the container is has

43
00:02:33.890 --> 00:02:36.230
a has a display value of Fleck's.

44
00:02:36.590 --> 00:02:43.530
So all of them, whenever we said we initialize a flux container or a flux model, all of the flexibles

45
00:02:43.550 --> 00:02:46.470
properties they are at our disposal to use.

46
00:02:47.000 --> 00:02:51.800
So we have a an order of property, which is a Fleck's items property.

47
00:02:52.010 --> 00:02:52.400
Right.

48
00:02:52.730 --> 00:02:54.080
For Fleck's items.

49
00:02:54.260 --> 00:03:00.590
And the order of property basically is responsible for the order of items which are laid out on the

50
00:03:00.590 --> 00:03:01.040
screen.

51
00:03:01.400 --> 00:03:06.560
So naturally or by default, all of them have an order of zero.

52
00:03:07.250 --> 00:03:15.710
So if you if you go towards the top left part of the screen, they are going to go to zero and less

53
00:03:15.710 --> 00:03:18.350
than that or zero and negative numbers.

54
00:03:18.530 --> 00:03:25.000
And if you go towards the bottom right, they're going to go towards the positive number.

55
00:03:25.310 --> 00:03:33.710
So if you were to have an order of negative one for this for for example, for an that's just so if

56
00:03:33.710 --> 00:03:39.530
you were to have an order of negative one for this cat, it would move from this position all the way

57
00:03:39.530 --> 00:03:40.070
to here.

58
00:03:40.400 --> 00:03:48.770
And if you would have an order of like, let's say position like like let's say an order of like two

59
00:03:48.770 --> 00:03:53.620
for this bear or one, then it would it would move all the way to here.

60
00:03:53.810 --> 00:03:57.140
So bigger numbers just ensure bigger numbers.

61
00:03:57.470 --> 00:03:59.330
They move towards the bottom right.

62
00:03:59.330 --> 00:04:05.600
And smaller numbers, they move towards the top left depending on whether or not they're negative or

63
00:04:05.600 --> 00:04:06.110
positive.

64
00:04:06.120 --> 00:04:13.690
So think of it like this so we can use this order property to come up with a way to shuffle our cards.

65
00:04:13.970 --> 00:04:20.140
And for that, we need to get a random number and number and we know how we can do that.

66
00:04:20.149 --> 00:04:27.380
So first off, I'm going to create a variable in which I'm going to store that random number, OK?

67
00:04:27.380 --> 00:04:29.000
We need to store it somewhere.

68
00:04:29.300 --> 00:04:35.700
So I'm going to call it random positions and it is going to be math dot floor.

69
00:04:36.170 --> 00:04:39.920
Now, the floor method is going to give us an integer, right?

70
00:04:40.100 --> 00:04:43.490
We need an integer because why do we need an integer?

71
00:04:43.520 --> 00:04:47.700
The reason for that is we are going to use our math at random.

72
00:04:48.440 --> 00:04:54.560
So where is our math that random are?

73
00:04:54.680 --> 00:04:57.140
This is the method that we are going to use now.

74
00:04:57.140 --> 00:05:02.630
Math at random is going to give us a value here.

75
00:05:02.630 --> 00:05:11.510
It says, OK, it is going to give us a number between zero and one, but this is going to be a decimal

76
00:05:11.510 --> 00:05:11.930
number.

77
00:05:11.930 --> 00:05:14.020
We want a whole integer.

78
00:05:14.420 --> 00:05:16.180
That's why we are going to say math.

79
00:05:16.190 --> 00:05:21.860
That floor, it is going to give us a complete integer and we have multiplied by twelve because we have

80
00:05:21.860 --> 00:05:22.990
to, of course, simple.

81
00:05:23.660 --> 00:05:29.060
Now, the number that comes out of this, what do we want to do with that?

82
00:05:29.280 --> 00:05:35.450
First off, let's find out what what are the numbers that is going to come out from this random positions.

83
00:05:35.780 --> 00:05:41.690
So we have successfully implemented the random and we have stored inside this variable.

84
00:05:41.810 --> 00:05:48.830
So now let's go ahead and let's access that variable and let's see what is the value stored inside this.

85
00:05:49.010 --> 00:05:49.520
So.

86
00:05:51.470 --> 00:05:59.810
If I click on it, so this is well, this is this function is not called and how how do we call this

87
00:05:59.810 --> 00:06:00.240
function?

88
00:06:00.530 --> 00:06:05.860
We know that whenever you create a function, this is another cool idea in JavaScript.

89
00:06:06.680 --> 00:06:12.530
I'm just going to write the name here and I'm going to explain to you, guess what this means it whenever

90
00:06:12.800 --> 00:06:18.710
you create a function or you define a function, you need to call it for that function to wake up and

91
00:06:18.710 --> 00:06:19.540
to do something.

92
00:06:20.540 --> 00:06:25.760
But we have no we have no good way of calling this function.

93
00:06:25.760 --> 00:06:30.730
We want whenever the pages is reloaded, we want to call this function.

94
00:06:31.070 --> 00:06:34.700
So we are going to convert this function into an iffy.

95
00:06:35.510 --> 00:06:36.760
And you heard that right.

96
00:06:36.800 --> 00:06:44.150
It is an F and we grab and the entire function, we open parentheses and we open parentheses at the

97
00:06:44.150 --> 00:06:45.440
end of that function as well.

98
00:06:45.860 --> 00:06:53.660
Now this function has turned into has been converted into an iffy and if he is an immediately invoked

99
00:06:53.660 --> 00:07:01.100
function expression, it means that the function is called immediately after its definition.

100
00:07:01.640 --> 00:07:02.930
Now this function is called.

101
00:07:03.110 --> 00:07:09.320
So whenever you want to combine the function call sorry, the function definition, what the function

102
00:07:09.320 --> 00:07:14.870
call like instantly you just create an F, it's called N.

103
00:07:14.870 --> 00:07:22.430
If he immediately invoked function expression or think of it like this, immediately woken up function.

104
00:07:23.340 --> 00:07:30.330
OK, so now whenever we refresh the page, we see an iffy so if I refresh, refresh the page, we see

105
00:07:30.330 --> 00:07:35.370
all these numbers, see we see all these are all random numbers.

106
00:07:35.520 --> 00:07:40.170
And we are going to assign all these random numbers to each of these cards.

107
00:07:40.320 --> 00:07:48.220
And then the order of this court is going to change, resulting in a wonderful shuffle.

108
00:07:48.900 --> 00:07:49.260
All right.

109
00:07:49.270 --> 00:07:50.690
So let's reload the page.

110
00:07:51.000 --> 00:07:56.460
Each time we get different numbers, each time we are going to get a different number.

111
00:07:56.670 --> 00:07:59.900
We are not going to get 12 and we are not going to get minus one.

112
00:08:00.210 --> 00:08:01.590
That's what we did there.

113
00:08:01.920 --> 00:08:06.500
OK, so we are always going to get from zero all the way to 11, right.

114
00:08:06.710 --> 00:08:07.860
So we are going to get that.

115
00:08:09.230 --> 00:08:16.820
Now, now that we have successfully grabbed these random numbers for our random position, how can we

116
00:08:16.820 --> 00:08:22.370
apply them to to those cards that we have?

117
00:08:22.610 --> 00:08:27.110
So we are going to say card dot tap into the world of style.

118
00:08:27.110 --> 00:08:33.110
And I don't know why does that style and we are going to get the order of property and we are going

119
00:08:33.110 --> 00:08:36.049
to send it to, what, two random positions that set.

120
00:08:36.470 --> 00:08:40.850
So that's now everything is random, OK?

121
00:08:40.970 --> 00:08:42.870
And we can we can check it out for ourselves.

122
00:08:43.220 --> 00:08:44.159
So this is bare.

123
00:08:44.179 --> 00:08:46.400
It's there, but this is dog.

124
00:08:46.400 --> 00:08:49.960
But originally these two bears there were in the same spot.

125
00:08:50.270 --> 00:08:51.430
So that's incorrect.

126
00:08:51.440 --> 00:08:53.670
Let's go ahead and check out this is the bird.

127
00:08:53.900 --> 00:08:55.010
Check out these two.

128
00:08:55.010 --> 00:09:00.610
We have a cat and we have so this the dog is right here.

129
00:09:00.620 --> 00:09:01.790
So this is our first.

130
00:09:02.120 --> 00:09:04.950
Now, I'm going to solve this memory game.

131
00:09:04.970 --> 00:09:06.740
Of course, it is going to take some time.

132
00:09:06.740 --> 00:09:13.910
But in the process of solving it, we are going to check for any corners, any issues, any bugs that

133
00:09:13.910 --> 00:09:15.480
this application might have.

134
00:09:15.920 --> 00:09:19.610
So let's click on this so we cannot click on a third car.

135
00:09:19.640 --> 00:09:20.450
That's a good thing.

136
00:09:20.690 --> 00:09:24.350
If I double click, I cannot still cannot click.

137
00:09:24.590 --> 00:09:26.180
So here is the other hamster.

138
00:09:27.020 --> 00:09:29.260
I think this cat is here.

139
00:09:29.270 --> 00:09:30.740
This bear is here.

140
00:09:30.750 --> 00:09:34.200
I think here there is the hamster.

141
00:09:34.200 --> 00:09:34.880
Come on.

142
00:09:34.880 --> 00:09:36.200
This is the burden up.

143
00:09:36.800 --> 00:09:38.210
I think this was the bird.

144
00:09:38.250 --> 00:09:38.630
Yeah.

145
00:09:39.290 --> 00:09:40.230
And voila.

146
00:09:40.520 --> 00:09:45.140
So now you can see we have better dog, cat, hamster.

147
00:09:45.650 --> 00:09:52.250
If I refresh the page, this order should change and you can see that every card, all of the cars,

148
00:09:52.260 --> 00:09:53.110
they're shuffled.

149
00:09:53.420 --> 00:10:00.230
So if I change, we have cat Curis, cat, bird and dog and hamster.

150
00:10:00.260 --> 00:10:03.980
If I refresh, we are going to get an again hamster refresh.

151
00:10:04.130 --> 00:10:05.540
We are going to get a bird.

152
00:10:05.780 --> 00:10:14.690
So each time we refresh the order, property is going to change the order of our HDMI elements or our

153
00:10:14.690 --> 00:10:20.270
cards, resulting in a different deck of cards that we can work with.

154
00:10:21.480 --> 00:10:22.050
So.

155
00:10:24.320 --> 00:10:30.530
And this is going to be, Ed, for this project and this chapter, I hope you have enjoyed it and see

156
00:10:30.530 --> 00:10:32.570
you guys in the next one.

