WEBVTT
1
00:00:00.900 --> 00:00:01.740
Hi, everyone.

2
00:00:01.890 --> 00:00:08.910
In this lecture, we are going to talk about the variable function scope and the variable block scope.

3
00:00:09.940 --> 00:00:18.700
All right, so what is the variable function scope so out of this like phrase, we know two of the words,

4
00:00:18.880 --> 00:00:23.530
we know what a variable is, we know what a function is, and we don't know what a scope is.

5
00:00:24.640 --> 00:00:31.680
Well, I'm going to tell you what scope its scope specifies, where the defined variable is accessible.

6
00:00:32.229 --> 00:00:33.640
That's how simple it is.

7
00:00:33.940 --> 00:00:41.980
So scope is responsible for defining, for accessing actually variables and where we can access variables,

8
00:00:42.190 --> 00:00:44.540
variables which are defined, of course.

9
00:00:44.950 --> 00:00:48.570
So let's go ahead and let's talk about the variable functions.

10
00:00:48.580 --> 00:00:52.790
Go first and then we are going to talk about the variable block scope.

11
00:00:52.810 --> 00:00:53.160
All right.

12
00:00:53.590 --> 00:00:57.720
So we have three variable declarations in JavaScript.

13
00:00:57.760 --> 00:00:58.150
All right.

14
00:00:58.300 --> 00:01:08.530
And briefly, we have talked about them and we have let we have cons and we have right now we have talked

15
00:01:08.530 --> 00:01:15.070
about lean on cons, but we have not like really talked about the VA variable declaration.

16
00:01:15.070 --> 00:01:19.480
OK, variable declaration.

17
00:01:20.650 --> 00:01:21.010
All right.

18
00:01:21.280 --> 00:01:26.020
So now what I'm going to do is I'm going to go ahead and I'm going to create a function because we are

19
00:01:26.020 --> 00:01:30.040
talking about the function scope and I'm going to call it my function.

20
00:01:30.880 --> 00:01:34.000
And this is going to be a very, very simple one.

21
00:01:34.210 --> 00:01:38.460
And I'm going to say, let my name be equal to Muslim.

22
00:01:39.190 --> 00:01:39.570
Right.

23
00:01:40.000 --> 00:01:46.940
So what I'm going to do is I'm going to call this function first so this function gets up and running.

24
00:01:47.260 --> 00:01:48.610
So now the function is called.

25
00:01:48.610 --> 00:01:48.930
Right.

26
00:01:49.510 --> 00:01:56.650
But keep in mind in here that this variable has been defined inside this function.

27
00:01:57.070 --> 00:01:57.400
All right.

28
00:01:57.580 --> 00:02:05.830
So because we are talking about the function scope, the scope is actually the scope is defined by these

29
00:02:05.830 --> 00:02:06.730
curly braces.

30
00:02:06.940 --> 00:02:11.710
So whatever is inside this curly brace is going to be the scope of this function.

31
00:02:12.280 --> 00:02:15.140
Think of it as the territory of that function.

32
00:02:15.430 --> 00:02:23.950
So let's see if now this variable has been defined by let let's see if we can access that variable outside

33
00:02:23.950 --> 00:02:24.530
the function.

34
00:02:24.670 --> 00:02:30.580
So we are going to say cancel that log and we are going to say my name and let's save it.

35
00:02:30.850 --> 00:02:35.320
And now I see in here we see uncaught reference error.

36
00:02:35.770 --> 00:02:38.060
We cannot reference this variable.

37
00:02:38.320 --> 00:02:42.010
My name is not defined at line number 11.

38
00:02:42.010 --> 00:02:44.650
And this concept, that log is available online.

39
00:02:44.650 --> 00:02:44.960
No.

40
00:02:46.210 --> 00:02:54.640
So whenever we define a variable inside a function, we cannot access it outside that function, whenever

41
00:02:54.640 --> 00:02:56.800
that variable is defined by that.

42
00:02:57.220 --> 00:03:02.880
So this is not accessible outside the function because the scope is limited to this function.

43
00:03:03.100 --> 00:03:10.000
We can define we can't access it inside this at this function itself, but we cannot access it outside

44
00:03:10.000 --> 00:03:10.460
the function.

45
00:03:10.750 --> 00:03:17.050
So if I say that you guys can see it says from line number nine, we have Mussen and we have successfully

46
00:03:19.240 --> 00:03:24.470
accessed the variable inside the function, but we cannot access it outside the function.

47
00:03:24.730 --> 00:03:27.100
So this is how we can use that.

48
00:03:27.310 --> 00:03:31.060
And this is the scope of let right the scope.

49
00:03:31.210 --> 00:03:32.560
Flett within the function.

50
00:03:32.770 --> 00:03:34.540
So what I'm going to do is I'm just going to go ahead.

51
00:03:34.550 --> 00:03:40.030
I'm going to commented out and I'm going to create here just a comment that says, let now let's go

52
00:03:40.030 --> 00:03:44.500
ahead and let's grab everything and put it here and change it to const.

53
00:03:45.660 --> 00:03:52.590
Because I want to show you what the difference is actually between let on Consed and Vare, so it's

54
00:03:52.590 --> 00:03:54.000
actually a battle.

55
00:03:54.360 --> 00:04:02.840
I'm just going to say let that come a contest versus vare.

56
00:04:03.000 --> 00:04:09.200
This is actually a battle of and cost versus far right and why we don't use VA anymore.

57
00:04:09.570 --> 00:04:16.440
So if I were to save this, I'm just going to comment that we are going to get the same error that says

58
00:04:16.440 --> 00:04:17.410
reference error.

59
00:04:17.579 --> 00:04:20.519
My name is not defined at line number twenty four.

60
00:04:20.730 --> 00:04:22.360
So this is line number twenty four.

61
00:04:22.560 --> 00:04:29.980
So even so, now let's go ahead and change it to CONSED actually and the error is going to be the same.

62
00:04:30.300 --> 00:04:37.640
So even if the variable is defined using const, we don't have access to it outside the function.

63
00:04:38.220 --> 00:04:38.490
Right.

64
00:04:38.550 --> 00:04:42.390
So it's the same thing as with Let which is not like.

65
00:04:43.540 --> 00:04:44.350
Surprising.

66
00:04:44.830 --> 00:04:51.580
So now what I'm going to do is I'm going to do the same thing with VA and I'm going to grab this concert

67
00:04:51.580 --> 00:04:56.320
and the other one, I'm going to change them to VA and I'm going to comment back in this function.

68
00:04:56.620 --> 00:04:59.410
And you guys can see we we get the same error.

69
00:04:59.620 --> 00:05:06.730
Even though this variable has been declared with VA, it's we have successfully grabbed it or accessed

70
00:05:06.730 --> 00:05:08.170
it within that function.

71
00:05:08.170 --> 00:05:13.780
But outside the function on line 30, we cannot access it, says reference error.

72
00:05:13.810 --> 00:05:15.880
My name is not defined at this line.

73
00:05:16.290 --> 00:05:16.620
Right.

74
00:05:16.930 --> 00:05:19.030
So so far as far.

75
00:05:19.030 --> 00:05:21.850
So what is the result of this entire discussion?

76
00:05:22.360 --> 00:05:28.840
So whenever we are talking about the variable function, so there is no difference between declaring

77
00:05:29.590 --> 00:05:37.180
between ilet a concept and inva, aside from the fact that we cannot redeclared constant variables.

78
00:05:37.690 --> 00:05:43.870
Aside from that fact, there is no difference between these three variable declaration methods.

79
00:05:44.290 --> 00:05:45.530
So there is no difference.

80
00:05:45.640 --> 00:05:47.580
So where does the difference arise?

81
00:05:47.590 --> 00:05:49.300
Why we don't use VA anymore?

82
00:05:49.540 --> 00:05:55.550
So one of the reasons is that is when whenever we talk about the block scope.

83
00:05:55.780 --> 00:05:58.000
So what I'm going to do is I'm just going to post it here.

84
00:05:58.000 --> 00:06:00.640
And instead of the function, I'm going to say block SQL.

85
00:06:01.270 --> 00:06:04.750
Now, blocks are denoted by the curly braces.

86
00:06:05.030 --> 00:06:07.600
I'm just going to put in a set of curly braces here.

87
00:06:08.140 --> 00:06:13.540
And these curly braces, they are different than objects, right?

88
00:06:13.600 --> 00:06:23.470
This represents a block var is function skoch other than being declared in functions var doesn't have

89
00:06:23.470 --> 00:06:25.360
any other scope in.

90
00:06:25.360 --> 00:06:26.550
How do we know that.

91
00:06:26.920 --> 00:06:33.520
So we know that whenever we define a function var performs well.

92
00:06:34.060 --> 00:06:41.120
How about when we don't have a function where we have an if statement because if statements have blocks

93
00:06:41.120 --> 00:06:41.650
as well.

94
00:06:41.650 --> 00:06:42.070
Right.

95
00:06:43.310 --> 00:06:49.970
So let's go ahead and let's first off, take a look at the let in, we are going to create an if statement

96
00:06:50.060 --> 00:06:55.070
and I'm going to use our comparison and logical operators at the same time.

97
00:06:55.070 --> 00:07:02.120
And I'm going to say, if one two is greater than one and one is less than three, if this condition

98
00:07:02.120 --> 00:07:04.760
is met, then what do we want to do?

99
00:07:04.770 --> 00:07:08.920
We want to say let result because we want to capture the results.

100
00:07:09.910 --> 00:07:12.980
Right, we want to say the results should be true, right?

101
00:07:13.360 --> 00:07:21.460
And now what I'm going to do is I'm going to do one concert log inside the block scope of this if statement,

102
00:07:21.460 --> 00:07:22.930
and I'm going to grab the result.

103
00:07:24.300 --> 00:07:28.690
And I'm going to do the same oops, not to the same block outside of it.

104
00:07:28.950 --> 00:07:35.000
So now if I say that we get two results, it says line thirty seven and nine thirty nine.

105
00:07:35.550 --> 00:07:44.160
So on line online 37, we have successfully access the results variable because they are on in the same

106
00:07:44.160 --> 00:07:44.820
scope.

107
00:07:45.180 --> 00:07:47.720
The scope is the block of the if statement.

108
00:07:48.060 --> 00:07:49.030
This is the scope.

109
00:07:49.140 --> 00:07:54.210
So you guys can see this is the scope, this is the scope of the statement, the scope that I've just

110
00:07:54.210 --> 00:07:54.870
highlighted.

111
00:07:55.290 --> 00:07:58.980
And when they are in the same scope, of course they are accessible.

112
00:07:59.430 --> 00:08:03.650
But what if we are try to access it outside that block scope?

113
00:08:03.840 --> 00:08:11.340
We can't, because the good thing about Leadon in is that they are specific to their scope.

114
00:08:11.340 --> 00:08:17.220
It doesn't matter whether the scope is function, the scope is any other block available, even if it

115
00:08:17.220 --> 00:08:19.110
is a if statement for a loop.

116
00:08:19.110 --> 00:08:20.910
It doesn't matter what that is.

117
00:08:21.270 --> 00:08:24.540
They are not accessible outside their scope.

118
00:08:25.520 --> 00:08:31.460
All right, so this is the good thing about Leron concert, and whenever we get to the VA part, I'm

119
00:08:31.460 --> 00:08:33.440
going to tell you why this is a good thing.

120
00:08:33.770 --> 00:08:39.440
So let's go ahead and let's copy this and common this one out.

121
00:08:39.590 --> 00:08:40.309
Come here.

122
00:08:40.460 --> 00:08:46.300
And we are going to say concert and pasted down here and we are going to change the led to a concert.

123
00:08:46.310 --> 00:08:50.980
And when we save it, we get the exact same error.

124
00:08:51.070 --> 00:08:59.870
We get a we get a true for a result of this concert along and for accessing that variable outside the

125
00:08:59.870 --> 00:09:02.210
scope we get an error reference.

126
00:09:02.210 --> 00:09:05.260
Error result is not defined at line forty six.

127
00:09:06.140 --> 00:09:10.460
So what if when I do this with var, what happens then.

128
00:09:10.850 --> 00:09:15.770
I'm going to grab this concert, I'm going to change both of them to var let's come in this one out.

129
00:09:16.610 --> 00:09:23.990
And when I say that we get true and true now what does this mean if I go ahead and if I come and tell

130
00:09:24.020 --> 00:09:25.580
the concert of lock there.

131
00:09:26.270 --> 00:09:29.870
This comes from line 53 and this is line fifty three.

132
00:09:30.500 --> 00:09:40.820
And now you guys can see that whenever the scope is not functions go, but any other scope or block

133
00:09:40.820 --> 00:09:41.270
scope.

134
00:09:41.630 --> 00:09:48.190
The VA variable declaration is accessible and this is not a good thing.

135
00:09:48.770 --> 00:09:49.670
And why is that?

136
00:09:49.670 --> 00:09:51.470
Why is this not a good thing.

137
00:09:51.470 --> 00:09:58.310
Because let's say you are creating a very, very large application and it is very hard to keep up with

138
00:09:58.310 --> 00:10:00.650
the variable names that you're defining.

139
00:10:02.030 --> 00:10:11.300
So if you go ahead and if you apply, if you like, let's say you have another variable that has the

140
00:10:11.300 --> 00:10:12.680
same name of result.

141
00:10:12.980 --> 00:10:16.130
And when you access it, which one will you be able to access?

142
00:10:16.280 --> 00:10:21.320
So what I'm going to do in here, I'm going to go ahead and I'm going to create another variable, which

143
00:10:21.320 --> 00:10:22.040
is result.

144
00:10:22.490 --> 00:10:25.870
And let's go ahead and let's see what happens.

145
00:10:25.880 --> 00:10:27.230
And I'm going to set it to 15.

146
00:10:27.470 --> 00:10:34.960
And when I do that, you guys can see this variable result of 15 has not been shown in here.

147
00:10:35.120 --> 00:10:35.450
Right.

148
00:10:35.600 --> 00:10:38.960
And even though we are, we are logging to the console.

149
00:10:38.960 --> 00:10:44.120
The result, because this is this comes before this one.

150
00:10:44.660 --> 00:10:45.020
All right.

151
00:10:45.290 --> 00:10:47.050
So this is ignored.

152
00:10:47.780 --> 00:10:54.320
But if you were to do this with Aulet or CONST, it would immediately tell you that this variable has

153
00:10:54.320 --> 00:10:55.790
been defined before.

154
00:10:56.510 --> 00:10:56.870
All right.

155
00:10:57.260 --> 00:11:03.050
So let's go ahead and let's do this with a with something other than war.

156
00:11:03.260 --> 00:11:08.840
So what I'm going to do is I'm going to come back on this one back end and we are going to.

157
00:11:10.620 --> 00:11:18.620
Do this and let's let's come here and let's say let results equal to 25, let's save it.

158
00:11:18.810 --> 00:11:22.340
And now you guys can see we have two different consulates.

159
00:11:22.740 --> 00:11:30.030
The first log comes from line number thirty eight and the second console comes from line number forty.

160
00:11:30.240 --> 00:11:32.370
And this result comes from here.

161
00:11:32.370 --> 00:11:33.780
It doesn't come from here.

162
00:11:34.250 --> 00:11:34.530
Right.

163
00:11:34.740 --> 00:11:42.810
Because this silhouette is defined, is limited or restrained to the scope of this statement.

164
00:11:43.080 --> 00:11:48.260
So outside the scope of this if statement, this result does not exist.

165
00:11:48.450 --> 00:11:51.840
That's why it through an error when we consider log it.

166
00:11:52.830 --> 00:12:01.650
All right, so in conclusion, we have a function scope, we have a block scope, we have a global scope.

167
00:12:01.890 --> 00:12:10.470
Whenever you casually define variables outside any remaining scope, they are defined in the global

168
00:12:10.470 --> 00:12:10.920
scope.

169
00:12:11.150 --> 00:12:11.600
All right.

170
00:12:11.880 --> 00:12:17.550
And we also have a lexical scope, which is a bit advanced, and we are going to get to it when we get

171
00:12:17.550 --> 00:12:19.050
to our advanced chapters.

172
00:12:19.540 --> 00:12:19.890
Right.

173
00:12:20.700 --> 00:12:29.910
So this is the difference between Leron consulate cost and VA, and this is why we don't use VA anymore,

174
00:12:30.690 --> 00:12:33.710
because VA has only a function scope.

175
00:12:33.840 --> 00:12:37.680
So as long as you use VARs with functions, that is cool.

176
00:12:38.250 --> 00:12:44.730
But what if you want to use VA with if statements or with any other block scope, then it is going to

177
00:12:44.730 --> 00:12:50.880
mess up your entire application in case there was a conflict of variable names.

178
00:12:51.630 --> 00:12:53.010
All right, that's it for this.

179
00:12:53.010 --> 00:12:55.190
Let's see you guys in the next one.

