WEBVTT
1
00:00:01.609 --> 00:00:02.520
Hi, everyone.

2
00:00:02.540 --> 00:00:06.290
In this next year, we are going to talk about function hoisting.

3
00:00:07.780 --> 00:00:17.170
All right, so we know by now what hoisting is hoisting is actually the entire process of compilation

4
00:00:17.170 --> 00:00:20.280
or passing and the code execution.

5
00:00:20.560 --> 00:00:31.320
So this like execution context, this entire thing, this these two processes or two states, two stages,

6
00:00:31.330 --> 00:00:36.190
they are like summarized in one word which is hoisting.

7
00:00:36.490 --> 00:00:38.260
So we know what hoisting is.

8
00:00:38.560 --> 00:00:45.910
So and we are we've also talked about the variable hoisting, a.k.a. the variable compilation and execution

9
00:00:45.910 --> 00:00:50.680
stages or or phases or passes, whatever you want to call that.

10
00:00:51.150 --> 00:00:51.430
All right.

11
00:00:51.550 --> 00:00:56.650
So now we have to talk about, even though we have covered it, even though we have covered this so

12
00:00:56.650 --> 00:01:02.530
individual hoisting, what we had was how this code is going to get executed.

13
00:01:02.710 --> 00:01:05.840
We know how this code is going to get executed.

14
00:01:05.910 --> 00:01:08.650
OK, we talked about it in the previous lecture.

15
00:01:08.800 --> 00:01:16.270
In this lecture, we are just going to go over this lexical scope idea and how hoisting fits into this

16
00:01:16.270 --> 00:01:19.330
entire into this picture.

17
00:01:19.690 --> 00:01:24.550
So we know that line for online 14 are executable code.

18
00:01:25.690 --> 00:01:32.080
But if I go ahead and if I run this program in this line, we are going to get a type error rate.

19
00:01:32.080 --> 00:01:38.510
And in this line, on this line, we are going to get no error rate and I'm going to save it.

20
00:01:38.770 --> 00:01:40.110
So here we have a type.

21
00:01:40.130 --> 00:01:42.100
The movie is not a function.

22
00:01:42.760 --> 00:01:50.410
Why is this I'm going to explain to you what this is in the context of code, execution, execution

23
00:01:50.410 --> 00:01:51.130
context.

24
00:01:51.130 --> 00:01:56.170
And also like this, the entire idea of lexical scope of JavaScript.

25
00:01:56.650 --> 00:02:04.930
Now, whenever the whenever we are in our first stage, which is the compilation or the parsing stage,

26
00:02:05.110 --> 00:02:06.190
what we have is.

27
00:02:07.430 --> 00:02:15.380
We go ahead and we check check all our all of our formal declarations, so in here we have two types

28
00:02:15.380 --> 00:02:17.330
of formal declarations online.

29
00:02:17.360 --> 00:02:21.200
Number seven, we have a function, a formal declaration.

30
00:02:21.470 --> 00:02:27.110
And on 9/11, we have a veritable declaration or a valuable formal declaration.

31
00:02:28.070 --> 00:02:31.340
The reason that it is a formal declaration is that it has.

32
00:02:31.340 --> 00:02:34.010
And there is the verbal keyword.

33
00:02:34.040 --> 00:02:35.460
There is the identifier.

34
00:02:35.480 --> 00:02:39.140
There is the like the value for that identifier.

35
00:02:39.950 --> 00:02:40.330
All right.

36
00:02:40.670 --> 00:02:46.160
So when whenever we write this code and we start from the top from line number one.

37
00:02:46.520 --> 00:02:50.780
Line number one is our it is it is a note.

38
00:02:50.780 --> 00:02:51.610
It is a common.

39
00:02:51.620 --> 00:02:54.470
So it doesn't run line number two is the same thing.

40
00:02:54.470 --> 00:03:00.680
Then we have a space online number for we have we don't have a formal declaration.

41
00:03:00.690 --> 00:03:02.690
This is not a formal declaration.

42
00:03:03.140 --> 00:03:12.140
So any identifier or any variable has to make two goals.

43
00:03:12.140 --> 00:03:20.990
Either it is receiving an assignment or it is receiving a value or is a target for reference or it is

44
00:03:20.990 --> 00:03:22.520
a source of reference.

45
00:03:22.850 --> 00:03:25.850
Now, this is not a formal declaration.

46
00:03:25.850 --> 00:03:33.320
And because it is not receiving anything, OK, as an as as a value, the same thing goes for line number

47
00:03:33.320 --> 00:03:33.610
five.

48
00:03:33.620 --> 00:03:35.090
I'm just going to go ahead and trash that.

49
00:03:35.570 --> 00:03:42.160
But whenever we come to line number seven, we can see that we have a formal function declaration inside

50
00:03:42.180 --> 00:03:45.350
which we have a function identifier.

51
00:03:45.530 --> 00:03:52.400
And we know that this function identifier, because it is a function declaration, function declarations,

52
00:03:52.790 --> 00:04:00.920
they and their identifiers, they will belong to their enclosing scope, which in this case is the global

53
00:04:00.920 --> 00:04:01.220
scope.

54
00:04:01.640 --> 00:04:08.090
So whenever the compiler reaches the line number seven, it is going to ask the scope manager that have

55
00:04:08.090 --> 00:04:10.160
you heard of this book identifier?

56
00:04:10.550 --> 00:04:15.380
We don't care what's inside the function for now because that is the job of the execution engine.

57
00:04:15.830 --> 00:04:21.899
But we just want to know what are our identifiers and what scope do they belong to?

58
00:04:22.220 --> 00:04:24.830
So I'm just going to come in this one right here, OK?

59
00:04:24.840 --> 00:04:26.510
I'm going to create a multiline coming.

60
00:04:26.810 --> 00:04:37.580
So in the compilation stage, in the compilation stage, we are interested and that's the case that

61
00:04:38.840 --> 00:04:51.590
we are or we want to create a plan or like blueprint, whatever you want to call it, blueprint or map

62
00:04:52.100 --> 00:04:53.870
for variables.

63
00:04:54.800 --> 00:05:06.650
For I'm just going to write four formal declarations and the scopes that they belong to, so this is

64
00:05:06.650 --> 00:05:11.770
what we want to do in the compilation stage, we are just looking for formal declarations.

65
00:05:11.780 --> 00:05:17.230
We see one here and we ask the scope manager, have you heard about this?

66
00:05:17.240 --> 00:05:18.410
Do you know what this says?

67
00:05:18.440 --> 00:05:24.140
The scope manager is going to say no, but the scope manager is going to create a scope for it.

68
00:05:24.440 --> 00:05:27.320
He's going to define a scope for the scope are created.

69
00:05:27.320 --> 00:05:30.680
Of course, it's going to say that which scope it belongs to.

70
00:05:30.680 --> 00:05:39.440
And this identifier book, it belongs to to the scope or global scope, then online.

71
00:05:39.950 --> 00:05:42.400
And then after that, we are done on line 15.

72
00:05:42.530 --> 00:05:46.340
We don't have any formal declaration line 16, no lines 17 now.

73
00:05:46.640 --> 00:05:50.240
So online 18, we have another formal declaration.

74
00:05:51.230 --> 00:05:55.180
And in this formal declaration, this is not a function declaration.

75
00:05:55.190 --> 00:05:57.030
This is a variable declaration.

76
00:05:57.050 --> 00:05:57.410
All right.

77
00:05:57.740 --> 00:06:05.240
So we are we don't care what's on the other side of this assignment, a quality assignment.

78
00:06:05.240 --> 00:06:08.000
We don't care what's on the right hand side.

79
00:06:08.000 --> 00:06:11.480
We only care what's on the left hand side.

80
00:06:11.480 --> 00:06:14.810
OK, so we ask again the same thing.

81
00:06:14.810 --> 00:06:24.050
Compiler asks the scope manager because the scope manager is the person or the manager that specifies

82
00:06:24.050 --> 00:06:31.340
which declarations should go into which I sorry, which are identifiers should go into which scope.

83
00:06:31.700 --> 00:06:33.140
That's what scope manager does.

84
00:06:33.140 --> 00:06:36.290
So we are going to ask the scope manager, do you know what this is?

85
00:06:36.290 --> 00:06:43.400
The scope manager is going to say no, but the scope manager is going to know and determine which scope

86
00:06:43.430 --> 00:06:45.650
this movie identifier belongs to.

87
00:06:45.920 --> 00:06:48.770
And it belongs to the Global Scope Online.

88
00:06:48.770 --> 00:06:49.310
Nineteen.

89
00:06:49.310 --> 00:06:50.690
We have nothing.

90
00:06:50.900 --> 00:06:55.490
No, we do have something, but we don't have a formal declaration.

91
00:06:56.940 --> 00:07:04.130
Online 20, we have we don't have a formal declaration and online 21, we don't have a formal declaration.

92
00:07:04.410 --> 00:07:14.850
So at this point, the compilation stage is done and we are in the in the execution execution stage

93
00:07:15.600 --> 00:07:17.700
right now in the execution stage.

94
00:07:17.880 --> 00:07:24.770
We know that what are our identifiers and we know what scopes do they belong to.

95
00:07:24.810 --> 00:07:33.090
So the only thing that happens at this stage is we access these Vereb identifiers and we want to find

96
00:07:33.090 --> 00:07:38.990
out whether they are indeed targeted reference or they are in the source reference.

97
00:07:39.660 --> 00:07:45.860
So if they are in the target reference, such as line number 18, what do we want to do?

98
00:07:46.320 --> 00:07:48.210
What does the execution engine do?

99
00:07:48.210 --> 00:07:55.350
In fact, the execution engine is going to grab the value of that and allocate his space in memory to

100
00:07:55.350 --> 00:07:55.570
it.

101
00:07:56.160 --> 00:08:03.750
OK, and if we are in the source position, like line number 11, then that line number 11 is going

102
00:08:03.750 --> 00:08:08.730
to take us all the way to where that source points.

103
00:08:09.270 --> 00:08:14.160
But line number 14 to line number 16, they are not executable code.

104
00:08:14.460 --> 00:08:16.230
They are compiled code.

105
00:08:16.240 --> 00:08:17.820
They have been compiled away.

106
00:08:18.300 --> 00:08:19.740
It executable code.

107
00:08:19.740 --> 00:08:30.060
It only is looking for like a identifiers, valid identifiers and whether or not they're in the target

108
00:08:31.200 --> 00:08:33.520
position or if they are in the source position.

109
00:08:34.020 --> 00:08:35.159
So this book.

110
00:08:36.240 --> 00:08:38.280
So we are going to start step by step.

111
00:08:38.669 --> 00:08:45.180
So this book, it is a source reference for a foreign identifier called book.

112
00:08:45.750 --> 00:08:50.970
And whenever we access that, we get everything that's inside of this function, right.

113
00:08:51.210 --> 00:08:52.280
Then the function runs.

114
00:08:52.560 --> 00:09:01.380
So the way that this execution engine works is first off, we get the identifiers, then what the identifier

115
00:09:01.380 --> 00:09:02.550
represents.

116
00:09:02.910 --> 00:09:03.300
Right.

117
00:09:03.450 --> 00:09:07.610
Or what the identifier points to.

118
00:09:07.770 --> 00:09:17.010
So I'm just going to write identifier then what what it points.

119
00:09:18.330 --> 00:09:24.060
Points to or what is the value of first identifier?

120
00:09:24.090 --> 00:09:28.530
That's right, first first identifier, then what it points to.

121
00:09:28.770 --> 00:09:34.530
So this is what the execution engine does and it allocates a small piece of memory, a small space in

122
00:09:34.530 --> 00:09:35.310
memory to that.

123
00:09:35.790 --> 00:09:37.870
And that's how it works.

124
00:09:37.950 --> 00:09:46.560
Now, what Hoisting says is that the function, this function is physically cut from here and it comes

125
00:09:46.560 --> 00:09:47.240
right here.

126
00:09:47.610 --> 00:09:48.380
Why?

127
00:09:48.540 --> 00:09:56.310
Because we have access to this function, even though the function call comes before the function definition

128
00:09:56.310 --> 00:09:56.840
itself.

129
00:09:57.450 --> 00:10:01.820
So the function call, this is our normal code C, our regular code.

130
00:10:02.190 --> 00:10:13.050
So the function call is before comes, before the function, the function definition and hoisting says

131
00:10:13.050 --> 00:10:18.670
that the function because this I'm just going to go ahead and come in this one out because we are just

132
00:10:19.200 --> 00:10:22.100
for now we are just talking about the function declaration.

133
00:10:22.290 --> 00:10:24.360
I'm going to come to the function expression as well.

134
00:10:24.370 --> 00:10:29.880
But now I just want to talk about the function declaration now in which we can see that this function

135
00:10:29.880 --> 00:10:30.360
runs.

136
00:10:30.630 --> 00:10:38.130
But but the hoisting says the hoisting misconception is that that this function physically comes here.

137
00:10:38.400 --> 00:10:43.590
So what I'm going to do is I'm going to create another comment and I'm going to say the.

138
00:10:45.450 --> 00:10:51.030
Hoisting misconception, misconception.

139
00:10:51.540 --> 00:10:55.760
All right, this is like this, so what does the hoisting misconceptions say?

140
00:10:56.010 --> 00:11:03.720
The hoisting misconception says that first our function comes physically and then I'm just going to

141
00:11:03.720 --> 00:11:06.920
remove this as well, and then our function is cut.

142
00:11:07.200 --> 00:11:13.860
But that's not actually how things work in JavaScript, because JavaScript is a lexically scoped language

143
00:11:14.190 --> 00:11:16.860
and it is not interpreted language.

144
00:11:16.860 --> 00:11:19.140
It means it doesn't go along in line by line.

145
00:11:19.450 --> 00:11:24.710
If it were to go line by line, that we would see an error on this line as well.

146
00:11:24.990 --> 00:11:33.870
But we don't see an error on that line because the execution engine stage, we are just looking for

147
00:11:33.870 --> 00:11:36.900
executable code, a function declaration.

148
00:11:36.970 --> 00:11:38.190
Keep keep this in mind.

149
00:11:38.730 --> 00:11:44.190
What not what what's inside the function declaration, but the function declaration itself.

150
00:11:44.190 --> 00:11:47.430
The identifier is not an executable code.

151
00:11:47.790 --> 00:11:49.830
It is just a compiled code.

152
00:11:49.830 --> 00:11:54.180
When it is compiled, we just call the function, then the function is executed.

153
00:11:54.390 --> 00:11:56.970
And you might ask, okay, how do we know that?

154
00:11:57.390 --> 00:12:04.340
Because whenever you put in these parentheses, these parentheses are exactly what executes this function.

155
00:12:04.710 --> 00:12:10.350
So that's why there are two steps to processes like a two step process.

156
00:12:10.620 --> 00:12:18.960
And when you think about it in this context, you will understand how a function can be executed when

157
00:12:18.990 --> 00:12:23.700
the function definition comes after the function call itself.

158
00:12:24.360 --> 00:12:25.590
The reason for that is.

159
00:12:26.950 --> 00:12:33.160
This book is the function call, but what is the function of execution that is the parentheses.

160
00:12:33.160 --> 00:12:36.000
The parentheses comes before the function execution.

161
00:12:36.250 --> 00:12:39.050
That's why it executes first.

162
00:12:39.400 --> 00:12:46.450
That's why we need a plan for the execution engine so that engine knows.

163
00:12:46.450 --> 00:12:48.970
OK, how how can I execute that?

164
00:12:49.850 --> 00:12:55.820
OK, so this is the hosting misconception, says that the function physically is removed from there

165
00:12:55.820 --> 00:12:56.780
and it comes on top.

166
00:12:56.810 --> 00:12:58.360
No, no, no, it is not.

167
00:12:58.370 --> 00:12:59.260
It doesn't do that.

168
00:12:59.970 --> 00:13:07.090
The original definition of hoisting is this very lexical scope that we have been talking about.

169
00:13:07.400 --> 00:13:09.230
So that is actually hosting.

170
00:13:09.230 --> 00:13:12.650
Hosting is not this is the hosting conception.

171
00:13:12.800 --> 00:13:15.200
I'm not saying that hosting doesn't exist.

172
00:13:15.200 --> 00:13:16.160
It does exist.

173
00:13:16.400 --> 00:13:22.640
Even though it came to JavaScript, it didn't exist prior to ECMAScript 2015.

174
00:13:22.970 --> 00:13:32.150
But when it came, it just provided us with a metaphor for this lexically scoped language, which is

175
00:13:32.150 --> 00:13:32.770
JavaScript.

176
00:13:33.170 --> 00:13:40.190
This is like an easier way of putting how JavaScript works, which instead of saying that there are

177
00:13:40.190 --> 00:13:42.860
two steps, like the first step does this.

178
00:13:42.860 --> 00:13:44.450
The second step does this.

179
00:13:44.810 --> 00:13:48.410
We just say joystick and there is nothing else.

180
00:13:48.410 --> 00:13:56.090
It's not like a magical feature of JavaScript that that like faries that like a compiler or code or

181
00:13:56.090 --> 00:13:57.100
like run the code.

182
00:13:57.110 --> 00:13:57.620
No, no, no.

183
00:13:57.890 --> 00:14:05.210
It is that two stages rolled into one word and hoisting is basically that it does exist.

184
00:14:05.210 --> 00:14:12.290
It's a it is a thing, but it actually refers to the compilation stage on the execution stage.

185
00:14:12.530 --> 00:14:13.990
So this is a misconception.

186
00:14:14.450 --> 00:14:17.120
So that was the function declaration.

187
00:14:17.120 --> 00:14:19.160
But what about functional expressions?

188
00:14:19.180 --> 00:14:26.300
So because function expressions, basically, they have a variable declaration, they are declared through

189
00:14:26.300 --> 00:14:27.220
a variable.

190
00:14:28.400 --> 00:14:31.520
The same thing that we had in a previous lecture.

191
00:14:31.520 --> 00:14:37.650
It is going to happen here because this line of code, this is the function, this is the executable

192
00:14:37.650 --> 00:14:37.910
line.

193
00:14:38.300 --> 00:14:40.910
This line is the executable line.

194
00:14:40.920 --> 00:14:41.390
All right.

195
00:14:42.640 --> 00:14:46.900
That's why function declarations, if you if you.

196
00:14:50.040 --> 00:14:57.570
Call them before the function itself, we are going to get an error the same way we had in our variables,

197
00:14:57.810 --> 00:15:02.440
so that function expression is the same thing as this one.

198
00:15:02.730 --> 00:15:05.760
So this book variable is not defined, if I call it.

199
00:15:05.760 --> 00:15:07.000
We are going to get undefined.

200
00:15:07.470 --> 00:15:12.210
The difference is that whenever we call this, we get a taper.

201
00:15:12.450 --> 00:15:14.610
It means that this is a type error.

202
00:15:14.610 --> 00:15:19.470
We have mistyped something because there isn't any function by the name of movie.

203
00:15:20.040 --> 00:15:25.050
And but what the hoisting says is this is how actually this function runs.

204
00:15:25.230 --> 00:15:30.900
So I'm going to give you the hoisting perspective on the function declaration sorry, function expression

205
00:15:30.900 --> 00:15:31.270
as well.

206
00:15:31.740 --> 00:15:33.650
So this is what hoisting says.

207
00:15:33.660 --> 00:15:40.550
So according to the misconception, not according to our original plan that we have for a compilation.

208
00:15:41.820 --> 00:15:47.450
So it is going to save our movie is right here and then we call the function.

209
00:15:47.610 --> 00:15:51.950
I'm just going to go ahead and call it right here and then we have our function.

210
00:15:51.960 --> 00:15:53.010
Let's copy it.

211
00:15:53.370 --> 00:15:55.530
Let's put it right here and let's remove this.

212
00:15:57.040 --> 00:16:05.110
So this is what hoisting says, the misconception part of the mistaken, mis understood hoisting says

213
00:16:05.410 --> 00:16:08.760
that this variable is separated from here.

214
00:16:08.950 --> 00:16:11.860
It goes to the top and then this function runs.

215
00:16:12.070 --> 00:16:18.430
Even in that case, if I run it, if I run this function, OK, if I run the movie, we are going to

216
00:16:18.430 --> 00:16:21.670
see that we should see a type error here.

217
00:16:22.150 --> 00:16:26.810
So what I'm going to do is let's go ahead and let's run this as well.

218
00:16:27.190 --> 00:16:28.870
We can see that both of them run.

219
00:16:28.880 --> 00:16:33.010
But let's check this one out.

220
00:16:33.820 --> 00:16:38.620
And I think the reason for that is it says the good, the bad and the ugly.

221
00:16:38.620 --> 00:16:42.860
They come from line number 19, whereas so this is line number 19.

222
00:16:43.210 --> 00:16:48.670
So for this example, to work, I'm going to come in this entire thing out.

223
00:16:48.910 --> 00:16:52.060
And now we can see we see a type at her, right.

224
00:16:52.300 --> 00:16:53.680
So we get the same thing.

225
00:16:53.680 --> 00:17:01.720
Even if if this misunderstood kind of mysterious hoisting works, we still get a typer.

226
00:17:02.260 --> 00:17:02.650
Right.

227
00:17:03.520 --> 00:17:05.859
And that's not actually how it works.

228
00:17:05.890 --> 00:17:12.609
So if I were to comment that one out and coming this one in and save it, we can see that the function

229
00:17:12.609 --> 00:17:13.760
runs perfectly fine.

230
00:17:14.619 --> 00:17:14.940
All right.

231
00:17:15.099 --> 00:17:17.859
So we are just going to wrap this up.

232
00:17:19.030 --> 00:17:25.119
We know that JavaScript is a lexically scoped language whenever the code is converted into a program

233
00:17:25.119 --> 00:17:26.109
in layman's terms.

234
00:17:27.579 --> 00:17:28.630
We have two stages.

235
00:17:28.630 --> 00:17:34.870
The compilation stage than the execution stage inside the compilation stage we have, we want to find

236
00:17:34.870 --> 00:17:41.390
out what are our identifiers, formal identifiers and also what scope do they belong to.

237
00:17:41.590 --> 00:17:41.950
Right.

238
00:17:43.350 --> 00:17:52.200
And in the execution stage, we want to know which are our executable code, and when we get to those,

239
00:17:52.320 --> 00:17:57.960
we want to know that identifiers position, whether it is a target or a source, so we can allocate

240
00:17:57.960 --> 00:18:00.810
a small space in memory to that specific

241
00:18:03.960 --> 00:18:04.860
identifier.

242
00:18:04.860 --> 00:18:05.280
Right.

243
00:18:05.490 --> 00:18:11.550
And this entire process, compilation, compilation and execution is called hoisting.

244
00:18:12.120 --> 00:18:20.640
But the misunderstood part of hoisting is that it is only one part, only one part of hoisting is misunderstood.

245
00:18:20.880 --> 00:18:26.490
And that part is the code is physically rearranged inside like your program.

246
00:18:26.610 --> 00:18:27.760
And that's incorrect.

247
00:18:27.780 --> 00:18:28.860
That is not correct.

248
00:18:29.090 --> 00:18:36.100
I just showed you the documentation, even though the documentation has like a little bit of like a

249
00:18:36.120 --> 00:18:37.110
mistake here.

250
00:18:37.380 --> 00:18:39.770
But still, this is documentation, right?

251
00:18:40.110 --> 00:18:46.080
We are going to go over the specification as well, because there is actually one more thing that I

252
00:18:46.080 --> 00:18:54.930
want to show you, and that is the temporal dead zone or TDE error that we get with const and let because

253
00:18:54.930 --> 00:18:57.570
we know how hosting works with VARE.

254
00:18:57.900 --> 00:19:06.270
But how about letting const and contrary to popular popular belief, let and conse do host but in a

255
00:19:06.270 --> 00:19:06.900
different way.

256
00:19:07.080 --> 00:19:10.050
So see you guys in the next lecture where we block

257
00:19:12.720 --> 00:19:17.580
what is the word we blast this bubble or like blow this bubble.

258
00:19:18.030 --> 00:19:18.860
We don't blow it.

259
00:19:18.870 --> 00:19:23.430
I think the correct word should be burst this bubble.

260
00:19:23.450 --> 00:19:25.260
OK, just took me like half a second.

261
00:19:25.470 --> 00:19:29.850
We are going to burst the bubble of this in our next lecture as well.

262
00:19:29.850 --> 00:19:37.350
And I'm going to give you the source, the go to resource in the spec, and that is the ECMAScript language

263
00:19:37.350 --> 00:19:38.160
specification.

264
00:19:38.160 --> 00:19:39.420
I'm going to give you the website.

265
00:19:39.570 --> 00:19:43.290
I'm going to give you that the paragraph for that.

266
00:19:43.290 --> 00:19:50.100
And I'm going to explain it to you how temporal deadzone works and why letton costs can do hoist.

267
00:19:50.100 --> 00:19:56.580
But what is the difference between hoisting when it comes to let constant when it comes to var see you

268
00:19:56.580 --> 00:19:57.900
guys in the next lecture.

