WEBVTT
1
00:00:01.210 --> 00:00:02.090
Hi, everyone.

2
00:00:02.110 --> 00:00:08.530
In this lecture, we are going to go ahead and implement the dynamic element of this for.

3
00:00:09.760 --> 00:00:14.800
All right, so first off, what I'm going to do is I'm going to grab the element that we want to work

4
00:00:14.800 --> 00:00:20.800
with, and that is only there are only two elements which are actually the same element.

5
00:00:20.830 --> 00:00:22.020
They are the labels.

6
00:00:22.210 --> 00:00:24.400
So we are just going to grab the labels.

7
00:00:24.430 --> 00:00:30.310
I'm going to say document that query selector all because there are two elements that I want to grab

8
00:00:30.730 --> 00:00:38.270
that have a that are inside the form control and they elements.

9
00:00:38.680 --> 00:00:39.900
Name is label.

10
00:00:40.390 --> 00:00:41.640
I want to grab both of them.

11
00:00:41.980 --> 00:00:44.040
So we have successfully selected them.

12
00:00:44.380 --> 00:00:48.250
And in here what I'm going to say because they are, they are two.

13
00:00:48.250 --> 00:00:48.790
I'm going to.

14
00:00:49.910 --> 00:00:51.770
Levels, it's not levels.

15
00:00:52.640 --> 00:00:55.640
It's labor, right, labor.

16
00:00:56.420 --> 00:00:59.330
So what I'm going to do is I'm going to loop over both of them.

17
00:00:59.600 --> 00:00:59.960
All right.

18
00:01:00.080 --> 00:01:09.740
And whenever each one of them is grabbed or is selected or when or to be exact, whenever we click inside

19
00:01:09.740 --> 00:01:13.260
the input I want I want I want something to happen.

20
00:01:13.400 --> 00:01:13.790
All right.

21
00:01:14.000 --> 00:01:20.180
So this is a for each and in here it says we need to pass a callback function.

22
00:01:20.580 --> 00:01:20.960
Right.

23
00:01:20.960 --> 00:01:31.910
And for the callback function, we also need to pass in a label which is the for which is the for loop

24
00:01:32.180 --> 00:01:34.070
or which is the loop variable.

25
00:01:34.500 --> 00:01:41.710
Right now in here, what I'm going to do is I'm going to say label dot enriched html, label dot enter

26
00:01:41.740 --> 00:01:46.010
HTML should be equal to label dot.

27
00:01:47.720 --> 00:01:49.280
And are text.

28
00:01:50.310 --> 00:01:58.440
All right, darte splett, now we are going to play this flight method, so we are going to grab the

29
00:01:58.440 --> 00:02:07.110
the HDMI element, which for the label and we are going to grab the text within that HDMI element.

30
00:02:07.470 --> 00:02:07.820
All right.

31
00:02:07.890 --> 00:02:09.210
And we are going to split it.

32
00:02:09.539 --> 00:02:15.570
What do we want to split it and we want to split it at like just an empty string.

33
00:02:15.730 --> 00:02:22.350
So we want to whenever you provide an empty string inside the split, it is going to split it at each

34
00:02:22.350 --> 00:02:27.480
and each specific letter or character, because whenever we click on this.

35
00:02:28.450 --> 00:02:32.870
Every character goes to top one by one, right?

36
00:02:33.130 --> 00:02:38.890
So that's why we are going to split it at that and we are going to say, man, now this is the new thing

37
00:02:38.890 --> 00:02:41.350
that we we use here.

38
00:02:41.600 --> 00:02:45.460
And for what we are going to do is we are going to use an arrow function.

39
00:02:45.610 --> 00:02:52.750
I know we haven't specifically started working on the arrow function, but we can work with them now

40
00:02:53.050 --> 00:03:00.100
using them in these projects like in like for a few times, it is going to allow you to allow your eyes

41
00:03:00.100 --> 00:03:03.430
to get familiarized with the syntax for error functions.

42
00:03:03.700 --> 00:03:10.750
They are way easier than regular functions that we use regular function declarations or regular functions

43
00:03:10.750 --> 00:03:11.980
with the function keyword.

44
00:03:12.490 --> 00:03:14.410
But error functions.

45
00:03:14.410 --> 00:03:19.660
They have their place whenever we get to them and whenever we cover them in our projects, we are going

46
00:03:19.660 --> 00:03:20.770
to go over that.

47
00:03:20.770 --> 00:03:21.120
Right.

48
00:03:21.580 --> 00:03:30.190
So as with this, the for each loop for the map, we also need to pass on a callback function and in

49
00:03:30.190 --> 00:03:35.510
here it says calls a defined callback function on each element of an array.

50
00:03:35.830 --> 00:03:43.000
So we have selected both our labels and both of them are presented to us inside an array.

51
00:03:43.060 --> 00:03:43.470
All right.

52
00:03:43.720 --> 00:03:46.750
So now this constant, it gives us an array.

53
00:03:46.780 --> 00:03:49.500
So let me bring that Intellisense one more time.

54
00:03:50.660 --> 00:03:54.010
You can learn Web development by just working in the Vaskov.

55
00:03:54.020 --> 00:03:55.480
That's how cool this code is.

56
00:03:56.400 --> 00:04:02.640
And it says Codes calls a defined callback function callback function is the function which is passed

57
00:04:02.640 --> 00:04:04.420
inside another function.

58
00:04:05.130 --> 00:04:06.750
This map is a function.

59
00:04:06.750 --> 00:04:08.040
It is called a method.

60
00:04:08.040 --> 00:04:09.920
Methods are functions in JavaScript.

61
00:04:10.380 --> 00:04:10.700
Right.

62
00:04:11.970 --> 00:04:14.560
So on each element of an array.

63
00:04:14.700 --> 00:04:21.329
So whenever we pass in this function and here it is going to work, it is going to be defined on each

64
00:04:21.329 --> 00:04:23.430
element of this array.

65
00:04:23.550 --> 00:04:30.570
And this array has two elements the first label and the second level, and returns an array that contains

66
00:04:30.570 --> 00:04:31.680
the results.

67
00:04:31.950 --> 00:04:34.780
This is what we want, the map method.

68
00:04:34.860 --> 00:04:36.390
So what does the map method do?

69
00:04:36.540 --> 00:04:45.510
The map method creates a new array populated with the results of calling a provided function on every

70
00:04:45.510 --> 00:04:47.080
element in the calling array.

71
00:04:47.880 --> 00:04:49.380
That was the specification.

72
00:04:49.380 --> 00:04:51.210
I got that text from Emdin.

73
00:04:51.390 --> 00:04:58.170
But you have to get familiarized with these terminologies if you want to become like a supreme developer,

74
00:04:58.780 --> 00:04:59.100
right.

75
00:04:59.220 --> 00:05:03.670
And it basically says it is going to create a new aura.

76
00:05:04.560 --> 00:05:12.090
And the items within that new array are going to come from the function that is defined inside this

77
00:05:12.390 --> 00:05:12.800
method.

78
00:05:13.350 --> 00:05:13.830
All right.

79
00:05:14.680 --> 00:05:21.130
And where where does this where does the function get the items it is going to grab it from the array

80
00:05:21.130 --> 00:05:22.420
that the function calls.

81
00:05:22.600 --> 00:05:25.190
So it's super simple, super simple like that.

82
00:05:25.360 --> 00:05:27.540
So I'm just going to give you a map here.

83
00:05:27.730 --> 00:05:31.090
So the map is going to call a function.

84
00:05:32.050 --> 00:05:40.710
OK, I should avoid using this syntax because this is the syntax for the error, for the error functions.

85
00:05:41.020 --> 00:05:43.520
So the map calls a defined function.

86
00:05:43.900 --> 00:05:47.860
I'm just going to say define and the defined function.

87
00:05:49.010 --> 00:06:00.050
Is going to call defined Arae, right, and then what happens then defined function.

88
00:06:01.010 --> 00:06:18.560
Grabs items from the defined array and then what happens then the map creates a new array with those

89
00:06:18.650 --> 00:06:19.310
items.

90
00:06:19.490 --> 00:06:26.150
I mean, this is like some sort of right over the top, but I'm going to keep it here, OK, because

91
00:06:26.150 --> 00:06:27.090
this is really cool.

92
00:06:27.410 --> 00:06:30.390
This map is actually a higher order function.

93
00:06:30.700 --> 00:06:31.040
All right.

94
00:06:31.340 --> 00:06:38.600
We have talked about the first version of higher order functions, but after these intermediate beginner

95
00:06:38.600 --> 00:06:44.690
to intermediate projects are done, we are going to talk about higher order functions, version two

96
00:06:44.690 --> 00:06:45.090
as well.

97
00:06:45.290 --> 00:06:47.600
We are going to cover higher order functions as well.

98
00:06:47.810 --> 00:06:54.020
We're going to take a look at the map function like, again, whenever we are done with these intermediate

99
00:06:54.920 --> 00:06:55.610
projects.

100
00:06:57.110 --> 00:07:03.320
All right, so in here, what I'm going to do is I'm going to create the syntax for a regular arrow

101
00:07:03.320 --> 00:07:03.900
function.

102
00:07:03.920 --> 00:07:06.680
So this is the syntax for a regular error function.

103
00:07:07.280 --> 00:07:08.780
So I'm just going to do this.

104
00:07:08.930 --> 00:07:12.090
So inside these parentheses, you provide parameters.

105
00:07:12.740 --> 00:07:16.670
Think of this arrow as the as the name suggests, arrow function.

106
00:07:16.670 --> 00:07:22.880
But this is like the function key word that we have instead of that this is called in here.

107
00:07:22.970 --> 00:07:25.420
And whenever I hover over it, it says function.

108
00:07:25.640 --> 00:07:30.230
So think of this arrow as the function key word that we have written here like this.

109
00:07:30.530 --> 00:07:36.770
And this is the curly braces where the function calculates something some because we just have one line

110
00:07:36.770 --> 00:07:43.640
so I can very safely go ahead and get rid of this curly brace.

111
00:07:43.710 --> 00:07:44.920
So in here, what do I want?

112
00:07:45.110 --> 00:07:50.330
We are going to use our back takes because for creating elements to dynamically, the best thing that

113
00:07:50.330 --> 00:07:52.670
we can use is template strings, of course.

114
00:07:53.330 --> 00:08:00.230
So in here, what I want to use, I want to create an element dynamically and the car, the content

115
00:08:00.230 --> 00:08:02.820
for the element, there are going to be the latter.

116
00:08:03.130 --> 00:08:03.580
All right.

117
00:08:04.370 --> 00:08:06.800
So we are going to have a letter there.

118
00:08:07.070 --> 00:08:07.870
Not a word.

119
00:08:07.880 --> 00:08:08.750
It's a letter.

120
00:08:08.750 --> 00:08:09.110
Right.

121
00:08:09.200 --> 00:08:14.980
And now let's close this, provide the closing tag for this element.

122
00:08:14.990 --> 00:08:15.410
Right.

123
00:08:15.680 --> 00:08:18.620
And and let's save it.

124
00:08:19.460 --> 00:08:19.880
All right.

125
00:08:19.890 --> 00:08:20.960
So we have created.

126
00:08:20.990 --> 00:08:22.190
Now, this is a letter.

127
00:08:22.200 --> 00:08:25.520
Let's pass it inside here as a parameter.

128
00:08:25.640 --> 00:08:29.540
And we are going to pass it as an index, as a parameter as well in here.

129
00:08:30.260 --> 00:08:30.860
All right.

130
00:08:30.870 --> 00:08:33.919
So let's say that that's come here.

131
00:08:33.919 --> 00:08:35.970
And let's let's take a look at this.

132
00:08:35.990 --> 00:08:37.390
Now, this is what we get.

133
00:08:37.940 --> 00:08:41.990
So now because we have a split at the empty string, it splits it.

134
00:08:41.990 --> 00:08:44.440
And whenever I click there, it goes to top.

135
00:08:44.540 --> 00:08:46.010
So click away, click.

136
00:08:46.400 --> 00:08:50.060
So I can go ahead and say Muslim, one, two, three, whatever.

137
00:08:51.500 --> 00:08:58.150
At what ever so you can go ahead and say this, so whenever you click away, it is going to stay.

138
00:08:58.370 --> 00:09:01.730
But of course, this is not something that we want this comment.

139
00:09:01.750 --> 00:09:08.800
So we should get rid of them so that we can see that this label has been splintered apart.

140
00:09:09.020 --> 00:09:10.640
That's where this comes come from.

141
00:09:10.850 --> 00:09:17.690
So after the element is done, after we have created the span and the span is basically this.

142
00:09:18.020 --> 00:09:20.000
So where where is this fan, you might ask?

143
00:09:20.240 --> 00:09:23.630
This person is each individual letter in here?

144
00:09:24.020 --> 00:09:26.720
So each individual letter is actually our span.

145
00:09:27.310 --> 00:09:27.510
Right.

146
00:09:27.800 --> 00:09:31.670
So now we have like we have split it.

147
00:09:31.910 --> 00:09:33.930
We have split the lot.

148
00:09:34.000 --> 00:09:36.140
What is the past tense for that?

149
00:09:36.740 --> 00:09:39.260
We have I'm just going to call it we have split at it.

150
00:09:39.590 --> 00:09:39.920
Right.

151
00:09:39.950 --> 00:09:42.890
So we have split the label.

152
00:09:43.160 --> 00:09:48.680
Now, whenever the label goes to top, we want to join it again.

153
00:09:48.680 --> 00:09:52.970
So we are going to call the joint method, which I'm pretty sure we have covered it.

154
00:09:53.600 --> 00:09:59.200
It adds all the elements of an array separated by the specified separate strain.

155
00:09:59.450 --> 00:10:01.540
So what is this separate string?

156
00:10:01.550 --> 00:10:02.570
It's an empty string.

157
00:10:02.780 --> 00:10:04.540
It is going to join them back together.

158
00:10:04.850 --> 00:10:08.180
So now let's go ahead and let's take a look at that.

159
00:10:09.240 --> 00:10:15.360
But it still doesn't work, and what is the reason for that, because we have split it at the empty

160
00:10:15.360 --> 00:10:18.190
string, we have to join them at the empty string as well.

161
00:10:18.450 --> 00:10:20.520
So now if I click, it goes to top it.

162
00:10:20.520 --> 00:10:21.820
If I click, it goes straight up.

163
00:10:22.110 --> 00:10:28.860
Now, another key component is missing, and that is this like one word going to top each like each

164
00:10:28.860 --> 00:10:33.510
word each summer, each letter or character goes to top one by one.

165
00:10:33.780 --> 00:10:36.450
So we still miss we are still missing that.

166
00:10:37.770 --> 00:10:38.970
Not a lot, of course.

167
00:10:39.330 --> 00:10:45.810
But what I'm going to do is inside this element, I'm going to show you another method of writing inline

168
00:10:45.810 --> 00:10:51.190
cyesis so you can write in line says inside this dynamic element as well.

169
00:10:51.570 --> 00:10:57.210
So in here, what I'm going to do is I'm just going to provide a transition delay because we do have

170
00:10:57.210 --> 00:10:58.590
a transition with the Kubic.

171
00:10:58.590 --> 00:11:00.380
Busier, busier.

172
00:11:00.630 --> 00:11:02.580
That is the proper pronunciation.

173
00:11:02.590 --> 00:11:09.930
I think we have a cubic visitor here and we don't have any transition.

174
00:11:10.200 --> 00:11:15.090
And you might ask, OK, why don't you provide the transition delay in here?

175
00:11:15.480 --> 00:11:21.240
Because if I provide the transition delay here, it is going to be applied for the entire span.

176
00:11:21.480 --> 00:11:24.030
But I want it to be applied for each letter.

177
00:11:24.240 --> 00:11:26.540
Keep in mind, this is an each letter.

178
00:11:26.760 --> 00:11:30.650
So for each letter we are going to specify a transition delay.

179
00:11:31.310 --> 00:11:31.640
Right.

180
00:11:31.650 --> 00:11:38.640
So the transition delay, we should make sure that the syntax is accurate for inline styling and we

181
00:11:38.640 --> 00:11:40.440
are not misspelling anything.

182
00:11:40.660 --> 00:11:42.660
So we are going to say transition, delay.

183
00:11:43.080 --> 00:11:44.730
And now this is the cool part.

184
00:11:45.000 --> 00:11:48.180
We are going to add this transition delay dynamically.

185
00:11:48.570 --> 00:11:52.890
So for for that to happen, we are going to grab our index.

186
00:11:54.440 --> 00:11:56.420
And we are going to multiply it by.

187
00:11:57.810 --> 00:11:59.310
Fifty milliseconds.

188
00:11:59.610 --> 00:12:05.120
And in here, I'm just going to add milliseconds so it is clear that these are milliseconds.

189
00:12:05.430 --> 00:12:12.060
So let's go ahead and let's zoom out of it and let's decrease this so we can get everything on one line.

190
00:12:12.060 --> 00:12:13.590
And it is understandable.

191
00:12:13.980 --> 00:12:14.550
All right.

192
00:12:14.820 --> 00:12:21.300
So we have applied a style transition delay and the value comes dynamically from the index.

193
00:12:21.540 --> 00:12:27.750
So when the index is zero, we are not going to have any transition delay because index zero is time

194
00:12:28.050 --> 00:12:32.200
is going to be times 50 milliseconds.

195
00:12:32.200 --> 00:12:35.600
So zero times 50, zero times anything is going to be zero.

196
00:12:36.060 --> 00:12:42.240
But when the index is one, which means that now we are talking about the second character, the M in

197
00:12:42.240 --> 00:12:46.410
the email, the it is going to have 50 milliseconds of delay.

198
00:12:46.770 --> 00:12:54.180
And when the index is two, we are going to have 100 milliseconds of delay for the A character inside

199
00:12:54.180 --> 00:12:58.010
this label and the same thing happens here and so on and so forth.

200
00:12:58.290 --> 00:13:00.780
So let's say that let's click here.

201
00:13:00.790 --> 00:13:03.100
Voila, this is our effect.

202
00:13:03.330 --> 00:13:07.110
So this is going to be for this project and for this chapter.

203
00:13:07.230 --> 00:13:08.760
See you guys in the next one.

