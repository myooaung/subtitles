WEBVTT
1
00:00:01.220 --> 00:00:02.130
Hi, everyone.

2
00:00:02.150 --> 00:00:08.300
In this lecture, we are going to cover a few more examples of function declarations.

3
00:00:09.780 --> 00:00:15.390
All right, so what I'm going to do is I'm just going to go ahead and I'm going to write example number

4
00:00:15.390 --> 00:00:16.400
one, all right.

5
00:00:16.590 --> 00:00:22.290
And we are going to create a function and the function name is going to be movie rating.

6
00:00:22.760 --> 00:00:23.340
All right.

7
00:00:23.730 --> 00:00:28.620
And we are going to pass in a parameter of rating inside the function name.

8
00:00:28.630 --> 00:00:28.970
Right.

9
00:00:29.190 --> 00:00:31.110
And we are going to consider log.

10
00:00:32.780 --> 00:00:38.060
And through we are going to use our template strengths, right, and we are going to say the movies.

11
00:00:39.040 --> 00:00:44.620
The movies, I'm just going to go small letters, the movies rating is.

12
00:00:45.530 --> 00:00:51.240
We are going to use our template literals and we are going to and now inside this template literal,

13
00:00:51.450 --> 00:00:53.460
what is it that we have to pass in?

14
00:00:54.180 --> 00:00:55.140
You guessed right.

15
00:00:55.290 --> 00:01:00.210
It is the function parameter that we are going to pass in inside the template.

16
00:01:00.210 --> 00:01:01.510
Literal, right.

17
00:01:01.740 --> 00:01:08.100
So whenever we call this function, the function argument is going to be is going to take the place

18
00:01:08.100 --> 00:01:15.540
of the rating parameter and then it is going to be passed inside these inside this template strength.

19
00:01:15.920 --> 00:01:16.280
Right.

20
00:01:16.530 --> 00:01:25.440
And now let's go ahead and let's call this function and pass in a rating as an argument for the rating

21
00:01:25.440 --> 00:01:26.150
parameter.

22
00:01:26.370 --> 00:01:31.740
And I'm just going to go ahead and I'm going to save nine point five and it says cancel the log and

23
00:01:31.740 --> 00:01:33.010
this is a typo.

24
00:01:33.030 --> 00:01:34.040
Let's go ahead and save it.

25
00:01:34.260 --> 00:01:37.720
And it says the movie's rating is nine point five.

26
00:01:38.160 --> 00:01:38.490
All right.

27
00:01:38.610 --> 00:01:45.070
So we can use function parameters, we can use template strings inside functions as well.

28
00:01:45.570 --> 00:01:48.870
So this is our very first example of this lecture.

29
00:01:48.890 --> 00:01:54.560
Let's go ahead and let's talk about even like a bit more difficult functions.

30
00:01:54.810 --> 00:02:03.090
So this is an example to in this example, we are going to pass in two parameters and then two arguments

31
00:02:03.090 --> 00:02:08.520
for those parameters so we can have more than one parameter in the function.

32
00:02:08.910 --> 00:02:16.590
So we are going to say Kalik nums and we are going to pass in a parameter of X, and whenever you want

33
00:02:16.590 --> 00:02:22.890
to provide more than one parameter inside your function, you have to separate them by commas and you're

34
00:02:22.890 --> 00:02:27.320
going to pass and y and in here we are going to say cancel the log.

35
00:02:27.510 --> 00:02:33.090
So we want the function to implement the concept of log of X plus Y.

36
00:02:33.780 --> 00:02:41.300
Now let's go ahead, let's call this function and let's pass and arguments for each of those parameters.

37
00:02:41.550 --> 00:02:47.490
So I'm going to say no, this is the function call and inside the function call we are going to pass

38
00:02:47.490 --> 00:02:54.450
in the values for X and Y and in the end, the Intellisense, it says the first value is going to be

39
00:02:54.450 --> 00:02:58.160
referred to X and the second value is going to be referred to what?

40
00:02:58.680 --> 00:03:05.040
So if I put in five here and again inside they are inside the function call, we separate arguments

41
00:03:05.220 --> 00:03:06.200
with a comma.

42
00:03:07.170 --> 00:03:07.430
Right.

43
00:03:07.800 --> 00:03:10.950
So five is going to be the value of X.

44
00:03:10.950 --> 00:03:15.300
And let's go ahead and let's say one is going to be the value of Y.

45
00:03:15.300 --> 00:03:20.630
And when I say that we are going to get six here, we can call this function one more time.

46
00:03:20.640 --> 00:03:23.070
We can call it, of course, as many times as we want.

47
00:03:23.340 --> 00:03:29.210
And this time let's go ahead and let's say 14 and the value of Y is minus eight.

48
00:03:29.400 --> 00:03:31.230
So we should get six again.

49
00:03:31.590 --> 00:03:36.660
Let's put it to minus five so we get nine.

50
00:03:37.140 --> 00:03:37.480
Right.

51
00:03:37.710 --> 00:03:42.100
So this is how we would use multiple parameters inside a function.

52
00:03:42.720 --> 00:03:48.890
Let's go ahead and let's talk about the final example of this lecture, which is example number three.

53
00:03:49.200 --> 00:03:56.820
So what I'm going to do is I'm going to create a function that has a name of movie perf or movie performance.

54
00:03:57.240 --> 00:03:59.460
And I'm going to pass in two parameters.

55
00:03:59.670 --> 00:04:05.250
The first parameter is going to be movie name and the second parameter is going to be box office.

56
00:04:06.400 --> 00:04:06.820
Right.

57
00:04:07.600 --> 00:04:10.080
And what do I want this function to do?

58
00:04:10.240 --> 00:04:13.100
I want this function to log to the console.

59
00:04:13.150 --> 00:04:18.640
What a template literal that says or a template string that says the.

60
00:04:20.200 --> 00:04:28.040
Now, the movie name has grossed this much.

61
00:04:28.720 --> 00:04:32.080
OK, let's grab it box office.

62
00:04:33.790 --> 00:04:39.400
Basically, we want to say that this movie has earned this much money, all right, and we are going

63
00:04:39.400 --> 00:04:42.480
to say billion, right?

64
00:04:42.670 --> 00:04:43.630
So let's save it.

65
00:04:44.170 --> 00:04:51.400
And I'm going to pass in another dollar sign here for the money, because what what this Templer literal

66
00:04:51.410 --> 00:04:53.380
is going to give us is a no.

67
00:04:53.530 --> 00:05:01.750
And when we provide the dollars and before the no, it is actually like we are talking about currency,

68
00:05:01.810 --> 00:05:02.980
monetary value.

69
00:05:03.280 --> 00:05:03.640
Right.

70
00:05:03.790 --> 00:05:05.760
So we are going to say movie perve.

71
00:05:05.770 --> 00:05:11.650
We are going to call that and know this is a true reuseable function.

72
00:05:11.650 --> 00:05:12.010
Right.

73
00:05:12.250 --> 00:05:18.130
Because we can pass in any movie name that we want and we can pass in any box office that we want.

74
00:05:18.170 --> 00:05:18.510
Right.

75
00:05:18.850 --> 00:05:25.030
So the first movie name that I want to pass is going to be a string and I'm going to say Jurassic.

76
00:05:26.150 --> 00:05:35.600
Jurassic Park, and I'm going to say now we separate arguments as like parameters with commas, and

77
00:05:35.600 --> 00:05:40.840
I say that this movie has grossed I'm not these numbers, they're not accurate.

78
00:05:40.850 --> 00:05:42.140
This is just an example.

79
00:05:42.560 --> 00:05:42.820
Right.

80
00:05:42.920 --> 00:05:43.630
And I'm going to save it.

81
00:05:43.790 --> 00:05:48.410
And it says The Jurassic Park Park has grossed one point eight billion.

82
00:05:48.920 --> 00:05:49.280
All right.

83
00:05:49.430 --> 00:05:54.260
We could call this function again and again and again as many times as we want.

84
00:05:54.500 --> 00:06:00.970
And I'm going to say The Dark Knight has grossed what is the box office.

85
00:06:01.160 --> 00:06:06.950
So the first parameter, the first started, the first argument is going to come here and the second

86
00:06:06.950 --> 00:06:08.240
argument is going to come here.

87
00:06:08.610 --> 00:06:09.050
All right.

88
00:06:09.890 --> 00:06:14.750
And I'm going to say one point to The Dark Knight has grossed one point two billion.

89
00:06:15.680 --> 00:06:16.220
All right.

90
00:06:16.460 --> 00:06:19.610
So we're going to say movie, movie, perf.

91
00:06:20.300 --> 00:06:22.280
And let's pass on our final.

92
00:06:22.280 --> 00:06:30.710
This is the American Sniper and we are going to say point eight.

93
00:06:31.490 --> 00:06:36.920
So now you guys can see this is a true representation of a reusable code.

94
00:06:37.130 --> 00:06:42.650
We just have to call the function and you might say, OK, so this is one line of code.

95
00:06:42.660 --> 00:06:43.000
Right?

96
00:06:43.190 --> 00:06:49.250
But when we get to our lots and lots of projects, you're going to see that we usually we have a lot

97
00:06:49.250 --> 00:06:50.600
of code and the functions.

98
00:06:50.960 --> 00:06:55.600
And it doesn't matter how many lines of code we have, we don't want to repeat that.

99
00:06:55.940 --> 00:07:01.930
So you might end up with like 10, 15 or 20 lines of logic inside your function.

100
00:07:02.150 --> 00:07:07.010
You might have multiple loops, multiple statements inside your function.

101
00:07:07.370 --> 00:07:14.240
And you don't you should not repeat that again and again and again for every, let's say, event listener

102
00:07:14.240 --> 00:07:17.240
that you're implementing in your application.

103
00:07:18.280 --> 00:07:25.840
So the best practice, the dry principle or don't repeat yourself principle, says that we should we

104
00:07:25.840 --> 00:07:29.390
should avoid repeating ourselves as much as possible.

105
00:07:29.720 --> 00:07:35.710
Now, even though there are three movie props here, it is not called repeating because the arguments

106
00:07:35.710 --> 00:07:36.400
are different.

107
00:07:37.360 --> 00:07:44.440
But if we were to call we were to write this three times, then that would be repeating.

108
00:07:44.620 --> 00:07:44.970
All right.

109
00:07:45.160 --> 00:07:46.600
So that's it for this lecture.

110
00:07:46.630 --> 00:07:48.340
See you guys in the next one.

