1
00:00:01,690 --> 00:00:06,040
Hi, everyone, in this lecture we are going to talk about for Lupe's.

2
00:00:07,400 --> 00:00:15,590
All right, so what are loops, loops, repeat code while reducing the number of lines of code?

3
00:00:15,800 --> 00:00:17,060
So if you want to.

4
00:00:18,080 --> 00:00:25,450
I repeat an action or a logic multiple times, instead of riding it many times, we just go ahead and

5
00:00:25,840 --> 00:00:28,330
insert that within a loop.

6
00:00:28,360 --> 00:00:28,780
All right.

7
00:00:29,830 --> 00:00:34,390
So the first kind of loop that we are going to talk about is going to be for loops.

8
00:00:34,630 --> 00:00:39,690
And the the way that for loops are created is we have three steps.

9
00:00:40,570 --> 00:00:44,580
First, a variable is defined, which is called a starting point.

10
00:00:44,830 --> 00:00:46,660
Then the ending point is defined.

11
00:00:46,660 --> 00:00:52,270
Then how much the variable is incremented is actually declared or defined.

12
00:00:52,300 --> 00:00:52,600
Right.

13
00:00:53,020 --> 00:01:00,610
So this is the syntax for a for loop we have for exactly like if well basically the syntax for for loops

14
00:01:00,610 --> 00:01:06,150
and for F statements is the same except for this for an F word.

15
00:01:06,730 --> 00:01:12,790
So we have an initial expression, then we have our semicolon, then we have our condition.

16
00:01:13,270 --> 00:01:13,510
Right.

17
00:01:13,510 --> 00:01:14,860
Which is the ending point.

18
00:01:15,080 --> 00:01:18,280
Then we have our increment increment expression.

19
00:01:18,690 --> 00:01:19,090
Right.

20
00:01:19,210 --> 00:01:26,290
Which is the how much variable is it incrementing then inside the curly braces, we want to run the

21
00:01:26,290 --> 00:01:27,510
code that we want to run.

22
00:01:27,640 --> 00:01:27,890
Right.

23
00:01:28,210 --> 00:01:33,420
So let's go ahead and let's see in action how we can use the for loops, loop her advantage.

24
00:01:33,820 --> 00:01:37,830
So I'm going to be giving you multiple examples and I'm going to be naming them.

25
00:01:37,840 --> 00:01:41,020
So this is example one in the example one.

26
00:01:41,020 --> 00:01:47,140
We first go ahead and create the syntax for a for loop and then now that's provided with the initial

27
00:01:47,140 --> 00:01:47,790
expression.

28
00:01:48,070 --> 00:01:52,630
So the initial expression, we just say that a B equal to one.

29
00:01:53,790 --> 00:02:01,590
Now, the variable name, it's you could provide it A, B, C, D, usually it's the common convention

30
00:02:01,590 --> 00:02:07,270
is I and you could also call it J, K, whatever you want.

31
00:02:07,300 --> 00:02:09,919
It doesn't really matter what you want to provide it with.

32
00:02:10,289 --> 00:02:13,050
As long as you stay consistent, then it doesn't matter.

33
00:02:13,770 --> 00:02:17,670
And we say we want the now this is the condition part.

34
00:02:17,790 --> 00:02:23,370
OK, we want the to go all the way to less than or equal to five.

35
00:02:23,980 --> 00:02:32,940
OK, and how do how do we want to increment a we want to do we want incremented by one by two like they

36
00:02:32,940 --> 00:02:37,040
should be one then they should be two then they should be three.

37
00:02:37,170 --> 00:02:42,330
Or do we want the eight to be first one and then three and then five.

38
00:02:42,330 --> 00:02:47,010
How do we want to increment a we want to increment a one by one.

39
00:02:47,190 --> 00:02:51,250
So eight plus plus means that A is being incremented by one.

40
00:02:52,080 --> 00:02:57,360
Now when this, when this loop runs, what do we want to implement?

41
00:02:57,370 --> 00:03:00,000
What is the code that we want to implement?

42
00:03:00,150 --> 00:03:00,530
All right.

43
00:03:01,770 --> 00:03:03,840
We want to present to the console.

44
00:03:06,070 --> 00:03:08,920
I am a for loop.

45
00:03:10,160 --> 00:03:14,960
We just want to point to the council, I am falling and every guy's going to say, well, now this is

46
00:03:14,960 --> 00:03:16,330
the thing with the console.

47
00:03:16,550 --> 00:03:21,290
It has said that it has printed it five times, but there is only one time.

48
00:03:21,590 --> 00:03:22,550
But it is in here.

49
00:03:22,550 --> 00:03:27,640
It says, fine, you guys can see this is five, which means that this has been repeated five times.

50
00:03:27,950 --> 00:03:31,220
We can check that for ourselves, of course, always.

51
00:03:31,670 --> 00:03:36,140
And to be able to do that, we just print the variable as well.

52
00:03:36,290 --> 00:03:41,420
And then we can see I am for loop one, two, three, four and five.

53
00:03:41,540 --> 00:03:45,140
And the way that this loops were, this loop works is like this.

54
00:03:45,650 --> 00:03:52,850
The the a variable is going to grab the value of one first and it is going to put it all the way here.

55
00:03:53,030 --> 00:04:01,730
So in our first iteration, I am a for loop will be one in the second iteration and in the second iteration

56
00:04:01,910 --> 00:04:07,150
the value is one, OK, and one is either less than or equal to five.

57
00:04:07,160 --> 00:04:13,010
And this condition is met and when the condition is met, the value is going to be incremented by one

58
00:04:13,160 --> 00:04:15,370
and now the value is to the value.

59
00:04:15,380 --> 00:04:19,579
Two is going to be put here and then it is going to be logged in here.

60
00:04:19,850 --> 00:04:26,090
And now we have a value to we check the condition is two less than or equal to five.

61
00:04:26,090 --> 00:04:27,440
Yes, this condition is true.

62
00:04:27,590 --> 00:04:29,030
Then we increment the value.

63
00:04:29,510 --> 00:04:29,820
All right.

64
00:04:30,050 --> 00:04:32,870
So when we increase the value, value is going to be three.

65
00:04:33,020 --> 00:04:34,370
And then we get this line.

66
00:04:35,180 --> 00:04:38,660
When the value is three, we again do this condition.

67
00:04:38,660 --> 00:04:43,520
We check that value against the condition and the condition holds true.

68
00:04:43,670 --> 00:04:47,750
When the condition holds true, we add another one to that.

69
00:04:47,750 --> 00:04:54,230
We increment that for sorry, that three by one and three plus one is going to be four and four is going

70
00:04:54,230 --> 00:04:55,280
to come right in here.

71
00:04:55,490 --> 00:04:57,470
And after that, this line is going to print.

72
00:04:58,160 --> 00:05:04,790
And next time we have a number for as a value for a and we check it against this condition.

73
00:05:04,850 --> 00:05:05,180
Right.

74
00:05:05,510 --> 00:05:07,190
And the condition holds true.

75
00:05:07,190 --> 00:05:07,520
Right.

76
00:05:07,520 --> 00:05:09,050
For is less than five.

77
00:05:09,090 --> 00:05:09,470
Right.

78
00:05:10,160 --> 00:05:13,370
And then we increment the four by one, which is five.

79
00:05:13,370 --> 00:05:14,620
And then we get this line.

80
00:05:14,870 --> 00:05:15,230
All right.

81
00:05:16,100 --> 00:05:19,070
So five, we check it against the condition.

82
00:05:19,070 --> 00:05:20,630
Five is less.

83
00:05:20,630 --> 00:05:26,060
Five is equal to is either five is now less than five.

84
00:05:26,060 --> 00:05:26,360
Right.

85
00:05:26,360 --> 00:05:28,070
But five is equal to five.

86
00:05:28,190 --> 00:05:29,750
And we increment it by one.

87
00:05:29,990 --> 00:05:38,150
But now when we increment it by one, we get a we get a number six and six is not does not hold true

88
00:05:38,150 --> 00:05:39,260
against this condition.

89
00:05:39,800 --> 00:05:44,600
So when it doesn't hold true against this condition, the loop is not going to run anymore.

90
00:05:44,990 --> 00:05:46,520
And then we end up with this.

91
00:05:46,920 --> 00:05:49,810
OK, so this is how this loop actually works.

92
00:05:50,030 --> 00:05:51,530
This was our first example.

93
00:05:51,530 --> 00:05:55,640
We are going to dive into our second example.

94
00:05:57,760 --> 00:06:01,510
And in here, what I want to do is I want to get the even numbers.

95
00:06:01,750 --> 00:06:11,940
OK, get the even numbers from zero to 19.

96
00:06:12,130 --> 00:06:13,430
Let's get the even numbers.

97
00:06:13,450 --> 00:06:17,180
How would you get the even numbers from zero to 19?

98
00:06:17,440 --> 00:06:24,010
So we are going to create a for loop and we are going to say let a now this time, let's put it to be

99
00:06:24,250 --> 00:06:24,760
the be.

100
00:06:25,000 --> 00:06:26,830
It should start from zero.

101
00:06:27,070 --> 00:06:34,050
We want it to start from zero and we want the B to go all the way to less than or equal to nineteen

102
00:06:34,630 --> 00:06:41,260
and we want to increment B, but this time we do not want incremented by one because we want to get

103
00:06:41,260 --> 00:06:42,380
the even numbers.

104
00:06:42,400 --> 00:06:47,380
That's why we are going to incremented, we are going to increment it by two.

105
00:06:47,680 --> 00:06:48,090
All right.

106
00:06:48,460 --> 00:06:54,030
And in case you're wondering what the syntax is, this syntax is also actually present here.

107
00:06:54,220 --> 00:06:59,140
So if you go ahead and should I put it here?

108
00:06:59,470 --> 00:07:05,710
So if you put a equal plus equals sign one one.

109
00:07:05,920 --> 00:07:10,030
This syntax is is the same as a plus plus.

110
00:07:10,210 --> 00:07:10,530
All right.

111
00:07:10,750 --> 00:07:13,180
So we have used this syntax here as well.

112
00:07:13,360 --> 00:07:18,310
But I'm using the syntax here as this kind of syntax here because it makes more sense.

113
00:07:19,720 --> 00:07:21,070
And now what do we want to do?

114
00:07:21,080 --> 00:07:25,720
We want to consult, log our variable of the let's save it.

115
00:07:25,870 --> 00:07:29,580
And now we get all the even numbers from zero to 19.

116
00:07:29,830 --> 00:07:36,700
So you give zero two four six, eight, 10, 12, 14, 16 and 18.

117
00:07:36,940 --> 00:07:42,580
And in case you say, okay, two is zero is not an even number, we could just say start from two and

118
00:07:42,580 --> 00:07:43,310
we get this.

119
00:07:43,660 --> 00:07:48,390
So this is getting the even numbers from zero to 20.

120
00:07:48,550 --> 00:07:51,360
We can get the I'm just going to copy this.

121
00:07:51,370 --> 00:07:52,360
I'm going to put it here.

122
00:07:52,750 --> 00:07:55,720
We can get the odd numbers from zero to 20.

123
00:07:56,320 --> 00:07:57,160
We can change it.

124
00:07:57,160 --> 00:08:00,400
Example three, Chenda, the odd numbers.

125
00:08:00,520 --> 00:08:06,190
And for that, what we are going to do is we say that the variable should start from one and it should

126
00:08:06,190 --> 00:08:08,560
go all the way to less than 19.

127
00:08:08,560 --> 00:08:12,430
We don't want it to be equal to 90, but to less than 90.

128
00:08:12,580 --> 00:08:15,070
And we are going to add the same condition there.

129
00:08:15,220 --> 00:08:21,070
And now when we added, we say one three five seven all the way to 17.

130
00:08:21,070 --> 00:08:24,490
These are all the odd numbers if you're provided with everything equal.

131
00:08:24,500 --> 00:08:26,690
So you're going to get the nineteen as well.

132
00:08:27,190 --> 00:08:31,100
So this is get get the odd numbers from zero to 90.

133
00:08:31,420 --> 00:08:35,539
We can also get every third number from zero to 90.

134
00:08:35,559 --> 00:08:37,169
We can also do that as well.

135
00:08:38,450 --> 00:08:51,680
Let me copy the example, put it here and get every third number right from zero to 19.

136
00:08:51,980 --> 00:08:53,540
We can do that as well.

137
00:08:53,810 --> 00:08:56,110
And for that, we are going to create a for loop.

138
00:08:56,270 --> 00:08:57,230
We are going to say.

139
00:08:59,090 --> 00:09:00,380
Let me.

140
00:09:01,490 --> 00:09:06,840
Let this time let's go ahead and let's use a common convention.

141
00:09:07,190 --> 00:09:14,030
We want to start we want to start from zero and the eye, OK, this is not Colan, these are these are

142
00:09:14,030 --> 00:09:14,900
semicolons.

143
00:09:14,900 --> 00:09:20,930
I'm just going to zoom in for this as well so you guys can see we have I semicolon because in our first

144
00:09:21,800 --> 00:09:27,980
in our first lines, we just sit and it's an initial expression, colon condition, colon and then increment

145
00:09:27,980 --> 00:09:29,690
of expression, OK?

146
00:09:31,870 --> 00:09:36,110
So this is how this works and where do we want it to go?

147
00:09:36,130 --> 00:09:38,260
What is the ending point?

148
00:09:38,470 --> 00:09:41,010
The ending point is all the way to less than 19.

149
00:09:41,590 --> 00:09:44,280
How do we want incremented this time?

150
00:09:44,440 --> 00:09:47,850
We want to incremented by every third number.

151
00:09:48,010 --> 00:09:50,020
So we are going to incremented by three.

152
00:09:50,560 --> 00:09:50,970
All right.

153
00:09:51,100 --> 00:09:53,200
And we are going to bring to the console.

154
00:09:54,400 --> 00:10:03,580
I and when I say that we got zero three six nine, 12, 15 and 18, we get every third no.

155
00:10:03,880 --> 00:10:04,130
Right.

156
00:10:04,180 --> 00:10:09,520
If he starts from one, we get one four, seven, 10, 13, 16.

157
00:10:09,520 --> 00:10:10,450
Doesn't really matter.

158
00:10:10,630 --> 00:10:12,810
And he put equal sign here.

159
00:10:13,030 --> 00:10:14,530
We get every third.

160
00:10:14,530 --> 00:10:15,020
No.

161
00:10:15,380 --> 00:10:15,790
All right.

162
00:10:16,090 --> 00:10:21,090
And at the end of this lecture, I just want to give you another example and this example.

163
00:10:21,100 --> 00:10:28,300
Well, I'm not going to actually run this code because my computer is not that, like, super fast or

164
00:10:28,300 --> 00:10:29,220
super capable.

165
00:10:29,410 --> 00:10:35,270
So if I run this, this is how you can create infinite loops when the condition is always true.

166
00:10:35,470 --> 00:10:42,430
So we say start from 10 and go as long as the variable is larger than zero.

167
00:10:42,850 --> 00:10:48,250
So if we go larger than zero, we get infinity number of numbers.

168
00:10:48,620 --> 00:10:54,040
And this condition is always going to be true and it is going to crash my computer.

169
00:10:54,190 --> 00:10:59,320
But if your PC is stronger and faster, is not going to be is not going to crash it.

170
00:10:59,590 --> 00:11:05,340
This is just an example of infinite loops where the condition is always going to be true.

171
00:11:05,470 --> 00:11:06,940
So that's it for this lecture.

172
00:11:06,970 --> 00:11:09,000
See you guys in the next one.

