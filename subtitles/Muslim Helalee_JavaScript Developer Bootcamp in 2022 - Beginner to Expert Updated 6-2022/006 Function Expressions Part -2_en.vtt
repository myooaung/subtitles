WEBVTT
1
00:00:01.870 --> 00:00:07.090
Hi, everyone, in this letter, we are going to talk about functions and objects.

2
00:00:08.260 --> 00:00:15.940
All right, so we have covered how we can use functions as items for objects.

3
00:00:16.239 --> 00:00:19.180
Sorry for iRace, but how about objects?

4
00:00:19.510 --> 00:00:22.810
Can we use functions as object properties?

5
00:00:22.990 --> 00:00:24.300
Yes, we can.

6
00:00:24.700 --> 00:00:27.070
And in just one minute, I'm going to show you.

7
00:00:27.080 --> 00:00:34.160
But before that, we do have another kind of loop for arrays as well.

8
00:00:34.180 --> 00:00:42.640
We have another kind of loop in JavaScript as well, because and that loop is actually the basic syntax

9
00:00:43.030 --> 00:00:46.280
and that is called the for loop.

10
00:00:46.540 --> 00:00:52.600
So what I'm going to do is I've just commented out the regular for loop and in here we are going to

11
00:00:52.600 --> 00:00:56.830
say four of the four of loop.

12
00:00:57.160 --> 00:00:57.470
Right.

13
00:00:57.500 --> 00:00:58.240
Or four of.

14
00:00:59.770 --> 00:01:00.250
We can't.

15
00:01:00.640 --> 00:01:07.360
Well, actually, the syntax is way simpler than the for loop itself, and this is the proper time to

16
00:01:07.360 --> 00:01:11.140
go over the syntax and talk about the four off loops.

17
00:01:11.410 --> 00:01:21.100
So the first week we write the for loop the for loop syntax itself and the syntax, the block is the

18
00:01:21.100 --> 00:01:22.350
same as the for a loop.

19
00:01:22.780 --> 00:01:27.790
But the part, the cool part is what happens inside the parentheses.

20
00:01:28.660 --> 00:01:29.240
Excuse me.

21
00:01:29.500 --> 00:01:36.970
So in here what do we want to do is we create a variable but not the regular kind of variable.

22
00:01:37.180 --> 00:01:38.320
We say LAT.

23
00:01:39.640 --> 00:01:51.880
Avg score of what led average score of scores now in here, we access we access our array and this average

24
00:01:51.880 --> 00:01:59.020
score of scores is going to access first the first item in the first iteration, it is going to access

25
00:01:59.020 --> 00:02:02.610
the average mike score because we are we have just gate.

26
00:02:02.980 --> 00:02:09.560
We have just given it the reference of this scores array.

27
00:02:09.850 --> 00:02:17.200
So this for let off average score knows it should go into which array and it should iterate over which

28
00:02:17.200 --> 00:02:17.610
array.

29
00:02:17.950 --> 00:02:23.950
So when it comes to this, it is in the first iteration, it is going to grab the average my score and

30
00:02:23.950 --> 00:02:27.700
in the second iteration it is going to grab the average Joey score.

31
00:02:28.220 --> 00:02:28.570
Right.

32
00:02:28.720 --> 00:02:32.440
So now what do we want to do when these two iterations happen?

33
00:02:33.190 --> 00:02:34.030
What do we want to do?

34
00:02:34.040 --> 00:02:36.430
We basically want to do the same thing.

35
00:02:36.700 --> 00:02:37.660
Let's copy it.

36
00:02:37.660 --> 00:02:46.210
Let's face it here, because the four of Loop and the the for loop, they work in the same way.

37
00:02:46.360 --> 00:02:49.630
And now, oh gosh, there is an error.

38
00:02:49.810 --> 00:02:51.370
It says a reference error.

39
00:02:51.370 --> 00:02:59.440
It means that something is not defined because our variable for the for loop, for our loop is the average

40
00:02:59.440 --> 00:02:59.860
score.

41
00:03:00.040 --> 00:03:04.450
And in here it says so let's just replace it and let's save it.

42
00:03:04.600 --> 00:03:09.550
And it says scores average score function is not defined.

43
00:03:09.760 --> 00:03:13.930
Right, because actually the variable is not defined in this way.

44
00:03:14.410 --> 00:03:14.770
All right.

45
00:03:15.010 --> 00:03:23.200
So in here, because we have successfully access the array, we don't have to access it anymore, OK?

46
00:03:23.200 --> 00:03:25.000
We don't have to access it again.

47
00:03:25.660 --> 00:03:31.210
So what I'm going to do is I'm just going to go ahead and I'm going to reference our loop variable,

48
00:03:31.210 --> 00:03:32.980
which is the average score.

49
00:03:33.130 --> 00:03:38.530
And I'm going to pass in two argument, two arguments, and I'm going to save and we are going to get

50
00:03:38.530 --> 00:03:38.880
these.

51
00:03:38.920 --> 00:03:42.780
And the result that we had before and what has just happened here.

52
00:03:43.240 --> 00:03:53.170
So we say when the when the for of loop has a variable called average score, it is going to tap inside

53
00:03:53.180 --> 00:04:01.540
an array and we don't have to provide it with a like a starting point or an increment or a condition.

54
00:04:01.750 --> 00:04:11.470
We just say go to this array and iterate over it as many times as the array has items.

55
00:04:11.960 --> 00:04:12.240
Right.

56
00:04:12.400 --> 00:04:17.680
So if the array has two items, it is going to iterate over this array two times.

57
00:04:18.040 --> 00:04:24.420
If the array has five items, it is going to loop through this array five times.

58
00:04:24.670 --> 00:04:26.820
So we don't have to specify.

59
00:04:27.010 --> 00:04:32.410
That's why the E is six syntax is way easier than the previous syntax.

60
00:04:33.610 --> 00:04:34.580
This for us.

61
00:04:34.600 --> 00:04:36.310
Look, this is E is six.

62
00:04:36.760 --> 00:04:43.480
And when we say an average score of scores, this automatically this average scores variable is going

63
00:04:43.480 --> 00:04:49.510
to start from the first item and is going to go all the way to the last item without thinking about

64
00:04:49.510 --> 00:04:50.260
the index.

65
00:04:50.500 --> 00:04:58.240
But as far as we just did it with the regular loop, we had to take care of the we have to be careful

66
00:04:58.240 --> 00:04:59.500
about the index as well.

67
00:04:59.650 --> 00:05:01.810
And we should do length and then index.

68
00:05:01.960 --> 00:05:04.300
But there is no length an index in this one.

69
00:05:04.310 --> 00:05:05.770
That's why it is easier.

70
00:05:06.430 --> 00:05:12.150
And this average score, whenever it grabs the first item and I'm just going to give you a demo.

71
00:05:12.160 --> 00:05:19.660
So the first item is going to be is going to come right here and we it as an argument hundred and twenty

72
00:05:19.900 --> 00:05:27.010
to this average, my score function, which is fed from here and then this result is stored inside the

73
00:05:27.010 --> 00:05:28.000
result variable.

74
00:05:28.090 --> 00:05:29.800
And then we simply printed there.

75
00:05:30.550 --> 00:05:36.130
And then in the second iteration, the average score is going to be passed right in here.

76
00:05:36.280 --> 00:05:41.500
And then we pass in two arguments for the parameters of that function.

77
00:05:41.920 --> 00:05:45.880
And then we store it inside this variable and then we call the variable.

78
00:05:47.230 --> 00:05:48.460
That's how simple it is.

79
00:05:48.700 --> 00:05:53.230
So this is the four of what I'm going to do is I'm just going to go ahead and comment it out.

80
00:05:53.500 --> 00:05:57.340
And now let's talk about functions as object properties.

81
00:05:58.270 --> 00:06:04.090
All right, so in here, what I'm going to do is I'm going to create another I'm going to create another

82
00:06:04.090 --> 00:06:06.940
score, but this time this scores.

83
00:06:06.940 --> 00:06:08.630
It is not going to be an array.

84
00:06:09.040 --> 00:06:10.840
It is going to be an object.

85
00:06:10.960 --> 00:06:12.880
And so I'm just going to comment out these two.

86
00:06:13.300 --> 00:06:16.360
I'm going to leave out the functions because we are going to use them.

87
00:06:16.840 --> 00:06:18.610
So we say const.

88
00:06:20.460 --> 00:06:23.200
Scores, but this time this is a function.

89
00:06:23.550 --> 00:06:31.200
Notice the curly braces, so here what I'm going to do, the key is going to be my score and the value

90
00:06:31.200 --> 00:06:33.140
is going to be that function.

91
00:06:33.510 --> 00:06:39.450
So the value is going to be the same thing as the item that we had for our array.

92
00:06:39.510 --> 00:06:39.890
Right.

93
00:06:40.050 --> 00:06:41.580
And I'm going to say, Joey.

94
00:06:44.500 --> 00:06:46.060
Joey's core.

95
00:06:48.520 --> 00:06:51.040
And let's set it equal to.

96
00:06:52.180 --> 00:06:54.070
Average Joe scored the function.

97
00:06:56.340 --> 00:07:01.930
So now we have successfully used functions as object properties.

98
00:07:02.250 --> 00:07:09.310
All right, so now what we can do is we can call these functions through creating another method.

99
00:07:09.570 --> 00:07:13.950
So whenever we call, we use functions as object properties.

100
00:07:14.340 --> 00:07:16.760
We tend to create new methods.

101
00:07:17.490 --> 00:07:23.750
So we do have intrinsic JavaScript methods, which we talked about, like Paape, like push, like includes

102
00:07:23.760 --> 00:07:24.960
and like all of them.

103
00:07:25.350 --> 00:07:28.150
But we can create methods of our own as well.

104
00:07:28.380 --> 00:07:29.660
So how can we do that?

105
00:07:29.670 --> 00:07:33.210
So let's go ahead and let's consider log this object.

106
00:07:33.450 --> 00:07:35.130
So it is a Skouras object.

107
00:07:35.310 --> 00:07:39.060
And let's say I want to access this score for the mike.

108
00:07:40.410 --> 00:07:41.070
For the mike.

109
00:07:42.450 --> 00:07:48.810
And now we have successfully accessed the score for that and now we have to provide it with some sort

110
00:07:48.810 --> 00:07:49.290
of data.

111
00:07:49.860 --> 00:07:55.470
So what what are the arguments that we want to pass in here?

112
00:07:55.740 --> 00:07:57.720
Let's say hundred and twenty.

113
00:07:57.900 --> 00:08:00.450
And when I say that we are going to get zero point to fight.

114
00:08:00.990 --> 00:08:08.880
Now, what has happened here, whenever we grab these scores object and when we do the DOT syntax,

115
00:08:09.000 --> 00:08:12.880
we can access the properties and the methods of that object.

116
00:08:13.110 --> 00:08:16.890
We know that we have covered that in the objects chapter.

117
00:08:17.700 --> 00:08:29.010
But one, when when we pass in a function as a value of a key, we should open open parentheses because

118
00:08:29.010 --> 00:08:32.909
it is a function you should you should open parentheses with functions.

119
00:08:33.000 --> 00:08:33.299
Right.

120
00:08:34.549 --> 00:08:42.620
But now, because this function has been called as a function, as a as an object method or as an object

121
00:08:42.620 --> 00:08:46.370
property, this function is no longer called function.

122
00:08:46.670 --> 00:08:47.650
What is it called?

123
00:08:47.780 --> 00:08:49.730
It is called a method.

124
00:08:50.060 --> 00:08:51.920
And we have talked about methods.

125
00:08:52.190 --> 00:08:56.200
So voila, we just created another method in JavaScript.

126
00:08:57.050 --> 00:09:06.080
And this way is actually the best way of doing it because we can provide specific values for Mike and

127
00:09:06.080 --> 00:09:06.680
for Joe.

128
00:09:07.770 --> 00:09:14.120
We can say let's say Joey has gotten better and it's going to be zero point five, which is twice of

129
00:09:14.160 --> 00:09:15.020
that of the mike.

130
00:09:15.750 --> 00:09:16.140
All right.

131
00:09:16.320 --> 00:09:20.110
So I'm going to go over this syntax one more time.

132
00:09:20.940 --> 00:09:23.990
We have created two two functions here.

133
00:09:24.000 --> 00:09:30.440
The first one is a function declaration and the second one is a function expression.

134
00:09:30.750 --> 00:09:35.160
So what I'm going to do is I'm just going to capitalize this one and I'm going to remove this and I'm

135
00:09:35.160 --> 00:09:37.890
going to copy this comment as well.

136
00:09:37.890 --> 00:09:40.140
Actually, it makes more sense to be here.

137
00:09:41.210 --> 00:09:53.360
An object properties functions as object properties, it makes more sense this way, so we have created

138
00:09:53.360 --> 00:09:59.370
a function declaration and in a function expression, these are nothing new, right?

139
00:09:59.390 --> 00:10:00.530
So these are functions.

140
00:10:01.550 --> 00:10:10.790
And now we have passed those two functions as keys to two, as values to two keys inside this object

141
00:10:11.090 --> 00:10:13.160
and the object name is Schaus.

142
00:10:13.460 --> 00:10:18.690
So we talked about how we can access the keys from any regular object.

143
00:10:18.920 --> 00:10:26.970
So think of this as a regular object, not like a complicated object inside of which we have functions.

144
00:10:26.990 --> 00:10:27.670
No, no, no, no.

145
00:10:27.920 --> 00:10:30.470
This think of it as a regular object.

146
00:10:31.520 --> 00:10:34.910
So if I ask you, how would you access.

147
00:10:35.900 --> 00:10:43.520
Key value pairs or properties of an object, you would say, I can access it through the DOT syntax,

148
00:10:44.180 --> 00:10:49.550
all right, or I can access it through the brackets or the array syntax.

149
00:10:49.760 --> 00:10:51.740
I can access it in both ways.

150
00:10:51.890 --> 00:10:53.450
And both of them are correct.

151
00:10:53.570 --> 00:10:57.380
And we have talked about both of them in the Objects chapter.

152
00:10:57.890 --> 00:10:58.230
Right.

153
00:10:58.640 --> 00:11:05.390
So whenever you access the key of Mike score, what is the value for that?

154
00:11:05.720 --> 00:11:06.860
The value is average.

155
00:11:06.860 --> 00:11:07.580
My score.

156
00:11:07.730 --> 00:11:08.840
And what is that?

157
00:11:10.240 --> 00:11:11.570
That is a function.

158
00:11:12.070 --> 00:11:17.720
So when that is a function, when you're accessing that, it means you're calling that function.

159
00:11:17.950 --> 00:11:21.200
So we are calling this average score function.

160
00:11:21.430 --> 00:11:25.460
So what do we call the function inside the function call?

161
00:11:25.870 --> 00:11:28.850
We pass in and we pass in arguments.

162
00:11:29.530 --> 00:11:33.040
That's why we open parentheses and we pass in arguments.

163
00:11:33.220 --> 00:11:41.230
Even even if the function of average Mike's score doesn't have any parameters because it is a function,

164
00:11:41.230 --> 00:11:43.870
you should open the parentheses.

165
00:11:44.650 --> 00:11:53.140
And now looking at this syntax, it means that we have just created another method for these objects,

166
00:11:53.440 --> 00:12:01.830
because when functions are called upon objects, they are converted from functions to methods.

167
00:12:02.230 --> 00:12:06.270
They do the same thing, but the name changes from a function to a method.

168
00:12:06.490 --> 00:12:08.530
We have talked about this before as well.

169
00:12:09.190 --> 00:12:15.250
And now because this is called upon discourse, this is no longer function.

170
00:12:15.280 --> 00:12:20.830
This is a method and this is a method call which calls this function.

171
00:12:21.550 --> 00:12:24.280
And we passed in two arguments, one hundred and two.

172
00:12:24.400 --> 00:12:28.330
And both of them have come here and they have calculated that they're.

173
00:12:29.250 --> 00:12:33.700
And the same thing goes for a score, that's it for this Lutcher.

174
00:12:33.720 --> 00:12:35.370
See you guys in the next one.

