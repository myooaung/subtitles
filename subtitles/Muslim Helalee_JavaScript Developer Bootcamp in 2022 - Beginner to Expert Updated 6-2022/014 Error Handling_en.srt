1
00:00:01,530 --> 00:00:02,560
Hi, everyone.

2
00:00:02,580 --> 00:00:07,800
In this lecture, we're going to take a look at Aira handling with a syncopate.

3
00:00:09,140 --> 00:00:15,380
All right, so first off, let's open this with live server, and I'm just going to go into the console,

4
00:00:16,070 --> 00:00:16,420
right?

5
00:00:16,440 --> 00:00:18,320
And I'm going to remove this now.

6
00:00:18,360 --> 00:00:20,180
I've kept this one open.

7
00:00:20,190 --> 00:00:25,520
This is the previous lecture because I want to show you something when we are almost done with this

8
00:00:25,520 --> 00:00:26,030
lecture.

9
00:00:26,540 --> 00:00:34,040
So what I'm going to do is we are going to grab we are going to create a customer and we are going to

10
00:00:34,040 --> 00:00:35,900
grab the this data.

11
00:00:35,930 --> 00:00:36,550
Where is it?

12
00:00:37,250 --> 00:00:38,450
Where is this data?

13
00:00:38,460 --> 00:00:46,550
So we are going to grab this 10 ten questions and we're going to create our customer as well.

14
00:00:46,880 --> 00:00:53,870
So first off, let's ride the async keyword async and let's create the function.

15
00:00:55,100 --> 00:01:02,440
What is the function identifier is going to be get questions right and there is going to be no parameter.

16
00:01:02,870 --> 00:01:04,180
And what do we want to do?

17
00:01:04,489 --> 00:01:07,400
We want to say a weight fetch.

18
00:01:07,400 --> 00:01:08,930
What is the fetch going to fetch.

19
00:01:09,350 --> 00:01:11,670
The fetch is going to grab six start.

20
00:01:11,690 --> 00:01:15,580
What is the name of the file questions Dot Jason.

21
00:01:15,800 --> 00:01:21,800
So we are basically now this inside this, this is the API endpoint or the source for that HTP.

22
00:01:21,800 --> 00:01:29,480
You are our request and this is the source six that questions the sources like any other source that

23
00:01:29,480 --> 00:01:31,830
we do with e-mails here, says JavaScript.

24
00:01:32,480 --> 00:01:38,660
So it works in the same way and we are going to store it inside a variable and I'm going to call it

25
00:01:38,960 --> 00:01:42,100
questions response.

26
00:01:43,550 --> 00:01:50,000
So what what is this going to do as it is going to await this entire line until this fetch grabs all

27
00:01:50,000 --> 00:01:54,920
the data, fetches all the data, and then it is going to assign it to this questions response.

28
00:01:55,370 --> 00:02:01,640
Now, let's go ahead and let's log it to the console questions response.

29
00:02:01,940 --> 00:02:07,010
And now before I know it is not going to work because we are we have to call the function.

30
00:02:07,670 --> 00:02:12,080
So we are going to say get questions, let's just call it, let's save it.

31
00:02:12,320 --> 00:02:13,640
And we get this response.

32
00:02:13,940 --> 00:02:21,530
And if I come here, we can say that the status code, A code is 200, but there is no way that we know

33
00:02:21,530 --> 00:02:23,210
what's inside this response.

34
00:02:23,210 --> 00:02:25,480
Where are our data?

35
00:02:25,690 --> 00:02:26,000
Right.

36
00:02:26,000 --> 00:02:26,940
Where is our data?

37
00:02:27,320 --> 00:02:35,990
So the way that we grab that data is that I'm just going to get rid of this cancer log as we are going

38
00:02:35,990 --> 00:02:37,550
to do the same way.

39
00:02:37,580 --> 00:02:39,710
But actually, we're not going to do it.

40
00:02:39,920 --> 00:02:48,110
We could say, like posts data and then we could return posts data and then we could run this get posts,

41
00:02:48,110 --> 00:02:50,780
which is dysfunction, and we would get our data.

42
00:02:51,050 --> 00:02:55,070
But what I'm going to do is I'm going to do it a different way.

43
00:02:55,070 --> 00:02:56,390
So I'm going to say return.

44
00:02:57,400 --> 00:03:04,510
Questions, data, so we have questions, I'm going to create this variable now you can do it in this

45
00:03:04,510 --> 00:03:04,810
way.

46
00:03:05,440 --> 00:03:06,840
This is why I've kept it open.

47
00:03:07,120 --> 00:03:07,980
You can do it.

48
00:03:07,990 --> 00:03:11,800
You can create the variable and assign it and then return it.

49
00:03:12,130 --> 00:03:15,280
Or you can simplify this into one line of code.

50
00:03:15,460 --> 00:03:19,930
You can return and assign the value with one with one line of code.

51
00:03:20,200 --> 00:03:26,190
So when I say return questions, data equal to await, what is it going to await?

52
00:03:26,200 --> 00:03:28,000
It is going to await questions.

53
00:03:28,000 --> 00:03:29,080
Response Dot.

54
00:03:29,560 --> 00:03:30,310
Jason.

55
00:03:31,240 --> 00:03:38,290
When you say this, what it is going to do, it is going to assign this value to questions, data and

56
00:03:38,290 --> 00:03:39,470
then return it.

57
00:03:39,880 --> 00:03:45,430
So I think this syntax is easier and simpler than doing doing it this way.

58
00:03:45,580 --> 00:03:47,770
And this looks more professional as well.

59
00:03:47,800 --> 00:03:48,820
So if I save it.

60
00:03:50,720 --> 00:03:59,130
We get questions, data, and we get Jawaid questions, response dot Jason.

61
00:03:59,180 --> 00:04:01,960
All right, so I await questions, response.

62
00:04:02,120 --> 00:04:03,830
Jason, we say return.

63
00:04:04,160 --> 00:04:10,000
And now when we return this, it means that this entire thing is going to be a promise.

64
00:04:10,220 --> 00:04:13,090
So when it is a promise, we can do a thing.

65
00:04:13,430 --> 00:04:15,950
And I'm just going to say data in here.

66
00:04:17,600 --> 00:04:23,510
All right, and what do we want to do, we want to log it to the console, right?

67
00:04:23,520 --> 00:04:24,550
So let's save it.

68
00:04:24,560 --> 00:04:28,780
We get all of our data and you can see that it is in JavaScript format.

69
00:04:29,210 --> 00:04:36,980
So instead of this line is actually equal to these two lines, instead of a sign creating the variable,

70
00:04:36,980 --> 00:04:42,890
declaring the variable and then returning it, we did both of them in one line with just the return.

71
00:04:43,250 --> 00:04:44,510
So you could do that as well.

72
00:04:44,510 --> 00:04:46,880
And that's why that's what I wanted to show you there.

73
00:04:47,060 --> 00:04:49,530
And now where is our custom error?

74
00:04:49,550 --> 00:04:58,130
So what I'm going to do is if I comment this one out and paste it down here and we don't have any file

75
00:04:58,130 --> 00:05:00,500
by the name of one, two, three questions three.

76
00:05:00,800 --> 00:05:02,750
So we get an error.

77
00:05:02,780 --> 00:05:09,020
This is 404, not found and uncaught in promised syntax error, unexpected token.

78
00:05:09,140 --> 00:05:11,650
So we get all kinds of crazy errors.

79
00:05:11,930 --> 00:05:15,270
So how can we throw our own custom error?

80
00:05:15,440 --> 00:05:17,570
So what I'm going to do is I'm going to grab this.

81
00:05:17,570 --> 00:05:20,270
You can see that the status is not 200 anymore.

82
00:05:20,540 --> 00:05:23,430
The status is 404 inside this console.

83
00:05:23,960 --> 00:05:34,250
So what I'm going to do is I'm going to say that if this DOT questions data sorry, sorry, not question

84
00:05:34,250 --> 00:05:34,670
is data.

85
00:05:34,680 --> 00:05:43,410
If this DOT status is not if it is not 200, throw a new error.

86
00:05:43,430 --> 00:05:47,450
So we are going to literally say throw new error.

87
00:05:48,390 --> 00:05:57,570
All right, and what is that you're going to say they are going to error fetching data and when I say

88
00:05:57,630 --> 00:06:02,700
it, we still get this one because we need to we need to catch that error.

89
00:06:03,000 --> 00:06:05,010
Now, we have thrown the error here.

90
00:06:05,190 --> 00:06:06,720
We need to catch it here as well.

91
00:06:07,050 --> 00:06:09,890
That's why the name of this method is catch.

92
00:06:10,150 --> 00:06:11,210
Catch the error, buddy.

93
00:06:11,790 --> 00:06:13,680
So we are going to say catch.

94
00:06:13,950 --> 00:06:17,400
We are going to log it to the console error.

95
00:06:17,620 --> 00:06:18,420
Let's save it.

96
00:06:18,600 --> 00:06:21,930
And now we get this error error fetching data.

97
00:06:22,440 --> 00:06:26,160
So I'm going to I'm going to remove that.

98
00:06:26,250 --> 00:06:27,840
Let's make this window smarter.

99
00:06:27,840 --> 00:06:29,100
We don't need it to be big.

100
00:06:31,020 --> 00:06:37,940
So let's save this, just bring a of OK, let's save it, and now what do we get?

101
00:06:37,950 --> 00:06:42,030
We get error, error fetching data, right.

102
00:06:42,420 --> 00:06:44,360
And where is it coming from?

103
00:06:44,370 --> 00:06:47,770
It is coming from line number two on from this council.

104
00:06:47,790 --> 00:06:51,570
Look, so this is how we can create a custom error.

105
00:06:51,750 --> 00:06:52,110
All right.

106
00:06:52,290 --> 00:06:59,500
And if the file was correct, we still see that error, which we should not see it.

107
00:06:59,520 --> 00:07:07,470
So if this star status is not 200 return questions, so this doesn't have, why do we still get that

108
00:07:07,470 --> 00:07:07,820
error?

109
00:07:09,200 --> 00:07:19,000
OK, so our catch the error, so here we have Dot then get questions, dot then and then we have data,

110
00:07:19,010 --> 00:07:20,450
we are going to log the data.

111
00:07:20,450 --> 00:07:22,340
We should we should have logged the data.

112
00:07:24,350 --> 00:07:30,620
And in here, you know what, before doing before finding out what the problem is, we can make this

113
00:07:30,620 --> 00:07:36,680
line even shorter, because whenever you work with arrow functions and you have only one line, you

114
00:07:36,680 --> 00:07:40,700
can just remove the curly braces and put all of them on one liners.

115
00:07:41,180 --> 00:07:49,070
So if I say that missing oops, this remove that we still get this error, which is which comes from

116
00:07:49,760 --> 00:07:52,510
throe new error, error fetching data.

117
00:07:52,760 --> 00:07:59,200
If this that status is I think this this is not actually pointing to this question's response.

118
00:07:59,570 --> 00:08:05,030
So what I'm going to do is I'm just going to remove this and I'm going to say questions, response and

119
00:08:05,030 --> 00:08:05,420
save it.

120
00:08:05,420 --> 00:08:06,540
And now we do get it.

121
00:08:06,770 --> 00:08:09,760
So this is not actually a good idea to be used here.

122
00:08:10,340 --> 00:08:12,470
And you saw how it didn't work.

123
00:08:12,470 --> 00:08:17,090
If throw it through an error, I'm going to go over this code one more time and then we are going to

124
00:08:17,090 --> 00:08:18,430
wrap up this lecture.

125
00:08:18,650 --> 00:08:19,060
All right.

126
00:08:19,310 --> 00:08:23,260
So we basically created an async function.

127
00:08:24,020 --> 00:08:30,650
The thing that we did differently was we did the variable declaration and returning of that variable

128
00:08:30,650 --> 00:08:37,880
in one line and we just grabbed the questions response and we did Jason Method, which is going to do

129
00:08:37,880 --> 00:08:38,600
three things.

130
00:08:38,600 --> 00:08:43,309
One, it is going to convert their response to Jason file two, it is going to read it.

131
00:08:43,309 --> 00:08:47,420
Three, it is going to pass it to a format that is.

132
00:08:48,630 --> 00:08:50,010
Common to JavaScript.

133
00:08:50,640 --> 00:08:50,980
Right.

134
00:08:51,000 --> 00:08:58,080
So this is what we did here in case there is an error like there is if you URL that is not valid.

135
00:08:58,610 --> 00:09:05,970
What we did was we said if questions response, that status is not 200 throe new error.

136
00:09:06,120 --> 00:09:08,740
We literally said throw new error.

137
00:09:09,120 --> 00:09:09,800
Very simple.

138
00:09:09,810 --> 00:09:11,220
That's why JavaScript is simple.

139
00:09:11,880 --> 00:09:12,160
OK.

140
00:09:12,610 --> 00:09:14,160
And what was the error?

141
00:09:14,160 --> 00:09:16,410
The error set error fetching data.

142
00:09:16,950 --> 00:09:17,420
All right.

143
00:09:17,430 --> 00:09:23,100
And we resolved the promise here and we caught the error here.

144
00:09:23,370 --> 00:09:26,330
So you can go ahead and you can say error message.

145
00:09:26,700 --> 00:09:29,940
There is a property on the error, which is error message.

146
00:09:30,240 --> 00:09:37,200
And if you click on it and save it, you can see we only get the error date, the error message.

147
00:09:37,470 --> 00:09:38,640
So this is the message.

148
00:09:39,090 --> 00:09:48,340
This property is available to you when you create this when you instantiate a new object object function.

149
00:09:48,570 --> 00:09:48,910
All right.

150
00:09:49,140 --> 00:09:53,530
So I think I think we are done here.

151
00:09:53,880 --> 00:09:56,280
So this is going to be it for this lecture.

152
00:09:56,580 --> 00:09:59,090
And I hope you have learned a lot.

153
00:09:59,100 --> 00:10:05,420
I hope there isn't any problem because I try to reiterate stuff as many times as I could.

154
00:10:05,610 --> 00:10:07,690
So that's it for this lecture.

155
00:10:07,710 --> 00:10:09,420
See you guys in the next one.

