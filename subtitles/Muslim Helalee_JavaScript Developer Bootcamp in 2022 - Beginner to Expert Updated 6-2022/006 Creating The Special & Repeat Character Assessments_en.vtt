WEBVTT
1
00:00:01.550 --> 00:00:02.610
Hi, everyone.

2
00:00:03.020 --> 00:00:09.920
In this lecture, we are going to create the no special character and repeat character assessments.

3
00:00:11.340 --> 00:00:16.230
All right, so the function structure is going to be basically the same.

4
00:00:16.350 --> 00:00:24.870
So what I'm going to do is I'm just going to say this time it is going to be no is going to be no assessment

5
00:00:24.870 --> 00:00:25.470
function.

6
00:00:25.830 --> 00:00:35.280
So for that, we are going to say function is going to be no assess meant and we're going to pass a

7
00:00:35.490 --> 00:00:36.450
password.

8
00:00:36.990 --> 00:00:42.320
And inside this, we are going to call this character type assessment.

9
00:00:42.330 --> 00:00:47.820
So we are going to say return not to forget this character type assessment.

10
00:00:48.000 --> 00:00:50.480
Now it is going to accept three arguments.

11
00:00:50.940 --> 00:00:53.120
So the first one is going to be password.

12
00:00:53.970 --> 00:00:56.930
The second one is going to be the regular expression.

13
00:00:57.390 --> 00:00:59.700
So what is the number, regular expression?

14
00:00:59.710 --> 00:01:04.670
What is the regular expression that is only going to apply when you type in numbers?

15
00:01:04.920 --> 00:01:11.170
So we could just simply say 029 And we want to grab all occurrences of that.

16
00:01:11.940 --> 00:01:19.770
And finally, what is the assessment type that we want to provide is numbers.

17
00:01:19.770 --> 00:01:25.620
So in the previous case we had upper case, in this case we had lower.

18
00:01:25.620 --> 00:01:26.910
In this case we have numbers.

19
00:01:26.910 --> 00:01:27.870
So let's save it.

20
00:01:28.380 --> 00:01:29.080
Let's come here.

21
00:01:29.100 --> 00:01:33.120
So if I say SD, it says the password has.

22
00:01:34.210 --> 00:01:36.560
Where is that so?

23
00:01:36.670 --> 00:01:40.070
Oh, we should push it to this assessment as well.

24
00:01:40.450 --> 00:01:50.290
So I'm just going to say assessment dot push and we are going to grab our no assessment pass and the

25
00:01:50.290 --> 00:01:52.420
password, let's save it.

26
00:01:52.440 --> 00:01:57.020
So if I do SD now, you can see here it's this password has no numbers.

27
00:01:57.080 --> 00:01:59.530
If I do want to, it's this password.

28
00:01:59.530 --> 00:02:01.540
Must have more numbers.

29
00:02:01.810 --> 00:02:03.470
I must have more.

30
00:02:04.120 --> 00:02:08.590
And when you did one to four, that message is gone.

31
00:02:08.919 --> 00:02:09.220
All right.

32
00:02:09.460 --> 00:02:15.340
So the next assessment that I want to create, first off, I want to push it and that is going to be

33
00:02:15.340 --> 00:02:16.900
the special character.

34
00:02:18.960 --> 00:02:25.770
So special character, special character assessment.

35
00:02:27.400 --> 00:02:30.730
Right, and we're going to pass and the password.

36
00:02:33.540 --> 00:02:40.980
OK, now that is past and I'm going to come down here and let's just copy this comment, put it here.

37
00:02:41.370 --> 00:02:46.170
This is going to be a special character assessment.

38
00:02:48.490 --> 00:02:54.970
OK, so let's create the function, it is a special character assessment and we are going to pass and

39
00:02:54.970 --> 00:02:55.900
password.

40
00:02:56.690 --> 00:03:00.320
Now we are going to return the character type assessment.

41
00:03:00.550 --> 00:03:04.360
Now you can see how easy this is, how useful this function is.

42
00:03:04.660 --> 00:03:08.170
We can just call it and we can create as many assessments as we want.

43
00:03:09.070 --> 00:03:15.790
We don't have to just like, keep repeating ourselves with this f f f f statements.

44
00:03:16.120 --> 00:03:19.640
Just we just have to call that this character type assessment.

45
00:03:19.870 --> 00:03:22.650
Now, the first argument is going to be the password.

46
00:03:22.660 --> 00:03:25.740
The second one is going to be the regular expression.

47
00:03:26.260 --> 00:03:31.750
So how do you create a regular expression for something that is a special character?

48
00:03:31.960 --> 00:03:33.490
So a special character.

49
00:03:33.730 --> 00:03:40.030
If you provide a carrot inside the brackets for regular expression, it says it is a not a quality.

50
00:03:40.210 --> 00:03:41.550
You can think of it like that.

51
00:03:41.720 --> 00:03:43.200
It is not operator.

52
00:03:43.510 --> 00:03:51.130
So a special character is something that is not 029 that is not A to Z lowercase, that is not A to

53
00:03:51.130 --> 00:03:54.790
Z Uppercase and that is not the space.

54
00:03:55.660 --> 00:04:00.880
And we want to grasp all occurrences of it.

55
00:04:00.880 --> 00:04:02.380
So let's pass that.

56
00:04:02.380 --> 00:04:05.290
And and finally, what is going to be the message?

57
00:04:05.740 --> 00:04:09.370
The message is going to be special characters.

58
00:04:11.410 --> 00:04:20.070
So if I say one to Q, W, E, three, a, C, V, it snuffs his password, has no special character.

59
00:04:20.079 --> 00:04:28.420
So if I do an asterisk more a 10 percent more a dollar sign, that's enough.

60
00:04:28.450 --> 00:04:31.320
And we can see that the strength is 100.

61
00:04:31.870 --> 00:04:34.380
So this is the special character assessment.

62
00:04:34.690 --> 00:04:42.010
And finally, we are going to create a regular expression for a repeat character assessments.

63
00:04:42.370 --> 00:04:49.510
And what do we want to do basically here, if the user repeats one letter more than one time, we want

64
00:04:49.510 --> 00:04:50.740
to throw an error there.

65
00:04:51.020 --> 00:04:51.310
Right.

66
00:04:51.610 --> 00:04:53.860
Just just just a heads up.

67
00:04:53.860 --> 00:04:54.750
It's not an error.

68
00:04:55.270 --> 00:04:59.170
So down here, I'm going to create a function and I'm going to call it repeat.

69
00:05:00.830 --> 00:05:02.360
Character.

70
00:05:03.800 --> 00:05:07.310
Character says meant.

71
00:05:08.320 --> 00:05:10.330
And we are going to pass them the password.

72
00:05:11.770 --> 00:05:14.840
First off, let's create our matches, right.

73
00:05:15.250 --> 00:05:22.540
And the reason that I'm not calling this within this function is because this function no longer works

74
00:05:22.540 --> 00:05:24.820
for a repeat character assessment.

75
00:05:25.270 --> 00:05:25.590
Right.

76
00:05:25.600 --> 00:05:34.360
And I'm going to say repeat character's assessment and we are going to call it a repeat char match or

77
00:05:34.360 --> 00:05:35.740
a repeat character match.

78
00:05:35.950 --> 00:05:38.980
And we're going to grab our password and we're going to say match.

79
00:05:39.220 --> 00:05:44.520
We want to match it against the following regular expression.

80
00:05:44.800 --> 00:05:52.180
So we are going to use the period or the wildcard character, the period or the wildcard character is

81
00:05:52.180 --> 00:05:53.450
going to be anything.

82
00:05:54.100 --> 00:05:55.840
It is going to it could be anything.

83
00:05:56.200 --> 00:06:05.410
And we say, if anything, if anything, or if any character has been repeated more than once, we want

84
00:06:05.410 --> 00:06:07.550
to grab the all occurrences of that.

85
00:06:08.110 --> 00:06:15.760
So, for example, at the start of the password, you have to A's at the middle, you have two WS.

86
00:06:15.760 --> 00:06:17.110
At the end you have two choices.

87
00:06:17.500 --> 00:06:22.710
We want to grab all occurrences of any character that has been repeated more than once.

88
00:06:24.040 --> 00:06:27.310
If we cannot grab it, we just return an empty array.

89
00:06:29.240 --> 00:06:39.350
So we said f repeat, repeat, character, match that length, what is the length if the length is greater

90
00:06:39.350 --> 00:06:39.860
than zero?

91
00:06:40.070 --> 00:06:44.150
So even if there is one character that is that has been repeated.

92
00:06:44.600 --> 00:06:44.950
Right.

93
00:06:45.200 --> 00:06:46.000
What do we want to do?

94
00:06:46.010 --> 00:06:48.070
We want to return an object.

95
00:06:48.530 --> 00:06:49.360
What is the object?

96
00:06:49.370 --> 00:06:51.650
It is going to be password check.

97
00:06:51.680 --> 00:06:52.790
We already know that.

98
00:06:53.030 --> 00:06:55.160
And we are going to say password.

99
00:06:58.430 --> 00:07:03.920
We are going to has repeat characters.

100
00:07:06.190 --> 00:07:14.140
And the next one, what is the strength lost, so the strength lost is going to be a dynamic value based

101
00:07:14.140 --> 00:07:19.770
on each character which has been repeated, we are going to reduce it by 10 percent.

102
00:07:20.080 --> 00:07:29.680
So we are going to say strength, strength lost, should be should have a value of our character match

103
00:07:29.680 --> 00:07:30.130
length.

104
00:07:30.520 --> 00:07:36.820
So what is the where is the repeat character match length dott length and describe this length.

105
00:07:36.980 --> 00:07:42.760
You could go ahead and create a variable for this and then pass the variable there and here.

106
00:07:42.920 --> 00:07:48.430
But this is more intuitive and for teaching purposes this is better if I do it like this.

107
00:07:48.970 --> 00:07:53.980
But you could I'm showing you how this is actually this is, this will look more professional.

108
00:07:54.220 --> 00:08:03.490
Just grab this, create a another constant but create another variable and then grab the value from

109
00:08:03.490 --> 00:08:06.760
here stored there called the variable here and call the variable here.

110
00:08:07.270 --> 00:08:09.280
And we are going to multiply it by ten.

111
00:08:09.290 --> 00:08:10.410
So 10 percent.

112
00:08:10.990 --> 00:08:16.060
So if we don't have any repeat characters, the value of length is going to be zero.

113
00:08:18.500 --> 00:08:21.900
This this only works when the length has more than zero.

114
00:08:22.190 --> 00:08:29.720
So if it is zero, this if statement is not even going to run, if it is one which is greater than zero,

115
00:08:29.900 --> 00:08:31.910
they're going to pass one here one time.

116
00:08:31.920 --> 00:08:33.320
Steane strength, loss.

117
00:08:33.330 --> 00:08:34.159
It is going to be 10.

118
00:08:34.429 --> 00:08:38.559
If it is five, five times ten, it is going to be 50 percent.

119
00:08:39.289 --> 00:08:41.510
So we have created this here.

120
00:08:41.720 --> 00:08:44.780
Let's go ahead and let's push it to this area as well.

121
00:08:44.790 --> 00:08:53.240
So we are going to say assessment dot push and we are going to repeat character assessment that's pass

122
00:08:53.240 --> 00:08:54.150
and the password.

123
00:08:54.860 --> 00:08:56.330
So if I say one.

124
00:08:58.480 --> 00:09:04.360
Password input, that match type error, or is the type Sunline 98.

125
00:09:05.430 --> 00:09:09.080
So it says.

126
00:09:09.950 --> 00:09:12.650
Is password input match.

127
00:09:14.360 --> 00:09:19.700
Oh, this should be sorry, this should be password, this should not be password inpart.

128
00:09:20.420 --> 00:09:21.100
All right.

129
00:09:21.110 --> 00:09:24.760
So I do see a typo here.

130
00:09:24.770 --> 00:09:31.490
So before actually going forward and testing, I'm just going to put it to repeat character Majadele

131
00:09:31.490 --> 00:09:32.750
length times.

132
00:09:33.260 --> 00:09:40.590
So for each of our a repeated character, our strength should be decreased by 10 percent.

133
00:09:41.210 --> 00:09:42.980
So let's go ahead and test it out.

134
00:09:42.990 --> 00:09:45.020
We have three numbers, one, two, three.

135
00:09:45.020 --> 00:09:50.510
And we have lowercase letters, capital letters.

136
00:09:50.900 --> 00:09:53.840
We have it says password could be longer.

137
00:09:54.290 --> 00:09:56.930
It says we don't have any special characters.

138
00:09:57.170 --> 00:09:57.830
So you know what?

139
00:09:57.830 --> 00:10:02.150
I'm just going to go ahead and zoom this in back to 100 percent.

140
00:10:02.510 --> 00:10:03.590
So let's go ahead.

141
00:10:03.590 --> 00:10:05.920
And it's provide three special characters.

142
00:10:06.110 --> 00:10:14.600
Now, if I provide L, it is OK, but if I provide the second out, then we can see that our strength

143
00:10:14.600 --> 00:10:22.370
has been decreased by one hundred percent, which it shouldn't do, that we have our repeat character

144
00:10:22.370 --> 00:10:25.700
match and then we have oh, we didn't save it.

145
00:10:25.700 --> 00:10:26.690
So let's save that.

146
00:10:26.690 --> 00:10:27.410
Let's come here.

147
00:10:27.560 --> 00:10:28.580
So one, two, three.

148
00:10:28.580 --> 00:10:31.700
Q SD Right.

149
00:10:31.700 --> 00:10:35.210
And we are going to pass in three symbols.

150
00:10:35.660 --> 00:10:43.370
So our password has numbers, uppercase characters, lowercase characters, special characters and let's

151
00:10:43.370 --> 00:10:45.950
check it out for repeat characters.

152
00:10:46.130 --> 00:10:51.400
So for the second four should decrease it by 10 percent.

153
00:10:51.410 --> 00:10:52.010
There we go.

154
00:10:52.370 --> 00:10:56.830
The third one should decrease it by 10 percent further.

155
00:10:56.840 --> 00:11:02.510
So so each couple of repeated characters is going to decrease it by 10 percent.

156
00:11:02.810 --> 00:11:15.530
So A, XRX, C, C, B, B and M and ETR R so until we go ahead and we, we end up with a password that

157
00:11:15.530 --> 00:11:17.180
is zero percent strong.

158
00:11:17.630 --> 00:11:20.970
So that's it for this application and this chapter.

159
00:11:20.990 --> 00:11:22.730
See you guys in the next one.

