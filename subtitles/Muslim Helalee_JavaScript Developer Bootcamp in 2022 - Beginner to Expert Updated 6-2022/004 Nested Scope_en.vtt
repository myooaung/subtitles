WEBVTT
1
00:00:02.320 --> 00:00:07.090
Hi, everyone, in this lecture, we are going to talk about the nested scope.

2
00:00:08.510 --> 00:00:16.070
All right, so we know all this process, we know the two step process where we have the compilation

3
00:00:16.070 --> 00:00:23.240
and then we have the execution, but what if we have a function inside another function?

4
00:00:23.720 --> 00:00:32.360
Now, the question that I want to answer here is, is that this function, this function called again

5
00:00:32.360 --> 00:00:32.970
movie.

6
00:00:33.290 --> 00:00:39.600
Is it accessible outside the scope of the other movie function, inside the global scope?

7
00:00:39.950 --> 00:00:47.690
We know how this works because we have talked about it for almost 50 minutes during the three previous

8
00:00:48.020 --> 00:00:48.570
lectures.

9
00:00:48.890 --> 00:00:50.470
We know how code is executed.

10
00:00:50.480 --> 00:00:54.020
We know that first we have completion, then we have execution.

11
00:00:54.330 --> 00:00:55.720
But what about this?

12
00:00:55.760 --> 00:00:59.420
This is because functions, they have a specific scope.

13
00:00:59.730 --> 00:01:03.940
So this is one scope nested inside, another scope.

14
00:01:04.190 --> 00:01:07.870
So how would this actually be executed?

15
00:01:08.360 --> 00:01:16.280
What function declarations would like to do is they make their identifiers to their like in their in

16
00:01:16.280 --> 00:01:17.720
their enclosing scope.

17
00:01:18.110 --> 00:01:26.330
So any identifiers that are present inside, any function declaration, they belong to the scope of

18
00:01:26.330 --> 00:01:27.000
that function.

19
00:01:27.350 --> 00:01:31.220
We know that this VAR movie belongs to the scope.

20
00:01:32.150 --> 00:01:39.710
Of this function, other movie, we know that, but what about this function because this var this is

21
00:01:39.710 --> 00:01:45.210
a declaration, this is a formal declaration, this function is also a formal declaration.

22
00:01:45.230 --> 00:01:46.220
What is the difference?

23
00:01:46.580 --> 00:01:50.310
This is a very a formal variable declaration.

24
00:01:50.630 --> 00:01:53.120
This is a formal function declaration.

25
00:01:53.740 --> 00:01:54.040
Right.

26
00:01:54.470 --> 00:01:59.610
So because this variable declaration doesn't have a scope, doesn't create a scope.

27
00:01:59.840 --> 00:02:01.790
This function does create a scope.

28
00:02:01.820 --> 00:02:02.560
What about this?

29
00:02:02.840 --> 00:02:11.420
So when this function creates when this function creates a scope, we can call the function this nested

30
00:02:11.420 --> 00:02:15.050
scope inside this bigger scope.

31
00:02:15.990 --> 00:02:17.200
We can call it there.

32
00:02:17.220 --> 00:02:18.560
So how do we know that?

33
00:02:18.840 --> 00:02:23.670
So I'm what I'm going to do is I'm just going to grab the inclosing scope, which is the other movie

34
00:02:23.970 --> 00:02:25.200
for this again movie.

35
00:02:25.200 --> 00:02:29.600
And I'm going to call that and we can see what do we have?

36
00:02:29.970 --> 00:02:38.160
We have our concept of like this, this constant the log actually runs because we have here movie and

37
00:02:38.160 --> 00:02:39.340
then we have movie name.

38
00:02:39.650 --> 00:02:46.110
OK, so this movie, you know what, I'm I'm very simplifying this execution.

39
00:02:46.410 --> 00:02:48.350
We are mainly coming to here.

40
00:02:48.390 --> 00:02:56.370
OK, so whenever we say concer log because console is not present inside this function, it is not it

41
00:02:56.370 --> 00:03:04.760
has not been referenced inside this function, the console, because of this lexical nature of JavaScript,

42
00:03:04.950 --> 00:03:07.530
it is going to go one level up to this.

43
00:03:08.040 --> 00:03:12.870
But before going there, it should grab the parameter.

44
00:03:13.080 --> 00:03:20.370
This function parameters value and the function parameter is value is supplied with this function argument,

45
00:03:20.790 --> 00:03:21.440
this argument.

46
00:03:21.450 --> 00:03:27.030
So this argument is going to be passed in here and then we are going to reference it inside the function.

47
00:03:27.390 --> 00:03:33.420
So we know that this console log has one value and that is Dances with Wolves.

48
00:03:33.960 --> 00:03:36.750
Now, this console log is going to go one level up.

49
00:03:37.170 --> 00:03:45.660
And because the console doesn't have any reference here, we we did not create a valid reference for

50
00:03:45.660 --> 00:03:46.830
the console here.

51
00:03:47.190 --> 00:03:50.070
It is going to go one level up once more.

52
00:03:50.250 --> 00:03:51.750
It is going to go one level up.

53
00:03:51.960 --> 00:03:58.410
But before going one level up, because this log is in the source position, we are going to grab the

54
00:03:58.410 --> 00:03:59.490
source of this log.

55
00:03:59.760 --> 00:04:02.010
What is the source for this log?

56
00:04:02.220 --> 00:04:03.540
We grab this.

57
00:04:04.050 --> 00:04:05.910
And now what about this movie?

58
00:04:05.910 --> 00:04:08.670
Because the movie is again another identifier.

59
00:04:08.970 --> 00:04:12.760
So we are going to pass on the value American Psycho to this movie.

60
00:04:13.230 --> 00:04:19.589
OK, so and then the console dialogue is going to come here to the global scope and it is going to be

61
00:04:19.589 --> 00:04:20.370
executed.

62
00:04:20.800 --> 00:04:21.120
Right.

63
00:04:21.269 --> 00:04:25.290
And then we are going to get American Psycho and Dances with Wolves.

64
00:04:25.800 --> 00:04:29.610
We we we get these because we call the function.

65
00:04:30.060 --> 00:04:37.140
And now if I can comment about this function call, even though you might say, OK, the console log

66
00:04:37.140 --> 00:04:41.490
is right here inside the global scope, why is it not printing?

67
00:04:42.030 --> 00:04:48.900
The reason for that is because it is not inside the global scope, because now we are in the compilation

68
00:04:48.900 --> 00:04:49.340
stage.

69
00:04:49.650 --> 00:04:52.350
Remember the function call.

70
00:04:52.920 --> 00:04:54.980
This is the executable code.

71
00:04:55.230 --> 00:04:57.270
This is not the executable code.

72
00:04:57.540 --> 00:04:59.220
This is the executable code.

73
00:04:59.490 --> 00:05:07.800
One day the executable code runs, then the console log is going to travel to level up or two levels

74
00:05:07.800 --> 00:05:08.730
successively.

75
00:05:08.880 --> 00:05:09.330
All right.

76
00:05:09.630 --> 00:05:13.860
Because this parentheses says execute this code.

77
00:05:14.130 --> 00:05:17.160
Nothing else says execute this code, OK?

78
00:05:17.340 --> 00:05:20.520
Only the parentheses set says execute this code.

79
00:05:20.910 --> 00:05:21.970
Right and not.

80
00:05:21.990 --> 00:05:27.720
And then we can see the American Psycho, which comes from here and Dances with Wolves, which comes

81
00:05:27.720 --> 00:05:28.340
from here.

82
00:05:29.220 --> 00:05:31.020
Now, the main question.

83
00:05:32.210 --> 00:05:36.390
What can we access again, movie inside the global scope?

84
00:05:36.590 --> 00:05:44.570
No, we cannot, because the scope of this function is enclosed within the other movie function.

85
00:05:44.990 --> 00:05:52.770
The function again movie does not exist outside the scope of the other movie scope.

86
00:05:53.210 --> 00:05:58.790
So if I were to consider log it, we can see that we end up with a reference center.

87
00:05:59.150 --> 00:06:02.360
We cannot find the reference to this again movie.

88
00:06:02.690 --> 00:06:06.380
And it doesn't say that The Revenant because it's a string.

89
00:06:06.530 --> 00:06:08.020
We know where it is.

90
00:06:08.030 --> 00:06:09.010
It's right here.

91
00:06:09.380 --> 00:06:10.920
But what about this again movie?

92
00:06:11.420 --> 00:06:17.900
So even when this is an error, this function is not going to execute, meaning we are not going to

93
00:06:17.900 --> 00:06:19.490
see this inside the console.

94
00:06:19.880 --> 00:06:22.360
And it says, again, movie is not defined.

95
00:06:22.550 --> 00:06:24.410
There is no reference to it.

96
00:06:24.800 --> 00:06:27.100
And it says on line 14 where it is.

97
00:06:27.320 --> 00:06:28.730
So it is on line 14.

98
00:06:30.050 --> 00:06:34.520
So we have an undefined and we have an undeclared.

99
00:06:34.580 --> 00:06:38.930
This is what I want to talk about at the end of this lecture.

100
00:06:39.080 --> 00:06:42.290
And because here we have undefined OK.

101
00:06:42.440 --> 00:06:45.710
And we also have in JavaScript something that is called undeclared.

102
00:06:46.130 --> 00:06:48.920
They might sound synonyms, but they're not.

103
00:06:48.920 --> 00:06:55.580
According to the JavaScript language, undefined is where a variable is a variable exists.

104
00:06:55.940 --> 00:06:58.790
But at the moment it doesn't have a value.

105
00:06:58.790 --> 00:07:04.760
It might have had a value or it might never have had a value, but it exists.

106
00:07:05.210 --> 00:07:09.800
But at the moment of execution, it doesn't have a value.

107
00:07:09.980 --> 00:07:11.330
It does exist.

108
00:07:11.330 --> 00:07:14.750
This variable exists, but it doesn't have a value.

109
00:07:14.760 --> 00:07:17.320
That's why we cannot grob the value.

110
00:07:17.330 --> 00:07:19.190
That's why we say it's undefined.

111
00:07:19.790 --> 00:07:28.580
But what is undeclared undeclared is something that has never formally been declared in any scope that

112
00:07:28.580 --> 00:07:29.710
we have access to.

113
00:07:29.960 --> 00:07:36.800
We know what undeclared as we saw it in our previous lecture, and this is undefined, OK, this is

114
00:07:36.800 --> 00:07:38.240
the difference between the two.

115
00:07:38.600 --> 00:07:42.020
So this is going to be it for this lecture and this chapter.

116
00:07:42.320 --> 00:07:49.070
In the next chapter, we are going to take the idea of this lexical scope and we are going to expand

117
00:07:49.070 --> 00:07:52.850
it and we are going to talk Tocal advanced.

118
00:07:53.090 --> 00:07:56.600
If you thought this was advanced, wait to see the next chapter.

119
00:07:58.530 --> 00:08:06.140
In the next chapter, we are going to cover very, very major ideas and I'm not going to discuss them

120
00:08:06.140 --> 00:08:09.190
here, but they are even more advanced than this.

121
00:08:09.560 --> 00:08:11.580
So that's it for this lecture.

122
00:08:11.600 --> 00:08:13.520
See you guys in the next chapter.

