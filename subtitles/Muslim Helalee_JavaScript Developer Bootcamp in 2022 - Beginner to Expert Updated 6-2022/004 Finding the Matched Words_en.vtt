WEBVTT
1
00:00:01.890 --> 00:00:02.850
Hi, everyone.

2
00:00:03.150 --> 00:00:07.380
In this lecture, we are going to create the find matches function.

3
00:00:08.530 --> 00:00:13.750
All right, so what is this fine matches is going to do, the fine matches is going to.

4
00:00:13.780 --> 00:00:16.510
Let's go ahead and let's create and let's take a look at it.

5
00:00:16.900 --> 00:00:22.870
So we are going to have a function that is going to say find matches, and this function is going to

6
00:00:22.870 --> 00:00:28.150
take a a parameter called word to match.

7
00:00:29.200 --> 00:00:36.040
Now, this word to match is going to be the word that the user types in, because that word should match

8
00:00:36.040 --> 00:00:41.250
a specific word inside our list of cities and states.

9
00:00:41.260 --> 00:00:41.620
Right.

10
00:00:41.860 --> 00:00:44.560
And then we are going to pass in our cities.

11
00:00:45.760 --> 00:00:46.780
States, right.

12
00:00:46.790 --> 00:00:47.140
Right.

13
00:00:47.380 --> 00:00:48.970
So I'm going to create this.

14
00:00:48.970 --> 00:00:56.650
And what I'm going to do is I'm basically I'm going to say council log city states array and where do

15
00:00:56.650 --> 00:00:57.170
we call it?

16
00:00:57.190 --> 00:01:01.750
I'm going to call this find to find matches inside this display matches.

17
00:01:01.750 --> 00:01:02.770
The reason for that.

18
00:01:02.920 --> 00:01:04.050
I'm just going to remove this.

19
00:01:04.420 --> 00:01:13.360
The reason for that is whenever the user either changes that input or there is a key up event, we want

20
00:01:13.360 --> 00:01:18.540
to run this display matches and in turn it is going to call this function.

21
00:01:18.970 --> 00:01:19.280
Right.

22
00:01:19.480 --> 00:01:22.980
So here we are going to do is I'm just going to say find matches.

23
00:01:23.500 --> 00:01:27.480
And as the argument I'm going to pass in cities, states.

24
00:01:28.000 --> 00:01:28.810
So let's have it.

25
00:01:28.990 --> 00:01:29.640
Let's come here.

26
00:01:29.650 --> 00:01:34.120
So whatever I say and you can see that we have undefined here.

27
00:01:35.210 --> 00:01:38.090
All right, so city states.

28
00:01:39.630 --> 00:01:41.100
Find matches.

29
00:01:41.250 --> 00:01:43.530
This is going to fire we have.

30
00:01:43.560 --> 00:01:46.350
I'm just going to remove this part for now.

31
00:01:46.350 --> 00:01:50.750
Let's save it, stay open and we get all this data.

32
00:01:51.060 --> 00:01:53.460
So not whenever you type something.

33
00:01:53.460 --> 00:01:55.470
It means that it is going to be a key up.

34
00:01:55.740 --> 00:02:02.540
Or when I click away, you can see that we are still clicked in that this input.

35
00:02:02.760 --> 00:02:06.330
So if I clicked away, you can see this event should fire one more time.

36
00:02:06.330 --> 00:02:06.900
So click.

37
00:02:06.900 --> 00:02:08.789
You can see the event is fire one more time.

38
00:02:09.240 --> 00:02:11.039
It doesn't fire one more time.

39
00:02:11.039 --> 00:02:14.360
It is basically this change event that is being fired.

40
00:02:15.000 --> 00:02:18.270
So we have access to this find matches.

41
00:02:18.280 --> 00:02:23.850
Our array inside this display matches now before going into displaying stuff.

42
00:02:24.120 --> 00:02:25.230
What do we want to do?

43
00:02:25.230 --> 00:02:32.210
How can we find out what the user has typed and how can we match it with our list?

44
00:02:32.670 --> 00:02:32.940
Right.

45
00:02:33.300 --> 00:02:42.870
So here, if I say cities, cities, states, dot city and let's save it and let's click.

46
00:02:42.870 --> 00:02:45.630
And we do get undefined.

47
00:02:45.630 --> 00:02:49.640
So let's run this.

48
00:02:49.650 --> 00:02:53.040
Let's I'm just going to provide the zero index.

49
00:02:54.570 --> 00:03:00.510
We should loop over then it is going to work, you can see that the end we are we get the New York and

50
00:03:00.510 --> 00:03:05.100
if I do Tulsa, you can see that we get New York five times.

51
00:03:05.430 --> 00:03:14.010
But if I just do this, if I hardcoded the index, it means that that New York is going to be hard coded

52
00:03:14.010 --> 00:03:15.770
because that has an index of zero.

53
00:03:16.200 --> 00:03:17.100
How do you know that?

54
00:03:17.100 --> 00:03:23.610
If I just remove everything, save it, and if I just Tibey and if I come here, you can see that if

55
00:03:23.700 --> 00:03:29.340
if we come to the first one, the very first city is going to be New York and state is also going to

56
00:03:29.340 --> 00:03:30.050
be New York.

57
00:03:30.720 --> 00:03:32.520
So we don't want to hardcoded.

58
00:03:32.530 --> 00:03:33.510
So what do we want to do?

59
00:03:33.510 --> 00:03:35.220
We want to filter this array.

60
00:03:35.670 --> 00:03:36.780
So I'm going to cut this.

61
00:03:37.800 --> 00:03:43.980
And I'm going to I'm going to face that here and we are going to say, Felter, what it is that we want

62
00:03:43.980 --> 00:03:44.470
to filter.

63
00:03:44.490 --> 00:03:47.820
So we are going to filter city state.

64
00:03:48.820 --> 00:03:49.300
All right.

65
00:03:50.290 --> 00:03:58.270
So whenever we faltered, we are looking for what it is that the user has stoped, so I'm going to put

66
00:03:58.270 --> 00:04:05.120
in the word to match here as well because we are going to look for that as well.

67
00:04:05.440 --> 00:04:07.410
So what are we going to do as a now?

68
00:04:07.450 --> 00:04:13.430
Let's go ahead and let's think think about how we are going to implement this.

69
00:04:13.720 --> 00:04:20.980
So first off, because if I just put anything inside of this, because there is no actual variable declaration,

70
00:04:21.339 --> 00:04:24.950
we are not doing anything with this function, what do we want to do?

71
00:04:24.970 --> 00:04:27.110
We want to return from this function.

72
00:04:27.130 --> 00:04:28.670
OK, so what do we want?

73
00:04:28.700 --> 00:04:30.970
Not not actually return from the function.

74
00:04:31.210 --> 00:04:35.880
We want this function to return a filter that is applied on this array.

75
00:04:36.310 --> 00:04:38.170
And what is this filter going to do?

76
00:04:38.560 --> 00:04:47.890
This filter is going to grab our work to match and match it with that list of either cities or of the

77
00:04:47.890 --> 00:04:50.710
properties for the cities or the properties for the states.

78
00:04:51.310 --> 00:04:51.630
All right.

79
00:04:51.820 --> 00:04:52.780
How do you do that?

80
00:04:53.950 --> 00:04:57.520
So if I were to say, for example, let right.

81
00:04:57.520 --> 00:05:03.940
Let's let's create a variable called place, I'm not going to specifically write city or state.

82
00:05:03.940 --> 00:05:05.230
I'm just going to write place.

83
00:05:06.010 --> 00:05:12.490
And now what we can do is we are going to grab this the filter variable, which is the city state.

84
00:05:12.670 --> 00:05:18.340
Each time this filter runs, this variable is going to grab one index of this array.

85
00:05:19.430 --> 00:05:26.570
All right, and let's see, let's pass a city, state, just say city, save it.

86
00:05:26.840 --> 00:05:31.100
And what we can do is we can also consulate.

87
00:05:31.280 --> 00:05:34.860
I want to go step by step so you can really understand what's happening here.

88
00:05:35.360 --> 00:05:40.850
So if I say and can I read property filter of undefined.

89
00:05:42.430 --> 00:05:48.550
All right, so we have city states, OK, so that's because of this one, I'm just going to cut that

90
00:05:49.120 --> 00:05:52.660
and we should we could cut it, save it.

91
00:05:52.660 --> 00:05:58.800
And if I say and you can see that we get this massive result.

92
00:05:59.500 --> 00:05:59.940
All right.

93
00:06:00.130 --> 00:06:03.240
And it's almost all of the cities that we have.

94
00:06:03.250 --> 00:06:03.600
All right.

95
00:06:03.940 --> 00:06:12.400
So this city, that city, state, that city is going to give us this the the city, if we change it

96
00:06:12.400 --> 00:06:15.840
to state, it is going to give us the state.

97
00:06:15.900 --> 00:06:24.610
So if I just type in and you can see that these are all the states, this has been repeated three times,

98
00:06:24.610 --> 00:06:30.340
I think some of them have been repeated because a state has multiple cities.

99
00:06:30.340 --> 00:06:31.840
That's why it has been repeated.

100
00:06:32.410 --> 00:06:32.790
Right.

101
00:06:32.800 --> 00:06:33.430
So.

102
00:06:34.720 --> 00:06:39.190
This is how we can grab our city and our state and how can we apply that much?

103
00:06:39.420 --> 00:06:41.740
So what I'm going to do is I'm going to say return.

104
00:06:42.700 --> 00:06:43.850
What do we want to return?

105
00:06:43.870 --> 00:06:46.690
We want to return this place.

106
00:06:47.380 --> 00:06:53.550
OK, so instead of doing that, I'm just going to say I'm going to remove that place as well.

107
00:06:53.770 --> 00:06:55.150
So I'm going to return city.

108
00:06:55.150 --> 00:06:55.670
State?

109
00:06:55.780 --> 00:06:57.040
What city?

110
00:06:57.040 --> 00:07:01.780
I was going to be our first side of this logical operator.

111
00:07:02.350 --> 00:07:03.400
City, state.

112
00:07:03.760 --> 00:07:05.770
That city, that match.

113
00:07:06.340 --> 00:07:12.130
OK, and you know that this match is going to as going to a variable name or string literal containing

114
00:07:12.130 --> 00:07:14.610
the regular expression pattern and flux.

115
00:07:14.860 --> 00:07:17.470
So let's put in our regular expression now.

116
00:07:17.470 --> 00:07:25.270
The flags are going to be iji because we want to look for the states, even even when they are lowercase

117
00:07:25.480 --> 00:07:30.440
and the G is going to be global or is going to grab is going to grab all the occurrences of that.

118
00:07:30.820 --> 00:07:36.210
So how can what what do we pass in here before passing anything there?

119
00:07:36.220 --> 00:07:40.750
I just want to write our word to match here.

120
00:07:41.550 --> 00:07:41.880
All right.

121
00:07:42.100 --> 00:07:46.830
So if I write, for example, new here, what what would that mean?

122
00:07:46.840 --> 00:07:50.050
It would mean that we are hard coding the new keyword.

123
00:07:50.530 --> 00:07:50.830
All right.

124
00:07:51.010 --> 00:07:53.830
We are not letting the user write something.

125
00:07:53.830 --> 00:07:56.350
We don't we shouldn't hard code values.

126
00:07:57.160 --> 00:07:57.580
All right.

127
00:07:58.060 --> 00:08:01.680
But you can see that we have a variable called work to match.

128
00:08:01.690 --> 00:08:08.380
If I were to put word to match here, then what it would do as this regular expression is going to match

129
00:08:09.070 --> 00:08:14.110
this word word to match with whatever it is that the user has entered.

130
00:08:14.470 --> 00:08:16.740
That is not something that we want as well.

131
00:08:17.320 --> 00:08:23.340
And there is another way of creating regular expression that is going to come to rescue.

132
00:08:23.710 --> 00:08:29.410
So I'm just going to create a variable and I'm going to call it Red X, and we are going to use the

133
00:08:29.410 --> 00:08:31.840
new keyword that we have talked a lot.

134
00:08:32.110 --> 00:08:36.480
And this is going to give us an object called regular expression.

135
00:08:37.090 --> 00:08:37.450
Right.

136
00:08:37.600 --> 00:08:40.960
And this regular expression function, what is this?

137
00:08:41.080 --> 00:08:42.460
What is this going to accept?

138
00:08:42.669 --> 00:08:49.510
It is going to accept the word that we are looking for or the word to match.

139
00:08:50.730 --> 00:08:57.880
And the second argument is going to be our flag, so ideology doesn't really matter.

140
00:08:57.900 --> 00:08:59.370
So that's what a guy.

141
00:08:59.940 --> 00:09:00.300
Right.

142
00:09:00.430 --> 00:09:07.070
And what I'm going to do is instead of writing MASH in here, I'm just going to write rejects.

143
00:09:07.080 --> 00:09:07.760
Rejects.

144
00:09:08.460 --> 00:09:08.810
All right.

145
00:09:09.300 --> 00:09:11.700
So this is going to grab our work.

146
00:09:11.700 --> 00:09:14.070
Too much is going to be the thing that the user puts.

147
00:09:14.460 --> 00:09:17.680
And then we are going to match it with the city.

148
00:09:17.700 --> 00:09:19.940
And when we find the match, we are going to print it.

149
00:09:19.950 --> 00:09:21.360
We are going to return it.

150
00:09:22.060 --> 00:09:22.240
Right.

151
00:09:22.320 --> 00:09:23.360
So this is the city.

152
00:09:23.370 --> 00:09:24.410
What about the state?

153
00:09:24.600 --> 00:09:28.320
So we are going to say or city.

154
00:09:29.160 --> 00:09:30.300
OK, city.

155
00:09:30.300 --> 00:09:31.110
State.

156
00:09:32.180 --> 00:09:39.040
Dot instead of city, we are going to say state and it is going to be the same regular expression write

157
00:09:39.170 --> 00:09:39.850
checks.

158
00:09:40.370 --> 00:09:40.730
All right.

159
00:09:41.030 --> 00:09:44.060
So now we have called it right here, right.

160
00:09:44.150 --> 00:09:49.910
And now we have let's go inside our Cancela and we are going to call our find.

161
00:09:52.060 --> 00:09:56.800
I'm just going to call the find matches function, so what is the word that I want to match?

162
00:09:56.830 --> 00:10:05.340
I want to match the new four New York and we need to pass in our cities Arreaza City State series.

163
00:10:05.380 --> 00:10:09.990
I'm just going to copy it from here and I'm going to pass it right here.

164
00:10:10.120 --> 00:10:19.300
And when I save it, OK, and find matches new and cities, we need to pass.

165
00:10:19.300 --> 00:10:22.270
And I'm just going to call it.

166
00:10:22.370 --> 00:10:23.970
I'm just going to come in this one out.

167
00:10:23.980 --> 00:10:25.690
Actually, I'm going to delete it.

168
00:10:26.970 --> 00:10:33.980
So this is going to be our first argument and this is going to be the second argument let's find now.

169
00:10:34.110 --> 00:10:35.280
Oh, sorry.

170
00:10:36.420 --> 00:10:40.650
Yeah, it is defined matches and we are going to pass and both of them there.

171
00:10:41.190 --> 00:10:43.080
So let's say find matches.

172
00:10:44.680 --> 00:10:46.010
Find matches.

173
00:10:46.450 --> 00:10:47.200
What is that?

174
00:10:48.270 --> 00:10:52.080
And Passan, I'm just going to pass in new.

175
00:10:53.410 --> 00:10:56.140
And in our cities, states, array.

176
00:10:57.330 --> 00:11:06.330
And when I say it, you can see that we get 61 results for that, it means there are 61 cities and states

177
00:11:06.570 --> 00:11:08.820
with the key word new inside of them.

178
00:11:09.360 --> 00:11:14.940
If I were to, for example, write something that is not that often repeated, Tulsa.

179
00:11:15.300 --> 00:11:18.270
And if I save it, you can see we get only one result.

180
00:11:18.270 --> 00:11:22.830
And its city is Tulsa and city and state is Oklahoma.

181
00:11:22.830 --> 00:11:24.960
But for this, you can see we have.

182
00:11:26.050 --> 00:11:34.000
New York, but for the Albuquerque in the city, we don't have that new key word, so we should have

183
00:11:34.000 --> 00:11:35.940
it inside the state.

184
00:11:36.400 --> 00:11:44.200
So to wrap up this lecture, what we did here is whenever the user types a word, we're going to match

185
00:11:44.200 --> 00:11:52.810
it against the city and against the state and we are going to return the result for the city or the

186
00:11:52.810 --> 00:11:53.510
state.

187
00:11:54.010 --> 00:11:55.990
So this expression is going to return.

188
00:11:55.990 --> 00:12:04.000
True, if either one side of this boolean expression, this logical operator is true, and even if both

189
00:12:04.000 --> 00:12:06.460
sides are true, then it is going to return.

190
00:12:06.460 --> 00:12:06.820
True.

191
00:12:07.180 --> 00:12:13.600
That's why we use the illogical or so grob this war to match Machard with the city or with the state.

192
00:12:14.080 --> 00:12:18.010
You're going to return city or state or both of them.

193
00:12:18.550 --> 00:12:22.060
In the case of New York, you can see that we have returned both of them.

194
00:12:22.510 --> 00:12:30.520
In the case of this, in the case of Tulsa, we have returned only one, and that was city.

195
00:12:30.520 --> 00:12:31.470
We have now returned.

196
00:12:31.630 --> 00:12:35.350
You can see there is only one object within this this this array.

197
00:12:35.650 --> 00:12:39.160
And that object only has a city property of Tulsa.

198
00:12:40.090 --> 00:12:45.910
And you can see that Tulsa has a tier of capital, but we have insert city of lower case.

199
00:12:45.910 --> 00:12:48.310
That's how our flag works.

200
00:12:48.460 --> 00:12:52.960
And our flag has grabbed all the occurrences of that right here.

201
00:12:53.590 --> 00:12:59.440
So now that we have successfully we have successfully implemented our word.

202
00:12:59.440 --> 00:13:02.110
And what is the word that we are actually looking for?

203
00:13:02.410 --> 00:13:03.700
Then in the next lecture?

204
00:13:03.700 --> 00:13:09.940
What we are going to do is we are going to display all of our matches instead of this console to the

205
00:13:09.940 --> 00:13:10.570
screen.

206
00:13:10.720 --> 00:13:11.070
Right.

207
00:13:11.310 --> 00:13:11.710
All right.

208
00:13:11.860 --> 00:13:12.910
So that's it for this.

209
00:13:12.910 --> 00:13:14.860
Let you see you guys in the next one.

