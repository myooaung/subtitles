1
00:00:02,110 --> 00:00:08,560
Hi, everyone, in this letter, we are going to create the character type assessment.

2
00:00:09,960 --> 00:00:16,100
All right, so what do we need to do is I'm going to come down here and I'm going to create a comment,

3
00:00:16,800 --> 00:00:18,740
in fact, I'm going to paste it here.

4
00:00:18,930 --> 00:00:24,450
So we are going to say character type assessment.

5
00:00:24,720 --> 00:00:26,130
So what is the type?

6
00:00:26,220 --> 00:00:27,900
The type could be upper case.

7
00:00:28,110 --> 00:00:29,220
Could be lower case.

8
00:00:29,220 --> 00:00:33,330
Could be a special character or a number.

9
00:00:33,520 --> 00:00:33,900
Right.

10
00:00:34,200 --> 00:00:37,460
So what I'm going to do is I'm going to create that function here.

11
00:00:37,470 --> 00:00:48,330
So let's say function, character, type, assess meant what is the parameters, what are the parameters

12
00:00:48,330 --> 00:00:49,550
that this is going to take in?

13
00:00:49,770 --> 00:00:53,230
We know that this is going to grab a password that is necessary.

14
00:00:53,550 --> 00:00:58,440
Now, you might be asking how do you know which parameter a function takes?

15
00:00:58,440 --> 00:01:01,310
Because this is like sort of confusing as well.

16
00:01:01,410 --> 00:01:02,580
Sometimes, of course.

17
00:01:03,180 --> 00:01:12,180
Are you whenever you create this kind of universal functions, you need to think about what the function

18
00:01:12,180 --> 00:01:17,560
is going to do when you know what the function is going to do, what task the function is going to accomplish.

19
00:01:18,000 --> 00:01:20,550
So what is that task in this case?

20
00:01:20,550 --> 00:01:25,950
The task is to grab at a regular expression and match it and match.

21
00:01:26,300 --> 00:01:26,700
All right.

22
00:01:26,850 --> 00:01:35,900
That to a certain criteria and then return a certain message and do a certain strength lost.

23
00:01:36,210 --> 00:01:36,500
Right.

24
00:01:36,600 --> 00:01:38,010
So we do multiple things.

25
00:01:38,010 --> 00:01:40,010
But what are the most important things?

26
00:01:40,260 --> 00:01:45,070
Some things like this returning this, it has nothing to do with this parameter, right?

27
00:01:45,510 --> 00:01:48,420
Only this part has not this entire return.

28
00:01:48,420 --> 00:01:48,770
Right.

29
00:01:49,140 --> 00:01:53,650
This character match doesn't have anything to do with it, but this regular expression does.

30
00:01:54,000 --> 00:01:54,980
So let's go ahead.

31
00:01:55,350 --> 00:01:57,860
That's why I created both of the function.

32
00:01:58,200 --> 00:02:01,940
Take a look at the similarities and take a look at the differences.

33
00:02:01,950 --> 00:02:05,490
That's one other way you can tell where there is a difference.

34
00:02:05,490 --> 00:02:12,480
Just pass it as an asset, as a parameter so you can see that this match is different than this one

35
00:02:12,930 --> 00:02:15,480
and these regular expressions are different.

36
00:02:15,510 --> 00:02:20,470
So we are going to have a regular expression for a number that is going to be different than this.

37
00:02:20,760 --> 00:02:27,770
So this second parameter is going to be a regular expression because it is different.

38
00:02:28,110 --> 00:02:31,640
So it is the second what is the third parameter that is different?

39
00:02:32,250 --> 00:02:35,670
So character length is the same here, here, here.

40
00:02:35,670 --> 00:02:36,500
That is the same.

41
00:02:36,670 --> 00:02:37,020
Right.

42
00:02:38,100 --> 00:02:46,740
The return is the same password checkers the same strength last values, the same strength last here

43
00:02:46,740 --> 00:02:47,280
and here.

44
00:02:47,280 --> 00:02:48,630
But where is the difference.

45
00:02:48,960 --> 00:02:52,100
The difference lies in the key for the password check.

46
00:02:52,320 --> 00:02:58,140
You can see that it says in here it says lower case and in here it says uppercase.

47
00:02:58,410 --> 00:03:03,930
So this lowercase, an uppercase actually specify the type of assessment.

48
00:03:04,890 --> 00:03:12,660
Right, the type of assessment, that's why this function is called character type assessment, so I'm

49
00:03:12,660 --> 00:03:19,410
going to I'm going to run another I'm going to put in another parameter that is assessment type.

50
00:03:20,520 --> 00:03:22,890
And now you will see how actually this works.

51
00:03:23,220 --> 00:03:26,460
So I'm going to grab this entire thing and I'm going to paste the right here.

52
00:03:27,060 --> 00:03:34,560
So now we do have our password, but not we no longer hard code this match because this regular expression

53
00:03:34,560 --> 00:03:38,510
is going to be fed wherever this character type is called.

54
00:03:38,760 --> 00:03:44,220
This is one of the fundamental use cases of a function they can be used to.

55
00:03:44,310 --> 00:03:46,350
They can be called multiple times.

56
00:03:46,620 --> 00:03:49,180
We're going to call this function four times.

57
00:03:49,620 --> 00:03:51,630
So now this regular expression is passed.

58
00:03:51,810 --> 00:04:00,420
It means if the character type assessment function is called within the uppercase, what is the context

59
00:04:00,420 --> 00:04:01,310
of this function?

60
00:04:01,440 --> 00:04:02,820
It is going to be uppercase.

61
00:04:03,120 --> 00:04:05,460
What is the regular expression of this function?

62
00:04:05,610 --> 00:04:08,070
It is going to be the regular expression for the uppercase.

63
00:04:08,490 --> 00:04:10,710
What is going to be the assessment type?

64
00:04:11,100 --> 00:04:13,410
The assessment type is going to be uppercase.

65
00:04:13,410 --> 00:04:14,970
So I'm just going to grab that.

66
00:04:15,240 --> 00:04:23,880
And in here, what we are actually going to do is I'm going to we are going to grab this entire these

67
00:04:23,880 --> 00:04:28,500
quotes and we are going to convert them to back to X, right.

68
00:04:29,070 --> 00:04:33,690
Because we are going to use a template literals.

69
00:04:34,350 --> 00:04:35,460
So let's grab this.

70
00:04:36,560 --> 00:04:38,900
And dollar sign.

71
00:04:40,060 --> 00:04:47,320
OK, so in here, we are going to pass in our assessment type, so what what is the assessment in this

72
00:04:47,320 --> 00:04:47,980
context?

73
00:04:47,980 --> 00:04:52,570
It is going to be upper case in this context, it is going to be Lorqess.

74
00:04:53,110 --> 00:04:53,780
Very simple.

75
00:04:54,190 --> 00:04:55,810
So now let's grab this type.

76
00:04:58,540 --> 00:05:05,320
Let's put it right here as well, but this is not a template literal, so let's convert it to that and

77
00:05:05,320 --> 00:05:06,370
this tactic.

78
00:05:06,460 --> 00:05:08,050
So let's do that.

79
00:05:08,230 --> 00:05:15,070
And we can see that all the three parameters, they have been passed inside the code because the strength

80
00:05:15,070 --> 00:05:21,330
lost for all of our cases, it's going to be five percent in the case of less than two.

81
00:05:21,520 --> 00:05:23,860
And in the case of zero, it's going to be 20 percent.

82
00:05:23,860 --> 00:05:24,860
We don't change that.

83
00:05:25,210 --> 00:05:27,610
So now we don't need all this code here.

84
00:05:29,330 --> 00:05:30,220
What do we need here?

85
00:05:30,560 --> 00:05:32,880
We are not going to need all this code here as well.

86
00:05:32,900 --> 00:05:35,300
You can see that how much simpler this is.

87
00:05:35,780 --> 00:05:42,020
The only thing that we need here is just to call this character type assessment function, character

88
00:05:42,020 --> 00:05:47,990
type assessment function and pass in three arguments because we have three parameters.

89
00:05:47,990 --> 00:05:49,180
We need three arguments.

90
00:05:49,610 --> 00:05:51,010
So what is the first argument?

91
00:05:51,020 --> 00:05:53,430
We know that it is password, right?

92
00:05:53,480 --> 00:05:55,730
So the first one, it is going to be password.

93
00:05:57,880 --> 00:06:00,250
And then the second one says it should be ready.

94
00:06:01,030 --> 00:06:03,490
So what is the regular expression for this?

95
00:06:03,820 --> 00:06:06,250
Let's passino regular expression right here.

96
00:06:06,430 --> 00:06:12,370
So for the lower case, we go A to Z and we grab all occurrences of that.

97
00:06:13,450 --> 00:06:15,280
And what is the third one?

98
00:06:15,640 --> 00:06:16,870
Which is the assessment.

99
00:06:17,230 --> 00:06:24,760
So in case this character, this is called in the context of lower case, we should say password has

100
00:06:24,760 --> 00:06:27,250
no lower case characters.

101
00:06:27,250 --> 00:06:33,400
So I'm just going to pass in a string lower case characters.

102
00:06:34,640 --> 00:06:40,540
And I'm going to do the same thing for this one, except this one is going to be the same.

103
00:06:40,550 --> 00:06:42,260
But what about the regular expression?

104
00:06:42,260 --> 00:06:44,150
The regular expression is going to be different.

105
00:06:44,480 --> 00:06:50,270
This regular expression is it is an argument is going to be passed here and then it is going to be part

106
00:06:50,270 --> 00:06:51,110
right here.

107
00:06:51,380 --> 00:06:55,930
And then this entire character type assessment is going to convert to uppercase.

108
00:06:56,960 --> 00:07:00,050
So let's change this to uppercase.

109
00:07:00,350 --> 00:07:03,410
See, we have we call this function multiple times.

110
00:07:04,040 --> 00:07:04,880
It's very simple.

111
00:07:05,210 --> 00:07:07,700
And now you can see this code is much cleaner.

112
00:07:08,240 --> 00:07:10,790
And now let's check it out, see if I do one, too.

113
00:07:12,710 --> 00:07:13,730
We get.

114
00:07:15,380 --> 00:07:17,040
Password is too short.

115
00:07:17,060 --> 00:07:24,320
Why don't we get this uppercase characters we have called this character type function?

116
00:07:26,510 --> 00:07:33,080
We should get that so is our regular expression, oh, this should be inside brackets, certainly not

117
00:07:33,080 --> 00:07:36,030
curly braces, just inside brackets.

118
00:07:37,100 --> 00:07:39,920
Let's put this one inside brackets as well.

119
00:07:40,460 --> 00:07:45,620
So now if I say one, two, it is still going to give me that.

120
00:07:46,850 --> 00:07:53,800
So now let's see if if these functions are being called at all, so I'm going to say concern of lock

121
00:07:54,410 --> 00:07:55,280
one, two, three.

122
00:07:55,290 --> 00:07:58,880
I'm going to say uppercase, uppercase.

123
00:08:00,150 --> 00:08:07,080
And for this one, we are going to say console does log lowercase.

124
00:08:08,420 --> 00:08:18,500
So if I yeah, we do call them uppercase and lowercase, so it's this character match an assessment

125
00:08:18,500 --> 00:08:21,370
P W.D. and, uh.

126
00:08:21,720 --> 00:08:22,030
Hmm.

127
00:08:23,330 --> 00:08:25,570
We should call it here.

128
00:08:26,450 --> 00:08:28,640
I'm not sure what's wrong in here.

129
00:08:29,240 --> 00:08:34,250
So it is going to be called here and we do call it here.

130
00:08:34,250 --> 00:08:36,830
But this message is not being printed out.

131
00:08:37,789 --> 00:08:46,430
So if I were to say character match password, I think that's because it's CONSED, it doesn't let it

132
00:08:46,640 --> 00:08:47,450
change it.

133
00:08:48,660 --> 00:08:51,660
So Consed.

134
00:08:52,880 --> 00:09:01,700
Save it to still get upper case and the events are firing, but we and these functions are firing,

135
00:09:01,700 --> 00:09:07,110
but there is something missing in here and I'm not sure what it is that I am missing.

136
00:09:07,670 --> 00:09:14,780
So we do we do have our brackets character match.

137
00:09:17,090 --> 00:09:18,880
It is not being called here.

138
00:09:20,010 --> 00:09:22,560
Character match does length and.

139
00:09:25,760 --> 00:09:31,640
All right, so this council log works, so.

140
00:09:32,810 --> 00:09:34,700
Wee wee, wee, wee, wee, it worked.

141
00:09:34,740 --> 00:09:40,340
So what I'm going to do is I'm just going to get rid of this council log and this one and.

142
00:09:43,070 --> 00:09:51,380
I'm going to log this character much as well so it becomes a log character match and I'm going to convert

143
00:09:51,380 --> 00:09:54,320
this back to CONSED because we didn't have any error.

144
00:09:55,650 --> 00:10:02,160
That's like this, so if I do want to, because the regular expression does not match, we get an empty

145
00:10:02,160 --> 00:10:02,490
array.

146
00:10:03,910 --> 00:10:06,120
But what of the regular expression matches?

147
00:10:06,150 --> 00:10:13,440
So if I say, Ben, we can see that we get this lower case, so this function is working properly.

148
00:10:13,450 --> 00:10:15,040
But the problem is with this.

149
00:10:16,540 --> 00:10:19,940
With this return object, this return object doesn't work.

150
00:10:20,350 --> 00:10:26,530
This part works, this this if statement doesn't work, we know that much because we can see the lower

151
00:10:26,530 --> 00:10:26,920
case.

152
00:10:26,920 --> 00:10:30,910
And if I do see video, we can see the upper case as well.

153
00:10:30,920 --> 00:10:37,660
So it is grabbing it and putting it inside this character, much of this array, but it is not calling

154
00:10:37,660 --> 00:10:37,890
it.

155
00:10:38,230 --> 00:10:45,660
So if I come here, we have called the function here and the function is called here.

156
00:10:46,420 --> 00:10:49,150
But so what what what does this function do?

157
00:10:49,570 --> 00:10:51,250
This function is just calling it.

158
00:10:51,310 --> 00:10:52,250
This is not correct.

159
00:10:52,450 --> 00:10:54,280
We need to return this function.

160
00:10:54,730 --> 00:10:55,120
All right.

161
00:10:55,120 --> 00:10:58,450
So let's return it, because this function should do something.

162
00:10:58,450 --> 00:11:00,180
We want to return that function.

163
00:11:00,730 --> 00:11:05,400
So let's save it and let's do who.

164
00:11:05,770 --> 00:11:15,870
And now we get our no uppercase characters because we have to now because we have two lower case characters.

165
00:11:15,880 --> 00:11:21,150
It says it could use more lowercase characters and Password has no uppercase characters.

166
00:11:21,160 --> 00:11:28,090
If I said W.H, then it is going to have it must have more lowercase characters and it must have more

167
00:11:28,090 --> 00:11:29,260
uppercase characters.

168
00:11:29,560 --> 00:11:35,200
And I could say like we and we and now it says it could be longer.

169
00:11:35,200 --> 00:11:42,760
And now we can see that if I increase, if I remove this or add to it, you can see that how the strength

170
00:11:42,760 --> 00:11:44,300
is is changing.

171
00:11:44,830 --> 00:11:45,180
All right.

172
00:11:45,280 --> 00:11:50,650
So the problem was, was with this one, with this keyword, that we didn't return anything from the

173
00:11:50,650 --> 00:11:51,090
function.

174
00:11:51,400 --> 00:11:53,970
Basically, the function didn't do anything.

175
00:11:54,130 --> 00:11:57,520
It just invoked this function and didn't do anything else.

176
00:11:58,060 --> 00:12:04,420
The function didn't pass these lowercase D parameters, the regular expression, this one and this password

177
00:12:04,630 --> 00:12:05,620
didn't do anything.

178
00:12:05,850 --> 00:12:08,020
The function just called this function.

179
00:12:08,560 --> 00:12:12,010
But we need to return it so it does actually something.

180
00:12:12,040 --> 00:12:12,390
All right.

181
00:12:12,730 --> 00:12:14,170
So that's it for this lecture.

182
00:12:14,170 --> 00:12:20,800
In the next lecture, we are going to wrap this project up by completing the numbers and special and

183
00:12:20,800 --> 00:12:22,400
repeat character assessments.

184
00:12:22,690 --> 00:12:23,950
See you guys then.

