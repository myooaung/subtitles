WEBVTT
1
00:00:02.029 --> 00:00:02.930
Hi, everyone.

2
00:00:03.170 --> 00:00:07.610
In this lecture, we're going to talk about the function scope and the EFFI pattern.

3
00:00:08.910 --> 00:00:13.890
All right, so before starting this lecture, I'm just going to provide some space, a lot of space,

4
00:00:14.310 --> 00:00:18.580
and we are talking we are going to talk about a scenario.

5
00:00:18.600 --> 00:00:18.960
All right.

6
00:00:19.140 --> 00:00:25.470
So, for example, you are like a senior developer in a in a company like in a big company.

7
00:00:25.540 --> 00:00:25.800
Right.

8
00:00:26.110 --> 00:00:28.980
And you have this entire application, right.

9
00:00:29.160 --> 00:00:33.630
That you are managing and you're working on that belongs to a specific company.

10
00:00:34.590 --> 00:00:34.920
All right.

11
00:00:35.220 --> 00:00:39.090
And for example, your group hires a junior developer.

12
00:00:39.120 --> 00:00:39.510
Right.

13
00:00:39.810 --> 00:00:43.950
And you have created this is like a very, very simple example.

14
00:00:43.950 --> 00:00:45.930
And I'm trying to prove a point here.

15
00:00:46.530 --> 00:00:48.840
And you have created a variable.

16
00:00:49.500 --> 00:00:52.920
The identifier is a teacher and you have assigned a value to it.

17
00:00:52.920 --> 00:00:56.730
And based on that, you have run a certain piece of code.

18
00:00:56.810 --> 00:00:57.060
Right.

19
00:00:57.390 --> 00:01:04.920
But in between your application, because the junior developer doesn't really like he doesn't know.

20
00:01:04.920 --> 00:01:08.330
Maybe he doesn't know or maybe he didn't see this teacher.

21
00:01:08.760 --> 00:01:18.330
He creates another teacher variable and assigns it to what assigns it to, let's say, Jack.

22
00:01:18.780 --> 00:01:19.060
Right.

23
00:01:20.190 --> 00:01:25.880
We know that whenever we we run our original code, we would see inside the console, Tom.

24
00:01:26.070 --> 00:01:28.650
And now if you run it, we are going to see Jack.

25
00:01:28.960 --> 00:01:31.770
We can go ahead and log this as well.

26
00:01:33.680 --> 00:01:42.200
And I'm just going to say, teacher, before that, what I want to do is I want to come in to file preferences,

27
00:01:42.230 --> 00:01:46.010
settings, format on save.

28
00:01:47.160 --> 00:01:54.460
On safe, yeah, it is not it shouldn't formatted unsafe because the prettier is disabled.

29
00:01:54.480 --> 00:01:54.720
Yeah.

30
00:01:55.230 --> 00:01:59.310
So if I were to comment this out, we can see that it says Tom in here.

31
00:01:59.610 --> 00:02:08.430
But when by mistake or accidentally we go ahead or a person goes ahead and defines another variable,

32
00:02:08.639 --> 00:02:17.090
the assignment, this this expression is going to replace this one because they're within the same scope.

33
00:02:17.400 --> 00:02:19.350
So how can we solve this problem?

34
00:02:19.650 --> 00:02:24.820
Well, the first solution that comes to our mind is just go ahead and wrap it inside a function so we

35
00:02:24.820 --> 00:02:28.980
can go ahead and we create a function and we say another teacher.

36
00:02:30.070 --> 00:02:30.540
Right.

37
00:02:30.540 --> 00:02:32.430
And we put the code in here.

38
00:02:33.000 --> 00:02:40.650
But the problem with this is that this another teacher is still this is still inside this global school.

39
00:02:41.010 --> 00:02:43.800
So we can still access this VA teacher.

40
00:02:44.020 --> 00:02:44.380
Right.

41
00:02:45.420 --> 00:02:50.730
So what I'm going to do is I'm just going to go ahead and say I'm going to call this teacher, another

42
00:02:50.730 --> 00:02:53.400
teacher, and we are just going to call it.

43
00:02:53.400 --> 00:02:59.000
And it says it says, first off, we are going to see Jack and then we are going to see it tongue.

44
00:02:59.550 --> 00:03:06.330
But but another way, actually a better way is that before going into that, I just want to explain

45
00:03:06.330 --> 00:03:12.570
to you guys that this function name or the function identifier, which is written here, it points to

46
00:03:12.570 --> 00:03:13.290
this function.

47
00:03:13.470 --> 00:03:19.350
It calls this function, but this parentheses is what executes the function.

48
00:03:19.620 --> 00:03:24.340
Executing the function means that we run the code inside the function.

49
00:03:24.690 --> 00:03:30.270
So there is another pattern that we can use here is that just go ahead and put it inside parentheses

50
00:03:30.630 --> 00:03:33.420
in here and this code is going to run.

51
00:03:33.420 --> 00:03:36.430
It might look weird to you, but this is going to run.

52
00:03:36.690 --> 00:03:39.360
So if I just save it, we can see our results here.

53
00:03:39.840 --> 00:03:47.760
But if we go ahead and put the function call in here, why not put the entire function in here?

54
00:03:48.940 --> 00:03:53.740
All right, so I'm just going to go ahead and I'm going to put the entire function in here and we are

55
00:03:53.740 --> 00:03:56.170
going to call it and we can see the result is the same.

56
00:03:56.170 --> 00:03:57.090
We get Jack.

57
00:03:57.760 --> 00:03:59.430
Now, why should we do this?

58
00:03:59.800 --> 00:04:04.800
This is because we want to avoid any naming collisions inside our software.

59
00:04:04.910 --> 00:04:05.230
Right.

60
00:04:05.500 --> 00:04:15.040
And there is actually the principle of least exposure, also called the principle of of at least privileged

61
00:04:15.670 --> 00:04:23.440
privilege in software engineering that says you should default to keeping everything private and only

62
00:04:23.440 --> 00:04:26.060
exposing the minimal necessary.

63
00:04:26.320 --> 00:04:31.390
This is one of the core principles of software engineering.

64
00:04:31.540 --> 00:04:38.740
It is a defensive approach that says, I do not want my stuff to be available to avoid these kinds of

65
00:04:38.740 --> 00:04:39.470
problems.

66
00:04:39.490 --> 00:04:39.810
All right.

67
00:04:40.180 --> 00:04:44.090
The function name was called the function, right?

68
00:04:44.740 --> 00:04:50.820
This is going to call the function and this parenthesis, this is going to execute the function.

69
00:04:50.830 --> 00:04:51.170
Right.

70
00:04:51.430 --> 00:04:55.840
So this this person sorry, this parenthesis right here, it is going to execute the function.

71
00:04:56.320 --> 00:04:59.970
Now, this is no longer a function declaration.

72
00:04:59.980 --> 00:05:03.140
It is a function expression, no syntax.

73
00:05:03.140 --> 00:05:10.270
Syntactically, the difference between a function declaration and a function expression is that function

74
00:05:10.270 --> 00:05:19.690
declarations in their statement, the first word, like literally the first word is function.

75
00:05:20.530 --> 00:05:20.850
All right.

76
00:05:21.160 --> 00:05:30.730
But as far as function expressions are concerned, if the first word is anything apart or aside from

77
00:05:30.730 --> 00:05:36.280
function, then that expression, that function is going to be a function expression.

78
00:05:36.670 --> 00:05:43.170
So the the job of these two parentheses that we added here, one at the start of the function and one

79
00:05:43.180 --> 00:05:50.320
at the end of the function is they don't do anything else but to convert this function declaration into

80
00:05:50.320 --> 00:05:51.490
a function expression.

81
00:05:52.030 --> 00:05:58.660
And whenever they convert it and we pass the parentheses in front of it, we want to immediately call

82
00:05:58.660 --> 00:05:59.300
this function.

83
00:05:59.530 --> 00:06:03.880
So without a function call, we immediately invoke this function.

84
00:06:04.180 --> 00:06:07.310
Invoking a function or calling a function is the same thing.

85
00:06:07.690 --> 00:06:12.460
So this is an immediately invoked function expression.

86
00:06:12.970 --> 00:06:14.500
And what is the benefit of this?

87
00:06:14.860 --> 00:06:22.330
The benefit of this function expression is that we have no, we don't we don't have any access to this

88
00:06:22.330 --> 00:06:22.840
function.

89
00:06:22.840 --> 00:06:25.300
This function runs once and that's it.

90
00:06:26.470 --> 00:06:28.680
We cannot access this function anymore.

91
00:06:28.930 --> 00:06:36.550
So if I were to go ahead and to write another teacher and call it, we are going to see a unanchored

92
00:06:36.550 --> 00:06:42.300
reference or it says another teacher is not defined even though it is defined.

93
00:06:42.550 --> 00:06:44.260
But this is not accessible.

94
00:06:45.350 --> 00:06:49.820
All right, because this another teacher.

95
00:06:51.140 --> 00:06:57.770
It's actually a function is an immediately invoked function expression, and the job of these function

96
00:06:57.780 --> 00:07:04.940
expressions is that they should run and go away, go away and never run again or or be called again.

97
00:07:05.240 --> 00:07:07.610
OK, that's why we use it.

98
00:07:08.000 --> 00:07:08.350
Right.

99
00:07:09.170 --> 00:07:13.270
So I can show you another example of this as well.

100
00:07:13.280 --> 00:07:22.010
So if you were to have like, for example, if you were to have parameters for this function, where

101
00:07:22.010 --> 00:07:27.920
would you you might ask, OK, if we have a parameter here, where should we pass and the argument for

102
00:07:27.920 --> 00:07:28.660
that parameter.

103
00:07:28.880 --> 00:07:36.080
So I'm just going to go ahead and I'm going to create name num square and I'm going to pass an X, right.

104
00:07:36.080 --> 00:07:38.390
And in here here is our function body.

105
00:07:38.460 --> 00:07:40.260
This is where we execute the function.

106
00:07:40.670 --> 00:07:49.560
So in here, what I want to do is I want to say console does log X times X.

107
00:07:50.150 --> 00:07:50.510
All right.

108
00:07:50.750 --> 00:07:52.310
So this is our parameter.

109
00:07:52.310 --> 00:07:54.680
Where where do we pass?

110
00:07:54.680 --> 00:08:01.080
And the argument the argument is always passed inside the parentheses where the function is called.

111
00:08:01.370 --> 00:08:09.230
So if we were to have a normal function here that we would call NUM Square and we would pass X and we

112
00:08:09.230 --> 00:08:20.060
would say cancel dot log X, oops X times X, and then we would call the function here name Square,

113
00:08:20.420 --> 00:08:23.750
but we would not pass the value inside the function call.

114
00:08:23.990 --> 00:08:27.770
We would pass the value inside the function, executable parentheses.

115
00:08:28.040 --> 00:08:29.400
We would pass in five.

116
00:08:29.600 --> 00:08:34.909
So where are these parentheses and this function in this Effi, where are they?

117
00:08:35.179 --> 00:08:36.350
They are right here.

118
00:08:36.380 --> 00:08:40.970
So in here we are just going to go ahead and pass and fight and I'm just going to remove that code.

119
00:08:41.120 --> 00:08:42.289
And when I say it.

120
00:08:44.340 --> 00:08:47.580
OK, we should see.

121
00:08:47.610 --> 00:09:00.690
So this is Kansa Log Function Square, we have X times X and this is where we pass in our uncute is

122
00:09:00.690 --> 00:09:08.390
not a function of intermediate value, intermediate value, this type or where is the problem in here?

123
00:09:08.910 --> 00:09:10.380
So we have our function.

124
00:09:10.720 --> 00:09:16.910
Right, and the function is inside these parentheses and it is named Square.

125
00:09:16.920 --> 00:09:23.010
We have X here and we want to console, we want to log to the console X times X.

126
00:09:25.590 --> 00:09:27.060
All right, so.

127
00:09:30.020 --> 00:09:37.970
We have a function, we have a variable here, we have a function in here, and we have a function here,

128
00:09:38.600 --> 00:09:39.110
you know what?

129
00:09:39.110 --> 00:09:47.570
What I'm going to do is I'm just going to go ahead and I'm going to grab our format and say, OK, I'm

130
00:09:47.570 --> 00:09:49.370
going to I'm just going to turn on.

131
00:09:49.370 --> 00:09:56.680
Maybe there is a there we do have a type and I cannot find out where that paper is coming from.

132
00:09:57.080 --> 00:10:01.940
So we have mistyped something and I and I can see what that is or.

133
00:10:02.050 --> 00:10:02.200
Right.

134
00:10:02.260 --> 00:10:02.980
I'm just going to say.

135
00:10:03.300 --> 00:10:04.580
Oh right.

136
00:10:04.580 --> 00:10:05.280
What is this.

137
00:10:05.780 --> 00:10:08.230
So these ought to be two different functions.

138
00:10:08.570 --> 00:10:10.780
The first function, it ends right here.

139
00:10:10.790 --> 00:10:14.900
So I have to put in a semicolon there and just hit enter and serve it.

140
00:10:14.900 --> 00:10:16.990
And now we can see that this function runs.

141
00:10:17.480 --> 00:10:21.820
So whenever you want to pass and I just had my picture turned off.

142
00:10:21.830 --> 00:10:26.630
Now the prettier is turned on once more because I had a type error.

143
00:10:26.630 --> 00:10:28.910
So I knew that there was a problem.

144
00:10:28.910 --> 00:10:30.120
There is something missing.

145
00:10:30.470 --> 00:10:32.330
OK, that's why we have typesetters.

146
00:10:32.330 --> 00:10:37.970
All right, so if you miss a semicolon or you miss a parentheses, you're going to have type error.

147
00:10:39.140 --> 00:10:41.190
And this five is the argument.

148
00:10:41.210 --> 00:10:43.700
It is going to be passed here.

149
00:10:43.700 --> 00:10:50.270
And and eventually this council log is going to reference that and we are going to end up with twenty

150
00:10:50.270 --> 00:10:50.690
five.

151
00:10:51.770 --> 00:10:56.030
So this is going to be it for our function scope and the EFFI pattern.

152
00:10:56.030 --> 00:10:57.590
This is one of the used cases.

153
00:10:57.920 --> 00:11:05.450
The pattern is used whenever we want to hide something that is not accessible outside that function

154
00:11:05.630 --> 00:11:08.460
and we want to immediately run that function.

155
00:11:08.780 --> 00:11:13.570
So this function is going to be is going to run whenever we reload the page.

156
00:11:13.580 --> 00:11:15.530
So I reload.

157
00:11:16.100 --> 00:11:17.450
This function is going to run.

158
00:11:17.570 --> 00:11:17.900
Right.

159
00:11:18.350 --> 00:11:20.240
So this is going to be it for this lecture.

160
00:11:20.270 --> 00:11:22.060
See you guys in the next one.

