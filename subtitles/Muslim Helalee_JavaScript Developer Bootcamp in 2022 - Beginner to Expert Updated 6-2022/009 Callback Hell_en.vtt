WEBVTT
1
00:00:01.850 --> 00:00:02.910
Hi, everyone.

2
00:00:02.930 --> 00:00:10.430
In this letter, we're going to talk about the callback hell, all right, so in the e-mail, what we

3
00:00:10.430 --> 00:00:14.480
have is we have a button that is that says get questions.

4
00:00:14.720 --> 00:00:16.990
We have a container which we do not need.

5
00:00:17.000 --> 00:00:18.470
So I'm just going to get rid of it.

6
00:00:19.010 --> 00:00:24.110
And we have some styling for the buttons and styling for the paragraph in L.A., which I'm just going

7
00:00:24.110 --> 00:00:30.390
to go ahead and remove it because we are just going to go and take a look at the data inside the console.

8
00:00:30.410 --> 00:00:32.630
We are not going to print anything to the screen.

9
00:00:33.140 --> 00:00:35.960
It just says that the getData function is not defined.

10
00:00:35.960 --> 00:00:40.730
So I'm just going to change get data to questions because that is more appropriate.

11
00:00:41.060 --> 00:00:42.790
Now, what do we want to do in this lecture?

12
00:00:42.800 --> 00:00:45.230
In this lecture, I've added this folder here.

13
00:00:45.470 --> 00:00:46.670
It says questions.

14
00:00:46.850 --> 00:00:51.200
And inside these questions, we still have all those 10 questions.

15
00:00:51.740 --> 00:00:54.800
But I've separated them into five files.

16
00:00:55.310 --> 00:00:55.610
Right.

17
00:00:55.820 --> 00:00:59.770
So question one, two, three, four, five, six, seven, eight and nine, 10.

18
00:01:00.080 --> 00:01:06.170
So if you click on it, instead of having all 10 questions in one folder, I have separated them.

19
00:01:06.380 --> 00:01:15.320
Sorry, in one file I have separated them in multiple files to mimic making API, making requests to

20
00:01:15.320 --> 00:01:16.940
multiple API endpoints.

21
00:01:17.190 --> 00:01:19.110
I just want to mimic that behavior.

22
00:01:19.460 --> 00:01:21.300
So what would you do in that case?

23
00:01:21.340 --> 00:01:25.280
So first off, let's go ahead and let's define the function, get questions.

24
00:01:26.200 --> 00:01:27.290
All right.

25
00:01:27.290 --> 00:01:31.420
And of course, we are going to be using our callback functions.

26
00:01:31.940 --> 00:01:32.330
All right.

27
00:01:32.330 --> 00:01:34.770
Our callback function that we have talked about.

28
00:01:35.030 --> 00:01:40.010
So first off, let's go ahead and let's create that function expression.

29
00:01:40.010 --> 00:01:44.930
And I'm going to say get questions, data.

30
00:01:46.550 --> 00:01:54.170
And I'm going to pass and call back as a parameter, right, and now what are the first steps to making

31
00:01:54.180 --> 00:01:55.470
any request?

32
00:01:55.820 --> 00:01:56.900
Step number one.

33
00:01:57.900 --> 00:01:58.800
Const.

34
00:02:01.950 --> 00:02:04.920
Oh, I miss this Arace.

35
00:02:05.990 --> 00:02:11.760
All right, so step number one is when we instantiate in New York City our object.

36
00:02:11.770 --> 00:02:17.640
So I'm just going to say data and I'm going to say new X amount ETP request.

37
00:02:18.240 --> 00:02:19.440
This is step number one.

38
00:02:19.440 --> 00:02:26.000
Step number two is to provide or to set up the request to create that request.

39
00:02:26.400 --> 00:02:28.410
So we are going to DataDot open.

40
00:02:30.440 --> 00:02:37.170
And first, what is the HTP method that is get now we are making requests to our local files?

41
00:02:37.200 --> 00:02:44.840
All right, so this is the this is the source or you are URL or request your URL that we are going to

42
00:02:44.840 --> 00:02:45.280
provide.

43
00:02:45.710 --> 00:02:51.980
But there is a difference here because we are making requests to multiple API endpoints or in this case,

44
00:02:52.310 --> 00:02:54.890
multiple JSON files at the same time.

45
00:02:55.730 --> 00:02:58.430
I cannot just go ahead and hard code one of them.

46
00:02:59.000 --> 00:03:04.550
We need to come up with a way so we can grab each one of them and make a request to each one of them

47
00:03:04.940 --> 00:03:05.810
individually.

48
00:03:06.020 --> 00:03:09.440
So I'm just going to provide in here are questions, right?

49
00:03:09.560 --> 00:03:14.400
I'm just going to say questions and I'm going to provide true for asynchronous programming.

50
00:03:14.810 --> 00:03:19.390
Now, this questions is also going to be Pastan with this callbacks.

51
00:03:19.390 --> 00:03:21.260
So I'm just going to say questions.

52
00:03:22.160 --> 00:03:27.460
And based on this questions, we are going to misspell it.

53
00:03:28.340 --> 00:03:35.300
And based on the questions, we are going to provide the resource sorry, the source for these questions,

54
00:03:35.510 --> 00:03:38.490
whenever we call this get questions data.

55
00:03:38.900 --> 00:03:43.550
OK, when we are done with this, you remember in the previous lecture we called it and in the function

56
00:03:43.550 --> 00:03:47.330
call we passed the callback functions definition.

57
00:03:47.650 --> 00:03:48.050
Right.

58
00:03:48.170 --> 00:03:49.300
And we are going to do that.

59
00:03:49.580 --> 00:03:58.760
Now, the third step is to make sure that we have a status of 200 and to also print out the error if

60
00:03:58.760 --> 00:03:59.450
there is an error.

61
00:03:59.450 --> 00:04:02.100
So we are going to data that a listener.

62
00:04:02.540 --> 00:04:07.910
We are going to listen for a real estate change.

63
00:04:07.910 --> 00:04:11.360
Kind of forgot the name Redis State Change.

64
00:04:12.350 --> 00:04:21.920
All right, and we are going to run a function here, so if the this DOT's status, this part, we have

65
00:04:21.920 --> 00:04:22.490
done a lot.

66
00:04:22.500 --> 00:04:31.280
So I'm just going to breeze over it and we have this ready state equals to four.

67
00:04:31.640 --> 00:04:32.780
So what do we want to do?

68
00:04:32.960 --> 00:04:36.850
We want to, of course, grab our data and we want to pass it as well.

69
00:04:36.860 --> 00:04:38.900
We just want to grab data which is readable.

70
00:04:39.120 --> 00:04:39.630
James.

71
00:04:40.070 --> 00:04:42.730
So I'm going to say questions right.

72
00:04:43.250 --> 00:04:47.030
ReFED and I'm going to say Jason Dirt pass.

73
00:04:47.450 --> 00:04:48.860
Jason should pass what?

74
00:04:48.860 --> 00:04:50.520
It should pass data.

75
00:04:51.140 --> 00:04:56.360
I'm just going to say this DOT response text, we can do this, the response text as well.

76
00:04:56.810 --> 00:05:00.980
Now, here is where I'm going to call our callback function for the error.

77
00:05:01.130 --> 00:05:08.060
I'm going to pass an undefined and for the data we're going to pass in questions retrieved and al-assaf

78
00:05:09.740 --> 00:05:14.720
out of this dot ready state equals four.

79
00:05:15.860 --> 00:05:16.780
What do we want to do?

80
00:05:17.000 --> 00:05:19.160
We want to call our callback function.

81
00:05:20.560 --> 00:05:25.180
And we are going to say error fetching data.

82
00:05:26.120 --> 00:05:30.510
And as far as the data is concerned, it is this stage and defined.

83
00:05:31.400 --> 00:05:31.760
All right.

84
00:05:31.770 --> 00:05:39.080
So we are done with the when we are done with this third stage, which is the stage, when we get the

85
00:05:39.080 --> 00:05:40.820
data, what do we want to do with that?

86
00:05:40.830 --> 00:05:41.480
So let's.

87
00:05:43.040 --> 00:05:44.210
Aerojet date.

88
00:05:46.310 --> 00:05:47.790
Where is it coming from?

89
00:05:48.080 --> 00:05:50.060
Call back in.

90
00:05:52.110 --> 00:05:54.590
Better get data stick.

91
00:05:54.640 --> 00:05:55.530
Look at this.

92
00:05:57.320 --> 00:05:58.070
Oh, I hope so.

93
00:05:58.130 --> 00:05:59.250
I didn't see this.

94
00:05:59.870 --> 00:06:03.630
So now it's gone within, we don't need to go there.

95
00:06:03.660 --> 00:06:04.430
Response.

96
00:06:04.470 --> 00:06:05.550
Oh, come on, buddy.

97
00:06:06.140 --> 00:06:06.590
All right.

98
00:06:06.590 --> 00:06:08.540
So we are done with this now.

99
00:06:08.540 --> 00:06:10.290
We are going to move on and on.

100
00:06:10.310 --> 00:06:12.680
One final thing is DataDot.

101
00:06:12.920 --> 00:06:14.470
So let's send the request.

102
00:06:15.320 --> 00:06:21.460
So now we need to call this get questions, data, and we need to define our callback function as well.

103
00:06:21.740 --> 00:06:23.570
So I'm going to come down here now.

104
00:06:23.570 --> 00:06:28.550
This is where the callback hell starts to take shape.

105
00:06:28.880 --> 00:06:29.180
All right.

106
00:06:29.190 --> 00:06:32.150
So we are going to say get questions, data.

107
00:06:32.930 --> 00:06:38.000
We are going to call it now inside the function called, we are going to define our callback function.

108
00:06:38.240 --> 00:06:39.680
So we are going to say error.

109
00:06:39.890 --> 00:06:41.930
The first parameter is going to be error.

110
00:06:42.350 --> 00:06:45.230
The second parameter is going to be questions.

111
00:06:47.960 --> 00:06:49.970
Questions, data.

112
00:06:51.150 --> 00:06:51.820
Questions.

113
00:06:52.070 --> 00:06:55.800
Now, there is something else in here as well, and that is the questions.

114
00:06:55.980 --> 00:06:59.700
So we need to arguments because here we have two parameters.

115
00:07:00.000 --> 00:07:04.080
So this is this part belongs to this call back.

116
00:07:04.110 --> 00:07:05.250
What about this function?

117
00:07:05.550 --> 00:07:06.720
What about these questions?

118
00:07:06.720 --> 00:07:09.180
Because we said we need to provide the source for that.

119
00:07:09.450 --> 00:07:15.060
So what I'm going to do is I'm just going to provide a comma there and in here, I'm going to provide

120
00:07:15.060 --> 00:07:20.860
the path for this questions and this path, because this is the argument.

121
00:07:20.880 --> 00:07:24.510
It is going to be passed here and from the here.

122
00:07:24.510 --> 00:07:28.600
Whenever we make an EPA request, it is going to be passed here.

123
00:07:28.770 --> 00:07:35.290
So that path is eventually going to come right here where we say we set up the request.

124
00:07:35.640 --> 00:07:37.530
So first off, what is the path?

125
00:07:37.710 --> 00:07:41.550
The path works with any other path that we have covered so far.

126
00:07:41.850 --> 00:07:44.730
First off, we need to go inside the questions folder.

127
00:07:45.000 --> 00:07:49.160
So I'm going to say I'm going to say questions.

128
00:07:49.320 --> 00:07:51.850
So now we are inside the questions for Foja.

129
00:07:52.020 --> 00:07:53.920
And from there, I need to grab the four.

130
00:07:53.950 --> 00:07:59.250
I'm going to grab the first one so I could just go ahead and say, can I rename this file?

131
00:08:00.360 --> 00:08:06.220
I could just say, copy it and put it right here so you really understand what we are doing here.

132
00:08:06.630 --> 00:08:12.600
So this is the first argument for questions and this is the second argument for callback.

133
00:08:13.020 --> 00:08:14.010
Very simple, right?

134
00:08:15.330 --> 00:08:17.770
So in here, what do we want to do?

135
00:08:17.790 --> 00:08:27.280
I just want to print the questions data so we could say console the log questions data.

136
00:08:27.840 --> 00:08:31.320
So now we have grabbed our first file.

137
00:08:31.710 --> 00:08:32.980
What about the second one?

138
00:08:33.289 --> 00:08:37.760
Now this is where things get interesting and things get really, really messy.

139
00:08:38.100 --> 00:08:43.870
So the second part is going to be the second callback function.

140
00:08:43.890 --> 00:08:48.780
Now, the first callback function is going to grab this YORO, and it is going to make a request to

141
00:08:48.780 --> 00:08:49.500
this YAARA.

142
00:08:49.830 --> 00:08:54.900
The second callback function is going to make a request to another you.

143
00:08:55.200 --> 00:08:59.260
So we need to create another instance of that callback function.

144
00:08:59.790 --> 00:09:00.110
All right.

145
00:09:00.300 --> 00:09:07.050
But the thing is, whenever you want to create you want to make another instance of that callback function,

146
00:09:07.740 --> 00:09:14.760
you need to call this question's data once more because that callback function is created in the in

147
00:09:14.760 --> 00:09:18.050
the function call for this get questions data.

148
00:09:18.060 --> 00:09:22.350
So I'm going to say get now, keep in mind that they should be inside.

149
00:09:22.350 --> 00:09:25.440
If you go outside this question's data, it is not going to work.

150
00:09:25.770 --> 00:09:28.330
It is actually going to override one another.

151
00:09:28.620 --> 00:09:34.230
So inside this, you can see this is where this question, this original questions data is going to

152
00:09:34.230 --> 00:09:35.340
end right here.

153
00:09:35.700 --> 00:09:37.370
But we are not going to go outside it.

154
00:09:37.380 --> 00:09:38.370
We are going to go inside.

155
00:09:38.370 --> 00:09:43.010
And I can see this sort of like training that is going to happen here.

156
00:09:43.020 --> 00:09:45.300
So we are going to say get questions, data.

157
00:09:45.570 --> 00:09:50.160
And again, here, I'm going to just go ahead and copy this.

158
00:09:51.030 --> 00:09:53.310
I'm going to pass it here and now.

159
00:09:53.310 --> 00:09:56.520
This time it is questions three and four.

160
00:09:56.670 --> 00:09:58.770
So this time it is a different era.

161
00:09:59.130 --> 00:10:03.810
And again, for the callback, we need to define callback one more once more.

162
00:10:04.290 --> 00:10:04.700
All right.

163
00:10:04.700 --> 00:10:06.840
So I'm going to say questions, data.

164
00:10:09.210 --> 00:10:13.700
And we just want to counsel our questions straight, so I'm just going to put it right here.

165
00:10:14.190 --> 00:10:16.860
No, you can see that how messy this can get.

166
00:10:17.010 --> 00:10:22.710
I'm not going to save it for now because the prettier code for my is going to rearrange everything.

167
00:10:23.010 --> 00:10:30.690
So I could just go ahead and disable that for now from it and save just going to grab the tick mark

168
00:10:30.690 --> 00:10:31.110
off.

169
00:10:31.440 --> 00:10:31.800
All right.

170
00:10:31.810 --> 00:10:37.410
So I'm going to come down here, but still inside this, we are going to make a request to the other

171
00:10:37.410 --> 00:10:38.580
Eurail that we have.

172
00:10:38.590 --> 00:10:43.590
So I'm going to say get questions, data.

173
00:10:45.700 --> 00:10:55.690
Let's pass this end and this time because we got three, and for now it is five and six and again we

174
00:10:55.690 --> 00:10:57.310
are going to say error.

175
00:10:58.350 --> 00:11:05.190
And questions, data, and let's create this function, right?

176
00:11:05.220 --> 00:11:06.720
So can I make this smarter?

177
00:11:06.750 --> 00:11:10.760
No, I can just make I can make this.

178
00:11:10.770 --> 00:11:11.510
Come on, buddy.

179
00:11:12.760 --> 00:11:17.980
We can make this one bigger, so you can really see what's happening here, so I'm going to grab this

180
00:11:17.980 --> 00:11:19.000
Consolo now.

181
00:11:19.000 --> 00:11:21.520
You can see that we only have control logs in here.

182
00:11:21.700 --> 00:11:23.930
What if you have multiple lines of code?

183
00:11:23.950 --> 00:11:29.110
What if you have that if statement from the previous lecture, then this code you will you know, now

184
00:11:29.110 --> 00:11:36.070
that this code is going to get really messy, let's try to create it a bit faster.

185
00:11:36.070 --> 00:11:37.780
So I'm just going to put it right here.

186
00:11:38.020 --> 00:11:45.120
I'm going to say seven and this is going to be eight and we are going to have the same callback function.

187
00:11:45.130 --> 00:11:48.280
I'm just going to copy that, put it right here.

188
00:11:48.280 --> 00:11:49.960
And we are going to.

189
00:11:51.110 --> 00:11:52.600
But this one here as well.

190
00:11:53.730 --> 00:11:57.480
OK, well, that goes in here.

191
00:11:59.120 --> 00:12:00.490
Oh, come on, buddy.

192
00:12:01.640 --> 00:12:09.020
OK, so inside this, what I'm going to do is so we do have our proper format, all right, we have

193
00:12:09.020 --> 00:12:12.620
no errors and so we have made requests to seven and eight.

194
00:12:12.650 --> 00:12:18.160
Let's go ahead and let's make requests to nine and 10, which are the final ones.

195
00:12:18.590 --> 00:12:23.240
So I'm just going to grab this questions, Jason, and I'm going to put it right here.

196
00:12:23.520 --> 00:12:25.890
We are going to say nine and ten.

197
00:12:26.330 --> 00:12:29.560
I know it's a lot, but I'm trying to prove a point here.

198
00:12:31.620 --> 00:12:40.560
So we have questions, data, questions, data and provide the arrow, and in here, finally, we are

199
00:12:40.560 --> 00:12:42.610
just going to provide the question state.

200
00:12:42.990 --> 00:12:45.560
So now you can see that this is called callback help.

201
00:12:45.570 --> 00:12:49.350
You can see how ugly this is, how difficult the system in turn.

202
00:12:49.530 --> 00:12:54.210
And if there are more more requests, you're going to end up with more callbacks.

203
00:12:55.200 --> 00:12:59.250
You if the callbacks, you can induce very specific things.

204
00:12:59.250 --> 00:13:03.810
With the callbacks, you're going to end up with more lines of code than just a console like.

205
00:13:05.180 --> 00:13:12.350
So if I were to just go ahead and save all of this and click on it, we can see that we are we are getting

206
00:13:12.350 --> 00:13:12.970
our data.

207
00:13:13.220 --> 00:13:15.650
So the first one comes from line number two in it.

208
00:13:15.650 --> 00:13:19.310
And if I click on it, we can see that it is actually an array.

209
00:13:19.490 --> 00:13:19.820
All right.

210
00:13:19.820 --> 00:13:22.490
Because we have passed it right here.

211
00:13:22.490 --> 00:13:24.080
We have said, Jason, that pass.

212
00:13:24.710 --> 00:13:25.100
Right.

213
00:13:25.100 --> 00:13:30.410
And we get so these are the cat's questions.

214
00:13:30.920 --> 00:13:32.990
These are the the dog's questions.

215
00:13:32.990 --> 00:13:35.750
These are the bird's questions.

216
00:13:35.750 --> 00:13:41.380
And these are the ALC questions as well as the wolf's questions.

217
00:13:41.390 --> 00:13:51.290
So this is how you you are going to make API requests to different you URLs, ETP request.

218
00:13:51.330 --> 00:13:51.610
Right.

219
00:13:51.740 --> 00:13:55.170
And you can see that when one is completed, then the next one is run.

220
00:13:55.190 --> 00:13:57.640
When the other one is completed, then the next one is run.

221
00:13:57.830 --> 00:14:00.590
So you have time to do something with this data.

222
00:14:00.830 --> 00:14:03.830
When you receive this data, maybe you want to do something with it.

223
00:14:04.160 --> 00:14:08.870
So this is called this is a very, very small example of a callback.

224
00:14:08.870 --> 00:14:12.890
Hell, we are not going to be working with callbacks.

225
00:14:12.890 --> 00:14:18.350
We will be working mostly with fetch and async await when we get to our projects.

226
00:14:18.590 --> 00:14:27.110
But you need to know this old school way of doing X H.E.R object, these all of these methods and all

227
00:14:27.110 --> 00:14:33.350
these properties which are added here, the callback hell, by the end of this chapter you'll end up

228
00:14:33.350 --> 00:14:40.470
with a much cleaner method and much faster and and very, very lesser lines of code.

229
00:14:40.670 --> 00:14:41.970
So that's it for this lecture.

230
00:14:41.990 --> 00:14:43.520
See you guys in the next one.

