1
00:00:00,660 --> 00:00:07,500
Hi, everyone, in this lecture, we are going to talk about the Nonet quality operator and these strict

2
00:00:07,500 --> 00:00:09,000
nanny quality operator.

3
00:00:10,580 --> 00:00:17,960
All right, so we have covered the equality, the regular double equal equality operator, and we know

4
00:00:18,170 --> 00:00:23,150
that this operator does not take into consideration the time.

5
00:00:23,390 --> 00:00:25,870
It only cares about the value, OK?

6
00:00:26,180 --> 00:00:29,710
And when the values match, it is going to return it through.

7
00:00:30,050 --> 00:00:32,920
OK, it is going to return a boolean of true.

8
00:00:33,170 --> 00:00:33,650
All right.

9
00:00:33,890 --> 00:00:41,210
But this strict equality, the operator or the triple equal equality operator, it not only cares about

10
00:00:41,210 --> 00:00:44,940
the value, but it also cares about the time.

11
00:00:45,440 --> 00:00:50,180
So even though the values are the same in this case, it is going to return.

12
00:00:50,180 --> 00:00:54,230
It returned a false because the tie is not the same.

13
00:00:54,830 --> 00:01:02,870
So first off, I want to talk about the non equality equal, the non equality operator, which is actually

14
00:01:02,870 --> 00:01:05,600
like a sibling of this operator, OK?

15
00:01:06,620 --> 00:01:12,670
It is the and we have an exclamation mark with a with an equal sign.

16
00:01:12,920 --> 00:01:14,840
It is non equality.

17
00:01:15,800 --> 00:01:18,340
Equality operator.

18
00:01:19,040 --> 00:01:19,520
Right.

19
00:01:19,610 --> 00:01:25,090
So this is the non equality operator and let's check it out in action.

20
00:01:25,730 --> 00:01:26,330
You know what?

21
00:01:26,340 --> 00:01:31,730
What I'm going to do is I'm just going to go ahead and copy everything that we have because we we have

22
00:01:31,730 --> 00:01:38,210
a set of data types that we want to mix and match and we want to compare it together.

23
00:01:38,670 --> 00:01:39,000
Right.

24
00:01:39,170 --> 00:01:43,770
So what I'm going to do is I'm going to grab both of the double equals and I'm going to control the

25
00:01:43,790 --> 00:01:46,550
everywhere and I'm going to replace it with this.

26
00:01:48,160 --> 00:01:51,760
All right, so what does this operator actually means?

27
00:01:51,790 --> 00:01:54,400
It means like this is a negative sign.

28
00:01:54,430 --> 00:01:57,320
Think of it as a negative sign in mathematics.

29
00:01:57,910 --> 00:02:09,250
So if if one is not equal to one, return a true if one is equal to one return, they're false.

30
00:02:09,520 --> 00:02:11,950
So we know that one is equal to one.

31
00:02:11,950 --> 00:02:12,400
Right.

32
00:02:12,970 --> 00:02:17,440
And one is not equal to it is not not equal to one.

33
00:02:17,470 --> 00:02:21,890
That's why it returns is false because this statement is actually incorrect.

34
00:02:21,910 --> 00:02:26,080
This is false because one is equal to one.

35
00:02:26,300 --> 00:02:30,450
OK, and when it is not equal to one, we are going to see it through.

36
00:02:30,620 --> 00:02:30,910
OK.

37
00:02:31,900 --> 00:02:34,370
So let's I'm just going to keep it there.

38
00:02:35,040 --> 00:02:44,590
Now, this statement should also be false because it says one is not equal to one and it is incorrect

39
00:02:44,800 --> 00:02:46,100
and we get a false here.

40
00:02:46,510 --> 00:02:47,530
How about this one?

41
00:02:48,470 --> 00:02:55,820
This one is exactly the same as the rest of the two Y because Z.

42
00:02:56,890 --> 00:03:01,360
It says Z is not equal to Z, but it is equal to Z.

43
00:03:01,390 --> 00:03:03,250
That's why it is going to return false.

44
00:03:03,610 --> 00:03:07,930
OK, so now this one is going to return their fans as well.

45
00:03:08,120 --> 00:03:09,340
How about this one?

46
00:03:09,880 --> 00:03:13,350
It says false is not equal to true.

47
00:03:14,170 --> 00:03:15,070
That is true.

48
00:03:15,730 --> 00:03:17,010
And we get a true.

49
00:03:17,890 --> 00:03:21,550
And let me do like another example here.

50
00:03:23,080 --> 00:03:29,350
So it is crystal clear to you I'm going to put an X and in here it says, let's come and tell this to

51
00:03:29,860 --> 00:03:35,650
in here, it says Z is not equal to X, and that is correct.

52
00:03:35,830 --> 00:03:36,660
It is true.

53
00:03:36,880 --> 00:03:38,020
So we should get it through.

54
00:03:38,030 --> 00:03:39,000
Yeah, we did get it.

55
00:03:39,640 --> 00:03:40,750
So this is false.

56
00:03:40,790 --> 00:03:41,760
This is true.

57
00:03:42,190 --> 00:03:43,340
And how about this one?

58
00:03:43,360 --> 00:03:49,360
This should be false because it says zero is not equal to an empty string, but it is equal to an empty

59
00:03:49,360 --> 00:03:49,690
string.

60
00:03:49,700 --> 00:03:51,370
So we should get a false.

61
00:03:52,120 --> 00:03:53,020
How about this one?

62
00:03:53,030 --> 00:03:57,740
So the rest of them, which of them should be false and all of them are false.

63
00:03:58,090 --> 00:04:05,020
Now, the nine equality operator acts in the same way as the equality operator, but it, like it says,

64
00:04:05,020 --> 00:04:05,950
is not.

65
00:04:06,140 --> 00:04:07,710
That's that's the difference.

66
00:04:08,020 --> 00:04:11,920
And also, it does not care about the type, as you guys saw here.

67
00:04:12,640 --> 00:04:19,480
So now let's go ahead and let's talk about the final equality operator that the final comparison operator

68
00:04:19,480 --> 00:04:20,740
that we are going to discuss.

69
00:04:20,740 --> 00:04:22,450
And that is the.

70
00:04:26,680 --> 00:04:28,360
The strict.

71
00:04:30,670 --> 00:04:32,350
The strict non.

72
00:04:33,580 --> 00:04:36,390
Equality operator.

73
00:04:37,860 --> 00:04:43,410
All right, so now what I'm going to do is I'm going to grab everything from here and I'm going to paste

74
00:04:43,410 --> 00:04:48,720
him here and I'm going to grab all the triple equal signs and I'm going to change it with this.

75
00:04:49,030 --> 00:04:50,860
And now we are going to talk about that.

76
00:04:51,450 --> 00:04:57,690
So this one says that one is not equal to one neither in type nor in value.

77
00:04:57,930 --> 00:04:59,750
And this statement is incorrect.

78
00:05:00,000 --> 00:05:02,600
So we should see a force for this one.

79
00:05:03,420 --> 00:05:04,310
So let's save it.

80
00:05:04,320 --> 00:05:05,990
We see it false, right?

81
00:05:06,520 --> 00:05:09,270
I'm just going to put it right here for you.

82
00:05:09,980 --> 00:05:13,060
OK, maybe I should have done this for the previous ones as well.

83
00:05:13,060 --> 00:05:13,080
What?

84
00:05:13,410 --> 00:05:16,440
You can't do that as a challenge for yourself.

85
00:05:16,440 --> 00:05:18,060
So let's come in this and.

86
00:05:19,690 --> 00:05:28,860
And now it says that one is not equal to one neither in type nor in value.

87
00:05:29,590 --> 00:05:33,130
OK, and this this should return.

88
00:05:33,130 --> 00:05:33,610
True.

89
00:05:34,210 --> 00:05:39,750
And I'm just going to put it through because because one is not equal to one.

90
00:05:39,760 --> 00:05:40,810
This is number one.

91
00:05:40,810 --> 00:05:41,830
This is string one.

92
00:05:42,040 --> 00:05:42,990
They're not equal.

93
00:05:43,150 --> 00:05:46,120
So the other the results should be true.

94
00:05:46,270 --> 00:05:48,400
And we do get a true there.

95
00:05:49,210 --> 00:05:51,960
The code for Minor brought them back.

96
00:05:52,510 --> 00:05:58,870
So this one says that Z is not equal to Z nor in value, neither in type, which is incorrect.

97
00:05:58,880 --> 00:06:05,170
Of course, we should see if this one says this one should also be false because they are equal to each

98
00:06:05,170 --> 00:06:05,450
other.

99
00:06:05,650 --> 00:06:12,070
This one is true because false is not equal to true, neither in type nor in value.

100
00:06:12,220 --> 00:06:15,460
It is the same type, but the value is different.

101
00:06:15,850 --> 00:06:16,320
All right.

102
00:06:16,750 --> 00:06:24,130
So this strict equality operator, what it does is there are two conditions there and whatever either

103
00:06:24,130 --> 00:06:25,900
want, even one of them is true.

104
00:06:25,900 --> 00:06:26,890
Then we are going to get it.

105
00:06:27,580 --> 00:06:30,990
So in this case, we should get it through because false.

106
00:06:31,420 --> 00:06:33,600
This is District nine equality operator.

107
00:06:33,820 --> 00:06:39,970
So false is not equal to false in value that that is that that part is correct actually.

108
00:06:40,540 --> 00:06:42,180
But it is the same time.

109
00:06:42,460 --> 00:06:45,660
So out of the two conditions, one of the conditions is true.

110
00:06:45,670 --> 00:06:47,200
So we should get it through here.

111
00:06:47,630 --> 00:06:49,360
So let's say that we do get it through.

112
00:06:49,660 --> 00:06:51,130
Let's take a look at this one.

113
00:06:51,130 --> 00:06:51,880
It's true.

114
00:06:52,840 --> 00:06:53,410
This one.

115
00:06:53,410 --> 00:06:54,130
This is true.

116
00:06:54,280 --> 00:06:55,330
This one true.

117
00:06:55,330 --> 00:06:56,700
And this one is true.

118
00:06:57,130 --> 00:07:03,640
So that said, for our comparison operators, starting from our next year, we are going to talk about

119
00:07:03,940 --> 00:07:12,940
how we can control the flow of logic, the flow of code inside and our inside our applications through

120
00:07:12,940 --> 00:07:14,050
if statements.

121
00:07:14,260 --> 00:07:16,150
See you guys in the next lecture.

