1
00:00:01,920 --> 00:00:06,480
Hi, everyone, in this next year, we're going to talk about the Fetch API.

2
00:00:07,900 --> 00:00:17,350
All right, so we know how the XIKAR object worked, we know how we we created we made HTP requests,

3
00:00:17,350 --> 00:00:23,710
how we handled the data received, and we know how all that stuff works.

4
00:00:23,950 --> 00:00:28,700
But that is like the old school way of doing it with the exciter object.

5
00:00:29,110 --> 00:00:30,940
Now we have newer standards.

6
00:00:30,940 --> 00:00:37,220
We have newer methods like the API, like async await that we will be using in our projects.

7
00:00:37,540 --> 00:00:43,420
Now, keep in mind, there is this there is one thing that I want to mention first, and that is there

8
00:00:43,420 --> 00:00:46,600
is nothing wrong with using XIKAR object.

9
00:00:46,930 --> 00:00:54,340
In fact, like there are many developers that still prefer that way of doing it, that old school way

10
00:00:54,340 --> 00:00:54,840
of doing it.

11
00:00:54,850 --> 00:00:56,950
But you need to know that.

12
00:00:56,950 --> 00:01:00,600
And then what we talked about was the callbacks.

13
00:01:00,880 --> 00:01:08,760
So how we used callbacks and then how we used promises, now promises topic was really important.

14
00:01:09,040 --> 00:01:16,830
Important because the API actually returns a promise, the FETCH API returns a promise.

15
00:01:17,140 --> 00:01:25,120
And so what we can do with that, we can use the dart then method to get the data and we can use the

16
00:01:25,120 --> 00:01:28,160
dart catch method to catch the errors.

17
00:01:28,900 --> 00:01:33,540
Now the Fetch API implements promises under the hood.

18
00:01:34,030 --> 00:01:41,020
So we are going to get a response which is going to be an object and we are going to get an error,

19
00:01:41,020 --> 00:01:43,180
which is going to be another object.

20
00:01:44,190 --> 00:01:51,240
All right, so what I'm going to do is we are going to go over a much simpler syntax, a a way easier

21
00:01:51,240 --> 00:01:55,650
syntax and a way less of a headache kind of syntax.

22
00:01:55,650 --> 00:02:00,950
But if you want to use XY char, that's going to be it for you.

23
00:02:00,960 --> 00:02:06,600
You don't want to learn API, which is like which is not a good idea.

24
00:02:06,610 --> 00:02:09,289
You should learn API should learn, async, await.

25
00:02:09,750 --> 00:02:13,640
But as far as the XIKAR object is concerned, we are done with that.

26
00:02:14,250 --> 00:02:19,170
We are diving into modern JavaScript asynchronous programming.

27
00:02:19,170 --> 00:02:19,500
Right.

28
00:02:19,680 --> 00:02:22,890
And the methods and functions that are made available to us.

29
00:02:23,280 --> 00:02:26,190
So first off, what I'm going to do is I'm going to.

30
00:02:27,590 --> 00:02:31,190
I have the API endpoint and the other screen, so I'm just going to copy paste it.

31
00:02:31,460 --> 00:02:37,940
So first off, I'm going to go ahead through a simpler example and then we are going to take it up a

32
00:02:37,940 --> 00:02:42,350
notch and we are going to cover a more intermediate kind of example.

33
00:02:42,380 --> 00:02:44,290
So the first one is like a beginner one.

34
00:02:44,660 --> 00:02:49,170
So I'm just going to say example one right in here.

35
00:02:49,190 --> 00:03:01,360
What do I want to do is I'm going to make a request request to two groups to get the users.

36
00:03:01,730 --> 00:03:04,240
So we are going to make a request to get the users.

37
00:03:04,520 --> 00:03:05,900
Where is the API endpoint?

38
00:03:05,900 --> 00:03:09,290
The API endpoint is going to be that specific.

39
00:03:09,290 --> 00:03:11,560
Jason Placeholder website.

40
00:03:11,570 --> 00:03:13,300
The fact that we talked about.

41
00:03:13,880 --> 00:03:15,720
So I'm going to say fetch.

42
00:03:15,740 --> 00:03:18,060
You just have to say fetch and open up that set.

43
00:03:18,890 --> 00:03:23,060
So in here, what we have is we are going to provide the API endpoint.

44
00:03:23,360 --> 00:03:29,540
So I'm just going to copy it from the screen and I'm going to paste it right here.

45
00:03:29,570 --> 00:03:30,960
So this is the API endpoint.

46
00:03:31,670 --> 00:03:37,970
Now, you could go ahead and create a variable and stored this API endpoint inside that variable and

47
00:03:37,970 --> 00:03:39,580
then put the variable here.

48
00:03:39,620 --> 00:03:43,120
I mean, that that is going to work as well, but I'm just going to do it directly.

49
00:03:43,370 --> 00:03:47,550
So when when we run this, this is going to return a promise.

50
00:03:47,780 --> 00:03:49,370
So let's take a look at it.

51
00:03:49,400 --> 00:03:51,060
What this is going to return.

52
00:03:51,380 --> 00:03:56,780
So I am going to store it inside a let variable and I'm going to say.

53
00:03:58,480 --> 00:04:02,060
What I'm just going to say what that's it.

54
00:04:02,920 --> 00:04:11,890
So let's save it, let's say consult the log scra what and let's save it, we can see that it is going

55
00:04:11,890 --> 00:04:13,050
to return a promise.

56
00:04:13,390 --> 00:04:18,339
Now the promise it has the Proteau is promise.

57
00:04:18,339 --> 00:04:19,690
We know what this Proteau is.

58
00:04:19,690 --> 00:04:20,950
We have talked a lot about it.

59
00:04:21,220 --> 00:04:26,800
Now, when it returns, they promise some methods are made available to us.

60
00:04:26,810 --> 00:04:30,080
One of them is done then right Dudd.

61
00:04:30,190 --> 00:04:35,540
Then we use it with the dart cache then is used when we want to grab the data.

62
00:04:35,560 --> 00:04:41,080
So in this case, I'm going to say a response because we are going to have response and then we are

63
00:04:41,080 --> 00:04:45,780
going to have error when it comes to that which sorry, the API.

64
00:04:46,090 --> 00:04:47,800
So in here, what do I want to do?

65
00:04:48,250 --> 00:04:52,420
What I want to do is I want to grab that response and I want to log it to the console.

66
00:04:52,420 --> 00:04:55,750
So we are going to say cancel the log, let's grab the response.

67
00:04:55,750 --> 00:05:01,870
Let's see what the response is going to give us now the if we have an error along the way.

68
00:05:03,440 --> 00:05:11,330
Now here, it says, attaches a callback for only the rejection of the promise because they implement

69
00:05:11,330 --> 00:05:14,230
promises under the hood, we can use these methods.

70
00:05:14,600 --> 00:05:17,870
So I'm going to say, oops.

71
00:05:19,270 --> 00:05:20,740
To say reject.

72
00:05:21,460 --> 00:05:24,530
And what do I want to do when the promise is rejected?

73
00:05:24,820 --> 00:05:27,250
I just want to log it to the consul.

74
00:05:29,140 --> 00:05:38,260
Oh, I'm not going to say reject, this should be error, so error and I'm going to do better inside

75
00:05:38,260 --> 00:05:39,320
the console, let's say.

76
00:05:39,730 --> 00:05:42,370
So now we can see that we get our response.

77
00:05:42,370 --> 00:05:47,340
We don't get the reject because they're the promise has been successful.

78
00:05:47,590 --> 00:05:53,980
But if I were to add another is there and save it, we can see we get four or four, but we still get

79
00:05:53,980 --> 00:05:54,950
the response.

80
00:05:55,480 --> 00:06:00,450
Now, this is something that is that is, well, not that helpful.

81
00:06:00,490 --> 00:06:03,540
We should make our way around this, which we are.

82
00:06:03,880 --> 00:06:08,530
So we get the error, which is four or four, but we still get their response.

83
00:06:08,740 --> 00:06:13,180
But their response, what is the response going to say now before diving into this?

84
00:06:13,510 --> 00:06:15,920
What are we going to do is I'm going to remove the extras.

85
00:06:15,940 --> 00:06:19,960
First off, let's talk about it when the this method is called.

86
00:06:20,860 --> 00:06:22,300
So what do we have here?

87
00:06:22,300 --> 00:06:25,910
We have a status of 200 these statistics.

88
00:06:25,910 --> 00:06:28,180
It is empty.

89
00:06:28,480 --> 00:06:28,900
All right.

90
00:06:28,900 --> 00:06:32,680
And this is the euro to which we have made the request.

91
00:06:32,680 --> 00:06:36,760
And this is the prototype of this response, which is actually a response.

92
00:06:37,210 --> 00:06:37,600
Right.

93
00:06:37,600 --> 00:06:39,910
And our right.

94
00:06:39,910 --> 00:06:42,190
Is there anything else that I want to cover here now?

95
00:06:42,520 --> 00:06:49,380
So if I add another is here, it means that we have made a mistake and now we have a status of 404.

96
00:06:50,020 --> 00:06:50,430
All right.

97
00:06:50,560 --> 00:06:54,310
So this is how Fetch API works.

98
00:06:54,580 --> 00:06:56,500
Now you can see how similar this is.

99
00:06:57,040 --> 00:07:00,430
I know we we get something really weird with this one.

100
00:07:01,000 --> 00:07:03,100
Very, very, very weird.

101
00:07:03,130 --> 00:07:03,520
Right.

102
00:07:03,700 --> 00:07:06,310
And there is no response text.

103
00:07:06,490 --> 00:07:08,110
We don't get our users.

104
00:07:08,350 --> 00:07:09,790
We are going to dive into that.

105
00:07:09,790 --> 00:07:11,230
And the second example.

106
00:07:11,390 --> 00:07:11,850
Right.

107
00:07:12,910 --> 00:07:17,530
So in the second example, what I'm going to do is I'm just going to come and run out.

108
00:07:17,530 --> 00:07:20,200
I'm going to grab this comment and I'm going to paste it here.

109
00:07:20,560 --> 00:07:24,550
And we are going to say example to make a request to get users.

110
00:07:24,790 --> 00:07:27,370
Now, we have made the request.

111
00:07:27,370 --> 00:07:32,560
The request was successful, but how can we extract the information that we want?

112
00:07:32,560 --> 00:07:40,180
We made the request to fetch some data, to retrieve some data, in this case, its users.

113
00:07:40,180 --> 00:07:42,460
But still, we want to grab our data.

114
00:07:42,460 --> 00:07:43,300
Where is our data?

115
00:07:43,300 --> 00:07:44,190
We can see it here.

116
00:07:44,530 --> 00:07:48,160
So what I'm going to do is we are going to go over this example one more time.

117
00:07:48,160 --> 00:07:50,530
So I'm going to say fetch, right.

118
00:07:50,530 --> 00:07:55,000
And I'm going to pass on the same API endpoint, which is right here.

119
00:07:55,480 --> 00:07:59,440
And because this returns a promise, we can say it does then on it.

120
00:08:00,040 --> 00:08:03,550
Now in here, what I'm going to do is I'm going to grab the response.

121
00:08:04,240 --> 00:08:04,600
Right.

122
00:08:05,830 --> 00:08:06,640
Well, it's.

123
00:08:07,930 --> 00:08:15,070
Smaller case, I ah, and when I grabbed that response, I want to do something with their response,

124
00:08:15,820 --> 00:08:19,740
so let me just make this smaller so it makes more sense.

125
00:08:19,750 --> 00:08:20,830
Yeah, like that.

126
00:08:21,730 --> 00:08:23,290
So come here, buddy.

127
00:08:23,290 --> 00:08:26,830
And OK, so what do I want to do with that response?

128
00:08:28,030 --> 00:08:29,560
I want to return.

129
00:08:30,480 --> 00:08:39,640
I want to return response dart, Jason, right now, what is that, Jason Dott Jason, what is this?

130
00:08:39,929 --> 00:08:41,220
Now here is a page.

131
00:08:41,640 --> 00:08:44,940
Now basically you can go ahead and read more about it.

132
00:08:44,940 --> 00:08:49,890
So I'm just going to copy this and I'm going to r pasted right here.

133
00:08:50,370 --> 00:08:52,890
I'm going to save it, make some way.

134
00:08:53,370 --> 00:08:53,640
Right.

135
00:08:53,790 --> 00:09:00,900
So basically what this does Jason Method is going to allow us to do is it is going to grab our response.

136
00:09:01,290 --> 00:09:05,180
It is going to read it is going to convert it to a Jason file.

137
00:09:05,880 --> 00:09:12,690
This this method, it is going to convert it to a Jason and then it is going to read it and then pass

138
00:09:12,690 --> 00:09:14,810
it so we can use it inside JavaScript.

139
00:09:15,090 --> 00:09:16,800
So it is going to do three things.

140
00:09:17,040 --> 00:09:23,370
The response first, the response is convert it to Jason file, then it is right there and then it is

141
00:09:23,370 --> 00:09:27,180
passed into a readable code by JavaScript.

142
00:09:27,510 --> 00:09:27,840
All right.

143
00:09:28,170 --> 00:09:32,730
But what happens in the process is this return response to Jason.

144
00:09:32,730 --> 00:09:34,960
It actually returns a promise as well.

145
00:09:35,730 --> 00:09:41,640
So this entire thing is going to return the promise so we can just add a thin method.

146
00:09:42,830 --> 00:09:49,970
And why is this done then, method necessary, because when we grab our data, when the data is passed,

147
00:09:50,420 --> 00:09:53,630
we want to grab that data and do something with it.

148
00:09:53,870 --> 00:09:57,440
I know in this case, we want to just log it to the console.

149
00:09:57,440 --> 00:10:03,770
But think of think of think of it as a like real world application application.

150
00:10:04,040 --> 00:10:07,430
When you when the data is passed, you need to get the data.

151
00:10:07,430 --> 00:10:11,390
You want to grab the data, you want to have the data.

152
00:10:11,690 --> 00:10:16,640
So what I'm going to do here is I'm going to say in this case, because we are phishing users, I'm

153
00:10:16,640 --> 00:10:20,960
just going to say users and we are going to run an error function here.

154
00:10:22,530 --> 00:10:23,800
And what do I want to do?

155
00:10:23,820 --> 00:10:30,860
I simply want to log to the console users and now when we said that, then, all right, we can do the

156
00:10:30,990 --> 00:10:31,650
catch as well.

157
00:10:31,680 --> 00:10:33,740
So we need to do that for the error as well.

158
00:10:34,230 --> 00:10:35,190
So error.

159
00:10:36,160 --> 00:10:45,940
And just consider the log error, let's save it, and now we get our data, see, so this data is going

160
00:10:45,940 --> 00:10:50,680
to give us users now because the JSON placeholder is actually.

161
00:10:52,930 --> 00:11:00,400
By default, it is going to for users as far as users are concerned, it is going to give us 10 users.

162
00:11:00,550 --> 00:11:01,270
OK.

163
00:11:01,300 --> 00:11:04,980
So if I come here, you can see that by default you are going to get 10 users.

164
00:11:05,290 --> 00:11:10,330
We can we can get 200 to Duse, 5000 photos and all this information.

165
00:11:10,510 --> 00:11:10,830
Right.

166
00:11:11,200 --> 00:11:14,500
So we have gotten 10 users.

167
00:11:14,650 --> 00:11:18,670
And now keep in mind that all of these they are valid JavaScript.

168
00:11:18,670 --> 00:11:21,210
We can this is an array of objects.

169
00:11:21,220 --> 00:11:25,110
This is no longer a Jason object.

170
00:11:25,120 --> 00:11:27,850
So a decent object or adjacent string.

171
00:11:27,850 --> 00:11:32,050
So you can see ID is not surrounded by its name, is not strong.

172
00:11:32,440 --> 00:11:33,760
User name is Nazran.

173
00:11:34,090 --> 00:11:40,250
When it gets users from the adjacent API, it is going to give you an address company email.

174
00:11:40,270 --> 00:11:41,680
Of course these are all fake.

175
00:11:42,220 --> 00:11:43,930
And the good thing is this.

176
00:11:43,930 --> 00:11:45,610
These objects are also nested.

177
00:11:45,610 --> 00:11:50,710
So we have object within an object, within an object like three levels nested.

178
00:11:51,160 --> 00:11:54,400
So you can extract all kind of information that you want.

179
00:11:54,670 --> 00:12:01,960
And you can see that with only like a few lines of code, we were able to prove we were able to do the

180
00:12:01,960 --> 00:12:11,320
same kind of request to this server with only like with like with five times fewer lines of code and

181
00:12:11,590 --> 00:12:20,500
not having to deal with all that with the four steps like instantiating and X, which are object and

182
00:12:20,500 --> 00:12:29,320
then creating the request, like deciding what to do when we get a successful response and then sending

183
00:12:29,320 --> 00:12:29,880
the request.

184
00:12:30,070 --> 00:12:36,170
So all of that is implemented by promises under the hood when you use the fetch API.

185
00:12:36,760 --> 00:12:39,620
So this by far is the best method, right?

186
00:12:39,760 --> 00:12:44,890
So before this lecture, we had another best method and that method was promises.

187
00:12:44,890 --> 00:12:48,610
But now we know that is even better than promises.

188
00:12:49,510 --> 00:12:51,340
But actually this is promising.

189
00:12:51,400 --> 00:12:53,400
This is a different syntax for promises.

190
00:12:53,410 --> 00:12:54,580
It uses promises.

191
00:12:55,270 --> 00:12:57,850
And I'm not going to repeat myself anymore.

192
00:12:57,850 --> 00:12:59,440
So that's it for this lecture.

193
00:12:59,440 --> 00:13:05,860
And the next lecture, we are going to talk about the async await, which is the final technology that

194
00:13:05,860 --> 00:13:08,840
we are going to cover in this chapter for now.

195
00:13:09,400 --> 00:13:10,390
See you guys then.

