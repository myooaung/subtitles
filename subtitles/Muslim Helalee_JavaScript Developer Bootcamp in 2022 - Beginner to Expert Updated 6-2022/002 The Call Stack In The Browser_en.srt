1
00:00:01,670 --> 00:00:02,540
Hi, everyone.

2
00:00:02,570 --> 00:00:07,670
In this letter, we're going to take a look at the call stack in the browser.

3
00:00:08,510 --> 00:00:08,980
All right.

4
00:00:09,140 --> 00:00:17,240
So here we have a function here we have like a set of functions and we are going to take a look at the

5
00:00:17,240 --> 00:00:20,780
JS runtime or JS runtime at a glance.

6
00:00:21,650 --> 00:00:25,730
So we have a function of multiply, right.

7
00:00:26,180 --> 00:00:28,970
That is called inside the function of some.

8
00:00:28,970 --> 00:00:32,479
The function of some is called inside the function of subtract.

9
00:00:32,960 --> 00:00:35,330
This function is called inside the divide.

10
00:00:35,330 --> 00:00:37,620
And finally we just call the divide function.

11
00:00:37,880 --> 00:00:43,460
So if I say that this is nothing special, we know that this these all these simple operations will

12
00:00:43,460 --> 00:00:44,150
take place.

13
00:00:44,930 --> 00:00:47,930
But how are they going to take place?

14
00:00:47,930 --> 00:00:50,160
Is is the topic of this lecture.

15
00:00:50,630 --> 00:00:52,850
So what I'm going to do is I'm going to try this.

16
00:00:53,190 --> 00:00:54,200
I'm going to open this.

17
00:00:54,680 --> 00:00:57,710
OK, so this is our this is our developer tools.

18
00:00:57,890 --> 00:01:03,980
We have elements, console, network sources, performance, memory application, which we have talked

19
00:01:03,980 --> 00:01:04,540
about before.

20
00:01:04,550 --> 00:01:04,830
Right.

21
00:01:05,150 --> 00:01:09,740
So what you're going to do is just jump from console all the way to sources.

22
00:01:10,920 --> 00:01:13,210
Jumpier ignored this.

23
00:01:13,230 --> 00:01:20,190
This is because of the life server that a code injected by life server extension that we have installed,

24
00:01:20,520 --> 00:01:27,270
just if you do that, you're going to see that this is to double the cost browser, that if you click

25
00:01:27,270 --> 00:01:30,990
here, you can see a representation of all of our functions here.

26
00:01:31,350 --> 00:01:37,500
So for the sake of better readability, I'm just going to zoom out a bit so we can see everything at

27
00:01:37,500 --> 00:01:39,000
the same time at a glance.

28
00:01:39,000 --> 00:01:39,390
Right.

29
00:01:40,050 --> 00:01:42,510
So what I'm going to do is I'm going to come to this line.

30
00:01:42,690 --> 00:01:45,390
You can see it highlights it, and I'm just going to click.

31
00:01:46,460 --> 00:01:51,980
All right, and it means that we have just added a breakpoint and where is the breakpoint?

32
00:01:52,430 --> 00:01:57,740
The breakpoint is a line number three and then I'm just going to go ahead and refresh the page and it's

33
00:01:57,740 --> 00:01:59,660
just paused in the debugger.

34
00:02:00,080 --> 00:02:00,490
Right.

35
00:02:00,830 --> 00:02:01,750
And what does it mean?

36
00:02:01,760 --> 00:02:04,820
It means that we have passed the code execution.

37
00:02:05,120 --> 00:02:09,530
And now what I'm going to do is we are going to go over this is the call stack right here.

38
00:02:10,530 --> 00:02:15,390
All right, so here is the call stack and here is the scope, we are going to go over the call stack

39
00:02:15,390 --> 00:02:17,350
and we are going to go over the scope as well.

40
00:02:17,730 --> 00:02:20,580
So first off, what is the scope that we are talking about?

41
00:02:20,580 --> 00:02:25,830
The scope is the global scope, and these are all the methods and properties that are attached to the

42
00:02:25,830 --> 00:02:28,200
global scope, which we are not going to go over.

43
00:02:28,230 --> 00:02:29,590
We have covered some of them.

44
00:02:29,880 --> 00:02:32,220
We are going to cover some others.

45
00:02:32,910 --> 00:02:35,670
We might not we might not cover all of them.

46
00:02:36,150 --> 00:02:41,470
But you will have the idea that how they are called, how they are used.

47
00:02:41,670 --> 00:02:45,540
So if I come here, it's a step into next function.

48
00:02:45,540 --> 00:02:49,760
Call 11 or control plus semicolon.

49
00:02:49,950 --> 00:02:51,260
I'm just going to click this.

50
00:02:51,780 --> 00:02:56,190
So if I click this from this divide, we're going where are we going?

51
00:02:56,190 --> 00:02:58,540
To the step into next function call.

52
00:02:58,770 --> 00:02:59,090
All right.

53
00:02:59,250 --> 00:03:04,410
So if I click this, we can see that we come here inside this console.

54
00:03:04,830 --> 00:03:14,250
Sorry, const results X divided by Y, and it gives us this representation here that it says, I think

55
00:03:14,250 --> 00:03:17,520
I should zoom back in like.

56
00:03:20,310 --> 00:03:29,910
OK, I think I should zoom in like two eyes, so it's readable, so, OK, buddy, so let's close this.

57
00:03:29,910 --> 00:03:30,660
Refresh it.

58
00:03:31,010 --> 00:03:31,380
OK.

59
00:03:32,730 --> 00:03:37,930
So if I do this, this is the call stack, this is the scope, right?

60
00:03:38,130 --> 00:03:41,530
So if I click on this, it's a step into next function call.

61
00:03:41,550 --> 00:03:48,780
If I click it, we are going to step inside this function and we can see that we have X is equal to

62
00:03:48,780 --> 00:03:51,980
100 and Y is equal to Fiverr.

63
00:03:51,990 --> 00:03:55,230
These real values coming from they are coming from right here.

64
00:03:56,020 --> 00:03:56,320
Right.

65
00:03:56,520 --> 00:03:59,340
So this is the executable code.

66
00:03:59,730 --> 00:04:05,540
And now right away we can see that inside the call stack we have this divide function.

67
00:04:05,910 --> 00:04:10,350
So this divide function is right over inside the stack and inside the scope.

68
00:04:10,620 --> 00:04:11,130
There we go.

69
00:04:11,140 --> 00:04:14,820
We have a local scope because functions they create a scope.

70
00:04:15,450 --> 00:04:19,320
And inside this local scope, we have two variables.

71
00:04:19,320 --> 00:04:26,400
We have X and we have what and we have there the we have the values for them.

72
00:04:26,400 --> 00:04:33,210
But the thing is that we can see that the result is undefined, OK, because we have not calculated

73
00:04:33,240 --> 00:04:34,610
the result yet.

74
00:04:34,620 --> 00:04:37,770
We are going to get to that and the result is going to be defined later.

75
00:04:38,370 --> 00:04:44,520
So if I click on it, the next executable line of code is concerned dialogue and we can see that the

76
00:04:44,520 --> 00:04:45,810
result is now 20.

77
00:04:46,050 --> 00:04:47,310
You can see that right here.

78
00:04:47,320 --> 00:04:48,780
Now the result is 20.

79
00:04:50,510 --> 00:04:57,530
All right, and the function is still right here, whenever the function is done, what they call the

80
00:04:57,530 --> 00:05:01,460
call, the function is going to be pumped from the call stack.

81
00:05:01,820 --> 00:05:07,480
But because this divide function is not done yet, that's why it is still staying in here.

82
00:05:08,210 --> 00:05:14,930
We can see that if I click on this console log, it is just going to log something to the console and

83
00:05:14,930 --> 00:05:17,000
it is going to be popped immediately.

84
00:05:17,300 --> 00:05:21,580
It means that it is not going to even stay here for like even one millisecond.

85
00:05:21,890 --> 00:05:23,930
So if I click on it, it is run.

86
00:05:24,080 --> 00:05:27,950
It should have like had it should have been like on the call stack.

87
00:05:28,310 --> 00:05:33,320
But it is not because it run, it ran and it popped that set.

88
00:05:33,320 --> 00:05:33,950
So it is done.

89
00:05:33,980 --> 00:05:39,860
So if I come inside the console we can see twenty because hundred divided by five, we get the result

90
00:05:39,860 --> 00:05:41,220
which is tiny and we locked it.

91
00:05:41,600 --> 00:05:43,750
Now this is another function call.

92
00:05:43,970 --> 00:05:51,100
So if I click on this button one more time, we should see subtract added to the cost.

93
00:05:51,300 --> 00:05:55,040
So if I click on it, we can see that we are on this subtract.

94
00:05:55,400 --> 00:05:57,680
But still the divide is right here.

95
00:05:57,680 --> 00:05:57,980
Right.

96
00:05:58,190 --> 00:06:00,990
So this is the call center, the call stack.

97
00:06:01,010 --> 00:06:06,200
Whenever when we get to the end of it, I'm going to explain something to you that whatever you put

98
00:06:06,620 --> 00:06:12,890
in the car stuck in the last whatever is the last, that is going to be the first item that is going

99
00:06:12,890 --> 00:06:14,900
to be pumped from the car stack.

100
00:06:15,410 --> 00:06:18,890
So the last item is the first item that is going to be popped.

101
00:06:19,370 --> 00:06:19,660
Right.

102
00:06:19,820 --> 00:06:23,240
So we are now stepping inside the subtract function.

103
00:06:24,650 --> 00:06:27,340
This is the first line of executable code.

104
00:06:27,680 --> 00:06:29,630
We know the values for X and Y.

105
00:06:29,870 --> 00:06:31,310
Where are they coming from?

106
00:06:32,010 --> 00:06:32,990
They are coming from here.

107
00:06:32,990 --> 00:06:34,780
So X is 50, which is 40.

108
00:06:35,210 --> 00:06:39,950
So if I click on it, we are going to go to the next line of code and the result is calculated.

109
00:06:39,980 --> 00:06:49,760
So this is the and this 10 is stored is allocated to a small space in memory by the VM or JavaScript

110
00:06:49,760 --> 00:06:50,210
engine.

111
00:06:50,450 --> 00:06:51,560
We have talked about this.

112
00:06:52,100 --> 00:07:01,280
So now this is the console because console, it just runs the code and it pops from the stack right

113
00:07:01,280 --> 00:07:01,650
away.

114
00:07:02,070 --> 00:07:05,480
OK, these are not popping because we're not done with them.

115
00:07:05,490 --> 00:07:07,460
That's not that's why they're not popping.

116
00:07:07,760 --> 00:07:10,220
But because we are just this is just one line of code.

117
00:07:10,220 --> 00:07:11,380
There are no dependencies.

118
00:07:11,660 --> 00:07:14,920
We already know the result is not like the result is not a non.

119
00:07:14,930 --> 00:07:15,650
We know the result.

120
00:07:15,830 --> 00:07:17,260
We just log it to the concerts.

121
00:07:17,280 --> 00:07:23,270
If I click on it, console log is added to the stack and is popped from the stack and we can see that

122
00:07:23,600 --> 00:07:25,730
the subtract it is a local method.

123
00:07:26,180 --> 00:07:28,300
Sorry, it is, it has a local scope.

124
00:07:28,640 --> 00:07:33,350
This is the global scope, but it also has a local scope, which is the scope of this function.

125
00:07:33,740 --> 00:07:38,240
And in there we know the result, we know the value for X and we know the value for Y.

126
00:07:39,590 --> 00:07:44,210
And now if I come to this to the console, we can see the ten has been logged to the console.

127
00:07:45,230 --> 00:07:45,580
All right.

128
00:07:45,710 --> 00:07:51,520
So now if I click on this, we should see that we we are done with the subtract function and the this

129
00:07:51,530 --> 00:07:55,090
blue arrow should go one level up to this sum function.

130
00:07:55,370 --> 00:07:57,530
So if I click on it, we can see the same function.

131
00:07:57,830 --> 00:07:59,720
The same thing is going to happen.

132
00:07:59,990 --> 00:08:06,530
We are going to calculate the result with this and then we are going to log it to the console and it

133
00:08:06,530 --> 00:08:09,260
is going to be popped immediately from the stack.

134
00:08:09,830 --> 00:08:16,580
And then we are going to step inside another function call and we can see the local.

135
00:08:17,470 --> 00:08:23,800
And here as well, so if I click on it, we can see that these are undefined or because the result is

136
00:08:23,800 --> 00:08:28,680
not yet calculated, if we come see here, it is 80.

137
00:08:29,340 --> 00:08:29,630
Right.

138
00:08:29,800 --> 00:08:35,260
And because we are inside this multiply function, when the result is calculated, the result is going

139
00:08:35,260 --> 00:08:36,030
to come here.

140
00:08:36,250 --> 00:08:39,760
It is 600 and it's just collapse that.

141
00:08:40,309 --> 00:08:40,720
Right.

142
00:08:40,720 --> 00:08:49,000
And now we are going to go to the console lock and it is going to log 600 because of course, 20 times

143
00:08:49,000 --> 00:08:50,540
30, we are going to get 600.

144
00:08:50,980 --> 00:08:52,480
Now, what is the return value?

145
00:08:52,490 --> 00:08:54,130
The return value is undefined.

146
00:08:54,130 --> 00:08:58,180
And when I click on it now, you can see the final thing is multiplied.

147
00:08:58,210 --> 00:08:58,480
Right.

148
00:08:58,690 --> 00:09:04,210
So if I click on it, multiply is gone because multiply is done calculating.

149
00:09:05,770 --> 00:09:11,680
Whenever the function is done with its calculation or with its return, the function is going to be

150
00:09:11,680 --> 00:09:12,760
popped from the stack.

151
00:09:13,090 --> 00:09:19,510
Now, keep in mind, all these functions are literally on top of each other right in the stack.

152
00:09:19,840 --> 00:09:28,030
So whatever is the the last item or the last function on the stack in the stack, that is going to be

153
00:09:28,030 --> 00:09:30,070
the first item that's going to be pop.

154
00:09:30,280 --> 00:09:30,820
So.

155
00:09:33,470 --> 00:09:39,470
Because Multiply was the last item, it was so it's the first item that you can grab from the stuff,

156
00:09:39,650 --> 00:09:42,530
you cannot grab the device if you want to grab the device.

157
00:09:42,570 --> 00:09:45,830
You should pop, multiply and then some and then subtract.

158
00:09:46,340 --> 00:09:49,920
It is this is also the stark data structure in JavaScript.

159
00:09:50,360 --> 00:09:52,700
So if I click on it now, the sum is popped.

160
00:09:52,730 --> 00:09:53,770
We are done with that.

161
00:09:54,080 --> 00:09:58,370
If I click on it now, the multiply, what was it.

162
00:09:58,370 --> 00:10:02,810
Multiply was it was some and then first was multiply.

163
00:10:02,830 --> 00:10:06,300
Then we, we were done with the sum and then we were done with the subtract.

164
00:10:06,830 --> 00:10:14,000
And now when I click on it we will be done with the fight and now we get back and now we can see that

165
00:10:14,000 --> 00:10:15,680
this is at the end of this line.

166
00:10:15,830 --> 00:10:22,090
And that's why we are inside the global, because we are done with execution, stayed with the execution.

167
00:10:22,100 --> 00:10:25,160
So this is JavaScript runtime at a glance.

168
00:10:25,520 --> 00:10:26,840
This is the call stack.

169
00:10:26,840 --> 00:10:27,200
Right.

170
00:10:27,380 --> 00:10:34,250
And I think it is the next lecture where we will be talking about the Web APIs.

171
00:10:34,550 --> 00:10:41,180
And I'm going to give you the MDN resource for Web APIs, all the APIs that you have access to.

172
00:10:41,630 --> 00:10:48,170
And I'm also going to we are going to go to a website which is called Latent VoIP, and we are going

173
00:10:48,170 --> 00:10:56,990
to see another visual representation of the call stack and the event loop, the callback queue.

174
00:10:56,990 --> 00:10:58,610
And we are going to talk about that.

175
00:10:58,790 --> 00:11:04,150
And then you will understand, OK, what is the job of the browser and what is the job of the JavaScript?

176
00:11:04,640 --> 00:11:11,930
And in here you can see that we have Dom breakpoints, all of the antivenin here we have event listener

177
00:11:11,930 --> 00:11:12,550
breakpoints.

178
00:11:12,830 --> 00:11:20,360
So all of our projects, all of the projects so far that they had, they included manipulation or in

179
00:11:20,360 --> 00:11:23,840
the next projects that we have done manipulation, Dom, is.

180
00:11:24,910 --> 00:11:28,600
Actually, a browser hippiedom is done through browser.

181
00:11:28,990 --> 00:11:30,650
OK, that is not JavaScript.

182
00:11:30,670 --> 00:11:31,680
That is the browser.

183
00:11:32,050 --> 00:11:33,480
That's why we can see here.

184
00:11:33,490 --> 00:11:34,570
This is the fetch.

185
00:11:34,720 --> 00:11:37,150
We are XIKAR in this lecture.

186
00:11:37,180 --> 00:11:44,140
We are also going to talk about the XIKAR or XML HTP request and we're going to talk about them.

187
00:11:44,380 --> 00:11:48,300
But you can see here, this is everything that the browser is going to do, right?

188
00:11:48,610 --> 00:11:51,010
So this is it for this lecture.

189
00:11:51,040 --> 00:11:52,660
See you guys in the next one.

