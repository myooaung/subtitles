WEBVTT
1
00:00:00.990 --> 00:00:01.980
Hi, everyone.

2
00:00:02.130 --> 00:00:07.380
In this next year, we're going to cover implicit and explicit binding.

3
00:00:08.830 --> 00:00:16.480
All right, so we are going to start talking about the four different ways to invoke it function, and

4
00:00:16.480 --> 00:00:21.910
you might ask, OK, why do I have to know this is the object oriented programming chapter.

5
00:00:22.090 --> 00:00:25.260
Why do I have to know about how a function is called?

6
00:00:25.270 --> 00:00:26.440
I already know that.

7
00:00:26.830 --> 00:00:29.100
You know only one way of doing that, OK?

8
00:00:29.620 --> 00:00:36.880
And the reason that we are talking about the ways that we can call a function is because a function

9
00:00:36.880 --> 00:00:44.410
call in how it is called is actually going to determine what the this key word inside does.

10
00:00:44.680 --> 00:00:48.010
That function is going to refer to an OK.

11
00:00:48.010 --> 00:00:54.930
And you might say, OK, what this what the this keyword has got to do with this object oriented programming.

12
00:00:55.270 --> 00:01:04.480
Now, the one of the core pillars of OPIS is that this key word, OK, and towards the end of metal,

13
00:01:04.480 --> 00:01:10.720
to end of this chapter, you will understand why did this key word is important, right, to understanding

14
00:01:11.950 --> 00:01:14.830
the object oriented programming in JavaScript?

15
00:01:15.280 --> 00:01:15.600
All right.

16
00:01:15.730 --> 00:01:21.090
So the first way that we can call a function is I just named it the implicit.

17
00:01:21.430 --> 00:01:23.920
Well, this is not something that I came up with.

18
00:01:23.920 --> 00:01:25.480
This is actually the actual name.

19
00:01:25.660 --> 00:01:31.870
But the order this is like in no specific order, the first way we can call a function is the implicit

20
00:01:31.870 --> 00:01:33.470
binding role.

21
00:01:33.550 --> 00:01:39.550
OK, and now here we have an object that is moving up inside the object.

22
00:01:39.800 --> 00:01:47.860
We have a property called movie and we have a method or a function called movie func.

23
00:01:48.250 --> 00:01:52.960
Now, if I were to comment this line in and run it, what do you think?

24
00:01:53.500 --> 00:01:54.430
This key word?

25
00:01:55.410 --> 00:02:01.080
Is going to point to now we cannot understand we cannot determine what the this keyword is going to

26
00:02:01.080 --> 00:02:07.710
point out by looking at the function we need to come all the way down here were to the where the function

27
00:02:07.710 --> 00:02:08.190
is called.

28
00:02:08.460 --> 00:02:10.860
We need to go to the call site.

29
00:02:11.280 --> 00:02:11.670
Right.

30
00:02:11.880 --> 00:02:13.140
So this is the call site.

31
00:02:13.440 --> 00:02:19.230
The calls and the call site determines what the this keyword is keyword is going to refer to.

32
00:02:20.040 --> 00:02:20.400
Right.

33
00:02:21.840 --> 00:02:29.580
Now, this key word is going to because the movie function has been called as a method of the movie

34
00:02:29.580 --> 00:02:34.800
Sharp Object, the this keyword is going to end up pointing at this movie shop.

35
00:02:35.420 --> 00:02:35.680
Right.

36
00:02:35.970 --> 00:02:44.210
And if I were to come in this one in and save it, we would see that this movie is actually movie shopped

37
00:02:44.280 --> 00:02:44.730
movie.

38
00:02:45.150 --> 00:02:49.110
And so the movie description, we know what the movie description is.

39
00:02:49.110 --> 00:02:50.940
It is movie is what I'm watching.

40
00:02:51.300 --> 00:02:52.290
And what is this?

41
00:02:52.290 --> 00:02:55.140
That movie, this movie is going to access this key.

42
00:02:55.140 --> 00:02:56.130
What is the value?

43
00:02:56.370 --> 00:02:56.990
The switch.

44
00:02:57.210 --> 00:03:01.970
So we should see inside the console, the switch movie is what I am watching.

45
00:03:01.980 --> 00:03:03.990
So if I save it, we get that.

46
00:03:04.230 --> 00:03:06.750
It says the switch movie is what I'm watching.

47
00:03:06.900 --> 00:03:07.230
Right.

48
00:03:08.730 --> 00:03:19.260
So the so this particular rule is the most common and the most intuitive because it decides the method

49
00:03:19.260 --> 00:03:25.770
based on based upon what object you call it from now, what I'm going to do is I'm going to go ahead

50
00:03:25.770 --> 00:03:28.330
and I'm going to copy this and I'm going to put it right here.

51
00:03:28.530 --> 00:03:33.390
Now, this is another example of the implicit binding.

52
00:03:33.900 --> 00:03:38.580
Now, the good thing about implicit binding is I'm just going to come in these two out.

53
00:03:38.850 --> 00:03:40.530
I don't want to ruin the surprise again.

54
00:03:40.950 --> 00:03:49.080
Now, the good thing about the implicit binding is you can create a function with which is this aware

55
00:03:49.080 --> 00:03:53.700
now, a function that has the this keyword inside of it is called this aware.

56
00:03:53.970 --> 00:03:59.130
And we can call it like five times two times in this case, five times a thousand times.

57
00:03:59.400 --> 00:04:00.300
It doesn't matter.

58
00:04:00.310 --> 00:04:03.030
We can call it as many times as we want.

59
00:04:03.060 --> 00:04:10.380
OK, now, in this case, the movie Sharp Object movie Shaft one and movie shop two objects, they are

60
00:04:10.380 --> 00:04:13.140
two distinct objects, OK?

61
00:04:13.320 --> 00:04:16.350
They are two separate pieces of data.

62
00:04:16.660 --> 00:04:25.620
OK, and they they have two distinct two distinct movies, movie properties inside of them.

63
00:04:25.830 --> 00:04:31.280
They do call the movie func right here, but they're movie property is different.

64
00:04:31.290 --> 00:04:34.770
So in this case we have click and in this case we have Leape here.

65
00:04:35.140 --> 00:04:35.520
Right.

66
00:04:35.790 --> 00:04:46.920
So but because we have a reference to the movie function, OK, when I call this this movie func, because

67
00:04:46.920 --> 00:04:53.580
it is actually referring to this movie shop one and movie shop to the this keyword is going to refer

68
00:04:53.850 --> 00:04:58.110
in the case of the movie shop one, it is going to refer to movie shop one.

69
00:04:58.350 --> 00:05:05.310
And in the case of movies, shop to the this keyword is going to refer to movie shop to Y because movie

70
00:05:05.310 --> 00:05:08.940
shop one accesses or calls this function.

71
00:05:09.930 --> 00:05:16.020
OK, so the this keyword is going to end up pointing at this movie shop one and movie shop two also

72
00:05:16.020 --> 00:05:17.160
calls this function.

73
00:05:17.170 --> 00:05:20.200
So this keyword can be called inside here as well.

74
00:05:20.430 --> 00:05:25.350
So if I save it we can see we have Click is a fantastic movie.

75
00:05:25.420 --> 00:05:26.760
Leafier is a romantic movie.

76
00:05:27.240 --> 00:05:34.410
So even though we have one function, but we have two different this contexts for this function.

77
00:05:36.000 --> 00:05:41.640
Now, let's think back, OK, the way we explain the lexical scope.

78
00:05:42.120 --> 00:05:48.950
OK, now the idea of lexical scope is a very fixed and predictable thing, right?

79
00:05:49.380 --> 00:05:53.400
It is defined at Arthur Time or it's also called compile time.

80
00:05:53.700 --> 00:05:56.900
And nothing about the runtime can ever change that.

81
00:05:56.910 --> 00:06:03.120
And and here we have something that is not fixed and predictable.

82
00:06:03.330 --> 00:06:05.220
It's entirely dynamic.

83
00:06:05.640 --> 00:06:08.540
It's entirely determined at runtime.

84
00:06:09.390 --> 00:06:12.510
See, now the tradeoff here is not accidental.

85
00:06:13.050 --> 00:06:15.510
The tradeoff here is very intentional.

86
00:06:15.510 --> 00:06:23.800
And that what we really are getting is we are getting the choice between predictable and flexible.

87
00:06:24.270 --> 00:06:27.510
OK, and we benefit from the flexibility.

88
00:06:28.430 --> 00:06:36.170
OK, of being able to share one function across different contexts, but there are times when that flexibility

89
00:06:36.170 --> 00:06:41.510
is a downside and what I would prefer to have is predictability.

90
00:06:41.570 --> 00:06:47.090
OK, so we have a choice of between the flexibility and the predictability.

91
00:06:47.310 --> 00:06:50.660
It's not that one is right and the other is wrong.

92
00:06:50.840 --> 00:06:59.420
It's just that these are different tools that that they hand and that they have different benefits.

93
00:06:59.450 --> 00:07:09.230
OK, now in this in these two examples, we just saw the flexibility of the discord.

94
00:07:09.560 --> 00:07:14.540
The next way that we can call a function is called the explicit binding.

95
00:07:14.780 --> 00:07:19.130
So what I'm going to do is I'm just going to come in this one out and I'm going to save it and I'm going

96
00:07:19.130 --> 00:07:21.050
to go ahead and I'm going to copy.

97
00:07:22.440 --> 00:07:29.580
This and I'm going to paste it right here, so the second way to call a function is explicit, binding,

98
00:07:29.790 --> 00:07:31.140
and I'm not going to save it.

99
00:07:31.410 --> 00:07:36.570
Now, the here we have a function again, the same movie func again.

100
00:07:36.570 --> 00:07:38.130
We have two different objects.

101
00:07:38.130 --> 00:07:43.410
But keep in mind that none of these objects has a method called movie func.

102
00:07:43.740 --> 00:07:45.690
So we don't have that method here.

103
00:07:45.690 --> 00:07:51.540
Again, we just have one property that is movie right now, the dot com method.

104
00:07:51.540 --> 00:07:52.830
We just talked about it.

105
00:07:52.860 --> 00:07:56.430
We we talked about the dot com method in our previous lecture.

106
00:07:56.730 --> 00:08:03.720
And I told you how it refers to an object, but what it actually refers to, I know at the end it is

107
00:08:03.720 --> 00:08:05.040
going to grab this object.

108
00:08:05.040 --> 00:08:11.460
But actually what it refers to, it is going to grab the this keyword as the first argument.

109
00:08:11.470 --> 00:08:17.310
OK, if you have visited the link that I gave you in the previous lecture, you might have said, OK,

110
00:08:17.310 --> 00:08:19.790
what this is going to take this keyword.

111
00:08:20.430 --> 00:08:27.660
The reason that we use call is because the first argument is always going to point to the this keyword.

112
00:08:28.140 --> 00:08:35.520
OK, now the first argument is that this keyword and when this is the this keyword, what is movie shop

113
00:08:35.520 --> 00:08:37.409
one movie shop one.

114
00:08:37.650 --> 00:08:41.220
I know it is it is going to point to the discovery.

115
00:08:41.220 --> 00:08:44.220
But what it represents, it represents an object.

116
00:08:44.940 --> 00:08:48.990
That's why we say that the first does this movie shop.

117
00:08:48.990 --> 00:08:55.020
The first argument is an object, because in the case in the previous lecture's case and in this case,

118
00:08:55.260 --> 00:08:57.390
it is going to grab an object.

119
00:08:57.810 --> 00:09:01.980
And does this object have a movie property on it?

120
00:09:02.220 --> 00:09:03.300
Yes, it does.

121
00:09:03.300 --> 00:09:04.290
Movie shop one does.

122
00:09:04.530 --> 00:09:07.050
So this movie is going to give us click.

123
00:09:07.440 --> 00:09:11.460
And in this case, this movie is going to give us the leap here.

124
00:09:12.300 --> 00:09:21.630
And because we are not in the in the case of implicit binding, we talked about we we talked about how

125
00:09:21.630 --> 00:09:25.050
that is what the this keyword points out indirectly.

126
00:09:25.410 --> 00:09:28.980
But in here we know what it directly points out.

127
00:09:29.250 --> 00:09:33.870
That's why we use the call method and that's why it's called explicit binding.

128
00:09:34.260 --> 00:09:42.300
We are explicitly providing that this key word as the first argument to this call method.

129
00:09:42.780 --> 00:09:45.060
And what is this is represented by?

130
00:09:45.060 --> 00:09:46.740
It is represented by an object.

131
00:09:46.980 --> 00:09:50.400
So this movie is actually a movie shop, dot movie.

132
00:09:50.400 --> 00:09:52.880
So movies have that movie is going to give us click.

133
00:09:53.100 --> 00:09:55.050
So this that movie is going to give us click.

134
00:09:55.350 --> 00:10:00.630
And you can see that we have not used the object to call this function in here.

135
00:10:00.630 --> 00:10:06.060
We used movie shop, one dot movie func, but in here we just say movie dot com.

136
00:10:06.070 --> 00:10:07.100
All right.

137
00:10:07.350 --> 00:10:11.850
So movie shop one is going to grab this and it is going to move up to this.

138
00:10:11.850 --> 00:10:13.740
The movie shop is going to grab this movie.

139
00:10:14.010 --> 00:10:16.650
And if I save it, we get the same results here.

140
00:10:17.580 --> 00:10:18.880
But what if you might ask?

141
00:10:18.880 --> 00:10:24.110
Okay, what if we don't have that specific property for that specific object?

142
00:10:24.360 --> 00:10:32.880
So if I were to comment this one out and let's say like cinema, like a movie company.

143
00:10:33.780 --> 00:10:40.770
And I would just say, like one in bribes, right, and if I save it, we are going to get an undefined

144
00:10:40.770 --> 00:10:44.790
for this cure because it cannot access the this keyword.

145
00:10:45.360 --> 00:10:52.770
It knows that the this keyword is pointing at this object, but we have no way of grabbing the discourse

146
00:10:52.770 --> 00:10:53.240
value.

147
00:10:53.580 --> 00:10:58.850
If I were to say this DOT movie company, we would say like WB.

148
00:10:59.190 --> 00:11:06.240
So if I were to come this one out and copy it below and movie.

149
00:11:07.180 --> 00:11:14.410
This that movie you can see we have here company, and if I say it, it says WB is a fantastic movie

150
00:11:14.410 --> 00:11:17.040
and now you can see that this one is undefined.

151
00:11:17.200 --> 00:11:17.830
Why?

152
00:11:17.860 --> 00:11:25.180
Because when it comes to the second object, we have also said this is a movie company and this doesn't

153
00:11:25.180 --> 00:11:27.400
have a this that movie company.

154
00:11:27.550 --> 00:11:30.820
It doesn't have a movie company object attached to it.

155
00:11:31.420 --> 00:11:33.690
So I'm just going to do this.

156
00:11:33.700 --> 00:11:36.820
I'm going to I'm going to keep it here so you know how these work.

157
00:11:37.180 --> 00:11:38.170
OK, now.

158
00:11:40.490 --> 00:11:49.430
There is another way to call using in the explicit binding rule, and that is the dot dot apply method

159
00:11:49.430 --> 00:11:54.350
and also that blind method, which I'm not going to dive into because both of them actually do the same

160
00:11:54.350 --> 00:12:00.230
thing as this dot call, except for the dot binder, which is like a really, really, really advanced

161
00:12:00.230 --> 00:12:06.860
topic, which I really don't feel like getting into, because that is going to confuse, like really,

162
00:12:06.860 --> 00:12:07.740
really confuse you.

163
00:12:08.150 --> 00:12:13.190
So even though this is a different JavaScript, but that is like on a whole different level, that blind

164
00:12:13.190 --> 00:12:15.670
method, and I'm not going to talk about it, OK?

165
00:12:17.030 --> 00:12:23.510
So at the end, I just want to say that we have covered two ways that we can call a function.

166
00:12:23.510 --> 00:12:32.390
The first way was implicit binding, where we implicitly found out what the this keyword is pointing

167
00:12:32.390 --> 00:12:32.590
out.

168
00:12:32.810 --> 00:12:39.830
But in the explicit binding case, we know what the this key word is going to point out explicitly.

169
00:12:39.830 --> 00:12:42.250
So we know it is going to point out the movie shop one.

170
00:12:42.410 --> 00:12:43.820
It is so obvious.

171
00:12:44.270 --> 00:12:44.640
Right.

172
00:12:45.350 --> 00:12:46.560
That's it for this lecture.

173
00:12:46.580 --> 00:12:48.020
See you guys in the next one.

