WEBVTT
1
00:00:02.420 --> 00:00:07.310
Hi, everyone, in this lecture, we are going to talk about String Method's.

2
00:00:08.960 --> 00:00:15.290
All right, so we know what the word string means in the world of JavaScript, but we don't know what

3
00:00:15.290 --> 00:00:19.060
the word method means in the world of JavaScript.

4
00:00:19.430 --> 00:00:22.200
So methods are actually functions.

5
00:00:22.980 --> 00:00:27.090
Now, you might ask, okay, what is the difference between a method and a function?

6
00:00:27.440 --> 00:00:32.720
Now, functions are called or are defined or are declared standalone.

7
00:00:32.990 --> 00:00:41.220
When we call a function as a property of an object, then that functions name becomes a method.

8
00:00:41.960 --> 00:00:44.200
So methods are actually functions.

9
00:00:44.420 --> 00:00:50.810
But the difference with a regular JavaScript function is that methods are called upon objects.

10
00:00:51.050 --> 00:00:56.000
Now you might ask, OK, what is the relationship between a string and an object?

11
00:00:56.000 --> 00:01:00.140
Because strings, they are primitive data types and objects.

12
00:01:00.140 --> 00:01:01.910
They are reference data types.

13
00:01:02.660 --> 00:01:11.260
Now the relationship comes into play when I tell you that we can create strengths in two ways in JavaScript.

14
00:01:11.630 --> 00:01:18.920
So the first way that I'm going to do is through the through the new string object.

15
00:01:19.070 --> 00:01:21.860
So this is the first way that we can create strengths.

16
00:01:22.040 --> 00:01:28.490
And I'm just going to show you now, because we can create strings through the new string object.

17
00:01:28.670 --> 00:01:33.550
That's why strings can borrow methods from objects.

18
00:01:33.590 --> 00:01:33.920
Right.

19
00:01:34.400 --> 00:01:36.980
So let's go ahead and let's call it not name.

20
00:01:37.790 --> 00:01:39.050
Let's call it like.

21
00:01:41.950 --> 00:01:42.460
City.

22
00:01:43.540 --> 00:01:51.220
All right, so to create a string using the string object, we just say string, and in here we pass

23
00:01:51.220 --> 00:01:51.680
in the name.

24
00:01:51.700 --> 00:01:52.730
So it is London.

25
00:01:53.200 --> 00:01:53.620
All right.

26
00:01:53.770 --> 00:01:56.830
Now, let's go ahead and let's call it cancel the log.

27
00:01:57.010 --> 00:02:00.670
Let's print it to the console and we are going to say city.

28
00:02:00.830 --> 00:02:04.210
And when I say that you're going to see that it says it is a string.

29
00:02:04.330 --> 00:02:11.350
And I guess I can see that the syntax, it resembles an object, but it is actually not an object.

30
00:02:11.650 --> 00:02:13.450
Strings are not objects.

31
00:02:13.450 --> 00:02:18.190
They behave as though they're objects, but they're not objects.

32
00:02:18.400 --> 00:02:25.820
We can apply object methods on strengths and that that does not make them string, that does not make

33
00:02:25.820 --> 00:02:29.290
them objects, but they can behave like objects.

34
00:02:29.440 --> 00:02:35.860
And in here you can see that every word, every letter of this word has been indexed starting from the

35
00:02:35.860 --> 00:02:36.250
zero.

36
00:02:36.400 --> 00:02:43.360
So indices in JavaScript, they start from zero and the number of indexes is always one less than the

37
00:02:43.360 --> 00:02:47.920
length of that, whatever that is, whether that is an object or an array.

38
00:02:48.550 --> 00:02:48.840
All right.

39
00:02:48.850 --> 00:02:52.570
So this is the first way of creating a string.

40
00:02:52.840 --> 00:02:59.980
The second way is through string literal, which is actually the official name after ESX was released

41
00:03:00.220 --> 00:03:02.260
or E 215 was released.

42
00:03:02.440 --> 00:03:08.070
It is actually a string literal or a Narey literal, an object literal.

43
00:03:08.080 --> 00:03:10.420
We do not like call him object anymore.

44
00:03:10.600 --> 00:03:11.980
We call him object literal.

45
00:03:12.160 --> 00:03:18.910
But what about when we say object we actually mean object literal or string literal because it's easier

46
00:03:18.910 --> 00:03:20.760
to say, it's easier to pronounce.

47
00:03:21.730 --> 00:03:29.440
Now in the second way, let's say we have another let's create another string using the string literal

48
00:03:29.620 --> 00:03:33.190
and I'm going to say movie and the movie name.

49
00:03:33.190 --> 00:03:36.310
Let's go ahead and let's say Memento.

50
00:03:37.270 --> 00:03:38.010
Memento.

51
00:03:38.050 --> 00:03:46.360
All right, let's log it to the console movie, and we are going to see that we only have momentum.

52
00:03:46.540 --> 00:03:52.600
So this is a string literal and what we saw before was a string object.

53
00:03:52.630 --> 00:03:56.270
OK, so now there are some methods.

54
00:03:56.330 --> 00:03:59.030
Now, there are actually a lot of methods for strength.

55
00:03:59.300 --> 00:04:05.380
What I'm going to do is I'm just going to cover the most relevant and most used ones.

56
00:04:05.400 --> 00:04:05.730
All right.

57
00:04:05.890 --> 00:04:10.480
So the first method that I want to talk about is actually called to uppercase.

58
00:04:10.810 --> 00:04:16.240
And what does and what this method does is it grabs any string and it uppercase.

59
00:04:16.240 --> 00:04:23.650
Is that all the letters inside that word or inside that sentence or inside that string will become uppercase.

60
00:04:23.980 --> 00:04:30.280
So now let's go ahead and let's grab this movie, string this memento and let's uppercase.

61
00:04:30.350 --> 00:04:35.200
So for that, I'm just going to come into the console that look there and in here, I'm just going to

62
00:04:35.200 --> 00:04:38.050
go ahead and call another console, the lock.

63
00:04:38.800 --> 00:04:45.430
And the way you can call methods up on strings is that first you write the name of the string and then

64
00:04:45.430 --> 00:04:46.180
you do doeth.

65
00:04:46.390 --> 00:04:50.100
When you do that, you have access to all of these methods.

66
00:04:50.440 --> 00:04:53.710
These are all methods in JavaScript now.

67
00:04:54.160 --> 00:04:57.700
Methods are actually properties of an object.

68
00:04:57.730 --> 00:04:58.060
All right.

69
00:04:58.270 --> 00:05:03.490
So in JavaScript we have methods and we have properties.

70
00:05:03.610 --> 00:05:08.590
And when you have this sort of cube, this like, I don't know, is it like purple?

71
00:05:08.890 --> 00:05:09.910
These are methods.

72
00:05:10.000 --> 00:05:15.910
And when they are blue like this one and they're rotated like this, they are properties.

73
00:05:16.060 --> 00:05:17.980
So the length is a property.

74
00:05:18.400 --> 00:05:19.970
The rest of them are methods.

75
00:05:20.350 --> 00:05:26.560
Again, let's see, we don't have any other property, so we grab the two uppercase because this is

76
00:05:26.560 --> 00:05:27.310
a method.

77
00:05:27.400 --> 00:05:32.890
You have to provide it with the parentheses, with an opening and closing parentheses.

78
00:05:33.250 --> 00:05:41.350
But when you call properties on any string or on anything, then you don't have to provide it with the

79
00:05:41.350 --> 00:05:42.160
parentheses.

80
00:05:42.430 --> 00:05:42.790
All right.

81
00:05:42.940 --> 00:05:46.630
That's the difference between a property and a method.

82
00:05:48.010 --> 00:05:51.920
And now you guys can see this this this momentum has been capitalized.

83
00:05:52.300 --> 00:05:55.210
So this is the first method that I wanted to talk about.

84
00:05:55.480 --> 00:05:57.730
The second method is, you guessed it right.

85
00:05:57.730 --> 00:06:00.790
It's to lower case, lower case.

86
00:06:00.940 --> 00:06:03.790
And here you can see the actual camel case.

87
00:06:04.120 --> 00:06:08.590
Upper upper is the second word and the first letter has been capitalized.

88
00:06:08.920 --> 00:06:13.440
Case is the third word and the first letter has been capitalized.

89
00:06:13.690 --> 00:06:16.480
This is how camel casing works in JavaScript.

90
00:06:17.050 --> 00:06:22.690
So now what I'm going to do is we are just going to plug it to the console because it's way better.

91
00:06:22.900 --> 00:06:25.080
Like visually we can see that.

92
00:06:25.240 --> 00:06:31.480
So we are going to call our variable name, which is movie, and we are going to tap into the world

93
00:06:31.480 --> 00:06:35.890
of methods and we are going to say to lowercase.

94
00:06:37.220 --> 00:06:46.400
To lower case and do not forget the opening and closing quarterly basis, because this is a method and

95
00:06:46.400 --> 00:06:52.100
let's save it now, everything is lowercase again, OK, to make sure that it is lower case.

96
00:06:52.130 --> 00:06:58.640
I'm just going to go ahead uncommented out there and I'm going to write it here uncommented and I'm

97
00:06:58.640 --> 00:07:04.810
going to provide all the letters capital momento.

98
00:07:05.960 --> 00:07:08.400
All right, so if it doesn't make a difference.

99
00:07:08.900 --> 00:07:11.940
So this was the second method that I wanted to talk about.

100
00:07:12.140 --> 00:07:14.300
I'm just going to come and this back in.

101
00:07:14.870 --> 00:07:19.430
The third method method that I want to talk about is actually called concatenation.

102
00:07:19.850 --> 00:07:20.270
Right.

103
00:07:21.350 --> 00:07:26.750
So how can we join two strings together?

104
00:07:26.780 --> 00:07:33.770
OK, so a better example of this would be like a full name and a name and a phone name.

105
00:07:33.780 --> 00:07:40.270
So I'm just going to say concat to concatenation, I hope I spelled it correctly.

106
00:07:40.760 --> 00:07:47.660
So let's say we have a name and the name is Tony.

107
00:07:47.960 --> 00:07:48.440
Right.

108
00:07:48.710 --> 00:07:57.400
And then let's say we have a last name and the last name is Rogers.

109
00:07:58.010 --> 00:07:58.420
Right.

110
00:07:58.940 --> 00:08:03.110
Let me grab this one and change it to first name.

111
00:08:04.150 --> 00:08:04.680
First name.

112
00:08:04.720 --> 00:08:16.030
All right, so now if I go ahead, if I go ahead and if I sort the log first name plus last name, let's

113
00:08:16.030 --> 00:08:16.410
save it.

114
00:08:16.540 --> 00:08:21.940
And now you guys can see we have Tony Rogers, but we don't have any space in between them.

115
00:08:22.090 --> 00:08:24.500
So how can we remedy that, though?

116
00:08:24.710 --> 00:08:32.320
There are the the first way that we can remedy that is just provide an empty string here.

117
00:08:32.890 --> 00:08:37.890
So the empty string is going to have a space inside of that, inside of it.

118
00:08:38.080 --> 00:08:42.039
And when we save it now, you guys can see we have some space here, right.

119
00:08:42.190 --> 00:08:45.400
So this is the first way that we can remedy this.

120
00:08:45.670 --> 00:08:50.470
The second way is using a string template.

121
00:08:52.420 --> 00:09:01.300
Template, literal, OK, and string template literals is instead of these quotes we use back tick's

122
00:09:01.540 --> 00:09:06.250
now in my keyboard keyboard Batek, they are on top of the tab key.

123
00:09:06.370 --> 00:09:12.150
You can just show the onscreen keyboard and searched for their right.

124
00:09:12.670 --> 00:09:19.360
So in here what I'm going to do is I'm going to say console the log and we are going to hit our tactics

125
00:09:19.360 --> 00:09:20.830
and I hope you guys can see it.

126
00:09:20.830 --> 00:09:22.000
I'm just going to zoom it in.

127
00:09:22.640 --> 00:09:24.160
Oh, it's not zooming in.

128
00:09:25.270 --> 00:09:26.430
Yeah, it is zooming.

129
00:09:26.440 --> 00:09:29.380
And so now you guys can see these are actually back tricks.

130
00:09:29.390 --> 00:09:31.270
They're not quotes anymore.

131
00:09:33.120 --> 00:09:37.290
All right, so in here, what I'm going to do is I'm going to I'm going to use a template literal,

132
00:09:37.560 --> 00:09:40.620
which starts with a dollar sign and to curly braces.

133
00:09:41.070 --> 00:09:45.860
And in the first one, I'm just going to write first name and I'm going to provide a space.

134
00:09:46.050 --> 00:09:48.500
And in the second one, I'm going to write the last name.

135
00:09:48.770 --> 00:09:55.770
OK, now keep in mind that inside this template literals, you can only pass variables you cannot pass

136
00:09:55.770 --> 00:09:58.020
like simple strings.

137
00:09:58.020 --> 00:10:01.270
You should pass a valid JavaScript identifiers.

138
00:10:01.530 --> 00:10:03.660
And when we save it, the result is the same.

139
00:10:04.470 --> 00:10:06.420
So the next method and the.

140
00:10:08.190 --> 00:10:14.110
Last one that I want to talk about in this lecture is the length, which is not actually a method,

141
00:10:14.120 --> 00:10:15.410
it is a prop..

142
00:10:15.750 --> 00:10:19.430
OK, so it is the length property length.

143
00:10:20.330 --> 00:10:20.720
Right.

144
00:10:20.870 --> 00:10:26.110
And the length property does exactly what this new strange object did.

145
00:10:26.330 --> 00:10:30.250
It gives us the length of the string that we have here.

146
00:10:30.380 --> 00:10:30.740
Right.

147
00:10:31.430 --> 00:10:37.820
So what I'm going to do is I'm going to go ahead and I'm going to say cancel the log and we are going

148
00:10:37.820 --> 00:10:39.350
to grab the first name.

149
00:10:39.830 --> 00:10:45.800
And we are simply going to say the length now, because length is a prop. we do not need to provide

150
00:10:45.800 --> 00:10:48.280
it with curly brace, with sorry parentheses.

151
00:10:48.860 --> 00:10:56.570
And when we say it is going to say four because t o and why there are four letters there, we can do

152
00:10:56.570 --> 00:10:58.370
the same for last name.

153
00:11:01.080 --> 00:11:06.690
And it should be six and now it is six, so that's it for this lecture.

154
00:11:06.720 --> 00:11:08.670
See you guys in the next one.

