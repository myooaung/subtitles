1
00:00:00,850 --> 00:00:05,950
Hi, everyone, in this election, we are going to talk about JavaScript daytimes.

2
00:00:07,370 --> 00:00:12,920
All right, so why do we have to talk about the data types in JavaScript?

3
00:00:13,160 --> 00:00:20,270
The reason for that is whenever we interact with any kind of Web page, we are we are actually interacting,

4
00:00:20,270 --> 00:00:22,670
interacting with different data types.

5
00:00:22,880 --> 00:00:31,160
And by data types, I mean, whether we are interacting with a number or we are interacting with a sentence

6
00:00:31,160 --> 00:00:37,700
which is also called or a word which is also called a string in JavaScript, whether we are interacting

7
00:00:37,700 --> 00:00:44,990
with true or false statements, maybe like a button is clicked, a button is not clicked.

8
00:00:44,990 --> 00:00:46,250
OK, true and false.

9
00:00:47,450 --> 00:00:56,450
Maybe like you have a four input where you insert your phone number that is in no data type.

10
00:00:56,630 --> 00:01:03,990
So data is represented by these all of these different components of any website.

11
00:01:04,370 --> 00:01:10,360
Now we are diving deep into JavaScript, so we have to start from data types.

12
00:01:10,700 --> 00:01:18,110
So after that we can go ahead and we can create applications because then we would know that what kind

13
00:01:18,110 --> 00:01:23,150
of data we have and what kind of data our application requires.

14
00:01:23,330 --> 00:01:27,740
If you take out the data part from any application.

15
00:01:27,950 --> 00:01:33,470
Well, actually, there is nothing left because any application is based off that data.

16
00:01:33,500 --> 00:01:36,640
For example, you create, for example, Facebook.

17
00:01:36,650 --> 00:01:37,020
All right.

18
00:01:37,190 --> 00:01:38,540
You have images.

19
00:01:38,540 --> 00:01:39,870
That is a date, OK?

20
00:01:40,040 --> 00:01:41,020
You have text.

21
00:01:41,020 --> 00:01:46,430
Do you have comments like dislikes or like friend requests your timeline?

22
00:01:46,430 --> 00:01:49,900
Everything is represented by a certain data type.

23
00:01:50,150 --> 00:01:54,650
And when you take out the data, there is nothing left to that language.

24
00:01:54,920 --> 00:01:55,250
Right.

25
00:01:55,430 --> 00:02:01,580
So in JavaScript, we have two very we have actually two data types.

26
00:02:01,760 --> 00:02:04,610
And one is like the primitive, primitive types.

27
00:02:04,610 --> 00:02:10,940
And the other one is the reference steps, the primitive type, the in the primitive type, the actual

28
00:02:10,940 --> 00:02:12,080
value is stored.

29
00:02:12,230 --> 00:02:15,710
Whenever we have data, we should store that data.

30
00:02:15,740 --> 00:02:19,510
OK, so storage and data, they go hand in hand.

31
00:02:19,820 --> 00:02:21,570
We also have reference types.

32
00:02:21,770 --> 00:02:25,930
A reference is stored to where that type is in the memory.

33
00:02:26,090 --> 00:02:26,400
Right.

34
00:02:26,570 --> 00:02:31,820
So we are going to dive into these types and if there is any confusion, we are going to remove it.

35
00:02:31,820 --> 00:02:35,560
And if you are new to JavaScript, you're going to learn all about it.

36
00:02:35,930 --> 00:02:42,220
So in the primitive types, we have seven primitive types, which I'm just going to go ahead.

37
00:02:42,240 --> 00:02:49,490
I'm going to create a common now the multiline comment of a JavaScript and Cyesis, they that resemble

38
00:02:49,490 --> 00:02:50,390
they are the same.

39
00:02:50,570 --> 00:02:58,340
But actually the single line JavaScript comments, there's just two to four to four slashes and that's

40
00:02:58,340 --> 00:02:58,490
it.

41
00:02:58,880 --> 00:03:02,950
So the first primitive type that we are going to talk about is no.

42
00:03:03,200 --> 00:03:05,450
The second one is string.

43
00:03:05,990 --> 00:03:10,510
The third one is Boolean, which is true or false.

44
00:03:11,240 --> 00:03:17,000
The fourth one is undefined, the fifth one is null.

45
00:03:17,810 --> 00:03:20,570
The sixth one is symbol.

46
00:03:21,320 --> 00:03:29,000
The seventh one, which is a new addition to JavaScript, is big and or big integers.

47
00:03:29,510 --> 00:03:29,930
All right.

48
00:03:30,590 --> 00:03:36,020
So so what I'm going to do is first I'm going to show you a presentation inside the console, so I'm

49
00:03:36,020 --> 00:03:37,820
just going to zoom it in a bit more.

50
00:03:38,060 --> 00:03:40,710
So let's go ahead and let's create a number.

51
00:03:40,880 --> 00:03:45,950
So this console inside this console, any foully JavaScript code can run.

52
00:03:46,250 --> 00:03:48,490
That is just a fun fact about the console.

53
00:03:48,930 --> 00:03:49,210
Right.

54
00:03:49,220 --> 00:03:55,080
So let's go ahead and let's increase the console a bit so we can work better with it.

55
00:03:55,280 --> 00:04:02,690
So if I go ahead and if I write 15, this is a number and numbers are usually blue or like this represented

56
00:04:02,690 --> 00:04:03,290
like this.

57
00:04:04,870 --> 00:04:11,110
All right, so we have like let's say 154, this is a number we can say ten, ten, ten.

58
00:04:11,110 --> 00:04:13,190
This is a number 20 to only 20.

59
00:04:13,240 --> 00:04:18,430
This is a number we can apply mathematical operations on these numbers.

60
00:04:18,610 --> 00:04:22,110
We can, for example, say 15 plus 15.

61
00:04:22,120 --> 00:04:23,170
We are going to get 30.

62
00:04:23,500 --> 00:04:28,080
If you want to like a very fancy calculator, you can use it like that.

63
00:04:28,450 --> 00:04:32,600
So let's say we have three twenty one multiplied by one, two and three.

64
00:04:32,940 --> 00:04:33,940
We are going to get that.

65
00:04:34,150 --> 00:04:44,320
We are going to say 394, 83, divided by let's go ahead with five and then we are going to divide it

66
00:04:44,320 --> 00:04:46,470
by we can divide it by ten as well.

67
00:04:46,930 --> 00:04:53,140
So you can do simple mathematical operations, arithmetic operations with the console as well.

68
00:04:53,140 --> 00:04:57,250
We can say like 54 minus 13, we are going to get 41.

69
00:04:58,390 --> 00:05:05,700
All right, so this is the first data type that I want you I wanted to talk about, this is the number

70
00:05:05,710 --> 00:05:06,370
data type.

71
00:05:06,820 --> 00:05:14,470
The second one that I want to talk about is the the strength, OK, strength data type is used whenever

72
00:05:14,470 --> 00:05:17,280
we want to write, like, actual characters.

73
00:05:17,710 --> 00:05:24,960
For example, let's go ahead and let's say let's let me write my own name and we are going to get.

74
00:05:25,360 --> 00:05:26,050
All right.

75
00:05:26,290 --> 00:05:34,090
So strengths in JavaScript, they are written inside quotes be a double quotes or single quotes.

76
00:05:34,100 --> 00:05:35,350
You have to be consistent.

77
00:05:35,650 --> 00:05:38,890
So the starting code has to match the ending code.

78
00:05:39,160 --> 00:05:44,620
If it doesn't match, you're going to it is going to throw an error rate invalid or unexpected token

79
00:05:44,800 --> 00:05:47,800
because the starting code does not match the ending.

80
00:05:47,810 --> 00:05:52,600
Quote, of course, we can write more than one word there and we can just say.

81
00:05:55,760 --> 00:05:57,860
All right, and we are going to get that.

82
00:06:00,640 --> 00:06:08,740
All right, in the no data type, we also have another very unique data, another very unique value,

83
00:06:08,740 --> 00:06:13,210
which is in and now in and refers to not a number.

84
00:06:13,510 --> 00:06:18,730
It has a numeric value and is used to show something that is not a number.

85
00:06:18,910 --> 00:06:25,360
For example, if we go ahead and if we say 18 plus and we are going to get not a number, we can also

86
00:06:25,360 --> 00:06:29,410
say 18 multiplied by one and we are going to get another number.

87
00:06:29,530 --> 00:06:29,980
All right.

88
00:06:30,160 --> 00:06:35,620
We are going to say 18 minus in a and again, we are going to get not a number.

89
00:06:35,800 --> 00:06:41,530
And if even if we go ahead and we divide it by and again, we are going to get not a number.

90
00:06:41,890 --> 00:06:46,420
OK, if you go ahead and divide zero by zero, you're going to get not a number.

91
00:06:46,600 --> 00:06:49,940
If you divide one by zero, you're going to get infinity.

92
00:06:49,960 --> 00:06:52,960
Of course, like exactly the mathematical rules.

93
00:06:53,080 --> 00:06:55,690
And if you divide one by infinity.

94
00:06:57,870 --> 00:06:58,820
You're going to get easier.

95
00:06:59,160 --> 00:07:05,650
OK, so that's it for numbers and for strength booleans, they're either true or false.

96
00:07:05,880 --> 00:07:08,840
So we have a true and we have a false.

97
00:07:09,270 --> 00:07:11,470
OK, it's not flies.

98
00:07:11,490 --> 00:07:12,660
It's false.

99
00:07:13,050 --> 00:07:15,960
OK, so this is another data type.

100
00:07:16,710 --> 00:07:23,070
We also have undefined now, undefined and no, they're sort of the same, but they're actually different.

101
00:07:23,340 --> 00:07:28,650
Undefined is the lack of a value when something doesn't have a real value.

102
00:07:28,920 --> 00:07:37,200
For example, if you go ahead and if we say let my name like and then we are going to get undefined.

103
00:07:37,200 --> 00:07:37,470
All right.

104
00:07:37,500 --> 00:07:40,730
Because we have not assigned my name to anything.

105
00:07:40,980 --> 00:07:43,820
So the value of my name is going to be undefined.

106
00:07:44,010 --> 00:07:53,310
But if I go ahead and if I say my name is equal to Muslim, then we are not going to get undefined anymore.

107
00:07:53,500 --> 00:07:53,910
Right.

108
00:07:55,130 --> 00:07:57,840
And we are going to get so what is the value of my name?

109
00:07:58,340 --> 00:07:59,670
We are going to get Muslim.

110
00:07:59,750 --> 00:08:00,120
All right.

111
00:08:00,350 --> 00:08:08,540
So when there is no value, it is undefined, but no null is the purpose for an assignment of a variable

112
00:08:08,990 --> 00:08:13,070
like we are purposefully not assigning something.

113
00:08:13,100 --> 00:08:21,170
OK, so at first, for example, when a user logs in, when no user logs in, we want the like the registration

114
00:08:21,170 --> 00:08:26,770
form to have, for example, reggi form to have nothing inside of it.

115
00:08:26,780 --> 00:08:31,940
So we just go ahead and we do not assign it to anything and we just say no, that's it.

116
00:08:32,330 --> 00:08:38,470
But later on when the user logs in then this no is going to become the name of that user.

117
00:08:38,630 --> 00:08:38,970
Right.

118
00:08:39,289 --> 00:08:41,570
So let me like demonstrated better.

119
00:08:41,750 --> 00:08:45,430
So we are going to say user name, user name.

120
00:08:45,560 --> 00:08:51,050
It is not by default, but when the user signs up, it is going to go ahead.

121
00:08:51,050 --> 00:08:55,010
And if it is going to turn into something, it is going to turn into a string.

122
00:08:55,190 --> 00:08:57,650
And now user name is Musleh.

123
00:08:58,280 --> 00:08:58,640
Right.

124
00:08:58,760 --> 00:09:01,600
So this is the difference between null and undefined.

125
00:09:01,610 --> 00:09:07,370
And finally in this letter, I just want to talk about the symbol and the rest we are going to cover

126
00:09:07,370 --> 00:09:08,520
in the next lecture.

127
00:09:08,870 --> 00:09:14,230
So Symbol is created by calling the symbol global factory function.

128
00:09:14,600 --> 00:09:21,710
We can go ahead and we can say const, for example, let's go ahead and let's create a symbol and we

129
00:09:21,710 --> 00:09:25,030
are going to call the global factory function.

130
00:09:25,760 --> 00:09:27,920
So now we have created a symbol.

131
00:09:28,130 --> 00:09:33,330
Now the cool thing about symbols is No two symbol in JavaScript are the same.

132
00:09:33,590 --> 00:09:35,060
So this symbol.

133
00:09:36,130 --> 00:09:38,460
Is not equal to this symbol.

134
00:09:39,990 --> 00:09:43,260
OK, and it returns a boolean, which says false.

135
00:09:43,530 --> 00:09:46,750
So no two symbols there are the same in JavaScript.

136
00:09:47,190 --> 00:09:50,880
So no string boolean undefined null.

137
00:09:51,150 --> 00:09:55,770
They are commonly used, especially the number of string and boolean undefined.

138
00:09:55,770 --> 00:09:57,390
And no, they, they're not commonly used.

139
00:09:58,050 --> 00:10:00,810
Symbol is is rarely used.

140
00:10:00,840 --> 00:10:06,720
OK, big integer, big into a big integer we are going to talk about in our next lecture's because it's

141
00:10:06,720 --> 00:10:08,340
a bit trickier to work with.

142
00:10:08,820 --> 00:10:09,170
Right.

143
00:10:09,180 --> 00:10:16,420
And if there are any like sort of confusions and uncertainties about this, let's just go ahead and

144
00:10:16,420 --> 00:10:23,460
re watch it and you can go ahead and move on to the next nachas, because these are actually the things

145
00:10:23,460 --> 00:10:25,740
that we are going to work the most with.

146
00:10:26,100 --> 00:10:32,260
When we were actually we are going to work with it all the time when we create applications with JavaScript.

147
00:10:32,730 --> 00:10:34,620
See you guys in the next lecture.

