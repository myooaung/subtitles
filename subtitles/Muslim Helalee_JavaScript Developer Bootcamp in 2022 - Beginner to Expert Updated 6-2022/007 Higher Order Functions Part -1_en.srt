1
00:00:01,480 --> 00:00:02,290
Hi, everyone.

2
00:00:02,440 --> 00:00:06,790
In this lecture, we are going to talk about higher order functions.

3
00:00:07,760 --> 00:00:12,630
All right, so what are higher order functions now, higher order functions?

4
00:00:12,650 --> 00:00:21,770
It is a very, very fancy term for functions which are accepted, accepting other functions as arguments

5
00:00:21,920 --> 00:00:26,870
or functions, which are accepting other functions as a return values.

6
00:00:27,710 --> 00:00:30,970
I mean, I know that didn't make it any simpler.

7
00:00:30,980 --> 00:00:31,340
Right.

8
00:00:31,760 --> 00:00:34,220
So let's go ahead and let's dive into the code.

9
00:00:34,520 --> 00:00:40,040
So first off, we are going to talk about functions which are accepting other functions as arguments

10
00:00:40,160 --> 00:00:42,290
so we know what the function argument is.

11
00:00:42,290 --> 00:00:48,000
Instead of passing a random thing there, we pass in another function.

12
00:00:48,290 --> 00:00:50,510
So let's go ahead and let's create.

13
00:00:52,860 --> 00:00:58,890
It's come down, so this is going to be our first scenario and let's go ahead and let's copy it and

14
00:00:58,890 --> 00:01:04,110
put it here again, functions accepting other functions as arguments.

15
00:01:04,440 --> 00:01:09,570
So now what I'm going to do is I'm going to create a function declaration and I'm going to call it repeat.

16
00:01:10,610 --> 00:01:16,310
And I'm going to Posehn as a parameter X, because when you don't pass in a parameter, how would you

17
00:01:16,310 --> 00:01:17,920
expect to pass in arguments?

18
00:01:18,230 --> 00:01:18,500
Right.

19
00:01:18,710 --> 00:01:24,190
And I'm going to call this X twice inside its own function.

20
00:01:24,410 --> 00:01:24,760
All right.

21
00:01:25,010 --> 00:01:28,870
And I'm going to create another function called NUM.

22
00:01:29,030 --> 00:01:30,830
And I'm not going to pass in anything.

23
00:01:30,830 --> 00:01:32,630
And I'm going to say consider log.

24
00:01:35,420 --> 00:01:38,480
Two plus five.

25
00:01:39,500 --> 00:01:47,090
Right, and now now none of these functions has been called we have a fun function of repeat, which

26
00:01:47,090 --> 00:01:53,630
is going to repeat two times its parameter, and we have a function of norm which is going to calculate

27
00:01:53,630 --> 00:01:54,500
two plus five.

28
00:01:54,860 --> 00:01:56,050
Now, let's go ahead.

29
00:01:56,210 --> 00:01:58,140
Let's call the repeat function.

30
00:01:58,910 --> 00:01:59,270
All right.

31
00:01:59,480 --> 00:02:06,110
We are going to call the repeat function, but instead of passing a value for this X, we are going

32
00:02:06,110 --> 00:02:08,900
to pass on this NUM function.

33
00:02:09,500 --> 00:02:17,180
So now when we're passing the NUM function, this function, this num function has been passed in as

34
00:02:17,180 --> 00:02:19,570
an argument to the repeat function.

35
00:02:19,880 --> 00:02:28,130
And when we say that we are going to see that this seven has been repeated twice because the repeat

36
00:02:28,130 --> 00:02:32,080
function basically repeats any code two times.

37
00:02:32,390 --> 00:02:39,560
And what is that code which has been repeated two times is two plus five because NUM is an argument

38
00:02:39,800 --> 00:02:45,180
and when this NUM is called inside here, it says I'm going to consider the log 2.5.

39
00:02:45,530 --> 00:02:50,180
And when it is passed in here, it is going to consider like two point five, which is seven.

40
00:02:50,330 --> 00:02:51,860
And we are we are going to get this.

41
00:02:52,100 --> 00:02:56,300
But in here the function repeats, says I'm going to repeat two times.

42
00:02:56,460 --> 00:02:57,950
That's why we are going to get seven.

43
00:02:58,580 --> 00:03:03,140
So this is called functions, accepting other functions as argument.

44
00:03:03,530 --> 00:03:11,780
And the second part of higher order functions is functions accepting other functions as returned values.

45
00:03:12,230 --> 00:03:21,200
Now, before moving forward, functions which are arguments to other functions are also called callback

46
00:03:21,200 --> 00:03:21,890
functions.

47
00:03:22,280 --> 00:03:24,020
Callback functions.

48
00:03:24,230 --> 00:03:24,620
Right.

49
00:03:25,700 --> 00:03:30,170
So this num I'm just going to add this the num.

50
00:03:32,160 --> 00:03:35,010
Function is actually.

51
00:03:36,150 --> 00:03:39,720
A callback function.

52
00:03:40,560 --> 00:03:44,560
All right, so this is a very, very technical JavaScript term.

53
00:03:44,910 --> 00:03:45,240
All right.

54
00:03:45,450 --> 00:03:49,190
So the NUM function is and is actually a callback function.

55
00:03:49,440 --> 00:03:56,070
So functions which are called inside another function called their callback function.

56
00:03:56,370 --> 00:03:58,050
So this is a function call.

57
00:03:58,170 --> 00:04:04,710
And inside the function code we call another function, that function, which is called inside another

58
00:04:04,710 --> 00:04:07,360
function call is a callback function.

59
00:04:07,710 --> 00:04:08,210
All right.

60
00:04:08,220 --> 00:04:10,670
I hope it's not confusing because it's super simple.

61
00:04:11,280 --> 00:04:19,160
Now, in this second example, we are going to create a factory function, factory function.

62
00:04:19,839 --> 00:04:20,220
Right.

63
00:04:20,670 --> 00:04:27,450
So now this factory function works because of the lexical scope.

64
00:04:27,720 --> 00:04:32,430
Now, we had when we talked about the scope, I told you guys that we are going to talk about lexical

65
00:04:32,430 --> 00:04:34,770
scope when we get to the advanced stuff.

66
00:04:35,660 --> 00:04:41,390
And now is the time, actually, I wanted to talk about them in a separate chapter, but why not talk

67
00:04:41,390 --> 00:04:49,280
about them here when a function is defined in another function, that function has access to its parents

68
00:04:49,280 --> 00:04:54,120
variables, even if they are not defined within the child's function.

69
00:04:54,320 --> 00:05:00,260
In this case, the anonymous function has access to the value of X from its parent, the sum function.

70
00:05:00,800 --> 00:05:05,430
Now, let's go ahead and let's create that and let's take away all the gibberish out of this lesson.

71
00:05:06,410 --> 00:05:10,730
Now we are going to create a function, we are going to call it some, and we are going to pass an X

72
00:05:10,730 --> 00:05:12,640
as a as a parameter.

73
00:05:13,070 --> 00:05:14,540
We are going to say return.

74
00:05:14,690 --> 00:05:18,860
And now this return is going to return another function.

75
00:05:18,870 --> 00:05:19,990
How cool is this?

76
00:05:20,240 --> 00:05:26,540
Now, this function is going to be an anonymous function and this function is going to return X plus

77
00:05:27,020 --> 00:05:27,890
Y.

78
00:05:28,160 --> 00:05:30,200
Let's say that we don't see any errors.

79
00:05:30,320 --> 00:05:32,620
So we are on the right track.

80
00:05:33,080 --> 00:05:33,370
Right.

81
00:05:33,530 --> 00:05:34,610
So what is this?

82
00:05:35,810 --> 00:05:38,690
They these are higher order functions.

83
00:05:38,720 --> 00:05:40,730
These are advanced JavaScript.

84
00:05:41,160 --> 00:05:41,540
Right.

85
00:05:41,780 --> 00:05:47,750
So this function of some, it is going to return a value.

86
00:05:48,050 --> 00:05:49,210
What is that value?

87
00:05:49,730 --> 00:05:53,120
That value is actually another function.

88
00:05:54,140 --> 00:06:00,170
And what does that function do, that function is going to plus is going to return the sum of X plus

89
00:06:00,170 --> 00:06:03,620
one and the cool thing is what now?

90
00:06:03,620 --> 00:06:05,900
What is lexical scope in here?

91
00:06:07,600 --> 00:06:13,450
We can see that why has been defined because why is it parameter of dysfunction?

92
00:06:13,790 --> 00:06:17,390
Oops, why is a parameter of this anonymous function?

93
00:06:17,530 --> 00:06:19,930
It has been defined, but what about X?

94
00:06:20,140 --> 00:06:24,220
X has not been defined inside the scope of this function.

95
00:06:25,660 --> 00:06:35,320
But it is still accessible by this anonymous function Y because X is has been defined inside the parent

96
00:06:35,320 --> 00:06:36,220
of this function.

97
00:06:37,220 --> 00:06:43,790
And when the parent has a value defined the child's function, which is the function that I've just

98
00:06:43,790 --> 00:06:46,940
highlighted, has access to that variable.

99
00:06:47,840 --> 00:06:56,230
And this is called lexical scope, when a function has access to variables of its parents function,

100
00:06:56,840 --> 00:06:58,310
it is called lexical scope.

101
00:06:58,310 --> 00:06:59,350
So simple.

102
00:06:59,930 --> 00:07:00,330
All right.

103
00:07:00,590 --> 00:07:05,130
And these are called functions, accepting other functions as a return values.

104
00:07:05,340 --> 00:07:08,540
It works because this is a factory function.

105
00:07:10,310 --> 00:07:14,520
And this works because of lexicalized coping, right?

106
00:07:14,750 --> 00:07:21,920
So, so far, we have covered the global scope, the function scope, the blog scope and the lexical

107
00:07:21,920 --> 00:07:22,250
scope.

108
00:07:23,460 --> 00:07:26,170
All right, and everything should be clear to you.

109
00:07:26,190 --> 00:07:28,190
I'm going to go over this one more time.

110
00:07:28,440 --> 00:07:34,350
You can fast forward if you if you know everything here, you can just fast forward to 30 seconds.

111
00:07:35,840 --> 00:07:43,730
We have a function of some this function of some has a parameter inside of it and the function of some

112
00:07:43,730 --> 00:07:52,550
returns a value, the value of this, some function is actually another function and that function returns

113
00:07:52,580 --> 00:07:57,960
X plus why the Y has been specified inside this anonymous function.

114
00:07:58,130 --> 00:07:59,240
But what about X?

115
00:07:59,450 --> 00:08:02,270
How can this function access X?

116
00:08:02,840 --> 00:08:07,250
Because the X belongs to its parent.

117
00:08:08,910 --> 00:08:16,020
And this, the parent, is another function, that's why it can access it, and this is called lexical

118
00:08:16,020 --> 00:08:16,530
scope.

119
00:08:17,400 --> 00:08:17,820
All right.

120
00:08:17,940 --> 00:08:19,900
So now to see that in action.

121
00:08:20,130 --> 00:08:25,320
So what I'm going to do is I'm going to provide it with a series of numbers and we are going to see

122
00:08:25,320 --> 00:08:26,270
the results here.

123
00:08:26,490 --> 00:08:29,510
So I'm going to I'm going to call our first result.

124
00:08:29,910 --> 00:08:33,659
I'm going to say let no one be equal to no.

125
00:08:33,659 --> 00:08:35,360
Let's call the some function.

126
00:08:35,789 --> 00:08:38,340
Now, this function is anonymous.

127
00:08:38,340 --> 00:08:41,610
We cannot call it because it doesn't have a name.

128
00:08:41,760 --> 00:08:43,140
How shall we call it?

129
00:08:43,409 --> 00:08:46,770
I mean, shall I call it a function that you don't have a name?

130
00:08:46,770 --> 00:08:48,920
Please come and calculate this.

131
00:08:49,230 --> 00:08:50,730
No, it doesn't work like that.

132
00:08:51,330 --> 00:08:56,460
We shall call a function that has a name and we are going to call the sum function.

133
00:08:56,610 --> 00:08:59,040
And that is for for the second reason.

134
00:08:59,220 --> 00:09:00,540
That is the parent.

135
00:09:01,940 --> 00:09:09,020
All right, so we are going to call that, so when I pass in five for that and let's go ahead and let's

136
00:09:09,020 --> 00:09:12,180
consider log num.

137
00:09:13,370 --> 00:09:17,600
We have stored the results in one and we are going to see it returns.

138
00:09:17,630 --> 00:09:19,660
Oops, it returns.

139
00:09:20,000 --> 00:09:21,200
What does it return?

140
00:09:21,290 --> 00:09:22,240
Take a look at it.

141
00:09:22,640 --> 00:09:25,550
This is our anonymous function.

142
00:09:25,550 --> 00:09:33,100
It says explores what and why is this happened and why in the world has this happened?

143
00:09:33,350 --> 00:09:39,500
And the reason for that is we have passed in an argument of five for this X.

144
00:09:40,160 --> 00:09:41,270
But what about why?

145
00:09:41,660 --> 00:09:45,860
I mean, you cannot say five plus Y is five Y.

146
00:09:45,870 --> 00:09:47,090
No, that doesn't work.

147
00:09:47,090 --> 00:09:49,000
That is incorrect.

148
00:09:49,940 --> 00:09:57,290
Whenever you pass in an argument for this anonymous function, then this entire thing is going to be

149
00:09:57,290 --> 00:09:58,190
evaluated.

150
00:09:58,580 --> 00:10:01,190
I mean, the sum function has been evaluated.

151
00:10:01,370 --> 00:10:05,630
We have provided it with X and it has returned this function.

152
00:10:05,810 --> 00:10:08,260
I mean, the sum function has done its job.

153
00:10:08,510 --> 00:10:13,460
But what about this anonymous function we should pass in an argument for that as well.

154
00:10:13,880 --> 00:10:20,360
So in order to pass in an argument for that, we open parentheses here and this is the cool part.

155
00:10:20,600 --> 00:10:22,910
And Intellisense says No.

156
00:10:22,910 --> 00:10:28,790
One and we pass in a value for Y C.

157
00:10:28,910 --> 00:10:32,480
So this is actually the power of this code.

158
00:10:32,690 --> 00:10:40,460
It tells you even if you're a beginner, it gives you all the tools that you need to become a very,

159
00:10:40,460 --> 00:10:42,710
very, very fantastic developer.

160
00:10:43,250 --> 00:10:44,240
It gives you everything.

161
00:10:44,480 --> 00:10:51,980
So right away when I open parentheses, it is going to give me it is going to tell me that you are on

162
00:10:51,980 --> 00:10:53,300
the right route.

163
00:10:53,300 --> 00:11:02,480
You are going correctly, and now you should provide you should pass a no a number for this.

164
00:11:02,480 --> 00:11:04,280
Why not number.

165
00:11:04,280 --> 00:11:05,570
It could be anything.

166
00:11:05,900 --> 00:11:13,070
It could be anything but because it's plus we know logically that we should provide a number and that

167
00:11:13,070 --> 00:11:18,500
value is going to be a value to which parameter to the parameter of why.

168
00:11:18,650 --> 00:11:23,720
And that's why we know whenever we open parentheses we have.

169
00:11:24,730 --> 00:11:33,940
Accessed our anonymous function, our this function, right, and whenever I pass in for when I save

170
00:11:33,940 --> 00:11:39,040
it, it says Oops, which is removed a parenthesis from here.

171
00:11:39,190 --> 00:11:42,010
When I pass in four, we should get nine, which we do.

172
00:11:43,150 --> 00:11:48,190
So this five is going to come all the way here and we are going to return this function and when we

173
00:11:48,190 --> 00:11:51,250
pass in for five plus four, we are going to get nine.

174
00:11:52,030 --> 00:11:54,730
Now, these are higher order functions.

175
00:11:55,030 --> 00:11:58,040
I do not expect you to understand everything right away.

176
00:11:58,270 --> 00:12:05,500
That's why I'm going to go ahead and I'm going to explain it one more time, but not in this lecture.

177
00:12:06,250 --> 00:12:12,730
Actually, I wanted to cover everything as well as callback functions in this lecture.

178
00:12:12,940 --> 00:12:13,720
But it's gone.

179
00:12:13,720 --> 00:12:14,920
It's gone a lot.

180
00:12:15,160 --> 00:12:16,930
It's gone like to 12 minutes.

181
00:12:17,470 --> 00:12:21,610
And I want you guys to digest so far what we have studied.

182
00:12:21,820 --> 00:12:25,120
So in the next year, we are going to pick up where we left off.

183
00:12:25,390 --> 00:12:32,590
And I'm going to explain to you guys again how this factory function works because this is super important

184
00:12:32,590 --> 00:12:33,640
in our projects.

185
00:12:34,000 --> 00:12:34,350
All right.

186
00:12:34,350 --> 00:12:37,450
I'm not going to I'm not going to say that we are going to use it all the time.

187
00:12:37,660 --> 00:12:44,320
But when we do use it in our advanced projects, I want you guys to understand it right away, like

188
00:12:44,320 --> 00:12:46,470
with the snap of Thanasis fingers.

189
00:12:47,050 --> 00:12:48,260
That's it for this lecture.

190
00:12:48,400 --> 00:12:50,260
See you guys in the next one.

