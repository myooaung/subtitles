WEBVTT
1
00:00:00.500 --> 00:00:07.860
I hope you're starting to see that the syntax of Python is extremely straightforward and easy to type

2
00:00:07.950 --> 00:00:08.700
and read.

3
00:00:08.700 --> 00:00:13.430
This will become even more clear when we start dealing with loops.

4
00:00:13.600 --> 00:00:19.590
So let's get rid of the code that we've worked with so far and see how we create a for loop in Python.

5
00:00:19.590 --> 00:00:23.720
Now you'll remember in javascript H-P we had to do things like four.

6
00:00:23.940 --> 00:00:30.450
And then we had to create our variable in javascript to at least set it equal to zero.

7
00:00:30.450 --> 00:00:39.120
Have a semi-colon keep going until well as long as I's less than 10 and then set up plus plus to iterate

8
00:00:39.180 --> 00:00:46.550
each time and then have actually brackets it wasn't really very nice to look at in Python.

9
00:00:46.560 --> 00:00:48.030
It's a lot more straightforward.

10
00:00:49.020 --> 00:01:00.740
So if we want to do a for loop that goes from say 0 to 10 we just use for i in and then range.

11
00:01:01.220 --> 00:01:08.070
And if we want to go from 0 to 10 we would put in 11 which is slightly mysterious but essentially think

12
00:01:08.070 --> 00:01:13.860
of it as 0 up to but not including the number here.

13
00:01:13.860 --> 00:01:16.710
So zero up to 10.

14
00:01:17.220 --> 00:01:22.360
And then we put a colon to say what's coming next.

15
00:01:22.530 --> 00:01:27.030
And then you'll notice that my text editor as indented to the next line.

16
00:01:27.030 --> 00:01:31.660
And that's not just for fun because anything that's indented is going to be inside our loop.

17
00:01:31.680 --> 00:01:36.510
And then when we go back to not indenting that's when loop ends.

18
00:01:37.110 --> 00:01:40.250
So what I might have for the moment is just print.

19
00:01:40.290 --> 00:01:44.550
I let's have a look at that.

20
00:01:44.830 --> 00:01:54.360
So you can see we get the numbers from 0 to 10 and then if I have say print Rob that was that going

21
00:01:54.360 --> 00:02:00.940
to be that will print Raub in between each number.

22
00:02:01.220 --> 00:02:08.920
But if I don't indent that then it will only print Raub at the end.

23
00:02:09.200 --> 00:02:12.600
So the indenting is not just for making nice pretty code here.

24
00:02:12.800 --> 00:02:16.600
It's actually critical to the functioning of the script.

25
00:02:17.030 --> 00:02:19.860
If we wanted to have our range not starting at zero.

26
00:02:20.120 --> 00:02:30.650
We just put the starting number in has an extra option in our range command there and then we get the

27
00:02:30.650 --> 00:02:33.080
numbers from 5 to 10.

28
00:02:33.150 --> 00:02:37.450
So notice that the syntax for the follow up is completely different to how it was before.

29
00:02:37.670 --> 00:02:42.740
And it actually looks more like a foreach loop that we're used to seeing in HP.

30
00:02:42.920 --> 00:02:45.080
And that's indeed exactly what it is.

31
00:02:45.200 --> 00:02:53.030
Essentially this range 5 11 is creating what we might think of as an array or in Python a list of the

32
00:02:53.030 --> 00:02:55.270
numbers 5 6 7 8 9 10.

33
00:02:55.370 --> 00:02:58.140
And then I'm just looping through those.

34
00:02:58.760 --> 00:03:00.730
So here's the challenge for you.

35
00:03:01.130 --> 00:03:06.240
Can you create a list containing three of your favorite foods and then just print.

36
00:03:06.260 --> 00:03:07.580
I like eating.

37
00:03:07.910 --> 00:03:21.930
And then each of those types of food using the full Gayford.

38
00:03:22.040 --> 00:03:23.390
All right I managed it.

39
00:03:25.470 --> 00:03:33.150
I'm going to create a list called favorite foods could create a tuple as well as when I'm going to be

40
00:03:33.150 --> 00:03:36.880
editing it and I'm going to put pizza

41
00:03:39.710 --> 00:03:46.030
chocolate ice cream because I'm a healthy kind of guy.

42
00:03:46.640 --> 00:03:54.480
Then to iterate through this list we just use four and then we can use whatever variable name we like.

43
00:03:54.500 --> 00:04:09.960
I'm going to use food and then in just as before and then favorite foods then we use the colon and anything

44
00:04:09.960 --> 00:04:13.270
that's indented is going to be inside our league here.

45
00:04:14.370 --> 00:04:16.470
And then something like print.

46
00:04:16.560 --> 00:04:18.910
I like eating.

47
00:04:19.730 --> 00:04:29.780
And then plus just like in javascript food we might want a full stop at the end of that as well.

48
00:04:32.180 --> 00:04:32.540
OK.

49
00:04:32.600 --> 00:04:34.110
Just take a look at it.

50
00:04:34.380 --> 00:04:35.380
I like eating pizza.

51
00:04:35.420 --> 00:04:36.340
Like eating chocolate.

52
00:04:36.350 --> 00:04:38.270
I like eating ice cream.

53
00:04:38.540 --> 00:04:44.870
So I think that's a really neat way of looping through arrays and actually a lot nicer and how it's

54
00:04:44.870 --> 00:04:50.840
done in either javascript or ph P of course as well as the for loop.

55
00:04:50.840 --> 00:04:54.750
We also have the while loop in Python.

56
00:04:55.700 --> 00:05:02.080
So if we wanted to print the numbers 9:59 with a while loop we might do something like this.

57
00:05:02.360 --> 00:05:08.210
We'd start with our counter variable that I'll do X this time and set it equal to the starting Valley

58
00:05:09.110 --> 00:05:17.090
and then we want to keep doing a while loop as long as X is less than or equal to 10.

59
00:05:17.860 --> 00:05:25.190
And then a colon to say that we're now writing the code for a while loop and then we want to print X

60
00:05:25.960 --> 00:05:32.820
and the crucial line is X equals x plus 1.

61
00:05:33.080 --> 00:05:37.290
If you don't write that it's going to print 0 forever and ever.

62
00:05:38.390 --> 00:05:39.430
Let's take a look.

63
00:05:39.500 --> 00:05:40.120
There you go.

64
00:05:42.390 --> 00:05:49.970
Of course just like in Python and Javascript we can use to get out x plus plus as well.

65
00:05:56.130 --> 00:06:01.160
Note that there's no X plus plus in Python.

66
00:06:01.680 --> 00:06:10.850
If we try and run that will get a nasty error or we can use the slightly simpler X plus equals one to

67
00:06:10.880 --> 00:06:15.150
add one to X and that will work fine.

68
00:06:15.740 --> 00:06:18.380
So time for a challenge.

69
00:06:18.470 --> 00:06:23.330
This one is going to put a lot of what we've covered in this video and the previous video together but

70
00:06:23.330 --> 00:06:26.740
it shouldn't be too tricky from a programming point of view.

71
00:06:27.710 --> 00:06:32.100
In python we use the hash to denote a comment or one line comment.

72
00:06:32.180 --> 00:06:35.090
So I'm going to use one of those to describe what I want you to do.

73
00:06:35.360 --> 00:06:36.980
So I'd like you to create a dictionary

74
00:06:39.760 --> 00:06:45.530
containing four names and ages of people.

75
00:06:45.700 --> 00:06:47.960
So the names should be the keys.

76
00:06:49.440 --> 00:06:58.250
And the ages should be the values within the dictionary and then create a loop which prints for each

77
00:06:58.250 --> 00:07:00.090
person their age.

78
00:07:09.470 --> 00:07:11.070
Simple as that.

79
00:07:11.130 --> 00:07:13.250
So that's pretty straightforward programming set up.

80
00:07:13.370 --> 00:07:17.180
But it does require you to remember how to define and create a dictionary.

81
00:07:17.180 --> 00:07:23.680
Loop through it and then extract the key and the value which is actually something I haven't shown you

82
00:07:23.680 --> 00:07:24.120
yet.

83
00:07:24.320 --> 00:07:29.600
So you're either going to have to have a guess and it is actually quite guessable or have a quick google

84
00:07:29.810 --> 00:07:32.210
to see how you get those values.

85
00:07:32.340 --> 00:07:33.830
They look different.

86
00:07:42.240 --> 00:07:42.760
All right.

87
00:07:43.050 --> 00:07:43.750
Here we go.

88
00:07:43.980 --> 00:07:47.840
So I'm going to start by defining my age's dictionary.

89
00:07:48.780 --> 00:07:55.170
I'm going to do it by setting it see a pair of curly brackets like that and then I'm going to set up

90
00:07:55.280 --> 00:08:11.520
ages Rob is equal to a thirty five ages Caston they put 236 ages Tommy

91
00:08:14.310 --> 00:08:26.240
let's go play square brackets in the wrong place then Tomi is equal to a five and age is Ralphy is equal

92
00:08:26.240 --> 00:08:29.440
to 1.

93
00:08:29.450 --> 00:08:38.930
All right then we're going to loop through the ages dictionary which will be using for age in

94
00:08:41.540 --> 00:08:42.450
ages.

95
00:08:44.290 --> 00:08:45.310
Colon.

96
00:08:45.940 --> 00:08:50.740
And then because I'm not certain what this is going to give me is it going to give me the values or

97
00:08:50.740 --> 00:08:54.390
is it going to give me the keys or is it going to give me some combination of the two.

98
00:08:54.700 --> 00:08:59.550
I'm going to print each first off just to see what that does.

99
00:09:01.870 --> 00:09:03.110
So let's have a look.

100
00:09:03.440 --> 00:09:04.270
Aha.

101
00:09:04.480 --> 00:09:07.950
So that gives me the four keys.

102
00:09:08.110 --> 00:09:12.750
That is Rob Ralphy Keston and told me these values down here.

103
00:09:13.300 --> 00:09:23.520
So if I want to get the ages then I just need to use ages H and that should give me 35 36.

104
00:09:23.560 --> 00:09:24.430
5.

105
00:09:24.490 --> 00:09:29.140
One day I began.

106
00:09:29.160 --> 00:09:30.830
So now let's put it all together.

107
00:09:32.120 --> 00:09:36.560
So I want to start with H and then

108
00:09:40.680 --> 00:09:48.630
I want to append to that is a couple of spaces and then I want to put the number on the end.

109
00:09:48.770 --> 00:09:52.130
So that's ages age.

110
00:09:52.180 --> 00:10:00.400
Now I'm a little bit concerned about that because ages age is a number whereas these are strings.

111
00:10:00.400 --> 00:10:03.680
So I'm just going to save it and have a look and see what happens.

112
00:10:03.850 --> 00:10:05.410
Nothing happens at all.

113
00:10:05.650 --> 00:10:13.180
So I must have to do something to convert that to a string so I could either look it up or have a guess

114
00:10:13.180 --> 00:10:19.550
it might be something like string or maybe a shortened version.

115
00:10:19.620 --> 00:10:23.450
SAGAL So let's try that out.

116
00:10:24.710 --> 00:10:25.940
And there we go.

117
00:10:26.170 --> 00:10:32.880
Rubus thirty five Ralphy is one custom is 36 and Tomi is five.

118
00:10:33.100 --> 00:10:38.810
So you might reasonably have not guessed the SDR but that would have been a fairly easy thing to Google.

119
00:10:38.980 --> 00:10:41.950
And the rest of it was eminently figure out.

120
00:10:42.310 --> 00:10:46.230
Notice that the order is different to the order that I've set it.

121
00:10:46.240 --> 00:10:49.480
It's actually gone Rob Ralphy Keston told me.

122
00:10:49.590 --> 00:10:55.540
And essentially you shouldn't think of dictionaries as ordered in any way a dictionary is designed to

123
00:10:55.540 --> 00:11:01.960
store a key value pairs not to store the order of data within it.

124
00:11:03.270 --> 00:11:04.020
Excellent.

125
00:11:04.350 --> 00:11:07.650
So that takes us to the end of looking at loops in Python.

126
00:11:07.950 --> 00:11:12.630
In the next video we'll see how Python deals with the other basic coding construct.

127
00:11:12.750 --> 00:11:14.370
And that is if statements.
