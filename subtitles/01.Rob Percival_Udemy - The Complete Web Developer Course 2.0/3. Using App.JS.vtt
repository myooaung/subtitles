WEBVTT
1
00:00:00.240 --> 00:00:06.810
So Jesus is one of a number of HCM frameworks out there in the previous version of The Complete web

2
00:00:06.810 --> 00:00:07.500
developer course.

3
00:00:07.530 --> 00:00:11.980
I actually used Jay queery mobile and you're very welcome to check that out as well.

4
00:00:12.000 --> 00:00:17.640
The main reason I've switched to jazz is because Jake very mobile hasn't been updated substantially

5
00:00:17.700 --> 00:00:22.050
and the apps that you build with it simply don't work as well as I'd like and they don't look that great

6
00:00:22.080 --> 00:00:22.760
either.

7
00:00:23.130 --> 00:00:24.970
So Abdo Yes it's very simple.

8
00:00:25.050 --> 00:00:29.020
It's good looking and it's easy to get started with as well.

9
00:00:29.100 --> 00:00:40.940
So on that note let's click download and that will download app japes fashion to to desktop and then

10
00:00:41.060 --> 00:00:50.010
we'll open that up and I'm actually going to copy that and then we'll create a new folder within

11
00:00:53.580 --> 00:00:58.090
the complete web developer course new folder.

12
00:00:58.130 --> 00:01:03.120
And of course call this nine mobile apps

13
00:01:07.660 --> 00:01:15.850
and then will place us in there and you can see we've got the CSSA the javascript a file called zip

14
00:01:15.850 --> 00:01:20.050
code or japes which I'll tell you about in a minute and then indexed age TNL.

15
00:01:20.560 --> 00:01:26.470
So let's open up index today's G-mail in Chrome and see what it looks like.

16
00:01:26.590 --> 00:01:28.160
It's not a great deal to look at.

17
00:01:28.180 --> 00:01:34.030
We've got our home page bar at the top and then we can click on page 2 which takes us to page two and

18
00:01:34.030 --> 00:01:40.240
very nicely that automatically gives us a back button at the top there to take us back to our home page.

19
00:01:40.240 --> 00:01:46.300
That's one of the many features of algea which make it a huge timesaver compared to coding your own

20
00:01:46.300 --> 00:01:47.200
mobile app.

21
00:01:47.590 --> 00:01:51.790
So to investigate how app genius works we're going to start by looking through the code of the home

22
00:01:51.790 --> 00:01:58.150
page and then we're going to try and recreate this demo app on the app gyrus home page to get a bit

23
00:01:58.150 --> 00:02:00.130
more detail as to how it all fits together.

24
00:02:00.220 --> 00:02:04.790
It's worth saying that as usual we're not trying to become Apogees experts here.

25
00:02:04.960 --> 00:02:10.270
We're learning how to get to grips with a new framework quickly to allow us to get on with our development

26
00:02:10.270 --> 00:02:12.120
projects as quickly as possible.

27
00:02:12.490 --> 00:02:21.330
So let's go back over to the find and open indexed alleged e-mail in brackets so here's the code.

28
00:02:21.340 --> 00:02:22.510
It's very familiar.

29
00:02:22.540 --> 00:02:30.490
We've got our usual h t m l head with a title viewport style sheet and got an empty set of styles there.

30
00:02:30.680 --> 00:02:32.290
So nothing new then.

31
00:02:32.470 --> 00:02:38.590
And then we've got our app page with a data page attribute of hope.

32
00:02:38.950 --> 00:02:43.040
If we look further down here we've got the data page attribute of page 2.

33
00:02:43.630 --> 00:02:50.380
So what we've actually got going on here is that each page of the app is its own div so we don't have

34
00:02:50.380 --> 00:02:51.830
multiple HVM l files.

35
00:02:51.830 --> 00:02:59.350
Hey we've just got a single HDMI file with each page of the app having its own app page Dave.

36
00:02:59.710 --> 00:03:07.120
And then within that we've got the app top bar the app title and then app content app section.

37
00:03:07.360 --> 00:03:15.730
And the only thing that we had here was a button saying Go to page 2 and page two is very similar although

38
00:03:16.000 --> 00:03:24.710
we do have this app button left class with a data back data auto title pair of attributes.

39
00:03:24.730 --> 00:03:28.160
As you might imagine essentially creates the back button for us.

40
00:03:28.480 --> 00:03:31.810
But then the content is pretty minimal.

41
00:03:31.810 --> 00:03:32.950
So that's all fairly clear.

42
00:03:32.950 --> 00:03:40.070
So for now we come to this zipcode O.J.'s as have a quick look at what zipped highway is.

43
00:03:40.630 --> 00:03:45.890
It's essentially a small version of Jake Querrey.

44
00:03:46.240 --> 00:03:53.830
So we'll use all the same commands as we do in Jay query but it's a much smaller file size and everything

45
00:03:54.040 --> 00:04:00.160
in theory is a lot faster than with J queries so it's ideal for working with mobile devices.

46
00:04:00.160 --> 00:04:04.420
If you do find that there are some Jey query functions that you need that are not covered with Lepto

47
00:04:04.810 --> 00:04:05.480
then that's fine.

48
00:04:05.500 --> 00:04:08.890
You can just remove Zipzer here and replace it with a query.

49
00:04:09.120 --> 00:04:13.450
But when you're working on mobile it will almost certainly have all the functions that you need.

50
00:04:13.450 --> 00:04:18.560
So it's probably worth going with something like Aptor rather than the full Jey query.

51
00:04:18.610 --> 00:04:26.920
Then we've got our app J.S. javascript code and finally down here we've got a bit of custom javascript

52
00:04:27.910 --> 00:04:36.430
and it looks to me like this function will be called when the home page is loaded.

53
00:04:36.580 --> 00:04:41.060
So let's test out that theory just by putting an alert in there.

54
00:04:45.750 --> 00:04:49.750
Yep we get that pop up when the home page is loaded.

55
00:04:50.430 --> 00:04:51.780
So that's what's going on then.

56
00:04:52.880 --> 00:05:06.720
And presumably this does the same thing but the page to let's just check that we get fantastic.

57
00:05:07.140 --> 00:05:15.350
And then we've got app restore that's just comment out App Store and see what happens.

58
00:05:15.350 --> 00:05:16.030
All right.

59
00:05:16.200 --> 00:05:22.350
So it seems to me that app restore is loading the whole page and applying all of the app J.S. styles

60
00:05:22.380 --> 00:05:24.600
and Javascript functions to it.

61
00:05:25.470 --> 00:05:34.020
So without that we wouldn't have anything and this try and catch set up is javascript code for essentially

62
00:05:34.020 --> 00:05:39.990
saying try to do this and if you have any problems then just load the home page and that's actually

63
00:05:39.990 --> 00:05:46.270
pretty standard terminology and works exactly the same in say swift and Java as well.

64
00:05:46.320 --> 00:05:49.470
So I think the basic setup looks pretty clear.

65
00:05:49.470 --> 00:05:55.700
So let's go back and check out the demo and see if we can recreate it.

66
00:05:55.710 --> 00:06:00.080
And in the process learn a bit about how we could make our own objects app.

67
00:06:00.630 --> 00:06:03.220
Now this demo is actually in an I-frame here.

68
00:06:03.660 --> 00:06:13.280
So we can use control click and then view Framus source to view the DML source of that I-frame.

69
00:06:13.290 --> 00:06:16.560
So let's try and recreate what's going on here a bit by bit.

70
00:06:17.520 --> 00:06:19.240
So we've got some styles at the top.

71
00:06:19.350 --> 00:06:24.140
We might use some of those at some point but I'm more interested in the look of the app.

72
00:06:24.150 --> 00:06:33.580
At this point so you can see we've got our title as before and here we've got a paragraph of app section.

73
00:06:33.580 --> 00:06:37.490
So let's try putting that into our app.

74
00:06:37.530 --> 00:06:45.320
We've actually got a div with a class of apps section that lets pop this in before that div and see

75
00:06:46.290 --> 00:06:47.060
how it looks.

76
00:06:48.530 --> 00:06:55.260
Ok so we can actually make this a bit in our looks a bit more like a phone screen.

77
00:06:55.420 --> 00:07:00.490
So that just gives us a nice separated section with nice rounded corners and everything else.

78
00:07:01.030 --> 00:07:06.380
So let's try and recreate these color boxes here.

79
00:07:09.140 --> 00:07:17.610
So we've got another class of apps section and it looks like it's got the colors built in.

80
00:07:17.750 --> 00:07:18.640
Let's have a look.

81
00:07:25.740 --> 00:07:26.380
Aha.

82
00:07:26.640 --> 00:07:29.650
So we're definitely going to need some custom styles to apply.

83
00:07:29.690 --> 00:07:30.500
Is that Sluggy.

84
00:07:30.500 --> 00:07:31.880
What's going on at the top here.

85
00:07:32.700 --> 00:07:35.710
So we've got some styles for the scroll page.

86
00:07:35.710 --> 00:07:42.280
We'll look at that a bit later on some backgrounds for the Web Kit keyframes.

87
00:07:42.340 --> 00:07:46.470
They are the animations for when new pages are fading in or out.

88
00:07:46.470 --> 00:07:49.180
So we've got the background colors for those.

89
00:07:49.410 --> 00:07:54.960
And then we've got aspecific styles for our color picker.

90
00:07:55.210 --> 00:08:02.030
So let's use in our style section as well.

91
00:08:02.240 --> 00:08:03.110
And let's take a look.

92
00:08:03.240 --> 00:08:04.590
Wonderful.

93
00:08:04.590 --> 00:08:10.830
So now we've got these nice clean color sections but of course they don't change the top or background

94
00:08:10.830 --> 00:08:14.830
yet so there must be some javascript which does that.

95
00:08:14.970 --> 00:08:18.420
Let's have a look down.

96
00:08:18.520 --> 00:08:19.720
And here we go.

97
00:08:19.750 --> 00:08:25.150
Now that's quite a lot going on here including a bit of local storage which we'll be talking about in

98
00:08:25.150 --> 00:08:28.020
the next video there instead of just copying and pasting this code.

99
00:08:28.030 --> 00:08:32.360
We're going to attempt to recreate what the demo is doing without own code.

100
00:08:32.440 --> 00:08:40.720
So essentially what we want is for when one of these is clicked on it updates the top bar there to have

101
00:08:40.720 --> 00:08:43.870
that background color shouldn't be too tricky right.

102
00:08:44.990 --> 00:08:48.460
Well first of all let's think where we would want to run that code.

103
00:08:48.620 --> 00:08:53.520
We want to run it both when the home page is launched and when page 2 is launched as well.

104
00:08:53.810 --> 00:08:56.060
So I'm going to set up a function

105
00:08:59.140 --> 00:09:03.270
I'll use their function name set up page color.

106
00:09:03.290 --> 00:09:07.850
I do like that they're spelling color with you.

107
00:09:08.270 --> 00:09:16.590
Always nice and we'll have a page variable that's going to be passed to that function as well.

108
00:09:16.880 --> 00:09:23.840
And that will allow us to run that function from both of those pages

109
00:09:26.530 --> 00:09:28.870
without having to include the Katowice

110
00:09:32.030 --> 00:09:32.730
OK.

111
00:09:33.140 --> 00:09:36.920
Just to make sure everything's connected up right.

112
00:09:36.920 --> 00:09:39.680
Let's do a quick alert.

113
00:09:39.730 --> 00:09:41.230
I would get.

114
00:09:41.330 --> 00:09:46.650
And on page 2 it does the same thing wonderful.

115
00:09:46.700 --> 00:09:49.220
So we're going to need our app to do two things.

116
00:09:49.280 --> 00:09:51.660
We're going to want to get the color of the background here.

117
00:09:51.710 --> 00:10:00.130
And then we want to set the color of the background to the same if we look through the code here it

118
00:10:00.130 --> 00:10:04.350
looks to me like this code would be very useful to us.

119
00:10:05.110 --> 00:10:13.990
So this looks through the page it finds a UL with a class of color picker and then it finds all the

120
00:10:13.990 --> 00:10:19.810
allies the list items within that unordered list it makes them clickable.

121
00:10:19.990 --> 00:10:27.040
And then when they're clicked it runs a function that does something with old color that I'm not sure

122
00:10:27.040 --> 00:10:28.480
where that interested in.

123
00:10:28.480 --> 00:10:39.280
But more relevantly it's gets the color of the Clix item from the data attribute which I remember as

124
00:10:39.280 --> 00:10:42.750
a data color blue data color dark blue etc..

125
00:10:42.850 --> 00:10:52.960
So let's copy that part and I'm happy to copy that bit of code because it's pretty familiar to us and

126
00:10:52.960 --> 00:10:54.680
we know how everything is working.

127
00:10:54.760 --> 00:10:59.460
What I don't want to do is just copy the massive chunk of code and not really understand it.

128
00:11:01.490 --> 00:11:07.220
This just cries out function Kate.

129
00:11:07.260 --> 00:11:07.510
Then

130
00:11:12.130 --> 00:11:15.960
so let's create the variable color.

131
00:11:16.350 --> 00:11:19.500
And for now we'll just let it

132
00:11:23.650 --> 00:11:25.900
and that we'll just check to see if we've got

133
00:11:29.450 --> 00:11:30.960
the right color.

134
00:11:30.980 --> 00:11:31.570
There we go.

135
00:11:31.610 --> 00:11:35.900
So green yellow orange.

136
00:11:36.180 --> 00:11:37.970
Brilliant So we've achieved the first part.

137
00:11:38.160 --> 00:11:41.650
Now let's update the title bar with that color.

138
00:11:43.320 --> 00:11:45.050
Again let's have a look at the source code.

139
00:11:46.550 --> 00:11:52.290
It looks to me like removing classes and adding classes is going to be pretty important to him.

140
00:11:52.640 --> 00:11:54.900
So let's add the class first.

141
00:11:55.250 --> 00:12:00.800
And it looks like the class that we can add is simply color say.

142
00:12:00.810 --> 00:12:03.250
Let's take a look.

143
00:12:03.410 --> 00:12:04.960
Dave will want to update.

144
00:12:04.960 --> 00:12:09.830
It looks like app top bar is what we want to be updating.

145
00:12:10.320 --> 00:12:14.640
Let's get rid of our alerts and find

146
00:12:18.490 --> 00:12:18.930
app.

147
00:12:18.970 --> 00:12:19.840
Top bunk.

148
00:12:19.970 --> 00:12:20.260
OK.

149
00:12:20.320 --> 00:12:25.490
It's a class rather than an ID.

150
00:12:26.210 --> 00:12:34.250
And we want to add the class color to it.

151
00:12:35.780 --> 00:12:42.560
So let's just see if that works in itself it may dip as we get.

152
00:12:42.590 --> 00:12:49.160
In fact it almost does but not quite.

153
00:12:49.240 --> 00:12:54.670
And the reason it doesn't work completely is because we're just adding lots and lots of classes on top

154
00:12:54.670 --> 00:12:55.310
of each other.

155
00:12:55.480 --> 00:12:59.830
So that's what that's what this whole color is doing.

156
00:12:59.840 --> 00:13:04.950
It's removing the previous color that was added so that we can add the new color onto it.

157
00:13:07.080 --> 00:13:21.000
So let's set up our variable old color which initially will have an empty then when we've updated the

158
00:13:21.000 --> 00:13:29.820
top to a particular color we can remove the old color class and to do that we'll need to know what that

159
00:13:29.820 --> 00:13:30.570
was.

160
00:13:30.930 --> 00:13:34.540
So we'll set old color to color

161
00:13:37.800 --> 00:13:39.300
and so first time round.

162
00:13:39.540 --> 00:13:46.080
So I would click on the yellow then we'll make the top yellow and we'll set the old color to yellow

163
00:13:47.640 --> 00:13:54.310
and then we'll need to remove the old color class before we add the new one each time

164
00:14:01.860 --> 00:14:02.230
we go.

165
00:14:02.250 --> 00:14:06.870
And that should now remove the old class as well as adding the new one.

166
00:14:06.930 --> 00:14:10.570
So we should now be able to Odair.

167
00:14:10.800 --> 00:14:12.890
Nope that's gone horribly wrong.

168
00:14:13.530 --> 00:14:21.290
I suspect that's because initially it's trying to remove an empty class which then removes what class

169
00:14:21.290 --> 00:14:24.770
it did have which loses all the styling up there.

170
00:14:24.780 --> 00:14:32.550
So instead of just having an empty variable here let's set it to an empty string and then we can just

171
00:14:32.550 --> 00:14:39.780
use an IF statement to check if old color is not an empty string.

172
00:14:40.970 --> 00:14:48.110
Then remove that class and that should get round that problem.

173
00:14:48.110 --> 00:14:52.780
We should now be able to update that's every game without any problems.

174
00:14:55.760 --> 00:14:56.430
Wonderful.

175
00:14:56.780 --> 00:15:02.420
Let's just add a couple of these items lower down then.

176
00:15:02.780 --> 00:15:04.710
OK for buttons and

177
00:15:07.410 --> 00:15:08.090
lists.

178
00:15:08.160 --> 00:15:11.670
And we'll actually be looking at inputs in a couple of videos time.

179
00:15:11.820 --> 00:15:20.360
So it looks to me like lists is a separate page with a big long chunk of code containing all these lists.

180
00:15:21.900 --> 00:15:28.960
All right so you use Command F and search for lists we get.

181
00:15:29.210 --> 00:15:36.520
And that gives us this carried here so I'm going to copy that H M L because I think I understand it

182
00:15:37.880 --> 00:15:38.690
while I'm here.

183
00:15:38.840 --> 00:15:41.940
I think I'll copy buttons as well.

184
00:15:45.220 --> 00:15:51.180
And that will give us two new pages so we'll leave Page 2 in there for the moment.

185
00:15:52.110 --> 00:15:55.860
But we've now got lists which indeed looks pretty straightforward.

186
00:15:55.860 --> 00:15:58.530
It's what we're used to seeing.

187
00:15:58.780 --> 00:16:00.580
And then buttons as well.

188
00:16:00.640 --> 00:16:03.790
Looks like it should be pretty standard.

189
00:16:03.790 --> 00:16:08.750
So let's create our code to jump to the list's page.

190
00:16:08.920 --> 00:16:20.560
So I'm going to copy the code to jump to page 2 and then notice the lists page had a data page of lists.

191
00:16:22.000 --> 00:16:27.120
So we can just use lists there and we want to set up the page color there as well.

192
00:16:29.900 --> 00:16:39.800
And the only other thing we need to add is they link to lists on the home page so we should be able

193
00:16:39.800 --> 00:16:42.620
to find that if we search up with lists.

194
00:16:42.800 --> 00:16:44.290
And here we go.

195
00:16:44.330 --> 00:16:53.690
So here's our Dave with a class of apps section and it's got links to lists buttons inputs and scrolling.

196
00:16:53.750 --> 00:16:56.820
So let's put in that's

197
00:16:59.500 --> 00:17:07.010
just below the top our colors app section.

198
00:17:10.140 --> 00:17:10.980
Take a look at that.

199
00:17:10.980 --> 00:17:12.410
So that's looking good.

200
00:17:12.400 --> 00:17:20.340
Now if we click on lists you can see it jumps very nicely to our lists page and notice that we didn't

201
00:17:20.340 --> 00:17:23.270
put a link in there we didn't use an A with an H.

202
00:17:23.490 --> 00:17:31.170
We just used a class of button and a data target of lists and then the javascript within a framework

203
00:17:31.230 --> 00:17:38.520
interpreted that as a load of the list's page here.

204
00:17:39.520 --> 00:17:43.790
And that then does all the hard work of putting the back button and everything else.

205
00:17:45.940 --> 00:17:46.610
Great.

206
00:17:46.720 --> 00:17:49.870
So adding the buttons code should be straightforward.

207
00:17:49.870 --> 00:17:52.390
In fact it might already work as it is.

208
00:17:52.690 --> 00:17:53.610
Yes it does.

209
00:17:54.730 --> 00:17:55.460
Wonderful.

210
00:17:55.540 --> 00:18:02.380
So we can click those buttons and they behave very similarly to the native buttons on iOS and Android.

211
00:18:02.430 --> 00:18:08.660
The one final thing I'm interested in here is this dialogue because dialogs are pretty useful to us

212
00:18:09.440 --> 00:18:11.270
in mobile applications.

213
00:18:11.900 --> 00:18:13.990
And that looks very I.R.S. like.

214
00:18:14.300 --> 00:18:20.370
So let's see how we recreate that.

215
00:18:20.400 --> 00:18:22.860
So again we search for dialogue.

216
00:18:23.410 --> 00:18:28.110
So it's got a class of app button and app menu.

217
00:18:28.690 --> 00:18:33.030
So let's search for app button.

218
00:18:33.350 --> 00:18:40.110
So there's a lot of them that I wonder if there are any in the javascript now.

219
00:18:40.940 --> 00:18:43.230
So let's have a look for app menu instead.

220
00:18:43.280 --> 00:18:44.240
Aha.

221
00:18:44.640 --> 00:18:46.160
So this looks interesting.

222
00:18:46.680 --> 00:18:50.860
So we're searching through the page again finding the app menu class.

223
00:18:50.910 --> 00:19:00.610
And then when it's clicked we use the app dialog function which opens up that dialog and displays it

224
00:19:01.000 --> 00:19:09.630
very very similar to iOS and it looks like we have various buttons then which we can then do something

225
00:19:09.630 --> 00:19:12.620
in response to this function at the bottom.

226
00:19:14.530 --> 00:19:19.210
So I think I understand this well enough to copy that chunk of code.

227
00:19:19.630 --> 00:19:22.570
And this is going to be in the buttons page.

228
00:19:22.740 --> 00:19:33.810
So actually before I copy it over I'm going to add a controller for the buttons page and then let's

229
00:19:33.810 --> 00:19:35.270
copy this over.

230
00:19:35.340 --> 00:19:40.530
So we want to copy from there to there I think

231
00:19:43.260 --> 00:19:47.560
and then paste that in and then let's take a look.

232
00:19:47.770 --> 00:19:50.720
Now when we tap dialog we get this lovely dialog.

233
00:19:52.210 --> 00:19:55.420
And we can cancel and take it back to where we were

234
00:19:58.700 --> 00:19:59.410
wonderful.

235
00:19:59.450 --> 00:20:02.990
So what we call here is pretty basic but it's fairly attractive.

236
00:20:02.990 --> 00:20:07.240
It would definitely serve as the basis of a iOS or Android app.

237
00:20:07.280 --> 00:20:12.680
Pretty well once you've got this far with a framework and you've been able to recreate one of the demos

238
00:20:13.400 --> 00:20:22.200
it's probably worth having a look at the documentation and just having a fairly brief examination to

239
00:20:22.200 --> 00:20:27.060
see if there's anything that you missed or any other functions that you might find useful as you're

240
00:20:27.060 --> 00:20:28.520
building your apps.

241
00:20:28.980 --> 00:20:32.010
Things like event lists are very useful as well.

242
00:20:33.840 --> 00:20:36.860
And just clarifying how everything fits together.

243
00:20:37.740 --> 00:20:39.730
Is a very good use of the documentation.

244
00:20:40.110 --> 00:20:45.340
So if you're keen on making a mobile app I definitely recommend reading through the docs of apps.

245
00:20:45.390 --> 00:20:46.020
Yes.

246
00:20:46.200 --> 00:20:49.950
We're going to move on though to something pretty important when you're building mobile apps and that

247
00:20:49.950 --> 00:20:53.930
is being able to store data permanently within the app.

248
00:20:53.940 --> 00:20:58.980
That's not something we've looked at before but we're going to see how to do it now with the HCM L5

249
00:20:59.170 --> 00:20:59.740
tool.

250
00:20:59.850 --> 00:21:00.840
Local storage.
