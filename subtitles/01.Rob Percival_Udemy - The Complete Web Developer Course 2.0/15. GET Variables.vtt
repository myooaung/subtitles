WEBVTT
1
00:00:01.240 --> 00:00:07.360
Right now that we've covered for loops while loops variables and arrays we're going to see how we can

2
00:00:07.360 --> 00:00:11.170
build a little bit of interaction between the user and the server.

3
00:00:11.170 --> 00:00:16.540
There's two main ways of doing that get variables and post variables and we're going to start in this

4
00:00:16.540 --> 00:00:21.010
video looking at GET variables and there'll be a fairly chunky challenge at the end as well.

5
00:00:21.040 --> 00:00:29.560
So you may have seen it get variables before essentially they're encoded in the U R L itself.

6
00:00:29.620 --> 00:00:36.810
So for example if I wanted to put a GET variable of name I'd do it like this.

7
00:00:38.580 --> 00:00:40.860
So you may have seen things like this on web sites before.

8
00:00:40.860 --> 00:00:46.860
It's a question mark and then you have the name of the variable which in this case is name equals and

9
00:00:46.860 --> 00:00:49.250
then the value of the variable.

10
00:00:49.450 --> 00:00:52.180
And if you want to have two variables you separate them with.

11
00:00:52.380 --> 00:01:02.700
And so let's say my password is equal to 1 2 3 4 for some horrendous reason and we might have a third

12
00:01:02.700 --> 00:01:08.010
one of gender is male or something like that.

13
00:01:08.040 --> 00:01:13.650
So that's how you put GET variables into the u r l string.

14
00:01:13.650 --> 00:01:19.180
Now if I load the page like that you can see for the moment it looks exactly the same.

15
00:01:19.200 --> 00:01:22.380
So these GET variables are passed to the script.

16
00:01:22.560 --> 00:01:26.650
But obviously if you're not doing anything with them it doesn't affect the website at all.

17
00:01:27.180 --> 00:01:31.640
So how do we access these variables then within our script.

18
00:01:31.740 --> 00:01:34.440
It's actually really easy.

19
00:01:34.440 --> 00:01:41.700
They are all contained in an array called Dola underscore get.

20
00:01:41.870 --> 00:01:43.080
That's it.

21
00:01:43.080 --> 00:01:49.580
So if we wanted to display the contents of that away array we'd use print underscore or for human readable

22
00:01:50.640 --> 00:01:54.180
and then the get array.

23
00:01:54.490 --> 00:01:55.590
So now let's have a look.

24
00:01:56.620 --> 00:01:57.000
OK.

25
00:01:57.290 --> 00:02:01.100
So you can see we've got a name is Raub password 1 2 3 4.

26
00:02:01.250 --> 00:02:07.310
And gender is male and of course if you want to get any of those particular variables then you would

27
00:02:07.310 --> 00:02:09.730
just find it in the normal way.

28
00:02:10.610 --> 00:02:14.300
So you access the get array and then choose which one you want.

29
00:02:14.300 --> 00:02:21.840
So gender for example that will display that particular value.

30
00:02:21.860 --> 00:02:22.370
All right.

31
00:02:22.400 --> 00:02:28.350
So we know now how to access some variables from our browser in our server script.

32
00:02:28.410 --> 00:02:30.500
How do we get them there in the first place.

33
00:02:30.500 --> 00:02:36.050
Well one way would be to have a link which contained those values in them but a more common way is to

34
00:02:36.050 --> 00:02:37.670
use a form.

35
00:02:38.150 --> 00:02:43.700
And this is not the first time that we're going to be using a form with server side processing which

36
00:02:43.700 --> 00:02:45.050
is pretty cool.

37
00:02:45.800 --> 00:02:48.720
So let's create a little form.

38
00:02:48.910 --> 00:02:51.760
We'll have a very simple question.

39
00:02:51.760 --> 00:02:54.060
What's your name.

40
00:02:55.480 --> 00:02:59.110
And then we'll create our form and the usual way.

41
00:02:59.110 --> 00:03:04.960
Notice I'm doing all my team outside of my ph P script then.

42
00:03:05.110 --> 00:03:07.550
So it's not going to break my Ph.

43
00:03:08.440 --> 00:03:19.670
And then we'll have an input with the name of name and a type of text

44
00:03:22.590 --> 00:03:34.700
and then we'll have our submit button input with a type of Submit and the valley quolls.

45
00:03:34.920 --> 00:03:36.100
Let's have a go.

46
00:03:38.850 --> 00:03:40.740
And that's it.

47
00:03:40.740 --> 00:03:44.540
So now I'll get rid of genda.

48
00:03:45.200 --> 00:03:46.670
Let's see what happens.

49
00:03:46.670 --> 00:03:51.360
So first off I'm going to get rid of all of these variables because we don't need them anymore.

50
00:03:52.280 --> 00:03:55.200
And then when we load that we'll see the form.

51
00:03:55.210 --> 00:03:56.090
There it is.

52
00:03:56.110 --> 00:04:00.430
Notice we've got an empty array because there are no get variables at the top there.

53
00:04:00.840 --> 00:04:11.550
But if I now put rope into the form and click go you can see that it's put immediately at the top there.

54
00:04:13.770 --> 00:04:18.870
So if we wanted to say hello to whoever the user is we might do something like

55
00:04:22.640 --> 00:04:23.630
Hi there.

56
00:04:25.840 --> 00:04:28.990
Then we access the get array and the name

57
00:04:31.710 --> 00:04:35.380
and then potpie exclamation mark on the end.

58
00:04:35.970 --> 00:04:44.350
Let's get rid of the print to avoid any confusion and then let's pretend I'm someone else.

59
00:04:44.540 --> 00:04:45.500
I'm We.

60
00:04:45.520 --> 00:04:46.330
Hi there.

61
00:04:46.340 --> 00:04:48.080
Caston excellent.

62
00:04:48.080 --> 00:04:55.280
So this is some genuine interaction that we're getting now between the user and the server script.

63
00:04:55.440 --> 00:05:00.720
So we're going to use that in a fairly big challenge which will also use some loops and if statements

64
00:05:01.170 --> 00:05:04.500
and we're going to make a very simple page called is it prime.

65
00:05:04.590 --> 00:05:08.010
If you've done one of my app development courses you will have done this before so it should be pretty

66
00:05:08.010 --> 00:05:10.970
straightforward but you won't have done it in HP before.

67
00:05:11.340 --> 00:05:18.600
So first off a prime number if you don't remember from school is a number that has no factors other

68
00:05:18.600 --> 00:05:21.300
than 1 and itself.

69
00:05:21.300 --> 00:05:29.190
So for example 5 is prime because no number goes into it other than 1 and 5 6 is not prime because 2

70
00:05:29.220 --> 00:05:31.830
and 3 go into it.

71
00:05:31.830 --> 00:05:38.040
So what we want to do is we want to use it to be able to enter any number into the box and for HP to

72
00:05:38.040 --> 00:05:43.030
process that number and tell us whether or not it is prime.

73
00:05:43.110 --> 00:05:48.150
Simple as that you might need to do a little bit of paper and pen preparation for this one just to think

74
00:05:48.150 --> 00:05:51.270
through the problem because it's a little bit more subtle than we're used to.

75
00:05:51.450 --> 00:05:57.620
And you'll also need to find a way of working out whether a number goes into another number or not.

76
00:05:57.810 --> 00:06:01.140
And I'm sure you'll be able to do that with a quick Google.

77
00:06:01.140 --> 00:06:02.890
So best of luck if you go

78
00:06:11.910 --> 00:06:12.960
all rights.

79
00:06:13.270 --> 00:06:14.370
Have you managed it.

80
00:06:14.780 --> 00:06:15.810
Let's give it a shot.

81
00:06:17.340 --> 00:06:30.850
Say let's change a paragraph to say Please enter a whole number and then we'll change the name of our

82
00:06:30.850 --> 00:06:38.570
input to number and then we'll leave the submit as it is and just to check that everything is connected

83
00:06:38.570 --> 00:06:39.480
up right.

84
00:06:39.950 --> 00:06:43.000
Let's display the get array

85
00:06:47.030 --> 00:06:51.240
that we got so at the moment its name is Keston because that's what was there before.

86
00:06:51.500 --> 00:06:55.760
But if I put in five we should get number is five.

87
00:06:56.840 --> 00:06:57.350
Excellent.

88
00:06:57.500 --> 00:06:59.260
So now the tricky bit.

89
00:06:59.750 --> 00:07:02.270
Let's have an if statement at the start.

90
00:07:02.270 --> 00:07:09.830
Which checks to see if we've got an array there at all.

91
00:07:09.830 --> 00:07:11.970
And there's a nice easy way to do that.

92
00:07:12.170 --> 00:07:15.440
We can just look at the value of Dala underscore get.

93
00:07:15.470 --> 00:07:19.450
And if it has any contents then it will run this.

94
00:07:19.520 --> 00:07:29.180
If not then it went and what we need then is a loop which goes from 2 up to our number to test whether

95
00:07:29.180 --> 00:07:34.180
or not each of those numbers goes into our number and if we don't get any then it must be prime.

96
00:07:34.310 --> 00:07:40.310
If we do get some then it's not prime so I'm going to use a while loop because I generally prefer while

97
00:07:40.310 --> 00:07:41.040
loops.

98
00:07:41.150 --> 00:07:43.260
You could do it just as well with a for loop.

99
00:07:44.000 --> 00:07:45.800
So let's start with I.

100
00:07:45.920 --> 00:07:47.660
Is equal to 2.

101
00:07:47.660 --> 00:07:50.850
Notice I don't start one because one goes into every number.

102
00:07:50.870 --> 00:07:53.040
So that would be silly.

103
00:07:53.180 --> 00:07:54.690
So I'm starting with two.

104
00:07:55.130 --> 00:07:58.280
And then let's set up how loop.

105
00:07:58.280 --> 00:08:10.340
So we'll keep going as long as I get less than our number which we get from our get array

106
00:08:14.170 --> 00:08:15.250
like that.

107
00:08:15.250 --> 00:08:21.520
Remember we don't want to keep going until it actually equals our number because if I equals the number

108
00:08:21.520 --> 00:08:26.420
it will definitely divide into it because three divides into three or five divides into five.

109
00:08:26.740 --> 00:08:27.550
So that doesn't count.

110
00:08:27.550 --> 00:08:32.960
We need to go up to but not including our number that we go.

111
00:08:32.980 --> 00:08:37.170
And then don't forget the increment to come out.

112
00:08:37.620 --> 00:08:39.520
All right.

113
00:08:39.670 --> 00:08:45.950
Now at this point we need to check whether I divide into our number or not.

114
00:08:45.980 --> 00:08:47.210
That's the thing we don't have to do.

115
00:08:47.350 --> 00:08:50.660
So let's do a google.

116
00:08:50.750 --> 00:08:59.630
Start with PH P and then check if number divides another number something like that.

117
00:09:02.010 --> 00:09:04.100
Checking if a number is divisible by 6.

118
00:09:04.110 --> 00:09:07.530
That's quite specific but it should give us the answer that we need.

119
00:09:10.110 --> 00:09:11.300
And there we go.

120
00:09:11.580 --> 00:09:16.590
Aha so there's a thing called the modulus operator which gives the remainder of the division.

121
00:09:17.010 --> 00:09:25.970
So if we use number percent 6 then if it goes exactly it will equal zero or if it doesn't then it won't.

122
00:09:25.980 --> 00:09:27.480
So that's perfect.

123
00:09:28.240 --> 00:09:29.140
OK.

124
00:09:29.460 --> 00:09:31.290
So let's use that if

125
00:09:34.210 --> 00:09:34.830
our number

126
00:09:37.330 --> 00:09:43.860
percent I is equal to zero.

127
00:09:44.660 --> 00:09:51.800
So remember that means if the remainder when our number is divided by is equal to zero.

128
00:09:52.460 --> 00:10:05.130
So if that is true then that means that the number is not prime and then just the double slash there

129
00:10:05.150 --> 00:10:07.590
it's exactly the same as JavaScript.

130
00:10:07.590 --> 00:10:10.540
That's our way of leaving a comment in our code.

131
00:10:11.120 --> 00:10:15.920
So it's not prime because the remainder when we divide it by eye is zero.

132
00:10:15.920 --> 00:10:19.440
So it must go exactly.

133
00:10:19.450 --> 00:10:25.750
Now we don't need an else there because just because it doesn't divide it doesn't mean that it is prime

134
00:10:25.750 --> 00:10:26.800
necessarily.

135
00:10:26.830 --> 00:10:31.640
It has to be not divided by all the numbers for it to be prime.

136
00:10:31.660 --> 00:10:38.230
So the way I'm going to deal with that is I'm going to have a variable called is prime.

137
00:10:38.350 --> 00:10:48.110
And initially we'll set that to true and then if we get a number that divides into it then all set is

138
00:10:48.110 --> 00:10:52.450
prime to false.

139
00:10:52.460 --> 00:10:53.230
There we go.

140
00:10:53.510 --> 00:10:54.720
So that makes sense.

141
00:10:54.770 --> 00:10:57.450
Feel free to go back and listen to the explanation again.

142
00:10:57.500 --> 00:11:02.180
If you weren't entirely clear because it's quite subtle but essentially we're going from two all the

143
00:11:02.180 --> 00:11:03.990
way up to one less than a number.

144
00:11:04.190 --> 00:11:10.610
And we're checking with each of those numbers divides into our number and if they do then we're setting

145
00:11:10.870 --> 00:11:14.160
is prime to false.

146
00:11:14.590 --> 00:11:15.250
All right.

147
00:11:15.400 --> 00:11:18.680
So once we've done that is prime will either be true or false.

148
00:11:19.090 --> 00:11:27.650
So we can check to see if is prime and we could do that take with it you could try but it's slightly

149
00:11:27.650 --> 00:11:33.550
more elegant to just look at its prime because is prime is a boolean.

150
00:11:33.560 --> 00:11:35.690
It's either true or false itself anyway.

151
00:11:35.960 --> 00:11:41.860
So we don't need to check whether it's equal to or explicitly then we'll say

152
00:11:45.770 --> 00:11:54.420
put a paragraph tag and I is a prime number

153
00:11:59.850 --> 00:12:01.200
and if it's not

154
00:12:05.520 --> 00:12:06.870
well citing

155
00:12:09.840 --> 00:12:10.970
it's not prime

156
00:12:15.720 --> 00:12:16.140
prime numbers.

157
00:12:16.140 --> 00:12:21.270
By the way very important in computing and particularly in the web and in payment systems.

158
00:12:21.290 --> 00:12:27.950
Believe it or not our whole payment system is built on the fact that finding big prime numbers is hard.

159
00:12:28.080 --> 00:12:33.060
So if you found a solution that predicts prime numbers it would be very rich indeed and you would be

160
00:12:33.060 --> 00:12:35.700
able to break all online security.

161
00:12:35.700 --> 00:12:38.710
Fortunately no one's done that yet.

162
00:12:38.750 --> 00:12:39.600
OK.

163
00:12:39.900 --> 00:12:41.420
So let's have a look.

164
00:12:42.150 --> 00:12:44.460
I'm going to put in six.

165
00:12:44.670 --> 00:12:46.290
So it says six is not prime.

166
00:12:46.290 --> 00:12:47.330
That's promising.

167
00:12:47.580 --> 00:12:49.830
Nine Nine is not prime.

168
00:12:49.830 --> 00:12:50.460
Excellent.

169
00:12:50.460 --> 00:12:55.590
Well that seven seven is a prime number.

170
00:12:55.880 --> 00:13:02.670
So it looks like it's working correctly beryllium.

171
00:13:02.700 --> 00:13:08.780
Now what if I'm a bit cheeky and I put in one like that.

172
00:13:08.870 --> 00:13:10.520
Aha interesting.

173
00:13:10.560 --> 00:13:16.470
So got a bit of a bug there and if we don't put in a nice positive integer then we get this strange

174
00:13:16.470 --> 00:13:19.020
effect that too is a prime number.

175
00:13:19.050 --> 00:13:21.250
So why is it doing that.

176
00:13:21.730 --> 00:13:24.500
Well remember we're initially setting equal to 2.

177
00:13:24.690 --> 00:13:27.850
And then we're keeping going as long as I have less than the number.

178
00:13:28.200 --> 00:13:34.660
But if we check that is less than and then a string o n e then that's never going to be true.

179
00:13:34.830 --> 00:13:43.680
So it doesn't do this at all and it just avoids this loop completely and I is too down here and is prime

180
00:13:43.820 --> 00:13:44.610
is true.

181
00:13:44.820 --> 00:13:52.220
So we end up with two is a prime number which may be true but it's not quite what the user was asking.

182
00:13:52.290 --> 00:13:59.500
So let's do a check to see first off that the user enters a number and that's something that we didn't

183
00:13:59.500 --> 00:14:00.360
have to do.

184
00:14:00.490 --> 00:14:07.030
So let's check each pay check if string is numeric

185
00:14:11.760 --> 00:14:17.170
we can find out with a number or variable is a number.

186
00:14:17.450 --> 00:14:25.810
When you Meric and for once we're not on stack overflow actually although it's fairly slow to load so

187
00:14:25.810 --> 00:14:29.890
I might say Stack Overflow is faster.

188
00:14:29.990 --> 00:14:36.050
This is HP dot net which is the really Handyside will come back to it and that shows you the kind of

189
00:14:36.050 --> 00:14:40.260
official definitions of each function within HP.

190
00:14:40.340 --> 00:14:42.620
But it's a little bit slower than the stack overflow today.

191
00:14:46.970 --> 00:14:49.590
So we've got C type underscored digit.

192
00:14:49.760 --> 00:14:52.410
It's a little bit of a vague answer that one.

193
00:14:52.490 --> 00:14:59.240
This one looks closer to what we want so if is underscored numeric value and we're actually checking

194
00:14:59.720 --> 00:15:05.300
to see whether it's positive and we're even on this on such checking to see if it's a whole number.

195
00:15:05.300 --> 00:15:10.700
And we're doing that by checking whether the value is equal to the value when it's rounded to 0 or decimal

196
00:15:10.700 --> 00:15:12.110
places.

197
00:15:12.140 --> 00:15:21.300
So actually that's a lot more than I wanted to check but it will certainly suffice for us.

198
00:15:21.320 --> 00:15:21.770
So let's

199
00:15:25.230 --> 00:15:32.740
pop that in let's say we want to replace value with gets number.

200
00:15:33.040 --> 00:15:39.490
So we're checking first off if number is numeric then we're checking that number is positive.

201
00:15:39.880 --> 00:15:43.940
And then we're checking if the number is a whole number.

202
00:15:47.680 --> 00:15:48.330
OK.

203
00:15:50.380 --> 00:15:55.680
So they should be more or less all the checks that we need just back to HP dot net now that it's loaded.

204
00:15:55.840 --> 00:15:57.660
This is a really handy site.

205
00:15:57.760 --> 00:15:59.600
I particularly like the examples here.

206
00:15:59.790 --> 00:16:02.440
I make it really clear how each function works.

207
00:16:04.450 --> 00:16:04.990
OK.

208
00:16:05.010 --> 00:16:09.990
So back to us if we now say that and do our search for one.

209
00:16:09.980 --> 00:16:12.680
Again OK.

210
00:16:12.760 --> 00:16:16.210
So it's done the check and it hasn't returned anything.

211
00:16:16.780 --> 00:16:17.760
So that's good.

212
00:16:17.770 --> 00:16:19.060
We've not got a mistake here.

213
00:16:19.240 --> 00:16:24.880
Although I realize I've misspelled number that but it will be good to give an error message.

214
00:16:25.030 --> 00:16:33.040
So as a final little addition or tweak to make code a little bit nicer I'm going to add an else and

215
00:16:33.160 --> 00:16:35.770
within my else I'm going to check to see if

216
00:16:39.030 --> 00:16:40.750
they've submitted anything.

217
00:16:40.800 --> 00:16:51.330
So if we get to here that means user has submitted something which is not a positive

218
00:16:53.910 --> 00:16:55.470
number.

219
00:16:55.490 --> 00:16:56.820
So at this point we should say

220
00:16:59.620 --> 00:17:04.050
Please enter a positive whole number

221
00:17:06.920 --> 00:17:12.770
and that's just a bit more elegant than not giving a message at all.

222
00:17:12.770 --> 00:17:15.570
Except I forgot to do something.

223
00:17:15.640 --> 00:17:16.290
Yeah.

224
00:17:16.840 --> 00:17:18.790
So them.

225
00:17:18.840 --> 00:17:19.580
There we go.

226
00:17:19.830 --> 00:17:23.700
So now we've got a nice error please enter a positive whole number.

227
00:17:24.120 --> 00:17:29.520
And if we did that with seventy six point two three four is where we should get the same message.

228
00:17:29.520 --> 00:17:33.470
But if we go back to a whole number it will tell us whether it's prime or not.

229
00:17:35.540 --> 00:17:35.900
Brilliant.

230
00:17:35.900 --> 00:17:38.600
So that was a fairly tricky programming challenge.

231
00:17:38.900 --> 00:17:41.870
As always I hope you manage to do at least part of it yourself.

232
00:17:41.910 --> 00:17:47.230
And now we're experts with one way to communicate between the user and the server.

233
00:17:47.390 --> 00:17:52.730
That is get variables we're then going to look in the next video at post variables which is actually

234
00:17:52.730 --> 00:17:56.630
a more powerful way to communicate between the user and the server.
