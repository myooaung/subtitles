WEBVTT
1
00:00:00.450 --> 00:00:00.750
All right.

2
00:00:00.750 --> 00:00:05.400
So to give you a bit of practice of using the Google Maps API I'm going to set you a challenge and for

3
00:00:05.400 --> 00:00:08.400
once I'm not going to show you what it looks like beforehand.

4
00:00:08.670 --> 00:00:12.960
So need to use your imagination a little bit in terms of design I'm going to keep this pretty simple

5
00:00:12.990 --> 00:00:15.210
I'll just use a basic bootstrap site.

6
00:00:15.210 --> 00:00:17.330
But the functionality is really simple as well.

7
00:00:17.370 --> 00:00:23.550
We want a box for a user to put any part of an address or a town name or a street name and a number

8
00:00:23.670 --> 00:00:25.140
and then using AJAX.

9
00:00:25.140 --> 00:00:31.800
We're going to do a call to the Google Maps geocoding API return the zip code or post postcode for that

10
00:00:31.800 --> 00:00:32.310
address.

11
00:00:32.310 --> 00:00:37.260
It's a pretty simple function but one that people might find useful when you're mailing a car to a friend

12
00:00:37.290 --> 00:00:41.850
or something like that so that it doesn't have to look great but feel free to go crazy on the design

13
00:00:41.850 --> 00:00:43.080
if you want.

14
00:00:43.080 --> 00:00:52.000
Best of luck.

15
00:00:52.010 --> 00:00:52.500
All right.

16
00:00:52.530 --> 00:00:53.570
Hey we got them.

17
00:00:54.000 --> 00:00:57.460
So I'm going to start with my strap for

18
00:01:01.880 --> 00:01:08.840
just to get a very simple layout so documentation and getting started.

19
00:01:11.010 --> 00:01:17.150
And then use the starter template as usual.

20
00:01:17.460 --> 00:01:20.100
And then let's just have a look.

21
00:01:20.800 --> 00:01:22.240
So that's working great.

22
00:01:22.290 --> 00:01:32.370
I'm just going to put a title in which will be a postcard find up that we get.

23
00:01:32.390 --> 00:01:32.950
All right.

24
00:01:33.010 --> 00:01:38.100
Alleve bootstrap open but now we'll go to Google Maps.

25
00:01:38.390 --> 00:01:40.820
Geocoding API

26
00:01:44.500 --> 00:01:44.980
we get

27
00:01:48.980 --> 00:01:55.840
so that top on them we're going to scroll down again to the example.

28
00:01:57.310 --> 00:01:57.540
We gave

29
00:02:01.020 --> 00:02:02.430
it select all of that

30
00:02:05.240 --> 00:02:08.980
and now let's put in our Ajax request

31
00:02:12.610 --> 00:02:19.330
so this should be fairly familiar as we did it just in the previous video.

32
00:02:22.950 --> 00:02:32.780
So we use Tola dot Ajax and then we set up parameters.

33
00:02:32.800 --> 00:02:44.990
So you are well and that's going to be that you will get the API key in a moment and then type is going

34
00:02:44.990 --> 00:02:46.070
to be get

35
00:02:48.950 --> 00:02:58.210
and success we're going to create a function which is going to return some data.

36
00:02:58.730 --> 00:02:59.420
And for now

37
00:03:03.830 --> 00:03:05.140
we'll just look that to the console

38
00:03:10.370 --> 00:03:17.810
so I'm going to go over to the console console developers talk Google dot com and that's where all of

39
00:03:17.810 --> 00:03:20.760
your keys will be stored.

40
00:03:21.020 --> 00:03:24.970
If you need to get back to them so will get to the dashboard.

41
00:03:25.010 --> 00:03:27.070
And this is for my latest project.

42
00:03:27.140 --> 00:03:31.620
So are men going to click Enable API keys and get credentials.

43
00:03:32.240 --> 00:03:33.780
And then click credentials.

44
00:03:35.860 --> 00:03:41.070
And there's my API key.

45
00:03:41.110 --> 00:03:42.570
So let's copy that in there

46
00:03:45.830 --> 00:03:50.620
and then let's run this again and have a look at the console

47
00:03:54.170 --> 00:03:58.930
or got a warning about the bootstrap tool tip tips require a tether that's fine.

48
00:03:58.960 --> 00:04:04.110
We're going can be using those but we do have our response that's fantastic.

49
00:04:04.920 --> 00:04:12.350
So let's get the bits that we'll need and we'll write code similar to what we had last time.

50
00:04:14.000 --> 00:04:15.460
So those are the bits that we're interested.

51
00:04:15.470 --> 00:04:21.950
But we don't want the country this time we want the postal code.

52
00:04:22.100 --> 00:04:25.920
So we're going to have to loop through until we get exactly what we need.

53
00:04:25.940 --> 00:04:30.590
The reason by the way that we don't go straight to number six is that the postal code will always be

54
00:04:30.590 --> 00:04:35.170
number 6 but it will always have a type of postal code.

55
00:04:35.770 --> 00:04:44.410
So that's why we do the looping through Vashon.

56
00:04:44.430 --> 00:04:44.880
All right.

57
00:04:44.920 --> 00:04:56.320
So again we use each and we're leaping through data and results and then zeroing

58
00:05:02.880 --> 00:05:06.420
and then address components

59
00:05:12.710 --> 00:05:20.120
and then when we get there we're looping through each of those until we get to one with a type of postal

60
00:05:20.120 --> 00:05:21.780
code.

61
00:05:21.980 --> 00:05:35.030
So we're going to get that first off by adding a function in here with again a key and a value.

62
00:05:35.570 --> 00:05:40.600
And we're going to be interested in value because value is going to be that right there.

63
00:05:41.480 --> 00:05:49.040
So we're going to be looking at value and then types and then

64
00:05:51.760 --> 00:05:52.990
zero.

65
00:05:53.470 --> 00:05:58.650
And we want to find out when value type 0 is equal to the postal code.

66
00:06:04.890 --> 00:06:15.750
And find out when that's the case we'll just let value long name.

67
00:06:15.780 --> 00:06:18.720
So I was working on a long name and short name are going to be the same.

68
00:06:18.720 --> 00:06:23.450
So I'll stick with long name we go.

69
00:06:23.640 --> 00:06:29.870
So now let's have a look and I've got an unexpected token on line 26.

70
00:06:29.940 --> 00:06:30.850
What have I done.

71
00:06:30.960 --> 00:06:40.300
Yes I've closed the parentheses there when it should be after the curly brackets that.

72
00:06:40.470 --> 00:06:42.280
All right let's try that again.

73
00:06:42.280 --> 00:06:43.280
There we go.

74
00:06:43.780 --> 00:06:46.130
So we've got our postal code.

75
00:06:46.130 --> 00:06:50.050
So now let's put it somewhere rather more useful than just letting it.

76
00:06:50.080 --> 00:06:54.800
So let's write a little bit of HDMI out.

77
00:06:55.720 --> 00:06:59.830
We're going to start with a class of container

78
00:07:07.040 --> 00:07:22.780
just a little bit of text here so post could find and then enter a partial address to get the postcard.

79
00:07:24.070 --> 00:07:24.730
And there we go.

80
00:07:24.790 --> 00:07:34.740
We've got our title and text then I'm just going to for the moment comment out the code to get the post

81
00:07:34.740 --> 00:07:39.350
code so that we can set up our form and I'm going to do that in the usual way.

82
00:07:39.360 --> 00:07:44.600
Going back over to bootstrap and then finding the form component.

83
00:07:44.680 --> 00:07:47.200
So I click on components and then forms

84
00:07:50.090 --> 00:08:00.560
and I'm just going to start off with that big template that we don't need most of that.

85
00:08:00.730 --> 00:08:02.370
Let's take a look.

86
00:08:02.710 --> 00:08:08.200
We can get rid of everything above the button all the way up to that top.

87
00:08:09.790 --> 00:08:15.460
Field set them and then I'm going to change this to address

88
00:08:18.580 --> 00:08:30.110
and we'll just have addresses the label type is going to be text ID address and we'll have the placeholder

89
00:08:30.140 --> 00:08:38.500
as a partial address and we don't need to comment about the e-mail address there.

90
00:08:39.020 --> 00:08:43.610
I'm going to get rid of the type submit for the button because we don't want submit to actually submit

91
00:08:43.610 --> 00:08:45.340
the form.

92
00:08:45.500 --> 00:08:50.690
We're going to process that without javascript.

93
00:08:51.010 --> 00:08:51.520
OK.

94
00:08:51.770 --> 00:08:53.190
So that's looking good.

95
00:08:53.240 --> 00:09:01.320
We now want to change this script so that it happens when the button is clicked that it's get this button

96
00:09:02.680 --> 00:09:13.070
and Id also find post-K and then will uncomment javascript's that

97
00:09:16.260 --> 00:09:25.620
and then we want to check to see whether the button with an ID of find post code has been clicked.

98
00:09:28.380 --> 00:09:31.380
And when it has we want to run a function

99
00:09:34.570 --> 00:09:40.350
which will be our Ajax.

100
00:09:40.380 --> 00:09:41.510
All right.

101
00:09:41.860 --> 00:09:45.920
So for now let's just check that that's linked up correctly to our button.

102
00:09:46.030 --> 00:09:46.560
Wonderful.

103
00:09:46.570 --> 00:09:47.860
It is indeed.

104
00:09:48.550 --> 00:09:55.660
And then we need to change the address here from being the same every time to being whatever the user

105
00:09:55.660 --> 00:09:59.560
has typed into the address field so we're going to get that's

106
00:10:03.930 --> 00:10:08.770
from an ID of address.

107
00:10:08.820 --> 00:10:10.460
So that was up here.

108
00:10:10.590 --> 00:10:16.650
We gave it an IP address and then we went to get the value.

109
00:10:17.280 --> 00:10:21.090
And it's likely that this will have some spaces and maybe some strange characters in them.

110
00:10:21.120 --> 00:10:26.400
So we really want to do something to this to make it you are else safe so that when we put it into this

111
00:10:26.400 --> 00:10:31.410
you R-AL it doesn't have any spaces or are things that are going to break that you are l.

112
00:10:31.800 --> 00:10:41.340
Now a few videos ago we saw within HP you can use a function called you l code to do that but we can

113
00:10:41.340 --> 00:10:47.290
be reasonably confident that there's a J queery equivalent or even a javascript one.

114
00:10:47.320 --> 00:10:53.230
So let's have a look at that top result in code you are components that looks pretty perfect.

115
00:10:56.110 --> 00:10:57.160
Let's use that

116
00:10:59.920 --> 00:11:05.450
now quite willing to write them again.

117
00:11:06.320 --> 00:11:07.270
Great.

118
00:11:07.280 --> 00:11:12.860
And then just before we run that we do need to stop the form from being submitted when we pressed the

119
00:11:12.860 --> 00:11:13.640
button.

120
00:11:13.970 --> 00:11:21.710
And the easiest way to do that is to add an E to refer to the event that calls the click and then we

121
00:11:21.710 --> 00:11:27.140
want to take a and prevent the default thing happening.

122
00:11:27.140 --> 00:11:28.720
We've done that a couple of times before.

123
00:11:29.060 --> 00:11:32.170
So that should stop the form from submitting.

124
00:11:32.900 --> 00:11:33.580
OK.

125
00:11:34.050 --> 00:11:35.880
So let's give this a try.

126
00:11:36.650 --> 00:11:42.180
I'm going to put in one to nine but we road and will submit.

127
00:11:42.200 --> 00:11:48.430
And we've got not my postcode but a zip code of some sort which is promising.

128
00:11:49.040 --> 00:11:52.400
And I'm just going to add a bit more information there.

129
00:11:52.710 --> 00:12:00.020
So if we put Cambridge UK in then we do get the correct postcode and tactics are everything's working

130
00:12:00.720 --> 00:12:01.500
well.

131
00:12:01.940 --> 00:12:06.340
We don't want to have this in an alert though at least not a pop up sort of alert.

132
00:12:06.440 --> 00:12:12.890
I'm going to put it in a nice pretty bootstrap flat.

133
00:12:12.900 --> 00:12:16.260
Let's get back to P-trap get the carried for an alert

134
00:12:22.000 --> 00:12:22.690
it go.

135
00:12:22.720 --> 00:12:25.870
So we'll do our usual thing.

136
00:12:25.870 --> 00:12:30.930
We'll put a div with an ID of message.

137
00:12:31.210 --> 00:12:35.090
And that's where we're going to put our response.

138
00:12:36.460 --> 00:12:50.960
So instead of alerting the postchaise We'll set the message div to have HDMI all of them.

139
00:12:50.980 --> 00:12:54.970
I'm using single quotes there because they're going to be double quotes inside

140
00:12:57.920 --> 00:13:05.260
straining to get rid of that line break them and we'll have something like payscale found

141
00:13:08.890 --> 00:13:12.100
the post code is and then

142
00:13:14.810 --> 00:13:15.410
we'll use

143
00:13:19.880 --> 00:13:26.780
value long name.

144
00:13:27.430 --> 00:13:33.150
Get rid of that line break again and I've somehow got myself an extra double quote at the end there

145
00:13:33.760 --> 00:13:34.980
so I'll just get rid of that.

146
00:13:35.080 --> 00:13:36.860
And then let's give this a try.

147
00:13:38.690 --> 00:13:44.650
So we'll do our one and I would write Cambridge again submit and there we go.

148
00:13:44.820 --> 00:13:49.270
Help would help if I spelt postcard right then.

149
00:13:50.870 --> 00:13:52.480
But you get the idea.

150
00:13:53.290 --> 00:13:53.630
All right.

151
00:13:53.630 --> 00:13:59.230
So we're pretty close now we've got something that works.

152
00:13:59.300 --> 00:14:01.910
Just make sure it works with the correct spelling as well.

153
00:14:01.910 --> 00:14:02.400
There we go.

154
00:14:02.420 --> 00:14:03.610
Beautiful.

155
00:14:03.620 --> 00:14:11.630
One thing we don't have at the moment is if we have some invalid input I actually managed to find a

156
00:14:11.630 --> 00:14:14.870
place code for that with something really long.

157
00:14:14.960 --> 00:14:18.810
I presume it won't be able to find a post code for it yet.

158
00:14:19.120 --> 00:14:21.430
It's just not updating it's all.

159
00:14:22.610 --> 00:14:29.450
And just to prove that in fact if we leave the address blank then at the moment it does nothing.

160
00:14:29.510 --> 00:14:37.210
So let's have another look at what is returned from the Google Maps API.

161
00:14:39.750 --> 00:14:47.820
When an invalid address is sent so I'm going to inspect that to have a look at the console.

162
00:14:49.770 --> 00:14:54.780
So we've got an object We've also got an error message because it's trying to read an array that doesn't

163
00:14:54.780 --> 00:14:58.270
exist but we should be able to stop that happening.

164
00:14:58.580 --> 00:15:00.600
OK so that's pretty straightforward.

165
00:15:00.660 --> 00:15:03.050
We get a status of zero results

166
00:15:05.720 --> 00:15:13.240
let's just have another look at what we get with a success that we get a status of.

167
00:15:13.250 --> 00:15:14.160
OK.

168
00:15:14.660 --> 00:15:18.050
So actually I think it's probably best to check for a status of OK.

169
00:15:18.200 --> 00:15:24.830
And if we've got that do the success otherwise give them an error message.

170
00:15:24.860 --> 00:15:38.050
So what we'll do is we'll check for data status and we'll initially check to see whether it's NOT OK.

171
00:15:39.270 --> 00:15:42.990
And then if it's not OK then we'll update the message.

172
00:15:42.990 --> 00:15:48.410
So I'll just copy this Kate and this time we'll have an alert warning

173
00:15:51.590 --> 00:15:58.450
and we'll just say postcard could not be found.

174
00:15:59.510 --> 00:16:01.330
Please try again.

175
00:16:02.000 --> 00:16:16.600
And if that's not the case then we'll go through our Each loop and hopefully find the payscale.

176
00:16:16.600 --> 00:16:21.730
All right let's take another look then so if I submit something empty postcode could not be found.

177
00:16:21.730 --> 00:16:23.560
Please try again.

178
00:16:23.560 --> 00:16:29.190
Whereas if I put in I normal address we've got the postcard.

179
00:16:29.980 --> 00:16:31.030
Fantastic.

180
00:16:31.030 --> 00:16:32.850
So that's as far as I'm going to go with this.

181
00:16:32.860 --> 00:16:39.790
We've got elegant error handling and the website works as requested and it's worth taking a minute to

182
00:16:39.790 --> 00:16:46.630
just see what we've achieved there in just a few minutes of writing code hooked into a global post code

183
00:16:46.630 --> 00:16:51.370
finding system which would have taken us years to write ourselves and we haven't even paid anything

184
00:16:51.370 --> 00:16:52.450
for the privilege.

185
00:16:52.780 --> 00:16:58.630
So that is the power of an API in the next video we're going to see one more type of API that allows

186
00:16:58.630 --> 00:17:03.700
us to actually log in to an online platform and we're going to do that with Twitter.
