1
00:00:00,480 --> 00:00:05,550
Now that you're familiar with all the basic programming concepts in Python and hopefully are starting

2
00:00:05,550 --> 00:00:12,960
to love its brevity and clarity I'm going to show you how to create functions in Python to organize

3
00:00:12,960 --> 00:00:16,410
your code and keep it lean and easily updatable.

4
00:00:17,730 --> 00:00:22,410
We've used functions before but not a great deal so here we'll also spend a bit of time talking about

5
00:00:22,830 --> 00:00:29,160
variables and parsing them to functions and getting the values back from functions and also we'll introduce

6
00:00:29,160 --> 00:00:36,810
an idea called scope which is about whether a variable is accessible within a certain chunk of code.

7
00:00:37,080 --> 00:00:38,260
But one step at a time.

8
00:00:38,730 --> 00:00:44,730
Let's define a function first off and to define the function we use death.

9
00:00:45,180 --> 00:00:53,730
So I'm going to have a function called say hello and then we use as we've seen before a pair of parentheses

10
00:00:53,970 --> 00:00:55,450
to define our function.

11
00:00:55,560 --> 00:01:01,590
And later on we might put some values inside those parentheses but not quite yet.

12
00:01:01,710 --> 00:01:10,480
And then as usual we use the colon and indenting to represent what goes inside that function.

13
00:01:10,530 --> 00:01:16,470
And for now we'll just print hello.

14
00:01:16,640 --> 00:01:17,850
Simple as that.

15
00:01:18,260 --> 00:01:26,490
And then when we want to say hello we just call the say hello function.

16
00:01:26,590 --> 00:01:30,260
Sometimes I just can't get out of the habit of writing semi-colons.

17
00:01:32,140 --> 00:01:32,850
All right.

18
00:01:33,420 --> 00:01:41,240
So that's how functions are defined and called what if we want to pass a value to a function.

19
00:01:41,280 --> 00:01:50,050
So by that I mean we might want to have a function say something where instead of saying hello every

20
00:01:50,050 --> 00:01:56,210
time we just print out whatever the program once at the time.

21
00:01:56,540 --> 00:02:08,480
Well to do that we need to accept a string which we could call whatever we like call it something and

22
00:02:08,480 --> 00:02:22,310
then we would just print that string and then when we call the function we would use say something.

23
00:02:22,310 --> 00:02:25,460
If you spell something right and then

24
00:02:28,240 --> 00:02:31,210
we could put whatever we liked in that string

25
00:02:34,030 --> 00:02:37,480
that we get.

26
00:02:37,490 --> 00:02:46,190
So what we're doing now is we're passing a variable from our function call to the function itself which

27
00:02:46,190 --> 00:02:47,760
can be very useful.

28
00:02:48,410 --> 00:02:54,930
It makes it much more useful than a function which only does one thing regardless of how it's called.

29
00:02:54,950 --> 00:03:00,890
We can also define functions that return certain results.

30
00:03:00,890 --> 00:03:04,860
So let's say we had a function that multiply two numbers together.

31
00:03:08,080 --> 00:03:10,280
So let's call it multiply two numbers.

32
00:03:11,200 --> 00:03:19,540
And then if we wanted to accept 2 numbers with the function call then we might call those two numbers

33
00:03:19,630 --> 00:03:21,010
x and y

34
00:03:23,960 --> 00:03:33,840
and then we would return x multiplied by Y.

35
00:03:33,960 --> 00:03:41,940
So returning means we return to the function call a certain value or even multiple values.

36
00:03:41,940 --> 00:03:48,330
In some cases and then to print the result of that we might do something like print

37
00:03:51,590 --> 00:03:52,820
multiply two numbers

38
00:03:55,900 --> 00:04:06,980
for comma six and that would then give us the result 24.

39
00:04:06,990 --> 00:04:10,800
So this is really the full definition of a function.

40
00:04:11,130 --> 00:04:18,040
So the function takes certain values and then does something with them and returns a value.

41
00:04:18,870 --> 00:04:21,020
So a challenge for you then.

42
00:04:21,240 --> 00:04:24,150
While we're in I see mode with our prime numbers.

43
00:04:24,150 --> 00:04:29,860
Can you create a function called highest

44
00:04:32,600 --> 00:04:34,310
common factor.

45
00:04:35,770 --> 00:04:38,950
Which returns the highest

46
00:04:41,610 --> 00:04:50,050
number that divides into two of the numbers.

47
00:04:50,370 --> 00:04:52,700
Exactly.

48
00:04:52,740 --> 00:04:59,670
So what I mean there is if I call this function with 4 and 6 it would return 2 because 2 is the biggest

49
00:04:59,670 --> 00:05:02,620
number that goes into 4 and 6.

50
00:05:02,880 --> 00:05:11,010
If I call that with 8 and 10 it will also return to if I called it with 10 and 15 it would return 5

51
00:05:11,430 --> 00:05:16,030
because 5 is the biggest number that goes into 10 and 15.

52
00:05:16,230 --> 00:05:22,050
That's the challenge you're going to need a definition similar to this and probably a loop and some

53
00:05:22,050 --> 00:05:24,030
if statements as well.

54
00:05:24,140 --> 00:05:24,800
Go for it.

55
00:05:35,210 --> 00:05:35,760
All right.

56
00:05:35,790 --> 00:05:37,290
How have you managed it.

57
00:05:37,490 --> 00:05:46,350
We get them to define our function we'll use death and highest common factor.

58
00:05:49,780 --> 00:05:58,610
And I use the same numbers as before x and y and then I'm going to create a loop which will be a for

59
00:05:58,620 --> 00:06:04,290
loop and we'll have an AI which will start at 1.

60
00:06:04,390 --> 00:06:11,160
So we're going to look at a range of 1 and go up to x

61
00:06:13,690 --> 00:06:21,310
plus 1 because we're going to be using this loop to search for numbers which divide into both x and

62
00:06:21,310 --> 00:06:21,970
y.

63
00:06:22,210 --> 00:06:28,930
So if we go from 1 all the way up to x inclusive which is why we need the plus 1 x we want to include

64
00:06:28,930 --> 00:06:36,550
X because it could be that X is 5 and Y is 10 and therefore 5 is actually the highest common factor

65
00:06:36,760 --> 00:06:38,890
because 5 guys into by five and 10.

66
00:06:39,130 --> 00:06:44,580
So we want to include X itself in our search.

67
00:06:44,930 --> 00:06:57,340
Then we want to check to see if I goes into X which we get to by looking at x percent is equal to zero.

68
00:06:57,540 --> 00:07:02,800
So that's the remainder when X is divided by is equal to zero.

69
00:07:03,540 --> 00:07:19,180
And we want why present I to be able to zero to say if that's true we'll set HCF to be equal to that

70
00:07:19,180 --> 00:07:19,820
number.

71
00:07:20,970 --> 00:07:26,980
And notice we'll always get a result here because we're starting off with I being one and it goes into

72
00:07:26,980 --> 00:07:28,070
every hole number.

73
00:07:28,240 --> 00:07:31,040
So we'll start off with HCF being one.

74
00:07:31,270 --> 00:07:38,940
And then as I get bigger and bigger that might make HCF bigger and bigger as well.

75
00:07:39,100 --> 00:07:43,270
And then we get out of the if statement out of the for loop.

76
00:07:43,600 --> 00:07:53,670
And then within our highest common factor function definition we return HCF.

77
00:07:54,100 --> 00:07:56,210
All right let's take a look.

78
00:07:56,420 --> 00:08:08,240
Say print highest common factor and let's try four and six.

79
00:08:08,390 --> 00:08:09,260
And there we go.

80
00:08:09,410 --> 00:08:14,090
It's got to try a couple of the other examples that we had five and 10

81
00:08:17,330 --> 00:08:26,310
five fantastic and 10 and 15 was the other example we had five as well.

82
00:08:26,310 --> 00:08:27,300
Wonderful.

83
00:08:27,360 --> 00:08:28,740
You managed to do that.

84
00:08:28,890 --> 00:08:35,420
The last thing I want to show you is this idea of scope and that is where a variable is defined.

85
00:08:35,460 --> 00:08:42,750
So to see how this idea of scope works let's go back through and multiply two numbers function and we'll

86
00:08:42,750 --> 00:08:48,630
define a slightly different function this one will have that two numbers.

87
00:08:48,630 --> 00:08:55,380
But this time instead of passing the numbers to the function we're going to define the numbers outside

88
00:08:55,560 --> 00:08:56,890
the function.

89
00:08:57,180 --> 00:09:04,500
So we might have AI is equal to 5 and B is equal to 6.

90
00:09:04,850 --> 00:09:07,160
And then if we define add two numbers

91
00:09:10,290 --> 00:09:14,780
to return I plus B

92
00:09:17,580 --> 00:09:23,180
and then we print had two numbers.

93
00:09:26,710 --> 00:09:33,600
Let's take a look see if that gives us the how put it should it does 11.

94
00:09:33,700 --> 00:09:39,280
So because of these numbers here we're defined outside of the function.

95
00:09:39,400 --> 00:09:42,710
They're still accessible inside the function.

96
00:09:43,300 --> 00:09:50,110
However if we try and change them within the function then they're not changed in the main flow of the

97
00:09:50,110 --> 00:09:51,000
code.

98
00:09:52,300 --> 00:09:55,800
So I'll show you something surprising here.

99
00:09:56,650 --> 00:10:00,140
What we can do is set eye is equal to 10.

100
00:10:00,250 --> 00:10:05,200
I don't know why we'd want to do that but just to show you how the scope works if we set is equal to

101
00:10:05,200 --> 00:10:08,270
10 within the function definition.

102
00:10:08,590 --> 00:10:16,720
Then when we return A-plus B we now get 16 because it's 10 plus 6 16.

103
00:10:17,140 --> 00:10:27,180
But if we then print the value of say outside the function it's still 5.

104
00:10:27,200 --> 00:10:36,300
So essentially functions can absorb variables defined outside of them but they can't change them.

105
00:10:36,670 --> 00:10:44,120
Well is the only way that they can is by returning and then the variables themselves being changed in

106
00:10:44,120 --> 00:10:47,720
the main flow of the program.

107
00:10:47,720 --> 00:10:54,170
The final thing to show you is that if a variable is defined inside a function it generally will not

108
00:10:54,170 --> 00:10:56,970
be accessible outside of that function.

109
00:10:56,990 --> 00:11:06,170
So if we define C here to be 8 for example and then I try and print C outside of the function.

110
00:11:06,380 --> 00:11:08,310
We don't get any results.

111
00:11:08,600 --> 00:11:12,550
So that's the basics of how scope works in Python.

112
00:11:12,590 --> 00:11:20,150
Anything that is defined in the main flow of the program is accessible to a function but that function

113
00:11:20,150 --> 00:11:23,480
cannot edit it at least not permanently.

114
00:11:23,480 --> 00:11:30,860
And then any variable that is defined inside the function is not accessible from the main flow of the

115
00:11:30,860 --> 00:11:34,260
code or indeed from any other function either.

116
00:11:36,990 --> 00:11:37,670
All right.

117
00:11:37,930 --> 00:11:39,280
So that's how functions work.

118
00:11:39,280 --> 00:11:47,310
They're essentially ways to take chunks of code that you need reasonably often in your program and organize

119
00:11:47,310 --> 00:11:53,400
them so that they're stored together so you don't have to repeat the lines of code again and again and

120
00:11:53,700 --> 00:11:59,020
that your program is nicely readable and you can see right.

121
00:11:59,060 --> 00:12:02,980
So this function must be working at the highest common factor of these two numbers.

122
00:12:03,060 --> 00:12:07,340
Why rather than trying to struggle to see what's going on down there.

123
00:12:08,680 --> 00:12:09,240
Great.

124
00:12:09,280 --> 00:12:14,690
So now it's finally time to make our Python game mastermind.
