1
00:00:00,300 --> 00:00:05,520
One of the most useful things that we can do with the latest versions of CSSA is select elements in

2
00:00:05,520 --> 00:00:07,410
advanced ways.

3
00:00:07,410 --> 00:00:12,930
So let's just start off by some of the ways that way but used to selecting elements in C S S

4
00:00:16,340 --> 00:00:20,480
so we might have an H1 paragraph

5
00:00:25,460 --> 00:00:26,540
and I link

6
00:00:33,990 --> 00:00:42,090
and we would access the H-1 by simply typing each one.

7
00:00:42,120 --> 00:00:47,960
So if we wanted that to be read for example we just put color red in there.

8
00:00:48,350 --> 00:00:58,120
Similarly we could add a class to the paragraph tag and then we could access that class using a period

9
00:00:58,150 --> 00:01:03,190
or full stop and the class name and then

10
00:01:06,130 --> 00:01:07,690
apply some CSSA to it.

11
00:01:07,990 --> 00:01:08,470
Finally

12
00:01:15,030 --> 00:01:26,790
we can have an ID and we access the ID using a hash selector and the ID name and we might have something

13
00:01:26,790 --> 00:01:31,840
like font size is 200 percent which makes it big.

14
00:01:32,010 --> 00:01:36,990
So those are the selectors that we're used to using so forth but we can do a lot more than that.

15
00:01:36,990 --> 00:01:47,310
So first off let's add a div which surrounds our paragraph and our link what if I wanted to select all

16
00:01:47,310 --> 00:01:53,930
of the paragraphs within that div but not paragraphs outside.

17
00:01:57,710 --> 00:02:00,320
So one way would be to give them all a certain class

18
00:02:05,070 --> 00:02:06,460
but that's a little bit messy.

19
00:02:06,870 --> 00:02:10,130
And we don't really want to do that just so that we can select them.

20
00:02:11,150 --> 00:02:16,680
But we can actually select them using what's known as the descendant selector.

21
00:02:16,820 --> 00:02:23,270
So if we wanted to select all paragraph tags within this div we can just use div P

22
00:02:26,630 --> 00:02:30,940
and then that would select all of the paragraph tacks inside the div.

23
00:02:31,400 --> 00:02:35,030
So we might use font weight.

24
00:02:35,030 --> 00:02:36,440
Bold for those for example.

25
00:02:36,440 --> 00:02:41,520
And then you can see the ones in the day of bold but the one outside is not.

26
00:02:41,540 --> 00:02:44,620
We can also select what are known as sibling elements.

27
00:02:44,690 --> 00:02:49,280
So if we had a certain day if that had an H 3 element in it for example

28
00:02:54,220 --> 00:03:01,900
and we wanted to select all of the paragraphs in the same div that have an H three element in it then

29
00:03:01,900 --> 00:03:12,950
we can use H-3 and then Tilda which is the squiggly line for me shift and then the key next to Zed and

30
00:03:12,950 --> 00:03:14,740
then p.

31
00:03:15,890 --> 00:03:17,800
And for example we could underline all of those

32
00:03:24,600 --> 00:03:32,940
and then that would select all the pieces within a div with an age 3 and went in.

33
00:03:33,030 --> 00:03:34,170
But if we added

34
00:03:42,580 --> 00:03:45,820
another div then it wouldn't select that one.

35
00:03:45,820 --> 00:03:47,340
So this is in the other div.

36
00:03:47,440 --> 00:03:54,220
So it is from white board because it's in a div and it's a paragraph tag but it's not sharing its div

37
00:03:54,480 --> 00:03:55,400
with an H-3.

38
00:03:55,450 --> 00:03:58,960
So it's not underlined but if we put three in the

39
00:04:03,480 --> 00:04:05,940
then it would become underlined.

40
00:04:06,120 --> 00:04:14,250
So that can be a very useful way to have paragraphs on different styles depending on what other elements

41
00:04:14,250 --> 00:04:20,240
are in them we might want to be again a bit more fussy and only select the paragraph tag.

42
00:04:20,280 --> 00:04:26,670
Following the H-3 element you might want to give that a particular styling.

43
00:04:26,880 --> 00:04:36,520
So let's give that a font size of 150 percent so the first paragraph then is bigger but the rest are

44
00:04:36,520 --> 00:04:37,830
not.

45
00:04:37,840 --> 00:04:41,880
We can select elements that have a certain attribute in them.

46
00:04:41,950 --> 00:04:51,670
So if for example we wanted to select all the links which had a target which usually would mean that

47
00:04:51,670 --> 00:04:53,110
we'd say Target

48
00:04:55,700 --> 00:05:00,530
is equal to underscore blank which means that opens in a new tab and maybe we want to make all of those

49
00:05:00,590 --> 00:05:01,010
yellow

50
00:05:08,070 --> 00:05:10,300
then we could do that.

51
00:05:10,530 --> 00:05:14,180
And then if we had another link just put it down the bottom

52
00:05:20,040 --> 00:05:24,610
that link wouldn't be selected because it doesn't have a target.

53
00:05:24,790 --> 00:05:26,420
We could even be super fussy.

54
00:05:26,550 --> 00:05:27,660
I've lost my Atra if they're

55
00:05:33,500 --> 00:05:40,510
say this link goes to Google dot com and then we could select links that only go to Google dot com

56
00:05:51,140 --> 00:05:52,120
and maybe make them bigger.

57
00:05:52,160 --> 00:05:52,730
For some reason

58
00:05:58,990 --> 00:06:09,940
and there we get of course if I change the ref to Dan here then that one would become bigger and these

59
00:06:09,950 --> 00:06:11,680
don't necessarily need to be links either.

60
00:06:11,810 --> 00:06:16,690
We could use any element that has any particular attribute to select for.

61
00:06:17,090 --> 00:06:25,250
We could even select links which go to anywhere on Google dot com using Stuy equals.

62
00:06:25,250 --> 00:06:28,860
Which means that the ATF just has to contain Google dot com.

63
00:06:28,970 --> 00:06:32,750
We could even make that just Google that.

64
00:06:33,080 --> 00:06:38,660
Well in this case do exactly the same thing but this would then be more general and only select links

65
00:06:38,660 --> 00:06:40,650
which had Google in them somewhere.

66
00:06:40,910 --> 00:06:44,190
We can also customize this in a number of other ways.

67
00:06:45,140 --> 00:06:48,480
So if I add this has a comment

68
00:06:53,380 --> 00:06:54,160
if we use

69
00:06:57,050 --> 00:07:05,610
conflict's equals this we'll look for whether the attribute begins with whatever we have in the quotes

70
00:07:05,610 --> 00:07:13,120
then we can use the dollar sign equals to check whether it ends with a particular value.

71
00:07:13,290 --> 00:07:22,950
We can use till the equals to see if it has the value between two spaces.

72
00:07:22,990 --> 00:07:28,420
So if they attribute has multiple classes for example or IDs or be separated by spaces and we could

73
00:07:28,420 --> 00:07:29,360
find them here.

74
00:07:31,310 --> 00:07:39,790
And finally we can use the pipe symbol so shift and then for me the key just above the right shift button

75
00:07:41,410 --> 00:07:52,530
to see if it has the valley separated by hyphens i.e. the dash symbol.

76
00:07:52,530 --> 00:07:57,210
So if you've got a class name that's made up of a number of different names separated by hyphens you

77
00:07:57,210 --> 00:08:00,170
can search for it using that.

78
00:08:00,180 --> 00:08:05,550
So there you get a whole different range of ways that we can select things which mostly have the benefit

79
00:08:05,910 --> 00:08:12,990
of keeping your code more simple or more simple and just styling separated from it.

80
00:08:13,140 --> 00:08:18,720
So it reduces the need for having specific classes or IDs just for styling purposes.

81
00:08:18,780 --> 00:08:24,120
That's just the start of fancy selectors that in the next video will see how to use pseudo classes to

82
00:08:24,120 --> 00:08:28,080
select one or number of elements in advanced and complex ways.
