WEBVTT
1
00:00:00.420 --> 00:00:04.770
Now that we've covered the basics of Python programming we're going to put it all together and make

2
00:00:04.830 --> 00:00:07.730
a game called mastermind.

3
00:00:07.860 --> 00:00:09.390
Now you may have played most of mine before.

4
00:00:09.450 --> 00:00:16.500
It was one of my favorite games as a boy and it works like this one player chooses a sequence of four

5
00:00:16.560 --> 00:00:21.990
colored pins and then hides them away in one end of the board.

6
00:00:22.050 --> 00:00:28.950
The other player then has to guess that sequence and they get the sequence by making a guess and then

7
00:00:29.340 --> 00:00:36.270
they receive white or red pins in response and they get a white pin for every color that they get correct.

8
00:00:36.270 --> 00:00:37.800
But in the wrong place.

9
00:00:37.830 --> 00:00:45.240
So in this case they've got a blue which is correct but in the wrong place and they get a red pin for

10
00:00:45.240 --> 00:00:46.820
every color that they get correct.

11
00:00:46.830 --> 00:00:48.270
And in the right place.

12
00:00:48.540 --> 00:00:51.590
So here they've got a red in the correct place.

13
00:00:51.690 --> 00:00:56.200
So they get a red and they've got a purple in the wrong place.

14
00:00:56.340 --> 00:01:02.710
So they get a white for that and then they just have to keep guessing until they get it completely right.

15
00:01:02.730 --> 00:01:03.660
It's fairly straightforward.

16
00:01:03.750 --> 00:01:09.150
But feel free to have a read of the Wikipedia master mind page to get absolutely clear on how the rules

17
00:01:09.150 --> 00:01:10.030
work.

18
00:01:10.740 --> 00:01:16.200
And there is one thing that I want to show you from the programming side before I set you up on the

19
00:01:16.200 --> 00:01:22.710
challenge and that is that so far we haven't actually seen a way to interact with the user in Python

20
00:01:22.740 --> 00:01:23.850
as yet.

21
00:01:23.850 --> 00:01:29.430
And we're going to set up a very simple way to do that here and that's using GET variables.

22
00:01:29.460 --> 00:01:34.470
So I'm just going to show you how GET variables work in Python and then send you off to make the game

23
00:01:35.220 --> 00:01:37.230
in order to use GET variables in Python.

24
00:01:37.230 --> 00:01:42.000
We need to import the CGI library.

25
00:01:42.040 --> 00:01:48.210
Now we've never done anything like this in javascript or HP but we do need to do it in Python and related

26
00:01:48.210 --> 00:01:49.100
languages.

27
00:01:49.140 --> 00:01:54.060
Essentially we're bringing in extra functions that otherwise wouldn't be included in the program if

28
00:01:54.060 --> 00:01:55.590
they're not needed.

29
00:01:55.590 --> 00:02:01.020
So if you want to connect to my school database for example then you would import a library then as

30
00:02:01.020 --> 00:02:02.150
well.

31
00:02:02.190 --> 00:02:08.610
So this CGI or common Gateway Interface brings in a bunch of functions which allows us to communicate

32
00:02:08.610 --> 00:02:11.130
with the user or the browser.

33
00:02:11.310 --> 00:02:18.600
One of them being being able to access GET and POST variables and we do this by setting up a variable

34
00:02:18.600 --> 00:02:27.500
which is normally called form and we set that equal to CGI dot field storage

35
00:02:30.100 --> 00:02:31.080
which kind of makes sense.

36
00:02:31.090 --> 00:02:35.860
This is the field storage for post and get variables.

37
00:02:36.010 --> 00:02:41.800
Notice that there's no difference between post and get as far as Python or CGI are concerned that will

38
00:02:41.800 --> 00:02:42.670
one and the same.

39
00:02:42.670 --> 00:02:44.210
So we could use either here.

40
00:02:44.770 --> 00:02:50.130
So let's add a GET variable onto how you are entering.

41
00:02:50.160 --> 00:02:53.610
So I'll just use name equals Rob.

42
00:02:54.160 --> 00:02:56.700
It's obviously not going to do anything different.

43
00:02:56.710 --> 00:03:05.780
As yet I haven't saved it but if I want to access that then I just do something like print form don't

44
00:03:05.890 --> 00:03:07.710
get value.

45
00:03:08.410 --> 00:03:11.440
And then name.

46
00:03:11.540 --> 00:03:18.490
So we take how CGI Topfield storage and get a particular value from it.

47
00:03:18.590 --> 00:03:19.390
Simple as that.

48
00:03:19.400 --> 00:03:22.790
So that should print Rob there we go.

49
00:03:23.330 --> 00:03:36.100
Now notice that we have an issue if we try and access a value which doesn't exist then it returns None.

50
00:03:36.350 --> 00:03:40.340
And if we try and use that in our program it will likely generate an error.

51
00:03:40.970 --> 00:03:47.480
So what we should do is check to see whether our get variable exists before we try and use it.

52
00:03:48.050 --> 00:03:50.470
And there's an easy way to do that.

53
00:03:50.570 --> 00:04:02.030
So if we're looking for the GET variable name then we can see whether it exists in the form object by

54
00:04:02.030 --> 00:04:07.460
looking for name in form.

55
00:04:07.970 --> 00:04:14.870
And that's a really handy formulation that allows us to look for a particular value in what is effectively

56
00:04:14.870 --> 00:04:15.730
a dictionary.

57
00:04:15.860 --> 00:04:19.460
It's not quite a dictionary but we can think of it more or less as that.

58
00:04:19.490 --> 00:04:25.240
So if there's a name in form then we could print it

59
00:04:30.370 --> 00:04:36.170
and maybe else we could print something like that.

60
00:04:36.200 --> 00:04:37.540
So at the moment we'll print Rob.

61
00:04:37.930 --> 00:04:39.100
And then if I changed

62
00:04:42.840 --> 00:04:47.200
to use a name then we get no name so simple as that.

63
00:04:47.200 --> 00:04:48.980
That's the only thing that you needed him.

64
00:04:49.270 --> 00:04:51.070
So now it's time to make the game.

65
00:04:51.310 --> 00:04:56.590
Now you can make it any way you like but the way I'm going to build it to keep things simple graphically

66
00:04:56.830 --> 00:04:59.220
is to use numbers rather than colors.

67
00:04:59.500 --> 00:05:06.190
So essentially I'm going to get the python script to generate a random four digit number which then

68
00:05:06.190 --> 00:05:07.770
the user has to guess.

69
00:05:07.930 --> 00:05:13.240
So the user is entering a number and we're comparing the digits of that four digit number to the true

70
00:05:13.240 --> 00:05:14.770
value.

71
00:05:14.800 --> 00:05:19.660
So the one thing that you will have to do that you haven't seen yet is generate random numbers but I'm

72
00:05:19.660 --> 00:05:23.210
sure with a little bit of googling you can figure out how to do that in Python.

73
00:05:23.290 --> 00:05:28.120
Of course if you want to create a graphical version then fantastic Go for it.

74
00:05:28.450 --> 00:05:32.610
But I'm focusing on the code side of things rather than the graphical side.

75
00:05:32.650 --> 00:05:35.310
So the numbers make more sense from that point of view.

76
00:05:36.560 --> 00:05:37.870
They give it a good shot.

77
00:05:37.880 --> 00:05:38.740
Best of luck.

78
00:05:45.330 --> 00:05:45.890
All right.

79
00:05:45.900 --> 00:05:46.740
Did you manage it.

80
00:05:46.980 --> 00:05:47.990
I hope so.

81
00:05:48.510 --> 00:05:49.200
I'm going to get back.

82
00:05:49.230 --> 00:05:51.910
See an almost empty page.

83
00:05:51.910 --> 00:05:56.190
I'll leave the import CGI and the form there because we're going to be using that later on.

84
00:05:56.310 --> 00:06:01.990
But I'll start off by generating the form for the user.

85
00:06:02.580 --> 00:06:07.800
So I will have a title.

86
00:06:07.830 --> 00:06:08.380
Mastermind

87
00:06:11.260 --> 00:06:13.660
and I'll just make sure that's displaying OK great

88
00:06:17.100 --> 00:06:19.050
and then print something like

89
00:06:25.710 --> 00:06:35.660
let's go for double quotes here so that I can put the single quote in that I've chosen a four digit

90
00:06:36.260 --> 00:06:39.350
number.

91
00:06:39.440 --> 00:06:40.110
Can you guess it

92
00:06:45.670 --> 00:06:46.350
gay.

93
00:06:46.410 --> 00:06:48.330
And then we'll have our form

94
00:06:52.880 --> 00:06:59.930
which is going to have an input with a type of text and a name

95
00:07:04.180 --> 00:07:05.160
of guess

96
00:07:11.620 --> 00:07:21.870
and then we'll have an input with a type of submit and a value of guess

97
00:07:28.570 --> 00:07:29.910
and then we'll now form

98
00:07:33.000 --> 00:07:33.350
OK.

99
00:07:33.370 --> 00:07:34.790
Let's take a look at that.

100
00:07:34.820 --> 00:07:35.920
Great.

101
00:07:36.050 --> 00:07:40.530
So I'll just have a quick guess to make sure the forms connected up.

102
00:07:40.570 --> 00:07:41.650
All right.

103
00:07:41.860 --> 00:07:47.290
And we should find that guess in they you are registering now.

104
00:07:47.710 --> 00:07:48.440
Wonderful.

105
00:07:48.850 --> 00:07:54.540
So a quick thing I think I'd like that guess to appear in the box so that the user knows what they've

106
00:07:54.550 --> 00:07:57.280
guessed each time.

107
00:07:57.280 --> 00:08:00.820
So let's set that up.

108
00:08:01.090 --> 00:08:05.700
So we'll check to see if there is a guess.

109
00:08:05.710 --> 00:08:19.090
So if there's a guess in the form i.e. in the query string for the UI around then we'll set guess equal

110
00:08:19.090 --> 00:08:25.600
to a form don't get value.

111
00:08:27.020 --> 00:08:30.590
Guess And if not

112
00:08:33.290 --> 00:08:37.110
we'll set guess to be just an empty string.

113
00:08:39.470 --> 00:08:39.970
OK.

114
00:08:39.980 --> 00:08:44.140
And then we can just add a value here.

115
00:08:46.630 --> 00:08:53.030
And we'll put in guess to that value.

116
00:08:55.320 --> 00:08:56.160
OK let's have a look.

117
00:08:56.160 --> 00:08:57.280
So we should now find.

118
00:08:57.300 --> 00:08:59.860
Yep there we go that I guess is there.

119
00:09:00.210 --> 00:09:00.790
All right.

120
00:09:00.900 --> 00:09:03.170
So now we've set up the user interface.

121
00:09:03.510 --> 00:09:06.200
We're going to have to guess that four digit number.

122
00:09:06.660 --> 00:09:12.020
So let's find out how to generate a random number in Python.

123
00:09:15.650 --> 00:09:19.340
We I don't even need to spell generate correctly.

124
00:09:19.370 --> 00:09:21.230
Google is clever enough.

125
00:09:21.240 --> 00:09:21.720
Here we go.

126
00:09:21.730 --> 00:09:26.140
Generate random integers between 0 and 9 that is promising.

127
00:09:29.130 --> 00:09:30.100
OK there we go.

128
00:09:30.250 --> 00:09:35.830
I've actually tried out that first one and I had issues with the python set up that we've got on the

129
00:09:35.830 --> 00:09:40.250
web server so I'm going to try the second one here.

130
00:09:40.510 --> 00:09:43.770
That's worked better for me.

131
00:09:44.160 --> 00:09:47.650
But if you're using Python in a different way that might work well for you.

132
00:09:48.270 --> 00:09:49.660
I'm going to go for the second answer.

133
00:09:49.670 --> 00:09:59.120
So we need to import random just like we imported CGI up here so that we can use various random functions

134
00:10:03.460 --> 00:10:09.980
and then what I really want to generate is a random string of numbers because the user is going to be

135
00:10:09.980 --> 00:10:12.130
entering effectively a string.

136
00:10:12.290 --> 00:10:15.140
And so it's going to be easy to easier to compare.

137
00:10:15.200 --> 00:10:18.970
If the answer is in the form of a string as well.

138
00:10:19.550 --> 00:10:28.190
So I'm going to set up an empty string called answer and then I'm going to set up a loop to add four

139
00:10:28.250 --> 00:10:30.910
random digits to that answer.

140
00:10:33.700 --> 00:10:37.070
So I will go for i in range

141
00:10:40.740 --> 00:10:47.350
we can use range for to go from zero to full or there are two or three really repeated four times is

142
00:10:47.350 --> 00:10:49.050
what we're really interested in.

143
00:10:49.210 --> 00:10:58.130
And then to generate that random integer we use random rant and then 0 9.

144
00:10:58.180 --> 00:10:59.250
So let's see that's

145
00:11:07.120 --> 00:11:10.230
not we're going to need to convert that to a string.

146
00:11:10.570 --> 00:11:13.100
So we use SDR to do that.

147
00:11:13.150 --> 00:11:17.820
And then I want to append that to answer.

148
00:11:17.960 --> 00:11:18.950
So going to answer.

149
00:11:18.970 --> 00:11:20.540
Plus equals.

150
00:11:20.860 --> 00:11:26.100
And then that string and that should do it.

151
00:11:26.750 --> 00:11:34.520
So for now let's just print onset to make sure that we are generating a random string of four digits

152
00:11:34.550 --> 00:11:35.480
that's looking promising.

153
00:11:35.480 --> 00:11:42.480
0 8 5 4 1 0 1 4 1 9 5 6 wonderful OK.

154
00:11:42.850 --> 00:11:48.580
So that's really good but we don't want to generate a new string every time the user makes a guess.

155
00:11:48.610 --> 00:11:51.010
Otherwise that's going to make the game very very hard.

156
00:11:51.220 --> 00:11:54.980
So we're going to need a way to store the answer.

157
00:11:55.270 --> 00:12:01.180
And I think the simplest way to do it is to make it a hidden variable inside the form.

158
00:12:01.570 --> 00:12:16.180
So let's add a new input with a type of hidden and name equals serve and volley is going to be equal

159
00:12:16.180 --> 00:12:26.540
to a onza So of course that means that anyone could cheat in this game by looking at the source of the

160
00:12:26.540 --> 00:12:28.570
code and finding the answer in there.

161
00:12:28.570 --> 00:12:34.180
But I don't think that's a major issue here if people really want to do that then fair game to them.

162
00:12:36.190 --> 00:12:49.600
So once we've got that then we can check to see if there's an answer in form and if there is we'll set

163
00:12:49.660 --> 00:12:53.750
the answer equal to a forum to get value.

164
00:12:56.080 --> 00:12:56.330
So

165
00:12:59.250 --> 00:13:02.760
and if there isn't then we'll create a new onza

166
00:13:05.950 --> 00:13:07.270
like that.

167
00:13:07.330 --> 00:13:10.420
So now we should generate an answer the first time.

168
00:13:10.510 --> 00:13:16.340
But then every time after that it will be the same onsets of guessing the same thing each time.

169
00:13:16.810 --> 00:13:22.820
Let's have a look at that and I think I've gotten a plus there.

170
00:13:23.130 --> 00:13:29.120
And also a close double quotes there as well.

171
00:13:29.220 --> 00:13:30.560
Let's have a look.

172
00:13:30.570 --> 00:13:34.340
So first time we've generated a random number 7 1 9 7.

173
00:13:34.350 --> 00:13:38.420
But if I submit I guess then the answer remains the same.

174
00:13:38.460 --> 00:13:40.490
7 1 9 7.

175
00:13:41.070 --> 00:13:45.980
While we're here we're going to need to keep track of the number of guesses of the user as well.

176
00:13:47.540 --> 00:13:51.870
Because they're going to need to be able to get it within a certain number of guesses.

177
00:13:52.040 --> 00:13:52.970
So let's create

178
00:13:58.360 --> 00:14:06.600
another hidden variables with the name of number of guesses.

179
00:14:13.090 --> 00:14:21.190
And we'll set the value equal to the variable called number of guesses which I haven't defined yet.

180
00:14:21.210 --> 00:14:22.200
But that's OK.

181
00:14:33.200 --> 00:14:34.860
And just a thought as well.

182
00:14:34.960 --> 00:14:42.490
But notice the user is going to see the answer in the string up here which isn't great but there's a

183
00:14:42.490 --> 00:14:44.140
very easy fix for that.

184
00:14:44.140 --> 00:14:51.640
We'll just switch from get to post which remember is not differentiated at all by the python script

185
00:14:51.660 --> 00:14:52.460
anyway.

186
00:14:52.620 --> 00:14:59.170
So if I just change that to method equals post then that should work fine.

187
00:15:00.660 --> 00:15:09.500
So now let's just set up our number of guesses so I will use the same set up as before if number of

188
00:15:09.530 --> 00:15:13.120
guesses in form.

189
00:15:13.910 --> 00:15:22.860
Then we'll set number of guesses to be equal to it.

190
00:15:24.640 --> 00:15:33.500
Form a dog get Valley number of guesses and we're going to need it to be an inch.

191
00:15:33.520 --> 00:15:42.000
Because we're going to add 1 to it's in fact we'll have one right there because if this is being processed

192
00:15:42.000 --> 00:15:50.200
it means they've had a new guess say Else number.

193
00:15:50.360 --> 00:15:56.460
Forget our code on that number of guesses is zero.

194
00:15:57.730 --> 00:16:00.810
And then because number of guesses is an integer.

195
00:16:00.800 --> 00:16:03.200
We're going to need to convert it to a string.

196
00:16:03.320 --> 00:16:09.040
One way of displaying it down that k.

197
00:16:09.080 --> 00:16:10.820
Take a look at that.

198
00:16:11.570 --> 00:16:16.870
So let's just get rid of the query strings completely say we're more or less starting afresh.

199
00:16:16.910 --> 00:16:19.200
So there's a new random number.

200
00:16:19.270 --> 00:16:25.160
Now if I make a guess one two three four then you can see it has remained but the random number but

201
00:16:25.160 --> 00:16:29.690
it's not in the query string which is great if we have a look at the source.

202
00:16:30.050 --> 00:16:33.870
We've got our random number there and outguess it.

203
00:16:33.900 --> 00:16:37.930
Value of 1 which is promising we guess again we should get

204
00:16:41.520 --> 00:16:44.200
a number of guesses being too wonderful.

205
00:16:48.620 --> 00:16:55.130
OK so we're coming along nicely now it's the fun bit because we need to work out how accurate the user's

206
00:16:55.310 --> 00:16:56.960
guess is.

207
00:16:57.050 --> 00:16:58.310
So we need to work out.

208
00:16:58.400 --> 00:17:03.150
Remember the number of red pins and the number of white pins essentially.

209
00:17:03.170 --> 00:17:07.670
Remember they get a red pin if they get a digit in the right place.

210
00:17:07.670 --> 00:17:10.070
So let's check for that.

211
00:17:10.070 --> 00:17:14.820
Now we only want to verify I guess if I've actually made a guess.

212
00:17:14.960 --> 00:17:24.540
So let's write our case for that here and just in case something strange happens I will set up our answer

213
00:17:24.560 --> 00:17:29.520
before the guests that we know that we can access the answer variable as well.

214
00:17:30.020 --> 00:17:38.000
So we're going to want to loop through that guess and then check that against the equivalent number

215
00:17:38.660 --> 00:17:41.580
or equivalent digit in the answer.

216
00:17:42.140 --> 00:17:44.840
So looping through a string is actually really easy.

217
00:17:44.840 --> 00:17:48.200
It's the same as looping through a list.

218
00:17:48.200 --> 00:18:01.390
We just use We're doing that for let's say digit in guess and then that would loop three.

219
00:18:01.420 --> 00:18:05.790
In our case one two three and then four.

220
00:18:05.820 --> 00:18:15.210
So we want to compare that to 7 5 8 and 3 which means we're going to need not just the digit but the

221
00:18:15.210 --> 00:18:17.640
place in the string as well.

222
00:18:17.640 --> 00:18:22.440
Now one way to do that would be to have a counter variable and then add 1 to it each time.

223
00:18:22.770 --> 00:18:24.850
But I suspect there's a better way.

224
00:18:25.290 --> 00:18:28.270
And essentially what we want is the key and the value.

225
00:18:28.290 --> 00:18:34.940
So the key will be 0 1 2 3 and the valuable B in this case 1 2 3 and 4.

226
00:18:35.400 --> 00:18:45.980
So let's see if we can find a way in Python to do that Python for loop get key and value for at least

227
00:18:47.700 --> 00:18:50.360
something like that.

228
00:18:50.670 --> 00:18:53.870
And that top results looks promising.

229
00:18:53.940 --> 00:19:03.070
Essentially what we want to recreate is ph PS for each array as key value function ha.

230
00:19:03.110 --> 00:19:06.790
And here we've got it says the numerator function in Python.

231
00:19:07.190 --> 00:19:11.990
And indeed in swift and a few other programming languages as well.

232
00:19:11.990 --> 00:19:17.470
So that we can get the key and the value which is what we want.

233
00:19:17.480 --> 00:19:31.510
So instead of just digit Let's get key and digit in and instead of guess it's enumerate guess that we

234
00:19:31.510 --> 00:19:32.250
go.

235
00:19:32.540 --> 00:19:35.510
And notice that of course guess is a string here.

236
00:19:35.820 --> 00:19:42.990
But we can effectively treat strings as lists of digits or characters.

237
00:19:43.390 --> 00:19:50.980
And that way we can enumerate them or loop through them with a flip just in the same way we would a

238
00:19:50.980 --> 00:19:53.020
list.

239
00:19:53.020 --> 00:20:01.250
So just to convince ourselves that's worked let's just print digit to make sure that that's worked OK

240
00:20:01.260 --> 00:20:04.340
and we should get one two three four every game.

241
00:20:05.560 --> 00:20:07.350
And that's print key as well.

242
00:20:07.430 --> 00:20:13.190
What should we get this time should be 0 1 2 3

243
00:20:16.750 --> 00:20:21.380
0 1 2 3 because the keys always start at zero right.

244
00:20:21.520 --> 00:20:24.550
So what we want to check is whether digit

245
00:20:27.700 --> 00:20:35.050
is equal to that equivalent character or digit in the answer.

246
00:20:35.080 --> 00:20:39.820
So to get that we can use answer and then key

247
00:20:42.950 --> 00:20:47.840
and if that's the case that means they've got one number or digit in the right place.

248
00:20:47.930 --> 00:20:51.170
So they get an extra red.

249
00:20:51.250 --> 00:20:56.350
So let's define red as being 0.

250
00:20:56.860 --> 00:21:00.070
And whites being 0 as well.

251
00:21:00.370 --> 00:21:04.760
And then we can add one to the number of reds.

252
00:21:05.080 --> 00:21:07.490
If I get one in the right place.

253
00:21:08.080 --> 00:21:15.710
So just to check that that's worked let's print the number of reds for a few guesses.

254
00:21:17.270 --> 00:21:18.740
So one two three four.

255
00:21:18.770 --> 00:21:23.680
We shouldn't get any ready for that because there's no numbers in the right place for that answer.

256
00:21:24.500 --> 00:21:25.800
So it's excellent.

257
00:21:25.940 --> 00:21:29.210
What if we get a 3 at the end and that three is correct.

258
00:21:29.210 --> 00:21:31.650
So we should get one we go.

259
00:21:31.970 --> 00:21:40.530
If we get 8 three you get two excellent and if we get the whole thing right we get four.

260
00:21:40.680 --> 00:21:42.150
Wonderful.

261
00:21:42.210 --> 00:21:52.070
So that's what let's now set up the whites we only anyone to check for whites if this one isn't already

262
00:21:52.070 --> 00:21:53.230
in the right place.

263
00:21:53.630 --> 00:22:03.460
So I think the simplest way to do this is to just loop through the on string.

264
00:22:03.680 --> 00:22:13.120
So I'll create a variable answer digit in Onslow and then we're essentially looping through answer.

265
00:22:13.640 --> 00:22:26.870
And then we'll check to see if the answer digit is equal to our guess which is digit.

266
00:22:27.230 --> 00:22:32.750
So this is the case then they've got one right but it can't be in the right place because we're using

267
00:22:32.800 --> 00:22:35.780
elves here and we've already checked whether it's in the right place.

268
00:22:35.810 --> 00:22:38.680
So if we're down here it's definitely not in the right place.

269
00:22:40.620 --> 00:22:45.210
So if we get to here then they must have got one correct.

270
00:22:45.390 --> 00:22:46.970
But in the wrong place.

271
00:22:47.230 --> 00:22:49.090
So we'll add one to White's

272
00:22:51.960 --> 00:22:58.620
there is a danger that they'll get two whites for one number here if they've guessed to three for example

273
00:22:58.890 --> 00:23:04.140
and there's two threes in the answer that would give them to whites which may be how you want your version

274
00:23:04.140 --> 00:23:05.180
of mastermind to work.

275
00:23:05.310 --> 00:23:10.920
But in the official version you would only get one white if you got 1 3 in the wrong place.

276
00:23:10.950 --> 00:23:14.360
Even if there were two threes in the answer.

277
00:23:14.730 --> 00:23:21.720
So I'm going to deal with that by using borate which we've seen before in javascript and it works in

278
00:23:21.820 --> 00:23:22.880
HP as well.

279
00:23:22.880 --> 00:23:30.690
It will generally break us out of the for loop so it will stop going through this process which means

280
00:23:30.690 --> 00:23:36.390
that we'll only get a maximum of one extra white for each digit that I get in the right place.

281
00:23:38.300 --> 00:23:38.890
All right.

282
00:23:38.990 --> 00:23:41.860
So that should actually check all our Whyte's for us.

283
00:23:41.960 --> 00:23:45.720
Let's print whites and have a look.

284
00:23:48.130 --> 00:23:53.170
So if I get 7 5 8 3 I should get zero whites because I've got them all right but they're all in the

285
00:23:53.170 --> 00:23:54.120
right place.

286
00:23:54.630 --> 00:23:57.950
Let's stay 0 0 0 7.

287
00:23:57.950 --> 00:24:01.910
I should give me one right because I've got a 7 in the wrong place.

288
00:24:01.920 --> 00:24:02.800
Excellent.

289
00:24:03.280 --> 00:24:09.360
And if I put an 8 in there as the second digit that should give me two whites.

290
00:24:09.580 --> 00:24:11.630
Everything seems to be working fine.

291
00:24:12.350 --> 00:24:14.420
And I'll just put a five in.

292
00:24:14.420 --> 00:24:17.170
Make sure that you give us three.

293
00:24:17.240 --> 00:24:20.200
And finally a 3 at the beginning should give us four.

294
00:24:20.810 --> 00:24:21.880
Wonderful.

295
00:24:22.280 --> 00:24:24.080
So that all seems to be working great.

296
00:24:24.110 --> 00:24:29.360
So now it's just a matter of letting the user know how many guesses they've had and how many whites

297
00:24:29.420 --> 00:24:31.350
and how many reds they've got.

298
00:24:32.400 --> 00:24:43.680
So let's create a message variable which we're going to fill with the message for the user and we'll

299
00:24:43.680 --> 00:24:49.920
start by checking if the number of guesses is equal to zero.

300
00:24:50.790 --> 00:24:53.560
And if that's the case we'll set message equal to the

301
00:24:56.710 --> 00:24:58.490
the starting message.

302
00:25:01.710 --> 00:25:02.330
Which should put

303
00:25:06.760 --> 00:25:10.450
like that and while we're here

304
00:25:13.450 --> 00:25:14.910
we'll just add message

305
00:25:17.790 --> 00:25:18.310
there.

306
00:25:18.570 --> 00:25:21.390
So if they've just started the game they haven't started guessing yet.

307
00:25:21.510 --> 00:25:23.100
So they've got zero guesses.

308
00:25:23.100 --> 00:25:31.110
Then we'll show them the start of message that otherwise we're going to generate the message from the

309
00:25:31.140 --> 00:25:34.680
number of reds and whites.

310
00:25:34.680 --> 00:25:35.790
So let's go for

311
00:25:38.880 --> 00:25:39.510
you have

312
00:25:43.470 --> 00:25:44.150
reds

313
00:25:47.740 --> 00:25:57.850
digits in the right place and let's call them correct teachers just to let you have that number of correct

314
00:25:57.850 --> 00:26:04.060
digits in the right place and Whyte's

315
00:26:06.900 --> 00:26:22.980
correct digits in the wrong place and also tell them you have had a number of guesses.

316
00:26:29.790 --> 00:26:30.170
Guesses

317
00:26:33.450 --> 00:26:35.450
and we should probably put brackets around that

318
00:26:39.760 --> 00:26:44.680
if you want to get your plurals correct then you could always do some checking to see if Reade's is

319
00:26:44.680 --> 00:26:50.060
more than one that it's a plural etc. but I won't waste your time with doing that right now.

320
00:26:51.130 --> 00:26:52.900
OK let's have a look.

321
00:26:53.970 --> 00:27:00.010
So if I guess 3 8 5 7 and something's gone horribly wrong I guess.

322
00:27:00.010 --> 00:27:01.260
Can you see what it is.

323
00:27:02.470 --> 00:27:13.190
All of these are integers and I need them to be strings so I will just use SDR to convert them to strings.

324
00:27:17.220 --> 00:27:22.100
And then we get to have a look.

325
00:27:22.270 --> 00:27:28.630
Exham So we've got nought correct digits in the wrong in the right place and four correct digits in

326
00:27:28.630 --> 00:27:31.830
the wrong place and we've had 12 guesses.

327
00:27:31.910 --> 00:27:33.790
That looks pretty bang on.

328
00:27:34.270 --> 00:27:35.730
So we're actually pretty close.

329
00:27:35.740 --> 00:27:40.200
I think the only thing we need to add is a message when they finally get it right.

330
00:27:43.480 --> 00:27:46.010
So we should check here.

331
00:27:46.270 --> 00:27:53.180
We should have an else if and we're looking for reds being equal to four.

332
00:27:53.380 --> 00:27:55.040
So that means they've got it right.

333
00:27:58.200 --> 00:28:00.790
So if Redds is four will that message equal to a

334
00:28:04.100 --> 00:28:07.420
while you've got it in

335
00:28:10.900 --> 00:28:15.100
as to number of guesses.

336
00:28:17.430 --> 00:28:23.720
Guess is and you might want to have some kind of scoring system that if they get it in less than 10

337
00:28:23.720 --> 00:28:26.280
then they've done well or whatever it might be.

338
00:28:26.400 --> 00:28:27.780
But I'll leave that up to you.

339
00:28:27.980 --> 00:28:35.510
What I am going to add is I play again link which is actually very easy if we just do an empty link

340
00:28:35.510 --> 00:28:41.560
that will link back to this page without submitting the form so it will effectively restart the game.

341
00:28:43.830 --> 00:28:46.760
So if we can just do a play again.

342
00:28:51.960 --> 00:28:58.390
And then we'll have other else there to be a normal response.

343
00:29:00.650 --> 00:29:02.860
All right so let's play the game.

344
00:29:03.200 --> 00:29:14.410
I've forgotten that in Python else if is I think slightly oddly but very concisely reduced to Elif I

345
00:29:14.410 --> 00:29:16.630
don't think.

346
00:29:16.990 --> 00:29:18.680
All right so that's it.

347
00:29:18.680 --> 00:29:24.090
All that remains I think is to have a go of the game and let's see how many goes I can get this in.

348
00:29:24.980 --> 00:29:27.720
So let's start with something like 1 1 2 2.

349
00:29:28.300 --> 00:29:28.700
OK.

350
00:29:28.700 --> 00:29:33.240
One correct digit in the right place and one in the wrong place.

351
00:29:33.290 --> 00:29:39.880
So I'm going to change that to one on one to see whether it is a one or two.

352
00:29:39.890 --> 00:29:40.580
And there we go.

353
00:29:40.580 --> 00:29:46.590
So definitely I've got one of those in the right place.

354
00:29:48.880 --> 00:29:50.690
That's changed that's one triple t.

355
00:29:50.750 --> 00:29:51.870
OK.

356
00:29:52.220 --> 00:29:58.580
So I'm fairly sure then that there's a 1 in the second digit that would get the one in the second digit

357
00:29:58.670 --> 00:29:59.820
and no twos.

358
00:29:59.840 --> 00:30:01.070
That's useful information.

359
00:30:01.130 --> 00:30:04.460
Let's try to zero in there and see what happens.

360
00:30:04.460 --> 00:30:05.620
OK in those areas

361
00:30:08.850 --> 00:30:12.330
that's pop a 7 in there.

362
00:30:12.380 --> 00:30:13.380
No sevens.

363
00:30:13.430 --> 00:30:17.110
I don't know why she's seven or choiceless What my way up.

364
00:30:17.190 --> 00:30:17.930
We'll do a three

365
00:30:20.930 --> 00:30:24.460
OK three 4 Ah.

366
00:30:24.580 --> 00:30:25.260
That was a bit of luck.

367
00:30:25.330 --> 00:30:27.440
Two correct digits in the right place.

368
00:30:27.760 --> 00:30:28.480
OK.

369
00:30:28.480 --> 00:30:29.560
We're not doing too badly.

370
00:30:29.570 --> 00:30:36.620
Five one correct digit in the wrong place to the last one must be a five.

371
00:30:36.650 --> 00:30:42.110
So let's make that a six and put a five at the end.

372
00:30:45.660 --> 00:30:50.870
I already checked seven Let's check 8 right now.

373
00:30:50.940 --> 00:30:55.690
So I'm pretty certain that that must be a 9.

374
00:30:55.710 --> 00:30:57.050
No it's not.

375
00:30:57.070 --> 00:31:03.000
What did I make a mistake with my seven that's the only one I haven't checked in this run for let's

376
00:31:03.000 --> 00:31:03.670
have a look.

377
00:31:03.810 --> 00:31:08.260
And we got it for 175 it was say 13 guesses.

378
00:31:08.370 --> 00:31:13.110
When you play this game that is your standard debate I'm sure you can manage it.

379
00:31:13.110 --> 00:31:16.200
We've got no space between 13 and guesses there.

380
00:31:16.420 --> 00:31:20.030
So let's just tweak that.

381
00:31:20.590 --> 00:31:26.660
But every guy and then let's just make sure the play again works.

382
00:31:26.680 --> 00:31:28.060
It does indeed.

383
00:31:29.390 --> 00:31:30.070
Wonderful.

384
00:31:30.320 --> 00:31:31.890
So I hope you enjoyed that one.

385
00:31:31.910 --> 00:31:35.080
Do tweet me and let me know if you can do it in less than 13 guesses.

386
00:31:35.240 --> 00:31:38.490
That's probably more efficient ways than the way that I did it.

387
00:31:38.690 --> 00:31:42.430
And that takes us to the end of our Python run three.

388
00:31:42.740 --> 00:31:45.720
I hope you can appreciate what I said at the beginning of this section.

389
00:31:45.830 --> 00:31:52.110
The Python is a very nice language to look at and a nice language to work with.

390
00:31:52.340 --> 00:31:56.930
And if you're interested in getting a raspberry pi or something like that and building something in

391
00:31:56.930 --> 00:32:01.970
the real world that may be part of the internet of things one day then Python is a great language to

392
00:32:01.970 --> 00:32:02.980
do that in.

393
00:32:03.470 --> 00:32:07.110
This also brings us to the end of the complete web developer of course.

394
00:32:07.310 --> 00:32:13.280
So I hope you've enjoyed yourself and there's just one more video to go and that is where do we go from

395
00:32:13.280 --> 00:32:14.040
here.
