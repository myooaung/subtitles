1
00:00:01,110 --> 00:00:01,500
Great.

2
00:00:01,500 --> 00:00:08,010
So now we know how to insert items into our database and how to update them once they're there.

3
00:00:09,230 --> 00:00:15,180
Well we're now going to look at is how to return more than one item from our database and how we can

4
00:00:15,180 --> 00:00:24,510
do some fancy select queries so we can select users in a number of different ways.

5
00:00:24,550 --> 00:00:24,870
All right.

6
00:00:24,880 --> 00:00:28,590
So first off let's just update our output here.

7
00:00:28,600 --> 00:00:37,240
So we're getting the whole of the information in the right and then we actually only need to change

8
00:00:37,300 --> 00:00:39,750
a very small part of this.

9
00:00:40,180 --> 00:00:53,010
We just add in a while loop and this is then a container for our row

10
00:00:55,980 --> 00:00:56,750
like that.

11
00:00:56,760 --> 00:01:07,130
So each time we run the command my Eskew ally fetch array we're actually fetching a new row.

12
00:01:07,200 --> 00:01:13,520
So if we run it several times we'll get all of the rows that have been selected by this query.

13
00:01:13,560 --> 00:01:21,830
So in our case we should get three rows i.e. all the raise in the table so let's have a look

14
00:01:26,330 --> 00:01:26,610
there.

15
00:01:26,620 --> 00:01:30,140
We gain let's have a look at the output.

16
00:01:30,150 --> 00:01:32,510
You can see we've got these three arrays here.

17
00:01:32,640 --> 00:01:34,950
We do have an undefined query.

18
00:01:34,950 --> 00:01:35,430
Oh there we go.

19
00:01:36,150 --> 00:01:41,200
Because I didn't get rid of my query that very

20
00:01:44,570 --> 00:01:44,870
okay.

21
00:01:44,890 --> 00:01:45,860
So that's now returned.

22
00:01:45,880 --> 00:01:47,290
Everything in the database.

23
00:01:47,410 --> 00:01:52,780
And we could do something with that data if we wanted to either display it to the user or update it

24
00:01:53,350 --> 00:01:54,880
or even delete it if we wanted to.

25
00:01:55,960 --> 00:02:02,690
So how do we become a bit more selective about what we're querying from the database.

26
00:02:02,710 --> 00:02:07,540
Well we actually do it in exactly the same way that we updated the data in the previous video and that

27
00:02:07,540 --> 00:02:11,590
is with a where clause at the end.

28
00:02:11,590 --> 00:02:20,740
And what we might want to do then for example we might want to get the users with I.D. equal to one.

29
00:02:21,100 --> 00:02:25,650
But with that return pretty easy.

30
00:02:25,650 --> 00:02:28,300
It would return the user with an idea of one.

31
00:02:28,350 --> 00:02:34,660
I mean so let's change that to search for Kirsten's

32
00:02:38,110 --> 00:02:40,570
use it by email address.

33
00:02:40,570 --> 00:02:49,700
We just put email equals and then put our email address in quotes like that's and that will then return

34
00:02:51,520 --> 00:02:53,520
just kissed him.

35
00:02:53,680 --> 00:02:54,130
There we go.

36
00:02:55,240 --> 00:02:56,800
We can do a lot more than that though.

37
00:02:58,000 --> 00:03:03,510
So what if we wanted to return all the users whose email was at gmail dot com.

38
00:03:04,230 --> 00:03:06,790
Well that's actually pretty easy.

39
00:03:06,790 --> 00:03:12,250
We change our equal sign to a like keyword.

40
00:03:12,250 --> 00:03:19,450
And then if we leave that as it is that actually will return the same thing because it's searching for

41
00:03:19,450 --> 00:03:23,560
where email address is like guest and at guest invisible to critique.

42
00:03:24,010 --> 00:03:33,920
But the advantage of using like means that we can put a variety of symbols in our query for example

43
00:03:33,980 --> 00:03:40,770
the percent symbol and the percent symbol in my school essentially means anything.

44
00:03:40,790 --> 00:03:49,430
So if I put the percent symbol and then gmail dot com this essentially means select everything from

45
00:03:49,460 --> 00:03:58,530
the user's table where the e-mail ends in gmail dot com i.e. it's something and then gmail dot com.

46
00:03:58,550 --> 00:04:01,100
So this should return me and tell me

47
00:04:04,600 --> 00:04:05,210
that again.

48
00:04:06,150 --> 00:04:07,850
So here's a mini challenge for you.

49
00:04:07,980 --> 00:04:16,990
Can you return everyone in our database who has a P the letter P anywhere in their email address different

50
00:04:23,220 --> 00:04:23,970
hope you managed it.

51
00:04:24,820 --> 00:04:30,070
It's just a matter of putting percent and then P and then another percent.

52
00:04:30,070 --> 00:04:33,570
So this just means anything and then a P and then anything else.

53
00:04:33,580 --> 00:04:41,110
So essentially looks for the letter P anywhere in the email address so that returns me and Carsten but

54
00:04:41,110 --> 00:04:42,580
not to me.

55
00:04:42,730 --> 00:04:46,090
We can also use greater than or less than symbols.

56
00:04:46,090 --> 00:04:56,650
So if we wanted to return everyone whose idea was two or more then we could use to staff from users

57
00:04:56,740 --> 00:05:04,430
where I.D. is greater than or equal to to and that should return.

58
00:05:04,460 --> 00:05:06,320
Kirsten and Tommy there we go.

59
00:05:06,760 --> 00:05:15,360
We can also return just a single column so say that we know we only needed the email address then it's

60
00:05:15,370 --> 00:05:23,050
a bit wasteful to return all this other information as well so we could just put email in site these

61
00:05:23,170 --> 00:05:29,320
acute accent then and then that would just return the e-mail address.

62
00:05:29,320 --> 00:05:34,060
That's a rather more efficient way of dealing with databases if you know what you're going to need in

63
00:05:34,060 --> 00:05:35,140
advance.

64
00:05:35,140 --> 00:05:38,560
We can also combine where clauses.

65
00:05:38,950 --> 00:05:45,850
So let's say if we wanted to find everyone with an idea of greater than or equal to two with a T in

66
00:05:45,850 --> 00:05:58,010
their email address then we would put an end statement there and then percent t percent.

67
00:05:58,280 --> 00:06:05,130
And I have put a capital T on purpose there to show you that we are case insensitive here.

68
00:06:05,980 --> 00:06:12,550
So none of these have got a capital T but I have got little T's and therefore they're returned if I

69
00:06:12,550 --> 00:06:18,650
changed that to a G then we should just get too many returned because Carston doesn't have a g in her

70
00:06:18,650 --> 00:06:19,820
e-mail address.

71
00:06:20,170 --> 00:06:25,310
So I think you get the idea to our table and I'm gonna do that in P HP my admin.

72
00:06:25,870 --> 00:06:34,870
So I'm going to click structure and then add one columns at the end of table go and the column I'm going

73
00:06:34,870 --> 00:06:42,990
to add is name and that's going to be a text field that we get.

74
00:06:44,460 --> 00:06:45,720
So now let's browse

75
00:06:48,290 --> 00:06:52,850
and I'm gonna just double click there to update my name.

76
00:06:52,850 --> 00:07:03,660
And for some reason I've decided to refer to myself as Rob O'Grady.

77
00:07:04,460 --> 00:07:07,480
Feel free to search for that name online to see if I've been using it anyway.

78
00:07:08,420 --> 00:07:18,180
But really what I'm interested in is of course that it has that single quote in it so if now I wanted

79
00:07:18,180 --> 00:07:29,670
to select the user with the name Rob O'Grady I might start off storing the name in a variable and then

80
00:07:31,230 --> 00:07:39,620
I might put it in double quotes like that to save me from having to escape the character by putting

81
00:07:39,680 --> 00:07:41,330
a backslash in front of it.

82
00:07:41,340 --> 00:07:51,410
That so now can you update the query string so it returns the users who have a name of Rob O'Grady using

83
00:07:51,410 --> 00:07:59,240
this variable name for it.

84
00:07:59,260 --> 00:08:00,730
Did you manage it.

85
00:08:00,730 --> 00:08:08,400
It was a bit of a trick but what I was expecting you to do was keeping that part of the query and then

86
00:08:09,600 --> 00:08:11,330
changing the where clause to went.

87
00:08:11,340 --> 00:08:20,610
Name equals and then in single quotes we have the name.

88
00:08:20,610 --> 00:08:28,140
So I'm using my concatenate thing full stop or period there to bring the name variable into the string

89
00:08:28,170 --> 00:08:31,380
and it's inside these single quotes.

90
00:08:31,470 --> 00:08:33,480
So that looks like it should work.

91
00:08:33,930 --> 00:08:38,670
But if we save it and run it you'll see we don't get any response at all.

92
00:08:39,300 --> 00:08:45,780
And that's because what my asking well is interpreting the name string as is Rob.

93
00:08:45,800 --> 00:08:54,880
Oh and then a single quote so that single quote is interpreted by my as well as ending this string.

94
00:08:55,440 --> 00:08:59,520
So it says it starts with the single quote and then ends after Rob.

95
00:08:59,540 --> 00:09:00,360
Oh.

96
00:09:00,540 --> 00:09:07,950
In fact if we just echo out the query you'll see that in a bit more detail so starts with select email

97
00:09:07,950 --> 00:09:10,200
from users where name equals.

98
00:09:10,200 --> 00:09:13,970
And then this Rob O is interpreted as a single string.

99
00:09:14,160 --> 00:09:20,220
And then the Grady on the end is just another strange word as far as my school is concerned.

100
00:09:20,220 --> 00:09:22,110
And then is another single quote there.

101
00:09:22,770 --> 00:09:25,870
So this is not a valid piece of my.

102
00:09:25,890 --> 00:09:30,630
Well so it's not processed by the database.

103
00:09:30,840 --> 00:09:32,390
There is however an easy fix to this.

104
00:09:34,090 --> 00:09:44,990
And that is we can use the function my askew Well I underscore real underscore escape underscore string.

105
00:09:44,980 --> 00:09:51,730
So it's a bit of a beast but it's well named because it escapes any nasty characters that might cause

106
00:09:51,730 --> 00:09:53,360
problems in our code.

107
00:09:54,550 --> 00:10:02,900
So we actually have to put the database link in there as well as without other my askew ally functions.

108
00:10:02,980 --> 00:10:09,940
But what this will essentially do is add backslash is where necessary to escape potentially corrupting

109
00:10:10,000 --> 00:10:13,080
characters that it cannot break our rescue.

110
00:10:14,320 --> 00:10:14,950
So let's have a look.

111
00:10:14,950 --> 00:10:17,350
Now we run that.

112
00:10:17,350 --> 00:10:19,070
It returns fine.

113
00:10:19,570 --> 00:10:27,310
So as a general rule of thumb whenever you're putting a variable into a my askew l string I would recommend

114
00:10:27,310 --> 00:10:30,880
just always escaping it using that function.

115
00:10:30,930 --> 00:10:36,340
There's another even more important reason to escape your strings and that is if there's any chance

116
00:10:36,340 --> 00:10:42,610
that the user can edit that string if you don't use this function then the user could pretty easily

117
00:10:42,790 --> 00:10:49,240
get access to your whole database by putting in a malicious string which is designed to end your query

118
00:10:49,270 --> 00:10:55,210
and start a new one which could for example select everything in your database and extract all your

119
00:10:55,210 --> 00:10:57,040
users data.

120
00:10:57,100 --> 00:11:00,110
These are called Eskew l injection strings.

121
00:11:00,110 --> 00:11:04,510
And if you want to find out more about that and how you protect your website from them then just have

122
00:11:04,510 --> 00:11:08,360
a google of Eskew l injections but a very good protection.

123
00:11:08,470 --> 00:11:15,000
It's simply to use this whenever you are taking a variable and putting it into a my askew l string.

124
00:11:15,340 --> 00:11:17,340
Then you won't go too far wrong.

125
00:11:17,410 --> 00:11:21,490
All right I'm going to set you a quick challenge then to put all of this together and try and do it

126
00:11:21,490 --> 00:11:24,760
without referring back if you possibly can.

127
00:11:24,760 --> 00:11:28,510
The idea of this is to get the my askew ally commands in your head.

128
00:11:28,810 --> 00:11:36,850
So this is just gonna be a very simple sign up form where you're going to ask for an email and a password

129
00:11:37,960 --> 00:11:51,560
and then when they submit the form check the email and password have been entered then check that the

130
00:11:51,560 --> 00:11:55,490
email address is not already registered

131
00:11:58,460 --> 00:12:07,490
and if all of that's okay sign the user up i.e. put them into your database doesn't have to look pretty

132
00:12:07,490 --> 00:12:19,500
we're not using Bootstrap or anything here we just want something that works go for it.

133
00:12:19,540 --> 00:12:20,130
All right.

134
00:12:20,260 --> 00:12:21,680
I hope you manage that.

135
00:12:21,760 --> 00:12:22,450
Let's give it a shot.

136
00:12:24,770 --> 00:12:32,180
So I'm gonna have a form with a method of post you could use get but I wouldn't recommend it.

137
00:12:32,540 --> 00:12:34,820
Especially when passwords are involved.

138
00:12:35,390 --> 00:12:44,260
And then in this form we're going to have an input with the name of email and we'll give it a place

139
00:12:44,260 --> 00:12:47,870
holder of email address.

140
00:12:49,460 --> 00:12:56,360
Then we'll have another input with a name of password and a type

141
00:12:59,220 --> 00:13:06,020
of password and a placeholder of password.

142
00:13:07,110 --> 00:13:10,120
And actually we should probably have a type for the first one as well.

143
00:13:10,170 --> 00:13:17,960
It's gonna be text which is the default type but it's always good to have types for all of your inputs.

144
00:13:18,300 --> 00:13:25,350
And then finally we'll have input with a type of submit and a value of

145
00:13:28,290 --> 00:13:33,710
sign up.

146
00:13:33,730 --> 00:13:34,360
All right.

147
00:13:34,360 --> 00:13:36,570
Simple as that.

148
00:13:36,610 --> 00:13:39,050
Let's have a look.

149
00:13:39,380 --> 00:13:41,270
Forgot that we were viewing the source there.

150
00:13:42,230 --> 00:13:46,010
Let's go back and actually view the debate at database base itself.

151
00:13:46,280 --> 00:13:46,640
Excellent.

152
00:13:46,640 --> 00:13:51,380
So there's e-mail a password you can see last pass is trying to predict things for me but I'll just

153
00:13:51,380 --> 00:13:52,770
ignore that.

154
00:13:52,790 --> 00:13:53,200
All right.

155
00:13:53,870 --> 00:14:03,940
Let's now check at the beginning of our script if we have some post variables and we're going to do

156
00:14:03,940 --> 00:14:14,830
that using the function that we saw before power a key exists and we're looking for the key.

157
00:14:14,930 --> 00:14:15,430
Email

158
00:14:18,100 --> 00:14:20,800
in the array post

159
00:14:27,140 --> 00:14:29,960
and we'll add in an all

160
00:14:35,810 --> 00:14:39,080
to see if they've entered a password.

161
00:14:39,080 --> 00:14:44,880
It's pretty unlikely that they will just enter a password but it is possible and

162
00:14:48,240 --> 00:14:51,180
I think I'll just do a print Ah.

163
00:14:51,930 --> 00:14:56,010
If that is the case just a check.

164
00:15:02,460 --> 00:15:03,000
There we go.

165
00:15:04,590 --> 00:15:13,980
So we've got our email and our password and then we'll check to see if the email address and password

166
00:15:13,980 --> 00:15:17,380
fields actually have values are you.

167
00:15:17,390 --> 00:15:30,420
The user has typed something in so we'll check to see if email is empty and if it is we'll echo that

168
00:15:32,860 --> 00:15:36,040
the email address is required

169
00:15:40,550 --> 00:15:44,310
like that's and if it's not.

170
00:15:44,310 --> 00:15:53,440
That means that we have an email address so let's just check for a password and if that's not there

171
00:15:55,640 --> 00:15:56,780
then we'll check.

172
00:15:57,020 --> 00:16:05,300
We'll tell them sorry that the password is required all right so let's take a look at that for now.

173
00:16:05,300 --> 00:16:09,890
Put an email address it tells me that the passwords required if I put in a password tells me that the

174
00:16:09,890 --> 00:16:11,290
e-mail address is required.

175
00:16:11,570 --> 00:16:13,080
If I put in both.

176
00:16:13,540 --> 00:16:15,060
It does nothing which is great.

177
00:16:18,160 --> 00:16:18,880
Okay.

178
00:16:19,320 --> 00:16:24,180
So now we want to check to see if the user exists in our database or not.

179
00:16:24,180 --> 00:16:26,990
That's the third and final error that we might see

180
00:16:30,000 --> 00:16:32,460
so let's start off with our query

181
00:16:35,210 --> 00:16:36,560
and we want to select

182
00:16:39,260 --> 00:16:44,510
and let's just select I.D. from the database.

183
00:16:44,620 --> 00:16:48,070
There'll be more efficient because we don't need everything else.

184
00:16:48,070 --> 00:16:52,000
We just need something to tell us whether or not that item is already there.

185
00:16:53,210 --> 00:16:56,230
And we want to select it from the users table

186
00:17:00,160 --> 00:17:08,870
where the email address is equal to and this is why we need our my ask you.

187
00:17:08,950 --> 00:17:12,280
I real escape.

188
00:17:12,280 --> 00:17:12,760
String

189
00:17:18,460 --> 00:17:19,570
we want to escape

190
00:17:22,940 --> 00:17:33,480
the email address that they've have entered and then closed that and end our query.

191
00:17:33,620 --> 00:17:34,400
All right.

192
00:17:34,400 --> 00:17:39,410
If you did manage to succeed with this challenge but you didn't put that in then a small slap on the

193
00:17:39,410 --> 00:17:45,260
wrist for you because your form was very insecure and open to ask you well injections.

194
00:17:45,260 --> 00:17:59,780
So then let's do a check to see if my SKU Well I query and then we want to check the link and the query

195
00:18:04,950 --> 00:18:10,550
and I've just noticed that I'm defining the link beneath all of this code here.

196
00:18:10,630 --> 00:18:16,450
So I'm going to pop my link in there because we don't need to connect to the database if the user hasn't

197
00:18:16,450 --> 00:18:17,410
tried to log in

198
00:18:20,850 --> 00:18:21,640
whoops.

199
00:18:21,670 --> 00:18:25,630
And let's not forget to put our link in there as well.

200
00:18:27,320 --> 00:18:28,970
And then we run our query

201
00:18:32,330 --> 00:18:44,620
so this is gonna be my s q Well I query and we want to send the database link and the query itself and

202
00:18:44,630 --> 00:18:47,870
then we want to check if there's any results in this query.

203
00:18:48,470 --> 00:18:52,940
So one way to do that would be to fetch the results as we did before.

204
00:18:53,090 --> 00:18:56,690
But I just want to show you one more way that we can do that which is slightly more efficient.

205
00:18:57,020 --> 00:19:10,350
We can use my Eskew Well I am then num rows and results and this will return the number of rows in the

206
00:19:10,350 --> 00:19:15,220
result without actually having to get all the votes themselves.

207
00:19:15,240 --> 00:19:19,370
So efficiency is not particularly important in a tiny setup like this.

208
00:19:19,470 --> 00:19:24,420
But if you've got a massive web site that people are logging into all the time it does make all the

209
00:19:24,420 --> 00:19:24,900
difference.

210
00:19:25,980 --> 00:19:29,660
So we should try and be efficient where we possibly can.

211
00:19:29,700 --> 00:19:37,290
So if we check to see if the number of rows is greater than zero then if it is

212
00:19:40,180 --> 00:19:48,130
we'll say to the user that email address has already been taken

213
00:19:52,550 --> 00:19:53,500
all right.

214
00:19:53,540 --> 00:19:54,130
That makes sense.

215
00:19:54,130 --> 00:19:56,040
Let's take a look.

216
00:19:56,050 --> 00:20:02,620
So I'm going to put in an e-mail address that has already been taken or possibility at gmail dot com.

217
00:20:02,620 --> 00:20:05,370
Put in a password and then sign up.

218
00:20:05,410 --> 00:20:08,160
So that e-mail address has already been taken.

219
00:20:08,170 --> 00:20:08,920
Fantastic.

220
00:20:08,920 --> 00:20:15,980
If I put in one that hasn't been taken yet and a password we should not get that error.

221
00:20:16,110 --> 00:20:16,660
Wonderful.

222
00:20:18,850 --> 00:20:19,160
All right.

223
00:20:19,160 --> 00:20:25,960
So the final thing to do then is to actually sign the user up if they've been successful.

224
00:20:26,720 --> 00:20:38,000
So we'll do that of course with another query and here we're going to insert into the user's table and

225
00:20:38,000 --> 00:20:40,540
the columns that we're going to provide.

226
00:20:40,610 --> 00:20:54,920
Email and password and the values that we're going to give for them are.

227
00:20:55,130 --> 00:21:06,690
I'm just going to copy this bit here so my securely real estate string with the link and the email that's

228
00:21:06,690 --> 00:21:10,380
the email address and then something very similar

229
00:21:18,020 --> 00:21:19,520
for the password

230
00:21:23,070 --> 00:21:30,880
and we'll just collate those parentheses then and then end our command

231
00:21:33,640 --> 00:21:36,290
and then we want to run that query.

232
00:21:36,760 --> 00:21:46,040
So that'll be my squirrelly query link karma query and we'll do a quick check here to see if that's

233
00:21:46,040 --> 00:21:50,210
been successful if it has will.

234
00:21:50,280 --> 00:21:51,810
Okay.

235
00:21:52,310 --> 00:22:00,770
You have been signed up and if not well for now we'll just say

236
00:22:05,470 --> 00:22:09,900
there was a problem signing you up.

237
00:22:10,420 --> 00:22:17,260
Please try again later so that of course should never happen.

238
00:22:17,360 --> 00:22:22,580
But it's always good to check and make sure that everything has worked in the way that you think it

239
00:22:22,580 --> 00:22:23,920
has.

240
00:22:23,960 --> 00:22:26,870
So let's just try submitting that one more time.

241
00:22:27,230 --> 00:22:30,600
Oh good an error on line 34.

242
00:22:31,350 --> 00:22:32,530
Oh yes.

243
00:22:32,540 --> 00:22:34,720
Because we're not actually running the query here.

244
00:22:34,790 --> 00:22:40,430
I don't need a close parentheses I just need to close the string.

245
00:22:40,550 --> 00:22:41,220
All right.

246
00:22:41,220 --> 00:22:42,290
Try that once more.

247
00:22:42,300 --> 00:22:43,390
And there we go.

248
00:22:43,410 --> 00:22:48,630
You have been signed up and we may well have been logged out of HP may have me now but let's have a

249
00:22:48,630 --> 00:22:49,080
quick look.

250
00:22:49,110 --> 00:22:50,520
Yeah we have.

251
00:22:50,550 --> 00:22:58,070
So we'll look back in using the password that we're using in our script

252
00:23:02,640 --> 00:23:03,410
and we should see.

253
00:23:03,420 --> 00:23:03,930
There we go.

254
00:23:04,140 --> 00:23:08,830
We've got a new email address with a password.

255
00:23:08,880 --> 00:23:14,310
So one quick note about passwords as I mentioned before we should never have our passwords like this

256
00:23:14,640 --> 00:23:20,910
in just plain text and in a couple of videos time I'll show you the good way to store passwords in your

257
00:23:20,910 --> 00:23:21,920
database.

258
00:23:21,960 --> 00:23:28,320
Before that though I want to show you two ways of actually logging users in or signing them up because

259
00:23:28,320 --> 00:23:32,010
it's all well and good to tell them they've been signed up and then put into a database but then they're

260
00:23:32,010 --> 00:23:38,280
going to click on another link and we want a way to know on that new link that this user is logged in.

261
00:23:38,280 --> 00:23:42,030
And we should show them some information about their account or whatever it is.

262
00:23:42,160 --> 00:23:44,180
And there are two primary ways to do that.

263
00:23:44,250 --> 00:23:50,130
SESSIONS And cookies and we're going to look at both of those in the next two videos starting with sessions.
