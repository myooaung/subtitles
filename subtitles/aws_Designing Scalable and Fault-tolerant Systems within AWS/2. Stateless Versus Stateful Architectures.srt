1
00:00:00,940 --> 00:00:03,250
[Autogenerated] Let's talk about stateless versus

2
00:00:03,250 --> 00:00:06,400
state ful in a stateless architecture.

3
00:00:06,400 --> 00:00:10,280
Er, we're not going to be focusing on storing data.

4
00:00:10,280 --> 00:00:14,150
And what I mean by this is that our computer itself is

5
00:00:14,150 --> 00:00:17,400
not worried about storing data locally.

6
00:00:17,400 --> 00:00:21,060
You might share a common back in like a database or maybe

7
00:00:21,060 --> 00:00:24,140
a no sequel database like Dynamodb,

8
00:00:24,140 --> 00:00:27,650
but the compute itself is not storing data now.

9
00:00:27,650 --> 00:00:32,620
Most of the time applications service one particular purpose,

10
00:00:32,620 --> 00:00:36,540
which falls in line with a micro service approach.

11
00:00:36,540 --> 00:00:40,290
You have one service that's extremely hyper focused on

12
00:00:40,290 --> 00:00:43,920
performing one function with this model.

13
00:00:43,920 --> 00:00:48,520
It allows us to have requests that are able to be handled by many

14
00:00:48,520 --> 00:00:51,410
different service is within our architecture,

15
00:00:51,410 --> 00:00:57,150
er and application, so we can route our traffic service to service,

16
00:00:57,150 --> 00:00:59,390
depending on what we need.

17
00:00:59,390 --> 00:01:03,620
And we do it quickly because we don't have to worry about

18
00:01:03,620 --> 00:01:07,400
storing the data locally and passing it over now.

19
00:01:07,400 --> 00:01:12,570
Another factor is it allows for quick deployments and recovery.

20
00:01:12,570 --> 00:01:15,390
So since we're not storing data locally,

21
00:01:15,390 --> 00:01:18,940
we don't have to worry about corruption in that aspect.

22
00:01:18,940 --> 00:01:22,460
So for just a example, if we had a server go down,

23
00:01:22,460 --> 00:01:25,520
we could easily spin one back up very quickly,

24
00:01:25,520 --> 00:01:27,060
using a template,

25
00:01:27,060 --> 00:01:30,430
and it will act as if nothing ever happened if we design it

26
00:01:30,430 --> 00:01:34,350
correctly now that ties in tow auto scaling,

27
00:01:34,350 --> 00:01:36,100
which is later in this course.

28
00:01:36,100 --> 00:01:38,140
But I wanted to put that out there.

29
00:01:38,140 --> 00:01:44,740
Lastly, containers are a great example and use of stateless architectures.

30
00:01:44,740 --> 00:01:47,540
Usually when you're spinning up containers,

31
00:01:47,540 --> 00:01:50,370
they're performing one particular function,

32
00:01:50,370 --> 00:01:54,040
and they're not primarily storing that data locally.

33
00:01:54,040 --> 00:01:58,260
You might have several containers spun up that connect back to a.

34
00:01:58,260 --> 00:01:58,490
R.

35
00:01:58,490 --> 00:02:03,300
D s database for storing any data, if that's even necessary now.

36
00:02:03,300 --> 00:02:06,820
Staple, on the other hand, is where data is being stored.

37
00:02:06,820 --> 00:02:08,940
So that's the biggest difference.

38
00:02:08,940 --> 00:02:10,950
And because this is stored,

39
00:02:10,950 --> 00:02:15,050
that means the stored data is very critical to the success

40
00:02:15,050 --> 00:02:17,810
of the application and architecture.

41
00:02:17,810 --> 00:02:20,540
An example of this would be a database,

42
00:02:20,540 --> 00:02:26,350
so a database has to track its state meticulously and ensure that

43
00:02:26,350 --> 00:02:30,320
there's no corruption going on with that state itself.

44
00:02:30,320 --> 00:02:33,220
So the data is pristine now.

45
00:02:33,220 --> 00:02:39,140
A downfall to this is that that state has to be shared between servers

46
00:02:39,140 --> 00:02:43,460
or that same server needs to handle related requests so it doesn't

47
00:02:43,460 --> 00:02:47,040
scale as easily as a stateless architecture.

48
00:02:47,040 --> 00:02:55,000
Now let's go ahead and take a break here and in the next clip will start introducing A W s Lambda.

