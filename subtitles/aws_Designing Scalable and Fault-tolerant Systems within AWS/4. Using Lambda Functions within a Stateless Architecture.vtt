WEBVTT
1
00:00:01.000 --> 00:00:03.470
[Autogenerated] Now let's go ahead and dive into using

2
00:00:03.470 --> 00:00:06.770
Lambda functions in a stateless architecture.

3
00:00:06.770 --> 00:00:11.390
So by default, Lambda functions are treated as stateless.

4
00:00:11.390 --> 00:00:12.380
Compute.

5
00:00:12.380 --> 00:00:16.540
They spin up, they complete their work and then they spin back down.

6
00:00:16.540 --> 00:00:18.900
After a short period of time,

7
00:00:18.900 --> 00:00:24.440
any data within those functions should be treated as stateless.

8
00:00:24.440 --> 00:00:28.340
So you're not relying on Lambda to save it now to demo this,

9
00:00:28.340 --> 00:00:32.190
I'm going to stand up a server lis application here.

10
00:00:32.190 --> 00:00:34.240
So let me go ahead and do this now.

11
00:00:34.240 --> 00:00:37.680
And what it's doing is it's going to create a new

12
00:00:37.680 --> 00:00:40.690
surveillance application with some functions.

13
00:00:40.690 --> 00:00:45.460
It's going to create a dynamodb table in an a p a gateway,

14
00:00:45.460 --> 00:00:48.140
all via a cloud formations stack.

15
00:00:48.140 --> 00:00:50.800
Now the serverless framework is pretty popular,

16
00:00:50.800 --> 00:00:53.620
and it just basically serves as a rapper around

17
00:00:53.620 --> 00:00:56.910
cloud formation in its own syntax.

18
00:00:56.910 --> 00:01:02.600
I'll go ahead and fast for this clip, and then once it's done creating,

19
00:01:02.600 --> 00:01:07.440
will go ahead and resume.

20
00:01:07.440 --> 00:01:10.940
Okay, so now our stack has finished deploying.

21
00:01:10.940 --> 00:01:12.780
You can see the service name.

22
00:01:12.780 --> 00:01:16.370
Our region is US East one and it created 35.

23
00:01:16.370 --> 00:01:21.250
Resource is so we see all of our a p I m points here as

24
00:01:21.250 --> 00:01:23.000
well as our functions that match up.

25
00:01:23.000 --> 00:01:24.660
So let's go back to the console.

26
00:01:24.660 --> 00:01:26.020
I'll refresh.

27
00:01:26.020 --> 00:01:30.100
We see our cloud formations stack and under resource is we see

28
00:01:30.100 --> 00:01:33.040
all of our resource is that were created.

29
00:01:33.040 --> 00:01:37.220
And if I go to dynamodb table and refresh here,

30
00:01:37.220 --> 00:01:39.940
we'll see a server lis table created.

31
00:01:39.940 --> 00:01:42.170
Now we also have some A p I gateways.

32
00:01:42.170 --> 00:01:46.460
So let me go ahead and refresh that and go into here in the A P.

33
00:01:46.460 --> 00:01:46.560
A.

34
00:01:46.560 --> 00:01:51.760
Gateway serves as an A P I interface for us to hit to interact

35
00:01:51.760 --> 00:01:54.610
with these lambda functions On the back end,

36
00:01:54.610 --> 00:01:57.020
you can see we have several that were created.

37
00:01:57.020 --> 00:01:57.280
Now,

38
00:01:57.280 --> 00:02:02.150
what this server lis application really does is it tracks a to do

39
00:02:02.150 --> 00:02:06.750
list in dynamodb that we can manipulate as needed.

40
00:02:06.750 --> 00:02:10.490
So let's go ahead and we'll go ahead and create a to do in our list.

41
00:02:10.490 --> 00:02:15.160
So I'm gonna have to find the post method under our stage of Dev's.

42
00:02:15.160 --> 00:02:21.250
Let me copy this, and what I'll do is I'll scroll over to my terminal here,

43
00:02:21.250 --> 00:02:24.710
I'll make some space and that I'm going to run a simple curl.

44
00:02:24.710 --> 00:02:26.610
Come in.

45
00:02:26.610 --> 00:02:29.240
Now what this is doing is We're running a post.

46
00:02:29.240 --> 00:02:30.040
As you can see.

47
00:02:30.040 --> 00:02:30.320
So on.

48
00:02:30.320 --> 00:02:34.470
Http post were pointing at our execution.

49
00:02:34.470 --> 00:02:39.840
A p i your l We have our Dev stage and then are two DUIs

50
00:02:39.840 --> 00:02:43.210
resource and then we're passing data in Jason.

51
00:02:43.210 --> 00:02:47.730
Format of text is study for s a pro exam.

52
00:02:47.730 --> 00:02:50.560
So I hit Enter, we get a response.

53
00:02:50.560 --> 00:02:52.490
You see, we get an I d.

54
00:02:52.490 --> 00:02:54.530
We see the text we specified.

55
00:02:54.530 --> 00:02:58.120
It's checked as false, so it hasn't been done yet.

56
00:02:58.120 --> 00:03:02.010
And then we have the created an updated at time stamps.

57
00:03:02.010 --> 00:03:07.920
So now if I go back to the consul here and go to my table if we look at items,

58
00:03:07.920 --> 00:03:08.520
there we go.

59
00:03:08.520 --> 00:03:11.860
We see our text item here with that I d.

60
00:03:11.860 --> 00:03:12.970
So that's perfect.

61
00:03:12.970 --> 00:03:17.020
Let's create one more just for testing saw scroll back.

62
00:03:17.020 --> 00:03:21.990
I'll go up here and let's just say we want to study for the Dev Ops pro like

63
00:03:21.990 --> 00:03:26.840
enter and we get another valid response from our a p a gateway.

64
00:03:26.840 --> 00:03:28.210
So if I refresh,

65
00:03:28.210 --> 00:03:33.670
we see both and none of this data was stored within the limbo function.

66
00:03:33.670 --> 00:03:38.230
It just spun up and then spun back down after it was done

67
00:03:38.230 --> 00:03:42.640
interacting with our data and storing it in Dynamodb.

68
00:03:42.640 --> 00:03:46.290
So there's nothing long living in this function here.

69
00:03:46.290 --> 00:03:49.390
It simply performs a certain action.

70
00:03:49.390 --> 00:03:55.120
And then it stores that data in our dynamodb table, which is visible here.

71
00:03:55.120 --> 00:03:58.840
So Dynamodb would be our state full resource and then land

72
00:03:58.840 --> 00:04:01.290
of functions are are stateless ones.

73
00:04:01.290 --> 00:04:04.030
Let's go ahead and list all of our two DUIs,

74
00:04:04.030 --> 00:04:08.680
so I'll go back to my consul here and then I'm just curling,

75
00:04:08.680 --> 00:04:13.390
which is going to do a get on our two deus resource for a P I.

76
00:04:13.390 --> 00:04:18.800
So I hit enter and we see both of our two DUIs that we added to our list.

77
00:04:18.800 --> 00:04:23.290
Here's study for Dev Ops Pro and Study for S April.

78
00:04:23.290 --> 00:04:25.430
So let's say I want to update one of these.

79
00:04:25.430 --> 00:04:28.000
Well, I do have an update a p I.

80
00:04:28.000 --> 00:04:29.030
So let me copy this.

81
00:04:29.030 --> 00:04:32.620
I d really quickly and then all paced back in here

82
00:04:32.620 --> 00:04:34.440
and you'll see we're running a put,

83
00:04:34.440 --> 00:04:37.800
which is updating its going to invoke that update

84
00:04:37.800 --> 00:04:40.970
function on our two DUIs resource.

85
00:04:40.970 --> 00:04:45.700
And then we passed the I d of the object or item in dynamodb.

86
00:04:45.700 --> 00:04:48.990
Now I need to change this really quickly.

87
00:04:48.990 --> 00:04:51.740
I want to change this to learn, Dev Ops Pro.

88
00:04:51.740 --> 00:04:56.080
And what we're doing here is we're making it a true on the check mark.

89
00:04:56.080 --> 00:04:56.950
So we're seeing hate.

90
00:04:56.950 --> 00:04:57.670
We did this.

91
00:04:57.670 --> 00:04:59.740
It's checked off our list.

92
00:04:59.740 --> 00:05:00.820
So now when I run,

93
00:05:00.820 --> 00:05:04.690
this will get a response and you'll see that our value has

94
00:05:04.690 --> 00:05:08.960
changed to checked of true on our Jason response.

95
00:05:08.960 --> 00:05:13.300
And if I go back to my table, will see that represented here.

96
00:05:13.300 --> 00:05:15.980
So that's how you can use in a.

97
00:05:15.980 --> 00:05:21.650
W s lambda function to go ahead and perform some type of data

98
00:05:21.650 --> 00:05:26.240
storage on a state ful resource on the back end.

99
00:05:26.240 --> 00:05:28.710
Now, this is not limited to dynamodb.

100
00:05:28.710 --> 00:05:32.420
You can do it with any state fullback in even s3 and R.

101
00:05:32.420 --> 00:05:34.040
D s.

102
00:05:34.040 --> 00:05:39.680
But this just demos a quick and simple example of how we can leverage

103
00:05:39.680 --> 00:05:43.440
thes stateless technologies to perform actions.

104
00:05:43.440 --> 00:05:46.710
Let's go ahead and break here, and in the next,

105
00:05:46.710 --> 00:05:50.580
clips will start discussing the different instance life

106
00:05:50.580 --> 00:05:53.240
cycles that are available to us from A.

107
00:05:53.240 --> 00:05:56.000
W. S

