1
00:00:00,640 --> 00:00:03,540
[Autogenerated] Okay, let's pick back up where we left off.

2
00:00:03,540 --> 00:00:08,400
We just finished up creating an s three bucket as our origin for a

3
00:00:08,400 --> 00:00:12,040
static site that gets delivered by cloudfront.

4
00:00:12,040 --> 00:00:17,440
And we also looked at restricting access to S three via cloudfront.

5
00:00:17,440 --> 00:00:19,020
Now, in this demo,

6
00:00:19,020 --> 00:00:22,460
what I did in between clips as I went into our distribution

7
00:00:22,460 --> 00:00:26,790
settings because it takes so long to push out updates.

8
00:00:26,790 --> 00:00:32,670
And I changed our origin on the back end and you'll see now the origin here

9
00:00:32,670 --> 00:00:38,780
is pointing at an application load balancer in us east to and it can show

10
00:00:38,780 --> 00:00:42,140
you that here we have one instance running.

11
00:00:42,140 --> 00:00:48,580
And I'm just listening on the default http in https ports and

12
00:00:48,580 --> 00:00:51,590
what I'm doing is I'm setting that as my origin,

13
00:00:51,590 --> 00:00:53,490
as opposed to my bucket.

14
00:00:53,490 --> 00:00:56,340
So now we're using a load balancer as the back in,

15
00:00:56,340 --> 00:00:59,140
and then we can specify some settings.

16
00:00:59,140 --> 00:01:03,440
We can have our minimum SSL protocol, which we looked at,

17
00:01:03,440 --> 00:01:06,770
and we can also specify a protocol policy.

18
00:01:06,770 --> 00:01:11,140
So since this is different, we can force Http,

19
00:01:11,140 --> 00:01:15,540
we can force https or we can match the viewer.

20
00:01:15,540 --> 00:01:18,330
And what this is doing is saying Hey,

21
00:01:18,330 --> 00:01:23,010
how do we want cloudfront to connect to our back end origin.

22
00:01:23,010 --> 00:01:27,180
So the connection to cloudfront from a client might be secure.

23
00:01:27,180 --> 00:01:30,590
But maybe we just want a route Basic, non secure http.

24
00:01:30,590 --> 00:01:33,930
Traffic to our origin and then pull it out that way.

25
00:01:33,930 --> 00:01:35,390
So I'm gonna match the viewer.

26
00:01:35,390 --> 00:01:38,290
So whatever I do, it should match.

27
00:01:38,290 --> 00:01:42,460
I'll leave the time outs the same you can see we specify our ports

28
00:01:42,460 --> 00:01:45,170
and then we have a custom header section again.

29
00:01:45,170 --> 00:01:47,440
I'll go and click on Yes, at it.

30
00:01:47,440 --> 00:01:51,310
I'll go back to general, go to distributions.

31
00:01:51,310 --> 00:01:52,700
And now it's editing again.

32
00:01:52,700 --> 00:01:55,940
Now, this one should be quick cause I didn't make any changes.

33
00:01:55,940 --> 00:01:57,640
But if I go back in here,

34
00:01:57,640 --> 00:02:02,370
one thing that I did have to do to speed this up since stuff was getting cashed,

35
00:02:02,370 --> 00:02:05,200
which is how cloudfront should be working.

36
00:02:05,200 --> 00:02:07,640
I had to go into in validations here.

37
00:02:07,640 --> 00:02:12,520
And you can see I created in a validation for certain objects.

38
00:02:12,520 --> 00:02:14,510
So if I go to details, you can see that.

39
00:02:14,510 --> 00:02:19,450
Hey, I wanted to invalidate all index dot html and all C.

40
00:02:19,450 --> 00:02:21,320
S s files as well.

41
00:02:21,320 --> 00:02:26,340
Now what this did is starting at that time when I created this invalidation.

42
00:02:26,340 --> 00:02:29,710
It goes through and removes the objects from the edge.

43
00:02:29,710 --> 00:02:31,680
Location caches.

44
00:02:31,680 --> 00:02:36,490
There are less expensive ways Like A W s mentions here in the description.

45
00:02:36,490 --> 00:02:39,690
But this is a quick way to go ahead and force an

46
00:02:39,690 --> 00:02:42,260
update of those cache files now,

47
00:02:42,260 --> 00:02:46,210
because I did this whenever I hit my edge location

48
00:02:46,210 --> 00:02:48,960
again similar to this diagram here.

49
00:02:48,960 --> 00:02:54,350
What happens is our distribution has to go back and fetch our

50
00:02:54,350 --> 00:03:00,240
source data and files from our origin and then cash them again

51
00:03:00,240 --> 00:03:02,940
at the edge location for our users.

52
00:03:02,940 --> 00:03:06,100
So it runs an origin fetch and then cashes that.

53
00:03:06,100 --> 00:03:06,830
So I'll go ahead.

54
00:03:06,830 --> 00:03:09,840
I'm gonna go to distributions here.

55
00:03:09,840 --> 00:03:12,640
And if I go to that cloudfront domain name,

56
00:03:12,640 --> 00:03:17,710
you can see that we're pulling now from E C to an A L B.

57
00:03:17,710 --> 00:03:22,520
So this is no longer pulling from our s three bucket like we had before.

58
00:03:22,520 --> 00:03:23,340
And to prove it,

59
00:03:23,340 --> 00:03:28,590
let me go ahead and navigate to R s three file that we had

60
00:03:28,590 --> 00:03:31,610
and you'll see here that obviously the C s s doesn't work

61
00:03:31,610 --> 00:03:34,080
because I'm looking at my html file,

62
00:03:34,080 --> 00:03:40,040
but we get the From s three header that I put into the HTML for this demo,

63
00:03:40,040 --> 00:03:41,890
and I changed this header on R E.

64
00:03:41,890 --> 00:03:45,560
C two instance so that it shows from E.

65
00:03:45,560 --> 00:03:47,460
C two in a lb.

66
00:03:47,460 --> 00:03:51,290
So that's how we can show that we're passing different origin traffic.

67
00:03:51,290 --> 00:03:52,030
Now let's go ahead.

68
00:03:52,030 --> 00:03:56,000
And in this clip here and in the next short clip will just have

69
00:03:56,000 --> 00:04:03,000
a quick overview of some tidbit information that I wanted to cover that gets covered on the exam.

