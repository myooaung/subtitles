1
00:00:00,940 --> 00:00:05,010
CloudWatch alarms are really useful for ensuring your application

2
00:00:05,010 --> 00:00:08,140
isn't going off the rails without you being aware.

3
00:00:08,140 --> 00:00:11,580
The CloudWatch service is flexible enough that you can do more than

4
00:00:11,580 --> 00:00:14,460
just send a notification if an alarm is tripped.

5
00:00:14,460 --> 00:00:17,940
It can even execute lambdas to do basically anything.

6
00:00:17,940 --> 00:00:20,740
So let's take a look at how we could use CloudWatch to

7
00:00:20,740 --> 00:00:23,640
monitor our serverless application.

8
00:00:23,640 --> 00:00:27,350
One of the challenges with serverless applications is the number of

9
00:00:27,350 --> 00:00:31,120
resources that may be created and keeping track of all of them.

10
00:00:31,120 --> 00:00:34,420
What if one lambda is failing and you aren't aware?

11
00:00:34,420 --> 00:00:37,340
It's never good to have blind spots in your application.

12
00:00:37,340 --> 00:00:38,340
With CloudWatch,

13
00:00:38,340 --> 00:00:41,010
we can ensure all corners of our distributed

14
00:00:41,010 --> 00:00:43,940
application are constantly monitored.

15
00:00:43,940 --> 00:00:48,240
Pull up your AWS console and go to the CloudWatch service.

16
00:00:48,240 --> 00:00:51,680
CloudWatch serves a lot of purposes, like events and logs,

17
00:00:51,680 --> 00:00:54,940
but today we really only care about alarms.

18
00:00:54,940 --> 00:00:59,430
Click on the Alarms menu option and then the Create alarm button.

19
00:00:59,430 --> 00:01:03,620
First, we'll select a metric, so click Select metric.

20
00:01:03,620 --> 00:01:06,510
You'll be presented with some metric categories based on

21
00:01:06,510 --> 00:01:09,530
the services that you're using in AWS.

22
00:01:09,530 --> 00:01:13,040
In the search bar, type lambda and hit Enter.

23
00:01:13,040 --> 00:01:16,020
You'll see that you're able to select metrics across all

24
00:01:16,020 --> 00:01:20,160
functions or metrics on specific named functions.

25
00:01:20,160 --> 00:01:23,850
If there was a specific function we wanted special alarms on,

26
00:01:23,850 --> 00:01:25,630
we could do it directly.

27
00:01:25,630 --> 00:01:29,980
What I prefer to do though is set an alarm for all lambda functions.

28
00:01:29,980 --> 00:01:33,740
That way, we can avoid those blind spots in our application.

29
00:01:33,740 --> 00:01:37,490
In this case, let's set up an alarm for errors.

30
00:01:37,490 --> 00:01:40,940
Select the Lambda > Across All Functions group.

31
00:01:40,940 --> 00:01:43,260
Then, select the metric Errors.

32
00:01:43,260 --> 00:01:45,840
Click Select metric.

33
00:01:45,840 --> 00:01:48,840
Scroll to the Conditions section.

34
00:01:48,840 --> 00:01:51,990
Setting the error threshold count for when to trigger

35
00:01:51,990 --> 00:01:55,140
our alarm is essentially a balance.

36
00:01:55,140 --> 00:01:58,150
We want the alarm to trigger when it's meaningful,

37
00:01:58,150 --> 00:02:02,640
but not trigger it so often that we just end up ignoring it.

38
00:02:02,640 --> 00:02:04,460
It'll depend on the application.

39
00:02:04,460 --> 00:02:08,040
But for this video, let's just put 5 here.

40
00:02:08,040 --> 00:02:10,310
The operator of greater than is perfect.

41
00:02:10,310 --> 00:02:13,740
In the above metric section is the period.

42
00:02:13,740 --> 00:02:15,030
It's set to 5 minutes.

43
00:02:15,030 --> 00:02:17,390
So with this complete configuration,

44
00:02:17,390 --> 00:02:22,110
it means that if we have greater than 5 errors within 5 minutes,

45
00:02:22,110 --> 00:02:23,820
the alarm will trigger.

46
00:02:23,820 --> 00:02:27,440
By adjusting this period to a shorter time length,

47
00:02:27,440 --> 00:02:31,640
the alarm would likely fire less, but this is fine.

48
00:02:31,640 --> 00:02:32,820
Now click Next.

49
00:02:32,820 --> 00:02:36,310
Here, we'll configure how CloudWatch should react to an alarm,

50
00:02:36,310 --> 00:02:39,330
such as notifications or scaling.

51
00:02:39,330 --> 00:02:43,420
In our case, we're interested in the SNS notifications.

52
00:02:43,420 --> 00:02:45,630
If you'll remember from previous videos,

53
00:02:45,630 --> 00:02:49,140
you can have lambdas be invoked from an SNS topic.

54
00:02:49,140 --> 00:02:51,690
This means that although the first idea that might come

55
00:02:51,690 --> 00:02:54,830
into your head for SNS is to notify you,

56
00:02:54,830 --> 00:02:57,750
you could also have it trigger a lambda invocation that

57
00:02:57,750 --> 00:03:00,840
actually does something to resolve the issue.

58
00:03:00,840 --> 00:03:03,460
In this case, we don't really have enough information about

59
00:03:03,460 --> 00:03:06,750
what type of errors to expect to really do anything about

60
00:03:06,750 --> 00:03:09,640
them, so notifications is fine.

61
00:03:09,640 --> 00:03:15,840
You can connect this to an existing topic or create a new one. Then click Next.

62
00:03:15,840 --> 00:03:20,660
We can finally name the alarm, so let's call it lambda_error_alarm

63
00:03:20,660 --> 00:03:24,530
with dashes in between the words. Click Next. And then after

64
00:03:24,530 --> 00:03:28,940
reviewing the alarm details, Create alarm.

65
00:03:28,940 --> 00:03:33,990
The alarm will immediately go into insufficient data status as it takes

66
00:03:33,990 --> 00:03:38,180
some time to actually create the alarm and get data in there. After a few

67
00:03:38,180 --> 00:03:43,540
minutes, it will either move to okay status or alarm status based on if the

68
00:03:43,540 --> 00:03:45,740
error threshold has been triggered.

69
00:03:45,740 --> 00:03:49,080
Let's take a look at one more type of metric that you can create an alarm

70
00:03:49,080 --> 00:03:55,020
for. Click the Create alarm button and then Select metric. And then click

71
00:03:55,020 --> 00:04:01,340
the API Gateway box and finally the By Stage box.

72
00:04:01,340 --> 00:04:05,650
There are several metrics here that you can set alarms on for your

73
00:04:05,650 --> 00:04:09,810
APIs. The lowest level you can set alarms for is the stage level,

74
00:04:09,810 --> 00:04:15,180
but I think having metrics on 400 or 500 errors or latency are

75
00:04:15,180 --> 00:04:16,840
actually pretty valuable.

76
00:04:16,840 --> 00:04:20,710
We could keep adding alarms all day, but let's just end it there.

77
00:04:20,710 --> 00:04:25,090
It's useful to explore the available metrics you have for each AWS

78
00:04:25,090 --> 00:04:29,470
service you use so you can ensure your entire application is being well

79
00:04:29,470 --> 00:04:38,000
monitored. In the next video, we're going to spend down all the resources we've used for our demo application.

