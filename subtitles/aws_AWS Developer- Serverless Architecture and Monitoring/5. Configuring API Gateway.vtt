WEBVTT
1
00:00:00.940 --> 00:00:02.380
With the serverless framework,

2
00:00:02.380 --> 00:00:06.030
I've already created most of the API Gateway methods and

3
00:00:06.030 --> 00:00:08.660
resources needed for our application to function.

4
00:00:08.660 --> 00:00:13.740
But I left one unconfigured so we could get some hands‑on experience with it.

5
00:00:13.740 --> 00:00:16.930
Open up the AWS console in your browser and

6
00:00:16.930 --> 00:00:19.400
navigate to the API Gateway dashboard.

7
00:00:19.400 --> 00:00:23.680
Click on the dev‑trash‑panda‑buffet REST API.

8
00:00:23.680 --> 00:00:28.300
You'll already see the endpoints that have been previously configured here.

9
00:00:28.300 --> 00:00:32.810
We're going to create an endpoint for the saveAction lambda that

10
00:00:32.810 --> 00:00:36.080
sends players' choices down to a Kinesis Stream.

11
00:00:36.080 --> 00:00:39.200
We first need to create the action resource.

12
00:00:39.200 --> 00:00:41.500
Select the root / resource,

13
00:00:41.500 --> 00:00:46.110
and then click the Actions drop‑down and select Create Resource.

14
00:00:46.110 --> 00:00:50.540
In the Resource Name section, type Action.

15
00:00:50.540 --> 00:00:54.790
This should also populate the resource path with the same thing,

16
00:00:54.790 --> 00:00:56.840
which is what we want.

17
00:00:56.840 --> 00:00:59.340
Now click Create Resource.

18
00:00:59.340 --> 00:01:00.920
Next, we'll create the method.

19
00:01:00.920 --> 00:01:05.510
It will be a POST since this is new data being sent in.

20
00:01:05.510 --> 00:01:07.840
With the action resource selected,

21
00:01:07.840 --> 00:01:12.040
click the Actions drop‑down and select Create Method.

22
00:01:12.040 --> 00:01:14.750
There will be a small drop‑down pop up under the

23
00:01:14.750 --> 00:01:19.070
action resource. In this drop‑down, select the POST method.

24
00:01:19.070 --> 00:01:22.240
Then, click the checkbox button next to it.

25
00:01:22.240 --> 00:01:24.960
Now we'll add some more details about the method.

26
00:01:24.960 --> 00:01:28.180
The lambda function integration type should already be selected,

27
00:01:28.180 --> 00:01:32.730
which is correct since we want to invoke the saveAction lambda

28
00:01:32.730 --> 00:01:35.040
whenever this endpoint is called.

29
00:01:35.040 --> 00:01:40.070
Now check the Use Lambda Proxy integration checkbox. This will give our

30
00:01:40.070 --> 00:01:44.870
lambda function all of the request data in the event, but also require the

31
00:01:44.870 --> 00:01:51.150
lambda to return a complete HTTP response understood by API Gateway. The

32
00:01:51.150 --> 00:01:55.780
code I've written for the lambda is already doing this. So, we just need to

33
00:01:55.780 --> 00:02:00.310
check this checkbox to make it work. Ensure the region selected is where

34
00:02:00.310 --> 00:02:04.890
you deployed the demo application. Then start typing trash in the Lambda

35
00:02:04.890 --> 00:02:09.860
Function input box to see some autocomplete options. Select the lambda

36
00:02:09.860 --> 00:02:15.780
ending in saveAction and then click Save. You should see a pop‑up about

37
00:02:15.780 --> 00:02:19.890
giving the API Gateway permission to invoke your lambda.

38
00:02:19.890 --> 00:02:23.380
This is going to change your lambda so it accepts triggers

39
00:02:23.380 --> 00:02:27.770
from this API Gateway method. Click OK, and you will land on

40
00:02:27.770 --> 00:02:30.140
the method configuration screen.

41
00:02:30.140 --> 00:02:32.300
At this point, we're almost done.

42
00:02:32.300 --> 00:02:34.770
The last step is to tell the method that there will be

43
00:02:34.770 --> 00:02:37.490
query parameters to expect on the endpoint,

44
00:02:37.490 --> 00:02:41.740
which is how our demo client is sending action data down.

45
00:02:41.740 --> 00:02:45.760
This is done in the Method Request section, so click this title

46
00:02:45.760 --> 00:02:51.240
header. Expand the URL Query String Parameters section.

47
00:02:51.240 --> 00:02:54.540
Now click the Add query string link.

48
00:02:54.540 --> 00:02:59.240
The only thing you need to add here is just the query parameter key.

49
00:02:59.240 --> 00:03:05.170
First, add the parameter gameId in camelCase and then click the check button.

50
00:03:05.170 --> 00:03:13.060
Now, add another parameter and call it foodItemId, also in camelCase. And

51
00:03:13.060 --> 00:03:18.930
finally, add one more parameter called trashPandaId in camelCase. And these

52
00:03:18.930 --> 00:03:22.910
three will make up all the pieces of data that we need to know about an action

53
00:03:22.910 --> 00:03:25.140
a player has taken in the game.

54
00:03:25.140 --> 00:03:27.650
We could make them required by selecting the

55
00:03:27.650 --> 00:03:30.940
checkboxes here, but that's up to you.

56
00:03:30.940 --> 00:03:32.350
If you were to make it required,

57
00:03:32.350 --> 00:03:37.490
you'd have to select the request validator for query parameters located here.

58
00:03:37.490 --> 00:03:40.820
The final step is to deploy these changes. Click the Actions

59
00:03:40.820 --> 00:03:45.970
drop‑down and select Deploy API. Select dev for the

60
00:03:45.970 --> 00:03:49.240
deployment stage, and then click Deploy.

61
00:03:49.240 --> 00:03:53.880
Now your action endpoint is ready to invoke the saveAction lambda when

62
00:03:53.880 --> 00:03:58.040
executed. You can also confirm the setup by taking a look at the

63
00:03:58.040 --> 00:04:03.230
saveAction lambda detail. By selecting the API Gateway resource in the

64
00:04:03.230 --> 00:04:07.610
designer, you can view the information about the REST API and method used

65
00:04:07.610 --> 00:04:12.370
to invoke this lambda. This all seems well and good, but now you have a

66
00:04:12.370 --> 00:04:16.890
completely open API endpoint with no authentication. Doesn't sound too

67
00:04:16.890 --> 00:04:18.140
safe, does it?

68
00:04:18.140 --> 00:04:25.000
In the next video, let's take a look at how we can add some security to our API Gateway endpoints.

