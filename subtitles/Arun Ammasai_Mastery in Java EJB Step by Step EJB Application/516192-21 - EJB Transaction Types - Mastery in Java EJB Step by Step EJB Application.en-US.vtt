WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.040
Hello everyone, Welcome back.

00:00:02.040 --> 00:00:03.420
So we discuss a wood.

00:00:03.420 --> 00:00:06.960
Wood is interceptor and what is the use of interceptors, right?

00:00:06.960 --> 00:00:10.260
So the next thing we're going to discuss about

00:00:10.260 --> 00:00:14.190
is how the transaction is working in the EGP, right?

00:00:14.190 --> 00:00:19.530
So pretty much everything is controlled by a container and the client is making

00:00:19.530 --> 00:00:24.810
a request and it is going to the server and it is responding back with some response.

00:00:24.810 --> 00:00:27.195
So how the transect mismanaged.

00:00:27.195 --> 00:00:30.150
So you might have seen this diagram,

00:00:30.150 --> 00:00:32.070
okay, In this particular screen,

00:00:32.070 --> 00:00:33.675
whenever you create a new bin,

00:00:33.675 --> 00:00:35.940
it'll ask you whether do you want to create

00:00:35.940 --> 00:00:39.760
a container type transaction or being typed transaction.

00:00:39.760 --> 00:00:44.705
So far whatever we tried is container type.

00:00:44.705 --> 00:00:46.730
By default it's set container type.

00:00:46.730 --> 00:00:48.755
And bean is an exclusive one,

00:00:48.755 --> 00:00:52.640
which means we have to manually change it and then we have to implement the logic for it.

00:00:52.640 --> 00:00:54.815
Okay, first let's try to understand.

00:00:54.815 --> 00:00:59.600
So what is container managed transaction and being managed transaction,

00:00:59.600 --> 00:01:03.500
if you want me to put it in a simple words, container managed transmitter,

00:01:03.500 --> 00:01:06.920
which meant it's automatically taken care by your container,

00:01:06.920 --> 00:01:09.140
which means the EGP container.

00:01:09.140 --> 00:01:12.050
So the transaction come in to roll back everything that we're

00:01:12.050 --> 00:01:15.335
taking care of by the container.

00:01:15.335 --> 00:01:18.199
And when it comes to being major transaction,

00:01:18.199 --> 00:01:21.680
which means everything has to be done by the developer manually.

00:01:21.680 --> 00:01:23.990
All right, so I'm going to give you

00:01:23.990 --> 00:01:27.710
a small bit more information

00:01:27.710 --> 00:01:30.860
about the content unmanaged transaction and being mended transaction.

00:01:30.860 --> 00:01:32.810
And then we'll move on to the code and

00:01:32.810 --> 00:01:35.000
we'll see how we are going to create an, a simple example.

00:01:35.000 --> 00:01:37.430
We don't need to create a simple example because you're going

00:01:37.430 --> 00:01:40.550
to exactly see what is out them off it because it's just a time.

00:01:40.550 --> 00:01:42.530
So in, out what is working, right?

00:01:42.530 --> 00:01:45.470
So I can show you how to implement that.

00:01:45.470 --> 00:01:48.665
Okay, the first thing, the container,

00:01:48.665 --> 00:01:52.355
which means the container manage the transactions.

00:01:52.355 --> 00:01:54.140
So under the container,

00:01:54.140 --> 00:01:57.920
we have six different types of transaction types,

00:01:57.920 --> 00:02:01.160
which means required, acquires new supports,

00:02:01.160 --> 00:02:03.440
not supported and mentoring, and never.

00:02:03.440 --> 00:02:05.375
Because based on the name itself,

00:02:05.375 --> 00:02:09.125
we should be able to understand what the purpose of each and every attribute.

00:02:09.125 --> 00:02:12.635
So when the transaction a type is required,

00:02:12.635 --> 00:02:14.510
which means the method,

00:02:14.510 --> 00:02:16.730
the whatever the business logic we are trying to call are,

00:02:16.730 --> 00:02:18.140
we are trying to call the method.

00:02:18.140 --> 00:02:20.915
It has to be executed within the transaction.

00:02:20.915 --> 00:02:23.090
So what happens if there is no transaction?

00:02:23.090 --> 00:02:26.930
It will create a new transaction and then it will proceed.

00:02:26.930 --> 00:02:32.120
It will not stop if resin have a time time because if it's not, it'll create a new one.

00:02:32.120 --> 00:02:34.160
And the next one is required, SN2.

00:02:34.160 --> 00:02:36.215
So one other that I received,

00:02:36.215 --> 00:02:39.530
it'll automatically create a new request because it will be created by

00:02:39.530 --> 00:02:43.220
you or EGB container because this annotation will be available in our Egypt,

00:02:43.220 --> 00:02:45.845
the mean and support.

00:02:45.845 --> 00:02:47.990
So when you have a support,

00:02:47.990 --> 00:02:49.970
that request to has to be

00:02:49.970 --> 00:02:53.420
executed as part of the exclusionary are trying to execute a method.

00:02:53.420 --> 00:02:56.870
That method has to be executed as part of the transactions.

00:02:56.870 --> 00:03:00.440
So you can simply say ongoing transaction.

00:03:00.440 --> 00:03:02.599
So what is not supported?

00:03:02.599 --> 00:03:05.660
So the business, but that should not be executed as part of time.

00:03:05.660 --> 00:03:07.970
Second is opposite to support.

00:03:07.970 --> 00:03:11.810
So you're calling a method and it is executed as a part of transaction,

00:03:11.810 --> 00:03:14.465
which mean that is wrong because I'm using not supported my data.

00:03:14.465 --> 00:03:16.940
So which means our business logic method which will

00:03:16.940 --> 00:03:21.409
not required to use a transaction and what are the mandatory.

00:03:21.409 --> 00:03:24.980
So business Madonna will be executed as part of transaction.

00:03:24.980 --> 00:03:27.155
Otherwise, we'll get an exception.

00:03:27.155 --> 00:03:31.190
Does it looks like the second one requires new and monetary, said acquires new.

00:03:31.190 --> 00:03:35.090
What'll happen if it doesn't eat automobile create D,

00:03:35.090 --> 00:03:37.910
new transaction for each and every request and required.

00:03:37.910 --> 00:03:40.220
It will use the existing transaction.

00:03:40.220 --> 00:03:44.225
If it is not, it will create a new translation and it'll continue the process.

00:03:44.225 --> 00:03:47.270
But monetary, it has to execute as

00:03:47.270 --> 00:03:51.290
a path autonomous action if there is no translation availability to throw an exception.

00:03:51.290 --> 00:03:53.615
And the last one is the Never.

00:03:53.615 --> 00:03:55.640
So what is the purpose of never?

00:03:55.640 --> 00:03:59.960
So, which indicates that the business method executes as part of transaction,

00:03:59.960 --> 00:04:02.690
which is wrong because this particular method will

00:04:02.690 --> 00:04:05.540
not be executed as part of any transaction.

00:04:05.540 --> 00:04:09.575
If it happened, it will throw an exception just like you have a monetary.

00:04:09.575 --> 00:04:12.230
So this is the container mentioned,

00:04:12.230 --> 00:04:16.295
transcend it all automatically taken care by the EGB container.

00:04:16.295 --> 00:04:19.775
And now we need to know what the other type,

00:04:19.775 --> 00:04:23.570
which is a bean Manoj to transaction.

00:04:23.570 --> 00:04:28.010
So in bean many terms I think that it'll be three levels.

00:04:28.010 --> 00:04:30.320
First one is start on success and failure,

00:04:30.320 --> 00:04:31.745
which means what are you going to start?

00:04:31.745 --> 00:04:34.445
When to start the trial aids all about transaction.

00:04:34.445 --> 00:04:37.745
So you are the one it's going to tell the age of the container.

00:04:37.745 --> 00:04:41.540
Okay, I'm starting the term section right now.

00:04:41.540 --> 00:04:43.550
Okay, So this is a place value chart,

00:04:43.550 --> 00:04:46.280
the transaction and you are the one we're gonna provide,

00:04:46.280 --> 00:04:49.939
okay, so this method is executed successfully then return a success.

00:04:49.939 --> 00:04:52.565
So if this axis you'll come into the data,

00:04:52.565 --> 00:04:54.950
if it is not a success, you will a rollback,

00:04:54.950 --> 00:04:57.590
which is a fail one, right?

00:04:57.590 --> 00:05:01.730
So now what I'm gonna do is I'm going to show you our existing example and to add,

00:05:01.730 --> 00:05:05.540
you can implement the required type, the transactions.

00:05:05.540 --> 00:05:10.415
Okay, we just came back to our application on our code.

00:05:10.415 --> 00:05:15.995
Okay, first let's try to apply the first method which is a continent.

00:05:15.995 --> 00:05:18.770
Because if you're not providing any transaction type

00:05:18.770 --> 00:05:22.500
which meant it and by default it's a container based.

00:05:23.260 --> 00:05:26.540
Okay, so now what I'm gonna do is,

00:05:26.540 --> 00:05:29.090
so here we have intercepted stateless local Min at

00:05:29.090 --> 00:05:31.610
this is where you're going to provide the transaction management,

00:05:31.610 --> 00:05:33.575
which means you're going to tell the container

00:05:33.575 --> 00:05:36.425
how you need to handle the transaction management here.

00:05:36.425 --> 00:05:40.685
So transaction management, and here I'm going to provide something like

00:05:40.685 --> 00:05:46.145
transaction management type dot container, right?

00:05:46.145 --> 00:05:50.555
So this class will maintain the transaction by the container model.

00:05:50.555 --> 00:05:52.070
Even if you're not provided here,

00:05:52.070 --> 00:05:53.945
it's by default, it's the container.

00:05:53.945 --> 00:05:55.610
Okay?

00:05:55.610 --> 00:05:58.595
And we have a method is say hi here.

00:05:58.595 --> 00:06:04.670
So I want to execute this method as part of new transaction,

00:06:04.670 --> 00:06:08.960
all anything any existing times section.

00:06:08.960 --> 00:06:11.510
So in that case, what do you need to do is if it is

00:06:11.510 --> 00:06:14.375
a method you can provide the ad reboot for that.

00:06:14.375 --> 00:06:18.630
So add transaction attribute,

00:06:18.700 --> 00:06:22.220
attribute, and into the transaction attribute,

00:06:22.220 --> 00:06:26.270
you can provide what kind of transaction which you want to use for this.

00:06:26.270 --> 00:06:29.000
If you take a look at it, you can see monetary never,

00:06:29.000 --> 00:06:31.970
not supported, acquired, acquired municipal, everything there'll be there.

00:06:31.970 --> 00:06:34.490
So whenever you use a required,

00:06:34.490 --> 00:06:40.295
which means this method will be executed as part of transaction.

00:06:40.295 --> 00:06:43.370
I mean as part of transaction

00:06:43.370 --> 00:06:48.290
it or else it will create a new transaction and then it will prostate.

00:06:48.290 --> 00:06:53.990
Okay, This is just a normal one, not one method.

00:06:53.990 --> 00:06:56.300
And I'm just mentioning this particular method has to be

00:06:56.300 --> 00:06:59.300
executed as part of this particular transaction.

00:06:59.300 --> 00:07:02.735
And it's up to you what kind of transaction ID attribute you're going to use.

00:07:02.735 --> 00:07:05.824
It's still depends on your application.

00:07:05.824 --> 00:07:07.880
Okay, so there will be another scenario.

00:07:07.880 --> 00:07:09.050
So this is d.

00:07:09.050 --> 00:07:10.970
If you know how to use required,

00:07:10.970 --> 00:07:13.940
then the remaining also is pretty much the same.

00:07:13.940 --> 00:07:16.340
Okay, So now the second thing,

00:07:16.340 --> 00:07:19.850
so I want to use a bean method,

00:07:19.850 --> 00:07:23.615
I mean bean, right?

00:07:23.615 --> 00:07:26.075
So if it is a bean, what are we going to do?

00:07:26.075 --> 00:07:28.370
It has to be handled manually.

00:07:28.370 --> 00:07:34.100
So here you're going to provide it's a beam at the correct And what I'm gonna do.

00:07:34.100 --> 00:07:39.620
So this particular session is going to be handled by the individual developer.

00:07:39.620 --> 00:07:42.410
And here what I'm going to do, Let's work with this particular method.

00:07:42.410 --> 00:07:47.885
So we need to inject a resource here.

00:07:47.885 --> 00:07:50.390
That is an annotation, right?

00:07:50.390 --> 00:07:51.920
So what is it is I'm gonna,

00:07:51.920 --> 00:07:57.560
I'm gonna create the user transaction because it's a manual one, right?

00:07:57.560 --> 00:08:00.050
So I want to create my one transaction.

00:08:00.050 --> 00:08:02.195
User 10-second is equal to,

00:08:02.195 --> 00:08:05.720
you can simply say user transaction.

00:08:05.720 --> 00:08:06.530
Okay?

00:08:06.530 --> 00:08:08.690
So since I have my one transaction,

00:08:08.690 --> 00:08:11.315
what I'm gonna do, so this is a matter I'm going to call, right?

00:08:11.315 --> 00:08:13.790
So before calling the method, what I'm gonna do,

00:08:13.790 --> 00:08:18.845
I'm gonna use user transaction Dot became,

00:08:18.845 --> 00:08:20.570
which means I'm initiating

00:08:20.570 --> 00:08:24.570
my time section and get normally you how to throw an exception here.

00:08:25.780 --> 00:08:27.275
Right?

00:08:27.275 --> 00:08:31.020
So now exception just symbol mu.

00:08:33.430 --> 00:08:37.110
Okay, so I need to add it in the metadata store.

00:08:38.470 --> 00:08:43.160
Okay, So now the user transaction has been begin successfully.

00:08:43.160 --> 00:08:46.310
Now, so this method will be called.

00:08:46.310 --> 00:08:48.800
And after that, if this method is success, what I'm gonna do,

00:08:48.800 --> 00:08:52.655
I'm going to simply provide user transaction.com.

00:08:52.655 --> 00:08:54.080
So that is a next step.

00:08:54.080 --> 00:08:56.660
So start success.

00:08:56.660 --> 00:08:58.460
What happened if it is failure?

00:08:58.460 --> 00:09:01.500
So instead of coming, what you're gonna do,

00:09:01.510 --> 00:09:06.590
we're gonna use for user transaction Dot roll back.

00:09:06.590 --> 00:09:10.400
So that is a major difference between the container and a bean.

00:09:10.400 --> 00:09:13.790
If it is a container, everything handled by the EGB content itself,

00:09:13.790 --> 00:09:15.185
and that is the preferred way.

00:09:15.185 --> 00:09:20.915
And there are certain scenarios which required you have to handle the manual transaction.

00:09:20.915 --> 00:09:22.190
So in that scenario,

00:09:22.190 --> 00:09:25.410
we can make use of these transactions.
