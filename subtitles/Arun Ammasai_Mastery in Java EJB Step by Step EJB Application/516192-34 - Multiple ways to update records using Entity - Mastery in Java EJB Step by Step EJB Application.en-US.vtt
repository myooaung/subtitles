WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.270
Hello everyone.

00:00:01.270 --> 00:00:07.750
Welcome back. So we are getting an exception saying like transaction required exemption,

00:00:07.750 --> 00:00:09.760
there is no transaction is currently accurate.

00:00:09.760 --> 00:00:12.670
That is, error message is coming from the API now.

00:00:12.670 --> 00:00:14.005
So what is the problem?

00:00:14.005 --> 00:00:16.165
So basically what we're trying to do here.

00:00:16.165 --> 00:00:18.100
So inner update employee details.

00:00:18.100 --> 00:00:21.865
We are trying to update some information into the database, right?

00:00:21.865 --> 00:00:23.050
To fetching the information,

00:00:23.050 --> 00:00:26.650
you don't require any transaction mode when we're trying to

00:00:26.650 --> 00:00:31.540
update or insert or delete unit time sanction active.

00:00:31.540 --> 00:00:35.785
This is where we need to provide the transaction manually.

00:00:35.785 --> 00:00:38.230
Okay, So this is a place where we're manipulating

00:00:38.230 --> 00:00:40.915
the query and setting the perimeter and executing our debt, right?

00:00:40.915 --> 00:00:45.230
So here I want to create my transaction, my own transaction.

00:00:45.230 --> 00:00:46.865
So what we're gonna do is,

00:00:46.865 --> 00:00:49.760
so we're going to create a transaction.

00:00:49.760 --> 00:00:55.655
We are using our entity manager dot get transaction, dot begin.

00:00:55.655 --> 00:01:03.140
So this will create a new transaction and it will initiate the transaction.

00:01:03.140 --> 00:01:05.405
Okay, that is why we are providing became here.

00:01:05.405 --> 00:01:06.950
So once they executed update,

00:01:06.950 --> 00:01:08.000
the update is done.

00:01:08.000 --> 00:01:11.405
Would we need to do we have to provide comment

00:01:11.405 --> 00:01:15.215
because either it has to start and commit or rollback,

00:01:15.215 --> 00:01:19.625
start, fail our success rates. So we had to prove it.

00:01:19.625 --> 00:01:24.935
M dot get transaction.com.

00:01:24.935 --> 00:01:26.720
If you want to do a proper coding,

00:01:26.720 --> 00:01:29.420
it has to be handled inside a try and a catch block so

00:01:29.420 --> 00:01:32.255
where we can handle the exception in a proper manner.

00:01:32.255 --> 00:01:35.660
For now, we're just doing it for testing about what's right.

00:01:35.660 --> 00:01:37.550
So I'm going to direct to providing it here.

00:01:37.550 --> 00:01:42.065
So that transaction, it's as shutter here and the transaction is ended here.

00:01:42.065 --> 00:01:44.675
Okay, so we just saved the file read.

00:01:44.675 --> 00:01:49.760
So yes, 703 sounds retweets or the server picked up the chain you Sandy,

00:01:49.760 --> 00:01:53.705
trendy, deployed in D subtler.

00:01:53.705 --> 00:01:56.450
So now we need to go back to auto management tests and

00:01:56.450 --> 00:02:00.750
then let's right-click and run as a Java application.

00:02:05.320 --> 00:02:07.640
Just give me a minute.

00:02:07.640 --> 00:02:11.105
Okay, so now that is not a message employee update completed.

00:02:11.105 --> 00:02:15.230
So now if we go and query in the database like 143, it has to be updated.

00:02:15.230 --> 00:02:17.195
The name is Joan and Dennis.

00:02:17.195 --> 00:02:21.860
So let's go back and let's run it again.

00:02:21.860 --> 00:02:24.140
Okay, so let's go back to this.

00:02:24.140 --> 00:02:27.425
I'll see now the last name has been Dennis and firstname has been John.

00:02:27.425 --> 00:02:30.935
So the data has been updated successfully.

00:02:30.935 --> 00:02:36.680
Right? So all we need to do about unit to make sure when to use a transaction,

00:02:36.680 --> 00:02:37.820
when not to use the time second,

00:02:37.820 --> 00:02:40.070
forgiving and data, you don't need a transaction.

00:02:40.070 --> 00:02:43.970
But when you're trying to update or delete or insert,

00:02:43.970 --> 00:02:48.440
you required to have a transaction active.

00:02:48.440 --> 00:02:49.955
Right?

00:02:49.955 --> 00:02:51.980
So now we try it a select operation,

00:02:51.980 --> 00:02:53.480
we tried a fetch operation,

00:02:53.480 --> 00:02:55.100
and we tried to update.

00:02:55.100 --> 00:02:57.935
All right, We needed Riley insert and delete.

00:02:57.935 --> 00:02:59.675
That is the next step, right?

00:02:59.675 --> 00:03:03.590
And updating the employee is not only in this way,

00:03:03.590 --> 00:03:06.155
there are multiple ways to do that, we'll talk about that.

00:03:06.155 --> 00:03:07.610
And then most importantly,

00:03:07.610 --> 00:03:09.710
if we go to console that our additional information,

00:03:09.710 --> 00:03:13.190
you should be able to see the Z, the Java console.

00:03:13.190 --> 00:03:14.540
Let's go open the,

00:03:14.540 --> 00:03:16.310
the WebLogic server console.

00:03:16.310 --> 00:03:17.885
So this is the WebLogic.

00:03:17.885 --> 00:03:20.060
And so if you open a logic console,

00:03:20.060 --> 00:03:22.730
you should be able to see the query which is executed.

00:03:22.730 --> 00:03:30.275
See, yeah, update employee set lastName, see, update employees.

00:03:30.275 --> 00:03:33.635
It's not employee, employee Server Java entity.

00:03:33.635 --> 00:03:37.910
And whenever you are trying to update some entity to automatically convert

00:03:37.910 --> 00:03:42.560
your EGP go DSA is color-coded, that's what happened here.

00:03:42.560 --> 00:03:45.200
So update employee sit last name and the firstName

00:03:45.200 --> 00:03:48.755
where employee number is equal to the given provide inputs.

00:03:48.755 --> 00:03:51.890
Okay, this is a framed query and what the data past year,

00:03:51.890 --> 00:03:54.500
you can take a look at it in this particular line.

00:03:54.500 --> 00:03:55.940
So the data was binded,

00:03:55.940 --> 00:03:57.710
Dennis, Joan, and 11, 43.

00:03:57.710 --> 00:03:59.435
These are the input information.

00:03:59.435 --> 00:04:02.915
Okay, so what are other ways we can do that?

00:04:02.915 --> 00:04:05.675
Okay, so let's go back to the implementation place.

00:04:05.675 --> 00:04:10.880
And here what we can do is instead of doing in this way,

00:04:10.880 --> 00:04:14.150
or what you can do is based on the employee number,

00:04:14.150 --> 00:04:18.379
you can create a query and you can fetch the employee object,

00:04:18.379 --> 00:04:20.495
and then you can update the object.

00:04:20.495 --> 00:04:23.135
I'm going to just show you how to do that anyway.

00:04:23.135 --> 00:04:29.930
So here what I'm gonna do employee AMP is a quote and I'm going to use e,

00:04:29.930 --> 00:04:34.040
m dot create, sorry,

00:04:34.040 --> 00:04:37.880
m dot, create Corinne.

00:04:37.880 --> 00:04:42.485
And here we need to provide like

00:04:42.485 --> 00:04:52.325
select EMP from the employee,

00:04:52.325 --> 00:04:59.690
E and B, where a and b dot employee number rate.

00:04:59.690 --> 00:05:08.075
So so the employee number.

00:05:08.075 --> 00:05:11.240
Is it called AMP

00:05:11.240 --> 00:05:20.315
number, employee number.

00:05:20.315 --> 00:05:25.520
So now we have the chorion place where the next thing we're gonna do set the parameter.

00:05:26.140 --> 00:05:29.900
Parameter. I want to keep it in a separate line,

00:05:29.900 --> 00:05:31.100
so I'm going to keep it here.

00:05:31.100 --> 00:05:34.684
So separate setup parameter.

00:05:34.684 --> 00:05:37.865
And what are the dominant pass employee number.

00:05:37.865 --> 00:05:42.005
And the input which is going to come in from the input.

00:05:42.005 --> 00:05:46.400
I mean the matter named employee number fantasy in Italy.

00:05:46.400 --> 00:05:51.095
So now we got the data, right.

00:05:51.095 --> 00:05:52.520
So what happened here?

00:05:52.520 --> 00:05:54.320
Employee dot create could even enter

00:05:54.320 --> 00:05:57.665
the magnetic grade query and we have a query to retrieve the employee alone.

00:05:57.665 --> 00:06:00.035
And we set the parameter also.

00:06:00.035 --> 00:06:03.095
So the next thing we need to do to the information, correct.

00:06:03.095 --> 00:06:07.220
So sorry, here,

00:06:07.220 --> 00:06:14.435
dot and then get a result set.

00:06:14.435 --> 00:06:18.350
So we're not going to read to all of them because it's just a single employer, right?

00:06:18.350 --> 00:06:24.815
So we need to provide it to the exact which is up get off at 0.

00:06:24.815 --> 00:06:27.620
Because we can use good single aerosol tassel.

00:06:27.620 --> 00:06:30.995
And as we discussed earlier,

00:06:30.995 --> 00:06:34.420
what will happen if you provide get single descent that I'm going to be

00:06:34.420 --> 00:06:37.974
chances of exception because when you're using good single-celled,

00:06:37.974 --> 00:06:39.625
you're expecting only one result.

00:06:39.625 --> 00:06:41.515
If it is 0, it delimiter next option.

00:06:41.515 --> 00:06:44.065
If it is more than one also it will throw an exception.

00:06:44.065 --> 00:06:46.450
And then the next thing, what do we need to do?

00:06:46.450 --> 00:06:48.920
Just cast it to employee.

00:06:49.650 --> 00:06:52.210
See, now we've got an employee.

00:06:52.210 --> 00:06:53.290
So the next thing,

00:06:53.290 --> 00:07:00.040
what do we need to do is just simply blurred EMP dot set firstName.

00:07:00.040 --> 00:07:02.590
Here we just pass everything has occurred,

00:07:02.590 --> 00:07:05.530
but here I'm doing an object and I'm setting the data to it.

00:07:05.530 --> 00:07:09.805
So the information you can retrieve from the metadata input into the firstname.

00:07:09.805 --> 00:07:16.035
And the next one is a and B dot set lastName,

00:07:16.035 --> 00:07:18.350
and which is received from the input also.

00:07:18.350 --> 00:07:21.020
So now the object manipulator properly.

00:07:21.020 --> 00:07:26.314
So next thing, m dot much.

00:07:26.314 --> 00:07:28.685
Okay? Yeah, this updating, right?

00:07:28.685 --> 00:07:30.920
So we're gonna use some Merge.

00:07:30.920 --> 00:07:36.150
And then what is the entity or one image here, a and b.

00:07:36.490 --> 00:07:39.710
So this is the second approach.

00:07:39.710 --> 00:07:50.670
So approach number two and the bone is approach number one.

00:07:53.230 --> 00:07:55.550
Approach number 1.

00:07:55.550 --> 00:07:56.780
So it's up to you,

00:07:56.780 --> 00:07:59.120
It's based on your requirement.

00:07:59.120 --> 00:08:02.555
So the reason why I mentioned these two implementation here,

00:08:02.555 --> 00:08:06.290
I'm just trying to say you can do what they have them,

00:08:06.290 --> 00:08:07.760
but even here also,

00:08:07.760 --> 00:08:09.770
if you run this directly,

00:08:09.770 --> 00:08:12.650
you will end up with the transaction is not fun,

00:08:12.650 --> 00:08:14.270
so we know what to do, right?

00:08:14.270 --> 00:08:19.010
So we need to initiate the transaction begin and then we need to commit it properly.

00:08:19.010 --> 00:08:21.110
Okay, so we're trying to update, right?

00:08:21.110 --> 00:08:25.080
So the next example, we will try to insert a record into a table.
