WEBVTT
1
00:00:00.006 --> 00:00:02.007
- [Instructor] Any modern web development in Spring

2
00:00:02.007 --> 00:00:06.004
these days requires a reference to WebFlux.

3
00:00:06.004 --> 00:00:09.000
WebFlux is the way to do reactive Spring

4
00:00:09.000 --> 00:00:11.004
since Spring Boot 2.0.

5
00:00:11.004 --> 00:00:15.001
With Spring Security, there's full support for WebFlux.

6
00:00:15.001 --> 00:00:16.009
Let's take a quick look.

7
00:00:16.009 --> 00:00:19.006
The basic annotation that you're going to use

8
00:00:19.006 --> 00:00:23.009
is the @EnableWebFluxSecurity annotation.

9
00:00:23.009 --> 00:00:27.005
This gives you control for basic configuration mapping

10
00:00:27.005 --> 00:00:32.000
and the basic config puts everything as secured.

11
00:00:32.000 --> 00:00:36.003
You also have a handle to a SecurityWebFilterChain.

12
00:00:36.003 --> 00:00:39.005
As you might remember, everything in Spring Security

13
00:00:39.005 --> 00:00:44.001
is based on filters and reactive Spring is no different.

14
00:00:44.001 --> 00:00:48.005
This filter chain provides much more fine-grained control,

15
00:00:48.005 --> 00:00:50.006
much the way that we've seen before

16
00:00:50.006 --> 00:00:52.009
in the authentication managers that we use

17
00:00:52.009 --> 00:00:56.000
for forms in basic Auth and LDAP.

18
00:00:56.000 --> 00:00:59.008
You also have a MapReactiveUserDetailsService

19
00:00:59.008 --> 00:01:01.009
that allows you to handle the traditional

20
00:01:01.009 --> 00:01:06.006
UserDetailsService much the same way we have before.

21
00:01:06.006 --> 00:01:09.002
As we get into our example, we're going to go back

22
00:01:09.002 --> 00:01:12.002
to that in-memory UserDetailsService

23
00:01:12.002 --> 00:01:14.005
but you could do the same thing with the database

24
00:01:14.005 --> 00:01:17.004
or LDAP in the reactive world.

25
00:01:17.004 --> 00:01:20.006
Oftentimes in security, as we have seen already

26
00:01:20.006 --> 00:01:22.008
in this course, you want to have a way

27
00:01:22.008 --> 00:01:24.005
to handle the principal.

28
00:01:24.005 --> 00:01:26.005
And in traditional Spring Security,

29
00:01:26.005 --> 00:01:27.006
that was never a problem.

30
00:01:27.006 --> 00:01:32.006
You just put the principal itself into the method signature.

31
00:01:32.006 --> 00:01:36.000
Well, with WebFlux it still isn't a problem

32
00:01:36.000 --> 00:01:40.004
because it's still based on principal.

33
00:01:40.004 --> 00:01:43.008
But instead of injecting straight principal

34
00:01:43.008 --> 00:01:47.007
into your method, you now have to inject a mono

35
00:01:47.007 --> 00:01:50.004
with a principal template into your method

36
00:01:50.004 --> 00:01:52.005
where you want to handle it.

37
00:01:52.005 --> 00:01:54.006
Not much different but since we're not dealing

38
00:01:54.006 --> 00:01:57.004
with raw objects, it's now a mono wrapper

39
00:01:57.004 --> 00:01:59.009
as opposed to just the straight principal.

40
00:01:59.009 --> 00:02:02.000
But all that being said, you still get

41
00:02:02.000 --> 00:02:04.005
all the same core functionality.

42
00:02:04.005 --> 00:02:07.007
It's just wrapped. Now, we've seen the basics.

43
00:02:07.007 --> 00:02:10.005
Let's jump into some code and look at a real example

44
00:02:10.005 --> 00:02:15.000
of enabling web security with a reactive web.

