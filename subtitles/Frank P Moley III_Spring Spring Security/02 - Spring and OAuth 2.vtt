WEBVTT
1
00:00:00.007 --> 00:00:02.001
- [Instructor] After just discussing a bit

2
00:00:02.001 --> 00:00:04.001
about what OAuth 2 is,

3
00:00:04.001 --> 00:00:06.004
I'd like to talk a little bit about how Spring works

4
00:00:06.004 --> 00:00:07.007
with OAuth 2,

5
00:00:07.007 --> 00:00:10.008
and as you might guess, Spring has full integration

6
00:00:10.008 --> 00:00:12.005
for this protocol.

7
00:00:12.005 --> 00:00:14.008
One of the first classes you may interact with

8
00:00:14.008 --> 00:00:17.007
is the CommonOAuth2Provider.

9
00:00:17.007 --> 00:00:19.008
This is used to connect to such systems

10
00:00:19.008 --> 00:00:21.006
as Okta or Facebook

11
00:00:21.006 --> 00:00:24.006
and we'll look at little bit more at this later on

12
00:00:24.006 --> 00:00:26.007
but as I said, it provides native support

13
00:00:26.007 --> 00:00:30.000
for things that you would use all over the internet

14
00:00:30.000 --> 00:00:32.005
that are coom OAuth providers.

15
00:00:32.005 --> 00:00:34.007
The one we're going to use is GitHub.

16
00:00:34.007 --> 00:00:36.006
It's property-based configured

17
00:00:36.006 --> 00:00:38.008
if you're in a Spring Boot environment

18
00:00:38.008 --> 00:00:42.005
and that's most likely how you are going to use this class.

19
00:00:42.005 --> 00:00:45.001
By using the property-based configuration,

20
00:00:45.001 --> 00:00:48.007
you actually get native support in the Spring Boot app

21
00:00:48.007 --> 00:00:50.006
with very little work.

22
00:00:50.006 --> 00:00:53.008
It provides client-side OAuth integration.

23
00:00:53.008 --> 00:00:56.003
It allows you to provide third-party support

24
00:00:56.003 --> 00:00:57.008
for the log in operations

25
00:00:57.008 --> 00:01:01.005
so you don't have to keep that information in your sight,

26
00:01:01.005 --> 00:01:04.002
which is very attractive to a lot of companies

27
00:01:04.002 --> 00:01:06.008
that don't want to manage the overhead

28
00:01:06.008 --> 00:01:09.006
of bringing user authentication in

29
00:01:09.006 --> 00:01:12.007
because after all, when user authentication leaks,

30
00:01:12.007 --> 00:01:15.002
that tends to make the news.

31
00:01:15.002 --> 00:01:17.008
One of the next pieces that you might work with

32
00:01:17.008 --> 00:01:21.000
is the Authorization Server itself.

33
00:01:21.000 --> 00:01:22.005
This is something that you would do

34
00:01:22.005 --> 00:01:24.007
if you're going to run your authorization service

35
00:01:24.007 --> 00:01:27.001
for service-to-service calls.

36
00:01:27.001 --> 00:01:29.001
This what provides authorization

37
00:01:29.001 --> 00:01:33.000
and authentication services to the system as a whole.

38
00:01:33.000 --> 00:01:35.006
Many companies, companies that I've worked for choose

39
00:01:35.006 --> 00:01:38.009
to have your own internal authorization server

40
00:01:38.009 --> 00:01:42.005
and provide a utility to not only mobile applications

41
00:01:42.005 --> 00:01:45.003
but also to internal services.

42
00:01:45.003 --> 00:01:47.004
Creating the authorization service

43
00:01:47.004 --> 00:01:49.001
really is as simple as using

44
00:01:49.001 --> 00:01:52.008
an annotation @EnableAuthorizationServer.

45
00:01:52.008 --> 00:01:55.001
And then you're going to do some configuration

46
00:01:55.001 --> 00:01:57.003
to make that work.

47
00:01:57.003 --> 00:02:00.006
You use an AuthorizationServerConfigurerAdapter

48
00:02:00.006 --> 00:02:03.003
to configure that authorization server

49
00:02:03.003 --> 00:02:05.004
when you're going to use it.

50
00:02:05.004 --> 00:02:07.006
There's a lot of guides out there on how to do this,

51
00:02:07.006 --> 00:02:08.007
so if you do need to set up

52
00:02:08.007 --> 00:02:10.009
your own internal authorization server,

53
00:02:10.009 --> 00:02:12.004
I highly suggest you take a look

54
00:02:12.004 --> 00:02:15.002
at those guides and follow them step by step.

55
00:02:15.002 --> 00:02:16.005
Now, one of the beautiful parts

56
00:02:16.005 --> 00:02:18.009
of configuring your own OAuth this way

57
00:02:18.009 --> 00:02:22.005
is you actually have support from multiple grant types.

58
00:02:22.005 --> 00:02:25.008
Now, many times, you will choose different grant types

59
00:02:25.008 --> 00:02:28.004
based on the situation you're in

60
00:02:28.004 --> 00:02:32.006
so I highly suggest you learn those grant types really well.

61
00:02:32.006 --> 00:02:35.003
Now, next, you're going to build the resource server.

62
00:02:35.003 --> 00:02:38.001
And the resource server provides the resources

63
00:02:38.001 --> 00:02:39.006
that are being protected

64
00:02:39.006 --> 00:02:42.001
and often it's the person system

65
00:02:42.001 --> 00:02:43.003
but it doesn't have to be

66
00:02:43.003 --> 00:02:45.009
as in my service-to-service example.

67
00:02:45.009 --> 00:02:48.002
Configuring the resource server literally

68
00:02:48.002 --> 00:02:51.008
is as simple as doing @EnableResourceServer.

69
00:02:51.008 --> 00:02:54.005
Now, you can go further than that if you choose to

70
00:02:54.005 --> 00:02:57.007
and often, when you're separating your authorization server

71
00:02:57.007 --> 00:02:59.005
from your resource server,

72
00:02:59.005 --> 00:03:02.005
you will need to provide a lot more configuration

73
00:03:02.005 --> 00:03:04.004
but that's not something that I've ever done.

74
00:03:04.004 --> 00:03:08.002
I tend to keep them together for simplicity purposes.

75
00:03:08.002 --> 00:03:10.004
Finally, we're going to talk about the OAuth 2 client

76
00:03:10.004 --> 00:03:14.001
and that's something that we are going to use in this course.

77
00:03:14.001 --> 00:03:15.009
The OAuth 2 client allows you

78
00:03:15.009 --> 00:03:19.002
to have full client-side support for OAuth systems

79
00:03:19.002 --> 00:03:21.008
and things like GitHub that we're going to use

80
00:03:21.008 --> 00:03:24.007
is what we would use as just the client

81
00:03:24.007 --> 00:03:26.006
to connect to that.

82
00:03:26.006 --> 00:03:30.009
To enable the client, you use annotation EnableOauth2Client

83
00:03:30.009 --> 00:03:33.002
and then you provide yourself the ability

84
00:03:33.002 --> 00:03:36.002
to create a REST template

85
00:03:36.002 --> 00:03:38.001
but it's a specific REST template.

86
00:03:38.001 --> 00:03:40.000
It's an Oauth2RestTemplate

87
00:03:40.000 --> 00:03:42.009
that's actually going to manage all of the tokens,

88
00:03:42.009 --> 00:03:46.000
manipulation and injecting them into headers

89
00:03:46.000 --> 00:03:47.006
that you normally have to do

90
00:03:47.006 --> 00:03:50.002
if you were manually configuring this system

91
00:03:50.002 --> 00:03:51.007
and consuming it.

92
00:03:51.007 --> 00:03:53.009
So by using the Oauth2RestTemplate,

93
00:03:53.009 --> 00:03:56.007
you get a lot of the scaffolding for free

94
00:03:56.007 --> 00:04:00.004
such as you might expect from the Spring framework.

95
00:04:00.004 --> 00:04:02.000
Now, once again, you're going to have

96
00:04:02.000 --> 00:04:04.002
to support various grant types based

97
00:04:04.002 --> 00:04:07.008
on your needs, not just the client credentials

98
00:04:07.008 --> 00:04:11.000
that you would use in a service-to-service environment.

99
00:04:11.000 --> 00:04:15.000
So now that we've given a brief rundown, let's jump in.

