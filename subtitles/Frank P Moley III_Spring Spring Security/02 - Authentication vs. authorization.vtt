WEBVTT
1
00:00:00.007 --> 00:00:02.004
- [Instructor] Authentication and authorization

2
00:00:02.004 --> 00:00:05.003
are too often misunderstood, overlooked,

3
00:00:05.003 --> 00:00:08.001
or confused by application developers.

4
00:00:08.001 --> 00:00:10.005
The topics of discussion behind these two words

5
00:00:10.005 --> 00:00:13.008
can fill volume but I want to provide a simple baseline

6
00:00:13.008 --> 00:00:16.000
on the meaning of these words and how they apply

7
00:00:16.000 --> 00:00:18.004
to software so we can level set

8
00:00:18.004 --> 00:00:21.004
before we move forward in the course.

9
00:00:21.004 --> 00:00:23.005
Let's start with authentication,

10
00:00:23.005 --> 00:00:27.002
also commonly called AuthN.

11
00:00:27.002 --> 00:00:31.001
Authentication is a process of determining the who.

12
00:00:31.001 --> 00:00:34.006
Specifically and more technically, it is the process

13
00:00:34.006 --> 00:00:38.003
of determining that a principal is who they say they are.

14
00:00:38.003 --> 00:00:40.001
Now, this goes beyond a simple username

15
00:00:40.001 --> 00:00:41.007
and password scenario.

16
00:00:41.007 --> 00:00:45.001
But that can be a method of authentication.

17
00:00:45.001 --> 00:00:47.008
A point to remember when talking about principals

18
00:00:47.008 --> 00:00:50.009
in authentication is that systems

19
00:00:50.009 --> 00:00:53.005
as well as humans can be principals.

20
00:00:53.005 --> 00:00:56.004
Often we leverage a process of a system

21
00:00:56.004 --> 00:00:57.009
calling another system.

22
00:00:57.009 --> 00:01:01.008
And in a microservices world, that tends to happen a lot.

23
00:01:01.008 --> 00:01:04.004
We can leverage Spring Security to secure

24
00:01:04.004 --> 00:01:07.001
system to system calls the same way

25
00:01:07.001 --> 00:01:11.002
we would use for user to system calls.

26
00:01:11.002 --> 00:01:13.006
Now, Spring provides out-of-the-box support

27
00:01:13.006 --> 00:01:16.006
for many different flavors of authentication.

28
00:01:16.006 --> 00:01:19.004
In the web world, there's support for HTTP basic

29
00:01:19.004 --> 00:01:22.007
as well as HTTP digest authentication.

30
00:01:22.007 --> 00:01:25.002
It also provides support for x509

31
00:01:25.002 --> 00:01:27.009
certificate-based authentication.

32
00:01:27.009 --> 00:01:31.002
The most common internal level of authentication model

33
00:01:31.002 --> 00:01:33.007
is forms-based authentication.

34
00:01:33.007 --> 00:01:37.009
In Spring Security, it provides rich and robust support

35
00:01:37.009 --> 00:01:41.003
for forms-based authentication models.

36
00:01:41.003 --> 00:01:44.006
Now, in the enterprise world, we often see integration

37
00:01:44.006 --> 00:01:47.003
of LDAP as a method of authentication.

38
00:01:47.003 --> 00:01:51.007
In Spring Security, it provides native LDAP support

39
00:01:51.007 --> 00:01:55.003
as well as support from Microsoft Active Directory

40
00:01:55.003 --> 00:01:57.009
using the LDAP abstraction.

41
00:01:57.009 --> 00:02:01.002
This is clearly one of the most common integration points

42
00:02:01.002 --> 00:02:04.002
in the world for Java-based applications

43
00:02:04.002 --> 00:02:06.001
using Spring Security.

44
00:02:06.001 --> 00:02:09.000
Spring Security also has rich support

45
00:02:09.000 --> 00:02:12.006
for other external-facing authentication providers

46
00:02:12.006 --> 00:02:16.008
that are much more common in an internet-based system.

47
00:02:16.008 --> 00:02:21.002
Spring can support OAuth and Oauth 2, OpenID,

48
00:02:21.002 --> 00:02:24.002
as well as Jasig CAS for single sign-on

49
00:02:24.002 --> 00:02:26.008
authentication operations.

50
00:02:26.008 --> 00:02:29.006
Also, as you might expect from the Java world,

51
00:02:29.006 --> 00:02:32.007
there's also support for JAAS.

52
00:02:32.007 --> 00:02:36.009
Finally, Spring natively supports Kerberos and SAML.

53
00:02:36.009 --> 00:02:40.004
We're not going to go into those topics in this course

54
00:02:40.004 --> 00:02:42.003
but if for some reason you find yourself

55
00:02:42.003 --> 00:02:44.008
needing to implement these protocols,

56
00:02:44.008 --> 00:02:48.004
note that Spring Security can take away some of the pain,

57
00:02:48.004 --> 00:02:53.002
not all of it, especially with Kerberos, but some of it.

58
00:02:53.002 --> 00:02:56.001
Spring also has rich third-party support

59
00:02:56.001 --> 00:02:59.002
for many other authentication providers.

60
00:02:59.002 --> 00:03:04.009
That brings us to authorization, also commonly called AuthZ.

61
00:03:04.009 --> 00:03:08.007
Once we determine who the principal is via AuthN,

62
00:03:08.007 --> 00:03:12.009
we can then determine what they're authorized to do.

63
00:03:12.009 --> 00:03:17.002
The principal must be authenticated to get to this point.

64
00:03:17.002 --> 00:03:20.009
So it's a prerequisite in every flow.

65
00:03:20.009 --> 00:03:25.001
Often, authorization is also called access control.

66
00:03:25.001 --> 00:03:26.008
And for good reason.

67
00:03:26.008 --> 00:03:29.007
Via authorization, you are controlling access

68
00:03:29.007 --> 00:03:31.009
to the underlying resources.

69
00:03:31.009 --> 00:03:36.001
Spring Security handles authorizations and in doing so

70
00:03:36.001 --> 00:03:38.008
supports three distinct cases.

71
00:03:38.008 --> 00:03:41.003
The first and most common and the one

72
00:03:41.003 --> 00:03:44.002
that we will dig into exclusively in this course

73
00:03:44.002 --> 00:03:47.008
is web request-based authorizations.

74
00:03:47.008 --> 00:03:51.001
The pattern that we apply to web requests can be extended,

75
00:03:51.001 --> 00:03:54.005
however, to support method invocation security.

76
00:03:54.005 --> 00:03:57.001
And this becomes very powerful when you're setting up

77
00:03:57.001 --> 00:04:02.007
multiple services with multiple methods underneath them.

78
00:04:02.007 --> 00:04:05.002
And finally, you can leverage spring security

79
00:04:05.002 --> 00:04:08.008
to provide domain object instance access control,

80
00:04:08.008 --> 00:04:12.007
which can be very powerful in highly sensitive areas

81
00:04:12.007 --> 00:04:17.000
like PII, financial, and healthcare information.

