WEBVTT
1
00:00:00.006 --> 00:00:02.005
- While, OAuth and OAuth 2 are probably

2
00:00:02.005 --> 00:00:04.005
two of the most common authentication

3
00:00:04.005 --> 00:00:07.004
and authorization schemes on the internet today,

4
00:00:07.004 --> 00:00:10.005
they're also some of the most confusing and misunderstood.

5
00:00:10.005 --> 00:00:12.002
So before we get too deep

6
00:00:12.002 --> 00:00:15.003
into using OAuth 2 with Spring Security,

7
00:00:15.003 --> 00:00:17.000
I want to talk just very briefly

8
00:00:17.000 --> 00:00:20.006
about what OAuth 2 actually is.

9
00:00:20.006 --> 00:00:23.002
So let's talk about OAuth 2.

10
00:00:23.002 --> 00:00:26.003
OAuth 2 is a protocol as well as a framework

11
00:00:26.003 --> 00:00:30.000
for providing access to HTTP services.

12
00:00:30.000 --> 00:00:32.007
Now those services can be traditional web services,

13
00:00:32.007 --> 00:00:35.003
as well as web applications.

14
00:00:35.003 --> 00:00:37.007
It's often used for third-party access.

15
00:00:37.007 --> 00:00:39.004
So if you use social media,

16
00:00:39.004 --> 00:00:41.005
and you grant an application access

17
00:00:41.005 --> 00:00:43.009
to your Facebook profile, for instance,

18
00:00:43.009 --> 00:00:46.005
that's done through OAuth 2.

19
00:00:46.005 --> 00:00:48.006
Google provides the same sort of structure

20
00:00:48.006 --> 00:00:51.000
with its frameworks around OpenID.

21
00:00:51.000 --> 00:00:52.006
It's so very common

22
00:00:52.006 --> 00:00:54.008
that you may not even realize you're doing it,

23
00:00:54.008 --> 00:00:58.004
but OAuth 2 really is all over the place.

24
00:00:58.004 --> 00:00:59.005
It can also be used

25
00:00:59.005 --> 00:01:03.002
for system-to-system communications in standalone mode

26
00:01:03.002 --> 00:01:05.003
or on behalf of another user.

27
00:01:05.003 --> 00:01:07.000
And from my perspective,

28
00:01:07.000 --> 00:01:10.006
this is actually the most common use case that I use

29
00:01:10.006 --> 00:01:12.005
because we actually secure all

30
00:01:12.005 --> 00:01:15.002
of our web services with OAuth 2

31
00:01:15.002 --> 00:01:18.009
between client and server on purpose in order to make sure

32
00:01:18.009 --> 00:01:22.000
that we're protecting the data as needed.

33
00:01:22.000 --> 00:01:26.001
Now there several key components of an OAuth 2 system.

34
00:01:26.001 --> 00:01:28.001
The first is the resource owner,

35
00:01:28.001 --> 00:01:31.006
and that's the data that actually is being protected.

36
00:01:31.006 --> 00:01:33.006
So for instance, my profile data

37
00:01:33.006 --> 00:01:36.002
in Google would be the resource,

38
00:01:36.002 --> 00:01:37.003
and they're the owner of it,

39
00:01:37.003 --> 00:01:39.002
because it's about me,

40
00:01:39.002 --> 00:01:42.000
they still own it because they're Google.

41
00:01:42.000 --> 00:01:45.005
Now the client is the application that, for instance,

42
00:01:45.005 --> 00:01:50.003
I am using or a service that is being used on my behalf

43
00:01:50.003 --> 00:01:54.003
that is requesting access to the resource.

44
00:01:54.003 --> 00:01:56.006
The resource server in my previous use case

45
00:01:56.006 --> 00:01:59.005
would be Google's profile system itself.

46
00:01:59.005 --> 00:02:03.002
So it is the system that hosts the protected data

47
00:02:03.002 --> 00:02:06.009
and the accounts that we're requesting access to,

48
00:02:06.009 --> 00:02:09.004
and the authorization service is the service

49
00:02:09.004 --> 00:02:13.002
that grants tokens on behalf of me to the data

50
00:02:13.002 --> 00:02:16.007
that the resource service itself holds.

51
00:02:16.007 --> 00:02:18.007
There's a lot there, but each of those parts plays

52
00:02:18.007 --> 00:02:22.006
a key element in making OAuth 2 work.

53
00:02:22.006 --> 00:02:24.002
Now there's a few token type types

54
00:02:24.002 --> 00:02:25.009
and we need to know about these tokens

55
00:02:25.009 --> 00:02:29.002
as we're interacting with OAuth at a systemic level.

56
00:02:29.002 --> 00:02:31.000
The first is the access token,

57
00:02:31.000 --> 00:02:33.000
and this is the secret token that is used

58
00:02:33.000 --> 00:02:37.001
to identify the user and get their scopes.

59
00:02:37.001 --> 00:02:40.005
Often, it's very short lived and that's on purpose

60
00:02:40.005 --> 00:02:44.004
because that token uniquely identifies the user

61
00:02:44.004 --> 00:02:48.001
and whatever permissions they've had associated with them.

62
00:02:48.001 --> 00:02:51.004
As such, we don't really want it to live for a long time

63
00:02:51.004 --> 00:02:56.002
because if it gets leaked, the security breaks down.

64
00:02:56.002 --> 00:02:59.009
Now the refresh token is a little bit longer lived token.

65
00:02:59.009 --> 00:03:02.005
It is used to renew an access token

66
00:03:02.005 --> 00:03:05.000
when the access token expires.

67
00:03:05.000 --> 00:03:07.007
So you may have an access token that lasts a day,

68
00:03:07.007 --> 00:03:10.008
and you may have a refresh token that lasts a week.

69
00:03:10.008 --> 00:03:14.006
Which means that if I log in today, I use my access token.

70
00:03:14.006 --> 00:03:16.001
If I come back tomorrow,

71
00:03:16.001 --> 00:03:17.008
I would use the refresh token

72
00:03:17.008 --> 00:03:21.003
to renew my access token and get a new one.

73
00:03:21.003 --> 00:03:24.005
However, if I don't come back for another 14 days

74
00:03:24.005 --> 00:03:28.009
after my refresh token and my access token expire,

75
00:03:28.009 --> 00:03:30.005
then I have to go through the process

76
00:03:30.005 --> 00:03:33.001
of granting access once again.

77
00:03:33.001 --> 00:03:35.009
Now scopes are provided on access tokens,

78
00:03:35.009 --> 00:03:37.006
and it's essentially the rights

79
00:03:37.006 --> 00:03:40.003
that are associated with token.

80
00:03:40.003 --> 00:03:43.000
So for instance, in a server side component,

81
00:03:43.000 --> 00:03:46.005
let's say we have a service that serves customer data.

82
00:03:46.005 --> 00:03:49.000
We would grant access to another system

83
00:03:49.000 --> 00:03:52.001
that says you can access customer data

84
00:03:52.001 --> 00:03:54.002
while not providing that same scope

85
00:03:54.002 --> 00:03:57.000
to a different access token.

86
00:03:57.000 --> 00:03:58.005
Now, I kind of alluded to it here,

87
00:03:58.005 --> 00:04:00.008
but there's a couple different types of grants,

88
00:04:00.008 --> 00:04:04.006
and those grants impact flow throughout the system.

89
00:04:04.006 --> 00:04:07.007
The authorization code grant is the most common,

90
00:04:07.007 --> 00:04:08.007
and that's what you would see

91
00:04:08.007 --> 00:04:11.000
with something like on Facebook or Twitter

92
00:04:11.000 --> 00:04:15.001
where you're granting access to someone else on your behalf.

93
00:04:15.001 --> 00:04:17.004
An implicit grant is very common

94
00:04:17.004 --> 00:04:20.000
in web apps and mobile apps where the security

95
00:04:20.000 --> 00:04:23.008
of that access token cannot be maintained.

96
00:04:23.008 --> 00:04:26.003
Often, these don't come with refresh tokens

97
00:04:26.003 --> 00:04:28.004
and they're very specific to the function

98
00:04:28.004 --> 00:04:31.005
of the application being granted access.

99
00:04:31.005 --> 00:04:33.004
Now, the one that I've used most often

100
00:04:33.004 --> 00:04:35.001
as I alluded to previously

101
00:04:35.001 --> 00:04:37.008
is the concept of a client credential.

102
00:04:37.008 --> 00:04:40.004
Each system gets a client ID and a secret

103
00:04:40.004 --> 00:04:42.007
that uses to get an access token

104
00:04:42.007 --> 00:04:45.001
and then do its work within the system

105
00:04:45.001 --> 00:04:48.005
based on the scopes that we previously defined.

106
00:04:48.005 --> 00:04:53.004
Now that's like 10,000 or 100,000 foot view even of OAuth 2,

107
00:04:53.004 --> 00:04:56.005
and it's by no means an in depth explanation

108
00:04:56.005 --> 00:04:59.001
of every key component of OAuth.

109
00:04:59.001 --> 00:05:02.002
If you're really that interested in understanding OAuth,

110
00:05:02.002 --> 00:05:04.002
there's tons of resources out there,

111
00:05:04.002 --> 00:05:05.006
and I highly suggest

112
00:05:05.006 --> 00:05:08.006
that at least you get some basic concepts

113
00:05:08.006 --> 00:05:10.002
beyond what I presented,

114
00:05:10.002 --> 00:05:11.009
because if you mess up OAuth,

115
00:05:11.009 --> 00:05:15.000
you can really do yourself a real disservice.

116
00:05:15.000 --> 00:05:17.009
So at least understand what you're doing

117
00:05:17.009 --> 00:05:21.000
before you jump too deep into this.

