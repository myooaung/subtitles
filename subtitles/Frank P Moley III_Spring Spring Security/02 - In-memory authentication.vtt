WEBVTT
1
00:00:00.006 --> 00:00:02.008
- [Instructor] So let's do the hello world example

2
00:00:02.008 --> 00:00:04.006
of spring security.

3
00:00:04.006 --> 00:00:08.003
None of this should ever be used in the real world.

4
00:00:08.003 --> 00:00:13.009
It's just to show you how easy basic spring security is

5
00:00:13.009 --> 00:00:15.006
before we get into the noise.

6
00:00:15.006 --> 00:00:17.002
I'm going to say that one more time.

7
00:00:17.002 --> 00:00:21.005
This should never be used in the real world.

8
00:00:21.005 --> 00:00:23.008
Let's jump into our IDEs.

9
00:00:23.008 --> 00:00:26.009
First thing I want you to do is open up your PALM file,

10
00:00:26.009 --> 00:00:27.007
we're going to go down

11
00:00:27.007 --> 00:00:29.001
and we're going to add a couple dependencies.

12
00:00:29.001 --> 00:00:32.008
So the first dependency that we will add,

13
00:00:32.008 --> 00:00:39.000
is spring boot starter security

14
00:00:39.000 --> 00:00:41.003
from org spring framework boot

15
00:00:41.003 --> 00:00:44.009
and we can get rid of the version.

16
00:00:44.009 --> 00:00:51.001
And then we're going to scroll down here to our test section.

17
00:00:51.001 --> 00:00:53.001
So for the test dependency that we're going to add,

18
00:00:53.001 --> 00:00:59.009
it is spring security test

19
00:00:59.009 --> 00:01:03.002
and that comes from org spring framework security

20
00:01:03.002 --> 00:01:06.004
and you do not need a version on that either.

21
00:01:06.004 --> 00:01:07.009
Now we'll go ahead and allow Maven

22
00:01:07.009 --> 00:01:11.006
to do its dependency resolution.

23
00:01:11.006 --> 00:01:16.000
So now let's open up source main Java

24
00:01:16.000 --> 00:01:17.003
and in our base package

25
00:01:17.003 --> 00:01:23.000
we're going to create a new package called config.

26
00:01:23.000 --> 00:01:24.007
And in this config package,

27
00:01:24.007 --> 00:01:27.009
we will create a new Java class and we are going

28
00:01:27.009 --> 00:01:33.006
to call that Java class WebSecurityConfig.

29
00:01:33.006 --> 00:01:39.001
Alright, let's annotate this with @Configuration

30
00:01:39.001 --> 00:01:48.003
and @EnableWebSecurity.

31
00:01:48.003 --> 00:01:49.004
And this class needs

32
00:01:49.004 --> 00:02:00.001
to extends WebSecurityConfigurerAdapter

33
00:02:00.001 --> 00:02:05.001
and now we are going to override a method of that,

34
00:02:05.001 --> 00:02:07.007
the method we will override is protected,

35
00:02:07.007 --> 00:02:16.002
void, configure, HttpSecurity,

36
00:02:16.002 --> 00:02:20.007
and we'll simply call it HTTP

37
00:02:20.007 --> 00:02:26.000
and this throws an exception.

38
00:02:26.000 --> 00:02:27.006
Alright, so now in here we're going to do

39
00:02:27.006 --> 00:02:41.008
an HTTP.authorizeRequests.antMatchers

40
00:02:41.008 --> 00:02:42.009
and what we're going to do here

41
00:02:42.009 --> 00:02:50.003
is we are going to say at the root and /home

42
00:02:50.003 --> 00:02:54.001
at those two pages we want to permit all.

43
00:02:54.001 --> 00:03:01.001
Any other request we need to be authenticated

44
00:03:01.001 --> 00:03:03.008
and we will do an and,

45
00:03:03.008 --> 00:03:08.006
and we are going to use HTTP basic.

46
00:03:08.006 --> 00:03:12.006
Now in here, we're going to create another method,

47
00:03:12.006 --> 00:03:18.008
and this one we're going to annotate with that bean,

48
00:03:18.008 --> 00:03:25.001
and this is the UserDetailesService.

49
00:03:25.001 --> 00:03:38.003
We will call it as such and we are going to do UserDetails,

50
00:03:38.003 --> 00:03:42.009
we're going to do a User.withDefaultPasswordEncoder.

51
00:03:42.009 --> 00:03:45.005
You'll notice that this is deprecated that's

52
00:03:45.005 --> 00:03:48.000
because it's here only for testing purposes.

53
00:03:48.000 --> 00:03:51.002
It should never be used.

54
00:03:51.002 --> 00:03:55.009
We're going to set a username of user

55
00:03:55.009 --> 00:04:03.001
and a password of password,

56
00:04:03.001 --> 00:04:09.000
and the roles we will add to this are user

57
00:04:09.000 --> 00:04:13.000
and we will build this user,

58
00:04:13.000 --> 00:04:14.009
and then we will return

59
00:04:14.009 --> 00:04:22.001
a new InMemoryUserDetailsManager passing at the user.

60
00:04:22.001 --> 00:04:27.001
Now, let's start up our application.

61
00:04:27.001 --> 00:04:30.001
Go ahead and refresh our page.

62
00:04:30.001 --> 00:04:31.008
Now you'll see, we can get to the homepage,

63
00:04:31.008 --> 00:04:33.000
nothing has happened.

64
00:04:33.000 --> 00:04:36.006
The minute I go to customers I'm prompted to sign in.

65
00:04:36.006 --> 00:04:40.001
So here I will do user and password

66
00:04:40.001 --> 00:04:42.004
and now I can see my page.

67
00:04:42.004 --> 00:04:46.000
Now, because this is basic off and it's in memory,

68
00:04:46.000 --> 00:04:47.009
refreshing it there's no way to log at it.

69
00:04:47.009 --> 00:04:49.001
We'll talk about that later.

70
00:04:49.001 --> 00:04:50.003
But for right now, you can see

71
00:04:50.003 --> 00:04:52.003
that we protected it with basic off

72
00:04:52.003 --> 00:04:55.000
and that's all the there was to do in this video.

