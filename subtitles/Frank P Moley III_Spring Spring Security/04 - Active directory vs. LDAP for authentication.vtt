WEBVTT
1
00:00:00.000 --> 00:00:01.006
- [Instructor] I want to talk for a moment

2
00:00:01.006 --> 00:00:04.002
about using Active Directory from Microsoft

3
00:00:04.002 --> 00:00:07.006
for authentication in a Spring Boot application.

4
00:00:07.006 --> 00:00:10.002
Now, today, many companies are moving to ADFS

5
00:00:10.002 --> 00:00:12.000
which is SAML based,

6
00:00:12.000 --> 00:00:14.002
but there still are a lot of enterprises

7
00:00:14.002 --> 00:00:18.003
using good old-fashioned Microsoft Active Directory.

8
00:00:18.003 --> 00:00:20.003
It's important to note that Active Directory

9
00:00:20.003 --> 00:00:23.008
is not LDAP, and that sometimes really gets confused

10
00:00:23.008 --> 00:00:27.000
in the industry because people deal with LDAP

11
00:00:27.000 --> 00:00:30.006
and quite often they are connecting to LDAP URLs,

12
00:00:30.006 --> 00:00:33.003
but really they are hitting Active Directory.

13
00:00:33.003 --> 00:00:35.001
It's important to make this distinction

14
00:00:35.001 --> 00:00:38.006
because Active Directory implements an LDAP API,

15
00:00:38.006 --> 00:00:42.008
but Active Directory is much more than LDAP itself.

16
00:00:42.008 --> 00:00:46.000
Now, the LDAP interface is really what is exposed,

17
00:00:46.000 --> 00:00:49.008
and it's exposed to the AD Lightweight directory services.

18
00:00:49.008 --> 00:00:52.001
And that's contained within the structure

19
00:00:52.001 --> 00:00:54.002
of Active Directory itself.

20
00:00:54.002 --> 00:00:56.009
Now, again, Active Directory isn't LDAP

21
00:00:56.009 --> 00:00:59.004
because Active Directory provides many, many,

22
00:00:59.004 --> 00:01:03.004
many more services and if you look at the port requirements

23
00:01:03.004 --> 00:01:06.004
of a domain controller, you get a real feel

24
00:01:06.004 --> 00:01:08.003
for the weight of Active Directory

25
00:01:08.003 --> 00:01:12.001
versus a very small Lightweight LDAP implementation

26
00:01:12.001 --> 00:01:15.001
like OpenLDAP, but that being said,

27
00:01:15.001 --> 00:01:17.002
Active Directory is by far

28
00:01:17.002 --> 00:01:20.000
one of the most popular enterprise solutions

29
00:01:20.000 --> 00:01:23.005
for managing directory services among other things.

30
00:01:23.005 --> 00:01:26.008
And as such as a Spring developer, it is critical

31
00:01:26.008 --> 00:01:29.006
that you not only understand the differences

32
00:01:29.006 --> 00:01:31.008
but understand how to leverage your knowledge

33
00:01:31.008 --> 00:01:35.006
of LDAP to integrate with your enterprise Active Directory.

34
00:01:35.006 --> 00:01:38.000
Now, authentication with an Active Directory

35
00:01:38.000 --> 00:01:41.005
seems very familiar if you have worked with LDAP.

36
00:01:41.005 --> 00:01:46.005
It can be standard, but there are some non-standard methods.

37
00:01:46.005 --> 00:01:49.006
Configuration in an Active Directory situation

38
00:01:49.006 --> 00:01:52.004
is very, very similar to what we previously looked at

39
00:01:52.004 --> 00:01:56.008
with LDAP because you're pointing to a specific URL,

40
00:01:56.008 --> 00:01:59.004
but I do want to give you a little word of caution.

41
00:01:59.004 --> 00:02:02.006
Now, one catch with Active Directory is all too often

42
00:02:02.006 --> 00:02:04.008
we build nested group structures.

43
00:02:04.008 --> 00:02:07.007
In fact, that's considered a feature of Active Directory

44
00:02:07.007 --> 00:02:11.000
to build groups within groups within groups.

45
00:02:11.000 --> 00:02:14.007
That way you can cascade permissions down your organization

46
00:02:14.007 --> 00:02:17.005
and across your organization without having to do

47
00:02:17.005 --> 00:02:20.007
a lot of management, but in the Spring Security world,

48
00:02:20.007 --> 00:02:24.004
nested groups don't natively work out of the box.

49
00:02:24.004 --> 00:02:29.000
And there's actually a Spring Security ticket, SEC-1823,

50
00:02:29.000 --> 00:02:30.009
that talks about this.

51
00:02:30.009 --> 00:02:33.003
There's some conversation there that's really good,

52
00:02:33.003 --> 00:02:36.005
actually, between Rob Winch and myself, where we're talking

53
00:02:36.005 --> 00:02:39.007
about the fact that this support in my mind's eye

54
00:02:39.007 --> 00:02:43.005
seems natural, but it would be very non-passive change

55
00:02:43.005 --> 00:02:45.004
to Spring Security.

56
00:02:45.004 --> 00:02:47.003
In that discussion, Rob has provided

57
00:02:47.003 --> 00:02:49.007
a very clear implementation step,

58
00:02:49.007 --> 00:02:52.006
and it's one that I've implemented and highly recommend

59
00:02:52.006 --> 00:02:55.006
you go take a look at that ticket if you're dealing

60
00:02:55.006 --> 00:02:58.005
with nested groups within your structure.

61
00:02:58.005 --> 00:03:01.003
The implementation of an authentication provider

62
00:03:01.003 --> 00:03:04.009
from a Spring Security perspective should look very familiar

63
00:03:04.009 --> 00:03:08.001
as it's what we did for the traditional LDAP.

64
00:03:08.001 --> 00:03:09.008
There's an authentication provider.

65
00:03:09.008 --> 00:03:12.001
And instead of LDAP authentication provider,

66
00:03:12.001 --> 00:03:15.006
it's an Active Directory LDAP authentication provider.

67
00:03:15.006 --> 00:03:18.008
And just like before in your configure method

68
00:03:18.008 --> 00:03:21.007
that has an authentication provider builder,

69
00:03:21.007 --> 00:03:24.008
you are going to utilize this LDAP provider,

70
00:03:24.008 --> 00:03:26.001
and you're going to do that

71
00:03:26.001 --> 00:03:30.000
in your Web Security Configure Adapter Class.

72
00:03:30.000 --> 00:03:34.005
Mostly it's going to be the exact same as standard LDAP.

73
00:03:34.005 --> 00:03:35.009
Where you're really going to have to play

74
00:03:35.009 --> 00:03:37.006
is in the group world matching.

75
00:03:37.006 --> 00:03:40.008
And you're going to have to do extra work on that.

76
00:03:40.008 --> 00:03:43.005
That's just because the nature of the nested groups

77
00:03:43.005 --> 00:03:47.000
that we get all too often in Active Directory.

78
00:03:47.000 --> 00:03:49.008
I'm not going to do any demo code here because, quite frankly,

79
00:03:49.008 --> 00:03:54.003
setting up an Active Directory service is not a trivial task

80
00:03:54.003 --> 00:03:56.006
but I'm sure you have one at your organization.

81
00:03:56.006 --> 00:03:58.001
if you're interested in this.

82
00:03:58.001 --> 00:04:01.003
And connecting to it and playing around with the APIs

83
00:04:01.003 --> 00:04:03.000
isn't really that hard.

84
00:04:03.000 --> 00:04:05.000
And I'm sure that your Windows admins

85
00:04:05.000 --> 00:04:09.006
can get you a read-only account so you don't break anything.

86
00:04:09.006 --> 00:04:13.002
Take a look at those conversations on that security ticket.

87
00:04:13.002 --> 00:04:15.009
There's also various forums like Stack Overflow

88
00:04:15.009 --> 00:04:20.001
where people tend to interact a lot on Spring Security.

89
00:04:20.001 --> 00:04:22.006
And there you will find a very clear indication

90
00:04:22.006 --> 00:04:27.000
of how similar this is to traditional LDAP.

