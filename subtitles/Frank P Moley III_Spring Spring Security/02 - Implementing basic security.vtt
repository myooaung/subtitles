WEBVTT
1
00:00:00.006 --> 00:00:02.002
- So we've talked a little bit

2
00:00:02.002 --> 00:00:03.007
about reactive security with Spring.

3
00:00:03.007 --> 00:00:06.003
Now it's time to go implement it

4
00:00:06.003 --> 00:00:07.008
using a very basic web service

5
00:00:07.008 --> 00:00:10.000
so that we can show how the behavior is similar

6
00:00:10.000 --> 00:00:12.008
and how it's different.

7
00:00:12.008 --> 00:00:14.008
So here in our IDE, the first thing I want you to do

8
00:00:14.008 --> 00:00:17.008
is go to the Exercise files and pull down

9
00:00:17.008 --> 00:00:21.005
the latest exercise files at the start of this video

10
00:00:21.005 --> 00:00:24.007
because I have created a simple reactive application

11
00:00:24.007 --> 00:00:26.001
for you to use.

12
00:00:26.001 --> 00:00:29.001
And basically, it's the concept of rolling dice.

13
00:00:29.001 --> 00:00:32.001
So there's a greeting API and there's a roll API.

14
00:00:32.001 --> 00:00:34.001
The roll API will roll two die

15
00:00:34.001 --> 00:00:37.000
and determine the total of those die.

16
00:00:37.000 --> 00:00:38.007
Let's go ahead and start this application

17
00:00:38.007 --> 00:00:41.002
and see what I mean.

18
00:00:41.002 --> 00:00:45.009
So we're going to start up our bones application.

19
00:00:45.009 --> 00:00:47.008
Now I'm going to jump into terminal.

20
00:00:47.008 --> 00:00:50.007
So I'm going to use a tool called HTTP pie.

21
00:00:50.007 --> 00:00:53.007
You can use Curl if you don't have this

22
00:00:53.007 --> 00:00:55.003
or you don't want this tool.

23
00:00:55.003 --> 00:00:57.006
I find it to be a very valuable tool to use

24
00:00:57.006 --> 00:00:59.006
so I use it quite often.

25
00:00:59.006 --> 00:01:04.007
We would go to localhost:8080/hello.

26
00:01:04.007 --> 00:01:07.004
And we get a response back.

27
00:01:07.004 --> 00:01:09.005
And if we go to the same URL,

28
00:01:09.005 --> 00:01:11.009
but this time slash roll,

29
00:01:11.009 --> 00:01:14.001
you'll see we get two dice that were rolled at random

30
00:01:14.001 --> 00:01:15.007
and the total value of those,

31
00:01:15.007 --> 00:01:19.003
we can roll again two more dice, et cetera.

32
00:01:19.003 --> 00:01:20.008
So, let's secure this,

33
00:01:20.008 --> 00:01:22.004
and the way that we're going to secure this is,

34
00:01:22.004 --> 00:01:24.009
when someone comes to us and says, hello,

35
00:01:24.009 --> 00:01:28.002
we want to respond, regardless of the situation.

36
00:01:28.002 --> 00:01:30.001
But when they come to us and ask to roll,

37
00:01:30.001 --> 00:01:35.002
we want to make sure that they're an admin user.

38
00:01:35.002 --> 00:01:39.000
So let's jump back into our IDE.

39
00:01:39.000 --> 00:01:41.006
Open up the bones application and go to the Palm.

40
00:01:41.006 --> 00:01:43.008
And the first thing we need to do

41
00:01:43.008 --> 00:01:47.004
is we need to add our security dependency.

42
00:01:47.004 --> 00:01:50.005
So Spring Boot starter security,

43
00:01:50.005 --> 00:01:55.002
from org Spring framework Boot will run on Maven.

44
00:01:55.002 --> 00:01:58.004
Execution on that to pull down the dependencies.

45
00:01:58.004 --> 00:01:59.007
And once that is done,

46
00:01:59.007 --> 00:02:02.006
let's go to source main Java base package,

47
00:02:02.006 --> 00:02:04.004
bones application.

48
00:02:04.004 --> 00:02:07.009
And normally I would put this into separate security config,

49
00:02:07.009 --> 00:02:10.004
for this example, we're just going to put it here.

50
00:02:10.004 --> 00:02:12.009
You've seen all of that before.

51
00:02:12.009 --> 00:02:15.003
What is different here is that we need to do

52
00:02:15.003 --> 00:02:18.009
an enable web flex security on this

53
00:02:18.009 --> 00:02:21.003
to enable our security module.

54
00:02:21.003 --> 00:02:22.009
And now we will configure it.

55
00:02:22.009 --> 00:02:25.004
So we will create a bean.

56
00:02:25.004 --> 00:02:30.000
And that bean is a our map reactive user details service

57
00:02:30.000 --> 00:02:31.009
that we just talked about.

58
00:02:31.009 --> 00:02:34.007
And we will call this user details service.

59
00:02:34.007 --> 00:02:35.007
And now let's build this.

60
00:02:35.007 --> 00:02:42.006
So we're going to create a list of user details

61
00:02:42.006 --> 00:02:45.006
Call it user details,

62
00:02:45.006 --> 00:02:52.004
and it's going to equal a new array list.

63
00:02:52.004 --> 00:02:54.000
Import everything.

64
00:02:54.000 --> 00:02:55.001
Now we will build these.

65
00:02:55.001 --> 00:02:59.001
So we're going to do a user details dot add,

66
00:02:59.001 --> 00:03:03.009
and we will add a user dot with default password encoder.

67
00:03:03.009 --> 00:03:07.001
This is deprecated, it's deprecated because it's plain text,

68
00:03:07.001 --> 00:03:08.007
we should never use it.

69
00:03:08.007 --> 00:03:10.007
Granted we should never really be using

70
00:03:10.007 --> 00:03:15.006
default password encoder or in memory, but we're fine here.

71
00:03:15.006 --> 00:03:17.004
So we're going to build that.

72
00:03:17.004 --> 00:03:19.005
But before we actually execute the build,

73
00:03:19.005 --> 00:03:21.006
we need to add a username

74
00:03:21.006 --> 00:03:26.000
and we will use our tried and trust user named User.

75
00:03:26.000 --> 00:03:29.007
And the password, once again, we will use password.

76
00:03:29.007 --> 00:03:34.008
And the roles on this will be user.

77
00:03:34.008 --> 00:03:39.008
Now let's do all of that again.

78
00:03:39.008 --> 00:03:43.006
But this time our username is going to be admin

79
00:03:43.006 --> 00:03:49.002
and our roles will be user and admin.

80
00:03:49.002 --> 00:03:51.008
And now we can return

81
00:03:51.008 --> 00:03:55.006
a new map reactive user detailed service

82
00:03:55.006 --> 00:03:58.000
passing it to user details.

83
00:03:58.000 --> 00:03:59.005
Great, so we've got our users in,

84
00:03:59.005 --> 00:04:02.004
but we still haven't secured any routes.

85
00:04:02.004 --> 00:04:04.007
Technically we have, right now everything is secured,

86
00:04:04.007 --> 00:04:06.005
but that's not what we want.

87
00:04:06.005 --> 00:04:09.002
We want to be very specific about what we secure.

88
00:04:09.002 --> 00:04:11.005
So we will create an instance

89
00:04:11.005 --> 00:04:16.004
of a security web filter chain.

90
00:04:16.004 --> 00:04:23.002
And we will simply call the Spring security Filter chain.

91
00:04:23.002 --> 00:04:28.007
It is going to take a server HTTP security object

92
00:04:28.007 --> 00:04:34.003
that we would call HTTP.

93
00:04:34.003 --> 00:04:41.009
Now in here, we will do an HTTP dot authorize exchange.

94
00:04:41.009 --> 00:04:44.000
And we will do a path matcher,

95
00:04:44.000 --> 00:04:48.005
and the path match will be a slash hello.

96
00:04:48.005 --> 00:04:51.005
And we would permit all there.

97
00:04:51.005 --> 00:04:53.000
Now we would call any exchange.

98
00:04:53.000 --> 00:04:55.000
So everything other than hello,

99
00:04:55.000 --> 00:04:57.008
which in our case is only one path, but anything else

100
00:04:57.008 --> 00:05:03.005
that we were to build must have the role of admin.

101
00:05:03.005 --> 00:05:08.002
And we want to use HTTP basic,

102
00:05:08.002 --> 00:05:14.006
And we will return in http.build.

103
00:05:14.006 --> 00:05:15.005
Excellent, we're good to go.

104
00:05:15.005 --> 00:05:20.007
So let's restart our application, and once it's up,

105
00:05:20.007 --> 00:05:22.009
we'll jump back to our terminal,

106
00:05:22.009 --> 00:05:25.000
and we'll execute some of these commands again.

107
00:05:25.000 --> 00:05:27.004
So let's go to hello.

108
00:05:27.004 --> 00:05:31.009
We're unauthenticated, but we still got to response back.

109
00:05:31.009 --> 00:05:34.002
Let's go to roll.

110
00:05:34.002 --> 00:05:36.003
Now we got a 401, we're unauthorized

111
00:05:36.003 --> 00:05:39.004
because we haven't provided any credentials.

112
00:05:39.004 --> 00:05:44.000
So let's solve that with an authentication header.

113
00:05:44.000 --> 00:05:47.009
And this gets base 64 encoded by HTTP pie.

114
00:05:47.009 --> 00:05:50.006
You would have to do that if you're using Curl,

115
00:05:50.006 --> 00:05:56.006
but we will do a user, password and we are forbidden.

116
00:05:56.006 --> 00:05:57.006
That's what we expect.

117
00:05:57.006 --> 00:06:00.007
So we have valid authentication credentials,

118
00:06:00.007 --> 00:06:02.005
but we don't have permission.

119
00:06:02.005 --> 00:06:05.005
So let's use our admin and the role worked.

120
00:06:05.005 --> 00:06:09.001
So we've now enabled very basic Spring security

121
00:06:09.001 --> 00:06:11.000
on a reactive web application.

