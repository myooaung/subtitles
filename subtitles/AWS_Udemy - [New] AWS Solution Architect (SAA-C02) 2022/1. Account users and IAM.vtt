WEBVTT
1
00:00:00.090 --> 00:00:07.430
So let us look to secure user and application access in securing our application and user access.

2
00:00:07.440 --> 00:00:12.800
We have an architectural need from our beloved business, which is the cafe.

3
00:00:12.810 --> 00:00:19.530
The cafÃ© needs to define what level of access users and system should have across cloud resources,

4
00:00:19.740 --> 00:00:25.950
and then they want to put these access controls into place across the AWB account.

5
00:00:25.950 --> 00:00:32.150
In this class you will learn how to use AM, which provides the feature that you need to meet these

6
00:00:32.150 --> 00:00:33.750
in new business required.

7
00:00:33.780 --> 00:00:40.020
When you first create an individual's account, you begin with a root user account and this user can

8
00:00:40.020 --> 00:00:46.380
log in to a previous management console with the email address of yours, and also it will be associated

9
00:00:46.380 --> 00:00:49.110
with your credit card and billing information.

10
00:00:49.110 --> 00:00:57.120
The Adrian's account root root user account has a full access to all resources, including billing information,

11
00:00:57.390 --> 00:01:03.420
personal data and or resources that were created in any RWC service.

12
00:01:03.420 --> 00:01:09.380
In that account, you can control the privileges of a driver's account route user.

13
00:01:09.380 --> 00:01:16.980
The credentials Israelis is recommending you that you not to use it as a route account for day to day

14
00:01:16.980 --> 00:01:18.570
interaction with us.

15
00:01:18.900 --> 00:01:21.660
Instead you need to create one or more.

16
00:01:21.660 --> 00:01:29.010
Iam users keep the route user credentials in a secure location which can make it more difficult for

17
00:01:29.010 --> 00:01:32.970
accessing the fully privileged route account user.

18
00:01:33.000 --> 00:01:38.790
So let us look now to an individual's identity and access management service.

19
00:01:38.910 --> 00:01:44.760
It is a service that allows you to configure fine grained access control to AWG resources.

20
00:01:44.760 --> 00:01:52.680
It will enable security visitor practices by allowing you to grant a unique security credentials to

21
00:01:52.680 --> 00:01:54.450
users and the groups.

22
00:01:54.450 --> 00:02:00.660
These are credentials to specify which address service, application programming interface and the resources

23
00:02:00.660 --> 00:02:02.220
that they can use.

24
00:02:02.400 --> 00:02:05.220
I am is secure by default.

25
00:02:05.250 --> 00:02:13.050
Users have no access to resources until permissions are explicitly granted.

26
00:02:13.590 --> 00:02:16.950
I am is integrated into most your services.

27
00:02:16.950 --> 00:02:23.910
Remember that the IAM service is a global, so anything you do at the IAM level will be implemented

28
00:02:23.910 --> 00:02:26.940
across all NWC regions.

29
00:02:26.970 --> 00:02:27.780
You can use.

30
00:02:27.930 --> 00:02:35.850
I am to grant your employee and your application access to the management console or to the API using

31
00:02:35.850 --> 00:02:38.250
their existing identity system.

32
00:02:38.250 --> 00:02:46.340
So now just recently a separate federation from corporate systems like Microsoft Active Directory or

33
00:02:46.340 --> 00:02:49.470
a standards based identity provider.

34
00:02:49.470 --> 00:02:53.490
And these are very important for you guys to remember in the exam.

35
00:02:53.520 --> 00:02:56.610
I am also support multi-factor authentication.

36
00:02:56.880 --> 00:03:05.460
If MFA enabled the IAM user, once he attempts to log in, they will be prompted for another indication

37
00:03:05.460 --> 00:03:12.570
code and that authentication code is delivered to an NWS multi-factor authentication device.

38
00:03:12.570 --> 00:03:16.080
Those devices can be hardware like an MFA device.

39
00:03:16.650 --> 00:03:24.600
They can also be virtual MFA devices that the user accesses through the application that runs in their

40
00:03:24.990 --> 00:03:29.310
smartphone, such as Google Authenticator.

41
00:03:29.640 --> 00:03:36.930
To better understand IAM, we need to understand the major components that we have in I am I am user

42
00:03:36.930 --> 00:03:44.460
is a person or application that is defined in the IWC account and that must make an API call to IWC

43
00:03:44.520 --> 00:03:45.270
products.

44
00:03:45.270 --> 00:03:52.920
Amie Group is a collection of emus and you can use IAM group to simplify how you specify and manage

45
00:03:52.920 --> 00:03:54.750
permissions for multiple users.

46
00:03:54.750 --> 00:04:01.290
If you have a group of admin user, you can create the same permission and you assign that permission

47
00:04:01.290 --> 00:04:04.650
to the admin a group and that admin group.

48
00:04:04.650 --> 00:04:09.780
Each member of that group will be inherited those permission.

49
00:04:09.780 --> 00:04:17.670
The IAM policy is a document that defines permissions to determine with what user can do and cannot

50
00:04:17.670 --> 00:04:19.950
do in the alias account.

51
00:04:19.980 --> 00:04:28.380
IAM role is a tool for granting and improve the access to a specific address resources in an account

52
00:04:28.380 --> 00:04:35.970
and we will have more examples studying the IAM role and how we can use an easy to profile to access

53
00:04:35.970 --> 00:04:39.480
a specific service via the role in IAM.

54
00:04:39.480 --> 00:04:42.270
Permissions are defined in IAM policy document.

55
00:04:42.330 --> 00:04:47.760
Those policies enable you to finetune a privilege that are granted to principals.

56
00:04:47.760 --> 00:04:54.270
Those principles must be or could be iam users, IAM roles or other AWG services.

57
00:04:54.270 --> 00:04:59.820
When I am check whether a provision is allowed, I am first check for the existing.

58
00:04:59.860 --> 00:05:01.590
Sins of any application.

59
00:05:01.590 --> 00:05:05.790
Explicit denying policy is there is no deny.

60
00:05:06.000 --> 00:05:13.230
They will check whether there is an explicit permission specified with allow policy.

61
00:05:13.230 --> 00:05:20.490
If there is no explicit allow policy exist, then the user will be denied by default.

62
00:05:20.490 --> 00:05:28.070
If there is an allow policy specified, then the user will be allowed to access that resources.

63
00:05:28.560 --> 00:05:35.940
You could also test those policy using the tool in the risk management console which called I am policy

64
00:05:35.940 --> 00:05:36.750
simulator.

65
00:05:36.750 --> 00:05:41.340
It is a useful tool for testing and troubleshooting an AM policies.

66
00:05:41.610 --> 00:05:50.010
Remember the policy in I am are stored as a JavaScript object notation or Jason and they are attached

67
00:05:50.010 --> 00:05:58.500
to principles as an identity based policy or to resources as a resource based policies.

68
00:05:58.800 --> 00:06:05.760
Identity based policies are permission policies that you can attach to a principal or to identity such

69
00:06:05.760 --> 00:06:08.910
as and IM user role or a group.

70
00:06:08.910 --> 00:06:16.530
These policies control what action that identity can perform on which resources and under what conditions.

71
00:06:16.740 --> 00:06:23.280
So normally that I am identity based policy, we attach them to a user who wants to access a specific

72
00:06:23.280 --> 00:06:27.450
service like for example, symbol notification service.

73
00:06:27.780 --> 00:06:35.280
But if we have a necessary bucket and we want to allow public access to that asset, three buckets.

74
00:06:35.520 --> 00:06:37.920
For example, we host our website there.

75
00:06:38.100 --> 00:06:43.410
So we want to grant read public access for anyone wants to visit the website.

76
00:06:43.710 --> 00:06:52.470
Then in this particular scenario, we want to grant a resource based policy that you attach to a city

77
00:06:52.470 --> 00:06:52.950
bucket.

78
00:06:53.460 --> 00:07:00.840
In this scenario, those policies control which actions are specified principle can perform on that

79
00:07:00.840 --> 00:07:05.940
resource and under what condition resource based policies are.

80
00:07:05.940 --> 00:07:12.450
Inline policy in line means they are no manage resources based policy.

81
00:07:13.080 --> 00:07:19.830
Here an example of I am policy which is is stored as a decent document and those identity based policy

82
00:07:19.830 --> 00:07:23.450
are a document that you attach to a user or to Oracle.

83
00:07:23.700 --> 00:07:28.260
A resource based policy are policy documents that you attach to a resource.

84
00:07:28.290 --> 00:07:32.550
The following are common elements found in the I Am policy document.

85
00:07:32.610 --> 00:07:37.140
We have the version which is specifically the version of the policy language that you want to use.

86
00:07:37.320 --> 00:07:43.650
And by the way, most students make a mistake by changing this version in the coming lap, but you need

87
00:07:43.650 --> 00:07:46.290
to keep it as it is the statement.

88
00:07:46.440 --> 00:07:52.440
So because this version is not the date of today, guys, this is a version for the interrupter that

89
00:07:52.440 --> 00:07:54.240
will interrupt the JSON object.

90
00:07:54.240 --> 00:08:00.600
The statements use the main policy element as a container for the following elements that affect whether

91
00:08:00.600 --> 00:08:07.620
it is allow or denied to indicate whether the policy should specify and allow policy or to deny policy

92
00:08:07.620 --> 00:08:08.520
the principle.

93
00:08:08.520 --> 00:08:16.950
Now, if you create a resource based policy, you must indicate the account or the user or the federated

94
00:08:16.950 --> 00:08:20.640
user that you would like to allow or to deny access to.

95
00:08:20.850 --> 00:08:28.680
Now, if you are creating an I am permission policy to attach to a user or to a role, you cannot include

96
00:08:28.680 --> 00:08:29.820
this statement.

97
00:08:29.820 --> 00:08:36.330
You don't need to have a principle because the principle is implied as that user or role.

98
00:08:36.750 --> 00:08:43.920
Now in actions, you include a list of action that the policy allows or denies the resource.

99
00:08:43.920 --> 00:08:50.850
Now, if you if you create an impaired emission policy, you must specify a list of resources to which

100
00:08:50.850 --> 00:08:52.230
the actions apply.

101
00:08:52.230 --> 00:08:57.060
If you create a resource based policy, this element is optional.

102
00:08:57.300 --> 00:08:58.320
And the condition?

103
00:08:58.320 --> 00:08:58.680
No.

104
00:08:58.830 --> 00:09:06.480
You can specify a circumstances where the policy grants permission for identity based policy guys.

105
00:09:06.480 --> 00:09:13.260
You must specify a list of resources that the actions apply to the resource element to specify the objects

106
00:09:13.260 --> 00:09:15.630
or objects that the statement cover.

107
00:09:16.020 --> 00:09:22.380
And the statements must include either a resource or a not resource element.

108
00:09:22.440 --> 00:09:25.050
Most resources have a friendly name.

109
00:09:25.080 --> 00:09:31.560
However, the permissions policy language requires you to specify the resource or resources using the

110
00:09:31.560 --> 00:09:36.990
following Amazon resource name e r RN format.

111
00:09:37.050 --> 00:09:45.090
Each service has its own set of resources, although you always use an R and although you you always

112
00:09:45.090 --> 00:09:53.070
use an air and to specify a resource, the details of that are and for a resource depend on the service

113
00:09:53.070 --> 00:09:55.260
and the resources for information.

114
00:09:55.260 --> 00:09:57.180
How to specify a resource.

115
00:09:57.480 --> 00:09:59.670
You could go back to the Edelweiss document.

116
00:09:59.950 --> 00:10:04.330
And for that I am service and in-line policy.

117
00:10:04.600 --> 00:10:08.530
You could also use for the action part a wild card.

118
00:10:08.560 --> 00:10:16.070
You can use a wild card character like Star, which represent any combinations of zero or more characters.

119
00:10:16.090 --> 00:10:20.290
So the action with the star here in acid three star.

120
00:10:20.740 --> 00:10:23.660
This apply to all as three action.

121
00:10:23.680 --> 00:10:26.910
You can also used wild card as part of the action name.

122
00:10:26.920 --> 00:10:35.950
For example, you can put AM a star access key which will applies to all I am actions that include the

123
00:10:35.950 --> 00:10:45.550
string axis key, including create axis key, delete axis key list axis keys and update axis key.

124
00:10:45.670 --> 00:10:52.060
So the I am policy documents auditing in Jason, the Amazon dynamic DB table whose name is represented

125
00:10:52.060 --> 00:11:00.480
by the table name is going to be what the IAM policy grants user access to and also the AWG accounts

126
00:11:00.490 --> 00:11:07.090
as three bucket whose name is represented by the bucket name and all objects that it contains.

127
00:11:07.270 --> 00:11:10.900
The I Am policy also includes an explicit deny.

128
00:11:10.900 --> 00:11:17.920
If you can see here in this example, the not resource element helps us to ensure that the user cannot

129
00:11:17.920 --> 00:11:25.480
use any other dynamo DB table or another AC three actions or another S3 bucket.

130
00:11:25.540 --> 00:11:32.620
So we want just to enforce them to use exactly the resources which are specified in the policy.

131
00:11:32.920 --> 00:11:41.020
If this is the case, even if permissions have been granted in another policy, an explicit deny statement

132
00:11:41.260 --> 00:11:45.070
takes precedence over allow statements.

133
00:11:45.280 --> 00:11:51.190
You can look to this activity, guys, in order to understand a few things, and we will leave it as

134
00:11:51.190 --> 00:11:55.930
an exercise for you so you can practice it later at your own time.
