1
00:00:00,030 --> 00:00:01,680
Now clashing with Sessions.

2
00:00:01,740 --> 00:00:07,350
Clashing with Sessions is very important to understand this specifically when you have an auto scalar

3
00:00:07,350 --> 00:00:11,520
and load balancer running behind your web server.

4
00:00:11,910 --> 00:00:20,820
So you want to make sure if the user to speak with a specific session, that session data can be captured

5
00:00:21,630 --> 00:00:28,410
in order to allow our load balancer to route request to those the specific server that manages the user

6
00:00:28,410 --> 00:00:31,440
session, we could use a client file cookie.

7
00:00:31,560 --> 00:00:38,700
That's the old method which are of course effective and they can speed up retrieval of sessions and

8
00:00:38,700 --> 00:00:39,930
they have few.

9
00:00:39,930 --> 00:00:45,990
This advantage is I want you to know these disadvantages and keep them in your mind the loss of the

10
00:00:45,990 --> 00:00:53,190
sessions data when you have an instance failure or when the instance is terminated or declared to be

11
00:00:53,190 --> 00:00:57,490
amazing by the load balancer are replaced by the easy to administer.

12
00:00:57,720 --> 00:00:59,070
So you will lose everything.

13
00:00:59,490 --> 00:01:07,860
The second one you have a limit to scalability because this is are subjected to uneven load distribution

14
00:01:07,860 --> 00:01:09,870
and increased latency.

15
00:01:09,870 --> 00:01:14,940
And instead of a sticky session, what you can do is to process a decision.

16
00:01:14,940 --> 00:01:22,440
These are in a distributed cache and in this case, even if the server declared it to be unhealthy and

17
00:01:22,440 --> 00:01:30,480
that server is basically replaced by an scalar, you still have decision data saved on that caching

18
00:01:30,480 --> 00:01:37,980
layer and there is multiple times of elastic cache that you can use and they are very important because

19
00:01:37,980 --> 00:01:40,210
normally they will ask about an index.

20
00:01:40,390 --> 00:01:45,120
So in this example here we store a session estate for an online gaming application.

21
00:01:45,420 --> 00:01:52,710
I can see we have a player going to send a request to elastic load balancing and the elastic load balancing

22
00:01:52,710 --> 00:01:54,960
to speak with two web servers.

23
00:01:55,170 --> 00:01:57,090
In our multi easy deployment.

24
00:01:57,720 --> 00:02:05,250
In the middle, we have an Amazon Dynamo DB where we cast the user data and this is separated from the

25
00:02:05,280 --> 00:02:11,310
game server itself that we have it there serving the game application.
