WEBVTT
1
00:00:00.030 --> 00:00:06.450
So in module 11 caching content, we are going to look to the architecture of need for the cafe to consider

2
00:00:06.450 --> 00:00:07.050
their content.

3
00:00:07.050 --> 00:00:14.970
And we will understand multiple methodology we use for caching and we will understand more about engaging

4
00:00:15.000 --> 00:00:18.510
and caching web sessions and caching databases.

5
00:00:18.510 --> 00:00:24.520
And then we will look at about streaming dynamic content using Amazon Cloud F1.

6
00:00:24.810 --> 00:00:31.560
So the architecture needs for the cafe as we know that the capacity of the cafe's infrastructure is

7
00:00:31.560 --> 00:00:39.780
being overloaded with the same request and this efficiency is increasing cost and latency.

8
00:00:40.140 --> 00:00:46.440
So how we can resolve this problem where multiple requests are requesting the same files and most likely

9
00:00:46.440 --> 00:00:52.440
these are going to be a static content that we can be easily caching, engaging.

10
00:00:52.440 --> 00:00:58.890
We want to create capacity, speed and in order to achieve that, we want to look to caching technology

11
00:00:58.890 --> 00:01:03.480
and solution that we want to employ in the CAFE infrastructure.

12
00:01:03.510 --> 00:01:09.120
So the first thing we want to consider whether there is a high speed data storage layout, are we going

13
00:01:09.120 --> 00:01:15.750
to store a subset of the data and whether we are going to increase the data retrieval performance if

14
00:01:15.750 --> 00:01:24.360
we employ a caching strategy and what what we can do, what we can do in order to reduce the need to

15
00:01:24.360 --> 00:01:27.150
access the underlying the slower storage layer.

16
00:01:27.690 --> 00:01:31.650
So let us take a very simple example about caching.

17
00:01:31.680 --> 00:01:37.470
So if you can see here we have a hardware store and the table time for the hardware store actually takes

18
00:01:37.470 --> 00:01:40.470
us to 30 minutes to reach it.

19
00:01:40.680 --> 00:01:48.240
We better have a storage unit in our home and this is basically will enable us to get access to the

20
00:01:48.240 --> 00:01:52.740
hardware tools faster and in a short period of time.

21
00:01:53.370 --> 00:01:59.850
So what should you charge is there's multiple things you can think about it in order to cache.

22
00:01:59.850 --> 00:02:07.870
Now, most importantly, guys, you can catch the content which basically not dynamic, but they are

23
00:02:07.920 --> 00:02:08.410
static.

24
00:02:09.030 --> 00:02:13.090
So data that requires a slow and expensive the query to acquire.

25
00:02:13.170 --> 00:02:19.650
And it started and the frequently accessed data for example, are provided for your social media website

26
00:02:19.950 --> 00:02:28.260
and any information that can be stored for some time, such as any publicly traded the stock price.

27
00:02:28.980 --> 00:02:36.000
So you can cache, for example, the price of a famous stock price like up a lot.

28
00:02:36.000 --> 00:02:43.110
If you down this kind of price, that's not a very good idea because the Bitcoin price is very volatile.

29
00:02:43.260 --> 00:02:45.990
It keeps changing over everything in a minute.

30
00:02:45.990 --> 00:02:48.720
So we have to be careful about that.

31
00:02:49.820 --> 00:02:57.620
Now what are the benefits of caching caching provide us with high throughput, low latency, access

32
00:02:57.620 --> 00:03:05.450
to a frequently access data so caching can improve the speed of your application, reduce the response

33
00:03:05.450 --> 00:03:13.040
latency that users experience with your application, and reduce application processing time and database

34
00:03:13.040 --> 00:03:16.760
access time for a read heavy workload.

35
00:03:16.850 --> 00:03:23.690
Remember for writing Heavy Workload, we have another mechanism that we want to employ in our fleet

36
00:03:23.730 --> 00:03:27.750
that is so caching to throw out the data journey.

37
00:03:27.860 --> 00:03:33.560
So in a very small day we can maybe summarizes the whole thing.

38
00:03:33.560 --> 00:03:41.540
So normally a user would request the data from a database and these need only be served the of the application

39
00:03:41.540 --> 00:03:44.990
server and the application server will serve the user.

40
00:03:45.410 --> 00:03:50.120
Normally the performance and the latency of this application is not going to be very good.

41
00:03:50.240 --> 00:03:57.560
So what we could do is we could put a third layer here, which is a casting layer where the application

42
00:03:58.110 --> 00:04:05.050
server will host and store the data in the cache and the customers will start to get to the data from

43
00:04:05.240 --> 00:04:05.700
the cache.

44
00:04:05.700 --> 00:04:12.770
And straight away now let us look to edge caching and how each caching can be used in order to improve

45
00:04:12.920 --> 00:04:16.370
our performance of our application.

46
00:04:17.090 --> 00:04:20.810
So if we have a user, they normally go to the origin server to request.

47
00:04:20.810 --> 00:04:26.960
For example, we can look at a very famous website like Amazon dot com and what we will find.

48
00:04:27.200 --> 00:04:32.180
The latency will be different between multiple users based on their location.

49
00:04:32.630 --> 00:04:37.370
To improve the efficiency and the performance of our Web site.

50
00:04:37.580 --> 00:04:45.780
What we could do is we could use a content delivery network and that content delivery network or CBN

51
00:04:46.090 --> 00:04:53.750
is referred to a globally distributed system of caching servers where we caches copies of commonly requested

52
00:04:53.750 --> 00:05:01.520
files, normally static content, and we can deliver a local copy of the requested contents from a nearby

53
00:05:01.520 --> 00:05:06.040
cache or edge location or a point of presence.

54
00:05:06.260 --> 00:05:10.340
We can also improve the application performance and the scaling.

55
00:05:11.090 --> 00:05:20.180
A good example of content delivery network in the US is Amazon, a global city and a cloud which is

56
00:05:20.510 --> 00:05:28.370
optimized for delivery use cases with multi-tier cache by default and extensive flexibility.

57
00:05:28.730 --> 00:05:35.150
It provides us with an extra layer of security for our architecture and remember cloud front support

58
00:05:35.150 --> 00:05:38.870
with sockets, HTP and history tips content.

59
00:05:39.560 --> 00:05:46.160
If you take for example, Amazon would come as a sample to what we need to cash.

60
00:05:46.160 --> 00:05:47.270
In this website.

61
00:05:47.360 --> 00:05:54.590
You will notice that we are going to ask the you for the address and for the communication between the

62
00:05:54.590 --> 00:05:57.530
user and the website we are going to look for.

63
00:05:57.740 --> 00:05:59.630
For example, for Amazon logo.

64
00:05:59.640 --> 00:06:03.890
Amazon logo is a static content that not going to change over time.

65
00:06:03.890 --> 00:06:05.810
So we are beta to catch it.

66
00:06:06.020 --> 00:06:09.110
Now look to the user inputs in the user input here.

67
00:06:09.590 --> 00:06:17.150
These are going to query the database so they are normally written back different type dynamic content.

68
00:06:17.480 --> 00:06:24.230
In this particular scenario, we are not going to cache the query results because each user might get

69
00:06:24.230 --> 00:06:26.420
different query or search for something.

70
00:06:26.690 --> 00:06:30.770
There is another optimization for the query we can use that we can employ.

71
00:06:30.920 --> 00:06:34.090
However, we could cache the query results.

72
00:06:34.100 --> 00:06:42.410
If customers, for example, look to the same item all over again, we can query and cash the query.

73
00:06:42.410 --> 00:06:45.710
It is now for our with object.

74
00:06:45.710 --> 00:06:51.710
We can cast them for the videos that we can see here and the images that we can see here.

75
00:06:51.710 --> 00:06:56.180
Both they can be easily cached because these are static content.

76
00:06:56.420 --> 00:06:58.520
They cannot be modified.

77
00:06:59.030 --> 00:07:01.460
So how caching works in the cloud different?

78
00:07:01.490 --> 00:07:08.930
You normally create a cloud distribution tool that your website is going to be stored in an image location.

79
00:07:08.930 --> 00:07:11.210
What does the user request the content there?

80
00:07:11.210 --> 00:07:14.420
We go to the edge location if they can find if there is.

81
00:07:14.420 --> 00:07:20.630
I hope this is what we call if they are fine what they are looking for, the location is going to return

82
00:07:20.630 --> 00:07:22.400
back that result to them.

83
00:07:22.400 --> 00:07:31.220
If there is no content in the location to meet the query that the user or the origin server will be

84
00:07:31.220 --> 00:07:39.300
asked to retrieve the content, it will be cast and then the user will be sent from the cache to configure

85
00:07:39.300 --> 00:07:40.250
that cloud difference.

86
00:07:40.250 --> 00:07:46.450
You can specify the origin server and this is with an activity bucket and see to an instance or I a

87
00:07:46.490 --> 00:07:49.160
spear, a store container or any kind of.

88
00:07:49.940 --> 00:07:50.500
A lot of that.

89
00:07:50.500 --> 00:07:54.400
You have money in your Amazon infrastructure.

90
00:07:54.820 --> 00:08:01.570
Then you will configure a distribution and that distribution will define the access who can access the

91
00:08:01.570 --> 00:08:07.630
content, whether you want to limit the content for a specific location, country or a continent.

92
00:08:08.050 --> 00:08:15.820
The security, whether you are going to use a security certificate in order to offer a history instead

93
00:08:15.820 --> 00:08:18.010
of offering only this YouTube.

94
00:08:18.100 --> 00:08:24.190
And whether you want to save cookies and create a string and forwarding, for example, if you are,

95
00:08:24.190 --> 00:08:30.820
for one thing, the request to another domain or to another website, and whether you want to do a jurisdiction

96
00:08:30.820 --> 00:08:39.610
and to save all the access logs to cloud this front and the cloud front sends your distribution configuration

97
00:08:39.610 --> 00:08:40.970
to edge location.

98
00:08:41.080 --> 00:08:44.690
How these content in a cloud different will be exploited.

99
00:08:44.800 --> 00:08:51.820
You have multiple things to consider when you post the content in a cloud from the first one is time

100
00:08:51.820 --> 00:08:52.180
to live.

101
00:08:52.300 --> 00:08:56.170
If I put an image in a cloud offload, I could assign a time to live.

102
00:08:56.500 --> 00:09:03.610
How long the image should stay is going to cloud the front without going back to the origin server to

103
00:09:03.610 --> 00:09:06.100
request a new copy of that image.

104
00:09:06.550 --> 00:09:12.850
Normally this is the expiration period of that image and it's normally stated by you.

105
00:09:12.940 --> 00:09:19.420
Sometimes if you have a digital content, you need to adjust the time to live and make it very short

106
00:09:19.420 --> 00:09:21.430
in order to fetch any copy.

107
00:09:21.640 --> 00:09:24.400
For example, maybe you change the logo of the company.

108
00:09:24.400 --> 00:09:32.410
So instead of waiting for the client to update its content, you can set the time to live into zero,

109
00:09:32.410 --> 00:09:33.130
for example.

110
00:09:33.310 --> 00:09:38.950
And in this case the cloud different will go back to your origin server with anew image.

111
00:09:39.520 --> 00:09:45.940
Another method you can do as well is to rename a defining name or you can change the object name and

112
00:09:45.940 --> 00:09:53.880
in this case and your name will force an immediate refresh for any invalidated object or any mess,

113
00:09:53.890 --> 00:09:56.530
which is basically a user requesting a content.

114
00:09:56.530 --> 00:10:00.420
Maybe it's a video and as with you, you deleted it from your website.

115
00:10:00.490 --> 00:10:06.880
This is will be considered as an invalidated object which normally cost you money.

116
00:10:06.880 --> 00:10:11.350
So you have to be careful about the amount of objects that they are invalidated.

117
00:10:12.100 --> 00:10:18.280
There is also another method you could use in order to enforce the cloud front, to update the content

118
00:10:18.280 --> 00:10:21.340
where you can make and invalidate the request.

119
00:10:21.520 --> 00:10:28.030
And that invalidating request will make your cloud different and then force it to go back to the origin

120
00:10:28.030 --> 00:10:29.770
set about retrieve the content.

121
00:10:30.460 --> 00:10:33.820
So this is an example of video on demand streaming.

122
00:10:33.850 --> 00:10:38.020
You can see here we can use Elemental Media Convert.

123
00:10:38.020 --> 00:10:46.780
It's a service that reads files from Amazon, etc. and those are sent via iCloud, the front to end

124
00:10:46.870 --> 00:10:47.500
user.

125
00:10:48.650 --> 00:10:50.840
For dynamically generated content.

126
00:10:50.990 --> 00:10:55.610
Like my times, for example, we need a faster DB responses.

127
00:10:55.610 --> 00:11:02.690
In this case, we can connect our cloud to front distribution with our elastic load balancing, which

128
00:11:02.690 --> 00:11:10.970
we guarantee that it will send the request to a very good, reliable server to in order to respond to

129
00:11:11.070 --> 00:11:12.140
this query.

130
00:11:12.740 --> 00:11:18.620
You could also use a cloud different for denial of service or distributed denial of service mitigation.

131
00:11:18.620 --> 00:11:25.520
So for example, here we have a user communicating with our domain and Amazon iCloud front and that

132
00:11:25.520 --> 00:11:33.440
is linked to Amazon Love, which is the tool we use for denial of service attack and then where to speak

133
00:11:33.440 --> 00:11:40.190
within the cloud, different distribution which can directly speak with an elastic load balancing in

134
00:11:40.190 --> 00:11:45.650
order to get the NBC server to respond to our query.

135
00:11:45.740 --> 00:11:52.670
So keep in your mind that the cloud reference is used in order to overcome content caching.

136
00:11:52.670 --> 00:11:59.630
Dismissed any static content when you have two instances and as the three they are global city and services

137
00:11:59.630 --> 00:12:04.310
and the cloud front use multiple locations original image caches.

138
00:12:04.310 --> 00:12:09.890
In order to deliver your content to your user, you can use the cloud, the front to deliver your content

139
00:12:10.130 --> 00:12:15.320
and you can specify an origin server and you can configure a distribution.

140
00:12:15.380 --> 00:12:22.220
It is very important as well for you to go and understand the multiple different type of distribution

141
00:12:22.220 --> 00:12:22.820
that we can.

142
00:12:22.820 --> 00:12:29.150
Wired with the cloud, you can use the cloud to front to improve the resilience of your application.

143
00:12:29.450 --> 00:12:35.330
That's run on us from a distributed denial of service attacks.

144
00:12:35.930 --> 00:12:42.670
And this is take us to module 11, which is the guided livestreaming dynamic content using Amazon different

145
00:12:42.890 --> 00:12:48.590
this is will teach you how you can use it, how different, how you can create distribution and how

146
00:12:48.590 --> 00:12:55.780
you can use also another can use services for you which is Amazon Elastic Transcode and Amazon Cloud,

147
00:12:55.940 --> 00:13:01.520
a front with Apple CTP live livestream or HLS protocol.

148
00:13:02.090 --> 00:13:07.160
In this particular lab, you will create a cloud different distribution, you will create an Amazon

149
00:13:07.160 --> 00:13:13.790
elastic transcode that a pipeline, and then you will test the playback of that dynamic multi bitrate

150
00:13:14.060 --> 00:13:19.520
stream and you can also share the link with your defence to see entities that are from different countries.

151
00:13:19.520 --> 00:13:25.340
Or you can use VPN in order to test that the performance of your cloud, different distribution from

152
00:13:25.340 --> 00:13:27.290
different location and global.
