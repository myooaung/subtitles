WEBVTT
1
00:00:00.090 --> 00:00:07.590
So in this class we are going to look to adding a storage layer in solution architects and in the U.S.

2
00:00:07.590 --> 00:00:09.070
Amazon services.

3
00:00:09.120 --> 00:00:14.820
So if you look to this architecture, we are going to study this architecture every lesson in order

4
00:00:14.820 --> 00:00:18.000
to build a highly available, highly scalable architecture.

5
00:00:18.000 --> 00:00:23.920
And today we are going to learn how we can host a static website in Amazon as history.

6
00:00:24.000 --> 00:00:31.020
The cafe has just started and they want to establish a simple, static website that provides customer

7
00:00:31.020 --> 00:00:36.810
with basic information about the coffee like menus, total hours, location and more.

8
00:00:36.840 --> 00:00:41.880
Currently, they don't have any marketing strategy and they want to gain a new customers.

9
00:00:41.880 --> 00:00:47.970
And when someone walks by, notice the coffee and decided to give it a try.

10
00:00:48.240 --> 00:00:56.130
The café has a very good quality of coffee and so they suggested to them that they should expand their

11
00:00:56.130 --> 00:01:02.530
community awareness by hosting the café website and make that website available for custom.

12
00:01:02.550 --> 00:01:05.750
For this, they are going to use Amazon S3.

13
00:01:05.790 --> 00:01:09.000
Amazon S3 is an object storage service.

14
00:01:09.000 --> 00:01:16.560
It enables you to store virtually unlimited amount of data and data files are stored as objects.

15
00:01:16.560 --> 00:01:20.610
You place objects in a bucket which you define and you create.

16
00:01:20.610 --> 00:01:26.150
Every bucket must have a name that is globally unique across regions.

17
00:01:26.160 --> 00:01:31.890
So the bucket name must be unique not only in that region but in all regions.

18
00:01:31.980 --> 00:01:39.660
The object you store can vary in size from zero bytes to five terabytes, and this is like normally

19
00:01:39.660 --> 00:01:40.680
unexamined question.

20
00:01:40.680 --> 00:01:48.540
Each object cannot be larger than five terabyte insights and it is with unlimited storage.

21
00:01:48.540 --> 00:01:52.980
Each object has five consistent characteristics.

22
00:01:52.980 --> 00:01:58.590
It has a key, which is basically the name that you assign to an object, and you use that object key

23
00:01:58.590 --> 00:02:00.690
to retrieve the object itself.

24
00:02:00.690 --> 00:02:07.410
In the management console, you can create a directory inside a bucket or a folder and you upload an

25
00:02:07.410 --> 00:02:09.180
object to that directory.

26
00:02:09.180 --> 00:02:17.460
Amazon S3 does not know about that, so the key value includes the full path relative to the bucket

27
00:02:17.460 --> 00:02:22.550
loot ID because Amazon has three does not know about directories.

28
00:02:22.560 --> 00:02:30.510
The second thing the object has is assertion I.D. in our bucket, a key and of it in ID they are unique.

29
00:02:30.510 --> 00:02:32.640
Identify a specific object.

30
00:02:32.670 --> 00:02:38.160
The value of the object is the actual content of that object you store.

31
00:02:38.160 --> 00:02:40.560
It can be any sequence of bytes.

32
00:02:40.590 --> 00:02:46.620
Object values are immutable, which means that after you upload an object, you cannot modify the value.

33
00:02:46.620 --> 00:02:53.760
If you want to modify the object, you must make a change outside of Amazon, etc. and then you need

34
00:02:53.760 --> 00:02:57.960
to upload it and the whole entire object need to be replaced.

35
00:02:57.990 --> 00:03:05.040
So beside the key, the value and addition idea, the object also has a meta data which is a set of

36
00:03:05.040 --> 00:03:07.950
name value pairs or key value pairs.

37
00:03:08.220 --> 00:03:10.740
You can use to store information about the object.

38
00:03:10.800 --> 00:03:16.650
You can assign them to data which is referred to as a user defined meta data for your object in Amazon

39
00:03:16.650 --> 00:03:17.340
necessity.

40
00:03:17.340 --> 00:03:24.240
Amazon C three also uses some resources to store additional object specific information.

41
00:03:24.240 --> 00:03:25.950
So the benefit of acidity.

42
00:03:25.950 --> 00:03:30.570
Acidity provides us with many features, including higher durability.

43
00:03:30.600 --> 00:03:37.410
So S3 standard, the class gives you about 11 nines of durability, which means you can afford to lose

44
00:03:37.410 --> 00:03:39.750
one document every 200 years.

45
00:03:39.780 --> 00:03:44.790
Besides the durability, it's also provide you with four nines of availability.

46
00:03:44.790 --> 00:03:51.090
And the availability here refers to your ability to access your data quickly when you want it.

47
00:03:51.090 --> 00:03:56.130
It also provides a virtually unlimited capacity to store your data.

48
00:03:56.130 --> 00:03:58.050
So it is very scalable.

49
00:03:58.050 --> 00:04:03.090
And Amazon has S3 has an built in security feature.

50
00:04:03.090 --> 00:04:10.110
It provides you with many control access as we see today in the labs where you can control who can access

51
00:04:10.110 --> 00:04:14.970
the object and at what time and based on which pattern of usage.

52
00:04:15.060 --> 00:04:22.620
Also, Amazon's story is highly peer format, which means it's a fast vital latency that is measured

53
00:04:22.620 --> 00:04:25.230
in milliseconds for most storage classes.

54
00:04:25.500 --> 00:04:32.130
Now, S3 can solve a lot of the problem in your console and in your cloud architecture.

55
00:04:32.130 --> 00:04:37.830
So this is understand if you use cases where you can employ a city to your benefit.

56
00:04:37.830 --> 00:04:43.560
So the first use case is to store and distribute web content and media.

57
00:04:43.830 --> 00:04:48.990
A very common scenario for using an S3 is to use it for media hosting.

58
00:04:48.990 --> 00:04:54.060
It can be used in order to store the static part of your website.

59
00:04:54.090 --> 00:04:59.680
Those content including videos, photos and music files which can be delivered.

60
00:04:59.900 --> 00:05:06.700
Directly from Amazon S3 because each object in Amazon S3 has a unique history.

61
00:05:07.010 --> 00:05:13.160
You are an Amazon S3 can serve as an origin store for a content delivery network.

62
00:05:13.160 --> 00:05:20.750
When you wire a city with a cloud front, you can feed your website to cloud its location directly from

63
00:05:20.750 --> 00:05:22.160
a city hosting.

64
00:05:22.160 --> 00:05:29.650
And in this case, you will preserve a lot of bandwidth and also you speed up the performance of your

65
00:05:29.660 --> 00:05:33.320
static content that will be retrieved from S3.

66
00:05:33.350 --> 00:05:37.010
How we can secure Amazon S3 buckets and object.

67
00:05:37.010 --> 00:05:44.810
When you create an asset bucket and objects by default, they are private and protected when you want

68
00:05:44.810 --> 00:05:45.860
to access them.

69
00:05:45.890 --> 00:05:53.840
You only have to change the Amazon asset to the data and that will manage the control of the data access.

70
00:05:53.840 --> 00:05:57.320
And normally it follows the principle of least a privilege.

71
00:05:57.350 --> 00:06:05.570
You can control Amazon S3 access or a specific object in the bucket using Amazon S3 block of public

72
00:06:05.570 --> 00:06:13.150
access and in the either your identity and access management or you can write a bucket policy that define

73
00:06:13.160 --> 00:06:15.770
access to a specific bucket or an object.

74
00:06:16.040 --> 00:06:20.440
And remember, guys, this is what we refer to as a resource vs policy.

75
00:06:20.450 --> 00:06:28.220
You can use IM to configure a bucket policy to grant access across either account or to grant public

76
00:06:28.220 --> 00:06:31.790
or anonymous access to Amazon S3 data.

77
00:06:31.880 --> 00:06:36.400
If you use bucket policy, you must carefully write and test them.

78
00:06:36.420 --> 00:06:43.490
If you can specify adding a statement in the bucket policy to restrict access, and you can access also

79
00:06:43.730 --> 00:06:51.500
that bucket content and lists using the policy simulator that we have in the IM service.

80
00:06:51.530 --> 00:06:56.390
You could also create and this is an exam in question as well, guys, so pay attention to it.

81
00:06:56.390 --> 00:06:58.550
You can create an AC three access point.

82
00:06:58.610 --> 00:07:06.410
Access points are a unique hostnames that enforce distinct permissions and network controls for requests

83
00:07:06.960 --> 00:07:10.210
that are made through customers with shared data.

84
00:07:10.340 --> 00:07:18.170
It can scale access for many applications by creating individualized access points with names and permission

85
00:07:18.320 --> 00:07:21.140
that are customized for each application.

86
00:07:21.140 --> 00:07:27.590
You could also use access control list and similar to what we are going to do in the lab today where

87
00:07:27.590 --> 00:07:35.000
you have an access list defined over the bucket and the object, if you use access list, do not set

88
00:07:35.000 --> 00:07:38.660
access that is to open or permissive.

89
00:07:38.690 --> 00:07:45.020
The final thing is you can use A.W. as a trusted advisor to provide you with bucket permission check

90
00:07:45.020 --> 00:07:45.470
feature.

91
00:07:45.470 --> 00:07:54.350
It is a useful tool for finding if there is any permissions that open to global access.

92
00:07:54.590 --> 00:07:59.750
No, there are three different general approaches to configure access to object in ac3.

93
00:07:59.750 --> 00:08:06.710
The scenario that you can see here, the default security setting for Amazon S3, all Amazon S3 bucket

94
00:08:06.710 --> 00:08:10.400
and object is stored in them are private and protected.

95
00:08:10.700 --> 00:08:18.650
The only entities with access to newly created and modified buckets are the account administrator and

96
00:08:18.680 --> 00:08:20.240
account root user.

97
00:08:20.240 --> 00:08:21.620
Pay attention to this guys.

98
00:08:21.620 --> 00:08:28.910
Also, the resource owner can grant a specific access permission to others, but anyone not granted

99
00:08:28.910 --> 00:08:32.000
those permissions will not have access.

100
00:08:32.000 --> 00:08:38.630
If you look to the scenario in the middle here, we can see that an AC three security setting have been

101
00:08:38.630 --> 00:08:45.650
disabled and anyone can publicly access the object is stored in the bucket theatre scenario.

102
00:08:45.680 --> 00:08:51.080
You can see that Amazon S3 was configured to provide controlled access.

103
00:08:51.080 --> 00:08:58.370
User A was granted access to the objects in the bucket, but user B was denied access.

104
00:08:58.370 --> 00:09:02.870
A controlled access scenario are more common in the industry.

105
00:09:02.870 --> 00:09:10.070
They can be configured by the bucket owner by using one or more of the tools or the options for controlling

106
00:09:10.070 --> 00:09:10.970
access to Amazon.

107
00:09:10.970 --> 00:09:13.700
AC three data that we just described.

108
00:09:13.820 --> 00:09:17.450
You could also add encryption to your objects in the bucket.

109
00:09:17.600 --> 00:09:23.500
So when you store objects in a separate buckets, you can make those object.

110
00:09:23.510 --> 00:09:32.810
Use the default encryption option which it enables server side encryption with Amazon SS3 algorithm.

111
00:09:32.810 --> 00:09:38.690
You could also have a client side encryption, and this encryption is more related to the communication

112
00:09:38.690 --> 00:09:44.300
that happened between the client, which is maybe your laptop and the bucket that you have in A.W. Wisconsin.

113
00:09:44.480 --> 00:09:51.770
In a client side encryption, you can use this approach to encrypted the data in transit not at addressed.

114
00:09:51.890 --> 00:09:57.170
So server side encryption guys used for encrypting the data at risk.

115
00:09:57.290 --> 00:09:59.780
Client side encryption is used for a.

116
00:09:59.820 --> 00:10:01.770
Encrypting the data in transit.

117
00:10:01.860 --> 00:10:08.010
You manage the encryption and process the encryption keys and the related tools like server side encryption.

118
00:10:08.010 --> 00:10:15.180
Client side encryption can reduce risk by encrypting the data with a key that is stored in a different

119
00:10:15.180 --> 00:10:18.840
mechanism than Dominica's, and that is still the data it's in.

120
00:10:19.200 --> 00:10:24.510
So normally you don't put the key beside the bucket or inside the bucket and then you encrypted because

121
00:10:24.510 --> 00:10:28.050
this is make the whole thing very weakly secure.

122
00:10:28.350 --> 00:10:36.030
The second use case for SC three is to host a static website, and by seeing this class today and the

123
00:10:36.030 --> 00:10:42.060
last that we are going to do, you will find how easy and simple you can host a static content of a

124
00:10:42.060 --> 00:10:50.940
website inside a now a dynamic website needs most of the time asset to notify the processing and maybe

125
00:10:50.940 --> 00:10:52.200
there is a data layer.

126
00:10:52.200 --> 00:10:58.620
So you have to read, for example, a kind of data from a database and then send them outside.

127
00:10:58.620 --> 00:11:07.500
The scripts most likely will be writing in page B or GSP or no G As or React or any of those server

128
00:11:07.500 --> 00:11:10.470
side scripting languages to host less static websites.

129
00:11:10.470 --> 00:11:17.280
All you need to do is to configure your AC three buckets for website hosting and then upload your website

130
00:11:17.280 --> 00:11:19.260
content to the bucket.

131
00:11:19.260 --> 00:11:25.410
Also, another thing that you will find very useful in Amazon S3 is called versioning, with Amazon

132
00:11:25.410 --> 00:11:31.650
as the three versioning this is will allow you to prevent the contents of the bucket against any accidental

133
00:11:31.650 --> 00:11:39.690
deletion and it will give you a process to recover your data if they have an failure in your application

134
00:11:39.960 --> 00:11:44.190
or when customers accidentally overwrite or delete objects.

135
00:11:44.220 --> 00:11:49.470
Versioning is a method of keeping multiple variants of an object in the same bucket.

136
00:11:49.530 --> 00:11:52.980
You can use it to preserve, receive and restore.

137
00:11:52.980 --> 00:11:57.630
Every version of every object is stored in Amazon S3 bucket.

138
00:11:57.630 --> 00:12:04.980
If you delete a specific object instead of removing it permanently, Amazon as it re inserts a delete

139
00:12:04.980 --> 00:12:10.770
marker in it, which becomes the current object version and you can also restore the previous one.

140
00:12:11.010 --> 00:12:19.080
Overwriting an object results in a new object in creation and you can always restore to the previous

141
00:12:19.080 --> 00:12:24.120
fishing buckets can be in one of the three states and versioned add.

142
00:12:24.120 --> 00:12:28.590
Also versioning was not activated or it was enabled.

143
00:12:28.620 --> 00:12:34.470
This is the second the state or versioning suspended after you enable it for that bucket.

144
00:12:34.650 --> 00:12:38.430
You can never change it to an emergent estate.

145
00:12:38.550 --> 00:12:44.520
You can, however, suspend versioning on that bucket at any stage in the future.

146
00:12:44.520 --> 00:12:48.480
And let us look now how Amazon S3 versioning work.
