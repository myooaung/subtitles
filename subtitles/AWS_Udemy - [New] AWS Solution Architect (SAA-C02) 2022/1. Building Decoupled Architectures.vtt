WEBVTT
1
00:00:00.030 --> 00:00:00.510
Okay, guys.

2
00:00:00.510 --> 00:00:06.840
So we will look today at building a decoupled architecture in the US solution architecture.

3
00:00:06.930 --> 00:00:12.480
So the first thing we want to understand that the Cathay architecture now supports hundreds of thousands

4
00:00:12.480 --> 00:00:13.110
of users.

5
00:00:13.500 --> 00:00:20.730
However, it is difficult to make changes to one layer of the application without affecting the other

6
00:00:20.940 --> 00:00:21.460
layers.

7
00:00:21.480 --> 00:00:28.380
And this has basically take us to decoupling your architecture with decoupling, we normally referred

8
00:00:28.800 --> 00:00:36.060
to a tightly coupled component, but what we really mean by that in tightly decoupled components, the

9
00:00:36.060 --> 00:00:43.800
idea that if you have a web application and this web application, for example, take a request from

10
00:00:43.800 --> 00:00:52.050
a Web server, Amazon, Route 53, then that with you will also send a request to the application tier

11
00:00:52.050 --> 00:00:57.360
and the application tier will normally speaks with the DB2.

12
00:00:57.390 --> 00:01:00.540
Now, what is the problem with a tightly coupled component?

13
00:01:00.750 --> 00:01:07.860
If one of these component crashes for any reason, for example, this application tier or application

14
00:01:07.860 --> 00:01:16.350
server, it crashes, then the both tier application and servers, they will be not functional.

15
00:01:16.680 --> 00:01:23.880
And this means we have to maintain the application and and to resolve that, we need to decouple them

16
00:01:24.150 --> 00:01:32.850
by inserting a third layer in between them that basically make them totally independent of each other.

17
00:01:33.090 --> 00:01:41.910
So to resolve this issue, guys, we can mainly make and increase our application availability and the

18
00:01:41.910 --> 00:01:48.900
scalability and reliability by decoupling those components so we can add more resources to the application

19
00:01:48.910 --> 00:01:49.200
tier.

20
00:01:49.200 --> 00:01:56.400
But even so, with that is not going to fully help us to achieve full tolerance, but it will achieve

21
00:01:57.020 --> 00:01:58.840
a high level of scalability.

22
00:01:58.860 --> 00:02:02.850
So there is multiple forms of system coupling.

23
00:02:02.880 --> 00:02:10.770
There is application level coupling, which means we are going to run that coupling or that component

24
00:02:10.770 --> 00:02:13.260
in the source code are tightly coupled.

25
00:02:13.350 --> 00:02:20.610
So inside the application itself, there is a basis of those code, a function that needs and wait for

26
00:02:20.730 --> 00:02:25.770
the result calculated by another component or another piece of code.

27
00:02:25.830 --> 00:02:31.530
There is also platform company when they build that application, that application designed to run in

28
00:02:31.680 --> 00:02:39.540
Linux operating system or in a mac OS operating system or even it is tightly cable to Windows operating

29
00:02:39.540 --> 00:02:41.880
system or to this framework, for example.

30
00:02:42.060 --> 00:02:50.290
In this case, you have only the choice to run your activity in that kind of operating system.

31
00:02:50.310 --> 00:02:53.070
And we call this a platform coupling.

32
00:02:53.100 --> 00:02:55.830
There is also a spatial coupling.

33
00:02:56.010 --> 00:03:05.460
And those components, they are mapped and managed by a specific topology, and they can only run in

34
00:03:05.580 --> 00:03:13.740
that spatial type of environment with an active protocol level or at that communication.

35
00:03:14.030 --> 00:03:22.080
And a good example of this is the novel or the Apple Network, the old Apple Network, the API in which

36
00:03:22.080 --> 00:03:28.280
we don't use it today, or when you have an application that only accepts, for example, as an initiative

37
00:03:28.440 --> 00:03:29.410
as is us.

38
00:03:29.670 --> 00:03:36.090
And in this case, you need to have, for example, a classical balancer to deal with this kind of application.

39
00:03:36.420 --> 00:03:39.890
And there is runtime company with runtime coupling.

40
00:03:39.900 --> 00:03:47.790
Once the application is executed, that application requires us to have a specific environment like

41
00:03:47.790 --> 00:03:49.880
the Java virtual machine.

42
00:03:50.370 --> 00:03:57.330
And that Java virtual machine needs to be installed in that web browser before that application can

43
00:03:57.360 --> 00:03:58.830
do any thing.

44
00:03:58.980 --> 00:04:05.340
So in order to make our component closely coupled, what we could do is to introduce a third layer.

45
00:04:05.340 --> 00:04:11.760
And that layer we normally use an elastic load balancer, and this elastic load balancer will help us

46
00:04:12.150 --> 00:04:16.620
to mainly decouple the web tier from the application.

47
00:04:16.950 --> 00:04:25.530
So for example, when users try to access our resources, that will go to the answer and the load balancer

48
00:04:25.530 --> 00:04:31.590
will distribute this evenly distributed across it to all with it in the same way.

49
00:04:32.070 --> 00:04:38.310
Once a web tier needs to speed with the application tier, this is will go to the elastic load balancer

50
00:04:38.550 --> 00:04:40.290
and the elastic load balancer.

51
00:04:40.290 --> 00:04:43.830
And in this case it will be an internal elastic balancer.

52
00:04:44.070 --> 00:04:51.480
We forward the request to the free machine that they have less and more capacity to handle the request.

53
00:04:51.720 --> 00:04:58.980
In this case, if we do this kind of scenario by introducing external load balancer and internal load

54
00:04:58.980 --> 00:04:59.550
balancer.

55
00:04:59.890 --> 00:05:05.850
We are going to face higher flexibility if one of these machine crashes.

56
00:05:06.070 --> 00:05:12.190
This is will not impact that we see it at all because the request could go to the healthy target and

57
00:05:12.190 --> 00:05:16.780
unhealthy target might be replaced using end of the scale.

58
00:05:16.930 --> 00:05:23.740
In this section we are going to look to an you said this to us, which is the Amazon symbolic service

59
00:05:23.740 --> 00:05:24.340
for us.

60
00:05:24.620 --> 00:05:33.670
Q In asking us, it's a fully managed, highly scalable service that we have in either the cloud and

61
00:05:33.670 --> 00:05:39.700
the concept of a Q in computer science is that it is the same Q you use when you go to, for example,

62
00:05:39.700 --> 00:05:46.710
to the 18 to get some cash, first guy in the queue, he will be the first guy to reach the agent.

63
00:05:46.780 --> 00:05:49.690
That's why we call them in computer science.

64
00:05:50.050 --> 00:05:57.910
We always use those accuse architecture to handle multiple processes when they all need to be processed

65
00:05:58.090 --> 00:06:00.280
one by one in a queue.

66
00:06:00.490 --> 00:06:04.480
We have a content to produce this and we have a content consumer.

67
00:06:04.840 --> 00:06:12.130
What we mean by that, once I publish my video, I produce a content and you will be all subsequent,

68
00:06:12.320 --> 00:06:18.360
for example, to my channel and you will get another vacation that there is a new content upload.

69
00:06:18.970 --> 00:06:25.420
So because you are a subscriber and you want to see those videos, all my classes, you are going to

70
00:06:25.420 --> 00:06:32.650
get an education that there is a new content added to that class and you will consume the value in computer

71
00:06:32.650 --> 00:06:32.980
science.

72
00:06:32.980 --> 00:06:37.090
You can imagine most architecture depending on this fact.

73
00:06:37.360 --> 00:06:43.540
There is one machine, for example, that you see to generating PDF and another machine wants to take

74
00:06:43.540 --> 00:06:50.350
that PDF and convert it to document consume that how we can make sure that both they can work together

75
00:06:50.560 --> 00:06:54.610
and without any delay or bottleneck or even over.

76
00:06:55.330 --> 00:07:03.350
This simple solution for that is to enforce the producer to generate the document into a Q and those

77
00:07:03.350 --> 00:07:11.350
a q will be processed by the consumer one by one in a first in, first out basis.

78
00:07:11.620 --> 00:07:17.910
So the first be the effort place in the Q is going to be the first PDF converted to document Vitacost.

79
00:07:18.220 --> 00:07:20.260
We call these this and this.

80
00:07:20.860 --> 00:07:29.290
You know how you can do the same architecture in the of us and you implement a first in first out behavior

81
00:07:29.590 --> 00:07:39.430
you need to use a service which is called as Q ask us is a fully managed messaging service that it used

82
00:07:39.430 --> 00:07:46.240
the problem messages in ask us on encrypted and is stored until they are a process.

83
00:07:46.240 --> 00:07:55.240
So once of the easy to generate a pdf that be the message will stay in the queue until we get somebody

84
00:07:55.510 --> 00:08:04.030
to process that PDF and convert it to in the act as a buffer between the producer of the content and

85
00:08:04.030 --> 00:08:05.430
the consumer of the content.

86
00:08:05.740 --> 00:08:10.330
You have a guy who could produce, for example, ten PDF every second.

87
00:08:10.480 --> 00:08:20.050
That's the first two and we have as well another easy to which reads five PDFs every second.

88
00:08:20.230 --> 00:08:28.540
In this particular case, that PDF generated by the first two instances will not be able to process

89
00:08:28.540 --> 00:08:31.120
them by the second instances is on time.

90
00:08:31.270 --> 00:08:37.180
So the consumer in this particular scenario is more slower than the produce.

91
00:08:37.450 --> 00:08:39.790
This is what cause an overflow.

92
00:08:39.790 --> 00:08:47.080
And above that you will have multiple PDFs basically wasted on the process or even unseen to resolve

93
00:08:47.080 --> 00:08:47.410
that.

94
00:08:47.620 --> 00:08:54.940
What you could do is to protect you and then that the Q all the data of generated by the producer will

95
00:08:54.940 --> 00:08:56.230
be placed on the queue.

96
00:08:56.350 --> 00:09:04.600
And then the guy, which is the consumer, he will process those PDF in his own face without affecting

97
00:09:04.600 --> 00:09:13.420
the work of the user, without creating an overflow, and without creating even a bottleneck between

98
00:09:13.420 --> 00:09:14.550
the consumer and the.

99
00:09:16.030 --> 00:09:17.480
With Amazon, ask us.

100
00:09:17.620 --> 00:09:25.060
You can ask synchronous processing to get your responses from each to quickly, and you can handle performance

101
00:09:25.210 --> 00:09:31.480
and achieve high level of service requirements by increasing the number of job instances.

102
00:09:31.780 --> 00:09:39.250
So for example, instead of having one easy to generate PDF at every second, you could have two easy

103
00:09:39.250 --> 00:09:46.270
to use reading from the queue each of those easy to handle process five feeds a second.

104
00:09:46.360 --> 00:09:54.130
In this case, all the pdf that are generated from the first producer will be consumed in the process

105
00:09:54.190 --> 00:09:59.140
by two now to easy to use instead of one two.

106
00:09:59.290 --> 00:10:06.460
And this is what we refer to as the horizontal scalability, where you multiply the number of machines

107
00:10:06.460 --> 00:10:08.980
to process those five.

108
00:10:09.250 --> 00:10:18.100
Also with loosely coupling inside Amazon with Amazon SKU, you can have an easily recover ability from

109
00:10:18.370 --> 00:10:23.770
the steps because the messages will remain in the queues until they are the process.

110
00:10:23.980 --> 00:10:25.840
The general use cases for us?

111
00:10:25.890 --> 00:10:27.620
Yes, you can use them as a word.

112
00:10:27.660 --> 00:10:32.780
Reduce buffering and batching operation request offloading and the trigger.

113
00:10:32.800 --> 00:10:35.730
Amazon easy to auto escape.

114
00:10:36.040 --> 00:10:38.880
Now in Amazon there is two types of view.

115
00:10:38.920 --> 00:10:44.300
It is the standard, the queue and there is the first in the queue.

116
00:10:44.320 --> 00:10:48.940
It's very important for you guys to know that these are very important for the solution.

117
00:10:50.140 --> 00:10:50.430
Why?

118
00:10:50.470 --> 00:10:58.300
Because they want you to know the differences between a standard, the queue and a first in the queue.

119
00:10:58.450 --> 00:10:59.890
In a standard queue.

120
00:11:00.130 --> 00:11:07.840
It will guarantee that you have at least one delivery, so the message or that pdf will be delivered

121
00:11:08.110 --> 00:11:11.050
to one easy to at least one time.

122
00:11:11.110 --> 00:11:13.680
The second it is best for all.

123
00:11:13.690 --> 00:11:21.970
Of which means if the first easy to in a sense is generated by the F1, then it will generate PDF too.

124
00:11:22.150 --> 00:11:29.890
It is not responsible or it's not mandatory that the F1 will be processed before PDF too.

125
00:11:30.340 --> 00:11:32.020
It might be the order.

126
00:11:32.260 --> 00:11:37.690
Not really important, and we call this a computer science based A4 service.

127
00:11:38.020 --> 00:11:44.620
Now the throughput of the standard, the queue is unlimited or nearly unlimited, which means you can

128
00:11:44.620 --> 00:11:51.460
place large number of messages and you will be high, highly scalable to process them.

129
00:11:51.700 --> 00:12:00.160
Now, what about first in, first out from me, we can understand that they will be messages will be

130
00:12:00.160 --> 00:12:00.670
delivered.

131
00:12:00.910 --> 00:12:03.160
Messages will be delivered in.

132
00:12:03.650 --> 00:12:07.450
So the fast media always a process before the second.

133
00:12:07.960 --> 00:12:15.310
The second difference AIDS give you an exactly one SIP process so it can guarantee that the message

134
00:12:15.640 --> 00:12:20.290
will be processed by the consumer at least one time.

135
00:12:20.740 --> 00:12:29.210
In the first one, it will guarantee that it will deliver the message one time in first in first to

136
00:12:29.350 --> 00:12:30.760
invest out the queues.

137
00:12:31.030 --> 00:12:38.170
We have high throughput, not nearly unlimited, so the throughput and the volume of the messages will

138
00:12:38.170 --> 00:12:42.940
be much higher in first in, first out in Amazon.

139
00:12:42.940 --> 00:12:49.000
Ask us if give you three major features and those also very important for the solution.

140
00:12:49.280 --> 00:12:54.340
On the first one we call it in the digital queue.

141
00:12:54.790 --> 00:13:01.480
Any message that remains in the queue in a time frame and never being the process you can place them

142
00:13:01.480 --> 00:13:09.760
in added later or in another queue with all these messages, unseen messages that maybe for a technical

143
00:13:09.760 --> 00:13:13.990
error or some issues in the program, we could process that.

144
00:13:14.000 --> 00:13:20.800
So you could have a look to them again or process them by another software or another easy to to handle.

145
00:13:20.950 --> 00:13:23.710
The second feature is the visibility time.

146
00:13:23.950 --> 00:13:32.890
You can specify how much time each message should remain unprocessed in the queue, and after that time

147
00:13:32.890 --> 00:13:35.350
expire the visibility time.

148
00:13:35.800 --> 00:13:42.140
A message, for example, in 5 minutes after 5 minutes is the PDF never been processed.

149
00:13:42.640 --> 00:13:47.500
You can place it in the queue or ignore it totally or delete it from the view.

150
00:13:47.800 --> 00:13:53.980
Depending on your application architecture, you can set up this based on the requirements you want

151
00:13:53.980 --> 00:13:54.520
to achieve.

152
00:13:54.820 --> 00:14:01.030
So for example, if this is a financial transaction, you want to make sure that this transaction should

153
00:14:01.030 --> 00:14:07.360
be processed within the first 30 seconds if it's not the process decline and go and generate another

154
00:14:07.360 --> 00:14:08.560
financial transaction.

155
00:14:08.680 --> 00:14:11.320
The third type is long haul.

156
00:14:11.590 --> 00:14:15.070
The long following we can, for example, if.

157
00:14:15.580 --> 00:14:25.360
Would so in our example generate then PD of split second and the consumer now can read two F per second.

158
00:14:25.390 --> 00:14:32.920
This means that the producer in this case will generate more video than the consumer can handle.

159
00:14:32.920 --> 00:14:39.760
And this means that the consumer needs to wait for a long time to go back to the queue and read the

160
00:14:39.760 --> 00:14:44.470
next process or the next video, which will take him time to solve.

161
00:14:45.010 --> 00:14:49.420
So we are telling us just now we have a very slow consumer.

162
00:14:49.510 --> 00:14:56.080
Give him all the time to finish everything he has before you do anything, before you delete the existing

163
00:14:56.080 --> 00:14:56.560
messages.

164
00:14:56.740 --> 00:15:01.390
All of this then in a digital, you know, what are the message.

165
00:15:01.450 --> 00:15:08.560
Life cycle in Amazon is the first thing you do is to create the message and that message will be placed

166
00:15:08.560 --> 00:15:09.120
in ask.

167
00:15:09.160 --> 00:15:11.050
You said in the queue.

168
00:15:11.350 --> 00:15:18.330
The second message will be picked by the consumer and it will be processed at that.

169
00:15:18.550 --> 00:15:25.570
This basically will start the time out for the visibility, how much the message will remain to the

170
00:15:25.570 --> 00:15:26.590
queue in the queue.

171
00:15:26.620 --> 00:15:32.020
So after we sitting that visibility timeout and that timeout started.

172
00:15:32.320 --> 00:15:38.980
This means the message will be removed from the queue once the visibility time is out.

173
00:15:39.130 --> 00:15:46.690
In the third step, the message gets deleted by the consumer after it is processed, and in this case,

174
00:15:46.990 --> 00:15:50.230
a new message will be processed by the consumer.

175
00:15:50.230 --> 00:15:58.090
And this is a good example how you can use Amazon US to decouple a deal from an application tier and

176
00:15:58.090 --> 00:15:58.780
database.

177
00:15:58.990 --> 00:16:05.230
So you can see here we have an elastic loop balancing forwarding the request to multiple with those

178
00:16:05.230 --> 00:16:08.650
are let us keep the same example they generate.

179
00:16:08.660 --> 00:16:10.290
Each one of them appear.

180
00:16:10.300 --> 00:16:18.100
The video file will be placed on a queue and that basically will pop them all in.

181
00:16:18.100 --> 00:16:21.400
Ask us to order any any process.

182
00:16:21.400 --> 00:16:28.330
Order will go to the rest of the queue and all the order that will be picked by the application here

183
00:16:28.330 --> 00:16:36.460
will be deleted from the queue and the process by the application to the use cases for us as they normally

184
00:16:36.460 --> 00:16:38.860
use them for service to service communication.

185
00:16:38.900 --> 00:16:46.450
You have for example, a service and that main service speaks, for example with kitchen service when

186
00:16:46.450 --> 00:16:53.500
you have also two items, which means to work with each other in asynchronous way, which means the

187
00:16:53.500 --> 00:17:01.690
processing time or the time clock of the consumer is totally independent from the time clock of the

188
00:17:01.690 --> 00:17:02.220
produce.

189
00:17:02.260 --> 00:17:04.810
And you can look to this in a very simple example.

190
00:17:05.170 --> 00:17:12.910
Maybe you have an easy to machine that generate some content between two different timezone, one time

191
00:17:12.910 --> 00:17:20.350
zone in the United States and another time zone in both these two instances will never be live together

192
00:17:20.500 --> 00:17:21.550
at the same time.

193
00:17:21.640 --> 00:17:25.150
One is two in Ireland, one is two and is in all 50.

194
00:17:25.480 --> 00:17:32.830
In this case, the generator of the content when you place it in a queue and later on when the Irish

195
00:17:32.830 --> 00:17:39.850
is it the instance came alive, we go to that the queue and fetch the first message in the queue.

196
00:17:39.850 --> 00:17:46.330
And then when you have a state change imagery and the state change notification is very important to

197
00:17:46.750 --> 00:17:55.030
deal with inconsistencies because for example, if the temperature of the room change lately, this

198
00:17:55.030 --> 00:17:58.360
is what we mean, the state behavior of our software change.

199
00:17:58.360 --> 00:18:06.190
If you do any information or any event, this is now is the trigger another process to handle those

200
00:18:06.190 --> 00:18:11.590
any changes or even anticipated changes or unforeseen one.

201
00:18:11.980 --> 00:18:17.690
And this is very important because we use a change of status as well in order to scale it.

202
00:18:17.710 --> 00:18:23.290
If you remember what we did, when we have to scale up all to scale up, always look to your infrastructure.

203
00:18:23.290 --> 00:18:27.910
And if there is a change in the CPU level, it will add or remove machine.

204
00:18:28.360 --> 00:18:36.310
So you can place those changes or events in an excuse and that as you execute, will be used to trigger

205
00:18:36.310 --> 00:18:39.670
another service or to trigger another action.

206
00:18:39.790 --> 00:18:47.290
The second service that we use normally for decoupling is called the symbol in sets and the symbol notification

207
00:18:47.290 --> 00:18:47.680
service.

208
00:18:47.680 --> 00:18:55.930
Now work in this in the ask you as you normally have a consumer publishing content and we have a producer

209
00:18:56.020 --> 00:19:01.780
producing in the US, us and us in the symbol notification service.

210
00:19:01.990 --> 00:19:10.290
The story is a bit different because you have a publisher, it will pop and place a new content in original

211
00:19:10.840 --> 00:19:15.460
and there is multiple processes interested to be noticed.

212
00:19:16.140 --> 00:19:23.700
Once a new entry or a new item added to that topic, we call this publisher subset.

213
00:19:23.970 --> 00:19:27.870
So imagine yourself you are a subscriber to a news feed.

214
00:19:27.990 --> 00:19:33.990
A subscription to a news feed is what we call in computer science, the publisher subscriber model.

215
00:19:34.110 --> 00:19:42.300
So once there is a new event or a new article published in, for example, in the financial in the financial

216
00:19:42.300 --> 00:19:47.940
markets, and you have some interest to subscribe to all the latest news about Bitcoin once there is

217
00:19:47.940 --> 00:19:54.180
a new event about Bitcoin you will be in is totally different from the previous case when we say there

218
00:19:54.180 --> 00:19:59.250
is a publisher generating files and then another easy to investors need to consume those files.

219
00:19:59.640 --> 00:20:06.870
Here you are, a publisher subscriber model rather than you pull the content and then we tell you now

220
00:20:06.870 --> 00:20:09.630
the difference between a sentence and in.

221
00:20:10.410 --> 00:20:17.280
So Amazon, a sentence is a highly available, scalable, secured and fully managed publisher subscriber

222
00:20:17.280 --> 00:20:17.860
service.

223
00:20:17.880 --> 00:20:19.950
You can use a push mechanism.

224
00:20:20.160 --> 00:20:28.050
And remember, guys, here, we in essence, we do have a push mechanism so that the publisher posted

225
00:20:28.050 --> 00:20:31.980
the message and the subscriber will get the message.

226
00:20:31.980 --> 00:20:38.610
It will be notified its support as well in the topic using Customer Master Key.

227
00:20:38.610 --> 00:20:44.220
And this is an exciting question the attention to it now there is many transport to political.

228
00:20:44.220 --> 00:20:47.820
You are a subscriber to a specific publisher topic.

229
00:20:47.940 --> 00:20:56.310
For example, time you can get notification about the latest news on in bitcoin using your email or

230
00:20:56.310 --> 00:21:02.370
even it can send you unlisted to be auto setpiece, which you can whip off to another tool like for

231
00:21:02.370 --> 00:21:09.990
example, Slack or any team notification service that you have in your team or it can send you an SMS

232
00:21:10.230 --> 00:21:18.060
to your mobile phone or even it can replace the new message in another queue, which is in this case

233
00:21:18.060 --> 00:21:19.440
will be an ask us.

234
00:21:19.590 --> 00:21:27.720
And the last thing you could do as well to why are sent as with the function so it will trigger a lambda

235
00:21:27.930 --> 00:21:28.380
function.

236
00:21:28.530 --> 00:21:34.590
They use cases for Amazon and as that it will be used for the application assistant alert.

237
00:21:34.860 --> 00:21:40.380
It will be used for push email and text messages, which is what we call normally in this business,

238
00:21:40.590 --> 00:21:47.580
the push notification, push notification without your mobile going to the head of the queue and pulling

239
00:21:47.580 --> 00:21:55.140
delete this content, it will receive a new notification about any distant use that happened in the

240
00:21:55.140 --> 00:21:59.350
topic that you are subscribed and like Bitcoin.

241
00:21:59.460 --> 00:22:06.630
And the last thing is of course mobile applications and all of you must be familiar what our why notification

242
00:22:07.020 --> 00:22:09.000
is what you did with essence.

243
00:22:09.000 --> 00:22:12.810
You have to consider a single published message is going to be delivered.

244
00:22:12.960 --> 00:22:14.670
There is no recall option.

245
00:22:14.880 --> 00:22:20.300
Once the message leave us and as you can't recall it, you can change your mind and say, please return

246
00:22:20.370 --> 00:22:20.640
back.

247
00:22:20.640 --> 00:22:23.070
That is like there was an error in the message.

248
00:22:23.280 --> 00:22:25.820
I need to get the message back and edit it.

249
00:22:25.870 --> 00:22:33.870
Also, order and delivery is guaranteed if you send multiple messages in a sentence like this is in

250
00:22:33.870 --> 00:22:36.870
one in two, not necessarily.

251
00:22:36.870 --> 00:22:44.460
They will be received by the subscribers in the same order, or sometimes it might be not delivered.

252
00:22:44.730 --> 00:22:51.240
So when that message is sent to all mobile devices, if one device was off, you would never get the

253
00:22:51.240 --> 00:22:51.690
message.

254
00:22:51.840 --> 00:23:00.240
And you can have a retry policy for a messaging protocol, which is for the delivery protocol, which

255
00:23:00.240 --> 00:23:07.170
means if the message delivered, you can retry, you'd say in a grace period of time or in a period

256
00:23:07.170 --> 00:23:13.500
of time just to make sure that your notification will be received by the user.

257
00:23:13.770 --> 00:23:20.280
And this is a good example how we can work both together and to build a highly decouple.

258
00:23:20.940 --> 00:23:24.420
We have an application and that application is a mobile application.

259
00:23:24.420 --> 00:23:26.700
We have users uploading images to us.

260
00:23:27.540 --> 00:23:33.290
This is will generate an event and that event will be sent to a sentence topic.

261
00:23:33.630 --> 00:23:36.210
You can call this topic a new image upload.

262
00:23:36.330 --> 00:23:45.320
Once that topic receive a new message that will send a new message to three different SKUs as a SKUs.

263
00:23:45.510 --> 00:23:53.130
So in this case, here we have the person, as is the producer of the content, we have the uploading

264
00:23:53.130 --> 00:23:53.820
of the image.

265
00:23:53.820 --> 00:23:56.820
To us, it's the bucket is the publisher.

266
00:23:57.180 --> 00:24:00.900
So the publisher put a new content into us three.

267
00:24:01.170 --> 00:24:09.000
So basically this is will generate any content by us send us into three different the queue I want a

268
00:24:09.000 --> 00:24:15.060
queue will be used to take that file and convert it to somebody the second the queue will be used to.

269
00:24:15.460 --> 00:24:22.600
Basically resized the image into a mobile format and then the Q when resize the image to make it more

270
00:24:22.600 --> 00:24:31.780
suitable for with application and desktop e.g. Q is consumed by a set of easy to two instances running

271
00:24:31.780 --> 00:24:36.730
behind and or to scale, so each instance will go to the ask.

272
00:24:37.060 --> 00:24:44.540
Q I read this message in the queue, pull it, process it, change it to the desired format, and then

273
00:24:44.620 --> 00:24:46.300
place it in a target bucket.

274
00:24:46.600 --> 00:24:53.830
Now, what are the differences between ask us and this is seriously important for you understanding

275
00:24:53.830 --> 00:24:55.960
of both services and for the solution.

276
00:24:56.950 --> 00:25:01.000
Remember that the essence is a publisher subscriber.

277
00:25:01.270 --> 00:25:05.500
There is one service generating content to place it in a topic.

278
00:25:05.560 --> 00:25:13.540
That topic has multiple subscribers, but in Ask US, you have one service generating content and another

279
00:25:13.540 --> 00:25:15.970
service consuming that.

280
00:25:16.570 --> 00:25:23.020
Now the delivery mechanism, in essence of the subscriber need to do nothing to get their message.

281
00:25:23.080 --> 00:25:29.650
Your mobile phone receive notification without doing anything, without requesting or pulling or sending

282
00:25:29.650 --> 00:25:32.620
or calling a procedure or API.

283
00:25:32.680 --> 00:25:37.030
It will receive that message because it was life in a queuing.

284
00:25:37.060 --> 00:25:41.200
It's active policy, which means your mobile device.

285
00:25:41.380 --> 00:25:47.950
If you want to get the latest content, you need to go to that queue and pull the head of the, you

286
00:25:47.950 --> 00:25:49.800
know, the distribution model.

287
00:25:49.810 --> 00:25:56.710
In essence, it's many, too many, many people could publish latest news about bitcoins and thousands

288
00:25:56.710 --> 00:25:57.840
and millions of users.

289
00:25:57.850 --> 00:26:00.520
Maybe they are interested to hear about Bitcoin.

290
00:26:00.700 --> 00:26:08.050
So they will subscribe to this topic and they will get they will get the latest news generated by people

291
00:26:08.050 --> 00:26:14.830
and ask us it's 1 to 1 to keep this in your mind as you us is not handling one too many.

292
00:26:15.190 --> 00:26:22.600
It should be 1 to 1, one guy producing content and one guy consuming this same point and the message.

293
00:26:22.600 --> 00:26:25.420
Persistence, in essence, the message.

294
00:26:25.420 --> 00:26:30.130
Once to leave the service, it will no longer be available.

295
00:26:30.130 --> 00:26:33.790
It will be totally deleted from the essence service.

296
00:26:34.060 --> 00:26:39.220
But then ask you as the content of the queue for the presents, you could replace them.

297
00:26:39.280 --> 00:26:40.330
Delete them from the queue.

298
00:26:40.330 --> 00:26:48.100
Yes, but you could replace them in the queue as or you can change the visibility time of that message.

299
00:26:48.280 --> 00:26:55.900
So in this section we understand the importance of and ask you us to decouple your application and let

300
00:26:55.900 --> 00:27:01.990
us look to a more advanced architecture, how we can make a highly digital application.

301
00:27:02.080 --> 00:27:05.890
So we want to look, for example, to a high professional service.

302
00:27:05.890 --> 00:27:13.840
It's called Amazon and Execute, which is another queuing application or another service for queuing

303
00:27:13.840 --> 00:27:14.740
and communication.

304
00:27:14.950 --> 00:27:23.300
When you have multiple produce at Amazon, AMCU is a managed messaging service for Apache Active, and

305
00:27:23.650 --> 00:27:30.880
this is a very famous product in the industry and this basically the most compatible service for that

306
00:27:31.060 --> 00:27:34.330
service in it is Amazon, AMCU.

307
00:27:34.330 --> 00:27:40.180
It can be used for the provisioning setup and maintenance of active and the queue again simplifies is

308
00:27:40.180 --> 00:27:48.190
the message migration specifically when you have an active on the queue on the centre and you want to

309
00:27:48.190 --> 00:27:55.030
take all that messages from doctor broker also to your cloud infrastructure, it is compatible with

310
00:27:55.030 --> 00:28:02.140
the open standard API and protocol and this means it support multiple different flavor of active on

311
00:28:02.140 --> 00:28:02.500
the queue.

312
00:28:02.530 --> 00:28:12.310
So you have for example, a steel amp and acuity and with socket and also JMS, which is Java, for

313
00:28:12.310 --> 00:28:12.910
example.

314
00:28:13.180 --> 00:28:20.170
This is for a socket and a layer and an acuity is also a very famous protocol.

315
00:28:20.320 --> 00:28:28.270
We use it in a very popular product in this industry called the logic of Queue with Amazon MQ, you

316
00:28:28.270 --> 00:28:34.810
can use it as to migrate between your message, your broker that you have on the premises data centre

317
00:28:34.810 --> 00:28:41.250
and your infrastructure in the cloud know the features and the differences between AMCU and this skills.

318
00:28:41.260 --> 00:28:48.940
And then as soon as you can summarize this, then in this day for an acute you normally use it for application

319
00:28:48.940 --> 00:28:49.540
migration.

320
00:28:49.550 --> 00:28:55.660
What we mean by that, maybe you have a smart home setup and there is multiple centre sensors and those

321
00:28:55.660 --> 00:29:00.670
sensors, they keep sending you data from your smart home into a queue.

322
00:29:00.880 --> 00:29:03.550
Let's say it can be Raspberry Pi.

323
00:29:03.550 --> 00:29:08.920
Maybe you have it running in that tool and you want to upload those messages.

324
00:29:09.130 --> 00:29:12.430
The latest sensory data to Atelier.

325
00:29:12.610 --> 00:29:14.920
In this case, you want to link that.

326
00:29:15.670 --> 00:29:23.400
Acuity that you have in the Raspberry Pi in your home with the infrastructure that you have in the cloud,

327
00:29:23.400 --> 00:29:29.880
maybe you have an AC two machine where you want to display all these sensory data in a dashboard in

328
00:29:29.880 --> 00:29:31.290
a smart home dashboard.

329
00:29:31.320 --> 00:29:39.150
Now Amazon, any Q can be used with multiple a protocol like the one with simple java or with socket,

330
00:29:39.360 --> 00:29:43.050
but S.A. and you as they are history deep as only.

331
00:29:43.050 --> 00:29:50.010
The second difference is is that they ask us and this and they gone in the cloud they never been on

332
00:29:50.010 --> 00:29:58.710
a data center before and in Amazon and the Q you pay per hour and the gigabyte but in escudos and this

333
00:29:58.710 --> 00:30:05.000
and unless you pay per request beside this is a message broker which means it is operate as a publisher

334
00:30:05.010 --> 00:30:05.760
subscriber.

335
00:30:05.880 --> 00:30:15.150
Then it also can do publisher subscriber, model and consumer and the produce a model both it does support

336
00:30:15.180 --> 00:30:15.840
by Amazon.

337
00:30:15.850 --> 00:30:23.040
I'm now with ask you as Anderson as ask you ask cannot do publisher subscriber but it can do publisher

338
00:30:23.040 --> 00:30:25.590
subscriber in Amazon S.A..

339
00:30:26.650 --> 00:30:31.660
So by this we finished module 12, which is building the global architecture.

340
00:30:31.960 --> 00:30:39.130
And I advise you now to keep in your mind that in this module we need to understand those three services.

341
00:30:39.130 --> 00:30:46.570
Most likely you will get an exotic question about ask us and we have differentiated between tightly

342
00:30:46.570 --> 00:30:48.520
coupled and loosely covered component.

343
00:30:48.730 --> 00:30:57.070
Remember loosely coupled architecture with identify how Amazon can be used and employed to decouple

344
00:30:57.070 --> 00:31:00.990
your infrastructure and also how you can employ Amazon as an asset.

345
00:31:01.150 --> 00:31:02.980
And you can also use Amazon.

346
00:31:02.980 --> 00:31:10.570
I'm a Q to link your on a firm in the center with a cloud infrastructure and.
