WEBVTT
1
00:00:00.060 --> 00:00:00.780
Welcome back.

2
00:00:01.020 --> 00:00:07.290
In this module, we are going to look to the will architected, the framework and the Amazon Web Services

3
00:00:07.290 --> 00:00:09.360
will architected the framework.

4
00:00:09.630 --> 00:00:17.820
Then we will look to the best practices for building solutions on the US and the IWC global infrastructure.

5
00:00:17.940 --> 00:00:24.900
By the end of this course you will have learned about all component in the IWC architecture and this

6
00:00:24.900 --> 00:00:29.120
will enable you to build a similar architecture showing here in the exam.

7
00:00:29.310 --> 00:00:36.030
You should also be able to construct your own solution architectures that are as large and robust as

8
00:00:36.030 --> 00:00:42.580
this exam that you will see this diagram repeated at the start of most modules in this course and less

9
00:00:42.690 --> 00:00:48.720
in each component in this diagram will be repeated as they are introduced in the course.

10
00:00:48.900 --> 00:00:51.440
So what is cloud architecting?

11
00:00:51.480 --> 00:00:58.140
Cloud architecture is the practice of applying this cloud characteristics to a solution that uses the

12
00:00:58.140 --> 00:01:05.160
cloud services and features to meet an organizational, technical needs and business requirements.

13
00:01:05.370 --> 00:01:10.350
A solution is similar to a blueprint for a building software system.

14
00:01:10.350 --> 00:01:14.400
Require architect to manage their size and complexity.

15
00:01:14.520 --> 00:01:21.210
The cloud architect engage with decision makers to identify the business goals and the capabilities

16
00:01:21.300 --> 00:01:22.890
that need improvement.

17
00:01:23.070 --> 00:01:28.620
Ensure alignment between technology deliverables of a solution and the business goals.

18
00:01:28.860 --> 00:01:35.520
Work with the delivery teams that are implementing the solution to ensure that the technology features

19
00:01:35.520 --> 00:01:36.810
are appropriate.

20
00:01:36.900 --> 00:01:38.730
The A.W. as well architected.

21
00:01:38.730 --> 00:01:45.090
The framework is designed to help you to build a more secure, high performing, resilient and efficient

22
00:01:45.090 --> 00:01:45.960
infrastructure.

23
00:01:46.050 --> 00:01:53.310
It provides a consistent approach to evaluate cloud architectures and guidance to help implement designs.

24
00:01:53.430 --> 00:02:01.200
It documents a set of foundation in the questions and best practices that enable you to understand if

25
00:02:01.200 --> 00:02:07.980
a specific architecture aligns well with the Cloud Vista practices and develop this framework.

26
00:02:07.980 --> 00:02:14.880
After reviewing thousands of customer architectures on natively, it's the five pillars of the will

27
00:02:14.880 --> 00:02:23.070
architecture, the framework of operational excellence, security, reliability, performance efficiency

28
00:02:23.070 --> 00:02:25.110
and cost optimization.

29
00:02:25.590 --> 00:02:32.460
In the security pillar, we address the ability to protect information systems and assets while delivering

30
00:02:32.460 --> 00:02:36.780
business value through the risk assessment and mitigation strategies.

31
00:02:37.080 --> 00:02:42.960
Your architecture will represent a much stronger security presence if you implement a strong identity

32
00:02:42.960 --> 00:02:49.620
foundation and enable traceability ability via cloud trial and apply security at all layers.

33
00:02:49.620 --> 00:02:57.930
Then you want to automate the security best practices and protect the data in transit and at rest in

34
00:02:57.930 --> 00:02:59.640
the operational excellence pillar.

35
00:02:59.940 --> 00:03:05.280
We want to look to the ability to run and monitor the system via, for example, cloud watch.

36
00:03:05.460 --> 00:03:12.150
And we want also to continuously improve supporting the processes and procedures in the reliability

37
00:03:12.150 --> 00:03:12.570
pillar.

38
00:03:12.720 --> 00:03:19.080
We want to recover too quickly from infrastructure or service disruption and we can be able to dynamically

39
00:03:19.080 --> 00:03:22.170
acquire computing resources to meet the demand.

40
00:03:22.170 --> 00:03:29.310
Then we should have a mitigation disruptions such as Misconfigurations and the transit network issues

41
00:03:29.310 --> 00:03:31.140
in the performance efficiency pillar.

42
00:03:31.140 --> 00:03:36.900
We want to choose efficient resources and maintain that efficiency as demand changes and we want to

43
00:03:36.930 --> 00:03:45.000
employ and implement advanced technologies and we want to also employ mechanical sympathy in the course

44
00:03:45.000 --> 00:03:45.930
optimization.

45
00:03:45.930 --> 00:03:52.320
We want to measure the efficiency of our system and software and eliminate any to the expense we want

46
00:03:52.320 --> 00:03:56.700
to consider using managed service over self managed service.

47
00:03:57.030 --> 00:04:02.250
If you would like help with designing a well architected solution, you can use the will architected

48
00:04:02.250 --> 00:04:02.790
tool.

49
00:04:02.790 --> 00:04:10.080
The Atrius Architected Tool is a self-service tool that provides you with an on demand access to current

50
00:04:11.040 --> 00:04:11.790
practices.

51
00:04:11.790 --> 00:04:17.850
These practices can help you to build secure, high performing, resilient and efficient application

52
00:04:17.850 --> 00:04:19.590
infrastructure on a table.

53
00:04:19.590 --> 00:04:26.160
US US will architected tool helps you to review the state of your workload and compare them to the latest

54
00:04:26.210 --> 00:04:28.170
A2'S Architecture Service to practice.

55
00:04:28.170 --> 00:04:34.080
You have access to the tool via the management console and you can define your workload and you can

56
00:04:34.080 --> 00:04:40.560
answer a series of questions in the area of operational excellence, security, reliability, performance

57
00:04:40.560 --> 00:04:43.320
efficiency and cost optimization.

58
00:04:43.320 --> 00:04:48.240
So what are the best practices for building solutions on of use?

59
00:04:48.300 --> 00:04:54.090
As you design a solution, think carefully about it tradeoffs so that you can select an optimal approach.

60
00:04:54.090 --> 00:04:59.160
For example, you might iterate consistency, durability and space for time and it.

61
00:04:59.280 --> 00:05:01.850
And see to deliver higher performance.

62
00:05:01.860 --> 00:05:06.180
Or you might prioritize the speed to market over cost.

63
00:05:06.360 --> 00:05:12.570
Trade offs can increase the cost and complexity of your architecture, so your design decisions should

64
00:05:12.570 --> 00:05:14.550
be based on empirical data.

65
00:05:14.670 --> 00:05:21.650
You might need to perform load testing to ensure that a measurable benefit is obtained in the performance.

66
00:05:21.660 --> 00:05:27.600
Or you might need to perform benchmarking to achieve the most cost optimal workload over time.

67
00:05:27.630 --> 00:05:33.420
When you evaluate performance related improvements, you will also want to consider how your architecture

68
00:05:33.420 --> 00:05:37.940
design choices will impact customer and workload efficiency.

69
00:05:37.950 --> 00:05:44.340
When you run your workload, in the end, you can scale your infrastructure quickly and dynamically

70
00:05:44.340 --> 00:05:45.600
using end or scale.

71
00:05:45.690 --> 00:05:51.380
This will make sure that you implement the scalability at every layer of your infrastructure.

72
00:05:51.390 --> 00:05:57.720
In this scenario that we can see here, when application server reach full capacity, users are prevented

73
00:05:57.720 --> 00:05:59.310
from accessing the application.

74
00:05:59.310 --> 00:06:07.710
In this case, in the ante pattern, the administrator must manually lunch a new server to meet those

75
00:06:07.710 --> 00:06:08.190
demand.

76
00:06:08.250 --> 00:06:14.700
This might take a few minutes for analysis to become available for use after its launch, which can

77
00:06:14.700 --> 00:06:18.870
increases the time that user cannot access the application.

78
00:06:18.870 --> 00:06:24.960
By enabling auto scaling, you can improve your design to anticipate the need for more capacity and

79
00:06:24.960 --> 00:06:27.810
deliver it before it is too late.

80
00:06:28.380 --> 00:06:35.550
The use of a built in monitoring and automation tool at virtually every layer of your infrastructure

81
00:06:36.000 --> 00:06:41.430
take advantage of this tool to ensure that your infrastructure can respond quickly to changes.

82
00:06:41.970 --> 00:06:48.810
You can also use those tools like Cloud Watch and Amazon easy to order scaling to detect and hasty resources

83
00:06:48.810 --> 00:06:52.080
and automate the launch of replacement sources.

84
00:06:52.410 --> 00:06:56.250
You can also be notified when resources allocations change.

85
00:06:56.580 --> 00:07:03.210
The best practices of treating resources as a disposal refers to the idea of thinking about your infrastructure

86
00:07:03.210 --> 00:07:05.980
as software instead of hardware.

87
00:07:06.000 --> 00:07:10.770
With hardware, it is easy to buy a more specific component than you need.

88
00:07:10.770 --> 00:07:16.770
So with hardware, it is easy to buy more specific components that you need so that you are prepared

89
00:07:16.770 --> 00:07:21.550
for the spikes in usage that is expensive and and inflexible.

90
00:07:21.570 --> 00:07:27.720
It is harder to upgrade because of the cost when you treat your resources as disposable, migrating

91
00:07:27.720 --> 00:07:32.340
between instances or other discrete resources is fairly straightforward.

92
00:07:32.400 --> 00:07:38.160
You can quickly respond to changes in capacity needs, upgrade applications and manage the underlying

93
00:07:38.160 --> 00:07:38.700
software.

94
00:07:38.760 --> 00:07:44.610
So additional infrastructure have chains of tightly integrated server, each with a specific purpose.

95
00:07:44.640 --> 00:07:51.900
The problem is that when one of these component or layers goes down, the disruption to the system can

96
00:07:51.900 --> 00:07:52.560
be fatal.

97
00:07:52.650 --> 00:07:55.800
It also make the scaling very difficult.

98
00:07:55.830 --> 00:08:03.540
If you add or remove servers at one layer, you must also connect every server on each connecting layer.

99
00:08:03.660 --> 00:08:08.510
So the example in the list demonstrate a collection of web and application server.

100
00:08:08.520 --> 00:08:13.530
As you can see, if one of the applications server goes down that tightly, coupled with server will

101
00:08:13.530 --> 00:08:19.530
be also down, which means you won't be able to fix only the application, but you have also to fix

102
00:08:19.530 --> 00:08:24.150
and maintain and configure both the application server and the set.

103
00:08:24.150 --> 00:08:30.480
With loose coupling, you can use many solution as a load balancer between the application and the web

104
00:08:30.480 --> 00:08:37.260
layer, and in this case you can change all these unhealthy instances by a healthy application server,

105
00:08:37.260 --> 00:08:42.210
and this will not affect the performance of your web server.

106
00:08:42.240 --> 00:08:45.960
The next best practice is design services, not servers.

107
00:08:46.200 --> 00:08:51.900
Although I mentioned elastic compute to cloud offers tremendous flexibility for designing setting up

108
00:08:51.900 --> 00:08:52.740
your solution.

109
00:08:52.740 --> 00:08:55.710
It shouldn't always be the first option.

110
00:08:55.710 --> 00:09:01.600
That is many other choices like containers or server list solution which can be more appropriate to

111
00:09:01.600 --> 00:09:02.520
your application.

112
00:09:02.520 --> 00:09:08.490
With a serverless solution and many services you don't need to provision, configure and manage an entire

113
00:09:08.490 --> 00:09:14.780
Amazon EC2 instances and with many solution that have a lower profile and are more performance cannot

114
00:09:14.790 --> 00:09:18.000
place server based solutions at a lower cost.

115
00:09:18.090 --> 00:09:25.710
We will describe a few example of a WAC Lambda and US similar queuing service, US and Amazon Dynamo

116
00:09:25.710 --> 00:09:27.990
DB and the elastic load balancing.

117
00:09:27.990 --> 00:09:31.560
And also we looked at the Amazon symbol email service.

118
00:09:31.690 --> 00:09:32.880
Amazon cooking.

119
00:09:33.270 --> 00:09:39.450
Choosing the right database solution is very important for your application in its traditional datacentres

120
00:09:39.450 --> 00:09:41.340
and on a premises in 30 minutes.

121
00:09:41.580 --> 00:09:47.760
Limits on available hardware and no syncing can constrain your choice of a data storage solution.

122
00:09:48.150 --> 00:09:53.700
Use the comments that you choose a data store based on your needs for your application invariant.

123
00:09:53.700 --> 00:09:57.690
Where possible, eliminate a single point of failure from your architecture.

124
00:09:57.690 --> 00:09:59.100
This does not mean that you must.

125
00:09:59.220 --> 00:10:04.380
Always duplicate every component depending on your downtime service level agreement, you can use an

126
00:10:04.380 --> 00:10:07.690
automated solution that only launch the component to win.

127
00:10:07.710 --> 00:10:13.770
Need a common way to avoid single points of failure is to create a secondary stand by the database server

128
00:10:13.770 --> 00:10:16.780
and replicate the data in a single and this method.

129
00:10:16.800 --> 00:10:22.220
This way, if the main database server goes offline, the secondary server can pick up the load.

130
00:10:22.320 --> 00:10:26.640
Cloud computing allows you to trade capital expense for variable expenses.

131
00:10:26.710 --> 00:10:32.760
Caution is a technique to make future request faster and reduce network throughput by temporarily storing

132
00:10:32.760 --> 00:10:39.810
data in an intermediary location between the requester and the permanent storage in the Antipater an

133
00:10:39.810 --> 00:10:40.410
example.

134
00:10:40.410 --> 00:10:45.750
No caching service is used when anyone requests a file from one of the Amazon.

135
00:10:45.750 --> 00:10:48.750
Similar story services as the three buckets.

136
00:10:48.750 --> 00:10:55.770
Each request takes the same amount of time to complete, and each request caused this in the best practice

137
00:10:55.770 --> 00:11:02.010
pattern in the infrastructure we use as Amazon account to the front in front of Amazon necessary to

138
00:11:02.010 --> 00:11:03.060
provide caching.

139
00:11:03.060 --> 00:11:07.350
In this scenario, the initial request checks for a file in Amazon cloud front.

140
00:11:07.350 --> 00:11:12.660
If this is not found, click on different request to file from Amazon three and in iCloud different

141
00:11:12.750 --> 00:11:19.560
stores, a copy of the file at an entry location close to the user and sends a copy to the user who

142
00:11:19.560 --> 00:11:20.520
made the request.

143
00:11:20.520 --> 00:11:27.510
Subsequent requests for the file are retrieved from the now closer location to the user.

144
00:11:27.630 --> 00:11:34.470
This reduces latency and costs because after the first request you no longer pay for the file to be

145
00:11:34.470 --> 00:11:36.930
transformed out of Amazon.

146
00:11:37.050 --> 00:11:43.650
S3 Security is not only about getting through the outer boundary of your infrastructure, it is also

147
00:11:43.650 --> 00:11:49.770
involves ensuring that your individual environments and their component are secured from each other.

148
00:11:49.800 --> 00:11:56.550
For example, in Amazon EC2, you can create security groups that allow you determine which port in

149
00:11:56.550 --> 00:11:58.860
your innocence can send out of the traffic.

150
00:11:58.860 --> 00:12:01.980
Now let us look to the aid of U.S. global infrastructure.

151
00:12:01.980 --> 00:12:08.700
The ADA as a global infrastructure is built around reaching a region and present a physical geographical

152
00:12:08.700 --> 00:12:12.150
location with one or more availability zone.

153
00:12:12.150 --> 00:12:20.580
And availability zone is basically a logical isolation of the second communication between regions use

154
00:12:20.580 --> 00:12:23.040
either as backbone network infrastructure.

155
00:12:23.040 --> 00:12:30.060
You can enable and control data replication across regions and availability zone or each of its zone

156
00:12:30.330 --> 00:12:37.120
is made up of one or more data centers designed for fault isolation, interconnected with other opportunities

157
00:12:37.120 --> 00:12:43.500
zone in a region using a high speed private link for certain services, you can choose your activity

158
00:12:43.500 --> 00:12:51.060
zone and actively as recommends replicating your data across multiple availability zone for data resilience.

159
00:12:51.210 --> 00:12:57.650
There is also a WAC local zone which enables you to run a latency sensitive portion of applications

160
00:12:57.720 --> 00:13:05.670
closer to end users and resources in a specific geography are an extension of an Amazon NWS region where

161
00:13:05.670 --> 00:13:10.140
you can use ATV as services in edge graphical proximity to end user.

162
00:13:10.260 --> 00:13:16.500
This will let you place items, computer storage database and other select services closer to a large

163
00:13:16.500 --> 00:13:21.870
population industry and it grows local zone are managed and supported by the US.

164
00:13:21.870 --> 00:13:29.940
Currently only we have those engineers easily as local zone which available by invitation intervals.

165
00:13:29.940 --> 00:13:34.440
Data center are where the data resides and data processing happen, added.

166
00:13:34.470 --> 00:13:37.260
The center typically has tens of thousands of server.

167
00:13:37.260 --> 00:13:45.660
All data are online instead of in custom A.W. as custom network equipment are stored in those data center

168
00:13:45.690 --> 00:13:48.450
to deliver content to end user with low latency.

169
00:13:48.450 --> 00:13:56.160
Amazon Cloud often chooses a global network that includes over 200 point of presence that are compromised

170
00:13:56.370 --> 00:13:57.810
of edge locations.

171
00:13:57.810 --> 00:13:59.790
Original caches.

172
00:13:59.790 --> 00:14:05.700
Edge locations are located in North America, Europe, Asia, Australia, South American, Middle East,

173
00:14:05.970 --> 00:14:07.500
Africa and China.

174
00:14:07.590 --> 00:14:15.390
Those locations support services like Amazon City three and Amazon to cloud different regional IT caches

175
00:14:15.390 --> 00:14:21.660
are used by default with amounts on the fronts they are used when we have content that is not accessed

176
00:14:21.680 --> 00:14:25.620
infrequently enough to remain in an edge cache.

177
00:14:25.770 --> 00:14:32.730
Regional edge caches absorb these content and provide an alternative to fetching the content from the

178
00:14:32.730 --> 00:14:34.020
origin server.

179
00:14:34.170 --> 00:14:37.770
In this module we learned how to define a cloud architecture.

180
00:14:37.780 --> 00:14:42.160
Describe how to design and evaluate architectures using the will architects.

181
00:14:42.190 --> 00:14:46.980
The framework explained the best practices for building solutions on NWS.

182
00:14:47.280 --> 00:14:53.100
Describe how to make informed decision on where to place US resources.

183
00:14:53.160 --> 00:14:58.560
There is additional resources if you want to learn more about the will, the framework that you can

184
00:14:58.560 --> 00:14:58.950
visit.

185
00:14:59.250 --> 00:15:05.670
We as a global infrastructure and Italy as well architected a framework like PayPal.

186
00:15:06.150 --> 00:15:09.150
Thank you for seeing this video and see you in the next one.
