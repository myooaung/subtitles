1
00:00:00,060 --> 00:00:07,230
You could also use what we call an individual security token service or a WAC as these.

2
00:00:07,350 --> 00:00:08,940
So what is a WAC?

3
00:00:09,660 --> 00:00:17,370
It is a web service that enables you as a to have an IM user, federated user or application to assume

4
00:00:17,370 --> 00:00:19,710
an I am role that they want.

5
00:00:19,710 --> 00:00:28,470
When you use the I assume role operation for that as user or role of that WAC as this API, you will

6
00:00:28,470 --> 00:00:36,090
invoke that API call from the status and the Web service returns to you the temporary limited privilege

7
00:00:36,090 --> 00:00:43,920
credentials that were requested by the IM user or the user that was authenticated through the Federation.

8
00:00:43,950 --> 00:00:50,640
The example policy allows an IM user to assume any role that is defined in device account number as

9
00:00:50,640 --> 00:00:56,730
long as the role name starts with, for example, this here in this slide.

10
00:00:56,820 --> 00:01:00,150
You can also have a role based access control.

11
00:01:00,160 --> 00:01:07,020
You can consider two different approaches to access control, the role based access control and attribute

12
00:01:07,020 --> 00:01:08,430
based access control.

13
00:01:08,430 --> 00:01:10,020
And these are really important.

14
00:01:10,020 --> 00:01:18,310
For example, in role based access control you use historically on a premises and in the cloud users,

15
00:01:18,330 --> 00:01:23,970
you want to grant explicit access with a set of preconfigured permission.

16
00:01:23,970 --> 00:01:31,380
So for example, if you have a database administrator, network administrator and developers, you have

17
00:01:31,380 --> 00:01:34,860
one or more network administrators who are also developers.

18
00:01:34,860 --> 00:01:38,670
You would not create any new policy to grant those permission.

19
00:01:38,930 --> 00:01:43,410
Instead, you can add those users to both roles.

20
00:01:43,500 --> 00:01:47,320
This approach is familiar and has many advantages.

21
00:01:47,370 --> 00:01:53,790
However, the problem is that the poor the person who maintains the permissions in this model might

22
00:01:53,790 --> 00:02:01,710
find it that they must consistently update the permissions files to add access to asserting role each

23
00:02:01,740 --> 00:02:05,220
time any you resources is a create.

24
00:02:05,460 --> 00:02:11,430
Before you consider the second approach to permissions control, you should understand the tagging feature

25
00:02:11,430 --> 00:02:19,920
in a WAC enables its customer to assign a meta data to their ideally as resources and identities in

26
00:02:19,920 --> 00:02:21,690
the form of tax.

27
00:02:21,690 --> 00:02:28,470
Each tag is SMB label that consists of a customer defined key and an optional value.

28
00:02:28,500 --> 00:02:34,010
Tags can make it easier to manage, search for or even filter those resources.

29
00:02:34,020 --> 00:02:36,210
Tax have many practical uses.

30
00:02:36,210 --> 00:02:42,510
For example, you can create technical tags to identify that a resource is a web server, part of a

31
00:02:42,510 --> 00:02:48,570
specific project, part of a specific environment like testing, development or production.

32
00:02:48,660 --> 00:02:55,350
You can also create business tags to identify the department or the call center that this resource should

33
00:02:55,350 --> 00:02:56,400
be built to.

34
00:02:56,820 --> 00:03:05,190
You can also set security tags such as an in an identifier for a specific data confidentiality level

35
00:03:05,460 --> 00:03:07,530
that are resource supports.

36
00:03:07,590 --> 00:03:16,260
You can create up to taxpayer resources and these resources, each tag key must be unique and each tacky

37
00:03:16,410 --> 00:03:18,720
can have only one value tag.

38
00:03:18,720 --> 00:03:21,840
Keys and values are case sensitive.

39
00:03:22,320 --> 00:03:29,250
Now let us look to attribute based access control so we know now that we can tag that resources.

40
00:03:29,340 --> 00:03:36,840
So let us now understand how attribute based access control will work with attribute based access control

41
00:03:36,870 --> 00:03:43,620
you can use to create a general permissions rules that is scaled with your organization.

42
00:03:43,740 --> 00:03:51,150
And I am users have attributes that you created and applied to such as one or more tags with resources

43
00:03:51,150 --> 00:03:58,290
also have an attributes like matching that tags that you also applied to the resources in this approach,

44
00:03:58,290 --> 00:04:04,380
writing permissions is very straightforward the policy checks to see if an attribute that is applied

45
00:04:04,380 --> 00:04:10,230
to an employer is also applied to the resources that they want to access.

46
00:04:10,590 --> 00:04:17,910
When you create new immune cells and in new account resources, you apply the correct tags to the users

47
00:04:17,910 --> 00:04:20,380
and to the resources.

48
00:04:20,640 --> 00:04:27,540
So this is an example of applying an attribute based access policy to your organization.

49
00:04:27,540 --> 00:04:32,750
In the first step is to create an identity such an item user or an email.

50
00:04:32,760 --> 00:04:39,000
All these identities must have the attributes that will be used for access control purposes.

51
00:04:39,180 --> 00:04:46,080
For example, you can apply the team developers and the project unique contact to the manager user required

52
00:04:46,080 --> 00:04:48,180
attributes for a new resources.

53
00:04:48,180 --> 00:04:50,790
You should create policies that enforce the rule.

54
00:04:50,820 --> 00:04:57,150
You could require that a project attribute and a team attribute are applied to any resources when it

55
00:04:57,150 --> 00:04:58,350
is created.

56
00:04:58,410 --> 00:04:59,940
Configure Access Permissions.

57
00:05:00,020 --> 00:05:01,310
Based on the attributes.

58
00:05:01,340 --> 00:05:07,360
For example, see that an employer has the project equal unicorn and team equals disclose protect.

59
00:05:07,370 --> 00:05:14,120
If that you are trying to access a resource that has matching value for the same two tags, then the

60
00:05:14,120 --> 00:05:16,250
policy will allow the access.

61
00:05:16,250 --> 00:05:21,290
Otherwise the policy will deny access to your configuration.

62
00:05:21,290 --> 00:05:25,850
For example, you could try to create an Amazon Aurora database, in instance, without the required

63
00:05:25,850 --> 00:05:26,240
tag.

64
00:05:26,510 --> 00:05:28,790
In this case, the attempt should fail.

65
00:05:29,030 --> 00:05:34,670
So I creating a database instance again with the required tag, and in this time you should be able

66
00:05:34,670 --> 00:05:36,380
to create the resource successfully.

67
00:05:36,590 --> 00:05:42,380
And you could trying to access the database instance as that Maddie used them.

68
00:05:42,380 --> 00:05:44,750
Your access should succeed.

69
00:05:44,780 --> 00:05:52,010
Okay, so with extending authenticated user, you can use identity federation because it are support

70
00:05:52,010 --> 00:05:59,360
identity federation for delegated access to the WAC management console or the API Identity Federation

71
00:05:59,360 --> 00:06:07,610
or external identities are granted secure access to the resources in your account without needing to

72
00:06:07,610 --> 00:06:09,290
create an item user.

73
00:06:09,320 --> 00:06:11,810
There is four primary steps that is needed.

74
00:06:11,810 --> 00:06:17,900
When you use an identity provider to create a temporary credential for a user or application.

75
00:06:18,290 --> 00:06:22,550
Identity Federation can be accomplished in one of three ways.

76
00:06:22,550 --> 00:06:29,320
The first way is to use a corporate Microsoft Active Directory, for example, or a custom identity

77
00:06:29,330 --> 00:06:30,620
broker application.

78
00:06:30,620 --> 00:06:35,210
In this case, each option of those will use a WAC as tests.

79
00:06:35,330 --> 00:06:41,480
The second approach is to create an integration that uses security assertion, markup language.

80
00:06:41,480 --> 00:06:49,580
And this will be a third approach where you can use a web identity providers such as Amazon, Cognita,

81
00:06:49,730 --> 00:06:52,760
Facebook, Microsoft, Google and so on.

82
00:06:53,300 --> 00:06:55,910
How you can accomplish identity federation.

83
00:06:55,910 --> 00:07:00,350
Using an identity broker in the process include the following steps.

84
00:07:00,350 --> 00:07:04,160
I use that to access an application and the user interface there.

85
00:07:04,160 --> 00:07:06,800
Use an idea and password and submit them.

86
00:07:06,830 --> 00:07:12,350
Then the identity broker received the authentication request and then communicates with the corporate

87
00:07:12,350 --> 00:07:20,390
identity store, which might be a microsoft Active Directory or a lightweight directory like an L dub

88
00:07:20,540 --> 00:07:21,110
server.

89
00:07:21,260 --> 00:07:27,350
If the S indication request is successful, the identity broker make a request to establish a status.

90
00:07:27,560 --> 00:07:34,490
And this is why I told you guys go and make sure to understand the steps and how it can give you a temporary

91
00:07:34,700 --> 00:07:38,030
security credentials to access the application.

92
00:07:38,060 --> 00:07:44,570
The user application received those temporary individual security credentials and redirects them to

93
00:07:44,570 --> 00:07:46,430
the address management console.

94
00:07:46,460 --> 00:07:53,690
The user did not need to sign in directly and NWC with a different set of credentials insisted the process

95
00:07:53,690 --> 00:08:02,480
only have a single sign on implementation or ISO because we use a single sign on and this single sign

96
00:08:02,480 --> 00:08:05,630
on is recognized by the identity broker.

97
00:08:05,660 --> 00:08:11,990
The user application could also use the same temporary address security credentials to access the address

98
00:08:12,110 --> 00:08:15,290
services if the IAM policy document allow it.

99
00:08:15,530 --> 00:08:21,470
If you want to integrate it with community session markup language, then the process involving the

100
00:08:21,470 --> 00:08:27,950
following a step a user in your organization navigates to the an internal portal in your network.

101
00:08:27,950 --> 00:08:36,920
The portal also function as the IDP, the identity broker, which can handle the as a as a trust between

102
00:08:36,920 --> 00:08:40,850
your organization and the identity broker.

103
00:08:41,000 --> 00:08:48,050
In this case, I authenticate the user against the identity store, which might be an elderly observer

104
00:08:48,050 --> 00:08:50,000
or Microsoft Active Directory.

105
00:08:50,000 --> 00:08:58,790
The portal received the authentication responses as an as a assertion from the identity broker.

106
00:08:58,790 --> 00:09:06,050
The client forced the SML assertion under the assigned endpoint for us and and the endpoint communicates

107
00:09:06,050 --> 00:09:13,760
with us this and it invokes the assumed role with SC al operation.

108
00:09:14,060 --> 00:09:21,980
And normally they ask about this role and how exactly a third party with an open a standard can exchange

109
00:09:21,980 --> 00:09:28,610
authentication and authorization data between an identity data broker and a W.

110
00:09:28,640 --> 00:09:29,780
S services.

111
00:09:29,780 --> 00:09:31,010
In the last step.

112
00:09:31,010 --> 00:09:36,980
In step number five, the client received a temporary element of security credentials, and the client

113
00:09:36,980 --> 00:09:45,120
is redirected to the address management console and is also authenticated with the temporary entry as

114
00:09:45,140 --> 00:09:46,850
security credentials.

115
00:09:46,880 --> 00:09:54,080
Now you might be saying both identity federation using S.M. L and Identity Federation with an identity

116
00:09:54,080 --> 00:09:58,280
broker sounds very complicated and very hard to implement.

117
00:09:58,280 --> 00:09:59,720
I can agree with you.

118
00:09:59,820 --> 00:10:03,060
And the solution for that is Amazon need.

119
00:10:03,390 --> 00:10:10,200
Amazon is a fully managed service is to provide us with authentication, authorization and user management

120
00:10:10,380 --> 00:10:13,050
for both web and mobile application.

121
00:10:13,470 --> 00:10:20,400
Amazon Community provides us with Rip Identity Federation, and it can be used to as the identity broker

122
00:10:20,400 --> 00:10:29,730
that supports IDPs that are compatible with Open ID connect, and they have a federated identities integration.

123
00:10:29,940 --> 00:10:37,320
So you can use identity provider like Amazon, Facebook, Google or any third party as well.

124
00:10:37,590 --> 00:10:39,700
You create user pools.

125
00:10:39,720 --> 00:10:46,410
So the two main component of Amazon communities are the user pool and the identity pool, a user pool.

126
00:10:46,410 --> 00:10:48,840
And this is very important for you guys to understand.

127
00:10:48,900 --> 00:10:53,730
A user pool is a user directory in Amazon community, it will be in NWC.

128
00:10:53,760 --> 00:11:00,990
Users can sign in to a web or a mobile application using Amazon Community and they can also federate

129
00:11:00,990 --> 00:11:09,630
through a third party identity federation, a broker, and in this case, all members of the user pool

130
00:11:09,780 --> 00:11:15,120
have a directory profile that can be accessed through an SDK.

131
00:11:15,120 --> 00:11:22,800
Now the identity pools enables the creation of a unique identities and a permissions assignments for

132
00:11:22,830 --> 00:11:23,850
those users.

133
00:11:23,880 --> 00:11:31,470
With an identity pool, users can obtain temporary credentials to access data, services or resources.

134
00:11:31,770 --> 00:11:38,580
Identity pools can communicate with Amazon, incognito users pools, social sign in with Facebook,

135
00:11:38,610 --> 00:11:41,190
Google and log in with Amazon.

136
00:11:41,460 --> 00:11:49,320
And even you can use an open ID, which is an open source framework for authentication and authorization

137
00:11:49,560 --> 00:11:52,980
to connect to your application provider.

138
00:11:53,430 --> 00:11:59,430
So this is an example how you can employ Amazon Cognita In this scenario, the goal is to authenticate

139
00:11:59,430 --> 00:12:05,130
a user using Amazon Cognita and then to grant that user access to another AWG service.

140
00:12:05,130 --> 00:12:12,480
In the first step, the user signs in through an Amazon Incognito user pool and after they have been

141
00:12:12,480 --> 00:12:16,800
successfully authenticated, receive user pool token.

142
00:12:17,040 --> 00:12:22,890
The app exchanges the user pool token for elderly as credentials a through an Amazon community identity

143
00:12:22,890 --> 00:12:23,310
pool.

144
00:12:23,310 --> 00:12:30,540
And finally, the app user uses those credentials to access other individuals services.
