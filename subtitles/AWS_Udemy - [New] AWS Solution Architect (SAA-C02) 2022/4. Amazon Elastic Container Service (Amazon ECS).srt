1
00:00:00,120 --> 00:00:02,700
Now AWB support Containerisation.

2
00:00:02,880 --> 00:00:05,370
But first, what is a container?

3
00:00:05,460 --> 00:00:12,840
A container or a method of operating system virtualization that enables you to run an application and

4
00:00:12,840 --> 00:00:15,680
its dependencies in a resource?

5
00:00:15,690 --> 00:00:17,220
Isolated the process.

6
00:00:17,220 --> 00:00:25,650
By using container, you can easily package an application code configuration dependencies into an easy

7
00:00:25,650 --> 00:00:34,290
to use building block that deliver the environment and consistency and operational efficiency and developer

8
00:00:34,290 --> 00:00:36,600
productivity and vision control.

9
00:00:36,960 --> 00:00:43,350
So in enterprise we have multiple container services and they are supported Docker.

10
00:00:43,370 --> 00:00:45,360
But what is Docker?

11
00:00:45,390 --> 00:00:51,330
Docker is a software platform that packages software such as application into containers.

12
00:00:51,750 --> 00:00:59,130
Docker is installed in each server that will host the containers and it provides simple comment that

13
00:00:59,130 --> 00:01:03,450
you can use to build, start or stop a container.

14
00:01:03,510 --> 00:01:09,900
Docker is best suited as a solution when you want to standardize the environment, reduce conflicts

15
00:01:09,900 --> 00:01:14,640
between languages, stack and versions, and use containers as the service.

16
00:01:14,910 --> 00:01:22,830
You can run microservices using a standardized code deployment and require a portability for data processing

17
00:01:22,830 --> 00:01:23,790
in a WAC.

18
00:01:24,060 --> 00:01:31,350
There is multiple services that support containerization and the first one is Amazon Elastic Container

19
00:01:31,350 --> 00:01:34,470
Services, as we are going to see in the next demo.

20
00:01:34,830 --> 00:01:42,420
It gives us the ability to manage our container and you can launch one or more a W as easy to in instances

21
00:01:42,660 --> 00:01:45,880
and you will install Docker engine in each instance.

22
00:01:45,900 --> 00:01:52,620
Then you will use the Amazon Elastic Container Service as a highly scalable, high performance container

23
00:01:52,620 --> 00:02:00,390
management service that supports Docker containers and enables you to easily run your application on

24
00:02:00,390 --> 00:02:02,670
a manage the cluster of Amazon.

25
00:02:02,940 --> 00:02:10,140
Easy to instances in Amazon Elastic Container Service, we can launch up to tens of thousands of Docker

26
00:02:10,140 --> 00:02:15,330
containers and second monitor their performance and manage their estate.

27
00:02:15,630 --> 00:02:23,670
And we can also casual containers by using a built in casual or a third party scheduler, for example,

28
00:02:23,670 --> 00:02:27,370
like Apache, Ms. OS or Blocks.

29
00:02:27,420 --> 00:02:34,590
There is also Amazon Copper, an API service which support and open source copper NATI software for

30
00:02:34,590 --> 00:02:36,360
container orchestration.

31
00:02:36,690 --> 00:02:43,650
Copper Nati can work with many of containerisation technology, including Docker because it is very

32
00:02:43,650 --> 00:02:47,310
popular in the industry and it is an open source project.

33
00:02:47,670 --> 00:02:51,010
A large community of developers are using Copper Natty.

34
00:02:51,030 --> 00:02:56,790
So Copper Natty enable us to build and deploy and manage the application at scale.

35
00:02:56,820 --> 00:03:01,110
For this reason, we have the ADA as Kubernetes service.

36
00:03:01,290 --> 00:03:09,060
So you can look at your application as a set of containerization that you need to manage in the cluster

37
00:03:09,450 --> 00:03:17,280
with Amazon, Elastic Copper, Natty Service, you can manage those Kubernetes application and Docker

38
00:03:17,280 --> 00:03:24,320
containers as a cluster Amazon Elastic Container Service automatically manage the availability and the

39
00:03:24,330 --> 00:03:30,870
scalability of the cluster nodes that are responsible for starting and stopping containers.

40
00:03:31,170 --> 00:03:34,740
You can schedule containers on a virtual machine.

41
00:03:34,980 --> 00:03:38,730
You can also store cluster data and other tasks.

42
00:03:38,760 --> 00:03:45,510
The last thing is the Amazon Elastic Container Registry, which is very similar to Docker Hub with Amazon

43
00:03:45,510 --> 00:03:47,160
Elastic Container Registry.

44
00:03:47,160 --> 00:03:54,660
It is a fully managed Docker container registry that make it easy for you to store, manage and deploy

45
00:03:54,660 --> 00:03:56,310
Docker container images.

46
00:03:56,610 --> 00:04:02,970
It is fully integrated with Amazon Elastic Container Service where you can store, run and manage those

47
00:04:02,970 --> 00:04:10,260
container images for your application and you can specify the repository and the task definition that

48
00:04:10,260 --> 00:04:11,130
you want to use.

49
00:04:11,140 --> 00:04:19,230
In the next demo, we are going to explain each of those three component to support containerized application.

50
00:04:21,180 --> 00:04:24,410
So let us look to the Elastic Container Service.

51
00:04:24,420 --> 00:04:30,270
So when you go to the item use and you look for elastic container service or you select it from the

52
00:04:30,270 --> 00:04:33,490
menu, this is will take you to the elastic container.

53
00:04:33,490 --> 00:04:40,020
I've said this and we can see here we have Amazon, it has a container service cluster task definition

54
00:04:40,320 --> 00:04:43,470
and this is where we can create the elastic copper that is service.

55
00:04:43,740 --> 00:04:51,540
And this is the Amazon Elastic Container Registry Service, which is very similar to Docker Hub, which

56
00:04:51,540 --> 00:04:58,170
is a very popular container registry where you can put your images and these images will be available

57
00:04:58,530 --> 00:04:59,940
for the community.

58
00:04:59,940 --> 00:05:06,420
Now in Amazon Elastic Container Service, the first step is to create a task definition.

59
00:05:06,420 --> 00:05:12,420
So when you go to task definition and you click on it, create a new task, you have to select whether

60
00:05:12,420 --> 00:05:18,900
you are going to run it in a gate, which is an enterprise managed infrastructure and it is a serverless

61
00:05:18,900 --> 00:05:28,830
computing or an Amazon managed elastic container said this easy to select for this demo Amazon two and

62
00:05:28,830 --> 00:05:30,360
then we click on the next.

63
00:05:30,450 --> 00:05:33,390
So for task it is called this first task.

64
00:05:33,390 --> 00:05:37,620
We don't have any role or any network mode that we need to worry about.

65
00:05:37,950 --> 00:05:40,680
All we need to do is to add a container.

66
00:05:41,100 --> 00:05:47,580
You have now two options whether you add the container from Docker hub like WordPress this WordPress

67
00:05:47,580 --> 00:05:53,940
here, or you can basically add another service, let's say in Docker to help you want to run engine

68
00:05:53,940 --> 00:05:57,990
X, so let us now run MDX in container settings.

69
00:05:57,990 --> 00:06:03,300
You know, if you are familiar with Docker, you can pull this image and you run it as a container in

70
00:06:03,300 --> 00:06:03,870
your machine.

71
00:06:03,870 --> 00:06:11,970
But in this case here, I'm just going to run it as a test in container services in either these.

72
00:06:12,000 --> 00:06:15,750
So let me call this engine and you need to pass the image.

73
00:06:16,140 --> 00:06:23,280
Now, the image in this case is going to be engine X and this is will be the latest and is going to

74
00:06:23,280 --> 00:06:26,640
get get me the latest image of engine.

75
00:06:27,000 --> 00:06:33,510
You can specify hard limit like for example, 102 or 256 megabyte of memory.

76
00:06:33,780 --> 00:06:39,270
You can also do port mapping between the host port and the container port like port 80.

77
00:06:39,600 --> 00:06:46,590
You can specify a health check, you can specify an environment variables, and furthermore, you can

78
00:06:46,590 --> 00:06:52,050
define the whole container using JSON format, which is the most common way.

79
00:06:52,350 --> 00:07:00,630
When you want to configure, for example, a task in the U.S., you better configure it as a JSON formatted

80
00:07:01,020 --> 00:07:01,470
task.

81
00:07:01,590 --> 00:07:08,690
So in this stage, we managed to create a task and the next step we need to have the family of the task.

82
00:07:08,710 --> 00:07:10,200
Now, the tasks family.

83
00:07:10,200 --> 00:07:14,100
In this case we are going to put this container.

84
00:07:14,220 --> 00:07:20,850
If you notice here, we are going to put this container in elastic container service so you could go

85
00:07:20,850 --> 00:07:27,930
back to the engine and you specify what exactly you want to run in this task.

86
00:07:28,410 --> 00:07:36,240
So now I created my first task and the next thing is I'm going to create now a cluster to create a cluster

87
00:07:36,240 --> 00:07:36,810
in Amazon.

88
00:07:36,820 --> 00:07:41,010
And as a container service you could go to the clusters and create a cluster.

89
00:07:41,010 --> 00:07:46,560
You could go also to the get started, which can give you a tutorial of how you can create a sample

90
00:07:46,560 --> 00:07:52,560
app or engine, whether you want it to be in elastic container service or FortiGate.

91
00:07:52,650 --> 00:07:58,260
Now in my case, because I have an already a task that I already define, I want to click on it, create

92
00:07:58,260 --> 00:08:06,870
a cluster and the option here we could create and it working only or we could create an easy to Linux

93
00:08:06,870 --> 00:08:09,150
and it working or easy to add windows.

94
00:08:09,150 --> 00:08:14,490
In our case we are going to select Easy to Linux Networking click next.

95
00:08:14,490 --> 00:08:21,120
I will call this my first cluster and I want to run it on an demand or on a supporting instance.

96
00:08:21,120 --> 00:08:27,450
I will keep it On-Demand and from the instance type, I need to select the T two micro because these

97
00:08:27,450 --> 00:08:28,860
are the three tier one.

98
00:08:28,980 --> 00:08:36,840
So T two micro is going to be more than enough number of instances here I will select one and the size

99
00:08:36,840 --> 00:08:38,400
is going to be the root.

100
00:08:38,400 --> 00:08:40,800
EBS volume is 30 gigabytes.

101
00:08:40,800 --> 00:08:49,060
I don't need any SSL key and in the VPC we keep this to the default with elastic container.

102
00:08:49,060 --> 00:08:52,920
I've said this will create a new virtual private now and then.

103
00:08:52,920 --> 00:09:01,980
In the container instance, I am I to specify if I have a specific I am I want to pass now click on

104
00:09:02,040 --> 00:09:09,360
create and this is need and I am role which is the lab role here and I'm going to click on to create.

105
00:09:10,230 --> 00:09:16,050
So this is going to create the cluster and this is will take a few minutes for creating and launching

106
00:09:16,050 --> 00:09:20,610
the Elastic Container Service and the EC2 instance you could go.

107
00:09:20,640 --> 00:09:26,530
Go back now to your services or you open the elastic container service and then you tap.

108
00:09:26,580 --> 00:09:35,790
And here you can see I have previously created a cluster and this cluster is basically running on FortiGate.

109
00:09:36,150 --> 00:09:42,990
So I could basically run my same task, which is endemic in this FortiGate cluster.

110
00:09:43,260 --> 00:09:45,140
So let me show you how to do that.

111
00:09:45,150 --> 00:09:49,290
Once I have my elastic, elastic container service ready.

112
00:09:49,920 --> 00:09:51,900
So I'm going to run my first task.

113
00:09:51,900 --> 00:09:56,250
That is not a visioning and all I need to do is just to run that task.

114
00:09:56,400 --> 00:10:00,420
I have to select the last type and this is going to be Linux.

115
00:10:01,080 --> 00:10:07,740
You could go to the first task itself and create from it a modification.

116
00:10:07,740 --> 00:10:14,580
So you can basically copy a new version of it and you can make this elastic container service to be

117
00:10:14,580 --> 00:10:18,210
running in gates and in Linux operating system.

118
00:10:18,210 --> 00:10:22,530
And don't forget to have passed the correct role.

119
00:10:22,530 --> 00:10:30,540
Now remember here we are going to have version two, which is the one we are going to run in Floodgate

120
00:10:30,540 --> 00:10:36,930
and version one we are going to run in and I will specify the memory, the minimum CPU.

121
00:10:36,930 --> 00:10:45,810
And then here I need to specify the mapping of my port and here I just need to expose post eight because

122
00:10:45,810 --> 00:10:47,670
engine is working at both ends.

123
00:10:47,910 --> 00:10:52,230
So now first task three is going to run in my farm gate cluster.

124
00:10:52,620 --> 00:10:59,280
So I'm going to go to the default in the task and I will run as a new task, make sure this is a three

125
00:10:59,280 --> 00:11:01,470
and I need number of tasks here.

126
00:11:01,470 --> 00:11:08,820
One I could put here as long as I need as many as I need, this is going to be the default to cluster

127
00:11:08,820 --> 00:11:10,710
and then I will run the task.

128
00:11:11,190 --> 00:11:14,130
As time is floodgate, I have a task.

129
00:11:14,640 --> 00:11:24,180
This is Linux and the cluster VPC is going to be this VPC and this subnet and this subnet and the security

130
00:11:24,180 --> 00:11:24,540
group.

131
00:11:24,540 --> 00:11:30,600
I could edit the security group and I enable port 80 and then I'm on the task.

132
00:11:30,960 --> 00:11:37,800
So the task will be running now and you will see after a while that this task is going to be run as

133
00:11:37,800 --> 00:11:40,140
a service in the target.

134
00:11:40,320 --> 00:11:45,810
It was you go back to cluster, leave this pending here, go back to the cluster and go to the first

135
00:11:45,810 --> 00:11:46,380
cluster.

136
00:11:46,950 --> 00:11:49,950
No micro cluster is really I could go now.

137
00:11:49,950 --> 00:11:57,960
I run my elastic container service, but this time I will put version two and this will be running at

138
00:11:57,960 --> 00:11:58,410
task.

139
00:11:58,530 --> 00:12:00,960
As you can see here, it is not running.

140
00:12:00,990 --> 00:12:08,580
So I could look to the task definition and I will find that the MDX is running at this port.

141
00:12:08,580 --> 00:12:15,720
So if I opened this port I could see now this is welcome to Engine X and this is running from elastic

142
00:12:15,720 --> 00:12:16,260
container.

143
00:12:16,260 --> 00:12:23,370
I've said this, if you go back to my default, which is the fog gate, you will find that my task is

144
00:12:23,370 --> 00:12:24,270
also running.

145
00:12:24,480 --> 00:12:27,600
But this time it is task version three.

146
00:12:27,840 --> 00:12:36,120
If I select it, this is will give me a public IP address and this public IP address and it is give

147
00:12:36,120 --> 00:12:37,650
me a public IP address.

148
00:12:37,650 --> 00:12:43,440
And if I open this public address at Port 80, I should be able to see MDX.
