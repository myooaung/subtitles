WEBVTT
1
00:00:00.030 --> 00:00:04.470
So in this class we are going to look to modules in automating your architecture.

2
00:00:04.470 --> 00:00:10.200
And in this particular section of this module, we are going to look to the architecture mean for the

3
00:00:10.200 --> 00:00:10.680
caffee.

4
00:00:10.680 --> 00:00:16.710
We understand now that the cafe has locations in multiple countries and they must start automating to

5
00:00:16.710 --> 00:00:18.510
keep their business growing.

6
00:00:18.510 --> 00:00:24.660
Their organization now has many different architectures and needs a way to deploy, manage and update

7
00:00:24.660 --> 00:00:24.960
them.

8
00:00:24.960 --> 00:00:32.820
They also like to have separate dev and production embodiment that rely on them to automate the process

9
00:00:32.820 --> 00:00:36.960
in terms of configuration and modification and deployment.

10
00:00:36.960 --> 00:00:42.270
They realized that they must have starter to meeting to support continuous growth, and their organization

11
00:00:42.270 --> 00:00:45.880
has different locations and different architecture needs.

12
00:00:45.900 --> 00:00:52.470
In order to do so, they want to achieve high level of automation in order to consistently deploy,

13
00:00:52.470 --> 00:00:54.360
manage, update these architectures.

14
00:00:54.360 --> 00:01:00.450
So users look to the resources that we have in the US in order to automate the process in a manual a

15
00:01:00.460 --> 00:01:07.230
process, it takes significant time and energy to build a large scale computing and very many organizations

16
00:01:07.230 --> 00:01:13.620
will start using a device by creating a similar storage service, like a three launching Amazon Elastic

17
00:01:13.620 --> 00:01:17.280
Compute Cloud, easy to and running a web server on it.

18
00:01:17.280 --> 00:01:25.440
Then over time they will be able to manually add more resources, remove resources based on their capacity

19
00:01:25.440 --> 00:01:25.710
need.

20
00:01:25.740 --> 00:01:31.200
However, it can become very challenging to manually manage and maintaining these resources.

21
00:01:31.200 --> 00:01:36.720
And there is a few questions you need to ask yourself how would you ideally update production server

22
00:01:36.720 --> 00:01:44.040
and how will you debug a deployment of your infrastructure and how you will manage dependencies on multiple

23
00:01:44.040 --> 00:01:50.820
and various systems and subsystems in your organization and whether it is realistic that you will be

24
00:01:50.820 --> 00:01:53.820
able to do all these tasks through manual configuration.

25
00:01:53.820 --> 00:01:57.540
The manual process guys has risk from multiple things.

26
00:01:57.560 --> 00:02:01.500
They does not support repeatability at any scale.

27
00:02:01.530 --> 00:02:04.830
Reuse ability in software engineering is a very good thing.

28
00:02:04.840 --> 00:02:06.000
Do what you want to use.

29
00:02:06.000 --> 00:02:12.160
If you build the software component, you want to reuse it for Project one, you can reuse it in a project

30
00:02:12.160 --> 00:02:12.450
two.

31
00:02:12.480 --> 00:02:18.030
Also, there is no version control because you won't be able to roll back to the production to the prior

32
00:02:18.030 --> 00:02:18.900
year version.

33
00:02:18.900 --> 00:02:23.730
If things go wrong and you don't have any other thing in the manual process, especially when you have

34
00:02:23.730 --> 00:02:30.390
a large team working in your infrastructure and there is no consistency of the data and the configuration.

35
00:02:30.390 --> 00:02:33.990
So how would you ensure matching configurations across multiple Amazon?

36
00:02:34.480 --> 00:02:36.150
A sense all these questions.

37
00:02:36.150 --> 00:02:41.490
We need to address them as a solution architect and we want to make sure that we are achieve high level

38
00:02:41.490 --> 00:02:47.420
of operational excellence, which is basically you perform operations as code, make it frequently small

39
00:02:47.430 --> 00:02:54.120
and reversible changes and you also achieve high level of reliability by managing those changes.

40
00:02:54.120 --> 00:03:00.870
In automation in us, there is a service called the Cloud Formation, which can be used to provision

41
00:03:00.870 --> 00:03:03.810
those resources in a repeatable manner.

42
00:03:03.840 --> 00:03:10.110
It will enable us to build, rebuild our infrastructure and application without the need to perform

43
00:03:10.110 --> 00:03:13.320
any anyone one actions or write any custom scripts.

44
00:03:13.320 --> 00:03:18.300
With a cloud formation, you can build a document that describe what your infrastructure should do,

45
00:03:18.300 --> 00:03:22.590
including all the NWC resources that should be part of the deployment.

46
00:03:22.590 --> 00:03:26.940
You can think of this document as a model and then you use that model to create.

47
00:03:26.940 --> 00:03:30.270
Then you use this model to create the infrastructure.

48
00:03:30.360 --> 00:03:34.950
Otherwise, as a cloud formation can actually create the resources in your account.

49
00:03:34.950 --> 00:03:40.050
When you use a cloud formation to create those resources, we call those a cloud formation aspect,

50
00:03:40.050 --> 00:03:46.820
and that stack normally consisted of multiple services and you will be able to update to create those.

51
00:03:46.850 --> 00:03:53.190
A stack which can be used to provision your resource using individual cycle formation enables you to

52
00:03:53.250 --> 00:03:55.140
create your infrastructure as a cloud.

53
00:03:55.140 --> 00:04:02.010
And this is a very old concept in computer science where we can describe the whole architecture, as

54
00:04:02.130 --> 00:04:03.360
could the author of that.

55
00:04:03.360 --> 00:04:09.300
The scribe can basically check the fashion control of the script in a code repository like GitHub or

56
00:04:09.300 --> 00:04:09.990
college comment.

57
00:04:09.990 --> 00:04:16.630
Be able to review the files and the modification and which team members they did deploy and change this

58
00:04:16.630 --> 00:04:16.810
script.

59
00:04:16.860 --> 00:04:22.320
If that is the recipe information document, you create a model, you will infrastructure field.

60
00:04:22.320 --> 00:04:24.450
You can roll back to the previous version.

61
00:04:24.450 --> 00:04:30.030
You could also delete the stack and you can check whether there are differences, the differences between

62
00:04:30.030 --> 00:04:32.280
the current version and the previous one.

63
00:04:32.280 --> 00:04:36.050
So with that mission control, you can use essentially rollback of.

64
00:04:36.270 --> 00:04:39.540
So it does look to it as a cloud formation in general.

65
00:04:39.550 --> 00:04:44.970
In order to build a stack in a cloud formation, you will define your resources in a template or you

66
00:04:44.970 --> 00:04:48.900
use a prebuilt and then you upload the template to cloud formation.

67
00:04:48.900 --> 00:04:54.300
And normally you gave those templates in a separate bucket or in another restaurant or even in your

68
00:04:54.300 --> 00:04:55.260
local disk.

69
00:04:55.260 --> 00:04:59.820
Then you run your stack creation by the cloud formation and.

70
00:04:59.850 --> 00:05:06.960
This is a provision, multiple resources in the U.S. that is stuck with retains control of the resources

71
00:05:06.960 --> 00:05:12.900
that you are created and you can later update, delete and redacted the ref or delete completely the

72
00:05:12.900 --> 00:05:13.260
stack.

73
00:05:13.260 --> 00:05:19.470
The concept of infrastructure as a code is an industry term that refers to the process of provisioning

74
00:05:19.470 --> 00:05:27.210
and managing your cloud resources by defining them in a simplified that is both human readable and machine

75
00:05:27.210 --> 00:05:27.900
consumer.

76
00:05:27.900 --> 00:05:34.230
But infrastructure as a code continues to grow in popularity because it provides a workable solution

77
00:05:34.230 --> 00:05:40.100
to challenges like how to replicate, be deployed, repurpose infrastructure easily, consistently.

78
00:05:40.110 --> 00:05:45.540
That transactional nature of cloud formation is one of its biggest advantages.

79
00:05:45.540 --> 00:05:51.030
From a customer perspective, cloud formation can be moved from one embodiment to another, and you

80
00:05:51.030 --> 00:05:55.480
can roll back to the last good dusty on case deployment name.

81
00:05:55.500 --> 00:05:58.500
What are the infrastructure as a core benefits?

82
00:05:58.500 --> 00:06:05.250
Some of the benefits of infrastructure code is that you gain a benefit to ability and rapidly deploy

83
00:06:05.250 --> 00:06:07.080
complex embedding with one template.

84
00:06:07.080 --> 00:06:10.290
You can use the same template to deploy the dev and the production.

85
00:06:10.410 --> 00:06:13.560
Same template can be used to create three different the stack.

86
00:06:13.570 --> 00:06:19.830
Each stack can be created in a few minutes and each stack would replicate their complex configuration.

87
00:06:19.830 --> 00:06:25.650
In some cases it is stacked, for example, in the test environment and the stack three is the prediction

88
00:06:25.650 --> 00:06:26.220
environment.

89
00:06:26.220 --> 00:06:32.040
You could have a greater control about their resources and the size of the resources that you create

90
00:06:32.040 --> 00:06:33.150
in each environment.

91
00:06:33.150 --> 00:06:38.790
If you must configure update into this embodiment, you update the template with the change and of the

92
00:06:38.810 --> 00:06:40.290
oldest that as well.

93
00:06:40.290 --> 00:06:46.830
This process helps to ensure the modification to a single environment which can be used in a reliable

94
00:06:46.830 --> 00:06:50.550
way to propagate all these changes to all in variance.

95
00:06:50.580 --> 00:06:58.050
Another benefit of information that it will be very easy to clean up and delete all the resources you

96
00:06:58.050 --> 00:06:58.650
created.

97
00:06:58.650 --> 00:07:05.310
And this is very useful in order to keep your echos under the control of your client's automation template.

98
00:07:05.310 --> 00:07:10.380
So this is what reduce the cost associated with those resources that you don't really need them and

99
00:07:10.380 --> 00:07:16.740
helps you as well to keep your account clean and necessarily any of course know how close automation

100
00:07:16.740 --> 00:07:18.120
will be in the cloud formation.

101
00:07:18.120 --> 00:07:23.100
We use a template and that template is written in a language called JSON.

102
00:07:23.130 --> 00:07:26.790
It's a Java object notation or JavaScript object notation.

103
00:07:26.790 --> 00:07:29.650
And there is also another format which is called Yeah.

104
00:07:29.790 --> 00:07:36.180
And YAML is a marker of language similar to the same data that you stored in Jason will take if you

105
00:07:36.180 --> 00:07:41.730
add lines, just store in Yemen because Yemen does not use the phrases and it uses a few are quotation

106
00:07:41.730 --> 00:07:43.100
marks and no tag.

107
00:07:43.110 --> 00:07:50.040
Another advantage of Yemen that it is natively supported in multiple deployment and in multiple embodiment,

108
00:07:50.040 --> 00:07:55.290
as we will see later on, you can use it in Docker engine and you can use it as well with option that

109
00:07:55.320 --> 00:07:57.180
you might find it easier to debug.

110
00:07:57.180 --> 00:08:03.180
Yemen document comparing to Jason because Jason, it can be difficult to track down missing or misplaced

111
00:08:03.180 --> 00:08:09.870
comments or a since despite the many advantage of YAML can also Jason offer some unique advantage.

112
00:08:09.870 --> 00:08:11.970
It is widely used by computer system.

113
00:08:11.970 --> 00:08:18.120
It is basically advanced in terms of the data structure that you can store in it, and it's usually

114
00:08:18.120 --> 00:08:22.140
easier to generate and parse than it can be for EIA.

115
00:08:22.140 --> 00:08:28.610
Both files are supported by the attributes management console and also it gives you the individual accounts

116
00:08:28.620 --> 00:08:35.100
automation designer, which is a graphical user interface tool that you can use to view the content

117
00:08:35.100 --> 00:08:36.630
of your client's automation template.

118
00:08:36.630 --> 00:08:42.180
And it can also be used to convert a validation template to Yemen or convert YAML to Jason.

119
00:08:42.180 --> 00:08:48.870
And it also provides you with a drag and drop interface for authoring a template that can be outfitted

120
00:08:48.870 --> 00:08:50.940
as either Yemen or DS.

121
00:08:50.940 --> 00:08:54.000
So let us look to an example of a cloud formation.

122
00:08:54.240 --> 00:08:58.950
In this example, there's not really a three all possible sections of the template.

123
00:08:58.950 --> 00:09:05.880
It can highlight some of the most commonly used section, including parameters, resources and understanding.

124
00:09:05.880 --> 00:09:09.630
Those component of the cloud formation template is very important.

125
00:09:09.630 --> 00:09:16.080
For the example, in the parameter section, we are specifying the values that will be passed from that

126
00:09:16.080 --> 00:09:17.500
user to the template.

127
00:09:17.610 --> 00:09:24.300
During the execution of that, you can refer to a parameter from the resources and the output section

128
00:09:24.300 --> 00:09:29.780
of the parameter, name and description appear in the specified parameter page.

129
00:09:29.790 --> 00:09:36.450
When a user learns degree at the start, whether in the aid device management console, in the resources,

130
00:09:36.450 --> 00:09:42.000
we are basically looking to the section where we specify the resources that we want to create.

131
00:09:42.000 --> 00:09:46.860
For example, in this slide here we are going to create a resource of time.

132
00:09:46.860 --> 00:09:50.850
AWB easy to understand, which will be clear and easy to understand.

133
00:09:50.850 --> 00:09:57.780
And these resources they can include both statistically defined properties like image IDs, innocence

134
00:09:57.780 --> 00:09:59.700
ideas or even you can.

135
00:09:59.850 --> 00:10:06.570
Reference to a parameter, and that parameter value will be entered by the user during the execution

136
00:10:06.570 --> 00:10:07.260
of the template.

137
00:10:07.270 --> 00:10:14.040
So for example here the key name is a reference with the keypad parameter that we declared in the previous

138
00:10:14.040 --> 00:10:14.430
section.

139
00:10:14.460 --> 00:10:18.250
Finally, this example shows the output section in the output.

140
00:10:18.270 --> 00:10:24.220
We describe the value that are returned after we finished the execution of the term.

141
00:10:24.240 --> 00:10:29.250
So, for example, in this particular scenario, the template will return back to us, the instance

142
00:10:29.430 --> 00:10:35.740
in the output and this will be printed out in the management console after the stack is created.

143
00:10:35.760 --> 00:10:41.760
You can see this value in the stack details of the transformation console by running a cloud formation

144
00:10:41.760 --> 00:10:48.420
described as that this is the command that you will use if you are using the ACL or you can use a software

145
00:10:48.420 --> 00:10:51.660
development kit or SDK to retrieve those values.

146
00:10:51.660 --> 00:10:56.220
And the reason why I mentioned that, guys, because there is multiple third party that you can use

147
00:10:56.220 --> 00:11:02.430
with the NWC to build and to create your infrastructure as a code like data forms, which is a very

148
00:11:02.430 --> 00:11:05.180
famous tool used in the industry.

149
00:11:05.190 --> 00:11:09.870
The sweet thing about the cloud formation that you can use the same template to create both production

150
00:11:09.870 --> 00:11:11.610
and embedding even more.

151
00:11:11.670 --> 00:11:19.230
You can have more control about the size and the positions and the deployment details of your inventory.

152
00:11:19.350 --> 00:11:24.900
That template can help you to ensure that your application behaves in production the same way that it

153
00:11:24.900 --> 00:11:26.610
behaves in the invoke.

154
00:11:26.610 --> 00:11:32.100
You see, both the production and development are created from this in the production environment is

155
00:11:32.100 --> 00:11:37.410
configured to run across two phases, but the dev runs only in a single daisy.

156
00:11:37.440 --> 00:11:43.770
This kind of deployment of specification can help us to control the number the course of the resources

157
00:11:43.770 --> 00:11:50.160
between two environments and they are accomplished by using a parameter or by using a conditions in

158
00:11:50.160 --> 00:11:51.480
the confirmation template.

159
00:11:51.480 --> 00:11:57.930
So a condition is statements in a cloud formation help you to ensure that they are different in size

160
00:11:57.930 --> 00:11:58.500
and scope.

161
00:11:58.500 --> 00:12:03.720
You can specify whether this is a test, a production or otherwise.

162
00:12:03.750 --> 00:12:08.410
You might also need several testing impediments or functional testing or user acceptance.

163
00:12:08.410 --> 00:12:13.560
This thing all or twisting all of these impediments can be created by the same template, and you don't

164
00:12:13.560 --> 00:12:16.200
need to have any manual process there.

165
00:12:16.200 --> 00:12:20.310
Another important thing is how cloud formation handles in those chains.

166
00:12:20.310 --> 00:12:23.280
One way to handle the changes is to update the stack.

167
00:12:23.280 --> 00:12:29.220
When you update the cloud formation template you use to create the stack, you need to update a stack

168
00:12:29.220 --> 00:12:30.930
option from a cloud formation.

169
00:12:30.930 --> 00:12:36.630
The chances enable you to preview the changes that, if any, that they align with your expectation

170
00:12:36.630 --> 00:12:40.800
and then approve the updates before you proceed to the basic workflow.

171
00:12:40.800 --> 00:12:46.530
To use the cloud formation, chance is to create a change set by submitting changes for the stack that

172
00:12:46.530 --> 00:12:47.370
you want to update.

173
00:12:47.370 --> 00:12:51.810
And this is very important for the exam, view the changes and also run them.

174
00:12:51.810 --> 00:12:56.790
Once you are happy that these results changes will not affect the whole infrastructure.

175
00:12:56.820 --> 00:13:02.460
If you use a specific change, you might want to set a deletion policy on some of these sources.

176
00:13:02.460 --> 00:13:09.420
That deletion policy attribute can be used to preserve a resource when it's a stack is deleted or updated.

177
00:13:09.420 --> 00:13:15.750
If a resources has no deletion policy attribute, the adverse information deletes the resource.

178
00:13:15.750 --> 00:13:19.050
Another thing to understand is the drift detection.

179
00:13:19.050 --> 00:13:20.490
So here we have a scenario.

180
00:13:20.490 --> 00:13:26.160
An application environment is a creating by running the irreversible information stack and someone decide

181
00:13:26.170 --> 00:13:32.040
to manually modify and deploy the environment so they create a new inbound rule in the security group

182
00:13:32.040 --> 00:13:33.540
that was created by this stack.

183
00:13:33.540 --> 00:13:40.410
They make these changes outside the context of cloud formation, so maybe the template in the script

184
00:13:40.410 --> 00:13:46.260
or they go to Amazon issue two instances console and they change the security group rules they have

185
00:13:46.260 --> 00:13:51.150
manual without referring to the cloud formation as the architecture of this application, you would

186
00:13:51.150 --> 00:13:57.510
want to know that your deployed environment no longer matches the model that you created using the ATP

187
00:13:57.540 --> 00:13:58.930
as a cloud formation template.

188
00:13:58.950 --> 00:14:06.270
How you would know which resources were modified so that they no longer exactly confirm with the specification

189
00:14:06.270 --> 00:14:06.930
in the stack?

190
00:14:06.930 --> 00:14:07.170
No.

191
00:14:07.180 --> 00:14:13.080
Remember, guys here the specification on the model that was created by the cloud formation script with

192
00:14:13.080 --> 00:14:19.440
the drift detection, you can exactly know which resources are different from the model and you can

193
00:14:19.440 --> 00:14:25.800
also see with your stack action happen without updating the template or of the script itself.

194
00:14:25.810 --> 00:14:32.400
Performing a restriction on a stack shows you whether the stack has drifted from its expected template

195
00:14:32.400 --> 00:14:38.400
configuration and also retains detailed information about the drafting status of each resource that

196
00:14:38.400 --> 00:14:40.050
supports the prediction.

197
00:14:40.050 --> 00:14:45.120
In this step, when you delete a stack that has been left in it, that is not handled by the end of

198
00:14:45.120 --> 00:14:46.140
the scale formation.

199
00:14:46.140 --> 00:14:51.180
Keep this in your mind for the exam because it make more sense if somebody changes.

200
00:14:51.180 --> 00:14:54.900
The security group rule is indeed easy to control.

201
00:14:54.900 --> 00:14:59.550
This is not going to be affected by the cloud formation as stacks or if you delete the stack, everything.

202
00:14:59.590 --> 00:15:03.610
Will be deleted, but that modification in the security group will remain.

203
00:15:03.620 --> 00:15:06.970
Now, the scope and organization of your team.

204
00:15:07.180 --> 00:15:13.690
Normally people it's a generic a practice in the industry that you grew all the template that they are

205
00:15:13.690 --> 00:15:19.570
related to the front end, to the back end, all to the share of resources and your network and security

206
00:15:19.570 --> 00:15:22.530
close to each other or you group them with each other.

207
00:15:22.540 --> 00:15:25.210
This is make it much easier for you to handle.

208
00:15:25.210 --> 00:15:30.940
But you could also use in a cloud formation what we call the elastic quickstart, which again provide

209
00:15:30.940 --> 00:15:33.580
you with a written template by us.

210
00:15:33.580 --> 00:15:39.230
And this was built by the solution architect partner to deploy your popular solution and end up being

211
00:15:39.230 --> 00:15:43.750
asked like for example, WordPress or, or a template for Joomla.

212
00:15:43.750 --> 00:15:49.480
For example, these reference deployment can be provisioned in your account in less than an hour or

213
00:15:49.480 --> 00:15:50.050
a few minutes.

214
00:15:50.050 --> 00:15:55.780
Most likely will use them to create a testing to test the environment and see if those software are

215
00:15:55.780 --> 00:16:00.280
going to help you to achieve a specific business values or business requirements.

216
00:16:00.310 --> 00:16:05.710
Each Quickstart consist of an information template and a deployment guide.

217
00:16:05.710 --> 00:16:11.590
When this guide to provide you with details about the deployment options and how to configure the deployment

218
00:16:11.590 --> 00:16:17.200
to match your needs, you can customize the deployment to match your needs and create this stack depending

219
00:16:17.200 --> 00:16:19.050
on your resources.

220
00:16:19.090 --> 00:16:25.900
So let us look now to a demo how we can create our to use the quickest out of cloud formation in the

221
00:16:25.900 --> 00:16:26.800
management console.
