WEBVTT
1

00:00:00.450  -->  00:00:08.340
In this lesson we will learn how to create a page layout using CSX or in other words we will learn how

2

00:00:08.340  -->  00:00:15.160
to position elements to sit side by side one another to give the appearance of columns.

3

00:00:15.360  -->  00:00:22.860
Up until now in this course we've seen elements sit below and above one another taking up the entire

4

00:00:22.860  -->  00:00:25.100
available width of the browser window.

5

00:00:25.350  -->  00:00:31.260
Well then this lesson we will learn how to take control and give specific with the elements and have

6

00:00:31.260  -->  00:00:32.710
them sit side by side.

7

00:00:32.740  -->  00:00:33.840
That's going to be a lot of fun.

8

00:00:33.840  -->  00:00:35.360
So let's get started.

9

00:00:35.790  -->  00:00:39.870
Here we are in our text editor and this is an example page we're viewing.

10

00:00:39.930  -->  00:00:43.670
We can see that it has nothing more than a header and footer.

11

00:00:43.920  -->  00:00:49.800
So if we view this in the web browser we can see that there is no main meat and potato body content

12

00:00:49.890  -->  00:00:51.330
in between the header and footer.

13

00:00:51.510  -->  00:00:54.010
So let's add that now together.

14

00:00:54.270  -->  00:00:59.640
So our goal for this lesson is to create two sections that sit side by side giving the appearance of

15

00:00:59.640  -->  00:01:00.600
columns.

16

00:01:00.600  -->  00:01:09.090
So first we'll create a div and give it a class of main area then we'll create another element using

17

00:01:09.090  -->  00:01:14.250
the A side element and give it a class of sidebar.

18

00:01:14.250  -->  00:01:21.380
Now let's add a bit of space filler text to both of these elements paragraphs.

19

00:01:21.480  -->  00:01:29.280
This is the main area or call them and then include a bit of space filler text and then we'll also do

20

00:01:29.280  -->  00:01:31.290
that in the sidebar element.

21

00:01:31.350  -->  00:01:33.870
This is the sidebar.

22

00:01:34.680  -->  00:01:40.110
OK so if we save and refresh we can see that our Web page now has a bit of content.

23

00:01:40.290  -->  00:01:45.190
We are now ready to begin writing bits of CSSA code to style the page.

24

00:01:45.240  -->  00:01:49.680
The first thing that I want to customize about the page is the overall wit.

25

00:01:49.980  -->  00:01:56.880
So currently all of the content is filling the entire browser window with this is a problem because

26

00:01:56.880  -->  00:02:01.920
the human eye only prefers to read so many words per line.

27

00:02:01.920  -->  00:02:08.790
So in order to avoid eye fatigue for our site visitors we need to add some sort of maximum wit to our

28

00:02:08.790  -->  00:02:10.320
overall content.

29

00:02:10.320  -->  00:02:13.910
Now there are many ways of achieving this but I'll show you my favorite way of doing it.

30

00:02:14.280  -->  00:02:24.300
I'm going to create a div with a class of container and I'm going to move all of our content inside

31

00:02:24.300  -->  00:02:24.390
it.

32

00:02:24.390  -->  00:02:28.620
So I'm copying cutting and then I'm going to paste.

33

00:02:28.650  -->  00:02:34.350
So now everything lives inside this one parent ancestor container element.

34

00:02:34.350  -->  00:02:42.930
Now in our C Ss Let's target that element dot container and I'm going to say maximum width max width

35

00:02:43.590  -->  00:02:45.960
940 pixels.

36

00:02:46.020  -->  00:02:49.480
So if I save and refresh we can see that there is a cutoff.

37

00:02:49.480  -->  00:02:53.980
Now instead of filling the full window it cuts off right where my mouse cursor is.

38

00:02:54.030  -->  00:03:00.280
However wouldn't it be nice if this width was horizontally centered in the browser window.

39

00:03:00.330  -->  00:03:03.840
It's very easy to achieve that we can say margin left.

40

00:03:03.840  -->  00:03:04.970
Auto.

41

00:03:04.980  -->  00:03:05.970
Margin right.

42

00:03:05.970  -->  00:03:07.880
Auto.

43

00:03:08.610  -->  00:03:12.260
We know that the margin property controls the space around elements.

44

00:03:12.270  -->  00:03:18.980
And if we assign a value of auto to both directions horizontally it will be centered moving on.

45

00:03:19.050  -->  00:03:24.210
The next thing that I want to achieve is I want to wrap are two sections that we want to be columns

46

00:03:24.570  -->  00:03:30.050
in some sort of parent element so that content begins here and ends here.

47

00:03:30.150  -->  00:03:39.690
So I'm going to create a new div named content area and then I want to move r to content sections main

48

00:03:39.690  -->  00:03:40.990
area in sidebar.

49

00:03:41.010  -->  00:03:46.740
I want to cut and paste those to live within the newly created content area div.

50

00:03:47.100  -->  00:03:57.000
Next I want to style content area to have borders above and below it so interstices will target content

51

00:03:57.000  -->  00:04:06.750
area order top three pixels solid black border bottom three pixels solid black.

52

00:04:06.790  -->  00:04:10.160
So if we refresh can see that the borders have been applied.

53

00:04:10.410  -->  00:04:13.850
All that remains now is to position these two sections.

54

00:04:13.860  -->  00:04:21.150
This and this to sit side by side one another instead of stacking on top of each other we will begin

55

00:04:21.180  -->  00:04:29.070
by targeting or selecting this section with our C Ss so that section's name is main area.

56

00:04:29.070  -->  00:04:35.760
It has a class of main area and we're going to give it a width so it will say only take up 66 percent

57

00:04:35.820  -->  00:04:41.020
of the available width so we can see that our width property is being observed.

58

00:04:41.130  -->  00:04:48.390
But the two sections are still not sitting side by side so we will now use a property named flow and

59

00:04:48.390  -->  00:04:55.610
we will tell the main area to float to the left we can see a few interesting things taking place.

60

00:04:55.610  -->  00:05:01.070
We can see that the main content or the main column is now floated to the left and you can see the beginnings

61

00:05:01.070  -->  00:05:02.390
of it to come lay out.

62

00:05:02.480  -->  00:05:09.230
However it's not perfect because the sidebar as we can see is trying to wrap itself around the floated

63

00:05:09.230  -->  00:05:10.020
content.

64

00:05:10.220  -->  00:05:14.630
So let's add a little bit additional text to the side bar so you can really see the effect that I'm

65

00:05:14.630  -->  00:05:15.970
trying to describe.

66

00:05:16.190  -->  00:05:20.400
See how the sidebar is trying to wrap around the main column.

67

00:05:20.480  -->  00:05:24.220
We don't want that we want two distinct columns.

68

00:05:24.320  -->  00:05:30.270
Now this layout that we currently see is hinting at the true nature of the float property.

69

00:05:30.590  -->  00:05:32.770
So we used float left.

70

00:05:32.870  -->  00:05:36.360
Now when you hear the word float I want you to think of the print world.

71

00:05:36.410  -->  00:05:38.460
So a newspaper or magazine.

72

00:05:38.630  -->  00:05:45.230
Typically you'll see images floated to the left or the right and the main text of the article wraps

73

00:05:45.230  -->  00:05:47.760
itself around the image.

74

00:05:48.470  -->  00:05:51.890
Well that's exactly what's going on in our lives currently.

75

00:05:51.890  -->  00:05:56.840
If you imagine this was an image instead of the main column you can see that it's floated to the side

76

00:05:57.200  -->  00:06:01.570
and the other content around it is aware of it and is trying to wrap around it.

77

00:06:01.580  -->  00:06:07.220
So in order to create two fully distinct columns where there's no sort of wrapping around we simply

78

00:06:07.220  -->  00:06:10.730
need to float the sidebar element as well.

79

00:06:11.090  -->  00:06:13.500
So Will targeted with our CSS.

80

00:06:13.520  -->  00:06:15.360
It has a class of sidebar.

81

00:06:15.500  -->  00:06:21.260
We'll give it a width of 34 percent and will also float it to the left.

82

00:06:21.590  -->  00:06:25.760
If we refresh can see that we now have two distinct columns.

83

00:06:25.780  -->  00:06:29.200
Now you may be wondering why we chose these values.

84

00:06:29.240  -->  00:06:32.340
We will circle back around to that in just a couple of minutes.

85

00:06:32.360  -->  00:06:34.590
But for now we have bigger fish to fry.

86

00:06:34.820  -->  00:06:39.120
You will recall that we had added a wrapper div for our two columns.

87

00:06:39.180  -->  00:06:46.700
So main area and side bar both live within this parent div of content area not up until just a moment

88

00:06:46.700  -->  00:06:51.220
ago this content area parent div had a top and bottom border.

89

00:06:51.530  -->  00:06:57.260
What you'll is that as soon as we set things up so that both sections were floated It's as if the parent

90

00:06:57.290  -->  00:07:02.180
element is not aware that it has any child content whatsoever.

91

00:07:02.180  -->  00:07:08.430
This is because parent elements are only aware of child content that is not floated.

92

00:07:08.540  -->  00:07:17.630
So for example if we create a paragraph directly within content area Hello World and refresh we will

93

00:07:17.630  -->  00:07:23.030
see that the content area div respects and is aware of this content we can see it's trying to draw a

94

00:07:23.030  -->  00:07:25.890
border above and below it.

95

00:07:25.910  -->  00:07:32.090
Now all we want is for the content area parent div to be aware of it to flow to children as well.

96

00:07:32.090  -->  00:07:35.620
This bottom border should be sitting down here where my mouse is.

97

00:07:35.870  -->  00:07:39.340
Now we do not want a hello world paragraph's will remove that.

98

00:07:39.440  -->  00:07:41.000
And we're back to the drawing board.

99

00:07:41.060  -->  00:07:46.390
So how can we get this rapper or parent div to be aware of the floated children.

100

00:07:46.460  -->  00:07:48.740
We can clear our floats.

101

00:07:48.890  -->  00:07:56.060
So after the code for our two columns main area and sidebar but still within the content area parent

102

00:07:56.060  -->  00:08:04.780
div will create a new element div and will given a class of fix.

103

00:08:04.910  -->  00:08:11.000
So now we have something that we can target in our CSSA that sit below the floated elements in our CSSA

104

00:08:11.000  -->  00:08:15.140
will create a class that targets that clear.

105

00:08:15.140  -->  00:08:16.880
We use the clear property.

106

00:08:16.880  -->  00:08:20.990
Now we can say left or right depending on the type of floats we use.

107

00:08:21.200  -->  00:08:24.870
But a good catch all is to simply use the phrase both.

108

00:08:24.950  -->  00:08:28.790
So now if we refresh we can see that we're in luck.

109

00:08:28.790  -->  00:08:34.820
So essentially this new div that we added with a class of fix that sits below the floated elements is

110

00:08:34.820  -->  00:08:40.380
waving its arms in the air and it's saying hey parent element content area look at me.

111

00:08:40.400  -->  00:08:41.300
I exist.

112

00:08:41.330  -->  00:08:44.030
I am clearing the floats.

113

00:08:44.330  -->  00:08:50.270
And because the element sits below the floated elements the parent element is then aware of all of the

114

00:08:50.270  -->  00:08:51.930
child content.

115

00:08:52.010  -->  00:08:58.600
However it's not considered a best practice to have HMO code that is completely meaningless.

116

00:08:58.820  -->  00:09:00.350
So this is an empty div.

117

00:09:00.350  -->  00:09:01.870
It has no content within it.

118

00:09:01.910  -->  00:09:07.190
So that means it truly has no purpose other than to make our layout work.

119

00:09:07.220  -->  00:09:11.400
So while this technically gets the job done it's far from ideal.

120

00:09:11.690  -->  00:09:18.140
So let's delete this and instead I'll show you a strategy that most web developers use the parent element

121

00:09:18.140  -->  00:09:19.370
content area.

122

00:09:19.370  -->  00:09:24.790
We will add a second utility class to it so we'll add a class of group.

123

00:09:25.070  -->  00:09:30.250
Yes you can assign multiple classes to a single element by simply including a space.

124

00:09:30.450  -->  00:09:33.650
So we're going to create a utility class named group.

125

00:09:33.740  -->  00:09:40.010
When I say utility I simply mean that we can reuse this anywhere on our page where we have a parent

126

00:09:40.040  -->  00:09:45.090
or container element with floated children and we need that parent element to be self-sufficient.

127

00:09:45.200  -->  00:09:49.490
We needed to be able to automatically clear its own floated children.

128

00:09:49.700  -->  00:09:56.360
So this method is referred to as the clear fix method and it's the weapon of choice for most web developers

129

00:09:56.360  -->  00:09:57.110
.

130

00:09:57.110  -->  00:10:00.070
Now the clear fix method is not something that you need to memorize.

131

00:10:00.080  -->  00:10:02.280
It's something that you copy and paste.

132

00:10:02.330  -->  00:10:05.240
So I'm literally just going to paste in some code.

133

00:10:05.240  -->  00:10:11.060
So essentially all of these selectors are targeting the group class and then adding an empty bit of

134

00:10:11.060  -->  00:10:18.960
content before and after it and then there clearing it and then we have this rule for older legacy versions

135

00:10:18.960  -->  00:10:24.750
of Internet Explorer so that our floats are cleared in every browser and every device under the sun

136

00:10:24.750  -->  00:10:24.990
.

137

00:10:25.020  -->  00:10:27.290
This code is completely bulletproof.

138

00:10:27.360  -->  00:10:33.180
I use it in all of my web sites and you can find it in the course materials so you can paste it into

139

00:10:33.180  -->  00:10:34.430
your websites.

140

00:10:34.440  -->  00:10:39.570
Now that we have this in place you can use the group class anywhere in your HMO.

141

00:10:39.600  -->  00:10:45.480
So if we save and refresh we can see that even though we no longer have any sort of element beneath

142

00:10:45.480  -->  00:10:52.860
the columns because we added this group class the parent element will automatically clear its floated

143

00:10:52.860  -->  00:10:55.650
children.

144

00:10:55.650  -->  00:10:58.050
Now this lesson is almost complete.

145

00:10:58.260  -->  00:11:04.200
But before we end it I want to address some of the most commonly asked questions about layouts and floats

146

00:11:04.220  -->  00:11:04.610
.

147

00:11:04.920  -->  00:11:10.380
So the first question is how or why did I choose these values for the two columns.

148

00:11:10.570  -->  00:11:14.030
Sixty six and thirty four percent.

149

00:11:14.070  -->  00:11:20.610
The reason I chose these with values is because I wanted to lay out where the main column used two thirds

150

00:11:20.610  -->  00:11:23.370
of the available width and the sidebar used.

151

00:11:23.370  -->  00:11:29.370
One third of the available width from a C S s perspective I really just wanted these two values to add

152

00:11:29.370  -->  00:11:36.150
up to 100 percent because I wanted to make use of all of the available width but you don't have to follow

153

00:11:36.150  -->  00:11:38.160
this rule of thirds instead.

154

00:11:38.240  -->  00:11:43.830
What if you wanted the two columns to be equal and with you could simply each give them 50 percent of

155

00:11:43.830  -->  00:11:46.140
the width.

156

00:11:46.170  -->  00:11:51.270
Typically we want our columns to add up to 100 percent but they don't have to.

157

00:11:51.270  -->  00:11:55.020
So I could set this to 40 40 plus 50 only equals 90.

158

00:11:55.120  -->  00:12:01.420
And if I were fresh you can see we're only using about 90 percent of the available width.

159

00:12:01.560  -->  00:12:04.380
So there are no rules to creating layouts.

160

00:12:04.380  -->  00:12:08.490
You can have your columns take up as much space as you prefer.

161

00:12:08.490  -->  00:12:15.000
Another common question is why are we using percentage values for width instead of pixel values.

162

00:12:15.360  -->  00:12:17.790
The answer is that it's a matter of preference.

163

00:12:17.790  -->  00:12:19.830
There's no right or wrong choice.

164

00:12:20.130  -->  00:12:25.410
So if we want to use pixel values instead of percentage values we would need to first ask ourselves

165

00:12:25.710  -->  00:12:27.740
How large is the container.

166

00:12:27.840  -->  00:12:33.300
So how much available space do we have at our disposal so to remember that the overall container for

167

00:12:33.300  -->  00:12:38.980
the entire page was given a maximum width of 940 pixels.

168

00:12:39.210  -->  00:12:43.870
So we most likely want our column widths to add up to nine forty.

169

00:12:44.100  -->  00:12:51.080
So we could give the main column A with of six hundred and forty pixels and we can give the sidebar

170

00:12:51.210  -->  00:12:53.740
with the 300 pixels.

171

00:12:54.240  -->  00:13:01.670
And visually This is identical to the layout we saw when we used 66 percent and 34 percent.

172

00:13:01.680  -->  00:13:07.200
Now if you do prefer to use pixel values for the width of your columns make sure that the container

173

00:13:07.200  -->  00:13:14.070
element that they're sitting in does not use Macs with for its own wit but instead have it used simply

174

00:13:14.070  -->  00:13:15.340
with.

175

00:13:15.420  -->  00:13:20.580
Now at this point in the course please do not begin worrying about creating a one size fits all beautiful

176

00:13:20.580  -->  00:13:26.340
Responsive Web site that is completely outside the scope of this lesson and what we're trying to focus

177

00:13:26.340  -->  00:13:31.980
on at the moment in future lessons we will learn about responsive web design and how to create different

178

00:13:31.980  -->  00:13:33.930
layouts at different screen sizes.

179

00:13:34.110  -->  00:13:39.720
But for now let's get used to creating floating columns and dealing with values.

180

00:13:39.750  -->  00:13:45.270
And rest assured that learning how to create more flexible layouts will come later on in the course

181

00:13:45.270  -->  00:13:46.410
.

182

00:13:46.410  -->  00:13:50.770
Let's move on to the final frequently asked question before we close out this lesson.

183

00:13:50.940  -->  00:13:57.630
And that question is why would we bother creating a reusable class that lets parents auto clear their

184

00:13:57.630  -->  00:14:03.720
children instead of just structuring our page in a way where we could rely on the footer to use the

185

00:14:03.720  -->  00:14:06.150
clear property to clear the floats.

186

00:14:06.150  -->  00:14:08.220
That's an excellent question.

187

00:14:08.250  -->  00:14:14.460
In a perfect world we could set up web pages where there's always a conveniently located element beneath

188

00:14:14.460  -->  00:14:16.830
the floats that clears the floats.

189

00:14:16.950  -->  00:14:19.930
But in the real world that is simply not the case.

190

00:14:20.040  -->  00:14:26.350
When you begin creating Web lets you will quickly realize that you need your content to be self-contained

191

00:14:26.400  -->  00:14:27.200
modules.

192

00:14:27.360  -->  00:14:32.960
You need to move bits of content around throughout the page and you need them to clear themselves.

193

00:14:32.970  -->  00:14:38.100
You can't always rely on the element beneath it to take care of clearing it.

194

00:14:38.100  -->  00:14:44.220
No the more you begin experimenting creating layouts the more you will find that having a reusable utility

195

00:14:44.220  -->  00:14:48.720
class declaring the child floats is a true lifesaver.

196

00:14:48.720  -->  00:14:50.720
Now we've covered a lot in this lesson.

197

00:14:50.720  -->  00:14:56.330
Here is a very quick review to have sections of a web page sit side by side one another.

198

00:14:56.340  -->  00:14:59.430
Or in other words to create columns.

199

00:14:59.430  -->  00:15:05.010
We add the float property to an element and we also assign it a with value.

200

00:15:05.790  -->  00:15:11.280
If you're using floats to create call them layouts you need to be sure to clear your floats and we learn

201

00:15:11.280  -->  00:15:14.240
several different ways of doing that.

202

00:15:14.430  -->  00:15:19.130
And finally we learned about different ways of managing our with values.

203

00:15:19.140  -->  00:15:24.120
Now this was a fairly technical lesson to have something didn't make sense and if it feels like a lot

204

00:15:24.120  -->  00:15:27.510
of information to absorb at once that's absolutely OK.

205

00:15:27.510  -->  00:15:32.290
Again these are topics that we will relearn and continue to revisit throughout the course.

206

00:15:32.290  -->  00:15:34.030
I'll see you in the next lesson.
