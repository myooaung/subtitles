WEBVTT
1

00:00:00.780  -->  00:00:10.050
This course is about h DMO and CSS not javascript but in my opinion a modern web design course is not

2

00:00:10.050  -->  00:00:16.670
doing its job if it doesn't at least familiarize its students with what javascript is used for.

3

00:00:17.010  -->  00:00:23.940
So in this section of the course we will learn how to leverage javascript without writing javascript

4

00:00:23.950  -->  00:00:24.170
.

5

00:00:24.390  -->  00:00:25.910
So what does that mean.

6

00:00:25.920  -->  00:00:32.160
It means that writing javascript code is outside the scope of this course but it also means that you

7

00:00:32.160  -->  00:00:32.640
have enough.

8

00:00:32.670  -->  00:00:39.180
Each DMO and CSSA knowledge to begin adding javascript functionality to your pages.

9

00:00:39.180  -->  00:00:45.780
Right now today and in the process you will learn a bit more about what javascript is what it is used

10

00:00:45.780  -->  00:00:51.680
for and why it will most likely be the next to do item on your things to learn list.

11

00:00:51.810  -->  00:00:57.930
Now instead of spending the next 60 seconds attempting to summarize what javascript is we are just going

12

00:00:57.930  -->  00:01:00.900
to jump straight into our first task.

13

00:01:00.900  -->  00:01:07.110
So in this particular lesson we are going to learn how to set up a slide show in front of you is an

14

00:01:07.110  -->  00:01:11.540
example page that I've set up for this lesson and here we can see the finished product.

15

00:01:11.640  -->  00:01:17.370
This is a slide show so we can see that it transitions between the different slides and if I hover over

16

00:01:17.370  -->  00:01:24.470
it these previous and next buttons appear and if I click them we can rapidly change to the slides.

17

00:01:24.540  -->  00:01:30.210
We also notice pagination or a page or at the top so there are three dots corresponding with the three

18

00:01:30.210  -->  00:01:37.950
different slides and the current or active slide is represented by the black dot.

19

00:01:37.950  -->  00:01:44.590
Now again this is the finished product and staring at a finished product isn't very educational.

20

00:01:44.610  -->  00:01:48.240
We need to start from square one together and work our way up.

21

00:01:48.240  -->  00:01:51.270
So in this tab we can do just that.

22

00:01:51.270  -->  00:01:53.380
This page does not feature a show.

23

00:01:53.400  -->  00:02:01.120
It's simply three images a b a duck and a squirrel all sitting below one another and in terms of HTML

24

00:02:01.620  -->  00:02:05.940
this is nothing more than three instances of the image element.

25

00:02:06.300  -->  00:02:11.900
So how can we transform this into the slide show that we saw just a moment ago.

26

00:02:11.940  -->  00:02:13.460
The recipe has two ingredients.

27

00:02:13.470  -->  00:02:20.790
Number one custom each DML and CSSA which we are fully capable of writing and the second and final ingredient

28

00:02:21.090  -->  00:02:28.320
is a pre-existing javascript solution named Cycle 2 which is written by the brilliant Mike Allsup.

29

00:02:28.380  -->  00:02:32.040
Now in the name of fun let's jump straight to that final ingredient.

30

00:02:32.100  -->  00:02:33.330
Cycle 2.

31

00:02:33.540  -->  00:02:38.160
Now I just downloaded Cycle 2 behind the scenes it's on my desktop here it is.

32

00:02:38.160  -->  00:02:44.160
You can perform a web search for Cycle 2 or you can find this file in the downloadable zip for this

33

00:02:44.160  -->  00:02:50.110
lecture so Cycle 2 comes in the form of a dot js or javascript file.

34

00:02:50.160  -->  00:02:56.140
So our first step after we download the file is to move the file to live with all of our other website

35

00:02:56.250  -->  00:02:57.890
files.

36

00:02:57.930  -->  00:02:59.430
So here is my website folder.

37

00:02:59.430  -->  00:03:00.440
Here's the web page.

38

00:03:00.450  -->  00:03:01.850
Here's our CSSA folder.

39

00:03:01.860  -->  00:03:03.490
Here is our images folder.

40

00:03:03.720  -->  00:03:10.260
I'm going to create a new folder named js which stands for javascript just to stay organized.

41

00:03:10.260  -->  00:03:15.950
Next let's move the cycle to file to live within this new Js folder.

42

00:03:16.620  -->  00:03:23.730
Our next step is to include this file in the header section of our h TNL page just like we would a CSSA

43

00:03:23.730  -->  00:03:29.240
file only the syntax for attaching a javascript file is a bit different.

44

00:03:29.490  -->  00:03:31.640
So we will open a script to tag.

45

00:03:31.890  -->  00:03:39.220
Be sure to close the script tag and in the opening tag we will include an attribute named type.

46

00:03:39.300  -->  00:03:43.320
You will provide a value of text slash javascript.

47

00:03:43.920  -->  00:03:50.250
Let's include a second attribute named source and this is our chance to point the web browser to the

48

00:03:50.250  -->  00:03:56.320
new cycle to file so it lives within the japes folder and its name is cycle to dot.

49

00:03:56.410  -->  00:03:59.850
js So this line of code is complete.

50

00:03:59.850  -->  00:04:02.640
We've successfully add the file to our page.

51

00:04:02.640  -->  00:04:08.340
However the cycle to javascript file has a dependency of Jquery.

52

00:04:08.340  -->  00:04:10.740
Now those are two terms that might not make sense right now.

53

00:04:10.740  -->  00:04:18.120
Dependency and Jquery a dependency simply means that a file relies on a different file in order to run

54

00:04:18.120  -->  00:04:23.820
correctly and Jquery is the world's most popular javascript library.

55

00:04:23.820  -->  00:04:30.740
So in other words we need to include a second javascript file in our page named Jquery.

56

00:04:31.020  -->  00:04:34.950
So behind the scenes I've already downloaded a query to my desktop.

57

00:04:34.950  -->  00:04:40.890
Again you can perform a web search for Jquery or you can find this file in the downloadable zip for

58

00:04:40.890  -->  00:04:41.870
this lecture.

59

00:04:42.210  -->  00:04:46.750
So again we need to move this file to live with our other website files.

60

00:04:49.310  -->  00:04:56.090
And in our head section we can simply duplicate the script line that we just wrote and in the first

61

00:04:56.100  -->  00:04:58.990
line will simply change the name of the file.

62

00:04:59.250  -->  00:05:02.020
So instead of cycle to look for J quarried.

63

00:05:02.060  -->  00:05:09.980
js now that we've added these files to our page cycle to can begin to work its magic by default cycle

64

00:05:09.990  -->  00:05:12.380
2 will actively search on her page.

65

00:05:12.380  -->  00:05:19.680
It will search through our HMO code looking for an element that has a class of cycle slideshow.

66

00:05:20.100  -->  00:05:26.190
If and when it finds an element with that class it will then cycle through the content of that element

67

00:05:26.190  -->  00:05:26.520
.

68

00:05:26.510  -->  00:05:32.190
So for example if we want to create a slide show out of our three images the be the duck and the squirrel

69

00:05:32.190  -->  00:05:32.520
.

70

00:05:32.510  -->  00:05:40.380
All we need to do is wrap these images in a div in the closing tag let's indent our content stay organized

71

00:05:40.640  -->  00:05:46.500
and give this new div a class of site called slideshow.

72

00:05:47.000  -->  00:05:52.990
So if I save and refresh the web browser we can see that there is now only one image location.

73

00:05:53.210  -->  00:05:55.250
You can see that cycle 2 is doing its job.

74

00:05:55.500  -->  00:06:02.770
So every five seconds or so it cycles between the different contents of the div that we created.

75

00:06:02.920  -->  00:06:06.180
So you can see how it earns its name of cycle.

76

00:06:06.180  -->  00:06:12.210
Now for some of you this is your first time consciously observing javascript that javascript is used

77

00:06:12.240  -->  00:06:20.280
for many things in the modern era but perhaps most famously it's used to manipulate web pages on the

78

00:06:20.270  -->  00:06:23.100
fly without a page refresh.

79

00:06:23.510  -->  00:06:30.710
So in order to create this slideshow effect cycle 2 is manipulating our images on the fly every five

80

00:06:30.720  -->  00:06:31.920
seconds or so.

81

00:06:31.920  -->  00:06:39.720
So for example if I right click on an image and click inspect element Here's the image for the squirrel

82

00:06:39.720  -->  00:06:40.180
.

83

00:06:40.410  -->  00:06:44.280
You can see that it's opacity is currently set to 0 so it's invisible.

84

00:06:44.550  -->  00:06:50.280
But now in the background you see the squirrel is displaying its opacity is set to one so fully visible

85

00:06:50.670  -->  00:06:52.650
and again obviously it's hidden in the background again.

86

00:06:52.640  -->  00:07:01.430
So now it's opacity is 0 and a few seconds here you'll see that now it's opacity is set to 1.

87

00:07:01.440  -->  00:07:05.040
Now we didn't add any of these digital properties that we see here.

88

00:07:05.100  -->  00:07:07.520
For example here's the image for the duck.

89

00:07:07.620  -->  00:07:15.080
You can see that it's receiving position absolute top left z index visibility opacity display.

90

00:07:15.120  -->  00:07:16.590
We didn't add any of that.

91

00:07:16.680  -->  00:07:21.220
The Cycle 2 script is adding those properties on the fly.

92

00:07:21.330  -->  00:07:27.330
And then every five seconds it's manipulating those properties to create the illusion of a slide show

93

00:07:27.330  -->  00:07:27.780
.

94

00:07:27.770  -->  00:07:33.130
Now we don't need to worry about any of this manipulation for the time being.

95

00:07:33.180  -->  00:07:36.630
We're going to let cycle work its magic in the background.

96

00:07:36.620  -->  00:07:38.730
I'm going to close the inspector.

97

00:07:38.940  -->  00:07:43.230
I just wanted to give you a quick idea of what javascript is doing behind the scenes.

98

00:07:43.250  -->  00:07:49.140
And now let's spend the rest of this lesson manipulating the slideshow to look more like the original

99

00:07:49.130  -->  00:07:56.340
example we saw with the previous and next buttons and the pagination dots and the text overlays for

100

00:07:56.340  -->  00:07:57.520
each slide.

101

00:07:57.890  -->  00:08:01.860
So let's hop back over to the slide show that we were creating together.

102

00:08:01.860  -->  00:08:03.090
Here it is.

103

00:08:03.750  -->  00:08:06.770
And let's adjust what we consider a slide.

104

00:08:06.770  -->  00:08:14.370
So currently Cycle 2 is cycling between image elements but we don't want to slide to simply be an image

105

00:08:14.370  -->  00:08:14.440
.

106

00:08:14.460  -->  00:08:19.760
We want a slide to be a combination of an image and a bit of text.

107

00:08:19.860  -->  00:08:25.320
So let's create a div with a class of slide for each slide.

108

00:08:25.310  -->  00:08:30.850
So this div will contain an image and descriptive text.

109

00:08:30.930  -->  00:08:32.130
So there's the image.

110

00:08:32.270  -->  00:08:37.040
Let's create an additional do with a class of slide text.

111

00:08:37.470  -->  00:08:43.220
And this is where we conclude we jump back to the finished product this text.

112

00:08:43.230  -->  00:08:48.680
So a title or maybe a paragraph or one sentence and then some sort of button.

113

00:08:49.250  -->  00:08:53.410
So back to the example that we're working on in this slide text div..

114

00:08:53.420  -->  00:08:59.930
Let's include a heading B title here and then a bit of descriptive text.

115

00:08:59.970  -->  00:09:07.270
This is the caption or descriptive text for the B slide.

116

00:09:07.250  -->  00:09:11.160
So now this slide is a combo of image and text.

117

00:09:11.250  -->  00:09:16.460
So now we just need to create one of these slide divs for the duck and squirrel slides.

118

00:09:16.670  -->  00:09:19.380
Now I won't waste your time by having you watch me do that.

119

00:09:19.380  -->  00:09:21.960
So I'm going to pause the video and then come back.

120

00:09:21.950  -->  00:09:22.650
Welcome back.

121

00:09:22.640  -->  00:09:24.200
So here is the slide.

122

00:09:24.200  -->  00:09:25.890
Here is the duck slide.

123

00:09:25.880  -->  00:09:27.850
And here is the squirrel slide.

124

00:09:28.110  -->  00:09:34.410
So now if we save and refresh we can see that our slide show is completely broken so cycle to no longer

125

00:09:34.400  -->  00:09:41.810
knows how to cycle through our content because by default Cycle 2 wants to search for images not for

126

00:09:41.820  -->  00:09:42.790
divs.

127

00:09:42.810  -->  00:09:47.690
However it is incredibly easy to customize cycle to fit our needs.

128

00:09:48.340  -->  00:09:54.430
So if we scroll up and find the overall parent div that has a class of cycle slideshow we can add an

129

00:09:54.430  -->  00:09:59.750
additional attribute to this div data cycle slides.

130

00:09:59.920  -->  00:10:04.360
Now this is your first time seeing a data attribute now in and of itself.

131

00:10:04.360  -->  00:10:07.370
This attribute doesn't mean anything to the web browser.

132

00:10:07.420  -->  00:10:15.730
However Javascript can access this attribute very easily so Cycle 2 has an option named cycle slides

133

00:10:15.970  -->  00:10:19.820
and we can provide a value which cycle 2 can use.

134

00:10:19.820  -->  00:10:26.110
So this attribute is essentially asking what would you like to cycle through now by default.

135

00:10:26.110  -->  00:10:33.350
Cycle 2 wants to search for any immediate image elements but we can pass it any CSSA style select what

136

00:10:33.350  -->  00:10:34.050
we want.

137

00:10:34.210  -->  00:10:38.240
So period means class and then slide.

138

00:10:38.320  -->  00:10:45.880
So this will tell Cycle 2 to look for any elements that have a class of slide and use them as the slides

139

00:10:45.890  -->  00:10:46.350
.

140

00:10:46.810  -->  00:10:53.410
So for example if instead of Slye we named each one of these divs item then we could change this to

141

00:10:53.410  -->  00:10:58.350
be dot item but obviously we will leave it as slide.

142

00:10:58.750  -->  00:11:01.300
Now if we save and refresh.

143

00:11:01.300  -->  00:11:05.070
First thing I see is that we need a bit of CSSA to come to the rescue very quickly.

144

00:11:05.260  -->  00:11:08.440
So I'm going to hop over to our style sheet.

145

00:11:08.440  -->  00:11:10.060
Create a new comment.

146

00:11:10.060  -->  00:11:15.720
Stay organized Slye to show styles.

147

00:11:15.970  -->  00:11:23.440
So I want to target the slide divs and just make sure that they have a width of 100 percent much better

148

00:11:23.450  -->  00:11:23.630
.

149

00:11:23.800  -->  00:11:27.970
So now we can see that cycle is cycling between the slide does.

150

00:11:28.060  -->  00:11:31.500
So here is the image and the text.

151

00:11:31.600  -->  00:11:34.420
Here is the scroll image and the squirrel text.

152

00:11:34.420  -->  00:11:41.970
So from here we can just apply a bit of custom CSSA to recreate this overlay effect that we see.

153

00:11:42.340  -->  00:11:47.350
So let's hop back over to the slide show that we are working on together and let's write a bit of custom

154

00:11:47.380  -->  00:11:48.480
VSS.

155

00:11:49.000  -->  00:11:57.310
So I want the slides to use position relative because I want to be able to position the slide text div

156

00:11:57.940  -->  00:12:04.150
using position absolute position absolute and I want it to sit at the bottom.

157

00:12:04.450  -->  00:12:10.220
So if I save and refresh you can see that the text is now overlaying the image just like we want.

158

00:12:10.690  -->  00:12:17.650
Let's also give the text area a background color of semi transparent black so we use RGBA instead of

159

00:12:17.650  -->  00:12:18.930
hexadecimal.

160

00:12:19.270  -->  00:12:23.900
So this is black and will give it transparency of about 70 percent.

161

00:12:24.100  -->  00:12:26.240
Let's make the text white.

162

00:12:26.410  -->  00:12:31.810
Let's make sure that this textarea uses the full available width and lets also give it a bit of paddings

163

00:12:31.810  -->  00:12:32.940
or twenty pixels.

164

00:12:33.100  -->  00:12:39.340
Now because the element is using 100 percent width and were also giving it padding I'm going to use

165

00:12:39.430  -->  00:12:45.670
box sizing border box so that the element isn't larger than 100 percent.

166

00:12:46.090  -->  00:12:49.880
If I save and refresh can see we're almost there.

167

00:12:49.930  -->  00:12:54.400
The first thing that I noticed is that the black box is not perfectly aligned with the bottom of the

168

00:12:54.400  -->  00:13:03.310
image or the slide area so we can fix that by making sure that any image elements inside a slide are

169

00:13:03.310  -->  00:13:04.540
set to display.

170

00:13:04.540  -->  00:13:14.640
Block much better and very quickly let's work on the spacing between this title and paragraph text.

171

00:13:14.640  -->  00:13:22.510
Create a new rule slide text target the H-3 element set its margin to 0.

172

00:13:23.590  -->  00:13:24.640
Much better.

173

00:13:24.640  -->  00:13:31.090
Now let's give the slide show itself a bit of bottom margin in our style sheet.

174

00:13:31.120  -->  00:13:33.070
Create a new rule.

175

00:13:33.070  -->  00:13:41.890
Select the overall cycle slideshow element margin bottom 30 pixels so that looked better.

176

00:13:41.890  -->  00:13:44.080
Now there's a bit of space here.

177

00:13:44.170  -->  00:13:50.620
Moving on let's add the previous and next buttons so that users can rapidly click to advance through

178

00:13:50.620  -->  00:13:59.350
this light to enter h t IMHO within the cycle slideshow parent div cycle 2 by default will search for

179

00:13:59.350  -->  00:14:08.140
an element that has a class of cycle hyphen preve And also it will search for an element that has a

180

00:14:08.140  -->  00:14:12.980
class of cycle next.

181

00:14:13.270  -->  00:14:16.700
So let's include a bit of text in these that make sense.

182

00:14:16.700  -->  00:14:23.470
So within the cycle previous element will include text that says previous than this one will include

183

00:14:23.470  -->  00:14:24.790
text that says next.

184

00:14:24.790  -->  00:14:31.620
So if I refresh and click on next you can see I can very rapidly advance through this line.

185

00:14:31.870  -->  00:14:38.560
So now let's just add a bit of custom CSS to style these so that they actually look like user interface

186

00:14:38.560  -->  00:14:39.530
buttons.

187

00:14:39.700  -->  00:14:42.750
So let's hop over to our CSSA file.

188

00:14:43.100  -->  00:14:45.980
Let's create a comment to stay organized.

189

00:14:46.240  -->  00:14:48.770
Preve and next buttons.

190

00:14:49.030  -->  00:14:50.850
So let's begin with the previous button.

191

00:14:50.860  -->  00:14:53.630
It had a class of cycle preve.

192

00:14:54.280  -->  00:15:00.150
So let's position it so that it sits right about here in the slideshow.

193

00:15:00.910  -->  00:15:06.450
So we use position absolute because the overall slideshow element has a value of position relative.

194

00:15:06.850  -->  00:15:11.600
So will say position yourself from the top about 30 percent.

195

00:15:12.120  -->  00:15:15.550
Let's again use a background color of transparent black so RGBA

196

00:15:18.610  -->  00:15:20.100
35 percent.

197

00:15:20.620  -->  00:15:22.740
Make the color of the text white.

198

00:15:22.950  -->  00:15:26.680
Give it a bit of padding so that it's easier to click the button.

199

00:15:27.070  -->  00:15:32.110
If we're giving the element padding let's be sure to make the element block level.

200

00:15:32.110  -->  00:15:37.240
Let's also make the cursor set the pointer so that it looks like a link.

201

00:15:37.270  -->  00:15:42.610
When we hover over it and let's increase the font size a bit.

202

00:15:42.610  -->  00:15:49.990
Finally we will set a z index to a fairly high value so that this UI button is layered on top of the

203

00:15:49.990  -->  00:15:51.910
slides themselves.

204

00:15:51.910  -->  00:15:57.490
If we refresh Here's the button and click it and it works just like we would expect.

205

00:15:57.490  -->  00:16:00.450
Now let's add styles to the next button.

206

00:16:00.790  -->  00:16:06.520
So it is almost identical to the previous button so we actually want to reuse all of these styles for

207

00:16:06.520  -->  00:16:12.460
the next button so I'll simply tack on a new selector for this rule. cycle next.

208

00:16:12.460  -->  00:16:17.320
Now the only thing that we want to be unique about the next button is that we want it to be positioned

209

00:16:17.500  -->  00:16:18.910
to the right.

210

00:16:19.240  -->  00:16:23.820
So what's create a new rule for cycle next.

211

00:16:23.830  -->  00:16:27.730
The only unique property needs is right zero.

212

00:16:27.760  -->  00:16:32.510
If we refresh Now the next button is in place.

213

00:16:32.890  -->  00:16:38.410
Now let's adjust things so that these previous and next buttons only display while we're hovering over

214

00:16:38.410  -->  00:16:47.740
the slide show so we can set their default opacity to zero and then if someone hovers over the overall

215

00:16:47.740  -->  00:16:57.520
slide show so cycle slide show hover then go within and grab the cycle previous button set its opacity

216

00:16:57.550  -->  00:16:58.900
to 1.

217

00:16:58.930  -->  00:17:04.600
Also want to adjust the selector to include cycle next.

218

00:17:05.730  -->  00:17:09.400
So if we refresh we can see they're not visible if we hover over the slideshow.

219

00:17:09.430  -->  00:17:13.030
Now the buttons are visible and we can get a bit fancy if we want.

220

00:17:13.030  -->  00:17:18.340
We can make it so that instead of just appearing and the buttons fade into view so we can see a transition

221

00:17:19.570  -->  00:17:21.910
opacity half of a second

222

00:17:25.310  -->  00:17:26.800
and now over the course of a second.

223

00:17:26.800  -->  00:17:29.000
They fade in and out of view.

224

00:17:29.770  -->  00:17:35.290
Next what if instead of the words previous and next we can include just arrows that point in the left

225

00:17:35.290  -->  00:17:36.720
and right directions.

226

00:17:36.760  -->  00:17:39.580
So in our HMO I will remove previous

227

00:17:42.430  -->  00:17:48.160
and use a symbol that points to the left and never removed next and use a symbol that points to the

228

00:17:48.160  -->  00:17:50.050
right.

229

00:17:51.730  -->  00:17:56.550
So this takes up less space and is a bit more intuitive.
