WEBVTT
1

00:00:00.510  -->  00:00:04.760
In this lesson we will learn how to create a bulleted list.

2

00:00:05.010  -->  00:00:11.720
But more importantly we will learn how to nest HTL elements inside one another.

3

00:00:11.730  -->  00:00:16.950
Here we are in a text editor and let's imagine that we would like to create a web page with the heading

4

00:00:17.010  -->  00:00:21.440
that reads my grocery list and then a bulleted list below that.

5

00:00:21.870  -->  00:00:28.070
So we'll begin by creating the header that says My grocery list here is what that would look like.

6

00:00:28.080  -->  00:00:29.170
And a web browser.

7

00:00:29.400  -->  00:00:33.260
And now let's add the actual boarded list in HVM mail.

8

00:00:33.270  -->  00:00:36.960
There is an element named unordered list.

9

00:00:36.960  -->  00:00:40.700
The code for this is UL.

10

00:00:40.920  -->  00:00:47.610
However unlike heading elements and paragraph elements we cannot simply type directly in this element

11

00:00:47.610  -->  00:00:48.020
.

12

00:00:48.030  -->  00:00:52.980
So for example we cannot type milk eggs bread.

13

00:00:53.250  -->  00:00:56.000
This is not valid HMO code.

14

00:00:56.040  -->  00:01:00.330
Instead we want to create an element for each list item.

15

00:01:00.420  -->  00:01:13.660
So the code for a list item is a lie list item milk list item eggs list item bread.

16

00:01:13.710  -->  00:01:18.500
So if I save and refresh in my web browser you can see we now have a bulleted list.

17

00:01:18.510  -->  00:01:24.480
This marks the first time in the course that we have seen one element nest inside another.

18

00:01:24.480  -->  00:01:30.630
This is a big moment because nesting elements is in the central part of writing clean well-structured

19

00:01:30.810  -->  00:01:33.260
semantic HVM mail.

20

00:01:33.390  -->  00:01:40.770
If you recall in an earlier lesson I mentioned that creating HDMI elements was like making sandwiches

21

00:01:40.770  -->  00:01:41.490
.

22

00:01:41.490  -->  00:01:43.930
We have a start tag which is a piece of bread.

23

00:01:44.010  -->  00:01:47.300
We have the content which is the meat or the peanut butter and jelly.

24

00:01:47.370  -->  00:01:50.220
And then we have a closing tag which is another piece of bread.

25

00:01:50.430  -->  00:01:56.280
But once we start thinking about the entire page our entire document I think it's helpful to think of

26

00:01:56.490  -->  00:01:58.650
Russians stacking dolls.

27

00:01:58.650  -->  00:02:03.750
The dolls were one doll fits inside another and fits inside another which fits inside another.

28

00:02:03.810  -->  00:02:10.800
So on and so forth in HMO one element can stack inside another to create well-structured code.

29

00:02:10.980  -->  00:02:17.700
For example we know that list items nest inside an unordered list but we can also include a secondary

30

00:02:17.700  -->  00:02:20.190
list inside one of these list items.

31

00:02:20.340  -->  00:02:22.170
That was a lot of words to throw around.

32

00:02:22.170  -->  00:02:23.540
Let's see it in action.

33

00:02:23.550  -->  00:02:27.650
So for example what if we wanted to buy different kinds of bread at the store.

34

00:02:27.960  -->  00:02:37.260
Inside this one list item bread we can create a secondary unordered list and then within this UL element

35

00:02:37.560  -->  00:02:39.510
we can create a list items.

36

00:02:39.510  -->  00:02:54.790
So it's in the min raise inbread new list item sourdough bread new list item whole wheat bread.

37

00:02:54.800  -->  00:03:01.440
Now if we save and then head over to the browser and refresh we can see that the structure of our HMO

38

00:03:01.440  -->  00:03:03.600
code has been put into action.

39

00:03:03.600  -->  00:03:06.890
We have a sublist indented from Bread.

40

00:03:07.170  -->  00:03:10.950
Let's think back to the Russians stacking doll analogy for a moment.

41

00:03:11.130  -->  00:03:16.110
And as a quick exercise let's follow the ancestry of sourdough bread.

42

00:03:16.110  -->  00:03:22.950
So in our code we can see that sourdough bread is a list item which fits inside this unordered list

43

00:03:22.980  -->  00:03:34.110
element this unordered list has a direct Paran of this list item for bread that list item has a direct

44

00:03:34.110  -->  00:03:38.310
parent of the main unordered list element.

45

00:03:38.310  -->  00:03:40.950
Now on the surface you may be thinking great.

46

00:03:41.010  -->  00:03:47.310
All we did in this lesson is learn how to make a bulleted list but it's so much more than that by wrapping

47

00:03:47.310  -->  00:03:52.590
your mind around this idea of stacking elements inside one another by wrapping your mind around this

48

00:03:52.590  -->  00:03:56.630
concept of ancestry of Paran elements and child elements.

49

00:03:56.700  -->  00:03:59.500
You're opening the door to all of HVM.

50

00:03:59.760  -->  00:04:05.100
As we begin to write more and more complex female code in this course everything will revert back to

51

00:04:05.100  -->  00:04:05.730
this lesson.

52

00:04:05.730  -->  00:04:07.380
This idea of nesting.

53

00:04:07.500  -->  00:04:12.410
So it's important that you understand this early on in our next lesson.

54

00:04:12.450  -->  00:04:17.870
We'll take a look at nesting once again only instead of focusing on bolded lists.

55

00:04:17.880  -->  00:04:21.120
We'll look at HMO pages from a bird's eye view.

56

00:04:21.120  -->  00:04:22.470
I'll see you in the next lesson.
