WEBVTT
1

00:00:00.390  -->  00:00:07.200
In this lesson we will learn how to add a video file to a web page before we get started.

2

00:00:07.200  -->  00:00:09.550
There's something that I would like to discuss.

3

00:00:09.630  -->  00:00:15.720
We will learn of this video that the syntax the code for natively adding video to T-Mo pages is very

4

00:00:15.720  -->  00:00:16.590
simple.

5

00:00:16.590  -->  00:00:18.810
Anyone can write the code themselves.

6

00:00:18.960  -->  00:00:25.560
However in the real world it is my opinion that adding videos to a web page yourself without relying

7

00:00:25.560  -->  00:00:32.270
on some sort of third party service or third party javascript solution is an exercise in futility.

8

00:00:32.280  -->  00:00:38.610
However this is a course on H TNL so I wouldn't be doing my job if I didn't teach you how to use the

9

00:00:38.610  -->  00:00:42.750
native HLL tools to include video on a page.

10

00:00:42.870  -->  00:00:46.500
Now towards the end of this lesson I will explain a bit more in detail.

11

00:00:46.590  -->  00:00:52.230
Perhaps it doesn't make sense for the average beginner to try to concoct their own video solution.

12

00:00:52.230  -->  00:00:59.010
But for the time being let's get started in front of you is an example page that I've created for this

13

00:00:59.010  -->  00:01:00.150
lesson.

14

00:01:00.150  -->  00:01:05.190
We can see that there's a bit of dummy text mentioning there should be a video but there's clearly not

15

00:01:05.190  -->  00:01:06.860
a video player at the moment.

16

00:01:06.960  -->  00:01:11.940
So our goal for this lesson is to work together to add a video player.

17

00:01:11.940  -->  00:01:18.060
Let's jump into our text editor and we want to add a video directly below this paragraph.

18

00:01:18.090  -->  00:01:23.580
The first thing that I'll mention is that the code for including a video file is nearly identical to

19

00:01:23.580  -->  00:01:30.630
the code that we used for adding an audio file so the elements name is simply video within the video

20

00:01:30.630  -->  00:01:34.700
element will create another element named source.

21

00:01:34.740  -->  00:01:40.230
The first attribute that be assigned to the source element is SIRC and this is where we point the web

22

00:01:40.230  -->  00:01:45.960
browser to the video file that we want to include the video file that I want to include is currently

23

00:01:45.960  -->  00:01:49.050
on my desktop and it is named example.

24

00:01:49.140  -->  00:01:54.250
MP for our Web site currently lives in this folder.

25

00:01:54.270  -->  00:02:01.350
So lets move the video file to sit in the same directory as our HVM web page.

26

00:02:01.350  -->  00:02:06.570
Now within this directory let's create a folder named video just to stay organized and then move our

27

00:02:06.570  -->  00:02:08.330
video into that folder.

28

00:02:08.490  -->  00:02:11.960
So within our code we will move into the video folder.

29

00:02:12.360  -->  00:02:16.810
Then include a forward slash and then simply type the name of the video file.

30

00:02:16.890  -->  00:02:17.800
Example.

31

00:02:18.150  -->  00:02:25.950
For the second attribute that we will want to add to our source element is named type and it just lets

32

00:02:25.950  -->  00:02:28.580
the web browser know what type of file this is.

33

00:02:28.590  -->  00:02:33.400
So obviously it's a video file and the extension is MP4.

34

00:02:33.830  -->  00:02:40.440
Finally let's add the attribute name of controls to the parent video element to make sure that web browsers

35

00:02:40.470  -->  00:02:43.950
attempt to add pause play in volume buttons.

36

00:02:43.950  -->  00:02:49.210
So if I save and then refresh the page in Firefox we see something interesting.

37

00:02:49.710  -->  00:02:56.010
If I were using a different web browser say Google Chrome or Internet Explorer or Safari the video would

38

00:02:56.010  -->  00:02:57.130
load correctly.

39

00:02:57.210  -->  00:03:01.050
However because I'm using Mozilla Firefox for Mac OS 10.

40

00:03:01.260  -->  00:03:08.630
Currently that browser and platform does not support MP for video files in a month or maybe six months

41

00:03:08.640  -->  00:03:10.000
maybe in a year it will.

42

00:03:10.020  -->  00:03:11.840
But as of today it doesn't.

43

00:03:11.850  -->  00:03:18.390
So what we can do is include a second source element inside our video element to make sure that different

44

00:03:18.390  -->  00:03:22.520
browsers can still view the video.

45

00:03:23.220  -->  00:03:27.890
Now on my desktop I have a video file named example dot web M.

46

00:03:28.020  -->  00:03:34.020
It's the exact same VIDEOCLIP as the video that's currently in the video folder named example not before

47

00:03:34.710  -->  00:03:39.930
it's just been saved in a different file format so lets move that into the correct folder and then in

48

00:03:39.930  -->  00:03:43.780
our code will point towards that file video.

49

00:03:43.800  -->  00:03:50.150
Example dot web M type video with an extension of web m.

50

00:03:50.160  -->  00:03:56.820
So now if I save and refresh in Firefox you can see that there is a video and when I click the play

51

00:03:56.820  -->  00:03:59.770
button we should see movement with the voiceover.

52

00:03:59.790  -->  00:04:03.900
This is an example video file of me moving my mouse around.

53

00:04:04.380  -->  00:04:11.010
Excellent but lets go the extra mile and add a third source element to make sure that every device and

54

00:04:11.010  -->  00:04:15.030
platform under the sun can view the video on my desktop.

55

00:04:15.030  -->  00:04:18.440
I have a third file named example dot ogv.

56

00:04:18.600  -->  00:04:28.200
So let's move that into the video folder and then in our code will create a third source element video

57

00:04:28.200  -->  00:04:28.390
.

58

00:04:28.440  -->  00:04:35.350
Example dot O.G. V and the type equals video with an OG extension.

59

00:04:36.120  -->  00:04:43.260
So we now have three identical videos saved in different file formats and these are the three most popular

60

00:04:43.350  -->  00:04:46.440
HMO five video formats.

61

00:04:46.440  -->  00:04:52.410
I want to reiterate that the web browser will not download or send a server request for all three videos

62

00:04:52.410  -->  00:04:52.760
.

63

00:04:52.770  -->  00:04:59.130
It will stop as soon as it gets to the first video that it supports playback for this means that among

64

00:04:59.130  -->  00:05:04.980
modern web browsers and devices we have covered all of our bases and we have ensured that our video

65

00:05:04.980  -->  00:05:06.070
is accessible.

66

00:05:06.260  -->  00:05:15.660
However older or outdated versions of web browsers do not support native HTML video they instead require

67

00:05:15.690  -->  00:05:19.570
a plugin usually Adobe's Flash.

68

00:05:19.580  -->  00:05:26.960
However this is a course on HTL not Adobe Flash or building custom video solutions.

69

00:05:27.030  -->  00:05:34.710
So what we will do to handle legacy browsers is simply include a bit of simple fallback text your web

70

00:05:34.710  -->  00:05:42.430
browser is out dated and does not support H TNL video.

71

00:05:42.510  -->  00:05:50.490
Please consider updating and then we can make the word updating a link.

72

00:05:51.750  -->  00:05:57.720
And if users click on it we'll point them towards a Web site named browse happy dot com.

73

00:05:57.720  -->  00:06:02.590
The browse happy website will give users more information on how to update their browser.

74

00:06:02.880  -->  00:06:08.010
So that's an example of how each DML can natively add video to a page.

75

00:06:08.020  -->  00:06:12.870
However in the real world it's a little bit more complicated than that.

76

00:06:12.870  -->  00:06:14.920
Here are a few reasons why.

77

00:06:15.030  -->  00:06:18.590
Number one older browsers support in the real world.

78

00:06:18.600  -->  00:06:23.370
It's probably not the best idea to tell users to hit the road if they don't have the newest web browser

79

00:06:23.370  -->  00:06:23.910
.

80

00:06:23.910  -->  00:06:28.700
So you will need some sort of Adobe Flash fallback support for legacy browsers.

81

00:06:28.800  -->  00:06:31.340
Number two video resolution.

82

00:06:31.500  -->  00:06:36.960
For example if someone comes to our website and they have a slow internet connection it probably doesn't

83

00:06:36.960  -->  00:06:41.010
make sense to serve them up at 10 ETP high def video.

84

00:06:41.010  -->  00:06:44.620
So instead we need a video solution that can do either one of two things.

85

00:06:44.700  -->  00:06:45.620
Maybe even both.

86

00:06:45.720  -->  00:06:52.080
Number one automatically detect the user's speed and then adjust the video resolution to the quality

87

00:06:52.080  -->  00:06:57.780
of the video depending on their speed or number two we have some sort of resolution picture so users

88

00:06:57.780  -->  00:07:04.830
can click or tap on a menu to choose do they want 240 P or ATP 10 ADP or somewhere in between to match

89

00:07:04.830  -->  00:07:06.240
their speed.

90

00:07:06.240  -->  00:07:10.530
Number three custom UI or branding concerns.

91

00:07:10.560  -->  00:07:15.120
So for example what if we want to control the way that the pause in play icons look or where they sit

92

00:07:15.120  -->  00:07:20.060
or what color they are in order to override the default HVM L5 control bar.

93

00:07:20.070  -->  00:07:23.010
We're going to need to write a bit of Javascript.

94

00:07:23.010  -->  00:07:26.460
Now what do all three of these complications have in common.

95

00:07:26.490  -->  00:07:33.330
They are all outside the scope of basic h TNL which means until you are an experienced web developer

96

00:07:33.510  -->  00:07:38.580
until you're familiar with writing javascript code you will have a tough time tackling any of these

97

00:07:38.580  -->  00:07:39.900
issues on your own.

98

00:07:40.230  -->  00:07:43.420
And there's usually no sense in trying to reinvent the wheel.

99

00:07:43.620  -->  00:07:48.810
Instead I recommend you use a third party video hosting service.

100

00:07:48.810  -->  00:07:49.800
Some of them are free.

101

00:07:49.800  -->  00:07:51.120
Some of them cost money.

102

00:07:51.180  -->  00:07:55.890
You can from your own web search but at the end of the day it's a central place where you can upload

103

00:07:55.890  -->  00:07:59.030
a video and they will take care of everything else for you.

104

00:07:59.040  -->  00:08:03.900
They'll give you a bit of code that you can copy and paste into your web page and then your users your

105

00:08:03.900  -->  00:08:10.710
visitors will receive a flawless video experience that's going to conclude this lesson on adding video

106

00:08:10.740  -->  00:08:12.110
to a page.

107

00:08:12.240  -->  00:08:13.800
I'll see you in the next lesson
