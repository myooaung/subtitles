1
00:00:00,530 --> 00:00:01,460
Nous reprenons nos activités.

2
00:00:01,550 --> 00:00:03,980
Et si quelqu'un vient sur notre site sur un petit écran.

3
00:00:05,650 --> 00:00:07,900
Ils reçoivent une belle disposition sur une seule colonne.

4
00:00:13,400 --> 00:00:13,850
D'accord.

5
00:00:13,880 --> 00:00:16,910
Je viens donc d'ajouter cette nouvelle section au bas de la page.

6
00:00:17,240 --> 00:00:21,440
Et dans cet exemple, je veux que vous pensiez à une situation où vous avez plusieurs éléments différents.

7
00:00:21,440 --> 00:00:24,860
J'en ai donc cinq, mais vous pourriez en avoir 10, 20 ou 100.

8
00:00:25,280 --> 00:00:28,850
Alors pensez peut-être à une galerie de photos ou à un type de grille d'articles.

9
00:00:29,090 --> 00:00:33,410
Et dans cette situation, nous ne voulons pas que nos articles soient de taille flexible.

10
00:00:33,620 --> 00:00:37,430
Donc, dans ce cas, nous voulons que nos articles aient une taille très verrouillée.

11
00:00:37,700 --> 00:00:45,230
J'ai donc donné à chacune de ces boîtes une valeur de largeur traditionnelle très précise de 150 pixels et une

12
00:00:45,230 --> 00:00:48,110
valeur de hauteur traditionnelle d'exactement 100 pixels.

13
00:00:48,470 --> 00:00:54,440
Donc vraiment, tout ce que j'utilise pour flex box est de répartir uniformément l'espace restant entre chacun

14
00:00:54,440 --> 00:00:55,190
des éléments.

15
00:00:55,880 --> 00:01:00,800
Maintenant, cela fonctionne bien lorsqu'il y a plus qu'assez d'espace pour contenir tous les éléments sur une seule ligne.

16
00:01:01,100 --> 00:01:03,710
Mais regardez ce qui se passe lorsque je rétrécis la fenêtre de mon navigateur.

17
00:01:05,710 --> 00:01:09,110
Notez donc que les cases rouges restent de la même taille, ce qui est bien.

18
00:01:09,320 --> 00:01:13,430
C'est juste l'espace entre les éléments rouges qui diminue, c'est ce que nous voulons.

19
00:01:13,490 --> 00:01:16,220
Mais vous remarquerez que la boîte flexible est très têtue.

20
00:01:17,120 --> 00:01:20,240
Il est obstiné de garder tous les éléments sur une seule rangée.

21
00:01:20,690 --> 00:01:26,480
Donc, même lorsque mon écran devient trop petit pour contenir confortablement tous les articles sur une rangée, la boîte de Fleck dit, je ne

22
00:01:26,960 --> 00:01:27,710
bouge pas.

23
00:01:28,040 --> 00:01:33,110
Et même lorsque mon écran devient aussi étroit et que les éléments sont loin d'être aussi larges qu'ils devraient l'être, rappelez-vous,

24
00:01:33,110 --> 00:01:36,350
je leur ai dit qu'ils devaient avoir une largeur de cent cinquante pixels.

25
00:01:36,590 --> 00:01:42,020
La boîte de Fleck fait juste une crise de colère et ne laisse pas les articles s'enrouler sur une deuxième ou

26
00:01:42,020 --> 00:01:45,920
une troisième ligne afin qu'il y ait suffisamment d'espace pour qu'ils gardent leur taille prévue.

27
00:01:46,160 --> 00:01:52,100
Donc, la question devient, comment pouvons-nous dire à la boîte de Fleck qu'il est OK de dérouler et d'avoir plusieurs

28
00:01:52,100 --> 00:01:52,910
rangées d'articles?

29
00:01:53,180 --> 00:01:59,150
Eh bien, tout ce que nous devons faire dans notre CSX dans la règle qui cible votre élément

30
00:01:59,420 --> 00:02:06,300
parent ou conteneur, nous utilisons simplement une propriété nommée flex dash wrap et par défaut, elle a la valeur no rap.

31
00:02:06,770 --> 00:02:08,720
Et c'est ce qui cause le comportement obstiné.

32
00:02:08,930 --> 00:02:14,270
Mais si nous le réglons simplement sur flex, wrap, wrap et allez-y et économisez.

33
00:02:15,720 --> 00:02:19,440
Nous voyons que la boîte flexible tombera gracieusement sur plusieurs lignes.

34
00:02:19,650 --> 00:02:20,760
Seulement quand il le faut.

35
00:02:20,790 --> 00:02:23,580
Donc, sur des écrans plus petits, nous voyons qu'il y a plusieurs lignes.

36
00:02:23,610 --> 00:02:25,290
Mais sur des écrans plus grands.

37
00:02:27,570 --> 00:02:31,800
Quand c'est possible, la boîte flexible placera toujours tout sur une seule rangée.

38
00:02:38,050 --> 00:02:38,470
D'accord.

39
00:02:38,510 --> 00:02:41,360
Je viens d'ajouter cette nouvelle section au bas de la page.

40
00:02:41,810 --> 00:02:47,000
Et notre objectif pour cet exemple est d'envoyer parfaitement à ce texte dans cette boîte gris foncé.

41
00:02:47,570 --> 00:02:51,290
Nous voulons donc le centrer verticalement et horizontalement.

42
00:02:51,680 --> 00:02:53,630
Jetons donc un œil à notre H CML.

43
00:02:53,960 --> 00:02:59,870
La boîte gris foncé a juste une classe de bannière et nichée dedans est une autre div qui a une classe de

44
00:02:59,870 --> 00:03:00,530
centre me.

45
00:03:00,560 --> 00:03:02,180
Et c'est ce qui contient le texte.

46
00:03:02,660 --> 00:03:08,360
Si nous jetons un coup d'œil à notre CSX, la div de conteneur qui a un fond gris foncé a une

47
00:03:08,360 --> 00:03:11,780
largeur définie de 700 pixels et une hauteur définie de 400 pixels.

48
00:03:12,050 --> 00:03:17,000
Maintenant, le div qui contient réellement le contenu que nous voulons centrer, nous n'allons pas lui donner une valeur

49
00:03:17,000 --> 00:03:18,770
spécifique de largeur et de hauteur.

50
00:03:19,000 --> 00:03:24,530
Sa largeur en hauteur est déterminée dynamiquement par le nombre de lettres de texte dans le paragraphe.

51
00:03:24,830 --> 00:03:30,230
Et la taille de police qu'il utilise maintenant, depuis la nuit des temps, il a été un peu difficile de centrer le

52
00:03:30,230 --> 00:03:34,700
contenu avec CSX lorsque le contenu que vous essayez de centrer a une largeur de hauteur inconnue.

53
00:03:35,150 --> 00:03:39,140
Maintenant, sans boîte flexible, le centrer horizontalement serait assez simple.

54
00:03:39,350 --> 00:03:44,720
Nous dirions simplement à l'élément parent d'utiliser le texte aligner le centre, mais en le centrant verticalement.

55
00:03:44,900 --> 00:03:45,980
Cela a toujours été délicat.

56
00:03:46,250 --> 00:03:46,470
Droite.

57
00:03:46,490 --> 00:03:52,670
Donc, une façon populaire consiste à le définir pour positionner à 50% absolu à partir du haut, puis à utiliser la traduction

58
00:03:52,670 --> 00:03:53,250
de transformation.

59
00:03:53,270 --> 00:03:55,820
Eh bien, pour le remonter de la moitié de sa propre hauteur.

60
00:03:56,150 --> 00:03:56,320
D'ACCORD.

61
00:03:56,390 --> 00:04:01,730
Il existe donc toutes sortes de façons créatives différentes de centrer le contenu, mais aucune n'est super

62
00:04:01,730 --> 00:04:03,260
facile ou super intuitive.

63
00:04:03,790 --> 00:04:05,660
Mais le flex box change cela.

64
00:04:05,720 --> 00:04:08,300
Alors regardez comme il est simple de centrer ce contenu.

65
00:04:08,780 --> 00:04:12,500
Nous disons simplement aux parents ou à l'élément conteneur d'utiliser la boîte flexible.

66
00:04:12,530 --> 00:04:14,120
Alors affichez flex.

67
00:04:14,660 --> 00:04:18,830
Et puis pour l'élément enfant que nous voulons centrer, nous utilisons simplement la marge.

68
00:04:19,130 --> 00:04:24,830
Vous pouvez donc connaître la méthode traditionnelle de centrage horizontal d'un élément de niveau de bloc en disant marge

69
00:04:24,830 --> 00:04:25,760
zéro automatique.

70
00:04:25,990 --> 00:04:26,230
Droite.

71
00:04:26,270 --> 00:04:28,910
Cette stratégie existe donc depuis la nuit des temps.

72
00:04:29,330 --> 00:04:34,760
Il n'ajoute aucune marge verticale, mais le réglage des marges horizontales sur auto le centrera.

73
00:04:35,120 --> 00:04:39,440
Eh bien, en combinant cela avec une boîte flexible, cette stratégie de marge obtient un énorme coup de pouce.

74
00:04:39,500 --> 00:04:40,280
Alors regardez ça.

75
00:04:40,550 --> 00:04:43,460
Cette ligne de code traditionnelle centrerait quelque chose horizontalement.

76
00:04:43,700 --> 00:04:45,710
Mais si nous disons simplement marge automatique.

77
00:04:45,740 --> 00:04:48,980
Donc, cela utilisera la marge automatique dans les quatre directions.

78
00:04:49,160 --> 00:04:51,260
En haut, à droite, en bas et à gauche.

79
00:04:51,470 --> 00:04:54,460
Tant que l'élément parent est défini pour afficher flex.

80
00:04:54,530 --> 00:04:57,020
Observez la magie que cette ligne de code créera.

81
00:04:59,240 --> 00:05:03,680
Je sais qu'il peut sembler que je suis excité par rien, mais croyez-moi, si vous avez essayé

82
00:05:03,680 --> 00:05:08,090
de centrer verticalement du contenu dans le passé, vous partagerez probablement ma joie de la simplicité.

83
00:05:08,210 --> 00:05:10,010
Alors merci, boîte flexible.

84
00:05:15,710 --> 00:05:16,050
D'accord.

85
00:05:16,100 --> 00:05:20,840
Je viens d'ajouter cette nouvelle section au bas de la page, et ce sera notre dernier exemple dans la

86
00:05:20,840 --> 00:05:21,260
vidéo.

87
00:05:21,680 --> 00:05:23,930
Donc, si vous êtes arrivé aussi loin, tapotez-vous dans le dos.

88
00:05:24,320 --> 00:05:24,540
D'ACCORD.

89
00:05:24,590 --> 00:05:26,120
Voilà donc ce que je commence.

90
00:05:26,150 --> 00:05:31,250
Mais permettez-moi de passer à mon autre onglet pour vous montrer le produit fini de ce que nous allons

91
00:05:31,250 --> 00:05:31,970
transformer en.

92
00:05:33,260 --> 00:05:34,290
Alors, que regardons-nous ici?

93
00:05:34,310 --> 00:05:35,210
Quel est l'objectif ici?

94
00:05:35,510 --> 00:05:37,590
Eh bien, fondamentalement, nous avons une disposition en deux colonnes, non?

95
00:05:37,640 --> 00:05:40,640
Voici donc une colonne et voici la deuxième colonne.

96
00:05:41,240 --> 00:05:46,520
Et l'effet que j'essaie de démontrer ici que nous allons travailler est que cette colonne est la colonne

97
00:05:46,520 --> 00:05:47,120
principale.

98
00:05:47,150 --> 00:05:47,340
Droite.

99
00:05:47,390 --> 00:05:51,860
Il contient donc le contenu qui définit la hauteur de ce bloc entier.

100
00:05:52,340 --> 00:05:57,260
Et puis dans notre deuxième colonne, imaginons que nous voulons le diviser verticalement en deux.

101
00:05:57,590 --> 00:06:03,020
Donc, peu importe combien ou peu de contenu vit dans la colonne de gauche, que ce bloc global

102
00:06:03,020 --> 00:06:09,320
devienne plus grand ou plus court, selon ce contenu, nous voulons toujours que cette boîte bleue et cette boîte verte partagent

103
00:06:09,320 --> 00:06:11,420
la hauteur disponible de manière égale.

104
00:06:11,810 --> 00:06:16,610
Maintenant, encore une fois, cela peut ne pas sembler être un bon exemple, mais croyez-moi, si vous avez déjà utilisé des flotteurs pour

105
00:06:16,610 --> 00:06:17,430
essayer de créer.

106
00:06:17,450 --> 00:06:18,650
Appelez-les mises en page.

107
00:06:18,980 --> 00:06:22,190
Vous savez que quelque chose comme ça est plus difficile à configurer qu'il n'y paraît.

108
00:06:22,430 --> 00:06:24,290
Mais avec la boîte de Fleck, ce n'est pas si mal.

109
00:06:24,470 --> 00:06:27,340
Revenons donc à notre onglet Travail en cours.

110
00:06:28,100 --> 00:06:30,560
Ne nous inquiétons pas tout de suite de la séparation verticale.

111
00:06:30,650 --> 00:06:33,350
Commençons par configurer les deux colonnes.

112
00:06:34,280 --> 00:06:36,780
Commençons donc par regarder notre roue HDMI.

113
00:06:37,310 --> 00:06:42,490
Nous avons donc un élément parent ou conteneur avec une classe de conteneur de hauteur égale imbriquée à l'intérieur.

114
00:06:42,500 --> 00:06:44,060
C'est la première colonne.

115
00:06:44,090 --> 00:06:45,950
C'est donc un div avec une classe de premier.

116
00:06:47,510 --> 00:06:51,860
Et puis ici, nous voyons la deuxième colonne et a une classe de deuxième, puis imbriqué dans cela.

117
00:06:51,920 --> 00:06:53,690
Ceci est la boîte bleue.

118
00:06:53,750 --> 00:06:55,550
Et ceci est la boîte verte.

119
00:06:55,940 --> 00:06:56,150
D'accord.

120
00:06:56,180 --> 00:06:59,080
Commençons donc par créer simplement la disposition simple à colonne.

121
00:06:59,210 --> 00:07:03,830
Donc, sur une heure, CSX, c'est la règle pour notre élément parent ou conteneur.

122
00:07:03,890 --> 00:07:07,050
Nous allons donc lui dire qu'il s'agit d'un affichage flexible.

123
00:07:07,700 --> 00:07:07,950
D'accord.

124
00:07:08,000 --> 00:07:10,010
Voici la règle pour notre première colonne.

125
00:07:10,070 --> 00:07:12,080
Nous pouvons donc simplement dire flex one.

126
00:07:12,440 --> 00:07:16,490
Rappelez-vous, l'un est la valeur de base lorsque nous voulons répartir uniformément l'espace.

127
00:07:16,970 --> 00:07:21,320
Donc, nous dirons également à la deuxième colonne d'avoir une valeur de flexion de un.

128
00:07:23,550 --> 00:07:23,800
D'ACCORD.

129
00:07:23,860 --> 00:07:25,680
Cela nous donne donc la disposition à deux colonnes.

130
00:07:25,720 --> 00:07:27,890
Appelez-les donc une colonne aussi.

131
00:07:28,300 --> 00:07:31,540
Jusqu'à présent, nous n'avons pas utilisé de nouveau code ou de nouvelles techniques pour y parvenir.

132
00:07:31,630 --> 00:07:38,290
Et maintenant, nous voulons juste que cette boîte bleue et la boîte verte partagent également toute cette hauteur disponible restante

133
00:07:38,290 --> 00:07:39,400
dans cette colonne.

134
00:07:39,850 --> 00:07:44,770
Donc, pour y parvenir, nous allons imbriquer Aflex à l'intérieur d'Aflex, pour ainsi dire.

135
00:07:44,950 --> 00:07:46,420
Donc au sein de notre CSX.

136
00:07:47,900 --> 00:07:52,920
Il s'agit de la règle pour la deuxième colonne, la colonne de droite et imbriquée à l'intérieur.

137
00:07:52,940 --> 00:07:55,790
Rappelez-vous, il y a la boîte bleue et la boîte verte.

138
00:07:56,120 --> 00:08:02,120
Donc, si nous voulons que ces deux éléments enfants utilisent tout l'espace disponible de son parent, nous

139
00:08:02,120 --> 00:08:05,690
dirons simplement à cet élément parent d'utiliser les flaks d'affichage.

140
00:08:06,050 --> 00:08:11,750
Maintenant, si je l'enregistre et le rafraîchis, vous remarquerez que les cases bleues et vertes sont maintenant très étroites et

141
00:08:11,750 --> 00:08:13,370
leurs positions côte à côte.

142
00:08:13,760 --> 00:08:14,720
Cela a du sens, non?

143
00:08:14,750 --> 00:08:20,810
Parce que tout au long de cette vidéo, nous avons utilisé une boîte flexible pour partager l'espace horizontal disponible.

144
00:08:21,110 --> 00:08:26,120
Maintenant, la raison pour laquelle les boîtes bleue et verte sont si étroites est qu'elles ne contiennent qu'une seule lettre.

145
00:08:26,390 --> 00:08:26,590
Droite.

146
00:08:26,630 --> 00:08:28,050
C'est donc tout l'espace dont ils ont besoin.

147
00:08:28,310 --> 00:08:33,650
Mais si nous voulions que la boîte bleue et verte partage également toute la largeur disponible, nous savons quoi

148
00:08:33,650 --> 00:08:33,950
faire.

149
00:08:34,010 --> 00:08:36,260
Nous l'avons déjà fait plusieurs fois dans cette vidéo.

150
00:08:36,770 --> 00:08:40,130
Donc, nous dirions simplement à la boîte bleue d'avoir une valeur de flexion de un.

151
00:08:40,700 --> 00:08:43,540
Et nous dirions à la boîte verte d'avoir une valeur de flexion de un.

152
00:08:45,550 --> 00:08:50,080
D'accord, mais nous ne voulons pas que les cases verte et bleue partagent l'espace horizontal.

153
00:08:50,380 --> 00:08:54,940
Nous voulons que chacun d'eux soit pleine largeur et nous voulons qu'ils partagent l'espace vertical.

154
00:08:55,510 --> 00:08:59,260
Maintenant, par défaut, la boîte de Fleck vous permet de partager l'espace horizontal.

155
00:08:59,560 --> 00:09:00,970
Mais nous pouvons ajuster cela.

156
00:09:01,270 --> 00:09:07,510
Alors rappelez-vous quand nous avons dit au deuxième appel d'Hiv d'utiliser Flex d'affichage parce qu'il a les enfants bleus

157
00:09:07,510 --> 00:09:08,290
et verts?

158
00:09:08,770 --> 00:09:14,440
Eh bien, cela signifie que le deuxième div est un div parent ou conteneur et infléchit la boîte.

159
00:09:14,480 --> 00:09:19,810
Il existe une propriété que nous pouvons ajouter aux éléments de conteneur nommée Flex Direction.

160
00:09:20,770 --> 00:09:23,200
Désormais, par défaut, sa valeur est définie sur row.

161
00:09:23,530 --> 00:09:29,500
Et c'est pourquoi tout au long de la vidéo jusqu'à présent, la boîte de Fleck a divisé l'espace horizontal.

162
00:09:29,740 --> 00:09:30,070
Droite.

163
00:09:30,120 --> 00:09:31,270
Rowe Space.

164
00:09:31,600 --> 00:09:36,920
Mais si nous définissons notre conteneur de boîte flexible ou l'élément parent sur la colonne de direction flexible.

165
00:09:37,450 --> 00:09:41,380
Maintenant, Flex Box se divisera et partagera l'espace vertical disponible.

166
00:09:41,890 --> 00:09:42,460
Parfait.

167
00:09:42,700 --> 00:09:46,540
Et cela va en fait mettre fin à cette vidéo sur la boîte flexible.

168
00:09:46,900 --> 00:09:50,350
Nous n'avons fait qu'effleurer la surface de ce qui est possible avec la boîte flexible.

169
00:09:50,620 --> 00:09:54,220
Mais je pense que cette vidéo devrait vous donner suffisamment de concepts pour aller expérimenter.

170
00:09:54,640 --> 00:09:56,110
Continuons sur notre lancée.

171
00:09:56,230 --> 00:09:59,020
Et je vous verrai dans la prochaine leçon.
