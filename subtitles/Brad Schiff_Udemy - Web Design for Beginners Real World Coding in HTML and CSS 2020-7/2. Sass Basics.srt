1
00:00:00,240 --> 00:00:03,690
Donc, avec la logistique à l'écart, plongons-nous.

2
00:00:04,650 --> 00:00:06,240
Nous voici dans le navigateur Web.

3
00:00:06,300 --> 00:00:12,610
Il s'agit d'un exemple de page et aucun style CSI ne lui est encore appliqué à ce stade.

4
00:00:12,630 --> 00:00:15,180
C'est du HDMI brut pur.

5
00:00:16,400 --> 00:00:21,410
Ainsi, dans le code de cette page, nous pouvons voir que, comme dans toutes les autres leçons du

6
00:00:21,410 --> 00:00:26,390
cours, nous établissons un lien vers un fichier CSX qui réside dans un dossier nommé CSX.

7
00:00:26,450 --> 00:00:29,300
Et le fichier est nommé Screened Out CSX.

8
00:00:29,990 --> 00:00:33,050
Voici donc le dossier où le HDMI L. Paige vit.

9
00:00:33,440 --> 00:00:34,850
Voici le dossier CSX.

10
00:00:35,420 --> 00:00:36,400
Voici l'écran.

11
00:00:36,420 --> 00:00:37,550
C'est le fichier SS.

12
00:00:37,760 --> 00:00:40,010
Maintenant, actuellement, ce fichier est vide.

13
00:00:40,280 --> 00:00:42,650
Il n'y a pas une once de code CSX dedans.

14
00:00:43,120 --> 00:00:49,850
Maintenant, nous pouvons voir dans ce dossier qu'il y a un fichier supplémentaire nommé Screen Dot s CSX.

15
00:00:50,360 --> 00:00:55,010
Cette extension de fichier signifie Sasy CSX.

16
00:00:55,460 --> 00:00:59,330
Donc, dans cette leçon, nous allons écrire Sask Code dans ce fichier.

17
00:01:00,080 --> 00:01:06,650
Et chaque fois que nous enregistrons nos progrès, le compilateur SAS intermédiaire qui s'exécute en

18
00:01:06,650 --> 00:01:13,640
arrière-plan sur mon ordinateur détecte l'enregistrement, puis prend un instantané mental de notre code Sask, le convertit

19
00:01:13,640 --> 00:01:19,460
en CSX normal et exporte cette sortie dans cet écran. le fichier CSX.

20
00:01:19,790 --> 00:01:25,370
Ainsi, nous avons toujours un fichier CSX traditionnel que nous pouvons transmettre au navigateur Web.

21
00:01:26,450 --> 00:01:33,260
OK, nous voici donc dans l'éditeur de texte sur le côté gauche de l'écran, les fichiers SS nazis impertinents sont-ils actuellement

22
00:01:33,260 --> 00:01:33,800
vides?

23
00:01:34,250 --> 00:01:41,480
Et je veux commencer par vous montrer que le sassy CSX est complètement à l'envers, compatible avec le CSX normal.

24
00:01:42,320 --> 00:01:50,120
Nous pouvons donc écrire un peu de code normal comme la police du corps, la famille, Helvetica, sans serif.

25
00:01:50,510 --> 00:01:58,010
Et si je sauvegarde, nous voyons sur le côté droit de l'écran que le fichier DOT CSX normal est automatiquement fourni une

26
00:01:58,220 --> 00:02:02,660
copie de tout ce que nous avons tapé dans notre fichier CSX sasy.

27
00:02:03,050 --> 00:02:07,070
C'est donc le compilateur SAS intermédiaire en arrière-plan qui fait son travail.

28
00:02:07,460 --> 00:02:13,550
Donc, si nous nous dirigeons vers le navigateur Web et actualisons, nous pouvons voir que la police Helvetica est utilisée.

29
00:02:14,210 --> 00:02:18,470
Mais ce n'était pas un changement très excitant car c'était juste du CSX standard.

30
00:02:18,770 --> 00:02:22,700
Essayons notre premier aperçu de la syntaxe sass.

31
00:02:23,450 --> 00:02:27,620
Imaginons donc que nous voulons définir un schéma de couleurs pour cette page.

32
00:02:28,220 --> 00:02:34,280
Imaginons que nous ayons identifié cette nuance d'orange comme couleur principale d'une palette.

33
00:02:34,700 --> 00:02:39,680
Commençons donc par appliquer cette couleur orange à tous les liens de la page.

34
00:02:40,550 --> 00:02:49,010
Donc, si nous n'utilisions pas SAS, nous dirions simplement, A, pour sélectionner la couleur des éléments de colère, puis collez le

35
00:02:49,010 --> 00:02:50,900
code de couleur hexadécimal.

36
00:02:51,380 --> 00:02:56,000
Maintenant, vous savez, nous aurons encore besoin de cette valeur de couleur ailleurs dans notre feuille de style.

37
00:02:56,360 --> 00:02:59,600
Et cela n'a aucun sens d'essayer de le rechercher ou de le mémoriser.

38
00:03:00,050 --> 00:03:03,320
Donc, à la place, je vais supprimer la référence à la couleur.

39
00:03:03,650 --> 00:03:12,650
Et tout en haut de la feuille de style, je vais utiliser le signe dollar et dire deux points de couleur primaire, puis coller

40
00:03:13,310 --> 00:03:15,530
le code de couleur hexadécimal.

41
00:03:15,830 --> 00:03:18,140
Je viens donc de créer une variable.

42
00:03:18,650 --> 00:03:23,310
Nous ne pouvons pas créer de variables dans CSX normal, mais nous pouvons le faire dans SAS.

43
00:03:23,990 --> 00:03:29,690
Maintenant, pour ceux d'entre vous qui n'ont pas utilisé de langage de programmation dans le passé, une variable dans ce

44
00:03:29,780 --> 00:03:32,720
contexte n'est qu'un nom de code pour cette valeur.

45
00:03:33,380 --> 00:03:38,330
Alors maintenant, nous pouvons référencer ce code couleur hexadécimal en disant simplement la couleur primaire.

46
00:03:38,800 --> 00:03:44,810
Ainsi, dans cette salle, quatre liens peuvent indiquer que la couleur doit utiliser la couleur primaire.

47
00:03:45,290 --> 00:03:50,810
Donc, si je sauvegarde, nous voyons que le compilateur SAS a converti ce code en ceci.

48
00:03:51,910 --> 00:03:57,070
Donc, si nous chargeons la page Web et l'actualisons, nous pouvons voir que tous nos liens sont maintenant orange.

49
00:03:57,670 --> 00:04:03,580
Donc, le concept clé ici est qu'il n'est pas nécessaire de nous répéter en tant que codeurs si nous savons que nous allons

50
00:04:03,580 --> 00:04:05,380
utiliser une valeur plus d'une fois.

51
00:04:05,440 --> 00:04:09,130
Définissons-le comme une variable avant de continuer.

52
00:04:09,160 --> 00:04:13,510
Je tiens à souligner qu'il n'y a rien de spécial dans l'expression couleur primaire.

53
00:04:13,960 --> 00:04:15,640
Cela n'a aucune signification inhérente.

54
00:04:16,030 --> 00:04:16,960
Je l'ai fait.

55
00:04:17,260 --> 00:04:20,470
Vous pouvez choisir n'importe quel nom pour votre variable que vous souhaitez.

56
00:04:20,860 --> 00:04:26,830
Ainsi, par exemple, au lieu de la couleur primaire, je pourrais nommer cette belle teinte.

57
00:04:27,280 --> 00:04:31,240
Et puis dans la salle pour notre couleur liée, j'utiliserais à nouveau cette phrase.

58
00:04:31,270 --> 00:04:32,350
Beau cube.

59
00:04:32,950 --> 00:04:35,800
Peu importe donc ce que vous choisissez pour vos noms de variables.

60
00:04:35,980 --> 00:04:42,760
L'idée est que nous ne définissons nos valeurs qu'une seule fois, puis nous utilisons le nom de la variable dans le reste de notre

61
00:04:42,760 --> 00:04:43,930
feuille de style.

62
00:04:44,680 --> 00:04:50,110
C'est donc la première fonctionnalité de SAS, la possibilité de créer et d'utiliser des variables.

63
00:04:50,830 --> 00:04:54,430
Passons à la fonctionnalité suivante, appelée Nesting.

64
00:04:55,370 --> 00:04:58,640
Afin de voir l'imbrication et l'action, donnons-nous un objectif.

65
00:04:59,060 --> 00:05:04,850
Imaginons que nous voulons styliser cette navigation dans l'en-tête pour ressembler à un menu de navigation

66
00:05:04,910 --> 00:05:05,960
horizontal traditionnel.

67
00:05:06,650 --> 00:05:13,130
Donc, dans notre H. T. code email, nous pouvons voir que le menu de navigation n'est rien de plus qu'un

68
00:05:13,150 --> 00:05:14,300
élément NAV avec une liste non ordonnée.

69
00:05:14,570 --> 00:05:18,170
Et puis listez les éléments avec un lien à l'intérieur de chaque élément.

70
00:05:18,890 --> 00:05:23,810
Et cet élément NAV vit dans l'en-tête qui a une classe d'en-tête de site.

71
00:05:24,560 --> 00:05:29,270
Donc, dans notre CSX, nous utiliserons une classe d'en-tête de site.

72
00:05:30,310 --> 00:05:32,050
Et puis ciblez l'élément NAV.

73
00:05:32,620 --> 00:05:39,460
Donc, la première chose que nous ferons est de cibler l'élément de liste non ordonné et de supprimer tout remplissage ou

74
00:05:39,520 --> 00:05:41,240
marge qui pourrait avoir ensuite.

75
00:05:41,310 --> 00:05:44,470
Nous voulons cibler les éléments de la liste et supprimer leurs puces.

76
00:05:44,500 --> 00:05:47,180
Donc style de liste, aucun.

77
00:05:47,350 --> 00:05:51,850
Faisons également flotter les éléments de la liste vers la gauche afin qu'ils reposent tous sur une seule ligne horizontale.

78
00:05:52,450 --> 00:05:58,180
Maintenant, avant d'aller plus loin, je tiens à souligner que sans sass, ce code est absolument absurde.

79
00:05:58,240 --> 00:06:00,160
Ce n'est pas valide, CSX.

80
00:06:00,520 --> 00:06:01,740
Vous ne pouvez pas imbriquer.

81
00:06:01,780 --> 00:06:03,520
Une règle à l'intérieur.

82
00:06:03,520 --> 00:06:04,420
Une autre règle.

83
00:06:04,780 --> 00:06:06,210
Mais nous pouvons avec SAS.

84
00:06:06,760 --> 00:06:10,630
L'imbrication comme celle-ci offre donc deux avantages principaux.

85
00:06:10,960 --> 00:06:14,440
Premièrement, cela nous aide à rester organisés conceptuellement.

86
00:06:15,280 --> 00:06:20,770
Nous savons que la liste non ordonnée et les éléments de la liste sont des enfants ou nos imbriqués dans l'élément head ou nav

87
00:06:20,770 --> 00:06:21,250
du site.

88
00:06:21,850 --> 00:06:24,940
Nous voyons cette structure reflétée dans notre code h t AML.

89
00:06:25,330 --> 00:06:28,630
Pourquoi ne pas voir cette structure reflétée dans notre code CSF?

90
00:06:29,290 --> 00:06:35,590
Et le deuxième avantage de l'imbrication SAS est qu'il nous évite beaucoup de saisie inutile.

91
00:06:36,010 --> 00:06:37,690
Donc, quand je clique sur Enregistrer.

92
00:06:38,650 --> 00:06:44,320
Vous voyez que le compilateur crée automatiquement des sélecteurs pour ces différentes règles.

93
00:06:44,530 --> 00:06:47,650
Cela est logique d'un point de vue CSF normal.

94
00:06:48,190 --> 00:06:53,140
Je n'ai donc pas eu besoin de taper la tête du site ou la NAV pour chaque élément que nous voulions styliser.

95
00:06:53,710 --> 00:06:57,850
Je n'ai tapé la tête du site ou NAV qu'une seule fois, puis je me suis appuyé sur l'imbrication.

96
00:06:58,900 --> 00:07:07,270
Ainsi, par exemple, ciblons les éléments de lien réels eux-mêmes, alors A, faisons-les afficher en

97
00:07:07,270 --> 00:07:07,880
bloc.

98
00:07:09,320 --> 00:07:10,700
Donnez-leur un peu de rembourrage.

99
00:07:11,240 --> 00:07:15,890
Faisons-leur utiliser une couleur d'arrière-plan orange avec une couleur de texte blanche.

100
00:07:16,700 --> 00:07:24,620
Ainsi, l'arrière-plan, la couleur, la belle couleur de teinte doivent être blancs.

101
00:07:25,430 --> 00:07:29,090
Supprimons leur texte, soulignons la décoration du texte, aucun.

102
00:07:29,510 --> 00:07:32,870
Ajoutons également un peu de marge à droite aux éléments de la liste.

103
00:07:34,890 --> 00:07:39,420
Donc, quand je sauvegarde à nouveau, vous voyez que le compilateur South a créé cette nouvelle règle.

104
00:07:39,870 --> 00:07:43,560
Et encore une fois, je n'ai pas eu à taper à vue hétér nav.

105
00:07:43,680 --> 00:07:46,230
Tout ce que j'ai fait, c'est cibler l'élément.

106
00:07:46,410 --> 00:07:53,010
Et parce que cette règle est imbriquée dans cette règle parent, le compilateur s'est occupé du reste.

107
00:07:53,760 --> 00:07:55,780
Voyons maintenant nos modifications dans le navigateur.

108
00:07:55,800 --> 00:08:00,120
Donc, si je rafraîchis, nous pouvons voir que le menu de navigation est beaucoup mieux.

109
00:08:00,720 --> 00:08:03,150
Cependant, nous voyons ce contenu se répandre.

110
00:08:03,180 --> 00:08:05,460
Et c'est parce que nous n'avons pas nettoyé les flotteurs.

111
00:08:05,760 --> 00:08:09,420
Vous vous souviendrez donc que nous avons utilisé float left sur les éléments de la liste.

112
00:08:09,870 --> 00:08:13,710
Alors allons-y et effaçons ces flottants pour que notre mise en page fonctionne toujours.

113
00:08:14,680 --> 00:08:19,840
Au bas de notre feuille de style, je vais coller le code correctif clair de facto.

114
00:08:20,230 --> 00:08:22,720
Alors maintenant, je peux ajouter une classe de groupe.

115
00:08:24,420 --> 00:08:26,100
À cet élément de liste non ordonné.

116
00:08:28,570 --> 00:08:30,070
Et notre mise en page est redevenue normale.

117
00:08:30,610 --> 00:08:33,670
Donc, pour revoir avec SAS, jusqu'à présent, nous avons vu des variables.

118
00:08:33,760 --> 00:08:35,410
Nous avons juste regardé la nidification.

119
00:08:35,920 --> 00:08:39,850
Nous allons passer à une nouvelle fonctionnalité maintenant appelée héritage.

120
00:08:40,660 --> 00:08:45,950
Afin de voir l'héritage en action, donnons-nous un objectif rapide sur notre page d'exemple.

121
00:08:45,970 --> 00:08:49,450
Nous avons ces deux liens qui lisent En savoir plus, un bouton alternatif.

122
00:08:50,300 --> 00:08:55,950
Maintenant, dans notre H. T. e-mail, nous pouvons voir que ce ne sont que des liens avec une classe de bouton A, bouton B.

123
00:08:56,530 --> 00:08:59,680
Écrivons donc CSF pour qu'ils ressemblent à des boutons.

124
00:09:00,040 --> 00:09:01,900
Alors d'abord, nous allons commencer par le bouton.

125
00:09:01,960 --> 00:09:02,890
Une classe.

126
00:09:04,050 --> 00:09:12,280
Dans notre style, elle va créer une nouvelle règle et cibler le bouton A maintenant au lieu de vous voir me préparer des

127
00:09:12,280 --> 00:09:14,770
déclarations pour un style de bouton.

128
00:09:15,220 --> 00:09:17,410
Je vais juste coller pour nous faire gagner un peu de temps.

129
00:09:17,890 --> 00:09:22,840
Donc, la seule partie intéressante de ce code est que j'utilise la belle variable de teinte pour la couleur de

130
00:09:22,840 --> 00:09:23,470
la bordure.

131
00:09:24,430 --> 00:09:30,580
Donc, si nous enregistrons et actualisons dans le navigateur, nous pouvons voir que le premier lien ressemble maintenant à un bouton.

132
00:09:31,030 --> 00:09:35,490
Concentrons-nous maintenant sur le bouton alternatif ou l'élément avec une classe de bouton B.

133
00:09:36,010 --> 00:09:41,440
Imaginons que nous voulons qu'il ressemble à la classe du bouton A, sauf que nous voulions avoir une

134
00:09:41,440 --> 00:09:42,420
couleur d'arrière-plan unique.

135
00:09:43,180 --> 00:09:47,220
Donc, dans notre feuille de style, créons une nouvelle règle pour le bouton B.

136
00:09:48,130 --> 00:09:52,300
Maintenant, je sais que je vais avoir besoin de toutes ces propriétés du bouton A, la seule chose que je

137
00:09:52,300 --> 00:09:53,740
veux changer est la couleur d'arrière-plan.

138
00:09:54,130 --> 00:09:58,690
Donc, pour tirer parti de tous ces styles, je peux simplement taper dans la règle pour le bouton.

139
00:09:58,690 --> 00:10:03,700
Soyez sur le bouton d'extension du symbole A.

140
00:10:04,780 --> 00:10:07,060
Nouvelle ligne, couleur de fond.

141
00:10:07,750 --> 00:10:08,850
Essayons le noir.

142
00:10:09,370 --> 00:10:15,610
Donc, si j'enregistre et actualise dans le navigateur, nous voyons que le bouton B est maintenant stylisé.

143
00:10:15,970 --> 00:10:17,530
Décortiquons maintenant ce qui se passe.

144
00:10:17,980 --> 00:10:23,080
Nous avons pu créer ce nouveau style de bouton en seulement deux lignes de code.

145
00:10:23,470 --> 00:10:26,950
Maintenant, il n'y a pas de capacité d'extension dans CSX normal.

146
00:10:27,340 --> 00:10:28,780
Il s'agit donc d'une fonctionnalité SaaS.

147
00:10:29,280 --> 00:10:35,920
Sassed nous permet de taper dans Symbol Extend puis le nom d'une règle dont nous voulons hériter les propriétés.

148
00:10:36,640 --> 00:10:40,420
Jetons maintenant un coup d'œil à ce que fait le compilateur SAS dans les coulisses.

149
00:10:40,900 --> 00:10:43,360
La règle pour le bouton B est assez simple.

150
00:10:43,420 --> 00:10:49,750
Mais si nous regardons ici, la règle d'origine pour le bouton A, nous pouvons voir que le compilateur SAS a ajouté une

151
00:10:50,080 --> 00:10:52,380
virgule puis cloué sur le bouton B.

152
00:10:53,110 --> 00:10:54,670
Ce n'est donc pas sorcier.

153
00:10:54,700 --> 00:10:57,100
Nous pourrions le faire nous-mêmes manuellement.

154
00:10:57,640 --> 00:11:05,110
Mais en termes de paradigmes de codage, il semble beaucoup plus naturel et agréable de garder les choses autonomes

155
00:11:05,200 --> 00:11:06,040
et modulaires.

156
00:11:06,310 --> 00:11:14,140
Ainsi, au lieu de microgérer nos sélecteurs, nous pouvons créer des règles propres, organisées et autonomes pour des

157
00:11:14,140 --> 00:11:15,430
classes spécifiques.

158
00:11:16,000 --> 00:11:20,980
Nous pouvons également tirer parti de l'héritage, étendre la capacité de créer un H. plus propre T. odeur.

159
00:11:21,520 --> 00:11:27,640
Vous vous souviendrez donc que nous avons ajouté une classe de groupe pour ajouter la fonctionnalité fixe claire pour notre

160
00:11:27,670 --> 00:11:28,420
navigation supérieure.

161
00:11:29,260 --> 00:11:33,530
Et si nous ne voulions pas ajouter des cours de présentation à notre H Temo?

162
00:11:33,880 --> 00:11:36,520
Et si nous voulions garder notre HDMI parfaitement propre?

163
00:11:36,940 --> 00:11:42,070
Donc, si je supprime cette classe de la liste non ordonnée, nous pouvons voir que

164
00:11:42,120 --> 00:11:49,210
nos flottants ne sont pas effacés dans les sauts de disposition, mais nous pouvons utiliser l'extension ou l'héritage sur cette liste non ordonnée.

165
00:11:49,840 --> 00:11:52,420
Je peux donc simplement taper extend.

166
00:11:53,840 --> 00:11:57,980
Groupe, nous savons que les propriétés fixes claires vivent dans la classe de groupe.

167
00:11:58,250 --> 00:12:02,150
Donc, si je sauvegarde et rafraîchis, les flotteurs ont été effacés.

168
00:12:02,570 --> 00:12:07,760
Donc, en termes de relation conceptuelle avec notre contenu pour notre liste non ordonnée, tout ce

169
00:12:07,790 --> 00:12:14,060
que nous avions à dire était d'étendre ou d'hériter des propriétés et des capacités fixes claires de la classe de groupe.

170
00:12:14,480 --> 00:12:19,760
Et puis dans les coulisses, le compilateur SAS a ajusté les sélecteurs pour le groupe.

171
00:12:19,790 --> 00:12:27,560
Effacez la classe fixe et ajoutez-la dans la liste non ordonnée de navigation de l'en-tête du site à tous les bons endroits.

172
00:12:28,220 --> 00:12:31,070
Prenons un bref instant pour revoir ce que nous avons appris jusqu'à présent.

173
00:12:31,460 --> 00:12:33,530
Nous avons examiné les variables classées.

174
00:12:33,950 --> 00:12:36,050
Nous avons examiné l'imbrication SAS.

175
00:12:36,560 --> 00:12:39,440
Nous avons vu l'héritage SAS en action.

176
00:12:40,010 --> 00:12:45,950
Maintenant, je veux parler de SAS, sa capacité à diviser notre code en fichiers plus petits et bien organisés.

177
00:12:46,640 --> 00:12:51,800
Donc, par exemple, imaginons que nous voulons que notre feuille de style soit incroyablement organisée.

178
00:12:52,220 --> 00:12:57,680
Et si nous voulions qu'un code CSF relatif à notre en-tête vive dans son propre fichier?

179
00:12:58,280 --> 00:12:59,870
SAS rend cela très simple.

180
00:13:00,200 --> 00:13:07,700
Je vais donc couper tout le code lié à l'en-tête et je vais créer un nouveau fichier dans notre dossier CSF.

181
00:13:08,240 --> 00:13:15,320
Je vais coller le code et je nommerai ce nouveau point de soulignement de fichier SPSS.

182
00:13:16,010 --> 00:13:24,410
Maintenant, de retour dans notre feuille de style complète où vivait ce code, je peux simplement dire importation

183
00:13:24,410 --> 00:13:27,280
d'espace, guillemets simples, deux-points d'en-tête.

184
00:13:27,710 --> 00:13:33,770
Et quand j'enregistre, nous ne verrons littéralement aucun changement dans le CSF que le compilateur sort.

185
00:13:34,040 --> 00:13:39,710
Le compilateur entre simplement, saisit le code du fichier d'en-tête et l'inclut là où nous le lui avons

186
00:13:39,710 --> 00:13:40,100
dit.

187
00:13:40,550 --> 00:13:44,800
C'est incroyablement utile car en tant que développeur, cela nous permet de rester organisés.

188
00:13:44,960 --> 00:13:48,890
Mais le navigateur Web reçoit toujours un seul fichier C SS.

189
00:13:49,070 --> 00:13:51,440
Les vitesses de chargement des pages restent donc rapides.

190
00:13:51,830 --> 00:13:53,750
Maintenant, cette leçon est presque terminée.

191
00:13:54,050 --> 00:13:59,630
Nous couvrirons des sujets plus avancés comme les opérateurs et les mixages dans notre prochaine leçon.

192
00:13:59,990 --> 00:14:05,390
Mais avant de terminer cette leçon, je veux vous montrer un dernier exemple de pourquoi SAS est incroyable.

193
00:14:05,600 --> 00:14:11,030
Imaginons que nous décidions que le bouton B ne doit pas utiliser un fond noir, mais plutôt une

194
00:14:11,030 --> 00:14:14,150
nuance orange très claire de notre couleur orange de base.

195
00:14:14,240 --> 00:14:19,550
Maintenant, au lieu d'utiliser un logiciel de sélection des couleurs, je vais vous montrer une fonctionnalité étonnante que propose SAS.

196
00:14:20,180 --> 00:14:24,830
Je vais utiliser une fonction nommée Lighton et je vais la passer à des valeurs.

197
00:14:24,860 --> 00:14:30,500
La première valeur sera notre couleur orange de base que nous avons enregistrée dans la belle variable de teinte.

198
00:14:31,140 --> 00:14:35,900
Et la deuxième valeur que je vais passer est de savoir combien je veux que la couleur devienne plus claire.

199
00:14:36,140 --> 00:14:37,430
Essayons donc 30%.

200
00:14:38,120 --> 00:14:41,210
Donc, si nous rafraîchissons, ce n'est pas assez léger.

201
00:14:42,020 --> 00:14:42,920
Essayons.

202
00:14:42,950 --> 00:14:44,120
Quarante cinq pour cent.

203
00:14:45,970 --> 00:14:46,510
Parfait.

204
00:14:46,930 --> 00:14:54,840
Donc, dans les coulisses, le compilateur SAS a calculé le code couleur hexadécimal exact qui serait 45% plus léger

205
00:14:54,880 --> 00:15:01,240
que notre couleur de base orange SAS offre toutes sortes de fonctions magiques comme celle-ci.

206
00:15:01,510 --> 00:15:06,580
Maintenant que notre feuille de style utilise des couleurs dynamiques dérivées d'une couleur de base.

207
00:15:06,790 --> 00:15:12,610
Si jamais nous décidons que notre page Web ne doit pas utiliser l'orange comme couleur principale, mais plutôt le bleu, c'est aussi simple que de

208
00:15:12,610 --> 00:15:18,040
passer à un sélecteur de couleur, de choisir la nuance exacte de bleu que nous voulons, de mettre à jour notre belle variable

209
00:15:18,040 --> 00:15:21,640
de teinte en haut de notre feuille de style avec la nouvelle valeur bleue.

210
00:15:21,910 --> 00:15:26,500
Et quand nous sauvegardons et rafraîchissons, nous voyons cela d'un seul coup.

211
00:15:26,590 --> 00:15:32,590
Tout est mis à jour et nous voyons que ce bouton a même une belle teinte bleue qui est 45% plus claire que

212
00:15:32,590 --> 00:15:33,760
le bleu de base.

213
00:15:34,450 --> 00:15:36,490
Maintenant, cela va mettre fin à cette leçon.

214
00:15:36,520 --> 00:15:40,060
Nous aborderons des sujets Sass plus avancés dans notre prochaine leçon.

215
00:15:40,540 --> 00:15:42,370
Amusez-vous bien et je vous verrai bientôt.
