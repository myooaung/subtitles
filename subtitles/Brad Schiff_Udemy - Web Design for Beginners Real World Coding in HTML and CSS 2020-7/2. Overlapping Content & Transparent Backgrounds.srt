1

00:00:00,480  -->  00:00:07,950
In this lesson we will learn how to use CSSA to position elements so that they overlap one another to

2

00:00:07,950  -->  00:00:08,790
achieve this.

3

00:00:08,790  -->  00:00:14,370
We will use a property that you have not seen in the course yet its name is position.

4

00:00:14,760  -->  00:00:19,800
And in this lesson we will be learning about position relative and position absolute.

5

00:00:20,250  -->  00:00:25,920
Our goal for this lesson is to recreate what you see in front of you now so we can see that there is

6

00:00:25,920  -->  00:00:32,430
an image and then there is a caption layered on top of the image so we can see that the description

7

00:00:32,430  -->  00:00:39,980
box has a semi-transparent black background and is overlapping the bottom part of the image.

8

00:00:40,080  -->  00:00:45,570
In this lesson we will learn all the code necessary to recreate this from scratch so I'm going to hop

9

00:00:45,570  -->  00:00:46,870
back over to this tab.

10

00:00:46,980  -->  00:00:48,620
This page looked familiar.

11

00:00:48,720  -->  00:00:53,840
And we're going to rewrite the code together in order to create this overlapping effect.

12

00:00:54,150  -->  00:00:55,700
Let's get started.

13

00:00:55,860  -->  00:01:00,780
Here we are in the text editor and the first thing that I'm going to do is simply add the image to the

14

00:01:00,780  -->  00:01:08,940
page image element source will point the browser towards the file.

15

00:01:10,590  -->  00:01:11,180
OK.

16

00:01:11,310  -->  00:01:16,950
So here's the image we can see right away that the image is too wide for this main column.

17

00:01:16,950  -->  00:01:24,600
So what we can do is write a bit of success that targets all images on the page and gives them a maximum

18

00:01:24,600  -->  00:01:29,220
width of 100 percent and then we'll be sure to set the height to Otto.

19

00:01:29,220  -->  00:01:34,370
So with that in place the image will automatically shrink to fit the main column next.

20

00:01:34,380  -->  00:01:41,010
Let's add the paragraph of text that we want to overlap the image create a new paragraph and I'll simply

21

00:01:41,010  -->  00:01:44,450
paste in a bit of text so you don't have to watch me type this out.

22

00:01:44,760  -->  00:01:47,910
So if we refresh in the browser we can see here's the text.

23

00:01:47,910  -->  00:01:54,330
Next let's add a few extra classes and elements in our HTL so that we have more hooks to target in our

24

00:01:54,330  -->  00:01:55,840
CSSA code.

25

00:01:55,860  -->  00:02:02,250
So I want to wrap both the image and the text inside a parent div and we'll give that idea of a class

26

00:02:02,310  -->  00:02:03,760
of image banner

27

00:02:07,650  -->  00:02:09,230
and then the text itself.

28

00:02:09,240  -->  00:02:18,720
I think that should also be in a div so will give this div a class of banner description.

29

00:02:21,030  -->  00:02:29,640
OK so now each team has these two additional hooks to target let's begin writing our SS or create a

30

00:02:29,640  -->  00:02:33,490
comment to stay organized banner overlay.

31

00:02:33,810  -->  00:02:39,540
So the first thing that we want to target is the div with the text and it has a class of bannered description

32

00:02:40,810  -->  00:02:43,140
banner description.

33

00:02:43,470  -->  00:02:49,530
I'm going to use a property that you have not seen until now position and I'm going to give it a value

34

00:02:49,590  -->  00:02:51,430
of absolute.

35

00:02:51,690  -->  00:02:58,200
Let's create another declaration with the property of bottom and we'll give it a value of zero.

36

00:02:58,200  -->  00:03:02,400
Also create a declaration with a property of left and give it a value of zero.

37

00:03:02,400  -->  00:03:07,240
So if I say even refresh pay attention to where this paragraph moves to.

38

00:03:08,100  -->  00:03:13,290
So we can see that the position that this text is in now seems completely random but it's not.

39

00:03:13,530  -->  00:03:19,410
If I scroll up to the very top of the page we can see that this text has positioned itself in the very

40

00:03:19,410  -->  00:03:22,510
bottom left corner of the screen.

41

00:03:22,770  -->  00:03:30,960
Now if I change this from bottom zero to top zero we can see the text moves up to the very top of the

42

00:03:30,960  -->  00:03:32,000
screen.

43

00:03:32,550  -->  00:03:38,850
Now if we wanted the text to sit 50 pixels from the very top we can simply change this from top 0 to

44

00:03:38,850  -->  00:03:47,730
top 50 pixels and if we wanted to get from the left 50 pixels we can change this to left 50 pixels so

45

00:03:47,730  -->  00:03:49,100
we can see the position.

46

00:03:49,110  -->  00:03:55,170
Absolute lets us provide x and y coordinates or horizontal and vertical coordinates to position the

47

00:03:55,170  -->  00:03:57,740
element in a very particular fashion.

48

00:03:57,750  -->  00:04:03,840
However by doing this it also removes the content from the regular flow of the page.

49

00:04:03,840  -->  00:04:10,710
This means that as far as every other element on the page is concerned this content no longer exists

50

00:04:10,730  -->  00:04:10,920
.

51

00:04:11,160  -->  00:04:15,010
So very quickly let's remove this code just to prove a point.

52

00:04:15,030  -->  00:04:19,710
So we saw that by default this text sat underneath the image.

53

00:04:19,710  -->  00:04:21,790
Now as soon as is positioned absolutely.

54

00:04:21,900  -->  00:04:29,190
Watch how this text as soon as I refresh watch this text simply move up as if that text no longer exists

55

00:04:29,250  -->  00:04:30,660
at all.

56

00:04:30,660  -->  00:04:36,300
Now you may be wondering why would I ever use position absolute if it completely removes the content

57

00:04:36,300  -->  00:04:37,580
from the flow of the page.

58

00:04:37,650  -->  00:04:39,790
How is that every useful.

59

00:04:39,810  -->  00:04:45,750
The answer is that nine times out of 10 in order for a position absolute to be useful it needs to be

60

00:04:45,750  -->  00:04:49,740
used in conjunction with position relative.

61

00:04:49,740  -->  00:04:56,430
So for example when we specified that this text should sit 50 pixels from the top and 50 pixels from

62

00:04:56,430  -->  00:04:57,400
the left.

63

00:04:57,420  -->  00:05:03,960
The question that we need to ask ourselves is 50 pixels from the left of what or 50 pixels from the

64

00:05:03,960  -->  00:05:05,380
top of what.

65

00:05:05,610  -->  00:05:11,940
Now by default the browser will use the Web browser window as our frame of reference for the top and

66

00:05:11,940  -->  00:05:13,000
left values.

67

00:05:13,630  -->  00:05:20,590
However an element that uses position absolute will search up its family tree or up its Russian stacking

68

00:05:20,590  -->  00:05:26,160
doll model for the closest ancestor element that uses position relative.

69

00:05:26,350  -->  00:05:32,020
And once it finds that element it will use it as its frame of reference for these values.

70

00:05:32,080  -->  00:05:38,440
So we know that in our HMO there's bannered description element which is what is housing this text.

71

00:05:38,440  -->  00:05:42,230
We know that it has a parent element of image banner.

72

00:05:42,640  -->  00:05:53,140
So if I change image banner to use position relative watch what happens when we refresh this text is

73

00:05:53,140  -->  00:05:59,590
now positioning itself 50 pixels from the top of the image banner and 50 pixels from the left of the

74

00:05:59,590  -->  00:06:01,190
image banner.

75

00:06:01,210  -->  00:06:05,400
Very quickly let's review the HTML structure that makes this possible.

76

00:06:05,440  -->  00:06:08,540
This is the element that's being positioned Absolutely.

77

00:06:08,770  -->  00:06:13,930
It searches up its family tree to find the nearest ancestor with a position relative which happens to

78

00:06:13,930  -->  00:06:15,250
be Image banner.

79

00:06:15,280  -->  00:06:19,840
So it then tries to position itself in relation to image banner.

80

00:06:19,840  -->  00:06:24,270
So you'll remember that we wanted our description to sit at the bottom of the image.

81

00:06:24,460  -->  00:06:32,780
So now it's as simple as changing this to bottom 0 and zero.

82

00:06:32,950  -->  00:06:37,850
So now the text will sit in the bottom left corner of the image.

83

00:06:37,870  -->  00:06:41,180
Now that our description text is positioned correctly.

84

00:06:41,320  -->  00:06:43,590
Let's focus on styling it.

85

00:06:43,840  -->  00:06:49,270
So you will remember that we wanted a semi transparent black background and we wanted the text to be

86

00:06:49,270  -->  00:06:49,980
white.

87

00:06:50,380  -->  00:06:56,650
So let's go ahead and give the text a color of white and let's begin by making the background black

88

00:06:56,650  -->  00:06:58,180
.

89

00:06:58,210  -->  00:06:59,550
So this is simply enough.

90

00:06:59,590  -->  00:07:04,060
But we wanted a semi transparent black background.

91

00:07:04,060  -->  00:07:09,520
Now up until this point in the course all of the colors that you've seen have been hexadecimal color

92

00:07:09,520  -->  00:07:15,400
codes which means typically six characters and that is preceded by the pound sign.

93

00:07:15,410  -->  00:07:22,610
However in order to get a semi transparent color we're going to use something named R.G. colors.

94

00:07:22,930  -->  00:07:28,380
So the letters here stand for red green blue and alpha alpha.

95

00:07:28,380  -->  00:07:31,290
In this context refers to Alpha transparency.

96

00:07:31,390  -->  00:07:36,850
Now in the world of color theory we know that we can create any color by combining different amounts

97

00:07:36,850  -->  00:07:39,570
of red green and blue.

98

00:07:40,030  -->  00:07:47,890
So let's imagine that we wanted this text to have a completely not transparent red background or GBH

99

00:07:47,890  -->  00:07:49,000
except for values.

100

00:07:49,000  -->  00:07:51,560
The first is obviously are for red.

101

00:07:52,000  -->  00:07:59,230
Now we can enter anywhere between 0 and 255 to decide how much red we want to mix into the color.

102

00:07:59,440  -->  00:08:02,950
So we wanted to be completely red 2:55 is the highest value.

103

00:08:02,950  -->  00:08:04,050
We don't want any green.

104

00:08:04,090  -->  00:08:07,650
We don't want any blue and a for Alpha transparency.

105

00:08:07,780  -->  00:08:09,640
We don't want it to be transparent at all.

106

00:08:09,640  -->  00:08:11,760
So we enter 1 0.

107

00:08:11,770  -->  00:08:14,180
It's completely transparent or invisible.

108

00:08:14,200  -->  00:08:17,310
So this creates pure red.

109

00:08:17,320  -->  00:08:25,870
Now if we wanted halfway transparent red we would change the A or alpha value to point five and if we

110

00:08:25,870  -->  00:08:33,550
decided that's a bit too transparent we can simply bump this value up to perhaps point six 5.

111

00:08:33,550  -->  00:08:37,000
So we can see the Reds a bit darker now and it's a bit harder to see through.

112

00:08:37,390  -->  00:08:44,680
However we didn't want red We wanted a semi-transparent black background so to create black you simply

113

00:08:44,680  -->  00:08:46,630
don't mix in any color.

114

00:08:46,990  -->  00:08:54,520
So we've zeroed out red green and blue and we can see we now have a semi transparent black background

115

00:08:54,520  -->  00:08:55,790
.

116

00:08:55,930  -->  00:08:58,880
Our styling work is almost complete.

117

00:08:58,990  -->  00:09:02,830
Now let's add a bit of padding around the text.

118

00:09:02,980  -->  00:09:07,300
So within this same banner prescription rule will add padding.

119

00:09:07,630  -->  00:09:13,800
Let's give it 15 pixels vertically and 25 pixels horizontally.

120

00:09:14,200  -->  00:09:15,800
That looks a lot better.

121

00:09:15,820  -->  00:09:18,390
Now there's one minor thing that I want to fix.

122

00:09:18,430  -->  00:09:25,120
If we look very closely we can see that the bottom of our text box is not lining up perfectly with the

123

00:09:25,120  -->  00:09:26,460
bottom of the image.

124

00:09:26,530  -->  00:09:30,310
Our text box is about two or three pixels too low.

125

00:09:30,310  -->  00:09:36,460
The reason this is happening is because the overall height of our image banner parent element is being

126

00:09:36,460  -->  00:09:43,760
determined obviously by the size of the image and by default images are inline elements.

127

00:09:43,780  -->  00:09:49,360
So this means when the browser tries to calculate the height it can use things like font size and line

128

00:09:49,360  -->  00:09:51,880
height values and it's not as precise.

129

00:09:51,880  -->  00:09:55,710
So we really want this image to be a block level element.

130

00:09:55,970  -->  00:10:03,820
So in our CSS I'm going to target any image elements that live within image banner and then I will simply

131

00:10:03,820  -->  00:10:05,880
tell them to be block level.

132

00:10:05,960  -->  00:10:11,860
So if we refresh can see that the two elements are now perfectly aligned.

133

00:10:11,890  -->  00:10:15,190
This means our goal for the lesson is complete.

134

00:10:15,190  -->  00:10:22,250
We've stifled the elements however before I end the lesson there's a few more notes on position relative

135

00:10:22,440  -->  00:10:24,500
that I want to share with you.

136

00:10:24,530  -->  00:10:30,640
We learned that with elements that used position absolute we can provide a horizontal and vertical offset

137

00:10:30,690  -->  00:10:32,450
position in the element.

138

00:10:32,490  -->  00:10:36,040
Now we can do the same thing with elements that use position relative.

139

00:10:36,230  -->  00:10:44,310
So if we say top 10 pixels left 10 pixels on our image banner container element we can see that it moves

140

00:10:44,310  -->  00:10:46,820
down into the left 10 pixels.

141

00:10:46,830  -->  00:10:54,060
So if an element uses position relative its frame of reference is it self or in other words this line

142

00:10:54,060  -->  00:11:00,610
of code is saying position the element 10 pixels from the top of where it would normally sit.

143

00:11:00,650  -->  00:11:07,560
And this can be incredibly useful because it allows us to manipulate the position of an element without

144

00:11:07,560  -->  00:11:10,660
removing it from the natural flow of the page.

145

00:11:10,860  -->  00:11:16,920
So for example let's remove these so the image box sits where it normally would.

146

00:11:16,910  -->  00:11:21,820
And let's see if we want to push the image to the left by 40 pixels.

147

00:11:22,120  -->  00:11:26,490
You can simply say left negative 40 pixels and there you have it.

148

00:11:26,550  -->  00:11:30,350
Notice that it did not take the element out of the flow of the page.

149

00:11:30,410  -->  00:11:35,700
This paragraph that sits below it is still acknowledging and respecting the space.

150

00:11:35,720  -->  00:11:38,320
This element takes up.

151

00:11:38,690  -->  00:11:45,500
However even though the other elements on the page are aware of this content they are not aware of its

152

00:11:45,500  -->  00:11:46,730
offsets.

153

00:11:46,740  -->  00:11:54,930
So for example if we give this Elman a top offset of 60 pixels you can see that it is now overlapping

154

00:11:54,930  -->  00:11:55,850
this text.

155

00:11:55,880  -->  00:12:02,900
So this paragraph of text does not know to move down 60 pixels to accommodate the offset of our image

156

00:12:02,900  -->  00:12:03,860
box.

157

00:12:03,870  -->  00:12:09,740
So let's go ahead and remove these two offsets so the image box sits where it normally would.

158

00:12:09,960  -->  00:12:15,600
So we've learned that you can use offsets on position relative elements when you don't want to rock

159

00:12:15,620  -->  00:12:21,590
the boat when you don't want to affect literally any other element on the page.

160

00:12:21,600  -->  00:12:27,210
Now there is one final topic related to position relative that I want to discuss before closing out

161

00:12:27,210  -->  00:12:27,860
the video.

162

00:12:28,050  -->  00:12:31,490
And that is the battle of the overlaps.

163

00:12:31,500  -->  00:12:36,660
So for example if elements have been positioned in a way that they are overlapping each other how do

164

00:12:36,650  -->  00:12:42,600
we decide which element sits on top of the other or in other words which element is visible.

165

00:12:42,600  -->  00:12:50,190
So very quickly let's experiment let's push our image box to the left by a hundred pixels so we can

166

00:12:50,190  -->  00:12:52,880
see it now overlaps the sidebar.

167

00:12:53,280  -->  00:12:58,940
Now the image box is on top of the sidebar because it's using position relative.

168

00:12:58,980  -->  00:13:03,630
However if the sidebar was also using position relative

169

00:13:09,170  -->  00:13:14,200
we will see that it's now on top because it comes later in the HTL.

170

00:13:14,210  -->  00:13:16,210
Now here is our image box.

171

00:13:16,400  -->  00:13:18,770
If we scroll down here the sidebar.

172

00:13:18,780  -->  00:13:24,950
So the rule of thumb is if both elements are using position relative or position absolute whichever

173

00:13:24,960  -->  00:13:29,720
element comes later in your HMO will be layered on top.

174

00:13:29,730  -->  00:13:32,530
Now there is a way to override that behavior.

175

00:13:32,550  -->  00:13:39,450
So even though sidebar comes last in the HVM Now if we wanted our image box to overlap the sidebar we

176

00:13:39,450  -->  00:13:42,590
can use a property named z index.

177

00:13:42,600  -->  00:13:50,350
So on the image Bynner element I will add a property named z index and I will give it a value of 10

178

00:13:50,360  -->  00:13:51,940
.

179

00:13:52,130  -->  00:13:58,830
We can see that this places the image box on top z index is essentially the stacking order of an element

180

00:13:59,150  -->  00:14:04,930
whichever element has the larger z index value will be placed on top of the other element.

181

00:14:04,980  -->  00:14:13,770
So if we went to our Sidebar and gave it a z index of 11 it would stack on top.

182

00:14:13,980  -->  00:14:16,430
That's going to bring this lesson to a close.

183

00:14:16,440  -->  00:14:18,470
There was a lot of material in this lesson.

184

00:14:18,480  -->  00:14:20,010
So here's a quick review.

185

00:14:20,150  -->  00:14:20,690
Position.

186

00:14:20,710  -->  00:14:27,980
Absolute lets you remove an element from the natural flow of the page and instead position it in relation

187

00:14:27,990  -->  00:14:34,980
to an ancestor element absolutely positioned elements will look for the closest ancestor element that

188

00:14:34,980  -->  00:14:40,370
uses position relative and it will use that element as its frame of reference.

189

00:14:40,710  -->  00:14:46,520
If the absolutely positioned element does not have any ancestors which use position relative it will

190

00:14:46,530  -->  00:14:53,310
use the Web browser window as a whole as its frame of reference if multiple elements are overlapping

191

00:14:53,310  -->  00:14:58,550
each other and you want to have fine grained control over which element stacks on top of the other.

192

00:14:58,860  -->  00:15:04,030
You can use the z index property to establish a stacking order.

193

00:15:04,110  -->  00:15:06,430
I will see you in the next lesson.
