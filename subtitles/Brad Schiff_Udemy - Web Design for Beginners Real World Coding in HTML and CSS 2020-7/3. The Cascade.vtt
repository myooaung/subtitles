WEBVTT
1

00:00:00.630  -->  00:00:04.830
In this lesson we will learn about the cascade.

2

00:00:04.830  -->  00:00:08.290
The first letter in CSSA stands for cascading.

3

00:00:08.520  -->  00:00:13.890
So let's spend a few minutes to understand what the word means in this context.

4

00:00:13.890  -->  00:00:18.390
A dictionary will tell us that a cascade is a small waterfall.

5

00:00:18.480  -->  00:00:23.080
Typically one of several that fall in stages down a slope.

6

00:00:23.370  -->  00:00:24.690
So this is excellent.

7

00:00:24.690  -->  00:00:30.690
We can use the waterfall as a metaphor to understand the cascade that takes place in the web browser

8

00:00:30.690  -->  00:00:31.370
.

9

00:00:31.470  -->  00:00:38.330
Let's think of water in this example as stylistic instructions for the web browser.

10

00:00:38.640  -->  00:00:44.950
Now we know that by default without CSSA web pages look very boring and they look very plain.

11

00:00:44.970  -->  00:00:47.040
All of the text is black.

12

00:00:47.040  -->  00:00:51.350
Everything looks very uniform and there's not much of a creative layout.

13

00:00:51.450  -->  00:00:58.110
However even without any CSSA it's not as if our waterfall is completely void of water.

14

00:00:58.110  -->  00:01:01.080
There's still a little bit of styling going on.

15

00:01:01.230  -->  00:01:08.130
The first tiny bit of water that is layered onto the waterfall is known as browser defaults.

16

00:01:08.130  -->  00:01:15.630
So for example by default web browsers will render heading level 1 elements in a larger font size than

17

00:01:15.630  -->  00:01:17.700
standard paragraph text.

18

00:01:17.790  -->  00:01:23.430
So this default stylistic preference of the web browser is the first tiny stream of water that makes

19

00:01:23.430  -->  00:01:29.850
the waterfall but then we as web developers can come in with our CSSA we can come in with our own style

20

00:01:29.850  -->  00:01:37.500
sheets and override that preference with a new layer of water or a new stream of water so we can simply

21

00:01:37.560  -->  00:01:43.590
edit a CSSA file in our text editor target the heading level one element and say you know what instead

22

00:01:43.590  -->  00:01:50.760
of being HUGE your font size should only be a little bit larger than regular text and you shouldn't

23

00:01:50.760  -->  00:01:51.900
be bold either.

24

00:01:51.930  -->  00:01:56.210
You should just use a standard or normal font weight.

25

00:01:56.220  -->  00:01:57.910
I think that looks much better.

26

00:01:57.930  -->  00:02:01.470
So that's the first component of understanding the cascade.

27

00:02:01.590  -->  00:02:07.370
It's this idea that the web browser has defaults and we can override those defaults.

28

00:02:07.530  -->  00:02:16.710
The next step in understanding how the cascade works is unraveling a concept known as inheritance inheritance

29

00:02:16.770  -->  00:02:23.730
is the way that certain CSSA properties are passed along from ancestor elements to children elements

30

00:02:23.740  -->  00:02:23.990
.

31

00:02:24.240  -->  00:02:30.330
So if you think of the Russian stacking doll analogy inheritance is what allows certain stylistic traits

32

00:02:30.600  -->  00:02:32.230
to be passed along to children.

33

00:02:32.430  -->  00:02:39.390
So for example we know that in our HTL structure that the body element houses or contains all of the

34

00:02:39.390  -->  00:02:41.110
pages content.

35

00:02:41.130  -->  00:02:48.420
So let's imagine that we wanted our entire page to use green text instead of selecting individual elements

36

00:02:48.420  -->  00:02:48.470
.

37

00:02:48.480  -->  00:02:57.240
We can simply write CSSA that selects the body element and the color of green will be inherited by all

38

00:02:57.240  -->  00:02:58.080
children elements.

39

00:02:58.110  -->  00:03:03.360
So if I refresh we can see the entire page uses green text.

40

00:03:03.360  -->  00:03:11.290
So if we think of the waterfall analogy by default the web browser said all text should be black.

41

00:03:11.470  -->  00:03:16.260
Then our CSSA came in and said no it should be green.

42

00:03:16.290  -->  00:03:22.530
Now just as we overrode the browser default we can override our own default so to speak.

43

00:03:22.560  -->  00:03:27.160
So we said that all text should be green and that cascaded down to all children elements.

44

00:03:27.390  -->  00:03:31.610
But it's very easy to override that preference if we get a bit more specific.

45

00:03:31.620  -->  00:03:38.060
So let's say that we want the footer text in our website to be orange in our CSSA file.

46

00:03:38.060  -->  00:03:42.180
We simply select the footer color orange

47

00:03:44.940  -->  00:03:51.960
so we can see how simple it is to create stylistic preferences that cascade to multiple elements on

48

00:03:51.960  -->  00:03:52.920
the page.

49

00:03:53.010  -->  00:03:59.340
And then when we need to scale back we can simply override that preference for a particular area.

50

00:03:59.340  -->  00:04:04.610
Now I will point out that not every single siestas property can be inherited.

51

00:04:04.620  -->  00:04:07.290
So for example color can be inherited.

52

00:04:07.320  -->  00:04:12.700
Now there's no sense in this moment memorizing which properties can be inherited and which cannot.

53

00:04:12.720  -->  00:04:17.990
You will learn that information throughout the remainder of this course as it becomes necessary now

54

00:04:18.240  -->  00:04:24.600
for the time being there's one final topic that I want to cover in this lesson so we've covered cascading

55

00:04:24.600  -->  00:04:24.750
.

56

00:04:24.750  -->  00:04:26.550
We've covered inheritance.

57

00:04:26.550  -->  00:04:34.530
Now I want to talk a little bit about specificity specificity is how the web browser decides which set

58

00:04:34.590  -->  00:04:37.030
of CSSA instructions to listen to.

59

00:04:37.230  -->  00:04:40.540
If two or more styles are competing with one another.

60

00:04:40.800  -->  00:04:46.830
So for example let's imagine that instead of selecting body to make all the text green let's imagine

61

00:04:46.830  -->  00:04:50.570
that we selected all of the paragraph elements on the page.

62

00:04:50.790  -->  00:04:56.460
If I refresh we can see that the heading level one is black by DiVall but our new rule is selecting

63

00:04:56.490  -->  00:04:58.430
only paragraphs.

64

00:04:58.470  -->  00:05:01.950
Now if we wanted our footer text to be orange

65

00:05:04.350  -->  00:05:07.310
footer color orange this will not work.

66

00:05:07.310  -->  00:05:11.780
So if I were fresh you can see that nothing changes this footer text is still green.

67

00:05:11.790  -->  00:05:18.770
So earlier we learned that overriding an inherited value is very simple but overriding a value that

68

00:05:18.770  -->  00:05:22.630
has been explicitly set on an element is a bit trickier.

69

00:05:22.640  -->  00:05:29.270
So because this selector is actively targeting the paragraph elements on the page we cannot rely on

70

00:05:29.490  -->  00:05:34.640
footer to trickle down the inheritance of orange to its children.

71

00:05:34.640  -->  00:05:39.470
Instead we need to directly compete with and beat this rule.

72

00:05:39.690  -->  00:05:41.980
So instead of footer we'll say foot or space.

73

00:05:41.980  -->  00:05:42.840
P.

74

00:05:43.050  -->  00:05:48.260
Now this rule or this selector is more specific than this selector.

75

00:05:48.260  -->  00:05:50.310
So this selector will win.

76

00:05:50.490  -->  00:05:55.440
So if I save and refresh we can see those two paragraphs are orange.

77

00:05:55.470  -->  00:05:59.780
Now this is an excellent example of specificity.

78

00:05:59.880  -->  00:06:04.950
So in this case it's clear common sense tells us that this rule is more specific.

79

00:06:04.940  -->  00:06:11.580
However specificity is a very complex topic because it's not always so clear what the web browser will

80

00:06:11.570  -->  00:06:14.360
consider more specific.

81

00:06:14.370  -->  00:06:20.960
Now instead of having a 30 minute lesson just on specificity we will instead learn about it in chunks

82

00:06:21.000  -->  00:06:22.090
or in waves.

83

00:06:22.170  -->  00:06:26.210
So as your understanding of CSS as a whole continues to develop.

84

00:06:26.370  -->  00:06:29.120
So will your understanding of specificity.

85

00:06:29.250  -->  00:06:34.850
Now for this first wave of specificity knowledge all I want you to keep in mind are these few following

86

00:06:34.860  -->  00:06:36.370
rules of thumb.

87

00:06:36.380  -->  00:06:42.560
Number one descendant selectors are more specific than type selectors.

88

00:06:43.010  -->  00:06:51.380
We already saw an example of this Footner P is more specific than P because he selects all paragraphs

89

00:06:51.380  -->  00:06:54.100
on the entire page whereas footer.

90

00:06:54.180  -->  00:06:59.110
Only select paragraphs within a certain section of the page.

91

00:06:59.880  -->  00:07:07.670
Number two deeply nested descendant selectors are more specific than shallow or simple descendant selectors

92

00:07:07.680  -->  00:07:08.120
.

93

00:07:08.120  -->  00:07:16.270
So for example if I wanted to override this rule I could simply say body Forder P.

94

00:07:16.280  -->  00:07:21.570
Now I'm not saying that this is considered a best practice or that this is an example of squeaky clean

95

00:07:21.610  -->  00:07:26.550
success but that this is more specific than this selector.

96

00:07:26.540  -->  00:07:33.560
So now we could say color red we can see that that change is being obeyed.

97

00:07:33.600  -->  00:07:40.400
Number three class selectors are more specific then type or descendant selectors.

98

00:07:40.590  -->  00:07:47.190
So for example if we wanted to override this rule we can simply see that this paragraph has a class

99

00:07:47.190  -->  00:07:48.660
of highlight.

100

00:07:48.650  -->  00:07:52.110
So all we need to do is type period.

101

00:07:52.230  -->  00:07:56.880
And then the name of the class highlight color purple.

102

00:07:57.690  -->  00:07:59.930
And that will be obeyed.

103

00:07:59.940  -->  00:08:08.630
Number four a descendant selector which references a class is more specific than a solitary class selector

104

00:08:08.630  -->  00:08:09.590
.

105

00:08:09.600  -->  00:08:17.160
So all that means is if we wanted to override this rule we could say within the footer element find

106

00:08:17.150  -->  00:08:25.810
elements that have a class of highlight give them a color of blue.

107

00:08:25.810  -->  00:08:29.750
So if we save and refresh we can see that that paragraph is now blue.

108

00:08:30.380  -->  00:08:39.380
And finally number five when two rules have identical specificity values whichever one comes last in

109

00:08:39.380  -->  00:08:41.820
the style she will be followed.

110

00:08:41.820  -->  00:08:45.450
So let me show you a really quick example.

111

00:08:45.440  -->  00:08:50.340
The color blue the color red.

112

00:08:50.370  -->  00:08:58.320
So obviously these two have the same specificity values we save and refresh can see that red is taking

113

00:08:58.320  -->  00:08:58.910
precedence.

114

00:08:58.910  -->  00:09:05.840
But if we moved blue to sit below this rule then obviously it takes precedence.

115

00:09:05.850  -->  00:09:11.520
Now the reason I bring this up is because the ordering of your style sheet most definitely matters.

116

00:09:11.730  -->  00:09:18.320
We will learn in later lessons that it's considered best practice to start with your more generic rules

117

00:09:18.750  -->  00:09:24.990
and then as you work your way down your style sheet include more and more specific rules that's going

118

00:09:24.990  -->  00:09:26.760
to conclude this lesson.

119

00:09:26.960  -->  00:09:29.090
We've learned quite a bit so let's review.

120

00:09:29.340  -->  00:09:36.930
We learned why the word cascading is used to describe style sheets we learned about inheritance and

121

00:09:36.920  -->  00:09:39.510
we learned about specificity.

122

00:09:39.500  -->  00:09:43.710
Now this is the most technical CSSA lesson in the course.

123

00:09:43.700  -->  00:09:49.520
These are the basic principles that allow us to stay organized in our style sheets to have everything

124

00:09:49.520  -->  00:09:51.980
in this lesson wasn't crystal clear that's OK.

125

00:09:52.050  -->  00:09:56.610
These are concepts that we're going to be relearning and revisiting throughout the course.

126

00:09:56.610  -->  00:10:03.830
The main point is that I want you to be familiar with the terms inheritance and specificity your understanding

127

00:10:03.840  -->  00:10:05.720
of those will continue to grow.

128

00:10:06.060  -->  00:10:07.780
So I'll see you in the next lesson
