WEBVTT
1
00:00:00.300 --> 00:00:04.720
Dans cette leçon, nous continuerons à découvrir les caractéristiques du SRAS.

2
00:00:05.250 --> 00:00:08.130
Nous avons sans doute gardé le meilleur pour la fin.

3
00:00:08.280 --> 00:00:12.450
Dans cette leçon, nous allons découvrir les mix-ins et les opérateurs.

4
00:00:13.020 --> 00:00:14.460
Commençons par les mix-ins.

5
00:00:15.120 --> 00:00:17.130
Les mix-ins sont incroyablement puissants.

6
00:00:17.160 --> 00:00:19.290
Ils sont ma caractéristique préférée du SRAS.

7
00:00:19.530 --> 00:00:22.620
Mais avant de creuser dans le code, donnons-nous d'abord un objectif.

8
00:00:22.890 --> 00:00:28.830
Imaginons que nous voulions que ce bouton alternatif utilise un arrière-plan qui est un dégradé afin qu'il se

9
00:00:28.830 --> 00:00:31.020
fane progressivement d'une couleur à l'autre.

10
00:00:31.560 --> 00:00:36.750
Maintenant, nous avons appris plus tôt dans le cours que si nous voulons créer un dégradé avec

11
00:00:36.840 --> 00:00:42.060
du code CSL qui fonctionne dans presque tous les navigateurs et appareils, nous devons nous répéter plusieurs fois.

12
00:00:42.150 --> 00:00:43.800
Il y a l'ancienne méthode du kit Web.

13
00:00:43.860 --> 00:00:45.330
Il y a la nouvelle façon de kit Web.

14
00:00:45.390 --> 00:00:46.440
Il y a la manière Mozilla.

15
00:00:46.440 --> 00:00:47.430
Microsoft Way.

16
00:00:47.430 --> 00:00:48.480
L'opéra.

17
00:00:48.600 --> 00:00:50.100
La manière moderne par défaut.

18
00:00:50.310 --> 00:00:52.380
La vieille façon folle de Microsoft.

19
00:00:52.890 --> 00:00:54.810
C'est donc beaucoup de code à écrire.

20
00:00:55.350 --> 00:00:59.520
Et à la fin de la journée, toutes ces lignes de code réalisent exactement la même chose.

21
00:00:59.520 --> 00:01:01.710
Ils passent d'une couleur à l'autre.

22
00:01:02.190 --> 00:01:08.400
Alors, ne serait-ce pas bien s'il y avait une sorte d'outil ou de fonction qui pourrait recevoir les deux couleurs

23
00:01:08.490 --> 00:01:11.670
et ensuite sortir toutes ces lignes de code automatiquement?

24
00:01:12.360 --> 00:01:16.200
Eh bien, nous pouvons créer cet outil en utilisant des mix mix SAS.

25
00:01:16.770 --> 00:01:18.560
Nous voici donc dans l'éditeur de texte.

26
00:01:18.600 --> 00:01:21.570
Nous éditons notre fichier VSS impertinent.

27
00:01:21.870 --> 00:01:24.150
Et créons notre premier mix.

28
00:01:26.190 --> 00:01:30.460
Nous commençons par taper le symbole at puis le mot mixin.

29
00:01:31.320 --> 00:01:33.350
Nous avons alors la chance de nommer ou de nous mélanger.

30
00:01:33.480 --> 00:01:38.010
Je vais donc nommer ce gradient vertical.

31
00:01:38.700 --> 00:01:43.290
Maintenant, si vous avez déjà créé une fonction dans un autre langage de programmation, c'est très similaire.

32
00:01:43.770 --> 00:01:45.720
Je vais donc taper des parenthèses.

33
00:01:46.970 --> 00:01:48.320
Et puis des accolades.

34
00:01:49.010 --> 00:01:52.520
Nous voulions donc créer un dégradé entre les accolades.

35
00:01:52.610 --> 00:01:58.000
Je vais dire l'image de fond, dégradé linéaire.

36
00:01:59.240 --> 00:02:00.290
Commencez par le haut.

37
00:02:00.650 --> 00:02:02.210
Et puis nous pouvons spécifier nos couleurs.

38
00:02:02.570 --> 00:02:03.920
Commençons donc par le blanc.

39
00:02:04.850 --> 00:02:06.770
Et puis transition vers le noir.

40
00:02:07.700 --> 00:02:13.430
Cependant, nous ne voulons probablement pas coder en dur les valeurs de couleur dans notre mélange, car nous voulons que

41
00:02:13.430 --> 00:02:15.620
notre mélange soit aussi flexible que possible.

42
00:02:16.070 --> 00:02:18.920
Donc, au lieu de ces valeurs de couleur de blanc et de noir.

43
00:02:20.040 --> 00:02:24.480
Incluons les paramètres nommés à partir de la couleur et.

44
00:02:25.520 --> 00:02:26.360
Deux couleurs.

45
00:02:27.420 --> 00:02:32.040
De retour sur cette ligne de code, lorsque nous avons nommé notre mixin entre parenthèses,

46
00:02:32.040 --> 00:02:34.530
nous inclurons également les périmètres de couleur.

47
00:02:35.900 --> 00:02:41.960
Pour colorier maintenant, notre mixin est loin d'être terminé, mais il est prêt à commencer les tests.

48
00:02:42.380 --> 00:02:46.370
Voyons donc si nous pouvons utiliser ce mixage sur la règle du bouton B.

49
00:02:47.460 --> 00:02:53.140
Supprimons cette couleur de fond et essayons d'ajouter un fond dégradé en utilisant notre nouveau mixin.

50
00:02:54.080 --> 00:02:58.130
Je vais donc inclure le symbole at et la phrase include.

51
00:02:58.400 --> 00:03:00.020
C'est ainsi que nous appelons un mixin.

52
00:03:00.200 --> 00:03:05.360
Donc, nous tapons simplement le nom du mix dans lequel nous voulons utiliser le gradient vertical.

53
00:03:05.780 --> 00:03:09.890
Maintenant, quand nous avons créé notre mixin, nous lui avons donné deux paramètres.

54
00:03:10.100 --> 00:03:16.130
Alors maintenant que nous appelons et utilisons le mixage, nous pouvons passer à des arguments ou en d'autres termes,

55
00:03:16.130 --> 00:03:18.500
les deux couleurs que nous voulons estomper.

56
00:03:18.980 --> 00:03:23.690
Disons donc que la couleur from doit être bleue et les deux couleurs doivent être rouges.

57
00:03:24.620 --> 00:03:27.470
Donc, si je sauvegarde et rafraîchis dans le navigateur.

58
00:03:28.550 --> 00:03:30.880
Nous voyons que j'ai clairement fait une erreur quelque part.

59
00:03:32.700 --> 00:03:35.910
Donc, au lieu de haut, cela devrait être en bas.

60
00:03:36.360 --> 00:03:40.680
C'est donc un excellent exemple de la raison pour laquelle nous voulons utiliser un mixin pour les gradients en premier lieu.

61
00:03:41.370 --> 00:03:45.630
La syntaxe pour créer des dégradés avec CSX a évolué au fil des ans.

62
00:03:45.750 --> 00:03:49.800
Et il existe différentes versions flottant pour plaire à différents navigateurs et appareils.

63
00:03:50.130 --> 00:03:54.780
L'idée est donc que nous ne voulons pas avoir à écrire ce code chaque fois que nous voulons un dégradé.

64
00:03:55.140 --> 00:04:01.530
Nous voulons pouvoir créer un mixage tous les six mois ou tous les ans, puis appeler le mixin chaque fois

65
00:04:01.560 --> 00:04:03.570
que nous devons utiliser un dégradé.

66
00:04:04.170 --> 00:04:09.240
Donc, avec cette syntaxe mise à jour en place, le code devrait maintenant fonctionner dans la version la plus récente de Firefox.

67
00:04:09.510 --> 00:04:12.000
Donc, si nous rafraîchissons, il y a le gradient.

68
00:04:12.540 --> 00:04:16.500
Jetons un rapide coup d'œil au CSF que ces compilateurs SAS produisent.

69
00:04:18.000 --> 00:04:21.240
Voici donc la règle du bouton B dans le fichier de sortie C SS.

70
00:04:21.840 --> 00:04:29.940
Donc, le compilateur a pris cet appel à gradient vertical inclus et il a pris nos arguments et il a sorti ce

71
00:04:29.940 --> 00:04:30.390
code.

72
00:04:31.110 --> 00:04:32.640
Maintenant, notre mixin n'est pas terminé.

73
00:04:32.760 --> 00:04:36.210
Donc, évidemment, une seule ligne de code n'est pas très impressionnante.

74
00:04:36.240 --> 00:04:37.590
Nous aurions pu le faire nous-mêmes.

75
00:04:38.250 --> 00:04:40.120
Alors allons-y et terminons notre mix.

76
00:04:40.590 --> 00:04:43.980
Nous ne voulons pas qu'il ne produise qu'une seule ligne de code pour les dégradés.

77
00:04:44.340 --> 00:04:48.090
Nous voulons qu'il produise tous ces méchants, misérables à taper.

78
00:04:48.330 --> 00:04:54.330
Croisez les lignes de compatibilité des navigateurs afin que nous puissions avoir des dégradés sur chaque appareil sous le soleil, même

79
00:04:54.330 --> 00:04:55.560
s'ils sont terriblement dépassés.

80
00:04:56.210 --> 00:05:00.420
Maintenant, au lieu de taper toutes ces lignes, qui nous ennuieraient tous les deux.

81
00:05:00.840 --> 00:05:03.050
Je vais juste coller un morceau de code.

82
00:05:05.180 --> 00:05:09.230
Donc, tout ce qui se passe ici, c'est que nous fournissons toutes les différentes syntaxes.

83
00:05:09.380 --> 00:05:15.020
Voici donc l'ancienne méthode du kit Web, la nouvelle méthode du kit Web, l'ancienne méthode Mozilla, Microsoft Opera, la

84
00:05:15.020 --> 00:05:17.270
méthode moderne, la folle ancienne méthode Microsoft.

85
00:05:17.630 --> 00:05:18.440
Vous avez eu l'idée.

86
00:05:19.400 --> 00:05:26.360
Et au lieu de coder en dur dans les valeurs de couleur, nous avons utilisé les paramètres de couleur en couleur pour toutes les

87
00:05:26.360 --> 00:05:27.230
lignes de code.

88
00:05:27.740 --> 00:05:36.320
Alors maintenant, si j'économise et que nous examinons le CSX que le compilateur SAS produit, c'est beaucoup plus impressionnant.

89
00:05:36.830 --> 00:05:42.080
Donc, tout cela a été créé par cette seule ligne de code.

90
00:05:42.920 --> 00:05:47.900
Nous disons inclure le mélange vertical de dégradé et lui passer des arguments de bleu et de rouge.

91
00:05:49.090 --> 00:05:52.070
Et le compilateur SAS a fait tout ce travail pour nous.

92
00:05:52.910 --> 00:05:58.930
Alors maintenant, si nous décidons réellement au lieu du bleu et du rouge, le bouton devrait avoir un dégradé de blanc

93
00:05:58.940 --> 00:05:59.570
à orange.

94
00:06:00.200 --> 00:06:06.860
Tout ce que vous avez à faire dans notre fichier CSX sasy est d'ajuster cette ligne de code pour dire blanc.

95
00:06:08.160 --> 00:06:08.910
Une orange.

96
00:06:09.320 --> 00:06:17.580
Et lorsque nous enregistrons les sorties du compilateur SAS, toutes ces lignes répétitives et désagréables dans chaque navigateur sont

97
00:06:17.700 --> 00:06:18.300
satisfaites.

98
00:06:19.050 --> 00:06:24.270
Et peut-être plus important encore, en tant que développeurs, nous sommes satisfaits car nous n'avons qu'à écrire une seule ligne de

99
00:06:24.270 --> 00:06:24.630
code.

100
00:06:25.380 --> 00:06:32.940
Nous n'avons pas besoin de regarder ou de revoir ce code source mixin à moins que la syntaxe du gradient ne change dans les

101
00:06:32.940 --> 00:06:33.720
principaux navigateurs.

102
00:06:34.170 --> 00:06:41.100
Nous pouvons donc réutiliser ce code de mixage dans tous nos projets de site Web et nous pouvons le ranger dans

103
00:06:41.100 --> 00:06:43.500
son propre fichier partiel, puis l'importer.

104
00:06:44.130 --> 00:06:46.770
Je vais donc copier ou couper ce code.

105
00:06:47.430 --> 00:06:51.300
Créons un nouveau fichier dans notre dossier CSF, collez le code.

106
00:06:51.810 --> 00:06:57.270
Enregistrons ce fichier sous Underscore Mixin DOT SPSS.

107
00:06:58.020 --> 00:07:02.040
Et puis de retour dans notre feuille de style sasy principale où ce code habitait.

108
00:07:02.130 --> 00:07:07.270
Nous pouvons dire à l'importation de symboles Nixon.

109
00:07:07.890 --> 00:07:08.580
Alors mon colon.

110
00:07:09.390 --> 00:07:10.050
Hors de vue.

111
00:07:10.170 --> 00:07:10.860
Hors de l'esprit.

112
00:07:11.040 --> 00:07:17.250
Alors maintenant, nous n'avons même plus besoin de nous inquiéter et de gaspiller de précieuses cellules cérébrales en pensant à tout ce code dégoûtant

113
00:07:17.400 --> 00:07:18.420
de navigateur croisé.

114
00:07:18.680 --> 00:07:20.400
Nous l'avons retiré dans son propre dossier.

115
00:07:20.610 --> 00:07:26.790
Nous importons ce fichier et nous pouvons prétendre que notre mixin de gradient vertical n'est qu'une partie du langage

116
00:07:26.790 --> 00:07:27.450
natif assassiné.

117
00:07:27.900 --> 00:07:33.060
Très rapidement, je veux souligner le pouvoir de combiner des mixages avec quelque chose que nous avons

118
00:07:33.060 --> 00:07:35.310
appris dans nos variables de leçon précédentes.

119
00:07:35.790 --> 00:07:40.950
Imaginons donc que nous décidions que ce bouton ne doit pas utiliser un dégradé de blanc à orange, mais plutôt

120
00:07:41.160 --> 00:07:44.520
du blanc à une teinte plus claire de notre bleu de base.

121
00:07:45.640 --> 00:07:51.370
Nous savons maintenant que nous stockons cette couleur bleue de base dans une variable nommée belle teinte.

122
00:07:52.150 --> 00:07:57.460
Et si nous décidons que le bleu de base est trop sombre, nous pouvons utiliser une fonction que nous

123
00:07:57.460 --> 00:07:59.890
avons apprise dans la leçon précédente nommée Lighton.

124
00:08:01.280 --> 00:08:01.700
Passe-le.

125
00:08:01.730 --> 00:08:05.600
La belle nouvelle couleur et, par exemple, la rend 30% plus légère.

126
00:08:06.320 --> 00:08:13.160
Donc, si j'enregistre et actualise dans le navigateur Web, nous pouvons voir qu'avec une seule ligne de

127
00:08:13.160 --> 00:08:20.480
code, nous avons pu créer un dégradé CSX inter-navigateur en utilisant une couleur variable et éclaircir dynamiquement cette couleur

128
00:08:20.480 --> 00:08:21.290
de 30%.

129
00:08:21.950 --> 00:08:28.610
C'est grâce aux variables et aux fonctions de couleur, mais surtout, c'est grâce aux mix-ins.

130
00:08:29.240 --> 00:08:34.040
La démo de dégradé est donc un exemple de la façon dont Mixin peut nous faciliter la vie.

131
00:08:34.430 --> 00:08:36.560
Maintenant, je veux vous montrer un deuxième exemple.

132
00:08:37.070 --> 00:08:38.810
Donnons-nous donc un nouvel objectif.

133
00:08:39.140 --> 00:08:41.660
Imaginons que nous voulons que cette mise en page soit réactive.

134
00:08:42.110 --> 00:08:47.290
Et une fois que nous en arrivons au sujet du facteur de forme d'un smartphone, nous voulons que nos liens de navigation soient

135
00:08:47.300 --> 00:08:48.380
placés un par ligne.

136
00:08:49.130 --> 00:08:53.720
Maintenant, nous avons appris la conception Web réactive et les requêtes multimédias dans une leçon précédente.

137
00:08:53.990 --> 00:08:56.720
Du point de vue technologique, nous savons quoi faire.

138
00:08:57.380 --> 00:08:59.190
Nous nous dirigerions vers notre feuille de style d'en-tête.

139
00:08:59.240 --> 00:09:01.910
C'est là que vivent tous nos styles liés aux en-têtes.

140
00:09:02.360 --> 00:09:04.730
Et nous créerions simplement une nouvelle requête média.

141
00:09:05.810 --> 00:09:17.060
Écran média uniquement et max avec 480 pixels, puis nous ciblerions tout élément que nous devions cibler.

142
00:09:17.090 --> 00:09:23.770
Dans ce cas, l'élément de liste de navigation de l'en-tête du site.

143
00:09:24.320 --> 00:09:28.600
Et dans ce cas, nous voulions qu'ils soient pleine largeur afin que nous leur disions de ne plus flotter.

144
00:09:28.610 --> 00:09:29.800
Nous supprimerions la marge.

145
00:09:29.810 --> 00:09:30.230
Droite.

146
00:09:30.860 --> 00:09:35.030
Donc, d'un point de vue technologique, nous savons que c'est ainsi que nous incluons les requêtes multimédias.

147
00:09:35.270 --> 00:09:37.130
C'est ainsi que nous plaisons au navigateur Web.

148
00:09:37.400 --> 00:09:39.770
Mais cela nous plaît-il en tant que développeur?

149
00:09:40.250 --> 00:09:42.440
Est-ce ainsi que nous voulons écrire nos feuilles de style?

150
00:09:43.160 --> 00:09:50.690
Cette syntaxe de code a-t-elle un sens conceptuellement ou pourrions-nous utiliser des mix-ins pour améliorer notre expérience en tant que

151
00:09:50.690 --> 00:09:51.200
codeur?

152
00:09:51.740 --> 00:09:53.930
La réponse est certainement oui.

153
00:09:54.210 --> 00:09:57.230
INS peut améliorer notre expérience de requête multimédia.

154
00:09:57.260 --> 00:09:59.050
Je vais donc supprimer ce code.

155
00:10:00.100 --> 00:10:02.950
Rendez-vous sur notre fichier partiel mixin.

156
00:10:03.730 --> 00:10:06.640
Voici donc le code de gradient que nous avons créé plus tôt.

157
00:10:07.510 --> 00:10:13.420
Je vais aller en bas, créer un commentaire qui lit le mélange de requêtes multimédias de Nixon.

158
00:10:14.430 --> 00:10:19.890
Et commençons notre mixage de requêtes média chez Symbol Mixin.

159
00:10:20.910 --> 00:10:24.020
Je vais nommer ce mix dans Breakpoint.

160
00:10:24.750 --> 00:10:28.410
Bébé ours dans les accolades.

161
00:10:28.470 --> 00:10:31.020
Je vais inclure le code pour créer une requête multimédia.

162
00:10:31.060 --> 00:10:33.990
Donc écran média uniquement.

163
00:10:35.150 --> 00:10:35.690
Et.

164
00:10:37.150 --> 00:10:41.080
Max avec quatre cent quatre-vingt pixels.

165
00:10:42.380 --> 00:10:44.850
Maintenant, encore une fois, nous voulons que les extrémités mixtes soient flexibles.

166
00:10:44.870 --> 00:10:49.160
Nous voulons qu'ils soient un conteneur vide dans lequel nous transmettons le contenu plus tard.

167
00:10:49.610 --> 00:10:54.440
Donc, dans cette requête multimédia, je ne vais cibler aucun élément ni ajouter aucune propriété.

168
00:10:54.530 --> 00:11:02.090
Je vais simplement inclure le symbole at et dire le contenu pendant que je suis encore dans le mix ins, fichier

169
00:11:02.090 --> 00:11:02.510
partiel.

170
00:11:02.570 --> 00:11:05.200
Je vais copier ce code que nous venons d'écrire collé.

171
00:11:05.730 --> 00:11:07.470
Nous créons donc un deuxième mixage.

172
00:11:07.940 --> 00:11:15.020
Et je donnerai à celui-ci un nom de Breakpoint Poppa Bear et je changerai sa condition de requête multimédia

173
00:11:15.400 --> 00:11:16.280
en Menwith.

174
00:11:18.630 --> 00:11:20.010
Onze cents pixels.

175
00:11:21.390 --> 00:11:26.520
Alors maintenant que nous avons créé ces deux mixages de requêtes multimédias, je vais revenir à notre

176
00:11:26.760 --> 00:11:28.020
fichier SPSS d'en-tête.

177
00:11:28.290 --> 00:11:33.420
Et rappelons-nous, notre objectif était de styliser les liens de navigation de sorte que pour les écrans plus petits, ils en définissent

178
00:11:33.420 --> 00:11:34.200
un par ligne.

179
00:11:35.100 --> 00:11:43.620
Donc, dans notre règle de base d'origine pour les éléments de liste dans la navigation, je peux simplement dire inclure l'utilisation du mélange que nous

180
00:11:43.620 --> 00:11:44.970
venons de créer.

181
00:11:45.030 --> 00:11:47.790
Alors point d'arrêt, bébé ours.

182
00:11:50.180 --> 00:11:52.480
Flotter aucun, marge, non?

183
00:11:52.520 --> 00:11:53.080
Zéro.

184
00:11:54.340 --> 00:11:56.230
Marge en bas deux pixels.

185
00:11:57.040 --> 00:11:59.590
Je vais donc enregistrer notre en-tête, fichier partiel.

186
00:11:59.860 --> 00:12:02.340
Et dans notre écran principal, Sassi Stylesheet.

187
00:12:02.830 --> 00:12:09.010
Je vais m'assurer que notre importation du fichier mixin se situe vers le haut de notre feuille de style afin

188
00:12:09.010 --> 00:12:10.600
que les micros soient disponibles.

189
00:12:10.620 --> 00:12:13.240
Au moment où nous les utilisons dans le fichier d'en-tête.

190
00:12:13.990 --> 00:12:15.100
Donc, si nous économisons.

191
00:12:16.410 --> 00:12:20.160
Lorsque nous actualisons, nous voyons que nos styles mobiles sont en place.

192
00:12:20.670 --> 00:12:27.030
Examinons donc la liberté retrouvée que notre mixin nous offre dans la règle pour l'élément de liste.

193
00:12:27.540 --> 00:12:34.890
Nous avons inclus notre mélange dans Breakpoint Baby Bear en imbriquant simplement ce mélange dans la règle pour l'élément de

194
00:12:34.890 --> 00:12:35.280
liste.

195
00:12:35.520 --> 00:12:37.980
Le compilateur SAS s'occupe du reste.

196
00:12:38.550 --> 00:12:43.800
Vous remarquerez donc que dans cette requête multimédia, nous n'avons pas eu à sélectionner l'élément que nous voulions

197
00:12:43.800 --> 00:12:44.400
styliser.

198
00:12:44.970 --> 00:12:47.580
La nidification s'en occupe pour nous.

199
00:12:47.880 --> 00:12:51.360
Donc, conceptuellement, c'est beaucoup plus simple.

200
00:12:51.720 --> 00:12:53.310
Cela semble beaucoup plus naturel.

201
00:12:53.790 --> 00:12:55.290
Nous stylisons les éléments de la liste.

202
00:12:55.920 --> 00:12:57.540
Voici nos styles de base.

203
00:12:57.990 --> 00:12:59.790
Voici nos styles de bébé ours.

204
00:13:00.180 --> 00:13:05.460
Imaginons maintenant que pour des écrans plus grands ou des écrans de plus de 11 cents pixels.

205
00:13:05.760 --> 00:13:09.090
Nous voulons qu'il y ait plus de marge entre chaque lien.

206
00:13:10.700 --> 00:13:17.310
Donc, parce que nous avons créé le mixin Poppa Bear, c'est aussi simple que de rester dans cette règle d'élément de liste

207
00:13:17.310 --> 00:13:19.810
et de dire inclure le point d'arrêt.

208
00:13:20.350 --> 00:13:20.650
Pop.

209
00:13:20.730 --> 00:13:21.210
Ours.

210
00:13:22.590 --> 00:13:23.400
Marge, non?

211
00:13:23.880 --> 00:13:24.960
50 pixels.

212
00:13:25.500 --> 00:13:31.980
Donc, si nous enregistrons ici et également dans notre sasy principal, feuille de style pour déclencher le compilateur SAS lorsque

213
00:13:31.980 --> 00:13:32.880
nous actualisons.

214
00:13:33.480 --> 00:13:38.670
Si je redimensionne ma fenêtre pour être supérieure à 11 cents pixels, nous voyons la marge augmenter.

215
00:13:39.420 --> 00:13:44.370
Maintenant, cette approche mixte de traitement des requêtes multimédias offre deux avantages principaux.

216
00:13:44.700 --> 00:13:48.840
Premièrement, il centralise nos conditions de requête multimédia.

217
00:13:49.410 --> 00:13:52.560
Donc, conceptuellement, nous pouvons créer différents points d'arrêt.

218
00:13:52.980 --> 00:13:55.260
Baby Bear est de cette taille.

219
00:13:55.590 --> 00:13:57.450
Poppa Bear est de cette taille.

220
00:13:57.660 --> 00:14:02.730
Si nous voulions créer Mama Bear comme taille intermédiaire ou Goldilocks comme taille intermédiaire.

221
00:14:03.060 --> 00:14:03.640
C'est à toi de voir.

222
00:14:03.660 --> 00:14:08.490
Vous pouvez avoir autant de points d'arrêt différents que vous le souhaitez, mais l'idée est que vous ne

223
00:14:08.490 --> 00:14:15.450
définissez ces valeurs de point d'arrêt qu'une seule fois dans votre mixage de sorte que lorsque vous créez vos styles réels, vous n'avez pas besoin

224
00:14:15.450 --> 00:14:16.560
d'être un robot.

225
00:14:16.590 --> 00:14:19.240
En se souvenant de ces largeur max exacte pour 80.

226
00:14:19.240 --> 00:14:20.670
Tu veux dire avec onze cents?

227
00:14:20.790 --> 00:14:27.040
Au lieu de cela, vous pouvez vous souvenir conceptuellement de Baby Bear, Papa Bear, Mama Bear, Goldilocks, ces mots clés que vous avez

228
00:14:27.060 --> 00:14:30.990
définis, puis n'importe où dans votre feuille de style, vous pouvez les utiliser.

229
00:14:31.560 --> 00:14:38.910
Imaginons donc que nous voulons utiliser une police de base plus grande pour les grands écrans et une police de base plus

230
00:14:38.910 --> 00:14:40.590
petite pour les petits écrans.

231
00:14:41.100 --> 00:14:43.970
C'est aussi simple que d'éditer notre H. T. règle de messagerie.

232
00:14:44.010 --> 00:14:45.150
Et notre feuille de style principale.

233
00:14:45.720 --> 00:14:47.130
Je peux donc dire inclure.

234
00:14:48.260 --> 00:14:55.170
Point d'arrêt, bébé ours, taille de police point huit, E. M ..

235
00:14:56.750 --> 00:15:02.930
Inclure Breakpoint, Poppa Bear, taille de police un point quatre Yemm.

236
00:15:03.920 --> 00:15:09.290
Donc, lorsque nous enregistrons et rafraîchissons, vous pouvez voir ici les styles Poppa Bear ou grand écran.

237
00:15:09.590 --> 00:15:11.540
Voici les styles normaux.

238
00:15:11.960 --> 00:15:14.330
Et voici les styles de bébé ours.

239
00:15:14.360 --> 00:15:16.970
Nous pouvons donc voir les changements de taille de police en conséquence.

240
00:15:19.040 --> 00:15:24.740
Donc, encore une fois, le principal avantage d'utiliser Nixons pour les requêtes multimédias est que vous n'avez pas besoin de mémoriser vos points

241
00:15:24.740 --> 00:15:29.720
d'arrêt, vous les définissez une fois dans le mixage, puis vous pouvez les oublier et vous concentrer uniquement sur

242
00:15:29.720 --> 00:15:32.120
le schéma de dénomination que vous '' ve créé.

243
00:15:33.080 --> 00:15:39.890
Le deuxième avantage est que nous ne pouvons pas regrouper conceptuellement tous les styles liés à un élément dans une

244
00:15:39.890 --> 00:15:40.400
règle.

245
00:15:40.880 --> 00:15:45.830
Nous n'avons pas besoin de créer des requêtes multimédias complètement distinctes où nous resélectionnons les éléments que nous

246
00:15:45.830 --> 00:15:46.400
voulons styliser.

247
00:15:46.760 --> 00:15:53.600
Nous pouvons conceptuellement rester concentrés sur un élément de contenu et le styler aux différents points d'arrêt.

248
00:15:55.300 --> 00:15:58.600
Cela conclura donc notre section sur les fins de mixage.

249
00:15:58.870 --> 00:16:04.900
J'espère que je vous ai convaincu qu'ils sont très utiles et que vous avez faim de les utiliser dans vos propres projets.

250
00:16:05.530 --> 00:16:07.120
Donc ça suffit sur Mixin.

251
00:16:07.480 --> 00:16:12.340
Maintenant, changeons de vitesse et parlons plus spécifiquement des opérateurs.

252
00:16:12.370 --> 00:16:15.740
Jetons un coup d'œil aux opérateurs mathématiques pour vous mouiller les pieds.

253
00:16:16.540 --> 00:16:22.540
Donc, si vous avez déjà pensé que je souhaiterais pouvoir effectuer l'arithmétique de base dans mes feuilles de style, vous avez de la chance

254
00:16:22.720 --> 00:16:23.500
avec SAS.

255
00:16:23.560 --> 00:16:24.160
Nous pouvons.

256
00:16:24.520 --> 00:16:28.660
Voici donc une règle dans notre feuille de style pour un élément avec une classe de boîte.

257
00:16:28.990 --> 00:16:31.840
Et sur notre page Web, cela correspond à cette boîte grise.

258
00:16:32.800 --> 00:16:35.640
Il a actuellement une largeur de 150 pixels.

259
00:16:36.220 --> 00:16:40.030
Maintenant, en mathématiques élémentaires, vos professeurs vous ont toujours dit de montrer votre travail.

260
00:16:40.660 --> 00:16:42.640
Et la même chose s'applique à la conception Web.

261
00:16:43.240 --> 00:16:47.620
Il y aura des moments où vous calculerez la largeur parfaite, que ce soit des pixels ou des pourcentages.

262
00:16:48.070 --> 00:16:53.350
Et vous ne voulez pas vous retrouver avec une valeur où vous ne vous souvenez pas comment vous êtes arrivé à cette valeur.

263
00:16:53.530 --> 00:16:57.090
Donc, à la place, nous pouvons inclure les mathématiques directement dans nos feuilles de style.

264
00:16:57.520 --> 00:17:06.670
Nous pouvons donc dire cent pixels plus 200 pixels si nous enregistrons et regardons le CSF créé par le compilateur.

265
00:17:07.090 --> 00:17:09.210
On voit une largeur de 300 pixels.

266
00:17:10.000 --> 00:17:12.520
Ainsi, l'addition et la soustraction sont des morceaux de gâteau.

267
00:17:13.000 --> 00:17:14.950
Nous pouvons également effectuer la division.

268
00:17:15.310 --> 00:17:19.390
On peut donc dire cinq cents pixels divisés par deux.

269
00:17:19.870 --> 00:17:23.710
Et lorsque vous utilisez la division, vous voulez souvent vous assurer de la mettre entre parenthèses.

270
00:17:23.980 --> 00:17:30.670
Donc, si nous enregistrons ces tâches, le compilateur retournera une valeur de deux cent cinquante pixels.

271
00:17:31.660 --> 00:17:35.770
Et le symbole de la multiplication est l'astérisque.

272
00:17:36.280 --> 00:17:39.660
On peut donc essayer trois pixels fois deux.

273
00:17:40.510 --> 00:17:42.910
Et nous voyons que le compilateur S est fiable.

274
00:17:43.770 --> 00:17:45.130
Six cents pixels.

275
00:17:45.760 --> 00:17:51.460
Je vais maintenant vous laisser utiliser votre imagination pour réfléchir aux façons dont les mathématiques seraient utiles dans vos feuilles de style.

276
00:17:51.820 --> 00:17:56.650
La raison pour laquelle je vous ai montré les bases ici n'est pas tant de maths pour le plaisir des maths, mais

277
00:17:56.650 --> 00:17:59.590
c'est pour vous rappeler que SAS est un langage de programmation complet.

278
00:18:00.160 --> 00:18:06.430
Cela inclut donc les opérateurs mathématiques ou non, les opérateurs logiques, les directives de contrôle et les expressions.

279
00:18:06.940 --> 00:18:09.690
Il y a beaucoup à faire avec SAS.

280
00:18:10.000 --> 00:18:14.730
Et si vous venez d'un milieu de programmation ou si vous voulez en savoir plus sur la programmation, il y

281
00:18:14.740 --> 00:18:16.930
a beaucoup de raisons d'être excité avec SAS.

282
00:18:17.620 --> 00:18:22.240
Maintenant, je tiens à souligner que vous n'avez pas besoin d'attendre que votre gourou SAS commence à l'utiliser

283
00:18:22.240 --> 00:18:23.290
dans vos projets Web.

284
00:18:23.740 --> 00:18:27.130
J'encourage tout le monde à expérimenter ce que nous avons appris dans ces leçons.

285
00:18:27.370 --> 00:18:33.190
Et si et quand vous voulez en savoir plus, consultez le site Web officiel SAS hyphen lang dot com.

286
00:18:33.700 --> 00:18:34.360
S'amuser.

287
00:18:34.480 --> 00:18:36.580
SAS est un langage ext incroyable.
