1

00:00:00,390  -->  00:00:05,080
In this lesson we will learn about responsive grids.

2

00:00:05,340  -->  00:00:11,640
We will begin by learning what a grid is and what it's used for then we will take a look at grids from

3

00:00:11,640  -->  00:00:13,420
a responsive angle.

4

00:00:13,560  -->  00:00:20,310
And finally we will learn how to write our own code to create a responsive grid from scratch.

5

00:00:20,310  -->  00:00:22,260
Let's get started.

6

00:00:22,260  -->  00:00:26,350
We will begin with a question what is a grid.

7

00:00:26,640  -->  00:00:33,900
A grid is a tool that graphic designers use to make sure that their layouts follow a uniform and balanced

8

00:00:33,900  -->  00:00:35,430
structure.

9

00:00:35,460  -->  00:00:42,180
If you've ever looked in a magazine or newspaper or website or app and thought that everything was perfectly

10

00:00:42,180  -->  00:00:48,810
laid out there's a good chance that whoever designed that product used a grid structure in front of

11

00:00:48,810  -->  00:00:51,870
you is one of the world's most popular grids.

12

00:00:51,870  -->  00:00:55,570
This is a 12 column grid.

13

00:00:55,590  -->  00:00:59,980
Now let's imagine that you and I are designing a new Web site together.

14

00:01:00,300  -->  00:01:02,820
This grid is our blank canvas.

15

00:01:02,910  -->  00:01:07,600
So let's imagine that we want four columns in our website for four articles.

16

00:01:07,740  -->  00:01:12,860
There are the four columns now visitors of our website won't see the red lines.

17

00:01:12,870  -->  00:01:18,990
They will simply see the four columns the grids are the red lines are only there for us during the design

18

00:01:18,990  -->  00:01:20,230
stages.

19

00:01:20,580  -->  00:01:27,330
Now the reason the 12 call them grid is so common is because 12 is divisible by many useful numbers

20

00:01:27,350  -->  00:01:27,510
.

21

00:01:27,720  -->  00:01:35,010
So if we wanted four columns we can see each one of our columns takes up three red bars a red bar is

22

00:01:35,010  -->  00:01:40,660
referred to as a column and the space between two red bars is referred to as a gutter.

23

00:01:41,040  -->  00:01:48,150
A key concept is that we don't want to begin or end one of our Web site columns in a gutter.

24

00:01:48,180  -->  00:01:54,840
We want our Web site content to cleanly align with the red bars or with the 12 columns of the grid layout

25

00:01:55,380  -->  00:02:03,330
by respecting the gutters our layouts will have uniform margins and clean lines.

26

00:02:03,330  -->  00:02:10,020
So if for example instead of four columns on our website we wanted three a bit of arithmetic tells us

27

00:02:10,020  -->  00:02:17,670
that each one of our column should span four of the red bars if we wanted our website to have two columns

28

00:02:17,670  -->  00:02:17,760
.

29

00:02:17,760  -->  00:02:24,090
Obviously each should span six of the red bars obviously are different columns don't always have to

30

00:02:24,090  -->  00:02:25,560
be equal to one another.

31

00:02:25,650  -->  00:02:30,240
So if we wanted to follow the rule of thirds and have our main column take up two thirds of the space

32

00:02:30,540  -->  00:02:38,140
and have a sidebar take up one third of this base we could use an 8 4 split of our 12 column grid.

33

00:02:38,250  -->  00:02:44,430
Now the benefits of using grid might not be obvious until we realize that our Web site is made up of

34

00:02:44,430  -->  00:02:47,040
multiple rows of columns.

35

00:02:47,430  -->  00:02:55,680
And as a designer we don't want to be inventing new horizontal rhythms for each row using a grid helps

36

00:02:55,680  -->  00:03:01,860
us establish one unified horizontal rhythm and stick with that rhythm throughout the entirety of our

37

00:03:01,890  -->  00:03:02,570
layout.

38

00:03:02,940  -->  00:03:09,110
And that goes a long way towards pleasing the human eye and making our layout feel cohesive.

39

00:03:09,600  -->  00:03:16,710
So now that we've established what a grid is and why it might be a good idea to use one we need to discuss

40

00:03:16,950  -->  00:03:21,980
how we can apply this notion of a grid to the modern day web browser.

41

00:03:22,440  -->  00:03:26,130
So let's give ourselves a concrete goal to work towards.

42

00:03:26,180  -->  00:03:30,710
I put together a few rough draft sketches of a layout that I would like to create.

43

00:03:30,990  -->  00:03:34,460
So this is what the layout should look like at the desk top level.

44

00:03:34,770  -->  00:03:40,410
The main column on the left we'll have four call outs or four sub columns and then it will have two

45

00:03:40,410  -->  00:03:44,950
photographs the blue content on the side represents a side bar.

46

00:03:45,270  -->  00:03:47,410
So this is a large desktop monitor.

47

00:03:47,490  -->  00:03:53,430
Once we get down to the medium desktop monitor or the laptop I want the call outs in the main column

48

00:03:53,490  -->  00:03:59,280
to sit two per row instead of four Parow like we had on the large desktop version.

49

00:03:59,280  -->  00:04:06,270
Once we get down to a tablet we want to make the sidebar the blue area simply stacked below what used

50

00:04:06,270  -->  00:04:10,890
to be the main column and the call outs and photographs will again set to Parow.

51

00:04:11,070  -->  00:04:16,050
And once we get down to a smartphone everything should set one per row.

52

00:04:16,050  -->  00:04:21,540
So single call them with the exception of the green which is two photographs.

53

00:04:21,570  -->  00:04:26,480
So that's the response of lay out that I would like to achieve at the different screen sizes.

54

00:04:26,490  -->  00:04:31,530
Now here we are in the web browser and this is a page that I've put together behind the scenes and it

55

00:04:31,530  -->  00:04:37,500
has all of the content that we were just looking at in those rough draft sketches only there's been

56

00:04:37,500  -->  00:04:39,200
zero layout applied.

57

00:04:39,330  -->  00:04:45,660
So even though the content is here nothing's being floated we don't see any columns now behind the scenes

58

00:04:45,660  -->  00:04:45,760
.

59

00:04:45,780  -->  00:04:50,490
I've written CSSA that creates a responsive grid system.

60

00:04:50,490  -->  00:04:57,870
Now what we are going to do together is wrap this content that's making up the page in certain divs

61

00:04:57,870  -->  00:05:03,600
with specific class names in order to create the different layouts for different screen sizes that we

62

00:05:03,600  -->  00:05:05,120
looked at earlier.

63

00:05:05,130  -->  00:05:11,280
Now most responsive grid systems adopt a mobile first approach and the code that I set up is no different

64

00:05:11,300  -->  00:05:11,580
.

65

00:05:11,820  -->  00:05:15,720
So I'm going to resize my web browser to resemble that of a smartphone.

66

00:05:16,250  -->  00:05:22,250
And we can see that our layout is actually almost already complete at the smartphone level because for

67

00:05:22,250  -->  00:05:25,250
the most part we just want elements to sit one per row.

68

00:05:25,520  -->  00:05:31,980
However we did one even at the Mobile level for these two photographs to sit side by side.

69

00:05:32,030  -->  00:05:38,460
So in our text editor Heres the HMO and I will look for those two images here they are.

70

00:05:38,780  -->  00:05:44,120
And here is the code that we will use to create the two columns for the two images we want to create

71

00:05:44,180  -->  00:05:51,740
a row so I'll create a div with a class of row and within this div we want to create one day for each

72

00:05:51,740  -->  00:05:52,340
column.

73

00:05:52,370  -->  00:05:53,790
So we want to call names.

74

00:05:54,050  -->  00:06:01,700
So I'll give this element a class of call for column and then I'll give it a second class of call ex-s

75

00:06:01,860  -->  00:06:03,240
6.

76

00:06:03,260  -->  00:06:08,450
Now I will explain this naming scheme in just a moment but for the time being if it doesn't make sense

77

00:06:08,450  -->  00:06:09,930
that's perfectly OK.

78

00:06:10,160  -->  00:06:13,410
Now we want to have these because we wanted one for each image.

79

00:06:13,520  -->  00:06:15,220
So I'm going to copy and paste.

80

00:06:15,440  -->  00:06:22,220
And then let's cut and paste each image into these newly created divs.

81

00:06:22,370  -->  00:06:29,030
So if we save and refresh can see that the two images now sit side by side.

82

00:06:29,030  -->  00:06:31,930
Now let's review this naming scheme.

83

00:06:32,000  -->  00:06:34,180
Call stands for call them.

84

00:06:34,460  -->  00:06:36,900
We'll circle back to excess in just a moment.

85

00:06:36,960  -->  00:06:40,260
Six is relating to the 12 column grid.

86

00:06:40,280  -->  00:06:45,280
So if we want two columns half of 12 is six.

87

00:06:45,350  -->  00:06:49,350
Now regarding X as this stands for extra small.

88

00:06:49,610  -->  00:06:56,740
So in my responsive grid system I refer to smartphones as extra small or access.

89

00:06:56,840  -->  00:07:01,100
I refer to tablets as small or SM.

90

00:07:01,400  -->  00:07:11,990
I refer to laptops as M.D or medium and I refer to large desktop monitors as LG or large.

91

00:07:12,020  -->  00:07:18,350
Now we are using a mobile first approach so this means that because we targeted extra small call them

92

00:07:18,380  -->  00:07:25,970
extra small six those two images will sit side by side one another no matter what size device our users

93

00:07:25,970  -->  00:07:27,170
are using.

94

00:07:27,170  -->  00:07:31,590
So our live is already complete for the smartphone device size.

95

00:07:31,730  -->  00:07:37,640
Let's move on now to the tablet size if you recall our rough draft sketches.

96

00:07:37,640  -->  00:07:43,160
The only difference between the smartphone layout and the tablet layer is that we wanted our call outs

97

00:07:43,160  -->  00:07:45,330
to sit two per row.

98

00:07:45,380  -->  00:07:47,460
Once we get to the tablet size.

99

00:07:47,750  -->  00:07:51,740
So in our HMO we will find those boxes here they are.

100

00:07:52,310  -->  00:07:59,030
So I will begin by creating a row div with a class of row.

101

00:07:59,120  -->  00:08:06,230
Now within this row I'm going to create four different columns call for column and I'll give this element

102

00:08:06,890  -->  00:08:11,660
an additional class of call them small which stands for tablet.

103

00:08:11,660  -->  00:08:14,000
Now again we want these to sit too Preux.

104

00:08:14,060  -->  00:08:17,870
So using the 12 column grid we'll use 6.

105

00:08:17,870  -->  00:08:23,270
Now there are four of these call outs so I'll copy and paste this device so that there are four of them

106

00:08:23,270  -->  00:08:23,760
.

107

00:08:23,840  -->  00:08:25,810
Next I will scroll down a bit.

108

00:08:25,860  -->  00:08:29,090
Here's the code that was used to create one of those blue boxes.

109

00:08:29,090  -->  00:08:30,660
So I'll grab one of them.

110

00:08:30,750  -->  00:08:37,310
Delete the others and then paste them in to each of these different four columns that we just set up

111

00:08:37,310  -->  00:08:45,230
.

112

00:08:45,500  -->  00:08:50,390
So if I save and refresh we can see that now at the tablet level.

113

00:08:50,390  -->  00:08:53,890
These blue boxes are these call outs to Parow.

114

00:08:54,010  -->  00:08:59,780
And if I resize my browser to resemble that of a smartphone you can see that they still only sit one

115

00:08:59,780  -->  00:09:00,910
per row.

116

00:09:00,920  -->  00:09:11,030
This is because we chose a class of call small six by targeting small classes styles will only be applied

117

00:09:11,030  -->  00:09:15,600
to devices that are a certain size or larger.

118

00:09:15,730  -->  00:09:19,010
So our layer is complete for the tablet size.

119

00:09:19,010  -->  00:09:24,890
Now if you recall back to our rough draft sketches The only difference between the medium desktop and

120

00:09:24,890  -->  00:09:30,790
the tablet version is that the medium desktop version should have a sidebar that sits on the right side

121

00:09:30,830  -->  00:09:34,200
instead of stacking beneath the main content.

122

00:09:34,610  -->  00:09:43,060
So in our HMO we all scroll towards the top and create a div with a class of row.

123

00:09:43,310  -->  00:09:46,430
Now we're going to create two columns.

124

00:09:46,990  -->  00:09:51,570
One we will say call medium eight.

125

00:09:51,860  -->  00:09:58,120
And the second div will have a class of call and call medium four.

126

00:09:58,250  -->  00:10:02,070
So this will be the main column and this will be the sidebar.

127

00:10:02,180  -->  00:10:03,990
We're following the rule of thirds.

128

00:10:04,040  -->  00:10:08,350
So in terms of our 12 column grid we're using an 8 4 split.

129

00:10:08,420  -->  00:10:14,390
So now I'm simply going to cut and paste all of the main column content into this div and I'll cut and

130

00:10:14,390  -->  00:10:21,550
paste all of the sidebar content into this div to the main column content starts here.

131

00:10:23,320  -->  00:10:28,100
And ends here so I cut that pasted in here.

132

00:10:28,450  -->  00:10:32,050
And the sidebar content begins here and ends here.

133

00:10:32,050  -->  00:10:35,120
So cut and paste here.

134

00:10:35,620  -->  00:10:42,000
So if I save and refresh we can see that we now have to call them out.

135

00:10:42,580  -->  00:10:48,430
But if I shrink my window down to resemble a tablet you can see that again the sidebar stacks beneath

136

00:10:48,520  -->  00:10:50,680
the main content.

137

00:10:50,680  -->  00:10:56,320
This is because we chose a class of call and D for medium.

138

00:10:56,380  -->  00:11:03,130
So these classes of call medium for a call medium eight will only be applied to the page if the device

139

00:11:03,220  -->  00:11:06,490
is medium sized or larger.

140

00:11:06,490  -->  00:11:12,160
Now if we think back to our rough draft sketches The only difference between the medium desktop and

141

00:11:12,160  -->  00:11:19,300
large desktop layouts is that we want the call outs in the main column to sit for per row for large

142

00:11:19,300  -->  00:11:21,180
desktop monitors.

143

00:11:21,250  -->  00:11:29,240
So in the web browser I'm going to resize my browser to be quite large and then hop over to the HTL

144

00:11:30,400  -->  00:11:33,560
search for the columns that are making up those boxes.

145

00:11:33,580  -->  00:11:34,900
Here they are.

146

00:11:34,900  -->  00:11:38,760
They have a class currently of column small 6.

147

00:11:38,800  -->  00:11:43,490
So that means for tablet size and larger they should take up half the width.

148

00:11:43,690  -->  00:11:51,330
We're going to add an additional class of call them large three.

149

00:11:51,400  -->  00:11:58,630
If we think back to the 12 column grid to create four pieces of content Parow we know that 12 divided

150

00:11:58,630  -->  00:12:00,140
by four is three.

151

00:12:00,430  -->  00:12:04,810
And we only want this style to be applied to devices that are large.

152

00:12:05,140  -->  00:12:13,600
So then I will add this new class to the additional 3 remaining columns.

153

00:12:13,600  -->  00:12:21,190
So now if we save and refresh we can see that because my screen is considered large the call outs now

154

00:12:21,190  -->  00:12:23,070
sit for Parow.

155

00:12:23,470  -->  00:12:29,740
But if I resize my window back to a medium desktop size they sit two per row so we can see that these

156

00:12:29,740  -->  00:12:32,650
two classes are working in harmony.

157

00:12:32,770  -->  00:12:38,530
We can layer in different class names that are targeting different screen sizes to create the desired

158

00:12:38,530  -->  00:12:39,300
layout.

159

00:12:39,670  -->  00:12:42,320
So our responsive layout is now complete.

160

00:12:42,520  -->  00:12:46,390
Now in the beginning of this lesson I promised that we would learn how to write code ourselves from

161

00:12:46,390  -->  00:12:47,560
scratch.

162

00:12:47,770  -->  00:12:53,350
And throughout this lesson we've only been looking at H T and now I wrote the CSSA that accompanies

163

00:12:53,350  -->  00:12:55,740
these class names behind the scenes.

164

00:12:55,840  -->  00:13:00,490
So now to keep my word I'm going to remove all of that CSSA.

165

00:13:00,520  -->  00:13:02,620
And we are going to write it together.

166

00:13:02,650  -->  00:13:08,800
So behind the scenes I just deleted all of the CSSA that was creating the responsive grid system that

167

00:13:08,800  -->  00:13:11,860
was corresponding with the class names we were using.

168

00:13:12,010  -->  00:13:16,580
And you can see this is what we're left with simple content that has no way out.

169

00:13:16,630  -->  00:13:17,680
Nothing being floated.

170

00:13:17,680  -->  00:13:19,540
There are no columns.

171

00:13:19,540  -->  00:13:22,510
However all of our HTML is still intact.

172

00:13:22,510  -->  00:13:27,730
So we still have rows and we still have columns and we still have our specific class name systems.

173

00:13:27,760  -->  00:13:34,120
Now we just need to write the corresponding CSSA together that applies the correct with than float and

174

00:13:34,120  -->  00:13:37,020
padding values to correspond with these names.

175

00:13:37,030  -->  00:13:38,330
So let's get started.

176

00:13:38,470  -->  00:13:43,180
Here we are in the style sheet and the first thing I'm going to do is to make sure that at the bottom

177

00:13:43,180  -->  00:13:49,420
where we have our clear fix code instead of group I want to make sure that I can also simply add row

178

00:13:49,660  -->  00:13:54,220
to a parent element and have it automatically clear its floated children.

179

00:13:54,220  -->  00:14:00,610
So with the rope clear fix solution in place we can begin writing the actual logic to our grid system

180

00:14:00,610  -->  00:14:00,950
.

181

00:14:01,000  -->  00:14:06,400
So the first rule that I will create is call for column in our HMO.

182

00:14:06,430  -->  00:14:12,670
You will remember that every call them received in base class of call as well as additional classes

183

00:14:12,670  -->  00:14:15,980
to tell them how much space to take up for different devices.

184

00:14:16,060  -->  00:14:18,220
But the base call class is important.

185

00:14:18,460  -->  00:14:22,250
So we want all columns to be floated to the left.

186

00:14:22,300  -->  00:14:29,480
Next let's write the code that selects the extra small half wit column.

187

00:14:29,530  -->  00:14:36,970
So you will remember that we wanted the images to sit two per row even at the extra small smartphone

188

00:14:36,970  -->  00:14:37,670
level.

189

00:14:37,900  -->  00:14:41,300
So this seems like a logical place to begin and RCA says.

190

00:14:41,320  -->  00:14:47,040
So if an element receives this class we want it to take up half of the available wit.

191

00:14:47,050  -->  00:14:51,730
Now if an element doesn't receive any of the classes that we've specified so far we want them to take

192

00:14:51,730  -->  00:14:56,320
up the full available width if we save and refresh.

193

00:14:56,320  -->  00:14:59,990
We can see the two images now sit two per line.

194

00:15:00,280  -->  00:15:05,020
However we are missing gutters or margins between our elements.

195

00:15:05,050  -->  00:15:10,780
So if you think back to the original graphic of the 12 column grid with the red bars there were spacing

196

00:15:10,780  -->  00:15:13,220
between each of the 12 red columns.

197

00:15:13,360  -->  00:15:15,070
We refer to that as the gutter.

198

00:15:15,130  -->  00:15:21,430
So to add that back into our code in the universal column rule it is applied to all columns.

199

00:15:21,500  -->  00:15:23,500
We can say padding right.

200

00:15:23,860  -->  00:15:25,400
Twenty pixels.

201

00:15:25,780  -->  00:15:28,770
Box sizing borderer box.

202

00:15:28,780  -->  00:15:34,810
That way the padding does not adjust the overall calculated width of the elements.

203

00:15:34,810  -->  00:15:40,930
Now if we save and refresh you can see that our code added gutters to the right of each of our columns

204

00:15:40,950  -->  00:15:41,040
.

205

00:15:41,110  -->  00:15:48,310
However we don't need a gun or at the very end of our row we only need gutters in between columns so

206

00:15:48,310  -->  00:15:56,620
to counteract this at a CSSA level what we can do is target the row element that houses our columns

207

00:15:56,620  -->  00:15:56,680
.

208

00:15:56,680  -->  00:16:01,990
So you'll see a div with a class of row is used every time we want to create a row of columns.

209

00:16:02,110  -->  00:16:09,600
Now in our CSL we can target that and give it a margin write value of negative 20 pixels.

210

00:16:09,610  -->  00:16:12,300
This is related to the padding that we just added.

211

00:16:12,400  -->  00:16:18,820
So if we save and refresh we can see that we still maintain a gutter between the two columns but we

212

00:16:18,820  -->  00:16:21,540
don't have extra gutter at the end of our row.

213

00:16:21,820  -->  00:16:22,880
Excellent.

214

00:16:22,900  -->  00:16:29,950
Now we simply need to make sure that our style sheet has all the possible values 1 through 11 to accommodate

215

00:16:30,010  -->  00:16:31,370
the 12 column grid.

216

00:16:31,450  -->  00:16:36,360
So 6 is obviously 50 percent of 12.

217

00:16:36,360  -->  00:16:40,820
3 is obviously 25 percent of 12.

218

00:16:40,990  -->  00:16:49,360
Now instead of you watching me perform this very basic arithmetic I'm simply going to paste in rules

219

00:16:49,390  -->  00:16:51,860
for 1 through 11.

220

00:16:51,880  -->  00:16:57,280
Now remember we're using the extra small or mobile size as our baseline.

221

00:16:57,490  -->  00:17:00,830
So these rules do not need to be within immediate query.

222

00:17:00,880  -->  00:17:04,460
We want these to be applied to every device under the sun.

223

00:17:04,460  -->  00:17:13,060
However once we bump up from extra small to small we want those classes to only be applied to screens

224

00:17:13,180  -->  00:17:23,310
of a certain size so we can use a media query to say only if a device is at least 768 pixels wide.

225

00:17:23,350  -->  00:17:29,020
Should you then act on these classes that use the small prefix.

226

00:17:29,350  -->  00:17:35,470
So we now have our access for extra small classes in place we have our SM for small classes in place

227

00:17:35,590  -->  00:17:38,180
so that takes care of smartphones and tablets.

228

00:17:38,200  -->  00:17:44,760
Now we need to take care of our medium size so we can create an additional media query a media screen

229

00:17:44,800  -->  00:17:51,710
and men with 10 24 pixels.

230

00:17:52,600  -->  00:17:59,380
So only if a device is at least 10 24 wide Do we wanted to honor these class names that use the M.D

231

00:17:59,380  -->  00:18:01,170
or medium prefix.

232

00:18:01,330  -->  00:18:08,440
And finally let's take care of our large classes so we'll create one final media query medius screen

233

00:18:08,530  -->  00:18:13,540
and men with 12 eighty pixels.

234

00:18:14,230  -->  00:18:21,390
So only if a device is at least this wide should it honor our class names that use the LG for larger

235

00:18:21,400  -->  00:18:22,560
abbreviation.

236

00:18:22,930  -->  00:18:29,170
So with all of this in place if we save and refresh and make our browser window larger you can see that

237

00:18:29,170  -->  00:18:33,300
we hit the smaller tablet level and we have two call outs Parow.

238

00:18:33,570  -->  00:18:36,870
We had the medium size you can see again we have the side bar.

239

00:18:37,090  -->  00:18:42,580
And once we hit the large size we have the four call outs Parow very quickly you will remember that

240

00:18:42,580  -->  00:18:49,840
we set the gutter to be 20 pixels which looks good at the small excuse me extra small size but I think

241

00:18:49,840  -->  00:18:54,550
once we get up to the tablet or small size our gutters should be 40 pixels.

242

00:18:54,700  -->  00:19:00,790
So to make that change or simply hop over to our stylesheet scroll up to our small classes live within

243

00:19:00,790  -->  00:19:09,520
this media query or select the universal call class and say padding right should be 40 pixels instead

244

00:19:09,520  -->  00:19:10,520
of 20.

245

00:19:10,590  -->  00:19:17,170
Now remember to counteract that we need to address the parent row element and make sure that its margin

246

00:19:17,170  -->  00:19:19,990
right value is a negative value that matches the padding.

247

00:19:19,990  -->  00:19:21,220
We just set.

248

00:19:21,410  -->  00:19:29,350
We save and refresh we can see the gutter is now larger for every size except the extra small mobile

249

00:19:29,350  -->  00:19:30,490
level.

250

00:19:30,490  -->  00:19:33,000
And that will bring this lesson to a close.

251

00:19:33,190  -->  00:19:38,160
I realized there was a lot to soak in in this lesson you might need to watch it more than once.

252

00:19:38,290  -->  00:19:41,770
And at the end of the day if you dont want to use a grid you dont have to.

253

00:19:41,980  -->  00:19:47,260
But I wouldnt be doing my job if I didn't familiarize you with at least one grid system.

254

00:19:47,470  -->  00:19:53,020
I encourage you to download the demo files for this lesson and experiment with the classes yourself

255

00:19:53,030  -->  00:19:53,110
.

256

00:19:53,140  -->  00:19:55,360
Creating your own unique layouts.

257

00:19:55,360  -->  00:19:58,180
Have fun and I will see you in the next lesson.
