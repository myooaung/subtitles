1

00:00:00,510  -->  00:00:09,130
In this lesson we will learn about responsive web design when we say that a Web site is responsive.

2

00:00:09,150  -->  00:00:16,380
It simply means that the Web site responds or adapts to the size and characteristics of the device that

3

00:00:16,380  -->  00:00:18,360
is viewing the page.

4

00:00:18,360  -->  00:00:25,080
So for example a responsive web site may use a to call them lay out if someone's using a traditional

5

00:00:25,080  -->  00:00:28,610
desktop or laptop computer to view the page.

6

00:00:29,070  -->  00:00:35,580
But if someone viewed the exact same web page using a small smartphone they would see a different layout

7

00:00:36,330  -->  00:00:39,730
the page would reflowed to fit the smaller screen.

8

00:00:40,140  -->  00:00:45,280
So things would collapse down to a single column perhaps the navigation menu would adjust.

9

00:00:45,390  -->  00:00:52,560
Now in the modern era we are so accustomed to seeing Responsive Web sites that I think it might actually

10

00:00:52,560  -->  00:00:58,830
be easier to explain responsive web design by showing you an example of a Web site that is not responsive

11

00:00:58,840  -->  00:00:59,170
.

12

00:00:59,460  -->  00:01:05,010
So let's imagine that we designed a web site with laptops and desktop computers in mind.

13

00:01:05,040  -->  00:01:11,310
Now if we did not code the page to be responsive if we viewed the exact same page on our smartphone

14

00:01:11,850  -->  00:01:16,800
the text would be so small that it would be impossible to read and we would have to do the annoying

15

00:01:16,830  -->  00:01:23,400
task of pinch zooming in to read specific portions of the page and then scrolling in and pinch zooming

16

00:01:23,400  -->  00:01:25,530
and repaint zooming.

17

00:01:25,530  -->  00:01:30,960
I'm sure that you've come across websites like this before and I will assume that you did not find the

18

00:01:30,960  -->  00:01:33,220
experience very enjoyable.

19

00:01:33,360  -->  00:01:39,360
Most users if given the choice between a not responsive web site and a responsive web site will definitely

20

00:01:39,360  -->  00:01:41,140
choose the responsive route.

21

00:01:41,220  -->  00:01:44,230
It's much more usable for smaller screens.

22

00:01:44,550  -->  00:01:50,280
Now for the remainder of this lesson we are going to roll up our sleeves and learn how to take a standard

23

00:01:50,280  -->  00:01:59,130
web page and make it responsive so that it will work flawlessly for any sized device under the sun.

24

00:01:59,130  -->  00:02:00,480
Let's get started.

25

00:02:01,050  -->  00:02:06,740
Our recipe for a responsive website has only two ingredients at its core.

26

00:02:06,840  -->  00:02:13,570
The first ingredient is a metal tag that we will add to the head section of our HTML code.

27

00:02:14,040  -->  00:02:21,030
And the second ingredient is known as media queries which is a fancy way of saying that we can tell

28

00:02:21,030  -->  00:02:27,060
our CSSA to only run in certain scenarios or for certain screen sizes.

29

00:02:27,060  -->  00:02:30,270
So let's begin with the first ingredient in our recipe.

30

00:02:30,330  -->  00:02:31,740
The metal tag.

31

00:02:32,100  -->  00:02:36,050
Let's hop over to our text editor and edit the HTL now.

32

00:02:36,090  -->  00:02:38,480
So here's the head section of our page.

33

00:02:38,490  -->  00:02:40,510
We're going to create a new line.

34

00:02:40,980  -->  00:02:47,360
Mehta Now the metal tag that we're interested in is named viewport viewport.

35

00:02:47,400  -->  00:02:53,970
Refer to the Web browser window area the part of the screen that scrolls with web site content.

36

00:02:53,970  -->  00:02:58,530
Now we are interested in adjusting the width of the viewport.

37

00:02:58,530  -->  00:03:02,300
We want devices to be true to themselves.

38

00:03:02,550  -->  00:03:08,340
So for example certain smartphones will try and pretend like they're bigger than they really are and

39

00:03:08,340  -->  00:03:14,160
that's what creates the horrible situation where you visit a Web site on your smartphone and everything's

40

00:03:14,160  -->  00:03:16,430
very zoomed out and microscopic.

41

00:03:16,440  -->  00:03:19,700
And you have to pinch zoom in to read the text.

42

00:03:19,860  -->  00:03:27,300
If a particular smartphone is only 320 pixels wide we don't want it to pretend that it's 960 pixels

43

00:03:27,300  -->  00:03:31,000
wide by artificially scaling and zooming out.

44

00:03:31,110  -->  00:03:36,300
We want it to truly act and behave as if it is only 320 pixels wide.

45

00:03:36,310  -->  00:03:44,040
Be true to itself and then we as web designers can adjust our CSSA to fit the content to work within

46

00:03:44,040  -->  00:03:46,420
that 320 pixels of width.

47

00:03:46,620  -->  00:03:54,630
So our code is basically saying the width of the viewport should be equal to the device with the width

48

00:03:54,630  -->  00:04:01,180
of the device and we can go one step further and say that the initial scale should be 1.

49

00:04:01,620  -->  00:04:05,490
So when the device first loads our website it won't need to zoom out.

50

00:04:05,490  -->  00:04:06,930
It won't need to zoom in.

51

00:04:06,930  -->  00:04:12,410
It can simply use its natural size and its natural scale.

52

00:04:12,840  -->  00:04:18,640
So to review this line of code is telling devices that they don't need to adapt to the Web site.

53

00:04:18,780  -->  00:04:22,690
And instead it's putting the responsibility back on the Web site.

54

00:04:22,890  -->  00:04:28,170
The Web site needs to respond and adapt to the size of the device.

55

00:04:28,170  -->  00:04:30,900
Now let's head back over to our recipe.

56

00:04:30,990  -->  00:04:37,320
We've taken care of our first ingredient the viewport with the metal tag and now the devices are using

57

00:04:37,320  -->  00:04:39,030
their true screen size.

58

00:04:39,030  -->  00:04:46,320
We've created an issue for ourselves that can only be solved by ingredient number two so for instance

59

00:04:46,480  -->  00:04:52,060
here is our example lay out and this is how it appears on a laptop or a traditional desktop computer

60

00:04:52,060  -->  00:04:52,240
.

61

00:04:52,480  -->  00:04:57,640
And this is how it would have appeared on a smartphone if our Web site wasn't responsive.

62

00:04:57,690  -->  00:05:03,900
The phone would have tried to zoom in scale out to fit this layout but because we told devices to use

63

00:05:03,910  -->  00:05:10,770
their true screen size this is what the average smartphone user would see.

64

00:05:10,780  -->  00:05:17,500
You will recall from earlier lessons that we use CSSA to create a to call them lay out our main column

65

00:05:17,560  -->  00:05:23,890
should take up 66 percent of the width and our Sidebar should take up 34 percent of the width.

66

00:05:23,880  -->  00:05:31,450
Now the arithmetic looks correct but it just doesn't work on such a small screen size a screen this

67

00:05:31,440  -->  00:05:39,000
small should only use one column so the green side bar area should simply stack below the main column

68

00:05:39,000  -->  00:05:44,130
area and both sections should use the full available width of the device.

69

00:05:44,130  -->  00:05:50,560
However we don't want to sacrifice our to call them layout for devices that are large enough to display

70

00:05:50,560  -->  00:05:52,450
it in an elegant fashion.

71

00:05:52,620  -->  00:06:01,060
So we need a way to send different CSSA instructions to different sized devices and that is precisely

72

00:06:01,120  -->  00:06:04,170
what media queries allow us to do.

73

00:06:04,500  -->  00:06:06,560
Now let's not waste any time.

74

00:06:06,580  -->  00:06:08,650
We're going to hop straight into the text editor.

75

00:06:08,640  -->  00:06:10,450
This is a CSSA file.

76

00:06:10,440  -->  00:06:22,990
And let's see our first media query in action at symbol media screen and parentheses Max with seven

77

00:06:23,210  -->  00:06:25,080
hundred pixels.

78

00:06:25,120  -->  00:06:31,810
Now any code that we placed between this curly bracket and this curly bracket will only be applied to

79

00:06:31,810  -->  00:06:37,090
the page if the browser window is no larger than 700 pixels.

80

00:06:37,260  -->  00:06:43,990
So this is our chance to send different style instructions to smaller screens so we establish that we

81

00:06:43,990  -->  00:06:46,960
don't want 2 columns for small screens.

82

00:06:46,960  -->  00:06:54,040
So we want to override these width and float properties for main area in sidebar.

83

00:06:54,550  -->  00:07:02,140
So within our curly brackets for the media query we can simply say main area and sidebar.

84

00:07:02,170  -->  00:07:08,200
So we're selecting those two HDMI elements and we're going to save width should be audio which will

85

00:07:08,200  -->  00:07:11,880
use the full available width and for the float property.

86

00:07:12,070  -->  00:07:12,650
None.

87

00:07:12,700  -->  00:07:14,740
We don't want them to be floated.

88

00:07:14,880  -->  00:07:20,850
Now if we save and refresh we can see there are two column layout it's still intact for larger screens

89

00:07:21,250  -->  00:07:28,870
but if I start resizing my browser window once we cross the threshold of 700 pixels we will see these

90

00:07:28,870  -->  00:07:31,390
properties take effect.

91

00:07:31,500  -->  00:07:38,860
So I'm continuing to resize my browser and we hit the 700 pixel threshold and we can see that we now

92

00:07:38,860  -->  00:07:44,730
have a single column layout and it looks like there's a bit of extra space on the right side of the

93

00:07:44,740  -->  00:07:49,070
main column area that's coming from this padding right property.

94

00:07:49,180  -->  00:07:57,330
So let's override that within our immediate query will select just the main area padding right.

95

00:07:57,360  -->  00:07:59,090
Zero.

96

00:07:59,740  -->  00:08:03,650
We can see that the main column now takes up the appropriate width.

97

00:08:03,880  -->  00:08:05,420
So our layout looks great.

98

00:08:05,430  -->  00:08:10,340
If a device is 700 pixels wide or in other words a small tablet.

99

00:08:10,540  -->  00:08:13,350
But what if someone was using a smartphone.

100

00:08:14,380  -->  00:08:19,770
When we're dealing with the screen this small the first thing that I want to address is the main horizontal

101

00:08:19,770  -->  00:08:20,620
margins.

102

00:08:20,620  -->  00:08:29,740
This is too large and that spacing is coming from the container divs that we have for each section.

103

00:08:29,740  -->  00:08:36,910
Now in our C Ss we have told the divide the class of container to have 40 pixels of padding on the left

104

00:08:36,900  -->  00:08:37,730
and right.

105

00:08:38,110  -->  00:08:40,880
However for smaller screens we don't want that.

106

00:08:41,050  -->  00:08:47,090
So even though that size works for a 700 pixel wide device it doesn't work for smartphones.

107

00:08:47,230  -->  00:08:57,430
So we can simply create a media query media screen and Max with now instead of providing a threshold

108

00:08:57,420  -->  00:08:58,740
of 700.

109

00:08:58,770  -->  00:09:07,170
We can say Macs with 480 pixels and then any code between these two curly brackets will only be applied

110

00:09:07,260  -->  00:09:11,610
if the device is 480 pixels wide or smaller.

111

00:09:12,150  -->  00:09:18,480
So within this media query we can select the container class and say padding left should only be 20

112

00:09:18,490  -->  00:09:22,370
pixels padding right should only be 20 pixels.

113

00:09:22,410  -->  00:09:25,950
So we're overriding the value of 40 and setting it to 20.

114

00:09:26,130  -->  00:09:31,820
So if I refresh we can see that the new margin's free up more space for the content.

115

00:09:31,920  -->  00:09:35,730
Next let's reduce the vertical space that we see here.

116

00:09:36,070  -->  00:09:41,370
I think that much space works for a larger device but once we get down to the mobile level it's too

117

00:09:41,380  -->  00:09:42,480
much.

118

00:09:42,490  -->  00:09:49,960
Now that speccing is coming from the content area div and we've told that to have 40 pixels of top padding

119

00:09:50,660  -->  00:09:58,720
so we can create a media query to override that media screen and Max width we'll continue to use the

120

00:09:58,720  -->  00:10:07,350
480 threshold will select the same class and then will simply override this value.

121

00:10:07,980  -->  00:10:13,500
Padding top let's say 20 instead of 40 pixels much better.

122

00:10:13,500  -->  00:10:16,840
So we would just add certain values for smaller screens.

123

00:10:16,950  -->  00:10:19,790
What if there's content that we don't want to display at all.

124

00:10:19,790  -->  00:10:26,370
For smaller screens to for example this yellow box reads this content is not absolutely vital and does

125

00:10:26,370  -->  00:10:29,110
not need to display on mobile devices.

126

00:10:29,190  -->  00:10:36,080
We can set up a media query to hide this content for smaller screens to enter h TNL we can see that

127

00:10:36,090  -->  00:10:39,020
that content comes from this code.

128

00:10:39,020  -->  00:10:42,170
It's a div with a class of info box.

129

00:10:42,170  -->  00:10:49,160
Now we want to keep that styling intact for larger screens and larger devices but I'm going to add on

130

00:10:49,230  -->  00:10:53,980
an additional class to this div named hide small.

131

00:10:54,210  -->  00:11:01,490
And then we're going to create a new rule in our stylesheet that only target small screens or say medius

132

00:11:01,500  -->  00:11:08,250
screen and Max with 480 pixels within this media query.

133

00:11:08,270  -->  00:11:11,910
We're going to target that class that we just added to the HMO.

134

00:11:12,090  -->  00:11:13,070
Hi Small

135

00:11:16,830  -->  00:11:17,610
display.

136

00:11:17,610  -->  00:11:19,190
None.

137

00:11:19,200  -->  00:11:23,970
So now if we refresh we can see that for small screens the yellow box is gone.

138

00:11:24,240  -->  00:11:34,210
But if we make our window larger than this threshold of 480 pixels wide the yellow boxes back.

139

00:11:34,350  -->  00:11:42,530
This means we have a reusable class named Hydes small which we can add to any element on the page and

140

00:11:42,530  -->  00:11:46,980
it will do the heavy lifting of hiding that content for small screens.

141

00:11:46,980  -->  00:11:55,910
So let's say we want to hide this slogan in the header can simply add a class of Hydes small and let's

142

00:11:55,910  -->  00:12:03,600
imagine that we don't need frequently asked questions or links in the navigation class hide small class

143

00:12:04,490  -->  00:12:10,920
hides small if we save and refresh we can see that we're beginning to optimize the content for a smaller

144

00:12:10,910  -->  00:12:12,020
screen.

145

00:12:12,020  -->  00:12:17,090
Next let's redesign the way our Hetter navigation works.

146

00:12:17,120  -->  00:12:21,630
Free screen this size we can simply display all of the links in one line.

147

00:12:21,840  -->  00:12:27,620
Once the screen gets down to about 700 pixels I think we should style the link so that they have a bit

148

00:12:27,620  -->  00:12:31,760
more vertical padding so that they're easier to tap with a touch screen device.

149

00:12:31,860  -->  00:12:35,270
And we should also style them so that there's only three per line.

150

00:12:35,270  -->  00:12:38,970
So to achieve this we'll hop over to our style sheet.

151

00:12:39,870  -->  00:12:48,300
Here's the area of our style sheet that styling the navigation and we'll create a media query that targets

152

00:12:48,300  -->  00:12:51,590
devices that are 700 pixels wide or smaller.

153

00:12:51,920  -->  00:12:56,680
So first let's write the code that makes sure that there's only three links per line.

154

00:12:56,880  -->  00:13:04,200
So we'll target the site nav element and we're looking specifically for the list items say and list

155

00:13:04,200  -->  00:13:09,170
item will give it a width of 33 point 3 2 percent.

156

00:13:09,170  -->  00:13:12,570
Again we usually want our percentages to add up to 100 percent.

157

00:13:12,620  -->  00:13:16,400
So this should create 3 equal links per row.

158

00:13:17,250  -->  00:13:19,930
Now our list items had a bit of margin right.

159

00:13:20,000  -->  00:13:26,820
So we're going to remove that so that the arithmetic concerning the wit will work out perfectly if we

160

00:13:26,820  -->  00:13:31,040
save and refresh we can see there are no three links per row.

161

00:13:31,400  -->  00:13:36,710
Now that's increased the vertical padding for each link and also add back in the spacing between the

162

00:13:36,720  -->  00:13:37,330
wings.

163

00:13:37,400  -->  00:13:41,550
So we will target the link or anchor element

164

00:13:44,040  -->  00:13:49,770
padding the links originally had 10 pixels of vertical padding.

165

00:13:50,040  -->  00:13:56,490
So let's bump that up to 15 pixels and they no longer need any horizontal padding because we've already

166

00:13:56,490  -->  00:13:58,570
taken care of the width.

167

00:13:58,590  -->  00:14:00,970
Let's also add a bit of margin back in.

168

00:14:01,160  -->  00:14:06,650
So say margin right five pixels margin bottom five pixels.

169

00:14:06,720  -->  00:14:07,800
If we refresh.

170

00:14:08,100  -->  00:14:12,500
You can see that the vertical height increased so that the links will be easier to tap.

171

00:14:12,600  -->  00:14:15,980
And we've also added spacing around each link.

172

00:14:15,990  -->  00:14:21,080
Now let's go ahead and make the links used text the line center.

173

00:14:21,360  -->  00:14:22,780
That looks much better.

174

00:14:23,120  -->  00:14:28,900
So are heading navigation links are now much easier to tap and interact with on a tablet.

175

00:14:29,030  -->  00:14:35,940
However on a traditional smartphone you can see that the three per row is not working very well.

176

00:14:35,930  -->  00:14:41,150
Now we can counteract this very easily with an additional media query.

177

00:14:41,150  -->  00:14:46,820
So our first media query was targeting devices that are 700 pixels wide or smaller.

178

00:14:47,000  -->  00:14:55,410
Now let's create a media query that selects only devices that are 480 pixels or smaller and instead

179

00:14:55,400  -->  00:15:03,080
of using with 33 percent we will select the list items and give them a width of 50 percent.

180

00:15:03,090  -->  00:15:08,200
So now only two Parow which is well-suited for the smartphone size.

181

00:15:08,420  -->  00:15:14,000
With that change in place let's take a moment to reflect on how our Web site is responding to the size

182

00:15:14,000  -->  00:15:15,390
of the device.

183

00:15:15,380  -->  00:15:18,500
So this is obviously what users will see if they use a smartphone.

184

00:15:18,720  -->  00:15:25,470
As we start to increase the size of the window or the device we see that once we cross this threshold

185

00:15:25,530  -->  00:15:32,030
we then have three links per room and we're no longer hiding the yellow box content or the slogan in

186

00:15:32,040  -->  00:15:33,190
the header.

187

00:15:33,720  -->  00:15:40,240
And then once we hit this threshold you can see we are then no longer using a single call them lay out

188

00:15:40,830  -->  00:15:45,970
and our navigation then sits all of the links on one line.

189

00:15:46,010  -->  00:15:52,740
So we've created different layout experiences for different screen sizes all things to media queries

190

00:15:52,740  -->  00:15:53,390
.

191

00:15:53,460  -->  00:15:57,180
Now throughout this lesson we've only seen one type of media query.

192

00:15:57,170  -->  00:16:03,840
They're all using Macs with and I don't want you to get the notion that responsive web design is simply

193

00:16:03,990  -->  00:16:10,050
taking a Web site that's designed for large screens and retrofitting it to work for smaller screens

194

00:16:10,060  -->  00:16:10,330
.

195

00:16:10,590  -->  00:16:16,280
Yes that's the example that we looked at in this lesson but you can also build from the other direction

196

00:16:16,300  -->  00:16:16,460
.

197

00:16:16,620  -->  00:16:19,100
So really quickly let's try an experiment.

198

00:16:19,230  -->  00:16:27,930
If someone's browser window is larger than thirteen hundred pixels wide let's increase the maximum width

199

00:16:27,920  -->  00:16:31,930
of our container so that the content we use maybe this much space instead.

200

00:16:32,100  -->  00:16:35,000
And let's also bump up the base font a bit.

201

00:16:35,070  -->  00:16:40,730
So let's begin by increasing the max width of the container for really large screens.

202

00:16:41,140  -->  00:16:47,810
So in our CSL we can see here is the baseline style for the container div we've already targeted it

203

00:16:47,820  -->  00:16:55,320
with the media Acree for small screens but let's add in additional media query only for large screens

204

00:16:55,560  -->  00:16:56,660
so media screen.

205

00:16:56,680  -->  00:17:03,770
And instead of Max what we can use men with 1400 pixels.

206

00:17:03,840  -->  00:17:11,880
So now any code between these curly brackets will only be applied if the browser window is 3300 pixels

207

00:17:11,880  -->  00:17:19,190
or a larger container max width instead of 960.

208

00:17:19,430  -->  00:17:22,710
Let's override that to a value of twelve hundred.

209

00:17:23,010  -->  00:17:28,890
So now you can see that our browser window is very large and if we refresh the content uses more of

210

00:17:28,880  -->  00:17:30,790
the available space.

211

00:17:30,870  -->  00:17:36,730
So if I resize the browser window we can see that the threshold is crossed right there.

212

00:17:37,860  -->  00:17:46,170
Let's also increase the baseline font size for really large browser windows in our code within this

213

00:17:46,220  -->  00:17:52,770
same media query that's targeting large screens let's select the body element.

214

00:17:52,760  -->  00:17:58,170
Now if we scroll up to the top of our stylesheet you can see that by default our baseline font size

215

00:17:58,260  -->  00:18:00,150
is 15 pixels.

216

00:18:00,140  -->  00:18:06,900
So in this new media query for large screens Let's target the body element and say the baseline font

217

00:18:06,890  -->  00:18:09,950
size should be 17 instead of 15 pixels.

218

00:18:09,990  -->  00:18:15,940
If we were fresh we can see all of the font bumps up to fit the larger screen.

219

00:18:16,160  -->  00:18:19,670
So let's look at the threshold again.

220

00:18:22,490  -->  00:18:30,240
This makes effective use of larger screens and it's all thanks to the men with media query.

221

00:18:30,260  -->  00:18:37,880
Now there is no right or wrong way to build a responsive web site if you want to begin with smartphones

222

00:18:37,880  -->  00:18:44,690
in mind and then ad men with media queries to accommodate larger and larger screens.

223

00:18:44,700  -->  00:18:47,730
That approach is called mobile first.

224

00:18:47,760  -->  00:18:50,380
You're using the mobile as your baseline.

225

00:18:50,430  -->  00:18:56,190
This mobile first approach is gaining more traction every year because we see that more traffic continues

226

00:18:56,180  -->  00:19:01,140
to come from smaller devices instead of traditional laptops and desktops.

227

00:19:01,160  -->  00:19:09,090
However many developers myself included still prefer to design for a medium sized laptop at first and

228

00:19:09,090  -->  00:19:15,770
then include media queries in either direction to accommodate different screen sizes.

229

00:19:15,780  -->  00:19:18,410
Again there is no right or wrong approach.

230

00:19:18,470  -->  00:19:25,660
What's important is that you are creating enjoyable and highly usable experiences for all of your users

231

00:19:25,830  -->  00:19:28,370
regardless of which device they're using.

232

00:19:28,680  -->  00:19:31,700
That's going to bring this lesson to a close.

233

00:19:31,740  -->  00:19:36,320
I hope that you're hungry to learn more about responsive web design because in our next lesson we're

234

00:19:36,330  -->  00:19:39,630
going to look at how to create a responsive grid.

235

00:19:39,780  -->  00:19:44,960
Or in other words we will learn how to manage call them layouts that are more complex than what we saw

236

00:19:44,970  -->  00:19:46,320
in this lesson.

237

00:19:46,320  -->  00:19:51,030
Now before you hop into the next lesson I encourage you to experiment with what you learned in this

238

00:19:51,030  -->  00:19:51,840
lesson.

239

00:19:51,890  -->  00:19:55,020
Have fun and I will see you in the next lesson.
