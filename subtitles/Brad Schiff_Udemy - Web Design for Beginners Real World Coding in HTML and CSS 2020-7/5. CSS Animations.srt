1

00:00:00,500  -->  00:00:09,060
In this lesson we will learn about C Ss animations because animations are inherently visual.

2

00:00:09,060  -->  00:00:12,500
We are going to jump straight in to an example page.

3

00:00:12,570  -->  00:00:17,910
Here we are in the web browser and I want you to pay attention to this key feature blue box.

4

00:00:17,910  -->  00:00:20,580
When I reload the page.

5

00:00:20,910  -->  00:00:28,170
So we noticed that it faded into view on page load but there's a bit more to it than that unlike a transition

6

00:00:28,180  -->  00:00:28,280
.

7

00:00:28,320  -->  00:00:33,060
I didn't have to hover over anything for that animation to occur.

8

00:00:33,060  -->  00:00:34,590
And if we take a closer look.

9

00:00:34,590  -->  00:00:42,210
So here is another page refresh we see that the box isn't simply transitioning from one vertical value

10

00:00:42,360  -->  00:00:50,370
to another but instead we see a bounce like effect where the box drops down to its standard position

11

00:00:50,550  -->  00:00:53,120
and then bounces up and down a bit.

12

00:00:53,160  -->  00:00:59,940
Now behind the scenes I have adjusted this example page and when I refresh there will be four blue boxes

13

00:01:00,000  -->  00:01:02,850
instead of only one.

14

00:01:02,940  -->  00:01:07,770
So this is an effect that you have most likely seen on a Web site where the call outs are featured bits

15

00:01:07,770  -->  00:01:10,920
of content fade into view one at a time.

16

00:01:11,110  -->  00:01:14,790
CSSA animations make this simple to achieve.

17

00:01:15,150  -->  00:01:21,440
And again unlike transition's the effect doesn't need to be triggered by a hover or a click.

18

00:01:21,480  -->  00:01:26,290
It's simply an animation that can begin playing on page load.

19

00:01:26,310  -->  00:01:33,120
Now in this lesson Our goal is to rewrite the code together to create the animation bounce effect.

20

00:01:33,150  -->  00:01:38,640
We will also rewrite the code together that controls the timing of the four boxes so that they all don't

21

00:01:38,640  -->  00:01:46,800
fade in at the exact same millisecond but instead are staggered one slightly after the other and finally

22

00:01:46,800  -->  00:01:52,470
let me introduce you to one final bit of content on this example page to further whet your appetite

23

00:01:52,590  -->  00:01:54,420
for CSSA animations.

24

00:01:54,720  -->  00:02:00,750
So we can see there is a star and behind the scenes I just plugged in a bit of additional code so when

25

00:02:00,750  -->  00:02:09,630
I refresh can see the star has a unique animation and it will continue cycling and repeating this animation

26

00:02:09,630  -->  00:02:10,630
forever.

27

00:02:10,650  -->  00:02:15,810
Now once we are done with the code for our blue boxes we will also learn how to animate the star in

28

00:02:15,810  -->  00:02:17,020
this fashion.

29

00:02:17,040  -->  00:02:18,360
I think its going to be a lot of fun.

30

00:02:18,360  -->  00:02:19,770
So lets get started.

31

00:02:20,130  -->  00:02:20,710
All right.

32

00:02:20,730  -->  00:02:26,460
So behind the scenes I ripped out all of the code that was creating the animations and I also removed

33

00:02:26,460  -->  00:02:29,350
the star and the extra three blue boxes.

34

00:02:29,520  -->  00:02:37,140
So here we are at square one just a single featured blue box and lets work together to create the bounce

35

00:02:37,200  -->  00:02:39,330
animation effect.

36

00:02:39,330  -->  00:02:47,040
So in our CSSA file let's create a new comment section to stay organized.

37

00:02:47,040  -->  00:02:51,500
We will begin by defining and naming our animation.

38

00:02:51,660  -->  00:02:59,160
So to begin an animation we use the at symbol and type out keyframes space and then this is where we

39

00:02:59,160  -->  00:03:00,490
get to choose a name.

40

00:03:00,810  -->  00:03:04,960
So I will name this animation Faid bounce.

41

00:03:05,010  -->  00:03:08,320
You could choose any name that you would like.

42

00:03:08,370  -->  00:03:13,650
Now between these two curly brackets is where we include the code that makes up the animation.

43

00:03:13,650  -->  00:03:18,690
So for now we are not applying this animation to any content on the page.

44

00:03:18,690  -->  00:03:25,260
We are beginning by creating a standalone piece of code that can then later be reused and reapplied

45

00:03:25,260  -->  00:03:27,720
to any content that we would like.

46

00:03:27,720  -->  00:03:33,750
So within these curly brackets I will begin by saying that when the animation is 0 percent complete

47

00:03:33,870  -->  00:03:39,750
or in other words when it has just begun we want the content to have an opacity of zero.

48

00:03:39,780  -->  00:03:46,230
So we want it to be invisible and we want it to start out a bit higher on the page that it gives the

49

00:03:46,230  -->  00:03:49,290
effect that its sliding and fading down into view.

50

00:03:49,530  -->  00:03:57,820
So we use the transform property translate why negative 200 percent so it will be pushed up.

51

00:03:57,840  -->  00:04:03,450
So this is how content should be styled when the animation is just getting ready to begin when the animation

52

00:04:03,480  -->  00:04:05,520
is 0 percent complete.

53

00:04:05,520  -->  00:04:11,340
Now when the animation is 100 percent complete So when the animation is finished we want the opacity

54

00:04:11,400  -->  00:04:16,580
to be fully visible and we want it to be positioned vertically where it would normally sit.

55

00:04:16,620  -->  00:04:20,150
So transform translate Why 0.

56

00:04:20,310  -->  00:04:26,340
Now these two states on their own the zero percent state and the 100 percent state are not going to

57

00:04:26,340  -->  00:04:28,230
create the bounce effect.

58

00:04:28,290  -->  00:04:32,210
We will revisit this code in just a moment to work towards that bounce effect.

59

00:04:32,220  -->  00:04:38,790
But for the time being we now have an animation named Faid bounce that we can apply to elements on the

60

00:04:38,790  -->  00:04:39,590
page.

61

00:04:39,720  -->  00:04:47,740
So we know that this box or this div this blue key feature one box has a class of box A.

62

00:04:48,300  -->  00:04:59,120
So within the rule or selector for the box element we can now say animation name Faid bounce animation

63

00:04:59,120  -->  00:05:00,490
duration.

64

00:05:00,690  -->  00:05:01,830
One second.

65

00:05:01,940  -->  00:05:08,220
And if we save and refresh we can see that our animation is taking place.

66

00:05:08,210  -->  00:05:15,380
I'll bet it's not a bounce yet but the animation that we created named Faid bounce is indeed firing

67

00:05:15,420  -->  00:05:16,540
on page load.

68

00:05:16,740  -->  00:05:25,170
And because we set a duration of one second our keyframe rule is transitioning between 0 percent and

69

00:05:25,170  -->  00:05:28,400
100 percent over the span of one second.

70

00:05:28,400  -->  00:05:35,120
So if we increase this to three seconds I can see the animation plays out very slowly.

71

00:05:35,450  -->  00:05:36,890
And that's not what we want.

72

00:05:36,990  -->  00:05:43,560
So let's change the duration back to one second and let's focus our energy on the keyframes rule and

73

00:05:43,580  -->  00:05:51,080
add intermediate states between 0 and 100 percent that will create the actual bounce effect.

74

00:05:51,080  -->  00:05:59,540
So at 40 percent completion of the animation we actually want it to be fully visible and sit vertically

75

00:05:59,550  -->  00:06:00,640
in its natural state.

76

00:06:00,630  -->  00:06:03,340
So I will just copy and paste this line of code.

77

00:06:03,990  -->  00:06:09,730
So we want the remaining 60 percent of the animation time to be about the bounce effect.

78

00:06:09,770  -->  00:06:16,590
So lets say at about 55 percent completion of the animation we want to bounce up a little bit.

79

00:06:16,680  -->  00:06:21,120
So this line of code positions the element back in its natural position.

80

00:06:21,120  -->  00:06:24,800
So let's have a bounce up just about six pixels.

81

00:06:24,810  -->  00:06:30,180
Now were not complete yet but let's save this and see what it looks like.

82

00:06:30,200  -->  00:06:32,480
So we saw that the element bounced once.

83

00:06:32,550  -->  00:06:33,470
Here's another refresh.

84

00:06:33,480  -->  00:06:36,060
It bounces once and then it's done.

85

00:06:36,080  -->  00:06:40,590
I think it would be nice if we added a second bounce that's only 3 pixels.

86

00:06:41,120  -->  00:06:45,040
So to achieve that we can create a few more intermediate states.

87

00:06:45,300  -->  00:06:52,590
So let's say at 70 percent completion of the animation we want it to be positioned back again in its

88

00:06:52,580  -->  00:06:53,770
natural state.

89

00:06:53,900  -->  00:07:02,420
And then at 85 percent completion we want it to bounce up 3 pixels from its natural state.

90

00:07:02,660  -->  00:07:07,430
So if I save and refresh we see the bounce effect.

91

00:07:07,440  -->  00:07:12,150
Here it is one more time in terms of vertical movement.

92

00:07:12,180  -->  00:07:13,430
I think it looks great.

93

00:07:13,700  -->  00:07:18,010
But in terms of opacity I feel like we're fading to 2:04 opacity too soon.

94

00:07:18,140  -->  00:07:24,590
So I'm going to move this line of code from the 40 percent state down to the 70 percent state.

95

00:07:24,870  -->  00:07:28,380
So that way it will take longer to transition to fully visible.

96

00:07:28,500  -->  00:07:31,070
So here is the updated effect.

97

00:07:31,130  -->  00:07:33,860
It's a subtle difference but I believe it's an improvement.

98

00:07:34,130  -->  00:07:41,150
Now that our bounce animation is complete I'm going to head over to the H DML and add back in the other

99

00:07:41,150  -->  00:07:43,790
three blue boxes.

100

00:07:44,120  -->  00:07:46,340
So we see all four boxes once again.

101

00:07:46,380  -->  00:07:51,600
However they bounce into view at exactly the same moment and we want them to be staggered.

102

00:07:51,620  -->  00:07:58,360
So one slightly after the other by default in animation will play immediately on page load.

103

00:07:58,380  -->  00:08:04,910
Now that behavior is fine for our first box but we need to add a delay for the other three boxes.

104

00:08:04,940  -->  00:08:11,470
Now there is a property named animation delay that will let us achieve just that in our CSSA file.

105

00:08:11,490  -->  00:08:16,410
We see that we were adding the animation properties to the box a rule.

106

00:08:16,400  -->  00:08:20,650
Now all four of these blue boxes have a class of box A.

107

00:08:20,940  -->  00:08:29,050
So if we want to add a delay to only the second box we need a unique selector besides box A.

108

00:08:29,270  -->  00:08:36,870
Now we could dig into the H DML and manually add a class of second to this box and manually add a class

109

00:08:36,870  -->  00:08:40,390
of third to this box and forth to this box.

110

00:08:40,470  -->  00:08:42,310
But that's a bit old fashioned.

111

00:08:42,360  -->  00:08:48,260
Instead let's simply make sure that the common ancestor element of all four boxes this did with the

112

00:08:48,260  -->  00:08:49,280
class of row.

113

00:08:49,490  -->  00:08:54,010
Let's make sure that it has a unique class boxes.

114

00:08:54,020  -->  00:09:06,780
Now in our C Ss will target the parent div boxes and then we can write colon enth child to box.

115

00:09:06,950  -->  00:09:12,900
So this selector will only select and target the second box.

116

00:09:12,890  -->  00:09:19,970
Now we can use the animation delay property and provide a value of point five seconds.

117

00:09:19,980  -->  00:09:26,010
So if we save and refresh we see that box is 1 3 and 4.

118

00:09:26,040  -->  00:09:32,350
Animate immediately but box 2 waits point five seconds before animating.

119

00:09:32,370  -->  00:09:40,290
So now all we need to do is duplicate this rule and select only the third box and tell it to wait a

120

00:09:40,460  -->  00:09:47,930
full second and then let's also duplicate the rule and select only the fourth box and tell it to wait

121

00:09:48,200  -->  00:09:50,330
1.5 seconds.

122

00:09:50,340  -->  00:09:59,310
So now if we save and fresh we see that all four boxes are staggered or offset by point five seconds

123

00:09:59,320  -->  00:09:59,490
.

124

00:09:59,670  -->  00:10:05,280
However our effect still doesn't look quite right because we need our content to be invisible while

125

00:10:05,280  -->  00:10:07,450
it's waiting to be animated in.

126

00:10:07,920  -->  00:10:15,600
So we need to adjust our SS The base rule for box elements before the animation even occurs.

127

00:10:15,600  -->  00:10:23,360
We want the capacity to be zero now because we are making the elements deep for opacity zero.

128

00:10:23,550  -->  00:10:31,260
We need to use a special property named animation film mode and provide a value of forwards. This way

129

00:10:31,260  -->  00:10:38,580
when the animation completes the web browser will use the hundred percent completion state as the permanent

130

00:10:38,580  -->  00:10:40,080
values.

131

00:10:40,350  -->  00:10:47,520
Without this property of animation film mode forwards once the animation completes it would then use

132

00:10:47,580  -->  00:10:49,090
opacity 0 again.

133

00:10:49,350  -->  00:10:56,460
So with this line of code and this line of code in place if we save and refresh we see that we have

134

00:10:56,460  -->  00:11:02,050
successfully offset or staggered the timing of the animation for the 4 boxes.

135

00:11:02,310  -->  00:11:08,640
Now before we move on to the rotating star animation task I want to let you in on a bit of a secret

136

00:11:08,640  -->  00:11:08,910
.

137

00:11:09,060  -->  00:11:14,160
We don't need to type out these three animation based properties on three separate lines.

138

00:11:14,280  -->  00:11:21,390
We can use shorthand and use a property named animation and then provide all of these values on one

139

00:11:21,390  -->  00:11:31,950
line feed bounce one second forwards so that simplifies all three of these lines into one line of shorthand

140

00:11:31,950  -->  00:11:32,740
code.

141

00:11:32,790  -->  00:11:36,560
So when we save and refresh there is absolutely no change.

142

00:11:36,780  -->  00:11:39,810
Our code is just that much cleaner.

143

00:11:39,870  -->  00:11:42,190
We know that practice makes perfect.

144

00:11:42,210  -->  00:11:47,170
So we've experimented with CSSA animations on these four blue boxes.

145

00:11:47,370  -->  00:11:54,120
Let's practice once again by trying to recreate the star animation that we saw earlier.

146

00:11:54,150  -->  00:11:58,380
So in our HMO I'm going to paste in the code for the star.

147

00:11:58,380  -->  00:12:02,120
So if I save and refresh can see here is the star.

148

00:12:02,160  -->  00:12:07,070
Now I will point out that the image element has a class of star assigned to it.

149

00:12:07,350  -->  00:12:13,380
And in our CSSA the only code that's currently in place are a few properties telling it to have a width

150

00:12:13,710  -->  00:12:20,040
of 25 percent of the available space and to have a height that is proportionate to that width.

151

00:12:20,070  -->  00:12:25,410
Now that we are on the same page let's go ahead and write the code to create an animation for the star

152

00:12:25,410  -->  00:12:25,940
.

153

00:12:25,950  -->  00:12:35,830
So in our C Ss at symbol keyframes and then we can name our animation I will call this slide spin.

154

00:12:35,940  -->  00:12:40,000
You can name it anything that you would like curly brackets.

155

00:12:40,230  -->  00:12:47,910
Let's start simple for now let's only worry about sliding the star horizontally to the far right edge

156

00:12:47,970  -->  00:12:49,950
of the available space.

157

00:12:49,950  -->  00:12:59,430
So we'll say at 100 percent completion of the animation we want to use the transform property translate

158

00:12:59,530  -->  00:13:05,850
X that is horizontally and push the content 300 percent from the left.

159

00:13:05,850  -->  00:13:12,660
So when we use a percentage value with the translate function the percentage value is in relation to

160

00:13:12,660  -->  00:13:15,270
the size of the element that it's being applied to.

161

00:13:15,480  -->  00:13:21,990
Or in other words 100 percent is the exact size of the star itself.

162

00:13:22,230  -->  00:13:28,140
Now the reason we used 300 percent is because we know the star takes up perfectly one quarter of the

163

00:13:28,140  -->  00:13:29,600
available space.

164

00:13:29,610  -->  00:13:34,740
So by saying 300 percent we're telling the start to move over three times its own size.

165

00:13:34,740  -->  00:13:38,620
So one two three.

166

00:13:38,910  -->  00:13:45,080
So that way it's right edge will be perfectly aligned with the right edge of the available space.

167

00:13:45,090  -->  00:13:52,740
So with this very simple animation code in place let's add the slide spin animation to the star class

168

00:13:52,740  -->  00:13:53,190
.

169

00:13:53,190  -->  00:14:01,350
So within the Star rule I will say animation slides been two seconds.

170

00:14:01,410  -->  00:14:02,790
So if we save and refresh

171

00:14:05,700  -->  00:14:12,120
we see that the animation completes but then it very roughly and abruptly resets back to the far left

172

00:14:12,120  -->  00:14:12,620
.

173

00:14:12,630  -->  00:14:21,510
So again we can use the property animation fill mode forwards so that when the animation completes the

174

00:14:21,510  -->  00:14:23,790
star will simply stay on the right.

175

00:14:23,880  -->  00:14:28,110
Now you will remember that in the beginning of the lesson we saw the star demo.

176

00:14:28,230  -->  00:14:32,550
It didn't just play once and then stop it kept playing.

177

00:14:32,550  -->  00:14:37,560
Now there's a property named animation iteration count.

178

00:14:37,800  -->  00:14:41,700
And this controls how many times the animation will loop through itself.

179

00:14:41,700  -->  00:14:49,030
So if I say to the animation will play twice and then stop.

180

00:14:49,050  -->  00:14:54,930
Now if we wanted to loop on forever we can provide a value of infinite.

181

00:14:55,500  -->  00:15:01,190
And as you might expect the animation will then loop through itself infinitely.

182

00:15:01,230  -->  00:15:06,900
Now it looks a bit odd that the star animates to the right and then performs a hard reset to the left

183

00:15:06,900  -->  00:15:08,080
immediately.

184

00:15:08,100  -->  00:15:11,530
So what if we wanted the animation to backtrack itself.

185

00:15:11,550  -->  00:15:19,360
So in reverse every other pass through the loop there is a property named animation direction.

186

00:15:19,680  -->  00:15:26,910
And if we provide it a value of alternate we see that the star smoothly transitions to the right and

187

00:15:26,910  -->  00:15:33,350
then smoothly backtracks on itself and plays the animation in reverse to get back to the left side.

188

00:15:34,290  -->  00:15:40,590
So now that our animation smoothly slides to the far right and then back to the left and alternates

189

00:15:40,650  -->  00:15:48,630
infinitely We simply need to add additional states within the keyframes rule to perform the rotating

190

00:15:48,720  -->  00:15:52,960
and change and size scale that we saw earlier in the lesson with the star.

191

00:15:53,130  -->  00:16:03,810
So when the animation is 50 percent complete Let's alter the scale of it transform scale point five

192

00:16:03,810  -->  00:16:04,480
.

193

00:16:04,590  -->  00:16:09,600
However because we are using the transform property which we were also using for the horizontal positioning

194

00:16:09,960  -->  00:16:15,930
we need to include that the translate X should be 150 percent.

195

00:16:16,170  -->  00:16:22,860
So that way when the animation is halfway complete we are positioning it halfway horizontally 150 is

196

00:16:22,890  -->  00:16:24,490
half of 300.

197

00:16:24,510  -->  00:16:31,770
So if we save and refresh you can see that the star shrinks in scale when its in the middle of the horizontal

198

00:16:31,770  -->  00:16:32,970
space.

199

00:16:32,970  -->  00:16:38,520
Now the only effect that we're missing is that we want to start to also rotate or spin when it's in

200

00:16:38,520  -->  00:16:40,600
the middle of the horizontal space.

201

00:16:40,650  -->  00:16:47,470
So let's create an other state at 75 percent completion through the animation.

202

00:16:47,610  -->  00:16:52,480
We want the star to stop moving horizontally for a moment.

203

00:16:52,620  -->  00:16:56,470
So we'll provide an identical horizontal translate x value.

204

00:16:56,520  -->  00:16:58,190
So it stays in place.

205

00:16:58,590  -->  00:17:06,780
But we want to rotate 180 degrees and we want to remain at a scale of point five.

206

00:17:06,780  -->  00:17:12,120
Now we only want the star to appear as if it's rotating when it's in the middle of the horizontal space

207

00:17:12,120  -->  00:17:12,530
.

208

00:17:12,570  -->  00:17:19,980
So we want the change in rotation to be between this state and this state because the star is staying

209

00:17:19,980  -->  00:17:25,490
in place horizontally now because we don't want there to be rotation between this day and this date

210

00:17:25,500  -->  00:17:25,740
.

211

00:17:25,860  -->  00:17:33,050
We will edit our final state to also say that it should also have a rotation of 180 degrees.

212

00:17:33,090  -->  00:17:39,630
So now when we save and refresh you see that the star is using the exact same animation that we saw

213

00:17:39,870  -->  00:17:42,570
in the very beginning demo of the lesson.

214

00:17:42,570  -->  00:17:45,690
Now once again I'll let you in on a bit of a secret.

215

00:17:45,840  -->  00:17:52,860
We can use short pand to say that the animation should use a name of slide spin duration of two seconds

216

00:17:52,860  -->  00:17:53,330
.

217

00:17:53,520  -->  00:17:56,920
It should loop through infinitely.

218

00:17:57,000  -->  00:18:02,560
It should use a direction of alternate and it should use a film mode of forwards.

219

00:18:02,580  -->  00:18:08,760
So with this line in place we can remove these lines and if we save even refresh we see the exact same

220

00:18:08,760  -->  00:18:12,210
effect only it took up less lines of code.

221

00:18:12,360  -->  00:18:15,140
So we've completed the two examples for this lesson.

222

00:18:15,210  -->  00:18:17,370
The blue boxes and the star.

223

00:18:17,580  -->  00:18:23,790
But before we close the lesson there's a very important note our animation code will run perfectly in

224

00:18:23,790  -->  00:18:27,420
Firefox and recent versions of Internet Explorer.

225

00:18:27,600  -->  00:18:34,710
But if we want this animation code to run in Google Chrome Apple Safari and the majority of smartphones

226

00:18:34,950  -->  00:18:37,780
we need to adjust our code just a tiny bit.

227

00:18:37,980  -->  00:18:45,780
Step one anywhere we define and name an animation using the app keyframes rule we need to copy the entire

228

00:18:45,780  -->  00:18:49,020
animation rule pasted.

229

00:18:49,290  -->  00:18:59,070
And then in the original first copy after the at symbol include hyphen Web Kit hyphen step to anywhere

230

00:18:59,070  -->  00:19:02,560
we use any of the animation based properties.

231

00:19:02,640  -->  00:19:09,660
So whether that's the short and animation or any of the other properties like animation duration or

232

00:19:09,750  -->  00:19:18,240
animation iteration count any animation based property again copy the line of code pasted in on the

233

00:19:18,240  -->  00:19:22,710
original line include hyphen Web Kit hyphen.

234

00:19:22,860  -->  00:19:23,710
That's it.

235

00:19:23,760  -->  00:19:29,520
If you perform those two steps on all of your animation based code your animations will run perfectly

236

00:19:29,760  -->  00:19:30,500
in a centrally.

237

00:19:30,510  -->  00:19:37,110
Every modern device and browser and that's going to bring this lesson to a close at this point you should

238

00:19:37,110  -->  00:19:41,310
be familiar with the basics of CSSA animations.

239

00:19:41,310  -->  00:19:44,230
Now we have only scratched the surface of what's possible.

240

00:19:44,390  -->  00:19:48,400
And if you're hungry to learn more about animations and transformations.

241

00:19:48,540  -->  00:19:54,450
Be sure to check the description for this lesson to find information inspiration regarding what else

242

00:19:54,450  -->  00:19:55,960
is possible.

243

00:19:55,980  -->  00:19:58,840
Have fun and I will see you in the next lesson.
