WEBVTT
1

00:00:00.420  -->  00:00:06.780
In this lesson we will learn how to use CSSA to add style to our.

2

00:00:06.800  -->  00:00:08.910
TMF tables.

3

00:00:08.910  -->  00:00:15.240
Now we learned in an earlier lesson that we should not use tables for layout purposes and that we should

4

00:00:15.300  -->  00:00:21.170
only use tables when we have actual tabular data that we want to display.

5

00:00:21.210  -->  00:00:26.500
So let's dive straight into a visual demonstration in front of you is an example page.

6

00:00:26.520  -->  00:00:30.410
And to be more specific here is an example table.

7

00:00:30.450  -->  00:00:34.440
Now this table does not have an ounce of CSSA applied to it.

8

00:00:34.560  -->  00:00:37.660
So its appearance is incredibly bare boned.

9

00:00:37.680  -->  00:00:41.510
So this is the browser default for rendering a table.

10

00:00:41.640  -->  00:00:43.450
And I think we can do better.

11

00:00:43.500  -->  00:00:48.720
I think that by applying a bit of custom CSSA to this table we can make it beautiful and we can also

12

00:00:48.720  -->  00:00:54.100
make it easier for visitors to actually read and distill the data in the table.

13

00:00:54.180  -->  00:00:59.040
So I'm going to switch over to a new tab now where I have written a bit of CSS and we can see that the

14

00:00:59.040  -->  00:01:02.420
table matches the overall design of the page.

15

00:01:02.550  -->  00:01:08.760
And in my opinion it's a bit easier to actually read the table but looking at a finished product isn't

16

00:01:08.760  -->  00:01:10.450
very educational or helpful.

17

00:01:10.470  -->  00:01:16.230
So I'm going to switch back over to this tab and we are going to spend the remainder of this lesson

18

00:01:16.260  -->  00:01:20.910
working together to write CSSA and improve the appearance of our table.

19

00:01:21.150  -->  00:01:22.740
Let's get started.

20

00:01:22.740  -->  00:01:28.440
All right so the first thing that I want to adjust is the text alignment of the table headers so we

21

00:01:28.440  -->  00:01:30.140
can see they are currently centered.

22

00:01:30.360  -->  00:01:36.480
But I want them to be aligned to the left so we can see that in the table head section of our table

23

00:01:36.480  -->  00:01:36.720
.

24

00:01:36.810  -->  00:01:40.950
This first row uses th earth table header elements.

25

00:01:41.160  -->  00:01:46.480
The rest of our table the actual data in our table uses TDD for table data.

26

00:01:46.500  -->  00:01:53.730
So let's begin by targeting these th elements over in our CSSA let's create a new area or create a comment

27

00:01:54.480  -->  00:02:03.070
table styles within any table element look for the table header elements and let's override their text

28

00:02:03.090  -->  00:02:05.130
line to be left.

29

00:02:06.000  -->  00:02:07.140
Excellent.

30

00:02:07.230  -->  00:02:12.810
Next I want to give the table headers an alternate background color so that it stands out from the actual

31

00:02:12.810  -->  00:02:14.600
data in the table.

32

00:02:15.180  -->  00:02:20.760
So to do that within this same rule I will say background color.

33

00:02:21.060  -->  00:02:26.170
I will paste in the hexadecimal color code for a green that we are using elsewhere on the page.

34

00:02:26.550  -->  00:02:32.290
Let's make the text white and let's also give it a text shadow so it pops.

35

00:02:32.490  -->  00:02:38.970
We don't want any blur on the shadow and we'll use a transparent black value.

36

00:02:40.260  -->  00:02:47.790
Next let's add a border around each table header element and each table data or cell.

37

00:02:48.510  -->  00:02:53.280
So to do that we are going to want to select both the table header elements comma.

38

00:02:53.520  -->  00:02:59.890
Let's tack on another selector and all of the TV elements border.

39

00:02:59.910  -->  00:03:02.000
So we want a border on all four corners.

40

00:03:02.010  -->  00:03:03.410
The top bottom left and right.

41

00:03:03.420  -->  00:03:06.610
So border we want to be one pixel thick.

42

00:03:06.660  -->  00:03:08.100
We wanted to be a solid line.

43

00:03:08.100  -->  00:03:10.380
We don't want it to be dotted or dashed.

44

00:03:10.720  -->  00:03:16.740
And we want to use a color that same green value.

45

00:03:16.740  -->  00:03:19.540
So we've added borders but they look a bit funny.

46

00:03:19.560  -->  00:03:26.100
Especially if I zoom in a bit further you can see that there's space in between each table cell which

47

00:03:26.100  -->  00:03:27.240
looks a bit odd.

48

00:03:27.240  -->  00:03:29.870
So I imagine that you would want to remove that.

49

00:03:29.940  -->  00:03:35.650
So to get rid of that we need to select the actual table element the parent element itself.

50

00:03:35.730  -->  00:03:43.020
So the selectors simply table we look at our age T.M. the root of the entire table is simply table.

51

00:03:43.020  -->  00:03:50.250
So once we've selected that in our C Ss we want to use the border spacing property and provide a value

52

00:03:50.250  -->  00:03:53.020
of zero.

53

00:03:53.040  -->  00:03:58.680
We can see that that removed the awkward spacing between the cells but now the borders are too thick

54

00:03:58.680  -->  00:03:59.070
.

55

00:03:59.250  -->  00:04:05.040
So we can see that anytime two cells touch the border is now two pixels thick because the borders are

56

00:04:05.040  -->  00:04:07.100
smashing up against each other.

57

00:04:07.110  -->  00:04:11.730
Ideally we only want a single border to be used between each cell.

58

00:04:11.760  -->  00:04:19.350
So to fix this once again on the table element itself we can use the property named border collapse

59

00:04:19.830  -->  00:04:24.770
and provided a value of collapse.

60

00:04:24.810  -->  00:04:25.710
Excellent.

61

00:04:25.710  -->  00:04:30.120
Now you may notice something else that's odd about the table and that is that it's not using the full

62

00:04:30.120  -->  00:04:36.380
available width of our column by default tables attempt to shrink wrap themselves.

63

00:04:36.510  -->  00:04:41.420
So they will only take up as much horizontal space as they absolutely need.

64

00:04:41.430  -->  00:04:46.200
Now if we want to give our content a bit of extra breathing room and make sure that it uses the full

65

00:04:46.200  -->  00:04:52.770
available call them with all we need to do is while we are selecting the table element itself provided

66

00:04:52.800  -->  00:05:02.550
a width of 100 percent Next let's give each individual cell a bit of breathing room so that it doesn't

67

00:05:02.560  -->  00:05:05.430
sit flush against the borders.

68

00:05:05.440  -->  00:05:11.390
So to do that we will want to work with the rule that is targeting both the table headers and the TV

69

00:05:11.400  -->  00:05:13.440
table cell elements.

70

00:05:13.690  -->  00:05:19.260
Let's add a bit of padding padding 10 pixels.

71

00:05:19.610  -->  00:05:26.700
Next let's add zebra striping zebra striping means we want every other row to use a different background

72

00:05:26.700  -->  00:05:33.760
color so that it's easier for the human eye to track a row across its entire width.

73

00:05:34.060  -->  00:05:39.260
To do this we all need to create entirely new rule within any table element.

74

00:05:39.270  -->  00:05:41.870
Let's look for the T body area.

75

00:05:41.980  -->  00:05:44.860
Actually let's hop over to the H T M L structure really quick.

76

00:05:45.060  -->  00:05:51.910
So within this section of the table the section that actually contains the data we want to grab every

77

00:05:52.000  -->  00:05:54.640
other new table row.

78

00:05:55.870  -->  00:06:02.420
So we will target TR for table row and then use a pseudo selector of End Child.

79

00:06:03.120  -->  00:06:10.560
AW And now this selector will grab every other table row element and then within every other table row

80

00:06:10.560  -->  00:06:16.750
element we want to select all of the T-cells and then we simply want to give them an alternate background

81

00:06:16.750  -->  00:06:17.390
color.

82

00:06:17.700  -->  00:06:22.100
So I will use a green that we're using for the sidebar of the web page.

83

00:06:22.290  -->  00:06:24.010
So now if we refresh.

84

00:06:24.540  -->  00:06:25.080
Excellent.

85

00:06:25.080  -->  00:06:31.600
We could alternatively instead of Aw I'd say even and then that would just simply switch so the current

86

00:06:31.590  -->  00:06:35.890
cell instead of being green will be white and then every other cell will be green.

87

00:06:35.880  -->  00:06:40.770
Now another thing you might have noticed about our table is that we haven't had any control over the

88

00:06:40.770  -->  00:06:43.190
width of each column.

89

00:06:43.410  -->  00:06:48.930
So let's imagine that we do want to have fine grained control and we only want the first column to be

90

00:06:48.940  -->  00:06:57.390
about this wide since tables out here to a very strict grid layout we only need to adjust the width

91

00:06:57.880  -->  00:07:01.410
of the first item of each column.

92

00:07:01.410  -->  00:07:08.920
So to do that in our H.T. IMHO we can simply add unique classes to these initial table header elements

93

00:07:08.910  -->  00:07:09.430
.

94

00:07:09.610  -->  00:07:16.410
So let's add a class to item name named call for column item name.

95

00:07:16.410  -->  00:07:18.580
Now these class names don't have any inherent meaning.

96

00:07:18.610  -->  00:07:19.890
I'm making them up.

97

00:07:19.920  -->  00:07:23.110
You could choose any naming system that you would like to use.

98

00:07:23.120  -->  00:07:25.290
Call quantity

99

00:07:27.690  -->  00:07:29.260
call price.

100

00:07:29.250  -->  00:07:34.070
So now we can reference these classes in our SS.

101

00:07:34.080  -->  00:07:39.920
So let's create a new rule call item name.

102

00:07:39.940  -->  00:07:43.750
Now we said that we wanted the first column to take up about this much space.

103

00:07:43.750  -->  00:07:56.190
So let's use percentages let's say width equals 60 percent and let's select call quantity and call price

104

00:07:56.860  -->  00:07:59.380
and give them a width of 20 percent.

105

00:07:59.520  -->  00:08:01.670
We always want this to add up to 100 percent.

106

00:08:01.690  -->  00:08:06.460
So 60 plus 20 plus 20 is a 100 percent.

107

00:08:06.750  -->  00:08:12.130
Now that we have these custom column sizes in place let's imagine that we want the first column to continue

108

00:08:12.120  -->  00:08:14.090
using text align left.

109

00:08:14.440  -->  00:08:18.840
But we want these second and third columns to use text align center.

110

00:08:19.020  -->  00:08:25.300
Now instead of adding a special class to each and every one of these cells we can simply create a new

111

00:08:25.290  -->  00:08:28.590
rule and use advanced selectors.

112

00:08:29.130  -->  00:08:30.880
Let's scroll down.

113

00:08:31.850  -->  00:08:39.500
Let's create a new rule inside any table element look inside each and every table row element.

114

00:08:39.900  -->  00:08:45.980
And once you're in the table row only select the second and third item.

115

00:08:46.000  -->  00:08:48.370
So let's look at our age team structure really quickly.

116

00:08:48.580  -->  00:08:52.170
The current selector of table TR will dig into each table row.

117

00:08:52.170  -->  00:08:54.540
So this is a table row this table row.

118

00:08:54.540  -->  00:08:59.860
This is a table row and then we only want to select the second and third item.

119

00:08:59.860  -->  00:09:08.590
So those two these two these two so to do that once we've dug into the TR element we can then look for

120

00:09:08.590  -->  00:09:17.380
only the second and third child so any child to let's copy this line comma in three.

121

00:09:17.380  -->  00:09:24.280
So we only want the second and third items and once we have them selected you simply want to use text

122

00:09:24.270  -->  00:09:25.620
align center.

123

00:09:26.110  -->  00:09:29.090
So if we refresh there you have it.

124

00:09:29.190  -->  00:09:34.290
Now I will point out the way that we've been structuring our selectors in this lesson is the way you

125

00:09:34.300  -->  00:09:39.900
would do it if you were setting up baseline styles meaning these styles will affect any and every table

126

00:09:39.900  -->  00:09:42.070
element on your website.

127

00:09:42.100  -->  00:09:48.670
Now that makes sense for setting up background colors and padding but it probably doesn't make sense

128

00:09:49.300  -->  00:09:55.530
for randomly selecting every second and third cell in each row because what if on a separate page would

129

00:09:55.530  -->  00:09:59.570
have on the About page we had a table that had five columns.

130

00:09:59.590  -->  00:10:05.580
So what I suggest we do here is add a unique class to this table on the main parent element.

131

00:10:05.760  -->  00:10:14.940
Let's give it a class of grocery list and then in our C Ss when we are making these complex selectors

132

00:10:14.940  -->  00:10:25.230
based on the second and third child let's adjust the selector table Daut grocery list table datt grocery

133

00:10:25.240  -->  00:10:25.630
list.

134

00:10:25.620  -->  00:10:32.880
So that way these somewhat ambiguous selectors are only being applied to tables that use the grocery

135

00:10:32.880  -->  00:10:34.230
list class.

136

00:10:34.240  -->  00:10:39.780
So if we had a table that had six or seven columns these rules wouldn't get applied.

137

00:10:39.780  -->  00:10:46.330
So with that organizational bit out of the way let's get back to the fun let's make the final stylistic

138

00:10:46.330  -->  00:10:53.040
change for this lesson so we can see that this item's name is too long to fit within the column and

139

00:10:53.050  -->  00:10:55.120
it drops down to a second line.

140

00:10:55.120  -->  00:11:01.960
Now that obviously affects the height of this entire row is taller than all of the other rows.

141

00:11:02.350  -->  00:11:08.710
And if I zoom in and if you look very closely you can see that the quantity and price text are vertically

142

00:11:08.700  -->  00:11:10.120
centered.

143

00:11:10.280  -->  00:11:13.200
They are only a single line but this text is two lines.

144

00:11:13.200  -->  00:11:21.440
So this means that if you look very closely this four sits a few pixels lower than this text does.

145

00:11:21.610  -->  00:11:23.130
And maybe you don't want that.

146

00:11:23.320  -->  00:11:28.810
So maybe you want to override the web browsers default behavior of vertically aligning this content

147

00:11:28.830  -->  00:11:29.090
.

148

00:11:29.380  -->  00:11:38.010
So to do that all we need to do is find the rule that selecting all of our cells and provided a property

149

00:11:38.350  -->  00:11:41.020
of a vertical line.

150

00:11:41.080  -->  00:11:44.670
Now by default the web browser is saying vertical align.

151

00:11:44.670  -->  00:11:45.540
Middle.

152

00:11:45.580  -->  00:11:49.680
We don't want that we want to override that with vertical align top.

153

00:11:49.920  -->  00:11:51.340
So now when I refresh.

154

00:11:51.420  -->  00:11:52.240
Wait for it.

155

00:11:52.380  -->  00:11:54.900
Let me zoom in and look very closely.

156

00:11:54.900  -->  00:12:02.410
Three to one we can see that these two cells are now perfectly vertically aligned with the content in

157

00:12:02.400  -->  00:12:04.130
the left cell.

158

00:12:04.240  -->  00:12:09.870
So that's how you can control the vertical alignment and that's going to bring this lesson to a close

159

00:12:09.880  -->  00:12:10.280
.

160

00:12:10.330  -->  00:12:15.060
Now to be honest many of you will never find yourself needing this style tables.

161

00:12:15.070  -->  00:12:16.790
Some of you will some of you won't.

162

00:12:17.050  -->  00:12:23.470
But at the very least this lesson introduced you to a few new types of selectors namely the nth child

163

00:12:23.460  -->  00:12:28.650
pseudo selector which you can use for much more than just selecting different table cells.

164

00:12:28.890  -->  00:12:33.990
So we will see the nth child pseudo selector used again later in the course.

165

00:12:34.020  -->  00:12:37.720
I encourage you to download the demo Zipp for this lesson.

166

00:12:37.710  -->  00:12:43.060
Play around with some of the table styles and some of the selectors see where your curiosity takes you

167

00:12:43.060  -->  00:12:43.300
.

168

00:12:43.300  -->  00:12:46.250
Have fun and I will see you in the next lesson.
