1

00:00:00,470  -->  00:00:06,580
In this lesson we will learn how to create a table of data with HTL.

2

00:00:06,990  -->  00:00:12,890
Let's imagine that we had a grocery list but instead of only keeping track of the name of the item.

3

00:00:13,260  -->  00:00:16,760
Let's imagine that we also wanted to keep track of its price.

4

00:00:16,980  -->  00:00:19,540
What aisle in the store is located on.

5

00:00:19,650  -->  00:00:23,790
And also quantity how many we want of that particular item.

6

00:00:24,150  -->  00:00:29,430
With all of these different details of the grocery items in mind it doesn't make sense to use a simple

7

00:00:29,430  -->  00:00:31,080
bulleted list.

8

00:00:31,080  -->  00:00:34,320
Instead it makes sense to create a table.

9

00:00:34,560  -->  00:00:41,130
So our goal for this lesson is to create a table of our grocery list data so you can become familiar

10

00:00:41,220  -->  00:00:43,080
with table syntax.

11

00:00:43,080  -->  00:00:44,610
Let's get started.

12

00:00:44,610  -->  00:00:52,100
The HTL code to begin creating a table is simply table within the table element.

13

00:00:52,110  -->  00:00:59,910
We then use the TR element which stands for table row to create a row within the table row element.

14

00:00:59,910  -->  00:01:04,250
We can then use TDD for table data to create columns.

15

00:01:04,410  -->  00:01:12,510
So for example our first table data element or our first column will simply say bread.

16

00:01:12,530  -->  00:01:17,550
The next column we will include the aisle that bread is located at in the store.

17

00:01:17,700  -->  00:01:19,770
So we'll say that it's on aisle 2.

18

00:01:20,520  -->  00:01:23,530
And the third column will include the price of bread.

19

00:01:23,550  -->  00:01:28,290
So we will say that it costs $3.

20

00:01:28,440  -->  00:01:34,720
And the fourth column will include the quantity so we only want one loaf of bread.

21

00:01:34,830  -->  00:01:40,490
If I save and refresh in my web browser we can see the beginnings of a table.

22

00:01:40,740  -->  00:01:45,960
All of the data associated with the bread item sits on a single row.

23

00:01:46,590  -->  00:01:49,450
Let's try to add another item milk.

24

00:01:49,680  -->  00:01:51,600
So we would create another row.

25

00:01:51,600  -->  00:01:57,360
Each item receives its own table row and then within that table row element again will create Dee-Dee

26

00:01:57,360  -->  00:01:59,440
elements which stand for table data.

27

00:01:59,610  -->  00:02:00,600
So milk

28

00:02:03,420  -->  00:02:07,480
what Isle's milk on we'll say that it's on aisle one.

29

00:02:07,920  -->  00:02:11,470
How much does milk cost 250.

30

00:02:12,330  -->  00:02:16,320
And we'll say that we want to milk eggs to small cartons of milk.

31

00:02:16,320  -->  00:02:21,060
So if we save and refresh I can see a second row in our table.

32

00:02:21,060  -->  00:02:25,320
It's very easy to track all the data across a single row.

33

00:02:25,320  -->  00:02:30,000
However our table desperately needs some sort of labeling system.

34

00:02:30,000  -->  00:02:34,260
It's not clear to the user what these numbers even stand for throughout the video.

35

00:02:34,260  -->  00:02:39,450
We've mentioned that the first numbers associated with the IO the item is on and that the final number

36

00:02:39,450  -->  00:02:41,810
at the end of the row is the quantity.

37

00:02:41,880  -->  00:02:48,780
But we need a way of labeling that on screen and we can do that by creating a row at the top of the

38

00:02:48,780  -->  00:02:51,770
table with table headers.

39

00:02:51,780  -->  00:02:58,710
So within this table row instead of TD for table data we can create table cells or table columns by

40

00:02:59,190  -->  00:03:03,080
using the th element table header.

41

00:03:03,240  -->  00:03:08,500
So the first column is the item name.

42

00:03:09,030  -->  00:03:20,160
The second column is the aisle that the item can be found on the third column is the price and the fourth

43

00:03:20,160  -->  00:03:22,920
column is the quantity.

44

00:03:22,920  -->  00:03:28,560
So if I save and refresh we can see that our table is now clearly labeled.

45

00:03:28,560  -->  00:03:35,670
So let's review the syntax to create a table you use the very intuitively named table element.

46

00:03:35,670  -->  00:03:41,520
Each row of the table is created by TR which stands for table row.

47

00:03:41,580  -->  00:03:44,890
Within that we create table cells.

48

00:03:44,970  -->  00:03:47,720
There are two types of table cells.

49

00:03:47,790  -->  00:03:52,320
The first that we saw TDE is for data stands for table data.

50

00:03:52,320  -->  00:03:57,390
The second type of table cell is th which stands for table header.

51

00:03:57,390  -->  00:04:05,310
These two types allow us to differentiate between labels or headers and actual data in our table.

52

00:04:05,310  -->  00:04:11,100
Now there are a few additional wrapper elements that will also allow us to differentiate between headers

53

00:04:11,190  -->  00:04:12,350
and data.

54

00:04:12,360  -->  00:04:20,190
It's considered best practice to wrap any header information in the table inside a key head element

55

00:04:20,190  -->  00:04:21,400
.

56

00:04:21,630  -->  00:04:28,440
So I will copy or excuse me cut and paste the row with our table headers into the head element.

57

00:04:28,440  -->  00:04:38,200
It's also a best practice to include all of the tables actual data inside a T body element table body

58

00:04:38,310  -->  00:04:38,860
.

59

00:04:39,430  -->  00:04:47,240
So cut and paste our data rows to sit within the T body element.

60

00:04:47,250  -->  00:04:54,090
Now if I save and refresh in the browser we don't see any visible change by using t head and t body

61

00:04:54,130  -->  00:04:54,500
.

62

00:04:54,540  -->  00:04:58,290
However using these elements is a good idea for two reasons.

63

00:04:58,290  -->  00:05:04,770
Number one it gives us additional hooks to play with later on when we're familiar with CSSA or in other

64

00:05:04,770  -->  00:05:07,740
words when we want to style the table.

65

00:05:07,860  -->  00:05:12,240
And number two it increases the semantic richness of our code.

66

00:05:12,240  -->  00:05:18,210
Before we close out this lesson on each team tables there's one final organizational element that I

67

00:05:18,210  -->  00:05:21,870
want to bring to your attention in addition to t head and t body.

68

00:05:21,870  -->  00:05:28,120
There's also t foot for table footer.

69

00:05:28,430  -->  00:05:35,760
Now even if we placed table footer above table body it will still be displayed in the web browser below

70

00:05:35,820  -->  00:05:36,880
the body content.

71

00:05:37,050  -->  00:05:40,000
So let's create a row in our footer for example.

72

00:05:40,200  -->  00:05:49,100
So within tief foot will create a row and within that row we'll create four columns the name of this

73

00:05:49,110  -->  00:05:52,010
bottom footer row will be all.

74

00:05:52,110  -->  00:05:53,810
So it's all items.

75

00:05:54,300  -->  00:05:57,180
What aisle is it on.

76

00:05:57,180  -->  00:05:59,160
Not applicable.

77

00:05:59,160  -->  00:06:01,190
The next column is the price.

78

00:06:01,200  -->  00:06:05,490
So that's five fifty.

79

00:06:07,440  -->  00:06:11,570
And the fourth column is quantity again that is not applicable.

80

00:06:11,970  -->  00:06:19,180
So now if we save and refresh we can see that the table footer row sits at the bottom even though in

81

00:06:19,260  -->  00:06:23,400
the markup in our HVM melt it sits above the table body.

82

00:06:23,400  -->  00:06:31,320
Now when older versions of HMO you were required to place the table footer above the table body in your

83

00:06:31,320  -->  00:06:38,700
code but in the newest version of HMO it's ok to include the table footer or teep foot at the bottom

84

00:06:38,850  -->  00:06:39,780
of your table.

85

00:06:39,870  -->  00:06:43,950
On a side note this should probably read total instead of all.

86

00:06:43,950  -->  00:06:49,200
So if we save and refresh we can see that nothing changes even though we moved the table footer to sit

87

00:06:49,200  -->  00:06:52,920
at the end of our code that's going to bring this lesson to a close.

88

00:06:52,920  -->  00:07:00,150
But first here's a quick review of the structure of a table at the highest level we have the table element

89

00:07:00,780  -->  00:07:08,820
inside that we have either the T head t body or t foot element inside that we then have a row and then

90

00:07:08,820  -->  00:07:15,090
within that row we have a table cell which is either a piece of data Tedi or a header.

91

00:07:15,090  -->  00:07:18,180
Th or see you in the next lesson
