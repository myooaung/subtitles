WEBVTT
1
00:00:00.050 --> 00:00:03.060
- [Instructor] Now that we've completed basic AES encryption

2
00:00:03.060 --> 00:00:07.080
using a modern block cipher and a 256-bit key,

3
00:00:07.080 --> 00:00:11.020
we will now work on creating an asymmetric key pair

4
00:00:11.020 --> 00:00:15.030
so we can do public key, private key encryption.

5
00:00:15.030 --> 00:00:17.060
Let's go ahead and navigate into our IDE

6
00:00:17.060 --> 00:00:19.030
and I'd like you to create a package

7
00:00:19.030 --> 00:00:25.020
in src, main, Java and that package name

8
00:00:25.020 --> 00:00:32.040
is going to be com.frankmoley.crypto.asymmetric.

9
00:00:32.040 --> 00:00:34.000
Now in our asymmetric package,

10
00:00:34.000 --> 00:00:36.060
we're gonna create a new Java class file

11
00:00:36.060 --> 00:00:42.030
called AsymmetricEncryptionUtils.

12
00:00:42.030 --> 00:00:44.030
Now just like we did before,

13
00:00:44.030 --> 00:00:49.050
we're gonna create a private static final string

14
00:00:49.050 --> 00:00:51.040
called RSA

15
00:00:51.040 --> 00:00:55.080
and we will simply set it equal to the string RSA.

16
00:00:55.080 --> 00:01:00.020
So now we can create a public static key pair

17
00:01:00.020 --> 00:01:03.040
and that's from java.security

18
00:01:03.040 --> 00:01:09.070
and we will name this method generateRSAKeyPair

19
00:01:09.070 --> 00:01:13.020
and we will let it throw an exception.

20
00:01:13.020 --> 00:01:17.000
You can import that class if need be.

21
00:01:17.000 --> 00:01:19.030
Now, very similar to the way we did before,

22
00:01:19.030 --> 00:01:24.030
we're gonna create an instance of SecureRandom

23
00:01:24.030 --> 00:01:31.020
and this time we will use a KeyPairGenerator

24
00:01:31.020 --> 00:01:32.060
and we will set it equal

25
00:01:32.060 --> 00:01:38.080
to KeyPairGenerator.getInstance parsing it RSA.

26
00:01:38.080 --> 00:01:41.050
Now we will take our KeyPairGenerator

27
00:01:41.050 --> 00:01:45.000
and we will initialize it.

28
00:01:45.000 --> 00:01:49.060
And we're gonna initialize it with a 4096 key,

29
00:01:49.060 --> 00:01:52.070
and our secureRandom

30
00:01:52.070 --> 00:01:55.050
in order to see that properly.

31
00:01:55.050 --> 00:01:57.070
And we will simply return

32
00:01:57.070 --> 00:02:01.080
our KeyPairGenerator.generateKeyPair.

33
00:02:01.080 --> 00:02:04.000
And that's all there is to it.

34
00:02:04.000 --> 00:02:06.010
And you should notice it's very similar

35
00:02:06.010 --> 00:02:09.020
to the way the symmetric-key worked.

36
00:02:09.020 --> 00:02:14.020
Go ahead and create a test and in our test,

37
00:02:14.020 --> 00:02:18.060
we will create an instance of keyPair

38
00:02:18.060 --> 00:02:24.080
equal to AsymmetricEncryptionUtils.generateKeyPair.

39
00:02:24.080 --> 00:02:29.030
Once again, we need to go ahead and throw an exception.

40
00:02:29.030 --> 00:02:32.070
Now we'll go ahead and assertNotNull

41
00:02:32.070 --> 00:02:37.090
on our keyPair to satisfy our Unit.

42
00:02:37.090 --> 00:02:39.030
But let's go ahead and do a little bit

43
00:02:39.030 --> 00:02:43.050
of System.out.println magic here.

44
00:02:43.050 --> 00:02:49.080
The first thing I wanna print out is the Private Key

45
00:02:49.080 --> 00:02:51.040
and we will set that equal to

46
00:02:51.040 --> 00:02:56.030
our DatatypeConverter.printHexBinary

47
00:02:56.030 --> 00:03:04.010
and we're gonna do the keyPair.getPrivate().getEncoded.

48
00:03:04.010 --> 00:03:07.010
And we're gonna do the same for our Public Key.

49
00:03:07.010 --> 00:03:10.040
(typing)

50
00:03:10.040 --> 00:03:12.000
and I'm gonna put an extra space

51
00:03:12.000 --> 00:03:14.050
in here for a very specific reason

52
00:03:14.050 --> 00:03:16.080
that I will show you here in a minute.

53
00:03:16.080 --> 00:03:17.090
We're gonna do once again

54
00:03:17.090 --> 00:03:21.040
the DatatypeConverter.printHexBinary.

55
00:03:21.040 --> 00:03:28.040
We'll go from the keyPair.getPublic this time, .getEncoded

56
00:03:28.040 --> 00:03:33.000
So then run our test here.

57
00:03:33.000 --> 00:03:36.010
I'm gonna pop this console window up just a little bit

58
00:03:36.010 --> 00:03:38.030
so we can actually see what's going on.

59
00:03:38.030 --> 00:03:40.070
The first thing you may notice is this is actually take

60
00:03:40.070 --> 00:03:43.010
a little bit of time to run your test.

61
00:03:43.010 --> 00:03:47.070
And the reason is that we're generating a 496-bit key.

62
00:03:47.070 --> 00:03:49.090
That takes a little bit of time.

63
00:03:49.090 --> 00:03:52.080
The other thing that I want you to notice here

64
00:03:52.080 --> 00:03:56.080
is that our private key, which is on the second line here,

65
00:03:56.080 --> 00:04:01.020
is actually significantly longer

66
00:04:01.020 --> 00:04:04.070
than our public key.

67
00:04:04.070 --> 00:04:06.010
And as I scroll to the right,

68
00:04:06.010 --> 00:04:07.080
you can see that it keeps going,

69
00:04:07.080 --> 00:04:10.060
and keeps going, and keeps going.

70
00:04:10.060 --> 00:04:13.050
If I come back to the left here a little bit,

71
00:04:13.050 --> 00:04:19.000
you'll see the public key which is on the third line

72
00:04:19.000 --> 00:04:23.020
is about right there, and that is as expected.

73
00:04:23.020 --> 00:04:26.040
Our private key is always going to be longer

74
00:04:26.040 --> 00:04:30.000
than our public key as far as the key space goes

75
00:04:30.000 --> 00:04:34.040
with most asymmetric key algorithms.

76
00:04:34.040 --> 00:04:36.060
So now that we've generated the key,

77
00:04:36.060 --> 00:04:38.010
we're ready to do the encryption

78
00:04:38.010 --> 00:04:41.000
and decryption in our next video.

