WEBVTT
1
00:00:00.050 --> 00:00:02.040
- [Narrator] So now that we've discussed at a high level

2
00:00:02.040 --> 00:00:05.010
what the JCA and the JCE are,

3
00:00:05.010 --> 00:00:10.050
let's talk about the actual details of the JCA itself.

4
00:00:10.050 --> 00:00:12.090
Now, one of the first engines that we will come across

5
00:00:12.090 --> 00:00:15.050
is the secure random engine.

6
00:00:15.050 --> 00:00:17.040
Now, this engine is used to create

7
00:00:17.040 --> 00:00:21.010
cryptographically strong random numbers.

8
00:00:21.010 --> 00:00:23.020
And it's important to note that what you get

9
00:00:23.020 --> 00:00:26.090
from Java.lang random is not sufficiently

10
00:00:26.090 --> 00:00:31.030
secure enough to be used for cryptographic functions.

11
00:00:31.030 --> 00:00:34.010
There's just simply not enough entropy

12
00:00:34.010 --> 00:00:37.030
in how the random number is generated.

13
00:00:37.030 --> 00:00:40.020
Now, secure random is really a requirement

14
00:00:40.020 --> 00:00:43.070
for good crypto operations in Java.

15
00:00:43.070 --> 00:00:46.030
And as such, it's often used for seeds

16
00:00:46.030 --> 00:00:51.090
for things like keys as well as other algorithm needs.

17
00:00:51.090 --> 00:00:54.010
Now the next engine and the one that I

18
00:00:54.010 --> 00:00:57.000
actually happen to use more than anything else

19
00:00:57.000 --> 00:00:59.080
is the message digest engine.

20
00:00:59.080 --> 00:01:04.070
Now this is used to produce cryptographically secure hashes.

21
00:01:04.070 --> 00:01:10.080
Now a hash or digest is a unique one way operation

22
00:01:10.080 --> 00:01:14.000
where we take a fixed sized output

23
00:01:14.000 --> 00:01:16.080
from a variable sized input

24
00:01:16.080 --> 00:01:20.090
and that really is key to how a hash operation works

25
00:01:20.090 --> 00:01:23.010
and a sufficient hash operation

26
00:01:23.010 --> 00:01:29.030
will have very few collisions over a very large input set.

27
00:01:29.030 --> 00:01:31.060
Now a signature is another engine

28
00:01:31.060 --> 00:01:34.040
that we will use throughout this course.

29
00:01:34.040 --> 00:01:36.020
And it is an engine to create

30
00:01:36.020 --> 00:01:39.030
and validate digital signatures.

31
00:01:39.030 --> 00:01:41.060
Now, digital signatures are unique in that

32
00:01:41.060 --> 00:01:45.010
they take a combination of a hash

33
00:01:45.010 --> 00:01:49.080
and a public key encryption asymmetric operation

34
00:01:49.080 --> 00:01:54.000
to create a unique value or a signature.

35
00:01:54.000 --> 00:01:56.080
Now that signature can be verified

36
00:01:56.080 --> 00:01:59.080
to produce a hash that is equal to the original

37
00:01:59.080 --> 00:02:02.080
based on a decryption operation.

38
00:02:02.080 --> 00:02:07.000
Now this is very very useful in cases of identity.

39
00:02:07.000 --> 00:02:09.040
Not only across distributed networks

40
00:02:09.040 --> 00:02:11.090
but even within an enclosed network

41
00:02:11.090 --> 00:02:16.020
or a closed set of devices such as IOT.

42
00:02:16.020 --> 00:02:18.060
Now one of the final classes that we're going to talk about

43
00:02:18.060 --> 00:02:20.040
is the cipher engine.

44
00:02:20.040 --> 00:02:23.070
And the cipher engine is by far the most common

45
00:02:23.070 --> 00:02:25.070
that the average person uses

46
00:02:25.070 --> 00:02:28.040
when they come into Java crypto.

47
00:02:28.040 --> 00:02:32.040
It is the engine to provide encryption operations.

48
00:02:32.040 --> 00:02:35.060
Now cipher provides both support for asymmetric

49
00:02:35.060 --> 00:02:38.030
and symmetric encryption operations

50
00:02:38.030 --> 00:02:41.010
and if you're not sure what those terms mean

51
00:02:41.010 --> 00:02:42.020
we'll talk about that

52
00:02:42.020 --> 00:02:44.090
when we get to ciphers in a little bit.

53
00:02:44.090 --> 00:02:49.040
But the cipher engine also supports stream block ciphers.

54
00:02:49.040 --> 00:02:52.060
Now, we're going to be using block ciphers in this course

55
00:02:52.060 --> 00:02:54.080
and it's important to note that block ciphers

56
00:02:54.080 --> 00:02:59.030
require a standard sized input as well as a key

57
00:02:59.030 --> 00:03:01.090
and as such, we're gonna have to apply padding

58
00:03:01.090 --> 00:03:03.040
to our block cipher

59
00:03:03.040 --> 00:03:05.030
and we'll get more into that as well

60
00:03:05.030 --> 00:03:08.070
when we get into the cipher operations.

61
00:03:08.070 --> 00:03:10.040
Now there's one other key construct

62
00:03:10.040 --> 00:03:12.090
that often gets mixed in with Java crypto.

63
00:03:12.090 --> 00:03:15.050
And that is the concept of stores.

64
00:03:15.050 --> 00:03:17.090
And really there's a couple of primary stores

65
00:03:17.090 --> 00:03:22.000
that you as a developer may come into contact with.

66
00:03:22.000 --> 00:03:24.050
The first is a key store.

67
00:03:24.050 --> 00:03:27.040
And a Java key store as you might imagine

68
00:03:27.040 --> 00:03:29.070
is used to store keys

69
00:03:29.070 --> 00:03:32.090
and their cryptographic keys that are used

70
00:03:32.090 --> 00:03:37.020
for PKI or symmetric encryption operations.

71
00:03:37.020 --> 00:03:39.040
The second type of store that you might

72
00:03:39.040 --> 00:03:43.000
come into contact with is a trust store.

73
00:03:43.000 --> 00:03:46.050
And a trust store is used to store certificates

74
00:03:46.050 --> 00:03:52.080
or certificate chains to confirm validity of a remote site.

75
00:03:52.080 --> 00:03:54.080
Now more often than not if you're working

76
00:03:54.080 --> 00:03:57.080
within these stores you're gonna do so through keytool

77
00:03:57.080 --> 00:04:01.020
and in this course that's how we're going to manipulate

78
00:04:01.020 --> 00:04:05.060
a Java key store is through keytool itself.

79
00:04:05.060 --> 00:04:07.060
So with all of that being said,

80
00:04:07.060 --> 00:04:11.000
it's time to jump in and deal with our first engine.

