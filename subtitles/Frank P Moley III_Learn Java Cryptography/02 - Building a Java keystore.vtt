WEBVTT
1
00:00:00.060 --> 00:00:01.040
- [Instructor] Now that we've talked a little bit

2
00:00:01.040 --> 00:00:03.010
about what a KeyStore is,

3
00:00:03.010 --> 00:00:07.040
we're gonna use the JCA to create an in-memory Java KeyStore

4
00:00:07.040 --> 00:00:10.040
that we could use with other systems on an internal network,

5
00:00:10.040 --> 00:00:12.050
if we decided to do so.

6
00:00:12.050 --> 00:00:15.070
Now we're going to store a shared symmetric key

7
00:00:15.070 --> 00:00:17.050
in order to avoid some of the messiness

8
00:00:17.050 --> 00:00:19.080
of JCA with certificates.

9
00:00:19.080 --> 00:00:21.040
But note that you can do this

10
00:00:21.040 --> 00:00:24.060
with certificate pairs if you wanna do that,

11
00:00:24.060 --> 00:00:28.010
so an X509 and a private key that matches it.

12
00:00:28.010 --> 00:00:30.090
I'd like you to go ahead and jump into your IDE,

13
00:00:30.090 --> 00:00:33.060
and we're gonna open up source, main, Java,

14
00:00:33.060 --> 00:00:36.010
and our com.frankmoley.crypto package,

15
00:00:36.010 --> 00:00:37.050
and let's create a new package

16
00:00:37.050 --> 00:00:41.050
underneath that called keystore.

17
00:00:41.050 --> 00:00:44.070
And to our keystore package

18
00:00:44.070 --> 00:00:49.070
we will create a new Java Class called KeyStoreUtils.

19
00:00:49.070 --> 00:00:54.060
And one more time, we will create a private static final

20
00:00:54.060 --> 00:01:01.090
String named SECRET_KEY_KEYSTORE_TYPE,

21
00:01:01.090 --> 00:01:05.060
and the type that we will use is JCEKS.

22
00:01:05.060 --> 00:01:07.000
And the reason we're gonna actually create

23
00:01:07.000 --> 00:01:09.000
a specific type of a KeyStore,

24
00:01:09.000 --> 00:01:11.090
is because we're saving a private key,

25
00:01:11.090 --> 00:01:14.010
and the standard default KeyStore

26
00:01:14.010 --> 00:01:17.090
will not store a private key in Java.

27
00:01:17.090 --> 00:01:19.030
So let's go ahead and implement the method now.

28
00:01:19.030 --> 00:01:22.080
So private static_KeyStore

29
00:01:22.080 --> 00:01:29.060
create PrivateKeyJavaKeyStore.

30
00:01:29.060 --> 00:01:36.030
We are gonna send in a String of keystorePassword,

31
00:01:36.030 --> 00:01:41.020
and a String for the keyAlias,

32
00:01:41.020 --> 00:01:45.040
and then the SecretKey itself,

33
00:01:45.040 --> 00:01:50.050
and finally a String for the secretKeyPassword.

34
00:01:50.050 --> 00:01:53.020
Now we could've used one password for both,

35
00:01:53.020 --> 00:01:54.090
but I prefer not to do that.

36
00:01:54.090 --> 00:01:57.090
I prefer to keep them separate.

37
00:01:57.090 --> 00:02:04.090
And one more thing here, we're gonna throw an Exception,

38
00:02:04.090 --> 00:02:08.000
and let's import that element,

39
00:02:08.000 --> 00:02:09.040
and now we're ready to do some work.

40
00:02:09.040 --> 00:02:13.020
So let's create an instance of a KeyStore object

41
00:02:13.020 --> 00:02:16.040
called keyStore,

42
00:02:16.040 --> 00:02:18.000
and as you might imagine we're gonna do

43
00:02:18.000 --> 00:02:20.070
KeyStore.getInstance,

44
00:02:20.070 --> 00:02:25.080
and we will send it our secret KeyStore type.

45
00:02:25.080 --> 00:02:30.030
Now, in order to manipulate a Java KeyStore in memory,

46
00:02:30.030 --> 00:02:32.060
you actually have to load it,

47
00:02:32.060 --> 00:02:36.000
but since we're gonna use memory to do our loading,

48
00:02:36.000 --> 00:02:39.090
we're gonna send a null input String.

49
00:02:39.090 --> 00:02:42.040
But, we need to actually set the password,

50
00:02:42.040 --> 00:02:47.000
so we're gonna do keystorePassword to a character array.

51
00:02:47.000 --> 00:02:50.000
Alright so now we need to actually store the password

52
00:02:50.000 --> 00:02:51.070
for the actual key itself.

53
00:02:51.070 --> 00:02:57.040
So we're gonna do a keyStore.ProtectionParameter,

54
00:02:57.040 --> 00:03:00.000
and we are going to call this ProtectionParameter

55
00:03:00.000 --> 00:03:02.060
entryPassword, 'cause this is the password

56
00:03:02.060 --> 00:03:05.040
for our secret entry itself.

57
00:03:05.040 --> 00:03:12.050
Now this equals a new_KeyStore.PasswordProtection,

58
00:03:12.050 --> 00:03:19.070
and to that we will set our secretKeyPassword.toCharArray.

59
00:03:19.070 --> 00:03:21.080
Go ahead and shrink this down so it's a little easier to see

60
00:03:21.080 --> 00:03:25.020
all these typing of the long lines.

61
00:03:25.020 --> 00:03:27.080
So now we're gonna create an actual entry

62
00:03:27.080 --> 00:03:30.030
for our secret key,

63
00:03:30.030 --> 00:03:36.080
by using the keyStore.SecretKeyEntry

64
00:03:36.080 --> 00:03:41.030
equal to new_KeyStore.SecretKeyEntry,

65
00:03:41.030 --> 00:03:45.070
and we will set our secretKey on that.

66
00:03:45.070 --> 00:03:51.010
And finally, we can call keyStore.setEntry,

67
00:03:51.010 --> 00:03:53.070
pass it our key name,

68
00:03:53.070 --> 00:03:57.040
because this is how we will actually load it later,

69
00:03:57.040 --> 00:04:03.010
the privateKeyEntry, and then the password for that entry,

70
00:04:03.010 --> 00:04:06.020
and then we can return our keyStore.

71
00:04:06.020 --> 00:04:08.010
Alright so now that we've implemented this,

72
00:04:08.010 --> 00:04:10.040
let's actually go create a test

73
00:04:10.040 --> 00:04:13.020
so we can make sure that this works.

74
00:04:13.020 --> 00:04:16.070
Go ahead and accept the method here.

75
00:04:16.070 --> 00:04:18.000
Now to this method I wanna go ahead

76
00:04:18.000 --> 00:04:22.010
and set a throws Exception,

77
00:04:22.010 --> 00:04:24.040
and now let's go implement our test.

78
00:04:24.040 --> 00:04:29.010
So we're gonna get an instance of a SecretKey

79
00:04:29.010 --> 00:04:35.060
from our SymmetricEncryptionUtils.createAESKey.

80
00:04:35.060 --> 00:04:36.080
Now in order to test this,

81
00:04:36.080 --> 00:04:39.090
we are going to get the hex of that.

82
00:04:39.090 --> 00:04:43.010
So secretKeyHex

83
00:04:43.010 --> 00:04:48.000
equals DataTypeConverter.printHexBinary

84
00:04:48.000 --> 00:04:52.050
on the secretKey.getEncoded.

85
00:04:52.050 --> 00:04:55.010
And we'll use that here in a little bit.

86
00:04:55.010 --> 00:04:59.050
So let's get our KeyStore

87
00:04:59.050 --> 00:05:06.030
from KeyStoreUtils.createPrivateJavaKeyStore,

88
00:05:06.030 --> 00:05:10.010
and we are going to pass it a password of password,

89
00:05:10.010 --> 00:05:14.010
an alias for our key of foo,

90
00:05:14.010 --> 00:05:16.070
the actual key itself,

91
00:05:16.070 --> 00:05:22.000
and then a keyPassword of keyPassword.

92
00:05:22.000 --> 00:05:24.090
So now we've got our KeyStore.

93
00:05:24.090 --> 00:05:30.070
We can go ahead and assert that that is NotNull.

94
00:05:30.070 --> 00:05:33.000
Now we're gonna actually go in and load the KeyStore.

95
00:05:33.000 --> 00:05:35.070
I didn't do this in an actual method,

96
00:05:35.070 --> 00:05:38.000
so we're gonna do it here in our test.

97
00:05:38.000 --> 00:05:40.060
So once again we're loading it from memory,

98
00:05:40.060 --> 00:05:44.010
so we will pass it an input stream of null,

99
00:05:44.010 --> 00:05:46.030
and the password that we chose was password

100
00:05:46.030 --> 00:05:49.010
so we'll do password.CharArray.

101
00:05:49.010 --> 00:05:52.020
Now we have to kinda reverse our process,

102
00:05:52.020 --> 00:05:56.040
so KeyStore.ProtectionParameter,

103
00:05:56.040 --> 00:06:05.040
entryPassword equals new KeyStore.PasswordProtection,

104
00:06:05.040 --> 00:06:13.030
and we are going to set it to keyPassword.toCharArray,

105
00:06:13.030 --> 00:06:21.020
and now we will get the SecretKeyEntry called resultEntry,

106
00:06:21.020 --> 00:06:23.070
and we're gonna have to cast that

107
00:06:23.070 --> 00:06:27.000
to a KeyStore.SecretKeyEntry,

108
00:06:27.000 --> 00:06:30.070
because it's just gonna be a raw entry when it comes out,

109
00:06:30.070 --> 00:06:33.030
to keyStore.getEntry.

110
00:06:33.030 --> 00:06:35.070
Now, we will get an entry by the name of foo,

111
00:06:35.070 --> 00:06:38.000
which was our alias,

112
00:06:38.000 --> 00:06:42.030
and the entryPassword that we created.

113
00:06:42.030 --> 00:06:47.050
Now our SecretKey, which we will call result,

114
00:06:47.050 --> 00:06:52.060
is from the resultEntry.getSecretKey,

115
00:06:52.060 --> 00:06:57.000
and finally the resultKeyHex

116
00:06:57.000 --> 00:07:04.010
equals DatatypeConverter.printHexBinary

117
00:07:04.010 --> 00:07:07.000
on result.getEncoded,

118
00:07:07.000 --> 00:07:11.070
and we can do an assertEquals on the original,

119
00:07:11.070 --> 00:07:15.090
which was secretKeyHex,

120
00:07:15.090 --> 00:07:20.070
and then the resultKeyHex.

121
00:07:20.070 --> 00:07:25.000
And we'll go ahead and run our test.

122
00:07:25.000 --> 00:07:27.030
And after compilation is done,

123
00:07:27.030 --> 00:07:28.090
everything's green and we're good to go.

124
00:07:28.090 --> 00:07:32.020
So we created a key, stored it in a KeyStore,

125
00:07:32.020 --> 00:07:34.020
opened the KeyStore back up, pulled the key out,

126
00:07:34.020 --> 00:07:36.050
and verified that the two keys were the same,

127
00:07:36.050 --> 00:07:39.000
which is exactly what we would expect.

