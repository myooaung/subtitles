WEBVTT
1
00:00:00.050 --> 00:00:02.030
- [Instructor] So now that we have a key

2
00:00:02.030 --> 00:00:05.030
we can do some actual encryption and decryption.

3
00:00:05.030 --> 00:00:07.050
So let's jump into the IDE.

4
00:00:07.050 --> 00:00:11.060
I'd like you to go ahead and open up in source main java

5
00:00:11.060 --> 00:00:13.060
our symmetric encryption utilities

6
00:00:13.060 --> 00:00:17.090
in com.frankmoley.crypto symmetric package.

7
00:00:17.090 --> 00:00:20.050
Now because we're going to use CBC,

8
00:00:20.050 --> 00:00:23.070
we need to do a few things to get started.

9
00:00:23.070 --> 00:00:25.010
So the first thing that we're going to do here

10
00:00:25.010 --> 00:00:29.050
is we're going to create a private static final string,

11
00:00:29.050 --> 00:00:34.080
and we're going to call this AES_CIPHER_ALGORITHM.

12
00:00:34.080 --> 00:00:37.060
Remember that we're using a block cipher,

13
00:00:37.060 --> 00:00:41.090
so it's not just AES, we also need to pass in the mode,

14
00:00:41.090 --> 00:00:44.010
which we're going to use CBC,

15
00:00:44.010 --> 00:00:47.010
and because we want to make sure that everything

16
00:00:47.010 --> 00:00:53.030
is padded correctly, we're going to use PKCS5Padding.

17
00:00:53.030 --> 00:00:55.070
Now essentially this is going to make sure that our block

18
00:00:55.070 --> 00:00:58.070
gets sufficient padding, we're going to use CBC,

19
00:00:58.070 --> 00:01:02.020
which means that we need an initialization vector.

20
00:01:02.020 --> 00:01:04.070
So let's go ahead and create a method in order

21
00:01:04.070 --> 00:01:07.040
to do that initialization vector.

22
00:01:07.040 --> 00:01:12.030
So we'll create a public static byte array method

23
00:01:12.030 --> 00:01:18.020
called createInitializationVector.

24
00:01:18.020 --> 00:01:29.080
We will simply create a byte array equal to size of 16.

25
00:01:29.080 --> 00:01:37.070
Now once we have that we will use secureRandom.

26
00:01:37.070 --> 00:01:41.050
And we're going to use that to get a random set of bytes.

27
00:01:41.050 --> 00:01:46.000
So we'll call into secureRandom.nextBytes

28
00:01:46.000 --> 00:01:49.020
and we will pass it our initializationVector.

29
00:01:49.020 --> 00:01:52.050
Now this should populate all 16 bytes

30
00:01:52.050 --> 00:01:57.040
with a random, a true cryptographic random set of bytes.

31
00:01:57.040 --> 00:02:02.060
Then we will simply return that initializationVector.

32
00:02:02.060 --> 00:02:05.080
So now we can implement our encryption method.

33
00:02:05.080 --> 00:02:08.060
So once again we'll do public static

34
00:02:08.060 --> 00:02:11.030
and we'll get a byte array, and we're going to

35
00:02:11.030 --> 00:02:16.000
performAESEncryption.

36
00:02:16.000 --> 00:02:19.080
We're going to pass it a plainText screen,

37
00:02:19.080 --> 00:02:29.040
a SecretKey and our initializationVector.

38
00:02:29.040 --> 00:02:33.020
Now this will go ahead and throw an exception.

39
00:02:33.020 --> 00:02:36.040
And then we can jump in and actually do our implementation.

40
00:02:36.040 --> 00:02:38.060
And the implementation for this is actually

41
00:02:38.060 --> 00:02:40.050
relatively straightforward.

42
00:02:40.050 --> 00:02:45.010
We're going to create an instance of the cipher engine

43
00:02:45.010 --> 00:02:49.020
by using the cipher.getInstance method,

44
00:02:49.020 --> 00:02:55.060
and we will pass it our AES cipher algorithm.

45
00:02:55.060 --> 00:02:57.080
Now we're going to create our initializationVector

46
00:02:57.080 --> 00:03:04.000
using the ParameterSpec, and we're going to pass into that

47
00:03:04.000 --> 00:03:07.030
our initializationVector.

48
00:03:07.030 --> 00:03:11.040
Now we will do a cipher.init, and we will pass it

49
00:03:11.040 --> 00:03:14.060
the ENCRYPT_MODE.

50
00:03:14.060 --> 00:03:18.020
We will pass it our key, and then we will pass it

51
00:03:18.020 --> 00:03:22.030
our initialization ParameterSpec.

52
00:03:22.030 --> 00:03:26.080
Now we can simply do final on our cipher

53
00:03:26.080 --> 00:03:31.000
passing it the bytes that we actually want to encrypt.

54
00:03:31.000 --> 00:03:35.040
So in this case we'll do plainText.getBytes.

55
00:03:35.040 --> 00:03:38.020
And that's all there is to encryption.

56
00:03:38.020 --> 00:03:40.080
And you'll see that asymmetric encryption

57
00:03:40.080 --> 00:03:43.070
works very much the same way.

58
00:03:43.070 --> 00:03:47.020
Now we're going to create our decryption operation

59
00:03:47.020 --> 00:03:49.020
in order to make sure that we can test this.

60
00:03:49.020 --> 00:03:54.080
So we will create a method called performAESDecryption.

61
00:03:54.080 --> 00:03:58.090
We will pass it a byte array of our cipherText.

62
00:03:58.090 --> 00:04:01.070
We will pass it our SecretKey,

63
00:04:01.070 --> 00:04:07.010
and we will also need to pass it our initializationVector.

64
00:04:07.010 --> 00:04:09.050
And that's an important thing to remember

65
00:04:09.050 --> 00:04:15.060
that you actually need to save that initializationVector.

66
00:04:15.060 --> 00:04:18.020
Once again we'll throw exception.

67
00:04:18.020 --> 00:04:21.000
Now you'll see that it's very much the exact same code

68
00:04:21.000 --> 00:04:22.080
that we did before.

69
00:04:22.080 --> 00:04:25.020
The only difference is is we're instead

70
00:04:25.020 --> 00:04:29.010
of going to initialize it with an encrypt mode,

71
00:04:29.010 --> 00:04:32.070
we will initialize it with a decrypt mode,

72
00:04:32.070 --> 00:04:36.040
and we will simply create a byte array

73
00:04:36.040 --> 00:04:42.040
that is a result, and that equals cipher.dofinal,

74
00:04:42.040 --> 00:04:45.040
passing it to cipherText,

75
00:04:45.040 --> 00:04:49.000
and then we can simply return a new string

76
00:04:49.000 --> 00:04:51.060
that is our result.

77
00:04:51.060 --> 00:04:54.040
So at this point we're actually ready to test it.

78
00:04:54.040 --> 00:04:58.000
So let's open up our test class,

79
00:04:58.000 --> 00:05:04.040
and we're going to create a method with an @Test annotation,

80
00:05:04.040 --> 00:05:11.050
and we will simply call this test AESCryptoRoutine,

81
00:05:11.050 --> 00:05:15.030
and we'll go ahead and let it throw an exception,

82
00:05:15.030 --> 00:05:20.070
and we're going to start with a SecretKey,

83
00:05:20.070 --> 00:05:25.070
call in the utiles to get a SecretKey,

84
00:05:25.070 --> 00:05:33.080
and then we are going to create our initializationVector.

85
00:05:33.080 --> 00:05:35.090
And now we're ready to actually do our encryption.

86
00:05:35.090 --> 00:05:40.020
So we'll start with a plainText string.

87
00:05:40.020 --> 00:05:48.020
"This is the text we are going to hide in plain sight."

88
00:05:48.020 --> 00:05:49.050
Excellent.

89
00:05:49.050 --> 00:05:54.030
So now we will get a byte array that is our cipherText,

90
00:05:54.030 --> 00:05:56.040
and that will come from our

91
00:05:56.040 --> 00:06:02.010
SymmetricEncryptionUtils.performAESEncryption,

92
00:06:02.010 --> 00:06:05.050
passing it to plainText, the key,

93
00:06:05.050 --> 00:06:08.070
and the initializationVector.

94
00:06:08.070 --> 00:06:12.070
We will take that and we will assert that that byte array

95
00:06:12.070 --> 00:06:16.030
is not null.

96
00:06:16.030 --> 00:06:23.090
And we also want to go ahead and do a System.out.println,

97
00:06:23.090 --> 00:06:26.080
once again using our data type converter

98
00:06:26.080 --> 00:06:29.080
to print a hex binary.

99
00:06:29.080 --> 00:06:34.030
The hex binary is going to be our cipherText.

100
00:06:34.030 --> 00:06:42.010
Now we're going to create a string of decryptedText

101
00:06:42.010 --> 00:06:49.030
equal to SymmetricEncryptionUtils.performAESDecryption,

102
00:06:49.030 --> 00:06:53.050
passing it the cipherText, the key,

103
00:06:53.050 --> 00:06:57.010
and the initializationVector once again.

104
00:06:57.010 --> 00:07:03.050
So now we can simply assertEquals our plainText

105
00:07:03.050 --> 00:07:07.010
and our decryptedText.

106
00:07:07.010 --> 00:07:09.090
So now we'll go ahead and run the entire test,

107
00:07:09.090 --> 00:07:13.000
and we should see that both of our unit tests pass.

108
00:07:13.000 --> 00:07:15.010
Which is the indication that everything worked

109
00:07:15.010 --> 00:07:17.000
as we expected it to.

110
00:07:17.000 --> 00:07:19.040
Now if at this point you get an exception

111
00:07:19.040 --> 00:07:22.010
that says illegal key size, that means

112
00:07:22.010 --> 00:07:26.000
that you don't have the unlimited strength JCE

113
00:07:26.000 --> 00:07:28.000
either in your version of the JDK,

114
00:07:28.000 --> 00:07:31.070
or you haven't upgraded to a new enough version of the JDK.

115
00:07:31.070 --> 00:07:33.090
So you need to go ahead and correct that now.

116
00:07:33.090 --> 00:07:37.070
You'll see that I'm using one eight, version 162,

117
00:07:37.070 --> 00:07:41.020
and you can see that right here in my console.

118
00:07:41.020 --> 00:07:43.080
So with that being said now, we've actually encrypted

119
00:07:43.080 --> 00:07:47.000
and decrypted text using AES,

120
00:07:47.000 --> 00:07:49.070
which is the essence of how all symmetric encryption

121
00:07:49.070 --> 00:07:51.000
actually works.

