WEBVTT
1
00:00:00.050 --> 00:00:02.060
- [Instructor] The Java cryptography architecture

2
00:00:02.060 --> 00:00:05.080
is really the heart and soul of Java encryption,

3
00:00:05.080 --> 00:00:10.030
decryption, hashing, secure random, and a myriad

4
00:00:10.030 --> 00:00:14.030
of other engines that allow us to do cryptographic functions

5
00:00:14.030 --> 00:00:17.060
with the Java programming language.

6
00:00:17.060 --> 00:00:22.020
Like much of Java, it provides a standard API.

7
00:00:22.020 --> 00:00:25.090
Now it's designed to allow JRE providers

8
00:00:25.090 --> 00:00:28.050
to create their own implementation

9
00:00:28.050 --> 00:00:31.060
of the architecture itself.

10
00:00:31.060 --> 00:00:34.030
Essentially, the architecture provides the engines

11
00:00:34.030 --> 00:00:38.050
and the API, and each individual JRE provider

12
00:00:38.050 --> 00:00:42.040
can create their own specific implementation

13
00:00:42.040 --> 00:00:46.070
based on the algorithms that they wish to support.

14
00:00:46.070 --> 00:00:50.030
Again, it provides a standard engine API

15
00:00:50.030 --> 00:00:53.030
of supported operations, and this is key

16
00:00:53.030 --> 00:00:56.050
when you start dealing with multiple providers at once,

17
00:00:56.050 --> 00:01:01.040
because each provider may implement different operations

18
00:01:01.040 --> 00:01:05.040
but all of them conform to the same API.

19
00:01:05.040 --> 00:01:10.010
The provider structure, or SPI, as this entails

20
00:01:10.010 --> 00:01:14.040
within Java allows each provider to be on the class path

21
00:01:14.040 --> 00:01:16.010
at the same time.

22
00:01:16.010 --> 00:01:20.050
Again, JCA provides pure API, and the various

23
00:01:20.050 --> 00:01:23.030
implementations or providers provide

24
00:01:23.030 --> 00:01:26.030
their specific algorithms.

25
00:01:26.030 --> 00:01:29.090
Providers can vary on the algorithms that they support.

26
00:01:29.090 --> 00:01:33.050
They can support the same or different algorithms

27
00:01:33.050 --> 00:01:37.050
and sometimes they do that at the same time.

28
00:01:37.050 --> 00:01:41.010
Providers vary by JRE vendor as well,

29
00:01:41.010 --> 00:01:43.050
and there's also third-party providers

30
00:01:43.050 --> 00:01:46.030
that you may get exposed to.

31
00:01:46.030 --> 00:01:48.060
Now, I just kind of want to give a structure

32
00:01:48.060 --> 00:01:53.010
of how the JCA works with your application code.

33
00:01:53.010 --> 00:01:56.060
So as a developer, you're writing an application

34
00:01:56.060 --> 00:01:59.070
in which you want to do cryptographic functions.

35
00:01:59.070 --> 00:02:04.060
So you consume the API of the JCA.

36
00:02:04.060 --> 00:02:09.000
During runtime, the JRE that is actually executing

37
00:02:09.000 --> 00:02:12.040
your byte code has one or more providers

38
00:02:12.040 --> 00:02:18.010
that provide the implementation that the JCA APIs expose.

39
00:02:18.010 --> 00:02:21.020
And as such, the developer does not necessarily

40
00:02:21.020 --> 00:02:25.030
need to know the provider that is providing the algorithm.

41
00:02:25.030 --> 00:02:28.010
They simply need to know that that algorithm exists

42
00:02:28.010 --> 00:02:31.000
on the class path at runtime.

