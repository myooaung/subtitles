WEBVTT
1
00:00:00.050 --> 00:00:03.030
- [Announcer] If you do any research on Java Cryptography,

2
00:00:03.030 --> 00:00:05.080
you're gonna run into people suggesting that you use

3
00:00:05.080 --> 00:00:10.010
Bouncy Castle in order to solve all of your crypto needs.

4
00:00:10.010 --> 00:00:13.000
And indeed I wouldn't be disappointed if you did that,

5
00:00:13.000 --> 00:00:16.080
even after watching all this information on the JCA.

6
00:00:16.080 --> 00:00:18.090
However, there's a few things that we need to talk about

7
00:00:18.090 --> 00:00:21.030
about Bouncy Castle in order for you to make

8
00:00:21.030 --> 00:00:23.030
an informed decision.

9
00:00:23.030 --> 00:00:25.050
First of all, what is Bouncy Castle?

10
00:00:25.050 --> 00:00:28.000
It's an open-source project that's run

11
00:00:28.000 --> 00:00:30.090
by an Australian charity organization called

12
00:00:30.090 --> 00:00:33.010
the Legion of Bouncy Castle.

13
00:00:33.010 --> 00:00:36.050
Now they offer both Java and C# implementations

14
00:00:36.050 --> 00:00:40.050
of a wide variety of crypto functions including

15
00:00:40.050 --> 00:00:44.030
everything we've looked at so far in this course.

16
00:00:44.030 --> 00:00:47.000
Now at its core from the Java prospective,

17
00:00:47.000 --> 00:00:50.060
it is a full JCE provider.

18
00:00:50.060 --> 00:00:55.020
It's also a full crypto library that can stand on its own.

19
00:00:55.020 --> 00:01:00.000
It has a very robust API for dealing with things like TLS

20
00:01:00.000 --> 00:01:03.040
and certificates, and that's actually one of the points

21
00:01:03.040 --> 00:01:07.010
of which I would always recommend using Bouncy Castle,

22
00:01:07.010 --> 00:01:11.010
if you are gonna be dealing with X.509 certs

23
00:01:11.010 --> 00:01:14.070
or any other type of certificate in which you need

24
00:01:14.070 --> 00:01:16.070
to actually manipulate, build,

25
00:01:16.070 --> 00:01:19.060
and transpose those certificates.

26
00:01:19.060 --> 00:01:23.020
Bouncy Castle also offers much, much more

27
00:01:23.020 --> 00:01:25.070
than what we've talked about here.

28
00:01:25.070 --> 00:01:29.010
So why would you even consider using it?

29
00:01:29.010 --> 00:01:31.090
Well other than what I've talked about about the robustness,

30
00:01:31.090 --> 00:01:33.020
there are some things that are

31
00:01:33.020 --> 00:01:37.000
just easier than when using pure Java,

32
00:01:37.000 --> 00:01:40.020
such as certificates and TLS.

33
00:01:40.020 --> 00:01:41.090
Often Bouncy Castle will have

34
00:01:41.090 --> 00:01:47.060
much more robust algorithm support than the default JCE.

35
00:01:47.060 --> 00:01:50.040
There's also a much broader set of functions for dealing

36
00:01:50.040 --> 00:01:55.000
with things like PGP and SSH, and the list goes on and on.

37
00:01:55.000 --> 00:01:58.040
But one thing to note, and this it the biggest detriment

38
00:01:58.040 --> 00:02:01.080
of Bouncy Castle, is it's big.

39
00:02:01.080 --> 00:02:04.060
It is a very big jar.

40
00:02:04.060 --> 00:02:08.060
And if you're only doing basic functionality like AES

41
00:02:08.060 --> 00:02:12.090
or message digest or hashing, there's just really no reason

42
00:02:12.090 --> 00:02:15.040
to bring it in to the class path.

43
00:02:15.040 --> 00:02:19.060
But there are functions that you wanna use Bouncy Castle.

44
00:02:19.060 --> 00:02:22.010
So if you're out looking on Stack Overflow and you wanna see

45
00:02:22.010 --> 00:02:24.080
how to do something, and the first answer that comes

46
00:02:24.080 --> 00:02:29.070
up is use Bouncy Castle, don't immediately discredit that,

47
00:02:29.070 --> 00:02:31.090
but take it with a grain of salt.

48
00:02:31.090 --> 00:02:36.050
There are very valid use cases for Bouncy Castle,

49
00:02:36.050 --> 00:02:39.030
but it is not a silver bullet that solves all

50
00:02:39.030 --> 00:02:41.000
of the crypto needs that are out there.

