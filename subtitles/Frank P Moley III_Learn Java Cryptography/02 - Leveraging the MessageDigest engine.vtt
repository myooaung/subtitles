WEBVTT
1
00:00:00.050 --> 00:00:02.000
- So now that we've talked a little bit about

2
00:00:02.000 --> 00:00:04.000
what cryptographic hashes are,

3
00:00:04.000 --> 00:00:06.020
let's actually jump into the JCA,

4
00:00:06.020 --> 00:00:08.060
and leverage the message digest engine

5
00:00:08.060 --> 00:00:11.030
to create a hash.

6
00:00:11.030 --> 00:00:14.060
In your IDE, I'd like you to open up source, main, Java.

7
00:00:14.060 --> 00:00:17.090
And in the com.frankmoley.crypto package,

8
00:00:17.090 --> 00:00:23.000
let's create a new subpackage, called hash.

9
00:00:23.000 --> 00:00:27.010
And in our hash package, let's create a new Java class,

10
00:00:27.010 --> 00:00:29.050
called HashUtils.

11
00:00:29.050 --> 00:00:32.030
And now, just like we've done a couple times, here,

12
00:00:32.030 --> 00:00:36.080
I want to create a private static final String.

13
00:00:36.080 --> 00:00:41.090
We will call that SHA2_ALGORITHM,

14
00:00:41.090 --> 00:00:46.060
and we will set that equal to SHA-256.

15
00:00:46.060 --> 00:00:49.090
Now, one of the attacks on a hash

16
00:00:49.090 --> 00:00:51.070
is using a rainbow table,

17
00:00:51.070 --> 00:00:55.090
which is a pre-computed set of hash chains.

18
00:00:55.090 --> 00:00:57.090
We're gonna prevent that by using salt.

19
00:00:57.090 --> 00:00:59.040
So we need to create a method

20
00:00:59.040 --> 00:01:02.040
to create a random salt value.

21
00:01:02.040 --> 00:01:04.030
So let's do that.

22
00:01:04.030 --> 00:01:11.090
Public static byte array, generateRandomSalt.

23
00:01:11.090 --> 00:01:15.060
Now, in order to generate random bytes,

24
00:01:15.060 --> 00:01:19.060
we would create a byte array, and call it salt,

25
00:01:19.060 --> 00:01:23.070
and we're gonna create a 16-byte array.

26
00:01:23.070 --> 00:01:26.080
Now we will leverage, from Java security,

27
00:01:26.080 --> 00:01:32.050
the SecureRandom class,

28
00:01:32.050 --> 00:01:33.060
and then from that,

29
00:01:33.060 --> 00:01:36.030
we will use the nextBytes method,

30
00:01:36.030 --> 00:01:39.020
and pass it in the salt value,

31
00:01:39.020 --> 00:01:41.080
and now we can simply return our salt.

32
00:01:41.080 --> 00:01:43.050
So, at this point, we have a method

33
00:01:43.050 --> 00:01:47.000
that will give us 16 bytes of salt.

34
00:01:47.000 --> 00:01:47.080
Now, in the real world,

35
00:01:47.080 --> 00:01:50.060
that salt is gonna have to be stored somewhere

36
00:01:50.060 --> 00:01:52.080
in case you ever need to do equality

37
00:01:52.080 --> 00:01:54.010
on an original text

38
00:01:54.010 --> 00:01:57.000
and then the hash of that original text.

39
00:01:57.000 --> 00:01:59.060
But more on that later when we get into passwords.

40
00:01:59.060 --> 00:02:03.080
So, for now, we'll just do public static byte array,

41
00:02:03.080 --> 00:02:07.090
createSHA2Hash,

42
00:02:07.090 --> 00:02:11.000
and we will pass it an input String,

43
00:02:11.000 --> 00:02:14.020
and then a byte array for our salt.

44
00:02:14.020 --> 00:02:16.060
And we'll go ahead and make this throw an exception,

45
00:02:16.060 --> 00:02:20.020
so we don't have to deal with that, here in a moment.

46
00:02:20.020 --> 00:02:21.000
All right.

47
00:02:21.000 --> 00:02:22.030
Let me shrink this down just a touch here,

48
00:02:22.030 --> 00:02:24.080
so we can see what we're actually gonna do.

49
00:02:24.080 --> 00:02:27.070
And I'm gonna create a byte array output string,

50
00:02:27.070 --> 00:02:30.080
and this is just a little trick that I learned,

51
00:02:30.080 --> 00:02:34.070
to copy two sets of bytes into one,

52
00:02:34.070 --> 00:02:37.070
which is how the salt value gets added

53
00:02:37.070 --> 00:02:42.020
to an original input, in order to do the hashing.

54
00:02:42.020 --> 00:02:45.030
So we'll create that new byte stream,

55
00:02:45.030 --> 00:02:51.020
and to that byte stream, we will write our salt.

56
00:02:51.020 --> 00:02:54.040
Then we will simply take that same byte stream,

57
00:02:54.040 --> 00:02:59.010
and we will write our input.getBytes.

58
00:02:59.010 --> 00:03:02.000
So now we've computed a value that is the salt,

59
00:03:02.000 --> 00:03:05.030
plus the input.

60
00:03:05.030 --> 00:03:08.060
And finally,

61
00:03:08.060 --> 00:03:10.050
we will get the valueToHash,

62
00:03:10.050 --> 00:03:13.080
which is the combination of those two,

63
00:03:13.080 --> 00:03:18.010
from the byteStream.toByteArray.

64
00:03:18.010 --> 00:03:20.030
So now we can go and create an instance

65
00:03:20.030 --> 00:03:23.040
of a MessageDigest.

66
00:03:23.040 --> 00:03:24.070
And like we're seen before,

67
00:03:24.070 --> 00:03:27.050
we are going to call the get instance method,

68
00:03:27.050 --> 00:03:34.010
statically, and we will pass it, our SHA2_ALGORITHM.

69
00:03:34.010 --> 00:03:40.010
And now we can simply return the messageDigest.digest,

70
00:03:40.010 --> 00:03:43.090
passing it our valueToHash,

71
00:03:43.090 --> 00:03:46.020
and that's all there is to it.

72
00:03:46.020 --> 00:03:48.000
Let's go ahead and create a test class, now,

73
00:03:48.000 --> 00:03:51.040
so we can actually see this in action.

74
00:03:51.040 --> 00:03:54.060
I will use both methods to do that.

75
00:03:54.060 --> 00:03:57.040
Now, for our generateRandomSalt, we will simply

76
00:03:57.040 --> 00:04:00.050
create a byte array called salt,

77
00:04:00.050 --> 00:04:06.000
equal to HashUtils.generateRandomSalt.

78
00:04:06.000 --> 00:04:10.020
We will assert that it is not null,

79
00:04:10.020 --> 00:04:12.040
passing it the salt,

80
00:04:12.040 --> 00:04:14.030
and just because I'd like to see how it looks

81
00:04:14.030 --> 00:04:16.040
when we print it out,

82
00:04:16.040 --> 00:04:20.000
I will do a System.out.println,

83
00:04:20.000 --> 00:04:23.020
using the DataTypeConverter class,

84
00:04:23.020 --> 00:04:26.050
I will print the hex binary of our salt.

85
00:04:26.050 --> 00:04:30.000
And that's all we need to do on that test.

86
00:04:30.000 --> 00:04:34.000
So now, let's actually do the hash test.

87
00:04:34.000 --> 00:04:39.090
So, once again, we will create a salt.

88
00:04:39.090 --> 00:04:42.010
Now I'm gonna create a random string

89
00:04:42.010 --> 00:04:44.000
in order to hash it.

90
00:04:44.000 --> 00:04:46.000
So, valueToHash, equals,

91
00:04:46.000 --> 00:04:49.020
I'm gonna use the UUID class

92
00:04:49.020 --> 00:04:56.050
to create a random UUID, and then just toString on that.

93
00:04:56.050 --> 00:04:59.080
Now, I'm gonna actually go calculate our hash,

94
00:04:59.080 --> 00:05:05.040
by calling in my HashUtils.createSHA2Hash,

95
00:05:05.040 --> 00:05:08.000
now we will pass it our valueToHash,

96
00:05:08.000 --> 00:05:10.030
and then our salt.

97
00:05:10.030 --> 00:05:12.090
Now, this method, actually, will throw an exception.

98
00:05:12.090 --> 00:05:17.070
So we'll just add that to the signature of our test, here.

99
00:05:17.070 --> 00:05:23.030
Now let's make sure that our hash is not null.

100
00:05:23.030 --> 00:05:29.000
And let's go ahead and compute our hash again,

101
00:05:29.000 --> 00:05:31.090
just to ensure that if we pass in

102
00:05:31.090 --> 00:05:35.020
the exact same valueToHash,

103
00:05:35.020 --> 00:05:39.020
and the exact same salt, that we can now do

104
00:05:39.020 --> 00:05:43.020
an assertEquals on them.

105
00:05:43.020 --> 00:05:45.030
Now, here's a little caveat, because we're dealing

106
00:05:45.030 --> 00:05:47.000
with byte arrays.

107
00:05:47.000 --> 00:05:50.040
We're gonna actually need to go print the HexBinary,

108
00:05:50.040 --> 00:05:53.000
so that we can compare two Strings.

109
00:05:53.000 --> 00:05:57.000
So we will do the hash, and then likewise,

110
00:05:57.000 --> 00:06:01.040
we will call the DataTypeConverter.printHexBinary

111
00:06:01.040 --> 00:06:04.040
on hash2, and those should be equal,

112
00:06:04.040 --> 00:06:06.000
when we run our test.

113
00:06:06.000 --> 00:06:10.040
So let's go ahead and execute our test, now.

114
00:06:10.040 --> 00:06:11.080
So what we see here in our console output

115
00:06:11.080 --> 00:06:14.080
is the actual hexadecimal value of the salt

116
00:06:14.080 --> 00:06:16.080
from our first test, and you'll see

117
00:06:16.080 --> 00:06:18.070
that both tests passed.

118
00:06:18.070 --> 00:06:20.060
Now, you could go a lot further than this,

119
00:06:20.060 --> 00:06:23.030
if you really wanted to see how hashing works.

120
00:06:23.030 --> 00:06:25.060
You could have different variations of input,

121
00:06:25.060 --> 00:06:28.080
and salt, and check equality, and not equals,

122
00:06:28.080 --> 00:06:31.020
but I'll leave that to you to do on your own time,

123
00:06:31.020 --> 00:06:34.000
to really play with how the hash functions work.

