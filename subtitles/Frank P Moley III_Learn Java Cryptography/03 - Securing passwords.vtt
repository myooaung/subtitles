WEBVTT
1
00:00:00.050 --> 00:00:03.050
- [Instructor] Properly hashing passwords is a skill

2
00:00:03.050 --> 00:00:06.040
that every developer that writes a public-facing

3
00:00:06.040 --> 00:00:09.090
web application needs to fully understand,

4
00:00:09.090 --> 00:00:12.010
unless they're using OAuth for everything

5
00:00:12.010 --> 00:00:16.040
and very few of us are using OAuth for all of our use cases.

6
00:00:16.040 --> 00:00:18.070
So as such, even though we are going to step away

7
00:00:18.070 --> 00:00:21.030
from the JCA just a little bit here,

8
00:00:21.030 --> 00:00:24.070
this really is very critical so the developers

9
00:00:24.070 --> 00:00:29.000
understand the proper way to hash passwords.

10
00:00:29.000 --> 00:00:31.000
I want to baseline a little bit here

11
00:00:31.000 --> 00:00:32.080
about what is the proper way to handle

12
00:00:32.080 --> 00:00:37.000
the passwords in a modern internet connected system.

13
00:00:37.000 --> 00:00:41.050
First and foremost, never ever ever ever store

14
00:00:41.050 --> 00:00:43.040
encrypted passwords.

15
00:00:43.040 --> 00:00:45.090
There is no legitimate reason why you need

16
00:00:45.090 --> 00:00:49.000
to keep a password of your customer

17
00:00:49.000 --> 00:00:51.080
in the encrypted fashion, ever.

18
00:00:51.080 --> 00:00:54.020
If you need to use their username and password

19
00:00:54.020 --> 00:00:58.000
to authenticate to another system, you should be using Oauth

20
00:00:58.000 --> 00:01:01.010
because you shouldn't have their username and password

21
00:01:01.010 --> 00:01:03.050
freely available to use.

22
00:01:03.050 --> 00:01:07.020
Likewise, if you need to have a reset password functionality

23
00:01:07.020 --> 00:01:10.000
or a forgot password functionality,

24
00:01:10.000 --> 00:01:11.090
the proper way to do that is to send them

25
00:01:11.090 --> 00:01:15.010
one-time tokens or use some sort of a two factor

26
00:01:15.010 --> 00:01:17.080
strategy in order to reset their password.

27
00:01:17.080 --> 00:01:20.030
You don't ever need to send them an email

28
00:01:20.030 --> 00:01:22.000
where you've decrypted their password

29
00:01:22.000 --> 00:01:23.060
and put it in plain text.

30
00:01:23.060 --> 00:01:27.000
That's just a sign of a bad site.

31
00:01:27.000 --> 00:01:30.070
You should also never use broken hash algorithms.

32
00:01:30.070 --> 00:01:33.030
If you have a site that's public facing

33
00:01:33.030 --> 00:01:37.080
or really even private as well, that is using an MD5 hash

34
00:01:37.080 --> 00:01:42.040
for your passwords, stop now and fix your problem.

35
00:01:42.040 --> 00:01:46.020
If you get hacked and your password data gets dumped,

36
00:01:46.020 --> 00:01:49.060
not only will people know the passwords of your customers,

37
00:01:49.060 --> 00:01:53.000
because like I said, MD5 is broken, but also it's going

38
00:01:53.000 --> 00:01:56.010
to make you a little bit embarrassed when you name

39
00:01:56.010 --> 00:01:58.060
kinda gets dragged through the mud there because of the

40
00:01:58.060 --> 00:02:03.000
password hashing algorithm you're using.

41
00:02:03.000 --> 00:02:08.060
And finally, never ever ever ever ever store your passwords

42
00:02:08.060 --> 00:02:10.010
in plain text.

43
00:02:10.010 --> 00:02:12.090
I can't say that enough times.

44
00:02:12.090 --> 00:02:16.090
You should never ever keep a password in plain text,

45
00:02:16.090 --> 00:02:21.050
period, end of story, never in logs, never in databases,

46
00:02:21.050 --> 00:02:25.020
no where; that's actually worse than encrypted passwords

47
00:02:25.020 --> 00:02:27.040
and those are pretty bad on their own right.

48
00:02:27.040 --> 00:02:31.060
So do not store passwords in plain text.

49
00:02:31.060 --> 00:02:33.010
Now let's talk about what makes a

50
00:02:33.010 --> 00:02:35.080
good password hashing algorithm.

51
00:02:35.080 --> 00:02:38.080
First and foremost, it is not cracked.

52
00:02:38.080 --> 00:02:41.020
There is no indication that the password algorithm

53
00:02:41.020 --> 00:02:45.080
you are using has been cracked or has the possibility

54
00:02:45.080 --> 00:02:49.050
of being cracked, based on theoretical knowledge.

55
00:02:49.050 --> 00:02:53.030
For instance, SHA1 is considered cracked.

56
00:02:53.030 --> 00:02:58.010
SHA2 theoretically is not considered cracked.

57
00:02:58.010 --> 00:03:01.010
However, it suffers a different flaw

58
00:03:01.010 --> 00:03:04.050
and that is it susceptible to brute force

59
00:03:04.050 --> 00:03:07.090
and that goes hand in hand with its inherent slowness.

60
00:03:07.090 --> 00:03:10.090
A hash algorithm, although it is easy to compute,

61
00:03:10.090 --> 00:03:14.050
does not necessarily have to be fast.

62
00:03:14.050 --> 00:03:18.030
Some hash algorithms has built in slowness

63
00:03:18.030 --> 00:03:22.010
designed into the algorithm and something that we want.

64
00:03:22.010 --> 00:03:25.090
If it takes your user one second to authenticate

65
00:03:25.090 --> 00:03:29.010
to your system, they're going to be fine.

66
00:03:29.010 --> 00:03:33.010
If it takes one second between hash attempts,

67
00:03:33.010 --> 00:03:37.000
you are going to dramatically slow down a brute force attack

68
00:03:37.000 --> 00:03:40.030
and that actually is a good thing because if I can

69
00:03:40.030 --> 00:03:44.040
cycle through one hash a second, versus thousands

70
00:03:44.040 --> 00:03:47.050
of hashes a second, you can guess which one

71
00:03:47.050 --> 00:03:49.080
I've got a better chance of attacking

72
00:03:49.080 --> 00:03:53.060
and that's where SHA256 has one of it's flaws

73
00:03:53.060 --> 00:03:57.060
because I can script so many brute force attacks

74
00:03:57.060 --> 00:04:02.080
against the system because there is no inherent slowness.

75
00:04:02.080 --> 00:04:06.050
So, as I've alluded to, MD5 and SHA1 should both

76
00:04:06.050 --> 00:04:10.020
be considered cracked; they're also very fast,

77
00:04:10.020 --> 00:04:12.080
which makes them bad choices in both rights.

78
00:04:12.080 --> 00:04:18.040
SHA2 is fast, therefore, not good.

79
00:04:18.040 --> 00:04:21.040
SHA3 has not officially been standardized

80
00:04:21.040 --> 00:04:24.050
and it's also a fast hash algorithm,

81
00:04:24.050 --> 00:04:26.090
again not good for passwords,

82
00:04:26.090 --> 00:04:30.060
but good for other cryptographic needs.

83
00:04:30.060 --> 00:04:33.080
So where does that leave us in the realm of possibilities?

84
00:04:33.080 --> 00:04:37.020
The first is PBKDF2.

85
00:04:37.020 --> 00:04:40.080
This is a valid algorithm but it's not that popular

86
00:04:40.080 --> 00:04:43.030
in mainstream worlds today.

87
00:04:43.030 --> 00:04:45.040
The most popular and the one that we're going

88
00:04:45.040 --> 00:04:48.040
to talk about is BCrypt.

89
00:04:48.040 --> 00:04:51.010
There's also a hash algorithm call SCrypt

90
00:04:51.010 --> 00:04:53.010
that is similar in its own rights to BCrypt

91
00:04:53.010 --> 00:04:55.010
but it is inherently different

92
00:04:55.010 --> 00:04:57.050
in the way that it operates.

93
00:04:57.050 --> 00:05:01.030
We're not going to talk about PBKDF2 or SCrypt,

94
00:05:01.030 --> 00:05:03.020
but we are going to focus on BCrypt

95
00:05:03.020 --> 00:05:06.030
and I highly encourage you to learn to use this

96
00:05:06.030 --> 00:05:08.090
whenever you need to hash a password

97
00:05:08.090 --> 00:05:11.010
for one of your customers.

98
00:05:11.010 --> 00:05:15.030
I want to talk briefly about the concept of entrophy.

99
00:05:15.030 --> 00:05:19.040
Now think about your password generation strategy.

100
00:05:19.040 --> 00:05:22.010
Often we have some sort of replacement scheme

101
00:05:22.010 --> 00:05:25.070
where we replace letters with numbers or symbols

102
00:05:25.070 --> 00:05:29.080
and we add some numbers because of relatively complex

103
00:05:29.080 --> 00:05:34.040
password algorithms that many sites force upon us.

104
00:05:34.040 --> 00:05:38.010
Unfortunately, humans struggle with random passwords

105
00:05:38.010 --> 00:05:42.030
and as such, those patterns tend to take hold.

106
00:05:42.030 --> 00:05:46.010
For instance, people with randomized birthday strings

107
00:05:46.010 --> 00:05:49.070
become a very common password that they use.

108
00:05:49.070 --> 00:05:52.020
Now sure they do replacements and upper cases

109
00:05:52.020 --> 00:05:54.080
and lower cases but you will find that they use

110
00:05:54.080 --> 00:05:59.030
very similar patterns every time they create a password.

111
00:05:59.030 --> 00:06:02.080
Real password complexity doesn't come from

112
00:06:02.080 --> 00:06:06.000
making us do upper case and lower case and numbers,

113
00:06:06.000 --> 00:06:09.080
it comes from length and specifically,

114
00:06:09.080 --> 00:06:12.090
it comes from entrophy and entrophy

115
00:06:12.090 --> 00:06:18.000
is more impacted by length than by character sets.

116
00:06:18.000 --> 00:06:22.040
Now longer phrases of real words are actually easier

117
00:06:22.040 --> 00:06:26.060
for humans to remember, but they're harder

118
00:06:26.060 --> 00:06:31.060
for computers to brute force because of the entrophy.

119
00:06:31.060 --> 00:06:35.050
So instead of forcing your customers and your clients

120
00:06:35.050 --> 00:06:38.060
to use patterns that don't make sense to them

121
00:06:38.060 --> 00:06:41.020
and are easy for systems to crack,

122
00:06:41.020 --> 00:06:45.040
consider allowing them to have very long common phrases

123
00:06:45.040 --> 00:06:48.070
of words that make no sense together but to them,

124
00:06:48.070 --> 00:06:51.000
are very easy to remember.

