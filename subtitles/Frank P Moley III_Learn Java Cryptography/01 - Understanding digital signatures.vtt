WEBVTT
1
00:00:00.050 --> 00:00:03.000
- [Instructor] Digital signatures are a very powerful

2
00:00:03.000 --> 00:00:06.050
construct when dealing with the Java crypto libraries,

3
00:00:06.050 --> 00:00:08.010
and I wanna spend a little bit of time

4
00:00:08.010 --> 00:00:11.030
and talk about digital signatures and how they're used

5
00:00:11.030 --> 00:00:13.080
and what their purposes are.

6
00:00:13.080 --> 00:00:14.080
Before we get too deep into that,

7
00:00:14.080 --> 00:00:18.040
let's talk about what a digital signature actually is.

8
00:00:18.040 --> 00:00:22.020
Essentially, it's an asymmetrically encrypted hash

9
00:00:22.020 --> 00:00:24.010
of a digital payload.

10
00:00:24.010 --> 00:00:25.060
Now, what does that really mean?

11
00:00:25.060 --> 00:00:28.010
Essentially, we get a bunch of bytes,

12
00:00:28.010 --> 00:00:31.090
using the private key, they can then be verified

13
00:00:31.090 --> 00:00:34.020
by decrypting using the public key

14
00:00:34.020 --> 00:00:37.000
and then comparing the hashes.

15
00:00:37.000 --> 00:00:40.090
This is essentially a value that can provide a guarantee

16
00:00:40.090 --> 00:00:42.070
of authenticity.

17
00:00:42.070 --> 00:00:46.030
So, if I send you a message with a digital signature

18
00:00:46.030 --> 00:00:50.030
and you use my public key to verify the signature,

19
00:00:50.030 --> 00:00:54.010
you are guaranteed that that message came from me.

20
00:00:54.010 --> 00:00:55.090
Likewise, this value can be used

21
00:00:55.090 --> 00:01:00.010
to provide a mechanism of nonrepudiation,

22
00:01:00.010 --> 00:01:03.040
essentially saying that you got the message from me.

23
00:01:03.040 --> 00:01:08.000
There is no way for me to then say that I didn't send it

24
00:01:08.000 --> 00:01:10.050
because by using the digital signature,

25
00:01:10.050 --> 00:01:12.080
you guarantee that the signature was created

26
00:01:12.080 --> 00:01:16.080
with my private key, and as long as that key is private,

27
00:01:16.080 --> 00:01:19.000
there's no way that anybody else could've generated

28
00:01:19.000 --> 00:01:21.030
that digital signature.

29
00:01:21.030 --> 00:01:24.010
And finally, it's a value that can provide a guarantee

30
00:01:24.010 --> 00:01:27.080
of integrity, and often we see this with the downloading

31
00:01:27.080 --> 00:01:32.020
of binaries from the internet onto people's computers.

32
00:01:32.020 --> 00:01:36.000
By using a digital signature with that download,

33
00:01:36.000 --> 00:01:40.060
you can guarantee that the file was not manipulated

34
00:01:40.060 --> 00:01:45.010
as long as you use my public key to verify the hash

35
00:01:45.010 --> 00:01:47.060
because the hash that you compute will be the same

36
00:01:47.060 --> 00:01:52.010
as the hash that I computed and then encrypted.

37
00:01:52.010 --> 00:01:55.070
Now, how is a digital signature calculated?

38
00:01:55.070 --> 00:01:58.050
We start with an asymmetric key pair.

39
00:01:58.050 --> 00:02:01.000
Now, in our examples, we're gonna use RSA,

40
00:02:01.000 --> 00:02:04.010
but often, this is done with elliptical curve cryptography,

41
00:02:04.010 --> 00:02:07.050
especially in IoT devices.

42
00:02:07.050 --> 00:02:09.080
Then I'm gonna take the digital payload

43
00:02:09.080 --> 00:02:12.030
and I'm gonna create a hash of that.

44
00:02:12.030 --> 00:02:17.000
Often, we'll use something like SHA-256 because of its speed

45
00:02:17.000 --> 00:02:21.050
and it also is a cryptographically secure hash.

46
00:02:21.050 --> 00:02:23.080
We will then encrypt that hash

47
00:02:23.080 --> 00:02:28.010
with the private key from the asymmetric key pair.

48
00:02:28.010 --> 00:02:31.060
Now, because I'm going to publish my public key,

49
00:02:31.060 --> 00:02:35.080
you will take the digital signature and the binary,

50
00:02:35.080 --> 00:02:39.050
you will decrypt the digital signature

51
00:02:39.050 --> 00:02:41.030
as well as hash the binary,

52
00:02:41.030 --> 00:02:45.030
and then compare those two hashes to ensure

53
00:02:45.030 --> 00:02:49.000
that they are indeed the same.

54
00:02:49.000 --> 00:02:52.070
So, let's talk about that from a real-world perspective.

55
00:02:52.070 --> 00:02:54.090
So, from the Alice and Bob example,

56
00:02:54.090 --> 00:02:58.000
Alice will calculate a hash of her message.

57
00:02:58.000 --> 00:03:02.070
Alice then encrypts that hash using her private key

58
00:03:02.070 --> 00:03:06.060
and sends the signature in the message to Bob.

59
00:03:06.060 --> 00:03:10.020
Bob also then hashes the message.

60
00:03:10.020 --> 00:03:13.090
Bob then decrypts the signature with Alice's public key

61
00:03:13.090 --> 00:03:16.030
and compares the two hashes.

62
00:03:16.030 --> 00:03:18.060
Now, I'm kinda going over this a few times

63
00:03:18.060 --> 00:03:20.050
because this is one of the areas in crypto

64
00:03:20.050 --> 00:03:24.000
where I feel that people get very confused, very quick

65
00:03:24.000 --> 00:03:26.020
because we're dealing with hashes

66
00:03:26.020 --> 00:03:28.010
and public key encryption.

67
00:03:28.010 --> 00:03:31.010
So, it really is important to understand the flow

68
00:03:31.010 --> 00:03:33.070
so that you don't get false results downstream

69
00:03:33.070 --> 00:03:36.040
because you're using the wrong pieces of data

70
00:03:36.040 --> 00:03:38.090
in order to either create the digital signature

71
00:03:38.090 --> 00:03:42.050
or verify its validity.

72
00:03:42.050 --> 00:03:45.020
Now, I do wanna talk a little bit about some real-life uses

73
00:03:45.020 --> 00:03:47.090
and some of these I've actually encountered in

74
00:03:47.090 --> 00:03:50.030
my day-to-day life and work.

75
00:03:50.030 --> 00:03:53.030
The first is binary program signing.

76
00:03:53.030 --> 00:03:55.080
I mentioned a little bit about IoT devices,

77
00:03:55.080 --> 00:04:00.060
and often hardware programs in general will have a process

78
00:04:00.060 --> 00:04:04.010
by which digitally signed binaries get uploaded

79
00:04:04.010 --> 00:04:06.080
as part of the firmware upgrade process

80
00:04:06.080 --> 00:04:10.030
and the only way that the device will accept those binaries

81
00:04:10.030 --> 00:04:13.030
is if they are signed by a trusted authority,

82
00:04:13.030 --> 00:04:16.000
be it the vendor that actually created them.

83
00:04:16.000 --> 00:04:18.080
So, binary programs use signing

84
00:04:18.080 --> 00:04:21.050
for both authenticity and integrity

85
00:04:21.050 --> 00:04:25.090
to ensure that someone hasn't modified that data.

86
00:04:25.090 --> 00:04:28.060
It's also used a lot for message signing,

87
00:04:28.060 --> 00:04:32.050
especially around legal and financial documentation.

88
00:04:32.050 --> 00:04:35.040
It allows us to get nonrepudiation, integrity,

89
00:04:35.040 --> 00:04:39.040
and authenticity across those messages.

90
00:04:39.040 --> 00:04:41.010
In fact, there's entire industries

91
00:04:41.010 --> 00:04:44.000
of electronic signatures in jurisdictions

92
00:04:44.000 --> 00:04:45.090
where those are considered valid

93
00:04:45.090 --> 00:04:48.060
that use digital signatures as a method

94
00:04:48.060 --> 00:04:52.080
to confirm that you actually signed the document.

95
00:04:52.080 --> 00:04:55.040
And a use case that I see often in photography

96
00:04:55.040 --> 00:04:57.090
is the concept of watermarking.

97
00:04:57.090 --> 00:05:01.000
By using digital signatures, you could actually ensure

98
00:05:01.000 --> 00:05:03.070
that the photo that you took is yours

99
00:05:03.070 --> 00:05:06.000
and you can use that watermark to also ensure

100
00:05:06.000 --> 00:05:09.000
that others aren't stealing your copyrighted work.

