WEBVTT
1
00:00:00.050 --> 00:00:01.070
- [Narrator] Now that we have a key pair,

2
00:00:01.070 --> 00:00:03.060
it's time to implement our encryption

3
00:00:03.060 --> 00:00:08.060
and decryption routines using RSA.

4
00:00:08.060 --> 00:00:10.090
Let's jump back into our IDE

5
00:00:10.090 --> 00:00:13.070
and open up source main Java.

6
00:00:13.070 --> 00:00:17.030
And now, this time, our asymmetric package

7
00:00:17.030 --> 00:00:22.000
and open up our asymmetric encryption utils.

8
00:00:22.000 --> 00:00:23.060
Now to this class,

9
00:00:23.060 --> 00:00:25.090
let's go ahead and add a method.

10
00:00:25.090 --> 00:00:31.030
Public static byte array

11
00:00:31.030 --> 00:00:36.090
called performRSAEncryption,

12
00:00:36.090 --> 00:00:40.060
and we will pass it a string in a plain text,

13
00:00:40.060 --> 00:00:45.040
and a private key.

14
00:00:45.040 --> 00:00:50.050
And this method will throw an exception.

15
00:00:50.050 --> 00:00:54.040
Now much like we saw for the symmetric routine,

16
00:00:54.040 --> 00:00:59.010
we are gonna create an instance of a cipher,

17
00:00:59.010 --> 00:01:01.090
cipher.getInstance, and we're gonna pass it

18
00:01:01.090 --> 00:01:04.010
our RSA algorithm.

19
00:01:04.010 --> 00:01:06.090
Now this time there's no padding or CBC because

20
00:01:06.090 --> 00:01:09.050
it's not a block cipher, there's no padding,

21
00:01:09.050 --> 00:01:13.010
we don't need to deal with any of that this time.

22
00:01:13.010 --> 00:01:18.090
But we will go ahead and create a cipher.init,

23
00:01:18.090 --> 00:01:22.010
using the encrypt mode,

24
00:01:22.010 --> 00:01:25.060
and our private key.

25
00:01:25.060 --> 00:01:28.040
And now our final step here

26
00:01:28.040 --> 00:01:32.010
is to return the cipher.doFinal,

27
00:01:32.010 --> 00:01:37.010
passing it our plainText.getBytes.

28
00:01:37.010 --> 00:01:39.050
Now in this example, we're gonna focus on

29
00:01:39.050 --> 00:01:42.000
the private key encryption path,

30
00:01:42.000 --> 00:01:45.020
whereby we encrypt with the private key.

31
00:01:45.020 --> 00:01:48.030
Therefore we will decrypt with the public key.

32
00:01:48.030 --> 00:01:50.000
Now once again, I want to reiterate that

33
00:01:50.000 --> 00:01:52.070
asymmetric works both ways.

34
00:01:52.070 --> 00:01:54.070
You can encrypt with either

35
00:01:54.070 --> 00:01:58.080
and you simply decrypt with the other value.

36
00:01:58.080 --> 00:02:02.050
So now let's go ahead and write our decryption routine.

37
00:02:02.050 --> 00:02:06.030
So in this case, we'll do a public static string,

38
00:02:06.030 --> 00:02:11.040
performRSADecryption.

39
00:02:11.040 --> 00:02:14.020
And in this case we'll take a byte array

40
00:02:14.020 --> 00:02:16.070
that is our cipherText,

41
00:02:16.070 --> 00:02:22.020
and a public key

42
00:02:22.020 --> 00:02:27.040
and we will go ahead and throw Exception.

43
00:02:27.040 --> 00:02:29.090
So now, much like you might expect at this point,

44
00:02:29.090 --> 00:02:34.000
we're gonna create an instance of our cipher,

45
00:02:34.000 --> 00:02:38.030
passing it the RSA algorithm.

46
00:02:38.030 --> 00:02:40.080
We will initialize our cipher,

47
00:02:40.080 --> 00:02:43.050
this time using our decrypt mode,

48
00:02:43.050 --> 00:02:46.060
and sending in our public key.

49
00:02:46.060 --> 00:02:50.020
And we will get a byte array, called result,

50
00:02:50.020 --> 00:02:53.020
which equals ciper.doFinal,

51
00:02:53.020 --> 00:02:56.090
passing it our cipher text.

52
00:02:56.090 --> 00:02:59.060
And we will simply return a new string

53
00:02:59.060 --> 00:03:02.000
that is our result.

54
00:03:02.000 --> 00:03:04.020
So let's go ahead and open up our test now,

55
00:03:04.020 --> 00:03:09.090
so we can test the algorithm that we just created.

56
00:03:09.090 --> 00:03:12.000
In this test class,

57
00:03:12.000 --> 00:03:15.040
let's create a new instance of a test.

58
00:03:15.040 --> 00:03:19.000
And we are gonna call this test

59
00:03:19.000 --> 00:03:23.090
testRSACryptoRoutine,

60
00:03:23.090 --> 00:03:26.020
and it will throw an exception.

61
00:03:26.020 --> 00:03:32.040
Now we will create an instance of a key pair.

62
00:03:32.040 --> 00:03:36.030
And we will create an instance of our plain text.

63
00:03:36.030 --> 00:03:39.090
Which, once again, we will use: "This is the text

64
00:03:39.090 --> 00:03:46.020
we are going to hide in plain sight."

65
00:03:46.020 --> 00:03:48.090
And now we will create a byte array

66
00:03:48.090 --> 00:03:53.040
of cipherText that equals

67
00:03:53.040 --> 00:03:58.000
our EncryptionUtils.performRSAEncryption,

68
00:03:58.000 --> 00:04:04.000
passing in the plainText and the keyPair.getPrivate.

69
00:04:04.000 --> 00:04:10.000
We will assertNotNull on our cipherText,

70
00:04:10.000 --> 00:04:14.040
and we will go ahead and do a System.out.printline,

71
00:04:14.040 --> 00:04:18.090
using the DataTypeConverter once again,

72
00:04:18.090 --> 00:04:24.050
.printHexBinary, passing in our cipherText.

73
00:04:24.050 --> 00:04:30.060
And now, finally, we will do a decryptedText equal

74
00:04:30.060 --> 00:04:37.070
to our AsymmetricEncryptionUtils.performRSADecryption,

75
00:04:37.070 --> 00:04:45.080
passing in our cipherText and our public key.

76
00:04:45.080 --> 00:04:49.050
And now we can simply do an assertEquals

77
00:04:49.050 --> 00:04:51.090
on our plainText,

78
00:04:51.090 --> 00:04:54.090
and our decryptedText.

79
00:04:54.090 --> 00:04:59.060
So now if we run our test...

80
00:04:59.060 --> 00:05:01.050
Once again, it's gonna take a little bit of time

81
00:05:01.050 --> 00:05:03.090
to generate our key pair.

82
00:05:03.090 --> 00:05:06.040
But you will see that both tests pass.

83
00:05:06.040 --> 00:05:09.090
And if we take a look at the actual routine,

84
00:05:09.090 --> 00:05:13.070
you will see the actual encrypted payload.

85
00:05:13.070 --> 00:05:16.070
And as you might expect, based on the fact that

86
00:05:16.070 --> 00:05:21.030
we've had a very large private key that we were using,

87
00:05:21.030 --> 00:05:25.020
the cipher text is very large as well.

88
00:05:25.020 --> 00:05:27.000
And that's essentially all there is

89
00:05:27.000 --> 00:05:30.000
to asymmetric encryption in Java.

