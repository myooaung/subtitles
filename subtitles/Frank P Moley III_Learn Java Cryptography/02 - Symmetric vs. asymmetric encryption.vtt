WEBVTT
1
00:00:00.050 --> 00:00:02.060
- [Instructor] Now, as promised in the previous video

2
00:00:02.060 --> 00:00:04.040
I wanna spend a little bit of time talking about

3
00:00:04.040 --> 00:00:06.090
the two different types of encryption.

4
00:00:06.090 --> 00:00:11.060
Specifically, Asymmetric or public private key encryption.

5
00:00:11.060 --> 00:00:15.050
And Symmetric or shared key encryption.

6
00:00:15.050 --> 00:00:17.050
Now there are few fundamentals we need to talk about.

7
00:00:17.050 --> 00:00:21.000
So Symmetric encryption or shared key encryption

8
00:00:21.000 --> 00:00:24.080
is a method of encryption where both parties involved

9
00:00:24.080 --> 00:00:27.050
share a common key.

10
00:00:27.050 --> 00:00:30.070
That common key is used, and must be kept secret

11
00:00:30.070 --> 00:00:32.040
by both parties.

12
00:00:32.040 --> 00:00:36.070
So in a traditional Alice and Bob example of cryptography,

13
00:00:36.070 --> 00:00:40.010
Alice will encrypt a message using the shared key

14
00:00:40.010 --> 00:00:42.080
and send it to Bob who can then decrypt it

15
00:00:42.080 --> 00:00:45.050
using the same shared key.

16
00:00:45.050 --> 00:00:48.060
Obviously, the issue with symmetric encryption is

17
00:00:48.060 --> 00:00:52.010
that both parties must have a secured mechanism

18
00:00:52.010 --> 00:00:54.020
by which to share that key,

19
00:00:54.020 --> 00:00:58.020
and often on the public internet that is not possible.

20
00:00:58.020 --> 00:00:59.070
Now, asymmetric encryption

21
00:00:59.070 --> 00:01:02.060
or public/private key pair encryption

22
00:01:02.060 --> 00:01:05.040
is based on the concept that the two keys

23
00:01:05.040 --> 00:01:07.070
are mathematically related

24
00:01:07.070 --> 00:01:11.060
therefore I can use one to encrypt and the other to decrypt.

25
00:01:11.060 --> 00:01:14.070
So, in this example Alice will create

26
00:01:14.070 --> 00:01:17.060
a public key and a private key

27
00:01:17.060 --> 00:01:21.070
and she will then share her public key openly to everyone.

28
00:01:21.070 --> 00:01:25.040
She can therefore encrypt a message

29
00:01:25.040 --> 00:01:29.010
with her private key and send it to Bob.

30
00:01:29.010 --> 00:01:33.060
Bob can then decrypt the message using Alice's public key

31
00:01:33.060 --> 00:01:36.020
and read it in plain text.

32
00:01:36.020 --> 00:01:38.090
Now, the interesting side effect of this is,

33
00:01:38.090 --> 00:01:42.070
that if Bob wants to send a private message to Alice

34
00:01:42.070 --> 00:01:47.080
he actually can encrypt the data using Alice's public key

35
00:01:47.080 --> 00:01:51.090
and she can then decrypt it using her private key.

36
00:01:51.090 --> 00:01:55.050
So, asymmetric encryption works both ways.

37
00:01:55.050 --> 00:01:58.060
Now, the uses of these are very, very different

38
00:01:58.060 --> 00:02:01.060
but you might guess that the asymmetric keys

39
00:02:01.060 --> 00:02:04.020
work really good on distributed systems,

40
00:02:04.020 --> 00:02:05.050
where symmetric keys

41
00:02:05.050 --> 00:02:09.060
tend to work really good on private systems.

42
00:02:09.060 --> 00:02:12.000
Now there are some performance considerations

43
00:02:12.000 --> 00:02:13.040
between the two.

44
00:02:13.040 --> 00:02:18.010
Shared key block or stream ciphers are relatively quick

45
00:02:18.010 --> 00:02:21.070
when you consider the operations being performed.

46
00:02:21.070 --> 00:02:23.030
Public key encryption, however,

47
00:02:23.030 --> 00:02:25.080
is extremely slow

48
00:02:25.080 --> 00:02:27.000
in relation

49
00:02:27.000 --> 00:02:30.010
to symmetric key encryption.

50
00:02:30.010 --> 00:02:31.060
Now often what happens is,

51
00:02:31.060 --> 00:02:33.080
is you use PKI

52
00:02:33.080 --> 00:02:37.020
for the operation to solely transfer

53
00:02:37.020 --> 00:02:38.070
a shared key

54
00:02:38.070 --> 00:02:43.000
and then do all other communications using that shared key

55
00:02:43.000 --> 00:02:45.020
because now you have a way of sharing it

56
00:02:45.020 --> 00:02:48.080
between two parties in a secure fashion.

57
00:02:48.080 --> 00:02:52.020
And as a matter of fact, this is exactly how TLS

58
00:02:52.020 --> 00:02:56.090
often confused for SSL works on the public internet today.

59
00:02:56.090 --> 00:03:00.050
The handshake operation between a client and the server

60
00:03:00.050 --> 00:03:03.040
is really designed to get a shared key

61
00:03:03.040 --> 00:03:06.070
between the two for that session.

62
00:03:06.070 --> 00:03:10.090
Now, symmetric keys have very distinct uses.

63
00:03:10.090 --> 00:03:13.080
Most of the time when we have data at rest,

64
00:03:13.080 --> 00:03:16.060
such as in a database or messaging system,

65
00:03:16.060 --> 00:03:18.050
or even on a file system.

66
00:03:18.050 --> 00:03:23.030
We're gonna sue symmetric block cipher to encrypt that data.

67
00:03:23.030 --> 00:03:28.020
We also use symmetric block encryption for data in motion.

68
00:03:28.020 --> 00:03:29.090
We used to use stream ciphers

69
00:03:29.090 --> 00:03:31.060
but I alluded to the last chapter

70
00:03:31.060 --> 00:03:35.030
how stream ciphers can actually be broken.

71
00:03:35.030 --> 00:03:39.090
And streams like RC4 are considered no longer secure

72
00:03:39.090 --> 00:03:43.090
and TLS want to actually remove them from the list.

73
00:03:43.090 --> 00:03:47.090
Now, asymmetric has some very distinct uses as well.

74
00:03:47.090 --> 00:03:49.080
We've talked a few times about TLS

75
00:03:49.080 --> 00:03:52.030
or Transport Layer Sockets,

76
00:03:52.030 --> 00:03:57.030
and this is really how the internet works over the HGDPS.

77
00:03:57.030 --> 00:03:59.090
Digital signatures or non repatriation

78
00:03:59.090 --> 00:04:03.020
is actually based on a symmetric encryption.

79
00:04:03.020 --> 00:04:05.020
And we're gonna talk a lot about that

80
00:04:05.020 --> 00:04:08.020
in the chapter on Digital signatures.

81
00:04:08.020 --> 00:04:12.030
Certificate trusts are really based on the same concept

82
00:04:12.030 --> 00:04:15.010
so you create a public key and a private key

83
00:04:15.010 --> 00:04:19.080
and you sign that with the trusted authorities private key

84
00:04:19.080 --> 00:04:22.070
and can confirm that signature with their public key.

85
00:04:22.070 --> 00:04:24.060
And the chain goes on and on.

86
00:04:24.060 --> 00:04:28.050
And that is how trust is build on the internet

87
00:04:28.050 --> 00:04:30.080
from a central CA.

88
00:04:30.080 --> 00:04:32.000
So, now that we've talked about

89
00:04:32.000 --> 00:04:34.020
asymmetric and symmetric encryption.

90
00:04:34.020 --> 00:04:36.010
Let's actually jump into symmetric

91
00:04:36.010 --> 00:04:39.000
and perform the actual operations.

