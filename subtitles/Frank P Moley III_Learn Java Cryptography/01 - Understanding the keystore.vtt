WEBVTT
1
00:00:00.050 --> 00:00:03.010
- [Narrator] Java KeyStores are an integral way

2
00:00:03.010 --> 00:00:06.060
of transmitting secure files across an enterprise

3
00:00:06.060 --> 00:00:09.010
when dealing with Java programs.

4
00:00:09.010 --> 00:00:11.040
In addition, KeyStores and TrustStores

5
00:00:11.040 --> 00:00:13.050
are very important when dealing

6
00:00:13.050 --> 00:00:15.060
with self signed infrastructure

7
00:00:15.060 --> 00:00:18.060
on an internal enterprise based network.

8
00:00:18.060 --> 00:00:19.090
We're gonna talk a little bit about how

9
00:00:19.090 --> 00:00:23.020
to leverage Java KeyStores in your applications

10
00:00:23.020 --> 00:00:25.070
in order to load keys.

11
00:00:25.070 --> 00:00:27.030
So, let's first start by talking about

12
00:00:27.030 --> 00:00:29.020
what is a KeyStore?

13
00:00:29.020 --> 00:00:31.020
Essentially a KeyStore is nothing more

14
00:00:31.020 --> 00:00:35.030
than a database or a collection of values.

15
00:00:35.030 --> 00:00:38.040
It's used to store secrets in small doses.

16
00:00:38.040 --> 00:00:40.090
Now, the reason that I say small doses

17
00:00:40.090 --> 00:00:42.080
is I wouldn't put a whole lot of secrets

18
00:00:42.080 --> 00:00:44.090
into an individual KeyStore

19
00:00:44.090 --> 00:00:47.020
unless you absolutely have to.

20
00:00:47.020 --> 00:00:50.030
If you actually wanna load secrets into an application

21
00:00:50.030 --> 00:00:52.090
you should look at a tool like HashiCorp Vault

22
00:00:52.090 --> 00:00:55.010
or Thycotic Secret Server in order

23
00:00:55.010 --> 00:00:57.040
to get secrets into your application,

24
00:00:57.040 --> 00:00:58.090
but in small bits and pieces

25
00:00:58.090 --> 00:01:01.030
like private keys or certificates

26
00:01:01.030 --> 00:01:03.090
KeyStores are a great way to do it.

27
00:01:03.090 --> 00:01:05.050
Some of things that you can store,

28
00:01:05.050 --> 00:01:06.050
as I've alluded to,

29
00:01:06.050 --> 00:01:13.000
are public keys, PKI pairs, or symmetric shared keys.

30
00:01:13.000 --> 00:01:14.080
Now, when you build a KeyStore

31
00:01:14.080 --> 00:01:20.030
it's usually actually built using the Java keytool, usually.

32
00:01:20.030 --> 00:01:23.010
It can however be built in code,

33
00:01:23.010 --> 00:01:26.090
and building it in code can either save it on disk

34
00:01:26.090 --> 00:01:29.030
or run it in memory.

35
00:01:29.030 --> 00:01:31.030
Now, this is often very useful

36
00:01:31.030 --> 00:01:34.030
when scripting DevOps type activities,

37
00:01:34.030 --> 00:01:36.060
especially as I alluded to when using

38
00:01:36.060 --> 00:01:39.040
internally signed certificates.

39
00:01:39.040 --> 00:01:43.030
By being able to generate a KeyStore dynamically

40
00:01:43.030 --> 00:01:45.020
with a signed certificate

41
00:01:45.020 --> 00:01:47.070
that is signed by your internal CA

42
00:01:47.070 --> 00:01:50.050
you can actually push those out to applications,

43
00:01:50.050 --> 00:01:52.020
so that they are automatically trusted

44
00:01:52.020 --> 00:01:55.010
when they come up if you do KeyStores right

45
00:01:55.010 --> 00:01:57.050
and you spend a little time understanding

46
00:01:57.050 --> 00:02:01.090
the various formats and structures of KeyStores.

47
00:02:01.090 --> 00:02:04.080
Now, the JCA KeyStore object

48
00:02:04.080 --> 00:02:07.000
is not the traditional KeyStore per se

49
00:02:07.000 --> 00:02:08.040
that we deal with.

50
00:02:08.040 --> 00:02:11.020
It's actually a class for interacting

51
00:02:11.020 --> 00:02:14.060
with the Java KeyStore file itself.

52
00:02:14.060 --> 00:02:17.070
Now, I alluded earlier that it can be purely in memory

53
00:02:17.070 --> 00:02:20.090
or it can be on disk.

54
00:02:20.090 --> 00:02:23.010
You can leverage various file types

55
00:02:23.010 --> 00:02:26.010
like PKS, or P12 files,

56
00:02:26.010 --> 00:02:28.010
or with other libraries like Bouncy Castle

57
00:02:28.010 --> 00:02:31.050
you can expand that list even further.

58
00:02:31.050 --> 00:02:33.010
Before we jump into code however,

59
00:02:33.010 --> 00:02:35.040
we do need to talk about a little difference

60
00:02:35.040 --> 00:02:39.090
in terminology between a TrustStore and a KeyStore.

61
00:02:39.090 --> 00:02:44.000
Now, in reality a TrustStore is a KeyStore.

62
00:02:44.000 --> 00:02:47.000
It is a type of a Java KeyStore.

63
00:02:47.000 --> 00:02:51.040
It is usually used for certificates from a CA.

64
00:02:51.040 --> 00:02:53.030
Now, it can contain certificates signed

65
00:02:53.030 --> 00:02:56.030
by a public CA like DigiSign,

66
00:02:56.030 --> 00:02:59.060
or it can contain certificates signed

67
00:02:59.060 --> 00:03:02.070
by your private CA in your enterprise,

68
00:03:02.070 --> 00:03:04.070
and this is really an example of how

69
00:03:04.070 --> 00:03:07.060
we would get an application on start up

70
00:03:07.060 --> 00:03:11.030
to trust the certificates when it's making web service calls

71
00:03:11.030 --> 00:03:14.040
to other systems within your enterprise.

72
00:03:14.040 --> 00:03:16.040
We're not gonna get too deep into that,

73
00:03:16.040 --> 00:03:18.040
but just know that the CA search file

74
00:03:18.040 --> 00:03:20.090
that shifts with Java is really a trustworthy,

75
00:03:20.090 --> 00:03:22.070
it can be manipulated the same way

76
00:03:22.070 --> 00:03:25.000
that we do with any other KeyStore in Java.

