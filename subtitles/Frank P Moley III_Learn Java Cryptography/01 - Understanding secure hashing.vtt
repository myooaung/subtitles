WEBVTT
1
00:00:00.050 --> 00:00:02.050
- [Instructor] The concept of hashing is critical

2
00:00:02.050 --> 00:00:05.020
to many applications within computer science

3
00:00:05.020 --> 00:00:08.050
and the cryptography area is no different.

4
00:00:08.050 --> 00:00:09.040
In cryptography,

5
00:00:09.040 --> 00:00:13.080
we focus on cryptographically strong hash algorithms.

6
00:00:13.080 --> 00:00:16.050
What is a cryptographic hash, you may ask?

7
00:00:16.050 --> 00:00:18.050
Essentially, it's the same as any other hash

8
00:00:18.050 --> 00:00:21.060
with a little bit more detail involved.

9
00:00:21.060 --> 00:00:24.060
It's a hash function that takes an arbitrary input

10
00:00:24.060 --> 00:00:27.040
and produces a fixed-sized output.

11
00:00:27.040 --> 00:00:29.030
That's one of the key differences

12
00:00:29.030 --> 00:00:32.020
is that fixed-sized output.

13
00:00:32.020 --> 00:00:36.020
A cryptographic hash should also be easy to calculate.

14
00:00:36.020 --> 00:00:40.060
However, it should be very difficult if not impossible

15
00:00:40.060 --> 00:00:44.050
to find the original input that yielded that output

16
00:00:44.050 --> 00:00:47.020
that was so easy to calculate.

17
00:00:47.020 --> 00:00:50.060
It also should be very difficult if not impossible

18
00:00:50.060 --> 00:00:55.020
to duplicate with multiple unique inputs.

19
00:00:55.020 --> 00:00:58.070
A cryptographic hash is also known by several other terms

20
00:00:58.070 --> 00:01:01.060
and I wanna talk about 'em briefly just in case you see them

21
00:01:01.060 --> 00:01:03.030
throughout the literature.

22
00:01:03.030 --> 00:01:05.080
These terms are things like digital fingerprint,

23
00:01:05.080 --> 00:01:08.050
or digest, or message digest,

24
00:01:08.050 --> 00:01:12.000
which is how we'll actually see it referenced in the JCA.

25
00:01:12.000 --> 00:01:14.050
Finally is checksum which you may have seen

26
00:01:14.050 --> 00:01:17.020
when you've downloaded files throughout the internet.

27
00:01:17.020 --> 00:01:20.060
You may see an NV5 checksum of that binary

28
00:01:20.060 --> 00:01:23.060
so that you can ensure that it is the exact size

29
00:01:23.060 --> 00:01:28.010
and the exact binary content that the producer created.

30
00:01:28.010 --> 00:01:30.060
Now, often you'll hear the term of a cracking a hash

31
00:01:30.060 --> 00:01:32.020
and I really wanna define what that means

32
00:01:32.020 --> 00:01:35.050
to crack a cryptographic hash.

33
00:01:35.050 --> 00:01:37.010
Essentially, there's a couple ways to do that.

34
00:01:37.010 --> 00:01:40.010
The first is to find an algorithm that can be used

35
00:01:40.010 --> 00:01:44.020
to generate a collision between two hashes.

36
00:01:44.020 --> 00:01:45.070
Now, this is very difficult

37
00:01:45.070 --> 00:01:49.050
the more advanced the hash algorithm is and some hashes,

38
00:01:49.050 --> 00:01:54.020
however, have become susceptible to collision attacks.

39
00:01:54.020 --> 00:01:58.040
Another is finding an algorithm to identify a unique

40
00:01:58.040 --> 00:02:01.090
and different input that will yield a given hash.

41
00:02:01.090 --> 00:02:04.040
Now, this is similar to a collision,

42
00:02:04.040 --> 00:02:06.040
but instead of focusing on colliding,

43
00:02:06.040 --> 00:02:09.010
you're focusing on finding another input

44
00:02:09.010 --> 00:02:11.060
through the use of an algorithm.

45
00:02:11.060 --> 00:02:13.020
A couple of the most common hashes

46
00:02:13.020 --> 00:02:15.030
that we still see used today

47
00:02:15.030 --> 00:02:16.070
that are considering cracked

48
00:02:16.070 --> 00:02:21.020
from a cryptographic perspective are MD5 and SHA-1.

49
00:02:21.020 --> 00:02:24.060
Any time you're actually using these hash algorithms

50
00:02:24.060 --> 00:02:26.080
to do security-type work,

51
00:02:26.080 --> 00:02:29.050
you should stop and rethink your life choices.

52
00:02:29.050 --> 00:02:31.070
If you're doing just simple checksums on files,

53
00:02:31.070 --> 00:02:33.030
you might be okay,

54
00:02:33.030 --> 00:02:35.010
but just keep in the back of your mind

55
00:02:35.010 --> 00:02:38.020
that these are technically broken hashes.

56
00:02:38.020 --> 00:02:41.070
Now, what are some of the actual uses of hashes?

57
00:02:41.070 --> 00:02:44.010
First and foremost is digital signatures.

58
00:02:44.010 --> 00:02:45.020
We're actually gonna take a look

59
00:02:45.020 --> 00:02:49.030
at the digital signature engine in the next chapter.

60
00:02:49.030 --> 00:02:51.080
Another is digital fingerprints and this is very similar

61
00:02:51.080 --> 00:02:55.030
to checksums where you're actually printing a file

62
00:02:55.030 --> 00:02:59.010
with a hash so that anyone who downloads that file knows

63
00:02:59.010 --> 00:03:03.040
that it matches the exact size and content that you created

64
00:03:03.040 --> 00:03:06.020
when you put it out there for them to download.

65
00:03:06.020 --> 00:03:09.040
Another very popular use case and one that, in my opinion,

66
00:03:09.040 --> 00:03:13.030
is not used enough is the logging of sensitive data.

67
00:03:13.030 --> 00:03:15.020
Let's say, for instance, you're running a system

68
00:03:15.020 --> 00:03:17.020
that has email addresses.

69
00:03:17.020 --> 00:03:19.080
Well, you know that you shouldn't log in the email address

70
00:03:19.080 --> 00:03:23.010
because that's personally identifiable information.

71
00:03:23.010 --> 00:03:25.090
However, if you hash that email address

72
00:03:25.090 --> 00:03:27.090
and then log the hash,

73
00:03:27.090 --> 00:03:30.080
you can still find the original email address

74
00:03:30.080 --> 00:03:33.050
by performing the same hash and then searching the logs

75
00:03:33.050 --> 00:03:35.050
for that hashed value.

76
00:03:35.050 --> 00:03:38.050
This can be leveraged in many different use cases

77
00:03:38.050 --> 00:03:41.000
in your organization where sensitive data

78
00:03:41.000 --> 00:03:46.070
or even secured data needs to be logged in a secure manner.

79
00:03:46.070 --> 00:03:49.060
Finally and probably the most common use case

80
00:03:49.060 --> 00:03:52.050
of hashes is saving passwords.

81
00:03:52.050 --> 00:03:54.050
But, I wanna leave a little bit of a caveat

82
00:03:54.050 --> 00:03:57.030
to that saving passwords because what we're gonna do

83
00:03:57.030 --> 00:04:02.010
in JCA really isn't sufficient enough for the most part

84
00:04:02.010 --> 00:04:06.000
for saving passwords in modern-day computer science.

