WEBVTT
1
00:00:00.010 --> 00:00:01.070
- [Instructor] So, now that we've discussed

2
00:00:01.070 --> 00:00:04.060
what a digital signature is and how to use it,

3
00:00:04.060 --> 00:00:06.080
let's go write some code to create

4
00:00:06.080 --> 00:00:09.020
a digital signature for ourselves.

5
00:00:09.020 --> 00:00:11.020
I'd like you to jump into the IDE,

6
00:00:11.020 --> 00:00:13.050
and the first thing I want you to take a look at

7
00:00:13.050 --> 00:00:17.080
is in source main resources, I've created a file for you.

8
00:00:17.080 --> 00:00:20.050
This happens to be the Constitution of the United States,

9
00:00:20.050 --> 00:00:21.080
and we're going to use that

10
00:00:21.080 --> 00:00:25.010
and actually create a digital signature for this file

11
00:00:25.010 --> 00:00:27.070
as we progress throughout this video.

12
00:00:27.070 --> 00:00:29.090
Go ahead and shut that down,

13
00:00:29.090 --> 00:00:34.090
and I'd like for you to create a new package,

14
00:00:34.090 --> 00:00:40.010
Com.frankmoley.crypto signature.

15
00:00:40.010 --> 00:00:41.070
And in that signature package,

16
00:00:41.070 --> 00:00:44.030
I'd like you to create a new Java class,

17
00:00:44.030 --> 00:00:49.010
and we're going to call that DigitalSignatureUtils.

18
00:00:49.010 --> 00:00:50.050
I'm gonna shrink this out here

19
00:00:50.050 --> 00:00:54.050
so we can take a look at the code a little easier.

20
00:00:54.050 --> 00:00:56.040
Now, like we've done a couple times before,

21
00:00:56.040 --> 00:01:00.070
I would like you to create a private static final string,

22
00:01:00.070 --> 00:01:05.060
and we're going to call this Signing Algorithm,

23
00:01:05.060 --> 00:01:11.090
and we will set that value to SHA256withRSA.

24
00:01:11.090 --> 00:01:15.010
So, we're going to do a SHA256 hash

25
00:01:15.010 --> 00:01:19.070
and an RSA 4096 signature.

26
00:01:19.070 --> 00:01:23.000
Now that that's done, let's go ahead and actually

27
00:01:23.000 --> 00:01:29.070
implement our method to create the digital signature.

28
00:01:29.070 --> 00:01:32.040
We are going to start with a byte array

29
00:01:32.040 --> 00:01:39.030
for our input and then a Private Key,

30
00:01:39.030 --> 00:01:44.030
and we will throw an Exception.

31
00:01:44.030 --> 00:01:47.080
Go ahead and import that private key there

32
00:01:47.080 --> 00:01:49.070
and start open our method.

33
00:01:49.070 --> 00:01:51.050
We're gonna start by getting an instance

34
00:01:51.050 --> 00:01:57.050
of a signature object from signature.getinstance,

35
00:01:57.050 --> 00:02:02.030
passing it in our Signing Algorithm.

36
00:02:02.030 --> 00:02:06.050
Now, on the signature object, we are going to call initSign

37
00:02:06.050 --> 00:02:09.060
and we will pass at the Private Key.

38
00:02:09.060 --> 00:02:16.060
We will then do a signature.update and in the update method,

39
00:02:16.060 --> 00:02:20.030
we are actually gonna pass it in our input.

40
00:02:20.030 --> 00:02:26.020
And finally, we will return a signature.sign call.

41
00:02:26.020 --> 00:02:27.070
And that will return our byte array

42
00:02:27.070 --> 00:02:30.000
that we are going to use.

43
00:02:30.000 --> 00:02:33.060
Now, digital signatures only work if you can validate them,

44
00:02:33.060 --> 00:02:36.050
so we are going to create a boolean method

45
00:02:36.050 --> 00:02:41.030
called verifyDigitalSignature, and it's gonna look

46
00:02:41.030 --> 00:02:45.000
very similar as far as the arguments to our previous example

47
00:02:45.000 --> 00:02:49.020
with the exception that we're gonna take another byte array

48
00:02:49.020 --> 00:02:56.010
called signatureToVerify and the Public Key

49
00:02:56.010 --> 00:02:59.050
instead of the Private Key, which again,

50
00:02:59.050 --> 00:03:01.090
should make sense based on the

51
00:03:01.090 --> 00:03:05.010
way that digital signatures work.

52
00:03:05.010 --> 00:03:06.050
So once again, we'll get an instance

53
00:03:06.050 --> 00:03:13.000
of our signature object from Signature.getInstance,

54
00:03:13.000 --> 00:03:16.080
passing it in the Signing Algorithm.

55
00:03:16.080 --> 00:03:21.030
Make sure that you do these throws Exception here,

56
00:03:21.030 --> 00:03:27.050
and once again, we will do an init, only this time,

57
00:03:27.050 --> 00:03:29.030
instead of initSign, we're gonna do

58
00:03:29.030 --> 00:03:34.080
initVerify and pass at the Public Key.

59
00:03:34.080 --> 00:03:38.000
We will go ahead and call update again

60
00:03:38.000 --> 00:03:42.000
and pass at our input, and then,

61
00:03:42.000 --> 00:03:46.040
we will simply return signature.verify,

62
00:03:46.040 --> 00:03:49.000
and we will pass into it the actual

63
00:03:49.000 --> 00:03:51.010
signature that we wanna verify,

64
00:03:51.010 --> 00:03:53.070
and that's all there is to it.

65
00:03:53.070 --> 00:03:56.060
Let's go ahead and create a test.

66
00:03:56.060 --> 00:04:02.010
I'm gonna, once again, have my IDE create the test for me.

67
00:04:02.010 --> 00:04:05.050
This time, I'm actually not gonna select any methods,

68
00:04:05.050 --> 00:04:07.070
and in this test class, I'm gonna create

69
00:04:07.070 --> 00:04:11.080
an annotation for @Test, and I will do a void method

70
00:04:11.080 --> 00:04:16.000
called digitalSignatureRoutine,

71
00:04:16.000 --> 00:04:19.070
and I will allow that to throw an Exception,

72
00:04:19.070 --> 00:04:22.000
and now we're actually gonna implement it.

73
00:04:22.000 --> 00:04:24.010
So, the first thing that I wanna do

74
00:04:24.010 --> 00:04:28.080
is I wanna get the uri of that file that we just dealt with,

75
00:04:28.080 --> 00:04:31.090
so we're gonna create an instance of the URL object,

76
00:04:31.090 --> 00:04:36.060
and we're gonna load it from the class loader.

77
00:04:36.060 --> 00:04:43.050
So this time, getClass.getClassLoader.getResource,

78
00:04:43.050 --> 00:04:47.030
and the resource is named demo.txt.

79
00:04:47.030 --> 00:04:50.050
So that should get the URL of that file,

80
00:04:50.050 --> 00:04:55.000
now we'll create a path object,

81
00:04:55.000 --> 00:04:57.050
and we're gonna take that URL

82
00:04:57.050 --> 00:05:01.080
and actually get the uri from it.

83
00:05:01.080 --> 00:05:05.010
Go ahead and import our paths here.

84
00:05:05.010 --> 00:05:08.090
Now, we're gonna do a byte array of our input,

85
00:05:08.090 --> 00:05:15.020
and we will use the file's API to read all bytes,

86
00:05:15.020 --> 00:05:17.040
passing in the path.

87
00:05:17.040 --> 00:05:20.000
So now, we've got an input element that we can actually

88
00:05:20.000 --> 00:05:23.080
go sign, so now we can actually do our real work.

89
00:05:23.080 --> 00:05:27.000
So, we'll create an instance of a keyPair,

90
00:05:27.000 --> 00:05:29.090
and we're going to leverage our

91
00:05:29.090 --> 00:05:33.020
aAymmetricEncryptionUtils to do that

92
00:05:33.020 --> 00:05:37.020
to generate an RSA Key Pair.

93
00:05:37.020 --> 00:05:41.010
And now, we're gonna create our actual signature.

94
00:05:41.010 --> 00:05:43.000
So our signature will come from

95
00:05:43.000 --> 00:05:48.060
our DigitalSignatureUtils.createDigitalSignature.

96
00:05:48.060 --> 00:05:50.080
We'll pass at the input and the

97
00:05:50.080 --> 00:05:56.030
Private Key from the Key Pair.

98
00:05:56.030 --> 00:05:59.060
Now that we have our signature, let's go ahead

99
00:05:59.060 --> 00:06:02.080
and do a System.out.println on it

100
00:06:02.080 --> 00:06:09.020
using the DataTypeConverters again to print a HexBinary,

101
00:06:09.020 --> 00:06:14.010
that way you can actually see that it's a signed hash.

102
00:06:14.010 --> 00:06:17.020
Now, let's go ahead and do an assertTrue,

103
00:06:17.020 --> 00:06:20.050
and what we're gonna do is here is we're going to

104
00:06:20.050 --> 00:06:28.000
call into our DigitalSignatureUtils.verifyDigitalSignature.

105
00:06:28.000 --> 00:06:32.050
We will pass at our original input, our signature,

106
00:06:32.050 --> 00:06:37.090
and then our KeyPair.getPublic, in this case,

107
00:06:37.090 --> 00:06:40.090
and we would expect that to return true.

108
00:06:40.090 --> 00:06:42.090
Now, while I'm running this, I just wanna talk

109
00:06:42.090 --> 00:06:45.030
a little bit about what we're doing here in our verify.

110
00:06:45.030 --> 00:06:48.000
In the real world, a separate system would actually

111
00:06:48.000 --> 00:06:51.050
be reloading that input and then calling it in to verify,

112
00:06:51.050 --> 00:06:54.060
but you'll see that we actually passed as expected,

113
00:06:54.060 --> 00:06:56.060
and we got a nice output of the

114
00:06:56.060 --> 00:06:59.050
hexadecimal representation of the signature

115
00:06:59.050 --> 00:07:02.010
that you can scroll across here and take a look at.

116
00:07:02.010 --> 00:07:04.070
And that's all there is to creating digital signatures,

117
00:07:04.070 --> 00:07:06.050
and I hope that you find use for this

118
00:07:06.050 --> 00:07:09.000
in your everyday work in the real world.

