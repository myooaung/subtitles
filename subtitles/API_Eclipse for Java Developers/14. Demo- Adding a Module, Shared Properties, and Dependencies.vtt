WEBVTT
1
00:00:02.040 --> 00:00:05.640
[Autogenerated] but we can do some more declaration in this parent.

2
00:00:05.640 --> 00:00:10.230
Like for instance, the properties are declaration A Let us go on.

3
00:00:10.230 --> 00:00:17.250
Copy Paste This set of property za that is close this Perma at the parent level,

4
00:00:17.250 --> 00:00:18.910
we are going to copy Paste.

5
00:00:18.910 --> 00:00:20.440
Those properties are.

6
00:00:20.440 --> 00:00:27.540
And now when we update this project maven update project Okay,

7
00:00:27.540 --> 00:00:34.040
you can see that the Java five application service has been moved to Java eight,

8
00:00:34.040 --> 00:00:37.980
by the way, in these parents Mama,

9
00:00:37.980 --> 00:00:43.210
you can also see that the module ello application service has been added.

10
00:00:43.210 --> 00:00:49.760
So now we can copy paste our interface from the L O Service project.

11
00:00:49.760 --> 00:00:54.010
Let us create the pack Agia order not Padma that

12
00:00:54.010 --> 00:00:56.980
service and copy paste the interface.

13
00:00:56.980 --> 00:01:01.730
And it's now this interface is part of the L O application service.

14
00:01:01.730 --> 00:01:07.680
We can do the same for another module project maybe module next.

15
00:01:07.680 --> 00:01:10.240
Let us keep the archetype selection.

16
00:01:10.240 --> 00:01:14.670
Corded ello application service improve.

17
00:01:14.670 --> 00:01:16.040
Next.

18
00:01:16.040 --> 00:01:19.260
It is indeed a a child of the parent project.

19
00:01:19.260 --> 00:01:22.040
A low application finish.

20
00:01:22.040 --> 00:01:26.610
You can see that this folder has been created on this project.

21
00:01:26.610 --> 00:01:31.090
Air application service has also been created and this time

22
00:01:31.090 --> 00:01:33.640
it has been created automatically in Java.

23
00:01:33.640 --> 00:01:34.400
Eight.

24
00:01:34.400 --> 00:01:39.630
Since the parent project is already configured to support Java eight

25
00:01:39.630 --> 00:01:44.340
letters other This bike agia two applications service imp,

26
00:01:44.340 --> 00:01:49.590
along with this class that does not compiler for one reason is that

27
00:01:49.590 --> 00:01:53.730
it does not know the aero service interface because we need to

28
00:01:53.730 --> 00:01:57.110
declare these dependency from this bomb here.

29
00:01:57.110 --> 00:01:58.580
So let us do that.

30
00:01:58.580 --> 00:01:59.210
Letters first.

31
00:01:59.210 --> 00:02:01.560
Do some clean up in this poem.

32
00:02:01.560 --> 00:02:03.480
The dependencies, um, letters.

33
00:02:03.480 --> 00:02:05.870
Declare one dependency to the group.

34
00:02:05.870 --> 00:02:10.400
I d order the Perma onto the artifact I d.

35
00:02:10.400 --> 00:02:12.070
A low application.

36
00:02:12.070 --> 00:02:15.980
So it is the version we depend on being zero that

37
00:02:15.980 --> 00:02:19.480
wanna it makes the code combine, which is finer.

38
00:02:19.480 --> 00:02:21.440
Now we are going to copy paste.

39
00:02:21.440 --> 00:02:25.900
Also the test class from these Aero Service imp to

40
00:02:25.900 --> 00:02:32.440
this ello application service imp, let us put this day's class here.

41
00:02:32.440 --> 00:02:34.510
We also have a compilation problem.

42
00:02:34.510 --> 00:02:35.120
Why?

43
00:02:35.120 --> 00:02:41.550
Because the dependency to J unit and Toe ___ O J has not be properly set.

44
00:02:41.550 --> 00:02:45.070
But since those two test frameworks are very commander,

45
00:02:45.070 --> 00:02:50.710
we can declare them probably at the parent level of our l O application.

46
00:02:50.710 --> 00:02:51.340
A.

47
00:02:51.340 --> 00:02:55.540
So let us go and copy paste those dependent season from

48
00:02:55.540 --> 00:03:01.370
this Perma J you need on a ser jay, Let us go back to the poma off the air,

49
00:03:01.370 --> 00:03:04.190
application a copy, paste the dependency.

50
00:03:04.190 --> 00:03:06.640
Here, do some little cleanup.

51
00:03:06.640 --> 00:03:07.640
Here we go.

52
00:03:07.640 --> 00:03:12.410
And you can see that all the child er projects are inheriting

53
00:03:12.410 --> 00:03:16.040
the dependencies declared at the parent level.

54
00:03:16.040 --> 00:03:20.600
So now I were ___ service Test class compiles property,

55
00:03:20.600 --> 00:03:26.920
and we can Renate either using the Eclipse J unit Pugin or using

56
00:03:26.920 --> 00:03:30.800
directly on the parent bomb run AZA Maven test,

57
00:03:30.800 --> 00:03:36.240
for instance, which is going to execute all the tests from this application.

58
00:03:36.240 --> 00:03:38.370
If we check the executioner,

59
00:03:38.370 --> 00:03:43.710
the Maven reactor has created an older of executioner application

60
00:03:43.710 --> 00:03:46.720
application service and application service.

61
00:03:46.720 --> 00:03:48.500
Dash Imp.

62
00:03:48.500 --> 00:03:52.080
It has run up all the different goals off the maven

63
00:03:52.080 --> 00:03:56.440
Lifecycle resources compiled test resources.

64
00:03:56.440 --> 00:03:57.790
There's combined,

65
00:03:57.790 --> 00:04:06.000
then test for each artifact and for the artifact ello application service Imp.

66
00:04:06.000 --> 00:04:08.440
Since there is a test in this project,

67
00:04:08.440 --> 00:04:11.830
it has executed this test properly and at last,

68
00:04:11.830 --> 00:04:17.810
the reactor summary is displayed with the execution time for each project.

69
00:04:17.810 --> 00:04:29.000
So this is how you can configure a maven project using the eclipse, begin A with a parent project on two sub modules

