1
00:00:02,140 --> 00:00:05,720
[Autogenerated] Okay, Let us close this window.

2
00:00:05,720 --> 00:00:09,410
May Virna add dependency.

3
00:00:09,410 --> 00:00:12,310
Look for the J Unit artifacts.

4
00:00:12,310 --> 00:00:17,730
The one we're looking for begins with dear Unit.

5
00:00:17,730 --> 00:00:20,940
And it is just this Warner.

6
00:00:20,940 --> 00:00:26,250
We have all the details off the different versions of this artifact.

7
00:00:26,250 --> 00:00:30,200
And since it is J unit, we have quite a lot of them.

8
00:00:30,200 --> 00:00:35,240
The scope is the test scope because J unit is a test framework.

9
00:00:35,240 --> 00:00:43,640
So let us other This dependency here it appears a directly in the palm filer.

10
00:00:43,640 --> 00:00:48,670
We can also add a the Assert J dependency.

11
00:00:48,670 --> 00:00:51,830
The one we're looking for is the Assert J.

12
00:00:51,830 --> 00:00:53,040
Cole.

13
00:00:53,040 --> 00:00:59,040
Let us grab the last version of it in the test scoop.

14
00:00:59,040 --> 00:01:06,440
Adah, This dependency here, there's get rid of this bundle, er, sub element.

15
00:01:06,440 --> 00:01:13,340
And here we have these Asser Jiko added automatically toe our project.

16
00:01:13,340 --> 00:01:17,460
We can check that those dependencies have been added A by

17
00:01:17,460 --> 00:01:22,810
opening the Maybourne dependency node here.

18
00:01:22,810 --> 00:01:27,470
J unit has been downloader Gah er say Jay also,

19
00:01:27,470 --> 00:01:30,650
and since Asa J depends on him,

20
00:01:30,650 --> 00:01:36,920
Crest ham Crist has also bean downloaded automatically by maven.

21
00:01:36,920 --> 00:01:39,940
If we open the J unit,

22
00:01:39,940 --> 00:01:46,420
no doubt we can see that all the classes are off J unit are

23
00:01:46,420 --> 00:01:49,520
excessive boulder through this interface.

24
00:01:49,520 --> 00:01:54,790
But if we double click on it, the salsa off this base that's run a class,

25
00:01:54,790 --> 00:01:57,940
for instance is not present.

26
00:01:57,940 --> 00:02:02,550
Now the maven pra gehna is able to automatically download this

27
00:02:02,550 --> 00:02:06,970
source code for us on This is the reason why we now see the

28
00:02:06,970 --> 00:02:10,380
source code appearing automatically.

29
00:02:10,380 --> 00:02:14,270
And if we check precisely the icon used to represent

30
00:02:14,270 --> 00:02:18,840
the J unit for the 12 the job filer,

31
00:02:18,840 --> 00:02:23,660
we can see that there is this little detailer in front of this white job

32
00:02:23,660 --> 00:02:28,790
which tells us that the source code has also bean downloaded.

33
00:02:28,790 --> 00:02:33,840
It is not the case for him, Crist or as a J,

34
00:02:33,840 --> 00:02:38,160
but we do not needed to open a class off those dependencies

35
00:02:38,160 --> 00:02:40,520
toe automatically download the source code.

36
00:02:40,520 --> 00:02:44,340
We can do that directly through the interface.

37
00:02:44,340 --> 00:02:51,090
With the pop up menu off this dependency May Virna download So Sousa it will

38
00:02:51,090 --> 00:02:57,340
automatically download the source and the same for as a J.

39
00:02:57,340 --> 00:03:01,600
We can see the Progress bar currently downloading the source Soza.

40
00:03:01,600 --> 00:03:06,460
And once it is down, it will refresh the interface automatically.

41
00:03:06,460 --> 00:03:08,910
We can do the same for the documentation.

42
00:03:08,910 --> 00:03:14,240
Ana may Virna download Javad ACC.

43
00:03:14,240 --> 00:03:20,030
Now we have both the source code on the documentation of those dependencies.

44
00:03:20,030 --> 00:03:24,150
Now that we have properly configured our dependent Caesar,

45
00:03:24,150 --> 00:03:27,540
our test class is compiling properly.

46
00:03:27,540 --> 00:03:32,110
The Assertions class has been founder, and by the way,

47
00:03:32,110 --> 00:03:34,980
we can control click on it to check it.

48
00:03:34,980 --> 00:03:41,830
So Skoda on the same for the test annotation which comes from Jay in it.

49
00:03:41,830 --> 00:03:48,340
And we can runner I with this class run has a Jay any test.

50
00:03:48,340 --> 00:03:52,060
It is a maven project and still an eclipse project.

51
00:03:52,060 --> 00:04:00,000
So all the functionalities provided by Eclipse are still working in this kind of project.

