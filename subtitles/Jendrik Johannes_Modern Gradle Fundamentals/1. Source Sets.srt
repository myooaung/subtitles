1
00:00:01,490 --> 00:00:03,080
In our example application.

2
00:00:03,080 --> 00:00:09,290
So far we have written production code in several components and composed all of these together into

3
00:00:09,290 --> 00:00:10,280
an application.

4
00:00:11,320 --> 00:00:15,340
ESQUEDA We compiled the code and we ran the application.

5
00:00:17,300 --> 00:00:21,740
Another typical development task is to write tests for your code.

6
00:00:23,010 --> 00:00:30,330
Next to compile and code testing is the thing a great bird typically spends most of the time with.

7
00:00:30,810 --> 00:00:36,900
So for typical Java or Groovy or Scala or Kotlin project testing is the last missing piece.

8
00:00:37,950 --> 00:00:38,760
To get started.

9
00:00:38,760 --> 00:00:43,380
There's another great concept you should know about, which is the concept of a source set.

10
00:00:44,430 --> 00:00:45,120
The source said.

11
00:00:45,210 --> 00:00:53,520
Gradle is a central place to configure where related sources are placed like Java source code and resources

12
00:00:53,520 --> 00:00:54,700
like text files.

13
00:00:54,720 --> 00:01:00,720
You also want to ship with your code and how these sources are processed by Gradle, for example, by

14
00:01:00,720 --> 00:01:02,220
the compiler Java task.

15
00:01:03,110 --> 00:01:07,310
So the central point of the source set is a folder where sources are located.

16
00:01:07,340 --> 00:01:11,360
We already used one source set, which is the main source set.

17
00:01:12,080 --> 00:01:19,880
So if we look into our Business Logic project, all our Java sources are in source main java and main

18
00:01:20,000 --> 00:01:22,730
is the root folder of the main source set.

19
00:01:23,510 --> 00:01:30,260
And because that is an explicit concept in Gradle, this is also how IntelliJ was able to detect that.

20
00:01:30,260 --> 00:01:36,140
We have Java sources here because it gets the information from Gradle that there is a source set with

21
00:01:36,140 --> 00:01:37,040
sources in it.

22
00:01:38,270 --> 00:01:44,210
If we create a new folder in this project now an intelligent and look at the suggestions, we can also

23
00:01:44,210 --> 00:01:46,370
see the term source set mentioned here.

24
00:01:48,170 --> 00:01:54,770
So Gradle tells intelligence which source sets are potentially available and intelligent suggests us

25
00:01:54,770 --> 00:02:01,670
to create the corresponding photos we see here that we could add a resources folder if next to our Java

26
00:02:01,670 --> 00:02:02,180
code.

27
00:02:02,180 --> 00:02:07,310
We want to have other resources available at runtime that we then read in our code.

28
00:02:08,060 --> 00:02:16,040
And we also see that we can create folders for Java code or sources in the source set called test.

29
00:02:18,470 --> 00:02:23,030
This faucet is also set up by default by the Java plugins.

30
00:02:23,860 --> 00:02:26,440
And can be used for test code.

31
00:02:27,940 --> 00:02:30,700
Let's create a folder for test classes.

32
00:02:33,610 --> 00:02:39,430
Note that if you apply additional plugins for other JVM languages like the Groovy Plugin or the Kotlin

33
00:02:39,430 --> 00:02:47,350
plugin, you will get a separate folder called Groovy or Kotlin inside the source set and then can place

34
00:02:47,440 --> 00:02:50,160
implementations in the corresponding languages here.

35
00:02:50,920 --> 00:02:52,470
And this works for every source.

36
00:02:52,780 --> 00:02:57,400
So you can write code in Java or in groovy also for tests.

37
00:02:57,910 --> 00:03:04,150
In some projects, for example, it's common to implement everything in Java but use groovy for testing.

38
00:03:04,930 --> 00:03:10,720
In our convention plugin we could access the source sets through the source sets container.

39
00:03:11,560 --> 00:03:16,420
You see that there's a source at the main and the source said, Stop test.

40
00:03:17,410 --> 00:03:21,430
Here we can configure where all assets are located, for example.

41
00:03:21,550 --> 00:03:27,550
So if for some reason you don't want to follow the standard layout of a project, you could change the

42
00:03:27,550 --> 00:03:28,810
source directory here.

43
00:03:32,130 --> 00:03:38,610
Usually, though, if you stick to the standard conventions, there is no need to reconfigure the pre-configured

44
00:03:38,610 --> 00:03:40,800
source sets by the Java plugin.

45
00:03:41,540 --> 00:03:45,430
What you might want to do, though, is create additional assets.

46
00:03:45,440 --> 00:03:51,710
For example, if you need to write different types of tests, which, for example, use different testing

47
00:03:51,710 --> 00:03:52,460
libraries.

48
00:03:52,970 --> 00:03:58,820
In this case, you can use source sets that create to create a new source set, for example, one called

49
00:03:58,820 --> 00:04:00,020
integration test.

50
00:04:03,950 --> 00:04:05,780
We'll get back to this in a bit.

51
00:04:06,110 --> 00:04:11,360
For now, let's start adding a test class as an example to our Business Logic Project.

52
00:04:16,170 --> 00:04:18,810
In Java or other JVM languages.

53
00:04:18,810 --> 00:04:25,410
Tests are written as classes that have test methods in them which cause the code under tests and then

54
00:04:25,410 --> 00:04:26,760
do some assertions.

55
00:04:29,370 --> 00:04:32,010
To do this, you always need a test framework.

56
00:04:32,160 --> 00:04:35,850
The most popular ones are unit four or unit five.

57
00:04:36,640 --> 00:04:39,130
We'll use J Unit five in this example.

58
00:04:40,240 --> 00:04:47,170
To tell you at five that this is a test you need to use the test annotation on the method.

59
00:04:49,260 --> 00:04:56,670
What we see, however, is that the test does not compile yet because unit five is not available.

60
00:04:58,250 --> 00:05:04,520
This is because children at five needs to be declared as a dependency, just as any other Java library

61
00:05:04,520 --> 00:05:05,720
we use in our code.

62
00:05:07,220 --> 00:05:10,430
Let's go to the book file and look at our dependencies block.

63
00:05:12,280 --> 00:05:15,040
So there's another important aspect about source sets.

64
00:05:15,430 --> 00:05:19,750
Each source set inside a project can be looked at in isolation.

65
00:05:20,200 --> 00:05:25,450
So in greater terms they are different variants or different features inside one project.

66
00:05:25,900 --> 00:05:29,530
In theory, you could also put tests in a separate project.

67
00:05:30,160 --> 00:05:31,630
With a similar setup.

68
00:05:32,110 --> 00:05:37,390
It's just the common approach to the tests, together with a code that is tested by them.

69
00:05:38,550 --> 00:05:45,480
Because of that, each toolset has its own dependency scopes and with that its own dependencies.

70
00:05:46,330 --> 00:05:52,960
So next to implementation, we also have test implementation and in parallel we also have test runtime

71
00:05:52,960 --> 00:05:54,370
only and so on.

72
00:05:54,850 --> 00:06:01,180
So to have the G Unit five API available, which is also called Jupyter, we can add a dependency to

73
00:06:01,180 --> 00:06:06,790
it using the test implementation scope or test implementation configuration.

74
00:06:21,620 --> 00:06:25,220
We also need a version of Jaguar files that we want to use.

75
00:06:25,430 --> 00:06:30,200
In this case, I'm sticking with the platform set up for centralized version.

76
00:06:30,200 --> 00:06:36,740
So in our platform build gradle, we add a dependency to such a unit five bom.

77
00:06:40,970 --> 00:06:42,500
Going back to the file.

78
00:06:43,710 --> 00:06:46,440
Such a unit five unit only needs the API.

79
00:06:46,470 --> 00:06:49,110
You also need an engine to execute the tests.

80
00:06:49,710 --> 00:06:55,650
They are different engines because the unit five cannot only execute standard unit five tests, but

81
00:06:55,650 --> 00:06:59,310
for example, also a unit for tests with a different engine.

82
00:07:00,090 --> 00:07:05,940
As we write the unit five tests, we add the standard engine, and the engine is something you can add

83
00:07:05,940 --> 00:07:07,410
to test runtime only.

84
00:07:08,590 --> 00:07:12,990
Because we depend on the G Unit five bomb through our platform.

85
00:07:13,000 --> 00:07:19,540
All J Unit five dependencies get a version if we think our project now.

86
00:07:20,510 --> 00:07:22,490
And go back to our test class.

87
00:07:22,730 --> 00:07:25,220
We see that everything compiles now.

88
00:07:27,830 --> 00:07:32,270
And if we create additional source sets like the integration tests or asset.

89
00:07:34,740 --> 00:07:38,640
We also get corresponding dependency scopes.

90
00:07:39,430 --> 00:07:42,730
To define different dependencies for that source set.

91
00:07:44,100 --> 00:07:50,100
And also intelligence will suggest us to add folders for this additional source set.

92
00:07:54,800 --> 00:08:00,740
So that's an important aspect of the greater project model to understand, especially if you work with

93
00:08:00,740 --> 00:08:06,350
tests, because then you're not only have your main sources in a project, but also have other source

94
00:08:06,350 --> 00:08:08,850
code for testing in lots projects.

95
00:08:08,870 --> 00:08:15,470
You may want to have different kind of tests and then having several tests or sets might be a good setup

96
00:08:15,590 --> 00:08:19,430
because each source set may have its own dependencies.

97
00:08:20,340 --> 00:08:26,640
But before we can run the tests, we still need to do some configuration of the test task, which is

98
00:08:26,640 --> 00:08:28,200
the task executing the tests.

99
00:08:28,230 --> 00:08:30,600
Let's look at this in the next lecture.
