WEBVTT
1
00:00:01.560 --> 00:00:06.870
We learned about centralising dependency versions to keep the versions you use under control.

2
00:00:06.900 --> 00:00:12.930
But just doing that is still a simplification when greater dependence of resolution.

3
00:00:12.930 --> 00:00:19.380
So finding out which versions to use of all the external dependencies you depend on, and in the end

4
00:00:19.380 --> 00:00:25.770
getting the jars of these dependencies, it might still use versions you never defined yourself.

5
00:00:26.270 --> 00:00:32.310
This is because if you depend on some external libraries that are out of your control, like some larger

6
00:00:32.310 --> 00:00:37.770
framework or library on base and central, then these might have transitive dependencies as well.

7
00:00:38.130 --> 00:00:44.940
So commonly used components like Google Guava are used by many different libraries with possibly different

8
00:00:44.940 --> 00:00:45.690
versions.

9
00:00:45.870 --> 00:00:52.320
So even if you define a version for guava yourself, you might end up getting another version in the

10
00:00:52.320 --> 00:00:57.420
end because transitive, another dependency pulled in another version.

11
00:00:58.400 --> 00:01:03.680
If different versions are required in different places, simplified variables then select the highest

12
00:01:03.680 --> 00:01:04.250
version.

13
00:01:04.340 --> 00:01:08.760
There are many options to further influence this dependency constraints.

14
00:01:08.780 --> 00:01:15.440
As we have seen before, actually do not only allow you to define one version, you can also open a

15
00:01:15.440 --> 00:01:21.950
configuration block to define so-called rich versions which allow you to be much detailed about which

16
00:01:21.950 --> 00:01:26.420
versions are allowed or to even force you to downgrade to a lower version.

17
00:01:26.900 --> 00:01:29.930
In this course, I won't go into more details on this.

18
00:01:29.960 --> 00:01:34.730
Many of these things are often also not needed in standard project setups.

19
00:01:36.180 --> 00:01:42.660
So the first important thing is to have this realization that there can be other dependencies and especially

20
00:01:42.660 --> 00:01:49.620
other versions of the dependencies you use added to your project through transitive dependencies.

21
00:01:50.190 --> 00:01:56.700
So if you add something, an external library or framework to your product, have a good look at what

22
00:01:56.700 --> 00:01:59.220
dependencies it may pull in in addition.

23
00:02:00.460 --> 00:02:07.300
Gradle offers you a health task to inspect us, which is the dependencies tasks.

24
00:02:07.660 --> 00:02:10.810
Make good use of this and make a decision.

25
00:02:10.810 --> 00:02:15.400
If you add a new library, if you really want to add it with all the implications that might bring.

26
00:02:16.940 --> 00:02:22.580
So the dependency starts choices dependencies of one configuration.

27
00:02:22.610 --> 00:02:26.720
That is again like the runtime class path or the compiler class path.

28
00:02:27.230 --> 00:02:33.440
So you can call it for a certain project and a certain configuration.

29
00:02:34.040 --> 00:02:38.900
So for example, we can ask Gradle, show me the dependencies of our application.

30
00:02:39.230 --> 00:02:46.070
So we address the dependencies task in the project, colon, colon dependencies, and then give the

31
00:02:46.070 --> 00:02:49.100
parameter configuration runtime class pass.

32
00:02:50.610 --> 00:02:56.190
We will see how gradle blueprints the dependency graph in the tree format.

33
00:02:56.340 --> 00:03:04.080
And here we can see, for example, how our data model dependency transitivity brings in the commons

34
00:03:04.080 --> 00:03:05.700
long dependency at runtime.

35
00:03:06.090 --> 00:03:12.030
And similar things can happen for external dependencies used for not too large projects.

36
00:03:12.300 --> 00:03:17.460
Conflicts might not be too problematic, and you can just rely on the standard resolution of Gradle

37
00:03:18.030 --> 00:03:23.160
in larger project and legacy projects that already have a lot of dependency baggage.

38
00:03:23.220 --> 00:03:26.490
It might be more complicated in this case.

39
00:03:26.490 --> 00:03:29.940
Well, offers a bunch of mechanisms to deal with conflicts.

40
00:03:29.970 --> 00:03:33.300
Going into all of these would be beyond this course.

41
00:03:34.640 --> 00:03:40.700
So I already mentioned rich versions, which you can look up in the greater documentation to use them

42
00:03:40.700 --> 00:03:43.280
to be more precise about which version you need.

43
00:03:44.290 --> 00:03:50.920
Another tool that could come in handy, which I at least want to mention, is component metadata rules.

44
00:03:51.430 --> 00:03:52.360
What is that?

45
00:03:52.570 --> 00:04:00.010
So components that come from external repositories always have some metadata with them that tell something

46
00:04:00.010 --> 00:04:01.840
about their dependencies mostly.

47
00:04:01.990 --> 00:04:10.870
So there's a jar file, but there's also another file, usually a XML file that contains the dependency

48
00:04:10.870 --> 00:04:15.040
information similar to how you put dependency information into your build files.

49
00:04:15.280 --> 00:04:21.520
From this metadata, Gradle gets the information which other dependencies it might need to pull in if

50
00:04:21.520 --> 00:04:22.750
you depend on something.

51
00:04:23.430 --> 00:04:30.090
Now, sometimes this meta data is wrong, either general or maybe for your context, something is not

52
00:04:30.090 --> 00:04:36.210
readable and maybe one of the dependencies is not needed at all because you don't use a certain part

53
00:04:36.210 --> 00:04:37.860
of the library or something like that.

54
00:04:38.460 --> 00:04:43.740
Then a component metadata can be used to adjust this in the rule.

55
00:04:43.770 --> 00:04:50.190
You manipulate this metadata just to downloaded it from the repository and then to gradle.

56
00:04:50.190 --> 00:04:52.710
It looks like the metadata would be different.

57
00:04:54.470 --> 00:04:59.840
Let's have a quick look at how you can add a component metadata rule, just that you know where to start

58
00:04:59.840 --> 00:05:01.760
if you want to look into this further.

59
00:05:02.830 --> 00:05:07.840
Component metadata rules are something that's best edit in your convention, plug in at the very base

60
00:05:07.840 --> 00:05:09.970
so that all projects have the same rules.

61
00:05:10.030 --> 00:05:13.540
The rules are registered in the dependencies dot components block.

62
00:05:16.240 --> 00:05:23.350
And the rule is best implemented in a separate class, similar to how you implement the task in a separate

63
00:05:23.350 --> 00:05:23.950
class.

64
00:05:23.980 --> 00:05:27.640
Let's assume that you want to correct the meta data of self.

65
00:05:28.100 --> 00:05:31.780
Simple doesn't really make sense, but that's the dependency we have.

66
00:05:32.410 --> 00:05:39.190
We tell Gradle for which dependencies meta data should be corrected and then we tell it which implementation

67
00:05:39.190 --> 00:05:40.210
to use for that.

68
00:05:40.840 --> 00:05:46.750
We don't have this rule yet, so it's not recognized at the moment, but we can add it by creating a

69
00:05:46.750 --> 00:05:48.010
class with this name.

70
00:05:51.010 --> 00:05:53.070
I'll do it here in Java again.

71
00:05:53.080 --> 00:05:57.040
But as I said, for the tasks you could also implement it in Kotlin.

72
00:05:58.110 --> 00:06:02.700
A component metadata rule implements the component metadata interface.

73
00:06:03.680 --> 00:06:10.220
You should also add the Add Casper rule annotation because then the results of the rule will be cached

74
00:06:10.220 --> 00:06:13.100
and it won't run every time you run your build.

75
00:06:13.130 --> 00:06:17.090
Then you implement the execute method of the rule.

76
00:06:18.320 --> 00:06:19.430
As a parameter.

77
00:06:19.460 --> 00:06:20.990
This gives you some context.

78
00:06:21.350 --> 00:06:27.130
You can access the metadata that you are about to modify and have methods to do the modification.

79
00:06:27.140 --> 00:06:30.590
Usually you want to do a modification for all variants.

80
00:06:31.160 --> 00:06:36.590
This is again the topic of configurations and variants, and then you have the possibility, for example,

81
00:06:36.620 --> 00:06:41.090
to modify the dependencies in the metadata with the with dependencies block.

82
00:06:41.420 --> 00:06:47.000
We can say, for example, that we want to remove a certain dependency with a certain detail.

83
00:06:47.150 --> 00:06:48.980
So there are much more things you can do here.

84
00:06:48.980 --> 00:06:55.550
And this is just a not very practical example of a component metadata rule so that you know where to

85
00:06:55.550 --> 00:06:59.000
plug them in and where to adjust them to your needs.

86
00:06:59.060 --> 00:07:05.840
So if you run the dependency task and you see something weird in there, which you didn't expect, and

87
00:07:05.840 --> 00:07:11.330
then find out that the metadata of one component is not as it should be, you can use such rules to

88
00:07:11.330 --> 00:07:12.080
adjust it.

89
00:07:13.750 --> 00:07:17.920
So this was the last lecture about dependency, management and Gradle.

90
00:07:18.160 --> 00:07:25.000
In this course, I just gave a very broad overview about what dependency management is and what are

91
00:07:25.000 --> 00:07:28.150
the main features you should use in a standard project setup.

92
00:07:29.010 --> 00:07:32.080
They are much more details to learn about dependency management.

93
00:07:32.100 --> 00:07:34.290
If you have complex and large projects.

94
00:07:35.510 --> 00:07:41.150
The topics I touched on give you some pointers of where to look for more information if needed.

95
00:07:42.580 --> 00:07:48.340
I will also give some references to further resources you can check out at the end of the course.

96
00:07:48.430 --> 00:07:53.860
Now, instead of spending more time on gritty dependency management details, I would like to talk about

97
00:07:53.860 --> 00:08:00.010
some more practical things that you most likely need in your project, which is configuring the testing

98
00:08:00.010 --> 00:08:01.120
of your code base.
