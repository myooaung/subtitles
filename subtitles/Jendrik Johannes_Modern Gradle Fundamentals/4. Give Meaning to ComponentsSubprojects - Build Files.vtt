WEBVTT
1
00:00:01.470 --> 00:00:03.210
Let's get back to our example.

2
00:00:03.420 --> 00:00:09.120
In the previous lecture, we defined that our software project consists of three components.

3
00:00:10.840 --> 00:00:11.890
In greater terms.

4
00:00:11.890 --> 00:00:13.300
Three subprojects.

5
00:00:14.400 --> 00:00:17.120
So far these are only empty folders.

6
00:00:17.130 --> 00:00:20.970
So if we would run Gradle, it wouldn't know what to do with these.

7
00:00:21.330 --> 00:00:25.320
Also, there are no files in them to potentially do something with.

8
00:00:25.320 --> 00:00:31.860
So for demonstration purpose, we're going to add one Java class to our data model component.

9
00:00:32.490 --> 00:00:39.960
We put this into the source main Java folder, which is the standard folder structure for greater project.

10
00:00:41.530 --> 00:00:47.080
Since Cradle and also intelligent does know that eventually this should be a Java project.

11
00:00:47.110 --> 00:00:50.890
There's also no specific tool support for creating Java classes yet.

12
00:00:52.430 --> 00:00:56.630
You can see that the class is not displayed in a package or anything like that.

13
00:00:58.630 --> 00:01:02.230
A.J. just shows us a simple folder hierarchy.

14
00:01:02.920 --> 00:01:06.280
So let's turn this into a Java library component.

15
00:01:07.140 --> 00:01:13.290
To give meaning to a subproject or component in gradle you use the build gradle file.

16
00:01:14.800 --> 00:01:21.250
So we add the build cradle CTS file to our data model project.

17
00:01:22.150 --> 00:01:29.020
We use the dot CTS extension again to say that we want to use Scotland version of the DSTL.

18
00:01:30.770 --> 00:01:37.200
Now in built files, you can do a lot of things because again, you have the full power of the common

19
00:01:37.220 --> 00:01:38.300
language available.

20
00:01:39.020 --> 00:01:44.630
If you look at many existing builds, you often find large and very complicated build files.

21
00:01:45.560 --> 00:01:51.140
Therefore, one very important aspect for me is to show you how to keep both files clean.

22
00:01:51.920 --> 00:01:56.210
A clean build file should always have a plugins block in the top.

23
00:01:56.240 --> 00:02:01.550
That's not always the case in existing builds because in older versions, Gradle offered other means

24
00:02:01.550 --> 00:02:02.900
to do similar things.

25
00:02:03.500 --> 00:02:07.280
If you start with Gradle now, please always use this plugins block.

26
00:02:08.750 --> 00:02:16.280
In the plugin block, you apply Gradle plugins, and Gradle plugins are the things that give meaning

27
00:02:16.280 --> 00:02:18.770
to a component or a sub project.

28
00:02:19.160 --> 00:02:22.100
So we want this project to be a Java library.

29
00:02:22.670 --> 00:02:25.520
Java library is a term greater to express that.

30
00:02:25.520 --> 00:02:32.210
This is a project that has Java code that could be built and then this can be used in another project,

31
00:02:32.210 --> 00:02:37.100
for example, an application that assembles several Java libraries to one application.

32
00:02:37.100 --> 00:02:37.760
In the end.

33
00:02:38.330 --> 00:02:41.000
Now you'll apply a plugin y ide.

34
00:02:42.020 --> 00:02:45.320
And Greater Corps of US, the Java Library plugin.

35
00:02:46.680 --> 00:02:54.840
Once we did this, we can link the project again in IntelliJ and we see that IntelliJ recognized the

36
00:02:54.840 --> 00:03:02.250
source main Java folder as a folder for Java sources and uses this knowledge, for example, to display

37
00:03:02.250 --> 00:03:05.310
a proper Java package instead of a plain folder structure.

38
00:03:06.870 --> 00:03:13.370
And then if we go into the message model class we created, we now have full Java tool support when

39
00:03:13.380 --> 00:03:14.850
writing code in this class.

40
00:03:15.660 --> 00:03:19.200
So let's fill this class to have some example code to work with.

41
00:04:03.810 --> 00:04:07.140
Let's also create a build file for the business logic component.

42
00:04:12.950 --> 00:04:13.340
Here.

43
00:04:13.340 --> 00:04:18.350
We also applied the Java Library plugin because this is also a Java library.

44
00:04:23.340 --> 00:04:27.030
And then we also create a build file for the project.

45
00:04:34.170 --> 00:04:42.720
And here we apply the application plugin which adds functionality for packaging and running Java applications.

46
00:04:47.070 --> 00:04:52.110
As you may assume, there are a lot of similarities between Java libraries and applications.

47
00:04:53.050 --> 00:05:00.460
For example, both have Java code that needs to be compiled or if we do testing, they both can be tested

48
00:05:00.460 --> 00:05:02.050
with Java test frameworks.

49
00:05:03.160 --> 00:05:08.830
This is quite common that you have certain build functionality that you need in all your subprojects,

50
00:05:08.830 --> 00:05:13.090
but then have some small things that differ or added on top.

51
00:05:14.390 --> 00:05:17.510
That's why Gradle allows to compose plugins.

52
00:05:18.920 --> 00:05:23.600
So there's another plugin called Java, which we could apply like this.

53
00:05:24.360 --> 00:05:30.520
So this plugin actually adds all of the Java core functionality like compiling code, testing code and

54
00:05:30.520 --> 00:05:31.840
packaging Java files.

55
00:05:32.830 --> 00:05:35.110
It's a Java library or the application plug in.

56
00:05:35.140 --> 00:05:36.940
Just add a little bit on top.

57
00:05:38.050 --> 00:05:42.970
But they automatically already apply the Java plugin, so we don't need to do this here.

58
00:05:45.280 --> 00:05:49.030
We could write it because a plugin is only applied once.

59
00:05:49.030 --> 00:05:54.970
So stating several times at a certain plugin with a certain ID is applied doesn't make a difference.

60
00:05:55.570 --> 00:06:01.870
So Composability of plugins is a very powerful feature to configure Gradle builds and we'll see in a

61
00:06:01.870 --> 00:06:03.940
bit how we can make use of that.

62
00:06:03.970 --> 00:06:09.610
Let's first see what else we might want to configure for our subprojects.

63
00:06:09.700 --> 00:06:15.130
One thing that's quite obvious when you build Java code is to configure the Java version that should

64
00:06:15.130 --> 00:06:18.850
be used for configuring Java version later.

65
00:06:18.850 --> 00:06:23.290
Nowadays as a feature called Java two chains, which will use your Lexis.

66
00:06:24.940 --> 00:06:27.580
So in this Java configuration block.

67
00:06:28.670 --> 00:06:35.270
We can define that a certain Java language version should be used for compiling and testing Java code.

68
00:06:35.750 --> 00:06:43.670
Now this configuration block here with the name Java is called an extension in Gradle because this was

69
00:06:43.670 --> 00:06:45.890
actually added by the Java plugin.

70
00:06:46.100 --> 00:06:50.540
So it's an extension to the greater DSL that the plugin adds.

71
00:06:51.380 --> 00:06:57.560
If we would remove the plugin up here again and link the project was intelligent.

72
00:06:58.730 --> 00:07:00.440
This Java configuration block.

73
00:07:00.440 --> 00:07:07.580
The Java extension is not recognized anymore because it only exists once the Java plugin was applied.

74
00:07:08.150 --> 00:07:14.780
This is another powerful feature of Gradle that the DSL can be extended by a plugin to make it more

75
00:07:14.780 --> 00:07:16.440
specific to a certain domain.

76
00:07:16.460 --> 00:07:18.620
In this case, Java projects.

77
00:07:19.400 --> 00:07:26.090
The example also shows that the core of Gradle is actually not Java specific, but it's very Java oriented

78
00:07:26.090 --> 00:07:28.160
and often used to build Java project.

79
00:07:28.190 --> 00:07:35.030
It could be used to build any kind of software with the corresponding plugins added and plugins is something

80
00:07:35.030 --> 00:07:36.980
you can develop yourself on top of.

81
00:07:36.980 --> 00:07:43.580
Greater core is just that some plugins come directly with Gradle, which could theoretically also be

82
00:07:43.580 --> 00:07:44.410
separated.

83
00:07:44.420 --> 00:07:49.970
So the Java and the Java Library and the application plugins are plugins that are packaged with Gradle.

84
00:07:51.170 --> 00:07:54.890
We'll get to other plugins that are not packaged with Gradle in a bit as well.

85
00:07:55.580 --> 00:08:02.000
So if we configure the Java version here in our data model, build Gradle file, we probably also want

86
00:08:02.000 --> 00:08:05.540
the same version configured in the business logic build file.

87
00:08:05.990 --> 00:08:10.420
So let's copy it over here and in the app components build file.

88
00:08:10.430 --> 00:08:12.470
So we copy it here as well.

89
00:08:12.890 --> 00:08:18.870
Of course, we don't want this redundancy, so the next lecture will learn how to centralize such build

90
00:08:18.890 --> 00:08:22.400
configuration and reuse it in all of our projects.

91
00:08:22.940 --> 00:08:29.810
To summarize this lecture, we have learned that we can give meaning to our own components or subprojects,

92
00:08:29.810 --> 00:08:32.090
as they are called, in technical terms.

93
00:08:32.390 --> 00:08:40.610
By applying plugin, we apply plugins in the build gradle file that we add to each of the components.

94
00:08:40.730 --> 00:08:47.630
So a greater plugin with a certain ID could also be seen as a type you give to a project.

95
00:08:47.810 --> 00:08:56.120
So we say this is a Java library by using the Java library ID for the plugin and then Gradle and the

96
00:08:56.120 --> 00:09:01.880
ID know that this is a Java library and can do something with this information.

97
00:09:02.090 --> 00:09:08.390
In the lecture, after the next we will run our gradle build and then we'll see what things the Java

98
00:09:08.390 --> 00:09:10.400
and the Java Library plugin edit.
