WEBVTT
1
00:00:01.670 --> 00:00:08.120
Now that we have an example of a full application, we can use Gradle to build and run the project,

2
00:00:08.120 --> 00:00:15.950
which means we call Gradle directly to read the structure or the model of our software project to do

3
00:00:15.950 --> 00:00:17.270
something useful with it.

4
00:00:18.270 --> 00:00:24.810
Note that although we never ran Gradle directly ourselves, Intel always ran it for us in the background

5
00:00:24.810 --> 00:00:25.750
when we did the project.

6
00:00:26.070 --> 00:00:31.500
So we actually use Gradle already to do a certain building without noticing it directly.

7
00:00:31.500 --> 00:00:37.790
The central concept in Gradle to actually do some work is the task, the greater task.

8
00:00:37.800 --> 00:00:44.910
Each plugin you apply, if it's not only a convention plug in, but a functional plugin that adds functionality

9
00:00:45.210 --> 00:00:53.970
like the Java plugin adding functionality for compiling Java code, then the plugin adds tasks tasks

10
00:00:53.970 --> 00:01:02.370
as an available on the project that applied to plugin to do certain things with the data, the files

11
00:01:02.370 --> 00:01:05.010
that are in the corresponding project.

12
00:01:05.720 --> 00:01:07.310
For Application project.

13
00:01:07.670 --> 00:01:14.510
We now have the functionality through greater tasks to compile the code, but also to run the application

14
00:01:14.510 --> 00:01:18.050
to see which tasks are available in a project.

15
00:01:18.320 --> 00:01:20.870
You can use a greater view in IntelliJ.

16
00:01:20.900 --> 00:01:28.820
So here we can find, for example, the run task of the project on the command line where we can call

17
00:01:28.820 --> 00:01:32.990
Gradle through the grade of the Gradle script.

18
00:01:33.020 --> 00:01:40.850
You can use a specific task called tasks, which prints out all the tasks available on the project.

19
00:01:44.720 --> 00:01:48.730
So that's a way to get this information outside of the ID.

20
00:01:50.030 --> 00:01:51.230
To take a closer look.

21
00:01:51.230 --> 00:01:53.110
What is happening on Google is running.

22
00:01:53.120 --> 00:01:55.340
We'll now call it from the command line.

23
00:01:56.600 --> 00:02:02.470
You could also trick out gradle build by double clicking one of the tasks in the Google view in intelligence.

24
00:02:02.720 --> 00:02:08.750
If you use the command line, you can give one or several tasks to Gradle.

25
00:02:09.820 --> 00:02:18.010
The task is addressed by a pass, which is colon name of the component or subproject which the task

26
00:02:18.010 --> 00:02:19.990
is in colon task name.

27
00:02:20.690 --> 00:02:27.200
So we could say we would like Gradle to execute the app run task.

28
00:02:28.310 --> 00:02:34.850
I'll let this console play parameter here because then we get a listed output of what Gradle was doing

29
00:02:35.120 --> 00:02:36.050
during the build.

30
00:02:36.290 --> 00:02:37.550
Let's just run this.

31
00:02:40.000 --> 00:02:46.630
At the end of the build output, we can see that our message was printed so our application did run

32
00:02:46.630 --> 00:02:47.950
and printed the message.

33
00:02:49.610 --> 00:02:54.020
Before that, we also see that Quayle executed the run to task.

34
00:02:55.440 --> 00:03:01.140
But what we can also see is that a bunch of other tasks were executed before.

35
00:03:01.910 --> 00:03:05.660
That's a very important aspect to understand about gradle tasks.

36
00:03:05.660 --> 00:03:09.350
Each task has inputs and potentially outputs.

37
00:03:10.460 --> 00:03:14.330
So the rum task has as input a number of jars.

38
00:03:14.720 --> 00:03:20.780
The so called runtime class pass the runtime class path is not just a list of folders.

39
00:03:20.780 --> 00:03:26.390
This class files Gradle knows where these class files are produced.

40
00:03:26.600 --> 00:03:33.500
So it knows that in order to get the runtime class pass, which is an input to the run task, it needs

41
00:03:33.500 --> 00:03:40.490
to execute other tasks that produce the folders that are in the runtime class path as an output.

42
00:03:41.000 --> 00:03:48.650
In this case, these are compiler Java tasks that produced class files for the project, but also for

43
00:03:48.650 --> 00:03:49.690
its dependencies.

44
00:03:49.700 --> 00:03:52.730
Data Model Project and the Business Logic Project.

45
00:03:53.180 --> 00:03:59.920
A compiled Java task like the Business Logic Compiler Java task has the business logic source files

46
00:03:59.960 --> 00:04:06.500
input, but it also has a so-called compiler class path which may contain other classes, folders or

47
00:04:06.500 --> 00:04:08.420
jobs that are needed for compilation.

48
00:04:08.420 --> 00:04:13.520
In the case of the business logic component, it depends on our data model component.

49
00:04:13.610 --> 00:04:22.520
So another input to the compiler Java task of the business logic component are the classes from the

50
00:04:22.520 --> 00:04:28.670
data model project, which are in turn produced by the compiler Java Task Offset Project.

51
00:04:28.700 --> 00:04:34.220
That's why the task here did run in this order because one task depended on the other again.

52
00:04:34.850 --> 00:04:41.840
So by knowing about the inputs and outputs of each task and how these are connected, Gradle can build

53
00:04:41.840 --> 00:04:43.700
a task graph when you call it.

54
00:04:43.700 --> 00:04:50.810
So if we call Gradle with the app run task, Gradle will build up this graph and know which task to

55
00:04:50.810 --> 00:04:52.700
execute and in which order.

56
00:04:53.130 --> 00:04:57.050
So this is one of the things that makes Gradle such a powerful tool.

57
00:04:57.410 --> 00:05:03.440
We'll learn in the follow up lectures how you can configure tasks and even add your own ones and will

58
00:05:03.440 --> 00:05:09.800
set build your own path graphs with your own automation needs and gradle will automatically figure out

59
00:05:09.800 --> 00:05:13.310
which thing it needs to execute for certain build and which are not.

60
00:05:13.790 --> 00:05:20.510
So for example, if we would just call the data model compiler Java task, Gradle wouldn't execute any

61
00:05:20.510 --> 00:05:26.720
other tasks in addition, because there's no other things needed except for the source code inside the

62
00:05:26.720 --> 00:05:31.400
data model project because the data model project does not have any dependencies.

63
00:05:31.410 --> 00:05:38.960
We can also see if we look further up this list is that before any task of our production code components

64
00:05:38.960 --> 00:05:43.070
was executed, the Gradle plugin build was built.

65
00:05:43.070 --> 00:05:49.970
So tasks from that build that compile our own convention plugins were executed first to make these plugins

66
00:05:49.970 --> 00:05:52.340
available at this part.

67
00:05:52.340 --> 00:05:54.080
Didn't take up any time at all.

68
00:05:54.260 --> 00:06:01.400
As we can see here, all these tasks in our Java plugins project are marked with up to date, which

69
00:06:01.400 --> 00:06:05.900
means that Gradle already has the result of this task once available.

70
00:06:06.380 --> 00:06:13.040
This is because this was built earlier when we did the integrating and IntelliJ needed these plugins

71
00:06:13.040 --> 00:06:19.100
to actually build up the right model of our main project, and that's the incremental building mechanism

72
00:06:19.100 --> 00:06:19.820
of Gradle.

73
00:06:21.890 --> 00:06:29.000
Because knowing about the task input and output not only allows Gradle to construct the task graph and

74
00:06:29.000 --> 00:06:31.700
execute only the needed task in the right order.

75
00:06:31.850 --> 00:06:37.310
It also allows Gradle to skip tasks that already produced an output for certain input.

76
00:06:37.640 --> 00:06:43.820
So we'll remember what the input of the output was and which output was produced, and if the input

77
00:06:43.820 --> 00:06:47.540
next time match it, it just reuses the output from the and before.

78
00:06:48.900 --> 00:06:56.340
So if we call Gradle with the task again, we can now see that all the tasks up to date and Gradle almost

79
00:06:56.340 --> 00:06:57.990
took no time at all for building.

80
00:06:58.650 --> 00:07:02.550
Let's go into our application class and change some details there.

81
00:07:11.730 --> 00:07:13.680
And now we run the build again.

82
00:07:14.460 --> 00:07:23.340
And we can see that only the compiler Java class of the application was re executed or the other compilation

83
00:07:23.340 --> 00:07:24.600
is still up to date.

84
00:07:25.400 --> 00:07:30.010
Because the other components are independent of the component.

85
00:07:30.020 --> 00:07:32.660
They are not affected by this code change.

86
00:07:32.660 --> 00:07:37.810
So we will only recompile the code that is affected by a change.

87
00:07:37.820 --> 00:07:43.910
And the same is true for any task because the up to date checking mechanism is in the core of gradle

88
00:07:43.910 --> 00:07:45.500
and applies for all tasks.

89
00:07:45.500 --> 00:07:52.310
Also tasks from community plugins or even your own tasks if you implement your own, which we'll look

90
00:07:52.310 --> 00:07:52.940
at later.

91
00:07:53.950 --> 00:07:59.770
Another mechanism which is very related and also uses a task inputs and outputs is the build cache.

92
00:08:00.610 --> 00:08:07.120
It allows Gradle to not only reuse the results of the previous build run, but results from any build

93
00:08:07.120 --> 00:08:08.860
run that was done before.

94
00:08:09.520 --> 00:08:15.850
So if you switch between different setups, like switching between different branches, Gradle can reuse

95
00:08:15.850 --> 00:08:20.560
build results from earlier when you switch back on a branch we have been on before.

96
00:08:22.670 --> 00:08:28.640
So Bill Cash, unfortunately, is not yet enabled by default, although it could be the case that this

97
00:08:28.640 --> 00:08:30.020
will happen in grade eight.

98
00:08:30.050 --> 00:08:33.050
For now, I can just recommend anyone to enable it.

99
00:08:33.080 --> 00:08:38.840
It's a stable feature because it's such a fundamental system which creator needs to know details about

100
00:08:38.840 --> 00:08:39.890
when it starts up.

101
00:08:39.920 --> 00:08:45.890
You can't configure this inside your build script and there's an additional file for these kind of things,

102
00:08:45.890 --> 00:08:48.380
which is the greater properties file.

103
00:08:49.730 --> 00:08:52.700
We put this file next to all settings file.

104
00:08:55.560 --> 00:08:59.850
And inside this file we set the orc gradle caching property to.

105
00:08:59.850 --> 00:09:00.360
True.

106
00:09:03.850 --> 00:09:05.980
Let's look at the effect this has.

107
00:09:08.160 --> 00:09:12.090
Go back to the application class and change something again.

108
00:09:13.580 --> 00:09:15.320
Let's run the good ones.

109
00:09:21.500 --> 00:09:24.290
We can see the compilation was executed.

110
00:09:26.760 --> 00:09:29.190
Go into the class again and make a change.

111
00:09:32.240 --> 00:09:33.320
Runs a bit again.

112
00:09:38.270 --> 00:09:43.220
Now go back into the class and revert the change you did before.

113
00:09:47.050 --> 00:09:54.940
If you run the ball now, you can see that Gray took the result from cash because now we ran a build

114
00:09:55.240 --> 00:10:01.390
which was exactly the same inputs to the compiled Java task as we already had before.

115
00:10:02.020 --> 00:10:08.320
So Gradle had an entry in its cache for this and just copied the result of the task from there.

116
00:10:09.180 --> 00:10:14.940
By the way, all the results typical add up in a folder called Build in the corresponding project.

117
00:10:15.390 --> 00:10:22.020
These folders may be hidden by IntelliJ so you can make them visible here by showing excluded files.

118
00:10:24.370 --> 00:10:30.550
If we go into the build folder of the project, for example, we can find the compiler classes here

119
00:10:30.550 --> 00:10:32.040
and other results.

120
00:10:32.320 --> 00:10:34.780
So build cache if you wonder about that.

121
00:10:34.810 --> 00:10:39.460
It's located in a folder called Dot Gradle inside the user directory.

122
00:10:40.330 --> 00:10:42.970
Something you typically don't need to look into.

123
00:10:43.390 --> 00:10:49.450
If a result can be taken from cash, it's copied from the build cash back into the corresponding place

124
00:10:49.450 --> 00:10:50.590
in the build folder.

125
00:10:51.010 --> 00:10:58.180
Instead of really executing the task, we have now seen how to execute available and got an introduction

126
00:10:58.180 --> 00:11:00.220
to the task concept of Gradle.

127
00:11:00.520 --> 00:11:05.290
We have seen that a task that does some work has inputs and potentially outputs.

128
00:11:06.040 --> 00:11:12.790
If a task has inputs and outputs, Gradle can reuse results from the previous build run automatically.

129
00:11:13.590 --> 00:11:17.910
Or use results from the cache if the cache is enabled.

130
00:11:18.660 --> 00:11:21.800
It also uses this information to build the task graph.

131
00:11:21.810 --> 00:11:29.010
When you start a build, which means you only define the target, so which task you eventually want

132
00:11:29.010 --> 00:11:34.770
to execute and Gradle automatically figures out which other tasks need to run in which order.

133
00:11:35.650 --> 00:11:41.860
Potentially skipping the actual run if results are taking through up to date check or through the cash.

134
00:11:42.430 --> 00:11:48.190
Now that we learned about the basics of Cradle Stars concept, we can dive deeper into how configuring

135
00:11:48.190 --> 00:11:54.400
tasks when that is needed and how you can register or even implement your own tasks.
