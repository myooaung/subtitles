WEBVTT
1
00:00:01.250 --> 00:00:08.060
At the end of the previous lecture, we saw that we created some redundancy in our configuration because

2
00:00:08.060 --> 00:00:12.110
we wanted to configure the Java version in each of our projects.

3
00:00:12.110 --> 00:00:17.420
We had to copy the corresponding configuration code into each of our three built files.

4
00:00:17.870 --> 00:00:23.000
Rather than doing that, we would like to set this version in a central place.

5
00:00:23.270 --> 00:00:27.680
So why do we need to do this or why do we need to configure the Java version?

6
00:00:27.680 --> 00:00:30.920
Can't the Java plugin just do that for us already?

7
00:00:31.100 --> 00:00:37.640
Well, the Java plugin of Gradle is a general plugin for everyone who is developing Java projects and

8
00:00:37.640 --> 00:00:40.340
folks probably want to use different Java versions.

9
00:00:40.340 --> 00:00:46.330
So there's a certain default, a certain convention that comes with greater core, which is if you don't

10
00:00:46.330 --> 00:00:50.240
test the Java version, we will just use the version you are running.

11
00:00:50.240 --> 00:00:51.440
Gradle That's currently.

12
00:00:52.230 --> 00:00:58.890
Whether this is a good default is debatable, but one default has to be chosen and greater show said

13
00:00:58.890 --> 00:00:59.370
one.

14
00:00:59.550 --> 00:01:05.400
And you probably need a different one for the Java version, but also for other things like which should

15
00:01:05.400 --> 00:01:07.590
be the default test framework you are using.

16
00:01:07.590 --> 00:01:11.010
Or in which encoding are the Java files written.

17
00:01:11.550 --> 00:01:17.130
So this is not about really extending the build with new functionality or doing something very specific

18
00:01:17.130 --> 00:01:17.820
in Java.

19
00:01:17.850 --> 00:01:20.730
It's basically about changing these conventions.

20
00:01:20.730 --> 00:01:27.390
So you want to define your own conventions for certain things that are put on top of what Gradle provides.

21
00:01:27.810 --> 00:01:34.760
It would be great to say, instead of This is a Java library saying This is my Java library.

22
00:01:34.770 --> 00:01:38.310
So a Java library with my own conventions on top.

23
00:01:39.580 --> 00:01:41.560
Same for the application.

24
00:01:42.380 --> 00:01:45.350
And that's the solution we actually going to use.

25
00:01:45.920 --> 00:01:52.060
So as we know, technically, this idea up here, which is like a type for a project, is also a greater

26
00:01:52.070 --> 00:01:52.700
plugin.

27
00:01:52.910 --> 00:01:57.080
So we would need a way to plug in, which is called my Java Library.

28
00:01:57.710 --> 00:02:03.500
Note that for now we comment out all the plugin applications of the plugin that don't exist yet.

29
00:02:03.830 --> 00:02:10.760
One weakness of the tool integration between Gradle and IntelliJ is that if a configuration is incomplete

30
00:02:10.760 --> 00:02:16.100
or has errors to sync between Gradle and IntelliJ might fail completely.

31
00:02:16.100 --> 00:02:18.920
So we won't get any update in the thing.

32
00:02:18.950 --> 00:02:21.410
If we try to zing something that has errors.

33
00:02:21.410 --> 00:02:27.950
But since we want to rethink the project several times during what's coming next, we make sure that

34
00:02:27.950 --> 00:02:31.010
our build scripts won't give any errors.

35
00:02:31.190 --> 00:02:37.760
Let's remember from the lecture about the settings file that we can define Gradle plugins locally.

36
00:02:37.910 --> 00:02:41.420
So if we go back to our settings file, we already talked about that.

37
00:02:41.420 --> 00:02:48.200
We put an included build in the plugin management block and this has a separate variable somewhere that

38
00:02:48.200 --> 00:02:49.670
defines plugins for us.

39
00:02:49.700 --> 00:02:56.630
We'll do this now and say that there's a separate build inside our folder structure here in the Gradle

40
00:02:56.630 --> 00:02:58.430
Slash Plugins folder.

41
00:03:00.820 --> 00:03:02.620
And we'll create this folder.

42
00:03:03.600 --> 00:03:06.840
Note that you could put it somewhere else if you desire.

43
00:03:07.320 --> 00:03:13.860
So this folder is now a separate gradle build that our main build to build the built application can

44
00:03:13.860 --> 00:03:19.590
look into to find additional Gradle plugins that are not available in the core of Gradle.

45
00:03:20.460 --> 00:03:26.460
In our case, we wanted to find our my Java library and our my application plugins in them.

46
00:03:28.590 --> 00:03:30.150
Because it's a separate build.

47
00:03:30.180 --> 00:03:32.610
We can give it its own settings file.

48
00:03:33.840 --> 00:03:37.650
And then build a project structure here, as we did for our main build.

49
00:03:38.880 --> 00:03:42.500
We keep it simple in this example, and for many bills is also enough.

50
00:03:42.510 --> 00:03:45.270
So we just include one sub project.

51
00:03:46.070 --> 00:03:52.310
Which we call Java plugins because we do Java development, but you can choose this names whatever fits

52
00:03:52.310 --> 00:03:54.870
best to your project and your naming schemes.

53
00:03:54.890 --> 00:04:02.390
If you do this in a real project in the settings file, we should also define a repository where Gradle

54
00:04:02.390 --> 00:04:07.580
can locate other libraries or other plugins we might want to depend on.

55
00:04:09.450 --> 00:04:17.220
Typically it's enough to define the greater plugin repository here or you own more of it.

56
00:04:20.800 --> 00:04:26.050
Note that often these are the same entries as you have in the plugin management block of the setting

57
00:04:26.060 --> 00:04:27.370
file of your main build.

58
00:04:27.880 --> 00:04:32.860
But because this is an independent build from the greater perspective, which does not know anything

59
00:04:32.860 --> 00:04:38.890
about your main build because actually has to be processed first to make plugins available, you need

60
00:04:38.890 --> 00:04:44.860
to define them here again and you need to put them in the dependency management block because here we

61
00:04:44.860 --> 00:04:52.560
do not extend the gradle that is running this build, but we create gradle extensions inside this build.

62
00:04:52.570 --> 00:04:59.020
So the product we built in this build, if you want, is greater plugin or a set of Gradle plugins.

63
00:04:59.620 --> 00:05:07.330
So now as in the main build, we create a folder that's called Java plugins and put a built file into

64
00:05:07.330 --> 00:05:07.750
it.

65
00:05:12.630 --> 00:05:20.730
If we do this again with integrity, we see that this is now also recognized as a greater project.

66
00:05:21.580 --> 00:05:28.810
So in the case of our Java plugin project here in our separate Gradle plugins build, we don't want

67
00:05:28.810 --> 00:05:35.550
to build a Java library like in our production code, but we want to define a Gradle plugin now where

68
00:05:35.550 --> 00:05:43.240
the plugins can be written in the Kotlin DSL or DSL or also in other languages like Java directly,

69
00:05:43.540 --> 00:05:46.630
which I talked a bit about in the end of the whole course.

70
00:05:47.320 --> 00:05:50.050
For now, we want to stick with the Courtland DSL.

71
00:05:50.290 --> 00:05:58.060
So to tell Gradle that this is a project in which we write great plugins using the Kotlin DSL, there

72
00:05:58.060 --> 00:06:02.140
is a specific plugin which is called Kotlin DSL.

73
00:06:02.650 --> 00:06:10.390
Note that for some implementation reason and Gradle you need to apply the plugin like this without the

74
00:06:10.390 --> 00:06:11.410
IDE notation.

75
00:06:12.240 --> 00:06:14.550
This is only for the Scotland's plugin.

76
00:06:14.820 --> 00:06:20.710
Hopefully a future creative version will also allow to write it with the ID notation for consistency.

77
00:06:20.730 --> 00:06:26.010
So now we said that this project is a project to write better plugins with the content.

78
00:06:26.140 --> 00:06:28.650
So if we zoom again.

79
00:06:30.080 --> 00:06:32.510
Intelligence also knows about it.

80
00:06:32.750 --> 00:06:40.250
And if we create a new folder now inside this project, intelligence already suggests the content source

81
00:06:40.250 --> 00:06:41.420
folder for us.

82
00:06:41.810 --> 00:06:48.410
This is knowledge it got from the greatest setup in such content DSL Gradle plugin projects.

83
00:06:48.500 --> 00:06:54.680
Great plug ins are put into this folder, so we create it and in this folder we can now write greater

84
00:06:54.680 --> 00:06:57.260
plug ins using the Kotlin DSL.

85
00:06:57.740 --> 00:07:02.570
For that, you create a file that is named like the plugin ID.

86
00:07:02.810 --> 00:07:12.170
So in our case, let's start with my Java library and then we add the extension gradle CTS as we do

87
00:07:12.170 --> 00:07:14.780
for all other files written in the content DSL.

88
00:07:15.530 --> 00:07:22.170
Note that once you create a new plugin file here, you may have to think again an intelligence for intelligence

89
00:07:22.250 --> 00:07:23.690
to pick this up correctly.

90
00:07:24.200 --> 00:07:27.080
And always, if you change the plugins, you apply.

91
00:07:27.110 --> 00:07:32.930
You also need a reason so that the extensions for the greater DSL are discovered correctly.

92
00:07:33.980 --> 00:07:39.590
And inside this file, you can write everything as you write it and build gradle files.

93
00:07:40.580 --> 00:07:48.200
So we can say we want to apply the Java Library plugin because again, this is a plugin composition

94
00:07:48.350 --> 00:07:49.750
as most plugins are.

95
00:07:49.760 --> 00:07:56.240
So we use existing plugins and then we add new conventions or new functionality on top.

96
00:07:56.330 --> 00:08:00.380
In this case, we just start by configuring the Java version here.

97
00:08:10.340 --> 00:08:12.920
Let's add another plug in my application.

98
00:08:27.830 --> 00:08:29.600
We applied the application plugin.

99
00:08:32.950 --> 00:08:35.380
And now we would also have to set the Java version.

100
00:08:35.590 --> 00:08:38.140
Of course, that would be again, a repetition.

101
00:08:39.160 --> 00:08:43.210
So here we cannot profit from the way the plugin composition works.

102
00:08:43.210 --> 00:08:43.810
And gradle.

103
00:08:44.850 --> 00:08:48.450
We can add a third plugin, which I call my Java base.

104
00:08:50.290 --> 00:08:56.500
In this plugin, we just apply the Java plugin, which is if you remember the plugin that adds most

105
00:08:56.500 --> 00:09:01.750
of Java functionality and also at the Java extension for configuring the Java version.

106
00:09:02.770 --> 00:09:09.010
The Application and livelihood plugin applies to Java plugin automatically, but we can also apply it

107
00:09:09.010 --> 00:09:12.910
here because applying it multiple times won't make a difference.

108
00:09:13.450 --> 00:09:14.500
So we apply it.

109
00:09:14.500 --> 00:09:18.040
We get the Java extension and can configure the Java version.

110
00:09:18.850 --> 00:09:21.520
And then we go to both our other plugins.

111
00:09:21.520 --> 00:09:23.380
Let's go to my application first.

112
00:09:24.330 --> 00:09:32.310
And we apply the my Java based plugin here so we can see that my application plugin is a composition

113
00:09:32.310 --> 00:09:37.860
of gradle score application plugin and our own my Java based plugin.

114
00:09:38.910 --> 00:09:41.730
And then we go into my Java library.

115
00:09:43.540 --> 00:09:50.710
And make this a composition of creators Java Library plugin and our own base Java plugin.

116
00:09:53.850 --> 00:10:02.700
When we have done all of this, we can think again an intelligent and now the new plug ins are recognized

117
00:10:02.700 --> 00:10:04.170
in all the projects.

118
00:10:06.530 --> 00:10:12.980
We don't need to configure the Java version anymore individually in the build files, but we've added

119
00:10:12.980 --> 00:10:17.600
our own conventions through our own convention plugins.

120
00:10:19.330 --> 00:10:27.460
So plugins that only reconfigure existing plugins are typically called convention plugins and they are

121
00:10:27.460 --> 00:10:34.450
often local plugins that you write directly in one of the DSLRs as we did here, to have the most compact

122
00:10:34.450 --> 00:10:37.600
and best IDE supported way of writing plugins.

123
00:10:38.380 --> 00:10:43.870
So you see that writing a plugin doesn't have to be expensive or very complicated.

124
00:10:44.260 --> 00:10:48.490
It's just a way to share a build configuration among several places.

125
00:10:48.940 --> 00:10:55.420
So in a web structure built, you should always have an additional plugin build, like the Gradle plugins

126
00:10:55.420 --> 00:11:01.330
build we created and put convention plugins into it for the shared build configuration.

127
00:11:01.480 --> 00:11:07.840
The possibility to compose plugins existing ones and your own make this very flexible.

128
00:11:08.170 --> 00:11:14.710
Speaking about existing plugins, you might also want to use plugins that are not delivered with Gradle,

129
00:11:14.710 --> 00:11:21.490
but that are published by someone else in the community, often called Community Plugins, which are

130
00:11:21.490 --> 00:11:25.090
typically located in the Gradle plugin repository.

131
00:11:25.330 --> 00:11:31.840
In your convention plugins, you can use external plugins that come from other sources, like community

132
00:11:31.840 --> 00:11:34.000
plugins from the Gradle plugin portal.

133
00:11:34.030 --> 00:11:40.390
Just as you use core Gradle plugins, Gradle plugins are the plugins that are delivered with Gradle

134
00:11:40.390 --> 00:11:42.100
like Java Library or application.

135
00:11:42.490 --> 00:11:49.570
So for example, if you want to use spotless for code quality checks, we could apply the external spotlight

136
00:11:49.570 --> 00:11:53.920
plugin which have the complete block dot spotless ID.

137
00:11:55.660 --> 00:12:02.020
However, because this plugin is not located in the core, you need to add a dependency to the built

138
00:12:02.020 --> 00:12:08.270
file of your Java plugins project to take Gradle to make the job that contains the plugin.

139
00:12:08.290 --> 00:12:13.960
Available at build time, we'll learn more about declaring dependencies in general and Gradle and some

140
00:12:13.960 --> 00:12:15.210
of the upcoming lectures.

141
00:12:15.220 --> 00:12:17.440
So for now, don't worry about the details.

142
00:12:18.010 --> 00:12:21.310
What you have to do is open the dependencies block here.

143
00:12:22.350 --> 00:12:28.950
Use the implementation keyword to define a dependency and then you need the coordinates of the plugin

144
00:12:28.950 --> 00:12:29.440
jar.

145
00:12:32.340 --> 00:12:36.780
Sea coordinates contain a version which is the important difference.

146
00:12:36.780 --> 00:12:41.760
If you look at external plugins compared to the ones that come with Gradle, the plugins that are packaged

147
00:12:41.760 --> 00:12:47.040
in Gradle are always versioned with Gradle, so you can't change their version or use a different one

148
00:12:47.040 --> 00:12:48.690
than the Gradle version you are using.

149
00:12:48.690 --> 00:12:54.690
But external plugins have a separate versioning so they can be upgraded and new versions can be made

150
00:12:54.690 --> 00:12:56.820
available even without upgrading.

151
00:12:56.820 --> 00:13:03.450
Gradle To Discover which coordinates you need for a certain plugin, you can go to the Greater Plugin

152
00:13:03.450 --> 00:13:04.590
Portal website.

153
00:13:05.670 --> 00:13:07.410
If you look up the plaque and there.

154
00:13:12.830 --> 00:13:16.700
You can find the coordinates in this block down here.

155
00:13:18.280 --> 00:13:24.850
Unfortunately, the plugin website has not been updated yet to reflect the setup with convention plugins,

156
00:13:24.850 --> 00:13:29.190
so that's why you don't get the exact thing which we are doing here there.

157
00:13:29.200 --> 00:13:33.130
But you can still find the coordinates as I'm showing here.

158
00:13:35.220 --> 00:13:39.180
In this lecture we learned how to compactly define our own Gradle plugins.

159
00:13:39.600 --> 00:13:43.760
We use it to define convention plugins directly in the Cortland DSL.

160
00:13:44.220 --> 00:13:51.090
By this, we define our own project types, so we can say that our Java libraries are not of type Java

161
00:13:51.090 --> 00:13:56.250
library, but of type my Java library, which comes with its own conventions.

162
00:13:56.550 --> 00:14:02.550
With this, you can structure all of your build configuration in multiple convention plugins.

163
00:14:02.910 --> 00:14:09.780
You can use the plugin composition to combine things in multiple ways if you have different variations

164
00:14:09.780 --> 00:14:10.710
of projects.

165
00:14:11.130 --> 00:14:18.690
But for typical Java application, having Java libraries and then an application project which is either

166
00:14:18.690 --> 00:14:24.990
directly in Java application as here or something else like a spring boot application is often enough.

167
00:14:25.080 --> 00:14:32.130
With this, you are already able to define the components of your projects with creative DSL and tweak

168
00:14:32.130 --> 00:14:33.990
them with your own conventions.

169
00:14:35.720 --> 00:14:42.380
What we are missing, though, to build a complete application is the relationship that is dependencies

170
00:14:42.380 --> 00:14:43.780
between the components.

171
00:14:43.790 --> 00:14:47.900
In the end, they need to know about each other to build a complete application.

172
00:14:48.260 --> 00:14:50.330
Let's look at this in the next lecture.
