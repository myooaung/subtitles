WEBVTT
1
00:00:01.870 --> 00:00:06.910
Before we close this section of the course about configuring, registering and implementing tasks,

2
00:00:07.300 --> 00:00:11.110
I want to take a last look at the tasks that are already available.

3
00:00:11.380 --> 00:00:16.660
If we look at the task list, you can see the tasks which you have probably already seen before.

4
00:00:16.690 --> 00:00:19.090
Build, assemble and check.

5
00:00:20.820 --> 00:00:23.190
These are so-called life cycle task.

6
00:00:23.950 --> 00:00:27.860
So this means that these tasks don't have any action implemented.

7
00:00:28.100 --> 00:00:30.500
They actually of type default task.

8
00:00:31.130 --> 00:00:34.800
They are only here to have certain anchor points and to build that.

9
00:00:34.820 --> 00:00:37.130
Users can call without thinking too much.

10
00:00:37.130 --> 00:00:39.470
Which task should I call in which situation?

11
00:00:40.130 --> 00:00:45.230
So if, for example, you just cloned the project you didn't use before, which is done in Gradle,

12
00:00:45.260 --> 00:00:50.480
you know that you can just call the build task to test and assemble the whole project.

13
00:00:52.070 --> 00:00:56.930
Assemble, on the other hand, only does the assembling, so only the compilation and packaging of code

14
00:00:57.380 --> 00:01:00.380
and check only runs, tests and called quality checks.

15
00:01:01.370 --> 00:01:03.320
But these are again, conventions.

16
00:01:03.800 --> 00:01:09.380
Since we task, build, assemble and check are added by a so-called base plugin, which is almost always

17
00:01:09.380 --> 00:01:10.730
applied to our projects.

18
00:01:10.910 --> 00:01:15.500
So in our case, if you apply the Java plugin, it also applies to base plugin in the background.

19
00:01:17.180 --> 00:01:23.390
And now if we want to say, for example, that our custom tasks are part of the build lifecycle, we

20
00:01:23.390 --> 00:01:25.160
go into our convention plugin.

21
00:01:26.190 --> 00:01:32.040
Access the tasks, the food task, and say that it depends on certain other tasks.

22
00:01:33.920 --> 00:01:36.180
Note that this is not about input and outputs.

23
00:01:36.200 --> 00:01:43.310
Now this is just wiring tasks together so that the build gets more easily accessible compared to other

24
00:01:43.310 --> 00:01:44.450
build tools like Maven.

25
00:01:44.480 --> 00:01:46.130
This is completely flexible.

26
00:01:46.370 --> 00:01:52.190
You can also create your own life cycle task if you like, to make the build more accessible, to create

27
00:01:52.190 --> 00:01:56.760
a life cycle task you just which is a new task and don't define a type at all.

28
00:01:56.780 --> 00:02:00.250
Then it will automatically be default task without action.

29
00:02:00.260 --> 00:02:05.150
So let's just a task called load all which does even more than the task.

30
00:02:05.330 --> 00:02:06.740
Just as an example here.

31
00:02:07.550 --> 00:02:12.350
Note that lifecycle task is no concept encoded in the task types in gradle.

32
00:02:12.380 --> 00:02:15.500
It just means this is a task that has no action.

33
00:02:15.620 --> 00:02:21.260
So sometimes we would hard to see which are lifecycle tasks and which are real actionable tasks that

34
00:02:21.260 --> 00:02:22.040
do something.

35
00:02:23.000 --> 00:02:26.690
But you can use lifecycle tasks to make a nice build setup.

36
00:02:26.930 --> 00:02:32.490
If you add a group and description to them, you can make it easy through them for people to work with

37
00:02:32.490 --> 00:02:37.220
the build that are not so familiar with all the details that are implemented in custom tasks, for example.

38
00:02:38.280 --> 00:02:39.210
With this.

39
00:02:39.210 --> 00:02:42.630
You now got an overview about the task concept in Gradle.

40
00:02:43.290 --> 00:02:48.870
You learned that through task inputs and outputs, creating those task dependencies can do up to date

41
00:02:48.870 --> 00:02:49.350
checking.

42
00:02:49.350 --> 00:02:53.520
So incremental building and caching this works for any task.

43
00:02:53.520 --> 00:03:00.030
Also your task and task implementation if you use the Gradle specific types to define inputs and outputs.

44
00:03:00.980 --> 00:03:07.040
With this, the mechanism can be used for any kind of custom automation inside the task action.

45
00:03:07.070 --> 00:03:13.640
You can write whatever code you need and also include existing libraries or call other tools.

46
00:03:13.940 --> 00:03:20.420
As long as you define inputs and outputs of your tasks or up to date and caching mechanisms work well.

47
00:03:21.020 --> 00:03:24.680
But you can use lifecycle tasks to make a nice build setup.

48
00:03:25.460 --> 00:03:30.380
Next, we'll move away from tasks and talk more about dependency management.
