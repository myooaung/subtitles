1
00:00:01,500 --> 00:00:07,020
Going back to the dependencies blocks of our built files, we see that we have started to set up versions

2
00:00:07,020 --> 00:00:09,810
in several files, even similar versions.

3
00:00:09,810 --> 00:00:14,310
So we have the logger API and the logger implementation.

4
00:00:14,310 --> 00:00:19,770
But one is the dependency in the business logic component, the other in the app component in a good

5
00:00:19,770 --> 00:00:20,790
project setup.

6
00:00:20,820 --> 00:00:28,200
These versions should all go from the book Gradle Files because the versions should be aligned everywhere

7
00:00:28,200 --> 00:00:30,180
independent of where dependencies are.

8
00:00:30,210 --> 00:00:36,270
Because in the end, when we have the runtime class path of the complete application, there can always

9
00:00:36,270 --> 00:00:41,670
only be one version of a certain dependency because that's how Java is working.

10
00:00:41,670 --> 00:00:45,960
It can't load different versions of the same class, for example.

11
00:00:47,470 --> 00:00:51,100
At least not without combining it with other runtime environments.

12
00:00:51,110 --> 00:00:58,120
Like for most Java or Java related setups, you don't want any duplication of classes.

13
00:00:58,120 --> 00:00:59,530
So what Grail is doing?

14
00:00:59,530 --> 00:01:04,270
If there are different versions of a thing, it will do a conflict resolution deciding to pick only

15
00:01:04,270 --> 00:01:10,020
one of these versions and to avoid unnecessary conflicts and clean versions set up.

16
00:01:10,030 --> 00:01:12,580
It's good to centralize the versions in one place.

17
00:01:13,270 --> 00:01:17,800
There are two different solutions provided by Gradle, which are both valid for use.

18
00:01:17,800 --> 00:01:23,230
The one is a so called platform project, the other is a so called dependency versions catalog.

19
00:01:23,500 --> 00:01:28,060
Both have advantages and disadvantages, so I'm going to show you both of them.

20
00:01:28,240 --> 00:01:33,430
And then if you have a related project, you can see which one fits best in your case.

21
00:01:33,970 --> 00:01:38,680
It also doesn't really matter which one you choose as long as you do the centralization, that's a really

22
00:01:38,680 --> 00:01:39,580
important step.

23
00:01:40,240 --> 00:01:45,670
So let's start with a platform concept, a related concept you should understand first is the concept

24
00:01:45,670 --> 00:01:47,290
of dependency constraints.

25
00:01:47,830 --> 00:01:55,930
This allows us to separate the dependency to a component like the group and the name coordinates from

26
00:01:55,930 --> 00:01:56,740
the version.

27
00:01:58,000 --> 00:02:05,080
We can do this directly in the file here so we can remove the version from the common slang dependency,

28
00:02:05,080 --> 00:02:06,940
only keeping the group in the name.

29
00:02:07,150 --> 00:02:12,160
And then instead we add a dependency constraint in the dependency constraints block.

30
00:02:13,670 --> 00:02:17,150
Dependency constraints are just notated like dependencies.

31
00:02:18,010 --> 00:02:20,890
But they don't add a dependency.

32
00:02:21,130 --> 00:02:25,330
They don't lead to common slang available be available in this project.

33
00:02:25,360 --> 00:02:30,700
They just say, if you want common lung, here's some information about which version to pick.

34
00:02:31,090 --> 00:02:37,840
That's why these constraints here can be added to all of our projects without changing anything on the

35
00:02:37,840 --> 00:02:38,850
dependencies.

36
00:02:38,860 --> 00:02:45,580
But if we take these constraints and put them into a central place, then we can re-use that everywhere.

37
00:02:46,150 --> 00:02:49,090
Such a central place is a platform project.

38
00:02:50,320 --> 00:02:53,200
A platform project is a separate Gradle project.

39
00:02:53,680 --> 00:02:59,560
You could add it just as another sub project, but for good structuring because this is more gradle

40
00:02:59,560 --> 00:03:00,540
related thing.

41
00:03:00,550 --> 00:03:04,090
I prefer to put it also into the gradle directory.

42
00:03:04,090 --> 00:03:10,060
So I do it as a separate included built called Gradle platform.

43
00:03:10,510 --> 00:03:16,900
So what I will do now I'll go back to our settings file and add another small included build which I

44
00:03:16,900 --> 00:03:20,500
put into the cradle slash platform directory.

45
00:03:23,870 --> 00:03:26,210
Now because this is also a great build.

46
00:03:26,240 --> 00:03:29,210
It can get a build greater CTS file.

47
00:03:31,800 --> 00:03:37,410
And then because this is a Java platform, we apply the Java platform plugin.

48
00:03:41,720 --> 00:03:43,430
And into the dependency constraint.

49
00:03:43,430 --> 00:03:47,390
BLOCK We put the dependency constraints we had before.

50
00:03:48,620 --> 00:03:54,140
Note that in a Java platform project, the only scope or configuration you need is API.

51
00:03:54,290 --> 00:03:56,540
The others are also not available.

52
00:03:57,140 --> 00:04:02,880
This means that the constraints are always visible to the outside transitivity, which makes sense.

53
00:04:02,900 --> 00:04:07,370
Remember that defining the constraints doesn't add any dependencies.

54
00:04:07,910 --> 00:04:15,670
A constraint for certain dependency is only used if that dependency turns up through a dependency declaration

55
00:04:15,680 --> 00:04:17,000
one of our components.

56
00:04:17,150 --> 00:04:20,510
Otherwise, the constraints are just not put into action.

57
00:04:20,900 --> 00:04:25,580
Now what is the Java platform compared to, let's say, a Java library?

58
00:04:26,950 --> 00:04:28,120
It's quite similar.

59
00:04:28,150 --> 00:04:34,510
Only that a platform only defines dependency constraints and possibly also dependencies.

60
00:04:34,720 --> 00:04:38,710
So it doesn't have any code or any jar or anything like that attached to it.

61
00:04:38,740 --> 00:04:42,100
It's basically like a library minus the actual code.

62
00:04:43,840 --> 00:04:50,260
So concept of a Java platform on Gradle is inspired from the concept of builds of materials which you

63
00:04:50,260 --> 00:04:51,820
might know from Maven.

64
00:04:52,240 --> 00:04:59,440
Build of material in that context is just a file XML file that basically contains dependency constraints

65
00:04:59,440 --> 00:05:00,310
information.

66
00:05:00,400 --> 00:05:06,670
So many libraries on Maven Central that are composed of several components that have the same version.

67
00:05:06,940 --> 00:05:12,550
Also publish a bomb, which is in greater terms, a platform or a Java platform.

68
00:05:13,420 --> 00:05:19,810
So if you find the term bomb in some dependency, you can think of this as the same as the Java platform

69
00:05:19,810 --> 00:05:20,410
and Gradle.

70
00:05:21,850 --> 00:05:28,270
In addition to defining dependency constraints here, we can also define dependencies to another platform

71
00:05:28,270 --> 00:05:33,400
which will pull in all the dependency constraints defined in that platform.

72
00:05:33,910 --> 00:05:39,310
As an example, we could add the bottom of the JSON processing libraries checksum.

73
00:05:42,910 --> 00:05:47,350
For libraries that don't have a bomb, we add directly a constraint here.

74
00:05:47,980 --> 00:05:52,860
So this platform we have created is now just a collection of version constraints.

75
00:05:52,870 --> 00:05:56,860
So tells us something about the versions we want to use if needed.

76
00:05:58,800 --> 00:06:04,860
If you make this platform available in all of our components, the resolution engine of Gradle will

77
00:06:04,860 --> 00:06:06,310
pick versions from here.

78
00:06:06,330 --> 00:06:09,240
If we have dependencies that need a version.

79
00:06:09,900 --> 00:06:12,310
So how do we make the platform available?

80
00:06:12,330 --> 00:06:18,780
We can do it by adding a dependency to our platform similar to how we add dependencies to other platforms

81
00:06:18,780 --> 00:06:19,170
here.

82
00:06:20,330 --> 00:06:25,970
We need to make sure that we set a group for the platform so that we can address it as something to

83
00:06:25,970 --> 00:06:26,720
depend on.

84
00:06:28,220 --> 00:06:33,760
And now we add a dependency to the platform in our Business Logic Project.

85
00:06:34,010 --> 00:06:38,630
Make sure for platform dependency to always use the platform keyword.

86
00:06:39,810 --> 00:06:46,110
This is needed because there may be components that provide both a platform and an actual implementation.

87
00:06:46,770 --> 00:06:50,370
So this makes sure that Gradle chooses the platform in this case.

88
00:06:50,900 --> 00:06:56,100
This is again related to configurations or variants in dependency management.

89
00:06:57,140 --> 00:07:02,870
So since we want to use the same dependency versions everywhere, we should add the platform dependency

90
00:07:02,870 --> 00:07:09,230
to all of our components and all our build files, and then we can remove the versions everywhere.

91
00:07:14,030 --> 00:07:18,950
Note that you could also add this dependency in our base convention plugin.

92
00:07:18,980 --> 00:07:21,980
Then you don't need to copy paste it into all the build files.

93
00:07:22,520 --> 00:07:29,180
In such cases, I think both solutions are fine because copying it here still shows us very clearly

94
00:07:29,180 --> 00:07:31,190
what our components depend on.

95
00:07:31,190 --> 00:07:35,450
So a little bit of duplication in this case isn't too bad in my mind.

96
00:07:36,170 --> 00:07:42,260
We learned about the concept of dependency constraints, which allow you to separate the dependency

97
00:07:42,260 --> 00:07:44,330
definition from the version.

98
00:07:45,080 --> 00:07:50,480
And we have looked at platforms as a concept to collect constraints so that you have some in central

99
00:07:50,480 --> 00:07:54,080
place which you can then reuse in all your components.

100
00:07:55,000 --> 00:08:02,230
An alternative to separating version from the dependencies is to centralize the complete dependency

101
00:08:02,230 --> 00:08:04,960
with the version in the dependency version catalog.

102
00:08:05,620 --> 00:08:07,480
We look at this alternative now.
