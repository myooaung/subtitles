WEBVTT
1
00:00:00.990 --> 00:00:07.410
If you are a Java developer, one thing that may put you off when starting using Gradle is that you

2
00:00:07.410 --> 00:00:11.880
have either to learn Kotlin or Groovy to do the configuration.

3
00:00:12.540 --> 00:00:19.350
Hopefully I showed in this course that for the basic setups you mostly need to know the greater DSL

4
00:00:20.100 --> 00:00:23.010
which you access via Kotlin or groove notation.

5
00:00:23.160 --> 00:00:27.300
But you don't need to know all the details about the Groovy or the Kotlin language.

6
00:00:27.300 --> 00:00:33.240
But if you want to keep your exposure to Groovier Kotlin to a minimum, you can actually write a lot

7
00:00:33.240 --> 00:00:40.530
of build configuration in Java because as mentioned, in the end, everything you do in a build configuration

8
00:00:40.530 --> 00:00:43.050
is done through some Java API.

9
00:00:44.010 --> 00:00:47.820
Now what you can't write in Java is the settings file or the build files.

10
00:00:48.180 --> 00:00:51.570
So in our example project, we keep them in Scotland.

11
00:00:51.600 --> 00:00:56.370
You can also keep them groovy if you just switched over because you followed the previous lecture.

12
00:00:58.080 --> 00:01:04.680
But then for our convention plugins, we have the choice to write the plugins in any JVM language,

13
00:01:04.680 --> 00:01:10.680
including Java directly and not use a DSL for that.

14
00:01:10.950 --> 00:01:18.450
Instead of applying the Kotlin DSL or the Groovy Gradle plugin here in the build file of our Gradle

15
00:01:18.450 --> 00:01:23.040
Plugins project, we apply the Java Gradle plugin.

16
00:01:25.230 --> 00:01:30.480
This plugin is actually also applied automatically if you use one of the other tools, so you could

17
00:01:30.480 --> 00:01:32.960
even combine several approaches.

18
00:01:32.970 --> 00:01:36.390
But let's stick to the Plain Java Gradle plugin for now.

19
00:01:36.810 --> 00:01:40.890
If we do that, we won't have a Kotlin or Groovy Source folder anymore.

20
00:01:40.980 --> 00:01:47.790
We just have a Java source folder as an enormous Java project, but still where you would expect us

21
00:01:47.790 --> 00:01:53.700
to write great plugins in here to write a greater plugin in Java, you create a class.

22
00:01:54.180 --> 00:02:00.300
Let's start with our base plugin and create a Java class called My Base Plugin.

23
00:02:04.880 --> 00:02:09.500
The class has to implement the plugin interface with the project type parameter.

24
00:02:10.280 --> 00:02:15.350
It can also be abstract, similar to tasks or other custom created types you write.

25
00:02:18.770 --> 00:02:25.550
And then in the plugin you have to implement the apply method, which gets a project as a parameter.

26
00:02:27.800 --> 00:02:31.460
And in this method we now can write our build configuration.

27
00:02:31.700 --> 00:02:37.850
Note that the project you get in here is a place where you can call all kinds of methods on and do the

28
00:02:37.850 --> 00:02:38.480
configuration.

29
00:02:38.480 --> 00:02:45.330
So that and that's exactly the API you also access when you write Gradle configuration in Kotlin or

30
00:02:45.330 --> 00:02:48.460
Groovy, but in a way that is else script.

31
00:02:48.470 --> 00:02:51.200
The project is the context you are already in.

32
00:02:51.440 --> 00:02:58.040
So you can just write something which is then a method or a property on the project type.

33
00:02:58.880 --> 00:03:05.000
So if you navigate into project here, you basically see the entry API of each gradle script.

34
00:03:05.780 --> 00:03:11.810
Now before we start filling the API method here, let's create two more classes for all two other convention

35
00:03:11.810 --> 00:03:12.530
plugins.

36
00:03:15.050 --> 00:03:20.030
My Java Library plugin and my Java application plugin.

37
00:04:11.750 --> 00:04:16.820
Once we have created all these classes, we need to specify the plugin.

38
00:04:16.820 --> 00:04:25.190
ID remember when we use Scotland's URL for the convention plugins, the plugin ID was derived from the

39
00:04:25.190 --> 00:04:28.280
name of the file we used for the convention plugins.

40
00:04:28.610 --> 00:04:35.900
Now that we implement the plugins and classes, we need to specify the plugin ID explicitly in the build

41
00:04:35.900 --> 00:04:39.290
file of the plugins built for this.

42
00:04:39.290 --> 00:04:42.740
The Java Gradle plugin at the great plugins extension.

43
00:04:43.220 --> 00:04:53.270
Here we can list all our three plugins, say which ID they should have and map these to the corresponding

44
00:04:53.270 --> 00:04:55.820
classes that implement the plugin.

45
00:05:54.730 --> 00:05:58.640
These classes could also be written and Groovy or Portland or Scala.

46
00:05:58.660 --> 00:06:04.390
If you apply the corresponding additional plugin to this build so that support for the corresponding

47
00:06:04.390 --> 00:06:05.980
language becomes available.

48
00:06:07.180 --> 00:06:15.940
What I will do now is translating everything that we had in our Scotland's L Convention plugins into

49
00:06:15.940 --> 00:06:18.370
the Java notation, the convention plugins.

50
00:06:19.000 --> 00:06:24.130
I'll do this line by line so then you can see how things relate.

51
00:22:46.140 --> 00:22:50.790
Now that we have written all our convention plugins in Java, we can sync the project again.

52
00:22:50.790 --> 00:22:57.870
In IntelliJ we can see that everything still works as before and we can run, builds and so on.
