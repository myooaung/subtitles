WEBVTT
1
00:00:00.780 --> 00:00:05.850
We now have complete example project set up with code compilation and testing.

2
00:00:06.300 --> 00:00:10.650
For all the configuration I did in this project, I use Creative Scotland ESL.

3
00:00:11.520 --> 00:00:12.120
Now.

4
00:00:12.120 --> 00:00:17.010
As I explained the introduction, Quails Castle is not bound to Kotlin.

5
00:00:17.730 --> 00:00:24.570
It's technically a Java API, so any Java language could be used to configure Gradle.

6
00:00:25.400 --> 00:00:30.710
And whatever you use there, you still use the same DSL or the same API.

7
00:00:31.250 --> 00:00:34.700
So for Gradle, it doesn't matter which option you choose.

8
00:00:35.630 --> 00:00:40.640
It's the same DSL just for slightly different syntax for you when you write it.

9
00:00:41.660 --> 00:00:49.430
Now, the most popular alternative to using the cotton version of the greater DSL is the groovy version

10
00:00:49.430 --> 00:00:57.110
of the great DSL, which is actually the first cradle introduced before the Kotlin variant was added.

11
00:00:57.860 --> 00:01:02.990
That's why a lot of examples and also a lot of builds used the groovy DSL.

12
00:01:03.920 --> 00:01:11.540
If you use the Kotlin DSL, as I suggest in this course, you might still find a lot of examples or

13
00:01:11.540 --> 00:01:15.320
answers to questions written in the groovy DSL.

14
00:01:15.470 --> 00:01:19.200
So to give you some ideas of how the syntax is map.

15
00:01:19.220 --> 00:01:22.940
I'll show you some examples of things that are often a bit different.

16
00:01:23.780 --> 00:01:29.750
We will do that by switching things in our example from the DSL to groovy DSL.

17
00:01:30.630 --> 00:01:33.420
Note that there's no problem to make these notations.

18
00:01:33.420 --> 00:01:38.160
Basically, you can decide for every single file which notation to use.

19
00:01:40.380 --> 00:01:47.840
So to switch to the groovy DSL for settings file or build file, we just need to remove the dot cts

20
00:01:47.850 --> 00:01:48.630
extension.

21
00:01:49.380 --> 00:01:51.420
Let's start doing this for the settings file.

22
00:01:52.530 --> 00:01:59.760
We see that the file still works because the syntax we used in Scotland here also works in Ruby.

23
00:02:01.150 --> 00:02:03.670
We do the same for our build files.

24
00:02:06.260 --> 00:02:07.100
Also here.

25
00:02:07.990 --> 00:02:11.300
It's the syntax we use in Scotland still works and groovy.

26
00:02:11.900 --> 00:02:16.010
Let's take a closer look at the Bert file of the Business Logic Project.

27
00:02:17.500 --> 00:02:25.210
While this notation works, there are alternative notations which are just provided by the groovy language

28
00:02:25.240 --> 00:02:28.630
that are often used which are not available in Kotlin.

29
00:02:29.860 --> 00:02:35.050
The first thing is that in Groovy, you can call methods without using parentheses.

30
00:02:35.620 --> 00:02:40.570
Now, every time you see parentheses in the script, it's effectively a message call.

31
00:02:40.750 --> 00:02:47.650
Because when the build script is interpreted by Gradle, it modifies a Java object, a memory by calling

32
00:02:47.650 --> 00:02:48.490
methods on it.

33
00:02:50.050 --> 00:02:56.470
So if we remove the parentheses, this still works because Ruby allows you to call method without using

34
00:02:56.470 --> 00:02:59.170
the parenthesis and in greater build script.

35
00:02:59.320 --> 00:03:04.210
It somehow became common to do it like this, so you'll often see no parenthesis.

36
00:03:04.330 --> 00:03:09.830
And this won't work in Kotlin, so you would have to add them if you move from movie notation to quadratic

37
00:03:09.850 --> 00:03:10.480
notation.

38
00:03:11.230 --> 00:03:16.960
Another common difference is that Ruby also allows to use single text for strings.

39
00:03:17.320 --> 00:03:22.090
So often you see IDs or names notated like this.

40
00:03:22.540 --> 00:03:28.210
So if you have a bit of Ruby code that you want to move to, Kotlin usually can do a find and replace

41
00:03:28.210 --> 00:03:30.190
of single text by double ticks.

42
00:03:31.640 --> 00:03:37.240
Next, let's also convert our convention plugins from Scotland DSL to groovy DSL.

43
00:03:39.250 --> 00:03:45.970
You may remember that we applied the plug and called Kotlin DSL in the build file of our Gradle Plugins

44
00:03:45.970 --> 00:03:46.690
project.

45
00:03:48.680 --> 00:03:54.230
And this plug in tells Gradle that we want to write convention plug ins in the Cortland DSL.

46
00:03:55.340 --> 00:04:01.580
If you want to move to Groovy, we need to apply a different plugin which is called Groovy Gradle plugin,

47
00:04:01.970 --> 00:04:04.550
which is a bit inconsistent, but that's how it is.

48
00:04:04.970 --> 00:04:10.490
So if you apply that plugin creator, no expects us to write the convention plugins and groovy.

49
00:04:11.320 --> 00:04:18.220
And as we've learned about the assets, who resources would end up in the source main ruby folder.

50
00:04:18.340 --> 00:04:22.960
So instead of having a source Scotland folder here, we need a source manga ruby folder.

51
00:04:22.990 --> 00:04:24.160
So let's rename it.

52
00:04:25.560 --> 00:04:31.770
After we have done this, we can rename all our scripts again, removing the doctor's extension, and

53
00:04:31.770 --> 00:04:33.630
then they become groovy scripts.

54
00:04:35.150 --> 00:04:36.680
So here they are now.

55
00:04:36.680 --> 00:04:42.410
A few adjustments we need to do for groovy because the notation is really different to the Kotlin notation.

56
00:04:44.270 --> 00:04:50.500
The first is all the places where we refer to types, so to Java classes which were when we were just

57
00:04:50.510 --> 00:04:53.230
at a task or a component metadata rule.

58
00:04:54.470 --> 00:04:58.820
Movie doesn't have this type parameter like mutation that Kotlin has four types.

59
00:04:58.940 --> 00:05:05.960
So you remove this part instead, you pass in the class as a second argument to the register method.

60
00:05:07.350 --> 00:05:11.740
In Java, you would write that class after the name in Ruby.

61
00:05:11.770 --> 00:05:13.060
You don't need to do that.

62
00:05:13.990 --> 00:05:18.580
So we update all the places where we refer to a class like this.

63
00:05:22.220 --> 00:05:27.450
Both in our base convention plugin and our application convention plugin.

64
00:06:02.950 --> 00:06:03.550
Now.

65
00:06:03.550 --> 00:06:05.050
The script's already work.

66
00:06:06.160 --> 00:06:11.410
So there's one tricky thing that you should change in the movie Dstl, which I mentioned when we talked

67
00:06:11.410 --> 00:06:13.000
about configuring tasks.

68
00:06:13.420 --> 00:06:17.560
So if you have an existing task in Kotlin, you can just write tasks.

69
00:06:17.840 --> 00:06:21.040
Name, for example, tasks the test as we did here.

70
00:06:22.180 --> 00:06:28.780
I also said that this map's down to task, that name test, which you can also use now in the groovy

71
00:06:28.840 --> 00:06:29.500
DSL.

72
00:06:29.530 --> 00:06:36.460
You should always use the named notation, although the other notation also seems to work.

73
00:06:36.670 --> 00:06:42.250
But it's behaving a bit different because it reflects an old way of configuring tasks from all the gradle

74
00:06:42.250 --> 00:06:43.000
versions.

75
00:06:43.540 --> 00:06:51.040
If you use that notation, it will cause the task to be configured directly every time a build is started.

76
00:06:51.800 --> 00:06:57.320
Which has a practical effect that also tasks that will not run in the boats, which are not part of

77
00:06:57.320 --> 00:07:03.560
the task graph, are instantiated and configured, which in a large build can have a huge performance

78
00:07:03.560 --> 00:07:04.210
impact.

79
00:07:05.120 --> 00:07:10.410
That's why this newer method of configuring task was introduced together with Scotland DSL.

80
00:07:11.110 --> 00:07:17.290
This is really dangerous because the same notation means different things in both cells in this case.

81
00:07:17.680 --> 00:07:21.640
So if in doubt, use the name notation to configure a task.

82
00:07:22.680 --> 00:07:28.880
There are many other small details that may differ between these two DSL variants and especially in

83
00:07:28.880 --> 00:07:29.490
Groovy.

84
00:07:29.510 --> 00:07:33.230
They are different contexts to express the same thing.

85
00:07:33.470 --> 00:07:36.080
But also the Scotland has places like this.

86
00:07:36.380 --> 00:07:42.590
So if you encounter something which looks weird to you, it often does not use any new gradle concept,

87
00:07:42.590 --> 00:07:46.550
but it's just a different notation for something you might already know about.

88
00:07:47.240 --> 00:07:54.650
It helps to remember that all of these things are an API call in the end to the Gradle API, so you

89
00:07:54.650 --> 00:08:00.800
can have a look at the API by navigating into it from the ID for example, which works especially well

90
00:08:00.800 --> 00:08:01.440
in Scotland.

91
00:08:01.440 --> 00:08:08.810
Dstl to check what methods, for example, are there and if any of these matches the notation you see.

92
00:08:09.670 --> 00:08:15.280
Also, if you look into the great user manual, to which I'll also provide some links for further readings

93
00:08:15.280 --> 00:08:20.770
of the topics we covered in this course, then you'll see that for each example, you can switch between

94
00:08:20.770 --> 00:08:24.340
the Kotlin DSL and the groovy DSL representation.

95
00:08:25.190 --> 00:08:28.210
This may also help to understand how certain things map.

96
00:08:29.850 --> 00:08:37.170
Alternatively, to using one of these two DSL variants, you can also use a JVM language like Java directly

97
00:08:37.170 --> 00:08:38.460
to configure Gradle.

98
00:08:38.790 --> 00:08:42.780
This will be the last thing to look at in the final lecture of this course.
