WEBVTT
1
00:00:01.770 --> 00:00:07.860
Another recently added solution to Gradle to centralize dependency versions is the dependency version

2
00:00:07.920 --> 00:00:12.390
catalog compared to a Java platform project.

3
00:00:12.510 --> 00:00:19.530
This is not a separate Gradle project or component, but simply a file that follows a certain structure.

4
00:00:20.770 --> 00:00:28.530
So to get a catalog, we just need to add a file called Lipstick Versions thumbnail to your gradle folder,

5
00:00:28.540 --> 00:00:32.950
and then Gradle will automatically pick that up in the file.

6
00:00:32.980 --> 00:00:37.780
You can define several things, but the most important part is the library section.

7
00:00:38.710 --> 00:00:45.910
Here you can define aliases for libraries with group name and version coordinates.

8
00:00:46.330 --> 00:00:54.310
So for those three libraries, we used Petrie Common Lang as a lab for API and self for simple.

9
00:00:54.400 --> 00:00:57.550
We could define three aliases like this.

10
00:01:44.000 --> 00:01:52.340
Once you've done this, the aliases become accessible through an extension called Lips in the build

11
00:01:52.340 --> 00:01:54.720
file of our business logic component.

12
00:01:54.740 --> 00:02:00.290
We can now define dependencies by taking entries out of the catalog.

13
00:02:00.620 --> 00:02:04.110
So here you use the aliases you defined.

14
00:02:04.130 --> 00:02:07.040
For example, Lipscomb and Scott Lang.

15
00:02:11.560 --> 00:02:17.600
The nice thing is that if you have the same dependencies in several places, you can use the same alias

16
00:02:17.600 --> 00:02:23.270
in all the build files and you also get code completion and error reporting if the alias does not exist.

17
00:02:24.200 --> 00:02:29.470
On the other hand, you have to come up with aliases and remember which alias maps to which dependencies,

18
00:02:29.480 --> 00:02:31.280
or at least look it up in the catalog.

19
00:02:32.000 --> 00:02:35.390
Also, the catalog is again a different file in different format.

20
00:02:35.630 --> 00:02:38.750
This could be an advantage because it's maybe easier readable.

21
00:02:38.780 --> 00:02:43.340
On the other hand, you have to know about yet another file format that somehow involved in setting

22
00:02:43.340 --> 00:02:51.110
up your build and use the separation between dependencies and dependency constraints.

23
00:02:51.140 --> 00:02:56.990
If you use a catalog like this, although you might not care about this and then using a catalog, this

24
00:02:56.990 --> 00:02:57.700
just as fine.

25
00:02:57.710 --> 00:02:58.880
It's using a platform.

26
00:03:01.010 --> 00:03:07.100
I think for most projects, both solution works fine, so feel free to choose what tweets you better.

27
00:03:07.580 --> 00:03:09.650
If you use this in a real project.

28
00:03:12.260 --> 00:03:20.180
So I've presented both the idea of Java platform project with dependency constraints and the dependency

29
00:03:20.180 --> 00:03:21.170
version catalog.

30
00:03:21.350 --> 00:03:24.200
Both are solutions to centralized dependencies.

31
00:03:25.900 --> 00:03:31.050
They are even more possibilities to avoid versions in build files.

32
00:03:31.060 --> 00:03:35.650
For example, you can use dynamic versions in combination with dependency logging.

33
00:03:35.920 --> 00:03:39.610
That's not a widely used solution right now, so I won't go into this.

34
00:03:40.300 --> 00:03:46.150
In the end, the most important thing from my perspective is to get versions out of the build files

35
00:03:46.150 --> 00:03:52.930
and get them into a central place so that you avoid unnecessary conflicts and chaos because versions

36
00:03:52.930 --> 00:03:56.290
are something you usually regularly need to upgrade.

37
00:03:57.430 --> 00:04:03.280
Even if you don't change anything, your code security patches might force you to upgrade version of

38
00:04:03.280 --> 00:04:04.630
external dependencies.

39
00:04:04.810 --> 00:04:10.150
So it's important to have this centralized and accessible so that upgrades are not too painful.
