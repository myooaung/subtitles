1
00:00:01,670 --> 00:00:02,870
To test our code.

2
00:00:02,930 --> 00:00:09,050
We have written a test using unit five and edit the corresponding dependencies in the build gradle file

3
00:00:09,050 --> 00:00:10,820
of the Business Logic Project.

4
00:00:10,820 --> 00:00:14,960
But before we can run the test, we still need a bit of configuration to do.

5
00:00:16,010 --> 00:00:18,440
Tests are running gradle by a task.

6
00:00:18,440 --> 00:00:25,040
The test task, which is a quite powerful task that not only supports several test frameworks but also

7
00:00:25,040 --> 00:00:27,110
allows you to run tests in parallel.

8
00:00:27,650 --> 00:00:34,010
We configure the task in our base convention plugin so that it's the same for all our projects.

9
00:00:34,310 --> 00:00:39,170
We configure it as we have learned by accessing it through the tasks container.

10
00:00:39,530 --> 00:00:42,080
So the task is called tasks dot test.

11
00:00:43,110 --> 00:00:46,850
The first thing to configure is which test framework to use by default.

12
00:00:46,850 --> 00:00:50,210
The task is for historic reasons configured to use.

13
00:00:50,220 --> 00:00:51,080
Table four.

14
00:00:51,080 --> 00:00:56,540
We say that we want to use Unit five by the used unit platform statement.

15
00:00:59,120 --> 00:01:02,540
Another important property is Mac's Parallel Forks option.

16
00:01:04,250 --> 00:01:08,120
If you set this option, Gradle will run tests in parallel.

17
00:01:08,900 --> 00:01:15,590
It's good to set this option in almost all cases because then creator can make better use of the resources

18
00:01:15,590 --> 00:01:19,940
of the machine it is running on and the test run will finish faster.

19
00:01:20,300 --> 00:01:24,490
Technically created for separate processes to run the tests.

20
00:01:24,500 --> 00:01:30,980
That's why the option is called parallel forks on the separate processes created and gives control to

21
00:01:31,190 --> 00:01:37,040
unit five or whichever framework you selected, which is then executing the tests and sending reports

22
00:01:37,040 --> 00:01:37,970
back to Gradle.

23
00:01:38,420 --> 00:01:40,760
There are many other details you may configure here.

24
00:01:42,320 --> 00:01:48,410
One thing that could be interesting is that you can define the memory of the four processes.

25
00:01:48,410 --> 00:01:53,640
So if you have tests that are very memory hungry, you can modify the max memory.

26
00:01:56,820 --> 00:02:02,460
While we talk about parallel execution, there's also another flag you should set in your properties,

27
00:02:02,460 --> 00:02:04,440
which is the parallel flag.

28
00:02:05,850 --> 00:02:11,730
If you do that, you allow Gradle to execute tasks from different projects in parallel.

29
00:02:11,850 --> 00:02:18,060
So if you do that and if, for example, have tests and our data model and or business logic project,

30
00:02:18,060 --> 00:02:24,360
then well would be able to also execute these tests in parallel because it's also like there can always

31
00:02:24,390 --> 00:02:25,710
be one task running.

32
00:02:26,690 --> 00:02:31,970
This is an opt in right now because in theory, tasks from different projects could have dependencies

33
00:02:31,970 --> 00:02:34,250
between each others that are not integrated.

34
00:02:34,550 --> 00:02:40,220
This is because you can do so many things using the Kotlin or groovy language when you configure your

35
00:02:40,220 --> 00:02:40,760
tests.

36
00:02:41,150 --> 00:02:46,280
However, if you follow a clean project setup with convention plugins, as we learned about in this

37
00:02:46,280 --> 00:02:53,270
course, you won't have these issues and you can safely turn on parallel, which will in some way become

38
00:02:53,270 --> 00:02:55,190
a default in future gradle versions.

39
00:02:56,170 --> 00:03:01,210
If we know this configuration intelligence and go back to our test.

40
00:03:02,080 --> 00:03:05,680
Intelligence offers us to run the test directly here.

41
00:03:06,880 --> 00:03:13,240
If we do that, intelligence will launch the greater test task, execute the tests and pick up the results

42
00:03:13,240 --> 00:03:14,200
from Gradle again.

43
00:03:15,080 --> 00:03:17,510
We can see that our test was successful.

44
00:03:18,690 --> 00:03:25,440
You can also find the test results in an HTML report written into the build folder of the project.

45
00:03:33,570 --> 00:03:36,510
For many projects, though, set up might be enough.

46
00:03:36,870 --> 00:03:42,540
But as mentioned already, sometimes it makes sense to split tests into several groups.

47
00:03:43,580 --> 00:03:45,050
There are two ways to do that.

48
00:03:45,860 --> 00:03:52,650
One is to have several test tasks that just execute a certain selection of tests from the test source,

49
00:03:52,650 --> 00:03:53,780
said one other source.

50
00:03:54,710 --> 00:04:00,590
The other option is to add an additional source set with another test task on top of it.

51
00:04:02,700 --> 00:04:06,630
The difference is that the second source said physically separate the tests.

52
00:04:06,630 --> 00:04:14,100
So you put them into a separate folder and you also can define different kind of dependencies or even

53
00:04:14,100 --> 00:04:16,560
use the different test frameworks for that.

54
00:04:17,450 --> 00:04:22,970
Let's first look at option one, which is registering an additional test task for the test.

55
00:04:22,970 --> 00:04:23,690
So set.

56
00:04:25,620 --> 00:04:30,540
As we've learned, we use tasks to register to register a new task.

57
00:04:31,500 --> 00:04:33,060
Let's call it test slow.

58
00:04:35,560 --> 00:04:42,920
This task is of type test, which is again a task implementation provided by greater core force.

59
00:04:43,370 --> 00:04:48,560
It's the same type that the test task that the Java plugin already does has.

60
00:04:50,780 --> 00:04:56,900
Now to make this task work for the source said, we need to do a bit of manual setup because this is

61
00:04:56,900 --> 00:04:58,340
a newly registered task.

62
00:04:59,130 --> 00:05:06,060
Basically the task needs to know about two things where the tests are located and what the class path

63
00:05:06,090 --> 00:05:07,350
of the tests is.

64
00:05:08,780 --> 00:05:13,620
These things are configured by the test classes, the property and the class plus property.

65
00:05:14,720 --> 00:05:18,440
And we can get the information from the source set.

66
00:05:18,830 --> 00:05:21,540
So there's nothing individual we need to do.

67
00:05:21,560 --> 00:05:23,560
We just need to do this wiring up.

68
00:05:26,520 --> 00:05:30,600
And everything else is test toss configuration as we did before.

69
00:05:31,140 --> 00:05:36,330
So let's also use unit five here by saying use the platform.

70
00:05:39,410 --> 00:05:43,130
Then we would also like to have our additional test task run.

71
00:05:43,160 --> 00:05:45,710
Always when someone calls, build or check.

72
00:05:46,370 --> 00:05:49,490
So we wired into the check lifecycle task.

73
00:05:49,520 --> 00:05:52,730
As we have learned by using the depends on keyword.

74
00:05:56,240 --> 00:06:04,790
If we would run check now it will execute both our test tasks and both will execute all the tests in

75
00:06:04,790 --> 00:06:05,950
the test source set.

76
00:06:06,320 --> 00:06:08,720
So all our tests would run twice.

77
00:06:09,230 --> 00:06:11,870
That does not yet make much sense.

78
00:06:12,170 --> 00:06:14,870
Instead, we would like to filter tests.

79
00:06:15,590 --> 00:06:19,610
Which is a feature that is provided by the Unit five directly.

80
00:06:20,120 --> 00:06:26,960
So the Unit five allows us to define so-called tests on the tests to categorize them.

81
00:06:27,320 --> 00:06:34,400
In our example, we would like to separate slower tests to make them run by the tests load task.

82
00:06:35,060 --> 00:06:40,430
And we could introduce a tech called SLO for that and annotate the corresponding test for set.

83
00:06:41,000 --> 00:06:49,610
And then in the task configuration, we say that the default test task should exclude all tests annotated

84
00:06:49,610 --> 00:07:00,530
with slow and the new test slow task should include all tests with Zetec Annotated slow, and by that

85
00:07:00,530 --> 00:07:02,870
automatically exclude all other tests.

86
00:07:06,570 --> 00:07:12,570
With this setup, we split the execution of tests from the test set into two groups.

87
00:07:13,550 --> 00:07:19,530
This could be used, for example, to make it clear that certain tests are quite slow and probably only

88
00:07:19,530 --> 00:07:24,780
should run on the AI, so that if you run tests locally, they would be excluded.

89
00:07:24,780 --> 00:07:27,750
But they won't be excluded if you do a complete check run.

90
00:07:29,190 --> 00:07:33,480
So the other options to split up tests is to use additional source sets.

91
00:07:33,810 --> 00:07:39,670
We already created a source set called Integration Test just to show that you can do that if we now

92
00:07:39,690 --> 00:07:43,170
actually want to use the source set to define tests in them.

93
00:07:44,320 --> 00:07:49,660
We can do the same as we did before for the test set, which is registering a test task.

94
00:07:49,870 --> 00:07:52,280
So we would just start test task.

95
00:07:52,300 --> 00:07:55,330
In this case, we can call it like the source set.

96
00:07:55,330 --> 00:07:57,010
So it's called integration test.

97
00:07:57,430 --> 00:08:02,590
And then again, we set the test last year and the class pass.

98
00:08:02,890 --> 00:08:07,900
In this case, we get the information from the integration test source set.

99
00:08:10,390 --> 00:08:14,290
Also here, we say that we want to use unit five.

100
00:08:17,510 --> 00:08:21,830
And now we could do the same as we did for the test set up.

101
00:08:22,490 --> 00:08:25,520
We can create a folder for integration tests.

102
00:08:25,970 --> 00:08:28,490
We could add test classes to this.

103
00:08:30,880 --> 00:08:37,630
And in the boot file we add dependencies to the G Unit five API and the runtime for the integration

104
00:08:37,630 --> 00:08:38,140
tests.

105
00:08:38,140 --> 00:08:43,630
And now we could, for example, add additional dependencies to some testing libraries we won't like

106
00:08:43,630 --> 00:08:48,370
to use for integration testing which we don't want to have for the other tests.

107
00:08:51,580 --> 00:08:57,580
Testing software is an important topic, and Gradle offers a lot of options to set up testing.

108
00:08:59,490 --> 00:09:05,340
In this lecture, we saw the most important things to configure, which is the test framework dependencies

109
00:09:05,340 --> 00:09:12,570
for tests, parallel test execution and different options to add additional test tasks to split up tests

110
00:09:12,570 --> 00:09:15,510
in a project in to multiple sets.

111
00:09:17,130 --> 00:09:18,030
With this.

112
00:09:18,030 --> 00:09:25,080
You now know the fundamentals for structuring a modern gradle build and compiling and testing coordinate.

113
00:09:25,620 --> 00:09:31,620
In the example, we always use Java as a language, but it works similar for other JVM language like

114
00:09:31,620 --> 00:09:33,270
Kotlin Scala or Groovy.

115
00:09:34,320 --> 00:09:40,680
And even if you do other things, just cradle all automation with cradle uses the same concepts and

116
00:09:40,680 --> 00:09:44,820
follow similar patterns as the ones we have explored on this example.

117
00:09:46,370 --> 00:09:49,270
For everything I showed, I used the Kotlin DSL.

118
00:09:49,280 --> 00:09:53,660
So before the course comes to an end, I want to show you alternatives to this.
