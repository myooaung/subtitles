1
00:00:01,680 --> 00:00:06,590
Let's start this course with a quick overview of what Gradle is and what is useful.

2
00:00:07,510 --> 00:00:13,870
Gradle is called a build tool, but you can also look at it as a tool to describe or model your software.

3
00:00:14,690 --> 00:00:21,920
So it is gradle over the language, domain specific language or DSL to describe how your software project

4
00:00:21,920 --> 00:00:22,880
is structured.

5
00:00:22,970 --> 00:00:29,210
For example, an application written in Java composed of multiple Java libraries or components.

6
00:00:29,540 --> 00:00:32,960
Once you have done the description in Gradle, see ASL.

7
00:00:33,380 --> 00:00:39,830
This model can be interpreted by tools to help you develop the software and to build the software to

8
00:00:39,830 --> 00:00:41,360
get the final application.

9
00:00:42,570 --> 00:00:48,720
These tools are great in itself, which can build the application or run test for it and other automation

10
00:00:48,720 --> 00:00:52,050
tasks in your development and deployment pipeline.

11
00:00:52,050 --> 00:00:55,260
But also other tools like an ID can read this model.

12
00:00:55,740 --> 00:01:02,490
For example, IntelliJ idea, which we'll use in this course, can use Gradle to read the model that

13
00:01:02,490 --> 00:01:08,910
describes your project, and then it can show you the project in a structured way in the IDE and give

14
00:01:08,910 --> 00:01:14,130
you additional tool support like navigating between classes of different projects and things like that.

15
00:01:14,550 --> 00:01:20,130
So it's helpful to look at Gradle primarily as a tool that describes the structure of your software

16
00:01:20,130 --> 00:01:25,950
project and learn how to do that with the DSL cradle of us.

17
00:01:26,610 --> 00:01:29,340
That's the perspective we'll take in this course.

18
00:01:30,340 --> 00:01:31,990
How was this done concretely?

19
00:01:32,260 --> 00:01:33,490
Technically great.

20
00:01:33,640 --> 00:01:42,580
Dstl is a java API, so any job based language like Kotlin, Groovy or Java itself can potentially be

21
00:01:42,580 --> 00:01:46,840
used to describe a software project in greater terms.

22
00:01:47,650 --> 00:01:53,950
To make this convenient cradle of the Scotland version of its DSL and a groovy version of its DSL.

23
00:01:54,670 --> 00:02:01,720
This basically means that next to the greater specific constructs, you can use any means of the Kotlin

24
00:02:01,720 --> 00:02:04,960
or groovy language to extend or customize Gradle.

25
00:02:05,470 --> 00:02:11,140
While this is a powerful feature in certain places, it can be harmful because by having the full power

26
00:02:11,140 --> 00:02:16,750
of a programming language available, you can do things that lead to a hard to understand project structure

27
00:02:16,750 --> 00:02:20,830
or even break rails caching or environmental building functionality.

28
00:02:21,190 --> 00:02:27,760
So in this course, we'll mostly stick to the specific notations and I'll show you best practices you

29
00:02:27,760 --> 00:02:32,110
can follow that won't require you to step out of this greater world.

30
00:02:32,470 --> 00:02:38,230
If you follow this, it almost doesn't matter if you use the Kotlin or the groovy DSL as a notations

31
00:02:38,230 --> 00:02:40,370
in most cases can be identical.

32
00:02:40,390 --> 00:02:46,230
So in this course we use the Kotlin Dstl because it offers the best integration with the intelligent

33
00:02:46,240 --> 00:02:48,970
idea IDE, which we are also going to use.

34
00:02:50,290 --> 00:02:51,550
By the end of the course.

35
00:02:51,550 --> 00:02:57,070
I'll also get a bit into the Groovy Dstl so that if you look for more documentation on a certain feature

36
00:02:57,070 --> 00:03:03,130
online and find solutions in the groovy dstl, it's easier for you to map them to the corresponding

37
00:03:03,140 --> 00:03:05,990
content annotation at the end of the course.

38
00:03:06,010 --> 00:03:10,180
I will also talk about how you can use Java to configure your variables.

39
00:03:10,180 --> 00:03:15,370
So if you are not familiar with neither Kotlin nor Groovy and don't want to learn it in detail just

40
00:03:15,370 --> 00:03:21,610
because of Gradle, you can do a lot of things directly in Java and then only need to know about some

41
00:03:21,610 --> 00:03:25,930
greater specific constructs where it almost doesn't matter that you use Kotlin or Groovy.

42
00:03:25,960 --> 00:03:32,530
So when we start now to build up a project with the Dstl don't think that it is Kotlin code when we

43
00:03:32,530 --> 00:03:39,040
write a greater configuration file, but think that this is greater configuration in the greater dstl

44
00:03:39,160 --> 00:03:42,970
that we use to describe the structure of our software project.
