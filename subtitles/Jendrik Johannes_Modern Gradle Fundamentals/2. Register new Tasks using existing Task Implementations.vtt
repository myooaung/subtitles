WEBVTT
1
00:00:01.350 --> 00:00:05.010
Create a task concept allows you to customise, you build further.

2
00:00:05.610 --> 00:00:10.110
There is no limit to how many tasks you can register or implement yourself.

3
00:00:10.500 --> 00:00:16.770
So if you have a certain automation need that's not covered by the plugins you applied because specific

4
00:00:16.770 --> 00:00:23.400
to you set up or your way to packaging your application or things like that, you can do that with Gradle,

5
00:00:23.760 --> 00:00:29.730
especially, things that are about handling files are often not too hard to do because they are already

6
00:00:29.730 --> 00:00:34.920
task implementations for these kind of things that you can take from where to core and configure.

7
00:00:36.400 --> 00:00:42.730
So the thing we will do now is register a new task without actually implementing a task action because

8
00:00:42.730 --> 00:00:45.460
we'll take an implementation that's already available.

9
00:00:46.450 --> 00:00:52.420
As an example, let's consider that you want to zip all the jobs that make up all application into a

10
00:00:52.420 --> 00:00:56.950
single zip file where this application plugin actually already comes through the functionality like

11
00:00:56.950 --> 00:00:57.390
this.

12
00:00:57.400 --> 00:01:03.550
But let's assume you want to have a custom way of doing this, which is not too uncommon to do for things

13
00:01:03.550 --> 00:01:04.240
like this.

14
00:01:04.270 --> 00:01:07.570
Gradle already offers the zip task implementation.

15
00:01:08.600 --> 00:01:10.310
To register a new task.

16
00:01:10.340 --> 00:01:12.830
You use the tasks dot which is the notation.

17
00:01:14.440 --> 00:01:16.270
You give the task a name?

18
00:01:17.740 --> 00:01:23.140
And then again in the parenthesis notation, you can define a type that the task should get.

19
00:01:23.290 --> 00:01:24.580
In this case, zip.

20
00:01:25.800 --> 00:01:32.220
Now with the type set here, Greater knows the task under this name is available and can potentially

21
00:01:32.220 --> 00:01:34.680
be called or connected to other tasks.

22
00:01:35.850 --> 00:01:41.190
And inside the configuration block, we have access to the details of this task so we can configure

23
00:01:41.190 --> 00:01:42.780
its inputs and outputs.

24
00:01:43.600 --> 00:01:46.170
Because this is a completely new richest task.

25
00:01:46.180 --> 00:01:52.600
We have to configure some things, although also freshly registered tasks may come with some conventions

26
00:01:52.600 --> 00:01:54.100
that we don't need to configure.

27
00:01:54.640 --> 00:01:59.320
In this case, what we definitely have to say is which files we want to zip for this.

28
00:01:59.320 --> 00:02:05.530
The task of us from notation here we can put in arbitrary many files that should go into the zip file.

29
00:02:05.860 --> 00:02:10.720
Now we could write something like this, which is a path to a file.

30
00:02:12.010 --> 00:02:13.750
But that's not what we want.

31
00:02:13.930 --> 00:02:19.990
If you remember, what we should do is connect task inputs and outputs so that Gradle knows which task

32
00:02:19.990 --> 00:02:25.360
it needs to run to actually produce this jar that we want to put into the zip file.

33
00:02:25.630 --> 00:02:32.170
So instead of giving a path to a jar here, we can say that what should be packaged is the output of

34
00:02:32.170 --> 00:02:33.220
the jar task.

35
00:02:35.950 --> 00:02:38.470
We also want the jobs of all the dependencies.

36
00:02:39.010 --> 00:02:45.400
So this will offer us a concept called the runtime class pass which can be accessed via the configurations

37
00:02:45.400 --> 00:02:46.090
container.

38
00:02:46.570 --> 00:02:51.760
What configurations are, which is the central concept and where dependency management is something

39
00:02:51.760 --> 00:02:54.910
we'll talk about in a later lecture about dependency management.

40
00:02:55.120 --> 00:02:59.480
For now, it's enough to know that you can access the runtime class pass here and through this, creating

41
00:02:59.480 --> 00:03:06.820
those dependencies, which are our two other components data model and business logic and the external

42
00:03:06.820 --> 00:03:14.200
dependency to common slang which we defined at some point will also knows that if the JAR file behind

43
00:03:14.200 --> 00:03:20.150
one of these dependencies is something that needs to be built by gradle like the jar file, that is

44
00:03:20.150 --> 00:03:21.760
the output of the data model.

45
00:03:21.760 --> 00:03:28.070
So the task of the data model and the dependency of the JAR task will become part of the task graph.

46
00:03:28.090 --> 00:03:32.620
If we configure our task like this, then we also need to configure the output.

47
00:03:32.620 --> 00:03:35.170
So where should the zip file go?

48
00:03:35.950 --> 00:03:39.580
Zip task of destination directory property for this.

49
00:03:39.580 --> 00:03:43.570
We should set this to some unique directory inside the build folder.

50
00:03:45.870 --> 00:03:48.340
Also here, it's good to not put a static pass here.

51
00:03:48.360 --> 00:03:53.040
Instead, we get a reference to the build directory through the layout container.

52
00:03:53.040 --> 00:03:58.620
So we layout the build directory and then choose a directory inside the build directory.

53
00:04:02.050 --> 00:04:07.840
Doing it that way doesn't hard code built as a build directory and it could potentially also be changed

54
00:04:07.840 --> 00:04:11.560
if you want to build output to end up somewhere else.

55
00:04:12.220 --> 00:04:18.190
And then there are two details on each tasks that you can set to make it easier, discoverable and usable.

56
00:04:18.430 --> 00:04:24.790
So one thing is a group which is used to sort task in the complete task list and a description that

57
00:04:24.790 --> 00:04:30.550
can give some idea of what the task is about which will be printed if you use the tasks task to show

58
00:04:30.550 --> 00:04:32.440
all the tasks available in the project.

59
00:04:33.580 --> 00:04:36.640
After we edit the task, we condense the project again.

60
00:04:38.790 --> 00:04:45.510
And then we can see that the task now turns up in the grade review inside the group we defined here.

61
00:04:50.090 --> 00:04:57.140
If we run the task task for the A project, we also see that our group is now part of the output that's

62
00:04:57.140 --> 00:05:00.770
printed here and it contains our new task with the description.

63
00:05:05.560 --> 00:05:11.800
If we tell Gradle now to execute our new task, we can see that all the dependent tasks have also been

64
00:05:11.800 --> 00:05:12.640
executed.

65
00:05:12.640 --> 00:05:17.860
So a task graph has been built based on the inputs we define to our task.

66
00:05:22.860 --> 00:05:29.040
We can also see that if we run the build again, that our new league, which is that task, also is

67
00:05:29.040 --> 00:05:31.380
up to date after we run it a second time.

68
00:05:31.680 --> 00:05:36.000
So the up to date checking also works for tasks we register ourselves.

69
00:05:39.200 --> 00:05:46.190
You can find the result in the build folder and if we extract it, we can see that it contains the four

70
00:05:46.190 --> 00:05:48.320
jar files as expected.

71
00:05:51.020 --> 00:05:57.830
We have seen that we can add new functionality to our build by registering new tasks using task implementation

72
00:05:57.830 --> 00:05:59.780
that are provided by Gradle already.

73
00:06:00.560 --> 00:06:07.610
For example, for zipping files or copying files, the inputs of such tasks should be configured in

74
00:06:07.610 --> 00:06:08.660
terms of other tasks.

75
00:06:08.660 --> 00:06:15.890
Output then denotes the dependencies between the tasks and builds the task of correctly up to date checking

76
00:06:15.890 --> 00:06:17.390
and caching if applicable.

77
00:06:17.420 --> 00:06:19.370
Also work for these tasks.
