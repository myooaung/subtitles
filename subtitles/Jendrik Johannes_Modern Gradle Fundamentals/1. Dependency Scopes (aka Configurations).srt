1
00:00:02,210 --> 00:00:05,750
Let's get a bit more into the topic of dependency management.

2
00:00:06,560 --> 00:00:08,190
At first, a few remarks.

3
00:00:08,210 --> 00:00:14,690
Dependency management is a large topic and cradle of a very powerful dependency resolution engine to

4
00:00:14,690 --> 00:00:17,480
find dependencies and to resolve conflicts.

5
00:00:17,960 --> 00:00:24,770
While some notations for dependencies are inspired by the Java ecosystem, the engine itself is not

6
00:00:24,770 --> 00:00:32,300
specific to Java and therefore it has a lot of features that you probably won't need in a standard Java,

7
00:00:32,300 --> 00:00:37,520
but also not in a standard Kotlin or Scala or Ruby project in this fundamental course.

8
00:00:37,550 --> 00:00:44,720
I will only give you an idea of what concepts are available so that if you encounter them in some documentation,

9
00:00:44,720 --> 00:00:46,250
you are not too surprised.

10
00:00:46,550 --> 00:00:52,340
Explaining all the concepts that are available and the inner workings in detail would take a lot of

11
00:00:52,340 --> 00:00:56,690
time and would shift away the focus of this course from the fundamentals.

12
00:00:57,200 --> 00:01:03,170
So the things I'll talk about are just to give you a certain idea of how things are connected.

13
00:01:03,200 --> 00:01:05,900
Don't worry if you don't understand everything.

14
00:01:05,990 --> 00:01:13,490
I will always go back to what you can use in Java or other JVM based projects, which is probably enough

15
00:01:13,490 --> 00:01:14,240
for most.

16
00:01:15,020 --> 00:01:17,420
But let's look at a concrete example.

17
00:01:17,960 --> 00:01:24,950
We go back to the build file of our business logic component where we define some dependencies before.

18
00:01:26,560 --> 00:01:33,550
As mentioned, a dependency definition always has a scope or also called configuration and then some

19
00:01:33,550 --> 00:01:36,370
coordinates possibly with version two point.

20
00:01:36,370 --> 00:01:38,200
It's a component you want to depend on.

21
00:01:39,700 --> 00:01:43,210
Now let's take a short look at the scope slash configuration thing.

22
00:01:44,550 --> 00:01:52,020
So configuration, which is a bit unlucky and very generic name, is another concept in Gradle on a

23
00:01:52,020 --> 00:01:53,550
similar level as tasks.

24
00:01:54,120 --> 00:01:58,140
It's the fundamental concept of greatest dependency management.

25
00:01:58,260 --> 00:02:01,390
What I'll do now is nothing you need to do in your build.

26
00:02:01,410 --> 00:02:03,330
I just want to show you a few things.

27
00:02:04,790 --> 00:02:06,700
Similar as the tasks container.

28
00:02:06,710 --> 00:02:12,800
There is also a configuration container where you can define, manage or modify configurations.

29
00:02:13,370 --> 00:02:18,080
But this is something that ideally the plugins you apply already do for you.

30
00:02:18,380 --> 00:02:25,160
So the Java plugin does a sophisticated setup here for Java, but also other JVM languages which in

31
00:02:25,160 --> 00:02:28,460
the end all compile down to Java classes and Java files.

32
00:02:28,550 --> 00:02:34,490
So the dependency management in Java, Groovy Scala or Kotlin project is basically the same everywhere

33
00:02:34,490 --> 00:02:39,920
and already set up by the Java plugin on which all these other language plug ins depend on.

34
00:02:40,340 --> 00:02:46,250
So you can think of a configuration as a kind of container that summarizes dependencies and artifacts,

35
00:02:46,250 --> 00:02:52,670
so files that belong together when looking at a project from a certain perspective.

36
00:02:52,850 --> 00:02:56,390
So for Java project, there are two of these perspectives.

37
00:02:56,390 --> 00:03:00,440
The one is that you use the project when you compile code.

38
00:03:00,620 --> 00:03:07,730
So for example, when I compile my EP project, I need a certain view of the business logic project

39
00:03:07,730 --> 00:03:11,090
to compile against classes that come from that project.

40
00:03:11,720 --> 00:03:13,810
And the other view is the runtime view.

41
00:03:13,820 --> 00:03:20,330
So when I run the application, I also need things from this other project which possibly include more

42
00:03:20,330 --> 00:03:25,520
transitive dependency, like the Apache Commons Library, which we defined here as the dependency.

43
00:03:26,240 --> 00:03:29,810
These views of the project are also called variants and gradle.

44
00:03:30,140 --> 00:03:33,980
So configurations are used to set this up in a way.

45
00:03:37,230 --> 00:03:41,670
The configuration we already accessed when we configure tasks is the runtime class path.

46
00:03:41,670 --> 00:03:44,130
So this is like the runtime view I mentioned.

47
00:03:44,550 --> 00:03:49,770
Then equivalent is also compiler class path, which gives you everything you want to see at compile

48
00:03:49,770 --> 00:03:50,220
time.

49
00:03:51,500 --> 00:03:58,880
And these configurations again are compositions of other configurations that you can use to declare

50
00:03:58,880 --> 00:03:59,860
dependencies.

51
00:03:59,870 --> 00:04:06,380
So the implementation scope down here is also a configuration that is included in both the runtime class

52
00:04:06,380 --> 00:04:08,360
path and the compiler class path.

53
00:04:08,360 --> 00:04:15,080
For instance, there are other scopes or other configurations like Compile only that is only included

54
00:04:15,080 --> 00:04:17,930
in the compiler class path and runtime only.

55
00:04:17,930 --> 00:04:20,300
So that's only included in the runtime class path.

56
00:04:20,600 --> 00:04:22,790
So that's a very flexible system.

57
00:04:22,790 --> 00:04:28,760
So the Creator can be used for dependency management and completely other contexts like this Java world.

58
00:04:29,510 --> 00:04:35,960
It's good to know that it's possible, but if you care about developing Java or Kotlin or your Scala

59
00:04:35,960 --> 00:04:38,600
projects, you don't have to worry about this.

60
00:04:38,600 --> 00:04:45,710
So this was just to show you that this concept is there and that it could be extended or modified if

61
00:04:45,710 --> 00:04:46,280
needed.

62
00:04:47,330 --> 00:04:50,690
So let's get back of what to use exactly in the Java project.

63
00:04:51,430 --> 00:04:56,950
So we use the implementation scope so far, and that's what you should always start with.

64
00:04:58,660 --> 00:05:00,430
I mentioned the compile only scope.

65
00:05:00,700 --> 00:05:06,220
This means that something is only available at compile time, but when the application run it's gone.

66
00:05:06,370 --> 00:05:08,170
So this is something you really need.

67
00:05:08,170 --> 00:05:13,010
Usually all your software, everything you develop and everything that you pull in needs to be there

68
00:05:13,030 --> 00:05:13,650
at runtime.

69
00:05:13,660 --> 00:05:16,480
Otherwise it can't do anything when the application runs.

70
00:05:16,750 --> 00:05:22,720
There are certain edge cases like when environments already provide something in a kind of container

71
00:05:22,750 --> 00:05:24,280
that just might be interesting.

72
00:05:24,280 --> 00:05:28,660
But usually they're very little practical examples where you really need this.

73
00:05:29,840 --> 00:05:31,580
Then something a bit more interesting.

74
00:05:31,580 --> 00:05:37,370
It's a runtime only scope, so runtime only means it's not there at compile time.

75
00:05:37,370 --> 00:05:43,820
So you never use any classes to compile code, but you just plug it into the class pass at runtime,

76
00:05:43,820 --> 00:05:49,250
and then it's somehow found on the class path, probably by reflection of some other mechanism.

77
00:05:51,280 --> 00:05:56,590
Example was useful is when there's a separation between an API and an implementation of something,

78
00:05:56,590 --> 00:05:59,240
for example, a logging framework like self.

79
00:06:00,460 --> 00:06:07,060
So as an example, we could add the SLA for API as an implementation dependency to the business logic

80
00:06:07,060 --> 00:06:07,840
component.

81
00:06:20,300 --> 00:06:23,990
And then in our print service, we can use it to do some logging.

82
00:06:51,830 --> 00:06:57,350
If you run the application now, we'll get an error printed to the console that we try to lock, but

83
00:06:57,350 --> 00:07:02,480
there is no implementation available, but we won't get any error at compile time because the compile

84
00:07:02,480 --> 00:07:06,320
time the logging is not running, it's just compiling against the API.

85
00:07:08,660 --> 00:07:13,550
And then we can go to our application project because that's the only place at the moment where the

86
00:07:13,550 --> 00:07:20,690
code actually runs and at runtime only dependency to one of the SLA logger implementations.

87
00:07:24,100 --> 00:07:26,380
So this is a useful use of runtime only.

88
00:07:26,890 --> 00:07:29,290
This also makes the implementation exchangeable.

89
00:07:29,320 --> 00:07:33,850
So if you use the business logic component in some other context, for example, we use it in another

90
00:07:33,850 --> 00:07:34,780
application.

91
00:07:34,780 --> 00:07:40,570
Then in that application you can add runtime only dependency to some other logging implementation.

92
00:07:41,650 --> 00:07:45,670
Now the final scope I want to mention which you might encounter is API.

93
00:07:46,880 --> 00:07:51,710
This is the scope you only have on Java libraries and not on applications for example.

94
00:07:52,580 --> 00:07:58,610
API means that a dependency you add gets visible transit during compilation.

95
00:07:59,370 --> 00:08:06,330
Concretely, it would mean if we would change the dependency to common slang here to API in the Business

96
00:08:06,330 --> 00:08:07,350
Logic Project.

97
00:08:07,800 --> 00:08:14,520
Common slang will also be seen in the project, which depends on the business logic project because

98
00:08:14,520 --> 00:08:15,540
it gets visible.

99
00:08:15,540 --> 00:08:16,590
Transitivity.

100
00:08:18,750 --> 00:08:19,920
You can see this here.

101
00:08:20,370 --> 00:08:25,740
At the moment we can't access any class from comments land in the implementation.

102
00:08:27,670 --> 00:08:33,940
But if we doing the project again after we change to API, we can suddenly access classes from there.

103
00:08:35,440 --> 00:08:43,480
Now if we really want to use classes here from Apache comments learn I would always suggest to also

104
00:08:43,480 --> 00:08:49,420
add the dependency to the project so that you see in each project or each component what it's depending

105
00:08:49,420 --> 00:08:49,900
on.

106
00:08:50,080 --> 00:08:53,380
Otherwise, you quickly end up in a messy situation.

107
00:08:54,780 --> 00:09:01,500
So I would be very careful with API because if use implementation you have components neatly isolated

108
00:09:01,500 --> 00:09:07,460
and there's less risk that something is used by accident because it's just visible transitive like a

109
00:09:07,500 --> 00:09:13,530
compilation during compilation, Java doesn't need to see everything, it just needs to see the things

110
00:09:13,530 --> 00:09:18,900
it compiles directly against the things that is used in the internals of any of the dependencies.

111
00:09:19,660 --> 00:09:20,230
Now.

112
00:09:20,230 --> 00:09:24,390
Sometimes something needs to be visible, even if you don't use it directly.

113
00:09:24,400 --> 00:09:27,140
For example, if you extend the class.

114
00:09:27,160 --> 00:09:35,910
So the general rule of thumb would be if something is on the public API, it should be also an API dependency

115
00:09:35,920 --> 00:09:41,190
in the example of our business logic project with the Commerce Lang dependency.

116
00:09:41,340 --> 00:09:46,870
This would mean that somewhere in our service implementation we would put some type from common slang

117
00:09:46,900 --> 00:09:53,710
on the public API, for example, as a return type of a public method doesn't really make sense here,

118
00:09:53,710 --> 00:10:00,760
but that's how things become public API of the library and thus possibly consumers.

119
00:10:00,760 --> 00:10:05,800
So other components that use a library like a project might need to see them.

120
00:10:06,310 --> 00:10:11,440
However, in large projects, if you want to do the separation between API and implementation, it can

121
00:10:11,440 --> 00:10:12,850
become very tedious.

122
00:10:13,000 --> 00:10:18,790
One thing is just to stick with implementation, which is, from my perspective, a viable approach.

123
00:10:19,980 --> 00:10:25,410
If you're going to use API, I would suggest to use some additional tooling that can tell you if something

124
00:10:25,410 --> 00:10:30,870
is supposed to be an API dependency or not where the core doesn't offer any tooling here.

125
00:10:30,870 --> 00:10:37,800
But as a plugin, the dependency analysis plugin which you can apply and which can analyze your source

126
00:10:37,800 --> 00:10:43,740
code to tell you which dependencies should be API because they're used on public java, Kotlin Scala

127
00:10:43,740 --> 00:10:44,820
or groovy API.

128
00:10:46,170 --> 00:10:53,100
As I said, this was meant to give you an idea of what Gradle has with the Scopes configuration concept.

129
00:10:53,280 --> 00:10:59,760
But as I said, for the fundamentals, for standard project setups, it's probably enough to use implementation

130
00:10:59,760 --> 00:11:05,700
everywhere, possibly combined with runtime only if you have situations like with the local implementation

131
00:11:05,700 --> 00:11:07,050
as shown in the examples.

132
00:11:07,140 --> 00:11:15,180
And if you consider using API, it's most likely the best to use the dependency analysis plugin in combination

133
00:11:15,180 --> 00:11:18,210
to tell you what should be API and not implementation.

134
00:11:19,350 --> 00:11:26,160
Now that we have talked about scopes or configurations, the next thing we need to talk about are versions.
