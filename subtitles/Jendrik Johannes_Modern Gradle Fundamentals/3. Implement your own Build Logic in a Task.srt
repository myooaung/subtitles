1
00:00:01,430 --> 00:00:06,830
What do we do if the task that we want to use is not available as an implementation yet?

2
00:00:07,430 --> 00:00:11,930
Then we can implement it ourselves as we've seen earlier.

3
00:00:11,960 --> 00:00:14,420
The task implementation is a Java class.

4
00:00:15,080 --> 00:00:22,220
More concretely, it's a Java class that extends a certain grader type default task and uses some gradle

5
00:00:22,220 --> 00:00:27,170
annotations in our plugins build where we have all convention plugins.

6
00:00:27,380 --> 00:00:31,700
We can also add other source code and so implement the task here directly.

7
00:00:32,630 --> 00:00:35,000
Let's do an example of such a task.

8
00:00:35,690 --> 00:00:42,830
Assume we want to count the job files that make up our application and write the result to a file which

9
00:00:42,830 --> 00:00:45,230
we then can potentially ship with the application.

10
00:00:45,800 --> 00:00:48,950
Let's look what the task should offer if we register it.

11
00:00:49,250 --> 00:00:56,750
So in our application convention plug in, we do a task register again and say we assume that we have

12
00:00:56,750 --> 00:01:00,860
an implementation for Jar Count task, which we call a conscious.

13
00:01:02,030 --> 00:01:02,860
In the task.

14
00:01:02,870 --> 00:01:04,340
We'd like to have an input.

15
00:01:04,340 --> 00:01:09,080
Let's call it all jobs to which we can add the jobs we want to count.

16
00:01:10,540 --> 00:01:13,870
Similar to what we did in the zip task before.

17
00:01:14,050 --> 00:01:20,820
We now add the job from the project and the runtime class path which will provide all the jobs of the

18
00:01:20,830 --> 00:01:21,820
dependencies.

19
00:01:24,600 --> 00:01:26,030
Then we would like to have an output.

20
00:01:26,040 --> 00:01:30,810
Let's call it count file, which contains the number of jars in the end.

21
00:01:31,820 --> 00:01:34,940
We set it to a file in the directory.

22
00:01:36,080 --> 00:01:38,330
No, because the tax limitation doesn't exist yet.

23
00:01:38,360 --> 00:01:39,770
We get this across here.

24
00:01:42,610 --> 00:01:44,890
So now let's do the implementation.

25
00:01:47,210 --> 00:01:53,480
A task can be implemented in any JVM language as long as the greater project you implement it in is

26
00:01:53,480 --> 00:01:55,250
configured to support that language.

27
00:01:56,610 --> 00:02:02,430
Because we are already in the Cotton Project here, we can use it and either implement the task in Scotland

28
00:02:02,430 --> 00:02:07,200
or in Java because I assume that most of you are more familiar with Java.

29
00:02:07,470 --> 00:02:09,540
I'll do the implementation in Java now.

30
00:02:10,430 --> 00:02:11,060
For that.

31
00:02:11,060 --> 00:02:13,100
We also add the Java source folder.

32
00:02:13,970 --> 00:02:16,610
And then we create a new Java class in it.

33
00:02:18,600 --> 00:02:25,380
We put it in the sample greater package and call it as we would expect when we just ring the task.

34
00:02:26,180 --> 00:02:34,430
Which is now a task implementation can be abstract because then Gradle will fill some of the implementation

35
00:02:34,430 --> 00:02:35,120
for us.

36
00:02:35,660 --> 00:02:40,850
Then we need to extend the default task of Gradle itself.

37
00:02:44,640 --> 00:02:48,370
The next thing is to define the input and output properties.

38
00:02:48,730 --> 00:02:52,450
Gradle by now offers its own types for these.

39
00:02:53,880 --> 00:02:59,670
This is important because if you use the greater specific types, the input and output wiring works

40
00:02:59,670 --> 00:03:05,310
so that if you set an output of another task to the input of another one creating the relationship.

41
00:03:06,830 --> 00:03:10,610
We can also work with simple Java types like string or file.

42
00:03:10,820 --> 00:03:15,980
But if you use these, you will lose this connection and create a rule no about the task dependencies

43
00:03:15,980 --> 00:03:21,350
because if you set the input to a simpler file, they have no relationship back to the task where this

44
00:03:21,350 --> 00:03:22,550
file is produced from.

45
00:03:23,210 --> 00:03:28,220
So if you create a value task nowadays, please use the greater specific types.

46
00:03:28,580 --> 00:03:32,240
Even if some older tutorials still might suggest otherwise.

47
00:03:33,480 --> 00:03:36,880
Let's start with the input property which we call all just.

48
00:03:37,800 --> 00:03:40,860
In Java, properties are represented by getters.

49
00:03:41,700 --> 00:03:48,560
So we add an abstract method which we call get all the get will automatically be stripped in the code

50
00:03:48,570 --> 00:03:49,290
landslide.

51
00:03:49,320 --> 00:03:51,420
So it will just be called or just the.

52
00:03:54,150 --> 00:03:59,610
Together, get the type configurable file collection, which is a greater type to use.

53
00:03:59,610 --> 00:04:05,670
When you want to express that, you can add arbitrary many files or folders to an input.

54
00:04:07,180 --> 00:04:08,740
And the Tegretol.

55
00:04:08,740 --> 00:04:10,670
That is an input of multiple files.

56
00:04:10,690 --> 00:04:14,440
You also need to add the add input files annotation.

57
00:04:14,890 --> 00:04:21,670
Alternatively, there are also types for single file, which is called regular file property and for

58
00:04:21,670 --> 00:04:24,610
single directory called directory property.

59
00:04:25,150 --> 00:04:31,290
For these you need slightly different annotations called input file or input directory.

60
00:04:31,300 --> 00:04:36,550
If you use these, you also need to use the corresponding annotation, which is input file or input

61
00:04:36,550 --> 00:04:37,300
directory.

62
00:04:38,090 --> 00:04:42,020
Now the scatter is abstract, and this type here is an interface.

63
00:04:42,650 --> 00:04:44,090
But that's enough for Gradle.

64
00:04:44,450 --> 00:04:49,580
By the annotation, Gradle will discover this and will automatically create a concrete subclass at one

65
00:04:49,580 --> 00:04:54,410
time with which creates an instance of an object that implements the interface.

66
00:04:54,410 --> 00:04:56,270
So we don't have to keep care of that.

67
00:04:56,270 --> 00:04:56,870
That's great.

68
00:04:57,020 --> 00:04:59,060
Internal injection and firing mechanism.

69
00:05:00,670 --> 00:05:03,910
Now we can do the same for the output here.

70
00:05:04,090 --> 00:05:08,740
We want to have a single file as output, so we use regular file property as type.

71
00:05:09,910 --> 00:05:15,850
We call it get count file because count file is the name of the property we want to use and we annotate

72
00:05:15,850 --> 00:05:21,010
it with at output file because now we have the type with the inputs and outputs.

73
00:05:21,040 --> 00:05:26,800
You can already go back to our convention plugin and we can import the char count task.

74
00:05:27,900 --> 00:05:30,810
And then this clip doesn't have any errors anymore.

75
00:05:32,170 --> 00:05:38,770
Taking a closer look, though, from is a notation from the configurable file collection type that we

76
00:05:38,770 --> 00:05:41,290
used for the old jars property.

77
00:05:41,740 --> 00:05:45,550
So this is something the greater standard types provide for us.

78
00:05:46,770 --> 00:05:52,950
For the count file, which is the regular file property, you get a set method which is also provided

79
00:05:52,950 --> 00:05:55,890
by GRAIL'S property concept to set the value.

80
00:05:56,580 --> 00:06:00,820
Now, what we didn't do yet is implement the actual task action.

81
00:06:00,840 --> 00:06:05,730
So the actual thing the task should do to provide a task action implementation.

82
00:06:05,760 --> 00:06:09,540
You create a Java method in the task implementation class.

83
00:06:12,720 --> 00:06:14,520
You can choose an arbitrary name.

84
00:06:14,850 --> 00:06:19,350
Important is that you add the task action annotation to the method.

85
00:06:19,560 --> 00:06:24,870
Then where the will find this method when the task needs to be executed and run the code inside this

86
00:06:24,870 --> 00:06:25,470
method.

87
00:06:26,460 --> 00:06:33,300
So in the method you typically first access inputs, you can then use a get or get files method to map

88
00:06:33,300 --> 00:06:37,740
the specific type to Java standard types, which you know about.

89
00:06:39,550 --> 00:06:40,600
In this moment.

90
00:06:40,600 --> 00:06:45,220
Well will also access get the files if they are not yet received.

91
00:06:45,460 --> 00:06:52,630
So one reason for this property system in Gradle, in addition to figuring out past dependencies is

92
00:06:52,630 --> 00:06:54,790
that things are done as lazy as possible.

93
00:06:55,240 --> 00:07:01,300
So what we have here is inputs are references to jobs and not necessarily actual job files that already

94
00:07:01,300 --> 00:07:02,890
exist in a certain location.

95
00:07:03,850 --> 00:07:07,840
So Gradle only builds or downloads the charts when it's needed.

96
00:07:09,730 --> 00:07:10,680
But he has a task.

97
00:07:11,170 --> 00:07:16,780
We definitely need the input files so we can safely call the get or get files method.

98
00:07:17,140 --> 00:07:22,660
In this case, we call get files and then just call size because we just care about the amount of files.

99
00:07:30,070 --> 00:07:31,030
For output.

100
00:07:31,030 --> 00:07:32,080
The count file.

101
00:07:32,110 --> 00:07:35,260
We do the same and map it down to a java file.

102
00:07:38,340 --> 00:07:45,630
Then we use standard Java functionality to write the size of the old jobs list to the count file.

103
00:08:16,720 --> 00:08:20,140
If we want cradle to catch the results of the task.

104
00:08:20,170 --> 00:08:24,850
We also need to annotate the task with that task, which often makes sense.

105
00:08:25,300 --> 00:08:30,730
Sometimes there are cases where writing and retrieving from the cache is considered more expensive than

106
00:08:30,730 --> 00:08:31,450
the actual task.

107
00:08:32,050 --> 00:08:35,500
In this case, task explicitly not made catchable.

108
00:08:35,590 --> 00:08:37,780
This, for example, the case for the task.

109
00:08:38,290 --> 00:08:42,520
With this, we have finished implementing and registering our very own task.

110
00:08:43,210 --> 00:08:48,880
Let's go back to where we were just as a task and also add a group and a description.

111
00:08:53,810 --> 00:09:00,020
If we do our project intelligent now we can see that our new task also turns up in the task list.

112
00:09:03,700 --> 00:09:05,980
Let's Tegretol to execute the task.

113
00:09:08,970 --> 00:09:12,270
Again, we can see how the dependencies.

114
00:09:12,270 --> 00:09:16,320
So the other tasks, for example, are all executed before.

115
00:09:19,130 --> 00:09:23,300
If we rerun the build, we can see that incremental compensation.

116
00:09:23,300 --> 00:09:27,560
So up to date checking also works for our very own task implementation.

117
00:09:30,130 --> 00:09:31,890
And we can find the result.

118
00:09:31,900 --> 00:09:35,980
The text file with the number in it inside the build folder.

119
00:09:38,680 --> 00:09:46,270
We could now, for example, extend our bundle task to also take the output of our task as input to

120
00:09:46,270 --> 00:09:47,920
bundle this file as well.

121
00:09:52,370 --> 00:09:58,610
We have seen how Gradle allows you to implement custom build logic and plug it into Gradle seamlessly.

122
00:09:59,120 --> 00:10:05,840
If you already use convention plugins and already have a plugin build, it's a small step to add a task

123
00:10:05,840 --> 00:10:08,360
implementation as part of this plugins.

124
00:10:08,720 --> 00:10:11,990
You can add it to the source folders that are already available.

125
00:10:12,740 --> 00:10:19,730
If you use inputs and outputs with the greater specific types, this task can be wired into the task

126
00:10:19,730 --> 00:10:24,470
setup you already have and will be executed as part of your build if necessary.

127
00:10:24,890 --> 00:10:29,270
Up to date, checking and even caching works for custom inputs and outputs.
