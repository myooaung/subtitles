1
00:00:01,490 --> 00:00:07,490
Now that we have learned about the task concept and Gradle, we can take a closer look at how to customize

2
00:00:07,490 --> 00:00:08,390
tasks set up.

3
00:00:09,830 --> 00:00:12,590
The first thing is to configure tasks.

4
00:00:12,610 --> 00:00:16,270
We already have tasks at above plugins.

5
00:00:16,360 --> 00:00:24,580
So when we go to our Java based convention plug in where we apply to Java plugin, we can go and configure

6
00:00:24,580 --> 00:00:28,000
tasks that have been added by the Java plugin.

7
00:00:29,210 --> 00:00:36,800
Because that's a plugin we applied here in the top to x tasks directly use the tasks container.

8
00:00:37,700 --> 00:00:39,920
For tasks that are already registered.

9
00:00:39,950 --> 00:00:48,110
There is an excess of when you use to call in dstl so you can write tasks, compile Java for example,

10
00:00:48,320 --> 00:00:50,810
to configure the compile Java task.

11
00:00:53,070 --> 00:00:58,460
The same name that we saw earlier when we looked into the console which tasks have been executed?

12
00:01:00,390 --> 00:01:04,800
So ideally details of tasks are already configured through extensions.

13
00:01:04,800 --> 00:01:10,680
So for example, when we set the Java version up here, the Java plugin will take care that this information

14
00:01:10,680 --> 00:01:16,350
is forwarded to all tasks that care about the Java version, which are the compiled tasks.

15
00:01:16,770 --> 00:01:19,860
The test task and also the Java Top task.

16
00:01:20,220 --> 00:01:26,580
But we can also configure all of these tasks directly and in some cases we need to because the extension

17
00:01:26,580 --> 00:01:31,050
just didn't offer us the possibility to configure certain detail.

18
00:01:31,940 --> 00:01:37,310
One example is the encoding which is expected from the Java source code.

19
00:01:37,430 --> 00:01:41,120
So this value might differ on different operating systems by default.

20
00:01:41,120 --> 00:01:43,490
So it's good to set it to a fixed value.

21
00:01:44,030 --> 00:01:47,720
This is done through the options encoding setting.

22
00:01:47,870 --> 00:01:50,510
A good choice is to set it to UTF eight.

23
00:01:51,450 --> 00:01:54,980
Note that all these options are typically inputs to the task.

24
00:01:54,990 --> 00:02:00,970
So if you set an option, it's a task where we execute, even if the source files have not changed.

25
00:02:00,990 --> 00:02:06,090
So not only files but also configuration details are inputs to tasks.

26
00:02:07,110 --> 00:02:12,360
If we take a look at which tasks are available in our projects, we can see that there is also a compile

27
00:02:12,360 --> 00:02:15,330
test java task which compile test code.

28
00:02:15,660 --> 00:02:17,100
We haven't added this yet.

29
00:02:17,320 --> 00:02:18,750
We'll do it a bit later.

30
00:02:18,750 --> 00:02:25,590
But this task also compiles code so it probably makes sense to set the encoding option here as well.

31
00:02:27,280 --> 00:02:30,260
In such cases, we have similar tasks.

32
00:02:30,280 --> 00:02:35,020
It makes sense to set the options for all tasks of a certain type.

33
00:02:35,770 --> 00:02:37,110
With the Toth type.

34
00:02:37,120 --> 00:02:45,580
I mean, the implementation of a task behind each task there is some Java class or Kotlin or Ruby class

35
00:02:45,580 --> 00:02:48,310
that implements the task action.

36
00:02:48,310 --> 00:02:54,580
So the actual code that is executed when the task runs and does something, for example, calling the

37
00:02:54,580 --> 00:02:55,600
Java compiler.

38
00:02:56,640 --> 00:03:02,520
So if you want to find out what the type of certain task is, you can use the code navigation feature

39
00:03:02,520 --> 00:03:09,390
of the IDE to navigate into the SSA and you will eventually find the task implementation, which in

40
00:03:09,390 --> 00:03:11,550
this case is part of greater core.

41
00:03:11,970 --> 00:03:18,060
In other cases, you might end up in the job of another plugin if the task was added by a community

42
00:03:18,060 --> 00:03:18,660
plugin.

43
00:03:19,140 --> 00:03:23,550
In this case, we can see that the implementation type is Java compile.

44
00:03:23,970 --> 00:03:30,060
To configure all tasks of a certain type, we can use the tasks dot with type notation we add to type

45
00:03:30,060 --> 00:03:31,800
here in Kotlin.

46
00:03:31,830 --> 00:03:36,090
This type notation can be used for that and then do configure each.

47
00:03:36,750 --> 00:03:42,660
Now we have a configuration block that is applied to all tasks of this type and we can set the encoding

48
00:03:42,660 --> 00:03:43,080
here.

49
00:03:46,110 --> 00:03:52,620
I would be very careful with using the with type way to configure things because it will configure all

50
00:03:52,620 --> 00:03:57,570
the tasks of this type, no matter at which point they are added over just to the project.

51
00:03:57,600 --> 00:04:03,510
In this case, it makes total sense to use it, but just be careful in general and if possible, prefer

52
00:04:03,540 --> 00:04:05,100
using the direct source.

53
00:04:06,080 --> 00:04:13,580
If an excess or is not available for some reason you can also use the notation dot named for accessing

54
00:04:13,580 --> 00:04:20,000
the task, which is exactly the same thing as using accessible in the DSL.

55
00:04:20,030 --> 00:04:24,320
You should use this way to access tasks, but I'll get back to that later as well.

56
00:04:25,680 --> 00:04:30,720
Another task you typically have to configure is the test task, which will also talk about.

57
00:04:31,700 --> 00:04:32,130
That's it.

58
00:04:32,150 --> 00:04:37,460
Using the task container, you can configure details of any task that has already been registered by

59
00:04:37,460 --> 00:04:43,220
plugins you applied or using the tag notation, you can configure all tasks of a certain type.

60
00:04:43,520 --> 00:04:48,650
However, if possible, try to configure things through an extension if that is available so you don't

61
00:04:48,650 --> 00:04:50,570
even need to touch the task directly.
