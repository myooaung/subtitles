WEBVTT
1
00:00:01.130 --> 00:00:03.770
Let's get started with the first practical lecture.

2
00:00:03.800 --> 00:00:07.040
This course is best enjoyed using two monitors.

3
00:00:07.640 --> 00:00:14.660
You can run and pause if necessary a lecture video on one monitor and open intelligent idea on the other

4
00:00:14.660 --> 00:00:15.350
monitor.

5
00:00:15.470 --> 00:00:19.550
Then you can go along when we create the example projects step by step.

6
00:00:20.600 --> 00:00:26.540
You can see that things work for yourself and if you feel inclined, you can pause the lecture video

7
00:00:26.540 --> 00:00:33.350
and explore the greater dstl and the Gradle APIs yourself, or try around with some different configurations

8
00:00:33.350 --> 00:00:35.690
than the one we are doing in the course.

9
00:00:37.490 --> 00:00:43.200
The only thing you need as preparation is to have a Java version installed and a recent version of the

10
00:00:43.200 --> 00:00:45.270
intelligence community edition.

11
00:00:46.080 --> 00:00:49.980
If you don't have that, you can download it from the jet print website.

12
00:00:50.490 --> 00:00:56.100
Intelligence is the idea with the best gradle integration today, and that's what we are going to use

13
00:00:56.100 --> 00:00:56.520
it.

14
00:00:56.520 --> 00:01:02.220
In the unlikely case you don't have Java installed, IntelliJ should also be able to provide it for

15
00:01:02.220 --> 00:01:04.410
you if you don't have intelligence yet.

16
00:01:04.440 --> 00:01:08.880
Pause the video here, download it and install it and then we can continue.

17
00:01:10.860 --> 00:01:17.070
Now the only other thing you need is an empty folder, because we'll build the project step by step,

18
00:01:17.070 --> 00:01:23.160
looking at each file individually to understand why it is needed and which configuration goes into which

19
00:01:23.190 --> 00:01:23.700
file.

20
00:01:23.730 --> 00:01:27.690
I call the folder my project, but you can call it whatever you like.

21
00:01:28.050 --> 00:01:30.390
Then we open the folder and intelligent.

22
00:01:30.420 --> 00:01:32.880
I have it here in my favorite project already.

23
00:01:32.910 --> 00:01:37.620
If you don't have it there, you can click on open and select the folder.

24
00:01:38.790 --> 00:01:44.730
And Teddy has specific support for creative projects, so it knows about Gradle and how to read the

25
00:01:44.730 --> 00:01:46.610
project structure from Greater.

26
00:01:46.620 --> 00:01:51.300
But this is not a greater project yet, and intelligence doesn't know that we want to use Cradle.

27
00:01:51.450 --> 00:01:55.800
We can make it a greater project by adding the so called settings file.

28
00:01:56.280 --> 00:01:59.130
This is the entry point of every Gradle project.

29
00:01:59.790 --> 00:02:06.660
If the file exists, IntelliJ or Gradle itself will recognize this folder we just created as a greater

30
00:02:06.660 --> 00:02:07.350
project.

31
00:02:08.270 --> 00:02:10.400
So let's go ahead and create this file.

32
00:02:10.730 --> 00:02:15.620
It's called settings and then Dot, Gradle or CTS.

33
00:02:15.980 --> 00:02:18.090
So CTS stands for Kotlin script.

34
00:02:18.110 --> 00:02:22.760
So if you add this extension, greater notes that you want to use the Kotlin variant of the greater

35
00:02:22.760 --> 00:02:23.510
DSL.

36
00:02:23.870 --> 00:02:29.450
If you leave it out, Groovy will be expected as soon as a Settings file exists.

37
00:02:29.450 --> 00:02:36.440
IntelliJ recognizes this and suggests to us to import this as a greater project, which we do.

38
00:02:37.660 --> 00:02:42.100
We can see now that intelligence added a bunch of extra files for us.

39
00:02:42.250 --> 00:02:44.500
This is a so called creative wrapper.

40
00:02:44.890 --> 00:02:48.670
As you may have noticed, we didn't need to install Gradle itself somewhere.

41
00:02:49.120 --> 00:02:52.480
It's a great wrapper is a tool that takes care of this for us.

42
00:02:52.960 --> 00:02:58.630
It's a small tool that you can add to your project and also commit to version control, for example,

43
00:02:58.630 --> 00:03:04.990
to get so that everyone who wants to build this project automatically get the right gradle version to

44
00:03:04.990 --> 00:03:07.540
build it with and doesn't need to install anything.

45
00:03:08.680 --> 00:03:13.810
We see that there are two start scripts, one for Unix and one for Windows to start the creative wrapper

46
00:03:13.810 --> 00:03:15.190
and create it through it.

47
00:03:15.700 --> 00:03:21.490
And then there is a jar file, which is the actual implementation of the wrapper and the wrapper properties

48
00:03:21.490 --> 00:03:23.410
file to configure the wrapper.

49
00:03:24.660 --> 00:03:28.410
If we open the properties file, we can find a greater version here.

50
00:03:28.680 --> 00:03:31.950
IntelliJ chooses the last version it knows about.

51
00:03:31.980 --> 00:03:34.950
If you want to use another version, you can change it here.

52
00:03:35.130 --> 00:03:37.710
We'll use the latest Creative seven release.

53
00:03:37.980 --> 00:03:42.360
At the moment, this video was recorded, but you may use a newer version as well.

54
00:03:42.390 --> 00:03:47.230
Everything I show in this course will be compatible with the upcoming Gradle versions.

55
00:03:47.250 --> 00:03:53.040
Also, new major versions relate every time we change something in a related file.

56
00:03:53.070 --> 00:03:59.100
IntelliJ will detect this and then suggest that we do a new sync of the project.

57
00:03:59.130 --> 00:04:05.550
This means that IntelliJ reads the structure of the software project again from the description we do

58
00:04:05.550 --> 00:04:06.240
in Gradle.

59
00:04:06.900 --> 00:04:12.600
So every time we change something, IntelliJ has to recreate this model so that it's in sync with what

60
00:04:12.600 --> 00:04:13.800
we describe in Gradle.

61
00:04:14.070 --> 00:04:19.710
If you press this button now, it might again take a moment because we change the greater version potentially.

62
00:04:20.340 --> 00:04:26.580
You may also have noticed that as we imported the greater project, IntelliJ offered an additional view

63
00:04:26.580 --> 00:04:27.210
for us.

64
00:04:27.210 --> 00:04:28.120
The greater view.

65
00:04:28.140 --> 00:04:34.380
We can use this to execute gradle tasks, which we will talk about later, but there's also a link button

66
00:04:34.380 --> 00:04:35.640
here in the upper left.

67
00:04:35.640 --> 00:04:42.210
So if you need to trigger a sync, an intelligent doesn't offer you the small sync button in the upper

68
00:04:42.210 --> 00:04:43.380
right of the file.

69
00:04:43.410 --> 00:04:45.780
You can also trigger the sync here.

70
00:04:46.560 --> 00:04:52.920
Let's leave the grey wrapper for now because before we can use Gradle to do something useful, we actually

71
00:04:52.920 --> 00:04:56.040
have to describe our software project to Gradle.

72
00:04:57.310 --> 00:05:00.400
So let's start in the settings file we already created.

73
00:05:02.140 --> 00:05:08.710
As I said, the settings file is the entry point of the project and therefore it contains the description

74
00:05:08.710 --> 00:05:10.180
of the project structure.

75
00:05:12.040 --> 00:05:18.730
In Gradle, a project is split up in so called Subprojects, which you can look at a separate software

76
00:05:18.730 --> 00:05:19.570
component.

77
00:05:19.750 --> 00:05:25.600
So for any larger or growing software, it does make sense to split it up into multiple components.

78
00:05:26.660 --> 00:05:32.180
And even if you start a small project, you can start with one component here and add more potentially

79
00:05:32.180 --> 00:05:32.750
later.

80
00:05:33.140 --> 00:05:39.890
So what this course will use an example where we have built a Java application consisting of three components

81
00:05:40.460 --> 00:05:49.010
a data model, four data classes, a business logic component for services and an app project with some

82
00:05:49.010 --> 00:05:51.500
blue code to assemble the final application.

83
00:05:51.920 --> 00:05:57.440
We express that we want to have these components in terms of created subprojects by using the include

84
00:05:57.440 --> 00:05:59.360
statement in the settings file.

85
00:06:19.270 --> 00:06:27.520
After we did this and sent the model again, IntelliJ We can create folders corresponding to the names

86
00:06:27.520 --> 00:06:28.630
of the components.

87
00:06:52.380 --> 00:06:54.570
And we can see that intelligence.

88
00:06:54.600 --> 00:06:57.150
Marks this a separate project.

89
00:06:58.770 --> 00:07:05.670
So this is something I learned from Gradle that these are now separate components that we want to develop

90
00:07:05.670 --> 00:07:12.270
in details about what each single component is and how it relates to other components will be configured

91
00:07:12.270 --> 00:07:16.170
in another place in the build file, which we'll get to in the next lecture.

92
00:07:16.500 --> 00:07:20.340
Let's first see what else should be put into the settings file.

93
00:07:20.820 --> 00:07:27.810
So apart from the components we develop ourself, software usually also depends on other existing components.

94
00:07:28.320 --> 00:07:35.100
In the case of Java, these are Java libraries or Java components located in repositories like Maven

95
00:07:35.100 --> 00:07:35.670
Central.

96
00:07:36.690 --> 00:07:42.660
So what we can also do in the settings file is terrible about such locations where other components

97
00:07:42.660 --> 00:07:43.560
can be found.

98
00:07:44.400 --> 00:07:50.250
So it's the dependency resolution management block where you can declare such repositories.

99
00:07:50.550 --> 00:07:57.420
For example, we can say if there is a component that is required, which is not part of this project,

100
00:07:57.750 --> 00:08:01.590
look in Maven Central to potentially find the component there.

101
00:08:03.800 --> 00:08:09.650
Another widely used repository is a Google specific one that provides Android libraries.

102
00:08:10.650 --> 00:08:17.580
Or if you and your company have your own repository, which might be a mirror of Raven Central, you

103
00:08:17.580 --> 00:08:19.740
can add your own repository like this.

104
00:08:37.970 --> 00:08:43.520
You can also add more configuration in such a configuration block here where you could provide credentials

105
00:08:43.520 --> 00:08:45.530
for the battery if needed.

106
00:08:56.300 --> 00:09:00.200
Now the components located in the repositories are binary components.

107
00:09:00.200 --> 00:09:04.100
That means that they are already built either by gradle or another build tool.

108
00:09:04.100 --> 00:09:08.120
But Gradle also supports build a component from source if required.

109
00:09:08.570 --> 00:09:14.690
So what we can also do here is use the include build statement to tell Gradle that there is another

110
00:09:14.690 --> 00:09:20.690
great build somewhere that can potentially build a component that we need in large projects that are

111
00:09:20.690 --> 00:09:23.420
potentially distributed over many repositories.

112
00:09:23.450 --> 00:09:29.810
This can be used to split up one software project into multiple gradle builds, or if you depend on

113
00:09:29.810 --> 00:09:34.670
some library that's usually available on Maven Central, but which you need to patch.

114
00:09:34.700 --> 00:09:36.410
You can clone the repository.

115
00:09:36.410 --> 00:09:39.860
If it's a greater build patch, it's there and include it here.

116
00:09:39.860 --> 00:09:44.900
And then Gradle will use the patched version of the corresponding component if needed.

117
00:09:45.170 --> 00:09:51.890
Note that here we only tell Gradle about locations where to potentially find components.

118
00:09:52.250 --> 00:09:56.330
It doesn't say anything yet about which components we actually need.

119
00:09:56.540 --> 00:10:03.080
So only adding this here does not yet have a practical effect when we later run a build, only when

120
00:10:03.080 --> 00:10:08.570
we define dependencies to certain components, greater need to discover this will be important.

121
00:10:08.870 --> 00:10:10.100
We'll get to that later.

122
00:10:10.850 --> 00:10:17.030
Also, these locations are for discovering components that you need for your production code, so for

123
00:10:17.030 --> 00:10:19.400
the software or the product you are building.

124
00:10:19.700 --> 00:10:26.180
Example could be that you use some Apache Commons libraries later in your code and Gradle needs to discover

125
00:10:26.180 --> 00:10:26.790
them somewhere.

126
00:10:26.810 --> 00:10:28.370
For example, in Maven Central.

127
00:10:29.060 --> 00:10:34.010
But then Gradle itself is also extensible with creator plugins.

128
00:10:34.040 --> 00:10:40.220
These are essentially also jobs or Java code that needs to be built, which implements certain gradle

129
00:10:40.220 --> 00:10:41.120
interfaces.

130
00:10:41.780 --> 00:10:49.490
So the mechanism to extend gradle itself is quite similar to adding libraries to the software you're

131
00:10:49.490 --> 00:10:50.150
building.

132
00:10:51.030 --> 00:10:51.840
For this.

133
00:10:51.870 --> 00:10:58.920
There is a plugin management block in the settings file and inside the block you have the same construct

134
00:10:58.920 --> 00:11:01.290
as in the dependency resolution management.

135
00:11:01.290 --> 00:11:05.550
You can add repositories for Gradle to discover additional plugins.

136
00:11:06.000 --> 00:11:12.120
There is the greater plugin portal where most plugins are available, but plugins could also be hosted

137
00:11:12.120 --> 00:11:13.080
on Maven Central.

138
00:11:14.590 --> 00:11:17.920
Or for Android in the Google Repository.

139
00:11:18.880 --> 00:11:26.650
Or if you mirror these repositories or publish your own gradle plugins to some repository, you can

140
00:11:26.650 --> 00:11:28.900
add custom repositories here as well.

141
00:11:29.410 --> 00:11:32.830
And then there's also a include build statement here.

142
00:11:33.460 --> 00:11:37.810
So you can develop Gradle plugins locally and include them here.

143
00:11:38.230 --> 00:11:45.220
This is a very important mechanism for well-structured gradle build setup because you should always

144
00:11:45.220 --> 00:11:47.170
write local gradle plugins.

145
00:11:47.350 --> 00:11:48.910
We'll get to that in a bit.

146
00:12:11.520 --> 00:12:16.320
The last thing you can do in the setting file is giving a fixed name to the build.

147
00:12:16.350 --> 00:12:21.510
So it's not necessarily needed, but it's helpful because the name sometimes turns up in reports.

148
00:12:22.080 --> 00:12:25.680
If you don't set the name, it is derived from the folder name.

149
00:12:25.830 --> 00:12:30.840
So in this case, setting the name to my project would make difference here locally.

150
00:12:33.140 --> 00:12:39.530
But if I would push this to get a repository and on another machine, you check this out into a different

151
00:12:39.530 --> 00:12:40.170
folder.

152
00:12:40.190 --> 00:12:43.490
The name would change that by setting a constant name.

153
00:12:43.490 --> 00:12:44.570
Here is recommended.

154
00:12:45.260 --> 00:12:49.490
There are more things you can potentially do in the settings file, but in a good, well structured

155
00:12:49.490 --> 00:12:50.030
build.

156
00:12:50.270 --> 00:12:51.860
This is mostly what you should do.

157
00:12:52.490 --> 00:12:59.240
So to quickly recap what we've done now we have started the new software project was Gradle adding a

158
00:12:59.240 --> 00:13:00.680
settings file to a folder.

159
00:13:00.680 --> 00:13:02.570
Already made it a way to project.

160
00:13:03.690 --> 00:13:10.050
Then we have said that our software should consist of three components data model, business logic and

161
00:13:10.050 --> 00:13:10.470
app.

162
00:13:11.500 --> 00:13:12.220
In Gradle.

163
00:13:12.250 --> 00:13:13.870
These are called subprojects.

164
00:13:14.700 --> 00:13:18.060
And we define them with the include statement in the settings file.

165
00:13:18.360 --> 00:13:24.090
We've also told Gradle about locations to look for other components we might potentially need later.

166
00:13:24.750 --> 00:13:31.920
This can be located in repositories in binary already built form or another local gradle builds.

167
00:13:32.310 --> 00:13:38.340
These are all places to find additional components for our production code that should become part of

168
00:13:38.340 --> 00:13:39.360
our application.

169
00:13:39.840 --> 00:13:46.050
And then we've also told Gradle about locations where it can find additional plugins to extend Gradle

170
00:13:46.050 --> 00:13:46.710
itself.

171
00:13:47.490 --> 00:13:50.760
We haven't used any of these yet, but we'll get to that.

172
00:13:51.030 --> 00:13:57.810
But first, we want to give some meaning to our own components, which at the moment only empty folders.
