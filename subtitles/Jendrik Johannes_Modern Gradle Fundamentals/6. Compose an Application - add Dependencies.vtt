WEBVTT
1
00:00:01.720 --> 00:00:04.060
Let's go back to our example project.

2
00:00:05.120 --> 00:00:11.960
So far, we have to find our own components and give them our own types, which we have defined in terms

3
00:00:11.960 --> 00:00:13.670
of creative convention plug ins.

4
00:00:15.980 --> 00:00:21.710
So we have two components of type my Java library and one of type my application.

5
00:00:22.990 --> 00:00:24.310
To get a running application.

6
00:00:24.310 --> 00:00:27.940
In the end, these components need to work together in some way.

7
00:00:29.000 --> 00:00:34.760
We've already added the data class, which is called message model to our data model component.

8
00:00:35.390 --> 00:00:36.770
This component is fine.

9
00:00:36.800 --> 00:00:38.480
It shouldn't have anything else.

10
00:00:39.410 --> 00:00:47.300
Let's move on to the business logic component because this is now a Java library and Intel knows about

11
00:00:47.300 --> 00:00:47.780
that.

12
00:00:48.080 --> 00:00:51.740
We can also create a Java source folder here easily.

13
00:00:55.260 --> 00:00:59.280
Let's put a class into this folder, which we call print service.

14
00:01:03.700 --> 00:01:07.330
This service should use the message model class.

15
00:01:07.540 --> 00:01:10.960
Read the message from the model and print it to the screen.

16
00:01:11.230 --> 00:01:13.270
Let's write the code for this.

17
00:01:16.420 --> 00:01:21.940
You'll notice that you won't get any code completion or something for the message model class.

18
00:01:22.240 --> 00:01:28.850
This is because the class is not known in this component, because we defined it in the data model component.

19
00:01:28.900 --> 00:01:32.290
And for now, this component are completely independent.

20
00:01:32.590 --> 00:01:37.090
So to connect to components, you need to define a dependency in Gradle.

21
00:01:38.730 --> 00:01:45.810
In our case, we want the business logic component to depend on the data model component.

22
00:01:46.380 --> 00:01:51.180
That's why we need to go into the build file of the business logic component.

23
00:01:52.580 --> 00:01:56.240
Dependencies are defined in the dependencies block.

24
00:02:00.690 --> 00:02:06.140
The first thing you need is a scope or also coat configuration in greater terms.

25
00:02:06.170 --> 00:02:10.010
We'll talk about this later in a lecture specific on this topic.

26
00:02:10.310 --> 00:02:16.730
If you get started, you can just use the implementation scope for all the dependencies which we are

27
00:02:16.730 --> 00:02:18.140
going to do in this part.

28
00:02:18.380 --> 00:02:23.120
Then after the scope, you define the coordinates of the other component.

29
00:02:23.150 --> 00:02:28.940
I already mentioned this in the previous lecture where we added a dependency to the jar that contains

30
00:02:28.940 --> 00:02:29.840
the spotless plugin.

31
00:02:31.580 --> 00:02:38.450
Now, if the other component is a local project, you can write a shorter by using the project keyword.

32
00:02:38.600 --> 00:02:44.720
So you have our project and then the path of the project, how it's called, which is essentially the

33
00:02:44.720 --> 00:02:46.880
project name with the colon in front.

34
00:02:46.970 --> 00:02:51.590
So this is how we add the dependency to our own data model component.

35
00:02:52.570 --> 00:02:58.270
That's also the dependency to another external component that is fetched from repository.

36
00:02:58.570 --> 00:03:01.660
Let's say we want to use Apache Common Loan.

37
00:03:03.170 --> 00:03:11.780
So now we use the coordinates notation for components, which is a group colon and name colon and a

38
00:03:11.780 --> 00:03:12.380
version.

39
00:03:13.350 --> 00:03:15.680
Because it's an external component.

40
00:03:15.690 --> 00:03:20.370
Again, we need a version to decide which version of the component we want to use.

41
00:03:21.330 --> 00:03:22.620
For local components.

42
00:03:22.620 --> 00:03:27.120
We don't have versions because they are built from the latest local state.

43
00:03:27.240 --> 00:03:34.200
For external components, it's also better to not define the version here, but put them into a central

44
00:03:34.200 --> 00:03:41.310
place so that we don't get a versions over all our build files and potentially also create version conflicts

45
00:03:41.310 --> 00:03:44.460
if we define different versions for the same component.

46
00:03:45.150 --> 00:03:47.460
This will be a topic of a later lecture.

47
00:03:47.820 --> 00:03:50.520
For now, we keep the version here to have it working.

48
00:03:51.150 --> 00:03:57.060
Now, if we think the project was intelligent, IntelliJ also reads the dependency information from

49
00:03:57.060 --> 00:03:57.600
Gradle.

50
00:03:59.160 --> 00:04:03.510
It now knows that the business logic depends on the data model.

51
00:04:03.720 --> 00:04:11.400
This has the effect that the classes compiled in the data model project are seen when the Business Logic

52
00:04:11.400 --> 00:04:12.810
Project is compiled.

53
00:04:14.600 --> 00:04:22.310
So we see that now the class is known and if we extend the implementation of the prison service, intelligence

54
00:04:22.340 --> 00:04:28.100
also suggests to us to use classes from Java common slang because is also known here now.

55
00:04:28.940 --> 00:04:32.930
Let's also add dependencies to our project.

56
00:04:33.140 --> 00:04:38.330
So we go to the corresponding build gradle file at the dependencies block.

57
00:04:40.830 --> 00:04:43.950
And add a dependency to the data model project.

58
00:04:45.340 --> 00:04:53.050
And to the Business Logic Project, because our application has to depend on all of our components because

59
00:04:53.050 --> 00:04:55.870
they are all part of the final product.

60
00:05:01.490 --> 00:05:03.010
And the application project.

61
00:05:03.020 --> 00:05:05.150
We also had a Java source folder.

62
00:05:06.010 --> 00:05:10.000
And in the folder we add an application class.

63
00:05:16.150 --> 00:05:19.030
So this is a simple command line Java application.

64
00:05:19.030 --> 00:05:26.050
So we add a main method and in the method we can now access our service, create a message model and

65
00:05:26.050 --> 00:05:30.490
put it into the service so that the application should print this message.

66
00:05:30.490 --> 00:05:32.290
We have defined here as an example.

67
00:05:35.090 --> 00:05:41.570
Now that we have an application main class, we can tell Gradle that this class is the entry point of

68
00:05:41.570 --> 00:05:45.800
the application so that we enable Gradle to actually run the application.

69
00:05:46.540 --> 00:05:47.320
For this.

70
00:05:47.320 --> 00:05:50.200
The application plugin added an extension.

71
00:05:50.470 --> 00:05:58.270
So in the build file of our project, we Tegretol, which the main class of the application is.

72
00:05:59.700 --> 00:06:06.000
Note that in this case it is fine to do this configuration directly in the build file as it is very

73
00:06:06.000 --> 00:06:08.560
specific to this one component.

74
00:06:08.590 --> 00:06:14.100
The subproject, the application class does not exist again anywhere else.

75
00:06:14.520 --> 00:06:20.610
However, if my application type or my application convention plugin is something that you only use

76
00:06:20.610 --> 00:06:25.560
in this one place as well, you could move this configuration into that convention plugin.

77
00:06:25.890 --> 00:06:28.140
That's a question of taste.

78
00:06:28.170 --> 00:06:30.600
Both solutions are fine from my perspective.

79
00:06:31.600 --> 00:06:35.600
With that, we have a complete software project set up with Gradle.

80
00:06:35.620 --> 00:06:40.420
Following best practices, we can now go and run Gradle builds.

81
00:06:41.420 --> 00:06:45.740
So in this section, we edit the last missing piece to make our project complete.

82
00:06:46.760 --> 00:06:51.500
We added the dependencies between the components so that they can work together.

83
00:06:51.770 --> 00:06:57.920
Gradle is very powerful regarding dependency management, so there will be more lectures on the topic

84
00:06:57.920 --> 00:07:04.310
later on because if you use a lot of external components, you also have to deal with versioning and

85
00:07:04.310 --> 00:07:07.580
version conflicts as already indicated in this lecture.

86
00:07:07.700 --> 00:07:14.510
For now, for this rather small project, everything is great as it is now, and we can go and run gradle,

87
00:07:14.510 --> 00:07:18.890
build, explore what Gradle is doing and how it builds efficiently.

88
00:07:19.220 --> 00:07:24.920
With that, we can then learn what other details we might want to configure and what impact this will

89
00:07:24.920 --> 00:07:25.370
have.
