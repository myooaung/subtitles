WEBVTT

00:00.270 --> 00:01.630
Welcome back all.

00:01.800 --> 00:08.310
So today we're going to go ahead and give our application and ability to create a lot so that we may

00:08.310 --> 00:13.620
see when was the accountant created or when was it deleted or something like that.

00:13.620 --> 00:16.570
We will make our own log service.

00:16.650 --> 00:21.420
However we will primarily use console logs what our consul logs.

00:21.420 --> 00:23.920
Well every single browser has them.

00:23.920 --> 00:25.320
They have different shortcuts for them.

00:25.320 --> 00:29.330
These are like my chapters on the web or on the local web server here.

00:29.610 --> 00:37.290
And if you basically just press F 12 there you go.

00:37.290 --> 00:39.340
These are console logs.

00:39.360 --> 00:43.200
I can go to the angular website and there you go.

00:43.230 --> 00:47.160
You get some sort of an output here what exactly you get.

00:47.250 --> 00:47.900
Well I don't know.

00:47.940 --> 00:49.740
You basically will be able to specify.

00:49.940 --> 00:54.540
You will be passing messages and depending on the messages that are passed those are the sort of logs

00:55.110 --> 00:57.200
that will be printed out here.

00:57.210 --> 01:03.030
But we would like to be able to store those logs and to manipulate them and we would like to have more

01:03.030 --> 01:07.170
control over the logging process itself.

01:07.170 --> 01:13.260
So we will have our own service and that's not the primary reason actually the primary reason for us

01:13.260 --> 01:20.280
having our own logging service is because we don't want to go through every individual part of the application

01:20.310 --> 01:24.130
and actually call the logging service here.

01:24.480 --> 01:30.630
The built in one rather instead we want to have our own logging service where we use the built in met

01:30.840 --> 01:38.820
system for logging and then we just keep on calling our own utility which we can modify and change in

01:38.820 --> 01:44.460
any way we like meaning that we only need to create modifications in one place and they will be applied

01:44.490 --> 01:47.980
across the board throughout our application.

01:49.000 --> 01:56.800
So the very first thing we need to do is basically right click on app and click on an audio file sorry

01:57.130 --> 02:04.060
right click on app we need the new folder new folder in the new folder name will be utils So you till

02:05.820 --> 02:07.200
And then what can you tell.

02:07.290 --> 02:16.590
We're going to go ahead and create a new file in this new file will be for basically a logger dot service

02:16.590 --> 02:24.740
that TS augured US service that D.S. and I spell that right.

02:24.750 --> 02:26.660
Hopefully I did.

02:28.180 --> 02:29.690
Exxon So you got it here.

02:29.690 --> 02:34.520
Let me just copy paste this code here and then I'll explain it.

02:35.150 --> 02:35.990
Excellent.

02:36.320 --> 02:40.640
So most of the code you know here so we're just importing injectable.

02:40.670 --> 02:43.090
I've talked about this extensively before.

02:43.100 --> 02:47.670
And then we're making this class injectable And we're also exporting class.

02:47.690 --> 02:54.680
All of these things have been done before so this is a longer service class but down below there is

02:54.680 --> 02:57.530
a method and this method is public method.

02:57.530 --> 03:03.370
It's called alog and it reads it receives a variable of type string.

03:03.380 --> 03:05.870
So a variable called M-S G.

03:06.020 --> 03:13.190
And then it's calling a built in function console that log and we're passing a message to the string

03:13.190 --> 03:19.280
basically that cancel that log which in turn is printed out onto the consulate of the browser.

03:19.280 --> 03:23.150
The one that I have showed you a moment ago open up your browser you open up a website and press have

03:23.150 --> 03:31.520
12 and you can see the logs basically or reload the site one more time to actually see the actual logs.

03:33.460 --> 03:33.940
OK.

03:34.010 --> 03:42.220
So this will be our logging service our logger service here we're going to perform all sorts of modifications.

03:42.290 --> 03:47.060
As I said this part has been explained before more than once.

03:47.240 --> 03:53.680
And the only new thing here is actually this console dock log built in method every browser has this

03:53.750 --> 03:56.880
ability if you can find the browser that doesn't.

03:56.900 --> 04:03.070
Well while anyway let's go ahead and move on.

04:03.820 --> 04:09.020
So we need to go into the account that service that service that TS.

04:09.040 --> 04:10.620
So let's go there.

04:10.740 --> 04:20.210
UPS let me just save this file close this actual exclusivity it just reopened this file.

04:20.590 --> 04:21.700
Excellent.

04:21.700 --> 04:27.700
So there was one more one new thing that we have imported here so optional is a decorator which basically

04:27.700 --> 04:31.740
states that the injected parameter.

04:31.900 --> 04:40.330
Basically here that the injected parameter will be optional so if it's not initialized it will basically

04:40.330 --> 04:41.710
be set to null.

04:41.740 --> 04:47.140
It won't give us the error message rather instead it will just be set to now why are we doing this.

04:47.140 --> 04:55.330
Well because we would like to have control over the logs whether they are created or not whether or

04:55.330 --> 05:00.070
not the logging process is actually taking place or not.

05:00.100 --> 05:07.630
And so if we initialize it great log if we do not initialize it don't crash don't give an error just

05:07.660 --> 05:09.760
continue and that's it.

05:09.760 --> 05:19.410
That's why we have created this constructor here and so that we would be able to inject the service.

05:19.500 --> 05:21.440
So we have a longer service here.

05:22.910 --> 05:25.250
And that we could use it.

05:25.490 --> 05:29.630
Basically the optional ops most mouse to be running away.

05:29.930 --> 05:38.420
The optional decorator here at the one basically the Scraw that I described a moment ago that makes

05:38.420 --> 05:44.540
this program that makes this parameter actually optional what are initialized or not.

05:44.540 --> 05:50.570
We basically we need it here because we didn't provide the logger's service anywhere here you can see

05:50.570 --> 05:52.950
that we didn't really do any anything with it.

05:52.970 --> 05:54.180
We didn't specify it.

05:54.200 --> 05:57.320
We didn't initialized we didn't perform anything with it.

05:57.320 --> 06:00.680
We've just stated it here and it's not going to work.

06:00.800 --> 06:06.030
Not just yet but because you have an optional here.

06:06.260 --> 06:08.480
This is not a mandatory thing.

06:08.480 --> 06:13.820
And notice that I've written here private in front of the private variable logger.

06:13.880 --> 06:15.380
What does this mean.

06:15.380 --> 06:19.270
Well if you go to the.

06:19.370 --> 06:20.260
Which one was it.

06:20.280 --> 06:24.520
Is a tough component.

06:24.680 --> 06:26.590
You just scroll down and find it.

06:26.620 --> 06:27.400
There we go.

06:27.700 --> 06:33.940
So as you can see we have the constructor and then you have a counter service type account service and

06:34.000 --> 06:40.390
we had to put it into an actual variable because it doesn't exist outside of this constructor.

06:40.440 --> 06:48.100
However this one because simply due to the fact that it's private it actually exists outside of this

06:48.100 --> 06:49.410
constructor and can be used.

06:49.410 --> 06:57.010
Basically this is the equivalent of me writing this private logger.

06:57.010 --> 07:00.150
So it exists outside.

07:00.370 --> 07:04.930
Just because I've stated that it's private is just a handy trick so you don't have to store it in a

07:04.930 --> 07:10.670
different variable which is actually defined outside anyway.

07:12.700 --> 07:21.180
If you go down down down Rigaud and just under remove the Riego.

07:21.850 --> 07:25.190
So it says OK yeah.

07:25.210 --> 07:26.760
These two are the same.

07:26.820 --> 07:30.070
So there is an IF condition here.

07:30.680 --> 07:34.070
It's as if it's a public method create.

07:34.080 --> 07:39.760
So we did it within the create method we're giving the ability for the log files to be created for the

07:39.760 --> 07:43.840
logging for the logging process to actually take place.

07:43.840 --> 07:48.460
It says if and then it's pointing to the log or private variable.

07:48.460 --> 07:55.480
So if this is not all that's means it's going to be false so this condition will be evaluated as false.

07:55.480 --> 07:58.730
And this year will not occur.

07:58.750 --> 08:08.410
However if the logger is initialized with anything other than 0 or now then this condition will be evaluated

08:08.410 --> 08:09.260
as true.

08:09.430 --> 08:11.950
And we will have a log printed out.

08:11.950 --> 08:18.310
It will be account created and then the title of the account we could add more and more things here.

08:18.580 --> 08:20.410
The same logic applies here.

08:20.410 --> 08:25.630
Basically if an initialized do nothing this is not going to happen if initialized.

08:25.630 --> 08:26.400
OK.

08:26.500 --> 08:31.300
Go ahead and create a log that the account has been deleted.

08:31.750 --> 08:32.340
OK.

08:32.380 --> 08:36.990
So for the time being going to bid you farewell and we shall see each other in the follow up tutorial

08:37.030 --> 08:37.540
hopefully.
