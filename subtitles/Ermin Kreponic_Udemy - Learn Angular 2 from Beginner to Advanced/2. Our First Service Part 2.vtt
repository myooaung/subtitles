WEBVTT

00:00.360 --> 00:02.210
Welcome back all.

00:02.310 --> 00:06.000
So we're going to go ahead and move on to the app component.

00:06.050 --> 00:13.030
Yes file the very first thing if we're going to do however will be to remove app components spec ts.

00:13.080 --> 00:23.040
So go ahead and moved to a crash but delete just like delete with trash that's it it cause some problems

00:23.040 --> 00:25.370
for me so I figured I would just delete.

00:25.440 --> 00:29.220
Because well we don't really need it for anything.

00:29.290 --> 00:34.830
It's there are some other files which we actually don't need for editing as well but it doesn't matter.

00:34.840 --> 00:38.130
They're not causing any problems whatsoever for us now.

00:38.550 --> 00:46.410
So these two imports remain from the trial interface where the code was being tested out so we're just

00:46.410 --> 00:51.060
going to go ahead and remove that and managed to copy them there by accident.

00:51.600 --> 00:58.620
OK down below the only new import is the account service and we know.

00:58.730 --> 01:04.170
And here is the path which we have created previously and you have the injector which has been explained

01:04.170 --> 01:08.040
as well previously that is imported here as well.

01:09.720 --> 01:16.590
So if you scroll down you will see that there is a new thing here it says providers account service.

01:16.920 --> 01:27.360
With this we're basically telling and that we would like to use this service in our service in our class

01:27.450 --> 01:31.420
and it will inject it immediately.

01:32.490 --> 01:37.250
So next up we're going to go ahead and jump into the app component down below.

01:37.270 --> 01:45.030
So we have private accounts array and this is a variable in which we place accounts after we have gotten

01:45.030 --> 01:48.710
them with our service in the constructor down below.

01:48.720 --> 01:58.600
However this one and this one have nothing to do with one another quite literally yes they have the

01:58.600 --> 02:01.630
same name but they're nothing to say.

02:01.780 --> 02:03.260
This one is app component.

02:03.310 --> 02:14.680
Here's the other one is in the account services whereas it can services Dotty's So two different components.

02:14.680 --> 02:18.950
They have nothing to do with one another they can have the same names.

02:19.080 --> 02:22.120
No big deal there anyway.

02:22.720 --> 02:25.690
Next up we have private accounts service.

02:25.870 --> 02:33.130
So this is just a variable in which we shall place the instance of our instance of our service after

02:33.130 --> 02:35.030
angular injected.

02:35.590 --> 02:41.620
So we'll see soon enough in the constructor that we will immediately utilize the two previously mentioned

02:41.620 --> 02:47.070
variables the private accounts and private accounts services which are separate as you can see it will

02:47.180 --> 02:47.740
get better.

02:47.740 --> 02:50.500
And that's one.

02:50.550 --> 02:53.730
So have a constructor here.

02:53.890 --> 02:56.540
And I've already explained what constructor is but it's been a while.

02:56.590 --> 02:58.120
Let me just remind you.

02:58.300 --> 03:06.760
So constructor is a special type of a method which is used for the initialization of a class creating

03:06.760 --> 03:11.220
it that is doing the creating of this component.

03:11.460 --> 03:22.990
This entire component the app component TS angular will basically call this constructor or find the

03:23.000 --> 03:24.020
constructor.

03:24.020 --> 03:24.470
There we go.

03:24.470 --> 03:31.210
So Anglo would basically call this constructor and it will inject account service.

03:31.340 --> 03:33.410
How does Engler know what to inject.

03:33.410 --> 03:41.720
Well because we are telling it the parameter is of type account service or this is just the parameter.

03:41.720 --> 03:50.970
Keep in mind the fact that it has a name account service this is a parameter account service and you

03:50.980 --> 03:53.550
have a type account service.

03:53.590 --> 03:54.650
Two very different things.

03:54.680 --> 04:02.590
Were telling it that the parameter that parameter is of type account service so it knows knows what

04:02.710 --> 04:10.540
to inject and then down below what we're doing here is stating that the counter-service which is the

04:10.540 --> 04:18.070
variable here I mean you have it right here so account service that's right here so can service and

04:18.070 --> 04:22.540
Accounting Service we are storing the account service into it.

04:22.540 --> 04:29.890
So this one is actually taking the initialised version of this one and storing it into itself.

04:30.190 --> 04:31.630
Why are we doing this.

04:31.630 --> 04:35.670
Well first of all Engler will know how to initialize this.

04:35.870 --> 04:39.070
So within the constructor it will.

04:39.070 --> 04:41.190
It knows because we have told it to inject us.

04:41.200 --> 04:46.920
And as I stated before once we say something once we tell it to inject it knows what to do.

04:46.930 --> 04:49.330
It does things for us in the background.

04:49.330 --> 04:55.840
So whatever is contained within this parameter account service is unusable outside of this construct

04:55.870 --> 04:59.850
as a common service parameter does not exist outside of this construct.

05:00.010 --> 05:05.260
So we're basically effectively taking whatever is stored into the account service in the as parameter

05:05.530 --> 05:14.410
and putting it in the underline account service parameter which is right here and accounts.

05:14.470 --> 05:20.860
This one underline account service private variable is out side of this constructor and it is usable

05:20.950 --> 05:21.390
elsewhere.

05:21.400 --> 05:22.860
It exists elsewhere.

05:22.870 --> 05:25.530
It exists outside of this constructor's.

05:25.540 --> 05:28.370
So that's how we are able to utilize it.

05:28.390 --> 05:35.260
So we're just using the logic of the accounts services to initialize the account services variable and

05:35.260 --> 05:41.710
then we're taking everything that's stored in it into our private variable underlying account service

05:42.220 --> 05:45.090
which we can use outside of this constructor.

05:45.100 --> 05:46.710
Now the next line here.

05:46.870 --> 05:56.320
Basically here we will initialize basically the logic from the service and use the method and get all

05:56.710 --> 06:00.010
to fetch the data and store it into the accounts variable.

06:00.010 --> 06:05.240
Very very similar very similar actions between these two.

06:05.340 --> 06:10.100
So Double-O we have this create account error string which has been explained before.

06:10.150 --> 06:16.930
And this decorator you know from before these two methods you know from before but there was something

06:16.930 --> 06:17.470
different.

06:17.500 --> 06:26.620
And now we are now we are using the logic from the accounting service in order to perform certain actions.

06:26.620 --> 06:32.860
So for example it says this dot underline accounts service dot create.

06:32.990 --> 06:43.690
Then you have the parameter you create is here just show it to you where is created.

06:43.790 --> 06:44.840
Here we go.

06:45.200 --> 06:46.500
Should separate us.

06:46.730 --> 06:48.830
So create is here and it isn't.

06:48.860 --> 06:49.910
It is logic.

06:49.910 --> 06:58.190
This method provides the logic for creating new accounts while the app component of the US actually

06:58.190 --> 06:59.820
just calls the method.

07:00.080 --> 07:09.800
And with it with its own method and it uses that logic in order to basically manipulate the data store

07:09.800 --> 07:16.090
the data retrieved the data and do whatever it wants with the data whatever logic is within the services.

07:16.370 --> 07:20.970
So what the services part contains the logic here.

07:20.990 --> 07:26.670
We just specify what we want to do and recycle the existing logic within the services.

07:27.200 --> 07:33.970
As you can see we've use our own private variable here which we have initialized with account service.

07:33.980 --> 07:35.410
Simple as that.

07:35.420 --> 07:36.820
So what I'm just told you.

07:36.890 --> 07:38.900
And basically the same thing applies here.

07:38.960 --> 07:45.260
No difference the remove is also in the services.

07:45.530 --> 07:49.880
Down here up there you go ups stick.

07:50.070 --> 07:53.430
So I know that it can be a little bit confusing.

07:53.430 --> 07:54.150
That is why

07:57.380 --> 07:58.330
I've deleted it.

07:58.360 --> 07:59.980
Oh well I have it saved.

07:59.990 --> 08:00.490
Get help.

08:00.490 --> 08:01.810
It's not a big deal.

08:01.960 --> 08:04.620
Anyway I'm done with it.

08:04.730 --> 08:05.530
I'm done with it.

08:05.560 --> 08:11.080
In any case what I wanted to tell you now before I made this deletion mistake is that these things can

08:11.080 --> 08:16.300
be a little bit complex to understand in terms of perhaps not in the technical sense but sure but just

08:16.330 --> 08:18.240
in a logical sense.

08:18.370 --> 08:24.640
So that's why we are open and you can write to us you can post in the discussion section and we'll be

08:24.670 --> 08:31.880
more than happy to explain anything that you might find and clear.

08:32.090 --> 08:37.060
Anyway going to bid you farewell here and hope to see you in the follow up to Tauriel.
