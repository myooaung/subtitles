WEBVTT

00:00.460 --> 00:06.300
Ok so today we're going to have a look at three files we're going to go ahead and modify them for the

00:06.300 --> 00:15.970
purposes of demoing pure and unpure pure and impure pipes to explain what they actually are.

00:16.020 --> 00:24.810
The first file which we are going to process today is searched up transactions dot pipe dot D.S. so

00:24.810 --> 00:27.740
there isn't much code that was added here.

00:27.780 --> 00:30.920
You have a console log by transform called.

00:30.930 --> 00:36.060
This will be printed out in the browser browser console right here.

00:36.060 --> 00:44.850
If you don't know how to call the console you go here and then you click on developer options and web

00:44.850 --> 00:45.590
cons..

00:45.810 --> 00:47.120
This is on Firefox.

00:47.130 --> 00:50.620
It's very similar on Google Chrome as well.

00:50.640 --> 00:54.900
It can compress control shift VI which is just or control shift.

00:54.900 --> 00:56.970
See control shift.

00:56.970 --> 00:57.410
See.

00:57.420 --> 00:58.260
Yup there we go.

00:58.260 --> 01:02.310
So it control shifts we will call this place and you can just click on cancel

01:05.140 --> 01:06.680
on google chrome.

01:06.840 --> 01:09.520
They think it's a control shift.

01:09.630 --> 01:13.660
I have a stake in fact here let's just go ahead and check.

01:13.660 --> 01:16.220
Let me just see if I have chrome installed.

01:19.070 --> 01:20.500
I do have chrome installed.

01:20.510 --> 01:21.760
Let me just go out and show you.

01:21.890 --> 01:22.760
Just in case

01:26.090 --> 01:28.070
control shift.

01:28.250 --> 01:30.680
See Is this going to pop it.

01:30.730 --> 01:31.520
Yup there we go.

01:31.520 --> 01:36.290
So Control shift is universal for Chrome and Firefox and Chrome it's going to be here.

01:36.300 --> 01:42.310
But I mean it doesn't matter the same output will be printed out or similar enough in any case.

01:42.920 --> 01:45.980
OK so back to the code anyway.

01:46.040 --> 01:53.450
Pipe we have added an additional statement here it says pure and then this can be either true or false.

01:53.450 --> 01:56.950
Now I will explain this through a demo.

01:56.990 --> 01:58.360
What it does and what it means.

01:58.370 --> 02:03.390
But for now you can just type it in and you can also add the console log.

02:03.950 --> 02:14.370
Next up we need to go into detail start component dot TS and here there is we just go back to the top.

02:14.390 --> 02:19.700
There's nothing that you need to do for the top it's all pretty much the same or the same.

02:19.700 --> 02:28.970
And if you go down all the way to the bottom there are all I have added this part and everything down

02:28.970 --> 02:29.240
below.

02:29.240 --> 02:33.050
So two methods and one in July zation

02:35.730 --> 02:42.030
0 actually three methods but one one of those methods is just an naturalisation Anyway here I just want

02:42.030 --> 02:48.120
to make a dummy hard coded transaction for the sake of the demo in order to be able to demonstrate the

02:48.120 --> 02:52.100
difference between pure and impure pipes.

02:52.350 --> 02:54.360
Private next ID was 13.

02:54.360 --> 03:02.040
This is just help a variable to use the next available ID so that the ID IDs of the dummy transactions

03:02.100 --> 03:04.380
would not repeat themselves.

03:04.860 --> 03:11.240
And then we have a method here make transaction all that this method does is just have a variable inside

03:11.340 --> 03:19.950
of it and then an array variable inside of it and then it just basically begins the initialization of

03:20.010 --> 03:21.810
the elements.

03:22.020 --> 03:23.450
Nothing new.

03:23.730 --> 03:25.580
Perhaps except for this line here.

03:25.800 --> 03:36.210
This is a quick and dirty trick or a way to convert ID from INT or from number to string.

03:36.210 --> 03:36.800
Why.

03:36.850 --> 03:45.030
Well because ideas need to be of type string and you just you just you have an empty string and you

03:45.030 --> 03:51.440
add to that empty string this number and that number then becomes a string.

03:51.640 --> 04:00.120
Nothing here that is that we haven't done before you just basically goes in disorder initialize iterate

04:00.570 --> 04:08.250
and return initialized array and return dis initialized variable and then just go ahead and repeat that

04:08.250 --> 04:18.970
process again and again and again for as many times as the method is called Down below you have ADD

04:19.030 --> 04:20.330
in array method.

04:20.460 --> 04:28.240
Basically all that this method does is updates the current array of transactions and it adds a new transaction

04:28.270 --> 04:29.800
into the existing array.

04:29.800 --> 04:32.880
So we're using the push method in order to do that.

04:32.890 --> 04:34.600
And you can see make transaction.

04:34.720 --> 04:42.220
We're calling this method here and it's return value is being placed into these parentheses here and

04:42.220 --> 04:46.120
then that return value is being pushed into the trends.

04:46.450 --> 04:52.570
This transfer rate which is basically just to list a list of transactions and down below it says add

04:52.640 --> 04:54.830
an copy of array.

04:55.030 --> 05:01.560
So this basically just copies the all the way into the new one and updated with the new transactions

05:05.810 --> 05:07.460
you deal the new thing.

05:07.460 --> 05:09.200
Here is the slice.

05:09.200 --> 05:10.870
This is how we are actually this part.

05:10.880 --> 05:17.320
This line is actually in charge of copying of copying the array.

05:17.380 --> 05:22.580
So slice usually has parameters we have used that before and we have we have placed parameters between

05:22.580 --> 05:26.450
the parentheses to specify which portions of array would be like to grab.

05:26.600 --> 05:33.380
But in this case where there are no parameters it's just going to go ahead and return the new array

05:33.440 --> 05:38.810
which contains all the elements that's going to grab the entire array as there are no boundaries so

05:38.820 --> 05:41.710
it's just going to go for the length of the entire array.

05:42.410 --> 05:50.060
And this is then down below you have an addition to the new array.

05:50.060 --> 05:54.010
So we're just going to add something to the new array to an X.

05:54.620 --> 06:02.620
Take it with a grain of salt because I did I did do some improvisation here and then finally here we've

06:02.630 --> 06:04.600
just added two buttons.

06:05.730 --> 06:09.030
Two buttons nothing special here.

06:09.090 --> 06:14.650
One is calling add an array method and the other one is calling again copy of array.

06:14.970 --> 06:23.780
And as you can see on the site you do have two buttons so new transaction same array and then new transaction

06:23.870 --> 06:25.050
new array.

06:25.280 --> 06:31.500
So this button will basically just be calling a method which will be updating the current array.

06:31.730 --> 06:38.360
And this button will be calling a method which will be making a copy of the array and adding the new

06:38.360 --> 06:42.440
elements into that copied rate and if the follow up tutorial.

06:42.440 --> 06:47.390
I'm just going to go ahead and go through a short demo that will pretty much clarify

06:52.910 --> 06:56.320
these pipes on the pure and impure pipes.

06:56.330 --> 06:57.760
And why are they important.

06:57.900 --> 07:00.530
What is what does one do and what does the other one do.

07:00.530 --> 07:05.420
So this was just a little bit of prep work in order to be able to demonstrate and explain pure and impure

07:05.450 --> 07:05.950
pipes.
