WEBVTT

00:00.180 --> 00:00.640
OK.

00:00.750 --> 00:01.950
Welcome back.

00:01.950 --> 00:09.900
So I've added a few lines here so I do believe that about it from here onwards down to the bottom and

00:09.900 --> 00:17.220
I will explain each and every one of them and in the bone and ts a few lines have been added here so

00:17.220 --> 00:24.000
from here on we're so from here to here this belongs to the app component.

00:24.270 --> 00:26.090
And then we have the interface user.

00:26.100 --> 00:29.850
All of this will be explained immediately.

00:29.940 --> 00:35.220
So I think I show make tutorials like this from now on will see the code and then I'll explain it line

00:35.220 --> 00:37.440
by line as opposed to typing.

00:37.440 --> 00:42.570
Please feel free to give me a feedback whether you prefer this or the other method of me actually typing

00:42.570 --> 00:44.030
the code as I explain it.

00:44.100 --> 00:50.400
But I think like this I'll make fewer errors as it is quite difficult to actually type and explain at

00:50.400 --> 00:51.390
the same time.

00:51.390 --> 01:01.800
So the class up component has been explained previously and here we see the properties of this app component.

01:01.800 --> 01:10.870
So first of all this is this here is private so you have a this is a user name a variable of type string

01:10.890 --> 01:19.910
so its name is user name and the type is string and value of this string is text.

01:19.920 --> 01:22.290
I don't know this is something stupid that I'm doing here.

01:22.290 --> 01:24.710
I'm creating a user name and password.

01:24.720 --> 01:27.050
Obviously it wouldn't go this way.

01:27.060 --> 01:29.760
I will show you later on more advanced things.

01:29.760 --> 01:33.900
But for now we're going to do very basic things and then we're going to move on to making a real world

01:33.960 --> 01:34.710
application.

01:34.710 --> 01:38.970
But first I want you to master the basics so that's why I'm doing these stupid examples so that you

01:38.970 --> 01:41.120
can learn through them anyway.

01:41.280 --> 01:48.480
So we have a private a private variable here as of who is in the name of the variable his user name

01:48.560 --> 01:56.750
the type as string and it's private private meaning that it cannot be accessed outside of this class.

01:57.120 --> 01:59.130
And then we have other private one.

01:59.220 --> 02:04.550
It says Current User and this one is of type user.

02:04.550 --> 02:13.130
Now variable current user of custom type user that we will define down below.

02:13.140 --> 02:16.440
Actually it is defined down below I'll explain that shortly.

02:16.680 --> 02:25.530
But this variable basically will contain objects with properties so properties will be our user name

02:25.590 --> 02:32.520
and email and this must match the interface Shima scheme down below.

02:32.520 --> 02:38.910
So you have username and email this user name is of type string and email is of type string.

02:38.910 --> 02:40.970
So the properties must match.

02:41.130 --> 02:42.290
Otherwise it will not work.

02:42.300 --> 02:45.880
And it absolutely has to have two of them as they are here.

02:45.910 --> 02:51.600
It cannot have one or the other it has to have two as they are defined down below and they both have

02:51.600 --> 02:52.530
to be string.

02:52.530 --> 02:54.280
So as you can see user name is.

02:54.360 --> 02:58.440
And email is their status at test dot com.

02:59.160 --> 03:08.180
So they absolutely have to be placed in a way that they have been defined in the interface down below.

03:08.490 --> 03:14.090
Basically he lets just go ahead and explain the interface and then I'll explain the method here.

03:14.090 --> 03:26.630
So interfaces are basically similar to classes and they only define types which means we only list properties

03:26.720 --> 03:29.720
there types and prototyped functions here.

03:29.790 --> 03:35.870
Well for when I say function or method it's the same thing basically you call a function a method when

03:35.870 --> 03:38.020
you put a function in a class.

03:38.030 --> 03:41.930
So when you put a function into a class then it's a method but basically it's the same thing.

03:41.930 --> 03:43.810
Don't worry about that.

03:44.180 --> 03:50.040
So as I said interfaces are similar to classes except we only define types.

03:50.060 --> 03:52.550
We do not assign any values to them.

03:52.550 --> 03:57.580
We give a name and then we give a type we give a name and then we give a type.

03:57.590 --> 03:59.540
So this is of type String.

03:59.930 --> 04:07.230
We cannot assign any values to it here and we can also prove type methods within interfaces as well.

04:07.490 --> 04:16.060
So our interface is user and current user will be of type user which is defined here.

04:16.070 --> 04:20.980
But it is not yet the values are yet to be initialized so to say.

04:21.290 --> 04:25.100
So here we actually put them and we initialize them to whatever we want.

04:25.100 --> 04:31.520
As long as it's a string because it says user name string of type string and user name has to be a string

04:31.520 --> 04:31.700
here.

04:31.690 --> 04:37.910
It absolutely has to and email string and email has to be a string here as well.

04:37.910 --> 04:39.600
That is a must have.

04:40.050 --> 04:40.690
OK.

04:40.820 --> 04:42.920
So this method here.

04:42.920 --> 04:48.830
So this is a method that does not take any parameters so as you can see the space between parentheses

04:48.890 --> 04:49.850
is empty.

04:49.880 --> 04:53.680
So it does not take any parameters and its return type is string.

04:53.690 --> 04:58.370
So it absolutely it will return a string in fact it has to return a string.

04:58.370 --> 05:01.660
Since we've stated that the return type is string.

05:02.300 --> 05:05.150
This keyword keyword.

05:05.180 --> 05:11.040
This marks the current instance of the class current user.

05:11.190 --> 05:18.740
Here means that we are accessing current user property so current user here current user here.

05:19.910 --> 05:25.380
And we are pooling from it user name property so we're pooling this.

05:25.790 --> 05:35.220
So from this from the current from the current instance of this we are pooling this.

05:35.420 --> 05:40.850
This is what this line here represents so I have my mouth full of the word this here.

05:41.120 --> 05:48.020
But anyway this is just this is just this is just referring to the current instance of the class.

05:48.020 --> 05:54.110
If you have minimal to no understanding in regard to classes of who you can look up classes in any programming

05:54.110 --> 06:00.560
language the concept is fairly similar but you do not need to understand these complexities just yet

06:00.620 --> 06:05.650
as we move one slowly through this course a lot of these things will be explained as well.

06:05.660 --> 06:08.970
But for the time being this is all you need to know.

06:08.960 --> 06:14.760
So this will basically this entire line is here to pool the username.

06:14.780 --> 06:16.880
Actually it will just print out tests.

06:16.910 --> 06:24.440
Actually the return value will be a string test which is the initialised value of username.

06:24.470 --> 06:26.270
Now how do we present this.

06:26.330 --> 06:32.150
Now we've written all of this how is this presented to a user when they load up a web page.

06:32.450 --> 06:37.110
Well that is why we have a template so app component dot a DML.

06:37.350 --> 06:43.240
We can go here and as you can see a low amount of lines have been added here.

06:43.580 --> 06:49.110
So you have the first line where we're doing something strange here.

06:49.130 --> 06:55.550
And then we're moving onwards doing a lot more of these strange things.

06:55.610 --> 06:56.670
If I just this.

06:56.720 --> 07:04.460
This is actually running as you can see the NPM start has been called and this server is this development

07:04.460 --> 07:05.610
server is running.

07:05.630 --> 07:19.810
So if I just open up a Firefox and a local host Colin 3000 This is the result of this along with this.

07:19.840 --> 07:20.680
So what is it.

07:20.680 --> 07:23.440
What is it that we are doing here what is what is going on.

07:23.440 --> 07:27.090
So you have these things written out anyway.

07:27.370 --> 07:29.200
So the first let's go ahead and take a look at that.

07:29.200 --> 07:31.750
So these are paragraph tags.

07:32.110 --> 07:36.550
Usually some sort of well you can put pretty much whatever you want into a paragraph but I've placed

07:36.670 --> 07:40.770
hello and comma and then I've used this.

07:40.780 --> 07:42.870
This is called interpellation.

07:42.970 --> 07:50.590
Whenever you use these double curly brackets or a single curly brackets with percentage sign or something

07:50.590 --> 08:00.220
like that this is called interpellation basically what's going on is that we are getting the username.

08:00.230 --> 08:04.880
In this case so this this thing inside the inside the curly braces.

08:04.880 --> 08:08.910
In this case is a property from a Class AB component.

08:09.140 --> 08:12.990
So you have the you have it.

08:13.540 --> 08:14.820
It's.

08:14.910 --> 08:15.480
Yeah.

08:15.770 --> 08:21.440
So this is a you have app component class and then you have a user name property here.

08:21.590 --> 08:29.090
And if you go back to the DML username is a property of a class A app component.

08:29.360 --> 08:36.770
Since this file is the template from this from this component together they make one call so we can

08:36.770 --> 08:44.270
actually access private things from from this class we can access all the private things from this class

08:44.270 --> 08:45.470
without any problems.

08:45.470 --> 08:47.480
Now why why why how.

08:47.510 --> 08:49.790
How is this how is app component.

08:49.820 --> 08:52.950
HD a model a template for this.

08:53.510 --> 08:55.290
Well simple enough it's an app.

08:55.380 --> 09:02.720
At component and it's a template you RL And we have specified the path to our template which will correspond

09:03.170 --> 09:09.530
which will correspond to this class and pretty much anything that is in here and therefore that makes

09:09.530 --> 09:15.140
up one whole and therefore you can access private private properties and private methods and whatever

09:15.140 --> 09:17.390
is private within that class without any problems.

09:17.390 --> 09:21.680
Otherwise you wouldn't be able to access them at all as they are invisible outside of that class to

09:21.680 --> 09:26.210
anything that's not one whole with that class so to say.

09:26.400 --> 09:29.550
So let's go ahead and take a look at the Web site and see what this prints out.

09:29.550 --> 09:31.480
It says hello.

09:31.830 --> 09:38.100
Test OK so says here.

09:38.140 --> 09:45.730
Hello Colma user name the user name is test and then I placed an exclamation mark at the end for God

09:45.730 --> 09:46.520
knows what reason so.

09:46.530 --> 09:47.740
Hello test.

09:48.070 --> 09:51.910
And the exclamation mark is also printed out on the screen.

09:52.480 --> 09:54.390
Next up we have.

09:54.760 --> 10:01.550
Well this is the hether So just why is this here.

10:02.640 --> 10:05.190
Didn't freshet or didn't Claudette's or something like that.

10:05.190 --> 10:09.910
Let me just go ahead and delete this because this is not relevant at this point in time.

10:10.290 --> 10:15.830
And just save this as it is a C it's immediately loading once I've actually saved that.

10:15.830 --> 10:19.070
So now it has been reloaded.

10:19.080 --> 10:24.230
That was actually an old layout but it doesn't matter it's only the lines below are different so it's

10:24.460 --> 10:30.440
a halo test and this just an ordinary HDMI paragraph except for this is just being printed out onto

10:30.440 --> 10:31.870
the screen.

10:31.910 --> 10:36.900
If I just go ahead and me go ahead then resized this.

10:36.980 --> 10:38.670
Give me a second here.

10:39.320 --> 10:41.340
I do not wish to resize it in that fashion.

10:41.360 --> 10:42.140
I wish to

10:45.040 --> 10:52.740
do this so that you can so that you can monitor in parallel what is going on on the site and what is

10:52.770 --> 10:54.160
actually.

10:54.380 --> 11:02.050
Oh come on friend work with me here work with me so that you can actually monitor what is going on ADHD

11:02.080 --> 11:05.890
M-L code and what is going on on the site as well.

11:06.620 --> 11:08.840
So we went over this one.

11:08.870 --> 11:14.720
Now down below I just wanted to show you that you can use multiple that you can access multiple properties

11:14.720 --> 11:19.920
from a class without any problems as well as your current user data username.

11:19.910 --> 11:29.840
This will pool the user name out of current users so it will pool test and the other one will pool the

11:29.840 --> 11:30.360
e-mail.

11:30.410 --> 11:34.400
So this would that you say current user and then you go into email and then you pull the e-mail out

11:34.400 --> 11:35.310
of it.

11:35.450 --> 11:36.690
And what we get here.

11:36.740 --> 11:38.480
So this is not a minus sign.

11:38.480 --> 11:40.120
This is just the dash.

11:40.460 --> 11:47.990
And so we're not actually subtracting anything from anything else just says Hello test and then dash

11:48.050 --> 11:49.250
test that test dot com.

11:49.250 --> 11:55.760
So the e-mail address down below it's pretty much the same thing here except this is just a different

11:55.760 --> 11:57.470
way of writing the same thing.

11:57.470 --> 12:01.820
So two different ways of writing exactly the same thing that your current user name.

12:01.820 --> 12:07.760
And then we cooked and ate this string and we concoct and ate this string and then we put it all in

12:07.760 --> 12:09.420
one string and then we printed out.

12:09.440 --> 12:13.660
But the way of accessing properties for my class remains exactly the same.

12:13.750 --> 12:21.080
And the final the not the final but the this one is just the demo that you can also not only access

12:21.080 --> 12:27.470
properties but you can also call methods here and what will be written here instead of the method will

12:27.470 --> 12:30.110
be the return value of that particular method.

12:30.110 --> 12:35.060
So if we go into the app component you can see that the return value here is a string which is basically

12:35.060 --> 12:44.250
just a the value of the user name property as you can see it just says hello and then it calls a method.

12:44.280 --> 12:47.180
And basically what happens is just says Hello test.

12:47.250 --> 12:56.760
Is the return value of the method get username and down below we have made a small input field whose

12:56.760 --> 12:58.160
initial value.

12:58.440 --> 13:04.250
So this is the initial value of the input field will be get will be the return value of the get the

13:04.320 --> 13:08.090
method and the return value of the Get username method is just basically just the user name that we've

13:08.100 --> 13:09.630
typed in which is test.

13:09.660 --> 13:17.780
So we we will populate this field by default with the with the return value of the Get username method.

13:17.820 --> 13:21.270
What sort of B what will we be typing into this input field.

13:21.270 --> 13:24.210
Well the type will be text.

13:25.050 --> 13:26.830
So no big no big deal here.

13:26.850 --> 13:31.770
Once again these curly brackets are called interpellation if you wish to learn more about it that is

13:31.770 --> 13:37.110
the term that you should look up on the net so that you can read more about it anyway.

13:37.150 --> 13:40.170
Peter fairwell here and hope to see you in the follow up to Tauriel.
