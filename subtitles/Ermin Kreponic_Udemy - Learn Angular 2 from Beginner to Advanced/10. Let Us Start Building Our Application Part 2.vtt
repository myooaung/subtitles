WEBVTT

00:00.290 --> 00:00.900
OK.

00:01.050 --> 00:02.610
Welcome back.

00:02.610 --> 00:09.880
So now we're going to go ahead and begin modifying our app component dot TS file.

00:10.140 --> 00:13.530
So the very first thing that we're going to do the very first thing that you're going to notice that

00:13.530 --> 00:16.490
it's different is this part here.

00:16.770 --> 00:24.800
So we've imported account from account dot model and we have created it in our previous tutorial.

00:25.410 --> 00:26.290
Yep there we go.

00:26.520 --> 00:33.390
So export class count and as you can see we have actually fully constructed this class.

00:33.510 --> 00:41.220
It has some variables that know it has ID title description balance and then it has a constructor down

00:41.310 --> 00:41.990
low.

00:42.170 --> 00:48.240
If some of you come from some other programming languages you might have noticed that there isn't an

00:48.240 --> 00:51.240
actual name of the constructor here.

00:51.240 --> 00:54.340
Usually it would be like this code.

00:54.570 --> 00:59.440
So the name of the class and the name of the constructor are the same.

00:59.450 --> 01:05.030
However this is not the case in angular.

01:05.100 --> 01:07.460
This is not the case with typescript anyway.

01:07.790 --> 01:15.090
So we will call the constructor with the name of the class anyway but we won't type in the name of the

01:15.090 --> 01:17.540
class here where the constructor is.

01:17.700 --> 01:20.240
And quite frankly for one constructor I think.

01:20.280 --> 01:24.400
Well I mean for the constructor there really isn't any point to have a name.

01:24.420 --> 01:30.120
In all honesty as the name of the class is always the same as the name of the constructor anyway so

01:30.120 --> 01:34.980
it doesn't really matter if you don't place a name here just call the name of the class just call it

01:34.980 --> 01:37.130
through the name of the class.

01:37.260 --> 01:42.750
What I mean I will show later on when we actually get to that part but for the time being I just wanted

01:42.750 --> 01:45.520
to elaborate on that import.

01:45.840 --> 01:48.400
So this part here remains the same.

01:48.420 --> 01:57.160
We still need the template and then we go down into the app component class and we have a look around.

01:57.630 --> 02:00.790
So the very first thing is the private variables.

02:01.050 --> 02:10.440
And there is a naming convention for private variables you place an underline in front of in front of

02:10.440 --> 02:11.330
the name.

02:11.550 --> 02:12.590
In order for you.

02:12.660 --> 02:14.060
In order for.

02:14.160 --> 02:16.370
I mean it doesn't make any difference to the machine.

02:16.540 --> 02:21.630
You can no doubt but it does make a difference to a human being when somebody else reads your code.

02:21.630 --> 02:28.230
So if this for this particular variable is used anywhere else down the line in the code if it has an

02:28.290 --> 02:35.910
underline in front of it whatsoever reads the code will know that there is a private variable based

02:35.910 --> 02:41.460
on this naming convention which is an underline in front of the name of the property.

02:41.460 --> 02:41.820
Sorry.

02:41.820 --> 02:46.190
They're called propertys apparently not variables.

02:46.230 --> 02:53.330
It's very funny how like different programming languages have different names for exactly the same things.

02:53.370 --> 02:58.690
For some strange reason but oh well they're actually called properties here.

02:59.070 --> 03:07.060
So private property accounts is of type array and it says an array as you can see down below.

03:07.230 --> 03:13.830
And all of the array all of all of the array members will be of type account.

03:15.210 --> 03:19.040
So we have created a accounting class account.

03:19.200 --> 03:24.790
This is similar to the interface which we have done in the previous tutorials.

03:25.020 --> 03:30.650
So it has ID and ID is one so we're just initializing hath here.

03:30.720 --> 03:31.580
No big deal.

03:32.940 --> 03:37.390
Is going to be one title is going to be bank X Y.

03:37.460 --> 03:43.290
So then scription is getting some in some the full description that we are placing here will be this

03:43.290 --> 03:49.800
is my main bank account and then down below baluns will be five hundred and one point two.

03:49.800 --> 03:55.470
For some strange reason it doesnt we didn't place a whole number here.

03:55.470 --> 03:56.520
We didn't place an industry.

03:56.520 --> 03:58.860
It had to be a floating point.

03:59.550 --> 04:07.510
But in any case they have to match these things so it says Id title description balance.

04:07.830 --> 04:17.990
And here it says Id title description balance because we have specified that that the elements will

04:17.990 --> 04:23.900
be of type account anyway and we move on down below immediately.

04:23.950 --> 04:25.640
So this is a classic array.

04:25.660 --> 04:31.960
There isn't really much to say about it if you don't know what arrays are there basically.

04:32.290 --> 04:35.670
Well here's a simpler representation of an array.

04:35.690 --> 04:41.740
Let me just write some pseudo code out without any actual application without actually being able to

04:41.740 --> 04:44.040
apply it lipping just go ahead and write it and show you.

04:44.380 --> 04:49.210
So this is a much simpler representation of an array if I type it in.

04:49.210 --> 04:58.620
So some sort of an integer array and I say that this integer array shall be called number I can say

04:58.620 --> 05:08.010
that this shall be equal to and then it's going to be 1 2 3 4.

05:08.010 --> 05:12.870
This is not typescript syntax this is just something that I'm typing in to actually demonstrate what

05:12.870 --> 05:14.310
an array is.

05:14.310 --> 05:21.280
So if you have an array number the array number has elements 1 2 3 and 4.

05:21.420 --> 05:24.330
Each one of these elements has its own index.

05:24.330 --> 05:27.090
So the very first element of the array has an index of 0.

05:27.090 --> 05:32.970
The second element of the array has the index of 1 because the indexing usually starts from 0 although

05:32.970 --> 05:39.570
this is not a general rule for all programming languages so far number.

05:40.060 --> 05:45.140
OK so something like this would be.

05:45.140 --> 05:54.010
If so this is the element 0 element 0 is 1 5 typed in no element to this would be zero.

05:54.020 --> 06:00.560
This would be Arment one and this would be element with the index of two and so on and so forth.

06:00.560 --> 06:07.830
So this is how an array looks like in general and now in particular in typescript but arrays can be

06:08.040 --> 06:11.040
made up of a lot of things.

06:11.130 --> 06:18.570
And here we are making a private variable called accounts of type array whose elements will be of of

06:20.070 --> 06:21.620
type account.

06:21.930 --> 06:28.300
We have made it we have made a account here and we have defined what it can contain.

06:28.380 --> 06:35.400
And now we're going to be utilizing that pattern here as well down below.

06:35.400 --> 06:40.590
It's a simple we're what we're doing here is pretty much the same thing that we're doing here except

06:40.590 --> 06:42.770
using different values.

06:43.110 --> 06:50.040
So this is one way to initialize all of these parameters but there is also another way to initialize

06:50.040 --> 06:51.080
them.

06:51.150 --> 06:58.860
You can use a constructor here that says public constructor and it takes arguments just the same as

06:58.860 --> 07:04.620
a method does and you pass these arguments and then it does something with these arguments usually performs

07:04.710 --> 07:08.800
an initialization procedure so it initializes them.

07:09.270 --> 07:10.850
And that is exactly what we're doing here.

07:10.860 --> 07:15.630
We are calling the constructor so a new account you call the constructor in this fashion you type in

07:15.630 --> 07:16.840
the keyword new.

07:16.980 --> 07:23.450
And then you type in the account then you type in the model name basically basically the class name

07:23.460 --> 07:30.830
sorry you have the class name account and then you state new account which is the class name.

07:30.990 --> 07:33.630
And then you pass one argument after another.

07:33.810 --> 07:38.420
As you can see it says ID number OK we have a number.

07:38.420 --> 07:39.470
Here are the notes.

07:39.620 --> 07:46.100
And then you have a title and then you have a description and then you have a balance.

07:46.100 --> 07:51.560
So for some strange reason this one is going to have a bigger balance than this one but it doesn't matter.

07:51.560 --> 07:54.850
These are just two ways of doing pretty much the same thing.

07:54.860 --> 07:57.640
And that has to perform initialization.

07:58.310 --> 08:05.270
If you have any if you don't know what this is or these things here or this entire class go back to

08:05.270 --> 08:09.850
the previous tutorial I have explained to their Anyway

08:12.720 --> 08:14.370
down below.

08:14.520 --> 08:22.830
We're going to go ahead and define our private variable next ID and next ID is going to be equal to

08:22.830 --> 08:23.300
3.

08:23.370 --> 08:26.600
Why is this so I will explain in the follow tutorial.

08:26.610 --> 08:30.960
But for now I just want you to basically take it for what it is and write it there.

08:30.960 --> 08:34.700
Now we will need next ID as the next identifier.

08:34.830 --> 08:36.950
So to say why is it 3.

08:36.990 --> 08:39.400
That's going to come up soon enough.

08:39.840 --> 08:43.020
But Double-O this is far more important for you.

08:43.020 --> 08:46.240
So private create account.

08:46.250 --> 08:53.600
So here we're going to go ahead and create accounts this this method shall be used in order for us to

08:53.600 --> 08:59.820
create new accounts here will be just sorted out a little bit ago.

09:00.150 --> 09:06.630
So now you can see now you can see that there is a private method and you have some parameters that

09:06.630 --> 09:13.550
are to be passed to it here here and here and then down below there is a certain logic.

09:13.600 --> 09:25.130
Now we will be calling this method from a template and each call of this method will create a new account.

09:25.190 --> 09:32.210
Also we would like this method to clean up the input fields upon successful entry and that is the primary

09:32.210 --> 09:38.310
reason we are sending H.T. M-L elements to this method.

09:38.310 --> 09:42.570
Now I'm running a little bit short on time so I'm going to go ahead and continue in the follow up to

09:42.570 --> 09:47.120
Troil where we'll get to the bottom of this of this file.
