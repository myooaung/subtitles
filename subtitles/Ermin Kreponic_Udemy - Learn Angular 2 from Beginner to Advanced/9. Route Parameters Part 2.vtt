WEBVTT

00:00.400 --> 00:07.840
OK so let's go ahead and continue and just close these windows anyway.

00:08.040 --> 00:10.860
I have added a new file.

00:10.860 --> 00:15.100
It's details subcomponent RTX.

00:15.510 --> 00:20.670
So hopefully by now you know how to create files you need to create details that component ideas and

00:20.670 --> 00:25.430
details that component that HDMI out in the account folder.

00:25.440 --> 00:31.470
So let's go over the details start component dot TS anyway.

00:33.490 --> 00:36.100
There are two new imports components we have imported before.

00:36.100 --> 00:40.090
So you have on an IT AND ON destroy here.

00:40.420 --> 00:47.170
These are basically interfaces of which we have N-G in it and energy destroy.

00:47.350 --> 00:55.530
So these methods we will basically explain down below when we actually utilize them.

00:55.690 --> 01:02.530
Now the one down below is the actor activated route.

01:03.160 --> 01:09.550
And this is a service which we shall use in order to obtain the information on routes and with it we

01:09.550 --> 01:16.020
will fetch the information about the parameter activated routes.

01:16.020 --> 01:18.540
Sorry activate it.

01:19.090 --> 01:23.470
This is an actual account and activated service.

01:23.470 --> 01:27.250
This is basically something that we had before component.

01:27.340 --> 01:34.330
We're just basically writing we're writing the basic code for our components.

01:34.330 --> 01:38.550
And I just forgot to start my stopwatch which is always interesting.

01:38.700 --> 01:43.500
Well here's somebody who remembered how to do to remember to do that.

01:43.600 --> 01:44.830
Not important.

01:44.890 --> 01:51.160
We're basically setting up our components so we're directing it to the template which will be rendered

01:51.160 --> 01:56.850
so details that component out HD M-L that is the file which we have created here.

01:57.340 --> 02:00.610
And down below we are exporting the class.

02:00.610 --> 02:07.360
Same as before we're making a class except we're just specifying that we will implement on it and on

02:07.490 --> 02:08.940
destroy method.

02:08.950 --> 02:12.050
So it basically just implements them here.

02:12.430 --> 02:14.200
This is the private variable.

02:14.200 --> 02:16.840
Underscore account type account.

02:16.840 --> 02:20.180
This will contain basically our account.

02:20.750 --> 02:25.600
The one down below the string This will contain an error if it exists.

02:25.610 --> 02:30.850
Those type String underscore error and Param sub.

02:31.240 --> 02:37.900
This is basically what we will we will use this variable in order to hold the subscription to route

02:37.930 --> 02:41.630
parameters and it is of type any.

02:41.710 --> 02:46.430
Because we don't want to think about that so we've just typed in type any.

02:46.660 --> 02:51.230
But I will explain this down below when we get into actual utilizing it.

02:51.250 --> 02:58.380
Next up is the constructor which we will use in order to inject the services.

02:58.390 --> 03:08.200
We will inject activated route into underscore route and activate it service to underscore account moving

03:08.200 --> 03:08.940
onwards.

03:09.100 --> 03:19.200
You have the public method Engy on it now and this method will execute as soon as the component is initialized.

03:19.420 --> 03:26.830
So if we if we need to fetch any information upon the initialization of this component it is better

03:26.830 --> 03:32.910
to put them into Engy in it as opposed to putting them in the constructor.

03:33.100 --> 03:40.130
This advances the stability of the component Sozzi.

03:40.180 --> 03:47.220
OK so now down below we have this the beginning of this statement here and you might have noticed that

03:47.220 --> 03:50.080
it pretty much holds the same syntax as before.

03:50.220 --> 03:57.110
We are using the arrow function the arrow syntax functions or Lambert functions.

03:57.110 --> 03:59.810
Now the essence of this entire thing.

03:59.810 --> 04:09.060
What we are trying to achieve here is the is to subscribe to the changes within the parameters.

04:09.060 --> 04:10.820
Here's how we're going to do it.

04:10.830 --> 04:19.370
First off the underscore Param sub is the variable which will hold the subscription underscore route

04:19.440 --> 04:28.320
is the activated route service which we have injected previously parents is basically the parameter

04:28.410 --> 04:35.490
of underscore route which is of type observable and that refers to the parameters of the route.

04:35.490 --> 04:42.060
Now type observable which I just mentioned is something similar to promises and it is also some form

04:42.120 --> 04:44.380
of a synchronous programming.

04:44.490 --> 04:51.480
It is a lot more powerful than the promises a lot but also far more complex so we won't get into it

04:51.540 --> 04:54.570
just yet and subscribe.

04:55.370 --> 05:05.220
Was basically a method which also takes a function as a parameter but unlike the Dauth then method which

05:05.280 --> 05:12.380
in promise in promises this function will be called whenever the changes of the parameter occur.

05:12.510 --> 05:22.090
So remember before we have Dauth then and this one is different in a sense that it will show the dysfunction

05:22.090 --> 05:26.790
will be called whenever the changes in the parameters occurs.

05:26.790 --> 05:31.750
So as I said before insurers were just subscribing to the changes that occur.

05:31.970 --> 05:38.360
And then we have the lambda function in here at the beginning of it so you have the parameters of the

05:38.360 --> 05:45.050
function and then we begin implementing the body of the function.

05:45.440 --> 05:50.060
Var ID this is the variable ID of type.

05:50.060 --> 05:57.240
Number two to whom we shall assign the value of the of the parameters.

05:58.400 --> 06:00.890
The parameter is ID.

06:00.890 --> 06:03.190
Why is there a plus here.

06:03.380 --> 06:03.910
Why.

06:03.950 --> 06:11.550
Well in case this is a string we're not adding here anything we're not performing any sort of an I mean

06:12.020 --> 06:16.750
basically we're not really performing any mathematical operations but rather instead in case this is

06:16.750 --> 06:18.320
a string.

06:19.100 --> 06:26.530
We want to just place a plus here and convert this to a number that's pretty much it.

06:26.540 --> 06:32.930
Now we have the reset of the account and error values so this is going to be re-initialize Danell and

06:32.930 --> 06:37.070
this will be re-initialize to an empty string.

06:38.370 --> 06:45.750
Double-O you have this underscore account service dot get by id get by ID is the method which we have

06:45.750 --> 06:51.690
explained in the previous tutorial and it has a dot then.

06:51.750 --> 06:58.970
So you go into the basically specify the parameter account and then you specify the action here the

06:58.980 --> 07:05.050
body so account is initial under Square account is initialized to count.

07:05.760 --> 07:12.290
And in case this doesn't actually work out in case the ID doesn't actually.

07:12.540 --> 07:18.950
In case in case we don't find the account with the given ID then we're going to have a catch.

07:19.110 --> 07:25.790
And this is going to cold dead this hot air and it's going it's going to cool underscore air and it

07:25.790 --> 07:34.050
will initialize it to the R R from before which will basically be like there are no accounts with this

07:34.140 --> 07:43.510
ID or something like that then this string will be filled with something so you get something Bob.

07:43.530 --> 07:47.250
And the next time this is called This will be re-initialize to now.

07:47.430 --> 07:53.250
So once again when you call the suit if you don't have duplicate values here and down below all that

07:53.250 --> 07:56.490
we are really doing is simply subscribing.

07:56.490 --> 08:01.370
So once we once the component is done with once it is being.

08:01.410 --> 08:04.710
Once it is destroyed we need to unsubscribe.

08:04.710 --> 08:15.380
So this is called when the component is actually being destroyed and now we go into DHEA metal and here

08:15.470 --> 08:18.260
we don't have a lot of new things.

08:18.300 --> 08:24.620
We have just a new code but we don't have a lot of new concepts which we haven't explained before.

08:24.640 --> 08:32.060
So basically checking if we actually have an account if we have an account then go ahead and get the

08:32.060 --> 08:38.270
account title and get the account description and fetch the balance and place it here.

08:38.660 --> 08:41.980
And down below We're checking if there is an error message.

08:41.990 --> 08:48.860
So if there is an empty string this is not going to show if there is an error then we're going to get

08:48.860 --> 08:50.900
the alert then we're going to.

08:50.990 --> 08:59.810
You know this part from DCA says but this part will be printed out onto the screen the error message

08:59.810 --> 09:02.620
so that there are no accounts by the ID.

09:02.810 --> 09:08.900
We haven't actually implemented the automated system for this but we can basically just go and manually

09:08.990 --> 09:10.510
do this now.

09:10.580 --> 09:17.480
I can type in one and you see it prints and the information that prints the information in regard to

09:17.480 --> 09:22.830
the first account with the ID when it prints information in regard to the counterfeit ID too.

09:23.030 --> 09:25.380
And if I do three because there is nothing.

09:25.400 --> 09:32.640
There are no accounts no account with this I.D. basically no account with the ID of three.

09:33.080 --> 09:33.710
OK.

09:33.860 --> 09:36.390
So that's it in the follow up to true.

09:36.410 --> 09:37.110
Very good.

09:37.160 --> 09:38.750
Go ahead and move on.
