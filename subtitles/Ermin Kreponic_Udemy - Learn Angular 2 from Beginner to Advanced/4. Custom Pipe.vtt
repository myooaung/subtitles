WEBVTT

00:00.490 --> 00:09.710
Ok so today we're going to process three files and we're going to write our own custom pipes.

00:09.990 --> 00:17.910
So the first thing that you need to do is create this file here so search transactions are pipe dotted

00:17.980 --> 00:20.970
TS So does the first fall that you need to create.

00:21.000 --> 00:24.860
And then you need to populated with this short code.

00:24.960 --> 00:27.440
First of all you have to import.

00:27.480 --> 00:29.100
You have two imports here.

00:29.100 --> 00:35.910
The first import imports pipe and pipe transform pipe is a decorator and we are using it to construct

00:35.940 --> 00:38.920
a pipe out of a class basically.

00:39.460 --> 00:49.700
So and pipe transform which is the second one here is an interface which we need to implement so that

00:49.700 --> 00:59.030
our class could actually be a pipe or could act like a pipe anyway the one down below this is just import

00:59.030 --> 00:59.890
transactions.

00:59.900 --> 01:03.090
We have done that many times before.

01:03.500 --> 01:05.660
So here you have that pipe.

01:05.660 --> 01:07.970
This is a very similar tree component.

01:07.970 --> 01:17.310
So here we will use a decorator pipe and we will give it a name which will be searched Crantz actions.

01:17.390 --> 01:25.190
This is the name of the pipe and we will use and what we call this pipe we will use this name so we

01:25.190 --> 01:29.320
will call it by this name down below.

01:29.360 --> 01:33.970
We are basically creating a class search transactions pipe.

01:34.090 --> 01:42.710
It is recommended that the names of these classes and basically with the pipe just the naming convention

01:42.740 --> 01:44.580
but not strictly mandatory.

01:45.050 --> 01:51.200
And then this implements pipe transform anyway.

01:51.860 --> 01:57.890
They have a method down below which is transforms so transform method Z basically a method that every

01:57.890 --> 01:59.460
pipe needs to have.

01:59.690 --> 02:06.800
And we will call it when the data transformation call occurs within the hdmi cord later on but we actually

02:06.860 --> 02:15.230
utilize it the first parameter that the pipe receives is basically the argument that stands are left

02:15.650 --> 02:18.620
to the left of the pipe.

02:18.620 --> 02:22.930
So you have like trance which basically stands for transactions.

02:23.330 --> 02:32.510
Then you have basically just an array of transactions and you have a search query here.

02:34.130 --> 02:39.440
The search queries the parameter by which we will conduct a search this will be a tag.

02:39.440 --> 02:47.930
So when we go on to our site now you could actually search things by tags so all bills I have implemented

02:47.930 --> 02:49.290
the code so I can do it now.

02:49.340 --> 02:54.720
So if I type in builds everything with the tag bills will be displayed this is what we're doing now.

02:54.720 --> 02:56.390
This is the bigger picture I guess.

02:56.420 --> 03:03.420
We want to implement this form so we can search everything down below in terms of tags alone.

03:03.500 --> 03:12.150
So if we type in a tag we will be able to find something that contains that particular tag and that

03:12.150 --> 03:18.420
will be the search query so that will basically be a string which in turn will be the name of a tag

03:18.930 --> 03:22.210
if the search query is equal to nothing.

03:22.230 --> 03:25.200
Then just return all the transactions possible.

03:25.200 --> 03:25.740
So

03:28.440 --> 03:35.160
here if I put it as empty it's going to return to me all the existing transactions.

03:35.220 --> 03:42.620
However if that is not the case then we will need to filter these transactions.

03:42.800 --> 03:52.070
And for this we will need to use a filter method which is which is a parameter basically receives arrow

03:52.070 --> 04:00.770
function here which will be called for every element of this array of transactions and for all the elements

04:00.770 --> 04:08.930
for which this function returns true these elements will basically be shown on the screen.

04:08.930 --> 04:12.950
So let's just go ahead and tear this apart and see what is what here.

04:12.950 --> 04:21.560
So trance is basically the entry parameter and filter is basically a method for the erase it has a built

04:21.560 --> 04:26.360
in method and then you have an arrow arrow syntax function.

04:26.360 --> 04:32.960
Here T is the argument of the function and it represents one element of the array

04:35.430 --> 04:39.390
tags as basically all the tags from the transaction.

04:39.390 --> 04:45.960
So when you type in the dot tags those are all the tags of the transaction and index of the other built

04:45.990 --> 04:52.620
in method for the array which searches for the index of the element which is basically search queries

04:52.620 --> 04:58.910
to have a search query string which you populate with something with some sort of a tag on the site

04:58.910 --> 05:04.830
so you type in something here like that or something bills electricity etc. you type in one of those

05:05.280 --> 05:12.780
and if the element corresponds to or to that string this function will return the index of that particular

05:12.840 --> 05:13.260
element.

05:13.260 --> 05:17.100
If it does not exist however you have a piece of code here.

05:17.280 --> 05:21.590
It will return minus one or if it does exist.

05:21.600 --> 05:25.990
As I stated it will return the index of that particular element.

05:26.910 --> 05:36.160
Now we need to go to details that component us and then we'll move on to D.H. to your mail.

05:36.490 --> 05:48.390
So here we will import a new pipe that we just made so search transaction pipe and you have pipes here

05:49.260 --> 05:56.790
where we simply state that we are going to use this pipe you can have multiple pipes here no problems.

05:56.790 --> 06:00.540
But this is only used for custom pipes were built in pipes it do not.

06:00.540 --> 06:05.370
It is not required for you to actually do this.

06:05.460 --> 06:13.020
Now we need to scroll down for the most part remains the same.

06:13.020 --> 06:15.510
Let me just go ahead and find it so we need a string.

06:15.520 --> 06:23.180
We're looking for the string which is engine industry is up in tag's search query.

06:23.250 --> 06:24.470
OK so here we are.

06:24.500 --> 06:28.390
Sorry to be a bit of time to find out there's a lot of code here.

06:28.390 --> 06:35.920
Anyway this is the string in which we will store our queries so when you type it in we'll use the string

06:35.920 --> 06:41.710
to actually store it and then you have a method down search by tag.

06:41.710 --> 06:49.190
This is a help function helper function that will be used when you click on search and it will store

06:49.190 --> 06:52.090
de-valued that we enter into the string.

06:52.510 --> 06:57.800
So you type in some value and it gets passed to the function.

06:57.800 --> 07:06.460
It can be of any type because I was kind of lazy and then goes this Staggs search query which is the

07:06.460 --> 07:11.130
string up above and then it equals the tag E-L dot value.

07:11.130 --> 07:21.370
So we are pulling the value within a particular the amount element and we are putting it into this string.

07:21.390 --> 07:26.560
Basically that's pretty much all that there is.

07:26.550 --> 07:33.300
So the value the dot value just takes the value from the actually M-L element anyway.

07:33.520 --> 07:42.940
Now we can go and switch to the details that compute and dot each DML and there is a little bit to explain

07:43.030 --> 07:43.910
here.

07:43.980 --> 07:48.470
These are just comments from before so I there's nothing new there.

07:48.560 --> 07:53.500
I'm just looking for the search form.

07:53.810 --> 07:54.540
Here we go.

07:54.830 --> 07:56.210
So this search form.

07:56.210 --> 08:05.170
It corresponds to this on the sites a search by Tag input field button search anyway.

08:08.430 --> 08:09.470
All right.

08:09.510 --> 08:14.930
So you have in line which basically just states that we want everything to be on one line search by

08:14.940 --> 08:19.440
tag and the search button and input field so it's not one below the other.

08:19.440 --> 08:24.770
You have pool right which basically outlines this form to the right.

08:25.200 --> 08:34.950
In regard to the parent element and then you just have basically some bootstrap things down below for

08:34.950 --> 08:45.300
styling it's a search tag a search by Tag it can have a look at it here it says search by tag and import

08:45.300 --> 08:47.500
type text form control.

08:47.520 --> 08:51.660
So Id be search tag and here is the interesting part.

08:51.660 --> 08:57.180
It's a placeholder and that equals tag three lines so this is the default placeholder as you can see

08:57.180 --> 08:58.360
here it says Tag.

08:58.380 --> 08:59.760
And then three lines.

08:59.760 --> 09:05.880
This counts as an empty field but it has a placeholder which is basically tacked on at three and three

09:05.880 --> 09:06.420
dots

09:09.280 --> 09:20.630
see and right after it we have a reference variable to this element because we're going to need to reuse

09:20.630 --> 09:22.820
this element again.

09:22.880 --> 09:25.460
So you have a button submit just like before.

09:25.460 --> 09:26.800
Nothing special here.

09:26.810 --> 09:33.530
It says click and on click you're calling a search by Tag method and to that search by Tag method you

09:33.530 --> 09:43.280
are passing the reference to this input DML to this impot element here and then from that impalement

09:43.280 --> 09:53.090
with a dot value with the dot value here you are pulling at the value that was basically entered some

09:53.090 --> 09:57.340
sort of text that you've entered the name of the tag itself.

09:59.300 --> 10:03.470
So that's basically that's basically it.

10:04.010 --> 10:05.460
That's how you basically pull it.

10:05.480 --> 10:16.310
And in addition in addition to all of that we just we're just going to get what we wanted in a field

10:16.310 --> 10:21.090
so just show you that entire form represents this part here.

10:21.100 --> 10:23.130
So if I type in

10:27.460 --> 10:32.710
this is not going to yield any results but find a tape pin Bill.

10:32.890 --> 10:36.460
Again I think it's because I'm going to get this one.

10:36.460 --> 10:39.840
So everything stays here and this bill is.

10:39.850 --> 10:45.060
Pay bills is the value that is pulled out of this e-mail input element.

10:45.610 --> 10:51.740
And that is basically passed onwards to the method anyway.

10:51.790 --> 11:01.130
Next thing that we have is that this part here but that part is nothing new that's old I'm just interested

11:01.130 --> 11:02.240
in this part.

11:02.240 --> 11:04.590
So this is for display transactions.

11:04.730 --> 11:06.620
So we have an energy for.

11:06.640 --> 11:08.570
But this is not exactly a for loop.

11:08.570 --> 11:09.850
This is a 4.

11:09.860 --> 11:13.150
This is more akin to the for each loop.

11:13.190 --> 11:15.090
So it says alleged t of.

11:15.110 --> 11:17.220
And then something here.

11:17.300 --> 11:21.300
So let's go from left to right.

11:21.340 --> 11:28.600
So you have trans which is passed to the pipe the pipe is search transactions.

11:28.640 --> 11:36.620
Trance is the first argument that is passed to the pipe search transactions and then search transactions

11:36.690 --> 11:42.700
also acts in there in regard to this which says underscore tag's search query.

11:43.010 --> 11:49.490
So this is also the search query is also given to the pipe so that he knows how to utilize this information

11:49.880 --> 11:54.710
because we have to we have to filter out what we are displayed here.

11:54.710 --> 12:00.200
We cannot have all the search things we can cannot have all the transactions we just need the transaction

12:00.230 --> 12:02.040
that we wanted.

12:02.420 --> 12:11.300
So it says whatever comes out of this whatever is the result of this story it into T and then process

12:11.300 --> 12:13.680
the down below.

12:14.030 --> 12:19.940
And for as long as this is retaining values for as long as it has elements say they are being placed

12:19.940 --> 12:25.920
into TI and this is repeated for every single valid element.

12:25.970 --> 12:32.030
What I mean by that is if you type in bills this is going to repeat once if you type in nothing here

12:32.030 --> 12:34.910
if this is empty it's going to go.

12:34.910 --> 12:39.620
Everything is going to be valid and everything will be displayed on to the screen.

12:39.870 --> 12:43.160
Anyway if you have any questions feel free to post them the discussion section.

12:43.160 --> 12:45.210
For the time being I bid you farewell.
