WEBVTT

00:00.230 --> 00:00.670
OK.

00:00.750 --> 00:02.880
So welcome back.

00:02.880 --> 00:08.300
Today we're going to have a look at details that component ADHD mail and details that component that

00:08.360 --> 00:09.090
D.S..

00:09.120 --> 00:12.540
We're going to deal with the TS first.

00:12.900 --> 00:16.000
So let me just go ahead and find it.

00:16.050 --> 00:18.050
I'm looking for the count.

00:19.780 --> 00:20.940
Supposed to be.

00:20.980 --> 00:22.000
There we go.

00:22.030 --> 00:25.730
So we have modified this line here.

00:25.750 --> 00:29.000
You will notice that you now have a promise.

00:29.230 --> 00:36.040
Anyway here we will basically change this to promise as opposed to just being a count so that we can

00:36.130 --> 00:42.880
apply a pipe to this promise and the pipe will basically just conduct the fetching of all the data that

00:42.940 --> 00:44.920
is needed.

00:44.920 --> 00:54.260
Now if we go down further you have this account equals the second service that get by ID.

00:54.260 --> 01:02.240
Now this particular line here will basically return a promise which in turn contains an account with

01:02.330 --> 01:04.770
that particular ID.

01:05.330 --> 01:14.740
And we are storing that into the account variable mentioned previously which is like right here.

01:14.750 --> 01:15.310
So there you go.

01:15.310 --> 01:17.110
This is the account very sorry.

01:17.120 --> 01:20.600
This is the account variable right here.

01:21.200 --> 01:25.490
Anyway the line below.

01:25.490 --> 01:34.010
Well basically this will will this we will leave as was and it is only used for basically fetching the

01:34.070 --> 01:36.440
error anyway.

01:36.670 --> 01:43.780
If we go down further we have a method here as objects check if it's an object.

01:43.780 --> 01:48.610
This is a helper method that checks if something is an object.

01:48.610 --> 01:51.490
Basically it can be recycled.

01:51.760 --> 01:53.440
It receives a parameter.

01:53.470 --> 02:01.630
So basically a parameter of any type and then down below type of object.

02:01.630 --> 02:10.360
If this is equal to object it will state that this is an object if it is not then it is not an object.

02:10.360 --> 02:14.030
So let me just go ahead explain how this works.

02:14.170 --> 02:20.770
If you go ahead and check if something is an object you basically get a return and the return is a string.

02:20.890 --> 02:24.790
So if the return String is object then that something is an object.

02:24.790 --> 02:29.890
If the return String is something different than that something is not an object.

02:30.400 --> 02:31.780
So just type and type of.

02:31.780 --> 02:36.260
This is a method in a strange format without the parentheses.

02:36.430 --> 02:44.380
And then the type of Oh B.J. which is the passed parameter to this function and the type of will basically

02:44.440 --> 02:46.600
return a string.

02:46.630 --> 02:52.340
And if that string is equal to object then RBJ is and is in fact an object.

02:52.950 --> 02:57.070
OK so let's go to the HDMI file.

02:57.100 --> 03:02.950
Now here we haven't done much but there is a good amount to explain.

03:03.310 --> 03:07.180
So this line here in particular is interesting.

03:07.180 --> 03:13.980
And moreover this part here is the primary change that has taken place.

03:14.090 --> 03:16.620
So we'll begin the explanation here.

03:16.720 --> 03:21.440
But counter-intuitively from right to left.

03:21.440 --> 03:24.440
So this part here within the parentheses.

03:24.440 --> 03:29.570
Basically here we are applying d a sink pipe right here.

03:29.790 --> 03:35.070
And the underscore account is a promise and we are use.

03:35.110 --> 03:44.850
And basically this promise is being used the sink is being used in conjunction with the Issing pipe

03:44.850 --> 03:47.270
with the pipe symbol here.

03:48.460 --> 03:59.270
Anyway to use the sink by we needed to utilize the Sendak's anyway while the pipe is not resolved or

03:59.360 --> 04:00.380
not projected.

04:00.380 --> 04:08.170
So while this promise is basically not resolved or not rejected the pipe will keep on returning NULL

04:10.060 --> 04:18.240
when it is resolved or when it is rejected it will return the result obtained by resolving or rejecting.

04:18.240 --> 04:22.620
In our case this is the underscore account object.

04:22.740 --> 04:31.530
If it is resolved and a string which represents the Basically if it is if it is resolved if a resolution

04:31.620 --> 04:34.410
occurs a count will be of type Object.

04:34.410 --> 04:38.780
That's why we are using the function or the method is object.

04:38.820 --> 04:46.010
So whatever happens here if the final result of this is an object then OK it has been resolved.

04:46.170 --> 04:52.500
If the final result of this pipe is not an object then it has not been resolved and we have not gotten

04:52.560 --> 04:57.960
what we wanted to get the hidden part.

04:57.960 --> 05:06.190
Here is basically a substitution for N-G if we had NGF before and now we are using hidden.

05:06.220 --> 05:06.840
Why.

05:07.090 --> 05:16.090
Well because hidden will only visually hide this particular element and this element stretches far down

05:16.090 --> 05:16.660
below

05:19.420 --> 05:21.390
to the closing ups.

05:21.420 --> 05:27.950
Apologies to the closing to the closing day of the day that closes the opening day here.

05:29.270 --> 05:30.970
Anyway why are we doing this.

05:31.010 --> 05:37.400
Well because hidden as I said will only visually hide the whole element if the initial pipe is not an

05:37.400 --> 05:39.800
object while on the other hand.

05:39.800 --> 05:44.410
NGF would eliminate the entirety of the solamente and all the code down below.

05:44.420 --> 05:47.590
And that is not something that we want happening.

05:50.040 --> 05:53.700
And it would put it back if the initial condition was met.

05:53.740 --> 06:02.770
So if you were to use the NGF for the account to be successfully resolved only then would it be only

06:02.770 --> 06:10.430
then it would only help what's go ahead and take the let's go ahead and try this one more time.

06:10.560 --> 06:14.180
Hidden basically hides this visually.

06:14.220 --> 06:22.100
If this is not an object NGF if completely eliminates the div and everything disappears.

06:22.110 --> 06:26.640
So we cannot use it because nothing down below.

06:26.640 --> 06:32.140
Because as you can see we have an icing pipe here we have a nursing pipe here and so on and so forth.

06:32.310 --> 06:34.750
None of these pipes would take an effect.

06:34.790 --> 06:41.250
If if the initial condition was not met and if the initial condition was not met none of these sites

06:41.250 --> 06:47.340
would take effect and that would be a problem because an entire section of ADHD of old code would not

06:47.340 --> 06:51.410
be executed and our site would not function properly.

06:51.600 --> 06:57.120
I hope that was a good enough of an explanation if something is unclear feel free to post in the discussion

06:57.120 --> 06:57.630
section.

06:57.630 --> 07:01.810
We'll be happy to offer additional explanation.

07:01.960 --> 07:12.940
Now if we go down below to this one here now you again have a nursing pipe here but it does something

07:12.970 --> 07:16.790
a little bit differently with the question mark and Dot title here.

07:16.840 --> 07:25.390
We will apply the pipe again and when it when it is resolved basically but it will check if the value

07:25.480 --> 07:27.800
or the title is null.

07:27.820 --> 07:29.580
So this is the this is the

07:33.950 --> 07:38.940
it will check if the it will check if the value of this entire expression is null my apologies.

07:39.160 --> 07:43.680
And then it will call the title to be printed there.

07:43.870 --> 07:49.720
But if the expression is now there is obviously nothing to print therefore there is no point for any

07:49.720 --> 07:51.510
of this to actually occur.

07:51.520 --> 07:55.180
And that's what the question mark does is it now or is it not.

07:55.180 --> 08:02.020
Now if it is not now and the title does indeed exist then it will be shown otherwise it will not be

08:02.410 --> 08:09.760
shown down below you have pretty much the same thing except we are indeed using the NGF here and the

08:09.760 --> 08:15.910
section will be removed if the condition is not meant it will not only be visually hidden as you can

08:15.910 --> 08:21.940
see this line is pretty much the same as this line here except we are pulling a description here instead

08:22.390 --> 08:23.350
of a title.

08:23.350 --> 08:34.500
Again you have basically again you have the same syntax being applied over and over and over again.

08:34.780 --> 08:40.480
I'm just put in small reminders for myself to actually see when something happens and when something

08:40.480 --> 08:45.590
does not happen what to actually see where the changes have taken place.

08:47.010 --> 08:51.220
Anyway same thing again same thing happens here.

08:51.240 --> 08:57.830
Nothing new a little bit of an addition has been made with the bootstrap but that's about it.

08:57.850 --> 09:03.570
And you can literally see the same syntax repeat itself over and over again.

09:03.780 --> 09:11.580
And if we scroll down to the bottom here we have implemented a small Jason pipe.

09:11.580 --> 09:15.140
Now this is a demo of Jason pipe.

09:15.330 --> 09:21.500
This is the sort of pi that can receive pretty much anything that can be in a Jason format I don't think

09:21.550 --> 09:28.380
it can receive functions do and basically it can receive a lot of stuff.

09:28.530 --> 09:31.130
This is purely to show how to use a pipe.

09:31.140 --> 09:32.470
And it is.

09:32.490 --> 09:37.980
And the adjacent pipe is most is mostly used for debugging purposes that is not used very often to actually

09:38.020 --> 09:40.020
display something on the site.

09:40.080 --> 09:46.230
Now with these changes taking place if we open up the site we can see that this here is the Jason format

09:46.230 --> 09:52.230
so this is the demo of the Jason BYB This is why it's often not used to actually display things in this

09:52.230 --> 09:58.470
format to the user but it is used for debugging so that you can see what on earth is going on as far

09:58.470 --> 10:02.100
as the site is concerned the rest of the things don't really have that many changes.

10:02.100 --> 10:08.280
Most of the changes are under the hood so to say anyway but you're farewell and we shall see each other

10:08.370 --> 10:10.100
in the Palatka Tauriel.
