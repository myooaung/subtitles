WEBVTT
1
00:00:00.570 --> 00:00:01.560
Hello, everyone.

2
00:00:01.860 --> 00:00:03.600
So Phillip Davis is fine.

3
00:00:03.810 --> 00:00:11.280
We have got our Dan Plus, which is going to be responsible for testing and running of the application.

4
00:00:11.880 --> 00:00:19.710
We have covered this account blast, which has also several functionalities, like initially, we have

5
00:00:20.220 --> 00:00:26.010
variables for customer number, pin number, checking balance and savings balance.

6
00:00:26.340 --> 00:00:36.150
So basically, it is handling the types of accounts and getting and setting the seismic accessible variables

7
00:00:36.510 --> 00:00:42.540
are to like accessible by all the classes with the help of these get circumvented.

8
00:00:43.110 --> 00:00:53.010
Also, we have used calculation check for to checking Twitter savings, video checking the deposit and

9
00:00:53.010 --> 00:00:59.190
savings deposit and also we have like calculators for checking that transfer.

10
00:00:59.670 --> 00:01:07.860
So this is like calculating all the types of balances, transfers taking place, which we have discussed

11
00:01:07.860 --> 00:01:09.280
in the prototype section.

12
00:01:09.810 --> 00:01:16.050
Then this is going to like calculate all the amounts being transferred between the accounts.

13
00:01:16.510 --> 00:01:25.740
Also, we have like get the methods for checking back to the drawing board, saving the the drawing

14
00:01:25.740 --> 00:01:30.600
board and deposit for board checking and savings account.

15
00:01:31.290 --> 00:01:38.340
So like basically it is checking for the valid input and if then what is the value and then performing

16
00:01:38.340 --> 00:01:39.780
tasks accordingly.

17
00:01:40.230 --> 00:01:47.580
So these are the methods for both her to draw and deposit for both the types of accounts are doing that

18
00:01:48.030 --> 00:01:48.300
now.

19
00:01:48.300 --> 00:01:52.580
After that, we have a good time and time for checking the transfers.

20
00:01:52.590 --> 00:02:00.660
Input also was recovered in the last time that this transfer input is going to like check for us to

21
00:02:00.660 --> 00:02:08.730
lead the types of accounts which is being important, whether it be the checking account or the savings

22
00:02:08.730 --> 00:02:09.270
account.

23
00:02:09.720 --> 00:02:18.780
So according to that type of account and fraud task force, then the choices are paid accordingly.

24
00:02:19.020 --> 00:02:26.330
So if we are in the checking account, then we will be transferring funds to the savings account and

25
00:02:26.730 --> 00:02:27.230
versa.

26
00:02:27.690 --> 00:02:37.170
And also, we are using like a triangular a block exception handling method for handling the exceptions

27
00:02:37.170 --> 00:02:42.110
that may arise while transporting and depositing funds.

28
00:02:42.120 --> 00:02:50.400
So yes, we are checking everything with our separate going along and we have like functions for everything.

29
00:02:51.000 --> 00:03:00.270
So these switch gears we are using for the likes and navigating between the cases, like if the choices

30
00:03:00.270 --> 00:03:03.510
are made correctly, then the slope will execute.

31
00:03:03.870 --> 00:03:09.870
Otherwise, this switch gears will return and nothing will be performed.

32
00:03:10.230 --> 00:03:19.530
The default case is that if not a valid choices like enter dividing to the keyboard, then it will going

33
00:03:20.400 --> 00:03:24.240
to like show output like invalid choice.

34
00:03:24.540 --> 00:03:27.200
So yes, this is the overall thing.

35
00:03:27.210 --> 00:03:36.420
Make our feel now in this box like we are going to cover that hard glass we discussed about earlier

36
00:03:36.840 --> 00:03:38.970
is the options menu glass.

37
00:03:39.390 --> 00:03:46.670
So the options menu glass is going to cover all the options which are going to be like this plane.

38
00:03:46.950 --> 00:03:49.380
We have discussed this in introduction.

39
00:03:49.710 --> 00:03:53.790
Yes, all the options like this dive one two three four five.

40
00:03:54.150 --> 00:04:01.650
And for these checking sound exists also are going to be handled with the help of offer options menu

41
00:04:01.650 --> 00:04:02.070
glass.

42
00:04:02.460 --> 00:04:10.530
Similarly, for these checking, we have types and these types are basically the members of the options

43
00:04:10.530 --> 00:04:11.010
menu.

44
00:04:11.670 --> 00:04:19.080
So these options menu, I'm going to contain all these dives and I've got three functions with those

45
00:04:19.080 --> 00:04:27.030
specific choices and what actions don't be performed on the call of that specific choice.

46
00:04:27.660 --> 00:04:33.660
So what I wanted to do is perform is going to be accessed with the help of this account.

47
00:04:33.660 --> 00:04:40.640
Plus, we have like functions for every choice to be me in the options menu glass.

48
00:04:41.200 --> 00:04:48.420
So yes, we are going to call these savings deposit or whether it can be anything we have use to get

49
00:04:48.420 --> 00:04:49.020
them my time.

50
00:04:49.070 --> 00:04:59.060
So with the help of this, we can use these all the global variables, which are private inside accounts

51
00:04:59.070 --> 00:04:59.880
last inside.

52
00:04:59.930 --> 00:05:01.080
The option menu plus.

53
00:05:01.480 --> 00:05:02.980
So we will see all that.

54
00:05:03.270 --> 00:05:08.480
Now let us first create a new file inside the five C folder.

55
00:05:09.100 --> 00:05:12.820
Call it as option menu, not the Java.

56
00:05:13.600 --> 00:05:23.110
So this file inside the C folder is going to create a public class called as option menu.

57
00:05:23.620 --> 00:05:33.430
And this class is basically going to contain all the options left and the exception handling regarding

58
00:05:33.430 --> 00:05:34.250
the choices.

59
00:05:35.110 --> 00:05:44.530
So inside this public Knox, we are going to initially or scanner will be closed as if the user is going

60
00:05:44.530 --> 00:05:46.780
to put any choice.

61
00:05:46.780 --> 00:05:56.150
So what is going to be the like method to grab the choice like to grasp the choice and thought by the

62
00:05:56.170 --> 00:05:56.480
user.

63
00:05:56.510 --> 00:06:05.170
So we are using this scanner for scanning the specific input we are using this new scanner.

64
00:06:07.510 --> 00:06:15.240
So this scanning is going to create a scanner opponent and now your mind is going to be system docking.

65
00:06:16.510 --> 00:06:22.330
So this system dart then is going to be the argument inside the scanner.

66
00:06:23.530 --> 00:06:26.710
So yes, this is like yes.

67
00:06:27.490 --> 00:06:34.060
So we are done with the creation of this scanner, which is going to scan all of the.

68
00:06:35.090 --> 00:06:37.310
The types entered by the user.

69
00:06:38.030 --> 00:06:44.120
So after the creation of this scanner, we will be displaying them money for Mac.

70
00:06:44.310 --> 00:06:53.300
So like the decimal format is going to be used as the format for the money displaying.

71
00:06:54.170 --> 00:06:55.850
So money format.

72
00:06:56.900 --> 00:07:01.700
And a new decimal format object is going to be created.

73
00:07:02.780 --> 00:07:12.230
For taking input offshore, yes, the sign for the decimal format of the morning book is going to be,

74
00:07:13.640 --> 00:07:15.080
yes, our dollar sign.

75
00:07:15.620 --> 00:07:23.480
We can use also our closing this with our single inverted comma.

76
00:07:24.760 --> 00:07:30.060
And we asked after this closer, we are using this slash.

77
00:07:30.490 --> 00:07:35.650
So basically, these are the methods for displaying the money.

78
00:07:36.090 --> 00:07:44.500
So suppose we have a twenty thousand dollars, so we are going to be displaying it of twenty thousand

79
00:07:44.500 --> 00:07:49.540
and door to door like door to zero zero.

80
00:07:49.630 --> 00:07:56.100
So this is going to be basically the format of the displaying the amount of money.

81
00:07:56.710 --> 00:08:04.050
So three slashes and then those lashes zero point zero zero.

82
00:08:04.690 --> 00:08:11.920
So initially, we have the like this by default, the value in our money format and later it will be

83
00:08:11.920 --> 00:08:13.240
updated accordingly.

84
00:08:13.810 --> 00:08:21.220
We discussed about hash maps in the beginning and what actually these hash map sign.

85
00:08:21.730 --> 00:08:32.200
So these hash maps are going to be the links between the types of choices and the functions attached

86
00:08:32.260 --> 00:08:35.620
to the specific choices like this.

87
00:08:35.620 --> 00:08:37.000
We can see that.

88
00:08:37.600 --> 00:08:40.030
Let me first create this hash map.

89
00:08:40.630 --> 00:08:45.580
So this is the syntax for creating a hash map in Java.

90
00:08:46.750 --> 00:08:54.730
Hash map is basically a function or like our data as we can see that we use inside Java.

91
00:08:55.360 --> 00:09:06.760
And this data will help us to link things and like they can perform tasks integrated manner like if

92
00:09:06.760 --> 00:09:11.890
we say, OK, we will be explaining this, then the help of this slide.

93
00:09:12.610 --> 00:09:18.370
So suppose we are choosing type one and the functions are tasked with it is New Balance.

94
00:09:18.760 --> 00:09:22.810
So this attachment is due to the mercy of the hash maps.

95
00:09:23.200 --> 00:09:26.110
So you can see that in the hash map.

96
00:09:26.230 --> 00:09:35.650
We are having two arguments integer and account and these hash maps that helping us to initially for

97
00:09:35.650 --> 00:09:37.420
suppose this types of accounts.

98
00:09:37.810 --> 00:09:46.300
So these links between type one and the type of specific account is due to the help of hash maps.

99
00:09:46.720 --> 00:09:49.540
So hash maps helps us to map states.

100
00:09:50.080 --> 00:10:00.500
We can attach indexes to specific options and then the tests will be performed accordingly for like

101
00:10:00.520 --> 00:10:01.660
specific choices.

102
00:10:01.660 --> 00:10:05.450
We have already discussed it in the working video.

103
00:10:05.450 --> 00:10:13.630
Upon that, hash maps are going to link things and then tasks will be performed according to that specific

104
00:10:13.690 --> 00:10:13.950
link.

105
00:10:14.350 --> 00:10:23.350
So this helps us to make sure that this type of one is attached to only checking account and not any

106
00:10:23.350 --> 00:10:27.790
other T, and this type two is attached to this savings account.

107
00:10:28.060 --> 00:10:32.770
So once we hit choice store, then we enter in those savings accounts only.

108
00:10:33.130 --> 00:10:35.140
Not any other options.

109
00:10:35.710 --> 00:10:39.220
So I this is the benefit of using hash maps.

110
00:10:40.340 --> 00:10:48.440
So after this, we made several imports which are going to be required inside this option menu glass,

111
00:10:48.740 --> 00:10:57.770
such as decimal format for this hash maps for integrating the options with specific functions and input

112
00:10:57.770 --> 00:11:04.730
output exceptions, suppose that there are any kind of exception then that is going to be handled inside

113
00:11:04.730 --> 00:11:05.570
this package.

114
00:11:06.110 --> 00:11:08.060
And similarly, in danger.

115
00:11:08.240 --> 00:11:10.220
I believe that a map and scans.

116
00:11:10.640 --> 00:11:18.230
So these imports will help us to, like all the components in the are different parts of code.

117
00:11:18.650 --> 00:11:21.920
So inside this get log in.

118
00:11:22.900 --> 00:11:32.740
Function, this is going to throw an exception when the log in is like not happening correctly, suppose

119
00:11:32.740 --> 00:11:38.830
that the user entered the correct customer number might mistakenly entered the wrong pin number.

120
00:11:39.220 --> 00:11:43.030
So that is going to be an exception.

121
00:11:43.140 --> 00:11:52.750
And according to which output will be generating that invalid customer number, pin number and if any

122
00:11:52.750 --> 00:11:59.950
of the invalid count of characters entered by the user suppose that the numerical value is not in some

123
00:11:59.950 --> 00:12:02.170
alphabetical order, anything isn't done.

124
00:12:02.650 --> 00:12:08.470
We are allowing only integers in the customer pin number, our customer number 19 number.

125
00:12:08.800 --> 00:12:17.230
So yes, if any invalid characters are and then the input mismatch exception will be called and this

126
00:12:17.230 --> 00:12:22.600
will turn this statement that invalid character only numbers are allowed.

127
00:12:22.960 --> 00:12:26.680
And yes, we are discard this that customers been.

128
00:12:26.710 --> 00:12:32.620
And yes, the customer number and pin number should be correctly by the user.

129
00:12:33.340 --> 00:12:39.190
Whatever is used while creating this specifico from which they use very strange to.

130
00:12:40.880 --> 00:12:49.130
Now, looking at the next step, like initially we we asked for the time of logging the customer number

131
00:12:49.130 --> 00:12:54.320
and pin number, the next step was to get that type of account.

132
00:12:54.770 --> 00:13:02.810
So for getting that type of account from the option menu, we are using this guest account type function

133
00:13:02.900 --> 00:13:10.370
busing account as the account we have already created as a class inside this account yellow file.

134
00:13:10.700 --> 00:13:15.260
And this is going to like show options like checking account savings account.

135
00:13:15.260 --> 00:13:19.280
And so we have to make choices between these three.

136
00:13:20.000 --> 00:13:27.800
Now we are using like a switch case for entering into that specific account, which is like chosen by

137
00:13:27.800 --> 00:13:28.370
the user.

138
00:13:28.700 --> 00:13:35.720
So if the user chose the checking account, then we are calling this checking my code for entering the

139
00:13:36.080 --> 00:13:37.010
checking account.

140
00:13:37.340 --> 00:13:43.100
Now the options will be displayed according to only checking account type option.

141
00:13:43.460 --> 00:13:51.830
Similarly, with this savings account, and if that is any kind of exception like users input any other

142
00:13:51.830 --> 00:13:57.560
value other than one or three, then it will throw exception that in invalid choices mean.

143
00:13:57.720 --> 00:14:06.470
And similarly, for the cash flow, if anything other than these types are and don't, then and it will

144
00:14:06.470 --> 00:14:09.530
be like displaying that you may have an invalid choice.

145
00:14:09.980 --> 00:14:11.840
Try making a valid choice.

146
00:14:12.560 --> 00:14:16.970
So looking up to what is supposed to be performed next.

147
00:14:17.390 --> 00:14:20.330
So we have successfully logged in.

148
00:14:20.720 --> 00:14:23.750
We have chosen Typekit or type of account.

149
00:14:23.810 --> 00:14:25.820
We want to make transactions.

150
00:14:25.820 --> 00:14:35.450
And then the next step is to display the options view balance with to draw funds, deposit funds of

151
00:14:35.450 --> 00:14:35.870
funds.

152
00:14:36.230 --> 00:14:42.680
According to that, choose an account where there needs to be the saving account or the checking account.

153
00:14:42.860 --> 00:14:51.680
So yes, the next step is to create a function for get saving and then later forget checking.

154
00:14:52.070 --> 00:14:58.070
So we will be creating separate function for saving account options when checking accounts option.

155
00:14:59.040 --> 00:15:04.830
So we will be covering that specific functions in the next five.
