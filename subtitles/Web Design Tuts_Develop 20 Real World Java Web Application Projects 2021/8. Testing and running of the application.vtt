WEBVTT
1
00:00:00.830 --> 00:00:07.670
Now, so that we have discussed about the Switch case, now we are going to implement this, which is

2
00:00:08.000 --> 00:00:12.620
let's see what actually happens on implementation of a Switch case.

3
00:00:13.010 --> 00:00:20.540
So I suppose this is a switch given and inside this we are passing on human like action.

4
00:00:20.870 --> 00:00:29.720
So suppose if action is performing like we have already initialized the action here and if the action

5
00:00:29.720 --> 00:00:32.530
is initializes as she does next.

6
00:00:32.540 --> 00:00:40.790
And so like, suppose we input any option from our keyboard which is going to be stored inside this

7
00:00:40.790 --> 00:00:41.420
action.

8
00:00:41.750 --> 00:00:44.390
It is a variable, of course, integer value.

9
00:00:44.990 --> 00:00:53.600
So if the switch is zero one two three four five six, how many options we are listing it with be depending

10
00:00:53.600 --> 00:00:54.590
on that only.

11
00:00:55.010 --> 00:01:00.380
So suppose a switch action contains initial stage zero.

12
00:01:00.980 --> 00:01:06.140
So suppose the head of mission goes with the program in the beginning.

13
00:01:06.620 --> 00:01:09.650
So what gives zero is going to do so.

14
00:01:09.670 --> 00:01:15.370
Case Zero is going to quit setting the portal through.

15
00:01:15.410 --> 00:01:20.650
Initially, we said OK would go forward and now we are changing it through here.

16
00:01:21.290 --> 00:01:24.570
The Boolean grid is set to false by default.

17
00:01:24.590 --> 00:01:25.860
That is no quick.

18
00:01:26.390 --> 00:01:33.770
But if we're pressing zoodles from the keyboard, then it is going to set it to true and then bring

19
00:01:33.770 --> 00:01:37.340
the Switch statement and come out of the loop.

20
00:01:37.340 --> 00:01:45.800
And I'm going to put it into the list like so close that I suppose if this action is containing one

21
00:01:46.970 --> 00:01:48.440
integer could be anything.

22
00:01:49.340 --> 00:01:54.770
So if suppose that is switch one, so it is going to execute this case on.

23
00:01:55.220 --> 00:01:57.380
And what this gives one is going to do.

24
00:01:57.830 --> 00:02:01.740
This is going to play the current song now.

25
00:02:01.790 --> 00:02:03.500
So it is the next song.

26
00:02:03.830 --> 00:02:10.970
So this one is going to play the next song and how we are going to play the next song, like, if not

27
00:02:10.970 --> 00:02:17.170
for one, if it started and has next and instead with Mr. Director Darkness.

28
00:02:17.630 --> 00:02:21.890
So we are switching to the next song in the list.

29
00:02:22.310 --> 00:02:27.920
So the next song is going to be playing with the use of the affordable key.

30
00:02:28.250 --> 00:02:35.540
Like, we have declared this for one here as a Boolean data type, and initially it is set to approve.

31
00:02:36.230 --> 00:02:41.120
So if one song is finished automatically, the second song will be played.

32
00:02:41.390 --> 00:02:47.990
And if we are, we forcefully want to play the next song before the finishing of the first song.

33
00:02:48.290 --> 00:02:51.030
Then we are going to call this for through.

34
00:02:51.290 --> 00:02:57.590
And if the list that is said, then now playing the next song, it will.

35
00:02:58.310 --> 00:02:59.360
I'll put this.

36
00:02:59.570 --> 00:03:09.020
Now playing the second track like this, where we have pressed the key to it, played the next song

37
00:03:09.020 --> 00:03:09.860
from the list.

38
00:03:10.580 --> 00:03:18.710
Similarly, we are asking one option also, and if that's the let us suppose, like the list of five

39
00:03:18.710 --> 00:03:20.570
songs and then no next song.

40
00:03:20.840 --> 00:03:26.270
So it will output like good knows that song of 11 till the end of the list.

41
00:03:26.660 --> 00:03:32.660
Like, suppose it is like this song and there are no songs after this.

42
00:03:32.990 --> 00:03:39.650
So what this is going to output no song on every level is to the end of the list and the forward will

43
00:03:39.650 --> 00:03:46.310
be set still falls and the list will not move forward further and the law will break.

44
00:03:47.090 --> 00:03:53.600
And suppose if we have press to from the keyboard, then this is going to play the previous song in

45
00:03:53.610 --> 00:03:57.470
that similar way we were navigating through the next song.

46
00:03:57.710 --> 00:03:59.720
Using that has next one.

47
00:04:00.170 --> 00:04:09.350
Similarly, we are going to use has previous game on Twitter to the list and play the previous song

48
00:04:09.620 --> 00:04:13.810
by setting the Huertas was like, No, not move for one.

49
00:04:13.820 --> 00:04:15.200
Don't play the next song.

50
00:04:15.500 --> 00:04:18.350
Play the previous song by default.

51
00:04:18.680 --> 00:04:27.330
The next song is the next song is played after finishing off the song, but the rhythm of this key to

52
00:04:27.770 --> 00:04:32.030
the next song will not replay what the previous song is going to be playing.

53
00:04:32.540 --> 00:04:40.280
And the s condition says that if there are no songs previous to that song like Suppose We, we were

54
00:04:40.280 --> 00:04:47.760
all raised the beginning of the list and there are no songs previous to it, then it is going to be

55
00:04:48.500 --> 00:04:50.710
that we have reached the end of the list.

56
00:04:50.720 --> 00:04:52.970
There are no song phases to this list.

57
00:04:53.510 --> 00:04:59.030
Similarly, for Q4, we have a list of all songs and all available options.

58
00:04:59.030 --> 00:04:59.630
One five.

59
00:05:00.140 --> 00:05:07.790
So I already told you that on pressing forward, it is going to print the list of all the songs in the

60
00:05:07.790 --> 00:05:08.370
playlist.

61
00:05:09.060 --> 00:05:16.850
We will create this print list function after the completion of this part and for pressing the key five,

62
00:05:16.850 --> 00:05:23.380
all the available options will reprint in our likeness opposing President Nikki.

63
00:05:23.390 --> 00:05:29.600
And again, we want to but navigate back to the menu option and do some other operations.

64
00:05:29.960 --> 00:05:37.490
So we will press five and it will bring them and then it will be now last, but not the least, for

65
00:05:37.490 --> 00:05:39.020
deleting the current song.

66
00:05:41.160 --> 00:05:44.640
So even me, I wish to delete the current sampling.

67
00:05:45.080 --> 00:05:53.540
We are using this if statement for checking that if playlist size is greater than zero, let's suppose

68
00:05:53.540 --> 00:06:00.100
that I'm more than zero songs in the list, then Mr. Trader is going to use this name.

69
00:06:00.380 --> 00:06:05.870
Here you are from Java Utili ready to remove the song from the links.

70
00:06:05.870 --> 00:06:12.170
In this, we have stored all the songs in the playlist in the form of link list and to remove anything

71
00:06:12.170 --> 00:06:13.070
from the list.

72
00:06:13.370 --> 00:06:21.860
We are using this name key one list isolated to remove nitrate that is going to point to the current

73
00:06:21.860 --> 00:06:24.050
song and this will remove this.

74
00:06:24.380 --> 00:06:30.650
And after this, the list will start pointing to the next song to that song.

75
00:06:31.220 --> 00:06:38.480
We have already discussed it test the link will be broken and the first song will start pointing to

76
00:06:38.480 --> 00:06:39.830
the chord song.

77
00:06:41.600 --> 00:06:42.710
So after this?

78
00:06:43.610 --> 00:06:46.190
Yes, there is this Lakers.

79
00:06:46.190 --> 00:06:56.060
Of course, the playlist size is less than zero, then it is not going to delete anything in the program

80
00:06:56.060 --> 00:07:01.010
is going to run as it was running it in this plain opening.

81
00:07:01.010 --> 00:07:04.550
And basically no changes are going to happen.

82
00:07:05.090 --> 00:07:09.140
So we have successfully covered all the switch cases.

83
00:07:09.440 --> 00:07:14.840
Now we are going to create that function for printing the menu.

84
00:07:15.170 --> 00:07:21.140
Yes, we have created a static alloyed function called print.

85
00:07:21.140 --> 00:07:29.150
The menu and specify specified is set to private, and this function is responsible for printing all

86
00:07:29.150 --> 00:07:31.310
the available options in the menu.

87
00:07:31.670 --> 00:07:40.850
Like, you can see that for Z2, we have set the action as quick thing for the one to play the next

88
00:07:40.850 --> 00:07:41.300
song.

89
00:07:41.500 --> 00:07:49.360
And similarly for to play the previous song to be played and song for list all the songs and five bring

90
00:07:49.370 --> 00:07:50.690
all the available options.

91
00:07:50.690 --> 00:07:56.720
I mean, like these are the available options and there are nothing is in option.

92
00:07:57.050 --> 00:08:01.460
So this thing is going to be presented again if we aren't pressing the key.

93
00:08:02.660 --> 00:08:03.170
Five.

94
00:08:03.560 --> 00:08:11.660
And lastly, if you will press the key six from our keyboard, then the current song which is playing

95
00:08:11.930 --> 00:08:14.280
will be deleted and automatically.

96
00:08:14.310 --> 00:08:16.340
The next song will start playing.

97
00:08:16.760 --> 00:08:27.890
And if you like this list all the songs again, then the resulting list will remove the song, which

98
00:08:27.890 --> 00:08:29.020
is deleted and.

99
00:08:29.990 --> 00:08:36.770
The resulting list will be reduced by size one like suppose, initially there were five songs, now

100
00:08:36.830 --> 00:08:38.630
this will contain only four songs.

101
00:08:38.930 --> 00:08:40.760
As we deleted one of the songs.

102
00:08:41.090 --> 00:08:41.570
Yes.

103
00:08:42.200 --> 00:08:48.320
Now looking towards the next function, what this brings the list is going to bring.

104
00:08:48.980 --> 00:08:55.850
So we have created this function public static void, frankness and as an argument, the linked list

105
00:08:55.850 --> 00:09:03.440
of the playlist song is parsed inside this function, and I believe that is going to open it.

106
00:09:04.740 --> 00:09:10.470
I trade through the playlist, which we have created in the album class.

107
00:09:11.010 --> 00:09:18.170
So this is the way to ride like we are giving heading our enough food like a headliner.

108
00:09:18.990 --> 00:09:26.130
And between now and then, the food to the list of the songs in the playlist is going to be called.

109
00:09:26.430 --> 00:09:35.010
Using this Bilo like supposed interpreter not has next has a song, then the plaintiff in the next.

110
00:09:35.670 --> 00:09:42.720
And we are using this brand delicious option to bring to the list of all the songs like this.

111
00:09:43.350 --> 00:09:52.240
This part is responsible for printing the list, and this is printed with the the mercy of dysfunction

112
00:09:52.980 --> 00:09:53.480
endless.

113
00:09:54.060 --> 00:10:01.740
So we are done with the programming section as far as I can see that we have covered all the functionalities.

114
00:10:02.130 --> 00:10:10.200
Now let us try to run this and see that the actually what is happening inside the code.

115
00:10:12.670 --> 00:10:15.190
So the program run successfully.

116
00:10:15.340 --> 00:10:16.630
Congratulations.

117
00:10:16.960 --> 00:10:20.590
Now check if the functions are working correctly or not.

118
00:10:21.070 --> 00:10:25.330
So firstly, I'm going to press one to play that next song.

119
00:10:25.640 --> 00:10:30.940
Ah, let us bring the list of fun songs first solo on pressing four.

120
00:10:31.300 --> 00:10:37.180
We have all the list of the songs in our playlist, not the album, but in the playlist.

121
00:10:37.450 --> 00:10:45.190
We have two things an album and a playlist, so we are listing has playlists like three hour and more.

122
00:10:45.200 --> 00:10:49.360
During this creation is to store all our favorite songs.

123
00:10:49.720 --> 00:10:55.950
So we are dealing with that playlist, but only so we have a list of all the songs now.

124
00:10:56.230 --> 00:10:58.060
So played the next song.

125
00:10:58.180 --> 00:11:05.170
Pressing one and the next song is played initially by default.

126
00:11:05.200 --> 00:11:09.970
The first song was playing and the duration was 4.5 minutes.

127
00:11:10.390 --> 00:11:15.340
Now, if we press one, then the next song from the playlist will be played.

128
00:11:15.850 --> 00:11:21.400
Now, suppose we want to navigate to the previous song so we will press do.

129
00:11:21.640 --> 00:11:28.540
And again, the first song starts playing now to replay the current song, but I think three.

130
00:11:29.500 --> 00:11:34.420
So this is responsible for for playing the songs in a law like Simple.

131
00:11:34.430 --> 00:11:42.100
This song is our most favorite song from the playlist, so we will love to play that song again, so

132
00:11:42.100 --> 00:11:50.800
we will press three played the song, so we have covered already printing the list of full songs now.

133
00:11:50.980 --> 00:11:58.490
So if we want to navigate to the available options section again, so we will press five and hit Bender

134
00:11:58.840 --> 00:12:04.390
again, we are back in our navigation menu with all the available options.

135
00:12:04.690 --> 00:12:14.350
Now suppose if you want to wish to delete the current song, so pressing six from the keyboard and the

136
00:12:14.350 --> 00:12:17.260
next song is playing played automatically.

137
00:12:17.260 --> 00:12:25.510
Like the last song which was playing was this current song, which is deleted on pressing the 60 and

138
00:12:25.540 --> 00:12:28.180
next song is played played automatically.

139
00:12:28.560 --> 00:12:30.040
No, no.

140
00:12:30.070 --> 00:12:35.410
Let us try to bring the list off all songs again and see that if it is deleted or not.

141
00:12:35.420 --> 00:12:42.910
Yes, initially we had four songs and now we are left with only three songs in the list, so all the

142
00:12:42.910 --> 00:12:50.080
functions in this library is working fine and everything is correct as far as I can see them.

143
00:12:50.830 --> 00:12:58.900
So I hope that you all have went through this tutorial very correctly and understand all the concepts

144
00:12:58.900 --> 00:13:05.920
involved in this and would love to make your own music library like you can name with them.

145
00:13:07.090 --> 00:13:09.210
I am calling it as a music library.

146
00:13:09.220 --> 00:13:16.000
You can also call it a music playlist library on anything you wish to, so I hope you all will create

147
00:13:16.300 --> 00:13:24.190
a playlist library of your own and learn the concepts involved behind it, like the coding bar you can

148
00:13:24.190 --> 00:13:24.430
see.

149
00:13:24.440 --> 00:13:36.310
Then everything is explained in a detailed manner, and every concept is related to Java, not other

150
00:13:36.310 --> 00:13:38.260
concepts to complex long.

151
00:13:38.260 --> 00:13:49.330
The concepts are not involved in this, so I wish you a happy learning and let's try creating this project

152
00:13:49.330 --> 00:13:56.290
on your own and then this project and will sail with the next project in the next five.

153
00:13:56.590 --> 00:13:57.210
Beldon.

154
00:13:57.490 --> 00:13:59.260
Goodbye and thank you.
