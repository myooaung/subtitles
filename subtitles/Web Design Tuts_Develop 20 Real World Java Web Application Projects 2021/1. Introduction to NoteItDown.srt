1
00:00:00,900 --> 00:00:01,830
Hello, everyone.

2
00:00:02,190 --> 00:00:09,750
So today we are going to learn a new project in Java in the seeds of learning Java projects.

3
00:00:10,620 --> 00:00:19,160
So basically, this application is a bank loan made in Java and we have named it does not end.

4
00:00:20,040 --> 00:00:27,420
So in this application, we are going to learn our very own notepad application in our system.

5
00:00:27,720 --> 00:00:29,880
And that tool in Java.

6
00:00:30,270 --> 00:00:38,250
So using basic Java concepts and libraries, we are going to create a very, very beautiful notepad

7
00:00:38,250 --> 00:00:42,720
application with multiple features inside it.

8
00:00:43,500 --> 00:00:50,520
So this notepad feature contains a file on it and a head working in the navigation panel.

9
00:00:51,270 --> 00:01:00,120
This is the about page of the notepad application that Bob Page gives us a quick intro of this application.

10
00:01:00,270 --> 00:01:10,260
We are going to me so this I have said it as conventional logic 2.0 so we can see that it is an appropriate

11
00:01:10,260 --> 00:01:12,850
version of the conventional notepad.

12
00:01:12,870 --> 00:01:19,110
We are going to use like we are using from many years in our system.

13
00:01:19,470 --> 00:01:26,900
So yes, we are going to make a note five also on my own in Java with a very simple, hard coding.

14
00:01:28,200 --> 00:01:33,330
So let us take a look at this application and what expenses.

15
00:01:34,920 --> 00:01:40,770
So this is no page off their mobile application or we can see there's no data.

16
00:01:41,340 --> 00:01:45,420
Also, this is the home page of the noted down application.

17
00:01:45,780 --> 00:01:51,580
The homepage consists of the title bar that no and no.

18
00:01:51,580 --> 00:01:56,670
This section that's now found contains various options, it says.

19
00:01:57,390 --> 00:02:01,950
So let's take a look at the specifications of this project.

20
00:02:03,480 --> 00:02:06,570
So we are going to make a notepad.

21
00:02:07,260 --> 00:02:15,960
And this is the mean specification of this project in this note that your user can input text, right?

22
00:02:15,970 --> 00:02:25,350
I think it fits and you stay on the screen and you will get output as a at the time output on the screen

23
00:02:25,380 --> 00:02:26,160
of the user.

24
00:02:27,420 --> 00:02:32,880
The note Batalon contains features such as file editors and so on.

25
00:02:34,390 --> 00:02:40,360
Even after writing the text document, the project we are making, the document we are going to read,

26
00:02:40,890 --> 00:02:49,660
you can see it printed copy the files of the text pasted anywhere in the text is very rare to be on.

27
00:02:50,050 --> 00:02:53,050
And there are so many other interesting features.

28
00:02:53,290 --> 00:03:01,240
This app consists off so we can also save our text, which are which we are writing.

29
00:03:01,540 --> 00:03:02,620
We can open.

30
00:03:02,800 --> 00:03:10,540
You can even open the invasive document that there's no human inside our system in this notepad.

31
00:03:11,380 --> 00:03:20,380
So I hope you got an idea about this project light apart from editing, saving copy pasting it.

32
00:03:20,780 --> 00:03:27,160
You can even open files from our system unedited also and save it after everything.

33
00:03:27,670 --> 00:03:36,340
So that is no foundation that you have the right fix had only and then say you can also use an inbuilt

34
00:03:36,340 --> 00:03:38,620
document and that could be edited.

35
00:03:38,970 --> 00:03:48,340
Also, so let us take a look at what concepts we are going to learn after completing this project.

36
00:03:49,540 --> 00:03:49,990
Yes.

37
00:03:50,290 --> 00:03:53,200
So the first question may arise in your right mind.

38
00:03:53,440 --> 00:03:55,980
So when to make any magic man?

39
00:03:56,050 --> 00:03:58,690
What will be the consequences of this project?

40
00:03:59,270 --> 00:04:04,390
We're the let and element concept we are going to learn after making this project.

41
00:04:04,780 --> 00:04:11,410
So one note on this question is very material concern.

42
00:04:11,650 --> 00:04:12,630
One can arise.

43
00:04:12,700 --> 00:04:14,970
We are making unpleasant sense.

44
00:04:15,370 --> 00:04:21,430
Let me give a quick explanation about the concepts behind this project.

45
00:04:22,480 --> 00:04:32,410
So my project is made in abstract, and I think of our abstract in the book is the part of the job,

46
00:04:32,410 --> 00:04:34,000
our foundational classes.

47
00:04:34,480 --> 00:04:38,170
So AWP, it does have to be a big ask.

48
00:04:38,540 --> 00:04:45,250
So yes, even it is a standard APR for providing a graphical user interface.

49
00:04:45,550 --> 00:04:46,990
So I didn't need them.

50
00:04:47,500 --> 00:04:52,120
So yes, we are going to make this note that I would have been doing.

51
00:04:52,120 --> 00:04:55,180
Does this make you want to getting off me?

52
00:04:55,250 --> 00:04:58,570
I'll take my application in a separate lingo.

53
00:04:58,870 --> 00:05:08,530
So with the help of AWP, we are going to build this debate at the right of the application and it gives

54
00:05:08,530 --> 00:05:12,160
the right a good experience to the users of the application.

55
00:05:13,240 --> 00:05:20,410
But a good experience to the user using this interface as it will open in a separate window.

56
00:05:20,770 --> 00:05:26,110
They can perform their task and there is no smooth confirmation.

57
00:05:26,810 --> 00:05:33,880
Yes, knock on friction between the program and then rendering masses of the application as we see.

58
00:05:34,760 --> 00:05:42,700
So it was designed as a common circumstance for UI design that would work on a variety of.

59
00:05:43,810 --> 00:05:48,910
But the program is written in Java.

60
00:05:49,060 --> 00:05:55,530
So this is, of course, what you do with Marinol complex languages and libraries involved.

61
00:05:55,600 --> 00:06:02,870
As I said earlier, since Java is being used to the good, the problem.

62
00:06:03,850 --> 00:06:09,610
So you will be going to learn a Java notepad known application to make will.

63
00:06:09,640 --> 00:06:10,270
No, no.

64
00:06:10,350 --> 00:06:10,750
Yes.

65
00:06:11,410 --> 00:06:13,090
And Java.

66
00:06:13,150 --> 00:06:16,000
Then there will be classes on objects and.

67
00:06:17,420 --> 00:06:23,870
Of course, you will be going to learn the applications of massive objects and methods in Java with

68
00:06:23,870 --> 00:06:26,410
examples in making this project.

69
00:06:27,700 --> 00:06:37,660
So yes, also this project is going to use radius components of Java swing like decoding defects, depression

70
00:06:38,030 --> 00:06:47,660
expected to make deals with countries like the US companies, which helps us to apply it in our program.

71
00:06:48,020 --> 00:06:57,380
Without that, I think so much of what we just have to call the companies and look what is our position

72
00:06:58,100 --> 00:07:02,030
on the interface of the, you know, where the app is moving?

73
00:07:03,380 --> 00:07:10,760
So you may be wondering why this Java Sea, then we are already using AWP in Java.

74
00:07:11,360 --> 00:07:20,920
So the answer to this question is so that you will be right behind that extensible abstract thinking.

75
00:07:21,320 --> 00:07:27,410
So basically, swimming is an extension WP API we are using in Java.

76
00:07:27,920 --> 00:07:30,940
So, of course, is it is an extension.

77
00:07:30,950 --> 00:07:39,530
It contains more features than more classes, which helps us to make our projects more attractive in

78
00:07:39,530 --> 00:07:40,250
many ways.

79
00:07:41,900 --> 00:07:49,490
So in the use of abstracting that good and strong together, we are going to build a good library for

80
00:07:49,490 --> 00:07:54,740
this application and use all the components in this application.

81
00:07:55,190 --> 00:08:03,890
So let me give you a quick introduction about Java AWP hierarchy is that we are going to use in this

82
00:08:03,890 --> 00:08:08,660
project like let Ivan introduce the background.

83
00:08:08,660 --> 00:08:14,050
SASR component can be more nimble than NC.

84
00:08:14,570 --> 00:08:16,580
So let's get into it.

85
00:08:17,690 --> 00:08:22,790
So yes, this is no big hierarchy.

86
00:08:23,450 --> 00:08:32,290
The hierarchy of the classes are listed here, like in Snake on Java, not even repeat back into our

87
00:08:32,420 --> 00:08:33,000
program.

88
00:08:33,020 --> 00:08:34,670
What we are actually getting.

89
00:08:35,150 --> 00:08:41,450
So we are getting a component which consists container and inside the container.

90
00:08:41,480 --> 00:08:45,250
We have a window and a panel inside that window.

91
00:08:45,290 --> 00:08:47,750
We have offering so.

92
00:08:48,800 --> 00:08:49,280
Yes.

93
00:08:49,940 --> 00:08:55,430
What a container is contained, it is a company in the way that would be contained, that is a subclass

94
00:08:55,430 --> 00:08:56,240
of the company.

95
00:08:56,810 --> 00:08:57,230
Yes.

96
00:08:57,620 --> 00:09:02,630
As we have already seen, container is this subclass of the company Glass?

97
00:09:02,990 --> 00:09:03,980
What is it then?

98
00:09:04,430 --> 00:09:07,610
A panel is a complicated subclass of container.

99
00:09:09,260 --> 00:09:11,720
So aligning the components.

100
00:09:11,930 --> 00:09:12,350
Hey.

101
00:09:14,230 --> 00:09:23,500
So they will be a disease that we have our campaign says this far is not container, which contains

102
00:09:23,500 --> 00:09:28,750
Britain's best seat, stable and so many other things.

103
00:09:29,560 --> 00:09:32,500
The panel in the continent's top does all that data.

104
00:09:32,950 --> 00:09:35,140
So yes, this is the final.

105
00:09:35,530 --> 00:09:39,620
But inside part is that Ben Bernanke does not.

106
00:09:39,620 --> 00:09:43,650
10 days are titans are on of not even on border.

107
00:09:44,380 --> 00:09:47,380
So, yes, no, but excluding the border.

108
00:09:47,380 --> 00:09:50,170
And that is our panel.

109
00:09:51,010 --> 00:09:53,850
What we know is that no.

110
00:09:54,130 --> 00:10:01,600
We are going to open after running the project and we'll see in the frame of this project like me.

111
00:10:01,600 --> 00:10:08,790
Ever since our does, we have the same target number and the other for the main body of the numbers.

112
00:10:09,100 --> 00:10:13,930
So yes, we have given all the categories knowledge.

113
00:10:15,660 --> 00:10:16,060
Yes.

114
00:10:16,480 --> 00:10:18,440
Inside knowledge of this concern.

115
00:10:18,790 --> 00:10:26,560
So now we are going to run the code of the program and learn how do write the code?

116
00:10:27,790 --> 00:10:34,120
We are going to learn each part of the code that what this party is doing and what that part is be and

117
00:10:34,450 --> 00:10:35,850
my step by step.

118
00:10:36,310 --> 00:10:40,340
I'm going to create our very own fact in Java.

119
00:10:40,720 --> 00:10:49,780
So without any further delays, let's start by creating a new job in our I.T..
