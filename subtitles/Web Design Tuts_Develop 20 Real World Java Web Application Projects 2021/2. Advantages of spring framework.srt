1
00:00:01,680 --> 00:00:06,510
In previous audio, I told you, what is this framework?

2
00:00:06,780 --> 00:00:16,680
What is our project outline and what we are going to do in this COVID 19 cases and I application using

3
00:00:16,680 --> 00:00:17,070
Java?

4
00:00:17,550 --> 00:00:24,090
So we are going with spring application and we already have seen how we already created the spring initial

5
00:00:24,090 --> 00:00:25,740
laser part on each and everything.

6
00:00:26,070 --> 00:00:33,420
So I downloaded the file from that part with spring initialize it, and I'm going to open it.

7
00:00:33,900 --> 00:00:39,300
So for the opening in Indonesia, India, basically this is over the front page of it.

8
00:00:39,960 --> 00:00:44,980
What I'm going to do, I'm going to be open here once this is click open.

9
00:00:45,000 --> 00:00:47,400
You can see all the things.

10
00:00:47,730 --> 00:00:54,270
So this is my application, which is I downloaded the zip file I extracted in the design and this is

11
00:00:54,270 --> 00:00:56,940
my application and clicking, Okay, here.

12
00:00:58,080 --> 00:01:03,180
So you can say these are all in-browser and loading wrong.

13
00:01:03,690 --> 00:01:10,920
So trust this project first as I'm opening the third party project, as you can see, I have to mention

14
00:01:10,930 --> 00:01:15,360
this idea individually in Dalian is very intelligent.

15
00:01:15,360 --> 00:01:21,290
It will load all the components, adding their dependencies and using external.

16
00:01:21,360 --> 00:01:22,710
It will take care of it.

17
00:01:26,200 --> 00:01:32,750
So my idea is opening currently, so it will take time to meet the quarantine.

18
00:01:34,560 --> 00:01:36,510
So not a strike force.

19
00:01:37,790 --> 00:01:45,080
So our project is mammoth project, so it will take time to load each and everything once it is loaded.

20
00:01:45,320 --> 00:01:47,270
I will tell you what we are going to do.

21
00:01:47,390 --> 00:01:48,050
Are basically.

22
00:01:52,350 --> 00:01:54,000
So now you can.

23
00:01:55,200 --> 00:01:56,160
It closed its lease.

24
00:01:57,180 --> 00:01:58,830
Now you can see everything here.

25
00:02:00,190 --> 00:02:04,300
So this is our project, and I'm going to package just more robust.

26
00:02:06,140 --> 00:02:09,560
OK, so it is taking time to load everything here.

27
00:02:14,660 --> 00:02:17,300
It will take time to load each and everything.

28
00:02:19,200 --> 00:02:23,010
Once this is done, you can get your everything.

29
00:02:24,800 --> 00:02:25,520
You're only.

30
00:02:27,010 --> 00:02:32,680
So let me speak to my dad, but also.

31
00:02:34,530 --> 00:02:37,110
It contains OK and everything.

32
00:02:38,560 --> 00:02:39,230
They only.

33
00:02:43,720 --> 00:02:50,070
So it is taking time to load eugenics at everything, because as you can see, there is loading bottles

34
00:02:50,070 --> 00:02:50,440
so there.

35
00:02:52,140 --> 00:02:55,830
While this is gloating, I will explain the repeat part.

36
00:02:58,010 --> 00:03:03,590
And we can say the thing I want to explain is it is spring thing.

37
00:03:03,740 --> 00:03:10,730
So as I told you, spring is a lightweight framework for your development and it's still frame work

38
00:03:10,730 --> 00:03:12,740
of frameworks for different things.

39
00:03:13,310 --> 00:03:20,360
So inversion of control I use what do you think was one of confusion before any projects you have seen?

40
00:03:20,360 --> 00:03:20,990
Actually.

41
00:03:21,380 --> 00:03:27,530
These are using some what we can see system enable dependencies.

42
00:03:27,560 --> 00:03:32,090
We are adding libraries manually, but thing what we can do.

43
00:03:32,570 --> 00:03:38,780
We can inject our libraries informed or experiment, which is basically properties similar again to.

44
00:03:39,880 --> 00:03:42,910
So this is all about how we're going to do this.

45
00:03:44,370 --> 00:03:49,350
So let us check what is the design patterns in removing their dependencies.

46
00:03:50,610 --> 00:03:52,050
Consider this example.

47
00:03:53,410 --> 00:04:00,880
It's easier to maintain and based on some IOC, this is class employs address, I is another thing and

48
00:04:00,880 --> 00:04:03,550
I'm assigning employ at least part.

49
00:04:04,770 --> 00:04:11,820
So it is basically direct dependency of between we can say employment at this, so these very tight

50
00:04:11,820 --> 00:04:16,920
coupling I'm displaying directly, so what happens if I'm having Erin address?

51
00:04:17,280 --> 00:04:18,680
Then there is the Iranian implique.

52
00:04:19,230 --> 00:04:22,680
If there is an employee class, then at risk plus also.

53
00:04:23,580 --> 00:04:27,030
But I can maintain both applications separate.

54
00:04:27,210 --> 00:04:32,510
I can run employee separately, I can enter separately if there are no runtime errors.

55
00:04:33,390 --> 00:04:36,180
So this is all about how we're going to do this.

56
00:04:36,720 --> 00:04:42,520
So let us check what is the basic thing in this is all.

57
00:04:43,810 --> 00:04:50,530
These are basically tight coupling scenarios, but using inversion control, what we can do, we can

58
00:04:50,770 --> 00:04:52,660
depend use dependency injection.

59
00:04:53,050 --> 00:04:54,910
What is the dependency injection in this?

60
00:04:55,330 --> 00:04:59,890
We can add dependencies with some external advice in pondered example.

61
00:05:00,280 --> 00:05:04,570
So it will download that dependency from the net.

62
00:05:04,960 --> 00:05:06,530
Or we can see that's the real thing.

63
00:05:06,910 --> 00:05:07,510
You can do.

64
00:05:08,580 --> 00:05:14,450
So this is all about how we can do this, but what is the importance of this?

65
00:05:14,460 --> 00:05:19,130
What is the advantages of this is it makes God loosely complete.

66
00:05:19,740 --> 00:05:26,220
And let me tell you what is a loosely enforced, as you can see, class employees address employees

67
00:05:26,790 --> 00:05:29,580
employee at this address, so I'm making another variable for.

68
00:05:30,630 --> 00:05:32,670
So what we do, we will do it will copy that.

69
00:05:33,000 --> 00:05:33,360
It is.

70
00:05:33,840 --> 00:05:34,390
Copy that.

71
00:05:34,440 --> 00:05:35,730
I mean, it's securing copy.

72
00:05:36,150 --> 00:05:39,390
So I'm hoping that it is using this key word.

73
00:05:39,390 --> 00:05:43,890
So no, there is no direct dependency we can see.

74
00:05:44,990 --> 00:05:51,440
We can use the address bar here and we are putting here, and that employee is also satisfying this

75
00:05:51,440 --> 00:05:51,770
idea.

76
00:05:51,780 --> 00:05:55,100
So if there is an employee, we can run at risk loss or vice versa.

77
00:05:55,100 --> 00:05:59,300
If there is an at class, we can execute, at least in blue glass.

78
00:05:59,810 --> 00:06:01,750
So these are very good practice.

79
00:06:01,760 --> 00:06:06,230
While developing any loose coupling do not maintain a tight coupling.

80
00:06:06,470 --> 00:06:11,900
While you are developing the software, there are two terms are used by coupling and loop loops coupling

81
00:06:11,900 --> 00:06:13,520
by creating the object part.

82
00:06:13,940 --> 00:06:15,830
So or we can object.

83
00:06:16,460 --> 00:06:24,230
There are some momentum we can see for the tight coupling like you have some security, online authentication

84
00:06:24,230 --> 00:06:24,730
or two.

85
00:06:24,740 --> 00:06:29,060
Basically, you need tight coupling there because it's very crucially important for each and every user

86
00:06:29,060 --> 00:06:29,180
name.

87
00:06:29,180 --> 00:06:33,240
There should be unique password or we can say of each and every user name should be unique.

88
00:06:33,260 --> 00:06:35,150
For that purpose, you can use that coupling, but.

89
00:06:36,090 --> 00:06:42,630
In such cases, like collecting the data, representing the data data visualization in Java, we can

90
00:06:42,630 --> 00:06:43,680
use loot couplings.

91
00:06:44,340 --> 00:06:48,360
So this is the basic thing of our loose coupling in springtime work.

92
00:06:48,480 --> 00:06:51,630
I use the container, which is basically inversion of control.

93
00:06:52,320 --> 00:06:55,200
I usually container is responsible for angel dependency.

94
00:06:55,770 --> 00:06:57,420
Just injecting the dependency.

95
00:06:57,450 --> 00:06:59,820
No need to use direct library.

96
00:07:01,470 --> 00:07:06,840
Why we are not using directly level, we need to download it, then we need to specify the eugenics

97
00:07:06,840 --> 00:07:08,130
era instead of this.

98
00:07:08,130 --> 00:07:08,790
What are you going to do?

99
00:07:09,090 --> 00:07:10,110
You can just do.

100
00:07:11,250 --> 00:07:14,910
Oh, some are downloading that part.

101
00:07:16,310 --> 00:07:18,600
Well, downloading will take my ID.

102
00:07:19,030 --> 00:07:24,670
It will take everything dependency, it will download dependency, eugenics or to.

103
00:07:25,610 --> 00:07:31,280
What we do, we provide the only metadata of who the container, that animal file or annotation we can

104
00:07:31,280 --> 00:07:34,430
use annotations did and we can proceed with metadata.

105
00:07:35,060 --> 00:07:39,140
So advantages of dependency injection is it makes Gordon news legal.

106
00:07:39,860 --> 00:07:46,540
So it is easier to maintain and makes it easier to test as our testing purposes is very important while

107
00:07:46,550 --> 00:07:50,690
developing any of the required one thing.

108
00:07:51,680 --> 00:07:54,470
Oh, we don't want to test it again and again.

109
00:07:55,910 --> 00:08:01,610
We need to maintain the loose legal, but if I'm not still employed class, we can say there are two

110
00:08:01,790 --> 00:08:04,910
places we need to maintain employment and consider this scenario.

111
00:08:05,210 --> 00:08:10,940
We want to implement such part, but unfortunately my testing book was all due to time constraints.

112
00:08:10,970 --> 00:08:12,680
I cannot consider employee class.

113
00:08:12,980 --> 00:08:15,730
I don't want to focus on in bluegrass.

114
00:08:15,740 --> 00:08:17,510
I just want to test and riskless.

115
00:08:18,200 --> 00:08:19,370
This is a unique distinction.

116
00:08:19,820 --> 00:08:24,380
So for that purpose, we can use address class only, or we can then address class.

117
00:08:24,380 --> 00:08:25,580
I mean, it is loosely open.

118
00:08:26,030 --> 00:08:30,440
So this is basically of, well, efficiency of dependency injection.

119
00:08:30,770 --> 00:08:37,550
So this only I'm going to explain how we are going to dependency magic, and I'm using CSU data, which

120
00:08:37,550 --> 00:08:43,520
is basically a comma separated for use data or, as you know, the similar things also and in Excel,

121
00:08:43,680 --> 00:08:47,030
also, we can store that data in the CHP format.

122
00:08:47,030 --> 00:08:48,620
Did you basically commercial period for them?

123
00:08:48,730 --> 00:08:54,560
So I'm going to use dependency to produce it as a tabular manner or we can see here the manner, room

124
00:08:54,560 --> 00:08:58,790
and so forth that I'm using when to use, when free dependency.

125
00:08:58,790 --> 00:09:02,750
We can say about your dependency for that purpose and for a little use, I'm going to explain that.

126
00:09:03,650 --> 00:09:05,990
So this is all about how we're going to do this.

127
00:09:06,290 --> 00:09:10,790
So or take time to download each and everything.

128
00:09:10,790 --> 00:09:18,730
If it's your first time like me, only I just you can see this in my output and you can say this is

129
00:09:18,740 --> 00:09:19,190
loading.

130
00:09:19,820 --> 00:09:22,130
So it will take time to load eugenics, cetera.

131
00:09:22,130 --> 00:09:29,400
So give the time to it to load everything you're seeing the data, it will take you some of them, as

132
00:09:29,400 --> 00:09:31,640
this is my main project, it's not as simple and project.

133
00:09:31,640 --> 00:09:34,220
It will take time for load each and everything.

134
00:09:34,490 --> 00:09:40,490
If this is your first moment project, as I deleted everything related to my in my system, it takes

135
00:09:40,490 --> 00:09:47,990
time to download everything so you can take the downloading and you can see shared in libraries.

136
00:09:47,990 --> 00:09:49,550
You can take each and everything your.

137
00:09:50,410 --> 00:09:52,870
So give it the time to this.

138
00:09:53,290 --> 00:10:00,520
Meanwhile, if I win this thing, I will shake this also which flowing lagoons is downloading, which

139
00:10:00,520 --> 00:10:02,770
is basically this is Android.

140
00:10:03,010 --> 00:10:08,390
If I use, then some marine libraries on seeds are downloading because these files are using that,

141
00:10:08,410 --> 00:10:09,580
so it will take time.

142
00:10:11,420 --> 00:10:17,150
So meanwhile, this project, let us see the way we are going with some.

143
00:10:18,380 --> 00:10:21,470
Spring application like we are not deploying using solid application.

144
00:10:21,680 --> 00:10:25,910
Yes, we can do it, so what is the disadvantage of Soviet you need?

145
00:10:26,970 --> 00:10:32,910
Instead of using everything you need a once dedicated server, you need to deploy that second thing.

146
00:10:33,100 --> 00:10:39,090
Spring is a framework so you can use hibernate, and all the dependencies directly inside is dependency

147
00:10:39,540 --> 00:10:42,960
already contain dependencies, things in the spring framework.

148
00:10:44,550 --> 00:10:47,120
Third, and most disadvantage of kolaches.

149
00:10:47,850 --> 00:10:52,650
You have to run it again and again if just because you have to reload it, at least.

150
00:10:54,450 --> 00:10:59,390
And one more thing is there is no dependency injection on conception.

151
00:10:59,850 --> 00:11:05,820
Oh, so you can use solids concepts and see what we can see the spring framework.

152
00:11:06,480 --> 00:11:12,030
I'm feeling so let concepts like creating a steam mill file deploying in that statement, but you can

153
00:11:12,030 --> 00:11:12,960
use the solid part.

154
00:11:13,440 --> 00:11:18,080
But what the main thing or the people back thing we need to require?

155
00:11:18,970 --> 00:11:25,450
When spring framework and thermal testing be only job lighting, you can use some celebrities and you're

156
00:11:25,450 --> 00:11:27,780
going to work with that in the solid.

157
00:11:28,030 --> 00:11:34,870
You have to invoke that solid response to the request glass and do very rudimentary technique against

158
00:11:34,870 --> 00:11:40,170
it, and it is a very old technique to fetch their data with the data from the database.

159
00:11:40,180 --> 00:11:43,510
Or we can say silver instead of this, we can use this.

160
00:11:43,780 --> 00:11:45,310
This is the most advanced out of.

161
00:11:46,680 --> 00:11:52,360
Plus, as I told you, it's you just struts hibernate Egypt e.g. Egypt.

162
00:11:53,650 --> 00:11:57,040
These are the basic frameworks for developing any web application.

163
00:11:57,670 --> 00:11:59,710
So springtime look is very helpful.

164
00:12:00,020 --> 00:12:04,110
Let's bring framework provides the security, spring boot eugenics.

165
00:12:04,660 --> 00:12:07,300
So these are the multiple types of spring things inside this.

166
00:12:07,600 --> 00:12:17,350
As I told you, we are already developing any or we are initializing that we already installed some

167
00:12:17,350 --> 00:12:25,570
direct dependencies the late spring day, then spring oh timidly for accessing the fines.

168
00:12:25,600 --> 00:12:31,030
And also we added more spring application dependency also there.

169
00:12:31,270 --> 00:12:33,820
So it will be very helpful for doing this.

170
00:12:35,050 --> 00:12:37,560
Advantages of what we can bring.

171
00:12:38,640 --> 00:12:39,810
Pre-defined templates.

172
00:12:40,770 --> 00:12:47,040
Spitting print provides the template for really busy, high end technologies, so no need to required

173
00:12:47,430 --> 00:12:49,320
or to write from scratch.

174
00:12:49,500 --> 00:12:55,380
If you are in it working really beautifully, it will directly you do some gold related to that.

175
00:12:55,890 --> 00:13:00,060
And these are some basic types, basic steps of these technologies.

176
00:13:00,540 --> 00:13:03,640
So let us make an example of this.

177
00:13:04,350 --> 00:13:10,260
You don't need to write a code for exhibition handling, creating connection, creating statements,

178
00:13:10,500 --> 00:13:12,540
committing transaction, closing condition.

179
00:13:12,750 --> 00:13:19,110
So Jollibee's is already involved that all we can do is bring framework already contains that part to

180
00:13:19,680 --> 00:13:21,600
require directly queries.

181
00:13:21,840 --> 00:13:24,300
So you need to write a code to exacting queries only.

182
00:13:24,300 --> 00:13:26,080
So its sales a lot of duty.

183
00:13:28,030 --> 00:13:29,260
Second thing, loose coupling.

184
00:13:30,150 --> 00:13:34,500
As I told you, what is the logic of coupling in this dependency injection, the spring applications

185
00:13:34,500 --> 00:13:36,960
are loosely coupled with dependency injected.

186
00:13:37,200 --> 00:13:38,690
We are using dependency injection.

187
00:13:38,700 --> 00:13:45,510
We are going to specify our libraries of what we consider, pondered and will probably examine and will

188
00:13:45,510 --> 00:13:46,500
use that part it.

189
00:13:46,890 --> 00:13:48,510
Again, it is easy to test.

190
00:13:49,560 --> 00:13:55,050
So I will tell you where it is easy to test their dependency injection makes it easier to test application

191
00:13:55,050 --> 00:14:01,950
as troops or application runs request instead of an application, but our spring training doesn't require

192
00:14:01,950 --> 00:14:02,460
a server.

193
00:14:02,700 --> 00:14:08,430
We can invoke our check, our application in our what are we going to see command prompt if it's working

194
00:14:08,430 --> 00:14:11,730
or not, or if I'm going to deploy them.

195
00:14:11,730 --> 00:14:14,850
So I need to be part of your server, but I'm by GS already.

196
00:14:14,850 --> 00:14:16,570
So we're given, you know what?

197
00:14:16,590 --> 00:14:18,180
We can set spring framework.

198
00:14:18,180 --> 00:14:20,700
We find three defense that we need to just call it.

199
00:14:21,090 --> 00:14:24,120
So it is very helpful to deploy this on the server.

200
00:14:24,840 --> 00:14:25,320
So.

201
00:14:27,120 --> 00:14:29,850
They're just chicken mighty, as you can see, this is very.

202
00:14:31,030 --> 00:14:34,660
As shared indices are downloaded each and everything.

203
00:14:35,080 --> 00:14:39,600
And as you can see, spying framework is also doing this work.

204
00:14:40,030 --> 00:14:41,470
You're going to see spring blogging.

205
00:14:43,300 --> 00:14:46,060
Here is my win, each and everything is installed.

206
00:14:48,550 --> 00:14:50,680
So let me minimize this part.

207
00:14:51,830 --> 00:14:54,110
So before going further.

208
00:14:55,320 --> 00:14:56,040
Oh.

209
00:14:57,370 --> 00:15:05,260
Let me check my I.D. or we can see, Oh my God, I'm going to check here is basically project structure.

210
00:15:05,260 --> 00:15:10,720
I'm going to project structure because I'm in the 16th word.

211
00:15:11,290 --> 00:15:14,500
If my application runs on another business, you are pushing that.

212
00:15:14,980 --> 00:15:17,080
So we'll do project to project SDK.

213
00:15:18,390 --> 00:15:20,220
So let me zoom out this first.

214
00:15:22,430 --> 00:15:22,750
OK.

215
00:15:23,240 --> 00:15:26,770
This project is decays this, so I'm using this only.

216
00:15:26,850 --> 00:15:29,060
Would you like that and.

217
00:15:30,870 --> 00:15:35,350
So that's what you can do if you want to change you and knitting extra.

218
00:15:35,370 --> 00:15:36,960
You mentioned that also.

219
00:15:37,590 --> 00:15:40,560
So this is all about how we are going with this project.

220
00:15:41,460 --> 00:15:47,550
So in Philadelphia, I'm going to explain how we are proceeding with this application specific.

221
00:15:47,570 --> 00:15:53,850
So this is just how we can invoke our import project in our I.D. before going to project.

222
00:15:54,450 --> 00:15:56,750
Let me tell you what I'm going to specify.

223
00:15:56,760 --> 00:15:56,970
I'm.

224
00:15:58,380 --> 00:16:02,190
Let me know when the packages met, not only because I want to check the packages when they don't.

225
00:16:03,060 --> 00:16:05,800
So inside the Sazi, I'm going to explain something here.

226
00:16:06,390 --> 00:16:11,280
So let us check for further things home, homeland to explain each and everything.
