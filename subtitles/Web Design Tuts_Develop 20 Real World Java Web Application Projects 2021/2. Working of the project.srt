1
00:00:00,600 --> 00:00:01,650
Hello, everyone.

2
00:00:01,920 --> 00:00:10,770
So I hope that you all have went through that introduction by email and have again like much idea about

3
00:00:10,770 --> 00:00:13,470
what actually this project is about.

4
00:00:13,890 --> 00:00:17,880
What are the functionalities we are going to attach in this project?

5
00:00:18,180 --> 00:00:24,780
And what are the concepts we are going to learn after the successful completion of this project?

6
00:00:25,200 --> 00:00:32,610
So after getting through the rough idea about this project, we are here to check that working of this

7
00:00:32,610 --> 00:00:35,190
project, how actually this project works.

8
00:00:35,520 --> 00:00:37,110
What are the options?

9
00:00:37,110 --> 00:00:42,420
How are choosing options, navigating between accounts and everything looks?

10
00:00:42,870 --> 00:00:46,020
So in this part, we are ahead.

11
00:00:46,320 --> 00:00:47,950
I've been running the program.

12
00:00:48,720 --> 00:00:56,040
We are going to write the program on our own, but I am here to explain this to my already written program

13
00:00:56,310 --> 00:01:00,720
and a tool like check how everything is working perfectly or not.

14
00:01:01,120 --> 00:01:08,280
So on running this project, this welcome to the dam project, our message will be displayed on your

15
00:01:08,280 --> 00:01:08,910
screens.

16
00:01:09,480 --> 00:01:16,770
And again, asking for that type of icon, like the event that we are existing users, then we will

17
00:01:16,770 --> 00:01:17,730
have to log in.

18
00:01:18,150 --> 00:01:23,570
And if we are like new user, then we have created a new account.

19
00:01:23,600 --> 00:01:27,540
So this project shows up both.

20
00:01:27,570 --> 00:01:30,990
We are a new user and we want to create a new account.

21
00:01:31,260 --> 00:01:37,260
So we will be heading to options from our keyboard and on hitting enter.

22
00:01:37,860 --> 00:01:41,580
We will be asked for an entire customer number.

23
00:01:41,910 --> 00:01:43,860
So this is upon us.

24
00:01:43,860 --> 00:01:45,510
We can choose any number.

25
00:01:45,630 --> 00:01:53,610
So suppose I am using like four times nine as my custom customer number and and that happened to be

26
00:01:53,610 --> 00:01:54,280
registered.

27
00:01:54,630 --> 00:01:56,600
I told you about that.

28
00:01:56,640 --> 00:02:01,400
These credentials are very like, Explore, does it?

29
00:02:01,410 --> 00:02:03,660
But yes, they are disposable.

30
00:02:03,660 --> 00:02:12,870
So we have to keep these credentials very secure and not disclose this information to anybody asking

31
00:02:12,870 --> 00:02:22,920
for it, as this is about the security of our money and this is has to be kept in mind that we do not

32
00:02:22,920 --> 00:02:29,850
like, share these credentials to any random person, which we are not knowing well.

33
00:02:30,180 --> 00:02:38,880
So yes, after hitting and done, yes, your new account has been created, successfully registered.

34
00:02:39,330 --> 00:02:46,620
So this message will appear on your window and then you will be redirected to the log in.

35
00:02:47,020 --> 00:02:55,290
So if we have a press or one in the choice option, so automatically, this will be a parody.

36
00:02:55,620 --> 00:03:01,620
But we have chosen the Create Account option shall dishes that issue in the past, which will be like

37
00:03:01,620 --> 00:03:10,290
asked by the user that you have to register first, then only you can enter to this item like our system.

38
00:03:10,740 --> 00:03:20,520
So we are like, we are having our customer number on the number already so we can like see them on.

39
00:03:21,120 --> 00:03:27,450
What I have told you that you have to remember this in future if you want to log in again.

40
00:03:27,810 --> 00:03:34,830
So enter your customer number and A.P. number has been entered successfully.

41
00:03:34,950 --> 00:03:39,930
Now after this, we are logged in to our Ethereum system.

42
00:03:40,320 --> 00:03:45,360
Now we have to select the type of account you are like we want to access.

43
00:03:45,720 --> 00:03:49,950
So type one is the checking account and Typekit is the savings account.

44
00:03:50,400 --> 00:04:00,300
So suppose we want to enter in our savings account on heading to and after this, this savings account

45
00:04:00,300 --> 00:04:01,740
interface will open.

46
00:04:02,250 --> 00:04:05,130
So suppose you want to view the values.

47
00:04:05,520 --> 00:04:07,950
So initially our balance is zero.

48
00:04:08,130 --> 00:04:14,100
We have nothing in our savings account balance, so we want to deposit some money.

49
00:04:14,910 --> 00:04:20,070
So current savings account balance will be displayed at every step.

50
00:04:20,430 --> 00:04:24,390
We have already discussed it, so amount you want to deposit.

51
00:04:24,390 --> 00:04:29,550
So suppose I want to deposit $20000 to my savings account.

52
00:04:29,910 --> 00:04:35,370
So current savings account balance will reflect our value of $20000.

53
00:04:35,760 --> 00:04:42,570
Now, in the next step, if you will be like viewing balance, then the balance will be updated.

54
00:04:42,930 --> 00:04:50,280
Now, the next step we want to perform is suppose we want to withdraw some money, so I'm hitting the.

55
00:04:50,910 --> 00:04:54,090
It will be asking for the amount we want to withdraw.

56
00:04:54,450 --> 00:04:58,200
So the point I want to withdraw $2000 is.

57
00:04:58,840 --> 00:05:05,980
So once they withdraw $2000, then the current savings account balance will be updated to eighteen thousand

58
00:05:05,980 --> 00:05:09,190
dollars, which is like going to be fine.

59
00:05:09,460 --> 00:05:15,610
We have like withdrawn $2000 automatically 20000 minus times.

60
00:05:15,610 --> 00:05:17,110
It is $18000.

61
00:05:17,500 --> 00:05:25,660
Now, the most interesting feature is like transferring funds within the account, so let us check that

62
00:05:25,660 --> 00:05:26,860
function also.

63
00:05:27,400 --> 00:05:30,850
So select an account you want to transfer that far.

64
00:05:30,950 --> 00:05:38,650
Stop so you want to transfer funds to our checking account as we have like nothing in our checking account.

65
00:05:39,310 --> 00:05:46,240
So amount you want to deposit, suppose we have eighteen thousand dollars and we want to deposit it

66
00:05:46,240 --> 00:05:50,620
current through our checking account balance from our savings account.

67
00:05:51,580 --> 00:05:56,140
So the current savings account balance will be ten thousand.

68
00:05:56,830 --> 00:06:07,930
Now after this, we want to exit this frame and we want to enter in the checking account window now

69
00:06:07,930 --> 00:06:09,970
in the checking account interface.

70
00:06:09,980 --> 00:06:12,070
Suppose we want you the balance.

71
00:06:12,700 --> 00:06:20,230
So our checking account balance is updated to eight thousand as we have transferred funds from this

72
00:06:20,230 --> 00:06:23,230
savings account to their checking account balance.

73
00:06:23,500 --> 00:06:29,830
Now here also, we can transfer the funds to the Checking Account Savings Account balance from this

74
00:06:29,830 --> 00:06:31,240
checking account balance.

75
00:06:31,690 --> 00:06:34,630
So suppose we are transferring 2000.

76
00:06:35,570 --> 00:06:41,480
OK, so you want to transfer funds to a savings account and 2000?

77
00:06:41,810 --> 00:06:49,000
So checking account balances updated now let us check whether the savings account balance is updated

78
00:06:49,010 --> 00:06:49,550
or not.

79
00:06:50,180 --> 00:07:00,050
So what we had, we had, I think the savings account balance was at the last step twelve thousand.

80
00:07:01,090 --> 00:07:05,650
Yes, I can see that we have the 2000 and so on hitting one.

81
00:07:05,710 --> 00:07:12,580
Yes, perfect savings account balance is twenty thousand dollars, which is like walking is perfectly

82
00:07:12,580 --> 00:07:12,910
fine.

83
00:07:13,270 --> 00:07:16,990
We are like done with all the functionalities checked.

84
00:07:18,250 --> 00:07:23,380
We have checked that, yes, non logging and registering thing.

85
00:07:24,100 --> 00:07:32,860
Now after that, we logged in to our APM system, after which we have entered the savings account interface

86
00:07:33,250 --> 00:07:40,870
now need some functionalities inside the savings account industries like depositing funds, withdrawing

87
00:07:40,870 --> 00:07:47,440
funds, viewing balance and then at least transferring funds to our checking accounts.

88
00:07:47,800 --> 00:07:56,320
So after which we have like navigated to our checking account and again, we check the balance.

89
00:07:56,320 --> 00:08:04,510
We transferred the funds again from the checking account interface to the savings account, so everything

90
00:08:04,510 --> 00:08:07,570
till now is working perfectly fine.

91
00:08:08,020 --> 00:08:16,870
So this is an interesting project in Java that we are like switching between options.

92
00:08:17,230 --> 00:08:25,600
We have this code, which reflects the object oriented programming we are having off those glasses and

93
00:08:25,600 --> 00:08:26,770
inside the glasses.

94
00:08:26,770 --> 00:08:28,990
Everything is like taking place.

95
00:08:29,200 --> 00:08:33,460
All these steps are maintained by separate classes.

96
00:08:33,790 --> 00:08:44,350
So like test was prepared rough prototype of what actually we are going to do inside this programming

97
00:08:44,350 --> 00:08:47,470
section, which we will be looking in the next part.

98
00:08:47,860 --> 00:08:58,120
So for me, we have to create a new project in the IDB and after the successful creation of the new

99
00:08:58,120 --> 00:09:08,620
project, we will be creating a main class which will be responsible for like testing and running of

100
00:09:08,620 --> 00:09:10,930
the team management system.

101
00:09:11,770 --> 00:09:20,530
Testing and running, testing and running is only performed by this mean class, and all other classes

102
00:09:20,530 --> 00:09:25,090
will be involved in testing and running off the lake system.

103
00:09:25,990 --> 00:09:27,520
Only this mean class.

104
00:09:27,520 --> 00:09:30,670
So initially we will create a mean class.

105
00:09:31,060 --> 00:09:39,700
Then after that, what are the other classes we will required in order to complete this system project?

106
00:09:40,810 --> 00:09:54,850
So the second class will be account class creating the account class, and this class will be like managing

107
00:09:54,850 --> 00:09:59,500
everything about the types of account

108
00:10:01,750 --> 00:10:11,800
customer verification, things like whether the credentials entered by the customer is correct or not.

109
00:10:12,130 --> 00:10:23,110
So we have to like have two factor authentication to check that whether the PIN and the customer number

110
00:10:23,110 --> 00:10:25,690
entered by the customer is correct or not.

111
00:10:26,050 --> 00:10:33,850
So we will be like managing our functionality for that verification in our account class in the project.

112
00:10:34,090 --> 00:10:41,980
Now that third thing we will be going to manage inside this account class will be like operations regarding

113
00:10:43,210 --> 00:10:45,040
the balance calculations.

114
00:10:45,790 --> 00:10:52,870
Show operations regarding balance calculations will be also managed by this account class only.

115
00:10:53,470 --> 00:10:58,480
So yes, this is the third thing we are going to manage inside this.

116
00:10:58,820 --> 00:11:08,350
Now, suppose that if a user enters any wrong choice from like the keyboard or the wrong option is selected.

117
00:11:08,770 --> 00:11:19,630
So also, that is an exception checking like exception handling method for invalid choices, which we

118
00:11:19,630 --> 00:11:23,290
are going to manage with the help of trying and blogs.

119
00:11:23,770 --> 00:11:31,870
So yes, this exception handling will be performed with this account, plus one invite invalid choices

120
00:11:31,870 --> 00:11:32,380
also.

121
00:11:32,920 --> 00:11:35,670
So this is all about this account.

122
00:11:35,680 --> 00:11:39,410
Plus we are going to pay NADA for pink.

123
00:11:40,630 --> 00:11:41,080
Yes.

124
00:11:41,470 --> 00:11:48,010
The third class we will be using, and the whole thing which we are keeping in mind in the prototype

125
00:11:48,010 --> 00:11:54,040
section is to create creating an option class.

126
00:11:54,610 --> 00:12:00,220
So option menu class we can see and this option menu class.

127
00:12:00,650 --> 00:12:07,310
Will be responsible for displaying the options list, like displaying the.

128
00:12:09,550 --> 00:12:11,080
List of choices.

129
00:12:11,890 --> 00:12:12,490
Yes.

130
00:12:12,520 --> 00:12:13,930
This is the right one.

131
00:12:14,290 --> 00:12:18,430
List of choices from which the user has to select.

132
00:12:18,910 --> 00:12:25,450
That's what he actually wants to do, but then he wants to log in or create account.

133
00:12:25,480 --> 00:12:32,140
Then after that, whether he wants to enter to the checking account interface or the savings account,

134
00:12:32,140 --> 00:12:33,520
interest rates and everything.

135
00:12:34,030 --> 00:12:44,380
So yes, this is US option menu glass and displaying list of choices is the role of this option.

136
00:12:44,380 --> 00:12:54,640
Menu glass and the roadside don't handle the exceptions to handle the exceptions regarding the like

137
00:12:54,640 --> 00:12:55,720
options selection.

138
00:12:55,990 --> 00:13:05,950
Suppose that blaster option attached to a specific choice is not entered correctly then to handle the

139
00:13:05,950 --> 00:13:07,630
exceptions regarding the.

140
00:13:08,700 --> 00:13:18,890
Yes, so handle the exceptions here, exceptions regarding the switch cases.

141
00:13:19,170 --> 00:13:27,600
So what actually switch cases are they will be like discussing it in detail in the programming section.

142
00:13:28,410 --> 00:13:34,160
Yes, exceptions regarding the switch cases will be handled inside this option menu glass.

143
00:13:34,590 --> 00:13:44,040
And at last, this option menu plus will be mapping things like we have a choice and a special option

144
00:13:44,260 --> 00:13:46,170
like that, do that choice.

145
00:13:46,500 --> 00:13:50,730
So that is a unique choice with every keypress.

146
00:13:51,090 --> 00:13:55,590
So with the help of mapping, we are going to perform this.

147
00:13:55,860 --> 00:13:56,310
Yes.

148
00:13:56,490 --> 00:14:00,000
Hand me correctly, I am talking about mapping.

149
00:14:00,270 --> 00:14:08,850
We are going to use hash maps, the structures in order to link choices to specific options so that

150
00:14:08,850 --> 00:14:14,610
on pressing that specifically, that specific option is to be performed.

151
00:14:14,970 --> 00:14:24,180
So this option menu class will be going to like responsible about mapping values

152
00:14:27,110 --> 00:14:30,330
and every key place.

153
00:14:31,350 --> 00:14:31,810
Yes.

154
00:14:32,400 --> 00:14:35,550
So we are going to map every T.

155
00:14:35,700 --> 00:14:43,080
Every case should be mapped to a specific option and everything is going to be like linked in a manner

156
00:14:43,230 --> 00:14:45,410
so that nothing overlaps.

157
00:14:45,420 --> 00:14:54,030
Like, suppose you press key five or anything and that a key on pressing that you enter to transfer

158
00:14:54,030 --> 00:14:54,950
funds internally.

159
00:14:55,000 --> 00:14:56,880
So this is not going to work.

160
00:14:57,240 --> 00:15:06,540
We have to map everything correctly in order to make things properly functional without any open overlapping.

161
00:15:07,000 --> 00:15:16,440
So to avoid any kind of exceptions overlapping, we are going to use different types of data structures,

162
00:15:16,920 --> 00:15:21,060
which we will be looking in the program section in the next one.

163
00:15:21,480 --> 00:15:27,480
So I hope you have understood all the like a blueprint of this project.

164
00:15:27,750 --> 00:15:34,230
Now, from the next one, we will be start creating a new project and then initializing all the classes

165
00:15:34,440 --> 00:15:36,930
and functionalities related to them.

166
00:15:37,290 --> 00:15:40,740
So you see you in the next part with the coding section.
