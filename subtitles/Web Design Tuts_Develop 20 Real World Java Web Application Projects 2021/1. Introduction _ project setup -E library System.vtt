WEBVTT
1
00:00:01.220 --> 00:00:04.820
So our project title is Java elaborate system.

2
00:00:05.510 --> 00:00:12.710
So we are going to build one e-library system with some logging methods for students, and I'd also

3
00:00:12.710 --> 00:00:21.050
like for the librarian to create an E library, which includes some been part or some GSP part also.

4
00:00:21.440 --> 00:00:28.430
So we are mainly focused on e-library management with Java, so you can develop with other languages.

5
00:00:28.430 --> 00:00:30.380
Also left Python.

6
00:00:30.410 --> 00:00:32.660
We have a giant Golden Flask console.

7
00:00:32.990 --> 00:00:34.820
Then we have BHP also.

8
00:00:35.180 --> 00:00:41.090
But the way we are deploying the Java because it's really fast again, it's easy to handle and with

9
00:00:41.210 --> 00:00:42.350
Julie and Java.

10
00:00:42.350 --> 00:00:44.380
So it's very useful.

11
00:00:44.380 --> 00:00:49.340
Like they created this thing different than for the back anything different.

12
00:00:49.610 --> 00:00:52.970
So we can define both things very significantly.

13
00:00:53.420 --> 00:00:56.060
So our project is Java 11 resisting.

14
00:00:56.660 --> 00:01:05.750
So this project is based on GDC Java Database Connection, GSP, Java Servlet Pages, Java Servlet,

15
00:01:06.020 --> 00:01:15.020
which used to create some database connection to just being on things and with the server deployment.

16
00:01:15.560 --> 00:01:24.650
So GCP, I'm going to tell how it will work, but let us see what is our requirements and all our nervous

17
00:01:24.650 --> 00:01:25.040
system.

18
00:01:25.460 --> 00:01:26.300
So what this system?

19
00:01:27.500 --> 00:01:35.450
Project Aim is basically develop a Web app using Java for elaborate platform with the help of Java Servlet,

20
00:01:35.450 --> 00:01:36.880
GSP and Giudice.

21
00:01:37.190 --> 00:01:42.320
So I'm not considering your server part because server is by industry for deployment and everything.

22
00:01:42.830 --> 00:01:46.460
You can use different deployment servers or the local hosting.

23
00:01:46.460 --> 00:01:53.390
I'm showing your glass office server, but for on online web deployments, you can use different platforms

24
00:01:53.390 --> 00:01:54.800
like Heroku app on often.

25
00:01:55.160 --> 00:02:03.600
Use this, or you can use Google Cloud platform also to deploy your server or so Heroku app needs or

26
00:02:03.620 --> 00:02:06.650
PostgreSQL for their deployment.

27
00:02:07.040 --> 00:02:09.270
But I'm using here Oracle database.

28
00:02:09.290 --> 00:02:13.850
You can easily shift towards MySQL, all the queries are seen and all the things that seem.

29
00:02:15.000 --> 00:02:21.420
So steps of overdevelopment is basically projected of understanding different rules we are going to

30
00:02:21.420 --> 00:02:21.690
use.

31
00:02:22.140 --> 00:02:28.890
Just be basics, basics of database, Java servlet and utility connection and deployment on the server.

32
00:02:29.370 --> 00:02:36.770
So before proceeding with our former system and everything, it is explaining how we can set up.

33
00:02:36.780 --> 00:02:39.390
Let us understand how we can set up our project.

34
00:02:40.050 --> 00:02:46.230
So I'm using your ID as the elite NetBeans, which is very popular and Open-Source.

35
00:02:47.300 --> 00:02:53.490
Oh, I'm closing this panel also, so due to my previous project, let us create a new project with

36
00:02:53.490 --> 00:02:54.170
to failure.

37
00:02:55.670 --> 00:02:57.170
Got new project.

38
00:02:59.030 --> 00:03:00.140
Once this is done.

39
00:03:13.060 --> 00:03:14.260
I need to earn.

40
00:03:16.120 --> 00:03:17.080
More things here.

41
00:03:19.550 --> 00:03:22.820
Likewise, you can see here new project team.

42
00:03:23.950 --> 00:03:25.270
I have to add this.

43
00:03:26.820 --> 00:03:28.170
This is my new project.

44
00:03:28.800 --> 00:03:29.520
As you can see.

45
00:03:31.710 --> 00:03:35.490
So go to Java Web, Java and Web application mechanics next.

46
00:03:36.890 --> 00:03:41.390
Then I'm giving the name as E name.

47
00:03:42.250 --> 00:03:43.550
Yeah, we.

48
00:03:44.700 --> 00:03:45.790
As you can see, elected.

49
00:03:47.220 --> 00:03:49.440
Well, let me maximize this part.

50
00:03:54.220 --> 00:03:55.710
OK, hope you can see this.

51
00:03:56.620 --> 00:03:56.940
OK.

52
00:03:58.360 --> 00:04:00.070
Then I'm going to click next.

53
00:04:00.980 --> 00:04:02.730
Choose your glasses.

54
00:04:03.230 --> 00:04:05.660
Using event next.

55
00:04:06.050 --> 00:04:09.590
I don't want to use anything you finish.

56
00:04:11.380 --> 00:04:13.480
So it will take time to load everything.

57
00:04:17.720 --> 00:04:18.230
So.

58
00:04:19.900 --> 00:04:24.220
Now you can see it my this is my old.

59
00:04:24.580 --> 00:04:28.630
Forget about it, ignorable, this so elaborate is my main project you.

60
00:04:29.590 --> 00:04:35.320
So let me add some libraries here first, as you can see, these are great libraries, but I want to

61
00:04:35.320 --> 00:04:36.820
add some jot of folder here.

62
00:04:37.830 --> 00:04:41.060
So let me add one jar folder.

63
00:04:41.580 --> 00:04:52.020
So what is the Jar folder basically is, oh, nothing, but I'm going to add or jar folder here.

64
00:04:54.170 --> 00:04:57.080
Java, I want to turn to the database.

65
00:04:57.260 --> 00:05:02.220
I will tell you about that, but also let me add my Java.

66
00:05:02.750 --> 00:05:11.950
If you are JDK, one point eight is not consist Java X file, it will argue error by replacing everything.

67
00:05:11.960 --> 00:05:16.430
So we'll do 1.8 times on this and the library.

68
00:05:17.720 --> 00:05:18.490
All.

69
00:05:20.060 --> 00:05:25.220
So let's find out where you stored your Java phones.

70
00:05:26.560 --> 00:05:32.350
So be the Java is not to destroy their mining with absolute but.

71
00:05:33.740 --> 00:05:35.480
For now, if I lose, I really.

72
00:05:37.300 --> 00:05:38.110
As you can see.

73
00:05:39.190 --> 00:05:40.480
My file is original.

74
00:05:41.510 --> 00:05:42.770
Oh, so.

75
00:05:43.910 --> 00:05:46.600
Let me do this, so this is my individual testimony.

76
00:05:47.300 --> 00:05:50.240
So consider this as index one.

77
00:05:50.540 --> 00:05:51.260
Nothing more.

78
00:05:53.090 --> 00:05:55.850
Let me tell you something more about this.

79
00:05:56.240 --> 00:05:57.240
So what is the individual?

80
00:05:57.250 --> 00:05:58.880
Additionally, there is a linkage.

81
00:05:59.480 --> 00:06:06.080
So if you want to make your system is running or not, click here, then go to plan and build.

82
00:06:07.560 --> 00:06:10.590
If your window is not opening your output window, go to window here.

83
00:06:11.100 --> 00:06:14.510
You can use control for room, but I'm using your button.

84
00:06:16.320 --> 00:06:18.540
It can down here because like this.

85
00:06:19.750 --> 00:06:20.620
And you can see this is.

86
00:06:21.910 --> 00:06:23.140
US run this project with us.

87
00:06:24.070 --> 00:06:27.850
So this for first time, so I'm just running this for the first time.

88
00:06:29.270 --> 00:06:30.530
Everything is running or not.

89
00:06:33.330 --> 00:06:37.140
I'm going to use your some default bootstrap template.

90
00:06:37.170 --> 00:06:45.480
Also, some default cases and just be use also not default JavaScript files and a thesis.

91
00:06:45.810 --> 00:06:50.700
These are some already created templates, so I don't want to focus on that part.

92
00:06:50.700 --> 00:06:52.770
I just want to focus on Java part here.

93
00:06:53.300 --> 00:06:56.130
So I'm going to let us.

94
00:06:58.440 --> 00:07:00.410
Our project is running on not.

95
00:07:05.980 --> 00:07:09.340
So it will take time for running.

96
00:07:11.470 --> 00:07:12.940
Two to three minutes it will take.

97
00:07:14.840 --> 00:07:15.440
So.

98
00:07:17.750 --> 00:07:22.010
Now you can see my project is running and you're trying to do radar content.

99
00:07:22.460 --> 00:07:25.880
So this is nothing but you just wrote your team.

100
00:07:25.890 --> 00:07:27.530
So my deployment is.

101
00:07:28.280 --> 00:07:29.990
I'm going to close this all things.

102
00:07:30.320 --> 00:07:35.660
I'm going to close my browser also because you haven't written anything.

103
00:07:35.960 --> 00:07:39.440
So in the next role, I will tell you how we can deploy this.

104
00:07:39.710 --> 00:07:46.420
But before that, let us learn which tools we are going to use and what is the significance of these

105
00:07:46.430 --> 00:07:46.820
tools.

106
00:07:49.730 --> 00:07:53.410
So as I told you, we are going to use jsp, our solar and utility.

107
00:07:54.020 --> 00:07:59.620
So our application requirements, these basically are some more important part.

108
00:08:00.270 --> 00:08:00.830
So.

109
00:08:05.560 --> 00:08:07.720
What is this basically so.

110
00:08:09.760 --> 00:08:16.780
We are going to use some school statements, we are going to use some logging statements and everything,

111
00:08:16.780 --> 00:08:18.310
so let us see what we are doing.

112
00:08:19.090 --> 00:08:24.250
So our application requirements is a Java program to display web contents Java program.

113
00:08:25.200 --> 00:08:29.980
You should have some basic concepts of skill also, you should know about the stimulant users.

114
00:08:30.000 --> 00:08:33.390
I'm not going to explain each and every tag here initiative and.

115
00:08:34.360 --> 00:08:36.640
I'm using your bootstrap automated you.

116
00:08:37.630 --> 00:08:44.230
So we need to have one Web site to eliminate logging as admin or log in as a student admin librarian

117
00:08:44.530 --> 00:08:51.170
or I'm considering admin administration actions like AdBlock, something which student should have to

118
00:08:51.190 --> 00:08:56.920
register and log in books, submit anything that park your library?

119
00:08:57.100 --> 00:09:01.290
I'm going to tell you that further than JDK 1.8 we need.

120
00:09:02.400 --> 00:09:10.110
If I'm going to be using it means you can use any I.D. Java, Egerton interpretation, wasn't it Oracle

121
00:09:10.110 --> 00:09:14.940
or my school database server said don't get to remember for the server deployment.

122
00:09:14.970 --> 00:09:15.630
You should get.

123
00:09:16.320 --> 00:09:24.110
If you're bored with it and if it's already occupied by my SQL server or Oracle database server, you

124
00:09:24.120 --> 00:09:28.770
have in the last few server either or your book Oracle database.

125
00:09:29.210 --> 00:09:34.050
Also, my recommendation is to change blast, which server port because it's easy.

126
00:09:34.500 --> 00:09:41.220
And Oracle data maintained Oracle database with AT&amp;T Portal always establishing water, basically.

127
00:09:41.760 --> 00:09:42.870
So it will be helpful.

128
00:09:43.170 --> 00:09:45.990
So let us see what is basically Java solids.

129
00:09:46.590 --> 00:09:51.050
So if you know the Java solid parts earlier, it is going to be easy.

130
00:09:51.660 --> 00:09:56.040
So Java so is an API that provides many interfaces and classes.

131
00:09:56.430 --> 00:09:57.550
So let's access it.

132
00:09:57.570 --> 00:09:59.010
Interfaces and classes both.

133
00:09:59.760 --> 00:10:06.390
So it is primary technology to build and create application on the Solaris.

134
00:10:06.450 --> 00:10:09.450
Different pro steps are used now.

135
00:10:09.720 --> 00:10:11.550
Spring, then hibernate.

136
00:10:11.550 --> 00:10:18.810
Also providing so solid is an interface that must be implemented affordable, creating on any solid,

137
00:10:19.110 --> 00:10:24.270
so solid it acts as an interface for creating any web or anything.

138
00:10:24.840 --> 00:10:27.960
And so it is a class that extends the capabilities of servers.

139
00:10:28.200 --> 00:10:31.350
These forms to the incoming request and etc. things.

140
00:10:32.530 --> 00:10:37.630
Now, what is solid is Web component that deployed on the server part.

141
00:10:38.130 --> 00:10:45.370
So as I told you, if we is a client or we can say to the network part while deploying all things,

142
00:10:45.670 --> 00:10:51.370
but the Java solids are mainly deployed and that pages Java pages are stored in the server part.

143
00:10:51.730 --> 00:10:55.330
So in this example, our system is only a client and server access.

144
00:10:55.990 --> 00:10:57.310
But what computer?

145
00:10:57.640 --> 00:11:05.700
There are two computers or you can say, tremendous, huge network of some school or university and

146
00:11:06.190 --> 00:11:07.450
know all the servers.

147
00:11:08.750 --> 00:11:13.640
What are we going to all the claims connected to the ones that were so for all e-library management

148
00:11:13.640 --> 00:11:14.210
system?

149
00:11:14.690 --> 00:11:22.760
The main logic in the solar Java logic is stored in a server side only, so it will act as a request

150
00:11:22.760 --> 00:11:25.610
and response for every server for that purpose.

151
00:11:26.210 --> 00:11:31.130
So like Ireland, book and ET things for all logic, logical thinking.

152
00:11:31.580 --> 00:11:37.310
So this is all about the servers and servers are mainly so let's all mean you're running on server,

153
00:11:37.760 --> 00:11:40.820
which depends on the request and response from the client.

154
00:11:41.240 --> 00:11:46.540
So firstly, client request server for something information.

155
00:11:47.930 --> 00:11:50.420
I want to fetch the data from this database.

156
00:11:50.430 --> 00:11:52.730
I want to put this in to the database.

157
00:11:52.940 --> 00:12:01.070
So these are all kinds of request responses generated at Runtime Lake in this server, if a request

158
00:12:01.070 --> 00:12:07.460
is server, will do something and the response will be generated so that response can be written.

159
00:12:08.060 --> 00:12:09.800
That book is added to the database.

160
00:12:10.070 --> 00:12:16.960
That part or request can be, or you can see that party's book is issued for that student.

161
00:12:17.660 --> 00:12:26.270
So this is all about how the solar term, so why so late we are using here so you can use normal things

162
00:12:26.270 --> 00:12:29.660
on CGI, which is basically written in all or anything?

163
00:12:29.910 --> 00:12:38.300
Well, C or C++ or languages, but why we are not using this because it creates some O processes, we

164
00:12:38.300 --> 00:12:40.960
can see the common gateway interface.

165
00:12:40.970 --> 00:12:42.080
It creates processes.

166
00:12:42.530 --> 00:12:44.720
So it's exercise multiprocessing.

167
00:12:45.410 --> 00:12:52.940
So so what are limiter for some amount of processes more than than processes, consider one server which

168
00:12:52.940 --> 00:12:55.970
computing capacity is only considering a hundred processes.

169
00:12:56.460 --> 00:13:00.110
So one client would want each other.

170
00:13:00.110 --> 00:13:06.890
We can say when Glenn would file request so that request conversion to the process and that process

171
00:13:06.890 --> 00:13:07.750
comes through the server.

172
00:13:07.760 --> 00:13:13.680
So for each client, if it's creating for you and or server can handle only.

173
00:13:14.150 --> 00:13:15.740
So it's very difficult.

174
00:13:15.740 --> 00:13:20.180
Only 20 claims can be used, but you know, so little pass.

175
00:13:20.210 --> 00:13:20.870
What's happening?

176
00:13:21.530 --> 00:13:30.050
Java itself creates solids or requests into training, so trading consist more number of processes.

177
00:13:30.530 --> 00:13:34.070
Also, training includes some trade law.

178
00:13:34.220 --> 00:13:41.840
Also then we have known that trading hails from own time, complexity things, so it will be very easy

179
00:13:42.080 --> 00:13:44.780
for a server to handle that processes step by step.

180
00:13:45.200 --> 00:13:53.420
So now we know you are clear with why we are using so, so many parties over GCP, but Java solids are

181
00:13:53.420 --> 00:13:56.450
used to create a database connection and everything.

182
00:13:58.000 --> 00:14:03.850
So there are this badgering, so let's said that will do better than the thing like request dispatcher

183
00:14:03.880 --> 00:14:04.670
in JSP.

184
00:14:04.870 --> 00:14:09.250
Remember, this does not consist any request dispatcher.

185
00:14:09.510 --> 00:14:15.940
It requires dispatch it is for is providing some interface this facility for anticipating a request

186
00:14:16.240 --> 00:14:21.160
from one source to another source like one issue you will do, another issue will once again lead to

187
00:14:21.160 --> 00:14:21.940
another subject.

188
00:14:22.570 --> 00:14:29.200
So it consists forward and include methods forward for forwarding that including means, including the

189
00:14:29.200 --> 00:14:29.560
same.

190
00:14:30.250 --> 00:14:32.650
But so these all of these things.

191
00:14:33.100 --> 00:14:36.220
So you understand throughout this diagram.

192
00:14:36.820 --> 00:14:39.070
So it is very easy to consider this.

193
00:14:40.330 --> 00:14:40.870
All part.

194
00:14:42.370 --> 00:14:50.080
So this is all about the solid, so solid of three important parts estimates usages for front end Java

195
00:14:50.080 --> 00:14:54.790
solid program with back in part and logical matter to back end, even basically connecting front to

196
00:14:54.790 --> 00:14:55.450
the database.

197
00:14:55.810 --> 00:15:00.370
So we need some Java logic like put this parameter to this rule.

198
00:15:00.610 --> 00:15:04.180
Would this second by second rule like that?

199
00:15:04.180 --> 00:15:06.190
We want to write the logic.

200
00:15:06.250 --> 00:15:07.540
Logic is very easy.

201
00:15:07.750 --> 00:15:11.880
And there are some default useful statements we are going to use.

202
00:15:11.890 --> 00:15:14.680
It will be similar to control for a little bit.

203
00:15:15.250 --> 00:15:21.550
So now we know that one in digital stimuli is added to the.

204
00:15:22.550 --> 00:15:28.880
Index Dot Dollar, which is with each of us, but we know that, but our ID or our float doesn't know

205
00:15:28.880 --> 00:15:35.030
that we have to add so controlled flow whereby we check for the controlled flow of our web, everything

206
00:15:35.510 --> 00:15:42.560
and we would all take similar basically any Jake or which linking parties linked to that particular

207
00:15:42.560 --> 00:15:42.830
part.

208
00:15:43.040 --> 00:15:45.290
If not, it will add some dependencies also.

209
00:15:45.290 --> 00:15:48.860
So we've said ill will take care of all the connection and everything.

210
00:15:50.110 --> 00:15:56.320
So in further part, we are going to learn how we can create GSP or we can set up our project, so in

211
00:15:56.320 --> 00:16:01.450
next to do it, I'm going to tell our project, but we don't take traditional development.

212
00:16:03.690 --> 00:16:06.570
And over fully developed solid.
