WEBVTT
1
00:00:01.000 --> 00:00:03.004
- [Woman] Spring Web MVC is a well known

2
00:00:03.004 --> 00:00:05.007
web tier development framework,

3
00:00:05.007 --> 00:00:09.006
but did you know that it can be used to create RESTful APIs?

4
00:00:09.006 --> 00:00:12.003
This has been possible since its inception,

5
00:00:12.003 --> 00:00:14.008
but implementation resulted in controller classes

6
00:00:14.008 --> 00:00:17.008
that were messy and riddled with annotations.

7
00:00:17.008 --> 00:00:21.002
That change was Spring Web MVC version 4,

8
00:00:21.002 --> 00:00:25.002
with the introduction of the @RestController annotation.

9
00:00:25.002 --> 00:00:27.006
Annotating a class with @RestController

10
00:00:27.006 --> 00:00:30.007
tells Spring Web MVC this class follows

11
00:00:30.007 --> 00:00:34.004
Restful Web Service stereotypical behavior.

12
00:00:34.004 --> 00:00:37.007
A REST Controller class mediates between web requests

13
00:00:37.007 --> 00:00:39.007
and the internals of the application.

14
00:00:39.007 --> 00:00:42.003
It is responsible for directing requests

15
00:00:42.003 --> 00:00:44.001
to the appropriate services,

16
00:00:44.001 --> 00:00:47.005
and then sending the response back to the client.

17
00:00:47.005 --> 00:00:50.003
In Spring Data REST, the framework itself

18
00:00:50.003 --> 00:00:51.009
mediates between web requests

19
00:00:51.009 --> 00:00:54.001
and the Persistent Domain model.

20
00:00:54.001 --> 00:00:55.007
So what are the reasons you would choose

21
00:00:55.007 --> 00:00:59.003
to expose an API via the REST controller?

22
00:00:59.003 --> 00:01:02.005
One reason is that your application is not

23
00:01:02.005 --> 00:01:04.008
using Spring Data REST repositories.

24
00:01:04.008 --> 00:01:08.008
Another is that your API launches an algorithmic service

25
00:01:08.008 --> 00:01:12.004
and it's not just used for data retrieval.

26
00:01:12.004 --> 00:01:16.006
Or you need to hide the internal data model from the client,

27
00:01:16.006 --> 00:01:20.009
either to limit complexity or for proprietary reasons.

28
00:01:20.009 --> 00:01:24.003
And finally you require a layer of business services

29
00:01:24.003 --> 00:01:28.003
between the web tier and the data access layer.

30
00:01:28.003 --> 00:01:30.002
Let's walk through the major components

31
00:01:30.002 --> 00:01:32.001
of a REST controller.

32
00:01:32.001 --> 00:01:34.007
Here's how you annotate a class to denote it

33
00:01:34.007 --> 00:01:36.007
as a REST controller.

34
00:01:36.007 --> 00:01:39.005
It's not necessary, but it follows convention to

35
00:01:39.005 --> 00:01:43.002
have controller as a suffix to the class name.

36
00:01:43.002 --> 00:01:46.002
The @RestController annotation is required.

37
00:01:46.002 --> 00:01:49.007
The @RequestMapping annotation of the class level

38
00:01:49.007 --> 00:01:53.003
gives a base URL for the entire class.

39
00:01:53.003 --> 00:01:55.008
For maintainability, each class should map

40
00:01:55.008 --> 00:01:58.008
to only one resource.

41
00:01:58.008 --> 00:02:01.000
Here the resource is example,

42
00:02:01.000 --> 00:02:05.003
and the base URL is /examples.

43
00:02:05.003 --> 00:02:10.004
To create new examples, annotate a method with @PostMapping.

44
00:02:10.004 --> 00:02:13.006
The @RequestBody annotation on the parameter

45
00:02:13.006 --> 00:02:16.009
is the result of the Spring MVC data binding

46
00:02:16.009 --> 00:02:20.006
from http request body to a java object.

47
00:02:20.006 --> 00:02:22.005
By default the request body is expected

48
00:02:22.005 --> 00:02:24.006
to be in JSON format.

49
00:02:24.006 --> 00:02:28.000
Normally http status 200 is returned

50
00:02:28.000 --> 00:02:30.009
upon successful completion of the method.

51
00:02:30.009 --> 00:02:35.005
This method overrides that with @ResponseStatus annotation.

52
00:02:35.005 --> 00:02:39.007
So successful completion will instead return a 201,

53
00:02:39.007 --> 00:02:41.005
which is CREATED.

54
00:02:41.005 --> 00:02:43.006
For a method that fetches all examples,

55
00:02:43.006 --> 00:02:46.003
annotate it with @GetMapping.

56
00:02:46.003 --> 00:02:49.004
For a method that fetches just one example by id

57
00:02:49.004 --> 00:02:52.005
use @GetMapping with a path parameter,

58
00:02:52.005 --> 00:02:56.008
which is concatenated to the class request mapping.

59
00:02:56.008 --> 00:02:59.000
Here it is called id.

60
00:02:59.000 --> 00:03:00.009
Then have a path variable parameter

61
00:03:00.009 --> 00:03:03.000
that matches the mapping name.

62
00:03:03.000 --> 00:03:07.001
HttpPut and HttpPatch mappings are available

63
00:03:07.001 --> 00:03:09.006
for modifying one element.

64
00:03:09.006 --> 00:03:14.007
Here both PathVariable and @RequestBody are employed.

65
00:03:14.007 --> 00:03:19.001
And finally HttpDelete has an @DeleteMapping.

66
00:03:19.001 --> 00:03:21.003
Here we delete one element so

67
00:03:21.003 --> 00:03:26.000
@PathVariable is provided to denote which element to remove.

