WEBVTT
1
00:00:01.000 --> 00:00:03.002
- [Instructor] We need to look up the tour package

2
00:00:03.002 --> 00:00:04.004
by the name.

3
00:00:04.004 --> 00:00:08.004
The code is not provided in the JSON import file.

4
00:00:08.004 --> 00:00:11.004
We accomplish this by creating query methods

5
00:00:11.004 --> 00:00:15.006
in the tour package repository interface.

6
00:00:15.006 --> 00:00:19.000
So let's open Tour package repository.

7
00:00:19.000 --> 00:00:33.007
And now I'm going to add a method.

8
00:00:33.007 --> 00:00:38.003
I'm going to call the method find by name

9
00:00:38.003 --> 00:00:41.003
passing in a string,

10
00:00:41.003 --> 00:00:46.006
which is the name of the tour package.

11
00:00:46.006 --> 00:00:50.008
Now back in tour service,

12
00:00:50.008 --> 00:01:01.004
I'm going to use that find by name instead of find by D.

13
00:01:01.004 --> 00:01:30.005
And now let's actually run the application again.

14
00:01:30.005 --> 00:01:33.002
So we ran

15
00:01:33.002 --> 00:01:36.003
Tomcat and it started up just fine.

16
00:01:36.003 --> 00:01:40.004
It didn't throw any exceptions.

17
00:01:40.004 --> 00:01:43.005
And is it magic?

18
00:01:43.005 --> 00:01:44.006
Is it a miracle?

19
00:01:44.006 --> 00:01:49.000
Well, no, it's not magical at all in the introspection

20
00:01:49.000 --> 00:01:51.009
and reflection spring implements the method

21
00:01:51.009 --> 00:01:53.008
under the covers for us

22
00:01:53.008 --> 00:01:56.007
but we must follow their rules for declaring methods

23
00:01:56.007 --> 00:01:58.007
and correctly map the entity properties

24
00:01:58.007 --> 00:02:00.008
to the method signature.

25
00:02:00.008 --> 00:02:03.005
Query methods are a great code saver

26
00:02:03.005 --> 00:02:09.007
spring data JPA eliminates ugly boilerplate querying code.

27
00:02:09.007 --> 00:02:11.009
To create a simple query method,

28
00:02:11.009 --> 00:02:14.008
we only need to declare the return type.

29
00:02:14.008 --> 00:02:18.002
Begin the signature with find by followed by an attribute

30
00:02:18.002 --> 00:02:19.009
name and camelCase

31
00:02:19.009 --> 00:02:23.007
and query parameters whose type match the attribute type.

32
00:02:23.007 --> 00:02:27.002
Query methods signatures can span multiple entities.

33
00:02:27.002 --> 00:02:30.007
You can look up the tour by the tour package code.

34
00:02:30.007 --> 00:02:33.005
The tour entity has a tour package attribute

35
00:02:33.005 --> 00:02:36.000
and the tour package has a code attribute

36
00:02:36.000 --> 00:02:39.002
chain the attribute names and follow camelCase rules

37
00:02:39.002 --> 00:02:42.008
like we do with find by tour package code.

38
00:02:42.008 --> 00:02:46.000
Spring data JPA facilitates fast failure

39
00:02:46.000 --> 00:02:48.005
here region is misspelled.

40
00:02:48.005 --> 00:02:51.009
When spring tries to instantiate the class to implement that

41
00:02:51.009 --> 00:02:54.000
repository at system startup.

42
00:02:54.000 --> 00:02:57.000
It throws a property reference exception

43
00:02:57.000 --> 00:03:00.000
with SQL you would not know there was a syntax error

44
00:03:00.000 --> 00:03:02.004
Until the query runs.

45
00:03:02.004 --> 00:03:06.001
You can make complex queries with additional filter options

46
00:03:06.001 --> 00:03:12.004
such as, as and or in less than, contains and like.

47
00:03:12.004 --> 00:03:14.006
Refer to the spring data JPA specification

48
00:03:14.006 --> 00:03:16.007
for all the filter combinations.

49
00:03:16.007 --> 00:03:19.009
As you can see the signatures on the methods become larger

50
00:03:19.009 --> 00:03:23.002
as the query methods become more complex.

51
00:03:23.002 --> 00:03:28.004
You can leverage complex JQUL queries inside the repository

52
00:03:28.004 --> 00:03:31.006
interface by using the app query annotation.

53
00:03:31.006 --> 00:03:34.006
Here look up tours runs the same query as

54
00:03:34.006 --> 00:03:36.006
find by tour package code

55
00:03:36.006 --> 00:03:38.001
and difficulty and region

56
00:03:38.001 --> 00:03:39.008
and price less than

57
00:03:39.008 --> 00:03:42.001
but the signature is much cleaner.

58
00:03:42.001 --> 00:03:44.003
At query methods signatures do not need

59
00:03:44.003 --> 00:03:46.006
to follow declaration rules.

60
00:03:46.006 --> 00:03:49.009
The scope of this course does not include JPQL

61
00:03:49.009 --> 00:03:52.006
but you should be aware of this as an alternative.

62
00:03:52.006 --> 00:03:54.009
Refer to the spring data JPA specification

63
00:03:54.009 --> 00:03:56.009
for a complete description.

64
00:03:56.009 --> 00:04:00.006
This has been a brief overview of spring data JPA.

65
00:04:00.006 --> 00:04:04.006
A deeper dive is found in my spring data course.

66
00:04:04.006 --> 00:04:06.007
I encourage you to explore this feature further

67
00:04:06.007 --> 00:04:08.006
as it quickly becomes the most popular

68
00:04:08.006 --> 00:04:12.000
and convenient method to interact with relational databases.

