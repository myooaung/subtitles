WEBVTT
1
00:00:01.000 --> 00:00:03.000
- [Instructor] Before building, let's verify

2
00:00:03.000 --> 00:00:06.005
that Java and Maven have been properly configured.

3
00:00:06.005 --> 00:00:08.000
I have a terminal window open,

4
00:00:08.000 --> 00:00:11.006
and my present working directory is explorecali.

5
00:00:11.006 --> 00:00:18.003
So I'm going to type java dash version,

6
00:00:18.003 --> 00:00:19.009
and we see that I'm all set to run

7
00:00:19.009 --> 00:00:21.005
the appropriate Java version.

8
00:00:21.005 --> 00:00:28.001
Next let's run mvn dash version,

9
00:00:28.001 --> 00:00:30.001
and that's also ready to go.

10
00:00:30.001 --> 00:00:31.005
If either of these commands fail,

11
00:00:31.005 --> 00:00:33.007
then refer to the installation instructions

12
00:00:33.007 --> 00:00:35.002
of those products.

13
00:00:35.002 --> 00:00:37.001
Now let's build the project.

14
00:00:37.001 --> 00:00:42.008
In the terminal window we type mvn space install.

15
00:00:42.008 --> 00:00:44.009
Now this will download all the dependencies

16
00:00:44.009 --> 00:00:48.000
into the m2 repository.

17
00:00:48.000 --> 00:00:49.006
It compiles any Java sources

18
00:00:49.006 --> 00:00:52.006
and package them into one JAR file.

19
00:00:52.006 --> 00:00:55.003
It may take several minutes to download the dependencies

20
00:00:55.003 --> 00:00:58.006
for the first time into your local repository.

21
00:00:58.006 --> 00:01:02.006
So mine is finished, and let's prove that it built

22
00:01:02.006 --> 00:01:06.006
by looking in the target folder.

23
00:01:06.006 --> 00:01:09.001
So the target folder, we have this long file name

24
00:01:09.001 --> 00:01:15.001
that says explorecali zero zero one dash snapshot dot jar.

25
00:01:15.001 --> 00:01:27.001
Let's launch it at the command line with java dash jar

26
00:01:27.001 --> 00:01:30.004
and invoke the JAR file.

27
00:01:30.004 --> 00:01:32.008
And after a lot of startup messages,

28
00:01:32.008 --> 00:01:34.007
we finally know the application is running

29
00:01:34.007 --> 00:01:36.002
when it print started.

30
00:01:36.002 --> 00:01:40.006
Explorecali application, and there it is.

31
00:01:40.006 --> 00:01:43.007
So I know that by default, Spring Boot microservices

32
00:01:43.007 --> 00:01:46.000
use port 8080.

33
00:01:46.000 --> 00:01:48.006
Let's see if the application is accepting requests

34
00:01:48.006 --> 00:01:50.001
via the browser.

35
00:01:50.001 --> 00:01:54.000
So I'm at a browser and I'm going to hit the application

36
00:01:54.000 --> 00:02:03.002
at local host 8080 to see if it's listening.

37
00:02:03.002 --> 00:02:06.000
And it prints a json message.

38
00:02:06.000 --> 00:02:07.008
Don't worry about the meaning of this message.

39
00:02:07.008 --> 00:02:09.009
It's basically saying, "I'm alive."

40
00:02:09.009 --> 00:02:12.001
If there's any problem, the browser will respond

41
00:02:12.001 --> 00:02:15.008
with a message such as, "Site can't be reached."

42
00:02:15.008 --> 00:02:18.002
Now, we could have multiple instances of the application

43
00:02:18.002 --> 00:02:21.006
running but only if they are listening on different ports.

44
00:02:21.006 --> 00:02:22.009
Back on the terminal window,

45
00:02:22.009 --> 00:02:25.002
we see our original app is running.

46
00:02:25.002 --> 00:02:28.009
I'm going to go to a different tab.

47
00:02:28.009 --> 00:02:31.006
If we attempt to run them on the same port,

48
00:02:31.006 --> 00:02:33.004
the second instantiation will fail

49
00:02:33.004 --> 00:02:35.005
so let's look at this terminal window

50
00:02:35.005 --> 00:02:38.009
and I have my command already populated here.

51
00:02:38.009 --> 00:02:42.001
It's where I'm invoking the JAR file again

52
00:02:42.001 --> 00:02:47.005
but this time, I'm using and setting the server dot port

53
00:02:47.005 --> 00:02:55.005
property to 9090 and I'm going to launch that.

54
00:02:55.005 --> 00:02:59.004
So it starts up and once it's done running,

55
00:02:59.004 --> 00:03:02.008
we're going to prove that it's listening on port 9090.

56
00:03:02.008 --> 00:03:09.005
Back in my browser and a new tab.

57
00:03:09.005 --> 00:03:12.003
Local host 9090,

58
00:03:12.003 --> 00:03:14.005
and it's running now on a different port.

59
00:03:14.005 --> 00:03:18.002
So, see how easy it is to run multiple instances

60
00:03:18.002 --> 00:03:20.003
of a web application?

61
00:03:20.003 --> 00:03:24.003
To halt the application, go back to the terminal window

62
00:03:24.003 --> 00:03:26.006
and just hit control-C

63
00:03:26.006 --> 00:03:29.006
to stop it on this one, too,

64
00:03:29.006 --> 00:03:32.004
or you can use your operating system's process controller

65
00:03:32.004 --> 00:03:34.001
to terminate it.

66
00:03:34.001 --> 00:03:37.007
To do this in a classic web archive or a WAR file

67
00:03:37.007 --> 00:03:40.007
requires multiple installations of Tomkat

68
00:03:40.007 --> 00:03:42.005
running on different ports.

69
00:03:42.005 --> 00:03:44.001
This is the beauty of a microservice.

70
00:03:44.001 --> 00:03:46.003
It's completely self-contained

71
00:03:46.003 --> 00:03:50.003
with a runnable single command.

72
00:03:50.003 --> 00:03:52.005
This makes it a favorite with the DevOps

73
00:03:52.005 --> 00:03:54.005
and cloud computing crowds.

74
00:03:54.005 --> 00:03:57.003
Without implementing any of the Explore California

75
00:03:57.003 --> 00:04:01.000
solutions, we can see that the Spring Booth project

76
00:04:01.000 --> 00:04:03.001
is already equipped with the basic plumbing

77
00:04:03.001 --> 00:04:06.000
required by most web applications.

