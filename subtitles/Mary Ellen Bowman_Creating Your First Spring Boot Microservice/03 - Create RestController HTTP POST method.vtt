WEBVTT
1
00:00:01.002 --> 00:00:03.003
- [Instructor] Now let's implement an API

2
00:00:03.003 --> 00:00:05.000
to create a TourRating.

3
00:00:05.000 --> 00:00:07.001
But can all the attributes of a TourRating

4
00:00:07.001 --> 00:00:09.007
be sent in the request body?

5
00:00:09.007 --> 00:00:11.006
Well, let's look at TourRating.

6
00:00:11.006 --> 00:00:14.006
We have a integer score and a string comment,

7
00:00:14.006 --> 00:00:17.009
yeah that's fine sending on a HTTP payload.

8
00:00:17.009 --> 00:00:20.007
Let's look at TourRatingPk.

9
00:00:20.007 --> 00:00:24.003
Ah, so we have a tour, which is a type tour

10
00:00:24.003 --> 00:00:26.006
and a customer ID, which is integer.

11
00:00:26.006 --> 00:00:30.009
Customer ID is fine but I don't think

12
00:00:30.009 --> 00:00:34.000
a client would want to send an entire tour

13
00:00:34.000 --> 00:00:37.001
as part of the request body,

14
00:00:37.001 --> 00:00:40.007
they would likely just use a tour identifier.

15
00:00:40.007 --> 00:00:43.008
So we should create a data transfer object

16
00:00:43.008 --> 00:00:46.003
to encapsulate the request body.

17
00:00:46.003 --> 00:00:50.002
And that's what I've done in RatingDto.

18
00:00:50.002 --> 00:00:53.009
So in this web packet I have RatingDto

19
00:00:53.009 --> 00:00:59.005
and the attributes are score, a comment, and a customer ID.

20
00:00:59.005 --> 00:01:01.008
We don't have a tour ID in here.

21
00:01:01.008 --> 00:01:03.008
And that's because that's going to be

22
00:01:03.008 --> 00:01:06.004
a parameter on the URL.

23
00:01:06.004 --> 00:01:09.002
So we can apply Java validations here.

24
00:01:09.002 --> 00:01:12.004
The minimum score is zero, the maximum score is five.

25
00:01:12.004 --> 00:01:14.003
And then the maximum number of characters

26
00:01:14.003 --> 00:01:17.006
in the comment string is 255.

27
00:01:17.006 --> 00:01:20.001
And the customer ID is not null.

28
00:01:20.001 --> 00:01:23.005
So whenever this RatingDto is passed to the create method

29
00:01:23.005 --> 00:01:27.000
as a request body, Java will do the validation for us.

30
00:01:27.000 --> 00:01:30.001
So let's go into our TourRating controller.

31
00:01:30.001 --> 00:01:32.006
So we need to implement a controller method

32
00:01:32.006 --> 00:01:36.002
and this method will have to validate the request body

33
00:01:36.002 --> 00:01:38.009
as we've talked about and validate the tour ID

34
00:01:38.009 --> 00:01:40.007
by looking up the tour.

35
00:01:40.007 --> 00:01:44.008
So if it does not then return an HTTP status 404,

36
00:01:44.008 --> 00:01:46.007
we have to instantiate a new TourRating,

37
00:01:46.007 --> 00:01:50.007
persist it, and then return a 201 or created status.

38
00:01:50.007 --> 00:01:53.006
Before we implement the method to create a TourRating,

39
00:01:53.006 --> 00:01:58.001
I wanted to point out to you on line 43,

40
00:01:58.001 --> 00:02:01.007
I have verifyTour, which is a helper method.

41
00:02:01.007 --> 00:02:05.000
So given a tourID, it will look up the tour

42
00:02:05.000 --> 00:02:07.005
and if that tour does not exist,

43
00:02:07.005 --> 00:02:10.000
and no such element exception is thrown,

44
00:02:10.000 --> 00:02:12.008
otherwise it returns a tour.

45
00:02:12.008 --> 00:02:17.000
And then we have another helper method on line 56

46
00:02:17.000 --> 00:02:18.005
which is an exception handler,

47
00:02:18.005 --> 00:02:21.009
which will trap any no such element exceptions,

48
00:02:21.009 --> 00:02:24.000
get the string message off the exception

49
00:02:24.000 --> 00:02:27.000
and then return the HTTP status not found,

50
00:02:27.000 --> 00:02:30.005
which is a 404 back to the client.

51
00:02:30.005 --> 00:02:41.002
So let's create our method.

52
00:02:41.002 --> 00:02:43.001
createTourRating is the name of our method

53
00:02:43.001 --> 00:02:47.006
and we need the tourID,

54
00:02:47.006 --> 00:02:52.006
a RatingDto,

55
00:02:52.006 --> 00:02:55.005
and that's it.

56
00:02:55.005 --> 00:02:59.002
Maybe we can give it a little more space here.

57
00:02:59.002 --> 00:03:05.004
Now we want to look up the tour given the tourID.

58
00:03:05.004 --> 00:03:08.007
And we'll use our helper method.

59
00:03:08.007 --> 00:03:11.006
And if the tour wasn't found, an exception will be thrown

60
00:03:11.006 --> 00:03:13.007
so we would not proceed to the next line here.

61
00:03:13.007 --> 00:03:19.009
So now we're going to use tourRatingRepository.save.

62
00:03:19.009 --> 00:03:26.005
And we'll create a new TourRating object.

63
00:03:26.005 --> 00:03:35.001
And that requires a TourRatingPk.

64
00:03:35.001 --> 00:03:42.001
The TourRatingPk requires a tour and a customer ID.

65
00:03:42.001 --> 00:03:51.001
And the customer ID is on the RatingDto.

66
00:03:51.001 --> 00:04:04.006
And then we need to get the score and the comment.

67
00:04:04.006 --> 00:04:07.006
Okay, so that's basic Java going on there,

68
00:04:07.006 --> 00:04:10.000
but we need to add annotations to tell

69
00:04:10.000 --> 00:04:12.008
Spring Web MVC what to do with this method.

70
00:04:12.008 --> 00:04:19.002
So first of all, we're going to say this is a PostMapping

71
00:04:19.002 --> 00:04:34.007
and we're going to return a responseStatus of created.

72
00:04:34.007 --> 00:04:37.002
Now, if you look up here at the top,

73
00:04:37.002 --> 00:04:38.003
we have our request mapping

74
00:04:38.003 --> 00:04:40.006
and then in curly brackets, tourID,

75
00:04:40.006 --> 00:04:44.009
we need to map that into our parameter here.

76
00:04:44.009 --> 00:05:00.000
So that will be PathVariable and Value is tourId.

77
00:05:00.000 --> 00:05:09.001
And then, we want to say our request body is the ratingDto.

78
00:05:09.001 --> 00:05:19.006
And then we also want to apply Java validations to it.

79
00:05:19.006 --> 00:05:27.007
So let's build it.

80
00:05:27.007 --> 00:05:29.009
And then we're going to run this in debug

81
00:05:29.009 --> 00:05:32.001
and I'm going to put a breakpoint

82
00:05:32.001 --> 00:05:37.008
at the beginning of that method.

83
00:05:37.008 --> 00:05:50.005
We need to run this in debug.

84
00:05:50.005 --> 00:05:52.000
Okay, it's up and running.

85
00:05:52.000 --> 00:05:54.001
I have Postman up, and here, I am going

86
00:05:54.001 --> 00:05:56.006
to create a tourRating.

87
00:05:56.006 --> 00:06:00.000
So I need to have a valid tourId in here.

88
00:06:00.000 --> 00:06:08.005
So let's actually look up the tours to find a valid tourId.

89
00:06:08.005 --> 00:06:11.007
So let's see what the big server treat ID is.

90
00:06:11.007 --> 00:06:13.005
It's got an ID of one.

91
00:06:13.005 --> 00:06:19.004
So we'll just put a one in here.

92
00:06:19.004 --> 00:06:23.009
And then, our JSON data is the score is five,

93
00:06:23.009 --> 00:06:26.008
the comment was it was great and customerId is 123

94
00:06:26.008 --> 00:06:29.007
and that will map into our RatingDto.

95
00:06:29.007 --> 00:06:33.003
So let's send that.

96
00:06:33.003 --> 00:06:35.003
And we have a breakpoint here.

97
00:06:35.003 --> 00:06:37.007
We're verifying that there's a tour.

98
00:06:37.007 --> 00:06:41.003
Just that tour exists and then save it.

99
00:06:41.003 --> 00:06:48.002
And back here, we get a response 201 created.

100
00:06:48.002 --> 00:06:49.006
Let's try a couple things to see

101
00:06:49.006 --> 00:06:50.009
if our validation's correct,

102
00:06:50.009 --> 00:06:54.002
let's just create a random tourId which we know

103
00:06:54.002 --> 00:06:56.000
that there's no tour with that ID,

104
00:06:56.000 --> 00:07:00.002
'cause there's only 30 tours.

105
00:07:00.002 --> 00:07:03.003
And we come into our method

106
00:07:03.003 --> 00:07:06.001
and this should draw an exception.

107
00:07:06.001 --> 00:07:08.009
So if I try to step over, we don't even get

108
00:07:08.009 --> 00:07:14.000
to the next thing, yes, it throws an exception, continue.

109
00:07:14.000 --> 00:07:16.003
And the response is 404 Not Found,

110
00:07:16.003 --> 00:07:19.006
thanks to our exception mapper.

111
00:07:19.006 --> 00:07:23.009
And we'll change that back to one.

112
00:07:23.009 --> 00:07:27.000
And let's change this score to 10.

113
00:07:27.000 --> 00:07:30.002
And we know that a 10 is invalid score (mumbles)

114
00:07:30.002 --> 00:07:33.001
so we could check if our validator works.

115
00:07:33.001 --> 00:07:36.009
Oh, and also, we need to make sure that we put

116
00:07:36.009 --> 00:07:42.002
a different customerId here.

117
00:07:42.002 --> 00:07:46.004
And so I hit send and it replied with a 404 Bad Request.

118
00:07:46.004 --> 00:07:48.005
I never hit my breakpoint.

119
00:07:48.005 --> 00:07:51.001
And that's because before I even get to the body

120
00:07:51.001 --> 00:07:52.007
of the method, the validation

121
00:07:52.007 --> 00:07:57.008
happens beforehand automatically.

122
00:07:57.008 --> 00:08:02.000
So now, we have a working API to create TourRatings.

