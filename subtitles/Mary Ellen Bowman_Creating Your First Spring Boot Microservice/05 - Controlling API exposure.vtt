WEBVTT
1
00:00:01.003 --> 00:00:02.004
- [Instructor] Earlier we saw

2
00:00:02.004 --> 00:00:04.006
that you can not only look up entities

3
00:00:04.006 --> 00:00:07.008
but also create, update and delete them

4
00:00:07.008 --> 00:00:11.007
with HTTP POST, PUT, PATCH and DELETE.

5
00:00:11.007 --> 00:00:13.007
But I do not think that we want to allow the public

6
00:00:13.007 --> 00:00:15.007
to modify our database in this way.

7
00:00:15.007 --> 00:00:18.005
There are two annotations to accomplish this.

8
00:00:18.005 --> 00:00:20.008
@RespositoryRestResource

9
00:00:20.008 --> 00:00:23.007
is used to control access at the class level

10
00:00:23.007 --> 00:00:26.004
and @RestResource is used to control access

11
00:00:26.004 --> 00:00:28.000
at the method level.

12
00:00:28.000 --> 00:00:31.004
We can also use @RestRepositoryResource

13
00:00:31.004 --> 00:00:34.002
to overfly the default endpoint name.

14
00:00:34.002 --> 00:00:37.003
In this example, we set TourPackage's endpoint

15
00:00:37.003 --> 00:00:42.000
to a different name which is lowercase p packages.

16
00:00:42.000 --> 00:00:45.007
So let's go to our code and make these changes.

17
00:00:45.007 --> 00:00:48.001
First, we're in TourPackageRepository.

18
00:00:48.001 --> 00:00:51.008
And what I need to do is override any methods provided

19
00:00:51.008 --> 00:00:56.001
by CrudRepository that would modify a TourPackage.

20
00:00:56.001 --> 00:00:58.007
So I'm going to use my IDE to help me generate

21
00:00:58.007 --> 00:01:02.002
and override those methods.

22
00:01:02.002 --> 00:01:05.001
So I'm going to select the save methods.

23
00:01:05.001 --> 00:01:13.004
And the delete methods.

24
00:01:13.004 --> 00:01:16.003
And now, I'm going to annotate them

25
00:01:16.003 --> 00:01:28.006
with RestResource exported equals false.

26
00:01:28.006 --> 00:01:51.003
Okay, now let's do the same in TourRepository.

27
00:01:51.003 --> 00:02:03.002
And restrict their access from the outside world.

28
00:02:03.002 --> 00:02:05.009
Another way to do this is my using Spring security

29
00:02:05.009 --> 00:02:07.008
but that's beyond the scope of this course

30
00:02:07.008 --> 00:02:10.003
so this is just something within Spring Data REST

31
00:02:10.003 --> 00:02:12.007
that you can do this.

32
00:02:12.007 --> 00:02:15.003
Now let's go back to our PackageRepository

33
00:02:15.003 --> 00:02:18.008
and we want to rename the endpoint

34
00:02:18.008 --> 00:02:23.009
from the default that's generated.

35
00:02:23.009 --> 00:02:31.006
So we use the @RepositoryRestResource.

36
00:02:31.006 --> 00:02:41.001
And we set the collectionsResourceRel equal to packages.

37
00:02:41.001 --> 00:02:50.004
And the path equal to packages.

38
00:02:50.004 --> 00:02:53.002
Okay, everything's good there and compiles.

39
00:02:53.002 --> 00:03:02.002
Let's run this.

40
00:03:02.002 --> 00:03:03.007
And the application's started.

41
00:03:03.007 --> 00:03:11.001
Now let's use Postman to do a GET on packages, lowercase p.

42
00:03:11.001 --> 00:03:14.007
And that works like a champ.

43
00:03:14.007 --> 00:03:18.000
Let's drill down into California Calm.

44
00:03:18.000 --> 00:03:20.000
You notice even the embedded href links

45
00:03:20.000 --> 00:03:24.008
have the package's name.

46
00:03:24.008 --> 00:03:30.007
Make sure we can do a GET on California Calm with packages

47
00:03:30.007 --> 00:03:40.003
and now let's test out trying to delete California Calm.

48
00:03:40.003 --> 00:03:42.005
I will make one little side note

49
00:03:42.005 --> 00:03:44.003
that you couldn't do this anyway

50
00:03:44.003 --> 00:03:46.001
because of referential integrity error

51
00:03:46.001 --> 00:03:49.009
but we want to have a better status code returned here

52
00:03:49.009 --> 00:03:55.005
than a data conflict.

53
00:03:55.005 --> 00:03:57.006
So we have a security code response

54
00:03:57.006 --> 00:03:59.009
that's Method Not Allowed

55
00:03:59.009 --> 00:04:01.000
which is what we wanted.

