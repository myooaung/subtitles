WEBVTT
1
00:00:00.006 --> 00:00:03.001
- [Instructor] Another cool built in feature of both

2
00:00:03.001 --> 00:00:07.002
Spring Data JPA and Spring Data REST is the ease of adding

3
00:00:07.002 --> 00:00:12.001
paging and sorting to a repository and an API.

4
00:00:12.001 --> 00:00:15.004
We add paging and sorting to the tours API by extending

5
00:00:15.004 --> 00:00:20.002
the tour repository from paging and sorting repository.

6
00:00:20.002 --> 00:00:23.003
So on the URL, these are the parameters you would use

7
00:00:23.003 --> 00:00:25.000
for paging and sorting.

8
00:00:25.000 --> 00:00:27.000
There is a size parameter, which takes the size of

9
00:00:27.000 --> 00:00:29.004
the page that you want to retrieve.

10
00:00:29.004 --> 00:00:33.003
The default of that is 20 if you don't provide it.

11
00:00:33.003 --> 00:00:36.001
The page parameter is the page number you want to fetch

12
00:00:36.001 --> 00:00:39.007
so that there are several pages, which one do you want,

13
00:00:39.007 --> 00:00:42.006
where zero is the first, and the default,

14
00:00:42.006 --> 00:00:45.001
if you don't provide it, is zero.

15
00:00:45.001 --> 00:00:48.001
Sort is the order of your search results.

16
00:00:48.001 --> 00:00:50.006
By default, if you do not provide the sort parameter,

17
00:00:50.006 --> 00:00:53.001
it will sort by the entity ID.

18
00:00:53.001 --> 00:00:55.004
And if you want to give a direction of your sort,

19
00:00:55.004 --> 00:00:58.008
you can optionally put in A-S-C for ascending

20
00:00:58.008 --> 00:01:02.001
or D-E-S-C for descending.

21
00:01:02.001 --> 00:01:05.008
So let's modify the tour repository.

22
00:01:05.008 --> 00:01:08.003
So instead of us going from crowd repository,

23
00:01:08.003 --> 00:01:12.003
we're going to say paging and sorting repository.

24
00:01:12.003 --> 00:01:17.005
And if you wanted to add paging to a particular method,

25
00:01:17.005 --> 00:01:23.006
you return a page, in this case a page of tours

26
00:01:23.006 --> 00:01:31.003
and then add an extra parameter of type Pageable.

27
00:01:31.003 --> 00:01:46.002
Okay, so let's run that.

28
00:01:46.002 --> 00:01:47.003
Okay, it's started.

29
00:01:47.003 --> 00:01:49.009
Let's go to post man.

30
00:01:49.009 --> 00:01:52.009
And now we're going to invoke the tours API,

31
00:01:52.009 --> 00:01:54.007
but with the paging and sorting parameters.

32
00:01:54.007 --> 00:02:01.002
So the tours endpoint is up and we're going to add

33
00:02:01.002 --> 00:02:07.003
size equals three.

34
00:02:07.003 --> 00:02:10.004
So will give us the pages that are of three elements,

35
00:02:10.004 --> 00:02:14.006
three tours, and the page we want is the second page

36
00:02:14.006 --> 00:02:18.003
which we would identify as page one.

37
00:02:18.003 --> 00:02:25.006
And sort is by the title attribute.

38
00:02:25.006 --> 00:02:30.002
And we do ASC for ascending, which will be sorted

39
00:02:30.002 --> 00:02:37.001
in alphabetical order of the title.

40
00:02:37.001 --> 00:02:39.005
So let's see what we got here we have three tours,

41
00:02:39.005 --> 00:02:43.000
the first Avila,

42
00:02:43.000 --> 00:02:45.008
second Big Sur Retreat,

43
00:02:45.008 --> 00:02:50.005
and the third is Channel Island Excursions.

44
00:02:50.005 --> 00:02:53.007
Now let's try that again, but with our tour

45
00:02:53.007 --> 00:03:17.001
package code search.

46
00:03:17.001 --> 00:03:21.001
We're going to search for those tours that

47
00:03:21.001 --> 00:03:24.006
are in California calm.

48
00:03:24.006 --> 00:03:29.004
And we're going to have the size equal to two.

49
00:03:29.004 --> 00:03:34.006
And we're not going to select the page and we're going

50
00:03:34.006 --> 00:03:44.000
to sort by the title ascending again.

51
00:03:44.000 --> 00:03:48.009
So we have Day Spa package

52
00:03:48.009 --> 00:03:54.000
and Huntington library.

53
00:03:54.000 --> 00:03:56.006
Even more cool is that the response contains

54
00:03:56.006 --> 00:04:00.004
hyperlink keys for navigating between pages.

55
00:04:00.004 --> 00:04:08.004
The response contains a trace called first, last, and next.

56
00:04:08.004 --> 00:04:12.004
Front end developers love this by using these HRF's

57
00:04:12.004 --> 00:04:15.001
they don't have to calculate the last page number

58
00:04:15.001 --> 00:04:18.003
or have to keep the state of the current page, they just use

59
00:04:18.003 --> 00:04:21.008
these labels to reference the links.

60
00:04:21.008 --> 00:04:25.004
We also see at the bottom is some metadata.

61
00:04:25.004 --> 00:04:28.003
If the client chooses not to use those links, the API

62
00:04:28.003 --> 00:04:31.007
also provides more page metadata at the bottom

63
00:04:31.007 --> 00:04:33.001
of the response packet.

64
00:04:33.001 --> 00:04:35.001
So they can just calculate it themselves

65
00:04:35.001 --> 00:04:38.000
on the client side, if they want to.

