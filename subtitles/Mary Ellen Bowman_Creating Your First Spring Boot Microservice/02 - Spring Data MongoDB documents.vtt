WEBVTT
1
00:00:01.001 --> 00:00:02.005
- [Instructor] Now we're going to see

2
00:00:02.005 --> 00:00:05.004
how our domain objects have changed.

3
00:00:05.004 --> 00:00:09.000
We're using MyId to compare two different branches.

4
00:00:09.000 --> 00:00:13.002
One is the five.N branch, which is the result of migrating

5
00:00:13.002 --> 00:00:17.003
to MongoDB and I'm comparing it to five-begin.

6
00:00:17.003 --> 00:00:19.005
So within the domain package,

7
00:00:19.005 --> 00:00:20.009
we see these files have changed.

8
00:00:20.009 --> 00:00:24.005
Let's dig into the TourPackage.java

9
00:00:24.005 --> 00:00:28.001
and we see that, in gray, things have been removed.

10
00:00:28.001 --> 00:00:30.002
In green, it's new.

11
00:00:30.002 --> 00:00:32.001
We don't use @Entity anymore.

12
00:00:32.001 --> 00:00:34.004
Now we use @Document.

13
00:00:34.004 --> 00:00:36.002
We continue to use @Id,

14
00:00:36.002 --> 00:00:40.007
but now it's using the springframework.data.annotation.Id

15
00:00:40.007 --> 00:00:44.006
instead of javax.persistence.Id.

16
00:00:44.006 --> 00:00:48.005
And we no longer use @Column on the name

17
00:00:48.005 --> 00:00:54.001
because there's no such thing as a column in MongoDB.

18
00:00:54.001 --> 00:00:58.009
Next, let's look at a Tour.

19
00:00:58.009 --> 00:01:01.003
It's a little more complicated here.

20
00:01:01.003 --> 00:01:06.002
So, again, we use @Entity no more.

21
00:01:06.002 --> 00:01:09.008
We now use @Document.

22
00:01:09.008 --> 00:01:15.007
Our @Id is for this ID attribute.

23
00:01:15.007 --> 00:01:18.000
And we don't need @Generated

24
00:01:18.000 --> 00:01:20.000
and we have changed the type of the ID

25
00:01:20.000 --> 00:01:21.008
to a string instead of an integer

26
00:01:21.008 --> 00:01:26.003
because MongoDB cannot generate integers for an ID.

27
00:01:26.003 --> 00:01:28.009
It only generates long strings.

28
00:01:28.009 --> 00:01:31.007
And then for the next attribute, title,

29
00:01:31.007 --> 00:01:34.005
we remove that column and have it at index,

30
00:01:34.005 --> 00:01:36.004
meaning whenever we do searches,

31
00:01:36.004 --> 00:01:40.005
it's going to be faster whenever we do a search by title.

32
00:01:40.005 --> 00:01:43.006
We remove these attributes description, blurb,

33
00:01:43.006 --> 00:01:45.005
price, and duration.

34
00:01:45.005 --> 00:01:50.007
We've added tourPackageCode and index that

35
00:01:50.007 --> 00:01:53.000
and tourPackageName.

36
00:01:53.000 --> 00:01:57.002
This is because we are removing the tourPackage attribute,

37
00:01:57.002 --> 00:02:02.000
which, in JPA, it was one table referencing another table

38
00:02:02.000 --> 00:02:03.001
we use in JPA.

39
00:02:03.001 --> 00:02:04.000
That's not happening here,

40
00:02:04.000 --> 00:02:06.006
so we're actually going to embed these attributes.

41
00:02:06.006 --> 00:02:08.001
Of course there's going to be duplication,

42
00:02:08.001 --> 00:02:11.007
but that's a given for NoSQL databases.

43
00:02:11.007 --> 00:02:13.006
It's just part of life.

44
00:02:13.006 --> 00:02:16.003
And so then we remove this keyword attribute

45
00:02:16.003 --> 00:02:17.008
and now we have a new attribute,

46
00:02:17.008 --> 00:02:21.003
which is a map of string to string, which is details,

47
00:02:21.003 --> 00:02:24.005
which is for an attribute, for example, description,

48
00:02:24.005 --> 00:02:27.009
and then you have the actual text description, blurb, tag.

49
00:02:27.009 --> 00:02:29.008
So any of these attributes before

50
00:02:29.008 --> 00:02:31.008
that we called out individually,

51
00:02:31.008 --> 00:02:36.001
like difficulty, and region, and description, blurb, price,

52
00:02:36.001 --> 00:02:39.001
they're now B key-value pairs in this details,

53
00:02:39.001 --> 00:02:41.008
because they could change.

54
00:02:41.008 --> 00:02:43.005
So of course our constructor has changed.

55
00:02:43.005 --> 00:02:44.009
We're only passing in the title.

56
00:02:44.009 --> 00:02:48.000
A tourPackage attribute will be mapped

57
00:02:48.000 --> 00:02:54.003
to the getCode and getName and then our details.

58
00:02:54.003 --> 00:03:00.009
And then all of our getters and setters will change.

59
00:03:00.009 --> 00:03:05.001
Now because of this change is

60
00:03:05.001 --> 00:03:11.008
the difficulty enumeration has been completely deleted

61
00:03:11.008 --> 00:03:16.004
and the region enumeration is now not useful.

62
00:03:16.004 --> 00:03:17.008
We remove that.

63
00:03:17.008 --> 00:03:21.007
Now let's go into TourRating.

64
00:03:21.007 --> 00:03:24.004
Now, some of the things that changed for TourRating

65
00:03:24.004 --> 00:03:30.002
have to do with the tour now having a string ID,

66
00:03:30.002 --> 00:03:34.004
and we can't do this embedded attributes

67
00:03:34.004 --> 00:03:37.000
to represent a key anymore.

68
00:03:37.000 --> 00:03:42.002
So the TourRatingPk had a tour and a customer ID,

69
00:03:42.002 --> 00:03:45.000
and there, again, we're crossing into a table notion.

70
00:03:45.000 --> 00:03:49.003
We're not doing that anymore, so we, for this object,

71
00:03:49.003 --> 00:03:53.001
we have Spring Data Mongo generate this ID,

72
00:03:53.001 --> 00:03:55.009
so we actually hard code, quote hard code,

73
00:03:55.009 --> 00:04:00.000
we put in the tourId here instead of in the Pk,

74
00:04:00.000 --> 00:04:03.004
and then the customerId, and then, as we had before,

75
00:04:03.004 --> 00:04:06.000
we had the score and the comment.

76
00:04:06.000 --> 00:04:08.002
Something new that you're noticing here is

77
00:04:08.002 --> 00:04:11.007
the validation parameters on the comment

78
00:04:11.007 --> 00:04:15.004
and the score and the customerId are new,

79
00:04:15.004 --> 00:04:17.008
and that's because we no longer need

80
00:04:17.008 --> 00:04:20.005
the TourRating DTO in the controller,

81
00:04:20.005 --> 00:04:23.004
because this object is now simple.

82
00:04:23.004 --> 00:04:28.001
We can actually use this TourRating in our rest controller

83
00:04:28.001 --> 00:04:32.000
when submitting and responding with TourRating information.

