WEBVTT
1
00:00:01.001 --> 00:00:05.006
- So now, let's inject the repositories into services.

2
00:00:05.006 --> 00:00:09.006
In the exercise files there is a new service folder

3
00:00:09.006 --> 00:00:12.008
and within that service folder there are two classes;

4
00:00:12.008 --> 00:00:16.002
TourPackageService and TourService,

5
00:00:16.002 --> 00:00:18.001
so let's look at TourPackageService.

6
00:00:18.001 --> 00:00:22.003
In here we have inject, the repository and then auto-wire

7
00:00:22.003 --> 00:00:25.004
to the constructor and we have three methods here.

8
00:00:25.004 --> 00:00:29.003
One is to create a TourPackage, one is to look up all

9
00:00:29.003 --> 00:00:32.004
of the TourPackages, and the final one is to get

10
00:00:32.004 --> 00:00:35.003
the total number of TourPackages.

11
00:00:35.003 --> 00:00:37.003
And the methods are stubbed out so we're actually going to

12
00:00:37.003 --> 00:00:40.005
put the implementation of them right now.

13
00:00:40.005 --> 00:00:46.000
So, we don't want to create a TourPackage for a given code

14
00:00:46.000 --> 00:00:48.005
or name if that already exists.

15
00:00:48.005 --> 00:00:52.002
So first we're going to look it up by the ID

16
00:00:52.002 --> 00:00:54.007
which is the code, and if it does not find it

17
00:00:54.007 --> 00:00:55.009
then we're going to create it

18
00:00:55.009 --> 00:00:57.006
and return the newly created one.

19
00:00:57.006 --> 00:01:00.001
If it does find it then we'll just return what's already

20
00:01:00.001 --> 00:01:02.000
exist in the database.

21
00:01:02.000 --> 00:01:09.005
So I'm going to make a change here.

22
00:01:09.005 --> 00:01:16.006
I'm going to invoke the tourPackageRepository.

23
00:01:16.006 --> 00:01:20.000
I'm going to do a findByID which returns an optional,

24
00:01:20.000 --> 00:01:26.000
fasten the code,

25
00:01:26.000 --> 00:01:29.009
and then I'm going to do an orElse

26
00:01:29.009 --> 00:01:32.008
which means it did not find it so we're going to create

27
00:01:32.008 --> 00:01:38.005
a new one and I'm going to invoke tourPackageRepository again

28
00:01:38.005 --> 00:01:47.005
to save a new one.

29
00:01:47.005 --> 00:01:48.003
Okay?

30
00:01:48.003 --> 00:01:51.003
So then the next method we want to do is look up all

31
00:01:51.003 --> 00:01:54.009
the TourPackages, so this is just a findAll method

32
00:01:54.009 --> 00:02:03.006
on tourPackageRepository.

33
00:02:03.006 --> 00:02:06.005
So that just returns all of them in the database.

34
00:02:06.005 --> 00:02:11.005
And finally we want to get a count.

35
00:02:11.005 --> 00:02:15.008
All right, now lets move on to our TourService.

36
00:02:15.008 --> 00:02:19.009
Here we've injected tourRepository into the TourService

37
00:02:19.009 --> 00:02:22.009
as well as tourPackageRepository, auto wire them

38
00:02:22.009 --> 00:02:27.004
in the constructor, and we have a method to create a tour

39
00:02:27.004 --> 00:02:31.001
and we have a method to get the total number of tours.

40
00:02:31.001 --> 00:02:33.008
So lets implement the code for this.

41
00:02:33.008 --> 00:02:35.008
So first of all before we create a tour

42
00:02:35.008 --> 00:02:38.008
we need a tourPackage for it and we have the tourPackageName

43
00:02:38.008 --> 00:02:43.005
passed in, we're going to look up the tourPackage and find it

44
00:02:43.005 --> 00:02:55.003
and then pass it in to the constructor of the tour.

45
00:02:55.003 --> 00:02:59.008
So here we are looking up the tourPackage

46
00:02:59.008 --> 00:03:03.007
and if we can't find it then we do not want to create a tour

47
00:03:03.007 --> 00:03:13.009
so we're going to do an orElseThrow,

48
00:03:13.009 --> 00:03:20.002
and then throw a RunTimeException.

49
00:03:20.002 --> 00:03:34.001
Tour package does not exist.

50
00:03:34.001 --> 00:03:36.003
So if it does find it we do get the tourPackage

51
00:03:36.003 --> 00:03:41.005
back here on line 42 and now we're going to actually

52
00:03:41.005 --> 00:03:55.004
create a tour in the database.

53
00:03:55.004 --> 00:03:57.002
All right.

54
00:03:57.002 --> 00:04:08.005
And now we're going to return the total number of tours.

55
00:04:08.005 --> 00:04:12.004
All right, we're done injecting our repositories

56
00:04:12.004 --> 00:04:13.008
into the services.

57
00:04:13.008 --> 00:04:16.009
You might ask, when do we actually implement

58
00:04:16.009 --> 00:04:19.002
the repository interfaces?

59
00:04:19.002 --> 00:04:23.008
Well, we don't cause Spring Data does it for us.

60
00:04:23.008 --> 00:04:28.001
So, it will actually be a Spring Data object injected

61
00:04:28.001 --> 00:04:33.002
into the services and that object will fulfill the contracts

62
00:04:33.002 --> 00:04:36.000
of our repository interfaces.

