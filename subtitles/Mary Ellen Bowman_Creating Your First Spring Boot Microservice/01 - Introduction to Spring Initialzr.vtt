WEBVTT
1
00:00:01.001 --> 00:00:02.006
- [Instructor] In this chapter we will see

2
00:00:02.006 --> 00:00:04.008
how to create a Spring Boot microservice

3
00:00:04.008 --> 00:00:06.008
with Spring Initializr.

4
00:00:06.008 --> 00:00:08.007
To build a Java application,

5
00:00:08.007 --> 00:00:11.004
the first step is to create a Java project.

6
00:00:11.004 --> 00:00:13.002
Most Java projects rely on

7
00:00:13.002 --> 00:00:15.008
a third party archive dependencies

8
00:00:15.008 --> 00:00:18.000
and these third party archives usually have

9
00:00:18.000 --> 00:00:19.007
dependencies of their own.

10
00:00:19.007 --> 00:00:22.000
On top of that, each version of the dependencies

11
00:00:22.000 --> 00:00:24.000
rely on other versions.

12
00:00:24.000 --> 00:00:26.005
Managing all these dependencies is a nightmare

13
00:00:26.005 --> 00:00:30.000
that Java developers have nicknamed JAR hell.

14
00:00:30.000 --> 00:00:32.007
To avoid JAR hell we use dependency management systems

15
00:00:32.007 --> 00:00:34.005
like Maven or Gradle,

16
00:00:34.005 --> 00:00:37.008
but even with Maven and Gradle versioning between

17
00:00:37.008 --> 00:00:40.008
individual .jar files can be a nuisance.

18
00:00:40.008 --> 00:00:43.009
Spring Boot recognizes this and created the notion

19
00:00:43.009 --> 00:00:45.007
of a Spring Boot starter,

20
00:00:45.007 --> 00:00:48.006
which bundles several dependencies into a grouping

21
00:00:48.006 --> 00:00:50.002
that is easier to manage.

22
00:00:50.002 --> 00:00:52.006
There is a lot, and I mean a lot,

23
00:00:52.006 --> 00:00:54.001
of Spring Boot starter dependencies,

24
00:00:54.001 --> 00:00:56.004
so even cobbling together a project on your own

25
00:00:56.004 --> 00:00:58.000
can be difficult.

26
00:00:58.000 --> 00:01:00.008
This is where Spring Initializr comes to the rescue.

27
00:01:00.008 --> 00:01:03.002
Spring Initializr is a tool for creating

28
00:01:03.002 --> 00:01:05.003
Spring Boot Java projects by answering

29
00:01:05.003 --> 00:01:08.001
a series of questions and selecting checkboxes

30
00:01:08.001 --> 00:01:11.000
to choose which features to include.

31
00:01:11.000 --> 00:01:13.000
Initializr creates a package structure,

32
00:01:13.000 --> 00:01:18.001
the pom.xml for Maven or build.gradle for Gradle files,

33
00:01:18.001 --> 00:01:21.002
and any required Java source classes.

34
00:01:21.002 --> 00:01:23.008
For our first Spring Boot RESTful microservice,

35
00:01:23.008 --> 00:01:27.000
we will employ four Spring Boot starters.

36
00:01:27.000 --> 00:01:30.004
Web, which includes Tomcat and Spring MVC,

37
00:01:30.004 --> 00:01:33.009
rest repositories to expose Spring Data repositories

38
00:01:33.009 --> 00:01:37.005
over REST, Java Persistence API,

39
00:01:37.005 --> 00:01:41.005
and the H2 in memory database driver.

40
00:01:41.005 --> 00:01:43.005
To simplify configuration of our first

41
00:01:43.005 --> 00:01:45.002
Spring Boot application,

42
00:01:45.002 --> 00:01:48.002
we will use an in memory database H2.

43
00:01:48.002 --> 00:01:50.002
After answering all the questions

44
00:01:50.002 --> 00:01:52.000
and selecting the desired dependencies,

45
00:01:52.000 --> 00:01:55.000
Spring Initializr generates the project.

