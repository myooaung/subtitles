WEBVTT
1
00:00:01.000 --> 00:00:03.002
- [Instructor] One last topic I'd like to cover

2
00:00:03.002 --> 00:00:05.002
is how to add paging and sorting

3
00:00:05.002 --> 00:00:08.003
to a DTO-based API.

4
00:00:08.003 --> 00:00:09.005
The first thing we're going to do

5
00:00:09.005 --> 00:00:12.005
is add a new method to TourRatingRepository.

6
00:00:12.005 --> 00:00:16.000
That will return a page of tour ratings.

7
00:00:16.000 --> 00:00:17.001
So at the bottom of this,

8
00:00:17.001 --> 00:00:21.004
we're going to say

9
00:00:21.004 --> 00:00:29.004
Page of TourRatings

10
00:00:29.004 --> 00:00:35.009
findByPkTourId and we're going to overload that not

11
00:00:35.009 --> 00:00:42.000
just with the tourId

12
00:00:42.000 --> 00:00:49.003
but we're also going to have the Pageable

13
00:00:49.003 --> 00:00:52.002
parameter passed in.

14
00:00:52.002 --> 00:00:55.009
And then back in our TourRatingController,

15
00:00:55.009 --> 00:00:59.001
so we're going to take the existing get method

16
00:00:59.001 --> 00:01:01.000
for get All Tour Ratings for a tour

17
00:01:01.000 --> 00:01:04.007
and have that return a page of data.

18
00:01:04.007 --> 00:01:07.002
So we'll have the return as a Page

19
00:01:07.002 --> 00:01:15.002
of RatingDtos, not TourRatings.

20
00:01:15.002 --> 00:01:27.004
And then we pass in Pagable.

21
00:01:27.004 --> 00:01:30.007
And we're still going to verify the tourId

22
00:01:30.007 --> 00:01:41.003
but this code is going to change.

23
00:01:41.003 --> 00:01:45.003
So what we have here now starting on line 69

24
00:01:45.003 --> 00:01:46.002
is we're going

25
00:01:46.002 --> 00:01:51.000
to invoke the TourRatingRepository findByPkTourId

26
00:01:51.000 --> 00:01:54.009
where we pass in the tourId and the Pagable object

27
00:01:54.009 --> 00:01:59.004
that is in the parameter of the API

28
00:01:59.004 --> 00:02:02.002
and we're going to return a new PageImpl

29
00:02:02.002 --> 00:02:06.005
and the parameters of a PageImpl is a list of data,

30
00:02:06.005 --> 00:02:08.000
then the Pageable object

31
00:02:08.000 --> 00:02:11.000
and then the total number of elements

32
00:02:11.000 --> 00:02:13.001
in the system.

33
00:02:13.001 --> 00:02:18.007
So we're going to look up the ratings

34
00:02:18.007 --> 00:02:20.000
which we have.

35
00:02:20.000 --> 00:02:24.000
We're going to iterate through the list of tour ratings

36
00:02:24.000 --> 00:02:26.005
for that particular page that was requested,

37
00:02:26.005 --> 00:02:28.009
map them to a new RatingDto

38
00:02:28.009 --> 00:02:30.002
and collect them to a list

39
00:02:30.002 --> 00:02:31.006
so now that's the first parameter

40
00:02:31.006 --> 00:02:35.008
is a list of TourRatingDtos.

41
00:02:35.008 --> 00:02:37.009
Passing along the pageable object

42
00:02:37.009 --> 00:02:42.000
and then from the ratings object,

43
00:02:42.000 --> 00:02:43.008
there is a getTotalElements

44
00:02:43.008 --> 00:02:46.003
and that's the total elements in the system,

45
00:02:46.003 --> 00:02:51.001
now just the page.

46
00:02:51.001 --> 00:03:01.000
So let's run it.

47
00:03:01.000 --> 00:03:03.000
And it's running.

48
00:03:03.000 --> 00:03:04.004
So let's go to Postman

49
00:03:04.004 --> 00:03:08.001
and we see

50
00:03:08.001 --> 00:03:11.006
that we have already up here a post of ratings.

51
00:03:11.006 --> 00:03:17.004
We're just going to create now a bunch of tour ratings.

52
00:03:17.004 --> 00:03:20.000
So let's create it, so let's do several of these.

53
00:03:20.000 --> 00:03:21.006
One got a score of one.

54
00:03:21.006 --> 00:03:27.005
Let's say a score of two from customer two.

55
00:03:27.005 --> 00:03:37.001
Customer three also gave a score.

56
00:03:37.001 --> 00:03:39.003
Customer four gave a score of three

57
00:03:39.003 --> 00:03:43.006
and so did customer five.

58
00:03:43.006 --> 00:03:50.008
And then a score of four from customer six.

59
00:03:50.008 --> 00:03:56.008
And then a score of five from customer seven.

60
00:03:56.008 --> 00:03:58.006
And they all said no comment.

61
00:03:58.006 --> 00:04:02.005
So now we're going to call the GET for the page.

62
00:04:02.005 --> 00:04:04.007
So now we have these new attributes on here.

63
00:04:04.007 --> 00:04:08.004
I'm back in the Spring Data REST chapter.

64
00:04:08.004 --> 00:04:11.009
It describes how these parameters are used

65
00:04:11.009 --> 00:04:14.003
and mapped into the system.

66
00:04:14.003 --> 00:04:15.006
So we're going to get the ratings,

67
00:04:15.006 --> 00:04:17.003
the size of the page is two.

68
00:04:17.003 --> 00:04:22.005
We're going to get page ID one which'll be the second page

69
00:04:22.005 --> 00:04:30.004
and then we'll going to sort by the score descending.

70
00:04:30.004 --> 00:04:34.004
And there's our page of data.

71
00:04:34.004 --> 00:04:38.006
At the bottom of the response body

72
00:04:38.006 --> 00:04:41.001
is metadata for the client to use

73
00:04:41.001 --> 00:04:43.009
when navigating through the pages.

74
00:04:43.009 --> 00:04:45.009
Unlike Spring Data REST,

75
00:04:45.009 --> 00:04:47.005
REST controller APIs

76
00:04:47.005 --> 00:04:50.006
do not automatically generate hypermedia links.

77
00:04:50.006 --> 00:04:53.002
You have to code it yourself.

78
00:04:53.002 --> 00:04:56.004
You can learn how to implement that in my course

79
00:04:56.004 --> 00:04:57.008
Extending, Securing

80
00:04:57.008 --> 00:05:01.000
and Dockerizing Spring Boot Microservices.

