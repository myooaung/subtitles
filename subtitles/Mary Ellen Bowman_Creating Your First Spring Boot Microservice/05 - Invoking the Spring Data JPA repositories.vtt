WEBVTT
1
00:00:01.000 --> 00:00:02.009
- [Instructor] We need to load the database

2
00:00:02.009 --> 00:00:03.009
with the collection

3
00:00:03.009 --> 00:00:06.009
of predefined tours and tour packages.

4
00:00:06.009 --> 00:00:10.006
Our application uses an in memory H2 database.

5
00:00:10.006 --> 00:00:13.000
Therefore we need to load the data each time

6
00:00:13.000 --> 00:00:14.009
the application starts.

7
00:00:14.009 --> 00:00:17.009
So now we have services to create the tours

8
00:00:17.009 --> 00:00:20.009
and into our tour packages.

9
00:00:20.009 --> 00:00:25.004
But how should we invoke them before the Tomcat starts up?

10
00:00:25.004 --> 00:00:28.000
Remember explorecali application class?

11
00:00:28.000 --> 00:00:29.007
in that class we have access to

12
00:00:29.007 --> 00:00:31.008
the application starting point.

13
00:00:31.008 --> 00:00:35.000
So I already have auto wired tour package service

14
00:00:35.000 --> 00:00:41.009
and tour service in Explore Cali Application.

15
00:00:41.009 --> 00:00:43.009
And there's also a method that says

16
00:00:43.009 --> 00:00:47.000
"load tours that startup," and what that will do

17
00:00:47.000 --> 00:00:51.007
is create the tour packages and create the tours.

18
00:00:51.007 --> 00:00:54.003
And after each one of those I'm going to call

19
00:00:54.003 --> 00:00:56.005
the service to say what are the total number of packages

20
00:00:56.005 --> 00:00:59.000
and what are the total number of tours.

21
00:00:59.000 --> 00:01:02.001
The main method does not have access to the services

22
00:01:02.001 --> 00:01:05.000
because it's static and its class scope,

23
00:01:05.000 --> 00:01:06.008
not object scope.

24
00:01:06.008 --> 00:01:10.004
But what we can do is have Explore Cali application

25
00:01:10.004 --> 00:01:20.008
implement the Spring Boot command line runner interface.

26
00:01:20.008 --> 00:01:22.004
Now to fully implement that interface,

27
00:01:22.004 --> 00:01:33.004
we have to implement the run method.

28
00:01:33.004 --> 00:01:35.007
After the application has successfully launched,

29
00:01:35.007 --> 00:01:38.002
but before it begins accepting web request,

30
00:01:38.002 --> 00:01:41.009
Spring Boot invokes the Explorer Cali application dot

31
00:01:41.009 --> 00:01:45.008
run method and passes in any command line arguments.

32
00:01:45.008 --> 00:01:48.000
We don't have any of those arguments.

33
00:01:48.000 --> 00:01:49.007
But we do want to set up the database

34
00:01:49.007 --> 00:01:52.005
before permitting web requests.

35
00:01:52.005 --> 00:01:55.000
Since the run method is at object scope,

36
00:01:55.000 --> 00:01:57.009
we can access the injected services.

37
00:01:57.009 --> 00:02:00.003
So what I'm actually going to do is take the body of the load

38
00:02:00.003 --> 00:02:06.003
towards its startup and make it the body of the run method.

39
00:02:06.003 --> 00:02:10.000
So let's look at the Create tour packages method.

40
00:02:10.000 --> 00:02:14.004
This is just hard coding, the tour packages with the code

41
00:02:14.004 --> 00:02:19.001
and then the name of the tour package.

42
00:02:19.001 --> 00:02:22.004
Now let's see how we create the tours.

43
00:02:22.004 --> 00:02:25.003
We need to create all the known tours.

44
00:02:25.003 --> 00:02:28.005
The Explorer Cali travel agency provided us

45
00:02:28.005 --> 00:02:31.002
with a dot JSON file that represents

46
00:02:31.002 --> 00:02:33.001
all the possible tours.

47
00:02:33.001 --> 00:02:36.002
And it's in the main explore Cali folder.

48
00:02:36.002 --> 00:02:39.005
It's called explore California dot JSON.

49
00:02:39.005 --> 00:02:42.005
So here are all the records in JSON format.

50
00:02:42.005 --> 00:02:44.009
Some of the fields map directly to the fields

51
00:02:44.009 --> 00:02:48.004
in the tour entity like title, description and blurb.

52
00:02:48.004 --> 00:02:53.001
However, fields like price, tour package, difficulty,

53
00:02:53.001 --> 00:02:56.006
region, those all require conversion

54
00:02:56.006 --> 00:03:00.003
and in explore Cali Application,

55
00:03:00.003 --> 00:03:06.004
i have a helper class called tours from file.

56
00:03:06.004 --> 00:03:10.007
The tour from file attributes map directly to the JSON data.

57
00:03:10.007 --> 00:03:13.009
And the read method is there to open the file,

58
00:03:13.009 --> 00:03:17.004
import the JSON records as a tour from file object

59
00:03:17.004 --> 00:03:20.006
and returns the objects as a list.

60
00:03:20.006 --> 00:03:22.007
So by calling the read method,

61
00:03:22.007 --> 00:03:26.006
it returns a list of tour from file objects,

62
00:03:26.006 --> 00:03:32.009
which then are converted into tour entities.

63
00:03:32.009 --> 00:03:34.006
So back in our run method,

64
00:03:34.006 --> 00:03:37.006
I have a breakpoint at the beginning of the run

65
00:03:37.006 --> 00:03:42.000
and the breakpoint at the beginning of the main method.

66
00:03:42.000 --> 00:03:47.001
So I'm actually going to run this in debug in my IDE.

67
00:03:47.001 --> 00:03:48.006
And I want to show you what happens

68
00:03:48.006 --> 00:03:52.002
whenever we run this code as it is.

69
00:03:52.002 --> 00:03:56.001
It starting up immediately it hits that main break point,

70
00:03:56.001 --> 00:03:59.003
we'll keep going look at the Console,

71
00:03:59.003 --> 00:04:02.002
as Spring Boot starts up with prints a lot of messages

72
00:04:02.002 --> 00:04:07.007
cause there's a lot going on when Spring Boot ignites

73
00:04:07.007 --> 00:04:13.000
starting the Tomcat service,

74
00:04:13.000 --> 00:04:16.009
and Tomcat started on port 8080.

75
00:04:16.009 --> 00:04:20.005
And here we are at our break point for create tours,

76
00:04:20.005 --> 00:04:23.006
I'm going to step over that method.

77
00:04:23.006 --> 00:04:28.002
And then verify that the number of packages was created.

78
00:04:28.002 --> 00:04:31.003
There was 99 packages, that's great.

79
00:04:31.003 --> 00:04:33.009
Now I'm going to step over the Create tours method.

80
00:04:33.009 --> 00:04:35.007
And it's going to read in the

81
00:04:35.007 --> 00:04:39.006
Explore California dot JSON file.

82
00:04:39.006 --> 00:04:41.003
And I hit a breakpoint in my service.

83
00:04:41.003 --> 00:04:44.005
Let's just keep going.

84
00:04:44.005 --> 00:04:51.004
And we look at our console window and something happened.

85
00:04:51.004 --> 00:04:55.001
There, let's look through the stack here.

86
00:04:55.001 --> 00:05:01.001
We have a exception thrown into our service.

87
00:05:01.001 --> 00:05:04.004
See if we can see what's going on here.

88
00:05:04.004 --> 00:05:08.003
So in the tour service, we have the runtime exception

89
00:05:08.003 --> 00:05:12.001
thrown, it says, "tour package does not exist."

90
00:05:12.001 --> 00:05:16.001
And the name of the tour package is backpack Cali.

91
00:05:16.001 --> 00:05:19.000
Let's take a look at the code here,

92
00:05:19.000 --> 00:05:23.001
where we create and look up the tour package.

93
00:05:23.001 --> 00:05:25.001
Take a moment to see if you can figure out

94
00:05:25.001 --> 00:05:29.008
why this exception is being thrown.

95
00:05:29.008 --> 00:05:32.007
Did you find it?

96
00:05:32.007 --> 00:05:39.006
In create tour, we look up the tour package by the ID.

97
00:05:39.006 --> 00:05:41.004
However, there's a bug here because

98
00:05:41.004 --> 00:05:44.008
we're actually passing in the tour package name.

99
00:05:44.008 --> 00:05:49.000
We need to be able to look up a tour package by its name.

100
00:05:49.000 --> 00:05:53.000
This is possible with Spring Data JPA query methods

