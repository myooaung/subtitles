WEBVTT
1
00:00:01.001 --> 00:00:04.001
- [Instructor] Now let's create two new APIs.

2
00:00:04.001 --> 00:00:07.001
One to look up all the ratings for a tour

3
00:00:07.001 --> 00:00:09.004
and the other to calculate the average score

4
00:00:09.004 --> 00:00:11.003
for all the ratings.

5
00:00:11.003 --> 00:00:13.008
I think it's best to hide the implementation

6
00:00:13.008 --> 00:00:16.009
of tourRating's entity from the API

7
00:00:16.009 --> 00:00:20.004
so we will return a list of tourDto objects.

8
00:00:20.004 --> 00:00:22.001
And we will calculate the average

9
00:00:22.001 --> 00:00:25.009
by setting the URL with a /average at the end.

10
00:00:25.009 --> 00:00:28.005
And then we will return adjacent packet

11
00:00:28.005 --> 00:00:31.000
with a key-value pair of the word average

12
00:00:31.000 --> 00:00:33.007
and then the actual average score.

13
00:00:33.007 --> 00:00:36.009
So we're back in our TourRatingController

14
00:00:36.009 --> 00:00:41.001
and I'm just going to paste in the body of these two methods.

15
00:00:41.001 --> 00:00:44.005
Because I know it's really thrilling

16
00:00:44.005 --> 00:00:52.002
for you guys to watch me type.

17
00:00:52.002 --> 00:00:56.001
I'm just going to do my imports.

18
00:00:56.001 --> 00:00:59.008
So this first method, getAllRatingsForTour

19
00:00:59.008 --> 00:01:02.009
you take the tourId in, verify that it's a tour ID.

20
00:01:02.009 --> 00:01:06.000
We're not going to use the return tourValue of verifyTour

21
00:01:06.000 --> 00:01:07.004
it's just going to do the lookup

22
00:01:07.004 --> 00:01:09.005
and if it's found it's fine

23
00:01:09.005 --> 00:01:11.002
if it's not found it'll throw an exception

24
00:01:11.002 --> 00:01:13.003
and not go with the next line.

25
00:01:13.003 --> 00:01:15.007
So this method here

26
00:01:15.007 --> 00:01:18.006
we're taking the tourRatingRepository method

27
00:01:18.006 --> 00:01:25.001
on line 57 and calling findByPkTourId

28
00:01:25.001 --> 00:01:26.003
passing in the tourId

29
00:01:26.003 --> 00:01:27.008
stream the results of that

30
00:01:27.008 --> 00:01:31.004
and then map them into a RadtingDto.

31
00:01:31.004 --> 00:01:36.007
RatingDto has a constructor which takes a tourRating entity

32
00:01:36.007 --> 00:01:39.008
and then collects them into a list.

33
00:01:39.008 --> 00:01:44.004
So next we need to add the annotations for that to work.

34
00:01:44.004 --> 00:01:48.009
So it's GetMapping is the name of the annotation.

35
00:01:48.009 --> 00:01:51.008
It takes parameters, but we don't need to add any

36
00:01:51.008 --> 00:01:56.000
because we're going to call get on the default path

37
00:01:56.000 --> 00:01:57.007
for the entire RestController

38
00:01:57.007 --> 00:02:03.007
which is tours/ID/ratings on line 24.

39
00:02:03.007 --> 00:02:06.006
And the other thing we need to do

40
00:02:06.006 --> 00:02:08.009
is just like on creating

41
00:02:08.009 --> 00:02:14.007
we need to get the PathVariable on tourId.

42
00:02:14.007 --> 00:02:17.008
The next method is to get the average.

43
00:02:17.008 --> 00:02:21.009
So we're going to return a map of one string

44
00:02:21.009 --> 00:02:24.009
which is the word average to one double

45
00:02:24.009 --> 00:02:28.008
passing in the tourId on line 62.

46
00:02:28.008 --> 00:02:32.003
And then on line 63, we verify the tour.

47
00:02:32.003 --> 00:02:38.006
And now we're going to look up on line 64

48
00:02:38.006 --> 00:02:43.000
the tourRatingRepository.findByPkTourId

49
00:02:43.000 --> 00:02:46.001
and then stream those results

50
00:02:46.001 --> 00:02:50.004
and then map the scores to an integer value.

51
00:02:50.004 --> 00:02:51.009
Take the average of that

52
00:02:51.009 --> 00:02:56.000
and that average returns an optional double.

53
00:02:56.000 --> 00:02:59.000
And if there is actual TourRatings for this tour

54
00:02:59.000 --> 00:03:00.006
then it will return the average value

55
00:03:00.006 --> 00:03:01.006
which is a double.

56
00:03:01.006 --> 00:03:04.001
If there are no TourRatings for this tour

57
00:03:04.001 --> 00:03:07.002
it will through a NoSuchElementException.

58
00:03:07.002 --> 00:03:12.006
So we're going to actually reuse the tourId PathVariable.

59
00:03:12.006 --> 00:03:16.007
And here our GetMapping

60
00:03:16.007 --> 00:03:20.008
we're actually going to use a parameter here

61
00:03:20.008 --> 00:03:29.009
for the path, path="/average".

62
00:03:29.009 --> 00:03:38.000
So the path is going to be /tours/tourId/ratings/average.

63
00:03:38.000 --> 00:03:47.008
Okay, so let's run this.

64
00:03:47.008 --> 00:03:51.005
And start it, now let's go to Postman.

65
00:03:51.005 --> 00:03:59.008
So in Postman, let's create some tour ratings for tour 1.

66
00:03:59.008 --> 00:04:03.008
So we created a score of 1 for tour ratings

67
00:04:03.008 --> 00:04:06.001
this person didn't like it, "It was bad!"

68
00:04:06.001 --> 00:04:09.005
We're going to create another one for customer number 2

69
00:04:09.005 --> 00:04:11.009
and their score was 5.

70
00:04:11.009 --> 00:04:14.000
Apparently there's a difference of opinion.

71
00:04:14.000 --> 00:04:18.004
And they thought "It was great!"

72
00:04:18.004 --> 00:04:20.003
Send that.

73
00:04:20.003 --> 00:04:22.004
It's created.

74
00:04:22.004 --> 00:04:25.005
So now let's call our getter methods.

75
00:04:25.005 --> 00:04:33.009
This method will call get on tours/1/ratings

76
00:04:33.009 --> 00:04:37.008
and there's all of our ratings we got for that tour.

77
00:04:37.008 --> 00:04:42.001
And now we're going to add /average

78
00:04:42.001 --> 00:04:44.003
on the end of that.

79
00:04:44.003 --> 00:04:48.000
And so the average between 1 and 5 was 3.

