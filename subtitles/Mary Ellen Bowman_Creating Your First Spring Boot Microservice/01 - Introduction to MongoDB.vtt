WEBVTT
1
00:00:01.001 --> 00:00:03.006
- [Instructor] Yet again, Explore California

2
00:00:03.006 --> 00:00:06.001
has changed the requirements on us.

3
00:00:06.001 --> 00:00:08.006
At its inception, we designed for the main model

4
00:00:08.006 --> 00:00:10.008
to call out all the different fields

5
00:00:10.008 --> 00:00:12.007
currently on its website

6
00:00:12.007 --> 00:00:16.000
but now they want the import file to be flexible

7
00:00:16.000 --> 00:00:21.000
such that each tour record could vary in name and quantity.

8
00:00:21.000 --> 00:00:24.000
Here's an example of the possible differences.

9
00:00:24.000 --> 00:00:26.009
In the first record, we see a new kind of region,

10
00:00:26.009 --> 00:00:31.008
Central East, which is not part of our region enumeration

11
00:00:31.008 --> 00:00:33.004
and in the second record,

12
00:00:33.004 --> 00:00:34.004
we have new fields

13
00:00:34.004 --> 00:00:36.007
that were not part of the original design,

14
00:00:36.007 --> 00:00:41.007
audience and surcharge, and difficulties missing altogether.

15
00:00:41.007 --> 00:00:44.007
Each record will always have package type

16
00:00:44.007 --> 00:00:46.003
and the title field.

17
00:00:46.003 --> 00:00:49.000
The package type name will continue to match

18
00:00:49.000 --> 00:00:52.009
a discrete list of tour package names.

19
00:00:52.009 --> 00:00:55.004
So here is our first use case.

20
00:00:55.004 --> 00:00:59.004
This is for the person who creates the dot json file.

21
00:00:59.004 --> 00:01:02.006
It explains the constraints on the file.

22
00:01:02.006 --> 00:01:06.003
Our next use case describes how the response body

23
00:01:06.003 --> 00:01:08.008
from the tours endpoint can change.

24
00:01:08.008 --> 00:01:13.001
The summary fields, ID, title, tour package code,

25
00:01:13.001 --> 00:01:16.001
tour package name will be static.

26
00:01:16.001 --> 00:01:19.009
Then, there is a dynamic list of detail fields.

27
00:01:19.009 --> 00:01:23.000
The details are key value pairs matching

28
00:01:23.000 --> 00:01:26.000
the dot json file details.

29
00:01:26.000 --> 00:01:29.001
And our last use case is a new search endpoint

30
00:01:29.001 --> 00:01:33.009
which only returns the summary fields, not the details.

31
00:01:33.009 --> 00:01:36.001
To meet these requirements,

32
00:01:36.001 --> 00:01:40.005
it has been decided to pivot to a MongoDB data store.

33
00:01:40.005 --> 00:01:43.009
MongoDB repositories have no schema requirements,

34
00:01:43.009 --> 00:01:47.006
making it flexible to different record content.

35
00:01:47.006 --> 00:01:50.002
There is no foreign key concept between tables

36
00:01:50.002 --> 00:01:53.004
so the application itself must guard against

37
00:01:53.004 --> 00:01:55.009
referential integrity errors.

38
00:01:55.009 --> 00:01:59.005
Happily, there is Spring Data MongoDB,

39
00:01:59.005 --> 00:02:03.007
which follows the same patterns as Spring Data JPA.

40
00:02:03.007 --> 00:02:05.009
Code refactoring is required,

41
00:02:05.009 --> 00:02:09.004
but the structure of our microservice will not be changed,

42
00:02:09.004 --> 00:02:12.008
so some of the differences in Spring Data MongoDB

43
00:02:12.008 --> 00:02:17.007
than Spring Data JPA, the @Entity annotation

44
00:02:17.007 --> 00:02:20.008
is replaced with @Document.

45
00:02:20.008 --> 00:02:23.000
There remains an @Id,

46
00:02:23.000 --> 00:02:26.001
but they come from different packages.

47
00:02:26.001 --> 00:02:30.003
Generated value in JPA is not present in Mongo

48
00:02:30.003 --> 00:02:32.005
because they're automatically generated

49
00:02:32.005 --> 00:02:35.007
unless you override the ID.

50
00:02:35.007 --> 00:02:38.008
There is no @Column in MongoDB

51
00:02:38.008 --> 00:02:40.009
because we don't have columns.

52
00:02:40.009 --> 00:02:44.001
@Indexed on Mongo is an annotation

53
00:02:44.001 --> 00:02:46.001
where you can increase the search performance

54
00:02:46.001 --> 00:02:50.000
on a particular field and because there's no referencing

55
00:02:50.000 --> 00:02:54.002
between tables, we don't have many to one, one to many,

56
00:02:54.002 --> 00:02:57.009
many to many, or one to one.

57
00:02:57.009 --> 00:03:01.000
Finally, there is an @DBRef on the Mongo side,

58
00:03:01.000 --> 00:03:05.005
which allows one document to refer to another document.

59
00:03:05.005 --> 00:03:07.001
For the remainder of this chapter,

60
00:03:07.001 --> 00:03:12.004
we will use my IDE to compare the 5-begin branch,

61
00:03:12.004 --> 00:03:15.000
which is the JPA solution,

62
00:03:15.000 --> 00:03:20.001
with the 5-end branch, the MongoDB solution.

63
00:03:20.001 --> 00:03:23.005
The most critical difference is the change of dependencies

64
00:03:23.005 --> 00:03:27.006
in the pom.xml.

65
00:03:27.006 --> 00:03:29.007
Deleted code is gray.

66
00:03:29.007 --> 00:03:32.003
Green code is new.

67
00:03:32.003 --> 00:03:36.003
On line 24, we see that the application requires

68
00:03:36.003 --> 00:03:42.001
Spring Data MongoDB instead of the JPA starter.

69
00:03:42.001 --> 00:03:45.002
On line 28, we pull in flapdoodle,

70
00:03:45.002 --> 00:03:48.005
which is an in-memory Mongo database

71
00:03:48.005 --> 00:03:51.000
and finally on line 33,

72
00:03:51.000 --> 00:03:55.000
we see that the h2 dependency has been removed.

