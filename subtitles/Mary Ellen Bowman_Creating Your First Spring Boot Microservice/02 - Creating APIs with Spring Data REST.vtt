WEBVTT
1
00:00:01.003 --> 00:00:04.004
- [Instructor] So let's get down to coding these APIs.

2
00:00:04.004 --> 00:00:08.000
So let's call the API to get all the tour packages.

3
00:00:08.000 --> 00:00:10.007
We need an endpoint called tourPackages

4
00:00:10.007 --> 00:00:14.000
such that HttP Get /tourPackages

5
00:00:14.000 --> 00:00:17.005
fetches all the tourPackages in JSON format.

6
00:00:17.005 --> 00:00:21.009
Httpget/tourPackages/code, fetches one tour package

7
00:00:21.009 --> 00:00:23.007
with the provided code.

8
00:00:23.007 --> 00:00:28.002
Ready, set go!

9
00:00:28.002 --> 00:00:29.003
Done!

10
00:00:29.003 --> 00:00:30.009
I'm not kidding you.

11
00:00:30.009 --> 00:00:32.008
Because we included Spring Data Rest

12
00:00:32.008 --> 00:00:34.006
as one of our project dependencies,

13
00:00:34.006 --> 00:00:39.001
there is no coding necessary to implement these APIs.

14
00:00:39.001 --> 00:00:41.003
At application startup, Spring Data Rest

15
00:00:41.003 --> 00:00:43.003
scans the class files and finds

16
00:00:43.003 --> 00:00:45.003
the spring data repositories,

17
00:00:45.003 --> 00:00:48.003
creates an endpoint that matches the entity name,

18
00:00:48.003 --> 00:00:53.000
appends and S, and exposes the operations as APIs.

19
00:00:53.000 --> 00:00:55.005
So here, we have the mapping for create.

20
00:00:55.005 --> 00:00:58.005
Which sit eh HTTP Post.

21
00:00:58.005 --> 00:01:04.009
The mappings for read, which is HTTP Get for all or one.

22
00:01:04.009 --> 00:01:10.001
The mappings for update which is HTTP Put or Patch.

23
00:01:10.001 --> 00:01:12.000
This requires looking up the entity first

24
00:01:12.000 --> 00:01:17.009
and finally, delete, which is HTTP Delete.

25
00:01:17.009 --> 00:01:20.000
So let's try it out.

26
00:01:20.000 --> 00:01:23.008
Our explore California is already running on my desktop.

27
00:01:23.008 --> 00:01:27.009
I'm going to use Postman to exercise the APIs.

28
00:01:27.009 --> 00:01:33.002
I'm going to do an HTTP Get.

29
00:01:33.002 --> 00:01:44.008
On local host, :8080/tourpackages.

30
00:01:44.008 --> 00:01:51.000
And the following response is in (mumbles) specification.

31
00:01:51.000 --> 00:01:54.000
We see that the name is a string attribute.

32
00:01:54.000 --> 00:01:55.008
But instead of the code attribute,

33
00:01:55.008 --> 00:01:58.008
there is a link.self.href.

34
00:01:58.008 --> 00:02:02.004
This is a hypermedia link to the individual package.

35
00:02:02.004 --> 00:02:06.003
I'm actually going to click on that link.

36
00:02:06.003 --> 00:02:10.001
And I'm going to call get on tourpackages/BC,

37
00:02:10.001 --> 00:02:16.009
which is the code for Backpack Cali.

38
00:02:16.009 --> 00:02:20.000
And there's the response body.

39
00:02:20.000 --> 00:02:22.002
Because the data is hypermedia-driven,

40
00:02:22.002 --> 00:02:26.005
the ID of the resource is the self.href.link.

41
00:02:26.005 --> 00:02:29.004
The client does not have to manually append the ID

42
00:02:29.004 --> 00:02:31.003
to the resource, it just gets the value

43
00:02:31.003 --> 00:02:35.005
of self.href to obtain the entry in a list.

44
00:02:35.005 --> 00:02:39.000
We are getting a taste of the beauty of hypermedia here.

45
00:02:39.000 --> 00:02:41.001
Most (mumbles) developers prefer consuming

46
00:02:41.001 --> 00:02:44.000
hypermedia-driven APIs because it makes their codes

47
00:02:44.000 --> 00:02:47.005
smaller, cleaner and easier to maintain.

48
00:02:47.005 --> 00:02:50.002
So let's go through create, read and update,

49
00:02:50.002 --> 00:02:53.007
as well as delete methods for the tour package API.

50
00:02:53.007 --> 00:02:55.006
I'm going to create a brand new package tour package

51
00:02:55.006 --> 00:02:57.002
called Zany Cali.

52
00:02:57.002 --> 00:03:02.007
So that will involve a post to a tour packages endpoint.

53
00:03:02.007 --> 00:03:10.006
I need a body here, which will be JSON.

54
00:03:10.006 --> 00:03:23.006
So I have a code attribute called ZC.

55
00:03:23.006 --> 00:03:31.009
And a name attribute called Zany Cali.

56
00:03:31.009 --> 00:03:36.008
And I send that.

57
00:03:36.008 --> 00:03:42.001
And I get the response back, 201 created.

58
00:03:42.001 --> 00:03:45.006
The JSON data elements mapped directly

59
00:03:45.006 --> 00:03:47.005
to the tour package attributes.

60
00:03:47.005 --> 00:03:49.003
Since we are creating a new object,

61
00:03:49.003 --> 00:03:52.000
we must provide the ID or the code

62
00:03:52.000 --> 00:03:55.009
because it's not auto-generated.

63
00:03:55.009 --> 00:04:00.006
So, the 201 created means it created the object

64
00:04:00.006 --> 00:04:02.007
and the database and it actually returned

65
00:04:02.007 --> 00:04:04.003
the contents of it.

66
00:04:04.003 --> 00:04:07.004
Let's try to create a package without a code.

67
00:04:07.004 --> 00:04:12.006
So I'm going to delete this code and rename,

68
00:04:12.006 --> 00:04:19.004
and have something called Crazy Cali.

69
00:04:19.004 --> 00:04:22.005
I get a 500 error back and that's because

70
00:04:22.005 --> 00:04:26.004
there is no code provided.

71
00:04:26.004 --> 00:04:31.009
Now, let's look at Zany Cali.

72
00:04:31.009 --> 00:04:37.007
Code get.

73
00:04:37.007 --> 00:04:40.006
And we get the Zany Cali back.

74
00:04:40.006 --> 00:04:46.008
Now, let's modify Zany Cali and change the name of it

75
00:04:46.008 --> 00:04:52.006
to California Zoos.

76
00:04:52.006 --> 00:04:55.006
We'll put, and here's this body

77
00:04:55.006 --> 00:04:57.005
that was leftover from before

78
00:04:57.005 --> 00:05:07.000
and we'll call California Zoos.

79
00:05:07.000 --> 00:05:08.009
And send that.

80
00:05:08.009 --> 00:05:13.000
So now, the ZC is mapped to California Zoos.

81
00:05:13.000 --> 00:05:18.002
And finally, let's delete the tour package.

82
00:05:18.002 --> 00:05:25.005
So calling delete on tour packages I just, /ZC.

83
00:05:25.005 --> 00:05:29.004
Send that and we get a 204 content,

84
00:05:29.004 --> 00:05:31.008
which is what we are looking for.

85
00:05:31.008 --> 00:05:37.000
Now, let's verify that by trying to look it up.

86
00:05:37.000 --> 00:05:40.007
Calling get on that endpoint.

87
00:05:40.007 --> 00:05:43.003
And we get a 404 not found because the object

88
00:05:43.003 --> 00:05:46.004
no longer exists in the database.

89
00:05:46.004 --> 00:05:48.009
Any errors that occur on the repository level

90
00:05:48.009 --> 00:05:51.000
are passed back in the HTTP status.

91
00:05:51.000 --> 00:05:53.002
For example, I cannot delete a tour package

92
00:05:53.002 --> 00:05:54.008
that is already associated with the tour

93
00:05:54.008 --> 00:05:58.006
because it would cause a referential integrity error.

94
00:05:58.006 --> 00:05:59.004
Let's try that.

95
00:05:59.004 --> 00:06:04.006
Let's try to delete Backpack Cali.

96
00:06:04.006 --> 00:06:11.007
You know that the code for that is BC.

97
00:06:11.007 --> 00:06:14.002
This returns a referential integrity constraint

98
00:06:14.002 --> 00:06:20.000
violation message, put the 409 conflict status.

99
00:06:20.000 --> 00:06:21.002
And that's exactly what we wanted.

100
00:06:21.002 --> 00:06:23.006
We don't want that to be deletable.

101
00:06:23.006 --> 00:06:27.001
So, all this time, we were creating repositories,

102
00:06:27.001 --> 00:06:30.008
we were also creating hypermedia-driven APIs

103
00:06:30.008 --> 00:06:34.001
just because we included this spring boot starter

104
00:06:34.001 --> 00:06:37.000
data rest dependency in our pom.xml.

