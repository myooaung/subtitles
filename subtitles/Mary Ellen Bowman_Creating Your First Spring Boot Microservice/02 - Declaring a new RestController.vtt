WEBVTT
1
00:00:01.000 --> 00:00:05.001
- So Explore California sent us some new requirements.

2
00:00:05.001 --> 00:00:07.008
They would like us to allow their travelers

3
00:00:07.008 --> 00:00:10.002
to rate tours on the website

4
00:00:10.002 --> 00:00:13.000
and let potential travelers see the average score

5
00:00:13.000 --> 00:00:14.002
for a tour.

6
00:00:14.002 --> 00:00:16.007
So let's look at these five use cases.

7
00:00:16.007 --> 00:00:18.009
First, rate a tour.

8
00:00:18.009 --> 00:00:23.002
Note that a traveler has a unique customer ID.

9
00:00:23.002 --> 00:00:25.006
Modify a tour.

10
00:00:25.006 --> 00:00:30.004
Again, a traveler has a unique customer ID.

11
00:00:30.004 --> 00:00:34.005
The next use case, view all ratings.

12
00:00:34.005 --> 00:00:38.000
Customer ID is not needed here.

13
00:00:38.000 --> 00:00:42.004
And now, the view average score use case.

14
00:00:42.004 --> 00:00:46.004
The customer ID is not needed here either.

15
00:00:46.004 --> 00:00:51.007
And finally, expected response codes to various scenarios.

16
00:00:51.007 --> 00:00:56.005
So a 201 should be returned when a rating is created,

17
00:00:56.005 --> 00:01:00.004
a 400 whenever a bad data is passed in on the APIs,

18
00:01:00.004 --> 00:01:03.009
and then a 404 if it's an invalid tour ID.

19
00:01:03.009 --> 00:01:06.003
In the exercise files, I want to show you

20
00:01:06.003 --> 00:01:10.000
the JPA entity and spring data repositories

21
00:01:10.000 --> 00:01:12.002
I've already implemented.

22
00:01:12.002 --> 00:01:14.000
When we start any design,

23
00:01:14.000 --> 00:01:17.005
we must first identify the nouns in the use cases.

24
00:01:17.005 --> 00:01:21.005
So the use case nouns are score, comment,

25
00:01:21.005 --> 00:01:24.003
customer identifier, and tour.

26
00:01:24.003 --> 00:01:28.000
Here, I collectively call that a tour rating.

27
00:01:28.000 --> 00:01:31.000
So the attributes of a tour rating are a score,

28
00:01:31.000 --> 00:01:34.002
and a comment, and I have an embedded ID,

29
00:01:34.002 --> 00:01:35.001
which is a tour rating pk.

30
00:01:35.001 --> 00:01:38.000
Pk stands for primary key.

31
00:01:38.000 --> 00:01:41.006
So let's look at the tour rating pk.

32
00:01:41.006 --> 00:01:45.000
This is a compound primary key for a tour rating,

33
00:01:45.000 --> 00:01:47.003
and it contains a tour

34
00:01:47.003 --> 00:01:51.000
and a customer ID.

35
00:01:51.000 --> 00:01:52.007
For simplicity of the exercises,

36
00:01:52.007 --> 00:01:55.008
we will not maintain a customer repository.

37
00:01:55.008 --> 00:02:00.006
Next, we have a tour rating repository.

38
00:02:00.006 --> 00:02:04.001
I do not want this repository to be exposed

39
00:02:04.001 --> 00:02:06.003
to spring data rest,

40
00:02:06.003 --> 00:02:10.003
so I set exported = false

41
00:02:10.003 --> 00:02:15.002
in the repository rest resource annotation.

42
00:02:15.002 --> 00:02:19.004
Then I have two methods in the tour rating repository.

43
00:02:19.004 --> 00:02:24.008
Find by pk tourId, which returns a list of tour ratings

44
00:02:24.008 --> 00:02:27.004
and find by pk tourId

45
00:02:27.004 --> 00:02:29.004
and pk customerId,

46
00:02:29.004 --> 00:02:34.004
which would return one unique tour rating.

47
00:02:34.004 --> 00:02:36.007
Finally, there is a tour rating controller

48
00:02:36.007 --> 00:02:41.002
in the web package.

49
00:02:41.002 --> 00:02:44.008
On line 13, there is a base url mapping,

50
00:02:44.008 --> 00:02:49.001
and it is tours/tourId/ratings

51
00:02:49.001 --> 00:02:52.006
because a rating is always associated with one tour.

52
00:02:52.006 --> 00:02:56.001
This controller will need to look up ratings and tours

53
00:02:56.001 --> 00:02:58.007
so we will inject tour rating repository

54
00:02:58.007 --> 00:03:01.004
and tour repository in the constructor.

55
00:03:01.004 --> 00:03:03.008
It's better style to inject the service,

56
00:03:03.008 --> 00:03:06.000
but we are trying to keep this example simple.

