WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.100
Okay,

00:00:01.100 --> 00:00:03.840
here comes the most overrated video in this video.

00:00:03.840 --> 00:00:05.720
We're going to talk about plug ins,

00:00:05.720 --> 00:00:06.460
goals,

00:00:06.460 --> 00:00:07.260
life cycles,

00:00:07.260 --> 00:00:08.040
etcetera.

00:00:08.040 --> 00:00:10.770
Believe you perform a certain task with maven.

00:00:10.770 --> 00:00:12.040
For example,

00:00:12.040 --> 00:00:17.530
building the project or packaging the project are cleaning the project etcetera.

00:00:17.530 --> 00:00:21.150
Then moving is actually going through a life cycle.

00:00:21.150 --> 00:00:24.880
Moon has a following three life cycles built in.

00:00:24.880 --> 00:00:27.160
There's a clean build,

00:00:27.160 --> 00:00:29.800
which is a default one and site.

00:00:29.800 --> 00:00:34.650
The life cycle clean has something to do with Do the clean up,

00:00:34.650 --> 00:00:38.950
and we've actually didn't look at one such example when we did,

00:00:38.950 --> 00:00:40.920
we've been clean from our project.

00:00:40.920 --> 00:00:46.060
It has actually cleaned up the target directory so the clean life cycle would have list off

00:00:46.060 --> 00:00:49.280
phases that does the job off cleaning.

00:00:49.280 --> 00:00:50.510
And similarly,

00:00:50.510 --> 00:00:52.030
we have the bill lifecycle,

00:00:52.030 --> 00:00:58.470
within which we have some build related faces and were aware of some of these already.

00:00:58.470 --> 00:00:59.230
For example,

00:00:59.230 --> 00:01:06.470
we have compiled to compile the source files test to perform the unit testing package to

00:01:06.470 --> 00:01:08.360
package the project as an artifact,

00:01:08.360 --> 00:01:09.770
for example,

00:01:09.770 --> 00:01:15.440
a jar file and then we have installed to start off install it into the repository,

00:01:15.440 --> 00:01:16.250
etcetera,

00:01:16.250 --> 00:01:20.080
and we also have the site life cycle.

00:01:20.080 --> 00:01:25.630
This is essentially somewhat like creating the side documentation for your project somewhat

00:01:25.630 --> 00:01:27.050
similar to Java dark.

00:01:27.050 --> 00:01:35.220
So all these life cycles would comprise off list off phases and each one off this phase

00:01:35.220 --> 00:01:39.610
would be associated with one are more golds.

00:01:39.610 --> 00:01:42.210
So all the things that I've listed in here,

00:01:42.210 --> 00:01:45.990
the life cycles and the faces are sort of built into maven.

00:01:45.990 --> 00:01:50.900
But the actual task will be performed by the plug ins within,

00:01:50.900 --> 00:01:53.110
which would specify our goals.

00:01:53.110 --> 00:01:55.450
This must sound confusing a little bit.

00:01:55.450 --> 00:01:57.270
So let me just take you to the prom,

00:01:57.270 --> 00:02:00.060
that XML and then you have a better picture.

00:02:00.060 --> 00:02:01.070
So in here,

00:02:01.070 --> 00:02:02.750
if you go to the effect of Palm,

00:02:02.750 --> 00:02:07.390
you would find out that there are already some plug ins defined.

00:02:07.390 --> 00:02:11.750
Let's take an example off the compiler plug in which we have in here.

00:02:11.750 --> 00:02:18.850
Then we specify this particular tank plug in just the company that I have selected in here

00:02:18.850 --> 00:02:18.850
.

00:02:18.850 --> 00:02:25.250
Moon is actually going to download this particular plug in from the repository written that

00:02:25.250 --> 00:02:25.610
plug in.

00:02:25.610 --> 00:02:29.140
We have a set off code that does the job off compilation,

00:02:29.140 --> 00:02:33.630
and that piece off court is actually associated with the name and the name that is

00:02:33.630 --> 00:02:39.220
associated these the name of the goal as simple as that.

00:02:39.220 --> 00:02:43.660
And this particular goal is actually tagged with the compile phase.

00:02:43.660 --> 00:02:46.240
So if you go back into the life cycle,

00:02:46.240 --> 00:02:46.850
phases,

00:02:46.850 --> 00:02:49.620
he would know is that as part of the bill life cycle,

00:02:49.620 --> 00:02:51.140
we have the compile phase.

00:02:51.140 --> 00:02:56.570
So whenever we try to perform the may even build and then we say compile,

00:02:56.570 --> 00:03:00.590
it is actually going to call this particular goal.

00:03:00.590 --> 00:03:06.240
And so the court associated with it inside the plug in and it will do the job off

00:03:06.240 --> 00:03:07.150
compilation.

00:03:07.150 --> 00:03:12.160
I'm actually going to show you how to create your own maven plug in so that you'll have a

00:03:12.160 --> 00:03:12.990
better picture.

00:03:12.990 --> 00:03:17.830
But what we're trying to do here is for each and every plug in your specified in here you

00:03:17.830 --> 00:03:18.740
have a goal,

00:03:18.740 --> 00:03:20.480
which is part of the plug in.

00:03:20.480 --> 00:03:20.950
Like,

00:03:20.950 --> 00:03:21.740
for example,

00:03:21.740 --> 00:03:23.820
when you have this maven bar plugging,

00:03:23.820 --> 00:03:25.950
you have a goal with the name bar,

00:03:25.950 --> 00:03:29.410
and there has to be some cord associated with this name.

00:03:29.410 --> 00:03:33.270
And then we're going to associate this particular goal with the pays,

00:03:33.270 --> 00:03:37.240
its not mandatory that you need to associate a goal with the phase,

00:03:37.240 --> 00:03:42.350
a single goal can be part off multiple phases or none at all.

00:03:42.350 --> 00:03:47.350
I've actually stirred down the commands as to how to move those goals.

00:03:47.350 --> 00:03:49.030
For example,

00:03:49.030 --> 00:03:52.980
in here we're trying to call this particular face off,

00:03:52.980 --> 00:03:55.500
Maven was saying Ambien install,

00:03:55.500 --> 00:04:00.380
So this is essentially going to execute this particular phase.

00:04:00.380 --> 00:04:05.280
But the beauty off Mangini's maven is not straight ever going to execute this particular

00:04:05.280 --> 00:04:05.870
phase.

00:04:05.870 --> 00:04:08.600
But it will stop from the very beginning off the life cycle.

00:04:08.600 --> 00:04:11.100
So when you call and then install,

00:04:11.100 --> 00:04:16.340
it will start executing from the beginning of the life cycle said We'll execute d validate

00:04:16.340 --> 00:04:16.340
,

00:04:16.340 --> 00:04:19.740
compile test package,

00:04:19.740 --> 00:04:24.510
verify and then it will stop at install.

00:04:24.510 --> 00:04:29.620
So all these faces are associated with goals off some form,

00:04:29.620 --> 00:04:33.790
and those goals are actually provided by the plug ins.

00:04:33.790 --> 00:04:35.350
I hope it's clear.

00:04:35.350 --> 00:04:36.810
And by the way,

00:04:36.810 --> 00:04:37.950
as of all the dimension,

00:04:37.950 --> 00:04:43.720
this is not the full list Off faces available as part of these life cycles have created

00:04:43.720 --> 00:04:44.450
document.

00:04:44.450 --> 00:04:52.590
The name maven lifecycle dot dogs there have listed down all the list of faces of Elber in

00:04:52.590 --> 00:04:53.910
each of the life cycles.

00:04:53.910 --> 00:04:55.970
So for clean life cycle,

00:04:55.970 --> 00:05:00.780
we have the following phases have also provided the description can just have a quick look

00:05:00.780 --> 00:05:01.250
at it.

00:05:01.250 --> 00:05:04.420
So here's the default one,

00:05:04.420 --> 00:05:05.890
which is the Bill life cycle,

00:05:05.890 --> 00:05:08.550
and it has all the falling physicists.

00:05:08.550 --> 00:05:12.150
So I haven't listed everything in that text file.

00:05:12.150 --> 00:05:19.650
But do they can know that some of these faces are actually having this hyphen?

00:05:19.650 --> 00:05:28.460
That's because all this visits with hyphen in the name are actually going to perform an

00:05:28.460 --> 00:05:29.750
incomplete task.

00:05:29.750 --> 00:05:30.830
Basically,

00:05:30.830 --> 00:05:34.610
they would perform a task that would help the other faces to complete.

00:05:34.610 --> 00:05:37.450
Let's go back.

00:05:37.450 --> 00:05:40.510
So similarly,

00:05:40.510 --> 00:05:41.750
we have another command.

00:05:41.750 --> 00:05:43.150
And with this command,

00:05:43.150 --> 00:05:47.670
I'm not only getting the install but also the clean phase.

00:05:47.670 --> 00:05:52.530
So with this command that have just selected Ambien,

00:05:52.530 --> 00:05:55.390
clean install asked for the sequence,

00:05:55.390 --> 00:05:57.880
the clean face will get executed first.

00:05:57.880 --> 00:06:03.250
That means not only clean face but also the faces that are prior to it.

00:06:03.250 --> 00:06:07.480
And then it's going to take care off in style,

00:06:07.480 --> 00:06:08.970
face and then again,

00:06:08.970 --> 00:06:12.880
all the faces that come before it.

00:06:12.880 --> 00:06:14.490
And by the way,

00:06:14.490 --> 00:06:18.080
these are the same command which we were executing from Eclipse.

00:06:18.080 --> 00:06:21.050
We were doing like right clicking on the project,

00:06:21.050 --> 00:06:29.600
going to run as we have may even build maven clean may even install Maven test.

00:06:29.600 --> 00:06:30.090
Basically,

00:06:30.090 --> 00:06:33.150
we're trying to invoke how this faces in here.

00:06:33.150 --> 00:06:38.850
We can also actually call an individual goal that is associated with the plug in,

00:06:38.850 --> 00:06:41.630
and you have to follow the following format.

00:06:41.630 --> 00:06:43.460
So you're going to specify the group I D.

00:06:43.460 --> 00:06:44.140
Artifact I.

00:06:44.140 --> 00:06:44.460
D.

00:06:44.460 --> 00:06:49.020
And then the wash in basically would provide the coordinators to the plug in,

00:06:49.020 --> 00:06:53.550
and then he would start off provide the name of the goal,

00:06:53.550 --> 00:06:59.770
an example of which can be seen in here and with a typical Irani command like this by

00:06:59.770 --> 00:07:05.220
directly calling the goal especially the goal is not associated with any phase holds.

00:07:05.220 --> 00:07:11.980
It's worth noting that the order off institution off goals is dependent on the order off

00:07:11.980 --> 00:07:13.110
these faces.

00:07:13.110 --> 00:07:14.120
For example,

00:07:14.120 --> 00:07:19.820
if you have a goal that is mentioned as part of compile phase as well as the package phase

00:07:19.820 --> 00:07:19.820
,

00:07:19.820 --> 00:07:23.250
then the goal in the Compel Place will get executed first.

00:07:23.250 --> 00:07:24.950
And then the package,

00:07:24.950 --> 00:07:28.720
lastly,

00:07:28.720 --> 00:07:33.220
just to give you an example of what we've talked have actually created a bomb.

00:07:33.220 --> 00:07:36.050
The XML file that looks like this,

00:07:36.050 --> 00:07:38.160
I'm going to make it part off.

00:07:38.160 --> 00:07:39.080
Don't notables.

00:07:39.080 --> 00:07:41.500
So you can is that as well?

00:07:41.500 --> 00:07:48.060
And what I'm trying to do here is I'm actually making use off the maven Antron plug in this

00:07:48.060 --> 00:07:52.360
plug in will allow me to run and commands using made in.

00:07:52.360 --> 00:07:57.240
And here we have set off execution tasks within the plug in Dag.

00:07:57.240 --> 00:07:58.680
So basically,

00:07:58.680 --> 00:08:03.680
I've gone through the documentation off maven Anton plugging and understood how to use it.

00:08:03.680 --> 00:08:06.950
And so I'm able to declare the falling tags.

00:08:06.950 --> 00:08:12.340
So what this essentially does is I'm just simply trying to acquire mess age.

00:08:12.340 --> 00:08:18.110
But the key thing to note here is for each and every execution tag of defined in here are

00:08:18.110 --> 00:08:23.430
rather for each and every goal I have declared in here I have a face associated with it to

00:08:23.430 --> 00:08:26.070
go back to a document you know,

00:08:26.070 --> 00:08:26.690
clean fears.

00:08:26.690 --> 00:08:29.430
We have the following three phases pre clean,

00:08:29.430 --> 00:08:31.450
clean and post clean.

00:08:31.450 --> 00:08:35.620
So I've used those three phases to associate my goals.

00:08:35.620 --> 00:08:36.900
For example,

00:08:36.900 --> 00:08:42.870
this message will get a code than the maven is in pre clean phase.

00:08:42.870 --> 00:08:44.200
Similarly,

00:08:44.200 --> 00:08:48.570
this message will get a code when the maven is in clean phase.

00:08:48.570 --> 00:08:49.500
Similarly,

00:08:49.500 --> 00:08:51.720
we have another for post plane.

00:08:51.720 --> 00:08:57.970
So in order to test This all you have to do is to go to the directory wherever your poem

00:08:57.970 --> 00:09:01.680
the XML is reciting and then run the command.

00:09:01.680 --> 00:09:02.430
In my case,

00:09:02.430 --> 00:09:03.750
I'm saying post clean,

00:09:03.750 --> 00:09:10.360
which means the are Pritchard should not only constitute the message from post clean,

00:09:10.360 --> 00:09:12.300
but also the previous ones.

00:09:12.300 --> 00:09:15.110
So let's try to run it.

00:09:15.110 --> 00:09:17.660
Since I've already run it,

00:09:17.660 --> 00:09:20.440
It's not going to take a lot of time.

00:09:20.440 --> 00:09:22.170
If you're running it for the first time,

00:09:22.170 --> 00:09:24.050
then it would take a while.

00:09:24.050 --> 00:09:25.800
Looks like I didn't hit.

00:09:25.800 --> 00:09:26.350
Enter.

00:09:26.350 --> 00:09:32.010
So here we have it.

00:09:32.010 --> 00:09:36.490
So all the phases messages got a cord.

00:09:36.490 --> 00:09:39.490
Let me try with just clean.

00:09:39.490 --> 00:09:46.750
So I'm assuming that only this and this message will get displayed.

00:09:46.750 --> 00:09:49.870
And sure enough,

00:09:49.870 --> 00:09:51.990
we don't see post clean message.

00:09:51.990 --> 00:09:54.470
So that explains.

00:09:54.470 --> 00:09:55.410
All right,

00:09:55.410 --> 00:09:56.570
that's it for this video.

00:09:56.570 --> 00:09:58.150
See you soon.

