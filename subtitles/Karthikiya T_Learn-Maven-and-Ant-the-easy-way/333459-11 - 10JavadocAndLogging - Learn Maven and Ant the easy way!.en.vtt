WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.240
in this video,

00:00:01.240 --> 00:00:03.030
we're going to talk about Java,

00:00:03.030 --> 00:00:03.900
doc task.

00:00:03.900 --> 00:00:05.750
But before you understand this,

00:00:05.750 --> 00:00:08.150
you must supposed to be aware of what Java doc is.

00:00:08.150 --> 00:00:11.170
Doha doc is a tool that is part of J.

00:00:11.170 --> 00:00:11.320
T.

00:00:11.320 --> 00:00:14.520
K and is going to help you create documentation for your job.

00:00:14.520 --> 00:00:19.790
All files if you're not ever off Tower dark here is a very simple example.

00:00:19.790 --> 00:00:23.770
I picked this example from my Java programming course,

00:00:23.770 --> 00:00:28.750
and I've explained beautifully about Java comment as well as Java doc to.

00:00:28.750 --> 00:00:33.210
So what you do is you would write comments in a specific format,

00:00:33.210 --> 00:00:34.550
and once you do that,

00:00:34.550 --> 00:00:40.830
we can now feed this file to the Java doc Tool and the job adopt Tool will now take care of

00:00:40.830 --> 00:00:42.390
generating the documentation.

00:00:42.390 --> 00:00:44.300
If you're not clear on the same,

00:00:44.300 --> 00:00:49.690
explore a little bit about this Teladoc to or we can enroll for my Java programming course

00:00:49.690 --> 00:00:51.070
anyway.

00:00:51.070 --> 00:00:52.180
But here's the task.

00:00:52.180 --> 00:00:52.950
For the same,

00:00:52.950 --> 00:00:58.810
you would pour the sore spot and list off files that you want include,

00:00:58.810 --> 00:01:05.350
and we can also specify the Destination directory very want to generate the estimable files

00:01:05.350 --> 00:01:12.730
that has the documentation and this essentially the directory with the name doctor under

00:01:12.730 --> 00:01:13.750
the same directory.

00:01:13.750 --> 00:01:15.520
So let's see how it goes.

00:01:15.520 --> 00:01:18.810
So here are the two files.

00:01:18.810 --> 00:01:20.760
I have the Java file as well as a builder,

00:01:20.760 --> 00:01:21.340
XML,

00:01:21.340 --> 00:01:26.350
which you're seeing right now and is under the directory Java Doc Task.

00:01:26.350 --> 00:01:40.880
Let's run this XML file and soon you would notice that we have this character created of it

00:01:40.880 --> 00:01:43.100
in which we have the documentation.

00:01:43.100 --> 00:01:50.850
Whatever the documentation coming to have put in in the Java file can be seen in here.

00:01:50.850 --> 00:01:53.390
If you open this index started demo,

00:01:53.390 --> 00:01:57.410
you would have the documentation.

00:01:57.410 --> 00:02:01.600
So here is what I have written in the file and it got reflected over here.

00:02:01.600 --> 00:02:07.290
We can also include the additional tanks like you're seeing here.

00:02:07.290 --> 00:02:08.490
For example,

00:02:08.490 --> 00:02:08.980
in my case,

00:02:08.980 --> 00:02:18.550
I've used doc title as well as bottom to put the cooperate information and actually can see

00:02:18.550 --> 00:02:20.540
it reflected over here as well.

00:02:20.540 --> 00:02:21.600
To go to the bottom,

00:02:21.600 --> 00:02:24.480
you would see that cooperate information.

00:02:24.480 --> 00:02:26.870
Similarly,

00:02:26.870 --> 00:02:28.230
we got many such tax.

00:02:28.230 --> 00:02:30.940
You can defer to the documentation off this task,

00:02:30.940 --> 00:02:31.650
Java doc,

00:02:31.650 --> 00:02:33.350
and then you can explore more.

00:02:33.350 --> 00:02:37.220
I also quickly want to talk about logging.

00:02:37.220 --> 00:02:38.180
In our case,

00:02:38.180 --> 00:02:40.020
we're just having one single target.

00:02:40.020 --> 00:02:41.590
But in jail time application,

00:02:41.590 --> 00:02:43.900
we could have 30 to 50 targets.

00:02:43.900 --> 00:02:45.250
In that case,

00:02:45.250 --> 00:02:49.600
it just won't suffice that we display all the messages in the console,

00:02:49.600 --> 00:02:50.670
for example,

00:02:50.670 --> 00:02:51.700
of the bull fails,

00:02:51.700 --> 00:02:56.580
then it would be difficult to trace the ever looking at all these text.

00:02:56.580 --> 00:03:02.420
And sometimes the text would be so much that the command line tool will not accommodate.

00:03:02.420 --> 00:03:09.240
So we have a functionality called record with which we can store all the log messages in a

00:03:09.240 --> 00:03:10.380
particular file.

00:03:10.380 --> 00:03:11.120
In our case,

00:03:11.120 --> 00:03:14.210
we're dumping all that data into buildup log.

00:03:14.210 --> 00:03:16.100
And so if you go there,

00:03:16.100 --> 00:03:18.300
you'd be able to say this file,

00:03:18.300 --> 00:03:19.150
It's open it.

00:03:19.150 --> 00:03:25.450
So you have all the log messages.

00:03:25.450 --> 00:03:27.560
Now,

00:03:27.560 --> 00:03:32.090
what kind of messages will get shown up here is dependent on the log level.

00:03:32.090 --> 00:03:35.200
In order to understand log level,

00:03:35.200 --> 00:03:39.150
you need to have some understanding on logging mechanism in general.

00:03:39.150 --> 00:03:42.310
But just to give you an idea on what is logging,

00:03:42.310 --> 00:03:47.520
it would help you trace the problem in your code right from the command line or the logs

00:03:47.520 --> 00:03:48.600
that could generated,

00:03:48.600 --> 00:03:50.180
for example,

00:03:50.180 --> 00:03:51.390
have the dollar file.

00:03:51.390 --> 00:03:55.440
I'm going to introduce some sort statements in here since out,

00:03:55.440 --> 00:04:01.450
and I'm going to say we entered addition Method something off that sort.

00:04:01.450 --> 00:04:02.570
Likewise,

00:04:02.570 --> 00:04:04.420
after we exited the logic in here,

00:04:04.420 --> 00:04:08.750
I'm going to put another sort statement stating that were exiting out of this method.

00:04:08.750 --> 00:04:14.850
If I do that and when I run the program from the command line for getting better,

00:04:14.850 --> 00:04:19.660
it would be easier for me to trace where there is coming from because I'll be able to see

00:04:19.660 --> 00:04:23.080
those messages that I'm testifying over here,

00:04:23.080 --> 00:04:23.870
for example,

00:04:23.870 --> 00:04:25.680
if there is a matter of it in this logic,

00:04:25.680 --> 00:04:31.480
I would be able to know that it isn't this method addition where there is occuring

00:04:31.480 --> 00:04:33.490
something of that sort.

00:04:33.490 --> 00:04:34.790
Well,

00:04:34.790 --> 00:04:39.130
a simple file like this maybe assault statement would suffice.

00:04:39.130 --> 00:04:40.660
But for larger projects,

00:04:40.660 --> 00:04:43.750
we might be needing a framework like lock for J,

00:04:43.750 --> 00:04:47.950
which would offer a lot of flexibility and especially meant for logging,

00:04:47.950 --> 00:04:52.150
basically get more control than you would do with this ISAF statement.

00:04:52.150 --> 00:04:53.520
For example,

00:04:53.520 --> 00:04:58.880
all these logging frame books will support the following levels off longs Whatever

00:04:58.880 --> 00:04:59.820
mentioned here,

00:04:59.820 --> 00:05:04.610
like putting a statement stating that you have entered the addition method exiting out of

00:05:04.610 --> 00:05:08.950
the edition matter all that can be categorized as in for logs.

00:05:08.950 --> 00:05:10.460
And for example,

00:05:10.460 --> 00:05:15.600
let's say that I'm wrapping this court on Try catch block and there's some exception.

00:05:15.600 --> 00:05:21.220
Then I can log a statement saying that it is and ever or warning etcetera.

00:05:21.220 --> 00:05:21.800
And later,

00:05:21.800 --> 00:05:23.190
when I use the two like aunt,

00:05:23.190 --> 00:05:26.630
I can specify the kind of logs that I want to view.

00:05:26.630 --> 00:05:27.430
For example,

00:05:27.430 --> 00:05:30.300
if you want to see in flocks Aiken tell the same.

00:05:30.300 --> 00:05:31.390
Now,

00:05:31.390 --> 00:05:33.970
if you want to get more specific unsee only other logs,

00:05:33.970 --> 00:05:35.240
I can tell the same.

00:05:35.240 --> 00:05:39.850
Basically logging mechanism will save your time trying to find the error,

00:05:39.850 --> 00:05:44.350
and this attribute in here will help you specify the same.

00:05:44.350 --> 00:05:47.450
You can set any off these options,

00:05:47.450 --> 00:05:50.370
depending on what kind of logs that you want to see.

00:05:50.370 --> 00:05:52.780
No case I said it to bare boards.

00:05:52.780 --> 00:05:57.450
But you can also say Debug said of Ireland,

00:05:57.450 --> 00:05:59.050
That's on it again.

00:05:59.050 --> 00:06:00.890
And this time,

00:06:00.890 --> 00:06:05.430
Oops with how annettor it's notable to delete the falling directory.

00:06:05.430 --> 00:06:07.450
That's because we have this file open.

00:06:07.450 --> 00:06:12.350
Let's close this file and then try to run again.

00:06:12.350 --> 00:06:16.860
Okay,

00:06:16.860 --> 00:06:17.850
now I got it.

00:06:17.850 --> 00:06:20.760
We have the file open in browser as Ville.

00:06:20.760 --> 00:06:23.210
Let's run it again.

00:06:23.210 --> 00:06:27.250
And this time it worked.

00:06:27.250 --> 00:06:29.470
So in our log file,

00:06:29.470 --> 00:06:32.170
we should have the debug logs.

00:06:32.170 --> 00:06:36.050
This time you can see them here.

00:06:36.050 --> 00:06:45.890
But we're also dilating the directory before performing Java Doc to clean up things.

00:06:45.890 --> 00:06:47.920
Well,

00:06:47.920 --> 00:06:49.270
I don't have to mention that.

00:06:49.270 --> 00:06:51.080
Anyway,

00:06:51.080 --> 00:06:52.370
I think this is about it.

00:06:52.370 --> 00:06:53.450
See you soon.

