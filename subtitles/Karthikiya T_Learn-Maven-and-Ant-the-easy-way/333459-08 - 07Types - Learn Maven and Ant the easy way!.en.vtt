WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:00.760
in this video,

00:00:00.760 --> 00:00:08.270
we're going to talk about types and end types and and is different from types and Java in

00:00:08.270 --> 00:00:08.670
Java.

00:00:08.670 --> 00:00:10.360
If you're creating a class file,

00:00:10.360 --> 00:00:14.050
then that means we're essentially creating a custom data type.

00:00:14.050 --> 00:00:15.550
But where has an end?

00:00:15.550 --> 00:00:19.260
Types just simply means set off tags,

00:00:19.260 --> 00:00:21.690
and each side will have a certain responsibility.

00:00:21.690 --> 00:00:23.490
It's as simple as that,

00:00:23.490 --> 00:00:26.290
but then we're this called types.

00:00:26.290 --> 00:00:31.400
That's because each one of these times that we're going to discuss now is associated with

00:00:31.400 --> 00:00:33.940
the Java class file behind the scenes.

00:00:33.940 --> 00:00:36.360
And so these are called types.

00:00:36.360 --> 00:00:38.070
I hope that makes sense.

00:00:38.070 --> 00:00:39.590
So let's move on.

00:00:39.590 --> 00:00:40.110
First,

00:00:40.110 --> 00:00:42.610
let's talk about the class file set.

00:00:42.610 --> 00:00:50.010
But in order to use this way to first include set off libraries that this tag requires the

00:00:50.010 --> 00:00:52.450
stand doesn't work without these libraries.

00:00:52.450 --> 00:00:56.110
These libraries are called bite court,

00:00:56.110 --> 00:01:01.440
engineering library or simply BCL and are provided by Apache Dog.

00:01:01.440 --> 00:01:05.250
So this is a link from where you can download that jar file.

00:01:05.250 --> 00:01:05.880
Well,

00:01:05.880 --> 00:01:09.750
you would actually get to download a zip file it extracted,

00:01:09.750 --> 00:01:12.640
and then you get this folder inside.

00:01:12.640 --> 00:01:12.800
What?

00:01:12.800 --> 00:01:14.600
You'll find this jar file be sealed.

00:01:14.600 --> 00:01:15.750
Whatever the washing,

00:01:15.750 --> 00:01:21.850
you download or jar dis copy it into the Libdeh tree off and home.

00:01:21.850 --> 00:01:23.300
In my case,

00:01:23.300 --> 00:01:25.150
this is the part for me.

00:01:25.150 --> 00:01:27.560
And here's a live directory.

00:01:27.560 --> 00:01:32.250
You don't have to include all other Giles that are here.

00:01:32.250 --> 00:01:33.710
You can just simply delete them.

00:01:33.710 --> 00:01:36.060
So,

00:01:36.060 --> 00:01:36.300
no,

00:01:36.300 --> 00:01:37.410
After you do that,

00:01:37.410 --> 00:01:39.350
you can start using these tax.

00:01:39.350 --> 00:01:39.920
So first,

00:01:39.920 --> 00:01:45.140
let's talk about the class file set for this purpose have created this build file.

00:01:45.140 --> 00:01:48.040
Now this bill file looks little complex,

00:01:48.040 --> 00:01:49.010
but believe me,

00:01:49.010 --> 00:01:50.270
it's very easy to understand.

00:01:50.270 --> 00:01:50.900
I'll walk you through,

00:01:50.900 --> 00:01:51.250
though.

00:01:51.250 --> 00:01:54.960
And since our XML files are getting little complex,

00:01:54.960 --> 00:02:02.250
it's time to install a plug in like this XML tools that will help us give proper form it

00:02:02.250 --> 00:02:07.300
into a maximal document and the way you don't what it is going to this plugging manager.

00:02:07.300 --> 00:02:12.250
And then you would be able to find the XML tools plugging in here to select it and click

00:02:12.250 --> 00:02:12.940
install.

00:02:12.940 --> 00:02:13.980
You're good to go.

00:02:13.980 --> 00:02:15.670
And once you do that,

00:02:15.670 --> 00:02:19.050
even if you mess with maximal fire like this,

00:02:19.050 --> 00:02:26.330
you can just simply do control out shift and letter B that would bring proper indentation

00:02:26.330 --> 00:02:31.350
to your maximal document so that it looks little clean and neat,

00:02:31.350 --> 00:02:32.650
more readable,

00:02:32.650 --> 00:02:33.310
etcetera.

00:02:33.310 --> 00:02:36.610
So let's try to understand what's happening in here.

00:02:36.610 --> 00:02:38.650
Let's start with the default target,

00:02:38.650 --> 00:02:43.390
which has test and is dependent on the compile target.

00:02:43.390 --> 00:02:47.350
The Compel toga is in turn dependent on the clean target,

00:02:47.350 --> 00:02:49.310
which is the final target,

00:02:49.310 --> 00:02:52.600
but we'll talk about the clean target in a moment.

00:02:52.600 --> 00:02:55.700
Let's see what's happening inside the compound target.

00:02:55.700 --> 00:02:58.550
We're trying to compile a couple of Java files,

00:02:58.550 --> 00:03:03.510
which are these two general files and the test door.

00:03:03.510 --> 00:03:05.480
Joe is actually dependent on hello,

00:03:05.480 --> 00:03:06.550
world or Java.

00:03:06.550 --> 00:03:08.250
Let me show you what I mean.

00:03:08.250 --> 00:03:11.830
So he rode off to files test.

00:03:11.830 --> 00:03:15.150
Our job is actually creating an object off Hello world,

00:03:15.150 --> 00:03:20.860
which is this and it has a simple method that displays a hell of a mess.

00:03:20.860 --> 00:03:23.240
Age after instance,

00:03:23.240 --> 00:03:26.350
she ater we're just calling this method display message.

00:03:26.350 --> 00:03:33.620
But the point here is this test or Java is actually dependent on hello World are Java and

00:03:33.620 --> 00:03:41.000
this is our task is compiling those two general files and in here we have provided the

00:03:41.000 --> 00:03:46.050
class part class part that points to the current directory and the reason why we need to

00:03:46.050 --> 00:03:51.060
include this class parties because before we try to compile the test or Java,

00:03:51.060 --> 00:03:54.800
we need to have the dark class file off the seller world.

00:03:54.800 --> 00:03:57.390
Only then will this get compiled.

00:03:57.390 --> 00:03:58.200
Because,

00:03:58.200 --> 00:03:58.890
as I mentioned,

00:03:58.890 --> 00:04:01.020
just our job is dependent on this.

00:04:01.020 --> 00:04:07.660
So once we're done with this camp a target we would move on to test our get written,

00:04:07.660 --> 00:04:12.680
which we're trying to create a jar file by including all the class files that were Gestion

00:04:12.680 --> 00:04:13.170
Richard.

00:04:13.170 --> 00:04:14.750
And for that,

00:04:14.750 --> 00:04:19.830
we're going to make use off this class files that type class files that is similar to a

00:04:19.830 --> 00:04:20.600
file set.

00:04:20.600 --> 00:04:26.270
But the difference is you don't have to mention all the list of files you want to include,

00:04:26.270 --> 00:04:28.890
but rather just mentioned one root file.

00:04:28.890 --> 00:04:29.630
In our case,

00:04:29.630 --> 00:04:32.520
it's test the name of the class file,

00:04:32.520 --> 00:04:35.180
and this class falls that is actually going to take care off,

00:04:35.180 --> 00:04:39.040
including all the files that this class file is dependent on.

00:04:39.040 --> 00:04:45.560
That means this is also going to include the hello world class file that this test class is

00:04:45.560 --> 00:04:48.050
dependent on as simple as that.

00:04:48.050 --> 00:04:50.430
Whereas if you use a pile set,

00:04:50.430 --> 00:04:57.400
then you'd have to mention all the files all wear yourself now actually weaken just include

00:04:57.400 --> 00:04:59.850
this as part of the job task itself.

00:04:59.850 --> 00:05:03.780
But as I've already mentioned,

00:05:03.780 --> 00:05:08.550
if you want to use it across multiple task than you would take it out off the target,

00:05:08.550 --> 00:05:16.300
give it and identify where and then reference to it isn't that I didn't fire just as we did

00:05:16.300 --> 00:05:16.720
here.

00:05:16.720 --> 00:05:18.750
So that's about the file set.

00:05:18.750 --> 00:05:21.750
That's what is described in here.

00:05:21.750 --> 00:05:26.640
Let's run our XML INSEE What's going to happen?

00:05:26.640 --> 00:05:32.480
So it has compelled those two files as,

00:05:32.480 --> 00:05:33.150
alas,

00:05:33.150 --> 00:05:34.980
built Jarratt off it.

00:05:34.980 --> 00:05:39.750
And if you go to the directory when did have all those files,

00:05:39.750 --> 00:05:45.070
let's see what's going on inside this jar file,

00:05:45.070 --> 00:05:49.070
and we should be able to see not just test art class file,

00:05:49.070 --> 00:05:52.550
but also the hello World Open with when,

00:05:52.550 --> 00:05:52.910
Dr.

00:05:52.910 --> 00:05:56.990
And sure enough,

00:05:56.990 --> 00:05:58.450
we have those two files.

00:05:58.450 --> 00:06:02.380
Although we just mentioned only one filing our class part,

00:06:02.380 --> 00:06:03.540
said Tag,

00:06:03.540 --> 00:06:07.750
coming to description tack.

00:06:07.750 --> 00:06:10.850
It will allow us to provide description to a project,

00:06:10.850 --> 00:06:16.470
and I've already put that in the same file.

00:06:16.470 --> 00:06:21.650
But in order to display this description unit to provide the falling argument.

00:06:21.650 --> 00:06:26.150
So let's carpet and try to see how it works,

00:06:26.150 --> 00:06:29.950
and here is the description.

00:06:29.950 --> 00:06:35.140
We also got patents that tag.

00:06:35.140 --> 00:06:38.450
I've used this as well in our example.

00:06:38.450 --> 00:06:46.110
Hair it iss Pretty simple if you take a look at this file set instead off me.

00:06:46.110 --> 00:06:52.300
Putting this to instructions in here as part off a file set created a pattern set that will

00:06:52.300 --> 00:06:57.710
help us specify a baton using which will be able to identify set off files.

00:06:57.710 --> 00:06:58.750
In our case,

00:06:58.750 --> 00:07:02.510
it's both dark class file as well as the door jar file,

00:07:02.510 --> 00:07:05.220
and we made it part of this task dilate,

00:07:05.220 --> 00:07:07.350
and that's part off a clean target.

00:07:07.350 --> 00:07:14.350
So that's basically going to delete the jar fell and class files that that are created so

00:07:14.350 --> 00:07:16.080
that when we run the build file,

00:07:16.080 --> 00:07:19.870
the Camp Alan Desk task will create new files.

00:07:19.870 --> 00:07:20.450
For us,

00:07:20.450 --> 00:07:24.650
it is simple.

00:07:24.650 --> 00:07:26.910
Similarly,

00:07:26.910 --> 00:07:29.890
we also have filed set with talked about it already.

00:07:29.890 --> 00:07:34.850
It will help us include a list off files best on a certain pattern.

00:07:34.850 --> 00:07:37.280
Finalist is similar to a file set,

00:07:37.280 --> 00:07:44.530
but the differences it would l love you to include a specific file and know that this time

00:07:44.530 --> 00:07:47.010
the tag is not include but rather file,

00:07:47.010 --> 00:07:49.250
and that points to a file.

00:07:49.250 --> 00:07:54.750
The door set is actually more or less same as file set,

00:07:54.750 --> 00:07:57.650
except instead off,

00:07:57.650 --> 00:07:59.180
including list off files.

00:07:59.180 --> 00:08:03.170
It would include list off directories or just as with files,

00:08:03.170 --> 00:08:07.400
that you can also use this tag exclude to exclude certain directories.

00:08:07.400 --> 00:08:07.970
In our case,

00:08:07.970 --> 00:08:11.360
we wanted to exclude all the directories that has,

00:08:11.360 --> 00:08:11.760
ah,

00:08:11.760 --> 00:08:14.200
word test in it.

00:08:14.200 --> 00:08:16.990
And this is actually used in real world projects as well,

00:08:16.990 --> 00:08:21.990
because we don't want to include Jabba files that are part off unit testing.

00:08:21.990 --> 00:08:22.670
Like J.

00:08:22.670 --> 00:08:23.350
Unit Market,

00:08:23.350 --> 00:08:24.080
etcetera.

00:08:24.080 --> 00:08:28.050
They don't have any role during run time off for application.

00:08:28.050 --> 00:08:32.020
We want multi wrote files that as well,

00:08:32.020 --> 00:08:33.820
and that's actually combination off.

00:08:33.820 --> 00:08:35.600
These two files it as,

00:08:35.600 --> 00:08:36.160
alas,

00:08:36.160 --> 00:08:38.050
they're set,

00:08:38.050 --> 00:08:45.330
so you can not only include set off directories but also set off specific files.

00:08:45.330 --> 00:08:46.310
Etcetera,

00:08:46.310 --> 00:08:47.670
the filter said,

00:08:47.670 --> 00:08:48.430
is interesting.

00:08:48.430 --> 00:08:48.830
In fact,

00:08:48.830 --> 00:08:52.440
they have to use it with a little bit off care.

00:08:52.440 --> 00:08:54.350
It can easily mess things up.

00:08:54.350 --> 00:08:55.430
Basically,

00:08:55.430 --> 00:08:59.810
it could be part off any task that supports filter set,

00:08:59.810 --> 00:09:02.400
an example of which can be seen here.

00:09:02.400 --> 00:09:10.780
What we're trying to do with the statement is we're trying to copy this particular file to

00:09:10.780 --> 00:09:12.070
another directory.

00:09:12.070 --> 00:09:13.540
But while coping,

00:09:13.540 --> 00:09:18.460
the filter will actually help us replace their Qurans off the world.

00:09:18.460 --> 00:09:21.050
Date with today's date,

00:09:21.050 --> 00:09:22.150
similarly,

00:09:22.150 --> 00:09:24.350
can have many more filters.

00:09:24.350 --> 00:09:32.650
So the text where will actually go through this filtering process line by line and text

00:09:32.650 --> 00:09:34.210
will be replaced accordingly.

00:09:34.210 --> 00:09:40.050
There's just another example of filter set.

00:09:40.050 --> 00:09:45.950
All I've done here is I've taken out this hot off task.

00:09:45.950 --> 00:09:51.020
Give it an identify where to reference it from the task.

00:09:51.020 --> 00:09:55.250
So both will accomplish same.

00:09:55.250 --> 00:10:01.050
But the difference is we can now referred to this filter set from here.

00:10:01.050 --> 00:10:01.400
Isn't,

00:10:01.400 --> 00:10:02.910
isn't gets identified.

00:10:02.910 --> 00:10:03.860
Hold it.

00:10:03.860 --> 00:10:06.070
That's very much it on types.

00:10:06.070 --> 00:10:07.280
See you soon.

