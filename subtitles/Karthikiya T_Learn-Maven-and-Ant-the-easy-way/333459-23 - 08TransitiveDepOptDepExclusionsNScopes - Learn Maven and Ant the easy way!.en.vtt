WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.340
in the sweeter we're going to talk about transitive Dependence is,

00:00:04.340 --> 00:00:11.700
but in the process will also understand what are optional dependencies and exclusions in

00:00:11.700 --> 00:00:12.290
here.

00:00:12.290 --> 00:00:13.810
Based on this diagram,

00:00:13.810 --> 00:00:21.010
we can say that project is dependent on Project Be and Project B is dependent on Project C

00:00:21.010 --> 00:00:21.740
and D.

00:00:21.740 --> 00:00:25.440
So let's say that you're working with Project A and you have,

00:00:25.440 --> 00:00:30.690
and you have the falling tag in your palm that XML telling maven that your project is

00:00:30.690 --> 00:00:33.790
dependent on Project B and similarly,

00:00:33.790 --> 00:00:38.400
in the bomb that XML off project be is going to have the following.

00:00:38.400 --> 00:00:42.040
Dependence is telling me even that it depends on projects C and D.

00:00:42.040 --> 00:00:44.250
Now in your a project.

00:00:44.250 --> 00:00:46.550
When you try to initiate the maven build,

00:00:46.550 --> 00:00:49.800
it is not only going to download the project,

00:00:49.800 --> 00:00:51.950
be jar from the repository,

00:00:51.950 --> 00:00:57.200
but also the jar files that product B is dependent on.

00:00:57.200 --> 00:00:58.750
In other words,

00:00:58.750 --> 00:01:03.000
product A is indirectly dependent on product C and D,

00:01:03.000 --> 00:01:06.710
and some of it is going to download those jars as well.

00:01:06.710 --> 00:01:09.620
And that's why in a pond or XML,

00:01:09.620 --> 00:01:15.000
although we have defined only limited set off dependence is even has actually don't looted

00:01:15.000 --> 00:01:20.160
a host of other jars because it has not only don't look at the dependencies,

00:01:20.160 --> 00:01:28.960
but also dependence is off our dependencies so we can say that product A is transitive lee

00:01:28.960 --> 00:01:32.980
dependent on product C and D or another words.

00:01:32.980 --> 00:01:41.340
Project A is directly dependent on Project Be and Project A is indirectly dependent on

00:01:41.340 --> 00:01:41.750
products.

00:01:41.750 --> 00:01:42.560
Cnd.

00:01:42.560 --> 00:01:46.250
So that's what is transitive dependency is,

00:01:46.250 --> 00:01:48.320
but it comes with the problem.

00:01:48.320 --> 00:01:49.260
The problem is,

00:01:49.260 --> 00:01:54.540
in some cases we may not be needing all the jar files in order for our project to work.

00:01:54.540 --> 00:01:55.450
I mean,

00:01:55.450 --> 00:01:56.230
for example,

00:01:56.230 --> 00:02:02.090
let's say that project see jar file is required for project Be in order for it to build,

00:02:02.090 --> 00:02:04.980
but is not required for our project.

00:02:04.980 --> 00:02:09.550
It's only for the purpose off project be compilation toe work.

00:02:09.550 --> 00:02:17.340
So the developers off project be can mention that the dependency off project see is

00:02:17.340 --> 00:02:18.450
optional,

00:02:18.450 --> 00:02:23.410
meaning that Project B is explicitly mentioning that whoever is going to mention the

00:02:23.410 --> 00:02:28.650
project based dependency may not be requiring to download the Project C.

00:02:28.650 --> 00:02:31.090
So now in your project A.

00:02:31.090 --> 00:02:33.250
If you try to add the dependency of project,

00:02:33.250 --> 00:02:39.450
be this time maven will not download project see artifact at all since it is set to

00:02:39.450 --> 00:02:41.160
optional in Project Be.

00:02:41.160 --> 00:02:47.150
But it is going to download Project Dedo because it is still not an optional dependency.

00:02:47.150 --> 00:02:48.650
But in some cases,

00:02:48.650 --> 00:02:50.180
due to bad practices,

00:02:50.180 --> 00:02:54.020
products may not define the dependencies well up to mark.

00:02:54.020 --> 00:02:54.870
For example,

00:02:54.870 --> 00:02:59.190
let's say that Project B has for gotten to make this dependency as optional.

00:02:59.190 --> 00:03:04.240
So which means project see will be downloaded in his mission occupying the space.

00:03:04.240 --> 00:03:06.550
But as a developer of Project A,

00:03:06.550 --> 00:03:12.080
you realized that the projects is not needed for your project to run such as fully.

00:03:12.080 --> 00:03:13.790
Then you can do the following.

00:03:13.790 --> 00:03:17.520
You can put this exclusion stag,

00:03:17.520 --> 00:03:18.950
just as you see here.

00:03:18.950 --> 00:03:25.340
You see exclusions under which you would list down all the exclusions with this explosion

00:03:25.340 --> 00:03:25.920
tag,

00:03:25.920 --> 00:03:28.900
and you would provide the group idea in the artifact I D.

00:03:28.900 --> 00:03:32.540
That you wanted to exclude from your projects class part.

00:03:32.540 --> 00:03:38.380
So by specifying so maven would download everything except products,

00:03:38.380 --> 00:03:39.550
sees jar file.

00:03:39.550 --> 00:03:44.350
You can also use the symbol Star has a value cod.

00:03:44.350 --> 00:03:49.810
So it's just going to simply not include all these transit er dependencies.

00:03:49.810 --> 00:03:56.040
So this is one of the circumstances where you might need to exclude a dependency that is

00:03:56.040 --> 00:04:00.730
not needed in your project or another case of exclusion Could be.

00:04:00.730 --> 00:04:04.900
Maybe you wanted to manage some of the dependencies on your own in that kids,

00:04:04.900 --> 00:04:10.810
you can instruct Maven to exclude those dependencies and not download from the depository

00:04:10.810 --> 00:04:15.550
by using this exclusion tag under the dependency tank.

00:04:15.550 --> 00:04:17.260
And unfortunately,

00:04:17.260 --> 00:04:22.700
we can't demonstrate this in our local machine because we need a central depository,

00:04:22.700 --> 00:04:26.620
our repository to demonstrate this at the moment,

00:04:26.620 --> 00:04:28.860
we don't have a real purpose to set up.

00:04:28.860 --> 00:04:30.960
Our own depository has evolved,

00:04:30.960 --> 00:04:34.340
we mentioned If you're working for an organization,

00:04:34.340 --> 00:04:36.240
they must have already done that.

00:04:36.240 --> 00:04:40.950
And typically developer would never get to really set up the depositories.

00:04:40.950 --> 00:04:46.850
But what doper would do is to play with maven tool through form that XML.

00:04:46.850 --> 00:04:49.670
So that's about the transitive dependency.

00:04:49.670 --> 00:04:54.870
Is optional dependencies and exclusions pretty straightforward?

00:04:54.870 --> 00:04:55.940
Lastly,

00:04:55.940 --> 00:05:00.390
I would like to mention that the dependency scope will also affect the transitive

00:05:00.390 --> 00:05:01.340
dependency is,

00:05:01.340 --> 00:05:02.970
And for this purpose,

00:05:02.970 --> 00:05:05.900
I have actually created this table.

00:05:05.900 --> 00:05:12.160
You can find this in the document with the name transitive dependency and scope store dogs

00:05:12.160 --> 00:05:16.250
under the list of files you have downloaded and what this diagram tells us,

00:05:16.250 --> 00:05:19.040
is that when you have a data dependency,

00:05:19.040 --> 00:05:26.700
a off the falling scope and when you have a transitive dependency off the falling scope

00:05:26.700 --> 00:05:28.170
related in blue,

00:05:28.170 --> 00:05:32.740
then the combination off to would result in the falling scope.

00:05:32.740 --> 00:05:35.200
Let me give an example so that you'll understand better.

00:05:35.200 --> 00:05:37.710
Let's say that we have did that.

00:05:37.710 --> 00:05:46.550
A dependency with the campus scope and the transfer dependency with the scope as run time.

00:05:46.550 --> 00:05:48.800
Let's go back to our image.

00:05:48.800 --> 00:05:50.570
Explain what I mean.

00:05:50.570 --> 00:05:53.370
So from this picture,

00:05:53.370 --> 00:05:54.050
let's other.

00:05:54.050 --> 00:06:00.810
The scope off Project B is set to compile and project is transitive dependency.

00:06:00.810 --> 00:06:01.810
Say Project D,

00:06:01.810 --> 00:06:02.690
for instance,

00:06:02.690 --> 00:06:05.950
is set with the scope off runtime.

00:06:05.950 --> 00:06:13.930
Then the resulting scope off Project D on Project A would be with the scope one time.

00:06:13.930 --> 00:06:16.300
Similarly,

00:06:16.300 --> 00:06:18.950
we have have the scopes,

00:06:18.950 --> 00:06:29.540
and the stable explains about all of them various combinations and both provided and tests

00:06:29.540 --> 00:06:31.160
or non transitive.

00:06:31.160 --> 00:06:32.950
And that's what these are set to blank.

00:06:32.950 --> 00:06:39.050
That means you can't have a project that is transitive dependent on another project whose

00:06:39.050 --> 00:06:44.590
scope is set to either provided or test pretty straightforward.

00:06:44.590 --> 00:06:45.740
So that's it.

00:06:45.740 --> 00:06:49.020
Don't transitive dependencies thing that will suffice.

00:06:49.020 --> 00:06:50.050
So you assume

