WEBVTT
1
00:00:02.270 --> 00:00:08.660
As mentioned before we will use a Mongo DB database and specifically Mongoose which will help us to

2
00:00:08.660 --> 00:00:11.930
manage the connection between the backend and the database.

3
00:00:11.930 --> 00:00:17.440
Therefore we first have to install mongoose in our project and then we'll see where we have to implement

4
00:00:17.440 --> 00:00:20.350
it in our code to install mongoose.

5
00:00:20.360 --> 00:00:26.740
We simply use npm install dash dash save mongoose.

6
00:00:26.870 --> 00:00:32.720
This will take a few seconds and after that we can use Mongoose to be able to use it though we of course

7
00:00:32.720 --> 00:00:35.450
have to import it to our project.

8
00:00:35.450 --> 00:00:38.300
The question is Where do we have to import it.

9
00:00:38.300 --> 00:00:47.030
Well the core idea is that our general application doesn't make a lot of sense without the database.

10
00:00:47.030 --> 00:00:49.250
In the end because all our data.

11
00:00:49.310 --> 00:00:54.860
No matter if it's related to the user or to the places will be stored in the database and therefore

12
00:00:54.860 --> 00:00:57.950
we somehow will interact with this data.

13
00:00:57.950 --> 00:01:02.630
This means the right place to implement our connection to the database is here.

14
00:01:02.630 --> 00:01:06.770
Our app J is file so let's first import mongoose.

15
00:01:06.770 --> 00:01:14.670
Now with our well-known import syntax up here we require mongoose.

16
00:01:14.750 --> 00:01:16.370
Now we can use mongoose.

17
00:01:16.370 --> 00:01:18.550
The question is Where do we use it here.

18
00:01:18.560 --> 00:01:19.360
In our code.

19
00:01:19.430 --> 00:01:26.690
Well down here where we start up our back and server because as I said the logic should be as follows

20
00:01:27.170 --> 00:01:30.340
We first want to establish the connection to the database.

21
00:01:30.410 --> 00:01:36.200
If this connection is successful then we want to start our back and server in case the connection to

22
00:01:36.200 --> 00:01:38.000
the database was not successful.

23
00:01:38.000 --> 00:01:42.490
Well we don't need the server because we will for an error instead.

24
00:01:42.590 --> 00:01:48.620
The good thing is that the connection to the database thanks to Mongoose comes with an integrated feature

25
00:01:48.710 --> 00:01:58.090
to do so because we simply now use our Mongoose constant here and refer to our connect method connect

26
00:01:58.090 --> 00:02:04.450
returns a promise as the connection to the server is an asynchronous task and with that.

27
00:02:04.480 --> 00:02:12.520
This means that we can also make use of our then and our catch method right here which will allow us

28
00:02:12.520 --> 00:02:14.410
to create exactly the logic.

29
00:02:14.560 --> 00:02:18.490
I was just talking about before we dive into connect right here.

30
00:02:18.490 --> 00:02:26.400
Connect requires specific credentials as an argument to well connect our back into the Mongol TB database.

31
00:02:26.410 --> 00:02:28.560
We'd have to look at that in a few seconds.

32
00:02:28.780 --> 00:02:30.890
So let's first focus onto then and catch.

33
00:02:30.910 --> 00:02:36.800
Because if the connection was successful here well then we simply start our server.

34
00:02:36.850 --> 00:02:45.120
So we simply use a normal error function syntax right here and take our code and paste it right here.

35
00:02:45.990 --> 00:02:47.040
So that's the first case.

36
00:02:47.040 --> 00:02:54.270
If our connection was successful we start our back and server in case it was not successful we'll simply

37
00:02:54.270 --> 00:03:00.210
throw an error right here and here we could console log the error.

38
00:03:00.240 --> 00:03:01.710
So that's the start of logic.

39
00:03:01.710 --> 00:03:08.580
What is missing of course is here our connect method and you required argument to get this missing information.

40
00:03:08.580 --> 00:03:15.550
We have to google for Mongo D.B. Atlas and down here you can find one would you be Atlas to click onto

41
00:03:15.570 --> 00:03:20.080
it and go to sign in up here.

42
00:03:20.100 --> 00:03:26.020
You can simply log in with your username and your password and then here and now in a brand new project.

43
00:03:26.430 --> 00:03:30.930
Now we had a look at Mongol TB Atlas in more detail in the refresh module.

44
00:03:30.930 --> 00:03:36.500
Therefore I'll focus on three core settings required to establish te connection to our database.

45
00:03:36.600 --> 00:03:42.720
The first thing we have to do is we have to make sure that we can access that database from our current

46
00:03:42.960 --> 00:03:44.250
machine.

47
00:03:44.250 --> 00:03:50.970
Therefore we go to security and network access and add our current IP to these so-called IP whitelist

48
00:03:52.420 --> 00:03:58.290
if you click at IP address right here and now at current IP address you see your current IP address

49
00:03:58.380 --> 00:04:00.980
to your SD wide list entry and press confirm.

50
00:04:01.150 --> 00:04:04.500
This will take a few seconds and after that you get the first step.

51
00:04:04.570 --> 00:04:10.190
You can access TB from your current machine then statues change to active.

52
00:04:10.190 --> 00:04:11.990
Therefore step 1 is done.

53
00:04:12.020 --> 00:04:17.800
Now we also need to create a user which uses the specific network access we just created.

54
00:04:17.870 --> 00:04:22.730
For that we go to database access and you see we have some existing users here but we will create a

55
00:04:22.730 --> 00:04:24.590
new one by clicking.

56
00:04:24.590 --> 00:04:25.520
Add new user.

57
00:04:25.820 --> 00:04:27.430
Now you have to enter a user name.

58
00:04:27.440 --> 00:04:36.380
In my case I select menu and a password which show you here which will be maybe a cattle mind want to

59
00:04:36.380 --> 00:04:36.740
free.

60
00:04:36.770 --> 00:04:40.670
Not the most secure password but totally sufficient for all purpose here.

61
00:04:40.700 --> 00:04:45.320
Make sure to select read and drive to any database as the user privileges.

62
00:04:45.380 --> 00:04:48.050
And with that we can add this user now.

63
00:04:48.050 --> 00:04:50.010
Again this will take a few seconds.

64
00:04:50.210 --> 00:04:52.490
The user was successfully created.

65
00:04:52.490 --> 00:04:57.150
Now we can go back to our cluster and if we now select connect.

66
00:04:57.650 --> 00:05:03.520
We can now choose a connection that put between our back end and the Mongol TB database.

67
00:05:03.530 --> 00:05:07.760
We can connect with the Mongol shell or Mongol to be compass in our case.

68
00:05:07.760 --> 00:05:10.570
Connect the application is the right choice.

69
00:05:10.670 --> 00:05:14.330
Here we select node chests and free dot 0 or later in our case.

70
00:05:14.330 --> 00:05:18.170
And here we can now finally find this so-called connection string.

71
00:05:18.290 --> 00:05:21.800
The string is what we need to be able to access our database.

72
00:05:21.800 --> 00:05:27.830
Important though we have to use our user name and password so the data we just added for user to make

73
00:05:27.830 --> 00:05:34.700
sure that data access is configured correctly so we can copy this and now added right here in quotation

74
00:05:34.700 --> 00:05:37.950
marks of course to our connect method.

75
00:05:37.970 --> 00:05:42.350
Now very important we have to change the user name to menu in my case important.

76
00:05:42.350 --> 00:05:45.190
Use your own username and your own password here.

77
00:05:45.290 --> 00:05:50.570
By the time you're watching this by the way this data will not be longer valid so it doesn't make sense

78
00:05:50.570 --> 00:05:51.660
to copy these.

79
00:05:51.740 --> 00:05:53.300
The password was a cat.

80
00:05:53.300 --> 00:05:55.910
Mind want you free.

81
00:05:56.220 --> 00:06:00.390
And one other thing we can optionally change is right here.

82
00:06:00.390 --> 00:06:04.970
Test test is the default name for the database that you create.

83
00:06:05.040 --> 00:06:11.670
We will change this year and our project to places maybe with that we set up connection to our database.

84
00:06:11.670 --> 00:06:18.300
Let's save this and let us now run NPM start to see if we have any errors.

85
00:06:18.310 --> 00:06:20.070
No this works fine with that.

86
00:06:20.070 --> 00:06:21.150
Step 1 was done.

87
00:06:21.150 --> 00:06:26.700
The connection is established but of course we cannot add any data to the status base.

88
00:06:26.700 --> 00:06:30.450
This means in the next lecture it's time to setup our places model.
