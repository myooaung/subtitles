WEBVTT
1
00:00:02.110 --> 00:00:05.610
Let's create our own hook for that just to make it really clear.

2
00:00:05.770 --> 00:00:10.960
A hook is a normal jobs good function but a function that starts with the use.

3
00:00:10.990 --> 00:00:16.900
That's just a convention though more importantly a function which can share state for logic.

4
00:00:16.930 --> 00:00:25.090
So a function which can for example use use reducer or use state inside of it and which react and recognizes

5
00:00:25.480 --> 00:00:32.590
and uses such that when in this custom hook you do something that updates a state your component that

6
00:00:32.590 --> 00:00:34.930
uses your custom hook is re rendered.

7
00:00:34.930 --> 00:00:40.720
So it's a special function react recognize as you could say a special function you can use and functional

8
00:00:40.720 --> 00:00:47.620
components which react recognizes and where if inside of that function you change something that impacts

9
00:00:47.620 --> 00:00:52.080
the state react will re render a component that uses your customer.

10
00:00:52.120 --> 00:00:54.960
That is what hooks are about in the end.

11
00:00:55.120 --> 00:01:03.180
So let's create a custom hook and it should become clearer in our shared folder next to components.

12
00:01:03.250 --> 00:01:08.620
I'll add a hooks folder hooks because we will add more than one hook throughout this course.

13
00:01:08.620 --> 00:01:12.800
And here I want to add my form dash hook dot J as follows.

14
00:01:12.880 --> 00:01:15.870
You could also just name it form of course if you prefer that.

15
00:01:16.270 --> 00:01:24.600
Now in there I want to hold all my use reduce her logic that has set up a new place.

16
00:01:24.790 --> 00:01:32.980
So actually I don't want to be forced to import use reduce her and use callback in here but instead

17
00:01:32.980 --> 00:01:35.100
I want to import that into form hook.

18
00:01:35.110 --> 00:01:36.900
So there I want to import.

19
00:01:37.000 --> 00:01:40.470
Use callback and use reducer from react.

20
00:01:40.630 --> 00:01:46.690
Then in here I want to have my own function use form and your custom hooks.

21
00:01:46.750 --> 00:01:49.360
Always have to start with lower case use.

22
00:01:49.360 --> 00:01:54.010
That's a convention you should adhere to and it will export this function.

23
00:01:54.010 --> 00:01:55.150
So that's my own hook.

24
00:01:55.150 --> 00:02:04.090
Now I export it here now in new place I have my form reducer and I will cut dead from new place and

25
00:02:04.090 --> 00:02:11.220
instead add it here into the form hook set off the hook function just like this in there.

26
00:02:11.240 --> 00:02:17.120
We have a lot of logic that basically works standalone there are no external inputs that are required

27
00:02:17.120 --> 00:02:23.870
from our component dysfunction only needs information about the state and the action and all that information

28
00:02:23.870 --> 00:02:25.430
is passed through parameters.

29
00:02:25.430 --> 00:02:30.410
So this function should work just fine here in New Place component.

30
00:02:30.460 --> 00:02:32.950
I then also use use reducer.

31
00:02:32.950 --> 00:02:40.050
So let's cut this as well and move that into the custom hook here inside the hook function.

32
00:02:40.210 --> 00:02:41.810
Here I call use reducer.

33
00:02:41.830 --> 00:02:50.140
I got my form state I got this patch and here I now got some logic which is specific to component and

34
00:02:50.140 --> 00:02:55.990
should not live like that in the hook in general because not every component where we will use that

35
00:02:55.990 --> 00:03:03.610
hook will have title description and address inputs so we'll have to kind of take this initialization

36
00:03:03.610 --> 00:03:14.520
logic here for the inputs take it out of our use reduce recall in use form and instead may be expected

37
00:03:14.520 --> 00:03:26.250
here as an argument to our custom hook so that there I get my initial inputs parameter and I assign

38
00:03:26.250 --> 00:03:35.650
this here to inputs and I also get my initial form validity and I assign this here so that this is all

39
00:03:35.670 --> 00:03:42.800
not hardcoded into this use reducer initial state but can be set from outside when we use the customer.

40
00:03:44.410 --> 00:03:53.360
So back in New Place there I don't want to use that custom hook so I will import use form from going

41
00:03:53.360 --> 00:04:00.890
to the shared folder hooks for him hook and here the idea is that we can now call use form and then

42
00:04:00.890 --> 00:04:08.230
pass in our initial input validity as a first argument and the initial form validity in my case falls

43
00:04:08.450 --> 00:04:16.460
as a second argument does now initialize as my user user in my use form hook correctly hopefully we're

44
00:04:16.460 --> 00:04:23.810
not done though does Input handler should also be taken out of new place and be added to the form hook

45
00:04:24.710 --> 00:04:30.890
here I can add Input handler with use callback that's still important use the dispatch function which

46
00:04:30.890 --> 00:04:36.230
I get from the use reducer and then well leave my logic in here as it is

47
00:04:39.000 --> 00:04:44.280
now our hook should also return something because we're not interested in the form step inside of the

48
00:04:44.280 --> 00:04:49.350
hook we're interested in that state in the place where we used to look the same for the Input handler

49
00:04:49.500 --> 00:04:53.550
we need to shared this with the component which uses our custom hook.

50
00:04:53.550 --> 00:04:59.930
So here I will return an array by the way you can all return objects or just text or whatever you want.

51
00:04:59.940 --> 00:05:05.670
Hooks don't have to return arrays but here an array makes sense because I want to return my form state

52
00:05:05.970 --> 00:05:09.660
and Input handler so a pointer at this Input handler function.

53
00:05:09.810 --> 00:05:18.180
I returned both from inside my use form hook and was dead and new place I can get both here use form

54
00:05:18.180 --> 00:05:20.700
returns in array with exactly two elements.

55
00:05:20.820 --> 00:05:28.290
So on my own hook I can also use a radio structuring to get the forum state and the input change handler

56
00:05:31.110 --> 00:05:32.570
Input handler was the name before.

57
00:05:32.580 --> 00:05:34.740
So let's keep that name Input handler.

58
00:05:35.010 --> 00:05:38.500
We can assign any name we want here when using a radio structuring.

59
00:05:38.610 --> 00:05:45.360
So now I get that information back from my hook but the logic of that reduce runs on now lives inside

60
00:05:45.360 --> 00:05:48.680
of the hook and that hopefully shows the advantage of custom hooks.

61
00:05:48.840 --> 00:05:55.110
Our component now got leaner and we got that logic that stayed for logic and it is state full logic

62
00:05:55.250 --> 00:05:56.530
when we call this patch.

63
00:05:56.580 --> 00:05:58.290
We will re render a component.

64
00:05:58.290 --> 00:06:03.700
We got that state full logic in hook it because it's a hook and react knows this concept of hooks.

65
00:06:03.840 --> 00:06:09.660
When we update the state inside of our custom hook the component that uses our custom hook will update

66
00:06:09.720 --> 00:06:18.560
as well so therefore now if we save this ad place should work just fine here if I enter something and

67
00:06:18.560 --> 00:06:20.290
I have valid inputs everywhere.

68
00:06:20.390 --> 00:06:22.030
My overall form becomes valid.

69
00:06:22.100 --> 00:06:24.520
And if I invalidate the input it becomes invalid.

70
00:06:24.560 --> 00:06:25.550
If I submitted.

71
00:06:25.640 --> 00:06:27.920
We see all the data is there.

72
00:06:27.920 --> 00:06:29.880
So our custom hook works.

73
00:06:29.990 --> 00:06:31.660
And now we can use that custom hook.

74
00:06:31.670 --> 00:06:39.620
Also an update place and hence we're sharing all that for management input change handling logic.

75
00:06:39.620 --> 00:06:52.930
So let's go to update place and data import use form from shared hooks for Hook and now justice before

76
00:06:53.280 --> 00:07:02.590
in here we can called use form initialize our inputs and the form itself the form itself should be valid

77
00:07:02.620 --> 00:07:10.450
initially for the inputs here we will have a title input and for the title input whips we need to call

78
00:07:10.450 --> 00:07:18.050
in here for the tile input the value initially is let's initialize it below identified place initially

79
00:07:18.050 --> 00:07:29.000
is identified placed dot title is valid if that input is true therefore the cost it will be a non empty

80
00:07:29.000 --> 00:07:38.450
value and for description devalue is identified plays stored description and this will also be valid

81
00:07:38.720 --> 00:07:43.560
initially so then we get back our form state

82
00:07:46.110 --> 00:07:51.260
and we will also get back our input handler.

83
00:07:51.290 --> 00:07:52.810
So with that we can use both.

84
00:07:52.850 --> 00:08:01.350
We can use input handler here on the on input props of our input components and we can set the value

85
00:08:01.350 --> 00:08:08.730
here to form state DOT inputs dot titled value here in this case.

86
00:08:09.030 --> 00:08:16.570
And here on the description its form state inputs description dot value and the same for the validity.

87
00:08:16.590 --> 00:08:26.220
This is form state inputs description is valid excuse me title is valid so is valid at the end is important

88
00:08:26.220 --> 00:08:30.060
here and here its description is valid.

89
00:08:30.060 --> 00:08:35.760
Now please note that value and valid only are used in the input component to initialize the value.

90
00:08:35.760 --> 00:08:41.270
We could therefore also name it initial value if you wanted to maybe that is a bit clearer.

91
00:08:41.280 --> 00:08:46.880
To be honest so that there is no confusion that you think we're always setting a new value here.

92
00:08:46.890 --> 00:08:51.480
No we're just initializing this so inside of our custom component.

93
00:08:51.480 --> 00:09:02.050
Now in the input component we now should use initial value here and initial is valid here.

94
00:09:02.060 --> 00:09:06.390
So basically the props I'm passing here I named just initial ballots.

95
00:09:06.410 --> 00:09:15.510
So just initial valid here as well that's really important just to a white that does this confusing.

96
00:09:15.530 --> 00:09:21.980
So with that back to update place we're initializing these values we bind to input handler.

97
00:09:21.980 --> 00:09:27.620
Now we can also bind our button here and check form state is not valid.

98
00:09:27.620 --> 00:09:32.460
So if the form is not valid and only disable the button if that's the case.

99
00:09:32.840 --> 00:09:37.550
Now with that if you go to my places and click on add it initially the button is enabling of course

100
00:09:37.580 --> 00:09:45.830
because initially while the values are valid if I do empty this dota button becomes disabled it's the

101
00:09:45.830 --> 00:09:46.460
same here.

102
00:09:46.790 --> 00:09:48.700
If the description is too short it's disabled.

103
00:09:48.710 --> 00:09:50.620
So this seems to work.

104
00:09:50.660 --> 00:09:57.260
Now let's all make sure that submitting this works so an update plays we also can add our submit handler

105
00:09:57.500 --> 00:10:03.200
and I don't want to share this with you as forum because the submission logic is very specific to the

106
00:10:03.200 --> 00:10:05.710
component in which we do have the forum.

107
00:10:05.720 --> 00:10:10.880
So here I'll have my place updates submit handler or whoever you want to call it.

108
00:10:11.030 --> 00:10:17.300
We get the event and I will call event prevent default to prevent that form submission and the request

109
00:10:17.300 --> 00:10:23.600
to be sent and then console log form state data inputs to see what's stored in there and then we can

110
00:10:23.600 --> 00:10:33.010
bind place update submit handler to on submit here on our form and if we do all of that and click Update

111
00:10:33.050 --> 00:10:35.660
place does looks quite good.

112
00:10:35.660 --> 00:10:40.830
And if I change something here this should also be reflected.

113
00:10:40.890 --> 00:10:46.320
Let's see yeah I got the exclamation marks at the end here too.

114
00:10:46.410 --> 00:10:53.600
So this is working let's also see this yeah all looks good.

115
00:10:53.690 --> 00:11:00.530
So this is working and with Dad we created our own hook to reuse our state full form related logic.
