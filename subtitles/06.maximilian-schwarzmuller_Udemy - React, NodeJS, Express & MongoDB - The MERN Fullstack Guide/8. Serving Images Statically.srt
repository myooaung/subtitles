1
00:00:02,280 --> 00:00:05,430
We're still not seeing the image here despite using a correct.

2
00:00:05,430 --> 00:00:10,440
You are L because there is something important you have to understand about the back and coat or the

3
00:00:10,440 --> 00:00:14,610
way node express here works in service and general work.

4
00:00:14,790 --> 00:00:18,210
By default none of the files on the service side.

5
00:00:18,210 --> 00:00:24,510
So in our note express app are accessible from outside the server and that's good because otherwise

6
00:00:24,510 --> 00:00:30,960
we could just enter locally host five thousand slash app she asked and have a look at the source code

7
00:00:30,960 --> 00:00:31,480
there.

8
00:00:31,620 --> 00:00:38,700
But fortunately this does not work because every incoming request on the back end goes into our middleware

9
00:00:38,700 --> 00:00:43,950
funnel here in the end and it goes through all the different middleware this year and only the logic

10
00:00:43,960 --> 00:00:50,250
we have in an Middleware is executes so you can't request any file you can just go forward amend the

11
00:00:50,250 --> 00:00:55,320
wares and you ever have a request that's handled by one of the main lawyers or you don't.

12
00:00:55,320 --> 00:01:02,040
For example if we send a request to a U R L which ends with Slash API slash places we make it into our

13
00:01:02,040 --> 00:01:05,670
places routes and that's how the logic there it kicks off.

14
00:01:05,670 --> 00:01:10,900
But for some random image link we've got no middleware that would handle this.

15
00:01:10,980 --> 00:01:17,690
Now of course however we want to grant access to images and to do so we can add a new middleware maybe

16
00:01:17,690 --> 00:01:26,030
here after passing request bodies we can add a new general middleware and then filter for requests that

17
00:01:26,030 --> 00:01:34,730
start with uploads images so requests which have logos 5000 slash uploads slash images at the beginning

18
00:01:34,730 --> 00:01:40,820
of there you are L such requests will be handled by a special middleware which is actually built into

19
00:01:40,820 --> 00:01:49,070
Express Express static you can execute static as a method and this will return a middleware actually

20
00:01:49,550 --> 00:01:56,120
and this is a middleware which just returns you request that file static serving means Dad you just

21
00:01:56,120 --> 00:01:59,290
return a file you don't execute it you just return it.

22
00:02:00,270 --> 00:02:07,290
Now here we have to control which files in which folder we want to return express static.

23
00:02:07,290 --> 00:02:14,830
Then once a path pointing at the folder from which you want to serve files without any extra check.

24
00:02:15,120 --> 00:02:21,240
Now is such a path has to be an absolute path and we can build this with the path module which is built

25
00:02:21,240 --> 00:02:22,260
into node chess.

26
00:02:22,290 --> 00:02:26,820
So we imported with this syntax here and expose it on this path constant.

27
00:02:27,420 --> 00:02:37,010
And then here to static we pass our built path where we join two segments uploads and images.

28
00:02:37,280 --> 00:02:43,300
And this builds a new path pointing at the uploads images folder and any file in there.

29
00:02:43,370 --> 00:02:46,310
If we request it will be returned.

30
00:02:46,470 --> 00:02:52,540
Otherwise all files are locked down but files in this folder if requested are returned.

31
00:02:52,760 --> 00:02:57,490
If we save this and now we go back and we reload our app here.

32
00:02:57,740 --> 00:03:01,800
We see our image Dale for because now we're statically serving it.

33
00:03:01,940 --> 00:03:06,180
And with this the upload works and serving it works.

34
00:03:06,200 --> 00:03:14,680
Now of course we have no places for a user so let's make sure when we locked in that we can actually

35
00:03:14,680 --> 00:03:19,510
also add a place here and that we have an image upload here as well.

36
00:03:19,510 --> 00:03:25,990
Now this is a great practice for you because essentially the steps are the same for uploading an image

37
00:03:25,990 --> 00:03:26,800
for a user.

38
00:03:26,800 --> 00:03:31,060
So definitely try this on your own first in the next lectures we'll do it together.
