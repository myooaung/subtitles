WEBVTT
1
00:00:02.080 --> 00:00:07.140
So the next step for our users is now to make sure that we can use our log in.

2
00:00:07.150 --> 00:00:10.060
So this code right here because we can create a new user.

3
00:00:10.060 --> 00:00:15.930
Now we want to make sure that once we stored our credentials in the database we can also log in.

4
00:00:16.060 --> 00:00:22.360
One important note though before we start the password validation is still going to be some dummy code

5
00:00:22.480 --> 00:00:27.190
because at the moment we don't have any token which is sent with the password.

6
00:00:27.400 --> 00:00:29.740
So we cannot really validate our data.

7
00:00:30.070 --> 00:00:35.020
Therefore at the moment we only have a dummy code so to say which will simply check whether a user is

8
00:00:35.020 --> 00:00:39.700
existing and or if the password he enters is correct.

9
00:00:39.730 --> 00:00:43.310
So it's not a real log in which just implement this basic functionality.

10
00:00:43.450 --> 00:00:44.920
Just keep that in mind.

11
00:00:45.370 --> 00:00:50.560
However as I said we have to work on the log in here and decode logic is not that different from the

12
00:00:50.560 --> 00:00:52.770
one we saw for our sign up.

13
00:00:52.930 --> 00:00:55.420
So to get started will again delete this code right here.

14
00:00:55.540 --> 00:01:00.790
And now what I want to do is I first want to start with our custom e-mail validator that we already

15
00:01:00.790 --> 00:01:04.490
implemented up here for the sign up logic.

16
00:01:04.540 --> 00:01:10.900
So this code right here we can basically copy paste it because I again want to make sure that the e-mail

17
00:01:10.900 --> 00:01:14.560
address of the user is valid for that.

18
00:01:14.920 --> 00:01:19.340
Let's go down and let's paste this code right here.

19
00:01:19.340 --> 00:01:21.860
Maybe add a space here.

20
00:01:21.860 --> 00:01:23.330
One difference down here.

21
00:01:23.360 --> 00:01:27.120
Not signing up would fail but logging in would fail.

22
00:01:27.200 --> 00:01:29.270
But the general logic is the same.

23
00:01:29.270 --> 00:01:30.190
So that's step one.

24
00:01:30.200 --> 00:01:33.170
We validated our e-mail.

25
00:01:33.170 --> 00:01:39.170
Now let's continue with the actual check whether the user email or the password is correct.

26
00:01:39.170 --> 00:01:41.780
This is what I was referring to at the beginning of this video.

27
00:01:42.500 --> 00:01:47.780
It's not a real finished validation though it's just a dummy validation and the end to make sure the

28
00:01:47.780 --> 00:01:53.810
e-mail and or the password is stored in a database in case either mail or password is wrong the user

29
00:01:53.870 --> 00:01:54.830
cannot log in.

30
00:01:54.980 --> 00:01:57.540
I actually already said what we have to write in the code now.

31
00:01:57.650 --> 00:01:59.120
If you're and if what.

32
00:01:59.270 --> 00:02:08.810
Well if our existing user well is not stored in the database or if the existing user password so we

33
00:02:08.810 --> 00:02:14.920
can access the password property year well is not equal to the password that was entered.

34
00:02:15.500 --> 00:02:24.570
Well if one of these is the case then we again have an error with our HDP error and this time we can

35
00:02:24.570 --> 00:02:38.410
state invalid credentials could not log you in error code here would be for a 1 and we have to add return

36
00:02:38.560 --> 00:02:42.710
next again also nothing new to us.

37
00:02:42.750 --> 00:02:44.520
And with that we are actually done already.

38
00:02:44.640 --> 00:02:49.700
We cannot validate the e-mail and we can check whether the e-mail and the password are correct.

39
00:02:49.710 --> 00:02:52.510
Well if both is the case then we should be able to look in now.

40
00:02:52.620 --> 00:02:55.140
So let's save this and not get an error.

41
00:02:55.170 --> 00:02:56.130
Why do I get the error.

42
00:02:56.130 --> 00:02:59.060
Well because here find one is an asynchronous task.

43
00:02:59.070 --> 00:03:02.550
Therefore we should make sure to add async also right here.

44
00:03:02.670 --> 00:03:05.310
So make sure not to forget this If AND I'LL SAVE THIS SHOULD WORK.

45
00:03:05.310 --> 00:03:06.720
SO LET'S GO BACK TO postman.

46
00:03:06.750 --> 00:03:17.420
And here I'm not in sign in now but indeed log in root and we not only have to add two things email

47
00:03:17.450 --> 00:03:20.670
and password as we showed it right here.

48
00:03:20.900 --> 00:03:23.270
So let's delete this one.

49
00:03:23.270 --> 00:03:24.860
And now what is our e-mail.

50
00:03:24.860 --> 00:03:30.880
Well for that you can go to our database here in the U.S. collection.

51
00:03:30.880 --> 00:03:33.250
We have the e-mail test at test dot com.

52
00:03:33.250 --> 00:03:38.380
Let me simply copy paste this one right here and the corresponding password is here.

53
00:03:38.440 --> 00:03:39.640
Testers.

54
00:03:39.640 --> 00:03:41.340
So if ups.

55
00:03:41.440 --> 00:03:47.530
So if we do this and send we get back logged in.

56
00:03:47.830 --> 00:03:48.840
So this seems to work.

57
00:03:48.900 --> 00:03:54.470
If I now enter testers one as a password I get invalid credentials.

58
00:03:54.470 --> 00:04:01.350
So this seems to work and if I enter test one at test dot com this also doesn't work.

59
00:04:01.350 --> 00:04:03.440
Once again test a test outcome.

60
00:04:03.570 --> 00:04:05.890
We get these successful log in.

61
00:04:06.330 --> 00:04:08.790
So with that we can now log in.

62
00:04:08.790 --> 00:04:13.090
One thing is missing though and this is up here.

63
00:04:13.410 --> 00:04:14.950
Our get users constant.

64
00:04:14.970 --> 00:04:16.920
We have to work on that as a next step.
