WEBVTT
1
00:00:02.170 --> 00:00:06.030
We created our own hook but I'm not 100 percent happy with it yet.

2
00:00:06.130 --> 00:00:12.850
It works just fine here but later in the course when we update a place we will actually load that data

3
00:00:12.850 --> 00:00:18.280
here from a bank and we will fetch the information about a place from the back end which means it will

4
00:00:18.280 --> 00:00:22.840
not be there instantly when we rendered this component it will take a short while.

5
00:00:23.020 --> 00:00:28.940
This here of course is available instantly but let's also handled the case that this would take longer.

6
00:00:29.050 --> 00:00:33.940
You might think that later when we reach out to a server we use fetched or something like this which

7
00:00:33.940 --> 00:00:39.940
returns a promise and then the then block we can then call use forum to initialize our form with the

8
00:00:39.970 --> 00:00:41.880
then fetch data.

9
00:00:41.890 --> 00:00:47.740
This is not allowed though in react there is a rule when it comes to hooks that they must only be used

10
00:00:47.770 --> 00:00:49.900
directly in your component function.

11
00:00:49.900 --> 00:00:56.020
So you must not use them instead of if blocks instead of loops or instead of other functions including

12
00:00:56.020 --> 00:00:57.130
then blocks.

13
00:00:57.130 --> 00:01:02.680
So you would not be able to call the use forum in a van block and that makes sense because it would

14
00:01:02.680 --> 00:01:09.430
mean that you only set up your hook after the response is there and not when does component first renders.

15
00:01:09.430 --> 00:01:15.580
But of course here during the first render cycle we already need information from our hook from form

16
00:01:15.580 --> 00:01:16.110
state.

17
00:01:16.150 --> 00:01:19.960
So we need to call use form early.

18
00:01:19.960 --> 00:01:24.330
Still I want to update my form values at a later point of time.

19
00:01:24.400 --> 00:01:30.910
Once my response is here and here to simulate this let's just say that we get our identified place only

20
00:01:31.030 --> 00:01:33.220
after use form is called.

21
00:01:33.220 --> 00:01:35.310
Of course we could switch look position here.

22
00:01:35.410 --> 00:01:40.130
But let's imagine that this is not possible because this takes longer to load.

23
00:01:40.250 --> 00:01:42.190
What can we do in that case.

24
00:01:42.350 --> 00:01:49.520
In that case we probably want to initialize this with our invalid values here.

25
00:01:49.580 --> 00:01:56.120
So with empty values and later once we connect us to a backend we will show a loading spinner whilst

26
00:01:56.120 --> 00:01:57.850
we're waiting for a place to load.

27
00:01:57.950 --> 00:02:00.370
So we will not show an empty invalid form.

28
00:02:00.380 --> 00:02:00.980
No worries.

29
00:02:01.310 --> 00:02:01.790
But here.

30
00:02:01.790 --> 00:02:04.990
Let's just say we have some dummy initialization values.

31
00:02:05.240 --> 00:02:11.580
And then here once we got a identified place I want to update my form state.

32
00:02:11.580 --> 00:02:18.170
Now for Dad we need to revisit our form hook and add some functionality that allows us to replace the

33
00:02:18.170 --> 00:02:21.150
values and the validity stored in the form.

34
00:02:21.410 --> 00:02:30.230
For Dad I'll add a new function here which I'll name set for data I will all rapid with use callback

35
00:02:30.320 --> 00:02:35.410
so that it is stored by react and not recreate it unnecessarily.

36
00:02:35.660 --> 00:02:45.670
And then the actual function should take input data and form validity as inputs and then here I want

37
00:02:45.670 --> 00:02:53.110
to dispatch an action which I'll give a type of let's say set data that's totally up to you of course

38
00:02:53.110 --> 00:02:55.390
you can use any identifier you want.

39
00:02:55.630 --> 00:03:05.680
And with that action I want to pass my inputs data so input data stored in the inputs key and my form

40
00:03:05.770 --> 00:03:09.450
is valid data which is that form validity we're getting.

41
00:03:09.460 --> 00:03:16.180
So this is an action we dispatch against our reducer now set form data is then all returned in disarray

42
00:03:16.390 --> 00:03:23.100
so that if we want that we can get it and then here in our reducer we just have to handle that new case

43
00:03:23.300 --> 00:03:24.680
that set data.

44
00:03:24.690 --> 00:03:31.030
Case we just added down their instead of set data.

45
00:03:31.030 --> 00:03:37.270
I want to return a new form state which is basically overriding the existing state hence I will also

46
00:03:37.270 --> 00:03:38.710
not copy the old state.

47
00:03:38.710 --> 00:03:45.820
I will just replace it entirely and there I will set inputs to action not inputs because on my action

48
00:03:45.820 --> 00:03:51.910
here I do have that inputs key and we are all to have that form is valid key and that will be used to

49
00:03:51.910 --> 00:04:02.330
set the overall validity of the form is valid is set to action and then I had form is valid so action

50
00:04:02.810 --> 00:04:04.870
form is valid.

51
00:04:04.980 --> 00:04:12.180
So now we can basically call this set form data function which we exposing here whenever we want a set

52
00:04:12.180 --> 00:04:18.540
of form data so whenever we want to dispatch does action use callback all needs to specify its dependencies.

53
00:04:18.540 --> 00:04:20.120
And here we essentially got none.

54
00:04:20.130 --> 00:04:28.480
So this will never be recreate it does function so we got that in place with that.

55
00:04:28.490 --> 00:04:35.960
Let's go back to update place and get access to set forum data here as well which we can pull out of

56
00:04:35.960 --> 00:04:38.270
the return data as a third element.

57
00:04:38.330 --> 00:04:43.700
Side note in new place I will not get it because there I never need to set any form data.

58
00:04:43.730 --> 00:04:48.070
I only need to get an update place so there.

59
00:04:48.080 --> 00:04:56.460
Now once we got our identified place we want to call set form data and basically initialize our for

60
00:04:56.460 --> 00:04:59.380
now set the overall validity to true.

61
00:04:59.510 --> 00:05:04.840
And here set different values for title and description.

62
00:05:04.910 --> 00:05:11.310
Title will have a value of identified play's title and the validity is true therefore.

63
00:05:11.450 --> 00:05:17.540
And here I have identified place description and is valid is true here as well.

64
00:05:17.540 --> 00:05:24.080
Now calling it like this would be bad though if we call it like this here directly in our component

65
00:05:24.080 --> 00:05:30.680
function it means whenever it is component re renders we set new foreign data whenever we set new foreign

66
00:05:30.680 --> 00:05:31.510
data.

67
00:05:31.580 --> 00:05:37.550
We Indian dispatch does action and therefore we trigger our form reducer and whenever that reducer runs

68
00:05:37.700 --> 00:05:43.730
it produces a new state and whenever it produces a new state even if the data if the state data hasn't

69
00:05:43.730 --> 00:05:46.120
changed it still is technically a new state.

70
00:05:46.160 --> 00:05:50.630
So whenever it produces a new state the component that uses our hook will re render.

71
00:05:50.630 --> 00:05:57.800
So we would have an infinite loop here to a white that we can use a good old friend the use effect hook

72
00:05:58.520 --> 00:06:07.420
we can use use a fact from react and wrap our call to set form data in it so here I have use a fact

73
00:06:08.070 --> 00:06:13.530
and in this function here in the use affect function I want to call set for him data.

74
00:06:13.530 --> 00:06:22.770
Therefore I have two dependencies here set form data and identified place now identified place thankfully

75
00:06:22.830 --> 00:06:25.770
will not change with every rerun or cycle.

76
00:06:25.770 --> 00:06:32.400
That logic will run with every rerun or cycle but we will always find the exact same object the same

77
00:06:32.460 --> 00:06:38.610
object in memory so it will not change and therefore use effect should not trigger again and set firm

78
00:06:38.610 --> 00:06:46.540
data will all not change because in our hook we wrap that with use callback with that if we saved us

79
00:06:48.950 --> 00:06:52.600
and we go to edit you see this is empty now.

80
00:06:52.670 --> 00:06:55.490
You see this is empty and it also never changes.

81
00:06:55.490 --> 00:06:58.010
So something is not working as it should.

82
00:06:58.010 --> 00:07:00.070
Let's see what that is.

83
00:07:00.080 --> 00:07:02.210
So what's the problem here.

84
00:07:02.240 --> 00:07:09.800
The problem is that our hook and our set firm data logic here will work fine but we do have this initial

85
00:07:09.860 --> 00:07:13.250
value and initial a valid prop on the input.

86
00:07:13.250 --> 00:07:19.490
Right now what happens inside of our input component these values are taken to initialize our input

87
00:07:19.490 --> 00:07:20.480
state there.

88
00:07:20.510 --> 00:07:27.230
So that means when the value is assigned to these props change nothing happens in our input component

89
00:07:27.440 --> 00:07:32.840
because only when does is rendered for the first time this initial state is taken into account and thereafter

90
00:07:33.050 --> 00:07:34.550
it does not run again.

91
00:07:34.700 --> 00:07:38.350
So it doesn't reflect any changes to the initial values.

92
00:07:38.480 --> 00:07:42.590
So how can we work around this issue and update place.

93
00:07:42.590 --> 00:07:45.710
We have to defer when we create our form.

94
00:07:45.740 --> 00:07:50.700
So did we only rendered a forum and its inputs when we really got our data for that.

95
00:07:50.700 --> 00:07:54.110
When when we really got our identified placed data.

96
00:07:54.110 --> 00:07:56.710
And once we used that to update our form data.

97
00:07:56.750 --> 00:08:03.480
So that we don't create this forum too early with the dummy fallback data we set up here later.

98
00:08:03.500 --> 00:08:08.460
Once we connected react to our back end this will be easier because then we will be sending a H to the

99
00:08:08.460 --> 00:08:14.450
p request anyways and we will know once this request finished here since we're still kind of working

100
00:08:14.450 --> 00:08:16.570
around a problem which we don't really have.

101
00:08:16.670 --> 00:08:20.840
I'll use a temporary work around which we will absolutely replace later.

102
00:08:20.990 --> 00:08:30.230
I will only return this form here if we do have value for title let's say which is a indicator Dad these

103
00:08:30.250 --> 00:08:33.800
values have been loaded for title and description.

104
00:08:33.800 --> 00:08:42.830
So here I will check if former state inputs title value is a thing and only if it is a thing I will

105
00:08:42.920 --> 00:08:51.800
render this form here and then close to curly brace offered a form and I actually don't need curly braces

106
00:08:51.800 --> 00:08:55.670
for that because it's the start of the return statement anyways.

107
00:08:55.670 --> 00:09:02.450
So now the firm is only rendered if we do we have a titled value or to make this a bit nicer from a

108
00:09:02.450 --> 00:09:03.660
code perspective.

109
00:09:03.770 --> 00:09:10.620
We could also say if we don't have these values or if this is an empty string which is the case in our

110
00:09:10.620 --> 00:09:18.750
initial fallback value we instead return some dummy J as X where we maybe say loading and again we'll

111
00:09:18.870 --> 00:09:23.260
find a better loading solution later but for the moment this should do the trick.

112
00:09:23.280 --> 00:09:25.400
Here I got one extra parentheses.

113
00:09:25.410 --> 00:09:31.800
Let's remove that and with that now when I reload we don't even see the loading state because of course

114
00:09:31.830 --> 00:09:38.130
everything loads instantly here because we're not remaking HDP request but we see we now got our correctly

115
00:09:38.130 --> 00:09:40.170
initialized form data.

116
00:09:40.170 --> 00:09:45.780
The problem we now have is once a clearer D input though it's gone and we see loading because in our

117
00:09:45.780 --> 00:09:51.780
logic whenever we don't have titled value we want to show loading.

118
00:09:52.230 --> 00:09:57.570
So it's maybe not the best fallback we can use it at the moment though because as I mentioned we will

119
00:09:57.570 --> 00:10:01.020
replace it later once we have a real loading state.

120
00:10:01.050 --> 00:10:07.010
We manage with the help of H2 DP as a temporary work around to have a little bit of a better solution.

121
00:10:07.080 --> 00:10:15.420
We can introduce a new state here with use state and name this is loading set is loading.

122
00:10:15.560 --> 00:10:16.340
Use state.

123
00:10:16.340 --> 00:10:24.590
Initially we are not loading let's say or to be precise initially we are loading here and then in use

124
00:10:24.590 --> 00:10:25.070
of fact.

125
00:10:25.070 --> 00:10:28.830
Once we also set our form data of course we're not loading anymore.

126
00:10:28.880 --> 00:10:33.740
So here I will set is loading 2 FALSE.

127
00:10:33.830 --> 00:10:35.360
So initially we are loading.

128
00:10:35.360 --> 00:10:36.440
Then I set it to false.

129
00:10:36.440 --> 00:10:41.130
Once we got our data and down here we can check if we are loading.

130
00:10:41.360 --> 00:10:45.140
In this case I want to show that loading fullback and showed you form otherwise.

131
00:10:45.170 --> 00:10:50.090
Now this works as before but now we can also clear it without removing everything.

132
00:10:50.090 --> 00:10:55.070
So this is our solution for now it's just import to understand that because of the way the input works

133
00:10:55.250 --> 00:11:01.430
and the initial value invalidity is really only used once we have to ensure that we only rendered us

134
00:11:01.550 --> 00:11:05.920
once we got the final values for initial value and initial valid.

135
00:11:06.020 --> 00:11:09.530
And with that we are rendering this update form just fine.

136
00:11:09.530 --> 00:11:15.260
We are able to submit it and have our data there and we are therefore well-prepared here to connect

137
00:11:15.260 --> 00:11:17.710
us to a back end later as well.
