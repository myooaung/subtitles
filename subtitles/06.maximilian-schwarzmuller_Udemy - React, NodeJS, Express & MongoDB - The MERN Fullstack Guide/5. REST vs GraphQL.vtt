WEBVTT
1
00:00:02.110 --> 00:00:06.190
So let's take a closer look at this rest and graph cool thing.

2
00:00:06.190 --> 00:00:09.220
How do these AP eyes look like in detail.

3
00:00:09.220 --> 00:00:15.460
Well as I mentioned we still have that client server combination and the server uses note express and

4
00:00:15.490 --> 00:00:21.490
then we talk to among OTB database from that note express server the client of course uses react.

5
00:00:21.610 --> 00:00:28.060
Now how does such a request look like which we send to the node express server if that server is built

6
00:00:28.090 --> 00:00:29.140
as a rest api.

7
00:00:29.830 --> 00:00:35.680
Well as I mentioned it's a combination of a specific you are L or specifically the path which is the

8
00:00:35.680 --> 00:00:39.400
thing after the domain because the domain of course will always be the same.

9
00:00:39.520 --> 00:00:42.080
Your page dot com for example is the domain.

10
00:00:42.220 --> 00:00:49.480
But the thing they're after slash products slash nothing slash new slash user whatever it is that is

11
00:00:49.480 --> 00:00:50.160
the path.

12
00:00:50.380 --> 00:00:57.130
And that combined with a specific HDD if you work triggers a specific action at least if we support

13
00:00:57.160 --> 00:01:04.180
that path we're combination on the server for example we could be sending a post request with the Post

14
00:01:04.210 --> 00:01:13.030
HDD if he were to to slash post you or L or a get request to slash posts or a get request to slash post

15
00:01:13.120 --> 00:01:19.600
slash and then some dynamic Pop segment which node express all the supports so it would be for example

16
00:01:19.600 --> 00:01:26.470
could have different ideas of posts which are parts of our incoming requests these are our so-called

17
00:01:26.560 --> 00:01:32.950
API end points and as I mentioned multiple times it's up to us the developer of the node express rest

18
00:01:32.980 --> 00:01:39.820
api to decide which endpoints we want to support and then upon getting a request on such a endpoint

19
00:01:40.180 --> 00:01:46.240
we run some service ad logic to do whatever we want to do for example to reach out to the database and

20
00:01:46.240 --> 00:01:49.930
then store data there get data from there and so on.

21
00:01:49.930 --> 00:01:56.430
Now when it comes to these HBP methods post and get might be methods or words you already know but there's

22
00:01:56.470 --> 00:01:58.110
more than just getting post.

23
00:01:58.240 --> 00:02:04.420
Of course we have get which we typically use to get data or get a resource from the server and we have

24
00:02:04.420 --> 00:02:06.850
post to post data to a server.

25
00:02:06.880 --> 00:02:13.100
So to send data data and then create new data a new object new resources on the server.

26
00:02:13.390 --> 00:02:14.920
But we got more than that.

27
00:02:14.920 --> 00:02:21.430
We also got put which we typically use to create or override a resource patch which we use to update

28
00:02:21.460 --> 00:02:28.000
an existing resource on a server delete to delete a resource and all actually options which we won't

29
00:02:28.000 --> 00:02:33.940
send on ourselves but which the browser automatically attaches for certain requests which the browser

30
00:02:33.940 --> 00:02:38.570
then uses to find out if the request we actually want to send is supported.

31
00:02:38.680 --> 00:02:41.160
I will come back to that later.

32
00:02:41.180 --> 00:02:47.240
Now what's really important to understand here because it's some common misconception is that just because

33
00:02:47.240 --> 00:02:52.420
you send a post request you don't actually store something in that database automatically.

34
00:02:52.490 --> 00:02:59.420
As I mentioned it's up to you the developer of the API to decide what you want to do which code you

35
00:02:59.420 --> 00:03:07.190
want to execute for which were path combination and you typically want to map the words in a way that's

36
00:03:07.190 --> 00:03:07.820
logical.

37
00:03:07.820 --> 00:03:11.470
So you want to create data when a post request is received.

38
00:03:11.540 --> 00:03:18.050
You want to delete data when a delete request is received but theoretically you could also return data

39
00:03:18.080 --> 00:03:25.460
so you could get data upon a delete request or return data up on a put request or return date up on

40
00:03:25.460 --> 00:03:26.900
a post request.

41
00:03:26.900 --> 00:03:29.820
Dad would just not be logical and therefore you want to avoid it.

42
00:03:30.140 --> 00:03:35.510
But it's really important to understand that the word path combination alone does not dictate what happens

43
00:03:35.510 --> 00:03:43.520
on the server that is up to the logic you wrote there for different work path combinations.

44
00:03:43.520 --> 00:03:45.170
So that's the rest.

45
00:03:45.170 --> 00:03:51.950
Now what about graph Q El when we have a look at that same picture for graph to we have the same general

46
00:03:51.950 --> 00:03:54.610
logic and that's important to understand.

47
00:03:54.650 --> 00:03:57.050
We sent that request to the node express app then.

48
00:03:57.080 --> 00:03:59.100
But how does this look like now.

49
00:03:59.150 --> 00:04:03.750
As I mentioned with graph Q Well there aren't multiple endpoints.

50
00:04:03.830 --> 00:04:10.030
There is one single endpoint and that typically is a post request on some path of your choice.

51
00:04:10.040 --> 00:04:15.110
Often the path is slash graph jewel but that's not a must use now.

52
00:04:15.140 --> 00:04:22.610
The trick here is that this request since it's a post request has a request body and that request body

53
00:04:22.610 --> 00:04:29.810
contains a query expression written in a standardised graph QoL query language which is then passed

54
00:04:29.810 --> 00:04:35.000
by your node express server and if you then wrote code to support that specific expression which will

55
00:04:35.000 --> 00:04:41.420
send you can then well use the data which is part of that expressions on to store data or to get data

56
00:04:41.510 --> 00:04:49.280
and so on the query which could be in the post request body typically looks something like this.

57
00:04:49.280 --> 00:04:54.740
We describe the operation we want to perform alternatives to query which we typically use to get data

58
00:04:54.770 --> 00:05:00.460
would be mutation to add or change data or subscription to set up a live subscription.

59
00:05:00.500 --> 00:05:06.890
We then have an identifier of our choice which we all could call and point data for and then the data.

60
00:05:06.890 --> 00:05:11.020
We for example want to request or we want to send.

61
00:05:11.090 --> 00:05:18.860
Now I do have a free serious on how to build basically a simple Marine application with a graphical

62
00:05:18.860 --> 00:05:23.420
backend and attached you find a link where you learn how to build such a graph.

63
00:05:23.480 --> 00:05:25.050
Back and from scratch.

64
00:05:25.190 --> 00:05:27.380
So that might also be interesting for you.

65
00:05:27.440 --> 00:05:34.010
If you want to learn more about graft fuel in this course when we compare Rast to graph cool we will

66
00:05:34.010 --> 00:05:35.010
go with the rest.

67
00:05:35.090 --> 00:05:35.990
And here's why.

68
00:05:36.960 --> 00:05:45.210
The rest api approach uses this path HP method combination to identify resources where actions on a

69
00:05:45.210 --> 00:05:49.920
server and that's very intuitive and very easy to learn.

70
00:05:50.130 --> 00:05:57.330
Such an API is stateless and decoupled from any front end which means a rest api you build cannot just

71
00:05:57.330 --> 00:06:00.720
be used with your react single page application.

72
00:06:00.720 --> 00:06:02.620
Any client could talk to it.

73
00:06:02.760 --> 00:06:08.890
So if you later build a mobile application with ISIS or Android you could talk to that same API.

74
00:06:08.940 --> 00:06:15.180
Because the API is totally separated from the front end which is the cool thing about this API approach

75
00:06:15.390 --> 00:06:19.230
you can reuse the API and just attach different from events.

76
00:06:19.290 --> 00:06:23.830
One of the reasons why such API eyes are so popular these days.

77
00:06:24.150 --> 00:06:30.750
Now we will use the rest api in this course because it's the most common type of API you'll see a lot

78
00:06:30.750 --> 00:06:37.920
of API is built in that way out there in the wild because it's easy to use easy to learn easy to document

79
00:06:38.430 --> 00:06:41.010
and very intuitive in the end.

80
00:06:41.010 --> 00:06:47.520
Now a graph to El API does not use the path HBP method as you'll learn but instead such a clear expression

81
00:06:47.580 --> 00:06:51.150
using a certain very language to identify a resource in action.

82
00:06:51.420 --> 00:06:53.220
And just like the rest api.

83
00:06:53.220 --> 00:06:59.610
It's also stateless and decoupled so just as with the rest api you can attach any client to that API

84
00:06:59.610 --> 00:07:06.540
which is great but the reason why we won't use it is that despite graphical being very popular and very

85
00:07:06.750 --> 00:07:13.710
useful and powerful you need to learn that extract for real language which is some extra effort in which

86
00:07:13.710 --> 00:07:15.770
not everyone wants to do.

87
00:07:15.930 --> 00:07:22.890
In addition out there in the wild you see way more rest api used and graph queue LAPD so I find it more

88
00:07:22.890 --> 00:07:28.980
important to learn that nonetheless as I mentioned attached you find a link to a free series I created

89
00:07:28.980 --> 00:07:35.210
in the past where we also build a graph que el API and actually also what Express and react application

90
00:07:35.210 --> 00:07:38.310
that works with it for free in a complete serious.

91
00:07:38.310 --> 00:07:43.290
So this might be interesting to you if you want to learn more about that in this course will build a

92
00:07:43.290 --> 00:07:49.380
rest api from scratch because it is so important and so powerful and we will build it from the ground

93
00:07:49.380 --> 00:07:52.750
up so that you definitely at everything that's to it.
