1
00:00:02,240 --> 00:00:06,830
So we have our basic input but right now it's just a presentational component in the end.

2
00:00:06,950 --> 00:00:12,710
It just takes some configuration here and then renders a nice looking input field and a label.

3
00:00:12,770 --> 00:00:19,370
Not too bad for sure but also not all that I want instead my ideas the following and I really want to

4
00:00:19,370 --> 00:00:25,970
highlight that this is just one possible approach of doing this but my idea is that in the input component

5
00:00:25,970 --> 00:00:33,800
here we manage some internal state we manage what the user entered and we also manage whether what the

6
00:00:33,800 --> 00:00:35,810
user entered is valid or not.

7
00:00:35,810 --> 00:00:42,520
The answer to that question whether it's valid or not is provided with some external configuration.

8
00:00:42,590 --> 00:00:50,300
So when we use the input component here for example in new place I want to be able to pass in an array

9
00:00:50,300 --> 00:00:59,300
of validators which of course has to be an array of some clearly defined values or objects or identifiers

10
00:00:59,600 --> 00:01:05,270
which we pick up in input component through which we then go instead of input component to find out

11
00:01:05,270 --> 00:01:07,160
whether the input is valid or not.

12
00:01:07,160 --> 00:01:12,980
And then we basically pass the information whenever the input is valid and what the input actually was.

13
00:01:12,980 --> 00:01:19,370
So the concrete value entered back to new place with that pattern we already know where we have something

14
00:01:19,370 --> 00:01:27,770
like on change here or on input or whatever you want and then you simply pass in a function to the input

15
00:01:27,770 --> 00:01:30,570
component which you call from inside there.

16
00:01:30,590 --> 00:01:33,150
So how can we implement this.

17
00:01:33,260 --> 00:01:34,500
Let's start simple.

18
00:01:34,510 --> 00:01:40,490
And in the input component let's add a new function in a function D change handler which should trigger

19
00:01:40,490 --> 00:01:47,990
whenever the user enters something we can simply bind this on our element and therefore I will actually

20
00:01:47,990 --> 00:01:54,230
move it up here we can bind this to our element here on both the input and the text area so we can add

21
00:01:54,320 --> 00:02:02,300
on change here and point at the change handler do that on the text area and do that on the input with

22
00:02:02,300 --> 00:02:07,220
that this function will be called for every keystroke that is went on change triggers.

23
00:02:07,370 --> 00:02:13,790
Now when that change handler is fired we want to do two things we want to store the value just like

24
00:02:13,790 --> 00:02:15,330
that and we want to validate it.

25
00:02:15,380 --> 00:02:22,100
As I mentioned now when you're managing more than one state and the two states are kind of connected

26
00:02:22,730 --> 00:02:28,640
you could use use state and simply set up two states what you manage.

27
00:02:28,640 --> 00:02:31,450
That is absolutely fine you're not limited to one.

28
00:02:31,520 --> 00:02:39,590
So we could manage de let's say entered value and have set entered value here and then call use state

29
00:02:40,220 --> 00:02:47,600
and start with an empty value and then replicate this and have these is valid and set is valid state

30
00:02:47,600 --> 00:02:51,020
here maybe and start with false and then you update both.

31
00:02:51,050 --> 00:02:56,570
You could do that and it wouldn't be a horrible but often when you have to kind of connected states

32
00:02:56,720 --> 00:03:02,660
and these states clearly are connected the validity depends on the input value then using a different

33
00:03:02,660 --> 00:03:11,090
hook is better use reducer you reduce your also allows you to manage state in a component and it also

34
00:03:11,090 --> 00:03:15,420
gives you a function you can call which updates the state and re renders the component.

35
00:03:15,500 --> 00:03:23,300
But the difference to use state is that with you as reducer you can manage more complex state with ease.

36
00:03:23,420 --> 00:03:29,690
You can write some logic that basically runs whenever you want to change the state to do more complex

37
00:03:29,750 --> 00:03:32,000
updates than just set a new value.

38
00:03:32,360 --> 00:03:34,130
And if we use reducer is great.

39
00:03:34,130 --> 00:03:40,460
Whenever you have more complex state or you have interconnected state so therefore here I will use use

40
00:03:40,460 --> 00:03:41,130
reducer.

41
00:03:41,180 --> 00:03:42,140
But how do we use it.

42
00:03:42,830 --> 00:03:50,340
Well we call it like this and then we have to pass in at least one argument and that's a so-called reducer.

43
00:03:50,390 --> 00:03:58,340
Hence the name a reducer is really just a function of function which receives an action which we can

44
00:03:58,340 --> 00:04:04,010
dispatch and I'll show you how we dispatch an action in a second and that receives the current state

45
00:04:04,190 --> 00:04:10,130
and then we updates to current state based on the action we received returned and you state and use

46
00:04:10,130 --> 00:04:15,380
reducer will take that new state and give it back to us in the component and rearrange or everything

47
00:04:15,620 --> 00:04:22,790
so we can run a more complex state updating logic I'll set up the reducer function outside of my component

48
00:04:22,820 --> 00:04:28,070
because it does not depend on any component inputs and I'll name it input reducer.

49
00:04:28,070 --> 00:04:32,870
Now it is just a function which gets to arguments the current state and does action.

50
00:04:32,870 --> 00:04:34,460
I was talking about.

51
00:04:34,790 --> 00:04:41,060
So we have this function here and we pass the input reducer here to use reducer in this function we

52
00:04:41,060 --> 00:04:46,480
then always have to return a new state and we can use a switch statement here.

53
00:04:46,490 --> 00:04:51,280
Vanilla javascript construct to find out what action we have.

54
00:04:51,500 --> 00:04:57,290
Now it's up to you how we determine which action we have but often you will dispatch actions that have

55
00:04:57,290 --> 00:05:02,880
a type property which have a unique identifier that describes the action.

56
00:05:02,900 --> 00:05:05,170
And here we could wait for a change.

57
00:05:05,170 --> 00:05:10,940
Action let's say and it's totally up to us which identify we use here you could use any identifier.

58
00:05:10,940 --> 00:05:16,940
I'll wait for a change action and then it will return unused state here unused state object to state

59
00:05:16,940 --> 00:05:18,880
here doesn't have to be an object.

60
00:05:18,890 --> 00:05:24,050
It could be anything but in my case here it will be an object because it will merge multiple different

61
00:05:24,230 --> 00:05:30,520
state pieces into one grouped state and it will return as if we have this change case.

62
00:05:30,650 --> 00:05:36,830
I will also provide a default case here where I return the existing unchanged state in case we dispatch

63
00:05:36,830 --> 00:05:39,290
some action which we don't handle explicitly here.

64
00:05:39,590 --> 00:05:41,480
Well then we'll just make it in here.

65
00:05:41,510 --> 00:05:45,000
So what's this new state which you want to return here.

66
00:05:45,080 --> 00:05:50,360
First of all I will create a copy of the old state so that we don't lose any data off the old state

67
00:05:50,680 --> 00:05:54,850
and we can do it with the spread of greater the free dots and then state.

68
00:05:54,980 --> 00:06:01,700
This copy is the old state object and copies all key value pairs of that old object into this new object

69
00:06:02,480 --> 00:06:08,270
and then we can overwrite selected keys select the properties for example value let's say we want to

70
00:06:08,270 --> 00:06:12,650
have a value property in our state I will set it to action dot Val.

71
00:06:12,650 --> 00:06:17,700
And again it's up to you how you pass that new value along with the action.

72
00:06:17,840 --> 00:06:24,530
I will store it in a Val property on that action object which I will eventually dispatch.

73
00:06:24,540 --> 00:06:29,610
There is one other state piece which we need to manage and that is the is valid state whenever that

74
00:06:29,640 --> 00:06:31,500
input is valid or not.

75
00:06:31,500 --> 00:06:37,160
And now here we will have to run some validation logic now for the moment.

76
00:06:37,170 --> 00:06:42,840
I'll just set it to true but we'll replace this with the actual validation logic which we just don't

77
00:06:42,840 --> 00:06:43,520
have yet.

78
00:06:43,620 --> 00:06:47,070
And I don't want to introduce too many new things simultaneously.

79
00:06:47,100 --> 00:06:53,550
So for the moment that's hard code this to true so we have our simple reducer we register as year with

80
00:06:53,550 --> 00:07:00,090
use reducer user ID user also is able to take a second argument it's optional though and that can be

81
00:07:00,090 --> 00:07:06,090
an initial state you want to set up so a state with which you want to initialize your component here

82
00:07:06,690 --> 00:07:07,280
and there.

83
00:07:07,290 --> 00:07:13,190
I want to have a object where value is set to an empty string.

84
00:07:13,200 --> 00:07:20,000
Let's say and where is a valid is set to let's say false.

85
00:07:20,050 --> 00:07:26,860
So that initially the input is treated as faults and now this is my use reducer initialization.

86
00:07:26,860 --> 00:07:30,610
Now just like use state use reduce or return something.

87
00:07:30,610 --> 00:07:35,970
And just like use state it returns an array with exactly two elements.

88
00:07:36,010 --> 00:07:43,030
So just as with U.S. state we can use array D structuring year to get these two elements out of the

89
00:07:43,030 --> 00:07:46,180
returned array and stored them in constants.

90
00:07:46,180 --> 00:07:52,240
And the two elements we always get from use reducer no matter how we configured our reducer is the current

91
00:07:52,240 --> 00:07:52,930
state.

92
00:07:52,930 --> 00:07:59,260
I will name it input state here and a dispatch function which we can call this is then how we will be

93
00:07:59,260 --> 00:08:05,010
able to dispatch actions to to reduce our function which will run through to function and return a new

94
00:08:05,010 --> 00:08:11,170
estate which will then update input state and re render to component in the end.

95
00:08:11,190 --> 00:08:19,770
So with that in change handler I of course want to call dispatch I want to dispatch to this reducer

96
00:08:20,100 --> 00:08:24,910
and therefore Europe pass an object which is such a action object.

97
00:08:25,050 --> 00:08:30,200
And here we in our code defined action to have a type end a Val property.

98
00:08:30,300 --> 00:08:33,950
So we should make sure we provide these two pieces of information here.

99
00:08:34,080 --> 00:08:36,700
So type should be set to change.

100
00:08:36,720 --> 00:08:41,320
And here of course I want to use the exact same identifier I expect up there.

101
00:08:41,340 --> 00:08:46,080
So if you chose a different identifier you have to use a different identifier down there as well.

102
00:08:46,260 --> 00:08:55,230
And all said Val to event target value event is an object we get automatically on the change event and

103
00:08:55,230 --> 00:09:00,990
event target is the input element on which this event was triggered and value then simply is the value

104
00:09:01,010 --> 00:09:08,340
the user entered with this we are updating our estate now to kind of reflect it.

105
00:09:08,370 --> 00:09:10,110
I will do two things.

106
00:09:10,200 --> 00:09:16,920
I will bind the value of input back to input state DOT value so that we have as to where binding going

107
00:09:16,920 --> 00:09:26,480
on again and I will do the same of course on text area value to input state DOT value by the way in

108
00:09:26,540 --> 00:09:33,230
react if you want to set the value on a text area you don't set it here between the text area tags as

109
00:09:33,230 --> 00:09:37,790
you might think instead you do reset that value prop here.

110
00:09:37,790 --> 00:09:40,410
That is how you set the value of text area.

111
00:09:40,700 --> 00:09:46,550
And last but not least to also have some extra feedback on whether this is valid or not.

112
00:09:46,550 --> 00:09:53,730
Here below the element I will check if input state is valid is false.

113
00:09:53,780 --> 00:09:55,920
Hence the exclamation mark at the beginning.

114
00:09:55,950 --> 00:10:02,820
If that is the case I want to render some error text and that error text should be suitable from outside.

115
00:10:02,870 --> 00:10:08,000
So I will render props air or text if that input is invalid.

116
00:10:08,000 --> 00:10:11,240
Now I also want to render a conditional class name here.

117
00:10:11,240 --> 00:10:20,250
So we'll check here in my class name template literal if input state is valid is false.

118
00:10:20,250 --> 00:10:23,160
Hence the exclamation mark at the beginning again.

119
00:10:23,160 --> 00:10:31,500
If that is the case I will add a form dash control dash dash invalid class so that we add this extra

120
00:10:31,500 --> 00:10:38,610
class to in the entire div if our input state is invalid which it is.

121
00:10:38,610 --> 00:10:44,350
Initially it only becomes valid after we type at least one character because that has been a hard coded

122
00:10:44,350 --> 00:10:47,300
to true with Dad.

123
00:10:47,310 --> 00:10:52,620
Let's go back to NEW PLACE AND USE THE INPUT appropriately validators is not something we use yet.

124
00:10:52,620 --> 00:10:56,610
So passing in an empty array is OK on input.

125
00:10:56,610 --> 00:11:01,560
We can't specify this yet because at the moment we don't really have a mechanism of feeding devalue

126
00:11:01,560 --> 00:11:05,190
and d input validity back to the parent component.

127
00:11:05,190 --> 00:11:08,010
But what we can and should provide here is an error.

128
00:11:08,010 --> 00:11:20,360
Text which all here set to please enter a valid title and with that if we save this we have input which

129
00:11:20,360 --> 00:11:22,790
initially is invalid and therefore looks like this.

130
00:11:22,790 --> 00:11:26,220
But as soon as we type at least one character it becomes valid.

131
00:11:26,230 --> 00:11:32,360
No this never becomes invalid again because we have no real validation set up at the moment but it generally

132
00:11:32,360 --> 00:11:32,740
works.

133
00:11:32,750 --> 00:11:38,620
We are able to type we're able to change the validity initially and that is not looking too bad.

134
00:11:38,720 --> 00:11:45,830
Now of course it would be kind of nice to have some real validation built in and to be able to really

135
00:11:45,830 --> 00:11:49,330
check for example if that's empty and so on.
