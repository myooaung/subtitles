1
00:00:02,120 --> 00:00:08,090
Now earlier in the courts we of course already planned our ReACT front and our single page application

2
00:00:08,090 --> 00:00:08,530
pages.

3
00:00:08,530 --> 00:00:14,150
We want to have there and pages here really means different React Components which then will be loaded

4
00:00:14,150 --> 00:00:20,210
with help of a third party library that reads the browser you are L and instructs react to render different

5
00:00:20,210 --> 00:00:21,410
components.

6
00:00:21,410 --> 00:00:23,260
And here is our plan.

7
00:00:23,300 --> 00:00:26,290
Now we'll not implement everything we see here in this module.

8
00:00:26,300 --> 00:00:33,440
We will add all these pages or components but the authentication part you see on the right Dad will

9
00:00:33,440 --> 00:00:34,960
be added later in the course.

10
00:00:34,960 --> 00:00:38,180
Once we also added authentication on the server side.

11
00:00:38,180 --> 00:00:43,010
So it's something we we can't ignore for now we can't really implement right now but we can build the

12
00:00:43,010 --> 00:00:46,910
general skeleton and idea of the entire application.

13
00:00:47,030 --> 00:00:47,960
So let's do that now.

14
00:00:47,960 --> 00:00:50,390
Let's start with that and to get started.

15
00:00:50,390 --> 00:00:51,880
I have a brand new project.

16
00:00:51,890 --> 00:00:58,130
You'll find that project setup attached to this lecture here you can simply extract it and then run

17
00:00:58,220 --> 00:01:03,550
npm install in the extract that folder and thereafter you can run NPM start.

18
00:01:03,560 --> 00:01:10,580
Here I am again using that built in terminal in my I.T. NPM start to bring up that development server

19
00:01:10,640 --> 00:01:13,960
serving our ReACT single page application.

20
00:01:14,330 --> 00:01:15,130
Here this.

21
00:01:15,140 --> 00:01:21,470
Now don't be worried regarding the gray background that will make sense later once we start adding more

22
00:01:21,470 --> 00:01:26,180
and more components and styles this will be the general background color of this application.

23
00:01:26,180 --> 00:01:27,820
Here of course it looks a bit strange.

24
00:01:27,830 --> 00:01:29,080
Later it won't.

25
00:01:29,250 --> 00:01:31,280
And of course all is not a must do.

26
00:01:31,300 --> 00:01:35,030
But I will use it is to the developer tools here.

27
00:01:35,030 --> 00:01:39,530
I like to have them open so that I can quickly see any errors we're getting and so on.

28
00:01:39,620 --> 00:01:46,670
Cause you don't have to do that but I will work on this project with the developer tools open and with

29
00:01:46,670 --> 00:01:53,900
that let's go back and let's start working on this application and add components pages and more.

30
00:01:53,900 --> 00:01:58,690
But of course the question is how does that all work well.

31
00:01:58,700 --> 00:02:04,280
There are different ways of getting started but since we know that we will have different pages I like

32
00:02:04,280 --> 00:02:10,910
to add these pages which are regular React Components just components which will control everything

33
00:02:10,910 --> 00:02:11,750
on the page.

34
00:02:12,050 --> 00:02:13,080
Step by step.

35
00:02:13,130 --> 00:02:19,100
So for that I'll first of all add a new sub folder in source and use sub folder which in the end will

36
00:02:19,280 --> 00:02:20,920
hold my pages.

37
00:02:20,930 --> 00:02:23,470
Now there are two approaches you could follow.

38
00:02:23,540 --> 00:02:29,270
You could for example work with a pages folder which will hold your components that are in the end rendered

39
00:02:29,270 --> 00:02:37,070
as full screen pages and you can add a components folder to hold your components which are not used

40
00:02:37,100 --> 00:02:42,140
as full screen components but instead which are only used on parts of every screen.

41
00:02:42,140 --> 00:02:49,670
For example a button component could be in the components folder then you place page component could

42
00:02:49,670 --> 00:02:51,380
be the pages folder.

43
00:02:51,380 --> 00:02:54,260
You can't do that end for application of this size.

44
00:02:54,250 --> 00:02:55,790
It would certainly work.

45
00:02:55,880 --> 00:03:01,490
However it's not the approach I will use because for bigger applications it can be hard to then quickly

46
00:03:01,490 --> 00:03:08,330
find your different components and pages if they're all managed in two main folders and then a couple

47
00:03:08,330 --> 00:03:09,430
of sub folders.

48
00:03:09,530 --> 00:03:15,500
Instead I will split my logic by feature which means I will create a new folder in the source folder

49
00:03:15,890 --> 00:03:23,510
which will named places and in there I will have a page's folder and a components folder some ideas

50
00:03:23,900 --> 00:03:30,230
that I will have my place related components in the places components folder and replace related pages

51
00:03:30,350 --> 00:03:32,810
in the well Places Pages folder.

52
00:03:32,810 --> 00:03:34,220
Now why do I do that.

53
00:03:34,220 --> 00:03:42,290
Because I'll also add a user folder next to the places folder so directly to source folder where I effectively

54
00:03:42,290 --> 00:03:49,230
will set up the same structure components and then user pages.

55
00:03:49,330 --> 00:03:56,320
Now this allows me to organize my components in a bit better way because I have user related components

56
00:03:56,320 --> 00:04:01,510
and pages in the user sub folders and places related components in these sub folders.

57
00:04:01,540 --> 00:04:08,020
Side note if you took my complete guide pages was effectively named containers because in react you

58
00:04:08,020 --> 00:04:12,810
also sometimes refer to components that have a lot of state management logic in them.

59
00:04:12,820 --> 00:04:18,570
Ask containers and pages tend to be components with a lot of state management logic in there.

60
00:04:18,640 --> 00:04:24,790
I will opt for pages instead here to make it really clear that these are the components loaded with

61
00:04:24,790 --> 00:04:28,480
the help of this routing package which we still have to install.

62
00:04:28,630 --> 00:04:35,980
Now I will also add a third folder in source and that is shared folder because we will have some general

63
00:04:35,980 --> 00:04:42,850
purpose components and also some other features which don't really belong to either places or users.

64
00:04:42,850 --> 00:04:49,540
So in shared I'll also add a components folder no pages folder because pages by default can't be shared.

65
00:04:49,540 --> 00:04:55,480
They can't be shared amongst multiple pages because a page is a standalone thing and later will also

66
00:04:55,480 --> 00:04:57,610
add other things here to the shared folder.

67
00:04:57,610 --> 00:04:59,730
For now just a components folder.

68
00:04:59,830 --> 00:05:02,430
So this is the general structure I like to work with.

69
00:05:02,440 --> 00:05:10,140
It's one possible structure not the only correct one but it is one which I think is particularly helpful.

70
00:05:10,180 --> 00:05:12,310
Would working on bigger projects.

71
00:05:12,310 --> 00:05:17,040
So with that general structure setup we prepared to folder structure.

72
00:05:17,050 --> 00:05:23,320
Now let's actually quit the development server with control C and install a new package and that new

73
00:05:23,320 --> 00:05:25,330
package which I want to install.

74
00:05:25,330 --> 00:05:31,840
Is that a routing package that routing packages a third party library we can integrate dead will help

75
00:05:31,870 --> 00:05:38,680
us read to you are elder user entered for example local hosts slash nothing whereas this slash users

76
00:05:38,680 --> 00:05:44,830
or something like that and we'll then load different React Components on the screen based on the you

77
00:05:44,830 --> 00:05:45,670
or L entered.

78
00:05:45,670 --> 00:05:52,210
Technically we still are on the same single H HTML page but that a routing package will tell react that

79
00:05:52,240 --> 00:05:58,810
now everything on the page should be replaced with the content of component B or off component a and

80
00:05:58,800 --> 00:06:00,030
so on.

81
00:06:00,070 --> 00:06:02,490
The name of the package is react router dom.

82
00:06:02,500 --> 00:06:08,250
So lets npm install with dash dash save react dash router Dash.

83
00:06:08,270 --> 00:06:15,250
Don this is a third party library not managed by the REACT team but a very popular library that helps

84
00:06:15,250 --> 00:06:21,130
us implement this routing logic so that we don't have to manually pass the U.R.L. and then do different

85
00:06:21,130 --> 00:06:22,990
things based on it.

86
00:06:22,990 --> 00:06:29,530
So this now installs this let's wait for this to finish so installation finished for me and now we can

87
00:06:29,530 --> 00:06:33,850
use that package to load different components as full screen pages in the end.

88
00:06:34,150 --> 00:06:39,880
Now if you want to learn all about routing and the react router of course the official box of the react

89
00:06:39,880 --> 00:06:42,370
routed on package are a great starting place.

90
00:06:42,370 --> 00:06:47,570
Or as all as I mentioned before in my complete guide you also learn more about routing.

91
00:06:47,590 --> 00:06:53,290
Here we will only use the features of the package which we need for this specific application.

92
00:06:53,290 --> 00:06:54,770
So how does routing work then.

93
00:06:55,090 --> 00:06:59,560
It starts in the app J File because in the end this is our route component right.

94
00:06:59,560 --> 00:07:03,880
It's the component we render into that place here in index chain.

95
00:07:03,910 --> 00:07:09,970
So app component really is the starting point of our entire application it's the first thing which is

96
00:07:09,970 --> 00:07:15,900
getting rendered so it's inside of this component here created with the function keyword which all those

97
00:07:15,910 --> 00:07:20,710
fine could also changed is to use the arrow function syntax.

98
00:07:20,710 --> 00:07:24,450
So here in this component it is where I want to set up a routing.

99
00:07:24,460 --> 00:07:26,080
Now how do we set up routing.

100
00:07:26,140 --> 00:07:34,630
Well we first of all import something from that react router Dom package and that something is the browser

101
00:07:34,630 --> 00:07:35,810
router here.

102
00:07:35,900 --> 00:07:41,470
I'm using this import syntax instead of that syntax because react rather dumb actually is a package

103
00:07:41,500 --> 00:07:47,230
that has named exports which means it exports multiple things by their name.

104
00:07:47,230 --> 00:07:54,270
And then here this is using this curly brace syntax to target specific export of things by their name.

105
00:07:54,310 --> 00:08:02,630
And here I need the browser router which is export it and I will also renamed as with as to just a router.

106
00:08:02,630 --> 00:08:09,490
This is a feature you can use with iOS 6 modules which does in the end is to assign an alias to something

107
00:08:09,490 --> 00:08:11,020
you're importing.

108
00:08:11,020 --> 00:08:15,790
And now we can use that Roger here in the app component as our route.

109
00:08:15,820 --> 00:08:21,940
J.S. ex element if you wrap this around everything that is part of the app that should be able to use

110
00:08:21,940 --> 00:08:22,570
the router.

111
00:08:22,600 --> 00:08:28,090
So we wrap this around every route that should be able to use our router.

112
00:08:28,090 --> 00:08:31,500
The question is what should be able to use our router.

113
00:08:31,510 --> 00:08:35,240
Well our pages should be loaded with help of the router.

114
00:08:35,350 --> 00:08:42,880
For example if we go to the user pages folder there we can't add a user's J.S. file and in there I want

115
00:08:42,880 --> 00:08:49,760
to create a very basic react component where we react from react and then I'll named as users.

116
00:08:50,010 --> 00:08:57,100
And this is our regular react component where I can export it as a default.

117
00:08:57,100 --> 00:09:04,020
And in a year I return users works just some dummy text so did we see that this is rendered.

118
00:09:04,020 --> 00:09:09,780
If this is our users component and we want to load dad with the help of routing whenever the user is

119
00:09:09,780 --> 00:09:12,790
unjust our domain slash nothing.

120
00:09:12,990 --> 00:09:19,320
Well then we can go to app Chase and there we now can use a number of feature from react road router

121
00:09:19,320 --> 00:09:22,050
Dom the root component.

122
00:09:22,200 --> 00:09:25,390
Here we can use root as a component.

123
00:09:25,410 --> 00:09:29,480
So as J as X code the end we're importing goods from react ruder Dom.

124
00:09:29,730 --> 00:09:35,400
And on that root component which is provided by that package which can only be used inside of our router

125
00:09:35,430 --> 00:09:41,520
which has to be setup as a surrounding element there on the root component we can't add a path property

126
00:09:41,910 --> 00:09:50,280
and defined the path in the you are L so to think often a domain that should be entered to reach this

127
00:09:50,370 --> 00:09:51,530
specific root.

128
00:09:51,540 --> 00:09:56,170
So here slash and what should be rendered when that root is reached.

129
00:09:56,190 --> 00:10:01,140
Well the thing you pass between the opening and closing tax off route.

130
00:10:01,140 --> 00:10:09,370
Alternatively you can also add component prop to root and then create root as a self closing component

131
00:10:09,580 --> 00:10:16,180
that all the works but moving forward this package actually all supports and alternative syntax where

132
00:10:16,180 --> 00:10:21,760
you only set up the path on the root component itself and then you wrap the component that should be

133
00:10:21,760 --> 00:10:25,850
loaded for this path inside of the root component tax.

134
00:10:25,870 --> 00:10:36,520
So in my case I'll import users from dot slash user slash pages slash users and then render this year.

135
00:10:36,520 --> 00:10:42,220
Now the trick is that this will not always be rendered on the screen but thanks to this wrapper of thanks

136
00:10:42,220 --> 00:10:51,460
to this package it will only be rendered if ah you are L path is slash so if I saved is now and I restart

137
00:10:51,490 --> 00:10:57,970
my development server we should actually see our users content on the screen because I am on slash nothing

138
00:10:57,970 --> 00:11:00,010
by default here and hence we should see that.

139
00:11:00,220 --> 00:11:08,270
So let's wait for the development server to start up and indeed I now see users works.

140
00:11:08,360 --> 00:11:14,890
Now if I enter something else by the way I also see that though not just for a slash nothing.

141
00:11:15,010 --> 00:11:23,680
The reason for Dad is that by default this path is treated as a filter which means any path that starts

142
00:11:23,800 --> 00:11:26,040
with this will render users.

143
00:11:26,110 --> 00:11:27,310
No that's not what I want.

144
00:11:27,430 --> 00:11:32,260
I want to only render users if the POV is exactly this.

145
00:11:32,260 --> 00:11:34,330
So exactly slash nothing.

146
00:11:34,360 --> 00:11:40,390
After the domain you can enforce this by adding another property to route and that's the exact prop

147
00:11:40,960 --> 00:11:46,330
you can set this to true but you can also omit this if you just added like this.

148
00:11:46,330 --> 00:11:49,600
The value that is passed in will be true automatically.

149
00:11:49,600 --> 00:11:55,100
This means now this route is only rendered if the path is exactly Slash.

150
00:11:55,120 --> 00:12:02,470
So for now safeties We see users works but if and after something else we see nothing because now we're

151
00:12:02,470 --> 00:12:09,940
not on exactly slash nothing and therefore this does not work for that scenario to make sure dead we

152
00:12:09,940 --> 00:12:13,020
are not able to end up on unsupported pages.

153
00:12:13,180 --> 00:12:19,810
We could import never a component from react ruder Dom and that's the redirect component we can add

154
00:12:19,810 --> 00:12:24,040
this here and a router as well and there on redirect.

155
00:12:24,040 --> 00:12:26,590
We use this as a self closing component.

156
00:12:26,590 --> 00:12:30,250
We can add a tube property and redirect to slash.

157
00:12:30,370 --> 00:12:37,810
Now this code is parsed from top to bottom and what react router will do is when you are L changes it

158
00:12:37,810 --> 00:12:43,990
will basically go for all the routes we have set up here and it will see OK if the path is nothing we

159
00:12:43,990 --> 00:12:44,770
render dead.

160
00:12:45,070 --> 00:12:50,590
If the path is anything else does will not trigger and instead redirect will kick in and will redirect

161
00:12:50,590 --> 00:12:53,350
us back to slash nothing.

162
00:12:53,410 --> 00:13:02,210
So if we save that and now enter anything else you see we are automatically redirected to slash nothing.

163
00:13:02,280 --> 00:13:07,160
So this works exactly as it should and now we make sure we always end up here.

164
00:13:07,200 --> 00:13:14,870
If we enter anything but this path so now we can see our users now our users are not everything of course.

165
00:13:14,870 --> 00:13:20,180
We also want to be able to create a new place for example and we will fill these components with more

166
00:13:20,180 --> 00:13:20,870
life later.

167
00:13:20,870 --> 00:13:22,030
No worries.

168
00:13:22,100 --> 00:13:30,090
So in our pages in the places folder we could add a new place J.S. file and in there also create a straightforward

169
00:13:30,110 --> 00:13:33,370
component by importing react from react.

170
00:13:33,380 --> 00:13:39,410
Then creating this function new plays where we return some J as X code.

171
00:13:39,410 --> 00:13:44,200
In my case here are just some H to tag new plays works.

172
00:13:44,210 --> 00:13:49,670
So did we see that this also is loaded successfully and then export does as a default.

173
00:13:49,670 --> 00:13:51,860
New place.

174
00:13:51,990 --> 00:13:58,620
Now we can register this as a route as well in app Jesus we can duplicate this here and for example

175
00:13:58,620 --> 00:14:07,590
say if the path is places slash knew then I don't want to load users but I want to load new plays so

176
00:14:07,620 --> 00:14:14,340
import new plays from slash places slash pages slash new place.

177
00:14:14,550 --> 00:14:19,430
And then here we render new plays as a self closing component here.

178
00:14:19,440 --> 00:14:28,770
If that is our path to be now safe dad and I enter anything I'm redirected to slash if I enter slash

179
00:14:28,770 --> 00:14:30,540
places slash new though

180
00:14:34,060 --> 00:14:36,160
I'm also redirected.

181
00:14:36,240 --> 00:14:37,680
Why start.

182
00:14:37,680 --> 00:14:41,370
Well that happens because of the way the router works.

183
00:14:41,400 --> 00:14:47,850
I said that it would parse this from top to bottom and indeed when it encounters this route here and

184
00:14:48,030 --> 00:14:51,640
this here is our path and a U.R.L. it will render a new place.

185
00:14:51,660 --> 00:14:54,140
But that's really important to understand.

186
00:14:54,210 --> 00:14:59,610
It doesn't stop there off grid still evaluates the lines there off dress well and that's good because

187
00:14:59,610 --> 00:15:01,920
we could be rendering something totally different here.

188
00:15:01,950 --> 00:15:06,520
Let's say on a of footer we definitely would want to render dad below our roots right.

189
00:15:06,570 --> 00:15:09,900
So that on every page we have to add footer for example.

190
00:15:09,900 --> 00:15:16,770
So it does still execute the next line and therefore it does still redirect to make sure that we don't

191
00:15:16,770 --> 00:15:23,530
redirect but that instead we even render this route this route or we redirect we can import one object

192
00:15:23,540 --> 00:15:29,700
component from react ruder Dom and that's the switch component the switch component can be wrapped around

193
00:15:29,700 --> 00:15:37,440
your root definitions so before the starting road and off to redirect and this now instructs react router

194
00:15:37,620 --> 00:15:44,550
that ends up off the switch block whenever it encounters a fitting route it will not evaluate the lines

195
00:15:44,550 --> 00:15:45,200
thereafter.

196
00:15:45,240 --> 00:15:52,080
So it will not redirect if it was able to identify this path here and hence rendered this new place

197
00:15:52,080 --> 00:15:53,310
component.

198
00:15:53,310 --> 00:16:00,540
So with this switch component wrapped around our routes if we now enter slash places slash new again

199
00:16:00,820 --> 00:16:02,820
you'll see now we're not redirected.

200
00:16:02,820 --> 00:16:08,060
Instead we rendered this we enter anything else which does not exist we are redirected and therefore

201
00:16:08,070 --> 00:16:09,940
now it just works as it should.

202
00:16:10,620 --> 00:16:15,360
And this is routing in a nutshell with the help of the react router ID on package.

203
00:16:15,360 --> 00:16:22,020
This is how we can still stay and react world but make sure we render different main components.

204
00:16:22,020 --> 00:16:28,620
So to say which still are regular react components in the end based on the path the user entered into

205
00:16:28,630 --> 00:16:34,740
you are L and that's how a single page application in the end becomes a multi-page application.

206
00:16:34,740 --> 00:16:39,000
It's still all on the same single H to male page with which we started.

207
00:16:39,030 --> 00:16:45,630
You can always validate this if you view the page source that is the single HDMI code with that root

208
00:16:45,660 --> 00:16:51,600
death but react re renders what we see on the screen without reloading the page it just read renders

209
00:16:51,600 --> 00:16:58,500
it based on the U R L we enter thanks to the third party library here which simply instructs react which

210
00:16:58,500 --> 00:17:01,110
component to render based on which path we entered.
