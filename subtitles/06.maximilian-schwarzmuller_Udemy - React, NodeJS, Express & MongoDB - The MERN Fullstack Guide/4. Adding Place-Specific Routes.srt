1
00:00:02,120 --> 00:00:09,010
We added our first simple route in a extra file failure to keep our aptly us file lean.

2
00:00:09,020 --> 00:00:12,490
Now as I mentioned though this isn't even a road which we need.

3
00:00:12,620 --> 00:00:19,550
We need to get roots in the places area but we need roots for a specific user I.D. or a specific place

4
00:00:19,630 --> 00:00:23,640
I.D. we also need our roads like post patch in the lead.

5
00:00:23,660 --> 00:00:25,430
So let's work on that now.

6
00:00:25,520 --> 00:00:32,660
Let's also make sure that we only reach our places routes if the request starts with Slash API slash

7
00:00:32,660 --> 00:00:36,530
places as indicated on that slide and not with Slash.

8
00:00:36,530 --> 00:00:43,070
Nothing as it's currently the case because we all want to be able to use slash API slash users to later

9
00:00:43,070 --> 00:00:44,710
reach our users routes.

10
00:00:44,750 --> 00:00:51,050
So for that back in our application to make sure that we only make it to these places routes if the

11
00:00:51,050 --> 00:00:59,340
request starts with Slash API slash places we have to add a filter here on this middleware in the app

12
00:00:59,340 --> 00:01:00,830
J.S. file.

13
00:01:00,830 --> 00:01:07,970
Now when using the U.S. method you don't have to add a path filter but you can then this filter will

14
00:01:08,030 --> 00:01:09,770
also not be treated as.

15
00:01:10,070 --> 00:01:18,590
This has to be the exact path filter but as a the path has to start with the specified path filter.

16
00:01:18,590 --> 00:01:25,640
That means that here is a first argument we can add slash API slash places and express chars will now

17
00:01:25,730 --> 00:01:30,120
only for award requests to our places routes middleware.

18
00:01:30,170 --> 00:01:38,630
So to the routes configured here if their path starts with Slash API slash places it can be longer than

19
00:01:38,630 --> 00:01:43,160
that so it can be slash API slash places slash something.

20
00:01:43,160 --> 00:01:48,020
It will still be forwarded but for example just slash API slash.

21
00:01:48,020 --> 00:01:52,060
Nothing would not be forwarded to places routes.

22
00:01:52,130 --> 00:01:58,460
So with that if we change this we make sure that if we reload here this does not work anymore because

23
00:01:58,460 --> 00:02:07,670
now our route here slash nothing actually has to be prepared with Slash API slash places and that's

24
00:02:07,700 --> 00:02:09,050
all important.

25
00:02:09,050 --> 00:02:15,370
The root filter you set up here is automatically added to the filter you have here.

26
00:02:15,470 --> 00:02:22,770
So if you want to have requests which start with Slash API slash places you must not repeat that here.

27
00:02:22,970 --> 00:02:29,190
Instead here you only add the path after that initial filter you have an app has already.

28
00:02:29,300 --> 00:02:33,530
So here that simply means just API slash places slash.

29
00:02:33,530 --> 00:02:42,470
Nothing should trigger dysfunction so here if we now enter API slash places we get our message again.

30
00:02:42,500 --> 00:02:50,990
This works but of course whilst it's nice that this works this isn't really the logic we need here.

31
00:02:50,990 --> 00:02:57,890
Instead if we have a look at our plan again we need to get root which has slashed users slash some user

32
00:02:57,890 --> 00:03:04,600
I.D. in it or which just searches for a specific place I.D. and to practice dead.

33
00:03:04,730 --> 00:03:13,280
Let's actually add constants here in places routes dummy places which will later in the course be replaced

34
00:03:13,280 --> 00:03:16,080
by our database access in the end but here.

35
00:03:16,100 --> 00:03:21,710
Let's just store some dummy places for the moment and every place could have an I.D. p one could have

36
00:03:21,710 --> 00:03:34,140
a title for example Empire State Building could have a description one of the most famous sky scrapers

37
00:03:34,260 --> 00:03:35,370
in the world.

38
00:03:37,640 --> 00:03:43,100
Location which actually should be a nested object with a latitude and longitude.

39
00:03:43,100 --> 00:03:48,890
And here I simply use Google Maps to search for that so I'll paste in the values you can simply use

40
00:03:48,890 --> 00:03:55,330
Google maps and search for the Empire State Building to then find the latitude and longitude here in

41
00:03:55,340 --> 00:03:59,410
the you or l the thing after D at is the latitude.

42
00:03:59,480 --> 00:04:04,340
The thing after the Commodore after before the next comma is the longer etude.

43
00:04:04,430 --> 00:04:11,930
So that's what I simply pasted in here then the address which I'll also simply paste from Google Maps

44
00:04:12,800 --> 00:04:19,480
and a create or field which points at a fictional user I.D. because we have no real users at the moment.

45
00:04:19,640 --> 00:04:26,210
You one which I would say is the user who created that place later of course we will have real users

46
00:04:26,210 --> 00:04:30,530
and linked up models will have users connect the two places.

47
00:04:30,530 --> 00:04:33,350
For now we'll just work with the dummy data.

48
00:04:33,440 --> 00:04:37,920
So now we have a place which we could try to get by its I.D..

49
00:04:38,090 --> 00:04:43,700
So I actually here I wont of a get request where the I.D. is part of the U R L.

50
00:04:44,250 --> 00:04:50,930
So the idea is that we send the request to API slash places slash p 1 for example and this gives us

51
00:04:50,930 --> 00:04:56,670
the data for the place with the IDP one so the I.D. should be encoded in the U R L.

52
00:04:56,690 --> 00:05:03,710
That's a typical pattern you see in such API is in reality to tell expressed that we have a dynamic

53
00:05:03,710 --> 00:05:08,580
segment which we don't know in advance because of course I can't say I want to load something for p

54
00:05:08,580 --> 00:05:12,240
1 because later we'll have more places with different ideas.

55
00:05:12,380 --> 00:05:18,230
So to tell expressed that we have a dynamic segment where we don't know the exact value in advance but

56
00:05:18,280 --> 00:05:23,720
to where we want to be able to later use it in this middleware function and find a place by the concrete

57
00:05:23,750 --> 00:05:25,400
value which was entered.

58
00:05:25,400 --> 00:05:32,510
We add a colon here in our filter and then any identifier of our choice for example place I.D. or just

59
00:05:32,510 --> 00:05:34,660
paid for place Heidi.

60
00:05:34,880 --> 00:05:42,680
Now express Chase accepts this route here if I save this and I reload this you are L with places slash

61
00:05:42,680 --> 00:05:43,490
p. 1.

62
00:05:43,790 --> 00:05:46,910
We see we make it into this middleware function and that's great.

63
00:05:46,910 --> 00:05:53,600
But now I also want to return that place with that I.D. which could mean nearly half here because I

64
00:05:53,600 --> 00:06:00,890
added it as a dummy place for Dad we need to extract the concrete value that was entered for this concrete

65
00:06:00,980 --> 00:06:06,610
request which reaches this function and express J as has got us covered with that too.

66
00:06:06,950 --> 00:06:13,050
We can get the place idea by using the request object and there you will have a parent's property.

67
00:06:13,070 --> 00:06:20,600
This is added by express J.S. the parents property Indian holds an object where your dynamic segments

68
00:06:20,600 --> 00:06:28,820
here will exist as keys and the value will be the concrete value the user who sent the request entered.

69
00:06:28,820 --> 00:06:35,200
So here we can access request parents thought pit and get the concrete I.D. that is encoded in the U

70
00:06:35,200 --> 00:06:42,170
R L well and now we can search for a place with that I.D. and the dummy places array and add that to

71
00:06:42,170 --> 00:06:44,300
the response we're sending back.

72
00:06:44,300 --> 00:06:51,770
So here we can get our place by reaching out to dummy places and using the Find method which is a default

73
00:06:51,800 --> 00:06:53,720
javascript array method.

74
00:06:53,780 --> 00:07:01,700
It helps us find a specific element in an array find takes a function which we pass to it which will

75
00:07:01,700 --> 00:07:07,940
be executed on every element India rate and the element that's currently looking at will be fed in to

76
00:07:07,940 --> 00:07:09,500
the function as an argument.

77
00:07:09,530 --> 00:07:14,990
So the place in this case which I'll just name P here and the argument to not clash with this constant

78
00:07:14,990 --> 00:07:22,520
name then here in this fine function we have to return true if we're looking at the place which we want

79
00:07:22,520 --> 00:07:23,450
to find.

80
00:07:23,450 --> 00:07:25,990
So here I will return p dot I.D..

81
00:07:26,420 --> 00:07:33,490
Equal place I.D. So I'm comparing the idea of the place I'm currently looking at and keep in mind dysfunction

82
00:07:33,560 --> 00:07:39,290
year executes on all elements and does it right of course here we only have one but if we had more than

83
00:07:39,290 --> 00:07:45,470
one it would execute on all of them and it will then return true if the idea of the place it's currently

84
00:07:45,470 --> 00:07:52,400
looking at is equal to the idea that was part of our U.R.L. and then here instead of returning some

85
00:07:52,400 --> 00:07:57,120
message I can return the place here in my response.

86
00:07:57,140 --> 00:08:03,230
This syntax here by the way can always be shortened to this that is default JavaScript in the end means

87
00:08:03,230 --> 00:08:11,030
that JavaScript automatically expands this to this if the name of the property is equal to the name

88
00:08:11,030 --> 00:08:14,760
of the variable that holds the value you want to store in the property.

89
00:08:14,810 --> 00:08:23,430
You can shorten it and with that if we now safeties and we reload this page you'll see indeed.

90
00:08:23,430 --> 00:08:24,780
Here I get back.

91
00:08:24,780 --> 00:08:30,780
That place data I get back that plays data because I entered a valid I.D..

92
00:08:30,990 --> 00:08:37,440
If I for example would try to find the place with the IDP to which I don't have here in my dummy places

93
00:08:38,160 --> 00:08:44,250
you would see I get back an empty object because there is no place which I found.

94
00:08:44,340 --> 00:08:51,450
So there is no place added to this object of course in such a case where we didn't find a place we might

95
00:08:51,450 --> 00:08:56,750
want to handle this error differently and return of 4 0 for error for example.

96
00:08:56,910 --> 00:08:59,380
But we'll have a look at error handling a little later.

97
00:08:59,400 --> 00:09:04,140
For now let's leave it as it is and instead work on a novel route.

98
00:09:04,140 --> 00:09:11,880
Let's implement that get slash users slash colon you idea route here and that is actually a great practice

99
00:09:11,880 --> 00:09:15,100
for a you will implement to gather in the next lecture.

100
00:09:15,210 --> 00:09:23,040
But here it's your job to instead write a new route that is able to accept this dynamic you I.D. segment

101
00:09:23,070 --> 00:09:28,920
extract that in the middle where function then and find a place where the creator has dead user I.D.

102
00:09:29,310 --> 00:09:32,130
you learned everything you need for that in the last lectures.

103
00:09:32,130 --> 00:09:37,050
So definitely try it on your own first before we then do it together in the next lecture.
