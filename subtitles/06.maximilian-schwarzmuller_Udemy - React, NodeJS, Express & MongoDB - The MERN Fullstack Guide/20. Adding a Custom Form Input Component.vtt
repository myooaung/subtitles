WEBVTT
1
00:00:02.330 --> 00:00:05.110
So our application doesn't look too bad.

2
00:00:05.120 --> 00:00:08.090
We can certainly do some things here.

3
00:00:08.090 --> 00:00:12.500
Now one thing we can't really do at the moment is add a new place.

4
00:00:12.500 --> 00:00:18.880
Now one important note at this point whilst we can of course add everything we need to add a new place.

5
00:00:18.890 --> 00:00:26.150
So the four main puts ends on what will not build at this point of course is a real functionality to

6
00:00:26.240 --> 00:00:32.390
add a new place to the list of places here for the simple reason that we have no back end yet where

7
00:00:32.390 --> 00:00:34.220
we could store that new place.

8
00:00:34.220 --> 00:00:40.670
Now we could absolutely use something like read X to manage application wide state in our front end

9
00:00:40.670 --> 00:00:45.140
app here and they offer manage our places locally in the browser.

10
00:00:45.140 --> 00:00:47.270
But this is not what we need later in the course.

11
00:00:47.290 --> 00:00:51.740
There we don't want to manage all our data just locally in the browser.

12
00:00:51.740 --> 00:00:57.380
Instead we want to manage it on a server to also share it with our users and not just have it on our

13
00:00:57.380 --> 00:01:00.660
machine on our running instance of the react app.

14
00:01:00.680 --> 00:01:06.890
So therefore I will add the add place functionality now but will not wire it up to our list of places

15
00:01:06.890 --> 00:01:12.260
because here in our code of course we only have a dummy list of places any ways right.

16
00:01:12.260 --> 00:01:18.230
We have the dummy places here and for now will not add any functionality to managers application wide

17
00:01:18.530 --> 00:01:21.070
because as I mentioned we'll do this on a server later.

18
00:01:21.710 --> 00:01:27.470
Nonetheless let's work on the new plays page here and let's make sure that we actually can add a new

19
00:01:27.470 --> 00:01:32.630
place so that we do have all the inputs for that and that we can at least get to the point where we

20
00:01:32.630 --> 00:01:36.200
would be ready to send the plays off to a server.

21
00:01:36.590 --> 00:01:40.860
For that we need to build a forum in New place.

22
00:01:40.990 --> 00:01:51.670
I want to return a form here instead of age to tech and on that form I'll add a class name of place

23
00:01:53.550 --> 00:01:58.110
dash form you can of course use any class you want in there.

24
00:01:58.140 --> 00:02:02.240
I don't want have a couple of inputs and also a submit button indeed.

25
00:02:02.370 --> 00:02:09.510
Now 40 inputs we could of course use the regular H2 male inputs and combine that with let's say label

26
00:02:09.510 --> 00:02:10.500
components.

27
00:02:10.500 --> 00:02:13.460
But I want to create my own component which combines both.

28
00:02:13.530 --> 00:02:19.240
And that's important which also has built in user input validation.

29
00:02:19.260 --> 00:02:24.840
My idea is that we have some kind of input component which you could use like this and that on this

30
00:02:24.840 --> 00:02:26.870
input component we can configure it.

31
00:02:26.910 --> 00:02:35.910
We can give it a type of text for example we can give it a label of title and we can also add a validators

32
00:02:36.180 --> 00:02:44.310
property which should take an array of predefined validation rules which will also have to create.

33
00:02:44.310 --> 00:02:51.030
So quite a complex component which does not just render some visuals to the screen but which as I just

34
00:02:51.040 --> 00:02:55.660
said also has some built in logic for validating user input and so on.

35
00:02:55.800 --> 00:02:57.930
So did it by the end when this component is finished.

36
00:02:57.930 --> 00:03:04.530
We have on change prop there which triggers a function on every keystroke and gives us not just the

37
00:03:04.620 --> 00:03:10.780
input not just the text the user entered but also some information whether that input is valid so that

38
00:03:10.780 --> 00:03:16.950
we have the validation built into the inputs and we don't have to do it here in this new place component

39
00:03:17.160 --> 00:03:23.110
that's again this idea of splitting code and of outsourcing things so step by step.

40
00:03:23.130 --> 00:03:28.350
Let's first of all build a simple input which just outputs something visually and then later as a next

41
00:03:28.350 --> 00:03:34.680
step let's add the validation as a last step will then also add validation to the entire form where

42
00:03:34.680 --> 00:03:40.350
I basically want to sum up the different validation results of the individual inputs and decide whether

43
00:03:40.350 --> 00:03:43.790
the overall form is valid or not but that will be the last step.

44
00:03:43.830 --> 00:03:48.140
So let's go to form elements then and in there let's add a new input.

45
00:03:48.140 --> 00:03:54.510
J is file input C as as file to add well this component I was just talking about and that is that this

46
00:03:54.510 --> 00:03:57.720
will be a complex component so we'll spend some time on it.

47
00:03:57.720 --> 00:03:58.920
We start simple though.

48
00:03:58.920 --> 00:04:05.790
We import react from react here and then we have our input component which receives some props and which

49
00:04:05.790 --> 00:04:09.410
will have some logic in there and we export this.

50
00:04:09.480 --> 00:04:13.340
And of course we should also import the C S S styling here.

51
00:04:13.350 --> 00:04:21.300
So slash input see as s also a little side note at this point there are third party libraries like formic

52
00:04:21.480 --> 00:04:26.190
which you can use and react to get form functionality for free.

53
00:04:26.190 --> 00:04:32.910
So to say so to simply installed at Library and then you can set up forums and form inputs with it and

54
00:04:32.910 --> 00:04:37.980
use that to handle validations on you could absolutely do that and you can look into solutions like

55
00:04:37.980 --> 00:04:38.480
that.

56
00:04:38.640 --> 00:04:45.030
But in my courses I'm always a big fan of teaching the topic at hand in death.

57
00:04:45.030 --> 00:04:51.420
And I find it very interesting to see how form validation could be set up on your own and how you could

58
00:04:51.420 --> 00:04:57.720
build quite a sophisticated form input system without any third party library and therefore that is

59
00:04:57.720 --> 00:04:59.340
what we'll do here.

60
00:04:59.370 --> 00:05:01.830
Back to our input component though here.

61
00:05:01.920 --> 00:05:09.540
I now want to return some J is X and J is X we do return here will be a death which groups to gather

62
00:05:09.570 --> 00:05:17.640
a label and an input and on that death I want to assign some dynamic class names form control which

63
00:05:17.940 --> 00:05:27.390
will always be there but in addition I also want to be able to later add some dynamic class so a class

64
00:05:27.420 --> 00:05:33.180
which will not always be added based on the validity of the input so that we can for example color the

65
00:05:33.180 --> 00:05:38.880
label and the input field red if it's invalid for now we'll just have form control there but we'll add

66
00:05:38.880 --> 00:05:46.170
more later instead of the div we now need a label element and there I want to output the text which

67
00:05:46.170 --> 00:05:53.760
is received on the label prop of our custom component and they are all also add H to metal for props

68
00:05:53.800 --> 00:05:54.460
I.D..

69
00:05:54.750 --> 00:06:00.870
This here is basically D for attributes you have on a normal label as well justice as a class attribute

70
00:06:01.140 --> 00:06:03.690
for is a keyword in javascript.

71
00:06:03.690 --> 00:06:08.910
So here in J is X we can't use it and hence we have aged him out for which will be translated to that

72
00:06:08.940 --> 00:06:10.510
regular four attribute.

73
00:06:10.560 --> 00:06:16.850
Once this is rendered to the DOM well and then I expect to get some I.D. Why are props and I passed

74
00:06:16.850 --> 00:06:25.230
this to aged him out for then here I want to render the actual input and dare I want to be flexible.

75
00:06:25.230 --> 00:06:32.490
This input component should be able to render our regular input but also a text area so to cater for

76
00:06:32.490 --> 00:06:33.420
both.

77
00:06:33.420 --> 00:06:42.480
I will take a step back here and create an element let's say element constant and the content of that

78
00:06:42.660 --> 00:06:49.260
depends on let's say element prop where we can decide from outside which kind of element we want to

79
00:06:49.260 --> 00:06:55.950
render and if the element prop holds a value of input then element.

80
00:06:55.950 --> 00:07:01.000
So this element constant here will store input element.

81
00:07:01.350 --> 00:07:05.990
Otherwise it will store a text area like this.

82
00:07:06.030 --> 00:07:13.920
Now of course we need to configure both now the input here will receive some props the idea for example

83
00:07:14.010 --> 00:07:21.090
props I.D. and also the type prop stored type so that we can decide from outside which type of input

84
00:07:21.090 --> 00:07:21.870
we create.

85
00:07:21.870 --> 00:07:23.060
Text No.

86
00:07:23.090 --> 00:07:24.440
And so on.

87
00:07:24.450 --> 00:07:31.170
We also might want to be able to set a placeholder text with props place holder and that's it for now

88
00:07:31.250 --> 00:07:35.090
we'll add more later but for the moment that is it all in the text area.

89
00:07:35.100 --> 00:07:42.600
We also can set the I.D. off this element and we also might want to be able to set the rows from outside

90
00:07:43.080 --> 00:07:49.200
so we can set this to props rows or to a default of free lets say with this fallback value in case the

91
00:07:49.200 --> 00:07:55.690
rows prop is not defined now for the moment that's it below the label we can now output the element.

92
00:07:55.740 --> 00:07:56.380
So here.

93
00:07:56.460 --> 00:08:01.800
Dynamic expression because I'm referring to a javascript expression here I'm outputting the value of

94
00:08:01.800 --> 00:08:05.550
element after all and the value of element is either input or text area.

95
00:08:05.580 --> 00:08:07.370
So that's getting rendered down there.

96
00:08:09.100 --> 00:08:13.010
With that we have a very simple input or a form control setup.

97
00:08:13.060 --> 00:08:17.500
Now it's all the time for some styling and for that attached you find that input see us as file where

98
00:08:17.500 --> 00:08:24.930
you can just paste the content into this input see us as file and you will also find a new place see

99
00:08:24.940 --> 00:08:33.920
us as file where you can paste your content in and make sure that in New Place J.S. you import that

100
00:08:34.220 --> 00:08:40.610
new place see us as file of course and this will ensure that the entire form is styled properly.

101
00:08:40.610 --> 00:08:47.810
Now a new place J us we can also import the input component now so import input from and then let's

102
00:08:47.810 --> 00:08:54.090
go to the shared folder components form elements input and this should therefore work.

103
00:08:54.110 --> 00:08:58.910
Now let's see if it works and for Dad we'll need to specify one extra thing here.

104
00:08:58.910 --> 00:09:05.690
Keep in mind that in our newly added input component we require the element prop to render even an input

105
00:09:05.740 --> 00:09:07.160
or the text area.

106
00:09:07.160 --> 00:09:12.350
So if we don't specify it will always render a text area but if we don't want the text area we have

107
00:09:12.350 --> 00:09:15.290
to add an element prop and set this value to input.

108
00:09:15.290 --> 00:09:22.060
So here in the new place component I will add element and set this to input here with Dad if we save

109
00:09:22.060 --> 00:09:30.270
this we get this simple form not super amazing but a good starting point of course at the moment there

110
00:09:30.270 --> 00:09:33.660
is no built in validation or anything like that.

111
00:09:33.750 --> 00:09:40.500
So before we add more and more inputs let's actually focus on that built in logic and validation part.
