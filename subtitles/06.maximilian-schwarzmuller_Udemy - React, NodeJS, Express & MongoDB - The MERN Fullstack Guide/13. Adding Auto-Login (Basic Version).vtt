WEBVTT
1
00:00:02.200 --> 00:00:04.850
So we get the tokens stored in local storage.

2
00:00:04.870 --> 00:00:13.630
Now let's use it to automatically log a user in and for that we basically want to run them logic whenever

3
00:00:13.640 --> 00:00:15.270
our ReACT upstarts.

4
00:00:15.290 --> 00:00:18.410
When it starts we want to check whether the user is logged in.

5
00:00:19.340 --> 00:00:24.890
Now the app J.S. follow the app component is basically the first component that gets rendered when the

6
00:00:24.890 --> 00:00:30.170
app starts here and indexed J as I rendered his app component as my root component.

7
00:00:30.170 --> 00:00:38.090
So any logic you run in here will run when the app well is starting up so if you want to run some logic

8
00:00:38.090 --> 00:00:44.460
here whenever it is component renders for the first time we can use use effect in the app component.

9
00:00:44.540 --> 00:00:51.650
So here it will add use effect and add a function to it that should check local storage for a token.

10
00:00:51.650 --> 00:00:56.630
Now the dependencies of dysfunction will be an empty array which means this function here will only

11
00:00:56.630 --> 00:01:01.310
run once when the component mounts when it rendered for the first time.

12
00:01:01.340 --> 00:01:06.230
And that's by the way important use effect always runs after the render cycle.

13
00:01:06.230 --> 00:01:09.690
I explained this earlier in the course already it's just important to keep in mind.

14
00:01:09.830 --> 00:01:12.230
React well already rendered its component.

15
00:01:12.230 --> 00:01:17.930
But of course in the unsophisticated state by default then and there after Randy's use affect function

16
00:01:17.930 --> 00:01:18.760
for the first time.

17
00:01:18.770 --> 00:01:21.020
This is just how react works.

18
00:01:21.020 --> 00:01:28.250
You could theoretically manage a state which basically is something like is checking off and unless

19
00:01:28.250 --> 00:01:34.970
it is in fact finished this will be true and you render some splash screen or some fallback page until

20
00:01:34.970 --> 00:01:37.770
checking off is done here.

21
00:01:37.770 --> 00:01:41.940
However I will keep it simpler and just go to use a fact than in there.

22
00:01:41.940 --> 00:01:49.080
Check our local storage so in local storage I can get an item and get it by that key I used to store

23
00:01:49.080 --> 00:01:54.750
it so in my case that's user data because that's what we used to store the data and what we extract

24
00:01:54.750 --> 00:01:56.100
will be taxed.

25
00:01:56.100 --> 00:02:02.370
Now we know that it's text which can be converted to a javascript object because it will be Jason text

26
00:02:02.430 --> 00:02:04.700
or text which is using the Jason format.

27
00:02:06.120 --> 00:02:12.180
Thankfully in JavaScript we got this Jason object which does not just have a string if I effort to convert

28
00:02:12.240 --> 00:02:19.920
objects to Jason but also parts method to convert Jason's strings back to regular javascript data structures

29
00:02:19.920 --> 00:02:21.380
like objects.

30
00:02:21.420 --> 00:02:28.170
So here I then got my stored data which I extract from local storage and this stored data will be such

31
00:02:28.170 --> 00:02:35.250
an object with a user I.D. and a token so now we can check if we got stored data.

32
00:02:35.280 --> 00:02:37.180
So if this is not undefined.

33
00:02:37.200 --> 00:02:40.330
So put in other words if we did find something there.

34
00:02:40.620 --> 00:02:48.470
And if we do have store data we can check if stored data dot token is a thing if that is a thing we

35
00:02:48.470 --> 00:02:54.890
know we have a token and therefore we could lock the user in so we could execute our log and function

36
00:02:54.890 --> 00:02:58.230
here then and forward stored data.

37
00:02:58.240 --> 00:03:02.810
Dot user I.D. and stored data dot token.

38
00:03:02.810 --> 00:03:04.630
These are the two pieces we need here.

39
00:03:04.700 --> 00:03:10.970
And we then trigger our log in logic now actually use a fact has a dependency and that is our log in

40
00:03:10.970 --> 00:03:11.750
function.

41
00:03:11.750 --> 00:03:16.980
But thanks to use callback this will only run once and it will not rerun thereafter.

42
00:03:17.030 --> 00:03:21.950
And now here we just need to switch order and make sure we execute use effect after these functions

43
00:03:21.950 --> 00:03:22.950
have been defined.

44
00:03:24.050 --> 00:03:31.730
So now here we ensure dead log in is executed with our data with our user I.D. and with the token if

45
00:03:31.730 --> 00:03:42.690
we got a token so if we now save this and I reload here you see indeed eyes which to be locked in mode

46
00:03:42.720 --> 00:03:49.080
immediately we see a brief flickering here because the first render cycle is an unlocked indicated mode

47
00:03:49.410 --> 00:03:54.630
but as I mentioned you could have wide this by instead loading some splash screen for the very first

48
00:03:54.630 --> 00:04:01.170
render cycle until use effect is done you would just have to manage your is checking off status here

49
00:04:01.370 --> 00:04:07.090
in that use effect and set it to false to indicate that you're done checking once you are done here.

50
00:04:07.110 --> 00:04:13.770
I don't need that because it loads so fast I don't think we have a real problem here with the user experience.

51
00:04:13.770 --> 00:04:20.790
So this is now using this token but with this implementation there are two things we're not doing for

52
00:04:20.790 --> 00:04:26.550
one when we're logging out we're not clearing the token that is something we can easily do here in logout

53
00:04:26.580 --> 00:04:31.240
we just have to add local storage remove key and remove the user data.

54
00:04:31.410 --> 00:04:32.640
So that wasn't too hard.

55
00:04:32.640 --> 00:04:38.680
Does ensures that when we do log out we indeed stay locked out if we reload so that we don't stored

56
00:04:38.680 --> 00:04:40.500
a token and local storage.

57
00:04:40.530 --> 00:04:45.900
The more important thing we're not doing here or the more severe thing we're not doing here is that

58
00:04:45.900 --> 00:04:49.100
we're totally ignoring the fact that the token will expire.

59
00:04:49.170 --> 00:04:50.700
We shouldn't do that.

60
00:04:50.700 --> 00:04:55.670
For one we want to lock the user out automatically wants the token expired.

61
00:04:55.890 --> 00:05:01.190
And second when we try to order log into user based on the token he might have.

62
00:05:01.620 --> 00:05:07.070
We of course also want to check not only if we do have a token but if that token still is valid.

63
00:05:07.500 --> 00:05:11.790
So we need to include the token expiration into our logic here.
