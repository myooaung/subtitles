WEBVTT
1
00:00:02.080 --> 00:00:06.570
Up to now we use the official Mongo DB driver to interact with our database.

2
00:00:06.670 --> 00:00:12.040
And while this worked fine in general we saw that it was a bit cumbersome at some points.

3
00:00:12.040 --> 00:00:15.960
Turns out there is a better solution for this database interaction.

4
00:00:16.330 --> 00:00:21.930
And this solution is Mongoose mongoose is a third party library and it builds up on the official multiple

5
00:00:21.970 --> 00:00:28.720
driver but it makes this interaction with demography database a lot more convenient Mongoose uses so-called

6
00:00:28.720 --> 00:00:35.790
schemas and schemas allow you to define the structure of the documents you want to store in your database.

7
00:00:35.810 --> 00:00:41.740
Now in case you have a requirement of such structured data as we do it for example then These schemas

8
00:00:41.920 --> 00:00:49.030
make storing and fetching data from the database a lot more convenient in case you don't have the requirement

9
00:00:49.150 --> 00:00:50.260
of such structured data.

10
00:00:50.260 --> 00:00:54.910
So if you have unstructured data in your project this might not be the perfect solution though Mongoose

11
00:00:54.910 --> 00:00:56.650
can also be used with unstructured data.

12
00:00:56.650 --> 00:01:01.280
As a side note but for our purposes your mongoose is a very nice helper.

13
00:01:01.390 --> 00:01:11.990
Therefore let's install it right now by using npm install dash dash save mongoose.

14
00:01:12.210 --> 00:01:17.150
This would install Mongoose now and mongoose will allow us to connect to our database server and will

15
00:01:17.160 --> 00:01:24.390
also allow us to create and get data now for a little project here storing and getting data means storing

16
00:01:24.390 --> 00:01:26.240
and getting products.

17
00:01:26.250 --> 00:01:28.860
Therefore we not have to create the schema for a product.
