1
00:00:02,110 --> 00:00:09,070
To set up a basic node express application in the app J.S. file I will first of all import Express.

2
00:00:09,100 --> 00:00:17,520
With that note J.S. specific import syntax where we require a package and and stored the imported content

3
00:00:17,520 --> 00:00:23,770
the imported object in the end in this Express constant and I'll do the same here for the body password

4
00:00:23,860 --> 00:00:28,540
because we'll also need that to past the body of incoming requests.

5
00:00:28,540 --> 00:00:34,150
And with that imported we can create our app object by executing express as a function.

6
00:00:34,150 --> 00:00:40,570
That is what you'll learn and you refresh your module and on that app object we can then bridge Mr.

7
00:00:40,570 --> 00:00:46,900
middleware either generic middleware which triggers on all requests with the use function here with

8
00:00:46,900 --> 00:00:55,270
the use method or middleware for specific h to be methods with get and post and patch and so on and

9
00:00:55,270 --> 00:00:59,890
there we don't have to specify a filter path and they're offered a middleware function.

10
00:01:00,040 --> 00:01:04,900
Once we're done with all the middleware and of course right now I haven't added any but once we have

11
00:01:04,900 --> 00:01:10,780
added it we can call listen on the app object to listen on a certain port.

12
00:01:10,840 --> 00:01:17,800
And here I will use port five thousand too darn well start my dial up and server on that port.

13
00:01:17,830 --> 00:01:20,320
So on local host five thousand.

14
00:01:20,470 --> 00:01:26,800
And with that it's now time to register middleware now which middleware do we need.

15
00:01:26,800 --> 00:01:33,460
Obviously we want to use middleware body parser that ensures that we parse the request bodies of incoming

16
00:01:33,460 --> 00:01:34,690
requests.

17
00:01:34,690 --> 00:01:40,930
In addition however I also want to handle requests to different parts.

18
00:01:40,960 --> 00:01:48,880
So I want to set up my routing so to say routing simply means that I want to listen for a certain age

19
00:01:48,880 --> 00:01:54,830
to the p method path combinations and then run different code for every combination.

20
00:01:54,910 --> 00:01:56,910
That is what I mean with the term routing.

21
00:01:56,920 --> 00:02:03,040
I want to route certain requests to certain functions that should be executed upon those requests.

22
00:02:03,040 --> 00:02:09,820
Now we can set up such a routing with APP get to handler get request to slash nothing for example but

23
00:02:09,820 --> 00:02:16,330
it is a good practice to not do the routing here in this main aptly as file which would get Robert big

24
00:02:16,330 --> 00:02:22,330
if you have a lot of routes but to outsource it into separate files and therefore here I will add a

25
00:02:22,330 --> 00:02:28,580
new routes folder next to app J.S. and in there I will add two files.

26
00:02:28,630 --> 00:02:35,830
The first file which I'll add is places routes start J.S. you can name the file however you want I just

27
00:02:35,830 --> 00:02:41,170
name it Dash routes so that it's clear that this will contain some routing logic.

28
00:02:41,170 --> 00:02:46,360
Of course you could argue that since this file isn't a rule it's folder that's already clear and we

29
00:02:46,360 --> 00:02:51,790
could just name it places but since I'll have our files named places and other places of the app as

30
00:02:51,790 --> 00:02:55,830
well I'll go for places routes here and also users routes.

31
00:02:55,830 --> 00:03:04,450
J.S. now my idea is that in these files I set up the middleware or I register the middleware that is

32
00:03:04,450 --> 00:03:11,620
responsible for handling routes regard it related to places and routes related to users.

33
00:03:11,890 --> 00:03:16,770
To do that let's get started with a simple places route and fought it all now again.

34
00:03:16,780 --> 00:03:23,710
Use Express here in this file so all again imported here and that's important by the way.

35
00:03:23,710 --> 00:03:30,730
If you need express in more than one file you have to import it in every file where you use something

36
00:03:30,730 --> 00:03:32,570
from the Express package.

37
00:03:32,590 --> 00:03:38,590
So just because I import express here an app Chase already does not mean that it's automatically unlocked

38
00:03:38,590 --> 00:03:40,060
in all our files.

39
00:03:40,060 --> 00:03:40,340
No.

40
00:03:40,360 --> 00:03:45,310
If we need something from Express and displaces Robert's file and we will need something from it here

41
00:03:45,580 --> 00:03:47,800
then we have to import it here.

42
00:03:47,800 --> 00:03:51,980
Now the question is what do I need from this express package.

43
00:03:52,090 --> 00:03:59,020
I need a special feature a special tool and that's the router which we can access with Express dot router

44
00:03:59,080 --> 00:04:00,880
which we execute like a function.

45
00:04:01,100 --> 00:04:02,630
And that's important here.

46
00:04:02,650 --> 00:04:09,250
I don't execute express itself as a function as I did it in the app J ust file but instead does a router

47
00:04:09,250 --> 00:04:14,170
method with a capital R which exists on the imported express object.

48
00:04:14,170 --> 00:04:21,640
This gives us a special object on which we can also register middleware which is filtered by HBP method

49
00:04:21,640 --> 00:04:29,140
and path but the interesting thing is that we then can export our configured router by the end of this

50
00:04:29,140 --> 00:04:37,170
file and imported an app J.S. and registered as entire configured router as one single middleware in

51
00:04:37,170 --> 00:04:38,420
app class.

52
00:04:38,470 --> 00:04:41,270
Now it becomes clear if we simply do that.

53
00:04:41,460 --> 00:04:49,720
So here in router I will start by registering a route and let's say it's I get Rod for Slash nothing

54
00:04:49,810 --> 00:04:55,450
for the moment we don't actually need this specific route and we can find two this later but for the

55
00:04:55,450 --> 00:04:57,310
moment let's just register this.

56
00:04:57,580 --> 00:04:59,700
We simply call get on the router.

57
00:04:59,830 --> 00:05:06,310
It basically has the same like the app object when it comes to middleware we can use use to register

58
00:05:06,310 --> 00:05:13,530
something on every request or post get patch and so on to register something on specific HP methods.

59
00:05:13,600 --> 00:05:18,210
Then if we do pick a specific method we have to add a filter string here.

60
00:05:18,430 --> 00:05:25,750
So simply the path by which we want to filter and then the function which should execute when a request

61
00:05:25,870 --> 00:05:27,730
reaches this route.

62
00:05:27,730 --> 00:05:33,910
So when we get a get request to slash nothing then we have our standard middleware function as we know

63
00:05:33,910 --> 00:05:40,090
it with the free arguments request response and next and in there we can now run the logic we want to

64
00:05:40,090 --> 00:05:42,160
run upon such a request.

65
00:05:42,160 --> 00:05:53,040
And here I will just say get request in places like this sort of we can see a log in the console and

66
00:05:53,040 --> 00:05:54,900
that's sent back a response.

67
00:05:54,960 --> 00:06:00,900
And here the special thing is I'll not send back a response with send but instead here I want to send

68
00:06:00,900 --> 00:06:04,110
back a response that contains Jason data.

69
00:06:04,110 --> 00:06:10,590
You might remember that earlier in the course in the theory module I explained dad with a rest api we

70
00:06:10,590 --> 00:06:14,010
would exchange data in the Jason format.

71
00:06:14,010 --> 00:06:19,860
That means Dad we don't send back H to him Al or anything like that but instead does machine a human

72
00:06:19,860 --> 00:06:22,170
readable data format.

73
00:06:22,240 --> 00:06:24,380
EXPRESS J ust makes that easy.

74
00:06:24,390 --> 00:06:28,410
We have a Jason method there on the response object.

75
00:06:28,650 --> 00:06:32,540
The Jason method takes any data which can be converted to valid.

76
00:06:32,550 --> 00:06:40,260
Jason So for example an object an array just a number just a boolean or just a string.

77
00:06:40,260 --> 00:06:45,110
But here I'll go with an object and there simply add a message.

78
00:06:45,390 --> 00:06:46,180
It works.

79
00:06:46,200 --> 00:06:51,560
It's totally up to you which object you pass here with any properties of your choice here.

80
00:06:51,560 --> 00:06:55,290
I just have one property the message Prop. 8 works.

81
00:06:55,380 --> 00:07:01,190
So that's basically the data which will be encoded to this Jason format which will be attached to the

82
00:07:01,200 --> 00:07:05,570
response which is then automatically sent back when we call Jason here.

83
00:07:05,580 --> 00:07:09,380
So this sends back a response with some Jason data.

84
00:07:09,450 --> 00:07:12,000
Now with that we registered this route.

85
00:07:12,000 --> 00:07:14,000
Now that's in the roots file here.

86
00:07:14,010 --> 00:07:21,090
However we need to kind of link this to the app J.S. file because ultimately when we run NPM start later

87
00:07:21,390 --> 00:07:23,570
we will execute this app j ust file.

88
00:07:23,580 --> 00:07:29,730
So we need to establish a connection between this file and d express app we're setting up here and the

89
00:07:29,730 --> 00:07:37,770
routes we registered here and to do that we need to export our configured router from the places routes

90
00:07:37,860 --> 00:07:48,090
JavaScript file and the export certain tax in no chars looks like this module dot exports equals router.

91
00:07:48,090 --> 00:07:55,020
This simply means the thing which we export in this file is this router constant so days configured

92
00:07:55,020 --> 00:08:02,460
router object and yet this is what we export in this places routes J ust file and now since we export

93
00:08:02,460 --> 00:08:10,030
it here and only because we export it here we can go back to app US and import from our places Robert's

94
00:08:10,050 --> 00:08:10,860
file.

95
00:08:10,860 --> 00:08:18,720
We can not just import from default no chess modules or from third party libraries we could also import

96
00:08:18,720 --> 00:08:25,860
from our own files and it is a good practice to have the third party libraries and Node core modules

97
00:08:25,860 --> 00:08:30,060
at the top and then leave an empty line here and then add your own imports.

98
00:08:30,060 --> 00:08:33,990
It's not technically required but considered a good coding practice.

99
00:08:34,050 --> 00:08:41,370
So here I will get my places roots or however you want to call it by calling required and now not just

100
00:08:41,370 --> 00:08:45,220
a name of your file but the relative path to the file.

101
00:08:45,270 --> 00:08:51,840
So here from app J.S. we have to go into the roots folder and then target the places Robert's file so

102
00:08:51,840 --> 00:08:58,440
it's not slash which means start at the current folder then roots which means go into the roots folder

103
00:08:58,770 --> 00:09:04,820
and then places roots and you can omit the file extension it will automatically add that for you.

104
00:09:04,850 --> 00:09:11,030
Now we have to configure a router which we export here in places roots in this places rule it's constant

105
00:09:11,180 --> 00:09:18,170
in the app chars file and this now conveniently is simply a middleware we can use the router here as

106
00:09:18,170 --> 00:09:18,890
a middleware.

107
00:09:18,950 --> 00:09:26,750
That's a nice feature expressed today as offers so we can call app use and register places routes like

108
00:09:26,750 --> 00:09:33,380
this and now it just means that our routes which we configured here are added as middleware in app J.S.

109
00:09:33,730 --> 00:09:41,600
and this allows us to move the logic out of app s and keep that file lean and setup our plays related

110
00:09:41,600 --> 00:09:48,260
routes here in the places Robert's file with that we have an app that should work.

111
00:09:48,380 --> 00:09:52,720
So if we now run NPM start our node server starts up.

112
00:09:52,940 --> 00:09:57,750
And if we now visit local host five thousand we see our Jason data here.

113
00:09:57,770 --> 00:09:59,820
Now it gets printed as text here.

114
00:09:59,990 --> 00:10:06,930
But if we open the browser developer tools and we go to network and reload this page here's our request.

115
00:10:06,930 --> 00:10:10,400
And what you see is that you get a status code of 200 automatically.

116
00:10:10,400 --> 00:10:16,190
That's the default status code express gives you on responses it sends back and you see in the response

117
00:10:16,190 --> 00:10:22,880
header that the content type is set to application Jason express J ust does this because we use the

118
00:10:22,880 --> 00:10:24,230
Jason method here.

119
00:10:24,380 --> 00:10:27,700
It converts the data to Jason and sets the right headers.

120
00:10:28,220 --> 00:10:33,290
And if we go through the response tap here you see that is the response that you've got back.

121
00:10:33,290 --> 00:10:39,650
And this here is actually how Jason looks like properties are enclosed in double quotes and string values

122
00:10:39,710 --> 00:10:42,590
are enclosed between double quotes as well.

123
00:10:42,590 --> 00:10:50,150
So this works we're able to send back this simple data the simple response but of course we're not done.

124
00:10:50,150 --> 00:10:53,840
This isn't even a road which we need instead we need other routes.

125
00:10:53,900 --> 00:11:00,620
If we have a look at our planning slide here and in addition we also need users routes and we want to

126
00:11:00,620 --> 00:11:04,220
make sure that we can reach both routes in both these files.

127
00:11:04,220 --> 00:11:09,440
Of course we haven't set up and use those routes yet but we'll do so soon from our app jazz file.

128
00:11:09,440 --> 00:11:12,670
We're also not passing any incoming requests bodies.

129
00:11:12,680 --> 00:11:15,260
So that's all something we'll have to do.

130
00:11:15,260 --> 00:11:17,240
So plenty of work left.

131
00:11:17,240 --> 00:11:19,100
Let's continue with that in the next lectures.
