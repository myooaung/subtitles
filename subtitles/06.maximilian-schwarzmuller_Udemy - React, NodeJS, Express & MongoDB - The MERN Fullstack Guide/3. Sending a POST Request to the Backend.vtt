WEBVTT
1
00:00:02.140 --> 00:00:04.690
Now what does get started mean now.

2
00:00:04.760 --> 00:00:10.200
Obviously we got all our roots here on the back and to which we can send requests.

3
00:00:10.300 --> 00:00:18.040
And just as we started in the Mongo D.B. sections with implementing the create methods first so that

4
00:00:18.040 --> 00:00:20.870
we can work with places for example.

5
00:00:20.980 --> 00:00:27.700
I now also want to start implementing the connection for creating something specifically for creating

6
00:00:28.000 --> 00:00:29.230
a user.

7
00:00:29.440 --> 00:00:31.270
Why do I want to do that.

8
00:00:31.270 --> 00:00:38.980
Well because on the back end in the end we need a user a user documents so to say to then also connected

9
00:00:39.130 --> 00:00:46.240
to our place because we have this connection set up there and we have all the code for establishing

10
00:00:46.240 --> 00:00:53.740
this connection for example into place as controller in the create place function there when we do create

11
00:00:53.740 --> 00:00:54.670
a new place.

12
00:00:54.820 --> 00:01:00.300
We connect the place to a creator which we get here from our incoming request.

13
00:01:00.340 --> 00:01:04.930
Later we'll changed as a little bit and which we then of course also look up in the database.

14
00:01:05.110 --> 00:01:10.850
So did we really only continue if we do find a user for that provided I.D..

15
00:01:11.320 --> 00:01:17.500
So because we have that user place connection it makes sense to start with creating users because we

16
00:01:17.500 --> 00:01:23.680
need users to create places kind of therefore on the front and of course it's the off page I want to

17
00:01:23.680 --> 00:01:32.310
start on because dear we have our off submit handler which in the end fires whenever we will authenticate.

18
00:01:32.410 --> 00:01:38.590
So whenever we log in or sign up now we'll have to tweak that logic here a little bit because I actually

19
00:01:38.590 --> 00:01:43.120
want to do different things depending on whether we are logging in or signing up.

20
00:01:43.120 --> 00:01:45.130
If we are logging in after all.

21
00:01:45.160 --> 00:01:46.840
I don't want to create a new user.

22
00:01:47.200 --> 00:01:53.540
If we are signing up though I do want to create a new user in both scenarios however I want to send

23
00:01:53.540 --> 00:01:54.870
a HP request.

24
00:01:55.000 --> 00:02:00.980
In one case I just want to send HP request to the logging route and in the average case I want to send

25
00:02:00.980 --> 00:02:03.540
the HDP request to the sign up road.

26
00:02:03.550 --> 00:02:12.210
That's the idea here so therefore let's go back to the front and here to the off page and let's make

27
00:02:12.210 --> 00:02:19.650
sure that here we don't just log in as we're currently doing it but that instead we do send HBP request

28
00:02:20.550 --> 00:02:21.120
for this.

29
00:02:21.120 --> 00:02:28.080
I will first of all convert this function here in a async function with the async keyword so that I

30
00:02:28.080 --> 00:02:29.940
can use a single wait.

31
00:02:29.940 --> 00:02:31.470
This is not a must do.

32
00:02:31.470 --> 00:02:34.980
The alternative is to use promises with then and catch.

33
00:02:35.100 --> 00:02:38.250
But I prefer the async await syntax here.

34
00:02:38.250 --> 00:02:39.990
Now why do I need it at all.

35
00:02:39.990 --> 00:02:45.750
Because we will work with a promise because now instead of console logging any inputs I want to send

36
00:02:45.750 --> 00:02:52.800
the HDP request and we can do that with the fetch API which is provided by browsers in modern JavaScript

37
00:02:53.370 --> 00:02:54.410
as an alternative.

38
00:02:54.420 --> 00:02:59.820
You could also use axes or other third party libraries that make sending HP requests.

39
00:02:59.850 --> 00:03:00.530
Simple.

40
00:03:00.630 --> 00:03:04.830
But here I will use this built in API and now it is fetch.

41
00:03:04.830 --> 00:03:11.080
Function here needs a string a string that points at our back end.

42
00:03:11.130 --> 00:03:19.980
So here I in the end want to point add slash sine upward to be precise at slash API users slash sign

43
00:03:19.980 --> 00:03:20.370
up.

44
00:03:20.490 --> 00:03:24.000
And of course all of that preprinted with our back and host.

45
00:03:24.030 --> 00:03:27.890
Now if I start my back and server here again with NPM start.

46
00:03:28.110 --> 00:03:32.460
And of course you find a snapshot of this latest back and state.

47
00:03:32.460 --> 00:03:38.010
Attached to this lecture you will just need to switch your database credentials if you using my snapshot

48
00:03:38.280 --> 00:03:40.150
and use yours instead.

49
00:03:40.230 --> 00:03:45.000
Then if you run npm install you should be able to run NPM start thereafter and bring up that back and

50
00:03:45.000 --> 00:03:50.420
server and keep in mind that this runs on port five thousand on local host.

51
00:03:50.430 --> 00:03:57.810
So here we want to send a request to ATP local host five thousand slash API slash users slash.

52
00:03:57.810 --> 00:04:01.770
Sign up or slash log in depending on what we want to do.

53
00:04:01.770 --> 00:04:06.780
But we first of all need to create at least one user before we contests signing up I guess.

54
00:04:06.780 --> 00:04:08.450
So let's start with this.

55
00:04:08.880 --> 00:04:15.310
Now this sign up request here if we have a look at our back and routes should be a post request.

56
00:04:15.480 --> 00:04:21.510
So to configure this to be a post request we need to pass in a second argument to fetch and there we

57
00:04:21.510 --> 00:04:27.570
can configure it is request for example we can set the method property to post it now a post request

58
00:04:27.570 --> 00:04:29.260
will be sent.

59
00:04:29.340 --> 00:04:31.690
Now this alone is not enough though.

60
00:04:31.860 --> 00:04:39.480
We also need to set certain headers so we'll add the headers key here and set this to an object so we

61
00:04:39.480 --> 00:04:45.210
can add key value pairs here which will represent the headers that are attached to the outgoing request

62
00:04:45.670 --> 00:04:46.320
in there.

63
00:04:46.320 --> 00:04:53.160
I want to set my content type 2 application Jason.

64
00:04:53.380 --> 00:05:00.150
Without that our back and will not know which kind of data it receives and our body passing an app trace

65
00:05:00.420 --> 00:05:06.720
where we parse the incoming Jason data here will not kick in correctly because it doesn't know it's

66
00:05:06.720 --> 00:05:13.410
getting Jason data so let's set these headers and of course we need to attach some data.

67
00:05:13.490 --> 00:05:18.030
So I want to set a body on this request and this and that's so important.

68
00:05:18.080 --> 00:05:20.860
Always has to be in Jason format.

69
00:05:20.870 --> 00:05:26.240
Now conveniently in the browser we have to Jason object where we can call the string and find method.

70
00:05:26.270 --> 00:05:33.470
And this takes regular javascript data like an array or like an object and it will convert it to Jason.

71
00:05:33.470 --> 00:05:41.630
And here in the end I of course want to submit my my form data I want to add or send the object which

72
00:05:41.630 --> 00:05:49.610
needs to have a name key I email key and a password key why do I need to send these keys.

73
00:05:49.700 --> 00:05:52.300
Well because that is what I'm expecting on the back end.

74
00:05:52.460 --> 00:05:58.670
If we have a look at the user's roots we see we are validating for a name and email and a password and

75
00:05:58.670 --> 00:06:04.520
in the user's controller when we create a new user here in the sign up function we do extract name email

76
00:06:04.520 --> 00:06:05.450
and password.

77
00:06:05.450 --> 00:06:13.700
So we need to provide these three pieces of information here hence here I will add these three pieces

78
00:06:14.090 --> 00:06:23.410
and as a name I will point at former state DOT inputs dot name dot value.

79
00:06:23.420 --> 00:06:29.090
Remember we're having that forum state here which is coming from the use forum hook which manages our

80
00:06:29.240 --> 00:06:33.300
different data pieces when we switch to sign up mode.

81
00:06:33.350 --> 00:06:36.050
We add a name field if we are in log in mode.

82
00:06:36.050 --> 00:06:36.470
We all.

83
00:06:36.470 --> 00:06:42.170
We only have email and password field so now this is managed for us by the Forum hook and they offer

84
00:06:42.260 --> 00:06:46.870
we can extract it here and of course extracting just the name is not enough.

85
00:06:46.910 --> 00:06:54.440
We all the one extract the email value and we want to extract the password value and these values should

86
00:06:54.440 --> 00:06:55.040
be valid.

87
00:06:55.040 --> 00:07:01.100
When we reached the off submit handler because we only make this button here to submit button clickable

88
00:07:01.520 --> 00:07:07.440
if we are if we have a valid form here thanks to this check.

89
00:07:07.650 --> 00:07:13.790
Now one thing is still not correct though we don't always want to sign up when we reach this function.

90
00:07:13.800 --> 00:07:17.490
This function also gets triggered if we are in log in mode.

91
00:07:17.910 --> 00:07:24.660
So actually here we should check if is log in mode is true and if it is true we want to do something

92
00:07:24.660 --> 00:07:25.460
else.

93
00:07:25.530 --> 00:07:26.840
If it's not true.

94
00:07:26.850 --> 00:07:32.400
So if we're in sign up mode then I want to send this request with this adjustment.

95
00:07:32.400 --> 00:07:38.160
We're now making sure we only send a request to the sign up backend or to sign up you are L if we are

96
00:07:38.160 --> 00:07:42.970
in sign up mode now fetch of course returns a promise.

97
00:07:42.990 --> 00:07:50.810
So since I'm using async here here we can add a wait to wait for the response we get back now.

98
00:07:50.840 --> 00:07:53.710
This actually could also fail.

99
00:07:53.930 --> 00:08:01.280
So let's actually wrap this with try catch so I'll grab all this code here and added here and to try

100
00:08:01.340 --> 00:08:07.340
and catch any errors we might be getting and we'll have to do some error handling here later for the

101
00:08:07.340 --> 00:08:07.840
moment.

102
00:08:07.970 --> 00:08:10.190
I will just console lock the error.

103
00:08:10.220 --> 00:08:18.050
Now one important word this will not fail if our back and sends back an error status code so a 400 or

104
00:08:18.050 --> 00:08:22.820
500 status code I'll come back to how we handled those a little bit later.

105
00:08:22.820 --> 00:08:26.750
For now let's just wrap it like this and care about error handling later.

106
00:08:26.750 --> 00:08:31.770
So we got the response and when using the fetch API so does fetch function.

107
00:08:31.910 --> 00:08:40.040
The response itself has generally all the response data but it does not yet have the parsed response

108
00:08:40.040 --> 00:08:40.550
body.

109
00:08:41.030 --> 00:08:45.660
Instead we do parse the response body by calling response start Jason.

110
00:08:45.740 --> 00:08:53.090
If it's in Jason format which it is in our API is case and which is in case of most API is this to returns

111
00:08:53.090 --> 00:08:54.050
a new promise.

112
00:08:54.050 --> 00:08:59.550
So we showed a way to this as well and this will then be our response data.

113
00:08:59.570 --> 00:09:00.700
If you want to call it like this.

114
00:09:00.710 --> 00:09:03.720
So this will be the actual data and a response body.

115
00:09:03.770 --> 00:09:06.620
And if we have a look at our back and we see what's inside.

116
00:09:06.620 --> 00:09:08.930
The response is our created user.

117
00:09:08.930 --> 00:09:12.640
In the end so we got this back.

118
00:09:12.640 --> 00:09:17.260
We got this response data which should be our created user data.

119
00:09:17.260 --> 00:09:24.070
Now for the moment why don't we just console lock this here before we then have a look at what else

120
00:09:24.100 --> 00:09:31.040
we could do one important word about all flogging this should only kick in once all these steps are

121
00:09:31.040 --> 00:09:37.100
done because here we are always a waiting which means that in the end this year isn't a new.

122
00:09:37.160 --> 00:09:38.060
Then block.

123
00:09:38.060 --> 00:09:44.490
So to say after all these steps completed even though it's sort of try catch this will only run does

124
00:09:44.500 --> 00:09:48.710
of log in code will only run once we're done getting the response.

125
00:09:48.710 --> 00:09:52.120
Passing the response and so on so the orders should be correct.

126
00:09:52.940 --> 00:09:59.090
Was that if we NPM start our front end here as well to bring up that fronted server we should be able

127
00:09:59.150 --> 00:10:01.160
to send a sign up request.

128
00:10:01.280 --> 00:10:04.760
So let's see where dad works.

129
00:10:04.780 --> 00:10:12.690
Here is our front end application and for the moment let's click on authenticate switch to sign up and

130
00:10:12.690 --> 00:10:13.440
testers.

131
00:10:13.500 --> 00:10:20.240
Here I entered max test that test com and then some password and click sign up and what we see now is

132
00:10:20.240 --> 00:10:22.090
actually that we get an error.

133
00:10:22.220 --> 00:10:24.770
And this is actually an expected error.

134
00:10:24.770 --> 00:10:26.390
Now what's the problem here.

135
00:10:26.390 --> 00:10:28.160
Let's have a look at that in the next lecture.
