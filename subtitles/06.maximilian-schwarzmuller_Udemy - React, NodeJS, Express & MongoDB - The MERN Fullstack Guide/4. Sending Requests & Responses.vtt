WEBVTT
1
00:00:02.210 --> 00:00:07.370
So no J.S. is JavaScript or allows us to run javascript anywhere.

2
00:00:07.370 --> 00:00:12.980
Now of course we can use it to write our own utility scripts like for example a script which stores

3
00:00:12.980 --> 00:00:14.240
a name in a text form.

4
00:00:14.270 --> 00:00:20.000
Well arguably that's not too useful but you could imagine writing a script that does way more useful

5
00:00:20.000 --> 00:00:21.130
things.

6
00:00:21.200 --> 00:00:27.620
Of course you also have methods to read files search directories and you could write a script which

7
00:00:27.650 --> 00:00:34.550
automatically cleans up your computer which creates an audit file with all the files you added since

8
00:00:34.550 --> 00:00:38.140
the last time you ran the script or whatever you want to do.

9
00:00:38.180 --> 00:00:42.140
Your imagination is the limit but it's not what we're going to do here.

10
00:00:42.140 --> 00:00:48.080
We want to instead you is no chance to write a web application specifically a web server which we can

11
00:00:48.080 --> 00:00:53.620
use to send requests to and get back a response to create such a server.

12
00:00:53.630 --> 00:01:00.690
We'll import a number core module which is part of node Chase and that's the H to the p module.

13
00:01:00.700 --> 00:01:03.820
The module allows us to create a server.

14
00:01:03.860 --> 00:01:09.260
It has a create server method which you can call which is of course very convenient if you want to create

15
00:01:09.260 --> 00:01:10.340
a web server.

16
00:01:10.340 --> 00:01:15.320
The important thing here by the way is if you were coming from something like PSP if you're used to

17
00:01:15.320 --> 00:01:20.050
working with that debt with no choice you don't just write to server side logic.

18
00:01:20.090 --> 00:01:24.350
So what you would have written in PSP as well but dead with no chance.

19
00:01:24.350 --> 00:01:27.500
You also create a server in PSP that's different.

20
00:01:27.500 --> 00:01:31.220
There you use something like Apache to run your HP code.

21
00:01:31.370 --> 00:01:37.130
You don't do that and no J S instead there you use the language or the runtime itself to create the

22
00:01:37.130 --> 00:01:41.270
server so creates a risk the method here and it takes one argument.

23
00:01:41.300 --> 00:01:47.570
The request listener so basically a function which is triggered whenever we have an incoming request.

24
00:01:47.570 --> 00:01:52.040
This gets to arguments a request and a response object.

25
00:01:52.040 --> 00:01:59.400
The values for these arguments are passed in by no J.S. when such a request reaches the server creates

26
00:01:59.410 --> 00:02:06.500
server then returns a server object and on that server object you can call listen a method which will

27
00:02:06.570 --> 00:02:12.380
setup an event listener for such incoming requests to listen you can pass a port number in this case.

28
00:02:12.410 --> 00:02:18.140
I will go with three thousand or actually let's go with five thousand because that's number we'll use

29
00:02:18.140 --> 00:02:19.820
later as well.

30
00:02:19.880 --> 00:02:26.180
Now this opens up local server on your machine not exposed to the Internet of course unless you're a

31
00:02:26.180 --> 00:02:30.970
machine you're developing on is open to the Internet which it should not be by the way.

32
00:02:31.220 --> 00:02:38.570
And then you can send requests to the server under local host colon and 5000 which is the port number

33
00:02:38.570 --> 00:02:39.310
here.

34
00:02:39.450 --> 00:02:44.980
Now for every request you send you will reach this function and in there we don't do anything.

35
00:02:45.050 --> 00:02:50.480
Now before we populate this with some life it's important to understand that the and method here will

36
00:02:50.540 --> 00:02:56.600
spin up a server which of course is an ongoing process which means it won't shut down you won't be able

37
00:02:56.600 --> 00:03:02.600
to enter new commands unless you manually shut down that running process because it's an ongoing listener

38
00:03:02.810 --> 00:03:05.780
which continuously waits for incoming requests.

39
00:03:05.810 --> 00:03:11.780
It's all the able to handle multiple requests simultaneously which of course is a must have for a real

40
00:03:11.780 --> 00:03:12.230
server.

41
00:03:13.310 --> 00:03:22.040
So with that let's maybe print console log incoming request here in this function which should be triggered

42
00:03:22.040 --> 00:03:29.600
for every request and let's console log request DOD method the request object is a huge object with

43
00:03:29.600 --> 00:03:35.870
a lot of properties and methods and request method is a property which gives us the H to the p method

44
00:03:35.960 --> 00:03:38.600
which was used for the incoming request.

45
00:03:38.600 --> 00:03:45.900
We can also for example print do you are L which was used now and what we should also do for every incoming

46
00:03:45.900 --> 00:03:48.780
request is send back a response.

47
00:03:48.780 --> 00:03:55.260
Otherwise the browser which is sending the request will eventually throw an error when the request times

48
00:03:55.260 --> 00:03:58.690
out and it will time out if you're not sending back a response.

49
00:03:58.950 --> 00:04:05.010
Now for sending back a response you can use that address object and there you have the end method which

50
00:04:05.010 --> 00:04:09.120
basically means I'm done configuring the response please send it back.

51
00:04:09.120 --> 00:04:12.120
This method all to take some data you can send back.

52
00:04:12.150 --> 00:04:21.760
So here for example we could set back some simple text success if we do so and we save this.

53
00:04:21.830 --> 00:04:23.810
We can now execute this file again.

54
00:04:23.870 --> 00:04:25.070
And now you'll see what I meant.

55
00:04:25.130 --> 00:04:26.290
It doesn't quit.

56
00:04:26.300 --> 00:04:28.060
I'm not able to enter a new command.

57
00:04:28.100 --> 00:04:33.410
You can always quit manually by pressing control in C but then the server is not running anymore so

58
00:04:33.410 --> 00:04:37.730
of course as long as you're developing you don't want to do that unless you change some code and you

59
00:04:37.730 --> 00:04:39.980
want to restarted with the new code.

60
00:04:39.980 --> 00:04:42.150
So here a will start it and keep it running.

61
00:04:42.170 --> 00:04:48.170
And now let's go to the browser and there simply enter local host 5000 and visit this page and what

62
00:04:48.170 --> 00:04:51.470
you should see there is this success.

63
00:04:51.470 --> 00:04:52.440
Text.

64
00:04:52.440 --> 00:04:58.100
And that's of course coming back from our response function here or from our request handler and the

65
00:04:58.100 --> 00:04:59.900
response we're sending back.

66
00:05:01.100 --> 00:05:03.680
Now it's sending back just simply in Texas boring.

67
00:05:03.680 --> 00:05:06.360
Why don't we send back some H to meld code.

68
00:05:06.410 --> 00:05:12.470
Of course this is not a totally valid HDMI document because I'm missing H Tim Allen's on but the browser

69
00:05:12.470 --> 00:05:14.320
will still be able to render it.

70
00:05:14.390 --> 00:05:17.170
So here I'm sitting back at each one tech.

71
00:05:17.220 --> 00:05:23.120
Now if I reload we see no change and that by the way is a common source of error.

72
00:05:23.450 --> 00:05:29.540
If you change your code here you need to restart your server because when you run your file if you run

73
00:05:29.540 --> 00:05:35.510
node app J.S. It executes that file and if you thereafter change to code in there it doesn't automatically

74
00:05:35.510 --> 00:05:36.770
read executed.

75
00:05:36.770 --> 00:05:42.790
So we manually have to stop the server and rerun it with node aptly as if we changed the code.

76
00:05:42.830 --> 00:05:47.350
Of course that's a bit cumbersome and later we'll see a more elegant method of handling this.

77
00:05:47.360 --> 00:05:50.180
For now let's just restarted.

78
00:05:50.180 --> 00:05:56.870
If I now reload here we see this looks like a H1 tag and indeed if we expect it in the browser dev tools

79
00:05:56.870 --> 00:06:00.150
we see this is a H1 TAC here.

80
00:06:00.260 --> 00:06:06.400
So this was sent back and interpreted as H2 mail by the browser.

81
00:06:06.410 --> 00:06:13.220
Now if we don't want the browser to interpret this as H2 HTML we can call the set header method on the

82
00:06:13.220 --> 00:06:20.520
response before we end and therefore send it and set the content type of all response body.

83
00:06:20.570 --> 00:06:28.420
So of this data we're sending to let's say text plain.

84
00:06:28.480 --> 00:06:34.840
This tells the browser dad what we're sending back should not be interpreted as something special but

85
00:06:34.960 --> 00:06:36.430
as plain text.

86
00:06:36.430 --> 00:06:41.080
So if we save dad and we restart and reload.

87
00:06:41.280 --> 00:06:47.970
We see the HMO attacks here because this is output as some text my browser ramps as into some pre tax

88
00:06:47.980 --> 00:06:48.520
here.

89
00:06:48.570 --> 00:06:50.920
That's just something the browser does by default.

90
00:06:51.060 --> 00:06:53.070
The magic really is the thing in between.

91
00:06:53.070 --> 00:06:55.260
It's just interpret this text.

92
00:06:55.260 --> 00:06:56.480
You can also see this by the way.

93
00:06:56.490 --> 00:07:01.360
If you go to the network tab in the browser and you inspect the request which was sent there.

94
00:07:01.650 --> 00:07:03.980
Here you CDU or L and the method.

95
00:07:04.440 --> 00:07:10.200
And if you scroll down you see on the response header to content type plus set to text plain which causes

96
00:07:10.230 --> 00:07:12.540
this way of rendering it.

97
00:07:12.840 --> 00:07:19.440
Of course we can also set this to text age HTML to basically get the same behavior as before where if

98
00:07:19.440 --> 00:07:25.950
we now reload this it is indeed rendered as h HTML because that is also what we're telling the browser

99
00:07:26.160 --> 00:07:28.130
from our server.

100
00:07:28.200 --> 00:07:30.280
Notice how we can sent back responses.

101
00:07:30.330 --> 00:07:35.670
And if you're already wondering if this is the best possible way because writing H.M. code like this

102
00:07:35.670 --> 00:07:41.880
certainly is not too nice if we're writing longer code then I can definitely comfort you.

103
00:07:41.910 --> 00:07:46.620
This is not the final way of how we will write our code after all.

104
00:07:46.620 --> 00:07:48.140
This is just no chance.

105
00:07:48.150 --> 00:07:51.810
We haven't seen express yet before we see it though.

106
00:07:51.810 --> 00:07:58.140
Let me give you one other reason why we might want to use it and for that let's actually write some

107
00:07:58.140 --> 00:08:06.210
code which sends a post request to the server where we then want to extract data and then sent back

108
00:08:06.210 --> 00:08:14.760
that data to the client let's say for that to be able to send a post request all trade a form element

109
00:08:14.760 --> 00:08:21.200
here and then there have a input type text with the name of user name.

110
00:08:21.420 --> 00:08:27.980
Just like that and a button create user.

111
00:08:27.980 --> 00:08:32.660
Make sure you got your opening and closing tax write and that button will be of type.

112
00:08:32.660 --> 00:08:33.290
Submit.

113
00:08:33.380 --> 00:08:36.380
Now this is definitely not so readable.

114
00:08:36.380 --> 00:08:37.690
I am aware of that.

115
00:08:37.760 --> 00:08:41.840
It is all the HMO code we need to write here though so I'm doing it all in one line.

116
00:08:41.900 --> 00:08:46.920
As I mentioned this is not the final way of how we will do this later.

117
00:08:46.950 --> 00:08:53.540
Now if I save this and I restart my server and I visit this page again I see this input field and this

118
00:08:53.540 --> 00:08:57.470
button styling is awful but it's also not what we're talking about here.

119
00:08:57.500 --> 00:09:05.750
So does this fine Nova enter something here in a click Create user the browser by default sends a request

120
00:09:05.780 --> 00:09:11.210
to the back and it sends a get request and appends to enter data as query parameters.

121
00:09:11.940 --> 00:09:13.660
Now I don't want that default.

122
00:09:13.680 --> 00:09:19.680
So I'll set the method to post which means the browser will now send up post request it will send it

123
00:09:19.680 --> 00:09:21.850
to just our domain.

124
00:09:21.960 --> 00:09:27.960
Now here in our request handler we can now check if request method is equal to post which means the

125
00:09:27.960 --> 00:09:34.350
forum was submitted and then we want to extract that user name here and do something with it.

126
00:09:34.360 --> 00:09:39.340
Maybe sent back a response where we render a dead user name and h1 tag.

127
00:09:39.360 --> 00:09:49.350
Now how do we get that data out of our request though well first of all let's create a false case.

128
00:09:49.380 --> 00:09:54.720
If we're not getting a POST request then I want to return this content here.

129
00:09:54.750 --> 00:10:00.660
So now in the if branch I want to get the data which was part of the request because for a post request

130
00:10:01.140 --> 00:10:07.100
the browser will automatically add dead user name here and the the user entered to the request bodies.

131
00:10:07.110 --> 00:10:08.400
I want to extract this here.

132
00:10:08.940 --> 00:10:14.040
Unfortunately there is no request body property or anything like that which would give us convenient

133
00:10:14.100 --> 00:10:15.500
access to it.

134
00:10:15.540 --> 00:10:21.270
Instead we have to register an event listener for the data event which means we're getting new data

135
00:10:21.330 --> 00:10:25.770
because data is actually streamed into the server in chunks.

136
00:10:25.770 --> 00:10:29.460
So we're actually getting it in chunks instead of one big chunk.

137
00:10:29.460 --> 00:10:34.530
Now for it's such a small piece of data as we're having it here it probably is in one chunk but that's

138
00:10:34.530 --> 00:10:37.530
not guaranteed so here.

139
00:10:37.570 --> 00:10:42.940
I didn't get my junk data in this callback function which we have to provide to this event listener

140
00:10:43.630 --> 00:10:46.690
and I will construct my body here.

141
00:10:46.960 --> 00:10:51.490
Simple string to which I'll now add this chunk.

142
00:10:51.610 --> 00:10:56.160
So I'm building up a string this chunky will actually be something which we can use as a string.

143
00:10:56.230 --> 00:11:06.500
Now at some point will also be done passing data so we'll add another event listener actually in front

144
00:11:06.500 --> 00:11:09.120
of the data event listener so that this is setup first.

145
00:11:09.200 --> 00:11:12.710
It's not triggered immediately it's just registered immediately.

146
00:11:12.710 --> 00:11:17.890
And there we'll have a callback function which is executed once the entire request body has been passed

147
00:11:17.900 --> 00:11:20.040
once the entire request has arrived.

148
00:11:20.060 --> 00:11:27.380
So once we have in the end built up our body now here I then have my body.

149
00:11:27.410 --> 00:11:34.310
So for now let's just cancel locked body and look into it and also send back a response whereas for

150
00:11:34.310 --> 00:11:39.530
now have just to age one tack which is empty or which is not empty but which doesn't have our body but

151
00:11:39.530 --> 00:11:50.810
I say got the post request and now with that let's restart the server reload this page local five thousand

152
00:11:51.200 --> 00:11:53.060
and send a number request.

153
00:11:53.060 --> 00:11:55.730
Now I go to this page here which is great.

154
00:11:55.730 --> 00:11:59.670
And on the server side we see does output user name equals manual.

155
00:11:59.810 --> 00:12:01.200
So that's what's in my body.

156
00:12:01.220 --> 00:12:02.930
After everything has been passed.

157
00:12:03.890 --> 00:12:10.940
So here we can get the user name by taking our body splitting it on the equal sign split is a default

158
00:12:10.940 --> 00:12:13.700
javascript method a way lable on strings.

159
00:12:13.820 --> 00:12:16.490
This will give us an array with two elements.

160
00:12:16.490 --> 00:12:19.760
First element is the part in front of the equals sign.

161
00:12:19.760 --> 00:12:20.950
So a user name in this case.

162
00:12:20.960 --> 00:12:23.870
Second element is the part after the equals sign menu.

163
00:12:23.870 --> 00:12:30.380
That's the part I'm interested in so I access the second element with index 1 on the created array stored

164
00:12:30.380 --> 00:12:31.370
in the user name.

165
00:12:31.370 --> 00:12:34.120
And now here we can output the user name for Dad.

166
00:12:34.130 --> 00:12:38.850
We could use template laterals or just concatenate a string like this.

167
00:12:39.050 --> 00:12:44.330
And output the user name between the H1 tax here with that.

168
00:12:44.490 --> 00:12:51.720
If we restart the server again so quit it and restart and we enter local those five thousand again don't

169
00:12:51.720 --> 00:12:52.190
reload.

170
00:12:52.200 --> 00:12:54.660
Just visit local those five thousand again.

171
00:12:54.660 --> 00:12:55.980
We tried this one more time.

172
00:12:55.980 --> 00:12:57.650
Now we see menu here.

173
00:12:58.020 --> 00:13:05.880
Now this is a lot of work for sending responses and even more than that for handling incoming data.

174
00:13:06.570 --> 00:13:13.280
And that's also the reason why we typically don't want to work with note J.S. only we could do that.

175
00:13:13.380 --> 00:13:19.020
But just with vanilla javascript only in the browser that means we have to reinvent the wheel a lot.

176
00:13:19.020 --> 00:13:25.290
We have to find a lot of creative solutions for problems like this when we need to data and therefore

177
00:13:25.290 --> 00:13:27.020
it's not what I want to do here.

178
00:13:27.030 --> 00:13:31.770
Instead let's have a look at the Express Chase and see how that can help us.
