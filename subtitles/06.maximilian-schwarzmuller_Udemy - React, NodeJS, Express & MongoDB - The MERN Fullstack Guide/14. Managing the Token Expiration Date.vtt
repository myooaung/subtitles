WEBVTT
1
00:00:02.300 --> 00:00:06.580
So let's ensure we respect token expiration.

2
00:00:06.590 --> 00:00:13.340
Now for that in log in I know that token will expire in one hour because we are building the back end

3
00:00:13.430 --> 00:00:18.730
and on the back end I configured it to expire after one hour.

4
00:00:19.040 --> 00:00:26.210
So when we log a user in we also want a set kind of a timer after which we logged user out and we want

5
00:00:26.210 --> 00:00:32.060
to derive the expected expiration date and store data and local storage as well so that when we in the

6
00:00:32.060 --> 00:00:37.970
future try to order log in the user we can refer to dead stored expiration date and find out if the

7
00:00:37.970 --> 00:00:40.010
tokens still is valid.

8
00:00:40.070 --> 00:00:43.400
So let's start by creating an expiration date.

9
00:00:44.560 --> 00:00:51.760
My token expiration date is basically a new date which I generate a new Date object date of course is

10
00:00:51.760 --> 00:00:58.490
a built in API in the browser and JavaScript and there I want to get my current date which I get by

11
00:00:58.490 --> 00:01:05.490
calling new date again on which I called Get time which gives me basically the number of milliseconds

12
00:01:05.910 --> 00:01:12.030
that have passed since the beginning of time if you want to call it like this for the current date and

13
00:01:12.030 --> 00:01:20.010
to that number I add 1000 milliseconds so one second time sixty to have a minute time 60 to have an

14
00:01:20.040 --> 00:01:20.850
hour.

15
00:01:20.850 --> 00:01:26.250
So this now generates a new Date object that's based on a current date plus one hour.

16
00:01:26.280 --> 00:01:30.660
So it overall generates a Date object which is now plus one hour.

17
00:01:30.690 --> 00:01:32.930
This is my token expiration date.

18
00:01:32.940 --> 00:01:37.250
Now this token expiration date needs to be stored as part of the user data.

19
00:01:37.260 --> 00:01:43.980
So here I will add expiration key and set as equal to token expiration date and then important here

20
00:01:44.290 --> 00:01:51.480
to Ise those string to ensure that no data gets lost when this date is string you fight.

21
00:01:51.510 --> 00:01:56.550
This is a special kind of string which basically stores all the important date information and which

22
00:01:56.550 --> 00:02:00.000
importantly can be converted back to a date later.

23
00:02:00.000 --> 00:02:06.240
Now we have one problem with this logic here though here with this logic I always generate a new timestamp

24
00:02:06.240 --> 00:02:08.250
which is 1 hour in the future.

25
00:02:08.250 --> 00:02:14.850
Keep in mind that log in all that gets called from inside disuse of fact logic here which runs to automatically

26
00:02:14.850 --> 00:02:19.100
log our user in if we got stored data in local storage.

27
00:02:19.260 --> 00:02:24.350
So in the end what we need to do here is we need to verify whether the tokens still is valid.

28
00:02:24.360 --> 00:02:29.700
So if the expiration time we stored in local storage is in the future but then when we see that it is

29
00:02:29.700 --> 00:02:37.110
valid and we call log in we need to pass that already stored expiration time to log in as well so that

30
00:02:37.170 --> 00:02:46.310
in log in we might be getting an expiration date already which we then want to use as our token expiration

31
00:02:46.310 --> 00:02:53.120
date but which we also might not get if we log in a user through dialogue and forum in which case you

32
00:02:53.120 --> 00:02:54.740
want to generate a new date.

33
00:02:54.740 --> 00:03:01.130
So even we have an existing expiration date because we automatically log the user in due to the stored

34
00:03:01.310 --> 00:03:07.310
token in local storage or we don't have that in which case I want to generate a new one here in log

35
00:03:07.310 --> 00:03:08.050
in.

36
00:03:08.450 --> 00:03:12.610
So the expiration date needs to be extracted here and use a fact as well.

37
00:03:12.650 --> 00:03:18.380
Now we're extracting all Steward's data and part of that stored data is the expiration key which is

38
00:03:18.390 --> 00:03:27.520
the originally stored expiration date so here I can also check if we have a token if stored data expiration

39
00:03:27.790 --> 00:03:28.990
is in the future.

40
00:03:29.110 --> 00:03:34.180
And now to check this I will actually wrap this into new Date.

41
00:03:34.180 --> 00:03:38.740
This will take days stored eyes or string and convert it into a date object.

42
00:03:38.980 --> 00:03:45.070
And I want to check if new date for this saved expiration date is greater than new date like this which

43
00:03:45.070 --> 00:03:49.540
is the current timestamp because of this date is greater than this date.

44
00:03:49.570 --> 00:03:52.520
It means that the expiration date is still in the future.

45
00:03:52.660 --> 00:03:59.200
Then the token is still valid and if that's the case we call log in and here as a third argument I now

46
00:03:59.200 --> 00:04:06.010
forward that extract that expiration timestamp soda originally saved expiration timestamp without any

47
00:04:06.010 --> 00:04:07.940
changes applied to it.

48
00:04:08.020 --> 00:04:13.600
This is forwarded to log in and therefore in this case you would get expiration date and we would keep

49
00:04:13.600 --> 00:04:15.750
that instead of creating a new one.

50
00:04:15.900 --> 00:04:21.820
And when it then stored is in local storage I overwrite the existing data but I keep the old existing

51
00:04:22.390 --> 00:04:30.190
expiration date so overwriting This here is no problem and with that restoring token we're working with

52
00:04:30.190 --> 00:04:39.900
the date and we shouldn't be able to lock the user in if we have an invalid date what we're not doing

53
00:04:40.050 --> 00:04:47.490
is we're not setting a timer to automatically log the user out if the token then expires whilst he's

54
00:04:47.580 --> 00:04:49.260
active on the page.

55
00:04:49.260 --> 00:04:52.160
So this is the missing thing we should do next.
