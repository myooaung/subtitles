WEBVTT
1
00:00:02.110 --> 00:00:06.410
So a lot of talking about environment variables and keys and so on.

2
00:00:06.910 --> 00:00:09.610
Let's now build our app for production.

3
00:00:09.610 --> 00:00:11.500
And what does this actually mean.

4
00:00:11.500 --> 00:00:13.770
Well 40 react app for the front end.

5
00:00:13.780 --> 00:00:18.540
You have to keep in mind that this will run entirely in the browsers of your users.

6
00:00:18.550 --> 00:00:24.070
Here it is running locally on low closed three thousand during development and everything we do here

7
00:00:24.070 --> 00:00:27.900
is of course controlled by a script which in the end is downloaded.

8
00:00:28.030 --> 00:00:34.280
When we reload this page here and we go to the Network tab we see there are a bunch of HP requests and

9
00:00:34.280 --> 00:00:36.370
for example this bundle J has fallen.

10
00:00:36.370 --> 00:00:38.640
This is 0 chunk chars file.

11
00:00:38.690 --> 00:00:44.480
This isn't yet our ReACT code which is getting downloaded from the back backend so all the react code

12
00:00:44.480 --> 00:00:48.600
runs in the browser and everyone there can see it.

13
00:00:48.740 --> 00:00:52.010
You can access it from the sources tab through the Network tab.

14
00:00:52.010 --> 00:00:55.340
If you inspect the responses of the requests and so on.

15
00:00:55.340 --> 00:00:57.860
So this is not hidden code.

16
00:00:57.860 --> 00:01:04.520
So since this does run directly in the browsers of our visitors we have two important things to keep

17
00:01:04.520 --> 00:01:05.330
in mind.

18
00:01:05.360 --> 00:01:11.310
For one we of course as I mentioned multiple times need to ensure that we have no confidential data

19
00:01:11.330 --> 00:01:15.730
and there are API key here is fine but we might consider locking it down.

20
00:01:15.770 --> 00:01:18.650
As I showed it to you in the last lecture.

21
00:01:18.650 --> 00:01:24.800
The second important thing to keep in mind of course is that we want to make this code as small as possible

22
00:01:25.100 --> 00:01:31.400
because having smaller code simply means that our users have to download less and hence the application

23
00:01:31.400 --> 00:01:32.680
starts up quicker.

24
00:01:32.690 --> 00:01:36.050
So we simply provide a better user experience.

25
00:01:36.050 --> 00:01:42.860
Now for that we have a convenient script NPM run build if you execute this will build your application

26
00:01:43.280 --> 00:01:50.210
and whilst during development your code is not optimized it has a lot of debugging supporting code in

27
00:01:50.210 --> 00:01:55.790
it when you run NPM run build everything which is not necessary will be stripped out.

28
00:01:55.790 --> 00:02:02.440
Function and variable names will be shortened and you will get as small of a code bundle as possible.

29
00:02:02.570 --> 00:02:08.320
So let's run NPM run build here in the front end and let's wait for this process to finish.

30
00:02:08.330 --> 00:02:14.480
Now once this did finish with this message here you also get some metrics about the sizes of the different

31
00:02:14.480 --> 00:02:20.810
bundles it produced and you will find a build folder a brand new build folder which contains all the

32
00:02:20.810 --> 00:02:25.520
files you would in the end deploy to a back backend.

33
00:02:25.580 --> 00:02:31.080
These are in the end the files that you want to push to a server.

34
00:02:31.100 --> 00:02:33.590
Now we're not entirely there yet though.

35
00:02:33.710 --> 00:02:40.250
For one we didn't swap our variables here for the values you we want to use in production.

36
00:02:40.250 --> 00:02:41.150
So that's not great.

37
00:02:41.150 --> 00:02:43.000
We of course want to do that right.

38
00:02:43.010 --> 00:02:45.100
Otherwise we have a problem here.

39
00:02:45.140 --> 00:02:52.670
The second problem we have is we didn't really prepare our app entirely for production in the public

40
00:02:52.670 --> 00:02:54.750
folder in the index edged him out file.

41
00:02:54.830 --> 00:03:01.310
You can revisit some setting steer for example set a different description of your web page as it will

42
00:03:01.310 --> 00:03:07.130
appear on Google search for example check all these settings in general make sure if you want to use

43
00:03:07.130 --> 00:03:11.910
that fav icon or if you want to provide your own one you can also delete does manifest.

44
00:03:11.930 --> 00:03:17.180
Jason import file here and also the manifest Jason File if you want to if you're building a progressive

45
00:03:17.180 --> 00:03:18.430
web app you might need that.

46
00:03:18.470 --> 00:03:24.100
Otherwise it's up to you if you want to add this or not so once this is done the rest of his files will

47
00:03:24.100 --> 00:03:24.940
be fine.

48
00:03:24.940 --> 00:03:29.810
Let's focus on the environment variables to provide different values for this production Bill.

49
00:03:29.860 --> 00:03:36.460
So for building the files which we want to move to a server we copy it this file and name it Dot and

50
00:03:36.520 --> 00:03:43.660
Dot production our ReACT build workflow here will automatically pick up this file when we build for

51
00:03:43.660 --> 00:03:49.510
production with NPM run build and we'll use the value set up in there instead of these values.

52
00:03:49.510 --> 00:03:51.560
So now we can provide different values here.

53
00:03:51.640 --> 00:03:57.280
And for example in the case of the Google API key we could use the second key here which is our production

54
00:03:57.280 --> 00:04:02.660
ready API key let's say and swap our development one for this one.

55
00:04:02.670 --> 00:04:08.910
So now we're using that now for the you or else we don't know yet where exactly our back end will be

56
00:04:08.910 --> 00:04:09.400
served.

57
00:04:09.420 --> 00:04:09.680
Right.

58
00:04:09.690 --> 00:04:12.900
Because we haven't deployed to back into any server yet.

59
00:04:12.960 --> 00:04:18.210
So we'll leave them like this for the moment but I will revisit this later once we deployed the back

60
00:04:18.210 --> 00:04:26.380
and now one last thing you might want to consider for optimizing your front then for production is code

61
00:04:26.380 --> 00:04:27.190
splitting.

62
00:04:27.190 --> 00:04:29.110
So let me come back to that in the next lecture.
