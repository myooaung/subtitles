WEBVTT
1
00:00:02.200 --> 00:00:08.460
How can that now connect our back into the monger TB database by using Mongoose we saw with somebody

2
00:00:08.470 --> 00:00:13.610
beat this was a bit cumbersome I would say because each time we created a new product we had to use

3
00:00:13.620 --> 00:00:18.950
Demong client we had to use to connect method to set up the connection and in the end we had to close

4
00:00:18.950 --> 00:00:20.690
the connection once again.

5
00:00:20.690 --> 00:00:28.280
Now Mongoose works a bit different here Mongoose only requires one specific method and I will add this

6
00:00:28.280 --> 00:00:34.760
method up here and we simply use our Mongoose library once again.

7
00:00:34.760 --> 00:00:36.020
So the important package.

8
00:00:36.020 --> 00:00:42.440
And here we refer to the Connect method now to connect method holds one thing and this one thing our

9
00:00:42.440 --> 00:00:48.020
again our credentials that we stored here in this you are else so we can copy and paste this information

10
00:00:48.020 --> 00:00:52.690
here and pass it into the Connect method.

11
00:00:52.910 --> 00:00:59.540
And this now manages the entire connection between our backend Andy Mongo TB database so we don't have

12
00:00:59.540 --> 00:01:01.320
to open a new connection and close it.

13
00:01:01.340 --> 00:01:02.960
Each time we create a new product.

14
00:01:02.960 --> 00:01:09.290
This is all managed by Mongoose and without diving too much into the details Mongoose uses a concept

15
00:01:09.290 --> 00:01:15.950
named connection pooling someone who's actually opens some connections here and manages actively to

16
00:01:15.950 --> 00:01:21.550
make sure we can always have a well very efficient connection between our database and the backend.

17
00:01:21.560 --> 00:01:24.890
But in contrast to mongo D.B. so we value Mongoose.

18
00:01:24.950 --> 00:01:27.800
I would say that this is a lot more convenient.

19
00:01:27.800 --> 00:01:32.780
Besides managing the connection between our backend and the database connect all the returns a promise

20
00:01:33.080 --> 00:01:35.200
so we can also add.

21
00:01:35.640 --> 00:01:45.210
Then here to for example console log that we are connected

22
00:01:48.030 --> 00:01:58.650
to the database here and we can also add catch to well catch any potential errors.

23
00:01:58.850 --> 00:02:04.890
And that's of course not the only error handling logic you might implement here but things can go wrong

24
00:02:04.920 --> 00:02:06.600
when we try to connect to the database.

25
00:02:06.600 --> 00:02:13.590
Therefore we can use catcher to console log that our connection failed in case things go wrong.

26
00:02:13.650 --> 00:02:16.280
So that's also a nice thing to know about disconnect.

27
00:02:16.300 --> 00:02:16.710
Never.

28
00:02:16.710 --> 00:02:22.950
You're talking about error handling by the way here in our Mongo J.S. file we use tri catch to make

29
00:02:22.950 --> 00:02:25.110
sure that we catch any potential errors.

30
00:02:25.140 --> 00:02:28.340
We could also implement this then when we work with Mongoose of course.

31
00:02:28.390 --> 00:02:34.860
I'll skip this as part of this refresher as I want to focus onto the plain logic of Mongoose here.

32
00:02:34.860 --> 00:02:40.460
We'll of course implement it later in the next module when we use Mongoose as part of our course project.

33
00:02:40.610 --> 00:02:42.120
So the connection is established.

34
00:02:42.120 --> 00:02:47.070
But how can we now finally create the product and store the document in the database level that we have

35
00:02:47.070 --> 00:02:48.540
to save the new product.

36
00:02:48.540 --> 00:02:49.330
Right.

37
00:02:49.470 --> 00:02:51.140
And before with the Hmong would it be driver.

38
00:02:51.150 --> 00:02:56.670
This was not the most convenient approach as we had to refer to the database we had to be further collection.

39
00:02:56.670 --> 00:02:59.320
Then tell Mom would you be that you want to insert one document.

40
00:02:59.460 --> 00:03:03.710
And so on so we add again some things to keep in mind.

41
00:03:03.750 --> 00:03:04.450
Now phone goes.

42
00:03:04.460 --> 00:03:08.910
This works a bit different because as I said already mongoose is a helper here.

43
00:03:08.910 --> 00:03:15.450
The only thing you have to do right here is we could create a new constant maybe named result and this

44
00:03:15.450 --> 00:03:21.630
constant refers to our created product so the newly created product that we want to store in our database.

45
00:03:21.810 --> 00:03:28.350
And now we can use the safe method the safe method is a method provided by Mongoose and it's a method

46
00:03:28.470 --> 00:03:33.240
which can be used in connection with the corresponding models and schemas that you created in Mongoose.

47
00:03:33.270 --> 00:03:39.820
So here with our product model for example that's also one of the reasons why we're using the model

48
00:03:39.820 --> 00:03:40.510
right here.

49
00:03:40.540 --> 00:03:45.400
Otherwise we could just use a normal javascript object but with the model we have access to this safe

50
00:03:45.400 --> 00:03:51.910
method and the awesome thing about the safe method is that this method does all the heavy lifting that

51
00:03:51.910 --> 00:03:57.280
is required to save a document behind the scenes so we don't have to worry about all the things I just

52
00:03:57.280 --> 00:03:57.810
talked about.

53
00:03:57.810 --> 00:04:01.910
So for example about insert one saving does all the things we need.

54
00:04:02.020 --> 00:04:07.090
It refers to the right database database appear specified in our credentials.

55
00:04:07.180 --> 00:04:08.820
It refers to the right collection.

56
00:04:08.830 --> 00:04:11.220
The collection is the name here.

57
00:04:11.230 --> 00:04:16.540
As I said the first argument in our modern effort saw the collection and will be products plural form

58
00:04:16.870 --> 00:04:20.430
with a small p and while saving butcher's safe.

59
00:04:20.440 --> 00:04:26.650
That new document that new product as connect up here save all the returns a promise.

60
00:04:26.650 --> 00:04:30.040
Therefore this is an asynchronous task so we have to add weight here.

61
00:04:30.040 --> 00:04:35.760
Again this makes sense said that before interactions with the database can take a few moments.

62
00:04:35.770 --> 00:04:41.800
Therefore we have an asynchronous task at this stage and the promise in the end yields the safe product.

63
00:04:41.800 --> 00:04:47.860
So this means the document inserted into the database which then is stored in the result constant and

64
00:04:47.860 --> 00:04:49.840
also as mentioned before handling errors here.

65
00:04:49.910 --> 00:04:56.020
Possible but try catch for example at this part of the course file not focus onto this year.

66
00:04:56.020 --> 00:05:00.330
Therefore as we now store to document what's missing is the response.

67
00:05:00.340 --> 00:05:02.330
So the response could be of type Jason.

68
00:05:02.350 --> 00:05:06.290
And here we simply want to give back our result.

69
00:05:06.350 --> 00:05:12.810
Now we only have to make sure that we can use our models our whole Mongoose logic in the aptly s file

70
00:05:12.830 --> 00:05:19.520
because at the moment we still refer to our Mongo firefighters among which is therefore we should changed

71
00:05:19.520 --> 00:05:21.250
as to our Mongoose file.

72
00:05:21.260 --> 00:05:26.840
Again we can omit the file extension what's missing at the moment is our Get logic here so let's comment

73
00:05:26.840 --> 00:05:29.990
this out for a moment we'll implement this in the next lecture.

74
00:05:29.990 --> 00:05:35.400
So saving this and now running empty and start to bring back our development server.

75
00:05:35.450 --> 00:05:36.410
This looks good.

76
00:05:36.410 --> 00:05:44.360
Let's not go back to mongo DP Atlas first here to our collections because I want to delete our database

77
00:05:44.390 --> 00:05:49.070
that we have at the moment to make sure we see that Mongoose really handles all this for us now.

78
00:05:49.220 --> 00:05:57.040
So let's delete products test right here whoops products test not product.

79
00:05:57.140 --> 00:06:00.120
So we now dropped the database so our collection should be empty again.

80
00:06:00.920 --> 00:06:10.610
OK now let's go to postmen and create a new post request to local post free thousand slash products

81
00:06:12.580 --> 00:06:16.950
and here body raw and Jason.

82
00:06:17.010 --> 00:06:18.060
And now we need to provide

83
00:06:20.980 --> 00:06:23.820
the name of the product again.

84
00:06:23.830 --> 00:06:30.250
So as we did it before when we used among would you be driver let's say an apple and the price should

85
00:06:30.250 --> 00:06:33.210
be again zero dot ninety nine.

86
00:06:33.730 --> 00:06:40.120
So let's send this post request and this looks really fine.

87
00:06:40.170 --> 00:06:44.750
We have the apple enterprise again we have the automatically created idea.

88
00:06:44.820 --> 00:06:49.980
As I said this is something we'll have to look at in a separate video towards the end of this module.

89
00:06:49.980 --> 00:06:59.540
And if we now check out our database and we load it we see we again got the database so this was automatically

90
00:06:59.540 --> 00:07:01.250
created by mongoose.

91
00:07:01.250 --> 00:07:07.150
We got the corresponding collection and into the collection we also got our document.

92
00:07:07.290 --> 00:07:09.260
And with that we achieved a lot already.

93
00:07:09.270 --> 00:07:13.440
We now switched our entire test project here to mongoose.

94
00:07:13.470 --> 00:07:18.720
We used a schema and the model and we are now using this model already to interact with our database.

95
00:07:18.720 --> 00:07:25.440
And here for example to create new documents let us not use Mongoose to also get documents from our

96
00:07:25.440 --> 00:07:26.070
database.
