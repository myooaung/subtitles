WEBVTT
1
00:00:02.140 --> 00:00:05.550
Time to add more than just roots here with the error.

2
00:00:05.560 --> 00:00:10.030
We already have a great first place of adding our own data model.

3
00:00:10.060 --> 00:00:16.720
Now we could all add a place and a user model but I'll stick to my dummy inline object literal data

4
00:00:16.750 --> 00:00:22.660
for now because we'll add real models later when we work with the database for the error.

5
00:00:22.660 --> 00:00:27.250
However will not replace it later so we can already implement a proper model for it.

6
00:00:27.250 --> 00:00:30.550
Now a model basically is a blueprint.

7
00:00:30.550 --> 00:00:36.730
The definition of a data object we work with and therefore I'll add a new models folder here and in

8
00:00:36.730 --> 00:00:45.400
there I'll add a error or to be precise H to the p dash error J.S. file in that file.

9
00:00:45.610 --> 00:00:47.700
I'll create a new javascript class.

10
00:00:47.830 --> 00:00:50.980
The class keyword is a way lable in modern javascript.

11
00:00:50.980 --> 00:00:57.770
No extra build tools or compilers are required and I'll named as class HDP error.

12
00:00:57.790 --> 00:01:03.460
Now in case you're not aware a class is essentially a blueprint for a javascript object and you can

13
00:01:03.460 --> 00:01:09.400
learn more about that in my javascript complete guide for example or of course also in other javascript

14
00:01:09.400 --> 00:01:15.250
resources I expect that this is something you know or you're looking up whilst you're taking this course

15
00:01:15.550 --> 00:01:18.950
because it is some basic javascript concept.

16
00:01:19.030 --> 00:01:25.930
Now this class will extend with the extends keyword the built in error which means it's based on the

17
00:01:25.930 --> 00:01:32.660
built in error but we can tweak it to look and work the way we want it to look and work.

18
00:01:32.950 --> 00:01:38.230
Specifically I'll add this special constructor method which you can add to any class.

19
00:01:38.230 --> 00:01:44.500
This allows us to write some logic that runs whenever we instantiate this class and create a new object

20
00:01:44.500 --> 00:01:45.810
based on it.

21
00:01:45.910 --> 00:01:52.070
And in this constructor I expect to get a message as an argument and an error code.

22
00:01:52.270 --> 00:01:56.790
And then in here we call super to call the constructor of the base class.

23
00:01:56.790 --> 00:02:06.280
So if the error class here and forward the message to it this will already add a message property to

24
00:02:06.280 --> 00:02:13.390
these instances we create based on this class here and I will also add another property the code property

25
00:02:13.840 --> 00:02:19.480
which is set equal to error code and you add a property with the help of the this keyword here.

26
00:02:19.480 --> 00:02:25.420
So this adds a code property to instances based on this class.

27
00:02:25.450 --> 00:02:32.230
Now we have to export this class with module exports so that we can use it outside of this file as well.

28
00:02:32.410 --> 00:02:37.970
And with it export it we can go back to the places roots and they're simply imported.

29
00:02:37.990 --> 00:02:46.090
So here all import my age to be error by calling require dot dot slash which means go up one level out

30
00:02:46.090 --> 00:02:53.380
of the root folder back into the root folder then go into the models folder and then there HP error

31
00:02:53.440 --> 00:02:55.190
without the file extension.

32
00:02:55.240 --> 00:03:00.790
That's where we get this age to the error class I'm interested in you could named as however you want

33
00:03:00.790 --> 00:03:07.040
by the way convention just is to name these classes which essentially are a constructor function stay

34
00:03:07.090 --> 00:03:09.700
for with a capital starting character.

35
00:03:09.700 --> 00:03:12.240
So I'm doing that here as well.

36
00:03:12.610 --> 00:03:15.400
And now I'm doing this because now we can shorten does a bit.

37
00:03:15.910 --> 00:03:22.810
We can create a new age to the p error here which gets a message and then gets our code like this so

38
00:03:22.960 --> 00:03:30.520
we can get rid of this line here and we can also get rid of this first line and just throw this error

39
00:03:30.550 --> 00:03:34.320
which we create on the fly which is definitely a bit shorter.

40
00:03:34.360 --> 00:03:36.790
And here we can do something similar.

41
00:03:36.820 --> 00:03:46.000
We can create a new age BP error or pass in this message here and set the 404 status code and get rid

42
00:03:46.000 --> 00:03:47.390
of these two lines.

43
00:03:47.470 --> 00:03:50.540
And now this is really a shorter way of doing that.

44
00:03:50.680 --> 00:03:56.710
And if we now give it a try you see this still works as before we're able to find places that exist

45
00:03:57.080 --> 00:04:02.380
that would get back the proper error response for places that do not exist.

46
00:04:02.530 --> 00:04:08.920
And with that we added nice error handling it was important to me to do that early so did we have it

47
00:04:08.980 --> 00:04:12.760
in place before we write too much of our code which also needs it.

48
00:04:13.360 --> 00:04:20.740
But with that I would say we also can go back to our actual roots which we need and the logic we want

49
00:04:20.740 --> 00:04:28.810
to run there and make sure that we also add more of the routes we specified here on this slide because

50
00:04:28.870 --> 00:04:32.860
thus far we only have keys first to get the roots.

51
00:04:32.890 --> 00:04:33.820
No of course not.

52
00:04:33.820 --> 00:04:39.490
All we need to post patch and delete root as well for our places and then of course we also want to

53
00:04:39.490 --> 00:04:43.660
add some users roots because there we haven't added anything at the moment.
