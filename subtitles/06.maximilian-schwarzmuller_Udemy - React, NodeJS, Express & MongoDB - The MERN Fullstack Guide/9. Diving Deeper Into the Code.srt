1
00:00:02,110 --> 00:00:06,670
Now I want to start with the back and forth that let's have a look at the server J.S. file.

2
00:00:06,700 --> 00:00:10,360
This is India and our node express server.

3
00:00:10,630 --> 00:00:16,780
And one important thing about node and express is that unlike with for example P HP when you're building

4
00:00:16,780 --> 00:00:23,650
a node application you launched a server itself with node J.S. with P HP.

5
00:00:23,650 --> 00:00:30,520
You need some extra software like Apache to launch a server which then runs and interprets your P2P

6
00:00:30,520 --> 00:00:34,890
scripts with node you use node itself to launch that server.

7
00:00:35,110 --> 00:00:41,200
So the server js file has all the logic it needs to run the server but also then to handle incoming

8
00:00:41,200 --> 00:00:42,790
requests.

9
00:00:42,790 --> 00:00:48,490
Now we'll dive a bit deeper into how node and express works in a standalone refresh or module.

10
00:00:48,490 --> 00:00:51,550
So I don't want to lose too much time on that right now.

11
00:00:51,550 --> 00:00:56,590
In the end what you'll just see at the end here is that we have some Ellison method which you call which

12
00:00:56,590 --> 00:00:59,950
in the end will start your server and listen on port five thousand.

13
00:01:00,250 --> 00:01:04,150
So this is also where you could change the port but not all ports will work.

14
00:01:04,150 --> 00:01:06,400
Some are not allowed by your system.

15
00:01:06,400 --> 00:01:11,650
And for example three thousand is not allowed because that's where our ReACT AB runs already.

16
00:01:11,650 --> 00:01:14,170
So you should leave that at five thousand.

17
00:01:14,350 --> 00:01:24,370
And in addition besides some obvious setup you will see an app get and app post method this registers

18
00:01:24,460 --> 00:01:28,180
so-called middleware for certain parts.

19
00:01:28,180 --> 00:01:35,680
So here you see that path thing for certain HDP efforts namely here a get method a post method.

20
00:01:35,680 --> 00:01:42,130
So here you see that method path combination thing I was talking about and then some functions that

21
00:01:42,130 --> 00:01:48,750
should be executed when their request reaches such a method path combination.

22
00:01:49,030 --> 00:01:56,560
And then here in the end I sent back a response with some products here I create a new product I validate

23
00:01:56,650 --> 00:02:02,680
the user input before we do anything else and then I create the product create a unique I.D. with some

24
00:02:02,680 --> 00:02:09,220
third party library added here to this dummy products thing I will have a look at in a second and then

25
00:02:09,220 --> 00:02:13,390
sent back a response upon successfully creating that product.

26
00:02:13,480 --> 00:02:16,420
This is our core back and logic.

27
00:02:16,420 --> 00:02:23,290
Now what we're not doing here is talk to a database because for Dad we need to set up a separate long

28
00:02:23,290 --> 00:02:28,720
would he be server which is a bit more work not horrible but a bit more work and therefore we will do

29
00:02:28,720 --> 00:02:30,630
that in a separate module.

30
00:02:30,850 --> 00:02:35,570
But what we do have here with dummy products is a dummy javascript error rate.

31
00:02:35,590 --> 00:02:41,980
This however is only stored in memory of this running node application which means whenever we restart

32
00:02:41,980 --> 00:02:47,320
the server which we can do by quitting our notes server with control C and then rerunning NPM start

33
00:02:47,860 --> 00:02:49,830
all that data will be lost.

34
00:02:49,870 --> 00:02:55,990
So after restarting that server if we reload do react app you'll see it doesn't find any products anymore

35
00:02:56,200 --> 00:03:01,510
because as I mentioned this is only stored in memory of the node app which of course is not a great

36
00:03:01,510 --> 00:03:02,150
storage.

37
00:03:02,200 --> 00:03:04,030
It's just a dummy storage here.

38
00:03:04,120 --> 00:03:07,600
Later we'll of course store data in a database.

39
00:03:07,600 --> 00:03:09,730
You will also see this strange thing.

40
00:03:09,730 --> 00:03:11,280
I will come back to that later.

41
00:03:11,320 --> 00:03:16,720
That is important to allow communication between our front end which runs on a different server than

42
00:03:16,720 --> 00:03:17,660
our backend.

43
00:03:17,680 --> 00:03:24,070
But again I will explain in detail why we need this and what this does later in the course will and

44
00:03:24,070 --> 00:03:27,930
debts already at for our back at you might not understand everything here.

45
00:03:27,940 --> 00:03:34,120
But again we'll have a refresher on Node express later but it should be relatively clear that these

46
00:03:34,120 --> 00:03:38,620
are our endpoints and that this is where our main logic happens on the backend.

47
00:03:38,620 --> 00:03:45,130
Now let's have a look at the front end there we have a react application and react applications are

48
00:03:45,220 --> 00:03:51,830
all about components components can be functions or JavaScript classes.

49
00:03:51,870 --> 00:03:57,850
And in this course I will use only functional components in my react to complete GUI course you'll learn

50
00:03:57,850 --> 00:03:59,070
about both though.

51
00:03:59,080 --> 00:04:03,600
So there you can learn more about real components and different ways of building them.

52
00:04:03,820 --> 00:04:07,200
Now here in the front and folder you'll see that indexed J is fall.

53
00:04:07,210 --> 00:04:07,830
This isn't the end.

54
00:04:07,830 --> 00:04:14,440
The entry point for our front end application this is where we render our ReACT app which is imported

55
00:04:14,440 --> 00:04:16,120
from the app J.S. file.

56
00:04:16,120 --> 00:04:19,320
So let's maybe have a look at that here.

57
00:04:19,390 --> 00:04:23,520
This is D.J. OS X code by the way if you've never seen this before.

58
00:04:23,710 --> 00:04:31,750
This looks like H2 M. It's H HTML in JavaScript an invention by react in the end it's called J as X

59
00:04:31,990 --> 00:04:39,970
and aid is trends to validate javascript bi to build setup which views behind the scenes here with our

60
00:04:40,000 --> 00:04:42,830
NPM start process in the front end.

61
00:04:42,850 --> 00:04:48,880
This is simply a special syntax which allows us to write code which is translated to instructions that

62
00:04:48,880 --> 00:04:55,930
should insert or remove elements in the DOM in a highly readable way to us developers.

63
00:04:55,930 --> 00:05:03,440
So here what I get is I'm rendering a couple of react components header or new product product list.

64
00:05:03,440 --> 00:05:10,580
These are all react components and also some default H HTML elements like Main and paragraph based on

65
00:05:10,580 --> 00:05:18,020
certain conditions for example if we're currently loading or not and I'm passing some data to my components.

66
00:05:18,020 --> 00:05:23,270
Now these components are all imported here at the top and you can find him in their separate files.

67
00:05:23,270 --> 00:05:29,690
For example a button component which wraps the native HDL button and add some extra styling the input

68
00:05:29,690 --> 00:05:35,790
component which combines a label at input to element and adds extra styling and behaviour the header

69
00:05:35,810 --> 00:05:39,710
component which looks like this and some product specific components.

70
00:05:39,710 --> 00:05:46,010
For example our new product form here our product list and a single product item.

71
00:05:46,010 --> 00:05:51,830
This to gather is responsible for getting onto the screen what you saw there and in case that's totally

72
00:05:51,830 --> 00:05:52,300
new.

73
00:05:52,430 --> 00:05:55,930
Besides that react the complete guide course I would recommend to you.

74
00:05:56,000 --> 00:05:58,400
You will always get that brief refresher.

75
00:05:58,400 --> 00:06:04,370
I also already mentioned multiple times now an app has always got more than just our components which

76
00:06:04,370 --> 00:06:05,180
are rendered.

77
00:06:05,210 --> 00:06:12,140
We also got some front end logic so logic that decides what should be shown on the screen and which

78
00:06:12,230 --> 00:06:19,760
also is responsible for sending these background H TTP requests to our well back end which is our No.

79
00:06:19,860 --> 00:06:22,240
Us express server.

80
00:06:22,430 --> 00:06:27,610
Now you see that logic here in the app function in this app component and there.

81
00:06:27,680 --> 00:06:30,790
I use a feature called react hooks.

82
00:06:30,830 --> 00:06:37,320
These are special functions provided by the react library which help us with managing state which is

83
00:06:37,320 --> 00:06:45,260
state dad when it changes leads to a rerun or cycle of the component so which basically tells react

84
00:06:45,500 --> 00:06:47,510
to update the real Dom.

85
00:06:47,510 --> 00:06:54,680
If the data changes and we also use to use a fact hook this is the end hook which allows to random code

86
00:06:54,980 --> 00:06:57,320
when certain pieces of data change.

87
00:06:57,440 --> 00:07:03,290
And here specifically I configured it to run when our application launches and only then.

88
00:07:03,290 --> 00:07:09,980
Now here in this when the application launches code I in the end reach out to the back and the fetch

89
00:07:09,980 --> 00:07:13,700
API is a native javascript API built into browsers.

90
00:07:13,880 --> 00:07:20,870
I send the request to this back and you are L here it automatically is get request and this is a combination

91
00:07:20,870 --> 00:07:27,350
which is supported there get to slash products as you can see in the back and code triggers this function

92
00:07:28,540 --> 00:07:34,930
and then I expect to get back and optic which has a product array which I indeed do sent back here on

93
00:07:34,930 --> 00:07:38,050
the back end and I extract that response.

94
00:07:38,050 --> 00:07:45,130
Then access this product key and set my loaded products so those loaded products state data to the data

95
00:07:45,190 --> 00:07:46,540
I got from the back end.

96
00:07:46,710 --> 00:07:52,930
And as I mentioned this state data is special when it changes react will re render the UI which is the

97
00:07:52,930 --> 00:07:58,090
reason why Windows loading finished it swaps is loading.

98
00:07:58,090 --> 00:08:03,030
Keyword here for either our products or this fallback text.

99
00:08:03,190 --> 00:08:09,670
I also got the ad product handler function of function in a function which is totally fine and JavaScript

100
00:08:09,940 --> 00:08:13,430
it is supported in javascript with out any special tricks.

101
00:08:13,630 --> 00:08:20,730
And in this ad product handler here I can build a product object and then also sent it to the back end.

102
00:08:20,800 --> 00:08:27,010
But to a different you are L slash product and also with a different HBP method.

103
00:08:27,010 --> 00:08:34,720
The default ones get but here I overwrite the default to set it to post and post to slash product that

104
00:08:34,900 --> 00:08:42,070
is also supported on the back end and it triggers this function here now there.

105
00:08:42,100 --> 00:08:48,840
I attach my data and send some extra headers to let the back and know that I'm sending Jason data.

106
00:08:48,940 --> 00:08:53,550
This is a helper method available in javascript to create Jason data.

107
00:08:53,620 --> 00:08:58,080
I'd check if the response is Ok otherwise in the end I will show an alert.

108
00:08:58,090 --> 00:09:03,970
For example if invalid data was entered in the inputs and if everything is fine and we stored our data

109
00:09:04,000 --> 00:09:10,810
in the back and I update the products I work with on the front end to re render the UI and reflect that

110
00:09:10,810 --> 00:09:12,610
newly added product.

111
00:09:12,610 --> 00:09:14,810
This is what happens here.

112
00:09:14,920 --> 00:09:21,250
Now again more detailed refreshers on the ends will be provided later but I hope that with that this

113
00:09:21,310 --> 00:09:23,970
big picture is clear in general.

114
00:09:24,070 --> 00:09:29,050
Now as I mentioned multiple times will build a complete app for all this course from scratch.

115
00:09:29,050 --> 00:09:30,970
You just get this finished app here.

116
00:09:30,970 --> 00:09:32,950
Later we will build it from scratch.

117
00:09:32,950 --> 00:09:38,950
No worries and therefore then you will learn how these pieces are built and how they work together.

118
00:09:38,950 --> 00:09:43,690
But the general structure should already be clear right now with that big picture here.
