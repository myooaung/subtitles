1
00:00:02,120 --> 00:00:06,680
So we need a list of users here on the users page instead of our dummy users.

2
00:00:06,680 --> 00:00:13,190
So we'll actually get rid of the dummy users here and instead here I want to send a HDP request and

3
00:00:13,190 --> 00:00:14,800
I want to send that request.

4
00:00:14,810 --> 00:00:17,420
When ever this page loads.

5
00:00:17,430 --> 00:00:22,420
That's a difference of course to the off page there we sent the request in a function.

6
00:00:22,520 --> 00:00:24,200
When we click the button.

7
00:00:24,200 --> 00:00:27,040
Now I want to do this when this page loads.

8
00:00:27,140 --> 00:00:31,940
Hence we could of course send a fetch request here right instead of our component function.

9
00:00:31,940 --> 00:00:35,510
And as soon as this component renders we sent the request right.

10
00:00:35,930 --> 00:00:42,530
The problem is we would also always send this request whenever the component re renders which it most

11
00:00:42,530 --> 00:00:43,460
likely does.

12
00:00:43,460 --> 00:00:49,400
Once we got the response data and we change something on the page so we would actually create the infinite

13
00:00:49,400 --> 00:00:53,170
loop to work around that we can use a react hook.

14
00:00:53,270 --> 00:00:55,220
They use a fact hook here.

15
00:00:55,370 --> 00:01:02,210
They use a fact hook allows us to run certain code only when certain dependencies change the code that

16
00:01:02,210 --> 00:01:05,690
runs is defined in the function which is our first argument.

17
00:01:05,690 --> 00:01:11,470
The second argument is an array of dependencies so off data that needs to change for this rerun.

18
00:01:11,480 --> 00:01:14,540
And if this is empty it means it will never rerun.

19
00:01:14,540 --> 00:01:18,420
It will only run once which is exactly what I want here.

20
00:01:18,440 --> 00:01:24,940
So now instead of this only once running use affect function we can send our request to age should it

21
00:01:24,950 --> 00:01:30,850
be local hosted 5000 slash API slash users.

22
00:01:30,850 --> 00:01:38,130
And if we check our backend and we check the users roots there we see it's just slash users.

23
00:01:38,150 --> 00:01:43,860
Keep in mind we only reached this file if we're on API slash users here.

24
00:01:44,770 --> 00:01:50,500
So it's just slash users which triggers dysfunction which is that function I want to trigger and in

25
00:01:50,500 --> 00:02:00,280
this function in the get user's function in the end we return a list of users so a 1 isn't a request

26
00:02:00,280 --> 00:02:02,280
there it should be a GET request.

27
00:02:02,380 --> 00:02:07,340
Hence we don't need to configure it is to send a post request or anything like that.

28
00:02:07,360 --> 00:02:13,840
We also don't need to add a content type header because we're not attaching any data we're not attaching

29
00:02:13,870 --> 00:02:18,890
any content to the outgoing request and we also therefore don't need to attach anybody.

30
00:02:18,940 --> 00:02:21,450
So this request is good like this.

31
00:02:21,550 --> 00:02:26,530
Now it does yield a promise so we can use then here or a single wait.

32
00:02:26,530 --> 00:02:28,620
Now here's one important rule.

33
00:02:28,690 --> 00:02:32,470
Don't turn this function here into a async function.

34
00:02:32,530 --> 00:02:37,230
You could technically do that and it would work but it's not good code.

35
00:02:37,440 --> 00:02:45,640
You as a fact doesn't want a function here which returns a promise and any async function so any function

36
00:02:45,640 --> 00:02:51,850
where you add async will automatically and always return a promise.

37
00:02:51,850 --> 00:02:53,920
So don't do that it's not good code.

38
00:02:53,920 --> 00:02:57,160
It goes against what use effect expects here.

39
00:02:57,160 --> 00:02:59,020
So instead you can create the if.

40
00:02:59,200 --> 00:03:01,690
So an immediate the executing function.

41
00:03:01,690 --> 00:03:05,050
I will name it send request here.

42
00:03:05,200 --> 00:03:09,740
This is now a function which in the end has to is fetch command in it.

43
00:03:09,790 --> 00:03:16,010
This now can use async and it will then execute this function right away here in the end.

44
00:03:16,090 --> 00:03:21,370
So this is just a pattern which I would recommend if you want to use async await because using async

45
00:03:21,370 --> 00:03:25,880
here is not recommended and not where you want it.

46
00:03:25,900 --> 00:03:35,130
So now we can await whips await our response here and then of course we can get the response data by

47
00:03:35,130 --> 00:03:36,880
a waiting response start.

48
00:03:36,910 --> 00:03:42,910
Jason and now we want to use the response data and that's all the difference to before.

49
00:03:42,980 --> 00:03:47,780
In the off component I didn't care about the response data in the success case.

50
00:03:47,840 --> 00:03:50,390
I just called off log in.

51
00:03:50,390 --> 00:03:58,250
Now here I do care about the response data so we actually still want to manage the loading and the error

52
00:03:58,250 --> 00:03:59,480
state here.

53
00:03:59,480 --> 00:04:09,520
But I also want to manage my response data so we can again use use state ok here and setup some states

54
00:04:09,580 --> 00:04:11,110
in this component.

55
00:04:11,110 --> 00:04:21,070
We got the is loading state which we set with set is loading which initially is false we got the error

56
00:04:21,130 --> 00:04:30,670
state and set to air or of course initially undefined and we got the let's say data state or actually

57
00:04:30,670 --> 00:04:36,230
loaded users maybe since we know that this is what we'll have here and set loaded users.

58
00:04:36,430 --> 00:04:44,100
And this initially is also undefined let's say and now here we got the response data.

59
00:04:44,100 --> 00:04:50,530
Once we get that I want to call set loaded users and set as equal to response data.

60
00:04:50,530 --> 00:04:55,380
And now let's have a look at the back end and see what exactly we get back we get back and object which

61
00:04:55,380 --> 00:04:59,300
has a user's key and that user's key will be an array of users.

62
00:04:59,340 --> 00:05:02,190
So in our response we should have that user's key.

63
00:05:02,190 --> 00:05:08,370
So here I want to set my loaded users which should be an array equal to response data dot users.

64
00:05:08,460 --> 00:05:16,830
All the will set is loading to false here because I want to set it to true right before we sent the

65
00:05:16,830 --> 00:05:19,950
request here set it to true

66
00:05:24,750 --> 00:05:29,570
we also might have an error so we can use try catch again.

67
00:05:29,760 --> 00:05:39,030
Move all of that into try and then catch errors here and then in here we can therefore also set is loading

68
00:05:39,290 --> 00:05:40,310
to falls.

69
00:05:40,380 --> 00:05:44,250
But I also want to set my error to error DOD message

70
00:05:47,840 --> 00:05:54,840
and justice before we don't get an error by default if we have a 400 dish or 500 dish status code.

71
00:05:54,950 --> 00:06:01,250
So I will check if the response is not OK so if we have such a code in which case I throw my own error

72
00:06:01,250 --> 00:06:10,890
here response data dot message and then we'll still make it into this catch block we could now all move

73
00:06:10,890 --> 00:06:16,920
set is loading often try catch so that this only runs no matter if we do have an error or not here in

74
00:06:16,920 --> 00:06:23,910
the catch block we don't just update our state otherwise we update set loaded users now I will also

75
00:06:23,920 --> 00:06:32,020
add a function our our handler justice before where I will call set error and reset this.

76
00:06:32,110 --> 00:06:35,810
And now we can add the error modal and the loading state.

77
00:06:35,920 --> 00:06:40,480
And of course all then make sure we use our loaded users.

78
00:06:40,480 --> 00:06:43,600
So let's first of all import some extra component here.

79
00:06:43,600 --> 00:06:51,730
Let's import the error modal from the shared folder and they from components UI elements error modal.

80
00:06:52,030 --> 00:06:57,190
And let's repeat this for diesel loading spinner.

81
00:06:57,430 --> 00:07:02,530
This average component we have in their with both imported.

82
00:07:02,810 --> 00:07:09,970
Let's go down to our J as X code and here items which I pass in should be my loaded users now.

83
00:07:11,750 --> 00:07:18,530
But besides that I will use react fragment because I want to have multiple top level JSA X elements

84
00:07:18,530 --> 00:07:23,930
here which only works with react fragment around them because of course I also want my error modal here

85
00:07:24,380 --> 00:07:33,170
and the error i pass is the errors stage we're managing on clear points at the error handler and besides

86
00:07:33,170 --> 00:07:39,290
the error modal I also want to show a loading spinner so dynamically I'll check if is loading is true

87
00:07:39,650 --> 00:07:44,720
and if it is I will actually add a death here with a class name of center.

88
00:07:44,750 --> 00:07:50,150
That's a globally defined C as s rule and in there I want to output my loading spinner to have a full

89
00:07:50,150 --> 00:07:51,200
screen loading spinner

90
00:07:54,800 --> 00:07:56,400
with all of that.

91
00:07:56,570 --> 00:08:02,930
Let's see where that works if we save that we get an error here.

92
00:08:02,940 --> 00:08:08,180
Kennedy property length of undefined note this error makes sense for two reasons.

93
00:08:08,270 --> 00:08:16,310
For one it makes sense because we render a users list all the time that includes the initial rendering

94
00:08:16,310 --> 00:08:17,270
of this component.

95
00:08:17,270 --> 00:08:24,440
So before this request was sent and before we got back a response loaded users initially is just undefined

96
00:08:24,800 --> 00:08:30,860
and undefined doesn't have a place as property and therefore there is no way for us to render anything

97
00:08:31,430 --> 00:08:36,620
so we should actually only render the users list here if we're not loading.

98
00:08:36,830 --> 00:08:44,510
And if we got loaded users then I want to render this users list so that we don't rendered as a loaded

99
00:08:44,510 --> 00:08:47,870
users is undefined with that.

100
00:08:47,900 --> 00:08:51,050
This looks way better now.

101
00:08:51,080 --> 00:08:57,560
We still don't output places correctly and you'll see I picked a really cool picture here for my avatar.

102
00:08:57,920 --> 00:09:00,980
But besides that you see the number of places is incorrect.

103
00:09:00,980 --> 00:09:03,200
There is no no showing at all.

104
00:09:03,200 --> 00:09:09,800
The reason for data is that the places we get back now on our loaded users is actually an array of places

105
00:09:10,670 --> 00:09:12,890
in the user's list component.

106
00:09:12,980 --> 00:09:19,020
We expect places to actually be well the number of places itself.

107
00:09:19,130 --> 00:09:24,350
So actually since places now is an array we just need to changed as in set place count equal to user

108
00:09:24,350 --> 00:09:26,890
dot places dot length.

109
00:09:27,030 --> 00:09:30,480
And with that if we saved that we see zero places.

110
00:09:30,480 --> 00:09:34,140
So now we can click on a user and we're taken to that users page.

111
00:09:34,140 --> 00:09:39,390
But of course we can't load any places because at the moment we have no places.

112
00:09:39,540 --> 00:09:45,690
So we want to make sure that now when we are logged in we can also create new places.

113
00:09:45,690 --> 00:09:54,150
However before we do that we might want to reorganize our HBP requests and encode a bit because as I

114
00:09:54,150 --> 00:09:56,900
mentioned before we have a lot of duplication.

115
00:09:57,090 --> 00:10:01,370
Managing all that loading in our state is basically always the same.

116
00:10:01,470 --> 00:10:06,810
The same is true for extracting the data and checking the response status and I don't want to repeat

117
00:10:06,810 --> 00:10:10,300
that in every component which needs to send a request.

118
00:10:10,320 --> 00:10:18,360
This screams for a custom hook and hence we will create one a custom hook that sends requests and manages

119
00:10:18,450 --> 00:10:19,710
all the related state.
