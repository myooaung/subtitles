WEBVTT
1
00:00:02.180 --> 00:00:07.580
So let's move over to react and dear when we build for production we of course now also want to use

2
00:00:07.580 --> 00:00:09.530
our real back and you are L.

3
00:00:09.710 --> 00:00:12.470
Now we gasped as you are L now as let's grab it here

4
00:00:15.970 --> 00:00:21.280
and insert it instead of local host five thousand like this.

5
00:00:21.280 --> 00:00:27.550
So this is now where our application should be served at Indiana and removed his trailing slashes here

6
00:00:28.650 --> 00:00:35.250
so once we get this setup we hopefully have a reactive which is able to talk to our back and so let's

7
00:00:35.250 --> 00:00:43.970
run NPM run build again to create this production build and then before we deployed this to a static

8
00:00:43.970 --> 00:00:51.570
HOST I want to test it locally for Dad we need as simple local server which can serve our aesthetic

9
00:00:51.570 --> 00:00:57.030
assets and for this you can search for NPM serve to find a NPM package which you can install globally

10
00:00:57.030 --> 00:01:02.030
on your system to simply serve any static files with it.

11
00:01:02.100 --> 00:01:12.560
So here I will run npm install dash G serve and on Linux and Mac you might need to add a pseudo in front

12
00:01:12.560 --> 00:01:13.970
of this to get the right permissions

13
00:01:17.130 --> 00:01:19.560
and this will now installed is serve package.

14
00:01:19.560 --> 00:01:24.810
Again it's just a simple server which we can use locally to serve our built assets.

15
00:01:24.810 --> 00:01:28.230
So now S.D. into the build folder and simply run serve.

16
00:01:28.230 --> 00:01:31.970
And this will now serve your production ready react application.

17
00:01:32.040 --> 00:01:34.600
So it is a way for us to test this application.

18
00:01:34.650 --> 00:01:36.960
It served on local host five thousand here.

19
00:01:37.020 --> 00:01:40.470
So let's enter that and let's see where this works.

20
00:01:40.560 --> 00:01:45.510
Now it finds no users initially which makes a lot of sense because we haven't created any.

21
00:01:45.510 --> 00:01:50.120
So let's now Indian go to authenticate here and let's try signing up with one.

22
00:01:50.130 --> 00:01:53.770
So here will enter Max and pick an image of course.

23
00:01:53.790 --> 00:02:01.910
Here it is enter email address and a password and click sign up and this seems to work.

24
00:02:01.910 --> 00:02:05.490
Here is our user if you click on the user.

25
00:02:05.560 --> 00:02:14.060
I could not find any places for the user but if I tried to create one Marine plots great place in Munich.

26
00:02:14.070 --> 00:02:15.850
I'm sure you know this place by now.

27
00:02:17.740 --> 00:02:21.460
We can configure all of that click at place.

28
00:02:21.610 --> 00:02:29.080
Now when we go back here I see we got kind of a strange style here I would say if I reload it's gone.

29
00:02:29.080 --> 00:02:32.920
Not sure it's always there when we navigate to this page.

30
00:02:32.920 --> 00:02:36.790
Simply a styling issue though it does work and we see our place here.

31
00:02:36.790 --> 00:02:38.660
We can also view it on a map.

32
00:02:38.680 --> 00:02:43.250
Let's try editing it looks good and let's stride.

33
00:02:43.280 --> 00:02:48.560
Before we deleted action let's go to mongo DP and have a look into our database to see where it's stored

34
00:02:48.560 --> 00:02:51.950
in the right database which should be merged Prot.

35
00:02:52.040 --> 00:02:59.270
So let's go to and port and in merged port in places we have one document with one place and we have

36
00:02:59.270 --> 00:03:03.290
one user and that user has a reference to our place.

37
00:03:03.350 --> 00:03:09.690
If we now go back here and we delete this place this works and if we go back to mongo TB therefore in

38
00:03:09.690 --> 00:03:16.680
the places collection de should be empty now and on users our reference should be gone and it is.

39
00:03:17.200 --> 00:03:18.850
So this works.

40
00:03:18.850 --> 00:03:25.690
Our production ready reactive works it talks to our back and now we should be ready to also deploy this

41
00:03:25.690 --> 00:03:27.870
reactive to a static host.

42
00:03:28.120 --> 00:03:33.960
Now just as for the node code there are many hosts who can choose to deploy a static application.

43
00:03:34.030 --> 00:03:38.130
I go with firebase hosting because there we also can get started for free.

44
00:03:38.170 --> 00:03:41.630
And all we need is a Google account which we already should have by now.

45
00:03:41.680 --> 00:03:45.910
But again if you search for a static hosting you find plenty of alternatives.

46
00:03:45.950 --> 00:03:49.570
Now you can go to Firebase hosting dogs to learn more about it.

47
00:03:49.660 --> 00:03:55.450
And as always you all do want to check out their pricing to understand what costs you money and what

48
00:03:55.450 --> 00:03:56.230
doesn't.

49
00:03:56.380 --> 00:03:58.780
The hosting we will use here will be free.

50
00:03:58.900 --> 00:04:02.400
But again if you're running a bigger application there and so on.

51
00:04:02.440 --> 00:04:04.590
Then this might not be the case.

52
00:04:04.660 --> 00:04:08.520
So how do we host an application with firebase hosting.

53
00:04:08.710 --> 00:04:13.390
For Dad we can click on get started here on the left and we learn that first of all we have to install

54
00:04:13.390 --> 00:04:15.300
the firebase CLIA.

55
00:04:15.880 --> 00:04:21.400
So just as we had to install a Heroku Seelye we need that and you can click on your button to simply

56
00:04:21.550 --> 00:04:27.300
install it on your system to see the steps you need to run to install it on your system.

57
00:04:27.340 --> 00:04:35.800
So simply make sure you do that you install the firebase tools here as it's called on your system and

58
00:04:35.800 --> 00:04:39.490
once you're done with that you can run firebase in it however.

59
00:04:39.510 --> 00:04:42.370
And that was part of the installation actually.

60
00:04:42.490 --> 00:04:44.860
You also need to sign in.

61
00:04:44.860 --> 00:04:51.660
So you need to run firebase log in and log in with your Google account there so once you ran firebase

62
00:04:51.740 --> 00:04:55.920
log in you can run firebase in it in the project you want to host.

63
00:04:55.920 --> 00:05:00.950
So in my case in this front and folder here and there make sure you're in the front and folder Northern

64
00:05:00.950 --> 00:05:02.120
the build folder anymore.

65
00:05:02.130 --> 00:05:08.780
So navigate into the root front and folder and run firebase in it node will ask you which features a

66
00:05:08.780 --> 00:05:11.240
firebase you want to use and here we only need hosting.

67
00:05:11.330 --> 00:05:14.990
So navigate to that hit space and then confirm with enter.

68
00:05:14.990 --> 00:05:19.330
Then it asks you whether you want to create a new project or use an existing one.

69
00:05:19.370 --> 00:05:25.040
You can choose create a new project here and simply enter a project name into the field once ask for

70
00:05:25.040 --> 00:05:25.630
it here.

71
00:05:25.850 --> 00:05:27.980
I will go with an existing one but you can.

72
00:05:27.980 --> 00:05:30.960
As I said create a new one as a next step.

73
00:05:30.960 --> 00:05:33.450
Your ask what your public directory should be.

74
00:05:33.480 --> 00:05:34.680
The default is public.

75
00:05:34.680 --> 00:05:39.300
But in our case the files we want to deploy and that is the end what it's looking for here are in the

76
00:05:39.300 --> 00:05:40.280
build folder.

77
00:05:40.350 --> 00:05:47.110
So enter build instead your then ask whoever you want to configure this as a single page app and you

78
00:05:47.110 --> 00:05:48.340
should choose yes here.

79
00:05:48.430 --> 00:05:55.010
So did all requests on the server are redirected to that index H to mail file as a next step.

80
00:05:55.010 --> 00:05:59.060
It asks you that it already found it index HMO file if it should overwrite that.

81
00:05:59.060 --> 00:06:05.450
And there you should choose and for no end are often in initialize is this and you should be done to

82
00:06:05.460 --> 00:06:08.560
New files are added with the general configuration.

83
00:06:08.610 --> 00:06:14.520
And one important note here in the firebase Jason File is that rewrites entry in the end that says for

84
00:06:14.520 --> 00:06:17.090
any requests sent to your back and server.

85
00:06:17.130 --> 00:06:22.200
So whatever you are L your entering there it will always serve the index each time demo file because

86
00:06:22.230 --> 00:06:28.140
India we have react and to react router which passes to you or L and then renders the right component.

87
00:06:28.290 --> 00:06:30.930
And that's important for single page applications.

88
00:06:31.140 --> 00:06:37.410
The location where you are serving them always needs to return the index each time I'll file that single

89
00:06:37.410 --> 00:06:43.470
page you're having because you're not resolving you are ls on the server side but instead you always

90
00:06:43.470 --> 00:06:46.860
want to return your h to mellow file with your reactive in it.

91
00:06:46.980 --> 00:06:53.250
So how do you react Deb and the react router can do something with the you or else that's why this configuration

92
00:06:53.250 --> 00:06:54.120
is important here.

93
00:06:55.850 --> 00:07:02.510
With this configured if we go back to the docs we see that now is a next step we can run firebase deploy

94
00:07:03.110 --> 00:07:09.260
so let's run this command here firebase deploy and this will now push our files in the build folder

95
00:07:09.560 --> 00:07:16.820
to a host to a server provided by Firebase and once it's done it will also give you the you are elsewhere

96
00:07:16.820 --> 00:07:24.680
you'll find that of course before you run that command make sure that you rent NPM run build with your

97
00:07:24.680 --> 00:07:26.390
latest change applied.

98
00:07:26.390 --> 00:07:32.510
I did this already but in case you didn't run it first before you deploy and thereafter you find your

99
00:07:32.570 --> 00:07:40.920
hosting you are ill so let's copy that and open it in a new tab and this is now our application and

100
00:07:40.920 --> 00:07:47.070
you can already tell that it works because it fetch the user I created before we can also try logging

101
00:07:47.070 --> 00:07:50.930
in here yeah that looks good.

102
00:07:51.070 --> 00:07:56.720
Still got that strange styling bug here but besides that everything is working just fine.

103
00:07:57.040 --> 00:08:02.080
And with that we got our application up and running on two separate services.

104
00:08:02.080 --> 00:08:08.980
He wrote go for no yes and firebase hosting for react and I would say that this is the most common way

105
00:08:09.370 --> 00:08:16.210
of deploying such Marine apps you want to split your rest api from the front end because that rest api

106
00:08:16.210 --> 00:08:22.900
you build which has served through here Roko really can be utilized by any client you're not restricted

107
00:08:22.900 --> 00:08:29.530
to your react front end if you served as on a standalone server you can easily connect our clients to

108
00:08:29.530 --> 00:08:30.820
it as well.

109
00:08:30.820 --> 00:08:36.850
Now of course that technically would all be possible if reactive served by the same server but the more

110
00:08:36.850 --> 00:08:41.380
you serve from the same server the more requests hit that server.

111
00:08:41.380 --> 00:08:47.920
So splitting the apps on two servers also makes sense from a performance perspective users who are just

112
00:08:47.920 --> 00:08:54.010
visiting your react app who are not doing something that hits your database and your rest api will therefore

113
00:08:54.040 --> 00:09:00.490
only hit the static host and therefore you split the amount of requests and which servers their requests

114
00:09:00.490 --> 00:09:01.150
reach.

115
00:09:01.150 --> 00:09:06.970
So that would be a novel argument for using multiple hosts nonetheless in the next steps I also want

116
00:09:06.970 --> 00:09:10.690
to show you how you can deploy everything to one server.
