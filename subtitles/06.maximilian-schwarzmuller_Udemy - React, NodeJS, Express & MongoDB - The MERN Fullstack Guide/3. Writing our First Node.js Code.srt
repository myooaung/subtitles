1
00:00:02,150 --> 00:00:05,150
Now to play around with note Trey has a little bit.

2
00:00:05,150 --> 00:00:07,580
I prepared a brand new project here.

3
00:00:07,580 --> 00:00:11,080
It's basically an empty folder which I opened with my I.T. visuals.

4
00:00:11,080 --> 00:00:18,230
Did you code in there we're going to write some notorious code executed and understand how it works

5
00:00:18,860 --> 00:00:22,270
now important for dad of course in case you haven't done so yet.

6
00:00:22,280 --> 00:00:24,020
You need to install No.

7
00:00:24,050 --> 00:00:28,360
Simply download and install the latest worm from notorious dot org.

8
00:00:28,370 --> 00:00:34,280
It should automate as you pick the right operating system for you if not click on our downloads to choose

9
00:00:34,280 --> 00:00:35,290
one manually.

10
00:00:35,450 --> 00:00:37,110
Simply download the latest version.

11
00:00:37,160 --> 00:00:42,680
Walk through the installer it just gives you and you can leave all the defaults there and hence by the

12
00:00:42,680 --> 00:00:43,740
end of the installer.

13
00:00:44,030 --> 00:00:50,270
Once he went through the entire process you will have no choice and a number tool NPM which stands for

14
00:00:50,270 --> 00:00:53,840
node package manager installed on your system.

15
00:00:53,840 --> 00:00:59,240
Now let's ignore that NPM tool for now and let's write some no chance code for that here.

16
00:00:59,240 --> 00:01:06,080
I'll add a new file app J.S. you can name it however you want and in there we can write normal javascript

17
00:01:06,080 --> 00:01:14,840
code we can for example create a constant user name and then console log that if we want to now important

18
00:01:15,200 --> 00:01:21,120
this year users next gen javascript syntax I'm using constant let instead of wah.

19
00:01:21,140 --> 00:01:24,980
And in general for all this course I will use modern javascript syntax.

20
00:01:24,980 --> 00:01:32,180
Arrow functions D structuring spread operator and much more so in case you're not really familiar with

21
00:01:32,180 --> 00:01:38,090
this modern javascript syntax you should definitely look into some dedicated resources which teach you

22
00:01:38,090 --> 00:01:39,560
this modern syntax.

23
00:01:39,560 --> 00:01:46,430
For example my accelerated iOS 6 javascript course or of course my javascript complete guide course

24
00:01:46,670 --> 00:01:51,630
which teaches you everything about JavaScript including a little introduction to know.

25
00:01:51,680 --> 00:01:52,640
Yes actually.

26
00:01:53,090 --> 00:01:55,070
So we have this basic script here.

27
00:01:55,160 --> 00:01:59,830
And if we now safeties filed we can execute this with node.

28
00:02:00,080 --> 00:02:06,620
For that let's open the terminal here in this idea eats the normal terminal just integrated into the

29
00:02:06,620 --> 00:02:07,080
idea.

30
00:02:07,550 --> 00:02:11,510
And it's already navigated into this folder which is the convenient thing about it.

31
00:02:11,660 --> 00:02:18,140
And there you can run node app J.S. the node command is available because you installed no trace on

32
00:02:18,140 --> 00:02:24,320
your system and then would just type the file name including the extension of the file of the javascript

33
00:02:24,320 --> 00:02:29,240
file we want to execute through node J.S. if you hit enter.

34
00:02:29,340 --> 00:02:34,700
I see Max here and you should see whichever name you entered here is a user name because that is what

35
00:02:34,700 --> 00:02:36,350
we do in this script.

36
00:02:36,350 --> 00:02:42,320
Now it is noteworthy that if we tried to enter alert here and we execute this we would actually get

37
00:02:42,320 --> 00:02:43,490
an error here.

38
00:02:43,550 --> 00:02:46,300
We get an error that alert is not defined.

39
00:02:46,370 --> 00:02:50,430
This is the thing I mentioned regarding some API is not being available.

40
00:02:50,440 --> 00:02:57,020
The alert function which does exist in the browser environment does not exist and no chance.

41
00:02:57,050 --> 00:03:01,310
This kind of makes sense because the alert function opens an alert in the browser.

42
00:03:01,310 --> 00:03:09,150
Here we have no browser no checks has no built in functionality to open some window on your system.

43
00:03:09,170 --> 00:03:11,070
That's not how it works.

44
00:03:11,090 --> 00:03:14,150
So that's one of the API but you can't use anymore.

45
00:03:14,180 --> 00:03:16,580
No worries there will be new APIs.

46
00:03:16,700 --> 00:03:20,240
For example we can write to a file for this.

47
00:03:20,270 --> 00:03:24,340
We need to import this file system functionality.

48
00:03:24,470 --> 00:03:30,950
If you only works with browser side JavaScript and you haven't work with modern project setups there

49
00:03:30,950 --> 00:03:34,300
which use bundling to combine multiple files.

50
00:03:34,520 --> 00:03:39,260
You might not really know the concept of imports and exports in JavaScript.

51
00:03:39,260 --> 00:03:46,060
You might simply worked with multiple script imports in your HDL files to import multiple scripts.

52
00:03:46,160 --> 00:03:53,210
Well in no charge yes and also by the way later in react chess where we will have a build workflow which

53
00:03:53,210 --> 00:03:57,040
supports bundling and splitting our code across multiple files.

54
00:03:57,260 --> 00:04:05,390
We are able to import functionalities from file B into file a and we're able to export functionalities

55
00:04:05,480 --> 00:04:07,700
so that we can use them in our files.

56
00:04:07,880 --> 00:04:09,580
And this is important to understand.

57
00:04:09,590 --> 00:04:14,390
Dead with the exception of some very few global functions.

58
00:04:14,390 --> 00:04:20,170
Everything which you want to use in a file has to be imported before you can use it.

59
00:04:20,180 --> 00:04:25,940
So for example here I want to write something to a file for that conveniently no trace has a couple

60
00:04:25,940 --> 00:04:32,150
of built in core API I's just as the browser has a couple of built in core API is like the dorm API

61
00:04:32,990 --> 00:04:34,910
for working with the file system.

62
00:04:34,940 --> 00:04:37,450
No chars has the file system API.

63
00:04:37,640 --> 00:04:41,700
We imported with the require function and that's important.

64
00:04:41,750 --> 00:04:49,160
The required function is a function globally available in no chance one of the very few globally available

65
00:04:49,250 --> 00:04:56,240
functions now required takes a string and that either is a relative path to one of your files where

66
00:04:56,240 --> 00:05:02,990
you're exporting something or in case of the filesystem or other core baked in modules.

67
00:05:02,990 --> 00:05:06,470
The name of that module in this case f s for file system.

68
00:05:06,470 --> 00:05:10,690
This is a module which is available with the default installation of no chance.

69
00:05:10,700 --> 00:05:13,950
You don't need to install it separately or anything like that.

70
00:05:14,270 --> 00:05:21,560
Now require is a function which tells no chance that you want to import something from that file or

71
00:05:21,560 --> 00:05:29,330
in this case this module you're pointing it now that something that object all functionalities then

72
00:05:29,330 --> 00:05:31,610
is returned by the required function.

73
00:05:31,610 --> 00:05:37,070
So we should store it in this case in a constant which will also name f S. though this name here is

74
00:05:37,070 --> 00:05:37,770
up to you.

75
00:05:37,790 --> 00:05:40,260
You could named it however you want.

76
00:05:40,340 --> 00:05:47,200
Now we can use it as File System object to use a couple of methods which are built into this filesystem

77
00:05:47,260 --> 00:05:48,210
module.

78
00:05:48,410 --> 00:05:55,910
Note Charles offers to us specifically there is a right file method the right file method takes a path

79
00:05:56,030 --> 00:06:02,060
to to file we want to write and then the data we want to write to that follow the path in its simplest

80
00:06:02,060 --> 00:06:08,100
form can just be the file name and it will always be written into a location relative to the script

81
00:06:08,100 --> 00:06:09,150
you're executing.

82
00:06:09,170 --> 00:06:14,990
So here for example you could have user data Dot T X T to create a text file and it would create that

83
00:06:14,990 --> 00:06:18,590
user data text file next to the app chars file.

84
00:06:18,590 --> 00:06:24,890
Second argument is our data and there I will enter name plus user name so I'll just write a string as

85
00:06:24,890 --> 00:06:26,790
data to that file.

86
00:06:26,840 --> 00:06:33,260
Now with that there is a third argument we have to provide to write file and that's a callback a function

87
00:06:33,260 --> 00:06:39,360
which will be called for you once this operation is done because right file like many functionality

88
00:06:39,380 --> 00:06:45,970
is built into no chance is a asynchronous task which means it can take a bit longer especially if you're

89
00:06:45,980 --> 00:06:52,040
writing or reading a lot of data and therefore no chance does not block the execution of the average

90
00:06:52,040 --> 00:06:53,410
javascript code.

91
00:06:53,420 --> 00:06:59,520
Instead it will outsource does longer taking task to the node j s environment which is able to use multi

92
00:06:59,520 --> 00:07:03,550
threading ends on which javascript the language itself is not.

93
00:07:03,760 --> 00:07:06,320
And it will call a function once it's done.

94
00:07:06,440 --> 00:07:12,540
This function will get an error object which is null if no error occurred or which is not null.

95
00:07:12,560 --> 00:07:18,000
If an error did occur so if error is trophy we know we have an error.

96
00:07:18,000 --> 00:07:26,620
So in this case I just want to lock the error and otherwise I'll just log wrote file.

97
00:07:26,620 --> 00:07:31,620
I'll return here so that we don't locked is in case you do have an error.

98
00:07:31,680 --> 00:07:36,290
Now with that we have some valid javascript code which will run in the node environment and if we now

99
00:07:36,290 --> 00:07:41,830
call node app chase again you'll see road fall here and you'll see the user data dot text file appear

100
00:07:41,830 --> 00:07:42,400
here.

101
00:07:42,490 --> 00:07:44,770
And if we look into that file we see name colon.

102
00:07:45,110 --> 00:07:48,310
And then well the value we stored in user name.

103
00:07:48,320 --> 00:07:54,230
So this is all the no notorious code using one of the API is which is only available in the note J S

104
00:07:54,230 --> 00:07:57,470
environment and not in the browser environment.

105
00:07:57,470 --> 00:08:03,530
Other than that our D special API is its regular javascript code and therefore everything you know about

106
00:08:03,530 --> 00:08:08,750
JavaScript also applies to no trace code because it is JavaScript.

107
00:08:08,780 --> 00:08:14,390
The only exception really is which API eyes you're able he was all the browser specific API is like

108
00:08:14,390 --> 00:08:16,220
the dorm and so on are not available here.

109
00:08:16,460 --> 00:08:18,160
Instead you have new API as.
