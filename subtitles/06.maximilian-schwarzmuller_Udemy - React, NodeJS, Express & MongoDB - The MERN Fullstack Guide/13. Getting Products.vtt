WEBVTT
1
00:00:02.150 --> 00:00:07.730
As we saw creating products with the help of Mongoose works fine now let's not also make sure to be

2
00:00:07.730 --> 00:00:11.420
able to get the products stored in our database.

3
00:00:11.420 --> 00:00:17.030
This means we follow again these same CoreLogic we had when we worked with De Mongo DB driver so we

4
00:00:17.030 --> 00:00:27.080
now create another constant call it again get products again and asynchronous task but request response

5
00:00:27.230 --> 00:00:35.700
and next interests arrow function we pass in another javascript object and then this javascript object

6
00:00:35.700 --> 00:00:42.660
we again need a constant because we will use this constant as part of our response is I want to get

7
00:00:42.660 --> 00:00:48.940
back the documents stored in the database sold as constant could be called products here.

8
00:00:49.050 --> 00:00:55.140
Now getting products is different than adding them before it made sense to instantiate the product model

9
00:00:55.170 --> 00:00:58.130
and call the safe method and you created object.

10
00:00:58.350 --> 00:01:00.780
But now we have no created object right.

11
00:01:00.810 --> 00:01:03.900
We want to get products stored in our products collection instead.

12
00:01:03.930 --> 00:01:09.650
Keep in mind that all of those products are therefore created based on instances of the product model.

13
00:01:10.110 --> 00:01:15.510
So what we did in the create product function since that's the case Mongoose gives us an easy way of

14
00:01:15.510 --> 00:01:21.480
finding documents created based on this model we can use some static methods on the model constructor

15
00:01:21.480 --> 00:01:22.800
function itself.

16
00:01:22.920 --> 00:01:25.010
In our case the find method is what we need.

17
00:01:25.320 --> 00:01:28.950
And regarding this fine method there are some things to keep in mind.

18
00:01:28.980 --> 00:01:35.490
The first thing is as you can see it your find is a so-called static method used directly on our constructor

19
00:01:35.490 --> 00:01:35.880
function.

20
00:01:35.880 --> 00:01:41.270
Therefore we also used to find already in our Mongo D.B. logic here.

21
00:01:41.310 --> 00:01:47.880
We've got products here we used find and as I told you'll find returns a so-called cursor which then

22
00:01:47.880 --> 00:01:53.190
allows us to iterate for the different documents stored in the database and we could turn it into an

23
00:01:53.190 --> 00:01:55.560
array with two Erin effort here.

24
00:01:55.560 --> 00:02:01.110
Now do you Mongoose find method this is a specific find method related to Mongoose returns on error

25
00:02:01.140 --> 00:02:02.070
by default.

26
00:02:02.070 --> 00:02:04.440
So there is no need to convert this into an error.

27
00:02:04.500 --> 00:02:10.920
Well as we have an error already we could also get a cursor here if you want to by adding because a

28
00:02:10.920 --> 00:02:17.280
method with this you would be able to turn this error back into a cursor as we had it in demography

29
00:02:17.370 --> 00:02:18.910
be logic.

30
00:02:19.110 --> 00:02:25.290
The last important thing about find is that here would say if you remember we had a promise or safe

31
00:02:25.320 --> 00:02:26.660
return to promise here.

32
00:02:26.730 --> 00:02:33.540
This is not the case for find this Mongoose specific find does not return a real promise but kind of

33
00:02:33.540 --> 00:02:34.200
a promise.

34
00:02:34.200 --> 00:02:39.770
What this means is that you can still use async await your but in the end it's not our real promise.

35
00:02:39.930 --> 00:02:44.100
If you want to turn us into a real promise you can add the exit method here.

36
00:02:44.100 --> 00:02:49.190
This will turn it into a real promise and talking about promises or asynchronous tasks.

37
00:02:49.260 --> 00:02:51.540
We should also add a wage right here.

38
00:02:51.990 --> 00:02:53.180
So this is it already.

39
00:02:53.190 --> 00:02:56.460
Again very lean code I would say.

40
00:02:56.460 --> 00:02:58.710
The only thing that's missing now is our response.

41
00:02:58.710 --> 00:03:06.480
I said that already for this we will simply return our products stored in our database.

42
00:03:06.480 --> 00:03:08.850
We almost done now the export is missing.

43
00:03:08.850 --> 00:03:10.080
So name it.

44
00:03:10.080 --> 00:03:18.240
Get products and safeties in a mongoose jazz file and now comment back in our get products code in the

45
00:03:18.330 --> 00:03:19.800
app J.S. file.

46
00:03:20.250 --> 00:03:30.290
So if we go back to postmen now and create and new get requests here and send it we get back our product

47
00:03:30.800 --> 00:03:33.980
and important we find we get back on our product.

48
00:03:33.980 --> 00:03:41.660
So if we would add our banana once again one that ninety nine create this banana quickly and now again

49
00:03:41.810 --> 00:03:43.500
send or get request.

50
00:03:43.610 --> 00:03:50.530
You see we get both of these documents that we stored in our database and that's actually almost the

51
00:03:50.530 --> 00:03:51.700
end of this refresher.

52
00:03:51.700 --> 00:03:58.360
With that you saw the core idea behind monkey B and also why Mongoose makes our lives a lot easier and

53
00:03:58.360 --> 00:04:02.790
allows us to really focus onto the core business logic of our app.

54
00:04:02.800 --> 00:04:09.410
There is one thing we didn't talk about so far Dell and this is this Aidid property right here.

55
00:04:09.420 --> 00:04:10.320
What's this actually.
