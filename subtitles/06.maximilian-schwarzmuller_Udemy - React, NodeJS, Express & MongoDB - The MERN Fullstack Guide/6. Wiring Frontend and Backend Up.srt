1
00:00:02,600 --> 00:00:07,490
So back to the front and they are we pick a file and then the off page.

2
00:00:07,490 --> 00:00:10,420
It's part of our foreign data as we confirmed.

3
00:00:10,430 --> 00:00:15,370
Now we need to attach to the outgoing request and now we need to do something interesting here.

4
00:00:15,380 --> 00:00:18,920
We need to send different type of data thus far.

5
00:00:18,920 --> 00:00:25,400
We always send Jason data now sending Jason data still is correct if we're logging in because then we

6
00:00:25,400 --> 00:00:32,330
only submit text data email and password and important when I say text data I mean all data which in

7
00:00:32,330 --> 00:00:37,400
the end could write like this in javascript code so including arrays and objects.

8
00:00:37,400 --> 00:00:39,300
Anything we can read as a human.

9
00:00:39,590 --> 00:00:43,660
Now for images that's different images are binary data.

10
00:00:43,760 --> 00:00:46,430
We can't write an image like this year.

11
00:00:46,430 --> 00:00:47,240
Right.

12
00:00:47,270 --> 00:00:51,410
So therefore we can't use Jason as a format.

13
00:00:51,410 --> 00:00:57,410
Instead we wanted was a better data format and that would be form data a format which is already built

14
00:00:57,440 --> 00:00:59,390
into the browser and into javascript.

15
00:00:59,390 --> 00:01:03,620
Thankfully we can create new form data like this.

16
00:01:03,620 --> 00:01:05,060
It's a browser API.

17
00:01:05,090 --> 00:01:10,730
So it's a way lable just like this we don't need to install any third party package for this and we

18
00:01:10,730 --> 00:01:13,550
can store it as form data in a constant.

19
00:01:13,580 --> 00:01:19,660
Now to does form data object we can append new data and the cool thing is on form data.

20
00:01:19,670 --> 00:01:25,490
You can add both normal text data so things like to email the name or the password but you can also

21
00:01:25,490 --> 00:01:28,280
add binary data so files.

22
00:01:28,370 --> 00:01:36,110
So here I will append email you first as a first argument need to specify an identifier then as a second

23
00:01:36,110 --> 00:01:38,000
argument the value for this identifier.

24
00:01:38,000 --> 00:01:45,800
So in this case of course form state inputs email values what we have and Jason down there as well.

25
00:01:45,800 --> 00:01:52,510
Now we can replicate this two times to do the same for the name and of course refer to foreign state

26
00:01:52,540 --> 00:02:01,280
inputs named order value and then hear the password and refer to formatted inputs password dot value.

27
00:02:01,400 --> 00:02:03,870
This is the data we submitted before as well.

28
00:02:03,890 --> 00:02:11,180
So for this we wouldn't need foreign data but now we can add or append to be precise our image and this

29
00:02:11,180 --> 00:02:17,960
should have a key of image because on the back end if you remember I'm looking for this image key here

30
00:02:17,960 --> 00:02:25,040
with this line I'm looking for a request body Key Named image which includes my image and we set up

31
00:02:25,040 --> 00:02:31,760
this request body key with this line in the end because we'll append form data as our request body in

32
00:02:31,760 --> 00:02:33,180
just a second.

33
00:02:33,230 --> 00:02:39,230
So this has to be image here but other than dads of course form this data inputs image not value because

34
00:02:39,230 --> 00:02:47,640
we are managing this image file in our regular form state so now we can find you at our request instead

35
00:02:47,640 --> 00:02:49,920
of sending Jason stringing fi data.

36
00:02:49,950 --> 00:02:55,560
So instead of sending Chase and data here we just add our form data and the cool thing about form data

37
00:02:55,650 --> 00:03:02,760
is that the fetch API which we use under the hood and send request automatically adds the right headers

38
00:03:02,850 --> 00:03:05,620
so we don't need to set headers manually anymore.

39
00:03:05,640 --> 00:03:11,250
Instead it should just work like this and this should send the request with form data which includes

40
00:03:11,340 --> 00:03:14,940
all our old data but now also our image

41
00:03:17,680 --> 00:03:19,250
now back on the back end.

42
00:03:19,480 --> 00:03:25,630
Our controller our users controller and they are create user might not fully work yet.

43
00:03:25,630 --> 00:03:28,330
We'll see if this extra action here still works.

44
00:03:28,330 --> 00:03:33,790
Now that we're not sending Jason data anymore we're also not using the file here by the way we're storing

45
00:03:33,790 --> 00:03:34,600
it on disk.

46
00:03:34,660 --> 00:03:39,390
But then here we're not storing a pointer added in the database or anything like that.

47
00:03:39,430 --> 00:03:40,860
So I'll come back to this as well.

48
00:03:40,870 --> 00:03:47,020
But for the moment let's just save this and see if does upload process in general works safe to front

49
00:03:47,020 --> 00:03:54,850
end as well and then go back to the react app switch to sign up and let's try creating a new user pick

50
00:03:54,850 --> 00:04:01,600
an image and of course also pick you are L.

51
00:04:01,950 --> 00:04:05,560
For now it does can all be a used one and click sign up.

52
00:04:05,610 --> 00:04:13,440
Now we get user exists already but if we go to the back end we also see that an uploads images we should

53
00:04:13,440 --> 00:04:19,640
have a new file and this is the image which just was uploaded so the upload works.

54
00:04:19,770 --> 00:04:26,970
You'll also see of course that this means that despite our validation failing the file was saved.

55
00:04:26,970 --> 00:04:31,950
And the reason for that is that when the validation fails that of course means that we in the end throw

56
00:04:31,950 --> 00:04:34,740
an error here in the user's controller here.

57
00:04:34,800 --> 00:04:40,260
Here we're checking whether we have validation errors now by the time we reached this code.

58
00:04:40,260 --> 00:04:42,760
Of course all our Middleware is executed.

59
00:04:42,870 --> 00:04:45,470
So to file indeed was stored.

60
00:04:45,510 --> 00:04:49,620
So if you want to undo that storage we'll have to roll it back manually.

61
00:04:49,770 --> 00:04:55,560
And in general in a controller we're not doing anything with the file that will be the next step.

62
00:04:55,650 --> 00:05:01,320
But what we can see here already is that the general upload and using foreign data works.

63
00:05:01,320 --> 00:05:07,290
Now let's just make sure that we also do something with the file here in sign up.
