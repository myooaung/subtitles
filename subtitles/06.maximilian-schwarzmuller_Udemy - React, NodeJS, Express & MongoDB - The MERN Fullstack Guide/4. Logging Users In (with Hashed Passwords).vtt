WEBVTT
1
00:00:02.430 --> 00:00:06.480
So We're hashing the password now before we dive into the token creation.

2
00:00:06.480 --> 00:00:12.300
Let's go to the log and function and check how we now actually with the password being a hash instead

3
00:00:12.300 --> 00:00:17.610
of plain text can compare the password to users sends us which of course in the end on the server is

4
00:00:17.610 --> 00:00:23.120
plain text to the password in the database which is not plain text.

5
00:00:23.130 --> 00:00:29.190
Now for this we can again use to be tripped library because they're the ideas that the big trip library

6
00:00:29.190 --> 00:00:32.190
knows how it created the hashed password.

7
00:00:32.340 --> 00:00:39.390
If we provided a new password a plain text password it can find out if that password could have been

8
00:00:39.390 --> 00:00:42.920
used to create the hash that's stored in the database.

9
00:00:42.990 --> 00:00:49.020
So we will in the end not recreate the hash but we will check if the hash we have for the password in

10
00:00:49.020 --> 00:00:52.280
plain text that is provided makes sense.

11
00:00:52.320 --> 00:01:00.150
So therefore in the log and function we will still check if we maybe don't have this user.

12
00:01:00.150 --> 00:01:04.160
So I will remove that second check here and just check for the user existence.

13
00:01:04.280 --> 00:01:09.390
If we don't we already return an error because that means we couldn't find a user for the provided email

14
00:01:09.390 --> 00:01:10.420
address.

15
00:01:10.440 --> 00:01:14.700
If we do find a user though then we can check the password.

16
00:01:14.850 --> 00:01:15.270
Here it is.

17
00:01:15.270 --> 00:01:21.840
I will add a new variable is valid password and by default that is too false maybe.

18
00:01:21.840 --> 00:01:28.020
And then here I said is valid password equal to a weight be tripped.

19
00:01:28.230 --> 00:01:34.770
Compare compare all the returns a promise and compare now takes the plain text password which here is

20
00:01:34.770 --> 00:01:39.220
in the password constant we're extracting this from the incoming request.

21
00:01:39.450 --> 00:01:44.310
So we compare compared to plain text password to the hashed password in the database.

22
00:01:44.310 --> 00:01:47.000
So to existing user dot password.

23
00:01:47.040 --> 00:01:53.160
So this is now not the plaintext password but the hash we compare debt and this returns a promise which

24
00:01:53.160 --> 00:01:57.300
then in the end yields a boolean which is stored and is valid password.

25
00:01:57.300 --> 00:01:58.570
Now as always.

26
00:01:58.740 --> 00:02:02.850
And that's why I split this into a variable declaration and then usage.

27
00:02:02.850 --> 00:02:08.550
As always you want to wrap this with try catch to catch any potential errors.

28
00:02:08.730 --> 00:02:12.870
Here we can just say New Age to BP.

29
00:02:13.150 --> 00:02:15.940
Error could not log you in.

30
00:02:16.170 --> 00:02:22.050
Please check your credentials and try again.

31
00:02:22.050 --> 00:02:27.680
However this is a serious error this error will not be thrown if we have invalid credentials does it's

32
00:02:27.690 --> 00:02:31.740
just an error if something went wrong during the comparison.

33
00:02:31.740 --> 00:02:36.720
Instead we will always get back a boolean even if the comparison fails even if we can't confirm the

34
00:02:36.720 --> 00:02:37.380
password.

35
00:02:37.380 --> 00:02:38.640
We don't get an error.

36
00:02:38.640 --> 00:02:41.850
Instead we just get false as a return value here.

37
00:02:41.910 --> 00:02:43.670
So therefore there often is a next check.

38
00:02:43.680 --> 00:02:51.910
I will check if is valid password is false with an exclamation mark at the beginning because if it is

39
00:02:51.910 --> 00:02:58.750
then we can again return our invalid credentials error because here we know that the password is not

40
00:02:58.750 --> 00:02:59.650
correct.

41
00:02:59.770 --> 00:03:05.800
If you make it past as a check as well we know the e-mail address exists and the password is correct.

42
00:03:05.800 --> 00:03:07.960
So then we can generate the token.
