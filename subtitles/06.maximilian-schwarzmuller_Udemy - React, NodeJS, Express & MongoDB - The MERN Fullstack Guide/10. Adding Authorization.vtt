WEBVTT
1
00:00:02.370 --> 00:00:07.950
So let's improve our application a little bit and for that I will start and Hmong would be actually.

2
00:00:07.950 --> 00:00:14.430
And I just wanna make sure that I delete my user which I created before we hashed the password and which

3
00:00:14.430 --> 00:00:18.870
day off was still has a plain text password stored this user here.

4
00:00:19.050 --> 00:00:21.720
I will just delete it to have a cleaner database.

5
00:00:21.720 --> 00:00:26.710
The average user as you can see has a hash password stored here it is.

6
00:00:26.730 --> 00:00:30.180
So that's just a tiny fix however with that fix.

7
00:00:30.180 --> 00:00:34.590
I will log in with that remaining user I have and create a new place again.

8
00:00:34.650 --> 00:00:42.450
So the good old place we already know Marine plots in motion which is still a very nice place at least

9
00:00:42.450 --> 00:00:47.060
for tourists.

10
00:00:47.080 --> 00:00:49.620
The address is Marine plus one for me here.

11
00:00:49.660 --> 00:00:52.300
And I will reuse that image I used before.

12
00:00:52.300 --> 00:00:55.130
Click Add place and it will of course work.

13
00:00:55.150 --> 00:00:59.940
Now we can also added and delete does as you learn as you saw before.

14
00:01:00.190 --> 00:01:05.500
And that's all nice but anyone can do that here in our app.

15
00:01:05.590 --> 00:01:09.040
Only we see these buttons if we would log in with a different user.

16
00:01:09.070 --> 00:01:13.660
They would be gone because on the front that we have to say check when we render these buttons where

17
00:01:13.660 --> 00:01:21.160
we check whether it be locked in user I.D. equals the creator I.D. of our places we have no such check

18
00:01:21.190 --> 00:01:29.960
on the back end though they're in places controller when we delete a place I find a place I populate

19
00:01:29.960 --> 00:01:30.840
its creator

20
00:01:33.650 --> 00:01:37.600
and then I just go ahead and I try to delete it.

21
00:01:37.640 --> 00:01:44.750
Now this might fail because I'm trying to also remove that place from the array of places mapped to

22
00:01:44.750 --> 00:01:45.770
its creator.

23
00:01:45.890 --> 00:01:47.330
But this is not guaranteed.

24
00:01:47.330 --> 00:01:49.490
Most likely this will succeed.

25
00:01:49.490 --> 00:01:56.060
And for updating here update place we're also not checking whether that place really belongs to the

26
00:01:56.060 --> 00:01:57.560
user who sent the request.

27
00:01:57.560 --> 00:02:01.280
We're just finding the place for editing it and we're saving it back.

28
00:02:01.280 --> 00:02:07.430
So we have no checks on the back end to ensure that only the user who created a place is able to change

29
00:02:07.430 --> 00:02:07.910
it.

30
00:02:07.910 --> 00:02:15.440
I want to add such functionality though and just to again highlight the problem if I go to Atlas to

31
00:02:15.440 --> 00:02:21.410
my places and pick the idea of a place which is stored here the place had just created and I didn't

32
00:02:21.410 --> 00:02:29.630
go to postmen and send a patch request to this place and there I need to add the authorization header

33
00:02:29.630 --> 00:02:33.880
here as well and set this to bearer and then a token.

34
00:02:33.950 --> 00:02:37.640
And now I need a token of a user who did not create that place.

35
00:02:37.760 --> 00:02:47.270
So for that back on the front end I will log out and create a brand new user manual who surprisingly

36
00:02:47.330 --> 00:02:52.460
looks like me because I only have that image here and now they are all of course use a different email

37
00:02:52.460 --> 00:02:57.650
address create that user and now I have manual as well and manual did not create my place.

38
00:02:57.650 --> 00:03:05.840
So here in the app he doesn't see the buttons but of course I can use manual now to still edit the place

39
00:03:05.840 --> 00:03:06.280
here.

40
00:03:06.410 --> 00:03:12.950
For that I will just log manual in here with postman so sent my test that tested comment the right password

41
00:03:13.280 --> 00:03:15.160
data to the log and root.

42
00:03:15.290 --> 00:03:20.600
I get back a valid token because this log in of course succeeded and it can use this token now here

43
00:03:20.600 --> 00:03:27.530
on the patch request as my token add here to bearer and now send the request to that place I created

44
00:03:27.560 --> 00:03:28.690
on the average user.

45
00:03:28.730 --> 00:03:32.720
So not on manual but on Macs to change it.

46
00:03:32.720 --> 00:03:37.700
Marine plots and add multiple exclamation marks.

47
00:03:37.830 --> 00:03:44.430
A great place if I do that and I hit send this succeeds it added that this and therefore on the app

48
00:03:44.460 --> 00:03:47.400
when I reload here we see these changes.

49
00:03:47.610 --> 00:03:50.010
Now that's exactly what I don't want.

50
00:03:50.040 --> 00:03:52.330
So let's ensure this won't work anymore.

51
00:03:52.440 --> 00:03:56.730
And for that on the back end let's add some extra security.

52
00:03:56.750 --> 00:04:00.880
Let's start with updating here an update place.

53
00:04:01.050 --> 00:04:06.780
The goal is to ensure that we only continue if the user who's sending the request is the user who created

54
00:04:07.050 --> 00:04:08.160
the place.

55
00:04:08.220 --> 00:04:10.530
Now the good thing isn't a check of middleware.

56
00:04:10.530 --> 00:04:16.290
We are extracting user data and I'm storing the user I.D. here which is part of the token so that gives

57
00:04:16.290 --> 00:04:19.830
us to user I.D. of the user who sent the request.

58
00:04:19.830 --> 00:04:24.700
And this also can't be faked or anything by the client because it's part of the token.

59
00:04:24.780 --> 00:04:29.520
And if you would change data in the token you would generate a new token which wouldn't be verifiable

60
00:04:29.530 --> 00:04:31.190
anymore with this private key.

61
00:04:31.230 --> 00:04:34.560
So it's 100 percent on faked data.

62
00:04:34.740 --> 00:04:40.590
So we have that user I.D. stored in the user data object on our request and therefore here an update

63
00:04:40.590 --> 00:04:46.680
place once we made it through the general validation we're looking for a place here and a place has

64
00:04:46.680 --> 00:04:48.480
a creator field of course.

65
00:04:48.600 --> 00:04:51.780
This one and this will be the idea of a user.

66
00:04:51.780 --> 00:05:03.500
So then here we can just check if placed dot creator is not equal to request user data dot user I.D..

67
00:05:03.720 --> 00:05:10.770
If that's the case we know they're not equal and therefore we know well this user did not create this

68
00:05:10.770 --> 00:05:17.960
place and in that case I want to return an error of course.

69
00:05:18.180 --> 00:05:26.960
You are not allowed to edit this place and this No actually is a 400 and one error because four hundred

70
00:05:26.970 --> 00:05:31.080
and one which I used before actually is a authorization error.

71
00:05:31.100 --> 00:05:37.590
I'll switch the other error codes in a second and we send back this error if we determine that this

72
00:05:37.590 --> 00:05:42.690
user is not allowed to edit this place and only if we make it past his check.

73
00:05:42.690 --> 00:05:51.730
So if the place was created by the right user we allow this change so now is saved as back end and I

74
00:05:51.730 --> 00:05:57.370
tried as same update request again with the same token which still is valid here because it has been

75
00:05:57.370 --> 00:05:59.170
less than an hour that I got it.

76
00:06:00.220 --> 00:06:06.540
I get this error here not authorized now on the front end.

77
00:06:06.560 --> 00:06:12.860
We can check the opposite if I log in with the user who did create that place who should be able to

78
00:06:12.860 --> 00:06:13.850
edit it.

79
00:06:13.850 --> 00:06:20.720
I see that button but now if I remove all the exclamation marks I also get this error.

80
00:06:20.720 --> 00:06:23.420
So why is this not working does of course should be working right.

81
00:06:23.420 --> 00:06:26.540
This is the correct user does this to write user.

82
00:06:26.540 --> 00:06:32.450
Now this is not working because of the exact check we're running here what's instead of creator.

83
00:06:32.600 --> 00:06:36.100
It's not a string that will equal this user I.D. here.

84
00:06:36.100 --> 00:06:42.820
Instead it's an object of type Mongoose object Aidid is special I.D. type Mongoose knows.

85
00:06:43.070 --> 00:06:47.720
So we have to convert it to a string by simply calling to string here which is a method that will be

86
00:06:47.720 --> 00:06:52.050
available that will convert us to a string and then this comparison here should succeed.

87
00:06:52.430 --> 00:06:55.020
So if we change this on the back end and we reload.

88
00:06:55.160 --> 00:06:58.550
Now if we remove the exclamation marks here and I click Update place.

89
00:06:58.550 --> 00:06:59.900
This succeeds.

90
00:06:59.960 --> 00:07:06.260
So now the user who created this is able to edit it whilst the user who did not create it here if we

91
00:07:06.260 --> 00:07:09.680
tested again and postman still gets narrower.

92
00:07:09.800 --> 00:07:13.090
So this is now added authorization.

93
00:07:13.190 --> 00:07:15.770
Now feel free to also add this on your own to delete.

94
00:07:15.770 --> 00:07:21.140
I'll do it in the next lecture and their offer will also make sure that we use different HBP status

95
00:07:21.140 --> 00:07:28.100
codes which is just a minor thing but still to reflect a right kind of off indication error we're having

96
00:07:28.280 --> 00:07:33.320
where we're really not authenticated or maybe we are authenticated but we're not authorized.
