1
00:00:02,290 --> 00:00:06,480
So let's continue with our efforts to build a image upload component.

2
00:00:06,550 --> 00:00:10,660
We see that this console log fired when we picked a file.

3
00:00:10,660 --> 00:00:16,300
Now my idea is to manage the file here instead of the image upload component to create a preview which

4
00:00:16,300 --> 00:00:17,680
we have in there.

5
00:00:17,860 --> 00:00:24,430
But to then all of course pass it to these surrounding forum which in needs to file to then eventually

6
00:00:24,480 --> 00:00:26,460
upload it to a back end.

7
00:00:26,920 --> 00:00:32,680
So whenever we need to manage something which also should update the Dom it's of course time for a use

8
00:00:32,770 --> 00:00:33,610
state.

9
00:00:33,610 --> 00:00:38,650
So here is an image upload we definitely need to use state because we will have a file which you want

10
00:00:38,650 --> 00:00:44,530
to manage with file and set file which initially is undefined but which we will of course set at some

11
00:00:44,530 --> 00:00:45,790
point.

12
00:00:45,790 --> 00:00:52,790
I will also generate the numbers state the preview you are L and set per review you are El which the

13
00:00:52,790 --> 00:00:58,330
end well is d you are ELA off this image preview which we want to generate so that we can show a preview

14
00:00:58,330 --> 00:01:06,500
to the user and last but not least of all the ad is valid and set is valid here and use this and initially

15
00:01:06,500 --> 00:01:11,430
let's say it's not valid here by initializing this state to false.

16
00:01:11,480 --> 00:01:17,690
So free states which are managing here and now with that in the picked handler it's important to know

17
00:01:17,900 --> 00:01:23,810
that in the event target which are locked which is does input element you will have a files property

18
00:01:23,810 --> 00:01:27,150
that holds the files to user selected.

19
00:01:27,370 --> 00:01:33,820
This is default javascript you get dead files property on the event target if that event target is a

20
00:01:33,820 --> 00:01:36,580
native file picker which this one here is.

21
00:01:36,790 --> 00:01:41,830
So we will have the files here and therefore we can check if this exists if it's not undefined.

22
00:01:41,920 --> 00:01:47,650
So to ensure that this does not somehow get fired without the user picking a file.

23
00:01:47,660 --> 00:01:52,120
And I also want to ensure that files length

24
00:01:54,860 --> 00:01:56,690
is not equal to zero.

25
00:01:56,690 --> 00:02:02,130
And of course this should be an end a load logical end.

26
00:02:02,130 --> 00:02:08,520
So now we're ensuring that we have files and that if we have files we have more than one file actually

27
00:02:08,520 --> 00:02:11,310
we could all check that it's exactly one file.

28
00:02:11,310 --> 00:02:16,140
There shouldn't really be a wave to pick more than one year in the Zep but if you would manage to do

29
00:02:16,140 --> 00:02:21,960
so I certainly don't want to handle it because we only supports the upload of one file at a time here.

30
00:02:21,960 --> 00:02:27,270
So we check whether we do have files and if it's exactly one and if that is the case we can continue

31
00:02:27,270 --> 00:02:35,160
here because if that is the case I want to extract that picked file from event target files and get

32
00:02:35,160 --> 00:02:42,300
the first and only one and then call set file and set it to my well picked file to the extract that

33
00:02:42,300 --> 00:02:43,500
file.

34
00:02:43,740 --> 00:02:49,590
I will also set is valid to true thereafter because we have a file and then we can return to not execute

35
00:02:49,620 --> 00:02:56,200
any other code otherwise if we don't make it into this if statement we know we picked something wrong.

36
00:02:56,220 --> 00:03:05,430
Well in this case I want to set is valid to false here and actually we can remove the return statement

37
00:03:05,430 --> 00:03:11,340
here and instead do this in a Alice block because then after t of statement no matter into which branch

38
00:03:11,340 --> 00:03:15,240
we made it we can call props on input here.

39
00:03:15,240 --> 00:03:21,120
So I expect to get an on input prop here on the image upload component which should point at a function

40
00:03:21,120 --> 00:03:28,620
in to which we forward the idea of this input which we all received through prompts and this picked

41
00:03:28,620 --> 00:03:31,080
file if it exists.

42
00:03:31,080 --> 00:03:33,580
Now it does not always exist of course.

43
00:03:33,600 --> 00:03:41,390
So actually let's set picked file here to be a variable and just assign a new value if we do have a

44
00:03:41,390 --> 00:03:45,980
file and otherwise it will be still undefined which is also fine here.

45
00:03:45,980 --> 00:03:49,370
And of course all the forward is valid.

46
00:03:49,370 --> 00:03:56,430
Now here it's just important to understand that when we call set as valid it does not immediately update

47
00:03:56,460 --> 00:03:57,810
this state value.

48
00:03:57,960 --> 00:04:00,520
Instead it schedules this state update.

49
00:04:00,540 --> 00:04:06,750
So when I call on input here and how forward is valid at this point it will still be the old is valid

50
00:04:06,750 --> 00:04:09,030
value so not the new one.

51
00:04:09,030 --> 00:04:10,680
After this update.

52
00:04:10,680 --> 00:04:18,060
So actually here I will add a new variable file is valid which has set equal to the current state of

53
00:04:18,060 --> 00:04:19,020
is valid.

54
00:04:19,110 --> 00:04:20,550
And then here a set is valid.

55
00:04:20,550 --> 00:04:23,320
But again this does not update the state immediately.

56
00:04:23,550 --> 00:04:29,610
So in the meantime I will set file as valid to true here manually and set it to false.

57
00:04:29,690 --> 00:04:39,330
Here and then just for word file is valid here at this point so we always basically call the function

58
00:04:39,330 --> 00:04:45,690
we receive on on input and we always pass our picked file but that file might sometimes be undefined

59
00:04:45,690 --> 00:04:50,940
if we didn't pick of a valid file and we will forward the validity information.

60
00:04:50,940 --> 00:04:52,160
That's my idea here.

61
00:04:52,170 --> 00:04:55,070
Now this doesn't help us with the preview though.

62
00:04:55,110 --> 00:05:00,330
Now I want to generate a preview whenever we got a new file so whenever we basically updated our file

63
00:05:00,330 --> 00:05:01,120
state.

64
00:05:01,290 --> 00:05:06,920
Now doing something up on state change that screams for a use of fact.

65
00:05:06,930 --> 00:05:11,640
So here we can add use effect and register a new use fact.

66
00:05:11,640 --> 00:05:19,700
Function this function here should trigger or should execute whenever the file changes so we'll pass

67
00:05:19,700 --> 00:05:23,170
file as a dependency whenever we picked a new file.

68
00:05:23,180 --> 00:05:30,530
I want to run my logic here because in this logic in this function here I want to generate a preview.

69
00:05:30,530 --> 00:05:36,800
So first of all I'll check if file is not on the flight because maybe file changed because it now is

70
00:05:36,980 --> 00:05:39,760
not a file anymore but now undefined.

71
00:05:39,890 --> 00:05:45,530
In this scenario I will return because if we don't have a file here there is no need to continue.

72
00:05:45,560 --> 00:05:50,720
We can't generate a preview USL image preview anyways.

73
00:05:50,960 --> 00:05:57,320
Otherwise if we make it past does a check we know we have a file and now we can generate an image preview

74
00:05:57,320 --> 00:05:59,740
you are El with API.

75
00:05:59,750 --> 00:06:01,330
That's built into the browser.

76
00:06:01,430 --> 00:06:08,030
The file reader so I'll create a new file reader here and store it in a file reader constant.

77
00:06:08,060 --> 00:06:14,480
And again this is baked into the browser and they offer it into browser side JavaScript the file reader

78
00:06:14,600 --> 00:06:21,800
as the name suggests helps us read files helps us parse files and we can use the file reader to convert

79
00:06:22,070 --> 00:06:27,730
a file which is like a binary data into a readable or output able image.

80
00:06:27,740 --> 00:06:34,940
You are l You could say now the file reader has a bit of a clunky API and to work with it we have to

81
00:06:34,940 --> 00:06:39,390
call file reader read as data you are L.

82
00:06:39,500 --> 00:06:41,930
Now that's not too clunky I guess.

83
00:06:42,110 --> 00:06:48,500
This is the anti command to create you are L we can output but the problem is this does not work with

84
00:06:48,500 --> 00:06:49,310
a callback.

85
00:06:49,310 --> 00:06:51,430
This does not give us a promise.

86
00:06:51,470 --> 00:06:56,870
Instead before we call read as data you are L on the file reader.

87
00:06:56,870 --> 00:07:05,090
We have to register G on load function like this and execute this function does anonymous function whenever

88
00:07:05,090 --> 00:07:13,800
the file reader loads a new file or is done parsing of file we could say so dysfunctional executed.

89
00:07:13,880 --> 00:07:20,570
Once this reading of the file here is done and then in here I want to call set preview you are L but

90
00:07:20,570 --> 00:07:24,590
then here we also don't get the past file as an argument.

91
00:07:24,590 --> 00:07:28,260
Instead we have to extract it from file reader daughter assault.

92
00:07:28,280 --> 00:07:31,670
Yeah that's just how does API works with that.

93
00:07:31,670 --> 00:07:39,230
However we are setting a preview you are L and with that we can use this preview you are L so down here

94
00:07:39,230 --> 00:07:45,200
and J is X on the image I now want to output the preview you are L here.

95
00:07:45,200 --> 00:07:47,140
However only if we have one.

96
00:07:47,150 --> 00:07:53,630
So let's check if we have a preview you are L and only output the image if that's the case if that's

97
00:07:53,630 --> 00:08:00,440
not the case if we don't have a preview you are L I will output a paragraph where I say please pick

98
00:08:01,130 --> 00:08:08,190
an image and in addition I also want to output an error or a text which can be provided from outside.

99
00:08:08,190 --> 00:08:13,980
So from the component that uses the image upload component in case we picked something invalid which

100
00:08:13,980 --> 00:08:17,250
should be pretty hard but still in this case.

101
00:08:17,310 --> 00:08:21,160
So if this is not valid is valid is false.

102
00:08:21,390 --> 00:08:27,490
I want to output prop stored error text here with this.

103
00:08:27,490 --> 00:08:37,080
If we now safe that and we switch to sign up here I do have my image picker and now I can pick this

104
00:08:37,080 --> 00:08:45,130
image and here's my preview it all the crash though props on input is not a function and that makes

105
00:08:45,130 --> 00:08:48,500
a lot of sense because remember dead ends picked handler.

106
00:08:48,520 --> 00:08:55,810
I do call props on input so I referred to the on input prop and I expect to have a function in there

107
00:08:55,870 --> 00:09:03,550
which I can call but at the moment when we use image upload and you off component here I'm not setting

108
00:09:03,550 --> 00:09:10,180
this on input prop so we need to do this and they are we now need to point at a function and you might

109
00:09:10,180 --> 00:09:14,530
think that we now need to create a new function but thankfully that's not the case.

110
00:09:14,800 --> 00:09:21,940
If we have a look at the on input arguments were passing here we see it's the I.D. then the file that

111
00:09:21,940 --> 00:09:25,930
was picked and then the validity of this file.

112
00:09:25,930 --> 00:09:32,920
Now that is pretty similar to what we have in the input in our input component for regular text input.

113
00:09:32,920 --> 00:09:40,000
We also in the end call on input at some point and we forward the idea the value and whether that value

114
00:09:40,000 --> 00:09:41,080
is valid.

115
00:09:41,110 --> 00:09:44,690
No that's exactly the same as we have here.

116
00:09:44,830 --> 00:09:50,590
Here I have to I.D. the value because the picture file is just the value of this control if you will

117
00:09:51,040 --> 00:09:52,850
and then the validity.

118
00:09:52,870 --> 00:09:59,560
So therefore in off we can just bind this to input handler.

119
00:09:59,620 --> 00:10:03,130
So on input takes the input handler function.

120
00:10:03,130 --> 00:10:08,300
And in case you don't remember the input handler function is coming from our custom form.

121
00:10:08,290 --> 00:10:09,490
Look here it is.

122
00:10:10,060 --> 00:10:16,720
So we can manage our file our picked image with our form hook as well because the form look our custom

123
00:10:16,720 --> 00:10:20,770
form look does really not care about the data we're managing with it.

124
00:10:20,890 --> 00:10:23,070
It doesn't have to be text data.

125
00:10:23,170 --> 00:10:24,700
It can be a file as well.

126
00:10:25,330 --> 00:10:31,480
We should just make sure that whenever we switch modes if we switch from sign up to log in we add a

127
00:10:31,480 --> 00:10:37,420
image key and set this to undefined because when we switch from log into sign up we need to add a image

128
00:10:37,420 --> 00:10:44,170
key and set this to an object where the value let's say is null initially not an empty string because

129
00:10:44,170 --> 00:10:45,760
we're not working with strings here.

130
00:10:45,790 --> 00:10:50,690
Later we'll store a file there after all and is valid is set to false.

131
00:10:50,950 --> 00:10:55,410
And now this should be part of our general form validation and of our form data.

132
00:10:56,490 --> 00:11:06,800
Now to confirm this in the off submit handler I will console log form state DOT inputs so that we can

133
00:11:06,800 --> 00:11:09,700
see where our picked file is part of that or not.

134
00:11:11,010 --> 00:11:18,990
And with this if we save all of that switch to site up again and enter a valid name valid email address

135
00:11:18,990 --> 00:11:22,630
and a valid password we see the sign up button still is not enabled.

136
00:11:22,740 --> 00:11:29,430
If I switch back log in it is but in sign up it is not because the image hasn't been picked yet.

137
00:11:29,430 --> 00:11:35,430
Now if I open that picker and close it that's still not enough but if I now pick an image here like

138
00:11:35,430 --> 00:11:41,010
this one you'll see this gets enabled and if a click here of course we get an error because we already

139
00:11:41,010 --> 00:11:42,690
have a user with that email address.

140
00:11:42,690 --> 00:11:46,050
At least I here in my set up already have such an error.

141
00:11:46,050 --> 00:11:55,980
But from our log here in line 70 we see that we have the image and the value is indeed just such a file

142
00:11:56,730 --> 00:12:01,230
and we can submit this file to the back and this will be something we have to work on this will be possible

143
00:12:01,230 --> 00:12:01,770
though.

144
00:12:01,860 --> 00:12:09,510
So picking the image works now before we ensure that we also can pick a image when we create a new place.

145
00:12:09,630 --> 00:12:14,280
Why don't we work on the back end and make sure that there we accept such a file.
