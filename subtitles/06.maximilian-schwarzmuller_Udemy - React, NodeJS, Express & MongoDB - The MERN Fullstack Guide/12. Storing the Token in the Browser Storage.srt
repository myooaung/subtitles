1
00:00:02,290 --> 00:00:05,720
So we get authorization added We got authentication at it.

2
00:00:05,740 --> 00:00:07,530
Our app is really working quite well.

3
00:00:07,540 --> 00:00:15,640
If there wouldn't be one issue when ever I log in and I reload I'm locked out again.

4
00:00:15,640 --> 00:00:18,340
And this is really not that great.

5
00:00:18,340 --> 00:00:21,610
It would be nicer if we could stay authenticated.

6
00:00:21,610 --> 00:00:23,410
So did we reload.

7
00:00:23,410 --> 00:00:28,630
We already are in the authenticated state again at least if our token is still valid it expires after

8
00:00:28,630 --> 00:00:29,200
one hour.

9
00:00:29,200 --> 00:00:31,810
So we'll have to reload again thereafter anyways.

10
00:00:31,990 --> 00:00:37,870
But for that hour if we reload the page we should keep our authentication status.

11
00:00:38,170 --> 00:00:44,560
And that implies one important thing storing it on the front end just in context isn't enough because

12
00:00:44,570 --> 00:00:48,930
where is data stored that you store in your react context.

13
00:00:48,940 --> 00:00:55,350
Well in the end just in memory it's stored in a variable in JavaScript in the end it's stored in memory

14
00:00:55,360 --> 00:01:01,750
and whenever you reload the page in the anti entire react app restarts you could say a page reload is

15
00:01:01,750 --> 00:01:05,930
like your react app restarting or starting it for the first time.

16
00:01:06,100 --> 00:01:12,080
And that in turn means that any memory allocated to your old react app is basically lost.

17
00:01:12,130 --> 00:01:16,050
So the tokens stored in memory is lost when you reload the page.

18
00:01:16,150 --> 00:01:17,680
So to have it survive.

19
00:01:17,680 --> 00:01:21,580
Page reloads we have to store it somewhere else that in memory.

20
00:01:21,580 --> 00:01:26,770
And that is what we'll do now to store the tokens somewhere else in memory in app.

21
00:01:26,770 --> 00:01:33,790
J.S. when we do log in and we set the token day offer I want to store it in a more permanent storage

22
00:01:33,820 --> 00:01:34,990
as well.

23
00:01:34,990 --> 00:01:39,910
And the browser we've got a couple of storage mechanisms we can find them in a browser dev tools here

24
00:01:39,910 --> 00:01:47,200
actually if we go to the application area there you find things like local storage session storage indexed

25
00:01:47,200 --> 00:01:53,080
TB and cookies now indexed TB is a quite complex database which we don't want to use for such simple

26
00:01:53,080 --> 00:01:59,050
data as a token session storage is a bad storage because it's cleared whenever you close the browser

27
00:01:59,470 --> 00:02:06,340
local storage is great because dear you can easily add and remove and manage data from javascript and

28
00:02:06,340 --> 00:02:13,480
it survives browser restarts and page reloads and cookies are also great but not as easy to use from

29
00:02:13,480 --> 00:02:15,490
inside javascript.

30
00:02:15,490 --> 00:02:18,820
So we will use local storage to store the token.

31
00:02:18,820 --> 00:02:21,570
And now here is one important note.

32
00:02:21,850 --> 00:02:27,130
Some people are concerned about the security of local storage because you can easily write to it and

33
00:02:27,130 --> 00:02:31,290
read from it with JavaScript which actually is the advantage you want to use here.

34
00:02:31,290 --> 00:02:38,410
It has easy to use API cookies could be locked down to be not accessible from inside javascript.

35
00:02:38,530 --> 00:02:44,470
And instead we could set them with the help of some server side headers known as adds extra complexity

36
00:02:44,470 --> 00:02:45,610
on the server side.

37
00:02:45,610 --> 00:02:51,790
But the most important problem with that is you have some fake security the problem some people have

38
00:02:51,790 --> 00:02:59,380
of local storage is that because it's easy to access with javascript if people get access to your page

39
00:02:59,410 --> 00:03:05,290
through a cross site scripting attack they can also read and write to your storage and they can steal

40
00:03:05,290 --> 00:03:06,490
the tokens.

41
00:03:06,490 --> 00:03:07,750
Now here's the error.

42
00:03:07,780 --> 00:03:14,350
Many people who have this thought process make it's true if your app if your react application here

43
00:03:14,560 --> 00:03:17,530
is vulnerable to cross site scripting attacks.

44
00:03:17,590 --> 00:03:22,040
People can steal the tokens off your users but here's my point.

45
00:03:22,090 --> 00:03:28,090
If your app is Will honorable to cross site scripting attacks you have different problems anyways because

46
00:03:28,090 --> 00:03:34,480
the attackers can send age to the requests to the back and on your behalf and they could attach any

47
00:03:34,480 --> 00:03:41,020
cookies that the users of your app path any ways so they can still get fake access to your back and

48
00:03:41,260 --> 00:03:44,240
even without stealing the token explicitly.

49
00:03:44,260 --> 00:03:45,280
So in general.

50
00:03:45,280 --> 00:03:50,800
Of course you have to build an app that does not expose cross site scripting attack vulnerabilities

51
00:03:51,100 --> 00:03:58,420
and our app here for example should be pretty secure although because react by default sanitize is anything

52
00:03:58,420 --> 00:04:00,460
you output and you render to the screen.

53
00:04:00,580 --> 00:04:05,740
So all the user generated content we're storing in the database when we output it on the screen with

54
00:04:05,740 --> 00:04:09,390
the help of react then it's sanitized by react.

55
00:04:09,400 --> 00:04:12,990
So we have built a cross site scripting attack protection here.

56
00:04:13,090 --> 00:04:17,220
And unless we do something non reactive we should be pretty safe.

57
00:04:17,240 --> 00:04:18,310
Therefore.

58
00:04:18,370 --> 00:04:24,280
So this shouldn't be a problem for us and therefore we will use local storage to store our token.

59
00:04:24,280 --> 00:04:29,530
That means here when we log in and we get the token we can access local storage like this.

60
00:04:29,530 --> 00:04:32,640
This is a globally available object in JavaScript.

61
00:04:32,650 --> 00:04:40,540
It's a global javascript browser API and we can add a new entry we've set item and here the entry of

62
00:04:40,540 --> 00:04:44,530
want to create is actually called user data.

63
00:04:44,530 --> 00:04:46,880
So not just token but user data.

64
00:04:47,080 --> 00:04:53,440
And in there I will store a string you fight adjacent string you fight object because to local storage

65
00:04:53,530 --> 00:04:58,930
you can only write text or data that can be converted to text like numbers.

66
00:04:58,930 --> 00:05:04,260
Objects cannot be stored but with Jason bring your file of course you can turn the object into text

67
00:05:04,440 --> 00:05:08,470
because Jason in the end is just text which looks like object.

68
00:05:08,550 --> 00:05:12,360
So that is a way of storing an object in local storage.

69
00:05:12,360 --> 00:05:19,590
And here I want to include my user I.D. so that you idea I'm getting on a user I.D. key and that token

70
00:05:19,620 --> 00:05:28,210
I will store both in local storage with this command if I now save this and I do log in here

71
00:05:31,180 --> 00:05:39,810
this succeeds but if I now have a look at my application area you see that deer in local storage you

72
00:05:39,810 --> 00:05:43,740
have that user data entry and that's the value for it and that is Jason data.

73
00:05:43,740 --> 00:05:46,080
It looks like an object but it's really just text.

74
00:05:46,110 --> 00:05:51,690
But with Jason stringy fly and also a number method on that Jason object we can convert it back and

75
00:05:51,690 --> 00:05:54,680
forth to and from JavaScript objects.

76
00:05:54,690 --> 00:05:56,860
So now we get our data stored here.

77
00:05:56,880 --> 00:06:00,570
Now that alone of course thousand logs in automatically when you reload.

78
00:06:00,660 --> 00:06:05,760
But now we can use stats towards data to log the user in when he reloads.

79
00:06:05,760 --> 00:06:07,110
So let's do that as a next step.
