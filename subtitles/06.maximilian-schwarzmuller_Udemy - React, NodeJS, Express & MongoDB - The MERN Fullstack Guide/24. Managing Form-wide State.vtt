WEBVTT
1
00:00:02.390 --> 00:00:07.100
So we got multiple states to manage and as we learned that can be done with use reducer.

2
00:00:07.100 --> 00:00:13.960
It could all be done with used state somehow but with use reducer it's much easier so we'll call use

3
00:00:13.960 --> 00:00:16.710
reducer here in the new place component.

4
00:00:16.780 --> 00:00:21.330
And now we need to set up reduce our function here and I'll name it form reducer.

5
00:00:21.340 --> 00:00:26.320
The name is up to you though and justice before it's a function that receives a state and an action

6
00:00:26.530 --> 00:00:33.170
and then needs to return and you state we can pass form reducer here to user a user initially here.

7
00:00:33.180 --> 00:00:39.060
I also want to have an initial state and dare I want to have two properties in my state so my state

8
00:00:39.060 --> 00:00:44.330
is an object and I want to have a inputs property and I want to have a is valid property.

9
00:00:44.340 --> 00:00:52.650
My idea here is that is valid stories to information whether the overall form is valid and inputs is

10
00:00:52.650 --> 00:00:57.670
a nested object that stores information about the validity of the individual inputs.

11
00:00:57.690 --> 00:01:04.500
So in my case title and here I want to use 2D I.D. I assign to these inputs that will make updating

12
00:01:04.530 --> 00:01:05.600
easier later.

13
00:01:05.610 --> 00:01:13.050
So title and description and title then is an object again where we have let's say the value initially

14
00:01:13.050 --> 00:01:19.940
set to an empty string and then is valid for that individual input initially set to false.

15
00:01:20.160 --> 00:01:31.290
And now I will copy that and add the same year for description and is valid of the overall form initially.

16
00:01:31.290 --> 00:01:32.870
Also is false.

17
00:01:32.870 --> 00:01:38.090
So this is the initial state does this then the state we need to update instead of the form reducer

18
00:01:38.360 --> 00:01:41.480
based on the different actions we might receive.

19
00:01:41.480 --> 00:01:47.690
So again we can switch on the action type to follow that same pattern as before we can specify a default

20
00:01:47.690 --> 00:01:53.360
case here where we just returned the unchanged state and of course I also want to handle a case here

21
00:01:53.660 --> 00:01:58.300
and there I will handle the input change case let's say.

22
00:01:58.310 --> 00:02:05.030
But that's totally up to you how you named it in there of course we will return a new object and you

23
00:02:05.030 --> 00:02:06.230
state object.

24
00:02:06.230 --> 00:02:12.590
And here we need to update a couple of things we need to update the input state which changed a. overall

25
00:02:12.590 --> 00:02:19.510
form validity state so let's run some logic in there and that's the idea why we have road users we can

26
00:02:19.510 --> 00:02:26.320
run more complex logic to derive our required state update I'll add a helper variable form is valid

27
00:02:26.350 --> 00:02:33.370
which initially is true and then I want to go through all the inputs I have in my form here in my former

28
00:02:33.370 --> 00:02:42.820
state and find out if all these inputs are valid so I'll go through all the inputs in state stored inputs.

29
00:02:42.820 --> 00:02:49.150
Remember that our state here has the inputs property so I'll go through all the inputs stored there

30
00:02:49.330 --> 00:02:55.150
with a for in loop because I'm going for an object and then here I check if the input I'm currently

31
00:02:55.150 --> 00:02:58.480
looking at and keep in mind this isn't the anti input idea here right.

32
00:02:58.510 --> 00:03:03.490
So we could named this input ideas because I'm going through the inputs I'm going through title and

33
00:03:03.490 --> 00:03:08.470
description and that is what will be stored here and input ideas I check of dad is equal to let's say

34
00:03:08.560 --> 00:03:10.240
action input ideas.

35
00:03:10.510 --> 00:03:16.180
So I'm effectively looking at the inputs and checking the input I'm currently looking at is that the

36
00:03:16.180 --> 00:03:22.810
input which is getting updated here in this current action if data decays I will take the information

37
00:03:22.810 --> 00:03:29.290
from the dispatched action on whether it is valid or not so I'll then set form is valid equal to form

38
00:03:29.290 --> 00:03:37.270
is valid and action dot is valid so if that input change for the given input is valid ls if I'm looking

39
00:03:37.270 --> 00:03:42.360
at an input in my form state which is not currently getting updated through to currently running action

40
00:03:42.760 --> 00:03:53.670
well then DNA will set form is valid equal to form is valid and state inputs for the input I.D. We're

41
00:03:53.670 --> 00:03:55.950
currently looking at is valid.

42
00:03:55.980 --> 00:04:01.790
So basically I take the stored value the stored validity for this input because it is the input word

43
00:04:01.800 --> 00:04:07.710
not currently updating with does action and does a pro to make sure that I always take the previous

44
00:04:07.710 --> 00:04:13.080
value of form is valid and combine this with the new validity value and if data is false this will be

45
00:04:13.080 --> 00:04:19.200
set to false and false with false or false with true will always yield false true which is my initial

46
00:04:19.200 --> 00:04:24.840
state with false however will yield false whereas true and true will keep true so that ensures that

47
00:04:24.840 --> 00:04:32.910
if we have at least one false validity anywhere the overall foreign validity becomes false and with

48
00:04:32.910 --> 00:04:40.230
that after the for loop we return our new state here and there I want to set I want to copy my existing

49
00:04:40.230 --> 00:04:47.580
state first of all and then set inputs equal to the current input state so I'm copying that as well

50
00:04:47.970 --> 00:04:53.940
but then I want to override the input state 40 input we're updating with this action and this action

51
00:04:53.940 --> 00:05:01.590
has input I d fields that's my expectation so we'll use this dynamic assignment here and change the

52
00:05:02.400 --> 00:05:04.960
key input idea.

53
00:05:04.990 --> 00:05:12.220
So of the input I did past with the action to be a new object where the value is action that value and

54
00:05:12.250 --> 00:05:20.260
is valid is action that is valid so this dynamically updates one of our fields in this inputs as it

55
00:05:20.260 --> 00:05:26.740
should be in his inputs object so for example if we dispatch an action with an I.D. and input idea of

56
00:05:26.740 --> 00:05:34.300
title then we would in the end see title in here and update the title input with a new value add a new

57
00:05:34.300 --> 00:05:41.110
validity and leave the description input untouched well and then I also want to set is valid here so

58
00:05:41.110 --> 00:05:48.790
the overall form validity to form is valid that is my reduce your logic quite complex but it should

59
00:05:48.790 --> 00:05:56.850
ensure that we update the information about the inputs and the overall form validity no justice before.

60
00:05:56.850 --> 00:05:59.280
Use reducer returns values.

61
00:05:59.340 --> 00:06:05.320
So I will use array D structuring to get these values and the first value is my fourth estate.

62
00:06:05.340 --> 00:06:13.310
The second value is a dispatch function just as we had it inside of the input and now in the title input

63
00:06:13.310 --> 00:06:24.510
handler I want to call dispatch and dispatch a new action where I set to type equal to input change.

64
00:06:24.510 --> 00:06:27.000
That's the type I'm looking for in my reducer.

65
00:06:27.180 --> 00:06:34.380
So we'll set this type here and I provide a value here because I try to extract a value from action

66
00:06:34.380 --> 00:06:39.790
here and later also is valid and the input I d here.

67
00:06:39.870 --> 00:06:46.470
So we need to pass these three pieces of information value of course is the value I get here is valid

68
00:06:46.500 --> 00:06:53.130
is well the information I get here as the argument and input I.D. is the idea here.

69
00:06:53.130 --> 00:07:00.480
So now we actually have a flexible reusable input handler so we can just name it Input handler get rid

70
00:07:00.480 --> 00:07:06.240
of the description Input handler and simply bind this Input handler here to both the title input as

71
00:07:06.240 --> 00:07:11.460
well as the description input because we get all the information we need inside of that function anyways

72
00:07:11.730 --> 00:07:14.600
so no need to create multiple functions.

73
00:07:14.610 --> 00:07:21.150
Now here this patch would technically be a dependency and you can add it but react and sure stead this

74
00:07:21.150 --> 00:07:23.290
patch from use reducer never changes.

75
00:07:23.400 --> 00:07:29.550
So you can also admitted and with that we are hopefully managing you overall for invalidity.

76
00:07:30.060 --> 00:07:36.050
So let's go back to our new place component here and end there.

77
00:07:36.120 --> 00:07:42.720
Let's now utilize this for invalidity for example by adding a button at the bottom and for Dad we first

78
00:07:42.720 --> 00:07:56.280
of all need to imported so here all import button from shared components form elements button and add

79
00:07:56.280 --> 00:07:59.520
this button inside of the rendered form.

80
00:07:59.610 --> 00:08:09.900
After all these inputs here maybe set to type to submit and set disabled equal to not form state is

81
00:08:09.900 --> 00:08:10.260
valid.

82
00:08:10.260 --> 00:08:13.070
So when the form is not valid the button should be disabled.

83
00:08:13.200 --> 00:08:18.450
And then on the button I'll have a caption of at place and now if everything works the way it should

84
00:08:18.660 --> 00:08:20.970
this button each should be disabled.

85
00:08:20.970 --> 00:08:24.660
When ever our form is not valid so let's safeties.

86
00:08:24.820 --> 00:08:25.820
Let's have a look.

87
00:08:25.860 --> 00:08:29.790
This reloads we got two inputs and initially the button is disabled.

88
00:08:29.790 --> 00:08:34.590
If I enter something here this is valid but the button is still disabled but tab in here we get our

89
00:08:34.590 --> 00:08:36.300
error buttons disabled.

90
00:08:36.300 --> 00:08:42.060
If I enter something here which has at least five characters everything gets enabled though so it looks

91
00:08:42.060 --> 00:08:45.540
like this is indeed working in the way it should.

92
00:08:45.570 --> 00:08:50.670
If both is valid we can tap the button and right now we don't handle the form submission properly but

93
00:08:50.670 --> 00:08:57.180
that will change but if at least one input is invalid the bot this disabled because our overall form

94
00:08:57.180 --> 00:08:58.950
state seems to be invalid.

95
00:08:59.010 --> 00:09:05.280
So dad is working as it should with the help of user reduced rent all the logic we have here and we're

96
00:09:05.280 --> 00:09:06.480
not done of course.

97
00:09:06.480 --> 00:09:08.610
Now let's also handled a form submission.
