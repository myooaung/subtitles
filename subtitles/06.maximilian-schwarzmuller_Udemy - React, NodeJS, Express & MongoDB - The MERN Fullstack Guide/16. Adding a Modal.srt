1
00:00:02,200 --> 00:00:07,620
To show the position of a place on a map I will add two new components.

2
00:00:07,750 --> 00:00:12,010
One is a modal a modal is an overlay which you see on many Web sites.

3
00:00:12,010 --> 00:00:17,450
It's basically like a pop up but built into the page not in a new browser window.

4
00:00:17,530 --> 00:00:22,690
It has a background where we can use this backdrop which we already use for the site draw on mobile

5
00:00:23,350 --> 00:00:27,510
and then we have that model as an overlay in that modal we can display anything.

6
00:00:27,610 --> 00:00:33,940
And indeed I will build a reusable modal here which we can use to host any kind of content confirmation

7
00:00:33,940 --> 00:00:35,830
dialogues whatever we need.

8
00:00:35,860 --> 00:00:37,530
In this case a map.

9
00:00:37,530 --> 00:00:39,020
And that's then the second thing we need.

10
00:00:39,070 --> 00:00:45,400
We'll build a special wears off that modal which uses that model but then hosts a map inside of it.

11
00:00:45,430 --> 00:00:52,590
So let's start with the generic model itself for this in UI elements here next to card and so on.

12
00:00:52,780 --> 00:00:58,150
We can grid and you file the modal jazz file and all the modal C is as follows because we will certainly

13
00:00:58,150 --> 00:01:01,200
need some styling in modal J.S..

14
00:01:01,210 --> 00:01:07,270
As always we import react from react and then we have our modal component here which receives props

15
00:01:08,110 --> 00:01:17,150
and which exports this model then in the end we also need to import our C as as file here.

16
00:01:17,270 --> 00:01:22,440
So import dot slash modal CSA s now actually in here.

17
00:01:22,590 --> 00:01:24,570
I want to have a second component.

18
00:01:24,570 --> 00:01:27,940
No one is forcing you to only have one component per file.

19
00:01:27,990 --> 00:01:29,300
Typically that is what you have.

20
00:01:29,310 --> 00:01:34,320
But if you have two components that work closely together then you can also absolutely have more than

21
00:01:34,320 --> 00:01:36,070
one component in a file.

22
00:01:36,090 --> 00:01:38,950
Please note that I will only export the modal here though.

23
00:01:39,000 --> 00:01:42,840
The second component which I will build here is only for internal use.

24
00:01:42,870 --> 00:01:45,400
So the modal component will use that second component.

25
00:01:45,400 --> 00:01:51,570
I will also build and that will be the actual modal overlay so the thing we will actually see on the

26
00:01:51,570 --> 00:01:57,940
screen this is another component I add here which is not export it but will be use by modal.

27
00:01:57,940 --> 00:02:02,250
Now let's start with structuring the content of the modal overlay.

28
00:02:02,290 --> 00:02:06,270
I will use the react Dom create portal method there.

29
00:02:06,310 --> 00:02:10,230
So let's import react Dom from react Dom.

30
00:02:10,480 --> 00:02:13,540
And then here I will return.

31
00:02:13,540 --> 00:02:14,080
React.

32
00:02:14,080 --> 00:02:20,200
Dom create portal and output some content here in a special place.

33
00:02:20,350 --> 00:02:26,710
Variable use document get element by D modal dash hook which is a place we should add in the public

34
00:02:26,740 --> 00:02:31,150
index H TO MAIL file maybe here between backdrop hook and draw hook.

35
00:02:31,150 --> 00:02:37,190
That's our mode Look that's the place where the modal will then be mounted to into real dog so in the

36
00:02:37,190 --> 00:02:44,510
modal component we now need to specify the content which should actually be rendered there.

37
00:02:44,870 --> 00:02:51,430
Now the content here is a diff with a class name of modal.

38
00:02:51,660 --> 00:02:54,940
Now actually it's more than that I want to be flexible here.

39
00:02:55,020 --> 00:03:02,700
So I render a template literal here so that I can add my modal class but I can also inject some other

40
00:03:02,790 --> 00:03:08,520
class name and that's props start class name so that in the end when we use the modal we could also

41
00:03:08,610 --> 00:03:14,790
add our own classes to the modal and we're not restricted to the classes set up here just a little extra

42
00:03:14,790 --> 00:03:16,440
flexibility.

43
00:03:16,440 --> 00:03:22,950
I will also add a style prop and set this to prop start style so we could also directly add inline styles

44
00:03:23,040 --> 00:03:27,760
to this modal if we wanted to then I want to have a header in there.

45
00:03:27,800 --> 00:03:34,280
So basically a header title is shown at the top of the modal does header will also receive a class name.

46
00:03:34,280 --> 00:03:43,130
And here again I want to be really flexible so we'll add modal underscore underscore header but then

47
00:03:43,190 --> 00:03:52,550
also add prop stored header class so that we can add our own header classes if we want to Indi header.

48
00:03:52,620 --> 00:03:59,820
The idea is to have a h to tag where we output some text that is received on a props header property

49
00:04:02,000 --> 00:04:08,540
that lets the header below the header but still inside the div I will add a forum will not always need

50
00:04:08,600 --> 00:04:14,570
debt but if we had some modal content that should be part of a forum wrapping everything with a form

51
00:04:14,570 --> 00:04:16,410
here can be an advantage.

52
00:04:16,450 --> 00:04:18,590
Now you could also certainly built this in other ways.

53
00:04:18,590 --> 00:04:24,350
But here I want to have a really flexible modal so want to give the developer who will then use the

54
00:04:24,350 --> 00:04:30,620
modal which of course is us the possibility to add content that is automatically wrapped in a forum

55
00:04:30,920 --> 00:04:34,250
not a must do but something I want to do here.

56
00:04:34,310 --> 00:04:40,750
Here I will add ons up my handler and check if props on submit is set.

57
00:04:41,120 --> 00:04:44,050
And if it is set I will call props on submit.

58
00:04:44,210 --> 00:04:50,300
So will bind on submit to these on submit I get fruit props and otherwise I will pass a inline function

59
00:04:50,300 --> 00:04:54,930
here where we get the event and where a call event prevent default.

60
00:04:54,940 --> 00:04:55,570
Why.

61
00:04:55,610 --> 00:04:59,900
Because I want to make sure that if we render any buttons inside of that form we don't accidentally

62
00:04:59,900 --> 00:05:07,730
reload the page by triggering our forum submission here if we do provide our own submit function then

63
00:05:07,730 --> 00:05:11,310
it's the duty of that submit function to prevent the default.

64
00:05:11,390 --> 00:05:19,040
Now inside of that form I'll add another death class name here again is a dynamic binding to be really

65
00:05:19,040 --> 00:05:28,350
flexible and there I will bind us to modal underscore underscore content and then prop start content

66
00:05:28,350 --> 00:05:30,350
class so similar to the header.

67
00:05:30,360 --> 00:05:36,180
The idea simply is that if we use the model in some place of our app we can dynamically provide our

68
00:05:36,180 --> 00:05:42,420
custom header class to adjust the default look our custom extra class for the content and I'll do the

69
00:05:42,420 --> 00:05:49,450
same then later for the footer of the model which will also add inside of this content output props

70
00:05:49,450 --> 00:05:50,110
children.

71
00:05:50,280 --> 00:05:54,050
So whatever we add between the opening and closing tag off the model.

72
00:05:54,450 --> 00:05:58,500
And then last but not least I'll add a footer still inside of the form.

73
00:05:58,740 --> 00:06:07,930
And here in that footer or on that footer just as before dynamic classes are added and here I will have

74
00:06:07,930 --> 00:06:10,260
modal underscore underscore footer as a class.

75
00:06:10,270 --> 00:06:16,960
But then for extra flexibility at prop start foot or a class to allow external customization.

76
00:06:16,990 --> 00:06:21,760
Now that's by the way all that the reason why I have that form here in that footer.

77
00:06:21,760 --> 00:06:28,030
The user should be able to inject footer content for example buttons that allow the user to confirm

78
00:06:28,030 --> 00:06:29,970
a choice or something like that.

79
00:06:30,280 --> 00:06:35,080
And dad would be hard to do if we only injected everything into content here.

80
00:06:35,080 --> 00:06:40,240
Now by the way that split into a content div and the footer is the reason for this default form here.

81
00:06:40,240 --> 00:06:45,510
If the user wants to render a modal that holds a form of course you could inject the form here as a

82
00:06:45,520 --> 00:06:47,750
content with props children.

83
00:06:47,920 --> 00:06:53,470
But if you want of a nice styling where to submit buttons are visually separated from the content which

84
00:06:53,500 --> 00:06:58,040
is the styling that will be applied by default with the default clauses I add here.

85
00:06:58,270 --> 00:07:03,730
Then this would not be possible to be all in one form because the forum would live here and the buttons

86
00:07:03,730 --> 00:07:06,220
would live here and there would not be inside of the forum.

87
00:07:06,220 --> 00:07:11,590
That's why I have to is wrapping general form here which wraps both the content div as well as the footer

88
00:07:11,770 --> 00:07:16,990
where the user can then inject for example the inputs of a forum and then the submit buttons and if

89
00:07:16,990 --> 00:07:22,690
you are not using a forum and you're not providing on submit it's ignored anyways so that's the general

90
00:07:22,690 --> 00:07:24,490
structure of the modal overlay.

91
00:07:24,490 --> 00:07:30,070
Now why do I have a separate component down there because a modal is more than just the overlay a modal

92
00:07:30,160 --> 00:07:37,630
also needs backdrop and I also want to play a little animation when we open and close to modal so therefore

93
00:07:37,660 --> 00:07:46,370
we need to import two more things we need to import the backdrop from dot slash backdrop here and import

94
00:07:46,370 --> 00:07:50,610
see us as transition from a react Transition Group.

95
00:07:50,690 --> 00:07:58,340
That animation library we already used earlier with that in our modal a component not in modal overlay

96
00:07:58,370 --> 00:08:05,200
but in modal I want to return a react fragment because I'll have some sibling top level elements and

97
00:08:05,210 --> 00:08:11,150
I want to check if we have a show prop which is true ish in which case I will render the backdrop and

98
00:08:11,270 --> 00:08:17,870
on the backdrop we can click and I will not trigger on cancel method or function which I receive on

99
00:08:17,870 --> 00:08:19,780
the on cancel prop here.

100
00:08:19,910 --> 00:08:24,920
If that is the case so that outside of the modal in the place and the component where we use it we can

101
00:08:24,920 --> 00:08:29,150
handle the cancellation and close it or do whatever we want to do.

102
00:08:29,390 --> 00:08:31,130
Now both sides are entering the backdrop.

103
00:08:31,130 --> 00:08:39,890
I also want to render it a CSX transition here and D in prop here is bound to prop start show which

104
00:08:39,890 --> 00:08:41,620
is our trigger for the backdrop as well.

105
00:08:42,930 --> 00:08:51,720
I set mount on enter and on mount on exit at a time out of 200 milliseconds and then class names not

106
00:08:51,720 --> 00:08:58,650
class name but class names and set this to modal now the appropriate class names which does CSX transition

107
00:08:58,650 --> 00:09:01,700
component then we'll use will be added in modal C as s.

108
00:09:01,800 --> 00:09:06,570
And speaking of that attached you find a modal us as file and you can simply put the content you find

109
00:09:06,570 --> 00:09:09,160
in there into your modal see us as follows.

110
00:09:09,190 --> 00:09:13,290
I'll make sure you are importing modal CSX and you're almost done.

111
00:09:13,990 --> 00:09:18,540
I'm saying almost because the key part is missing the modal overlay.

112
00:09:18,580 --> 00:09:23,650
We're not using that in our motel down there of course that is what I want to render between my CSX

113
00:09:23,650 --> 00:09:25,190
transition components though.

114
00:09:25,240 --> 00:09:29,720
So here we can add modal overlay and close it and now do one thing.

115
00:09:29,720 --> 00:09:34,670
We forward all the props we get from outside to modal overlay.

116
00:09:34,840 --> 00:09:40,480
This index might look strange but what it does is it takes the props we pass two modal which is the

117
00:09:40,480 --> 00:09:46,390
component we export and forwards them to modal overlay which is the internal component which we don't

118
00:09:46,390 --> 00:09:47,350
export.

119
00:09:47,380 --> 00:09:53,500
This allows us to set for example footer for a class content clause header ends on on the export of

120
00:09:53,500 --> 00:09:56,110
modal component where we of course don't need it.

121
00:09:56,110 --> 00:10:02,050
We don't use it here but we then forward it to modal overlay so it allows us to set props on this internal

122
00:10:02,110 --> 00:10:08,230
component from outside so to say and distant X might look strange but this is D spread operator which

123
00:10:08,230 --> 00:10:15,220
takes all the key value pairs of the props object and spreads them as attributes so to say onto modal

124
00:10:15,220 --> 00:10:16,840
overlay with Dad.

125
00:10:16,840 --> 00:10:22,540
We created a general modal now that General modal is nice but of course you want a modal with a map

126
00:10:22,860 --> 00:10:27,220
now we'll work on the map soon but for now let's show the normal modal route African go to the place

127
00:10:27,310 --> 00:10:30,500
item where we have this view on map button.

128
00:10:30,880 --> 00:10:35,890
And now we need to manage some state which we change when that button is pressed to show the modal and

129
00:10:35,890 --> 00:10:39,370
then all the in the backdrop of the modal is pressed to hide the modal.

130
00:10:39,370 --> 00:10:45,980
So I will import use state from react here and add a new state in place.

131
00:10:45,980 --> 00:10:54,890
Item show map and set show map which initially is false because initially I don't want to show the modal

132
00:10:57,660 --> 00:10:59,150
and then I will add functions here.

133
00:10:59,170 --> 00:11:02,350
The open map handler there.

134
00:11:02,430 --> 00:11:09,860
I'd simply call set show map and set this to true and disclose.

135
00:11:09,920 --> 00:11:12,230
Map handler and you can guess what I'll do there.

136
00:11:12,230 --> 00:11:15,410
I'll set this to false.

137
00:11:15,550 --> 00:11:18,650
Now we all need to import the modal we just built.

138
00:11:18,850 --> 00:11:28,090
So import modal from our shared components UI elements the modal file their and now you start.

139
00:11:28,130 --> 00:11:29,620
Now how do we use it.

140
00:11:29,630 --> 00:11:31,570
I want to render it next to my list item.

141
00:11:31,580 --> 00:11:37,400
And keep in mind it won't really be rendered dear instead because I use a portal both on the backdrop

142
00:11:37,430 --> 00:11:39,350
as well as the modal overlay.

143
00:11:39,350 --> 00:11:44,960
It will be injected in a different place of our index H to mail file and that's the nice thing about

144
00:11:44,960 --> 00:11:47,120
portals which I already touched on earlier.

145
00:11:47,510 --> 00:11:53,570
They allow us to use a component in a certain place in this case and a place item and yet render the

146
00:11:53,570 --> 00:11:59,480
content of that component in a different place which semantically might be better than attaching the

147
00:11:59,480 --> 00:12:05,000
modal markup next to the list item we might be able to achieve the same look but for screen readers

148
00:12:05,000 --> 00:12:08,390
and so on and for semantics in general that would not be ideal.

149
00:12:08,420 --> 00:12:13,990
So that's where a portal can help us now we have multiple sibling rude items.

150
00:12:13,990 --> 00:12:18,270
We need to react fragment so we can wrap the list item with that.

151
00:12:18,490 --> 00:12:24,460
And then with react fragment as a new top level element in this component we can render our model here

152
00:12:24,670 --> 00:12:27,380
next to the list item now.

153
00:12:27,400 --> 00:12:31,890
On this modal I want to set the show prop and set this equal to show map.

154
00:12:31,900 --> 00:12:39,220
So to this state we just added I also have on cancel handler here which just to make this clear again

155
00:12:39,730 --> 00:12:42,730
isn't the end a function that will be triggered when we click the backdrop.

156
00:12:42,730 --> 00:12:49,180
That's when I Indian forward that click event to on cancel and triggered a function that's passed through

157
00:12:49,300 --> 00:12:50,560
on cancel.

158
00:12:50,650 --> 00:12:56,170
So on cancel therefore point at the close map handler function so that this function is executed when

159
00:12:56,170 --> 00:13:02,700
we click the backdrop I will provide text for the header and there I simply want to use to address the

160
00:13:02,710 --> 00:13:04,770
human readable address of the place

161
00:13:07,650 --> 00:13:19,180
and add extra content clause which should be placed dash item underscore underscore modal dash content.

162
00:13:19,320 --> 00:13:24,810
Let me reformat that to make it easier to read and also add a fuller class to that modal

163
00:13:27,850 --> 00:13:32,800
which I'll set to play stash item underscore underscore modal dash actions

164
00:13:35,610 --> 00:13:41,340
the last but not least I'll set the footer prop itself to a dynamic value which will be some J is X

165
00:13:41,550 --> 00:13:48,620
because there I want to have a button which allows me to close the modal and therefore I'll add the

166
00:13:48,620 --> 00:13:56,000
on click listener to the button and set does equal to the close map handler just as on cancel this button

167
00:13:56,000 --> 00:14:02,990
component here through the footer prop will be rendered in our model overlay in this place yet that's

168
00:14:02,990 --> 00:14:08,840
where I use the footer prop and since I've forward all props I pass to modal to modal overlay if I pass

169
00:14:08,900 --> 00:14:17,950
anything in a footer prop does this verbiage will end up so with that I prepared the model but the main

170
00:14:17,950 --> 00:14:23,320
content is missing between the opening and closing tag off the modal we have to specify what should

171
00:14:23,320 --> 00:14:28,780
be rendered in the place of props children because remember props children instead special prop react

172
00:14:28,780 --> 00:14:34,600
nose which renders whatever is between the opening and closing tag of your reacting off your chest x

173
00:14:34,600 --> 00:14:35,690
element.

174
00:14:35,800 --> 00:14:42,270
So here in the middle there I want to render my map for now I will render a div here with a class name

175
00:14:42,360 --> 00:14:48,930
of map container and I will actually add this class in place.

176
00:14:48,930 --> 00:14:55,620
Item C as s maybe here above the media query map container can be a simple class where you set a height

177
00:14:55,650 --> 00:14:59,250
of let's say 20 REM and a width of 100 percent.

178
00:14:59,280 --> 00:15:05,340
So make sure to add this class to place item C as s and to distill here and insert of this div will

179
00:15:05,340 --> 00:15:06,930
soon add the map.

180
00:15:06,930 --> 00:15:15,490
For now I'll just have h to tag raise say the map which is of course not our final result and with dapper

181
00:15:15,550 --> 00:15:17,530
almost stare the missing piece.

182
00:15:17,530 --> 00:15:20,040
Now it's that we connect the buttons down there.

183
00:15:20,080 --> 00:15:25,660
Now we can add on click listener as I already did it here in the footer because the custom button component

184
00:15:25,960 --> 00:15:32,650
in the end forwards the default on click event to well the function that is received on a on click prop.

185
00:15:32,650 --> 00:15:39,240
So we have to provide such a on click prop to react to a click and hence here on the view on map button

186
00:15:39,340 --> 00:15:44,170
I'll add on click and bind this to open map handler.

187
00:15:44,260 --> 00:15:53,080
So to that function which sets show map to true we save all files it should recompile and if I now click

188
00:15:53,080 --> 00:15:58,920
on View and map you'll see that modal slide in and of course all the slide out if I close it.

189
00:15:58,990 --> 00:16:06,850
However it reloads the page if I close so let's quickly go to the modal reason for that is that we have

190
00:16:06,850 --> 00:16:11,880
to us form which gets submitted and yet there on prevent default.

191
00:16:11,890 --> 00:16:15,680
Of course I should execute this as a function not just point at it.

192
00:16:15,700 --> 00:16:23,920
So at the parentheses after prevent default and now with Dad if we go back I can click close and it

193
00:16:23,920 --> 00:16:30,470
doesn't reload instead of just removes the model and this all should look good on mobile.

194
00:16:30,490 --> 00:16:32,740
Yeah bit Big there maybe.

195
00:16:32,920 --> 00:16:36,460
So maybe we should shrink our map container a little bit.

196
00:16:36,640 --> 00:16:39,270
Let's say 15 REMS should do the trick.

197
00:16:40,620 --> 00:16:42,140
And with that it looks good.

198
00:16:42,240 --> 00:16:49,700
But of course now the map itself is missing we could of course all the by the way find you in the position

199
00:16:49,700 --> 00:16:53,500
where the model is shown that it's shown further on top.

200
00:16:53,600 --> 00:17:02,850
That could be done in the modal C as as file there change top 20 30 we age maybe to twenty two VH B

201
00:17:02,860 --> 00:17:09,170
ages as C as this unit that is basically the viewport height and this means 22 percent from the top

202
00:17:09,710 --> 00:17:11,280
of your viewport height.

203
00:17:11,360 --> 00:17:17,000
So now if you do that yeah I think that looks pretty decent.

204
00:17:17,020 --> 00:17:17,600
Yeah.

205
00:17:17,710 --> 00:17:22,390
So now let's focus on outputting a nice little map rendered for Google Maps.

206
00:17:22,390 --> 00:17:23,740
Here in this modal.
