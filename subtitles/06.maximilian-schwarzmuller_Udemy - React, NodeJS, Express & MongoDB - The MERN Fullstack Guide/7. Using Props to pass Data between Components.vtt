WEBVTT
1
00:00:02.210 --> 00:00:09.050
I created the separate component a of course to practice creating your own components but B also because

2
00:00:09.050 --> 00:00:14.290
it really is the core philosophy of react to split your app into smaller pieces.

3
00:00:14.300 --> 00:00:17.490
Of course it's up to you how small you want to split it.

4
00:00:17.660 --> 00:00:22.940
Every list item for example could all be its own component and there would be nothing wrong with that.

5
00:00:23.030 --> 00:00:29.440
The idea simply is to have small manageable code files and later once we add more logic to the app so

6
00:00:29.440 --> 00:00:35.060
sorted we can all interact with it and we changed the the number of goals for example up on a button

7
00:00:35.060 --> 00:00:36.380
click and so on.

8
00:00:36.380 --> 00:00:41.630
We of course want to be able to manage a lot of the logic in the goal list component and not an average

9
00:00:41.630 --> 00:00:42.370
components.

10
00:00:42.380 --> 00:00:49.490
So really splitting it into components has the idea of separating concerns of keeping your files small

11
00:00:49.490 --> 00:00:55.910
focused and manageable which if you're working in bigger projects is a huge win because it makes it

12
00:00:55.910 --> 00:00:59.710
much easier to manage and work in such bigger projects.

13
00:00:59.990 --> 00:01:03.890
Now thus far everything in our app is hard coded though.

14
00:01:04.310 --> 00:01:13.370
Now a more realistic would be that lets say our goal list is managed here it aptly s as data and we

15
00:01:13.370 --> 00:01:20.630
want to render the goal list H Tim all items or J is X items based on that data.

16
00:01:20.630 --> 00:01:27.110
Now I'll manage it here in app J.S. simply because later I will add another component here that helps

17
00:01:27.110 --> 00:01:28.430
us create new goals.

18
00:01:28.520 --> 00:01:34.790
But for now let's just add a normal constant here to this functional component because it is a normal

19
00:01:34.790 --> 00:01:35.920
javascript function.

20
00:01:35.960 --> 00:01:43.150
Of course you can do more than just return J as X and this constant here will have my course goals.

21
00:01:43.190 --> 00:01:49.400
You can name it however you want and this will be an array and is array each goal can be a javascript

22
00:01:49.430 --> 00:01:54.980
object created here with the object literal notation of course you could also create your own class

23
00:01:55.070 --> 00:02:00.020
or constructor function and instantiate that to create such an object.

24
00:02:00.020 --> 00:02:01.550
Now lets say every goal has an idea.

25
00:02:02.630 --> 00:02:10.060
C.G. one for course course call 1 and then has some text let's say and the text here is simply the text

26
00:02:10.060 --> 00:02:11.410
I have hardcoded here.

27
00:02:11.410 --> 00:02:12.920
Finish the course.

28
00:02:12.940 --> 00:02:13.140
So.

29
00:02:13.150 --> 00:02:20.230
Copy that and at this here and I'll splits across multiple lines to make it easier to read because I'll

30
00:02:20.230 --> 00:02:21.790
not just have one goal but free.

31
00:02:22.000 --> 00:02:25.730
So the ideas are CGI too and set you free let's say.

32
00:02:25.900 --> 00:02:34.490
And now I will just copy all that text here into my objects here in app J.S..

33
00:02:34.770 --> 00:02:43.370
Also that last text like this and there I can now also get rid of that ampersand thing here we don't

34
00:02:43.370 --> 00:02:48.150
need that here we can output the text like this and react will render it properly.

35
00:02:48.410 --> 00:02:54.050
So now we have the core skills array and my idea now is that in the goal list component of these goals

36
00:02:54.080 --> 00:02:56.900
that data here should in the end be output.

37
00:02:56.900 --> 00:03:02.240
So it should be output dynamically in this component in the goal list component instead of being hardcoded

38
00:03:02.480 --> 00:03:04.190
so we can remove this code here.

39
00:03:04.190 --> 00:03:06.350
Now that leaves us with two problems.

40
00:03:06.350 --> 00:03:11.050
Number one how can we output a list of data dynamically in J as x.

41
00:03:11.270 --> 00:03:16.490
But more important than that at the moment how can we get that list of data which is defined in the

42
00:03:16.490 --> 00:03:19.460
app component into the goal list component.

43
00:03:19.460 --> 00:03:20.720
Well let's focus on that first.

44
00:03:20.720 --> 00:03:23.740
Because without that we can't focus on the other problem.

45
00:03:24.170 --> 00:03:32.900
We can pass data from component to component with a concept called Props short for properties we can

46
00:03:32.900 --> 00:03:34.130
define our own.

47
00:03:34.130 --> 00:03:39.800
You could say attributes which are these props on our own components.

48
00:03:40.250 --> 00:03:46.080
So for example here on goal list you could say we have items attribute or goals attribute.

49
00:03:46.130 --> 00:03:47.580
Totally up to you.

50
00:03:47.630 --> 00:03:53.370
I'll go with goals here and that gold's attribute or prop is the common term.

51
00:03:53.370 --> 00:03:58.150
So does gold's prop then pass this data to that component.

52
00:03:58.350 --> 00:03:58.910
Now for dead.

53
00:03:58.950 --> 00:04:03.720
I don't use a string here which I want to pass down but instead I want to pass down my javascript data

54
00:04:03.720 --> 00:04:04.220
structure.

55
00:04:04.230 --> 00:04:10.830
Dear Ray here and for dad here actually we use a no special syntax and J as X we use single opening

56
00:04:10.830 --> 00:04:12.670
and closing curly braces.

57
00:04:12.780 --> 00:04:16.010
Looks like we're creating a jobs with object here but we are not.

58
00:04:16.080 --> 00:04:19.460
If you do this instead of J is X which I am doing your.

59
00:04:19.500 --> 00:04:28.980
That's J is X then this means you wanna merge your J is X code with some javascript expression in the

60
00:04:28.980 --> 00:04:29.460
end.

61
00:04:29.460 --> 00:04:33.040
And here we can point at core skills that is a valid javascript expression.

62
00:04:33.060 --> 00:04:40.040
We're just pointing at a constant and what Disneyland means is that react will pass course goals here.

63
00:04:40.170 --> 00:04:44.850
The value stored in is constant in this case this array into this place of J is x.

64
00:04:44.850 --> 00:04:54.040
In this case into this prop therefore so goals will be a prop that holds a reference to this array now.

65
00:04:54.110 --> 00:04:58.600
Now inside of goal list we can now receive that gold prop.

66
00:04:58.770 --> 00:05:02.370
So let's go to goal list and see how that works in goal list.

67
00:05:02.370 --> 00:05:03.560
We have a function right.

68
00:05:03.600 --> 00:05:05.600
A functional component.

69
00:05:05.610 --> 00:05:08.990
Now this function right now doesn't get any parameters.

70
00:05:09.090 --> 00:05:10.110
We can change this.

71
00:05:10.170 --> 00:05:17.220
We can receive a proper parameter here every function that is used as a react component which means

72
00:05:17.220 --> 00:05:22.540
it returns J as X also receives props.

73
00:05:22.640 --> 00:05:29.960
This is object passed to your react functional component automatically by react and it's an object that

74
00:05:29.960 --> 00:05:34.100
bundles all the props you passed to the component.

75
00:05:34.190 --> 00:05:37.360
So in our case goals is to single prop we have.

76
00:05:37.400 --> 00:05:44.390
So here we will have an object which has a property with the name of goals that holds the value passed

77
00:05:44.420 --> 00:05:47.340
to that prop so in other words.

78
00:05:47.470 --> 00:05:54.430
Here I could console log prop start goals dot goals because I named my prop goals here.

79
00:05:54.430 --> 00:06:00.580
If you chose a different name here which is perfectly fine you have to use the different name here.

80
00:06:00.580 --> 00:06:06.460
Now if we save that we won't see our goals anymore at the moment but if we open to developer tools we

81
00:06:06.460 --> 00:06:12.010
see the array being logged here and dad log is coming from goal list line 6 as you see which of course

82
00:06:12.010 --> 00:06:19.810
is this log here and there we see our goals data which means yes it arrives successfully instead of

83
00:06:19.810 --> 00:06:21.540
the goal list component.

84
00:06:21.640 --> 00:06:28.780
The concept of props is a super important concept in react because this is what allows you to pass data

85
00:06:28.780 --> 00:06:34.540
from component a the app component to component B the goal list component.

86
00:06:34.540 --> 00:06:35.680
In this case.

87
00:06:35.830 --> 00:06:42.790
Now let's have a look at how we can output a list of data dynamically in J is X because here we got

88
00:06:42.790 --> 00:06:49.360
a list of goals and array of goals and we want to output this as list items here in our unordered list.
