1
00:00:02,190 --> 00:00:07,410
Now one thing you might have noticed before is that if we send the request to a root which doesn't exist

2
00:00:07,410 --> 00:00:13,910
for example API slash nothing I get an error here right and I get this kind of error.

3
00:00:13,930 --> 00:00:20,630
Now that's OK but we might want to handle this defiled route not found error for that back and app.

4
00:00:20,650 --> 00:00:26,820
Yes we can register a new middleware not an error handling middleware like this but a normal middleware

5
00:00:27,330 --> 00:00:30,660
handling all requests no matter which word we used.

6
00:00:30,780 --> 00:00:32,990
That comes after our roots.

7
00:00:33,000 --> 00:00:38,850
The idea is that this only runs does middleware which we register here only runs if we didn't send the

8
00:00:38,850 --> 00:00:41,130
response into one of our routes before.

9
00:00:41,130 --> 00:00:44,520
Because if we do this in the response we don't call next.

10
00:00:44,520 --> 00:00:44,880
Right.

11
00:00:44,880 --> 00:00:50,110
We just send the response and therefore no other middleware after this one will be reached.

12
00:00:50,130 --> 00:00:56,430
So put in our words this Middleware is only reached if we have some request which didn't get a response

13
00:00:56,430 --> 00:01:01,260
before and that can only be a request which we don't want to handle.

14
00:01:01,260 --> 00:01:11,180
So here I can then add my middleware and in here I now want to return a 4 0 4 error and I want to utilize

15
00:01:11,180 --> 00:01:20,700
my default error handler for that and I'll simply import the h the DP error CLOs we created earlier

16
00:01:21,960 --> 00:01:32,270
from the model's folder HBP dash error and create such a new HDP error here by calling new HP error

17
00:01:32,730 --> 00:01:42,010
the messages could not find it is root and decode is 404 of course and then we can throw it or call

18
00:01:42,010 --> 00:01:47,140
next hero will throw it because it's synchronous so nothing speaks against throwing it and that will

19
00:01:47,140 --> 00:01:53,410
then reach our default error handler to send us back a nice response so we now save that and try this

20
00:01:53,430 --> 00:02:04,800
again we now get our own response with a 404 status code as you see here and also with our own body

21
00:02:05,110 --> 00:02:09,840
and that's just a little improvement which I wanted to add here so did we have proper error handling

22
00:02:09,960 --> 00:02:11,810
for unsupported routes as well.
