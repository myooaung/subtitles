WEBVTT
1
00:00:00.050 --> 00:00:03.000
- The singleton pattern is the one pattern that I use

2
00:00:03.000 --> 00:00:05.070
almost as much as the factory pattern

3
00:00:05.070 --> 00:00:09.030
and with Spring I'm using that a lot more than I usually had

4
00:00:09.030 --> 00:00:11.090
because everything in Spring is a singleton.

5
00:00:11.090 --> 00:00:13.090
Well almost everything.

6
00:00:13.090 --> 00:00:19.000
So in Spring itself, every bean by default is a singleton.

7
00:00:19.000 --> 00:00:22.060
Unless you tell the application context otherwise,

8
00:00:22.060 --> 00:00:24.030
you're going to get a singleton.

9
00:00:24.030 --> 00:00:26.020
Now one thing to note is that this is not

10
00:00:26.020 --> 00:00:29.030
a classic singleton which is what we're going to discuss,

11
00:00:29.030 --> 00:00:31.080
but it behaves the exact same during

12
00:00:31.080 --> 00:00:35.000
the run time of your application.

13
00:00:35.000 --> 00:00:38.010
Beans, therefore, because they are singletons

14
00:00:38.010 --> 00:00:40.050
must be designed in a way that is thread safe.

15
00:00:40.050 --> 00:00:44.040
And that applies to all singleton classes in general.

16
00:00:44.040 --> 00:00:48.020
So this pattern is relatively straightforward.

17
00:00:48.020 --> 00:00:51.080
You have a class that stores a reference to itself.

18
00:00:51.080 --> 00:00:55.020
More specifically, to an instance of itself.

19
00:00:55.020 --> 00:00:58.000
You have a private constructor.

20
00:00:58.000 --> 00:01:00.070
Then you have a static getInstance method

21
00:01:00.070 --> 00:01:05.030
that returns a reference of self or if self is nul,

22
00:01:05.030 --> 00:01:08.020
it constructs it using the private constructor

23
00:01:08.020 --> 00:01:11.010
and it does so in a thread safe manor.

24
00:01:11.010 --> 00:01:14.000
New is never called on the class

25
00:01:14.000 --> 00:01:17.000
outside of the single getInstance case.

26
00:01:17.000 --> 00:01:20.090
And usually you wrap that with some locking to prevent you

27
00:01:20.090 --> 00:01:24.030
from getting into a non thread safe condition.

28
00:01:24.030 --> 00:01:26.050
Why would we want to use this?

29
00:01:26.050 --> 00:01:30.040
Well first and foremost, this is a much better alternative

30
00:01:30.040 --> 00:01:33.030
in the modern world to using static classes.

31
00:01:33.030 --> 00:01:35.070
Often classes that we define as singletons

32
00:01:35.070 --> 00:01:40.010
are very expensive to create and by doing it this way,

33
00:01:40.010 --> 00:01:45.010
we don't have to incur the creation costs more than once.

34
00:01:45.010 --> 00:01:50.000
We can control concurrency associated with shared resources.

35
00:01:50.000 --> 00:01:52.030
If the resource that we are sharing,

36
00:01:52.030 --> 00:01:54.090
if handled by a singleton, then we can control

37
00:01:54.090 --> 00:01:58.030
all of the access to it and ensure concurrency,

38
00:01:58.030 --> 00:02:01.070
especially when it's not a concurrent system.

39
00:02:01.070 --> 00:02:05.050
And we can use this to store static state

40
00:02:05.050 --> 00:02:08.010
for multiple parts of the application.

41
00:02:08.010 --> 00:02:09.090
And again, this is another use case

42
00:02:09.090 --> 00:02:12.060
where we have to have some thread safe behavior.

43
00:02:12.060 --> 00:02:15.040
Static state is something that we don't want other things

44
00:02:15.040 --> 00:02:18.000
to have access to and manipulate

45
00:02:18.000 --> 00:02:20.000
outside of our normal run time.

46
00:02:20.000 --> 00:02:23.040
So by wrapping it with a singleton class, we can control

47
00:02:23.040 --> 00:02:28.020
who has access to it, when they do and what that state is.

48
00:02:28.020 --> 00:02:30.010
Now I alluded to this a little bit but we're going to

49
00:02:30.010 --> 00:02:32.080
create this in a very straightforward manner.

50
00:02:32.080 --> 00:02:36.060
First and foremost we're going to create a private constructor.

51
00:02:36.060 --> 00:02:39.080
Then, we're going to create an instance handle

52
00:02:39.080 --> 00:02:43.020
and that instance handle is stored in the class.

53
00:02:43.020 --> 00:02:46.010
Then we're going to create a static getInstance method

54
00:02:46.010 --> 00:02:49.050
that uses a synchronized block on the object itself

55
00:02:49.050 --> 00:02:52.010
to reduce the thread safety risks.

56
00:02:52.010 --> 00:02:53.050
Now I do want to make a note.

57
00:02:53.050 --> 00:02:57.010
This does not make a singleton completely thread safe.

58
00:02:57.010 --> 00:03:01.030
You can still get in there and create two instances of it.

59
00:03:01.030 --> 00:03:05.060
However, if you do your object creation during bootstrap,

60
00:03:05.060 --> 00:03:09.040
it is very rare that you would get into this condition

61
00:03:09.040 --> 00:03:11.080
outside of a really strange behavior

62
00:03:11.080 --> 00:03:16.060
and you usually can control that with compensating controls.

63
00:03:16.060 --> 00:03:19.000
Now in that method we will create the instance

64
00:03:19.000 --> 00:03:22.060
if it doesn't exist, again, in that synchronized block.

65
00:03:22.060 --> 00:03:24.040
Now I do want to talk real quick before we jump into

66
00:03:24.040 --> 00:03:27.070
the implementation that in Spring,

67
00:03:27.070 --> 00:03:30.060
you don't have this constructor and instance behavior.

68
00:03:30.060 --> 00:03:33.070
You simply create an object and wrap it with a bean

69
00:03:33.070 --> 00:03:35.070
and if you don't tell it otherwise,

70
00:03:35.070 --> 00:03:38.050
the Spring application context, more specifically,

71
00:03:38.050 --> 00:03:41.080
the bean factory, treats that as a singleton.

72
00:03:41.080 --> 00:03:45.030
No one else calls that constructor within the Spring context

73
00:03:45.030 --> 00:03:47.020
and Spring hands you that instance.

74
00:03:47.020 --> 00:03:50.000
That way everything is done in a thread safe manor

75
00:03:50.000 --> 00:03:51.070
once objects are created

76
00:03:51.070 --> 00:03:54.020
and since Spring controls object creation

77
00:03:54.020 --> 00:03:58.020
within the application context, it gets a really good case

78
00:03:58.020 --> 00:04:01.000
for locking of that behavior.

