WEBVTT
1
00:00:00.060 --> 00:00:02.080
- [Instructor] In Spring the ModeL-View-Controller Pattern

2
00:00:02.080 --> 00:00:04.000
is one of the first patterns

3
00:00:04.000 --> 00:00:07.000
that most developers actually interact with

4
00:00:07.000 --> 00:00:08.080
when they're using the framework.

5
00:00:08.080 --> 00:00:12.020
In fact my first course here on Linkedin Learning

6
00:00:12.020 --> 00:00:16.010
had some very strong use cases of the Model-View-Controller.

7
00:00:16.010 --> 00:00:18.000
So throughout the Spring framework

8
00:00:18.000 --> 00:00:20.030
you will see that the Model-View-Controller Pattern

9
00:00:20.030 --> 00:00:22.090
is the de facto core standard,

10
00:00:22.090 --> 00:00:25.070
for how all of Spring web works.

11
00:00:25.070 --> 00:00:28.060
It's used not only for traditional web pages,

12
00:00:28.060 --> 00:00:31.050
but also for RESTful web service calls.

13
00:00:31.050 --> 00:00:33.070
Now how does this pattern work in a nutshell?

14
00:00:33.070 --> 00:00:35.080
So responsibilities are broken

15
00:00:35.080 --> 00:00:38.030
into three distinct components.

16
00:00:38.030 --> 00:00:42.070
The first is the model, which delivers data to the view.

17
00:00:42.070 --> 00:00:44.050
The second is the view,

18
00:00:44.050 --> 00:00:47.090
which delivers the experience to the consumer.

19
00:00:47.090 --> 00:00:51.050
And finally, the controller populates the model,

20
00:00:51.050 --> 00:00:54.060
selects the view, and merges them together,

21
00:00:54.060 --> 00:00:58.080
or delegates that to some other operation as in Spring MVC,

22
00:00:58.080 --> 00:01:02.010
where the template engine actually does that merging.

23
00:01:02.010 --> 00:01:03.090
So why would we actually want to use

24
00:01:03.090 --> 00:01:05.090
the Model-View-Controller Pattern?

25
00:01:05.090 --> 00:01:09.040
First and foremost it improves developer efficiencies

26
00:01:09.040 --> 00:01:12.010
by separating responsibilities.

27
00:01:12.010 --> 00:01:14.020
This may not exist in your organization,

28
00:01:14.020 --> 00:01:16.050
but all too often front-end developers

29
00:01:16.050 --> 00:01:19.040
are very different from back-end developers.

30
00:01:19.040 --> 00:01:22.040
I, myself cannot consider myself a front-end developer.

31
00:01:22.040 --> 00:01:24.030
My job description HTML skills

32
00:01:24.030 --> 00:01:27.080
are no where on par with some of my peers.

33
00:01:27.080 --> 00:01:30.050
But I'm really, really good on the back-end side.

34
00:01:30.050 --> 00:01:33.040
So as such, being able to separate these responsibilities

35
00:01:33.040 --> 00:01:35.070
makes a lot of sense for us.

36
00:01:35.070 --> 00:01:39.030
We can also have dynamic and multiple view selection

37
00:01:39.030 --> 00:01:42.040
with the same controller and model.

38
00:01:42.040 --> 00:01:43.080
So what does this mean?

39
00:01:43.080 --> 00:01:46.020
The same controller and model can actually be used

40
00:01:46.020 --> 00:01:50.010
to serve different views, whether your on mobile or web,

41
00:01:50.010 --> 00:01:53.070
whether you want XML or JSON, or protocol buffers.

42
00:01:53.070 --> 00:01:57.010
All of this can change the view, but we still do so

43
00:01:57.010 --> 00:01:59.060
with the same model and the same controller

44
00:01:59.060 --> 00:02:02.010
by using the MVC Pattern.

45
00:02:02.010 --> 00:02:05.000
Also, views can be modified

46
00:02:05.000 --> 00:02:07.090
without modification to the business logic.

47
00:02:07.090 --> 00:02:10.070
And all to often we see that our views change

48
00:02:10.070 --> 00:02:13.060
way more than the underlying code does.

49
00:02:13.060 --> 00:02:16.030
And as such, having these separated out,

50
00:02:16.030 --> 00:02:20.010
we don't have to modify the controller or modify the model,

51
00:02:20.010 --> 00:02:23.040
when the view itself needs to change.

52
00:02:23.040 --> 00:02:26.040
And also, having a model that returns raw data,

53
00:02:26.040 --> 00:02:28.050
that is unformatted,

54
00:02:28.050 --> 00:02:33.020
gives us the ability to use it in future consumption needs.

55
00:02:33.020 --> 00:02:35.030
So how do we go about doing this?

56
00:02:35.030 --> 00:02:37.010
And I'm going to specifically talk about this

57
00:02:37.010 --> 00:02:39.070
from the perspective of Spring.

58
00:02:39.070 --> 00:02:42.050
First and foremost you need to engage a template engine

59
00:02:42.050 --> 00:02:44.050
if you are going to use it.

60
00:02:44.050 --> 00:02:46.000
If you're using Spring Boot,

61
00:02:46.000 --> 00:02:48.050
turning on a template engine is usually as simple

62
00:02:48.050 --> 00:02:51.080
as bringing the starter onto the class path.

63
00:02:51.080 --> 00:02:54.000
You then need to create your view.

64
00:02:54.000 --> 00:02:57.000
Usually it's easier to create your view on a side channel,

65
00:02:57.000 --> 00:03:01.010
but your view has to be there in order to do your operation.

66
00:03:01.010 --> 00:03:03.080
Now if your doing MVC web services,

67
00:03:03.080 --> 00:03:06.000
your views are already done for you,

68
00:03:06.000 --> 00:03:08.040
and we'll get to that when we go through our example

69
00:03:08.040 --> 00:03:11.030
of how to implement this.

70
00:03:11.030 --> 00:03:13.010
You're then going to create your model.

71
00:03:13.010 --> 00:03:15.070
And this is all the data that your view needs,

72
00:03:15.070 --> 00:03:18.050
that you then need to go fetch from the underlying code.

73
00:03:18.050 --> 00:03:20.080
So this model is really your transport

74
00:03:20.080 --> 00:03:23.030
that your going to build in your controller,

75
00:03:23.030 --> 00:03:24.050
which is the next step.

76
00:03:24.050 --> 00:03:26.080
You need to create the controller method,

77
00:03:26.080 --> 00:03:28.030
in order to populate the model

78
00:03:28.030 --> 00:03:31.020
and make all of the underlying call that are necessary,

79
00:03:31.020 --> 00:03:32.070
and then return it.

80
00:03:32.070 --> 00:03:34.040
And in the web side,

81
00:03:34.040 --> 00:03:36.030
your actually going to return the view name

82
00:03:36.030 --> 00:03:37.030
and you'll update the model,

83
00:03:37.030 --> 00:03:40.030
which is a live parameter sent into your method.

84
00:03:40.030 --> 00:03:44.010
In the web service world, you simply return your model

85
00:03:44.010 --> 00:03:47.080
as a return on the method itself,

86
00:03:47.080 --> 00:03:50.040
and the framework will turn it into a view

87
00:03:50.040 --> 00:03:53.090
using either JSON or XML or protocol buffers.

88
00:03:53.090 --> 00:03:56.000
And that's how were going to go about doing this

89
00:03:56.000 --> 00:03:57.000
in our next video.

