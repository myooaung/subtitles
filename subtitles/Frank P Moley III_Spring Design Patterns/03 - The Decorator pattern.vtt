WEBVTT
1
00:00:00.050 --> 00:00:01.050
- [Instructor] The Decorator Pattern

2
00:00:01.050 --> 00:00:04.000
is one of those patterns of composition

3
00:00:04.000 --> 00:00:06.000
that you either get or you don't

4
00:00:06.000 --> 00:00:08.090
but once you get it, its power becomes so great

5
00:00:08.090 --> 00:00:13.000
that you use it often within your development techniques.

6
00:00:13.000 --> 00:00:14.080
Within the Spring framework,

7
00:00:14.080 --> 00:00:17.050
decorators are used all over the place.

8
00:00:17.050 --> 00:00:19.030
The frameworks uses decorators

9
00:00:19.030 --> 00:00:21.090
to do much of its operations.

10
00:00:21.090 --> 00:00:23.090
Injecting your decorated objects,

11
00:00:23.090 --> 00:00:26.000
however, is difficult in Spring

12
00:00:26.000 --> 00:00:28.030
because of how bean references work

13
00:00:28.030 --> 00:00:31.040
specifically around shared interfaces.

14
00:00:31.040 --> 00:00:35.020
In order for you to use the decorators for your beans,

15
00:00:35.020 --> 00:00:37.070
you have to use Qualifier annotations

16
00:00:37.070 --> 00:00:41.020
which then makes your code less about IOC

17
00:00:41.020 --> 00:00:43.080
and more about you controlling the injection

18
00:00:43.080 --> 00:00:46.020
throughout your application.

19
00:00:46.020 --> 00:00:48.060
Now, the pattern and the way that it works in a nutshell

20
00:00:48.060 --> 00:00:50.020
is pretty straightforward.

21
00:00:50.020 --> 00:00:54.060
You add responsibilities to an object dynamically

22
00:00:54.060 --> 00:00:58.080
at runtime and you do so through composition

23
00:00:58.080 --> 00:01:01.040
instead of inheritance.

24
00:01:01.040 --> 00:01:04.070
Inherited base classes compose new behavior

25
00:01:04.070 --> 00:01:08.020
and responsibility by becoming additive

26
00:01:08.020 --> 00:01:10.040
or so-called decorated.

27
00:01:10.040 --> 00:01:13.010
And this pattern allows an object

28
00:01:13.010 --> 00:01:15.020
to be open for extension

29
00:01:15.020 --> 00:01:17.070
while closed for modification

30
00:01:17.070 --> 00:01:20.060
while still adding responsibilities

31
00:01:20.060 --> 00:01:22.080
and this is why a lot of people like this

32
00:01:22.080 --> 00:01:25.010
is because of the open/close principle

33
00:01:25.010 --> 00:01:27.090
and the way that it works with adding new behavior

34
00:01:27.090 --> 00:01:30.050
to an existing base class.

35
00:01:30.050 --> 00:01:33.050
So, why might we use this pattern?

36
00:01:33.050 --> 00:01:34.050
First and foremost,

37
00:01:34.050 --> 00:01:37.010
it's about composition over inheritance

38
00:01:37.010 --> 00:01:38.000
which the gang of four

39
00:01:38.000 --> 00:01:40.050
were very into the use of composition

40
00:01:40.050 --> 00:01:43.010
and most object-oriented developers

41
00:01:43.010 --> 00:01:44.060
once they learn composition,

42
00:01:44.060 --> 00:01:46.070
favor it over inheritance

43
00:01:46.070 --> 00:01:49.040
because of the object ref structure.

44
00:01:49.040 --> 00:01:51.080
Now, you can do this pattern

45
00:01:51.080 --> 00:01:55.010
to add behavior to your code without modifying it

46
00:01:55.010 --> 00:01:57.090
which supports non-breaking changes.

47
00:01:57.090 --> 00:01:59.070
If you have to modify a class

48
00:01:59.070 --> 00:02:01.010
that has been around for some time

49
00:02:01.010 --> 00:02:03.000
in order to add behavior to it,

50
00:02:03.000 --> 00:02:06.030
you may risk breaking other uses

51
00:02:06.030 --> 00:02:08.010
of that object in your code

52
00:02:08.010 --> 00:02:10.090
but by using decorators, you can add behavior

53
00:02:10.090 --> 00:02:13.030
without modifying that code.

54
00:02:13.030 --> 00:02:16.050
This can also be used to remove behavior

55
00:02:16.050 --> 00:02:20.030
through the use of encapsulation via decoration,

56
00:02:20.030 --> 00:02:21.080
so when you decorate your object,

57
00:02:21.080 --> 00:02:23.050
you can actually change the behavior

58
00:02:23.050 --> 00:02:25.040
by being additive

59
00:02:25.040 --> 00:02:27.050
or by removing that behavior,

60
00:02:27.050 --> 00:02:30.030
again through this concept of encapsulation

61
00:02:30.030 --> 00:02:32.070
and decorating the objects.

62
00:02:32.070 --> 00:02:36.020
So, how will we go about creating a decorator?

63
00:02:36.020 --> 00:02:38.020
So, first and foremost we need to start

64
00:02:38.020 --> 00:02:41.030
with a base abstract class.

65
00:02:41.030 --> 00:02:44.050
Then we're going to build another abstract class

66
00:02:44.050 --> 00:02:46.040
that extends the base class

67
00:02:46.040 --> 00:02:49.040
and this becomes our decorator abstract.

68
00:02:49.040 --> 00:02:52.020
Now we will build decorators

69
00:02:52.020 --> 00:02:55.010
that extend the decorator abstract class,

70
00:02:55.010 --> 00:02:58.070
so at this point we have two layers of extension,

71
00:02:58.070 --> 00:03:00.060
so we're still extending the base class

72
00:03:00.060 --> 00:03:03.050
but we're doing so through the decorator.

73
00:03:03.050 --> 00:03:07.090
Then finally, the decorators will maintain an instance

74
00:03:07.090 --> 00:03:10.020
of the base abstract class

75
00:03:10.020 --> 00:03:12.070
using constructor injection,

76
00:03:12.070 --> 00:03:14.050
so even though extend it,

77
00:03:14.050 --> 00:03:16.090
they're also going to store an instance of it

78
00:03:16.090 --> 00:03:19.000
and treat it as a separate object

79
00:03:19.000 --> 00:03:22.000
within the decorator object itself

80
00:03:22.000 --> 00:03:23.030
and now let's jump in and take a look

81
00:03:23.030 --> 00:03:26.000
at how that actually works in code.

