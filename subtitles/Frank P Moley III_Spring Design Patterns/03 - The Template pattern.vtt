WEBVTT
1
00:00:00.050 --> 00:00:03.000
- The template pattern is one of the most common patterns

2
00:00:03.000 --> 00:00:06.070
that you will see throughout the entire Spring framework.

3
00:00:06.070 --> 00:00:09.010
In Spring we use the template pattern

4
00:00:09.010 --> 00:00:11.070
for almost every remote system call

5
00:00:11.070 --> 00:00:15.010
that can be made unless of course you want to roll your own,

6
00:00:15.010 --> 00:00:18.020
but with the template pattern there's no reason to do so.

7
00:00:18.020 --> 00:00:20.090
The temple pattern provides common behavior

8
00:00:20.090 --> 00:00:26.040
that spans across concrete implementations of remote calls.

9
00:00:26.040 --> 00:00:29.040
So in a database world, we would have a database template

10
00:00:29.040 --> 00:00:33.010
that would span all of the different flavors of RDBMS

11
00:00:33.010 --> 00:00:35.090
and that's called a JDBC template.

12
00:00:35.090 --> 00:00:38.090
Now in addition to providing common behavior

13
00:00:38.090 --> 00:00:42.030
that spans concrete implementations of remote calls,

14
00:00:42.030 --> 00:00:44.070
the template pattern in Spring also shares

15
00:00:44.070 --> 00:00:48.000
a similar behavior across remote calls throughout

16
00:00:48.000 --> 00:00:49.090
the way the templates are structured.

17
00:00:49.090 --> 00:00:51.050
So what do I mean by that?

18
00:00:51.050 --> 00:00:54.090
What you will see is the JDBC template

19
00:00:54.090 --> 00:00:58.020
has very similar behavior to the JMS template

20
00:00:58.020 --> 00:01:01.040
which also has very similar behavior to the RestTemplate.

21
00:01:01.040 --> 00:01:03.040
So not only do we get similar behavior

22
00:01:03.040 --> 00:01:06.090
across concrete implementations of the same functionality,

23
00:01:06.090 --> 00:01:11.020
we also get it across different flavors of remote calls.

24
00:01:11.020 --> 00:01:13.040
So as I alluded to, we see it with JDBC,

25
00:01:13.040 --> 00:01:15.070
we see it with JMS we see it with REST,

26
00:01:15.070 --> 00:01:18.030
and there are other template patterns that can be used.

27
00:01:18.030 --> 00:01:21.030
In addition you can create your own template pattern

28
00:01:21.030 --> 00:01:24.060
that works in this manner within the Spring framework,

29
00:01:24.060 --> 00:01:26.050
and often times third-party developers

30
00:01:26.050 --> 00:01:29.020
will do that for their products.

31
00:01:29.020 --> 00:01:32.000
Now how does this pattern actually work in a nutshell?

32
00:01:32.000 --> 00:01:36.040
So you take common boilerplate code, common operations,

33
00:01:36.040 --> 00:01:40.060
and you hide them in an abstract base class.

34
00:01:40.060 --> 00:01:43.050
The common flows that are always captured

35
00:01:43.050 --> 00:01:46.060
in this overarching algorithm and what you do then

36
00:01:46.060 --> 00:01:49.000
is you take and make abstract methods

37
00:01:49.000 --> 00:01:52.020
for the variations in code and you call those

38
00:01:52.020 --> 00:01:54.030
from those overarching algorithm.

39
00:01:54.030 --> 00:01:56.070
This becomes really really clear when we look

40
00:01:56.070 --> 00:01:59.040
at what it takes to make a JDBC call.

41
00:01:59.040 --> 00:02:01.090
And we'll get into that in here in a little bit.

42
00:02:01.090 --> 00:02:04.080
So the concrete implementations handle

43
00:02:04.080 --> 00:02:09.070
the variants of code and extend that common base class.

44
00:02:09.070 --> 00:02:12.040
So why would we want to do this?

45
00:02:12.040 --> 00:02:15.040
So most often these common code paths

46
00:02:15.040 --> 00:02:19.000
lead to code replication and by using templates

47
00:02:19.000 --> 00:02:22.040
you encourage the concepts of don't repeat yourself

48
00:02:22.040 --> 00:02:24.020
and code reuse.

49
00:02:24.020 --> 00:02:27.060
Error-prone code therefore can be solved once

50
00:02:27.060 --> 00:02:30.090
and reused across multiple implementations

51
00:02:30.090 --> 00:02:33.020
when they all behave in the exact same manner,

52
00:02:33.020 --> 00:02:35.020
or at least the same enough

53
00:02:35.020 --> 00:02:37.080
that we can templatize their behavior.

54
00:02:37.080 --> 00:02:40.090
Common task semantics can be templatized

55
00:02:40.090 --> 00:02:44.050
to reduce costs as well, because implementing new versions

56
00:02:44.050 --> 00:02:47.090
of the same pathway tend to be expensive and repetitive.

57
00:02:47.090 --> 00:02:50.070
So by using templates we can actually reduce

58
00:02:50.070 --> 00:02:53.000
the overall cost of development.

59
00:02:53.000 --> 00:02:56.010
So how would we go about creating a template.

60
00:02:56.010 --> 00:02:59.060
You're going to start with a base abstract class.

61
00:02:59.060 --> 00:03:02.020
You're going to define the template method.

62
00:03:02.020 --> 00:03:04.030
And you're going to implement your algorithm.

63
00:03:04.030 --> 00:03:06.080
Now the key here is that you want to extract,

64
00:03:06.080 --> 00:03:10.050
in that shared code path all of the abstract methods

65
00:03:10.050 --> 00:03:14.000
that your implementations will need to execute.

66
00:03:14.000 --> 00:03:16.010
So your algorithm will call those methods

67
00:03:16.010 --> 00:03:18.000
even though they're not implemented until you get

68
00:03:18.000 --> 00:03:20.060
to the concrete implementations.

69
00:03:20.060 --> 00:03:24.050
Now this template method needs to usually be marked as final

70
00:03:24.050 --> 00:03:27.020
because we don't want people modifying the template

71
00:03:27.020 --> 00:03:30.000
or else that really defeats the purpose of it.

72
00:03:30.000 --> 00:03:33.000
Now when we get to our concrete implementations,

73
00:03:33.000 --> 00:03:34.090
you're going to implement the abstract methods

74
00:03:34.090 --> 00:03:37.030
from the base class and once it's all wired

75
00:03:37.030 --> 00:03:39.060
you will get the full algorithm experience

76
00:03:39.060 --> 00:03:41.080
from within the base class.

77
00:03:41.080 --> 00:03:43.090
Now I literally too I was going to talk about JDBC

78
00:03:43.090 --> 00:03:46.000
and this is where I want to do that.

79
00:03:46.000 --> 00:03:49.030
In the JDBC world for example there are several things

80
00:03:49.030 --> 00:03:51.080
that must happen every time you go to the database

81
00:03:51.080 --> 00:03:53.010
to get data.

82
00:03:53.010 --> 00:03:55.050
You're going to start by creating a connection.

83
00:03:55.050 --> 00:03:57.040
After you have the connection you're going to create

84
00:03:57.040 --> 00:03:58.080
a statement.

85
00:03:58.080 --> 00:04:01.020
You're then going to apply the SQL to your statement

86
00:04:01.020 --> 00:04:03.060
and send that statement to the database.

87
00:04:03.060 --> 00:04:05.060
The database will then return with data

88
00:04:05.060 --> 00:04:07.030
which you will extract.

89
00:04:07.030 --> 00:04:10.070
Once you've extracted that data you can then close down

90
00:04:10.070 --> 00:04:13.030
your session by executing a rollback or a commit

91
00:04:13.030 --> 00:04:16.030
if it's an update or just closing it down.

92
00:04:16.030 --> 00:04:19.020
And at the very and you can close your connection.

93
00:04:19.020 --> 00:04:21.070
So out of all of that there's lots of repetitive things

94
00:04:21.070 --> 00:04:25.010
that happen every time and that's why the JDBC template

95
00:04:25.010 --> 00:04:27.060
makes database calls that much easier.

96
00:04:27.060 --> 00:04:28.090
And you'll find throughout the spring framework

97
00:04:28.090 --> 00:04:31.020
that the same thing happens with from all

98
00:04:31.020 --> 00:04:33.000
of the template classes that you're given

99
00:04:33.000 --> 00:04:34.000
from the framework.

