WEBVTT
1
00:00:00.050 --> 00:00:02.000
- So now that we've talked a little bit about

2
00:00:02.000 --> 00:00:05.020
the singleton pattern, let's jump into our ID's and let's

3
00:00:05.020 --> 00:00:06.090
go create some.

4
00:00:06.090 --> 00:00:10.060
So back in our project, let's open up source main java

5
00:00:10.060 --> 00:00:15.060
and our base package and once again as we've done before

6
00:00:15.060 --> 00:00:20.070
we'll create a new package this one called singleton.

7
00:00:20.070 --> 00:00:23.060
Now we're going to create a couple classes in here.

8
00:00:23.060 --> 00:00:26.020
The first one we're going to create is SingA.

9
00:00:26.020 --> 00:00:30.000
SingA is going to be our traditional singleton so we're

10
00:00:30.000 --> 00:00:39.040
going to start with private static SingA instance.

11
00:00:39.040 --> 00:00:46.060
Then we're going to make a private constructor on this guy.

12
00:00:46.060 --> 00:00:51.070
Now we're going to make a public static SingA method

13
00:00:51.070 --> 00:00:56.030
called getInstance and you can see that IntelliJ knows

14
00:00:56.030 --> 00:00:58.030
what I'm doing here.

15
00:00:58.030 --> 00:01:00.080
It's suggesting names of methods and stuff for me.

16
00:01:00.080 --> 00:01:03.070
It kind of gives the feeling that this is a singleton.

17
00:01:03.070 --> 00:01:06.090
But we'll go ahead and continue to create ours so if null

18
00:01:06.090 --> 00:01:11.050
equals instance and I do prefer yoda syntax

19
00:01:11.050 --> 00:01:14.090
with my null checks.

20
00:01:14.090 --> 00:01:22.000
We will now synchronize on the class itself.

21
00:01:22.000 --> 00:01:25.000
This gives us a great spot to synchronize on 'cause that's

22
00:01:25.000 --> 00:01:27.010
static in the cross loader.

23
00:01:27.010 --> 00:01:30.070
Once again, we'll do our null check.

24
00:01:30.070 --> 00:01:33.060
This gives us just a second opportunity now,

25
00:01:33.060 --> 00:01:35.090
to make that we are still null.

26
00:01:35.090 --> 00:01:42.020
And, if we are, instance equals new SingA.

27
00:01:42.020 --> 00:01:43.020
And then at the very end,

28
00:01:43.020 --> 00:01:46.060
we just need to return our instance.

29
00:01:46.060 --> 00:01:49.030
So, if it's null when we come in, we'll create it.

30
00:01:49.030 --> 00:01:51.070
Otherwise, we'll just return it.

31
00:01:51.070 --> 00:01:54.090
Let's go ahead and create another class.

32
00:01:54.090 --> 00:01:58.010
And this one is going to be SingB,

33
00:01:58.010 --> 00:02:01.000
and all we are going to do here is do @component.

34
00:02:01.000 --> 00:02:03.050
Because that means you auto config with SpringBoot,

35
00:02:03.050 --> 00:02:06.040
this will automatically get loaded into the bean factory

36
00:02:06.040 --> 00:02:08.060
with that @ component annotation.

37
00:02:08.060 --> 00:02:12.070
So at this point, it is a singleton when it comes to spring.

38
00:02:12.070 --> 00:02:14.010
And I'm going to prove that to you.

39
00:02:14.010 --> 00:02:16.070
Let's go ahead and open up our test package,

40
00:02:16.070 --> 00:02:19.050
and you'll see that there is a test that came for free

41
00:02:19.050 --> 00:02:21.080
with SpringBoot.

42
00:02:21.080 --> 00:02:23.080
So we're going to use this test to prove to you that

43
00:02:23.080 --> 00:02:25.020
all of these are singletons.

44
00:02:25.020 --> 00:02:26.070
And the way we're going to do that is,

45
00:02:26.070 --> 00:02:28.020
first of all we're going to autowire in

46
00:02:28.020 --> 00:02:32.040
a couple instances of SingB

47
00:02:32.040 --> 00:02:37.060
called SingB1, go ahead and import that.

48
00:02:37.060 --> 00:02:43.020
And, SingB2... and we'll need to autowire that one as well.

49
00:02:43.020 --> 00:02:45.000
So now those two instances are autowired,

50
00:02:45.000 --> 00:02:46.020
so now lets write our test.

51
00:02:46.020 --> 00:02:55.030
So, @test... public void test singletons.

52
00:02:55.030 --> 00:03:01.030
So the first thing that I want to do is do SingA1...

53
00:03:01.030 --> 00:03:06.000
equals SingA dot get instance.

54
00:03:06.000 --> 00:03:14.070
And now we're going to do SingA2 equals SingA dot get instance.

55
00:03:14.070 --> 00:03:17.000
And what we are going to expect here

56
00:03:17.000 --> 00:03:21.020
is that first of all, they are not null.

57
00:03:21.020 --> 00:03:23.080
And, we're just going to check one of them because

58
00:03:23.080 --> 00:03:25.000
the way we're going to write this test,

59
00:03:25.000 --> 00:03:26.090
that will be sufficient.

60
00:03:26.090 --> 00:03:29.000
And that's a static insert on org. J unit,

61
00:03:29.000 --> 00:03:32.090
if you've never used those libraries.

62
00:03:32.090 --> 00:03:37.050
And then we're going to do an assert... same.

63
00:03:37.050 --> 00:03:40.090
And what same says is that these are the same object.

64
00:03:40.090 --> 00:03:43.080
If we go look at the Java doc on this,

65
00:03:43.080 --> 00:03:45.090
you'll see that it says that assert

66
00:03:45.090 --> 00:03:48.060
the two objects referred to the same object.

67
00:03:48.060 --> 00:03:52.000
So this is actually pointers to the same object.

68
00:03:52.000 --> 00:03:58.010
So we're going to say that SingA1 and SingA2 are the same.

69
00:03:58.010 --> 00:04:04.030
And now we're going to do an assert, not null

70
00:04:04.030 --> 00:04:07.040
on SingB1, and I Know that's going to pass because

71
00:04:07.040 --> 00:04:09.050
Spring would have had a problem if it couldn't

72
00:04:09.050 --> 00:04:13.080
of autowired that in.

73
00:04:13.080 --> 00:04:20.060
And now we'll do our same check again.

74
00:04:20.060 --> 00:04:23.020
And now we can run our or mess it.

75
00:04:23.020 --> 00:04:25.040
And we just need to run this one test,

76
00:04:25.040 --> 00:04:27.060
the application contacts will start to inject

77
00:04:27.060 --> 00:04:30.040
in those two sings.

78
00:04:30.040 --> 00:04:34.050
And... Let me expand this window a little bit for you.

79
00:04:34.050 --> 00:04:36.080
And what we expect to see is a green test,

80
00:04:36.080 --> 00:04:37.090
cause everything was the same

81
00:04:37.090 --> 00:04:39.060
that we expected to be the same,

82
00:04:39.060 --> 00:04:41.030
and everything was populated.

83
00:04:41.030 --> 00:04:43.040
And that's how you write a traditional singleton

84
00:04:43.040 --> 00:04:47.030
as well as leverage singletons in the Spring library.

85
00:04:47.030 --> 00:04:50.000
And they are compatible, you can do both of those

86
00:04:50.000 --> 00:04:53.060
if you actually use Java Config to inject your singleton

87
00:04:53.060 --> 00:04:55.000
as a bean.

