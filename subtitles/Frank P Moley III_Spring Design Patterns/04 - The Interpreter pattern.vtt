WEBVTT
1
00:00:00.040 --> 00:00:01.080
- [Instructor] In the final behavior pattern

2
00:00:01.080 --> 00:00:03.000
that we're going to talk about,

3
00:00:03.000 --> 00:00:06.000
is one that has a very specific use case in Spring,

4
00:00:06.000 --> 00:00:08.060
but it's not one that I've even ever implemented myself.

5
00:00:08.060 --> 00:00:11.030
It's very, very seldom that you would use this.

6
00:00:11.030 --> 00:00:13.070
So the interpreter pattern's primary use case

7
00:00:13.070 --> 00:00:15.070
in the Spring framework, is through the

8
00:00:15.070 --> 00:00:18.080
Spring Expression Language, and this might allude

9
00:00:18.080 --> 00:00:21.020
to what this pattern is used for.

10
00:00:21.020 --> 00:00:24.030
This pattern's use cases are as I mentioned, limited,

11
00:00:24.030 --> 00:00:28.060
but most often if not always are used with user input.

12
00:00:28.060 --> 00:00:32.050
The input is parsed and converted into specific commands,

13
00:00:32.050 --> 00:00:35.050
or functions, and that parsing behavior is

14
00:00:35.050 --> 00:00:38.050
what the interpreter is providing.

15
00:00:38.050 --> 00:00:41.040
Expressions are deemed terminal or non-terminal

16
00:00:41.040 --> 00:00:44.000
to determine if you need to do future parsing.

17
00:00:44.000 --> 00:00:47.000
So it gives you this sort of tree structure where you're

18
00:00:47.000 --> 00:00:49.060
parsing commands until you get to the end.

19
00:00:49.060 --> 00:00:51.080
And if you've ever looked at how program languages

20
00:00:51.080 --> 00:00:54.090
are parsed, this is sort of the same pattern,

21
00:00:54.090 --> 00:00:58.030
only applied to a system instead of a programming language.

22
00:00:58.030 --> 00:01:01.000
So why would we want to go about doing this?

23
00:01:01.000 --> 00:01:04.060
You provide a way to interpret user input, having a variety

24
00:01:04.060 --> 00:01:08.020
of formats, because you can't always control the user input

25
00:01:08.020 --> 00:01:10.040
as it comes in.

26
00:01:10.040 --> 00:01:13.070
This prevents the ultimate commands from becoming littered

27
00:01:13.070 --> 00:01:16.000
with expression determining logic.

28
00:01:16.000 --> 00:01:18.050
Think about just a simple use case of an expression coming

29
00:01:18.050 --> 00:01:23.010
in all caps versus all lower case versus mixed case.

30
00:01:23.010 --> 00:01:26.080
If each command had to make that same determination of,

31
00:01:26.080 --> 00:01:30.050
is it all upper, is it all lower, is it mixed, what is it?

32
00:01:30.050 --> 00:01:33.070
That code becomes littered throughout your entire code base,

33
00:01:33.070 --> 00:01:35.070
when executing these commands.

34
00:01:35.070 --> 00:01:38.090
By using the interpreter, you can interpret that once

35
00:01:38.090 --> 00:01:42.000
and convert it into a common command structure.

36
00:01:42.000 --> 00:01:43.060
Also, an interpreter provides a way

37
00:01:43.060 --> 00:01:46.090
to make context aware decisions and you can mix

38
00:01:46.090 --> 00:01:50.010
and match these as long as the end result is the same.

39
00:01:50.010 --> 00:01:52.020
And that's the purpose of the interpreter.

40
00:01:52.020 --> 00:01:55.000
I want to mix and match all of these conditions that the user

41
00:01:55.000 --> 00:01:58.010
can send me data in, so that I can get to the ultimate

42
00:01:58.010 --> 00:02:01.050
end result of what they wanted it to be.

43
00:02:01.050 --> 00:02:04.040
Again, back to that use case of upper and lower,

44
00:02:04.040 --> 00:02:07.010
or what if it's in Unicode versus ASCII.

45
00:02:07.010 --> 00:02:11.010
Again, these things can add changes to your application,

46
00:02:11.010 --> 00:02:14.050
if you don't control it through an interpreter pattern.

47
00:02:14.050 --> 00:02:16.060
So, how would you go about creating one of these,

48
00:02:16.060 --> 00:02:18.020
if you wanted to?

49
00:02:18.020 --> 00:02:20.080
First and foremost, you need to start with your expression,

50
00:02:20.080 --> 00:02:23.020
and it's going to be an interface.

51
00:02:23.020 --> 00:02:24.090
So you're going to have a concrete implementation

52
00:02:24.090 --> 00:02:27.000
that matches your evaluation.

53
00:02:27.000 --> 00:02:30.000
You'll have terminal and non-terminal implementations,

54
00:02:30.000 --> 00:02:32.000
that way you know whether you need to keep going through

55
00:02:32.000 --> 00:02:34.030
the parsing, or whether you need to stop,

56
00:02:34.030 --> 00:02:36.020
and all of these are going to implement the

57
00:02:36.020 --> 00:02:38.070
expression interface itself.

58
00:02:38.070 --> 00:02:41.020
And finally, you're going to want to create a parser

59
00:02:41.020 --> 00:02:44.070
that follows the expression logic and call the end result.

60
00:02:44.070 --> 00:02:46.070
This is what's going to call through into terminal

61
00:02:46.070 --> 00:02:50.010
and non-terminal calls, until everything is terminal

62
00:02:50.010 --> 00:02:53.040
and then it can execute the final operation based

63
00:02:53.040 --> 00:02:56.080
on the interpretation of the command that was passed in.

64
00:02:56.080 --> 00:02:59.020
Then again, this is another one of these obscure patterns

65
00:02:59.020 --> 00:03:02.020
that we see used in the framework, but not too often

66
00:03:02.020 --> 00:03:04.040
do we implement them ourselves.

67
00:03:04.040 --> 00:03:06.050
But if you ever have a use case where you have

68
00:03:06.050 --> 00:03:10.000
to interpret user input, use this pattern.

