WEBVTT
1
00:00:00.060 --> 00:00:02.010
- [Instructor] The Proxy pattern is another one

2
00:00:02.010 --> 00:00:04.080
of those behavioral patterns that you can see used

3
00:00:04.080 --> 00:00:07.000
throughout the entire Spring library.

4
00:00:07.000 --> 00:00:09.000
As a matter of fact, each and every bean

5
00:00:09.000 --> 00:00:11.090
that you create gets at least one proxy

6
00:00:11.090 --> 00:00:15.020
wrapped around it ever since Spring 4.

7
00:00:15.020 --> 00:00:17.050
Additional proxies are added,

8
00:00:17.050 --> 00:00:20.020
usually through the use of annotations

9
00:00:20.020 --> 00:00:23.030
when you are writing Spring code using the Spring framework.

10
00:00:23.030 --> 00:00:25.080
Now, if you want to create your own proxies

11
00:00:25.080 --> 00:00:27.070
and you're doing Spring development,

12
00:00:27.070 --> 00:00:30.020
you're usually going to do this by the creation

13
00:00:30.020 --> 00:00:34.020
of an aspect and using aspect-oriented programming.

14
00:00:34.020 --> 00:00:36.080
I have a lot of information about how to write aspects

15
00:00:36.080 --> 00:00:38.020
and how to use them

16
00:00:38.020 --> 00:00:41.020
in my course, Spring: Framework in Depth,

17
00:00:41.020 --> 00:00:44.090
and as such, we're not going to jump into that in this course.

18
00:00:44.090 --> 00:00:48.060
The way the proxy pattern works in a nutshell,

19
00:00:48.060 --> 00:00:52.080
is that you start with the use of an intermediate object

20
00:00:52.080 --> 00:00:55.010
in place of a real object.

21
00:00:55.010 --> 00:00:56.050
Now, what does that really mean?

22
00:00:56.050 --> 00:00:58.060
Both of these objects, the intermediary object

23
00:00:58.060 --> 00:01:02.050
and the real object will share the same interface

24
00:01:02.050 --> 00:01:05.080
but all of your work happens on the intermediary object

25
00:01:05.080 --> 00:01:07.050
and the real object just waited

26
00:01:07.050 --> 00:01:09.070
until we actually have to act on it.

27
00:01:09.070 --> 00:01:12.040
And this is because the intermediary object

28
00:01:12.040 --> 00:01:16.030
protects the real object and protects your run time.

29
00:01:16.030 --> 00:01:19.070
The intermediary controls the instantiation

30
00:01:19.070 --> 00:01:22.070
and use of the real object.

31
00:01:22.070 --> 00:01:26.000
And the intermediary can add behavior to the real object

32
00:01:26.000 --> 00:01:28.080
as it sees fit, depending on which type

33
00:01:28.080 --> 00:01:31.000
of a proxy you're writing.

34
00:01:31.000 --> 00:01:34.020
Now, why might you go about doing this?

35
00:01:34.020 --> 00:01:36.070
Often times, you will use an intermediary

36
00:01:36.070 --> 00:01:40.060
or a proxy when the operations on the real object

37
00:01:40.060 --> 00:01:42.050
are very, very expensive.

38
00:01:42.050 --> 00:01:44.020
And you need to protect that and make sure

39
00:01:44.020 --> 00:01:48.000
that it is only called when absolutely needed.

40
00:01:48.000 --> 00:01:51.000
Also, you would use a proxy if you need to add behavior

41
00:01:51.000 --> 00:01:55.040
to a method or to multiple methods before they are called

42
00:01:55.040 --> 00:01:57.080
under certain situations.

43
00:01:57.080 --> 00:01:59.060
And finally, one of the use cases

44
00:01:59.060 --> 00:02:03.000
that you find often, in older Java code,

45
00:02:03.000 --> 00:02:06.010
is if you have to do remote object access.

46
00:02:06.010 --> 00:02:08.010
You would want to wrap that remote object

47
00:02:08.010 --> 00:02:11.060
with a local proxy, do all of your work with the local proxy

48
00:02:11.060 --> 00:02:15.000
and only make the remote call when you absolutely had to

49
00:02:15.000 --> 00:02:19.030
because of the cost associated with that network latency.

50
00:02:19.030 --> 00:02:22.040
So how do you go about creating a proxy?

51
00:02:22.040 --> 00:02:25.030
You're going to start with an interface.

52
00:02:25.030 --> 00:02:27.010
You're going to create two objects.

53
00:02:27.010 --> 00:02:29.010
The first is the real object

54
00:02:29.010 --> 00:02:32.000
and that's going to extend the interface.

55
00:02:32.000 --> 00:02:36.020
The second object also extends that same interface

56
00:02:36.020 --> 00:02:38.020
but in addition to extending the interface,

57
00:02:38.020 --> 00:02:42.010
it keeps a handle to the real object.

58
00:02:42.010 --> 00:02:44.010
And finally, you create the object,

59
00:02:44.010 --> 00:02:48.030
you add the behavior and other protections as needed

60
00:02:48.030 --> 00:02:51.020
within the proxy object itself.

61
00:02:51.020 --> 00:02:53.070
This way you control the entire life cycle

62
00:02:53.070 --> 00:02:56.030
of the real object within the proxy

63
00:02:56.030 --> 00:02:57.090
so that there's no confusion

64
00:02:57.090 --> 00:03:00.060
about which object is doing what.

65
00:03:00.060 --> 00:03:02.060
Now, I alluded to a little bit before

66
00:03:02.060 --> 00:03:04.000
about the implementation

67
00:03:04.000 --> 00:03:08.030
and why we're not going to get into one in this course.

68
00:03:08.030 --> 00:03:12.040
So when doing Spring development, seldom if ever,

69
00:03:12.040 --> 00:03:14.020
would you use a raw Java proxy

70
00:03:14.020 --> 00:03:17.000
because you don't really have to.

71
00:03:17.000 --> 00:03:21.000
What you would do is leverage aspect-oriented programming

72
00:03:21.000 --> 00:03:23.030
and in doing so you are going to create an aspect

73
00:03:23.030 --> 00:03:25.000
and everything that comes with it.

74
00:03:25.000 --> 00:03:26.070
The pointcut and the joinpoint

75
00:03:26.070 --> 00:03:29.060
and that's beyond the scope of this course.

76
00:03:29.060 --> 00:03:31.050
But as I mentioned, I do have a course

77
00:03:31.050 --> 00:03:33.060
where I talk all about how to create aspects

78
00:03:33.060 --> 00:03:36.070
and I encourage you to take a look at that.

79
00:03:36.070 --> 00:03:40.040
However, there are aspects that you can use in Spring

80
00:03:40.040 --> 00:03:42.070
and often you will use in Spring

81
00:03:42.070 --> 00:03:47.000
to do exactly what you need to with a proxy,

82
00:03:47.000 --> 00:03:48.020
things like @Transactional

83
00:03:48.020 --> 00:03:49.080
to create transactional boundaries

84
00:03:49.080 --> 00:03:53.050
in database operations, and @Cacheable to store data

85
00:03:53.050 --> 00:03:56.060
in a local cache or distributed cache.

86
00:03:56.060 --> 00:03:59.060
And there's several others that come with the framework.

87
00:03:59.060 --> 00:04:02.050
Again, all of these follow the same pattern,

88
00:04:02.050 --> 00:04:06.040
they provide a proxy that adds behavior to your object

89
00:04:06.040 --> 00:04:10.000
while isolating it through the use of a shared interface.

