WEBVTT
1
00:00:00.050 --> 00:00:01.040
- [Instructor] Of all the patterns

2
00:00:01.040 --> 00:00:02.020
that we're going to talk about

3
00:00:02.020 --> 00:00:03.020
on this course,

4
00:00:03.020 --> 00:00:06.050
the prototype pattern is the one that I have used the least

5
00:00:06.050 --> 00:00:08.010
in raw Java.

6
00:00:08.010 --> 00:00:09.080
But it's one that I use quite often

7
00:00:09.080 --> 00:00:11.010
in Spring.

8
00:00:11.010 --> 00:00:12.060
And we're going to spend quite a bit of time focusing

9
00:00:12.060 --> 00:00:16.010
on the Spring side of this pattern.

10
00:00:16.010 --> 00:00:19.000
So let's talk about how it's used in Spring.

11
00:00:19.000 --> 00:00:22.070
Any bean that has its scope marked as prototype

12
00:00:22.070 --> 00:00:25.050
are treated as prototype beans.

13
00:00:25.050 --> 00:00:29.020
Now in Spring, the bean configuration itself

14
00:00:29.020 --> 00:00:31.050
is what is used as the prototype.

15
00:00:31.050 --> 00:00:33.030
In fact, in Java config,

16
00:00:33.030 --> 00:00:36.040
the actual bean method gets called

17
00:00:36.040 --> 00:00:40.000
every time that you need an instance of that object

18
00:00:40.000 --> 00:00:42.010
through the prototype scoping.

19
00:00:42.010 --> 00:00:45.020
New instances are created, not cloned

20
00:00:45.020 --> 00:00:48.030
as we will see in a traditional Java implementation

21
00:00:48.030 --> 00:00:50.010
when needed by the runtime

22
00:00:50.010 --> 00:00:51.040
and this is important.

23
00:00:51.040 --> 00:00:54.000
None of this work is actually done at startup,

24
00:00:54.000 --> 00:00:56.080
it is not done until the instance is actually needed

25
00:00:56.080 --> 00:01:00.050
and injected into the application context

26
00:01:00.050 --> 00:01:02.060
or the runtime itself.

27
00:01:02.060 --> 00:01:04.080
Now the traditional Java pattern

28
00:01:04.080 --> 00:01:05.090
is often done

29
00:01:05.090 --> 00:01:09.090
through a very straightforward prototypical manner.

30
00:01:09.090 --> 00:01:12.020
An instance is cloned at runtime

31
00:01:12.020 --> 00:01:13.070
and cloned is the key here.

32
00:01:13.070 --> 00:01:15.050
It's cloned at runtime

33
00:01:15.050 --> 00:01:17.020
to give a new instance

34
00:01:17.020 --> 00:01:18.070
that are not the prototype

35
00:01:18.070 --> 00:01:20.010
but act the same.

36
00:01:20.010 --> 00:01:24.070
And often, in fact usually have the same state.

37
00:01:24.070 --> 00:01:26.030
In Java this is usually done

38
00:01:26.030 --> 00:01:28.040
through this Cloneable interface.

39
00:01:28.040 --> 00:01:31.010
In fact, every time I've ever seen a real prototype

40
00:01:31.010 --> 00:01:32.060
written in the wild,

41
00:01:32.060 --> 00:01:35.030
it's done using this exact same pattern

42
00:01:35.030 --> 00:01:36.070
which is obviously the purpose

43
00:01:36.070 --> 00:01:38.000
of a design pattern.

44
00:01:38.000 --> 00:01:40.000
So you use this Cloneable interface

45
00:01:40.000 --> 00:01:41.050
in a sub-class

46
00:01:41.050 --> 00:01:44.060
throughout the rest of your application runtime.

47
00:01:44.060 --> 00:01:47.050
Now, prototypes are usually done with deep clones

48
00:01:47.050 --> 00:01:49.010
and deep clones are key

49
00:01:49.010 --> 00:01:51.030
if you want to maintain safety

50
00:01:51.030 --> 00:01:53.080
especially thread safety of your object.

51
00:01:53.080 --> 00:01:56.020
Because if you're just doing shallow clones,

52
00:01:56.020 --> 00:01:58.010
all of those pointers stay the same

53
00:01:58.010 --> 00:02:00.000
and it kind of defeats the purpose

54
00:02:00.000 --> 00:02:03.010
of why you would do this in the first place.

55
00:02:03.010 --> 00:02:04.010
So with that being said,

56
00:02:04.010 --> 00:02:07.040
let's talk about the why's on this pattern.

57
00:02:07.040 --> 00:02:09.060
Now, it's very useful

58
00:02:09.060 --> 00:02:12.030
when object creation is expensive.

59
00:02:12.030 --> 00:02:14.090
But the wrapper has to be unique.

60
00:02:14.090 --> 00:02:16.090
So if the object creation is expensive

61
00:02:16.090 --> 00:02:19.020
and the wrapper has to be the same,

62
00:02:19.020 --> 00:02:21.090
we would go through a singleton pattern usually.

63
00:02:21.090 --> 00:02:25.000
But when the wrapper has to be unique and different,

64
00:02:25.000 --> 00:02:27.070
that's when the prototype comes into play.

65
00:02:27.070 --> 00:02:31.020
This is useful when objects that must act thread safe

66
00:02:31.020 --> 00:02:32.090
but need to store state.

67
00:02:32.090 --> 00:02:34.080
So the times that I've seen them

68
00:02:34.080 --> 00:02:37.000
are often things like shopping carts

69
00:02:37.000 --> 00:02:39.020
where you actually want the same behavior

70
00:02:39.020 --> 00:02:41.010
but the individual items in the cart

71
00:02:41.010 --> 00:02:42.030
are different,

72
00:02:42.030 --> 00:02:44.050
so a prototype really adds some value

73
00:02:44.050 --> 00:02:46.040
because usually there's things

74
00:02:46.040 --> 00:02:48.040
that are coming with that object

75
00:02:48.040 --> 00:02:50.090
that are needed to maintain the behavior

76
00:02:50.090 --> 00:02:53.000
and they're shared across the entire application

77
00:02:53.000 --> 00:02:56.050
like tax tables and calculations and whatnot.

78
00:02:56.050 --> 00:02:58.020
Now, the benefit here

79
00:02:58.020 --> 00:03:00.050
when it comes to all of this creation

80
00:03:00.050 --> 00:03:03.060
is that you often are providing cost savings.

81
00:03:03.060 --> 00:03:06.050
If we had to go regenerate the entire tax calculation

82
00:03:06.050 --> 00:03:09.080
at runtime, we would be taking a lot of effort

83
00:03:09.080 --> 00:03:12.000
when we're doing the shopping cart.

84
00:03:12.000 --> 00:03:15.020
When we can pass that around through this prototype,

85
00:03:15.020 --> 00:03:16.060
we don't have to create it every time

86
00:03:16.060 --> 00:03:18.020
because it's very expensive

87
00:03:18.020 --> 00:03:20.000
and it reduces the cost

88
00:03:20.000 --> 00:03:22.070
of runtime object creation

89
00:03:22.070 --> 00:03:24.050
and obviously speed is everything

90
00:03:24.050 --> 00:03:25.090
especially if you're looking at something

91
00:03:25.090 --> 00:03:28.010
like an e-commerce site.

92
00:03:28.010 --> 00:03:31.030
So how would we go about creating this in the Java world?

93
00:03:31.030 --> 00:03:33.040
In my example that we're going to do in the next video

94
00:03:33.040 --> 00:03:35.030
we're going to show you in the Spring world.

95
00:03:35.030 --> 00:03:38.030
But in the Java world it's a little bit different.

96
00:03:38.030 --> 00:03:41.080
So in Java, you create an abstract base class

97
00:03:41.080 --> 00:03:44.030
that implements Cloneable.

98
00:03:44.030 --> 00:03:45.080
You extend that class

99
00:03:45.080 --> 00:03:48.060
with your prototype instances.

100
00:03:48.060 --> 00:03:50.070
Then, you override the clone method

101
00:03:50.070 --> 00:03:53.020
in those prototype instances

102
00:03:53.020 --> 00:03:55.060
to provide the class specific behavior

103
00:03:55.060 --> 00:03:56.080
that you need.

104
00:03:56.080 --> 00:03:58.090
That way you're controlling what is cloned

105
00:03:58.090 --> 00:04:01.080
and what is created new.

106
00:04:01.080 --> 00:04:05.050
You have to be sure to clone sensitive sub-objects

107
00:04:05.050 --> 00:04:07.040
to prevent threading issues.

108
00:04:07.040 --> 00:04:09.040
And again, this is very very important.

109
00:04:09.040 --> 00:04:12.020
If the sub-object can change at runtime,

110
00:04:12.020 --> 00:04:14.030
you have to make sure you clone it.

111
00:04:14.030 --> 00:04:17.040
If it doesn't change, you have to keep it static

112
00:04:17.040 --> 00:04:19.060
and protect it's access.

113
00:04:19.060 --> 00:04:22.010
This prototype pattern can be very confusing

114
00:04:22.010 --> 00:04:23.060
if you don't really think

115
00:04:23.060 --> 00:04:26.080
about all the use cases of your objects.

116
00:04:26.080 --> 00:04:29.010
But again, this is not something I've seen in the wild

117
00:04:29.010 --> 00:04:31.030
outside of Spring very often.

118
00:04:31.030 --> 00:04:32.010
So for this course

119
00:04:32.010 --> 00:04:34.060
we're going to focus on the Spring implementation

120
00:04:34.060 --> 00:04:36.000
and let's jump into that.

