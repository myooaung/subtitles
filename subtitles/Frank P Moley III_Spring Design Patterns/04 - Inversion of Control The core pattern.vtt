WEBVTT
1
00:00:00.060 --> 00:00:02.090
- [Lecturer] As I mention, the Inversion of Control pattern

2
00:00:02.090 --> 00:00:05.050
is a core pattern in the Spring Framework.

3
00:00:05.050 --> 00:00:08.050
And in my opinion, is the core pattern

4
00:00:08.050 --> 00:00:11.040
for for all of Spring's operational behavior.

5
00:00:11.040 --> 00:00:14.050
Now, let's talk a little bit about what IoC is.

6
00:00:14.050 --> 00:00:16.000
As I alluded to before,

7
00:00:16.000 --> 00:00:19.000
it is not a Gang of Four design pattern.

8
00:00:19.000 --> 00:00:22.060
But nonetheless, this is architectural pattern

9
00:00:22.060 --> 00:00:26.090
for relegating control of dependencies to the container

10
00:00:26.090 --> 00:00:30.030
instead of the developer having to be responsible

11
00:00:30.030 --> 00:00:33.000
for the construction of those dependencies.

12
00:00:33.000 --> 00:00:36.060
Now, often this is called Dependency Injection,

13
00:00:36.060 --> 00:00:40.030
though, that is only one flavor of IoC.

14
00:00:40.030 --> 00:00:42.060
Now, I tend to make that mistake

15
00:00:42.060 --> 00:00:45.030
and call IoC and Dependency injection the same thing,

16
00:00:45.030 --> 00:00:46.090
and that's just natural,

17
00:00:46.090 --> 00:00:48.080
because from a Spring Framework perspective,

18
00:00:48.080 --> 00:00:52.050
Dependency Injection is one of the primary benefits

19
00:00:52.050 --> 00:00:55.040
of using the IoC pattern.

20
00:00:55.040 --> 00:00:58.050
And next to one of most develpers actually interact with

21
00:00:58.050 --> 00:01:01.000
on a regular basis.

22
00:01:01.000 --> 00:01:03.040
Now, let's talk a little bit about how it works.

23
00:01:03.040 --> 00:01:06.080
A central container constructs

24
00:01:06.080 --> 00:01:09.060
and maintains all objects references

25
00:01:09.060 --> 00:01:13.020
and subsequent state of those objects.

26
00:01:13.020 --> 00:01:18.000
When another component within the ecosystem needs an object,

27
00:01:18.000 --> 00:01:21.000
the IoC container hands it to them

28
00:01:21.000 --> 00:01:24.000
at runtime or at start up.

29
00:01:24.000 --> 00:01:25.090
This provides centralized control,

30
00:01:25.090 --> 00:01:29.090
and management for all objects in the runtime.

31
00:01:29.090 --> 00:01:31.090
Now, in Spring,

32
00:01:31.090 --> 00:01:34.030
the IoC container

33
00:01:34.030 --> 00:01:36.070
manages all of your dependencies,

34
00:01:36.070 --> 00:01:39.080
at least the one that you hand to Spring.

35
00:01:39.080 --> 00:01:42.040
So, it will not manage those dependencies

36
00:01:42.040 --> 00:01:43.070
that you don't ask it to,

37
00:01:43.070 --> 00:01:46.050
but once you ask it to manage a dependency,

38
00:01:46.050 --> 00:01:50.070
it will do so to the life cycle of the application,

39
00:01:50.070 --> 00:01:53.060
and not allow them to be destroyed until

40
00:01:53.060 --> 00:01:56.080
it goes into its shutdown routine.

41
00:01:56.080 --> 00:01:58.010
There is an exception to this,

42
00:01:58.010 --> 00:01:59.080
and that is the way the prototypes work,

43
00:01:59.080 --> 00:02:02.000
but we'll talk about that when we get there.

44
00:02:02.000 --> 00:02:04.060
Objects are injected at runtime,

45
00:02:04.060 --> 00:02:06.090
not at compile time.

46
00:02:06.090 --> 00:02:08.030
Now, what do I mean by that?

47
00:02:08.030 --> 00:02:11.010
When you're writing a traditional application

48
00:02:11.010 --> 00:02:13.020
and not using IoC,

49
00:02:13.020 --> 00:02:15.000
you construct the object

50
00:02:15.000 --> 00:02:18.000
and inject it in your code.

51
00:02:18.000 --> 00:02:22.020
In Spring, the objects are constructed at startup

52
00:02:22.020 --> 00:02:24.020
and injected into the runtime,

53
00:02:24.020 --> 00:02:27.060
so the developer doesn't really have to deal with them

54
00:02:27.060 --> 00:02:31.010
when they're actually writing and compiling their code.

55
00:02:31.010 --> 00:02:35.000
An object accepts the dependencies for construction

56
00:02:35.000 --> 00:02:38.040
instead of you constructing them.

57
00:02:38.040 --> 00:02:41.090
Now, in reality, you still have to tell Spring

58
00:02:41.090 --> 00:02:45.060
how to construct your objects under many circumstances,

59
00:02:45.060 --> 00:02:47.070
but you only do it once

60
00:02:47.070 --> 00:02:50.020
instead of lettering it throughout your code,

61
00:02:50.020 --> 00:02:52.020
and that's where IoC has power.

62
00:02:52.020 --> 00:02:54.030
So, what are some of the benefits of IoC

63
00:02:54.030 --> 00:02:56.010
and the ones that we care about?

64
00:02:56.010 --> 00:03:00.000
First and foremost, it reduces noise in your code.

65
00:03:00.000 --> 00:03:04.060
Consider the consequence of creating a JDBC connection

66
00:03:04.060 --> 00:03:07.000
for instance everywhere in your application,

67
00:03:07.000 --> 00:03:10.000
where you make a connection to the database.

68
00:03:10.000 --> 00:03:13.070
That can get really, really loud from a code perspective,

69
00:03:13.070 --> 00:03:15.060
and when you think about the fact

70
00:03:15.060 --> 00:03:17.030
that all of that's boilerplate,

71
00:03:17.030 --> 00:03:19.030
yeah, we'll talk about that with the template pattern.

72
00:03:19.030 --> 00:03:22.070
But the point is that when you use IoC,

73
00:03:22.070 --> 00:03:24.090
because you're not constructing those objects,

74
00:03:24.090 --> 00:03:27.040
you reduce the noise in your code,

75
00:03:27.040 --> 00:03:30.090
it also reduces object coupling,

76
00:03:30.090 --> 00:03:34.030
because you are handed a dependency into your object,

77
00:03:34.030 --> 00:03:36.070
you're not as tightly coupled to it,

78
00:03:36.070 --> 00:03:40.030
because you actually don't need to know how it's constructed

79
00:03:40.030 --> 00:03:44.030
at compiled time or at writing of code time.

80
00:03:44.030 --> 00:03:46.060
It also reduces the defects

81
00:03:46.060 --> 00:03:49.040
that arrives from incorrect construction.

82
00:03:49.040 --> 00:03:50.090
Now what do I mean by that?

83
00:03:50.090 --> 00:03:52.070
Normally when we construct an object,

84
00:03:52.070 --> 00:03:55.050
we write a new line and then we construct the object

85
00:03:55.050 --> 00:03:57.020
and add everything that we mean,

86
00:03:57.020 --> 00:03:59.090
and then next time that we need to construct that object,

87
00:03:59.090 --> 00:04:02.070
we tend to copy and paste,

88
00:04:02.070 --> 00:04:05.080
and while that may seem okay in some circumstances,

89
00:04:05.080 --> 00:04:08.050
that does cause defects to arise,

90
00:04:08.050 --> 00:04:09.060
you missed a line,

91
00:04:09.060 --> 00:04:11.060
you needed to change a value,

92
00:04:11.060 --> 00:04:15.030
something is different, and when you copy paste,

93
00:04:15.030 --> 00:04:16.090
you ask for defects,

94
00:04:16.090 --> 00:04:19.060
that's just the nature of software development.

95
00:04:19.060 --> 00:04:22.080
So, because the IoC container handles all of construction,

96
00:04:22.080 --> 00:04:25.050
you reduce those defects that arise

97
00:04:25.050 --> 00:04:28.010
from the construction itself.

98
00:04:28.010 --> 00:04:31.040
Now, the core is the Application Context.

99
00:04:31.040 --> 00:04:35.050
Spring's Application Context is the IoC Container,

100
00:04:35.050 --> 00:04:37.080
another pattern is also in play,

101
00:04:37.080 --> 00:04:38.070
and we're going to talk about that

102
00:04:38.070 --> 00:04:40.030
and that is the Bean Factory,

103
00:04:40.030 --> 00:04:42.040
which leverages the factory pattern.

104
00:04:42.040 --> 00:04:47.080
But again, the Ioc container is the Application Context

105
00:04:47.080 --> 00:04:51.060
and it leverages configuration to create the beans

106
00:04:51.060 --> 00:04:54.000
and manage the dependency injections.

107
00:04:54.000 --> 00:04:57.040
Now, truly understanding dependency injection,

108
00:04:57.040 --> 00:05:00.070
and inversion of control, and how the Application Context

109
00:05:00.070 --> 00:05:03.010
comes into play in a Spring application,

110
00:05:03.010 --> 00:05:05.060
is beyond the scope of this course.

111
00:05:05.060 --> 00:05:09.020
But I have another course in the library called

112
00:05:09.020 --> 00:05:11.010
Spring: Framework in Depth

113
00:05:11.010 --> 00:05:13.060
that I highly encourage you to check out,

114
00:05:13.060 --> 00:05:16.010
because it's actually going to talk about how

115
00:05:16.010 --> 00:05:17.070
the Application Context is configured,

116
00:05:17.070 --> 00:05:22.000
and how it's used through the lifecycle of the application.

