WEBVTT
1
00:00:00.060 --> 00:00:01.040
- [Instructor] So now, it's time

2
00:00:01.040 --> 00:00:04.020
to actually see the builder pattern in action.

3
00:00:04.020 --> 00:00:06.080
I'd like you to go ahead and jump into your IDE,

4
00:00:06.080 --> 00:00:10.060
and open up source, main, java, and our base package,

5
00:00:10.060 --> 00:00:13.090
and we're going to create a new package

6
00:00:13.090 --> 00:00:17.030
and we're going to call this one builder.

7
00:00:17.030 --> 00:00:18.090
Now, in the builder package, we're going to start

8
00:00:18.090 --> 00:00:21.040
with a simple Java Class

9
00:00:21.040 --> 00:00:24.060
and we're going to call that Contact.

10
00:00:24.060 --> 00:00:26.030
Now, to our Contact class,

11
00:00:26.030 --> 00:00:28.080
we're going to create a couple attributes,

12
00:00:28.080 --> 00:00:37.000
so firstName, lastName, and emailAddress.

13
00:00:37.000 --> 00:00:37.090
And obviously, you can imagine

14
00:00:37.090 --> 00:00:39.040
that a contact would have a lot more,

15
00:00:39.040 --> 00:00:42.020
but for the purpose of this, this will work just fine.

16
00:00:42.020 --> 00:00:45.030
Now, I'm going to generate a few methods here,

17
00:00:45.030 --> 00:00:49.050
first thing I'm going to do is create a no-args constructor,

18
00:00:49.050 --> 00:00:52.070
and I like to throw a super in there.

19
00:00:52.070 --> 00:01:00.030
And then, I'm going to create an all-args constructor,

20
00:01:00.030 --> 00:01:03.050
and finally, I'm going to do Getters and Setters.

21
00:01:03.050 --> 00:01:05.070
And once again, your IDE should have some way

22
00:01:05.070 --> 00:01:07.040
to generate all of this.

23
00:01:07.040 --> 00:01:09.010
If it doesn't, you can just type it in,

24
00:01:09.010 --> 00:01:11.010
but I used a speed key there

25
00:01:11.010 --> 00:01:13.090
to do that in IntelliJ Ultimate Edition.

26
00:01:13.090 --> 00:01:18.000
Now, what I'd like to do is open up the AppController

27
00:01:18.000 --> 00:01:23.020
and we're going to create a GetMapping

28
00:01:23.020 --> 00:01:29.020
and it is going to be at slash presidents

29
00:01:29.020 --> 00:01:33.040
and we will return a List of Contacts

30
00:01:33.040 --> 00:01:39.070
called getPresidents and we will just create a little bit

31
00:01:39.070 --> 00:01:45.070
of context here, create a new Array list.

32
00:01:45.070 --> 00:01:48.020
Okay, so, the first thing that we're going to do here

33
00:01:48.020 --> 00:01:54.080
is we are going to create a new Contact.

34
00:01:54.080 --> 00:01:56.080
Now, this is what we would do if we didn't have

35
00:01:56.080 --> 00:01:58.090
an all-args constructor.

36
00:01:58.090 --> 00:02:02.080
We would set Contact FirstName and we're going to set this one

37
00:02:02.080 --> 00:02:06.030
equal to George,

38
00:02:06.030 --> 00:02:11.020
and contact that LastName equal to Washington.

39
00:02:11.020 --> 00:02:13.060
Simple enough, but as you can imagine, if that list

40
00:02:13.060 --> 00:02:15.020
of parameters got bigger,

41
00:02:15.020 --> 00:02:17.050
it'd be a little bit more time-consuming.

42
00:02:17.050 --> 00:02:21.070
We'll go ahead and add this to our contacts.

43
00:02:21.070 --> 00:02:24.080
Not a big deal, but again, imagine if there were 15

44
00:02:24.080 --> 00:02:28.090
or 20 fields on that contact, which is very valid.

45
00:02:28.090 --> 00:02:30.030
Now, let's show what happens

46
00:02:30.030 --> 00:02:32.050
when we do an all-args constructor.

47
00:02:32.050 --> 00:02:39.010
So, contacts.add(new Contact) and now we have to remember

48
00:02:39.010 --> 00:02:44.000
the order, so I think it's first name, last name,

49
00:02:44.000 --> 00:02:45.030
and we're not going to put an email

50
00:02:45.030 --> 00:02:48.080
so we'll just put null in here.

51
00:02:48.080 --> 00:02:52.000
Again, simple enough, but if there's a lot of fields here,

52
00:02:52.000 --> 00:02:54.000
this becomes very complicated.

53
00:02:54.000 --> 00:02:55.060
You got to know where the nulls are,

54
00:02:55.060 --> 00:02:57.030
you've got to know which fields are which,

55
00:02:57.030 --> 00:02:59.060
and it just starts to lead to sprawl.

56
00:02:59.060 --> 00:03:02.020
This is where the builder pattern really starts

57
00:03:02.020 --> 00:03:06.020
to add some cool value to what we're trying to do.

58
00:03:06.020 --> 00:03:08.040
Let me go ahead and return our contacts here

59
00:03:08.040 --> 00:03:10.040
before we go any further,

60
00:03:10.040 --> 00:03:13.060
just to clean up all of that error state.

61
00:03:13.060 --> 00:03:15.080
So, let's go back to our builder

62
00:03:15.080 --> 00:03:18.040
and we can look at the fields in our Contact.

63
00:03:18.040 --> 00:03:21.010
We'll create a new Class,

64
00:03:21.010 --> 00:03:25.020
and this one we're going to call ContactBuilder.

65
00:03:25.020 --> 00:03:27.030
You're going to put the same fields on this,

66
00:03:27.030 --> 00:03:33.020
so private String firstName.

67
00:03:33.020 --> 00:03:37.060
So now, we're going to go ahead and build our builder.

68
00:03:37.060 --> 00:03:40.030
We're going to generate Setters.

69
00:03:40.030 --> 00:03:44.010
We're going to generate one for each of our fields.

70
00:03:44.010 --> 00:03:45.080
So now, we need to do a little bit of replacement,

71
00:03:45.080 --> 00:03:48.060
so the first thing we do is we're going to replace void

72
00:03:48.060 --> 00:03:53.030
with ContactBuilder, and we will replace all of those

73
00:03:53.030 --> 00:03:55.040
in our class, and obviously, you could've typed those in

74
00:03:55.040 --> 00:04:02.010
if you wanted to, and then we will simply do a return this.

75
00:04:02.010 --> 00:04:08.010
We're going to add that to each of our methods.

76
00:04:08.010 --> 00:04:12.090
Now, we're going to build a public contact,

77
00:04:12.090 --> 00:04:21.020
buildContact method and it will return a new Contact

78
00:04:21.020 --> 00:04:26.010
firstName, lastName, emailAddress.

79
00:04:26.010 --> 00:04:28.080
The beauty here is that if any of these fields are null,

80
00:04:28.080 --> 00:04:29.080
null will get populated.

81
00:04:29.080 --> 00:04:32.080
We don't really have to think about where the nulls go.

82
00:04:32.080 --> 00:04:34.080
We don't have to think about really much of anything

83
00:04:34.080 --> 00:04:37.070
other than just building the object and returning it.

84
00:04:37.070 --> 00:04:40.010
So, let's take a look at this in action.

85
00:04:40.010 --> 00:04:41.040
To do this, we're going to

86
00:04:41.040 --> 00:04:52.000
do a contacts.add(new ContactBuilder().setFirstName

87
00:04:52.000 --> 00:05:01.060
and we will set this to Thomas.setLastName("Jefferson")

88
00:05:01.060 --> 00:05:06.000
and then we will call build, and at that point, we're done.

89
00:05:06.000 --> 00:05:07.090
Now the beauty here is we still get one line,

90
00:05:07.090 --> 00:05:10.070
like we did before, but we actually have fields

91
00:05:10.070 --> 00:05:11.090
that we're populating instead of trying

92
00:05:11.090 --> 00:05:13.080
to figure out where the null is.

93
00:05:13.080 --> 00:05:16.000
Obviously, having one line of code tends

94
00:05:16.000 --> 00:05:17.090
to reach your total lines of code

95
00:05:17.090 --> 00:05:19.060
and it makes it a little bit cleaner to read

96
00:05:19.060 --> 00:05:21.010
because I don't have to have multiple lines

97
00:05:21.010 --> 00:05:24.060
to figure out that I'm just creating a simple object.

98
00:05:24.060 --> 00:05:28.020
So, we can go ahead and run our application

99
00:05:28.020 --> 00:05:30.060
and while that's starting up, we'll jump to our terminal

100
00:05:30.060 --> 00:05:35.050
and I'll do an http on localhost:8080.

101
00:05:35.050 --> 00:05:37.050
Again, you can use cURL if you want to

102
00:05:37.050 --> 00:05:40.080
if you don't have HTTPie installed.

103
00:05:40.080 --> 00:05:44.060
And slash presidents and I get my data out

104
00:05:44.060 --> 00:05:47.040
as I would expect and it's exactly the value

105
00:05:47.040 --> 00:05:48.070
of the builder pattern.

106
00:05:48.070 --> 00:05:51.020
Again, use your imagination, add a bunch more fields

107
00:05:51.020 --> 00:05:54.000
to this contact, and you really start to see the value

108
00:05:54.000 --> 00:05:56.090
of the builder, especially when dealing with simple objects

109
00:05:56.090 --> 00:05:59.050
that can be constructed in multiple ways

110
00:05:59.050 --> 00:06:01.000
or with null fields involved.

