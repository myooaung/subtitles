WEBVTT
1
00:00:00.050 --> 00:00:01.090
- [Instructor] Now, the first creational pattern

2
00:00:01.090 --> 00:00:05.020
that we're going to talk about is the factory pattern.

3
00:00:05.020 --> 00:00:07.010
And this is probably, of all of the patterns,

4
00:00:07.010 --> 00:00:11.030
the one that most developers have actually seen and used.

5
00:00:11.030 --> 00:00:13.040
I've used this pattern thousands of times

6
00:00:13.040 --> 00:00:16.010
throughout my professional career.

7
00:00:16.010 --> 00:00:18.060
Now, in Spring, the pattern is used

8
00:00:18.060 --> 00:00:20.030
throughout the entire framework.

9
00:00:20.030 --> 00:00:24.020
But one of the primary places it's used is the BeanFactory.

10
00:00:24.020 --> 00:00:26.010
And this is a little bit of a modification

11
00:00:26.010 --> 00:00:28.020
of a traditional factory pattern.

12
00:00:28.020 --> 00:00:32.020
But the BeanFactory itself is indeed a factory.

13
00:00:32.020 --> 00:00:34.050
In addition to the BeanFactory,

14
00:00:34.050 --> 00:00:37.010
there is a FactoryBean that goes with it that

15
00:00:37.010 --> 00:00:40.000
gives you this concept of a factory of factories,

16
00:00:40.000 --> 00:00:42.080
so to speak, if you look at how they work.

17
00:00:42.080 --> 00:00:45.010
Now, the reason I mentioned that these are so

18
00:00:45.010 --> 00:00:48.050
cored to Spring is because the IoC container

19
00:00:48.050 --> 00:00:51.000
is based on the application context.

20
00:00:51.000 --> 00:00:54.060
The application context extends the BeanFactory.

21
00:00:54.060 --> 00:00:56.010
And actually keeps a handle to it,

22
00:00:56.010 --> 00:00:59.080
because it acts as a wrapper around the BeanFactory.

23
00:00:59.080 --> 00:01:01.080
This is where all of your configured object

24
00:01:01.080 --> 00:01:05.070
references are stored in the Spring Framework.

25
00:01:05.070 --> 00:01:08.010
Again, it's leveraged heavily in the framework,

26
00:01:08.010 --> 00:01:09.080
but this is one of the big ones that most

27
00:01:09.080 --> 00:01:13.050
developers touch when they first start with Spring.

28
00:01:13.050 --> 00:01:15.030
Now, in a nutshell, the way that the

29
00:01:15.030 --> 00:01:18.040
pattern works is it allows for construction

30
00:01:18.040 --> 00:01:21.070
of similar classes of different types,

31
00:01:21.070 --> 00:01:24.020
using a so-called factory method.

32
00:01:24.020 --> 00:01:25.080
Now, what does that mean?

33
00:01:25.080 --> 00:01:27.090
You have a method call that creates the

34
00:01:27.090 --> 00:01:31.060
object for you and serves it back to you.

35
00:01:31.060 --> 00:01:34.060
Those objects are constructed from classes

36
00:01:34.060 --> 00:01:38.070
that share an interface or a parent class.

37
00:01:38.070 --> 00:01:41.070
This shared behavior of these classes

38
00:01:41.070 --> 00:01:44.010
allows the factory to reduce

39
00:01:44.010 --> 00:01:46.070
the amount of coupling in your code.

40
00:01:46.070 --> 00:01:48.060
So, why would we use these?

41
00:01:48.060 --> 00:01:49.080
It really, it comes down to,

42
00:01:49.080 --> 00:01:52.070
it allows you to not worry about class

43
00:01:52.070 --> 00:01:56.010
construction in more than one place.

44
00:01:56.010 --> 00:01:57.040
It allows you to leverage the

45
00:01:57.040 --> 00:02:00.080
interface for repetitive operations.

46
00:02:00.080 --> 00:02:05.040
And, the lack of construction code in your code

47
00:02:05.040 --> 00:02:08.090
makes copy and paste errors less likely.

48
00:02:08.090 --> 00:02:10.080
Now, the creation strategy that we're

49
00:02:10.080 --> 00:02:13.080
going to come up with for writing a factory

50
00:02:13.080 --> 00:02:17.040
is always code to an interface, if possible.

51
00:02:17.040 --> 00:02:19.060
This is a Gang of Four construct.

52
00:02:19.060 --> 00:02:20.060
But more so, it's good

53
00:02:20.060 --> 00:02:23.050
object-oriented programming practices.

54
00:02:23.050 --> 00:02:25.040
And when you're working with a factory,

55
00:02:25.040 --> 00:02:28.090
the real benefit comes from coding to the interface,

56
00:02:28.090 --> 00:02:32.010
instead of the concrete implementation.

57
00:02:32.010 --> 00:02:34.060
So, you're going to create that common interface

58
00:02:34.060 --> 00:02:38.020
that you're going to use in your factory objects.

59
00:02:38.020 --> 00:02:39.090
Then, you're going to create a class

60
00:02:39.090 --> 00:02:44.080
that gives instances of the interface.

61
00:02:44.080 --> 00:02:47.090
And in that class, you're going to implement

62
00:02:47.090 --> 00:02:52.010
a method that serves those concrete classes

63
00:02:52.010 --> 00:02:56.010
that you will then implement from the interface itself.

64
00:02:56.010 --> 00:02:58.030
So, again, we have a class that has a

65
00:02:58.030 --> 00:03:02.060
method that creates instances of the interface

66
00:03:02.060 --> 00:03:04.010
when under the coverage that it's actually

67
00:03:04.010 --> 00:03:06.050
creating instances in the concrete class.

68
00:03:06.050 --> 00:03:08.060
Then it serves back out.

69
00:03:08.060 --> 00:03:10.010
So, the consuming code,

70
00:03:10.010 --> 00:03:12.030
the code that consumes the factory,

71
00:03:12.030 --> 00:03:15.030
will create an interface and operate on that interface,

72
00:03:15.030 --> 00:03:17.000
even though the factory itself has

73
00:03:17.000 --> 00:03:20.090
served a concrete implementation.

74
00:03:20.090 --> 00:03:23.030
Now, there's a sister of pattern

75
00:03:23.030 --> 00:03:25.040
that goes with the factory pattern.

76
00:03:25.040 --> 00:03:28.050
And that is the Abstract Factory Pattern.

77
00:03:28.050 --> 00:03:31.050
And this really takes it one step further.

78
00:03:31.050 --> 00:03:33.020
And what do I mean by that?

79
00:03:33.020 --> 00:03:36.030
It becomes a factory of factories.

80
00:03:36.030 --> 00:03:38.050
So, you create the base factory.

81
00:03:38.050 --> 00:03:40.030
But all of your factories didn't share

82
00:03:40.030 --> 00:03:44.000
a common interface that the parent abstract

83
00:03:44.000 --> 00:03:48.060
factory will use to create the sub-factory,

84
00:03:48.060 --> 00:03:51.010
and then the instance object from it.

85
00:03:51.010 --> 00:03:53.020
It really gets complicated when you start to

86
00:03:53.020 --> 00:03:55.090
look at it until you've used it a few times.

87
00:03:55.090 --> 00:03:57.070
Because you have these various layers of

88
00:03:57.070 --> 00:04:00.080
abstraction that you've got to fight through.

89
00:04:00.080 --> 00:04:02.080
And this new layer of abstraction

90
00:04:02.080 --> 00:04:05.040
becomes very powerful if you have a bunch

91
00:04:05.040 --> 00:04:08.080
of types that also have a bunch of types.

92
00:04:08.080 --> 00:04:10.090
So, think about that for a minute.

93
00:04:10.090 --> 00:04:12.020
If we look at the high level,

94
00:04:12.020 --> 00:04:15.010
so let's look at the case where we have a bunch of pets.

95
00:04:15.010 --> 00:04:18.020
Those pets are all animals, different types of animals.

96
00:04:18.020 --> 00:04:19.040
And within those animals,

97
00:04:19.040 --> 00:04:22.010
there's different breeds and different sizes.

98
00:04:22.010 --> 00:04:23.090
And different feeding behaviors.

99
00:04:23.090 --> 00:04:26.080
But all in all, you have a factory of

100
00:04:26.080 --> 00:04:29.050
a factory that creates instance objects.

101
00:04:29.050 --> 00:04:32.080
And that's what this Abstract Factory Pattern is.

102
00:04:32.080 --> 00:04:34.020
Now, we're not going to go too deep in that.

103
00:04:34.020 --> 00:04:36.060
We're going to stick with the parent factory pattern.

104
00:04:36.060 --> 00:04:39.000
And let's jump into that in some code next.

