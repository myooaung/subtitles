WEBVTT
1
00:00:00.060 --> 00:00:01.080
- [Instructor] The Repository Pattern is

2
00:00:01.080 --> 00:00:04.020
a data access pattern that you'll see littered

3
00:00:04.020 --> 00:00:05.090
all throughout the Spring framework,

4
00:00:05.090 --> 00:00:10.020
and specifically the Spring Data Project.

5
00:00:10.020 --> 00:00:12.030
And as I alluded to, most of Spring data

6
00:00:12.030 --> 00:00:16.080
is actually based entirely on the Repository Pattern.

7
00:00:16.080 --> 00:00:20.030
Spring JDBC can also be used

8
00:00:20.030 --> 00:00:22.070
to create Repository actions

9
00:00:22.070 --> 00:00:26.000
when you implement the Repository yourself.

10
00:00:26.000 --> 00:00:30.030
RepositoryRestResource adds a RESTful web service

11
00:00:30.030 --> 00:00:32.090
on top of a raw repository,

12
00:00:32.090 --> 00:00:35.080
which gets into this very interesting use case

13
00:00:35.080 --> 00:00:39.020
of an interface exposing an entire web service

14
00:00:39.020 --> 00:00:44.000
through the use of reflection and convention of naming.

15
00:00:44.000 --> 00:00:44.090
So let's talk a little bit

16
00:00:44.090 --> 00:00:46.090
about the Repository Pattern itself.

17
00:00:46.090 --> 00:00:48.070
First and foremost, it's important to note

18
00:00:48.070 --> 00:00:51.020
that this is not a Gang of Four pattern.

19
00:00:51.020 --> 00:00:53.090
In fact, it was introduced in a book by Eric Evans

20
00:00:53.090 --> 00:00:55.090
called Domain-Driven Design,

21
00:00:55.090 --> 00:00:59.020
and one that we use often in the distributed world,

22
00:00:59.020 --> 00:01:02.080
which is where I tend to spend most of my time.

23
00:01:02.080 --> 00:01:06.060
A simple operation of an entity or business object

24
00:01:06.060 --> 00:01:08.060
without the knowledge of other entities,

25
00:01:08.060 --> 00:01:11.080
and that's what defines how this works.

26
00:01:11.080 --> 00:01:13.030
Your operations are simple,

27
00:01:13.030 --> 00:01:14.070
and they're only on one object,

28
00:01:14.070 --> 00:01:18.000
or one grouping of objects, a domain.

29
00:01:18.000 --> 00:01:20.020
You don't cross boundaries and you don't go

30
00:01:20.020 --> 00:01:24.030
into other objects as you do in a DAO pattern.

31
00:01:24.030 --> 00:01:26.090
All of this is done under an abstraction layer,

32
00:01:26.090 --> 00:01:30.010
and the data access operations are hidden

33
00:01:30.010 --> 00:01:33.080
from the consumer of the data access code.

34
00:01:33.080 --> 00:01:36.010
Now, why would we do this?

35
00:01:36.010 --> 00:01:38.060
In modern computing, databases

36
00:01:38.060 --> 00:01:41.020
often have become the bottleneck.

37
00:01:41.020 --> 00:01:42.070
And it used to be the other way around,

38
00:01:42.070 --> 00:01:45.040
that your code was slower than the database.

39
00:01:45.040 --> 00:01:48.050
So you wanted to put all of your operations on the database.

40
00:01:48.050 --> 00:01:51.010
And that's just not the case anymore.

41
00:01:51.010 --> 00:01:53.020
By using the Repository Pattern,

42
00:01:53.020 --> 00:01:55.000
you prevent data access logic

43
00:01:55.000 --> 00:01:57.070
from leaking into your business logic.

44
00:01:57.070 --> 00:02:00.060
I've written code before where we had two and three layers

45
00:02:00.060 --> 00:02:03.090
of data access objects because we wanted to make sure

46
00:02:03.090 --> 00:02:06.030
that we could span transaction boundaries

47
00:02:06.030 --> 00:02:08.000
without leaking it into our code.

48
00:02:08.000 --> 00:02:11.030
And it became a nightmare to handle.

49
00:02:11.030 --> 00:02:14.030
In addition, this provides a layer of abstraction

50
00:02:14.030 --> 00:02:17.030
to hide all of your internal operations.

51
00:02:17.030 --> 00:02:20.050
So your domain may actually live in multiple databases,

52
00:02:20.050 --> 00:02:22.020
or live in multiple tables,

53
00:02:22.020 --> 00:02:23.080
but your consumer doesn't know

54
00:02:23.080 --> 00:02:27.060
because everything is hidden behind a simple interface.

55
00:02:27.060 --> 00:02:31.020
And by doing this, you can focus on single business objects

56
00:02:31.020 --> 00:02:35.010
at a time and not worry about everything else.

57
00:02:35.010 --> 00:02:37.010
So how would we go about creating this?

58
00:02:37.010 --> 00:02:39.040
Well, in the Spring world,

59
00:02:39.040 --> 00:02:44.020
you start with the Repository interface in Spring Data,

60
00:02:44.020 --> 00:02:48.050
or you create your own interface using generics.

61
00:02:48.050 --> 00:02:51.020
You define common data access methods

62
00:02:51.020 --> 00:02:53.000
if you're rolling your own.

63
00:02:53.000 --> 00:02:55.030
If you're using the interface from Spring Data,

64
00:02:55.030 --> 00:02:57.030
they're already done for you.

65
00:02:57.030 --> 00:03:01.050
You would just add any additional methods that you need to.

66
00:03:01.050 --> 00:03:04.000
Then you apply your business object

67
00:03:04.000 --> 00:03:06.020
to a Repository instance,

68
00:03:06.020 --> 00:03:10.000
and leverage the data access logic under the hood.

69
00:03:10.000 --> 00:03:11.060
And in the next video we're going to jump in

70
00:03:11.060 --> 00:03:13.000
and show you how to do a Repository using Spring Data.

