WEBVTT
1
00:00:00.060 --> 00:00:02.080
- [Instructor] Another common creation pattern

2
00:00:02.080 --> 00:00:05.050
is the so-called builder pattern.

3
00:00:05.050 --> 00:00:07.060
Now in Spring, you will see that this pattern

4
00:00:07.060 --> 00:00:11.010
is used in various places throughout the framework.

5
00:00:11.010 --> 00:00:13.050
One of the most common ones that I use

6
00:00:13.050 --> 00:00:18.040
is the ResultActions, which is part of the MockMvc structure

7
00:00:18.040 --> 00:00:22.030
used for testing web applications and web services

8
00:00:22.030 --> 00:00:24.050
within the Spring framework.

9
00:00:24.050 --> 00:00:25.050
One thing I want to notice,

10
00:00:25.050 --> 00:00:27.090
even though it's not really in Spring,

11
00:00:27.090 --> 00:00:31.050
is that Lombok actually has taken this builder pattern

12
00:00:31.050 --> 00:00:34.090
to a whole new level by providing you an annotation

13
00:00:34.090 --> 00:00:36.090
that does all the work that we're about to do

14
00:00:36.090 --> 00:00:41.010
in the next video based on a simple annotation,

15
00:00:41.010 --> 00:00:42.090
and it's really a time saver.

16
00:00:42.090 --> 00:00:44.020
If you haven't looked at Lombok,

17
00:00:44.020 --> 00:00:46.070
I highly encourage you to do so.

18
00:00:46.070 --> 00:00:49.010
So let's take a look at the pattern as it exists

19
00:00:49.010 --> 00:00:50.080
in a nutshell.

20
00:00:50.080 --> 00:00:55.090
So each method returns the object reference it's called from

21
00:00:55.090 --> 00:00:57.090
in the builder pattern.

22
00:00:57.090 --> 00:01:01.020
The build method, which is usually the end of the chain,

23
00:01:01.020 --> 00:01:04.020
returns a fully constructed object

24
00:01:04.020 --> 00:01:06.060
based on all the intermediate calls

25
00:01:06.060 --> 00:01:09.010
that return that object reference.

26
00:01:09.010 --> 00:01:12.090
Now functionality can be combined into a single class,

27
00:01:12.090 --> 00:01:15.040
but usually it's not done that way,

28
00:01:15.040 --> 00:01:17.090
since it often requires the use of statics,

29
00:01:17.090 --> 00:01:20.020
and when we go through and do our implementation,

30
00:01:20.020 --> 00:01:22.040
we're going to break it into two classes,

31
00:01:22.040 --> 00:01:26.000
which is more of a traditional way of doing a builder.

32
00:01:26.000 --> 00:01:29.000
So why would we use a builder pattern?

33
00:01:29.000 --> 00:01:33.090
It's very useful when object creation has many parameters.

34
00:01:33.090 --> 00:01:36.080
And it becomes increasingly more useful

35
00:01:36.080 --> 00:01:40.080
when some or even all of those parameters are optional.

36
00:01:40.080 --> 00:01:43.080
And we're going to see an example of using optional parameters

37
00:01:43.080 --> 00:01:46.000
in a constructor and how ugly it gets

38
00:01:46.000 --> 00:01:51.020
with nulls mixed all and throughout the construction phase.

39
00:01:51.020 --> 00:01:53.090
It can make code easier to read

40
00:01:53.090 --> 00:01:55.090
when you use the builder pattern,

41
00:01:55.090 --> 00:02:00.040
Because of the reduced lines of code for object construction

42
00:02:00.040 --> 00:02:04.010
as opposed to using setters and it's easier to read

43
00:02:04.010 --> 00:02:06.050
because you don't have all of the null values

44
00:02:06.050 --> 00:02:09.030
littered throughout the optional constructor.

45
00:02:09.030 --> 00:02:12.020
So how would we go about building a class

46
00:02:12.020 --> 00:02:15.020
that leverages the builder pattern?

47
00:02:15.020 --> 00:02:18.090
First and foremost, you need to define a base class

48
00:02:18.090 --> 00:02:22.020
with an all arcs constructor.

49
00:02:22.020 --> 00:02:26.010
Then, you will create a builder class

50
00:02:26.010 --> 00:02:28.040
with attributes and setter

51
00:02:28.040 --> 00:02:32.080
for each argument of the base class.

52
00:02:32.080 --> 00:02:37.050
Each setter should also then return the builder

53
00:02:37.050 --> 00:02:40.050
as opposed to the traditional way that a setter works,

54
00:02:40.050 --> 00:02:43.030
where it returns void.

55
00:02:43.030 --> 00:02:45.070
Then, you will create a build method

56
00:02:45.070 --> 00:02:50.050
that will construct and return the base class.

57
00:02:50.050 --> 00:02:53.000
And now I'm going to show you how to do that

58
00:02:53.000 --> 00:02:55.000
in our in-action video.

