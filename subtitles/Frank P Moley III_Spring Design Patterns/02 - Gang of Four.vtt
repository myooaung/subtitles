WEBVTT
1
00:00:00.060 --> 00:00:01.090
- [Instructor] Now, we can't have

2
00:00:01.090 --> 00:00:03.070
a conversation on design patterns

3
00:00:03.070 --> 00:00:07.040
without at least mentioning the Gang of Four.

4
00:00:07.040 --> 00:00:09.050
Now who are this Gang of Four?

5
00:00:09.050 --> 00:00:12.050
It was four software engineers, computer scientists,

6
00:00:12.050 --> 00:00:16.080
that wrote a book that revolutionized how we write code

7
00:00:16.080 --> 00:00:19.000
using object-oriented programming.

8
00:00:19.000 --> 00:00:22.020
Again, they were computer scientists first and foremost,

9
00:00:22.020 --> 00:00:23.070
but they also were authors.

10
00:00:23.070 --> 00:00:27.000
And they wrote a book called, "Design Patterns:

11
00:00:27.000 --> 00:00:30.090
"Elements of Reusable Object-Oriented Software."

12
00:00:30.090 --> 00:00:35.090
Now this is the book, in my opinion, that changed OOP.

13
00:00:35.090 --> 00:00:39.040
It introduced object-oriented programming,

14
00:00:39.040 --> 00:00:42.040
both the good and the bad.

15
00:00:42.040 --> 00:00:43.090
They didn't sugarcoat anything.

16
00:00:43.090 --> 00:00:47.000
They said exactly what was good about it,

17
00:00:47.000 --> 00:00:49.000
and all the problems that arose,

18
00:00:49.000 --> 00:00:51.010
and then they tried to talk about how to solve

19
00:00:51.010 --> 00:00:53.000
some of those problems.

20
00:00:53.000 --> 00:00:57.030
They focused on common object-oriented programming concerns,

21
00:00:57.030 --> 00:00:59.050
many we take for granted today

22
00:00:59.050 --> 00:01:02.040
because of the comments and the changes

23
00:01:02.040 --> 00:01:04.070
in the industry based on this book.

24
00:01:04.070 --> 00:01:06.040
Now design patterns themselves

25
00:01:06.040 --> 00:01:09.090
filled most of the content.

26
00:01:09.090 --> 00:01:13.020
And they broke those design patterns down into groups.

27
00:01:13.020 --> 00:01:14.040
The first group that we're going to talk

28
00:01:14.040 --> 00:01:16.090
about are the creational patterns.

29
00:01:16.090 --> 00:01:18.060
Now they are so called creational

30
00:01:18.060 --> 00:01:22.060
because as you might imagine, they create objects for you.

31
00:01:22.060 --> 00:01:25.000
The two most common are the Abstract Factory

32
00:01:25.000 --> 00:01:28.050
and the Factory pattern, but there's also a Builder pattern.

33
00:01:28.050 --> 00:01:30.080
And once you see this, if you don't know

34
00:01:30.080 --> 00:01:32.070
it's the Builder pattern, you immediately will say,

35
00:01:32.070 --> 00:01:34.050
"Oh, I've used that before."

36
00:01:34.050 --> 00:01:38.090
Because it's very, very prevalent in software engineering.

37
00:01:38.090 --> 00:01:42.030
One that Spring uses a lot is the Singleton pattern,

38
00:01:42.030 --> 00:01:43.090
though they don't leverage it in the same way,

39
00:01:43.090 --> 00:01:45.040
and we'll talk about that.

40
00:01:45.040 --> 00:01:47.060
But also the Prototype pattern.

41
00:01:47.060 --> 00:01:49.020
Now the second group that they broke

42
00:01:49.020 --> 00:01:52.020
these patterns up into were behavioral patterns.

43
00:01:52.020 --> 00:01:56.050
These were designed to focus on inter-object communication

44
00:01:56.050 --> 00:01:58.080
within the application run time.

45
00:01:58.080 --> 00:02:01.050
Now we're not going to talk about all of these on the course,

46
00:02:01.050 --> 00:02:03.060
but I at least want to bring up what the Gang of Four

47
00:02:03.060 --> 00:02:05.040
talked about in their book.

48
00:02:05.040 --> 00:02:07.020
And these are things like the Command pattern,

49
00:02:07.020 --> 00:02:11.070
and the Interpreter pattern, Mediator, Iterator, Observer.

50
00:02:11.070 --> 00:02:14.030
Then there's this concept of Chain of Responsibility

51
00:02:14.030 --> 00:02:16.000
and the Visitor pattern.

52
00:02:16.000 --> 00:02:19.030
And then there's Memento, State, Strategy,

53
00:02:19.030 --> 00:02:22.000
and the Template pattern, which is one that Spring uses

54
00:02:22.000 --> 00:02:24.090
all over the place, especially when dealing

55
00:02:24.090 --> 00:02:27.050
with remote calls.

56
00:02:27.050 --> 00:02:29.070
The final group that the Gang of Four talked about

57
00:02:29.070 --> 00:02:33.010
were the structural patterns, and these focused

58
00:02:33.010 --> 00:02:37.060
on object composition and interfaces.

59
00:02:37.060 --> 00:02:41.030
Things like the Adapter, the Bridge, the Composite,

60
00:02:41.030 --> 00:02:45.010
the Decorator, which is one that we'll see a lot in Spring.

61
00:02:45.010 --> 00:02:46.080
And Flyweight.

62
00:02:46.080 --> 00:02:48.060
And then there's the Facade and Proxy,

63
00:02:48.060 --> 00:02:50.060
both of which I'm sure you've used

64
00:02:50.060 --> 00:02:52.080
and are very common in the industry.

65
00:02:52.080 --> 00:02:55.030
Proxy is all over the place in Spring

66
00:02:55.030 --> 00:02:57.030
ever since Spring IV.

67
00:02:57.030 --> 00:02:59.070
Now these design patterns do have something

68
00:02:59.070 --> 00:03:02.020
to do with Spring, and I kind of alluded

69
00:03:02.020 --> 00:03:03.070
to some of these already.

70
00:03:03.070 --> 00:03:08.050
Spring inherently uses many of these classic patterns.

71
00:03:08.050 --> 00:03:10.090
But Spring also provides native support

72
00:03:10.090 --> 00:03:13.090
for using some of these in your code.

73
00:03:13.090 --> 00:03:17.040
And Java after all is an object-oriented language,

74
00:03:17.040 --> 00:03:21.000
and as such, Spring, which is based on Java,

75
00:03:21.000 --> 00:03:24.040
uses design patterns, and they're all over the place

76
00:03:24.040 --> 00:03:28.020
in code written in Java because they make sense.

77
00:03:28.020 --> 00:03:31.090
So Spring of course is going to use them to their advantage,

78
00:03:31.090 --> 00:03:35.000
and provide you a way to use them as well.

79
00:03:35.000 --> 00:03:36.050
And that's what we're going to focus on

80
00:03:36.050 --> 00:03:38.000
in the rest of this course.

