WEBVTT
1
00:00:00.060 --> 00:00:02.080
- So now that we have discussed the adaptor pattern

2
00:00:02.080 --> 00:00:05.060
and what its used for and how it operates, it's time

3
00:00:05.060 --> 00:00:07.090
to go implement it in code.

4
00:00:07.090 --> 00:00:10.050
I would like you to go ahead and navigate to your IDE.

5
00:00:10.050 --> 00:00:14.040
and open our source, main, java, our base package

6
00:00:14.040 --> 00:00:18.050
and lets create a new package in here

7
00:00:18.050 --> 00:00:21.010
called adapter.

8
00:00:21.010 --> 00:00:22.090
Now we are going to create an adapter that is going

9
00:00:22.090 --> 00:00:27.010
to treat an orange like an apple. Which is something

10
00:00:27.010 --> 00:00:30.010
Gus Porticolis would very happy with us, since apples

11
00:00:30.010 --> 00:00:33.060
and oranges are all fruit. So let's start with an

12
00:00:33.060 --> 00:00:38.080
interface for apple. Our apple interface is going to

13
00:00:38.080 --> 00:00:43.000
implement two methods. One is going to be a getVariety

14
00:00:43.000 --> 00:00:48.080
and another is going to void method called eat.

15
00:00:48.080 --> 00:00:53.040
So now that we have built the apple interface, let's go

16
00:00:53.040 --> 00:00:57.080
create our orange interface. Now, our orange interface

17
00:00:57.080 --> 00:01:01.020
is going to look very similar to our apple but it's going

18
00:01:01.020 --> 00:01:06.070
to have getVariety string method and it's also going to have

19
00:01:06.070 --> 00:01:13.080
a void eat method but its going to have a void peel method

20
00:01:13.080 --> 00:01:17.030
and a void juice method. And that is all we are going to

21
00:01:17.030 --> 00:01:19.010
do for that interface.

22
00:01:19.010 --> 00:01:23.030
So now it's time to create our adapter. This time we are

23
00:01:23.030 --> 00:01:29.000
going to create a class called AppleAdapter and this will

24
00:01:29.000 --> 00:01:37.000
implement our apple interface.

25
00:01:37.000 --> 00:01:38.050
Go ahead and implement

26
00:01:38.050 --> 00:01:45.000
our methods. And now it's going to take a few more values

27
00:01:45.000 --> 00:01:49.090
here. So it's going to keep a reference to an orange and

28
00:01:49.090 --> 00:01:55.010
we will reference that by its interface. And because it's

29
00:01:55.010 --> 00:02:00.020
final, we are going to create a constructor that takes

30
00:02:00.020 --> 00:02:04.050
our orange interface. So now that we have implemented

31
00:02:04.050 --> 00:02:07.040
the basics of it, now let's go through here and actually

32
00:02:07.040 --> 00:02:10.040
implement our methods. So in this case, when we call

33
00:02:10.040 --> 00:02:17.000
getVariety we are going to return orange.getVariety.

34
00:02:17.000 --> 00:02:23.000
And now when, we do our eat, we are going to call

35
00:02:23.000 --> 00:02:26.090
orange.peel and then orange.eat.

36
00:02:26.090 --> 00:02:28.070
And now that we have

37
00:02:28.070 --> 00:02:31.020
our adapter set, let's go create a concrete instance of

38
00:02:31.020 --> 00:02:34.080
our orange. And we are going to create MoroOrange, which

39
00:02:34.080 --> 00:02:39.000
is a wonderful Blood orange from Sicily. So our MoroOrange

40
00:02:39.000 --> 00:02:47.090
is going to implement the orange interface. And we will go

41
00:02:47.090 --> 00:02:53.030
ahead and implement our methods.

42
00:02:53.030 --> 00:02:55.040
So we will return

43
00:02:55.040 --> 00:03:01.000
Moro Blood Orange

44
00:03:01.000 --> 00:03:03.090
and on eat we will simply do a

45
00:03:03.090 --> 00:03:09.080
System.out.prinln here

46
00:03:09.080 --> 00:03:14.000
enjoyed.

47
00:03:14.000 --> 00:03:16.040
And then we are going to do something very

48
00:03:16.040 --> 00:03:20.040
similar, just copy and paste that to peeled.

49
00:03:20.040 --> 00:03:25.010
We are now going to say Moro gets peeled.

50
00:03:25.010 --> 00:03:28.070
And then our juice method one more time,

51
00:03:28.070 --> 00:03:33.030
we will say Moro gets juiced.

52
00:03:33.030 --> 00:03:35.020
Alright, now let's take a look at this adapter in

53
00:03:35.020 --> 00:03:38.060
action. And to do that, we are going to jump down

54
00:03:38.060 --> 00:03:42.000
here into test Java, our base package, and we will

55
00:03:42.000 --> 00:03:48.020
create a new package and we will call this adapter.

56
00:03:48.020 --> 00:03:50.090
In our adapter package, in the test directory, we will

57
00:03:50.090 --> 00:03:53.090
put a Java class. And we are going to call this

58
00:03:53.090 --> 00:03:57.080
AppleAdapterTest and we are going to

59
00:03:57.080 --> 00:04:00.000
put one method in here.

60
00:04:00.000 --> 00:04:07.090
So at test public void testAdapter

61
00:04:07.090 --> 00:04:09.020
Orange Orange

62
00:04:09.020 --> 00:04:14.020
equals new MoroOrange.

63
00:04:14.020 --> 00:04:17.000
Apple in this case is going to be

64
00:04:17.000 --> 00:04:20.070
our apple adapter that we are going to pass our orange

65
00:04:20.070 --> 00:04:24.040
to. So now we are going to treat the adapter as an

66
00:04:24.040 --> 00:04:27.060
apple. Which is what it's designed. We are going to do a

67
00:04:27.060 --> 00:04:32.010
System.out.println on

68
00:04:32.010 --> 00:04:35.020
apple.getVariety

69
00:04:35.020 --> 00:04:38.040
and we will also do apple.eat.

70
00:04:38.040 --> 00:04:40.020
So now we are going to expect to see a little output

71
00:04:40.020 --> 00:04:42.070
here when we run this test. Let's go ahead and run this

72
00:04:42.070 --> 00:04:46.020
test now.

73
00:04:46.020 --> 00:04:47.050
And you will see, we get to Moro Blood Orange

74
00:04:47.050 --> 00:04:50.070
and then we get to Moro gets peeled and enjoyed.

75
00:04:50.070 --> 00:04:53.060
And this is how the adapter pattern is used. We treated

76
00:04:53.060 --> 00:04:57.010
an orange, like an apple but in the orange use case,

77
00:04:57.010 --> 00:05:00.020
eating it required it to be peeled first, before you

78
00:05:00.020 --> 00:05:02.050
actually got to enjoy it. Whereas an apple of course

79
00:05:02.050 --> 00:05:04.060
you can just eat it as is.

80
00:05:04.060 --> 00:05:06.000
And that is how the adapter is used,

81
00:05:06.000 --> 00:05:09.000
it treats one like the other, and does so in a way that is

82
00:05:09.000 --> 00:05:12.000
passive to the original object.

