WEBVTT
1
00:00:00.040 --> 00:00:01.030
- [Instructor] So now it's time to take a look

2
00:00:01.030 --> 00:00:03.060
at a repository in action.

3
00:00:03.060 --> 00:00:05.050
And I'm going to encourage you to put your seatbelts on,

4
00:00:05.050 --> 00:00:07.070
'cause we're going to go through a lot of material here

5
00:00:07.070 --> 00:00:09.010
in this video.

6
00:00:09.010 --> 00:00:11.020
Go ahead and jump over into your IDE,

7
00:00:11.020 --> 00:00:12.060
and if you've loaded the exercise files,

8
00:00:12.060 --> 00:00:15.010
the first thing I want you to notice

9
00:00:15.010 --> 00:00:16.060
is in source by resources,

10
00:00:16.060 --> 00:00:19.090
I've added a data.sql and a schema.sql.

11
00:00:19.090 --> 00:00:22.010
And we're just going to use that to populate a database

12
00:00:22.010 --> 00:00:25.030
so we can actually implement the pattern.

13
00:00:25.030 --> 00:00:28.040
Let's go ahead and open up our base package.

14
00:00:28.040 --> 00:00:29.080
Before we do anything else,

15
00:00:29.080 --> 00:00:34.050
we will create a package called repository.

16
00:00:34.050 --> 00:00:36.020
Now, because we're using Maven and Spring,

17
00:00:36.020 --> 00:00:39.050
we need to add a few things to our pom.

18
00:00:39.050 --> 00:00:42.040
Let's jump into our pom file here.

19
00:00:42.040 --> 00:00:43.090
And we're going to add two dependencies.

20
00:00:43.090 --> 00:00:46.000
The first dependency that we're going to add

21
00:00:46.000 --> 00:00:53.000
is spring-boot-starter-data-jpa.

22
00:00:53.000 --> 00:00:59.020
And that comes from org.springframework.boot.

23
00:00:59.020 --> 00:01:01.080
We'll allow Maven do its resolution there

24
00:01:01.080 --> 00:01:03.090
while we add our second dependency.

25
00:01:03.090 --> 00:01:06.020
And this one is called h2.

26
00:01:06.020 --> 00:01:09.070
And this comes from com.h2database.

27
00:01:09.070 --> 00:01:10.060
And again, we'll let Spring Boot

28
00:01:10.060 --> 00:01:13.030
do its dependency resolution.

29
00:01:13.030 --> 00:01:16.030
Now because we're using Spring data,

30
00:01:16.030 --> 00:01:17.090
we need to add a property

31
00:01:17.090 --> 00:01:20.080
to our application.properties file.

32
00:01:20.080 --> 00:01:26.070
Spring.jpa.hibernate.ddl-auto.

33
00:01:26.070 --> 00:01:30.000
And we need to set that value to equal to none.

34
00:01:30.000 --> 00:01:32.070
This way we tell hibernate to not create the schema

35
00:01:32.070 --> 00:01:34.050
for us on our database.

36
00:01:34.050 --> 00:01:38.010
Use the schema file that I added for you in the project

37
00:01:38.010 --> 00:01:40.080
at schema.sql.

38
00:01:40.080 --> 00:01:43.010
So now to our repository.

39
00:01:43.010 --> 00:01:46.000
We are going to create a new Java class.

40
00:01:46.000 --> 00:01:49.070
And we're going to call this PresidentEntity.

41
00:01:49.070 --> 00:01:52.040
Now because this is JPA, we've got to do a few things.

42
00:01:52.040 --> 00:01:55.080
So, we'll annotate this with that entity.

43
00:01:55.080 --> 00:01:58.040
And we're also going to annotate 'em with @Table.

44
00:01:58.040 --> 00:02:05.080
And we're going to use the table name of PRESIDENT in all caps.

45
00:02:05.080 --> 00:02:09.040
Now, we're going to add an ID from javax.persistence.

46
00:02:09.040 --> 00:02:12.010
@GeneratedValue.

47
00:02:12.010 --> 00:02:15.060
@Column.

48
00:02:15.060 --> 00:02:22.050
And the name of this column is PRESIDENT_ID.

49
00:02:22.050 --> 00:02:25.080
Now you can see the schema that I'm using

50
00:02:25.080 --> 00:02:30.090
if you open up the schema.sql file.

51
00:02:30.090 --> 00:02:37.020
So we'll go ahead and add the rest of our fields here.

52
00:02:37.020 --> 00:02:39.060
So now that we've typed out all of our fields,

53
00:02:39.060 --> 00:02:41.010
we're going to generate getters and setters

54
00:02:41.010 --> 00:02:43.050
using the function in my IDE.

55
00:02:43.050 --> 00:02:47.090
You have one very similar.

56
00:02:47.090 --> 00:02:48.090
And then at the very bottom,

57
00:02:48.090 --> 00:02:50.080
I'm going to do a toString method.

58
00:02:50.080 --> 00:02:52.040
And again, I will generate it.

59
00:02:52.040 --> 00:02:55.070
And once again, most IDEs have the ability to generate.

60
00:02:55.070 --> 00:02:58.060
Take a look at your documentation.

61
00:02:58.060 --> 00:03:03.080
That's all we need to do to our president entity.

62
00:03:03.080 --> 00:03:07.080
So now let's go ahead and create a new Java interface

63
00:03:07.080 --> 00:03:13.020
called PresidentRepository.

64
00:03:13.020 --> 00:03:15.010
And this is going to extend

65
00:03:15.010 --> 00:03:18.020
the CrudRepository from Spring data.

66
00:03:18.020 --> 00:03:21.080
And we need to tell it to use the PresidentEntity.

67
00:03:21.080 --> 00:03:25.070
And then a big-L Long.

68
00:03:25.070 --> 00:03:27.090
We're going to annotate this with that repository

69
00:03:27.090 --> 00:03:32.020
so that Spring picks it up.

70
00:03:32.020 --> 00:03:33.070
And just because we can,

71
00:03:33.070 --> 00:03:37.000
we're going to add a new method to this

72
00:03:37.000 --> 00:03:41.010
called findByEmailAddress.

73
00:03:41.010 --> 00:03:44.080
And that's going to take a string of emailAddress.

74
00:03:44.080 --> 00:03:47.070
Now this is how, in Spring Data JPA,

75
00:03:47.070 --> 00:03:52.080
you would add new methods to your repository itself.

76
00:03:52.080 --> 00:03:54.090
So now what I want to do is write a test

77
00:03:54.090 --> 00:03:57.070
to test our repository pattern.

78
00:03:57.070 --> 00:04:03.030
So I'm going to do that by jumping into our test package here

79
00:04:03.030 --> 00:04:06.010
and opening up the design patterns test

80
00:04:06.010 --> 00:04:08.070
that came for free with Spring Boot.

81
00:04:08.070 --> 00:04:16.080
We're going to auto-wire in an instance of our repository.

82
00:04:16.080 --> 00:04:20.010
So now we can do an @Test.

83
00:04:20.010 --> 00:04:25.040
Public void, testRepository.

84
00:04:25.040 --> 00:04:29.090
And we will simply do a System.out.println

85
00:04:29.090 --> 00:04:35.080
on the presidentRepository.findById.

86
00:04:35.080 --> 00:04:40.000
And we'll send it in 1L.

87
00:04:40.000 --> 00:04:43.060
And let's go ahead and do another one.

88
00:04:43.060 --> 00:04:46.030
And this time, send in two.

89
00:04:46.030 --> 00:04:51.000
And we'll run this test.

90
00:04:51.000 --> 00:04:54.080
We'll ask Spring to load and do its thing.

91
00:04:54.080 --> 00:04:57.050
We can click on the test and see the output.

92
00:04:57.050 --> 00:04:59.030
And you'll see that we got the data from the database

93
00:04:59.030 --> 00:05:02.030
as we would expect in a single domain call.

94
00:05:02.030 --> 00:05:03.060
And that's how you do the repository pattern

95
00:05:03.060 --> 00:05:05.090
using Spring Data JPA.

96
00:05:05.090 --> 00:05:08.050
And if you use Spring Mongo or Spring Data,

97
00:05:08.050 --> 00:05:12.000
any other flavor, you're going to get very similar results.

