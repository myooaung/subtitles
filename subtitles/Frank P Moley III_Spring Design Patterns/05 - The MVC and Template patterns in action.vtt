WEBVTT
1
00:00:00.050 --> 00:00:01.080
- [Instructor] So now we're going to briefly talk

2
00:00:01.080 --> 00:00:04.020
about the MVC and template patterns

3
00:00:04.020 --> 00:00:05.070
and how you would go about using them

4
00:00:05.070 --> 00:00:08.040
in the Spring framework.

5
00:00:08.040 --> 00:00:10.030
Like you to jump over to the ID

6
00:00:10.030 --> 00:00:11.070
and before I get too deep into this

7
00:00:11.070 --> 00:00:13.070
I do want to say that I'm going to be very simplistic

8
00:00:13.070 --> 00:00:16.020
on the surface, and I highly encourage you

9
00:00:16.020 --> 00:00:18.020
to take a look at my course:

10
00:00:18.020 --> 00:00:19.050
Learning Spring with Spring Boot

11
00:00:19.050 --> 00:00:23.070
if you want more details on how the MVC pattern works.

12
00:00:23.070 --> 00:00:26.080
But for now, we'll go ahead and jump into our base class.

13
00:00:26.080 --> 00:00:31.010
We're going to start our design patterns app application.

14
00:00:31.010 --> 00:00:33.050
We're going to add a new bean

15
00:00:33.050 --> 00:00:36.070
and our bean is going to be of type rest template

16
00:00:36.070 --> 00:00:38.010
which is going to be the template pattern

17
00:00:38.010 --> 00:00:40.070
that we will use for this video.

18
00:00:40.070 --> 00:00:46.050
And it will simply return a new rest template.

19
00:00:46.050 --> 00:00:48.020
Simple enough.

20
00:00:48.020 --> 00:00:52.080
Let's go ahead and open up our controller.

21
00:00:52.080 --> 00:00:54.020
We're going to add a couple methods here.

22
00:00:54.020 --> 00:00:56.010
Now the first one that we're going to do is our example

23
00:00:56.010 --> 00:00:57.040
of an MVC.

24
00:00:57.040 --> 00:00:59.030
We've actually done this a couple of times

25
00:00:59.030 --> 00:01:01.000
but before we get into that,

26
00:01:01.000 --> 00:01:07.020
we need to wire in our president repository.

27
00:01:07.020 --> 00:01:09.060
And we're going to use this to populate our model.

28
00:01:09.060 --> 00:01:12.020
Now because we're doing restful web services,

29
00:01:12.020 --> 00:01:14.050
the model is going to be the data itself

30
00:01:14.050 --> 00:01:15.090
that is going to be displayed.

31
00:01:15.090 --> 00:01:19.080
And the view in this case is going to be JSON.

32
00:01:19.080 --> 00:01:26.080
So president's slash ID is where we want to respond to.

33
00:01:26.080 --> 00:01:33.060
And for this method we will return a president entity.

34
00:01:33.060 --> 00:01:36.070
And we're going to call this one getPresById

35
00:01:36.070 --> 00:01:41.010
and we're going to pass in a path variable of type long

36
00:01:41.010 --> 00:01:44.040
that is our ID.

37
00:01:44.040 --> 00:01:47.030
And the simple implementation of this method

38
00:01:47.030 --> 00:01:50.000
is going to return a model that comes

39
00:01:50.000 --> 00:01:54.030
from our president repository, findById

40
00:01:54.030 --> 00:02:00.040
and we'll pass in the ID that is called to the method.

41
00:02:00.040 --> 00:02:02.090
But we also need to add a get to it

42
00:02:02.090 --> 00:02:05.080
because it's an optional interface now.

43
00:02:05.080 --> 00:02:08.060
So, in this MVC use case,

44
00:02:08.060 --> 00:02:11.050
the model is our president entity,

45
00:02:11.050 --> 00:02:15.010
the view is JSON, and the controller is this method

46
00:02:15.010 --> 00:02:17.030
that we just implemented.

47
00:02:17.030 --> 00:02:20.010
So now let's show you how to use the template.

48
00:02:20.010 --> 00:02:23.020
So once again we're going to auto wire in a bean

49
00:02:23.020 --> 00:02:30.050
and this time we're going to auto wire in our rest template.

50
00:02:30.050 --> 00:02:33.090
Go ahead and import that in.

51
00:02:33.090 --> 00:02:37.090
And now we're going to do a get mapping

52
00:02:37.090 --> 00:02:47.080
on presidentContact/{id}.

53
00:02:47.080 --> 00:02:54.080
And we will do a public contact, getPresContactById

54
00:02:54.080 --> 00:02:57.080
and once again we're going to send in a path variable

55
00:02:57.080 --> 00:03:00.070
of type long, ID.

56
00:03:00.070 --> 00:03:03.010
Now, if you've ever used HTTP entity

57
00:03:03.010 --> 00:03:05.060
to go through into a rest template call,

58
00:03:05.060 --> 00:03:08.040
hopefully you'll see why this template pattern

59
00:03:08.040 --> 00:03:10.040
makes this so efficient.

60
00:03:10.040 --> 00:03:13.010
As a matter of fact, in order to make this work,

61
00:03:13.010 --> 00:03:17.000
we're going to do the following:

62
00:03:17.000 --> 00:03:20.090
we're going to get a president entity

63
00:03:20.090 --> 00:03:28.090
from this .restTemplate.getForEntity,

64
00:03:28.090 --> 00:03:33.060
I'm going to bring this to a new line here.

65
00:03:33.060 --> 00:03:37.050
So we're going to pass in local host

66
00:03:37.050 --> 00:03:47.030
8080 slash presidents slash curly brace ID.

67
00:03:47.030 --> 00:03:50.070
We're going to get a PresidentEntity.class

68
00:03:50.070 --> 00:03:55.010
and we're going to pass in the ID as a value.

69
00:03:55.010 --> 00:03:57.060
And finally,

70
00:03:57.060 --> 00:03:59.020
this is going to return a response

71
00:03:59.020 --> 00:04:01.060
so we need to get the body out of the response.

72
00:04:01.060 --> 00:04:03.010
So instead of doing everything we normally

73
00:04:03.010 --> 00:04:04.080
have to do for HTTP entity,

74
00:04:04.080 --> 00:04:07.070
we simply called rest template, get for entity,

75
00:04:07.070 --> 00:04:10.080
passed in the URL, passed in the type of object we

76
00:04:10.080 --> 00:04:14.060
were expecting out, and passed in the value,

77
00:04:14.060 --> 00:04:17.020
got a response to which we pulled the body out,

78
00:04:17.020 --> 00:04:19.040
which will be a president entity.

79
00:04:19.040 --> 00:04:22.020
And to prove to you that it's a president entity,

80
00:04:22.020 --> 00:04:27.020
we are going to return a new contact builder.

81
00:04:27.020 --> 00:04:29.060
And to that contact builder we're going to say

82
00:04:29.060 --> 00:04:35.030
set first name equal to our entity .getFirstName.

83
00:04:35.030 --> 00:04:41.070
.setLastName equal to our entity .getLastName.

84
00:04:41.070 --> 00:04:47.080
And then .setEmailAddress once again equal to our entity

85
00:04:47.080 --> 00:04:51.010
.getEmailAddress and then we will finish it up

86
00:04:51.010 --> 00:04:53.080
by calling buildContact,

87
00:04:53.080 --> 00:04:55.080
and now we can return our base.

88
00:04:55.080 --> 00:04:58.000
So let's go ahead and start up our application

89
00:04:58.000 --> 00:05:00.000
and we're going to do our main application class

90
00:05:00.000 --> 00:05:02.010
so we get the controller to run

91
00:05:02.010 --> 00:05:04.070
and while that's starting up,

92
00:05:04.070 --> 00:05:07.000
I'm going to jump into terminal.

93
00:05:07.000 --> 00:05:09.010
Now once again, you can do this with curl,

94
00:05:09.010 --> 00:05:11.070
but I'm going to use the HTTP ie,

95
00:05:11.070 --> 00:05:15.040
and I'm going to call to local host 8080

96
00:05:15.040 --> 00:05:21.090
slash presidents slash 15.

97
00:05:21.090 --> 00:05:24.030
Now this is going to return

98
00:05:24.030 --> 00:05:26.030
our actual president object.

99
00:05:26.030 --> 00:05:28.070
And you'll see we get the e-mail first name last name.

100
00:05:28.070 --> 00:05:30.020
So this is our view.

101
00:05:30.020 --> 00:05:32.050
This is the JSON view of the model

102
00:05:32.050 --> 00:05:34.040
that is the president.

103
00:05:34.040 --> 00:05:36.000
Now I'm going to do the same thing,

104
00:05:36.000 --> 00:05:38.020
but instead of calling presidents,

105
00:05:38.020 --> 00:05:41.010
I'm going to call president contact.

106
00:05:41.010 --> 00:05:44.000
And in this case now, I've done a rest call

107
00:05:44.000 --> 00:05:47.030
that in turn did a rest call using rest template

108
00:05:47.030 --> 00:05:49.010
back to the same in point

109
00:05:49.010 --> 00:05:50.060
and now I've got a filtered view

110
00:05:50.060 --> 00:05:53.010
because I've done a two step process.

111
00:05:53.010 --> 00:05:54.060
So this is the MVC pattern

112
00:05:54.060 --> 00:05:56.020
and then a template pattern

113
00:05:56.020 --> 00:05:59.000
being used with a MVC framework of Spring.

