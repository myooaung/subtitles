WEBVTT
1
00:00:00.060 --> 00:00:01.060
- [Instructor] So, we've talked at a high

2
00:00:01.060 --> 00:00:04.020
level about the decorator and how it's used.

3
00:00:04.020 --> 00:00:05.040
Let's jump into code and take a

4
00:00:05.040 --> 00:00:07.090
look at its actual implementation.

5
00:00:07.090 --> 00:00:11.060
We're going to start with our base package in scr/main/java.

6
00:00:11.060 --> 00:00:14.020
And we're going to create a new package.

7
00:00:14.020 --> 00:00:16.070
This time, called decorator.

8
00:00:16.070 --> 00:00:18.090
Now, one of the easiest examples to use

9
00:00:18.090 --> 00:00:22.010
of a decorator is the concept of a pizza.

10
00:00:22.010 --> 00:00:23.070
And that's what we're going to do.

11
00:00:23.070 --> 00:00:28.030
So, we will create a class of Name: Pizza.

12
00:00:28.030 --> 00:00:31.010
And we will make that class abstract.

13
00:00:31.010 --> 00:00:33.010
Now, we're going to add a protected

14
00:00:33.010 --> 00:00:36.070
string on here, called description.

15
00:00:36.070 --> 00:00:40.070
And then we will create a public string,

16
00:00:40.070 --> 00:00:44.090
getDescription method, that will return that description.

17
00:00:44.090 --> 00:00:48.030
Then we're going to put a public abstract method,

18
00:00:48.030 --> 00:00:52.060
that returns a BigDecimal, called getCost.

19
00:00:52.060 --> 00:00:53.050
Okay.

20
00:00:53.050 --> 00:00:55.030
So, now we've got our pizza.

21
00:00:55.030 --> 00:00:59.050
So, let's create a concrete instance of a pizza.

22
00:00:59.050 --> 00:01:01.090
And we will create a ThickCrustPizza.

23
00:01:01.090 --> 00:01:04.020
Now, we're going to extend Pizza here.

24
00:01:04.020 --> 00:01:12.020
And we will create a public ThickCrustPizza constructor.

25
00:01:12.020 --> 00:01:15.080
And now, we will implement our method of getCost.

26
00:01:15.080 --> 00:01:19.090
And we will simply return a new BigDecimal.

27
00:01:19.090 --> 00:01:24.070
In this case, we will return 15.00.

28
00:01:24.070 --> 00:01:27.060
So, now we're going to make our decorator itself.

29
00:01:27.060 --> 00:01:29.010
And in this case, the only way to

30
00:01:29.010 --> 00:01:33.050
decorate a pizza is with ingredients.

31
00:01:33.050 --> 00:01:37.010
So, we will create a class, called PizzaIngredient.

32
00:01:37.010 --> 00:01:40.050
And this will extend Pizza.

33
00:01:40.050 --> 00:01:45.020
We will create a public abstract method,

34
00:01:45.020 --> 00:01:49.000
that returns a string, called getDescription.

35
00:01:49.000 --> 00:01:51.090
'Cause we're not ready to implement that yet.

36
00:01:51.090 --> 00:01:55.030
We also need to make our class abstract.

37
00:01:55.030 --> 00:01:59.080
So, now our decorator itself is actually ready to be used.

38
00:01:59.080 --> 00:02:04.000
So, let's create my favorite topping on a pizza...

39
00:02:04.000 --> 00:02:06.040
Which is pepperoni.

40
00:02:06.040 --> 00:02:11.050
Now, Pepperoni will extend PizzaIngredient.

41
00:02:11.050 --> 00:02:16.020
We'll implement some methods here.

42
00:02:16.020 --> 00:02:20.050
And we will start out with a constructor.

43
00:02:20.050 --> 00:02:24.010
And the constructor is going to take a pizza.

44
00:02:24.010 --> 00:02:32.010
And that pizza is going to be stored on this object.

45
00:02:32.010 --> 00:02:35.090
So, in our constructor, we will call super.

46
00:02:35.090 --> 00:02:38.010
And this.pizza,

47
00:02:38.010 --> 00:02:41.020
= pizza.

48
00:02:41.020 --> 00:02:43.030
So, now we've stored it.

49
00:02:43.030 --> 00:02:44.060
So, to our description,

50
00:02:44.060 --> 00:02:48.090
we will return this.pizza.getDescription,

51
00:02:48.090 --> 00:02:50.050
Plus.

52
00:02:50.050 --> 00:02:53.080
And then we're going to say, plus pepperoni.

53
00:02:53.080 --> 00:02:55.060
So, if you remember, on our ThickCrustPizza,

54
00:02:55.060 --> 00:02:57.090
we said that was a ThickCrustPizza.

55
00:02:57.090 --> 00:03:00.040
This way, the text will make sense.

56
00:03:00.040 --> 00:03:02.020
And now, for the cost.

57
00:03:02.020 --> 00:03:06.050
So, we will return a new BigDecimal.

58
00:03:06.050 --> 00:03:10.020
And we're going to charge 1.50 per topping.

59
00:03:10.020 --> 00:03:15.090
And we will add that to this.pizza.getCost.

60
00:03:15.090 --> 00:03:19.030
And now we're good to go. So, let's create a test for this.

61
00:03:19.030 --> 00:03:21.090
We'll go down to src/test/java.

62
00:03:21.090 --> 00:03:23.090
Base package.

63
00:03:23.090 --> 00:03:28.010
Create a new package down here, called decorator.

64
00:03:28.010 --> 00:03:29.090
And in the decorator, we will create a

65
00:03:29.090 --> 00:03:34.040
new Java class, called DecoratorTest.

66
00:03:34.040 --> 00:03:36.080
So, @Test.

67
00:03:36.080 --> 00:03:39.020
Public void.

68
00:03:39.020 --> 00:03:41.060
TestDecorator.

69
00:03:41.060 --> 00:03:43.080
So, what we've done here, is we've created a pizza.

70
00:03:43.080 --> 00:03:46.050
We're putting on its description and its cost.

71
00:03:46.050 --> 00:03:49.050
Now, we're going to create a pepperoni pizza.

72
00:03:49.050 --> 00:03:52.040
And we will pass our original pizza.

73
00:03:52.040 --> 00:03:54.090
And we're going to do the same thing.

74
00:03:54.090 --> 00:03:58.030
Copy those two values.

75
00:03:58.030 --> 00:04:00.090
And now we're going to do one more.

76
00:04:00.090 --> 00:04:05.090
In this case, we're going to do a doublePepperoni.

77
00:04:05.090 --> 00:04:10.050
And this time, we're going to pass our pepperoni pizza to it.

78
00:04:10.050 --> 00:04:14.040
Copy these two statements one more time.

79
00:04:14.040 --> 00:04:16.050
And bring in the double.

80
00:04:16.050 --> 00:04:19.080
And now, we'll run our test.

81
00:04:19.080 --> 00:04:20.070
So, as you might expect,

82
00:04:20.070 --> 00:04:23.000
we created the first ThickCrustPizza.

83
00:04:23.000 --> 00:04:25.040
We then decorated it with pepperoni.

84
00:04:25.040 --> 00:04:27.030
We then took that pepperoni pizza and

85
00:04:27.030 --> 00:04:30.020
decorated it with another round of pepperoni.

86
00:04:30.020 --> 00:04:31.050
The cost has been adjusted.

87
00:04:31.050 --> 00:04:33.030
The text has been adjusted.

88
00:04:33.030 --> 00:04:34.080
Each and every time.

89
00:04:34.080 --> 00:04:36.060
And now, if we added other ingredients we could

90
00:04:36.060 --> 00:04:39.000
do the same thing until we got to the supreme.

