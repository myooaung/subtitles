WEBVTT
1
00:00:00.060 --> 00:00:02.000
- [Instructor] The Command pattern is another one

2
00:00:02.000 --> 00:00:05.020
of these design patterns that exists in the Spring framework

3
00:00:05.020 --> 00:00:08.050
we don't use a lot that are behavior based.

4
00:00:08.050 --> 00:00:09.040
In the Spring framework

5
00:00:09.040 --> 00:00:11.080
there's really two distinct use cases.

6
00:00:11.080 --> 00:00:14.030
First, it's seen with Runnable instances.

7
00:00:14.030 --> 00:00:16.020
Things like the CommandLineRunner,

8
00:00:16.020 --> 00:00:18.060
where you're going to execute a Runnable command

9
00:00:18.060 --> 00:00:21.040
from the base class itself.

10
00:00:21.040 --> 00:00:24.070
The second use case that we see is all the more often seen,

11
00:00:24.070 --> 00:00:26.070
and that's in our MVC layer.

12
00:00:26.070 --> 00:00:29.000
And there's actually an AbstractCommandController

13
00:00:29.000 --> 00:00:31.030
that you can use in Spring MVC

14
00:00:31.030 --> 00:00:33.080
that implements this command pattern.

15
00:00:33.080 --> 00:00:36.050
And the idea here is that in an MVC world,

16
00:00:36.050 --> 00:00:39.060
often you're going to execute these commands against controls,

17
00:00:39.060 --> 00:00:42.070
and you don't want to manipulate the individual controls.

18
00:00:42.070 --> 00:00:46.060
That's going to lead us into what the pattern actually is.

19
00:00:46.060 --> 00:00:49.010
The whole gist of the command pattern is that it provides

20
00:00:49.010 --> 00:00:53.090
an abstraction layer for these request processing scenarios.

21
00:00:53.090 --> 00:00:55.040
Think about a shopping cart.

22
00:00:55.040 --> 00:00:57.020
You have a very common pattern

23
00:00:57.020 --> 00:00:59.030
that you go through with the shopping cart,

24
00:00:59.030 --> 00:01:01.040
but those commands can be executed

25
00:01:01.040 --> 00:01:05.050
on each and every shopping cart in distinct fashion.

26
00:01:05.050 --> 00:01:09.090
So, this process calling action gets a common interface

27
00:01:09.090 --> 00:01:13.010
instead of the underlying implementations,

28
00:01:13.010 --> 00:01:15.070
and once again this leads to decoupling of our code,

29
00:01:15.070 --> 00:01:18.030
which we're going to talk a little bit more about.

30
00:01:18.030 --> 00:01:21.090
This allows the implementation, or implementations,

31
00:01:21.090 --> 00:01:24.090
to be changed without the calling code itself

32
00:01:24.090 --> 00:01:26.040
having to make a change,

33
00:01:26.040 --> 00:01:29.030
because they're calling the common command interface

34
00:01:29.030 --> 00:01:32.030
instead of the underlying implementations.

35
00:01:32.030 --> 00:01:35.040
And finally, this provides a structured processing layer

36
00:01:35.040 --> 00:01:40.000
without tight coupling, so now we can talk about why.

37
00:01:40.000 --> 00:01:42.050
Reducing coupling during command processing,

38
00:01:42.050 --> 00:01:44.070
and this is very, very important.

39
00:01:44.070 --> 00:01:47.070
Command processing tends to be behaviors

40
00:01:47.070 --> 00:01:49.030
that are very stepwise.

41
00:01:49.030 --> 00:01:52.050
You have to do A, and then B, and then C, and then D,

42
00:01:52.050 --> 00:01:55.080
and all of this has to occur in a very set way.

43
00:01:55.080 --> 00:01:57.050
By leveraging command processing,

44
00:01:57.050 --> 00:02:00.000
I don't have to worry about the underlying steps,

45
00:02:00.000 --> 00:02:01.090
I simply have to call the command

46
00:02:01.090 --> 00:02:03.060
and allow the command processor,

47
00:02:03.060 --> 00:02:06.030
or the class that's implementing the command pattern,

48
00:02:06.030 --> 00:02:08.090
to do that chain of events.

49
00:02:08.090 --> 00:02:11.050
This allows behavior to be added

50
00:02:11.050 --> 00:02:13.070
without modifying the calling code,

51
00:02:13.070 --> 00:02:15.060
and in addition to adding behavior,

52
00:02:15.060 --> 00:02:17.070
we also can remove behavior,

53
00:02:17.070 --> 00:02:20.090
and that is always very important as well.

54
00:02:20.090 --> 00:02:24.040
Finally, this allows multiple implementations of the command

55
00:02:24.040 --> 00:02:28.020
to exist without modifications to the caller.

56
00:02:28.020 --> 00:02:30.050
Think about a scenario where a command can exist

57
00:02:30.050 --> 00:02:34.040
in multiple formats based on the state of the application.

58
00:02:34.040 --> 00:02:36.080
By leveraging the command pattern,

59
00:02:36.080 --> 00:02:38.080
I call that common command interface,

60
00:02:38.080 --> 00:02:40.010
and I don't have to worry about

61
00:02:40.010 --> 00:02:43.040
the underlying state changes in my calling code.

62
00:02:43.040 --> 00:02:48.030
Again, decoupling our code, and relying on the interface.

63
00:02:48.030 --> 00:02:51.080
So how would I go about creating a command pattern?

64
00:02:51.080 --> 00:02:54.080
First and foremost I need to create the command interface,

65
00:02:54.080 --> 00:02:58.030
and this is the command that's going to be executed.

66
00:02:58.030 --> 00:03:02.010
Next, I need to create a method to do execution,

67
00:03:02.010 --> 00:03:04.040
which is that method that I just talked about.

68
00:03:04.040 --> 00:03:06.090
But we also need to have a revert method,

69
00:03:06.090 --> 00:03:08.070
though not everybody puts a revert method

70
00:03:08.070 --> 00:03:10.010
on their command pattern.

71
00:03:10.010 --> 00:03:11.080
But I find it to be very important

72
00:03:11.080 --> 00:03:13.060
because many times you want to be able

73
00:03:13.060 --> 00:03:16.020
to stop that command once it's started,

74
00:03:16.020 --> 00:03:18.020
and you need a way to do that.

75
00:03:18.020 --> 00:03:21.030
Next, you're going to create command implementations

76
00:03:21.030 --> 00:03:24.030
that act on specific objects or scenarios,

77
00:03:24.030 --> 00:03:27.030
and all of those implementations are going to pull

78
00:03:27.030 --> 00:03:29.090
from the common command interface.

79
00:03:29.090 --> 00:03:32.010
Finally, your calling code,

80
00:03:32.010 --> 00:03:34.020
so the code that's going to consume this

81
00:03:34.020 --> 00:03:37.030
is actually going to use a hook to the command interface

82
00:03:37.030 --> 00:03:39.040
and not to the individual commands.

83
00:03:39.040 --> 00:03:42.020
That way we can leverage those commands as needed

84
00:03:42.020 --> 00:03:46.000
instead of the concrete implementations of them.

85
00:03:46.000 --> 00:03:50.000
And that's in a nutshell how the Command pattern works.

