WEBVTT
1
00:00:00.050 --> 00:00:01.090
- The first behavior pattern that we're going

2
00:00:01.090 --> 00:00:04.090
to talk about is the observer pattern.

3
00:00:04.090 --> 00:00:07.050
Now in Spring there's really one primary use case

4
00:00:07.050 --> 00:00:09.010
of the observer pattern,

5
00:00:09.010 --> 00:00:11.020
and that is when listening to changes

6
00:00:11.020 --> 00:00:13.040
of the ApplicationContext.

7
00:00:13.040 --> 00:00:15.090
And you can do that through the ApplicationListener

8
00:00:15.090 --> 00:00:18.010
interface that will tell you if and when

9
00:00:18.010 --> 00:00:20.070
the ApplicationContext changes.

10
00:00:20.070 --> 00:00:23.040
Now this is more of an advanced topic in Spring,

11
00:00:23.040 --> 00:00:25.040
and its not that often that you're going to do this.

12
00:00:25.040 --> 00:00:28.070
But this is one use case of the observer pattern

13
00:00:28.070 --> 00:00:30.050
in the Spring framework.

14
00:00:30.050 --> 00:00:34.020
One sort of loose way that the observer pattern is used

15
00:00:34.020 --> 00:00:36.050
in the Spring framework is the way JMS,

16
00:00:36.050 --> 00:00:38.090
or Rabbit message listeners work.

17
00:00:38.090 --> 00:00:41.000
It's a very loose interpretation cause it's

18
00:00:41.000 --> 00:00:43.030
really a asynchronous call coming back,

19
00:00:43.030 --> 00:00:45.020
but if you look at it logically it is

20
00:00:45.020 --> 00:00:48.020
kind of the way that the observer pattern works.

21
00:00:48.020 --> 00:00:51.000
So what is this observer pattern?

22
00:00:51.000 --> 00:00:53.000
So first and foremost there is an object,

23
00:00:53.000 --> 00:00:54.040
that's called a subject.

24
00:00:54.040 --> 00:00:58.000
That maintains a list of observers,

25
00:00:58.000 --> 00:01:00.070
when a notification is created based on some

26
00:01:00.070 --> 00:01:05.060
state change a message is sent to the observer

27
00:01:05.060 --> 00:01:07.050
that tells it that this state changed.

28
00:01:07.050 --> 00:01:10.020
So it's a way to actually pass the notification,

29
00:01:10.020 --> 00:01:13.020
from a parent to a list of children.

30
00:01:13.020 --> 00:01:16.000
The observers themselves can then determine

31
00:01:16.000 --> 00:01:18.070
if they need to act on the notification,

32
00:01:18.070 --> 00:01:21.090
or throw it out based on whether it applies to them.

33
00:01:21.090 --> 00:01:24.090
Now some state changes should apply to all observers,

34
00:01:24.090 --> 00:01:26.070
but that's not always the case.

35
00:01:26.070 --> 00:01:29.020
So by using this pattern each observer can make

36
00:01:29.020 --> 00:01:33.010
it's own determination of whether the notification matters,

37
00:01:33.010 --> 00:01:36.070
and all the subject needs to do is notify everyone

38
00:01:36.070 --> 00:01:39.010
that a state change has occurred.

39
00:01:39.010 --> 00:01:41.070
So why might we do this pattern?

40
00:01:41.070 --> 00:01:44.000
One of the primary reasons of doing this,

41
00:01:44.000 --> 00:01:46.060
is to reduce coupling in code paths

42
00:01:46.060 --> 00:01:50.000
when you have this one-to-many dependency situations.

43
00:01:50.000 --> 00:01:52.070
We see this a lot, with the way asynchronous messaging

44
00:01:52.070 --> 00:01:56.030
patterns work or when we have to fan a command out,

45
00:01:56.030 --> 00:01:59.050
to multiple implementations or services.

46
00:01:59.050 --> 00:02:02.090
By using this pattern we can actually encapsulate

47
00:02:02.090 --> 00:02:06.090
the call into one method call and that method call

48
00:02:06.090 --> 00:02:10.050
then creates a notification that spins out to

49
00:02:10.050 --> 00:02:12.060
multiple business services.

50
00:02:12.060 --> 00:02:14.020
We do this a lot with ETL's,

51
00:02:14.020 --> 00:02:18.010
we do this a lot with managing state within a system

52
00:02:18.010 --> 00:02:20.040
when we're trying to run a state machine.

53
00:02:20.040 --> 00:02:24.030
The object state changes will have downstream effects,

54
00:02:24.030 --> 00:02:27.080
and we need to decouple that from the main application flow.

55
00:02:27.080 --> 00:02:29.040
So think if for a moment if we don't have

56
00:02:29.040 --> 00:02:31.020
this notifier layer?

57
00:02:31.020 --> 00:02:34.000
The parent that is making the change to state

58
00:02:34.000 --> 00:02:36.080
would have to know about each and every observer,

59
00:02:36.080 --> 00:02:39.090
How it exists and how it's methods operate.

60
00:02:39.090 --> 00:02:43.050
With the observer pattern, I only need to notify

61
00:02:43.050 --> 00:02:47.030
the subject who will then notify the observers,

62
00:02:47.030 --> 00:02:49.090
and the observers themselves will know how to

63
00:02:49.090 --> 00:02:53.060
implement the change based on this notification.

64
00:02:53.060 --> 00:02:56.060
There's also a need often to dynamically register

65
00:02:56.060 --> 00:02:59.050
downstream observers, and if that exists it's

66
00:02:59.050 --> 00:03:03.070
almost impossible to do this without the observer pattern.

67
00:03:03.070 --> 00:03:06.090
Because then you have to handle code pass of registering,

68
00:03:06.090 --> 00:03:09.040
and unregistering things and being able to manage

69
00:03:09.040 --> 00:03:12.030
this state of the observers dynamically

70
00:03:12.030 --> 00:03:14.080
through your main code line and that becomes

71
00:03:14.080 --> 00:03:16.070
a maintenance nightmare.

72
00:03:16.070 --> 00:03:18.080
So the observer pattern really provides you

73
00:03:18.080 --> 00:03:21.080
the substraction layer that you need when handling

74
00:03:21.080 --> 00:03:24.050
these multiple calls from a single event,

75
00:03:24.050 --> 00:03:26.060
or a single state change.

76
00:03:26.060 --> 00:03:29.020
So how might we go about creating this?

77
00:03:29.020 --> 00:03:32.040
It's really a fairly straight forward pattern to implement,

78
00:03:32.040 --> 00:03:35.070
though its a little bit convoluted to talk about.

79
00:03:35.070 --> 00:03:40.070
First and foremost you create an observer interface,

80
00:03:40.070 --> 00:03:43.050
then you create a subject interface

81
00:03:43.050 --> 00:03:44.090
with the register and unregister,

82
00:03:44.090 --> 00:03:47.040
and its important to do both the register,

83
00:03:47.040 --> 00:03:49.040
and the unregister method.

84
00:03:49.040 --> 00:03:51.080
That take the observer object,

85
00:03:51.080 --> 00:03:54.070
as well as has a notify interface.

86
00:03:54.070 --> 00:03:56.090
Again that register and unregister is important,

87
00:03:56.090 --> 00:04:00.010
because throughout the life cycle of your application

88
00:04:00.010 --> 00:04:03.000
an observer may need to unregister itself

89
00:04:03.000 --> 00:04:05.000
based on the state change.

90
00:04:05.000 --> 00:04:07.080
Or something may trigger new registrations

91
00:04:07.080 --> 00:04:10.000
to occur based on state change.

92
00:04:10.000 --> 00:04:11.080
So you got to have both.

93
00:04:11.080 --> 00:04:14.030
So now your going to implement the interfaces

94
00:04:14.030 --> 00:04:16.050
into concrete classes.

95
00:04:16.050 --> 00:04:18.010
Now in the real world in Java,

96
00:04:18.010 --> 00:04:20.020
we're actually not going to do any of this.

97
00:04:20.020 --> 00:04:22.030
We are going to leverage 2 built in

98
00:04:22.030 --> 00:04:24.080
interfaces from Java.util.

99
00:04:24.080 --> 00:04:28.040
There's the observer bowl interface, and the observer.

100
00:04:28.040 --> 00:04:30.050
The observer bowl is obviously our subject,

101
00:04:30.050 --> 00:04:33.010
and the observer is the observer itself.

102
00:04:33.010 --> 00:04:35.080
So most of the time in Java when we do this,

103
00:04:35.080 --> 00:04:38.060
we're going to leverage the built in Java.util functions.

104
00:04:38.060 --> 00:04:41.000
The build in Java.util interfaces,

105
00:04:41.000 --> 00:04:45.000
and do the same behavior using these key interfaces.

106
00:04:45.000 --> 00:04:46.080
That's the pattern in a nutshell,

107
00:04:46.080 --> 00:04:49.000
and how it's used in the Spring framework.

