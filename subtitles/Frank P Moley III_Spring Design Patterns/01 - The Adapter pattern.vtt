WEBVTT
1
00:00:00.070 --> 00:00:02.070
[Instructor] The Adapter Pattern is one of those patterns

2
00:00:02.070 --> 00:00:05.070
that really takes a moment to wrap your mind around

3
00:00:05.070 --> 00:00:08.030
and it becomes even harder to find objects that fit in

4
00:00:08.030 --> 00:00:11.060
to this pattern when you try to create them at will

5
00:00:11.060 --> 00:00:14.090
because we tend to think of things that are similar,

6
00:00:14.090 --> 00:00:18.010
but very similar, not loosely similar.

7
00:00:18.010 --> 00:00:20.010
And the Adapter Pattern plays very well

8
00:00:20.010 --> 00:00:22.050
in that loosely similar set.

9
00:00:22.050 --> 00:00:24.090
Let's talk a little bit about how the Adapter Pattern

10
00:00:24.090 --> 00:00:26.040
is used in Spring.

11
00:00:26.040 --> 00:00:28.090
One if the most common use case or the one

12
00:00:28.090 --> 00:00:32.090
that I've dealt with the most is with Spring integration.

13
00:00:32.090 --> 00:00:36.080
Spring integration actually leverages Channel Adapters

14
00:00:36.080 --> 00:00:39.080
throughout the entire operation for communication

15
00:00:39.080 --> 00:00:41.050
with different systems.

16
00:00:41.050 --> 00:00:45.080
It allows you to build a channel and within that channel

17
00:00:45.080 --> 00:00:49.030
that have different communication in points without having

18
00:00:49.030 --> 00:00:51.090
to manipulate the behavior of the channel.

19
00:00:51.090 --> 00:00:54.020
So in Spring integration this is a great example

20
00:00:54.020 --> 00:00:58.010
of very similar but not that similar objects

21
00:00:58.010 --> 00:01:00.040
having shared methodology.

22
00:01:00.040 --> 00:01:03.090
It's also used a lot with the internal operations of AspectJ

23
00:01:03.090 --> 00:01:07.030
specifically during loading of the application context

24
00:01:07.030 --> 00:01:09.070
and the weaving that takes place.

25
00:01:09.070 --> 00:01:11.060
Now we're going to spend most of this time talking about

26
00:01:11.060 --> 00:01:14.080
the pattern as it exist in Java and not necessarily

27
00:01:14.080 --> 00:01:17.000
how it exist in Spring.

28
00:01:17.000 --> 00:01:19.020
Now, the way that the pattern works is that you

29
00:01:19.020 --> 00:01:22.040
have two different interfaces or two different objects

30
00:01:22.040 --> 00:01:26.010
that share a very common operation.

31
00:01:26.010 --> 00:01:29.090
Not identical always but it's a very common operation.

32
00:01:29.090 --> 00:01:33.060
Now an adapter is a wrapper class that is created

33
00:01:33.060 --> 00:01:37.020
and it holds an instance of one of the interfaces

34
00:01:37.020 --> 00:01:39.090
while implementing the other interface

35
00:01:39.090 --> 00:01:44.000
and that's how it adapts the two interfaces together.

36
00:01:44.000 --> 00:01:46.080
And specifically, that shared operation

37
00:01:46.080 --> 00:01:50.030
of the wrapper interface is implemented in such as way

38
00:01:50.030 --> 00:01:54.040
that it calls the similarly shared operation

39
00:01:54.040 --> 00:01:56.060
of the interface that is wrapped.

40
00:01:56.060 --> 00:01:58.070
Hence, adapting the two.

41
00:01:58.070 --> 00:02:01.070
That common path gives ton in the adapter

42
00:02:01.070 --> 00:02:05.060
as opposed to trying to manipulate the interfaces themselves

43
00:02:05.060 --> 00:02:07.050
to be something that they're not.

44
00:02:07.050 --> 00:02:10.060
And often that's really where the power comes in.

45
00:02:10.060 --> 00:02:14.030
Instead of trying to make things fit, you can use adapters

46
00:02:14.030 --> 00:02:16.030
in certain code flows.

47
00:02:16.030 --> 00:02:18.050
So why would we want to do this?

48
00:02:18.050 --> 00:02:20.000
One of the most common use cases

49
00:02:20.000 --> 00:02:23.010
that I originally was introduced to with this pattern

50
00:02:23.010 --> 00:02:26.050
was when you were working with legacy or third party code,

51
00:02:26.050 --> 00:02:29.010
that you need it to fit into your code.

52
00:02:29.010 --> 00:02:31.070
Often, we didn't want to manipulate the legacy code

53
00:02:31.070 --> 00:02:34.040
because of all the bugs that might introduce

54
00:02:34.040 --> 00:02:36.080
or we didn't have the ability to manipulate

55
00:02:36.080 --> 00:02:39.040
third party code so by leveraging adapters

56
00:02:39.040 --> 00:02:44.000
we could use their code in our way that we needed to.

57
00:02:44.000 --> 00:02:46.090
It also allows you to share functionality

58
00:02:46.090 --> 00:02:50.050
on very disparate objects to reduce code.

59
00:02:50.050 --> 00:02:53.000
So let's say that you have widgets and sprockets

60
00:02:53.000 --> 00:02:56.030
and for all intends and purposes they are very different

61
00:02:56.030 --> 00:02:59.010
until they run down the factory assembly line.

62
00:02:59.010 --> 00:03:01.000
When they're coming down the assembly line,

63
00:03:01.000 --> 00:03:03.080
they act very much the exact same

64
00:03:03.080 --> 00:03:06.030
and that's where the adapters comes into play.

65
00:03:06.030 --> 00:03:09.080
The adapter can treat those two objects as the same

66
00:03:09.080 --> 00:03:12.060
during that path of code where they would be

67
00:03:12.060 --> 00:03:14.050
on the assembly line.

68
00:03:14.050 --> 00:03:18.020
And this will allow you to code two-way simple interface

69
00:03:18.020 --> 00:03:21.000
in this routine workflow so that assembly line

70
00:03:21.000 --> 00:03:24.000
is the routine workflow and everything that happens on it

71
00:03:24.000 --> 00:03:27.060
we would code into the interface of the adapter.

72
00:03:27.060 --> 00:03:30.020
And by doing this, we can reduce the code

73
00:03:30.020 --> 00:03:33.020
which of course improves readability.

74
00:03:33.020 --> 00:03:36.030
So how would we go about creating this?

75
00:03:36.030 --> 00:03:40.040
We're going to start with two interfaces that share a method.

76
00:03:40.040 --> 00:03:43.000
Now that method doesn't have to be exact.

77
00:03:43.000 --> 00:03:45.080
And really it only needs to be logically similar.

78
00:03:45.080 --> 00:03:48.000
There's no requirements on name being the same

79
00:03:48.000 --> 00:03:50.070
or anything like that, though, often in examples

80
00:03:50.070 --> 00:03:53.040
you will see the name being the exact same.

81
00:03:53.040 --> 00:03:55.080
That's only for example purposes.

82
00:03:55.080 --> 00:03:59.000
The key here is that logically they behave

83
00:03:59.000 --> 00:04:02.010
in enough similar fashion that you can treat them

84
00:04:02.010 --> 00:04:05.030
as the same in a certain block of code.

85
00:04:05.030 --> 00:04:06.090
So once you have those two interfaces,

86
00:04:06.090 --> 00:04:08.040
you're going to implement both of those

87
00:04:08.040 --> 00:04:10.020
with your concrete classes.

88
00:04:10.020 --> 00:04:12.040
You may have more than one concrete class

89
00:04:12.040 --> 00:04:15.030
but at least need one in order to make this work.

90
00:04:15.030 --> 00:04:17.030
Then you're going to create your wrapper class

91
00:04:17.030 --> 00:04:20.000
and this wrapper class is the adapter.

92
00:04:20.000 --> 00:04:21.090
You're going to pick one of the two interfaces

93
00:04:21.090 --> 00:04:24.000
and usually it's the one that is more close

94
00:04:24.000 --> 00:04:25.070
to what you're writing.

95
00:04:25.070 --> 00:04:28.080
You're going to pick that one an you're going to implement it.

96
00:04:28.080 --> 00:04:32.080
Then within that wrapper class, you're going to have a handle

97
00:04:32.080 --> 00:04:36.000
to an instance of the other interface.

98
00:04:36.000 --> 00:04:38.010
So what I mean by that is you're going to keep a handle

99
00:04:38.010 --> 00:04:40.070
to the interface that you can then inject

100
00:04:40.070 --> 00:04:43.050
a concrete class into it.

101
00:04:43.050 --> 00:04:47.090
Then the implementation of the adapter itself

102
00:04:47.090 --> 00:04:51.010
will have a method of that interface.

103
00:04:51.010 --> 00:04:55.030
In that method, you call the similar method

104
00:04:55.030 --> 00:04:57.070
on the instance interface.

105
00:04:57.070 --> 00:05:00.050
That way, the behavior comes true with the interface

106
00:05:00.050 --> 00:05:04.010
that we're exposing but ultimately the underlying interface

107
00:05:04.010 --> 00:05:08.030
of the adapted class is what it is executed.

108
00:05:08.030 --> 00:05:10.090
We're going to jump into this more as we get into code

109
00:05:10.090 --> 00:05:13.000
and you can see what I'm talking about.

