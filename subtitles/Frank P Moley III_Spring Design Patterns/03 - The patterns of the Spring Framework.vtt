WEBVTT
1
00:00:00.060 --> 00:00:02.090
- [Male Instructor] Now I've mentioned a couple times now

2
00:00:02.090 --> 00:00:07.050
that the Spring Framework heavily relies on patterns.

3
00:00:07.050 --> 00:00:08.070
And we're going to talk a little bit

4
00:00:08.070 --> 00:00:12.020
about the patterns that play in this Spring Framework.

5
00:00:12.020 --> 00:00:13.080
But again, the framework itself

6
00:00:13.080 --> 00:00:16.070
is based on design patterns.

7
00:00:16.070 --> 00:00:19.080
And from its core, patterns play a role

8
00:00:19.080 --> 00:00:22.080
in almost every aspect of the framework.

9
00:00:22.080 --> 00:00:26.060
Operationally, Spring itself works using patterns

10
00:00:26.060 --> 00:00:31.000
but also supports your patterns in the process.

11
00:00:31.000 --> 00:00:34.040
Inversion of Control Pattern is one of the major patterns

12
00:00:34.040 --> 00:00:37.020
that is used by the Spring Framework.

13
00:00:37.020 --> 00:00:41.010
And really in my opinion, this is the big pattern at play.

14
00:00:41.010 --> 00:00:42.060
This is the big one, so to speak.

15
00:00:42.060 --> 00:00:46.000
The one that matters more than anything else.

16
00:00:46.000 --> 00:00:49.070
The entire runtime of the Spring framework

17
00:00:49.070 --> 00:00:53.020
is based entirely on Inversion of Control.

18
00:00:53.020 --> 00:00:55.090
Inversion of Control improves testability,

19
00:00:55.090 --> 00:00:59.070
decreases coupling, enforces coding to an interface,

20
00:00:59.070 --> 00:01:01.030
and the list goes on.

21
00:01:01.030 --> 00:01:03.030
Now we're going to spend quite a bit of time talking

22
00:01:03.030 --> 00:01:06.090
about Inversion of Control and how it applies

23
00:01:06.090 --> 00:01:10.010
to the Spring Framework when we get to that video.

24
00:01:10.010 --> 00:01:13.030
Now the Proxy Pattern, as I've alluded to before

25
00:01:13.030 --> 00:01:17.020
is at play in Spring and every object managed by Spring

26
00:01:17.020 --> 00:01:21.080
is wrapped in a proxy since 4.0.

27
00:01:21.080 --> 00:01:25.010
This means every object that you create and configure

28
00:01:25.010 --> 00:01:26.080
to be managed by the platform,

29
00:01:26.080 --> 00:01:30.040
Spring wraps one or more proxies around that.

30
00:01:30.040 --> 00:01:33.000
And these proxies bring major caveats

31
00:01:33.000 --> 00:01:35.050
to the operation of Spring,

32
00:01:35.050 --> 00:01:37.010
which we will talk about when we get

33
00:01:37.010 --> 00:01:39.010
to the Proxy Pattern itself.

34
00:01:39.010 --> 00:01:40.070
But these are things that you really have to

35
00:01:40.070 --> 00:01:43.070
pay attention to because the expected behavior

36
00:01:43.070 --> 00:01:45.090
in a non-proxied class

37
00:01:45.090 --> 00:01:49.020
may be different than a proxied class.

38
00:01:49.020 --> 00:01:51.060
So you really have to understand how this pattern

39
00:01:51.060 --> 00:01:54.080
changes the behavior of a Spring application.

40
00:01:54.080 --> 00:01:58.010
Now the power of the Proxy Pattern is that it allows

41
00:01:58.010 --> 00:02:00.050
additional behaviors to be leveraged

42
00:02:00.050 --> 00:02:01.070
throughout the framework.

43
00:02:01.070 --> 00:02:04.020
And many times operations that you're doing,

44
00:02:04.020 --> 00:02:06.090
the proxies are really what are adding the

45
00:02:06.090 --> 00:02:11.000
quote unquote magic that Spring brings to the table.

46
00:02:11.000 --> 00:02:13.030
And this is where this pattern becomes so important

47
00:02:13.030 --> 00:02:15.010
for you to understand.

48
00:02:15.010 --> 00:02:17.000
Now we couldn't talk about design patterns

49
00:02:17.000 --> 00:02:19.000
without talking about the Factory Pattern.

50
00:02:19.000 --> 00:02:20.090
It's probably the most common

51
00:02:20.090 --> 00:02:22.080
and within Spring itself

52
00:02:22.080 --> 00:02:25.020
the Factory Pattern is heavily used.

53
00:02:25.020 --> 00:02:28.000
The IoC container, so the container

54
00:02:28.000 --> 00:02:29.080
that actually handles inversion of control

55
00:02:29.080 --> 00:02:32.040
is itself a factory.

56
00:02:32.040 --> 00:02:35.050
And this factory's heavily leveraging the start up

57
00:02:35.050 --> 00:02:39.080
as well as the run time operation of the Spring Framework.

58
00:02:39.080 --> 00:02:43.040
Now there's first class support for factories in your code

59
00:02:43.040 --> 00:02:46.060
but it's java so of course it's an object oriented language,

60
00:02:46.060 --> 00:02:48.040
factories are prevalent.

61
00:02:48.040 --> 00:02:52.000
But Spring actually has put legacy code in place

62
00:02:52.000 --> 00:02:54.010
so that you can bring other factories

63
00:02:54.010 --> 00:02:58.020
that you don't own into your IoC container.

64
00:02:58.020 --> 00:03:01.000
Now I've talked again about singleton and prototype patterns

65
00:03:01.000 --> 00:03:02.070
being at play in Spring.

66
00:03:02.070 --> 00:03:05.010
But one thing to note is that most of your objects,

67
00:03:05.010 --> 00:03:07.050
and in many cases all of your objects

68
00:03:07.050 --> 00:03:10.030
that are configured for the Spring Framework

69
00:03:10.030 --> 00:03:13.030
leverage one of these two patterns.

70
00:03:13.030 --> 00:03:16.050
And the singleton pattern is the most popular

71
00:03:16.050 --> 00:03:18.090
mainly because it's the default.

72
00:03:18.090 --> 00:03:20.090
If you want a bean to actually be a prototype

73
00:03:20.090 --> 00:03:23.060
you have to tell Spring make this a prototype

74
00:03:23.060 --> 00:03:25.090
otherwise it's a singleton.

75
00:03:25.090 --> 00:03:27.040
Now, one thing to note

76
00:03:27.040 --> 00:03:29.010
when we talk about the singleton pattern

77
00:03:29.010 --> 00:03:30.030
and I'll bring it up again

78
00:03:30.030 --> 00:03:32.040
is that the singleton and Spring

79
00:03:32.040 --> 00:03:35.040
is not a traditional singleton implementation.

80
00:03:35.040 --> 00:03:38.010
And I'm going to show you the traditional implementation

81
00:03:38.010 --> 00:03:39.030
when we get there

82
00:03:39.030 --> 00:03:42.000
but essentially they work the exact same

83
00:03:42.000 --> 00:03:44.050
because Spring is handling the construction

84
00:03:44.050 --> 00:03:48.010
so they are handing you a bean that acts as a singleton

85
00:03:48.010 --> 00:03:50.090
within your run time of your application.

86
00:03:50.090 --> 00:03:52.020
Now, one of my favorite patterns

87
00:03:52.020 --> 00:03:54.020
and the one that I really, really love

88
00:03:54.020 --> 00:03:57.080
about the Spring framework is the Template Pattern.

89
00:03:57.080 --> 00:04:00.000
The Template Pattern is used widely

90
00:04:00.000 --> 00:04:01.050
when making remote calls.

91
00:04:01.050 --> 00:04:06.090
And the two most common that most developers will see

92
00:04:06.090 --> 00:04:09.080
is JDBC and REST.

93
00:04:09.080 --> 00:04:12.010
Both of those have a specific template

94
00:04:12.010 --> 00:04:14.070
that allow you to make that remote call.

95
00:04:14.070 --> 00:04:17.080
Now, many third parties leverage the template pattern

96
00:04:17.080 --> 00:04:20.060
to fit into the Spring framework

97
00:04:20.060 --> 00:04:22.030
in order to remove boiler plate code

98
00:04:22.030 --> 00:04:24.020
for using their tooling.

99
00:04:24.020 --> 00:04:26.030
And that's very, very important to know

100
00:04:26.030 --> 00:04:29.070
that this pattern of using templates for remote calls

101
00:04:29.070 --> 00:04:34.060
is encouraged and it's actually used by many third parties

102
00:04:34.060 --> 00:04:37.010
to operate the same way that Spring does.

103
00:04:37.010 --> 00:04:38.050
Now finally I want to talk about the

104
00:04:38.050 --> 00:04:40.030
Model-View-Controller Pattern.

105
00:04:40.030 --> 00:04:44.060
The entire web framework of Spring is based

106
00:04:44.060 --> 00:04:46.080
on the Model-View-Controller Pattern.

107
00:04:46.080 --> 00:04:48.090
Now this applies to both traditional webpages

108
00:04:48.090 --> 00:04:51.060
as well as RESTful services.

109
00:04:51.060 --> 00:04:53.000
And I'm going to talk about

110
00:04:53.000 --> 00:04:55.010
why those are really one in the same

111
00:04:55.010 --> 00:04:56.080
when we talk about this pattern

112
00:04:56.080 --> 00:05:00.050
because really the traditional webpage serves html

113
00:05:00.050 --> 00:05:04.030
and our RESTful webservice serves xml or json

114
00:05:04.030 --> 00:05:06.070
but it's still a view of the data.

115
00:05:06.070 --> 00:05:09.040
Again, we'll talk about that when we get there.

116
00:05:09.040 --> 00:05:13.010
One thing to note about this is just like the IoC Pattern

117
00:05:13.010 --> 00:05:16.030
this is not a classic pattern from the gang of four.

118
00:05:16.030 --> 00:05:19.090
But it is nonetheless very, very important to Spring

119
00:05:19.090 --> 00:05:22.060
and we're going to talk about patterns in general,

120
00:05:22.060 --> 00:05:25.090
not just gang of four patterns throughout this course.

121
00:05:25.090 --> 00:05:29.010
So the mvc pattern is extremely important to Spring

122
00:05:29.010 --> 00:05:31.000
and we're going to spend some time with it.

