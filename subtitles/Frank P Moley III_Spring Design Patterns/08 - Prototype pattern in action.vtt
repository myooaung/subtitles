WEBVTT
1
00:00:00.020 --> 00:00:01.080
- [Instructor] So now that we've talked a little bit

2
00:00:01.080 --> 00:00:04.000
about the prototype pattern I want to show you

3
00:00:04.000 --> 00:00:06.010
how it's used in the Spring Framework

4
00:00:06.010 --> 00:00:08.090
as opposed to the Java Framework this time.

5
00:00:08.090 --> 00:00:11.060
So let's jump into our IDE

6
00:00:11.060 --> 00:00:13.090
and just like we've done a couple times before

7
00:00:13.090 --> 00:00:19.060
let's create a new package in our base package

8
00:00:19.060 --> 00:00:26.070
And this time we're going to call it Prototype.

9
00:00:26.070 --> 00:00:30.000
Now we're going to create two very dumb classes here

10
00:00:30.000 --> 00:00:35.030
and the first we're going to call ProtoTrue

11
00:00:35.030 --> 00:00:38.050
and the second

12
00:00:38.050 --> 00:00:43.000
we're going to call ProtoFalse

13
00:00:43.000 --> 00:00:44.080
Now we're not going to do anything with either one

14
00:00:44.080 --> 00:00:48.000
of these classes as far as implementation.

15
00:00:48.000 --> 00:00:49.050
What we are going to do is jump into

16
00:00:49.050 --> 00:00:53.000
the Design Patterns App application.

17
00:00:53.000 --> 00:00:58.020
Alright, so in this class we're going to create a Bean.

18
00:00:58.020 --> 00:01:01.070
Public ProtoFalse

19
00:01:01.070 --> 00:01:04.050
and we'll simply call it that

20
00:01:04.050 --> 00:01:10.080
and we will return a new ProtoFalse object.

21
00:01:10.080 --> 00:01:13.010
Now we're going to do another Bean

22
00:01:13.010 --> 00:01:16.040
and this time we're going to set it Scope

23
00:01:16.040 --> 00:01:19.080
to be equal to

24
00:01:19.080 --> 00:01:23.090
prototype.

25
00:01:23.090 --> 00:01:32.050
Now we're going to do a public ProtoTrue

26
00:01:32.050 --> 00:01:37.030
and we will return a new ProtoTrue.

27
00:01:37.030 --> 00:01:39.080
Now, in Spring this is all we have to do

28
00:01:39.080 --> 00:01:41.090
to make our Bean a Prototype.

29
00:01:41.090 --> 00:01:44.010
So as we're looking at this what I would expect

30
00:01:44.010 --> 00:01:47.010
to see is if we do a test

31
00:01:47.010 --> 00:01:49.070
two instances of ProtoFalse will be identical

32
00:01:49.070 --> 00:01:53.060
whereas two instances of ProtoTrue will not be.

33
00:01:53.060 --> 00:01:55.000
And let's jump into our test

34
00:01:55.000 --> 00:01:57.050
and actually see if that's the case.

35
00:01:57.050 --> 00:01:58.080
So we're going to jump down here

36
00:01:58.080 --> 00:02:02.030
into our Design Patterns application once again

37
00:02:02.030 --> 00:02:08.070
and just like we did before we will auto wire in

38
00:02:08.070 --> 00:02:11.000
an instance of ProtoTrue

39
00:02:11.000 --> 00:02:14.090
and we will call it true1.

40
00:02:14.090 --> 00:02:19.030
And auto wire in an instance of ProtoTrue

41
00:02:19.030 --> 00:02:24.070
and we will call it true2.

42
00:02:24.070 --> 00:02:30.020
And now we're going to do the same for ProtoFalse.

43
00:02:30.020 --> 00:02:35.090
False one and at Auto Wired

44
00:02:35.090 --> 00:02:38.060
on ProtoFalse

45
00:02:38.060 --> 00:02:40.030
false2.

46
00:02:40.030 --> 00:02:43.000
Now we will create our test.

47
00:02:43.000 --> 00:02:48.090
Public void testPrototypes.

48
00:02:48.090 --> 00:02:52.020
Alright, so we are going to say

49
00:02:52.020 --> 00:02:57.060
Assert.assertSame

50
00:02:57.060 --> 00:03:01.020
on false1 and false2.

51
00:03:01.020 --> 00:03:02.090
So what we're saying is that those two objects

52
00:03:02.090 --> 00:03:04.030
are going to be the exact same

53
00:03:04.030 --> 00:03:06.030
the same object reference.

54
00:03:06.030 --> 00:03:12.010
At the same time, we're going to say assert

55
00:03:12.010 --> 00:03:14.080
not same

56
00:03:14.080 --> 00:03:17.040
on true1

57
00:03:17.040 --> 00:03:18.020
and true2.

58
00:03:18.020 --> 00:03:19.090
And I know you got to kind of think about that

59
00:03:19.090 --> 00:03:21.080
'cause it's a little backwards

60
00:03:21.080 --> 00:03:25.000
but what that's saying is that the Prototype False objects

61
00:03:25.000 --> 00:03:27.070
the ones that we did not set to be Prototype

62
00:03:27.070 --> 00:03:29.060
therefore singleton are going to be the same

63
00:03:29.060 --> 00:03:32.010
as we saw in our singleton test.

64
00:03:32.010 --> 00:03:35.000
We're also saying that the two beans

65
00:03:35.000 --> 00:03:38.080
that are prototype beans will not be the same.

66
00:03:38.080 --> 00:03:42.080
So now let's go ahead and run our test

67
00:03:42.080 --> 00:03:45.040
And as Spring starts up we'll let it do its thing

68
00:03:45.040 --> 00:03:49.090
and we expect to see a green test at this case.

69
00:03:49.090 --> 00:03:51.070
And indeed we have a green test.

70
00:03:51.070 --> 00:03:54.070
So we've proven that we now have two different instances

71
00:03:54.070 --> 00:03:56.030
of the same object.

72
00:03:56.030 --> 00:03:59.010
Now let's go back to the App application

73
00:03:59.010 --> 00:04:01.010
for the Design Patterns here

74
00:04:01.010 --> 00:04:03.080
and let's talk about what this actually would entail

75
00:04:03.080 --> 00:04:06.000
on line 25.

76
00:04:06.000 --> 00:04:09.040
Very seldom would we simply return an instance.

77
00:04:09.040 --> 00:04:12.080
What we're going to do in Spring usually during this method

78
00:04:12.080 --> 00:04:15.080
is at all of the expansive behavior

79
00:04:15.080 --> 00:04:20.000
through injecting other beans into this class.

80
00:04:20.000 --> 00:04:21.050
And once it's all injected

81
00:04:21.050 --> 00:04:23.080
then we're going to hand it back out.

82
00:04:23.080 --> 00:04:26.010
Now if all of those values are beans that means

83
00:04:26.010 --> 00:04:28.040
that they're singletons and they've been controlled

84
00:04:28.040 --> 00:04:31.060
and we can actually put behavior in the class

85
00:04:31.060 --> 00:04:33.080
that doesn't have to worry about being thread-safe

86
00:04:33.080 --> 00:04:36.090
while keeping all of those singletons in place.

87
00:04:36.090 --> 00:04:38.040
So in the real world

88
00:04:38.040 --> 00:04:41.040
all of your work is done in this method

89
00:04:41.040 --> 00:04:43.010
but because it's a prototype

90
00:04:43.010 --> 00:04:46.020
the expansive operations that get injected

91
00:04:46.020 --> 00:04:48.010
into this class have already been done.

92
00:04:48.010 --> 00:04:49.090
It's only the work that goes on here

93
00:04:49.090 --> 00:04:53.010
so that you get a bean that acts as a prototype.

94
00:04:53.010 --> 00:04:55.080
It acts as a cloned object even though

95
00:04:55.080 --> 00:04:59.000
it really isn't in the Spring world.

