WEBVTT
1
00:00:00.940 --> 00:00:04.630
Let's take a look now at sequential and step requirements

2
00:00:04.630 --> 00:00:10.290
processes. Here are the most common software and requirements

3
00:00:10.290 --> 00:00:15.080
development methods over the last many, many years, sequential and stepped,

4
00:00:15.080 --> 00:00:18.670
incremental and iterative, adaptive, and lean.

5
00:00:18.670 --> 00:00:23.510
Let's dig deeper into each. Sequential and step

6
00:00:23.510 --> 00:00:26.770
requirements is also known as waterfall.

7
00:00:26.770 --> 00:00:29.390
Waterfall is the practice or approach from writing

8
00:00:29.390 --> 00:00:33.210
specifications through customer delivery over a sequence

9
00:00:33.210 --> 00:00:37.160
of milestones that can cover months, if not years of time.

10
00:00:37.160 --> 00:00:39.700
I am sure you've heard of waterfall before.

11
00:00:39.700 --> 00:00:42.000
It is still important to finish this section.

12
00:00:42.000 --> 00:00:45.150
You can more fully appreciate the other models when you really

13
00:00:45.150 --> 00:00:48.220
understand the challenges and even failures of this model.

14
00:00:48.220 --> 00:00:52.640
And besides, it's still being used today.

15
00:00:52.640 --> 00:00:56.160
Here is a typical traditional waterfall process where

16
00:00:56.160 --> 00:00:59.690
everything happened in an orderly set of steps.

17
00:00:59.690 --> 00:01:03.310
We start with developing our requirements pretty much all of them first.

18
00:01:03.310 --> 00:01:07.840
Requirements leads to a design, a design leads to implementation,

19
00:01:07.840 --> 00:01:09.630
implementation to verification,

20
00:01:09.630 --> 00:01:13.240
also known as testing in quality assurance and user acceptance,

21
00:01:13.240 --> 00:01:15.960
and then from verification to deployment.

22
00:01:15.960 --> 00:01:21.290
These steps are very well defined, understood, and practiced for many years.

23
00:01:21.290 --> 00:01:25.440
There were, and still are, in fact, much material, books,

24
00:01:25.440 --> 00:01:29.240
tools, and best practices that have grown up around this process.

25
00:01:29.240 --> 00:01:32.600
It also has made the executives and leaders of companies

26
00:01:32.600 --> 00:01:36.120
for many years very comfortable because it was a well‑known

27
00:01:36.120 --> 00:01:40.140
and well‑understood process.

28
00:01:40.140 --> 00:01:43.740
There are some serious challenges, though, to this approach.

29
00:01:43.740 --> 00:01:47.000
As we know, requirements are a moving target,

30
00:01:47.000 --> 00:01:50.530
either because business is constantly changing or the customers

31
00:01:50.530 --> 00:01:52.570
and users don't always know what they want.

32
00:01:52.570 --> 00:01:57.150
Change is a fact of business life, always has been and always

33
00:01:57.150 --> 00:02:00.320
will be. Given that, how would we be able to write and

34
00:02:00.320 --> 00:02:02.600
complete a full set of requirements?

35
00:02:02.600 --> 00:02:08.180
Is it possible to do? Likely impossible. There are lots of wasted resources with

36
00:02:08.180 --> 00:02:11.830
traditional waterfall approaches. After a few months, well,

37
00:02:11.830 --> 00:02:13.140
life happens, that is,

38
00:02:13.140 --> 00:02:15.620
requirements change, people come and go,

39
00:02:15.620 --> 00:02:17.890
organizations and priorities can change,

40
00:02:17.890 --> 00:02:22.180
which drives rework, thus throwing away code that was developed and tested.

41
00:02:22.180 --> 00:02:26.340
There is much more waste in this scenario than people realize, much more.

42
00:02:26.340 --> 00:02:31.360
And all this churn certainly drives an increase in defects and lowers quality,

43
00:02:31.360 --> 00:02:34.450
thus consuming even more resources, labor and money,

44
00:02:34.450 --> 00:02:36.980
and this also means loss of opportunity,

45
00:02:36.980 --> 00:02:40.550
maybe by missing a window for a new market or product since those

46
00:02:40.550 --> 00:02:44.170
resources were diverted or wasted. Earlier in my career,

47
00:02:44.170 --> 00:02:51.130
I knew no better, but now I do. Traditional project management process.

48
00:02:51.130 --> 00:02:55.160
In order to implement a waterfall project, there is also a need to have

49
00:02:55.160 --> 00:02:58.920
a project management methodology driving the project forward. With

50
00:02:58.920 --> 00:03:03.010
traditional waterfall development projects, we had five project

51
00:03:03.010 --> 00:03:07.190
management process groups, the first, initiation, planning,

52
00:03:07.190 --> 00:03:10.900
execution, performance, and monitoring, and lastly,

53
00:03:10.900 --> 00:03:11.790
closure.

54
00:03:11.790 --> 00:03:12.620
As you can see,

55
00:03:12.620 --> 00:03:15.920
the waterfall development approach worked hand in hand with

56
00:03:15.920 --> 00:03:18.080
this traditional project methodology.

57
00:03:18.080 --> 00:03:21.720
I spent much of my early career using various forms of waterfall.

58
00:03:21.720 --> 00:03:22.460
Let's face it,

59
00:03:22.460 --> 00:03:24.850
it's natural to try to understand the requirements before you

60
00:03:24.850 --> 00:03:28.130
write code, but do you need to know all of the requirements to

61
00:03:28.130 --> 00:03:30.740
the inth detail before you write code?

62
00:03:30.740 --> 00:03:35.710
Well, of course not. A quick history lesson.

63
00:03:35.710 --> 00:03:36.640
For a time,

64
00:03:36.640 --> 00:03:41.770
the cost of running the job, a batch compile, and executing that job was very,

65
00:03:41.770 --> 00:03:43.150
very expensive.

66
00:03:43.150 --> 00:03:44.100
Therefore,

67
00:03:44.100 --> 00:03:47.700
the waterfall model actually worked very well to save

68
00:03:47.700 --> 00:03:50.360
costly computer processing expenses.

69
00:03:50.360 --> 00:03:51.540
So for that time,

70
00:03:51.540 --> 00:03:59.000
an interactive or incremental approach would have been prohibitively expensive. People forget that key fact.

