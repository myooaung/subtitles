WEBVTT
1
00:00:01.040 --> 00:00:03.010
Creating a product backlog.

2
00:00:03.010 --> 00:00:06.070
Let's look at the product backlog and also look at the contributions a

3
00:00:06.070 --> 00:00:11.540
business analyst can do in creating a product backlog.

4
00:00:11.540 --> 00:00:15.620
A product backlog is a prioritized list of all things that

5
00:00:15.620 --> 00:00:17.680
need to be completed within the project,

6
00:00:17.680 --> 00:00:19.120
all things,

7
00:00:19.120 --> 00:00:22.680
and it is the single source of requirements for any

8
00:00:22.680 --> 00:00:26.540
changes to be made to the product.

9
00:00:26.540 --> 00:00:28.330
So, what's in a backlog?

10
00:00:28.330 --> 00:00:30.770
Though most items in a backlog will be items that

11
00:00:30.770 --> 00:00:32.680
are software development tasks,

12
00:00:32.680 --> 00:00:36.690
they really can be anything whatsoever that is required to deliver

13
00:00:36.690 --> 00:00:38.880
the product for this Agile or leading project.

14
00:00:38.880 --> 00:00:40.610
User stories and features.

15
00:00:40.610 --> 00:00:44.940
By far the main way for a team to specify features of an Agile

16
00:00:44.940 --> 00:00:47.430
product backlog is in the form of user stories,

17
00:00:47.430 --> 00:00:48.370
which are short,

18
00:00:48.370 --> 00:00:51.460
simple descriptions of the desired functionality told from

19
00:00:51.460 --> 00:00:54.040
the perspective of the user or customer.

20
00:00:54.040 --> 00:00:54.670
Bugs.

21
00:00:54.670 --> 00:00:57.650
Because there's really no difference between a bug and a new feature,

22
00:00:57.650 --> 00:01:00.080
each describe something different that the user wants,

23
00:01:00.080 --> 00:01:02.860
bugs are also put on the product backlog.

24
00:01:02.860 --> 00:01:03.770
Research.

25
00:01:03.770 --> 00:01:06.530
There could be many research activities that are required to

26
00:01:06.530 --> 00:01:09.140
understand and/or determine the product.

27
00:01:09.140 --> 00:01:09.820
For example,

28
00:01:09.820 --> 00:01:12.710
a research item may be determining the best cloud

29
00:01:12.710 --> 00:01:14.440
platform and how to configure it.

30
00:01:14.440 --> 00:01:17.660
The product owner was not likely the source of this backlog item,

31
00:01:17.660 --> 00:01:19.340
but instead the development team.

32
00:01:19.340 --> 00:01:22.070
The product backlog will be mostly userâ€‘oriented

33
00:01:22.070 --> 00:01:26.880
features written as user stories, but also Agile dev team driven as well.

34
00:01:26.880 --> 00:01:28.170
Analysis items.

35
00:01:28.170 --> 00:01:30.860
It may be that a feature really needs more analysis in

36
00:01:30.860 --> 00:01:32.690
order to create quality user stories,

37
00:01:32.690 --> 00:01:34.940
or even if some feature is worthy of being part of

38
00:01:34.940 --> 00:01:36.540
the backlog in the first place.

39
00:01:36.540 --> 00:01:39.540
So there is nothing wrong with having analysis items.

40
00:01:39.540 --> 00:01:42.940
An example of analysis related to knowledge acquisition could

41
00:01:42.940 --> 00:01:46.270
be a backlog item about researching various JavaScript

42
00:01:46.270 --> 00:01:50.620
libraries for the user experience, such as Angular React or Vue.js.

43
00:01:50.620 --> 00:01:52.040
Environmental items.

44
00:01:52.040 --> 00:01:55.120
There could be items that are required, such as software licenses,

45
00:01:55.120 --> 00:01:57.340
computers, office space, or who knows.

46
00:01:57.340 --> 00:02:01.270
An example would be upgrade all developers' workstations to Windows 10.

47
00:02:01.270 --> 00:02:05.200
All this is still part of the overall backlog items that must

48
00:02:05.200 --> 00:02:07.630
be in place for the success of the project.

49
00:02:07.630 --> 00:02:09.930
There's no point in having another list that would not

50
00:02:09.930 --> 00:02:11.530
be visible to the product owner.

51
00:02:11.530 --> 00:02:15.180
The product owner should know everything that's required to get the job done.

52
00:02:15.180 --> 00:02:17.740
Technical debt, and I know we have a lot of that.

53
00:02:17.740 --> 00:02:20.980
These are items that have already been coded and implemented,

54
00:02:20.980 --> 00:02:23.920
but need shoring up and improving to ensure the entire

55
00:02:23.920 --> 00:02:26.140
system can continue to run smoothly.

56
00:02:26.140 --> 00:02:28.570
You can certainly have other items in your product

57
00:02:28.570 --> 00:02:30.280
backlog that I have not mentioned.

58
00:02:30.280 --> 00:02:31.230
Typically, though,

59
00:02:31.230 --> 00:02:37.240
you will most likely be working on and focused on user stories.

60
00:02:37.240 --> 00:02:42.490
In the most basic terms, a user story is a definition of a requirement.

61
00:02:42.490 --> 00:02:46.240
User stories contain just enough information so that the product

62
00:02:46.240 --> 00:02:50.420
owners understand its value and developers can produce a reasonable

63
00:02:50.420 --> 00:02:52.800
estimate of the effort to implement it.

64
00:02:52.800 --> 00:02:56.440
Remember, the estimates help the product owner prioritize the backlog.

65
00:02:56.440 --> 00:03:01.940
Without an estimate, you really can't determine value to the business.

66
00:03:01.940 --> 00:03:07.360
Users stories, or just stories, are the Agile equivalent to system requirements.

67
00:03:07.360 --> 00:03:11.120
The use of the term, user stories, is very common and widespread,

68
00:03:11.120 --> 00:03:13.170
regardless of the development methodology,

69
00:03:13.170 --> 00:03:14.580
which is really great.

70
00:03:14.580 --> 00:03:18.240
Stories are the primary construct for moving the user's requirements

71
00:03:18.240 --> 00:03:21.040
from an idea on the backlog to implementation.

72
00:03:21.040 --> 00:03:24.010
The BA's role is heavy upfront during the creation

73
00:03:24.010 --> 00:03:27.950
and normalization of the backlog, so let's talk about that.

74
00:03:27.950 --> 00:03:32.490
A critical and essential role of the business analyst is to help

75
00:03:32.490 --> 00:03:35.220
normalize the backlog with the product owner.

76
00:03:35.220 --> 00:03:38.810
Here is our original backlog on the left with a myriad of items,

77
00:03:38.810 --> 00:03:41.670
and what we want to do is to normalize them,

78
00:03:41.670 --> 00:03:45.290
that is, rewrite all these items into user stories.

79
00:03:45.290 --> 00:03:48.820
It is the common language that is understood by both business users,

80
00:03:48.820 --> 00:03:50.890
as well as technical developers.

81
00:03:50.890 --> 00:03:53.430
Therefore, it is your job to do it right,

82
00:03:53.430 --> 00:03:56.150
capture it correctly so the product owner agrees,

83
00:03:56.150 --> 00:04:00.010
and the Agile dev team understands what they have to do to implement.

84
00:04:00.010 --> 00:04:02.790
In addition, the product owner will prioritize them,

85
00:04:02.790 --> 00:04:04.790
but they will always have tons of questions,

86
00:04:04.790 --> 00:04:05.680
pros and cons,

87
00:04:05.680 --> 00:04:08.620
and it is your job to help them figure out what may be

88
00:04:08.620 --> 00:04:10.500
the best priority for each of them.

89
00:04:10.500 --> 00:04:11.280
And lastly,

90
00:04:11.280 --> 00:04:16.090
you will also help and guide the product owner in determining the value of each,

91
00:04:16.090 --> 00:04:19.910
a rough and crude estimate of each, and other key information.

92
00:04:19.910 --> 00:04:23.180
You will need to work and coordinate with the technical members of the Agile

93
00:04:23.180 --> 00:04:26.810
team to arrive at estimates in a reasonable amount of time.

94
00:04:26.810 --> 00:04:29.650
I believe all requirements, whether functional,

95
00:04:29.650 --> 00:04:31.980
bugs, research, technical debt, or whatever,

96
00:04:31.980 --> 00:04:37.000
can all be written in a user story format, so strive for that.

