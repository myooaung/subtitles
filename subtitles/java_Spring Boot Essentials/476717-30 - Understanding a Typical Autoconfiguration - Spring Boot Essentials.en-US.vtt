WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.775
Let's turn now to the idea of like potential to exist.

00:00:02.775 --> 00:00:10.320
So for example, if we look at data source auto configuration, okay,

00:00:10.320 --> 00:00:12.240
so this is part of spin JDBC,

00:00:12.240 --> 00:00:15.030
but if you look at data source auto configuration as a class,

00:00:15.030 --> 00:00:18.000
so let's just do command to search

00:00:18.000 --> 00:00:21.250
for the type and search for dead source auto configuration.

00:00:21.250 --> 00:00:25.249
We can see it's also a part of the Spring Boot also configure dependency.

00:00:25.249 --> 00:00:31.415
In fact, if we scroll to source and look inside the JDBC,

00:00:31.415 --> 00:00:36.860
So package inside here of the auto configure Jerry itself.

00:00:36.860 --> 00:00:39.890
We can see that these are all the classes

00:00:39.890 --> 00:00:42.275
which to do with the auto configuration mechanism.

00:00:42.275 --> 00:00:46.295
And we can see we got all the different technology aspects here as well.

00:00:46.295 --> 00:00:49.265
So all of these are bundled together in one jar file,

00:00:49.265 --> 00:00:51.589
which is the auto configure dependency.

00:00:51.589 --> 00:00:56.690
And effectively it's driven by these so-called auto configuration classes.

00:00:56.690 --> 00:00:59.615
So when I say auto configuration class to Commander,

00:00:59.615 --> 00:01:02.735
if we type in also configuration, whoops,

00:01:02.735 --> 00:01:05.960
configuration and put a star on the front,

00:01:05.960 --> 00:01:07.940
we can see that spring we also configure it gives us

00:01:07.940 --> 00:01:10.040
all these different auto configuration classes.

00:01:10.040 --> 00:01:14.060
And these are to do with auto configuring different types of technologies inside

00:01:14.060 --> 00:01:16.160
your spring will applications based on detecting

00:01:16.160 --> 00:01:18.365
what technology you have present in the class loader,

00:01:18.365 --> 00:01:20.450
which in turn, those technologies have been brought in

00:01:20.450 --> 00:01:23.510
by the various started dependencies which have included.

00:01:23.510 --> 00:01:25.805
So let's take a look at this one.

00:01:25.805 --> 00:01:27.320
So I've got some break points here already.

00:01:27.320 --> 00:01:30.110
I'll just get rid of those for now. We don't need those.

00:01:30.110 --> 00:01:32.390
So datasource auto configuration.

00:01:32.390 --> 00:01:36.650
So we have our Enable Auto configuration on our spring Bu AP class,

00:01:36.650 --> 00:01:40.940
which brings in all of those auto configuration or star auto configuration if you like,

00:01:40.940 --> 00:01:43.745
classes which we just saw as candidates to be

00:01:43.745 --> 00:01:48.050
instantiated as spring manage beans inside the Spring container.

00:01:48.050 --> 00:01:51.020
And these are just regular configuration classes,

00:01:51.020 --> 00:01:52.745
but just some extra annotations.

00:01:52.745 --> 00:01:58.740
So you'll see here we've got ICP configuration and that configuration is just the,

00:01:58.780 --> 00:02:03.380
the same annotation in offspring Framework concepts to annotation.

00:02:03.380 --> 00:02:05.735
So inside that package,

00:02:05.735 --> 00:02:12.155
we've got our configuration and we do the classes it needs.

00:02:12.155 --> 00:02:13.610
And if we go back out,

00:02:13.610 --> 00:02:16.025
we see some other annotations as well which are on here.

00:02:16.025 --> 00:02:19.050
I just collapses finance and make it a bit cleaner.

00:02:20.080 --> 00:02:24.500
So in addition to this configuration imitation being present,

00:02:24.500 --> 00:02:26.480
which if we didn't have any of these other things,

00:02:26.480 --> 00:02:30.200
what our mean is it would be configuration being so be treated by

00:02:30.200 --> 00:02:33.995
the spring runtime as a special spring manage being which can provide configuration.

00:02:33.995 --> 00:02:37.325
So it can either provide configuration to the container to, for example,

00:02:37.325 --> 00:02:39.410
flick on components scanning or

00:02:39.410 --> 00:02:41.990
established properties being replaced, that kind of thing.

00:02:41.990 --> 00:02:45.785
And also when contain factory methods annotated with aspirin,

00:02:45.785 --> 00:02:48.800
which has been containable use to be able to create

00:02:48.800 --> 00:02:51.260
instantiate different types of objects which are

00:02:51.260 --> 00:02:53.855
driven by the dependency injection invitations that you caught.

00:02:53.855 --> 00:02:56.870
So for example, when you've got auto wired on say,

00:02:56.870 --> 00:02:58.685
a couple of fields in a constructor,

00:02:58.685 --> 00:03:01.730
which is also an AC component or service,

00:03:01.730 --> 00:03:03.155
our repository or a controller.

00:03:03.155 --> 00:03:07.175
When you have those couple of beans which have Atwater wired on the constructor,

00:03:07.175 --> 00:03:10.820
then the spring container would look inside the configuration class and look for

00:03:10.820 --> 00:03:15.125
any methods annotated with at bean which return objects of those types.

00:03:15.125 --> 00:03:17.900
And it would invoke those methods to be able to create instances of

00:03:17.900 --> 00:03:19.670
those objects and independence inject

00:03:19.670 --> 00:03:22.265
domains or set them in past him into the constructor.

00:03:22.265 --> 00:03:25.190
So that's the standard use of a configuration class.

00:03:25.190 --> 00:03:26.015
Okay?

00:03:26.015 --> 00:03:27.560
Now Spring Boot actually add

00:03:27.560 --> 00:03:30.170
some extra stuff there because he doesn't want to bring in all of

00:03:30.170 --> 00:03:34.580
the configuration classes for all different technologies across the entire stack.

00:03:34.580 --> 00:03:36.470
Number one, that would be too much on memory.

00:03:36.470 --> 00:03:39.859
And the material that we've clashes between different technologies.

00:03:39.859 --> 00:03:42.920
For example, if you had two different implementations of

00:03:42.920 --> 00:03:47.015
platform transaction manager or multiple implementations of data sources,

00:03:47.015 --> 00:03:48.335
as well as a good example.

00:03:48.335 --> 00:03:53.779
Instead, you'll find that these auto configuration classes are driven by annotation.

00:03:53.779 --> 00:03:57.830
And there is a condition evaluation framework which goes on behind the scenes.

00:03:57.830 --> 00:03:59.990
So in a nutshell, I'll talk through

00:03:59.990 --> 00:04:02.750
these conditions now when you have AC conditional on class.

00:04:02.750 --> 00:04:06.020
And this basically means that if datasource dot class or

00:04:06.020 --> 00:04:09.275
embedded database Time dot class is found in the class loader.

00:04:09.275 --> 00:04:12.365
Then this configuration will be evaluated.

00:04:12.365 --> 00:04:16.010
Also if there's a bean of type iota R2,

00:04:16.010 --> 00:04:18.050
DBC, SBI collection Factory.

00:04:18.050 --> 00:04:19.280
And that's missing.

00:04:19.280 --> 00:04:21.905
In other words, that hasn't been established already.

00:04:21.905 --> 00:04:27.000
But also means this gets a chance to kick in because that's the conditional aspect.
