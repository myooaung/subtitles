WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.880
So to go back now to look inside the actual code of spin boo.

00:00:05.880 --> 00:00:09.855
So we get an understanding of how the auto configuration hangs together.

00:00:09.855 --> 00:00:13.330
I'll just say one last thing now or close this down.

00:00:14.180 --> 00:00:18.690
And what I'm gonna do now is run the application,

00:00:18.690 --> 00:00:21.585
but I'm going to run the application in a special mode.

00:00:21.585 --> 00:00:26.085
Because you run an Edit Configurations.

00:00:26.085 --> 00:00:30.280
I'm going to program arguments and just put minus-minus debug.

00:00:30.710 --> 00:00:35.620
And so now when we run will actually get a report.

00:00:35.710 --> 00:00:40.070
And this is now a report of the auto configuration.

00:00:40.070 --> 00:00:41.585
So much I'll just double-click that.

00:00:41.585 --> 00:00:44.510
Extended all is a very big report.

00:00:44.510 --> 00:00:46.580
If you look right at the top,

00:00:46.580 --> 00:00:49.565
you can see here it's initializing the springboard application.

00:00:49.565 --> 00:00:53.180
And then we have this condition evaluation report logging listener.

00:00:53.180 --> 00:00:55.730
And this is really useful because it just basically spits

00:00:55.730 --> 00:00:59.015
out a report of how those conditions have been evaluated.

00:00:59.015 --> 00:01:00.980
So you don't have to go into the code and

00:01:00.980 --> 00:01:03.215
understand what's going on and everything to work with Spring boot,

00:01:03.215 --> 00:01:06.260
I just showed you that you can get an idea of what's going on under the hood.

00:01:06.260 --> 00:01:11.165
But through this report you can see basically which beans have been matched positively.

00:01:11.165 --> 00:01:15.575
In other words, they're now part of the spring runtime on the positive matches.

00:01:15.575 --> 00:01:25.340
And conversely, which ones didn't match on the negative matches.

00:01:25.340 --> 00:01:28.310
So for example, negative match.

00:01:28.310 --> 00:01:30.695
Elastic Search, for example,

00:01:30.695 --> 00:01:33.035
the edge cache configuration, for example,

00:01:33.035 --> 00:01:36.305
because it didn't find net RSA-FDH cached dot cash

00:01:36.305 --> 00:01:40.100
as a class in the class loader due to this ONE class condition.

00:01:40.100 --> 00:01:41.780
Because we didn't include that dependency,

00:01:41.780 --> 00:01:44.090
because this application doesn't have any caching.

00:01:44.090 --> 00:01:45.500
Because we didn't have that.

00:01:45.500 --> 00:01:47.255
It hasn't included the H cache,

00:01:47.255 --> 00:01:49.100
cache configuration, which is

00:01:49.100 --> 00:01:51.965
sensible because we don't want caching, so Washington glued it.

00:01:51.965 --> 00:01:58.040
Conversely, if we go back up and we'll see here we've got datasource,

00:01:58.040 --> 00:02:02.480
transaction manager auto configuration That's matched because it's found that we've got

00:02:02.480 --> 00:02:04.130
JDBC template as a class and

00:02:04.130 --> 00:02:08.000
the class loader and also the platform transaction manager there as well.

00:02:08.000 --> 00:02:12.320
So because of that, this auto configuration would kick in as well.

00:02:12.320 --> 00:02:15.664
So you should now have a good overview and understanding

00:02:15.664 --> 00:02:18.545
of our spring boots auto configuration works under the covers,

00:02:18.545 --> 00:02:20.720
which will put you in good state to be able to configure

00:02:20.720 --> 00:02:24.870
Spring boot with different technologies do you want to employ in your applications?
