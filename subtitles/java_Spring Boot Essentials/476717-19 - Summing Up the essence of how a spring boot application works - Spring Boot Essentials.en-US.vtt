WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.490
So anyway, that's just a quick look to get a feel

00:00:02.490 --> 00:00:04.784
for what's inside a spring, we'll application.

00:00:04.784 --> 00:00:06.720
And as you can see, there's not actually that much.

00:00:06.720 --> 00:00:09.315
They're really in terms of infrastructure code.

00:00:09.315 --> 00:00:11.295
So boilerplate code to, for example,

00:00:11.295 --> 00:00:13.770
set of database connections or connection factor's

00:00:13.770 --> 00:00:17.175
rather or view resolvers and that kind of thing.

00:00:17.175 --> 00:00:20.460
Everything's done by convention as opposed to configuration.

00:00:20.460 --> 00:00:22.765
So it is convention over configuration idea.

00:00:22.765 --> 00:00:24.830
In nutshell, in a Spring Boot application,

00:00:24.830 --> 00:00:27.170
you just include the starter dependencies that you're interested

00:00:27.170 --> 00:00:30.350
in to bring in the technology facets that you want to use.

00:00:30.350 --> 00:00:32.210
There'll be a set of properties which are

00:00:32.210 --> 00:00:34.760
configurable for that particular technology facet which you

00:00:34.760 --> 00:00:39.710
can push into your application.properties file of your application to customize it.

00:00:39.710 --> 00:00:41.570
And because we have an application with

00:00:41.570 --> 00:00:45.275
an app Spring Boot application annotation that configures components scanning,

00:00:45.275 --> 00:00:50.405
which picks up classes annotated with that component service at repository.

00:00:50.405 --> 00:00:51.485
That controller.

00:00:51.485 --> 00:00:54.875
And that configuration makes those available of spring managed beans.

00:00:54.875 --> 00:00:58.520
And it also has the app enable auto configuration as well,

00:00:58.520 --> 00:01:03.380
which introduces other technology facet specific configuration classes, again,

00:01:03.380 --> 00:01:05.570
annotated with that configuration where

00:01:05.570 --> 00:01:07.835
the actual individual spring components

00:01:07.835 --> 00:01:10.445
that the technology facets bring in are initialized.

00:01:10.445 --> 00:01:13.940
And those are initialized conditionally based on analyzing glasses which are

00:01:13.940 --> 00:01:18.785
available in the classpath or beans that are present inside the application context.

00:01:18.785 --> 00:01:22.880
And that's pretty much power Spring Boot application works and another view of it,

00:01:22.880 --> 00:01:25.680
and we'll see more in the next videos.
