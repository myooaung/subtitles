WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.070
So conditions can either be on the class,

00:00:02.070 --> 00:00:04.560
that can be on beans missing or being present,

00:00:04.560 --> 00:00:06.840
that can be on properties being present.

00:00:06.840 --> 00:00:11.820
So for example, here we can see spring dot data source name type,

00:00:11.820 --> 00:00:14.250
which is a condition which evaluates to true if

00:00:14.250 --> 00:00:16.590
there's a property in a set of properties called Spring and,

00:00:16.590 --> 00:00:18.960
or deaths or StructType, which has been defined.

00:00:18.960 --> 00:00:22.020
And so inside this data's all sorts of configuration,

00:00:22.020 --> 00:00:26.325
we have other configurations which define this protected static classes.

00:00:26.325 --> 00:00:29.550
There are two, in this case, one for an embedded database configuration,

00:00:29.550 --> 00:00:31.230
if we're running a database and embedded mode.

00:00:31.230 --> 00:00:34.185
So the database is running inside the Spring container itself.

00:00:34.185 --> 00:00:37.200
And another one which is for pooled data source configuration.

00:00:37.200 --> 00:00:39.540
If instead, we're using a connection pool to be

00:00:39.540 --> 00:00:42.295
able to access our connections to the datasource.

00:00:42.295 --> 00:00:44.540
So if we look at the pooled data source one.

00:00:44.540 --> 00:00:47.060
So in the pull data source configuration, again,

00:00:47.060 --> 00:00:49.685
it's only gonna kick in if we don't already have

00:00:49.685 --> 00:00:53.015
data source dot class or exceeded source dot class.

00:00:53.015 --> 00:00:56.255
By the way, this means that if you also have extra configuration,

00:00:56.255 --> 00:00:58.850
the evaded and you haven't been annotated method which returns

00:00:58.850 --> 00:01:01.505
the data source then because that's already present,

00:01:01.505 --> 00:01:03.470
it means effectively you will overwrite this.

00:01:03.470 --> 00:01:07.130
So then you won't get a chance for Spring Boot to do its auto configuration.

00:01:07.130 --> 00:01:10.280
So in that respect, the spring will auto configuration is non-invasive.

00:01:10.280 --> 00:01:12.230
Respect the little creates and wire up

00:01:12.230 --> 00:01:15.035
low-level spring components supporting the technology stacks.

00:01:15.035 --> 00:01:17.060
You brought him with sensible defaults

00:01:17.060 --> 00:01:19.265
as long as you provided a minimal set of properties,

00:01:19.265 --> 00:01:22.220
which it requires from your application property set.

00:01:22.220 --> 00:01:25.340
But it doesn't get in the way if you want to put your own things in,

00:01:25.340 --> 00:01:28.745
in which case then it wants trying create its own configuration.

00:01:28.745 --> 00:01:32.810
And you can also explicitly exclude just while we're on the topic cern auto

00:01:32.810 --> 00:01:37.115
configuration by adapting your spring Bu application annotation.

00:01:37.115 --> 00:01:40.115
So if we go here, demo source,

00:01:40.115 --> 00:01:43.475
main, Java, back to our demo application.

00:01:43.475 --> 00:01:45.620
It's actually possible in here to put in an

00:01:45.620 --> 00:01:50.030
excludes And you can exclude other classes or names.

00:01:50.030 --> 00:01:58.540
So for example, here you can exclude datasource auto configuration, for example.

00:01:58.540 --> 00:02:00.670
And if you do that, then spring move or do

00:02:00.670 --> 00:02:02.800
anything to do with datasource auto configuration.

00:02:02.800 --> 00:02:04.870
It won't create any debt sources for you,

00:02:04.870 --> 00:02:07.315
but it does expects that you're doing that yourself.

00:02:07.315 --> 00:02:10.600
And if there were any other components in here which required a data source,

00:02:10.600 --> 00:02:12.235
the onus will be on YouTube,

00:02:12.235 --> 00:02:14.830
prepared that and given suitable factor methods

00:02:14.830 --> 00:02:18.100
inside your class to be able to create those data sources.

00:02:18.100 --> 00:02:21.680
And what I mean by that is you'd have, for example,

00:02:22.110 --> 00:02:30.040
public data source, data source.

00:02:30.040 --> 00:02:36.570
And in here you return a custom data source.

00:02:36.570 --> 00:02:39.335
And then you annotate that with that bin.

00:02:39.335 --> 00:02:41.180
So in other words, you're doing

00:02:41.180 --> 00:02:44.615
really exactly the same thing that it is also auto configuration is doing.

00:02:44.615 --> 00:02:48.680
So let's jump back into datasource auto configuration,

00:02:48.680 --> 00:02:50.180
and let's just look at how this one works.

00:02:50.180 --> 00:02:52.190
So the pull data source configuration,

00:02:52.190 --> 00:02:54.935
if we don't have data source or Excel data source,

00:02:54.935 --> 00:02:56.675
that's for distributed transactions.

00:02:56.675 --> 00:02:58.730
If we don't have those present in the classpath,

00:02:58.730 --> 00:03:01.625
That's okay, this gets an opportunity to evaluate to true.

00:03:01.625 --> 00:03:04.370
It'll pull in all of the property sets across

00:03:04.370 --> 00:03:07.550
all the different connection pools that you can use with spring boom.

00:03:07.550 --> 00:03:12.440
So for example here we can see the decimals configuration for DBC P2,

00:03:12.440 --> 00:03:16.040
which will pull properties beginning with spring-loaded subsidy MECP2.

00:03:16.040 --> 00:03:18.500
Haven't got this explicitly, by the way, on the classpath.

00:03:18.500 --> 00:03:22.100
There's a connection pool, which is why that's read there. But don't worry about that.

00:03:22.100 --> 00:03:24.275
If we go to the Hickory woman, for example,

00:03:24.275 --> 00:03:28.070
that won't be right because that's actually already supplied as part of the default.

00:03:28.070 --> 00:03:30.020
And you can see there that's going to be

00:03:30.020 --> 00:03:32.150
loaded from properties beginning with spring 0.8c,

00:03:32.150 --> 00:03:39.785
hostile hickory gets a going back up and across to datasource auto configuration.

00:03:39.785 --> 00:03:43.835
Cso is ongoing provided data source or exceeded source.

00:03:43.835 --> 00:03:47.735
It'll load all of the properties across all the different collection pulls it supports,

00:03:47.735 --> 00:03:50.060
make those available for evaluation,

00:03:50.060 --> 00:03:52.295
and then evaluate this condition here.

00:03:52.295 --> 00:03:53.960
So in addition to having, for example,

00:03:53.960 --> 00:03:56.000
conditional on class, like we've seen here,

00:03:56.000 --> 00:03:57.680
or conditional missing been,

00:03:57.680 --> 00:04:00.170
I've seen them, or even conditional property.

00:04:00.170 --> 00:04:03.545
You can also just do conditional on a specific class.

00:04:03.545 --> 00:04:05.600
And when you pass in that class than you're actually giving

00:04:05.600 --> 00:04:08.390
an implementation in code to evaluate that condition.

00:04:08.390 --> 00:04:12.155
So these are felt more richer or more complex conditions which you want to evaluate.

00:04:12.155 --> 00:04:13.640
So if we click on say here,

00:04:13.640 --> 00:04:16.100
we can see we've got a pool data source condition

00:04:16.100 --> 00:04:18.785
which extends this any nested condition here,

00:04:18.785 --> 00:04:21.560
three different condition times basically.

00:04:21.560 --> 00:04:25.250
So if we go all the way up

00:04:25.250 --> 00:04:28.685
to springboard condition and new control Haidt, it'll get a hierarchy.

00:04:28.685 --> 00:04:32.570
You can see what all different conditions here which are doing this

00:04:32.570 --> 00:04:35.090
decision-making in a distributed way to

00:04:35.090 --> 00:04:38.670
establish all these auto configuration, this technology.

00:04:38.800 --> 00:04:42.060
Silhouettes are going back.

00:04:42.480 --> 00:04:45.910
We have this agonistic condition and that basically means that if I,

00:04:45.910 --> 00:04:48.760
this one is true or this one is true,

00:04:48.760 --> 00:04:52.240
that's good enough for the pooled data source condition to be true.

00:04:52.240 --> 00:04:55.990
So explicit type is just depending on a property being present,

00:04:55.990 --> 00:04:57.250
spring-loaded sauce dot type.

00:04:57.250 --> 00:04:59.590
So if we have spring not datasource dot type,

00:04:59.590 --> 00:05:01.450
this would evaluate to true,

00:05:01.450 --> 00:05:04.570
which means that pool data source condition would evaluate to true.

00:05:04.570 --> 00:05:07.690
Which means in turn that

00:05:07.690 --> 00:05:10.060
the pull deciles configuration will be

00:05:10.060 --> 00:05:13.090
the being the exists at runtime plans created by spring.

00:05:13.090 --> 00:05:17.500
Alternatively, we've got another one here which is pulled data source available.

00:05:17.500 --> 00:05:19.495
And again, this relies on another condition here.

00:05:19.495 --> 00:05:21.775
So pulled data source available condition.

00:05:21.775 --> 00:05:23.140
Now this is different.

00:05:23.140 --> 00:05:26.070
What this is doing is it's using a data source builder.

00:05:26.070 --> 00:05:31.010
If we look inside here to be able to find the type which extends a data source.

00:05:31.010 --> 00:05:35.850
In other words, it could lead to data source control education for type hierarchy.

00:05:36.730 --> 00:05:43.895
We're looking for any subclasses of this in the current class loader,

00:05:43.895 --> 00:05:46.280
which is what that clustered input parameters therefore.

00:05:46.280 --> 00:05:48.380
And so if it finds that,

00:05:48.380 --> 00:05:50.210
if it's not equal to null,

00:05:50.210 --> 00:05:52.190
and it's gonna say yet there's a match,

00:05:52.190 --> 00:05:53.810
which is this condition outcome don't match.

00:05:53.810 --> 00:05:56.675
The words evaluates the true when this message.

00:05:56.675 --> 00:05:58.950
Otherwise don't match.
