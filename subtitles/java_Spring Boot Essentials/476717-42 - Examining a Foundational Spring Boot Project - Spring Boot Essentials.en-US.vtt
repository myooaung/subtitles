WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.980
In this video, we're going to step through

00:00:01.980 --> 00:00:04.515
the spring boots application framework code

00:00:04.515 --> 00:00:07.590
to get an understanding of what happens when a spring to application

00:00:07.590 --> 00:00:12.750
starts and how Spring Boot makes use of the existing Spring framework features to be able

00:00:12.750 --> 00:00:14.925
to provide a runtime environment based on

00:00:14.925 --> 00:00:18.299
whatever technology facets we brought in through the starter dependencies.

00:00:18.299 --> 00:00:20.085
So it is going to be a lot of stuff here.

00:00:20.085 --> 00:00:21.630
Don't worry if you don't get it first time.

00:00:21.630 --> 00:00:23.040
And in fact, if you don't get it all,

00:00:23.040 --> 00:00:25.380
that's also fine as well because you don't really have to

00:00:25.380 --> 00:00:28.020
understand what happens under the hood to be able to use Spring Boot.

00:00:28.020 --> 00:00:29.190
But if you're anything like me,

00:00:29.190 --> 00:00:31.440
you like to know what happens under the covers so you can

00:00:31.440 --> 00:00:33.975
get a deeper appreciation of the framework you're using.

00:00:33.975 --> 00:00:37.720
Such you can be able to troubleshoot better and even extend that if you need to as well.

00:00:37.720 --> 00:00:40.160
It's always, it's always useful services.

00:00:40.160 --> 00:00:41.900
Very advanced stuff now though,

00:00:41.900 --> 00:00:45.485
we're just gonna jump right in and get started and step through the code.

00:00:45.485 --> 00:00:47.690
So I have here a demo projects.

00:00:47.690 --> 00:00:49.550
So in the pond XML file,

00:00:49.550 --> 00:00:54.545
I've made it fairly representative of a typical web app projects which uses a database.

00:00:54.545 --> 00:00:57.200
So you can see we've got a Spring Boot Starter web dependency,

00:00:57.200 --> 00:00:59.300
which means we can use Spring MVC.

00:00:59.300 --> 00:01:01.685
We've got spring whoops, data, data GPA,

00:01:01.685 --> 00:01:04.310
which means that we can use spin data and the

00:01:04.310 --> 00:01:07.310
Java persistence API to be able to access the database.

00:01:07.310 --> 00:01:12.170
And here you can see we've got a database dependency installed, which is H2.

00:01:12.170 --> 00:01:17.120
I've also configured in spring main resources application two properties,

00:01:17.120 --> 00:01:19.505
the standard application properties file.

00:01:19.505 --> 00:01:24.110
Just basically simple set of properties to enable us to create a data source.

00:01:24.110 --> 00:01:26.405
So you can see the JDBC URL.

00:01:26.405 --> 00:01:29.780
So JDBC page to file desktop demo.

00:01:29.780 --> 00:01:34.100
It means it's a file based database which you'll appear on my desktop here.

00:01:34.100 --> 00:01:37.400
And username is SA password is blank.

00:01:37.400 --> 00:01:41.900
And this is the JDBC driver which the application's gonna use.

00:01:41.900 --> 00:01:45.815
So jumping out to the actual source code itself,

00:01:45.815 --> 00:01:48.860
we can see here we've got the main starter class.

00:01:48.860 --> 00:01:50.510
So this is demo application.

00:01:50.510 --> 00:01:54.740
This is just basically a project which is completely out of the box or haven't

00:01:54.740 --> 00:01:59.675
customized anything apart from adding those three dependencies for Spring Web,

00:01:59.675 --> 00:02:01.865
spring that a GPA and H2.

00:02:01.865 --> 00:02:03.380
And this is what it generated.

00:02:03.380 --> 00:02:05.600
So we can see all Spring Boot applications,

00:02:05.600 --> 00:02:07.430
we have a main method or

00:02:07.430 --> 00:02:10.655
Java application start with a main method regardless of what the application is.

00:02:10.655 --> 00:02:13.760
Even web containers like Tomcat with logic,

00:02:13.760 --> 00:02:15.785
they all start with a main method somewhere.

00:02:15.785 --> 00:02:17.795
So there's never any exceptions there.

00:02:17.795 --> 00:02:21.470
And we can see here what it's doing is spring application doctrine.

00:02:21.470 --> 00:02:25.430
And it's passing in this reference to its own class,

00:02:25.430 --> 00:02:28.685
which is demo application and any arguments that are passed to it as well.

00:02:28.685 --> 00:02:32.434
Not as critically, this is annotated with at Spring Boot application.

00:02:32.434 --> 00:02:35.675
And if we didn't have that, none of the spring with magic would work.

00:02:35.675 --> 00:02:37.160
So just a quick recap here.

00:02:37.160 --> 00:02:40.925
If we go into spring, application is actually shorthand for

00:02:40.925 --> 00:02:43.565
these other annotations of Spring boot configuration

00:02:43.565 --> 00:02:46.565
to loading the config enable auto configuration,

00:02:46.565 --> 00:02:50.810
which basically enables detection of the different technology facets that using,

00:02:50.810 --> 00:02:52.670
based on looking at what classes are available

00:02:52.670 --> 00:02:54.830
inside the class loader itself on the class path.

00:02:54.830 --> 00:02:56.870
And components scanning as well.

00:02:56.870 --> 00:02:58.370
So components getting so we can use

00:02:58.370 --> 00:03:01.790
the annotation based way of configuring our spring manage beans.

00:03:01.790 --> 00:03:05.225
So that's using annotations like that component at service, that repository,

00:03:05.225 --> 00:03:10.050
our controller, and our configuration for configuration classes.

00:03:17.590 --> 00:03:20.610
So nothing terribly interesting.
