WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.400
In this video, we're going to see how we can open up

00:00:02.400 --> 00:00:04.785
a Spring Boot project in intelligence idea,

00:00:04.785 --> 00:00:06.060
the popular Java IDE,

00:00:06.060 --> 00:00:09.630
and demonstrate how we can run the application and also how we can debug the application

00:00:09.630 --> 00:00:13.335
so we can step through it and see exactly what's happening within the application itself.

00:00:13.335 --> 00:00:16.875
So first off, if why open up idea?

00:00:16.875 --> 00:00:19.035
So I'm using intelligent idea,

00:00:19.035 --> 00:00:22.740
Community Edition 20.119, which is the free version.

00:00:22.740 --> 00:00:26.504
You might be using, the ultimate version if you're working for a large organization,

00:00:26.504 --> 00:00:27.690
which has a few more features.

00:00:27.690 --> 00:00:29.610
But this is perfectly good for starting

00:00:29.610 --> 00:00:31.740
out with an in general for day-to-day development.

00:00:31.740 --> 00:00:34.080
I'm a professional Java software developer and actually

00:00:34.080 --> 00:00:36.330
I've never bought IntelliJ idea Ultimate Edition,

00:00:36.330 --> 00:00:38.370
although I've used in other companies which are provided it,

00:00:38.370 --> 00:00:40.705
but this is perfectly adequate for most needs.

00:00:40.705 --> 00:00:44.675
So I have a basic demo projects which are generated with the spring initializer website,

00:00:44.675 --> 00:00:46.040
doesn't have any dependencies in there.

00:00:46.040 --> 00:00:47.180
It's best on Melvin.

00:00:47.180 --> 00:00:48.635
Let's just open it now.

00:00:48.635 --> 00:00:53.150
Say if I go to open an

00:00:53.150 --> 00:00:57.770
inside my downloads folder doesn't demo project here you can see where the pond XML file.

00:00:57.770 --> 00:01:01.910
And if I just click the, the XML file and open that it's going to

00:01:01.910 --> 00:01:06.740
open it as a project if you choose this one.

00:01:06.740 --> 00:01:10.295
And what that means is it's going to interpret as a Maven project,

00:01:10.295 --> 00:01:11.765
which means that the Maven plugin,

00:01:11.765 --> 00:01:14.734
you can see here has been initialized.

00:01:14.734 --> 00:01:19.850
So if I click there, you can see that gives me an overview of the lifecycle.

00:01:19.850 --> 00:01:22.550
So those are the different phases that I

00:01:22.550 --> 00:01:25.460
can execute as part of the default build lifecycle.

00:01:25.460 --> 00:01:28.565
And you can see I've also got plugins,

00:01:28.565 --> 00:01:31.370
which are there particular plugins that this project is going to use.

00:01:31.370 --> 00:01:33.320
And a particular interest in the Spring Boot project,

00:01:33.320 --> 00:01:35.210
of course, is a Spring Boot plug-in here.

00:01:35.210 --> 00:01:40.295
But if I open up that, you'll see the actual goals I can execute on that plugin,

00:01:40.295 --> 00:01:43.370
which effectively gives us helpful build targets we can call to work

00:01:43.370 --> 00:01:46.730
with Spring boot camps plus m.

00:01:46.730 --> 00:01:48.680
And then we can see we've got dependencies.

00:01:48.680 --> 00:01:50.810
It's all Maven projects have a dependency section.

00:01:50.810 --> 00:01:52.715
And you can see here this particular project.

00:01:52.715 --> 00:01:53.870
If I just go over here to

00:01:53.870 --> 00:01:57.500
the project explorer and double-click to open upon the XML file.

00:01:57.500 --> 00:02:00.970
You can see here I have two dependencies

00:02:00.970 --> 00:02:04.135
which are explicitly included in the dependency section.

00:02:04.135 --> 00:02:07.630
Spring Boot starter, Spring Boot starter test.

00:02:07.630 --> 00:02:10.990
And you can see here that corresponds to these two here.

00:02:10.990 --> 00:02:12.130
So Spring Boot starter,

00:02:12.130 --> 00:02:13.555
it's been bootstrapped the test.

00:02:13.555 --> 00:02:16.615
And what's nice about this view as well as if I open up one of these.

00:02:16.615 --> 00:02:20.050
So for example here, you can see that under Spring Boot starter,

00:02:20.050 --> 00:02:22.510
underneath this dependency, These are

00:02:22.510 --> 00:02:26.290
the dependencies which it depends on c, you'll notice for example,

00:02:26.290 --> 00:02:30.294
Spring Boot starter also depends on sprinkle

00:02:30.294 --> 00:02:33.040
five to seven because 2.3.1 of

00:02:33.040 --> 00:02:36.430
spring bu is based on five to seven of the Spring framework.

00:02:36.430 --> 00:02:39.220
And in turn, spin core for example,

00:02:39.220 --> 00:02:40.540
brings in spring Jesse L,

00:02:40.540 --> 00:02:42.100
which is its logging library.

00:02:42.100 --> 00:02:45.235
And in fact, if I close that,

00:02:45.235 --> 00:02:47.980
I go over here into external libraries,

00:02:47.980 --> 00:02:51.370
we can see the full collection of libraries that have been

00:02:51.370 --> 00:02:55.180
brought into this project through just those two top-level dependencies.

00:02:55.180 --> 00:02:59.890
So Misha's close those and quickly demo how we can run the project them.

00:02:59.890 --> 00:03:02.725
So we can run the projects by double-clicking

00:03:02.725 --> 00:03:07.150
the Spring Boot run goal of the Spring Boot plug-in in the Maven pens.

00:03:07.150 --> 00:03:11.695
If I double-click there. You can see now that when the application,

00:03:11.695 --> 00:03:13.870
Of course, the application doesn't have any dependencies

00:03:13.870 --> 00:03:16.195
in there which would keep the application running.

00:03:16.195 --> 00:03:17.829
So for example, a web dependency,

00:03:17.829 --> 00:03:19.045
so closest straight away.

00:03:19.045 --> 00:03:21.310
But nevertheless, that's one way how you can run a project.

00:03:21.310 --> 00:03:24.110
And other waived if I close this off,

00:03:24.870 --> 00:03:28.450
is to go inside source, main,

00:03:28.450 --> 00:03:33.129
Java and look for the actual demo application.

00:03:33.129 --> 00:03:35.755
This is the spring of application itself.

00:03:35.755 --> 00:03:42.380
I, if I just right-click on there and do run demo application domain.

00:03:43.650 --> 00:03:46.060
And this time it's running the application,

00:03:46.060 --> 00:03:48.520
but it's not running the application through M7 itself.

00:03:48.520 --> 00:03:51.700
Instead it's running it through this command line here, which you can see.

00:03:51.700 --> 00:03:55.330
Similarly, if I wanted to debug the application instead of running it,

00:03:55.330 --> 00:03:58.060
then I could just select to debug instead.

00:03:58.060 --> 00:03:59.380
So if I just open disappear,

00:03:59.380 --> 00:04:03.055
for example, and set a breakpoint here.

00:04:03.055 --> 00:04:07.590
So the debugger will stop at this point when we're running in debug mode.

00:04:07.590 --> 00:04:12.570
If I right-click and go to debug.

00:04:13.750 --> 00:04:16.864
Now you can see that we're actually debugging the application.

00:04:16.864 --> 00:04:18.500
So here you can inspect any variables.

00:04:18.500 --> 00:04:20.810
So for example, here are the dogs that passed him,

00:04:20.810 --> 00:04:22.400
of course are no arguments passed in.

00:04:22.400 --> 00:04:26.570
So this is why this is empty and you can double-click on it to expand or see any values.

00:04:26.570 --> 00:04:28.744
This is where you have a coal hierarchy,

00:04:28.744 --> 00:04:32.360
which shows you the sequence of coals leading up to the current call.

00:04:32.360 --> 00:04:35.720
But of course, since this is a main method,

00:04:35.720 --> 00:04:37.819
is the top-level method and an application,

00:04:37.819 --> 00:04:42.290
we only see one so-called stack frame here,

00:04:42.290 --> 00:04:46.160
or one call here, which is inside this class demo application itself.

00:04:46.160 --> 00:04:49.340
And we can also see as well the threads used in the application.

00:04:49.340 --> 00:04:53.615
So here we're just effectively got one thread which is a consequence to us,

00:04:53.615 --> 00:04:55.580
which is the main thread.

00:04:55.580 --> 00:04:57.920
So things you can do once you are in a breakpoint,

00:04:57.920 --> 00:04:59.450
you can either step into code.

00:04:59.450 --> 00:05:02.240
So for example, if I hit F7 to step into,

00:05:02.240 --> 00:05:03.500
you can also see this as well.

00:05:03.500 --> 00:05:05.090
If you go into R1, you can see

00:05:05.090 --> 00:05:14.040
the various debug navigation shortcuts you can use here to find you step into with F7.

00:05:14.740 --> 00:05:18.755
And that's now stepping into spring boots card itself.

00:05:18.755 --> 00:05:22.400
And you can see here we've got an extra frame

00:05:22.400 --> 00:05:25.490
now because we've made an extra course and our insights spring application,

00:05:25.490 --> 00:05:27.800
you could do F7 again, for example.

00:05:27.800 --> 00:05:32.525
Now we are in another method which happens to be in the same class.

00:05:32.525 --> 00:05:36.545
And you can also press F8 to step over the current line,

00:05:36.545 --> 00:05:39.305
which basically executes that line and goes to the next line.

00:05:39.305 --> 00:05:41.360
Or if that line is the last line in a method,

00:05:41.360 --> 00:05:44.910
we'll jump back up to the calling method and you can do Shift F8 to jump out,

00:05:44.910 --> 00:05:47.210
a method to jump back out to the caller and

00:05:47.210 --> 00:05:49.565
effectively play the rest of the method you've actually stepped into.

00:05:49.565 --> 00:05:51.530
Or you can hit F9, which just means run

00:05:51.530 --> 00:05:54.050
the rest of the application from here, which I've just done there.

00:05:54.050 --> 00:05:57.440
So in one step through the Spring Boot application code, the framework,

00:05:57.440 --> 00:05:59.390
or that is now because obviously we don't wanna get too carried

00:05:59.390 --> 00:06:01.490
away with things and we don't want to run before we can walk.

00:06:01.490 --> 00:06:02.885
But I was just a nice introduction.

00:06:02.885 --> 00:06:07.920
Or you can run and debug your spring two applications in the ID using intelligent idea.
