WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.080 --> 00:00:03.300
So let's have a look at the actual code itself.

00:00:03.300 --> 00:00:12.690
So if I look for controllers in the project by using,

00:00:12.690 --> 00:00:14.790
for example, this regular expression here,

00:00:14.790 --> 00:00:20.500
we can see that we've got a few different controllers here.

00:00:21.500 --> 00:00:25.320
And the way they've structured this application is instead of having

00:00:25.320 --> 00:00:29.130
packages for the actual layers of the application like we've seen before.

00:00:29.130 --> 00:00:31.890
So instead of having a presentation layer, a business layer,

00:00:31.890 --> 00:00:34.610
a persistence layer, you'd have your controllers,

00:00:34.610 --> 00:00:37.445
services, and repositories respectively.

00:00:37.445 --> 00:00:39.890
Instead of doing that, what they're doing is they're kind of grouping it

00:00:39.890 --> 00:00:42.560
by the actual domain objects instead.

00:00:42.560 --> 00:00:45.155
So for example, if we look at the vet,

00:00:45.155 --> 00:00:47.210
we can see here that's a handle vets.

00:00:47.210 --> 00:00:49.535
We first off got the vet controller.

00:00:49.535 --> 00:00:51.005
So what I mean by this, by the way,

00:00:51.005 --> 00:00:55.280
is the fact that they have all artifacts across all layers under one package,

00:00:55.280 --> 00:00:57.650
instead of having packages which separate the layers,

00:00:57.650 --> 00:00:59.210
they've done it this way, which is OK.

00:00:59.210 --> 00:01:00.980
It's also another style of doing things.

00:01:00.980 --> 00:01:03.200
And arguably at least you can keep things together than as well.

00:01:03.200 --> 00:01:05.930
So this is all to do with processing of vets.

00:01:05.930 --> 00:01:07.685
So here we've got the vet controller.

00:01:07.685 --> 00:01:10.250
Here you can see it's annotated with a controller,

00:01:10.250 --> 00:01:12.290
which shows that it's a controller.

00:01:12.290 --> 00:01:13.670
We've got a vet repository,

00:01:13.670 --> 00:01:15.455
which is also soundness as well.

00:01:15.455 --> 00:01:17.960
And then these are spring and VC methods here annotated

00:01:17.960 --> 00:01:20.300
with these annotations to provide the mapping.

00:01:20.300 --> 00:01:21.770
So we've gotta get mapping here.

00:01:21.770 --> 00:01:24.755
When the browser requests slash vets dot HTML,

00:01:24.755 --> 00:01:27.920
you can see it's gonna create the vets domain object,

00:01:27.920 --> 00:01:29.120
put things in the model,

00:01:29.120 --> 00:01:31.835
and then returning vets slash embed list.

00:01:31.835 --> 00:01:37.235
So we're going to look inside resources and templates.

00:01:37.235 --> 00:01:40.235
And then we'll see is gonna get the vets, that list.

00:01:40.235 --> 00:01:43.595
So it's going to return this time leaf template in them.

00:01:43.595 --> 00:01:47.360
So in this case that just returns a string which is an identifier used to

00:01:47.360 --> 00:01:50.645
retrieve view which resides on the resources templates.

00:01:50.645 --> 00:01:52.415
And then this path which is here.

00:01:52.415 --> 00:01:55.310
And then they get mapping as well is to slash vets.

00:01:55.310 --> 00:01:56.690
So slush vets, again,

00:01:56.690 --> 00:01:58.160
it's gonna create the vents object,

00:01:58.160 --> 00:02:01.925
get all of the vets by delegating to this,

00:02:01.925 --> 00:02:06.050
which is actually the repository and doing a fine doll.

00:02:06.050 --> 00:02:10.385
And then it's gonna return all of that back as a response body.

00:02:10.385 --> 00:02:13.370
In other words, inside vets,

00:02:13.370 --> 00:02:16.235
this is actually, if you look inside here,

00:02:16.235 --> 00:02:18.800
findable to an XML representation.

00:02:18.800 --> 00:02:24.120
So X naught root element is Vets an XML elements and list of vet.
