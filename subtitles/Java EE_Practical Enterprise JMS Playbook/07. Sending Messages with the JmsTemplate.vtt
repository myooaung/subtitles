WEBVTT
1
00:00:01.497 --> 00:00:05.108
Using the JmsTemplate to send messages is actually quite simple.

2
00:00:05.108 --> 00:00:08.837
Once your JmsTemplate has been injected into your object,

3
00:00:08.837 --> 00:00:13.427
you can use it by simply calling the convertAndSend method.

4
00:00:13.427 --> 00:00:17.222
In this example, I'm creating an email message every 5 seconds,

5
00:00:17.222 --> 00:00:19.996
and placing it on the email's queue destination.

6
00:00:19.996 --> 00:00:24.823
When the email is sent, it will be sent in a JSON format.

7
00:00:24.823 --> 00:00:26.729
So let's start this application up.

8
00:00:26.729 --> 00:00:28.317
On the console output window,

9
00:00:28.317 --> 00:00:32.066
here I can see that we now have sent at least one email.

10
00:00:32.066 --> 00:00:35.248
So if we jump into the ActiveMQ Admin console,

11
00:00:35.248 --> 00:00:37.196
and look at the Emails queue,

12
00:00:37.196 --> 00:00:40.335
then there will be a number of messages on that queue.

13
00:00:40.335 --> 00:00:42.143
Now they'll all be the same for this simple example,

14
00:00:42.143 --> 00:00:44.357
so we'll just look at one of them.

15
00:00:44.357 --> 00:00:48.831
In it I can see the string property used by the message converter,

16
00:00:48.831 --> 00:00:50.663
defining the fully-qualified class name,

17
00:00:50.663 --> 00:00:53.476
and I can also see the body contains JSON representing

18
00:00:53.476 --> 00:00:56.247
the data within the email object.

19
00:00:56.247 --> 00:01:01.178
This example was sending to a queue, but sending to a topic is no different,

20
00:01:01.178 --> 00:01:07.165
we would simply use the topicJmsTemplate Bean we described earlier.

21
00:01:07.165 --> 00:01:12.411
It's also possible to form some raw JMS operations using the JmsTemplate.

22
00:01:12.411 --> 00:01:15.645
If you still want to let the JmsTemplate take care of message conversion,

23
00:01:15.645 --> 00:01:18.697
then there's an overloaded version of the convertAndSend

24
00:01:18.697 --> 00:01:22.825
method that takes another parameter, which is the MessagePostProcessor,

25
00:01:22.825 --> 00:01:26.951
which gives you access to the JMS message itself.

26
00:01:26.951 --> 00:01:28.345
If you're using Java 8,

27
00:01:28.345 --> 00:01:31.132
then you can easily replace this with a lambda expression.

28
00:01:31.132 --> 00:01:35.032
This is a prime location to set the JMSXGroupID if you

29
00:01:35.032 --> 00:01:36.836
want guaranteed ordering of messages.

30
00:01:36.836 --> 00:01:40.121
If you don't want to use the message converter,

31
00:01:40.121 --> 00:01:42.045
and would rather construct the message yourself,

32
00:01:42.045 --> 00:01:44.004
then rather than calling convertAndSend,

33
00:01:44.004 --> 00:01:47.406
you simply call the send method.

34
00:01:47.406 --> 00:01:50.599
This takes a MessageCreator interface as a parameter.

35
00:01:50.599 --> 00:01:53.480
Again, in Java 8, we can use a lambda expression for this.

36
00:01:53.480 --> 00:01:55.398
You get access to the JMS session object,

37
00:01:55.398 --> 00:01:57.552
which allows us to create new message types,

38
00:01:57.552 --> 00:01:59.783
and do what you want with them.

39
00:01:59.783 --> 00:02:04.475
Again this is the ideal spot to set the JMSXGroupID if

40
00:02:04.475 --> 00:02:06.589
want guaranteed ordering of messages.

41
00:02:06.589 --> 00:02:09.530
It's also possible to declare the TimeToLive,

42
00:02:09.530 --> 00:02:14.034
a message priority for all messages sent with a JmsTemplate.

43
00:02:14.034 --> 00:02:17.755
There are simply additional properties on the JmsTemplated class itself,

44
00:02:17.755 --> 00:02:21.949
so you would ad them as part of your Spring Bean definition.

45
00:02:21.949 --> 00:02:26.649
One disadvantage of the JmsTemplate is that it isn't directly possible to

46
00:02:26.649 --> 00:02:30.012
set the TimeToLive and priority on a per-message basis.

47
00:02:30.012 --> 00:02:33.636
If you do need to set the TimeToLive or priority in a more dynamic fashion,

48
00:02:33.636 --> 00:02:37.941
then it's probably best to create a new instance of the JmsTemplate on demand,

49
00:02:37.941 --> 00:02:42.945
rather than injecting the JMS template itself into your class.

50
00:02:42.945 --> 00:02:44.263
In this example,

51
00:02:44.263 --> 00:02:48.102
cachingConnectionFactory and messageConverter are injected into my class.

52
00:02:48.102 --> 00:02:50.364
I then create a new JmsTemplate,

53
00:02:50.364 --> 00:02:53.004
and set the priority and TimeToLive appropriately.

54
00:02:53.004 --> 00:03:01.000
Notice that you must also call the setExplicityQosEnabled method with a value of true.

