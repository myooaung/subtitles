1
00:00:02,322 --> 00:00:06,301
In order to use JMS in a Spring Boot application,

2
00:00:06,301 --> 00:00:09,087
you need to add a few dependencies into your project.

3
00:00:09,087 --> 00:00:10,872
I'm using Apache Maven, but if you're using Gradle,

4
00:00:10,872 --> 00:00:13,039
then there will be a similar approach.

5
00:00:13,039 --> 00:00:16,664
First off, our project's parent is the spring-boot-starter-parent.

6
00:00:16,664 --> 00:00:21,738
I've also added a dependency for the latest spring-jms jar.

7
00:00:21,738 --> 00:00:26,990
Now there is a spring-boot-starter-activemq for working with ActiveMQ,

8
00:00:26,990 --> 00:00:30,147
which can be used for basic scenarios; however,

9
00:00:30,147 --> 00:00:31,428
I'm not going to use it,

10
00:00:31,428 --> 00:00:36,762
and instead I'm going to just include the activemq-client jar file.

11
00:00:36,762 --> 00:00:37,573
Why?

12
00:00:37,573 --> 00:00:41,371
Well, as much as the spring-boot-activemq-starter does get you up and running,

13
00:00:41,371 --> 00:00:43,392
I find that some of the defaults make it difficult to

14
00:00:43,392 --> 00:00:45,235
work across an enterprise solution,

15
00:00:45,235 --> 00:00:48,758
but it's great for doing smaller applications and proof of concepts.

16
00:00:48,758 --> 00:00:51,831
Another reason is to try and give you a bit more in-depth

17
00:00:51,831 --> 00:00:53,781
knowledge about how the wiring works,

18
00:00:53,781 --> 00:00:58,510
rather than rely on sort of out of the box magic.

19
00:00:58,510 --> 00:00:59,395
In your application code,

20
00:00:59,395 --> 00:01:03,235
you need to tell Spring that you want to enable JMS by adding

21
00:01:03,235 --> 00:01:07,966
the EnableJms annotation onto a class that is annotated with

22
00:01:07,966 --> 00:01:09,512
the configuration annotation.

23
00:01:09,512 --> 00:01:10,339
So in my configuration,

24
00:01:10,339 --> 00:01:12,646
I'm declaring a new Bean for my ActiveMQConnectionFactory.

25
00:01:12,646 --> 00:01:19,226
It takes in an ActiveMQProperties object, which contains the broker URL.

26
00:01:19,226 --> 00:01:21,678
There should be nothing really new in here,

27
00:01:21,678 --> 00:01:25,461
as it's been covered earlier in the course.

28
00:01:25,461 --> 00:01:27,267
Now if you are using some other message broker,

29
00:01:27,267 --> 00:01:30,274
then you'll have to replace this implementation with

30
00:01:30,274 --> 00:01:31,928
a functionally-similar method.

31
00:01:31,928 --> 00:01:34,091
I'm marking the Bean as Primary,

32
00:01:34,091 --> 00:01:37,195
so this will be the default connection factory

33
00:01:37,195 --> 00:01:40,014
returned for injection into Spring Beans.

34
00:01:40,014 --> 00:01:45,076
I'm also creating a second ConnectionFactory called CachingConnectionFactory.

35
00:01:45,076 --> 00:01:47,760
It takes our ActiveMqConnectionFactory as a parameter,

36
00:01:47,760 --> 00:01:50,104
and it effectively acts as a wrapper.

37
00:01:50,104 --> 00:01:53,482
It will take care of caching connections, sessions, etc.

38
00:01:53,482 --> 00:01:54,395
for us.

39
00:01:54,395 --> 00:02:04,000
In its configuration, I've enabled caching of consumers and producers, as well as telling it to reconnect when an exception occurs.

