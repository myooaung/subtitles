WEBVTT
1
00:00:02.701 --> 00:00:05.375
Requirements for monitoring differ depending on your enterprise environment,

2
00:00:05.375 --> 00:00:08.871
but generally there are a few common themes.

3
00:00:08.871 --> 00:00:13.237
Log file monitoring, I suggest no matter what environment you're in,

4
00:00:13.237 --> 00:00:16.210
these get placed into some form of centralized logging,

5
00:00:16.210 --> 00:00:20.060
for example, a Syslog server, use the ELK Stack,

6
00:00:20.060 --> 00:00:22.253
which is Elasticsearch, Logstash, Kibana,

7
00:00:22.253 --> 00:00:25.593
although the need for Logstash is reduced these days,

8
00:00:25.593 --> 00:00:27.503
and another great option is Splunk.

9
00:00:27.503 --> 00:00:30.157
Many message brokers expose their management APIs

10
00:00:30.157 --> 00:00:33.342
through Java Management Extensions or JMX.

11
00:00:33.342 --> 00:00:37.031
It's a great tool and provides lots of capabilities; however,

12
00:00:37.031 --> 00:00:38.943
one thing I find frustrating is that it can be difficult to access

13
00:00:38.943 --> 00:00:42.934
remote brokers in a secure manner using standard JMX.

14
00:00:42.934 --> 00:00:43.812
In general,

15
00:00:43.812 --> 00:00:48.641
it requires opening up ports and correctly securing your JMX endpoint.

16
00:00:48.641 --> 00:00:51.432
These days, I prefer to keep the JMX endpoint bound to the localhost,

17
00:00:51.432 --> 00:00:52.487
reducing its exposure,

18
00:00:52.487 --> 00:00:57.644
and send JMX commands to the box remotely via something like Ansible.

19
00:00:57.644 --> 00:01:00.116
If you are happy to expose JMX,

20
00:01:00.116 --> 00:01:04.270
then maybe also consider using something like Jolokia and Hawtio,

21
00:01:04.270 --> 00:01:08.090
which provide JMX over HTTP with centralized administration.

22
00:01:08.090 --> 00:01:11.593
It's also important to monitor the size of your queues and topics,

23
00:01:11.593 --> 00:01:12.322
the number of consumers,

24
00:01:12.322 --> 00:01:14.146
as well as the statistics for the message broker

25
00:01:14.146 --> 00:01:16.712
itself and the host they're running on.

26
00:01:16.712 --> 00:01:17.568
To demonstrate this,

27
00:01:17.568 --> 00:01:21.073
here is a simple dashboard I've put together using the ELK Stack.

28
00:01:21.073 --> 00:01:23.956
It shows some of the queue sizes, number of consumers,

29
00:01:23.956 --> 00:01:25.693
and number of connections to the broker,

30
00:01:25.693 --> 00:01:29.906
and also the most recent log entries from the message brokers themselves.

31
00:01:29.906 --> 00:01:37.000
I suggest you spend the time trying to put something like this together, no matter what tool you use to do it.

