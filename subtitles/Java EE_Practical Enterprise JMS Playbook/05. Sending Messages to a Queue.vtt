WEBVTT
1
00:00:01.917 --> 00:00:05.871
Let's now look at how you can send messages to a queue.

2
00:00:05.871 --> 00:00:07.945
In all our examples, we will use text messages,

3
00:00:07.945 --> 00:00:12.066
but you can use any of the JMS message types obviously.

4
00:00:12.066 --> 00:00:15.038
I've created a method called sendTextMessageToQueue,

5
00:00:15.038 --> 00:00:18.599
which takes the text message we want to send as a parameter,

6
00:00:18.599 --> 00:00:22.046
as well as a JMS session object.

7
00:00:22.046 --> 00:00:26.165
We need to create the queue object that we want to send the messages to.

8
00:00:26.165 --> 00:00:29.508
Then we create the TextMessage object itself using a

9
00:00:29.508 --> 00:00:31.365
method on the session parameter.

10
00:00:31.365 --> 00:00:33.551
Next we create a messageProducer object,

11
00:00:33.551 --> 00:00:36.523
also using the session parameter passed in.

12
00:00:36.523 --> 00:00:41.568
And finally, we simply send the message using the producer.

13
00:00:41.568 --> 00:00:45.024
So let's see how this could actually be invoked.

14
00:00:45.024 --> 00:00:48.774
I'm creating a static void main method for my example application,

15
00:00:48.774 --> 00:00:53.478
inside which I instantiate an instance of my application class.

16
00:00:53.478 --> 00:00:57.927
I then use that application reference to create a ConnectionFactory.

17
00:00:57.927 --> 00:01:01.879
I then also need to create a connection to the

18
00:01:01.879 --> 00:01:04.250
message broker and also a session.

19
00:01:04.250 --> 00:01:07.717
Now I'm actually in the position where I can send the message I want,

20
00:01:07.717 --> 00:01:10.471
so I can call the sendTextMesageToQueue method,

21
00:01:10.471 --> 00:01:14.464
passing in my message and also the required session object.

22
00:01:14.464 --> 00:01:19.725
Finally, let's do some tidy up, and assure we are freeing up resources.

23
00:01:19.725 --> 00:01:21.349
So I call session.

24
00:01:21.349 --> 00:01:23.452
close and also connection.

25
00:01:23.452 --> 00:01:24.098
close.

26
00:01:24.098 --> 00:01:27.326
So let's try this out.

27
00:01:27.326 --> 00:01:28.840
I'll execute my application.

28
00:01:28.840 --> 00:01:31.273
Once it's compiled and completed executing,

29
00:01:31.273 --> 00:01:35.605
I'll jump back to the ActiveMQ Admin console.

30
00:01:35.605 --> 00:01:37.083
I'll refresh the queue section,

31
00:01:37.083 --> 00:01:41.133
and now I can see my test destination queue has been created,

32
00:01:41.133 --> 00:01:45.763
and that there is one message on the queue awaiting consumption.

33
00:01:45.763 --> 00:01:51.048
If I browse the queue, then I can see the details of the messages on the queue.

34
00:01:51.048 --> 00:01:52.109
There is of course only one,

35
00:01:52.109 --> 00:01:54.393
but if I jump into the details of that specific message,

36
00:01:54.393 --> 00:02:02.287
then I can see the actual textual body of the message that we actually sent.

37
00:02:02.287 --> 00:02:04.461
It's also possible to use the queue session.

38
00:02:04.461 --> 00:02:09.150
In this case, I'm going to create a copy of the sendTextMessagetoQueue method,

39
00:02:09.150 --> 00:02:13.065
which takes a queue session interface as a parameter,

40
00:02:13.065 --> 00:02:15.111
rather than the more generic session interface.

41
00:02:15.111 --> 00:02:18.497
Although I could leave the method as it is,

42
00:02:18.497 --> 00:02:22.579
I'm going to call createSender on the queue session,

43
00:02:22.579 --> 00:02:24.126
rather than createProducer.

44
00:02:24.126 --> 00:02:26.349
This results in a queue sender interface.

45
00:02:26.349 --> 00:02:32.405
So to test this, I need to go back to my main method and adjust that.

46
00:02:32.405 --> 00:02:37.576
I'm creating a queueConnectionFactory and a queueConnection object this time.

47
00:02:37.576 --> 00:02:42.967
I'm also creating a queueSession, rather than the more generic session object.

48
00:02:42.967 --> 00:02:46.077
I'll also change the text of the message so we can distinguish it.

49
00:02:46.077 --> 00:02:50.323
Oops, I actually forgot to change the session return type to a queueSession,

50
00:02:50.323 --> 00:02:52.485
so let's fix that.

51
00:02:52.485 --> 00:02:56.269
So let's compile and run that again.

52
00:02:56.269 --> 00:02:58.995
It's complete, so now we jump back to the ActiveMQ Admin console,

53
00:02:58.995 --> 00:03:00.586
and refresh the queues.

54
00:03:00.586 --> 00:03:04.769
Now I can see two messages, and based on the timestamps,

55
00:03:04.769 --> 00:03:13.000
if I click on the latest message, then I can see the content of our message, which says another message.

