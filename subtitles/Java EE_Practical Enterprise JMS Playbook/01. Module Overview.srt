1
00:00:00,000 --> 00:00:03,501
Hi, this is Grant Little from Pluralsight,

2
00:00:03,501 --> 00:00:07,617
and welcome back to this Practical Enterprise JMS Playbook.

3
00:00:07,617 --> 00:00:11,199
If you've been following this playbook all the way through,

4
00:00:11,199 --> 00:00:15,828
then you'll have noticed that all the examples so far use the basic JMS APIs,

5
00:00:15,828 --> 00:00:17,692
which is all fine and good,

6
00:00:17,692 --> 00:00:22,387
but it also means that typically there is a fair amount of boilerplate code.

7
00:00:22,387 --> 00:00:26,028
Most enterprises use some form of framework to help

8
00:00:26,028 --> 00:00:28,051
reduce this amount of boilerplate.

9
00:00:28,051 --> 00:00:32,366
In this module, I'm going to look at using JMS within the Spring Framework.

10
00:00:32,366 --> 00:00:34,289
JMS has long been part of this framework,

11
00:00:34,289 --> 00:00:38,181
so it has mature support and generally makes working with JMS pretty simple,

12
00:00:38,181 --> 00:00:42,539
taking care of much of the boilerplate code and basic concerns for you.

13
00:00:42,539 --> 00:00:44,978
There are two general approaches to configuring an

14
00:00:44,978 --> 00:00:46,869
application using the Spring Framework,

15
00:00:46,869 --> 00:00:51,018
one via XML and another using annotations within your code,

16
00:00:51,018 --> 00:00:54,685
which is now heavily used within the Spring Boot Framework.

17
00:00:54,685 --> 00:00:57,240
This is not a course on teaching the Spring Framework,

18
00:00:57,240 --> 00:01:05,000
so I'm assuming you'll have at least some familiarity with it, and using one or both of the configuration mechanisms.

