1
00:00:00,390 --> 00:00:06,000
Now that we've learned how to add videos to our apps let's do the same thing with Odeo.

2
00:00:06,750 --> 00:00:17,520
So as usual we'll start a new project and we'll see that the process for working with sound is very

3
00:00:17,520 --> 00:00:19,600
similar to working with video.

4
00:00:19,980 --> 00:00:26,610
But we do have a little bit of extra flexibility built in which we'll use to create our own buttons

5
00:00:26,610 --> 00:00:31,020
to control the audio while that's setting up.

6
00:00:31,200 --> 00:00:38,040
Let's just download a sound effect to use within our app there's loads to play online when you can get

7
00:00:38,040 --> 00:00:39,660
free sound effects.

8
00:00:39,720 --> 00:00:41,420
I'm going to use sound byte build at home.

9
00:00:41,460 --> 00:00:46,770
If that was not available when you're watching this video just Google for free sound effects and you'll

10
00:00:46,770 --> 00:00:49,320
find a bunch of options.

11
00:00:50,960 --> 00:00:53,450
I'm going to look for this Mobbles clip here.

12
00:00:58,450 --> 00:01:02,840
And I just use quick flash to listen to it.

13
00:01:09,730 --> 00:01:10,400
And there it is

14
00:01:13,170 --> 00:01:16,750
wonderful and it's downloaded as well.

15
00:01:17,880 --> 00:01:19,880
It's right there has a wav file.

16
00:01:19,890 --> 00:01:21,350
You can get it as an MP 3 as well.

17
00:01:21,360 --> 00:01:23,370
Either will work fine.

18
00:01:23,370 --> 00:01:26,710
I'll stick with the wave file.

19
00:01:29,000 --> 00:01:35,650
Ok so to add the file to our app works in exactly the same way as it does with video.

20
00:01:36,350 --> 00:01:41,690
So it's open the resources folder in Finder or Windows Explorer

21
00:01:44,480 --> 00:01:54,900
create a new folder called roll and then just simplify the phone name a bit.

22
00:01:57,320 --> 00:02:06,180
Drag that into the roll fold up again if it doesn't update just right click and synchronize.

23
00:02:08,790 --> 00:02:09,410
OK.

24
00:02:11,270 --> 00:02:19,430
Now unlike the video player there's no actual visual component to the audio player by default.

25
00:02:19,440 --> 00:02:21,540
It just plays in the background.

26
00:02:21,540 --> 00:02:27,390
So all we need to do is write a couple of lines of code in the uncreate method.

27
00:02:29,510 --> 00:02:32,790
And we'll start by setting up a media player.

28
00:02:36,340 --> 00:02:45,160
Which will call media player and this is going to be set up purely to create our one sound effect.

29
00:02:45,160 --> 00:02:58,460
So Media Player don't create and the context again is this app I guess and we want to create a sound

30
00:02:58,460 --> 00:03:02,800
effect for our roar.

31
00:03:03,440 --> 00:03:06,150
I forgot what I call that Mobbles.

32
00:03:06,170 --> 00:03:07,910
That's it.

33
00:03:07,970 --> 00:03:11,280
And then the location of the resorts are taught.

34
00:03:11,330 --> 00:03:18,990
Roar taught Mobbles and just a note it might come up with an error here.

35
00:03:18,990 --> 00:03:24,210
I've actually just waited five minutes or so for it to detect the wrong folder because the roll was

36
00:03:24,210 --> 00:03:25,810
coming up in red.

37
00:03:25,980 --> 00:03:29,610
It didn't detect it so I just ran the app and then it worked fine.

38
00:03:29,610 --> 00:03:34,260
So if you have that problem that it doesn't detect the roll folder just complete the app run it and

39
00:03:34,260 --> 00:03:40,260
hopefully that'll fix the issue for you then to make it play.

40
00:03:40,380 --> 00:03:45,360
We just use Media Player don't start.

41
00:03:45,500 --> 00:03:47,340
Simple as that.

42
00:03:47,930 --> 00:03:51,930
So two lines of code to run some audio in your app.

43
00:03:52,790 --> 00:03:54,020
Let's give it a listen.

44
00:03:57,380 --> 00:03:59,850
Hopefully you heard those lovely Marples there.

45
00:04:00,350 --> 00:04:00,890
OK.

46
00:04:01,020 --> 00:04:06,870
So super simple but of course what we don't have is any kind of interaction with the audio unlike what

47
00:04:06,870 --> 00:04:08,290
we did with the video.

48
00:04:08,520 --> 00:04:12,150
So with audio we have to create our own system to control

49
00:04:14,760 --> 00:04:16,220
our sound.

50
00:04:16,290 --> 00:04:17,700
So let's do that now.

51
00:04:17,890 --> 00:04:23,750
We'll get rid of the text few more drag in a couple of buttons.

52
00:04:31,550 --> 00:04:32,620
We would just give them some

53
00:04:35,240 --> 00:04:39,190
constraints so they don't move all over the place.

54
00:04:42,120 --> 00:04:45,150
When we run the app so we'll have a play button

55
00:04:48,000 --> 00:04:51,550
which will run the play method.

56
00:04:51,600 --> 00:04:53,300
I also have a pause button

57
00:04:58,000 --> 00:05:00,610
running the pause method.

58
00:05:02,630 --> 00:05:03,190
OK.

59
00:05:03,390 --> 00:05:04,610
So a quick challenge for you.

60
00:05:04,740 --> 00:05:09,480
Can you reconfigure the code so instead of playing the media at the start it plays it when you press

61
00:05:09,810 --> 00:05:11,360
the play button.

62
00:05:11,580 --> 00:05:15,870
Go for it.

63
00:05:15,890 --> 00:05:16,650
All right.

64
00:05:16,670 --> 00:05:17,950
How you manage that.

65
00:05:17,980 --> 00:05:26,330
It's really just a matter of creating the play method and moving the code into let's say public voyde

66
00:05:26,400 --> 00:05:27,570
doesn't return anything.

67
00:05:27,660 --> 00:05:29,750
Methods could play.

68
00:05:29,750 --> 00:05:32,720
It's called by a view that is the button

69
00:05:37,180 --> 00:05:41,600
and this is the code that we need.

70
00:05:47,730 --> 00:05:50,580
To play our sound simple as that.

71
00:05:50,610 --> 00:05:51,820
Let's give it a quick go.

72
00:05:57,070 --> 00:06:00,380
OK so we'll press play and then we have

73
00:06:05,080 --> 00:06:10,380
notice you can actually create several instances of the sound playing over each other.

74
00:06:10,380 --> 00:06:17,150
That can be quite handy if it's a game or something and you want the sound to play over and over again.

75
00:06:17,320 --> 00:06:19,710
But if you play music you might not want that behavior.

76
00:06:19,720 --> 00:06:22,310
So you might need to adjust for that.

77
00:06:22,750 --> 00:06:23,360
All right.

78
00:06:23,620 --> 00:06:28,840
I'm going to hit the pause button as a challenge as well to see if you can work out how you would set

79
00:06:28,900 --> 00:06:33,590
the pause button to pause the sound there for it.

80
00:06:39,300 --> 00:06:40,280
All right.

81
00:06:40,560 --> 00:06:41,840
Have you managed it.

82
00:06:42,420 --> 00:06:49,810
You may have spotted that there's a method inside the media player class called Paws.

83
00:06:50,190 --> 00:06:52,470
That's the method that we want.

84
00:06:52,470 --> 00:07:00,210
The trick is to connect to the media player but that's fairly straightforward today.

85
00:07:00,960 --> 00:07:04,500
We'll create a method called Pooles

86
00:07:07,610 --> 00:07:16,670
called by the other button and we just need to use media player or pause but we need to be able to access

87
00:07:16,850 --> 00:07:17,960
the media player.

88
00:07:18,290 --> 00:07:25,970
So the trick is to take the media player out of the play method and define it inside the main activity

89
00:07:25,970 --> 00:07:26,830
class.

90
00:07:30,350 --> 00:07:31,350
So we can create it.

91
00:07:31,360 --> 00:07:35,520
They're just an empty variable.

92
00:07:35,860 --> 00:07:40,360
And then set it up on play.

93
00:07:43,490 --> 00:07:53,290
And now we can use Media Player pause to parse it but can you see what error that might cause.

94
00:07:56,550 --> 00:08:02,660
To just put it that if someone presses pause before they press play this will actually cause the app

95
00:08:02,900 --> 00:08:07,530
to crash because the media player is simply an empty object to them.

96
00:08:07,550 --> 00:08:09,080
There's nothing to pause.

97
00:08:09,130 --> 00:08:17,210
So the way I'd get round that would be to set up the media player in the on create method.

98
00:08:17,480 --> 00:08:24,300
So that set up when the is open and then the pause button would do anything.

99
00:08:24,380 --> 00:08:26,060
But it also would break

100
00:08:28,940 --> 00:08:32,450
the app which is the behavior you want.

101
00:08:32,450 --> 00:08:36,720
So now the media player button is created in the class itself.

102
00:08:36,830 --> 00:08:39,230
It's set up in the create method.

103
00:08:39,560 --> 00:08:46,390
It started in the play method and it's paused in the pause method.

104
00:08:46,460 --> 00:08:47,920
So let's take a look.

105
00:08:50,300 --> 00:08:51,740
Did you hear that.

106
00:08:51,740 --> 00:08:52,430
Hopefully say

107
00:08:55,420 --> 00:08:59,490
comply and then pause stop it play starts again.

108
00:09:02,350 --> 00:09:03,110
OK.

109
00:09:03,550 --> 00:09:08,180
There's a few other options there so feel free to play around with those options.

110
00:09:08,290 --> 00:09:10,780
But we're going to stop it for this video in the next video.

111
00:09:10,780 --> 00:09:16,720
We'll look at how to control volume and that will involve bringing in a new interface element that we

112
00:09:16,720 --> 00:09:17,670
haven't used before.

113
00:09:17,710 --> 00:09:18,570
The slides.
