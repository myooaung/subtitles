WEBVTT
1
00:00:00.540 --> 00:00:00.840
All right.

2
00:00:00.840 --> 00:00:04.530
So this is where things start to get really interesting rather than just messing around with layouts

3
00:00:04.530 --> 00:00:05.700
and colors and backgrounds.

4
00:00:05.700 --> 00:00:11.220
We're going to start to write some actual code and build some interactivity into our apps.

5
00:00:11.550 --> 00:00:18.450
So the usual way to have some basic interactivity is to bring in a button so select the button from

6
00:00:18.450 --> 00:00:22.170
the widget palette at the top left then and then drag it in.

7
00:00:22.200 --> 00:00:26.890
I'm going to put it just underneath the great app.

8
00:00:26.910 --> 00:00:28.180
Text me.

9
00:00:28.560 --> 00:00:29.400
We can put in some

10
00:00:32.450 --> 00:00:38.900
margins if you like and feel free to experiment with different colors styles etc. but we'll focus on

11
00:00:39.650 --> 00:00:40.610
the code for now.

12
00:00:40.610 --> 00:00:46.820
So I'm not going to style that button in any way but the button has a new attribute that text you don't

13
00:00:46.820 --> 00:00:50.910
have and that is the on click attribute.

14
00:00:51.080 --> 00:00:57.800
And this is where we can set a certain function or method to be called and that button is tapped by

15
00:00:57.800 --> 00:00:58.890
the user.

16
00:00:59.510 --> 00:01:02.480
So I'm going to call the method

17
00:01:06.070 --> 00:01:10.990
click function and this is going to be the name of the chunk of code that's run.

18
00:01:11.110 --> 00:01:14.490
When that button is tapped.

19
00:01:14.570 --> 00:01:15.450
All right.

20
00:01:15.670 --> 00:01:20.710
That now gives us an error because we haven't created the click function method yet.

21
00:01:20.710 --> 00:01:24.560
So let's go and do that over in main activity Java.

22
00:01:24.910 --> 00:01:27.260
So this is our first experience of Java.

23
00:01:27.460 --> 00:01:33.250
We saw the main activity file years ago when we were touring Android studio but we didn't take a lot

24
00:01:33.250 --> 00:01:34.900
of time to actually see what it's doing.

25
00:01:34.900 --> 00:01:40.390
Let's quickly do that and then we'll write the code for our click function method.

26
00:01:40.390 --> 00:01:47.080
So first off the main activity is defining the package ID that so we've got coming up my company to

27
00:01:47.110 --> 00:01:52.460
rob example app as we saw when we created this particular project.

28
00:01:52.600 --> 00:01:58.870
Then we've got some import statements and we're importing some frameworks there which allow us to use

29
00:01:58.870 --> 00:02:01.910
certain features of the Android OS.

30
00:02:02.140 --> 00:02:08.280
So our two frameworks here we've got app compact activity which contains the code that we need forhow

31
00:02:08.320 --> 00:02:11.910
activity which has an action bar at the top there.

32
00:02:12.200 --> 00:02:18.610
Whereas his example app and then we've got the OS bundle for the Android OS itself.

33
00:02:18.670 --> 00:02:24.070
As we start to use new features here we'll have to import the code for them up the top do that in a

34
00:02:24.070 --> 00:02:25.340
couple of minutes.

35
00:02:25.390 --> 00:02:27.990
Next we're creating a class.

36
00:02:28.000 --> 00:02:30.300
Now don't worry too much about the terminology here.

37
00:02:30.430 --> 00:02:37.120
But a class is essentially a chunk of code that contains variables such as the content of a text field

38
00:02:37.390 --> 00:02:41.600
and also functions or methods which contain more code.

39
00:02:41.680 --> 00:02:44.680
So the class that we're creating is called main activity.

40
00:02:44.950 --> 00:02:52.740
And this is going to be the class that controls our activity that we've created the class is public

41
00:02:53.250 --> 00:03:00.090
meaning that it can be accessed from anywhere within the app and it extends up compact activity meaning

42
00:03:00.090 --> 00:03:08.400
that it takes all the code from combat activity and allows us to use any methods or variables within

43
00:03:08.700 --> 00:03:11.030
the app combate activity class.

44
00:03:11.730 --> 00:03:18.600
And there's just one method here and that's the on create method is run when the activity is created

45
00:03:18.840 --> 00:03:23.010
or when it appears on the screen there's a few key words here.

46
00:03:23.010 --> 00:03:24.480
So just to run through what I mean.

47
00:03:24.480 --> 00:03:28.950
Again don't get too hung up on the precise meaning of these but it's good to have a rough idea of what

48
00:03:28.950 --> 00:03:31.210
they're are therefore override.

49
00:03:31.260 --> 00:03:36.390
Here is the code that we know that the uncreate method already exists.

50
00:03:36.390 --> 00:03:41.970
It's actually in app combat activity and we're just taking it further and adding some extra code to

51
00:03:41.970 --> 00:03:44.910
it here are we not creating the uncreate method.

52
00:03:44.910 --> 00:03:46.490
We're just adding to it.

53
00:03:46.620 --> 00:03:53.550
The method is defined as protected which is similar to public but slightly less public.

54
00:03:53.730 --> 00:04:00.060
So a protected method can be accessed from anywhere within our app but not from outside the app so couldn't

55
00:04:00.060 --> 00:04:03.540
be accessed by General Android OS for example.

56
00:04:03.540 --> 00:04:09.570
Then we've got this keyword void which means that this method on created doesn't return anything.

57
00:04:09.570 --> 00:04:13.870
So for example you could imagine a That simply adds two numbers together.

58
00:04:14.010 --> 00:04:20.290
When that method is called it returns the total of those two numbers.

59
00:04:20.310 --> 00:04:23.010
In contrast this method doesn't return anything.

60
00:04:23.010 --> 00:04:32.940
It just does some things when the activity is created the variable saved instance state is passed to

61
00:04:32.970 --> 00:04:34.410
the create method.

62
00:04:34.590 --> 00:04:41.610
So that is that if we want to we can write some code that depends on the state of the instance or essentially

63
00:04:41.610 --> 00:04:47.730
the device at that time that could be used for example to tell whether the user is logged in when displaying

64
00:04:47.970 --> 00:04:49.750
the appropriate activity.

65
00:04:50.160 --> 00:04:52.080
And then we've got two more methods.

66
00:04:52.320 --> 00:05:00.480
The first is super to create the super here refers to the uncreate method that we mentioned already

67
00:05:00.480 --> 00:05:02.860
exists in app combat activity.

68
00:05:03.090 --> 00:05:08.560
So we'll run the code to create the activity and then it will run our code.

69
00:05:08.730 --> 00:05:18.630
And finally we're setting the content view which just links the activity with this particular layout.

70
00:05:18.630 --> 00:05:22.500
The activity on the main dot Hexham L that we've created here.

71
00:05:23.020 --> 00:05:23.860
Phew.

72
00:05:23.910 --> 00:05:26.090
So quite a lot of high level Java there.

73
00:05:26.250 --> 00:05:29.540
As I say don't worry too much about the precise meaning of all of that.

74
00:05:29.670 --> 00:05:36.370
As long as you've got a rough idea of what's going on and that this code is setting up our activity.

75
00:05:36.680 --> 00:05:43.490
So if you remember what we were trying to do here is create our Klik function that will be called when

76
00:05:43.490 --> 00:05:46.230
our button is tapped.

77
00:05:46.340 --> 00:05:51.260
So we'll do that in much the same way that we've created our main activity class here.

78
00:05:51.410 --> 00:06:02.200
We'll start with public to create a public method and then we'll have the key word voit because our

79
00:06:02.200 --> 00:06:06.490
method is not going to return anything it's just going to do something and then

80
00:06:09.500 --> 00:06:11.800
a method is called click function.

81
00:06:12.280 --> 00:06:22.840
And because the method is called by the button and the button is a view the click function method will

82
00:06:22.840 --> 00:06:32.710
require a single variable and that variable will have a type of view with a capital V and the specific

83
00:06:32.710 --> 00:06:41.430
value of that variable will call view with a little the and because we're now working with views in

84
00:06:41.430 --> 00:06:49.800
our code we're going to need to import the class for the stuff we just click on The View that and then

85
00:06:50.250 --> 00:06:53.510
you can see if I can make that up display.

86
00:06:55.200 --> 00:07:02.990
I would go see the symbol that implies that if we press alt and then enter that will add the View class

87
00:07:03.320 --> 00:07:07.160
for us so that we can use all the view methods.

88
00:07:08.750 --> 00:07:14.030
So to run that again we've created a public method which doesn't return anything.

89
00:07:14.210 --> 00:07:23.420
It's called click function and it takes a variable called view which is a type of view.

90
00:07:23.420 --> 00:07:30.350
So whenever you create a variable in Java you have the type of variable first which usually starts with

91
00:07:30.350 --> 00:07:35.180
a capital letter and then you have the variable itself which is often the same as the type.

92
00:07:35.450 --> 00:07:39.910
But not always but it always starts with a lowercase letter.

93
00:07:40.250 --> 00:07:46.730
And this view will be the name of the UI element which calls the function which in our case is going

94
00:07:46.730 --> 00:07:53.570
to be that button and you can see that they were Stoeger a warning there but we don't have the error

95
00:07:53.570 --> 00:07:59.330
anymore because the code can see that we've created this function.

96
00:07:59.390 --> 00:07:59.920
All right.

97
00:08:01.450 --> 00:08:03.810
Then we're going to add some open curly brackets.

98
00:08:03.830 --> 00:08:09.340
And you can see Andres studio automatically closes those curly brackets and that's how we contain the

99
00:08:09.340 --> 00:08:11.630
code for our method.

100
00:08:13.040 --> 00:08:14.000
Phew.

101
00:08:14.120 --> 00:08:14.990
Stick with me.

102
00:08:15.050 --> 00:08:15.860
We're almost there.

103
00:08:15.870 --> 00:08:18.290
We just got one line of code to write.

104
00:08:18.560 --> 00:08:21.050
You might be wondering how are we going to get some interaction.

105
00:08:21.050 --> 00:08:23.250
What are we going to do when this button is pressed.

106
00:08:23.570 --> 00:08:30.560
Well with Android studio when you're running an app in the emulator there are some Lokes which we can

107
00:08:30.560 --> 00:08:38.110
use to interact with the app so you can see we've got a load of information there in our logs which

108
00:08:38.110 --> 00:08:40.050
is telling us what's going on behind the scenes.

109
00:08:40.120 --> 00:08:45.220
But we can actually add some code to this log if we want to which is a very useful thing to be able

110
00:08:45.220 --> 00:08:45.960
to do.

111
00:08:46.390 --> 00:08:51.020
So if I can just log a button click in the logs down here.

112
00:08:52.870 --> 00:08:56.650
And we can do that using capital L G for LOEG.

113
00:08:57.940 --> 00:09:00.630
And then we need a particular type of log.

114
00:09:00.640 --> 00:09:05.970
So we use dot and then I'm going to use I for info you can see we've got a few other options there if

115
00:09:06.040 --> 00:09:10.120
an error is a very common one but this isn't this isn't an error.

116
00:09:10.150 --> 00:09:12.400
In fact it tells us that everything is going well.

117
00:09:12.400 --> 00:09:14.450
So we'll use IFA for information.

118
00:09:15.520 --> 00:09:20.520
And then you can say that we need to add the log class for that so.

119
00:09:20.600 --> 00:09:23.310
And we'll add that in for us.

120
00:09:23.980 --> 00:09:30.590
And then in quites we add a tag which is just anything that we want to put there.

121
00:09:30.610 --> 00:09:33.670
Describe the type of log entry that we're making here.

122
00:09:33.850 --> 00:09:40.420
So I'll just put in info we could put anything we wanted there just a category really.

123
00:09:41.080 --> 00:09:48.060
And then the particular log so you can see and Studio 3 does this in a way that Android Studio 2 didn't.

124
00:09:48.070 --> 00:09:52.180
It adds some nice helpful scription as to what each of these variables are.

125
00:09:52.180 --> 00:09:56.220
So the tag is info and the message is whatever we want.

126
00:09:56.900 --> 00:09:59.520
So I'm going to put a button pressed.

127
00:10:00.160 --> 00:10:03.370
And then you can see what a little red squiggly line there telling us that something's wrong with our

128
00:10:03.370 --> 00:10:11.480
code and that's because at the end of a line of code in Java you always put a semi-coma you will be

129
00:10:11.480 --> 00:10:14.190
relieved to hear that we're now done.

130
00:10:14.720 --> 00:10:22.910
So we can run our app and we should now be able to see the button in the app and when we press it with

131
00:10:22.910 --> 00:10:27.460
any luck button press the message will appear in the logs here.

132
00:10:27.920 --> 00:10:33.740
There it is as I button press it and there it is awry.

133
00:10:33.750 --> 00:10:34.650
If you managed to do that.

134
00:10:34.650 --> 00:10:36.210
Congratulations.

135
00:10:36.460 --> 00:10:37.650
It as many times as you like.

136
00:10:37.650 --> 00:10:43.290
That is your first bit of Java code that you've written from scratch and running within your Android

137
00:10:43.290 --> 00:10:43.860
app.

138
00:10:44.160 --> 00:10:48.570
So it might not look hugely impressive but this is actually a really big step forward and the beginning

139
00:10:48.570 --> 00:10:52.530
of how all interactivity with your apps is going to be designed.

140
00:10:52.530 --> 00:10:53.610
Wonderful.

141
00:10:53.610 --> 00:10:59.100
Now of course we did quite a lot of stuff there so I'm going to set you a challenge to do all of this

142
00:10:59.610 --> 00:11:04.530
yourself and we're actually going to create a brand new app rather than working with the same IP every

143
00:11:04.530 --> 00:11:08.040
time we're going to create a new app which will call

144
00:11:10.620 --> 00:11:12.210
interactivity demo.

145
00:11:12.670 --> 00:11:17.820
And it's going to be very simple just going to contain a single button and you can log whatever you

146
00:11:17.820 --> 00:11:20.120
like when that button is pressed.

147
00:11:20.130 --> 00:11:22.740
So just very similar to what we've already got here.

148
00:11:22.790 --> 00:11:28.830
I want you to create the button create the app and then write the code to make that button display something

149
00:11:28.830 --> 00:11:29.670
in the logs.

150
00:11:30.740 --> 00:11:35.760
All right so this is going to be putting everything together in one go because well good luck of you

151
00:11:35.760 --> 00:11:36.230
guys.

152
00:11:41.310 --> 00:11:41.980
All right.

153
00:11:42.930 --> 00:11:43.960
I hope you enjoy that one.

154
00:11:43.960 --> 00:11:44.740
And you managed to do it.

155
00:11:44.740 --> 00:11:50.950
I'm just going to get rid of that interactivity demo and then I'm going to close my existing project

156
00:11:52.960 --> 00:11:56.400
and start a new one.

157
00:11:56.560 --> 00:12:00.670
As we said it's going to be called interactivity demo.

158
00:12:01.240 --> 00:12:09.520
I mean leave everything else the same next level that the same empty activity wonderful and main activity

159
00:12:09.520 --> 00:12:11.710
is the name for our activity.

160
00:12:12.730 --> 00:12:13.780
Great stuff.

161
00:12:14.350 --> 00:12:22.440
So then Android studio should kick into action upgraded we'll put everything together and hey we got.

162
00:12:22.560 --> 00:12:25.270
So I'm going to jump over to lay out.

163
00:12:25.270 --> 00:12:30.060
First of all we nearly that good stuff.

164
00:12:30.130 --> 00:12:36.200
And then we'll get rid of our text view and add in our button

165
00:12:40.640 --> 00:12:41.370
wonderful.

166
00:12:41.390 --> 00:12:47.140
I'm not too worried about lay out but I'll just add the margins in there.

167
00:12:47.700 --> 00:12:48.260
OK.

168
00:12:48.630 --> 00:12:53.190
And I'm going to leave the on click method empty for the moment just to show you another way round of

169
00:12:53.190 --> 00:12:54.780
doing it if you want to write it in that.

170
00:12:54.810 --> 00:12:55.890
You're very welcome to.

171
00:12:55.980 --> 00:13:04.220
But if we create the code first then it will auto fill that box for us.

172
00:13:04.280 --> 00:13:05.870
So let's create our method

173
00:13:08.600 --> 00:13:13.150
it's going to be a public method it's not going to return anything.

174
00:13:13.350 --> 00:13:21.250
So it's void and as before I'll call it click function.

175
00:13:21.360 --> 00:13:29.640
You might recall it something more expressive feel free and it takes a variable of a type view which

176
00:13:29.640 --> 00:13:39.340
will require us to add the view class and the variable name is going to be viewed with a little

177
00:13:43.330 --> 00:13:51.380
every game and now that we've created that method we can actually go back and if we now click on the

178
00:13:51.440 --> 00:13:56.080
dropdown and the on click method you can see it has that function for us.

179
00:13:56.150 --> 00:14:02.200
So whichever way makes more sense to you really to add it there or write the code first and then at

180
00:14:02.200 --> 00:14:02.280
it

181
00:14:05.720 --> 00:14:12.110
and hopefully you remember we LOEG with a capital L and we're going to use an info log.

182
00:14:15.200 --> 00:14:21.110
And then we can set the tag to in.

183
00:14:21.850 --> 00:14:28.520
And this time just for a bit of variety I'll use it worked as the message.

184
00:14:28.990 --> 00:14:34.350
And of course we don't forget our semi-colon at the end.

185
00:14:34.710 --> 00:14:36.340
Make sure we've got all of our classes.

186
00:14:36.360 --> 00:14:37.900
Yep there they go.

187
00:14:38.280 --> 00:14:40.980
All right let's give it a go.

188
00:14:41.230 --> 00:14:44.910
So because this is a new app we need to select deployment target.

189
00:14:44.910 --> 00:14:47.480
We're going to stick to the same device.

190
00:14:47.550 --> 00:14:52.100
And now let's wait for hours to compile and display.

191
00:14:52.310 --> 00:14:54.830
In fact to get the logs up and running

192
00:14:58.380 --> 00:14:59.480
Yay.

193
00:15:00.150 --> 00:15:03.060
So there's a button that's tappet.

194
00:15:03.120 --> 00:15:06.810
And indeed it worked fantastic.

195
00:15:07.200 --> 00:15:12.570
So I hope you have a shiver segment going down your back as you managed to make that work.

196
00:15:12.570 --> 00:15:13.530
I certainly did.

197
00:15:13.530 --> 00:15:19.230
It's really not an overstatement to say that all apps are built on this basic interactivity.

198
00:15:19.230 --> 00:15:21.790
Having said that it's not a great level of interactivity.

199
00:15:21.810 --> 00:15:24.010
All the user can do is press a button.

200
00:15:24.030 --> 00:15:28.440
So what we might want to do is get a bit more information from the user so we might want to have a text

201
00:15:28.440 --> 00:15:34.770
field for example where the user can enter and text and then something is done with that using the button.

202
00:15:34.770 --> 00:15:37.680
And that's what we're going to learn how to do in the next video.
