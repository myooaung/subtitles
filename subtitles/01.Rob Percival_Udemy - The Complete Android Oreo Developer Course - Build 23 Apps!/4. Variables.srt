1
00:00:00,900 --> 00:00:06,700
Now we're going to look at variables and how we create them and how we can work with them in Java.

2
00:00:06,810 --> 00:00:08,570
And indeed what a variable is.

3
00:00:08,980 --> 00:00:14,390
So for each new lecture here I'm going to create a new hello world template.

4
00:00:14,430 --> 00:00:20,820
So just by tapping try that and then get rid of my previous one and I'm going to save it straight away

5
00:00:21,180 --> 00:00:23,140
so that it's clear what we're working on.

6
00:00:23,400 --> 00:00:25,440
I'll call this variable's

7
00:00:30,510 --> 00:00:31,110
that we get.

8
00:00:31,180 --> 00:00:38,270
So you can see that it's already saving all of our programs that we've made and then really all we're

9
00:00:38,270 --> 00:00:45,250
going to change for most of the next few lectures is the code inside the main method.

10
00:00:45,710 --> 00:00:50,360
So if you've worked with different languages before you may be used to defining a variable with something

11
00:00:50,360 --> 00:00:54,440
like the VAR command like you do in javascript for example.

12
00:00:54,710 --> 00:00:57,730
But in Java it works differently.

13
00:00:57,740 --> 00:01:05,810
Java is a strong typed language which means that every variable that you create has to be of a certain

14
00:01:05,810 --> 00:01:10,770
type and once that variable has been created you can change its type.

15
00:01:10,790 --> 00:01:15,050
So let's start with a fairly basic type an integer.

16
00:01:15,370 --> 00:01:19,350
So it is short for integer which is a whole number.

17
00:01:19,880 --> 00:01:25,760
So if I wanted to create an integer I just type it and then the name of the variable so I might call

18
00:01:25,760 --> 00:01:27,640
it age for example.

19
00:01:27,980 --> 00:01:31,540
And then the initial value of that variable.

20
00:01:31,550 --> 00:01:37,920
So for example 34 and then semi-colon at the end of the line.

21
00:01:37,940 --> 00:01:45,550
So this creates an integer or a whole number which has the name of age and the value 34.

22
00:01:46,100 --> 00:01:50,660
And from there just in case you're slightly unclear on what a variable is it should be fairly straightforward.

23
00:01:50,660 --> 00:01:54,360
A variable is something like this that we can change the value of.

24
00:01:54,560 --> 00:01:59,260
So that this might just keep track of the age of our current use for example.

25
00:01:59,660 --> 00:02:01,330
And that's all a variable is.

26
00:02:01,460 --> 00:02:07,100
We did use them a couple of times in the previous section when we created for example the added text

27
00:02:07,370 --> 00:02:11,050
to refer to the text field that we wanted to get the value of.

28
00:02:11,210 --> 00:02:13,720
So we have used variables already.

29
00:02:13,730 --> 00:02:16,050
So here's a quick challenge for you straight away.

30
00:02:16,190 --> 00:02:21,430
Can you create an integer called favorite number.

31
00:02:21,520 --> 00:02:25,680
Set it to your favorite number and then output it to the console.

32
00:02:26,560 --> 00:02:27,490
Very simple.

33
00:02:27,490 --> 00:02:34,410
Good luck.

34
00:02:34,420 --> 00:02:34,830
All right.

35
00:02:34,830 --> 00:02:36,460
I hope you manage that.

36
00:02:36,670 --> 00:02:43,660
You should have just used it to create your integer and then favorite number.

37
00:02:43,660 --> 00:02:45,490
You may or may not have spelled favorite like that.

38
00:02:45,490 --> 00:02:52,480
I won't take marks off if you didn't put you in but favorite number with a small F and A capital and

39
00:02:52,740 --> 00:02:58,870
would be generally we would describe the variable because we usually use a small first letter and then

40
00:02:58,870 --> 00:03:01,180
a capital letter for every word after that.

41
00:03:01,180 --> 00:03:03,790
That just makes it nice and easy to read.

42
00:03:03,830 --> 00:03:08,720
So a favorite number of my favorite number is 7.

43
00:03:08,870 --> 00:03:11,370
And again take marks if you chose a number other than seven.

44
00:03:11,370 --> 00:03:13,060
Well then of course you are wrong.

45
00:03:13,680 --> 00:03:18,090
And then we just want to display it in the log so we use the same command that we saw in the previous

46
00:03:18,090 --> 00:03:20,500
video system.

47
00:03:21,940 --> 00:03:26,030
Dot out dot print.

48
00:03:27,040 --> 00:03:29,800
And then we just pop it straight in.

49
00:03:30,670 --> 00:03:31,520
Favorite number.

50
00:03:32,420 --> 00:03:33,440
There we go.

51
00:03:34,160 --> 00:03:38,570
So let's start that and there it is.

52
00:03:38,580 --> 00:03:43,920
So that's our first example of creating a variable and displaying it.

53
00:03:43,920 --> 00:03:48,650
Now what if our favorite number happened to be seven point five.

54
00:03:48,840 --> 00:03:51,420
The reason your favorite number can be a decimal.

55
00:03:51,420 --> 00:03:54,490
Let's try running that and see what happens.

56
00:03:54,760 --> 00:03:59,340
We've got an era possible loss of precision.

57
00:03:59,340 --> 00:04:00,400
So what's going on there.

58
00:04:00,510 --> 00:04:01,470
Well it's fairly straightforward.

59
00:04:01,470 --> 00:04:06,270
I think we've created our favorite number as an integer which means a whole number and then we've set

60
00:04:06,270 --> 00:04:08,890
it to seven point five which is not a whole number.

61
00:04:09,180 --> 00:04:15,930
So we need to change the variable type to one that can accept a non whole number and the one that I

62
00:04:15,930 --> 00:04:24,960
normally use is a double so named because it takes up double the memory of a standard floating point

63
00:04:24,990 --> 00:04:29,650
number and a floating point number is just a decimal.

64
00:04:29,650 --> 00:04:33,600
So a number that can be either a whole number or a decimal.

65
00:04:33,600 --> 00:04:37,280
So when you want to use decimals I'd recommend using double like that.

66
00:04:38,100 --> 00:04:40,910
And then let's just take a look.

67
00:04:41,050 --> 00:04:42,890
Now that displays seven point five.

68
00:04:43,120 --> 00:04:44,250
No problem at all.

69
00:04:44,650 --> 00:04:50,560
So those are the two Meric variable types that you'll probably want to use either and if you want something

70
00:04:50,560 --> 00:04:51,210
to be an integer.

71
00:04:51,220 --> 00:04:57,640
So a number of users for example h that kind of thing and double if you think that your number might

72
00:04:57,640 --> 00:05:00,040
end up being a decimal.

73
00:05:00,160 --> 00:05:05,590
So something like a price or temperature before we go on to look at other variable types.

74
00:05:05,590 --> 00:05:11,240
I just want to quickly turn your attention to a great Web site learn Java on line dot org.

75
00:05:11,290 --> 00:05:15,880
You'll probably end up here if you do some googling and you want to find out a bit more information

76
00:05:15,880 --> 00:05:16,980
about something.

77
00:05:17,170 --> 00:05:22,290
But this particular page shows us what is known as the primitives in Java.

78
00:05:22,510 --> 00:05:29,980
So they are a set of you could say basic variable types from which other variable types are built.

79
00:05:29,980 --> 00:05:37,560
So you can see the ones that we've looked at already are int and double the others just to make you

80
00:05:37,560 --> 00:05:38,580
aware of them.

81
00:05:38,580 --> 00:05:45,630
We don't really use very much but we have a few other integer types so that we've got bite short which

82
00:05:45,630 --> 00:05:46,970
are much smaller.

83
00:05:46,980 --> 00:05:49,870
They only take out one byte or two bytes.

84
00:05:49,870 --> 00:05:55,680
And there's an integer which takes up 4 bytes and then long which takes up 8 bytes so the number of

85
00:05:55,680 --> 00:06:00,090
bytes here refers to how big the number can get.

86
00:06:00,900 --> 00:06:03,340
Without causing an error in the program.

87
00:06:03,340 --> 00:06:15,050
So if for example I want to check how big an int can be I would google something like it maximum size

88
00:06:15,280 --> 00:06:20,820
Well maximum value let's say in Java something like that.

89
00:06:21,280 --> 00:06:23,320
And I like to look at that third result there.

90
00:06:25,500 --> 00:06:28,510
So in fact we've got the values for all of them there.

91
00:06:28,690 --> 00:06:36,450
So the basic byte can be between minus 128 and 6:59 which is probably a bit small for most cases a short

92
00:06:36,450 --> 00:06:44,320
integer goes from minus 32000 to 32000 which again is probably going to be OK in most cases but if your

93
00:06:44,320 --> 00:06:52,060
a number of users gets higher and higher then you might well exceed that whereas for it it goes down

94
00:06:52,060 --> 00:06:58,510
to minus 2 to the 31 which is about minus two billion and up to about 2 billion.

95
00:06:58,510 --> 00:07:03,080
So that's probably going to be big enough for most families that you're dealing with in your programs.

96
00:07:03,190 --> 00:07:08,250
But if it's not you can use a long which goes up to an even higher number.

97
00:07:08,350 --> 00:07:11,170
So that's the difference between those types.

98
00:07:11,170 --> 00:07:15,670
And then we've got two decimal numbers so float and double.

99
00:07:15,670 --> 00:07:21,130
I'd recommend generally going for double and then we've got Charle which is just a character.

100
00:07:21,160 --> 00:07:27,070
So any ABC etc. and then Boullion which is the next one that we're going to look at here which is just

101
00:07:27,070 --> 00:07:28,570
true or false.

102
00:07:28,990 --> 00:07:34,610
So these are the primitive types and all other types are made up from those.

103
00:07:34,640 --> 00:07:42,160
So let's jump back and have a look at our billion and I'm just going to get rid of that.

104
00:07:42,200 --> 00:07:53,440
So to create a billion we just type Boullion like that and then we might have something like am I male

105
00:07:54,880 --> 00:07:57,380
and for me that would be true.

106
00:08:00,610 --> 00:08:05,310
If you're interested the word Boullion is named after George Boole.

107
00:08:05,500 --> 00:08:11,950
There is an English mathematician who did a lot of work in logic and so true or false is obviously fairly

108
00:08:11,950 --> 00:08:16,570
central to that and that's where the word Boullion comes from.

109
00:08:16,570 --> 00:08:23,390
So in your programs you could use a Boolean for is logged in or is active user or something like that.

110
00:08:23,590 --> 00:08:24,990
Or dead or alive or dead.

111
00:08:25,000 --> 00:08:28,110
For our ghosts example from the previous video.

112
00:08:28,630 --> 00:08:33,880
So very quick challenge once again create a Boolean for something that you could imagine actually using

113
00:08:33,880 --> 00:08:37,860
a Boolean for in a program and then display it in the logs.

114
00:08:38,090 --> 00:08:38,420
Durford

115
00:08:47,060 --> 00:08:49,970
all right nice and easy so.

116
00:08:50,020 --> 00:09:00,840
Just like boolean and then I'm going to call it user likes pizza and we'll set that to be true.

117
00:09:02,380 --> 00:09:05,990
It is true for this particular use app and then we'll just pop it in the console.

118
00:09:06,200 --> 00:09:19,710
So system and then output methods and print line use user likes pizza.

119
00:09:20,140 --> 00:09:26,450
So I mean go and start and we should get tree that we get.

120
00:09:26,860 --> 00:09:28,350
So that's how we use booleans.

121
00:09:28,360 --> 00:09:30,610
So so far we've got billions and numbers.

122
00:09:30,610 --> 00:09:36,040
The final variable type that we're going to look at is strings which we've already seen before up here.

123
00:09:36,490 --> 00:09:39,700
So a string is just a combination of characters really.

124
00:09:39,940 --> 00:09:47,120
It's a very common variable type but it's not a primitive because it's made up of Charles characters.

125
00:09:48,640 --> 00:09:50,040
So because it's not a primitive.

126
00:09:50,050 --> 00:09:52,990
Instead of using a lowercase definition.

127
00:09:52,990 --> 00:09:59,430
So before we use it is lowercase b and we've used lower cases for all our definitions so far.

128
00:09:59,770 --> 00:10:08,100
We use a capital letter because it's not a primitive it's actually a class and classes are generally

129
00:10:08,100 --> 00:10:10,490
defined with capital letters at the start.

130
00:10:10,490 --> 00:10:12,250
So just like hello world there.

131
00:10:12,740 --> 00:10:19,590
So string my name for example is Rob of course.

132
00:10:19,830 --> 00:10:22,410
I think we've seen before that we don't type it like that.

133
00:10:23,670 --> 00:10:27,720
We need to put quotes round a string whenever we use it.

134
00:10:28,150 --> 00:10:29,820
Say my name is Rob.

135
00:10:30,870 --> 00:10:32,990
And then let's print that to the console.

136
00:10:33,120 --> 00:10:36,980
But this time we'll do something slightly different.

137
00:10:37,350 --> 00:10:46,710
Dot dot dot printer line and then we could use.

138
00:10:46,760 --> 00:10:51,390
My name is in quites than I want to put a space at the end of that.

139
00:10:51,500 --> 00:10:56,060
And then we use plus to concatenate strings.

140
00:10:56,290 --> 00:10:58,600
That means put them together basically.

141
00:10:58,670 --> 00:11:05,980
So my name is and then we have my name and we might want to put a full stop on the end as well.

142
00:11:07,010 --> 00:11:11,790
I would have let's just run that every day.

143
00:11:11,840 --> 00:11:13,560
My name is Rob.

144
00:11:13,700 --> 00:11:14,780
Fantastic.

145
00:11:15,290 --> 00:11:16,940
So another quick challenge for you.

146
00:11:17,270 --> 00:11:26,650
I want you to save your name and your age as variables and then output them to the console saying my

147
00:11:26,650 --> 00:11:32,380
name is whatever your name is and I am your number of years years old.

148
00:11:32,380 --> 00:11:33,030
Good luck.

149
00:11:40,350 --> 00:11:40,900
All right.

150
00:11:40,970 --> 00:11:42,270
I hope you manage that.

151
00:11:42,900 --> 00:11:50,620
So let's create a string again we'll just call it my name robe.

152
00:11:50,670 --> 00:11:51,800
Same as before.

153
00:11:52,170 --> 00:11:57,780
And then we'll create an integer called H which is 34.

154
00:11:58,770 --> 00:12:01,360
And then we just put that to the console.

155
00:12:01,580 --> 00:12:06,820
So our system took out top print helène.

156
00:12:07,710 --> 00:12:08,730
My name is

157
00:12:11,640 --> 00:12:13,220
what's my name

158
00:12:16,760 --> 00:12:23,240
and I am what all those spaces in H.

159
00:12:26,170 --> 00:12:32,380
Is old closed the brackets semi-colon.

160
00:12:32,400 --> 00:12:32,680
All right.

161
00:12:32,680 --> 00:12:33,420
Let's take a look.

162
00:12:35,460 --> 00:12:36,870
Just run that fantastic.

163
00:12:36,870 --> 00:12:39,490
My name is Rob and I am 34 years old.

164
00:12:39,690 --> 00:12:46,290
Something that some of you may have picked up on is that this age is not a string it's an integer and

165
00:12:46,290 --> 00:12:52,350
yet the system has allowed us to bring it into this string without any problems.

166
00:12:52,350 --> 00:12:59,430
That works because it's a primitive primitive variables can be put into strings like this without having

167
00:12:59,430 --> 00:13:04,590
to convert them to strings whereas other variable types generally will need a conversion to a string

168
00:13:04,830 --> 00:13:09,210
before you can display it or bring it into a string like we have done there.

169
00:13:10,540 --> 00:13:14,930
OK so now we're familiar with the main variable types that we're going to be using.

170
00:13:14,930 --> 00:13:18,610
So integers doubles strings and booleans.

171
00:13:18,830 --> 00:13:23,750
Let's just see a few things that we can do with them rather than just set their value and display them

172
00:13:23,750 --> 00:13:25,190
in the console.

173
00:13:25,190 --> 00:13:33,880
So let's work with numbers first of all let's get rid of this and create a double.

174
00:13:34,200 --> 00:13:35,080
And I'm just going to call it.

175
00:13:35,130 --> 00:13:45,260
I for the moment and will set it to six point seven and then we'll have another double beat which will

176
00:13:45,260 --> 00:13:53,400
be three point two so I can do all sorts of manipulation with these numbers really straightforwardly.

177
00:13:53,420 --> 00:14:03,410
So let's put it straight in the console's system out towards print line and then let's say we want to

178
00:14:03,410 --> 00:14:06,110
multiply those two together.

179
00:14:06,110 --> 00:14:10,150
We use the asterisks so that shift 8 for me.

180
00:14:10,210 --> 00:14:15,250
So I start a means eight times B and that will give us whatever six point seven times three point two

181
00:14:15,270 --> 00:14:18,440
is there we get we can add them together of course.

182
00:14:21,340 --> 00:14:29,850
Similarly say nine point nine and we could subtract seven point three from that

183
00:14:32,840 --> 00:14:33,510
as well.

184
00:14:33,550 --> 00:14:35,270
We'll work that out for us.

185
00:14:35,270 --> 00:14:37,270
Now here we get an interesting result.

186
00:14:37,310 --> 00:14:42,890
It's not quite 2.6 it's 226 loads of zeros and then a 5.

187
00:14:42,890 --> 00:14:47,530
Now this is because a double is not a completely accurate variable type.

188
00:14:47,540 --> 00:14:49,270
I'm not going to go into precisely why.

189
00:14:49,280 --> 00:14:55,730
But essentially this is a binary So a set of zeros and ones which is an approximation of the decimal

190
00:14:55,790 --> 00:14:56,930
number.

191
00:14:56,930 --> 00:15:01,460
Now the reason that is is essentially because it's much faster for the computers to work with.

192
00:15:01,460 --> 00:15:07,010
So if you round it to one or two decimal places to display to the user then it's always going to be

193
00:15:07,010 --> 00:15:12,740
accurate enough for you but you should be aware that if you're working with doubles and then you display

194
00:15:12,740 --> 00:15:17,900
them to the user at some point or you use them in some way you should bear in mind that you should round

195
00:15:17,900 --> 00:15:21,070
them to the number of decimal places that you need.

196
00:15:22,700 --> 00:15:25,120
So that's working with numbers.

197
00:15:25,220 --> 00:15:28,330
There are of course a bunch of things you can do with strings as well.

198
00:15:28,370 --> 00:15:32,370
I'm just going to show you one for now but we'll see a lot more throughout the course.

199
00:15:33,200 --> 00:15:36,770
And the one I'm going to show you is how to get the length of the strings or the number of characters

200
00:15:36,770 --> 00:15:37,930
in a string.

201
00:15:38,390 --> 00:15:47,590
So let's create a string which I'll just call my string with a bunch of random characters in it.

202
00:15:47,590 --> 00:15:48,000
There you go.

203
00:15:48,020 --> 00:15:51,890
If I wanted to get the length of that string and I would

204
00:15:55,700 --> 00:16:10,890
put it in the console's print line I would use my string dot length and then I would use a pair of parentheses.

205
00:16:11,080 --> 00:16:17,950
That's because length here is a method and whenever we call a method we were instructed to do something

206
00:16:18,400 --> 00:16:23,440
we have a pair of parentheses which sometimes will contain a variable that we want to pass to that particular

207
00:16:23,440 --> 00:16:23,970
method.

208
00:16:24,100 --> 00:16:26,280
But in this case we don't want to do that.

209
00:16:26,290 --> 00:16:31,480
We just want my string Daut length and that will tell us the length of my string

210
00:16:34,270 --> 00:16:37,770
so check that we get 16 characters in my string.

211
00:16:39,530 --> 00:16:39,950
All right.

212
00:16:39,950 --> 00:16:45,050
So that's how you create and manipulate variables in Java.

213
00:16:45,050 --> 00:16:49,170
Of course we need a final challenge to put all of that together.

214
00:16:49,790 --> 00:16:55,130
So fairly straightforwardly I want you to create two strings which will be equal to your first name

215
00:16:55,190 --> 00:16:56,610
and your last name.

216
00:16:56,990 --> 00:17:04,190
And then I want you to create an integer which sums the number of characters in your first name and

217
00:17:04,190 --> 00:17:10,430
your second name and then a line that displays in the can so the number of characters in my full name

218
00:17:10,520 --> 00:17:15,860
is and then that final value should be fairly straightforward with any luck.

219
00:17:16,230 --> 00:17:16,950
Go for it.

220
00:17:23,320 --> 00:17:24,860
All right I managed it.

221
00:17:26,380 --> 00:17:32,400
So in my case I just want to have a string and I'll call it first name.

222
00:17:34,480 --> 00:17:35,670
Is equal to.

223
00:17:36,280 --> 00:17:38,140
And then we'll have another string.

224
00:17:38,350 --> 00:17:41,560
Second name is equal to Percival

225
00:17:44,270 --> 00:17:53,210
and then we'll create an integer which I'll call length and that's going to be equal to a first name

226
00:17:54,540 --> 00:18:07,820
dot length plus second name dot length because you want to add the a c together and then finally we

227
00:18:07,820 --> 00:18:14,610
want to output the result say system start out of print line.

228
00:18:17,510 --> 00:18:32,120
The number of characters in my full name is and then will concatenate that with the variable length.

229
00:18:32,500 --> 00:18:35,720
That should do it let's take a look.

230
00:18:37,010 --> 00:18:38,060
Fantastic.

231
00:18:38,330 --> 00:18:41,800
Which is in my full name is brilliant.

232
00:18:41,960 --> 00:18:43,780
I hope you manage that in the next video.

233
00:18:43,790 --> 00:18:48,370
We'll go on to another important variable type which is the type of array.

234
00:18:48,470 --> 00:18:49,250
See you then.
