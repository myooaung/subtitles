1
00:00:00,450 --> 00:00:04,520
All right in this lecture we're going to be diving into functions and functions are so great in Kotla

2
00:00:04,520 --> 00:00:09,450
And I think they're just a dream to work with makes it very straightforward about what's going on.

3
00:00:09,630 --> 00:00:14,940
So to create a function and Kollin all you have to do is type fun space give your function a name like

4
00:00:14,940 --> 00:00:18,060
I'll make one that just says let's call hello.

5
00:00:18,150 --> 00:00:20,590
And the idea is this is going to print out Hello world.

6
00:00:20,790 --> 00:00:25,100
So you have to do some parentheses here eventually this is where some parameters are going to go.

7
00:00:25,110 --> 00:00:27,510
But right now those two function with no parameters.

8
00:00:27,630 --> 00:00:29,360
This function does not return anything.

9
00:00:29,370 --> 00:00:33,950
And then anything that's inside the curly brackets gets run when the function is called.

10
00:00:34,020 --> 00:00:42,090
So for example inside of here I'm going to say print line and I'm going to print out Hello world and

11
00:00:42,090 --> 00:00:45,590
now I can call this function just like this.

12
00:00:45,600 --> 00:00:49,830
Hello I could call it multiple times if I'd like to and each time that I call it it's going to run this

13
00:00:49,830 --> 00:00:50,130
code.

14
00:00:50,130 --> 00:00:54,390
So we should see Hello World printed out three times.

15
00:00:54,390 --> 00:00:55,040
Look at that.

16
00:00:55,050 --> 00:00:56,720
That's exactly what we get.

17
00:00:56,730 --> 00:01:01,600
Now let's say we wanted our function to return some information.

18
00:01:01,680 --> 00:01:07,080
Well what we do is we put a colon after the parentheses where the parameters are going to go and then

19
00:01:07,080 --> 00:01:09,520
we say what type is going to be returned.

20
00:01:09,530 --> 00:01:14,470
So in this case if I wanted to return a string I can do that.

21
00:01:14,760 --> 00:01:19,780
So rather than saying print line hello world I am now going to simply return.

22
00:01:19,910 --> 00:01:20,520
Hello world.

23
00:01:20,520 --> 00:01:21,660
Just returned space.

24
00:01:21,660 --> 00:01:23,500
That's how you return something.

25
00:01:23,500 --> 00:01:30,510
So now what I'm going to do is I'm going to print line whatever hello world or excuse me hello function

26
00:01:30,810 --> 00:01:31,340
gives back.

27
00:01:31,340 --> 00:01:36,470
It should be kicking back a string so let's go ahead and run this and look at that.

28
00:01:36,480 --> 00:01:37,820
It prints out Hello world.

29
00:01:37,840 --> 00:01:38,560
That worked great.

30
00:01:38,560 --> 00:01:46,540
Now if you want to pass parameters into a function you can do that by specifying specifying a name for

31
00:01:46,540 --> 00:01:47,300
your parameter.

32
00:01:47,320 --> 00:01:52,140
So I might say something like If I want to say hello to someone's call say name.

33
00:01:52,180 --> 00:01:56,130
This is going to be of type string.

34
00:01:56,210 --> 00:02:02,290
If I can spell string correctly and now I can say something like hello and I'm going to do some string

35
00:02:02,290 --> 00:02:08,680
interpellation here and pass in name so that then means here inside of this function if I'm going to

36
00:02:09,190 --> 00:02:14,890
spit back some information or if I have a function that requires a parameter that I need to put something

37
00:02:14,890 --> 00:02:15,430
here.

38
00:02:15,560 --> 00:02:18,040
So maybe I'll put like Nick right there.

39
00:02:18,060 --> 00:02:21,940
So now when I read this code it should say Hello Nick and boom.

40
00:02:21,940 --> 00:02:23,200
Look at that it does.

41
00:02:23,230 --> 00:02:27,610
Now one cool thing that you can do is you can set sort of default parameters so that if someone doesn't

42
00:02:27,610 --> 00:02:33,020
provide a value you can still move forward so I can say no name calling is going to be a string and

43
00:02:33,040 --> 00:02:35,280
I could set this equal to.

44
00:02:35,500 --> 00:02:44,200
Maybe like Rick by default so that someone could still call and tell AJ is freaking out on me here but

45
00:02:44,440 --> 00:02:49,630
I can still call this function without passing a parameter now and what it will do by default is just

46
00:02:49,630 --> 00:02:55,060
say hey if no one gave me a parameter I'll just use Rick as the default for this.

47
00:02:55,060 --> 00:03:00,030
And if you want to accept multiple parameters you can do that you just say comma and then you know let's

48
00:03:00,040 --> 00:03:07,520
say if you wanted to take another premiÃ¨re like punk you ation if that's how you spell it.

49
00:03:08,030 --> 00:03:14,900
Right so if someone wants to say hello with like an exclamation point or something like that you know

50
00:03:14,900 --> 00:03:20,140
then we'll say all right then we're going to provide dollar sign punctuation.

51
00:03:20,600 --> 00:03:28,340
So we would want to specify here that we are going to first give a name like Nick and then we're also

52
00:03:28,340 --> 00:03:33,130
going to give Let's to a question mark just to be fun here.

53
00:03:33,260 --> 00:03:35,400
So say hello Nick.

54
00:03:35,570 --> 00:03:37,520
That's what this function should give us and look at that.

55
00:03:37,520 --> 00:03:39,070
Hello Nick.

56
00:03:39,110 --> 00:03:45,080
Now something cool with functions that you can do in KOPPLIN This is the sort of shorthand way of making

57
00:03:45,080 --> 00:03:51,520
a function so I'd say I have kind of you know a dumb function that adds to numbers and I say fun.

58
00:03:51,740 --> 00:03:58,650
Add numbers and it takes two parameters so it takes like number one which is an ant.

59
00:03:58,700 --> 00:04:02,430
And it takes nothing to write which is an ant.

60
00:04:02,600 --> 00:04:07,820
And I say you know what this thing at the end of the day should be returning an int value and I'll do

61
00:04:07,820 --> 00:04:18,290
my curly brackets here and then I'll say you know return whatever number one plus two is just like this

62
00:04:18,330 --> 00:04:18,670
like.

63
00:04:18,770 --> 00:04:20,480
That's a valid function right.

64
00:04:20,480 --> 00:04:25,940
Well you can also do this same function but in kind of a shorthand way and the shorthand way to do this

65
00:04:25,940 --> 00:04:30,200
is you just say fun add numbers.

66
00:04:30,290 --> 00:04:36,290
So I'm going to do the same name as this one in fact I'm just going to copy everything up to the parentheses

67
00:04:36,290 --> 00:04:36,470
here.

68
00:04:36,470 --> 00:04:41,000
So I'm just going to copy this sort of the exact same function and what we're going to do this time

69
00:04:41,000 --> 00:04:43,860
is instead we're just going to say this is equal to.

70
00:04:44,210 --> 00:04:48,980
And then we're just going to say Nahm one plus two.

71
00:04:49,280 --> 00:04:52,790
And so let me go ahead and comment this out.

72
00:04:52,790 --> 00:04:59,270
Also that's a fun little hot key if you select all the text and then hit command and then the forward

73
00:04:59,270 --> 00:04:59,900
slash.

74
00:04:59,990 --> 00:05:06,110
That's going to allow you to comment out stuff quickly but basically this is the quick hand way of saying

75
00:05:06,320 --> 00:05:08,890
I'm going to return whatever number one plus numb to it.

76
00:05:08,890 --> 00:05:14,150
So call it a smart enough one to determine OK number one plus two.

77
00:05:14,150 --> 00:05:17,630
These are the name of the parameters that were just given and they're both.

78
00:05:17,650 --> 00:05:21,440
And so they probably want to return and end in you know so it does that.

79
00:05:21,460 --> 00:05:25,640
Returns it and it doesn't make us specify that this thing should kickback in it.

80
00:05:25,640 --> 00:05:31,370
I mean we could if we wanted to say that this is going to return an int but it's a little bit over kill

81
00:05:31,370 --> 00:05:36,620
here because in this case Kotla knows that this is a totally fine way to do this.

82
00:05:36,620 --> 00:05:39,200
So my challenge for you.

83
00:05:39,200 --> 00:05:40,400
Quite simple.

84
00:05:40,550 --> 00:05:55,380
Make a function that takes a dog's name and age and prints a sentence about it.

85
00:05:56,090 --> 00:06:00,130
Man my spelling is horrible sentence.

86
00:06:00,950 --> 00:06:01,590
Who cares.

87
00:06:01,640 --> 00:06:02,160
OK.

88
00:06:02,180 --> 00:06:03,490
So go ahead.

89
00:06:03,490 --> 00:06:05,860
Hit pause on the video and do this now.

90
00:06:08,110 --> 00:06:10,970
It's embarrassing how bad I am at spelling here.

91
00:06:11,110 --> 00:06:16,090
Basically all you had to do was make some function that gives back prints out some information about

92
00:06:16,110 --> 00:06:19,970
dogs so I might call this one like dog info.

93
00:06:20,020 --> 00:06:27,520
It's going to take in my case name as a string and it's going to take age as an ant and it's not going

94
00:06:27,520 --> 00:06:33,130
to return anything because we're printing here and I'm going to have it do a print line where it says

95
00:06:33,130 --> 00:06:43,750
something like Fido is seven years old and instead of saying Fido that's a dollar sign name instead

96
00:06:43,750 --> 00:06:44,680
of doing seven.

97
00:06:44,680 --> 00:06:46,520
That's where I'll say dollar sign.

98
00:06:46,540 --> 00:06:47,460
H.

99
00:06:48,550 --> 00:06:49,240
That's it.

100
00:06:49,240 --> 00:06:53,830
So we are flying through and the next one we're going to kind of step things up a bit by talking about

101
00:06:53,830 --> 00:06:56,500
classes and then we're going to dive into nullable.

102
00:06:56,500 --> 00:06:59,230
So some good information come in here in the next one.
