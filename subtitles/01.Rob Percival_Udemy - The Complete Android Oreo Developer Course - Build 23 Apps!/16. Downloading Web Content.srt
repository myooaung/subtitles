1
00:00:00,670 --> 00:00:05,200
Hello and welcome to the lecture where we're going to learn how to download some web content so we've

2
00:00:05,200 --> 00:00:07,710
been building up to this you understand what the try catch is.

3
00:00:07,700 --> 00:00:09,430
Now we're ready to move forward.

4
00:00:09,430 --> 00:00:14,110
So let's go ahead and start a new project so that we'll have a space to play around with.

5
00:00:14,260 --> 00:00:20,260
And I'm just going to go ahead and call this project downloading better spell downloading correctly

6
00:00:20,770 --> 00:00:23,050
downloading web content.

7
00:00:23,070 --> 00:00:27,050
You can go ahead and use defaults for everything here.

8
00:00:27,040 --> 00:00:32,260
And so like I said the big thing is we want to be able to learn how to download some web content so

9
00:00:32,260 --> 00:00:36,780
I have a browser here with a Web site this happens to be mine.

10
00:00:36,880 --> 00:00:43,000
And on any Web site it doesn't matter which one it is and in most browsers if you do a two finger or

11
00:00:43,000 --> 00:00:45,920
right click you can get to inspect element.

12
00:00:46,030 --> 00:00:50,460
I think it's easier to get to on Chrome on safari here I think you have to enable something.

13
00:00:50,680 --> 00:00:52,160
Firefox should be easy too.

14
00:00:52,180 --> 00:00:59,320
But basically there's this huge I mean all web sites are made from this thing called H.C. Amelle CSSA

15
00:00:59,320 --> 00:01:04,870
javascript but it's just this huge big chunk of text that's here and so this is what we're going to

16
00:01:04,870 --> 00:01:11,500
try and download the mail for some different Web sites and then from there we'll move forward with other

17
00:01:11,710 --> 00:01:16,770
things like how to access web services from like Google Maps Facebook Twitter right.

18
00:01:16,780 --> 00:01:20,980
Like anything where we can connect with that if it has an API We'll dive into that later.

19
00:01:21,130 --> 00:01:25,290
That's sort of the big goal of what we've got going on here.

20
00:01:25,960 --> 00:01:30,450
So with that let's go ahead and move back to android studio here.

21
00:01:31,030 --> 00:01:33,760
Thank you for getting this project all up and running.

22
00:01:33,760 --> 00:01:38,950
So in order to download some information we are going to do it in the background.

23
00:01:38,970 --> 00:01:41,910
When I say the background we are going to do it on a separate thread.

24
00:01:42,070 --> 00:01:44,340
And you're saying well what's a separate thread.

25
00:01:44,350 --> 00:01:49,360
I don't even know these thread things are well just think about when an app is running on an Android

26
00:01:49,360 --> 00:01:53,760
device there's multiple threads going on and the threads are where work happens.

27
00:01:53,770 --> 00:01:58,960
So there's something called the main thread which is where if you don't specify otherwise all your code

28
00:01:58,960 --> 00:01:59,470
runs right.

29
00:01:59,470 --> 00:02:05,080
So when we have the app that you know the egg timer and it was keeping track and displaying the new

30
00:02:05,080 --> 00:02:05,870
timer.

31
00:02:05,950 --> 00:02:11,480
And I means it was checking in every 1000 milliseconds that was happening on the main thread.

32
00:02:11,620 --> 00:02:16,970
But if for example you want to go download something from the Internet like the HCM mail from this Web

33
00:02:16,970 --> 00:02:18,830
site you should do that in the background.

34
00:02:18,830 --> 00:02:23,500
And the reason for that is if you go and try and get something from the Internet on the main thread

35
00:02:23,770 --> 00:02:27,700
you have to say hey Web site what you know HD M-L do you have.

36
00:02:27,700 --> 00:02:33,820
And if it takes you know two or three seconds to come back if you're on the main thread nothing can

37
00:02:33,820 --> 00:02:36,460
happen during that time right like.

38
00:02:36,470 --> 00:02:42,460
Users can't click on buttons they can't see animations happening just everything shuts down and so threads

39
00:02:42,460 --> 00:02:44,610
are basically just where work happens in an app.

40
00:02:44,620 --> 00:02:49,360
And if you do things on a background thread then you can come back with the results from that background

41
00:02:49,380 --> 00:02:53,440
thread in the main thread update your UI with that.

42
00:02:53,440 --> 00:02:59,440
So that's what Google recommends is that you do all your visual UI stuff on the main thread and if you

43
00:02:59,440 --> 00:03:06,040
have to do any big intensive data stuff and that includes web requests that those happen on a background

44
00:03:06,040 --> 00:03:06,440
thread.

45
00:03:06,480 --> 00:03:06,850
OK.

46
00:03:07,030 --> 00:03:08,800
So hopefully not to confuse with that.

47
00:03:08,800 --> 00:03:13,260
Plenty of great content out there if you want to learn more but let me keep walking you through this.

48
00:03:13,390 --> 00:03:19,300
So we are going to now create a class and don't worry too much about this class.

49
00:03:19,450 --> 00:03:23,970
You can almost think through it as just a collection of variables and methods.

50
00:03:24,070 --> 00:03:29,680
But we're going to use a create a new class in order to download some stuff from the Internet.

51
00:03:29,680 --> 00:03:31,990
So just kind of follow with me here for a second.

52
00:03:31,990 --> 00:03:36,550
We're going to say public class and we're not going to create a name for this class and we're going

53
00:03:36,550 --> 00:03:39,220
to call it download task.

54
00:03:39,230 --> 00:03:43,570
Now there's nothing special about this name but I just think it's appropriate because this class that

55
00:03:43,570 --> 00:03:49,780
we're creating download task extends something called a sync task.

56
00:03:49,780 --> 00:03:54,640
Now this is something where you want to make sure you get the correct one then hit enter on there so

57
00:03:54,640 --> 00:03:56,490
you get everything imported.

58
00:03:56,910 --> 00:04:06,780
And then we're also inside of our angle brackets going to say string comma void comma string.

59
00:04:07,300 --> 00:04:11,990
And once we've got that in place we want to do our curly brackets but that's it.

60
00:04:11,990 --> 00:04:12,360
OK.

61
00:04:12,550 --> 00:04:16,010
So this download class or this download task.

62
00:04:16,060 --> 00:04:21,510
It basically extends it borrows from this existing class called a sync task.

63
00:04:22,300 --> 00:04:26,050
Google has written a ton of code to allow us to run things in the background quickly.

64
00:04:26,050 --> 00:04:30,350
Now anything that happens with this download task can happen in the background.

65
00:04:30,970 --> 00:04:35,530
So you see you've got an error if we hover over it with this red light bulb we want to implement the

66
00:04:35,530 --> 00:04:40,980
methods that suggest this do in background so this is the code that we can have run in the background.

67
00:04:40,980 --> 00:04:45,940
Now if you're wondering about what the string voyde string is well this is talking about what things

68
00:04:45,940 --> 00:04:50,560
we can pass into this download task and you know how it's going to handle it what it's going to pass

69
00:04:50,560 --> 00:04:51,070
back.

70
00:04:51,310 --> 00:04:56,440
And basically there's an opportunity here with this void thing in the middle with some functionality

71
00:04:56,470 --> 00:04:59,050
but by saying void we're kind of just excluding that for now.

72
00:04:59,050 --> 00:05:04,930
But the string here on the beginning and the end this is saying hey we can pass in a string and we can

73
00:05:04,930 --> 00:05:06,100
pass out a string.

74
00:05:06,100 --> 00:05:14,380
So the basic idea would be we would pass in a u r l and then we would get back the h t m l for that

75
00:05:14,380 --> 00:05:15,380
right as a string.

76
00:05:15,370 --> 00:05:19,950
That's sort of you know we'd put that into the download task and we'd get that back out of it.

77
00:05:21,290 --> 00:05:26,400
So you also might be wondering with this protected string doing background like what's going on here.

78
00:05:26,420 --> 00:05:29,350
Well protected is pretty similar to public.

79
00:05:29,360 --> 00:05:33,590
The basic idea with protected is that it's available throughout this whole package.

80
00:05:33,590 --> 00:05:38,180
So essentially your whole app you can get access to this so this is very important if you're doing things

81
00:05:38,180 --> 00:05:41,030
on the background you want other classes to be able to work with it.

82
00:05:41,030 --> 00:05:43,270
So that's why this project is important.

83
00:05:43,310 --> 00:05:49,390
And then we've got this string dot dot dot strings and you might be wondering what this is.

84
00:05:49,570 --> 00:05:56,390
And this is a way to essentially create an array it's not technically an array if you want to learn

85
00:05:56,390 --> 00:06:01,310
more about it you can go look at our vars on the internet about this but it's basically a way to add

86
00:06:01,310 --> 00:06:06,050
in as many strings as you'd like and then work with them if you want to as far as accessing information

87
00:06:06,050 --> 00:06:06,840
from here.

88
00:06:06,860 --> 00:06:09,770
It's basically like working with an array.

89
00:06:09,800 --> 00:06:15,320
So the idea with this is let's go ahead and do this in the uncreate I want to show you an example of

90
00:06:15,320 --> 00:06:16,640
how this might work.

91
00:06:17,080 --> 00:06:23,910
So let's make a new download task object here we're going to say download task and call this task and

92
00:06:23,950 --> 00:06:29,210
say this is equal to a new download task.

93
00:06:29,210 --> 00:06:38,090
And with this we'll just go ahead and put our semi-colon and then with our object task we want to go

94
00:06:38,090 --> 00:06:40,640
ahead and go with this and run some code.

95
00:06:40,640 --> 00:06:45,280
So we're going to say task thought execute.

96
00:06:45,400 --> 00:06:46,040
Okay.

97
00:06:46,130 --> 00:06:49,160
And this is where we're going to pass that information.

98
00:06:49,160 --> 00:06:54,770
So for example we are going to pass it a string and this should be that your all of what we want to

99
00:06:54,770 --> 00:06:58,990
go grab a copy that you're in I'll come back and paste it there.

100
00:06:59,040 --> 00:07:00,200
OK.

101
00:07:00,310 --> 00:07:05,260
And let's go ahead and do our semi-colon here so this will then come through here.

102
00:07:05,270 --> 00:07:08,330
This into this method does do in background.

103
00:07:08,510 --> 00:07:12,340
And then if we want to get some information back out of here.

104
00:07:12,440 --> 00:07:17,750
Well we need to return it here so maybe we return something like done to say that you know we were able

105
00:07:17,750 --> 00:07:20,630
to successfully process some information.

106
00:07:20,750 --> 00:07:25,840
Now it kind of just confirmed that this works and I'm going to go ahead and get the emulator rock'n'roll

107
00:07:25,840 --> 00:07:31,430
in here because it might take a second to fire up but if we want to display some information and confirm

108
00:07:31,430 --> 00:07:35,900
that we were able to get this string to come out here we would probably want to do a log.

109
00:07:35,900 --> 00:07:39,140
So let's go ahead and say log I.

110
00:07:39,890 --> 00:07:43,200
And we're just going to simply display what the u r l is.

111
00:07:43,220 --> 00:07:48,700
So we're going to say you are all comma and then we want to provide what you are.

112
00:07:48,720 --> 00:07:52,010
So we're going to say strings.

113
00:07:52,280 --> 00:07:54,770
Square brackets 0.

114
00:07:54,770 --> 00:08:01,640
So again this string ellipses here essentially think of this as a string array.

115
00:08:01,640 --> 00:08:06,860
And when we say string 0 or say and we want to know the very first item there and if we're wondering

116
00:08:06,860 --> 00:08:10,260
like well what other you know can we pass multiple things in there.

117
00:08:10,280 --> 00:08:11,540
Yes we can.

118
00:08:11,540 --> 00:08:17,420
So the idea with this is that we could essentially say OK there there's one you're L maybe will pass

119
00:08:17,420 --> 00:08:21,400
another your l of like Google dot com.

120
00:08:21,530 --> 00:08:26,850
Maybe you will pass another your l of stack overflow.

121
00:08:26,870 --> 00:08:32,350
Dot com I mean we can just keep adding as many strings as we want and if we you know pass through here

122
00:08:32,630 --> 00:08:34,660
strings would contain three different things.

123
00:08:34,670 --> 00:08:39,040
But if we you know only limit that to zap B code Dotcom's string.

124
00:08:39,200 --> 00:08:44,060
Then there's only one item in there and we can get to that by passing in a zero index.

125
00:08:44,060 --> 00:08:47,680
So that's basically what's going on there.

126
00:08:47,840 --> 00:08:50,750
Now before we go ahead and move forward.

127
00:08:50,870 --> 00:08:56,270
Remember when we learned about the try catch Well we have to be able to put a try catch around this

128
00:08:56,300 --> 00:08:59,800
execute because we don't know for sure whether it's going to work out right.

129
00:08:59,810 --> 00:09:05,590
All sorts of situations about maybe I'll just never hear back from the server where you request this

130
00:09:05,600 --> 00:09:06,510
Web site.

131
00:09:06,770 --> 00:09:09,590
Maybe you're going to have the issue that the users internet's not connected.

132
00:09:09,600 --> 00:09:12,520
There's all sorts of different things that could happen here.

133
00:09:12,530 --> 00:09:18,710
So what we want to do is we want to wrap this up inside of a trial so we're going to go ahead and put

134
00:09:18,710 --> 00:09:20,320
a try there.

135
00:09:20,600 --> 00:09:24,150
And then let's go ahead and add a catch as well.

136
00:09:24,200 --> 00:09:29,900
We're going to say we are looking for just a general exception and typically we call that he doesn't

137
00:09:29,900 --> 00:09:30,550
have to be.

138
00:09:30,560 --> 00:09:33,060
But I think that's probably a good name for it.

139
00:09:33,290 --> 00:09:45,350
And if we do get an exception Let's go ahead and log that let's say log dot and say exception and then

140
00:09:45,440 --> 00:09:48,060
we'll go ahead and provide the actual exception.

141
00:09:48,080 --> 00:09:55,370
So we'll just go ahead and say me and maybe we'll see a print stack trace and that's going to give us

142
00:09:56,060 --> 00:09:56,480
some more.

143
00:09:56,500 --> 00:10:00,010
Oh well that doesn't give us let's see if we can do a two string.

144
00:10:00,010 --> 00:10:00,690
No.

145
00:10:00,980 --> 00:10:01,270
All right.

146
00:10:01,280 --> 00:10:08,890
Well maybe what we'll do that instead is if we just do eat up print stack strict eat print stack trace.

147
00:10:08,890 --> 00:10:12,920
This essentially prints out and logs whatever air there is.

148
00:10:12,920 --> 00:10:15,680
So this is probably the better way to work with this.

149
00:10:15,680 --> 00:10:16,160
OK.

150
00:10:16,340 --> 00:10:18,340
So let's go ahead and run this again.

151
00:10:18,390 --> 00:10:23,740
All we're hoping to see is that we can see what the U R L is and then it's going to try and execute

152
00:10:23,740 --> 00:10:27,550
this and if there's an issue we're going to get you know see the stack trace here.

153
00:10:27,820 --> 00:10:30,460
But if not it should run just fine.

154
00:10:30,560 --> 00:10:31,370
OK.

155
00:10:31,830 --> 00:10:42,040
So we'll go ahead and fire this up and we'll wait for this to open Kang here comes the app and let's

156
00:10:42,040 --> 00:10:45,430
go ahead and scroll through here see if we got that.

157
00:10:45,870 --> 00:10:47,730
You are all showing up anywhere.

158
00:10:47,740 --> 00:10:51,000
I don't see it right now.

159
00:10:52,060 --> 00:10:59,140
So I don't see the exceptions so I'm wondering whether this got run will go ahead and try that one more

160
00:10:59,140 --> 00:11:03,310
time because we should have your L being logged right there.

161
00:11:03,370 --> 00:11:04,850
Try this one more time.

162
00:11:09,820 --> 00:11:11,110
And again we come down.

163
00:11:11,110 --> 00:11:16,800
I'm not seen oh there it is it was right in front of my face your L's at Cocom.

164
00:11:16,810 --> 00:11:22,480
OK so we successfully know that that code is being run but you might be saying Well where do we get

165
00:11:22,480 --> 00:11:23,650
this done information.

166
00:11:23,650 --> 00:11:29,260
Well what we can do is we can actually take the information from here and put it into a variable So

167
00:11:29,260 --> 00:11:35,440
let's say let's make a new string and we'll call this result you know kind of saying this is what we

168
00:11:35,710 --> 00:11:45,550
are getting back from the URL and we'll say result is equal to this.

169
00:11:45,940 --> 00:11:51,570
Excuse me we've got seven deleted tasks so result is equal to the task.

170
00:11:51,700 --> 00:11:52,530
Execute.

171
00:11:52,680 --> 00:11:57,910
And the issue that we're running into here is we have to add a dot get at the end this goes ahead and

172
00:11:57,910 --> 00:12:03,530
grabs whatever it is the string that we're going to be returning here which in this case is done.

173
00:12:03,700 --> 00:12:10,030
So let's go ahead and once we get that result back we'll go ahead and log this out.

174
00:12:10,030 --> 00:12:22,120
So we'll just go ahead and say Lagat say result and we'll go ahead and pass in whatever the result is.

175
00:12:22,750 --> 00:12:23,610
There we go.

176
00:12:23,980 --> 00:12:24,330
OK.

177
00:12:24,370 --> 00:12:29,000
So let's go ahead and run this.

178
00:12:29,560 --> 00:12:35,740
It's not liking what I have here that's the result might not have been initialized.

179
00:12:35,740 --> 00:12:39,560
We have to set it equal to something and actually so let's go ahead and set it equal to no.

180
00:12:39,580 --> 00:12:45,550
That way we know if we don't get something back right if there's an error in the exception in the stack

181
00:12:45,550 --> 00:12:47,810
trace comes right then we will know about that.

182
00:12:47,860 --> 00:12:49,350
That will say result no.

183
00:12:49,600 --> 00:12:50,900
But let's go ahead and run this.

184
00:12:50,900 --> 00:12:58,060
Now look at that we are so much happier now this time.

185
00:12:58,930 --> 00:13:00,600
And here it comes.

186
00:13:03,210 --> 00:13:09,210
So we've got to go back to log cat over here but we can see we got the you are able to print out there

187
00:13:09,210 --> 00:13:10,320
just like we did before.

188
00:13:10,320 --> 00:13:16,380
And then we also got results done printed out so this kind of just proves that we were able to run some

189
00:13:16,380 --> 00:13:17,760
code in the background now.

190
00:13:17,760 --> 00:13:20,640
It was very simple code right we didn't download anything from the Internet.

191
00:13:20,640 --> 00:13:25,170
We literally just passed a string here into this function.

192
00:13:25,170 --> 00:13:30,240
We printed out that string essentially with this log and we return back none which we put in this result

193
00:13:30,600 --> 00:13:33,600
and then we logged out result that's all really did.

194
00:13:33,600 --> 00:13:35,520
So let's go ahead and take things a step further.

195
00:13:35,520 --> 00:13:40,170
Let's make it so we can actually go reach out on the internet try and grab the contents or whatever

196
00:13:40,170 --> 00:13:43,740
you are as we pass through here and then get it to show back.

197
00:13:43,740 --> 00:13:49,890
So in order to do this let's go ahead and do a little work on this do in background method and here's

198
00:13:49,890 --> 00:13:50,400
what we want to do.

199
00:13:50,400 --> 00:13:56,580
So we're no longer logging out information we're going to say that we're done with that but we do want

200
00:13:56,580 --> 00:13:58,410
to do here is we want to start setting up something.

201
00:13:58,410 --> 00:14:01,500
So eventually at some point we want to return a result.

202
00:14:01,500 --> 00:14:06,900
So we're going to make a string that we're going to call result and initially we'll just set this thing

203
00:14:06,930 --> 00:14:09,020
equal to an empty string.

204
00:14:09,190 --> 00:14:15,240
Ten other things that we need is we need to get an actual u r l object so I've referred to your l a

205
00:14:15,240 --> 00:14:21,390
few times but I mean really what we have is a string that is a u r l but like in Java there's an actual

206
00:14:21,390 --> 00:14:27,450
u r l object where you need to convert a string into a your L object and I'll show you how to do that

207
00:14:27,450 --> 00:14:27,990
conversion.

208
00:14:27,990 --> 00:14:35,130
So we're going to create a variable called u r l lowercase there and then we need something called an

209
00:14:35,130 --> 00:14:40,460
h t t p u r l connection.

210
00:14:40,470 --> 00:14:43,290
There we go just like that.

211
00:14:43,380 --> 00:14:49,140
And then what we're going to do is say the name of this is u r l connection.

212
00:14:49,260 --> 00:14:49,990
Excellent.

213
00:14:50,250 --> 00:14:53,630
And we will set this equal to know for the time being.

214
00:14:53,640 --> 00:15:01,320
So think of ACP your L connection as a way to it's like a browser just like we have Safari here where

215
00:15:01,320 --> 00:15:07,350
we give it to your L and it goes and shows us the information in HTP your connection does the same thing

216
00:15:07,350 --> 00:15:10,170
and we can go grab the H.T. mail back from that.

217
00:15:10,170 --> 00:15:14,700
The big difference is that a browser can turn it into this cool looking thing whereas in our app we're

218
00:15:14,700 --> 00:15:16,760
just going to simply get the text from there.

219
00:15:17,830 --> 00:15:24,600
So the first thing that we want to do is you want to try to convert your L that comes through here into

220
00:15:24,900 --> 00:15:28,930
a actual You are l object so to just make this a little bit easier.

221
00:15:29,010 --> 00:15:31,440
Right now the name for this parameter is strings.

222
00:15:31,440 --> 00:15:35,740
Let's go ahead and call it you are Elle's because it's possible that multiple would come through here.

223
00:15:35,910 --> 00:15:44,880
And what we want to do is we're going to make a new york object and inside of here we're going to pass

224
00:15:45,240 --> 00:15:48,820
the first item in the you are Elle's quote unquote array.

225
00:15:48,820 --> 00:15:51,860
I know it's not an actual array but I will go ahead and grab that.

226
00:15:51,870 --> 00:15:57,360
And let's put it inside of r u r l object so we're going to say OK U R L is equal to this.

227
00:15:57,360 --> 00:16:01,190
And you'll notice we get an error here and that's because this might not work out.

228
00:16:01,190 --> 00:16:07,620
We not all strings can be turned into a U R L So for example if I forget the H TDP and the B W and I

229
00:16:07,620 --> 00:16:11,230
just pass this this would not successfully pass.

230
00:16:11,340 --> 00:16:16,950
And same as if I just like if this was just the number four that wouldn't turn into a U R L is not valid.

231
00:16:16,950 --> 00:16:21,300
And so if it doesn't work you know there would be an exception and we have to handle that.

232
00:16:21,300 --> 00:16:27,750
So it's kind of cool we can go ahead and just click on the surround try catch and it actually handles

233
00:16:27,930 --> 00:16:29,340
all of this for us.

234
00:16:29,340 --> 00:16:31,680
So I think this looks pretty good.

235
00:16:31,680 --> 00:16:36,270
I would maybe just change this to a general exception because I just want to say hey whatever exception

236
00:16:36,270 --> 00:16:37,220
comes our way.

237
00:16:37,230 --> 00:16:38,790
Just go ahead and print that out.

238
00:16:38,790 --> 00:16:41,370
We don't need to get too specific there.

239
00:16:41,940 --> 00:16:46,530
So we've converted our string into a u r l.

240
00:16:46,800 --> 00:16:51,060
The next thing that we want to do is we want to create a u r l connection.

241
00:16:51,060 --> 00:16:56,040
So remember we had provided this name here but we actually want to make u r l connection.

242
00:16:56,040 --> 00:17:06,210
So we're going to say we want to have r u r l dot open connection can and we have to specify the type

243
00:17:06,210 --> 00:17:12,360
that this is going to be and we say hey this is going to be an H P or L connection just kind of cast

244
00:17:12,360 --> 00:17:13,990
that as we go through.

245
00:17:14,280 --> 00:17:18,510
Then we need to create something called an input stream so the input stream is just going to be able

246
00:17:18,510 --> 00:17:22,680
to gather the data as it's coming through as it's hitting.

247
00:17:22,690 --> 00:17:28,280
So we're going to say input stream and we'll call that in.

248
00:17:28,590 --> 00:17:37,150
This is going to be equal to r u r l connections get input stream and connected with that.

249
00:17:37,140 --> 00:17:41,700
Not only do we have to have an input stream but we need to have an input stream of readers so this is

250
00:17:41,700 --> 00:17:47,820
going to be able to actually read the data or just call that one reader simply and will say this is

251
00:17:47,820 --> 00:17:56,500
a new input stream reader and we have to pass in our input stream in here in order to create that.

252
00:17:56,910 --> 00:18:02,290
After that we want to actually go ahead and read some data from there so we're going to say reader Scott

253
00:18:02,490 --> 00:18:07,170
Reed and you can see this gives us back an int which is a little bit curious you might be saying hey

254
00:18:07,200 --> 00:18:08,430
how is this going to work.

255
00:18:08,430 --> 00:18:13,710
But this is its way of giving us each individual character in fact when we go through this input stream

256
00:18:13,710 --> 00:18:16,380
we have to go character by character to get our information.

257
00:18:16,620 --> 00:18:20,760
So we'll just call this data we're going to say make a new event called data and it's going to be equal

258
00:18:20,760 --> 00:18:25,740
to whatever we just read that sort of gets the very first piece of data that comes through.

259
00:18:25,740 --> 00:18:31,030
And this is where we get a little bit tricky as we're going to create a wall loop where we say OK walde

260
00:18:31,030 --> 00:18:35,130
data is not equal to negative 1.

261
00:18:35,310 --> 00:18:37,080
We'll do our curly brackets here.

262
00:18:37,080 --> 00:18:38,840
We want to run some code.

263
00:18:38,850 --> 00:18:47,050
And basically what we're doing here is we're going to want to say data is equal to reader dot.

264
00:18:47,070 --> 00:18:50,960
Read and read basically moves on to the next item.

265
00:18:50,960 --> 00:18:56,970
And it basically data could be equal to 1 2 3 4 5 6 all the way up and it's just the way that it converts

266
00:18:56,970 --> 00:18:59,480
it back to a string you'll see here in a second.

267
00:18:59,490 --> 00:19:03,810
But if it's ever equal the negative one that's the reader's way of saying hey we're done we got to the

268
00:19:03,810 --> 00:19:04,840
last thing.

269
00:19:04,980 --> 00:19:11,490
So that's why this keeps running Intel data is equal to negative one at which point it will not go through

270
00:19:11,490 --> 00:19:12,710
the while loop anymore.

271
00:19:12,930 --> 00:19:21,690
So we've got to turn this data into a character so we're going to say char current is equal to the data

272
00:19:22,160 --> 00:19:27,450
and we need to cast this through that is coming through a char just like that.

273
00:19:27,590 --> 00:19:30,270
Then what we're going to do is we're going to say result.

274
00:19:30,270 --> 00:19:35,660
Remember this is our string that we had up there we're going to say result plus equals current.

275
00:19:35,670 --> 00:19:39,060
So that just adds a character onto it so it's just letter by letter.

276
00:19:39,060 --> 00:19:45,720
For example if we go to here on Zappy code like it's going to do this angled bracket then an exclamation

277
00:19:45,720 --> 00:19:51,810
point then a capital D then the capital O then a capital C and just letter by letter character by character

278
00:19:51,810 --> 00:19:53,880
it's going to add it onto the results string.

279
00:19:53,880 --> 00:19:57,450
And this reader not read that sort of moves on to the next one.

280
00:19:57,690 --> 00:20:03,380
So after this while loop is done running we are going to go ahead and return the result.

281
00:20:03,440 --> 00:20:06,900
We'll go ahead and type that out and that's it.

282
00:20:06,900 --> 00:20:13,370
So this is going to go do all of our information for us hopefully get to you or else successfully.

283
00:20:13,920 --> 00:20:16,680
The one thing we do want to fix is right now we're returning done.

284
00:20:16,680 --> 00:20:21,990
We either want to return the e-mail or we want to return something that says like hey this didn't go

285
00:20:21,990 --> 00:20:22,280
right.

286
00:20:22,280 --> 00:20:26,930
So we're actually going to get rid of this return and we're going to put a return inside of this catch.

287
00:20:26,940 --> 00:20:33,600
So after we've printed out a stack stack trace we're going to say return failed just like this and this

288
00:20:33,600 --> 00:20:37,060
is basically our way of saying hey something don't go right.

289
00:20:37,080 --> 00:20:38,240
You've got to figure that out.

290
00:20:38,310 --> 00:20:43,190
So we currently have the code to take whatever it spits back to us and logged that out which means we're

291
00:20:43,190 --> 00:20:44,400
in a good place.

292
00:20:44,400 --> 00:20:48,410
So let's go ahead and run this and see what we get.

293
00:20:48,590 --> 00:20:52,780
And I just thought of something that we're going to get on the air with but maybe it will be good to

294
00:20:52,780 --> 00:20:56,920
see the air and then we can go ahead and roll through there.

295
00:20:57,310 --> 00:21:00,280
Okay opened up and.

296
00:21:00,370 --> 00:21:01,770
I think this is the big issue.

297
00:21:01,770 --> 00:21:01,990
Yeah.

298
00:21:02,050 --> 00:21:03,040
And this is what it is.

299
00:21:03,040 --> 00:21:05,800
Permission denied missing Internet permission.

300
00:21:05,800 --> 00:21:11,680
So on Android If someone's app if a user downloads an app and that app wants to connect the internet

301
00:21:11,890 --> 00:21:17,020
GPS GPS whatever it is you've probably seen this before and it has to ask permission from the user to

302
00:21:17,020 --> 00:21:18,940
say hey is it OK if I go do this.

303
00:21:18,940 --> 00:21:23,770
So we have to you know state that we want that permission from the user so if we open up our project

304
00:21:23,770 --> 00:21:29,470
structure here and we go to the Android manifest we can go ahead and add this permission.

305
00:21:29,470 --> 00:21:37,340
So above application but below manifests here we are going to ask for a user's permission.

306
00:21:37,570 --> 00:21:39,570
And there's all sorts of different ones here.

307
00:21:39,580 --> 00:21:44,890
But we want the one for the Internet so there is a whole lot if you scroll down though you can find

308
00:21:44,890 --> 00:21:46,890
the one that says Android not permission.

309
00:21:46,930 --> 00:21:47,710
Internet.

310
00:21:47,980 --> 00:21:50,040
And then we have to make an ending tag for that.

311
00:21:50,040 --> 00:21:55,000
But this basically when the app opens up especially if you push this the Google Play store it's going

312
00:21:55,000 --> 00:21:57,850
to say hey can we get this app use the Internet.

313
00:21:57,850 --> 00:22:02,160
And you know at that point the user would have to say yes if they wanted that to go through.

314
00:22:02,170 --> 00:22:03,990
But let's go ahead and run this.

315
00:22:04,000 --> 00:22:09,420
That should fix our issue that we had.

316
00:22:10,600 --> 00:22:19,990
And I should get Lague get up and running here so we can see what we get and see the app is opening

317
00:22:19,990 --> 00:22:20,930
up here.

318
00:22:23,430 --> 00:22:25,390
And so far nothing here.

319
00:22:25,410 --> 00:22:29,690
I guess it's taken a long time to go grab this information and look at this.

320
00:22:29,700 --> 00:22:36,270
So here you see this big chunk of Texas doc type H.C. mail had met go in and doing all this stuff that

321
00:22:36,270 --> 00:22:42,630
eventually went out and got all this information and it printed it out into the result here.

322
00:22:43,050 --> 00:22:47,430
So we'll you can see it is really long at some point.

323
00:22:47,430 --> 00:22:48,500
So that means it worked.

324
00:22:48,570 --> 00:22:50,220
So I hope you enjoyed learning about that.

325
00:22:50,220 --> 00:22:55,230
We took our try catch though we kind of learned in a theoretical sense and then actually applied it

326
00:22:55,230 --> 00:23:00,560
to a real situation where you know hey there could be a whole lot of things that go wrong in this situation.

327
00:23:00,750 --> 00:23:05,580
But we made it all work and were able to successfully print out some HD mail.

328
00:23:05,580 --> 00:23:09,960
Now there's all other sorts of things that we can do much more advanced that you just covered I know

329
00:23:09,960 --> 00:23:14,160
things got a little intense here with some of this reader stuff but there's even better ways that we

330
00:23:14,160 --> 00:23:18,750
can handle this and we'll talk about that in the future but the next thing that we want to talk about

331
00:23:18,750 --> 00:23:23,010
is how we can actually go download images from the Internet so that bit by bit you're going to keep

332
00:23:23,010 --> 00:23:26,200
learning these skills about working with downloading data.

333
00:23:26,250 --> 00:23:27,210
It's going to be great.
