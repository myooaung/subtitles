1
00:00:00,600 --> 00:00:06,240
So now that you're an expert on variables Let's go and look at arrays which are an extremely important

2
00:00:06,240 --> 00:00:08,860
way of storing information.

3
00:00:09,090 --> 00:00:12,450
If by the way you're getting a little antsy because we haven't made an app in a while.

4
00:00:12,540 --> 00:00:17,220
Don't worry you've just got two videos to go and then we're going to go back to enjoy studio and use

5
00:00:17,460 --> 00:00:23,200
all of the Java knowledge that we've built so far to make a high or low a guessing game.

6
00:00:23,520 --> 00:00:24,870
So just hold on till then.

7
00:00:26,850 --> 00:00:28,970
And let's take a look at arrays first.

8
00:00:29,020 --> 00:00:35,100
So we met the array a few videos ago when we saw this string and then square brackets.

9
00:00:35,170 --> 00:00:38,320
But I kind of brushed over exactly what it was.

10
00:00:38,320 --> 00:00:40,520
So let's look in more detail now.

11
00:00:41,140 --> 00:00:44,780
Let's say we wanted to store a bunch of numbers.

12
00:00:44,950 --> 00:00:52,600
So if for example I wanted to store the first few prime numbers that is the numbers that have no factors

13
00:00:52,690 --> 00:00:58,810
other than 1 and themselves then this is going to be a bunch of integers whole numbers.

14
00:00:58,930 --> 00:01:00,490
So I'll call it it.

15
00:01:00,610 --> 00:01:06,030
And then I use the open and close square brackets to say the I want this to be an array of integers

16
00:01:07,570 --> 00:01:10,970
and then I'll call it prime numbers.

17
00:01:10,990 --> 00:01:14,330
So just in the same way as we did with variables.

18
00:01:14,450 --> 00:01:20,920
So this is saying we want to create an array of integers which is called prime numbers and then we use

19
00:01:20,920 --> 00:01:24,760
curly brackets to store all of the numbers that we want to store.

20
00:01:25,120 --> 00:01:28,280
So the first prime number is two.

21
00:01:28,300 --> 00:01:29,720
Second one is three.

22
00:01:29,740 --> 00:01:35,200
The third one is 5 and 7 11 and we'll do one more.

23
00:01:35,260 --> 00:01:37,960
13.

24
00:01:38,020 --> 00:01:39,050
There we go.

25
00:01:39,640 --> 00:01:40,120
So that's it.

26
00:01:40,120 --> 00:01:44,860
That's our array of prime numbers and it is just a collection of.

27
00:01:44,920 --> 00:01:50,080
In this case integers 2 3 5 7 11 13.

28
00:01:50,080 --> 00:01:51,770
So that's all an array is.

29
00:01:51,920 --> 00:01:57,640
You can imagine that's a very useful construct for us if we wanted to have a list of images that we

30
00:01:57,640 --> 00:02:01,990
have downloaded from Instagram or a list of our users or anything like that.

31
00:02:02,080 --> 00:02:08,320
We can store it in an array and we can store as many different items as we need without having to create

32
00:02:08,320 --> 00:02:11,050
new variable names for each of them.

33
00:02:11,140 --> 00:02:17,750
So let's just print that to the console and see what the system does with it.

34
00:02:17,860 --> 00:02:21,670
So systems are out of print line.

35
00:02:24,380 --> 00:02:25,210
Prime numbers.

36
00:02:27,140 --> 00:02:29,380
I don't need a semi-colon there as well.

37
00:02:30,840 --> 00:02:35,150
It's easy to forget because it's a curly bracket.

38
00:02:36,300 --> 00:02:40,460
So we get a collection of strange symbols here which is very useful for us.

39
00:02:40,560 --> 00:02:44,310
This is because prime numbers is an array and not a string.

40
00:02:44,580 --> 00:02:48,540
And so trying to print as a line doesn't work.

41
00:02:48,570 --> 00:02:51,250
We get this strange object instead.

42
00:02:51,330 --> 00:02:56,200
And let's try and display the second member of the array.

43
00:02:56,340 --> 00:03:01,230
So prime numbers and then square brackets with two inside.

44
00:03:01,240 --> 00:03:07,710
Now see if you can anticipate what number that is going to display which of these numbers will get pushed

45
00:03:07,800 --> 00:03:09,100
to the console.

46
00:03:09,180 --> 00:03:10,550
It's the number five.

47
00:03:10,740 --> 00:03:14,260
That might be slightly unexpected for you if you haven't worked with a raise before.

48
00:03:14,520 --> 00:03:17,750
So it's actually the third number even though we've got two here.

49
00:03:18,090 --> 00:03:23,410
And that's because the first is considered to be the with number in the array.

50
00:03:23,430 --> 00:03:26,610
So if we put prime numbers and then square brackets

51
00:03:29,970 --> 00:03:36,460
and then Syrie then that will give us the two that we get.

52
00:03:36,640 --> 00:03:40,330
So those are two Target got zero is the number two.

53
00:03:40,360 --> 00:03:43,030
And then one would be three two would be five.

54
00:03:43,030 --> 00:03:44,740
Three would be seven etc..

55
00:03:44,980 --> 00:03:51,840
So that's a common starter error is to get confused as to which map of the array that you want.

56
00:03:52,120 --> 00:03:54,760
And forgetting that it starts at zero.

57
00:03:55,630 --> 00:03:59,250
So there are a few things that you can do with a raise.

58
00:03:59,260 --> 00:04:03,810
First one is to find out how many items are in your way.

59
00:04:04,120 --> 00:04:08,140
And we do that using dot length.

60
00:04:08,270 --> 00:04:12,370
By this time we don't use the parentheses.

61
00:04:12,370 --> 00:04:13,320
So let's take a look.

62
00:04:13,450 --> 00:04:17,450
And that should give us the number of items in there right which is 6.

63
00:04:17,630 --> 00:04:18,720
Excellent.

64
00:04:19,480 --> 00:04:26,320
Now the main limitation with arrays as we're using them here is that they can't be altered.

65
00:04:26,320 --> 00:04:31,720
That is have elements added to them or taken away from them after they've been created.

66
00:04:31,790 --> 00:04:37,090
Now that's probably a deal breaker for most of the arrays that we'd want to use but we're going to move

67
00:04:37,090 --> 00:04:45,790
quickly on from this primitive array type to the list type which does allow you to add and take away

68
00:04:46,210 --> 00:04:49,800
and do a lot of other things to your arrays.

69
00:04:49,870 --> 00:05:01,290
So in order to be able to use the list type we need to import a number of different frameworks and save

70
00:05:01,300 --> 00:05:05,200
us importing all them individually.

71
00:05:05,290 --> 00:05:13,060
We can use Java Util and then dot star and that will import a number of different frameworks that will

72
00:05:13,060 --> 00:05:17,530
give us all the methods that we need and the classes that we need to create lists.

73
00:05:18,710 --> 00:05:23,290
So let's get rid of the code that we have before and see how we create a list.

74
00:05:23,300 --> 00:05:26,240
It's slightly more complicated than creating an array.

75
00:05:26,660 --> 00:05:31,310
So now to create our list we write down the type.

76
00:05:31,310 --> 00:05:35,790
First of all which is a list and then the name.

77
00:05:35,790 --> 00:05:44,480
So I'm just going to call it a list with a lowercase L and this time we set it equal to a new array

78
00:05:44,480 --> 00:05:45,900
list.

79
00:05:48,520 --> 00:05:54,280
So this is a different way of creating an object instead of setting it equal to the value that we actually

80
00:05:54,280 --> 00:05:55,030
want.

81
00:05:55,030 --> 00:06:00,270
We just create the type that we're going to use so we're going to use an array list.

82
00:06:00,310 --> 00:06:03,630
There are various other lists types but we'll stick with this one for them because it does everything

83
00:06:03,700 --> 00:06:04,570
we need.

84
00:06:04,570 --> 00:06:11,050
So we're just creating a new array list and this construct is something that we'll see again and again

85
00:06:11,050 --> 00:06:14,860
later in the course when you're creating variables of certain types.

86
00:06:14,860 --> 00:06:18,510
You can use it with strings and other variables that we've seen before as well.

87
00:06:20,390 --> 00:06:28,630
And then to add items to our list we use the Add method so the list at.

88
00:06:28,970 --> 00:06:38,270
And if we wanted to add the first item in our prime numbers list then we would add 2 and then we do

89
00:06:38,270 --> 00:06:40,040
the same three

90
00:06:43,920 --> 00:06:48,170
and the next one is a 5 I'll stop that.

91
00:06:48,180 --> 00:06:51,430
Feel free to add some more if you like but those are the first three prime numbers.

92
00:06:51,480 --> 00:06:52,360
L.D..

93
00:06:53,010 --> 00:07:00,050
And then if we wanted to print one of those to the console which you system start out of print line

94
00:07:00,540 --> 00:07:04,850
and this time we'd use list dot get.

95
00:07:04,890 --> 00:07:08,170
And then we give the number of the item that we want.

96
00:07:08,170 --> 00:07:11,030
So a quick challenge for you if we wanted three.

97
00:07:11,340 --> 00:07:13,090
What number would we use here.

98
00:07:15,410 --> 00:07:19,530
I hope you said one because this would be zero.

99
00:07:19,530 --> 00:07:20,930
This is one this is 2.

100
00:07:20,970 --> 00:07:22,190
Cetera et cetera.

101
00:07:22,620 --> 00:07:27,330
So a list to get and then one will give us the second item in the list.

102
00:07:28,920 --> 00:07:32,340
So that should print three every day.

103
00:07:33,570 --> 00:07:36,440
So now we've got this slightly more complicated set up.

104
00:07:36,510 --> 00:07:39,860
We can do much more powerful things so we can add items.

105
00:07:39,860 --> 00:07:41,470
Of course we can take them away as well.

106
00:07:42,690 --> 00:07:50,500
So to do that we usually list dot remove and then we give the index of the number that we want to remove.

107
00:07:50,510 --> 00:07:52,900
So let's say we want to remove this three here.

108
00:07:52,980 --> 00:07:56,300
This has an index of 1 0 1 and 2.

109
00:07:56,640 --> 00:08:04,790
So we use list don't remove and then one and just have a quick think what is this going to output now.

110
00:08:08,100 --> 00:08:09,880
Let's run it and see if you are right.

111
00:08:10,170 --> 00:08:11,650
The answer is 5.

112
00:08:11,790 --> 00:08:15,840
Because this array has now lost the middle item.

113
00:08:15,840 --> 00:08:18,160
So it's only a 2 and a 5.

114
00:08:18,390 --> 00:08:25,220
So the item with index number 1 is the 5.

115
00:08:25,250 --> 00:08:31,850
And just to prove that to you I'll show you how we can actually display the whole of this list rather

116
00:08:31,850 --> 00:08:33,800
than just one particular item.

117
00:08:33,860 --> 00:08:36,410
We use a function that we have seen before.

118
00:08:36,950 --> 00:08:38,570
That's two string.

119
00:08:39,020 --> 00:08:45,620
So that just converts our list to a string so that we can put it in the console and see what's in there.

120
00:08:45,620 --> 00:08:46,520
So there we go.

121
00:08:46,820 --> 00:08:51,700
So the items in the list are now just a two and a five.

122
00:08:51,710 --> 00:08:52,530
All right.

123
00:08:52,530 --> 00:09:01,440
Quick challenge then can you create a list of 3 say countries and then remove an item from that list

124
00:09:01,770 --> 00:09:04,030
and add a different one in.

125
00:09:04,140 --> 00:09:10,440
So create a list of three countries remove one added in and then display it in the console.

126
00:09:10,440 --> 00:09:11,070
Good luck.

127
00:09:17,700 --> 00:09:18,550
All right.

128
00:09:18,850 --> 00:09:23,710
Well let's create a list so I'll call it countries.

129
00:09:24,180 --> 00:09:28,380
And that's going to be a new list

130
00:09:31,270 --> 00:09:32,150
just like that.

131
00:09:32,320 --> 00:09:35,180
And then we'll add our countries one by one.

132
00:09:38,800 --> 00:09:43,220
Countries not at all put England

133
00:09:46,590 --> 00:09:48,330
and then let's add another one.

134
00:09:48,640 --> 00:09:55,570
So are people local So Scotland and then

135
00:09:58,770 --> 00:09:59,400
Wales

136
00:10:03,530 --> 00:10:07,020
OK I think while I'm here I'm just going to check that that's all worked OK.

137
00:10:07,130 --> 00:10:14,560
It's just him out duck print line and then countries

138
00:10:17,570 --> 00:10:23,960
to string a case let's just make sure that created it.

139
00:10:24,070 --> 00:10:26,090
England Scotland Wales fantastic.

140
00:10:26,370 --> 00:10:34,350
So let's remove Wales to do that using countries remove.

141
00:10:34,670 --> 00:10:37,280
And then I want to remove That's the zeroth one.

142
00:10:37,550 --> 00:10:39,100
That's the first one that's the second one.

143
00:10:39,100 --> 00:10:42,370
So now do we need to.

144
00:10:42,470 --> 00:10:54,480
And then finally countries had Let's put Ireland there as a state like.

145
00:10:54,540 --> 00:10:55,020
All right.

146
00:10:55,020 --> 00:10:55,590
There we go.

147
00:10:55,670 --> 00:10:57,090
So England Scotland and Ireland.

148
00:10:57,120 --> 00:10:58,370
So we've created our right.

149
00:10:58,380 --> 00:11:03,100
We've removed an item from it and we've added one in its place.

150
00:11:03,150 --> 00:11:09,710
The last thing I want to show you in this video is maps which work in similar ways to lists.

151
00:11:09,720 --> 00:11:13,030
But something is crucially different about them.

152
00:11:13,050 --> 00:11:14,730
Let's find out what it is.

153
00:11:15,180 --> 00:11:22,830
Let's get rid of our work on lists so maps we've already imported everything that we need for that because

154
00:11:22,840 --> 00:11:27,370
we've been ported all at the Java Yuto frameworks.

155
00:11:27,600 --> 00:11:32,360
We create a map in exactly the same way as we create a list.

156
00:11:33,030 --> 00:11:36,720
So I'm going to call it math in lowercase.

157
00:11:36,820 --> 00:11:47,350
And so it's a new something but it's not an array list it's a hash map so recreate that like that.

158
00:11:48,440 --> 00:11:54,520
And now we put an item into this map and we do that using it.

159
00:11:54,900 --> 00:12:02,460
And now you'll see the difference between the hash map and an array or a list.

160
00:12:02,620 --> 00:12:05,500
So I'm going to add for example Father

161
00:12:09,620 --> 00:12:10,010
Rob

162
00:12:12,760 --> 00:12:16,570
say I just get my syntax right.

163
00:12:16,570 --> 00:12:17,270
There we go.

164
00:12:17,500 --> 00:12:23,190
So what this does is it maps farver to the value Rob.

165
00:12:23,260 --> 00:12:34,780
So whereas arrays are lists that go 0 1 2 3 4 5 on the index here we can map a certain index to a certain

166
00:12:34,780 --> 00:12:37,070
value.

167
00:12:37,100 --> 00:12:51,570
So now if we take system it's print line if I want to print a particular value I would use map don't

168
00:12:51,750 --> 00:13:03,980
get and then the key which is father so let's just make sure that that returns roll up as we would expect.

169
00:13:03,990 --> 00:13:11,520
So you can see what we're doing we're linking father to rob and then I can imagine what that

170
00:13:14,820 --> 00:13:15,570
next might be.

171
00:13:15,570 --> 00:13:25,800
So mother in this case will have as Keston and we can again use that to string function if we want to

172
00:13:25,800 --> 00:13:27,190
look at the whole of Emap

173
00:13:30,230 --> 00:13:35,560
say map talked to string Let's take a look.

174
00:13:35,580 --> 00:13:44,340
So we've got mother is Caston and father is Rob and again we can use remove.

175
00:13:44,520 --> 00:13:51,650
Not that I would ever want to of course but if we wanted to remove an item for this from this map we

176
00:13:51,650 --> 00:13:59,390
would just use the key just like that and then that would remove that item and we're left with just

177
00:13:59,690 --> 00:14:01,980
the first item.

178
00:14:02,220 --> 00:14:02,990
And finally

179
00:14:05,760 --> 00:14:12,740
as with arrays we can use map to size to tell us the number of items in the map.

180
00:14:12,740 --> 00:14:14,440
So in this case just one.

181
00:14:14,900 --> 00:14:19,830
So that's as far as we're going to go with arrays lists and maps for the moment.

182
00:14:20,090 --> 00:14:27,500
But later on we'll see how to do things like loop through an array or a list or a map find specific

183
00:14:27,500 --> 00:14:29,500
values and a lot more.

184
00:14:29,930 --> 00:14:35,840
Now we're getting close to being able to build our higher or lower app but we need one more important

185
00:14:35,840 --> 00:14:41,570
programming construct and that is the if statement and we'll look at that and how it works in Java in

186
00:14:41,570 --> 00:14:42,360
the next video.
