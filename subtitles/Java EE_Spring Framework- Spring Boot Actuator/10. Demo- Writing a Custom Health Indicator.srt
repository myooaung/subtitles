1
00:00:01,178 --> 00:00:02,654
Alright, enough with the slides.

2
00:00:02,654 --> 00:00:07,960
Let's go ahead and add a custom HealthIndicator to our demo application.

3
00:00:07,960 --> 00:00:11,155
In this demo, we'll write our own custom HealthIndicator.

4
00:00:11,155 --> 00:00:14,483
Remember that our demo application utilizes an in-memory

5
00:00:14,483 --> 00:00:17,561
database to store its to-do lists and items.

6
00:00:17,561 --> 00:00:21,571
If the amount of memory configured for the JVM is not big

7
00:00:21,571 --> 00:00:23,922
enough to store our in-memory database,

8
00:00:23,922 --> 00:00:26,385
we'll definitely have problems with our app.

9
00:00:26,385 --> 00:00:29,195
Ensuring that our application is started with an adequate

10
00:00:29,195 --> 00:00:32,066
amount of memory is critical to its health.

11
00:00:32,066 --> 00:00:35,856
We can capture this by writing our own custom HealthIndicator.

12
00:00:35,856 --> 00:00:42,872
First, create a new package inside the main package called health.

13
00:00:42,872 --> 00:00:51,073
In the new package, we'll create a new class called MaxMemoryHealthIndicator.

14
00:00:51,073 --> 00:00:53,716
Annotate the class with the @Component annotation,

15
00:00:53,716 --> 00:00:59,854
then implement the HealthIndicator interface along with its one method,

16
00:00:59,854 --> 00:01:00,772
health.

17
00:01:00,772 --> 00:01:04,444
In the health method,

18
00:01:04,444 --> 00:01:06,939
we'll retrieve the maximum configured memory by

19
00:01:06,939 --> 00:01:12,153
calling Runtime.getRuntime .maxMemory.

20
00:01:12,153 --> 00:01:14,891
We can then compare this to an arbitrary value.

21
00:01:14,891 --> 00:01:18,582
For demo purposes, we'll use 100 MB.

22
00:01:18,582 --> 00:01:21,644
We set the value of this to a Boolean to indicate whether

23
00:01:21,644 --> 00:01:23,908
or not we have a valid amount of memory.

24
00:01:23,908 --> 00:01:28,504
Then we create a new status object called status and return status.down

25
00:01:28,504 --> 00:01:33,330
if don't have enough memory or status.up if we do.

26
00:01:33,330 --> 00:01:33,845
Lastly,

27
00:01:33,845 --> 00:01:38,319
we used a health class to build and return a new health instance

28
00:01:38,319 --> 00:01:42,826
with our particular status set by calling Health.status and then

29
00:01:42,826 --> 00:01:46,429
passing in the status followed by build.

30
00:01:46,429 --> 00:01:47,878
Before we start our application,

31
00:01:47,878 --> 00:01:51,095
it'll be helpful to configure a property so that we can see the

32
00:01:51,095 --> 00:01:54,111
details in the response of our health endpoint call.

33
00:01:54,111 --> 00:01:56,878
By default, no details are provided.

34
00:01:56,878 --> 00:01:58,417
Navigate to the src, main,

35
00:01:58,417 --> 00:02:02,435
resources folder and open up the application.properties.

36
00:02:02,435 --> 00:02:05,460
In the application.properties, add a new property,

37
00:02:05,460 --> 00:02:13,677
management.endpoint .health .show -details and equals always.

38
00:02:13,677 --> 00:02:17,306
Now typically you wouldn't want to set this to always unless you had an

39
00:02:17,306 --> 00:02:20,089
adequately secure health endpoint via other means.

40
00:02:20,089 --> 00:02:23,613
However, for demo purposes, it's okay for now.

41
00:02:23,613 --> 00:02:27,151
Alright, now we're ready to start that application up and try things out.

42
00:02:27,151 --> 00:02:30,852
Right-click on the main application class and go to Run.

43
00:02:30,852 --> 00:02:37,526
Fire up a browser and visit localhost:8080/actuator/health.

44
00:02:37,526 --> 00:02:38,048
In the response,

45
00:02:38,048 --> 00:02:41,379
you can see that we get a much more detailed response than what we

46
00:02:41,379 --> 00:02:44,984
previously saw where it was just up or down.

47
00:02:44,984 --> 00:02:47,586
We could also see that there is now a check called maxMemory

48
00:02:47,586 --> 00:02:56,000
and it has a status of UP indicating that our application was started with enough memory.

