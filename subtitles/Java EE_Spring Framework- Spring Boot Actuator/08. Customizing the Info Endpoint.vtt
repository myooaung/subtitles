WEBVTT
1
00:00:01.244 --> 00:00:04.470
Next up, let's look at customizing the info endpoint.

2
00:00:04.470 --> 00:00:06.913
Customizing the info endpoint follows a very similar

3
00:00:06.913 --> 00:00:08.923
pattern to the health endpoint.

4
00:00:08.923 --> 00:00:11.305
Rather than implement a health indicator,

5
00:00:11.305 --> 00:00:16.885
you create a register a new bean that implements the InfoContributor interface.

6
00:00:16.885 --> 00:00:20.270
This interface has one method called contribute and

7
00:00:20.270 --> 00:00:23.515
passes in an Info.Builder argument.

8
00:00:23.515 --> 00:00:27.014
The Info.Builder that's passed in can then be used to add

9
00:00:27.014 --> 00:00:28.556
additional information to the response.

10
00:00:28.556 --> 00:00:31.867
To help you understand, let's look at another code example.

11
00:00:31.867 --> 00:00:34.216
We create a new class that implements the InfoContributor

12
00:00:34.216 --> 00:00:38.007
interface and annotate it with the @Component annotation

13
00:00:38.007 --> 00:00:40.348
so it's registered as a bean.

14
00:00:40.348 --> 00:00:43.274
We implement the one required method, the contribute method,

15
00:00:43.274 --> 00:00:44.595
and in this example,

16
00:00:44.595 --> 00:00:48.045
we use the Info.Builder argument to add additional

17
00:00:48.045 --> 00:00:50.074
information about the project.

18
00:00:50.074 --> 00:00:53.649
It's common when building microservices for a particular team to own

19
00:00:53.649 --> 00:00:57.017
and be responsible for one or more microservices.

20
00:00:57.017 --> 00:00:58.197
So in our example here,

21
00:00:58.197 --> 00:01:00.678
we've added some additional info to the info

22
00:01:00.678 --> 00:01:03.949
endpoint about the name of the project, what team owns it,

23
00:01:03.949 --> 00:01:06.597
and who is the main point of contact.

24
00:01:06.597 --> 00:01:10.911
You can imagine that if all microservices implemented this same info,

25
00:01:10.911 --> 00:01:13.269
a dashboard could be created that shows the project,

26
00:01:13.269 --> 00:01:16.608
the team, and the main point of contact.

27
00:01:16.608 --> 00:01:19.624
This would be a useful dashboard for anyone that's supporting the

28
00:01:19.624 --> 00:01:22.994
operation of the application in a production environment.

29
00:01:22.994 --> 00:01:24.052
In the event of an issue,

30
00:01:24.052 --> 00:01:27.147
they could look at the dashboard and figure out the right person to contact.

31
00:01:27.147 --> 00:01:30.055
This would be a much more dynamic solution rather than

32
00:01:30.055 --> 00:01:35.000
putting this information on a static wiki page, for instance.

