WEBVTT
1
00:00:01.186 --> 00:00:04.603
The last endpoint we'll learn how to customize is the metrics endpoint.

2
00:00:04.603 --> 00:00:05.581
As we learned previously,

3
00:00:05.581 --> 00:00:08.277
the metrics endpoint provides a number of useful

4
00:00:08.277 --> 00:00:10.885
metrics about your running application.

5
00:00:10.885 --> 00:00:15.456
We can customize it by adding our own metrics to the existing metrics.

6
00:00:15.456 --> 00:00:18.410
There is a couple of different ways to customize the metrics endpoint,

7
00:00:18.410 --> 00:00:23.320
but the easiest is to inject a MeterRegistry into the class that's generating

8
00:00:23.320 --> 00:00:28.250
the metrics and then use or record the metric in that class.

9
00:00:28.250 --> 00:00:30.577
Let's take a look at some example code.

10
00:00:30.577 --> 00:00:34.921
Suppose we had a really complex service that had a long-running operation.

11
00:00:34.921 --> 00:00:38.402
We know that the method takes a long time to execute and we want

12
00:00:38.402 --> 00:00:42.149
to regularly record how long so we can keep track of it over time

13
00:00:42.149 --> 00:00:44.435
and make sure it's not getting worse.

14
00:00:44.435 --> 00:00:47.235
We can do that by injecting a meter registry and

15
00:00:47.235 --> 00:00:50.776
creating a new named timer metric.

16
00:00:50.776 --> 00:00:55.230
We can then use that timer to record the execution time taken by that method.

17
00:00:55.230 --> 00:00:57.572
The MeterRegistry class comes from the micrometer library,

18
00:00:57.572 --> 00:01:02.136
which is a technology agnostic library for collecting metrics.

19
00:01:02.136 --> 00:01:10.000
It supports things like timers which we just used, as well as other metric collectors, such as counters or gauges.

