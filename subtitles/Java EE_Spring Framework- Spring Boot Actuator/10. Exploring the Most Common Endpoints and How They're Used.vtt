WEBVTT
1
00:00:01.288 --> 00:00:03.840
I find that it's often helpful to understand how something

2
00:00:03.840 --> 00:00:06.425
is used to better understand its purpose.

3
00:00:06.425 --> 00:00:10.133
So let's take a minute and go over a few of the most commonly used

4
00:00:10.133 --> 00:00:13.411
endpoints and a scenario of when they might be used.

5
00:00:13.411 --> 00:00:14.052
First off,

6
00:00:14.052 --> 00:00:17.158
there's the health endpoint and I'd say that this one is probably

7
00:00:17.158 --> 00:00:20.600
the most used endpoint in Spring Boot Actuator.

8
00:00:20.600 --> 00:00:22.681
With cloud data applications and especially microservices,

9
00:00:22.681 --> 00:00:26.811
checking the health of your application is a regular thing.

10
00:00:26.811 --> 00:00:30.270
It's also a very important thing and so many container

11
00:00:30.270 --> 00:00:34.545
management systems like Docker Swarm or Kubernetes come with

12
00:00:34.545 --> 00:00:38.376
functionality to regular run a health check.

13
00:00:38.376 --> 00:00:41.730
The Spring Boot Actuator health endpoint can serve that purpose.

14
00:00:41.730 --> 00:00:44.918
It can be the endpoint that is regularly called.

15
00:00:44.918 --> 00:00:45.234
Next,

16
00:00:45.234 --> 00:00:48.886
there is the metrics endpoint and being able to see inside of

17
00:00:48.886 --> 00:00:51.081
your live application while it's running,

18
00:00:51.081 --> 00:00:53.917
especially in a production environment, is really,

19
00:00:53.917 --> 00:00:57.909
really useful and that's exactly what the metrics endpoint is for.

20
00:00:57.909 --> 00:01:00.887
You can use it for requesting individual metrics like the amount of

21
00:01:00.887 --> 00:01:05.110
memory that your application is using or you can use it to drive

22
00:01:05.110 --> 00:01:08.639
performance dashboards like Grafana, or New Relic,

23
00:01:08.639 --> 00:01:14.258
or DataDog and it allows you to have constant insight into your application.

24
00:01:14.258 --> 00:01:16.016
Last up is the loggers endpoint.

25
00:01:16.016 --> 00:01:19.091
How many times would you say you've had a situation where you wish you

26
00:01:19.091 --> 00:01:22.536
could change the log level of a running application,

27
00:01:22.536 --> 00:01:26.876
and not only change it, but change it without restarting your application.

28
00:01:26.876 --> 00:01:29.537
We've all been there before and that's exactly why

29
00:01:29.537 --> 00:01:32.127
the loggers endpoint is so useful.

30
00:01:32.127 --> 00:01:32.580
In production,

31
00:01:32.580 --> 00:01:36.046
you can turn on debug logging for a short period of time to

32
00:01:36.046 --> 00:01:39.098
get better diagnostic data and then you can turn it off so

33
00:01:39.098 --> 00:01:48.000
it doesn't fill up your logs, all while the application is still running. Let's do a quick demo on some of these endpoints in action.

