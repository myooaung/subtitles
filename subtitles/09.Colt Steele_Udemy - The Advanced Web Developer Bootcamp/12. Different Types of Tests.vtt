WEBVTT
1
00:00:00.330 --> 00:00:01.110
Welcome back.

2
00:00:01.260 --> 00:00:05.580
In this video we're going to learn about different kinds of testing and recap what we've learned about

3
00:00:05.580 --> 00:00:08.960
unit testing with Jasmine as your first writing tests.

4
00:00:08.970 --> 00:00:11.570
You'll probably be writing mostly unit tests.

5
00:00:11.640 --> 00:00:16.050
These are tests which are written for one small component or unit of your application.

6
00:00:16.160 --> 00:00:19.500
They were meant to test the individual pieces of our application.

7
00:00:19.500 --> 00:00:24.330
Unit tests are written for the purpose of proving that the units or parts of your application behave

8
00:00:24.360 --> 00:00:27.310
as expected before they're put together.

9
00:00:27.330 --> 00:00:31.660
While this helps with each unit our application may fail when our units are combined.

10
00:00:31.950 --> 00:00:37.620
This leads us to integration testing integration testing is meant to test the integration of our units

11
00:00:37.620 --> 00:00:39.840
or larger parts of our application.

12
00:00:39.840 --> 00:00:43.140
Here we test more than one unit and how they function together.

13
00:00:43.140 --> 00:00:45.690
Integration testing builds off of unit testing.

14
00:00:45.930 --> 00:00:50.340
And although you'll most commonly writing unit tests it's important to understand that there are other

15
00:00:50.340 --> 00:00:53.820
kinds of tests that assess how our units behave together.

16
00:00:53.820 --> 00:00:58.980
There also exists a type of testing called acceptance testing acceptance testing involves performing

17
00:00:58.980 --> 00:01:04.200
tests on the full system which could be using your application in the browser or on a device to see

18
00:01:04.200 --> 00:01:08.610
whether the applications functionality satisfies a specification provided.

19
00:01:08.640 --> 00:01:12.150
Here we are simply testing to see if something is acceptable or not.

20
00:01:12.150 --> 00:01:17.670
The purpose of acceptance tests is to evaluate the entire business or system requirements not to test

21
00:01:17.670 --> 00:01:21.420
how one unit or how multiple units are integrated together.

22
00:01:21.600 --> 00:01:24.450
The last type of testing we'll discuss is stress testing.

23
00:01:24.600 --> 00:01:30.120
The idea behind stress testing is to determine how effective our applications can be under unfavorable

24
00:01:30.120 --> 00:01:31.320
conditions.

25
00:01:31.320 --> 00:01:36.480
These conditions include systems going down high traffic or other types of scenarios that may not be

26
00:01:36.480 --> 00:01:37.000
common.

27
00:01:37.080 --> 00:01:38.940
What can happen to an application.

28
00:01:39.150 --> 00:01:42.720
To recap unit testing involves testing pieces of functionality.

29
00:01:42.720 --> 00:01:47.760
The idea here is that we test parts of our application to make sure they're doing what we expect in

30
00:01:47.760 --> 00:01:49.140
order to write our unit tests.

31
00:01:49.140 --> 00:01:53.430
We've seen jazzmen a testing framework that allows us to easily write unit tests.

32
00:01:53.760 --> 00:01:59.340
Jasmine provides the essential keywords and functions like describe it and extract so that we can easily

33
00:01:59.340 --> 00:02:01.560
group and describe our tests.

34
00:02:01.560 --> 00:02:06.180
Jasmine also has quite a few matters for testing almost any kind of expectation.

35
00:02:06.210 --> 00:02:10.030
We've seen some common ones like to be equal and to contain.

36
00:02:10.440 --> 00:02:16.700
You've also seen how to check for data types using jazzmen that any We saw used before each after each

37
00:02:16.710 --> 00:02:21.300
before all and after all Hooke's to reduce duplication and confusion.

38
00:02:21.300 --> 00:02:26.220
When you find yourself repeating variable assignments over and over try to refactor using one of these

39
00:02:26.220 --> 00:02:33.290
hooks We then examine spies which Jasminum carbides for mocking or mimicking the behavior of a function.

40
00:02:33.300 --> 00:02:37.640
We saw how to test parameters and return values to functions using spies.

41
00:02:37.650 --> 00:02:43.650
We also had a test timers in dates using clocks as well as asynchronous code by passing a function to

42
00:02:43.650 --> 00:02:46.240
be it callback and invoking it.

43
00:02:46.350 --> 00:02:52.170
Next we saw some different testing philosophies including TDD which uses a red green refactor approach

44
00:02:52.470 --> 00:02:58.820
and BDD which is a subset of TDD and makes use of more descriptive or behavioral testing.

45
00:02:58.890 --> 00:03:05.580
Jasmine is a BDD style framework as it provides functions like describe it to better explain the behavior

46
00:03:05.580 --> 00:03:08.130
of the functionality that we want to test.

47
00:03:08.130 --> 00:03:13.380
Finally we saw that unit testing is just one part of testing applications but working with unit tests

48
00:03:13.380 --> 00:03:19.120
is a large part of what you will do as a developer especially when working on larger production applications.

49
00:03:19.470 --> 00:03:22.440
Thanks again for watching the section on unit testing with jazzmen.

50
00:03:22.440 --> 00:03:23.340
Do you have any questions.

51
00:03:23.340 --> 00:03:24.420
Be sure to let us know.

52
00:03:24.450 --> 00:03:25.690
We're around to help.

53
00:03:25.710 --> 00:03:27.660
Thanks again for watching and I'll see you in the next section.
