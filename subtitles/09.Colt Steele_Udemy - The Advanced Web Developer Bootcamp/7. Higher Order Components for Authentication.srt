1
00:00:00,100 --> 00:00:01,460
Hooray right we're in the homestretch.

2
00:00:01,520 --> 00:00:06,480
It's time to start thinking about how to create a new message for each of these users.

3
00:00:07,260 --> 00:00:13,520
So when you click on new message right now and then I-bar we're going to the correct I.D. for that user.

4
00:00:13,520 --> 00:00:18,710
But we want to do is now build a form to a user to create a message.

5
00:00:18,710 --> 00:00:24,230
So let's go back and head over to our main dodginess because here we need a new route to render this

6
00:00:24,230 --> 00:00:25,830
form.

7
00:00:25,940 --> 00:00:33,470
So that mean yes we'll make sure that we have a route that goes to slash users slash users some user

8
00:00:33,470 --> 00:00:37,400
id slash messages slash new we can call them whatever we want.

9
00:00:37,400 --> 00:00:39,990
We just want to make sure we get the correct user ID inside.

10
00:00:40,280 --> 00:00:45,000
So I say slash users so some kind of ID slash messages slash new.

11
00:00:45,440 --> 00:00:49,640
And when we go there we're going to render a component called message for

12
00:00:54,310 --> 00:00:55,000
now.

13
00:00:55,160 --> 00:01:01,130
We don't just want to render a message forum for anybody we want to render it only users who have logged

14
00:01:01,130 --> 00:01:02,690
in.

15
00:01:02,890 --> 00:01:06,020
So here's we're going introduce the idea of a higher order component.

16
00:01:06,340 --> 00:01:11,770
We also call these Hock's a higher order component is simply a function that wraps another component.

17
00:01:12,040 --> 00:01:17,110
So let's make a higher order component called with off usually haul are higher rated components with

18
00:01:17,200 --> 00:01:17,990
something.

19
00:01:18,400 --> 00:01:25,150
So with off he's going to handle validation to make sure that a user is locked in before they see that

20
00:01:25,150 --> 00:01:25,850
component.

21
00:01:26,820 --> 00:01:29,750
So if the user has Loddon let them go to see that component.

22
00:01:29,760 --> 00:01:31,650
Otherwise take them somewhere else.

23
00:01:31,650 --> 00:01:36,240
So it's only going to look like it's actually going to be very similar to other components are going

24
00:01:36,240 --> 00:01:41,860
to react and component from re-act.

25
00:01:41,970 --> 00:01:50,300
We're also going to import connect from reata redux and at some point that we have connect from re-act

26
00:01:50,300 --> 00:01:55,530
redux because we need to connect to a redux store to see if that user is authenticated.

27
00:01:55,820 --> 00:02:02,040
So right off the bat we'll export a default function and we can call this function really whatever we

28
00:02:02,040 --> 00:02:03,420
like.

29
00:02:03,450 --> 00:02:04,780
We'll keep an anonymous for now.

30
00:02:06,740 --> 00:02:09,820
Inside will also make a function for mask the props.

31
00:02:10,100 --> 00:02:16,580
And here we'll get some state from redox and we're going to grab onto props something called is authenticated

32
00:02:17,180 --> 00:02:22,580
which is going to be state that current user that is authenticated that's a bullion that we're going

33
00:02:22,580 --> 00:02:29,480
to use to see if the user has logged in or not will then return connect with Napster to prop's in some

34
00:02:29,480 --> 00:02:33,410
kind of component will call this component authenticate.

35
00:02:34,040 --> 00:02:36,020
So what does authenticate what.

36
00:02:36,050 --> 00:02:44,510
Inside of this function we're going to make a class called authenticate and it's going to extend component

37
00:02:45,660 --> 00:02:49,850
this function is going to accept some kind of component that will render.

38
00:02:49,850 --> 00:02:52,980
So we can call that component to be rendered.

39
00:02:53,100 --> 00:02:57,280
So you call it function whatever we like but we can call it with off if we like.

40
00:03:00,160 --> 00:03:01,740
And this is what we're going to export.

41
00:03:02,170 --> 00:03:05,320
And we'll wrap it with some kind of component to be rendered when we use it.

42
00:03:06,800 --> 00:03:09,920
That's how we're going to execute that higher order component.

43
00:03:09,980 --> 00:03:11,590
So instead of your we don't need to do too much.

44
00:03:11,600 --> 00:03:13,120
We just need a couple of lifecycle.

45
00:03:13,130 --> 00:03:15,710
That's the first one we'll use this component will mount.

46
00:03:15,920 --> 00:03:22,300
So when this component mounts we want to make sure if not this not Propst is authenticated.

47
00:03:22,340 --> 00:03:27,800
So basically if this process that is authenticated is false if you want to be more explicit if it's

48
00:03:27,800 --> 00:03:31,790
false We're then going to say this Obstat history of push.

49
00:03:32,060 --> 00:03:37,470
And since we're using Riak rather we'll have access to the history object and we can just redirect will

50
00:03:37,520 --> 00:03:41,440
do the same thing with a different lifecycle method with component well.

51
00:03:41,760 --> 00:03:46,650
So many of the component updates because of any kind of C-Change whether that's real estate or yak's

52
00:03:46,660 --> 00:03:54,140
they will see if any of the next prop's that that component is getting there still authenticated.

53
00:03:54,140 --> 00:03:56,530
So if next promise that is authenticated is also false.

54
00:03:56,540 --> 00:03:59,220
We're still going to redirect the slash seinen.

55
00:03:59,390 --> 00:04:02,030
So on the component first loads the users to log in.

56
00:04:02,330 --> 00:04:06,250
And if the company changes for any reason we want to make sure that users are in.

57
00:04:06,380 --> 00:04:11,870
And here we're just going to render and it's over render we'll just return that component to be rendered

58
00:04:12,260 --> 00:04:16,310
along with any prop's.

59
00:04:17,020 --> 00:04:23,260
So we've written a function that gives us a class and a class simply returns another component.

60
00:04:23,710 --> 00:04:33,160
What we're going to do with this is inside of our Mingy as we're going to import with off from that

61
00:04:33,230 --> 00:04:39,270
I-Slash Hock's slash with off so we can bring in our with all function.

62
00:04:39,730 --> 00:04:44,100
And we're going to use it when we render our message form component.

63
00:04:44,350 --> 00:04:47,760
So will that message form with our function called with off

64
00:04:52,540 --> 00:04:55,380
and make sure that this is returning correctly.

65
00:04:55,870 --> 00:05:00,040
Looks like we just need to make sure that our class wraps everything we'll syntax error there make sure

66
00:05:00,040 --> 00:05:04,210
that Matthysse to promise is inside of the definition of the class and return is inside the definition

67
00:05:04,240 --> 00:05:05,270
as well.

68
00:05:05,740 --> 00:05:09,550
So here we see message form is not defined and that's inside of me and Aggi as well.

69
00:05:09,550 --> 00:05:12,840
We have to make our message for him and we'll do that in the next section.
