WEBVTT
1
00:00:02.580 --> 00:00:02.840
All right.

2
00:00:02.850 --> 00:00:09.630
So we just implemented the for each function where we iterate over each element in our array and invoked

3
00:00:09.630 --> 00:00:10.620
our callback.

4
00:00:10.620 --> 00:00:15.090
Now we're going to look at a similar function called find index.

5
00:00:15.090 --> 00:00:22.280
Our objectives are to describe and use the find index function and then you'll implement find the next

6
00:00:22.290 --> 00:00:25.730
on your own.

7
00:00:25.740 --> 00:00:32.370
So first of all the find index method is a function that returns the index of the first element in the

8
00:00:32.370 --> 00:00:36.800
array for which the callback returns a truth value.

9
00:00:36.900 --> 00:00:41.750
That may seem a little hard to understand at first but we'll see some examples.

10
00:00:41.880 --> 00:00:49.080
If find index doesn't find an element that returns a truthy value then the result of find index is negative

11
00:00:49.080 --> 00:00:55.640
1 so negative one is returned if the callback never returns the truth value.

12
00:00:55.640 --> 00:00:58.490
So this is the definition of find index.

13
00:00:58.490 --> 00:01:02.330
First it'll take an array just like for each and for the second premiÃ¨re.

14
00:01:02.330 --> 00:01:03.410
Also take callback

15
00:01:06.280 --> 00:01:07.880
and just like for each.

16
00:01:07.960 --> 00:01:13.060
The first element is going to be the element that were on the the second parameter here will be our

17
00:01:13.390 --> 00:01:17.860
index that we're on and the third parameter is our entire array.

18
00:01:17.860 --> 00:01:20.840
Let's look at an example of find index.

19
00:01:20.950 --> 00:01:24.320
So in this example the array is passed in the first parameter.

20
00:01:24.340 --> 00:01:30.000
3 4 6 to 1 and then our callback function will just return.

21
00:01:30.190 --> 00:01:38.380
If our current element name is equal to the value 6 so this expression will be truthy when the value

22
00:01:39.280 --> 00:01:42.990
is equal to 6 and falsie otherwise.

23
00:01:43.360 --> 00:01:49.240
So the way this work will invoke are called back on three and will get a false value or invoke it with

24
00:01:49.240 --> 00:01:56.490
4 and get a Fosi value and then will invoke it was 6 and get a truthy value because 6 is equal to 6.

25
00:01:56.980 --> 00:02:03.230
And then what find index returns which is different from what our callback is returning is the element

26
00:02:03.260 --> 00:02:06.080
that we're on when we get a truth value.

27
00:02:06.080 --> 00:02:11.780
So since this returns the truth the value element that we're going to return or the index that we're

28
00:02:11.780 --> 00:02:20.530
going to return is two because for that element 6 we were on index to when a truthy value is returned.

29
00:02:20.540 --> 00:02:24.430
So as I mentioned our return result here is going to be too.

30
00:02:25.380 --> 00:02:27.710
Okay let's look at another example.

31
00:02:27.710 --> 00:02:35.240
So this time we've got an array 5 11 13 8 6 7 and we're going to invoke find index passing in our array

32
00:02:35.360 --> 00:02:40.500
and then our callback function and our callback function is doing something different here.

33
00:02:40.580 --> 00:02:43.860
It's checking if the number is divisible by 2.

34
00:02:43.970 --> 00:02:49.850
So the modulus operator checks how many times can I divide 2 into that number and then what remainder

35
00:02:49.850 --> 00:02:50.700
will I get.

36
00:02:50.990 --> 00:02:53.820
So if it's an even number we'll get back to zero.

37
00:02:53.840 --> 00:02:55.710
It's an odd number we'll get back of 1.

38
00:02:55.970 --> 00:03:01.680
So in this case the number five will return 1.

39
00:03:01.940 --> 00:03:03.500
Right so that's not equal to zero.

40
00:03:03.500 --> 00:03:08.810
That's a false value 11 will also return a remainder of 1 which is not equal to zero.

41
00:03:08.810 --> 00:03:11.970
That's falsie 13 will also be falsie.

42
00:03:12.020 --> 00:03:19.250
And then finally 8 will be truthy because eight maade to return 0 0 is equal to zero and will return

43
00:03:19.250 --> 00:03:20.180
true.

44
00:03:20.180 --> 00:03:25.760
So the value that gets returned from find index remember is not the element that we're on which is a

45
00:03:26.120 --> 00:03:29.800
but rather the index that we're on whenever truthy value is returned.

46
00:03:30.020 --> 00:03:34.820
So in this example what will get returned is 0 1 2 3.

47
00:03:34.910 --> 00:03:39.770
The third index or the index number three the fourth element.

48
00:03:39.890 --> 00:03:44.860
So our result is going to be 3.

49
00:03:45.040 --> 00:03:48.300
So what happens with find index when we never find something.

50
00:03:48.490 --> 00:03:51.220
As you mentioned before it will get negative 1.

51
00:03:51.250 --> 00:03:56.290
So in this example we have an array of languages Java C++ Python and Ruby.

52
00:03:56.650 --> 00:04:02.830
And we're going to call find index with a callback function that essentially checks is the current element

53
00:04:02.830 --> 00:04:05.470
the current language equal to Javascript.

54
00:04:05.680 --> 00:04:09.430
And given this array we're never going to find an element equal to Javascript.

55
00:04:09.430 --> 00:04:14.640
So Java is not equal to javascript that would turn falsie C++ is not falsie.

56
00:04:14.950 --> 00:04:17.490
Python is also not will get a falsie value.

57
00:04:17.710 --> 00:04:18.990
And finally Ruby is not.

58
00:04:19.030 --> 00:04:26.740
Will also get a Fasi value so this will always return to falsie value which means we'll get back negative

59
00:04:26.740 --> 00:04:31.470
1 which is the result you always get back when you never find the truth value.

60
00:04:31.600 --> 00:04:34.020
You never return the value I should say.

61
00:04:34.750 --> 00:04:36.980
So the answer there is negative 1.

62
00:04:36.980 --> 00:04:41.510
Here's an example of a comes take that people make when they implement their callback functions with

63
00:04:41.510 --> 00:04:42.910
find index.

64
00:04:42.920 --> 00:04:46.530
So here now we have javascript as an element in our array.

65
00:04:47.000 --> 00:04:52.730
And if you think about our last example it should return a truth value because the language that we're

66
00:04:52.730 --> 00:04:55.750
looking forward checking if it's equal to javascript.

67
00:04:56.240 --> 00:05:02.540
But remember find index returns the index for which the callback returns a truth value.

68
00:05:02.810 --> 00:05:07.730
And if you look closely here this callback function doesn't actually return anything.

69
00:05:07.760 --> 00:05:14.090
We have our comparison here for language equal to javascript but that's not actually returned from our

70
00:05:14.090 --> 00:05:15.470
callback function.

71
00:05:15.500 --> 00:05:22.640
So in a function in javascript if we don't return anything the return value is undefined which is always

72
00:05:22.640 --> 00:05:23.630
falsie.

73
00:05:23.660 --> 00:05:29.930
So in this example no matter what we have here we're going to get negative one because there's nothing

74
00:05:29.930 --> 00:05:33.380
returned and if we don't return something again we'll get undefined.

75
00:05:33.410 --> 00:05:36.040
So our answer is negative one.

76
00:05:36.050 --> 00:05:37.310
All right now it's your turn.

77
00:05:37.550 --> 00:05:42.080
So think about how find index works and try to implement it on your own.

78
00:05:42.140 --> 00:05:45.450
If you get stuck Don't worry we'll have a solution coming up next.
