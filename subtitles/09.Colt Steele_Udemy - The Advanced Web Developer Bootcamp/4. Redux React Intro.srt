1
00:00:00,220 --> 00:00:04,460
It right at the moment you've all been waiting for some time to connect react with redux.

2
00:00:04,470 --> 00:00:06,520
There are quite a few steps to make this work.

3
00:00:06,660 --> 00:00:11,250
So we might even have to break this one into two screencast But what we're going to do is simply start

4
00:00:11,400 --> 00:00:15,760
by building a reactor application and then we're going to introduce redux.

5
00:00:15,780 --> 00:00:18,840
We're going to start with a good old fashioned tried and true to do app.

6
00:00:18,840 --> 00:00:24,110
So what I'm going to do is create a new re-act app and we'll call that re-act redux.

7
00:00:24,120 --> 00:00:31,260
That is what's going to give that a second to install and what we want to think about here is how to

8
00:00:31,260 --> 00:00:37,970
build a small re-act application as well as make sure that we integrate redux with this.

9
00:00:38,100 --> 00:00:44,130
We're going to use Rydex to store our dues and we're going to use react to display those to use and

10
00:00:44,130 --> 00:00:49,710
in order to do that we can't just install redox we need to install another library to connect the two

11
00:00:49,710 --> 00:00:50,440
together.

12
00:00:50,850 --> 00:00:54,720
And that library is beautifully named react redux.

13
00:00:54,720 --> 00:00:58,890
And just when you thought you were getting a grasp on redux and things get more complex Unfortunately

14
00:00:58,890 --> 00:01:01,430
we have to add a little bit more complexity to this.

15
00:01:01,590 --> 00:01:09,000
So inside of here I'm going to install redux and react dash redux react dash redux is essential for

16
00:01:09,000 --> 00:01:12,870
connecting redux and react.

17
00:01:13,030 --> 00:01:13,900
How do we use it.

18
00:01:13,930 --> 00:01:20,170
Well it's a bit of a two step process before we worry about any reactant redux why don't we start by

19
00:01:20,170 --> 00:01:24,410
building a very simple to do application but we're going to do this all in react.

20
00:01:24,700 --> 00:01:28,590
So we're going to start simply inside of our SIRC folder.

21
00:01:28,630 --> 00:01:31,320
We're going to make a new file we'll call that to do list.

22
00:01:31,500 --> 00:01:36,000
Yes will also make something call to do that yes.

23
00:01:36,040 --> 00:01:38,060
So let's imagine there was no redux in the mix.

24
00:01:38,080 --> 00:01:40,320
How would we build a very simple to do list.

25
00:01:40,510 --> 00:01:45,370
Well we'd start in are actually asked by taking out a whole bunch of stuff maybe inside of here will

26
00:01:45,370 --> 00:01:52,860
say See Archdukes and all we're going to do here is render that to do list component.

27
00:01:52,860 --> 00:01:56,420
So inside of this to do list we're not going to get very far if we don't import it.

28
00:01:56,440 --> 00:02:02,620
So we're going to import to do list from dot slash to do list.

29
00:02:02,620 --> 00:02:05,100
Now we actually have to do some work in this to do list component.

30
00:02:05,170 --> 00:02:06,750
So we're going to do the tried and true.

31
00:02:06,880 --> 00:02:12,410
We're going to import reactors as well as component from reactor.

32
00:02:12,600 --> 00:02:13,890
What else do we need to do here.

33
00:02:14,050 --> 00:02:16,600
Well let's go actually make this component.

34
00:02:16,600 --> 00:02:17,570
How do we do that.

35
00:02:17,720 --> 00:02:18,490
Let's make it class.

36
00:02:18,490 --> 00:02:22,650
We'll call this to do list and we can export this as the default as well.

37
00:02:22,900 --> 00:02:26,280
And that is our to do list and it extends component.

38
00:02:27,280 --> 00:02:28,710
And what do we want to do inside of here.

39
00:02:28,780 --> 00:02:34,870
We want some kind of constructor with some props or call super props if we ever want to pass anything

40
00:02:34,870 --> 00:02:37,780
down and maybe we'll set some state.

41
00:02:38,140 --> 00:02:44,650
That state is going to be object and it's going to contain some to deuse maybe those to do's will eat

42
00:02:44,710 --> 00:02:49,090
eat and sleep and go home.

43
00:02:49,120 --> 00:02:52,480
And what I'd like to do is render all of those to Duse.

44
00:02:52,660 --> 00:02:58,570
So inside of my render function I'm going to return all of those to do this but I don't want to just

45
00:02:58,570 --> 00:02:59,370
return the text.

46
00:02:59,380 --> 00:03:02,910
I want to return a component that contains that text.

47
00:03:02,950 --> 00:03:10,720
So what I'll say is let my dues be this that's the DOT to use and I'll map over all of them and I'll

48
00:03:10,720 --> 00:03:12,780
get that to do and some kind of index.

49
00:03:12,820 --> 00:03:17,680
And you might know by now it's not best to use an index for keys but we're going to keep things really

50
00:03:17,680 --> 00:03:24,040
simple right now what we're going to do is simply make a to do component but to do component is going

51
00:03:24,040 --> 00:03:31,510
to have some kind of task which is going to be let's call this just a task that's going to be the task

52
00:03:32,080 --> 00:03:38,290
and some kind of key of index is all we're going to do and we don't even need to close this make that

53
00:03:38,290 --> 00:03:39,210
self-closing.

54
00:03:39,340 --> 00:03:41,360
So we're going to pass those to do's down there.

55
00:03:41,500 --> 00:03:47,160
But how do we do that we've got to import to do from dot slash to do we have made this component yet.

56
00:03:47,170 --> 00:03:48,300
But that's OK.

57
00:03:48,400 --> 00:03:52,880
We're going to return a div and inside of this div we'll place our two.

58
00:03:53,650 --> 00:03:58,120
So let's go back to our to do component and remember our to do component is going to get some kind of

59
00:03:58,120 --> 00:03:59,890
Propp of task.

60
00:03:59,920 --> 00:04:01,420
So how do we do that.

61
00:04:01,570 --> 00:04:06,940
Well we could go back and import react and everything but what do we really want to make here we can

62
00:04:06,940 --> 00:04:14,110
just make a stateless functional component is all they can to do is going to be a function and we can

63
00:04:14,110 --> 00:04:20,110
be even fancier and use an arrow function right here because we can simply just return some value from

64
00:04:20,110 --> 00:04:25,590
this arrow function and we're going to get some props and we can be even fancier and the structure just

65
00:04:25,600 --> 00:04:27,280
the Propp of task.

66
00:04:27,280 --> 00:04:31,960
So all we're really going to do here is actually instead of making this a div we're going to make this

67
00:04:32,020 --> 00:04:38,100
a div and then inside when we can an ordered list and inside of this unordered list will place our to

68
00:04:38,100 --> 00:04:44,310
do is make sure that a little bit cleaned up and that looks better inside of my dues.

69
00:04:44,440 --> 00:04:46,490
I'm going to just make a list item.

70
00:04:46,900 --> 00:04:52,990
Simply going to be a list item with the task right here.

71
00:04:53,050 --> 00:04:56,640
So let's go back and start this up with NPM start.

72
00:04:57,010 --> 00:05:00,760
We should see this pop up in the browser and if we've done everything correctly we should see our two

73
00:05:00,790 --> 00:05:02,410
do's but we might have some bugs.

74
00:05:02,410 --> 00:05:03,080
Who knows.

75
00:05:03,220 --> 00:05:07,880
Let's give it a second and see what it looks fail to compile.

76
00:05:07,880 --> 00:05:10,450
Export default was not found in Dotts last to do.

77
00:05:10,500 --> 00:05:12,580
Hmm let's go make sure that we're exporting that.

78
00:05:12,580 --> 00:05:15,010
It doesn't look like we are an export default.

79
00:05:15,070 --> 00:05:17,820
You got to make sure that we export those to Dewes.

80
00:05:17,820 --> 00:05:19,060
We're not going to get very far.

81
00:05:19,130 --> 00:05:25,390
Cannot resolve react and react redux to dues S or C cannot resolve react.

82
00:05:25,520 --> 00:05:28,190
How do we get that problem cannot resolve react.

83
00:05:28,450 --> 00:05:30,340
What happens when you run into that.

84
00:05:30,590 --> 00:05:35,420
And this happened because I actually forgot to NPM install when I first loaded this application.

85
00:05:35,600 --> 00:05:37,580
So we already have a reactor on the arm.

86
00:05:37,610 --> 00:05:40,330
So I want to just make sure that I NPM install.

87
00:05:40,370 --> 00:05:45,400
So let's give that a second make sure I install all unnecessary dependencies and then start my application.

88
00:05:45,510 --> 00:05:50,180
Got a little too excited here building all those components have to make sure I actually run NPM install.

89
00:05:50,600 --> 00:05:55,050
So I will give that a second home that we hopefully shouldn't see any more error messages.

90
00:05:55,460 --> 00:05:55,950
And there we go.

91
00:05:55,960 --> 00:05:57,450
We eat sleep and go home now.

92
00:05:57,460 --> 00:06:00,020
There's not much dialing here and it's not very pretty.

93
00:06:00,020 --> 00:06:04,330
Trust me I know that one but it looks like we've got some Tildy was on the page.

94
00:06:04,730 --> 00:06:11,600
What I'd like to do is think about all of these to do's as individual objects that are not stored in

95
00:06:11,610 --> 00:06:14,630
react but actually stored in redux.

96
00:06:14,990 --> 00:06:22,400
So what we're going to do is connect our redux store to our react application in order to do that we

97
00:06:22,400 --> 00:06:24,560
actually need to make our read store.

98
00:06:24,620 --> 00:06:28,200
And in order to make a redux store we also need some kind of reducer.

99
00:06:28,340 --> 00:06:31,490
So we're going to go and make a couple of files in this application.

100
00:06:31,490 --> 00:06:39,920
We're going to make a file and we'll call that route reduce or yes will also make another file where

101
00:06:39,920 --> 00:06:42,200
we can store all of our action create.

102
00:06:42,440 --> 00:06:46,300
So we'll call this action creators database.

103
00:06:46,340 --> 00:06:51,030
Now ideally you would have folders for these as you have more but we're going to keep it really simple.

104
00:06:51,170 --> 00:06:55,640
What we're going to do inside of here is make a couple constants.

105
00:06:55,700 --> 00:06:57,830
Make one for ADD to do.

106
00:06:58,130 --> 00:07:01,890
And that's going to be called to do and we'll make one for removed to do.

107
00:07:02,240 --> 00:07:03,720
You may be wondering why we're doing this.

108
00:07:03,770 --> 00:07:09,590
And that's to make sure that we don't mess up with typos and if things change it becomes much easier.

109
00:07:09,620 --> 00:07:15,860
We're going to export out a bunch of functions we'll export out one for adding a to do export a function

110
00:07:15,860 --> 00:07:17,220
called add to do.

111
00:07:17,590 --> 00:07:26,920
And here this is going to return some kind of object with a type of ad to do some kind of task.

112
00:07:27,110 --> 00:07:29,000
We'll pass that in right here.

113
00:07:29,000 --> 00:07:30,910
It's going to be key and a value of task.

114
00:07:30,990 --> 00:07:36,380
How about removed to do what's go export out a function called remove to do it's going to have some

115
00:07:36,380 --> 00:07:40,390
kind of ID and it's going to have a type of remove to do.

116
00:07:41,480 --> 00:07:45,970
So these are what are action creators look like who may have not seen action creators and a little bit

117
00:07:46,010 --> 00:07:50,780
but they're simply functions that return objects that we we don't want to hard code the object that

118
00:07:50,780 --> 00:07:51,710
we're passing in.

119
00:07:51,770 --> 00:07:56,460
We simply just invoke one of these functions and I shouldn't say that that looks a little bit better.

120
00:07:56,530 --> 00:08:02,560
Just where are we going to use these actual creators what we're going to use them we can react and redux.

121
00:08:02,720 --> 00:08:06,230
But before we do any of that we're going to need our brute reducer.

122
00:08:06,230 --> 00:08:10,900
So what we're going to do is we are going to make a function.

123
00:08:11,240 --> 00:08:13,430
But before we make a function we want some initial state.

124
00:08:13,480 --> 00:08:15,680
So we'll make some constant called initial state.

125
00:08:15,890 --> 00:08:18,420
And this is going to be pretty similar to what we had before.

126
00:08:18,560 --> 00:08:30,400
Some do's and some kind of ID who are also going to do is import all of our constants from action creators

127
00:08:31,320 --> 00:08:38,410
that yes action creators and what are we going to import we can import add to do and remove to do.

128
00:08:38,740 --> 00:08:42,220
Because remember these are simply the strings that we made before.

129
00:08:42,220 --> 00:08:45,670
What's nice about that is if these ever change it works everywhere.

130
00:08:46,060 --> 00:08:50,920
It's still going to be at to do it's going to be removed to do if you call this something like add another

131
00:08:50,920 --> 00:08:51,370
to do.

132
00:08:51,430 --> 00:08:52,680
It wouldn't make a difference.

133
00:08:52,720 --> 00:08:54,670
It would still apply here as well.

134
00:08:54,670 --> 00:08:59,950
And in our reducer so you might even see these action creators in another file.

135
00:08:59,980 --> 00:09:05,550
These are really just called types right now are action types the type of the action we're doing this

136
00:09:05,620 --> 00:09:10,780
so that if this value ever changes it's still going to be the same variable across our action creators

137
00:09:10,840 --> 00:09:13,010
and our producer.

138
00:09:13,030 --> 00:09:14,680
So we brought in our action creators.

139
00:09:14,680 --> 00:09:15,860
What's the time to do now.

140
00:09:16,000 --> 00:09:22,600
Well let's export a function export some function called a root reducer and this right here is going

141
00:09:22,600 --> 00:09:24,250
to accept two parameters.

142
00:09:24,280 --> 00:09:28,990
Just like before some kind of state which is an initial state and some kind of action.

143
00:09:29,260 --> 00:09:33,700
And inside of here we're actually going to use a lot of the code that we use before we're going to switch

144
00:09:33,850 --> 00:09:35,800
on the action type.

145
00:09:35,950 --> 00:09:36,960
And what are we going to do here.

146
00:09:36,970 --> 00:09:41,830
Well if it is add to do remember we don't have the hard code that string or anything we're bringing

147
00:09:41,830 --> 00:09:45,970
that all in from our constant in our action creator's file if that's the case.

148
00:09:45,990 --> 00:09:51,350
Well same thing is before we can make some new state and maybe you found a better way to refactor this.

149
00:09:51,340 --> 00:09:52,720
I encourage you to look at those.

150
00:09:52,720 --> 00:09:55,160
I just want to be really explicit right here.

151
00:09:55,330 --> 00:09:56,970
Grab whatever is in state.

152
00:09:57,460 --> 00:09:59,100
What do we then want to think about doing.

153
00:09:59,750 --> 00:10:06,140
All we want to make sure that we take that new state and we increment that ID by one good.

154
00:10:06,160 --> 00:10:07,650
That looks pretty good.

155
00:10:07,660 --> 00:10:09,070
What else do we need to think about doing.

156
00:10:09,160 --> 00:10:13,170
Well we want to make sure that we then return some kind of object.

157
00:10:13,180 --> 00:10:24,360
So we are going to turn some specific object with a key of everything from state as well as our traduce.

158
00:10:24,450 --> 00:10:32,430
And these are going to be all of our state data dues and then some kind of task which is whatever the

159
00:10:32,430 --> 00:10:33,720
task of that action is.

160
00:10:33,750 --> 00:10:40,020
And the ID which is new state that Id lets keep this simple for now it looks like there's a little bit

161
00:10:40,020 --> 00:10:44,940
of a syntax error that I have to import add to do remove to do equals action creators.

162
00:10:44,950 --> 00:10:47,390
That's no good either from action creators.

163
00:10:47,460 --> 00:10:48,860
That looks all the better.

164
00:10:48,930 --> 00:10:50,310
Silly syntax error there.

165
00:10:50,320 --> 00:10:51,950
Get to brush up on that syntax.

166
00:10:52,110 --> 00:10:56,460
So I made a simple function called the root reducer and while we're at it we could actually add the

167
00:10:56,460 --> 00:11:03,740
same logic for removing it to do so in the event of removed to do what do we want to do here.

168
00:11:03,780 --> 00:11:10,400
Same thing will say that dues are going to be whatever we get filtered out by some value.

169
00:11:10,800 --> 00:11:16,680
We'll make sure that Valder ID is not the same as action that ID here will be able to pass in a number

170
00:11:16,750 --> 00:11:18,010
such be a little bit easier.

171
00:11:18,150 --> 00:11:23,970
When that's done we're going to return a copy of state and our ideas in the event that none of these

172
00:11:23,970 --> 00:11:28,530
happen we're going to simply return the state.

173
00:11:29,010 --> 00:11:30,800
So this is what our reducer looks like.

174
00:11:30,810 --> 00:11:33,150
All we have is to do and removed to do.

175
00:11:33,150 --> 00:11:39,660
And those are coming from these action creators that we've made and to do and removed to do so we're

176
00:11:39,660 --> 00:11:41,240
exporting out those functions.

177
00:11:41,250 --> 00:11:48,840
And that's it it had to do and really to do so when we go see this and take a look in the browser we

178
00:11:48,840 --> 00:11:51,100
can refresh the page and see what's going on.

179
00:11:51,210 --> 00:11:55,610
Now you might see something wrong and that's because we're not actually exporting out these Constans

180
00:11:55,680 --> 00:11:57,280
want to make sure we do that as well.

181
00:11:57,390 --> 00:12:00,240
Otherwise we're not going to get very far with importing those things too.

182
00:12:00,360 --> 00:12:00,950
So we make them.

183
00:12:00,960 --> 00:12:03,320
But we have to actually export them as well.

184
00:12:03,330 --> 00:12:07,710
Another silly mistake on end a lot of this you can kind of see by making your own mistakes.

185
00:12:07,710 --> 00:12:08,870
I've done this before a bunch.

186
00:12:08,870 --> 00:12:13,530
So I understand but you may run into some problems and that's ok find yourself just repeating this over

187
00:12:13,530 --> 00:12:16,850
and over again and learn a lot by repeating it over and over.

188
00:12:17,280 --> 00:12:18,110
So what's next.

189
00:12:18,120 --> 00:12:19,780
We've made our action creators.

190
00:12:19,800 --> 00:12:25,440
We have these functions that return objects that looks great and then we have our to do list which looks

191
00:12:25,440 --> 00:12:25,680
good.

192
00:12:25,680 --> 00:12:29,200
Well we have to connect react and redux.

193
00:12:29,490 --> 00:12:32,900
And the bulk of that work is actually going to be done in our index.

194
00:12:33,040 --> 00:12:39,480
Yes we are going to import the create store function from redux.

195
00:12:39,480 --> 00:12:45,060
Now how come we're destructuring create store because remember the default export is redux right here

196
00:12:45,510 --> 00:12:50,270
and create store is a function that lives on redux.

197
00:12:50,340 --> 00:12:52,440
So we're going to just grab creates Orford redux.

198
00:12:52,440 --> 00:12:59,070
We also need our route reducer from dot slash route reducer.

199
00:12:59,100 --> 00:13:05,640
This one is not structured because in my reproducer it's the default export right here.

200
00:13:05,640 --> 00:13:06,580
What else do we need.

201
00:13:06,680 --> 00:13:07,910
Well that's actually for now.

202
00:13:07,980 --> 00:13:15,540
We're going to make store and there is going to be the result of pre-AIDS store with the reducer.

203
00:13:15,540 --> 00:13:18,770
And one more time let's remember when we used the redux dev tools.

204
00:13:18,780 --> 00:13:22,180
We want to go and grab that code that we saw before we took steps towards.

205
00:13:22,500 --> 00:13:24,090
Let's go to the second one.

206
00:13:24,470 --> 00:13:29,230
Let's go down a little bit and let's make sure that everything is working right there.

207
00:13:29,280 --> 00:13:33,230
Grab this right here and make sure that we get that story.

208
00:13:33,660 --> 00:13:36,520
Once again this is not code you're going to have to memorize.

209
00:13:36,540 --> 00:13:41,150
You're just going to find yourself copying and pasting this when you just get that initial set up so

210
00:13:41,210 --> 00:13:49,260
I need the store but how do I tell my re-act application about it in order to do that.

211
00:13:49,280 --> 00:13:58,280
We are going to import an essential part of the re-act redux library re-act redux.

212
00:13:58,280 --> 00:14:02,810
We are going to import something called provider and we can see that here.

213
00:14:03,050 --> 00:14:03,940
Just quick refresh.

214
00:14:03,950 --> 00:14:05,150
Looks like we're all going there.

215
00:14:06,790 --> 00:14:12,640
The provider component is what we use from re-act redux to connect our reactor application with our

216
00:14:12,640 --> 00:14:17,460
redux store and the way we do that is by wrapping our app with provider.

217
00:14:17,740 --> 00:14:22,940
I'm going to make sure that I wrap the application with provider and let's go see this.

218
00:14:22,940 --> 00:14:24,930
And you can see right here I got this nice formatting.

219
00:14:25,210 --> 00:14:29,030
I'm going to pass to provider a prop called store.

220
00:14:29,290 --> 00:14:30,580
And what do you think we had in right here.

221
00:14:30,580 --> 00:14:33,220
Well our redux store right there.

222
00:14:33,430 --> 00:14:38,950
This right here is the glue between our re-act application and our redux store.

223
00:14:38,950 --> 00:14:42,070
It's all done through this component called provider.

224
00:14:42,070 --> 00:14:49,220
And once we add this provider component we allow any component that we make to get access to the drugstore.

225
00:14:49,330 --> 00:14:51,880
And that's a really important thing to understand.

226
00:14:51,880 --> 00:14:56,500
We previously saw that the only thing that could dispatch actions was the redux store.

227
00:14:56,650 --> 00:15:03,220
But when we connect react and redux actually see that any component that we want when connected to the

228
00:15:03,220 --> 00:15:06,980
redux store we'll be able to dispatch actions on its own.

229
00:15:07,120 --> 00:15:11,530
And that's really cool because we're going to want our to do list action because we're going to want

230
00:15:11,530 --> 00:15:17,250
certain components to dispatch certain actions and to be connected to the read box store.

231
00:15:17,590 --> 00:15:22,360
So I'm going to save this and I'm going to go back to my to do list component and here I don't want

232
00:15:22,420 --> 00:15:25,020
any state can react.

233
00:15:25,050 --> 00:15:32,570
That's it I don't want any state on this specific component but where am I going to get my seat from.

234
00:15:32,770 --> 00:15:40,180
Well now I'm going to get it from redux in order to connect a re-act component with the redux store.

235
00:15:40,450 --> 00:15:44,010
The first thing you have to do is make sure that we have that provider component.

236
00:15:44,020 --> 00:15:49,340
The second that we have that provider component we can import a special function call connect we're

237
00:15:49,340 --> 00:15:58,270
going to import connect from re-act redux and to see that and what we're going to do is instead of exporting

238
00:15:58,390 --> 00:16:05,200
the default rate up here we're going to export the default connect which is going to return a function

239
00:16:05,710 --> 00:16:08,630
with our to do list inside of here.

240
00:16:08,800 --> 00:16:14,980
I'm going to save this right here and I'm simply going to put a debugger line right at this Reber.

241
00:16:14,980 --> 00:16:18,960
I'll save this code right here and refresh the page over here.

242
00:16:19,150 --> 00:16:20,860
Cannot be property to do as of now.

243
00:16:20,890 --> 00:16:21,870
Well that's a bummer.

244
00:16:22,120 --> 00:16:25,750
Let's go see this let's go refresh the page.

245
00:16:25,960 --> 00:16:31,390
And before we get some errors we actually see this debugger and this is just because I want to show

246
00:16:31,390 --> 00:16:34,360
you what our component looks like.

247
00:16:34,420 --> 00:16:37,120
Our component has a property called props.

248
00:16:37,810 --> 00:16:41,190
And you might be wondering what is this right here.

249
00:16:41,440 --> 00:16:43,180
Well where does dispatch come from.

250
00:16:43,300 --> 00:16:47,410
Remember that redux gives us the ability to dispatch actions.

251
00:16:47,590 --> 00:16:52,380
But previously we only saw that the store was in charge of dispatching actions.

252
00:16:52,930 --> 00:16:59,170
We now anytime that we connect a component to our redox or that component has the ability to dispatch

253
00:16:59,230 --> 00:17:01,870
actions of its own which is pretty awesome.

254
00:17:02,410 --> 00:17:07,010
But we're going to see right now that we're using distorts the map and we're getting a bunch of errors.

255
00:17:07,060 --> 00:17:12,430
So I would like to get some state but I don't want to get it from re-act I want to get it from redox

256
00:17:13,090 --> 00:17:16,830
that's where the first parameter to connect comes in.

257
00:17:17,080 --> 00:17:21,790
Well we're going to do quickly is review what we've seen and then we'll go in the next screencast fix

258
00:17:21,790 --> 00:17:24,680
up this issue to bring it all together.

259
00:17:25,030 --> 00:17:27,160
We started with a simple recap.

260
00:17:27,280 --> 00:17:32,190
We added some reaccelerate and showed some to do's and made a stateless functional component for two

261
00:17:32,190 --> 00:17:33,010
days.

262
00:17:33,100 --> 00:17:38,200
We started adding a little bit of work for redox by bringing in a reducer and bringing in the code that

263
00:17:38,200 --> 00:17:40,960
we saw from the previous screencast for creating it to do.

264
00:17:40,960 --> 00:17:43,190
This is really not going to change that much.

265
00:17:43,360 --> 00:17:48,850
What we did make though is an action creator file inside of here we made a couple of constants so that

266
00:17:48,850 --> 00:17:53,920
if we ever change this value right here that variable can stay the same.

267
00:17:53,920 --> 00:17:58,000
We made a couple action creators which are functions that return objects.

268
00:17:58,060 --> 00:18:03,560
We're going to use these action creators a little bit later when our components dispatch actions.

269
00:18:03,580 --> 00:18:07,490
What I encourage you to do is take a look through some of this code and try to get this far yourself

270
00:18:07,520 --> 00:18:12,320
code along understand what this code is doing and just let us know if you have any questions in the

271
00:18:12,320 --> 00:18:13,040
next video.

272
00:18:13,070 --> 00:18:19,410
We're going to start grabbing state from our drug store and putting it into our components.

273
00:18:19,430 --> 00:18:24,060
The only way we could possibly do that is first making sure we've installed react redux.

274
00:18:24,110 --> 00:18:32,000
We have our provider component and finally that we're connecting our individual components to the Reebok

275
00:18:32,000 --> 00:18:32,950
store.

276
00:18:32,960 --> 00:18:35,150
So in the next screencast we'll start adding that functionality.

277
00:18:35,150 --> 00:18:35,590
I'll see the.
