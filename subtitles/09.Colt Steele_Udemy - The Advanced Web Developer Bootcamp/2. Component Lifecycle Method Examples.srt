1
00:00:00,570 --> 00:00:04,050
In the last video we introduce component lifecycle methods.

2
00:00:04,050 --> 00:00:08,620
Next we'll talk about some example use cases of lifecycle methods.

3
00:00:08,810 --> 00:00:14,270
If you remember back to our boxes exercise where we have 32 boxes that change color randomly.

4
00:00:14,270 --> 00:00:19,280
If that component were a part of a larger application you would want the set interval to stop after

5
00:00:19,280 --> 00:00:21,230
this component gets unmounted.

6
00:00:21,740 --> 00:00:26,810
So in order to do that I've got the constructor here and this is pretty much the same code we've seen

7
00:00:26,810 --> 00:00:34,190
before where we're going to make 32 boxes give each one a random color and then set up a set interval

8
00:00:34,190 --> 00:00:38,400
that calls set state and changes one box's color randomly.

9
00:00:38,540 --> 00:00:42,920
Now say this component gets unmounted will want that interval to go away.

10
00:00:42,920 --> 00:00:50,500
So we've saved the interval ID to the component instance and then inside a component will unmount we'll

11
00:00:50,510 --> 00:00:51,730
clear that interval.

12
00:00:52,010 --> 00:00:58,700
So this is the use case for using component will unmount some sort of cleanup like a set interval where

13
00:00:58,700 --> 00:01:05,220
you know you want to stop something from happening when the component amounts now is talk about component

14
00:01:05,220 --> 00:01:11,250
did mount a common use case for component did mount is to make an Ajax request because the component

15
00:01:11,250 --> 00:01:14,790
did mount method will only happen once per the life of the component.

16
00:01:14,790 --> 00:01:20,850
It makes sense to make your Ajax request here for something like getting all the data for you to demonstrate

17
00:01:20,850 --> 00:01:23,710
let's build the following up.

18
00:01:23,740 --> 00:01:29,620
This is a fairly simple app that shows all the top stories on Hacker News right now and we're getting

19
00:01:29,620 --> 00:01:35,320
the data by calling the Hacker News API so I can click on any one of these links and it will take me

20
00:01:35,320 --> 00:01:36,910
to the corresponding story.

21
00:01:37,060 --> 00:01:40,210
And it also says who posted the story.

22
00:01:40,210 --> 00:01:43,210
Let's take a look at what the Hacker News API gives us.

23
00:01:47,150 --> 00:01:52,910
So in order to make this work we need to get requests first get requests of the Hacker News Top Story

24
00:01:52,910 --> 00:01:56,520
API which just gives us a list of story ideas.

25
00:01:56,690 --> 00:02:01,420
Once we have that we'll need to make the following GET requests for each ID.

26
00:02:01,490 --> 00:02:09,490
So if we were to make the GET request for the first ID 1 5 3 0 0 0 6 9 it would look like this.

27
00:02:09,800 --> 00:02:12,480
And we get back the following results.

28
00:02:12,620 --> 00:02:16,820
There are actually more keys in the results than what I'm showing here but these are the ones we care

29
00:02:16,820 --> 00:02:19,400
about we care who posted the article.

30
00:02:19,400 --> 00:02:23,930
The idea of the article the title and the link itself.

31
00:02:23,930 --> 00:02:25,460
Now let's work on implementing this

32
00:02:28,220 --> 00:02:29,150
in cloud nine.

33
00:02:29,150 --> 00:02:36,900
I've set up a new app called Hacker News and so far it just looks like this.

34
00:02:37,160 --> 00:02:42,560
It's just a constructor A render method and inside the render method we're just rendering this views

35
00:02:43,100 --> 00:02:45,850
and views only has loading right now.

36
00:02:45,890 --> 00:02:48,020
So not much going on yet.

37
00:02:48,080 --> 00:02:51,680
The next thing we want to do is implement a component amount to get our data

38
00:02:56,620 --> 00:03:01,480
and what data do we want to store what we want to store a list of stories in our state.

39
00:03:01,480 --> 00:03:07,310
So let's make some default state.

40
00:03:07,460 --> 00:03:11,570
Next we'll use fecche to get the data from the Hacker News API.

41
00:03:11,570 --> 00:03:15,170
I'll start by making strings for my your Elle's that I'll make get requests to

42
00:03:22,230 --> 00:03:24,930
and this store you are all based is not for your.

43
00:03:25,080 --> 00:03:30,330
It's only the beginning of it we still need the story ID and then a dot J sign at the end.

44
00:03:30,510 --> 00:03:35,550
So at that we make the request.

45
00:03:35,660 --> 00:03:42,880
Now let's start by making a fetch to the top stories euro.

46
00:03:43,070 --> 00:03:46,940
We want to add a dot then method and convert our result into Jason

47
00:03:50,570 --> 00:03:54,890
that Jason returns a promise so we can add a dot then to that because of promise chaining

48
00:03:57,890 --> 00:04:00,270
Let's scroll down.

49
00:04:00,300 --> 00:04:06,790
Now if you remember the result of making this request is an array of IDS an array of story IDs.

50
00:04:06,870 --> 00:04:12,240
So we're going to map over that array and make a new get request for each array.

51
00:04:16,940 --> 00:04:21,710
And now will use the story you are off base in order to create the full Euro

52
00:04:29,560 --> 00:04:35,550
and because we know each one of these requests is going to require us to convert the result to Jason

53
00:04:35,550 --> 00:04:36,930
lets out a dot then to this

54
00:04:41,250 --> 00:04:43,050
since we're using a map here.

55
00:04:43,050 --> 00:04:46,200
This then will return an array of promises.

56
00:04:46,560 --> 00:04:47,260
And the next stop.

57
00:04:47,280 --> 00:04:49,140
Then we can use promise chaining

58
00:04:51,690 --> 00:04:59,420
to take that array and pass it to a promise that all.

59
00:04:59,520 --> 00:05:03,740
Now once all those promises have been resolved we'll have our array of stories.

60
00:05:09,480 --> 00:05:21,990
Now let's just render a string and find array to prove that we're getting data.

61
00:05:22,080 --> 00:05:25,050
And as you can see we're definitely getting data from the API.

62
00:05:25,110 --> 00:05:29,060
Now we just need to convert that data into links.

63
00:05:29,520 --> 00:05:31,870
I'll do that by mapping over the stories.

64
00:05:39,710 --> 00:05:41,440
Now this check is important.

65
00:05:41,630 --> 00:05:47,180
We only want to map if we have some data for the stories if there are no stories we want to keep the

66
00:05:47,180 --> 00:05:48,870
loading view there.

67
00:05:49,100 --> 00:05:50,650
And that's just good UI.

68
00:05:50,690 --> 00:05:56,540
You should always have a floating visible while your Ajax request is happening so that the user sees

69
00:05:56,540 --> 00:05:57,370
something.

70
00:06:04,050 --> 00:06:21,770
Now we'll just return a paragraph tag with Arlington side.

71
00:06:22,010 --> 00:06:26,340
So as you can see we're rendering the link with our your l.

72
00:06:26,390 --> 00:06:30,790
The title of the story and also who post the story.

73
00:06:31,160 --> 00:06:33,140
And lastly we need to render our views.

74
00:06:33,170 --> 00:06:40,230
So let's replace a string of high.

75
00:06:40,660 --> 00:06:41,750
Let's see if that works.

76
00:06:44,130 --> 00:06:44,460
All right.

77
00:06:44,460 --> 00:06:45,100
Looks good.

78
00:06:45,210 --> 00:06:48,360
We've got all of the elves and we've got the poster as well.

79
00:06:50,290 --> 00:06:51,340
Now it's your turn.

80
00:06:51,340 --> 00:06:56,470
Next you're going to work on an app that uses component did mouth to make an Ajax request and also takes

81
00:06:56,470 --> 00:06:59,520
advantage of all the reacts features that we've learned so far.
