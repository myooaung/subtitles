1
00:00:00,180 --> 00:00:00,810
All right.

2
00:00:00,840 --> 00:00:05,470
So next up we're going to actually fetch the initial state of our application.

3
00:00:05,520 --> 00:00:11,440
We're going to use this endpoint right here so slash API slash to do so on our API.

4
00:00:11,910 --> 00:00:14,140
And hopefully you have some data in there.

5
00:00:14,160 --> 00:00:19,230
Again if you don't have anything then just go to the root URL and add a couple here.

6
00:00:19,230 --> 00:00:25,870
And our goal is to get react to fetch those and add them to the initial state of our application.

7
00:00:26,430 --> 00:00:31,740
So to do that we're going to go to our to do list which we have open right now and we to start by setting

8
00:00:31,740 --> 00:00:33,130
the initial state of to do.

9
00:00:33,180 --> 00:00:42,880
Just to be an empty array and to do that and add our kind of boilerplate constructor drops.

10
00:00:43,200 --> 00:00:53,430
And then in here just add super props and then this state equals and then will just set to dues to be

11
00:00:53,550 --> 00:00:55,980
an empty array just like that.

12
00:00:56,000 --> 00:00:57,220
So we'll leave it at that.

13
00:00:57,410 --> 00:01:02,970
And the next big thing is to load our data and put it inside of this to use inside of the state.

14
00:01:02,990 --> 00:01:05,280
So we're going to use a fetch API call.

15
00:01:05,430 --> 00:01:08,110
We could use some other tools like Acciona or something.

16
00:01:08,180 --> 00:01:14,300
I mean to use fetch and we're going to fetch this you are all right here but I'm going to warn you now

17
00:01:14,300 --> 00:01:20,360
it's a little more complicated than that because we kind of have to get around some small issues with

18
00:01:20,690 --> 00:01:23,270
the fact that these are basically being hosted on the same server.

19
00:01:23,360 --> 00:01:26,450
But for now let's ignore that and just move on.

20
00:01:26,450 --> 00:01:29,050
At the end of this video we'll address the problem.

21
00:01:29,060 --> 00:01:34,670
So what we're going to do is instead of a component will mount or component did mount but I'm going

22
00:01:34,670 --> 00:01:37,690
to do component will mount.

23
00:01:37,820 --> 00:01:42,400
We're going to fetch the data and it's going to be super simple when you factor this in just a moment

24
00:01:42,860 --> 00:01:47,330
but we're just going to do a fetch slash API slash to do.

25
00:01:48,410 --> 00:01:51,060
And we're not going to worry about error handling yet.

26
00:01:51,080 --> 00:01:55,970
We will though for now ours can do that and we'll call it data.

27
00:01:56,930 --> 00:02:04,100
And should we review if you made it through the API or the fetch and J-curve single page app sections

28
00:02:04,130 --> 00:02:08,150
making requests and we'll do another then after that data.

29
00:02:08,210 --> 00:02:13,220
Jason return's promise and I'll just call that data to do.

30
00:02:13,820 --> 00:02:16,850
And we're going to do this that said state

31
00:02:19,350 --> 00:02:26,520
and dues like that which is going to take dues here and set it equal to this to do so here.

32
00:02:26,520 --> 00:02:28,140
Perfect.

33
00:02:28,140 --> 00:02:34,050
So again this should work ideally but it's not going to because of a small problem.

34
00:02:34,050 --> 00:02:41,610
But if we go into a reactor right now you'll see if I go into our state here I mean you have to get

35
00:02:41,610 --> 00:02:46,950
that far because if you actually look at what we're getting it saying that the request actually worked

36
00:02:47,580 --> 00:02:52,140
and we could know that if we went to network and refresh the page you can see the request is made right

37
00:02:52,140 --> 00:02:52,670
here.

38
00:02:52,980 --> 00:02:59,220
But if we look at the response we're actually getting him back or getting this weird page and that's

39
00:02:59,220 --> 00:03:00,430
not what we want.

40
00:03:00,570 --> 00:03:05,700
So what's happening is we're actually getting our own create re-act app page if you actually look at

41
00:03:05,700 --> 00:03:10,500
the code here but see if I can find an example.

42
00:03:10,650 --> 00:03:16,480
We have things like create re-act you need to enable javascript to run this app.

43
00:03:16,950 --> 00:03:22,140
Basically all that matters is we're actually getting our own create react out because we're actually

44
00:03:22,140 --> 00:03:27,930
requesting slash to do slash API on our own page which is not what we want.

45
00:03:27,960 --> 00:03:32,160
We don't want to be requesting port 80 80 slash to do such API.

46
00:03:32,360 --> 00:03:36,600
You want to request 80 81 slash slash to do this.

47
00:03:36,770 --> 00:03:40,370
I think we're saying it backwards but 80 81 slash API slash reduce.

48
00:03:40,500 --> 00:03:45,570
This is what we want to request and we're not doing that right now are we going to do instead is proxy

49
00:03:45,630 --> 00:03:49,810
all requests that are outgoing here to localhost.

50
00:03:49,820 --> 00:03:50,670
ADHD.

51
00:03:50,970 --> 00:03:52,750
So I'm going actually remove this here.

52
00:03:52,860 --> 00:03:58,950
Keep this as a slash API slash to Duse but we're going to tell our application that all these requests

53
00:03:58,980 --> 00:04:06,300
are supposed to start off of local host 1881 proxy the request there rather than to our own local host

54
00:04:06,360 --> 00:04:07,230
1880.

55
00:04:07,320 --> 00:04:09,000
So I realize it's kind of confusing.

56
00:04:09,000 --> 00:04:13,230
Basically we're just telling our app to request through a different port proxy requests through that

57
00:04:13,230 --> 00:04:13,920
port.

58
00:04:14,020 --> 00:04:16,470
And if you want to read more about it create re-act app.

59
00:04:16,470 --> 00:04:20,650
Actually the documentation has some good explanation of what to do.

60
00:04:21,030 --> 00:04:28,440
But all we need to do is take this line here and go to our package that Jaison and anywhere in here

61
00:04:28,830 --> 00:04:37,760
we just add proxy and this is just for development we'll add 80 81 because there's basically a shared

62
00:04:37,860 --> 00:04:38,930
local host.

63
00:04:39,000 --> 00:04:40,090
Neither of them are deployed.

64
00:04:40,110 --> 00:04:48,750
So we're going to do this as a workaround and I believe we need to restart double check and this should

65
00:04:48,750 --> 00:04:55,380
be going to slash API slash dues and because we added this proxy line it will be going to 1881 slash

66
00:04:55,380 --> 00:04:56,710
API slash to do.

67
00:04:57,120 --> 00:05:03,300
And also just to be clear this is on the front end we are proxying request from react so don't add it

68
00:05:03,300 --> 00:05:11,640
to the package just on of the API itself if you're are fresh now we have a different problem.

69
00:05:11,670 --> 00:05:17,010
So this problem invalid host header will go to the documentation they actually explain what's happening.

70
00:05:17,010 --> 00:05:20,750
This happens because we're using a cloud editor in development mode.

71
00:05:20,820 --> 00:05:22,640
So you can read more about this.

72
00:05:22,680 --> 00:05:27,740
Essentially this is just a fix that we need to do in the short term because we're using Cloud 9.

73
00:05:27,840 --> 00:05:34,470
So what we're going to do is make a dot in vidette development file and in that file or we can also

74
00:05:34,470 --> 00:05:40,470
just do it v file but in redubbed development it's better because create re-act Apple only apply it

75
00:05:40,470 --> 00:05:44,110
to development when we're running the app in development rather than production.

76
00:05:44,130 --> 00:05:47,820
We're going to add this dangerously disable host checked equals true.

77
00:05:48,120 --> 00:05:50,180
As you can see it's not a great idea.

78
00:05:50,190 --> 00:05:56,910
You do not do this in production but because we're using a cloud editor if you are using cloud 9 we

79
00:05:56,910 --> 00:05:58,210
do need to add this in.

80
00:05:58,230 --> 00:05:59,760
It's just sort of a workaround.

81
00:06:00,120 --> 00:06:03,740
But once you deploy the application you remove this it won't matter.

82
00:06:03,840 --> 00:06:08,670
So it's really not a problem as long as you're not deploying apps and keeping this line in there.

83
00:06:08,820 --> 00:06:15,570
So we're going to go back here and instead of our to do front end in the top level of it you know make

84
00:06:15,570 --> 00:06:21,730
a new file that in vidette development.

85
00:06:21,790 --> 00:06:27,250
So this is an environment variable essentially a setting that applies in the development mode.

86
00:06:27,330 --> 00:06:34,030
So it will save and close out and I think we need to restart our server to get those variables to load.

87
00:06:34,030 --> 00:06:41,690
Now if we try once it loads to make this request it works well at least you don't get an error.

88
00:06:41,860 --> 00:06:50,370
And if we look at the news we're getting data back and if we go to react we go into the to do list component

89
00:06:50,740 --> 00:06:52,100
and we look at state.

90
00:06:52,180 --> 00:06:55,870
I have four items in that to do's array.

91
00:06:55,870 --> 00:06:59,400
You may have fewer You may have more depending on what's in your database.

92
00:06:59,740 --> 00:07:02,040
But we want to make sure that we're getting something back.

93
00:07:02,300 --> 00:07:03,600
You can see that's happening here.

94
00:07:03,810 --> 00:07:04,200
OK.

95
00:07:04,240 --> 00:07:06,940
So the last thing I want to do is refactor this a bit.

96
00:07:06,970 --> 00:07:13,260
I'm going to add in error handling because right now let's say if our API server is turned off we're

97
00:07:13,270 --> 00:07:15,360
just not going to handle that error at all.

98
00:07:15,490 --> 00:07:18,140
Or let's say we request an endpoint that doesn't exist.

99
00:07:18,250 --> 00:07:19,750
We're not handling that either.

100
00:07:20,140 --> 00:07:25,360
And I'm also going to move everything out of component amount to make something new here I'm just going

101
00:07:25,360 --> 00:07:27,500
to call it load to deuce.

102
00:07:28,220 --> 00:07:34,330
And here is where I'm actually going to do all the requesting and I wouldn't start by taking this flash

103
00:07:34,360 --> 00:07:40,130
API slash to use and defining a constant up here I'll just call API.

104
00:07:40,240 --> 00:07:41,580
You are real.

105
00:07:42,610 --> 00:07:46,130
We're going to reuse this same you r l slash API slash to do.

106
00:07:46,180 --> 00:07:49,630
When we are posting when we're updating and removing.

107
00:07:49,630 --> 00:07:52,360
I don't want to repeat myself so this will be easiest.

108
00:07:52,360 --> 00:07:57,670
Also if we do end up changing the structure of our API or that you are open say maybe it's just under

109
00:07:57,670 --> 00:07:59,200
slash to do's.

110
00:07:59,440 --> 00:08:01,200
I only need to change it in one place.

111
00:08:01,510 --> 00:08:06,680
OK so I'm going to refactor that and then I'm going to hop down here and I'm going to move.

112
00:08:06,990 --> 00:08:12,670
Well first old update this to say API you are ill and I'm going to move this down into load dues.

113
00:08:12,830 --> 00:08:18,010
I'm going to start by just calling this up load to do inside component amount.

114
00:08:18,220 --> 00:08:23,440
So I've just moved that into a different function and everything should still work the same.

115
00:08:23,440 --> 00:08:28,620
If I refresh the page go to react like it are to do list.

116
00:08:28,680 --> 00:08:35,210
Great state showing up there are close but now I'm going to add an error handling to be kind of annoying

117
00:08:35,210 --> 00:08:36,300
to watch me type this.

118
00:08:36,440 --> 00:08:37,600
But here we go.

119
00:08:37,610 --> 00:08:38,790
It's a bunch of functions.

120
00:08:38,870 --> 00:08:42,000
Ok so here we're going to check first.

121
00:08:42,200 --> 00:08:44,880
I'll change this from data to response.

122
00:08:44,880 --> 00:08:49,780
I'm going to check if the response is not ok.

123
00:08:51,330 --> 00:08:59,340
Then I'm going to do another check to see is the status greater than or equal to 400.

124
00:09:00,330 --> 00:09:01,170
And also

125
00:09:04,190 --> 00:09:10,800
also is a status less than 500.

126
00:09:10,820 --> 00:09:18,170
Now if that's the case I'm going to return whatever the responsa Jaison is so this means that we probably

127
00:09:18,170 --> 00:09:22,700
get some error back from the server itself like a page not found.

128
00:09:22,760 --> 00:09:28,370
Maybe something happening on the server side over can a return response Jason because there's probably

129
00:09:28,370 --> 00:09:35,000
an error message in this response and once that Jason is parsed we're then going to take the data in

130
00:09:35,000 --> 00:09:39,860
there and we're going to build our own error message that we're going to send back.

131
00:09:39,860 --> 00:09:50,000
So we're just going to do let barer and in here I'll call it error message his data message.

132
00:09:50,090 --> 00:09:54,740
So basically we're just making a simplified object that contains an error message and then I'm going

133
00:09:54,740 --> 00:09:58,500
to throw that error just like that.

134
00:09:59,340 --> 00:10:03,020
OK we have a couple of syntax errors I'll take care of those in a moment.

135
00:10:03,020 --> 00:10:10,250
But if it's not between 400 and 500 then we're going to just add an else in here and I'm going to do

136
00:10:10,350 --> 00:10:17,730
let error again and this time an error message is equal to.

137
00:10:17,870 --> 00:10:18,200
I don't know.

138
00:10:18,200 --> 00:10:20,860
Please try again later.

139
00:10:20,870 --> 00:10:24,220
Server is not responding or something like that.

140
00:10:24,320 --> 00:10:26,740
So this would be triggered you know for not getting a response.

141
00:10:26,750 --> 00:10:29,480
If we have a problem or the server just is off

142
00:10:32,080 --> 00:10:34,920
and we'll throw that air.

143
00:10:35,670 --> 00:10:36,910
OK.

144
00:10:37,300 --> 00:10:38,510
So we're getting close.

145
00:10:38,780 --> 00:10:40,550
Let's just make sure my syntax is correct.

146
00:10:40,570 --> 00:10:44,920
We're returning response based on now.

147
00:10:44,920 --> 00:10:51,890
I renamed it her espie that Jason and a missing Apprentice I believe.

148
00:10:52,280 --> 00:10:56,370
And I need to move this then over here.

149
00:10:59,680 --> 00:11:02,230
Told you would be a little annoying to watch me type this.

150
00:11:02,510 --> 00:11:09,740
And then finally we need to close off our function OK.

151
00:11:09,930 --> 00:11:11,380
I think we're getting close now.

152
00:11:11,520 --> 00:11:13,260
Let's just double check.

153
00:11:13,260 --> 00:11:17,640
So fetch is it correct for you for that.

154
00:11:18,540 --> 00:11:22,270
Let's move on then onto the next line.

155
00:11:22,270 --> 00:11:23,700
It's looking a bit better.

156
00:11:23,730 --> 00:11:24,990
Perfect.

157
00:11:25,030 --> 00:11:26,480
It's all formatted nicely.

158
00:11:26,820 --> 00:11:29,540
If you're still here it should be working.

159
00:11:29,820 --> 00:11:30,590
Let's double check

160
00:11:36,030 --> 00:11:38,560
and we're still getting our state to do.

161
00:11:38,880 --> 00:11:41,610
All right so all that I really did was just add in error handling.

162
00:11:41,760 --> 00:11:47,340
I'm not going to I'm going to reuse this for a bunch the other requests are making we reflect things

163
00:11:47,340 --> 00:11:49,610
a bit so we moved it to a separate function.

164
00:11:49,830 --> 00:11:55,370
We use API you know which is the constant just so that we don't have to update it multiple places.

165
00:11:55,380 --> 00:11:57,430
We're checking for two types of errors.

166
00:11:57,660 --> 00:11:59,260
We are creating error message.

167
00:11:59,280 --> 00:12:00,930
We're throwing it in two different places.

168
00:12:00,930 --> 00:12:04,500
Otherwise we're just returning response Jason.

169
00:12:04,680 --> 00:12:09,420
So it was nice and simple and clean without this error handling but it's good to have that there it's

170
00:12:09,420 --> 00:12:10,830
important.

171
00:12:10,860 --> 00:12:16,380
And then we're doing the exact same thing after we check for errors and we return that Jaison the response

172
00:12:16,830 --> 00:12:22,440
then we are updating the state with the new state of loaded data.

173
00:12:22,440 --> 00:12:28,200
So this is a pattern that will follow a lot when we're updating data or posting a new to do or deleting

174
00:12:28,200 --> 00:12:32,530
one where we're going to send a request get something back check if there's an error.

175
00:12:32,550 --> 00:12:35,570
If there's not an error then we're going to update our state.

176
00:12:35,610 --> 00:12:37,050
OK we made it.
