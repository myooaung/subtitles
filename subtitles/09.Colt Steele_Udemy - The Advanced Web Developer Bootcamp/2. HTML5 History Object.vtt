WEBVTT
1
00:00:00.480 --> 00:00:04.730
Before we start talking about the reactor matter we'll talk about the HCM L5 history object.

2
00:00:04.890 --> 00:00:07.830
So you have a good idea of how it all works underneath the covers.

3
00:00:09.460 --> 00:00:15.610
Our objectives would be to modify the address bar with the history of push state function and to describe

4
00:00:15.610 --> 00:00:20.650
how bookmarking a single page application works.

5
00:00:20.670 --> 00:00:23.370
So the history API is fairly simple.

6
00:00:23.370 --> 00:00:28.350
We've got methods like backward and forward just like any in the browser where you can click back or

7
00:00:28.350 --> 00:00:29.000
forward.

8
00:00:29.370 --> 00:00:35.250
And then history push state which changes the address bar and changes the history the goal the history

9
00:00:35.250 --> 00:00:40.890
object is to allow javascript to manipulate your browser's history.

10
00:00:40.920 --> 00:00:47.640
So to sum it up the history object allows you to change the URL address bar change the browsers local

11
00:00:47.640 --> 00:00:53.130
navigation history but it does not cause the browser to make a new GET request which would cause your

12
00:00:53.130 --> 00:00:58.300
page to reload and then essentially lose the feeling of a single page application.

13
00:00:59.650 --> 00:01:01.320
Let's test this out in the cons.

14
00:01:04.700 --> 00:01:07.980
So I can use history here and I'll say that push date.

15
00:01:08.750 --> 00:01:12.770
The first parameter is a state object.

16
00:01:12.860 --> 00:01:18.980
This is some data that we want to tie to the new change in the history object but we don't care about

17
00:01:18.980 --> 00:01:20.560
any data right now.

18
00:01:20.870 --> 00:01:24.310
And this title isn't really used so I'm just going to put test.

19
00:01:24.710 --> 00:01:28.440
And then finally the route that you want here.

20
00:01:28.880 --> 00:01:32.320
So I'll change this to slash reacts

21
00:01:36.090 --> 00:01:39.300
and now doesn't look like anything has changed the page hasn't refreshed.

22
00:01:39.410 --> 00:01:46.950
But if I do window that location now you can see my location is slide's dot com slash reacts.

23
00:01:47.330 --> 00:01:53.310
And I can change the Ural again if I want so I'll add here.

24
00:01:53.330 --> 00:01:55.850
D-3.

25
00:01:55.850 --> 00:02:02.670
And now if I look at the location again the URL is now D-3.

26
00:02:02.750 --> 00:02:09.850
So for more info about this you can definitely check out the Mozilla docs on the history API it goes

27
00:02:09.850 --> 00:02:15.020
into a little bit more detail about how the API works and shows you a few examples.

28
00:02:15.070 --> 00:02:18.050
So definitely worth reading through.

29
00:02:18.070 --> 00:02:21.600
So that's great but what we'll use this history thing for.

30
00:02:21.640 --> 00:02:26.680
So to create a good single page application we want to have a feel like a normal web site.

31
00:02:26.920 --> 00:02:31.930
We want to have link clicks and the back button working and all the normal things that you expect on

32
00:02:31.930 --> 00:02:37.680
a web page Tappen correctly and to make that a reality we're going to use the history object.

33
00:02:37.720 --> 00:02:43.450
Now we won't directly modify the history object to react router package will do that for us but it's

34
00:02:43.450 --> 00:02:49.860
good to understand what it's doing in order to understand how to build traps.

35
00:02:49.890 --> 00:02:55.380
So here's a diagram of what's going on in the old way of doing web development with server side rendering

36
00:02:55.710 --> 00:03:00.740
where the client doesn't do much and the server is in charge of most of the rendering of the display

37
00:03:02.690 --> 00:03:08.960
so on the left side we've got a client that's basically just HDMI and CSSA nothing smart going on there

38
00:03:09.630 --> 00:03:11.320
on the back and we've got a server.

39
00:03:11.330 --> 00:03:15.580
It could be any server in this case I just said no jazz.

40
00:03:15.620 --> 00:03:22.070
So first I'll send a GET request to get the homepage and I'll get back indexation hemol it's fully rendered.

41
00:03:22.070 --> 00:03:24.390
Now there's nothing special going on on the front end.

42
00:03:24.620 --> 00:03:30.200
So if I click a link to go somewhere I like the sign and page the page that I get back is going to be

43
00:03:30.200 --> 00:03:34.340
another page that's a fully rendered HVM file.

44
00:03:34.340 --> 00:03:40.130
So clicking on the link to go to the sign in page from the home page would cause a GET request to get

45
00:03:40.130 --> 00:03:43.010
sent in a fully re rendered page to happen.

46
00:03:43.100 --> 00:03:44.360
When we say slash seinen

47
00:03:47.070 --> 00:03:49.710
contrasting that with client side rendering.

48
00:03:50.190 --> 00:03:52.850
Now on the client we have re-act running as well.

49
00:03:52.920 --> 00:04:01.060
So H.M.S. SS and then a lot of javascript happening and that changes how the rendering happens.

50
00:04:01.060 --> 00:04:07.210
So first of all the browser makes a request just like before to get the home page and then the server

51
00:04:07.210 --> 00:04:11.500
returns just an index page CML that's very empty.

52
00:04:11.500 --> 00:04:15.630
All it has really is one div inside with an idea of root.

53
00:04:15.730 --> 00:04:18.100
And we've seen this before in our indexation Timo.

54
00:04:18.190 --> 00:04:27.290
It's a very empty XML file with just one div then reacts grabs onto that div and renders its page.

55
00:04:27.290 --> 00:04:32.560
So once re-act loads then the actual page gets rendered there's content there.

56
00:04:32.690 --> 00:04:37.510
Next if I click on a link to go to the sign in page there's no more request of the server.

57
00:04:37.700 --> 00:04:42.520
Instead react handles rendering the sign in page all by itself.

58
00:04:42.620 --> 00:04:48.080
So reactor router will look at the location of the Web site slash seinen and decide which components

59
00:04:48.080 --> 00:04:49.070
to render.

60
00:04:49.430 --> 00:04:55.580
And this is much different from our last model where the server based on the request is giving back

61
00:04:55.670 --> 00:04:57.620
a fully rendered ex-teammate page.

62
00:04:57.650 --> 00:05:03.660
Now the client is doing all the decisions about what to render on what route.

63
00:05:04.180 --> 00:05:07.280
This leads to one more issue that's important to understand.

64
00:05:07.280 --> 00:05:15.070
Another thing you want to be able to do is to bookmark a u r l or share a u r l from your Web site.

65
00:05:15.130 --> 00:05:24.010
So if I bookmark some profile page like Slash user slash 55 when I load that page in my browser by loading

66
00:05:24.010 --> 00:05:31.450
the bookmark I'll make a get request to slash user slash 55 and the no just server is going to return

67
00:05:31.810 --> 00:05:37.200
the exact same index shemale with nothing inside except for the root.

68
00:05:37.210 --> 00:05:38.790
Now that's important.

69
00:05:38.920 --> 00:05:43.880
The index a shemale that gets returned should be the same no matter what valid you are.

70
00:05:43.880 --> 00:05:45.220
All we ask for.

71
00:05:45.610 --> 00:05:47.490
So this is user 55.

72
00:05:47.620 --> 00:05:52.910
Or if it's just slash or if it's slash sign in or sign up whatever the URL is.

73
00:05:53.080 --> 00:05:59.920
The server should always return the same DML and it's going to be just a single Ishmail page with a

74
00:05:59.920 --> 00:06:02.120
div and not much else.

75
00:06:03.100 --> 00:06:10.630
And then on the back side reacts based on this you are l that you ask for renderers the specific component

76
00:06:10.630 --> 00:06:12.230
to match that you are l.

77
00:06:12.250 --> 00:06:18.150
So the key thing for handling this bookmarking problem is that the server must support this.

78
00:06:18.190 --> 00:06:23.040
The server has to return the same HVM file no matter what the route is.

79
00:06:23.080 --> 00:06:29.410
Now if we also have an API that we're working with there is a way to proxy requests for certain routes

80
00:06:29.530 --> 00:06:35.380
but for the most part all the valid routes that we care about are going to return our HTL template.

81
00:06:35.830 --> 00:06:36.970
That's all for this one.

82
00:06:36.970 --> 00:06:39.130
Next up we'll talk about the reactor router.
