WEBVTT
1
00:00:01.290 --> 00:00:07.630
Now we'll get into redux except we'll focus on redux alone no react in this section.

2
00:00:07.740 --> 00:00:11.170
So our objectives are to define what redux is.

3
00:00:11.400 --> 00:00:20.830
Describe actions that reducers and redux and to describe methods on the relaxed or so redux is a popular

4
00:00:20.830 --> 00:00:27.650
state management library and it's created by Dan Avonmouth and Andrew Clark.

5
00:00:28.030 --> 00:00:34.510
It's inspired by Facebook flux and Elm flux is an architecture that Facebook came up with the help solve

6
00:00:34.510 --> 00:00:39.760
the problem of how to manage large applications and Elm a functional programming language not written

7
00:00:39.760 --> 00:00:47.380
by Facebook redux models the application state as a single javascript object which means there's only

8
00:00:47.380 --> 00:00:50.650
one place where all your data and application is stored.

9
00:00:50.710 --> 00:00:57.380
If you put all of your state in redux and the last point about redux is that it's often used with react

10
00:00:57.620 --> 00:01:02.630
but it's a completely independent library so you could use redox with angular MBR.

11
00:01:02.630 --> 00:01:04.400
Any other library you choose.

12
00:01:04.400 --> 00:01:06.530
But it pairs very nicely with re-act

13
00:01:09.530 --> 00:01:11.290
sort of Insol redux.

14
00:01:11.290 --> 00:01:16.200
It's as simple as NPM install dash to save redux.

15
00:01:16.260 --> 00:01:22.830
Now this talk about the first important concept in redux an action so an action is just a plain javascript

16
00:01:22.830 --> 00:01:29.910
object but it must have a key named type and that type value should be a string that represents some

17
00:01:29.910 --> 00:01:33.200
action that you want to take in the application.

18
00:01:33.210 --> 00:01:37.740
Now you can have more than just the type so you can have key is like an ID.

19
00:01:37.740 --> 00:01:43.380
If this is a delete action you can use the ID to help identify which piece of state you want to delete

20
00:01:43.770 --> 00:01:47.970
but the type at the minimum is what you need in order for it to be a valid action.

21
00:01:50.350 --> 00:01:57.760
Once you've created actions the next step is to create a reducer introducer essentially decides what

22
00:01:57.760 --> 00:02:02.430
new state to return given the old state and the current action.

23
00:02:02.500 --> 00:02:08.440
So in the example below assume we have some state with a key called logon that decides whether or not

24
00:02:08.440 --> 00:02:10.460
the user is logged in.

25
00:02:10.480 --> 00:02:16.900
So our old state is one parameter and the action that is currently being dispatched is our second.

26
00:02:16.900 --> 00:02:23.460
Now we'll switch on that action that type and remember type is the required key and if the action type

27
00:02:23.460 --> 00:02:29.300
is log out user then we'll change the state for the log in to be false.

28
00:02:29.430 --> 00:02:34.780
But if the action type is log in user then we'll change the state for the log in to be true.

29
00:02:35.280 --> 00:02:39.450
If this producer doesn't know what to do with the action then it's always a good idea just to return

30
00:02:39.450 --> 00:02:44.770
the state as is.

31
00:02:44.810 --> 00:02:51.200
So after actions and reducers the last important concept is a store and the store is just one big javascript

32
00:02:51.200 --> 00:02:56.640
object that represents our state and the entire application.

33
00:02:56.640 --> 00:03:03.710
There is a redux method you can use to create a store and the create store method takes your main reducer

34
00:03:03.720 --> 00:03:05.520
for the whole application.

35
00:03:05.910 --> 00:03:12.630
That main reducer is often called the root producer so far we have an action which is dispatched to

36
00:03:12.900 --> 00:03:18.870
cause a change in the state reducer which decides what those state changes should be when an action

37
00:03:18.870 --> 00:03:19.910
gets dispatched.

38
00:03:20.100 --> 00:03:25.980
And then a store which contains our actual javascript object of keys and values for the state of our

39
00:03:25.980 --> 00:03:27.180
application.

40
00:03:29.350 --> 00:03:33.720
If you want to change the state like I mentioned you want to dispatch an action from the store.

41
00:03:33.890 --> 00:03:40.090
This dispatch function will dispatch an action and the type is log in user and because we pass the route

42
00:03:40.090 --> 00:03:46.120
reducer as a parameter to the store the reducer that you saw earlier will handle this action and change

43
00:03:46.120 --> 00:03:50.980
the state of log in to be true.

44
00:03:50.990 --> 00:03:55.810
You can also get the state of the store at any time by calling store that get state.

45
00:03:55.820 --> 00:04:01.960
So in this example after we dispatched the log in action we can get the new state by calling store that

46
00:04:01.970 --> 00:04:06.320
gets state and we'll have the new state of our entire application.

47
00:04:06.350 --> 00:04:09.500
It's important to notice here too that redux is synchronous.

48
00:04:09.500 --> 00:04:16.940
So unlike said state in re-act which may take some time to change the applications view store that dispatch

49
00:04:16.970 --> 00:04:18.080
is synchronous.

50
00:04:18.110 --> 00:04:22.760
So as soon as that function runs and it's finished you know that the state has been updated to the new

51
00:04:22.760 --> 00:04:25.200
state.

52
00:04:25.270 --> 00:04:28.240
The store also allows for listening for changes.

53
00:04:28.240 --> 00:04:34.530
So you can add a callback function like the one seen here the change callback and then call store door

54
00:04:34.600 --> 00:04:36.910
listen and pass in that callback.

55
00:04:36.910 --> 00:04:42.160
So any time a state change happens in the entire store this function will get invoked and then you can

56
00:04:42.160 --> 00:04:46.850
call store that gets data from within that function to figure out what the current state is.

57
00:04:46.990 --> 00:04:54.040
In this example we're just logging it using cancel that log if you ever want to cancel that change callback.

58
00:04:54.040 --> 00:04:59.380
You'll get a function as a return from the listener function and this unsubscribe function is what you

59
00:04:59.380 --> 00:05:01.040
would invoke to unsubscribe.

60
00:05:01.300 --> 00:05:06.670
So if you remember back to set timeout or set interval we got an ID that we use to cancel the time out

61
00:05:06.700 --> 00:05:08.020
or the set interval.

62
00:05:08.320 --> 00:05:10.260
But here we have a function that we use.

63
00:05:10.440 --> 00:05:16.910
So whenever we want to stop that callback from happening we just invoke the unsubscribe function.

64
00:05:17.000 --> 00:05:22.900
Let's review the data flow and relax step by step assuming we have a store set up with some state.

65
00:05:22.940 --> 00:05:27.070
The first thing that will happen to affect the state is that an action will be dispatched.

66
00:05:28.020 --> 00:05:31.220
Now remember that action always has a type.

67
00:05:31.290 --> 00:05:37.260
Once the action is dispatched the reducer gets invoked in the first parameter the reducer is the current

68
00:05:37.260 --> 00:05:39.490
state wherever the store currently has.

69
00:05:39.660 --> 00:05:44.890
The second parameter is the action was just dispatched including the type.

70
00:05:44.940 --> 00:05:52.780
Now based on that type and whatever the state currently is the reducer returns a new state object and

71
00:05:52.780 --> 00:05:58.660
then after we get that new state the store invokes all the listeners which tells any listeners that

72
00:05:58.660 --> 00:06:01.170
the store has been updated.

73
00:06:01.270 --> 00:06:04.180
So we've just covered the majority of the redux library.

74
00:06:04.180 --> 00:06:07.000
Next up we'll look at how to integrate it into re-act.
