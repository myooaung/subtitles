WEBVTT
1
00:00:00.450 --> 00:00:01.470
Welcome back.

2
00:00:01.470 --> 00:00:05.960
In this video we're going to introduce spies before we talk about what spies are.

3
00:00:05.970 --> 00:00:10.740
We need to introduce a concept in testing called the mocking when unit testing.

4
00:00:10.890 --> 00:00:17.640
We strive to isolate specific functionality and how this functionality behaves under a variety of circumstances.

5
00:00:17.910 --> 00:00:23.070
Unfortunately many functions or objects may depend on other parts of our application.

6
00:00:23.130 --> 00:00:28.230
These can include other functions and data sources and even previously executed functions.

7
00:00:28.230 --> 00:00:30.660
This is where mocking comes in to help.

8
00:00:30.660 --> 00:00:36.840
A mark is a fixed object that poses as a function without having to go through the overhead of creating

9
00:00:36.840 --> 00:00:38.510
the real object.

10
00:00:38.610 --> 00:00:44.440
When you create a mock object it creates a fake object that takes the place of the real object.

11
00:00:44.490 --> 00:00:50.010
We can then define what methods are called and their return values from within our mock object.

12
00:00:50.370 --> 00:00:57.060
Marks can be used to retrieve certain values like how many times the Mach function was called what value

13
00:00:57.240 --> 00:01:03.930
the function returned and how many parameters the function was called with in jazzmen marks are referred

14
00:01:03.930 --> 00:01:05.670
to as spies.

15
00:01:05.750 --> 00:01:12.830
ASPI can stub or mimic any functionality and track calls to the function and all of its arguments.

16
00:01:12.840 --> 00:01:18.030
It's important to note that spies only exist in the describe or it block in which they are defined and

17
00:01:18.030 --> 00:01:20.130
are removed after each spec.

18
00:01:20.640 --> 00:01:22.370
So let's see how to create a spy.

19
00:01:22.380 --> 00:01:28.880
There are two ways to create a spy and jazzmen the spy on function and the Jasminum creates by function.

20
00:01:28.890 --> 00:01:35.160
Spy on can only be used when the method exists on an object whereas jazzman creates by will return a

21
00:01:35.160 --> 00:01:36.940
brand new function.

22
00:01:37.090 --> 00:01:41.130
When you were spying on an existing function make sure to use by on.

23
00:01:41.490 --> 00:01:46.780
In the case below we have an existing function called ADD but on what object is it attached.

24
00:01:46.810 --> 00:01:50.380
Remember the variables in the global scope are attached to the window object.

25
00:01:50.380 --> 00:01:55.840
So let's see what this looks like here will spy on the add function and test to see if our spy has been

26
00:01:55.840 --> 00:01:56.780
called.

27
00:01:56.800 --> 00:01:59.870
Notice here that we don't care about any kind of return value.

28
00:02:00.040 --> 00:02:02.570
We just want to make sure that our function is called.

29
00:02:02.650 --> 00:02:07.420
So if our function had to go through an expensive process like connecting to a database we wouldn't

30
00:02:07.420 --> 00:02:11.640
have to worry that any of that now we're just faking the behavior of this function.

31
00:02:12.440 --> 00:02:14.630
Or what about some parameters to our function.

32
00:02:14.640 --> 00:02:19.530
Maybe we want to test different parameters or the type of certain parameters to do that.

33
00:02:19.540 --> 00:02:22.580
We can use that to have been called with matter.

34
00:02:22.600 --> 00:02:24.000
Here is what that would look like.

35
00:02:25.020 --> 00:02:28.990
Now let's see if our spy actually returns the correct value to do that.

36
00:02:29.010 --> 00:02:35.250
We can use the N dot call through function to make sure that we store the return value instead of just

37
00:02:35.310 --> 00:02:37.910
undefined when we invoke this function.

38
00:02:37.950 --> 00:02:40.240
We will see that our return value is 6.

39
00:02:40.290 --> 00:02:42.320
And this test should pass.

40
00:02:42.330 --> 00:02:47.520
You might be wondering why would I bother to use a spy to test a return value instead of the actual

41
00:02:47.520 --> 00:02:48.600
function.

42
00:02:48.600 --> 00:02:53.850
It's possible that the original function takes a while to run or depends on other objects that we cannot

43
00:02:53.850 --> 00:02:55.950
access with unit testing.

44
00:02:55.950 --> 00:03:01.380
We want to test small units of our code so we should not be invoking lots of functions that depend on

45
00:03:01.380 --> 00:03:02.300
other ones.

46
00:03:02.370 --> 00:03:07.440
We should strive to use dummy data whenever possible to speed up our tests.

47
00:03:07.470 --> 00:03:11.260
Finally we can test the frequency or how many times a function is called.

48
00:03:11.520 --> 00:03:15.810
This is useful if you want to make sure a function is only called a certain amount of times.

49
00:03:15.840 --> 00:03:19.740
Or maybe you want the function to only be invoked once to test this.

50
00:03:19.770 --> 00:03:25.470
We can use the calls object on the spy to access the count or see if the function has been called at

51
00:03:25.470 --> 00:03:26.730
all.

52
00:03:26.730 --> 00:03:28.770
Speiser are a bit strange to wrap your head around.

53
00:03:28.920 --> 00:03:34.980
But remember all we are trying to do here is mock the behavior of a function Speiser useful when we

54
00:03:34.980 --> 00:03:37.430
want to see how many times a function is called.

55
00:03:37.650 --> 00:03:38.410
What arguments.

56
00:03:38.430 --> 00:03:41.810
A function is called with and what the function returns.

57
00:03:41.910 --> 00:03:47.010
Spies often save us quite a bit of trouble when working with large code bases and help reduce the time

58
00:03:47.010 --> 00:03:48.780
it takes to run our tests.

59
00:03:48.780 --> 00:03:52.510
Get some practice with spies in the next section and I'll see you in the next video.

60
00:03:52.510 --> 00:03:52.850
Good luck.
