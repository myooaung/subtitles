1
00:00:00,810 --> 00:00:01,650
Welcome back.

2
00:00:01,800 --> 00:00:07,520
In this video we'll combine our knowledge of D-3 and SPG to create a simple bar chart.

3
00:00:07,890 --> 00:00:10,960
Let's start by putting the data and data visualization.

4
00:00:11,190 --> 00:00:16,270
Here I've got the data from the UN on the number of births around the world by year and by month.

5
00:00:16,500 --> 00:00:20,950
The data goes from 1967 through 2014.

6
00:00:21,000 --> 00:00:25,770
Our goal in this video is to make a simple bar chart along with a way to adjust the year and see the

7
00:00:25,770 --> 00:00:27,350
bar charts update.

8
00:00:27,480 --> 00:00:32,290
Here's a link to some starter code for this project including the HMO and the birth data.

9
00:00:32,670 --> 00:00:38,070
Here's a link to the live site which so far it doesn't do anything because we haven't written any code.

10
00:00:38,070 --> 00:00:42,840
Our first goal will just be getting some bars on the page without worrying about changing the year.

11
00:00:42,930 --> 00:00:49,080
I've already created an apt J S file where I'll be writing my D-3 code before I forget a link to it

12
00:00:49,110 --> 00:00:50,410
in my HDL now.

13
00:00:50,910 --> 00:00:57,730
Let's start coding first you'll notice that my range slider doesn't have a min max or current value.

14
00:00:58,080 --> 00:01:01,250
I'd like to base these on the first and last year in my dataset.

15
00:01:02,090 --> 00:01:07,910
So the first thing I'll do is grab the first and last year and then update the min max value attributes

16
00:01:07,970 --> 00:01:12,820
on our input this code assumes that the first year comes from the first element.

17
00:01:12,820 --> 00:01:16,600
My dataset in the last year comes from the last element in my dataset.

18
00:01:16,840 --> 00:01:22,150
In the next video we'll learn about a way to use D-3 to find the largest and smallest values even if

19
00:01:22,150 --> 00:01:24,050
they don't follow this simple pattern.

20
00:01:24,810 --> 00:01:30,360
Typically I'd write this code inside of an event listener that waits for the dom content to load.

21
00:01:30,360 --> 00:01:36,030
However for these tutorials I'd like to be able to easily look at my variables in the console.

22
00:01:36,060 --> 00:01:39,280
For that reason I'll just make everything global for now.

23
00:01:39,390 --> 00:01:43,860
In your own projects though you should be sure to wrap your code inside of an event listener so that

24
00:01:43,860 --> 00:01:46,740
you don't pollute the global scope with a bunch of variables.

25
00:01:47,040 --> 00:01:50,710
Let's refresh the page cool.

26
00:01:50,750 --> 00:01:54,160
It looks like our input tag is updated next.

27
00:01:54,170 --> 00:01:59,900
Let's set a width and height for our SPG and try to append some rectangles since the inputs current

28
00:01:59,900 --> 00:02:03,350
value is for the first year 1967.

29
00:02:03,340 --> 00:02:07,370
I'll only want to join data from that year to my rectangles.

30
00:02:07,370 --> 00:02:11,490
I'll use a filter to remove any data that isn't from that first year.

31
00:02:11,510 --> 00:02:17,720
There's also a helper method called D-3 nest which will allow us to restructure our data but let's keep

32
00:02:17,720 --> 00:02:19,120
things simple for now.

33
00:02:19,550 --> 00:02:22,970
If I run this code now I rectangles want to do a whole lot.

34
00:02:23,000 --> 00:02:26,870
I also need to figure out what attributes to set on each rectangle.

35
00:02:27,140 --> 00:02:31,840
One of the hardest parts about using D-3 to visualize data is usually not the data binding.

36
00:02:32,090 --> 00:02:38,090
It's figuring out how to translate the join data into the appropriate visuals before we try to get an

37
00:02:38,150 --> 00:02:39,380
accurate bar chart.

38
00:02:39,380 --> 00:02:44,820
Let's first just try to render our bars in the SVGA with some with the night.

39
00:02:44,860 --> 00:02:51,370
I'll pick a width for each rectangle say 25 pixels and for now let's have them spend the full height

40
00:02:51,370 --> 00:02:52,890
of the SVGA.

41
00:02:52,900 --> 00:02:57,100
This means that the y coordinate of each rectangle should be zero.

42
00:02:57,400 --> 00:02:58,980
But what about the x coordinate.

43
00:02:59,290 --> 00:03:01,850
Well we want the first rectangle to be on the left.

44
00:03:01,870 --> 00:03:08,020
The next one to be twenty five pixels over the next one to be 25 pixels over again and so on we can

45
00:03:08,020 --> 00:03:09,730
express this mathematically.

46
00:03:09,730 --> 00:03:16,300
If we keep track of the index of our current piece of data in the birth data array we can then use this

47
00:03:16,300 --> 00:03:22,250
index to offset the x coordinate of each bar based on the bar with cool.

48
00:03:22,510 --> 00:03:27,580
It might look like we've got one rectangle in the SVGA but these are actually all of our rectangles

49
00:03:27,670 --> 00:03:29,370
all squished together.

50
00:03:29,770 --> 00:03:34,840
If we want to space them out a bit we can add some padding and then shift our x coordinate over by the

51
00:03:34,840 --> 00:03:37,340
width plus the amount of padding.

52
00:03:37,380 --> 00:03:41,750
Let me also change the default fill for the rectangles.

53
00:03:41,770 --> 00:03:46,150
Now it's clearer that there are multiple rectangles in our SPG.

54
00:03:46,150 --> 00:03:49,570
Setting the bar with to be 25 pixels was fairly arbitrary.

55
00:03:49,780 --> 00:03:54,380
And in this case we wind up with a bunch of unused space in the SVGA.

56
00:03:54,520 --> 00:04:00,280
Very often you'll see the bar which depend on the width of the SPG itself along with the amount of padding

57
00:04:00,280 --> 00:04:06,790
you want in between bars in this case a better approach would be to take the SPG width divide by the

58
00:04:06,790 --> 00:04:11,140
number of rectangles we have and then subtract the amount of padding.

59
00:04:11,140 --> 00:04:18,010
This way the total width of the number of bars plus the amount of padding per bar will be the same as

60
00:04:18,010 --> 00:04:19,810
the SPG width.

61
00:04:20,570 --> 00:04:21,630
OK great.

62
00:04:21,790 --> 00:04:24,190
Now let's tackle the heights of these rectangles.

63
00:04:24,490 --> 00:04:28,250
This part is a bit tricky because of the way coordinates work with SVGA.

64
00:04:28,540 --> 00:04:35,070
Remember that the 00 point is the upper left corner of the SPG not the lower left corner this doesn't

65
00:04:35,070 --> 00:04:39,370
matter so much for the height attribute which we know should be based on the number of births.

66
00:04:39,390 --> 00:04:44,380
Let's just make the height equal to the value of the births property for each piece of data.

67
00:04:44,430 --> 00:04:46,300
What about the y value.

68
00:04:46,380 --> 00:04:47,480
It isn't zero.

69
00:04:47,760 --> 00:04:53,280
Instead we need the value for this attribute to be the y coordinate of the upper left corner of the

70
00:04:53,280 --> 00:04:54,380
bar.

71
00:04:54,390 --> 00:04:59,880
This means that we need to take the height of the SPG and subtract off the desired bar height in order

72
00:04:59,880 --> 00:05:01,800
to obtain the correct y coordinate.

73
00:05:05,270 --> 00:05:08,050
OK this looks good or does it.

74
00:05:08,360 --> 00:05:11,300
If we refresh the page things don't look right at all.

75
00:05:11,300 --> 00:05:17,340
Total births recorded in our dataset for 1967 were relatively low especially compared to now.

76
00:05:17,750 --> 00:05:21,930
But all of these bars look the same as before.

77
00:05:22,010 --> 00:05:27,440
If we look in the elements tab we can find the problem because our hides and our y coordinates are tied

78
00:05:27,440 --> 00:05:29,140
directly to birth numbers.

79
00:05:29,210 --> 00:05:34,140
Their values are much much larger than the dimensions of the SVGA.

80
00:05:34,340 --> 00:05:40,580
What we need to do is scale the data so that it fits properly within the bounds of the SVGA.

81
00:05:40,640 --> 00:05:43,790
For now let's do this manually in the next video.

82
00:05:43,850 --> 00:05:46,480
We'll learn how to automate this process.

83
00:05:46,490 --> 00:05:49,090
No month had more than 2.5 million births.

84
00:05:49,130 --> 00:05:55,040
So if we divide all of our birth numbers by 2.5 million and then multiply by the squeegie height we'll

85
00:05:55,040 --> 00:05:59,180
get values between 0 and 600 cool.

86
00:05:59,190 --> 00:06:00,290
That looks much better.

87
00:06:01,120 --> 00:06:07,090
Our last step is to get that range and put working with these D-3 to add listener input events on the

88
00:06:07,090 --> 00:06:14,860
input the event target value will be a year from 1967 to 2014 and we'll want to convert that to a number

89
00:06:16,450 --> 00:06:17,800
once we know the new year.

90
00:06:17,800 --> 00:06:22,210
We just need to grab each rectangle and update the height and weight attributes based on the number

91
00:06:22,210 --> 00:06:24,490
of monthly births for that year.

92
00:06:24,490 --> 00:06:26,480
Be sure to scale your data appropriately.

93
00:06:29,940 --> 00:06:34,980
With this code in your app yes the range input should now be working.

94
00:06:35,020 --> 00:06:36,810
There's plenty more we can do here.

95
00:06:36,850 --> 00:06:39,400
For example the graph isn't labeled at all.

96
00:06:39,610 --> 00:06:44,000
It would be nice to have labeled axes or at least labels for the individual bars.

97
00:06:44,080 --> 00:06:46,430
So it's clear what they represent.

98
00:06:46,430 --> 00:06:50,250
We also had to do a lot of math to figure out how to draw these rectangles.

99
00:06:50,630 --> 00:06:55,910
Fortunately as we all learned in the next section D-3 can help us out with some of this arithmetic quite

100
00:06:55,910 --> 00:06:59,220
a bit but we'll save these features for later.

101
00:06:59,270 --> 00:07:02,440
Right now go check out the exercises for the section.

102
00:07:02,720 --> 00:07:08,720
When you're ready we can learn about some more functionality that D-3 provides to help make SVGA manipulation

103
00:07:08,900 --> 00:07:10,150
a little more seamless.
