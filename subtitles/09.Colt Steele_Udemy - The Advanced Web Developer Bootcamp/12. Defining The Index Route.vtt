WEBVTT
1
00:00:00.180 --> 00:00:00.470
All right.

2
00:00:00.480 --> 00:00:01.470
Welcome back.

3
00:00:01.470 --> 00:00:03.120
So we have our database set up.

4
00:00:03.120 --> 00:00:05.510
Now we're going to start working on our routes.

5
00:00:05.520 --> 00:00:11.520
And remember we have five different routes we want for this restful Jaison API to use API and we're

6
00:00:11.520 --> 00:00:16.630
going to start off with this first one that just lists all the current tissues in the database.

7
00:00:16.790 --> 00:00:22.540
And so the route the path itself is slash API slash to use and it's a GET request.

8
00:00:22.740 --> 00:00:24.050
But before we do that.

9
00:00:24.120 --> 00:00:29.550
Notice that all of these routes start with Slash API slash to.

10
00:00:29.670 --> 00:00:31.100
Now we don't have to do that.

11
00:00:31.230 --> 00:00:36.090
You know when we're creating an API it's up to us to structure it however we want we could call this

12
00:00:36.150 --> 00:00:41.540
slash list to use and this one the slash created to do and so on we could name them whatever we want

13
00:00:41.760 --> 00:00:47.430
but this is a nice standardized format and the slash API at the beginning is also not necessary but

14
00:00:47.460 --> 00:00:53.010
I like to do it especially because when we actually build our application we're going to have some pages

15
00:00:53.010 --> 00:00:54.680
that are not part of the API.

16
00:00:54.810 --> 00:00:58.710
So for example we're going to build the To Do list in our same node.

17
00:00:58.890 --> 00:01:04.500
So our note app is going to have a home page that it serves and that home page is going to request our

18
00:01:04.500 --> 00:01:05.360
own Noda.

19
00:01:05.430 --> 00:01:08.570
But it's going to request slash API slash to use.

20
00:01:08.970 --> 00:01:12.150
So we don't necessarily want to take up the main namespace.

21
00:01:12.150 --> 00:01:18.130
You might as well relegate or segregate things to the slash API portion of our application.

22
00:01:18.150 --> 00:01:19.270
OK so let's get started.

23
00:01:19.530 --> 00:01:26.250
And we're going to hop over to our cloud nine and the first thing I'm going to do is instead of defining

24
00:01:26.310 --> 00:01:32.780
all five routes here because each route is going to be potentially five to 10 lines maybe more.

25
00:01:32.940 --> 00:01:35.500
And that's going to clutter up our main file here.

26
00:01:35.760 --> 00:01:37.130
And that's just for us.

27
00:01:37.140 --> 00:01:41.670
So if we had users and comments and whatever else that would be another five or plus routes for each

28
00:01:41.670 --> 00:01:43.800
one this would be a very long file.

29
00:01:44.070 --> 00:01:46.920
So the convention is to make our route's directory.

30
00:01:46.980 --> 00:01:48.130
So we're going to do that now.

31
00:01:48.240 --> 00:01:50.940
New Folder and I'll call it routes.

32
00:01:50.940 --> 00:01:53.710
And then inside of it I'm going to make a to do Scott.

33
00:01:53.730 --> 00:01:54.810
Yes.

34
00:01:54.930 --> 00:01:57.680
So this will be all of our to do routes.

35
00:01:57.690 --> 00:02:02.940
So to get things working I'm just going to start off by requiring Express because we're going to need

36
00:02:02.940 --> 00:02:05.770
Express and we're going to need the Express router.

37
00:02:05.950 --> 00:02:17.020
So Express equals require Express then we're also going to add in var router equals express dot router.

38
00:02:17.060 --> 00:02:18.720
You're not familiar with the express router.

39
00:02:18.900 --> 00:02:24.390
This just allows us to break our routes out into little modular chunks and what we'll actually do is

40
00:02:24.390 --> 00:02:31.360
require them back in our index J.S. up this index j as our main app file and require them here.

41
00:02:32.360 --> 00:02:37.530
So Varada equals express that router and then let's establish our first little wrap.

42
00:02:37.580 --> 00:02:47.660
So our first route is going to be router datt get and I'm actually just going to write slash here which

43
00:02:47.660 --> 00:02:53.730
we already have a slash or a route route but I'm going to do something slightly different so I'm going

44
00:02:53.730 --> 00:02:59.220
to do rest and hello from Duge raps.

45
00:02:59.540 --> 00:03:06.050
So I'm going to send that and you might think there's a conflict but actually right now nothing is happening

46
00:03:06.050 --> 00:03:08.540
with these routes in our main app File.

47
00:03:08.540 --> 00:03:09.890
We're not requiring it.

48
00:03:09.920 --> 00:03:11.300
We're not including those routes.

49
00:03:11.300 --> 00:03:12.790
So we do need to do that.

50
00:03:12.830 --> 00:03:20.390
So I'm going to do that now when to add var to do routes equals require and then the path to that directory

51
00:03:20.480 --> 00:03:23.990
is going to be dot slash route slash to use.

52
00:03:24.050 --> 00:03:30.500
So to do route this variable it's going to contain the exports of our to do such a file but we need

53
00:03:30.500 --> 00:03:32.710
to actually export our router.

54
00:03:32.810 --> 00:03:33.600
That's what we want.

55
00:03:33.710 --> 00:03:38.820
So we're going to do a module that exports equals router.

56
00:03:39.030 --> 00:03:42.540
OK so now we have access to our routes.

57
00:03:42.590 --> 00:03:46.280
We've required them but we're still not actually doing anything with them.

58
00:03:46.280 --> 00:03:51.660
And this is the Khelein so I'm going to delete are happier out to clean things up a bit.

59
00:03:52.340 --> 00:03:57.650
And I'm going to change this just to be a resident and hello from the root.

60
00:03:57.980 --> 00:03:58.470
Oh boy.

61
00:03:58.490 --> 00:04:00.460
Route route.

62
00:04:01.790 --> 00:04:02.930
Just like that.

63
00:04:03.440 --> 00:04:08.080
And then we're going to actually use all the routes in this file which right now is just one.

64
00:04:08.180 --> 00:04:10.480
But we're going to have five routes in this file.

65
00:04:10.490 --> 00:04:13.880
Each one is going to interact with the database in its own way.

66
00:04:13.880 --> 00:04:15.820
And so we're going to tell her to use them.

67
00:04:16.040 --> 00:04:22.190
But the way we do that is slightly different We're going to do an app use and there's two things we

68
00:04:22.190 --> 00:04:22.660
pass in.

69
00:04:22.670 --> 00:04:25.530
The first is a prefix for all the routes.

70
00:04:25.640 --> 00:04:29.370
So ours are all going to start with API slash to do.

71
00:04:29.840 --> 00:04:33.710
Remember API slashed to deuce and all five of these start with that.

72
00:04:33.720 --> 00:04:38.750
And so if we tell express that we want them to start with this all we have to do is define what comes

73
00:04:38.810 --> 00:04:40.380
afterwards if anything.

74
00:04:40.520 --> 00:04:47.280
So in this case a get request to slash if it's inside or to do is routes is actually going to be a get

75
00:04:47.330 --> 00:04:51.930
request to slash API slash to use slash nothing.

76
00:04:51.950 --> 00:04:54.920
So the second thing we need to pass and is hard to do routes.

77
00:04:55.260 --> 00:04:58.510
And no this is kind of convoluted but hopefully it makes sense.

78
00:04:58.640 --> 00:04:59.440
What we're doing.

79
00:04:59.450 --> 00:05:00.920
Going to define five routes here.

80
00:05:01.220 --> 00:05:07.430
And when we refer to router don't get slash in our main app it's actually going to be router don't get

81
00:05:07.550 --> 00:05:11.700
slash API slash to do slash nothing as a get request.

82
00:05:11.720 --> 00:05:18.470
So if we want to define this get route where we go to slash API slash to do slash to do Id all we actually

83
00:05:18.470 --> 00:05:24.790
have to do is router don't get slashed to do Id because API slash to use is done for us.

84
00:05:24.800 --> 00:05:26.990
So with all that said let's test it out.

85
00:05:27.110 --> 00:05:28.010
We have two routes.

86
00:05:28.010 --> 00:05:33.740
Now we have our Shlash coming from our index j us that says Hello from the root route and then we have

87
00:05:33.740 --> 00:05:40.300
our slash which is coming from the to do's routes which is technically under sash API slash to Dewes

88
00:05:40.570 --> 00:05:41.990
is as a prefix.

89
00:05:41.990 --> 00:05:43.070
So let's see what happens.

90
00:05:43.070 --> 00:05:48.390
Start our server up here to make sure we're in the correct directory.

91
00:05:48.440 --> 00:05:51.100
So it to CD into my to use API.

92
00:05:51.290 --> 00:05:51.700
OK.

93
00:05:51.800 --> 00:05:54.110
Now I will start node index.

94
00:05:54.200 --> 00:05:55.210
Yes.

95
00:05:55.750 --> 00:05:56.940
And it says it's running.

96
00:05:57.230 --> 00:05:58.280
So let's preview it.

97
00:05:58.280 --> 00:06:04.670
If we go to our route route we get hello from the route route and if we go to slash API slash to Duse

98
00:06:05.030 --> 00:06:08.050
we get hello from to do is routes perfect.

99
00:06:08.270 --> 00:06:13.700
So now in our Yes we'll be able to define our five routes without having to rewrite slash API slash

100
00:06:13.700 --> 00:06:14.950
to do it over and over.

101
00:06:15.080 --> 00:06:20.140
So the very last thing we'll do is instead of sending Hello from Tutu's routes let's send all of you

102
00:06:20.140 --> 00:06:22.330
to use in the database.

103
00:06:22.340 --> 00:06:28.230
So for that to work we actually need to require our model which is in this directory models.

104
00:06:28.310 --> 00:06:33.070
So we're going to make a variable called D-B call it database you could call it whatever you want.

105
00:06:33.070 --> 00:06:35.670
Var D-B equals require.

106
00:06:35.930 --> 00:06:41.740
And to get to this directory the models directory from where we are because we're inside of that see

107
00:06:41.750 --> 00:06:48.710
to do us right here are getting into backout level and then go into the models directory so we're going

108
00:06:48.710 --> 00:06:54.950
to do dot dot slash models and we just want the models directory because it will automatically require

109
00:06:54.950 --> 00:06:59.760
the index file which has all this code in it and we're adding in the to do model.

110
00:06:59.990 --> 00:07:08.700
So we'll be able to access D-B to do so and show you that here all of our code that mongoose gives us

111
00:07:08.700 --> 00:07:11.610
for our model will be under DVD to do.

112
00:07:12.200 --> 00:07:16.020
So what we want is D-B to do dot find.

113
00:07:16.340 --> 00:07:18.230
And that's going to find all to do.

114
00:07:18.320 --> 00:07:22.150
So this is the code we want when we hit this route list all the to do.

115
00:07:22.670 --> 00:07:24.120
We find them like this.

116
00:07:24.130 --> 00:07:29.610
And rather than doing it for familiar with Mongoose you can do a callback function like this.

117
00:07:29.900 --> 00:07:32.650
But now we can also do promises.

118
00:07:32.750 --> 00:07:34.020
So we're going to add a dot then

119
00:07:37.360 --> 00:07:45.510
to use data that comes back and we're just going to do a rez that Jaison to use just like that and we

120
00:07:45.510 --> 00:07:47.430
can add a catch as well.

121
00:07:47.880 --> 00:07:53.120
If there's an error and we'll just do a red dot send error.

122
00:07:54.380 --> 00:07:54.870
OK.

123
00:07:55.230 --> 00:07:58.930
So there's a lot going on because of how we've broken up this application.

124
00:07:59.020 --> 00:08:04.410
It's pretty standard for Express but it can be very complicated if you're new to it but just focus on

125
00:08:04.410 --> 00:08:09.270
the fact that we have our code for our to do model in this D-B variable.

126
00:08:09.270 --> 00:08:14.790
Under de-bunked to do and there's a method find that Mongoose is going to go connect to our database

127
00:08:14.940 --> 00:08:21.660
find all Tutu's and then afterwards we're just going to send the Jason back red Jaison to do.

128
00:08:21.780 --> 00:08:27.000
And if there's a problem we're going to send the error message so we don't have any to use in our database.

129
00:08:27.030 --> 00:08:28.220
Small problem.

130
00:08:28.320 --> 00:08:29.730
But let's just see what happens.

131
00:08:29.730 --> 00:08:33.940
So if we go to Sasha API slushed do we get an empty array.

132
00:08:34.020 --> 00:08:38.220
And that's because there's nothing in our database so we're going to trust that it's working but we'll

133
00:08:38.220 --> 00:08:43.140
actually have proof of that in the next video when we get our post route to create a new to do.
