1
00:00:01,470 --> 00:00:05,220
So we left off the last video just starting to build an express application.

2
00:00:05,250 --> 00:00:10,200
And I briefly showed that we could make a request to this back end using the curl command if you're

3
00:00:10,200 --> 00:00:11,130
not familiar with Perl.

4
00:00:11,130 --> 00:00:14,480
It's a simple way to make each TZP request from the command line.

5
00:00:14,640 --> 00:00:15,720
You've seen postman.

6
00:00:15,720 --> 00:00:18,230
Or maybe some other nice interface to do that.

7
00:00:18,240 --> 00:00:21,030
What I want to show you is the command to start.

8
00:00:21,030 --> 00:00:26,250
But once we start making more complex API requests what I want to show you then is a tool called HDD

9
00:00:26,250 --> 00:00:26,850
pie.

10
00:00:26,850 --> 00:00:29,060
This is a tool that I use quite a bit in development.

11
00:00:29,160 --> 00:00:34,680
So we left off by starting our server using gnomon and then we made a request and we saw all of this

12
00:00:34,680 --> 00:00:35,260
kind of gross.

13
00:00:35,280 --> 00:00:42,900
Each TNL what I'd like to do is instead build a small error handler that sends back Jason or a five

14
00:00:42,900 --> 00:00:45,740
hundred status code which means that something would be wrong.

15
00:00:46,050 --> 00:00:48,260
So I'm going to do that inside of my handlers.

16
00:00:48,300 --> 00:00:50,780
I'm going to make a new file and I'll call that error.

17
00:00:50,960 --> 00:00:52,060
Yes.

18
00:00:52,080 --> 00:00:57,930
And inside of ordinary us we're going to simply create a function called error handler and error handler

19
00:00:57,930 --> 00:01:01,300
is going to accept as its first parameter in error.

20
00:01:01,500 --> 00:01:04,780
It's also going to accepter cost response and indexed.

21
00:01:05,100 --> 00:01:08,880
So remember requesting response that's the wreckin rez that you've seen many times before.

22
00:01:08,880 --> 00:01:10,250
In Express applications.

23
00:01:10,380 --> 00:01:13,720
But what we're going to do here is build a piece of middleware.

24
00:01:13,740 --> 00:01:22,410
This is going to be used after our 404 handler and we will return a response that status of the error

25
00:01:22,410 --> 00:01:25,240
status or 500.

26
00:01:25,260 --> 00:01:29,890
If you remember what our error status was back in this index yes it was a 404.

27
00:01:30,150 --> 00:01:35,130
If we don't make it to the 404 that means that there has been a route that has been found but something

28
00:01:35,130 --> 00:01:37,140
went wrong on the server.

29
00:01:37,140 --> 00:01:42,930
So what we're going to do here is attack the Jason method so that we can then return an object.

30
00:01:42,930 --> 00:01:44,540
This object will call error.

31
00:01:44,640 --> 00:01:49,770
And inside it will give it a message property that's going to be whatever the message of that error

32
00:01:49,770 --> 00:01:50,610
is.

33
00:01:50,610 --> 00:01:56,700
Or a generic message maybe we'll see something like whoops something went wrong.

34
00:01:57,530 --> 00:02:03,900
What will finally do here is export this function so we can see a module that exports is equal to error

35
00:02:03,900 --> 00:02:04,920
handler.

36
00:02:05,520 --> 00:02:08,970
So you might still be wondering what's the purpose of this code that we're writing and the idea here

37
00:02:08,970 --> 00:02:13,960
is simply to make a generic function that is going to respond with the status of the error.

38
00:02:13,980 --> 00:02:19,140
Whether that's a 404 or maybe custom errors that we make or 500 which means that something has gone

39
00:02:19,140 --> 00:02:20,560
wrong on the server.

40
00:02:21,000 --> 00:02:23,580
So where do we actually get to use this error handler.

41
00:02:23,670 --> 00:02:26,840
Well back in our index yes we first have to import it.

42
00:02:26,850 --> 00:02:30,800
So what I'm going to do up here say Konst error handler.

43
00:02:31,280 --> 00:02:33,280
Is the result of require.

44
00:02:33,450 --> 00:02:38,800
And here we always have to specify a relative path because if we don't specify a relative path Express

45
00:02:38,820 --> 00:02:44,430
is always going to try to look in the node modules folder and that's not where our handler lives.

46
00:02:44,430 --> 00:02:50,400
So at the very bottom of my code right before my laptop listen I'm going to add another use for this

47
00:02:50,400 --> 00:02:51,520
error handler.

48
00:02:51,750 --> 00:02:57,540
And what this is going to do is it's going to take any incoming middleware within error and it will

49
00:02:57,540 --> 00:03:00,580
print out a NACER display using Jaisalmer.

50
00:03:01,080 --> 00:03:04,550
So let's go back and start our server and see what this looks like.

51
00:03:04,560 --> 00:03:07,440
So my server still started actually thanks to gnomon.

52
00:03:07,440 --> 00:03:11,530
I'm going to make a request to localhost 80 81 and you can see right off the bat.

53
00:03:11,560 --> 00:03:15,630
I get this NACER just on message that says error message not found.

54
00:03:15,630 --> 00:03:19,800
This is what we're going to be using to send back to the client when errors go on.

55
00:03:20,010 --> 00:03:24,450
And it's really important to have a very good standardized error handler so that one front end developers

56
00:03:24,450 --> 00:03:25,920
start working with your API.

57
00:03:26,010 --> 00:03:27,780
They know exactly what to expect.

58
00:03:27,960 --> 00:03:29,140
It's sometimes very challenging.

59
00:03:29,140 --> 00:03:33,870
We have a very cryptic error message and the front end developer has to work or change that error message

60
00:03:34,050 --> 00:03:36,000
to display something that you might want.

61
00:03:36,240 --> 00:03:39,410
So what we've simply done here is build a standard error handler.

62
00:03:39,410 --> 00:03:40,680
This is a very simple way.

63
00:03:42,450 --> 00:03:46,830
Of kind of bridging the gap between sending back some HDMI which wouldn't really work.

64
00:03:46,830 --> 00:03:51,450
Remember we're building an API so we really just want to send back song so to do that we've written

65
00:03:51,450 --> 00:03:54,830
this nice error handler function that should help us out.

66
00:03:54,840 --> 00:03:59,430
So what we're going to do in the next video is start actually adding some data to our application.

67
00:03:59,430 --> 00:04:01,140
We're going to build a model for a user.

68
00:04:01,260 --> 00:04:04,190
We're then going to start adding some routes and some handlers for that user.

69
00:04:04,230 --> 00:04:08,760
We're going to see if we have the ability to create users and send them in as well or even get to introduce

70
00:04:08,760 --> 00:04:11,620
authentication and some web tokens as well into the mix.
