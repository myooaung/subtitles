WEBVTT
1
00:00:00.450 --> 00:00:07.210
Welcome back in the last video we built a map visualization and a pie chart for our climate dashboard.

2
00:00:07.290 --> 00:00:11.710
Let's keep working and finish up this visualization.

3
00:00:11.710 --> 00:00:13.440
Next up is the bar chart.

4
00:00:13.810 --> 00:00:19.000
This one is trickier since it interacts so closely with the map in the app japes.

5
00:00:19.030 --> 00:00:25.570
Once again assume I have create and draw functions create just needs width and height drawn the data

6
00:00:25.570 --> 00:00:28.990
set the current data type and the current country.

7
00:00:29.170 --> 00:00:35.590
Since no country is selected on page load I'll pass an empty string when the year changes.

8
00:00:35.590 --> 00:00:40.690
I don't need to redraw the bars but I do need to change their coloring since the bar for the current

9
00:00:40.690 --> 00:00:42.320
year is highlighted differently.

10
00:00:42.880 --> 00:00:45.180
So I'll need third function called I like bars.

11
00:00:45.190 --> 00:00:49.490
That just takes in the current year when the data type changes.

12
00:00:49.490 --> 00:00:51.040
I'll need to update the bar chart.

13
00:00:51.320 --> 00:00:56.240
So in this callback I'll see if there's an active country and then cold drop or with the appropriate

14
00:00:56.240 --> 00:00:57.010
values.

15
00:00:58.610 --> 00:00:59.710
Let's head over to a barge.

16
00:00:59.760 --> 00:01:03.830
Yes once again not much is going on with the create function.

17
00:01:03.980 --> 00:01:10.400
Just formatting the Viji and appending some elements highlight bars is also relatively straightforward.

18
00:01:10.700 --> 00:01:16.910
I just need to grab all of the rectangles and update their fill based on their year in the current year.

19
00:01:16.950 --> 00:01:22.640
The drawing though will take some more work after setting some basic info on widths heights and paddings

20
00:01:23.060 --> 00:01:26.760
of filter my data to the appropriate country and sort by year.

21
00:01:27.230 --> 00:01:32.690
Note that if I pass an empty string this array will be empty and I'll end up removing of the bars from

22
00:01:32.690 --> 00:01:34.490
the chart.

23
00:01:34.690 --> 00:01:39.250
Then create X and Y scales along with a bar with based on the scale.

24
00:01:39.580 --> 00:01:45.450
Here I'm basically setting this variable equal to the scaled value of one year next.

25
00:01:45.470 --> 00:01:51.160
I'll set up my axes one slightly annoying thing is that the x axis labels will have commas in them even

26
00:01:51.160 --> 00:01:57.220
though they're years so I'll use D-3 the format in passing a formatter to the Access Tich format method

27
00:01:57.430 --> 00:01:59.450
that removes commas.

28
00:01:59.560 --> 00:02:03.250
You can read more about these methods in the docs if you're interested.

29
00:02:03.250 --> 00:02:06.730
The X-axis never really changes but the Y-axis does.

30
00:02:06.730 --> 00:02:08.340
So I'll give it a transition.

31
00:02:09.040 --> 00:02:13.540
Next I need to update my title and y axis label based on the data type in the country.

32
00:02:13.540 --> 00:02:20.350
If there is one now I'll create a transition that I'll use in a couple of places and then once again

33
00:02:20.350 --> 00:02:23.340
make use of the general update pattern.

34
00:02:23.360 --> 00:02:24.970
Here's my update selection.

35
00:02:25.220 --> 00:02:30.670
After creating it I'll hop into the selection in transition bars that are slated for removal.

36
00:02:31.040 --> 00:02:34.600
I'll give them a delay based on their index with this expression.

37
00:02:34.640 --> 00:02:36.380
The last bar won't have any delay.

38
00:02:36.440 --> 00:02:40.550
The second to last bar will be delayed by 100 milliseconds and so on.

39
00:02:40.940 --> 00:02:45.710
Once the transition is complete I'll remove the selection.

40
00:02:45.730 --> 00:02:51.400
Now I'll hop into the enter selection append rectangles and start at the bottom with no height then

41
00:02:51.400 --> 00:02:52.090
all merge.

42
00:02:52.090 --> 00:02:53.950
Update The Xon with attributes.

43
00:02:54.070 --> 00:02:59.150
Then use the same transition that I had on exit but with the delay in the opposite order.

44
00:02:59.290 --> 00:03:01.410
Now the first rectangle will have no delay.

45
00:03:01.420 --> 00:03:04.950
The second one will be delayed 100 milliseconds and so on.

46
00:03:05.140 --> 00:03:10.350
My y in height attributes will be set using this transition.

47
00:03:10.380 --> 00:03:13.470
This is all well and good but in order to see the bars show up.

48
00:03:13.470 --> 00:03:16.560
We also need an event handler for clicking on the map.

49
00:03:16.650 --> 00:03:22.130
So let's head back into the map dodgiest file inside of the Enter selection.

50
00:03:22.140 --> 00:03:25.670
I'll add an event handler for clicks when I click on a country.

51
00:03:25.710 --> 00:03:28.290
First check to see what the current data type is.

52
00:03:28.350 --> 00:03:31.360
Then I'll store what I clicked on in a D-3 selection.

53
00:03:31.620 --> 00:03:36.220
I'll handle the logic for highlighting the country by toggling a class called active.

54
00:03:36.630 --> 00:03:40.660
So next I'll check to see whether my selection has the active class.

55
00:03:40.920 --> 00:03:46.380
If it's active I want to remove the bar chart by setting the country name to an empty string if it's

56
00:03:46.470 --> 00:03:47.070
inactive.

57
00:03:47.070 --> 00:03:49.450
I want to draw bars for this country.

58
00:03:49.680 --> 00:03:54.900
Either way if I pass country name and current data type into my drop R function I'll update the bar

59
00:03:54.900 --> 00:03:55.360
chart.

60
00:03:56.740 --> 00:04:02.380
I also need to remember to color the bars appropriately and update the classes for all countries.

61
00:04:02.380 --> 00:04:07.060
First our move active from all of the countries since I don't want two countries to be active at once

62
00:04:07.720 --> 00:04:10.990
and then I'll toggle the active class on the country I clicked on.

63
00:04:10.990 --> 00:04:18.600
This way an active country will become inactive in an inactive country will become active saving refresh

64
00:04:20.520 --> 00:04:26.290
great it seems like this is working to Lastly we come to the tool tip.

65
00:04:26.300 --> 00:04:28.470
I'll handle all of this logic inside of the app.

66
00:04:28.520 --> 00:04:33.150
Yes I could add different event handlers for each of the three SVGA.

67
00:04:33.400 --> 00:04:39.600
But to minimize the number of event handlers I need I'll just add one let's tackle this update tool

68
00:04:39.600 --> 00:04:41.520
tip function.

69
00:04:41.750 --> 00:04:46.520
When one of these events fires first grab the tooltip as well as the then target and turn them into

70
00:04:46.520 --> 00:04:48.290
D-3 selections.

71
00:04:48.320 --> 00:04:52.890
Next I need to know whether the event came from a country a bar or an ark.

72
00:04:53.120 --> 00:04:55.930
If any of these are true I should make the tooltip well.

73
00:04:56.300 --> 00:04:59.950
I also need to know whether to show up missions or missions per capita data.

74
00:05:00.140 --> 00:05:06.560
So I'll grab the data type and set the correct unit how I access the data to show in the tooltip.

75
00:05:06.590 --> 00:05:09.260
Also depends on which graph triggered the event.

76
00:05:09.380 --> 00:05:12.850
If I hovered over a country the data lives inside of the properties.

77
00:05:13.370 --> 00:05:19.100
If I hovered over an arc it lives inside of the data key and if I hovered over a bar I can access the

78
00:05:19.100 --> 00:05:22.200
join data more directly next.

79
00:05:22.240 --> 00:05:27.190
I'll set the opacity of the tooltip based on whether I have had over an appropriate element and move

80
00:05:27.190 --> 00:05:28.520
it closer to the mouse.

81
00:05:28.960 --> 00:05:31.860
If data is truthy format the appropriate data value

82
00:05:35.540 --> 00:05:41.480
then I'll update my HDMI on the tooltip I'll show the country the data type and value being visualized

83
00:05:41.810 --> 00:05:43.370
and the current year.

84
00:05:44.010 --> 00:05:47.310
Let's save and refresh.

85
00:05:47.330 --> 00:05:50.710
This looks pretty good but the data type doesn't display nicely.

86
00:05:50.750 --> 00:05:53.320
And we're still missing a feature for the pie chart.

87
00:05:53.330 --> 00:05:57.600
I want to show percentages to for the formatting of the data type.

88
00:05:57.610 --> 00:06:02.380
I'll write a quick helper function that capitalizes the first letter of the data type and puts the space

89
00:06:02.380 --> 00:06:04.290
before any other capital letters.

90
00:06:05.470 --> 00:06:09.900
This should look similar to the helper function we wrote in the map Jasc file for the Grath title.

91
00:06:11.260 --> 00:06:12.490
Next for pie charts.

92
00:06:12.490 --> 00:06:18.440
Let me create a variable called percentage and said that equal to an empty string is Arcas true.

93
00:06:18.700 --> 00:06:23.860
Then I'll reassign this value to be a p tag that shows a percentage of the total and I'll add this as

94
00:06:23.860 --> 00:06:27.080
the last line in my l assignment.

95
00:06:27.260 --> 00:06:29.690
But how can I calculate the percentage.

96
00:06:29.690 --> 00:06:32.420
One way is to use the start angle and end angle values.

97
00:06:32.420 --> 00:06:36.030
The D-3 PI gives us at the bottom of this file.

98
00:06:36.080 --> 00:06:41.680
Right a small helper function called Get percentage this function will calculate the difference between

99
00:06:41.680 --> 00:06:42.770
those two angles.

100
00:06:42.850 --> 00:06:48.250
Then divide by two times pi and multiply by 100 to get a number between 0 and 100.

101
00:06:49.200 --> 00:06:53.490
This works because an arc takes up the whole circle when the difference between that start and its end

102
00:06:53.490 --> 00:06:55.880
angle is to pi radians.

103
00:06:55.950 --> 00:07:00.060
Once I have this difference around it to two decimal places and add a percent sign

104
00:07:03.720 --> 00:07:04.290
awesome.

105
00:07:04.380 --> 00:07:06.560
Now everything seems to be working.

106
00:07:06.570 --> 00:07:09.650
That was a lot of code but I helped going through it was helpful.

107
00:07:10.930 --> 00:07:13.970
Congratulations on completing these three sections.

108
00:07:14.200 --> 00:07:19.070
I hope you've learnt a lot and will continue to try building interesting data visualizations.

109
00:07:19.450 --> 00:07:23.070
If you build something you're particularly proud of please send it our way.

110
00:07:23.410 --> 00:07:26.750
I'd love to see what kinds of things you've built with what you've learned so far.
