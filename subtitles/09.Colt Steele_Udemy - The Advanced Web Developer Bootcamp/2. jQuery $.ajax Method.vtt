WEBVTT
1
00:00:00.300 --> 00:00:02.200
All right let's get writing some code.

2
00:00:02.370 --> 00:00:08.370
So as I mentioned earlier these bottom three methods get post and get Jason are just shortcut methods

3
00:00:08.460 --> 00:00:14.580
or shorthand methods that call upon dollar sign Ajax in their source code so we can do everything we

4
00:00:14.580 --> 00:00:21.090
need to as far as making requests go using only AJAX but these are convenient shortcuts.

5
00:00:21.090 --> 00:00:25.070
So we'll take a look at those after we learn the basics of Ajax.

6
00:00:25.140 --> 00:00:26.870
So let's take a look at the syntax.

7
00:00:27.420 --> 00:00:32.340
Here is how you could make a simple GET request using dollar sign Ajax.

8
00:00:32.370 --> 00:00:38.300
So we have to sign that age act and then we pass in an object containing information about the request

9
00:00:38.310 --> 00:00:40.010
we want to be made.

10
00:00:40.140 --> 00:00:48.420
So method get you Arrau some API dot com in this case and that's all we need to actually create the

11
00:00:48.420 --> 00:00:48.990
request.

12
00:00:49.020 --> 00:00:57.000
The H.R. that's underlying it and send it then are done code will run when this request comes back and

13
00:00:57.000 --> 00:00:58.160
it's successful.

14
00:00:58.290 --> 00:01:01.270
And any code and fail will run when there's a problem.

15
00:01:01.380 --> 00:01:06.330
So we'll talk about that and how it differs from fetch and how we don't have to check for status code

16
00:01:06.330 --> 00:01:06.930
anymore.

17
00:01:07.050 --> 00:01:10.720
But before we go any further I just want to show you the docs.

18
00:01:10.770 --> 00:01:13.020
So Jay queery has very good documentation.

19
00:01:13.320 --> 00:01:18.450
If you just go to J-curve home page and then you make sure you click on API documentation.

20
00:01:18.450 --> 00:01:20.320
Ajax is actually the top left.

21
00:01:20.480 --> 00:01:24.680
So very easy to find and then all we want is the Ajax method right here.

22
00:01:26.350 --> 00:01:30.510
So it's kind of overwhelming at first when you look at this page for two reasons.

23
00:01:30.520 --> 00:01:37.900
One there are a lot of options and a lot of ways you can use this Ajax function Ajax method and to it's

24
00:01:37.900 --> 00:01:39.010
changed over time.

25
00:01:39.040 --> 00:01:42.120
So as you go further down you'll see as of J.

26
00:01:42.160 --> 00:01:45.000
One point five something happened as of 1.5 1.

27
00:01:45.010 --> 00:01:48.040
Something else happened and I think there's a couple more yeah.

28
00:01:48.040 --> 00:01:50.060
Here we go one point five.

29
00:01:50.080 --> 00:01:54.250
So essentially you know the docs are a little bit cluttered but they're really helpful.

30
00:01:54.250 --> 00:01:56.490
What I like to do is go to the bottom.

31
00:01:56.560 --> 00:01:59.310
They always have good examples of usage.

32
00:01:59.320 --> 00:02:03.100
So at the very bottom here's an example of making a post request.

33
00:02:03.580 --> 00:02:08.960
So as you can see it's the same syntax dollar and at Ajax may make this a bit bigger.

34
00:02:09.820 --> 00:02:15.910
But we also instead of just specifying methodis get we can specify method is post give it a role and

35
00:02:15.910 --> 00:02:20.550
also provide data that we want to be sent the same done.

36
00:02:20.590 --> 00:02:24.490
We're doing some code in this case just alerting the data that comes back.

37
00:02:24.490 --> 00:02:29.950
So next let's try writing some of these and then I'm going to wrap this up by actually proving to you

38
00:02:29.950 --> 00:02:34.380
in the source code where you can find the base exit chars that are being generated.

39
00:02:34.510 --> 00:02:37.220
But let's start off by copying over to Code Pink.

40
00:02:37.690 --> 00:02:43.340
And the first thing I'm going to do aside from already requiring J query is I'm going to now select

41
00:02:43.340 --> 00:02:49.140
the button very simply using j query and then just add it quick.

42
00:02:49.360 --> 00:02:54.400
So when I click on the code something happens and what we want to happen is we're going to send a request

43
00:02:54.640 --> 00:02:59.100
to a new API we haven't seen called Bacon ipsum dot com.

44
00:02:59.130 --> 00:03:05.140
Basically if you're familiar with Lorem Ipsum just placeholder text but this has all to do with meat

45
00:03:05.320 --> 00:03:05.950
and bacon.

46
00:03:05.950 --> 00:03:10.380
I apologize if you're vegetarian but it's just a simple API we can use.

47
00:03:10.420 --> 00:03:17.320
So I'm going to copy the euro as you can see we get an array of one to believe five items by default

48
00:03:17.350 --> 00:03:19.360
five different paragraphs.

49
00:03:19.360 --> 00:03:22.310
So we're going to take this and send a request to it.

50
00:03:22.330 --> 00:03:31.030
So the first thing to do is dollar sign dot Ajax and then we pass an object and that object we specify

51
00:03:31.060 --> 00:03:34.440
a method which by default is get.

52
00:03:34.450 --> 00:03:40.390
But I'd like to be explicit and then you are well and this is are you are all right there and that's

53
00:03:40.390 --> 00:03:41.380
it.

54
00:03:41.380 --> 00:03:44.890
So right now you know nothing is going to happen visibly at least.

55
00:03:44.950 --> 00:03:51.390
But a request should be sent if I clear this so we're not getting any issues.

56
00:03:51.450 --> 00:03:52.480
No for a fourth.

57
00:03:52.600 --> 00:03:54.040
So we have to assume it's working.

58
00:03:54.120 --> 00:04:02.570
But if we wanted to run some code after the fact when the request is done we add in are done.

59
00:04:02.610 --> 00:04:04.480
So let's just cancel that log.

60
00:04:05.070 --> 00:04:09.290
Our data so let's see what happens.

61
00:04:10.750 --> 00:04:14.520
Click the button and would you like that we get our data back.

62
00:04:14.530 --> 00:04:18.320
So if you looked closely you might notice that our data was already parsed.

63
00:04:18.340 --> 00:04:23.530
It's not a string like it was with ex-aide char and with fetch We don't actually have to parse it.

64
00:04:23.530 --> 00:04:29.570
In this case as you can see it's already an array and our consul treats it that way.

65
00:04:29.800 --> 00:04:30.820
So why is that happening.

66
00:04:30.940 --> 00:04:34.660
Well if we look in their docs to go find it.

67
00:04:34.990 --> 00:04:36.660
Probably fast forward through this.

68
00:04:36.670 --> 00:04:37.240
Here we go.

69
00:04:37.240 --> 00:04:42.490
So one of the things we can pass in along with method and you well is called data type so we can set

70
00:04:42.490 --> 00:04:49.480
it to be Jasen correct XML or HDMI or whatever we want but if we leave it blank it actually says that

71
00:04:49.480 --> 00:04:50.630
if none is specified.

72
00:04:50.650 --> 00:04:54.220
Jay queery we'll try to infer it based on the type of the response.

73
00:04:54.220 --> 00:04:56.760
Basically what it calls an intelligent guess.

74
00:04:56.770 --> 00:05:02.980
So in our case it intelligently guessed that we were working with Jaison they figured out that this

75
00:05:03.060 --> 00:05:04.490
response with Jaison.

76
00:05:04.870 --> 00:05:07.180
And so then it automatically parsed it for us.

77
00:05:07.180 --> 00:05:09.030
So we don't have to parse it.

78
00:05:09.070 --> 00:05:15.850
So remember again what we used to have to do with the next H.R. which you adjacent up parse or with

79
00:05:15.850 --> 00:05:20.400
fetch We had to do our data Jaison then.

80
00:05:20.500 --> 00:05:25.600
So there's other code that we would have to write but in our case it intelligently guesses but it's

81
00:05:25.600 --> 00:05:30.260
better to be explicit so we can add in data type Jaison.

82
00:05:30.340 --> 00:05:31.680
Nothing should change.

83
00:05:31.690 --> 00:05:33.740
But now it's not intelligently guessing.

84
00:05:33.790 --> 00:05:39.910
Now it knows how to parse it here we go.

85
00:05:39.910 --> 00:05:41.230
Same exact outcome.

86
00:05:41.470 --> 00:05:43.100
So now let's talk about fail.

87
00:05:43.420 --> 00:05:50.010
If the request doesn't work so let's add art fail here and we'll just start with an alert.

88
00:05:50.350 --> 00:05:51.610
Oh no.

89
00:05:51.880 --> 00:05:52.890
Failed.

90
00:05:53.370 --> 00:05:55.780
And let's see what triggered this.

91
00:05:55.780 --> 00:05:57.040
So I'll turn my internet off.

92
00:05:57.040 --> 00:05:57.390
All right.

93
00:05:57.430 --> 00:05:59.710
Turn it off now Fred try and send that.

94
00:05:59.920 --> 00:06:00.310
OK.

95
00:06:00.400 --> 00:06:00.910
We get.

96
00:06:00.970 --> 00:06:01.350
Oh no.

97
00:06:01.360 --> 00:06:01.970
Failed.

98
00:06:02.110 --> 00:06:04.460
Which is exactly what happens with fecche.

99
00:06:04.600 --> 00:06:10.810
But remember fetch also had a problem where if we sent a request that came back with a bad status code

100
00:06:10.840 --> 00:06:14.300
let's say for a four that didn't trigger that catch.

101
00:06:14.530 --> 00:06:18.900
And we had to manually check if the status was OK or if the response was OK.

102
00:06:19.090 --> 00:06:21.310
Well with Jay query that's not the case.

103
00:06:21.310 --> 00:06:21.840
All right.

104
00:06:21.940 --> 00:06:22.960
So that's the basics.

105
00:06:23.050 --> 00:06:24.990
We have done we have dot fail.

106
00:06:25.090 --> 00:06:30.490
The last thing I should mention is how when you use Jay queery and you're making these AJAX calls with

107
00:06:30.580 --> 00:06:32.880
these nice little shortcuts.

108
00:06:32.890 --> 00:06:39.140
The second part of the process of appending the data to the page manipulating the DOM is also much easier.

109
00:06:39.190 --> 00:06:44.300
So I could do something really simple let me add a paragraph to our page just leave it empty for now.

110
00:06:44.530 --> 00:06:47.940
And if I want to target that paragraph this is kind of bad.

111
00:06:47.940 --> 00:06:52.630
Jay query because this would target all paragraphs but you only have one for now.

112
00:06:52.630 --> 00:06:55.750
I can do dot text and just set it to be data.

113
00:06:55.750 --> 00:07:01.630
Let's just do the first paragraph because remember we get an array back so you can do that.

114
00:07:01.660 --> 00:07:02.580
Click the button.

115
00:07:02.620 --> 00:07:05.590
Now we get a random baken ipsum paragraph.

116
00:07:05.590 --> 00:07:07.120
Every time we click the button.

117
00:07:07.680 --> 00:07:12.050
And just like before you know we can also extract this to a named function if you want wanted to

118
00:07:14.950 --> 00:07:21.860
let's call it pad P..

119
00:07:21.930 --> 00:07:25.960
And then here I can just call add P.

120
00:07:26.230 --> 00:07:28.680
Same thing still works OK.

121
00:07:28.690 --> 00:07:29.900
So that's the basics.

122
00:07:29.900 --> 00:07:34.090
You know you can change methods you can make it a post request you can change the data type you are

123
00:07:34.130 --> 00:07:38.230
well obviously and there's a bunch of other things we can alter if you're going to take a look at the

124
00:07:38.260 --> 00:07:39.370
documentation.

125
00:07:39.370 --> 00:07:44.830
And next if you're curious we did take a dive into the source code and prove to you that this just results

126
00:07:44.860 --> 00:07:47.650
in an underlying SH request and where we can see that.
