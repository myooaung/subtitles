1
00:00:01,120 --> 00:00:06,430
Welcome back in the section we're going to talk about the filter function filter is a function that

2
00:00:06,430 --> 00:00:07,710
is invoked on a race.

3
00:00:07,750 --> 00:00:11,470
And just like mapping for each It accepts a callback function.

4
00:00:11,500 --> 00:00:16,720
However this callback function is a little different than the one we used in for each map because the

5
00:00:16,720 --> 00:00:21,160
result of the callback function will always be evaluated into a Bulliet.

6
00:00:21,520 --> 00:00:27,100
Let's see how filter works just like Map filter first creates a new array and iterates through that

7
00:00:27,100 --> 00:00:31,400
array and runs a callback function on each value in the array.

8
00:00:31,440 --> 00:00:32,940
Here's where things get different.

9
00:00:33,160 --> 00:00:39,130
If the result of the callback function with the value passed to it returns true that value will be placed

10
00:00:39,160 --> 00:00:40,510
in the new array.

11
00:00:40,660 --> 00:00:46,120
If the result of the callback function returns false that value will be ignored and filter will iterate

12
00:00:46,120 --> 00:00:47,690
to the next value.

13
00:00:48,040 --> 00:00:50,200
Always remember the result of the callback.

14
00:00:50,200 --> 00:00:55,730
The filter will always be a boolean no matter what value you return to the callback filter.

15
00:00:55,810 --> 00:00:58,680
It will always be converted into either true or false.

16
00:00:58,810 --> 00:01:03,820
Since filter needs to know if that value should be added to the new array it creates.

17
00:01:03,820 --> 00:01:04,980
That might seem a bit tricky.

18
00:01:05,050 --> 00:01:07,140
So let's look at an example.

19
00:01:07,240 --> 00:01:11,880
I'm going to create an array with the values 1 2 and 3 and invoke filter on it.

20
00:01:11,920 --> 00:01:16,660
Remember the filter accepts a callback function as its first parameter just like for each end map.

21
00:01:16,900 --> 00:01:22,080
But when using filter we have to make sure that our callback function returns true or false.

22
00:01:22,270 --> 00:01:28,090
If we want to filter out all of the values that are greater than 2 we would return an expression value

23
00:01:28,090 --> 00:01:29,180
greater than 2.

24
00:01:29,530 --> 00:01:34,180
If you find yourself writing IF statements inside of the callback the filter go back and see if you

25
00:01:34,180 --> 00:01:38,950
can refactor it to just return an expression that evaluates to TRUE or FALSE.

26
00:01:39,040 --> 00:01:42,560
When I run this code I'll see an array with just the number three in it.

27
00:01:42,760 --> 00:01:43,710
Great.

28
00:01:43,960 --> 00:01:47,010
Notice here that I've passed three parameters to the callback.

29
00:01:47,020 --> 00:01:52,240
This is just to show you that I have access to each value index and the array just like what we saw

30
00:01:52,300 --> 00:01:53,590
with mapping for each.

31
00:01:53,800 --> 00:01:56,610
You do not need to pass these three parameters every time.

32
00:01:56,650 --> 00:01:58,210
Only the ones that you need.

33
00:01:58,210 --> 00:02:01,480
Just remember the order of the parameters is important.

34
00:02:01,480 --> 00:02:04,490
The first parameter to the callback function is always the value.

35
00:02:04,570 --> 00:02:06,370
The second is whatever index you're at.

36
00:02:06,580 --> 00:02:09,540
And the third parameter is the entire array.

37
00:02:09,540 --> 00:02:11,150
Now let's look at another example.

38
00:02:11,430 --> 00:02:15,030
Here we have an array called instructors and it contains four objects.

39
00:02:15,030 --> 00:02:18,730
Each object has a name property and a value which will be early.

40
00:02:18,780 --> 00:02:20,820
Tim mad and cold.

41
00:02:20,940 --> 00:02:26,190
What I'd like to do is return a new array of objects whose value for the name property is more than

42
00:02:26,190 --> 00:02:27,460
three characters long.

43
00:02:27,690 --> 00:02:32,280
So I'm going to invoke the filter function on this array and pass a callback.

44
00:02:32,370 --> 00:02:37,530
Remember the callback function has to return true or false so we can use an expression that evaluates

45
00:02:37,530 --> 00:02:40,280
to a boolean will return value.

46
00:02:40,380 --> 00:02:43,590
Namedrop length greater than 3.

47
00:02:43,590 --> 00:02:45,680
Notice here we're not using an if statement.

48
00:02:45,690 --> 00:02:50,670
Try not to write IF statements inside of the callback to filter which we don't need to do since we just

49
00:02:50,670 --> 00:02:53,200
have to return true or false.

50
00:02:53,280 --> 00:02:58,470
What we're doing here is checking to see if the name property on each object which we call value has

51
00:02:58,470 --> 00:03:00,410
a length that is greater than 3.

52
00:03:00,540 --> 00:03:03,510
When we run this code we get back an array of three objects.

53
00:03:03,510 --> 00:03:06,800
We filtered out Tim and just like we did with for each n map.

54
00:03:06,970 --> 00:03:09,400
Let's try to implement our own filter function.

55
00:03:09,630 --> 00:03:11,140
Let's remember how it works.

56
00:03:11,220 --> 00:03:16,530
Filter creates a new array it iterates through the array and runs a callback function on each value

57
00:03:16,530 --> 00:03:17,710
in the array.

58
00:03:17,790 --> 00:03:21,990
If the callback function returns true that value will be added to the new array.

59
00:03:22,140 --> 00:03:26,820
If the callback function returns false that value will be ignored from the new order.

60
00:03:27,030 --> 00:03:30,200
If you'd like pause the video now and try this on your own.

61
00:03:30,200 --> 00:03:30,800
All right.

62
00:03:30,870 --> 00:03:35,790
Let's create a function called Filter that accepts an array and a callback function will first create

63
00:03:35,790 --> 00:03:41,250
a variable called New R which is an empty array will then create a for loop and initialize a variable.

64
00:03:41,280 --> 00:03:46,800
A zero will loop as long as it is less than the length of the array and increment by one after each

65
00:03:46,800 --> 00:03:48,970
iteration inside of the loop.

66
00:03:48,990 --> 00:03:54,570
We'll check to see if the result of the callback function with a value index an array passed to it returns

67
00:03:54,570 --> 00:03:58,630
true if it does we'll push into the new R variable.

68
00:03:58,630 --> 00:04:03,700
The value we're iterating at once we're done iterating through the array we need to make sure to return

69
00:04:03,760 --> 00:04:06,730
our new array variable and that's it.

70
00:04:06,730 --> 00:04:09,580
Now let's see how we can use filter in our own functions.

71
00:04:09,610 --> 00:04:14,980
Here I have a function called only four letters which accepts an array and returns the result of filtering

72
00:04:14,980 --> 00:04:18,290
the array passed to it inside of the callback filter.

73
00:04:18,430 --> 00:04:24,630
I'm returning an expression which will evaluate to true if each value in the array has a length of 4.

74
00:04:24,640 --> 00:04:29,680
You can see that when I run this on an array of strings I only get back an array of values with 4 characters

75
00:04:30,160 --> 00:04:35,830
just like map I need to return statements 1 for my function and the other inside the callback to the

76
00:04:35,830 --> 00:04:36,690
filter function.

77
00:04:37,620 --> 00:04:42,330
The second function I have here is divisible by three which accepts an array of numbers and returns

78
00:04:42,360 --> 00:04:45,740
a new filtered array of all the numbers divisible by three.

79
00:04:45,840 --> 00:04:50,150
Oh once again I have to return keywords just like above and in my callback.

80
00:04:50,160 --> 00:04:51,550
I do not have an if statement.

81
00:04:51,780 --> 00:04:55,290
I just have an expression which returns true or false.

82
00:04:55,350 --> 00:05:00,480
So when my filter be useful let's imagine that we get an array of 50 of our most recent tweets from

83
00:05:00,480 --> 00:05:05,380
the Twitter API and we want to see which ones have been favored by more than 10 people.

84
00:05:05,460 --> 00:05:10,290
We would iterate through the Saray tweets and filter out all the ones that have been favored by less

85
00:05:10,290 --> 00:05:11,450
than 10.

86
00:05:11,460 --> 00:05:15,960
This would return to us an array of tweets that have more than 10 favorites.

87
00:05:15,960 --> 00:05:21,060
Any time you need to take an array and remove some values based on a condition filter is an excellent

88
00:05:21,060 --> 00:05:21,800
option.

89
00:05:21,960 --> 00:05:25,690
Remember with map we always get an array returned to us of the same length.

90
00:05:25,920 --> 00:05:30,470
So if you're trying to remove certain values in an array filter is a better option.

91
00:05:30,900 --> 00:05:34,360
Before we move on to the next couple of Array methods let's practice a bit with filter.

92
00:05:34,560 --> 00:05:36,040
Good luck and I'll see you in the next video.
