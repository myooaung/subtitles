WEBVTT
1
00:00:00.540 --> 00:00:06.760
Welcome back this video we'll learn how to draw some simple shapes with SVGA using built in elements.

2
00:00:07.140 --> 00:00:11.980
In the last video we learned about the line element by joining many line segments together.

3
00:00:12.090 --> 00:00:17.370
You can already start drawing some interesting things but there are many other elements worth worrying

4
00:00:17.370 --> 00:00:17.850
about.

5
00:00:18.750 --> 00:00:24.510
For example rather than drawing four lines to create a rectangle we can also just draw a rectangle using

6
00:00:24.510 --> 00:00:32.250
the recked element the location and size of a rectangle is determined by four attributes x y width and

7
00:00:32.250 --> 00:00:37.370
height x and y refer to the coordinates of the upper left corner of the rectangle.

8
00:00:37.380 --> 00:00:41.810
You can probably guess what the width and height determine like lines.

9
00:00:41.830 --> 00:00:47.410
You can get stroke and stroke with attributes to style the border of a rectangle but you can also set

10
00:00:47.410 --> 00:00:51.240
the fill attribute which sets the color inside of the rectangle.

11
00:00:51.460 --> 00:00:54.740
Here's a link to the same code pin from the previous video.

12
00:00:55.000 --> 00:01:02.850
Let's draw a rectangle on her SVGA.

13
00:01:02.900 --> 00:01:07.970
Notice that if I adjust the values for any of these attributes the position and shape of the rectangle

14
00:01:07.970 --> 00:01:09.190
will change accordingly.

15
00:01:10.860 --> 00:01:15.650
Cool let's make another rectangle.

16
00:01:16.080 --> 00:01:18.180
A couple of things to notice here.

17
00:01:18.210 --> 00:01:24.270
First if your shape exceeds the bounds of the SPG it will get cropped elements and SPG don't extend

18
00:01:24.270 --> 00:01:26.350
past the bounds of the SVGA.

19
00:01:26.580 --> 00:01:30.930
Second notice that there is some overlap between our rectangles in this case.

20
00:01:30.990 --> 00:01:34.040
The second rectangle is set and on top of the first rectangle.

21
00:01:34.840 --> 00:01:36.550
But what if that's not what we want.

22
00:01:36.710 --> 00:01:40.430
But if we want the second rectangle to sit behind the first.

23
00:01:40.580 --> 00:01:45.530
You might think we need to adjust the z index or some other property on the element but there's no z

24
00:01:45.530 --> 00:01:47.800
index property on SPG elements.

25
00:01:48.000 --> 00:01:52.280
Instead shape's on SPG are drawn in the order they appear in the document.

26
00:01:52.460 --> 00:01:57.670
If we want the magenta rectangle to be behind the Orange rectangle we have to draw the orange rectangle.

27
00:01:57.670 --> 00:01:58.050
Second

28
00:02:01.530 --> 00:02:05.010
call Lets move the rectangles back to their original position.

29
00:02:07.400 --> 00:02:13.300
One last thing we can also round the corners of a rectangle using the R X and r y attributes the bigger

30
00:02:13.430 --> 00:02:18.680
their values the more rounded the corners when the values are the same.

31
00:02:18.710 --> 00:02:24.110
You get circular corners when the values are different the corners are rounded and an oval or elliptical

32
00:02:24.110 --> 00:02:24.680
shape.

33
00:02:27.320 --> 00:02:28.610
OK let's move on.

34
00:02:28.970 --> 00:02:35.180
Every rectangle with sharp corners is an example of a polygon and SVGA polygon is any shape bounded

35
00:02:35.180 --> 00:02:36.850
by straight line edges.

36
00:02:37.310 --> 00:02:42.050
You can draw an arbitrary polygon using the polygon elements to define the polygon.

37
00:02:42.050 --> 00:02:47.750
We need to specify the set of points representing the vertices of the polygon as a space separated list.

38
00:02:48.500 --> 00:02:53.830
Here's how we can rewrite our existing code to use polygon elements instead of recked elements.

39
00:02:55.500 --> 00:03:00.300
We've only got one attribute in this case instead of four but we have to do some arithmetic to compute

40
00:03:00.300 --> 00:03:07.040
the coordinates of the four corners of the rectangle while all rectangles are polygons not all polygons

41
00:03:07.070 --> 00:03:07.970
are rectangles.

42
00:03:08.150 --> 00:03:10.970
Here's an example of a polygon that isn't a rectangle.

43
00:03:10.970 --> 00:03:13.460
It's hard to know what the shape will look like just from the code.

44
00:03:13.550 --> 00:03:16.440
But if we type out this code we'll see a recognizable shape.

45
00:03:21.600 --> 00:03:24.210
Finally let's examine one more common element.

46
00:03:24.300 --> 00:03:30.660
The circle the circle is determined by three attributes the x coordinate of its center the y coordinate

47
00:03:30.660 --> 00:03:34.310
of its center and how large it is is determined by the radius.

48
00:03:34.680 --> 00:03:37.220
Let's draw a few circles on our SVGA.

49
00:03:43.320 --> 00:03:45.140
That's one friendly star.

50
00:03:45.210 --> 00:03:50.040
Notice that we were able to effectively draw an arc of a circle by placing two circles on top of one

51
00:03:50.040 --> 00:03:55.230
another by making the bottom circle black in the top circle the same color as the star.

52
00:03:55.230 --> 00:03:59.550
It looks like we have one crescent shape rather than two circles stacked together.

53
00:03:59.550 --> 00:04:03.750
You can make that top circle visible by changing its color.

54
00:04:03.890 --> 00:04:06.110
That's enough about shapes in the next video.

55
00:04:06.110 --> 00:04:09.160
We'll take a look at the text element in SVGA.

56
00:04:09.200 --> 00:04:09.870
I'll see you there.
