1
00:00:00,390 --> 00:00:01,040
All right.

2
00:00:01,080 --> 00:00:05,280
So this is the solution video to the Random User Profile generator.

3
00:00:05,670 --> 00:00:10,890
So I go into the code pen starter code and the first thing we'll do like I always like to do is just

4
00:00:10,890 --> 00:00:19,740
get the button click event setup so I select it using query selector and the id be T.N. and then I save

5
00:00:19,740 --> 00:00:21,800
it to a variable add event listener.

6
00:00:21,810 --> 00:00:26,420
And I'd like to just check that it works with an alert and it looks good.

7
00:00:26,940 --> 00:00:29,810
So next we can move on to making the fetch.

8
00:00:29,880 --> 00:00:36,660
So I'm going to make a variable just call it you know and just set it equal to the API you are all that

9
00:00:36,660 --> 00:00:38,060
we've been working with.

10
00:00:38,100 --> 00:00:41,770
Just make sure it's valid perfect.

11
00:00:41,990 --> 00:00:50,270
So we're going to do a fetch you RL And we'll add then and catch in there and we'll just do some really

12
00:00:50,270 --> 00:00:51,000
basic.

13
00:00:51,320 --> 00:01:00,000
Let's do a function rez and we'll just print out rez and we'll do the same thing except we'll call it

14
00:01:00,590 --> 00:01:05,280
error rate there just like that.

15
00:01:06,130 --> 00:01:07,060
Cool.

16
00:01:07,190 --> 00:01:12,850
So let's make sure that works click our button to open the cancel clear some of this out.

17
00:01:13,360 --> 00:01:13,910
OK.

18
00:01:16,370 --> 00:01:17,000
Looking good.

19
00:01:17,030 --> 00:01:18,870
We're getting our response object.

20
00:01:19,040 --> 00:01:22,660
So the next thing to do is to parse our data on.

21
00:01:23,060 --> 00:01:32,390
So we'll just add in a dot then before that that also has a response and we're just going to return

22
00:01:33,080 --> 00:01:44,480
Raz dot Jaison pass it into here and let's rename this from res to data doesn't actually matter but

23
00:01:44,600 --> 00:01:49,400
this makes more sense because by the time we hit this this will be the face on data coming back from

24
00:01:49,400 --> 00:01:57,720
here appear it's a response object we can print both if we want it to cost a lot like Grez first then

25
00:01:57,760 --> 00:01:59,000
parse it.

26
00:01:59,000 --> 00:02:00,530
So it costs about log

27
00:02:03,140 --> 00:02:04,190
parsing.

28
00:02:04,790 --> 00:02:08,360
And then when it finishes down here we'll print the data.

29
00:02:08,500 --> 00:02:11,910
Okay let's try that out.

30
00:02:12,320 --> 00:02:13,990
Click the button.

31
00:02:14,480 --> 00:02:15,150
Looks good.

32
00:02:15,260 --> 00:02:21,950
So it prints out the response object then we get parsing and then we get our data down here.

33
00:02:21,950 --> 00:02:24,730
So we have a couple of directions we can go with this.

34
00:02:24,740 --> 00:02:30,590
The first thing that I would do is identify what pieces of data we want out and let's start with the

35
00:02:30,680 --> 00:02:32,340
most obvious thing on the page.

36
00:02:32,390 --> 00:02:38,510
This full name right here Dave Id equals full name John Snow.

37
00:02:38,510 --> 00:02:40,890
How do we get the full name out of this.

38
00:02:41,180 --> 00:02:45,520
If we look okay results is the key we need to work with.

39
00:02:45,530 --> 00:02:47,260
So that's the first thing we care about.

40
00:02:47,330 --> 00:02:54,140
And I like to just whittle it down so we have our data daat results that gives us an array you can see

41
00:02:54,140 --> 00:02:54,470
here.

42
00:02:54,500 --> 00:02:55,640
It only has one item.

43
00:02:55,700 --> 00:03:03,880
So we need to do data results bracket zero and then to get into name it's under name here but there

44
00:03:03,880 --> 00:03:08,120
is no fullname So it's first and last we need to combine together.

45
00:03:08,120 --> 00:03:09,930
So let's try that.

46
00:03:10,070 --> 00:03:13,400
We'll just do this mka variable here.

47
00:03:13,410 --> 00:03:21,570
Just call it full name equals and we want data dot response or excuse me results.

48
00:03:22,760 --> 00:03:26,920
Bracket zero because this is an array it only has one thing in here.

49
00:03:26,960 --> 00:03:33,510
I believe this API allows you to specify that you want ten or five or however many random users.

50
00:03:33,530 --> 00:03:38,750
So it returns an array but by default it's just one item which is what we want.

51
00:03:38,930 --> 00:03:40,840
So data results is zero.

52
00:03:41,000 --> 00:03:47,370
And let's just start there and print out full name even though it's not actually full name.

53
00:03:47,680 --> 00:03:49,000
We do that.

54
00:03:49,000 --> 00:03:52,300
There you are getting a single user.

55
00:03:52,300 --> 00:04:00,510
So then we want dot name as we saw here and let's do dot first and know this is like going on the screen

56
00:04:00,700 --> 00:04:03,050
we minimize some of this here.

57
00:04:03,870 --> 00:04:05,150
OK.

58
00:04:05,640 --> 00:04:06,120
There we go.

59
00:04:06,120 --> 00:04:10,310
We get Nathan or storm like that name and Byron.

60
00:04:10,740 --> 00:04:11,950
So that's looking good.

61
00:04:12,240 --> 00:04:13,370
So we'll start with that.

62
00:04:13,470 --> 00:04:18,690
And now let's focus on updating the dom because the process for the rest of the other properties is

63
00:04:18,690 --> 00:04:20,260
pretty much the same.

64
00:04:20,360 --> 00:04:22,920
And what we're going to do is select the div right here.

65
00:04:24,070 --> 00:04:29,680
With ID full name and replace this in our text so let's select that and we can do it.

66
00:04:29,680 --> 00:04:30,640
Uptalk for now.

67
00:04:30,670 --> 00:04:35,950
So var and the hardest part for me here is coming up with good names for this.

68
00:04:36,040 --> 00:04:45,210
Let's just call it full name display equals document that queery selector.

69
00:04:45,940 --> 00:04:51,240
We have an ID for name and save.

70
00:04:51,310 --> 00:04:55,850
Then we'll come down here and set for name.

71
00:04:56,200 --> 00:05:01,510
Does the ISP dot in inner text equals.

72
00:05:02,140 --> 00:05:08,240
And let's just do the first name to start well I'll just use a variable created to have it.

73
00:05:08,580 --> 00:05:11,330
So even though it's only the first name for now.

74
00:05:11,850 --> 00:05:14,130
So let's see what happens.

75
00:05:14,130 --> 00:05:22,430
Clears some of this out next user and scroll up here and we get Nicholas or Niccol or however you say

76
00:05:22,430 --> 00:05:22,740
it.

77
00:05:22,760 --> 00:05:26,390
So to get the full name there we want to do plus.

78
00:05:26,690 --> 00:05:29,850
Well we want a space plus data.

79
00:05:29,930 --> 00:05:37,660
Results zero dot name dot last.

80
00:05:38,010 --> 00:05:44,630
And now if we try it you know we're getting that form name updating there so we can refactor this.

81
00:05:44,640 --> 00:05:49,050
You know there's some repetition here this data results zero results zero.

82
00:05:49,130 --> 00:05:51,270
I'm going to come back to that in just a moment.

83
00:05:51,420 --> 00:06:00,140
But let's now focus on the image so to get this image we are going to need to use inside of here.

84
00:06:00,150 --> 00:06:06,480
If we look at our data if we print our full data again Cazotte log data

85
00:06:10,550 --> 00:06:12,780
inside of the results.

86
00:06:12,800 --> 00:06:13,740
Zero.

87
00:06:14,170 --> 00:06:19,190
What we want to pull out of here is under picture and I used medium.

88
00:06:19,190 --> 00:06:25,880
So let's start off by selecting the actual avatar image which is right here.

89
00:06:25,970 --> 00:06:36,350
So did appear Avatar equals document that queery selector with their ID Avatar.

90
00:06:36,820 --> 00:06:41,500
And that needs to be the ID Octa Thorpey.

91
00:06:41,970 --> 00:06:45,840
And down here makes more space.

92
00:06:45,840 --> 00:06:51,480
This is an obnoxiously long line that we will be refactoring in a bit but down here the next thing we

93
00:06:51,480 --> 00:07:05,460
can do is do Avatar dot SIRC equals data that results zero that picture dot medium and lets see if it

94
00:07:05,460 --> 00:07:06,140
works.

95
00:07:08,080 --> 00:07:08,780
There you go.

96
00:07:08,790 --> 00:07:12,780
So we're updating the name and the picture.

97
00:07:12,780 --> 00:07:13,070
OK.

98
00:07:13,080 --> 00:07:16,960
So let's do a bit of refactoring this is getting kind of annoying right here.

99
00:07:17,070 --> 00:07:23,010
So to refactor this but I'm actually going to do is first pull this parsing we can get rid of the constable

100
00:07:23,030 --> 00:07:30,170
logs but pull the parsing code the rest of Jason into its own function.

101
00:07:30,290 --> 00:07:35,570
So I'll start by doing that and I'll explain why in just a moment so down here I'm going to create a

102
00:07:35,570 --> 00:07:44,700
function and I'll just call it let's do parse J song just like that.

103
00:07:44,870 --> 00:07:46,560
And there's a couple of reasons I want to do this.

104
00:07:46,580 --> 00:07:50,420
One is that I just like having the ability just to say parse.

105
00:07:50,420 --> 00:07:51,440
JS on here.

106
00:07:51,440 --> 00:07:56,010
Clean it up like I showed you here.

107
00:07:56,330 --> 00:07:58,410
It's a potential way of organizing our code.

108
00:07:58,500 --> 00:08:05,420
But more importantly what I'm going to do is do a return restart Jason with the dot then here.

109
00:08:09,310 --> 00:08:16,470
And what I'm going to return out of here is data dot results zero.

110
00:08:16,480 --> 00:08:22,030
So what this will do is rather than just having to reference data results zero everywhere in here.

111
00:08:22,360 --> 00:08:30,070
I can actually just replace it with data because what's happening is I'm returning.

112
00:08:30,090 --> 00:08:35,100
So once the Jason is parsed and we get all of that it's in a variable called data and I'm returning

113
00:08:35,100 --> 00:08:35,670
data.

114
00:08:35,760 --> 00:08:37,540
Results zero.

115
00:08:37,980 --> 00:08:46,980
So here it's passed in and when we refer to data now as you can see I refresh the page open up the Consul

116
00:08:48,530 --> 00:08:53,330
and I click we just have the actual person data.

117
00:08:53,380 --> 00:08:59,170
We no longer have what was it results in an array and accessing the first item.

118
00:08:59,200 --> 00:09:00,350
We don't have to do that.

119
00:09:00,370 --> 00:09:06,250
So we've narrowed it down and basically passed in the data we care about so that we can clean up our

120
00:09:06,250 --> 00:09:07,010
code here.

121
00:09:07,030 --> 00:09:12,550
Now we only have to say data not name and I do think it might be kind of confusing to have this data

122
00:09:12,550 --> 00:09:18,560
here and call this data so I might change that just for clarity sake.

123
00:09:18,730 --> 00:09:20,420
Mainly just for educational purposes.

124
00:09:20,470 --> 00:09:22,510
I'm going to change this instead of data.

125
00:09:22,510 --> 00:09:29,910
I'm going to call this parsed data just to make it clear that they're different but everything should

126
00:09:29,910 --> 00:09:32,240
still work the same as you see here.

127
00:09:33,280 --> 00:09:33,810
OK.

128
00:09:34,000 --> 00:09:40,400
So now we have this parsed Jaison the next thing that we could do is extract this.

129
00:09:40,480 --> 00:09:42,490
All of this to its own function.

130
00:09:42,490 --> 00:09:48,010
So if I could do something like instead of just saying parse Jaison I could do it then and I could call

131
00:09:48,010 --> 00:09:55,270
this you know update profile and that would be the code that actually manipulates the dog.

132
00:09:56,080 --> 00:09:57,220
So I'll do that now.

133
00:09:57,220 --> 00:10:05,080
Function update profile and rather than calling this data I kind of like calling it

134
00:10:08,580 --> 00:10:09,900
and that's all we need to do.

135
00:10:10,000 --> 00:10:11,660
And it should still work just fine.

136
00:10:11,680 --> 00:10:16,350
So we're parsing the Jaison then updating the profile.

137
00:10:16,690 --> 00:10:17,920
Everything still works.

138
00:10:17,970 --> 00:10:20,510
And so now we have our named functions.

139
00:10:20,530 --> 00:10:26,140
It's clear first this happens then that happens and we can come in and do the same thing so that we're

140
00:10:26,140 --> 00:10:31,710
updating not only the full name and the profile picture but also the user name.

141
00:10:31,720 --> 00:10:33,160
So we'll do that next.

142
00:10:33,450 --> 00:10:33,850
OK.

143
00:10:33,880 --> 00:10:39,190
So I started off by selecting the div that has the idea of user name.

144
00:10:39,190 --> 00:10:44,350
Right now it has king of the north in there and I use query selector like you did for everything else

145
00:10:44,950 --> 00:10:52,720
and then down here I'm setting the inner text to be equal to data dot log in Dot username which is inside

146
00:10:52,720 --> 00:10:53,870
the response data.

147
00:10:54,130 --> 00:10:56,280
It's under log in username.

148
00:10:56,830 --> 00:11:00,310
And while we're here let's take a look at where city is inside.

149
00:11:00,380 --> 00:11:02,430
Location dot city.

150
00:11:02,620 --> 00:11:05,590
So before I do city that's just make sure it works.

151
00:11:05,620 --> 00:11:06,200
There we go.

152
00:11:06,250 --> 00:11:10,010
So we're now getting the username to change as well.

153
00:11:10,030 --> 00:11:10,610
Perfect.

154
00:11:10,780 --> 00:11:11,030
OK.

155
00:11:11,050 --> 00:11:12,160
So lastly City

156
00:11:19,340 --> 00:11:22,450
OK so what did it appear.

157
00:11:22,450 --> 00:11:28,990
City equals document that query selector city with the ID and then set the inner text to data location

158
00:11:29,070 --> 00:11:32,540
that city make sure it works.

159
00:11:32,540 --> 00:11:33,210
And there we go.

160
00:11:33,220 --> 00:11:34,400
The city is changing.

161
00:11:34,660 --> 00:11:36,840
So we have all the data updating.

162
00:11:36,940 --> 00:11:39,400
Oh actually we're missing one thing the e-mail.

163
00:11:39,420 --> 00:11:40,990
So same process.

164
00:11:41,440 --> 00:11:45,130
So e-mail is just its own field here and the top level.

165
00:11:45,220 --> 00:11:46,430
So that makes it easy.

166
00:11:46,510 --> 00:11:52,240
So I'm just going to set e-mail and her text equals data.

167
00:11:52,390 --> 00:11:58,230
E-mail this e-mail here is referring to appear where I selected the e-mail.

168
00:11:58,240 --> 00:11:58,960
All right.

169
00:11:59,320 --> 00:12:01,480
So let's take a look.

170
00:12:01,570 --> 00:12:03,410
Everything's updating how it should.

171
00:12:03,520 --> 00:12:04,330
Perfect.

172
00:12:04,690 --> 00:12:09,640
So the last thing that we could do if we wanted to handle errors which we're not doing right now.

173
00:12:10,120 --> 00:12:15,850
I would start off with a dot then handle errors and now would be the first thing I do.

174
00:12:15,850 --> 00:12:23,200
So I need to define that function handle errors and that takes a response and this is where we do our

175
00:12:23,200 --> 00:12:24,050
logic.

176
00:12:24,130 --> 00:12:34,860
If it's not if read is not OK we can throw an error and in here we'll just do the red dot status.

177
00:12:34,960 --> 00:12:43,400
We've seen that before and we still need to return response so that we're passing it in two parts Jason.

178
00:12:43,960 --> 00:12:47,440
So we're handling the errors like we've done before.

179
00:12:47,440 --> 00:12:54,700
If we're requesting a bad you R-OH 404 or some other status code that's not 200 throw an error or otherwise

180
00:12:55,120 --> 00:13:02,500
return the response and from here goes into parse Jaison then we update the profile and then we also

181
00:13:02,500 --> 00:13:07,420
have this catch which we could extract into you know a separate thing as well.

182
00:13:07,480 --> 00:13:17,180
Maybe we'll call this display errors and then down here we can just define maybe just paste it in actually

183
00:13:17,620 --> 00:13:21,520
function display errors

184
00:13:24,280 --> 00:13:28,510
very simple and or just cancel out like liking the error.

185
00:13:29,440 --> 00:13:36,910
Maybe I'll just do a copy of that log inside display errors just so you can see where that's coming

186
00:13:36,910 --> 00:13:37,680
from.

187
00:13:38,200 --> 00:13:39,280
OK.

188
00:13:39,280 --> 00:13:41,200
So that should be good here.

189
00:13:41,350 --> 00:13:48,760
We've got first fetch then handle errors then parse Jaison then update profile and then our catch display

190
00:13:48,760 --> 00:13:49,810
errors.

191
00:13:49,930 --> 00:13:51,460
Let's make sure everything works still.

192
00:13:53,550 --> 00:13:55,180
Open the console up.

193
00:13:55,260 --> 00:13:57,660
Make sure we don't see anything there looks good.

194
00:13:57,780 --> 00:14:02,470
And if I turn off my internet and try it now we're getting inside display errors.

195
00:14:02,470 --> 00:14:02,920
Perfect.

196
00:14:02,920 --> 00:14:05,290
And then the error itself is printing.

197
00:14:05,290 --> 00:14:07,080
So everything's working how it should.

198
00:14:07,360 --> 00:14:14,440
So hopefully you see how cleaning this up a bit it's just a preference but it makes the listener code

199
00:14:14,470 --> 00:14:17,530
much simpler because we're already nesting inside a callback here.

200
00:14:17,650 --> 00:14:23,980
So adding a bunch of more a bunch more nested code with you know defining functions appear is kind of

201
00:14:23,980 --> 00:14:26,350
ugly in my opinion and it gets out of control.

202
00:14:26,380 --> 00:14:28,790
This is very easy to understand what's happening.

203
00:14:28,870 --> 00:14:32,230
And then we just have a nice little neat named function is down here.

204
00:14:32,530 --> 00:14:37,950
Some people would argue it is less succinct it is more code but I think it's worth it.

205
00:14:38,140 --> 00:14:39,260
Just an opinion though.

206
00:14:39,700 --> 00:14:40,730
So that's it.

207
00:14:40,780 --> 00:14:46,500
We are successfully parsing or making the request we're handling any errors that have to do with the

208
00:14:46,500 --> 00:14:52,270
status code then we're parsing the response we're passing in to the update profile function that is

209
00:14:52,270 --> 00:14:58,270
going to do the hard work of changing the DOM manipulating all these properties and then finally if

210
00:14:58,270 --> 00:15:00,390
there's a problem we have our display errors.

211
00:15:00,400 --> 00:15:00,970
Perfect.

212
00:15:01,030 --> 00:15:01,880
So we're done.

213
00:15:02,060 --> 00:15:02,930
That's it.

214
00:15:03,010 --> 00:15:04,950
Hopefully you hung in there through that.

215
00:15:04,960 --> 00:15:08,570
Moving on now to learn about some other tools that help us make requests.
