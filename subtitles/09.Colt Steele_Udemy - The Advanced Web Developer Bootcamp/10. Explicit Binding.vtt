WEBVTT
1
00:00:00.840 --> 00:00:06.390
Welcome back in the last video we examine the second rule for determining the value of the key word

2
00:00:06.390 --> 00:00:07.040
this.

3
00:00:07.230 --> 00:00:08.760
The implicit rule.

4
00:00:08.760 --> 00:00:14.520
This rule states that when the key word this is inside of a declared object its value will always be

5
00:00:14.520 --> 00:00:16.550
the closest parent object.

6
00:00:16.710 --> 00:00:22.100
One thing to note these rules that we are using are not an official part of the JavaScript specification.

7
00:00:22.290 --> 00:00:23.970
So you will not find them there.

8
00:00:24.000 --> 00:00:28.900
These rules are just a helpful way of keeping track of what the value of the key word this is.

9
00:00:29.220 --> 00:00:34.740
At the end of the last video we saw an example of when the context of the key word this changed unexpectedly

10
00:00:35.250 --> 00:00:36.680
in our Say hello method.

11
00:00:36.930 --> 00:00:43.170
If this stuff first name became undefine because the key word this refer to the dog object.

12
00:00:43.170 --> 00:00:48.960
So what if you want to explicitly set the value of the key word this so you can force it to be the person

13
00:00:48.990 --> 00:00:51.470
object instead of the dog object.

14
00:00:51.480 --> 00:00:53.910
This is where the third rule comes in.

15
00:00:54.210 --> 00:00:59.530
Whenever you see the call apply or bind methods you can easily determine what the value of the keyword

16
00:00:59.550 --> 00:01:05.560
this will be because you get to set it as the first parameter to each of these functions.

17
00:01:05.700 --> 00:01:11.340
Before we compare and contrast call apply and bind one thing to remember is that these three methods

18
00:01:11.370 --> 00:01:18.450
can only be invoked on functions called apply and bind are methods that can only be used by functions

19
00:01:18.750 --> 00:01:23.160
not by other data types like strings booleans or objects.

20
00:01:23.160 --> 00:01:28.620
The first method we're going to talk about is call the first argument to the call method is what you

21
00:01:28.620 --> 00:01:31.290
want the value of the keyword this to be.

22
00:01:31.290 --> 00:01:35.610
This is commonly called this Aard and can be set to whatever you want.

23
00:01:35.880 --> 00:01:42.090
The arguments after this are are any parameters that you want to pass to the function that you are changing

24
00:01:42.090 --> 00:01:45.870
the value of the keyword this in that sounds confusing.

25
00:01:45.900 --> 00:01:51.230
Will make more sense for me see an example since a function can have an infinite number of arguments.

26
00:01:51.290 --> 00:01:55.110
We separate each one of them with a comma when using call.

27
00:01:55.200 --> 00:02:01.110
Finally when the call method is used on a function that function is immediately invoked.

28
00:02:01.950 --> 00:02:09.290
Now let's move on to apply apply is almost identical to call except apply will only take in two parameters

29
00:02:09.300 --> 00:02:15.240
at most the first just like call is what we want the value of the key word this to be.

30
00:02:15.240 --> 00:02:17.030
We call that this arc.

31
00:02:17.190 --> 00:02:22.920
The second parameter is an array of arguments that we want to pass to the function in which we are changing

32
00:02:22.920 --> 00:02:24.330
the value of the key word.

33
00:02:24.330 --> 00:02:31.950
This now lets examine bind bind is almost identical to call except instead of invoking the function

34
00:02:31.980 --> 00:02:37.990
which it is called on right away and returns a function definition with the value of the keyword.

35
00:02:37.990 --> 00:02:43.330
This already set to what you passed as the first parameter to the bind method.

36
00:02:43.740 --> 00:02:46.940
Let's quickly recap what I mean by function definition.

37
00:02:46.980 --> 00:02:52.010
I'm going to create a function called first function and it's going to return the string hello.

38
00:02:52.320 --> 00:02:58.260
If I do not call the function but examine the variables first function that I created I am returned

39
00:02:58.290 --> 00:03:04.950
a function definition and is an extremely powerful function as we can see functions with a different

40
00:03:04.950 --> 00:03:09.120
value of the keyword this and call them at a later point in time.

41
00:03:09.120 --> 00:03:14.400
This is quite valuable when working with asynchronous code like said time out and is the building block

42
00:03:14.400 --> 00:03:20.640
for more advanced functional programming techniques like purry Let's quickly recap these three methods

43
00:03:21.120 --> 00:03:26.200
call apply and bind or three methods that are used to explicitly set the value of the keyword.

44
00:03:26.200 --> 00:03:27.900
This we use them.

45
00:03:27.910 --> 00:03:32.060
We want full control over what the value of the key word this will be.

46
00:03:32.080 --> 00:03:37.420
So it has precedence over the first two rules call and apply will invoke the function that they are

47
00:03:37.420 --> 00:03:43.700
called on immediately whereas bind will return a new function definition with the value of the keyword.

48
00:03:43.720 --> 00:03:50.620
This explicitly set finally calling bind except an infinite number of parameters whereas apply only

49
00:03:50.620 --> 00:03:56.560
takes and two in the next video will see an example of call and how we can use it to explicitly set

50
00:03:56.560 --> 00:03:59.120
the value of the keyword this sealer.
