WEBVTT
1
00:00:01.570 --> 00:00:04.770
All right let's dive into callback functions.

2
00:00:04.770 --> 00:00:06.430
Let's define our objectives.

3
00:00:07.080 --> 00:00:14.150
First we're going to define what callback functions are then we're also going to define higher order

4
00:00:14.150 --> 00:00:14.750
functions

5
00:00:17.300 --> 00:00:22.840
we'll learn to use a callback function to make our code more general.

6
00:00:23.600 --> 00:00:28.010
And finally we'll create callback functions using anonymous functions.

7
00:00:29.800 --> 00:00:35.270
A callback function is defined as a function that is passed into another function as a parameter and

8
00:00:35.270 --> 00:00:38.070
then invoked by that of the function.

9
00:00:38.120 --> 00:00:39.140
That's a lot to impact.

10
00:00:39.140 --> 00:00:41.050
So let's look at an example.

11
00:00:46.910 --> 00:00:53.630
As you can see in this example we have a callback function named callback when the other function higher

12
00:00:53.630 --> 00:00:55.590
order function is invoked.

13
00:00:55.850 --> 00:01:01.130
Callback is passed as a parameter inside of higher order function.

14
00:01:01.190 --> 00:01:04.620
The parameter for our callback is named Fehn.

15
00:01:05.390 --> 00:01:10.730
As you can see Fan is invoked inside of the higher order function which makes the Ethen parameter a

16
00:01:10.730 --> 00:01:12.600
callback.

17
00:01:12.600 --> 00:01:16.330
Let's take a look at this in the consul.

18
00:01:16.350 --> 00:01:20.040
So here's our code we've got the function higher order and the function call back.

19
00:01:20.220 --> 00:01:26.670
I'm going to invoke higher order and pass in callback and as you can see here we get the console log

20
00:01:26.760 --> 00:01:28.360
about to call call back.

21
00:01:28.650 --> 00:01:31.560
And then coming from callback from within the callback.

22
00:01:31.800 --> 00:01:35.070
And finally callback has been invoked from here.

23
00:01:35.100 --> 00:01:37.010
The last line higher function.

24
00:01:37.680 --> 00:01:38.030
OK.

25
00:01:38.040 --> 00:01:39.240
So we have to find a callback.

26
00:01:39.240 --> 00:01:45.180
Now let's define higher order functions so a higher order function is a function that accepts a callback

27
00:01:45.210 --> 00:01:48.440
as a parameter.

28
00:01:48.570 --> 00:01:54.750
Looking back for example the function named higher order function is in fact a higher order function.

29
00:01:54.960 --> 00:02:01.440
So we're passing in the callback here as a parameter to this function that we are invoking called higher

30
00:02:01.440 --> 00:02:01.860
order

31
00:02:04.940 --> 00:02:07.870
you maybe wondering at this point what are callbacks used for.

32
00:02:08.060 --> 00:02:12.320
Well callbacks are actually a very common pattern in javascript and they come up in a lot of different

33
00:02:12.320 --> 00:02:13.300
cases.

34
00:02:13.670 --> 00:02:19.550
For example advanced Array methods which we're going to be going into detail later in this course about

35
00:02:20.030 --> 00:02:29.490
use callbacks browser events such as click Submit Dom content loaded all except callbacks which will

36
00:02:29.490 --> 00:02:38.660
be invoked when the event takes place Ajax requests which we will talk about more in detail very soon.

37
00:02:38.660 --> 00:02:44.810
Also use callbacks and Leslee callbacks are very important to understand when we are working on re-act

38
00:02:44.810 --> 00:02:45.570
later.

39
00:02:45.590 --> 00:02:50.810
So it's very important to get a solid foundation now before we move on to more advanced topics.

40
00:02:50.810 --> 00:02:53.320
OK let's look at a few examples.

41
00:02:53.960 --> 00:02:57.550
Here's an example of some functions with a lot of code duplication.

42
00:02:57.950 --> 00:03:05.330
All of them essentially take a message as a string and then perform some function on that message.

43
00:03:05.330 --> 00:03:10.460
Let's try to refactor that using callbacks so that we can eliminate the duplication and make the code

44
00:03:10.460 --> 00:03:17.880
more general.

45
00:03:17.970 --> 00:03:23.910
The first thing we're going to do is make a function call send message and send message will be a higher

46
00:03:23.910 --> 00:03:25.160
order function.

47
00:03:25.170 --> 00:03:28.690
So the second parameter here will be a callback.

48
00:03:29.160 --> 00:03:36.020
Now that we have our Send message function we can provide any callback that we like as the second parameter.

49
00:03:36.030 --> 00:03:43.210
So first of all we're using console log to send the message then we're using alert to send the message.

50
00:03:43.260 --> 00:03:48.780
And finally we're using confirm to show the message and we will also get back and answer.

51
00:03:49.740 --> 00:03:52.940
OK let's look at another example of a callback function.

52
00:03:52.980 --> 00:03:59.410
Here we have a higher order function called greed that takes a callback named formatter.

53
00:04:00.120 --> 00:04:06.870
And inside of greed we are deciding how we want to format the name parameter based on the formatted

54
00:04:06.870 --> 00:04:07.380
function.

55
00:04:07.380 --> 00:04:15.280
So whatever format it returns is what will be the second half of this greeting string.

56
00:04:15.350 --> 00:04:20.120
Now below that we created a function called uppercase name which will uppercase whatever name is passed

57
00:04:20.120 --> 00:04:21.660
inside.

58
00:04:22.040 --> 00:04:28.280
And then finally we invoke greet passing the name Tim and the callback uppercase name.

59
00:04:28.310 --> 00:04:32.000
So what we'll get as a result is Hello karma.

60
00:04:32.120 --> 00:04:35.940
Tim where Tim is all in upper case.

61
00:04:36.110 --> 00:04:42.350
So this is the pattern that we've seen pretty often in all of the examples where we use a declared function

62
00:04:42.380 --> 00:04:46.110
as the callback for the higher order function.

63
00:04:46.790 --> 00:04:53.180
But a common pattern that you'll see in many javascript code bases is to use an anonymous function as

64
00:04:53.180 --> 00:04:57.260
our callback rather than a function declaration.

65
00:04:57.260 --> 00:05:04.620
So in this example here we've passed in an anonymous function in the invocation of grete.

66
00:05:04.660 --> 00:05:07.200
So just like before were uppercase in the name.

67
00:05:07.390 --> 00:05:12.430
But now we're not making a function declaration for that upper case we're just passing in the anonymous

68
00:05:12.430 --> 00:05:13.750
function.

69
00:05:13.750 --> 00:05:19.690
And below that you'll see another example of gry which also takes an anonymous function which rather

70
00:05:19.690 --> 00:05:23.410
than uppercase is the name adds a lot of excitement to the name.

71
00:05:23.410 --> 00:05:27.400
We're going to return ads exclamation marks.

72
00:05:27.460 --> 00:05:31.960
All right we've covered all the basics of callbacks now in the next video we're going to move on to

73
00:05:31.960 --> 00:05:37.120
a little bit more complicated example which is a for each method.

74
00:05:37.120 --> 00:05:41.820
Essentially we're going to provide a callback that's invoked for each element in an array.
