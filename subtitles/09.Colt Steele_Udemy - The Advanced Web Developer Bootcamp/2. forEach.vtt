WEBVTT
1
00:00:00.420 --> 00:00:05.730
In the section we're going to discuss our first essential array method for each year or so for each

2
00:00:05.730 --> 00:00:06.540
works.

3
00:00:06.630 --> 00:00:08.810
First it is invoked on an array.

4
00:00:08.850 --> 00:00:14.220
Second for each iterates or loops through the array and runs a callback function on each value in the

5
00:00:14.220 --> 00:00:15.090
array.

6
00:00:15.090 --> 00:00:22.560
Third when the loop ends for each returns undefined always always remember for each returns undefined.

7
00:00:22.560 --> 00:00:27.780
If you try to store the result of for each in a variable or return the result of for each in a function

8
00:00:28.110 --> 00:00:30.760
you will still always get undefined.

9
00:00:30.790 --> 00:00:35.760
We mentioned that for each iterates through an array and runs a callback function on each value in the

10
00:00:35.760 --> 00:00:41.850
array inside of the callback function we can get access to each of value the index of the value and

11
00:00:41.850 --> 00:00:43.060
the array itself.

12
00:00:43.320 --> 00:00:44.450
Let's see what we mean by that.

13
00:00:44.490 --> 00:00:50.250
With the diagram we first start with an array and invoke in the array method on it.

14
00:00:50.250 --> 00:00:53.330
In this case the method we're using is 40 each.

15
00:00:53.370 --> 00:00:58.410
The first parameter to all of the array methods that we learn is a callback function for all of these

16
00:00:58.410 --> 00:01:03.480
methods with the exception of reduce the callback function will accept three parameters.

17
00:01:03.480 --> 00:01:05.590
The first is each value in the array.

18
00:01:05.670 --> 00:01:12.000
The second is the index that we're at in the array and the third is the entire array inside of the callback

19
00:01:12.000 --> 00:01:12.510
function.

20
00:01:12.510 --> 00:01:14.410
We place code that we would like to be run.

21
00:01:14.420 --> 00:01:19.860
For each value in the array since there are three values in the array the callback function will run

22
00:01:19.860 --> 00:01:25.740
three times each time value and index parameter will be different.

23
00:01:25.740 --> 00:01:30.130
Remember we can call the parameters to the callback function whatever we want.

24
00:01:30.210 --> 00:01:32.700
Value Index and array are common names.

25
00:01:32.700 --> 00:01:36.930
We do not always need all three parameters so only use the ones you need.

26
00:01:36.930 --> 00:01:39.650
Just remember that the order is important.

27
00:01:39.930 --> 00:01:42.040
Now that we have an idea of how the code is structured.

28
00:01:42.060 --> 00:01:43.550
Let's see an example.

29
00:01:43.860 --> 00:01:50.090
I'm going to create a variable called R and assign it to an array with the numbers 1 2 and 3 and I'll

30
00:01:50.160 --> 00:01:55.560
then invoke the for each method on the array and pass in a callback function inside of this callback

31
00:01:55.560 --> 00:01:56.100
function.

32
00:01:56.100 --> 00:02:01.140
I have access to each value index that I'm at and the array which I'm iterating over.

33
00:02:01.140 --> 00:02:05.830
Remember these are just parameters to a function so you can call them whatever you want.

34
00:02:05.940 --> 00:02:11.700
Now inside of this callback function I'm going to cancel Dabbagh the value index an array so you can

35
00:02:11.700 --> 00:02:13.300
see each of those values.

36
00:02:13.620 --> 00:02:20.370
Now let's run this and you can see that we print out the value and index and array and finally we see

37
00:02:20.370 --> 00:02:22.550
that for each returns undefined.

38
00:02:23.160 --> 00:02:24.190
So how does this work.

39
00:02:24.450 --> 00:02:27.850
Let's examine what implementation of four each might look like.

40
00:02:27.930 --> 00:02:32.850
A great way to do this would be by implementing our own version of the for each function which would

41
00:02:32.850 --> 00:02:35.500
accept an array and some callback function.

42
00:02:35.610 --> 00:02:41.670
Remember for each iterates through an array runs a callback function on each value in the array and

43
00:02:41.670 --> 00:02:43.150
returns undefined.

44
00:02:43.650 --> 00:02:48.870
If you'd like positivity video now and try to implement this on your show write a function called for

45
00:02:48.870 --> 00:02:51.990
each which accepts an array and a callback function.

46
00:02:52.100 --> 00:02:55.160
For you see the solution.

47
00:02:55.170 --> 00:03:00.390
OK so let's create a function called for each which accepts an array and a callback function.

48
00:03:00.810 --> 00:03:04.050
I'm going to start with a for loop and initialize a variable.

49
00:03:04.150 --> 00:03:05.180
A 0.

50
00:03:05.610 --> 00:03:10.820
I'll keep looping as long as I is less than the length of the array passed to for each increment by

51
00:03:10.830 --> 00:03:14.100
one after each iteration inside of here.

52
00:03:14.130 --> 00:03:18.970
I'm going to invoke the callback with the Value Index and array as parameters.

53
00:03:19.080 --> 00:03:24.390
Once we're done iterating I can add a return undefined or I can leave this empty and the function will

54
00:03:24.390 --> 00:03:26.490
return undefined on its own.

55
00:03:26.490 --> 00:03:31.570
Remember functions that do not have a return keyword will always output undefined.

56
00:03:31.710 --> 00:03:34.830
So here's what a simple implementation of for each might look like.

57
00:03:34.830 --> 00:03:38.230
Always remember that for each returns undefined.

58
00:03:38.240 --> 00:03:41.680
Now let's see how we can use for each inside of a function.

59
00:03:41.680 --> 00:03:44.860
Here I have a function called Half of values which accepts an array.

60
00:03:45.050 --> 00:03:47.570
And inside here I am creating a new array.

61
00:03:47.630 --> 00:03:53.060
I'm going to iterate over the array passed to the function using for each and push into the new array.

62
00:03:53.090 --> 00:03:54.850
Each value divided by two.

63
00:03:55.190 --> 00:03:57.580
Finally I'll return the new array.

64
00:03:57.590 --> 00:03:59.120
Try this code example on your own.

65
00:03:59.120 --> 00:04:03.650
To really master how the syntax works before you move on to our next story method.

66
00:04:03.770 --> 00:04:05.660
Let's practice a bit with for each.

67
00:04:05.660 --> 00:04:07.800
Good luck and I'll see you in the next video.
