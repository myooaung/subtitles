1
00:00:00,690 --> 00:00:06,510
Welcome back the next array method we're going to examine is map we mentioned before that for each always

2
00:00:06,510 --> 00:00:12,510
returns undefined and very commonly you'll want to transform one array into another array with different

3
00:00:12,510 --> 00:00:13,400
values.

4
00:00:13,770 --> 00:00:18,050
Or you could make a new array and use for each to push values into the new array.

5
00:00:18,060 --> 00:00:20,480
There is an easier way to do that using map.

6
00:00:20,730 --> 00:00:23,400
Let's examine step by step how map works.

7
00:00:23,400 --> 00:00:26,750
Try an example and then implement our own version.

8
00:00:27,000 --> 00:00:32,340
The way the map works is that it is invoked on an array and the first thing it does is create a new

9
00:00:32,400 --> 00:00:33,280
array.

10
00:00:33,330 --> 00:00:38,280
It then iterates over the array it was called on and runs a callback function for each value in the

11
00:00:38,280 --> 00:00:39,220
array.

12
00:00:39,330 --> 00:00:44,000
It takes the value return from the callback function and places it in the new array.

13
00:00:44,220 --> 00:00:48,030
And when it's done iterating it returns the new array create.

14
00:00:48,160 --> 00:00:52,000
That might seem like a lot but it will make more sense when we see an example.

15
00:00:52,110 --> 00:00:58,840
Always remember map returns a new array of the same length as the array it is invoked on.

16
00:00:58,910 --> 00:01:00,180
Let's see an example.

17
00:01:00,490 --> 00:01:05,080
I'll create a variable called R which will have the numbers 1 2 and 3 inside it.

18
00:01:05,170 --> 00:01:10,400
I'll even invoke the map function on the array and just like for each the first parameter I pass is

19
00:01:10,400 --> 00:01:11,590
a callback function.

20
00:01:11,900 --> 00:01:17,510
In this callback function we get access to the value index an array just like foreach.

21
00:01:17,630 --> 00:01:23,090
However we have to make sure to return a value inside of this callback because the value that we return

22
00:01:23,150 --> 00:01:25,720
is what will be placed inside of the new array.

23
00:01:25,730 --> 00:01:27,290
That map creates.

24
00:01:27,290 --> 00:01:29,350
Now let's run this and see what I get back.

25
00:01:29,570 --> 00:01:30,090
Nice.

26
00:01:30,140 --> 00:01:32,100
A new array with all the values doubled.

27
00:01:32,480 --> 00:01:38,360
If I omit the return statement here I would actually get back in array with undefined for each value.

28
00:01:38,360 --> 00:01:42,520
Just remember we always get back an array of the same length.

29
00:01:42,530 --> 00:01:43,800
So how does map work.

30
00:01:43,820 --> 00:01:47,140
Let's examine what an implementation of map might look like.

31
00:01:47,360 --> 00:01:51,830
A great way to do this would be by implementing our own version of the map function which would accept

32
00:01:51,830 --> 00:01:56,550
an array and some callback function just like for each member of the steps.

33
00:01:56,690 --> 00:01:58,630
And that creates a new array.

34
00:01:58,720 --> 00:02:01,460
It then iterates through the array passed to it.

35
00:02:01,550 --> 00:02:05,190
It then runs a callback function for each value in the array.

36
00:02:05,330 --> 00:02:12,030
It pushes the result of the callback function into the new array and finally it returns the new array.

37
00:02:12,110 --> 00:02:15,420
If you would like pause the video and try to implement this on your own.

38
00:02:16,580 --> 00:02:21,600
All right so let's create a function called Map which accepts an array and a callback function.

39
00:02:21,660 --> 00:02:25,000
I'm going to start by creating an empty array called New Are all.

40
00:02:25,030 --> 00:02:27,300
Then make a for loop and then initialize a variable.

41
00:02:27,420 --> 00:02:28,260
Zero.

42
00:02:28,320 --> 00:02:33,370
I'll keep looping as long as it is less than the length of the array passed the map and increment by

43
00:02:33,370 --> 00:02:36,370
one after each iteration inside of here.

44
00:02:36,400 --> 00:02:41,830
I'm going to invoke the callback with the Value Index and array as parameters and take the result of

45
00:02:41,830 --> 00:02:45,280
that callback and push it into the new R variable.

46
00:02:45,430 --> 00:02:50,910
Once we're done iterating we have to make sure to return the new or a created and that's it.

47
00:02:50,980 --> 00:02:55,680
Now that we have a better understanding of how map works let's see how to use map inside of a function.

48
00:02:55,750 --> 00:03:00,340
Here I have a function called triple values which accepts an array and returns a new array with each

49
00:03:00,340 --> 00:03:02,000
value triple.

50
00:03:02,020 --> 00:03:07,480
Notice here that I have two return statements 1 for the result of map which is a new array and then

51
00:03:07,480 --> 00:03:12,340
another inside the callback function to make sure that my new array has the correct value.

52
00:03:13,290 --> 00:03:17,380
Inside of the callback function I'm returning each value multiplied by three.

53
00:03:17,400 --> 00:03:20,690
You might be wondering why don't we just use for each to solve this.

54
00:03:20,700 --> 00:03:22,630
The answer is that we could use for each.

55
00:03:22,680 --> 00:03:26,950
But map is a bit more friendly since it already returns a new array to us.

56
00:03:27,060 --> 00:03:30,190
For each can be used if you want to overwrite values in an array.

57
00:03:30,300 --> 00:03:34,800
Or change something externally or when you would like a new array to be returned to you.

58
00:03:34,980 --> 00:03:38,650
Especially one of the same length Knapp's should always be used.

59
00:03:39,060 --> 00:03:41,880
Let's take a look at one more function on the first name.

60
00:03:42,030 --> 00:03:47,050
Here are mapping over an array and returning the first property on each value in the array.

61
00:03:47,090 --> 00:03:51,870
We are assuming in this function that we will pass an array of objects and they will call have a first

62
00:03:51,870 --> 00:03:54,390
property when we invoke this function.

63
00:03:54,390 --> 00:03:58,110
We get back an array of just the first value that we can see.

64
00:03:58,110 --> 00:04:03,240
Math is very helpful when you want to extract values from an object and place them in an array.

65
00:04:03,300 --> 00:04:08,490
Just remember you always need to return something in the callback to map and that map will always return

66
00:04:08,520 --> 00:04:11,800
an array of the same length as the array that it was called.

67
00:04:12,680 --> 00:04:16,760
Or what happens if we want to filter out some values and not get back in array of the same length.

68
00:04:17,060 --> 00:04:21,650
Thankfully there is a better method for that but before we move on but practice a bit with map.

69
00:04:21,680 --> 00:04:23,100
Good luck and I'll see you in the next video.
