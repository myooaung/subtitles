1
00:00:00,570 --> 00:00:05,610
So we spent the last couple screencast learning about readouts and connecting reactant redux and connecting

2
00:00:05,640 --> 00:00:10,890
the Riak router with redux what we're going to do now is start building the backbone for a full stack

3
00:00:10,890 --> 00:00:11,850
application.

4
00:00:11,880 --> 00:00:13,320
We've done a lot of work on the front end.

5
00:00:13,380 --> 00:00:19,290
What we're going to do now is actually start persisting our do is using a database and building a node

6
00:00:19,350 --> 00:00:20,060
backend.

7
00:00:20,280 --> 00:00:25,980
So what I'm going to start with is by making a simple folder and I'll call that to use back in and I'm

8
00:00:25,980 --> 00:00:30,030
going to CD into that folder and we're going to create a simple node application.

9
00:00:30,210 --> 00:00:34,030
I'm going to end it and I'll pass in-dash y.

10
00:00:34,050 --> 00:00:38,730
So I to fill in all the blanks and I'll make a file called index that yes.

11
00:00:39,120 --> 00:00:41,450
And with this note application we're going to keep it really simple.

12
00:00:41,510 --> 00:00:47,660
I'll make a folder for my models as well as for my routes and I'll install some necessary dependencies.

13
00:00:47,880 --> 00:00:52,230
I'm going to install express body parser.

14
00:00:52,590 --> 00:00:53,610
What else do you think we might need.

15
00:00:53,610 --> 00:00:58,680
We're going to need mongoose and one more important thing we need to think about is actually cores.

16
00:00:58,860 --> 00:01:04,500
And this is a bit of middleware that's going to allow us to make requests that are cross origin.

17
00:01:04,530 --> 00:01:09,450
Remember this back end is going to be starting on localhost three thousand one or 5000 and our front

18
00:01:09,450 --> 00:01:13,920
end application is going to have a different port number and when there are requests from one domain

19
00:01:13,920 --> 00:01:19,650
to another right off the bat it's a violation of the same origin policy because those port numbers are

20
00:01:19,650 --> 00:01:20,300
different.

21
00:01:20,310 --> 00:01:23,290
They might both be local hosts but they're still going to be different ports.

22
00:01:23,310 --> 00:01:29,100
So we want to allow requests from different domains to come into our API and to do that we're going

23
00:01:29,100 --> 00:01:34,020
to use this nice Corps module a little bit of middleware that's going to allow for certain headers to

24
00:01:34,020 --> 00:01:38,940
be sent and set to allow for cross origin requests.

25
00:01:38,970 --> 00:01:40,390
So let's get started with this.

26
00:01:40,770 --> 00:01:44,250
I also realize there's one more dependency that we're going to add and this is going to be for a little

27
00:01:44,250 --> 00:01:50,490
bit of debugging that is going to be Morgon so NPM and Morgan that's going to allow us to see requests

28
00:01:50,490 --> 00:01:52,960
that are coming in to our data.

29
00:01:53,370 --> 00:01:55,480
So let's get started with some code.

30
00:01:55,710 --> 00:02:00,450
What I'm going to do with my index Geass is just go and bring in all of my necessary dependencies and

31
00:02:00,450 --> 00:02:01,240
you express.

32
00:02:01,380 --> 00:02:03,730
So I'm going to require express.

33
00:02:03,960 --> 00:02:05,450
I also want an app variable.

34
00:02:05,490 --> 00:02:08,380
So I'm going to invoke the Express function.

35
00:02:08,460 --> 00:02:13,020
I also want to bring in cores so cores is going to be requiring the cores module and I'm going to do

36
00:02:13,020 --> 00:02:15,460
this with Morgon as well.

37
00:02:15,540 --> 00:02:17,410
Make sure that we bring in Morgan.

38
00:02:17,760 --> 00:02:19,910
And let's go to make sure that we bring in two more.

39
00:02:19,920 --> 00:02:24,500
We have a body parser to make sure I call this body Dasch parser.

40
00:02:25,410 --> 00:02:29,790
And there's one more that I'm going to want which are going to be my routes so I'm going to call this

41
00:02:29,790 --> 00:02:35,670
to do routes and to do routes is going to be the result of bringing in whatever is in route slash to

42
00:02:35,670 --> 00:02:36,540
use.

43
00:02:37,080 --> 00:02:42,460
So in order to get that to work I need to make sure that I have a file called to do's dodgiest.

44
00:02:42,480 --> 00:02:47,990
So inside of here I'll make a file called the dues that G-S inside of my models as well.

45
00:02:48,000 --> 00:02:50,060
I'll make a file called to do that.

46
00:02:50,100 --> 00:02:52,650
Yes I'm going to have a simple to do model.

47
00:02:52,770 --> 00:02:54,470
So what else do I need inside of here.

48
00:02:54,570 --> 00:02:56,660
Well let's start using some of this middleware.

49
00:02:56,730 --> 00:03:00,540
I'm going to use Morgan and we'll pass in tiny.

50
00:03:00,540 --> 00:03:02,830
This is simply going to give me a little bit of logging.

51
00:03:02,940 --> 00:03:08,130
I also want to make sure that I use body parts or you might see body parser You are all encoded.

52
00:03:08,130 --> 00:03:12,150
We want to make sure we're using body parts or Jason since those are the kind of requests that are coming

53
00:03:12,150 --> 00:03:12,980
in.

54
00:03:13,080 --> 00:03:18,870
We want to make sure that we also use cores and then we're going to specify that any routes that come

55
00:03:18,870 --> 00:03:24,530
in will prefix them with API sloshed to use and that's where we'll include all of our to drought's.

56
00:03:24,630 --> 00:03:28,010
You can see a more complex folder structure with the handler's folder and so on.

57
00:03:28,020 --> 00:03:29,960
I'm going to keep things really simple here.

58
00:03:30,060 --> 00:03:36,180
I just want a little bit of middleware so I'm going to say if there is any kind of request that comes

59
00:03:36,180 --> 00:03:39,380
in that we don't know about we'll make a new error.

60
00:03:39,390 --> 00:03:43,830
We can say let error be a new error and we'll see here not found.

61
00:03:43,840 --> 00:03:46,060
There's going to be simple 404 handler.

62
00:03:46,290 --> 00:03:52,420
We'll set the status to be four or four and then we'll simply call next with that error.

63
00:03:52,500 --> 00:03:55,950
This is just a little bit of fancy error handling.

64
00:03:55,950 --> 00:04:00,120
The next thing we can do is we're really not worried too much about building this in production is will

65
00:04:00,120 --> 00:04:07,470
simply say let's use another piece of middleware which is going to catch that or whatever rack arrays

66
00:04:07,530 --> 00:04:13,140
and indexed and inside of here we're simply going to say that our status is whatever that status is

67
00:04:13,440 --> 00:04:14,840
or the five hundred.

68
00:04:14,850 --> 00:04:19,110
This is very similar to the middleware that you'll generate when using the Express generator for some

69
00:04:19,110 --> 00:04:20,550
stuff that you've seen before.

70
00:04:20,550 --> 00:04:24,030
I'm just quoting this line by line so we can see what's actually happening here.

71
00:04:24,060 --> 00:04:29,750
What we'll then do is simply send a error message will pass in an object with a key message and that

72
00:04:29,750 --> 00:04:31,400
will be whatever the messages.

73
00:04:31,580 --> 00:04:37,830
And that will pass in some kind of error which will be whatever error we get back from our next handler.

74
00:04:38,130 --> 00:04:42,710
Finally let's make sure that we listen and we can listen on port three thousand one.

75
00:04:42,720 --> 00:04:44,000
Let's keep it real simple.

76
00:04:44,160 --> 00:04:51,540
We'll run a function and when we start listening we'll say the Consul got a log server starting on port

77
00:04:51,590 --> 00:04:52,620
3000 one.

78
00:04:52,650 --> 00:04:55,740
This is not something that we're going to worry about deploying in productions or we're really just

79
00:04:55,740 --> 00:04:57,990
going to start with a simple develop and server.

80
00:04:58,380 --> 00:05:00,400
So this looks like a pretty good index that.

81
00:05:00,440 --> 00:05:04,230
Yes but we're not going to get very far if we don't have our routes and we're not going to get very

82
00:05:04,230 --> 00:05:07,440
far if we don't have any kind of database persistence.

83
00:05:07,620 --> 00:05:09,630
So we're going to bring in mongoose.

84
00:05:09,690 --> 00:05:15,420
This is going to be our odium that's going to wrap Mongo and allow us to quickly store information save

85
00:05:15,420 --> 00:05:17,470
information and retrieve it.

86
00:05:17,520 --> 00:05:23,540
We're going to connect to a very simple database we'll call that Mongo D-B and slash slash host and

87
00:05:23,580 --> 00:05:27,630
we'll call this Dewes back and we'll see that.

88
00:05:27,780 --> 00:05:32,970
Let's make sure that we pass and debug of truth so we can see the Mago queries being executed for debugging

89
00:05:33,300 --> 00:05:34,640
and we'll make sure that we use.

90
00:05:34,660 --> 00:05:40,590
Yes 2015 promises by setting a mongoose that promise to be the promise library that is built in.

91
00:05:40,620 --> 00:05:47,400
To know what we'll then do is make a quick scheme and that's going to be a new mongooses schema which

92
00:05:47,400 --> 00:05:51,050
accepts an object and all we're going to have is a task that's it.

93
00:05:51,060 --> 00:05:52,770
Our task is going to be a strength.

94
00:05:52,800 --> 00:05:58,280
The next thing we do is create a model from that schema Mangu start model what do we call it to do and

95
00:05:58,320 --> 00:06:00,890
what schema creates it to do schema.

96
00:06:00,960 --> 00:06:05,890
The last thing we're going to do is just export out this to do model.

97
00:06:06,030 --> 00:06:11,940
So all we want to do in our model here is bring in mongoose connect to it log any Mongo queries for

98
00:06:11,940 --> 00:06:15,880
debugging and make sure that we're using E.S. 2015 promises.

99
00:06:16,110 --> 00:06:20,400
We then are going to build a very simple schema where all are Tadeusz we'll just have a task.

100
00:06:20,400 --> 00:06:24,860
Finally we'll make a model and then export out that model that looks pretty good.

101
00:06:25,200 --> 00:06:27,500
How about our wraps up here.

102
00:06:27,540 --> 00:06:30,870
We need to think about the kind of routes that we need in this application.

103
00:06:30,870 --> 00:06:36,150
So first off we've got to bring in Express when we bring in Express will require that.

104
00:06:36,150 --> 00:06:39,640
And what are we using with Express we're going to use the express router.

105
00:06:40,650 --> 00:06:46,320
Finally we're going to bring in a to do model so that we make sure that we go back to folder and grab

106
00:06:46,410 --> 00:06:49,420
that to do model for any kind of database interaction.

107
00:06:49,830 --> 00:06:53,360
Let's just make sure right off the bat that we export out that router.

108
00:06:53,880 --> 00:06:56,370
And here we really only need three ruffs.

109
00:06:56,370 --> 00:06:59,920
We're going to have to get requests to slash.

110
00:06:59,940 --> 00:07:03,450
Remember everything is prefixed with API I-Slash to us.

111
00:07:03,720 --> 00:07:07,800
So we're going to go to a router that gets flash when that happens we'll run a function with rec.

112
00:07:07,800 --> 00:07:09,660
RAZ And next.

113
00:07:09,900 --> 00:07:18,450
And inside of here we'll simply find all of our traduce and then run a function with those cities and

114
00:07:18,450 --> 00:07:20,750
we'll just respond by sending all of those to Dewes.

115
00:07:21,000 --> 00:07:26,100
If something goes wrong we'll get some kind of error and we'll just call next with our code looks pretty

116
00:07:26,100 --> 00:07:27,060
good.

117
00:07:27,090 --> 00:07:29,630
This is simply going to go get all of our tatoos.

118
00:07:29,640 --> 00:07:32,970
This is the route where our index route to grab all of the tools.

119
00:07:33,000 --> 00:07:34,610
What about creating a new to do.

120
00:07:34,830 --> 00:07:36,710
Well that's not a guess that's a post.

121
00:07:36,870 --> 00:07:40,770
And when that comes in we will create with whatever comes in in our body.

122
00:07:40,770 --> 00:07:42,170
Now this is not the most secure.

123
00:07:42,180 --> 00:07:44,400
This is just a simple application.

124
00:07:44,430 --> 00:07:49,590
This will give us some kind of to do and here we can even send a status of 201 which is created.

125
00:07:49,860 --> 00:07:55,080
And then we'll send that to do that we just made if things go wrong we'll send that to the air handler.

126
00:07:55,530 --> 00:08:00,330
The last thing we want to do right now is simply just Meeka a route to delete to do this and when we

127
00:08:00,330 --> 00:08:06,180
go to slash slash to do slash some somebody we're going to use the very handy find by id and remove

128
00:08:07,030 --> 00:08:08,210
and what are we going to remove.

129
00:08:08,220 --> 00:08:12,260
We're going to remove whatever comes in as this I.D. rate here.

130
00:08:12,360 --> 00:08:18,270
We get that and read that harams and express and then we're simply going to send that to do that we've

131
00:08:18,270 --> 00:08:19,420
deleted.

132
00:08:20,130 --> 00:08:23,330
Next thing we're going to do is simply just send that to the air handler.

133
00:08:23,700 --> 00:08:27,750
So how do we know if this is working or a really good way is first to make sure that we can start this

134
00:08:27,750 --> 00:08:28,240
server.

135
00:08:28,260 --> 00:08:30,910
So we're going to run Nordman and it looks like we're starting this.

136
00:08:30,930 --> 00:08:33,320
And it's telling us use Mongo client to connect.

137
00:08:33,330 --> 00:08:34,350
I'm not too worried about that.

138
00:08:34,350 --> 00:08:35,940
You can take a look at that deprecation.

139
00:08:35,940 --> 00:08:37,920
We're just really building something very simple.

140
00:08:37,940 --> 00:08:41,460
Right now what we want to do is test our API.

141
00:08:41,820 --> 00:08:46,530
So in a separate terminal window we could start making requests but I'm going to use a pretty friendly

142
00:08:46,530 --> 00:08:51,210
library called HDD PI and HDD Pi is a modern command line.

143
00:08:51,210 --> 00:08:54,850
HTP client you can scroll down a little bit and see how to install it.

144
00:08:54,870 --> 00:08:56,400
It's quite easy.

145
00:08:56,520 --> 00:08:57,560
You can use Brou.

146
00:08:57,630 --> 00:08:59,030
And I'll show you how to use it.

147
00:08:59,040 --> 00:09:02,360
So we're going to start by making a request to HTB.

148
00:09:02,430 --> 00:09:04,540
We're going to get a local host colon.

149
00:09:04,560 --> 00:09:08,620
Three thousand and one slash API slash to use.

150
00:09:08,910 --> 00:09:13,380
And what we can see right now is we get these nice headers and then we see a simple array of what we

151
00:09:13,380 --> 00:09:14,370
get back.

152
00:09:14,670 --> 00:09:20,760
Now if we want to see if we can create these Let's HDD be but we're going to post localhost three thousand

153
00:09:20,760 --> 00:09:22,980
one slash slash to use.

154
00:09:23,040 --> 00:09:26,180
We're going to pass in a task of it.

155
00:09:26,800 --> 00:09:32,610
Let's go try that out and we can see that in our server that we're actually running that insert this

156
00:09:32,610 --> 00:09:35,290
right here is coming from our debug true.

157
00:09:35,310 --> 00:09:38,540
We can see the Mongo queery this post-trade here is coming from Morgan.

158
00:09:38,550 --> 00:09:41,100
So it's really nice to make sure that we're doing that correctly.

159
00:09:41,310 --> 00:09:44,180
Let's go try to add another one HDD.

160
00:09:44,280 --> 00:09:51,420
We're going to post to localhost three thousand and one slashy I-Slash to do with the task of code.

161
00:09:51,780 --> 00:09:56,370
Let's go try that out and we can see we get back this new to do that we meet if we want to see all of

162
00:09:56,370 --> 00:09:56,910
our to do.

163
00:09:56,920 --> 00:10:03,500
Remember the rap for that HDTV get Post three thousand one slash if eyes flashed addy's.

164
00:10:03,650 --> 00:10:04,460
Let's go check that out.

165
00:10:04,460 --> 00:10:05,140
And there we go.

166
00:10:05,180 --> 00:10:06,730
There are the two issues that we have.

167
00:10:06,950 --> 00:10:08,020
How about deleting one.

168
00:10:08,180 --> 00:10:15,250
Well we need to delete by the ID so I going to grab this ID and I'm going to run each DDP delete localhost

169
00:10:15,740 --> 00:10:17,110
three thousand one.

170
00:10:17,270 --> 00:10:18,350
What's the end point again.

171
00:10:18,440 --> 00:10:20,810
API to Doo's some ID.

172
00:10:21,200 --> 00:10:23,190
Let's go take a look at what this looks like.

173
00:10:23,450 --> 00:10:24,260
When we delete.

174
00:10:24,580 --> 00:10:28,970
You can see we're running find and modify we're passing in the ID and it looks like we've removed this

175
00:10:28,970 --> 00:10:34,070
one successfully just a triple check that we can make sure that when we get all of our dues we just

176
00:10:34,070 --> 00:10:35,850
have one remaining.

177
00:10:35,960 --> 00:10:38,400
So it looks like our back ends actually in pretty good shape.

178
00:10:38,450 --> 00:10:42,560
We can run these three requests we're just testing from a command line you could use postman you could

179
00:10:42,560 --> 00:10:45,260
use Kerl and using each T.T. pi.

180
00:10:45,650 --> 00:10:50,610
That's the wonderful module that you can brew install should pi and you can use it right away.

181
00:10:50,630 --> 00:10:54,440
It's a much cleaner way of worrying about passing and headers and string of information.

182
00:10:54,440 --> 00:10:56,350
It's a really nice way to work with things.

183
00:10:56,810 --> 00:11:02,440
Unfortunately we're not really going to be using each PI to work with our application.

184
00:11:02,450 --> 00:11:07,960
What we need to do next is Connect re-act the router and redox with this back end that we built.

185
00:11:08,060 --> 00:11:13,310
We're going to start a server on 3000 which is going to be our create re-act up and we're going to modify

186
00:11:13,460 --> 00:11:16,120
information on a server with 3000 thousand one.

187
00:11:16,130 --> 00:11:21,210
So we're going to have to introduce communication between our create react up and are no Bakan.

188
00:11:21,260 --> 00:11:22,880
And that's all we'll do in the next video.

189
00:11:23,150 --> 00:11:27,230
But before we start let's go take a quick look at the code we've written here.

190
00:11:27,290 --> 00:11:33,290
We started by bringing in some dependencies express courters remember what horses cross origin resource

191
00:11:33,350 --> 00:11:33,920
sharing.

192
00:11:33,920 --> 00:11:44,210
This allows us to make a request to local host 3000 and one from local localhost 3000 which is going

193
00:11:44,210 --> 00:11:46,270
to be our create re-act up.

194
00:11:46,520 --> 00:11:47,830
Remember these ports are different.

195
00:11:47,870 --> 00:11:53,000
So by default the origin policy which is a security policy on the web says that we cannot make those

196
00:11:53,000 --> 00:11:56,840
requests because we don't want to write any kind of malicious javascript on another domain.

197
00:11:57,080 --> 00:12:03,220
But since we're using cores we enable cross origin requests we enable Ajax requests to be made to this

198
00:12:03,220 --> 00:12:03,830
backend.

199
00:12:04,040 --> 00:12:08,380
We don't have that corps request we're going to get a big error around the same Orjan policy.

200
00:12:08,390 --> 00:12:11,520
We brought in Morgan for some server side logging body parser.

201
00:12:11,540 --> 00:12:16,400
So when we make post requests we can grab our body and then we brought in our Toddie routes.

202
00:12:16,670 --> 00:12:21,220
We use this middleware and we prefix all of our routes with slashed API slashed adieus.

203
00:12:21,350 --> 00:12:25,310
We have a little bit of logic related to error handling in our routes.

204
00:12:25,310 --> 00:12:31,460
We have three endpoints local three 3000 one slash API I-Slash that use get all that to do as opposed

205
00:12:31,550 --> 00:12:33,820
to that same route to create it to do.

206
00:12:33,980 --> 00:12:37,250
And then the final one to delete a to do by.

207
00:12:37,290 --> 00:12:42,980
We're using these nice mongoose methods that we have those mongoose methods come from our mongoose model

208
00:12:43,010 --> 00:12:46,050
right here which has a schema which simply contains a task.

209
00:12:46,070 --> 00:12:47,160
We're going to keep it real simple.

210
00:12:47,180 --> 00:12:53,950
Right now so try to go this back and as well make some requests using curl or using postman or HTC pi.

211
00:12:54,070 --> 00:12:55,490
However you're comfortable with that.

212
00:12:55,540 --> 00:13:00,070
And the next screen cast will put it all together pull the full stack application with some react some

213
00:13:00,070 --> 00:13:06,570
redux and discuss how asynchronous actions can be triggered in redux using a library called P-doc stunk.

214
00:13:06,590 --> 00:13:07,990
See you in the next pre-cast.
