1
00:00:00,240 --> 00:00:05,610
OK so we saw the basics of sending a request with X years and this video I want to talk about how we

2
00:00:05,610 --> 00:00:07,300
handle any potential errors.

3
00:00:07,500 --> 00:00:12,470
So it works kind of the same S.J. query and is fetch but also a little bit different.

4
00:00:12,480 --> 00:00:14,880
So to illustrate this I have an example.

5
00:00:15,060 --> 00:00:19,170
And rather than having you watch me type all the code I already have it completed and we're going to

6
00:00:19,170 --> 00:00:23,320
focus on this code at the bottom a function called handle errors.

7
00:00:23,400 --> 00:00:26,240
But before we get there I might just explain what you're looking at.

8
00:00:26,550 --> 00:00:28,750
So this very ugly silly demo.

9
00:00:28,920 --> 00:00:33,570
It's not going to be very exciting but I have a button when I click the button all that happens is that

10
00:00:33,570 --> 00:00:36,970
I send a request to an API called Jason placeholder.

11
00:00:37,350 --> 00:00:40,970
So this some place holder has a bunch of different endpoints.

12
00:00:41,070 --> 00:00:47,880
Basically it's mocking or modeling data that you might get from a real API whether it's comments data

13
00:00:47,880 --> 00:00:50,740
or posts or photos or to Duzer users.

14
00:00:50,850 --> 00:00:57,370
I'm working with comments and as you can see the data itself is just Lorem Ipsum jibberish.

15
00:00:57,450 --> 00:01:02,110
So it doesn't mean anything but the structure is representative of what comments look like.

16
00:01:02,130 --> 00:01:06,740
There's an ID of the post they belong to a name an email body and so on.

17
00:01:07,080 --> 00:01:09,360
And the route we're actually working with is down here.

18
00:01:09,660 --> 00:01:10,730
Slash comments.

19
00:01:10,860 --> 00:01:13,810
And then as a parameter post ID equals one.

20
00:01:13,830 --> 00:01:19,110
So this gives us all the comments that correspond to a post with idea for one that doesn't really matter.

21
00:01:19,110 --> 00:01:22,420
But I did it just so that I could show you what it actually shows.

22
00:01:22,470 --> 00:01:27,930
You can actually pass in an object and in there I'm specifying post ID is one.

23
00:01:28,050 --> 00:01:38,290
So rather than doing a question mark post ID equals one like that you can do it this way and this might

24
00:01:38,290 --> 00:01:45,610
seem a lot easier putting in the URL until you come to a situation where you want this to be dynamic

25
00:01:45,640 --> 00:01:47,400
and you want this to be a variable.

26
00:01:47,620 --> 00:01:52,440
So you want this to be I no ID and that's set somewhere else by the user.

27
00:01:52,630 --> 00:01:57,500
So rather than hard coding it in even though I am here this gives you a lot more flexibility.

28
00:01:57,650 --> 00:01:59,610
OK but that's not the focus of this video.

29
00:01:59,620 --> 00:02:03,070
What the focus is on is actually handling errors.

30
00:02:03,070 --> 00:02:03,960
So I make a request.

31
00:02:03,970 --> 00:02:10,060
When you click this button all that I'm doing is getting data back and I'm going through the data and

32
00:02:10,060 --> 00:02:16,550
just printing out the emails of the commenters so you can see here nothing brilliant.

33
00:02:16,600 --> 00:02:18,820
And every time I click I'm not even clearing it out.

34
00:02:18,880 --> 00:02:20,010
So it just depends.

35
00:02:20,080 --> 00:02:24,260
Those five e-mails every time but they're coming from the API.

36
00:02:24,730 --> 00:02:27,980
But what I want to talk about is what happens when something goes wrong.

37
00:02:28,180 --> 00:02:30,420
So I moved it to a separate function called handle errors.

38
00:02:30,430 --> 00:02:36,100
It's down here and I want to call your attention to this bit of code here and this bit of code here.

39
00:02:36,310 --> 00:02:42,100
So actually most X distinguish it has a property called airdate response and another one called request

40
00:02:42,370 --> 00:02:47,290
that will allow you to distinguish if the error is happening with the response or with the request.

41
00:02:47,290 --> 00:02:52,710
So suppose you send a response to our route that doesn't exist even though the domain does exist.

42
00:02:52,720 --> 00:03:01,690
There is no slash comments pop up but but if you tried to send a request to that save which one of these

43
00:03:01,690 --> 00:03:05,720
you think will trigger is there an error with the response or the request.

44
00:03:06,190 --> 00:03:07,580
Well let's take a look.

45
00:03:07,660 --> 00:03:11,180
Click the button and you can see it's a problem with the response.

46
00:03:11,230 --> 00:03:16,660
So our request goes to the correct you RL But the server doesn't know how to handle that because it

47
00:03:16,660 --> 00:03:21,700
doesn't actually expect any requests to come to such comments blah blah blah blah blah.

48
00:03:22,210 --> 00:03:30,160
So we get a problem with response which is because we have error response so we could do the same thing

49
00:03:30,520 --> 00:03:34,000
but give it an invalid you URL in the first place like this.

50
00:03:34,730 --> 00:03:38,900
And now if I make that request it's a problem with the request itself.

51
00:03:38,900 --> 00:03:43,760
So this is a nice little feature just this response dot request part of the error.

52
00:03:43,880 --> 00:03:46,470
We're able to determine where things went wrong.

53
00:03:46,700 --> 00:03:48,570
So that's it for error handling.

54
00:03:48,710 --> 00:03:51,060
Of course you don't want to just cancel that log things.

55
00:03:51,230 --> 00:03:55,720
You probably want to display an error to the user or you may want to have some additional logic in here

56
00:03:56,080 --> 00:04:00,940
but I want to focus on the fact that actually access gives us these built in little handlers airdate

57
00:04:00,980 --> 00:04:02,570
response and request.
