WEBVTT
1
00:00:01.140 --> 00:00:07.080
In the last video we saw how to create objects from constructor functions using the new keyword in this

2
00:00:07.080 --> 00:00:07.620
video.

3
00:00:07.620 --> 00:00:12.920
We're going to learn how to use multiple constructor functions without duplicating code.

4
00:00:12.930 --> 00:00:15.020
This material is going to be challenging.

5
00:00:15.120 --> 00:00:20.660
So make sure the watch the video series on closures and the key word this before going forward.

6
00:00:21.150 --> 00:00:26.720
Now let's imagine that we have two constructor functions one for a car and one for a motorcycle.

7
00:00:26.940 --> 00:00:28.520
Here's the code for both of them.

8
00:00:28.740 --> 00:00:33.900
And what we see here is nothing special just some functions that will construct objects using the new

9
00:00:33.900 --> 00:00:37.120
keyboard but what's not great about this code.

10
00:00:37.290 --> 00:00:41.580
Look how much we're duplicating our code in the motorcycle function.

11
00:00:41.700 --> 00:00:46.830
It would be really neat if we could somehow borrow the code from the car function and put it in the

12
00:00:46.830 --> 00:00:48.200
motor cycle function.

13
00:00:48.570 --> 00:00:53.690
So you might be thinking why don't we just call car inside of motorcycle.

14
00:00:53.700 --> 00:00:59.550
The problem here is when we call the car function the key word this refers to the object that will be

15
00:00:59.550 --> 00:01:03.040
created from the car function and that's the wrong thing.

16
00:01:03.360 --> 00:01:09.010
What we want to do here is change the value of the keyword this to be the object created from the motor

17
00:01:09.010 --> 00:01:10.920
cycle function.

18
00:01:10.980 --> 00:01:12.800
So how can we change the value of the keyword.

19
00:01:12.840 --> 00:01:17.270
This Let's go back to our third rule of figuring out the value of the keyword.

20
00:01:17.270 --> 00:01:20.100
This is with the explicit binding.

21
00:01:20.100 --> 00:01:26.520
This means we want to use called apply or bind we can dismiss using bind because we do not want to return

22
00:01:26.520 --> 00:01:30.030
a function definition so let's choose call or apply.

23
00:01:30.200 --> 00:01:35.190
And yet let's look at both and see which one might be a wiser choice as a warning.

24
00:01:35.190 --> 00:01:38.210
The code I'm going to show you can be pretty confusing at first.

25
00:01:38.430 --> 00:01:43.590
So feel free to pause the video try to read it first and maybe even put it in the chrome console and

26
00:01:43.590 --> 00:01:45.330
play around with what's happening.

27
00:01:46.120 --> 00:01:51.490
So the car function looks the same but the fun stuff is happening in the motor cycle function instead

28
00:01:51.490 --> 00:01:53.760
of duplicating code from the car function.

29
00:01:53.890 --> 00:01:59.530
We invoke the car function to change the context of the key word this to be the key word.

30
00:01:59.530 --> 00:02:01.740
That's what does that mean.

31
00:02:01.780 --> 00:02:07.430
Think back to our problem before when we did not use call we lost the correct context of the key word

32
00:02:07.430 --> 00:02:09.880
this the right value of the key word.

33
00:02:09.880 --> 00:02:14.340
This should be whatever object is being created from the motorcycle function.

34
00:02:14.470 --> 00:02:21.560
When the new keyword is used the way we access that object is by using the keyword this that's a bit

35
00:02:21.560 --> 00:02:22.110
confusing.

36
00:02:22.130 --> 00:02:24.110
So let's try to understand it again.

37
00:02:24.470 --> 00:02:27.580
We want to remove duplication from our motorcycle function.

38
00:02:27.950 --> 00:02:32.540
So we essentially borrow the code inside of the car function by calling it.

39
00:02:32.570 --> 00:02:38.180
The problem here is that the keyword this inside of the car function is not the key word that we want

40
00:02:38.180 --> 00:02:38.880
to use.

41
00:02:39.080 --> 00:02:44.950
So we need to change the value of the keyword this when the card function is invoked to do that.

42
00:02:44.990 --> 00:02:51.200
We use call or apply and as the first parameter the caller apply we specify what we would like the value

43
00:02:51.200 --> 00:02:57.650
of the keyword this to be a value that we want the keyword this to be is the object that will be created

44
00:02:57.680 --> 00:03:05.050
from the motorcycle function the way we get access to that object is by using the keyword us.

45
00:03:05.110 --> 00:03:11.200
That's why the first argument to call reply is the keyword this which refers to the object created from

46
00:03:11.200 --> 00:03:12.560
the motorcycle function.

47
00:03:12.640 --> 00:03:18.190
When the new keyword is used if you're still tripped up on this no worries we're doing some pretty advanced

48
00:03:18.190 --> 00:03:19.290
javascript here.

49
00:03:19.490 --> 00:03:20.680
Pause the video.

50
00:03:20.680 --> 00:03:22.090
Try these code examples.

51
00:03:22.090 --> 00:03:28.060
And as always ask us questions that you have so we can use call or we can use apply.

52
00:03:28.100 --> 00:03:33.980
Remember the only difference is the second parameter with apply the second parameter to apply is an

53
00:03:33.980 --> 00:03:40.160
array of arguments that are passed to the function so we can either place make model and year in an

54
00:03:40.160 --> 00:03:44.430
array or we can make use of another special keyword arguments.

55
00:03:44.510 --> 00:03:50.150
You may have seen arguments before but if not arguments is a list of all of the arguments that are passed

56
00:03:50.150 --> 00:03:52.900
to a function it is not technically an array.

57
00:03:53.090 --> 00:03:58.460
But for our purposes you can think of it as one for now here's a quick example using the arguments array

58
00:03:58.460 --> 00:03:59.880
like object.

59
00:03:59.900 --> 00:04:05.500
I'm going to make a function called list arguments which will return the arguments passed to the function.

60
00:04:05.510 --> 00:04:11.240
Now let's call list arguments with one two and three and we'll see we get back in array of the arguments

61
00:04:11.240 --> 00:04:13.250
passed to the function.

62
00:04:13.310 --> 00:04:18.980
Now in our example we can just use arguments instead of listing out make model and year and putting

63
00:04:18.980 --> 00:04:20.310
them in an array.

64
00:04:20.330 --> 00:04:22.010
That's a pretty nice refactor.

65
00:04:22.160 --> 00:04:27.790
We've gone from copying and pasting three lines of our car function to borrowing the car function which

66
00:04:27.790 --> 00:04:32.990
is one line of code in the next video we're going to recap what we learned about constructor functions

67
00:04:33.080 --> 00:04:34.050
and the new keyboard.

68
00:04:34.220 --> 00:04:34.700
See there.
