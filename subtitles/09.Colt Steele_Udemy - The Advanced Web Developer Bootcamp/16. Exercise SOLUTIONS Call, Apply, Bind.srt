1
00:00:00,290 --> 00:00:01,080
Welcome back.

2
00:00:01,080 --> 00:00:06,110
In this video we're going to be going over solutions to the call apply and bind exercises.

3
00:00:06,210 --> 00:00:11,490
The first function we're going to implement is called array from which accepts an array like object.

4
00:00:11,550 --> 00:00:17,540
Here we're going to return the result of invoking the slice method but using dot call so that the target

5
00:00:17,540 --> 00:00:20,980
of slice is not the array but the array like object.

6
00:00:21,180 --> 00:00:24,230
We can return this value and that's it.

7
00:00:24,300 --> 00:00:27,720
The next function we're going to implement is some even arguments.

8
00:00:27,720 --> 00:00:32,640
The first thing we can do is make a variable which is the result of converting the arguments array like

9
00:00:32,670 --> 00:00:34,160
object into an array.

10
00:00:34,380 --> 00:00:38,260
You could even use your array from function that we just implemented.

11
00:00:38,460 --> 00:00:43,890
Once we've converted the arguments array like object into an array you can call reduce on this array

12
00:00:44,190 --> 00:00:49,950
and incited the callback to reduce check and see if the next value is divisible by 2 and if it is will

13
00:00:49,950 --> 00:00:52,630
return the accumulator Plus the next value.

14
00:00:52,650 --> 00:00:58,530
Otherwise we'll just return the accumulator and make sure that we start a zero for a next function invoke

15
00:00:58,530 --> 00:00:59,340
Max.

16
00:00:59,340 --> 00:01:03,020
We accept some other function and a number of times that it can be called.

17
00:01:03,240 --> 00:01:08,940
The first thing we'll do is declare a variable called Max and assign it to zero will then return another

18
00:01:08,940 --> 00:01:09,630
function.

19
00:01:09,900 --> 00:01:14,370
We're going to be using closure to solve this problem inside of the inner function.

20
00:01:14,370 --> 00:01:19,990
We'll check and see if Max is greater or equal to the number that we passed in to invoke Max.

21
00:01:20,130 --> 00:01:26,760
And if so we'll return the string next out if not we'll increment max by 1 and then return the result

22
00:01:26,760 --> 00:01:29,190
of the function being called with apply.

23
00:01:29,340 --> 00:01:31,320
We don't care about the value of the keyword this.

24
00:01:31,350 --> 00:01:34,170
So we'll just pass in whatever the value of the keyword this is.

25
00:01:34,170 --> 00:01:35,080
At that time.

26
00:01:35,430 --> 00:01:40,860
But we do want to use apply so that we can pass in the array of arguments to the inner function.

27
00:01:40,860 --> 00:01:46,980
Remember arguments for to the arguments passed to the inner function when it is invoked every time a

28
00:01:46,980 --> 00:01:48,090
function gets created.

29
00:01:48,090 --> 00:01:53,700
He gets his own key word this and it's own arguments for the next function once we're going to pass

30
00:01:53,700 --> 00:01:59,580
in a function and some value for the key word this will declare a variable has been called and assign

31
00:01:59,580 --> 00:02:02,040
it to false and then return a function.

32
00:02:02,160 --> 00:02:05,510
Once again we'll be using closures here in the inner function.

33
00:02:05,520 --> 00:02:11,250
We'll check and see if has been called is false and if it is we will set it to True and return the result

34
00:02:11,250 --> 00:02:15,930
of the function that we pass to once invoked using apply here.

35
00:02:15,930 --> 00:02:21,510
We can specify the value of the keyword this and pass in the arguments array like object from the inner

36
00:02:21,510 --> 00:02:22,060
function.

37
00:02:23,010 --> 00:02:25,950
Here's where things get fun for the next function bind.

38
00:02:25,950 --> 00:02:29,460
We're going to pass in some function and some value for the key word.

39
00:02:29,460 --> 00:02:35,430
This first thing we're going to do is create a variable called outer arcs which is the result of the

40
00:02:35,430 --> 00:02:41,630
arguments array like object being converted into an array or going to do here is pass a parameter to

41
00:02:41,640 --> 00:02:42,660
slice.

42
00:02:42,660 --> 00:02:47,100
We want to collect the remaining arguments that get passed to the bind function.

43
00:02:47,160 --> 00:02:50,440
We don't want the first parameter or the second parameter.

44
00:02:50,460 --> 00:02:52,550
We just want any remaining ones.

45
00:02:52,890 --> 00:02:57,570
We're then going to return a function and inside of this inner function we'll make a variable called

46
00:02:57,630 --> 00:03:03,550
Inner arcs which is the result of converting the arguments array like object into an array.

47
00:03:03,590 --> 00:03:09,180
What will then do is make a variable called all arcs or we will concatenate the outer args with the

48
00:03:09,210 --> 00:03:10,290
inner arcs.

49
00:03:10,290 --> 00:03:15,490
The idea here is to build up one large array of arguments which we can pass to apply.

50
00:03:15,510 --> 00:03:20,520
So on the next line of this function we're going to return the result of the original function being

51
00:03:20,520 --> 00:03:24,700
invoked with apply as the first parameter and passing in for the value of the key word.

52
00:03:24,700 --> 00:03:27,180
This our second parameter toboggans.

53
00:03:27,480 --> 00:03:33,450
And then as an array of arguments passing in both the outer and inner ones for a last function Phlip

54
00:03:33,720 --> 00:03:36,710
we're going to accept a parameter and some value for the keyword.

55
00:03:36,710 --> 00:03:38,250
This just like bind.

56
00:03:38,250 --> 00:03:43,350
We're going to collect the remaining arguments passed to flit by converting the array like arguments

57
00:03:43,560 --> 00:03:46,330
into an array and slicing from two.

58
00:03:46,650 --> 00:03:51,090
We're then going to return an anonymous function and inside of this function we'll make a variable called

59
00:03:51,120 --> 00:03:53,890
Inner args just like we did with byde.

60
00:03:54,360 --> 00:03:59,290
However we want to make sure that we invoke our function with only the number of parameters specified.

61
00:03:59,430 --> 00:04:02,540
Since we're going to be calling the arguments in reverse.

62
00:04:02,700 --> 00:04:08,730
So in our all args variable we will concatenate the outer args with the inner parks but we're only going

63
00:04:08,730 --> 00:04:14,690
to make a copy starting from 0 to however many parameters of the function that we pass to flip.

64
00:04:14,750 --> 00:04:21,360
Except this part is hard but all functions actually have a property called length which return the number

65
00:04:21,360 --> 00:04:23,530
of arguments that the function accepts.

66
00:04:23,700 --> 00:04:29,040
We can use the land to figure out exactly how many parameters are all args arrays should include.

67
00:04:29,070 --> 00:04:34,980
Finally we can return the result of invoking the function using apply and as a first parameter specifying

68
00:04:35,010 --> 00:04:39,890
a value for the key word this which we passed in the flip function and as the second parameter will

69
00:04:39,900 --> 00:04:46,640
use are all args variable we'll just have to make sure that we call reverse on are all args variable.

70
00:04:46,710 --> 00:04:48,160
These problems are quite challenging.

71
00:04:48,180 --> 00:04:51,520
So if you couldn't solve them all go back and see if you can try it again.

72
00:04:51,540 --> 00:04:54,760
Feel free to let us know if you get stuck and we'll see you in the next video.
