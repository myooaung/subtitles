WEBVTT
1
00:00:01.080 --> 00:00:01.710
Welcome back.

2
00:00:01.710 --> 00:00:04.050
Now let's talk about a solution to this problem.

3
00:00:06.880 --> 00:00:10.150
So I've created a new copy of that project.

4
00:00:10.240 --> 00:00:15.830
If you notice here update state was our starter code and then update will update complex.

5
00:00:15.850 --> 00:00:21.960
Was our starter code update complex state solution is where I'm going to put the solution.

6
00:00:22.810 --> 00:00:25.360
And if you recall our app just looks like this.

7
00:00:25.360 --> 00:00:31.230
We've got four instructors all each have their own hobby's array and they're just displaying the hobbies.

8
00:00:31.300 --> 00:00:37.270
And our goal is to randomly remove one of the hobbies from one randomly chosen instructor after five

9
00:00:37.270 --> 00:00:37.940
seconds.

10
00:00:40.060 --> 00:00:43.480
So I'll start off by creating my set time out in my constructor.

11
00:00:52.720 --> 00:00:55.450
And remember it's important that this is an arrow function.

12
00:00:55.450 --> 00:01:00.930
When we use this set state this should be an arrow function.

13
00:01:00.940 --> 00:01:04.030
Otherwise the keyword this can change.

14
00:01:04.030 --> 00:01:09.550
Remember one of the properties of Arrow functions is that this is preserved from the surrounding scope

15
00:01:09.830 --> 00:01:11.380
and in the surrounding scope.

16
00:01:11.380 --> 00:01:12.640
This refers to map

17
00:01:15.590 --> 00:01:18.820
well let's not forget five seconds.

18
00:01:22.480 --> 00:01:24.550
Now in this function I want to do two things.

19
00:01:24.580 --> 00:01:27.910
First I want to find a random instructor out of my instructor's array.

20
00:01:27.910 --> 00:01:29.470
So I'll do that.

21
00:01:29.470 --> 00:01:47.630
How do I access that constructors array it's this state that instructors.

22
00:01:47.840 --> 00:01:51.290
Now I've got my randomly chosen instructor index.

23
00:01:51.410 --> 00:02:08.410
Next I need to choose a random Havi from within that array of hobby's for that instructor.

24
00:02:08.430 --> 00:02:11.850
Now I've got my random instr. index in my random hobby index.

25
00:02:11.970 --> 00:02:14.760
All that's left now is updating the state.

26
00:02:15.960 --> 00:02:18.360
So there's a couple of approaches we could take at this point.

27
00:02:18.360 --> 00:02:20.780
First I'm going to start off by showing something that's wrong.

28
00:02:20.940 --> 00:02:22.710
So this is not the solution.

29
00:02:22.710 --> 00:02:28.080
Do not do this but I just want to clarify some some common pitfalls that people have when they're updating

30
00:02:28.080 --> 00:02:32.250
state.

31
00:02:32.320 --> 00:02:38.950
So one approach you might've taken was to first slice that array which gives us a copy so I can say

32
00:02:39.760 --> 00:02:43.740
my new instructor's array is equal to this dot state.

33
00:02:43.750 --> 00:02:50.630
Instructors that slice.

34
00:02:51.010 --> 00:02:52.680
So now this is a brand new array.

35
00:02:52.910 --> 00:02:55.270
And we have it modified the start state at all.

36
00:02:55.280 --> 00:02:56.530
So this is a good start.

37
00:02:56.870 --> 00:03:05.260
But say you did something like this next.

38
00:03:05.620 --> 00:03:07.270
What does this do.

39
00:03:07.270 --> 00:03:12.520
It gets our instructor out of the instructor's array it access at the hobby's array for that instructor

40
00:03:12.880 --> 00:03:17.920
and then it calls splice on it and splice is a function you basically never want to use when you're

41
00:03:17.920 --> 00:03:26.560
modifying state because splice modifies the original array and remember even though we've made a copy

42
00:03:26.560 --> 00:03:32.650
of our outer array This isn't a deep copy slice just gives us a new array with all the same elements

43
00:03:32.650 --> 00:03:33.690
inside.

44
00:03:33.700 --> 00:03:40.930
So this object that I'm accessing inside of my instructors array is still the same state and so this

45
00:03:40.930 --> 00:03:43.720
code right here is modifying or state.

46
00:03:43.810 --> 00:03:44.950
This is a big no no.

47
00:03:44.950 --> 00:03:47.520
Do not ever mess with state.

48
00:03:48.550 --> 00:03:51.580
So what's a better way to do this.

49
00:03:51.580 --> 00:03:53.530
Well first remove this incorrect code

50
00:03:58.950 --> 00:04:04.680
and then one approach I could take would be to make a copy of that object that I want to mutate so I'll

51
00:04:04.680 --> 00:04:18.000
do that with objects that assign.

52
00:04:18.280 --> 00:04:22.350
So what I've done here is I've just created a copy of that object.

53
00:04:22.370 --> 00:04:25.710
So now the reference here is a different object.

54
00:04:25.710 --> 00:04:29.830
I remember this array is our own array so it's OK to modify that array.

55
00:04:30.140 --> 00:04:36.740
And we've still have modified state we just made a copy of this object into a new object that we can

56
00:04:36.740 --> 00:04:40.830
then mess around with.

57
00:04:40.930 --> 00:04:41.860
Now that we've done that

58
00:04:44.810 --> 00:04:48.010
actually let me make this slightly bigger.

59
00:04:49.130 --> 00:04:55.550
OK now that we've done that the next step would be to modify just that hobby's array.

60
00:05:02.700 --> 00:05:08.970
And even though we've made a copy of this instructor's objects remember the array that we're referencing

61
00:05:08.970 --> 00:05:12.730
inside that object still is the original array.

62
00:05:12.780 --> 00:05:15.030
So we need to make a copy of that as well.

63
00:05:20.750 --> 00:05:28.460
All right now we have a new copy of that hobby's array we've gotten rid of the old version excuse me

64
00:05:28.460 --> 00:05:32.540
we haven't gotten rid of the old version we just haven't modified the original version.

65
00:05:32.570 --> 00:05:40.800
So now this slice is generating a new array that we can then use.

66
00:05:41.000 --> 00:05:48.170
And finally we can use splice now because all the data that we have inside this instr. instance is our

67
00:05:48.170 --> 00:05:51.270
new version of the old data.

68
00:05:51.920 --> 00:06:05.540
So I'll do instructors of Rand instructor dot Hobbes dot splice of Havi index and one

69
00:06:10.520 --> 00:06:11.780
OK that should do it.

70
00:06:11.780 --> 00:06:13.510
Now the last step is to use that state

71
00:06:17.430 --> 00:06:22.350
and just like we've seen before since this key is also called instructors and we've got this instructor's

72
00:06:22.350 --> 00:06:23.170
variable.

73
00:06:23.250 --> 00:06:27.630
I can just use the shorthand notation I don't have to break it out.

74
00:06:28.770 --> 00:06:31.470
OK let's see if this actually works.

75
00:06:37.080 --> 00:06:45.240
And there we go after five seconds we've randomly chosen Tim and Tim randomly last sailing.

76
00:06:45.300 --> 00:06:46.650
So if I refresh this page

77
00:06:52.610 --> 00:06:56.270
all right now we've seen a different one called last one of his hobbies.

78
00:06:56.270 --> 00:07:01.320
I think it was SS So this code works.

79
00:07:01.490 --> 00:07:02.690
It makes sense.

80
00:07:02.750 --> 00:07:08.630
It's quite complicated though there's lots of follow here so I'm going to show a different approach

81
00:07:08.630 --> 00:07:13.670
for solving this problem which I think is a little easier using the object spread operator.

82
00:07:14.240 --> 00:07:21.440
So start by commenting this out so we can compare and the first thing I'll do is rather than slice this

83
00:07:21.440 --> 00:07:22.940
Ray I'll use map

84
00:07:28.320 --> 00:07:32.190
and remember map returns a new array it doesn't modify the original array.

85
00:07:32.400 --> 00:07:37.780
So are our rules here we'll still apply that state will not get modified directly.

86
00:07:37.980 --> 00:07:42.740
And then inside of this map I just wanna do a simple check to see if I found the instructor that I'm

87
00:07:42.750 --> 00:07:43.600
looking for.

88
00:07:43.860 --> 00:07:48.030
So if I is equal to my random instructor

89
00:07:50.700 --> 00:07:52.050
then I want to return

90
00:07:55.210 --> 00:07:56.220
a new objects

91
00:07:59.540 --> 00:08:00.910
will fill us in in a second.

92
00:08:00.990 --> 00:08:08.640
But if it's not equal to my random instructor then I just want to return that original instructor right.

93
00:08:08.660 --> 00:08:11.000
Nothing's changed and we don't need to create a copy.

94
00:08:11.090 --> 00:08:14.040
We'll just save the original data here.

95
00:08:15.050 --> 00:08:17.000
Oh and let me make one more change.

96
00:08:17.240 --> 00:08:24.870
I want to get rid of the curly braces so I don't have to do the return statement so the index that we're

97
00:08:24.870 --> 00:08:27.610
at is equal to my instructor index.

98
00:08:27.650 --> 00:08:33.800
Then I want to return to New objects and I want to keep all the keys in that objects so I'll use the

99
00:08:33.800 --> 00:08:36.840
spread operator here.

100
00:08:36.890 --> 00:08:39.710
So now we've spread out the keys.

101
00:08:39.710 --> 00:08:40.750
We only have two here.

102
00:08:40.760 --> 00:08:45.560
But for the sake of correctness we'll just spread those out and then the key that I want to overwrite

103
00:08:45.620 --> 00:08:51.920
is hobbies and hobbies will be equal to a new array that all.

104
00:08:51.920 --> 00:09:01.060
Then again you'd spread with tsunamis a combination of concat and slice to get my desired behavior.

105
00:09:01.310 --> 00:09:06.100
So first I'll slice this from 0 to our hobby index

106
00:09:09.220 --> 00:09:20.920
and then I'll Concat.

107
00:09:21.050 --> 00:09:22.610
So there we go that should work.

108
00:09:22.610 --> 00:09:29.850
Now we are slicing the hobby's array to get a copy but only the beginning and then we're going to call

109
00:09:29.850 --> 00:09:34.850
concat on that with the rest of our hobbies.

110
00:09:34.850 --> 00:09:39.060
Now this is getting a little complicated for my taste so let's simplify all.

111
00:09:39.110 --> 00:09:45.520
Bring back my curly braces and I'll do this code outside of our spread.

112
00:09:45.620 --> 00:09:48.490
So out here I want to say

113
00:09:53.130 --> 00:09:56.430
so now I have a copy of my hobbies array.

114
00:09:56.670 --> 00:10:17.000
In fact let's refactor this altogether to not use the ternary operator.

115
00:10:17.690 --> 00:10:19.480
There we go I like this solution much better.

116
00:10:19.490 --> 00:10:24.880
So it's clean that up and talk about it.

117
00:10:25.880 --> 00:10:27.440
OK so what's going on here.

118
00:10:27.800 --> 00:10:33.590
Well if the index that we're on is equal to the instructor that we want to modify that's when we actually

119
00:10:33.590 --> 00:10:34.520
do some work.

120
00:10:34.580 --> 00:10:38.070
If that's not the case we just return that original instructor.

121
00:10:38.150 --> 00:10:41.940
So nothing has changed about that state so there's no need to make a copy.

122
00:10:41.960 --> 00:10:43.750
We'll just keep the original state.

123
00:10:44.000 --> 00:10:50.030
But if this is the state that we want to change if this is the correct instructor then we'll make a

124
00:10:50.030 --> 00:10:54.840
copy of that instr. array by using instr. hobbies that slice.

125
00:10:54.860 --> 00:11:02.700
We can also write this as a spread.

126
00:11:03.110 --> 00:11:07.840
So now that we have that copy of the hobby's array we can use splice on it.

127
00:11:08.060 --> 00:11:14.060
So I'll just splice out the one that I don't want and then I'll return a new object which is the spread

128
00:11:14.060 --> 00:11:21.680
of whatever instr. has plus the hobby's array that we just copied and modified and that should do it.

129
00:11:21.680 --> 00:11:27.140
Now we have everything that's going on over here except in a much much simpler form.

130
00:11:27.230 --> 00:11:27.890
Using map

131
00:11:30.860 --> 00:11:36.350
and the last piece of code that we need to keep is this that set say and we want to save that instructor's

132
00:11:36.350 --> 00:11:38.460
array which we did up here.

133
00:11:38.540 --> 00:11:46.300
So let's get rid of that code and let's check to make sure this all works.

134
00:11:46.480 --> 00:11:48.550
All right we are move sailing again.

135
00:11:48.550 --> 00:11:51.310
It just goes to show you that random is not too random in javascript

136
00:11:54.280 --> 00:11:57.070
and this time we lost CSSA from cold.

137
00:11:57.100 --> 00:11:58.780
All right that's it.

138
00:11:58.870 --> 00:12:01.360
So I hope that was educational.

139
00:12:01.360 --> 00:12:04.480
Next up we'll talk about some more state concepts.
