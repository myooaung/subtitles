WEBVTT
1
00:00:00.140 --> 00:00:05.220
You'll get so in the last section we saw how to build a case on API using Express.

2
00:00:05.220 --> 00:00:09.010
Now we're going to see how to build something on top of our own space on API.

3
00:00:09.180 --> 00:00:10.500
So we have to do API.

4
00:00:10.650 --> 00:00:13.040
Now we're going to put it together with AJAX.

5
00:00:13.080 --> 00:00:17.840
We'll be using Jake Weary but we could use fetcher X-posts or ex-aide char's J queries.

6
00:00:17.850 --> 00:00:23.280
Easiest for what we're going to do though which is to build a simple to do list app on top of the to

7
00:00:23.280 --> 00:00:24.110
do API.

8
00:00:24.200 --> 00:00:29.100
And this video will just do a quick overview of functionality and if the requests that are being generated

9
00:00:29.220 --> 00:00:34.860
and when they're being sent and then after this will dive into actually creating the code writing each

10
00:00:34.860 --> 00:00:38.170
team will see assess and most importantly our AJAX calls.

11
00:00:38.170 --> 00:00:40.830
OK so here we have some super basic styles.

12
00:00:40.920 --> 00:00:42.480
Nothing spectacular.

13
00:00:42.480 --> 00:00:46.920
The first thing I'll point out is that we're actually on the exact same server.

14
00:00:47.220 --> 00:00:52.390
So if I go to a sash API slash to Dewes we get the adjacent data from the API.

15
00:00:52.770 --> 00:00:55.690
And if I just go to the root route I'm actually getting content.

16
00:00:55.710 --> 00:01:02.440
So our app is going to serve both based on content and static age Tim I'll file the one we see here.

17
00:01:02.610 --> 00:01:05.880
So the first thing you should notice there's a list to use that are here already.

18
00:01:05.880 --> 00:01:09.300
Every time I refresh the page these are coming from the database.

19
00:01:09.360 --> 00:01:17.300
So when the page loads it open up the Network tab look at our exit char's you can see all fresh former

20
00:01:17.300 --> 00:01:19.190
times you can see it appear.

21
00:01:19.430 --> 00:01:26.600
This request is generated which if we look at it is going to slash API slash to use as a get request

22
00:01:26.990 --> 00:01:33.110
so that's loading hard data and then we can do something like let's say add a new request and I'll keep

23
00:01:33.110 --> 00:01:37.300
this open here just so that we can see the requests as they're sent.

24
00:01:37.310 --> 00:01:41.550
So let's see Renwick's hero bake wedding cake hire deejay find a wife.

25
00:01:41.630 --> 00:01:46.920
How about hire caterers caterers caterer.

26
00:01:47.020 --> 00:01:47.820
OK.

27
00:01:48.170 --> 00:01:48.950
Hit enter.

28
00:01:48.980 --> 00:01:49.600
There's no button.

29
00:01:49.610 --> 00:01:50.520
We just hit enter.

30
00:01:50.690 --> 00:01:57.550
And if we look at our request for you it it sent to slash API slash to use as a post.

31
00:01:58.070 --> 00:02:00.140
So we're using that second point.

32
00:02:00.590 --> 00:02:04.000
Likewise if I click on one of these it's actually going to update it.

33
00:02:04.010 --> 00:02:11.040
So on the view what we see is it will look like it's crossed out but actually it will send a request.

34
00:02:11.210 --> 00:02:20.260
You can see here to slash API slash to do slash the giant You are the the giant ID as a put request.

35
00:02:20.580 --> 00:02:24.040
And if we actually look at the body it contains completed.

36
00:02:24.120 --> 00:02:31.680
True and if I do it again and look at that new one it contains completed faults and then finally if

37
00:02:31.680 --> 00:02:36.310
we go over here we can click on the X that appears when we hover to delete one of them.

38
00:02:36.480 --> 00:02:38.760
So let's say I found a caver.

39
00:02:38.880 --> 00:02:39.780
Now it's gone.

40
00:02:39.780 --> 00:02:41.940
I refresh the page and it's gone.

41
00:02:41.940 --> 00:02:46.790
So I want to be clear that this is something that's supported by a database in our API.

42
00:02:46.890 --> 00:02:48.540
We have some permanence behind our data.

43
00:02:48.540 --> 00:02:52.800
So if I update things they stay updated until I change that.

44
00:02:52.800 --> 00:02:56.760
So there's the basic functionality we'll be using a query to make things easier.

45
00:02:56.850 --> 00:03:02.220
But before we can actually get there we have to set up our express app to serve static content.

46
00:03:02.430 --> 00:03:03.870
How do we get it to respond with.

47
00:03:03.930 --> 00:03:07.050
Tim LCAC s and Javascript rather than treason.

48
00:03:07.290 --> 00:03:08.110
So that's next.
