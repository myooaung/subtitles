1
00:00:00,390 --> 00:00:01,530
Welcome back.

2
00:00:01,710 --> 00:00:06,600
We've learned a lot about forced directed graphs but so far we haven't been able to apply what we've

3
00:00:06,600 --> 00:00:08,440
learned to a real world data set.

4
00:00:09,230 --> 00:00:14,480
In this video we'll dig into a data set for an actual network along the way.

5
00:00:14,480 --> 00:00:18,570
We'll also see how to update our simulation if the number of nodes changes.

6
00:00:18,860 --> 00:00:20,880
Here's a link to some starter code.

7
00:00:21,170 --> 00:00:27,590
As you can see I've already thrown together some HVM elenchi SS in the app genius.

8
00:00:27,640 --> 00:00:33,480
He's in D-3 that cxxviii to grab some ESV data on United States senators.

9
00:00:33,530 --> 00:00:39,900
There are 100 senators in the United States most of whom are either Democrat or Republican this data

10
00:00:39,900 --> 00:00:45,930
from 20:17 highlights which senators are on different committees one in one of the committee Gollum's

11
00:00:45,990 --> 00:00:48,930
indicates that a senator is on that committee.

12
00:00:48,930 --> 00:00:53,730
I'd like to visualize this data as a force directed graph in order to see what the relationships are

13
00:00:53,730 --> 00:00:56,340
between senators on these committees.

14
00:00:56,340 --> 00:01:01,470
I'd also like to toggle which committees I care about and have the graph only show senators from those

15
00:01:01,470 --> 00:01:03,240
committees.

16
00:01:03,260 --> 00:01:05,400
This will involve the general update pattern.

17
00:01:05,600 --> 00:01:10,840
Since I'll need to add or remove nodes and links based on the committees I've selected.

18
00:01:10,850 --> 00:01:15,400
First though let's just get all of our data showing up on the page.

19
00:01:15,410 --> 00:01:20,900
Notice that I'm formatting this data so that each node has the name of the senator their party and a

20
00:01:20,900 --> 00:01:23,290
list of the committees their own.

21
00:01:23,350 --> 00:01:26,070
I can get all of the committees without too much trouble.

22
00:01:26,410 --> 00:01:31,390
Remember that the third argument in the form matter is an array of all the CSP headers.

23
00:01:31,780 --> 00:01:34,050
The first and second header are named party.

24
00:01:34,180 --> 00:01:37,220
But after that the remaining headers are all committee names.

25
00:01:38,280 --> 00:01:43,250
This filter gives me an array of committees for each senator.

26
00:01:43,440 --> 00:01:48,700
One of the challenges was building a force directed graphs that you'll rarely find both Noad and link

27
00:01:48,700 --> 00:01:50,390
data readily available.

28
00:01:51,110 --> 00:01:54,900
Instead you often need to generate one of these sets of data yourself.

29
00:01:55,760 --> 00:02:01,640
In this case I've got data on the nodes from this ESV but I don't have an explicit Lincs array consisting

30
00:02:01,640 --> 00:02:04,580
of objects with source and target properties.

31
00:02:04,580 --> 00:02:09,500
So the first thing I'll do is write a function called make links that will take in my array of nodes

32
00:02:09,680 --> 00:02:15,000
and generate the appropriate link structure for the simulation in order to generate links.

33
00:02:15,010 --> 00:02:21,040
I'll first create an empty WINX array then I'll write a double for loop over my nodes so that I can

34
00:02:21,040 --> 00:02:24,790
look at every pair of senators inside this nested loop.

35
00:02:24,850 --> 00:02:30,520
I'll store each node in a variable and then look over all of the committees in the first note if any

36
00:02:30,520 --> 00:02:33,440
one of those committees is also in the second nodes list.

37
00:02:33,610 --> 00:02:39,060
Then that means these two senators are on a committee together and I should create a link.

38
00:02:39,150 --> 00:02:44,090
I only need to create the link once even if the senators are on more than one committee together.

39
00:02:44,160 --> 00:02:47,540
So after this I can break out of the innermost loop.

40
00:02:47,550 --> 00:02:53,400
Finally I want to return miling Saray let's console log the return value to make sure this looks good

41
00:02:55,330 --> 00:02:58,900
as you can see there are over 1000 links.

42
00:02:58,910 --> 00:03:01,240
This is something you'll need to watch out for.

43
00:03:01,310 --> 00:03:06,770
In general the number of links can be very large compared to the number of nodes in the worst case where

44
00:03:06,770 --> 00:03:08,790
every node is joined to every other node.

45
00:03:08,990 --> 00:03:15,090
The number of links is roughly proportional to the square of the number of nodes.

46
00:03:15,100 --> 00:03:20,010
Now that I've got my nodes in my links I'll set up the force directed graph.

47
00:03:20,020 --> 00:03:23,840
This is something we've done before so I'll move a little more quickly here.

48
00:03:23,950 --> 00:03:30,200
First I'll store my links in a variable then I'll set up my SPG in the usual way.

49
00:03:30,230 --> 00:03:33,630
I'll also create groups for my links in my notes.

50
00:03:33,740 --> 00:03:36,940
Next I'll start my simulation by passing in my nodes.

51
00:03:37,100 --> 00:03:40,630
Adding a center force of many body force and a linked force

52
00:03:44,630 --> 00:03:50,450
I'll make the many body force stronger than the default and to help spread out the nodes all increase

53
00:03:50,450 --> 00:03:58,290
the distance property for links to senators that are on multiple committees.

54
00:03:58,300 --> 00:04:03,300
I also need to specify that the senator's name should be used as the ID for the link.

55
00:04:03,310 --> 00:04:08,050
After that I'll need to use the same pattern that we saw before inside of the event handler for tick

56
00:04:08,050 --> 00:04:13,990
events on the simulation after each tick only to update the position of each line in the linked group

57
00:04:14,290 --> 00:04:17,570
and each circle in the node group.

58
00:04:17,600 --> 00:04:19,820
This should take care of the simulation.

59
00:04:19,820 --> 00:04:25,090
Next let's write out the code we'll need to get these SVGA elements to show up on the page.

60
00:04:25,170 --> 00:04:30,210
Since I'll be using the general update pattern I'll write a general function called graph which takes

61
00:04:30,210 --> 00:04:34,690
in an array of nodes and an array of links inside of this function.

62
00:04:34,690 --> 00:04:37,320
I'll first generate a color scale for my notes.

63
00:04:37,350 --> 00:04:43,820
Democrats will be blue Republicans will be red and I'll make independents Gray next.

64
00:04:43,830 --> 00:04:48,750
I'll use the general update pattern for nodes and links only to use key functions here.

65
00:04:48,750 --> 00:04:54,450
Since I'll be adding and removing elements based on the committees I care about for node's I can use

66
00:04:54,450 --> 00:04:56,610
the senator's name as the key.

67
00:04:56,610 --> 00:05:02,810
Then I'll paste in cover the update pattern we've seen so often before I'll do the same thing with links.

68
00:05:02,870 --> 00:05:04,920
Though there's no styling on me to do here.

69
00:05:05,950 --> 00:05:11,440
Note also what I'm using is the key oinks target may not be unique but the combination of target name

70
00:05:11,440 --> 00:05:17,780
and source name will be let me call this graph function and pass in my data.

71
00:05:17,780 --> 00:05:24,200
Now when I save and refresh my nodes are showing up great before adding functionality to add or remove

72
00:05:24,200 --> 00:05:24,670
nodes.

73
00:05:24,710 --> 00:05:29,860
Let me quickly add the drag functionality we saw previously as well as an tooltip logic.

74
00:05:29,990 --> 00:05:31,700
I'll just paste in this code.

75
00:05:31,700 --> 00:05:36,500
The drag and drop is the same as we saw on the last video and the tooltip logic is very similar to what

76
00:05:36,500 --> 00:05:38,390
we've seen before too.

77
00:05:38,480 --> 00:05:41,320
The biggest change to the tooltip code is in the rendered page.

78
00:05:41,320 --> 00:05:47,100
Now here I am creating an ordered list of all the committees that a senator is on let's save saving

79
00:05:47,100 --> 00:05:49,160
refresh good.

80
00:05:49,170 --> 00:05:52,010
It looks like this is a working.

81
00:05:52,080 --> 00:05:54,360
Now let's do something we haven't done before.

82
00:05:54,490 --> 00:05:58,670
Had the ability to update the number of nodes and links in the simulation.

83
00:05:58,680 --> 00:06:02,970
What I'd like to do is add a bunch of checkboxes to the page one for each committee.

84
00:06:03,390 --> 00:06:07,920
Initially all of the committees will be checked but if a user unchecked one of the committees I want

85
00:06:07,920 --> 00:06:13,500
to ignore that committee from the visualization and remove any nodes or links based on that committee

86
00:06:14,820 --> 00:06:20,420
do this or write a function called set up checkboxes this function will take an array of committee names

87
00:06:20,630 --> 00:06:25,910
and they will generate the checkboxes on that page as well as manage the event handling for clicks on

88
00:06:25,910 --> 00:06:27,000
the checkboxes.

89
00:06:28,070 --> 00:06:30,550
First let me build all of the checkboxes.

90
00:06:30,830 --> 00:06:37,010
I could do this by hardcoded TNL but assuming I already have a list of committee names I can also just

91
00:06:37,010 --> 00:06:43,470
select my checkboxes div make an M.D. selection join to my array of committees and append.

92
00:06:43,520 --> 00:06:48,980
I store the selection in a variable because I need to use it twice once to make labels for the checkboxes

93
00:06:49,280 --> 00:06:54,780
and once to make the checkboxes themselves for the checkboxes.

94
00:06:54,780 --> 00:06:59,040
I'll give them all a name property of committee and a value based on the data.

95
00:06:59,100 --> 00:07:03,720
They'll all start out as checked but the click handler is where the real complexity lies.

96
00:07:04,740 --> 00:07:09,120
When someone clicks on a checkbox I'll use a filter to grab an array of all committees that are currently

97
00:07:09,120 --> 00:07:09,660
checked.

98
00:07:10,470 --> 00:07:15,630
Then I'll map over my nodes and return a new collection of nodes where each senator has list of committees

99
00:07:15,690 --> 00:07:18,690
only includes the ones that are checked.

100
00:07:18,700 --> 00:07:23,790
I could use an object that to sign here for now I'll keep things simple.

101
00:07:23,830 --> 00:07:27,430
Note that I also need to carry over the properties from the simulation.

102
00:07:27,430 --> 00:07:32,300
Otherwise the animation won't be smooth when I click on a checkbox.

103
00:07:32,490 --> 00:07:37,380
Once I have this new collection of nodes I'll filter over it to remove any senators that are only on

104
00:07:37,380 --> 00:07:39,940
the committees that have been unchecked.

105
00:07:40,070 --> 00:07:44,830
Then I'll create a new set of links based on these new notes.

106
00:07:44,850 --> 00:07:46,860
After that I'll update the graph.

107
00:07:47,190 --> 00:07:54,390
Then I'll call my setup checkboxes function and passing the columns for my nodes ignoring name and party.

108
00:07:54,390 --> 00:08:02,560
Note that you get this column's property for free whenever you import data from CXXVI using D-3.

109
00:08:02,610 --> 00:08:04,280
I haven't quite done enough.

110
00:08:04,510 --> 00:08:07,960
The simulation breaks when I update the graph alone.

111
00:08:08,000 --> 00:08:14,340
I also need to update the simulation by passing in the new nodes and the new links after that.

112
00:08:14,390 --> 00:08:21,750
Also warm up the simulation a bit so that the nodes will rearrange themselves based on the new forces.

113
00:08:21,820 --> 00:08:23,110
Let's save and try again.

114
00:08:24,530 --> 00:08:27,810
Now you can see that if I want to ignore certain committees I can.

115
00:08:27,940 --> 00:08:31,660
The simulation will update based only on the committees I'm interested in.

116
00:08:32,760 --> 00:08:38,220
I haven't added any transitions here or any visual cues for the committees and the styling of the page

117
00:08:38,220 --> 00:08:39,930
is definitely a bit lacking.

118
00:08:40,410 --> 00:08:45,150
So there's more work to do here if you'd like to continue working on this visualization when you're

119
00:08:45,150 --> 00:08:45,830
ready.

120
00:08:45,840 --> 00:08:50,640
Feel free to move on to the final project where you can continue to build on your understanding of the

121
00:08:50,640 --> 00:08:53,790
advanced graph types that you've explored here.

122
00:08:53,790 --> 00:08:55,450
I'll see you in the next video.
