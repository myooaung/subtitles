1
00:00:00,500 --> 00:00:02,460
In the last video we learn about the stack.

2
00:00:02,460 --> 00:00:07,470
So now let's look at a more complicated example and try to really understand what it's doing.

3
00:00:07,470 --> 00:00:12,690
My hope here with a more complicated example is that I'll start to really click what the stack is doing

4
00:00:12,690 --> 00:00:15,410
on pretty much every line of code that you run.

5
00:00:15,420 --> 00:00:21,810
So by the end of this I hope that you could sort of think like the computer when you see your code and

6
00:00:21,840 --> 00:00:25,280
think about how it's actually working underneath the covers.

7
00:00:25,590 --> 00:00:31,430
In this example we have two functions and uppercase first function that takes a string and uppercase

8
00:00:31,440 --> 00:00:33,410
is the first letter of the string.

9
00:00:33,810 --> 00:00:37,020
And then also an uppercase words function.

10
00:00:37,380 --> 00:00:43,890
This will take a sentence break it up into separate words and then invoke the uppercase first function

11
00:00:44,200 --> 00:00:46,760
uppercase each word in the sentence.

12
00:00:46,880 --> 00:00:56,920
So our example should return lowercase words here except the L and lowercase and the W in words will

13
00:00:56,920 --> 00:00:58,440
be all capitalized.

14
00:00:58,660 --> 00:01:06,390
So essentially what we're doing is we're uppercase saying each letter each first letter of each word.

15
00:01:06,400 --> 00:01:08,980
OK so how does this interact with the stack.

16
00:01:09,340 --> 00:01:14,650
Well remember the first thing that's always going to happen is that we're going to get a main function.

17
00:01:14,680 --> 00:01:19,960
So first we'll add our main to the stack and there's no code to be run in the main until line number

18
00:01:19,960 --> 00:01:20,890
13.

19
00:01:20,890 --> 00:01:25,000
So we're waiting on line number 13 for something to do.

20
00:01:25,060 --> 00:01:31,140
Now the next step would be to invoke this uppercase words function when this function gets invoked.

21
00:01:31,210 --> 00:01:33,170
We're going to place it on the stack.

22
00:01:33,310 --> 00:01:36,130
So now we're inside of the uppercase words function.

23
00:01:36,130 --> 00:01:41,770
We've passed in the sentence lowercase words and we're on line number six.

24
00:01:41,800 --> 00:01:45,580
Now remember every function invocation adds to the stack.

25
00:01:45,820 --> 00:01:50,220
Here we're invoking the Split function which will add another function in vocation to the stack.

26
00:01:52,900 --> 00:02:01,030
So now splits on the stack of split will take our sense and break it up into an array of words based

27
00:02:01,030 --> 00:02:05,980
on that empty space so wherever there's an empty space we'll break it up into separate elements that

28
00:02:05,980 --> 00:02:11,850
are array so split will do its thing and then return that array.

29
00:02:11,950 --> 00:02:13,460
It will come off the stack.

30
00:02:13,630 --> 00:02:18,400
Words will be assigned that new array and then we'll move on to the next line of code.

31
00:02:18,490 --> 00:02:24,070
So I'm just going to kind of skip over line number 7 and move on line number 8 on line number 8.

32
00:02:24,070 --> 00:02:29,680
We're going to invoke uppercase first with the current element that we're on here.

33
00:02:29,680 --> 00:02:35,540
So words of I right now since I's equal to zero will be lower case.

34
00:02:36,040 --> 00:02:40,740
And we're going to invoke uppercase first with the word lowercase.

35
00:02:40,750 --> 00:02:43,420
So that again adds something to the stack.

36
00:02:43,480 --> 00:02:52,010
Now uppercase first is on the stack we're on line number two and we've got the word lowercase.

37
00:02:52,120 --> 00:02:56,480
First of all the first character of our word is going to be uppercase.

38
00:02:56,650 --> 00:03:02,170
So the L is going to be changed to a capital L that causes a function in vocation so uppercase is going

39
00:03:02,170 --> 00:03:07,780
to be placed on the stack upper case does its thing and returns a capital L and then it gets taken off

40
00:03:07,780 --> 00:03:09,980
the stack.

41
00:03:10,030 --> 00:03:12,400
Next we have to invoke slice.

42
00:03:12,790 --> 00:03:19,090
So slice will return our string minus the first character that's what slice given one will do.

43
00:03:19,510 --> 00:03:25,420
So now slices on the stack it will do what it's supposed to do and return a new string without the first

44
00:03:25,420 --> 00:03:26,590
character.

45
00:03:26,590 --> 00:03:30,340
So now slice will get popped off the stack when it finishes.

46
00:03:30,400 --> 00:03:34,870
And now we've got both the first letter and the rest of that string.

47
00:03:34,960 --> 00:03:39,330
We're going to concatenate them together and uppercase first is now finished.

48
00:03:41,610 --> 00:03:46,900
And we're back on line number eight in our previous stack frame waiting for that result.

49
00:03:46,920 --> 00:03:54,800
So now words of I is going to be set equal to the result of invoking that function which was capital

50
00:03:54,800 --> 00:04:00,820
L and then over a case lowercase with the capital.

51
00:04:00,920 --> 00:04:06,660
Now the same steps are going to happen with the next element in our array words.

52
00:04:06,800 --> 00:04:12,470
The string words but I'm not going to walk through all those steps those centrally be exactly the same.

53
00:04:12,470 --> 00:04:19,610
We're going to get the first letter and capitalize it so we'll get a capital W and we'll concatenate

54
00:04:19,610 --> 00:04:21,320
that with oh yes.

55
00:04:21,380 --> 00:04:24,170
To get words with a capitalized w.

56
00:04:24,440 --> 00:04:26,970
So now we'll do that assignment as well.

57
00:04:27,020 --> 00:04:28,680
And now we're done with our loop.

58
00:04:28,760 --> 00:04:34,040
The next step is to move on to line number 10 where we're going to take our words array of capitalized

59
00:04:34,040 --> 00:04:37,710
words and then join them together with a space.

60
00:04:37,940 --> 00:04:43,700
So this will essentially take our array and convert it back into a string with spaces in between them

61
00:04:43,970 --> 00:04:51,140
so that we'll have our resulting sentence with uppercase letters so join will do its thing and then

62
00:04:51,140 --> 00:04:53,030
it'll get popped off the stack.

63
00:04:54,070 --> 00:05:01,060
And now on line number 10 for uppercase words we have a result and since we have the result will return

64
00:05:01,060 --> 00:05:01,690
it.

65
00:05:01,690 --> 00:05:04,570
So uppercase words is now all done.

66
00:05:04,570 --> 00:05:07,890
Last but not least our main function finishes up.

67
00:05:07,930 --> 00:05:14,220
So we've gotten our results are lowercase and words strings have been uppercase.

68
00:05:14,290 --> 00:05:19,300
The first letter has been uppercase and now we're done with that stack frame and we're done with the

69
00:05:19,300 --> 00:05:20,450
code.

70
00:05:20,540 --> 00:05:24,510
So I hope you found that interesting and hopefully instructive.

71
00:05:24,860 --> 00:05:27,290
Keep all this in mind for the next section.

72
00:05:27,370 --> 00:05:31,040
We talk about how this all interacts with asynchronous code.
