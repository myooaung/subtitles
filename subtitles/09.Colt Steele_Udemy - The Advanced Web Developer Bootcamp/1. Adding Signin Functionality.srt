1
00:00:00,450 --> 00:00:03,830
We previously left off with the ability to sign up users.

2
00:00:04,080 --> 00:00:08,410
But what we're going to right now is a function to sign in or log in users.

3
00:00:08,700 --> 00:00:16,780
And that process involves finding a user checking if the password matches what was sent to the server.

4
00:00:17,670 --> 00:00:22,520
And then if it all matches logged them in.

5
00:00:23,310 --> 00:00:24,990
And what do we mean by lock them in.

6
00:00:25,020 --> 00:00:30,330
That could mean setting a cookie in the browser sending some information in the session or in our case

7
00:00:30,390 --> 00:00:35,880
that's going to mean signing or creating a Jaisalmer what token and sending it back in the response.

8
00:00:35,880 --> 00:00:43,560
So we're going to find the user using D-B that user does find one when we want to make sure that we

9
00:00:43,560 --> 00:00:45,320
all wait for that promise to resolve.

10
00:00:45,600 --> 00:00:47,490
So we're gonna use the await word.

11
00:00:47,670 --> 00:00:49,380
We're going to find users by their e-mail.

12
00:00:49,500 --> 00:00:55,190
So users are going to log in with their e-mail and that comes in from racked up Oddy e-mail email were

13
00:00:55,230 --> 00:01:00,630
then going to restructure some properties from the user like we did before Id username profile image

14
00:01:00,630 --> 00:01:01,010
you are.

15
00:01:01,500 --> 00:01:06,740
Let's make sure that user name so we're just going to get some properties from the users to that it's

16
00:01:06,740 --> 00:01:08,590
easy to send that back in the token.

17
00:01:08,630 --> 00:01:14,370
And in the response we're also going to make a variable called Match which is the result of our user

18
00:01:14,570 --> 00:01:17,150
compare password function.

19
00:01:17,240 --> 00:01:22,550
We're going to get that second compare password is going to accept recked up Adi Da password the past

20
00:01:22,550 --> 00:01:24,380
where that's coming in the request.

21
00:01:24,770 --> 00:01:30,830
So in our user model we made a method that should actually be methods so that folks compare password

22
00:01:30,830 --> 00:01:35,360
is a function which accepts some kind of plaintext password and compares it against a password in the

23
00:01:35,360 --> 00:01:36,220
database.

24
00:01:36,440 --> 00:01:41,260
So when we talk about this password hashing the idea is that no one can actually reverse the hash password

25
00:01:41,390 --> 00:01:42,800
that's in the database.

26
00:01:42,800 --> 00:01:48,080
What we do is we rehash another password and we compare it with what's in the database.

27
00:01:48,350 --> 00:01:51,060
And if they're the same is match returns true.

28
00:01:51,470 --> 00:02:00,220
Otherwise it returns false so add a little bit logic that says it is match which means if this is successfully

29
00:02:00,240 --> 00:02:03,740
a match with the password in the database we'll make a token.

30
00:02:04,270 --> 00:02:10,960
And here we'll use the JOAT time function again and we'll pass it what we want in the payload is going

31
00:02:10,960 --> 00:02:15,170
to be the id call it id username calling username.

32
00:02:15,370 --> 00:02:20,350
And once again since these keys and values are the same we're going to organism as 2015 object shorthand

33
00:02:20,380 --> 00:02:26,670
notation and we'll pass in the image you know as well profile as you are to be specific.

34
00:02:26,860 --> 00:02:28,140
And that's it.

35
00:02:28,300 --> 00:02:32,680
Now instead of our token we're also going to make sure that we sign it using process that envy that

36
00:02:32,710 --> 00:02:34,070
secret key.

37
00:02:34,120 --> 00:02:39,260
We want to make sure that we're using that same secret key design and leader to verify our tokens.

38
00:02:40,540 --> 00:02:49,000
If that all goes well or return a status of 200 with adjacent response that includes our ID username

39
00:02:49,330 --> 00:02:59,390
profile image euro and the token if the match is not successful we'll return next pass to the air handler.

40
00:02:59,390 --> 00:03:04,850
A status of 400 will pass and a message of invalid e-mail or password.

41
00:03:05,260 --> 00:03:09,330
Once again if there are any errors that go on here make sure we put that inside of our home.

42
00:03:09,370 --> 00:03:11,180
Looks like we don't even have a try catch.

43
00:03:11,200 --> 00:03:13,560
Let's go make sure that we put that.

44
00:03:13,740 --> 00:03:18,570
Anytime you're ready an easing function you always want to make sure you wrap everything in a try catch.

45
00:03:18,670 --> 00:03:20,520
So we'll put all that code inside of our try.

46
00:03:20,620 --> 00:03:25,690
And then in our catch we'll add a little bit of code to send this once again to the air handler with

47
00:03:25,690 --> 00:03:29,970
a status of 400 and a message once again of invalid e-mail or password.

48
00:03:31,870 --> 00:03:33,380
So what we're going to do with this sign that function.

49
00:03:33,430 --> 00:03:38,500
Well let's go to our Roths Let's go to off Jeff's and make sure that we import that new sign in function

50
00:03:38,560 --> 00:03:43,070
that we will also make sure that we add posts for Slash sign.

51
00:03:43,270 --> 00:03:44,410
It's going to look just like above.

52
00:03:44,410 --> 00:03:45,020
We're going to change.

53
00:03:45,010 --> 00:03:49,220
You are all to the slash sign in command d to highlight the next occurrence.

54
00:03:49,230 --> 00:03:52,260
It's also make sure that that's router depost create.

55
00:03:52,310 --> 00:03:53,290
What's this is.

56
00:03:53,520 --> 00:03:57,380
So back in the terminal Let's first make sure that the server starting.

57
00:03:57,620 --> 00:03:59,310
And that looks good.

58
00:03:59,380 --> 00:04:00,100
Great.

59
00:04:00,370 --> 00:04:09,910
Let's go back and make our first HDTV poster request to localhost 81 slash API slash off slash sign

60
00:04:09,910 --> 00:04:17,320
up and let's sign up a new user so username of new password of new and an email of new and new dotcom

61
00:04:18,050 --> 00:04:22,220
when we make this request we should see the token it means that our sign up is working correctly.

62
00:04:22,420 --> 00:04:24,030
Let's go see if our sign in works.

63
00:04:24,070 --> 00:04:26,460
But first let's try to break it a little bit.

64
00:04:26,500 --> 00:04:27,920
Was put in a different password.

65
00:04:27,970 --> 00:04:29,980
And make sure that our End Point is signed.

66
00:04:30,340 --> 00:04:31,030
And this looks good.

67
00:04:31,030 --> 00:04:34,380
We're getting that error of invalid email or password.

68
00:04:34,630 --> 00:04:37,440
Let's try putting in incorrect you know and the correct password.

69
00:04:37,750 --> 00:04:39,270
And once again we get the same error.

70
00:04:39,310 --> 00:04:41,330
Which is great.

71
00:04:41,350 --> 00:04:45,160
Now let's try to post successfully with the correct password and the correct e-mail.

72
00:04:45,280 --> 00:04:50,300
And we should get back the correct response which includes the Tokin and the ID and the user name.

73
00:04:50,380 --> 00:04:54,210
We're not getting the profile image or El because we haven't included it in the next section.

74
00:04:54,220 --> 00:04:57,150
We'll start including messages which is our second resource in the application.
