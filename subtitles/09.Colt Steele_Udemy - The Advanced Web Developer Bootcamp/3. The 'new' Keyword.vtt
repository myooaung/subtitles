WEBVTT
1
00:00:01.490 --> 00:00:07.150
In the end of the last video we saw that when we called our constructor function we did not return anything.

2
00:00:07.190 --> 00:00:11.000
The entire purpose of a constructor function is to construct objects.

3
00:00:11.150 --> 00:00:15.230
So when we call the function we'd really like to have a new object be created.

4
00:00:15.500 --> 00:00:17.660
Unfortunately that's not happening right now.

5
00:00:17.870 --> 00:00:23.770
But the good news is we can fix our problems by using the new keyword when we use the new keyword.

6
00:00:23.770 --> 00:00:25.940
Everything magically works.

7
00:00:26.020 --> 00:00:31.760
The first house variable is now an object with the bedrooms bathrooms and some square feet property.

8
00:00:31.780 --> 00:00:34.540
Let's see just exactly what the new keyword does.

9
00:00:34.720 --> 00:00:39.320
Just like the key word this understanding with the new keyword does can be quite tricky.

10
00:00:39.490 --> 00:00:40.590
But review the slides.

11
00:00:40.600 --> 00:00:45.940
Remember these rules and most importantly try coding a couple examples that will really help your retention

12
00:00:46.000 --> 00:00:47.360
of the material.

13
00:00:47.360 --> 00:00:50.380
We see that the new keyword is being used with a function.

14
00:00:50.380 --> 00:00:54.350
In fact it must be used with a function or else he'll get a tiger.

15
00:00:54.490 --> 00:00:55.630
Let's see why that's the case.

16
00:00:55.630 --> 00:01:01.610
By examining what the new keyword does first it creates an empty object out of thin air.

17
00:01:01.630 --> 00:01:03.700
It then sets the value of the keyword.

18
00:01:03.700 --> 00:01:10.170
This in the function which is being used with to be that empty object that was just created.

19
00:01:10.240 --> 00:01:12.950
Third it adds an implicit return.

20
00:01:12.950 --> 00:01:18.370
This at the end of the function so that the object created using the new keyword can be returned from

21
00:01:18.370 --> 00:01:19.050
the function.

22
00:01:19.970 --> 00:01:23.000
Finally and this one is the most tricky.

23
00:01:23.000 --> 00:01:29.810
It adds a property on the empty object which can be accessed using a double underscore prototype double

24
00:01:29.840 --> 00:01:33.950
underscore this double underscore is commonly called Dunder.

25
00:01:33.980 --> 00:01:40.790
So this property is also known as Dunder protip the Dunder Prato property links the object that was

26
00:01:40.790 --> 00:01:45.870
just created to the prototype property on the constructor function.

27
00:01:45.910 --> 00:01:48.970
That last sentence may have seemed like a blur but don't worry too much.

28
00:01:48.970 --> 00:01:51.910
For now we're going to go over it in painstaking detail.

29
00:01:52.300 --> 00:01:55.930
For now let's practice making a constructor function for a dog.

30
00:01:56.140 --> 00:01:59.510
Each dog should have a name and age as a bonus.

31
00:01:59.560 --> 00:02:05.560
Add a function for each dog called Ark which cancelled out logs the name of the dog added to the string

32
00:02:05.890 --> 00:02:08.880
just barked pause the video and try this out.

33
00:02:10.940 --> 00:02:12.170
So what did you come up with.

34
00:02:12.210 --> 00:02:14.700
Hopefully that looks something like this.

35
00:02:14.720 --> 00:02:17.260
Here we have a constructor function for a job.

36
00:02:17.480 --> 00:02:20.990
This function accepts two parameters name and age.

37
00:02:21.040 --> 00:02:26.780
Remember you can name your parameters anything since we want to attach properties onto the objects that

38
00:02:26.780 --> 00:02:29.210
we will create called name and age.

39
00:02:29.240 --> 00:02:34.960
We should probably name our parameters the same thing for readability inside of the function where setting

40
00:02:34.960 --> 00:02:41.110
properties on the keyword this equal to the value of what is passed into the function as well as adding

41
00:02:41.110 --> 00:02:47.680
a function called Bark onto the keyword this which canceled out logs the first name property concatenated

42
00:02:47.680 --> 00:02:48.380
with the string.

43
00:02:48.400 --> 00:02:51.050
Just barked on the next lines.

44
00:02:51.090 --> 00:02:52.470
We're creating two variables.

45
00:02:52.500 --> 00:02:58.270
Rusty and Feydeau and setting them equal to the value of the dog constructor being invoked with the

46
00:02:58.270 --> 00:02:59.310
new keyboard.

47
00:02:59.460 --> 00:03:03.390
Remember none of this works if we don't use the new keyword.

48
00:03:03.470 --> 00:03:08.780
Now before we recap with the new keyword does pause the video and see if you can remember any of the

49
00:03:08.780 --> 00:03:11.800
four things that the new keyword does.

50
00:03:11.940 --> 00:03:15.660
First it creates an empty object out of thin air.

51
00:03:15.660 --> 00:03:18.300
Second it then sets the value of the Q word.

52
00:03:18.300 --> 00:03:24.670
This in the function which it is being used with to be that empty object that was just created.

53
00:03:24.720 --> 00:03:27.290
Third it adds an implicit return.

54
00:03:27.300 --> 00:03:32.520
This at the end of the function so that the object created using the new keyword can be returned from

55
00:03:32.520 --> 00:03:33.690
the function.

56
00:03:33.690 --> 00:03:39.250
Fourth it adds the Dunder Prato property onto the object that was just created.

57
00:03:40.130 --> 00:03:45.800
In this video we examined how to use the keyword new to create objects from constructor functions.

58
00:03:45.800 --> 00:03:50.840
We learned about the forth things that the new keyword does which I highly encourage you to review because

59
00:03:50.840 --> 00:03:55.530
we will be covering this in much more depth and knowing the fundamentals is essential.

60
00:03:55.640 --> 00:04:00.380
In the next video we're going to talk about using more than one constructor function and how we can

61
00:04:00.380 --> 00:04:03.440
refactor our code to make it even cleaner even.
