1
00:00:00,570 --> 00:00:04,050
So let's get started building the back end for our warbler application.

2
00:00:04,080 --> 00:00:08,400
And we've had a lot of conversation on the team as to what should we do this on cloud nine.

3
00:00:08,520 --> 00:00:11,790
And you have a lot of feedback from all of you which has really helped us determine that we're just

4
00:00:11,790 --> 00:00:12,990
going to do this locally.

5
00:00:13,110 --> 00:00:16,680
So instead of worrying about a cloud nine set up which has been a bit of a hassle I'm going to be building

6
00:00:16,680 --> 00:00:17,690
this all locally.

7
00:00:17,790 --> 00:00:21,380
So these sections are going to rely on an understanding of using the terminal.

8
00:00:21,450 --> 00:00:26,430
And if you're a bit shaky on that please ask us or check out quite a few other courses are new to me.

9
00:00:26,430 --> 00:00:30,840
We do want to let you know this is an advanced course so we do expect a bit of knowledge around being

10
00:00:30,840 --> 00:00:32,790
comfortable in the terminal.

11
00:00:32,820 --> 00:00:38,250
So let's get started making a new application on a directory and I'll call this warbler and ICD into

12
00:00:38,250 --> 00:00:46,890
that directory and inside of here I'm going to make two separate folders one for the server and one

13
00:00:46,890 --> 00:00:48,890
for the client.

14
00:00:49,110 --> 00:00:52,310
And what we're going to focus on just right now is server side code.

15
00:00:52,380 --> 00:00:54,920
So let's see into warbler server.

16
00:00:55,510 --> 00:00:57,430
If you look inside here there's not much.

17
00:00:57,630 --> 00:00:58,980
So what kind of files do I need.

18
00:00:58,980 --> 00:01:02,850
Well I'm going to start a node application I'm probably going to want to start with a package Jason

19
00:01:03,240 --> 00:01:07,280
so I'm going to NPM it and this is going to give me quite a bit of options.

20
00:01:07,290 --> 00:01:09,240
I can press enter and enter and enter.

21
00:01:09,250 --> 00:01:11,010
Do you ever get tired of pressing enter.

22
00:01:11,160 --> 00:01:17,220
You can always run NPM in it dash Y and that will create a package just on for you with some sensible

23
00:01:17,250 --> 00:01:18,340
defaults.

24
00:01:18,360 --> 00:01:22,860
So inside of here this looks pretty good so far I can go in and edit this if I'd like but what I really

25
00:01:22,860 --> 00:01:27,930
want to start doing is installing some modules that I'm going to need throughout this application.

26
00:01:27,930 --> 00:01:32,910
Now if I take a look at the version of note that I'm using and using version 9 which means that when

27
00:01:32,910 --> 00:01:36,510
I install modules I do not have to add the dash Dessie flag.

28
00:01:36,630 --> 00:01:40,920
If you're using an older version of node you want to make sure you're using this so that your dependencies

29
00:01:40,920 --> 00:01:42,760
are saved to your package Jason.

30
00:01:43,170 --> 00:01:44,650
So what modules are we going to need.

31
00:01:44,820 --> 00:01:47,300
Well this whole thing is going to be powered by express.

32
00:01:47,520 --> 00:01:51,330
What else we're going to need to be Crit. module for password hashing.

33
00:01:51,330 --> 00:01:55,950
We're going to need body parser so that we can make post requests and extract data from them.

34
00:01:55,980 --> 00:01:58,880
So what else are we going to need about mongoose.

35
00:01:58,900 --> 00:02:03,870
We are going to be using Gees on web tokens so we're also going to need the Giese on web token module.

36
00:02:03,870 --> 00:02:09,350
We're also in need to spell that correctly first and then we'll install the cores module and Corps's

37
00:02:09,360 --> 00:02:11,960
the idea of cross origin resource sharing.

38
00:02:12,240 --> 00:02:17,010
There's a really important security policy on the web which states that you can't run javascript from

39
00:02:17,010 --> 00:02:18,610
one domain to another.

40
00:02:18,840 --> 00:02:23,220
And that's really so that we can't inject any kind of malicious javascript from one site to another

41
00:02:23,880 --> 00:02:25,430
in order to bypass this.

42
00:02:25,560 --> 00:02:29,480
One of the most common ways of doing that is by enabling something called Cross origin.

43
00:02:29,490 --> 00:02:34,670
Resource sharing or cores you'll hear developers talk a lot of the time oh I'm having cores issues and

44
00:02:34,670 --> 00:02:38,790
what that really means is that they're struggling overcoming the same origin policy.

45
00:02:38,790 --> 00:02:42,360
It's very very restrictive and I'll actually link to it in the notes if you want to read a little bit

46
00:02:42,360 --> 00:02:43,020
more about it.

47
00:02:43,170 --> 00:02:49,320
But what we're going to tell our server to do is to send headers in the response that notify the browser

48
00:02:49,410 --> 00:02:52,260
that it can actually allow for a cross origin request.

49
00:02:52,320 --> 00:02:56,050
And when we start working on the client side we'll actually see what this code looks like.

50
00:02:56,370 --> 00:02:57,130
So what else do we need.

51
00:02:57,150 --> 00:03:02,250
We have expressed secret body parts or mongoose some token cores that looks good for now.

52
00:03:02,400 --> 00:03:05,690
It's very possible that I'm missing one but that's OK when we need it we'll get it.

53
00:03:05,730 --> 00:03:09,480
And there's actually one that I just thought of the need and we're going to see what that is in a second.

54
00:03:09,480 --> 00:03:12,300
And we start talking about security and secret keys.

55
00:03:12,510 --> 00:03:14,610
But for now I think this is OK.

56
00:03:14,700 --> 00:03:18,660
So once these are installed we need to think a little bit about our folder structure and we're going

57
00:03:18,660 --> 00:03:20,140
to need some pretty important files.

58
00:03:20,160 --> 00:03:25,020
I'm going make a file called indexed objects and this file is going to be responsible for starting my

59
00:03:25,020 --> 00:03:25,670
server.

60
00:03:25,920 --> 00:03:32,490
I'm also going to make a couple folders and then make one for my routes one for my models one for my

61
00:03:32,490 --> 00:03:35,480
middleware and another for my handlers.

62
00:03:35,670 --> 00:03:40,080
Now you've traditionally maybe put all of your code inside of your routes but what we're going to do

63
00:03:40,140 --> 00:03:45,390
is we are going to use a folder called handlers and handlers are going to be all of the functions that

64
00:03:45,390 --> 00:03:49,080
we pass to opt out route or apt get.

65
00:03:49,170 --> 00:03:50,540
We'll see what this looks like in a little bit.

66
00:03:50,550 --> 00:03:56,220
But this is a structure that's going to allow us to skil this application much easier with Express which

67
00:03:56,220 --> 00:03:57,780
is a minimalist framework.

68
00:03:57,780 --> 00:04:00,400
You really have a lot of flexibility about your folder structure.

69
00:04:00,540 --> 00:04:04,950
So just remember this is one pattern of building express applications.

70
00:04:05,880 --> 00:04:07,620
Let's take a look at what I have so far.

71
00:04:07,800 --> 00:04:08,900
This looks pretty good.

72
00:04:09,240 --> 00:04:13,740
Knowing you to actually start writing some code in my index genius and all we're really going to do

73
00:04:14,220 --> 00:04:18,490
is write a little bit of code to start the server and using Visual Studio code.

74
00:04:18,510 --> 00:04:20,780
But you can use whatever text editor you like.

75
00:04:21,060 --> 00:04:25,570
So inside of our index day yes we're going to start by bringing in some important modules.

76
00:04:25,590 --> 00:04:27,610
I'm going to bring in Express.

77
00:04:28,170 --> 00:04:32,880
Let's say that Express is going to be the result of the Express module.

78
00:04:32,880 --> 00:04:38,610
We're also going to invoke that express function and this is what is important this is a very common

79
00:04:38,610 --> 00:04:40,690
pattern that you've seen with a bunch of express apps.

80
00:04:40,710 --> 00:04:43,440
We're also going to bring in the course module.

81
00:04:43,890 --> 00:04:48,870
So we're going to bring in cores and that's once again going to be required cores and a lot of this

82
00:04:48,870 --> 00:04:52,380
we really could just give you the boilerplate code but I really want to build this from scratch and

83
00:04:52,380 --> 00:04:55,210
talk about each part of the application that we're building.

84
00:04:55,620 --> 00:04:56,600
What else do we need.

85
00:04:56,760 --> 00:05:00,510
Well we're going to start with a port and here is just a variable.

86
00:05:00,510 --> 00:05:02,420
We'll put that on 1881.

87
00:05:02,430 --> 00:05:02,950
Why not.

88
00:05:02,970 --> 00:05:04,150
Must be something fun.

89
00:05:04,460 --> 00:05:07,940
What we're going to tell our application to use is the cores model.

90
00:05:08,010 --> 00:05:12,750
We're also going to tell our application to use a body parser but in this case we're not going to do

91
00:05:12,750 --> 00:05:12,930
that.

92
00:05:12,930 --> 00:05:17,120
You are all encoded that you might have seen before or since we're building an API Fergies body parser

93
00:05:17,160 --> 00:05:17,760
Jaison.

94
00:05:18,000 --> 00:05:19,120
And that's very important.

95
00:05:19,350 --> 00:05:22,120
Well I want to build a very simple error handler.

96
00:05:22,260 --> 00:05:23,220
And what does that look like.

97
00:05:23,340 --> 00:05:30,600
I'm going to specify all my routes over here.

98
00:05:30,780 --> 00:05:31,950
They will come later.

99
00:05:32,730 --> 00:05:37,890
But if none of those routes are reached what I'd like to do is tell my application to run a function

100
00:05:38,670 --> 00:05:44,460
with something wreck rez RAZ And next you might have not seen next before but next is a very important

101
00:05:44,550 --> 00:05:48,220
parameter It's the third parameter to these callback functions that we're going to see.

102
00:05:48,240 --> 00:05:53,750
We also call these functions handlers and what next allows us to do is move to the next piece of middleware.

103
00:05:53,880 --> 00:05:59,280
This is very important for error handling so that we can bubble up our error with no there are lots

104
00:05:59,280 --> 00:06:04,440
of functions and asynchronous actions and debugging node issues when you're not handling errors properly

105
00:06:04,440 --> 00:06:05,540
is really not fun.

106
00:06:05,580 --> 00:06:09,300
And since we want to build this to be a bit more of a production application we don't really want to

107
00:06:09,300 --> 00:06:14,160
do things like throw or console that log because we would want our application to continue.

108
00:06:14,340 --> 00:06:16,550
But in this case this is going to be for a 4.

109
00:06:16,560 --> 00:06:17,620
0 4.

110
00:06:17,760 --> 00:06:19,770
So we'll make a variable call there.

111
00:06:19,850 --> 00:06:25,170
It's going to be a new error errors a built in function or constructor function in javascript and this

112
00:06:25,170 --> 00:06:27,170
just says not found.

113
00:06:27,180 --> 00:06:33,160
Make sure that quotes match up and then we will set the status of this error to be 4 or 4.

114
00:06:33,180 --> 00:06:37,730
You've seen these before when you visit the page and you go to some route and that route doesn't exist.

115
00:06:37,860 --> 00:06:43,570
That's all we got when I'm going to do then is call next with that specific error.

116
00:06:44,160 --> 00:06:50,580
So what I'd like to do right now is simply listen on a port and then I'd like to run a function and

117
00:06:50,610 --> 00:06:56,550
all we're going to do here is say that the server is starting on a certain port and I'm going to be

118
00:06:56,550 --> 00:06:59,520
using a lot of years 2015 in this application.

119
00:06:59,670 --> 00:07:06,180
So I'm going to start with some template string's server starting on port and whatever the variable

120
00:07:06,180 --> 00:07:10,540
of our port is treated that correctly.

121
00:07:10,560 --> 00:07:11,660
So what have we done so far.

122
00:07:11,670 --> 00:07:13,960
We brought in some important modules.

123
00:07:14,040 --> 00:07:17,500
We've set the port number and we built a very small error handler.

124
00:07:17,610 --> 00:07:23,120
If we were to go start this application we could do that using node indexed objects.

125
00:07:23,130 --> 00:07:25,420
Now we can see how the parser is not defined.

126
00:07:25,440 --> 00:07:26,890
Don't forget that one.

127
00:07:27,030 --> 00:07:27,660
It looks like it.

128
00:07:27,660 --> 00:07:32,750
Yes let's go make sure everybody parser is the result of requiring the parser.

129
00:07:32,760 --> 00:07:34,240
Maybe you saw that if you did.

130
00:07:34,260 --> 00:07:36,330
I'm glad you've fixed it for me.

131
00:07:36,330 --> 00:07:37,650
Let's go run node index that.

132
00:07:37,680 --> 00:07:41,210
Yes and we see that the server is starting on port 80 81.

133
00:07:41,230 --> 00:07:46,210
Now if we were to make a change we would then have to go stop this server and started again.

134
00:07:46,410 --> 00:07:51,270
So thankfully there is a really wonderful tool called Nordman which you can install that will keep your

135
00:07:51,270 --> 00:07:53,240
server alive after any changes.

136
00:07:53,340 --> 00:07:54,820
You can install that using NPM.

137
00:07:54,840 --> 00:07:57,770
Install dash G gnomon.

138
00:07:58,590 --> 00:08:00,970
So I'm going to start with gnomon and start the server.

139
00:08:01,140 --> 00:08:02,880
But how do we know if anything's working.

140
00:08:02,910 --> 00:08:09,070
Well I'm going to go over here and I'm going to simply make a request to this API.

141
00:08:09,270 --> 00:08:17,430
What we're going to do is simply state Perl local host 80 81 and Kearl is a simple command line tool

142
00:08:17,700 --> 00:08:22,800
that allows me to make requests and if we take a look at this right now we get this whole messy bunch

143
00:08:22,800 --> 00:08:24,060
of HVM out.

144
00:08:24,060 --> 00:08:26,210
We get an error that says not found.

145
00:08:26,230 --> 00:08:28,570
We see all this information about the error.

146
00:08:28,890 --> 00:08:33,820
What we'd really like to do is build a bit of a cleaner way to send back that information.

147
00:08:33,930 --> 00:08:38,130
And since we're building an API we're going to be sending back information with J-Zone.

148
00:08:38,130 --> 00:08:41,390
So in the next video we're going to take this error handler that we built.

149
00:08:41,520 --> 00:08:43,160
And we're really going to clean it up.

150
00:08:43,170 --> 00:08:43,850
I'll see you there.
