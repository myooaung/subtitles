1
00:00:01,240 --> 00:00:06,130
Now that we've covered the stack will go over two very important functions that facilitate asynchronous

2
00:00:06,130 --> 00:00:10,950
code set time out and set interval.

3
00:00:11,090 --> 00:00:13,220
And we just have two objectives.

4
00:00:13,220 --> 00:00:19,190
First to write asynchronous code using said time out and second to write asynchronous code using say

5
00:00:19,320 --> 00:00:27,680
iterable first upset time out time out is a function that asynchronously invokes a callback after a

6
00:00:27,680 --> 00:00:30,110
delay in milliseconds.

7
00:00:30,110 --> 00:00:34,680
So in this simple example here we've got a callback named callback.

8
00:00:34,730 --> 00:00:36,800
We've got a variable that's a delay.

9
00:00:36,800 --> 00:00:45,760
So one thousand milliseconds or one second and then set time out will invoke this callback one second

10
00:00:45,770 --> 00:00:46,580
in the future.

11
00:00:46,580 --> 00:00:52,840
One Second After a set time is invoked let's look at a set time out example.

12
00:00:53,040 --> 00:00:59,730
So in this example it's similar to our last one except that we're providing now an anonymous function

13
00:00:59,880 --> 00:01:02,590
right in line as a parameter to set timeout.

14
00:01:02,910 --> 00:01:06,220
So our first parameter here is an anonymous function.

15
00:01:06,480 --> 00:01:09,350
And our second parameter is our delay in milliseconds.

16
00:01:09,540 --> 00:01:16,110
So two seconds from a time set timeout is invoked this function will be invoked and we'll see runs in

17
00:01:16,110 --> 00:01:18,710
approximately 2000 milliseconds in the console.

18
00:01:19,690 --> 00:01:22,380
And that's what we get.

19
00:01:22,970 --> 00:01:26,040
At times you also may want to cancel a set time out.

20
00:01:26,090 --> 00:01:31,340
So every time you invoke set timeout you get back an ID for that time out.

21
00:01:31,340 --> 00:01:37,780
In this example here we first have a set time out that will console log this function runs in 30 seconds

22
00:01:38,360 --> 00:01:42,860
and we're saving that ID to this variable timer ID.

23
00:01:42,860 --> 00:01:45,130
Now we invoke another set time out.

24
00:01:45,170 --> 00:01:47,630
That will be run in two seconds.

25
00:01:47,630 --> 00:01:49,820
That clears that timer.

26
00:01:49,850 --> 00:01:56,480
So this first time out the callback inside the set timeout will never actually run because this set

27
00:01:56,480 --> 00:02:02,990
timeout will be invoked first and it will clear the first time out when this runs we'll see something

28
00:02:02,990 --> 00:02:04,900
like this in the console.

29
00:02:05,210 --> 00:02:07,850
So you'll see that we're canceling the first set time out.

30
00:02:07,850 --> 00:02:11,200
So this callback runs but the other one does not.

31
00:02:11,210 --> 00:02:13,020
Now this number here I just made up.

32
00:02:13,280 --> 00:02:17,150
But it will be some integer number that references that set timeout.

33
00:02:17,570 --> 00:02:22,280
Let's see this running in the console.

34
00:02:22,340 --> 00:02:27,500
So we've got our code here with the first set time out and the timer ID and the second set timeout which

35
00:02:27,500 --> 00:02:34,610
will clear that timer when this runs we're only going to see this second message console log.

36
00:02:34,610 --> 00:02:36,600
We won't see this one because it will be canceled

37
00:02:39,510 --> 00:02:42,790
and two seconds later we've got the console log that we're expecting.

38
00:02:42,890 --> 00:02:48,710
Canceling the first set time.

39
00:02:49,410 --> 00:02:51,670
Now let's see how set interval works.

40
00:02:51,750 --> 00:02:53,620
It's very similar to set time out.

41
00:02:53,730 --> 00:02:56,490
The parameters are a callback and a number for a delay.

42
00:02:56,490 --> 00:03:03,420
Just like before but the differences set interval will continuously invoke the callback every x milliseconds

43
00:03:03,420 --> 00:03:05,760
where X's that repeat value.

44
00:03:05,760 --> 00:03:12,690
So in this example every three seconds three thousand milliseconds this callback is going to be invoked

45
00:03:13,080 --> 00:03:17,330
and it will continue to run as long as your program is running.

46
00:03:17,370 --> 00:03:21,860
Here's a set interval example that console logs a number every second.

47
00:03:21,900 --> 00:03:27,660
So you see here in our callback function we're incrementing our number and then cancel logging that

48
00:03:27,660 --> 00:03:29,710
number after we've incremented it.

49
00:03:29,730 --> 00:03:37,530
So the way this will run First we'll see one in the console then we'll see two then we'll see three

50
00:03:38,220 --> 00:03:41,010
and we'll see four one every second.

51
00:03:41,010 --> 00:03:46,500
As long as our program runs this will keep going of course but I'm going to run out of space pretty

52
00:03:46,500 --> 00:03:49,390
soon so you can imagine the next number after that.

53
00:03:52,100 --> 00:03:56,060
So just like I said time out we can also cancel or set an interval.

54
00:03:56,060 --> 00:03:59,840
So in this example we're starting out with a number that's equal to zero.

55
00:03:59,840 --> 00:04:04,910
And just like before we're incrementing the number on every invocation of our callback function.

56
00:04:04,910 --> 00:04:10,670
So this is going to run every second or every 1000 milliseconds and then we're going to cancel log the

57
00:04:10,670 --> 00:04:12,830
value of number after we've incremented it.

58
00:04:12,990 --> 00:04:19,100
But once the number becomes three will invoke this clear interval method and will cancel or interval.

59
00:04:19,100 --> 00:04:24,450
So this will stop our set interval callback from running again.

60
00:04:25,170 --> 00:04:33,790
And in the con. we'll see one and then two and then three and then after that no more because we've

61
00:04:33,890 --> 00:04:43,600
clear the saturable here let's see that in the real con..

62
00:04:43,660 --> 00:04:48,770
So I've got the code here just like the example number is going to start at zero.

63
00:04:48,790 --> 00:04:56,290
It's going to be incremented up until 3 and then once it hits 3 our interval will be cleared.

64
00:04:56,290 --> 00:05:03,100
So as you can see we've got one two three and then no more because clear interval has cleared the interval

65
00:05:03,100 --> 00:05:06,870
and stopped it from running.

66
00:05:06,890 --> 00:05:09,740
We've seen examples of said time out and set interval.

67
00:05:09,950 --> 00:05:11,240
Up next is your turn.

68
00:05:11,240 --> 00:05:13,800
You're going to be working on an assignment that involves that interval.

69
00:05:13,880 --> 00:05:14,320
Good luck.
