1
00:00:01,020 --> 00:00:01,830
Welcome back.

2
00:00:01,950 --> 00:00:06,720
In this video we're going to be going over solutions to the maps and sets exercises.

3
00:00:06,720 --> 00:00:09,870
The first thing we need to do is create a class for a message board.

4
00:00:10,170 --> 00:00:17,010
And in our constructor we'll assign a property called messages to be a new map and a property of ID

5
00:00:17,370 --> 00:00:19,140
to start off as one.

6
00:00:19,140 --> 00:00:22,050
Just make sure you attach these properties onto the keyword.

7
00:00:22,050 --> 00:00:27,210
This the first instance method we need to implement is add a message here.

8
00:00:27,240 --> 00:00:33,540
We're going to pass in a parameter an inside the message is map set the key of the ID and the value

9
00:00:33,630 --> 00:00:39,180
with the parameter passed to the function will that increment the ID and return the instance so that

10
00:00:39,180 --> 00:00:41,340
we can change the method.

11
00:00:41,340 --> 00:00:46,770
The next method we need to implement is Find Message by ID which except some ID and returns a message

12
00:00:47,340 --> 00:00:53,360
here it will just return the stop messages and use the get method and pass and Id next.

13
00:00:53,400 --> 00:00:59,040
Let's implement Find Message by value here we're passing in a value and we need to iterate over all

14
00:00:59,040 --> 00:01:00,990
of the values in the message as map.

15
00:01:01,290 --> 00:01:07,260
Let's use a for loop and see if the message we are iterating over is the same as the value passed to

16
00:01:07,260 --> 00:01:08,030
the function.

17
00:01:08,370 --> 00:01:14,960
If so we'll return that found message the next method we need to implement is remove message which accepts

18
00:01:14,960 --> 00:01:19,580
an ID and uses the delete method on maps to remove that message.

19
00:01:19,580 --> 00:01:25,040
Let's also return the object created from this class but we would also call an instance so that we can

20
00:01:25,040 --> 00:01:26,120
change the method.

21
00:01:27,260 --> 00:01:33,010
The next method we need to implement is number of messages which just returns this stop messages dioxides.

22
00:01:33,170 --> 00:01:37,610
Remember maps have a size property to tell us how many elements are in it.

23
00:01:37,640 --> 00:01:41,670
The last method we need to implement is messages to array here.

24
00:01:41,690 --> 00:01:48,980
We can use the Handy yes 2015 array from and past in the messages that values function to easily convert

25
00:01:49,010 --> 00:01:50,900
this into an array of messages.

26
00:01:51,740 --> 00:01:56,540
The next function we need to implement is unique values which accepts an array and returns the number

27
00:01:56,540 --> 00:01:58,640
of unique values in the array.

28
00:01:58,640 --> 00:02:00,500
This is a great case for a set.

29
00:02:00,860 --> 00:02:06,410
So let's just return a new set with that array passed to it and return the size property to see how

30
00:02:06,410 --> 00:02:08,270
many values are in that set.

31
00:02:08,540 --> 00:02:14,120
Remember sets only contain unique values for the next function has duplicates.

32
00:02:14,120 --> 00:02:19,620
We can simply compare the size of the set from an array and the length of that array.

33
00:02:19,850 --> 00:02:23,090
If they are the same this function should return false.

34
00:02:23,090 --> 00:02:24,860
Otherwise it will return true.

35
00:02:24,890 --> 00:02:29,610
And we have duplicates the last method we need to implement is count pairs.

36
00:02:29,960 --> 00:02:34,310
What we'll do here is create a new set from the array pass to the function.

37
00:02:34,310 --> 00:02:40,490
We'll be using this to see if the other pair exists will then initialize account a 0 and iterate through

38
00:02:40,490 --> 00:02:44,480
the array and at each value remove that value from the set.

39
00:02:44,480 --> 00:02:47,900
This will prevent us from dealing with a pair of the same number.

40
00:02:47,930 --> 00:02:50,880
We'll then see if the set has the complement to the pair.

41
00:02:51,080 --> 00:02:57,180
And if it does will increment the count once we're done iterating will return the count from our function.

42
00:02:57,240 --> 00:03:02,250
The algorithm we've written will try to find the complement of the pair or what other number needs to

43
00:03:02,250 --> 00:03:05,460
exist to sum to the second parameter.

44
00:03:05,460 --> 00:03:10,710
This one is a bit tricky but try to code it on your own so you can see exactly how it's working in the

45
00:03:10,710 --> 00:03:11,310
next section.

46
00:03:11,310 --> 00:03:16,130
We'll see how yes 2015 and help us manage asynchronous code using promises.

47
00:03:16,130 --> 00:03:16,790
See there.
