WEBVTT
1
00:00:00.270 --> 00:00:05.100
It's time to display all of the messages that we have in our database.

2
00:00:05.100 --> 00:00:08.120
So we're going to do that inside of our message lists container.

3
00:00:08.820 --> 00:00:13.950
And our message was convener we're going to grab some information from redux including all of the messages

4
00:00:14.100 --> 00:00:15.560
when this component looks.

5
00:00:15.750 --> 00:00:18.000
So we don't really have any actions related to that.

6
00:00:18.030 --> 00:00:25.090
So let's head over to actions and let's make a new one called messages dodginess and incited messages

7
00:00:25.090 --> 00:00:34.200
dodgiest we're going to start by importing our API call from data I-Slash data slash services slash

8
00:00:34.200 --> 00:00:34.960
API.

9
00:00:35.270 --> 00:00:37.180
We're also going to improve or add error.

10
00:00:37.190 --> 00:00:38.400
In case anything goes wrong.

11
00:00:39.340 --> 00:00:41.420
From of errors.

12
00:00:41.770 --> 00:00:47.230
So we're all going to need two more action types of messages which will be a constant which is a string

13
00:00:47.320 --> 00:00:51.760
load messages are also going about another to remove a message.

14
00:00:51.790 --> 00:00:55.960
So call that remove message which one I can implement just yet.

15
00:00:56.020 --> 00:00:57.510
We're going to need it eventually.

16
00:00:57.520 --> 00:01:04.390
So back in our messages we're going to make sure that we import load messages as well as remove message

17
00:01:04.540 --> 00:01:11.460
and we'll get that from dot dot slash action types.

18
00:01:11.670 --> 00:01:16.560
So it's had action types we now have two new action types for loading messages and for removing a single

19
00:01:16.560 --> 00:01:20.380
message we'll use those in a little bit.

20
00:01:20.420 --> 00:01:24.200
So let's make a simple function called load messages.

21
00:01:24.320 --> 00:01:29.150
It's going to accept a parameter called messages and it's going to return an object.

22
00:01:29.180 --> 00:01:30.990
This is our action creator.

23
00:01:31.070 --> 00:01:35.070
The type is going to be load messages that are action type that we imported.

24
00:01:35.360 --> 00:01:40.030
And we're going to add some messages inside of this action greter.

25
00:01:40.040 --> 00:01:43.760
So first let's think about how we're going to load all of these messages.

26
00:01:43.830 --> 00:01:45.510
So we're going to do a couple of things here.

27
00:01:45.510 --> 00:01:50.440
We're going to make sure that on the back end we make a request to load all of those messages.

28
00:01:50.480 --> 00:01:53.520
We have to make sure we make it even harder to load all the messages.

29
00:01:53.520 --> 00:02:00.490
So let's make a function call fetch messages which is a function that's going to return dispatch.

30
00:02:00.500 --> 00:02:02.390
We're going to use thunk here as well.

31
00:02:02.540 --> 00:02:08.030
And inside of here we're going to return an AG I call it like we've done before here or making a get

32
00:02:08.600 --> 00:02:11.220
to slash API slash messages.

33
00:02:11.570 --> 00:02:18.300
And if this works out successfully we should run a function with some response and we'll dispatch load

34
00:02:18.350 --> 00:02:19.350
messages.

35
00:02:20.610 --> 00:02:22.150
And we'll pass in our response.

36
00:02:23.720 --> 00:02:33.260
If this fails we'll catch up with some kind of error and we'll call an error with that specific message.

37
00:02:33.260 --> 00:02:37.040
So if this fails we'll add that as well.

38
00:02:37.040 --> 00:02:39.430
So where are we going to use fecche messages.

39
00:02:40.280 --> 00:02:44.790
Let's first make sure that we have a producer they can handle that specific action.

40
00:02:44.960 --> 00:02:50.140
So let's make a producer called messages dodginess and inside of reducers for messages.

41
00:02:50.150 --> 00:02:55.280
We're going to make some action types so we're first going to import our action types lewd messages

42
00:02:55.820 --> 00:03:02.110
and remove message and we're going to get those from doctor slash action types.

43
00:03:02.190 --> 00:03:03.700
We're not going to remove message yet.

44
00:03:03.840 --> 00:03:12.540
But let's start with a reducer so we can function with the default state as an array with some messages

45
00:03:12.600 --> 00:03:13.600
and action.

46
00:03:14.550 --> 00:03:18.900
I must do the usual let's work with a switch case statement we're going to switch off of action type

47
00:03:18.910 --> 00:03:24.450
like we've seen before and we're going to be listening specifically for a lewd messages action type

48
00:03:26.640 --> 00:03:33.470
and when there's a lot messages we're simply going to return a copy of whatever the messages are.

49
00:03:33.930 --> 00:03:39.390
We're not going to say too much about removing But we're still going to want to see which returns that

50
00:03:39.390 --> 00:03:41.920
state.

51
00:03:41.970 --> 00:03:47.190
So here's a producer who want to make sure that in our index genius that we import that producer commanded

52
00:03:47.210 --> 00:03:51.760
just like that will call that messages and we'll bring this into our combined reducers.

53
00:03:52.080 --> 00:03:57.270
So now messages should be accessible from any of our action creators and our components should be able

54
00:03:57.270 --> 00:04:00.290
to get access to it for Masbate props.

55
00:04:00.300 --> 00:04:02.720
So what are we going next in our message list component.

56
00:04:02.730 --> 00:04:04.790
We're going to start using that information.

57
00:04:05.070 --> 00:04:06.600
But there's a little bit of a gotcha.

58
00:04:06.740 --> 00:04:14.680
You know S-box when we make this API call right now in our ag i call we don't send the token along in

59
00:04:14.680 --> 00:04:15.510
a header.

60
00:04:15.680 --> 00:04:22.040
And if you don't send a token along in a letter we're never going to mark ourselves as logged in.

61
00:04:22.090 --> 00:04:27.250
So we want some easy way to attach that information in the header when we're logged in.

62
00:04:27.250 --> 00:04:32.950
So when the user logs in and our future requests we can add their token with a letter of authorization

63
00:04:33.010 --> 00:04:33.490
and a value.

64
00:04:33.490 --> 00:04:34.970
Bear with that token.

65
00:04:35.260 --> 00:04:41.650
So inside of our services AG I guess we're going to add a little bit functionality to attach that token

66
00:04:41.710 --> 00:04:44.200
to any request when the user logs in.

67
00:04:44.200 --> 00:04:46.840
So make a function called Set token Hetter.

68
00:04:47.380 --> 00:04:49.840
And this is going to accept some parameter called token.

69
00:04:50.020 --> 00:04:56.650
And if we pass in a token to this function we'll add up to X uses the faults in the headers a common

70
00:04:56.650 --> 00:05:04.760
header called authorization with a value of bearer and that token.

71
00:05:04.920 --> 00:05:10.110
Otherwise we're going to delete from ASIO's devolves headers.

72
00:05:10.240 --> 00:05:13.630
Common authorization.

73
00:05:13.670 --> 00:05:18.970
So this is what we'll do when the user logs out so we're going to make sure whatever we call this function

74
00:05:19.270 --> 00:05:23.730
if it has a token to it attach that token to all future requests.

75
00:05:23.890 --> 00:05:28.620
And that's really important to make sure that the server knows who we are and we're locked in.

76
00:05:28.690 --> 00:05:33.100
So where are we going to use the set token after so when we log in to user.

77
00:05:33.110 --> 00:05:35.230
We want to make sure that we call this function.

78
00:05:35.450 --> 00:05:42.640
So let's go back to actions for off a Muslim or set token Hetter I'll grab that from services.

79
00:05:42.640 --> 00:05:45.460
UPI Let's make sure that we spell this correctly

80
00:05:50.550 --> 00:05:55.030
and inside of our Oggi Yes we're going to export another function that we'll call set authorization

81
00:05:55.030 --> 00:06:02.620
token and this will accept the token and we'll call our set token a header with that token we're going

82
00:06:02.620 --> 00:06:04.180
to use this in a couple of other places.

83
00:06:04.300 --> 00:06:07.150
So it's just a nice helpful place to isolate this logic.

84
00:06:10.100 --> 00:06:11.570
So where are we going to start using this.

85
00:06:11.570 --> 00:06:17.930
Well when the user successfully logs in let's pass in that token and send it in all future requests

86
00:06:18.670 --> 00:06:24.480
and when the user logs out and we'll pass in the bully and a false so that they can delete that letter

87
00:06:24.500 --> 00:06:25.820
from all future requests

88
00:06:29.320 --> 00:06:34.510
there's one more place we actually want to use and that's inside of our address

89
00:06:38.380 --> 00:06:39.600
inside of our house.

90
00:06:39.610 --> 00:06:43.520
We're going to need to include a little bit of logic to see if there's already a token.

91
00:06:43.570 --> 00:06:45.070
When the page refreshes.

92
00:06:45.220 --> 00:06:51.870
So if there is a token in local storage which is the key of G Dodi's ogen that we had we're going to

93
00:06:51.870 --> 00:06:56.440
then make sure that all future requests we add that tokin to the authorization matter.

94
00:06:56.700 --> 00:07:02.340
So if you're fresh a page or a redux or is cleared How do we remember if there is that tokin what we

95
00:07:02.340 --> 00:07:04.640
want to make sure that if that token exists.

96
00:07:04.660 --> 00:07:08.460
We said it in all future requests.

97
00:07:08.480 --> 00:07:12.570
So the way that we do that is by adding it to this authorization function.

98
00:07:14.290 --> 00:07:15.700
We also want to make sure that we can use that.

99
00:07:15.700 --> 00:07:24.950
So let's go in import said authorization tokin and set current user from that I-Slash store.

100
00:07:26.190 --> 00:07:33.070
Slash actions slash what we're building here is the idea of hydration.

101
00:07:33.390 --> 00:07:39.070
So what this means is if the server were to go down or if our next door were to be cleared.

102
00:07:39.450 --> 00:07:45.140
When the page refreshes we could still see if there's a token in local storage and if so we can repopulate

103
00:07:45.140 --> 00:07:50.200
or rehydrate our state with the current user.

104
00:07:50.230 --> 00:07:52.480
So that's what we're going to do on this next line right here.

105
00:07:52.540 --> 00:07:58.690
We're going to try instead of a try catch because we want to prevent someone from manually tampering

106
00:07:59.230 --> 00:08:02.760
with the key of G W T in local storage.

107
00:08:03.840 --> 00:08:06.920
With the key token in local storage.

108
00:08:07.170 --> 00:08:10.870
So someone could go to local storage and change the value.

109
00:08:11.100 --> 00:08:16.770
We want to make sure that when we set that token and send it we dispatch with whatever they give us.

110
00:08:16.770 --> 00:08:22.260
So they modify that token and it's invalid we'll handle that inside of our catch and there will just

111
00:08:22.260 --> 00:08:27.850
dispatch from the store directly so current user with an empty object will forcibly lock them out.

112
00:08:32.540 --> 00:08:38.540
If we get the right token the store will dispatch said current user.

113
00:08:38.730 --> 00:08:44.730
But here we need some way of taking the token and decoding just the middle part or the payload to extract

114
00:08:44.790 --> 00:08:46.110
the correct object.

115
00:08:46.110 --> 00:08:49.800
So this is where we'll use that JWT decode module.

116
00:08:49.800 --> 00:08:51.390
So I'm sure we spell that correctly.

117
00:08:51.600 --> 00:08:57.290
We're going to import GWG de-code from Jadot dash de-code and this is going to take the second part

118
00:08:57.510 --> 00:09:02.350
the middle of gaji somewhat tokin the payload and decode it into the correct object that we pass to

119
00:09:02.360 --> 00:09:03.430
that current user.

120
00:09:03.660 --> 00:09:09.350
So look Arjay don't easy to decode with local storage that JWT tokin.

121
00:09:09.380 --> 00:09:10.370
So this is important.

122
00:09:10.400 --> 00:09:13.940
If someone were to try to kind of tamper with the Tokin this will stop them from happening.

123
00:09:14.000 --> 00:09:19.760
If someone were to clear the store and read oxidant know they were logged in when the stage loads we

124
00:09:19.760 --> 00:09:26.550
can rehydrate or repopulate our read like state using the Send authorization token in and our current

125
00:09:26.550 --> 00:09:28.610
user functions.

126
00:09:28.720 --> 00:09:29.680
So let's take a break here.

127
00:09:29.740 --> 00:09:33.780
We'll come back and talk about the messages list now that we're sending the right letters to Mr..
