1
00:00:00,760 --> 00:00:02,840
Are right it's time to deploy our backend.

2
00:00:02,880 --> 00:00:06,350
So what we're going to do first is make sure that we have Heroku installed.

3
00:00:06,360 --> 00:00:12,750
So if you don't have that installed yet make sure you head over to look for Heroku C-L I want to head

4
00:00:12,750 --> 00:00:14,200
over to this link right here.

5
00:00:14,210 --> 00:00:18,510
All attach to this and the section notes if you have this installed already on Mac wonderful if you're

6
00:00:18,510 --> 00:00:20,090
on Windows or on any other OS.

7
00:00:20,100 --> 00:00:21,970
Here's how you would go about doing that.

8
00:00:22,060 --> 00:00:26,460
And once you've installed that successfully you should be able to type in Heroku in the command line.

9
00:00:26,460 --> 00:00:30,900
So what I'm going to do right now is first get rid of the Get Ribault that I have because this is going

10
00:00:30,900 --> 00:00:33,730
to make sure that when I start again I'm dealing with the correct remote.

11
00:00:33,900 --> 00:00:36,320
So if you haven't made this a good reboot yet that's totally fine.

12
00:00:36,330 --> 00:00:40,410
If you have just removed that because we were dealing with a nested folder structure.

13
00:00:40,410 --> 00:00:42,910
So what I'm going to do now is get in it once again.

14
00:00:43,200 --> 00:00:48,590
I'm also going to add the node modules into my damn good ignore file.

15
00:00:48,600 --> 00:00:53,610
So it's going to make sure that when I push my Nord modules don't go with them when I add the same thing.

16
00:00:53,940 --> 00:00:59,620
So what I want to do now is create a Heroku application so I then use the Heroku create command and

17
00:00:59,620 --> 00:01:05,340
we're going to call this warbler server and I'll call this asked for my initials so let's see if that

18
00:01:05,340 --> 00:01:07,320
name exists already and it doesn't great.

19
00:01:07,320 --> 00:01:09,560
I've just created my Heroku application.

20
00:01:09,630 --> 00:01:14,840
I take a look at my remotes and get an now have this remote called Roku and that looks great.

21
00:01:14,850 --> 00:01:21,570
We're also going to add on the Mongo lab edition and this is going to allow us to have a production

22
00:01:21,570 --> 00:01:22,600
database.

23
00:01:22,600 --> 00:01:27,660
And once we create that we should see that we have an environment variable pointing to that production

24
00:01:27,690 --> 00:01:28,720
database.

25
00:01:31,320 --> 00:01:34,230
Type in Heroku config we can see what that you are.

26
00:01:34,270 --> 00:01:41,390
Looks like we're going to be accessing this you are all using process that EMV dot Mongo D-B you are.

27
00:01:41,780 --> 00:01:43,660
We're going to do that inside of our code.

28
00:01:43,660 --> 00:01:47,860
Another thing we want to do is make sure that we have a file called a proc file and this is going to

29
00:01:47,860 --> 00:01:52,180
be the file that Heroku sees to run a command to start our server.

30
00:01:52,180 --> 00:01:57,640
So let's go write some code what we need to do are just a couple of small configurations inside of our

31
00:01:57,640 --> 00:01:58,210
indexed.

32
00:01:58,230 --> 00:01:58,950
Us.

33
00:01:59,070 --> 00:02:04,930
What I'm going to do is instead of this port variable we are going to use process that EMV Dopp port

34
00:02:07,890 --> 00:02:10,120
or 80 81.

35
00:02:10,390 --> 00:02:12,390
And this means we are assigned a port by Heroku.

36
00:02:12,400 --> 00:02:17,320
We're going to use that one instead of 80 81 which we were using previously in development.

37
00:02:17,320 --> 00:02:25,510
We're also going to make sure in our index not just in models we use process that EMV Mangu D-B underscore

38
00:02:25,540 --> 00:02:29,180
you are high or mango D-B local host warbler.

39
00:02:29,200 --> 00:02:33,850
So this basically will state that if that environment variable exists use that which we will in production

40
00:02:34,150 --> 00:02:37,790
otherwise go use our local database in our proc file.

41
00:02:37,810 --> 00:02:43,690
We want to make sure we simply type in a web of colon node index dot J us and this is going to tell

42
00:02:43,690 --> 00:02:48,440
Heroku when the server starts to run node index j us to get the party started.

43
00:02:48,880 --> 00:02:54,610
So we'll make sure that we get ad dot will then get commit always need that dash and flag and we'll

44
00:02:54,610 --> 00:02:58,720
say ready to deploy once we finished this.

45
00:02:58,960 --> 00:03:03,880
Let's get push Heroku master and this will simply take that commit that we've made and send that to

46
00:03:04,120 --> 00:03:07,380
our Heroku server and take a little bit of time.

47
00:03:07,450 --> 00:03:08,670
Let's give that a second.

48
00:03:08,740 --> 00:03:13,720
Now there there's actually one thing that we forgot to do and that is we already have an environment

49
00:03:13,720 --> 00:03:16,300
variable right here inside of our envy.

50
00:03:16,520 --> 00:03:20,910
And what we need to do is we need to tell Heroku about this environment variable as well.

51
00:03:20,920 --> 00:03:28,840
So what we're going to do is add a config variable and we're going to call that secret key and we're

52
00:03:28,840 --> 00:03:35,300
going to give this some value of some kind of random string of characters.

53
00:03:35,320 --> 00:03:38,920
Now ideally you wouldn't see me set the secret key but I'm going to take this application down quite

54
00:03:38,920 --> 00:03:42,760
quickly but this is not something that you would want to share with others.

55
00:03:43,570 --> 00:03:46,280
So let's go and take a look at what our application looks like.

56
00:03:46,300 --> 00:03:51,280
We're going to type in Heroku open and this is going to open us up in the browser and it looks like

57
00:03:51,280 --> 00:03:52,840
we're getting back to this 404.

58
00:03:52,840 --> 00:03:57,250
This is actually a good thing here we're not getting some kind of internal server error we're simply

59
00:03:57,250 --> 00:03:59,830
getting a 404 from our server.

60
00:03:59,860 --> 00:04:01,950
So let's try to sign up a user.

61
00:04:02,020 --> 00:04:11,890
We're going to type in each EDP post to each colon slash slash warbler dash server dash Yes Dot Heroku

62
00:04:11,890 --> 00:04:15,530
app dot com slash API slash off.

63
00:04:15,590 --> 00:04:18,890
Slash Sign-Up And let's see what happens now.

64
00:04:19,410 --> 00:04:20,080
And this looks good.

65
00:04:20,080 --> 00:04:22,390
We're getting that same error message that we saw before.

66
00:04:22,390 --> 00:04:25,440
User name is required password is required and so is e-mail.

67
00:04:25,600 --> 00:04:34,220
So let's sign up with the username you should pick a password of secret and an e-mail of Ali and Ali

68
00:04:34,260 --> 00:04:34,990
dot com.

69
00:04:35,260 --> 00:04:39,030
Let's see if we can successfully sign up a user and that looks good.

70
00:04:39,340 --> 00:04:42,400
So it looks like our API is working right now in production.

71
00:04:42,460 --> 00:04:46,020
What we're going to do in the next screencast is configure our front end application.

72
00:04:46,150 --> 00:04:50,100
That's going to be a little trickier because we're gonna have to point back to a different proxy.

73
00:04:50,110 --> 00:04:51,950
We're going to change some things in a different file.

74
00:04:51,970 --> 00:04:54,470
We're going to add what are called Build packs on Heroku.

75
00:04:54,700 --> 00:04:58,790
But this right here should be enough to get our production application running on the back end and then

76
00:04:58,790 --> 00:05:00,240
next screencast will deploy the front in.
