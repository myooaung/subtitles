WEBVTT
1
00:00:00.510 --> 00:00:04.040
All right it's time to build some routes for our users.

2
00:00:04.090 --> 00:00:10.080
And these really aren't specific to users themselves they're really more around the idea of authentication.

3
00:00:10.230 --> 00:00:15.350
So what I'm going to do inside of handlers is make a new file called off objects.

4
00:00:15.510 --> 00:00:20.130
And remember we said that our handlers are simply functions that we're going to export and put them

5
00:00:20.160 --> 00:00:21.720
inside of our Roths.

6
00:00:21.780 --> 00:00:24.530
So we're just going to be exporting to functions right here.

7
00:00:24.660 --> 00:00:26.730
But first we're going to need our D-B.

8
00:00:27.000 --> 00:00:30.310
And that's going to be requiring dot dot slash models.

9
00:00:30.510 --> 00:00:33.440
You may be wondering what file inside of your end.

10
00:00:33.620 --> 00:00:34.790
Code is really helping me out.

11
00:00:34.860 --> 00:00:36.580
Models slash index.

12
00:00:36.660 --> 00:00:42.170
If you leave off the slash here it's the same thing actually as looking for a slash index.

13
00:00:42.180 --> 00:00:46.230
It's really nice to name your files index that yes would also be going to need.

14
00:00:46.230 --> 00:00:49.630
We are going to need the Jason web token module.

15
00:00:49.920 --> 00:00:53.450
So we're going to bring in Jason Webb token.

16
00:00:53.460 --> 00:00:58.450
And remember Jason Webb token is going to be used to create jobs or Giese on web tokens.

17
00:00:58.450 --> 00:00:59.990
He saw those in a previous screencast.

18
00:01:00.000 --> 00:01:04.000
Those are the tools that we're going to be using to Mark users as logged in.

19
00:01:04.110 --> 00:01:09.120
If there is a token that exists that's going to be created when the user either signs up successfully

20
00:01:09.150 --> 00:01:10.340
or logs in.

21
00:01:10.380 --> 00:01:17.670
So we are going to need two functions right here a function called seinen and a function that will call

22
00:01:17.840 --> 00:01:20.670
Sign-Up you can call this log in and sign up whatever you'd like.

23
00:01:20.680 --> 00:01:25.620
We'll start with sign in and sign up and actually do sign up first because we don't really have any

24
00:01:25.620 --> 00:01:27.680
users that have logged in yet.

25
00:01:27.690 --> 00:01:33.240
Now this is going to be a function that is actually going to be once again another async function and

26
00:01:33.240 --> 00:01:37.600
these functions accept request response and next.

27
00:01:37.740 --> 00:01:39.920
Remember I'm just making a function with parameters.

28
00:01:39.930 --> 00:01:43.100
We're actually going to be using them when we call this function.

29
00:01:43.230 --> 00:01:47.850
So I could call this request response but let's go with what you might have seen before with wreckin

30
00:01:47.850 --> 00:01:48.160
rest.

31
00:01:48.160 --> 00:01:53.030
It's a little bit shorter and it's what you'll see a bit more in industry as with all our async functions.

32
00:01:53.100 --> 00:01:53.930
We're going to try catch

33
00:01:57.150 --> 00:01:58.260
and inside of this statement.

34
00:01:58.260 --> 00:01:59.580
What do we really want to do here.

35
00:01:59.580 --> 00:02:07.020
We first want to create the user once we create the user we then want to create a token.

36
00:02:07.020 --> 00:02:13.530
We call this assigning a token inside of our catch if something goes wrong we actually want to see what

37
00:02:13.530 --> 00:02:27.140
kind of error and if it is a certain error we can respond with username or email already taken.

38
00:02:27.240 --> 00:02:33.780
Otherwise just send back a generic 400 some kind of bad request.

39
00:02:33.810 --> 00:02:38.580
So ideally we'd like to send back a pretty helpful error message so that our client when making an Ajax

40
00:02:38.580 --> 00:02:40.660
request can display that to the user.

41
00:02:40.770 --> 00:02:44.450
But if it's something else that goes on we're just going to return a bad request.

42
00:02:44.490 --> 00:02:46.260
The status code for.

43
00:02:46.680 --> 00:02:48.350
So how do we fill in the blanks here.

44
00:02:48.360 --> 00:02:53.370
Well there's actually one more thing we need to do before we start creating a token we need to think

45
00:02:53.370 --> 00:02:55.640
back to how these tokens are created.

46
00:02:55.650 --> 00:03:01.500
So I'm going to hop over to JWT dot IO and if you remember adjacent what token is comprised of three

47
00:03:01.500 --> 00:03:05.280
parts the header the payload and the signature.

48
00:03:05.280 --> 00:03:09.870
The payload is where we're going to put information that can be decoded but the signature is what's

49
00:03:09.870 --> 00:03:15.630
going to be very important to securely create these tokens and the signature actually consists of a

50
00:03:15.630 --> 00:03:18.330
secret key or some kind of string.

51
00:03:18.330 --> 00:03:23.280
This is a string that we're going to store on the server but that we don't want people to get access

52
00:03:23.280 --> 00:03:23.930
to.

53
00:03:24.270 --> 00:03:29.850
So in order to create variables that people don't have access to if they were to for some reason get

54
00:03:29.850 --> 00:03:35.370
access to our server we need to create what's called an environment variable and in node our environment

55
00:03:35.370 --> 00:03:41.060
variables exist on process that envy to create environment variables.

56
00:03:41.070 --> 00:03:43.450
We have to load them from some file.

57
00:03:43.560 --> 00:03:49.980
And what I'm going to do is make a file at the very root of my folder and I'll actually do this in the

58
00:03:49.980 --> 00:03:50.490
terminal.

59
00:03:50.530 --> 00:03:51.700
Keep it simple.

60
00:03:51.960 --> 00:03:59.690
I'm going to make a file called Dot D-NV and inside of here I'm going to put some kind of secret key.

61
00:04:00.180 --> 00:04:06.240
So what I'll do inside of my ini file go back to my text editor and inside of here I will simply add

62
00:04:07.080 --> 00:04:11.970
a key of secret key and some kind of value.

63
00:04:12.000 --> 00:04:13.950
No spaces here are very important.

64
00:04:14.030 --> 00:04:16.980
Now ideally this would be some kind of random string.

65
00:04:16.980 --> 00:04:18.530
I'm going to type a bunch of jibberish.

66
00:04:18.540 --> 00:04:20.430
It really doesn't matter.

67
00:04:21.300 --> 00:04:24.880
Now how do I take this ENVI variable and load it in my application.

68
00:04:24.900 --> 00:04:30.660
Well there is a module that I need to install and that is called Dot envy.

69
00:04:31.110 --> 00:04:35.010
We're going to use that EMV to load our environment variables.

70
00:04:35.360 --> 00:04:39.090
So you might be wondering well where do I actually load those environment variables.

71
00:04:39.120 --> 00:04:41.280
Do we do it inside of our office.

72
00:04:41.310 --> 00:04:41.690
Yes.

73
00:04:41.700 --> 00:04:47.900
Well we actually don't need to because what we're going to do is inside of our index j us not over here

74
00:04:47.910 --> 00:04:53.100
the other index that s We're going to load all of our environment variables we're going to do that at

75
00:04:53.100 --> 00:04:55.290
the very top using require.

76
00:04:55.490 --> 00:04:59.080
Doc ENVI dot config.

77
00:05:00.110 --> 00:05:03.560
And what that's going to do is load all of our environment variables.

78
00:05:03.920 --> 00:05:06.590
So where are we actually going to be using these environment variables.

79
00:05:06.610 --> 00:05:14.300
Well we're going to be using it inside of our off Jess so to create the token we're going to need some

80
00:05:14.300 --> 00:05:20.800
kind of secret key and we get that unprocessed that you envy whatever we need our environment variable.

81
00:05:20.990 --> 00:05:22.420
What do we need an environment variable.

82
00:05:22.430 --> 00:05:27.340
We called it secret underscored key and you'll traditionally see those in capital letters.

83
00:05:27.410 --> 00:05:30.130
So that's what I'm going to use to create that token.

84
00:05:30.170 --> 00:05:33.420
So now we need to start filling in the blanks once we make this route.

85
00:05:33.440 --> 00:05:36.140
We can start testing it really quickly which is nice.

86
00:05:36.230 --> 00:05:38.090
So we'll get testing to the terminal very soon.

87
00:05:38.090 --> 00:05:39.950
But we have to make this function first.

88
00:05:39.950 --> 00:05:41.060
So how do we create a user.

89
00:05:41.060 --> 00:05:46.370
Well we got to use our model we are going to make a new user and that is going to be the result of waiting

90
00:05:46.610 --> 00:05:48.010
for a promise to resolve.

91
00:05:48.050 --> 00:05:53.420
That promise is the creation of that user and we'll pass in that body.

92
00:05:53.420 --> 00:05:59.720
This is going to be the data coming in from some Ajax request or in our case in each UDP requests from

93
00:05:59.720 --> 00:06:00.750
the terminal.

94
00:06:01.040 --> 00:06:03.370
We then get a bunch of properties on our user.

95
00:06:03.380 --> 00:06:10.310
So what I'd like to do is instead of using user ID and user username I'm going to use some destructuring

96
00:06:10.520 --> 00:06:14.990
and I'm going to restructure ID user name and profile image.

97
00:06:14.990 --> 00:06:17.740
You are up from user.

98
00:06:18.110 --> 00:06:24.260
And the reason why I want to do that is because when I make my token I don't want to pass in user id

99
00:06:24.260 --> 00:06:26.110
user that user name and so on.

100
00:06:26.420 --> 00:06:34.550
So I'm going to make a token and that is the result of the Jason web token module and the sine function.

101
00:06:34.550 --> 00:06:36.470
And we can see right here what is the first thing.

102
00:06:36.490 --> 00:06:40.490
It is the payload and the payload itself can be an object.

103
00:06:40.490 --> 00:06:45.290
These are the values that will be passed to the tokens so when I decode them I'll see them it could

104
00:06:45.370 --> 00:06:51.920
pass in a key ID and a value Id pass in a key of username and a value of username and if you've seen

105
00:06:51.920 --> 00:06:56.350
that here 2015 section you might be saying hey wait you don't have to do that and you're totally right.

106
00:06:56.450 --> 00:06:58.640
My keys and values are the same.

107
00:06:58.670 --> 00:07:01.220
I can simply just do it like this.

108
00:07:01.220 --> 00:07:05.400
So I want to pass in the Id the username and the profile image.

109
00:07:05.440 --> 00:07:06.200
You are.

110
00:07:06.350 --> 00:07:11.030
This means that if I decrypt the token I can get access to the ID username and profile image.

111
00:07:11.030 --> 00:07:16.280
This is going to be very helpful for creating a current user or someone who's logged in.

112
00:07:16.310 --> 00:07:17.580
So what's next.

113
00:07:17.720 --> 00:07:24.890
Once we sign this object we need to pass in some kind of secret or private key and that is going to

114
00:07:24.890 --> 00:07:32.210
be processed that envy that secret key that is going to be the secret key that we load from our environment

115
00:07:32.240 --> 00:07:33.250
variable.

116
00:07:33.920 --> 00:07:42.290
And once we finish that we can simply return a status of 200 which is everything is OK and we'll add

117
00:07:42.290 --> 00:07:49.310
some grease on response and inside of here we will send back the I.D. the user name the profile image

118
00:07:49.310 --> 00:07:54.280
you are l and the token we're going to send this information back so that we can see what it is and

119
00:07:54.280 --> 00:07:58.010
it will be very helpful when we use some javascript to collect that data.

120
00:07:58.480 --> 00:08:02.750
Now unfortunately the way that mongoose handles errors is not always the nicest.

121
00:08:02.750 --> 00:08:07.340
So this is something that you would see from doing this kind of stuff a bit but there is a specific

122
00:08:07.340 --> 00:08:13.350
code when a validation fails and that is 11000 has a number.

123
00:08:13.610 --> 00:08:17.890
And this is simply if a validation fails.

124
00:08:18.050 --> 00:08:19.340
It's a pretty ugly message.

125
00:08:19.340 --> 00:08:27.110
So instead of just returning the default message we're going to say error message is sorry that username

126
00:08:27.560 --> 00:08:31.410
or and or e-mail is taking.

127
00:08:31.730 --> 00:08:35.690
So instead of the default mongoose error message which is really long and kind of messy and kind of

128
00:08:35.690 --> 00:08:40.640
cryptic we want to make it much easier for our front end developers or our future self to get back a

129
00:08:40.640 --> 00:08:43.450
nice piece of text that we can display.

130
00:08:43.940 --> 00:08:50.090
And no matter what we're always going to return next and inside of here we'll pass in a status of 400

131
00:08:50.510 --> 00:08:53.750
and a message of that error message.

132
00:08:56.200 --> 00:09:01.540
We need to do one more thing before we start actually testing this and that is adding that logic to

133
00:09:01.630 --> 00:09:02.780
our reps.

134
00:09:02.950 --> 00:09:05.500
So we're going to do it inside of our routes file.

135
00:09:05.500 --> 00:09:07.620
We are going to make an off that.

136
00:09:07.670 --> 00:09:08.480
Yes.

137
00:09:08.650 --> 00:09:13.210
And the good news is since we meet a handler earlier the code here is very minimal.

138
00:09:13.210 --> 00:09:17.930
We're going to bring in Express and that is going to be requiring Express.

139
00:09:18.490 --> 00:09:26.730
And then we're going to create a variable called router which is the result of the Express router.

140
00:09:27.690 --> 00:09:32.210
Is this simply a nice way to abstract our routes into individual files so we don't put everything inside

141
00:09:32.230 --> 00:09:32.870
that index.

142
00:09:32.890 --> 00:09:43.540
Yes what we're then going to do is bring in a function called Sign up from require dot dot slash handlers

143
00:09:43.840 --> 00:09:45.130
slash off.

144
00:09:45.130 --> 00:09:47.560
Remember this right here is destructuring as well.

145
00:09:47.560 --> 00:09:52.660
If I wanted to I could bring in the entire module and then attach to sign up if I want.

146
00:09:52.960 --> 00:09:55.300
Or I can just restructure the sign up function.

147
00:09:55.300 --> 00:09:58.840
This is one way of going about bringing in that specific function.

148
00:09:59.290 --> 00:10:08.590
So what I'd like to do is say that if there is any kind of post request to slash sign up I want to run

149
00:10:09.040 --> 00:10:16.710
my Sign-Up function and then I'm going to export out module that exports the router.

150
00:10:16.900 --> 00:10:20.040
What's really nice about this is my router file is very clean.

151
00:10:20.140 --> 00:10:23.330
If I want to include other functions right here no problem.

152
00:10:23.380 --> 00:10:28.740
The functions themselves live in the handlers folder and the routes are all placed right over here.

153
00:10:28.750 --> 00:10:34.380
This makes isolating those two quite easy makes it easier to grow or scale this application.

154
00:10:34.420 --> 00:10:39.730
So what am i actually going to be using these user routes back in the index G-S where my routes are

155
00:10:39.730 --> 00:10:40.530
located.

156
00:10:40.780 --> 00:10:48.380
I'm going to be using these off routes so we will set a variable called Auth. routes to be require dot

157
00:10:48.640 --> 00:10:53.810
slash routes slash off and what am I going to do with these routes.

158
00:10:53.860 --> 00:11:02.260
I'm going to say if there is ever any request that starts with Slash API slash off go and use these

159
00:11:02.260 --> 00:11:05.290
off routes.

160
00:11:05.290 --> 00:11:11.690
So what I've done is I have prefixed all of my routes with Slash AP I-Slash off inside of the all throughout.

161
00:11:11.770 --> 00:11:15.690
It's going to be slash seinen inside of here.

162
00:11:15.700 --> 00:11:22.090
I'm also going to be using the slash Sign-Up function so I should have a route now for a post to slash

163
00:11:22.090 --> 00:11:30.820
API slash off slash whatever I have in my off routes and that is coming from routes slash off.

164
00:11:31.120 --> 00:11:32.840
That is a sign up.

165
00:11:32.890 --> 00:11:35.640
So here's where we finally get to test this route.

166
00:11:36.010 --> 00:11:38.850
So how can we do that we can open up postman.

167
00:11:39.160 --> 00:11:44.620
We could try to use Perl and Kearl is a little bit too much to make sure you get your strings right

168
00:11:44.620 --> 00:11:49.130
and pass and all these flags that you have to research and post-bin is a bit tricky as well.

169
00:11:49.150 --> 00:11:51.170
There are lots of little things or gotchas here.

170
00:11:51.220 --> 00:11:56.510
So I want to introduce you to my favorite tool that is used quite a bit called HGT pie.

171
00:11:56.740 --> 00:11:59.790
Make sure that I spell that correctly and I'll show you what it looks like.

172
00:11:59.800 --> 00:12:02.890
You can use it on Mac or Windows or Linux.

173
00:12:02.920 --> 00:12:04.320
It works all over the place.

174
00:12:04.390 --> 00:12:05.650
Go see what this looks like.

175
00:12:06.130 --> 00:12:09.020
Here's a nice little example of some response that we get back.

176
00:12:09.040 --> 00:12:13.480
And here you can see all the installation instructions for all different kinds of systems.

177
00:12:13.510 --> 00:12:17.320
What I want to point your attention to is the simple usage right here.

178
00:12:17.320 --> 00:12:21.910
All we have to specify is HDTV in the terminal we can do this anywhere.

179
00:12:21.910 --> 00:12:26.630
A post the route and then some fields that we need to pass in.

180
00:12:26.860 --> 00:12:30.830
So let's try to make a post request to our End Point to our API.

181
00:12:31.060 --> 00:12:37.270
We'll do that using each TDP post localhost eighty eighty one.

182
00:12:37.340 --> 00:12:39.610
You remember the route well if not it's OK.

183
00:12:39.970 --> 00:12:41.650
Let's look back here inside of our index.

184
00:12:41.650 --> 00:12:45.350
Yes that was slash API slash off.

185
00:12:45.790 --> 00:12:52.400
And after that whatever we have over here slash sign up slash AB I-Slash or slash sign up.

186
00:12:52.420 --> 00:12:58.340
So let's see what happens when we make this post request and it says can not read Property create undefined.

187
00:12:58.470 --> 00:12:59.910
Well why might that be the case.

188
00:13:00.070 --> 00:13:06.850
Well if we take a look inside of our user we're exporting out that model really well but inside of our

189
00:13:06.850 --> 00:13:10.600
index j us we're not actually doing much with that model.

190
00:13:10.690 --> 00:13:12.320
So you might have seen this mistake before.

191
00:13:12.430 --> 00:13:21.290
But what I'm going to do is simply export out a property on whatever I send from index called user.

192
00:13:21.640 --> 00:13:25.870
And it's going to be the result of my entire user model.

193
00:13:25.900 --> 00:13:31.430
This is essentially the idea of bundling what you can do here is create lots of properties on module

194
00:13:31.430 --> 00:13:33.990
that exports for all of your different models.

195
00:13:34.180 --> 00:13:35.550
So you may be wondering where is that.

196
00:13:35.550 --> 00:13:37.010
DB eating was coming from.

197
00:13:37.010 --> 00:13:39.230
Well I accidentally forgot one step.

198
00:13:39.230 --> 00:13:42.610
If we take a look at this db variable that I was using inside of.

199
00:13:42.610 --> 00:13:43.500
Off.

200
00:13:43.630 --> 00:13:48.160
This essentially is coming from index but you might have said well wait a minute we didn't export anything

201
00:13:48.160 --> 00:13:50.190
from index and you would have been correct.

202
00:13:50.320 --> 00:13:53.300
I just forgot this line right here to export that.

203
00:13:53.710 --> 00:13:56.690
So if we take a look at hear what's going make that post request again.

204
00:13:56.940 --> 00:14:01.830
And now it says user validation fail the password path as required username is required.

205
00:14:01.830 --> 00:14:02.820
Email is required.

206
00:14:02.970 --> 00:14:08.250
Well that's actually a good thing because I should have to put in a password and a user name and an

207
00:14:08.250 --> 00:14:08.750
email.

208
00:14:08.880 --> 00:14:11.050
But where is this error message coming from.

209
00:14:11.190 --> 00:14:14.970
Well remember we're sending back this entire thing.

210
00:14:15.210 --> 00:14:22.890
Thanks to our wonderful handler right here because we are sending back a status of 400 and a message

211
00:14:22.890 --> 00:14:24.180
of error message.

212
00:14:24.240 --> 00:14:28.250
But if you think about it where did this whole nice object format come from.

213
00:14:28.260 --> 00:14:31.200
Think back that error handler we bolt a little while ago.

214
00:14:31.350 --> 00:14:35.470
The key of error and the value of message inside of our error handler.

215
00:14:35.640 --> 00:14:40.660
We were able to send back a property of message on an object called errors.

216
00:14:40.660 --> 00:14:46.230
So no matter what kind of error we have we're always going to send back this specific kind of object.

217
00:14:46.230 --> 00:14:49.250
This is going to be dealing with this on the front end quite quite simple.

218
00:14:49.530 --> 00:14:53.630
So you can see here we need that username we need an e-mail and we need a password.

219
00:14:53.640 --> 00:14:54.830
So how do we specify that.

220
00:14:54.840 --> 00:14:57.010
Well with each DD PI It's real easy.

221
00:14:57.030 --> 00:14:59.890
We can just simply specify those with an equal sign in the middle.

222
00:15:00.030 --> 00:15:10.610
So I'll give this the user name of first user a password of secret and an email of the test at the first

223
00:15:10.620 --> 00:15:13.400
test Ducktown.

224
00:15:14.010 --> 00:15:21.630
And what I get back is a successful response I get back an object with an ID a token and a username

225
00:15:22.140 --> 00:15:26.330
inside of this token there exists what came in the payload.

226
00:15:26.360 --> 00:15:28.180
And we'll see that in a little bit.

227
00:15:28.250 --> 00:15:31.040
What I want to do now is pause take a break.

228
00:15:31.110 --> 00:15:34.590
We'll come back and chat about this more in the next screencast because there are a lot of moving parts

229
00:15:34.620 --> 00:15:37.190
and I want to go review what we did from the beginning.
