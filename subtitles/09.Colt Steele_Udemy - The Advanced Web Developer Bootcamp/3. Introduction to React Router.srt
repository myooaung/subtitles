1
00:00:01,010 --> 00:00:06,430
X we'll talk about re-act router a tool that lets us conditionally render components based on the URL

2
00:00:06,490 --> 00:00:16,150
and also change the euro object is a way to describe reactor outer version for differentiate browser

3
00:00:16,150 --> 00:00:21,260
router and hash router and to use link switch and route components

4
00:00:24,290 --> 00:00:30,350
so re-act router is a library to manage routing in your single page application in our re-act apps.

5
00:00:31,070 --> 00:00:37,250
And version four was launched in March 2017 so relatively recently from the time of this recording and

6
00:00:37,250 --> 00:00:39,850
it has some big changes compared to version 3.

7
00:00:39,860 --> 00:00:44,450
So if you're looking at tutorials online make sure it's talking about Version 4 because the differences

8
00:00:44,450 --> 00:00:52,670
between 3 and 4 are pretty large and version 4 focuses on a declarative API that uses components to

9
00:00:52,670 --> 00:00:55,130
make rendering decisions.

10
00:00:55,220 --> 00:00:58,380
We'll see what that means as we go.

11
00:00:58,520 --> 00:01:03,020
One of the main components that we use when we're setting up our application is a router and there's

12
00:01:03,020 --> 00:01:03,850
two main options.

13
00:01:03,850 --> 00:01:05,970
A browser router or a Hash router.

14
00:01:05,990 --> 00:01:07,610
So what's the difference.

15
00:01:07,610 --> 00:01:13,880
Well the browser router use the history object and it makes changes to the URL whereas the hash router

16
00:01:14,390 --> 00:01:20,280
doesn't use the ASTRAEA object and it makes changes to the hash after the or.

17
00:01:20,540 --> 00:01:27,350
So if you compare these two sets of your Else the browser rodder if we navigate from here to here change

18
00:01:27,350 --> 00:01:29,970
the URL and then here to here change that again.

19
00:01:30,440 --> 00:01:31,370
So these are all separate.

20
00:01:31,380 --> 00:01:36,290
Or else the hash router on the other hand isn't modifying the history.

21
00:01:36,290 --> 00:01:38,830
Instead it's adding a hash at the end.

22
00:01:38,900 --> 00:01:43,040
The hash router can make sense of this hash in order to rerun the page.

23
00:01:43,040 --> 00:01:47,920
So bookmarking still works but I think it's just sort of a weird user experience.

24
00:01:48,020 --> 00:01:51,600
So I would always prefer to use the browser writer instead of the hash router.

25
00:01:54,730 --> 00:02:00,310
Like we talked about before with the bookmarking problem the browser router requires server side support

26
00:02:00,840 --> 00:02:03,560
the hash router does not require server side support.

27
00:02:05,460 --> 00:02:11,820
And in my opinion you should always use the browser router if possible if for whatever reason your setup

28
00:02:11,820 --> 00:02:17,070
doesn't allow you to have server side support then use the hash router but otherwise always use the

29
00:02:17,070 --> 00:02:18,950
browser router.

30
00:02:18,960 --> 00:02:20,280
So let's talk about set up.

31
00:02:20,340 --> 00:02:25,580
The first thing to install just NPM installed dash dash save the actor writer Dom.

32
00:02:25,590 --> 00:02:28,890
Now there are other types of re-act routers.

33
00:02:28,890 --> 00:02:32,000
For example there's a native router for Riak native.

34
00:02:32,430 --> 00:02:37,650
So make sure that you install the down version reactor and Dom will have a dependency on the reactor

35
00:02:37,650 --> 00:02:38,460
core module

36
00:02:42,040 --> 00:02:44,530
and here's what setup looks like in your code.

37
00:02:44,530 --> 00:02:48,930
So at the top level of your application you're going to import browser router.

38
00:02:49,210 --> 00:02:55,690
And typically I like to rename it as router and then when I'm rendering my toplevel component like app

39
00:02:56,470 --> 00:02:58,460
I will wrap it in a router.

40
00:02:58,870 --> 00:03:05,120
So this set up is necessary in order to use any of the components that were coming to talk about next.

41
00:03:05,120 --> 00:03:10,130
So once we have router set up the next question is how do we conditionally render something based on

42
00:03:10,130 --> 00:03:11,280
the L..

43
00:03:11,840 --> 00:03:16,390
Well in this example we have two components these stateless functional components called home page and

44
00:03:16,400 --> 00:03:18,110
about page.

45
00:03:18,110 --> 00:03:25,050
And we have this switch demo component that conditionally renders either this about Paige or this home

46
00:03:25,050 --> 00:03:27,980
page depending on the current state of the oracle.

47
00:03:28,490 --> 00:03:34,670
So the route component conditionally renders the component mentioned here as long as this path matches

48
00:03:34,670 --> 00:03:38,590
the current Eurail But does the switch component do switch.

49
00:03:38,630 --> 00:03:41,280
Essentially makes these routes if elses.

50
00:03:41,540 --> 00:03:48,740
So if the first one renders even if the second one matches it will not be rendered so soon as one renders

51
00:03:48,860 --> 00:03:51,430
none of the subsequent route's will render.

52
00:03:51,560 --> 00:03:53,140
We don't need the switch statement at all.

53
00:03:53,140 --> 00:03:57,470
We could just have the routes here but it's usually nice to have just so you don't accidentally render

54
00:03:57,740 --> 00:04:03,470
two components that happen to match the same euro.

55
00:04:03,470 --> 00:04:08,660
Next up the linked component so the link component is essentially just an anchor tag except when you

56
00:04:08,660 --> 00:04:11,450
click that link reactor out or takes over.

57
00:04:11,810 --> 00:04:18,280
And rather than doing the default link behavior the link will use the history object to change the URL.

58
00:04:18,290 --> 00:04:24,500
So in this example we're using the switch demo component that we saw earlier and then we have two links

59
00:04:24,620 --> 00:04:32,870
either at home or in about if home is clicked on the euro will be changed to slash and home page component

60
00:04:32,870 --> 00:04:39,590
inside of here will be rendered if about is clicked on the url be changed to slash about and then the

61
00:04:39,590 --> 00:04:41,890
about page inside of this component will be rendered

62
00:04:44,670 --> 00:04:47,320
the Aveling component is similar to the bling component.

63
00:04:47,500 --> 00:04:52,230
It's designed for navigation so it has this additional prop called active style.

64
00:04:52,600 --> 00:04:58,260
And whenever you're currently on this path active style will be active.

65
00:04:58,270 --> 00:05:05,260
So in this example if I'm on the home page on slash then the link will be colored red and if I'm on

66
00:05:05,260 --> 00:05:09,040
the About page slash about the link here will also be color red.

67
00:05:09,040 --> 00:05:11,500
And then this will be the default style.

68
00:05:11,560 --> 00:05:14,380
Let's see this component in action.

69
00:05:14,470 --> 00:05:21,160
So in Cloud Nine I've made a project called routeing demo and if you look at Packards Jaison we have

70
00:05:21,160 --> 00:05:29,750
react and react Darman stalled version 16 and then also react routed Dom and our code is inside of Abdus

71
00:05:32,800 --> 00:05:35,650
so I'd modify the styling slightly.

72
00:05:35,650 --> 00:05:42,400
I've given each link a default style of margin five pixels and then the active style takes away text

73
00:05:42,400 --> 00:05:47,830
decoration makes the cursor default and grays out the link.

74
00:05:47,830 --> 00:05:49,310
So let's just see what it looks like.

75
00:05:51,250 --> 00:05:52,590
So this is the application.

76
00:05:52,600 --> 00:05:59,830
It doesn't look like much but when I'm on the home page the URL is slash and you can see this active

77
00:05:59,830 --> 00:06:01,630
style is active.

78
00:06:01,660 --> 00:06:07,450
Now when I click on the About page this one is now active and you also notice our content has changed

79
00:06:07,450 --> 00:06:09,330
because of the switch demo component.

80
00:06:09,610 --> 00:06:19,890
Let's look at that again just to remind ourselves.

81
00:06:19,920 --> 00:06:24,060
So this switch demo uses a switch component inside two routes.

82
00:06:24,060 --> 00:06:31,380
If the route is slash that will render home page if the route is slash about the render about.

83
00:06:31,470 --> 00:06:40,120
So let's talk this through one more time in the app just I'll click on a link like Slash about the active

84
00:06:40,120 --> 00:06:48,300
style takeover which makes my link gray and then inside of switch demo we go back here if the route

85
00:06:48,300 --> 00:06:54,580
matches exactly slash about then the about component will be rendered.

86
00:06:54,750 --> 00:06:56,360
So that's exactly what's happening here.

87
00:06:56,370 --> 00:06:59,850
When I click on home the URL changes which causes this to change.

88
00:06:59,900 --> 00:07:03,700
Right click on about again the URL changes which causes this change.

89
00:07:05,660 --> 00:07:08,000
Next we'll talk about a few more reactive router features.
