1
00:00:00,420 --> 00:00:03,960
Now that we've seen Paul let's take a look at apply.

2
00:00:03,960 --> 00:00:09,510
Remember that the only difference between these two is when we have arguments to the function that we're

3
00:00:09,510 --> 00:00:14,790
using call or apply on in the previous example with the say hi method.

4
00:00:14,790 --> 00:00:20,510
It did not matter if we used call or apply We only start to see a difference with call and apply.

5
00:00:20,520 --> 00:00:22,290
When we start adding arguments.

6
00:00:22,440 --> 00:00:27,990
So if we take a look at the example below it seems like call and apply are identical but things get

7
00:00:27,990 --> 00:00:30,080
different on the add parameters.

8
00:00:30,420 --> 00:00:34,290
Let's take a look at the add numbers function to illustrate this point.

9
00:00:34,380 --> 00:00:40,530
Here we are concatenating the value of the first name property with the string just calculated and the

10
00:00:40,530 --> 00:00:45,270
sum of four numbers which are parameters to the Add numbers function.

11
00:00:45,270 --> 00:00:51,030
If we want to use the Add numbers function and set the keyword this to refer to the only object we can

12
00:00:51,030 --> 00:00:57,630
use call or block in order to pass arguments to the function using call we separate them with a comma.

13
00:00:57,720 --> 00:01:05,430
So you can see here that when we use call the arguments you pass are one two three and four separated

14
00:01:05,430 --> 00:01:06,610
by a comma.

15
00:01:06,930 --> 00:01:12,560
In the case of apply we passed all of the arguments as values in one array.

16
00:01:12,660 --> 00:01:14,630
So it looks very similar to call.

17
00:01:14,910 --> 00:01:20,620
But instead of comma separated values as arguments we put them all inside of one array.

18
00:01:21,090 --> 00:01:26,860
So one might apply be useful when a function does not accept an array as a parameter.

19
00:01:26,940 --> 00:01:31,430
We can use apply and spread out all the values in an array.

20
00:01:32,140 --> 00:01:37,090
Let's imagine that we have an array of numbers and we want to figure out the highest number in that

21
00:01:37,090 --> 00:01:38,180
array.

22
00:01:38,200 --> 00:01:44,290
Mathematics is a friendly function that does that for us but it does not except an array it accepts

23
00:01:44,290 --> 00:01:47,060
a list of comma separated values.

24
00:01:47,110 --> 00:01:50,520
So if we pass an array to math Max we get back.

25
00:01:50,530 --> 00:01:51,870
Not a number.

26
00:01:51,880 --> 00:01:57,880
However if we use apply we can pass an array of values and they will be spread out.

27
00:01:58,030 --> 00:02:03,970
In the case below we don't care about explicitly setting the value of the keyword this we just care

28
00:02:04,030 --> 00:02:07,310
about spreading an array of values out.

29
00:02:07,320 --> 00:02:11,660
Let's take a look at another function some values which adds three numbers.

30
00:02:11,970 --> 00:02:18,210
If we pass in an array we don't get the output we want but if we use apply to spread out all the values

31
00:02:18,390 --> 00:02:24,680
we get the correct output in the next video we're going to talk a little more about byde and see how

32
00:02:24,680 --> 00:02:27,740
helpful it can be when working with asynchronous code.

33
00:02:27,820 --> 00:02:28,290
See even.
