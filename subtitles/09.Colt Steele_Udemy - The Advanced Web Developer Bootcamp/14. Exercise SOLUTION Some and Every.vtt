WEBVTT
1
00:00:00.390 --> 00:00:05.740
Welcome back in this video we're going to be going over solutions to the sum and every exercises.

2
00:00:06.000 --> 00:00:11.580
The first function we're going to implement is the HAs are number function which accepts an array here

3
00:00:11.610 --> 00:00:17.040
we're going to use the SUM function to iterate over the array and see if there's at least one value

4
00:00:17.100 --> 00:00:20.040
that is not divisible by 2 instead of the callback.

5
00:00:20.070 --> 00:00:26.250
We can return the expression Valma to not equals zero for the next function has zero.

6
00:00:26.250 --> 00:00:30.340
We need to accept a number and see if it contains any zeros.

7
00:00:30.360 --> 00:00:34.870
Let's first convert that number to a string then split it by each digit.

8
00:00:34.950 --> 00:00:39.920
Here we can use the sum method to see if there's a single character that is a zero.

9
00:00:39.960 --> 00:00:44.550
Since each of these values are strings we just need to make sure we're comparing each value with the

10
00:00:44.550 --> 00:00:48.830
string 0 for the next function has only odd numbers.

11
00:00:48.860 --> 00:00:54.200
We need to use the every function to iterate over each value and make sure that every single one is

12
00:00:54.200 --> 00:00:56.710
not that visible by two here.

13
00:00:56.720 --> 00:01:01.700
We'll use every and inside of the callback will return the expression to see if the value we're iterating

14
00:01:01.700 --> 00:01:06.280
over is not the visible by two for an next function has no duplicates.

15
00:01:06.290 --> 00:01:11.690
We're going to accept an array and here we're going to use that everything to see if the index of a

16
00:01:11.690 --> 00:01:15.530
value is the same as the last index of that value.

17
00:01:15.530 --> 00:01:19.910
This one is a little bit tricky but what we're doing here is making sure that the index of a value is

18
00:01:19.910 --> 00:01:20.570
the same.

19
00:01:20.570 --> 00:01:23.160
From the beginning and from the end.

20
00:01:23.480 --> 00:01:28.990
This will ensure that there are no duplicate values at different indices in the next function has certain

21
00:01:28.990 --> 00:01:29.520
key.

22
00:01:29.690 --> 00:01:34.040
We're going to use the every method to iterate through the array and make sure that the key we're looking

23
00:01:34.040 --> 00:01:37.100
for is in each object we're iterating over.

24
00:01:37.100 --> 00:01:43.890
We can use the keyword to see if a key is inside of an object or the last function has a certain value.

25
00:01:43.910 --> 00:01:50.030
We're going to once again use every will iterate through the array and check to see if each value at

26
00:01:50.030 --> 00:01:53.090
a specific key is the same as our search value.

27
00:01:53.120 --> 00:01:58.430
We need to use bracket notation so the Javascript can evaluate the key variable and not hard coded to

28
00:01:58.430 --> 00:02:02.060
the string key and that's all for the sum and every exercises.

29
00:02:02.060 --> 00:02:03.520
See you in the next video.
