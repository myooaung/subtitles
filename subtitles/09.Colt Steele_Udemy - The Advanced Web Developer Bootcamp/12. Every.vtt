WEBVTT
1
00:00:00.440 --> 00:00:01.250
Welcome back.

2
00:00:01.410 --> 00:00:06.720
In a previous video we saw how to use the SUM function which iterates through an array and runs a callback

3
00:00:06.810 --> 00:00:08.680
on each value in the array.

4
00:00:08.790 --> 00:00:12.060
The callback function returns true for any of the values.

5
00:00:12.120 --> 00:00:14.870
The entire function returns true.

6
00:00:14.870 --> 00:00:20.420
Now let's examine a similar function called every Just like sum every will iterate through an array

7
00:00:20.780 --> 00:00:23.590
and run a callback function for each value in the array.

8
00:00:23.930 --> 00:00:30.560
However if the callback function returns false for any single value the entire every function returns

9
00:00:30.560 --> 00:00:31.790
false.

10
00:00:31.790 --> 00:00:38.690
The idea here is that in order for every to return true every single value we iterate over has to return

11
00:00:38.690 --> 00:00:41.000
true to the callback function.

12
00:00:41.110 --> 00:00:46.720
Just like filter and sum the result of the callback function will always be evaluated as a boolean.

13
00:00:47.170 --> 00:00:48.690
Let's see a couple examples.

14
00:00:48.820 --> 00:00:52.510
Here we have a variable called R but the values 1 2 and 3.

15
00:00:52.510 --> 00:00:57.590
Let's invoke the every function on that array and pass a callback to it inside of the callback function.

16
00:00:57.610 --> 00:01:01.210
We have access to each value index an array that we're iterating over.

17
00:01:01.330 --> 00:01:04.480
Just like with all the other array methods we've seen so far.

18
00:01:04.630 --> 00:01:10.290
Now inside of this callback or returning an expression to see if the value we are at is less than zero.

19
00:01:10.660 --> 00:01:16.410
Since every value in this array is less than zero the entire every function will return true.

20
00:01:16.510 --> 00:01:20.230
What would happen if we wanted to see if every value is greater than 2.

21
00:01:20.320 --> 00:01:21.990
In our case that is not true.

22
00:01:22.060 --> 00:01:24.310
So the every function will return false.

23
00:01:24.490 --> 00:01:28.600
You can think of the every function like a more strict version of some.

24
00:01:28.620 --> 00:01:29.570
So how does it work.

25
00:01:29.790 --> 00:01:31.430
I think you know where I'm going with this.

26
00:01:31.440 --> 00:01:33.540
Let's remember how every works.

27
00:01:33.540 --> 00:01:38.670
It iterates through an array runs a callback function on each value in the array and if the callback

28
00:01:38.670 --> 00:01:45.120
function returns False for a single value the entire every function returns false otherwise it returns

29
00:01:45.120 --> 00:01:45.780
true.

30
00:01:45.780 --> 00:01:50.810
Pause the video if you'd like to try to implement your own every function.

31
00:01:50.850 --> 00:01:56.070
All right let's make a function called every which accepts an array and a callback function will start

32
00:01:56.070 --> 00:01:57.950
with a for loop and initialize a variable.

33
00:01:57.960 --> 00:02:03.660
I add 0 will loop as long as I'm less than the length of the array and will increment by one after each

34
00:02:03.660 --> 00:02:05.830
iteration inside of the for loop.

35
00:02:05.880 --> 00:02:10.860
We want to see if the result of the callback function with the Value Index and array passed to it is

36
00:02:10.860 --> 00:02:11.820
false.

37
00:02:11.820 --> 00:02:17.820
If it is let's return false and exit the function and loop once we're done looping if we have not return

38
00:02:17.820 --> 00:02:22.490
false at any time that means that every value has returned true from the callback function.

39
00:02:22.620 --> 00:02:25.740
In our every function will return true.

40
00:02:25.740 --> 00:02:28.280
Now let's see how we can use every in our own functions.

41
00:02:28.290 --> 00:02:33.090
Here we have a function called all lowercase which checks to see if every character in the string is

42
00:02:33.100 --> 00:02:34.010
lowercase.

43
00:02:34.350 --> 00:02:39.660
We'll split the string into an array and call every on it and then see if each character is the same

44
00:02:39.690 --> 00:02:40.620
as that character.

45
00:02:40.620 --> 00:02:44.150
To lower case if all of them are we will return true.

46
00:02:44.580 --> 00:02:47.580
Let's take a look at another function called all arrays.

47
00:02:47.580 --> 00:02:50.450
This is actually a question that we asked in the rhythms call interview.

48
00:02:50.460 --> 00:02:56.330
Here we have a function that accepts an array and we want to see if each value in the array is an array.

49
00:02:56.340 --> 00:03:02.070
We can combine Every with the array that is array function to really clean this code up instead of passing

50
00:03:02.070 --> 00:03:05.040
our own callback function to every we use the built in.

51
00:03:05.040 --> 00:03:09.300
Our radar is array method to see if each value is an array.

52
00:03:09.480 --> 00:03:12.140
Before we move on to the final array method we're going to look at.

53
00:03:12.240 --> 00:03:16.220
Let's practice a bit more with some and every good luck and I'll see you in the next video.
