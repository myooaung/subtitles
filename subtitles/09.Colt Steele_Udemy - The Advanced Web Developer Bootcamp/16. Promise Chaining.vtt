WEBVTT
1
00:00:01.140 --> 00:00:06.850
Now we'll continue with promises and talk about some more advanced concepts like promis chaining.

2
00:00:06.890 --> 00:00:13.920
So our objectives will be to first describe the disadvantages of using nested callbacks return a promise

3
00:00:13.920 --> 00:00:16.020
from a dad then callback function.

4
00:00:16.020 --> 00:00:22.600
This is known as promise chaining and use a promise to make asynchronous Code seem sequential.

5
00:00:22.640 --> 00:00:26.870
So essentially what we're doing in this last objective is refactoring the nested callback example we're

6
00:00:26.870 --> 00:00:31.900
going to see to use processes which will lead to better more maintainable code.

7
00:00:34.130 --> 00:00:37.250
Let's start out with an example that doesn't use promises.

8
00:00:37.250 --> 00:00:41.070
So in this example you can see we've got kind of a messy situation.

9
00:00:41.330 --> 00:00:45.850
We're trying to have a callback that depends on another callback.

10
00:00:45.860 --> 00:00:52.160
So in this set time out we're going to log and counter and then once that's done we want to kick off

11
00:00:52.160 --> 00:00:58.700
another set time out but once that's done so once we Inkerman our counter again and then display it

12
00:00:58.970 --> 00:01:01.730
we want to kick off yet another set time out.

13
00:01:01.730 --> 00:01:08.840
So the solution might come up with this point is to just continually put more callbacks inside of callbacks.

14
00:01:08.840 --> 00:01:15.170
And this is just a small example but you can think of a problem that could end up having 10 or 12 levels

15
00:01:15.170 --> 00:01:18.770
of nesting which is really really difficult to read.

16
00:01:18.770 --> 00:01:26.840
So anyway this code when we run it will first print one and then two seconds later it'll print two and

17
00:01:26.840 --> 00:01:28.830
then three seconds later it will print three.

18
00:01:28.880 --> 00:01:43.860
So our consul will read one to and then three let's see that running in the consul.

19
00:01:43.930 --> 00:01:49.720
So as you can see a second goes by and we print one two seconds go by and we print two and then three

20
00:01:49.720 --> 00:01:55.530
seconds go by and we print three.

21
00:01:55.610 --> 00:01:58.790
So we already talked about it a little bit but what's wrong with writing code this way.

22
00:01:58.790 --> 00:01:59.980
Why is that bad.

23
00:02:01.280 --> 00:02:06.740
Well first the code is hard to read in that small example you might be able to follow but once it gets

24
00:02:06.740 --> 00:02:11.420
bigger and more complicated it gets really really difficult to understand what's going on.

25
00:02:13.630 --> 00:02:16.950
Sort of in the same vein the logic is difficult to reason about.

26
00:02:17.170 --> 00:02:21.340
So when code gets messy it gets hard to understand exactly what's going on.

27
00:02:21.430 --> 00:02:26.480
And it really takes you a long time to sort of grasp what the code does.

28
00:02:26.560 --> 00:02:28.950
And lastly the code is not very modular.

29
00:02:28.960 --> 00:02:31.360
We'll see this more when we refactor the code.

30
00:02:31.420 --> 00:02:37.510
But the real problem is there's a lot of duplication here but we don't really have a great way of putting

31
00:02:37.510 --> 00:02:39.100
it into a separate function.

32
00:02:39.100 --> 00:02:41.580
But once we use promises we'll see how to do that.

33
00:02:43.070 --> 00:02:48.050
Before we can talk about refactoring this code we need to understand an important concept with promises

34
00:02:48.050 --> 00:02:55.580
called promis chaining So promised chaining allows multiple dot then functions to be chained to a promise.

35
00:02:55.780 --> 00:03:03.350
And the really neat thing is if a previous callback inside then returns a promise the next callback

36
00:03:03.400 --> 00:03:07.230
inside that then we'll be waiting for that previous promise to be resolved.

37
00:03:07.570 --> 00:03:12.100
So in this case we've got a promise that gets resolved in 500 milliseconds.

38
00:03:12.100 --> 00:03:16.050
And this first then will be rate waiting for that promise to finish.

39
00:03:16.530 --> 00:03:22.660
Now inside that callback we're returning a new promise that resolves in three seconds three or three

40
00:03:22.660 --> 00:03:29.410
thousand milliseconds and the next thought then we'll be waiting for this promise to finish.

41
00:03:29.410 --> 00:03:29.650
All right.

42
00:03:29.650 --> 00:03:32.050
This is an important one so let's take a look at the cons. again

43
00:03:35.220 --> 00:03:37.590
as you can see we've got our code here again.

44
00:03:37.590 --> 00:03:43.420
And remember that this promise completes in half a second and this promise completes in three seconds

45
00:03:43.430 --> 00:03:46.380
so let's take a look.

46
00:03:46.410 --> 00:03:46.660
All right.

47
00:03:46.680 --> 00:03:52.680
In half a second I see this from my first callback and then three seconds later I will see a second

48
00:03:52.680 --> 00:03:54.840
random for my second callback.

49
00:03:54.840 --> 00:03:57.710
Now let's change the values and see what we get after that.

50
00:03:58.730 --> 00:04:08.900
So if I make this now three seconds and I make this one let's make it something quick like five hundred.

51
00:04:08.900 --> 00:04:15.050
Half a second you'll see that this one takes three seconds to complete and then half a second later

52
00:04:15.050 --> 00:04:15.740
we'll see this one

53
00:04:21.000 --> 00:04:25.700
as you can see the first one now takes three seconds and half a second later we get the second.

54
00:04:25.880 --> 00:04:31.670
So really cool feature we can combine asynchronous tasks into a chain of promises

55
00:04:36.500 --> 00:04:41.230
promises aren't the only things that can return from inside of that then call back though a promised

56
00:04:41.270 --> 00:04:43.630
callback can also return values.

57
00:04:43.820 --> 00:04:49.280
So the values return in the previous then callback will be passed into the next then call back as a

58
00:04:49.280 --> 00:04:50.680
parameter.

59
00:04:50.690 --> 00:04:53.170
So here you can see or resolving with five.

60
00:04:53.720 --> 00:05:00.470
And this first callback function will receive 5 as data and then will return five times 2 which is 10

61
00:05:00.740 --> 00:05:03.100
which will be Passons the next then callback.

62
00:05:03.290 --> 00:05:07.930
So now data is equal to 10 and 10 plus 20 gives us 30.

63
00:05:07.940 --> 00:05:10.440
Now the next callback gets 30.

64
00:05:10.610 --> 00:05:13.050
And finally will console log that 30.

65
00:05:13.100 --> 00:05:19.140
So in the console we should see 30.

66
00:05:19.620 --> 00:05:22.920
Now let's review our nested callback example from earlier.

67
00:05:22.920 --> 00:05:30.450
Remember this set of callbacks will after a second console log one and then after two seconds console

68
00:05:30.450 --> 00:05:35.340
log 2 and then finally after three seconds console log 3.

69
00:05:35.910 --> 00:05:38.520
So how do we use promises to help solve this problem.

70
00:05:38.520 --> 00:05:41.330
Well let's take it step by step.

71
00:05:41.490 --> 00:05:47.250
First we're going to create a function definition for just the incrementing portion.

72
00:05:47.280 --> 00:05:48.100
So this function.

73
00:05:48.120 --> 00:05:53.750
All it does is takes in our counter increments it and then consol logs whatever the value of the counter

74
00:05:53.750 --> 00:05:54.600
is.

75
00:05:54.690 --> 00:05:56.410
Remember that's what's going on here.

76
00:05:56.460 --> 00:06:02.160
Right we're just incrementing a counter and then cancel logon and that functionality is the same throughout

77
00:06:02.160 --> 00:06:07.060
each callback next step number two.

78
00:06:07.810 --> 00:06:10.420
So now we'll create a function called run later.

79
00:06:10.420 --> 00:06:16.960
And this is a pretty generic function that will take a callback and a time in milliseconds and run that

80
00:06:16.970 --> 00:06:19.270
callback using set time out.

81
00:06:19.360 --> 00:06:22.050
But it will wrap the set time out in a promise.

82
00:06:22.060 --> 00:06:28.930
So this run later function at the end will return a new promise that we can attach a dot then or a dot

83
00:06:28.960 --> 00:06:32.720
catch call back to INSIDE OF THE PROMISE set.

84
00:06:32.790 --> 00:06:36.360
Time out is invoked the callback runs after the delay.

85
00:06:36.400 --> 00:06:42.610
After this time in milliseconds delay and the value return from this callback that's invoked inside

86
00:06:42.610 --> 00:06:45.960
of the function is then passed to resolve.

87
00:06:46.060 --> 00:06:49.000
So this will work with pretty much any callback function you want.

88
00:06:49.180 --> 00:06:54.200
And the goal is to turn a normal set time outcall into a promise of file set timeout.

89
00:06:56.360 --> 00:06:57.820
Step number three.

90
00:06:57.830 --> 00:07:02.840
Now we're going to use the run later function and promise chaining that we learned earlier to refactor

91
00:07:02.840 --> 00:07:04.520
the code that we had before.

92
00:07:05.000 --> 00:07:12.500
So the first run later here will invoke this ink counter function in one second but remember run later

93
00:07:12.500 --> 00:07:13.680
returns a promise.

94
00:07:13.820 --> 00:07:17.210
So we can attach them to that promise.

95
00:07:17.210 --> 00:07:24.440
This callback will be invoked after the i and see counters resolved and then we return a new promise

96
00:07:24.440 --> 00:07:31.540
from on later which also invokes the counter in 2000 milliseconds.

97
00:07:31.680 --> 00:07:40.020
Then the next dot then callback is invoked or turn a new promise which runs the agency counter in three

98
00:07:40.020 --> 00:07:42.390
seconds 3000 milliseconds.

99
00:07:42.420 --> 00:07:45.380
And finally this last thought then is necessary.

100
00:07:45.600 --> 00:07:50.520
But if you wanted to put some final code there like console log something else you could.

101
00:07:50.520 --> 00:07:55.810
So this is essentially inside the store then we'll know that the code is done.

102
00:07:55.860 --> 00:07:58.410
Let's see this in the console.

103
00:07:58.410 --> 00:08:00.470
So here's our code for the example.

104
00:08:01.020 --> 00:08:08.620
And as you can see when this runs we'll have the same effects first one second counter.

105
00:08:08.640 --> 00:08:13.010
Two seconds later or two and then three seconds later counter-theory.

106
00:08:13.050 --> 00:08:14.010
So there you have it.

107
00:08:14.040 --> 00:08:19.280
We've turned some pretty messy code from using nested callbacks into using promises.

108
00:08:19.350 --> 00:08:24.150
And now I'd argue that this is much easier to read once you understand what promises and promise chaining

109
00:08:24.150 --> 00:08:25.050
are doing here.

110
00:08:28.380 --> 00:08:32.320
So here's the side by side of those two code snippets.

111
00:08:32.790 --> 00:08:38.250
As you can see from this our solutions actually a little bit longer so we're not winning on number of

112
00:08:38.250 --> 00:08:44.940
lines but once we have this run later function our actual code for the callbacks is quite short.

113
00:08:45.180 --> 00:08:51.120
And I'd argue much more readable once you understand what run run later does than the implementation

114
00:08:51.120 --> 00:08:54.390
here is much easier than this one.

115
00:08:54.390 --> 00:08:58.800
One last thing I want to point out here which I think is useful when you're first learning.

116
00:08:58.830 --> 00:09:04.590
So we've created a lot of new promises and all these examples but later on when you use promises especially

117
00:09:04.590 --> 00:09:08.000
in Ajax you're not going to be creating a new promise yourself.

118
00:09:08.070 --> 00:09:13.310
Rather you're going to be given a promise as a result of invoking some function specifically you're

119
00:09:13.320 --> 00:09:18.230
going to be using the new fecche functionality and fetch will return a promise to you.

120
00:09:18.300 --> 00:09:23.490
So even though you don't have to create your own promises it's useful to understand what they're doing

121
00:09:23.670 --> 00:09:25.380
both resolve and reject.

122
00:09:25.380 --> 00:09:26.930
So I hope that was helpful.
