WEBVTT
1
00:00:00.300 --> 00:00:01.230
Welcome back.

2
00:00:01.440 --> 00:00:05.820
In this video I'll code up a quick solution to the histogram exercise.

3
00:00:05.820 --> 00:00:11.130
I'll also tackle the bonus as part of getting the range in but working well and briefly about a new

4
00:00:11.130 --> 00:00:15.740
D-3 access method and do some refactoring.

5
00:00:15.820 --> 00:00:18.090
So let's jump into it to begin.

6
00:00:18.160 --> 00:00:21.780
Let me just try to get a basic histogram showing up on the page.

7
00:00:21.870 --> 00:00:27.550
The HVM L.A.'s S files I'm starting with are pretty simple but they've got everything I need so I'll

8
00:00:27.550 --> 00:00:28.370
hop into the app.

9
00:00:28.430 --> 00:00:35.710
Yes by now you can probably guess what I'll do first set variables for the SPG within height as well

10
00:00:35.710 --> 00:00:39.380
as some values for the SVGA padding and the bar padding.

11
00:00:39.790 --> 00:00:42.290
Also similar to the scatterplot video.

12
00:00:42.430 --> 00:00:47.990
I don't want to consider any data in my region data array where the value for median age is no.

13
00:00:48.400 --> 00:00:53.740
So I'll filter my original dataset so that I only keep data on regions that have a record of median

14
00:00:53.740 --> 00:00:56.180
age.

15
00:00:56.330 --> 00:00:59.090
Moving on let's create some scales.

16
00:00:59.150 --> 00:01:02.100
I'll start with the scale for my domain.

17
00:01:02.120 --> 00:01:04.620
I want the extreme values for median age.

18
00:01:04.700 --> 00:01:11.430
So once again I'll use D-3 dot extent then I'll use range round and go from the padding to the width

19
00:01:11.570 --> 00:01:12.710
minus the padding.

20
00:01:13.700 --> 00:01:17.240
I can't set the Y scale without knowing how high my bins will be.

21
00:01:17.240 --> 00:01:23.360
So first I'll need to use the histogram generator to create my bins just like in the example we work

22
00:01:23.630 --> 00:01:25.330
earlier in the section.

23
00:01:25.340 --> 00:01:30.560
I'll set the domain of my histogram equal to the domain of my scale and set thresholds based on the

24
00:01:30.560 --> 00:01:32.680
default text for my scale.

25
00:01:32.690 --> 00:01:39.390
I also use the value method on the generator to specify that I want a histogram of median age values.

26
00:01:39.440 --> 00:01:44.900
Next I can define a bin's variable and set it equal to the value I get when I pass my age data into

27
00:01:44.900 --> 00:01:46.520
the histogram generator.

28
00:01:46.850 --> 00:01:50.030
Let's hop into the console quickly and take a look at this variable.

29
00:01:50.830 --> 00:01:51.560
Great.

30
00:01:51.610 --> 00:01:54.390
It looks like the histogram generator worked as expected.

31
00:01:55.680 --> 00:02:01.400
Now that I know how many data points are in each bin I can create my y scale for the domain.

32
00:02:01.560 --> 00:02:06.720
I'll go from zero to the largest bin height and for the range I'll go from the height minus the padding

33
00:02:06.870 --> 00:02:07.890
to the padding.

34
00:02:08.340 --> 00:02:11.390
OK let's quickly add the rectangles.

35
00:02:11.430 --> 00:02:12.520
No secrets here.

36
00:02:12.570 --> 00:02:16.310
I'll just use the same pattern we've seen many times before.

37
00:02:16.320 --> 00:02:22.590
First let me select the SPG set it's what height and store the selection in a variable.

38
00:02:22.860 --> 00:02:30.300
Then I'll select all recked elements inside the SVGA join with my bin data enter append rectangles and

39
00:02:30.300 --> 00:02:31.950
style them.

40
00:02:32.140 --> 00:02:37.870
My ex attribute is determined by the x 0 property for each bin the Y attribute is determined by the

41
00:02:37.870 --> 00:02:42.970
length of the bed the height and width are a bit more complicated but these are the same expressions

42
00:02:42.970 --> 00:02:44.310
we've seen before.

43
00:02:44.740 --> 00:02:47.780
Lastly I'll make all of these rectangles blue.

44
00:02:48.310 --> 00:02:51.190
Oh I also need to set my axes and labels.

45
00:02:51.220 --> 00:02:54.750
We've done this several times already so I'll just paste in the code.

46
00:02:54.760 --> 00:02:59.440
Feel free to post the video if you want to take a closer look or review the solution to the previous

47
00:02:59.440 --> 00:03:00.880
exercise.

48
00:03:00.880 --> 00:03:06.910
The only thing I'll do slightly differently is add a class of x axis to my x axis and a class of y axis

49
00:03:06.910 --> 00:03:08.950
to my y axis.

50
00:03:08.950 --> 00:03:14.950
This will make my axes easier to select with D-3 when I need to update them as part of the bonus.

51
00:03:15.130 --> 00:03:21.290
Now all saving refresh the page there is our histogram next.

52
00:03:21.300 --> 00:03:22.690
Let's tackle the above.

53
00:03:22.920 --> 00:03:28.330
I'd like to add a range input to the page so that I can specify how many bins I want for the histogram.

54
00:03:28.450 --> 00:03:34.590
First I'll update my email to include a range but the fewest number of bins I can have is one and the

55
00:03:34.590 --> 00:03:36.580
steps size should also be one.

56
00:03:36.600 --> 00:03:42.890
I'll also set the max to 50 but I'll set the value property in the javascript while I'm here.

57
00:03:42.930 --> 00:03:45.990
I'll also add a tag with a class of bin count.

58
00:03:46.020 --> 00:03:50.150
This is how all this play to the user the current number of bins.

59
00:03:50.330 --> 00:03:57.860
Before I forget I also styled these new elements in the stylesheet OK let's hop back into the javascript

60
00:03:57.980 --> 00:04:00.470
and select the input element.

61
00:04:00.540 --> 00:04:05.290
The current value for the input should just be the number of things that the histogram generator created.

62
00:04:06.710 --> 00:04:12.560
Now that I've set up my input let's add an event listener for input events inside of the callback first

63
00:04:12.560 --> 00:04:16.350
stored the input value in a variable called Bin count.

64
00:04:16.520 --> 00:04:19.380
Then I'll update the histogram generator.

65
00:04:19.460 --> 00:04:25.790
I'll put bin count into the text method to change the array that's being used to set the thresholds.

66
00:04:25.790 --> 00:04:30.400
This means I'll need to update the bin's variable and the y scale's domain too.

67
00:04:30.500 --> 00:04:37.960
Since my bins are changing after that I'll select my Y-axis and pass it my updated scale.

68
00:04:40.420 --> 00:04:46.240
Next let's update the rectangles here again will see the general update pattern come into play.

69
00:04:46.240 --> 00:04:53.050
First I'll store the update selection in a variable then I'll remove anything in the exit selection.

70
00:04:53.050 --> 00:04:57.760
After that I'll append a rectangle for every entry note in the enter selection and don't merge with

71
00:04:57.760 --> 00:05:01.190
the update selection to set styles for every rectangle on the page

72
00:05:04.110 --> 00:05:09.220
then update the text in the P-TECH great.

73
00:05:09.340 --> 00:05:11.860
Let's try this out.

74
00:05:11.870 --> 00:05:17.300
This looks pretty good though it would be nice if the X-axis adjusted to match the bar widths to make

75
00:05:17.300 --> 00:05:18.140
this happen.

76
00:05:18.140 --> 00:05:24.260
I can select the x axis inside of the callback then call a new Access bottom where I use the text method

77
00:05:24.260 --> 00:05:29.270
on the axis and passing count like with the text method on a scale.

78
00:05:29.420 --> 00:05:35.880
This will set the text on the axis based on the count I-PASS and sweet.

79
00:05:35.900 --> 00:05:38.750
Now the x axis is updating to.

80
00:05:38.900 --> 00:05:44.220
Note that the x axis labels get a little cramped when the number of bins is large.

81
00:05:44.240 --> 00:05:50.730
One way to fix that is to select all text elements inside of the x axis and update their styles for

82
00:05:50.730 --> 00:05:52.930
example to make them a bit more legible.

83
00:05:53.040 --> 00:05:56.150
I can nudge them a little in the x and y direction.

84
00:05:56.400 --> 00:06:00.060
Rotate them and update their text anchor property.

85
00:06:00.060 --> 00:06:08.000
If we save and refresh we see things now look a little better when there are a large number of bins.

86
00:06:08.000 --> 00:06:12.570
One last thing the apple swine but the code could use a little refactoring.

87
00:06:12.590 --> 00:06:18.010
I've got a fair amount of duplication for the styling of the rectangles and calling the axes.

88
00:06:18.090 --> 00:06:24.670
If this duplication bothers you one thing we can do is refactor these common tasks into one function.

89
00:06:24.770 --> 00:06:29.810
For example I could write a function called update rechts which is basically responsible for updating

90
00:06:29.810 --> 00:06:32.910
the graph this function will take as an argument.

91
00:06:32.950 --> 00:06:36.630
The number of rectangles you want to draw inside of this function.

92
00:06:36.640 --> 00:06:42.580
I'll create my X scale my histogram generator my bins and my wife scale.

93
00:06:42.580 --> 00:06:45.210
Then I'll update the x and y axes.

94
00:06:45.280 --> 00:06:50.350
Use the general update pattern to update the rectangles and update the text in the DAG

95
00:06:54.010 --> 00:06:57.710
with this helper of a callback to my method is much simpler.

96
00:06:57.710 --> 00:07:01.640
All I do is call this helper in passing the event target value as a number.

97
00:07:02.790 --> 00:07:07.820
I can also use this function to initially set up the Grath the first time I generate the histogram.

98
00:07:07.830 --> 00:07:09.220
I get 16 bins.

99
00:07:09.360 --> 00:07:15.480
So let me store this number in a variable I can then use this variable when I set up my input and again

100
00:07:15.480 --> 00:07:17.430
to call my helper function.

101
00:07:17.430 --> 00:07:23.130
This saves me from having to initially call my X or Y axes or declare my scale's Mr. Bamm generator

102
00:07:23.400 --> 00:07:27.040
or Benza variable outside of this helper.

103
00:07:27.110 --> 00:07:34.710
When I save and refresh everything works as before but this code has much less duplication.

104
00:07:34.710 --> 00:07:37.200
I hope this video helps when you're ready.

105
00:07:37.320 --> 00:07:39.430
Let's start learning about pie charts.

106
00:07:39.450 --> 00:07:41.270
I'll see you in the next video.
