WEBVTT
1
00:00:00.170 --> 00:00:01.350
Well welcome back.

2
00:00:01.380 --> 00:00:05.420
So essay chair works great ish depending on your opinion.

3
00:00:05.520 --> 00:00:07.130
It at least does what it's supposed to do.

4
00:00:07.140 --> 00:00:09.270
It makes requests so that's great.

5
00:00:09.570 --> 00:00:11.460
But there are a couple of problems.

6
00:00:11.490 --> 00:00:15.450
The first most obvious issue is just the syntax.

7
00:00:15.450 --> 00:00:17.720
It's ugly bulky.

8
00:00:17.730 --> 00:00:22.890
It's not very clean and it doesn't reflect you know how often we're making requests nowadays it's just

9
00:00:22.890 --> 00:00:28.250
not as distinct as it could be and that's largely a byproduct of how old it is.

10
00:00:28.410 --> 00:00:30.690
So sh are 16 years old.

11
00:00:30.960 --> 00:00:35.670
It was written in a completely different time and it was written with completely different intentions

12
00:00:35.760 --> 00:00:37.440
for how it would be used.

13
00:00:37.440 --> 00:00:43.170
Nobody really saw single page apps or maybe I guess I can't say that definitively but it wasn't created

14
00:00:43.170 --> 00:00:48.920
with single page apps in mind which is what the majority of H.R. requests are being used for today.

15
00:00:49.500 --> 00:00:51.690
So it was created in a different environment.

16
00:00:51.780 --> 00:00:57.990
And along with that some of the advanced things that we do nowadays things like service workers or streaming

17
00:00:57.990 --> 00:01:01.800
data having really large amounts of data that we want to stream in.

18
00:01:01.890 --> 00:01:04.650
We don't really have support for with SH.

19
00:01:04.990 --> 00:01:09.960
And I just want to highlight you know these two are far more important problems in my opinion than this

20
00:01:10.260 --> 00:01:14.230
but I just wanted to put this here so I can show you a cool example in just a second.

21
00:01:14.400 --> 00:01:19.450
But before we get there I want to introduce the update to H.R..

22
00:01:19.860 --> 00:01:23.010
So javascript is old but it has gone through iterations.

23
00:01:23.010 --> 00:01:25.180
There are new features that are constantly added.

24
00:01:25.260 --> 00:01:27.190
It's a lot of what this course covers.

25
00:01:27.240 --> 00:01:31.680
So it's only fair that H.R. also gets a facelift.

26
00:01:32.370 --> 00:01:33.960
Enter the French API.

27
00:01:34.290 --> 00:01:38.710
So fetch is the replacement or the update to ex-aide char.

28
00:01:39.180 --> 00:01:40.620
It's a nice clean syntax.

29
00:01:40.620 --> 00:01:42.150
It's more powerful.

30
00:01:42.150 --> 00:01:47.660
It exposes more of the underlying data in the response and requests that exit char doesn't.

31
00:01:47.880 --> 00:01:51.370
And it lets you do things that you cannot do with Exige ours.

32
00:01:51.600 --> 00:01:56.430
So here's a quick example and talked about how Accenture doesn't support streaming.

33
00:01:56.460 --> 00:02:02.490
So this is a demo someone built that will request the first billion digits of pi and we can enter a

34
00:02:02.490 --> 00:02:04.100
substring to search for.

35
00:02:04.110 --> 00:02:11.850
So something like I don't know 4 9 8 7 and I can hit search and with an X a char what would happen is

36
00:02:12.030 --> 00:02:17.670
we would have to get all of the data back all 1 billion digits of pi first and then search through it

37
00:02:18.230 --> 00:02:19.320
but with fetch.

38
00:02:19.430 --> 00:02:23.910
What I can actually do is stream the data back and check along the way.

39
00:02:24.000 --> 00:02:26.100
Have we encountered this substring.

40
00:02:26.100 --> 00:02:26.950
If we have.

41
00:02:27.160 --> 00:02:29.550
OK stop I don't need the rest.

42
00:02:29.550 --> 00:02:36.210
So here's an example if I hit this you can see it performing it and it finds it at position 1 5 1 0

43
00:02:36.750 --> 00:02:42.770
rather than at position 1 billion which is what would happen if we were working with X H.R..

44
00:02:42.990 --> 00:02:47.120
So not something that you would ever do but I just want to show you that this is a possibility.

45
00:02:47.160 --> 00:02:52.830
This is kind of more advanced feature that allows us to do but more important than this kind of thing

46
00:02:53.190 --> 00:02:54.570
is the syntax.

47
00:02:54.900 --> 00:02:56.430
This is how you do it.

48
00:02:56.460 --> 00:03:02.950
So for the simplest get request it's fetch and then you go and that's it.

49
00:03:02.970 --> 00:03:07.680
Actually make the request and it returns a promise which is something that we'll be talking a lot more

50
00:03:07.680 --> 00:03:09.290
about in this course.

51
00:03:09.330 --> 00:03:16.880
You've seen them briefly will expand more later on but you can see we have it then and it does catch.

52
00:03:16.890 --> 00:03:22.260
So whatever goes in the door then will happen after the fetch is completed unless something goes wrong

53
00:03:22.440 --> 00:03:25.800
in which case our code and dumb catch will run.

54
00:03:25.800 --> 00:03:30.530
Now we'll talk about what causes the dumb catch to trigger and how to handle errors.

55
00:03:30.690 --> 00:03:33.170
So I really just want to focus on that then for now.

56
00:03:33.420 --> 00:03:41.800
So fetch you know returns to promise then whatever code we want we'll run once the Fed completes.

57
00:03:42.120 --> 00:03:44.440
So very simple let's give it a shot.

58
00:03:44.460 --> 00:03:49.510
I have a really simple code Penn called first fecche example and I recently used the Bitcoin API we've

59
00:03:49.560 --> 00:03:52.200
already seen here and just request it using fetch.

60
00:03:52.200 --> 00:03:53.480
So we're not going to build anything.

61
00:03:53.610 --> 00:03:55.930
I just want to show you how simple it is.

62
00:03:55.930 --> 00:03:59.450
So I'm going to do a fetch you R-O in on its own.

63
00:03:59.490 --> 00:04:00.430
That's it.

64
00:04:00.780 --> 00:04:04.850
But of course I want my data then so I can do something afterwards.

65
00:04:07.460 --> 00:04:16.430
And I'm going to call this data here and just do a console that log data and if I open up my console

66
00:04:16.620 --> 00:04:23.880
and we clear this and refresh the page you'll see here's what I get back.

67
00:04:23.890 --> 00:04:26.140
This is the response itself.

68
00:04:26.410 --> 00:04:28.530
So we don't just get the response data back.

69
00:04:28.540 --> 00:04:34.930
We get an entire response object that contains a bunch of things in it we can see the status code so

70
00:04:34.930 --> 00:04:46.720
he could do something like out blog status code was and then add in data status and minimized some of

71
00:04:46.720 --> 00:04:50.760
this more space save and refresh.

72
00:04:50.940 --> 00:04:53.990
And you can see recounts without logging the entire response.

73
00:04:54.330 --> 00:04:57.680
And then also status code was 200.

74
00:04:57.690 --> 00:05:03.120
Now if we actually want to extract the data that Jason there is a nice built in way of doing that as

75
00:05:03.120 --> 00:05:09.330
well with fetch we can use the dot Jaison method which will also return a promise because this could

76
00:05:09.330 --> 00:05:10.780
potentially take a while.

77
00:05:10.830 --> 00:05:11.980
In our case it won't.

78
00:05:12.060 --> 00:05:17.260
But if we had a massive response body lots adjacent in there to be parsed it could take a moment.

79
00:05:17.400 --> 00:05:20.870
So it returned to promise allowing us to wait until it's done.

80
00:05:21.300 --> 00:05:24.060
So let me just show you in practice how that works.

81
00:05:24.060 --> 00:05:26.300
So I'm going to actually get rid of all this.

82
00:05:26.370 --> 00:05:28.860
I'm going to rename this to response.

83
00:05:28.920 --> 00:05:33.560
Just so it's clearer that this itself is the response that's being returned.

84
00:05:37.050 --> 00:05:38.110
As we can see here.

85
00:05:38.200 --> 00:05:41.810
So there's a method on this called Jaison so I can do.

86
00:05:41.810 --> 00:05:52.130
Response that Jason and I can just do a constant log just like this and you'll see what I get.

87
00:05:52.180 --> 00:05:58.630
I get this promise back and it says it's been resolved but that's what's actually returned is the promise

88
00:05:59.080 --> 00:06:05.180
to actually do something will take the promise that's returned from this and we will return it itself.

89
00:06:05.410 --> 00:06:09.910
So I can do a return response that Jay's on just like this.

90
00:06:10.210 --> 00:06:11.730
And I have a couple of options.

91
00:06:11.920 --> 00:06:17.620
I can do a then right here or I can do it here.

92
00:06:18.330 --> 00:06:23.990
Yes remember we have this first then which return to promise which you're returning here.

93
00:06:24.010 --> 00:06:25.350
Response Jason.

94
00:06:25.690 --> 00:06:31.510
So I can chain on that then which is the next thing that will happen when this finishes either here

95
00:06:32.330 --> 00:06:39.410
like this pass in my function Let's call the let's call it data.

96
00:06:40.740 --> 00:06:49.530
And here I can do a console that log data just like that and you'll see we get our parsed J song.

97
00:06:49.780 --> 00:06:54.880
So let me clear this make this clearer if I refresh.

98
00:06:55.240 --> 00:06:59.080
First thing that happens fetch fetch happens shocker.

99
00:06:59.290 --> 00:07:05.140
We make a request that we get a response object back then.

100
00:07:05.290 --> 00:07:09.250
So when that fetch is done this code executes all of it.

101
00:07:09.250 --> 00:07:15.010
So if we have this response and we're constantly logging the response so that's where this comes from.

102
00:07:15.180 --> 00:07:20.160
But then we're doing response Jason and it returns a promise.

103
00:07:20.160 --> 00:07:26.400
So what we're going to do is return that promise and this dog then and we can change then inside like

104
00:07:26.400 --> 00:07:27.090
this.

105
00:07:27.210 --> 00:07:36.390
But I prefer to do it this way and move this here and functionally they do the same thing because we're

106
00:07:36.510 --> 00:07:38.600
adding a return response Jason.

107
00:07:38.730 --> 00:07:45.740
This promise has returned from here and this ensuing then happens after this finishes.

108
00:07:45.990 --> 00:07:48.000
So then we're printing data.

109
00:07:48.000 --> 00:07:49.460
So there's a couple of layers right.

110
00:07:49.530 --> 00:07:54.000
Fetch happens when that's done we're going to print response.

111
00:07:54.090 --> 00:07:56.530
We're going to return this promise.

112
00:07:56.730 --> 00:08:03.240
And when that resolves and this is done this done then it's called and when this does then it's called

113
00:08:03.240 --> 00:08:04.100
nothing else happens.

114
00:08:04.110 --> 00:08:11.910
But inside of it were counted that logging data and it works just one more time reload the page and

115
00:08:11.910 --> 00:08:14.900
we get our current first council log and then our data.

116
00:08:15.120 --> 00:08:20.250
And we could do something with it of course constantly log data dot BPI.

117
00:08:20.790 --> 00:08:24.240
Let's do the euro price dot.

118
00:08:24.930 --> 00:08:27.720
You are right

119
00:08:32.290 --> 00:08:33.480
and there we go.

120
00:08:33.520 --> 00:08:38.740
So I won't waste your time showing you appended to the page and all that but this is a nice way of making

121
00:08:38.740 --> 00:08:39.630
requests.

122
00:08:39.670 --> 00:08:45.320
I think it's kind of cute using promises is preferrable to nesting a bunch of callbacks.

123
00:08:45.430 --> 00:08:47.620
You know it's in my opinion it's just much better.

124
00:08:47.890 --> 00:08:54.220
And I'll show you a situation where we have kind of nastier code nasty is wrong word but longer code

125
00:08:54.580 --> 00:09:00.160
with more nested code or more potential to nested it and how using fetch allows us to extract things

126
00:09:00.160 --> 00:09:05.200
into separate methods and make our actual fetch and promis logic really nice and clean.

127
00:09:05.200 --> 00:09:10.660
Next up we'll have a quick video where I'll show you how to provide options when you make a request

128
00:09:10.960 --> 00:09:13.370
so you don't have to always make get requests.

129
00:09:13.390 --> 00:09:16.650
You can pass data and you can set headers manually.

130
00:09:16.660 --> 00:09:18.780
I'll show you how to do that and next video.

131
00:09:18.810 --> 00:09:19.310
See you then.
