WEBVTT
1
00:00:00.450 --> 00:00:01.210
Welcome back.

2
00:00:01.350 --> 00:00:07.170
In this video we're going to talk about a new constructor function that as 2015 gives us to help manage

3
00:00:07.200 --> 00:00:08.230
asynchronous code.

4
00:00:08.490 --> 00:00:10.770
And that is the promise constructor.

5
00:00:10.770 --> 00:00:16.620
Before we talk about how to use the promise constructor Let's quickly review what promises are a promise

6
00:00:16.710 --> 00:00:20.940
is a one time guaranteed return of some future value.

7
00:00:20.940 --> 00:00:26.760
The idea here is that we do not know what the value of some asynchronous operation will be or when it

8
00:00:26.760 --> 00:00:28.230
will finish executing.

9
00:00:28.380 --> 00:00:33.240
So we create a placeholder for what that value will be when the value is figured out.

10
00:00:33.240 --> 00:00:35.140
The promise is either resolved.

11
00:00:35.190 --> 00:00:42.420
We also call this fulfilled or rejected promises are a friendly way to refactor Mesi callback code and

12
00:00:42.420 --> 00:00:44.660
they've actually been in existence for quite a while.

13
00:00:44.850 --> 00:00:49.510
Yes 2015 is a little late to the game to understand promises a bit better.

14
00:00:49.550 --> 00:00:54.860
Think of this story you're hungry so you go to McDonald's and you walk up to the counter to order some

15
00:00:54.860 --> 00:00:55.480
food.

16
00:00:55.850 --> 00:01:01.220
Once you place your order you're given a ticket and the person behind you goes next you can think of

17
00:01:01.220 --> 00:01:03.260
the ticket here as a promise.

18
00:01:03.410 --> 00:01:07.940
Instead of standing at the counter and stopping other people from ordering which would be synchronous

19
00:01:07.970 --> 00:01:13.860
or blocking code you move out of the way so that other people can order after a certain amount of time

20
00:01:14.070 --> 00:01:15.240
your ticket will be called.

21
00:01:15.360 --> 00:01:17.180
And one of two things will happen.

22
00:01:17.550 --> 00:01:19.000
You'll either get your food.

23
00:01:19.140 --> 00:01:22.670
We call this resolving a promise or you will not get your food.

24
00:01:22.680 --> 00:01:24.840
We call this rejecting a promise.

25
00:01:25.200 --> 00:01:31.410
Regardless once your promise has been rejected or resolved it is done and you give back your ticket.

26
00:01:31.410 --> 00:01:36.600
The idea here is that we have to create a new promise if we want to perform the same asynchronous operation

27
00:01:36.630 --> 00:01:40.860
again this is a big difference between promises and callbacks.

28
00:01:40.890 --> 00:01:45.060
So we mentioned that promises have been around for a while and you might have actually used them without

29
00:01:45.060 --> 00:01:46.260
even knowing it.

30
00:01:46.260 --> 00:01:51.210
Jay Querrey implemented its own version of promises a while back called Deford's and then the latest

31
00:01:51.210 --> 00:01:53.900
version 3 they support native promises.

32
00:01:54.300 --> 00:01:59.790
You might have also used libraries like Bluebird or Q When working with node or angular handle asynchronous

33
00:01:59.790 --> 00:02:00.600
code.

34
00:02:00.690 --> 00:02:03.240
These libraries also use promises.

35
00:02:03.240 --> 00:02:08.410
So now that ios 2015 provide the needed way for us to create promises heres how we do it.

36
00:02:09.530 --> 00:02:14.870
Promises are created with the new keyword and the promise constructor accepts a callback function with

37
00:02:14.870 --> 00:02:17.700
two parameters resolved and reject.

38
00:02:17.780 --> 00:02:22.760
We can call these parameters whenever we like but resolve and reject are the most common resolve and

39
00:02:22.760 --> 00:02:24.770
reject our functions to be run.

40
00:02:24.860 --> 00:02:28.640
If the promise is resolved or rejected Let's see what that would look like.

41
00:02:28.640 --> 00:02:32.060
With a simple example of asynchronous code a set time.

42
00:02:32.660 --> 00:02:38.360
What we're doing here is returning the new promise which will run a set time out and after 1 second

43
00:02:38.510 --> 00:02:44.160
if the result of math that random is greater than point five we resolve with the output yes.

44
00:02:44.360 --> 00:02:47.220
Otherwise we reject with the output of no.

45
00:02:47.240 --> 00:02:52.370
The idea here is that we're running some asynchronous operation and we want to wait until it resolves

46
00:02:52.370 --> 00:02:59.240
or rejects this function or return a promise to us which can be resolved using the dot then method if

47
00:02:59.240 --> 00:03:00.430
the promise is rejected.

48
00:03:00.470 --> 00:03:06.650
We can handle it with a dot catch method that then accepts the callback function with a value passed

49
00:03:06.650 --> 00:03:12.260
to the resolve function and that catch accepts a callback function with the value passed to the reject

50
00:03:12.320 --> 00:03:12.920
function.

51
00:03:13.960 --> 00:03:19.740
With useful about promises is that each DUP then returns another promise to us which has a dot then

52
00:03:19.740 --> 00:03:20.350
method.

53
00:03:20.520 --> 00:03:27.510
We call this undoubtable we can change promises together and return values from one promise to another.

54
00:03:27.630 --> 00:03:32.550
What we're going to try to do is build an array of years that movies were released and print out the

55
00:03:32.550 --> 00:03:33.020
array.

56
00:03:33.030 --> 00:03:37.700
When we're done building it up we'll use the only API to do this.

57
00:03:37.740 --> 00:03:44.100
If you remember from equerry Ajax methods return a promise to us so we can call that then directly on

58
00:03:44.100 --> 00:03:47.060
the result of the Ajax method return to us.

59
00:03:47.370 --> 00:03:50.850
Let's do that with the only API to get some movie data.

60
00:03:51.120 --> 00:03:56.580
We'll then return another AJAX call as a promise and when it's done being resolved we'll print out the

61
00:03:56.580 --> 00:03:57.930
movie years.

62
00:03:58.200 --> 00:04:04.150
Remember this entire operation is asynchronous so all done is going to print out before the years are

63
00:04:04.150 --> 00:04:05.160
ready.

64
00:04:05.160 --> 00:04:10.050
Try this example in the chrome console so you can see what's going on and try to add some more promises

65
00:04:10.110 --> 00:04:11.480
and keep changing them.

66
00:04:11.480 --> 00:04:17.040
You to me uses Jake where he directly on their website so you can write or copy and paste the code examples

67
00:04:17.100 --> 00:04:18.890
directly into the chrome console.

68
00:04:18.960 --> 00:04:25.540
When you're on Tommy's Web site you can also do this on the jacquard Web site and quite a few others.

69
00:04:25.560 --> 00:04:31.140
Most of the time you'll be using existing libraries that return promises like Jake Query and then managing

70
00:04:31.200 --> 00:04:37.220
those promises with chains of Dopp that it's not very common that you'll be using the native.

71
00:04:37.230 --> 00:04:43.470
Yes 20:15 promise constructor in the next video will show you how to resolve multiple promises.

72
00:04:43.470 --> 00:04:49.350
As an array using promised not all which you will use quite frequently with libraries frameworks and

73
00:04:49.350 --> 00:04:52.710
the newer E.S. 2017 async function.

74
00:04:52.720 --> 00:04:53.170
See the.
