WEBVTT
1
00:00:00.210 --> 00:00:00.600
All right.

2
00:00:00.600 --> 00:00:01.420
Welcome back.

3
00:00:01.650 --> 00:00:07.140
So this section is all about Noad and express which is a known framework as well as Mongo which is a

4
00:00:07.140 --> 00:00:07.850
database.

5
00:00:08.010 --> 00:00:09.450
But I want to get it out of the way.

6
00:00:09.450 --> 00:00:15.080
This is not a comprehensive overview of all of those topics in one tiny section.

7
00:00:15.120 --> 00:00:20.520
There are great courses out there including one by me that cover those topics in great detail over 10

8
00:00:20.520 --> 00:00:21.860
20 plus hours.

9
00:00:21.930 --> 00:00:27.730
So this content here is focused on one goal which is preparing you for react.

10
00:00:27.780 --> 00:00:33.310
So if you've never worked with Noad or Monga or express this will be enough to get you ready for react.

11
00:00:33.570 --> 00:00:38.280
And if you have worked with those tools before there's still probably something here because we're not

12
00:00:38.280 --> 00:00:42.330
going to be building a traditional express application with Mongo.

13
00:00:42.330 --> 00:00:46.250
We're actually focusing on building an API our own based on API.

14
00:00:46.380 --> 00:00:48.250
Just like the ones we've been consuming.

15
00:00:48.480 --> 00:00:52.340
So there's two goals to prepare for re-act want to build our own Jason API.

16
00:00:52.590 --> 00:00:56.730
And then we want to build a single page app that consumes our own API.

17
00:00:56.880 --> 00:01:02.280
So the way single page apps work on the front end we have some javascript whether it's vanilla ice or

18
00:01:02.280 --> 00:01:07.920
Jay query or something more structured like react or angular which are both frameworks that are making

19
00:01:07.920 --> 00:01:14.250
requests and then updating our view and the DOM keeping track of interactions basically handing handling

20
00:01:14.250 --> 00:01:17.700
everything on the front end that are requesting an API.

21
00:01:17.850 --> 00:01:25.620
And so far we've been using preexisting API like weather API movie API as quotes and so on but to build

22
00:01:25.620 --> 00:01:27.890
our own re-act apps we need to build our own.

23
00:01:27.900 --> 00:01:29.290
JS on API guys.

24
00:01:29.670 --> 00:01:34.770
So you could use something like express a node framework you could use rails which is a ruby framework

25
00:01:35.010 --> 00:01:38.120
Genger flask with both which both are python frameworks.

26
00:01:38.130 --> 00:01:43.260
It doesn't really matter you can mix and match these but we're going to focus on using react on the

27
00:01:43.260 --> 00:01:47.090
front end which would be communicating with an express backend.

28
00:01:47.130 --> 00:01:51.450
So the end result here is that we'll have a single page up just a really simple one.

29
00:01:51.450 --> 00:01:54.660
In this case when we get to react or focus on more complex things.

30
00:01:54.870 --> 00:01:57.320
Here's a very simple single page to do list.

31
00:01:57.330 --> 00:02:04.680
So I have a form and then I have to do's and I can create a new to do let's say walk dog.

32
00:02:05.700 --> 00:02:07.140
And it adds down here.

33
00:02:07.140 --> 00:02:13.200
But if I refresh the page it's still there to actually being added to a Mangu database and I can update

34
00:02:13.200 --> 00:02:18.780
them by crossing them off and I refresh the page they're still crossed off and it's actually being updated

35
00:02:18.780 --> 00:02:19.500
in a database.

36
00:02:19.530 --> 00:02:22.410
Same thing with the delete.

37
00:02:22.410 --> 00:02:24.900
So that's our and single page application.

38
00:02:24.960 --> 00:02:29.590
But underlying this I go to slash API slash to Dewes.

39
00:02:29.670 --> 00:02:34.350
You can see one of the JS on API endpoints that we're going to be building and there are others.

40
00:02:34.380 --> 00:02:40.170
There's an end point to update to do there's an end point to create a to do and one to delete to do

41
00:02:40.170 --> 00:02:41.140
as well.

42
00:02:41.190 --> 00:02:43.620
So we're going to learn how to make this API first.

43
00:02:43.650 --> 00:02:49.480
How do we respond with Jason and then we'll focus on building an application using that API.

44
00:02:49.890 --> 00:02:55.680
So behind the scenes if we look at some of the requests that are being made here let's say when I update

45
00:02:55.890 --> 00:03:02.400
when I click on this to cross it off you can see an essay char's generated and it's sent to our own

46
00:03:02.400 --> 00:03:03.210
API.

47
00:03:03.210 --> 00:03:08.880
If I look at this X-C char it sent to slash API slash to use slash this massive ID.

48
00:03:09.030 --> 00:03:11.200
And we'll talk more about that once we get there.

49
00:03:11.370 --> 00:03:18.090
But the idea is we're building an API and then we're building an app that uses our own API that's connected

50
00:03:18.090 --> 00:03:19.240
to our own database.

51
00:03:19.500 --> 00:03:20.710
So that's where we're going.

52
00:03:20.730 --> 00:03:25.650
The last thing I'll add is that if you're totally comfortable with the basics of express and routing

53
00:03:25.840 --> 00:03:32.350
or responding with Jason Mongo D-B mongoose all of that you may not need to go through this section.

54
00:03:32.490 --> 00:03:34.780
You might just want to skip to the code at the end.

55
00:03:34.860 --> 00:03:39.120
Look at the finished API look at the finished single page map and make sure you're comfortable with

56
00:03:39.120 --> 00:03:44.700
how it works because in the reac section we're going to be using very very similar code building our

57
00:03:44.700 --> 00:03:47.550
own Express API eyes with the exact same syntax.

58
00:03:47.580 --> 00:03:50.610
So make sure that if you do want to skip it just look at the code first.

59
00:03:50.700 --> 00:03:53.290
And if you have any questions make sure you get those answers.

60
00:03:53.590 --> 00:03:54.000
OK.

61
00:03:54.150 --> 00:03:55.250
Let's get on with it.
