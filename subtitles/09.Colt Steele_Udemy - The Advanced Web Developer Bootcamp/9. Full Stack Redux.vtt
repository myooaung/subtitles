WEBVTT
1
00:00:00.920 --> 00:00:03.140
All right it's time to put it all together.

2
00:00:03.300 --> 00:00:08.960
In the previous screencast we built a Bakan that allowed us to create and read and delete specific to

3
00:00:08.970 --> 00:00:14.020
use what I have in the background is simply just this server that starting on 3000 one.

4
00:00:14.220 --> 00:00:17.460
And I've gone back and started our server on localhost 3000.

5
00:00:17.460 --> 00:00:19.460
This is where we left off on the front end.

6
00:00:19.640 --> 00:00:25.950
What we need to do now is instead of storing to do's in memory we need to connect our front and application

7
00:00:26.190 --> 00:00:27.780
to our back and application.

8
00:00:27.930 --> 00:00:33.930
And in order to do that we need to make some Ajax requests from localhost 3000 to localhost 3000.

9
00:00:33.930 --> 00:00:40.020
And what this means we're going to run some asynchronous code which really important to understand is

10
00:00:40.020 --> 00:00:45.560
that Rydex does not have any built in support for our actions to be asynchronous.

11
00:00:45.810 --> 00:00:48.690
Our actions are always objects.

12
00:00:48.820 --> 00:00:56.130
While that's a little bit of a gotcha there is a way to dispatch asynchronous actions but to do that

13
00:00:56.130 --> 00:01:01.440
we need to introduce a little bit of redux middleware the tool that we're going to be using is called

14
00:01:01.440 --> 00:01:02.850
the redux Thuc.

15
00:01:02.910 --> 00:01:11.100
So we're going to NPM install redux Thuc and this allows us to very easily create asynchronous actions.

16
00:01:11.100 --> 00:01:15.540
We can go take a look at Reebok's bank because you may be hearing this word thunk and wondering just

17
00:01:15.660 --> 00:01:17.270
what the idea is here.

18
00:01:17.580 --> 00:01:20.680
What's really Naysmith redux thunk is the documentation is quite good.

19
00:01:21.000 --> 00:01:29.180
So we can see what is a funk I think is a function that wraps in expression to delay its evaluation.

20
00:01:29.250 --> 00:01:36.450
What we're gonna do here is a wait until an AJAX call has finished to then dispatch an action as opposed

21
00:01:36.450 --> 00:01:38.490
to just dispatching right away.

22
00:01:38.550 --> 00:01:41.790
We're going to simply wait until an asynchronous action has finished.

23
00:01:41.790 --> 00:01:47.940
In our case in AJAX call and when it's done we're then going to dispatch some kind of action.

24
00:01:48.000 --> 00:01:53.130
So we're going to have to make some separate functions that are asynchronous to handle these operations

25
00:01:54.030 --> 00:01:54.630
to get started.

26
00:01:54.630 --> 00:01:59.230
We simply have to install redux stunk and VM install Reducto.

27
00:01:59.480 --> 00:02:06.180
So back over here we've installed redux dunk and I'm going to open this up in sublime inside of sublime

28
00:02:06.230 --> 00:02:09.120
me to first start in our index database.

29
00:02:09.240 --> 00:02:17.350
The first thing I want to do is import thunk from redux Thuc.

30
00:02:17.850 --> 00:02:25.230
The main idea here is that redux dunk allows us to write action creators that return a function instead

31
00:02:25.260 --> 00:02:26.460
of an action.

32
00:02:26.730 --> 00:02:33.450
I think in this case delays dispatch so that we can wait until some asynchronous action has completed

33
00:02:33.450 --> 00:02:39.180
to then dispatch an action we previously saw that action creators are just simple functions that return

34
00:02:39.210 --> 00:02:41.800
an object or some kind of action.

35
00:02:42.210 --> 00:02:48.330
But what we're going to do is use redux thunk so that we can instead turn a function which delays the

36
00:02:48.330 --> 00:02:50.250
dispatch of some action.

37
00:02:50.310 --> 00:02:53.820
It's a little bit tricky to wrap your head around but we'll see this in code and it should make a little

38
00:02:53.820 --> 00:02:55.020
bit more sense.

39
00:02:55.050 --> 00:03:00.810
So we're going to import thunk and then we're going to tell our store about that middleware in order

40
00:03:00.810 --> 00:03:03.450
to do that we need to bring in a couple more things from redox.

41
00:03:03.450 --> 00:03:09.090
We're going to bring in Apply middleware and we're going to bring in compose and apply middleware is

42
00:03:09.090 --> 00:03:12.010
going to allow us to use redux middleware.

43
00:03:12.030 --> 00:03:18.090
Specifically I think the second parameter to create store is a combination of middleware that we're

44
00:03:18.090 --> 00:03:18.740
using.

45
00:03:18.780 --> 00:03:22.460
So we are going to use the compose function to bring that all together.

46
00:03:22.650 --> 00:03:28.350
The first thing that we want to passen to compose is apply middleware and apply middleware is a function

47
00:03:28.350 --> 00:03:30.030
that accepts some kind of middleware.

48
00:03:30.060 --> 00:03:36.030
In our case the bug we're going to saved us and that way when we create our store we're going to use

49
00:03:36.030 --> 00:03:41.290
the root reducer and then we're going to compose all the middleware together into one function.

50
00:03:41.340 --> 00:03:46.140
We're going to use the redux dev tools and we're going to use redux Thomke And that's really all we

51
00:03:46.140 --> 00:03:53.460
need to do inside of our index tracks the rest of the work actually happens inside of our action creators.

52
00:03:53.490 --> 00:03:55.850
And this is where it gets a little bit tricky.

53
00:03:56.130 --> 00:04:03.780
What we're going to do is export some asynchronous functions we're going to start by not exporting these

54
00:04:03.780 --> 00:04:08.350
action creators these action creators right here are going to be very simple.

55
00:04:08.490 --> 00:04:10.070
We're actually going to rename them.

56
00:04:10.230 --> 00:04:15.690
Let's call this one handle and that's going to take some kind of task.

57
00:04:15.810 --> 00:04:22.260
We'll call this handle remove and then we're going to make one more for actually getting all of our

58
00:04:22.260 --> 00:04:30.700
to do this we'll call that handle to use and this will dispatch in action with a type of get to do's

59
00:04:31.350 --> 00:04:34.580
and some kind of data that we get back from our backend.

60
00:04:34.890 --> 00:04:40.170
And if we want to do that we have to make sure we also make a new action type forget to do this.

61
00:04:40.590 --> 00:04:43.120
This right here will retrieve all the traduce.

62
00:04:43.230 --> 00:04:46.050
This will remove a single one and this will add a single one.

63
00:04:46.350 --> 00:04:49.750
But you might be wondering well how are we going to use these action creators.

64
00:04:50.010 --> 00:04:54.390
Well these are not actually the functions that we're going to export the functions that we're going

65
00:04:54.390 --> 00:04:57.110
to export are going to use redux Thuc.

66
00:04:57.300 --> 00:04:59.140
So let's see how that works.

67
00:04:59.190 --> 00:05:07.700
We're going to start by exporting a function called get to use and this is going to accept no parameters

68
00:05:07.700 --> 00:05:08.290
yet.

69
00:05:08.420 --> 00:05:12.860
But instead of returning an object it's going to return a function.

70
00:05:13.010 --> 00:05:16.800
This function is going to accept a parameter called dispatch.

71
00:05:17.060 --> 00:05:19.540
You'll see the syntax a little bit less frequently.

72
00:05:19.730 --> 00:05:22.430
So we're going to use yes 2015 aero functions.

73
00:05:22.550 --> 00:05:26.010
And this is what it looks like inside of here.

74
00:05:26.060 --> 00:05:29.580
We are going to run some kind of AJAX call.

75
00:05:29.720 --> 00:05:31.450
So we're going to use fetch.

76
00:05:31.690 --> 00:05:39.830
We're going to fetch SCDP colon slash slash localhost slash API slash to do this and once we're done

77
00:05:39.890 --> 00:05:45.830
with this AJAX call we're going to run them and we're going to get back some response and convert that

78
00:05:45.950 --> 00:05:46.940
to Jason.

79
00:05:47.630 --> 00:05:53.560
But we're going to do with the next piece of data that's been converted to Jaison is dispatch a function.

80
00:05:53.870 --> 00:06:00.470
We're going to dispatch handle to do's and handle to Doo's accepts some information.

81
00:06:00.650 --> 00:06:04.420
And if anything goes wrong it would be really good to have a nice way to handle errors.

82
00:06:04.440 --> 00:06:06.830
But all I want to do here is cancelled out log.

83
00:06:06.830 --> 00:06:11.620
Something went wrong and passing that error here we should really be dispatching something.

84
00:06:11.630 --> 00:06:15.860
But I'm going to keep it real simple just for some error handling right now.

85
00:06:15.860 --> 00:06:17.510
So what did we just do here.

86
00:06:17.510 --> 00:06:24.140
We made a function that is an action creator except we thought that action creators normally return

87
00:06:24.170 --> 00:06:24.940
objects.

88
00:06:25.070 --> 00:06:30.710
But what is this one returning it's returning a function and this function will execute an asynchronous

89
00:06:30.710 --> 00:06:31.580
action.

90
00:06:31.580 --> 00:06:38.090
And once that asynchronous action is completed we'll dispatch an action creator the ones that were used

91
00:06:38.090 --> 00:06:41.480
to that just return an object.

92
00:06:41.480 --> 00:06:44.010
So this is what it would look like to get to do.

93
00:06:44.470 --> 00:06:48.850
Let's add a couple other for adding to do's and for room with it.

94
00:06:49.280 --> 00:06:52.400
So we're going to export a function we'll call this have to do.

95
00:06:52.400 --> 00:06:55.130
This is going to take in some kind of task.

96
00:06:55.130 --> 00:06:58.720
We're going to use these functions inside of our re-act components.

97
00:06:58.730 --> 00:07:01.310
That's what we're going to connect redux with react.

98
00:07:01.310 --> 00:07:07.130
So we're going to once again return dispatch and inside of here we're going to return the results of

99
00:07:07.130 --> 00:07:07.500
fetch.

100
00:07:07.520 --> 00:07:08.470
But where are we going now.

101
00:07:08.470 --> 00:07:13.890
What's same place each TDP local host and it looks like I forgot the port number here that's three thousand

102
00:07:13.890 --> 00:07:18.520
and one local host 3000 in one slash API I-Slash to use.

103
00:07:18.710 --> 00:07:21.140
But here we have to pass in a bit more information.

104
00:07:21.170 --> 00:07:23.410
We want a method of post.

105
00:07:23.420 --> 00:07:25.370
We want to pass in the correct headers.

106
00:07:25.520 --> 00:07:30.630
So we'll use some new headers and inside of here we want to make sure that we pass in a letter of content

107
00:07:30.630 --> 00:07:36.290
type and a value of application slash Jason I'm using that here.

108
00:07:36.290 --> 00:07:40.140
But if you want to keep it simpler you could use X but you should see how fecche works.

109
00:07:40.370 --> 00:07:43.040
And then we want to make sure that we pass in some kind of body.

110
00:07:43.160 --> 00:07:48.470
So we're going to string ify an object with a key of task and the value of task.

111
00:07:48.470 --> 00:07:50.600
This is we're going to be sending to the server.

112
00:07:51.650 --> 00:07:57.730
And when this is all done we're going to get back some data that we're going to convert to Jason.

113
00:07:58.250 --> 00:08:02.980
And when that has finished we're going to dispatch an action.

114
00:08:03.230 --> 00:08:09.740
So we're going to get some data back and we are going to dispatch the handle and action this handle

115
00:08:09.740 --> 00:08:11.440
an action is very simple.

116
00:08:11.480 --> 00:08:13.250
It's going to go right to our producer.

117
00:08:13.550 --> 00:08:17.080
It's going to trigger ad to do with whatever task we pass in.

118
00:08:17.510 --> 00:08:22.280
Well in this case when I want to call that task and I want to call it something like to do so we'll

119
00:08:22.280 --> 00:08:29.300
save that and right here we're going to pass in very simply whatever we've gotten from our server that

120
00:08:29.300 --> 00:08:30.580
data right here.

121
00:08:31.070 --> 00:08:36.040
If anything goes wrong we'll simply just cancel that log.

122
00:08:36.050 --> 00:08:39.760
Something went wrong and we'll get that there.

123
00:08:39.980 --> 00:08:45.980
So what we're doing here is in our re-act component we need to do is added We're going to wait until

124
00:08:45.980 --> 00:08:51.740
an AJAX call has finished when that AJAX call has finished we're going to go to our producer with that

125
00:08:51.740 --> 00:08:56.140
new to do that we made that we got back from the server and then we're going to go back to Mabuti to

126
00:08:56.150 --> 00:08:56.490
process.

127
00:08:56.510 --> 00:08:58.540
And we're going to update our Riak component.

128
00:08:58.550 --> 00:09:01.480
So once again we'll set a couple of breakpoints to see how this all works.

129
00:09:01.670 --> 00:09:05.120
But let's write one more function call that removed to do.

130
00:09:05.330 --> 00:09:07.330
This is going to accept some kind of ID.

131
00:09:07.490 --> 00:09:13.340
And once again this is an asynchronous action because removing it requires going to the back end and

132
00:09:13.340 --> 00:09:15.680
returning the result of some AJAX call.

133
00:09:15.680 --> 00:09:19.880
So once again we want to go actually use template strings here because we're going to go to a local

134
00:09:19.880 --> 00:09:26.930
host 3000 slash API slash use and we're going to get whatever that ideas once again what method do we

135
00:09:26.930 --> 00:09:32.490
want here we want to specify the each the verb of delete and when that's done just like we saw before.

136
00:09:32.540 --> 00:09:34.910
We're going to get back some response.

137
00:09:34.910 --> 00:09:40.250
Convert that to Jason and then we're going to get back some data and we'll dispatch the result of the

138
00:09:40.250 --> 00:09:43.210
handle the move function with the id pass to it.

139
00:09:43.340 --> 00:09:46.280
And I'll just grab this last handle right here.

140
00:09:46.370 --> 00:09:52.660
What we've done here is created three action creators that don't return objects at they return functions.

141
00:09:52.940 --> 00:09:58.430
And what's going to happen is we're going to use add to do remove to do and get to use inside of our

142
00:09:58.430 --> 00:09:59.490
re-act component.

143
00:10:00.220 --> 00:10:04.810
And when our real component triggers these functions we're going to run these asynchronous calls and

144
00:10:04.810 --> 00:10:08.860
then we're going to dispatch our good old action creators.

145
00:10:08.860 --> 00:10:13.260
Remember here is where we're actually going to return information that go to our producer.

146
00:10:13.630 --> 00:10:21.030
So let's go to our producer for a second inside of our reproducer things look a little bit different.

147
00:10:23.010 --> 00:10:28.340
We're not going to need an idea of zero because Mongoose is going to keep track of ideas.

148
00:10:28.350 --> 00:10:34.500
We also want to make sure we bring in get to do our initial state is going to start as an empty array

149
00:10:35.280 --> 00:10:39.150
because we're not going to go make in Egypt's request from our producer.

150
00:10:39.150 --> 00:10:41.330
We'll see how to get that started in a bit.

151
00:10:41.850 --> 00:10:45.810
But we're going to first make sure we have these an action type for to do.

152
00:10:46.260 --> 00:10:52.620
And when that happens we're simply going to return whatever we had in steede along with two dues which

153
00:10:52.620 --> 00:10:55.810
comes in as action.

154
00:10:55.890 --> 00:11:02.480
What we all remember we pass in inside of our action creators forget to use some kind of data.

155
00:11:02.970 --> 00:11:07.840
So we will do action data that looks good.

156
00:11:07.890 --> 00:11:12.840
What's the next thing we want to think about when we add a to do we don't really have to worry about

157
00:11:12.840 --> 00:11:15.130
incrementing IDs or anything like that.

158
00:11:15.240 --> 00:11:17.090
So we're just going to do something very similar.

159
00:11:17.250 --> 00:11:25.230
We're going to return whatever was in state and our two Dewes will be whatever we had before along with

160
00:11:25.380 --> 00:11:34.950
what we got back from that specific to do this ranger action that to do for a move to do.

161
00:11:34.950 --> 00:11:39.310
Things are going to be very similar except we want to be a little bit careful with Mongo.

162
00:11:39.330 --> 00:11:46.430
We get an ID that comes in as underscore ID so I want to make sure that we see that right there so right

163
00:11:46.430 --> 00:11:51.820
now are reducer is going to have the ability to get to use to add to do's and removed to do this.

164
00:11:51.890 --> 00:11:58.250
But when do we actually start using these specific functions while all the fun begins in our To Do list.

165
00:11:58.410 --> 00:11:59.480
Yes.

166
00:12:00.210 --> 00:12:05.780
What we want to do right off the bat is make sure that we get our second function get to do from here.

167
00:12:05.960 --> 00:12:12.420
Remember these right here all our folks if we take a quick look side by side with our action creators

168
00:12:12.920 --> 00:12:16.170
we can see these functions right over here.

169
00:12:16.280 --> 00:12:19.990
Go look at our To Do list add to do remove to do and get to use.

170
00:12:20.000 --> 00:12:23.060
These are all our folks.

171
00:12:23.060 --> 00:12:29.210
These are all asynchronous operations right now that at the end of the day dispatch an action to take

172
00:12:29.210 --> 00:12:30.900
us to the reducer.

173
00:12:31.280 --> 00:12:35.690
So we're going to make sure that we do in our To Do list as well as make sure that we bring in get to

174
00:12:35.690 --> 00:12:39.230
do those on props.

175
00:12:39.260 --> 00:12:43.760
Now what we want to think about is what this component loads we want to go to the database and get all

176
00:12:43.760 --> 00:12:44.450
of our to do.

177
00:12:44.480 --> 00:12:49.910
So we're going to add the lifecycle method of component did mount and when this happens we are going

178
00:12:49.910 --> 00:12:55.970
to run this not props that get to do this and you may be wondering well what about the doc then what

179
00:12:55.970 --> 00:12:57.450
about all the asynchronous operation.

180
00:12:57.470 --> 00:13:02.750
Well we don't have to do that here because when we run get to do is we're going to go to our action

181
00:13:02.750 --> 00:13:03.950
creator.

182
00:13:03.950 --> 00:13:05.840
We're going to run get to use.

183
00:13:05.900 --> 00:13:11.150
We're going to make an Ajax request and then we're going to dispatch handle to Doo's with whatever data

184
00:13:11.240 --> 00:13:14.170
we got back inside of our To Do list.

185
00:13:14.180 --> 00:13:17.480
We also want to make sure that we fix a couple of things.

186
00:13:17.480 --> 00:13:24.470
Remember everything is coming in as underscore ID and our key can be that specific ID.

187
00:13:24.710 --> 00:13:29.130
We don't have to worry that an index anymore since we're using Mongo for our database.

188
00:13:29.210 --> 00:13:32.930
So let's see this now and let's go see what's happening in the browser.

189
00:13:32.990 --> 00:13:35.900
We're going to go start the server up and see how many bugs we've made.

190
00:13:35.940 --> 00:13:36.450
It's a start.

191
00:13:36.460 --> 00:13:38.930
This will give that second.

192
00:13:39.050 --> 00:13:44.190
And let's see if everything's working as planned or if there are some things that we forgot about what

193
00:13:44.190 --> 00:13:46.410
you want to make sure that you have with asynchronous actions.

194
00:13:46.410 --> 00:13:48.610
It's just the ability to dispatch thanks.

195
00:13:48.720 --> 00:13:52.440
Looks like a syntax error and action creators just 46.

196
00:13:52.470 --> 00:13:56.030
So let's head over to action creators 46 don't ever want a semi-colon.

197
00:13:56.040 --> 00:13:58.260
Who is one to make sure we change this with a dot.

198
00:13:58.530 --> 00:14:00.690
Let's go see that right.

199
00:14:00.690 --> 00:14:02.090
Looks like we're running something.

200
00:14:02.220 --> 00:14:03.750
Let's go refresh this right here.

201
00:14:03.750 --> 00:14:07.110
And what's interesting to know is code well where did that come from.

202
00:14:07.110 --> 00:14:12.080
Remember in the last video on the back end we actually made this right here.

203
00:14:12.420 --> 00:14:18.030
So what I'm going to do is log my SNL HGP requests and I'm going to refresh the page and when the page

204
00:14:18.030 --> 00:14:24.000
loads it finishes loading this race here localhost three thousand one slash to do this.

205
00:14:24.120 --> 00:14:28.110
If I look at the response well that's just the information right there on the page.

206
00:14:28.230 --> 00:14:32.920
But this right here is the API call that we make to get back all of those to use.

207
00:14:33.570 --> 00:14:34.790
Well what about adding it to do.

208
00:14:34.860 --> 00:14:37.690
Let's try to always keep our chrome dev tools open.

209
00:14:37.710 --> 00:14:41.310
Let's try to add it to do shouldn't be called added to this but we can fix that.

210
00:14:41.580 --> 00:14:45.720
So let's fix a typo let's go at to do.

211
00:14:45.930 --> 00:14:48.890
And notice here that fetched finish loading options.

212
00:14:49.080 --> 00:14:55.440
If you remember how course works we send a very quick request to make sure that we can actually make

213
00:14:55.440 --> 00:14:57.450
a corps request to that domain.

214
00:14:57.660 --> 00:15:03.240
Otherwise we'll get an issue with the same origin policy and inside of action creators 37 this is the

215
00:15:03.240 --> 00:15:05.880
actual Ajax request that's being made.

216
00:15:06.000 --> 00:15:11.250
If I refresh the page we can see right here that this is still being persisted.

217
00:15:11.250 --> 00:15:14.190
We're using a database for all of this information.

218
00:15:14.190 --> 00:15:19.860
So we'll all do right now is remove one of these and it looks like we've removed it successfully when

219
00:15:19.860 --> 00:15:20.630
our first page.

220
00:15:20.640 --> 00:15:27.720
I still have fix that typo so let's add it to do and we'll say go over all this code and we'll add that

221
00:15:27.720 --> 00:15:28.180
to do.

222
00:15:28.320 --> 00:15:31.730
And notice here we me that Ajax request to get that information.

223
00:15:31.740 --> 00:15:36.240
If we take a look on the back end we can actually see all these requests that are coming in all these

224
00:15:36.240 --> 00:15:41.370
options or we call preflight requests to make sure that they are authorized and then we've deleted as

225
00:15:41.370 --> 00:15:41.790
well.

226
00:15:41.820 --> 00:15:47.250
And getting one more time inserting we're finding and modifying this is exactly what we want to do to

227
00:15:47.250 --> 00:15:49.470
wire everything backup.

228
00:15:49.470 --> 00:15:51.150
Now there's a lot of code that we've written.

229
00:15:51.210 --> 00:15:54.300
So let's go take a step back and see how we put it all together.

230
00:15:54.450 --> 00:16:00.220
When you start working with a backend you need to communicate to that back and we got to use AJAX.

231
00:16:00.220 --> 00:16:05.550
And when you're using AJAX you're dealing with asynchronous code and in the confines of redux we can't

232
00:16:05.550 --> 00:16:07.880
actually write action creators.

233
00:16:09.210 --> 00:16:16.320
That are not synchronous redux only supports action creators that are synchronous out of the box in

234
00:16:16.320 --> 00:16:21.960
order to allow for asynchronous action creators or in order to allow an action creator to not return

235
00:16:21.960 --> 00:16:23.460
an object but a function.

236
00:16:23.580 --> 00:16:28.580
We need to use redux funk we need to delay the evaluation of some expression.

237
00:16:28.740 --> 00:16:34.170
In this case delaying the dispatch we're going to wait until a function finishes before we dispatch.

238
00:16:34.170 --> 00:16:38.330
What I'll do next is set some breakpoints but I want to walk through the code first in our index that

239
00:16:38.410 --> 00:16:44.460
yes we import func and we compose all of our middleware that includes the redux dev tools.

240
00:16:44.550 --> 00:16:46.260
Notice you were still using Riak router.

241
00:16:46.380 --> 00:16:54.100
We've wrapped everything all together inside of my route reducer I change things around a little bit.

242
00:16:54.280 --> 00:16:58.480
I don't have to worry about keeping track of some ID because the back end is going to do that and I

243
00:16:58.480 --> 00:17:02.320
don't have to worry about adding to Dewes by managing IDs or anything.

244
00:17:02.320 --> 00:17:06.790
All I do is grab whatever comes in from that action.

245
00:17:06.790 --> 00:17:10.950
So I'll start here by putting a debugger inside of the root reducer.

246
00:17:11.050 --> 00:17:15.640
The next thing I do in my to do list and with closes for a second so that I don't get too many debuggers

247
00:17:16.210 --> 00:17:17.720
inside of the to do list.

248
00:17:17.890 --> 00:17:20.330
We're going to start by grabbing some redux.

249
00:17:20.470 --> 00:17:22.330
So I'll throw a debugger here.

250
00:17:22.420 --> 00:17:27.120
We're then going to render some information other debuggers here.

251
00:17:27.640 --> 00:17:32.460
And let's go see how information flows throughout our application inside of my action readers I'll do

252
00:17:32.470 --> 00:17:35.470
the same exact thing for each one of these.

253
00:17:35.730 --> 00:17:41.210
I'll go put a debugger so we can see exactly how everything flows in our application.

254
00:17:41.690 --> 00:17:45.920
It's going to be a lot of debuggers but you can understand how data flows in an application with redux

255
00:17:45.920 --> 00:17:47.450
you're in great shape.

256
00:17:47.470 --> 00:17:50.970
So let's go back and let's go to localhost 3000.

257
00:17:51.550 --> 00:17:56.340
I'm going to keep my dev tools open and we're going to start by refreshing the page.

258
00:17:56.440 --> 00:17:59.340
Now the first place we go to is always the root reducer.

259
00:17:59.530 --> 00:18:01.260
No asynchronous actions have happened yet.

260
00:18:01.260 --> 00:18:04.590
Redux always has the dispatch this in it.

261
00:18:04.750 --> 00:18:05.920
Where do we go next.

262
00:18:05.950 --> 00:18:11.240
We always go back to maps that props our initial state doesn't have to do from the back end yet.

263
00:18:11.350 --> 00:18:17.140
What we want to do first is render the component and then when that component mounts we're going to

264
00:18:17.140 --> 00:18:23.980
trigger get to do X and get to Doo's is going to run this asynchronous operation.

265
00:18:23.980 --> 00:18:29.390
And when this asynchronous operation is done we're going to dispatch handle to do this.

266
00:18:29.860 --> 00:18:33.800
And when we dispatch handle to notice we get back this data right here.

267
00:18:34.120 --> 00:18:36.940
And this data refers to what we're getting back from the backend.

268
00:18:37.480 --> 00:18:42.430
What we're going to do then is dispatch an action of get to use that's going to take us back to the

269
00:18:42.430 --> 00:18:47.290
reducer and it's going to put us right back here in this return statement.

270
00:18:47.680 --> 00:18:50.130
And once we return this information where do we go.

271
00:18:50.230 --> 00:18:52.170
It's the same old cycle as before.

272
00:18:52.240 --> 00:18:59.400
Back into maps data props with the new data back into render and then we render components on the page.

273
00:18:59.560 --> 00:19:00.300
A lot of fun stuff.

274
00:19:00.310 --> 00:19:02.340
Let's do it again refresh the page.

275
00:19:02.350 --> 00:19:04.760
The first place we go to as always is the reducer.

276
00:19:04.780 --> 00:19:06.090
We need some initial state.

277
00:19:06.460 --> 00:19:10.530
None of these action types are going to be triggered so we're going to default to our original state.

278
00:19:10.750 --> 00:19:15.610
We're then going to go back to map state to prop's as we always do with some default state which is

279
00:19:15.610 --> 00:19:17.810
an array with nothing in it.

280
00:19:17.890 --> 00:19:22.530
We're then going to go back to render and when we render we're going to immediately trigger component

281
00:19:22.540 --> 00:19:27.170
did mount when component did mount runs this is a reactive lifecycle method.

282
00:19:27.270 --> 00:19:32.650
It's going to trigger this thought process that get to well what does get to do is it is an action creator

283
00:19:32.980 --> 00:19:34.150
that returns a function.

284
00:19:34.180 --> 00:19:35.250
It is a think.

285
00:19:35.830 --> 00:19:42.520
And when this action creator finishes an asynchronous action it's going to dispatch a function called

286
00:19:42.520 --> 00:19:47.330
handle to do is remember whenever we dispatch we always return an object.

287
00:19:47.500 --> 00:19:48.730
And what are we returning here.

288
00:19:48.730 --> 00:19:53.950
An object with the type of get to use the second that we dispatch where do we go we always go back to

289
00:19:53.950 --> 00:19:57.060
the reproducer all built upon itself.

290
00:19:57.370 --> 00:20:02.320
Except this time we have get to do this which is going to take whatever was in state and the two days

291
00:20:02.320 --> 00:20:06.940
that we got back from the API we're going to go back to maps the props we're going to render the component

292
00:20:06.940 --> 00:20:09.640
again with our to use.

293
00:20:10.420 --> 00:20:11.320
All right let's do it again.

294
00:20:11.320 --> 00:20:12.380
How about adding it to do.

295
00:20:12.730 --> 00:20:16.350
When I click add it to do we're going to render again because of the Riak router.

296
00:20:16.540 --> 00:20:23.410
When I type in the task of awesome let's add that to do when I add that to do we go run this ad to do

297
00:20:23.470 --> 00:20:24.180
function.

298
00:20:24.460 --> 00:20:26.940
This is going to dispatch in action.

299
00:20:27.010 --> 00:20:29.140
It's going to dispatch the action.

300
00:20:29.170 --> 00:20:34.870
That allows me to handle add and notice those additional debuggers because the Riak router is changing

301
00:20:34.870 --> 00:20:35.570
the page.

302
00:20:35.760 --> 00:20:38.440
So inside handle I get back that new to do that I need.

303
00:20:38.440 --> 00:20:40.740
This is what my back end is responding.

304
00:20:41.200 --> 00:20:43.210
I go back to the root reducer.

305
00:20:43.210 --> 00:20:48.070
I go back to add to do and all over again nafs the props render the component.

306
00:20:48.220 --> 00:20:48.930
And here we go.

307
00:20:49.030 --> 00:20:50.330
We have that new one right there.

308
00:20:50.620 --> 00:20:51.610
How about deleting.

309
00:20:51.970 --> 00:20:55.100
When I delete I go to remove to do and I get the ID.

310
00:20:55.210 --> 00:20:56.440
How am I getting that idea.

311
00:20:56.440 --> 00:21:00.820
Remember I've binded that correctly in my re-act component inside of here.

312
00:21:00.840 --> 00:21:04.430
Have binded or bound the correct ID.

313
00:21:04.590 --> 00:21:09.420
We then go back to handle remove when that's done we go back to our root reducer.

314
00:21:09.640 --> 00:21:11.680
And finally we're going to hit remove to do.

315
00:21:11.950 --> 00:21:15.190
We're going to go back to maps the props we're going to render the component again.

316
00:21:15.280 --> 00:21:17.830
We're going to see it without that specific to do.

317
00:21:18.250 --> 00:21:20.500
So this is how we can put everything together.

318
00:21:20.680 --> 00:21:24.310
There are a lot of moving parts but the more that you can set the buggers and step through each part

319
00:21:24.310 --> 00:21:27.530
of the application the more you're going to understand how it works.

320
00:21:27.550 --> 00:21:32.230
The most important thing to understand about what we've done so far is that by default redux does not

321
00:21:32.290 --> 00:21:36.550
allow action creators to return anything that's not an object.

322
00:21:36.610 --> 00:21:43.090
We always have to dispatch objects but when we use redux Thomke our action creators can return functions

323
00:21:43.570 --> 00:21:47.530
because we want the function to delay the execution of dispatching.

324
00:21:47.530 --> 00:21:49.100
We don't want to dispatch right away.

325
00:21:49.740 --> 00:21:55.590
Wait until it asynchronous operation has finished and then we can dispatch that same old object that

326
00:21:55.590 --> 00:21:57.210
we're used to every time.

327
00:21:57.210 --> 00:22:01.920
So when you need redox to run some kind of asynchronous operation you have to make sure to use some

328
00:22:01.920 --> 00:22:07.410
kind of middleware redux think is a very popular one redux saga is another one as well.

329
00:22:07.410 --> 00:22:11.040
So we'll stop here take a look at this code write it yourself.

330
00:22:11.110 --> 00:22:16.140
Some debuggers step through and you'll master how data flows through a full stack application with react

331
00:22:16.230 --> 00:22:18.780
relax and no decken and the Riak router.

332
00:22:18.990 --> 00:22:20.510
I'll see you in the next contest.
