1
00:00:00,240 --> 00:00:01,090
Welcome back.

2
00:00:01,290 --> 00:00:06,570
In this video we're going to discuss a very useful operator that as 2015 gives us cover the rest.

3
00:00:06,570 --> 00:00:12,250
Operator which collects the remaining arguments to a function and returns them to us in an array.

4
00:00:12,570 --> 00:00:14,510
Let's see what we mean with an example.

5
00:00:14,550 --> 00:00:20,580
I'm going to write a function called Print arguments which accepts three parameters a b and using the

6
00:00:20,580 --> 00:00:21,560
rest operator.

7
00:00:21,600 --> 00:00:23,150
The rest of the arguments.

8
00:00:23,190 --> 00:00:27,720
Notice that we're using three dots to denote the rest operator inside of this function.

9
00:00:27,720 --> 00:00:33,750
I'm going to print out each of these parameters so let's cancel that log a cancelled out log B and cancel

10
00:00:33,750 --> 00:00:40,080
it out log C notice that we are only using the three dots when defining the parameters to a function.

11
00:00:40,080 --> 00:00:42,450
Now let's see what happens when I invoke this function.

12
00:00:42,450 --> 00:00:46,920
Notice that A and B are numbers but C is an array of all the arguments.

13
00:00:46,920 --> 00:00:47,560
Pretty neat.

14
00:00:47,760 --> 00:00:49,500
But when is this useful.

15
00:00:49,500 --> 00:00:54,220
You may work on problems where you need to access the arguments array like object and manipulate it.

16
00:00:54,540 --> 00:00:59,580
But since the keyword arguments is not actually an array you can't use methods like for each map or

17
00:00:59,580 --> 00:01:03,450
filter unless you convert it into an array which is a bit tedious.

18
00:01:03,690 --> 00:01:05,220
Let's see what we mean by that.

19
00:01:05,220 --> 00:01:10,290
Here we have a function called some arguments which iterates over the arguments array like object.

20
00:01:10,290 --> 00:01:15,150
Notice that we can use a for loop because even though the arguments array like object is not exactly

21
00:01:15,150 --> 00:01:18,830
an array it still has a length property inside of the for loop.

22
00:01:18,870 --> 00:01:24,100
We're building a total which consists of each argument added together when the for loop is done.

23
00:01:24,120 --> 00:01:29,730
We return the total if we wanted to we could get a little fancier and convert the arguments array like

24
00:01:29,760 --> 00:01:33,000
object into an array using slice and call.

25
00:01:33,000 --> 00:01:37,310
If you're not exactly sure what's going on here we're using the slice method on an array.

26
00:01:37,590 --> 00:01:43,130
But setting what we would like to slice as the arguments array like object using Dom call.

27
00:01:43,170 --> 00:01:47,880
Now that we have an array we can use the reduced method to sum all of these values.

28
00:01:47,880 --> 00:01:49,500
This will do the same thing as above.

29
00:01:49,730 --> 00:01:51,870
How can the rest operator help us.

30
00:01:51,990 --> 00:01:54,520
Let's see how this would work in 2015.

31
00:01:55,020 --> 00:01:56,690
Don't be too scared by this solution.

32
00:01:56,850 --> 00:02:01,700
We're using the rest operator as well as aero functions to write a concise solution.

33
00:02:02,040 --> 00:02:07,200
We're using the rest operator to gather all the arguments as an array so that we don't need to use the

34
00:02:07,200 --> 00:02:14,390
array like object arguments were then doing the same exact reduce as above but using an arrow function

35
00:02:14,490 --> 00:02:18,690
so we can place it all on one line to really reinforce these concepts.

36
00:02:18,690 --> 00:02:22,430
Try running them in the chrome Council to see how they work in the next video.

37
00:02:22,440 --> 00:02:26,120
We'll see the same three dots but not used as a parameter to a function.

38
00:02:26,210 --> 00:02:26,640
See that.
