1
00:00:00,510 --> 00:00:05,970
Well I'm calling this video set state can be tricky for the simple reason that set state can sometimes

2
00:00:05,970 --> 00:00:08,500
be confusing when you first start to learn about it.

3
00:00:08,520 --> 00:00:13,360
So let's look at a couple of examples that will hopefully clarify a few things.

4
00:00:13,730 --> 00:00:19,730
Our objectives will be to use a function as the first parameter to set state and to add a callback to

5
00:00:19,730 --> 00:00:22,790
the set state to determine when the state is up to date.

6
00:00:24,850 --> 00:00:30,590
So first we'll take an example of set state call that depends on a previous version of the state.

7
00:00:31,060 --> 00:00:34,960
In this example we have a state where we just are keeping track of a counter.

8
00:00:35,200 --> 00:00:38,140
So every time something happens we want to increment a counter.

9
00:00:38,680 --> 00:00:40,630
So you might write some code that looks like this.

10
00:00:40,810 --> 00:00:45,580
We're passing in a new value for counter which depends on the old value of the counter.

11
00:00:45,580 --> 00:00:51,550
So inside that said state this dot state DOT counter gets incremented by one.

12
00:00:51,640 --> 00:00:55,330
But the problem comes in when you do this multiple times.

13
00:00:55,330 --> 00:01:00,190
So if I have a couple set states like this the value that you'll get after all these red states have

14
00:01:00,190 --> 00:01:01,790
run will be too.

15
00:01:01,930 --> 00:01:05,060
And that's probably not what you expected you probably wanted it to be three.

16
00:01:05,320 --> 00:01:11,160
Well the reason that's happening is because you can essentially think of said State is doing this.

17
00:01:11,620 --> 00:01:15,660
So when there are multiple set states that are called that are depending on the previous state.

18
00:01:15,850 --> 00:01:18,240
It's kind of like doing an object assigned.

19
00:01:18,250 --> 00:01:24,910
So in this assignment the counter value that we're going to get after all these objects are assigned

20
00:01:24,920 --> 00:01:30,620
or over with is still just going to be too right because this starts state DOT counter never changes

21
00:01:30,620 --> 00:01:32,690
and all these objects are assigned.

22
00:01:32,680 --> 00:01:34,310
It's all going to be the same thing.

23
00:01:34,720 --> 00:01:36,350
So how do we fix this problem.

24
00:01:38,110 --> 00:01:41,940
Well sets they can actually take an update function rather than object.

25
00:01:41,950 --> 00:01:47,110
So this is what you want to use whenever the the the state that you're updating depends on a previous

26
00:01:47,110 --> 00:01:48,750
value for the state.

27
00:01:48,790 --> 00:01:52,480
So as you can see here this function has two parameters.

28
00:01:52,480 --> 00:01:58,750
The previous state and wherever our props are and then our goal is to return an object for the new state

29
00:01:59,500 --> 00:02:05,320
and inside of this object we're assigning the value for the counter to be the previous state that counted

30
00:02:05,320 --> 00:02:06,630
plus 1.

31
00:02:06,820 --> 00:02:11,460
And when we use this function update format we're always guaranteed to get a correct value.

32
00:02:14,630 --> 00:02:20,090
So again to reiterate the rule is whenever a set state depends on the previous state use a function

33
00:02:20,090 --> 00:02:22,670
parameter rather than just passing an object

34
00:02:26,900 --> 00:02:30,810
the other gotcha was said state is that said state is asynchronous.

35
00:02:30,810 --> 00:02:37,430
So I call this Dodd said state and I provide an object with name and Tim if I'm doing some debugging

36
00:02:37,850 --> 00:02:43,940
and I want to check the value of state that name right after that the update will not have happened

37
00:02:43,940 --> 00:02:44,470
yet.

38
00:02:44,750 --> 00:02:48,460
So this is a common error that I see all the time when people are first learning react.

39
00:02:48,500 --> 00:02:52,490
They try to figure out what's going on in their application by putting a console log right after the

40
00:02:52,490 --> 00:02:53,400
said State.

41
00:02:53,510 --> 00:02:54,850
So this will not work.

42
00:02:54,980 --> 00:02:57,870
And that's because again set state is asynchronous.

43
00:02:57,980 --> 00:03:05,450
So the correct way to do this is to provide a callback parameter to set state just like this.

44
00:03:05,460 --> 00:03:10,470
So in the first parameter we're providing our object or perhaps our update function depending on which

45
00:03:10,470 --> 00:03:11,920
one we want to use.

46
00:03:12,090 --> 00:03:14,710
The second parameter is a callback function.

47
00:03:14,850 --> 00:03:20,700
You aren't provided any premises callback function and this will only be invoked after that that state

48
00:03:20,700 --> 00:03:21,630
has completed.

49
00:03:21,780 --> 00:03:27,420
So you know at this time that this does state that name will be the result of whatever update the tried

50
00:03:27,420 --> 00:03:29,220
to run here.

51
00:03:29,220 --> 00:03:29,750
So that's it.

52
00:03:29,750 --> 00:03:31,380
That's our two big gotchas.

53
00:03:31,380 --> 00:03:36,690
You want to use an update function whenever your update depends on a previous state and you want to

54
00:03:36,690 --> 00:03:41,040
be aware that set say it is asynchronous so if you want to know once that state is finished provide

55
00:03:41,040 --> 00:03:42,860
a callback function.

56
00:03:42,870 --> 00:03:45,390
Next up will look at the browser plug in for re-act.
