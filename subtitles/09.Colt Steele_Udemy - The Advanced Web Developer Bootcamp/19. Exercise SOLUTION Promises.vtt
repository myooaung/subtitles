WEBVTT
1
00:00:00.970 --> 00:00:01.740
Welcome back.

2
00:00:01.900 --> 00:00:06.310
In this video we're going to go over solutions to the promises exercises.

3
00:00:06.310 --> 00:00:11.200
The first function we need to implement is to get most followers function which will accept a variable

4
00:00:11.200 --> 00:00:17.110
number of arguments which will be get hub user names and will query the get hub API and return whichever

5
00:00:17.140 --> 00:00:19.870
one of the user names has the most followers.

6
00:00:20.050 --> 00:00:24.210
First let's create a variable called ACOR L which will be to u r l.

7
00:00:24.220 --> 00:00:26.410
I will be making API requests too.

8
00:00:26.830 --> 00:00:36.310
That u r l is H TZP s colon slash slash API dot get a dot com slash users slash of and create a variable

9
00:00:36.310 --> 00:00:39.970
called You Are else which will be a new array of promises.

10
00:00:39.970 --> 00:00:43.560
I'll use the map function and return the result of Jake worried.

11
00:00:43.600 --> 00:00:48.820
Get Jason with the base you are out and the username I'm mapping over user names.

12
00:00:48.820 --> 00:00:52.180
Is an array which I've collected using the rest operator.

13
00:00:52.660 --> 00:00:58.840
I'll then use the promised method to resolve all of my promises and then create a variable called Max

14
00:00:59.340 --> 00:00:59.780
here.

15
00:00:59.800 --> 00:01:06.070
I'll store the result of sorting the resolve promises and seeing which one has the highest follower's

16
00:01:06.070 --> 00:01:07.080
property.

17
00:01:07.240 --> 00:01:13.270
I can do that using Adolf follower's is less than beat up followers and then access the first value

18
00:01:13.270 --> 00:01:16.870
in that array which is the user with the most followers.

19
00:01:16.870 --> 00:01:19.890
Notice I'm using aero functions here to really clean things up.

20
00:01:20.740 --> 00:01:27.520
Finally I'll return a string which says next start name has the most followers with Max followers.

21
00:01:27.700 --> 00:01:32.300
When I invoke this function I can get some output using Dopp that.

22
00:01:32.430 --> 00:01:36.840
So between myself Tim and cold was the most followers.

23
00:01:37.150 --> 00:01:40.290
The answer is called the next function we need to implement.

24
00:01:40.330 --> 00:01:44.260
Is Star worst string which except some number or ID.

25
00:01:44.410 --> 00:01:48.520
Well first start by making a variable called SDR which is an empty string.

26
00:01:48.910 --> 00:01:54.580
We'll then make our first AJAX call to the Star Wars API with whatever ID specified.

27
00:01:54.880 --> 00:02:00.610
When said Ajax call is done we'll take that data and start building up our string by mentioning who

28
00:02:00.610 --> 00:02:04.270
this character is and what they're featured in.

29
00:02:04.390 --> 00:02:10.890
We'll then make sure that we go to the films property that we get back and access the first film will

30
00:02:10.930 --> 00:02:12.430
then return the AJAX call.

31
00:02:12.430 --> 00:02:18.740
To get that specific movie once we finish the next AJAX call we'll keep building up our strength to

32
00:02:18.740 --> 00:02:23.060
mention the title of the film and the director as well.

33
00:02:23.060 --> 00:02:28.220
The last thing we need to do is mention the first planet that the movie is featured in and return the

34
00:02:28.220 --> 00:02:29.350
result of the next.

35
00:02:29.350 --> 00:02:36.800
AJAX call finally we'll get back some information on the planet to build up our strain to mention where

36
00:02:36.860 --> 00:02:38.020
this takes place.

37
00:02:38.120 --> 00:02:41.860
And then finally return our SDR variable.

38
00:02:41.990 --> 00:02:45.170
So let's see what happens when we invoke this with the idea of one.

39
00:02:45.620 --> 00:02:50.180
Let's make sure we're on a Web site that is using Querrey which you can see by typing in the word J.A.G.

40
00:02:50.870 --> 00:02:56.530
when we invoke this function with the number 1 and cancel that log with the return value from the resolve

41
00:02:56.540 --> 00:02:57.300
promise.

42
00:02:57.500 --> 00:03:03.340
We can see some fun facts about Luke Skywalker and that's all for the promises exercises.

43
00:03:03.380 --> 00:03:04.270
These ones were tough.

44
00:03:04.310 --> 00:03:08.620
So if you didn't solve them read through the code and try to implement them on your own.

45
00:03:08.780 --> 00:03:10.370
Good luck and I'll see you in the next video.
