1
00:00:00,330 --> 00:00:06,570
Welcome back in the last video we learned about G.O. Jaison and how to use D-3 to translate between

2
00:00:06,570 --> 00:00:08,560
Geo Jaison and patho elements.

3
00:00:09,340 --> 00:00:14,590
Before we move on to start building RMX though it's worth pointing out that there's sometimes another

4
00:00:14,590 --> 00:00:19,130
step in this process for large sets of geographic data.

5
00:00:19,150 --> 00:00:24,700
It's common to use an encoding called Toppo Jaison which is an extension of geo Jaison.

6
00:00:24,760 --> 00:00:29,620
The biggest difference between these two encodings is that top Ojay sign removes duplication in the

7
00:00:29,620 --> 00:00:33,390
geometry by replacing coordinates with arcs.

8
00:00:33,640 --> 00:00:39,040
For example in are drawing from the last video we encoded the border between the blue and the orange

9
00:00:39,040 --> 00:00:46,500
squares twice once as a side for the blue square and once as a side for the orange square top adjacent

10
00:00:46,530 --> 00:00:48,180
eliminates this duplications.

11
00:00:48,180 --> 00:00:53,220
And for larger data sets can often encode the same data more succinctly resulting in a smaller file

12
00:00:53,220 --> 00:00:54,470
size.

13
00:00:54,480 --> 00:00:57,360
There are other benefits to check out the resources.

14
00:00:57,390 --> 00:01:02,770
If you'd like to learn more let's dig into an example as usual.

15
00:01:02,770 --> 00:01:04,510
Here are some links.

16
00:01:04,510 --> 00:01:07,670
This project is nearly the same as the one in the last video.

17
00:01:07,840 --> 00:01:12,910
The only difference is that now I have a file with top OJs on data as well as the original Geogia is

18
00:01:12,910 --> 00:01:14,470
on file.

19
00:01:14,470 --> 00:01:16,660
Let's take a look at the top OJs file.

20
00:01:17,110 --> 00:01:22,900
As you can see the geometries now have an arx property rather than a coordinates property the values

21
00:01:22,900 --> 00:01:24,490
in each Ark's array are indices.

22
00:01:24,520 --> 00:01:27,990
The point to this Arc's property farther down in the file.

23
00:01:28,330 --> 00:01:34,940
Here we have an array of arrays where each nested array again contains an array of coordinates these

24
00:01:34,940 --> 00:01:37,970
coordinates represent the arc.

25
00:01:38,010 --> 00:01:43,800
The first point in each arc represents the starting point and any subsequent point represents distances

26
00:01:43,800 --> 00:01:45,580
from the previous point.

27
00:01:45,630 --> 00:01:52,960
For example here we see that the blue square consists of arcs at index 0 1 and 2 moving to the collection

28
00:01:52,960 --> 00:01:53,760
of arcs.

29
00:01:53,830 --> 00:01:59,160
We see that the first one starts at 0 100 and then goes to 100 100.

30
00:01:59,200 --> 00:02:05,910
So this is the bottom side of the square the next arc starts at 100 100 and goes to 100 0.

31
00:02:06,190 --> 00:02:08,760
So this is the right side.

32
00:02:08,830 --> 00:02:15,340
Finally the last arc starts at 100 0 goes to 0 0 and then goes to zero 100.

33
00:02:15,340 --> 00:02:17,970
These are the top and left sides.

34
00:02:18,250 --> 00:02:23,700
If you see a negative x in the arcs array This reverses the direction that you travel around the arc.

35
00:02:23,980 --> 00:02:27,890
The value of the negative number is called The ones complement of the index.

36
00:02:28,090 --> 00:02:33,160
So to find the arc referenced by the negative number you can flip the sine and subtract 1.

37
00:02:33,340 --> 00:02:39,450
For example the orange square starts with the market index 3 which consists of the left and bottom sides

38
00:02:40,470 --> 00:02:46,730
next is the Arcand index for which consists of the right side of the square the last are references

39
00:02:46,740 --> 00:02:47,600
minus one.

40
00:02:47,760 --> 00:02:52,300
So to find that are we flip this and plus one and subtract 1 to get zero.

41
00:02:52,710 --> 00:02:58,470
This means we need to use the arc index 0 but reverse direction will start at one hundred one hundred

42
00:02:58,650 --> 00:03:00,650
and go to zero 100.

43
00:03:00,660 --> 00:03:03,640
This is the top side of the square.

44
00:03:03,710 --> 00:03:07,270
That's enough about top of J on for now let's see how we use it.

45
00:03:07,640 --> 00:03:11,960
Unfortunately D-3 can't translate between top of Jaison and paths directly.

46
00:03:12,230 --> 00:03:17,140
So when we use typologies on there's a two step process involved we first need to convert the top of

47
00:03:17,140 --> 00:03:22,580
adjacent to Geogia so on and then we need to convert the DOJ onto that and path commands.

48
00:03:22,970 --> 00:03:27,860
We've seen how to take care of the second step of the process using D-3 for the first step.

49
00:03:27,920 --> 00:03:33,490
Need to use another library called conveniently enough topple Jason.

50
00:03:33,660 --> 00:03:39,060
One of the key developers of typologies on is Mike Bostock who's also a developer on D-3.

51
00:03:39,060 --> 00:03:44,160
So the two tools play very nicely together to translate tablemates on into Geogia.

52
00:03:44,310 --> 00:03:50,730
Let me first include the Tabo adjacent library via a script tag next top into the javascript file that

53
00:03:50,730 --> 00:03:52,890
we worked on in the last video.

54
00:03:52,940 --> 00:03:58,350
I'll change the first argument in D-3 that Jason so that we're using the top OJs on file not the Geogia

55
00:03:58,470 --> 00:04:02,690
on file previously we joined our data to the MT selection.

56
00:04:02,700 --> 00:04:06,710
The data that features but now our data is in the wrong format.

57
00:04:06,930 --> 00:04:10,790
It's Toppo Jaison instead of DOJ on to fix this.

58
00:04:10,800 --> 00:04:13,590
We'll use the top adjacent feature method.

59
00:04:13,590 --> 00:04:18,900
This method takes in an object from a top adjacent file along with a path in that object to where the

60
00:04:18,900 --> 00:04:19,720
geometries are

61
00:04:23,900 --> 00:04:24,670
in our case.

62
00:04:24,710 --> 00:04:31,040
If we refer to our file as data we see that the geometries live in data objects collection.

63
00:04:31,070 --> 00:04:36,900
So if we pass these two objects in the top adjacent that feature you can see that we get valid DOJ some

64
00:04:36,890 --> 00:04:39,480
data back.

65
00:04:39,550 --> 00:04:44,800
All we really need to do here is update our data join rather than joining the Davidoff features we need

66
00:04:44,800 --> 00:04:52,370
to call Toppo adjacent feature pass the correct arguments and then co-features on the return value great.

67
00:04:52,490 --> 00:04:59,000
We've recreated the same small demos before just with Toppo Jason instead of G.O. Jason.

68
00:04:59,050 --> 00:05:04,540
One more thing before we move on now at the top are adjacent files also have scale and transform properties

69
00:05:04,630 --> 00:05:09,730
that allow us to scale the image or move it around in the next video we'll see how you can scale and

70
00:05:09,730 --> 00:05:15,520
translate in javascript but you can also manipulate these values directly in the Jaisalmer file.

71
00:05:15,520 --> 00:05:21,010
For example if we want to stretch our shapes in the x direction and translate them over and down we

72
00:05:21,010 --> 00:05:27,100
can update these properties and then refresh the page as you can see our image has been transformed.

73
00:05:28,510 --> 00:05:29,050
OK.

74
00:05:29,140 --> 00:05:34,150
That's it for top of Jaison now that you know the basics of transforming geographic data into patho

75
00:05:34,150 --> 00:05:38,120
elements in the next video we'll build them map visualization.

76
00:05:38,200 --> 00:05:38,930
I'll see you there.
