1
00:00:00,210 --> 00:00:01,830
All right welcome back.

2
00:00:01,830 --> 00:00:05,580
So before we can dive into code for we can start writing our own requests.

3
00:00:05,580 --> 00:00:08,870
We need to address this Zemo.

4
00:00:09,420 --> 00:00:10,470
What's the deal with that.

5
00:00:10,680 --> 00:00:16,710
So I've mentioned a couple of times that it's a bit of a misnomer Asynchronous JavaScript and SML because

6
00:00:16,710 --> 00:00:20,910
something has replaced SML that something is called Jason.

7
00:00:21,060 --> 00:00:23,250
So this video we're going to talk about X-amount.

8
00:00:23,320 --> 00:00:24,740
And Jason what are they.

9
00:00:24,750 --> 00:00:25,650
What's the difference.

10
00:00:25,650 --> 00:00:26,630
How do we use them.

11
00:00:26,940 --> 00:00:27,430
All right.

12
00:00:27,450 --> 00:00:28,630
So let's get going.

13
00:00:29,070 --> 00:00:31,350
Essentially they're both data formats.

14
00:00:31,650 --> 00:00:37,710
So this is a portion of the diagram a much larger diagram from the previous lecture that really honed

15
00:00:37,740 --> 00:00:41,780
in on the important stuff the requests and responses.

16
00:00:41,820 --> 00:00:46,430
So it's really all about here this little part of the diagram.

17
00:00:46,470 --> 00:00:55,010
When the server and API responds with data in this case Pinterest data to produce the new pins so that

18
00:00:55,020 --> 00:01:00,900
contains information probably like an A you are Alpher images for each pin number of times people have

19
00:01:00,900 --> 00:01:04,650
saved it a caption or whatever they call it a date.

20
00:01:04,680 --> 00:01:08,680
The person who posted that pin probably a bunch of other information that I'm missing.

21
00:01:08,700 --> 00:01:11,070
But those are the big things for each pin.

22
00:01:11,100 --> 00:01:18,840
So all that data maybe 20 pin to the time 10 pins has to be sent back from the server to our javascript

23
00:01:19,110 --> 00:01:20,690
so that it can be added to the page.

24
00:01:20,730 --> 00:01:23,370
And the question is What does that data actually look like.

25
00:01:23,370 --> 00:01:25,320
How is it sent.

26
00:01:25,320 --> 00:01:27,390
That's where data formats come in.

27
00:01:27,390 --> 00:01:29,870
So we're used to things like Tim.

28
00:01:29,940 --> 00:01:35,620
As a developer that's what we work with that is a way of formatting data of representing it.

29
00:01:35,880 --> 00:01:41,650
But the problem with him in this context is that it's T.M. encodes structure.

30
00:01:41,880 --> 00:01:45,260
So for example if I go to read it's outcome Here's the home page.

31
00:01:45,270 --> 00:01:48,320
Hopefully there's nothing wildly inappropriate on here today.

32
00:01:48,510 --> 00:01:52,810
And if I inspect the HMO view source can see this.

33
00:01:52,810 --> 00:01:59,130
Each team is crazy bloated for the amount of information that is actually on the page 90 percent of

34
00:01:59,130 --> 00:02:03,770
this structure metadata all the stuff that we don't actually care about.

35
00:02:03,780 --> 00:02:09,720
If all we want is the pure data for example to look at a list of subsets.

36
00:02:09,870 --> 00:02:13,740
If you're familiar with that take a look at this right here.

37
00:02:13,980 --> 00:02:15,970
So we have funny and random.

38
00:02:16,040 --> 00:02:19,210
We have asked Reddit today and world news and for each one.

39
00:02:19,290 --> 00:02:27,390
There's all this stuff around it spell and a tag with a span the age raft class all the stuff lies that's

40
00:02:27,390 --> 00:02:32,110
cluttering it that's necessary to style it and to structure it on a page.

41
00:02:32,370 --> 00:02:35,560
But if we just want the pure information we don't need that.

42
00:02:35,760 --> 00:02:38,760
So that's where data formats come in.

43
00:02:38,760 --> 00:02:44,960
It does exist to share information between computers or between bits of code rather than humans.

44
00:02:44,970 --> 00:02:48,090
So the structure the style none of that matters.

45
00:02:48,090 --> 00:02:54,480
So instead formats like SML and Jason are used and the API that we use today and we'll use in this course

46
00:02:54,750 --> 00:02:57,000
are almost all son and we'll talk about why.

47
00:02:57,090 --> 00:03:02,280
But I also wanted to add that later in the course we'll be making our own API is using node create our

48
00:03:02,280 --> 00:03:08,340
own backend and we'll actually write Ajax requests to our own API that also responds with Jaison.

49
00:03:08,490 --> 00:03:13,210
And that's a really common thing to make a single page app using things like react or angular.

50
00:03:13,560 --> 00:03:17,280
Having a JS on backend or JS on API on your back end.

51
00:03:17,640 --> 00:03:18,920
But we're getting ahead of ourselves.

52
00:03:18,960 --> 00:03:22,500
So let's start diving into the details of X-amount first.

53
00:03:22,530 --> 00:03:24,930
So X-amount has been around a long time.

54
00:03:24,930 --> 00:03:32,280
It looks very similar to HD mail but rather than encoding a page structure it just encodes information

55
00:03:32,310 --> 00:03:34,450
and relationships between data.

56
00:03:34,650 --> 00:03:40,310
So here's a potential way of representing a little bit of info from Pinterest.

57
00:03:40,530 --> 00:03:42,280
So I'm calling it a pin.

58
00:03:42,900 --> 00:03:49,680
And then inside of that each pin has a title and top of Maine Coon it has an author Cindy S..

59
00:03:49,920 --> 00:03:54,230
And number of saves some saves that I called 8900.

60
00:03:54,690 --> 00:03:59,880
So as you can see we have these opening and closing tags and you can basically put whatever you want

61
00:03:59,880 --> 00:04:05,230
there to HVM L is like a more specific version of Zemo.

62
00:04:05,460 --> 00:04:09,870
That doesn't mean that they work the same way like this won't render anything on a page.

63
00:04:09,870 --> 00:04:12,120
These are meaningless to the browser.

64
00:04:12,120 --> 00:04:14,780
It's just a way for us to represent data.

65
00:04:15,240 --> 00:04:20,630
So again similar in syntax it's very very different no presentation.

66
00:04:20,640 --> 00:04:22,530
So this used to be very popular.

67
00:04:22,530 --> 00:04:29,340
It's still used occasionally but it's been replaced it's been usurped by another format called Jason.

68
00:04:29,430 --> 00:04:34,150
So Jason which stands for javascript object notation looks like this.

69
00:04:34,170 --> 00:04:38,180
So the same exact information represented in a different way.

70
00:04:38,220 --> 00:04:44,730
You can trace on where we have key value pairs and it essentially looks like javascript objects pretty

71
00:04:44,730 --> 00:04:47,160
much exactly like Javascript.

72
00:04:47,160 --> 00:04:54,150
So you can see we have you know pin colon and then a javascript object with curly braces.

73
00:04:54,180 --> 00:05:00,110
And then instead of that we have curly we have key value pairs title string adorable Maine Coon author

74
00:05:00,110 --> 00:05:05,820
is a string Cindy S none numb saves is the number 18:00.

75
00:05:05,910 --> 00:05:09,410
So the same data represented in two different ways.

76
00:05:10,620 --> 00:05:14,830
X-amount the old way Jaison kind of the new ish way.

77
00:05:14,870 --> 00:05:18,210
It's not cutting edge or anything but it is more popular now.

78
00:05:18,230 --> 00:05:21,610
And the reason for that is just that javascript is more popular.

79
00:05:21,800 --> 00:05:28,670
And so as Ajax rose as more people started to make requests from javascript Jaison started to be the

80
00:05:28,670 --> 00:05:34,370
format of choice because if you're working with javascript it's so much easier to parse to process the

81
00:05:34,370 --> 00:05:40,320
data coming back from an API if it's Jaison it's in the name javascript object notation.

82
00:05:40,340 --> 00:05:46,100
So it's very similar as you can see it's javascript doesn't require much work on our end to get that

83
00:05:46,160 --> 00:05:48,160
into actual Javascript code.

84
00:05:48,270 --> 00:05:53,870
VS This is very different than javascript syntax and if we wanted to turn that into something we could

85
00:05:53,870 --> 00:05:57,580
use in javascript it's not impossible there's libraries that do it.

86
00:05:57,590 --> 00:06:01,430
It's not actually that hard but it's harder definitely than this.

87
00:06:01,430 --> 00:06:04,200
This is much simpler much more similar to Javascript.

88
00:06:04,220 --> 00:06:08,080
So the last thing we'll do is take a look at the redit Jaison.

89
00:06:08,330 --> 00:06:16,000
So I'm at Reddit dot com slash dot Jaison so that dot Jay sun changes the format and we get Jason.

90
00:06:16,060 --> 00:06:17,860
That's not a trick you can do to every site.

91
00:06:17,870 --> 00:06:19,550
That's just how it is set up.

92
00:06:19,580 --> 00:06:21,270
So there's still a lot of info here.

93
00:06:21,410 --> 00:06:25,490
But if we look at it first of all it's a wall of massive text.

94
00:06:25,520 --> 00:06:31,460
It's not very easy to digest compared to what we see when we just go to read it does come but that doesn't

95
00:06:31,460 --> 00:06:31,760
matter.

96
00:06:31,760 --> 00:06:39,650
This isn't made for human eyes but if we look at it we have things like where can I find approved by

97
00:06:39,710 --> 00:06:45,200
Noal over 18 false domain giftie cat hidden false key value pairs.

98
00:06:45,240 --> 00:06:47,080
It's javascript object notation.

99
00:06:47,420 --> 00:06:54,110
I should mention if you don't have a Chrome extension or whatever browser you use Chrome or Firefox

100
00:06:54,170 --> 00:07:01,130
idealy there are chrome extensions that will pretty fly and make Jaison much easier to read and to interact

101
00:07:01,130 --> 00:07:01,280
with.

102
00:07:01,280 --> 00:07:03,140
So I'm going to just go and install one.

103
00:07:03,200 --> 00:07:05,180
I uninstalled it just for this video.

104
00:07:05,180 --> 00:07:06,490
I always have this installed.

105
00:07:06,500 --> 00:07:16,170
So add to Chrome extension now it's there and if I just refresh the page you'll see takes a second to

106
00:07:16,170 --> 00:07:16,850
kick in.

107
00:07:16,920 --> 00:07:22,980
But now we have this nice interactive piece on page where I can condense things explore how things are

108
00:07:22,980 --> 00:07:23,740
related.

109
00:07:23,760 --> 00:07:29,400
So I highly recommend that you install that just as we started to work for data even if it's not this

110
00:07:29,400 --> 00:07:30,750
crazy complex.

111
00:07:30,750 --> 00:07:36,070
It still is very very useful to be able to actually see the structure of your code or that Jason.

112
00:07:36,270 --> 00:07:36,870
All right.

113
00:07:36,900 --> 00:07:43,140
So that's a very brief intro to Jason as well as X-amount Asynchronous JavaScript and Jason is really

114
00:07:43,140 --> 00:07:45,930
what's used these days for the most part.

115
00:07:46,020 --> 00:07:50,120
But a judge just doesn't have quite the same ring as Ajax.

116
00:07:50,130 --> 00:07:54,540
So even though people say Ajax typically it's actually a Jag these days.

117
00:07:54,540 --> 00:07:54,960
All right.

118
00:07:54,960 --> 00:07:59,430
On that note let's get to the next video where we'll actually learn how to make our first request.

119
00:07:59,440 --> 00:08:01,410
Our first adj request.
