WEBVTT
1
00:00:00.210 --> 00:00:01.290
Welcome back.

2
00:00:01.290 --> 00:00:07.200
In this video we're going to be discussing the keyword we saw in the past video that the Konski word

3
00:00:07.260 --> 00:00:11.230
is useful for creating variables that we do not want to redeclare again.

4
00:00:11.640 --> 00:00:14.100
So what about let what does it do.

5
00:00:14.100 --> 00:00:21.150
The key word creates a brand new kind of scope for us in javascript called block scope to review before

6
00:00:21.420 --> 00:00:22.450
2015.

7
00:00:22.500 --> 00:00:28.620
There were two kinds of scopes global function scope variables defined in the global scope could be

8
00:00:28.620 --> 00:00:34.470
used everywhere and variables defined in functions using the Vark P-word could only be used inside the

9
00:00:34.470 --> 00:00:36.960
function they were defined in.

10
00:00:37.110 --> 00:00:39.870
So what exactly is a block in javascript.

11
00:00:39.900 --> 00:00:43.620
There are quite a few keywords in javascript which create blocks for us.

12
00:00:43.620 --> 00:00:46.630
Some of them include if for while.

13
00:00:46.680 --> 00:00:53.280
Do try and catch and when we use the Lechi word inside of those blocks we can create our own kind of

14
00:00:53.280 --> 00:00:53.920
scope.

15
00:00:54.180 --> 00:00:55.850
Let's see what that looks like.

16
00:00:55.920 --> 00:00:59.230
I'm going to make a variable called instructor and assign it to the string.

17
00:00:59.250 --> 00:01:04.600
Ellie I'll then check to see if the value of instructor is the string L.E..

18
00:01:04.770 --> 00:01:09.370
And if it is all declare a variable called Fun fact using the let you work.

19
00:01:09.780 --> 00:01:15.390
If I try to access this variable outside of the if statement I will get a reference are stating that

20
00:01:15.390 --> 00:01:17.270
fun fact is not defined.

21
00:01:17.700 --> 00:01:22.740
Another gotcha with the left keyword is that when it is used inside of functions it does not behave

22
00:01:22.770 --> 00:01:26.030
the same way as the VAR keyword in javascript.

23
00:01:26.040 --> 00:01:31.410
There is a term we use called hoisting to explain the behavior of what the VAR keyword does.

24
00:01:31.410 --> 00:01:37.800
The idea behind hoisting is the variables defined using the marquee word will have their variable declarations

25
00:01:37.890 --> 00:01:40.810
lifted to the top of the scope that they are at.

26
00:01:41.190 --> 00:01:47.040
Let's illustrate this with an example of create a function called Hello instructor an inside first return

27
00:01:47.070 --> 00:01:49.590
of variable named Ellie on the next line.

28
00:01:49.620 --> 00:01:54.500
I will use the marquee word to create a variable called L-E and assign it to the string.

29
00:01:54.960 --> 00:01:58.360
You might think that when we invoke this function we will get a reference error.

30
00:01:58.500 --> 00:02:01.750
Since we are trying to return something for it is defined.

31
00:02:01.890 --> 00:02:08.670
However javascript under the hood hoist variable declarations just the VAR L.A. portion to the top of

32
00:02:08.670 --> 00:02:09.590
this function.

33
00:02:09.900 --> 00:02:16.490
And since the value of the variable is undefined dysfunction will return undefined like keyword hoist

34
00:02:16.530 --> 00:02:17.190
as well.

35
00:02:17.220 --> 00:02:22.760
But we do not have access to its value and get a reference error even though it has hoisting.

36
00:02:22.830 --> 00:02:28.530
It is in what's called a temporal dead zone or PDZ which is a place where variables are declared.

37
00:02:28.560 --> 00:02:33.650
We cannot access their values so you may be wondering when should we use LET.

38
00:02:33.930 --> 00:02:37.570
With Konst it makes sense that there is data you do not want to redeclare.

39
00:02:37.710 --> 00:02:39.420
But what about the left keyword.

40
00:02:39.420 --> 00:02:43.620
Some javascript developers will replace the VAR keyword wherever possible with LET.

41
00:02:43.800 --> 00:02:48.810
But this is a bit of an extreme to start when you're working inside of a block and do not want variables

42
00:02:48.810 --> 00:02:52.530
defined inside of that block to be accessible outside.

43
00:02:52.550 --> 00:02:53.930
Use the keyword.

44
00:02:54.120 --> 00:02:56.010
You may be wondering when this would be useful.

45
00:02:56.190 --> 00:03:00.560
So let's look at a very common problem that solves for us easily.

46
00:03:00.600 --> 00:03:05.410
I'm going to make a loop starting from zero and looping until it is less than 5.

47
00:03:05.430 --> 00:03:11.970
I'm going to write a set time out to print out all the values from 0 to 4 in 1000 milliseconds or 1

48
00:03:11.970 --> 00:03:12.690
second.

49
00:03:12.810 --> 00:03:16.860
So I'm expecting my code to print out zero through 4 after 1 second.

50
00:03:17.160 --> 00:03:22.770
However when I run this I will see that the number 5 is cancelled out logged 5 times.

51
00:03:22.820 --> 00:03:24.100
Why is that.

52
00:03:24.300 --> 00:03:29.730
The answer is that by the time the set time runs the for loop has already finished running and the value

53
00:03:29.730 --> 00:03:33.010
of I has been incremented to 5 and the loop has stopped.

54
00:03:33.270 --> 00:03:39.570
Only then does my set time out run and it prints out whatever the value of i is at the time before the

55
00:03:39.570 --> 00:03:39.890
left.

56
00:03:39.890 --> 00:03:45.360
You are the solution to this was to run another function inside of the loop and invoke it immediately

57
00:03:45.720 --> 00:03:48.460
so that each set time out would have its own value.

58
00:03:48.960 --> 00:03:54.810
However we can use the keyword to make things much easier if we replace var with LET.

59
00:03:54.900 --> 00:03:56.330
Everything just works.

60
00:03:56.460 --> 00:04:02.070
Let allows us to declare variables that are limited in scope to the block in which it is used and a

61
00:04:02.070 --> 00:04:05.640
new variable is created for each iteration in the loop.

62
00:04:05.640 --> 00:04:09.480
This is unlike the marquee word which defines a variable globality.

63
00:04:09.690 --> 00:04:14.470
A couple of notes about let a Lekki word will hoist to the top of a block.

64
00:04:14.520 --> 00:04:19.710
However referencing that variable in the block before the variable declaration results in a reference

65
00:04:19.710 --> 00:04:23.700
are the variable is in a temporal dead zone from the start of the block.

66
00:04:23.760 --> 00:04:29.690
Until the declaration is processed we also cannot redefine a variable using the left keyword.

67
00:04:29.700 --> 00:04:34.200
Once again in the next section we'll practice a bit using left and Konst.

68
00:04:34.290 --> 00:04:34.680
Good luck.
