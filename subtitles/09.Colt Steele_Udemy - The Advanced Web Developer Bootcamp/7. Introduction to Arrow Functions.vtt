WEBVTT
1
00:00:01.000 --> 00:00:01.870
Welcome back.

2
00:00:01.870 --> 00:00:09.490
In this video we're going to be introducing a new syntax for writing functions in 2015 called Aero functions.

3
00:00:09.550 --> 00:00:15.610
Functions are a more concise alternative to using the word function and can save us quite a few keystrokes.

4
00:00:15.820 --> 00:00:18.490
But there are some gotchas when using aero functions.

5
00:00:18.820 --> 00:00:24.220
Let's start by writing a function expression called ADD which returns the sum of two parameters A and

6
00:00:24.220 --> 00:00:26.710
B using the function keyword.

7
00:00:26.950 --> 00:00:30.200
Refactoring this code to use an arrow function is quite simple.

8
00:00:30.400 --> 00:00:35.920
We simply remove the word function and after our parameters we add an equal sign and a greater than

9
00:00:35.920 --> 00:00:37.460
sign which make an arrow.

10
00:00:37.780 --> 00:00:39.560
And it should work the same.

11
00:00:39.580 --> 00:00:42.160
So what's so special about aero functions.

12
00:00:42.250 --> 00:00:47.430
If we place our entire function on a one line we do not need to use the return keyword.

13
00:00:47.440 --> 00:00:53.870
And curly braces if we do use the return keyword javascript will actually throw a syntax error.

14
00:00:53.890 --> 00:00:57.040
Let's see what our previous add function looks like when it's refactored.

15
00:00:57.040 --> 00:00:59.890
On the one line that's pretty nice.

16
00:00:59.920 --> 00:01:05.860
This one line option makes aero functions very useful when writing short code especially with higher

17
00:01:05.860 --> 00:01:07.060
order functions.

18
00:01:07.360 --> 00:01:13.500
Let's imagine we want to iterate over an array of numbers and return a new array with each value doubled.

19
00:01:13.510 --> 00:01:19.160
Math is an excellent option So let's first see what that will look like before 2015.

20
00:01:19.510 --> 00:01:24.670
Here we are writing a function on a couple of lines and that's fine but with aero functions we can make

21
00:01:24.670 --> 00:01:26.350
things much shorter.

22
00:01:26.350 --> 00:01:28.090
Let's see what that looks like.

23
00:01:28.120 --> 00:01:32.980
This can look a bit strange at first but let's see another example where aero functions really clean

24
00:01:32.980 --> 00:01:34.170
up our code.

25
00:01:34.180 --> 00:01:39.580
Let's imagine we want to write a function called Double unfilter which doubles an array and then only

26
00:01:39.580 --> 00:01:42.210
returns the values that are divisible by 3.

27
00:01:42.520 --> 00:01:45.560
Combining map filter would be a great way to solve this.

28
00:01:45.670 --> 00:01:47.440
And here's what that might look like before.

29
00:01:47.460 --> 00:01:50.410
Yes 2015 is quite a bit of code.

30
00:01:50.530 --> 00:01:53.270
So let's see how Herro functions can help us.

31
00:01:53.350 --> 00:01:57.420
Now this may look intimidating but take the time to go through each step.

32
00:01:57.440 --> 00:02:03.580
Our double unfilter function accepts an array and returns the result of mapping over each value and

33
00:02:03.580 --> 00:02:08.770
doubling the value and then filtering each number that is divisible by 3.

34
00:02:08.770 --> 00:02:14.010
Notice here that when you only have a single parameter in an arrow function it does not need to be wrapped

35
00:02:14.030 --> 00:02:20.020
in parentheses in the next video we'll dive deeper into Herro functions and see just when and where

36
00:02:20.080 --> 00:02:21.670
they should be use zylon.
