1
00:00:00,480 --> 00:00:01,150
Welcome back.

2
00:00:01,260 --> 00:00:04,860
In this video we're going to be going over solutions to the for each.

3
00:00:05,480 --> 00:00:10,410
The first function we need to implement is the double values function which accepts an array and returns

4
00:00:10,410 --> 00:00:13,990
a new array with all of the values doubled inside here.

5
00:00:14,070 --> 00:00:20,130
I'll create a variable called New R and assign it to be an empty threat of then iterate over the array

6
00:00:20,130 --> 00:00:27,200
passed to the function and at each iteration push the value multiplied by 2 into the new R variable.

7
00:00:27,420 --> 00:00:32,010
We'll then return the new variable once we're done it read.

8
00:00:32,490 --> 00:00:37,260
The next function we need to implement is only even values which accepts and are already inside of this

9
00:00:37,260 --> 00:00:37,870
function.

10
00:00:37,950 --> 00:00:42,180
I'll declare a variable called New are and assign it to an empty array.

11
00:00:42,180 --> 00:00:47,010
I'll then iterate over the array passed to the function and if the value that we're add is divisible

12
00:00:47,010 --> 00:00:53,670
by 2 we'll push a value into the new R array and finally return the new array.

13
00:00:53,880 --> 00:00:59,400
The next function we need to implement is the show first and last function which accepts an array inside

14
00:00:59,400 --> 00:01:04,280
of this function on a variable called New R and assignment to be an empty array.

15
00:01:04,300 --> 00:01:10,110
I'll then iterate over the array passed to the function and at each of you push into the new array the

16
00:01:10,110 --> 00:01:17,200
first character plus the last character which I can access using the lenth minus one.

17
00:01:17,280 --> 00:01:22,470
Remember strings have a length property so we can access them using lenth minus one to get the last

18
00:01:22,470 --> 00:01:26,730
character and only return the new are variable.

19
00:01:26,730 --> 00:01:31,860
The next function I need to implement is the add key and value function which accepts an array of objects.

20
00:01:31,980 --> 00:01:37,380
Some P and some value and then iterates over the array at each of you.

21
00:01:37,440 --> 00:01:42,740
I'll assign a key in each object to whatever value we pass to the function actually.

22
00:01:42,900 --> 00:01:46,620
I'll return the array passed to this function.

23
00:01:46,720 --> 00:01:51,430
The last function I need to implement is the valid count function which accepts a string and returns

24
00:01:51,430 --> 00:01:57,890
an object with the keys as values and the values as the count of the number of vowels in that string.

25
00:01:57,910 --> 00:02:03,660
The first thing I'll do is make an array called split R which is the result of the string split by character

26
00:02:04,210 --> 00:02:10,960
and then I'll create an empty object and a string which contains all of my Vulpes are then iterate over

27
00:02:10,960 --> 00:02:17,620
every character in the split are variable using for each and then use the index of method to check if

28
00:02:17,620 --> 00:02:20,120
the character that I made is of value.

29
00:02:20,350 --> 00:02:23,260
Remember index of returns negative 1 to us.

30
00:02:23,260 --> 00:02:29,590
If the value which we're looking for is not in the string or array we can use index of on both strings

31
00:02:29,650 --> 00:02:35,880
and arrays are then checked to see if that letter is already a key inside of the object.

32
00:02:35,890 --> 00:02:42,370
We can do this quite a few ways but will use an IF statement to see if the value of that object with

33
00:02:42,370 --> 00:02:48,630
the key of whatever character worked at exists and if it is I will increment its value by 1.

34
00:02:48,730 --> 00:02:54,250
Otherwise I'll set a key in that object to be the letter that I'm currently at and assign it to the

35
00:02:54,250 --> 00:02:55,900
value of 1.

36
00:02:55,990 --> 00:02:59,070
Once I'm done iterating I'll return the object.

37
00:02:59,320 --> 00:03:04,510
Make sure to use bracket notation here because we need javascript to evaluate these variables for us

38
00:03:04,750 --> 00:03:08,970
and not hard code a name of the key for the exercises.

39
00:03:08,980 --> 00:03:10,130
See you in the next video.
