1
00:00:00,660 --> 00:00:06,450
So on the last screencast how data flows through out a redux application we saw how to make a store

2
00:00:06,870 --> 00:00:09,380
how to pass in a function to create store.

3
00:00:09,390 --> 00:00:14,610
We call that a reducer and we saw that our reducer is where we define our initial state and where we

4
00:00:14,610 --> 00:00:19,130
can make changes to our state by returning a copy of this.

5
00:00:19,530 --> 00:00:23,190
How do we make changes to the state member that we dispatched in action.

6
00:00:23,190 --> 00:00:26,490
Dispatch is really just the idea of sending some kind of action.

7
00:00:26,520 --> 00:00:32,610
The store is in charge of dispatching these actions and actions are simply objects that have to contain

8
00:00:32,610 --> 00:00:34,040
a key of type.

9
00:00:34,380 --> 00:00:36,370
So we saw how to do this in the crumbed up tools.

10
00:00:36,370 --> 00:00:40,530
We're going to take that example at the counter and just build a very simple application with a little

11
00:00:40,530 --> 00:00:42,690
bit of query to show how that works.

12
00:00:42,690 --> 00:00:45,980
So I make a directory and I'll call that redox counter.

13
00:00:46,710 --> 00:00:53,490
And inside here I mean two files can make an index that each terminal and we'll just make a script yes.

14
00:00:53,520 --> 00:00:56,970
Mikita real simple and all open this all up in a line.

15
00:00:57,330 --> 00:01:03,240
So in sublime right now I have an index that each DML is going to start with a very very simple each

16
00:01:03,240 --> 00:01:05,530
one with an ID of counter.

17
00:01:05,580 --> 00:01:10,140
And when I really don't have anything here we're going to set the text depending on whatever our count

18
00:01:10,140 --> 00:01:12,950
is and redux is actually going to store count.

19
00:01:13,140 --> 00:01:18,990
So we'll make a button will give us an idea of increment and we'll have the tax increment and then we'll

20
00:01:18,990 --> 00:01:23,920
do the same thing for a button of Declan's that's going to be decadent.

21
00:01:24,060 --> 00:01:27,210
Now we're not going to get very far without Gigue query and redux.

22
00:01:27,210 --> 00:01:31,090
So let's go back and grab a G Querrey CDN.

23
00:01:31,290 --> 00:01:33,770
We'll go over here and we'll get the uncompress version.

24
00:01:33,780 --> 00:01:36,000
So are there any errors we should be in good shape.

25
00:01:36,500 --> 00:01:42,520
Let's get a copy that will also grab the redux ZDF.

26
00:01:42,910 --> 00:01:44,780
So go grab this right here.

27
00:01:44,980 --> 00:01:48,990
Make sure the script tag and get at sarcy of that right there.

28
00:01:49,150 --> 00:01:49,930
And it looks good.

29
00:01:49,930 --> 00:01:55,560
We're also going to need a script about that to our script yes script.

30
00:01:55,740 --> 00:01:57,900
Yes that looks good.

31
00:01:58,120 --> 00:02:01,690
So we should have a script for Jay Querrey script for Reebok's and a script for a script that yes

32
00:02:04,800 --> 00:02:08,730
so if I open this page right now in the browser I should just see increment and decrement but nothing

33
00:02:08,730 --> 00:02:13,050
really happens when I click these buttons and that's for good reason because I don't have any event

34
00:02:13,050 --> 00:02:18,690
listeners or anything happening so I'm going to start in my script base with a couple of things.

35
00:02:18,870 --> 00:02:21,180
We need some redux story.

36
00:02:21,850 --> 00:02:30,240
But before remember we need a producer we can call that whatever we want but let's call it root reducer.

37
00:02:30,540 --> 00:02:38,780
We need some redux store and initial state and then we need some way of changing the state.

38
00:02:39,660 --> 00:02:41,110
So let's start with a reducer.

39
00:02:41,240 --> 00:02:47,760
Member do sers are just functions and that function we can call root reducer and it accepts some kind

40
00:02:47,760 --> 00:02:50,230
of steede and some action that's coming in.

41
00:02:50,550 --> 00:02:55,740
But remember the first time that this reducers run we need to set some kind of initial state.

42
00:02:55,950 --> 00:03:03,060
So once again we could do something like If the state is undefined then we can do something by setting

43
00:03:03,060 --> 00:03:03,520
this date.

44
00:03:03,570 --> 00:03:04,740
But let's keep it real simple.

45
00:03:04,770 --> 00:03:06,990
Using default parameters all make a variable.

46
00:03:06,990 --> 00:03:08,440
In fact we can make this a constant.

47
00:03:08,440 --> 00:03:09,870
We'll call that initial state.

48
00:03:10,400 --> 00:03:14,490
And this is going to be an object with a key of count and a value of 0.

49
00:03:14,700 --> 00:03:19,750
And inside of here we're simply going to say if there is no state we'll pass the initial state.

50
00:03:19,920 --> 00:03:25,730
And remember there is no state passed to this the first time that that route reducer is run.

51
00:03:25,950 --> 00:03:31,410
Once the first time that the route reducer is run when we run redux that create store remember that

52
00:03:31,410 --> 00:03:36,250
dispatch comes in with an action with a type of redux in it.

53
00:03:36,270 --> 00:03:37,650
If you don't remember seeing that.

54
00:03:37,650 --> 00:03:40,720
Take a look at the previous screencast and I'll show you again even in this one.

55
00:03:41,010 --> 00:03:45,600
So inside accrete store we're going to pass in our reproducer But remember for now we always just want

56
00:03:45,600 --> 00:03:49,860
to return some kind of state and what we're going to do just to keep it simple is set a debugger right

57
00:03:49,860 --> 00:03:53,370
here and make sure that we're getting to our root reducer.

58
00:03:53,370 --> 00:03:57,990
So I'm going to go open this up in the browser and let's go keep our dev tools open and we refresh the

59
00:03:57,990 --> 00:03:58,380
page.

60
00:03:58,380 --> 00:04:00,990
We should see that we've made it to the root reducer.

61
00:04:00,990 --> 00:04:06,000
Remember the first time that you call create store which would really only be once we're going to dispatch

62
00:04:06,060 --> 00:04:07,600
an action with the type of redux.

63
00:04:07,610 --> 00:04:12,220
And this is all done internally by redux to figure out what your state starts off as.

64
00:04:12,570 --> 00:04:17,730
So we can see right here what we call store that gets the we should have count of zero.

65
00:04:17,940 --> 00:04:22,120
Let's say you forgot for some reason to pass in some kind of initial state right here.

66
00:04:22,580 --> 00:04:26,560
When we go refresh the page in our debugger we should see that state is undefined.

67
00:04:26,760 --> 00:04:30,290
So our initial state right now is actually undefined and we don't want that.

68
00:04:30,330 --> 00:04:35,220
We want to make sure that we start off with some kind of initial state to make sure you set that parameter

69
00:04:35,340 --> 00:04:37,480
right here.

70
00:04:37,920 --> 00:04:42,300
So we're going to need some way to increment and decrement But why don't we start with a little bit

71
00:04:42,300 --> 00:04:43,030
of a worry.

72
00:04:43,050 --> 00:04:47,460
I'm going to start with a quick document already and we'll end it some of the listeners will say when

73
00:04:47,460 --> 00:04:54,540
an idea of increment is clicked we are going to run some kind of a function and here what do we need

74
00:04:54,540 --> 00:04:55,000
to do.

75
00:04:55,020 --> 00:05:02,280
We need to dispatch some action to increment the count and we can actually do the same thing with detriment

76
00:05:03,000 --> 00:05:04,460
decrement unclick.

77
00:05:04,830 --> 00:05:08,430
We need to dispatch some action to decrement the count.

78
00:05:08,490 --> 00:05:10,990
Now where do these actions get created.

79
00:05:11,190 --> 00:05:14,430
Well remember actions are just objects.

80
00:05:14,430 --> 00:05:20,290
So we could do here is simply call store dispatch and pass in an object.

81
00:05:20,310 --> 00:05:24,420
Remember our actions which are the objects always have to have a key of type.

82
00:05:24,420 --> 00:05:30,420
So let's give it a type of increment and we can call this whatever we like but remember that when we

83
00:05:30,420 --> 00:05:33,560
dispatch this action it's going to go back to the reducer.

84
00:05:33,600 --> 00:05:36,960
So why don't we for now just put a debugger here.

85
00:05:37,260 --> 00:05:38,410
Before I load the page.

86
00:05:38,430 --> 00:05:45,480
Think how many times we're going to hit that debugger once before I load the page remember this debugger

87
00:05:45,480 --> 00:05:48,690
is going to be reached the first time that we call create store.

88
00:05:48,690 --> 00:05:53,130
So we set some initial state and whenever I click this increment button we're going to go right back

89
00:05:53,130 --> 00:05:53,740
here.

90
00:05:53,820 --> 00:05:57,260
So let's see this let's go back to the browser and refresh the page.

91
00:05:57,450 --> 00:06:02,880
The first time that I go back here I get an action with a type of redux in it that's just redux setting

92
00:06:02,880 --> 00:06:04,190
up some initial state.

93
00:06:04,500 --> 00:06:10,410
What happens when I click increment again I go back here but the action now has a type of increment.

94
00:06:10,950 --> 00:06:11,870
Great.

95
00:06:11,940 --> 00:06:14,970
So what do we do with this new action or with that type of increment.

96
00:06:14,970 --> 00:06:17,880
Well let's write a little bit of conditional logic.

97
00:06:17,880 --> 00:06:18,780
We could do something like.

98
00:06:18,780 --> 00:06:22,320
If action doc type and this is what we did in the last screencast.

99
00:06:22,350 --> 00:06:27,270
But what I want to introduce is a more common way you'll see of handling different action types and

100
00:06:27,270 --> 00:06:30,440
what we're actually going to do is use a key switch statement.

101
00:06:30,480 --> 00:06:37,620
So we are going to switch on the action that type and what we're going to do here is say in the case

102
00:06:38,100 --> 00:06:45,600
of increment we are going to set a debugger 8 now and return the city.

103
00:06:45,810 --> 00:06:50,820
Now remember with all of your key switch statements you always have some kind of default which is what's

104
00:06:50,820 --> 00:06:52,740
going to happen when there's nothing there.

105
00:06:52,740 --> 00:06:55,870
So in this default action I'm going to return.

106
00:06:55,890 --> 00:06:59,160
That's the that's going to save us.

107
00:06:59,190 --> 00:07:01,590
So let's go back to the browser and refresh the page.

108
00:07:01,890 --> 00:07:05,930
When I increment I'm back here in side of the switch statement.

109
00:07:06,230 --> 00:07:08,520
So all we've done is instead of using if.

110
00:07:08,540 --> 00:07:12,800
We've used a case switch statement and you probably haven't done kids switch statements in a while so

111
00:07:12,800 --> 00:07:16,080
feel free to take a look at it and then to see how this is all happening.

112
00:07:16,400 --> 00:07:20,860
We're moving pretty quickly so let's take a step back and talk about what we've done so far.

113
00:07:20,960 --> 00:07:24,360
We've set up a simple each one with an idea of counter.

114
00:07:24,500 --> 00:07:29,090
It doesn't have any value right now because this is where we're actually going to increment and decrement

115
00:07:29,180 --> 00:07:30,350
those values.

116
00:07:30,740 --> 00:07:35,570
We've loaded up a little bit of the query and some redux so that we can use a query for dominant relation

117
00:07:35,750 --> 00:07:38,410
and redux for managing our state.

118
00:07:38,480 --> 00:07:42,590
We're not going to make some global variable for the count because imagine that the variable or data

119
00:07:42,590 --> 00:07:46,910
needed to be shared amongst different files would be really nice if we had one centralized place to

120
00:07:46,910 --> 00:07:48,230
store that information.

121
00:07:48,320 --> 00:07:50,830
And that's exactly what redux lets us do.

122
00:07:50,840 --> 00:07:55,670
Finally I'm just loading a script called script Geass which I have right here before I worry about any

123
00:07:55,670 --> 00:07:58,170
of the dominant violation or waiting for the dom to load.

124
00:07:58,190 --> 00:08:02,740
I set up some initial state remember initial state could be an object it could be an array.

125
00:08:02,750 --> 00:08:04,900
Most of the time you'll see it as an object.

126
00:08:04,970 --> 00:08:08,210
And here I have a property of count and a value of 0.

127
00:08:08,390 --> 00:08:12,310
In order for our store to be created we always have to pass a function to it.

128
00:08:12,320 --> 00:08:14,480
We call that function a reducer.

129
00:08:14,570 --> 00:08:17,910
In this case we only have one reducer so we'll call it the root reducer.

130
00:08:18,030 --> 00:08:21,310
This excepts some kind of state and some kind of action.

131
00:08:21,440 --> 00:08:27,710
Actions are simply objects that get dispatched or sent by the store to make changes or to see what the

132
00:08:27,710 --> 00:08:35,480
state is the first time that I call create store redux dispatches an action with the type of redux in

133
00:08:35,480 --> 00:08:35,920
it.

134
00:08:36,020 --> 00:08:38,300
And this is simply just to get our default state.

135
00:08:38,460 --> 00:08:44,600
But in the future if I want to dispatch different actions I just call store dispatch and remember actions

136
00:08:44,600 --> 00:08:50,960
are just objects and they always have to have the key of type because in that because in the reducer

137
00:08:51,020 --> 00:08:56,130
I'm going to figure out what the type is and if it's increment I'm going to do something here.

138
00:08:56,150 --> 00:08:57,900
So what should we do if it increment.

139
00:08:57,920 --> 00:09:02,360
Why don't we just do state that count plus plus and return the state.

140
00:09:02,360 --> 00:09:06,700
In fact let's get fancy Let's go see a case decrement.

141
00:09:06,920 --> 00:09:09,920
All we need to do here state count minus minus.

142
00:09:09,950 --> 00:09:13,570
So we're just going to increment count or decrement that count.

143
00:09:13,610 --> 00:09:18,590
Now when I dispatch the type of increment that works out really well but I actually have to change the

144
00:09:18,590 --> 00:09:20,210
value of each one.

145
00:09:20,480 --> 00:09:26,240
So what I'd like to do is after I dispatch that value of increment I would like to figure out what the

146
00:09:26,240 --> 00:09:27,330
city looks like.

147
00:09:27,500 --> 00:09:32,690
Specifically to account and set that to be the text of my H-1.

148
00:09:32,960 --> 00:09:35,700
How do we figure out what the state is of the store.

149
00:09:35,780 --> 00:09:42,390
Well we have a wonderful way using store that gets state has a built in method to our store.

150
00:09:42,560 --> 00:09:48,170
So I'm going to get the state which should be changed after I'd dispatch this action and I'm going to

151
00:09:48,170 --> 00:09:52,340
set on my Each one which I believe I gave an ID of counter.

152
00:09:52,490 --> 00:09:56,900
I'm going to set the text to be current state DOT count.

153
00:09:57,560 --> 00:10:00,980
I'll do the same thing here actually inside of detriment.

154
00:10:01,940 --> 00:10:07,520
But instead of dispatching potato increment I'm going to dispatch a type of document when decrement

155
00:10:07,520 --> 00:10:08,160
is clicked.

156
00:10:08,300 --> 00:10:11,930
Dispatch decrement it's going to go to the reducer.

157
00:10:12,140 --> 00:10:16,500
Take one away from the state the Count property specifically and return that's the.

158
00:10:16,730 --> 00:10:21,390
And then I'm going to set the text of the counter to be whatever the current state is.

159
00:10:21,430 --> 00:10:27,220
Let's go try this out and then refresh the page you know increment and it looks like it's working.

160
00:10:27,370 --> 00:10:29,540
Well that's pretty cool.

161
00:10:29,540 --> 00:10:35,930
If we wanted to be a little bit fancier we could do something like when the downloads get the current

162
00:10:35,930 --> 00:10:40,370
state and once again that's the text of that counter to be the current state.

163
00:10:40,370 --> 00:10:44,840
Now there's a lot of repetition here and we could refactor this with some helper functions but I'm just

164
00:10:44,840 --> 00:10:46,150
going to keep it simple for now.

165
00:10:46,400 --> 00:10:52,130
So when ever First the page I see zero we take a look right now at Stuart I gets the 0.

166
00:10:52,130 --> 00:10:55,820
How about when I increment got looks good when I decrement.

167
00:10:55,850 --> 00:10:56,850
That looks good.

168
00:10:57,050 --> 00:11:00,760
But there's still something that's not great about what I've done.

169
00:11:00,770 --> 00:11:05,080
Remember that our producers have to be pure functions.

170
00:11:05,270 --> 00:11:08,450
And what that means is that we cannot modify state directly.

171
00:11:08,480 --> 00:11:11,070
We should always make a copy of our state.

172
00:11:11,480 --> 00:11:17,920
So we'll make a variable called Nusi and we'll set that to be whatever the state was before.

173
00:11:17,930 --> 00:11:23,710
Now another way that we could do this is by using object design just remember with object that assign

174
00:11:23,710 --> 00:11:26,740
your first parameter should always be an empty object.

175
00:11:26,750 --> 00:11:30,260
That way we don't overwrite the object instead of making a copy of it.

176
00:11:32,000 --> 00:11:35,690
Remember the first parameter should always be an empty object to object a sign.

177
00:11:35,780 --> 00:11:40,070
So I can make a copy of that state using this right here or I can do what I have above here I can say

178
00:11:40,220 --> 00:11:42,750
new state DOT count plus plus.

179
00:11:42,800 --> 00:11:47,790
And then I can return the new state will do this as well with our document.

180
00:11:48,290 --> 00:11:51,870
But instead we're simply going to subtract those values.

181
00:11:52,000 --> 00:11:52,910
I'll say this.

182
00:11:52,960 --> 00:11:55,140
And let's go refresh the page and see what it looks like.

183
00:11:55,190 --> 00:11:57,700
Ooh new state has already been declared.

184
00:11:57,890 --> 00:11:59,860
Let's see what I did wrong here.

185
00:11:59,870 --> 00:12:03,900
Looks like he's Lekki word more than one time inside of my switch statement.

186
00:12:03,980 --> 00:12:06,010
So instead of let let's just use var.

187
00:12:06,010 --> 00:12:07,850
I'll keep it real simple right now.

188
00:12:08,510 --> 00:12:12,060
Let's try to increment and decrement isn't working.

189
00:12:12,230 --> 00:12:14,260
How come decrements not working.

190
00:12:14,510 --> 00:12:18,530
Well let's make sure we dispatch that type of decrement.

191
00:12:18,860 --> 00:12:22,280
So let's make sure that we're actually hitting this in the debugger.

192
00:12:22,280 --> 00:12:28,300
So we'll guess that a debugger right here is your first page and or in the debugger.

193
00:12:28,550 --> 00:12:30,350
But what's the problem right now.

194
00:12:30,830 --> 00:12:32,860
We're returning state.

195
00:12:32,870 --> 00:12:33,630
Silly me.

196
00:12:33,860 --> 00:12:35,840
Let's make sure we return new state.

197
00:12:36,230 --> 00:12:40,930
Let's go see this reverse page increment is great and Eckermann seems to be working.

198
00:12:40,930 --> 00:12:42,640
So sometimes you make some silly mistakes.

199
00:12:42,650 --> 00:12:45,580
Just make sure to set a debugger really help you out.

200
00:12:45,770 --> 00:12:50,390
So it looks like increment and decrement are working and we're simply making a new copy of the state

201
00:12:50,390 --> 00:12:51,050
each time.

202
00:12:51,050 --> 00:12:54,880
You could do this above if you'd like but I want to be really verbose here.

203
00:12:55,430 --> 00:13:00,140
So it seems like what we've got is a simple working counter where you can increment and decrement and

204
00:13:00,140 --> 00:13:03,070
we're using a pure function in our group reducer.

205
00:13:03,320 --> 00:13:09,130
Let's take one more step back and Moktar everything that we've done in our index that HMO.

206
00:13:09,200 --> 00:13:10,920
We have a simple counter.

207
00:13:11,350 --> 00:13:14,030
You have a button to increment and a button to decrement.

208
00:13:14,030 --> 00:13:18,050
We have our scripts for Jey query redux and our external script script database.

209
00:13:18,140 --> 00:13:22,580
The first thing we do is declare some initial state in this application we're just using a count and

210
00:13:22,580 --> 00:13:23,910
going to start it at zero.

211
00:13:24,170 --> 00:13:29,870
We then have a root reducer and we saw that except some kind of state and some action that is being

212
00:13:29,870 --> 00:13:35,480
dispatched the first time that an action is dispatched is when create store runs and that's where the

213
00:13:35,480 --> 00:13:37,520
redux init action comes in.

214
00:13:37,520 --> 00:13:40,700
Remember that's just for the purpose of creating an initial state.

215
00:13:40,760 --> 00:13:44,210
So what we do is in the event that there is not a state yet.

216
00:13:44,240 --> 00:13:48,560
Let's just use this initial state and return that in the future.

217
00:13:48,590 --> 00:13:53,600
We're going to see what the action type is and if it's increment or decrement we'll make a new copy

218
00:13:53,600 --> 00:13:54,230
of this state.

219
00:13:54,410 --> 00:14:01,040
And in this case will increment and decrement will make a new copy of the state and Dechert as we then

220
00:14:01,040 --> 00:14:06,310
make our read store and that's pretty much the bulk of the redox work that we do when the downloads

221
00:14:06,590 --> 00:14:08,800
we see whatever the state of the story is.

222
00:14:08,810 --> 00:14:12,050
This should be an object with Count of zero.

223
00:14:12,350 --> 00:14:16,770
We then set the text of the each one to be zero.

224
00:14:16,880 --> 00:14:19,790
That way we can just start with whatever the current status.

225
00:14:19,970 --> 00:14:24,550
Now it's nicer to do this than to hard code the number 0 right here because imagine that maybe we're

226
00:14:24,560 --> 00:14:28,090
using a database to persist things we don't want to hard code some kind of number.

227
00:14:28,100 --> 00:14:31,590
What if last time we left off our counter was it two or negative five.

228
00:14:32,080 --> 00:14:38,150
Any time we click on a button with an idea of increment we're going to dispatch an action member all

229
00:14:38,150 --> 00:14:43,460
of our actions always have to have a key of type but we're then going to do is see what the state is

230
00:14:43,460 --> 00:14:44,530
at that point.

231
00:14:44,550 --> 00:14:47,380
Imagine this is the first time it might look like this.

232
00:14:47,450 --> 00:14:51,290
So we'll set the H-1 text to be one.

233
00:14:51,770 --> 00:14:55,700
Let's imagine that we go in decrement or click on the document button.

234
00:14:55,790 --> 00:14:59,360
We're going to dispatch once again in action with a type of decrement.

235
00:14:59,480 --> 00:15:03,650
Remember any anytime we dispatch an action we always go back to the reducer and run this code.

236
00:15:03,800 --> 00:15:10,310
Since our action duct tape is detriment we should reach this code right here which makes a copy of the

237
00:15:10,310 --> 00:15:18,530
state subtracts one from whatever the count is of that copy and returns it we then grab whatever is

238
00:15:18,530 --> 00:15:19,220
in the state.

239
00:15:19,310 --> 00:15:24,840
Let's imagine at this point that will divide count back at zero and then we set the H-1 text to be zero.

240
00:15:25,520 --> 00:15:29,870
So this would be just an idea of loading it incrementing and decrementing Let's see that one more time

241
00:15:29,870 --> 00:15:31,750
in the browser or over the page.

242
00:15:31,760 --> 00:15:36,470
There will be incrementing and decrementing we can always take a look at our good state because we've

243
00:15:36,470 --> 00:15:38,590
put that store in the global scope.

244
00:15:38,630 --> 00:15:40,850
You can see what your store can do.

245
00:15:40,850 --> 00:15:43,320
We're really just going to use dispatch and get state at this point.

246
00:15:43,340 --> 00:15:45,590
We'll keep it real simple.

247
00:15:45,630 --> 00:15:47,640
You take a look at some of this code.

248
00:15:47,720 --> 00:15:50,750
Take your time walking through it and try to practice and build this on your own.

249
00:15:50,750 --> 00:15:53,520
Just remember reducers are pure functions.

250
00:15:53,540 --> 00:16:00,020
Stores are created using those functions which we call reducers and stores that dispatch actions which

251
00:16:00,020 --> 00:16:05,570
are simply objects that always have to contain the key of type and when an action is dispatched we go

252
00:16:05,570 --> 00:16:11,850
back to that reducer and change the state by making a copy of it and then returning that copy.

253
00:16:11,900 --> 00:16:13,840
That way we can always have a pure function.

254
00:16:14,120 --> 00:16:16,690
So try this out again and I'll see you in the next video.
