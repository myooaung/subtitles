WEBVTT
1
00:00:00.330 --> 00:00:01.370
Welcome back.

2
00:00:01.620 --> 00:00:06.510
In this video I'll walk you through some of my code for the climate dashboard I show you in the last

3
00:00:06.510 --> 00:00:08.840
video to save time.

4
00:00:08.850 --> 00:00:13.830
I've already thrown together the Tim Allen CSSA files in my HDMI.

5
00:00:13.830 --> 00:00:19.710
I'm loading a Google font in my stylesheet then I've got a nav area with the range input per year and

6
00:00:19.710 --> 00:00:23.640
the radio buttons to toggle between emissions and emissions per capita.

7
00:00:23.970 --> 00:00:30.270
After that I've got containers for my SVGA is followed by my tool dip and a bunch of script tags to

8
00:00:30.270 --> 00:00:32.130
help keep the code more maintainable.

9
00:00:32.130 --> 00:00:35.200
I've pulled my javascript into four different files.

10
00:00:35.400 --> 00:00:39.830
Yes BAARDA Yes mapped out dodgiest and app.

11
00:00:41.320 --> 00:00:43.250
I won't say too much about this VSS.

12
00:00:43.420 --> 00:00:45.690
It's there to look at if you're interested.

13
00:00:45.880 --> 00:00:50.860
I've got some basic styles for the page along with some tool tips dialing and some classes to help you

14
00:00:50.860 --> 00:00:53.690
with the map interactivity o.

15
00:00:53.870 --> 00:00:57.240
I've also got a s file with all of my emissions data in it.

16
00:00:58.820 --> 00:01:00.000
We've got a lot to do.

17
00:01:00.050 --> 00:01:02.190
So let's break it down into pieces.

18
00:01:02.210 --> 00:01:05.610
First I need to get all of my data into my javascript.

19
00:01:05.660 --> 00:01:09.020
Next I'll make the map then I'll make the pie chart.

20
00:01:09.440 --> 00:01:15.740
Then I'll worry about the Bartter and after that I'll deal with the tooltip and this video will get

21
00:01:15.740 --> 00:01:22.520
through the first three of these phases will save the bar chart in the tooltip for the next video.

22
00:01:22.530 --> 00:01:24.450
Let's start with the app s.

23
00:01:24.480 --> 00:01:30.090
I'll need to make two requests one to get the top of adjacent file for the map and one to get my emissions

24
00:01:30.090 --> 00:01:30.670
data.

25
00:01:31.080 --> 00:01:37.410
So I'll start by making a queue and deferring to requests I'll pass a formatter into D-3 gets ESV as

26
00:01:37.410 --> 00:01:44.010
well so that I can format the keys and make sure my data values are numbers once everything is loaded.

27
00:01:44.020 --> 00:01:47.590
I'll first get the extreme values for the years in the dataset.

28
00:01:47.660 --> 00:01:52.460
I'll cite the current year to the smallest year and I'll grab the current data type from whichever radio

29
00:01:52.460 --> 00:01:54.140
button is checked.

30
00:01:54.170 --> 00:01:59.600
I'll also convert my table Jaison using top adjacent feature and store the result in a variable called

31
00:01:59.990 --> 00:02:02.050
data.

32
00:02:02.070 --> 00:02:05.080
I'm going to let my SVGA be as wide as their container.

33
00:02:05.100 --> 00:02:09.000
So next I'll grab one of the containers and remember it's with.

34
00:02:09.210 --> 00:02:11.250
Bear with me for this next step.

35
00:02:11.250 --> 00:02:17.360
I'm going to assume that I have functions co-create map and draw map create map only requires a width

36
00:02:17.360 --> 00:02:25.020
and height based my height on the width draw map on the other hand requires both data sets as well as

37
00:02:25.020 --> 00:02:27.050
the current year and the current data type.

38
00:02:27.180 --> 00:02:34.270
Since the coloring depends on both of these variables next I'll grab my range and put based on its Id

39
00:02:34.630 --> 00:02:38.650
set its min max and value and at an event listener.

40
00:02:38.870 --> 00:02:44.040
When the value changes I'll grab the new current year and redraw the graph.

41
00:02:44.050 --> 00:02:49.590
I'll also need an event listener for the radio buttons both of which have a name attribute of data type.

42
00:02:49.690 --> 00:02:55.870
Whenever there's a change there on the to grab the new data type and redraw the map great.

43
00:02:55.900 --> 00:02:57.950
This structure is really helpful.

44
00:02:58.090 --> 00:03:00.810
Now I just need to implement create map and draw map.

45
00:03:01.330 --> 00:03:03.800
Let's hop into the map dodgiest file.

46
00:03:03.970 --> 00:03:10.120
I've already written the Create map function as you can see all it does is set dimensions on the SVGA

47
00:03:10.420 --> 00:03:13.110
and add a text element for a graph title.

48
00:03:13.260 --> 00:03:16.810
So let's focus on draw a map to draw the map.

49
00:03:16.830 --> 00:03:19.680
Let me first select the map element with D-3.

50
00:03:19.680 --> 00:03:24.080
Remember that when dealing with maps you often need a projection once again.

51
00:03:24.090 --> 00:03:32.600
I'll use the Mercator scale and translate it based on the SVGA then I'll create my path function next

52
00:03:32.690 --> 00:03:34.150
let me deal with the data.

53
00:03:34.610 --> 00:03:38.620
First I'll update the text next to the range and that it shows the current year.

54
00:03:39.470 --> 00:03:43.880
Then I'll join my cxxviii climate data to my geography to do this.

55
00:03:43.880 --> 00:03:47.250
I'll use the fact that both datasets use the same set of IDs.

56
00:03:47.570 --> 00:03:52.580
So for each feature I can filter my climate data for countries whose country code matches the features

57
00:03:52.580 --> 00:03:53.520
ID.

58
00:03:53.810 --> 00:03:59.570
Next up create a variable called name which I'll want to refer to the current country but a couple of

59
00:03:59.570 --> 00:04:00.950
things can go wrong.

60
00:04:00.950 --> 00:04:06.470
It's possible I won't have any data for the country in my geographic dataset or I may have data but

61
00:04:06.470 --> 00:04:08.430
not for the current year.

62
00:04:08.450 --> 00:04:14.150
This code basically sets the properties key equal to the climate data if it exists or equal to a simple

63
00:04:14.150 --> 00:04:16.120
object if the data doesn't exist.

64
00:04:17.020 --> 00:04:17.460
Next.

65
00:04:17.470 --> 00:04:19.390
Here's some code for the color scales.

66
00:04:20.380 --> 00:04:23.040
Note that you can create a scale involving multiple colors.

67
00:04:23.080 --> 00:04:28.780
If your domain and range are arrays with more than two values it would be best to get the min and max

68
00:04:28.780 --> 00:04:30.070
programmatically here.

69
00:04:30.160 --> 00:04:34.660
And in fact it would probably be better to use some type of logarithmic or power scale instead of a

70
00:04:34.660 --> 00:04:38.660
linear scale but to keep things simple I'll stick with what we know.

71
00:04:40.460 --> 00:04:43.630
Once we have the scales it's time for the general update pattern.

72
00:04:44.030 --> 00:04:44.980
Here's the code.

73
00:04:45.230 --> 00:04:50.510
I'll never have an exit selection so the pattern is a little simpler than normal for new elements.

74
00:04:50.510 --> 00:04:57.000
I'll append a path element and for existing elements I'll add a transition and update the file.

75
00:04:57.070 --> 00:04:59.270
Lastly I'll need to update the graph title.

76
00:04:59.550 --> 00:05:04.290
The title should be based on the key but since the keys are in camel case I also write a little helper

77
00:05:04.290 --> 00:05:10.840
function that takes the camel case string and spaces in the right places and makes everything lowercase.

78
00:05:10.860 --> 00:05:16.620
The first argument to my replace method is the regular expression that will find all capital letters.

79
00:05:16.620 --> 00:05:22.230
The second argument is a callback that will replace any capital letter by a space followed by the lowercase

80
00:05:22.230 --> 00:05:23.590
version of the capital letter

81
00:05:27.310 --> 00:05:31.540
as you can see the graph in our response to all of the input elements in the nav.

82
00:05:31.960 --> 00:05:36.420
Nice Next let's tackle the pie chart.

83
00:05:36.770 --> 00:05:41.160
I'll use the same pattern as I did for the map first in the J S.

84
00:05:41.180 --> 00:05:42.650
Also the height for the pie chart.

85
00:05:42.800 --> 00:05:49.240
Then assume I have functions called create PI and drop by Create PI takes just a width and height draw

86
00:05:49.270 --> 00:05:52.920
PI takes in the climate data along with the current year.

87
00:05:53.000 --> 00:05:56.840
It only shows data on emissions though not emissions per capita.

88
00:05:56.840 --> 00:06:01.820
So I only need to update the callback to the range input and redraw the pie chart whenever someone changes

89
00:06:01.820 --> 00:06:04.180
the year.

90
00:06:04.270 --> 00:06:08.620
I've got to create my code inside of the IJA s already like before.

91
00:06:08.620 --> 00:06:12.260
I'm just adjusting the squeegie and appending a couple of elements to it.

92
00:06:13.540 --> 00:06:16.180
The dropping method should also look pretty familiar.

93
00:06:16.500 --> 00:06:21.720
After grabbing the pie chart I'm using D-3 PI and arke helpers for the ARX.

94
00:06:21.720 --> 00:06:28.320
I'm sorting by continent first then by emissions next and grabbing my data by year creating an array

95
00:06:28.320 --> 00:06:32.730
of all continents and using those continents to create a color scale.

96
00:06:32.740 --> 00:06:39.140
After that it's another application of the general update pattern with my year data in the arc's old

97
00:06:39.140 --> 00:06:46.760
Dark's get removed new arx get appended and all arcs on the page get their D and fill attributes.

98
00:06:46.770 --> 00:06:48.080
Updated.

99
00:06:48.140 --> 00:06:53.420
Finally I update the text from the chart title after I save and refresh.

100
00:06:53.540 --> 00:07:00.100
You can now see two charts working on the page let's pause here in the next video.

101
00:07:00.110 --> 00:07:01.490
I'll finish up this solution.
