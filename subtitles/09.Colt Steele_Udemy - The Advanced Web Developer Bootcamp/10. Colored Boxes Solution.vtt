WEBVTT
1
00:00:00.540 --> 00:00:01.210
Welcome back.

2
00:00:01.290 --> 00:00:05.820
Let's talk about the solution to this application.

3
00:00:05.880 --> 00:00:10.950
Remember we're making 32 boxes that start with some initial color and then randomly change to a new

4
00:00:10.950 --> 00:00:15.830
color or one of those boxes randomly changed your new color every 300 milliseconds.

5
00:00:16.200 --> 00:00:21.570
And so far I've got my starting code just got a render method and it's got a prop's of all the different

6
00:00:21.570 --> 00:00:24.100
colors that I can choose from.

7
00:00:24.120 --> 00:00:27.900
The first thing I'm going to do is just define a function that will give me another one of those random

8
00:00:27.900 --> 00:00:29.100
colors.

9
00:00:46.430 --> 00:00:46.750
OK.

10
00:00:46.760 --> 00:00:47.770
So there we have it.

11
00:00:47.780 --> 00:00:52.440
It's just a function inside of my component but doesn't really have anything to do with rendering.

12
00:00:52.640 --> 00:00:57.290
But it will look through my props and get me a random color.

13
00:00:57.320 --> 00:01:01.320
Next let's create the constructor.

14
00:01:01.350 --> 00:01:08.870
Now I know that I want to assign state in my constructor and I know I need 32 pieces of state and the

15
00:01:08.890 --> 00:01:13.770
only state that I really care about for each one of these boxes is just what color it is.

16
00:01:13.770 --> 00:01:22.790
So it's just going to be 32 strings.

17
00:01:22.900 --> 00:01:24.970
So this is just my standard constructor.

18
00:01:25.150 --> 00:01:28.590
And now I'm going to create an array with 32 elements in it.

19
00:01:28.600 --> 00:01:32.030
Let's not hard code 32 saw make a constant up here.

20
00:01:39.810 --> 00:01:40.440
OK.

21
00:01:40.560 --> 00:01:49.760
And now to create my array I'll do a little bit of trickery here so I'll make my boxes variable and

22
00:01:49.760 --> 00:01:57.740
then I can use the array constructor to say I want an array with no boxes 32 boxes and then I'll fill

23
00:01:57.740 --> 00:02:06.860
it so that I can use map and then for every element that I map I want to return a random color.

24
00:02:06.860 --> 00:02:11.510
So rather than making a function and invoking this I get random color.

25
00:02:11.690 --> 00:02:13.220
I can just pass the function directly

26
00:02:20.570 --> 00:02:25.670
but the trick there is if I do that this will change the keyword.

27
00:02:25.670 --> 00:02:29.270
This will change to something else when it's invoked within map.

28
00:02:29.600 --> 00:02:33.500
So the second parameter to map is what you want the keyword this to be.

29
00:02:33.500 --> 00:02:38.820
And in this case I want this to be the app component so I'll pass on this.

30
00:02:39.020 --> 00:02:44.270
All right now I have an array with 32 strings that represent color of each box.

31
00:02:44.270 --> 00:02:52.900
Next step is just to create my state.

32
00:02:53.700 --> 00:02:56.820
And again I'm using the object shorthand notation here.

33
00:02:58.850 --> 00:03:03.380
Another way I've got my state set up let's think about creating those boxes.

34
00:03:04.490 --> 00:03:14.670
So just to be lazy I'm going to make a stateless functional component up above here.

35
00:03:14.780 --> 00:03:19.850
So this is the outline of my statelets functional component and I want to return some GSX here that

36
00:03:19.850 --> 00:03:24.440
renders my box and the boxes just a div with some styling.

37
00:03:24.590 --> 00:03:28.840
And the only styling that's going to be variable is the background color.

38
00:03:29.120 --> 00:03:35.640
So actually let me switch this back to using curly braces.

39
00:03:36.350 --> 00:03:39.260
And then inside of here I'll first create a style object

40
00:03:42.670 --> 00:03:45.220
and then I'll grab all these styles

41
00:03:49.070 --> 00:03:51.460
so the width in the height of my box are going to be set.

42
00:03:51.470 --> 00:03:57.820
It's going to be inline block and then I'm going to use the prop except not this I'm going to use the

43
00:03:58.550 --> 00:04:00.570
the color that's passed and for a prop.

44
00:04:00.710 --> 00:04:06.080
So remember this box is going to take in one prop which is the color that box should be.

45
00:04:06.080 --> 00:04:10.580
And we're using that color inside of this style object.

46
00:04:10.580 --> 00:04:23.750
Now all I have to do is return that div with that style.

47
00:04:24.300 --> 00:04:30.200
OK that's all that's my boss component one little trick that I'll add to is that we can actually structure

48
00:04:30.200 --> 00:04:38.420
this prop's objects especially because we know we've only got one prop so I can just say color here

49
00:04:40.130 --> 00:04:43.980
and then I don't have to access Propst color I can just say color there.

50
00:04:44.030 --> 00:04:48.350
So just to point that out you'll see this in Riak code a bunch when you've got a stateless functional

51
00:04:48.350 --> 00:04:49.070
component.

52
00:04:49.220 --> 00:04:55.600
You can just decide what what props you want to take out of the props object.

53
00:04:55.660 --> 00:05:02.200
Now that we've got that component and we've we've got all of our state set up let's iterate over that

54
00:05:02.200 --> 00:05:09.500
state and then turn them into components in our render method so the first thing I want to do is map

55
00:05:09.500 --> 00:05:11.870
over that state and turn it into GSX

56
00:05:18.640 --> 00:05:25.750
and I'll use our box component will need a key because this is going to be a list of boxes and the key

57
00:05:25.750 --> 00:05:26.810
I'll just use.

58
00:05:26.890 --> 00:05:29.810
So I'll use my ID.

59
00:05:30.160 --> 00:05:32.440
I mean I use my index here

60
00:05:39.510 --> 00:05:45.710
and then the color will just be the box.

61
00:05:45.760 --> 00:05:49.660
In fact I should probably name this color so it's more obvious.

62
00:05:49.660 --> 00:05:52.830
This is just the color of the box.

63
00:05:52.940 --> 00:05:53.490
All right.

64
00:05:53.530 --> 00:05:56.790
So now I've got an array of 32 GSX elements.

65
00:05:56.800 --> 00:05:58.460
Now I just want to render it in here.

66
00:06:01.080 --> 00:06:03.640
Now let's take a look what we've got so far.

67
00:06:04.440 --> 00:06:05.930
Oh I've need start my server.

68
00:06:21.280 --> 00:06:22.890
OK.

69
00:06:24.230 --> 00:06:27.400
All right so now you've got 32 boxes but they don't change yet.

70
00:06:27.590 --> 00:06:30.680
So now we have to set up a set airball to change a random box

71
00:06:34.300 --> 00:06:36.640
so back in my constructor all set up that set interval

72
00:06:39.870 --> 00:06:45.360
and I want to do inside of here is choose a random box from that array and then update the color of

73
00:06:45.360 --> 00:06:46.520
just that box.

74
00:06:46.800 --> 00:06:52.800
And remember not to change anything about state directly but only make a copy of the state to be updated.

75
00:06:53.010 --> 00:06:56.980
So let's do that.

76
00:06:57.580 --> 00:07:02.230
And again it's important here to use an arrow function because inside of this callback we're going to

77
00:07:02.230 --> 00:07:06.410
use this set say and we want this to refer to our app.

78
00:07:06.790 --> 00:07:13.560
And so using the error function uses the this in the surrounding context which will be the app component.

79
00:07:17.130 --> 00:07:28.840
First I make a copy of my box's array and then I just want to pick a random index to update.

80
00:07:28.900 --> 00:07:30.470
Now I've got my random index.

81
00:07:30.520 --> 00:07:31.870
Now I just need to change it.

82
00:07:31.900 --> 00:07:37.690
Remember that this is a copy of my box's array and these are just strings so no harm in just directly

83
00:07:37.690 --> 00:07:49.550
updating this new box's array.

84
00:07:49.560 --> 00:08:05.270
OK so I've updated a box a box's color the last step is just to call that state.

85
00:08:05.520 --> 00:08:06.360
All right that should do it.

86
00:08:06.370 --> 00:08:07.480
Let's take a look.

87
00:08:10.640 --> 00:08:15.240
And as you can see we're getting 32 boxes that are randomly changing color.

88
00:08:15.240 --> 00:08:22.380
So that's all in the next section we'll all move into more about state and how state works with the

89
00:08:22.380 --> 00:08:25.740
virtual Dom and with events in Riyadh.

90
00:08:25.920 --> 00:08:27.660
So there's a lot of interesting topics coming up.

91
00:08:27.660 --> 00:08:28.530
Stay tuned.
