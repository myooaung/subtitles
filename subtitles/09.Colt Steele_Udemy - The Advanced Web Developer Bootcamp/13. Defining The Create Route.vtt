WEBVTT
1
00:00:00.140 --> 00:00:00.590
OK.

2
00:00:00.660 --> 00:00:03.070
So next we're going to focus on our create route.

3
00:00:03.410 --> 00:00:09.530
It's a POST request to slash API slash to do the same path as our index that lists all the tatoos.

4
00:00:09.540 --> 00:00:10.540
But it's a post.

5
00:00:10.740 --> 00:00:16.290
So we'll send Jason data containing pretty much the only thing we actually need to send is the actual

6
00:00:16.290 --> 00:00:22.140
name of that to walk the dog feed the cat whatever that is because the date in the status or the completion

7
00:00:22.140 --> 00:00:25.270
status are automatically added by default.

8
00:00:25.530 --> 00:00:33.060
So let's go ahead and hop over here to our dues jast file and we're going to define a router dot post

9
00:00:33.810 --> 00:00:34.950
slash.

10
00:00:35.670 --> 00:00:41.820
And remember it's the same router I get slash in that they're actually all prefixed by sosh API slash

11
00:00:41.890 --> 00:00:42.950
to do.

12
00:00:43.440 --> 00:00:48.890
So when a post requests comes in we'll do our function request response.

13
00:00:49.120 --> 00:00:52.780
And then in here why don't we just respond for now.

14
00:00:52.780 --> 00:01:01.250
RAZ It just lets you arrest us send this is the post-draft and just test it out make sure it's working.

15
00:01:01.310 --> 00:01:02.750
We're going to restart the server.

16
00:01:04.190 --> 00:01:06.730
And we have no way of requesting it right now.

17
00:01:06.740 --> 00:01:10.840
We could write an AJAX call but I'm actually going to use a tool called postman.

18
00:01:10.850 --> 00:01:12.220
I showed it briefly.

19
00:01:12.260 --> 00:01:13.670
I highly recommend you install it.

20
00:01:13.670 --> 00:01:16.620
It's free for Mac Windows and Linux.

21
00:01:16.640 --> 00:01:23.060
So just download whichever one is appropriate for you and it allows you to make requests and debug things

22
00:01:23.060 --> 00:01:24.210
work with API.

23
00:01:24.320 --> 00:01:28.680
Basically get a full picture of what's happening with every request and it has a really nice UI.

24
00:01:28.970 --> 00:01:30.790
So I have it open here.

25
00:01:31.140 --> 00:01:33.300
Make it a bit larger so you can see it.

26
00:01:33.500 --> 00:01:35.460
And our interface is pretty basic.

27
00:01:35.460 --> 00:01:37.580
I select get or post.

28
00:01:38.000 --> 00:01:39.240
And then you are l.

29
00:01:39.410 --> 00:01:43.600
So I'm going to copy my cloud 9 you or else so I don't have to type that whole thing.

30
00:01:43.970 --> 00:01:45.690
And if I send a get request.

31
00:01:45.710 --> 00:01:46.720
We've already established this.

32
00:01:46.730 --> 00:01:48.950
I get an empty array back.

33
00:01:49.040 --> 00:01:49.790
Perfect.

34
00:01:50.150 --> 00:01:52.400
So what if I change it to a post request.

35
00:01:52.970 --> 00:01:55.580
I hit send and we get the post-draft.

36
00:01:55.730 --> 00:01:57.420
So that's working just fine.

37
00:01:57.740 --> 00:02:03.460
But now what we want to do is actually send some data along with our post and then take that data and

38
00:02:03.490 --> 00:02:05.440
inserted into the database.

39
00:02:05.540 --> 00:02:09.880
And the way we do that with postman is underbody we can go and add in our data.

40
00:02:10.160 --> 00:02:16.310
So we would have name is equal to feed the fish for example.

41
00:02:16.660 --> 00:02:21.140
And if I send this right now there's not going to be a problem but that's because we're not doing anything

42
00:02:21.140 --> 00:02:21.940
with the data.

43
00:02:22.310 --> 00:02:25.540
As you can see we just get this is the post-draft we're sending it away.

44
00:02:25.640 --> 00:02:27.030
Nothing happens with it.

45
00:02:27.050 --> 00:02:30.580
So back in cloud 9 let's handle that data that's coming in.

46
00:02:30.920 --> 00:02:36.660
So if we worked with the express before you'll know that we actually don't have access to it automatically.

47
00:02:36.920 --> 00:02:43.250
It would be nice if we did but in order to access that data we have to use a tool package that's called

48
00:02:43.250 --> 00:02:44.430
Body parser.

49
00:02:44.840 --> 00:02:47.130
So I'm going to get this over with as quickly as I can.

50
00:02:47.150 --> 00:02:57.790
We're going to NPM install dash dash save body dash parser and this used to come with Express but they

51
00:02:57.790 --> 00:03:04.270
broke it out into a separate thing basically it takes in the body which is a string and it's going to

52
00:03:04.270 --> 00:03:07.780
parse it and turned it into an object for us to use.

53
00:03:07.780 --> 00:03:12.090
So we're going to do is come over here and require it at the top.

54
00:03:12.360 --> 00:03:15.300
So it will have we require.

55
00:03:15.940 --> 00:03:20.930
So we'll have body parser equals body dash parser.

56
00:03:21.070 --> 00:03:22.870
And unfortunately that's not enough.

57
00:03:22.930 --> 00:03:25.930
We then need to tell our application to use by the parser.

58
00:03:26.140 --> 00:03:27.580
So I'm going to do that here.

59
00:03:27.580 --> 00:03:33.000
What do you use body parts are dot J song.

60
00:03:33.490 --> 00:03:43.990
And there's actually one more we need which is apt use body parts or dot you are and coded extended

61
00:03:44.540 --> 00:03:45.260
troop.

62
00:03:45.310 --> 00:03:50.770
So these two lines without going into too much detail are going to allow us to access the request body

63
00:03:50.770 --> 00:03:54.180
that comes in in a put request or a post request.

64
00:03:54.190 --> 00:03:59.770
So over here I'll be able to access request body right now if I tried to do that.

65
00:03:59.800 --> 00:04:01.070
It's empty.

66
00:04:01.090 --> 00:04:07.560
So let's actually just do this now let's do a console that log request body.

67
00:04:07.720 --> 00:04:15.150
So this wreck object our queue up body body parser is giving us the ability to now reference it.

68
00:04:15.370 --> 00:04:16.340
Let's test it out.

69
00:04:16.450 --> 00:04:17.730
We don't want to install it again.

70
00:04:17.890 --> 00:04:18.260
There you go.

71
00:04:18.330 --> 00:04:19.500
Start at the server.

72
00:04:19.780 --> 00:04:28.480
Now if I go to postman and I send a request let's let's do watch Game of Thrones send notice that it's

73
00:04:28.480 --> 00:04:28.900
hung up.

74
00:04:28.900 --> 00:04:33.520
We're not getting response and that's because we're never responding with anything but you can see our

75
00:04:33.520 --> 00:04:35.500
body has been parsed correctly.

76
00:04:35.560 --> 00:04:39.310
It's an object now Name watch Game of Thrones.

77
00:04:39.310 --> 00:04:45.040
So this is perfect because all we need to do now is take whatever's in the request body and insert it

78
00:04:45.040 --> 00:04:52.120
into our database so that mongoose method we want is going to be D-B to do just like appear but rather

79
00:04:52.120 --> 00:04:55.180
than find you want create.

80
00:04:55.180 --> 00:04:57.460
And then we need to pass in data and object.

81
00:04:57.490 --> 00:05:03.610
So it looks something like this name is equal to feed fish but that's exactly what our request body

82
00:05:03.610 --> 00:05:04.680
looks like.

83
00:05:04.710 --> 00:05:06.030
Request body.

84
00:05:06.370 --> 00:05:06.890
OK.

85
00:05:07.120 --> 00:05:09.690
So DVD to do does create request up body.

86
00:05:09.910 --> 00:05:12.970
And then after that we do our DOT then.

87
00:05:13.270 --> 00:05:17.410
So if it worked we'll have access to the new to do.

88
00:05:18.010 --> 00:05:19.450
So let's call it new to do.

89
00:05:19.600 --> 00:05:23.260
And if there's a problem we'll have access to the error.

90
00:05:24.820 --> 00:05:27.480
And let's just do a rest send error.

91
00:05:27.640 --> 00:05:33.080
So the standard way of handling this is that we respond back with the newly created to do.

92
00:05:33.670 --> 00:05:39.210
And you might think that's silly because the user just created or somebody just sent a request to create

93
00:05:39.210 --> 00:05:40.240
it to do.

94
00:05:40.450 --> 00:05:42.770
But it's important to know that it worked.

95
00:05:42.910 --> 00:05:48.900
And also remember things like the date the status and ID are going to be generated by Mongo.

96
00:05:49.060 --> 00:05:50.970
So we want those to come back.

97
00:05:50.980 --> 00:05:55.840
So we have access to them and see why that's important things like the idea in particular we need to

98
00:05:55.840 --> 00:05:59.050
have that come back from our API.

99
00:05:59.170 --> 00:06:03.040
So we'll just do arrays that Jason knew to do.

100
00:06:03.040 --> 00:06:04.200
So let's test it out.

101
00:06:04.210 --> 00:06:10.060
Are things working well restart our server and then we'll go over to post man and here we're going to

102
00:06:10.060 --> 00:06:12.420
send the same request in our body.

103
00:06:12.550 --> 00:06:20.650
Same same name is now equal to buy bread not being very creative and we'll hit send.

104
00:06:20.890 --> 00:06:22.770
So slash API slash to do.

105
00:06:23.200 --> 00:06:24.250
What if we get back.

106
00:06:24.460 --> 00:06:25.240
Awesome.

107
00:06:25.660 --> 00:06:26.560
Take a look at that.

108
00:06:26.560 --> 00:06:31.160
So we actually get the newly created to Dubuc So it has the name that we inserted.

109
00:06:31.240 --> 00:06:33.690
It has a look at it the space before that.

110
00:06:33.700 --> 00:06:35.390
So we have space by bread.

111
00:06:35.590 --> 00:06:41.980
We have the generated ID the date that was generated as well based off of date done now and completed

112
00:06:41.980 --> 00:06:43.500
is set to false.

113
00:06:43.510 --> 00:06:49.440
So thats working perfectly exactly how it should and because we have mongoose debug mode set to true.

114
00:06:49.560 --> 00:06:52.480
You can actually see the code that was generated here.

115
00:06:52.600 --> 00:06:59.830
One small change we could make is also respond with the status code of 201 which is 2 1 is created.

116
00:06:59.950 --> 00:07:03.210
So it just is more explicit something was created.

117
00:07:03.250 --> 00:07:08.880
We can change together so send this to a one status code and then send the Jasen of the new to do.

118
00:07:09.100 --> 00:07:14.740
And if we do that now take a look at postman for our previous request where if we look at the headers

119
00:07:15.190 --> 00:07:16.700
it was is the status quo.

120
00:07:16.760 --> 00:07:17.470
We got 200.

121
00:07:17.470 --> 00:07:18.160
OK.

122
00:07:18.490 --> 00:07:26.590
Now if we do it and let's make something slightly different thats by cheese we get to 1 created as our

123
00:07:26.590 --> 00:07:27.430
status.

124
00:07:27.740 --> 00:07:28.220
Okay.

125
00:07:28.390 --> 00:07:35.560
So the last thing I want to point out is what happens if we try and send other data like lets say mood

126
00:07:36.130 --> 00:07:38.800
and mood is going to be happy.

127
00:07:38.830 --> 00:07:41.130
So just something that isn't actually in our schema.

128
00:07:41.200 --> 00:07:44.180
So we said that if we look at our body that comes back.

129
00:07:44.310 --> 00:07:45.280
Everything is fine.

130
00:07:45.340 --> 00:07:48.740
So it doesn't actually try and insert that because it's not part of our schema.

131
00:07:48.820 --> 00:07:50.450
So Mongo just doesn't care about it.

132
00:07:50.670 --> 00:07:50.960
Okay.

133
00:07:50.980 --> 00:07:56.740
So back in cloud 9 that's all we need to do for our post to create a need to do this file is you can

134
00:07:56.740 --> 00:08:00.270
see it's already getting kind of long and we have three other wraps to define.

135
00:08:00.460 --> 00:08:05.710
So later on we will be refactoring this pulling all this code out into separate functions so that we

136
00:08:05.710 --> 00:08:07.420
have really clean little routes.

137
00:08:07.450 --> 00:08:08.860
But for now we'll leave it as this.
