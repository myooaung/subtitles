WEBVTT
1
00:00:00.330 --> 00:00:01.150
Welcome back.

2
00:00:01.350 --> 00:00:06.360
In this video we're going to be going over solutions to the reduce exercises some of these are pretty

3
00:00:06.360 --> 00:00:07.030
tricky.

4
00:00:07.080 --> 00:00:08.050
So if you didn't get them all.

5
00:00:08.070 --> 00:00:08.840
That's ok.

6
00:00:09.060 --> 00:00:12.000
Feel free to go back and try these After watching the video.

7
00:00:12.480 --> 00:00:17.150
Let's start with our first function extract value which accepts an array and some key.

8
00:00:17.400 --> 00:00:22.050
We're going to return the result of reducing the array in our accumulator is going to start as an empty

9
00:00:22.080 --> 00:00:24.150
array inside of the callback.

10
00:00:24.150 --> 00:00:29.910
We're going to push into that accumulator each object at that key and then we'll return the accumulator

11
00:00:29.970 --> 00:00:31.930
which will be the array that we built up.

12
00:00:31.950 --> 00:00:36.900
Remember not to return the result of the push method because it returns the new lenth not the array

13
00:00:36.900 --> 00:00:38.270
itself.

14
00:00:38.330 --> 00:00:40.730
You've actually seen our next function valid count.

15
00:00:40.730 --> 00:00:46.490
If you've done the for each exercise except this time we're going to use reduce value count except a

16
00:00:46.490 --> 00:00:51.320
string and inside of this function we'll first make a string called vowels which will contain all the

17
00:00:51.320 --> 00:00:52.680
vowels we need.

18
00:00:52.790 --> 00:00:58.220
We'll then return the result of splitting the string by each character and reducing it or accumulator

19
00:00:58.220 --> 00:01:00.190
is going to begin as an empty object.

20
00:01:00.380 --> 00:01:06.140
And the first thing we'll do inside of reduce is check to see if the character that we're at is a vowel.

21
00:01:06.200 --> 00:01:10.400
We'll do this using index of and make sure that each character is lowercase.

22
00:01:10.730 --> 00:01:16.250
If a character that we're at is a vowel we then need to check and see if that key exists in our accumulator

23
00:01:16.640 --> 00:01:18.840
and if it does what increment that value.

24
00:01:19.130 --> 00:01:23.780
Otherwise we'll set the key in the accumulator which is the letter that we're at and assign it to the

25
00:01:23.780 --> 00:01:27.670
number one after the if statement or return the accumulator.

26
00:01:27.740 --> 00:01:34.040
So we can keep holding it up or an x function and key in value we're going to accept an array a key

27
00:01:34.100 --> 00:01:39.200
and about out here we're going to return the result of reducing this array and our accumulator is going

28
00:01:39.200 --> 00:01:45.450
to start as the array that we passed to this function inside of the callback to reduce will access each

29
00:01:45.450 --> 00:01:50.970
specific value at the index that we're at and set a key inside of it to be whatever value we pass of

30
00:01:50.970 --> 00:01:56.530
this function will then return the accumulator to make sure we keep building up our array of objects.

31
00:01:57.440 --> 00:02:00.980
For a last function partition we're going to accept an array and a callback.

32
00:02:01.130 --> 00:02:06.550
And we're going to reduce this array into an array of arrays inside of the callback to reduce.

33
00:02:06.710 --> 00:02:11.010
We're going to see if the result of the callback at the value we're at is true.

34
00:02:11.390 --> 00:02:14.270
If it is we're going to push it into the first subquery.

35
00:02:14.510 --> 00:02:17.550
Otherwise we'll push it into the second sub array.

36
00:02:17.630 --> 00:02:23.190
Finally we'll make sure to return the accumulator so we can keep building up our array of arrays.

37
00:02:23.240 --> 00:02:27.260
That's all for the reduced exercise this is sure to let us know if you have any questions and we'll

38
00:02:27.260 --> 00:02:28.230
see you in the next video.
