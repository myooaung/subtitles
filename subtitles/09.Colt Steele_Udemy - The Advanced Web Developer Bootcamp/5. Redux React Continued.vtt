WEBVTT
1
00:00:01.410 --> 00:00:06.960
So we left off with just connecting our redux or to our reactor application but now we're trying to

2
00:00:06.960 --> 00:00:14.190
get some specific state into our component the way that we bring in a redux state Turia component by

3
00:00:14.190 --> 00:00:18.300
passing in a function as the first parameter to connect.

4
00:00:18.300 --> 00:00:23.480
And that function is traditionally called maps feed into props.

5
00:00:23.520 --> 00:00:30.510
So inside of here I'm simply just going to pass maps data props and Aceves And let's go back in the

6
00:00:30.510 --> 00:00:32.190
browser and see what happens.

7
00:00:32.220 --> 00:00:36.600
Get rid of this debugger from last time let's go of the page.

8
00:00:37.170 --> 00:00:39.600
And we still get this cannot read property to the use of NO.

9
00:00:39.660 --> 00:00:41.240
So great now let's go.

10
00:00:41.250 --> 00:00:48.090
Just simply take this to do is raise here and we're just going to map over some empty array just so

11
00:00:48.090 --> 00:00:50.570
that it has something kind of silly for now.

12
00:00:51.120 --> 00:00:56.500
So I'll refresh the page and we're actually going to see that we get a warning Majesty to props in Kinect

13
00:00:56.550 --> 00:01:00.670
must return a plain object instead received undefined.

14
00:01:00.870 --> 00:01:02.040
Well that's a good hint.

15
00:01:02.080 --> 00:01:09.450
Maps the props always has to return an object and the first parameter that we get in maps the to props

16
00:01:09.750 --> 00:01:12.000
is our redux state.

17
00:01:12.630 --> 00:01:15.510
So why don't we right now throw a debugger.

18
00:01:15.510 --> 00:01:16.880
We're going to return an empty object.

19
00:01:16.920 --> 00:01:19.000
Let's go see what this looks like.

20
00:01:19.080 --> 00:01:24.300
Redux steede contains our to do's and that id.

21
00:01:24.360 --> 00:01:28.670
What we've just done right here is passed been a function to connect.

22
00:01:28.680 --> 00:01:32.420
We call that maps that are prop's Let's call this function traverse.

23
00:01:32.730 --> 00:01:38.020
We'll see that refresh the page and we'll see once again it doesn't matter what you call the function.

24
00:01:38.070 --> 00:01:43.980
But try this is not a great name we should call it maps state to prop's that's usually what it's called.

25
00:01:43.980 --> 00:01:50.270
And the reason is we are turning our redox state into props on the re-act component.

26
00:01:50.550 --> 00:01:51.660
Well hold on a second.

27
00:01:51.660 --> 00:01:52.580
How do we do that.

28
00:01:52.770 --> 00:02:00.520
Well this object that we return all of the keys will be placed on this stop props for the component.

29
00:02:00.720 --> 00:02:06.030
So I'm going to place a property up to use which is going to be my redux state and whatever the two

30
00:02:06.030 --> 00:02:07.970
dues are that are there.

31
00:02:08.040 --> 00:02:09.140
Remember this redux.

32
00:02:09.170 --> 00:02:10.110
Start to do's.

33
00:02:10.440 --> 00:02:12.910
It's going to go to my reducer.

34
00:02:12.990 --> 00:02:17.770
It's going to go grab whatever the state has and figure out what those to use are.

35
00:02:17.910 --> 00:02:22.450
One of the hardest things about connecting react and redux is figuring out how data flows through out

36
00:02:22.470 --> 00:02:23.400
an application.

37
00:02:23.400 --> 00:02:26.530
So let's set a bunch of debuggers and see how it all comes together.

38
00:02:26.910 --> 00:02:30.040
I'm going to set a debugger inside of my To Do list.

39
00:02:30.240 --> 00:02:35.610
I'm going to put a debugger in a render I'm going to put a debugger in maps the two props and I'm going

40
00:02:35.610 --> 00:02:37.940
to put a debugger in my reducer.

41
00:02:38.310 --> 00:02:41.160
Let's see which one gets visited first.

42
00:02:41.910 --> 00:02:43.660
Let's go.

43
00:02:43.680 --> 00:02:44.620
I don't want to ruin the fun.

44
00:02:44.640 --> 00:02:45.840
Refresh the page.

45
00:02:45.840 --> 00:02:53.160
The first place we get to is the reducer because remember when we connect our react and our redux store

46
00:02:54.030 --> 00:03:00.390
we always need to run that create store function that's going to go and retrieve our initial state.

47
00:03:00.390 --> 00:03:08.740
We then go directly to maps the props so that we can take our initial state and place it in the component.

48
00:03:08.760 --> 00:03:13.830
Remember we said that we map the redux feed to prompts that so we take a look at this that prop's we

49
00:03:13.830 --> 00:03:15.610
actually see our to.

50
00:03:15.960 --> 00:03:20.320
We got that from maps state props and we move along.

51
00:03:20.850 --> 00:03:24.780
So when you understand how Drina flows through an application it's going to be a lot easier to wrap

52
00:03:24.780 --> 00:03:26.550
your head around all the things that are happening.

53
00:03:26.760 --> 00:03:32.240
But what we've done right now is taken our to do lists component and we have connected it to our redux

54
00:03:32.290 --> 00:03:37.680
store not only through using connect but also by making sure that we have the provider component to

55
00:03:37.680 --> 00:03:40.800
specify what store we're actually connecting to.

56
00:03:40.950 --> 00:03:44.760
Member there's only one store we're going to connect to that single store.

57
00:03:45.210 --> 00:03:53.630
We are going to then grab whatever state we want and place it on this thought process.

58
00:03:53.700 --> 00:03:58.760
What's great here is we first go once again to the reproducer where do we go next.

59
00:03:58.770 --> 00:04:03.460
I'm even gas maps lead to props and then we go to render.

60
00:04:03.630 --> 00:04:05.690
Now this props that map is not a function.

61
00:04:05.700 --> 00:04:09.070
Well that's because it's the proper stuff to use the map.

62
00:04:09.120 --> 00:04:15.680
So I see that must get rid of some of these debuggers take that out in my reproducer as well.

63
00:04:16.290 --> 00:04:20.190
So right now I'm just getting some initial state and I'm rendering a bunch of CDs.

64
00:04:20.190 --> 00:04:22.700
That's really all we're doing right here.

65
00:04:23.550 --> 00:04:28.530
Now I'm not going to get very far if I don't actually start adding some to use so I'm going to need

66
00:04:28.980 --> 00:04:32.490
the ability to add to use and to remove to do this.

67
00:04:32.580 --> 00:04:33.340
How do we do that.

68
00:04:33.360 --> 00:04:37.250
All we can make a form inside of our to do list component.

69
00:04:37.830 --> 00:04:40.760
You can make this a separate component but we're going to keep it really simple.

70
00:04:40.770 --> 00:04:53.670
Right now what I'm going to do is simply render inside of here in this form when submitted is going

71
00:04:53.670 --> 00:04:57.300
to run some specific re-act function.

72
00:04:57.360 --> 00:05:03.670
So I'll say Ansermet we could use some thing like this that handle submit.

73
00:05:03.770 --> 00:05:06.270
You might remember whatever you do method binding.

74
00:05:06.290 --> 00:05:07.770
You got to make sure you do it right here.

75
00:05:07.790 --> 00:05:12.120
So we'll say this that handles submit is equal to this that handles submit.

76
00:05:12.170 --> 00:05:15.380
Bind this one to only do that one time.

77
00:05:15.380 --> 00:05:23.390
It also means that I need to handle submit function with some kind of event when this form is submitted.

78
00:05:23.600 --> 00:05:24.310
We'll do something.

79
00:05:24.410 --> 00:05:27.470
I don't know what that something is but we'll figure it out.

80
00:05:27.470 --> 00:05:33.200
Same thing as before with the query we want to input with some text we can give that a name of task

81
00:05:33.350 --> 00:05:39.940
and some idea of task can also give this a label make sure we have that for our task as well.

82
00:05:39.940 --> 00:05:44.760
Now we're going to want some kind of button and inside of here if we don't need all the styling we'll

83
00:05:44.780 --> 00:05:46.900
keep it simple.

84
00:05:47.270 --> 00:05:53.420
We simply just want the ability to say add a to do.

85
00:05:53.510 --> 00:05:56.910
Now if you remember let's go refresh this page right here.

86
00:05:56.950 --> 00:06:00.140
I don't know GSX omens must be wrapped in inclosing.

87
00:06:00.290 --> 00:06:05.540
So in this case to me this all a div or your first page.

88
00:06:05.540 --> 00:06:06.830
And here's our task.

89
00:06:06.830 --> 00:06:08.510
And that's awesome.

90
00:06:09.260 --> 00:06:12.080
But what do we actually do with this task right here.

91
00:06:12.080 --> 00:06:13.950
How do we get that text.

92
00:06:14.840 --> 00:06:17.510
Sent somewhere how do we see even what the user typed in.

93
00:06:17.510 --> 00:06:20.930
Well we need to introduce some re-act state.

94
00:06:21.680 --> 00:06:22.720
And what's that going to be.

95
00:06:22.720 --> 00:06:22.970
We'll see.

96
00:06:22.970 --> 00:06:24.650
The task is an empty string.

97
00:06:24.650 --> 00:06:28.140
You've seen this before when you've worked in forms.

98
00:06:28.190 --> 00:06:33.340
What do we want to do right here when there's a change going to call this that handle change.

99
00:06:33.800 --> 00:06:35.220
And you've seen this stuff before.

100
00:06:35.240 --> 00:06:38.300
Handle change.

101
00:06:38.300 --> 00:06:40.370
You want to make a pretty simple function here.

102
00:06:40.370 --> 00:06:45.320
That's basically going to say either target value.

103
00:06:45.560 --> 00:06:49.840
Going to be whatever we pass it.

104
00:06:50.300 --> 00:06:54.440
So this should allow us to change that specific input.

105
00:06:54.440 --> 00:06:56.730
This is the idea of a controlled input.

106
00:06:56.810 --> 00:06:57.550
What's going on here.

107
00:06:57.560 --> 00:07:05.570
Unexpected token to make sure that we have an extra property right here at Target.

108
00:07:06.700 --> 00:07:12.140
So here this is simply a function that's going to call this that set the state and we're going to pass

109
00:07:12.140 --> 00:07:17.060
in whatever we typed in that value.

110
00:07:17.060 --> 00:07:18.840
So let's go refresh the page.

111
00:07:18.950 --> 00:07:23.160
We can always check this out in our redux reactive tools.

112
00:07:23.390 --> 00:07:24.580
We'll connect right here.

113
00:07:24.680 --> 00:07:28.380
See if we get that provider and and everything inside of our to do list.

114
00:07:28.430 --> 00:07:32.930
We have a little bit of Steve but it looks like we're not changing that state cannot read property said

115
00:07:32.930 --> 00:07:35.150
Steve of undefined.

116
00:07:35.210 --> 00:07:37.840
That said state what do we forget to do.

117
00:07:37.920 --> 00:07:39.110
Does that handle change.

118
00:07:39.150 --> 00:07:44.920
Always got to make sure to do that point you know refresh the page try it again or type in.

119
00:07:44.920 --> 00:07:53.690
Also let's go to a quick look at RDX the make sure that we're doing that correctly and inside of here

120
00:07:54.080 --> 00:08:00.380
inside of our input we have that ID that name and that text inside of here we have a task which is an

121
00:08:00.380 --> 00:08:02.920
array with awesome.

122
00:08:03.110 --> 00:08:05.910
So what do we do with the specific value.

123
00:08:05.980 --> 00:08:12.040
RAKER Well we have to grab that when it is submitted.

124
00:08:13.660 --> 00:08:18.730
So why don't we inside have handle it through a debugger.

125
00:08:18.820 --> 00:08:19.790
We're going to save this.

126
00:08:19.900 --> 00:08:22.590
We're going to make sure that we prevent the default before we do that.

127
00:08:22.660 --> 00:08:27.770
We don't want any page refresh here so we can refresh the page and we can type in Hello.

128
00:08:28.270 --> 00:08:29.460
We had that task.

129
00:08:29.680 --> 00:08:31.600
So your quick look at just that.

130
00:08:31.910 --> 00:08:36.370
And we should see that we have some kind of task but how come it's coming in as an array.

131
00:08:38.490 --> 00:08:42.030
Silly me just want that to be the value right there.

132
00:08:42.390 --> 00:08:43.280
Let's go in.

133
00:08:43.290 --> 00:08:44.500
Awesome.

134
00:08:44.500 --> 00:08:46.940
Take a quick look at this.

135
00:08:46.960 --> 00:08:50.310
That's the we should see that the task is awesome.

136
00:08:50.670 --> 00:08:55.890
So this is just a simple way of collecting value in a form as you go through this you're going to make

137
00:08:55.890 --> 00:08:58.210
little typos here and there and that's totally fine.

138
00:08:58.380 --> 00:09:02.040
But when you're dealing with reata even before you get to redux you want to make sure you understand

139
00:09:02.040 --> 00:09:05.740
how to deal with controlled inputs how to deal with method binding.

140
00:09:05.910 --> 00:09:10.600
Before you get to any of the redux stuff make sure your reac fundamentals are really solid.

141
00:09:11.040 --> 00:09:17.220
When I submit something what I like to do is add that new to do.

142
00:09:17.620 --> 00:09:19.780
But how do I add that to do.

143
00:09:20.140 --> 00:09:28.480
Well I dispatch in action so remember that since our component is connected we have the ability to dispatch

144
00:09:28.540 --> 00:09:29.590
actions.

145
00:09:30.070 --> 00:09:35.440
So back in here I'm going to type in awesome and we're going to take a look at the component that we

146
00:09:35.440 --> 00:09:39.110
have right now using the key word this inside of.

147
00:09:39.130 --> 00:09:43.660
And I'll bring this up a little bit so we can make them visible inside of this component.

148
00:09:43.660 --> 00:09:50.860
We have a property called props and if we take a look at these props we see that we have the ability

149
00:09:50.860 --> 00:09:54.450
to dispatch actions.

150
00:09:54.500 --> 00:10:04.330
So what we could do is directly dispatch our action of our to do let's go get out of this debugger bring

151
00:10:04.500 --> 00:10:09.530
this back for a quick second because what I want to do is set a couple of break points when I dispatch

152
00:10:09.560 --> 00:10:13.240
an action we are going to dispatch

153
00:10:16.000 --> 00:10:24.130
an action and that action is going to be hard to do and the task is going to be whatever that's the

154
00:10:24.400 --> 00:10:30.310
task that's when we're done with this we can make sure to clear the value in that form by setting the

155
00:10:30.320 --> 00:10:34.460
state to be an empty string.

156
00:10:34.610 --> 00:10:37.020
In this case we'll just that this that our task.

157
00:10:37.310 --> 00:10:39.470
So we are going to dispatch.

158
00:10:39.680 --> 00:10:43.070
To do that's going to go where to our producer.

159
00:10:43.070 --> 00:10:45.570
So let's make sure that we get there correctly.

160
00:10:45.590 --> 00:10:50.700
We're going to put a debugger here are going to see that we're going to refresh the page.

161
00:10:50.720 --> 00:10:57.890
In fact we're going to put a debugger as well inside of our maps to prompts and we'll put it inside

162
00:10:57.890 --> 00:10:58.580
of our render.

163
00:10:58.580 --> 00:11:00.070
This is going to be fun.

164
00:11:00.140 --> 00:11:02.010
We have our debuggers back in place.

165
00:11:02.300 --> 00:11:05.510
Let's try to remember how the data flows through out an application.

166
00:11:05.510 --> 00:11:07.120
So let's refresh the page.

167
00:11:07.220 --> 00:11:13.290
The first place we start reversals again first place we start is in our maps data prompts.

168
00:11:13.300 --> 00:11:16.120
I want to make sure that we have a debugger right here as well.

169
00:11:16.600 --> 00:11:22.120
We start in map state to prop's because we just got our initial state that is then going to place on

170
00:11:22.120 --> 00:11:27.340
prop's a key have to do and whatever the value is are to do array.

171
00:11:27.340 --> 00:11:31.950
We're then going to render this component when we type in some kind of task.

172
00:11:32.050 --> 00:11:36.610
The components are always going to be rendered because we're calling that state is going to type in

173
00:11:36.610 --> 00:11:38.640
a simple task of a.

174
00:11:38.680 --> 00:11:46.270
When I add that to do we make it to our reducer because I've just dispatched an action and once we return

175
00:11:46.330 --> 00:11:50.470
a new state we go back to map state to prop's notice here.

176
00:11:50.470 --> 00:11:53.800
This is my object with to and an idea of one.

177
00:11:54.100 --> 00:11:57.960
We then finally go back to render and we get an error.

178
00:11:57.970 --> 00:12:01.660
It all breaks while objects are not valid as Riak children.

179
00:12:01.660 --> 00:12:04.000
The above error occurred with a list item.

180
00:12:04.180 --> 00:12:07.770
Well that's OK we can fix that up in a little bit.

181
00:12:08.830 --> 00:12:13.140
What I want to show you is simply just how this data flows in our application.

182
00:12:13.180 --> 00:12:18.940
So what we're going to do is fix that bug and see why this failed to render.

183
00:12:18.940 --> 00:12:24.250
So since we're rendering an object now we want to make sure that we pass in that specific task right

184
00:12:24.250 --> 00:12:25.800
there as the value.

185
00:12:25.850 --> 00:12:33.250
You'll also want to make sure that we do is simply just reset that form so that we don't set things

186
00:12:33.250 --> 00:12:34.450
individually.

187
00:12:34.660 --> 00:12:40.510
So let's go take a look at what our to do is look like we're going to go eat or go sleep and we'll go

188
00:12:40.510 --> 00:12:42.730
home.

189
00:12:42.820 --> 00:12:47.150
What we have now is actually the ability to add those to use to our state.

190
00:12:47.260 --> 00:12:51.710
Remember if we're using the redux dev tools we actually should be able to see what this looks like.

191
00:12:52.000 --> 00:12:54.440
Let's go bring this out a little bit.

192
00:12:57.560 --> 00:13:03.230
Bring this over here if we wanted to actually see what it would look like if we didn't have these to

193
00:13:03.230 --> 00:13:08.840
do's we can now change these values since our redux story is connected to our yakked application.

194
00:13:08.900 --> 00:13:13.700
We can see what it would be like if we reset everything if you ever want to make sure that you're using

195
00:13:14.480 --> 00:13:15.880
pure functions.

196
00:13:16.010 --> 00:13:20.840
You could always check in a redux dev tools and make sure that things are behaving as usual.

197
00:13:20.870 --> 00:13:28.680
Now notice here we're dispatching action had to do with the task of How about now and look at our dues.

198
00:13:28.880 --> 00:13:30.870
This looks great we're using pure functions.

199
00:13:30.890 --> 00:13:31.920
We took out this one.

200
00:13:31.940 --> 00:13:35.570
This is what it would look like if we time traveled a bit Mosco bring it back to get rid of this one.

201
00:13:35.690 --> 00:13:36.830
Let's bring it back.

202
00:13:36.830 --> 00:13:41.220
This gives you such control over debugging and seeing how data changes in your application.

203
00:13:41.220 --> 00:13:43.730
So what makes redux so so wonderful.

204
00:13:43.880 --> 00:13:50.240
So the last thing we need to do now is figure out how to handle removing to do this or going to do is

205
00:13:50.240 --> 00:13:55.080
pass in the ability for all our to do's to remove any specific to do.

206
00:13:55.480 --> 00:14:04.430
So what we want to do inside of here is pass in a prop of remove to say this is where we're going to

207
00:14:04.430 --> 00:14:11.390
pass in some function called remove to do and when we remove it to do we want to make sure that we get

208
00:14:11.390 --> 00:14:13.660
the right I.D. for that to do.

209
00:14:13.940 --> 00:14:21.020
So what we're going to do is when we remove it to do we're simply going to pass in that 80 every time

210
00:14:21.020 --> 00:14:25.050
that we make it to do will correctly bind it with the right to do.

211
00:14:25.370 --> 00:14:32.870
And up here when we remove it to do we'll have a function which is going to dispatch the action to remove

212
00:14:32.890 --> 00:14:34.690
a to do this component.

213
00:14:34.690 --> 00:14:38.510
Right now we also call a container it's going to contain or be Doxey.

214
00:14:38.840 --> 00:14:40.140
And how do we remove it to do.

215
00:14:40.190 --> 00:14:44.810
Well why don't we stop props that dispatch.

216
00:14:44.920 --> 00:14:48.740
Remember this function is going to accept some kind of ID right here.

217
00:14:48.740 --> 00:14:57.110
We're going to dispatch some action with the type of removed to do and an ID or whatever is passed to

218
00:14:57.110 --> 00:14:58.290
it.

219
00:14:58.430 --> 00:15:04.700
So we have to make sure in our to do component that we actually have a button to add and remove that

220
00:15:04.700 --> 00:15:06.220
we have a button to remove.

221
00:15:06.410 --> 00:15:14.630
So inside of this list item we're going to go and add a button and here on this button we are going

222
00:15:14.630 --> 00:15:24.020
to make sure that we have an on click of remove to do.

223
00:15:24.020 --> 00:15:27.170
And here we just add a big old pics right there.

224
00:15:27.220 --> 00:15:30.410
So let's go refresh the page and let's go eat.

225
00:15:30.410 --> 00:15:34.280
And when we click on this cannot read Property dispatch of undefined.

226
00:15:34.310 --> 00:15:37.630
So what's the problem here when we try to use the stop prompts that dispatch.

227
00:15:37.840 --> 00:15:41.560
Well let's go take a look at our to do list inside of here.

228
00:15:41.600 --> 00:15:46.840
We're trying to use the word this but we don't get the right value of this thought process.

229
00:15:46.910 --> 00:15:54.420
So same thing as before this move to to make sure that we bring the correct value of the key word this.

230
00:15:54.470 --> 00:15:55.230
Let's go eat.

231
00:15:55.400 --> 00:15:56.810
I'm going to move right now.

232
00:15:56.810 --> 00:15:59.270
Looks like we're getting nothing.

233
00:15:59.300 --> 00:16:01.050
When I click on this nothing happens.

234
00:16:01.280 --> 00:16:04.530
So how can we make sure that everything's working as correct.

235
00:16:04.820 --> 00:16:09.050
Well let's go set a debugger and make sure that we're getting to that remove action.

236
00:16:09.470 --> 00:16:12.870
Let's go Tribus had it to do and remove it.

237
00:16:13.250 --> 00:16:17.960
And notice here what we're getting as the idea we're getting this dispatch config and everything.

238
00:16:17.960 --> 00:16:20.070
Well that's because we're actually getting the event object.

239
00:16:20.090 --> 00:16:24.650
So we want to make sure that we pass the correct value for ID.

240
00:16:25.250 --> 00:16:28.840
So we'll go and sleep we'll go debug here.

241
00:16:29.090 --> 00:16:32.470
We can see that event is the event object and ID is undefined.

242
00:16:32.610 --> 00:16:34.300
Well why is ID undefined.

243
00:16:34.550 --> 00:16:35.190
What are we doing here.

244
00:16:35.190 --> 00:16:36.580
That's not correct.

245
00:16:37.280 --> 00:16:41.270
So when we're doing this by the way we want to make sure that we first pass in as the value of buying

246
00:16:41.330 --> 00:16:44.120
the key word this otherwise we're not going to get very far.

247
00:16:44.390 --> 00:16:46.930
So let's go see what happens when we try to remove it to do.

248
00:16:46.940 --> 00:16:50.640
We're going to dispatch remove to do with that I.D. And let's see what happens.

249
00:16:50.660 --> 00:16:53.210
We're going to eat the clock on this.

250
00:16:53.210 --> 00:16:54.110
It's gone.

251
00:16:54.170 --> 00:16:55.250
Sleep.

252
00:16:55.250 --> 00:16:56.780
Go home.

253
00:16:56.840 --> 00:16:58.870
When we click on this it's removed.

254
00:16:59.000 --> 00:17:00.620
How is all of this happening.

255
00:17:00.620 --> 00:17:06.470
We've coded this very quickly but I want to take a big step back and go through each piece of this logic.

256
00:17:06.530 --> 00:17:11.160
The first thing that we did is we connected our reactor application with our redux store.

257
00:17:11.330 --> 00:17:13.630
We did that using the provider component.

258
00:17:13.670 --> 00:17:19.550
We created a redux or we're using the redux tools and we create a store just like before using a reducer.

259
00:17:19.550 --> 00:17:20.750
None of this has changed.

260
00:17:20.930 --> 00:17:25.910
Reproducer comes from that file called reducer that has inside of here.

261
00:17:25.940 --> 00:17:29.050
We're simply bringing in our Constancio add or remove to do.

262
00:17:29.060 --> 00:17:34.040
Those are just strings and the rest is the same as what we had before that redux logic is really going

263
00:17:34.040 --> 00:17:34.610
to stay the same.

264
00:17:34.610 --> 00:17:37.350
So we started with building on some building blocks.

265
00:17:37.400 --> 00:17:42.260
That's why we started with some vanilla redux just figure out how data flows and redux build your re-act

266
00:17:42.260 --> 00:17:45.880
fundamentals and bringing the two together is going to be a lot easier.

267
00:17:45.890 --> 00:17:52.400
So what we then took a look at was how to actually connect this list with some relax date.

268
00:17:52.580 --> 00:17:55.300
We saw that a lot of it happens with this connect function.

269
00:17:55.370 --> 00:17:58.850
And the first function that connect accepts is maps the to props.

270
00:17:58.880 --> 00:18:04.150
This is where we go and grab some redux state and place it on props in that component.

271
00:18:04.280 --> 00:18:09.800
We then go through all the props and print out a whole bunch of Tutu's or essentially render a bunch

272
00:18:09.800 --> 00:18:13.930
of Tadeusz we're passing in a prop of remove to do whatever the task is.

273
00:18:14.000 --> 00:18:16.910
And some kind of key so that we're OK with react.

274
00:18:16.910 --> 00:18:18.020
This is not the best way to do it.

275
00:18:18.020 --> 00:18:23.360
There are better ways but we're going to stay simple once again when we remove it to do we dispatch

276
00:18:23.450 --> 00:18:26.680
remove it to do with the right I.D. which we get from binding.

277
00:18:26.960 --> 00:18:32.820
And when we add it to do we simply get whatever submitted in the form and then reset those form values

278
00:18:34.120 --> 00:18:40.950
what's important to understand here is we dispatch those actions and we render the component.

279
00:18:40.970 --> 00:18:46.770
So once again let's set some breakpoints and see exactly how things change in our application.

280
00:18:46.790 --> 00:18:51.440
I'll set this on render as well and go back to my reproducer as well.

281
00:18:52.310 --> 00:18:55.490
So once again let's see if you can figure out how all the data flows.

282
00:18:55.540 --> 00:18:59.600
I'm going to refresh the page and the first place we go once again it's always to the root reducer because

283
00:18:59.600 --> 00:19:01.190
we run create store.

284
00:19:01.190 --> 00:19:02.880
This is the initial redux action.

285
00:19:02.930 --> 00:19:08.570
We're then going to go to maps the props so that we can place any redux state on props and we're going

286
00:19:08.570 --> 00:19:09.990
to render the component.

287
00:19:10.550 --> 00:19:14.360
Right now I'm going to type in something which is going to set the stage and render the component again

288
00:19:14.380 --> 00:19:16.460
so that the re-act state here now redux.

289
00:19:16.670 --> 00:19:21.050
And then I'm going to add it to do when I added to do once again I go right back to the root reducer

290
00:19:21.230 --> 00:19:26.570
because I've dispatched an action of ad to do when I successfully return this new state.

291
00:19:26.570 --> 00:19:31.710
I go right back to map state the props and inside of here that I now have my new redux.

292
00:19:32.120 --> 00:19:37.430
I then read render the component with my new to do let's do it again.

293
00:19:37.430 --> 00:19:38.520
I type in a letter.

294
00:19:38.880 --> 00:19:40.610
I am running this that sets the.

295
00:19:40.640 --> 00:19:42.980
So the code is actually setting the breakpoint right here.

296
00:19:42.980 --> 00:19:49.700
Is this over here since I'm just changing a little bit of re-act state right here the component is going

297
00:19:49.700 --> 00:19:52.530
to render but no redux date is being changed.

298
00:19:52.790 --> 00:19:58.580
I'm going to add it to do and before I do it remember we're going to go to the root reducer in the root

299
00:19:58.580 --> 00:19:59.370
reducer.

300
00:19:59.390 --> 00:20:03.020
I've dispatched to do so we should hit this line as well.

301
00:20:03.110 --> 00:20:08.350
Once we return this new object we go right back to maps that prompts this function keeps running.

302
00:20:08.420 --> 00:20:12.830
It gives us our new redock state and once again we render the component.

303
00:20:12.860 --> 00:20:17.230
How about removing one of these same kind of thing we're going to go back to the root reducer.

304
00:20:17.270 --> 00:20:19.140
Except here we're removing it to do.

305
00:20:19.430 --> 00:20:25.610
And once we remove that we're going to then return a new redux D Once we return that new redux date

306
00:20:25.640 --> 00:20:27.400
we go back to maps the props.

307
00:20:27.620 --> 00:20:34.630
We put our new redux date on props in that component and we render that component once again.

308
00:20:34.700 --> 00:20:39.180
Would that encourage you to try to build now is the ability to update some of these seduce and the leader

309
00:20:39.180 --> 00:20:41.840
screencast we can add to react router to the mix.

310
00:20:41.960 --> 00:20:46.940
But what's really hard to wrap your head around is just how all this data flows in an application.

311
00:20:46.970 --> 00:20:51.170
The more debuggers you can set the more you can step through the better you're going to understand how

312
00:20:51.170 --> 00:20:52.640
it all comes together.

313
00:20:52.640 --> 00:20:54.080
I'll see you in the next week.
