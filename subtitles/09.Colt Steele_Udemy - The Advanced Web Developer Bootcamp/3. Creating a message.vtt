WEBVTT
1
00:00:00.490 --> 00:00:03.880
Alright it's time to create a message to do that.

2
00:00:03.900 --> 00:00:06.060
I need some handlers here.

3
00:00:06.060 --> 00:00:09.120
I'm going to add a messages dodgiest handlers.

4
00:00:09.150 --> 00:00:14.280
Let's keep our models in the singular and our handlers in the plural inside of messages.

5
00:00:14.400 --> 00:00:14.770
Yes.

6
00:00:14.790 --> 00:00:16.870
I'm going to bring in all of my models.

7
00:00:17.100 --> 00:00:20.950
I'll do that by requiring dot dot slash models.

8
00:00:21.150 --> 00:00:23.450
And remember this is the same thing as models indexed.

9
00:00:23.520 --> 00:00:24.210
Yes.

10
00:00:24.210 --> 00:00:28.400
And back in my models index I once again export it out this message.

11
00:00:28.590 --> 00:00:32.610
So make sure you have that as well it's going to be really important.

12
00:00:32.610 --> 00:00:34.650
Now here's where things get a little bit more fun.

13
00:00:34.710 --> 00:00:42.270
We're going to export a function called create message and create message is a function.

14
00:00:42.270 --> 00:00:44.050
Once again it's going to be an easing function.

15
00:00:44.130 --> 00:00:45.460
It's going to accept Grek.

16
00:00:45.470 --> 00:00:50.550
RAZ And next we're going to do is actually think about the other functions that we might need.

17
00:00:50.550 --> 00:00:54.000
We want to create a message we want to get an individual message.

18
00:00:54.000 --> 00:01:01.410
This is going to be useful for maybe editing and then we want to delete the message.

19
00:01:01.410 --> 00:01:05.370
So we're going to set up these three functions and we're going to take one at a time.

20
00:01:05.460 --> 00:01:09.870
Creating is actually going to be the most challenging because why don't we create we have to think about

21
00:01:09.870 --> 00:01:11.520
the user as well.

22
00:01:11.550 --> 00:01:13.100
So what is creating going to look like.

23
00:01:13.110 --> 00:01:19.470
Well like every single async function we're going to try catch and what are we going to do inside this

24
00:01:19.470 --> 00:01:20.270
tri block.

25
00:01:20.460 --> 00:01:22.890
We are going to make a new message.

26
00:01:23.160 --> 00:01:29.910
So we're going to say let this message be the result of D.B and that message Duckery.

27
00:01:30.210 --> 00:01:34.460
And inside of here when we create a message we have to pass in two properties.

28
00:01:34.620 --> 00:01:40.620
We have to pass in some text and some user while the text is probably going to come from that up body

29
00:01:40.930 --> 00:01:41.930
that text.

30
00:01:42.120 --> 00:01:45.290
But what about the user where is the user going to come from.

31
00:01:45.330 --> 00:01:48.610
Remember that this is going to be a specific ID.

32
00:01:48.870 --> 00:01:53.600
And when this actually happens we're probably going to have this specific ID for that user.

33
00:01:53.610 --> 00:02:03.900
Our route is probably going to look like API slash users slash some user id slash messages.

34
00:02:04.380 --> 00:02:10.170
So we're going to be able to grab the idea of that user from rack up harams that ID will make this route

35
00:02:10.200 --> 00:02:10.740
in a second.

36
00:02:10.740 --> 00:02:18.360
But here's probably what we want to start with some kind of ID messages we're then going to do is find

37
00:02:18.360 --> 00:02:26.820
that specific user let found user be the result of waiting for a user and finding it by its ID of recked

38
00:02:26.820 --> 00:02:29.000
up harams that ID.

39
00:02:29.070 --> 00:02:35.090
Now we need to find this user so that we can add a property onto that user while we're property we're

40
00:02:35.090 --> 00:02:39.380
going to add we want to add a message to the users messages.

41
00:02:39.450 --> 00:02:46.530
We're going to push in the new message that we made specifically just the ID because remember every

42
00:02:46.530 --> 00:02:52.620
user needs to know what ID of that message because every user that makes a message should have that

43
00:02:52.620 --> 00:02:54.730
ID of a message associated with it.

44
00:02:54.750 --> 00:03:02.430
We're then going to save that user once we've saved that user we can send back the message with that

45
00:03:02.430 --> 00:03:04.200
user's data as well.

46
00:03:04.320 --> 00:03:06.330
So this is going to be a bit of a tricky query.

47
00:03:06.350 --> 00:03:08.260
I don't want to walk through it step by step.

48
00:03:08.310 --> 00:03:14.340
We are going to find a message D-B the message that fine by I.T. we're going to find it by whatever

49
00:03:14.340 --> 00:03:20.320
the message id is that we got these underscore ID here as well or just a regular ID.

50
00:03:20.340 --> 00:03:21.870
Either one is going to work fine.

51
00:03:22.320 --> 00:03:28.350
Now we can make sure that we wait for this because it is asynchronous but I want to do one more thing

52
00:03:28.350 --> 00:03:29.020
here.

53
00:03:29.070 --> 00:03:36.960
I want to populate the user property and I want to populate the user property with just the user name

54
00:03:38.550 --> 00:03:40.400
and the profile image.

55
00:03:40.410 --> 00:03:48.140
You know and the reason for populating this is instead of just getting the ID of that user right here.

56
00:03:48.210 --> 00:03:51.980
I want to get some properties about that user when I send this back.

57
00:03:52.050 --> 00:03:57.150
This is going to allow my API to create a message and send me back that message immediately with the

58
00:03:57.180 --> 00:04:00.000
username and the image of the user that created it.

59
00:04:00.000 --> 00:04:04.250
If you think about how we're going to start putting these warbles on the page we're going to need it.

60
00:04:04.260 --> 00:04:09.510
The username of the person who made it as well as their image so that we don't have to query the database

61
00:04:09.510 --> 00:04:12.970
again in a different request if this works out well.

62
00:04:12.990 --> 00:04:15.830
We're going to send back a status of 200.

63
00:04:15.980 --> 00:04:22.620
Some Jason of our entire found message and once again if anything goes wrong we're simply going to return

64
00:04:22.620 --> 00:04:24.290
next with that.

65
00:04:25.380 --> 00:04:31.050
So we made this handler and that's all nice but we need to actually start using this in a wrap.

66
00:04:31.140 --> 00:04:34.420
So inside of our routes we're going to make a new file called messages.

67
00:04:34.450 --> 00:04:35.280
Yes.

68
00:04:35.730 --> 00:04:43.680
And inside of our messages we're going to simply bring and express like we saw before.

69
00:04:44.940 --> 00:04:49.750
We're going to bring in our router which is the result of express our router.

70
00:04:50.130 --> 00:04:56.550
And here we need to pass in an option called merge perhaps and merge Parama allows us to get access

71
00:04:56.550 --> 00:04:59.220
to the ID inside of this router.

72
00:04:59.510 --> 00:05:08.470
We're going to bring in our create message from handlers messages

73
00:05:12.310 --> 00:05:17.900
now instead of using our Routier dog get or not or dot post we're simply going to use the router down

74
00:05:17.950 --> 00:05:25.150
Route method and I'll tell you why in a second we want to make sure that all of our routes start with

75
00:05:25.150 --> 00:05:32.350
just a flash because we are going to prefix all of these routes with Slash API slash users slash ID

76
00:05:32.650 --> 00:05:38.240
slash messages member we need this ID right here which is why we have the merge pro-ams of true.

77
00:05:38.650 --> 00:05:42.310
So after this entire prefix I don't really need anything else.

78
00:05:42.310 --> 00:05:46.890
And what's nice about that is I can attach any kind of method that I want here.

79
00:05:46.960 --> 00:05:53.420
So when there is a post we are going to call create message when there is a request here.

80
00:05:53.430 --> 00:05:54.650
It's a post.

81
00:05:54.670 --> 00:05:56.390
We're going to call create message.

82
00:05:56.440 --> 00:06:02.170
So if we had back to our indexed that yes we should be able to include these routes right here instead

83
00:06:02.170 --> 00:06:02.850
of off routes.

84
00:06:02.860 --> 00:06:05.960
Maybe we'll call that something like messages routes.

85
00:06:05.970 --> 00:06:12.550
So will say the messages routes is the result of routes flash messages and where are we going to start

86
00:06:12.550 --> 00:06:13.090
using these.

87
00:06:13.090 --> 00:06:20.350
Well we're going to include them raido reader messages routes and we are going to prefix this all with

88
00:06:20.470 --> 00:06:26.570
Slash API slash users slash somebody slash messages.

89
00:06:27.520 --> 00:06:31.590
So any time you want to find all the messages for that user we can easily do that.

90
00:06:31.870 --> 00:06:35.800
So let's go see if this gets us the messages for a specific user.

91
00:06:36.040 --> 00:06:42.730
Well we're going to do is go sign in with this latest user first make sure you don't have any errors

92
00:06:42.730 --> 00:06:43.210
on our server.

93
00:06:43.240 --> 00:06:47.870
And it looks like we do router don't use requires a middleware function to get an object.

94
00:06:47.920 --> 00:06:53.560
Seems like we're getting this problem quite a bit and it's happening because whatever we're exporting

95
00:06:53.560 --> 00:07:01.510
from our router isn't really working out and this usually happens when you forget a module that exports

96
00:07:02.520 --> 00:07:04.150
the router.

97
00:07:04.740 --> 00:07:06.330
So it's go see that.

98
00:07:06.580 --> 00:07:07.890
And it looks like we're in business.

99
00:07:07.900 --> 00:07:09.500
You're going to make that mistake a bunch that's OK.

100
00:07:09.520 --> 00:07:10.910
I just made it too.

101
00:07:11.170 --> 00:07:17.230
So I'm going to sign in with a user name of L-E and password of secret I don't even need the username

102
00:07:17.270 --> 00:07:17.500
here.

103
00:07:17.500 --> 00:07:20.830
So let's do this so that I can get back the ID.

104
00:07:21.430 --> 00:07:24.130
And let's go see all of my messages.

105
00:07:24.260 --> 00:07:33.760
We are going to make in each DDP get to local host Katie Haiti one slash API slash users slash that

106
00:07:33.760 --> 00:07:36.340
Id slash messages.

107
00:07:37.360 --> 00:07:39.350
And here we see not found.

108
00:07:39.610 --> 00:07:40.870
How come that's not found.

109
00:07:41.140 --> 00:07:44.590
Well do I have a get to localhost API users.

110
00:07:44.590 --> 00:07:45.400
I don't.

111
00:07:45.400 --> 00:07:46.010
What do I have.

112
00:07:46.010 --> 00:07:47.020
I have a post.

113
00:07:47.230 --> 00:07:51.830
Remember inside of my router I set up this post right here.

114
00:07:52.050 --> 00:07:54.100
Let's take a look at that right over here.

115
00:07:54.100 --> 00:07:56.990
Inside of my Roths post.

116
00:07:57.340 --> 00:08:03.510
So I'm going to post over here and I'm going to pass in some kind of text of.

117
00:08:03.730 --> 00:08:07.870
We did it make sure you get those double quotes out of there.

118
00:08:08.320 --> 00:08:12.370
And it looks like I actually posted successfully.

119
00:08:12.400 --> 00:08:17.990
The problem is we don't really want anybody to just post to anybody else.

120
00:08:18.070 --> 00:08:22.060
We don't want any user to make another message for another user.

121
00:08:22.210 --> 00:08:26.800
You may not be able to guess this idea but you could try and you eventually would find the correct user

122
00:08:26.800 --> 00:08:28.070
ID.

123
00:08:28.180 --> 00:08:34.780
So we need to add the idea of making sure that the only person who can create a message is that user

124
00:08:34.780 --> 00:08:36.560
who's logged in and to do that.

125
00:08:36.580 --> 00:08:41.700
We're going to need to start using the token that we saw when we logged in successfully.

126
00:08:41.710 --> 00:08:44.350
So one more time I'll sign in with this information.

127
00:08:44.530 --> 00:08:48.320
We're going to need this token right here specifically this portion.

128
00:08:48.400 --> 00:08:49.680
We're going to decode it.

129
00:08:49.690 --> 00:08:52.590
We're going to use that information to correctly get the right user.
