1
00:00:00,420 --> 00:00:00,750
All right.

2
00:00:00,750 --> 00:00:01,910
Welcome back.

3
00:00:01,920 --> 00:00:07,720
So in this video I want to talk about what happens when things go wrong when things just don't work.

4
00:00:07,770 --> 00:00:13,160
How do we handle the different types of errors we might encounter when we're using fetch to make requests.

5
00:00:13,200 --> 00:00:14,890
So you have a simple code pen set up.

6
00:00:14,950 --> 00:00:20,580
I have a button I trigger that button or I click it and it triggers some code which will just fetch

7
00:00:20,760 --> 00:00:21,750
this API.

8
00:00:22,080 --> 00:00:25,490
So this API I'm using by the way is good API.

9
00:00:26,010 --> 00:00:27,960
Here's what it looks like with the link amusing.

10
00:00:27,970 --> 00:00:32,570
It's a valid you know I'm getting a 200 response we're all good.

11
00:00:32,880 --> 00:00:36,080
OK so I'll start off with fetching that you are.

12
00:00:36,480 --> 00:00:41,430
And I'm going to make this very simple I'm going to have my dad then just print out

13
00:00:44,130 --> 00:00:47,580
everything is fine just like that.

14
00:00:47,940 --> 00:00:51,820
Then I'm going to have my ketch print.

15
00:00:51,820 --> 00:00:55,000
There is a problem just like that.

16
00:00:55,230 --> 00:00:57,470
So if it works things are OK.

17
00:00:57,510 --> 00:00:58,980
We should see everything is fine.

18
00:00:59,220 --> 00:01:03,390
And if there's a problem an error we should get there's a problem.

19
00:01:03,510 --> 00:01:06,890
However I'll warn you this may not work exactly how you expect.

20
00:01:07,110 --> 00:01:11,210
But first let's start off with something that should work this you are well I already tested it.

21
00:01:11,220 --> 00:01:12,640
Everything should be good.

22
00:01:12,660 --> 00:01:15,660
I click the button and we get everything is fine.

23
00:01:15,750 --> 00:01:17,270
So far so good.

24
00:01:17,290 --> 00:01:20,550
Now what if I try and visit a URL that is not good.

25
00:01:20,550 --> 00:01:21,550
Something like this.

26
00:01:21,610 --> 00:01:23,570
Just add some jibberish at the end.

27
00:01:23,610 --> 00:01:24,960
We should get a 404.

28
00:01:25,080 --> 00:01:26,130
And we do.

29
00:01:26,610 --> 00:01:34,040
Let's copy this and try requesting that you are well that has a for a for or that gives us a 404 status.

30
00:01:34,080 --> 00:01:40,500
You probably expect it to cause a problem but actually it says everything is fine even though it's not

31
00:01:40,930 --> 00:01:42,700
a 404 error is not good.

32
00:01:42,750 --> 00:01:44,990
And you want to be able to handle that in your code.

33
00:01:45,060 --> 00:01:51,240
So we do get the default Crome error here but this has nothing to do with our error handling down here.

34
00:01:51,240 --> 00:01:52,770
So there's two things to talk about.

35
00:01:52,770 --> 00:01:59,820
One is how do we actually handle 404 other status code issues and the other is what does this catch

36
00:01:59,820 --> 00:02:00,580
for.

37
00:02:00,630 --> 00:02:02,400
What errors will this handle.

38
00:02:02,400 --> 00:02:06,150
So we'll start off with that second question is catch right here.

39
00:02:06,360 --> 00:02:08,780
When will we actually see there's a problem.

40
00:02:08,970 --> 00:02:11,790
The way that it's set up is that promise will be rejected.

41
00:02:11,820 --> 00:02:16,760
Basically the code in catch will run if there's a problem with the request itself.

42
00:02:16,770 --> 00:02:22,260
So if the users internet is off or there's a problem connecting or there's issues with credentials maybe

43
00:02:22,410 --> 00:02:25,000
but not with the actual response.

44
00:02:25,260 --> 00:02:26,180
So let me show you what I mean.

45
00:02:26,220 --> 00:02:27,610
I'll turn off my internet here.

46
00:02:27,720 --> 00:02:28,000
OK.

47
00:02:28,000 --> 00:02:29,280
I turned it off.

48
00:02:29,280 --> 00:02:32,310
Now if I try and make a request to this bad you are out.

49
00:02:32,400 --> 00:02:36,280
Any you will says there's a problem this time.

50
00:02:36,300 --> 00:02:39,410
So that type of error will cause this code to run.

51
00:02:39,780 --> 00:02:44,400
But again a 404 code won't return my internet back on.

52
00:02:44,400 --> 00:02:50,570
Back to our 404 issue or any request here making a request and I'm getting everything is fine again.

53
00:02:50,850 --> 00:02:57,270
If we want access to the actual status code of the request first and need access to the request itself.

54
00:02:57,480 --> 00:03:05,850
But I could do conses that log everything is fine and then consider log request dot status just like

55
00:03:05,850 --> 00:03:09,760
that and I click you can see it.

56
00:03:09,760 --> 00:03:10,500
Everything is fine.

57
00:03:10,510 --> 00:03:12,030
And then 404.

58
00:03:12,050 --> 00:03:17,330
And if I change it back to valid you RL I get everything is fine and 200.

59
00:03:17,580 --> 00:03:19,330
OK so back to the bad you are.

60
00:03:19,630 --> 00:03:26,890
What we could do is add an if statement you know if request does status is equal to 200 do something.

61
00:03:27,070 --> 00:03:30,890
But what I prefer to use is a property that built in called request.

62
00:03:30,940 --> 00:03:31,950
OK.

63
00:03:32,230 --> 00:03:36,640
So I like to do this if requested.

64
00:03:36,670 --> 00:03:38,530
OK and then I'd like to negate it.

65
00:03:38,530 --> 00:03:44,560
So if the request is not OK then we'll throw an error.

66
00:03:44,560 --> 00:03:46,940
Otherwise this should happen everything is fine.

67
00:03:47,080 --> 00:03:55,690
So we can start with just a constant out log error with response status and save.

68
00:03:56,260 --> 00:04:03,010
And if I request this bad you RL I get error with response status and the code afterwards.

69
00:04:03,100 --> 00:04:04,950
Everything is fine still runs.

70
00:04:04,960 --> 00:04:09,220
Now what I want to talk about is how we can refactor this a common pattern that we can follow with our

71
00:04:09,220 --> 00:04:11,540
promises to streamline things.

72
00:04:11,680 --> 00:04:17,060
So here's an example we can actually put the error checking for the response status.

73
00:04:17,110 --> 00:04:18,180
RAZ OK.

74
00:04:18,460 --> 00:04:20,820
In its own dot then.

75
00:04:21,170 --> 00:04:25,750
So we have our first then the first thing we want to do is check if everything's OK.

76
00:04:25,870 --> 00:04:30,910
If it's not we'll throw an error message or throw an error and that will then trigger the catch.

77
00:04:32,000 --> 00:04:38,120
But if things are ok we return the response and then this dot then runs.

78
00:04:38,130 --> 00:04:40,270
So let's type it up let's do it ourselves.

79
00:04:40,650 --> 00:04:44,150
So I'm going to actually delete a lot of this stuff we have in here.

80
00:04:44,440 --> 00:04:55,860
I'll leave that for now but then I'm going to delete this right there and I'll add a second then afterwards.

81
00:04:56,130 --> 00:04:56,720
And this does.

82
00:04:56,740 --> 00:05:00,740
Then what it will do is just take the request again.

83
00:05:00,990 --> 00:05:02,710
Well just cancel that log.

84
00:05:03,120 --> 00:05:05,790
Everything is fine for now.

85
00:05:05,820 --> 00:05:07,190
We'll just leave it at that.

86
00:05:07,680 --> 00:05:08,390
OK.

87
00:05:08,520 --> 00:05:15,180
So if the request is not OK in this first dot then we're going to throw an error and rather than just

88
00:05:15,180 --> 00:05:19,490
doing a 404 let's just do a custom one that's just passing the string.

89
00:05:19,590 --> 00:05:22,200
Just call it customer error for now.

90
00:05:23,230 --> 00:05:23,480
OK.

91
00:05:23,490 --> 00:05:24,770
So let's take a look at what we have.

92
00:05:24,770 --> 00:05:30,580
Now we fetch the euro first thing that runs as soon as the fetch is complete.

93
00:05:30,600 --> 00:05:31,790
Is this code that checks.

94
00:05:31,830 --> 00:05:33,290
Is the request OK.

95
00:05:33,330 --> 00:05:40,800
If it's not we'll throw the error and we're missing something because if it is ok we still need to return

96
00:05:40,800 --> 00:05:44,220
something from here will be passed on to this next day then.

97
00:05:44,280 --> 00:05:50,130
So we'll return the request if we didn't we wouldn't have data in request which we're not actually using

98
00:05:50,130 --> 00:05:53,060
at the moment so we can print that out as well.

99
00:05:56,000 --> 00:05:56,730
Like that.

100
00:05:56,930 --> 00:05:57,590
OK.

101
00:05:58,190 --> 00:06:01,520
So we're checking after the fetch is done is a request OK.

102
00:06:01,820 --> 00:06:07,450
If it's not throw an error which is then going to skip all of this and go to our catch.

103
00:06:07,790 --> 00:06:13,390
So this is a bad you Arel Let's see what happens we get there's a problem.

104
00:06:13,490 --> 00:06:14,840
So we're no longer running this.

105
00:06:14,840 --> 00:06:16,620
Everything is fine.

106
00:06:16,670 --> 00:06:18,930
We're not printing out the request or anything.

107
00:06:18,980 --> 00:06:20,870
We're going straight to there is a problem.

108
00:06:21,200 --> 00:06:21,880
OK.

109
00:06:22,400 --> 00:06:29,280
But if we make an OK request like this one you'll see we only get everything is fine.

110
00:06:29,310 --> 00:06:30,510
And then the request.

111
00:06:30,570 --> 00:06:32,570
So we're not getting there's a problem.

112
00:06:33,090 --> 00:06:35,530
So what about our custom error we have here.

113
00:06:35,820 --> 00:06:42,810
Well if we want to actually display that well we can do is in our doc catch can add an error or whatever

114
00:06:42,810 --> 00:06:46,770
we want to call this and then we'll just constantly log error.

115
00:06:47,740 --> 00:06:51,530
An error will be equal to whatever we throw up here.

116
00:06:52,280 --> 00:06:53,740
It's now let's try it.

117
00:06:53,740 --> 00:06:58,720
This is a good request still going to clear this and I'm going to go back to a bad request.

118
00:07:00,640 --> 00:07:03,230
Never go so you can see our error.

119
00:07:03,280 --> 00:07:06,780
Custom error is now showing up.

120
00:07:06,940 --> 00:07:09,800
Probably better to do is instead of custom error.

121
00:07:09,940 --> 00:07:13,450
Let's just do request dot status.

122
00:07:13,450 --> 00:07:20,560
So if we get a for a for meeting that request if not OK then this will just be for a 4 but if we get

123
00:07:20,560 --> 00:07:25,710
some other status code that's not equal to 200 OK that error will also throw.

124
00:07:25,710 --> 00:07:27,150
So it's not hard coded in.

125
00:07:27,370 --> 00:07:31,900
So now if we try this we get Error 404.

126
00:07:31,930 --> 00:07:36,490
Now of course you may not know you probably don't want to just print out the error you want to do something

127
00:07:36,490 --> 00:07:37,150
with it.

128
00:07:37,280 --> 00:07:42,340
So you could add budget to figure out how you're going to display that to the user probably manipulate

129
00:07:42,340 --> 00:07:48,040
the dom in some way if you present a pop up present some sort of model that explains you know.

130
00:07:48,100 --> 00:07:52,310
Sorry that you are well can't be reached at something like that but that's the basics.

131
00:07:52,390 --> 00:07:57,310
And the last thing I'll point out is that this is pretty commonly used and fed to requests that we can

132
00:07:57,310 --> 00:08:01,450
actually extract it and just leave it then.

133
00:08:01,780 --> 00:08:04,510
And let's move this to a separate function.

134
00:08:04,510 --> 00:08:06,310
I think actually I have it on my clipboard.

135
00:08:06,340 --> 00:08:09,870
Let's just call it function handle errors.

136
00:08:10,390 --> 00:08:17,650
Or we could call it know check response or something lets you handle error or handle errors and format

137
00:08:17,650 --> 00:08:22,030
this Macer just like this.

138
00:08:22,440 --> 00:08:22,990
OK.

139
00:08:23,150 --> 00:08:30,430
So we didn't change anything just give it a name and then appear I'll just do handle error.

140
00:08:31,490 --> 00:08:36,040
Litheness it's just a cleaner way of doing this in my opinion.

141
00:08:36,100 --> 00:08:41,160
It's a matter of taste definitely but I like to have our hands as short as possible.

142
00:08:41,280 --> 00:08:43,860
So this code handles the error.

143
00:08:43,950 --> 00:08:45,590
Let's make sure it still works.

144
00:08:45,600 --> 00:08:46,150
There we go.

145
00:08:46,170 --> 00:08:47,290
Error four or four.

146
00:08:47,400 --> 00:08:54,000
And if I turn off my internet like I did earlier I try again this time we get type error.

147
00:08:54,020 --> 00:08:57,020
Failed to fetch and that's important to failed to fetch.

148
00:08:57,120 --> 00:08:58,860
That's not coming from me remember.

149
00:08:58,980 --> 00:09:03,470
That's coming from fetches top default behavior when a user is off line.

150
00:09:03,480 --> 00:09:04,730
The Fed tries to send.

151
00:09:04,740 --> 00:09:05,480
Can't.

152
00:09:05,730 --> 00:09:10,920
Well that throws its own error and runs our catch constantly logging that error.

153
00:09:11,070 --> 00:09:13,890
So that wraps up what I want to say about handling errors.

154
00:09:14,010 --> 00:09:15,950
Really it comes down to a couple of things.

155
00:09:15,960 --> 00:09:23,460
One the default behavior is that this catch code will only run if there's a problem with the Internet

156
00:09:23,460 --> 00:09:25,210
or the request itself.

157
00:09:25,260 --> 00:09:30,120
It has nothing to do by default with the status codes with the response coming back.

158
00:09:30,120 --> 00:09:32,360
So typically we do want to handle those.

159
00:09:32,360 --> 00:09:36,250
It's really common that we want to make sure you know the request is good.

160
00:09:36,330 --> 00:09:41,520
We can do that by defining our own function like Hadad here to handle the errors and to throw in error

161
00:09:41,550 --> 00:09:42,150
if needed.

162
00:09:42,180 --> 00:09:46,680
Otherwise return the rest of the request and keep going down the chain.

163
00:09:46,680 --> 00:09:47,130
All righty.
