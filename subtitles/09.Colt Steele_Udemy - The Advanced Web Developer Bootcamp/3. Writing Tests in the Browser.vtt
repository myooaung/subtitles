WEBVTT
1
00:00:00.420 --> 00:00:05.910
Welcome back in the section we're going to introduce some essential concepts in unit testing will first

2
00:00:05.910 --> 00:00:08.230
understand what Jasmine and unit tests are.

3
00:00:08.480 --> 00:00:14.460
Well then define what you describe it and expect keywords do as well as what matters and spies are all

4
00:00:14.460 --> 00:00:20.190
then write better tests with before and after hooks and test asynchronous code using clocks and callbacks.

5
00:00:20.190 --> 00:00:25.920
Finally we'll compare and contrast different parenting styles and rate solid unit tests with jazzmen.

6
00:00:26.190 --> 00:00:27.520
But why are we learning this.

7
00:00:27.630 --> 00:00:32.250
You might not appreciate the value of testing as much right now but when you work on larger applications

8
00:00:32.280 --> 00:00:38.380
and with others it becomes essential as you begin writing more complicated functions and larger applications

9
00:00:38.650 --> 00:00:41.210
you're bound to make mistakes and you're not alone.

10
00:00:41.230 --> 00:00:45.650
Even professional programmers make mistakes all the time when your programs grow.

11
00:00:45.700 --> 00:00:50.500
They can become difficult to reason about and as hard as you may try it's impossible to predict every

12
00:00:50.500 --> 00:00:51.880
bug in your program.

13
00:00:51.880 --> 00:00:57.700
Fixing bugs also has a cost as it can be quite easy for one fix to introduce bugs into other parts of

14
00:00:57.700 --> 00:00:59.200
your application.

15
00:00:59.320 --> 00:01:03.940
So how can we avoid having our programs become more brittle and difficult to maintain as they grow in

16
00:01:03.940 --> 00:01:05.200
complexity.

17
00:01:05.200 --> 00:01:11.140
The solution to this problem lies in testing our code as thoroughly as possible starting with unit tests

18
00:01:11.560 --> 00:01:14.350
which test parts or units of an application.

19
00:01:14.350 --> 00:01:19.200
The idea here is to test things individually to ensure that they are running properly.

20
00:01:19.240 --> 00:01:21.160
So how do we get started writing tests.

21
00:01:21.160 --> 00:01:25.810
The first thing we need is some framework or library to help us write and run our tests.

22
00:01:25.810 --> 00:01:29.070
The second thing we need is a way of describing the code we are testing.

23
00:01:29.350 --> 00:01:34.300
If we just write some test code we might not really understand from a behavioral point what we are testing

24
00:01:34.310 --> 00:01:36.270
or even why we are testing it.

25
00:01:36.280 --> 00:01:41.250
Finally we need a tool that allows us to make assertions or expectations about our code.

26
00:01:41.650 --> 00:01:43.240
So where does this all come from.

27
00:01:43.240 --> 00:01:44.840
One answer is Jasmine.

28
00:01:45.190 --> 00:01:50.140
Jasmine is a testing framework that comes with everything we listed above to help us test our code.

29
00:01:50.170 --> 00:01:55.330
It works with all kinds of javascript environments like the browser and no J us and it has a very simple

30
00:01:55.330 --> 00:02:00.850
and friendly syntax to get started with for these examples will be working in the browser and when we

31
00:02:00.850 --> 00:02:03.590
continue with no guess you'll see the exact same syntax.

32
00:02:03.610 --> 00:02:06.960
But for testing server side or back end applications.

33
00:02:07.090 --> 00:02:10.990
Finally there are quite a few other tools for unit testing javascript.

34
00:02:10.990 --> 00:02:14.800
You may have heard of ones like Mogae and try and even though we'll be using Jasmine.

35
00:02:14.800 --> 00:02:17.680
It's not very different from other testing libraries.

36
00:02:17.680 --> 00:02:21.570
Once you know how to use one of them well it's very easy to transition to others.

37
00:02:21.940 --> 00:02:24.550
So let's see how to get started using jazzmen.

38
00:02:24.550 --> 00:02:30.370
The first thing we'll do is create an each TNL file and link the CSSA and Javascript tags here and then

39
00:02:30.370 --> 00:02:32.070
we can start writing our casts.

40
00:02:32.350 --> 00:02:35.620
Here's what the HDMI looks like with the proper links and scripts.

41
00:02:35.620 --> 00:02:38.520
We can save this file and see what it looks like in the browser.

42
00:02:38.770 --> 00:02:43.330
This code is included in the section notes along with the code Penn. link which you can check out below.

43
00:02:43.360 --> 00:02:45.140
Let's see what this looks like in the browser.

44
00:02:46.370 --> 00:02:51.440
Here we do not have any tests running but we already have a friendly interface with some nice VSS loaded

45
00:02:51.440 --> 00:02:52.860
from jazzmen.

46
00:02:52.880 --> 00:02:57.740
Not only does jazzmen provide a framework to write tests it also provides a nice interface for us to

47
00:02:57.740 --> 00:03:01.120
see what tests we are running in the browser in the next video.

48
00:03:01.130 --> 00:03:06.080
We'll discuss some essential syntax for writing tests and jump right into writing a few tests with jazzmen

49
00:03:06.470 --> 00:03:06.870
zealot.
