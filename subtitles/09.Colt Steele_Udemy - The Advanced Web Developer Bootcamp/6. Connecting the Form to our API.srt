1
00:00:00,390 --> 00:00:00,820
OK.

2
00:00:00,870 --> 00:00:03,390
So next we want to get the forum to work.

3
00:00:03,390 --> 00:00:05,830
And for that to work type some thing.

4
00:00:06,120 --> 00:00:09,090
So we'll have a listener to check if I hit the enter key.

5
00:00:09,110 --> 00:00:09,890
There's no button.

6
00:00:09,900 --> 00:00:13,850
So we're just going to check if I hit the enter key if I do or the user does.

7
00:00:14,040 --> 00:00:19,530
And we're going to take the data in here send a new post request to our create route which is slash

8
00:00:19,740 --> 00:00:23,560
API I-Slash to do so we're going to send the data from here.

9
00:00:23,940 --> 00:00:28,950
We're going to send that to the server hopefully get something good back and if we do if it was a successful

10
00:00:28,950 --> 00:00:32,230
insert we're going to show it and add it to the page.

11
00:00:32,310 --> 00:00:34,300
And if there's a problem then we won't.

12
00:00:34,770 --> 00:00:35,730
So let's try it.

13
00:00:35,730 --> 00:00:39,850
The first thing we'll do is add an event listener to see what's happening with our input.

14
00:00:39,900 --> 00:00:43,880
If someone's typing into it so we'll do that in our document ready.

15
00:00:43,890 --> 00:00:48,600
Do a dollar sign and we're going to select the input which you look at here.

16
00:00:48,780 --> 00:00:52,030
I gave it an idea of to do input.

17
00:00:52,530 --> 00:00:59,960
So we'll select that with that hash sign pounds on Octa Thorpe and we're going to add a dot key press

18
00:01:01,900 --> 00:01:07,930
function and I'm going to in here check what key was pressed.

19
00:01:07,960 --> 00:01:13,860
So if you're not familiar with this there are key codes and the Enter key has a key code of 13.

20
00:01:13,960 --> 00:01:20,870
So we're going to add an if statement that says if event which and which contains the key code value

21
00:01:20,870 --> 00:01:22,730
which if it equals 13.

22
00:01:23,040 --> 00:01:30,150
What we're going to do is create to do so just to convert that log.

23
00:01:31,010 --> 00:01:32,780
You hit enter.

24
00:01:32,780 --> 00:01:36,120
So we make sure it's only working when I hit the enter key.

25
00:01:36,120 --> 00:01:44,970
So let's try it now refresh my page type nothing happens and I'm going to hit enter in 3 to 1 perfect

26
00:01:45,030 --> 00:01:50,140
and I'm doing it again and other kids still don't affect it only when I hit enter.

27
00:01:50,580 --> 00:01:50,850
OK.

28
00:01:50,850 --> 00:01:52,130
So that's what we want.

29
00:01:52,590 --> 00:01:57,160
So rather than adding all my code in here I'm just going to create a function.

30
00:01:57,420 --> 00:02:02,110
I'll call it create to do just like that doesn't exist yet.

31
00:02:02,220 --> 00:02:05,590
So when you hit enter in the input we're going to call create to do.

32
00:02:05,710 --> 00:02:15,690
So that means down here I need to define create to do so and here we're going to send request to create

33
00:02:15,870 --> 00:02:17,020
new to do.

34
00:02:17,700 --> 00:02:21,240
And the way we do that we need to send a post request.

35
00:02:21,480 --> 00:02:27,040
As we've already discussed to slash API slash to do the same you know.

36
00:02:27,150 --> 00:02:31,350
But we can't use get JS on because we're not doing a get request.

37
00:02:31,560 --> 00:02:33,060
So we need a post request.

38
00:02:33,330 --> 00:02:38,780
And the easiest way to do that is with Dollar Sign up post.

39
00:02:38,790 --> 00:02:42,570
So we're going to pass an R U R L and just remove that.

40
00:02:42,650 --> 00:02:43,570
There we go.

41
00:02:44,160 --> 00:02:51,210
And on its own that's not enough because we also need to provide the data and the data we want to send

42
00:02:51,450 --> 00:02:53,700
is whatever's in the input.

43
00:02:53,700 --> 00:02:59,670
So if we go back to postman we could model this request if we send a post to slash API slash to Duse

44
00:03:00,300 --> 00:03:06,270
remember that we have a name field that removes remove some of these in the body and we want name to

45
00:03:06,270 --> 00:03:09,400
be equal to walk the fish or something.

46
00:03:10,050 --> 00:03:13,970
Or you know wash the fish or something like that.

47
00:03:13,980 --> 00:03:18,770
So basically you want to extract what's in the form and send it through under the key of name.

48
00:03:18,780 --> 00:03:25,850
So back here we're going to create an object and we're going to pass in name but what's the value.

49
00:03:25,860 --> 00:03:27,530
How do we get what's in the form.

50
00:03:27,630 --> 00:03:35,460
Well I'll make a variable here and I'll just call it user input equals and we need to select that input

51
00:03:36,030 --> 00:03:46,650
which is what we did earlier appear right there where you go to do input as an ID dot Vau and that's

52
00:03:46,650 --> 00:03:48,830
going to give us the value in there.

53
00:03:49,260 --> 00:03:53,280
So we could just do a count about log user input.

54
00:03:53,280 --> 00:03:54,960
Make sure it's working.

55
00:03:56,080 --> 00:03:57,150
Let's tested up.

56
00:03:57,360 --> 00:04:00,300
So we're not sending a request yet but whatever I type in here.

57
00:04:00,450 --> 00:04:01,150
Hello.

58
00:04:01,380 --> 00:04:03,500
When I hit enter it should show up.

59
00:04:03,510 --> 00:04:04,160
Perfect.

60
00:04:04,170 --> 00:04:09,720
So that's what we want to send whatever a hit Enter we want to take that value which we've already extracted

61
00:04:10,050 --> 00:04:12,870
and we want to send it on in our post request.

62
00:04:13,230 --> 00:04:16,890
So I'm going to uncomment that remove or cancel that log.

63
00:04:16,890 --> 00:04:21,270
So we're going to set name equal to user input.

64
00:04:21,270 --> 00:04:27,990
So again we're making an object name colon whatever's in the form which we extracted appear send that

65
00:04:28,020 --> 00:04:36,780
as a post request to slash API slash dues and then we'll add in our dot then and if it works we're going

66
00:04:36,780 --> 00:04:38,110
to get something back.

67
00:04:38,130 --> 00:04:43,920
Remember when we used postman we sent a request and if it's successful we get the newly created to do

68
00:04:43,920 --> 00:04:44,450
back.

69
00:04:44,640 --> 00:04:52,760
So I'm going to call this new to do and here we'll start by just consider logging to do and but add

70
00:04:52,760 --> 00:04:55,170
a dumb catch error.

71
00:04:57,150 --> 00:05:05,690
With our callback and constant log error because this is one of the more error prone things that could

72
00:05:05,690 --> 00:05:11,870
happen when we're trying to insert into the database because we have those validations where things

73
00:05:11,870 --> 00:05:13,370
are required like name.

74
00:05:13,370 --> 00:05:18,600
So if you tried to send something somehow with a name not existing we would get an error.

75
00:05:18,740 --> 00:05:21,200
So let's save this and let's see what happens.

76
00:05:21,200 --> 00:05:22,700
Moment of Truth here.

77
00:05:22,830 --> 00:05:27,830
So I'll open up my console and buy cheese veggies cheese by car.

78
00:05:27,830 --> 00:05:29,810
How about change diet.

79
00:05:29,840 --> 00:05:32,570
I hit enter and it looks good.

80
00:05:32,810 --> 00:05:38,590
Looks like a request was sent because we're getting back our data where we have name change diet completed

81
00:05:38,600 --> 00:05:42,080
is false created date and the auto generated ID.

82
00:05:42,230 --> 00:05:46,990
If we go back here you can see our debug mode for mongers is showing the insert.

83
00:05:47,270 --> 00:05:48,770
So that's working.

84
00:05:48,770 --> 00:05:50,180
We're actually getting the data back.

85
00:05:50,210 --> 00:05:55,160
So we're taking it from the form listening for the enter key taking the data sending it in a post request

86
00:05:55,370 --> 00:05:58,320
it's coming back successfully in this case.

87
00:05:58,340 --> 00:06:00,590
Now we want to update our page.

88
00:06:00,590 --> 00:06:07,850
We want to insert it just like we did already when the page loaded so we could copy this code and do

89
00:06:07,850 --> 00:06:12,920
the same thing where we make a new to do we check if it's completed if it is we assign a class and then

90
00:06:12,920 --> 00:06:18,770
we append it but I'm going to use it by turning it into its own function.

91
00:06:18,770 --> 00:06:25,640
So I'm going to make a function I'm going to call it add to do singular just like this.

92
00:06:25,740 --> 00:06:28,660
And there's one argument we'll call it to do.

93
00:06:28,940 --> 00:06:34,190
And so for each one at the beginning of the page when it loads we're calling add to deuce and we're

94
00:06:34,190 --> 00:06:37,540
just going to call add to do for each to do.

95
00:06:37,790 --> 00:06:40,630
So basically we've just moved it out into its own function.

96
00:06:40,730 --> 00:06:47,780
Functionality has not changed though so so far we are fresh the page things still work but now we're

97
00:06:47,780 --> 00:06:52,130
also going to call add to do when our post request comes back.

98
00:06:52,130 --> 00:06:53,190
So we're going to do.

99
00:06:53,410 --> 00:06:58,890
Add to do Cingular and we're going to pass in New to do.

100
00:06:59,510 --> 00:07:03,310
So if that makes sense we're reusing this code that we already wrote.

101
00:07:03,770 --> 00:07:08,490
So when we loop through all of them we're just calling out to do to insert each one one at a time.

102
00:07:08,570 --> 00:07:10,560
As you can see this is our code.

103
00:07:10,640 --> 00:07:16,840
We're doing the same operation just once when we try and create a new one and we get a successful response.

104
00:07:17,220 --> 00:07:20,860
Let's see does it work change diet by cheese.

105
00:07:20,870 --> 00:07:25,240
How about I don't know brew cider.

106
00:07:25,280 --> 00:07:27,800
I don't like cider I don't know why I'm doing that.

107
00:07:27,860 --> 00:07:29,050
I hit enter.

108
00:07:29,450 --> 00:07:30,460
I did it twice.

109
00:07:30,530 --> 00:07:31,850
And now we have two of them.

110
00:07:31,850 --> 00:07:36,470
And the reason I did it twice is that I initially thought it didn't work because our texture was still

111
00:07:36,470 --> 00:07:37,230
here.

112
00:07:37,280 --> 00:07:38,290
Usually it should go away.

113
00:07:38,300 --> 00:07:40,830
But of course we haven't done anything to make that happen.

114
00:07:40,970 --> 00:07:43,310
So it's just my own user expectations.

115
00:07:43,310 --> 00:07:44,950
I'm used to something clearing.

116
00:07:45,080 --> 00:07:50,220
So let's add that in now if our post request comes back successful we'll add the new to do.

117
00:07:50,330 --> 00:07:52,230
But we'll also clear the input.

118
00:07:52,670 --> 00:07:55,150
So I'm actually just going to call this line again.

119
00:07:55,760 --> 00:08:01,610
But I'm going to pass an empty string so instead of retrieving the input value like we're doing here

120
00:08:01,810 --> 00:08:03,800
we are setting it to empty string.

121
00:08:03,800 --> 00:08:05,800
And now I refresh the page.

122
00:08:05,850 --> 00:08:09,050
How about thick sunglasses.

123
00:08:09,050 --> 00:08:09,700
That's a real one.

124
00:08:09,730 --> 00:08:10,320
I need to do.

125
00:08:10,370 --> 00:08:12,530
I broke my sunglasses yesterday.

126
00:08:12,530 --> 00:08:13,120
There you go.

127
00:08:13,130 --> 00:08:16,500
So it inserts it sends the post request first.

128
00:08:16,700 --> 00:08:18,590
And this is actually an important topic.

129
00:08:18,650 --> 00:08:21,670
We don't have to send the request first.

130
00:08:21,680 --> 00:08:25,640
Wait for it to come back successful and then update the page.

131
00:08:25,640 --> 00:08:31,480
Another approach is actually to just assume that it's going to work and added to the page first and

132
00:08:31,490 --> 00:08:36,420
then if the request comes back with a bad response we can remove it from the page.

133
00:08:36,440 --> 00:08:38,340
So that's a more optimistic approach.

134
00:08:38,450 --> 00:08:41,170
And the idea is that it's faster from the user's point of view.

135
00:08:41,450 --> 00:08:44,150
If you look here you know this happened to really really quick.

136
00:08:44,420 --> 00:08:49,980
But if we were trying to send a lot more data or wait for a lot more data to come back somehow the server

137
00:08:49,980 --> 00:08:56,380
the request was really slow then a user could be waiting for a while to see their to do show up.

138
00:08:56,510 --> 00:09:01,670
But then the problem is ok if it doesn't work it's kind of a weird experience where users see it show

139
00:09:01,670 --> 00:09:05,250
up and then have it removed a couple milliseconds or seconds later.

140
00:09:05,390 --> 00:09:09,920
So up to you but this is the more standard way of doing it is sending it to the server making sure it

141
00:09:09,920 --> 00:09:11,710
works and then updating.

142
00:09:11,790 --> 00:09:12,380
Cool.

143
00:09:12,620 --> 00:09:13,680
So that's now working.

144
00:09:13,730 --> 00:09:16,980
We're able to load the page get all the traduce.

145
00:09:17,390 --> 00:09:20,100
Right now only one of them is completed in our database.

146
00:09:20,150 --> 00:09:24,380
So we don't have the functionality to mark them completed yet and we don't have the functionality to

147
00:09:24,380 --> 00:09:30,110
delete them but we can create a new one and I'm not going to because I'm out of ideas and I don't like

148
00:09:30,110 --> 00:09:31,580
doing jibberish but does work.

149
00:09:31,580 --> 00:09:32,490
We saw it.

150
00:09:32,510 --> 00:09:37,310
So next we're going to add the delete functionality and that one actually requires a little more work

151
00:09:37,910 --> 00:09:41,580
because when we click on one of these first we need to add the delete button.

152
00:09:41,660 --> 00:09:46,350
But then once we click on the delete button how do we know where to send the request.

153
00:09:46,400 --> 00:09:50,250
What's the URL so that's kind of the puzzle we have to solve the next video.
