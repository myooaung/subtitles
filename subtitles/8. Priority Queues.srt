1
1

00:00:05,280  -->  00:00:08,260 line:15% 
<v Sarah>I've mentioned the term priority queue</v>
2

2

00:00:08,260  -->  00:00:10,730
a few times in relation to heaps
3

3

00:00:10,730  -->  00:00:14,420
and that's because a really common use of heaps
4

4

00:00:14,420  -->  00:00:18,020
is to use them as what's called a priority queue.
5

5

00:00:18,020  -->  00:00:22,130
Now remember queues are usually first-in, first-out.
6

6

00:00:22,130  -->  00:00:24,140
Items are removed from the queue
7

7

00:00:24,140  -->  00:00:25,850
in the order that they're added.
8

8

00:00:25,850  -->  00:00:28,031
But what if we wanted to change that slightly
9

9

00:00:28,031  -->  00:00:30,600
and say that we always want to access
10

10

00:00:30,600  -->  00:00:32,570
the highest priority item.
11

11

00:00:32,570  -->  00:00:35,000
And so, rather than always removing
12

12

00:00:35,000  -->  00:00:37,250
the items in the order they were added,
13

13

00:00:37,250  -->  00:00:39,860
when we add an item we assign it a priority
14

14

00:00:39,860  -->  00:00:41,700
and when we go to remove an item
15

15

00:00:41,700  -->  00:00:44,380
the highest priority item is the one that's removed.
16

16

00:00:44,380  -->  00:00:47,770
So it's not gonna be first-in, first-out or FIFO anymore.
17

17

00:00:47,770  -->  00:00:50,280
It's whichever item has the highest priority,
18

18

00:00:50,280  -->  00:00:53,800
kind of like it's not FIFO when you go to an emergency room.
19

19

00:00:53,800  -->  00:00:56,580
If you've ever gone to an emergency room of a hospital
20

20

00:00:56,580  -->  00:00:58,050
that uses triage,
21

21

00:00:58,050  -->  00:01:00,560
they don't see patients in the order they come in.
22

22

00:01:00,560  -->  00:01:02,250
Somebody who's having a heart attack
23

23

00:01:02,250  -->  00:01:05,940
is gonna be seen before somebody who perhaps needs stitches.
24

24

00:01:05,940  -->  00:01:08,080
So it's the same idea for priority queues,
25

25

00:01:08,080  -->  00:01:09,630
when we take an item off the queue
26

26

00:01:09,630  -->  00:01:12,770
we always want the highest priority item first.
27

27

00:01:12,770  -->  00:01:16,200
So if the values in the nodes indicate the priority
28

28

00:01:16,200  -->  00:01:19,160
and of course they can, then a max-heap
29

29

00:01:19,160  -->  00:01:21,310
is an ideal data structure for this
30

30

00:01:21,310  -->  00:01:24,860
because the value with the highest priority
31

31

00:01:24,860  -->  00:01:26,880
is always at the root of the heap.
32

32

00:01:26,880  -->  00:01:29,560
And so, when you want to remove the highest priority item
33

33

00:01:29,560  -->  00:01:32,020
from a max-heap, you just remove the root
34

34

00:01:32,020  -->  00:01:34,000
and that can be done in constant time.
35

35

00:01:34,000  -->  00:01:36,990
Now since heaps are usually implemented as arrays,
36

36

00:01:36,990  -->  00:01:38,263
that just means that we're always removing
37

37

00:01:38,263  -->  00:01:40,180
the item at position zero.
38

38

00:01:40,180  -->  00:01:42,940
And then once we've removed the highest priority item
39

39

00:01:42,940  -->  00:01:44,100
and we fix the heap,
40

40

00:01:44,100  -->  00:01:46,560
that means that the next highest priority item
41

41

00:01:46,560  -->  00:01:48,060
is now at the root.
42

42

00:01:48,060  -->  00:01:51,300
And when we want that we can remove that at constant time.
43

43

00:01:51,300  -->  00:01:53,255
And if we add a new item into the heap
44

44

00:01:53,255  -->  00:01:57,190
that has a higher priority, after we fix the heap
45

45

00:01:57,190  -->  00:01:59,880
that highest priority item will be at the root.
46

46

00:01:59,880  -->  00:02:03,550
And so we can always get the highest priority item
47

47

00:02:03,550  -->  00:02:05,030
in constant time.
48

48

00:02:05,030  -->  00:02:07,900
And so a priority queue is an abstract data type
49

49

00:02:07,900  -->  00:02:10,980
that's commonly implemented as a max-heap.
50

50

00:02:10,980  -->  00:02:13,060
Every item in the heap has a priority
51

51

00:02:13,060  -->  00:02:16,580
and we build a max-heap based on the priority value.
52

52

00:02:16,580  -->  00:02:18,990
So if we're dealing with integers themselves
53

53

00:02:18,990  -->  00:02:22,850
like we were in our code in the implementation that we did
54

54

00:02:22,850  -->  00:02:25,830
then the integers themselves have their priority value.
55

55

00:02:25,830  -->  00:02:27,900
But more commonly, you're gonna be dealing with
56

56

00:02:27,900  -->  00:02:29,090
other types of objects
57

57

00:02:29,090  -->  00:02:31,030
and there will be something in the object
58

58

00:02:31,030  -->  00:02:35,360
that indicates what the priority is for that object.
59

59

00:02:35,360  -->  00:02:37,220
So when it comes to priority ques
60

60

00:02:37,220  -->  00:02:40,450
the common operations are, insert with priority,
61

61

00:02:40,450  -->  00:02:42,500
remove the highest priority item
62

62

00:02:42,500  -->  00:02:45,170
and that's called Poll, and peak,
63

63

00:02:45,170  -->  00:02:47,620
which will return the item with the highest priority
64

64

00:02:47,620  -->  00:02:49,750
but, it won't remove it from the heap.
65

65

00:02:49,750  -->  00:02:52,230
This is the same as peaking at a stack or a queue.
66

66

00:02:52,230  -->  00:02:54,960
Now when we remove the highest priority item of course,
67

67

00:02:54,960  -->  00:02:56,270
we might have to fix the heap
68

68

00:02:56,270  -->  00:02:58,370
but when we peak at the heap we don't.
69

69

00:02:58,370  -->  00:03:00,320
Because we don't actually remove anything.
70

70

00:03:00,320  -->  00:03:03,130
So Java has a priority queue class,
71

71

00:03:03,130  -->  00:03:04,180
that's what's on the screen,
72

72

00:03:04,180  -->  00:03:06,410
so there's no need to code your own
73

73

00:03:06,410  -->  00:03:09,320
but of course if you did you'd just be coding a max-heap.
74

74

00:03:09,320  -->  00:03:12,890
And we'll see that this is an unbounded priority queue
75

75

00:03:12,890  -->  00:03:14,850
based on a priority heap.
76

76

00:03:14,850  -->  00:03:17,090
And so that means there's no limit
77

77

00:03:17,090  -->  00:03:19,040
to the number of items it can hold.
78

78

00:03:19,040  -->  00:03:21,890
Now one interesting thing about this priority queue is
79

79

00:03:21,890  -->  00:03:24,120
it's actually a min-heap.
80

80

00:03:24,120  -->  00:03:27,360
The head of this queue is the least element
81

81

00:03:27,360  -->  00:03:30,470
with respect to the specified ordering.
82

82

00:03:30,470  -->  00:03:34,040
So the lower the number, the higher the priority.
83

83

00:03:34,040  -->  00:03:36,730
If you're number 999, you're a lower priority
84

84

00:03:36,730  -->  00:03:39,710
then somebody who's got a priority of 10.
85

85

00:03:39,710  -->  00:03:41,660
It's an array implementation.
86

86

00:03:41,660  -->  00:03:44,380
We can see here it says a priority queue is unbounded
87

87

00:03:44,380  -->  00:03:47,550
but has an internal capacity governing the size of an array.
88

88

00:03:47,550  -->  00:03:50,100
And so they're resizing the array
89

89

00:03:50,100  -->  00:03:52,230
if you try to add something
90

90

00:03:52,230  -->  00:03:55,380
to a priority queue that's already full.
91

91

00:03:55,380  -->  00:03:56,840
This is not synchronised
92

92

00:03:56,840  -->  00:03:59,420
so if you want to use it for multiple threads
93

93

00:03:59,420  -->  00:04:03,240
you should use priority blocking queue instead.
94

94

00:04:03,240  -->  00:04:05,620
It's only been around since 1.5
95

95

00:04:05,620  -->  00:04:08,010
so it's a fairly recent addition.
96

96

00:04:08,010  -->  00:04:10,460
Okay so let's go over to the IDE now
97

97

00:04:10,460  -->  00:04:12,693
and give this class a try.
98

98

00:04:17,550  -->  00:04:19,710
Alright, so here we are in the IDE
99

99

00:04:19,710  -->  00:04:23,810
and we'll just use the JDK priority queue class
100

100

00:04:23,810  -->  00:04:25,300
and we'll use it with integer
101

101

00:04:25,300  -->  00:04:27,630
just to demonstrate some of the methods.
102

102

00:04:27,630  -->  00:04:30,030
So let's create a priority queue.
103

103

00:04:30,030  -->  00:04:35,030
So, priority queue and we'll have an integer priority queue
104

104

00:04:35,500  -->  00:04:40,343
and I'll just call it pq equals new priority queue.
105

105

00:04:41,920  -->  00:04:45,050
And let's just add some items to it.
106

106

00:04:45,050  -->  00:04:47,213
So we'll say pq dot add 25.
107

107

00:04:50,023  -->  00:04:52,660
Pq dot add
108

108

00:04:52,660  -->  00:04:54,583
Let's add minus 22.
109

109

00:04:55,502  -->  00:05:00,502
Pq dot add 1343.
110

110

00:05:00,506  -->  00:05:03,780
Pq dot add 54.
111

111

00:05:03,780  -->  00:05:04,963
Let's add zero.
112

112

00:05:06,850  -->  00:05:08,980
And we'll add another negative number.
113

113

00:05:08,980  -->  00:05:12,293
So it'll be negative 3492.
114

114

00:05:13,870  -->  00:05:16,853
And pq dot add 429.
115

115

00:05:18,950  -->  00:05:22,190
So now let's see what some of the methods give to us
116

116

00:05:22,190  -->  00:05:23,040
when we call them.
117

117

00:05:23,040  -->  00:05:25,540
So we'll say, system dot out dot print line.
118

118

00:05:25,540  -->  00:05:28,500
And let's peak at this priority queue.
119

119

00:05:28,500  -->  00:05:29,913
So we'll say, peak.
120

120

00:05:31,490  -->  00:05:34,423
And let's run this right now, see what we get.
121

121

00:05:38,060  -->  00:05:41,130
And we'll see that we get the lowest number on the queue.
122

122

00:05:41,130  -->  00:05:44,690
Remember that this implementation is a min-heap.
123

123

00:05:44,690  -->  00:05:47,220
And so the minimum value is going to be at the root.
124

124

00:05:47,220  -->  00:05:49,200
And so the lower, in this implementation,
125

125

00:05:49,200  -->  00:05:52,013
the lower your number, the higher priority you are.
126

126

00:05:52,990  -->  00:05:57,040
So minus 3492 is still on the heap
127

127

00:05:57,040  -->  00:05:59,700
because peak doesn't change the heap in any way.
128

128

00:05:59,700  -->  00:06:03,590
So let's now remove the item with the highest priority.
129

129

00:06:03,590  -->  00:06:05,660
So we'll say pq dot remove
130

130

00:06:06,650  -->  00:06:09,370
and let's peak after we've done that
131

131

00:06:10,520  -->  00:06:14,463
to see if the heap is changed in any way.
132

132

00:06:15,490  -->  00:06:16,930
And of course it has.
133

133

00:06:16,930  -->  00:06:21,930
So, before we removed minus 3492, that was at the root.
134

134

00:06:22,940  -->  00:06:26,440
The remove method, actually returns the item it removed
135

135

00:06:26,440  -->  00:06:28,810
and so we see minus 3492 again
136

136

00:06:28,810  -->  00:06:32,400
and then after the removal, minus 22 is now at the root.
137

137

00:06:32,400  -->  00:06:34,310
So we get that with the peak.
138

138

00:06:34,310  -->  00:06:37,180
And that would be the next item
139

139

00:06:37,180  -->  00:06:38,790
with the highest priority.
140

140

00:06:38,790  -->  00:06:40,740
So now let's call poll.
141

141

00:06:40,740  -->  00:06:45,740
So we'll say, system dot out dot print line pq dot poll
142

142

00:06:49,880  -->  00:06:52,380
and let's peak at the queue after we've done that.
143

143

00:06:56,590  -->  00:07:01,060
So we'll run and we'll see that when we polled,
144

144

00:07:01,060  -->  00:07:03,930
minus 22 was returned and then when we peak
145

145

00:07:03,930  -->  00:07:05,100
we're getting zero.
146

146

00:07:05,100  -->  00:07:07,030
Poll and removed are the same thing
147

147

00:07:07,030  -->  00:07:10,290
so they both remove the highest priority item
148

148

00:07:10,290  -->  00:07:11,440
and return that.
149

149

00:07:11,440  -->  00:07:16,220
And so minus 22 gets returned and then zero
150

150

00:07:16,220  -->  00:07:17,640
will now be at the root of the heap
151

151

00:07:17,640  -->  00:07:19,780
because it's now the minimum value.
152

152

00:07:19,780  -->  00:07:21,830
Now if you wanted to, you can remove
153

153

00:07:21,830  -->  00:07:23,250
just some random number.
154

154

00:07:23,250  -->  00:07:28,250
So we'll say system dot out dot print line pq dot remove
155

155

00:07:28,910  -->  00:07:33,250
and we'll just remove 54, let's say.
156

156

00:07:33,250  -->  00:07:34,800
And now if we peak again
157

157

00:07:34,800  -->  00:07:37,000
we should still see zero at the top.
158

158

00:07:37,000  -->  00:07:42,000
So let's run and you'll see that here
159

159

00:07:43,220  -->  00:07:44,940
we got a true back.
160

160

00:07:44,940  -->  00:07:46,960
It doesn't return the object you removed
161

161

00:07:46,960  -->  00:07:49,950
because you're actually passing what you want to remove
162

162

00:07:49,950  -->  00:07:51,510
so it would kind of be redundant
163

163

00:07:51,510  -->  00:07:53,020
to return what you want to remove.
164

164

00:07:53,020  -->  00:07:55,960
Instead it says, yes, I successfully removed this.
165

165

00:07:55,960  -->  00:07:57,050
So if this was false,
166

166

00:07:57,050  -->  00:07:59,750
it would mean that it couldn't find this in the heap
167

167

00:07:59,750  -->  00:08:01,680
and zero is still at the root.
168

168

00:08:01,680  -->  00:08:05,520
And so for a final call here let's add another value
169

169

00:08:05,520  -->  00:08:06,560
and we'll add something
170

170

00:08:06,560  -->  00:08:08,130
that's higher priority than the root.
171

171

00:08:08,130  -->  00:08:11,470
So zero is the root, so we'll add another negative number.
172

172

00:08:11,470  -->  00:08:15,280
So we'll say, pq dot add and we'll just add minus one
173

173

00:08:17,220  -->  00:08:19,750
and then if we peak at the queue after doing that
174

174

00:08:19,750  -->  00:08:22,600
we should see minus one at the root.
175

175

00:08:22,600  -->  00:08:23,790
So let's run again
176

176

00:08:25,510  -->  00:08:28,400
and we do, we see minus one at the root.
177

177

00:08:28,400  -->  00:08:31,870
So the difference between poll and remove,
178

178

00:08:31,870  -->  00:08:33,400
when you pass it a value
179

179

00:08:33,400  -->  00:08:35,860
and in fact remove when you don't is,
180

180

00:08:35,860  -->  00:08:38,050
if you call remove without a value
181

181

00:08:38,050  -->  00:08:40,580
or you call poll, it always removes the root.
182

182

00:08:40,580  -->  00:08:42,640
If you pass it a specific value,
183

183

00:08:42,640  -->  00:08:43,980
then it doesn't remove the root
184

184

00:08:43,980  -->  00:08:45,830
instead it removes that value.
185

185

00:08:45,830  -->  00:08:47,940
Now if you wanted to build a priority queue
186

186

00:08:47,940  -->  00:08:50,370
using instances that aren't integers,
187

187

00:08:50,370  -->  00:08:51,730
of course that would be fine,
188

188

00:08:51,730  -->  00:08:55,010
as long as the class implements the comparable interface.
189

189

00:08:55,010  -->  00:08:57,870
So the priority queue can compare instances.
190

190

00:08:57,870  -->  00:08:59,940
You can also provide a comparator
191

191

00:08:59,940  -->  00:09:01,500
when you construct the queue.
192

192

00:09:01,500  -->  00:09:03,710
There is a version of the constructor
193

193

00:09:03,710  -->  00:09:05,580
that let's you pass a comparator.
194

194

00:09:05,580  -->  00:09:08,800
Now we can get the array from the queue
195

195

00:09:08,800  -->  00:09:11,210
and so the way that we do that is
196

196

00:09:11,210  -->  00:09:13,380
we would call the two array method.
197

197

00:09:13,380  -->  00:09:16,560
And so let's do that after we've removed 54,
198

198

00:09:16,560  -->  00:09:18,330
just to see what we get.
199

199

00:09:18,330  -->  00:09:22,620
So we'll say, object and we're gonna get an array,
200

200

00:09:22,620  -->  00:09:26,420
int equals pq dot two array
201

201

00:09:28,010  -->  00:09:32,423
and we'll say, for object num int
202

202

00:09:34,850  -->  00:09:37,680
system dot out dot print line num
203

203

00:09:37,680  -->  00:09:39,670
just to see what we get.
204

204

00:09:39,670  -->  00:09:40,763
So let's run that.
205

205

00:09:43,350  -->  00:09:44,770
And I guess that's not very helpful
206

206

00:09:44,770  -->  00:09:46,670
'cause we can't really see where it starts.
207

207

00:09:46,670  -->  00:09:51,670
So, I'm going to comment out all the other print lines
208

208

00:09:57,630  -->  00:09:59,430
so that we just see
209

209

00:09:59,430  -->  00:10:01,990
the array after we've removed 54.
210

210

00:10:01,990  -->  00:10:02,913
So let's run.
211

211

00:10:04,810  -->  00:10:08,155
And we have negative 3492, zero, minus 22,
212

212

00:10:08,155  -->  00:10:11,140
54, 25, 13, 43 and 429.
213

213

00:10:11,140  -->  00:10:13,810
So since I commented out all the prints,
214

214

00:10:13,810  -->  00:10:15,330
that's where we're actually removing things,
215

215

00:10:15,330  -->  00:10:18,900
so we're basically getting the entire heap
216

216

00:10:18,900  -->  00:10:20,200
after we've added the items.
217

217

00:10:20,200  -->  00:10:21,230
And you'll notice,
218

218

00:10:21,230  -->  00:10:23,380
if you remember how things are stored as an array.
219

219

00:10:23,380  -->  00:10:26,830
So we have minus 3492 and then zero
220

220

00:10:26,830  -->  00:10:28,840
and minus 22 as it's children
221

221

00:10:28,840  -->  00:10:31,840
and so this guy is less, remember this is an in-heap,
222

222

00:10:31,840  -->  00:10:35,160
he's less than zero and minus 22.
223

223

00:10:35,160  -->  00:10:38,117
And the zero's children would be 54 and 25
224

224

00:10:38,117  -->  00:10:40,690
and zero is less than both of those.
225

225

00:10:40,690  -->  00:10:44,300
And minus 22's children would be 13, 43 and 429
226

226

00:10:44,300  -->  00:10:47,510
and of course, minus 22 is less than both of those.
227

227

00:10:47,510  -->  00:10:51,640
Let me go up now and comment out the line of removing 54
228

228

00:10:51,640  -->  00:10:54,163
just so we can see 54 disappear.
229

229

00:10:55,070  -->  00:10:59,240
And if we run again we'll see that now 54 is gone
230

230

00:10:59,240  -->  00:11:01,910
and we got this true here from the print line.
231

231

00:11:01,910  -->  00:11:03,790
This class is pretty straight forward
232

232

00:11:03,790  -->  00:11:05,580
and know what a queue is already,
233

233

00:11:05,580  -->  00:11:07,640
even though this is a different type of queue.
234

234

00:11:07,640  -->  00:11:08,670
You know what a heap is.
235

235

00:11:08,670  -->  00:11:11,410
So it's just a matter of exploring your documentation.
236

236

00:11:11,410  -->  00:11:13,780
But if you do need a priority queue in Java
237

237

00:11:13,780  -->  00:11:17,190
you can take a look at this implementation in the JDK.
238

238

00:11:17,190  -->  00:11:20,270
Just remember that it's a min-heap.
239

239

00:11:20,270  -->  00:11:21,510
Now you might be thinking,
240

240

00:11:21,510  -->  00:11:23,310
well what if I need a max-heap?
241

241

00:11:23,310  -->  00:11:25,270
Well, don't forget you can provide
242

242

00:11:25,270  -->  00:11:26,770
a comparator to the class.
243

243

00:11:26,770  -->  00:11:29,100
So, you could provide a comparator
244

244

00:11:29,100  -->  00:11:31,480
that will get you the behaviour you want
245

245

00:11:31,480  -->  00:11:34,470
and builds a max-heap instead of a min-heap.
246

246

00:11:34,470  -->  00:11:36,600
And so you'd need a comparator
247

247

00:11:36,600  -->  00:11:39,030
that will look at the two values
248

248

00:11:39,030  -->  00:11:42,100
and whenever you have one value greater than the other
249

249

00:11:42,100  -->  00:11:44,590
you in fact want to return that that value's less.
250

250

00:11:44,590  -->  00:11:46,330
You'd want to flip things around
251

251

00:11:46,330  -->  00:11:49,650
so that this class would actually be building a max-heap.
252

252

00:11:49,650  -->  00:11:51,750
So if you want a max-heap, you're gonna have to
253

253

00:11:51,750  -->  00:11:55,290
provide a comparator to the class to get that behaviour.
254

254

00:11:55,290  -->  00:11:57,010 line:15% 
Alright, that's it for heaps.
255

255

00:11:57,010  -->  00:11:58,310 line:15% 
See you in the next video.
