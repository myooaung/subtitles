WEBVTT
ï»¿1
00:00:00.000 --> 00:00:14.840
variables are a facility found in all programming languages.

2
00:00:14.840 --> 00:00:22.230
They allow you to store information required by your programs and to refer back to that

3
00:00:22.230 --> 00:00:24.750
information and modify it at any time.

4
00:00:24.750 --> 00:00:27.470
In this section,

5
00:00:27.470 --> 00:00:33.550
we'll look at how variables are used in V B A and in this first video,

6
00:00:33.550 --> 00:00:34.190
well,

7
00:00:34.190 --> 00:00:38.930
look a declaring and populating variables in other words,

8
00:00:38.930 --> 00:00:40.600
place in data inside them.

9
00:00:40.600 --> 00:00:47.610
To get some practice on,

10
00:00:47.610 --> 00:00:51.170
working with variables will create a macro in the word BB.

11
00:00:51.170 --> 00:00:52.450
A train in template.

12
00:00:52.450 --> 00:00:58.880
Let's go into the training folder and to open the word BB a training templates.

13
00:00:58.880 --> 00:01:01.050
We right click and choose open.

14
00:01:01.050 --> 00:01:12.430
Then that's going to develop visual basic and into the Section three modules s 03 Variables

15
00:01:12.430 --> 00:01:13.250
and constants.

16
00:01:13.250 --> 00:01:17.090
Unless creating on macron,

17
00:01:17.090 --> 00:01:23.550
we'll use the prefix s 03 clearly one A,

18
00:01:23.550 --> 00:01:31.580
and we'll call it a variable basics in V.

19
00:01:31.580 --> 00:01:31.790
B.

20
00:01:31.790 --> 00:01:32.050
A.

21
00:01:32.050 --> 00:01:35.150
You can use variables distal two types of elements.

22
00:01:35.150 --> 00:01:37.040
First of all,

23
00:01:37.040 --> 00:01:41.710
regular data such as text numbers,

24
00:01:41.710 --> 00:01:42.550
dates,

25
00:01:42.550 --> 00:01:43.750
etcetera.

26
00:01:43.750 --> 00:01:50.140
But you can also use variables just all references to all of the word objects that you

27
00:01:50.140 --> 00:01:51.390
intend to manipulate.

28
00:01:51.390 --> 00:01:54.650
You can store references to documents,

29
00:01:54.650 --> 00:01:56.150
paragraphs,

30
00:01:56.150 --> 00:02:01.350
tables numbered lists bulleted lists.

31
00:02:01.350 --> 00:02:07.550
Anything that you plan to manipulate will do things well within your code.

32
00:02:07.550 --> 00:02:17.990
So what we'll do here is will practice declaring on populating both data variables and

33
00:02:17.990 --> 00:02:19.250
object variables.

34
00:02:19.250 --> 00:02:21.000
First of all,

35
00:02:21.000 --> 00:02:28.450
let's look at declaring variables to declare a variable.

36
00:02:28.450 --> 00:02:36.550
Allows the V B a compiler to know how much memory toe allocate floor that type of data.

37
00:02:36.550 --> 00:02:40.450
It also tells the compiler how the data is to be treated,

38
00:02:40.450 --> 00:02:43.570
whether it's to be treated like text well,

39
00:02:43.570 --> 00:02:45.570
like a numeric value well,

40
00:02:45.570 --> 00:02:48.980
like a date to declare a variable used.

41
00:02:48.980 --> 00:02:50.050
The key word did,

42
00:02:50.050 --> 00:02:51.650
as in dimension,

43
00:02:51.650 --> 00:02:54.750
and then you create a name for the variable.

44
00:02:54.750 --> 00:03:01.550
The restrictions are name in variables of the same as the restriction on name in modules.

45
00:03:01.550 --> 00:03:06.750
The name has to consist of letters and numbers and the underscore character,

46
00:03:06.750 --> 00:03:09.750
but it can't begin with a number,

47
00:03:09.750 --> 00:03:13.720
and obviously the name cannot contain any spaces.

48
00:03:13.720 --> 00:03:16.050
In the interest of clarity,

49
00:03:16.050 --> 00:03:23.010
it's useful to use a prefix with the name of variables to indicate the type of data that

50
00:03:23.010 --> 00:03:24.350
the variable contains.

51
00:03:24.350 --> 00:03:26.300
In our example,

52
00:03:26.300 --> 00:03:28.750
let's say that we're beginning a macro,

53
00:03:28.750 --> 00:03:36.150
which requires a new document to be created and we want to ask the user to enter a title

54
00:03:36.150 --> 00:03:41.350
which will then insert as the first paragraph within that new document.

55
00:03:41.350 --> 00:03:46.450
When the user enters the title Wiccan Stories in a variable,

56
00:03:46.450 --> 00:03:50.800
the title will obviously be text Onda VB,

57
00:03:50.800 --> 00:03:53.050
a data type which corresponds to text,

58
00:03:53.050 --> 00:03:54.400
is strained.

59
00:03:54.400 --> 00:04:02.050
A popular prefix to indicate that a variable is to contain a string is SDO,

60
00:04:02.050 --> 00:04:06.050
so we'll call this variable str title.

61
00:04:06.050 --> 00:04:12.490
Next we used the key would as and as soon as I type of space,

62
00:04:12.490 --> 00:04:18.920
you'll see that intelli sense displays all the different types of element which can be

63
00:04:18.920 --> 00:04:20.110
stored in a variable.

64
00:04:20.110 --> 00:04:27.020
The reason that this list is so long it's because it contains a lot of word objects as well

65
00:04:27.020 --> 00:04:28.100
as data types.

66
00:04:28.100 --> 00:04:30.240
So for this variable,

67
00:04:30.240 --> 00:04:34.890
we need strange having type str String is highlighted,

68
00:04:34.890 --> 00:04:37.650
so I just press the tab key to insert it.

69
00:04:37.650 --> 00:04:42.850
Declaring object variables is an identical procedure.

70
00:04:42.850 --> 00:04:45.750
I tied him again.

71
00:04:45.750 --> 00:04:47.060
I can use it prefixed.

72
00:04:47.060 --> 00:04:50.250
So now I'm creating a variable toe hold a reference to a document.

73
00:04:50.250 --> 00:04:52.550
Don't use the prefix DNC.

74
00:04:52.550 --> 00:04:54.680
Let's call with D O C.

75
00:04:54.680 --> 00:04:59.310
New as and as soon as I start to type document.

76
00:04:59.310 --> 00:05:00.130
It's highlighted,

77
00:05:00.130 --> 00:05:02.250
so I just press the tab key to insert it.

78
00:05:02.250 --> 00:05:06.650
Now let's look assigning values to our variables.

79
00:05:06.650 --> 00:05:12.220
First of all,

80
00:05:12.220 --> 00:05:14.400
will assign a value to our string variable.

81
00:05:14.400 --> 00:05:15.850
To do this,

82
00:05:15.850 --> 00:05:23.250
we used the key word let then the name of the variable and then the Assignment Operator,

83
00:05:23.250 --> 00:05:27.290
which is an equal sign on the right of the equal sign.

84
00:05:27.290 --> 00:05:32.750
We now have to put any statement which the compiler will evaluate as a string.

85
00:05:32.750 --> 00:05:37.280
So obviously the simplest thing we could do is to put a literal value,

86
00:05:37.280 --> 00:05:38.550
for example,

87
00:05:38.550 --> 00:05:44.310
and obviously this is a strength that goes in double quotes.

88
00:05:44.310 --> 00:05:46.970
This doesn't give us very much flexibility,

89
00:05:46.970 --> 00:05:47.450
however,

90
00:05:47.450 --> 00:05:49.150
so let's undo that.

91
00:05:49.150 --> 00:05:53.250
And instead we want the user to enter the title.

92
00:05:53.250 --> 00:05:56.950
Now we've encountered the MSG box function,

93
00:05:56.950 --> 00:05:58.950
which displays a message.

94
00:05:58.950 --> 00:06:03.200
Its partner in crime is the input bought sanction,

95
00:06:03.200 --> 00:06:09.050
which displays a dialogue containing a text field into which the user can enter some data.

96
00:06:09.050 --> 00:06:17.110
So it's like input box open brackets and then word promises.

97
00:06:17.110 --> 00:06:20.950
By displaying the parameters required by the input box function.

98
00:06:20.950 --> 00:06:22.750
You'll also notice,

99
00:06:22.750 --> 00:06:24.410
after all the parameters,

100
00:06:24.410 --> 00:06:26.620
the words as string.

101
00:06:26.620 --> 00:06:30.550
This indicates the type of data returned by the function.

102
00:06:30.550 --> 00:06:31.410
So,

103
00:06:31.410 --> 00:06:32.030
in other words,

104
00:06:32.030 --> 00:06:39.240
to function returns a string which consists of the data entered by the user in the text

105
00:06:39.240 --> 00:06:39.550
field.

106
00:06:39.550 --> 00:06:46.050
The only parameter that's required hence the only parameter which is not in square brackets

107
00:06:46.050 --> 00:06:47.650
is the prompt.

108
00:06:47.650 --> 00:06:48.810
The message,

109
00:06:48.810 --> 00:06:54.950
which is displayed above the text field instructing the user what we require them to enter

110
00:06:54.950 --> 00:06:54.950
.

111
00:06:54.950 --> 00:06:57.600
So we'll simply say,

112
00:06:57.600 --> 00:06:58.990
Please enter title.

113
00:06:58.990 --> 00:07:05.350
I haven't got the title.

114
00:07:05.350 --> 00:07:11.850
We now want to create a new document and put a reference to it in our document variable.

115
00:07:11.850 --> 00:07:14.920
To populate an object variable,

116
00:07:14.920 --> 00:07:21.750
you use the keyword set in contrast to let which is used or data variables.

117
00:07:21.750 --> 00:07:27.450
So it's set lock on you and again the assignment of razor equal,

118
00:07:27.450 --> 00:07:34.150
and we now have to put any statement which refers to a document.

119
00:07:34.150 --> 00:07:39.050
The statement that creates the document is such a statement.

120
00:07:39.050 --> 00:07:44.650
It returns a document object which consists of the document you have just created.

121
00:07:44.650 --> 00:07:51.060
So it's legitimate to place that statement after the Assignment Operator in V.

122
00:07:51.060 --> 00:07:51.270
B.

123
00:07:51.270 --> 00:07:51.650
A.

124
00:07:51.650 --> 00:07:53.600
To create a new object,

125
00:07:53.600 --> 00:07:59.120
you used the object collection to its that object belongs so in the case of a document.

126
00:07:59.120 --> 00:08:08.130
We need the documents collection on the function or method which actually creates the new

127
00:08:08.130 --> 00:08:09.950
object is add.

128
00:08:09.950 --> 00:08:14.450
Although we don't need any parameters,

129
00:08:14.450 --> 00:08:19.380
I'll put in the opening parenthesis so that we can have a look at the tool tip which is

130
00:08:19.380 --> 00:08:20.550
displayed for us.

131
00:08:20.550 --> 00:08:24.520
What I wanted to show you is that after all the parameters,

132
00:08:24.520 --> 00:08:27.450
the optional parameters in this case which we don't need,

133
00:08:27.450 --> 00:08:30.550
you'll see the words as document.

134
00:08:30.550 --> 00:08:33.540
This indicates that the ad method or function,

135
00:08:33.540 --> 00:08:36.050
returns a document object.

136
00:08:36.050 --> 00:08:42.150
This is why it's legitimate to use the statement in this position because of the rule is

137
00:08:42.150 --> 00:08:43.540
after the assignment.

138
00:08:43.540 --> 00:08:44.250
Operator,

139
00:08:44.250 --> 00:08:48.950
you have to come up with this statement which produces the type of data.

140
00:08:48.950 --> 00:08:51.250
The corresponds to that variable.

141
00:08:51.250 --> 00:08:53.510
So we have a document variable.

142
00:08:53.510 --> 00:08:55.450
We've declared it as document.

143
00:08:55.450 --> 00:09:01.450
Hence we must come up with a statement would refers to or returns the document object.

144
00:09:01.450 --> 00:09:07.270
So on this occasion we simply want to create a standard document based on the default

145
00:09:07.270 --> 00:09:08.410
normal template.

146
00:09:08.410 --> 00:09:15.200
So we don't need any parameters so we can just delete the parenthesis is the final thing we

147
00:09:15.200 --> 00:09:22.280
want to do then is to insert the title that the user has entered into our new document To

148
00:09:22.280 --> 00:09:23.750
refer to our new document,

149
00:09:23.750 --> 00:09:26.450
we now simply use the name of our variable.

150
00:09:26.450 --> 00:09:37.540
So it's doc new and then we can use the useful property content equals str titled and to

151
00:09:37.540 --> 00:09:38.850
make it into a paragraph.

152
00:09:38.850 --> 00:09:46.390
Let's tag on using the concatenation operator and percent the carriage return and there's a

153
00:09:46.390 --> 00:09:48.260
special V Be a constant,

154
00:09:48.260 --> 00:09:50.350
which stands for carriage return,

155
00:09:50.350 --> 00:09:52.650
which is V B C R.

156
00:09:52.650 --> 00:09:54.620
And that's it.

157
00:09:54.620 --> 00:10:03.440
So let's say and let's test our macron So up comes out input box.

158
00:10:03.440 --> 00:10:05.850
There's our prompt Please enter title.

159
00:10:05.850 --> 00:10:10.990
I'm just going to answer annual report when I click.

160
00:10:10.990 --> 00:10:11.550
OK,

161
00:10:11.550 --> 00:10:18.170
my new document is created annual reporters inserted.

162
00:10:18.170 --> 00:10:20.150
If I show hidden characters,

163
00:10:20.150 --> 00:10:23.810
you'll see I've got my return at the end.

164
00:10:23.810 --> 00:10:30.010
So let's just close that and let's save our changes.

165
00:10:30.010 --> 00:10:34.600
Unlike returns of the visual,

166
00:10:34.600 --> 00:10:41.350
basic editor just like to make a couple of points regarding the Declaration of Variables

167
00:10:41.350 --> 00:10:43.510
and the assignment of values.

168
00:10:43.510 --> 00:10:46.250
Two Variables festival,

169
00:10:46.250 --> 00:10:49.250
the contrast between let and set.

170
00:10:49.250 --> 00:10:56.740
So we use let when we assign a value to a data variable and we use set when we assign a

171
00:10:56.740 --> 00:10:58.350
value to object.

172
00:10:58.350 --> 00:10:58.890
Variable,

173
00:10:58.890 --> 00:11:00.150
however,

174
00:11:00.150 --> 00:11:03.550
whereas the set keyword has to be used,

175
00:11:03.550 --> 00:11:05.400
let is optional.

176
00:11:05.400 --> 00:11:13.410
So you'll probably never see this in any code that you see in in books or in code that new

177
00:11:13.410 --> 00:11:13.410
,

178
00:11:13.410 --> 00:11:13.660
uh,

179
00:11:13.660 --> 00:11:15.590
encounter on the Web,

180
00:11:15.590 --> 00:11:16.390
for example,

181
00:11:16.390 --> 00:11:17.980
because it's optional.

182
00:11:17.980 --> 00:11:19.550
No one bothers to use it.

183
00:11:19.550 --> 00:11:20.820
However,

184
00:11:20.820 --> 00:11:25.490
I will point out this contrast from time to time just to remind you that there is this

185
00:11:25.490 --> 00:11:31.470
distinction between the way your sign values data variables on the way that you assign

186
00:11:31.470 --> 00:11:33.550
values to object valuables.

187
00:11:33.550 --> 00:11:41.450
The second thing I'd like to point out is that variable declaration itself is an optional

188
00:11:41.450 --> 00:11:42.090
step.

189
00:11:42.090 --> 00:11:43.270
You don't have to do it,

190
00:11:43.270 --> 00:11:45.400
but it is highly recommended,

191
00:11:45.400 --> 00:11:47.730
and I'll give you an example of way.

192
00:11:47.730 --> 00:11:51.330
It's a very useful if you decide,

193
00:11:51.330 --> 00:11:52.810
as you should do that,

194
00:11:52.810 --> 00:11:54.950
you are going to declare all your variables.

195
00:11:54.950 --> 00:12:01.390
Then you should use this declaration option explicit at the top of every logical,

196
00:12:01.390 --> 00:12:03.920
and I'll give you an example.

197
00:12:03.920 --> 00:12:04.250
But,

198
00:12:04.250 --> 00:12:04.470
boy,

199
00:12:04.470 --> 00:12:09.150
it's useful to do this if I take out option explicit.

200
00:12:09.150 --> 00:12:12.750
The step of variable declaration is now optional,

201
00:12:12.750 --> 00:12:19.450
and one consequence of this is that if I make a typo when I enter the name of the variable

202
00:12:19.450 --> 00:12:19.450
.

203
00:12:19.450 --> 00:12:21.200
So let's say here,

204
00:12:21.200 --> 00:12:26.810
what's next to the are the tea is next to the are so let's type of tea instead of an hour.

205
00:12:26.810 --> 00:12:28.450
So mistyped the title.

206
00:12:28.450 --> 00:12:37.850
Let's run our macro one small and we click OK,

207
00:12:37.850 --> 00:12:41.150
and when I look at the outputs,

208
00:12:41.150 --> 00:12:43.550
I have my knee document.

209
00:12:43.550 --> 00:12:48.350
But the title that I answered is not in the new documents,

210
00:12:48.350 --> 00:12:52.300
so obviously it won't take along in such a simple example.

211
00:12:52.300 --> 00:12:55.450
It won't take me long to track down what the problem is.

212
00:12:55.450 --> 00:12:59.960
There are times where the fact that there is an error stays hidden.

213
00:12:59.960 --> 00:13:05.550
You don't even realize that there is an error there as a consequence of this simple mistake

214
00:13:05.550 --> 00:13:08.910
that you've made in miss type in the name of the variable.

215
00:13:08.910 --> 00:13:13.750
So let's look at what happens when we put back option explicit.

216
00:13:13.750 --> 00:13:21.250
As soon as we try to run the macro,

217
00:13:21.250 --> 00:13:24.810
it doesn't even compile,

218
00:13:24.810 --> 00:13:26.190
so it doesn't run.

219
00:13:26.190 --> 00:13:30.250
It tells us this variable hasn't been defined,

220
00:13:30.250 --> 00:13:36.600
and obviously it's not going to take us long now to know that we've simply mistyped the

221
00:13:36.600 --> 00:13:37.950
variable that we declared.

222
00:13:37.950 --> 00:13:43.950
You don't have to type option explicit yourself.

223
00:13:43.950 --> 00:13:50.520
You can have it automatically inserted at the top of every module on what determines this

224
00:13:50.520 --> 00:13:52.750
is the setting in tools.

225
00:13:52.750 --> 00:13:56.750
Options require variable declaration,

226
00:13:56.750 --> 00:14:01.660
so as long as that is switched on every time you create a new model.

227
00:14:01.660 --> 00:14:04.150
So let's just insert module.

228
00:14:04.150 --> 00:14:07.150
You'll notice that option Explicit goes in there,

229
00:14:07.150 --> 00:14:10.850
and it then means that you have enforced variable declaration.

230
00:14:10.850 --> 00:14:12.210
And as we've seen,

231
00:14:12.210 --> 00:14:13.050
it's very useful.

232
00:14:13.050 --> 00:14:15.450
Let's just remove this.

233
00:14:15.450 --> 00:14:22.560
So now that we've had a look at the basics of declaring variables and assigning values

234
00:14:22.560 --> 00:14:24.490
student in the next video,

235
00:14:24.490 --> 00:14:29.590
we'll move on to look more closely at the different types of data that you can store in

236
00:14:29.590 --> 00:14:30.350
variables.

237
00:14:30.350 --> 00:14:44.510
Although variable declaration is not essential in V B.

238
00:14:44.510 --> 00:14:44.750
A,

239
00:14:44.750 --> 00:14:48.550
it is good practice to use the option Expressive declaration.

240
00:14:48.550 --> 00:14:54.940
To make it required to declare a variable used,

241
00:14:54.940 --> 00:15:03.190
the keywords dim and as to assign a value to a data variable,

242
00:15:03.190 --> 00:15:05.410
use the optional keyword,

243
00:15:05.410 --> 00:15:08.460
let followed by the name of the variable,

244
00:15:08.460 --> 00:15:13.190
followed by any statement which evaluates to the correct data.

245
00:15:13.190 --> 00:15:18.830
Time to assign a value to an object.

246
00:15:18.830 --> 00:15:22.650
Variable used the obligatory keyword set,

247
00:15:22.650 --> 00:15:24.950
followed by the name of the variable,

248
00:15:24.950 --> 00:15:29.600
followed by any statement which evaluates to the correct type of object

