WEBVTT
ï»¿1
00:00:00.000 --> 00:00:14.510
although variable declaration is not compulsory in DB A,

2
00:00:14.510 --> 00:00:20.270
it's definitely recommended that you declare Alvar Ari a bles that you intend to use,

3
00:00:20.270 --> 00:00:24.280
as well as the type of data that you intend to use them for.

4
00:00:24.280 --> 00:00:31.370
Declaring the data type of a variable leads to clarity in your code and helps to avoid

5
00:00:31.370 --> 00:00:31.960
errors.

6
00:00:31.960 --> 00:00:34.040
In this video.

7
00:00:34.040 --> 00:00:38.420
We'll talk about the different data types that VB recognizes,

8
00:00:38.420 --> 00:00:48.000
so let's go into the Exercises folder and in the section three folder Variables and

9
00:00:48.000 --> 00:00:48.710
Constants.

10
00:00:48.710 --> 00:00:51.450
You'll find a file called data Types.

11
00:00:51.450 --> 00:00:55.050
So here we have a table,

12
00:00:55.050 --> 00:00:56.920
which just gives a breakdown.

13
00:00:56.920 --> 00:01:02.710
But the most common types of data that you store in variables in the top part of the table

14
00:01:02.710 --> 00:01:02.710
.

15
00:01:02.710 --> 00:01:05.750
We have primitive data such as text and numbers,

16
00:01:05.750 --> 00:01:11.250
and in the bottom section we have some of the most popular word objects that you tend to

17
00:01:11.250 --> 00:01:14.150
store references to in your variables,

18
00:01:14.150 --> 00:01:16.510
as you can imagine.

19
00:01:16.510 --> 00:01:18.850
Since word is essentially a word processor,

20
00:01:18.850 --> 00:01:25.160
the string data type is probably the most frequently used and in this course will be using

21
00:01:25.160 --> 00:01:26.650
the prefix str.

22
00:01:26.650 --> 00:01:29.510
Every time we declare a string variable.

23
00:01:29.510 --> 00:01:33.750
A string refers to an indeterminate number of characters,

24
00:01:33.750 --> 00:01:39.460
so any combination of the text that you see on this page could returned a string.

25
00:01:39.460 --> 00:01:42.150
Then we have whole numbers,

26
00:01:42.150 --> 00:01:43.990
integer and loan,

27
00:01:43.990 --> 00:01:47.450
and the difference here is the range.

28
00:01:47.450 --> 00:01:56.450
So the interview data type reverse to a fairly small range from minus approximately 32,002

29
00:01:56.450 --> 00:02:05.710
positive 32,000 and some change and then the long goes from approximately minus two billion

30
00:02:05.710 --> 00:02:08.650
to approximately positive two billion.

31
00:02:08.650 --> 00:02:10.950
Then we have single and double.

32
00:02:10.950 --> 00:02:14.050
These are the floating point numbers,

33
00:02:14.050 --> 00:02:19.520
which allowed numbers after the decimal point and the main difference between them.

34
00:02:19.520 --> 00:02:23.350
They're both suitable for holding very large numbers.

35
00:02:23.350 --> 00:02:29.350
The main difference between them for most people is the accuracy that you require.

36
00:02:29.350 --> 00:02:31.650
So with single data type,

37
00:02:31.650 --> 00:02:36.060
you have six decimal places of accuracy with the double.

38
00:02:36.060 --> 00:02:43.570
You can have up to 14 numbers after the decimal point for monetary values with then got

39
00:02:43.570 --> 00:02:44.250
currency,

40
00:02:44.250 --> 00:02:52.350
so from minus 900 trillion up to positive 900 trillion or thereabouts.

41
00:02:52.350 --> 00:02:57.250
And it allows up to four numbers after the decimal point of accuracy.

42
00:02:57.250 --> 00:02:58.710
Although of course,

43
00:02:58.710 --> 00:03:03.550
monetary values only normally display two numbers after the decimal point.

44
00:03:03.550 --> 00:03:06.450
In order to achieve accurate calculations,

45
00:03:06.450 --> 00:03:11.350
the currency type allows up to four numbers after the decimal point.

46
00:03:11.350 --> 00:03:13.570
Then we have the date type,

47
00:03:13.570 --> 00:03:16.250
which is used for dates and times,

48
00:03:16.250 --> 00:03:18.500
and then we have 1,000,000,000.

49
00:03:18.500 --> 00:03:22.350
And if you haven't come across the 1,000,000,000 data type before,

50
00:03:22.350 --> 00:03:25.850
it basically stores one of two values.

51
00:03:25.850 --> 00:03:31.350
True or false if you don't declare variables.

52
00:03:31.350 --> 00:03:38.720
The default data type in V B A is called variant and are occasions where you will

53
00:03:38.720 --> 00:03:40.550
explicitly declare a variant.

54
00:03:40.550 --> 00:03:41.970
Basically,

55
00:03:41.970 --> 00:03:46.750
a variant is a rapper mechanism rather than a data type,

56
00:03:46.750 --> 00:03:54.440
which enables Vehbi eh to work out and keep track of the underlying data type and convert

57
00:03:54.440 --> 00:03:57.850
the values in the variable appropriately.

58
00:03:57.850 --> 00:04:05.240
So best practices not to use the variant unless the situation that you're working with the

59
00:04:05.240 --> 00:04:08.450
type of data you're working with is unknown or unpredictable.

60
00:04:08.450 --> 00:04:15.310
Stay away from the variant data type and always explicitly type your own variables by using

61
00:04:15.310 --> 00:04:16.650
the as keyword.

62
00:04:16.650 --> 00:04:23.050
Another thing to bear in mind when working with variants is that because VB A has more work

63
00:04:23.050 --> 00:04:23.650
to do,

64
00:04:23.650 --> 00:04:29.350
variants take more memory and also make programs slightly slower.

65
00:04:29.350 --> 00:04:39.340
We had a brief look in the last video that declaring variables for use with objects such as

66
00:04:39.340 --> 00:04:43.600
document and here we've got a run down of some of the other objects that you very

67
00:04:43.600 --> 00:04:50.050
frequently used in this way and store references to in your variables and just remind you

68
00:04:50.050 --> 00:04:52.950
when you're assigning values to variables,

69
00:04:52.950 --> 00:04:54.850
you used the key word let,

70
00:04:54.850 --> 00:04:59.650
which is optional when you're talking about data variables.

71
00:04:59.650 --> 00:05:01.630
So because it's optional,

72
00:05:01.630 --> 00:05:03.050
no one tends to use it,

73
00:05:03.050 --> 00:05:09.590
and he used the keyword set when assigning values to object.

74
00:05:09.590 --> 00:05:10.480
Variables.

75
00:05:10.480 --> 00:05:11.200
Set,

76
00:05:11.200 --> 00:05:11.850
however,

77
00:05:11.850 --> 00:05:13.450
is obligatory.

78
00:05:13.450 --> 00:05:20.460
In this section I will be using let just to remind you that let is as it were,

79
00:05:20.460 --> 00:05:24.890
your positions set and just to get you thinking about which of the two key words is

80
00:05:24.890 --> 00:05:27.850
appropriate that the variable that's being declared.

81
00:05:27.850 --> 00:05:35.230
So what we'll do now is just to write a macro that allows us to play with a couple of these

82
00:05:35.230 --> 00:05:36.650
different data types.

83
00:05:36.650 --> 00:05:41.450
I will store the macro in the word VB a train in template,

84
00:05:41.450 --> 00:05:44.250
but we don't have to open it directly.

85
00:05:44.250 --> 00:05:46.630
All we need to do is to attach it,

86
00:05:46.630 --> 00:05:49.090
attached the template to this document,

87
00:05:49.090 --> 00:05:55.150
and we can then access the modules in the template via this document,

88
00:05:55.150 --> 00:05:56.460
to do that,

89
00:05:56.460 --> 00:05:57.750
we go across the developer,

90
00:05:57.750 --> 00:06:02.650
click on document templates and then attach.

91
00:06:02.650 --> 00:06:06.600
Then we work our way to the Exercises folder,

92
00:06:06.600 --> 00:06:07.530
which in my case,

93
00:06:07.530 --> 00:06:08.450
is on the desktop.

94
00:06:08.450 --> 00:06:16.910
And here at the bottom you'll find the word VB a train in template once that's been

95
00:06:16.910 --> 00:06:17.640
attached.

96
00:06:17.640 --> 00:06:20.220
If we go across to the visual basic editor,

97
00:06:20.220 --> 00:06:25.660
you'll find that all of the modules in that template and now accessible and we can write

98
00:06:25.660 --> 00:06:27.550
Macron's directly into the template.

99
00:06:27.550 --> 00:06:29.400
So here's the micro,

100
00:06:29.400 --> 00:06:31.250
he wrote in the last video.

101
00:06:31.250 --> 00:06:33.050
Next they'll do another one,

102
00:06:33.050 --> 00:06:39.550
so it's best 030 to micro A.

103
00:06:39.550 --> 00:06:42.250
I will call it data types,

104
00:06:42.250 --> 00:06:47.550
so we'll begin by declaring a few variables.

105
00:06:47.550 --> 00:07:07.710
So let's say Tim str title Strange Tim int words as integer Tim LNG characters or cars as

106
00:07:07.710 --> 00:07:23.890
long them sng average a single on dim LNG average as double.

107
00:07:23.890 --> 00:07:33.550
And then let's define a couple of object variables so we'll have them d o.

108
00:07:33.550 --> 00:07:34.250
C.

109
00:07:34.250 --> 00:07:36.250
As documents.

110
00:07:36.250 --> 00:07:40.650
Daniel Tvl as table.

111
00:07:40.650 --> 00:07:46.050
So now let's populate these variables.

112
00:07:46.050 --> 00:07:52.650
So we'll say that str title will be the title at the top of this document,

113
00:07:52.650 --> 00:07:57.050
which we can pick up by looking at the first paragraph of the document.

114
00:07:57.050 --> 00:08:00.760
So for that reason,

115
00:08:00.760 --> 00:08:03.550
we'll need to populate our document Variable first,

116
00:08:03.550 --> 00:08:06.650
because it's an object we use set,

117
00:08:06.650 --> 00:08:12.850
do you see equal to And we could use active documents.

118
00:08:12.850 --> 00:08:13.600
Well,

119
00:08:13.600 --> 00:08:17.250
we could refer to the document by name to refer to the document.

120
00:08:17.250 --> 00:08:17.840
My name.

121
00:08:17.840 --> 00:08:22.450
We would say documents and then in brackets and quotes,

122
00:08:22.450 --> 00:08:24.550
we would put the name of the document.

123
00:08:24.550 --> 00:08:27.650
So I'm just gonna go back to the desktop,

124
00:08:27.650 --> 00:08:30.550
just copy the name of the document.

125
00:08:30.550 --> 00:08:39.790
And now we can look inside D,

126
00:08:39.790 --> 00:08:39.880
O.

127
00:08:39.880 --> 00:08:45.150
C or Doc because that variable name Mary first specifically to that document.

128
00:08:45.150 --> 00:08:49.190
So we all now use let's as a settle where it's optional.

129
00:08:49.190 --> 00:08:53.490
I'm gonna keep using it during this section just to highlight the contrast between let and

130
00:08:53.490 --> 00:08:58.490
set the str title equals stock,

131
00:08:58.490 --> 00:09:02.810
not paragraphs one which means the first paragraph,

132
00:09:02.810 --> 00:09:03.450
of course.

133
00:09:03.450 --> 00:09:06.500
And then the paragraph is an object.

134
00:09:06.500 --> 00:09:09.010
It's not actually a string and of course,

135
00:09:09.010 --> 00:09:10.880
we're populating a string variable,

136
00:09:10.880 --> 00:09:12.110
not an object variable.

137
00:09:12.110 --> 00:09:14.770
So you've got to drill down inside the paragraph,

138
00:09:14.770 --> 00:09:20.720
object to find the string which represents the text inside it on the way to do that is to

139
00:09:20.720 --> 00:09:20.940
say,

140
00:09:20.940 --> 00:09:22.020
Don't range,

141
00:09:22.020 --> 00:09:22.950
not texts.

142
00:09:22.950 --> 00:09:28.150
Then let's populate our words and characters.

143
00:09:28.150 --> 00:09:30.950
So we're still on data variables here.

144
00:09:30.950 --> 00:09:34.950
So it's gonna be let again into words,

145
00:09:34.950 --> 00:09:36.850
and we're looking inside,

146
00:09:36.850 --> 00:09:37.450
Doc.

147
00:09:37.450 --> 00:09:47.360
No words don't count on the dot count property is how you actually pick up the number of

148
00:09:47.360 --> 00:09:49.680
items in a collection.

149
00:09:49.680 --> 00:09:53.350
So we've got the words collection and not Count says how many there are.

150
00:09:53.350 --> 00:10:05.870
We do exactly the same four characters Let LNG cars the call Doc Doc characters count and

151
00:10:05.870 --> 00:10:07.050
now the average.

152
00:10:07.050 --> 00:10:14.070
So we've defined SNG average and LNG average really to highlight the difference in

153
00:10:14.070 --> 00:10:16.910
precision between single and double.

154
00:10:16.910 --> 00:10:28.760
So let SNG average equal LNG cars divided by into words,

155
00:10:28.760 --> 00:10:31.650
and that will effectively give us the average word length.

156
00:10:31.650 --> 00:10:38.630
Then I can just copy that line and change that to D.

157
00:10:38.630 --> 00:10:38.800
B.

158
00:10:38.800 --> 00:10:39.200
L.

159
00:10:39.200 --> 00:10:41.660
So you got the same calculation.

160
00:10:41.660 --> 00:10:48.400
But it will be interesting to look at the result that we end up in these two variables and

161
00:10:48.400 --> 00:10:49.210
then finally,

162
00:10:49.210 --> 00:10:50.750
let's populate our table.

163
00:10:50.750 --> 00:10:54.350
So you back now to a word object.

164
00:10:54.350 --> 00:11:03.250
So it's set tbl equal to Dr Tables one because,

165
00:11:03.250 --> 00:11:03.660
of course,

166
00:11:03.660 --> 00:11:05.150
we know there is only one table,

167
00:11:05.150 --> 00:11:11.450
unless just a couple of extra variables to actually hold a number of rows and columns.

168
00:11:11.450 --> 00:11:22.850
So dim int rose as Inter joe them in coals as indigent.

169
00:11:22.850 --> 00:11:24.160
So,

170
00:11:24.160 --> 00:11:26.860
having populated our table variable,

171
00:11:26.860 --> 00:11:31.150
we can now populate the two data variables that go with the table.

172
00:11:31.150 --> 00:11:40.250
So let int rose equal Tvl don't rose,

173
00:11:40.250 --> 00:11:48.720
not count flit into Cole's Bqool Tbl columns that counts,

174
00:11:48.720 --> 00:11:54.060
and that's pretty much it.

