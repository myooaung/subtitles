1
00:00:00,000 --> 00:00:12,250
In the last video,

2
00:00:12,250 --> 00:00:15,710
I mentioned that if you call a function or subroutine,

3
00:00:15,710 --> 00:00:17,590
which has arguments defined,

4
00:00:17,590 --> 00:00:20,740
you need to supply a value for each of those arguments.

5
00:00:20,740 --> 00:00:23,270
As is often the case in program in,

6
00:00:23,270 --> 00:00:25,130
this is only partially true.

7
00:00:25,130 --> 00:00:26,910
In fact,

8
00:00:26,910 --> 00:00:29,110
you can make arguments optional,

9
00:00:29,110 --> 00:00:32,320
which means that when you call the functional subroutine,

10
00:00:32,320 --> 00:00:34,210
you can either supply a value.

11
00:00:34,210 --> 00:00:38,120
Or you can simply admit it in this video.

12
00:00:38,120 --> 00:00:40,760
We'll look at how this process works.

13
00:00:40,760 --> 00:01:01,430
We'll stay with the same example of creating a document inserting a table and put in

14
00:01:01,430 --> 00:01:02,800
headings in the first row.

15
00:01:02,800 --> 00:01:07,210
But let's say we want to make the insertion of headings more flexible.

16
00:01:07,210 --> 00:01:10,750
We want to cater for a maximum of six headings,

17
00:01:10,750 --> 00:01:16,450
but we want the flexibility of being able to enter fewer than six headings.

18
00:01:16,450 --> 00:01:30,860
Optional arguments provides a mechanism for making this happen again.

19
00:01:30,860 --> 00:01:32,050
We'll call this main,

20
00:01:32,050 --> 00:01:37,400
and we can then call the function and subroutine that were used in the last video.

21
00:01:37,400 --> 00:01:59,900
And let's say this time we only want to end three columns of information.

22
00:01:59,900 --> 00:02:05,150
Let's now refer back to the macro that we wrote in the first video.

23
00:02:05,150 --> 00:02:11,250
So here we had this third subroutine called create headings.

24
00:02:11,250 --> 00:02:16,640
So let's now copy.

25
00:02:16,640 --> 00:02:35,450
This is so this will be 0404 b.

26
00:02:35,450 --> 00:02:39,200
And instead of having these fixed headings,

27
00:02:39,200 --> 00:02:41,010
we now want the flexibility.

28
00:02:41,010 --> 00:02:41,870
First of all,

29
00:02:41,870 --> 00:02:47,500
they're being able to supply our strings as parameter values and secondly,

30
00:02:47,500 --> 00:02:52,350
off being able to vary the number of parameters that are actually in use.

31
00:02:52,350 --> 00:02:58,570
So to do this,

32
00:02:58,570 --> 00:03:01,540
we define our arguments or parameters.

33
00:03:01,540 --> 00:03:02,700
But with each one,

34
00:03:02,700 --> 00:03:04,750
we specify that it's optional.

35
00:03:04,750 --> 00:03:09,950
There are three things to remember when creating optional arguments.

36
00:03:09,950 --> 00:03:15,780
The first is that optional arguments always follow obligatory arguments.

37
00:03:15,780 --> 00:03:19,250
So if your subroutine or function requires both,

38
00:03:19,250 --> 00:03:24,450
you put the regular arguments first and then you put any optional arguments.

39
00:03:24,450 --> 00:03:30,600
The second thing is that you use the keyword optional before the name of the parameter,

40
00:03:30,600 --> 00:03:35,860
and the third thing to remember is that you need to supply a default value for the optional

41
00:03:35,860 --> 00:03:36,520
argument,

42
00:03:36,520 --> 00:03:41,950
which will be used if no value is supplied when the function or subroutine is called.

43
00:03:41,950 --> 00:03:44,430
So in this example,

44
00:03:44,430 --> 00:03:47,140
we don't have any obligatory parameters.

45
00:03:47,140 --> 00:03:52,020
We want to create simply a Siris of optional parameters said.

46
00:03:52,020 --> 00:03:55,410
We used the key word optional and these air strength.

47
00:03:55,410 --> 00:04:04,600
So let's call the str h one etcetera as strange and then we supply a default value.

48
00:04:04,600 --> 00:04:05,890
In this case,

49
00:04:05,890 --> 00:04:08,550
a good choice will be the blank or empty string.

50
00:04:08,550 --> 00:04:10,060
That way,

51
00:04:10,060 --> 00:04:11,510
when we moved to the cell,

52
00:04:11,510 --> 00:04:14,740
an end to the text will be entering nothing.

53
00:04:14,740 --> 00:04:16,650
So we won't be modifying the table.

54
00:04:16,650 --> 00:04:19,240
So that's our first parameter.

55
00:04:19,240 --> 00:04:26,990
Let's just go onto another line and then we content across and just copy what we had before

56
00:04:26,990 --> 00:04:26,990
.

57
00:04:26,990 --> 00:04:35,030
So we want to enter a maximum of six of these so we can just pace you turn.

58
00:04:35,030 --> 00:04:39,650
I meant just modifying the names.

59
00:04:39,650 --> 00:04:46,700
And here,

60
00:04:46,700 --> 00:04:48,160
obviously this is the last one.

61
00:04:48,160 --> 00:04:50,910
So no comma and no under school.

62
00:04:50,910 --> 00:04:57,250
The next thing we need to change is that these values will be used in the function.

63
00:04:57,250 --> 00:04:57,750
Cool.

64
00:04:57,750 --> 00:05:03,160
And these parameter names will be actually used within the subroutine.

65
00:05:03,160 --> 00:05:05,140
So we're gonna have just three.

66
00:05:05,140 --> 00:05:07,150
Let's say we want the report name,

67
00:05:07,150 --> 00:05:11,050
the date do and the percent complete.

68
00:05:11,050 --> 00:05:14,970
So let's just move these into the function.

69
00:05:14,970 --> 00:05:15,350
Cool.

70
00:05:15,350 --> 00:05:31,010
So we want to call this and then we want to supply as parameters report name.

71
00:05:31,010 --> 00:05:32,750
So cut this.

72
00:05:32,750 --> 00:05:41,720
Just paste it in Let's use the same style by split in each value onto a separate line.

73
00:05:41,720 --> 00:05:43,660
Then we want due date.

74
00:05:43,660 --> 00:05:58,170
So this time let's drag and I just tapped out across split the line and finally we wanted

75
00:05:58,170 --> 00:06:07,750
percent complete on clothes.

76
00:06:07,750 --> 00:06:14,250
So these will be the only three arguments that we supply and obviously they will go into

77
00:06:14,250 --> 00:06:15,550
str h one,

78
00:06:15,550 --> 00:06:17,750
h two and H three respectively.

79
00:06:17,750 --> 00:06:21,950
The last three arguments will simply stay as their default value.

80
00:06:21,950 --> 00:06:32,350
So the final thing we have to do is to use str h one as the text of this one on eight to

81
00:06:32,350 --> 00:06:33,880
and so forth.

82
00:06:33,880 --> 00:06:55,550
So we just need one more.

83
00:06:55,550 --> 00:06:59,640
These two lines copy paste,

84
00:06:59,640 --> 00:07:03,310
paste and change that to six.

85
00:07:03,310 --> 00:07:05,690
So after we've created a table,

86
00:07:05,690 --> 00:07:07,150
we end up in the first cell.

87
00:07:07,150 --> 00:07:13,250
We ends of the first head in move down one end to the second and so forth.

88
00:07:13,250 --> 00:07:16,930
So there is a fair bit of redundancy in this process.

89
00:07:16,930 --> 00:07:20,980
And those of you who have programming experience will be thinking of condition,

90
00:07:20,980 --> 00:07:24,550
ALS and loops to make the code a bit more efficient.

91
00:07:24,550 --> 00:07:26,650
But with what we've covered,

92
00:07:26,650 --> 00:07:28,030
it still works.

93
00:07:28,030 --> 00:07:34,490
It's a bit long winded but basically these last three entries are blank strings,

94
00:07:34,490 --> 00:07:38,150
so they don't have any effect on the content of our table.

95
00:07:38,150 --> 00:07:46,550
So let's distract that our code works so we'll save and run.

96
00:07:46,550 --> 00:07:51,250
Now let's look at the table that we end up with.

97
00:07:51,250 --> 00:08:00,560
So we've got ourselves a three column table on the headings have gone in and the last three

98
00:08:00,560 --> 00:08:01,560
parameters,

99
00:08:01,560 --> 00:08:03,810
which we didn't supply value for.

100
00:08:03,810 --> 00:08:05,370
Don't do any harm.

101
00:08:05,370 --> 00:08:14,700
It'll when defining a functional subroutine.

102
00:08:14,700 --> 00:08:17,600
Obligatory arguments must always proceed.

103
00:08:17,600 --> 00:08:27,520
Any optional arguments to define an optional argument used the key word optional and supply

104
00:08:27,520 --> 00:08:28,520
a default value.

105
00:08:28,520 --> 00:08:34,880
Optional argument is data type equals default value.

106
00:08:34,880 --> 00:08:41,940
If no value is supplied for an optional argument,

107
00:08:41,940 --> 00:08:44,280
the default value will be used instead.

