1
00:00:00,000 --> 00:00:17,400
when you divide your code into separate sub procedure is the question of variable scope

2
00:00:17,400 --> 00:00:18,650
becomes important.

3
00:00:18,650 --> 00:00:24,810
Some of the variables you declare will only be pertinent to one particular sub procedure.

4
00:00:24,810 --> 00:00:30,050
Others you'll want to access in several different sub procedures within model.

5
00:00:30,050 --> 00:00:31,990
On a larger project.

6
00:00:31,990 --> 00:00:34,750
You may divide your code into separate modules,

7
00:00:34,750 --> 00:00:36,190
and there may be variable,

8
00:00:36,190 --> 00:00:40,250
which you need to access from sub procedures in different modules.

9
00:00:40,250 --> 00:00:46,640
Since the code that we've been using in this section was generated by the macro recorder,

10
00:00:46,640 --> 00:00:49,050
it obviously doesn't news variables.

11
00:00:49,050 --> 00:00:53,210
But as we've seen as your macro is growing complexity,

12
00:00:53,210 --> 00:00:56,350
the use of variables becomes more and more essential.

13
00:00:56,350 --> 00:01:01,450
So let's look at modifying our code so that it actually uses variables,

14
00:01:01,450 --> 00:01:07,350
the basic code that we have created a new document and places a table inside it.

15
00:01:07,350 --> 00:01:14,100
The three main objects involved therefore going to be the document second lead the range,

16
00:01:14,100 --> 00:01:18,180
which refers to positions within that document and thirdly,

17
00:01:18,180 --> 00:01:20,040
the table that we create.

18
00:01:20,040 --> 00:01:23,150
And in the first row of which we insert headings.

19
00:01:23,150 --> 00:01:27,210
If we examine the code generated by the macro recorder,

20
00:01:27,210 --> 00:01:33,930
you'll see it makes continuous use of the selection object and the problem with this is

21
00:01:33,930 --> 00:01:35,150
it's ambiguity.

22
00:01:35,150 --> 00:01:37,230
At one point in the code,

23
00:01:37,230 --> 00:01:39,000
it's gonna be referring to a range.

24
00:01:39,000 --> 00:01:39,900
At another point,

25
00:01:39,900 --> 00:01:42,810
it would refer to paragraph another point.

26
00:01:42,810 --> 00:01:44,050
It refers to a table,

27
00:01:44,050 --> 00:01:46,320
the table cell and social.

28
00:01:46,320 --> 00:01:48,530
By using variables,

29
00:01:48,530 --> 00:01:52,850
we can remove this ambiguity and make our code much clearer.

30
00:01:52,850 --> 00:02:09,660
So let's begin by copying the 1st 3 sub procedures that we wrote there will just modify the

31
00:02:09,660 --> 00:02:10,600
names on.

32
00:02:10,600 --> 00:02:16,070
We'll look at making them a bit more efficient by using variables instead of relying on the

33
00:02:16,070 --> 00:02:17,190
selection object,

34
00:02:17,190 --> 00:02:19,250
as the macro recorder always does.

35
00:02:19,250 --> 00:02:27,750
So that paste that in and let's modify the three names so that becomes a five.

36
00:02:27,750 --> 00:02:41,090
And to this illustration,

37
00:02:41,090 --> 00:02:43,680
we will really need create headed.

38
00:02:43,680 --> 00:02:47,140
So let's just delete that line on the first variable.

39
00:02:47,140 --> 00:02:50,700
That it's logical to create is the document variable.

40
00:02:50,700 --> 00:02:56,290
So him Doc knew as document,

41
00:02:56,290 --> 00:02:57,830
and then here,

42
00:02:57,830 --> 00:02:59,350
where we create the new document,

43
00:02:59,350 --> 00:03:06,640
replace a reference to it inside DOT knew so that sets talk new equal to,

44
00:03:06,640 --> 00:03:09,150
and then we can do the same thing to the table.

45
00:03:09,150 --> 00:03:11,440
So we created table variable.

46
00:03:11,440 --> 00:03:18,440
And then when we create the table,

47
00:03:18,440 --> 00:03:20,020
he plays a reference to it.

48
00:03:20,020 --> 00:03:20,430
You know,

49
00:03:20,430 --> 00:03:23,140
variable that.

50
00:03:23,140 --> 00:03:28,170
Having modified that simple statement by placing another statement in front of it,

51
00:03:28,170 --> 00:03:33,500
we now need to make sure that these parameters are enclosed in parentheses.

52
00:03:33,500 --> 00:03:35,750
When we delve deeper into VB,

53
00:03:35,750 --> 00:03:42,750
a syntax will discuss when you do and don't need to place parentheses after the names of

54
00:03:42,750 --> 00:03:44,050
functions and methods.

55
00:03:44,050 --> 00:03:46,950
Now we leave things as they stand.

56
00:03:46,950 --> 00:03:50,420
Both of these variables will have a scope,

57
00:03:50,420 --> 00:03:54,350
which is local to this sub procedure in which they're declared.

58
00:03:54,350 --> 00:04:01,200
So this means that when I create my new table in order to get it inside doc New,

59
00:04:01,200 --> 00:04:02,450
which is where it belongs,

60
00:04:02,450 --> 00:04:05,320
I'm having to use active document,

61
00:04:05,320 --> 00:04:11,330
which means that at that point in time dot knew one I've just created has to be the active

62
00:04:11,330 --> 00:04:12,050
document.

63
00:04:12,050 --> 00:04:15,320
If I change the scope of this declaration,

64
00:04:15,320 --> 00:04:15,850
however,

65
00:04:15,850 --> 00:04:19,570
so that it's module level instead of procedure level,

66
00:04:19,570 --> 00:04:25,900
I will be able to refer to dot knew in any some procedure within this module.

67
00:04:25,900 --> 00:04:27,650
So let's do that.

68
00:04:27,650 --> 00:04:29,610
It's very simple to do.

69
00:04:29,610 --> 00:04:36,150
We simply need to declare the variable at the top of the model above all the subjects ages

70
00:04:36,150 --> 00:04:38,850
so we can simply cut it from this position.

71
00:04:38,850 --> 00:04:45,920
Let's lose the blank line and then we just paste it after the option explicit above all the

72
00:04:45,920 --> 00:04:46,880
sudden procedures,

73
00:04:46,880 --> 00:04:51,350
the simple fact of declaring it in this position makes it module level,

74
00:04:51,350 --> 00:04:53,750
and we can use the keyword dim.

75
00:04:53,750 --> 00:04:54,630
However,

76
00:04:54,630 --> 00:04:58,050
it's much better practice to use the keyword private,

77
00:04:58,050 --> 00:05:03,230
because this explicitly specifies that this is a private module,

78
00:05:03,230 --> 00:05:07,550
which is the key word that specifies model level scope.

79
00:05:07,550 --> 00:05:11,850
Another useful practice is to have a name in convention,

80
00:05:11,850 --> 00:05:17,550
which makes it easy to distinguish between model level and procedure level variables.

81
00:05:17,550 --> 00:05:22,850
One common convention is simply to place the letter M at the start of the name,

82
00:05:22,850 --> 00:05:26,620
so the M specifies the scope has been model level,

83
00:05:26,620 --> 00:05:27,700
and in this case,

84
00:05:27,700 --> 00:05:28,030
the D.

85
00:05:28,030 --> 00:05:28,150
O.

86
00:05:28,150 --> 00:05:31,250
C specifies that it's a document variable,

87
00:05:31,250 --> 00:05:35,240
and the convention is where you have a local variable.

88
00:05:35,240 --> 00:05:37,840
You simply don't use any prefix.

89
00:05:37,840 --> 00:05:40,550
You typically have a prefix to specify the data type,

90
00:05:40,550 --> 00:05:44,700
but you don't then put a sort of P to represent procedure.

91
00:05:44,700 --> 00:05:47,750
You simply haven't prefix to specify the data time,

92
00:05:47,750 --> 00:05:55,010
so at the bottom here will now need to update our name so that they'll be comes in em.

93
00:05:55,010 --> 00:06:02,980
And in this position we can now explicitly state that we want our table to go inside.

94
00:06:02,980 --> 00:06:09,500
Don't new and don't continued rather than relying on the fact that it's probably going to

95
00:06:09,500 --> 00:06:10,850
be the active document.

96
00:06:10,850 --> 00:06:12,400
I've just noticed,

97
00:06:12,400 --> 00:06:12,770
by the way,

98
00:06:12,770 --> 00:06:16,840
that there are three lines in here which completely unnecessary.

99
00:06:16,840 --> 00:06:19,900
This is one of the things about using the macro recorder,

100
00:06:19,900 --> 00:06:21,740
which is how we generated this code.

101
00:06:21,740 --> 00:06:23,550
It records every single thing.

102
00:06:23,550 --> 00:06:23,680
You,

103
00:06:23,680 --> 00:06:24,130
too,

104
00:06:24,130 --> 00:06:25,650
so I must have timeto Why,

105
00:06:25,650 --> 00:06:27,250
after type in summary,

106
00:06:27,250 --> 00:06:29,250
an extra Y and then deleted it.

107
00:06:29,250 --> 00:06:31,150
And the macro recorder said,

108
00:06:31,150 --> 00:06:32,240
Ah,

109
00:06:32,240 --> 00:06:34,470
you want an extra way and then you want to delete it,

110
00:06:34,470 --> 00:06:38,050
so I'll put the code in for you so you can just delete those.

111
00:06:38,050 --> 00:06:41,330
You almost certainly haven't gotten these three lines in your coat.

112
00:06:41,330 --> 00:06:44,850
I hope their presence hasn't confused you,

113
00:06:44,850 --> 00:06:47,600
so we can now test our code.

114
00:06:47,600 --> 00:06:48,750
Let's just save,

115
00:06:48,750 --> 00:06:52,850
and it's the main back row here that we need to run.

116
00:06:52,850 --> 00:06:58,050
Let's look at the document that's been created,

117
00:06:58,050 --> 00:07:00,350
and there it is.

118
00:07:00,350 --> 00:07:12,150
So that's the difference between a procedure level Onda module level variable.

119
00:07:12,150 --> 00:07:15,850
There's 1/3 scope that you can give to a variable,

120
00:07:15,850 --> 00:07:17,640
which is to make it global.

121
00:07:17,640 --> 00:07:20,750
So let's just have a quick example of doing one of those.

122
00:07:20,750 --> 00:07:29,450
You declare global variables in the same position as module level variables,

123
00:07:29,450 --> 00:07:34,150
but instead of using the keyword private you use public,

124
00:07:34,150 --> 00:07:44,410
so let's just do a quick test and the convention is we use G as the first letter of the

125
00:07:44,410 --> 00:07:44,780
name.

126
00:07:44,780 --> 00:07:54,230
So let's call it G str test straight And in fact,

127
00:07:54,230 --> 00:07:57,350
what we can do to save time is we can make it a constant.

128
00:07:57,350 --> 00:08:01,050
So if we put Const at this point,

129
00:08:01,050 --> 00:08:03,280
we can land.

130
00:08:03,280 --> 00:08:10,730
Just populate it in one line so we could go into any of these modules.

131
00:08:10,730 --> 00:08:11,450
Andi,

132
00:08:11,450 --> 00:08:14,850
refer to this variable and it's going Teoh,

133
00:08:14,850 --> 00:08:18,650
actually give us this value of test that we've assigned to it.

134
00:08:18,650 --> 00:08:23,420
So I'm just gonna go into conditional is loops in the rays,

135
00:08:23,420 --> 00:08:25,000
which is what we're coming onto next.

136
00:08:25,000 --> 00:08:26,010
At this point inside,

137
00:08:26,010 --> 00:08:26,650
it's blank.

138
00:08:26,650 --> 00:08:34,930
And let's just put a test macron in there and use MSG Box on paste.

139
00:08:34,930 --> 00:08:39,910
Just copied the name and run and up comes out test.

140
00:08:39,910 --> 00:08:44,680
We probably won't be encounter in this very often if it all in this course,

141
00:08:44,680 --> 00:08:47,730
But as you start right in larger projects,

142
00:08:47,730 --> 00:08:53,810
you will find that you need to refer to variables and other modules on the way to do that

143
00:08:53,810 --> 00:08:55,340
is to give them a scope,

144
00:08:55,340 --> 00:08:56,450
which is public.

145
00:08:56,450 --> 00:08:59,840
So for the moment,

146
00:08:59,840 --> 00:09:05,450
let's just lose our public constant and save our changes.

147
00:09:05,450 --> 00:09:19,520
Variables declared within a functional subroutine have a local scope and can only be

148
00:09:19,520 --> 00:09:28,080
accessed from within the procedure in which they declared variables declared at the top of

149
00:09:28,080 --> 00:09:29,850
a module a bubble.

150
00:09:29,850 --> 00:09:35,160
Some procedures using the keyword private have a model level scope.

151
00:09:35,160 --> 00:09:45,920
Variables declared at the top of a module using the keyword public have a global or project

152
00:09:45,920 --> 00:09:46,750
level scope.

