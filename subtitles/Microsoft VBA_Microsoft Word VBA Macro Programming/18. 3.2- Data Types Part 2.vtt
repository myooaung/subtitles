WEBVTT
ï»¿1
00:00:00.000 --> 00:00:24.470
that we could write some more code to perhaps create a document and output all of this

2
00:00:24.470 --> 00:00:25.250
information.

3
00:00:25.250 --> 00:00:26.840
But instead of doing that,

4
00:00:26.840 --> 00:00:31.580
I'm going to show you another feature which will pick up on in the section that will come

5
00:00:31.580 --> 00:00:34.220
to later on debug in an era handling.

6
00:00:34.220 --> 00:00:37.350
And what we're going to do is to go into break mode,

7
00:00:37.350 --> 00:00:42.050
so we'll execute all the lines in our macro and then going to break mode.

8
00:00:42.050 --> 00:00:48.200
Brake mode is a method of Friesen code execution on one of the things that you can do in

9
00:00:48.200 --> 00:00:54.970
the visual basic editor when code execution is frozen is to just hover your mouse over the

10
00:00:54.970 --> 00:01:00.050
names of variables to see what values are currently in those variables.

11
00:01:00.050 --> 00:01:02.700
So rather than bothering to output them,

12
00:01:02.700 --> 00:01:04.350
we can just going to break mode.

13
00:01:04.350 --> 00:01:06.750
And then after all the lines have executed,

14
00:01:06.750 --> 00:01:09.850
we can then just examine the variables.

15
00:01:09.850 --> 00:01:14.470
So in order to ensure that we don't go into break mode before all our variables are

16
00:01:14.470 --> 00:01:15.250
populated,

17
00:01:15.250 --> 00:01:20.880
we need to put our break points on this line because the line that you put the break point

18
00:01:20.880 --> 00:01:28.350
on doesn't itself execute so that it says n sub I put in the break point on that line.

19
00:01:28.350 --> 00:01:32.850
The end sub line will not yet have been executed.

20
00:01:32.850 --> 00:01:39.200
And hence our program Al Macro will still be running to put a break point.

21
00:01:39.200 --> 00:01:40.620
And even if you're not aware of this,

22
00:01:40.620 --> 00:01:42.300
you may well have done it accidentally.

23
00:01:42.300 --> 00:01:48.650
You click on this power next to the appropriate line that dot then appears so.

24
00:01:48.650 --> 00:01:50.090
If you do do this accidentally,

25
00:01:50.090 --> 00:01:51.550
just click again to get rid of it.

26
00:01:51.550 --> 00:01:52.630
Okay,

27
00:01:52.630 --> 00:01:56.910
so we're gonna enter break mode on that just before end in El Bakraoui.

28
00:01:56.910 --> 00:01:58.950
Now we can run our macron,

29
00:01:58.950 --> 00:02:02.510
and here I've just realised I've made an error,

30
00:02:02.510 --> 00:02:03.320
so let's click.

31
00:02:03.320 --> 00:02:03.850
OK?

32
00:02:03.850 --> 00:02:05.450
When I declared my double,

33
00:02:05.450 --> 00:02:07.720
I used the wrong prefix.

34
00:02:07.720 --> 00:02:10.850
I used the prefix for long instead of the prefix a double.

35
00:02:10.850 --> 00:02:12.850
So apologies for that.

36
00:02:12.850 --> 00:02:16.250
I'm just gonna go back and correct that d b l.

37
00:02:16.250 --> 00:02:19.110
And then it's run again.

38
00:02:19.110 --> 00:02:23.520
So nothing happens as far as the interface is concerned.

39
00:02:23.520 --> 00:02:29.750
But each of our little variables now has a value inside it so we can hover over each one

40
00:02:29.750 --> 00:02:31.940
for the document object.

41
00:02:31.940 --> 00:02:34.430
It just shows you basically the name of the document.

42
00:02:34.430 --> 00:02:35.450
Identify it.

43
00:02:35.450 --> 00:02:37.500
Str title.

44
00:02:37.500 --> 00:02:38.300
If we can get over,

45
00:02:38.300 --> 00:02:41.390
that has be be a data types.

46
00:02:41.390 --> 00:02:48.100
And the reason that you don't see the close quotation marks is that it includes the return

47
00:02:48.100 --> 00:02:49.700
at the end of the paragraph.

48
00:02:49.700 --> 00:02:59.420
Then we've got a number of words is 275 number of characters 952 And here we got the single

49
00:02:59.420 --> 00:02:59.420
.

50
00:02:59.420 --> 00:03:04.250
So the diff the main difference between the single and the double is gonna be precision.

51
00:03:04.250 --> 00:03:07.200
So if you count the number of numbers after the decimal,

52
00:03:07.200 --> 00:03:07.670
you'll see it.

53
00:03:07.670 --> 00:03:08.350
Six.

54
00:03:08.350 --> 00:03:11.050
Where is with the D B L?

55
00:03:11.050 --> 00:03:12.750
We'll have 14.

56
00:03:12.750 --> 00:03:16.950
So that's the main difference between single and double.

57
00:03:16.950 --> 00:03:27.290
Then we've got the number of rows and the number of columns in our table in the upcoming

58
00:03:27.290 --> 00:03:27.770
videos.

59
00:03:27.770 --> 00:03:28.750
Within this section,

60
00:03:28.750 --> 00:03:32.520
we'll talk more about working with string variables,

61
00:03:32.520 --> 00:03:34.850
integer and long variables,

62
00:03:34.850 --> 00:03:38.450
single and double variables and date variables.

63
00:03:38.450 --> 00:03:39.750
However,

64
00:03:39.750 --> 00:03:41.650
before finish in this video,

65
00:03:41.650 --> 00:03:47.350
I just wanted to make a couple of points regard in the variant data type.

66
00:03:47.350 --> 00:03:50.350
So let's come out of brake mode.

67
00:03:50.350 --> 00:03:51.570
And to do this,

68
00:03:51.570 --> 00:03:53.550
we click on the reset button just here,

69
00:03:53.550 --> 00:03:59.450
and then we can click on this bullet point just to get rid of our break point.

70
00:03:59.450 --> 00:04:02.020
The variant dated Sybers,

71
00:04:02.020 --> 00:04:02.550
I said,

72
00:04:02.550 --> 00:04:04.820
is really a rapper.

73
00:04:04.820 --> 00:04:11.780
Data type on what you're doing by using the variant data type is instructing Vehbi eh to

74
00:04:11.780 --> 00:04:16.850
make the decisions regarding the type of data that a variable contains.

75
00:04:16.850 --> 00:04:18.360
By doing this,

76
00:04:18.360 --> 00:04:23.030
you're obviously leaving yourself open to the possibility of errors creeping in on

77
00:04:23.030 --> 00:04:24.550
unpredictable results.

78
00:04:24.550 --> 00:04:30.870
So it's always best to explicitly declare the correct data type to reach variable that you

79
00:04:30.870 --> 00:04:35.650
create on those rare occasions where you do have to use a variant,

80
00:04:35.650 --> 00:04:37.840
you declare it in the normal way,

81
00:04:37.840 --> 00:04:40.990
then vnt whatever.

82
00:04:40.990 --> 00:04:42.750
As variant,

83
00:04:42.750 --> 00:04:44.780
however,

84
00:04:44.780 --> 00:04:46.750
those occasions are fairly rare.

85
00:04:46.750 --> 00:04:49.350
So let's get rid of this.

86
00:04:49.350 --> 00:04:53.350
What you should perhaps be aware off at this stage,

87
00:04:53.350 --> 00:04:58.250
it's how you can accidentally end up with a variant data type.

88
00:04:58.250 --> 00:05:00.260
The first thing you could do,

89
00:05:00.260 --> 00:05:01.050
of course,

90
00:05:01.050 --> 00:05:03.450
is not toe have option explicit,

91
00:05:03.450 --> 00:05:07.950
So if option explicit is missing or deleted,

92
00:05:07.950 --> 00:05:14.150
you can then refer to a variable without having previously declare it.

93
00:05:14.150 --> 00:05:16.410
So we could say,

94
00:05:16.410 --> 00:05:17.400
for example,

95
00:05:17.400 --> 00:05:28.580
let I n t cells equal tbl doc Rose brackets worm,

96
00:05:28.580 --> 00:05:30.650
not cells.

97
00:05:30.650 --> 00:05:36.150
Don't count on this is now perfectly legitimate,

98
00:05:36.150 --> 00:05:41.650
and we can prove that by switching on break mode again and just running our code.

99
00:05:41.650 --> 00:05:44.620
Then if we hover over in cells,

100
00:05:44.620 --> 00:05:45.020
weaken,

101
00:05:45.020 --> 00:05:45.400
see?

102
00:05:45.400 --> 00:05:45.740
Yes,

103
00:05:45.740 --> 00:05:46.700
it has got full.

104
00:05:46.700 --> 00:05:48.850
But what's the data type?

105
00:05:48.850 --> 00:05:50.880
Basically,

106
00:05:50.880 --> 00:05:52.450
because we haven't declared it.

107
00:05:52.450 --> 00:05:54.650
The data type is variant.

108
00:05:54.650 --> 00:05:55.780
At the moment.

109
00:05:55.780 --> 00:05:58.180
There's not much risk risk of anything going wrong,

110
00:05:58.180 --> 00:05:58.900
But obviously,

111
00:05:58.900 --> 00:06:00.050
the key point is,

112
00:06:00.050 --> 00:06:02.150
variants are unpredictable.

113
00:06:02.150 --> 00:06:06.350
So that's the first way in which a variant can accidentally creeping.

114
00:06:06.350 --> 00:06:12.550
Let's again reset on switch off the break point.

115
00:06:12.550 --> 00:06:24.450
Let's reinstate option explicit at the top there and perhaps just lose this line.

116
00:06:24.450 --> 00:06:33.350
Another way of accidentally ended up with the variance is where you don't declare the type

117
00:06:33.350 --> 00:06:33.350
.

118
00:06:33.350 --> 00:06:36.480
So if I take off our string,

119
00:06:36.480 --> 00:06:38.460
I haven't broken any rules.

120
00:06:38.460 --> 00:06:43.550
Because all options explicit insists on is that you declare the variable.

121
00:06:43.550 --> 00:06:49.450
It doesnt insist that you declare the type so domestic title is fine.

122
00:06:49.450 --> 00:06:53.360
The fact that it has STRS the prefix is irrelevant.

123
00:06:53.360 --> 00:06:55.070
That's purely for my benefit.

124
00:06:55.070 --> 00:06:58.560
It doesn't have any impact on what BB A does to my variable,

125
00:06:58.560 --> 00:07:03.450
so that's the second way of ending up with a variant data type.

126
00:07:03.450 --> 00:07:06.950
Let's just don't do.

127
00:07:06.950 --> 00:07:12.550
Another way is where you'll declare in several variables of the same time.

128
00:07:12.550 --> 00:07:14.630
But you use the syntax,

129
00:07:14.630 --> 00:07:18.350
which seems logical but isn't let me explain.

130
00:07:18.350 --> 00:07:22.750
So so we had to string variables on to save time.

131
00:07:22.750 --> 00:07:24.750
We wanted to declare them on the same line.

132
00:07:24.750 --> 00:07:29.770
The correct way of doing that is to put comma second variable.

133
00:07:29.770 --> 00:07:32.200
So let's say it's going to be table text,

134
00:07:32.200 --> 00:07:38.450
so str table text as string.

135
00:07:38.450 --> 00:07:41.030
So that's the correct way of declare.

136
00:07:41.030 --> 00:07:42.760
In two or more variables.

137
00:07:42.760 --> 00:07:44.420
You just separate them of commerce,

138
00:07:44.420 --> 00:07:47.850
and you then repeat yourself the full syntax.

139
00:07:47.850 --> 00:07:50.260
But what seems logical,

140
00:07:50.260 --> 00:07:51.450
although it's not,

141
00:07:51.450 --> 00:07:53.260
would be to do this.

142
00:07:53.260 --> 00:07:54.240
So you say to yourself,

143
00:07:54.240 --> 00:07:54.360
Well,

144
00:07:54.360 --> 00:07:54.640
actually,

145
00:07:54.640 --> 00:07:55.940
they're all string variables.

146
00:07:55.940 --> 00:07:58.550
Why don't why do I need to say as string every time?

147
00:07:58.550 --> 00:08:03.450
So you take out all the air strains apart from the very last one,

148
00:08:03.450 --> 00:08:05.300
it takes up less space.

149
00:08:05.300 --> 00:08:08.850
It's less work on DIT compiles with no errors.

150
00:08:08.850 --> 00:08:09.790
However,

151
00:08:09.790 --> 00:08:13.150
what you actually end up with is one string variable,

152
00:08:13.150 --> 00:08:16.950
the one that has as string after its name.

153
00:08:16.950 --> 00:08:23.270
All the other variables on that line will be variant because there's no as,

154
00:08:23.270 --> 00:08:26.250
and there's no data type actually explicitly declared.

155
00:08:26.250 --> 00:08:31.250
So that's another way of ending up with the variant data time.

156
00:08:31.250 --> 00:08:36.910
That's just tidy this up that will get rid of this.

157
00:08:36.910 --> 00:08:40.440
Okay,

158
00:08:40.440 --> 00:08:44.580
so now that we've got an overview of how you work with different data types,

159
00:08:44.580 --> 00:08:47.620
when you declare variables in the upcoming videos,

160
00:08:47.620 --> 00:08:52.450
we'll look in more detail at working with the different data types working with strings,

161
00:08:52.450 --> 00:08:53.790
integers,

162
00:08:53.790 --> 00:08:54.630
longs,

163
00:08:54.630 --> 00:08:55.160
singles,

164
00:08:55.160 --> 00:08:56.030
doubles,

165
00:08:56.030 --> 00:08:56.650
dates,

166
00:08:56.650 --> 00:08:57.280
etcetera.

167
00:08:57.280 --> 00:09:02.750
So let's just close the visual basic editor and close this document.

168
00:09:02.750 --> 00:09:08.750
So word is now gonna ask us whether we want to save this document.

169
00:09:08.750 --> 00:09:09.320
Well,

170
00:09:09.320 --> 00:09:09.600
quick,

171
00:09:09.600 --> 00:09:09.850
yes,

172
00:09:09.850 --> 00:09:10.750
we do save.

173
00:09:10.750 --> 00:09:12.990
But it's also now gonna ask us,

174
00:09:12.990 --> 00:09:18.100
Do we want to save our changes to the template which we attached to this document?

175
00:09:18.100 --> 00:09:19.100
And of course,

176
00:09:19.100 --> 00:09:19.510
we do.

177
00:09:19.510 --> 00:09:20.910
So we click on Save Again.

178
00:09:20.910 --> 00:09:32.280
As well as declaring variables,

179
00:09:32.280 --> 00:09:35.830
it is important to declare the data type of every variable.

180
00:09:35.830 --> 00:09:39.150
Any variable,

181
00:09:39.150 --> 00:09:42.850
which is not declared for whose data type is not declared,

182
00:09:42.850 --> 00:09:44.650
becomes a variant.

183
00:09:44.650 --> 00:09:49.850
Variables of the variant data type,

184
00:09:49.850 --> 00:09:51.750
a slower to process,

185
00:09:51.750 --> 00:09:55.790
use more memory and can lead to erroneous results

