WEBVTT
ï»¿1
00:00:00.000 --> 00:00:12.450
will now move on to look a loop in statements.

2
00:00:12.450 --> 00:00:18.980
The statements enable you to execute a number of wines repeatedly either a given number of

3
00:00:18.980 --> 00:00:23.480
times or while a condition is truth in this video,

4
00:00:23.480 --> 00:00:28.950
we'll look at one of the most frequently used of these Lupin statements before next loop.

5
00:00:28.950 --> 00:00:50.150
Let's begin by looking at the basic syntax.

6
00:00:50.150 --> 00:00:56.750
Let's call it for next basics.

7
00:00:56.750 --> 00:01:02.220
To control the for next loop,

8
00:01:02.220 --> 00:01:03.250
you need a counter,

9
00:01:03.250 --> 00:01:09.640
and there's a tradition in most program in languages where you use the throwaway name I as

10
00:01:09.640 --> 00:01:10.750
the name of the counter.

11
00:01:10.750 --> 00:01:21.650
Then the basic syntax is for counter equals start value to end value.

12
00:01:21.650 --> 00:01:24.450
Then you have a series of statements,

13
00:01:24.450 --> 00:01:32.850
and you close the structure with next and you repeat the name of the counter.

14
00:01:32.850 --> 00:01:37.850
The benefit of doing this is that if you have 14 next statement within another,

15
00:01:37.850 --> 00:01:43.570
repeating the name of the counter in the closing statement allows you to see where each of

16
00:01:43.570 --> 00:01:44.950
your loops ends.

17
00:01:44.950 --> 00:01:47.260
So for this first basic example,

18
00:01:47.260 --> 00:01:51.450
let's say that we want to loop through the quarters in a year,

19
00:01:51.450 --> 00:01:58.600
so we know that there are 4/4 the first of which is one and the last of which is full.

20
00:01:58.600 --> 00:02:01.650
So that takes care about start and end in value.

21
00:02:01.650 --> 00:02:03.880
Then our counter is called.

22
00:02:03.880 --> 00:02:08.660
I so replace that with I andro statements.

23
00:02:08.660 --> 00:02:11.850
Let's simply have one MSG box.

24
00:02:11.850 --> 00:02:16.750
We'll have the word quarter full it by I.

25
00:02:16.750 --> 00:02:28.040
So when we run when Lupin in this way,

26
00:02:28.040 --> 00:02:31.050
it's sometimes the case that you don't want to lose sequentially.

27
00:02:31.050 --> 00:02:33.600
You want to jump in certain steps.

28
00:02:33.600 --> 00:02:34.600
For example,

29
00:02:34.600 --> 00:02:37.850
we had an application that was working with the months of a year,

30
00:02:37.850 --> 00:02:42.050
but we currently wanted to process only the last month in each quarter.

31
00:02:42.050 --> 00:02:47.110
We need to start on Month three and then jump in steps of three.

32
00:02:47.110 --> 00:02:49.250
Let's look at how that's done.

33
00:02:49.250 --> 00:02:52.150
I'll just switch back to full model of you.

34
00:02:52.150 --> 00:02:55.580
Let's just call P this,

35
00:02:55.580 --> 00:02:55.700
uh,

36
00:02:55.700 --> 00:03:07.750
procedure and just paste it out to the original and rename it so it's macro be and let's

37
00:03:07.750 --> 00:03:09.690
call it four next steps.

38
00:03:09.690 --> 00:03:14.110
So we're going from three to 12.

39
00:03:14.110 --> 00:03:15.630
But the main thing is,

40
00:03:15.630 --> 00:03:17.650
we used the key word step,

41
00:03:17.650 --> 00:03:19.430
and then it's going to be,

42
00:03:19.430 --> 00:03:20.170
in this case,

43
00:03:20.170 --> 00:03:20.750
three.

44
00:03:20.750 --> 00:03:23.770
So here will have a month,

45
00:03:23.770 --> 00:03:25.750
and then it's run,

46
00:03:25.750 --> 00:03:30.240
so we go from 3 to 6 to nine on.

47
00:03:30.240 --> 00:03:31.130
Then we stopped.

48
00:03:31.130 --> 00:03:36.020
When we get to 12 you can also use the step parameter to loop in reverse.

49
00:03:36.020 --> 00:03:41.330
This is often required where your delete in elements and we'll see examples of this

50
00:03:41.330 --> 00:03:42.350
throughout the course.

51
00:03:42.350 --> 00:03:52.590
So I'll copy this one again on from macro,

52
00:03:52.590 --> 00:03:58.850
see for next reverse.

53
00:03:58.850 --> 00:04:05.630
So it's simply reversed these four 21 Now,

54
00:04:05.630 --> 00:04:08.390
if we don't put this step and we try to run it,

55
00:04:08.390 --> 00:04:15.810
absolutely nothing will happen because to get from the start value to the end value where

56
00:04:15.810 --> 00:04:17.350
step isn't specified,

57
00:04:17.350 --> 00:04:22.000
V B A will always add one by default.

58
00:04:22.000 --> 00:04:24.690
So if you had one to the start value of four,

59
00:04:24.690 --> 00:04:25.950
you get five.

60
00:04:25.950 --> 00:04:27.960
You're going in the wrong direction.

61
00:04:27.960 --> 00:04:33.200
So the end value has already been surpassed and therefore nothing inside the loop will be

62
00:04:33.200 --> 00:04:33.850
executed.

63
00:04:33.850 --> 00:04:41.520
So we simply have to put step minus one to tell BB A that we actually want to add minus one

64
00:04:41.520 --> 00:04:44.580
to get from start value to end value.

65
00:04:44.580 --> 00:04:56.980
One very common use of for next loops is to look through all the items within a collection

66
00:04:56.980 --> 00:04:58.540
of word objects,

67
00:04:58.540 --> 00:05:01.750
such as all the documents that are currently open.

68
00:05:01.750 --> 00:05:03.910
All the paragraphs in a document,

69
00:05:03.910 --> 00:05:06.410
all the tables in a document and so forth.

70
00:05:06.410 --> 00:05:13.150
V b a also contains a variation on the for next loop specifically for that purpose.

71
00:05:13.150 --> 00:05:15.850
Let's have a look at how this works.

72
00:05:15.850 --> 00:05:21.570
Let's say we want to look through all the documents which are currently open and do

73
00:05:21.570 --> 00:05:25.650
something with them in our case will simply display their names.

74
00:05:25.650 --> 00:05:41.160
So the syntax here is for each next to switch across the procedure.

75
00:05:41.160 --> 00:05:45.430
Give for a moment and the key difference between the four.

76
00:05:45.430 --> 00:05:51.110
Each structure on before next that we've already seen is that you don't use an integer

77
00:05:51.110 --> 00:05:51.750
counter.

78
00:05:51.750 --> 00:05:56.850
You simply use an object variable to loop through the object collection.

79
00:05:56.850 --> 00:06:00.280
So because we're working with documents,

80
00:06:00.280 --> 00:06:02.360
we'll need a document variable.

81
00:06:02.360 --> 00:06:04.350
Let's just call it Doc.

82
00:06:04.350 --> 00:06:19.350
You're now the same taxes generically for each object variable in object collection.

83
00:06:19.350 --> 00:06:27.340
Then we have our statements and we close it with next.

84
00:06:27.340 --> 00:06:30.050
And then we repeat the name of the object variable.

85
00:06:30.050 --> 00:06:32.500
So in this case,

86
00:06:32.500 --> 00:06:34.060
the object variable we've defined,

87
00:06:34.060 --> 00:06:35.050
it's called Doc.

88
00:06:35.050 --> 00:06:40.850
The collection that we're looping through is the documents collection,

89
00:06:40.850 --> 00:06:41.650
you know,

90
00:06:41.650 --> 00:06:49.180
so here will need to repeat the name of the object Variable Doc and for our statements will

91
00:06:49.180 --> 00:06:51.550
simply say MSG box,

92
00:06:51.550 --> 00:06:54.250
followed by the name of the documents.

93
00:06:54.250 --> 00:06:57.050
So we can say doc dot name.

94
00:06:57.050 --> 00:06:58.910
At the moment,

95
00:06:58.910 --> 00:07:02.880
we only have one document open the template that we put in the macron.

96
00:07:02.880 --> 00:07:04.180
So when you run,

97
00:07:04.180 --> 00:07:07.450
we simply get the name of that one document.

98
00:07:07.450 --> 00:07:08.550
And of course,

99
00:07:08.550 --> 00:07:11.650
if I go back into word and create a new document,

100
00:07:11.650 --> 00:07:15.050
then run the macro one small.

101
00:07:15.050 --> 00:07:21.850
My now get document one and the original document that I had opened.

102
00:07:21.850 --> 00:07:27.250
Let's just close that unwanted document.

103
00:07:27.250 --> 00:07:35.950
So most of the time where you want to loop through an object selection,

104
00:07:35.950 --> 00:07:38.350
this is the best way to do it.

105
00:07:38.350 --> 00:07:40.440
However,

106
00:07:40.440 --> 00:07:43.130
you can still use the for next loop on.

107
00:07:43.130 --> 00:07:47.500
One of the benefits of doing that is that you have the counter at your disposal,

108
00:07:47.500 --> 00:07:51.750
which you can use to fine tune how the Lupin is actually executed

