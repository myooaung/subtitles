1
00:00:00,000 --> 00:00:19,550
so most of the time where you want to loop through an object collection,

2
00:00:19,550 --> 00:00:21,890
this is the best way to do it.

3
00:00:21,890 --> 00:00:23,540
However,

4
00:00:23,540 --> 00:00:26,230
you can still use the for next loop on.

5
00:00:26,230 --> 00:00:30,580
One of the benefits of doing that is that you have the counter at your disposal,

6
00:00:30,580 --> 00:00:35,350
which you can use to find Tune how the Lupin is actually executed.

7
00:00:35,350 --> 00:00:55,580
Let's go back to full module view and let's call this final macro for next objects.

8
00:00:55,580 --> 00:01:05,150
So let's take an example of looping through the items within an object collection.

9
00:01:05,150 --> 00:01:07,160
The collection in question.

10
00:01:07,160 --> 00:01:10,460
I'll just quickly show you in the word interface.

11
00:01:10,460 --> 00:01:17,010
It's file info and on the right here we have properties and advanced properties,

12
00:01:17,010 --> 00:01:21,850
and these are the properties that will be looping through.

13
00:01:21,850 --> 00:01:27,750
So they're divided here into different categories and in V B A.

14
00:01:27,750 --> 00:01:35,030
Been owners built in document properties and they are in turn a property off the document

15
00:01:35,030 --> 00:01:35,550
object.

16
00:01:35,550 --> 00:01:41,320
So let's declare some variables,

17
00:01:41,320 --> 00:01:44,250
starting with I as Integra,

18
00:01:44,250 --> 00:01:45,750
which will be on counter.

19
00:01:45,750 --> 00:01:49,850
Then we'll need to know how many items there are in the collection,

20
00:01:49,850 --> 00:01:59,670
so we will cool that so we'll call that one and BDP as in built in document properties on

21
00:01:59,670 --> 00:02:00,750
this will be Integra.

22
00:02:00,750 --> 00:02:07,550
Then let's create a new document so we'll have a You will have a document variable.

23
00:02:07,550 --> 00:02:13,790
Then we'll read the name of each property into a string variable.

24
00:02:13,790 --> 00:02:21,670
So str name have string and the value associated with that property also into a string

25
00:02:21,670 --> 00:02:22,270
variable.

26
00:02:22,270 --> 00:02:29,750
So these are our variables,

27
00:02:29,750 --> 00:02:33,950
So the first thing we'll do is to create a new document.

28
00:02:33,950 --> 00:02:40,850
Them will add a table to it.

29
00:02:40,850 --> 00:02:59,650
Then we'll enter some headings and then we'll loop through be built end document properties

30
00:02:59,650 --> 00:03:01,450
collection.

31
00:03:01,450 --> 00:03:04,850
Then inside,

32
00:03:04,850 --> 00:03:10,550
the Luke will capture the name of each property,

33
00:03:10,550 --> 00:03:15,350
capture the value of each property,

34
00:03:15,350 --> 00:03:25,000
and then we'll writes the name inside the table in column one,

35
00:03:25,000 --> 00:03:29,130
and then we'll write the value in column two.

36
00:03:29,130 --> 00:03:30,160
Okay,

37
00:03:30,160 --> 00:03:31,570
so to create the new document,

38
00:03:31,570 --> 00:03:32,980
as we've seen a few times,

39
00:03:32,980 --> 00:03:41,750
it sets both new equal to documents not add on to create.

40
00:03:41,750 --> 00:03:52,930
The table will simply go back to our previous section and let's just grab the code that we

41
00:03:52,930 --> 00:03:55,250
recorded using the macro recorder,

42
00:03:55,250 --> 00:04:09,050
and we can then use Doc New instead of simply active document on this occasion will need

43
00:04:09,050 --> 00:04:10,250
instead of two.

44
00:04:10,250 --> 00:04:14,230
We'll need to use in to be deep pain.

45
00:04:14,230 --> 00:04:22,550
So this is simply the number of items within the collection that we live in through.

46
00:04:22,550 --> 00:04:29,940
And since we also want tohave headings will need to put plus one here then for the number

47
00:04:29,940 --> 00:04:32,430
of columns will need to now,

48
00:04:32,430 --> 00:04:32,820
of course,

49
00:04:32,820 --> 00:04:34,740
we haven't yet calculated what this is.

50
00:04:34,740 --> 00:04:37,700
So that's something I neglected to do.

51
00:04:37,700 --> 00:04:39,750
Let's just put that in.

52
00:04:39,750 --> 00:04:48,870
Find number off items been collection?

53
00:04:48,870 --> 00:04:50,050
No.

54
00:04:50,050 --> 00:04:52,030
And to do that,

55
00:04:52,030 --> 00:04:54,620
it's going to be let rather than set.

56
00:04:54,620 --> 00:04:55,330
And as we know,

57
00:04:55,330 --> 00:05:03,780
we're mitt let into bdp equals and in vb A When you want to find out how many items there

58
00:05:03,780 --> 00:05:04,830
are in a collection,

59
00:05:04,830 --> 00:05:07,350
you normally use the count property.

60
00:05:07,350 --> 00:05:14,720
So we start with dot knew got built in document properties.

61
00:05:14,720 --> 00:05:15,690
Got count.

62
00:05:15,690 --> 00:05:17,420
Okay,

63
00:05:17,420 --> 00:05:23,650
so now we can go into end to the headings and again if we go back to the previous sections

64
00:05:23,650 --> 00:05:23,650
,

65
00:05:23,650 --> 00:05:32,990
Montiel and look at our create headings we did We basically need thes three lines or a

66
00:05:32,990 --> 00:05:34,850
variation of these three lines.

67
00:05:34,850 --> 00:05:37,360
So we write the first head in,

68
00:05:37,360 --> 00:05:40,100
we move to the next cell and rewrite the second heading.

69
00:05:40,100 --> 00:05:59,050
So this is property name and then here property values.

70
00:05:59,050 --> 00:06:08,350
So let's just say what we've got so far and test it.

71
00:06:08,350 --> 00:06:20,550
So there's our two column table and it's got the number of rows and hopefully that number

72
00:06:20,550 --> 00:06:25,050
corresponds to the number of items within the collection that we live in through.

73
00:06:25,050 --> 00:06:31,250
So now we can live through the collection.

74
00:06:31,250 --> 00:06:33,850
So this is our four next loop.

75
00:06:33,850 --> 00:06:48,950
So it's full counter equals start value to end value Step X and then we'll close it.

76
00:06:48,950 --> 00:06:52,150
Youth in next counter.

77
00:06:52,150 --> 00:06:57,550
So the counter is I that both of these become I.

78
00:06:57,550 --> 00:07:06,850
The start value is one either first item in the collection on the end value is our variable

79
00:07:06,850 --> 00:07:06,850
,

80
00:07:06,850 --> 00:07:09,950
which we called into DDP.

81
00:07:09,950 --> 00:07:18,340
Our step value is one,

82
00:07:18,340 --> 00:07:20,510
and since that's the default weaken,

83
00:07:20,510 --> 00:07:22,650
simply delete the step parameter.

84
00:07:22,650 --> 00:07:31,750
So now we want to capture the name into our variable cold STL name.

85
00:07:31,750 --> 00:07:38,480
So it's let which we admit STL name equal,

86
00:07:38,480 --> 00:07:49,550
and we then need this syntax which refers to the entire collection.

87
00:07:49,550 --> 00:07:56,990
And we specify which item we want to process by place in an index in parentheses.

88
00:07:56,990 --> 00:08:03,790
After that statement and the index that you very often used within a loop is the name of

89
00:08:03,790 --> 00:08:04,450
the counter.

90
00:08:04,450 --> 00:08:07,950
So because this value is constantly changing,

91
00:08:07,950 --> 00:08:14,440
this is equivalent to saying each because each time you go through the loop it will have a

92
00:08:14,440 --> 00:08:19,010
different value which will correspond to the next fighter inside the collection.

93
00:08:19,010 --> 00:08:22,230
Having identified the item,

94
00:08:22,230 --> 00:08:26,550
we then drill down and extract its name property,

95
00:08:26,550 --> 00:08:41,850
so the value capturing the value will follow the same pattern sdo valued.

96
00:08:41,850 --> 00:08:45,240
And then at the end,

97
00:08:45,240 --> 00:08:46,950
it's going to be don't value.

98
00:08:46,950 --> 00:08:51,830
Having captured those two elements,

99
00:08:51,830 --> 00:08:57,350
we now want to out put them to the table and we can simply use these two lines.

100
00:08:57,350 --> 00:09:07,250
So we moved to the next cell and then here we obviously want to write the name.

101
00:09:07,250 --> 00:09:13,810
So that's str name and we do the same here.

102
00:09:13,810 --> 00:09:20,250
And this time we want to write the value.

103
00:09:20,250 --> 00:09:29,650
So str value I'll just tabal of these lines in for make them a bit more readable.

104
00:09:29,650 --> 00:09:30,550
Now,

105
00:09:30,550 --> 00:09:31,600
when we test this code,

106
00:09:31,600 --> 00:09:37,150
we're gonna have a slight problem because the value of one of these properties can only be

107
00:09:37,150 --> 00:09:39,450
extracted if it's been set.

108
00:09:39,450 --> 00:09:42,690
And in the case of a brand new document,

109
00:09:42,690 --> 00:09:46,680
there are a number of these properties which haven't yet been set.

110
00:09:46,680 --> 00:09:48,650
So when you're trying to read the value,

111
00:09:48,650 --> 00:09:50,150
you end up with an era.

112
00:09:50,150 --> 00:09:53,680
So it's definitely a good idea to save before we test,

113
00:09:53,680 --> 00:09:55,050
which you should always do anyway.

114
00:09:55,050 --> 00:09:59,150
So we get an error message,

115
00:09:59,150 --> 00:10:01,540
and if we click on debug,

116
00:10:01,540 --> 00:10:05,950
this will tell us which line we've actually got to.

117
00:10:05,950 --> 00:10:10,780
So basically it's reading the value which hasn't been set,

118
00:10:10,780 --> 00:10:12,250
and that's what's generating the error.

119
00:10:12,250 --> 00:10:13,430
Now.

120
00:10:13,430 --> 00:10:15,350
We haven't discussed our handling is yet,

121
00:10:15,350 --> 00:10:16,830
but we have discussed,

122
00:10:16,830 --> 00:10:17,760
if statements.

123
00:10:17,760 --> 00:10:23,010
So I've made a note of which properties are actually problematic in that they haven't been

124
00:10:23,010 --> 00:10:30,350
set and they are properties number 10 12 25 26 27 28.

125
00:10:30,350 --> 00:10:32,330
So for the moment,

126
00:10:32,330 --> 00:10:37,590
what we'll do is to use an if statement to make sure that these values are red.

127
00:10:37,590 --> 00:10:39,080
They just skipped over,

128
00:10:39,080 --> 00:10:43,650
and perhaps we can enter a default value of not applicable or not available.

129
00:10:43,650 --> 00:10:49,010
Perhaps we can enter a default values instead of attempting to actually read the Value

130
00:10:49,010 --> 00:10:49,670
property.

131
00:10:49,670 --> 00:10:53,800
So let's just have a look at the document that's being generated.

132
00:10:53,800 --> 00:10:56,710
So it got this far with no problem,

133
00:10:56,710 --> 00:10:58,870
but then when it trying to read the next value.

134
00:10:58,870 --> 00:11:00,050
It failed.

135
00:11:00,050 --> 00:11:06,850
Several close about saving on this is the culprit.

136
00:11:06,850 --> 00:11:08,280
This is what's causing the problem.

137
00:11:08,280 --> 00:11:12,450
So we need to make sure that that is contained in an if statement,

138
00:11:12,450 --> 00:11:17,950
so it doesn't attempt to do that line unless the conditions are correct.

139
00:11:17,950 --> 00:11:27,050
So we basically need to say if I is not equal to that's the symbol that means not equal to

140
00:11:27,050 --> 00:11:30,300
10 ums.

141
00:11:30,300 --> 00:11:36,100
I is not equal to 12 and well,

142
00:11:36,100 --> 00:11:45,780
we want to say eyes not equal to 25 26 27 for 28 and a quick way of doing that would be to

143
00:11:45,780 --> 00:12:01,930
say not and then in brackets I greater than or equal to 25 and I less than or equal to 28

144
00:12:01,930 --> 00:12:03,920
and then close brackets,

145
00:12:03,920 --> 00:12:05,920
then we need the key word.

146
00:12:05,920 --> 00:12:14,020
Then we can tabal of their sent to make it more readable and then close that with and lif

147
00:12:14,020 --> 00:12:20,190
and it might be useful to put in else in there as well.

148
00:12:20,190 --> 00:12:36,720
So so str value equals and let's just say not available and again we can save and we

149
00:12:36,720 --> 00:12:37,350
contest.

150
00:12:37,350 --> 00:12:43,550
So by using the if statement,

151
00:12:43,550 --> 00:12:46,770
we've managed to avoid the problem parameters,

152
00:12:46,770 --> 00:12:51,750
and we're only attempting to read the value on those elements where the value is available

153
00:12:51,750 --> 00:13:06,370
before next.

154
00:13:06,370 --> 00:13:11,750
Lube uses a counter to control the repeated execution of a series of statements within the

155
00:13:11,750 --> 00:13:12,180
loop.

156
00:13:12,180 --> 00:13:19,850
The counter itself could be used to further refine code execution before each next loop.

157
00:13:19,850 --> 00:13:23,670
He's used to live through the items within a collection of word objects,

158
00:13:23,670 --> 00:13:25,150
such as documents.

159
00:13:25,150 --> 00:13:35,020
The for next loop uses the syntax for counter equals start value toe end value,

160
00:13:35,020 --> 00:13:36,920
Step X,

161
00:13:36,920 --> 00:13:41,040
where X is any integer statements.

162
00:13:41,040 --> 00:13:47,510
Next counter the four each.

163
00:13:47,510 --> 00:13:55,620
Next loop uses the syntax for each object variable in object collection statements.

164
00:13:55,620 --> 00:13:58,360
Next object variable.

