WEBVTT
ï»¿1
00:00:00.000 --> 00:00:17.920
in this video will discuss functions and look at how they differ from subroutines.

2
00:00:17.920 --> 00:00:19.200
As you'll see,

3
00:00:19.200 --> 00:00:24.680
the main difference is it functions can return a value that this could be very useful.

4
00:00:24.680 --> 00:00:30.220
We've already seen how you can use the built in functions within the V A,

5
00:00:30.220 --> 00:00:35.580
such as input box and how they can be used to populate your variables.

6
00:00:35.580 --> 00:00:40.660
But in this video will move on to look at how you can define your own functions.

7
00:00:40.660 --> 00:00:45.550
In the last video,

8
00:00:45.550 --> 00:00:47.720
we looked at how you could model.

9
00:00:47.720 --> 00:00:51.090
Arise your code by having separate subroutines,

10
00:00:51.090 --> 00:00:55.350
which you then call in addition to this model organization.

11
00:00:55.350 --> 00:00:58.950
If you use functions rather than subroutines,

12
00:00:58.950 --> 00:01:03.250
you have the advantage that each function can return a value.

13
00:01:03.250 --> 00:01:06.800
Let's look at an illustration of way that's so useful.

14
00:01:06.800 --> 00:01:14.450
Let's create a similar structure to the one that you used in the last video.

15
00:01:14.450 --> 00:01:22.070
So his own macron and we'll call it main ones more.

16
00:01:22.070 --> 00:01:25.950
And let's say that inside this we're going to call the function,

17
00:01:25.950 --> 00:01:30.810
and again it's going to create a document.

18
00:01:30.810 --> 00:01:37.750
Now let's define the function again.

19
00:01:37.750 --> 00:01:39.380
We use the keyword private,

20
00:01:39.380 --> 00:01:41.900
but instead of sub you say function,

21
00:01:41.900 --> 00:01:45.650
then let's paste in the name presente.

22
00:01:45.650 --> 00:01:49.990
However,

23
00:01:49.990 --> 00:01:52.310
now there's one additional thing that we could do.

24
00:01:52.310 --> 00:01:56.350
We can define the type of data which are function will return.

25
00:01:56.350 --> 00:01:57.820
So in this case,

26
00:01:57.820 --> 00:02:00.940
let's say that we want the function to return the document,

27
00:02:00.940 --> 00:02:06.970
which it actually creates to specify this data type after the parentheses,

28
00:02:06.970 --> 00:02:11.960
which follows the name of the function you put the ass keyword in exactly the same way is

29
00:02:11.960 --> 00:02:15.040
when you're declaring a variable followed by the data type.

30
00:02:15.040 --> 00:02:18.250
So for creating the document,

31
00:02:18.250 --> 00:02:20.650
let's use the code that we recorded before.

32
00:02:20.650 --> 00:02:35.730
So I'm gonna copy all of this and after our function has created a document,

33
00:02:35.730 --> 00:02:39.850
we now want to return a reference to that document.

34
00:02:39.850 --> 00:02:45.130
And the way that this is done in Baby A is very similar to the way in which you assign

35
00:02:45.130 --> 00:02:46.490
value to a variable.

36
00:02:46.490 --> 00:02:50.430
So because we've defined a function which returns at an object,

37
00:02:50.430 --> 00:02:51.450
a document object,

38
00:02:51.450 --> 00:02:53.650
we need to use the keyword set.

39
00:02:53.650 --> 00:02:56.450
We then use the name of the function,

40
00:02:56.450 --> 00:03:01.710
so I'll just copy that and faced it in equal to.

41
00:03:01.710 --> 00:03:05.650
And then we put a reference to the document because we've just created it.

42
00:03:05.650 --> 00:03:09.010
It's safe to say active document.

43
00:03:09.010 --> 00:03:12.750
So now we have a function that returns the value,

44
00:03:12.750 --> 00:03:15.450
which is the document that it's just created.

45
00:03:15.450 --> 00:03:20.660
We now have the option in the main module in the main subroutine,

46
00:03:20.660 --> 00:03:24.860
a macro of actually using that value that document.

47
00:03:24.860 --> 00:03:26.020
So here,

48
00:03:26.020 --> 00:03:27.850
instead of just a function call,

49
00:03:27.850 --> 00:03:30.250
we could also populate a variable.

50
00:03:30.250 --> 00:03:32.650
So let's define a variable.

51
00:03:32.650 --> 00:03:46.230
And then here we can actually populate that variable because it's an object,

52
00:03:46.230 --> 00:03:54.100
will you set equals and then we've got our function cool.

53
00:03:54.100 --> 00:03:55.730
However,

54
00:03:55.730 --> 00:03:57.080
when using this syntax,

55
00:03:57.080 --> 00:03:59.600
we could no longer use the keyword call.

56
00:03:59.600 --> 00:04:04.830
So we'll just remove that and then to test that this is working.

57
00:04:04.830 --> 00:04:12.060
Let's just use message box the documents contains.

58
00:04:12.060 --> 00:04:14.560
And then I say,

59
00:04:14.560 --> 00:04:15.090
Doc,

60
00:04:15.090 --> 00:04:21.510
you dot characters locked count ampersand characters.

61
00:04:21.510 --> 00:04:26.850
So now we can say about changes,

62
00:04:26.850 --> 00:04:30.650
and then let's test it.

63
00:04:30.650 --> 00:04:34.750
So here's our new documents,

64
00:04:34.750 --> 00:04:37.950
and it contains 24 characters.

65
00:04:37.950 --> 00:04:39.950
So,

66
00:04:39.950 --> 00:04:40.540
as you can see,

67
00:04:40.540 --> 00:04:46.750
the ability to return a value adds another that I mentioned to functions which subroutines

68
00:04:46.750 --> 00:04:49.520
don't have in the next video.

69
00:04:49.520 --> 00:04:54.760
We'll move on to look at how you can use parameters in subroutine and function calls on

70
00:04:54.760 --> 00:04:59.500
This adds even more flexibility and more power to the process of model organization.

71
00:04:59.500 --> 00:05:09.370
In addition to model,

72
00:05:09.370 --> 00:05:14.770
a rise in your code functions a capable of returning information into a variable used in

73
00:05:14.770 --> 00:05:15.300
the function.

74
00:05:15.300 --> 00:05:20.650
Call when defining the function.

75
00:05:20.650 --> 00:05:24.300
Precede its name with the keywords private function.

76
00:05:24.300 --> 00:05:34.900
To specify the data type returned by a function used the syntax as data type after the

77
00:05:34.900 --> 00:05:36.140
closing parentheses,

78
00:05:36.140 --> 00:05:37.630
which follow the function name.

79
00:05:37.630 --> 00:05:43.550
To specify the value returned by a function.

80
00:05:43.550 --> 00:05:45.320
Use this Intacs.

81
00:05:45.320 --> 00:05:55.750
Let my function equal data value The functions which return data values set my function

82
00:05:55.750 --> 00:06:00.990
equal to object name for functions which return objects.

