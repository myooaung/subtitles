1
00:00:00,000 --> 00:00:12,020
in this video,

2
00:00:12,020 --> 00:00:14,420
we'll look at the use of constant in B.

3
00:00:14,420 --> 00:00:14,610
B.

4
00:00:14,610 --> 00:00:14,840
A.

5
00:00:14,840 --> 00:00:19,230
We've seen how you can use variables to store values,

6
00:00:19,230 --> 00:00:23,590
which potentially contain several times during the execution of your macron.

7
00:00:23,590 --> 00:00:24,820
However,

8
00:00:24,820 --> 00:00:27,610
you very often need to keep track of values,

9
00:00:27,610 --> 00:00:31,320
which will always be the same as your code executes.

10
00:00:31,320 --> 00:00:37,020
These are the kinds of values which is storing Constance rather than in variables.

11
00:00:37,020 --> 00:00:57,550
So once again we're working in the Section three model off the word VB a train in the

12
00:00:57,550 --> 00:01:00,760
template and we go to create a macro,

13
00:01:00,760 --> 00:01:03,510
which illustrates the use off Constance.

14
00:01:03,510 --> 00:01:10,890
And we're taking the example off a message that's displayed in the error handling sections

15
00:01:10,890 --> 00:01:11,450
overall.

16
00:01:11,450 --> 00:01:12,000
Macro,

17
00:01:12,000 --> 00:01:18,800
which gives the technical support email address that should be contacted when the user has

18
00:01:18,800 --> 00:01:19,550
problems.

19
00:01:19,550 --> 00:01:23,540
Since this email address is going to be used several times,

20
00:01:23,540 --> 00:01:28,420
it's useful to define it as a constant so that if it needs to be changed,

21
00:01:28,420 --> 00:01:33,630
we only have to make the trained ones that will update wherever it's been referred to

22
00:01:33,630 --> 00:01:34,550
within our code.

23
00:01:34,550 --> 00:01:41,940
So let's create our macron and let's simply call it using constants.

24
00:01:41,940 --> 00:01:43,250
Look,

25
00:01:43,250 --> 00:01:49,790
I'll just switch across now to procedure view to declare a constant used.

26
00:01:49,790 --> 00:01:52,150
The key word constant as opposed to didn't.

27
00:01:52,150 --> 00:01:58,570
And it's also useful to make it easy for constants to be distinguished from variables.

28
00:01:58,570 --> 00:02:02,780
One technique is to use upper case letters for the name of the constant.

29
00:02:02,780 --> 00:02:04,620
We can still use the prefix,

30
00:02:04,620 --> 00:02:09,510
so str support the veil because everything is up.

31
00:02:09,510 --> 00:02:10,640
A case we need to have.

32
00:02:10,640 --> 00:02:15,850
A separator between words and the permitted separator is the underscore character.

33
00:02:15,850 --> 00:02:20,350
We then specify the type,

34
00:02:20,350 --> 00:02:21,610
just as we do,

35
00:02:21,610 --> 00:02:22,950
or we declare a variable.

36
00:02:22,950 --> 00:02:30,340
But what's different is that because this is a constant whose value will not change,

37
00:02:30,340 --> 00:02:32,750
we now have to say what that value is.

38
00:02:32,750 --> 00:02:38,590
So let's say support at some company.

39
00:02:38,590 --> 00:02:49,720
Don't come another example of where you would use a constant might be if you had a rate

40
00:02:49,720 --> 00:02:53,550
such as V A T value added tax that we use in Europe,

41
00:02:53,550 --> 00:02:56,380
which occasionally a subject to change.

42
00:02:56,380 --> 00:03:01,690
So if you're going to refer to it several times during your code again,

43
00:03:01,690 --> 00:03:07,830
you define it once is a constant rather than hard code in the actual rate in your lines of

44
00:03:07,830 --> 00:03:08,350
code.

45
00:03:08,350 --> 00:03:11,290
So let's take bettors are second example,

46
00:03:11,290 --> 00:03:15,620
Combs s N dri.

47
00:03:15,620 --> 00:03:21,800
That rate a single equals Notley,

48
00:03:21,800 --> 00:03:22,250
too,

49
00:03:22,250 --> 00:03:28,140
and we might also want to store a formatted version of this,

50
00:03:28,140 --> 00:03:32,280
which would be a string STL.

51
00:03:32,280 --> 00:03:41,350
That rate has strength equals 20%.

52
00:03:41,350 --> 00:03:49,960
Then let's say we're in the middle of our air handling section and we want to use an MSG

53
00:03:49,960 --> 00:03:54,650
box that includes a reference to these constants.

54
00:03:54,650 --> 00:04:13,850
Let's just split the line,

55
00:04:13,850 --> 00:04:20,700
So ampersand str support,

56
00:04:20,700 --> 00:04:21,350
you know,

57
00:04:21,350 --> 00:04:38,790
And then we'll put a couple of blank lines in spending line one small then we might say in

58
00:04:38,790 --> 00:04:39,780
parentheses.

59
00:04:39,780 --> 00:04:42,000
Hourly rates.

60
00:04:42,000 --> 00:04:46,250
From now we could say hourly rates of £50.

61
00:04:46,250 --> 00:04:50,550
But what would be better would be to have another concert.

62
00:04:50,550 --> 00:04:52,650
So Const.

63
00:04:52,650 --> 00:04:57,250
Sng away,

64
00:04:57,250 --> 00:04:58,650
right?

65
00:04:58,650 --> 00:05:00,350
A single.

66
00:05:00,350 --> 00:05:02,750
It cools 50.

67
00:05:02,750 --> 00:05:24,350
We could can Katyn eight hour only rate subject to They see that after sound you Let's

68
00:05:24,350 --> 00:05:32,050
split the line again snz our rates on your the full stop.

69
00:05:32,050 --> 00:05:37,850
So let's save and test our code.

70
00:05:37,850 --> 00:05:45,850
So our common messages and the values held in our constants are inserted.

71
00:05:45,850 --> 00:05:55,810
Let's just go back to full nodule view for a moment and refer back to the macro that we did

72
00:05:55,810 --> 00:06:03,710
in the last video This variable de 80 Target is a prime candidate,

73
00:06:03,710 --> 00:06:08,180
for definition is a constant because it doesn't actually change.

74
00:06:08,180 --> 00:06:11,350
It's not designed to change throughout code execution.

75
00:06:11,350 --> 00:06:12,850
So here,

76
00:06:12,850 --> 00:06:14,950
rather than having dim,

77
00:06:14,950 --> 00:06:17,760
we should really have constant.

78
00:06:17,760 --> 00:06:21,050
And then let's change the capitalizations and match.

79
00:06:21,050 --> 00:06:22,840
And then,

80
00:06:22,840 --> 00:06:23,590
of course,

81
00:06:23,590 --> 00:06:29,990
we have to define it so we can move equals,

82
00:06:29,990 --> 00:06:31,150
followed by the date.

83
00:06:31,150 --> 00:06:33,480
And then let's just delink this.

84
00:06:33,480 --> 00:06:39,950
Another candidate would be here with hard coded that figure of 14.

85
00:06:39,950 --> 00:06:43,050
It would be far better to define a constant,

86
00:06:43,050 --> 00:06:52,190
let's say was called int critical date or int critical days and set back to 14 and use the

87
00:06:52,190 --> 00:06:55,750
constant in our code rather than the literal valued.

88
00:06:55,750 --> 00:06:58,550
So let's do that as well.

89
00:06:58,550 --> 00:07:17,770
Send in critical the able ass as Inter jure equals 14 and then we can use that name instead

90
00:07:17,770 --> 00:07:18,450
of 14.

91
00:07:18,450 --> 00:07:23,600
Let's just make sure that we haven't broken the code by doing this.

92
00:07:23,600 --> 00:07:27,150
Everything still seems fine,

93
00:07:27,150 --> 00:07:30,810
but we've added a bit of clarity to the code that we had.

94
00:07:30,810 --> 00:07:33,150
So let's just say about changes.

95
00:07:33,150 --> 00:07:47,550
Constant should be used to store values which required by your macro,

96
00:07:47,550 --> 00:07:51,050
but which will not changed your in code execution.

97
00:07:51,050 --> 00:07:59,420
It is also useful to define literal values as Constance rather than embedding the literal

98
00:07:59,420 --> 00:08:00,220
is in your code.

