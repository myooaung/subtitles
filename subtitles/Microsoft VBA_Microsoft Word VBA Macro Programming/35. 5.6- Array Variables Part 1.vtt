WEBVTT
ï»¿1
00:00:00.000 --> 00:00:13.550
We've already made extensive use of variables,

2
00:00:13.550 --> 00:00:16.500
and we've seen how essential they are in programming.

3
00:00:16.500 --> 00:00:18.170
In this video,

4
00:00:18.170 --> 00:00:22.220
we'll move on to look at a rave variables These variables,

5
00:00:22.220 --> 00:00:27.210
which allow you to store a related set of values rather than a single value,

6
00:00:27.210 --> 00:00:31.880
like the variables we've seen so far before.

7
00:00:31.880 --> 00:00:33.560
We start coded Let's have a look,

8
00:00:33.560 --> 00:00:40.100
a diagram that illustrates the difference between scaler for ordinary variables and array

9
00:00:40.100 --> 00:00:46.200
variables that's going to the Exercises folder and then into the Section five folder

10
00:00:46.200 --> 00:00:47.750
Conditional Loops in a race.

11
00:00:47.750 --> 00:00:51.550
And here you'll find a ray Variables diagram,

12
00:00:51.550 --> 00:00:53.450
which is an Excel file.

13
00:00:53.450 --> 00:00:56.450
Variables would work with so far,

14
00:00:56.450 --> 00:00:59.150
have all held a single value,

15
00:00:59.150 --> 00:01:01.460
and they have all been unrelated,

16
00:01:01.460 --> 00:01:08.720
so variable one might hold a document variable to my oldest string value and so forth.

17
00:01:08.720 --> 00:01:10.190
There are times,

18
00:01:10.190 --> 00:01:10.650
however,

19
00:01:10.650 --> 00:01:16.150
where you need to store a series of elements which have some relationship to one another.

20
00:01:16.150 --> 00:01:17.550
For example,

21
00:01:17.550 --> 00:01:22.140
you might want to store the names of a series of documents that you need to work with.

22
00:01:22.140 --> 00:01:25.650
You might want to store a series of email addresses,

23
00:01:25.650 --> 00:01:29.450
stories of any set of related values,

24
00:01:29.450 --> 00:01:32.010
and this is where an array comes in.

25
00:01:32.010 --> 00:01:35.650
So here we have three arrays.

26
00:01:35.650 --> 00:01:38.750
The 1st 1 holds 10 values.

27
00:01:38.750 --> 00:01:45.650
The 2nd 1 holds eight and the third ones designed to hold an indeterminate number of values

28
00:01:45.650 --> 00:01:45.650
,

29
00:01:45.650 --> 00:01:47.900
and this is called a dynamic array.

30
00:01:47.900 --> 00:01:51.250
We'll talk about dynamic arrays in the next video.

31
00:01:51.250 --> 00:01:52.950
In this video,

32
00:01:52.950 --> 00:01:55.490
we'll deal with what are called fixed arrays,

33
00:01:55.490 --> 00:02:01.710
where you specify the number of elements that the you're able hold when you declare it as

34
00:02:01.710 --> 00:02:03.410
we'll see when you declare an array,

35
00:02:03.410 --> 00:02:05.950
there are two ways of specifying its dimension.

36
00:02:05.950 --> 00:02:08.050
Each element within an array.

37
00:02:08.050 --> 00:02:10.150
It's identified by an index.

38
00:02:10.150 --> 00:02:14.450
So here we have index one in next to and so forth.

39
00:02:14.450 --> 00:02:17.050
When you declare a fixed array,

40
00:02:17.050 --> 00:02:19.850
you specify the lower and upper limits.

41
00:02:19.850 --> 00:02:22.350
You can either do this explicitly.

42
00:02:22.350 --> 00:02:23.550
I was here,

43
00:02:23.550 --> 00:02:28.590
so we've said the first item is itin one and the last ice in his light,

44
00:02:28.590 --> 00:02:30.740
and 10 there will have 10 items,

45
00:02:30.740 --> 00:02:32.750
and they're clearly numbered.

46
00:02:32.750 --> 00:02:38.670
So this item is light in five,

47
00:02:38.670 --> 00:02:40.650
and it has an index of five.

48
00:02:40.650 --> 00:02:43.550
There's a second way of specifying the dimension,

49
00:02:43.550 --> 00:02:50.700
which is to use a single dunder in parentheses after the name of the Array When you do this

50
00:02:50.700 --> 00:02:50.700
,

51
00:02:50.700 --> 00:02:53.790
you're specifying the upper limit and V b A.

52
00:02:53.790 --> 00:02:56.150
Then supplies the default lower limit.

53
00:02:56.150 --> 00:02:57.110
However,

54
00:02:57.110 --> 00:03:00.650
the default lower limit is zero rather than one.

55
00:03:00.650 --> 00:03:03.550
So if I place that seven in parentheses,

56
00:03:03.550 --> 00:03:10.950
it's equivalent to saying 0 to 7 lower limit zero couple in its seven.

57
00:03:10.950 --> 00:03:16.050
So here this is the fifth element in my array,

58
00:03:16.050 --> 00:03:20.210
but it will have an index of full for clarity.

59
00:03:20.210 --> 00:03:27.410
It's usually best to use this style of declaration explicitly specifying the lowest index

60
00:03:27.410 --> 00:03:28.720
on the highest index,

61
00:03:28.720 --> 00:03:32.350
and this is the style that will use during these tutorials.

62
00:03:32.350 --> 00:03:34.150
Okay,

63
00:03:34.150 --> 00:03:35.750
so let's now have a look at coded.

64
00:03:35.750 --> 00:03:45.240
We'll go back to the main Exercises folder and into our word VB,

65
00:03:45.240 --> 00:03:56.050
a training template that's going to model five and let's rise our first macro.

66
00:03:56.050 --> 00:03:58.550
So in this example,

67
00:03:58.550 --> 00:03:59.170
well,

68
00:03:59.170 --> 00:04:00.050
right on macro,

69
00:04:00.050 --> 00:04:07.840
which stools an array of branches will then look through our ray and compare the name of

70
00:04:07.840 --> 00:04:11.850
the bronze that the users entered with the branches in our array.

71
00:04:11.850 --> 00:04:13.750
If there's no match,

72
00:04:13.750 --> 00:04:16.750
we won't give them access to our application.

73
00:04:16.750 --> 00:04:23.250
Otherwise we will So sub s 0506 a.

74
00:04:23.250 --> 00:04:25.590
Now let's call it Validation.

75
00:04:25.590 --> 00:04:27.850
Maya Array.

76
00:04:27.850 --> 00:04:36.250
Let's that move across the procedure view and let's begin by declaring our variables.

77
00:04:36.250 --> 00:04:38.060
So first of all,

78
00:04:38.060 --> 00:04:40.940
we'll need a variable to store the users.

79
00:04:40.940 --> 00:04:41.550
Answer.

80
00:04:41.550 --> 00:04:43.280
Let's call this past,

81
00:04:43.280 --> 00:04:43.760
er,

82
00:04:43.760 --> 00:04:46.650
to use a branch that's straight.

83
00:04:46.650 --> 00:04:50.450
Then we'll need an array variable off branches.

84
00:04:50.450 --> 00:04:53.650
Let's say for argument's sake that there are five branches.

85
00:04:53.650 --> 00:04:56.750
Let's use an A to indicate that it's an array.

86
00:04:56.750 --> 00:05:05.400
Str to indicate that it's a string on branches and the important thing we remember is in

87
00:05:05.400 --> 00:05:07.250
parentheses after that name.

88
00:05:07.250 --> 00:05:10.550
We then say lower limit or first index,

89
00:05:10.550 --> 00:05:14.950
which will say is one to upper limit,

90
00:05:14.950 --> 00:05:16.980
which will say it's fine.

91
00:05:16.980 --> 00:05:19.440
And then we put a strength.

92
00:05:19.440 --> 00:05:22.950
Let's then populates the array.

93
00:05:22.950 --> 00:05:24.060
Did you do that?

94
00:05:24.060 --> 00:05:30.170
We just target each index so it's a str branches brackets,

95
00:05:30.170 --> 00:05:32.210
one equals,

96
00:05:32.210 --> 00:05:33.380
And of course,

97
00:05:33.380 --> 00:05:34.790
we've defined it as a strength.

98
00:05:34.790 --> 00:05:35.830
So in double quotes,

99
00:05:35.830 --> 00:05:37.050
we put the first brunch.

100
00:05:37.050 --> 00:05:48.220
Let's say London than str branches to Manchester

101
00:05:48.220 --> 00:06:10.750
and that's it.

102
00:06:10.750 --> 00:06:17.730
Now let's also use it to enter their branch look And of course,

103
00:06:17.730 --> 00:06:19.150
we used input box.

104
00:06:19.150 --> 00:06:32.620
We now need to loop through our array and compare each value with the value entered by the

105
00:06:32.620 --> 00:06:33.050
user.

106
00:06:33.050 --> 00:06:34.630
So to do the loop,

107
00:06:34.630 --> 00:06:39.450
let's just go back to the top and then I as integer.

108
00:06:39.450 --> 00:06:48.550
And then let's use I as the counter in our Luke.

109
00:06:48.550 --> 00:06:52.890
So for I equals Now,

110
00:06:52.890 --> 00:06:57.250
we know that the lowest index is one and the highest in Nexus five.

111
00:06:57.250 --> 00:06:58.920
But of course,

112
00:06:58.920 --> 00:07:00.650
as our code develops,

113
00:07:00.650 --> 00:07:02.050
that may well change.

114
00:07:02.050 --> 00:07:04.830
So when you're living through an array,

115
00:07:04.830 --> 00:07:09.990
there are two very useful functions that you can use to calculate automatically.

116
00:07:09.990 --> 00:07:15.250
The lowest index on the highest index and they are hell bound and you bound.

117
00:07:15.250 --> 00:07:29.590
So l bound a str branches to you bounds Nastya punches on.

118
00:07:29.590 --> 00:07:32.350
Then let's close it with next I.

119
00:07:32.350 --> 00:07:36.550
We now need the next statement to test whether or not there's a match.

120
00:07:36.550 --> 00:07:42.150
And it would also be useful to have a 1,000,000,000 value in which we could store true or

121
00:07:42.150 --> 00:07:45.650
false to indicate whether or not we found a match.

122
00:07:45.650 --> 00:07:55.150
So let's go back and declare one of those said a dimmer PLN found as 1,000,000,000.

123
00:07:55.150 --> 00:07:58.050
When you declare a 1,000,000,000 variable,

124
00:07:58.050 --> 00:08:01.450
it is automatically initialized with the value false.

125
00:08:01.450 --> 00:08:03.780
So inside our looped,

126
00:08:03.780 --> 00:08:08.950
if we find a match will change it to truth once the loop ends.

127
00:08:08.950 --> 00:08:11.810
If BLN found is still false.

128
00:08:11.810 --> 00:08:14.250
That indicates that we haven't found the match.

129
00:08:14.250 --> 00:08:24.940
So let's Jarek statement So here we want to test each value in str branches with str user

130
00:08:24.940 --> 00:08:31.150
Branch the value entered by the user This comparison will be case sensitive.

131
00:08:31.150 --> 00:08:33.300
So in fairness to the user,

132
00:08:33.300 --> 00:08:40.650
a simple trick is to convert both items being compared to exactly the same case.

133
00:08:40.650 --> 00:08:45.950
We can do this using either you case or l case on both elements.

134
00:08:45.950 --> 00:08:51.430
That way the case that they use actually uses when entering the branch will be completely

135
00:08:51.430 --> 00:08:51.950
ignored.

136
00:08:51.950 --> 00:08:58.870
So let's go for you case So it's gonna be a few case s t ah,

137
00:08:58.870 --> 00:09:11.410
using branch equals you case a str bronzes and then in brackets weaken say I to target eat

138
00:09:11.410 --> 00:09:17.690
elements within the array because of course I will change constantly as we go through the

139
00:09:17.690 --> 00:09:25.050
loop then and all we've got to do inside the loop is to set bln.

140
00:09:25.050 --> 00:09:27.850
I found equal to truth.

141
00:09:27.850 --> 00:09:30.950
Another simple thing you can do.

142
00:09:30.950 --> 00:09:39.000
It's too exit the four loop not particularly important here because you've only got five

143
00:09:39.000 --> 00:09:39.550
elements.

144
00:09:39.550 --> 00:09:44.600
But if we had 500 we found a match when I was equal to two.

145
00:09:44.600 --> 00:09:54.550
There would be no point in doing the remaining 498 tests on and if one solid has finished,

146
00:09:54.550 --> 00:09:57.050
we simply test BLN found.

147
00:09:57.050 --> 00:09:58.670
If it's true,

148
00:09:58.670 --> 00:10:11.310
we know there's been a match so we can say if BLN found equals truth men on a street box.

149
00:10:11.310 --> 00:10:20.600
Welcome to the act else mystery box.

150
00:10:20.600 --> 00:10:26.950
Sorry from recognised,

151
00:10:26.950 --> 00:10:29.150
I think.

152
00:10:29.150 --> 00:10:34.550
And so let's test.

153
00:10:34.550 --> 00:10:39.390
We'll save on Run on.

154
00:10:39.390 --> 00:10:41.950
I've got a typo here on branches.

155
00:10:41.950 --> 00:10:48.850
Let's try again.

156
00:10:48.850 --> 00:10:51.400
So let's try and erroneous one.

157
00:10:51.400 --> 00:10:52.040
First of all,

158
00:10:52.040 --> 00:10:57.660
let's say they're working this Ponzi Sorry.

159
00:10:57.660 --> 00:10:59.030
Brunch Not recognized.

160
00:10:59.030 --> 00:11:11.730
Let's try it with one of base on will enter it in lower case deliberately and then we get

161
00:11:11.730 --> 00:11:12.550
welcome to the APP

