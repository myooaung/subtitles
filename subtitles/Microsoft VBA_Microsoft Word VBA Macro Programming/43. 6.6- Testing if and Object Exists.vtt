WEBVTT
ï»¿1
00:00:00.000 --> 00:00:10.620
people,

2
00:00:10.620 --> 00:00:12.480
creating a reference to an object.

3
00:00:12.480 --> 00:00:17.210
You need to be sure that it actually exists in this video.

4
00:00:17.210 --> 00:00:21.350
We'll look at how you can test for the existence of an object within a collection.

5
00:00:21.350 --> 00:00:25.750
Let's open up the exercises folder.

6
00:00:25.750 --> 00:00:37.650
Let's go into a word BB A Train in Template And here's the code for our Section six module

7
00:00:37.650 --> 00:00:37.650
.

8
00:00:37.650 --> 00:00:48.190
We have a look at reference in objects we worked with this file tables.

9
00:00:48.190 --> 00:00:49.150
That Dark Axe,

10
00:00:49.150 --> 00:00:51.700
which is in the Section six folder,

11
00:00:51.700 --> 00:00:53.650
and the code we used,

12
00:00:53.650 --> 00:01:01.150
assumed that the file actually was open to make our code a bit Maura bust.

13
00:01:01.150 --> 00:01:05.400
We should really test to see whether the file is open before proceeding.

14
00:01:05.400 --> 00:01:08.850
So let's look at how that test is done.

15
00:01:08.850 --> 00:01:14.890
I'll just copy the name and let's create a new macro.

16
00:01:14.890 --> 00:01:23.740
Let's call this one test it object exists.

17
00:01:23.740 --> 00:01:32.060
The simplest way to test whether an object exists within a collection is to look through

18
00:01:32.060 --> 00:01:36.250
all the objects in the collection and to test one key attribute.

19
00:01:36.250 --> 00:01:38.480
So in the case of documents,

20
00:01:38.480 --> 00:01:41.550
the obvious attributes to test is the name.

21
00:01:41.550 --> 00:01:46.050
Let's start by declaring the necessary variables,

22
00:01:46.050 --> 00:01:48.400
so we'll meet a counter.

23
00:01:48.400 --> 00:01:52.150
We'll need a document variable.

24
00:01:52.150 --> 00:02:01.550
Let's also create a 1,000,000,000 variable in which we can store the result of our test.

25
00:02:01.550 --> 00:02:11.600
So now we live through our documents.

26
00:02:11.600 --> 00:02:18.170
So we started document one and we end on documents.

27
00:02:18.170 --> 00:02:18.440
Scott,

28
00:02:18.440 --> 00:02:25.050
count the count Property will return the number of documents in the collection.

29
00:02:25.050 --> 00:02:26.160
And of course,

30
00:02:26.160 --> 00:02:30.390
that number will also be the number of the last document in the collection.

31
00:02:30.390 --> 00:02:35.360
Inside our loot,

32
00:02:35.360 --> 00:02:41.860
we now want to read each document within the collection into our doc tables Document

33
00:02:41.860 --> 00:02:42.450
variable.

34
00:02:42.450 --> 00:02:44.910
So we need sets,

35
00:02:44.910 --> 00:02:58.840
dog tables equal to documents I And by using I as the index to identify the document,

36
00:02:58.840 --> 00:03:05.550
we're effectively saying each document we can then compare the name property of dog tables

37
00:03:05.550 --> 00:03:11.350
to the string that we're looking for and to make the comparison less stringent,

38
00:03:11.350 --> 00:03:16.090
we can convert the case of the name before doing the comparison.

39
00:03:16.090 --> 00:03:18.850
So let's convert everything to lower case.

40
00:03:18.850 --> 00:03:23.650
So our test will be If l case,

41
00:03:23.650 --> 00:03:33.550
Doc tables don't name equals and I'll just paste in the string that I copied earlier.

42
00:03:33.550 --> 00:03:37.850
And make sure I changed everything to love a case.

43
00:03:37.850 --> 00:03:49.150
So we comparing lower case with lower case Then when we find a match,

44
00:03:49.150 --> 00:03:50.240
we change.

45
00:03:50.240 --> 00:03:55.700
The value inside BLN exists when you didn't a 1,000,000,000 variable.

46
00:03:55.700 --> 00:03:58.760
It's initialized with the value false.

47
00:03:58.760 --> 00:04:00.950
So we now change it to true.

48
00:04:00.950 --> 00:04:04.750
And just in case we've got lots of documents open,

49
00:04:04.750 --> 00:04:07.450
we can then thanks it the full loop.

50
00:04:07.450 --> 00:04:13.890
After the move terminates we contest.

51
00:04:13.890 --> 00:04:19.550
The value of BLN exists the PLN exists is false will display an error message.

52
00:04:19.550 --> 00:04:20.740
If it's true,

53
00:04:20.740 --> 00:04:21.560
for the moment,

54
00:04:21.560 --> 00:04:33.240
we'll just display in all his well message that the land exists equals false than industry

55
00:04:33.240 --> 00:04:39.700
box with a from small documents.

56
00:04:39.700 --> 00:04:42.450
And I'll just paste in that string that I copied earlier.

57
00:04:42.450 --> 00:04:45.530
And let's say we wanted to be quoted.

58
00:04:45.530 --> 00:04:46.920
We wanted quote marks around it.

59
00:04:46.920 --> 00:04:50.510
The rule is because you are already inside quotation marks.

60
00:04:50.510 --> 00:04:54.800
You escape by doubling up the quotation monks.

61
00:04:54.800 --> 00:05:02.750
So that's how you count Put quotation marks on a literal string not found.

62
00:05:02.750 --> 00:05:05.650
Cannot continue.

63
00:05:05.650 --> 00:05:09.360
Come on,

64
00:05:09.360 --> 00:05:14.350
let's use the buttons perimeter to change this style.

65
00:05:14.350 --> 00:05:19.450
Now we can use baby exclamation.

66
00:05:19.450 --> 00:05:36.430
Let's just copy that for the else so well,

67
00:05:36.430 --> 00:05:36.860
we'll say.

68
00:05:36.860 --> 00:05:40.070
Here is oas.

69
00:05:40.070 --> 00:05:40.460
Well,

70
00:05:40.460 --> 00:05:43.270
instead of explanation,

71
00:05:43.270 --> 00:05:45.850
we can then have information,

72
00:05:45.850 --> 00:05:52.150
so let's save and test.

73
00:05:52.150 --> 00:05:55.020
Currently,

74
00:05:55.020 --> 00:05:56.320
the fine is not open,

75
00:05:56.320 --> 00:05:59.250
so we get our explanation cannot continue.

76
00:05:59.250 --> 00:06:09.700
Let's just go back to when his Explorer into the Section six folder while let's test the

77
00:06:09.700 --> 00:06:10.500
macro again.

78
00:06:10.500 --> 00:06:21.230
So this technical hold good for most objects that you need to test for or locate before

79
00:06:21.230 --> 00:06:22.650
your macro can continue.

80
00:06:22.650 --> 00:06:25.080
And I'm sure as we go through the course,

81
00:06:25.080 --> 00:06:38.490
we'll find other examples or using similar techniques to test whether a specific object

82
00:06:38.490 --> 00:06:44.030
exists within a collection looped through the collection and compare a key attributes of

83
00:06:44.030 --> 00:06:47.910
each object with a known attribute of the object which you are located.

84
00:06:47.910 --> 00:06:52.480
When comparing string attributes,

85
00:06:52.480 --> 00:06:58.150
the L case or you case function can be used to make the comparison less stringent.

