1
00:00:00,000 --> 00:00:14,440
Hello and welcome to Section four Word BB.

2
00:00:14,440 --> 00:00:19,870
A programming in this section will discuss ways of making your code more modular and

3
00:00:19,870 --> 00:00:25,530
efficient by separating different sections of code into different sub presages and

4
00:00:25,530 --> 00:00:26,280
functions.

5
00:00:26,280 --> 00:00:28,560
In this first radio,

6
00:00:28,560 --> 00:00:32,890
we'll revisit a technique that we discussed briefly in Section two,

7
00:00:32,890 --> 00:00:39,320
whereby you can have one main sub procedure that calls a Siris of subordinate subroutines.

8
00:00:39,320 --> 00:00:44,400
In this example,

9
00:00:44,400 --> 00:00:46,530
we want to record a macro,

10
00:00:46,530 --> 00:00:49,050
but to save messing up our template,

11
00:00:49,050 --> 00:00:51,250
we'll use a blank document.

12
00:00:51,250 --> 00:01:00,580
Although the steps that will be performing in the macro will be performed in this blank

13
00:01:00,580 --> 00:01:01,250
document,

14
00:01:01,250 --> 00:01:05,050
we still want our code toe end up in our template.

15
00:01:05,050 --> 00:01:10,450
So the first thing we'll do is to attach the template to this new document.

16
00:01:10,450 --> 00:01:12,550
We go to developer,

17
00:01:12,550 --> 00:01:17,150
document template and attach,

18
00:01:17,150 --> 00:01:22,620
and then we go across to our exercises folder,

19
00:01:22,620 --> 00:01:24,350
which is on my desktop.

20
00:01:24,350 --> 00:01:27,850
And here's our template.

21
00:01:27,850 --> 00:01:34,950
When we go across the visual basic you'll see here.

22
00:01:34,950 --> 00:01:38,170
I've still got my Section three module open.

23
00:01:38,170 --> 00:01:41,350
I'll just closed that down on going to Section four,

24
00:01:41,350 --> 00:01:42,820
which,

25
00:01:42,820 --> 00:01:43,310
of course,

26
00:01:43,310 --> 00:01:44,580
is completely blank,

27
00:01:44,580 --> 00:01:45,990
apart from our option,

28
00:01:45,990 --> 00:01:49,550
explicit just to remind you why that comes up.

29
00:01:49,550 --> 00:01:58,990
Tool's options require variable declaration because that switched on every new model will

30
00:01:58,990 --> 00:02:00,750
have option explicit inserted.

31
00:02:00,750 --> 00:02:05,560
Let me also remind you of a second way of a tat in a template to a document,

32
00:02:05,560 --> 00:02:07,450
especially if it's a blank document.

33
00:02:07,450 --> 00:02:11,750
We find the template,

34
00:02:11,750 --> 00:02:18,050
and we simply double quick it instead of the usual right click and open.

35
00:02:18,050 --> 00:02:20,980
So here we've ended up the document one.

36
00:02:20,980 --> 00:02:26,550
But because it's based on the template when we go into visual basic again,

37
00:02:26,550 --> 00:02:29,130
we have access to our word VB,

38
00:02:29,130 --> 00:02:30,350
a training template.

39
00:02:30,350 --> 00:02:35,700
Let's close that for the moment and let's go ahead and record a macro.

40
00:02:35,700 --> 00:02:42,950
So what we're going to do is to take the example of a document that we need to create,

41
00:02:42,950 --> 00:02:47,150
which tracks the creation of a series of reports.

42
00:02:47,150 --> 00:02:48,750
Each report,

43
00:02:48,750 --> 00:02:49,210
Let's say,

44
00:02:49,210 --> 00:02:49,710
has ah,

45
00:02:49,710 --> 00:02:52,350
an author who is responsible for its creation,

46
00:02:52,350 --> 00:02:56,630
and the document that were created will give details of each report.

47
00:02:56,630 --> 00:02:58,150
Who is its author?

48
00:02:58,150 --> 00:03:03,250
When is it due by and what percentage of the document is currently complete?

49
00:03:03,250 --> 00:03:03,890
So,

50
00:03:03,890 --> 00:03:04,260
of course,

51
00:03:04,260 --> 00:03:09,440
we begin by starting the macro recorder and let's use our usual name in convention.

52
00:03:09,440 --> 00:03:18,350
So we're in Section 04 This is video 01 Necro A and we'll call it Main.

53
00:03:18,350 --> 00:03:22,450
We don't want to save it in the normal template.

54
00:03:22,450 --> 00:03:27,300
We want to saving in our word VB a training template which we can access by choosing this

55
00:03:27,300 --> 00:03:27,750
option.

56
00:03:27,750 --> 00:03:35,150
And let's begin by put in the head in that we want a top of the document.

57
00:03:35,150 --> 00:03:39,830
Let's call it report creation summary.

58
00:03:39,830 --> 00:03:42,260
And then let's make that line ahead in one.

59
00:03:42,260 --> 00:03:51,550
Then let's insert a blank line or two and insert a table,

60
00:03:51,550 --> 00:04:00,150
so I'm going to have life Collins and two rows.

61
00:04:00,150 --> 00:04:02,110
Next,

62
00:04:02,110 --> 00:04:03,350
let's form at the table.

63
00:04:03,350 --> 00:04:08,340
And finally,

64
00:04:08,340 --> 00:04:09,550
let's add some headings.

65
00:04:09,550 --> 00:04:13,910
That's our macro completed.

66
00:04:13,910 --> 00:04:15,750
So we go across the developer.

67
00:04:15,750 --> 00:04:17,250
Stop recording.

68
00:04:17,250 --> 00:04:23,490
Now let's go into visual basic to see what we've ended up with.

69
00:04:23,490 --> 00:04:26,010
When used the recorder,

70
00:04:26,010 --> 00:04:28,950
it creates a module called Numac Rose,

71
00:04:28,950 --> 00:04:33,050
and obviously we specified that we wanted it to go into our template.

72
00:04:33,050 --> 00:04:36,080
And here's our new macro.

73
00:04:36,080 --> 00:04:45,800
So we'll begin by copy and all of this into our Section four model,

74
00:04:45,800 --> 00:04:56,150
and we can then lose Numac Rose.

75
00:04:56,150 --> 00:05:08,930
So what will now do is to divide this code into separate sections and Obviously,

76
00:05:08,930 --> 00:05:09,860
in reality,

77
00:05:09,860 --> 00:05:12,850
you would be working with longer sections of code,

78
00:05:12,850 --> 00:05:14,850
but the principle would be the same.

79
00:05:14,850 --> 00:05:20,050
So this section relates to the creation of the document itself.

80
00:05:20,050 --> 00:05:32,730
So let's cut this section and paste it into a separate subroutine because they're

81
00:05:32,730 --> 00:05:35,640
subroutine will not be a macro in its own right.

82
00:05:35,640 --> 00:05:42,110
We used the key word private So 0401 B and we'll call it create documents.

83
00:05:42,110 --> 00:05:47,750
Then we can paste in our code and let's just modify it slightly.

84
00:05:47,750 --> 00:05:49,760
So at the moment,

85
00:05:49,760 --> 00:05:53,050
all of this will happen in the active document.

86
00:05:53,050 --> 00:05:56,050
Let's say we want it to happen in a new document.

87
00:05:56,050 --> 00:05:58,320
So the start of this subroutine,

88
00:05:58,320 --> 00:06:03,750
we can just add in the statement that creates a new document documents Not bad.

89
00:06:03,750 --> 00:06:05,000
So obviously,

90
00:06:05,000 --> 00:06:06,500
when you create a new document,

91
00:06:06,500 --> 00:06:08,550
it becomes the active document,

92
00:06:08,550 --> 00:06:13,950
and all of this will then happen within that document.

93
00:06:13,950 --> 00:06:15,100
Now,

94
00:06:15,100 --> 00:06:20,410
one thing we're not going to do in this example is to work with variables will put

95
00:06:20,410 --> 00:06:23,310
variables on a back burner for a couple of videos.

96
00:06:23,310 --> 00:06:26,630
The reason is when you're working with multiple modules,

97
00:06:26,630 --> 00:06:28,820
you have to address a separate issue,

98
00:06:28,820 --> 00:06:32,070
which is the question of variable scope in other words,

99
00:06:32,070 --> 00:06:37,570
the places from within each module from which each variable can actually be accessed.

100
00:06:37,570 --> 00:06:41,460
So we weren't work with variables for a couple of videos,

101
00:06:41,460 --> 00:06:44,250
and then we'll will address the topic later.

102
00:06:44,250 --> 00:06:44,930
Okay,

103
00:06:44,930 --> 00:06:49,480
let's go back to our code and look at the next section that we want to create.

104
00:06:49,480 --> 00:06:53,530
So here the table is being created on here.

105
00:06:53,530 --> 00:06:54,750
It's being formatted.

106
00:06:54,750 --> 00:06:58,850
So let's put both of those into one subroutine.

107
00:06:58,850 --> 00:07:09,710
Several cut all of these lines and create a second private son.

108
00:07:09,710 --> 00:07:14,950
So this is create table and paste.

109
00:07:14,950 --> 00:07:23,720
And then finally,

110
00:07:23,720 --> 00:07:27,250
we have this section where we actually enter the headings.

111
00:07:27,250 --> 00:07:42,790
Let's call that create headings and then we just need to cool.

112
00:07:42,790 --> 00:07:44,850
Each of these sub presages.

113
00:07:44,850 --> 00:07:51,200
You can get rid of all these comments.

114
00:07:51,200 --> 00:08:03,850
So here we just need to use the optional keyword call,

115
00:08:03,850 --> 00:08:07,180
and it's always useful to use it so it stands out,

116
00:08:07,180 --> 00:08:11,850
so you can immediately see where each subroutine or function is being called.

117
00:08:11,850 --> 00:08:27,140
Control the control,

118
00:08:27,140 --> 00:08:27,570
say,

119
00:08:27,570 --> 00:08:28,400
of course,

120
00:08:28,400 --> 00:08:33,850
And there we have it.

121
00:08:33,850 --> 00:08:40,410
So this is a classic set up whereby you have a main subroutine,

122
00:08:40,410 --> 00:08:45,910
and it then calls several subordinate some procedures.

123
00:08:45,910 --> 00:08:50,150
So the macro is the one whose name is simply preceded by sub,

124
00:08:50,150 --> 00:08:56,750
that everything that's preceded by private sub is only available within this model.

125
00:08:56,750 --> 00:09:01,170
Two other sub procedures in this case to the main.

126
00:09:01,170 --> 00:09:03,390
Some procedure you can,

127
00:09:03,390 --> 00:09:03,860
of course,

128
00:09:03,860 --> 00:09:06,310
test each of these independently.

129
00:09:06,310 --> 00:09:13,270
Whether or not it works will depend on what that particular section of code does.

130
00:09:13,270 --> 00:09:14,510
For example,

131
00:09:14,510 --> 00:09:20,970
one private sub may require certain things to be in place before that code actually makes

132
00:09:20,970 --> 00:09:21,670
any sense.

133
00:09:21,670 --> 00:09:22,720
So normally,

134
00:09:22,720 --> 00:09:25,130
it's only the the main.

135
00:09:25,130 --> 00:09:28,950
Some procedure in this set up that you actually test and run.

136
00:09:28,950 --> 00:09:30,710
So let's go ahead and run.

137
00:09:30,710 --> 00:09:36,420
And let's look at the document that's been created for us.

138
00:09:36,420 --> 00:09:40,420
So there we have documents to now we've got ahead in one,

139
00:09:40,420 --> 00:09:43,980
and we have our table so that since we work in time,

140
00:09:43,980 --> 00:09:44,710
we can say,

141
00:09:44,710 --> 00:09:49,980
Don't save on this occasion,

142
00:09:49,980 --> 00:09:51,260
we've lived dangerously.

143
00:09:51,260 --> 00:09:51,770
In other words,

144
00:09:51,770 --> 00:09:53,350
we haven't been saving our code.

145
00:09:53,350 --> 00:09:54,550
Um,

146
00:09:54,550 --> 00:09:57,200
on the normal circumstances,

147
00:09:57,200 --> 00:09:58,560
I would always advice,

148
00:09:58,560 --> 00:10:00,550
of course that you save everything you do.

149
00:10:00,550 --> 00:10:04,410
But on this occasion that's abandoned Document one.

150
00:10:04,410 --> 00:10:08,020
So,

151
00:10:08,020 --> 00:10:10,040
do you want to save your changes to document one.

152
00:10:10,040 --> 00:10:10,340
No,

153
00:10:10,340 --> 00:10:10,950
we don't.

154
00:10:10,950 --> 00:10:16,120
But then it's gonna ask us if you want to save our changes to the word VB,

155
00:10:16,120 --> 00:10:17,410
a training template,

156
00:10:17,410 --> 00:10:29,720
and this time we click on Save a Simple Way of Model a rise in your code,

157
00:10:29,720 --> 00:10:31,500
Mr Creator Macro,

158
00:10:31,500 --> 00:10:39,870
which then calls a Siris of subordinate subroutines when defining a subroutine designed to

159
00:10:39,870 --> 00:10:41,880
be called by other subroutines,

160
00:10:41,880 --> 00:10:50,290
precede its name with the keywords private sub to call.

161
00:10:50,290 --> 00:10:53,610
The subroutine used the optional keyword call,

162
00:10:53,610 --> 00:10:56,150
followed by the name of the Subroutine.

