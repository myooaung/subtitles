1
00:00:00,000 --> 00:00:11,440
in this video,

2
00:00:11,440 --> 00:00:16,360
we'll turn our attention to the business of debugging tracking down errors When you can't

3
00:00:16,360 --> 00:00:17,870
get your coat to work properly,

4
00:00:17,870 --> 00:00:23,430
we'll begin by looking at two techniques for are put in important messages,

5
00:00:23,430 --> 00:00:26,780
which you can use to monitor key aspects of your code.

6
00:00:26,780 --> 00:00:40,090
MSG box and debug dot print In the Exercises folder and in the 08 debugging and air

7
00:00:40,090 --> 00:00:41,210
handling sub folder,

8
00:00:41,210 --> 00:00:44,250
go find a file called Debug in practice,

9
00:00:44,250 --> 00:00:49,350
and you'll probably recognize this from the previous exercise.

10
00:00:49,350 --> 00:00:55,050
We go into the visual basic editor and into the Models folder.

11
00:00:55,050 --> 00:00:59,650
You'll find that Model one contains a simple macro,

12
00:00:59,650 --> 00:01:02,750
which attempts to delete all the tables,

13
00:01:02,750 --> 00:01:10,250
and it does so by starting a table one and working its way up to table 12.

14
00:01:10,250 --> 00:01:12,950
And as you probably remember,

15
00:01:12,950 --> 00:01:19,150
I pointed out that if you attempt to do this because you'll remove in objects halfway

16
00:01:19,150 --> 00:01:19,850
through,

17
00:01:19,850 --> 00:01:27,450
you'll get an error because having deleted six tables if you attempt to delay Table seven,

18
00:01:27,450 --> 00:01:29,550
it no longer exists.

19
00:01:29,550 --> 00:01:34,350
So we're treating slightly here because we actually know the solution to the problem.

20
00:01:34,350 --> 00:01:40,310
But let's look at how we can monitor how we can create output which allows us to monitor

21
00:01:40,310 --> 00:01:48,390
what's going on as our program runs so that we can see exactly when and why the program

22
00:01:48,390 --> 00:01:49,450
actually breaks.

23
00:01:49,450 --> 00:01:53,950
So what we'll do is to take all of this code and just copy it.

24
00:01:53,950 --> 00:01:59,710
And let's just rename the copy.

25
00:01:59,710 --> 00:02:02,520
Yeah,

26
00:02:02,520 --> 00:02:05,350
let's call it MSG box output.

27
00:02:05,350 --> 00:02:09,240
So inside Al Loop,

28
00:02:09,240 --> 00:02:13,050
we want to introduce some debug in statements,

29
00:02:13,050 --> 00:02:20,530
and the first thing that we want to do is to make sure that our debug in statements don't

30
00:02:20,530 --> 00:02:21,720
produce any errors.

31
00:02:21,720 --> 00:02:26,460
So we're going to disable error handling within the context of our debugging,

32
00:02:26,460 --> 00:02:30,050
and you'll remember from our previous videos in this section.

33
00:02:30,050 --> 00:02:31,150
To do that,

34
00:02:31,150 --> 00:02:33,650
we can say on error resume next.

35
00:02:33,650 --> 00:02:39,120
Then,

36
00:02:39,120 --> 00:02:40,850
after our debugging statements,

37
00:02:40,850 --> 00:02:46,650
we reinstate normal baby air handling by saying on error,

38
00:02:46,650 --> 00:02:48,850
go to zero.

39
00:02:48,850 --> 00:02:58,760
So let's now place Ah debug in statements between those two lines and are we going to do?

40
00:02:58,760 --> 00:03:04,900
To start with here is to create an MSG box which outputs key information on the two key

41
00:03:04,900 --> 00:03:12,660
bits of information in this context that we want to monitor how many tables remain and

42
00:03:12,660 --> 00:03:15,950
which table are we currently attempting to delete?

43
00:03:15,950 --> 00:03:22,620
What I'm also going to do because we want to actually see within the document what's about

44
00:03:22,620 --> 00:03:23,850
to be deleted.

45
00:03:23,850 --> 00:03:26,150
We'll also select the table.

46
00:03:26,150 --> 00:03:29,150
So let's just copy this statement.

47
00:03:29,150 --> 00:03:38,450
This document all tables I don't select and then up comes out message box.

48
00:03:38,450 --> 00:03:47,450
So let's say tables remaining Empress end paste.

49
00:03:47,450 --> 00:03:50,480
And this will of course,

50
00:03:50,480 --> 00:03:53,450
be this document dot tables don't count.

51
00:03:53,450 --> 00:04:02,850
Then it's going to a new line on,

52
00:04:02,850 --> 00:04:05,080
then table to be deleted.

53
00:04:05,080 --> 00:04:09,620
This time we only really need I.

54
00:04:09,620 --> 00:04:13,750
So there's our monitoring statement.

55
00:04:13,750 --> 00:04:16,750
Let's save because,

56
00:04:16,750 --> 00:04:17,240
of course,

57
00:04:17,240 --> 00:04:18,120
when we run,

58
00:04:18,120 --> 00:04:19,970
we're gonna mess up our documents.

59
00:04:19,970 --> 00:04:25,250
They will want to revert to the saved version so important to save before tested.

60
00:04:25,250 --> 00:04:30,450
So first table,

61
00:04:30,450 --> 00:04:38,550
January 12 remaining table one about to be deleted because Jonah has been dilated,

62
00:04:38,550 --> 00:04:42,750
March now becomes table to which is the next to be deleted.

63
00:04:42,750 --> 00:04:45,030
Now may become stable.

64
00:04:45,030 --> 00:04:48,750
Three July becomes full,

65
00:04:48,750 --> 00:04:51,450
September becomes five,

66
00:04:51,450 --> 00:04:55,550
and this is the last table that we can successfully delete.

67
00:04:55,550 --> 00:05:01,470
We've got all the way up to November because we're constantly delete in tables so November

68
00:05:01,470 --> 00:05:02,450
will be debated.

69
00:05:02,450 --> 00:05:03,720
But of course,

70
00:05:03,720 --> 00:05:04,750
now we're in trouble.

71
00:05:04,750 --> 00:05:10,450
We've got six tables remaining and we're attempting to delete Table seven.

72
00:05:10,450 --> 00:05:16,450
So the statement this document on tables I don't select will have failed,

73
00:05:16,450 --> 00:05:19,240
but because we've got on Air a resume next.

74
00:05:19,240 --> 00:05:22,350
That's the only reason we haven't had an error as yet.

75
00:05:22,350 --> 00:05:23,210
But of course,

76
00:05:23,210 --> 00:05:29,820
as soon as I click OK v b A era Hamlin has been reinstated,

77
00:05:29,820 --> 00:05:32,750
so I get the normal era.

78
00:05:32,750 --> 00:05:36,710
Okay,

79
00:05:36,710 --> 00:05:43,610
so that's an example of how you can use be humble Msde Reebok statement to just monitor

80
00:05:43,610 --> 00:05:46,050
what's going on as your macro is running,

81
00:05:46,050 --> 00:05:51,850
let's just close without saving and then go straight back in.

82
00:05:51,850 --> 00:06:02,250
And let's compare the MSG box with the other method of output in which is debug dot print.

83
00:06:02,250 --> 00:06:05,490
The problem with that mystery box,

84
00:06:05,490 --> 00:06:06,250
as you can imagine,

85
00:06:06,250 --> 00:06:10,040
is that if there are a lot of MSG box statements,

86
00:06:10,040 --> 00:06:11,800
you're constantly having to click.

87
00:06:11,800 --> 00:06:12,330
OK,

88
00:06:12,330 --> 00:06:12,980
OK,

89
00:06:12,980 --> 00:06:14,050
etcetera.

90
00:06:14,050 --> 00:06:18,510
So if you imagine we had a couple of 100 of these to do clearly,

91
00:06:18,510 --> 00:06:22,850
we wouldn't want to have a mystery box popping up 200 times.

92
00:06:22,850 --> 00:06:26,750
So this is where deep Abdullah print becomes useful.

93
00:06:26,750 --> 00:06:29,750
Instead of displaying a dialogue,

94
00:06:29,750 --> 00:06:32,520
it's simply creates a textual report,

95
00:06:32,520 --> 00:06:35,950
which you can then look at after your code has run.

96
00:06:35,950 --> 00:06:38,600
So let's look at how it works.

97
00:06:38,600 --> 00:06:46,690
Let's copy all of this on.

98
00:06:46,690 --> 00:06:52,450
Just change that to be and change this to deep out print.

99
00:06:52,450 --> 00:06:58,650
So because we're no actually looking at the document while the codes run in,

100
00:06:58,650 --> 00:07:03,500
we don't need to select the table that's about to be deleted on.

101
00:07:03,500 --> 00:07:13,760
All we need to do is to replace MSG box with debug dot print and to assist readability.

102
00:07:13,760 --> 00:07:21,140
I'm also gonna put an extra carried return at the end of the statement so that each pair of

103
00:07:21,140 --> 00:07:26,220
lines will be separated by a blank line and that's it again,

104
00:07:26,220 --> 00:07:29,950
I'm going to save before running so we can revert in the same session.

105
00:07:29,950 --> 00:07:31,440
When we run,

106
00:07:31,440 --> 00:07:36,950
we go straight to the error because obviously it's quite a quick process.

107
00:07:36,950 --> 00:07:42,730
We end and to monitor the report that's been generated,

108
00:07:42,730 --> 00:07:45,550
we simply going to view immediate window,

109
00:07:45,550 --> 00:07:51,450
and here we can see the output created by the debug dot print statement.

110
00:07:51,450 --> 00:07:59,660
So als the statements that were coming up in the msde Reeboks we can now monitor and we can

111
00:07:59,660 --> 00:08:00,950
look for a pattern.

112
00:08:00,950 --> 00:08:02,350
And of course,

113
00:08:02,350 --> 00:08:04,050
when we get to this line,

114
00:08:04,050 --> 00:08:08,350
we can see exactly where the problem occurs.

115
00:08:08,350 --> 00:08:13,710
Only six tables remain in and we're attempting to delete table seven.

116
00:08:13,710 --> 00:08:16,620
So typically,

117
00:08:16,620 --> 00:08:20,850
once you've looked at the output created in the immediate window,

118
00:08:20,850 --> 00:08:23,040
you get a bit closer to solving.

119
00:08:23,040 --> 00:08:24,520
The problem I want you,

120
00:08:24,520 --> 00:08:26,940
Then do is to select all and delete.

121
00:08:26,940 --> 00:08:29,300
So control a select all.

122
00:08:29,300 --> 00:08:30,850
Just delete it.

123
00:08:30,850 --> 00:08:39,130
Ready for maybe modifying your debug dot print statements to get closer to solving the

124
00:08:39,130 --> 00:08:39,550
problem.

125
00:08:39,550 --> 00:08:43,190
Just to remind you about solving the problem.

126
00:08:43,190 --> 00:08:43,800
By the way,

127
00:08:43,800 --> 00:08:46,450
I hope you remember the solution to this problem.

128
00:08:46,450 --> 00:08:53,450
You simply reverse these two and then add step minus one.

129
00:08:53,450 --> 00:08:59,480
So you're starting with the highest number working your way down to the lowest.

130
00:08:59,480 --> 00:09:05,750
Hence the item that your targeting always exists because you haven't yet deleted it.

131
00:09:05,750 --> 00:09:12,990
But we are just using this purely to discuss techniques for monitoring code as we're trying

132
00:09:12,990 --> 00:09:14,550
to isolate a problem.

133
00:09:14,550 --> 00:09:21,350
So I'm now gonna close this without saving in case we need to test it again.

134
00:09:21,350 --> 00:09:35,210
The MSG box function is a useful and versatile tool for debugging code,

135
00:09:35,210 --> 00:09:44,020
allowing you to output key monitoring information while a macro is running the debug dot

136
00:09:44,020 --> 00:09:49,710
print function can be used as an alternative to a mystery box when the output messages

137
00:09:49,710 --> 00:09:51,650
would become irritatingly frequent,

138
00:09:51,650 --> 00:09:53,060
for example,

139
00:09:53,060 --> 00:09:54,760
if you're in long inspirations.

