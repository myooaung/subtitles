1
00:00:00,000 --> 00:00:14,250
in the last two videos.

2
00:00:14,250 --> 00:00:20,250
We've looked at four next and do Nuk statements in this video.

3
00:00:20,250 --> 00:00:20,920
Well,

4
00:00:20,920 --> 00:00:24,260
look at the third type of Lupin structure offered in V B A.

5
00:00:24,260 --> 00:00:26,990
While Wen statements,

6
00:00:26,990 --> 00:00:52,480
Let's create a new macro unless simply cool it while when.

7
00:00:52,480 --> 00:00:55,650
What does Mitt across the procedure view?

8
00:00:55,650 --> 00:00:58,960
And let's look at the basic structure of a while.

9
00:00:58,960 --> 00:00:59,750
Wend loop.

10
00:00:59,750 --> 00:01:05,450
We have the key word while and we have a conditional test.

11
00:01:05,450 --> 00:01:09,650
As long as they're test proves to be true.

12
00:01:09,650 --> 00:01:12,330
We carry out a series of statements,

13
00:01:12,330 --> 00:01:18,970
and the structure closes with wend a made up word which obviously is a contraction of while

14
00:01:18,970 --> 00:01:19,650
and end.

15
00:01:19,650 --> 00:01:26,790
You use this structure basically where you don't have a numerical component to control the

16
00:01:26,790 --> 00:01:27,350
looping.

17
00:01:27,350 --> 00:01:28,520
For example,

18
00:01:28,520 --> 00:01:30,950
you don't know how many items you want to process.

19
00:01:30,950 --> 00:01:34,250
You just want to keep processing them until you run out of them.

20
00:01:34,250 --> 00:01:35,950
In this example,

21
00:01:35,950 --> 00:01:42,990
what will do is to create a table in a new document and complete one column by making an

22
00:01:42,990 --> 00:01:43,550
entry,

23
00:01:43,550 --> 00:01:48,550
moving down the line and then checking to see whether we're still in the table.

24
00:01:48,550 --> 00:01:51,110
As soon as we no longer in the table,

25
00:01:51,110 --> 00:01:55,150
we stopped making entries when we stopped moving down.

26
00:01:55,150 --> 00:01:56,140
So in other words,

27
00:01:56,140 --> 00:01:57,550
we fall out of the loop.

28
00:01:57,550 --> 00:02:07,750
So let's begin by declaring a document variable and creating a new document inside it.

29
00:02:07,750 --> 00:02:15,550
Then that's at a table.

30
00:02:15,550 --> 00:02:19,850
We can use some of the code that were recorded in the last section.

31
00:02:19,850 --> 00:02:22,790
So let's go back to Section four.

32
00:02:22,790 --> 00:02:41,550
I will just copy this line and let's say we want to create 40 rows and two columns.

33
00:02:41,550 --> 00:02:48,160
Next,

34
00:02:48,160 --> 00:02:56,970
let's just scribble down to where we entered the headings and copy a couple of lines from

35
00:02:56,970 --> 00:02:57,750
here as well.

36
00:02:57,750 --> 00:03:16,750
So the head in that we want in that first cell will be total time taken.

37
00:03:16,750 --> 00:03:18,920
And this time,

38
00:03:18,920 --> 00:03:20,330
instead of moving right,

39
00:03:20,330 --> 00:03:27,750
we want to move down and the unit will be a line rather than the cell.

40
00:03:27,750 --> 00:03:35,050
So so far we have a table with 40 rows.

41
00:03:35,050 --> 00:03:44,050
We've entered total time taken in column one row one and we have moved down to road to

42
00:03:44,050 --> 00:03:47,600
column one on,

43
00:03:47,600 --> 00:03:56,350
Let's say from here What we want to do is to enter the time in mili seconds that it takes

44
00:03:56,350 --> 00:03:58,750
to actually complete the table.

45
00:03:58,750 --> 00:04:06,140
Now you may use this technique if you're testing the efficiency of code that you've written

46
00:04:06,140 --> 00:04:07,330
and you want to know.

47
00:04:07,330 --> 00:04:07,920
Basically,

48
00:04:07,920 --> 00:04:08,730
for example,

49
00:04:08,730 --> 00:04:14,650
which of two approaches is going to give you the best performance on Dak?

50
00:04:14,650 --> 00:04:17,150
You make your macro run most quickly.

51
00:04:17,150 --> 00:04:23,450
One of the simplest ways of time in an event is to use the timer function.

52
00:04:23,450 --> 00:04:30,280
The time of function gives you the number of milliseconds that have elapsed since the last

53
00:04:30,280 --> 00:04:31,650
occurrence of midnight.

54
00:04:31,650 --> 00:04:33,640
To use it,

55
00:04:33,640 --> 00:04:36,050
you start by taking a snapshot of the timer,

56
00:04:36,050 --> 00:04:42,770
and then you constantly refer back to it to find out how many milliseconds have elapsed

57
00:04:42,770 --> 00:04:44,150
since your snapshot.

58
00:04:44,150 --> 00:04:49,350
So let's declare a couple of new variables for this purpose.

59
00:04:49,350 --> 00:04:54,350
The time of function returns a single value.

60
00:04:54,350 --> 00:04:58,750
Several cool our variable SNG timer,

61
00:04:58,750 --> 00:05:08,100
a single and then the entry that we actually put into the table will be a string civil dim

62
00:05:08,100 --> 00:05:11,450
str time as strength.

63
00:05:11,450 --> 00:05:14,950
So before we lived,

64
00:05:14,950 --> 00:05:22,800
we need to capture the timer in SNG timer because it's a single will use the prefix let

65
00:05:22,800 --> 00:05:28,250
which we simply admit snd timer equals timer.

66
00:05:28,250 --> 00:05:36,600
So now we can do our loot and the thing that we want to test to control the loop is whether

67
00:05:36,600 --> 00:05:38,050
or not we're still in the table.

68
00:05:38,050 --> 00:05:45,730
We can do this by looking at the information property off the selection object so it's

69
00:05:45,730 --> 00:05:50,950
selection don't information and then in brackets,

70
00:05:50,950 --> 00:05:57,350
we use one of these constants W d within table.

71
00:05:57,350 --> 00:06:02,450
As long as that statement is true,

72
00:06:02,450 --> 00:06:06,360
we know that we're still in the table and we can continue looping.

73
00:06:06,360 --> 00:06:17,250
So now we want to calculate the time elapsed and place it inside str time So str time

74
00:06:17,250 --> 00:06:28,390
equals Tell him which will be the current time elapsed minus our snapshots SNG timer.

75
00:06:28,390 --> 00:06:33,850
This will give us a single value with an indeterminate number of decimals after it.

76
00:06:33,850 --> 00:06:35,750
To make it more consistent,

77
00:06:35,750 --> 00:06:38,650
we can write the full matte function around it.

78
00:06:38,650 --> 00:06:47,750
So that's format and then time a minus SNG timer is the value that were format in comma,

79
00:06:47,750 --> 00:06:51,750
and the format that we want has to go in double quotes.

80
00:06:51,750 --> 00:06:56,060
So we want one significant number before the decimal.

81
00:06:56,060 --> 00:06:56,950
If applicable,

82
00:06:56,950 --> 00:06:58,820
dots on,

83
00:06:58,820 --> 00:07:00,800
let's say for accuracy.

84
00:07:00,800 --> 00:07:03,450
We want four decimal places.

85
00:07:03,450 --> 00:07:14,650
Now we want to insert that value into the table and then move down one line so we'll just

86
00:07:14,650 --> 00:07:24,250
copy these two lines and tab them in to select them both and press tab.

87
00:07:24,250 --> 00:07:34,150
So here we want our str time and I said the word milli seconds.

88
00:07:34,150 --> 00:07:40,580
So let's see what we get when we run.

89
00:07:40,580 --> 00:07:44,850
This will save and run.

90
00:07:44,850 --> 00:07:49,910
Let's look at the results in table.

91
00:07:49,910 --> 00:08:01,690
So we've got a total of nor 0.9609 milli seconds African just close.

92
00:08:01,690 --> 00:08:10,760
This one of the things I'll be stressing throughout this course is that using the selection

93
00:08:10,760 --> 00:08:14,150
object in this way is very inefficient.

94
00:08:14,150 --> 00:08:19,950
And as your code becomes more complex and as the number of operations that you're

95
00:08:19,950 --> 00:08:21,710
performing increases,

96
00:08:21,710 --> 00:08:28,790
you'll find that this inefficiency leads to very slow code and perhaps the macros which

97
00:08:28,790 --> 00:08:29,670
take,

98
00:08:29,670 --> 00:08:30,440
um,

99
00:08:30,440 --> 00:08:33,470
announcer portable amount of time to run.

100
00:08:33,470 --> 00:08:39,660
So we will discuss these techniques in detail as we go through the course that,

101
00:08:39,660 --> 00:08:41,380
um for the moment,

102
00:08:41,380 --> 00:08:45,050
let's look at how we can actually make this slightly more efficient.

103
00:08:45,050 --> 00:08:49,710
What we'll do is to copy this code.

104
00:08:49,710 --> 00:09:02,270
I'm going back to full model of you so I can make sure I paste it at the end here on.

105
00:09:02,270 --> 00:09:04,010
We obviously need to rename this,

106
00:09:04,010 --> 00:09:12,670
so we'll call it while wend No selection because the main thing that will be doing is to

107
00:09:12,670 --> 00:09:18,010
remove the need to use the selection object so instead of used in this election,

108
00:09:18,010 --> 00:09:24,800
object will effectively use a counter so dim I won't call it I since it's not gonna be the

109
00:09:24,800 --> 00:09:28,150
inherent counter that we used with the for next loop.

110
00:09:28,150 --> 00:09:31,050
So let's call it into counter,

111
00:09:31,050 --> 00:09:33,050
as in Georgia.

112
00:09:33,050 --> 00:09:40,090
So the cell within the table that we're targeting will now be controlled by the counter.

113
00:09:40,090 --> 00:09:46,010
So we can start here by set in this counter to a value to which is the first road that we

114
00:09:46,010 --> 00:09:46,850
want to target.

115
00:09:46,850 --> 00:09:52,550
So encounter equals two before the lib starts,

116
00:09:52,550 --> 00:09:53,950
and then here,

117
00:09:53,950 --> 00:09:58,150
the equivalent of moving down will now be to increase that counter.

118
00:09:58,150 --> 00:10:04,850
And we do that by saying encounter equals encounter plus one.

119
00:10:04,850 --> 00:10:10,850
The next thing we need to do is to change the way that the loop is actually controlled.

120
00:10:10,850 --> 00:10:14,950
So now it's going to be controlled by the value of the counter.

121
00:10:14,950 --> 00:10:17,100
So we simply say,

122
00:10:17,100 --> 00:10:23,750
while encounter is less than or equal to now,

123
00:10:23,750 --> 00:10:26,710
we could say 40 because we know that's the number of rows.

124
00:10:26,710 --> 00:10:30,040
But what's perhaps better is to say,

125
00:10:30,040 --> 00:10:39,830
doc new dot tables on in brackets one because it's the first and only table in dot knew dot

126
00:10:39,830 --> 00:10:42,850
rose dot count.

127
00:10:42,850 --> 00:10:44,590
So that way,

128
00:10:44,590 --> 00:10:46,250
if we were to change this number,

129
00:10:46,250 --> 00:10:49,550
L Loop would still function correctly on.

130
00:10:49,550 --> 00:10:56,670
The final thing we need to do is to target the table cell where we want the milliseconds to

131
00:10:56,670 --> 00:10:57,350
be entered.

132
00:10:57,350 --> 00:11:02,260
So we're doing it this time not by selecting it,

133
00:11:02,260 --> 00:11:05,730
but simply by put in a reference to it.

134
00:11:05,730 --> 00:11:07,450
And this is much more efficient.

135
00:11:07,450 --> 00:11:13,580
It takes much less time because the interface isn't forced to actually make a selection and

136
00:11:13,580 --> 00:11:15,750
scroll to the current row of the table.

137
00:11:15,750 --> 00:11:22,670
So we use the syntax companew dot tables brackets,

138
00:11:22,670 --> 00:11:27,150
one don't sell.

139
00:11:27,150 --> 00:11:29,450
And then in brackets,

140
00:11:29,450 --> 00:11:31,050
we say we drove.

141
00:11:31,050 --> 00:11:31,840
And,

142
00:11:31,840 --> 00:11:32,250
of course,

143
00:11:32,250 --> 00:11:34,400
the rose being controlled by encounter,

144
00:11:34,400 --> 00:11:40,280
and the column is always going to be calling one.

145
00:11:40,280 --> 00:11:44,350
Then we won't stop range.

146
00:11:44,350 --> 00:11:48,050
No text equals.

147
00:11:48,050 --> 00:11:51,450
So within this statement,

148
00:11:51,450 --> 00:11:53,360
there's no selection.

149
00:11:53,360 --> 00:11:56,520
There's no activation of the object there,

150
00:11:56,520 --> 00:11:58,150
simply a reference to it.

151
00:11:58,150 --> 00:12:00,310
And using techniques like this,

152
00:12:00,310 --> 00:12:01,550
you can create macros,

153
00:12:01,550 --> 00:12:04,590
which run much more quickly than those macros,

154
00:12:04,590 --> 00:12:10,010
which constantly select elements within the word interface as you do when you use the

155
00:12:10,010 --> 00:12:12,130
recorder sterilise,

156
00:12:12,130 --> 00:12:12,650
Test it,

157
00:12:12,650 --> 00:12:14,570
save on,

158
00:12:14,570 --> 00:12:18,000
run on,

159
00:12:18,000 --> 00:12:19,650
Let's look at the result in time.

160
00:12:19,650 --> 00:12:24,320
So we've got 0.54 milliseconds,

161
00:12:24,320 --> 00:12:29,300
as opposed to I think 0.9 in the last example,

162
00:12:29,300 --> 00:12:34,850
Let's just close and unsafe.

163
00:12:34,850 --> 00:12:43,890
Another thing you can do to make Macron's run faster is to use the syntax application.

164
00:12:43,890 --> 00:12:46,350
Don't screen Updating equals false.

165
00:12:46,350 --> 00:12:49,110
Let's use that on both of these macros.

166
00:12:49,110 --> 00:12:50,280
So,

167
00:12:50,280 --> 00:12:50,630
in fact,

168
00:12:50,630 --> 00:12:51,740
we can put it here.

169
00:12:51,740 --> 00:13:02,270
Application dogs green update in equals false.

170
00:13:02,270 --> 00:13:11,800
I'm just gonna copy that and paste it in the other version as well.

171
00:13:11,800 --> 00:13:13,110
Sir,

172
00:13:13,110 --> 00:13:14,150
Just in here,

173
00:13:14,150 --> 00:13:21,080
OK?

174
00:13:21,080 --> 00:13:26,880
And let's now increase the number of rose to 400 so we could get an idea off.

175
00:13:26,880 --> 00:13:33,560
How these to perform as they're doing more work so we'll run this one first.

176
00:13:33,560 --> 00:13:40,500
Let's save a fair few seconds,

177
00:13:40,500 --> 00:13:47,250
and it's a 10.4 10.4 milliseconds.

178
00:13:47,250 --> 00:13:49,150
It's very 10.4 seconds.

179
00:13:49,150 --> 00:13:49,950
As you can see,

180
00:13:49,950 --> 00:13:52,160
I've just realised.

181
00:13:52,160 --> 00:13:52,450
Actually,

182
00:13:52,450 --> 00:13:54,120
I've been calling this milliseconds,

183
00:13:54,120 --> 00:13:58,200
but in fact the figure we're looking at is seconds rather than milli seconds.

184
00:13:58,200 --> 00:14:04,150
So I'm gonna just update that no need to save.

185
00:14:04,150 --> 00:14:14,450
So let's just get rid of the Milly here and here.

186
00:14:14,450 --> 00:14:19,680
Okay,

187
00:14:19,680 --> 00:14:32,070
so we've got 10.4 seconds to beat and you'll see we've done it here in 0.3 point three

188
00:14:32,070 --> 00:14:32,650
seconds.

189
00:14:32,650 --> 00:14:34,530
That's quite a dramatic,

190
00:14:34,530 --> 00:14:35,240
as you can see,

191
00:14:35,240 --> 00:14:39,050
quite a dramatic difference in terms of performance,

192
00:14:39,050 --> 00:14:41,630
so hardly scientific.

193
00:14:41,630 --> 00:14:43,670
But just to point out,

194
00:14:43,670 --> 00:14:50,790
basically that whilst you can use techniques like this where you're using the selection

195
00:14:50,790 --> 00:14:52,250
object for everything,

196
00:14:52,250 --> 00:14:53,940
it's far more efficient,

197
00:14:53,940 --> 00:14:59,980
as we will see as we go through this course to use references to parts of the word

198
00:14:59,980 --> 00:15:05,450
interface rather than to rely on on selecting those elements in order to manipulate them.

199
00:15:05,450 --> 00:15:19,790
The wild Wen statement performs a series of steps as long as a given condition remains true

200
00:15:19,790 --> 00:15:19,790
.

201
00:15:19,790 --> 00:15:26,260
The syntax of the while went statement is as follows.

202
00:15:26,260 --> 00:15:31,680
While test condition statements wend

