WEBVTT
ï»¿1
00:00:00.000 --> 00:00:11.000
In this video,

2
00:00:11.000 --> 00:00:16.150
we look at how you can make your subroutines and functions more flexible by defining

3
00:00:16.150 --> 00:00:18.050
arguments or parameters.

4
00:00:18.050 --> 00:00:21.600
Arguments enable you to have the same function,

5
00:00:21.600 --> 00:00:27.260
perform slightly differently based on the values which are passed during the function,

6
00:00:27.260 --> 00:00:28.750
call or subroutine goal.

7
00:00:28.750 --> 00:00:35.320
If we look at the subroutine calls that we've done so far,

8
00:00:35.320 --> 00:00:36.360
for example,

9
00:00:36.360 --> 00:00:38.360
this one which creates a document.

10
00:00:38.360 --> 00:00:40.950
However many times we call that subroutine,

11
00:00:40.950 --> 00:00:42.850
it's always going to do the same thing.

12
00:00:42.850 --> 00:00:49.080
It was always insert a title with that specific piece of text simply by defining an

13
00:00:49.080 --> 00:00:51.250
argument for this subroutine.

14
00:00:51.250 --> 00:00:57.000
We can have the same subroutine create a new document but place a different title inside it

15
00:00:57.000 --> 00:00:57.750
each time.

16
00:00:57.750 --> 00:00:59.470
In a similar way,

17
00:00:59.470 --> 00:01:01.190
this subroutine,

18
00:01:01.190 --> 00:01:02.050
when called,

19
00:01:02.050 --> 00:01:04.000
will always create a table,

20
00:01:04.000 --> 00:01:07.750
which has exactly two rows and five columns.

21
00:01:07.750 --> 00:01:12.770
If we define two parameters to control the number of rows and the number of columns,

22
00:01:12.770 --> 00:01:17.350
we can call the same sub routine but end up with a different table each time.

23
00:01:17.350 --> 00:01:19.550
Let's look at how this works.

24
00:01:19.550 --> 00:01:27.310
To save some time with copy this subroutine on dysfunction,

25
00:01:27.310 --> 00:01:37.350
just paste it below the originals and then rename.

26
00:01:37.350 --> 00:01:39.260
So this will be three,

27
00:01:39.260 --> 00:01:47.250
a three Day and three Bay and the element which we want to replace with an argument,

28
00:01:47.250 --> 00:01:54.550
is this title to define an argument and arguments are also known as parameters.

29
00:01:54.550 --> 00:01:59.080
Inside the parentheses which followed the name of the function or subroutine.

30
00:01:59.080 --> 00:02:02.650
You specify the name of your parameter all argument,

31
00:02:02.650 --> 00:02:07.150
and we can use the same name in conventions that we've been using for variables,

32
00:02:07.150 --> 00:02:09.650
which is essentially what arguments are.

33
00:02:09.650 --> 00:02:14.880
So this is obviously text str title as string,

34
00:02:14.880 --> 00:02:20.100
so it's exactly the same as declaring a variable with the exception that we don't use.

35
00:02:20.100 --> 00:02:21.250
The keyword did.

36
00:02:21.250 --> 00:02:22.620
And of course,

37
00:02:22.620 --> 00:02:26.050
this text is then replaced by str title.

38
00:02:26.050 --> 00:02:31.640
Now,

39
00:02:31.640 --> 00:02:32.920
when we call the function,

40
00:02:32.920 --> 00:02:34.450
we can specify.

41
00:02:34.450 --> 00:02:35.270
In fact,

42
00:02:35.270 --> 00:02:41.880
we must specify a string value which will end up inside this parameter or variable.

43
00:02:41.880 --> 00:02:50.000
So in parentheses we just paste in the title that we had before so you can see how this

44
00:02:50.000 --> 00:02:50.960
process works.

45
00:02:50.960 --> 00:02:53.740
If we needed to create several new documents,

46
00:02:53.740 --> 00:02:59.970
we could use this syntax repeatedly but enter a different title each time within the

47
00:02:59.970 --> 00:03:00.850
parentheses.

48
00:03:00.850 --> 00:03:04.550
Let's do the same for the creation of the table,

49
00:03:04.550 --> 00:03:12.510
so that's copy the subroutine that creates the table,

50
00:03:12.510 --> 00:03:13.250
which is here.

51
00:03:13.250 --> 00:03:25.750
I just rename that three.

52
00:03:25.750 --> 00:03:28.970
So the premises we want,

53
00:03:28.970 --> 00:03:29.440
ah,

54
00:03:29.440 --> 00:03:33.550
to replace that's fixed into a flat fixed in Georgia.

55
00:03:33.550 --> 00:03:42.350
So we'll call them in rows presented a and coals as Introgen.

56
00:03:42.350 --> 00:03:43.360
And then,

57
00:03:43.360 --> 00:03:43.820
of course,

58
00:03:43.820 --> 00:03:51.250
here we is intros on Dhere offend coals.

59
00:03:51.250 --> 00:03:56.650
So I'll just copy the name of the function,

60
00:03:56.650 --> 00:03:57.250
or rather,

61
00:03:57.250 --> 00:03:58.990
or rather,

62
00:03:58.990 --> 00:03:59.800
subroutine.

63
00:03:59.800 --> 00:04:08.950
And then here we can place came and paste,

64
00:04:08.950 --> 00:04:10.970
then in parentheses.

65
00:04:10.970 --> 00:04:12.950
After the name of the subroutine,

66
00:04:12.950 --> 00:04:18.440
you'll see that the program is actually prompting us to enter in Crosas,

67
00:04:18.440 --> 00:04:21.450
Inter Gia and in coals as indigenous.

68
00:04:21.450 --> 00:04:25.950
So we have to comma and four.

69
00:04:25.950 --> 00:04:30.010
And let's just test that we get the same results as before.

70
00:04:30.010 --> 00:04:35.240
So let's save our changes and then run out macro.

71
00:04:35.240 --> 00:04:41.750
So here we can see one of the dangers of using copy and paste.

72
00:04:41.750 --> 00:04:46.450
You always have to remember to make the necessary changes to what you paste.

73
00:04:46.450 --> 00:04:47.060
And,

74
00:04:47.060 --> 00:04:47.600
of course,

75
00:04:47.600 --> 00:04:52.410
what we've done here is we've left the old name so on returning a value,

76
00:04:52.410 --> 00:04:53.540
we've used the wrong name,

77
00:04:53.540 --> 00:05:00.350
so we just need Teoh reset and modify the name accordingly.

78
00:05:00.350 --> 00:05:06.790
That's run again.

79
00:05:06.790 --> 00:05:15.850
We can see that we get our new documents with the title on the table.

80
00:05:15.850 --> 00:05:24.100
So with a small amount of code that we have so far,

81
00:05:24.100 --> 00:05:26.410
we're not saving a huge amount of time.

82
00:05:26.410 --> 00:05:32.730
But this structure is very powerful because it means you can reuse the functions and the

83
00:05:32.730 --> 00:05:40.350
subroutines that your macro needs and get slightly different results by creating parameters

84
00:05:40.350 --> 00:05:44.380
to have the subroutine or function behave slightly differently,

85
00:05:44.380 --> 00:05:46.450
performed slightly different actions,

86
00:05:46.450 --> 00:05:49.400
so it makes your code even more reusable,

87
00:05:49.400 --> 00:05:50.880
even more flexible.

88
00:05:50.880 --> 00:06:01.060
Even more modular arguments,

89
00:06:01.060 --> 00:06:09.460
also known as parameters variables used to make subroutine calls more flexible to define

90
00:06:09.460 --> 00:06:12.770
arguments used this in tax argument.

91
00:06:12.770 --> 00:06:20.490
Name one is data type one argument named to his data Type two etcetera in parentheses after

92
00:06:20.490 --> 00:06:21.880
the name of the sub procedure.

93
00:06:21.880 --> 00:06:27.860
When calling a subroutine or function with defined arguments,

94
00:06:27.860 --> 00:06:34.110
a value of the appropriate data type must be supplied to reach arguments using this Intacs

95
00:06:34.110 --> 00:06:38.020
cool procedure name argument value.

96
00:06:38.020 --> 00:06:41.870
One comma argument valued two comma,

97
00:06:41.870 --> 00:06:42.950
etcetera

