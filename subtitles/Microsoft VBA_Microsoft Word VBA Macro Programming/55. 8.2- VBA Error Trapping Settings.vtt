WEBVTT
ï»¿1
00:00:00.000 --> 00:00:11.650
back in Section two,

2
00:00:11.650 --> 00:00:18.190
we had a look of tools options and discuss some of the settings in the visual basic editor

3
00:00:18.190 --> 00:00:20.120
at the time,

4
00:00:20.120 --> 00:00:23.050
we skipped over the settings related error handling.

5
00:00:23.050 --> 00:00:24.960
In this video,

6
00:00:24.960 --> 00:00:28.990
we'll revisit tool options and discussed those settings.

7
00:00:28.990 --> 00:00:34.850
Let's go back into the Section eight model.

8
00:00:34.850 --> 00:00:39.500
Let's work with the same macro that we worked with in the last tutorial.

9
00:00:39.500 --> 00:00:41.970
So as you can see,

10
00:00:41.970 --> 00:00:43.950
we have error handling in place.

11
00:00:43.950 --> 00:00:47.950
And we did that by using on error go to air handling,

12
00:00:47.950 --> 00:00:52.450
which is a label that we placed at the bottom of the sub procedure.

13
00:00:52.450 --> 00:00:56.850
So if I deliberately introduced an error,

14
00:00:56.850 --> 00:01:00.250
I just put in an erroneous final name.

15
00:01:00.250 --> 00:01:03.090
When I run this up procedure,

16
00:01:03.090 --> 00:01:05.590
my error handling kicks in,

17
00:01:05.590 --> 00:01:09.050
and it overrides Phoebe A's normal error handling.

18
00:01:09.050 --> 00:01:12.480
Now we're going to tools,

19
00:01:12.480 --> 00:01:16.450
options and then into the general tab.

20
00:01:16.450 --> 00:01:21.000
The setting that makes this possible is break on.

21
00:01:21.000 --> 00:01:22.450
Unhand aled errors.

22
00:01:22.450 --> 00:01:23.590
So,

23
00:01:23.590 --> 00:01:24.360
in other words,

24
00:01:24.360 --> 00:01:28.150
this set in means that if you put our handling in place,

25
00:01:28.150 --> 00:01:29.100
V B.

26
00:01:29.100 --> 00:01:33.250
A will not break when it encounters an error and display an error message.

27
00:01:33.250 --> 00:01:35.850
By contrast,

28
00:01:35.850 --> 00:01:41.050
if I switch to break on all errors and then click OK,

29
00:01:41.050 --> 00:01:44.050
even though I've got our handling in place.

30
00:01:44.050 --> 00:01:45.950
When I run the macro,

31
00:01:45.950 --> 00:01:50.610
you'll see that visual basics normal error handling kicks in,

32
00:01:50.610 --> 00:01:53.150
and it does display an error on.

33
00:01:53.150 --> 00:01:57.840
Then it offers me the chance to go into break boat by clicking on debug.

34
00:01:57.840 --> 00:02:06.160
This setting is quite useful for debug in because while they're developing back rows and

35
00:02:06.160 --> 00:02:08.480
thinking about strategies for handling errors,

36
00:02:08.480 --> 00:02:13.250
you very often want to override your own error handling temporarily.

37
00:02:13.250 --> 00:02:13.880
So,

38
00:02:13.880 --> 00:02:14.240
of course,

39
00:02:14.240 --> 00:02:21.660
the trick is to remember to go back into tools options General and then just reinstate

40
00:02:21.660 --> 00:02:22.750
normal behavior.

41
00:02:22.750 --> 00:02:27.150
My reverting to that option break on unhand aled errors.

42
00:02:27.150 --> 00:02:29.490
Breaking class mode,

43
00:02:29.490 --> 00:02:30.150
by the way,

44
00:02:30.150 --> 00:02:34.950
is exactly the same unless you're working with class more jewels.

45
00:02:34.950 --> 00:02:38.450
Class modules are in advanced program in feature.

46
00:02:38.450 --> 00:02:40.550
And what that set it means,

47
00:02:40.550 --> 00:02:41.210
basically,

48
00:02:41.210 --> 00:02:45.550
is that if Phoebe A encounters an error in one of your class models,

49
00:02:45.550 --> 00:02:47.050
it will break.

50
00:02:47.050 --> 00:02:53.250
But at all other times it will respect your attempts to override BB era handling.

51
00:02:53.250 --> 00:02:55.450
So if you're not using class modules,

52
00:02:55.450 --> 00:02:58.850
there's absolutely no difference between these two.

53
00:02:58.850 --> 00:03:02.550
Just before we finish this tutorial,

54
00:03:02.550 --> 00:03:04.130
let's just discuss.

55
00:03:04.130 --> 00:03:09.950
Compile on Demand compilation takes place whenever you run a macro.

56
00:03:09.950 --> 00:03:11.170
And what it means,

57
00:03:11.170 --> 00:03:11.910
basically,

58
00:03:11.910 --> 00:03:16.300
is that your code is compiled or converted into machine language,

59
00:03:16.300 --> 00:03:18.350
which your operating system can then run.

60
00:03:18.350 --> 00:03:23.650
Compiling demand means that only the macro is that you actually run,

61
00:03:23.650 --> 00:03:29.440
and some procedures called by those macros will actually be compiled.

62
00:03:29.440 --> 00:03:35.820
So if you've got a module that contains a dozen sub procedures and you run some procedure

63
00:03:35.820 --> 00:03:39.970
five only some procedure five will be compiled.

64
00:03:39.970 --> 00:03:42.790
All the others won't be compiled unless,

65
00:03:42.790 --> 00:03:43.370
of course,

66
00:03:43.370 --> 00:03:48.950
sub procedure five contains a call to one of those other sub procedures.

67
00:03:48.950 --> 00:03:51.350
So it's the most efficient way of working.

68
00:03:51.350 --> 00:03:56.750
So the only time you'll need to know about this is if someone has switched it off and is

69
00:03:56.750 --> 00:03:58.190
causing you problems,

70
00:03:58.190 --> 00:04:01.550
I'll show you an example of where such a problem might occur.

71
00:04:01.550 --> 00:04:03.550
Let's just switch it off.

72
00:04:03.550 --> 00:04:05.050
Click OK,

73
00:04:05.050 --> 00:04:09.200
and let's say I've got another sub procedure in here,

74
00:04:09.200 --> 00:04:10.250
which isn't finished,

75
00:04:10.250 --> 00:04:16.070
so let's just call it sub unfinished Onda.

76
00:04:16.070 --> 00:04:17.530
Let's just put some code in it,

77
00:04:17.530 --> 00:04:20.250
which will make it not compile,

78
00:04:20.250 --> 00:04:31.320
so I'm gonna do a very simple one them str string And then I'm going to try and set a

79
00:04:31.320 --> 00:04:33.560
different variable called SRT.

80
00:04:33.560 --> 00:04:34.950
So I just made a typo.

81
00:04:34.950 --> 00:04:37.650
He cools whatever.

82
00:04:37.650 --> 00:04:41.050
So this won't compile.

83
00:04:41.050 --> 00:04:43.450
Let's say I know it's not finished,

84
00:04:43.450 --> 00:04:46.080
but I'm actually working on another subroutine.

85
00:04:46.080 --> 00:04:48.050
I'm gonna work on this one.

86
00:04:48.050 --> 00:04:50.630
Eso It's got the area in place.

87
00:04:50.630 --> 00:04:51.320
That's fine.

88
00:04:51.320 --> 00:04:52.850
It won't actually do anything.

89
00:04:52.850 --> 00:04:58.710
So although I'm running in the other macro,

90
00:04:58.710 --> 00:04:59.890
Theoneste finished,

91
00:04:59.890 --> 00:05:01.770
one can't compile,

92
00:05:01.770 --> 00:05:06.750
and that's because it's trying to compile every single some procedure in this module.

93
00:05:06.750 --> 00:05:08.860
So that's just annoying,

94
00:05:08.860 --> 00:05:09.510
basically,

95
00:05:09.510 --> 00:05:14.550
because very often you have got unfinished some procedures in the same model.

96
00:05:14.550 --> 00:05:16.510
So simple solution.

97
00:05:16.510 --> 00:05:21.550
Always keep back option Compiling demand switched on.

98
00:05:21.550 --> 00:05:22.520
And then,

99
00:05:22.520 --> 00:05:25.350
if you will run in this is a procedure.

100
00:05:25.350 --> 00:05:28.510
It runs fine,

101
00:05:28.510 --> 00:05:32.750
and the unfinished procedure doesn't get in the way.

102
00:05:32.750 --> 00:05:35.480
So let's just tidy things up.

103
00:05:35.480 --> 00:05:36.710
Let's just get rid of this.

104
00:05:36.710 --> 00:05:37.060
Ah,

105
00:05:37.060 --> 00:05:37.560
temporary.

106
00:05:37.560 --> 00:05:38.450
Some procedure.

107
00:05:38.450 --> 00:05:43.150
Reinstate the correct name on we're back in business.

108
00:05:43.150 --> 00:05:59.610
The default option Break on on handled errors found in the general tab of the V B option

109
00:05:59.610 --> 00:06:01.950
style off causes V B A.

110
00:06:01.950 --> 00:06:04.490
To respect any error handling that you introduce.

111
00:06:04.490 --> 00:06:06.330
I using on air ago.

112
00:06:06.330 --> 00:06:14.820
Two statements The option break on all errors causes VB eight a handle all heiress and

113
00:06:14.820 --> 00:06:17.230
ignore your attempts to override its default error.

114
00:06:17.230 --> 00:06:26.290
Handling the compiling demand option should be left activated since it allows VB A to

115
00:06:26.290 --> 00:06:32.190
compile only the sub procedure that you actually run as well as any sub procedure it calls

116
00:06:32.190 --> 00:06:33.970
deactivated.

117
00:06:33.970 --> 00:06:35.960
This option causes VB a toe,

118
00:06:35.960 --> 00:06:38.660
always compile every sub procedure in the model.

