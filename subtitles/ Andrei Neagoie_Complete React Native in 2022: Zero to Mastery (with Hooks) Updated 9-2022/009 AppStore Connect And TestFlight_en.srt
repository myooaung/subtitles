1
00:00:00,720 --> 00:00:07,320
Now that we've tested our app bundle on our simulator, the question becomes, well, how do we tested

2
00:00:07,320 --> 00:00:10,930
on our device, but also how do we release it to the App Store?

3
00:00:11,490 --> 00:00:18,390
And so if you go to App Store, connect dot apple dot com and you log into your account, here is where

4
00:00:18,390 --> 00:00:20,050
you will do your submission.

5
00:00:20,340 --> 00:00:22,730
This is where you submit your app to the App Store.

6
00:00:23,130 --> 00:00:30,120
And if we go over to my apps, you can create an app, a new app, and you can go through the submission

7
00:00:30,120 --> 00:00:30,720
process.

8
00:00:30,990 --> 00:00:33,270
As we can see here, I've set up meals to go.

9
00:00:33,850 --> 00:00:36,930
And if we click on this and we go over into test flight.

10
00:00:37,870 --> 00:00:43,900
We can see that this is where we can set up build testing for our IPPEI file.

11
00:00:43,930 --> 00:00:50,590
Remember the eBay file we downloaded that came inside the original build that we did not the test run

12
00:00:50,590 --> 00:00:51,780
that we did in our simulator?

13
00:00:52,060 --> 00:00:58,060
Well, in order to test that file, we need to upload the build over here and Appstore connect the test

14
00:00:58,060 --> 00:00:58,390
flight.

15
00:00:58,810 --> 00:01:04,360
So if we click on C upload tools, this is how you upload an IP to apps or connect.

16
00:01:04,360 --> 00:01:09,180
You can upload your binary with Xcode, you can upload them with the E.

17
00:01:09,340 --> 00:01:13,600
L tool and you can upload them with the transporter app.

18
00:01:14,230 --> 00:01:21,240
Now, all of these different ways are basically similar, but you need a Mac app in order to do this.

19
00:01:21,520 --> 00:01:26,590
So if we go over here and we say download the transporter app and we say open in the App Store.

20
00:01:29,640 --> 00:01:34,530
What we can see over here in the App Store is the ability to install the transporter app, which is

21
00:01:34,530 --> 00:01:38,130
going to upload the file into test flight.

22
00:01:38,400 --> 00:01:45,030
And so once we've installed this app, what will basically do is we'll go through the process of uploading

23
00:01:45,210 --> 00:01:49,020
the IPPEI file into test flight and then testing it on our phone.

24
00:01:49,200 --> 00:01:56,760
So opening that up will agree to the terms of service will sign in and we'll say our account information

25
00:01:56,760 --> 00:01:59,430
will fill that in, fill in our password.

26
00:01:59,850 --> 00:02:04,560
And then once we've signed into our Apple ID, what it's going to do is it's going to get through App

27
00:02:04,560 --> 00:02:05,370
Store Connect.

28
00:02:05,820 --> 00:02:07,020
We're going to add an app.

29
00:02:08,870 --> 00:02:17,300
Right, add up and what we can do over here is we can say over in our downloads folder we have.

30
00:02:18,370 --> 00:02:24,220
The date modified and we have our IPPEI file, and if we open that IPPEI file, what we'll be able to

31
00:02:24,220 --> 00:02:29,790
do is upload that so now we can click deliver.

32
00:02:30,970 --> 00:02:33,760
And so it's going to send it over to app or connect.

33
00:02:34,640 --> 00:02:39,350
Currently, it's verifying and analyzing the app output that was generated by XPO.

34
00:02:40,260 --> 00:02:45,930
And then once it's done doing that based on the identifier and everything around that, it's going to

35
00:02:45,930 --> 00:02:54,150
send it over into our Appstore connect over here and we'll be able to see it in our test flight built.

36
00:02:54,480 --> 00:02:55,680
We'll be able to select it.

37
00:02:55,890 --> 00:02:59,820
And so, as you can see, it's currently uploading the app to App Store Connect.

38
00:02:59,820 --> 00:03:05,770
And once it's uploaded the app, that's where we can go and connect our builds into test flight.

39
00:03:06,180 --> 00:03:08,460
So right now it's delivering the app.

40
00:03:09,180 --> 00:03:12,120
And if we go over here and we see.

41
00:03:13,600 --> 00:03:15,370
What happened in the log?

42
00:03:16,420 --> 00:03:17,770
It basically uploaded.

43
00:03:19,170 --> 00:03:25,650
Now, if we go over here into test flight, what will be able to do is when we reload, we'll see version

44
00:03:25,650 --> 00:03:27,660
zero point zero point one.

45
00:03:27,660 --> 00:03:31,410
So we now uploaded a version into Appstore Connect.

46
00:03:31,500 --> 00:03:35,280
And the way that it was connected is through that bundle identifier.

47
00:03:35,580 --> 00:03:41,580
One expo built the version of the app and built it with the same identifier that we set up when we initially

48
00:03:41,580 --> 00:03:44,970
set up our app in the Apple developer platform.

49
00:03:45,360 --> 00:03:47,690
OK, so how do I test this on my phone now?

50
00:03:48,620 --> 00:03:55,520
So the way that we allow people to test our application is over here in the Iowas built section of test

51
00:03:55,520 --> 00:03:58,040
flight, we can see that our build is currently processing.

52
00:03:58,430 --> 00:04:04,310
But if we go over here to the internal and external groups, what we can see is that as if we click

53
00:04:04,310 --> 00:04:09,320
on Appstore Connect users, App Store Connect users can use test flight on all devices and all active

54
00:04:09,320 --> 00:04:09,750
builds.

55
00:04:09,770 --> 00:04:16,959
So if we add a tester, what we need to do is we need to add our admin account as a tester.

56
00:04:17,510 --> 00:04:21,800
Now, no builds are currently available as the current build is still processing.

57
00:04:21,829 --> 00:04:26,440
Once this build has been processed, it will become available in the test flight app.

58
00:04:26,990 --> 00:04:30,350
So we have to wait in order for the processing to be done.

59
00:04:30,500 --> 00:04:33,170
And once it's done, we can test out our application.

60
00:04:34,040 --> 00:04:39,950
Once our build has been processed by test flight, we now will get a confirmation email of an invite

61
00:04:39,950 --> 00:04:43,700
to test meals to go, because when there are no active builds, you will not get the invite.

62
00:04:43,700 --> 00:04:47,630
But once there is an active built to test, you will get an email inviting you to test.

63
00:04:47,630 --> 00:04:54,350
And if we save you in test flight, this will allow us to accept the invite to test our meals to go,

64
00:04:54,620 --> 00:04:58,310
which will install it locally on our production phone.

65
00:04:59,330 --> 00:05:05,870
And once we've installed meals to go, we can then go ahead and test it as if it was downloaded live

66
00:05:05,870 --> 00:05:06,560
from the App Store.

67
00:05:06,570 --> 00:05:14,000
So we're basically through test flight, going to install and download the version that is going live

68
00:05:14,000 --> 00:05:14,920
on the App Store.

69
00:05:15,320 --> 00:05:18,140
And so if we test that out, might be that I.

70
00:05:20,150 --> 00:05:28,760
And we do test one, two, three, what we can see here is that the app is the same that we were testing

71
00:05:28,760 --> 00:05:31,670
in development mode, but now it's a production build.

72
00:05:32,000 --> 00:05:39,710
It's very smooth and it's very capable of allowing us to test out all of the different functionality

73
00:05:40,070 --> 00:05:43,760
that we would see in a production app.

74
00:05:45,460 --> 00:05:51,130
We were able to give feedback through test flight, test flight is basically an app for quality assurance.

75
00:05:51,460 --> 00:05:56,620
It is what is going to go on to the App Store, but it's before the distribution to the App Store.

76
00:05:56,620 --> 00:06:01,600
So you can invite multiple testers, you can invite a bunch of different people before your app is actually

77
00:06:01,600 --> 00:06:03,610
submitted to the App Store to test it out.

78
00:06:04,120 --> 00:06:07,120
And the way that you would do that is to invite more testers.

79
00:06:07,120 --> 00:06:12,940
They would install test flight on their app and then they would have the ability to test out the versions

80
00:06:12,940 --> 00:06:13,810
that are available.

81
00:06:14,050 --> 00:06:19,960
And so the version that we have right here can also be the version that we distribute over here.

82
00:06:20,350 --> 00:06:20,640
Right.

83
00:06:20,650 --> 00:06:26,140
We could select the build and so we can now submit multiple builds to test flight and then we can eventually

84
00:06:26,140 --> 00:06:31,030
choose which one we're going to send with the submission for the App Store for review.

85
00:06:31,840 --> 00:06:38,020
And so the process here is kind of more rigorous and more secure than what you would see with, for

86
00:06:38,020 --> 00:06:39,250
instance, the Google Play store.

87
00:06:39,460 --> 00:06:40,780
And that is intentional.

88
00:06:40,780 --> 00:06:48,850
The Apple ecosystem has more security parameters in place, a lot more process, but the flow is very

89
00:06:48,850 --> 00:06:54,610
similar in terms of all the information you have to supply in order to submit your application and all

90
00:06:54,610 --> 00:06:59,710
of these extra things you need to do to get your app ready for deployment.

91
00:07:00,040 --> 00:07:06,640
And so with that, we've seen how we can build for Android and deploy that on an iPhone to test.

92
00:07:06,640 --> 00:07:11,100
And we saw where we can deploy on the Google Play store and all the information we need to fill in.

93
00:07:11,590 --> 00:07:18,130
We've seen how we can test on an Iowa simulator production version of the app, as well as how to upload

94
00:07:18,130 --> 00:07:24,940
our app to the App Store Kinect, test our app through test flight on a live production phone, and

95
00:07:24,940 --> 00:07:33,400
also go through the motions of seeing how those builds can be sent to different people to test and adding

96
00:07:33,400 --> 00:07:38,050
testers and adding the ability to kind of have a more holistic process.

97
00:07:38,050 --> 00:07:44,800
So very different ecosystems, very different distribution processes, very different in general.

98
00:07:45,740 --> 00:07:53,900
But we built one code base and now all we had to do was build two different outputs and follow the processes

99
00:07:53,900 --> 00:07:56,360
that are in place for both stores.

100
00:07:56,540 --> 00:08:01,100
Now, this is usually a process that is handled by a different department or by a more senior member

101
00:08:01,100 --> 00:08:07,190
of your team, so forth, and so forward or even automated, because you only do it once and once you

102
00:08:07,190 --> 00:08:10,680
do it from there on, it's just about distributing updates.

103
00:08:11,540 --> 00:08:13,070
I hope this was useful.

104
00:08:13,370 --> 00:08:19,460
Always reach to the documentation of Expo as it is very detailed and very useful for you to go through

105
00:08:19,460 --> 00:08:23,150
the process of the detailed steps that you may need to take.

