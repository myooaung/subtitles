WEBVTT
1
00:00:00.590 --> 00:00:02.430
So now we have a couple of things we can improve on.

2
00:00:02.480 --> 00:00:08.189
We know that when we click it's going to transition and it's transitioning from left to right.

3
00:00:08.930 --> 00:00:16.190
So first of all, we want everything in the restaurant Stack Navigator to come up like a model except

4
00:00:16.190 --> 00:00:18.560
the initial screen, the initial entry point.

5
00:00:18.570 --> 00:00:20.260
This is the initial entry point of the stack.

6
00:00:20.270 --> 00:00:26.360
So it's it's always what will render first anything subsequent we want to render as a model.

7
00:00:26.780 --> 00:00:30.800
And so in order to do that, what we want to do is we want to import something called.

8
00:00:32.009 --> 00:00:34.990
Not from here, from the Stock Navigator.

9
00:00:35.010 --> 00:00:38.730
We have something in here called Transition Presets.

10
00:00:39.710 --> 00:00:45.560
And so what this allows us to do is set the transition for the screen and so in the Stack Navigator,

11
00:00:45.890 --> 00:00:51.950
what we can do is we can pass something called screen options and we give it an object.

12
00:00:52.610 --> 00:00:59.980
And so that in that object, what we want to give it is dot, dot, dot transition.

13
00:01:00.020 --> 00:01:01.760
So we're spreading transition presets.

14
00:01:01.760 --> 00:01:06.740
We're spreading everything on transition presets, dot modal presentation.

15
00:01:07.690 --> 00:01:16.690
I os, and that will set a modal presentation that happens like iOS would, and so now when we hit our

16
00:01:17.110 --> 00:01:19.860
target, it's coming in from the bottom, right?

17
00:01:19.990 --> 00:01:21.250
It's coming in from the bottom.

18
00:01:21.250 --> 00:01:23.580
And it's it's working as intended.

19
00:01:23.830 --> 00:01:27.640
It's swiping up, which is super useful for us.

20
00:01:28.380 --> 00:01:30.220
OK, but there's there's one more thing.

21
00:01:30.220 --> 00:01:32.940
We're not really getting any visual feedback on our press.

22
00:01:32.950 --> 00:01:36.120
Remember when we were looking at the press API?

23
00:01:36.730 --> 00:01:43.990
Well, when we were looking at the press API, we saw that it has the ability to to track the presses

24
00:01:44.350 --> 00:01:46.480
and track how long something is pressing.

25
00:01:46.480 --> 00:01:49.930
But it really doesn't give us any visual feedback.

26
00:01:50.290 --> 00:01:54.250
It it kind of just works the way that you can.

27
00:01:54.250 --> 00:01:58.260
You can allow press and you can build custom press ability.

28
00:01:58.930 --> 00:02:02.760
So let's let's go back to touchable without feedback.

29
00:02:02.770 --> 00:02:06.100
Well, touchable without feedback was going to allow us to touch without feedback.

30
00:02:06.400 --> 00:02:14.740
So if we take that right, what we were going to see was if we go to our restaurant screen, if we look

31
00:02:14.740 --> 00:02:18.850
at Pressel and we quickly replace that with touchable without feedback.

32
00:02:18.850 --> 00:02:19.160
Right.

33
00:02:19.660 --> 00:02:26.260
So now what we're going to see is, is that we're going to have the same effect, but we're not really

34
00:02:26.260 --> 00:02:27.460
seeing any feedback.

35
00:02:27.850 --> 00:02:33.550
So what we actually really want is something called touchable opacity.

36
00:02:34.810 --> 00:02:42.580
Now, touchable opacity is going to point us in a wrapper for making it respond to tuchis properly so

37
00:02:42.580 --> 00:02:47.590
if we press it, it's showing us an opacity happening and opacity transition.

38
00:02:48.160 --> 00:02:54.190
So although Pressel is the extensive future proof way to handle touch based inputs.

39
00:02:55.220 --> 00:03:01.400
You still have to do a lot of heavy lifting in order to get the actual output that you want, for simplicity's

40
00:03:01.400 --> 00:03:04.940
sake, we're going to use something called touchable opacity.

41
00:03:05.090 --> 00:03:11.780
And now what happens is when we click, we're going to see feedback, we're going to see the card fade

42
00:03:11.780 --> 00:03:12.200
out.

43
00:03:12.500 --> 00:03:19.190
And that's going to allow us that visual feedback that we were looking for in order for the user to

44
00:03:19.190 --> 00:03:21.050
properly be able to handle.

45
00:03:21.710 --> 00:03:28.100
And so the reason we went back and forth on this is because with the possible API, we have an extensible,

46
00:03:28.100 --> 00:03:34.100
more rigorous way of handling process we can handle on Pressin, on Prasow, we can figure out when

47
00:03:34.100 --> 00:03:38.750
the press was activated, when it's deactivated, we can have the long presses, short presses, but

48
00:03:38.750 --> 00:03:40.640
we don't need all of that configurability.

49
00:03:40.640 --> 00:03:44.540
What we want is a wrapper for making views responsible to touches.

50
00:03:44.990 --> 00:03:52.310
And by default, the touchable opacity will control the opacity by wrapping the children in an animated

51
00:03:52.310 --> 00:03:57.320
view and adding that now this can affect the layout, of course.

52
00:03:57.320 --> 00:04:00.140
But for us it really isn't affecting the layout.

53
00:04:00.140 --> 00:04:03.170
It's just adding a nice opacity transition to the touch.

54
00:04:03.770 --> 00:04:09.650
So it's important to know that although we could use the press API in order to have an extensible experience

55
00:04:09.860 --> 00:04:13.550
and be able to control the press action and different versions of press actions.

56
00:04:13.550 --> 00:04:19.670
For instance, if we wanted to long press on this and then show a menu or things like that, we would

57
00:04:19.670 --> 00:04:22.220
use the press API and we would do some fine tuning.

58
00:04:22.580 --> 00:04:27.000
But for all intents and purposes, all we're looking for is some feedback and the ability to touch.

59
00:04:27.740 --> 00:04:30.470
So with that touchable opacity works a bit better.

