WEBVTT
1
00:00:00.620 --> 00:00:07.010
We're in the homestretch, I promise, now that we're able to validate the payment request, we have

2
00:00:07.040 --> 00:00:11.150
some form of UI state going on here to handle loading and unloading.

3
00:00:11.780 --> 00:00:16.700
When we successfully do a payment request, we want to clear the cart.

4
00:00:17.090 --> 00:00:22.700
This is extremely important because if we don't clear the card on success, then you're just going to

5
00:00:22.700 --> 00:00:25.040
end up paying for the same thing again.

6
00:00:25.040 --> 00:00:26.510
You don't really want to do that.

7
00:00:26.960 --> 00:00:32.080
And on top of that, we also want to potentially leave the name intact.

8
00:00:32.090 --> 00:00:33.920
We don't want to set name to an empty string.

9
00:00:34.460 --> 00:00:37.540
If you come back to the card at some point, you may want to fill it in again.

10
00:00:38.090 --> 00:00:44.270
So it's important to know that in this portion of the app is where the majority is going to happen.

11
00:00:44.280 --> 00:00:51.040
But now what we want to do is we want to send you to a different screen in case you do succeed.

12
00:00:51.380 --> 00:00:59.240
And so to do that, well, right now, if we go to App Navigator, what we're going to see is that our

13
00:00:59.240 --> 00:01:03.200
App Navigator is loading the checkout screen.

14
00:01:04.220 --> 00:01:10.520
So maybe we need something a bit more robust, like a checkout navigator, and by creating a checkout

15
00:01:10.520 --> 00:01:19.870
navigator, we could potentially create a more robust end to end flow for the user in terms of navigation.

16
00:01:19.880 --> 00:01:23.000
So let's import checkout navigator.

17
00:01:25.910 --> 00:01:30.420
Dot, dot, dot, dot, dot, slash, checkout, dot navigator.

18
00:01:31.610 --> 00:01:37.880
And so right now, what we need to create is over here in navigation will create a new file, checkout,

19
00:01:37.880 --> 00:01:46.400
dot navigator, dot jazz and in out the navigator that this is where we're going to build out a new

20
00:01:46.400 --> 00:01:47.450
stack navigator.

21
00:01:47.460 --> 00:01:53.900
So for us to do that, first of all, it's import our checkout screen here and then let's go into the

22
00:01:53.900 --> 00:01:59.520
Settings Navigator and let's import portions of what it does here.

23
00:01:59.930 --> 00:02:04.660
So let's let's import all of this stuff and let's put it right here.

24
00:02:05.240 --> 00:02:07.630
So first of all, we don't need this favorite screen.

25
00:02:07.640 --> 00:02:09.050
We don't need the setting screen.

26
00:02:09.470 --> 00:02:14.300
We have our checkout screen now instead of a settings stack.

27
00:02:14.300 --> 00:02:18.410
What we're going to do is we're going to call it a checkout stack.

28
00:02:19.580 --> 00:02:28.370
And down here, what we're going to say is export const checkout navigator is equal to a function that

29
00:02:28.370 --> 00:02:32.720
will return checkout stack dot navigator.

30
00:02:33.500 --> 00:02:36.460
And we're going to put header mode to none.

31
00:02:37.400 --> 00:02:42.620
And then we're going to close this one off and we're going to start building our.

32
00:02:43.610 --> 00:02:44.360
Navigator.

33
00:02:44.960 --> 00:02:51.560
So now that we have this, what we need is a checkout stack, dot screen and we're going to give that

34
00:02:51.560 --> 00:02:53.030
the name of.

35
00:02:53.820 --> 00:03:01.380
You guessed it, check out and by doing this now, we can give it the component out screen.

36
00:03:05.020 --> 00:03:13.960
All right, and if we do all of this, what we need to do as well is make sure that this works as intended.

37
00:03:14.200 --> 00:03:15.250
So let's go over to check out.

38
00:03:15.780 --> 00:03:16.340
There we go.

39
00:03:16.540 --> 00:03:20.180
It's still working if we order the special still working.

40
00:03:20.560 --> 00:03:27.460
So now what we want to do is add two more screens, one mainly called check out success and another

41
00:03:27.460 --> 00:03:29.590
called out error.

42
00:03:30.280 --> 00:03:37.630
And one's going to take a Check-Out success screen and the others are going to take a Check-Out error

43
00:03:37.630 --> 00:03:38.180
screen.

44
00:03:38.740 --> 00:03:40.570
Now, these are both going to come from.

45
00:03:42.320 --> 00:03:49.280
The screens folder, but we're going to call it Check-Out error dot screen and check out success dot

46
00:03:49.280 --> 00:03:49.710
screen.

47
00:03:50.300 --> 00:03:54.710
And over here, this is going to be the checkout success screen and this is going to be the checkout

48
00:03:54.860 --> 00:03:55.610
error screen.

49
00:03:56.540 --> 00:04:04.260
And now all we need to do is go over into our screens and say, check out the error screen thought.

50
00:04:04.310 --> 00:04:04.730
Yes.

51
00:04:05.750 --> 00:04:10.580
And check out that success, that screen such as?

52
00:04:11.590 --> 00:04:19.930
And with these, we can now build out a fully fledged screen, check out success screen and check out

53
00:04:19.930 --> 00:04:20.630
error screen.

54
00:04:21.339 --> 00:04:22.510
What will those look like?

55
00:04:23.170 --> 00:04:24.670
Well, they'll look as follows.

56
00:04:24.910 --> 00:04:29.290
So let's implement one to begin with import, react from react.

57
00:04:29.770 --> 00:04:33.890
And then let's also import the things that we always need.

58
00:04:34.210 --> 00:04:42.280
So first of all, let's import the safe area, the spacer and text and let's see which which of these

59
00:04:42.370 --> 00:04:43.230
will end up meeting.

60
00:04:44.560 --> 00:04:47.590
So and then let's go ahead and import.

61
00:04:48.520 --> 00:04:53.860
Some of these components from checkout styles, because we'll need some of them, the mainly the ones

62
00:04:53.860 --> 00:04:57.470
that will need are the cart icon in the cart icon container.

63
00:04:57.940 --> 00:04:59.500
Those are extremely important.

64
00:04:59.890 --> 00:05:09.240
And what we'll do here is we'll export CONSED checkout success screen and we'll say that checkout success

65
00:05:09.250 --> 00:05:13.960
green is equal to the render of the card icon container.

66
00:05:15.170 --> 00:05:17.540
Inside of the safe area.

67
00:05:17.930 --> 00:05:19.990
So let's wrap that with a safe area.

68
00:05:22.690 --> 00:05:30.460
And then let's put a safe area around here, a safe area, and then once we do that, we can save inside

69
00:05:30.460 --> 00:05:39.070
of Kaat container, we can put the cart icon and we could say icon is equal to check Vache bold.

70
00:05:41.650 --> 00:05:43.690
And we can close off this one.

71
00:05:44.910 --> 00:05:54.810
And we'll need some text, so we'll see text variant equals label and we'll see inside of that text,

72
00:05:54.820 --> 00:05:56.100
we'll put success.

73
00:05:57.060 --> 00:06:06.240
And text, so here we go now we have our success screen, we don't end up meeting our speaker and then

74
00:06:06.420 --> 00:06:11.400
we'll copy all of this and we'll build out our error screen.

75
00:06:12.740 --> 00:06:18.740
So for our air screen, it's going to look a bit of the same, except we're going to call it error screen.

76
00:06:19.870 --> 00:06:27.910
And we're going to say instead of success, we're going to pass in an error and we're going to get that

77
00:06:27.910 --> 00:06:33.700
error from the root, so the root is going to get a parameter.

78
00:06:34.100 --> 00:06:39.190
So we're going to return here and we're going to say the root is going to get a parameter.

79
00:06:39.580 --> 00:06:49.270
So CONSED error is equal to root dot programs and we'll default the error to an empty string just in

80
00:06:49.270 --> 00:06:49.780
case.

81
00:06:50.910 --> 00:06:58.140
And so right now, the last thing that we need to do is say that this is close and we'll set the background

82
00:06:58.140 --> 00:07:01.590
to colors, thought you I thought error.

83
00:07:02.580 --> 00:07:12.250
And so one more thing will need in here is colors which will get from infrastructure theme colors.

84
00:07:12.990 --> 00:07:13.530
There we go.

85
00:07:14.040 --> 00:07:15.720
So now we've set up two screens.

86
00:07:16.140 --> 00:07:21.660
We haven't hook them up yet, but we've set them up and we still have.

87
00:07:23.080 --> 00:07:27.620
The navigator, that is, check out that navigator.

88
00:07:28.390 --> 00:07:33.930
So this one is set up with both screens and now we all we need to do is in check out that screen.

89
00:07:33.950 --> 00:07:36.310
We need to decide when we're going to navigate to which.

90
00:07:36.730 --> 00:07:43.480
So we're going to pull in the navigation and we're going to see here navigation.

91
00:07:45.080 --> 00:07:45.620
Navigate.

92
00:07:47.180 --> 00:07:50.120
And we're going to go to Check-Out Error.

93
00:07:53.450 --> 00:07:59.650
And let's just make sure that that is our out navigation, check out success, check out error.

94
00:08:00.050 --> 00:08:02.150
So we're going to go over to check out error.

95
00:08:02.870 --> 00:08:03.220
Right.

96
00:08:03.770 --> 00:08:05.570
But now what do we do?

97
00:08:06.020 --> 00:08:14.040
Because now we need to supply with a specific error in order for us to be able to utilize it properly.

98
00:08:14.190 --> 00:08:14.690
Right.

99
00:08:16.200 --> 00:08:19.440
And so the way that that looks here is at this level of the check out error.

100
00:08:20.310 --> 00:08:22.170
Well, our error is currently.

101
00:08:23.100 --> 00:08:32.010
Please fill in a valid credit card because we don't have one, that's the error that the user should

102
00:08:32.280 --> 00:08:32.789
see.

103
00:08:33.770 --> 00:08:41.299
OK, now over here, the error can be simplified to just take in the error variable.

104
00:08:42.490 --> 00:08:48.010
And up here, we're going to be navigating to check out success.

105
00:08:49.010 --> 00:08:52.080
No error, no program for the route, no nothing.

106
00:08:52.790 --> 00:08:58.040
And by doing this, we've now handled three use cases in one function.

107
00:08:58.640 --> 00:09:01.400
Now let's see what that looks like because we haven't tested it out just yet.

108
00:09:01.940 --> 00:09:06.950
If we go over here and we order the special and we say, P, please fill in a valid credit card.

109
00:09:06.960 --> 00:09:10.970
So if we hit checkout again, we're going to go over here mobily.

110
00:09:11.690 --> 00:09:16.970
And if we hit Payen, it's still going to say, hey, fill in a proper credit card, don't play with

111
00:09:16.970 --> 00:09:17.260
me.

112
00:09:17.270 --> 00:09:19.070
The app is pretty serious at this point.

113
00:09:19.580 --> 00:09:24.620
And then if we fill in four to four to our valid credit card.

114
00:09:26.200 --> 00:09:32.800
Now, if we hit pay, it's processing the payment processing payment, oh, we hit the success case,

115
00:09:33.190 --> 00:09:39.760
we went all the way to a successful payment and now if we hit checkout, our cart is empty and we can

116
00:09:39.760 --> 00:09:45.910
rest assured that our payment has been processed properly in the payment intense.

117
00:09:46.240 --> 00:09:48.150
We can see McGeeney over here.

118
00:09:48.730 --> 00:09:49.150
Right.

119
00:09:49.550 --> 00:09:58.990
And so with that, we now have the ability for us to go end to end, have proper error management throughout

120
00:09:58.990 --> 00:10:07.380
the entire flow and be able to successfully utilize all of this properly.

121
00:10:07.570 --> 00:10:10.960
But there's one more scenario that we need to catch here, right?

122
00:10:10.960 --> 00:10:13.390
Because we're only handling the payment flow.

123
00:10:13.660 --> 00:10:20.980
We're not handling the errors that may potentially come in when the credit card errors, the credit

124
00:10:20.980 --> 00:10:27.370
card input, we haven't on success, but we don't really have an on error and so are on error here is

125
00:10:27.370 --> 00:10:34.990
going to be along the lines of navigation that navigate, but it's going to say something went wrong

126
00:10:34.990 --> 00:10:36.250
processing your credit card.

127
00:10:38.830 --> 00:10:44.830
And so how would this actually work and in effect, right, if we want the credit card component, we're

128
00:10:44.830 --> 00:10:48.270
not really processing any errors that would happen here.

129
00:10:48.520 --> 00:10:55.590
So when you use async await, you have to wrap the entirety of it in something called a try catch themen

130
00:10:55.900 --> 00:10:56.710
and the catch.

131
00:10:58.110 --> 00:11:00.610
Catches errors from the car token request.

132
00:11:00.960 --> 00:11:06.120
So in this case, if we do catch an error, we can say on error and we can call it.

133
00:11:06.980 --> 00:11:17.420
Immediately, so if our credit card was to fail in any way, shape or form over here when requesting

134
00:11:17.810 --> 00:11:22.460
an actual credit card token, we can see it happen.

135
00:11:22.970 --> 00:11:24.220
Now, how would that happen?

136
00:11:24.950 --> 00:11:31.130
Well, Strib has something called testing documentation, and that testing documentation comes with

137
00:11:31.130 --> 00:11:34.400
specific credit cards like the four to four to four to I was using.

138
00:11:34.790 --> 00:11:41.720
And these card numbers will invoke specific errors when utilized.

139
00:11:42.260 --> 00:11:49.010
And over here, you can see, for instance, this one, if a quick number is provided, the CVC check

140
00:11:49.010 --> 00:11:50.510
will immediately fail.

141
00:11:50.690 --> 00:11:55.820
And by offering us all of these test cards, we can test for very specific scenarios when building our

142
00:11:55.820 --> 00:11:56.270
UI.

143
00:11:56.840 --> 00:12:01.820
So if I go over here to my app and I fill in, it seems like something's wrong here.

144
00:12:02.150 --> 00:12:03.040
Oh, of course.

145
00:12:03.050 --> 00:12:09.800
Well, we need to wrap this with a function, otherwise it's going to invoke immediately all the time.

146
00:12:10.970 --> 00:12:15.830
OK, so now that that's out of the way, if we go over here and we fill in Mobeen and then we fill in

147
00:12:15.830 --> 00:12:20.220
that test card and we say zero to twenty two and we fill in two, three, four.

148
00:12:21.080 --> 00:12:27.260
Now if we hit pay, what's going to happen is, well, it's still going to process.

149
00:12:27.620 --> 00:12:29.240
Something went wrong with your payment.

150
00:12:29.450 --> 00:12:32.410
So the payments are going to fail at the payment level.

151
00:12:32.750 --> 00:12:35.500
But what we can see here is that this was never invoked.

152
00:12:35.750 --> 00:12:45.950
This is because this creation of a stripe token over here didn't necessarily invoke an error.

153
00:12:46.550 --> 00:12:48.050
That is not what happened here.

154
00:12:48.290 --> 00:12:51.020
This does not do checks against a credit card.

155
00:12:51.020 --> 00:12:53.450
But luckily, our payment gateway does.

156
00:12:53.480 --> 00:12:58.640
Right, because the error we saw here is something went wrong, processing your payment.

157
00:12:59.510 --> 00:13:03.790
But the air we gave here is something went wrong processing your credit card.

158
00:13:04.910 --> 00:13:11.530
Now, this will fail in specific scenarios where the endpoint is down or something else went wrong.

159
00:13:11.690 --> 00:13:14.770
But we have multiple layers of validation going on here.

160
00:13:15.230 --> 00:13:21.560
So you may not be able to invoke this specific error immediately, but we still catch the cases where

161
00:13:21.740 --> 00:13:24.640
this endpoint may feel for whatever reason.

162
00:13:25.160 --> 00:13:31.100
It's also important to note here that these test credit cards will invoke specific failures on the payment

163
00:13:31.100 --> 00:13:31.460
side.

164
00:13:31.610 --> 00:13:38.110
And as you can see here, if we go to all, you'll see a failed payment come through blocked.

165
00:13:38.630 --> 00:13:42.830
So the payment went all the way to the payment gateway.

166
00:13:42.830 --> 00:13:45.530
But as we can see, the CVC check failed.

167
00:13:45.770 --> 00:13:49.210
The CVC check failed, just like it said in the testing documentation.

168
00:13:49.220 --> 00:13:53.770
The quick check will be failed and the payment will be blocked.

169
00:13:54.200 --> 00:13:58.580
Now, creating the token here, creating the credit card token.

170
00:13:58.910 --> 00:14:02.720
There is no strict strict level of validation that happens here.

171
00:14:02.720 --> 00:14:08.870
But if this API endpoint were to fail, for whatever reason, we we are catching that Iraqis, when

172
00:14:08.870 --> 00:14:14.600
we send the information to the payment gateway, the payment gateway is doing a strict check against

173
00:14:14.600 --> 00:14:16.930
everything to make sure that the payment can actually go through.

174
00:14:16.940 --> 00:14:25.220
So we have covered all of our validation and error case handling in this beautiful, beautiful, elegant

175
00:14:25.220 --> 00:14:25.730
way.

