WEBVTT
1
00:00:01.250 --> 00:00:07.190
Now that we have everything working except for our images, instead of running ADMA image, we're going

2
00:00:07.190 --> 00:00:14.300
to say ad Google image and what we're going to do is we're going to declare a function up here consed

3
00:00:14.300 --> 00:00:20.600
ad Google image that's going to take in the restaurant and is going to do something with that information

4
00:00:20.690 --> 00:00:27.800
in order to structure a euro that can be utilized because currently the information that is available

5
00:00:27.800 --> 00:00:31.640
in that restaurant photos is not something we want to use.

6
00:00:32.420 --> 00:00:38.260
Now if you remember, the restaurants contained the photos array that contained a bunch of information.

7
00:00:38.270 --> 00:00:44.090
So every restaurant has a specific restaurant, that photo reference.

8
00:00:44.090 --> 00:00:52.880
So every restaurant that photos has in the zero index, something called the photo reference.

9
00:00:53.240 --> 00:00:59.120
This photo reference is something that we can utilize to build up your role for the information.

10
00:00:59.120 --> 00:01:06.260
And if we go look over here, we can see photo reference is a unique key that we can utilize.

11
00:01:06.500 --> 00:01:12.020
So we're going to pull the reference and we're going to say, if you do not have a reference, well,

12
00:01:12.020 --> 00:01:14.840
then we're going to return restaurant.

13
00:01:15.990 --> 00:01:25.230
And we need to do something else, we're going to set restaurant up photos equal to an array where we

14
00:01:25.350 --> 00:01:32.010
take a singular mock image right from in here and we're going to hardcoded we're going to say, hey,

15
00:01:32.010 --> 00:01:38.400
any time you don't have a reference for the image, just grab this image, put it in there and we should

16
00:01:38.400 --> 00:01:38.790
be good.

17
00:01:39.120 --> 00:01:42.550
But if you do have a reference, well, that's where it gets interesting.

18
00:01:42.990 --> 00:01:46.020
This is where we want to return restaurant at the end.

19
00:01:47.200 --> 00:01:54.300
But now what we want to do is we want to say that if you do have a reference, well, then restaurant

20
00:01:54.310 --> 00:02:01.800
up photos should be equal to the following maps that Google API slash police slash photo.

21
00:02:01.810 --> 00:02:03.730
This is a specific API to get a photo.

22
00:02:04.090 --> 00:02:09.930
And what it takes is a width for the image and then the photo reference to which will give it the ref.

23
00:02:10.449 --> 00:02:17.640
This is the reference of our image that is coming in from our restaurant and we give it our API key.

24
00:02:18.550 --> 00:02:25.510
And by doing this, we're now going to be sending back this information specifically to our restaurant

25
00:02:25.510 --> 00:02:32.530
individually, and if we go over here and we reload, what we should be able to see is that we're going

26
00:02:32.530 --> 00:02:41.710
to get back the real restaurant images because now we're getting back real Yarl's, to the images of

27
00:02:41.710 --> 00:02:43.750
the reference of that actual place.

28
00:02:43.990 --> 00:02:46.300
We're not getting back random images anymore.

29
00:02:46.310 --> 00:02:47.650
We're getting back real images.

30
00:02:47.860 --> 00:02:55.180
Now, do be aware this bulks up the amount of calls that you are doing to Google Maps places.

31
00:02:55.450 --> 00:03:01.750
This shoots and spikes up the amount of requests because for every single image is a request to Google

32
00:03:01.750 --> 00:03:02.280
places.

33
00:03:02.530 --> 00:03:09.460
So if you don't want to do this, you could easily add back in the ad mock image right over here and

34
00:03:09.520 --> 00:03:14.560
you could just work with mock images just in case you didn't want to work with the live images and do

35
00:03:14.710 --> 00:03:15.660
as many calls.

36
00:03:15.940 --> 00:03:20.680
Now, if we go over to Sydney, what we'll see is that there we go.

37
00:03:20.680 --> 00:03:23.590
We're getting back real images of these places.

38
00:03:24.220 --> 00:03:29.410
It's feeling like a real application that's integrated fully with Google.

39
00:03:29.980 --> 00:03:31.600
And so it's that simple.

40
00:03:31.900 --> 00:03:39.100
We just need to integrate some find bits and pieces from the Google Maps API doing some requests to

41
00:03:39.100 --> 00:03:43.480
specific you URLs, constructing client calls.

42
00:03:44.930 --> 00:03:52.130
That's it, two simple functions, two simple firebase functions hosted on the cloud that can now supply

43
00:03:52.280 --> 00:03:55.220
our app with real information.

44
00:03:55.550 --> 00:03:58.880
And so now you could go and deploy this, right?

45
00:03:58.880 --> 00:04:00.740
You could deploy these firebase functions.

46
00:04:01.190 --> 00:04:07.490
And once you deploy these firebase functions, you can set your local app to utilize those remote firebase

47
00:04:07.490 --> 00:04:13.970
functions, or you can do an expo, publish and then have that app talk to the firebase functions for

48
00:04:13.970 --> 00:04:14.390
real.

49
00:04:15.280 --> 00:04:19.120
And the full end to end integration is now a reality.

50
00:04:19.839 --> 00:04:20.589
Amazing.

