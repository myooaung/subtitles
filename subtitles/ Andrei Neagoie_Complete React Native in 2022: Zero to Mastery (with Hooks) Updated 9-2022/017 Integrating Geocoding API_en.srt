1
00:00:00,600 --> 00:00:05,490
So in order to set a variable, we're going to run firebase functions, config, set some service keys

2
00:00:05,490 --> 00:00:06,190
equal to this study.

3
00:00:07,140 --> 00:00:11,610
But before we do that, let's see what we have in our current environment configuration.

4
00:00:11,610 --> 00:00:15,680
And so the way to do that is to do firebase functions config yet.

5
00:00:15,960 --> 00:00:18,360
So if you run this well, we're going to see.

6
00:00:18,360 --> 00:00:20,280
Is that currently well.

7
00:00:21,440 --> 00:00:23,540
First of all, we have to copy paste that, correct?

8
00:00:24,040 --> 00:00:25,880
Well, we're going to see we have an empty object.

9
00:00:26,060 --> 00:00:32,540
And so now if we do, firebase functions can fix that some service key and we set it to some key.

10
00:00:33,050 --> 00:00:39,350
What's going to happen is now when we run our get command, we're going to see that our local cache

11
00:00:39,350 --> 00:00:40,780
is storing some service key.

12
00:00:40,790 --> 00:00:44,400
In the next time we deploy, these keys will be pushed up.

13
00:00:44,950 --> 00:00:50,270
Now, I don't want some service Stotsky so I can do something called unset.

14
00:00:51,050 --> 00:00:56,870
I can do unset some service and this will remove this from my firebase configuration.

15
00:00:57,050 --> 00:00:58,010
So that removes it.

16
00:00:58,010 --> 00:01:01,040
And if we do the get now, we're back to an empty object.

17
00:01:01,960 --> 00:01:04,090
OK, so what do I want us to do?

18
00:01:04,120 --> 00:01:08,180
Well, I want us to do the set command, but I want us to do it in a very specific way.

19
00:01:08,620 --> 00:01:16,770
I want us to set Google dot key and I want you to set that equal to your API key.

20
00:01:16,990 --> 00:01:24,580
So in between these brackets, I want you to fill in your EPIK, not specifically what I'm typing right

21
00:01:24,580 --> 00:01:24,810
here.

22
00:01:24,820 --> 00:01:32,740
I want you to go copy paste your APIC from the credentials and I want you to piece that between here.

23
00:01:33,110 --> 00:01:34,480
Then I want you to run that.

24
00:01:35,460 --> 00:01:37,810
And then we'll be able to see it once you do again.

25
00:01:37,830 --> 00:01:45,690
So if I said something like something here and then we went and did firebase functions that get I want

26
00:01:45,690 --> 00:01:53,460
you to be able to see instead of something, I want you to see the API that you have right here between

27
00:01:53,940 --> 00:01:56,130
these brackets or the string.

28
00:01:56,880 --> 00:01:57,260
All right.

29
00:01:57,270 --> 00:01:58,710
So I'm going to go do that real quick.

30
00:01:59,600 --> 00:02:04,970
All right, so I set mine to Stormi Epic, I hope you did the same, and now the question becomes,

31
00:02:04,970 --> 00:02:06,410
well, how do we utilize it now?

32
00:02:06,620 --> 00:02:08,199
How do we utilize it in our code?

33
00:02:08,690 --> 00:02:09,699
And that's a good question.

34
00:02:10,130 --> 00:02:14,690
The way that we're going to do that is we're going to import something called CONSED functions, and

35
00:02:14,690 --> 00:02:20,900
so we're going to import that directly into here and we're going to utilize functions that config,

36
00:02:21,530 --> 00:02:23,030
that some service already.

37
00:02:23,300 --> 00:02:28,750
But instead of calling some service that ID, what we're going to call is Google dot key.

38
00:02:29,420 --> 00:02:38,450
And now if we go over to our meals to go and we say mock false O cannot read property key of undefined

39
00:02:38,450 --> 00:02:39,660
by geocode request.

40
00:02:40,040 --> 00:02:40,690
Interesting.

41
00:02:41,180 --> 00:02:47,060
Well if we did our config yet we saw our configuration available locally.

42
00:02:47,900 --> 00:02:48,230
Right.

43
00:02:48,230 --> 00:02:50,720
We saw it in the firebase functions config get.

44
00:02:50,990 --> 00:02:53,840
So why isn't it available to us.

45
00:02:54,470 --> 00:03:01,580
Well the reason for that is right now it's only stored in memory as part of the availability to push

46
00:03:01,580 --> 00:03:03,890
it up to Firebase.

47
00:03:03,900 --> 00:03:10,830
It is not currently available to our functions project for the purposes of locally using it.

48
00:03:11,270 --> 00:03:13,700
So in order to do that, we're going to have to do something special.

49
00:03:17,080 --> 00:03:22,000
What we're going to do is we're going to open up our command line again, our terminal, but we're going

50
00:03:22,000 --> 00:03:28,120
to go into the functions folder and now what we're going to do is we're going to do the same firebase

51
00:03:28,120 --> 00:03:34,630
functions, get command, but we're going to use the greater than sign and we're going to say DOT runtime

52
00:03:34,630 --> 00:03:35,230
config.

53
00:03:36,540 --> 00:03:38,430
Dort, Jason.

54
00:03:39,420 --> 00:03:43,500
And so this is going to be the file, so we're going to take our configuration, we're going to put

55
00:03:43,500 --> 00:03:49,770
it in runtime config that Jason and once we do that, we'll have created a file runtime config that

56
00:03:49,770 --> 00:03:50,310
Jason.

57
00:03:51,570 --> 00:03:58,680
You'll see it over here, it'll be available and we're going to add that to our get ignore a very important

58
00:03:58,680 --> 00:04:06,360
step, we need to add DOT runtime config JSON to our git ignore.

59
00:04:06,660 --> 00:04:10,650
And so now it won't be pushed up when we push up our changes.

60
00:04:10,830 --> 00:04:14,540
But this contains the configuration that we can see with firebase functions get.

61
00:04:15,210 --> 00:04:22,860
Now, if we go back into our terminal and we go to the terminal two and we quickly restart because you

62
00:04:22,860 --> 00:04:23,730
have to restart now.

63
00:04:23,730 --> 00:04:29,280
It has to load in the runtime config that JSON when we do this, what is going to do now is it's going

64
00:04:29,280 --> 00:04:34,880
to read this file and it's going to populate the functions config with that runtime config.

65
00:04:35,430 --> 00:04:41,010
And if we go over to meals to go five thousand one, what we can see now is, wow, we're getting the

66
00:04:41,040 --> 00:04:45,120
data back directly from Google Maps.

67
00:04:45,420 --> 00:04:51,150
And so now I know this because while Chicago was something we had available, but let's fill in something

68
00:04:51,150 --> 00:04:52,290
we didn't have available.

69
00:04:52,620 --> 00:04:53,970
Let's fill in Montreal.

70
00:04:54,600 --> 00:04:59,520
And when we do Montreal now we're getting Montreal's information, geocode it to us.

71
00:04:59,790 --> 00:05:07,200
And the way that I can prove that we're actually using the actual API is if we go to our API overview

72
00:05:07,200 --> 00:05:10,080
here, we can see that in the last hour.

73
00:05:11,450 --> 00:05:17,060
In the last six hours, rather, we just hit some usage.

74
00:05:17,090 --> 00:05:23,060
Now, it may take some time to update actually it may not have immediately updated it right here, but

75
00:05:23,240 --> 00:05:25,750
in a couple of minutes, you will be able to see our usage here.

76
00:05:26,210 --> 00:05:31,970
The most interesting part is that we're actually utilizing and getting back information from the Geocode

77
00:05:31,970 --> 00:05:32,450
API.

78
00:05:33,200 --> 00:05:39,310
So let's go take a look at our app, because that should be able to do that now, right?

79
00:05:39,770 --> 00:05:45,530
If we fill in Chicago right here, should we get back our information?

80
00:05:45,710 --> 00:05:46,720
Well, let's try it out.

81
00:05:46,730 --> 00:05:47,510
Chicago.

82
00:05:48,730 --> 00:05:52,510
And if we do, Chicago will that currently is not working.

83
00:05:53,320 --> 00:05:54,310
So let's go take a look.

84
00:05:54,320 --> 00:06:02,080
If we go take a look at location service and we take this host, Jason, that we get back.

85
00:06:03,110 --> 00:06:05,810
And we say console dialogue result.

86
00:06:08,140 --> 00:06:15,160
What we'll see is that we are getting back the location information directly from Chicago, and the

87
00:06:15,160 --> 00:06:17,800
same is true for Portugal.

88
00:06:18,580 --> 00:06:24,040
If we did Portugal, where we're going to see is that we're getting back the location information for

89
00:06:24,040 --> 00:06:24,700
Portugal.

90
00:06:25,240 --> 00:06:26,470
But why aren't we getting back?

91
00:06:26,470 --> 00:06:28,940
Are restaurants on the cities that we already set up, Mo?

92
00:06:29,350 --> 00:06:31,510
Well, the location information may differ.

93
00:06:31,750 --> 00:06:37,460
And so the information isn't matching up to the longitude latitude that is being sent back by Google.

94
00:06:37,900 --> 00:06:43,540
And so what we need to do now is we need to integrate the actual police's search because the mock data

95
00:06:43,540 --> 00:06:47,410
only worked against the mock locations, not the live locations that we're getting back from Google

96
00:06:47,410 --> 00:06:47,800
results.

97
00:06:47,800 --> 00:06:51,730
And that's what I meant when I said the mock information is just the mock information.

98
00:06:51,910 --> 00:06:55,630
It does not work between live API and non live API.

99
00:06:56,170 --> 00:07:03,310
Just to prove that we're running live on the live API, we can do New York and by filling in New York,

100
00:07:03,310 --> 00:07:07,750
we now know the location, longitude, latitude of New York.

101
00:07:07,990 --> 00:07:12,430
It's right over here, the northeast southwest boundary and the longitude latitude.

102
00:07:12,610 --> 00:07:12,950
OK.

103
00:07:13,950 --> 00:07:19,590
So we've proven that our geocode implementation works just worked out of the box, it's just working

104
00:07:20,070 --> 00:07:27,060
because we're not currently running our location service right here against Moch.

105
00:07:27,450 --> 00:07:35,640
Now, the way that I can prove that is if we said over here and Mark is equal to true.

106
00:07:36,600 --> 00:07:42,090
Well, now, if we reload our app, what we're going to see is that when we fill in San Francisco,

107
00:07:42,090 --> 00:07:42,630
it works.

108
00:07:42,900 --> 00:07:45,630
When we fill in Chicago, it's going to work.

109
00:07:45,930 --> 00:07:48,150
When we fill in Toronto, it's going to work.

110
00:07:48,570 --> 00:07:52,230
When we fill in New York, it's going to break.

111
00:07:52,680 --> 00:07:59,580
And that is because it is not receiving any information currently because it's running in mock mode.

112
00:08:00,590 --> 00:08:08,330
All right, so we've proven that our app works live awesome, so the next part is how do we implement

113
00:08:08,330 --> 00:08:09,330
the polices API?

114
00:08:09,620 --> 00:08:10,550
Well, let's take a look at that.

