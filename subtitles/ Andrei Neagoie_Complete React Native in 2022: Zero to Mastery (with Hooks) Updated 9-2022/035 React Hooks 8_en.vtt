WEBVTT
1
00:00:00.270 --> 00:00:06.510
All right, all right, so I know this part is a little tricky when you first start off with hooks,

2
00:00:06.510 --> 00:00:08.760
it can be a little overwhelming.

3
00:00:09.090 --> 00:00:14.970
It's why the react documentation doesn't really teach hooks until later on, because it makes a lot

4
00:00:14.970 --> 00:00:20.430
more sense once you understand this idea of class components, this idea of life-cycle hooks.

5
00:00:21.270 --> 00:00:23.520
But if we just remove.

6
00:00:26.050 --> 00:00:33.820
Are alt code that has been commented out, you see that our code reads pretty nicely, it's just a function,

7
00:00:33.820 --> 00:00:41.530
except this function now has some state that we usually declare at the top and a loose effect, a side

8
00:00:41.530 --> 00:00:47.770
effect that we do every time we run the app and we tell it when we want to run this use effect.

9
00:00:48.490 --> 00:00:51.060
In the second argument, that is an array.

10
00:00:51.910 --> 00:00:56.800
The other parts are pretty self-explanatory, just like we've built components before.

11
00:00:57.550 --> 00:01:03.760
Now to really solidify our knowledge here, I want to do one other thing just to make sure that we really

12
00:01:03.760 --> 00:01:05.260
get these hooks concept.

13
00:01:06.360 --> 00:01:08.540
Let's say I wanted to create a button.

14
00:01:09.940 --> 00:01:18.490
And let's just say that this bun lives right here, right below our title, and this bun is going to

15
00:01:18.490 --> 00:01:19.690
say, just click.

16
00:01:20.850 --> 00:01:21.300
Me.

17
00:01:23.430 --> 00:01:29.370
And it's going to have an on click function and this unclick function, we haven't been yet, but I'm

18
00:01:29.370 --> 00:01:35.960
going to just say that it's going to have a set count that we haven't created yet.

19
00:01:36.450 --> 00:01:41.280
So this is going to be a function that changes a new piece of state.

20
00:01:41.280 --> 00:01:44.670
And this time around we'll just have a new count state.

21
00:01:44.680 --> 00:01:46.290
So I'm going to create.

22
00:01:47.420 --> 00:01:54.170
A piece of state alcohol account and set count, so you kind of see the repetition here, we're just

23
00:01:54.170 --> 00:01:59.600
creating a state at the top with what the state name is and what the function is that changes that state.

24
00:01:59.960 --> 00:02:05.640
And I'll say use state and I'll just give it a count of zero.

25
00:02:05.750 --> 00:02:07.670
So this is going to be zero.

26
00:02:09.259 --> 00:02:16.100
And this set count is going to be right over here, and when a user clicks, it's going to run.

27
00:02:17.860 --> 00:02:28.090
SEC count and we'll just say count plus one, so we're just incrementing a counter, so unclick SEC

28
00:02:28.090 --> 00:02:30.850
count and it's going to add one to the count.

29
00:02:31.410 --> 00:02:38.290
If I save this and go back, you see that I have Callick Me here and let's just console log this so

30
00:02:38.290 --> 00:02:38.830
we can see it.

31
00:02:41.070 --> 00:02:47.520
Let's do it right after the fetch, just so we understand exactly what's happening here, if I do console

32
00:02:47.730 --> 00:02:48.120
log.

33
00:02:49.810 --> 00:02:56.050
Count, OK, if I save this, we should understand what the error is or the warning that we get on the

34
00:02:56.050 --> 00:03:01.960
right side, hey, how come inside of you the fact you have count, but you're not adding anything in

35
00:03:01.960 --> 00:03:02.200
here?

36
00:03:02.680 --> 00:03:08.320
Let's just save this and see what happens if I go over here, see that I have zero.

37
00:03:08.350 --> 00:03:11.170
If I click me, nothing happens.

38
00:03:11.680 --> 00:03:13.180
And why is that?

39
00:03:14.050 --> 00:03:15.750
You should be able to answer that, right?

40
00:03:16.120 --> 00:03:20.260
Because we've added no dependency to this use effect.

41
00:03:20.320 --> 00:03:23.110
Nothing in the array, which means, hey, just run at once.

42
00:03:23.110 --> 00:03:25.330
One applets if I refresh the page.

43
00:03:26.500 --> 00:03:30.160
Again, just run at once, but after that, don't run it.

44
00:03:31.120 --> 00:03:32.350
So how can I solve that?

45
00:03:32.500 --> 00:03:37.030
Well, we just add count in here, and that's what the warning is telling us.

46
00:03:37.030 --> 00:03:40.270
Hey, don't you want to add count if I add count?

47
00:03:41.520 --> 00:03:43.560
Now, every time I click.

48
00:03:45.340 --> 00:03:46.420
It's going to run.

49
00:03:48.690 --> 00:03:53.250
The use effect, but this also means that we're constantly fetching.

50
00:03:55.590 --> 00:04:00.750
Our users, if I go to the network tab and I click me, you see that we get users, we make that fetch

51
00:04:00.750 --> 00:04:01.980
API call every time.

52
00:04:03.990 --> 00:04:10.770
So this line simply means only run if count changes.

53
00:04:13.270 --> 00:04:19.660
Right, and that should make sense, I just wanted to show that example, just so you understand exactly

54
00:04:19.930 --> 00:04:26.590
what is happening here, because at first it use effect can be tricky, but hopefully this clears things

55
00:04:26.590 --> 00:04:27.490
up for you.

56
00:04:28.150 --> 00:04:33.130
Now, I'll link to the repo of this finish code so you can play around with it and try new things.

57
00:04:33.610 --> 00:04:38.440
But hopefully hooks aren't as intimidating as you initially thought.

58
00:04:38.830 --> 00:04:45.340
At the end of the day, we're just converting our class components into stateful functional components.

59
00:04:46.080 --> 00:04:46.990
I'll see in the next one.

60
00:04:47.350 --> 00:04:47.830
Bye bye.

