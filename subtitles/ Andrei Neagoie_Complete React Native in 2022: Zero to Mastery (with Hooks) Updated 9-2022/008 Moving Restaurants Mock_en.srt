1
00:00:01,140 --> 00:00:07,350
We have our geocode function mocked and working in a local firebase function.

2
00:00:08,220 --> 00:00:15,210
Next up, we have a second API that we have to emulate or mimic right now, and that is the police's

3
00:00:15,210 --> 00:00:16,890
nearby search request.

4
00:00:17,220 --> 00:00:24,420
Currently, we have a bunch of mock information from this API in a certain shape that mimics it, that

5
00:00:24,420 --> 00:00:27,030
we that we are returning to our application.

6
00:00:27,480 --> 00:00:29,640
But now we want to integrate this.

7
00:00:29,640 --> 00:00:37,860
But before we integrate it, we want to also move our mock into our firebase function so that we can

8
00:00:37,980 --> 00:00:44,640
prove that our app continues to work and move the request into the firebase function that acts like

9
00:00:44,640 --> 00:00:45,690
a server locally.

10
00:00:46,410 --> 00:00:48,060
Now, how are we going to do that?

11
00:00:48,090 --> 00:00:53,640
Well, first off, we need to go over here into our functions folder and we need to go to our index.

12
00:00:53,880 --> 00:00:56,110
And over here you see exports start geocode.

13
00:00:56,130 --> 00:01:00,000
Now, this is what is releasing a geocode function over here.

14
00:01:00,250 --> 00:01:05,340
If we look at our functions, we have a geocode that will be executed.

15
00:01:05,850 --> 00:01:10,880
OK, so we're going to create a second function and we're going to call it places nearby.

16
00:01:11,670 --> 00:01:17,500
Now, places nearby is what's going to give us the ability to basically do a places request.

17
00:01:17,520 --> 00:01:24,000
So we're going to create a places request and this is going to come from places.

18
00:01:24,570 --> 00:01:27,590
So we need to create a places folder.

19
00:01:28,530 --> 00:01:33,240
And once we create a places folder, we'll create an index file inside of that places folder and we'll

20
00:01:33,240 --> 00:01:37,320
module exports thought, places request.

21
00:01:37,980 --> 00:01:41,670
And that's going to take in request and response.

22
00:01:42,510 --> 00:01:48,060
And now we can do response dots and places request.

23
00:01:49,140 --> 00:01:55,830
Once we do this, what we can do is we can go over to our terminal and we can see here places nearby

24
00:01:55,830 --> 00:01:56,760
has been released.

25
00:01:57,270 --> 00:02:03,250
Now, if we go down here, we can see that functions, index, et cetera, et cetera.

26
00:02:03,690 --> 00:02:07,980
We were unable to load your code because they cannot find the module places.

27
00:02:08,340 --> 00:02:11,550
So places that index index here.

28
00:02:12,690 --> 00:02:14,160
Let's just quickly reload.

29
00:02:15,120 --> 00:02:21,470
And then let's reload over here and we can see that it has, in fact loaded now.

30
00:02:21,870 --> 00:02:27,330
So if we go to this URL, what we're going to see is here is our placeholder for our places request

31
00:02:27,990 --> 00:02:30,400
now that we have our placeholder for our places request.

32
00:02:30,420 --> 00:02:34,710
Well, the next thing we need to do is we need to go look at how we were doing our request originally.

33
00:02:35,070 --> 00:02:40,500
Originally, our restaurant request was a request that was just taking the box and the mock images from

34
00:02:40,500 --> 00:02:40,980
Moch.

35
00:02:41,580 --> 00:02:43,520
OK, so let's get rid of this.

36
00:02:43,860 --> 00:02:49,770
We know that we are going to need this, but let's get rid of this code and then let's remove the mock

37
00:02:49,770 --> 00:02:54,990
folder and let's move the mock folder all the way up to the Places folder.

38
00:02:55,930 --> 00:03:00,550
And we're going to need to do some massaging to the information that's in here, first of all, all

39
00:03:00,550 --> 00:03:07,750
of these imports need to become requires because the node cannot understand import, but it does understand

40
00:03:07,750 --> 00:03:08,340
require.

41
00:03:08,920 --> 00:03:12,460
So we're going to change it all to be required.

42
00:03:13,090 --> 00:03:18,040
So now that we're requiring Antwerp, Jason in Chicago, Jason, we're going to change the Jason files

43
00:03:18,040 --> 00:03:23,590
to be just regular old JavaScript files, because that's a bit easier to understand for note.

44
00:03:23,950 --> 00:03:30,430
And we'll do module exports, dot marks over here and we're going to just leave this as const Mok's

45
00:03:30,430 --> 00:03:32,170
for now because we're going to do something interesting.

46
00:03:32,890 --> 00:03:38,520
Now what we need to do is we need to change our JSON file to actually be a JavaScript file.

47
00:03:38,530 --> 00:03:41,600
So we're going to rename every single one of them to dogs.

48
00:03:42,010 --> 00:03:46,030
And once we do that, what we're going to do is we're going to say module exports.

49
00:03:46,270 --> 00:03:48,100
So we're going to do a default export.

50
00:03:49,220 --> 00:03:54,710
Over here, and we're going to save this file, and if we save it, you'll see that prettier in Iceland

51
00:03:54,710 --> 00:04:01,490
will take over and we'll rename this file and once we rename that file, we'll do the same at the top,

52
00:04:01,490 --> 00:04:06,120
will say Modula, our exports, and we'll do this for every file.

53
00:04:06,440 --> 00:04:09,400
And this is just so that Noad can better understand the file.

54
00:04:10,100 --> 00:04:14,360
The reason we use the initial use JSON is because it was the original format of the information.

55
00:04:14,360 --> 00:04:19,640
But you could just as well just export an object in a JavaScript file and it will work the exact same

56
00:04:19,640 --> 00:04:19,910
way.

57
00:04:20,720 --> 00:04:26,060
So over here will change this to Toronto docs and then will module that exports.

58
00:04:27,030 --> 00:04:33,390
And once we do that, we're basically good to go over here now that we have all of this information,

59
00:04:33,390 --> 00:04:40,170
what we need to do is in our places in next year, we now need to import our mocs.

60
00:04:41,870 --> 00:04:49,780
So we can't do an import, we need to do consed Mock's is equal to the require of thought.

61
00:04:50,210 --> 00:04:50,570
Mark.

62
00:04:51,530 --> 00:04:57,110
And then once we have our marks, what we can do is we can say, well, how are we going to get a specific

63
00:04:57,110 --> 00:04:57,500
mark?

64
00:04:58,390 --> 00:05:04,060
Our specific markets are Antwerp's, Chicago, et cetera, et cetera, and they're based on this longitude,

65
00:05:04,060 --> 00:05:04,960
latitude string.

66
00:05:05,530 --> 00:05:10,930
Well, if we go back to our geocode request over here, what we saw in the Geocode request is that we

67
00:05:10,930 --> 00:05:13,860
were able to get Querrey parameters off of the URL.

68
00:05:14,290 --> 00:05:15,820
So how about we do the same thing?

69
00:05:16,300 --> 00:05:17,860
We'll do a places.

70
00:05:18,430 --> 00:05:23,860
We'll do we'll do a parsing and we'll look for something called location on the URL.

71
00:05:24,430 --> 00:05:28,340
Now we also need to import the euro currency.

72
00:05:28,370 --> 00:05:29,770
Consuelo's require euro.

73
00:05:30,680 --> 00:05:38,240
And once we do that, we can say location over here, so let's go take a look at what that looks like.

74
00:05:38,270 --> 00:05:43,850
So if we say now, questionmark, location equals location, something like that.

75
00:05:44,690 --> 00:05:51,860
Well, that currently our server is probably crashing on some error, so let's go look at the terminal

76
00:05:52,310 --> 00:05:59,030
and what we can see is that export consed mock images is currently breaking, which is why this should

77
00:05:59,030 --> 00:05:59,840
be consed.

78
00:06:00,440 --> 00:06:04,370
And once we do that, we can just restart our function here.

79
00:06:05,580 --> 00:06:12,240
And once we restart that, we can reload here and we can say location equals location.

80
00:06:12,980 --> 00:06:15,380
And then we can say some location.

81
00:06:16,470 --> 00:06:21,170
And we can see that we're rendering out the query parameter now, once we have that query parameter,

82
00:06:21,190 --> 00:06:27,420
what we can do over here is we can go inside of here and we can say, well, then return me marks of

83
00:06:27,450 --> 00:06:28,200
the location.

84
00:06:29,370 --> 00:06:34,470
And when we do that, if I do this for some location, obviously I'm not going to get anything, but

85
00:06:34,470 --> 00:06:41,760
if I go over here to the index and I copy this and I put this as the location, well, now I'm getting

86
00:06:41,760 --> 00:06:47,880
information back because this matches the information that is required as the key of the information.

87
00:06:48,990 --> 00:06:51,330
If I change this to Sam.

88
00:06:52,490 --> 00:06:59,750
And I just said save and I did over here, Sam, let's let's say location and then empty.

89
00:06:59,750 --> 00:07:02,420
And I said, well, now the key is sand.

90
00:07:02,430 --> 00:07:03,890
So it's going to load that key.

91
00:07:04,400 --> 00:07:08,260
So now the location is going to be a long itude latitude, comma, separated.

92
00:07:08,840 --> 00:07:09,290
Great.

93
00:07:09,830 --> 00:07:16,160
Now that we have that working, there was one more thing that we needed to do over here in our service.

94
00:07:16,610 --> 00:07:20,960
When we did our transform, we were changing the photos of the restaurants in the results.

95
00:07:21,240 --> 00:07:26,930
So let's take that away, because that's a very specific change that we should be doing on the server

96
00:07:26,930 --> 00:07:28,280
for the market information.

97
00:07:29,120 --> 00:07:37,280
And what we'll do is we'll see module thought exports that add mock images is equal to taking in the

98
00:07:37,280 --> 00:07:37,940
restaurant.

99
00:07:38,360 --> 00:07:42,650
And then we'll say that it does restaurant photos.

100
00:07:42,650 --> 00:07:49,730
Instead of doing a map here, we're just going to return one singular array and we'll do this, will

101
00:07:49,730 --> 00:07:50,570
remove this.

102
00:07:52,840 --> 00:07:54,290
That should do it for us.

103
00:07:54,310 --> 00:07:54,970
I believe.

104
00:07:56,490 --> 00:07:59,700
Now, this one closes that one.

105
00:08:00,870 --> 00:08:07,170
Remove that and now we have a restaurant that photos is equal to a specific mock image, const random

106
00:08:07,530 --> 00:08:08,100
image.

107
00:08:08,640 --> 00:08:15,030
Let's do this bit more readable and we'll say that restaurant photos is equal to some random image.

108
00:08:16,120 --> 00:08:17,500
And then we'll return.

109
00:08:20,100 --> 00:08:26,070
The restaurant itself, now, what we can do is we can go inside of our function.

110
00:08:27,190 --> 00:08:35,710
And we can say that CONSED data is equal to the Marks location and we can say data that results is equal

111
00:08:35,710 --> 00:08:36,100
to.

112
00:08:36,980 --> 00:08:40,039
Data, dot results, dot map.

113
00:08:41,020 --> 00:08:43,600
And then we'll say add mock image.

114
00:08:45,120 --> 00:08:47,370
Now, is that what I specifically called it?

115
00:08:47,610 --> 00:08:49,440
I will say add image.

116
00:08:52,510 --> 00:08:59,740
So then what we'll do is we'll import ADNOC image, and once we do that, we'll do respon start JSON

117
00:09:00,310 --> 00:09:01,060
of data.

118
00:09:01,090 --> 00:09:07,210
So now we overwrote data results and we made sure that we add the mock image in case we need it.

119
00:09:07,920 --> 00:09:11,800
OK, so now if I reload this, what's going to happen?

120
00:09:12,310 --> 00:09:12,760
Well.

121
00:09:14,200 --> 00:09:21,790
Let's go ahead and restart our emulators, and once we do that, what I can do is reload here and it

122
00:09:21,790 --> 00:09:24,100
says cannot read properly results of undefined.

123
00:09:24,520 --> 00:09:29,320
So we should only do this if data is available.

124
00:09:29,830 --> 00:09:32,800
So if we have data, then we'll do this.

125
00:09:33,810 --> 00:09:38,520
And then if we refresh, that should work, so let's go grab a long itude lattitude.

126
00:09:39,430 --> 00:09:41,080
And we'll grab Antwerp.

127
00:09:42,190 --> 00:09:50,590
And we'll put that in and what we can see here is that Footies is now being put in as the image, OK?

128
00:09:51,460 --> 00:09:55,300
So with all of that, do you think her appeal just work out of the box?

129
00:09:55,340 --> 00:09:56,980
Have we migrated it properly?

130
00:09:57,820 --> 00:09:59,980
Well, let's go reload over here and let's see.

131
00:10:01,030 --> 00:10:04,090
So finish geocode and then, oh.

132
00:10:05,120 --> 00:10:12,710
Oh, we still need to implement the service call here, we don't have a request happening, so let's

133
00:10:12,710 --> 00:10:16,880
go over here and let's take the same thing that we did over here.

134
00:10:16,880 --> 00:10:18,710
And let me show you how simple this is.

135
00:10:19,050 --> 00:10:24,710
We'll do a fetch, but instead of the Geocode, we'll do it to places nearby and we'll say that the

136
00:10:24,710 --> 00:10:28,460
city location is equal to location.

137
00:10:28,820 --> 00:10:36,440
And by doing this now, what we're able to see is that our app works with Moqtada that is now coming

138
00:10:36,440 --> 00:10:37,510
from the server.

139
00:10:37,670 --> 00:10:40,430
So we've moved all of our mock information.

140
00:10:40,580 --> 00:10:43,220
All of that is now a server call.

141
00:10:43,760 --> 00:10:47,660
It is coming specifically from the API.

142
00:10:48,260 --> 00:10:53,570
Now, another thing that we should probably do if we're going to do this is over here in our location

143
00:10:53,570 --> 00:10:54,140
service.

144
00:10:54,650 --> 00:10:56,990
What we did is we have a council log here.

145
00:10:57,470 --> 00:11:04,640
And in our context, I believe that in one of these requests, either the restaurants or something else,

146
00:11:04,640 --> 00:11:10,040
we put a set time out around the request, which we shouldn't do anymore because we did this because

147
00:11:10,040 --> 00:11:12,620
we were trying to emulate it, loading from a server.

148
00:11:13,130 --> 00:11:16,420
Now that it is loading from a server, we shouldn't do that anymore.

149
00:11:16,640 --> 00:11:20,660
And what we can see here is that we'll have instant returns.

150
00:11:20,960 --> 00:11:21,920
It's still loading.

151
00:11:22,460 --> 00:11:27,590
It's a bit slower than just getting it locally because it's getting it from the firebase function that's

152
00:11:27,590 --> 00:11:31,270
running locally, but it's still pretty fast.

153
00:11:31,280 --> 00:11:34,250
So if we go to Antwerp here now, we'll see it loads.

154
00:11:34,460 --> 00:11:37,880
It loads for half a second and then we get our mock information back.

155
00:11:38,000 --> 00:11:45,980
And just like that, all of our services have been migrated to a firebase function that can now be deployed.

