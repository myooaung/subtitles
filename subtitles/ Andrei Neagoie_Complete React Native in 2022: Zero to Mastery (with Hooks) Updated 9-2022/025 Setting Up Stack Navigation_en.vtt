WEBVTT
1
00:00:00.420 --> 00:00:05.580
Now that we have our app navigator in the right state, now comes the question, well, what do we do

2
00:00:05.580 --> 00:00:09.390
with the restaurant screen and how exactly is this going to work?

3
00:00:10.290 --> 00:00:16.260
Well, the one thing that we need to do is we're going to start creating navigators for each one of

4
00:00:16.260 --> 00:00:16.940
these tabs.

5
00:00:16.950 --> 00:00:24.870
So we'll have a restaurant stop navigator docs in this navigator is solely going to be responsible for

6
00:00:24.900 --> 00:00:31.410
all of the navigation that can occur with in the restaurants tab and so that Restaurants Navigator is

7
00:00:31.410 --> 00:00:33.690
going to import, react from react.

8
00:00:33.690 --> 00:00:37.410
As always, very important step unless you're just building style components.

9
00:00:38.070 --> 00:00:42.420
And then we'll import the Create Stack Navigator.

10
00:00:45.450 --> 00:00:46.770
Riak navigation.

11
00:00:49.220 --> 00:00:56.090
And so this is pulling in the stack navigation from the stack package, and this allows us basically

12
00:00:56.270 --> 00:01:01.880
to create a navigation that is instead of going to be Tabby's going to be stacked based.

13
00:01:01.880 --> 00:01:10.790
So pushing stacks and stacks and stacks where where the ability is basically screens to flow in a natural

14
00:01:10.790 --> 00:01:13.130
state, whether it be left to right, right to left modals.

15
00:01:13.460 --> 00:01:13.910
So.

16
00:01:15.140 --> 00:01:20.030
Think of it as screen's layered on top of each other, and so the first thing we need to do is we need

17
00:01:20.030 --> 00:01:22.190
to say CONSED Restaurant STAC.

18
00:01:23.510 --> 00:01:24.380
Is equal to.

19
00:01:25.330 --> 00:01:26.620
Create Stack Navigator.

20
00:01:27.700 --> 00:01:39.130
And then we'll say CONSED restaurant's navigator is equal to a component that is going to return the

21
00:01:39.610 --> 00:01:40.780
restaurant STAC.

22
00:01:42.130 --> 00:01:43.670
DOT navigator.

23
00:01:43.690 --> 00:01:49.090
And now the reason that we don't need a navigation container, just like we did around the App Navigator,

24
00:01:49.270 --> 00:01:54.070
is because this restaurant stack is going to live within the Tab Navigator.

25
00:01:54.070 --> 00:01:57.010
So it's not a separate, holistic navigator.

26
00:01:57.010 --> 00:02:03.910
It's a sub navigator with in this navigation paradigm so that that can become a bit confusing.

27
00:02:03.940 --> 00:02:04.690
Think of it this way.

28
00:02:05.200 --> 00:02:06.600
This is our main navigation.

29
00:02:07.150 --> 00:02:08.800
This is our main navigation container.

30
00:02:09.130 --> 00:02:17.620
And within the TAB navigation, we're creating a stack navigation that's going to sub stack inside of

31
00:02:17.980 --> 00:02:19.180
the restaurants tab.

32
00:02:19.330 --> 00:02:26.890
OK, so knowing that what we need to do now is we need to close off the navigator.

33
00:02:26.900 --> 00:02:29.260
You always want to close that off and then.

34
00:02:30.420 --> 00:02:37.350
What we can do is we can take this and instead of a navigator will have a dot screen and that thought

35
00:02:37.350 --> 00:02:42.030
screen is going to be what's going to consume the restaurant screen.

36
00:02:42.070 --> 00:02:47.640
So let's go and pull in restaurant screen inside of here and with restaurant screen.

37
00:02:47.640 --> 00:02:54.450
What we can do now is in the stock screen, we can say the name is equal to restaurants and then we'll

38
00:02:54.450 --> 00:02:57.980
say the component is equal to the restaurant screen.

39
00:02:59.520 --> 00:03:05.130
And by doing this now, we can take the restaurant navigator, we can go back inside.

40
00:03:05.140 --> 00:03:12.630
Our navigator will remove this and then we'll say import restaurant, navigator, restaurants, navigator

41
00:03:12.630 --> 00:03:15.030
from DOT's Restaurant Navigator.

42
00:03:15.630 --> 00:03:20.250
And instead of having the restaurant screen in here, we will have the restaurant navigator.

43
00:03:20.760 --> 00:03:27.540
OK, so now we've kind of gone end to end and you may be thinking, OK, well, what's going to happen

44
00:03:27.540 --> 00:03:27.760
now?

45
00:03:28.110 --> 00:03:36.900
Well, if we go back to over here and we quickly reload our app, what we're going to see is unable

46
00:03:36.900 --> 00:03:39.360
to resolve module reac navigation stack.

47
00:03:40.320 --> 00:03:45.890
From source infrastructure, so let's go to our package, Jason, and just quickly make sure Stack.

48
00:03:47.380 --> 00:03:53.290
And it seems that we still need to install the stack navigation.

49
00:03:53.530 --> 00:03:55.200
Oh, we forgot.

50
00:03:55.840 --> 00:04:02.710
So if we go back over here and we go to react navigation and we look for the stack.

51
00:04:03.930 --> 00:04:09.120
Right, we look at, for instance, the getting started.

52
00:04:10.170 --> 00:04:19.920
Right over here now, if we look at the hello world, we can see here that we still need to install

53
00:04:20.250 --> 00:04:21.779
Riak navigation stack.

54
00:04:21.970 --> 00:04:23.370
So it's a separate package.

55
00:04:23.380 --> 00:04:26.730
Remember when we installed the TAB Navigation?

56
00:04:27.570 --> 00:04:31.970
Well, when we installed the TAB Navigation, we installed all of the base packages for reac navigation.

57
00:04:31.980 --> 00:04:36.990
We installed the navigation native, which is the toolset, the utility bar, and we installed the bottom

58
00:04:36.990 --> 00:04:37.770
tabs package.

59
00:04:38.040 --> 00:04:44.460
But now because we want stack navigation, well, remember when we said that reac navigation was fully

60
00:04:44.460 --> 00:04:45.320
customizable?

61
00:04:45.480 --> 00:04:45.750
Right.

62
00:04:45.750 --> 00:04:48.150
It's an extensible platform, completely customizable.

63
00:04:48.180 --> 00:04:51.050
That's because they split out everything into separate packages.

64
00:04:51.360 --> 00:04:57.210
So what we need to do is we need to go inside our terminal and will open a new terminal and we'll say

65
00:04:57.210 --> 00:05:01.350
yarn, we'll say yarn, add react native navigation stack.

66
00:05:01.950 --> 00:05:09.060
And this will install the package that will allow the stack navigation module to actually create the

67
00:05:09.060 --> 00:05:10.620
stack that we require.

68
00:05:11.630 --> 00:05:21.830
OK, so so this part is kind of elusive because when we talk about STAC navigation, right back navigation

69
00:05:21.830 --> 00:05:28.820
is one of those concepts where we're trying to create multiple stacked screens instead of a navigator,

70
00:05:29.120 --> 00:05:36.560
kind of like this, right, where we have a home stack and we can then configure subsequent screens,

71
00:05:36.560 --> 00:05:38.540
but we're doing it inside of a tab navigator.

72
00:05:38.550 --> 00:05:40.580
So now that this is installed, we can reload.

73
00:05:41.150 --> 00:05:49.730
And once we reload, what we'll see happen here when we go into our node is it's rebundle and once it's

74
00:05:49.730 --> 00:05:51.140
finished bundling, we'll see.

75
00:05:52.360 --> 00:05:59.620
Right here that we still have one error, couldn't find component get component children from the screen

76
00:05:59.620 --> 00:06:00.580
restaurants.

77
00:06:03.800 --> 00:06:08.870
Let's let's look at this restaurant navigator is coming from.

78
00:06:09.780 --> 00:06:13.530
Restaurants Navigator in the Restaurant Navigator.

79
00:06:16.200 --> 00:06:19.020
We need to export that which we forgot.

80
00:06:19.870 --> 00:06:24.850
And by doing this now, we can see that our app will work as if it already did work.

81
00:06:25.460 --> 00:06:28.190
OK, so the app is working as intended.

82
00:06:29.170 --> 00:06:31.330
Now, what happens when I give this a different name?

83
00:06:31.330 --> 00:06:34.090
Let's say I called it Hello World.

84
00:06:34.690 --> 00:06:36.190
Right, the name.

85
00:06:37.440 --> 00:06:42.060
Well, if I give it the name Hello World, it's still the first stack that's going to render.

86
00:06:42.060 --> 00:06:48.540
So it's it's the very first screen that is rendering inside my Stack Navigator, and that is why it's

87
00:06:48.540 --> 00:06:49.530
getting precedent's.

88
00:06:49.860 --> 00:06:56.880
So if I if I, for instance, said Restaurant Stack Navigator and I said restaurants one.

89
00:06:56.880 --> 00:07:00.000
And I said, here, render out no.

90
00:07:01.140 --> 00:07:05.910
Well, that's that's obviously not going to render out anything and so now well.

91
00:07:06.730 --> 00:07:11.920
I kind of broke my app because it's showing restaurants one as a first.

92
00:07:12.800 --> 00:07:15.320
Item on the stack now.

93
00:07:16.430 --> 00:07:19.820
One more thing to note here is we're seeing this Heather Barr over here.

94
00:07:20.210 --> 00:07:25.040
So what we want to do is we want to see Heather mode is equal to none because we don't want to see any

95
00:07:25.040 --> 00:07:26.420
headers in here.

96
00:07:26.450 --> 00:07:30.710
And by doing that, the heather disappears and it looks nice.

97
00:07:33.650 --> 00:07:41.870
So knowing this now and knowing how this will work, let's start building out or looking at how our

98
00:07:41.870 --> 00:07:46.520
detailed screen will actually work because we now have our stack navigation.

99
00:07:46.520 --> 00:07:51.950
And what we can basically do is we can create multiple stacked screens here and we can transition between

100
00:07:51.950 --> 00:07:53.930
them based on a click action.

101
00:07:55.390 --> 00:07:56.440
So let's take a look at that.

