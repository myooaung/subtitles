1
00:00:00,840 --> 00:00:06,689
In our last video, we left off being able to take a picture and we know that the photo has particular

2
00:00:06,689 --> 00:00:10,660
properties that enable us to know where a photo is being stored.

3
00:00:10,680 --> 00:00:12,390
We have a photo uteri.

4
00:00:13,480 --> 00:00:18,790
Now the question becomes, well, how are we going to store this photo and where should we store this

5
00:00:18,790 --> 00:00:19,150
photo?

6
00:00:19,150 --> 00:00:23,650
And if we store the photo, will we actually be able to access it properly?

7
00:00:24,560 --> 00:00:30,380
Now, the way that I went about starting the photo is the same way that we saw the favorites, I stored

8
00:00:30,380 --> 00:00:34,100
them on the phone against a reference of the user.

9
00:00:34,520 --> 00:00:40,400
And by doing that, I now know every time that this user logs into this phone that they'll have the

10
00:00:40,400 --> 00:00:44,330
photo linked to their account by their unique identifier.

11
00:00:45,580 --> 00:00:50,950
And the way that I did that is, again, we need to use async storage, so let's go take a look at how

12
00:00:50,950 --> 00:00:54,820
we utilized async storage to begin with in the services favourite's.

13
00:00:54,940 --> 00:00:57,760
We are the favorites context in the favorites context.

14
00:00:57,760 --> 00:01:00,000
We imported something called async storage.

15
00:01:00,370 --> 00:01:06,670
So if we take that property and we import it inside of our camera component, we can now utilize that

16
00:01:06,850 --> 00:01:10,160
in order to store the photo information for the user.

17
00:01:10,960 --> 00:01:13,480
I hear you asking MOED, shouldn't this be a service?

18
00:01:14,020 --> 00:01:17,200
We followed the service pattern everywhere in this context pattern.

19
00:01:17,690 --> 00:01:19,870
Here's the separation that I see.

20
00:01:20,470 --> 00:01:23,220
Favourite's was used practically globally.

21
00:01:23,230 --> 00:01:25,120
It could be used anywhere in the application.

22
00:01:25,330 --> 00:01:27,490
Authentication is used globally.

23
00:01:27,490 --> 00:01:30,160
Locations use globally, restaurants is used globally.

24
00:01:30,460 --> 00:01:38,560
But the profile picture, the picture of the user is only used on the settings screen inside of the

25
00:01:38,560 --> 00:01:39,630
settings feature.

26
00:01:40,390 --> 00:01:46,780
Therefore, I view it as a local consideration of the settings feature in order to store and retrieve

27
00:01:46,780 --> 00:01:51,780
its async storage information for this profile camera feature.

28
00:01:52,240 --> 00:01:58,930
What we'll do then is when we take the photo, we now know that we can utilize async storage and so

29
00:01:58,930 --> 00:02:05,980
what we'll do is say async storage, that set item, and we'll set the item based on the user user ID

30
00:02:06,310 --> 00:02:07,210
dash photo.

31
00:02:07,210 --> 00:02:08,560
So the user ID photo.

32
00:02:08,830 --> 00:02:12,970
And we'll know now that photo Dorai is part of that user ID photo.

33
00:02:13,810 --> 00:02:16,420
OK, well, how do we get how do we get the user ID?

34
00:02:16,870 --> 00:02:21,580
Well, first we need to bring in the authentication context because without the authentication context,

35
00:02:21,580 --> 00:02:24,340
we can't get the user's information.

36
00:02:24,670 --> 00:02:31,120
And then what we do is at the top over here underneath camera will say const user is use context of

37
00:02:31,120 --> 00:02:35,540
authentication context, which we need to pull in from react in order to utilize.

38
00:02:35,950 --> 00:02:40,090
So now we have the user's information and we can reference user that user ID.

39
00:02:41,050 --> 00:02:46,090
And by doing this, we know that we'll have a user because you're only enabled to go to the settings

40
00:02:46,090 --> 00:02:50,200
screen when you're logged in, you won't be able to utilize the settings screen otherwise.

41
00:02:50,590 --> 00:02:58,150
So over here, we've basically implemented the saving of the photo and by saving the photo, now, what

42
00:02:58,150 --> 00:03:00,550
we've done is save that photo.

43
00:03:00,560 --> 00:03:03,550
You are right that that storage of that picture element.

44
00:03:04,750 --> 00:03:10,330
We need to retrieve it somewhere, and that's going to be inside of the setting screen, so we'll pull

45
00:03:10,330 --> 00:03:13,300
an async storage there as well at the top.

46
00:03:13,960 --> 00:03:22,120
And what we need to do in the setting screen is we need to pull in the actual implementation of async

47
00:03:22,120 --> 00:03:25,330
storage, get item down here somewhere.

48
00:03:26,080 --> 00:03:27,670
Now, how are we going to go about that?

49
00:03:27,700 --> 00:03:29,690
Well, it's a good question.

50
00:03:29,710 --> 00:03:32,590
We could we could use a bunch of different things.

51
00:03:33,610 --> 00:03:40,570
What I want to use is use effect and by using use effect, what we can do is any time the user comes

52
00:03:40,570 --> 00:03:43,960
in to this screen will do use effect.

53
00:03:44,850 --> 00:03:50,370
And we'll render out their profile image now, should we do this only on render?

54
00:03:50,760 --> 00:03:52,270
Yeah, that sounds right.

55
00:03:52,290 --> 00:03:57,330
We'll do it every time this screen renders because we should only ever load it once.

56
00:03:57,870 --> 00:04:02,640
Well, maybe we should do it if the user changes, because that would make more sense.

57
00:04:02,640 --> 00:04:07,200
Any time the user changes, we should technically get the new profile picture, right?

58
00:04:07,470 --> 00:04:09,220
Yeah, that's that seems like a better idea.

59
00:04:09,780 --> 00:04:15,030
So what we'll do is we'll write a function called.

60
00:04:17,630 --> 00:04:22,880
Get profile picture and what we'll see here is that it's an async function again, because it's going

61
00:04:22,880 --> 00:04:24,410
to work with async storage.

62
00:04:25,830 --> 00:04:30,270
And that async function is going to say consed photo.

63
00:04:31,490 --> 00:04:35,900
Is equal to a weight of async storage target item.

64
00:04:36,930 --> 00:04:43,470
And the get item is going to retrieve this identifier right here, let's make sure that we copy the

65
00:04:43,470 --> 00:04:47,610
correct portion and if we just put that inside of it, we get item call.

66
00:04:48,120 --> 00:04:51,660
Now we're insured that we get the photo uteri.

67
00:04:52,170 --> 00:04:53,970
So let's call that photo uteri.

68
00:04:54,540 --> 00:04:59,160
And once we have the photo, you or I, we can use state.

69
00:04:59,160 --> 00:05:00,450
So we'll store the photo.

70
00:05:00,460 --> 00:05:03,930
You are I, you state and we'll say const.

71
00:05:07,370 --> 00:05:10,730
Set photo is equal to you state.

72
00:05:14,570 --> 00:05:22,340
And then when we set the photo here to photo you or I will be ensured that once the photo is actually

73
00:05:22,340 --> 00:05:25,730
loaded, so we'll do get a profile picture here.

74
00:05:26,620 --> 00:05:31,820
Once the photo is loaded, we'll know whether or not we should render an Avatar icon or something else.

75
00:05:32,410 --> 00:05:37,390
So if we don't have a photo, render out the Avatar icon.

76
00:05:37,990 --> 00:05:38,340
Right.

77
00:05:39,100 --> 00:05:40,930
But if we do have a photo.

78
00:05:42,030 --> 00:05:43,950
Well, what do we need to render out in that case?

79
00:05:44,580 --> 00:05:51,240
Well, there's something else that Avatar exposes and that is Avatar, that image.

80
00:05:51,810 --> 00:06:00,510
And instead of an icon, what we'll give it is a you are I saw a source and we'll say just like an image

81
00:06:00,510 --> 00:06:02,220
and we'll say you are I is photo.

82
00:06:03,110 --> 00:06:09,440
The only difference here is that we'll do it when we do have a photo, and by doing this, we've now

83
00:06:09,440 --> 00:06:11,880
created the end to end feature for the photo.

84
00:06:12,140 --> 00:06:13,130
So let's test it out.

85
00:06:13,520 --> 00:06:19,470
If I go over here and I take a picture and then I go back, it's not loading.

86
00:06:20,000 --> 00:06:21,380
Why is it not loading?

87
00:06:21,800 --> 00:06:26,030
Well, first of all, over here we have a dependency.

88
00:06:26,780 --> 00:06:30,470
So we're putting in user, but we're not putting in get a profile picture.

89
00:06:31,010 --> 00:06:32,100
So that's our first error.

90
00:06:32,570 --> 00:06:38,150
And then over here, this is using the user.

91
00:06:38,150 --> 00:06:39,920
So we have to invert.

92
00:06:39,920 --> 00:06:45,110
This will give the user to get profile picture instead of just getting it like that.

93
00:06:45,740 --> 00:06:48,050
So we'll say current user.

94
00:06:49,520 --> 00:06:53,990
And we'll give it as a dependency and we'll see over here current user user ID.

95
00:06:55,300 --> 00:07:01,930
And then the other thing we should give it is the ability to render, because, as you can see now it

96
00:07:02,040 --> 00:07:02,620
rendered.

97
00:07:04,020 --> 00:07:06,180
And it actually took in the photo.

98
00:07:07,120 --> 00:07:13,840
Now, that is interesting, it took in the photo, but when we take a photo over here and we go back,

99
00:07:14,110 --> 00:07:18,100
let's let's take a photo of something else, because otherwise it's just going to look let's take a

100
00:07:18,100 --> 00:07:18,910
photo like this.

101
00:07:19,420 --> 00:07:22,050
What we can see over here is it's not changing.

102
00:07:23,080 --> 00:07:26,800
And that's because use effect only gets triggered if this re mounts.

103
00:07:27,190 --> 00:07:33,400
So there's something else that we could use is something called use focus effect, use focus.

104
00:07:33,400 --> 00:07:40,840
Effect is an effect from react native navigation rather than use effect where any time the.

105
00:07:42,200 --> 00:07:49,400
The screen gets back into focus through navigation or the user changes, we're going to enable get profile

106
00:07:49,400 --> 00:07:50,260
picture to trigger.

107
00:07:50,750 --> 00:07:56,930
So if we go over to settings and we then take a picture here and we go back and we take a picture again

108
00:07:57,260 --> 00:08:05,990
and we go back, we can see that our picture is being triggered every time we get back into focus of

109
00:08:05,990 --> 00:08:06,800
the setting screen.

110
00:08:07,070 --> 00:08:14,600
So this is a Riak native navigation feature that is kind of like use effect, but it only triggers it

111
00:08:14,600 --> 00:08:18,330
triggers every time the screen is back into focus.

112
00:08:18,350 --> 00:08:24,320
So any time we go back and forth between screens, we're going to trigger this as well as when the user

113
00:08:24,320 --> 00:08:24,880
changes.

114
00:08:25,310 --> 00:08:28,100
So we have both situations covered.

115
00:08:28,810 --> 00:08:29,270
OK.

116
00:08:30,230 --> 00:08:34,970
So we have our debt profile picture, which is the async function that takes in the parameter of user

117
00:08:35,179 --> 00:08:42,350
so that any time the user changes were ensured, that user is being given to the get item so that we

118
00:08:42,350 --> 00:08:43,070
get the item.

119
00:08:43,309 --> 00:08:49,790
We have use focus effect that ensures any time a navigation event happens that we're going to trigger

120
00:08:49,790 --> 00:08:55,330
the jet profile picture as well, because any time we take a picture, it's going to update.

121
00:08:55,670 --> 00:09:02,210
But one thing we don't have here is when SNAP happens, when SNAP is happening, we're not navigating

122
00:09:02,210 --> 00:09:02,480
back.

123
00:09:02,490 --> 00:09:05,750
So let's take in navigation here because this is a screen.

124
00:09:06,350 --> 00:09:09,950
And let's say once we set an item, let's do navigation, but go back.

125
00:09:10,670 --> 00:09:18,920
And by doing navigation that go back will enable the screen once we take a picture to go back and thus

126
00:09:19,640 --> 00:09:28,280
enable the full fledged feature of the camera taking experience.

127
00:09:28,430 --> 00:09:30,090
And that's exactly what we want.

128
00:09:30,320 --> 00:09:35,360
So any time the user takes a picture, they'll go back, they'll take the picture if we log them out

129
00:09:35,360 --> 00:09:41,420
here and we log into a different user model plus two.

130
00:09:42,720 --> 00:09:43,790
And we need audio.

131
00:09:45,100 --> 00:09:53,380
And let's say test one, two, three, and we log them in, what we can see over here is that in the

132
00:09:53,380 --> 00:09:54,760
settings they don't have a picture.

133
00:09:55,090 --> 00:09:59,620
But if we load a picture like this where we take a specific picture of that now, they're going to have

134
00:09:59,620 --> 00:10:00,280
this picture.

135
00:10:00,610 --> 00:10:09,910
If we go and we log in at NMO at Beedi, that we do test one, two, three and we log in.

136
00:10:10,810 --> 00:10:18,460
What we're going to see in the settings panel, the picture is loading and if we go back to MO plus

137
00:10:19,000 --> 00:10:21,130
to add beneath audio.

138
00:10:22,200 --> 00:10:24,960
And we do test one, two, three.

139
00:10:26,220 --> 00:10:32,480
We're going to load that specific picture for MO plus two, and that is exactly what we want.

140
00:10:32,850 --> 00:10:38,430
We want to load the specific picture for the specific user that's being logged in at that moment.

141
00:10:39,390 --> 00:10:40,030
Awesome.

142
00:10:40,590 --> 00:10:47,640
So we have the full end to end feature working now, and it only took this much coat, just a couple

143
00:10:47,640 --> 00:10:52,110
of lines, a good back and forth between the camera screen and the settings screen.

144
00:10:52,410 --> 00:11:00,180
And we now have the ability to store and retrieve the picture that the user takes any time they go back

145
00:11:00,180 --> 00:11:01,530
and forth between the screens.

