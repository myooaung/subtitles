WEBVTT
1
00:00:01.130 --> 00:00:06.080
Hopefully, having gone through that and trying it out, you would have come up with something that

2
00:00:06.080 --> 00:00:12.560
is relatively similar to what we see over here, which is if I do, what might be that I owe and do

3
00:00:12.560 --> 00:00:15.770
test one, two, three, and I try to log in.

4
00:00:16.490 --> 00:00:19.040
If I fill in the wrong password, it won't apply.

5
00:00:19.050 --> 00:00:21.460
But if I fill in the right password, then boom, we're in.

6
00:00:22.070 --> 00:00:25.770
And if I reload, then we're back to square one.

7
00:00:26.480 --> 00:00:28.610
OK, so how did I achieve this?

8
00:00:28.640 --> 00:00:38.390
Well, over here in our account screen, what I basically did was, well, we saw that I change the

9
00:00:38.870 --> 00:00:40.430
icon register to email.

10
00:00:40.440 --> 00:00:41.780
There was a small tip over there.

11
00:00:42.170 --> 00:00:45.320
And then if we went over to the login screen, what we can see in here.

12
00:00:46.600 --> 00:00:47.980
Is there's a couple of things going on.

13
00:00:48.640 --> 00:00:52.450
First off, we can see over here we have an office which is a new component.

14
00:00:52.610 --> 00:00:58.060
We also imported off button off container, off cover account cover, an account background, which

15
00:00:58.060 --> 00:01:01.690
we all had got a spacer and got the authentication context.

16
00:01:02.170 --> 00:01:07.880
Now, at the beginning when we needed to do is declare two properties, email and password, which are

17
00:01:07.880 --> 00:01:13.540
a used state of an empty string, which will pass into our text input as the basic input.

18
00:01:13.930 --> 00:01:19.990
And then we grabbed the on login from the authentication context, which is what we'll use to log in

19
00:01:19.990 --> 00:01:20.440
the user.

20
00:01:21.340 --> 00:01:26.920
And if we scroll down here a bit, what we're going to see is that for these off inputs, there are

21
00:01:26.920 --> 00:01:28.450
many different things we can use.

22
00:01:28.690 --> 00:01:32.500
So first off, I gave it a label email and I gave it a value email.

23
00:01:32.770 --> 00:01:39.960
And then I said the text content type is email address to ensure that we pull up the correct keyboard.

24
00:01:40.000 --> 00:01:45.460
This is how we determine, first of all, what kind of text is going to be in the field so that it expects

25
00:01:45.460 --> 00:01:45.630
it.

26
00:01:45.640 --> 00:01:49.070
And then here we determine what keyboard type we're going to bring up.

27
00:01:49.240 --> 00:01:54.700
So both of these fields together ensure that we get the correct output for the user in terms of the

28
00:01:54.700 --> 00:01:57.180
experience that they want to fill in an email address.

29
00:01:57.490 --> 00:02:00.670
We do not order, capitalise and on change text.

30
00:02:00.670 --> 00:02:04.420
We set the email to the value that is being entered.

31
00:02:05.380 --> 00:02:10.000
Then a bit lower over here, we have the password field and in the password field, we can see if we

32
00:02:10.000 --> 00:02:16.450
gave it label password, it's linking to the value of the password state and the text content is password

33
00:02:16.840 --> 00:02:21.160
so that we know that it has to be password, a password type entry.

34
00:02:21.430 --> 00:02:27.130
Now we're securing the text entry, which gives us this lovely little feel of the bubbles when we're

35
00:02:27.130 --> 00:02:29.660
filling in a password, which makes it feel secure.

36
00:02:30.340 --> 00:02:31.160
That's awesome.

37
00:02:31.680 --> 00:02:34.060
A couple of small fields and we're good to go.

38
00:02:34.060 --> 00:02:35.290
No auto capitalization.

39
00:02:35.290 --> 00:02:39.610
We turn that off, we turn nonsecure and then we set on change.

40
00:02:39.610 --> 00:02:41.050
Text set password.

41
00:02:42.340 --> 00:02:50.290
Now, with all of these fields, we're able to basically get the exact feel that we want for email and

42
00:02:50.290 --> 00:02:53.290
password and then on the off button.

43
00:02:54.320 --> 00:03:02.720
At the end, we put back the logging off button and on press, we trigger the on logging from off context,

44
00:03:02.720 --> 00:03:07.460
which is email and password, and know where it will be linking the code in the resources, as always,

45
00:03:07.460 --> 00:03:09.220
so that you can go view this code.

46
00:03:09.680 --> 00:03:11.660
And by hitting that will trigger login.

47
00:03:12.800 --> 00:03:19.220
Now, all of this code is basically what we need to integrate an end to end logging flow without with

48
00:03:19.250 --> 00:03:25.190
an optimistic feel optimistic, meaning we're not handling edge scenarios just yet, like error cases

49
00:03:25.430 --> 00:03:26.630
or anything like that.

50
00:03:27.080 --> 00:03:32.300
In order to handle an error case, we would need to pull in the error from our login.

51
00:03:32.930 --> 00:03:40.580
And once we have the error, we can basically create an error scenario below the button or in between

52
00:03:40.580 --> 00:03:43.430
the button whenever we want, wherever we want to place it.

53
00:03:43.430 --> 00:03:46.460
And we can put kind of a spacer around it.

54
00:03:46.910 --> 00:03:55.190
And what we can say is spacer, and then we can do a version of error handling where we import our text

55
00:03:55.190 --> 00:03:55.820
component.

56
00:03:56.940 --> 00:04:04.590
Right over here, we'll import text from text component and we'll get it from typography, and if we

57
00:04:04.590 --> 00:04:12.390
go over to our text component in typography, what will be able to see over here is that we have a text

58
00:04:12.390 --> 00:04:17.120
component that can take multiple different shapes and sizes.

59
00:04:17.130 --> 00:04:22.730
So we'll take on the variant error and that's the one that will load into the text container.

60
00:04:23.190 --> 00:04:30.960
So right over here in our spacer, what we're going to say is text variant is equal to error and then

61
00:04:30.960 --> 00:04:32.760
we'll put the error in between here.

62
00:04:33.330 --> 00:04:39.360
And once we do that, we'll be able to see any error that pops up from the log in flow, which is a

63
00:04:39.360 --> 00:04:42.000
little addition here that will quickly introduce.

64
00:04:42.570 --> 00:04:49.500
And if we reload, we will be able to see when we log in and we fill in a wrong email address is we'll

65
00:04:49.500 --> 00:04:55.310
see an error pop up or we'll see a issue pop up.

66
00:04:55.500 --> 00:04:56.930
Now, what's happening here?

67
00:04:57.360 --> 00:05:00.610
It's meant to render a collection of children, use an array instead.

68
00:05:00.900 --> 00:05:03.000
So what exactly is coming in on error?

69
00:05:03.270 --> 00:05:04.330
Well, let's check that out.

70
00:05:04.590 --> 00:05:09.940
Let's console that log error right here and let's see what exactly is going on.

71
00:05:10.380 --> 00:05:13.350
So if we see error, what we're going to see probably.

72
00:05:14.510 --> 00:05:17.970
That it is multiple messages inside of an array.

73
00:05:18.050 --> 00:05:26.300
So if we go to the terminal here and we scroll to the bottom, what we can see when we go to login is

74
00:05:26.300 --> 00:05:26.960
the following.

75
00:05:27.200 --> 00:05:28.910
We fill in the wrong email address.

76
00:05:28.910 --> 00:05:32.700
We fill in the password and we hit login and we're getting an error.

77
00:05:32.870 --> 00:05:34.440
And why is that error popping up?

78
00:05:34.640 --> 00:05:40.730
Well, if we scroll up, what we're going to be able to see here right at the top once we scroll past

79
00:05:40.730 --> 00:05:43.310
all of the errors all the way back up.

80
00:05:46.100 --> 00:05:48.630
The error is inside of an array.

81
00:05:48.980 --> 00:05:56.570
So what we want to do here is actually we want to call error zero, which will get the zeroth element

82
00:05:56.570 --> 00:05:57.350
on the array.

83
00:05:57.750 --> 00:06:01.630
And if we hit log in here, oh, well, that's that's not going to work.

84
00:06:02.670 --> 00:06:08.540
Well, what do we do in this case, we can't call zero on undefined, there's two options here.

85
00:06:08.550 --> 00:06:16.170
We can go inside our authentication context and we can say that by default, the error is an empty array

86
00:06:16.590 --> 00:06:20.670
since we expect an array or the next thing we can do.

87
00:06:21.330 --> 00:06:26.580
And on top of that, maybe we'll do it in combination with something, will add an empty array here.

88
00:06:26.820 --> 00:06:31.850
But the next that on the login screen will also only conditionally render the error.

89
00:06:31.860 --> 00:06:34.530
So we'll wrap this with error and.

90
00:06:34.530 --> 00:06:34.950
And.

91
00:06:35.880 --> 00:06:43.470
And we'll make sure that we only ever render these the error part right up here, rather when there

92
00:06:43.470 --> 00:06:47.040
is an error, and that way we can target error zero.

93
00:06:47.850 --> 00:06:53.310
And if we log in now and we fill in a malformed email address and malformed password, what we're going

94
00:06:53.310 --> 00:06:54.120
to see here.

95
00:06:55.290 --> 00:06:56.160
No error.

96
00:06:56.970 --> 00:07:04.080
Well, first of all, we need to make sure that error, the length that we check that and then when

97
00:07:04.080 --> 00:07:08.580
we hit this, we should see the error pop up, huh?

98
00:07:09.000 --> 00:07:09.850
Still nothing.

99
00:07:10.230 --> 00:07:11.460
What exactly is going on?

100
00:07:11.700 --> 00:07:12.630
Well, let's take a look.

101
00:07:12.810 --> 00:07:18.930
Let's take a look in our terminal, because it's things like this that can pop up at any given point

102
00:07:19.200 --> 00:07:23.720
when you work with this type of code.

103
00:07:24.300 --> 00:07:27.450
So if we go over here and we say cancel that log error.

104
00:07:28.350 --> 00:07:29.250
But we'll see.

105
00:07:30.660 --> 00:07:37.140
Is here, error is badly formatted, but error zero isn't actually going to give us anything, is going

106
00:07:37.140 --> 00:07:38.080
to give us undefined.

107
00:07:38.400 --> 00:07:39.210
Why is that?

108
00:07:39.210 --> 00:07:44.190
Why are we retrieving a piece of text but we can't render it?

109
00:07:45.090 --> 00:07:46.670
Well, it's not actually an array.

110
00:07:46.980 --> 00:07:53.100
It's putting brackets around it because over here we're returning it as if it's text.

111
00:07:53.100 --> 00:08:00.750
But if we did something like JSON that pass around the error, then we'll see over here in the login

112
00:08:00.750 --> 00:08:03.700
screen that it will interact as an array.

113
00:08:03.990 --> 00:08:08.310
So if we if we do error zero now and we went over here to.

114
00:08:09.460 --> 00:08:15.340
Kind of like this and we pressed lagom, what we're going to see is waps.

115
00:08:16.370 --> 00:08:19.340
Unexpected identifier error.

116
00:08:20.330 --> 00:08:21.110
Why is that?

117
00:08:21.140 --> 00:08:27.800
Well, it's not actually, Jason, so what we want to do here is we want to do two string and if we

118
00:08:27.800 --> 00:08:35.150
do to string what we can insure ourselves here is that if we render out error right down here.

119
00:08:36.169 --> 00:08:37.580
We don't target the zero.

120
00:08:41.169 --> 00:08:49.140
If we go over here and we fill in a malformed thing, oh, OK, OK, well, that works.

121
00:08:49.150 --> 00:08:56.440
The two string helped its things like this small, small, intricate details like having to do idot

122
00:08:56.530 --> 00:09:00.790
to string rather than think that it is an array.

123
00:09:00.940 --> 00:09:06.580
And then Jason, pass it and then send you for a loop on that loop hole of thinking that you need to

124
00:09:06.580 --> 00:09:08.710
work with the data one way or another way.

125
00:09:08.890 --> 00:09:15.070
And at the end of the day, this is all we needed to do and that could cause a bunch, a bunch, a bunch

126
00:09:15.070 --> 00:09:17.730
of different errors that you don't want to run into.

127
00:09:17.890 --> 00:09:19.840
You don't want to walk into those types of errors.

