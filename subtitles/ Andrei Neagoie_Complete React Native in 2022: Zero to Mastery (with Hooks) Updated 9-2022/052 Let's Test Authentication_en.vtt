WEBVTT
1
00:00:00.800 --> 00:00:08.990
Now, you may be wondering, mow, now that we have Firebase talking to our app and vice versa, how

2
00:00:08.990 --> 00:00:10.220
do we get this up and running?

3
00:00:10.730 --> 00:00:11.750
Well, that's a good question.

4
00:00:11.990 --> 00:00:16.309
We're going to do a small scale integration here in Appalachia's and then we're going to scale it out.

5
00:00:16.670 --> 00:00:19.810
So we're going to do use state and use effect from react.

6
00:00:20.180 --> 00:00:28.700
And what we're going to do then here is we're going to say CONSED is authenticated and set is authenticated.

7
00:00:30.110 --> 00:00:37.400
Is equal to you, state of false, and so we're going to basically said, if you're authenticated or

8
00:00:37.400 --> 00:00:44.690
not, then we're going to implement the use effect that's going to take in the function that we're going

9
00:00:44.690 --> 00:00:48.740
to utilize and we're going to run it on mount on mount of the components.

10
00:00:48.740 --> 00:00:49.630
So an empty array.

11
00:00:50.660 --> 00:00:58.460
OK, now that we know that what we're going to use is something called firebase off that Sinon with

12
00:00:58.460 --> 00:01:00.850
email and password, and this is returning a promise.

13
00:01:01.220 --> 00:01:06.740
So if we fill in email and password as a string, we know this isn't going to work, but we do dot then

14
00:01:07.550 --> 00:01:10.930
well in the dot then we should re retrieving the user object.

15
00:01:11.390 --> 00:01:16.810
And if we have an error, it will happen in the dot catch and that will return us an error.

16
00:01:16.820 --> 00:01:22.730
So let's console that log error and let's console that log user.

17
00:01:23.760 --> 00:01:32.280
And let's also set is authenticated to true, if you do hit the Truthy case, and so with this, basically

18
00:01:32.280 --> 00:01:33.420
our integration is good.

19
00:01:33.660 --> 00:01:35.220
But let's do one more thing.

20
00:01:35.650 --> 00:01:37.260
Let's go ahead and test it out.

21
00:01:37.500 --> 00:01:44.490
Let's open our console here and open our terminal and then let's go over to our app and let's open it

22
00:01:44.490 --> 00:01:44.760
up.

23
00:01:45.640 --> 00:01:51.100
And by opening it up, what we're going to see happen here is we're going to see the logs pop up once

24
00:01:51.100 --> 00:01:52.000
it has loaded.

25
00:01:53.220 --> 00:01:59.910
And so over here, you can see our email address is poorly formatted, OK, so this is not a valid email

26
00:01:59.910 --> 00:02:01.850
address, email at Beeny Audio.

27
00:02:02.970 --> 00:02:03.960
And if we do that.

28
00:02:04.770 --> 00:02:09.840
Well, Firebase Apennine with default already exists, so this is an error we're getting because of

29
00:02:10.080 --> 00:02:18.960
hot refresh, so hot reload, we can't hot reload inside of Riak native with the JavaScript SDK like

30
00:02:18.960 --> 00:02:19.260
this.

31
00:02:19.680 --> 00:02:23.160
So we need to do something additional because we don't want this area to come back.

32
00:02:23.160 --> 00:02:26.280
And you can see that it's just because we're hot, reloading.

33
00:02:26.470 --> 00:02:32.670
Any time I change a line of code, it's just as you can see, there's no user record, etc, etc. But

34
00:02:32.670 --> 00:02:35.760
if I update oh, it's going to break again.

35
00:02:35.970 --> 00:02:38.440
The Firebase Abney with default already exists.

36
00:02:38.700 --> 00:02:42.840
So this line is breaking because we're running it too many times.

37
00:02:43.140 --> 00:02:51.870
So what we want to do is we want to check, if not firebase dot apps dot length.

38
00:02:52.710 --> 00:02:58.200
OK, so we want to check if you have a firebase length, if you don't have a firebase link.

39
00:02:58.320 --> 00:03:03.510
So we don't have firebase apps running in here, run the initialize app, otherwise don't run the initialise

40
00:03:03.520 --> 00:03:05.880
up so that we make sure that we only ever run it runs.

41
00:03:06.150 --> 00:03:12.810
And now if we update our code, we can see that it is continuing to refresh and everything is working

42
00:03:12.810 --> 00:03:15.270
as intended and there's no more crashes.

43
00:03:15.720 --> 00:03:16.830
But now we're seeing the error.

44
00:03:17.100 --> 00:03:20.040
There is no user record corresponding with this identifier.

45
00:03:20.880 --> 00:03:21.330
Huh?

46
00:03:21.810 --> 00:03:24.690
All right, so let's go ahead and create a user.

47
00:03:24.990 --> 00:03:32.580
Let's go inside of Firebase directly and let's go inside of authentication and let's add a user and

48
00:03:32.580 --> 00:03:39.110
let's say that the user is NMO at Beeny D'Addario and let's give him the password test.

49
00:03:39.630 --> 00:03:41.400
Let's add the user or test.

50
00:03:41.410 --> 00:03:42.420
It must be six characters.

51
00:03:42.420 --> 00:03:43.530
Test one, two, three, then.

52
00:03:44.980 --> 00:03:52.380
And then once we do that, we'll see here that we have this user in our user base, so if we do MO Apennine

53
00:03:52.420 --> 00:03:55.860
audio and password, well, now we can see the password is invalid.

54
00:03:56.260 --> 00:03:59.020
So if you fill in test, one, two, three.

55
00:04:00.160 --> 00:04:06.160
Well, now we're getting back the user object, and as you can see here, the user object has a lot

56
00:04:06.160 --> 00:04:06.940
of information.

57
00:04:07.180 --> 00:04:13.960
We can see here that it's coming from the app meals to go, what the email is, if the email is verified

58
00:04:13.960 --> 00:04:19.350
or not, when they last logged in, we can see the display name and all that good stuff.

59
00:04:19.360 --> 00:04:24.520
We don't have very much information for our user, but we do have their email and we know that they're

60
00:04:24.520 --> 00:04:26.970
authenticated because they authenticated against Firebase.

61
00:04:27.430 --> 00:04:31.830
So if we remove this log, we now know that you are authenticated.

62
00:04:32.230 --> 00:04:35.530
So what we can do here is we can do a shorthand.

63
00:04:35.770 --> 00:04:44.920
We can say, hey, if you are not authenticated and let's do it below the usage of these hooks, if

64
00:04:44.920 --> 00:04:48.490
you are not authenticated, then we're going to return null.

65
00:04:49.480 --> 00:04:51.970
And then once you are authenticated, will return, true.

66
00:04:52.600 --> 00:04:57.070
And so what we can see here is if we if we wrap this with a set time out.

67
00:04:59.240 --> 00:05:06.470
And we set that to two seconds, but we're going to see here is that when we reload the app.

68
00:05:07.520 --> 00:05:11.630
We're going to have to wait for two seconds before the authentication kicks in.

69
00:05:12.840 --> 00:05:18.090
And then once you're authenticated, the app will render so we could put a loading indicator here or

70
00:05:18.090 --> 00:05:20.490
we could put whatever else while you're authenticating.

71
00:05:21.440 --> 00:05:26.870
Now, you can already feel like this isn't really scalable, this isn't really where you want to put

72
00:05:26.870 --> 00:05:30.140
your authentication code, nor do you want a hard code.

73
00:05:30.140 --> 00:05:34.130
The inputs and I can already hear you saying and shouting from the rooftops.

74
00:05:34.160 --> 00:05:35.660
So this has to be a service.

75
00:05:35.900 --> 00:05:36.800
And you're right.

76
00:05:37.220 --> 00:05:43.880
So let's look at how we're going to take this basic implementation where we're just trying to play around

77
00:05:43.880 --> 00:05:51.620
with the authentication and then push it outward towards a more robust implementation that actually

78
00:05:51.620 --> 00:05:53.660
has a login screen and all of that good stuff.

