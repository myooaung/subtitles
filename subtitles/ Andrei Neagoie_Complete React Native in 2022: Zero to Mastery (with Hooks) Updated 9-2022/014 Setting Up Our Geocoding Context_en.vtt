WEBVTT
1
00:00:00.770 --> 00:00:05.630
Now that we have our service set up, the next thing we need to do is we need to set up a context for

2
00:00:05.630 --> 00:00:10.220
it in order for it to be able to interact with the service.

3
00:00:10.250 --> 00:00:11.630
So we need to react.

4
00:00:12.500 --> 00:00:14.690
Basically, that's going to interact with our service.

5
00:00:14.690 --> 00:00:18.090
So we make a location that context thought.

6
00:00:18.370 --> 00:00:18.650
Yes.

7
00:00:19.160 --> 00:00:25.670
And in this location, that context as we import react and then we are going to import you state from

8
00:00:25.970 --> 00:00:26.690
react.

9
00:00:27.420 --> 00:00:30.170
We're also import use affect and other things later on.

10
00:00:30.530 --> 00:00:36.230
But the first thing we're going to do is we're going to import location request and location transform.

11
00:00:37.340 --> 00:00:41.210
From that location service, Fojas.

12
00:00:42.700 --> 00:00:47.320
And with that, what we're going to do is we're going to do the same thing that we did for the restaurant

13
00:00:47.320 --> 00:00:50.940
context, we're going to create two methods.

14
00:00:51.160 --> 00:00:54.010
And so I'm going to quickly copy these two lines because it make it easier.

15
00:00:54.370 --> 00:00:59.680
But instead of a restaurant context, we're going to create a location context.

16
00:01:00.430 --> 00:01:04.120
And so that location context as well is going to get children.

17
00:01:04.840 --> 00:01:10.660
And what it's going to return is it's going to return location, context, dot provider.

18
00:01:11.990 --> 00:01:16.070
And then inside of that provider, we're going to render the children and then we're going to close

19
00:01:16.070 --> 00:01:16.700
this off.

20
00:01:18.110 --> 00:01:25.220
And that's going to allow us to interact with the location service so as well, we need to pass a value

21
00:01:25.220 --> 00:01:25.880
to it, right.

22
00:01:26.390 --> 00:01:28.610
Just like we did with the restaurant context.

23
00:01:28.610 --> 00:01:30.020
We're going to have multiple states.

24
00:01:30.020 --> 00:01:30.920
We're going to have is loading.

25
00:01:30.920 --> 00:01:31.790
We're going to have error.

26
00:01:32.030 --> 00:01:33.260
We're going to have location.

27
00:01:33.620 --> 00:01:39.710
We're going to pass a search function, write a search function that's going to first foremost trigger

28
00:01:39.890 --> 00:01:44.870
the search for a location, because unlike restaurants where we're going to have a default location

29
00:01:44.870 --> 00:01:50.060
and it's going to be able to search every time he gets a new location in order for us to trigger a search,

30
00:01:50.470 --> 00:01:53.480
we're going to do that manually in the search box.

31
00:01:54.360 --> 00:02:00.940
OK, we're also going to expose the current search keyword and then I guess that's about it.

32
00:02:01.430 --> 00:02:04.330
So we need to create a state for each and every one of these.

33
00:02:04.340 --> 00:02:10.910
So we're going to say consed, we can copy a couple of these from over here, always copy paste what's

34
00:02:10.910 --> 00:02:11.390
available.

35
00:02:12.140 --> 00:02:17.690
So we're going to say location and then we're going to say set location and then we're going to have

36
00:02:17.690 --> 00:02:20.660
keyword and we're going to say set keyword.

37
00:02:21.780 --> 00:02:28.200
And we're going to default the key word to nothing, so by default, there is going to be no key word.

38
00:02:28.200 --> 00:02:30.390
By default, there is going to be no location.

39
00:02:30.390 --> 00:02:31.920
By default, there's going to be no error.

40
00:02:31.920 --> 00:02:35.220
And by default, we're not going to be loading, OK?

41
00:02:35.880 --> 00:02:38.050
So is this correct?

42
00:02:38.790 --> 00:02:40.050
I don't really think so.

43
00:02:40.290 --> 00:02:44.680
Our default key word should be what we're going to be searching for by default, right?

44
00:02:45.510 --> 00:02:51.180
Well, no, not really, because we're not really going to be triggering the search from here.

45
00:02:51.600 --> 00:02:58.230
That being said, we do want to make sure that any time we do search, it is defaulted to a current

46
00:02:58.230 --> 00:02:58.600
place.

47
00:02:59.190 --> 00:03:05.100
So what we basically want to do here is set the default keyword.

48
00:03:06.000 --> 00:03:09.360
What we can then do is we can set use effect.

49
00:03:10.610 --> 00:03:16.040
Here's the question, do we only ever manually want to trigger the search function or do we want to

50
00:03:16.040 --> 00:03:16.410
trigger it?

51
00:03:16.430 --> 00:03:16.920
OnLoad.

52
00:03:17.030 --> 00:03:17.940
This is a good question.

53
00:03:18.140 --> 00:03:20.710
Well, let's trigger an onload to start with.

54
00:03:21.200 --> 00:03:23.990
So onload is a use effect of an empty array.

55
00:03:24.890 --> 00:03:28.070
And then what we'll do is we'll have an on search function.

56
00:03:29.620 --> 00:03:34.390
And then we'll say consed on search equals.

57
00:03:35.350 --> 00:03:40.510
And will default, the unsearched to set is loading to true.

58
00:03:42.010 --> 00:03:49.150
And then will trigger a location request for our keyword.

59
00:03:50.700 --> 00:03:54.210
And then we'll do a thought then of location transform.

60
00:03:55.960 --> 00:03:59.500
And we'll do a ton of result.

61
00:04:00.720 --> 00:04:02.730
And will do set location.

62
00:04:04.080 --> 00:04:10.340
Of that result will do a set is lowering of false.

63
00:04:11.510 --> 00:04:17.930
And what we'll do is we'll do a catch where we'll catch an error and again, we'll do set is loading

64
00:04:17.930 --> 00:04:22.430
false and instead of set error, set of location will do set error error.

65
00:04:23.410 --> 00:04:32.680
And by doing this, we basically have the case that we're handling, so now we also need to make sure

66
00:04:33.130 --> 00:04:39.090
that when we trigger on such a keyword is coming in, search keyword will be coming in.

67
00:04:39.550 --> 00:04:44.560
And so we need to make sure that we set the keyword of that search keyword.

68
00:04:46.310 --> 00:04:53.390
Right, so any time we trigger the search function right here, it's going to bring us in a keyword.

69
00:04:53.400 --> 00:04:59.750
So our news effect, what we're going to do is we're going to trigger on search of our current keyword.

70
00:05:00.740 --> 00:05:08.990
Which is going to set the word to the current key word on render now one thing to note here is that

71
00:05:08.990 --> 00:05:15.230
the Esslin will also warn us when we're missing certain dependencies or when we're using a function

72
00:05:15.890 --> 00:05:20.190
that should be changing upon a certain dependency.

73
00:05:20.660 --> 00:05:22.400
And so that's extremely important.

74
00:05:22.430 --> 00:05:26.870
So one thing to note here is that the location requested happened against the search keyword, not the

75
00:05:26.870 --> 00:05:29.570
keyword, because that's referencing the outer scope keyword.

76
00:05:29.840 --> 00:05:36.590
And that in itself was causing the error over here, because when this references a piece of state,

77
00:05:37.040 --> 00:05:43.450
well, then excellence is going to warn us to basically wrap our function in a use callback.

78
00:05:44.180 --> 00:05:52.610
So one thing to note here is that this should actually be search keyword and this should the use effect

79
00:05:52.610 --> 00:05:52.940
is missing.

80
00:05:52.940 --> 00:05:56.680
The dependency keyword either include it or remove the dependency error.

81
00:05:57.290 --> 00:06:02.510
If we remove the dependency array, though, what's going to happen is it's going to trigger on every

82
00:06:02.510 --> 00:06:10.060
render and we don't want it to trigger on every single render that would cause an issue.

83
00:06:10.430 --> 00:06:15.080
So in this case, this error is not complete, but in the end, we're not going to be using use effect

84
00:06:15.080 --> 00:06:15.260
here.

85
00:06:15.260 --> 00:06:17.270
We're just doing it to showcase.

86
00:06:18.180 --> 00:06:19.670
Let's go to our app level.

87
00:06:20.420 --> 00:06:29.270
What we can do here, we could import location, context, provider from location, context.

88
00:06:30.460 --> 00:06:33.700
And we can and location.

89
00:06:34.770 --> 00:06:45.150
And so by doing this, we can wrap the tree before restaurant context provider with this and after this.

90
00:06:46.610 --> 00:06:53.600
And by doing that, we can now see what is going on in our location context, so let's go over to our

91
00:06:53.600 --> 00:06:57.080
terminal and let's go over to here.

92
00:06:58.430 --> 00:07:00.620
And let's just.

93
00:07:02.040 --> 00:07:05.220
Re trigger opening in iOS because it's currently hanging.

94
00:07:06.870 --> 00:07:16.230
Currently, my simulator seems to be hanging, so I'm going to do this and I'm going to close XPO,

95
00:07:16.320 --> 00:07:19.350
reopen Expo and then open miles to go.

96
00:07:20.670 --> 00:07:23.940
Unknown module for let's reload that.

97
00:07:25.210 --> 00:07:32.110
Seems to be having some difficulties loading, what we'll do here is quickly take a look.

98
00:07:33.220 --> 00:07:37.510
Sometimes it's good to remove your note modules, reinstall.

99
00:07:37.690 --> 00:07:43.420
Just make sure that everything's clean because when things go awry, it's usually due to some state

100
00:07:43.570 --> 00:07:44.650
that has broken.

101
00:07:45.740 --> 00:07:49.860
So let's just make sure that everything is in a good order and we'll be back.

102
00:07:50.540 --> 00:07:51.040
We're back.

103
00:07:51.050 --> 00:07:54.410
We can see that we actually made a small typo here in the locations, Mark.

104
00:07:54.650 --> 00:07:57.800
And so if we reload this now, we should be good to go.

105
00:07:58.190 --> 00:08:00.880
And this will allow us to render our application.

106
00:08:01.310 --> 00:08:08.260
One thing we also need inside of our context provider is the create context.

107
00:08:08.270 --> 00:08:13.150
So we'll do react dot create context.

108
00:08:13.580 --> 00:08:16.180
In this case, you can reference all of these variables through react.

109
00:08:17.240 --> 00:08:23.360
So now this allows us to kind of look at what exactly is going on inside of our.

110
00:08:24.480 --> 00:08:34.919
Search functionality here, so if we go ahead and we say console log result, we'll see exactly what's

111
00:08:34.919 --> 00:08:42.900
in the results and we can see a longitude latitude object that exactly translates to what we need in

112
00:08:42.900 --> 00:08:44.860
order to retrieve the information.

113
00:08:45.120 --> 00:08:53.590
And so if we set our search keyword here to Antwerp, that's going to allow us to get along at two latitude.

114
00:08:53.610 --> 00:08:55.010
That would be a bit different.

115
00:08:56.760 --> 00:08:58.740
If we empty the keyword here, I believe.

116
00:09:00.620 --> 00:09:06.590
One thing we would need to do here, just to make sure console dialogue, search keyword.

117
00:09:07.540 --> 00:09:12.640
And then we'll be able to see, so we're searching for Antwerp and there's one thing going wrong here,

118
00:09:12.640 --> 00:09:15.070
and that is all of our keys are to lowercase.

119
00:09:15.070 --> 00:09:22.660
So we need to make sure that any time we do a location request, we do to lower case of the search keyword.

120
00:09:23.290 --> 00:09:26.680
And that's going to allow us to get the longitude latitude of a different place.

121
00:09:27.040 --> 00:09:29.740
So right now, all of our requests are happening.

122
00:09:29.740 --> 00:09:36.520
And so, like, if I typed Antwerp or if I typed Antwerp or if I typed Antwerp, we always want it to

123
00:09:36.520 --> 00:09:42.520
be all in lowercase because in our location mock everything is in lowercase.

124
00:09:42.520 --> 00:09:44.470
So we want to be able to match that key.

