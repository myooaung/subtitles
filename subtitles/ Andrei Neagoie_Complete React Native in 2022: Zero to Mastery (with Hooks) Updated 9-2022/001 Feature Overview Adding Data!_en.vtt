WEBVTT
1
00:00:00.440 --> 00:00:06.110
We've reached an inflection point or at that point in the course where the majority of our app is now

2
00:00:06.110 --> 00:00:09.000
running, but we need to supply it with data.

3
00:00:09.290 --> 00:00:15.770
So far, we've been working with mock data, and although it has been great, it doesn't really allow

4
00:00:15.770 --> 00:00:20.040
us to create the full interactivity that a real app would give us.

5
00:00:20.420 --> 00:00:26.420
And so I have supplied data over here for four different cities Antwerp's, Chicago, San Francisco

6
00:00:26.420 --> 00:00:27.100
and Toronto.

7
00:00:27.410 --> 00:00:34.820
And this data closely mimics what Google would return us if we were to implement the Google Places API.

8
00:00:35.090 --> 00:00:36.560
The shape is very close.

9
00:00:36.860 --> 00:00:43.670
The data, however, has been massaged in order to resemble what data would look like if it came back

10
00:00:43.670 --> 00:00:44.210
from Google.

11
00:00:44.930 --> 00:00:48.190
But it isn't the actual data that Google sends us back.

12
00:00:48.590 --> 00:00:54.830
Now, this is because we want to eventually implement Google API later in the course.

13
00:00:55.100 --> 00:01:01.520
But for now, we need to implement some shape of information that's going to give us the closest representation

14
00:01:01.520 --> 00:01:05.090
of what Google would give us so that we can just at the end flip the switch.

15
00:01:05.269 --> 00:01:11.360
And by flip the switch, I mean, create a request and the rest of our code will just work end to end

16
00:01:11.360 --> 00:01:17.900
so we can turn our app into Mac mode and a non Mac mode in order to be able to develop without having

17
00:01:17.900 --> 00:01:19.280
data available.

18
00:01:19.520 --> 00:01:24.140
Or if you're off of the grid and you don't have Internet and you want to refine some UI.

19
00:01:24.470 --> 00:01:27.110
So that is what we're going to be looking at here.

20
00:01:27.680 --> 00:01:34.430
And that is very important in terms of the longevity of our app and the ability to kind of build out

21
00:01:34.430 --> 00:01:39.700
features and functionality without Internet or connectivity or just putting our app in a mock mode.

22
00:01:39.710 --> 00:01:41.690
In general, this is a very important step.

23
00:01:41.900 --> 00:01:47.480
Even if you're in the industry, if you're in the industry, the software industry, you come across

24
00:01:47.480 --> 00:01:53.120
these points and building an application where you may not have availability of an API or you may not

25
00:01:53.120 --> 00:01:54.560
have availability of a service.

26
00:01:54.560 --> 00:01:57.230
And so you need to kind of work around that.

27
00:01:57.320 --> 00:02:00.680
And so mocking the responses is a good way of going about it.

28
00:02:01.400 --> 00:02:06.230
And so oftentimes what you'll see is people will hook them up directly into the features that feels

29
00:02:06.230 --> 00:02:06.500
right.

30
00:02:06.500 --> 00:02:06.760
Right.

31
00:02:06.800 --> 00:02:07.910
Like in the restaurant screen.

32
00:02:07.910 --> 00:02:11.200
We just do, you know, the API call directly to Google or whatnot?

33
00:02:11.750 --> 00:02:16.510
Well, I like to push I call it pushing it to the edge of the application.

34
00:02:16.940 --> 00:02:23.900
And so what we're basically going to do here is we're going to make sure that any time we're trying

35
00:02:23.900 --> 00:02:27.770
to get information from somewhere, it's in the same place.

36
00:02:28.550 --> 00:02:32.240
So we're going to be isolating how we talk to servers.

37
00:02:32.690 --> 00:02:36.350
And the way that we do that is through a pattern called services.

38
00:02:36.770 --> 00:02:39.080
So we're going to create a folder called services.

39
00:02:39.620 --> 00:02:48.260
And this folder is going to be where all of our logic around talking to external services happen, whether

40
00:02:48.260 --> 00:02:54.800
it be Google, whether it be Facebook, whether it be anything else, Firebase or or whatnot, here

41
00:02:54.830 --> 00:02:58.760
is where we are going to be talking to servers.

42
00:02:59.420 --> 00:03:07.070
So in services, what we want to do is we want to create a new folder and the services naming them is

43
00:03:07.070 --> 00:03:11.160
also kind of specific to what you're trying to achieve.

44
00:03:11.210 --> 00:03:14.510
So one of the services that we have is the restaurant service.

45
00:03:15.050 --> 00:03:15.410
Right.

46
00:03:15.980 --> 00:03:19.910
And its main purpose is to get us restaurants.

47
00:03:21.140 --> 00:03:27.020
And so in that restaurant service, that's where we're going to put a new folder and we're going to

48
00:03:27.020 --> 00:03:27.840
call that mock.

49
00:03:28.340 --> 00:03:32.120
So this is going to be our mock restaurants.

50
00:03:33.460 --> 00:03:36.880
So what we also need in here is.

51
00:03:37.870 --> 00:03:39.640
Three things we need.

52
00:03:43.770 --> 00:03:45.460
Thought, service, thought.

53
00:03:45.480 --> 00:03:49.440
Yes, and we need restaurants.

54
00:03:50.500 --> 00:03:52.120
Thought, context, thought.

55
00:03:53.490 --> 00:03:58.740
Jazz, these are the two files, so we're going to have our mock's our context and our service, and

56
00:03:58.740 --> 00:04:01.370
these are going to serve us to get information.

57
00:04:01.380 --> 00:04:05.960
So first of all, let's take our moch information and put it in the mock folder.

58
00:04:06.720 --> 00:04:10.770
And so by doing that, we now have all of our mock information available to us.

59
00:04:11.400 --> 00:04:19.370
This mock information is coming from these files and the marks are structured by longitude and latitude.

60
00:04:19.680 --> 00:04:26.010
So based on position on the map is how we will retrieve the specific information for these.

61
00:04:26.010 --> 00:04:29.800
And we have mock images for the restaurants that we will randomly select.

62
00:04:30.450 --> 00:04:36.030
So with this mock information, we're ready to set up four different cities for us to request restaurants

63
00:04:36.030 --> 00:04:36.300
from.

64
00:04:37.140 --> 00:04:41.490
And all we need to do now is build out the service and the context.

65
00:04:41.520 --> 00:04:42.860
Now, what do I mean by context?

66
00:04:43.110 --> 00:04:46.110
Well, by context, I mean react context.

67
00:04:46.360 --> 00:04:50.280
So every service is going to be linked to a react context.

68
00:04:50.400 --> 00:04:55.470
And as I said before, context provides a way to pass data through the componentry without having to

69
00:04:55.470 --> 00:04:57.660
pass props down manually at every level.

70
00:04:57.930 --> 00:05:04.650
So we're going to use context to basically allow us to, first of all, fetch the information that we

71
00:05:04.650 --> 00:05:05.460
need to fetch.

72
00:05:05.640 --> 00:05:11.370
Right, getting the information we need to get, but then also giving the ability for any level of the

73
00:05:11.370 --> 00:05:14.040
application to consume that information.

74
00:05:14.430 --> 00:05:20.070
And in this case, the information we're going to retrieve are the restaurants from these specific cities.

75
00:05:21.060 --> 00:05:26.220
And then we're going to be able to pass it around through context, so you have to think of it this

76
00:05:26.220 --> 00:05:27.170
way, right?

77
00:05:27.500 --> 00:05:32.550
If we looked at it from a perspective of like the actual implementation, we would have the cloud over

78
00:05:32.550 --> 00:05:32.760
here.

79
00:05:32.760 --> 00:05:33.070
Right.

80
00:05:33.450 --> 00:05:34.290
This is a cloud.

81
00:05:34.770 --> 00:05:36.000
Let's say this was Google.

82
00:05:36.000 --> 00:05:36.390
Right.

83
00:05:37.140 --> 00:05:39.630
And our application is all the way over here.

84
00:05:40.700 --> 00:05:48.020
Well, now we're seeing for application to talk, we're going to create this services layer right service,

85
00:05:48.510 --> 00:05:55.610
this is an escort service and this is going to basically be what's going back and forth with the cloud

86
00:05:55.640 --> 00:05:56.290
with Google.

87
00:05:56.990 --> 00:06:02.840
Now, the service right now is using Mock's in order to go back to the application.

88
00:06:02.840 --> 00:06:03.140
Right.

89
00:06:03.380 --> 00:06:06.110
So the application talks to the service, the service talks to Google.

90
00:06:06.110 --> 00:06:11.270
In this case, it's actually going to the mosques and the service returns information to the application

91
00:06:11.360 --> 00:06:12.930
to visually represent everything.

92
00:06:13.790 --> 00:06:22.280
OK, now the way that the app gets the information from the service is the app is using react and react

93
00:06:22.280 --> 00:06:26.390
has something called context, right context.

94
00:06:26.810 --> 00:06:32.060
The service is feeding the information to the context that is actually feeding it to the application.

95
00:06:32.100 --> 00:06:34.370
So this isn't a direct relationship.

96
00:06:34.670 --> 00:06:39.650
The service gives the information to the context and the context gives the information to the app for

97
00:06:39.650 --> 00:06:40.580
the visualization.

98
00:06:40.940 --> 00:06:46.730
And we're using context because the app can reference through react context globally.

99
00:06:47.180 --> 00:06:49.940
So let's see how that implementation works end to end.

