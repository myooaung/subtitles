WEBVTT
1
00:00:00.450 --> 00:00:02.460
Oh, boy, this is getting exciting.

2
00:00:02.820 --> 00:00:06.390
We're about to do a full circle at Strib and it's going to be amazing.

3
00:00:06.689 --> 00:00:09.210
OK, OK, so first thing's first.

4
00:00:10.170 --> 00:00:15.060
We can input credit card information, we can get the credit card information, we can know whether

5
00:00:15.060 --> 00:00:16.350
it's complete or not.

6
00:00:17.220 --> 00:00:22.290
But what we can't do just yet is request the stripe talk.

7
00:00:23.130 --> 00:00:24.480
Now, how do we go about doing that?

8
00:00:25.260 --> 00:00:26.250
Well, that's a good question.

9
00:00:26.280 --> 00:00:29.130
Well, we we installed the strike client library.

10
00:00:29.130 --> 00:00:29.400
Right?

11
00:00:29.970 --> 00:00:35.430
What I want you to do is I want you to go over here into the striped dashboard and I want you to go

12
00:00:35.430 --> 00:00:42.060
into developer's API keys and I want you to copy the publishable API.

13
00:00:42.690 --> 00:00:48.390
This is a key that we can put in our code, and it is completely fine to put it there because it's publishable

14
00:00:49.170 --> 00:00:50.870
now with this key.

15
00:00:51.210 --> 00:00:56.940
What I want you to do over here into the code, which temporarily put it right here in this little comment.

16
00:00:57.630 --> 00:01:01.320
And what we're going to do is we're going to set up the Strib client.

17
00:01:01.320 --> 00:01:03.840
So we're going to import create stripe.

18
00:01:04.879 --> 00:01:06.710
From Strib client.

19
00:01:07.890 --> 00:01:14.430
Now, by doing this, we're going to have the striped client bootstrap now we're going to say consed

20
00:01:14.430 --> 00:01:17.700
stripe is equal to create stripe.

21
00:01:18.530 --> 00:01:22.590
And we're going to give it this key ready, the one that we just copy.

22
00:01:23.300 --> 00:01:28.720
So let's cut and let's paste it as a string between these brackets.

23
00:01:29.180 --> 00:01:35.480
And by doing that, now we have a fully bootstrapped stripe library that we can create tokens.

24
00:01:35.720 --> 00:01:37.640
Who said coding was hard, so easy.

25
00:01:37.640 --> 00:01:39.610
Just a couple of libraries, just a couple of keys.

26
00:01:39.620 --> 00:01:40.090
We're good.

27
00:01:40.100 --> 00:01:40.960
No, I'm joking.

28
00:01:40.970 --> 00:01:42.760
It becomes more difficult as you go along.

29
00:01:43.010 --> 00:01:47.380
But what we're trying to do here is make things as simple as possible.

30
00:01:47.390 --> 00:01:51.050
So now we have our stripe library and what do we do with it?

31
00:01:51.770 --> 00:01:53.140
Well, that's that's a good question.

32
00:01:53.450 --> 00:01:55.040
What do we do with it?

33
00:01:56.350 --> 00:02:05.200
Stripe has this function, this stripe library, and it's called stripe that create token and what it

34
00:02:05.200 --> 00:02:06.970
takes is a card.

35
00:02:07.690 --> 00:02:13.440
Now, this card is an object, right, const card, and that is then a prop..

36
00:02:13.450 --> 00:02:15.220
So this is the same as writing card card.

37
00:02:15.910 --> 00:02:17.440
We can just give it card like this.

38
00:02:18.130 --> 00:02:22.870
And so the card needs certain properties in order to go in here.

39
00:02:23.380 --> 00:02:25.300
So what properties might it take?

40
00:02:25.600 --> 00:02:26.770
Well, let's take a look at that.

41
00:02:28.140 --> 00:02:32.880
The first thing that a card will take is something called.

42
00:02:35.650 --> 00:02:42.580
The second thing a card will take is an expiry month, the third thing it will take is an expiry year.

43
00:02:43.900 --> 00:02:46.600
The fourth thing it will take is a CBC.

44
00:02:48.490 --> 00:02:52.000
And the fifth thing it will take is a name, the name of the person.

45
00:02:52.310 --> 00:02:58.720
OK, so the number we already know is a number, you know, that that comes in, right?

46
00:02:58.720 --> 00:03:05.800
The four to four to four two we were filling in the expiry month is along the lines of zero two for

47
00:03:05.800 --> 00:03:06.100
the year.

48
00:03:06.100 --> 00:03:06.880
Twenty four.

49
00:03:07.000 --> 00:03:09.520
And then the CVC is 244.

50
00:03:09.550 --> 00:03:11.250
And the name can be NMO.

51
00:03:12.260 --> 00:03:12.660
OK.

52
00:03:12.680 --> 00:03:17.030
And by doing this, we've now set up card info that we can utilize.

53
00:03:17.770 --> 00:03:18.270
All right.

54
00:03:18.680 --> 00:03:23.870
So if we pass this into here, is this going to return us information?

55
00:03:24.350 --> 00:03:25.460
Well, it can.

56
00:03:25.850 --> 00:03:30.950
First, let's make this function async so that we know that we're going to get information back and

57
00:03:30.950 --> 00:03:38.660
then we'll say const Tolkan or info is equal to a weight because this is a basic function.

58
00:03:38.900 --> 00:03:41.840
This is the same as writing a dot then, right?

59
00:03:42.260 --> 00:03:43.490
This is the exact same thing.

60
00:03:44.530 --> 00:03:51.310
And we use them interchangeably, async weight or using dot, then it's about consistency and sometimes

61
00:03:51.310 --> 00:03:54.490
it's just whatever feels right in the situation, whatever looks right.

62
00:03:54.850 --> 00:04:00.960
To be honest, I lean towards using DOT then, but sometimes I like to use a single word.

63
00:04:01.060 --> 00:04:03.060
It's whatever fits the situation best.

64
00:04:03.430 --> 00:04:05.470
So if we console that log info here.

65
00:04:06.340 --> 00:04:07.510
What will we get back?

66
00:04:07.720 --> 00:04:11.420
Right, because this is where the magic happens.

67
00:04:12.040 --> 00:04:18.430
So if we fill this in and we go ahead and, you know, reload here and we go ahead to our checkout,

68
00:04:18.910 --> 00:04:23.920
start filling in our information for two, four to for two, and you may be asking, well, how do you

69
00:04:23.920 --> 00:04:27.610
know that four two four two four two is the right thing to do?

70
00:04:28.150 --> 00:04:29.530
Well, that's that's a good question.

71
00:04:30.430 --> 00:04:34.470
The way that I know is that this is a predetermined credit card that stripe can give us.

72
00:04:35.080 --> 00:04:37.390
Now it's telling us that there's an incorrect number.

73
00:04:37.510 --> 00:04:43.180
So let's go ahead and look here for two four two four two four two four two four two, four, two,

74
00:04:43.180 --> 00:04:43.630
four, two.

75
00:04:45.070 --> 00:04:45.880
Oh, actually.

76
00:04:47.590 --> 00:04:52.820
As luck may have it, I am filling it in over here in a wrong way.

77
00:04:52.840 --> 00:04:54.310
I didn't fill in the full number.

78
00:04:55.130 --> 00:04:57.250
Of course, I'm filling in statically over here.

79
00:04:58.310 --> 00:05:03.910
So if we go ahead and reload, forgot that I didn't link it right back to my values just yet.

80
00:05:04.520 --> 00:05:10.100
So if we go over here and quickly fill in, for instance, of three, it's going to return.

81
00:05:10.100 --> 00:05:10.450
True.

82
00:05:10.970 --> 00:05:14.180
And over here, you're going to see that this all of this information is static.

83
00:05:14.180 --> 00:05:24.710
Information went over to Stripe, created a token, write an I.D. and is ready to rock and roll.

84
00:05:24.720 --> 00:05:26.810
So there's no address linked this card.

85
00:05:27.350 --> 00:05:30.050
It's linked as a visa from the US.

86
00:05:30.560 --> 00:05:33.710
And the CVC is, of course, unchecked, but.

87
00:05:34.860 --> 00:05:41.880
We're able to create a live payment token with which we can now hit stripe to try to process a simple

88
00:05:41.880 --> 00:05:43.350
payment, right.

89
00:05:43.560 --> 00:05:51.270
Just with this amount of simple information, we've now went full circle on one full paradigm of our

90
00:05:51.270 --> 00:05:51.900
user flow.

91
00:05:52.350 --> 00:05:53.790
We take the credit card info.

92
00:05:53.820 --> 00:05:55.410
We create that striped token.

93
00:05:55.980 --> 00:06:00.030
Now, this isn't usually the way that we set things up, though.

94
00:06:00.360 --> 00:06:04.130
This isn't usually the way that our features are built.

95
00:06:04.140 --> 00:06:10.670
We don't take external libraries and just put them smack dab in the middle of a component.

96
00:06:11.160 --> 00:06:13.770
So let's optimize this a bit and let's do that in the next video.

