WEBVTT
1
00:00:00.360 --> 00:00:01.050
Welcome back.

2
00:00:01.260 --> 00:00:03.600
Let's continue building our robo friends app.

3
00:00:04.930 --> 00:00:12.160
Now, up to this point, if you look at our index suggests, well, that was a lot of copy and pasting

4
00:00:12.160 --> 00:00:15.530
that we did if we had a lot of robot friends.

5
00:00:15.550 --> 00:00:19.380
Imagine having won hundreds of these that we have to constantly copy and paste.

6
00:00:19.750 --> 00:00:21.040
That's not very efficient, is it?

7
00:00:21.640 --> 00:00:29.830
Also, if you remember our diagram over here of one way dataflow, we always had a parent such as an

8
00:00:29.830 --> 00:00:34.270
app component that had children that have their own children and so on and so forth.

9
00:00:34.910 --> 00:00:42.550
So using that knowledge, we can have one big app component that have different children so that we

10
00:00:42.550 --> 00:00:45.700
make each component small and reusable.

11
00:00:47.860 --> 00:00:49.030
Let's go back to our example.

12
00:00:50.820 --> 00:00:57.090
Now that we have Robot Digest, we ideally can list all these 10 users.

13
00:00:58.540 --> 00:01:06.370
The way we do that, let's have a card list component so that if we import.

14
00:01:07.630 --> 00:01:12.040
A cardless component, which is a parent of card then.

15
00:01:14.160 --> 00:01:20.610
We can just render that instead of all these cards, so I'll say card list.

16
00:01:22.010 --> 00:01:25.340
And again, we'll have to create it, so we'll say Noufal.

17
00:01:27.290 --> 00:01:30.320
Card list, James.

18
00:01:32.900 --> 00:01:40.400
Again, changing it to our bable syntax, we'll do import react from react.

19
00:01:42.040 --> 00:01:43.540
And I'll make this a little bit bigger.

20
00:01:44.880 --> 00:01:46.650
And again, we'll just say const.

21
00:01:48.150 --> 00:01:52.530
Card list equals they won't accept anything for now.

22
00:01:54.230 --> 00:01:55.430
But I will return.

23
00:01:56.750 --> 00:01:58.160
Well, what should have return?

24
00:02:01.720 --> 00:02:02.740
It should return.

25
00:02:03.740 --> 00:02:04.820
The cards, right?

26
00:02:05.800 --> 00:02:07.870
We can just copy and paste this.

27
00:02:11.650 --> 00:02:15.670
Put this in here, let's fix the indentation here a bit.

28
00:02:18.580 --> 00:02:22.570
Now, Card will be the one that returns these cards.

29
00:02:24.150 --> 00:02:28.770
And index dot ASML, we'll just render.

30
00:02:33.250 --> 00:02:41.740
If I save this, well, I'll guess that card isn't being used so we can remove it and robots aren't

31
00:02:41.740 --> 00:02:45.400
being used, but we can use the robots now to pass that.

32
00:02:46.770 --> 00:02:48.960
As robots equals.

33
00:02:51.240 --> 00:02:52.980
The robot's array.

34
00:02:54.080 --> 00:02:58.520
Card list is accepting a robot's propp.

35
00:02:59.630 --> 00:03:04.910
If I say this, everything's working, but I'm getting this air because, well, as you can see, we

36
00:03:04.910 --> 00:03:05.870
didn't export.

37
00:03:06.800 --> 00:03:10.340
If we go back to the car list, export default.

38
00:03:11.410 --> 00:03:13.710
And hopefully by now, you're starting to get the hang of it.

39
00:03:13.810 --> 00:03:19.720
There's a lot of repetition here, but each time, as long as you learn the syntax, we're creating

40
00:03:19.720 --> 00:03:28.150
these components nicely and we get a ton of errors because we don't have any access to robots and IDs

41
00:03:28.150 --> 00:03:29.960
and well, card, for that matter either.

42
00:03:30.160 --> 00:03:33.850
So let's import card from.

43
00:03:35.430 --> 00:03:38.030
Again, same directory card cardiologist's.

44
00:03:39.180 --> 00:03:48.030
Robots in defined, we know that card list receives robots now, so I have access to it and props,

45
00:03:48.450 --> 00:03:52.290
or I can structure it and say that we have access to it.

46
00:03:56.540 --> 00:03:57.440
If I save this.

47
00:03:59.230 --> 00:04:03.070
Look at that, I have everything back the way it was.

48
00:04:04.970 --> 00:04:11.870
But it's not all of them, is it, we're only grabbing the zero one, two, only three of them, and

49
00:04:11.870 --> 00:04:15.200
as we saw in the robot stages, I have 10.

50
00:04:17.540 --> 00:04:22.880
Hmmm, how can we do this better, let's make this a little bit smaller so you can see.

51
00:04:25.100 --> 00:04:28.800
It looks like we want to do some sort of a loop, right?

52
00:04:29.300 --> 00:04:34.630
We want to loop over the robots and create a card component for each one.

53
00:04:35.510 --> 00:04:37.400
How can we do that here and react?

54
00:04:39.460 --> 00:04:45.040
Let's start off by adding another variable here, we'll call it CONSED card.

55
00:04:47.620 --> 00:04:56.430
Component and within the car component, we want to say that robots, we want to.

56
00:04:56.590 --> 00:04:58.900
Well, what do we want to do when we do a loop?

57
00:04:59.260 --> 00:05:01.450
As I've said before, we want to map.

58
00:05:02.990 --> 00:05:08.660
Right, we could do for each as well, but I always recommend doing that and within this map, each

59
00:05:08.660 --> 00:05:09.260
robot.

60
00:05:11.690 --> 00:05:16.760
Gets this so we get a user every time we map through it, so we can say user.

61
00:05:19.970 --> 00:05:23.210
Should return again because a map needs to return.

62
00:05:24.370 --> 00:05:28.900
It returns this right, we want to return a card component.

63
00:05:30.130 --> 00:05:32.620
I can copy and paste this right here.

64
00:05:34.400 --> 00:05:40.700
And within the return, I can just say now, instead of robots index zero, do we have the index?

65
00:05:41.630 --> 00:05:48.530
Well, yeah, because you remember the second parameter that we get in a map is the index.

66
00:05:48.690 --> 00:05:49.820
So I can say user.

67
00:05:50.860 --> 00:05:57.160
And I fear index and now within robots, I'll say I.

68
00:05:59.200 --> 00:06:04.870
For index each time, the first time around, this will be zero, then one, then two, all the way

69
00:06:04.870 --> 00:06:07.360
to nine to include our ten robots.

70
00:06:08.700 --> 00:06:13.620
Let's see if this actually works, if I add card component here.

71
00:06:15.180 --> 00:06:21.210
You remember that we have to wrap it in curly brackets because it's JavaScript, so it knows to evaluate.

72
00:06:22.270 --> 00:06:23.440
If I save this.

73
00:06:24.740 --> 00:06:32.630
Looks like it's compiling successfully, I go back and holy moly, we got ourselves a Qaderi.

74
00:06:33.730 --> 00:06:35.060
How cool is that?

75
00:06:35.080 --> 00:06:36.790
That was incredibly fast to do.

76
00:06:37.210 --> 00:06:45.110
We just used our common sense and JavaScript knowledge just use map to return multiple components.

77
00:06:46.060 --> 00:06:48.160
I hope you realize how powerful that is.

78
00:06:48.160 --> 00:06:50.290
And that is why React is so popular right now.

79
00:06:50.530 --> 00:06:57.100
We're able to use JavaScript to return these HTML elements and do things really, really fast.

80
00:06:59.250 --> 00:07:07.860
If I open up the console here, I'll see that I get a warning each child in an array or iterator should

81
00:07:07.860 --> 00:07:12.120
have a unique Kiprop and there's a link to it if you want to read up on it.

82
00:07:13.260 --> 00:07:16.020
This is a special case that you just have to remember.

83
00:07:17.370 --> 00:07:23.570
When working with react, the way the virtual dome works is it keeps track of what all these cards are,

84
00:07:24.210 --> 00:07:28.530
but without having something called a Kiprop.

85
00:07:29.980 --> 00:07:35.200
If some of these cars get deleted, react won't know.

86
00:07:36.620 --> 00:07:42.290
Which ones which and we'll have to change the entire Dom versus if you had a key prop and says, oh,

87
00:07:42.290 --> 00:07:45.000
this one gets removed, I can just remove this from the DOM.

88
00:07:45.110 --> 00:07:49.320
Remember, we want to minimize the amount of work that we do to the dump.

89
00:07:50.180 --> 00:07:52.850
So when you do a loop, it's just something you have to remember.

90
00:07:53.090 --> 00:07:54.950
You have to give it a unique key.

91
00:07:56.090 --> 00:07:58.670
In our case, we can just say hi.

92
00:07:59.750 --> 00:08:01.090
Which is index.

93
00:08:01.170 --> 00:08:02.180
If we save this.

94
00:08:05.480 --> 00:08:06.860
We have to wrap it in.

95
00:08:08.740 --> 00:08:12.160
Curly brackets, again, because it's JavaScript.

96
00:08:13.630 --> 00:08:14.390
And there you go.

97
00:08:14.620 --> 00:08:16.800
Now, we don't have the air anymore.

98
00:08:22.850 --> 00:08:23.990
And let's just.

99
00:08:26.250 --> 00:08:28.890
Make this on a new line just so it looks prettier.

100
00:08:33.510 --> 00:08:38.510
And because we're returning it on multiple lines, we want to wrap this in a bracket, right.

101
00:08:38.909 --> 00:08:39.210
All right.

102
00:08:39.260 --> 00:08:39.870
And that's better.

103
00:08:41.990 --> 00:08:44.390
So this is working nicely as we want it.

104
00:08:45.280 --> 00:08:49.070
I want to show you one thing, because this is JavaScript.

105
00:08:49.070 --> 00:08:53.330
Anything we put in these curly brackets is JavaScript, including comments.

106
00:08:54.330 --> 00:09:03.000
Well, we can just copy and paste this entire thing, remove the constant and just add it within the

107
00:09:03.000 --> 00:09:03.540
brackets.

108
00:09:10.250 --> 00:09:12.920
It should still work like it does.

109
00:09:14.310 --> 00:09:19.710
And this is another power of react, react makes you a really, really good JavaScript programmer,

110
00:09:19.710 --> 00:09:24.570
because other than this syntax, everything else is just JavaScript.

111
00:09:25.260 --> 00:09:32.790
So we're able to create a Kahless component that lists cards and all we need to do is pass it a prop

112
00:09:33.180 --> 00:09:34.590
of robots.

113
00:09:35.650 --> 00:09:39.910
And we just made this a ton cleaner, very cool.

114
00:09:40.750 --> 00:09:42.350
All right, that's it for this video.

115
00:09:42.760 --> 00:09:46.090
More things will happen in the next one, Seongnam one.

116
00:09:46.340 --> 00:09:46.870
Bye bye.

