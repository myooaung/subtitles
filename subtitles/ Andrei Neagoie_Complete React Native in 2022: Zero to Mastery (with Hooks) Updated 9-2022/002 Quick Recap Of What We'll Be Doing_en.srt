1
00:00:01,430 --> 00:00:06,560
What we just discussed here can become a bit confusing, so I want to boil it down in a diagram that

2
00:00:06,560 --> 00:00:12,200
will help simplify what exactly it is we're doing when we're adding data in a normal circumstance,

3
00:00:12,320 --> 00:00:17,750
when we're talking about talking to Google, what our phone is doing in actuality is going to Google

4
00:00:17,750 --> 00:00:20,930
and asking it, hey, give me some of your maps information.

5
00:00:21,230 --> 00:00:27,230
And by doing that, what Google will send back is the information about the restaurants and the location.

6
00:00:28,060 --> 00:00:37,090
Now, in actuality, how we're building this out is as follows, our phone is having an application

7
00:00:37,090 --> 00:00:40,650
that's built in Riak native Riak native is built in to react.

8
00:00:41,230 --> 00:00:47,410
And so when we determine that we're going to work with any type of data in this specific situation,

9
00:00:47,410 --> 00:00:52,540
because it's global data, because the restaurant's data is global data, what we're seeing is that,

10
00:00:52,540 --> 00:00:57,760
in fact, we're going to leverage something called react context and we're going to build a service

11
00:00:57,760 --> 00:01:04,690
layer consisting of these two parts, a service and the context, the context serves to share the data

12
00:01:04,690 --> 00:01:07,060
globally within the riak need of application.

13
00:01:07,060 --> 00:01:16,510
And the service itself stems to determine what methods we want in order to get data from the external

14
00:01:16,510 --> 00:01:16,810
service.

15
00:01:16,810 --> 00:01:24,550
So the service file operates as a layer in between the context, the Riak native application and the

16
00:01:24,550 --> 00:01:27,280
external service provider, in this case, Google.

17
00:01:28,000 --> 00:01:32,860
And what we're doing on top of that is we're saying, well, right now we can't really implement the

18
00:01:32,860 --> 00:01:33,820
Google API called.

19
00:01:33,820 --> 00:01:35,770
There's way more that needs to go into that.

20
00:01:36,190 --> 00:01:37,960
So what we're doing is we're faking it.

21
00:01:38,380 --> 00:01:44,530
We're not really integrating against Google, but we're having local files that have the information

22
00:01:44,710 --> 00:01:48,610
that's structured in the same way that Google would send this back information.

23
00:01:48,610 --> 00:01:50,770
But we're storing them locally on the phone.

24
00:01:50,770 --> 00:01:55,240
And that way we can build our implementation as if we were talking to Google.

25
00:01:55,390 --> 00:02:01,210
And later on, when we actually do talk to Google, it's going to be a question of just switching some

26
00:02:01,210 --> 00:02:06,070
things around, because the way that our app understands the information is already there.

27
00:02:06,790 --> 00:02:08,259
So to boil that down.

28
00:02:09,270 --> 00:02:15,600
In reality, if we're talking about a global integration, our phone talks to Google, but in our implementation,

29
00:02:15,600 --> 00:02:20,970
since we're using react native, we're going to be using the react context.

30
00:02:20,970 --> 00:02:26,940
We're going to have a service file that's going to operate as an intermediate between our app and the

31
00:02:26,940 --> 00:02:27,880
external service.

32
00:02:28,230 --> 00:02:31,100
In this case, we're going to mock the external service.

33
00:02:31,110 --> 00:02:34,260
We're not going to make it as if the external service is real.

34
00:02:34,680 --> 00:02:41,490
And to do that, we need to build out this service oriented architecture, this service layer.

35
00:02:41,740 --> 00:02:48,270
And for every subsequent feature, we will be using something relatively similar, although we might

36
00:02:48,270 --> 00:02:50,370
change it up a bit based on the situation.

37
00:02:51,180 --> 00:02:56,610
Now that we understand this, we can get into building out our mock implementation of talking to the

38
00:02:56,610 --> 00:02:57,780
Google Service API.

