WEBVTT
1
00:00:00.530 --> 00:00:06.890
Now that we have our restaurant context provider set up and we have a restaurant context and we've proved

2
00:00:07.160 --> 00:00:13.640
that when we give the context provider a value of restaurants with an array of eight items, that we're

3
00:00:13.640 --> 00:00:20.670
able to access it anywhere below Apgar's level by using context, by using the use context hook.

4
00:00:21.020 --> 00:00:27.740
So by using the use context hook, we're able to pull the value from this object.

5
00:00:28.900 --> 00:00:36.610
OK, so now that we understand that and we've seen it in action and we see that it applies itself to

6
00:00:36.880 --> 00:00:42.430
the actual output of the screen, because if I put this down to one item will boom, we have one item

7
00:00:42.430 --> 00:00:46.810
when I put it to two items, two items when I put it to three items, three items.

8
00:00:46.810 --> 00:00:50.590
So it's in effect, this array is now controlling the output of the screen.

9
00:00:51.390 --> 00:00:58.360
OK, so now that we know that that context is hooked up and the app JS file has now provided the restaurant's

10
00:00:58.360 --> 00:01:07.150
array to any component below it inside of the tree, now we can go ahead and try to hook up our data,

11
00:01:07.450 --> 00:01:10.090
our restaurant request in our restaurant transform.

12
00:01:10.090 --> 00:01:10.440
Right.

13
00:01:11.320 --> 00:01:15.790
So the way that we want to do that is we want to set up some state.

14
00:01:16.210 --> 00:01:19.690
So we want basically this context provided this component.

15
00:01:20.530 --> 00:01:22.660
We want it to provide the request.

16
00:01:22.670 --> 00:01:24.130
So it's going to do the request.

17
00:01:24.130 --> 00:01:28.950
It's going to do the transform and it's going to provide any state that happens to that request.

18
00:01:29.350 --> 00:01:35.860
So the end output of this request should be this array, but it's also going to control the interface

19
00:01:35.860 --> 00:01:36.580
with the API.

20
00:01:36.580 --> 00:01:40.930
So if we get an error, it's going to be able to provide an error.

21
00:01:41.380 --> 00:01:44.290
It's going to provide the information if it's loading or not.

22
00:01:44.650 --> 00:01:48.110
So that whole thing is going to be what we're building right now.

23
00:01:48.400 --> 00:01:52.750
So there's three states that I talked about the error, the loading and the actual output.

24
00:01:52.750 --> 00:01:57.490
So we're going to say const restaurants and set restaurants.

25
00:01:58.420 --> 00:02:07.030
Is equal to use state of an empty array, because by default, we don't have any restaurants, then

26
00:02:07.030 --> 00:02:11.039
we're going to say CONSED is loading and set is loading.

27
00:02:11.680 --> 00:02:16.690
These are the value and the center is equal to use state false by default.

28
00:02:16.690 --> 00:02:17.560
We're not loading.

29
00:02:18.460 --> 00:02:26.390
And then we're going to say const error set error is equal to use state of null.

30
00:02:26.620 --> 00:02:28.930
So by default we do not have an error.

31
00:02:29.350 --> 00:02:34.280
So we have our three pieces of state here and now we basically have to hook them up to be controlled.

32
00:02:34.960 --> 00:02:36.640
So how are they going to be controlled?

33
00:02:37.150 --> 00:02:39.230
Well, we're going to have the use effect hooke's.

34
00:02:39.250 --> 00:02:44.230
So when this component mounts, when the restaurant context provider mounts, we're going to do some

35
00:02:44.230 --> 00:02:44.620
stuff.

36
00:02:45.310 --> 00:02:53.710
And the stuff we're going to do is we're going to basically say, hey, when it mounts, do something,

37
00:02:54.190 --> 00:02:54.390
OK?

38
00:02:54.440 --> 00:02:56.530
So when this mounts, we're going to do something.

39
00:02:57.400 --> 00:03:00.070
This empty array syntax is saying.

40
00:03:01.040 --> 00:03:03.710
Run the use effect when the component mounts.

41
00:03:05.390 --> 00:03:10.290
So when it mounts, we're going to say retrieve restaurants, that's what we're going to retrieve restaurants.

42
00:03:10.340 --> 00:03:11.520
That's what we're going to run.

43
00:03:12.170 --> 00:03:14.090
So we're going to define a function here.

44
00:03:15.120 --> 00:03:22.460
And it's going to be consed retrieve restaurants and that's going to do something for us.

45
00:03:24.740 --> 00:03:30.590
Was it going to do well, first of all, it's going to say, hey, we're loading, so set loading to

46
00:03:30.590 --> 00:03:30.950
true.

47
00:03:32.140 --> 00:03:36.880
And then what it's going to do is it's going to do a set time out because we're going to time out,

48
00:03:36.880 --> 00:03:42.250
we're going to act like it's a real API and we're going to wait for our response to come back because

49
00:03:42.280 --> 00:03:46.240
there is no latency on retrieving our local objects.

50
00:03:46.240 --> 00:03:47.850
So we're going to wait two seconds.

51
00:03:48.580 --> 00:03:51.970
What we're going to say is, hey, do the restaurant request.

52
00:03:54.970 --> 00:03:56.210
We're not going to give it a location.

53
00:03:56.230 --> 00:04:00.520
It's going to fall back to its default location and then we're going to say.

54
00:04:03.560 --> 00:04:04.940
Run the restaurant, transform.

55
00:04:08.800 --> 00:04:16.000
Restaurants, so I made a small spelling mistake here that may end up costing me, so run the restaurants,

56
00:04:16.000 --> 00:04:16.630
transform.

57
00:04:20.450 --> 00:04:21.290
Let's see here.

58
00:04:22.530 --> 00:04:26.850
Restaurants request that then run, the restaurants transform, but then.

59
00:04:28.230 --> 00:04:30.900
We're going to say here are our restaurants.

60
00:04:32.370 --> 00:04:39.540
And we're going to say inside of the function body set restaurants to restaurants.

61
00:04:41.270 --> 00:04:43.880
One more thing we need to do is we need to catch.

62
00:04:44.740 --> 00:04:49.900
And then if we get an error, we're going to say set the error to.

63
00:04:53.340 --> 00:05:00.120
Now, one more thing we need to take into account here is when we do get the restaurants back, we need

64
00:05:00.120 --> 00:05:02.160
to set loading to false.

65
00:05:02.160 --> 00:05:05.030
And if we get an error back, we also need to set loading the false.

66
00:05:05.790 --> 00:05:07.350
Those are two important things.

67
00:05:08.590 --> 00:05:12.730
Now, restaurants is already declared in the upper scope, so let's call this results, we don't want

68
00:05:12.730 --> 00:05:17.200
to conflict with the upper scope here because we're re declaring a variable that's already known.

69
00:05:17.410 --> 00:05:18.640
So we don't want to do that.

70
00:05:19.790 --> 00:05:26.780
OK, so now that we have what retrieve restaurants is going to do, we can say return restaurants as

71
00:05:26.780 --> 00:05:33.500
restaurants, now we can also shorthand this to just be this and then it will reference this variable.

72
00:05:34.040 --> 00:05:35.710
Doesn't really matter what you choose to do.

73
00:05:36.650 --> 00:05:41.570
We're going to return our is loading state, so I'm going to shorthand it to say return restaurants,

74
00:05:41.570 --> 00:05:44.740
return is loading state and return if we have an error.

75
00:05:45.410 --> 00:05:47.370
So those are the three pieces of state I want.

76
00:05:48.500 --> 00:05:51.350
OK, now that I have those three pieces of state.

77
00:05:52.530 --> 00:05:57.120
We can go ahead and we can go look at our application right here.

78
00:05:58.540 --> 00:06:03.570
And what we can see, it's loading way more restaurants, so we seem to be getting something back.

79
00:06:04.000 --> 00:06:10.630
So if we go inside of here and we say console that log restaurants, we're going to see the different

80
00:06:10.630 --> 00:06:12.310
states that restaurant is going through.

81
00:06:13.230 --> 00:06:20.550
And if we open up our terminal, we'll see that restaurants is getting our entire restaurant array.

82
00:06:21.400 --> 00:06:26.460
Now, if we reload this, you'll see that there's a little bit of lag on it coming in two seconds,

83
00:06:26.940 --> 00:06:27.240
right?

84
00:06:27.270 --> 00:06:28.090
Two full seconds.

85
00:06:28.090 --> 00:06:29.190
So that's what we put down.

86
00:06:29.400 --> 00:06:34.800
So we'll optimize that to look nice because we're mimicking as if it was a real AP.

87
00:06:36.570 --> 00:06:39.360
And what we want to do now is.

88
00:06:40.600 --> 00:06:43.000
Right now, we're giving restaurants.

89
00:06:44.040 --> 00:06:45.480
Just the data.

90
00:06:47.560 --> 00:06:49.270
Over here in the screen.

91
00:06:50.630 --> 00:06:55.100
So we're saying the data is restaurant, not restaurants.

92
00:06:57.350 --> 00:07:03.140
And so we can simplify that, we can say restaurants, we'll structure it off of here.

93
00:07:04.050 --> 00:07:10.450
And then we'll say we'll also get the imploding state and we'll get the ER, if there is any.

94
00:07:11.460 --> 00:07:14.970
So now that we have our restaurants, what's going on, a restaurant list?

95
00:07:15.630 --> 00:07:19.920
Well, in render item, we basically get an item.

96
00:07:21.070 --> 00:07:27.220
This is what we get, we get an item each time, so if we open this up.

97
00:07:28.430 --> 00:07:30.080
And then we say return.

98
00:07:31.520 --> 00:07:32.990
We can console that log item.

99
00:07:35.470 --> 00:07:42.520
And what we'll see is, in the most basic sense, we'll see a singular restaurant coming in.

100
00:07:43.540 --> 00:07:51.100
So what we want to do now is we want to go look at what Restaurant InFocus takes in restaurant info

101
00:07:51.100 --> 00:07:54.920
card takes in a component restaurant.

102
00:07:55.060 --> 00:07:59.680
So what we want to do in the screen is we want to say here restaurant.

103
00:08:01.120 --> 00:08:02.800
Is equal to Eitam.

104
00:08:03.870 --> 00:08:04.860
And by doing that.

105
00:08:05.900 --> 00:08:12.830
Well, now we're getting some weird values, we're getting Jason value, height, et cetera, et cetera,

106
00:08:12.830 --> 00:08:16.340
et cetera, photo cannot be translated.

107
00:08:17.400 --> 00:08:23.340
Interesting, so what's going on here is that if we go look at our data.

108
00:08:24.790 --> 00:08:26.230
If we go look at photos.

109
00:08:27.350 --> 00:08:38.059
Fotos is giving us an array of objects, right, it's giving us this photos and then it has height,

110
00:08:38.210 --> 00:08:41.059
HTML attributions, photo reference, all this stuff.

111
00:08:41.630 --> 00:08:49.220
But what we basically want is we just want the URL of the photo, the very first photo, or we basically

112
00:08:49.220 --> 00:08:53.180
want to translate this to properly return us a photo URL.

113
00:08:53.420 --> 00:09:00.140
So normally this would return us like you are in here that would be linked to a photo, et cetera,

114
00:09:00.530 --> 00:09:02.420
and that would be what we want to pull.

115
00:09:03.540 --> 00:09:05.730
So we need to edit our transform a bit.

116
00:09:06.880 --> 00:09:12.610
So our transform over here in the service takes into account the is closed, is closed temporarily,

117
00:09:12.910 --> 00:09:19.240
but one thing it isn't doing, it isn't taking into account the translation that we need to do for the

118
00:09:19.240 --> 00:09:19.840
pictures.

119
00:09:20.960 --> 00:09:29.930
So one thing we should do in here is we should say restaurant dot photos is equal to and then let's

120
00:09:29.930 --> 00:09:31.160
just put an array here for now.

121
00:09:32.240 --> 00:09:36.950
And if we set restaurant that photos to an empty array, what we'll be able to see here is that we'll

122
00:09:36.980 --> 00:09:39.570
be able to render out all of the restaurant information.

123
00:09:39.590 --> 00:09:42.500
So now we're getting dynamic information from the restaurant.

124
00:09:42.740 --> 00:09:45.980
We're getting the name of the restaurant, the rating of that restaurant.

125
00:09:46.280 --> 00:09:51.880
So we're able to basically render out what it's going to be.

126
00:09:53.390 --> 00:09:56.960
Now, with that, we're getting different icons here.

127
00:09:56.990 --> 00:09:57.770
This is a lodge.

128
00:09:57.770 --> 00:10:00.890
This is a restaurant, but we're not getting any photos.

129
00:10:01.220 --> 00:10:06.850
And so over here in the mock folder, you will have seen that I've put mock images.

130
00:10:07.220 --> 00:10:12.500
So there's one thing that I wanted to add here that is for us right now.

131
00:10:12.680 --> 00:10:18.640
What we want to do is we want to make sure that our photos are randomized.

132
00:10:18.920 --> 00:10:21.500
We don't have photos coming back from this API.

133
00:10:22.040 --> 00:10:25.640
So let's do restaurant dot photos, thought map.

134
00:10:26.750 --> 00:10:33.680
And let's pull in mock images from the mock and what we'll be able to do here is we'll go and we'll

135
00:10:33.680 --> 00:10:38.300
select a random image Matheran them from the mock images.

136
00:10:38.990 --> 00:10:44.180
And this will allow us to render out just a specific image.

137
00:10:44.870 --> 00:10:45.650
In this case.

138
00:10:45.650 --> 00:10:51.560
We'll be selecting a random image from our mock images array here so they'll be overlapping or similar

139
00:10:51.560 --> 00:10:56.180
images based on how the random works and on every render, the image will be different.

140
00:10:56.990 --> 00:11:04.040
But what you can see here is we've just hooked up our data and now it's randomising and legitimizing

141
00:11:04.040 --> 00:11:04.580
the view.

142
00:11:04.580 --> 00:11:08.690
We're seeing all of the restaurants and all of their information happen.

143
00:11:09.410 --> 00:11:18.740
And all we did was hook up our context, make sure that our context can get the restaurants from this,

144
00:11:19.160 --> 00:11:21.950
fetch action over here from retrieve restaurants.

145
00:11:22.430 --> 00:11:30.080
And that allows us to basically be able to get the information that we need, set it.

146
00:11:30.320 --> 00:11:32.450
And let's say, for instance.

147
00:11:33.340 --> 00:11:38.290
That we retrieve the restaurant that didn't exist, right, so we didn't give it a location.

148
00:11:39.790 --> 00:11:45.790
Now, does it take location as a single property, so, yeah, if we did this.

149
00:11:46.720 --> 00:11:55.630
And we gave it a location that does not exist, it should theoretically give us an error back because

150
00:11:55.780 --> 00:11:57.400
the information does not exist.

151
00:11:58.320 --> 00:12:00.930
If we went inside of our restaurant screen.

152
00:12:02.010 --> 00:12:09.210
What we know now is that we may have an error here, so if we do console dialogue, error.

153
00:12:10.300 --> 00:12:16.180
We should be able to see the air coming in, so if we go to our terminal output here and we do this

154
00:12:16.180 --> 00:12:17.500
and we scroll to the bottom.

155
00:12:19.260 --> 00:12:23.940
We'll see not found because, well, we gave our context.

156
00:12:27.420 --> 00:12:29.640
A value that does not exist.

157
00:12:29.970 --> 00:12:35.520
This is not a valid location, but if we save this, then what we'll see is that our restaurants will

158
00:12:35.730 --> 00:12:40.540
come back in and they will load after two seconds.

159
00:12:40.890 --> 00:12:46.530
So now that we have the end to end flow set up to get the information from the JSON files rendering

160
00:12:46.530 --> 00:12:51.660
on the screen and dynamically rendering, we can see how powerful the entire setup we went through step

161
00:12:51.660 --> 00:12:53.250
by step is.

162
00:12:54.200 --> 00:13:01.280
Right, because we set up our restaurant car to take in a certain shape, we set up our context to be

163
00:13:01.280 --> 00:13:08.210
able to do the request for us to get the restaurants and then transform that information to match the

164
00:13:08.210 --> 00:13:10.460
input that the restaurant cart expects.

165
00:13:10.760 --> 00:13:16.850
And then in our restaurant screen, all we needed to do was we needed to use the context.

166
00:13:17.780 --> 00:13:20.540
Of the restaurants that already did the API call for us.

167
00:13:21.580 --> 00:13:27.040
And give the restaurant information to restaurants and at that point.

168
00:13:28.130 --> 00:13:35.360
Everything was hooked up because we gave this prop over here, and so now we're getting real restaurant

169
00:13:35.360 --> 00:13:36.170
information.

170
00:13:37.240 --> 00:13:39.490
OK, so now that this works.

171
00:13:40.640 --> 00:13:46.880
How can we hook up search in order to swap out between the different cities?

172
00:13:47.240 --> 00:13:48.230
Well, let's take a look at that.

