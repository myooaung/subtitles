1
00:00:00,970 --> 00:00:07,270
We've hit this proverbial wall because now we're able to add favorites and when we add favorites, they're

2
00:00:07,750 --> 00:00:11,040
immediately visible when we go to our favorite screen.

3
00:00:11,200 --> 00:00:13,180
And that's absolutely amazing, right?

4
00:00:13,180 --> 00:00:17,860
When we trigger our favorites bar, we can see all of our favorites and we can remove the favorites

5
00:00:17,860 --> 00:00:18,700
and see it happen.

6
00:00:19,150 --> 00:00:20,500
But we have a problem.

7
00:00:20,860 --> 00:00:24,820
When we reload, all of them disappear.

8
00:00:25,150 --> 00:00:27,190
So they're not being persistent.

9
00:00:27,730 --> 00:00:36,310
And that is a consequence of, first of all, our favorites being in local, state and second of all,

10
00:00:36,310 --> 00:00:38,000
us not storing it anywhere.

11
00:00:38,350 --> 00:00:39,460
Now, there's two options.

12
00:00:39,460 --> 00:00:41,980
We can store it on a server or we can store it on the phone.

13
00:00:42,280 --> 00:00:45,720
And I'm always a fan of these types of information.

14
00:00:46,180 --> 00:00:48,250
It's good to store them on the phone.

15
00:00:49,170 --> 00:00:56,640
Because it's local information and eventually, if we do get to a level at which we have infrastructure

16
00:00:56,640 --> 00:00:59,460
backing the app, we can move it out.

17
00:00:59,460 --> 00:01:05,850
But it's good as a caching mechanism, as a secondary caching mechanism as well for the first 20 favourite's

18
00:01:06,150 --> 00:01:09,660
so that the user doesn't have to wait on an API call or whatnot.

19
00:01:09,870 --> 00:01:12,710
There's different reasons to store locally.

20
00:01:13,350 --> 00:01:18,390
For now we're going to store locally because we do not have a server environment and we do not need

21
00:01:18,390 --> 00:01:24,290
one because a user has a limited cap on how many favorites they're ever going to store.

22
00:01:24,300 --> 00:01:27,630
You're never going to have a user with one hundred thousand favorite restaurants.

23
00:01:27,660 --> 00:01:32,430
I don't think a person can like more than four or five thousand restaurants.

24
00:01:32,670 --> 00:01:35,430
And even then, how long would it take them to get there?

25
00:01:35,430 --> 00:01:37,710
By then, we would already have our infrastructure.

26
00:01:37,720 --> 00:01:39,650
So it's a premature optimization.

27
00:01:39,840 --> 00:01:44,370
So then we have to ask ourselves the question, well, how are we going to store locally in Riak Native?

28
00:01:44,370 --> 00:01:47,520
We have the concept of async storage, but I know.

29
00:01:47,850 --> 00:01:50,700
Well, what is this about deprecated?

30
00:01:51,270 --> 00:01:52,320
It's been deprecated.

31
00:01:52,320 --> 00:01:54,330
Riak native deprecated async storage.

32
00:01:54,360 --> 00:01:57,840
Oh, and this is why the docs are also important.

33
00:01:58,320 --> 00:02:00,780
Riak native has a lot of moving parts.

34
00:02:00,780 --> 00:02:02,280
Things move all the time.

35
00:02:02,550 --> 00:02:10,080
And so it's important to keep on top because as Riak native grows as an ecosystem, so does its support

36
00:02:10,229 --> 00:02:15,780
there, moving things out of Riak native and into external packages because they should not belong to

37
00:02:15,780 --> 00:02:16,140
core.

38
00:02:16,170 --> 00:02:19,560
And so it's saying use Riak native async storage instead.

39
00:02:19,900 --> 00:02:25,530
And so when we look at Riak native async storage, it can store string data, it can store object data,

40
00:02:25,650 --> 00:02:27,450
but you need to serialize it first.

41
00:02:27,600 --> 00:02:32,820
So it's saying you can use JSON, String Afie and JSON pass when loading Glatz.

42
00:02:32,820 --> 00:02:33,540
That's pretty good.

43
00:02:33,840 --> 00:02:37,110
And so with that, well what is it.

44
00:02:37,860 --> 00:02:44,340
So let's do XPO async storage and when we go look at the docs of XPO, which is also always useful when

45
00:02:44,340 --> 00:02:45,570
we're looking at high level features.

46
00:02:45,570 --> 00:02:51,810
It says use riak native async storage, async storage and it has an expo install command even.

47
00:02:52,080 --> 00:02:52,970
This is amazing.

48
00:02:52,980 --> 00:02:59,280
This means we have first class support for the package that Riak native is telling us to use.

49
00:02:59,910 --> 00:03:03,390
And so with that, let's go ahead and run this command.

50
00:03:03,840 --> 00:03:11,280
And if we open up our terminal over here and we open up the Terminal two and we run the Expo install

51
00:03:11,280 --> 00:03:14,460
command while that's installing, let's go look at the usage.

52
00:03:14,850 --> 00:03:21,690
If we look at the usage in here, it says import async storage from Riak native async storage, async

53
00:03:21,690 --> 00:03:22,110
storage.

54
00:03:22,350 --> 00:03:23,430
That's a whole mouthful.

55
00:03:23,430 --> 00:03:25,050
Try saying that three times fast.

56
00:03:25,380 --> 00:03:31,260
And if we go into our code where we want to import, this is inside of our favorites context.

57
00:03:31,270 --> 00:03:39,410
So at the top, we're going to import async storage and we're going to go look quickly at how this works.

58
00:03:39,990 --> 00:03:43,310
So it's saying store data is an async function.

59
00:03:43,500 --> 00:03:45,330
This is a sugar for a promise.

60
00:03:45,660 --> 00:03:52,170
This is kind of the same as doing a Dianabol, something that we saw earlier or promises an async.

61
00:03:52,170 --> 00:03:54,840
A wait is a different way of writing it.

62
00:03:55,140 --> 00:04:02,130
And so we can say store data is an async function that is awaiting async storage, that set item.

63
00:04:02,880 --> 00:04:07,320
And then when we store an object value, it's JSON, that string of file.

64
00:04:07,380 --> 00:04:12,150
So if we have a complex object, which is what we're going to store, we're going to JSON, string ify

65
00:04:12,150 --> 00:04:12,420
it.

66
00:04:12,990 --> 00:04:20,670
And then if we want to read the data or data, we can do an async function again where we're going to

67
00:04:20,670 --> 00:04:26,850
await async storage, Daudt, get the item and then check if the item has a value.

68
00:04:26,970 --> 00:04:28,360
Otherwise catch the error.

69
00:04:28,710 --> 00:04:29,950
This is pretty good, isn't it?

70
00:04:30,510 --> 00:04:39,050
And what we can do here is we can go ahead with this and we can try to directly implement these methods.

71
00:04:39,390 --> 00:04:41,520
So let's go inside of here.

72
00:04:41,550 --> 00:04:50,460
And we've now installed Riak native async storage and so let's quickly implement our functions.

73
00:04:50,790 --> 00:04:53,030
So it said that we need to store data.

74
00:04:53,040 --> 00:04:56,880
So let's call that first of all, let's call that saved favourite's.

75
00:04:57,220 --> 00:04:58,140
That sounds better.

76
00:04:58,590 --> 00:05:00,960
We'll call that C favourite's and it's an async function.

77
00:05:01,560 --> 00:05:07,140
And what it's going to do is it's going to do a JSON value of evalu.

78
00:05:08,280 --> 00:05:14,640
And in case of an error, let's console that log the error just in case.

79
00:05:15,520 --> 00:05:19,400
Now, we're also going to need a load, so reading the data.

80
00:05:20,040 --> 00:05:24,140
And so let's go ahead and do calls to get data like they did over here.

81
00:05:24,180 --> 00:05:26,550
Let's call that load favourite's.

82
00:05:27,180 --> 00:05:34,680
And so with these two functions, we're basically set up to put together our favorites, but we need

83
00:05:34,680 --> 00:05:36,090
to give it a proper storage key.

84
00:05:36,100 --> 00:05:39,570
So let's say at Favourite's, that's going to be our storage key.

85
00:05:39,900 --> 00:05:46,740
OK, so now that we've set this up, what we need to do now is if the value is not equal to null when

86
00:05:46,740 --> 00:05:50,370
we load it, well, then we need to set it to favourite's.

87
00:05:50,370 --> 00:05:50,760
Right.

88
00:05:51,210 --> 00:05:52,110
But we need to.

89
00:05:52,110 --> 00:05:57,660
Jason Poza set favorites Jason on that pass and we need to do value.

90
00:05:58,470 --> 00:06:05,160
Value is basically the equivalent of getting our favorites, and if we have an error, let's console

91
00:06:05,370 --> 00:06:15,210
log the error just in case and let's say error loading as a prefix and error storing.

92
00:06:16,100 --> 00:06:19,190
As a prefix, just so that we know which error is which.

93
00:06:20,090 --> 00:06:26,150
And so now that we have this basically set up, what we need to do is we need to grab our use effect.

94
00:06:26,840 --> 00:06:31,920
And once we have our use effect, we can start implementing how this is going to work.

95
00:06:31,970 --> 00:06:37,640
So right here below the remove method, let's put a use effect and let's say that the use effect is

96
00:06:37,640 --> 00:06:41,060
going to listen to any change in favourite's.

97
00:06:42,530 --> 00:06:51,290
And any time favorites changes, we're going to store the favorites, so we're going to do a save favorites.

98
00:06:55,390 --> 00:06:56,590
Of favourite's.

99
00:06:57,800 --> 00:07:01,490
And that's going to be what we want to store.

100
00:07:02,390 --> 00:07:07,790
OK, so now we have that use effect where we're going to save, but now we also need to make sure that

101
00:07:07,790 --> 00:07:15,110
we load the favorites, which means we're going to load favourite's every time on the very first mount

102
00:07:15,380 --> 00:07:16,670
of our context.

103
00:07:16,910 --> 00:07:20,840
We're going to make sure that we load the initial favourite's.

104
00:07:22,060 --> 00:07:22,600
Awesome.

105
00:07:23,290 --> 00:07:27,010
So with all of this code, are we set up for success?

106
00:07:27,040 --> 00:07:29,980
Well, let's go take a look, because that wasn't a lot.

107
00:07:30,310 --> 00:07:33,880
And we basically know now what exactly is going on.

108
00:07:34,270 --> 00:07:37,030
So let's just restart XPO.

109
00:07:38,440 --> 00:07:39,340
Inside of here.

110
00:07:40,340 --> 00:07:47,360
And let's make sure that everything works as intended, so if we load Miles to go here, what we can

111
00:07:47,360 --> 00:07:51,950
see is that once it loads up in the very first instance, we're not going to have any favorites.

112
00:07:51,950 --> 00:07:56,690
But once we start saving favorites, so we'll save the first two and then we'll showcase the first two.

113
00:07:57,080 --> 00:08:02,270
If we now reload our app, we should still have them saved as favorites.

114
00:08:02,610 --> 00:08:03,620
So let's take a look.

115
00:08:04,050 --> 00:08:05,480
Oh, amazing.

116
00:08:05,660 --> 00:08:08,200
They're still save this favorites and I can still see them here.

117
00:08:08,450 --> 00:08:15,140
And if I go to Antwerp and I search for Antwerp and this starts loading and I save a favorite from Antwerp

118
00:08:15,140 --> 00:08:20,990
as well and I reload, what I'm going to see here is that load favourite's on.

119
00:08:20,990 --> 00:08:26,410
The very initial load of my context is going to load up my favorites from the async storage.

120
00:08:26,420 --> 00:08:27,920
So from the storage on the phone.

121
00:08:28,340 --> 00:08:33,679
And we have all of our favorites loading up in between sessions.

122
00:08:33,890 --> 00:08:41,140
So even if we close and reopen our app and we kill the app, we're going to save what we stored so far.

123
00:08:41,450 --> 00:08:43,520
That's absolutely amazing.

124
00:08:43,700 --> 00:08:46,250
That's a big, big, big advance.

125
00:08:46,550 --> 00:08:52,790
But there's one more thing we need to do here, and that's select some favorites because we need to

126
00:08:52,790 --> 00:08:54,420
pick our favorite restaurants, don't we?

127
00:08:55,220 --> 00:08:55,810
Awesome.

128
00:08:56,120 --> 00:08:57,410
This is a great feature.

129
00:08:57,530 --> 00:08:59,650
I love it already, don't you?

130
00:09:00,020 --> 00:09:04,880
And so now we have three fully built features.

131
00:09:05,060 --> 00:09:06,950
We have our restaurant screen.

132
00:09:06,950 --> 00:09:09,020
We have our favorites implementation.

133
00:09:09,020 --> 00:09:11,420
We have our favorites saving and loading.

134
00:09:11,630 --> 00:09:18,320
We have our map for you in which we can go and we can go to specific restaurant details.

135
00:09:19,280 --> 00:09:20,150
What's left?

136
00:09:20,750 --> 00:09:24,410
Well, there's quite a few things left, so let's look at that in the next video.

