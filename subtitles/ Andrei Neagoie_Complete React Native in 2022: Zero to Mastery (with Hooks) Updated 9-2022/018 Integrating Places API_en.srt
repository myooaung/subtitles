1
00:00:00,550 --> 00:00:05,560
Last we left off, we had geocode working and we were certain that we were getting the right geocode

2
00:00:05,560 --> 00:00:13,570
information, but when we moved towards the live API of Geocode, our mock places, API didn't function

3
00:00:13,960 --> 00:00:20,020
because of the longitude latitudes not matching up necessarily with what Google was returning us as.

4
00:00:20,020 --> 00:00:25,820
Google doesn't necessarily return us specifically the same longitude latitudes that we see in our mock

5
00:00:25,890 --> 00:00:28,550
information now for us to fix that.

6
00:00:29,200 --> 00:00:36,310
Well, there's only one way we need to implement the police's search request now in order for us to

7
00:00:36,310 --> 00:00:36,850
do that.

8
00:00:37,120 --> 00:00:44,890
If we go look over here at our Google Maps SDK and we go over to source places, places nearby, we

9
00:00:44,890 --> 00:00:51,070
can see that there's a places nearby request that we can do on the client that takes in parameters that

10
00:00:51,340 --> 00:00:57,580
will do the call to the places nearby and the parameters it takes our location, which is longitude,

11
00:00:57,580 --> 00:01:03,670
latitude, a potential radius, digital keyword language, Monoprice, Max Price, all of these different

12
00:01:03,670 --> 00:01:06,400
parameters that will narrow down our search.

13
00:01:07,740 --> 00:01:14,010
And so now I'm going to show you how easy it is to actually implement this, because with a couple of

14
00:01:14,010 --> 00:01:21,840
lines of code, we're basically going to integrate, fully integrate our application directly against

15
00:01:21,990 --> 00:01:22,850
Google places.

16
00:01:23,640 --> 00:01:28,530
Now, over here, we need to do something similar in the places request that we did to the geocode request,

17
00:01:28,530 --> 00:01:33,330
which is we need to check if it is Mark equal to true.

18
00:01:34,550 --> 00:01:41,690
We're going to check and only return the mock information in that case, otherwise what we're going

19
00:01:41,690 --> 00:01:48,080
to do is we're going to do a client dot places nearby.

20
00:01:49,090 --> 00:01:55,210
We're going to open up that function invocation and we're going to give it the information that it needs,

21
00:01:55,210 --> 00:02:01,990
so it's going to take in parameters and then it's also going to take a time out of one second.

22
00:02:02,170 --> 00:02:07,510
We're going to do our daughton were similarly to what we did in our geocode.

23
00:02:07,990 --> 00:02:15,040
We do a then and a catch right in here and we'll copy paste that because.

24
00:02:15,880 --> 00:02:22,360
Why rewrite, so now we're set up to give it to put together our parameters, now we have to take in

25
00:02:22,360 --> 00:02:28,060
client as a parameter, make sure that we're passing it in at the next stress level.

26
00:02:28,690 --> 00:02:31,840
So over here, make sure you're passing your client to your places request.

27
00:02:32,470 --> 00:02:38,560
Once we've checked that and we know everything's right, we're going to give it location of, well,

28
00:02:38,560 --> 00:02:39,820
you guessed it, location.

29
00:02:39,820 --> 00:02:41,710
So we're going to give it, say, location, location.

30
00:02:41,890 --> 00:02:44,110
You could shorten this to just say location.

31
00:02:44,890 --> 00:02:48,160
It doesn't really make a difference in it working.

32
00:02:48,610 --> 00:02:51,700
We're going to heart set the radius to be 15 kilometers.

33
00:02:52,060 --> 00:02:54,340
This is set in meters, radius is set and meter.

34
00:02:54,340 --> 00:03:00,880
So you can set whatever radius you want in meters and then we're going to say the type is equal to restaurants.

35
00:03:00,880 --> 00:03:02,950
So we're going to search specifically for restaurants.

36
00:03:03,980 --> 00:03:11,540
And then like we did on our geocode request, we're going to give it the key, which is the Google now

37
00:03:11,540 --> 00:03:18,740
we have to make sure that we're importing the firebase functions so that we can utilize the config that

38
00:03:18,740 --> 00:03:23,910
is coming in from runtime config and in the live environment will just come in through Firebase.

39
00:03:24,800 --> 00:03:26,450
So now we're hard linking this.

40
00:03:27,510 --> 00:03:30,150
And now that we have all of this going on.

41
00:03:31,090 --> 00:03:37,090
What we can try is we can try to load our up against live information.

42
00:03:37,960 --> 00:03:40,720
Now, it should be hitting places nearby.

43
00:03:41,930 --> 00:03:43,280
Well, is it?

44
00:03:44,360 --> 00:03:52,550
Actually, I shut down my server just to make sure during my development that I wouldn't hit any infinite

45
00:03:52,550 --> 00:03:55,220
loops, error cases and I could have full control.

46
00:03:55,230 --> 00:03:57,440
So always shut down your server when it's not in use.

47
00:03:58,040 --> 00:03:59,540
Now, if we reload over here.

48
00:04:02,050 --> 00:04:07,420
It's seeing that Jason value, height, HTML attributions, et cetera, et cetera, is not valid.

49
00:04:08,670 --> 00:04:14,370
Well, if we go over here and we did a places nearby request with a hard fixed location, what we're

50
00:04:14,370 --> 00:04:21,899
going to see is that in the photosphere, we're going to have an array, but it's going to contain an

51
00:04:21,899 --> 00:04:29,100
object with a height, an HTML attribution photo reference and all different types of information.

52
00:04:29,100 --> 00:04:31,590
So it's not really a photo.

53
00:04:32,010 --> 00:04:36,930
It's a bunch of information to get a photo, but it isn't the photo itself.

54
00:04:37,650 --> 00:04:43,290
Interestingly enough, what we can do here is we can say, well.

55
00:04:44,580 --> 00:04:50,670
Let's just remove the photos or we can do something similar to what we did in our mock call, which

56
00:04:50,670 --> 00:04:53,710
is Abde, the mock images to the results.

57
00:04:54,270 --> 00:05:02,880
So over here, we can say Rez thought data that results is equal to restart data that results that map.

58
00:05:03,120 --> 00:05:06,810
And we'll add the mock image to each individual restaurant that is returned.

59
00:05:07,930 --> 00:05:12,750
And what we'll see then is when we add the mock image to each individual restaurant that is returned,

60
00:05:13,180 --> 00:05:18,490
we can now search for specific places in the world and we'll get the information from that place, from

61
00:05:18,490 --> 00:05:23,950
cities we haven't been able to do before and will be able to see on the map that we are in that city.

62
00:05:24,130 --> 00:05:32,170
So we've now linked end to end our entire application live to Google Information, and we can search

63
00:05:32,350 --> 00:05:34,510
for all types of different cities.

64
00:05:34,780 --> 00:05:41,440
We could go for Hong Kong and then we'll load up Hong Kong and we'll see that.

65
00:05:41,710 --> 00:05:48,370
Where Google is searching is right here in this center from where it considers Hong Kong to be.

66
00:05:48,760 --> 00:05:53,800
And the same is true if we did Sydney, Australia, if we did Sydney, we're going to load up Sydney.

67
00:05:53,920 --> 00:05:59,770
And we can see here that we can zoom in and see all of the restaurants that it's looking for in Sydney.

68
00:06:00,630 --> 00:06:06,450
But the images aren't right, we've done the end to end integration, but all of our images are Mock's.

69
00:06:06,990 --> 00:06:10,100
Honestly, we've completed our end to end integration against Google.

70
00:06:10,260 --> 00:06:11,310
So that's amazing.

71
00:06:11,910 --> 00:06:20,850
But the one thing that is left for us to do is to make sure that we can get those images correctly from

72
00:06:20,850 --> 00:06:27,150
Google so that we can have our images come in that are actually the restaurant fronts.

73
00:06:27,870 --> 00:06:28,800
Let's take a look at that.

