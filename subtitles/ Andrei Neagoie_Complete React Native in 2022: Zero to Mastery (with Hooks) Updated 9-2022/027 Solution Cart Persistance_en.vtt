WEBVTT
1
00:00:00.960 --> 00:00:05.580
So hopefully that went smoothly, but now let's take a look at how we can achieve this.

2
00:00:06.030 --> 00:00:12.810
So there's two functions we will need CONSED safe card, which is going to be an async function that

3
00:00:12.810 --> 00:00:18.090
is going to take the current restaurant, the cart and the user ID of the user.

4
00:00:18.600 --> 00:00:27.210
And then what it's going to do is it's going to try catch around that, taking in an error and what

5
00:00:27.210 --> 00:00:33.030
it's going to do with that trick catches in the tri version it's going to say Consed Jason value is

6
00:00:33.030 --> 00:00:42.840
equal to Jason that string of Afie and what we're going to string Afie is the restaurant as Oreste and

7
00:00:43.110 --> 00:00:45.450
the cart as CRT.

8
00:00:46.280 --> 00:00:51.440
And by doing that now we have a Jason value that we can actually store and then following that will

9
00:00:51.440 --> 00:00:59.150
await async storage, Daudt set item and what we'll do is we'll do at Kaat.

10
00:01:00.440 --> 00:01:03.080
And we'll say dash user ID.

11
00:01:04.590 --> 00:01:13.030
So we'll be saving the cart under the user I.D. and then following that, we'll put in the Jason value.

12
00:01:13.680 --> 00:01:20.340
All right, so that saves the cart in the case of an error, will console that log error storing.

13
00:01:21.240 --> 00:01:29.970
And we'll add the the error itself now that we have saved Kaat, let's go and look at where we put that

14
00:01:29.970 --> 00:01:31.310
and how we use that.

15
00:01:31.770 --> 00:01:37.590
So first and foremost, we have our use of fact here that is trying to calculate a sum.

16
00:01:38.340 --> 00:01:40.790
Next to that, we'll add another use effect.

17
00:01:40.800 --> 00:01:45.920
So the main purpose of this use effect is to be to save the cart is going to be the save the cart.

18
00:01:46.110 --> 00:01:52.200
So we're going to do a use effect where we invoke a function and it's going to be invoked any time the

19
00:01:52.200 --> 00:01:57.480
restaurant changes, the cart changes or the user changes in any of those cases.

20
00:01:57.750 --> 00:02:00.540
We want to invoke the method.

21
00:02:01.170 --> 00:02:08.880
If you have a user and and the user has an ID, then we want to save the cart.

22
00:02:10.080 --> 00:02:17.240
And we want to give it the restaurant, we want to give it the user, the user's ID and the card, so

23
00:02:17.250 --> 00:02:20.980
user ID in this case will save the card.

24
00:02:22.080 --> 00:02:28.320
Now, if we look at this, this isn't really going to do anything for us because we don't really load

25
00:02:28.320 --> 00:02:29.270
the card either.

26
00:02:29.280 --> 00:02:29.620
Right.

27
00:02:29.640 --> 00:02:34.170
If we do this right now, this isn't really going to do anything for us because if we reload.

28
00:02:35.230 --> 00:02:41.380
Lo and behold, empty cart, so we also have to do consed load cart, and that's also going to be an

29
00:02:41.380 --> 00:02:44.290
async method that's going to take in the user ID.

30
00:02:44.980 --> 00:02:52.900
And what it's going to do with that user ID is it's going to invoke a function that is going to say

31
00:02:52.900 --> 00:02:55.600
try catch the same thing we did here.

32
00:02:55.690 --> 00:02:56.920
It's going to try catch.

33
00:02:57.820 --> 00:03:06.040
But what it's going to do is instead of doing this, what it's going to say is const value is equal

34
00:03:06.040 --> 00:03:09.490
to and we're going to grab this over here, a weight.

35
00:03:09.880 --> 00:03:13.140
Instead of setting an item, it's going to get an item.

36
00:03:13.900 --> 00:03:16.300
And so once it gets that item, it has a value.

37
00:03:17.260 --> 00:03:28.930
Now, if value is not equal to null, then what we want to do is say const restaurant as arrests and

38
00:03:28.960 --> 00:03:36.990
as Oreste rather and cart as CRT is equal to Jason that parts of the value.

39
00:03:37.480 --> 00:03:39.550
And this way we get back our cart.

40
00:03:40.330 --> 00:03:47.460
And so then we set the restaurant as the artist and we set the cart as the CRT.

41
00:03:48.100 --> 00:03:52.170
And by doing this we now are enabled to load the cart.

42
00:03:52.990 --> 00:03:55.390
So but how to how and when do we load the cart?

43
00:03:55.420 --> 00:03:59.470
Well, we'll load the cart any time the user changes.

44
00:03:59.680 --> 00:04:02.500
Any time the user changes, we'll do load cart.

45
00:04:03.420 --> 00:04:09.390
And by doing that, we now enable ourselves to load it, oh, looks like we already have one that does

46
00:04:09.390 --> 00:04:09.750
this.

47
00:04:10.260 --> 00:04:14.220
Any time the user changes weight, what is what is missing?

48
00:04:14.610 --> 00:04:16.529
Oh, it's missing Kaat.

49
00:04:16.890 --> 00:04:22.650
Well we don't need to pass kaat or user id into this our cart or a restaurant rather.

50
00:04:22.650 --> 00:04:26.570
We don't need to pass either of those into here, we just need to pass our user ID.

51
00:04:26.880 --> 00:04:28.930
That's why our affect hook was complaining.

52
00:04:29.490 --> 00:04:32.850
So now if we go into here, well nothing saved.

53
00:04:32.850 --> 00:04:36.630
If we save right now it's loaded and if we reload.

54
00:04:37.580 --> 00:04:43.700
Now we can see our cart states and we know that it's going to stay because if we go in here and we do

55
00:04:43.700 --> 00:04:51.080
this and then we add multiple items to our checkout flow, if we go over here and we reload.

56
00:04:52.180 --> 00:04:59.230
Well, there we go, if we go in here, check out is still in the state it was before, so very simple,

57
00:04:59.230 --> 00:05:07.240
very effective way to persist, the state of the cart for us in the case where the user wants to come

58
00:05:07.240 --> 00:05:09.310
back to his or her order.

