WEBVTT
1
00:00:00.660 --> 00:00:06.330
Now, you may have asked yourself, Mo, why when I'm over here and I do this, does this happen?

2
00:00:07.140 --> 00:00:14.280
Well, that's because the browser, when you surf to this URL now, does a get request that get request

3
00:00:14.280 --> 00:00:16.890
does not send the payload with it.

4
00:00:16.890 --> 00:00:22.530
It does not, in fact, allow the the server a body.

5
00:00:22.530 --> 00:00:22.830
Right.

6
00:00:22.860 --> 00:00:24.600
No bodies being sent with this request.

7
00:00:24.630 --> 00:00:27.210
So this these two lines already fail.

8
00:00:27.420 --> 00:00:27.810
Right.

9
00:00:28.050 --> 00:00:29.010
This doesn't exist.

10
00:00:29.310 --> 00:00:31.770
Now, here's where you get into semantic reasoning.

11
00:00:31.920 --> 00:00:35.910
This you URL should never be used to surf directly to.

12
00:00:35.910 --> 00:00:38.460
So we don't really care whether or not you surf to it.

13
00:00:38.790 --> 00:00:45.390
But in the case, like you could make a case where for security purposes or whatnot, you exit out,

14
00:00:45.720 --> 00:00:51.090
get request is being done or what in this particular scenario, we're not really concerned with that.

15
00:00:51.090 --> 00:00:52.710
So we're just going to leave it as is.

16
00:00:52.710 --> 00:00:55.950
And now that we have the body, Tolkan name and the body amount.

17
00:00:56.130 --> 00:00:56.480
Right.

18
00:00:56.520 --> 00:00:58.560
So we know everything about the request.

19
00:00:59.070 --> 00:01:04.050
Well, now we need to do a bit more hooking up.

20
00:01:04.050 --> 00:01:04.440
Right.

21
00:01:05.250 --> 00:01:10.500
And what I mean by that is we need to take the actual data that we have in the UI here and utilize it.

22
00:01:11.780 --> 00:01:15.680
So the first thing we're going to pass in here is the sum that's the first piece of data that we already

23
00:01:15.680 --> 00:01:16.190
know about.

24
00:01:16.700 --> 00:01:19.070
The second piece of data is the name.

25
00:01:19.730 --> 00:01:25.130
The name is something that we know now because it's being used in the state.

26
00:01:25.700 --> 00:01:32.330
And the third piece of data that we need is the CONSED, the card that was added set card.

27
00:01:32.930 --> 00:01:35.660
And for this, we don't really have anything yet.

28
00:01:36.150 --> 00:01:41.180
We haven't really hooked up our card to be available.

29
00:01:41.750 --> 00:01:48.650
So if if we do not have a card or the card does not have an I.D. because that is the token cardboard

30
00:01:48.650 --> 00:01:56.630
ID when we add the card, if we don't don't have either of those, we're going to say return exit out

31
00:01:56.630 --> 00:01:57.200
of this function.

32
00:01:57.200 --> 00:02:01.040
We're going to say cancel that log something error.

33
00:02:01.640 --> 00:02:02.030
Right.

34
00:02:02.300 --> 00:02:03.050
Or some error.

35
00:02:03.770 --> 00:02:06.250
So we're going to handle this case a bit later on.

36
00:02:06.830 --> 00:02:11.790
And in order for us to do that now, we need to get this card.

37
00:02:11.810 --> 00:02:13.610
So how are we going to set the card?

38
00:02:14.630 --> 00:02:18.860
Well, first of all, everything happens in a flow, so first we fill in the name and then we fill in

39
00:02:18.860 --> 00:02:24.940
the card and on the card credit card input, we need to add an on success hook.

40
00:02:25.310 --> 00:02:28.780
And that Unsuccess Hook is what's going to give us our card back.

41
00:02:28.790 --> 00:02:33.230
It's it's a function that's going to be invoked, that's going to return us our card, and then we're

42
00:02:33.230 --> 00:02:35.990
going to say set card card.

43
00:02:36.740 --> 00:02:44.250
And that is exactly what is going to allow us to get the card back from the credit card input.

44
00:02:44.630 --> 00:02:48.110
Now, we could also simplify this and just say such card.

45
00:02:49.330 --> 00:02:53.140
OK, so that way, if we call it, it just automatically sets.

46
00:02:53.980 --> 00:03:01.210
Now, if we go to credit card input, right, the credit card input component over here, we need to

47
00:03:01.210 --> 00:03:01.750
check.

48
00:03:02.570 --> 00:03:07.550
If you are incomplete, we're not going to do anything with you, but if you are complete.

49
00:03:08.710 --> 00:03:11.770
We're going to call, if so, if you are not.

50
00:03:12.860 --> 00:03:19.040
If it is not is incomplete, right, we have all of the information we've already structured a very

51
00:03:19.040 --> 00:03:21.710
nice card over here and we get the info back.

52
00:03:22.310 --> 00:03:25.670
So if you are not incomplete, we're going to do the Carter request.

53
00:03:26.150 --> 00:03:31.670
And then when the info comes back, we're going to do on success of the info and on success is going

54
00:03:31.670 --> 00:03:32.990
to be pulled from over here.

55
00:03:33.860 --> 00:03:35.360
On success.

56
00:03:36.490 --> 00:03:42.310
And so by doing this now, we've hooked up the info that comes back from the card token to be pushed

57
00:03:42.310 --> 00:03:48.970
into Unsuccess and then that goes into the checkout screen, that's going to be calling set card, that's

58
00:03:48.970 --> 00:03:52.740
going to be going into this function.

59
00:03:53.290 --> 00:03:58.750
But now the ENPI actually needs to be triggered at a certain point because on Mount of our component

60
00:03:58.750 --> 00:03:59.770
doesn't really make sense.

61
00:03:59.770 --> 00:04:02.040
That's not going to allow us time to fill in things.

62
00:04:02.500 --> 00:04:10.600
So we're going to hook up our payment button to the on pay function and that's going to allow us to

63
00:04:10.840 --> 00:04:13.840
implement this flow properly.

64
00:04:14.410 --> 00:04:16.570
OK, so now if we fill in Mo Beenie.

65
00:04:17.459 --> 00:04:24.150
And then if we fill in for two, four to four to four to four to four to four, two and so forth.

66
00:04:25.090 --> 00:04:27.700
And then we press play what's going to happen?

67
00:04:30.410 --> 00:04:32.750
It's called pay, right?

68
00:04:34.140 --> 00:04:37.110
But it's still sending one to three.

69
00:04:38.360 --> 00:04:41.220
Oh, that's not good.

70
00:04:41.360 --> 00:04:48.020
We actually didn't give it the card, so let's go ahead and give it the card dot I.D. and that's going

71
00:04:48.020 --> 00:04:50.200
to be our payment token.

72
00:04:50.870 --> 00:04:53.910
So if we do that now and then we press pay.

73
00:04:54.560 --> 00:04:55.200
There we go.

74
00:04:55.220 --> 00:04:57.710
Now we're getting a token token Bobigny.

75
00:04:58.340 --> 00:04:59.840
But for some reason.

76
00:05:02.710 --> 00:05:04.160
Is not being sent.

77
00:05:04.900 --> 00:05:06.850
Why isn't the sun being sent?

78
00:05:07.750 --> 00:05:09.310
That's very odd.

79
00:05:09.760 --> 00:05:12.990
Well, obviously it is being sent in space.

80
00:05:14.050 --> 00:05:16.660
We are not actually recording it.

81
00:05:16.660 --> 00:05:18.040
So body that amount.

82
00:05:18.400 --> 00:05:22.960
And if we do that and then we hit pay, now we're getting twelve ninety nine.

83
00:05:23.350 --> 00:05:31.360
So we're getting all our information back now from our UI to go to our actual service.

84
00:05:32.330 --> 00:05:39.110
It's that easy now, we're not handling any of the information that comes back to us, but now that

85
00:05:39.110 --> 00:05:43.510
we're sending information to the server, we can try the process of payment.

86
00:05:43.520 --> 00:05:45.380
So let's see what that looks like.

