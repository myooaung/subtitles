WEBVTT
1
00:00:00.360 --> 00:00:08.160
As promised, we're going to be looking at the return data, the return data being the data that is

2
00:00:08.160 --> 00:00:10.610
being returned by the API.

3
00:00:11.250 --> 00:00:19.530
So if we look over here right in the mock folder and we look just at the data that is being returned,

4
00:00:20.250 --> 00:00:23.490
we can see here that everything is underscored.

5
00:00:23.500 --> 00:00:28.350
So, for instance, we have viewport, location, geometry, northeast lot land.

6
00:00:28.350 --> 00:00:29.460
That all looks OK.

7
00:00:29.850 --> 00:00:36.870
But as we go down, when it's a multiple word thing like opening hours, it's underscored.

8
00:00:37.110 --> 00:00:39.120
Open now is underscored.

9
00:00:39.360 --> 00:00:46.440
Placide is underscored, HTML attributes, photo references, all of this stuff that is multi word user

10
00:00:46.440 --> 00:00:47.240
rating total.

11
00:00:47.700 --> 00:00:48.910
It's all underscored.

12
00:00:49.560 --> 00:00:55.680
And so this is not something that we usually want to use in JavaScript because we don't want to do something

13
00:00:55.680 --> 00:01:01.140
like, well, you know, result dot and then user underscore rating underscore total.

14
00:01:01.530 --> 00:01:03.590
We like Camil case more.

15
00:01:04.050 --> 00:01:09.450
So one thing that we prefer is, for instance, something like this user rating total.

16
00:01:11.140 --> 00:01:17.080
Now, I hear you thinking, Mo, how are we supposed to adapt what comes back from here?

17
00:01:17.960 --> 00:01:21.650
To match that case for the underscore words.

18
00:01:22.760 --> 00:01:29.270
Well, that's a good question, and for that, what we need to do is we need to use a NPM package.

19
00:01:30.270 --> 00:01:40.220
And it's called Camels and Camels is a package that recursively transforms keys to be camel case.

20
00:01:40.620 --> 00:01:47.730
So camels, for instance, if you took this object fee, FIFO and poop and you camels, it it's going

21
00:01:47.730 --> 00:01:50.100
to return you fee FIFO and bee poop.

22
00:01:50.250 --> 00:01:56.550
So it takes all of the underscored words and all of the words and all of the words that are broken up

23
00:01:56.550 --> 00:02:00.430
by slashes and dots and it caramelizes them for us.

24
00:02:01.230 --> 00:02:02.340
So how do we do this?

25
00:02:03.120 --> 00:02:07.080
Well, the first thing we need to do is we need to go to our terminal.

26
00:02:08.199 --> 00:02:09.250
And we need to do.

27
00:02:10.389 --> 00:02:11.320
Something called.

28
00:02:12.180 --> 00:02:14.550
We need to create a new terminal.

29
00:02:15.660 --> 00:02:23.890
And we need to say yarn and canalis, and so that's going to allow us to use this package.

30
00:02:23.910 --> 00:02:24.270
Right.

31
00:02:25.710 --> 00:02:29.190
And the way that we use it is we import camels.

32
00:02:30.090 --> 00:02:31.500
From Canalis.

33
00:02:33.030 --> 00:02:41.340
And then we can just wrap our result in it, so if we wrap our result in it, what we're going to see

34
00:02:41.340 --> 00:02:48.060
here, if we go to our terminal and we go to node, what we'll see is will actually be adapting the

35
00:02:48.060 --> 00:02:50.880
information to be.

36
00:02:53.580 --> 00:03:00.960
So if we can't hold that log, our result here, we seem to be getting an error in the render method

37
00:03:00.960 --> 00:03:03.180
of this, but.

38
00:03:04.090 --> 00:03:05.770
If we quickly open our.

39
00:03:07.150 --> 00:03:11.380
And reload, what we're going to see here is our returned information, right?

40
00:03:13.530 --> 00:03:19.620
This is after we ran camels, and what we can see is opening hours is now camel keest open now is now

41
00:03:19.620 --> 00:03:25.080
camel KAIST and all of this information is now camel user rating total.

42
00:03:25.320 --> 00:03:28.950
If we compare that to what we were seeing in our mock data.

43
00:03:29.100 --> 00:03:29.490
Right.

44
00:03:29.880 --> 00:03:33.720
In, for instance, anthropologists, if we look at that and compare it.

45
00:03:34.560 --> 00:03:38.750
User rating total is not supposed to be like this.

46
00:03:38.790 --> 00:03:42.870
So if we go look, you know, we have price level plus code.

47
00:03:45.890 --> 00:03:53.180
Open now opening hours, so all of that stuff is being translated, right, user reading total is normally

48
00:03:53.180 --> 00:03:56.920
like underscored and now we see that it is Camil Keast.

49
00:03:57.290 --> 00:04:02.840
So this is an optimization that allows us to create consistency for the information coming in, because

50
00:04:02.840 --> 00:04:06.920
you never know how your API is returning new data on the back end.

51
00:04:07.160 --> 00:04:08.510
They may have different principles.

52
00:04:08.510 --> 00:04:09.680
They may use underscores.

53
00:04:09.680 --> 00:04:10.640
They may use dots.

54
00:04:11.000 --> 00:04:15.200
You don't really know how they're going to return you the information, but you want to create consistency

55
00:04:15.200 --> 00:04:16.130
for your application.

56
00:04:16.140 --> 00:04:22.190
You don't want to be going through your application, doing results, dot and then one epis returning

57
00:04:22.190 --> 00:04:28.460
you something with underscores user total reading and another API is returning you like result to that

58
00:04:28.460 --> 00:04:34.870
user total with an uppercase you and another APIs returning, you want everything to be the same.

59
00:04:35.240 --> 00:04:37.250
So that's why we use canalis.

60
00:04:38.060 --> 00:04:48.320
And a way that we implement this is we usually have something called a restaurant's trance form function

61
00:04:48.650 --> 00:04:53.080
and that's going to take the result and it's going to do things to the results.

62
00:04:53.330 --> 00:04:58.940
So what it'll do to the result in this case is it will return canalis of results.

63
00:04:59.210 --> 00:05:09.500
And the way that we do that is usually we take this right and we do a dot then and we say restaurant

64
00:05:09.500 --> 00:05:10.160
transform.

65
00:05:10.910 --> 00:05:14.150
And then we can do that then and we can say transformed.

66
00:05:17.230 --> 00:05:19.450
And we can say console log.

67
00:05:20.310 --> 00:05:27.030
Of the transformed response, and then we'll have the transformed response properly transformed for

68
00:05:27.030 --> 00:05:28.560
us in the terminal.

69
00:05:30.110 --> 00:05:37.070
And so that allows us to kind of create this chain of events that is happening, so when we do our restaurant

70
00:05:37.070 --> 00:05:40.450
requests, when it comes back, hey, transform it, caramelize it.

71
00:05:40.730 --> 00:05:46.460
And then once we have that, we have our transformed response and we can start working with that transformed

72
00:05:46.460 --> 00:05:50.780
response in case we want it to change any properties or do anything special to it.

73
00:05:51.080 --> 00:05:55.130
But if we wanted to do anything special to the results, usually what we would do is we would catalyze

74
00:05:55.130 --> 00:06:00.590
it ahead of time and then we would kind of transform it that way ahead.

75
00:06:00.800 --> 00:06:03.530
So we would do something like, OK, const.

76
00:06:04.420 --> 00:06:11.020
New result, right, is equal to families results and then we would say return new results and we would

77
00:06:11.020 --> 00:06:18.310
potentially like say, OK, well, new results dot some extra property is equal to new.

78
00:06:18.550 --> 00:06:18.910
Right.

79
00:06:18.910 --> 00:06:21.040
We could add properties, we could remove properties.

80
00:06:21.040 --> 00:06:26.260
We could do all types of things here in this transform function to make sure that the response that

81
00:06:26.260 --> 00:06:29.330
we're getting back is going to be what we require.

82
00:06:29.950 --> 00:06:33.850
So in the next video, we'll look at what additional properties we need.

