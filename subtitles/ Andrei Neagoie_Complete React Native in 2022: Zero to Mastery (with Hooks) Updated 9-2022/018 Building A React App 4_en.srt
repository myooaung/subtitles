1
00:00:01,130 --> 00:00:01,850
Welcome back.

2
00:00:02,270 --> 00:00:08,930
In this video, we're going to talk a bit about something advanced and we haven't covered it much in

3
00:00:08,930 --> 00:00:12,170
this course and we definitely will in the next section.

4
00:00:12,290 --> 00:00:17,630
But I want to get started with it so that even though it might be new and confusing at first, by the

5
00:00:17,630 --> 00:00:21,530
time we get into the next section, we'll come back and review exactly what we're doing.

6
00:00:22,670 --> 00:00:30,380
I want to make this app more realistic in a real life app, we wouldn't necessarily have these robots

7
00:00:30,770 --> 00:00:36,320
ridden like I have here and robots, dogs, I've just created this file.

8
00:00:36,320 --> 00:00:41,660
But in real life, well, we're not manually entering users.

9
00:00:42,290 --> 00:00:45,650
We would use something like an API.

10
00:00:46,680 --> 00:00:47,880
And what that means?

11
00:00:47,910 --> 00:00:56,400
Well, we want when this website gets loaded to make a request somewhere out there in the world of the

12
00:00:56,400 --> 00:01:01,560
Internet and grab these robots from a server.

13
00:01:02,870 --> 00:01:09,470
Well, we can actually do that we have over here something called Jason Placeholder, and you don't

14
00:01:09,470 --> 00:01:17,330
need to worry too much about it, but they actually have a really nice y'all that we can use and they

15
00:01:17,330 --> 00:01:20,780
return what we need a name and I.D. and a username.

16
00:01:20,930 --> 00:01:23,510
The rest of the information, well, we don't really need it.

17
00:01:23,510 --> 00:01:28,070
But as you can see, just by typing in this, your URL.

18
00:01:29,080 --> 00:01:35,230
I get this, so using this, we're going to make our app a little bit more realistic.

19
00:01:39,710 --> 00:01:44,080
If I close my successful, since we don't need them anymore.

20
00:01:45,940 --> 00:01:47,980
And let's suppose the rest of the tabs as well.

21
00:01:49,820 --> 00:01:58,760
Looking at this app component, we see that it is what we call a smart component, unlike the search

22
00:01:58,760 --> 00:02:04,550
box or car list that are just pure functions, as you can see here.

23
00:02:05,890 --> 00:02:08,500
APTA James actually has state.

24
00:02:09,560 --> 00:02:16,550
A piece of data that describes our app and because they have stayed, we call them smart components.

25
00:02:17,660 --> 00:02:25,910
And smart companies tend to have this class syntax now in real life, when we start up this app, this

26
00:02:25,910 --> 00:02:31,060
robots would actually be an empty array because there's nothing there.

27
00:02:31,070 --> 00:02:32,870
We haven't grabbed the user's.

28
00:02:33,290 --> 00:02:35,420
So most likely if I save this.

29
00:02:37,900 --> 00:02:44,710
Robots wouldn't display until I load the website, and then as soon as the website gets loaded, I ask

30
00:02:44,710 --> 00:02:47,400
for the user's from somewhere over the Internet.

31
00:02:49,940 --> 00:02:52,310
Somewhere, hopefully here.

32
00:02:53,370 --> 00:02:54,150
So let's do that.

33
00:02:56,490 --> 00:03:03,840
React comes with a few other things inside of components that we can use, and they're called.

34
00:03:04,780 --> 00:03:07,210
Life cycle methods.

35
00:03:10,090 --> 00:03:12,160
And it looks something like this.

36
00:03:13,870 --> 00:03:14,990
Don't get too overwhelmed.

37
00:03:15,280 --> 00:03:20,590
These are just methods that we can use in here that comes with react.

38
00:03:21,800 --> 00:03:29,060
And they're called Life-cycle Hooks, because what they do is if we run these, it will automatically

39
00:03:29,060 --> 00:03:32,580
trigger when this app gets loaded on the website.

40
00:03:32,840 --> 00:03:33,460
Let me explain.

41
00:03:34,620 --> 00:03:41,040
We see that we have three sections we have mounting, updating and mounting.

42
00:03:42,690 --> 00:03:50,310
The way we act works is we do something called mounting when I click refresh here, the app component.

43
00:03:51,710 --> 00:03:54,890
This component right here gets mounted.

44
00:03:56,350 --> 00:04:04,900
Into the document with the idea of route, if we go back to our index HTML file, well.

45
00:04:06,230 --> 00:04:14,930
Our Web page is nothing but a div with an idea of root when we say we mount a component, we're replacing

46
00:04:14,930 --> 00:04:19,640
this and adding our entire app that's mounting.

47
00:04:20,640 --> 00:04:22,560
So mounting is the start of the app.

48
00:04:24,570 --> 00:04:32,100
Now, with mounting these are the life cycle hooks that get hit and they're in order, so the first

49
00:04:32,100 --> 00:04:33,210
thing is it checks.

50
00:04:33,390 --> 00:04:36,510
Hey, does this component have a constructor wall?

51
00:04:36,510 --> 00:04:37,770
Does I have a constructor?

52
00:04:37,860 --> 00:04:38,280
Yes.

53
00:04:38,310 --> 00:04:40,530
OK, then run this piece of code.

54
00:04:41,040 --> 00:04:43,740
Does it have component Wilmont?

55
00:04:45,620 --> 00:04:46,560
No, it doesn't.

56
00:04:46,670 --> 00:04:48,830
Then ignore it, does it have render?

57
00:04:49,980 --> 00:04:57,340
Yes, it has rencher run this does it have component did mount no, it doesn't have component amount.

58
00:04:57,360 --> 00:05:00,960
Ignore it and it just runs through this every time.

59
00:05:01,750 --> 00:05:07,350
It also has something called updating, and that is whenever a component changes.

60
00:05:08,130 --> 00:05:10,020
For example, when we had the list.

61
00:05:10,710 --> 00:05:13,500
Well, every time I type something.

62
00:05:14,760 --> 00:05:23,530
The Carlist component gets rendered because we have new information, the function receives new inputs.

63
00:05:23,940 --> 00:05:26,330
Same with the input component.

64
00:05:27,120 --> 00:05:30,330
So again, within those components, if we wanted to.

65
00:05:32,530 --> 00:05:38,170
We can add component will receive props, should component update, so on and so forth.

66
00:05:39,220 --> 00:05:48,850
And finally, with and mounting is when a component is removed from a page, for example, if we change

67
00:05:49,240 --> 00:05:57,640
to a different page here, the component will unmount, the app component will get deleted from the

68
00:05:57,640 --> 00:05:57,950
page.

69
00:05:58,270 --> 00:06:05,350
These are called lifecycle hooks because they get run every time a component does something and it comes

70
00:06:05,350 --> 00:06:05,950
with react.

71
00:06:06,610 --> 00:06:12,370
So you can just put them in into your class component and they will automatically get triggered.

72
00:06:12,400 --> 00:06:13,870
You don't have to worry about calling them.

73
00:06:15,080 --> 00:06:15,960
Let me demonstrate this.

74
00:06:17,760 --> 00:06:21,840
We want to use component did mount, which gets called out to render.

75
00:06:22,810 --> 00:06:28,930
This says that, yes, the app component is mounted on the Web page and it's render that is it's displaying

76
00:06:28,930 --> 00:06:29,350
something.

77
00:06:30,700 --> 00:06:32,440
Well, we can do that by saying.

78
00:06:33,930 --> 00:06:34,800
Component.

79
00:06:36,490 --> 00:06:38,200
Did mount.

80
00:06:40,400 --> 00:06:46,070
And because this is part of react, notice that I'm not using air functions here.

81
00:06:48,940 --> 00:06:52,210
Now, within component amount, I can say console, dot, log.

82
00:06:55,390 --> 00:06:56,590
If I refresh this.

83
00:06:58,420 --> 00:07:02,530
And open up the console, you'll see that I have check.

84
00:07:03,360 --> 00:07:05,710
If I refresh, there you go.

85
00:07:05,760 --> 00:07:10,560
That was really quick, but you see that that gets called automatically, even though I haven't said

86
00:07:10,560 --> 00:07:10,980
anything.

87
00:07:12,230 --> 00:07:19,310
Using this, we can do something interesting now when component does mount, I can say this dot set

88
00:07:19,610 --> 00:07:20,210
St..

89
00:07:21,680 --> 00:07:27,650
To now have robots to the robots that we get from JavaScript file.

90
00:07:32,590 --> 00:07:33,970
If I do this and save.

91
00:07:36,370 --> 00:07:38,310
Let's refresh and see what happens.

92
00:07:39,910 --> 00:07:42,040
It's really, really fast, but you see that.

93
00:07:43,120 --> 00:07:50,200
We're getting our robots, I am saying run the constructor with an empty array just to show you the

94
00:07:50,200 --> 00:07:52,260
order of execution here.

95
00:07:52,630 --> 00:07:54,820
If I had a console log and we'll just say.

96
00:07:56,230 --> 00:07:57,130
One here.

97
00:08:01,100 --> 00:08:03,260
We'll say to you here.

98
00:08:04,840 --> 00:08:06,220
And we'll just say.

99
00:08:07,070 --> 00:08:09,620
Three, if I say this.

100
00:08:11,290 --> 00:08:12,740
And open up the console.

101
00:08:13,360 --> 00:08:15,760
I have one, three, two, three.

102
00:08:20,090 --> 00:08:21,290
We have one.

103
00:08:25,380 --> 00:08:27,720
Then three, which is render.

104
00:08:29,360 --> 00:08:38,480
Then, too, which is component did mount and then three runs again, actually changed this to actual

105
00:08:38,480 --> 00:08:43,220
words so that you see better what is actually happening.

106
00:08:45,950 --> 00:08:47,930
If we save and refresh.

107
00:08:49,000 --> 00:08:54,670
Look at that, we have constructor that Arun's first, then render, then component did mount just like

108
00:08:55,420 --> 00:08:56,110
this order.

109
00:08:57,110 --> 00:09:02,270
But we now also have render why did render run again.

110
00:09:03,490 --> 00:09:13,090
Well, if you remember, we created the constructor, we ran Brender, and then we updated the state

111
00:09:13,270 --> 00:09:19,600
and component did mount, so because we updated the state every time the state changes.

112
00:09:20,840 --> 00:09:26,480
Remember, we go to the life cycle, it's updating Iran's render again.

113
00:09:27,790 --> 00:09:38,320
So because it goes from an empty array to a robot's list, render gets rerun and the virtual DOM notices

114
00:09:38,320 --> 00:09:43,420
that there's a difference and repaints our Web browser to include the robots.

115
00:09:46,730 --> 00:09:50,090
Knowing what we just did, we can remove this.

116
00:09:52,680 --> 00:09:59,460
And finally, make this more realistic, instead of using the robots file, I'm actually going to remove

117
00:09:59,460 --> 00:09:59,820
this.

118
00:10:01,610 --> 00:10:08,640
And in here, I'm going to show you a cool way to grab this list from here.

119
00:10:09,050 --> 00:10:10,340
I'm going to copy the link.

120
00:10:12,440 --> 00:10:18,570
And I'm going to say fetch, which we'll learn about in the next section.

121
00:10:18,620 --> 00:10:21,080
We're just saying make this HTTP request.

122
00:10:22,740 --> 00:10:29,970
And Fetch receives this again, we're just saying, go to here, dot, then.

123
00:10:31,600 --> 00:10:33,730
This is going to receive a response.

124
00:10:38,730 --> 00:10:44,360
And this response is, well, this part is a little tricky, you just have to get used to it.

125
00:10:46,520 --> 00:10:53,120
Jason, we just have to convert the response into, again, something that we'll talk about in the next

126
00:10:53,120 --> 00:10:56,890
session for now, just you can copy and paste this follow along.

127
00:10:56,900 --> 00:10:59,050
We'll come back to this and explain what's happening.

128
00:10:59,570 --> 00:11:04,960
And from here, let's add this on a new line so we know exactly what's happening.

129
00:11:06,740 --> 00:11:14,480
We'll say then robots or we can say users, because in this case, we're getting users and in here we

130
00:11:14,480 --> 00:11:14,990
can say.

131
00:11:18,320 --> 00:11:25,490
This says state robots to equal users, and we have to make sure that we return this.

132
00:11:26,780 --> 00:11:27,260
Safe.

133
00:11:27,830 --> 00:11:28,700
Let's see if that works.

134
00:11:30,210 --> 00:11:31,890
Look at that, let's refresh.

135
00:11:33,120 --> 00:11:35,250
And you see that little lag.

136
00:11:40,600 --> 00:11:46,440
So in here, we can actually make this smaller and reduce it to one line.

137
00:11:47,230 --> 00:11:48,610
We should remember how to do that.

138
00:11:50,230 --> 00:11:52,690
And we see that we're simply.

139
00:11:55,270 --> 00:11:56,350
Updating state.

140
00:11:59,230 --> 00:12:07,690
After we fetch, so we fetch whatever the users are, we're getting a response, we're doing some magic

141
00:12:07,690 --> 00:12:13,480
here with Jason, which we'll talk about later, and then we're getting the users and updating the users

142
00:12:13,480 --> 00:12:15,130
with set St..

143
00:12:16,680 --> 00:12:18,150
So if I refresh again.

144
00:12:20,890 --> 00:12:26,380
If I don't do this, let's say I just here don't do anything and return an empty object.

145
00:12:28,240 --> 00:12:36,260
You see that I don't receive the robots, I only receive the robots after I update with these users.

146
00:12:37,000 --> 00:12:37,810
How cool is that?

147
00:12:42,100 --> 00:12:48,580
All right, that was a lot, and this probably looks pretty scary to make you feel a little bit more

148
00:12:48,580 --> 00:12:54,060
comfortable because I'm using fetch and there's nothing attached to it.

149
00:12:54,100 --> 00:12:57,860
Does this mean that it's part of the window object?

150
00:12:58,210 --> 00:12:58,690
Let's check.

151
00:12:59,410 --> 00:13:05,610
If I open up the console and I do window dot fetch.

152
00:13:06,340 --> 00:13:07,000
Yeah, look at that.

153
00:13:07,210 --> 00:13:12,090
Fetch is a method on the window object.

154
00:13:12,100 --> 00:13:13,590
It comes with all browsers.

155
00:13:13,600 --> 00:13:16,840
Now it is a tool for us to make requests.

156
00:13:17,940 --> 00:13:26,220
To service and as you can see, this is a server that returns for us when we do slash users, a list

157
00:13:26,220 --> 00:13:30,240
of users that we can use, which is perfect for our wrap.

158
00:13:35,130 --> 00:13:38,940
And finally, you're wondering what if this was really slow?

159
00:13:38,970 --> 00:13:43,930
What if this took, I don't know, five seconds and we had a whole ton of users?

160
00:13:44,730 --> 00:13:50,010
Well, in that case, you can do something like an if statement if.

161
00:13:51,660 --> 00:13:54,570
Robots that lenth is.

162
00:13:56,080 --> 00:13:56,630
Zero.

163
00:13:56,890 --> 00:13:59,380
In that case, we can return.

164
00:14:00,660 --> 00:14:03,480
An H1 that says loading.

165
00:14:09,520 --> 00:14:13,010
Or else we can just say return.

166
00:14:15,760 --> 00:14:20,570
This, again, is just JavaScript, that's a beauty and the.

167
00:14:21,920 --> 00:14:28,310
Oh, and you see, how I get robots is not defined because it's this DOD state robots, again, we're

168
00:14:28,310 --> 00:14:29,620
referring to the state of the app.

169
00:14:30,200 --> 00:14:36,350
And here, if I refresh, let's just say that we're not updating the state and I'm going to just return

170
00:14:36,350 --> 00:14:37,250
an empty object.

171
00:14:41,250 --> 00:14:42,150
Well, in that case.

172
00:14:44,090 --> 00:14:45,740
I just get loading.

173
00:14:48,620 --> 00:14:49,310
Very cool.

174
00:14:50,150 --> 00:14:57,680
And this is how you build real apps with react, you have a loading bar they can just add here, make

175
00:14:57,680 --> 00:14:59,720
requests on component did mount.

176
00:15:00,930 --> 00:15:04,050
And interact with component's.

177
00:15:07,810 --> 00:15:10,810
You know what we have ourselves here at?

178
00:15:13,250 --> 00:15:18,800
There is one last thing I'm going to show you with React, and you've learned the basics and react,

179
00:15:18,800 --> 00:15:21,960
you can take this now to build any app that you want.

180
00:15:22,190 --> 00:15:27,670
So one more thing to go, one more little piece to get our react knowledge completed.

181
00:15:28,400 --> 00:15:30,140
I'll see in the next one by.

