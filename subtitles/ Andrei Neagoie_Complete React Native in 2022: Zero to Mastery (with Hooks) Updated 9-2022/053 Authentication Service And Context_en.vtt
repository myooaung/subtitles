WEBVTT
1
00:00:00.790 --> 00:00:06.670
Now we're getting to the bread and butter of authentication, we've proven that once we give a sign

2
00:00:06.670 --> 00:00:12.190
in with email and password of a correct email and a correct password, we're able to set or is authenticated

3
00:00:12.190 --> 00:00:16.390
flagged a true because we're reaching the DOT then statement that has the user object.

4
00:00:16.990 --> 00:00:21.850
Now that we've proven that, well, this doesn't scale very well, this won't actually get us anywhere.

5
00:00:22.300 --> 00:00:27.040
So what we want to do is we want to remove this and we want to build an infrastructure that's going

6
00:00:27.040 --> 00:00:31.450
to last the test of time and be able to scale and potentially be able to change.

7
00:00:31.900 --> 00:00:34.350
So you guessed that we're going to need a service.

8
00:00:34.660 --> 00:00:36.730
So let's create a new folder authentication.

9
00:00:37.090 --> 00:00:41.980
And in that authentication folder, we're going to create a new file authentication service.

10
00:00:42.250 --> 00:00:50.740
DARGIS This file is going to be the entry point for all of the logic that goes into the service.

11
00:00:50.740 --> 00:00:52.060
And it's going to be very simple.

12
00:00:52.180 --> 00:00:57.940
It's going to be a light wrapper around the firebase method that we just called, which was the login

13
00:00:57.940 --> 00:00:58.480
request.

14
00:00:59.110 --> 00:01:02.800
And that login request is going to look a little something like this.

15
00:01:03.100 --> 00:01:08.350
We're going to create a function const login request where we have an email and a password, and then

16
00:01:08.350 --> 00:01:11.020
we're going to do Firebase thought Auth Sinon with email and password.

17
00:01:11.020 --> 00:01:13.120
So it's a light wrapper around just it.

18
00:01:13.450 --> 00:01:16.150
But the bread and butter of this is going to be the context.

19
00:01:16.220 --> 00:01:22.330
So when we create the context, authentication context, which is what we want to do is we want to do

20
00:01:22.330 --> 00:01:23.800
the same thing that we've always done.

21
00:01:24.580 --> 00:01:29.470
We want to import the user state and the create context with react.

22
00:01:29.830 --> 00:01:34.090
And we're also going to import Firebase because we may need a function from it at some point.

23
00:01:34.480 --> 00:01:36.290
So let's just set the scene here.

24
00:01:36.820 --> 00:01:42.820
Now, if we do export CONSED off context, authentication context and then we do an expert course of

25
00:01:42.820 --> 00:01:48.670
the authentication context provider, what we know is that what we need to return in order for our context

26
00:01:48.670 --> 00:01:53.320
to share it state is the authentication context thought provider.

27
00:01:54.700 --> 00:02:01.930
And if we if we close that off, what we can see here is that we're going to need to return the children.

28
00:02:02.110 --> 00:02:04.480
So let's just quickly grab those off the props.

29
00:02:05.970 --> 00:02:12.150
Once we do that, we can save and now we have everything in our authentication context provider in order

30
00:02:12.150 --> 00:02:14.370
for it to wrap, but it doesn't have any state yet.

31
00:02:14.670 --> 00:02:17.650
So what do we need to return as the value to every function?

32
00:02:18.090 --> 00:02:22.590
Well, what we need to return is the user.

33
00:02:23.130 --> 00:02:26.280
Well, we're obviously going to have a user object at some point.

34
00:02:26.280 --> 00:02:28.320
We're going to have to return, whether it's loading or not.

35
00:02:28.320 --> 00:02:33.510
We're going to have to return an error and we're going to have to return on login, which is going to

36
00:02:33.510 --> 00:02:34.950
be our login request.

37
00:02:35.500 --> 00:02:39.690
OK, knowing that, what what does this look like?

38
00:02:39.700 --> 00:02:45.960
Well, we're going to have to set up our state in order for us to properly be able to return these values

39
00:02:45.960 --> 00:02:47.550
because they currently don't exist.

40
00:02:48.030 --> 00:02:56.820
And what we what we need to do here is we need to make sure that every single value from the state is

41
00:02:56.820 --> 00:02:58.110
being fulfilled somewhere.

42
00:02:58.410 --> 00:03:04.380
Now we're going to declare a function that's going to be called CONSED on login.

43
00:03:05.100 --> 00:03:09.000
Now, you may be wondering, what does this function going to do and how is it going to work?

44
00:03:09.300 --> 00:03:13.020
Well, first of all, it's going to take in the email and the password.

45
00:03:13.870 --> 00:03:21.940
And it's going to allow us to be able to trigger our log in function, and by being able to trigger

46
00:03:21.940 --> 00:03:29.540
our log in function, we're going to be able to properly log a user in, but also track all of the state.

47
00:03:30.040 --> 00:03:37.690
Now, we're going to need to import our login request from our login service so that authentication

48
00:03:37.810 --> 00:03:43.950
service, now that we have our login request, we can say login requests start then.

49
00:03:44.530 --> 00:03:46.930
Well, first of all, we need to give it the email and password.

50
00:03:47.320 --> 00:03:50.890
Once we give it the email and the password, we can say DOT then.

51
00:03:52.500 --> 00:03:58.530
And when we trigger the method, what we can do is we can say, well, if we are in our dot, then we

52
00:03:58.530 --> 00:03:59.390
have our user.

53
00:03:59.670 --> 00:04:02.370
So let's go ahead and let's set our user to user.

54
00:04:04.380 --> 00:04:08.880
Let's also set is loading to true when we trigger the method.

55
00:04:10.030 --> 00:04:13.750
And let's set up the falls when we succeed.

56
00:04:16.000 --> 00:04:17.260
But what about the case?

57
00:04:17.269 --> 00:04:21.220
Well, then we're going to add a catch and we're going to say when the air comes in.

58
00:04:22.250 --> 00:04:29.270
We're going to set is loading to false and we're going to set the error to the error.

59
00:04:30.370 --> 00:04:36.220
And that's going to allow us the full let's just quickly call this you, not the conflict with the other

60
00:04:36.220 --> 00:04:37.460
scope of user here.

61
00:04:38.290 --> 00:04:43.810
Now, this is going to allow us the full feature fledged functionality of login.

62
00:04:44.710 --> 00:04:51.910
And with that, we can now go and actually build out our login screen because we're passing through

63
00:04:51.910 --> 00:04:58.030
all the values, but first first what we need to do is we need to make sure that the authentication

64
00:04:58.330 --> 00:05:02.630
context provider is available at the top level.

65
00:05:03.190 --> 00:05:11.470
So with that, we can then utilize all of the functionality subsequently in the navigation.

66
00:05:12.360 --> 00:05:16.470
OK, authentication context provider from authentication.

67
00:05:18.400 --> 00:05:23.730
Slash authentication, but context, let's just remove the end here.

68
00:05:24.760 --> 00:05:31.870
And there we go, authentication context is locked and loaded and clearly available because our app

69
00:05:31.870 --> 00:05:32.490
is loading.

70
00:05:32.980 --> 00:05:38.530
And so with that being all set up, let's go ahead and look at how we're going to build out our navigation

71
00:05:38.530 --> 00:05:39.670
for authentication.

