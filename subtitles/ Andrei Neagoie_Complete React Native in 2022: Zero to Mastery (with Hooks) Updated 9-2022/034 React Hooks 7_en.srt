1
00:00:00,520 --> 00:00:01,120
Welcome back.

2
00:00:01,600 --> 00:00:07,420
Let's talk about the second most important hook, and that is the effect hook that comes with react.

3
00:00:08,730 --> 00:00:15,000
Now, the effect of as the ability to perform side effects from a function component.

4
00:00:16,020 --> 00:00:22,200
It serves the same purpose as Component did mount, component did update component will mount and react

5
00:00:22,200 --> 00:00:23,510
classes again.

6
00:00:23,520 --> 00:00:28,680
Remember, the whole idea of Hooke's is to be able to do the things that we were able to do inside of

7
00:00:28,680 --> 00:00:31,860
a class, but this time inside of a function.

8
00:00:33,210 --> 00:00:40,710
And we see here that we can use use a fact, like a function and just tell it what we need to do, so

9
00:00:41,070 --> 00:00:41,940
let's give it a go.

10
00:00:43,420 --> 00:00:51,520
I want to use effect now to replace this component dismount, because right now our robots aren't being

11
00:00:51,520 --> 00:00:51,900
fetched.

12
00:00:51,910 --> 00:00:54,910
Our friends are non-existent because we're not fetching.

13
00:00:55,570 --> 00:00:57,160
So let's do this.

14
00:00:57,160 --> 00:00:58,750
Let's do use effect.

15
00:00:58,750 --> 00:01:05,230
We have that because remember, we've imported over here and use effect is going to.

16
00:01:06,230 --> 00:01:12,260
Run like this and inside of you is the fact we have to tell it, what is the side effect that we want

17
00:01:12,290 --> 00:01:14,300
this function to do?

18
00:01:14,630 --> 00:01:17,600
So I'm going to just create an error function.

19
00:01:18,440 --> 00:01:21,530
And inside of here, we're going to put this.

20
00:01:22,830 --> 00:01:25,620
First call that we had in component did.

21
00:01:27,030 --> 00:01:28,470
So let me just comment that out.

22
00:01:30,680 --> 00:01:32,330
Make sure our spacing is correct.

23
00:01:33,200 --> 00:01:41,660
And inside of here, we now have use effect and this use effect gets run every time the function app

24
00:01:41,840 --> 00:01:42,440
gets run.

25
00:01:45,630 --> 00:01:50,910
So we see over here that we're calling use effect because of the brackets and inside of here we're telling

26
00:01:50,910 --> 00:01:52,590
it, hey, what's the side effect?

27
00:01:54,270 --> 00:01:56,290
So this is something important to remember.

28
00:01:56,970 --> 00:02:03,120
By default, react runs this use affect function after every time it renders.

29
00:02:03,150 --> 00:02:08,460
So when app renders, it's going to run the use effect and whatever is inside of it.

30
00:02:09,820 --> 00:02:14,940
Now, remember, we no longer have this date set state, instead we have what are we changing?

31
00:02:14,950 --> 00:02:16,240
We're changing the robots.

32
00:02:16,540 --> 00:02:19,630
So I can say set robots right over here.

33
00:02:21,620 --> 00:02:24,650
And this set of robots is going to get the new users.

34
00:02:27,040 --> 00:02:31,600
Like that, now let me say this and see if this works, I want to save.

35
00:02:32,470 --> 00:02:37,120
All right, compiled successfully, no errors, but do we get our robot friends?

36
00:02:37,180 --> 00:02:37,780
Let's have a look.

37
00:02:39,660 --> 00:02:44,620
Hey, look at that, we have our robot friends love it.

38
00:02:44,640 --> 00:02:45,720
Can I search through them?

39
00:02:46,830 --> 00:02:53,970
What look at that, so simple and it works just as expected, but let's take a look at the console.

40
00:02:55,080 --> 00:03:01,050
If I open up the console, I don't know if you can tell here, but look how many times this render function

41
00:03:01,050 --> 00:03:01,760
is running.

42
00:03:01,770 --> 00:03:02,670
It just keeps going.

43
00:03:02,670 --> 00:03:05,190
It's actually running in an infinite loop right now.

44
00:03:06,110 --> 00:03:08,740
Hmm, let's take a look and find out why that is.

45
00:03:10,480 --> 00:03:16,960
And this is another tricky part of when people get started with hooks again, it's often commented in

46
00:03:16,960 --> 00:03:20,060
the documentation, which you can read on the React website.

47
00:03:20,980 --> 00:03:26,030
Now, this use effect actually has a second parameter that it receives.

48
00:03:26,080 --> 00:03:30,870
Remember, the first parameter is the function, what it should do when app renders.

49
00:03:31,150 --> 00:03:32,200
And the second one.

50
00:03:35,200 --> 00:03:42,160
If present, which is an optional argument, if present effect will only activate, if the value in

51
00:03:42,160 --> 00:03:45,160
the list changes, what does that mean?

52
00:03:45,520 --> 00:03:49,880
Well, use effect receives an array as a second argument.

53
00:03:50,770 --> 00:03:59,170
Now, before I just show you what this does, let's have a look at why exactly the use effect was running

54
00:03:59,170 --> 00:04:01,290
continuously over and over and over.

55
00:04:02,050 --> 00:04:07,480
Well, if we look at the code, when the app renders it creates the state, right.

56
00:04:07,600 --> 00:04:16,390
That's the initial state and then it runs the use effect because it render so it fetches the users.

57
00:04:17,410 --> 00:04:24,670
And then these users are going to update the state, it's going to update their robot state with the

58
00:04:24,670 --> 00:04:25,510
new users.

59
00:04:25,780 --> 00:04:26,950
So what happens?

60
00:04:27,220 --> 00:04:31,050
Well, new users are being rendered right here.

61
00:04:31,270 --> 00:04:41,520
So the app re renders and says, hey, I got new robots, so I need to render myself to show the robots.

62
00:04:41,680 --> 00:04:50,890
So it renders but remember what I said with use hooks every time the component renders it's going to

63
00:04:50,890 --> 00:04:52,100
run use effect.

64
00:04:52,420 --> 00:04:56,530
So it's going to run fetch again and then it's going to set robots again.

65
00:04:56,650 --> 00:05:00,680
So it has to render and then it goes use effect again.

66
00:05:00,700 --> 00:05:01,520
Then said robots.

67
00:05:01,540 --> 00:05:03,640
So it goes into a continuous loop.

68
00:05:04,690 --> 00:05:11,350
And the trick with the use effect is that if you don't want this to constantly Remender, then you wouldn't

69
00:05:11,350 --> 00:05:14,740
want to set state inside of use effect.

70
00:05:15,580 --> 00:05:21,010
But if we are setting state like we have here, we can give it an optional list.

71
00:05:21,190 --> 00:05:29,500
And this optional list tells us in here, hey, when should I run use effect so you can tell react to

72
00:05:29,500 --> 00:05:37,470
skip applying the effect or the use effect function if certain values haven't changed between referendums.

73
00:05:38,020 --> 00:05:43,690
So in here we say, hey, only one use effect if one of these have changed.

74
00:05:44,640 --> 00:05:52,050
So, for example, if I put in robots here and I save, what will happen if I go back?

75
00:05:53,010 --> 00:05:55,020
Well, you see that it's still running.

76
00:05:55,080 --> 00:05:57,930
Look at that, it's still running, still running, still running.

77
00:05:59,070 --> 00:05:59,790
Why is that?

78
00:06:00,270 --> 00:06:02,190
Well, because robots changes, right?

79
00:06:02,370 --> 00:06:04,470
We always run robots.

80
00:06:04,690 --> 00:06:07,600
So that means, hey, run use effect because robots changed.

81
00:06:07,890 --> 00:06:11,110
Hey, run use effect because robots change.

82
00:06:11,130 --> 00:06:14,910
That's exactly what we're doing before without the second argument.

83
00:06:15,300 --> 00:06:22,770
But in here, if we do, let's say search field only run use effect if search field changes, if I see

84
00:06:22,770 --> 00:06:25,590
this and go back, there you go.

85
00:06:26,220 --> 00:06:29,400
It no longer goes into that infinite loop.

86
00:06:29,640 --> 00:06:31,680
But if the search field changes.

87
00:06:32,740 --> 00:06:37,930
You'll see that we're fetching again, so that's not good either.

88
00:06:38,440 --> 00:06:45,280
Instead, we want to give it an empty list or an empty array, because what does that mean?

89
00:06:45,580 --> 00:06:54,580
It means, hey, only one use effect when this changes, but when the list or the array is empty, it's

90
00:06:54,580 --> 00:06:56,510
a shortcut for doing component Inma.

91
00:06:56,780 --> 00:07:03,760
Hey, just run use effect initially when the component mounts, when app is rendered.

92
00:07:04,920 --> 00:07:10,450
So the component did mount shortcode is essentially this adding an array.

93
00:07:10,680 --> 00:07:13,080
I know it's tricky, maybe doesn't make sense.

94
00:07:13,320 --> 00:07:16,950
It's just a quirk, a thing that you just have to remember with react.

95
00:07:16,950 --> 00:07:19,560
Remember, hooks aren't a JavaScript thing.

96
00:07:19,560 --> 00:07:25,390
It's just a way to use react that you need to get used to, just like you had to get used to this dot

97
00:07:25,620 --> 00:07:26,280
set state.

98
00:07:27,030 --> 00:07:32,740
So by having an empty array here, I now replicated component demand.

99
00:07:33,450 --> 00:07:37,080
So now if we just move console dialogue over here.

100
00:07:40,220 --> 00:07:43,130
Use effect, so inside of use effect.

101
00:07:44,860 --> 00:07:50,980
We'll ignore the warnings for now, if I go back, you'll see that it's an empty array, but as soon

102
00:07:50,980 --> 00:07:51,430
as I.

103
00:07:53,050 --> 00:08:01,420
Type something, no other updates are made because use effect is only run once versus before when we

104
00:08:01,420 --> 00:08:05,560
didn't have anything and you see that it was going like crazy.

105
00:08:07,020 --> 00:08:14,220
So this is a SHAWKI remember, component did mount, we just add the empty array and then we can give

106
00:08:14,220 --> 00:08:17,640
it different options instead of this array.

107
00:08:18,030 --> 00:08:23,810
Now, if you're using a react app, this actually gives you a hint here whenever you're using it incorrectly.

108
00:08:23,850 --> 00:08:30,300
So react hooks, use effect, has missing dependencies, robots and search field either include them

109
00:08:30,300 --> 00:08:32,270
or remove dependency array.

110
00:08:32,880 --> 00:08:40,360
And what this is saying is, hey, inside of use effect, you have two pieces of state robots and search

111
00:08:40,380 --> 00:08:41,450
field that you're using.

112
00:08:41,490 --> 00:08:46,140
Now, in our case, we're just console logging, but it gives you a warning saying, hey, don't you

113
00:08:46,140 --> 00:08:52,230
want these to run if you're using them inside of use effect and add them to the dependencies.

114
00:08:52,590 --> 00:08:58,740
So it's saying this, hey, just add these and you see that it's compiled successfully.

115
00:08:59,310 --> 00:09:05,090
But again, we don't want to do that because remember, robots change all the time.

116
00:09:05,130 --> 00:09:08,040
So if we do that, it turns into an infinite loop.

117
00:09:08,340 --> 00:09:12,060
So let's remove and remove.

118
00:09:13,090 --> 00:09:13,580
There we go.

119
00:09:14,320 --> 00:09:15,880
I'll see in the next one, Pabai.

