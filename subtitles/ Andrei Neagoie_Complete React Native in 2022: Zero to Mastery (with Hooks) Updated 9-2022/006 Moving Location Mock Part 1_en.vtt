WEBVTT
1
00:00:01.980 --> 00:00:09.600
It's time to migrate our meals, to go up, to use our firebase, function locally, to supply it with

2
00:00:09.600 --> 00:00:15.870
market data, that is going to be the first step in our process towards integrating with Google.

3
00:00:16.350 --> 00:00:21.840
And now, if you do not have a private account, you can still do the step of moving the market data

4
00:00:22.230 --> 00:00:25.740
into the firebase function.

5
00:00:26.460 --> 00:00:35.910
Now, note here that when you do move it over from the app into the local server, your app will no

6
00:00:35.910 --> 00:00:41.250
longer be usable if you publish it without deploying the server.

7
00:00:41.550 --> 00:00:46.440
This is a very important thing that we need to note as it will affect your app.

8
00:00:46.440 --> 00:00:47.820
But you can try it out.

9
00:00:47.850 --> 00:00:50.720
You can for sure try this out, see how it works.

10
00:00:51.300 --> 00:00:53.650
Just be aware that this may happen.

11
00:00:54.330 --> 00:00:57.990
OK, so now over here we have the Ajello world function.

12
00:00:58.950 --> 00:01:01.120
And it takes a request and a response.

13
00:01:01.140 --> 00:01:05.550
Now, what we're going to do is we're going to rename this, we're going to name it Geocode.

14
00:01:06.030 --> 00:01:07.830
Now, why are we going to name a Geocode?

15
00:01:07.830 --> 00:01:15.720
Because the first API that we're going to integrate with is the Google Geocode API, geocoding API.

16
00:01:16.350 --> 00:01:21.600
This is an API that takes a place and then translates into a longitude latitude.

17
00:01:22.350 --> 00:01:25.680
Now the service in our app is called location.

18
00:01:25.890 --> 00:01:31.110
However, since we're integrating with something called Geocode, our firebase function is going to

19
00:01:31.110 --> 00:01:32.280
be called Geocode.

20
00:01:33.230 --> 00:01:38.750
Now, this geocode function is going to call something called a geocode request.

21
00:01:39.780 --> 00:01:47.700
And that geocode request is going to take the request parameter from the firebase function and the response

22
00:01:47.700 --> 00:01:52.030
parameter, and what it's going to do with them is it's going to use them internally.

23
00:01:52.590 --> 00:01:56.190
Now, if we go look over here in our function's folder, what we're going to do is we're going to create

24
00:01:56.190 --> 00:01:56.700
a new folder.

25
00:01:56.710 --> 00:02:00.050
We're going to call it Geocode inside of that geocode folder.

26
00:02:00.060 --> 00:02:02.820
We're going to create a new index docs file.

27
00:02:03.360 --> 00:02:11.940
And there we're going to say module exports dot geocode request is equal to a function that takes request

28
00:02:12.420 --> 00:02:15.970
and response and then sends back something.

29
00:02:16.620 --> 00:02:18.900
So here we open the function body.

30
00:02:19.320 --> 00:02:26.400
And what we can do over here is we can interact with the requests in the response that we passed in.

31
00:02:26.680 --> 00:02:29.520
So let's say const geocode request.

32
00:02:30.740 --> 00:02:39.860
Geocode request is equal to the require of and then we'll do Dogood geocode and that will bring in our

33
00:02:39.860 --> 00:02:40.970
geocode request.

34
00:02:41.150 --> 00:02:47.000
Let's remove this over here and if we go look over here in our geocode request, we can do something

35
00:02:47.000 --> 00:02:53.150
called response thought send and we can send G.O. code request.

36
00:02:54.650 --> 00:03:02.390
Now, if we restart our search function, what we should be able to see is that when we go inside of

37
00:03:02.390 --> 00:03:07.510
our functions here, we'll have a new function called Geocode.

38
00:03:07.520 --> 00:03:11.350
And if we open that up, what it's going to say is geocode request.

39
00:03:11.750 --> 00:03:16.600
So now that we have that part set up, what we can do is inside of geocode request.

40
00:03:16.850 --> 00:03:22.510
We can now add the mock request that we initially did inside of our application.

41
00:03:22.520 --> 00:03:23.300
So let's do that.

42
00:03:23.780 --> 00:03:28.430
If we go look inside our source folder and we go to our services folder, what we can see inside of

43
00:03:28.430 --> 00:03:33.770
location is that we have a location that Mochtar is.

44
00:03:34.070 --> 00:03:38.900
And what we're going to do is we're going to move that up into the functions geocode folder.

45
00:03:39.380 --> 00:03:44.420
And by moving it there, we're going to do is we're going to rename it, we're going to name it, geocode

46
00:03:44.660 --> 00:03:46.090
the mock torches.

47
00:03:46.520 --> 00:03:49.250
And we have to do some stuff inside of here.

48
00:03:49.850 --> 00:03:52.830
We have to say module dot exports, dot locations.

49
00:03:53.030 --> 00:03:56.270
Now, why do we have to change the syntax from export const?

50
00:03:56.510 --> 00:04:02.510
Well, this is a newer syntax for exporting and the way that this function is running, this firebase

51
00:04:02.510 --> 00:04:05.830
function, it's running solely inside of no nogs.

52
00:04:06.020 --> 00:04:12.650
There is no fancy compilation happening for it to understand more modern versions of JavaScript.

53
00:04:12.650 --> 00:04:19.040
So we have to keep things simple and we have to use a module that exports notation, which is something

54
00:04:19.040 --> 00:04:21.880
that node understands internally.

55
00:04:22.190 --> 00:04:28.740
So we're simplifying the way that our firebase function needs to understand how it's exporting the locations.

56
00:04:29.000 --> 00:04:33.410
This is just something that we need to do in order for the function to understand that locations is

57
00:04:33.410 --> 00:04:34.250
being exported.

58
00:04:35.000 --> 00:04:41.210
And then if we go inside of our location service over here, what we can see is that our location request

59
00:04:41.600 --> 00:04:45.740
is a promise resolve of the location moch.

60
00:04:45.740 --> 00:04:49.030
So let's take that away now and let's remove this.

61
00:04:49.550 --> 00:04:55.220
What we're basically doing in here is we're ensuring that our location request is now actually going

62
00:04:55.220 --> 00:04:56.690
to hit a server.

63
00:04:57.710 --> 00:05:03.170
If we go over into the Geocode Mosque in the geocode folder and we look at the Geocode Mosque, we have

64
00:05:03.170 --> 00:05:08.300
our locations being exported and inside of the module exports, what we want to do is we want to say

65
00:05:08.300 --> 00:05:14.750
CONSED locations is equal to require of dogs geocode moch.

66
00:05:15.980 --> 00:05:18.620
And so with these locations.

67
00:05:19.780 --> 00:05:27.850
We'll name it, locations mock, so we're going to import our locations as locations mock from geocode

68
00:05:27.870 --> 00:05:28.070
mock.

69
00:05:28.090 --> 00:05:33.160
And the reason we have to use require is, again, because we're running this directly in and no does

70
00:05:33.160 --> 00:05:37.750
not have an import from resolver just yet, as that is a more modern syntax.

71
00:05:37.990 --> 00:05:40.990
So we have to adjust the way that we write our code.

72
00:05:41.410 --> 00:05:47.800
So do not try to use the react patterns that we've established inside of the firebase function.

73
00:05:48.610 --> 00:05:52.300
Now, if we go over here, what we can see is that there's a promise resolve.

74
00:05:52.300 --> 00:05:53.890
We don't really need this anymore.

75
00:05:53.890 --> 00:05:57.940
The promise resolve is not necessary as we are inside of a server.

76
00:05:58.750 --> 00:06:06.840
But what we need is our location function to take the locations mock of a specific location.

77
00:06:07.120 --> 00:06:10.120
Well, what we would call this is a specific city.

78
00:06:10.810 --> 00:06:17.530
And the way that we're going to get city is we're going to import a library, called yourself from YORO

79
00:06:18.130 --> 00:06:22.750
and we're going to pass the URL for its query parameters.

80
00:06:22.750 --> 00:06:28.300
So we're going to say you rld pass right over here of request that you are.

81
00:06:29.290 --> 00:06:33.640
This is basically server code for us to understand that we're going to be targeting the query parameter.

82
00:06:33.660 --> 00:06:41.740
So if we say Konsta query is equal to this, what we can do is if we go over here and we say JSON that

83
00:06:41.740 --> 00:06:43.900
string Afie of our query.

84
00:06:44.910 --> 00:06:53.460
What we can see over in the code right here is we're going to have nothing and then if I say questionmark

85
00:06:53.460 --> 00:06:58.400
city equals Antwerp, we're going to have city Antwerp.

86
00:06:58.710 --> 00:07:03.900
And if I say city Toronto, if I say city Toronto, it's going to show Toronto.

87
00:07:03.900 --> 00:07:05.750
Chicago is going to show Chicago.

88
00:07:06.000 --> 00:07:09.680
If I say San Francisco, it's going to do San Francisco.

89
00:07:10.260 --> 00:07:15.000
So like that we're able to pass Querrey parameters into the URL.

90
00:07:15.000 --> 00:07:17.460
So we're able to tell it what it's going to search for.

91
00:07:17.850 --> 00:07:19.740
And this is how we pass that out.

92
00:07:21.290 --> 00:07:27.320
Off the query, we can actually to structure something called city, and then if we send back specifically

93
00:07:27.860 --> 00:07:35.570
the city, what we'll be able to see here is that when we do this, it's just going to show us San Francisco.

94
00:07:35.960 --> 00:07:40.880
And that's because we took the property city directly off of the object.

95
00:07:41.120 --> 00:07:43.820
So now we're just going to see the individual place.

96
00:07:44.150 --> 00:07:46.380
If we do, Toronto will see Toronto.

97
00:07:46.940 --> 00:07:51.890
OK, so now that we know that we have our city, if we go into our locations, Mark, we can see that

98
00:07:51.890 --> 00:07:56.900
our locations, Mark, is an object that contains different places.

99
00:07:57.650 --> 00:08:04.550
Now, knowing that what we can do over here is we can say council location Mark is equal to location

100
00:08:04.790 --> 00:08:07.400
of city dot to lower case.

101
00:08:08.210 --> 00:08:14.090
And if we do that and we send back our location, Mark, but we're going to see over here is if we send

102
00:08:14.090 --> 00:08:14.780
in Toronto.

103
00:08:16.090 --> 00:08:19.750
We're going to see a result if we send in Chicago, we're going to see a result.

104
00:08:19.750 --> 00:08:22.090
If we send in Antwerp, we're going to see a result.

105
00:08:22.270 --> 00:08:26.530
If we send in Portugal, the country, we're not going to see a result.

106
00:08:26.860 --> 00:08:30.280
If we send them somewhere, I don't know.

107
00:08:30.580 --> 00:08:31.780
We're not going to see a result.

108
00:08:31.780 --> 00:08:35.500
If we send in San Francisco, we are going to see a result.

109
00:08:35.770 --> 00:08:36.940
That's the point here.

110
00:08:37.059 --> 00:08:46.660
We're basically moving our mock interface to work against this server that is behind localhost five

111
00:08:46.660 --> 00:08:49.240
thousand and one is a local firebase function.

112
00:08:49.240 --> 00:08:53.710
And eventually we're going to push this up to the cloud and it's going to have a different euro and

113
00:08:53.710 --> 00:08:59.090
then we're going to be able to link our app to that URL in order for it to work end to end as a mock.

114
00:08:59.770 --> 00:09:04.900
Right now, we're able to send our mock back and what we're going to do is we're going to specifically

115
00:09:04.900 --> 00:09:06.400
send it back as JSON.

116
00:09:06.400 --> 00:09:11.380
So as a JSON object, because if we do send like this, it's not guaranteed that the other application

117
00:09:11.380 --> 00:09:14.040
is going to receive it in the right format immediately.

118
00:09:14.320 --> 00:09:20.290
So we use something called response that JSON and that's going to add some specifics about notifying

119
00:09:20.290 --> 00:09:25.320
the browser, what format the content is in and having this in this format.

120
00:09:25.330 --> 00:09:27.520
Now we can go look at our app.

121
00:09:27.520 --> 00:09:31.720
And what we'll see in our app is that we've basically broken it.

122
00:09:31.820 --> 00:09:41.260
It's not going to work because we've removed the location service from doing the request itself.

123
00:09:42.160 --> 00:09:49.180
Now, in the next video, what we'll look at is integrating this request directly from the local firebase

124
00:09:49.180 --> 00:09:55.090
functions so that we can get our app to work locally with the location, search against our local firebase

125
00:09:55.090 --> 00:09:55.420
function.

