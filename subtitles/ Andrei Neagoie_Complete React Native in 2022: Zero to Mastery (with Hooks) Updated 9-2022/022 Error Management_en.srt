1
00:00:00,910 --> 00:00:06,550
Another optimization and something that's been bothering me throughout the course is the fact that we

2
00:00:06,550 --> 00:00:12,520
don't really have any type of error handling for this location request right now since we've integrated

3
00:00:12,520 --> 00:00:13,770
it right now.

4
00:00:13,780 --> 00:00:18,070
If we get an error from location request, well, frankly, nothing's going to happen.

5
00:00:18,070 --> 00:00:21,010
If I go over here inside of my terminal.

6
00:00:21,460 --> 00:00:21,850
Right.

7
00:00:22,210 --> 00:00:26,890
And I go to the process that's running the functions and I just closed that function down.

8
00:00:27,490 --> 00:00:28,210
Will now.

9
00:00:29,020 --> 00:00:34,450
Now, basically, any time I search for anything else, I'm going to be getting an error.

10
00:00:35,140 --> 00:00:37,750
And that error isn't going to be caught anywhere.

11
00:00:38,410 --> 00:00:40,140
That error isn't doing anything.

12
00:00:40,630 --> 00:00:42,790
If we cancel that log, rest here.

13
00:00:43,420 --> 00:00:47,320
What we're going to see is that, well, something is going wrong.

14
00:00:47,590 --> 00:00:48,040
Right.

15
00:00:48,460 --> 00:00:51,930
And what's going wrong is that we don't have a network connection.

16
00:00:52,330 --> 00:00:53,880
That's the first thing that's going wrong.

17
00:00:54,520 --> 00:00:56,080
We're not getting a result.

18
00:00:56,380 --> 00:00:58,890
We're going directly into the catch statement.

19
00:00:59,290 --> 00:01:05,140
So if we go over here to our context, well, we should be getting an error, right?

20
00:01:05,500 --> 00:01:07,420
Console log error.

21
00:01:08,600 --> 00:01:14,390
And what is that you're going to tell us, oh, network request failed, but the network request feeling

22
00:01:14,390 --> 00:01:15,820
didn't really yield anything.

23
00:01:15,830 --> 00:01:18,950
We just have an empty screen, a massive empty screen.

24
00:01:19,870 --> 00:01:23,730
And although we're setting the error, we're not really doing anything with it.

25
00:01:24,950 --> 00:01:33,890
And so that becomes problematic, so if we take this error right, and we went over here to our feature

26
00:01:34,670 --> 00:01:39,650
and we went into restaurants, screens and then the restaurant screen itself and we opened that up,

27
00:01:40,130 --> 00:01:45,540
right now we're not handling anything with the restaurant's error.

28
00:01:45,590 --> 00:01:46,980
We're not even importing it.

29
00:01:47,630 --> 00:01:51,620
And on top of that, we're not even using our location, context, error here.

30
00:01:51,620 --> 00:01:55,460
So location, context, we need that.

31
00:01:55,850 --> 00:02:03,020
We can do much in terms of getting a location error if we're not using our location context.

32
00:02:03,030 --> 00:02:05,550
So it's important to pull that error as well.

33
00:02:05,570 --> 00:02:10,490
And so we'll call that location error and we'll have an error and a location error.

34
00:02:11,150 --> 00:02:15,390
And with both of these, we should be able to determine if an error is going on.

35
00:02:16,040 --> 00:02:17,390
So if we go over here.

36
00:02:18,530 --> 00:02:21,920
And let's import text from our typography text.

37
00:02:23,490 --> 00:02:25,170
So let's do typography.

38
00:02:26,170 --> 00:02:33,820
And let's do the text that component, and if we take our text component and we went over here right

39
00:02:33,910 --> 00:02:39,910
above our restaurant list and we said, if you have an error or you have a location error.

40
00:02:41,430 --> 00:02:43,590
Right, if you have either of these.

41
00:02:44,580 --> 00:02:46,680
If either of these has a value.

42
00:02:47,590 --> 00:02:50,110
Or location error.

43
00:02:51,180 --> 00:03:02,760
Well, then what we want to do is we want to show text of variant error and we want to say text something

44
00:03:02,760 --> 00:03:08,090
went wrong, retrieving the data, something went wrong, retrieving the data.

45
00:03:08,850 --> 00:03:15,060
And if we do that, well, now we have a nice looking text error, but we could go a bit further.

46
00:03:15,240 --> 00:03:19,980
One thing we need to do here is we could stand to have a bit of space around it.

47
00:03:20,310 --> 00:03:21,690
So let's add a spacer.

48
00:03:22,740 --> 00:03:31,410
And let's say that the spacer goes from the left large and so now it's indenting properly, so something

49
00:03:31,410 --> 00:03:32,550
went wrong retrieving the data.

50
00:03:33,460 --> 00:03:39,130
Well, now, let's say that I went over here and I started my server, right?

51
00:03:39,820 --> 00:03:47,980
So I went over into the Terminal three and I started my server and I'm just going to be working with

52
00:03:47,980 --> 00:03:48,760
more information.

53
00:03:48,760 --> 00:03:50,350
I'm not doing anything special here.

54
00:03:51,070 --> 00:03:55,830
But if I go ahead and I reload, well, now I'm getting my information back.

55
00:03:56,140 --> 00:04:00,540
But now if I search for something that doesn't work, something went wrong with sharing the data.

56
00:04:00,880 --> 00:04:04,000
So we're getting an error, but the list is still populated.

57
00:04:04,420 --> 00:04:05,830
Should it still be populated?

58
00:04:06,010 --> 00:04:09,670
Well, no, that's kind of a broken flow right there.

59
00:04:11,090 --> 00:04:17,029
Now that we have this error, check on the location and potentially the restaurant list there, what

60
00:04:17,029 --> 00:04:21,620
we want to do is we want to take this and we want to say const.

61
00:04:22,810 --> 00:04:30,460
Has error is equal to if either of these values is valid and if you have an error, what we want to

62
00:04:30,460 --> 00:04:33,510
do is we want to not render the restaurant list.

63
00:04:33,520 --> 00:04:36,950
So if you have an error, we're not going to render out the restaurant list.

64
00:04:37,630 --> 00:04:43,660
Now, that said, whenever you fill in something that doesn't have a value, what's going to happen

65
00:04:43,660 --> 00:04:49,870
here is any time the error has been set, when we get a result, we're not resetting the error.

66
00:04:49,870 --> 00:04:55,450
So we need to make sure that we reset the error every time we retrieve a result.

67
00:04:55,450 --> 00:04:58,950
And this is both true for restaurants as well as location.

68
00:04:59,500 --> 00:05:03,880
So in restaurants, when we get results, we want to make sure that we reset the error.

69
00:05:04,630 --> 00:05:06,870
And that way if we reload over here.

70
00:05:07,180 --> 00:05:11,740
Now, if I were to search for a place that doesn't exist, I'm going to get an error.

71
00:05:11,740 --> 00:05:13,540
We can't retrieve data for that place.

72
00:05:13,870 --> 00:05:18,450
And if I search for Antwerp, well, now we're going to get information for Antwerp.

73
00:05:18,850 --> 00:05:21,330
Now we're going to get information for San Francisco.

74
00:05:21,790 --> 00:05:23,830
Now, we're not going to get information at all.

75
00:05:24,190 --> 00:05:26,680
And so we're handling error scenarios.

76
00:05:27,280 --> 00:05:34,180
Now, there's one more thing that we specifically need to handle here, because this obviously in moch

77
00:05:34,180 --> 00:05:35,290
mode will work.

78
00:05:35,650 --> 00:05:37,360
But what about in live mode?

79
00:05:37,960 --> 00:05:42,310
If we were to swap out, is moch for false?

80
00:05:42,850 --> 00:05:43,960
Will this still work?

81
00:05:44,230 --> 00:05:45,220
Well, let's take a look.

82
00:05:45,850 --> 00:05:51,370
If we reload here and we said San Francisco and then we did Antwerp.

83
00:05:52,800 --> 00:06:01,830
And then we did some random string oh, so now we're getting an error because we don't have the information

84
00:06:01,830 --> 00:06:05,310
available, there are no results for this place.

85
00:06:06,490 --> 00:06:07,850
OK, great.

86
00:06:08,380 --> 00:06:14,710
That's amazing, but now let's say that we were in live mode and we did search for a place that had

87
00:06:14,710 --> 00:06:16,150
results, right, like Antwerp.

88
00:06:16,940 --> 00:06:26,120
Now, what if I told you that if we deleted our API key from our functions runtime config, what would

89
00:06:26,120 --> 00:06:29,450
happen if we got an invalid API error?

90
00:06:29,750 --> 00:06:30,650
Well, let's take a look.

91
00:06:32,670 --> 00:06:37,500
So I've gone ahead and emptied out my key over here, and what we need to do now is we need to make

92
00:06:37,500 --> 00:06:40,760
sure that we restart the server so that it takes the most recent config.

93
00:06:41,310 --> 00:06:43,710
Then we'll refresh over here.

94
00:06:45,050 --> 00:06:51,080
And we should see something happen, know how something went wrong, retrieving the data, so we're

95
00:06:51,080 --> 00:06:52,740
catching error scenarios now.

96
00:06:53,150 --> 00:06:53,900
Amazing.

97
00:06:54,290 --> 00:07:01,280
This helps the user have a visual indication of, hey, we're not really in a state in which we have

98
00:07:01,280 --> 00:07:01,870
information.

99
00:07:01,880 --> 00:07:02,810
Something's going wrong.

100
00:07:02,820 --> 00:07:04,330
We don't necessarily know what.

101
00:07:04,760 --> 00:07:05,600
Try again later.

102
00:07:05,600 --> 00:07:07,340
We could customize the message here.

103
00:07:07,370 --> 00:07:07,710
Right.

104
00:07:07,720 --> 00:07:13,040
If I search for Antwerp, obviously it's not going to work because the geocode request does not have

105
00:07:13,040 --> 00:07:14,230
a valid Piki.

106
00:07:14,270 --> 00:07:21,490
And so the user is now warned that, hey, the information is unavailable and oh, no, our map is breaking.

107
00:07:22,160 --> 00:07:30,590
So obviously we do not have robust code when it comes to our maps feature, especially in error scenarios.

108
00:07:30,830 --> 00:07:36,500
So if we go over here to source and we go over to features, map screens, map screen.

109
00:07:37,580 --> 00:07:44,420
What we need to do is we need to make this a bit more robust because we may not have a longitude latitude,

110
00:07:44,720 --> 00:07:45,100
right.

111
00:07:45,260 --> 00:07:47,940
So what we need to do is introduce a bit of safety in this feature.

112
00:07:47,960 --> 00:07:49,910
So what we're going to do is we're going to call this map.

113
00:07:50,360 --> 00:07:56,960
And what we're going to do is at the bottom here, we're going to say expert contact map screen is going

114
00:07:56,960 --> 00:07:59,210
to be a separate component.

115
00:08:00,620 --> 00:08:06,020
That's going to do something a bit special, it's going to pull in the context of location ahead of

116
00:08:06,020 --> 00:08:06,400
time.

117
00:08:07,240 --> 00:08:13,510
And what is going to say is if we do not have a location, we're going to return null, otherwise we're

118
00:08:13,510 --> 00:08:15,160
going to return the map.

119
00:08:16,190 --> 00:08:25,730
And by doing this, we now have the safety of returning the map when we need to now map obviously is

120
00:08:25,730 --> 00:08:29,570
overriding with this, let's call it restaurant map.

121
00:08:31,330 --> 00:08:39,159
And we'll just run the restaurant map down here, and when we reload, we will be able to see is over

122
00:08:39,159 --> 00:08:39,610
here.

123
00:08:40,299 --> 00:08:45,640
First of all, we have to return all as a body and we'll see that.

124
00:08:45,820 --> 00:08:47,180
Well, we're not returning anything.

125
00:08:47,650 --> 00:08:52,480
So what we can do now is we can actually customize this and we can say safe area.

126
00:08:54,350 --> 00:08:55,330
Safe area.

127
00:08:56,820 --> 00:09:02,490
We could do a bunch of different things, we could, for instance, just render a map for you that doesn't

128
00:09:02,490 --> 00:09:05,790
have any type of usage.

129
00:09:06,860 --> 00:09:13,630
We could do something like this where we have Mapu and we just say longitude zero, latitude zero,

130
00:09:14,240 --> 00:09:18,940
and by doing this we'll just render the holistic mapu, let's remove the safe area.

131
00:09:19,340 --> 00:09:23,800
What we'll see here is we're just going to render the map without any information.

132
00:09:24,320 --> 00:09:26,780
And there's one more nuance here we might have forgotten.

133
00:09:26,960 --> 00:09:32,930
If we go look up here at the restaurant map, it's taking in navigation.

134
00:09:33,770 --> 00:09:41,000
But the map screen is the one being passed in to the navigation component, and so because of that,

135
00:09:41,000 --> 00:09:47,180
if we go look at app map navigation or App Navigator, we can see here map screen is the one being fed

136
00:09:47,180 --> 00:09:48,110
as the component.

137
00:09:48,470 --> 00:09:53,000
So map screen is actually the one that is getting the navigation component.

138
00:09:53,750 --> 00:09:59,060
What we could do here is we could say navigation is equal to navigation, to the restaurant map, and

139
00:09:59,060 --> 00:10:02,430
now we've guaranteed that the restaurant map will also get in navigation.

140
00:10:02,810 --> 00:10:04,580
We could have also used the hook here.

141
00:10:04,820 --> 00:10:09,620
But the point being is you have to pay attention to where the navigation is being passed and either

142
00:10:09,620 --> 00:10:11,180
pass it down or use a hook.

143
00:10:11,660 --> 00:10:16,970
And now that we've done all of this, we've introduced safety into the application and error state management,

144
00:10:16,970 --> 00:10:18,590
which is super vital.

