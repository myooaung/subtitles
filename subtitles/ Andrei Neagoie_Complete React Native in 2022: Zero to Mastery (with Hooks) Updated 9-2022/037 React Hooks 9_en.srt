1
00:00:00,750 --> 00:00:01,350
Welcome back.

2
00:00:02,100 --> 00:00:08,970
So should you replace all your react class components with functional components, with hooks?

3
00:00:09,570 --> 00:00:11,400
Well, not really.

4
00:00:12,410 --> 00:00:18,620
One of the key things and the react documentation is that Hooks worked side by side with existing code

5
00:00:18,620 --> 00:00:20,900
so you can adopt them gradually.

6
00:00:21,910 --> 00:00:24,370
Classes aren't going anywhere.

7
00:00:24,550 --> 00:00:25,480
They're going to be around.

8
00:00:27,620 --> 00:00:34,070
For example, the creators of React, which were the developers at Facebook, say at Facebook, we have

9
00:00:34,070 --> 00:00:40,490
tens of thousands of components written as classes and we have absolutely no plans to rewrite them.

10
00:00:40,820 --> 00:00:44,930
Instead, we're starting to use hooks in the new code side by side with classes.

11
00:00:46,160 --> 00:00:52,850
Just because a library introduces a new feature doesn't mean that your code now needs to all be updated.

12
00:00:53,220 --> 00:00:58,310
Hooks are just an additional tool in your tool belt as a programmer for you to use.

13
00:00:58,640 --> 00:01:02,390
But out there in the wild, there's still lots of class components.

14
00:01:02,540 --> 00:01:05,960
If you work for a company, you're most likely going to see a class component.

15
00:01:05,990 --> 00:01:11,960
So you need to understand both things, but also understand some of the ways that hooks might make things

16
00:01:12,050 --> 00:01:16,040
nicer depending on your team, depending on your situation.

17
00:01:16,730 --> 00:01:22,310
So REACT Documentation actually doesn't recommend rewriting your existing components overnight.

18
00:01:22,490 --> 00:01:26,960
You can start experimenting with books, starting to use them, start getting comfortable with them.

19
00:01:27,170 --> 00:01:31,690
But by no means is your code incorrect just because you use classes.

20
00:01:32,330 --> 00:01:34,910
You see libraries change all the time.

21
00:01:35,120 --> 00:01:37,570
New APIs are formed all the time.

22
00:01:38,060 --> 00:01:44,300
That's why when you work as a programmer, it's not about learning the latest and greatest tools just

23
00:01:44,300 --> 00:01:45,560
to show how current you are.

24
00:01:46,160 --> 00:01:52,010
What you need to do is to be able to read documentation, understand what is the motivation behind the

25
00:01:52,010 --> 00:01:59,090
change, what is the motivation behind the new feature, and learn to use it slightly.

26
00:01:59,090 --> 00:02:05,420
And then if you need it, if it makes you productive, if it makes your code more readable, then use

27
00:02:05,420 --> 00:02:05,600
it.

28
00:02:05,810 --> 00:02:08,449
But don't use it just because it's new.

29
00:02:09,080 --> 00:02:12,620
So I recommend playing with your friends up, trying out different hooks.

30
00:02:12,890 --> 00:02:14,900
But I do want to go over to other things.

31
00:02:15,770 --> 00:02:17,630
One is the rules of Hooke's.

32
00:02:18,860 --> 00:02:20,600
There's two things that you have to remember.

33
00:02:21,800 --> 00:02:27,500
You can only call Hooke's from reactor function component's, so you can't really call them outside

34
00:02:27,500 --> 00:02:30,950
of that only call Hooke's from react functions.

35
00:02:32,170 --> 00:02:39,930
So you can't actually call hooks in regular JavaScript functions, remember, hooks are very specific,

36
00:02:39,940 --> 00:02:46,200
so what you learn about hooks doesn't translate to anywhere else but react, which is a little unfortunate

37
00:02:46,810 --> 00:02:50,620
and also part of the reason that I'm not spending too much time teaching a Hooke's.

38
00:02:51,870 --> 00:02:58,170
The next one is that you can only call Hooke's at the top level, you can't call hooks inside of loops,

39
00:02:58,170 --> 00:02:59,850
condition or nested functions.

40
00:02:59,850 --> 00:03:07,380
So you declare a functional component and at the very top, you use hooks.

41
00:03:08,670 --> 00:03:15,300
Just like we have had here, I can't use a fact or the state inside of if conditions or all their functions,

42
00:03:15,960 --> 00:03:20,820
again, just rules that we have to keep in mind because they are react specific.

43
00:03:21,800 --> 00:03:27,620
Finally, you can actually build your own Hooke's remember, one of the main motivations that reactor

44
00:03:27,620 --> 00:03:31,220
introduced Hooke's was to have a reusable state logic.

45
00:03:31,430 --> 00:03:36,080
If you have complex state logic, like, let's say in here.

46
00:03:37,040 --> 00:03:43,610
Having a friend status with is online and set is online that you want to use across different components,

47
00:03:43,820 --> 00:03:51,320
you can actually create your own hooks and combine you state and use effect and share it across components.

48
00:03:52,430 --> 00:03:57,710
Now, this is very dependent on the component that you're building, so I do recommend you read the

49
00:03:57,710 --> 00:04:04,850
documentation, because if you go to the Hawks API reference beyond you state and use effect, there's

50
00:04:04,850 --> 00:04:07,490
a few other ones that you can use.

51
00:04:07,520 --> 00:04:09,590
As you can see, there's not that many.

52
00:04:10,400 --> 00:04:17,000
And most of the time you'll be using these two, but you can quickly get started and understanding how

53
00:04:17,269 --> 00:04:18,410
these work.

54
00:04:19,480 --> 00:04:26,200
Or even create your own, but the thing I want to remind you is that in your career, you're always

55
00:04:26,200 --> 00:04:29,770
going to see new features added to the tools that you're using.

56
00:04:30,280 --> 00:04:36,790
It's not about just jumping on the bandwagon from day one and converting your app to the latest and

57
00:04:36,790 --> 00:04:38,080
greatest newest feature.

58
00:04:38,290 --> 00:04:45,040
Instead, decide for yourself, learn about what it does, what the motivation is, and decide for your

59
00:04:45,040 --> 00:04:49,410
own project, for your own team, whether those updates are necessary.

60
00:04:49,930 --> 00:04:57,340
Often, senior developers are able to not jump on the bandwagon right away because they know that new

61
00:04:57,340 --> 00:04:58,840
things are constantly changing.

62
00:04:59,320 --> 00:05:02,940
New things are still being adopted, best practices are forming.

63
00:05:03,190 --> 00:05:10,210
So take your time when new things are introduced to a library, understand the motivation, read the

64
00:05:10,210 --> 00:05:16,390
documentation, play around with the feature and then decide for your situation if it's the right thing

65
00:05:16,540 --> 00:05:17,050
to do.

66
00:05:17,620 --> 00:05:23,470
I don't recommend spending too much time on hooks unless you really want to get into react because it

67
00:05:23,470 --> 00:05:25,930
doesn't really translate anywhere else.

68
00:05:26,140 --> 00:05:33,490
And the reason we've taught this section in this order is because classes are things in JavaScript that

69
00:05:33,490 --> 00:05:36,100
you can use in other parts of your projects.

70
00:05:36,100 --> 00:05:40,200
Other parts of your programming career versus hooks is so specific.

71
00:05:40,210 --> 00:05:46,780
So unless you want to be a reactive helper, it's not really worth your time and investment learning

72
00:05:46,780 --> 00:05:46,970
them.

73
00:05:47,410 --> 00:05:53,710
Now I have full dedicated courses on react if you want to dive deeper, but otherwise I think we're

74
00:05:53,710 --> 00:05:55,480
pretty happy with this role we're friends at.

75
00:05:56,630 --> 00:05:58,350
I'll see you in the next one, Pabai.

