WEBVTT
1
00:00:01.290 --> 00:00:05.530
All right, it's reflection time and you know what happens during reflection time.

2
00:00:05.700 --> 00:00:10.230
We look at our code and we evaluate if we've done anything wrong at all.

3
00:00:11.040 --> 00:00:16.980
And so what I want to point out here is it's not necessarily that our code doesn't work, right.

4
00:00:16.980 --> 00:00:20.640
Our code works, but it's not as efficient as it could be.

5
00:00:20.790 --> 00:00:24.240
And it's not following all the proper reac patterns, potentially.

6
00:00:25.360 --> 00:00:31.620
And so for that, when we set up our services, we set them up in a way so that they would work right,

7
00:00:31.630 --> 00:00:37.360
we set it up in a way that we did our back and forth and we made it work.

8
00:00:37.600 --> 00:00:45.610
But we may have inadvertently introduced some anti patterns, some patterns in react that although function

9
00:00:46.450 --> 00:00:49.750
could cause bugs to happen very, very quickly.

10
00:00:50.350 --> 00:00:54.460
And you remember when we set up our location context?

11
00:00:55.000 --> 00:00:59.320
Well, when we set up our location context, remember when I told you that there was a difference between

12
00:00:59.320 --> 00:01:05.470
using effect here versus using effect in the search component and having the search component determine

13
00:01:05.500 --> 00:01:07.030
when it's going to do its initial search?

14
00:01:07.300 --> 00:01:13.900
Well, I put that there because I wanted to show you something very useful that Iceland is doing for

15
00:01:13.900 --> 00:01:14.140
us.

16
00:01:14.500 --> 00:01:21.400
And although it may sound stupid at the time, why wouldn't I just write the code as if it was perfect

17
00:01:21.400 --> 00:01:22.120
from the get?

18
00:01:22.750 --> 00:01:29.590
Well, we're never going to get into a situation in a live production life product environment where

19
00:01:29.590 --> 00:01:35.470
all the code is written perfectly and some code bases may come without Iceland, may come without the

20
00:01:35.470 --> 00:01:36.930
tooling that we're setting up here.

21
00:01:36.970 --> 00:01:43.120
And so I want to show you how you can leverage these tools to create the proper patterns.

22
00:01:43.570 --> 00:01:47.830
And so in order to create the proper patterns we need to reflect, we always need to reflect.

23
00:01:47.830 --> 00:01:51.100
We need to look at our code and we need to say, hey, what's going on here?

24
00:01:51.470 --> 00:01:54.790
And sometimes the hints that the code give us are very important.

25
00:01:54.800 --> 00:01:56.110
So we're done with a feature.

26
00:01:56.110 --> 00:02:00.700
And as we do every time we're done with a feature, we're going to go look at the errors.

27
00:02:00.970 --> 00:02:03.400
And so, you know, the majority of them are very small.

28
00:02:03.400 --> 00:02:05.080
We need to add a new line here.

29
00:02:05.380 --> 00:02:12.790
We have a variable over here that is unassigned and we have this use effect is defined but never used

30
00:02:12.790 --> 00:02:13.690
in location context.

31
00:02:13.690 --> 00:02:15.970
And so we're going to leave that there for now.

32
00:02:16.750 --> 00:02:19.650
And we have this use memo that is not used as well.

33
00:02:20.350 --> 00:02:21.040
So, OK.

34
00:02:22.410 --> 00:02:26.340
Why am I leaving the effect in the location context?

35
00:02:26.970 --> 00:02:31.980
You told us we don't need there, we're going to do it in our search component while our search component

36
00:02:31.980 --> 00:02:33.480
is doing just fine.

37
00:02:33.480 --> 00:02:33.800
Right.

38
00:02:33.810 --> 00:02:38.670
It's searching once when it mounts and it's applying the search keyword and and everything works.

39
00:02:38.670 --> 00:02:38.910
Right?

40
00:02:39.150 --> 00:02:39.960
It works.

41
00:02:40.230 --> 00:02:41.490
It just works.

42
00:02:42.410 --> 00:02:50.720
But it's not the most optimal way you see, locally, we're storing our search keyword and we can see

43
00:02:50.720 --> 00:02:55.430
over here that any and their search keywords, initial value is always going to be the keyword that

44
00:02:55.430 --> 00:02:57.000
we get from the location context.

45
00:02:57.710 --> 00:03:02.510
But there's a small problem here because right here, the react hook use effect is missing.

46
00:03:02.510 --> 00:03:06.290
The dependancy search and search keyword either include them both or remove the dependency.

47
00:03:06.710 --> 00:03:12.170
So if we add search and search keyword, what's going to happen is we're going to cause an infinite

48
00:03:12.170 --> 00:03:12.650
loop.

49
00:03:13.160 --> 00:03:15.790
We're going to cause our app not to render anymore.

50
00:03:16.010 --> 00:03:21.200
And this is because now the use effect is going to change every time the keyword changes.

51
00:03:22.090 --> 00:03:24.140
Now, how could the keyword be changing every time?

52
00:03:24.590 --> 00:03:32.660
Well, every time we trigger search our location context is going and running on search, which is setting

53
00:03:32.660 --> 00:03:33.320
the keyword.

54
00:03:33.470 --> 00:03:39.530
And every time we set the keyword, subsequently we search our location, changes the object in this

55
00:03:39.530 --> 00:03:42.500
use effect, this changing, which is rendering the search tree.

56
00:03:42.680 --> 00:03:45.440
We very easily cause an infinite loop here.

57
00:03:45.680 --> 00:03:48.230
And well, it's saying either add them both or remove it.

58
00:03:48.230 --> 00:03:51.740
And if we remove it, the use effect will now run on every render cycle.

59
00:03:51.950 --> 00:03:55.640
And every render cycle is basically every time anything changes.

60
00:03:55.790 --> 00:03:57.510
Again, infinite loop.

61
00:03:57.980 --> 00:04:01.900
So right here, this is very problematic, right?

62
00:04:02.090 --> 00:04:11.060
We can very easily cause an infinite loop in our code just by doing this this very simple, simple effect.

63
00:04:11.960 --> 00:04:13.250
We don't want that to happen.

64
00:04:13.280 --> 00:04:16.850
Why this is happening is because we're searching with the search keyword.

65
00:04:16.850 --> 00:04:18.050
The search keyword is changing.

66
00:04:18.050 --> 00:04:18.649
The keyword.

67
00:04:18.890 --> 00:04:25.310
The keyword is coming back and changing the state here and so forth and so forth and so forth and basically

68
00:04:25.310 --> 00:04:26.260
causing an infinite loop.

69
00:04:26.570 --> 00:04:29.780
Now, an easy way to fix this, to say, hey, Mo, just remove this here.

70
00:04:30.080 --> 00:04:30.470
Right.

71
00:04:30.680 --> 00:04:32.510
And if we remove that, it should work.

72
00:04:32.510 --> 00:04:32.810
Right?

73
00:04:33.020 --> 00:04:37.190
Like if we had search, keyword and search here, that should do it, right?

74
00:04:37.460 --> 00:04:45.080
Well, not necessarily, because if we now go ahead and we reload, of course, our app is going to

75
00:04:45.080 --> 00:04:51.620
be in a state where it's constantly re rendering still because the values are changing of search.

76
00:04:52.160 --> 00:04:56.020
So this isn't ideal either, right?

77
00:04:56.270 --> 00:04:57.160
This isn't ideal.

78
00:04:57.500 --> 00:04:58.980
How do we go about fixing this?

79
00:04:59.360 --> 00:05:01.430
Well, it's very nuanced.

80
00:05:01.430 --> 00:05:02.240
It's very nuanced.

81
00:05:02.240 --> 00:05:05.960
What we want to do is, first of all, we want to remove our use effect here because this isn't going

82
00:05:05.960 --> 00:05:06.920
to work out for us.

83
00:05:07.220 --> 00:05:09.740
This is causing us a whole lot of pain.

84
00:05:10.220 --> 00:05:16.940
What we need to do is we need to have our context be a bit smarter about how it's going to use search.

85
00:05:17.390 --> 00:05:22.010
So if we go into our location context, what we're going to do here, we're going to dissect our own

86
00:05:22.010 --> 00:05:22.700
search function.

87
00:05:22.700 --> 00:05:25.820
We're going to look at what exactly is going on in here.

88
00:05:26.480 --> 00:05:33.710
So any time we run search, we're going to run the location context request at the same time.

89
00:05:34.550 --> 00:05:39.320
But that isn't necessarily what we want to happen.

90
00:05:39.800 --> 00:05:44.430
You see, any time we run both of these methods, we're changing.

91
00:05:44.480 --> 00:05:45.470
We're running this.

92
00:05:45.500 --> 00:05:50.900
This changes the location, the location, change your search changes, et cetera, et cetera, et cetera.

93
00:05:51.630 --> 00:05:54.890
OK, so we need to be a bit smarter about how this happened.

94
00:05:54.900 --> 00:05:57.290
So let's, first of all, go and remove this.

95
00:05:57.890 --> 00:06:00.350
So any time we search, we're going to set is loading to true.

96
00:06:00.350 --> 00:06:02.360
And we're going to set the key word to the search keyword.

97
00:06:02.930 --> 00:06:05.810
And then we're going to say that we're going to take a use effect here.

98
00:06:06.380 --> 00:06:13.640
So we're going to have the context determine when it's going to fire the request and it's going to be

99
00:06:13.640 --> 00:06:14.390
smart about it.

100
00:06:14.630 --> 00:06:17.420
So, first of all, let's put our request in here, right?

101
00:06:17.960 --> 00:06:22.790
Let's put our request in here and let's say if keyboard length.

102
00:06:22.790 --> 00:06:28.400
Right, because it's setting the keyword and then we're going to do keyword here.

103
00:06:28.400 --> 00:06:29.560
We're going to use keyword again.

104
00:06:29.930 --> 00:06:37.790
And what we're going to say here is if the key word changes, what we're going to do is we're going

105
00:06:37.790 --> 00:06:39.560
to fire a new request.

106
00:06:40.510 --> 00:06:43.520
And only then will we fire new request.

107
00:06:43.600 --> 00:06:44.770
Will this solve our problem?

108
00:06:44.950 --> 00:06:46.310
Well, let's go have a look here.

109
00:06:46.970 --> 00:06:54.940
So over here inside of the search keyword, we're setting the initial state to the keyword.

110
00:06:56.110 --> 00:07:01.930
And over here in our app, what we can see is let's go ahead and reload.

111
00:07:02.310 --> 00:07:06.410
We're going to see that the app doesn't end up in a state where it's infinitely reloading.

112
00:07:06.670 --> 00:07:09.970
This is because of the use effect inside of the location.

113
00:07:09.970 --> 00:07:16.120
Context is only triggering our request to get the location when the search keyword changes.

114
00:07:16.310 --> 00:07:19.660
So it's it's important to note how this life cycle works.

115
00:07:19.960 --> 00:07:21.160
And it can be quite tricky.

116
00:07:21.160 --> 00:07:22.650
We can inadvertently cause bugs.

117
00:07:22.660 --> 00:07:29.170
So these warnings that Esslin show us, all these warnings, they have a meaning and a purpose and they

118
00:07:29.170 --> 00:07:31.120
show us the proper patterns to follow.

119
00:07:31.210 --> 00:07:35.470
And this is the proper pattern to follow when using context, triggering services.

