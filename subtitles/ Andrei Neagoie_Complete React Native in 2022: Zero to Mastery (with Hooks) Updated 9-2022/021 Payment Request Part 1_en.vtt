WEBVTT
1
00:00:01.550 --> 00:00:07.460
Last time we saw each other, we were building a payment gateway and, well, I have to be honest,

2
00:00:08.270 --> 00:00:10.480
we're still continuing on that right now.

3
00:00:10.700 --> 00:00:15.350
So hold on to your horses, because now it's getting a bit more complicated.

4
00:00:15.830 --> 00:00:20.410
Where we landed is we have the payment gateway, right?

5
00:00:20.420 --> 00:00:25.790
We have something we can talk to, but it's not talking to Stripe yet, the process of payment and it's

6
00:00:25.790 --> 00:00:29.240
not really getting anything from our checkout chest.

7
00:00:30.560 --> 00:00:36.920
So what we want to do here is the free, very first step that we want to go through is we want to build

8
00:00:36.920 --> 00:00:37.790
that request.

9
00:00:37.790 --> 00:00:43.700
That's going to give us information here that we need in order to process a payment and to do that.

10
00:00:43.820 --> 00:00:48.320
Well, first of all, we're not going to need to go back to our actual front and back up.

11
00:00:48.620 --> 00:00:54.110
And we're going to need to go to Check-Out service because in Check-Out service is where the core of

12
00:00:54.260 --> 00:00:55.930
our card to talk request happen.

13
00:00:56.090 --> 00:01:02.010
But now we're going to build something called a payment request, right?

14
00:01:02.060 --> 00:01:03.340
A pay request, we'll call it.

15
00:01:04.040 --> 00:01:11.780
And so that pay request is going to take in our token the amount for which the request is going to happen.

16
00:01:11.960 --> 00:01:12.630
And the name.

17
00:01:13.160 --> 00:01:16.790
Those are the three pieces of information that the UI is going to supply us.

18
00:01:17.450 --> 00:01:19.140
And once the UI supplies us, those.

19
00:01:19.910 --> 00:01:22.640
Well, what we're going to do is we're going to return something.

20
00:01:23.240 --> 00:01:27.170
We're going to return a fetch call, write a fetch.

21
00:01:27.770 --> 00:01:28.440
Where's that fetch?

22
00:01:28.490 --> 00:01:29.540
Going to go to the memo.

23
00:01:29.810 --> 00:01:30.850
Well, that's a good question.

24
00:01:30.860 --> 00:01:39.510
We're going to import the host from Tharthar and then we're going to look at dot, dot, slash, utils,

25
00:01:40.010 --> 00:01:40.390
env.

26
00:01:40.960 --> 00:01:42.790
And in the end, we have our host.

27
00:01:42.800 --> 00:01:48.200
So let's fetch from and let's build our URL from the host.

28
00:01:49.200 --> 00:01:56.010
And so we're going to go to host slash pay now, this hosts should be the same host that we used in

29
00:01:56.340 --> 00:01:58.100
the Google integration.

30
00:01:58.110 --> 00:02:04.350
And again, if you're not hosting these firebase functions again, you should you should host these

31
00:02:04.350 --> 00:02:10.440
firebase functions on the local development where we're going to localhost for the firebase, where

32
00:02:10.440 --> 00:02:11.730
we obviously have a URL.

33
00:02:12.330 --> 00:02:19.410
If you're implementing this solely on Android, you may get stuck here again without being able to host

34
00:02:19.530 --> 00:02:20.850
these on Firebase.

35
00:02:21.210 --> 00:02:24.050
So be very aware of that.

36
00:02:24.600 --> 00:02:30.900
So now that we're talking to the payment endpoint, the first thing we're going to do is we're going

37
00:02:30.900 --> 00:02:32.700
we're not going to implement the mark here.

38
00:02:33.090 --> 00:02:34.950
We're not marketing anything with the payment.

39
00:02:34.950 --> 00:02:37.680
Endpoint is talking directly to Stripe.

40
00:02:38.400 --> 00:02:44.910
But what we're going to do is we're going to send a body and that body is going to be JSON String Afie.

41
00:02:45.700 --> 00:02:51.660
And what we're going to send is the token, the name, the amount.

42
00:02:52.590 --> 00:02:59.430
And then last but not least, we're going to give this a method and we're going to see post now a post

43
00:02:59.430 --> 00:03:03.150
method is a way to talk to an endpoint.

44
00:03:03.150 --> 00:03:06.150
When you get something from an endpoint, the endpoint is giving you something.

45
00:03:06.150 --> 00:03:09.120
When you post something to an endpoint, you're sending something to it.

46
00:03:09.630 --> 00:03:15.210
So a post is very important in this case because we're sending information to the endpoint that is the

47
00:03:15.210 --> 00:03:16.800
semantically correct way to do this.

48
00:03:17.460 --> 00:03:20.420
So then we'll do a dot then and we'll say response.

49
00:03:20.850 --> 00:03:28.590
And so with that response, we'll say if restaffed status is greater than two hundred, what we're going

50
00:03:28.590 --> 00:03:34.020
to do here is we're going to return promise dot reject.

51
00:03:34.950 --> 00:03:41.880
And we're going to say something went wrong, processing your payment, that is the generic error we're

52
00:03:41.880 --> 00:03:46.440
going to pass up now, you could pass up the specific error I'm choosing, not you ready?

53
00:03:46.710 --> 00:03:48.360
And then we'll return restaff.

54
00:03:48.390 --> 00:03:48.990
Jason.

55
00:03:50.310 --> 00:03:57.020
OK, so now we've handled talking to our end point, but we haven't really implemented it at all.

56
00:03:57.360 --> 00:04:02.310
So how do we go about actually integrating this into our component?

57
00:04:02.730 --> 00:04:09.240
Well, if we go to check dot screen, here is where we're going to implement this.

58
00:04:09.240 --> 00:04:12.900
Now, you may be asking yourself, we've been using context to do this so far.

59
00:04:12.900 --> 00:04:16.140
We've been using our context to pass through the methods.

60
00:04:16.170 --> 00:04:19.649
Well, hold on, because checkout is holding state.

61
00:04:19.890 --> 00:04:22.980
The payment request is just doing a simple request to an end point.

62
00:04:23.220 --> 00:04:27.630
There is no intermediate state in which we can do the on payment.

63
00:04:27.660 --> 00:04:32.940
Now, you could, for instance, say that in the current context we could put an online payment method.

64
00:04:33.240 --> 00:04:36.290
But I prefer to do it this way right over here.

65
00:04:36.480 --> 00:04:43.820
What we're going to do is we're going to import pay requests and we're going to do that from thought

66
00:04:43.910 --> 00:04:50.160
that Slashdot thoughts, thought slash services, slash, checkout slash checkout service.

67
00:04:50.640 --> 00:04:56.090
And now that we have our payment request now, we can start building out the actual payment.

68
00:04:56.550 --> 00:05:02.890
So what we can say here, right over here is that consed on pay is equal to a function.

69
00:05:03.360 --> 00:05:06.530
Now that function is the function that's going to have lower payment.

70
00:05:06.690 --> 00:05:12.680
And what we're going to do with that payment is we're going to process it over.

71
00:05:13.560 --> 00:05:15.780
OK, so how do we do that?

72
00:05:16.140 --> 00:05:20.460
Well, we don't really have our token right here, right.

73
00:05:20.490 --> 00:05:22.530
We don't we don't have the information re.

74
00:05:23.510 --> 00:05:33.380
But what we do have is our request, so our pay request can have our token write, our request needs

75
00:05:33.650 --> 00:05:36.140
some kind of token it needs.

76
00:05:36.150 --> 00:05:37.910
So one, two, three.

77
00:05:38.540 --> 00:05:38.920
Right.

78
00:05:38.930 --> 00:05:40.190
Let's say that that was our token.

79
00:05:40.700 --> 00:05:45.940
And then if we go over to the checkout service, we can see what else it needs.

80
00:05:45.950 --> 00:05:49.040
It needs a token, needs an amount and it needs a name.

81
00:05:49.220 --> 00:05:52.730
OK, so a token amount, let's say that that's twelve ninety nine.

82
00:05:52.940 --> 00:05:55.130
And then the name is Moe Beatty.

83
00:05:55.880 --> 00:05:56.230
Right.

84
00:05:56.630 --> 00:06:00.860
And then what we'll do is we'll just fire off this request.

85
00:06:00.890 --> 00:06:02.420
We're not really going to do anything with it.

86
00:06:02.930 --> 00:06:09.680
And we'll say that, you know, use effect on mount of this component.

87
00:06:10.070 --> 00:06:11.480
Fire a pay request.

88
00:06:12.410 --> 00:06:14.010
Just very simple stuff.

89
00:06:14.480 --> 00:06:19.520
Let's fire that pay request, or rather, of the ENPI, which is wrapping the pay request.

90
00:06:20.120 --> 00:06:23.810
And so now we can go into our pay index.

91
00:06:24.110 --> 00:06:30.440
And what we can do here is we can response thoughts and request thought body.

92
00:06:30.470 --> 00:06:36.800
And so when we do that, what we're going to see here, rather, if we cancel that log.

93
00:06:38.270 --> 00:06:43.930
Request, but body and we response thoughts and success.

94
00:06:44.880 --> 00:06:50.250
What we're going to see here in our consular log in the terminal.

95
00:06:51.290 --> 00:06:56.900
Is the following, if we go over here to our app and we reload.

96
00:06:57.770 --> 00:07:03.170
We should see a request coming in, so we executed a payment, we started a payment.

97
00:07:04.160 --> 00:07:09.840
We executed P, we finished P, but where is the console?

98
00:07:10.460 --> 00:07:11.760
Where did any of that happen?

99
00:07:12.110 --> 00:07:14.030
Did none of that actually happen?

100
00:07:14.250 --> 00:07:17.240
Well, it's called let's try it again places nearby.

101
00:07:18.130 --> 00:07:23.370
And if we go inside here, we do place order, oh, here we go, here's our token.

102
00:07:23.860 --> 00:07:25.690
So we're getting back the information here.

103
00:07:25.690 --> 00:07:26.920
Tolkan One, two, three.

104
00:07:27.220 --> 00:07:29.690
Name Ngobeni amount one two nine nine.

105
00:07:30.160 --> 00:07:32.700
Well, what if we do request our body that token?

106
00:07:33.130 --> 00:07:34.840
Can we get specifically the token?

107
00:07:35.410 --> 00:07:37.060
So let's go ahead and try that again.

108
00:07:37.540 --> 00:07:40.710
Let's reload here and let's do this.

109
00:07:41.170 --> 00:07:42.250
I was press order.

110
00:07:43.120 --> 00:07:44.320
Tolkan is undefined.

111
00:07:44.320 --> 00:07:45.640
Why is Tolkan undefined?

112
00:07:46.180 --> 00:07:48.250
Well, let's try a Jason passerelle.

113
00:07:49.380 --> 00:07:54.530
And then let's do Jassal not pass requestor body around the request that body, and let's try it again.

114
00:07:55.020 --> 00:08:01.860
So if we reload here and then we add the card, we can see now, oh, the tokens coming in, one, two,

115
00:08:01.860 --> 00:08:02.180
three.

116
00:08:02.430 --> 00:08:11.100
So we need to pass the body so we can say something along the lines of consed body is equal to Jason

117
00:08:11.100 --> 00:08:15.570
Parks body and then we can say body that Tolkan body that name.

118
00:08:16.530 --> 00:08:21.600
And so we're getting the body of the information that was sent to us, and if we again, go ahead and

119
00:08:21.600 --> 00:08:29.390
reload here, what we can see in our checkout flow, if we add to cart is one, two, three, Mobileye.

120
00:08:29.940 --> 00:08:37.630
OK, so we've now successfully entered the phase of talking to our server and sending the information.

121
00:08:38.159 --> 00:08:39.750
So now what do we do?

122
00:08:40.260 --> 00:08:43.419
Well, let's go hook up the actual information in the UI.

