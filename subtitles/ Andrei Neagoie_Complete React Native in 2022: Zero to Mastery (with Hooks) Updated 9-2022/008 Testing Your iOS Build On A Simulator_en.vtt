WEBVTT
1
00:00:00.420 --> 00:00:04.710
Now, that trial was billed as finish of meals to go, we can do the same thing we did on Android and

2
00:00:04.710 --> 00:00:07.130
we can download the IPA file.

3
00:00:07.140 --> 00:00:10.470
This is the iPhone application file.

4
00:00:10.470 --> 00:00:16.500
So it's a bit different than what Android outputs because it's supposed to run on iOS.

5
00:00:16.770 --> 00:00:23.850
And when we download this file, what we can do or what we can try is to try to run it on our simulator

6
00:00:24.270 --> 00:00:30.510
in the way that we would do that is if we go over here and we took our IPPEI file, we could drag and

7
00:00:30.510 --> 00:00:32.159
drop it into the simulator.

8
00:00:32.549 --> 00:00:39.720
And by dragging and dropping it into the simulator, what would happen is it would try to save it on

9
00:00:39.720 --> 00:00:40.290
the iPhone.

10
00:00:41.580 --> 00:00:45.520
Now, this doesn't work, this doesn't work at all.

11
00:00:46.050 --> 00:00:54.180
This is not how iOS goes and installs files, so it works fairly differently than it would on Android.

12
00:00:54.210 --> 00:00:57.930
This is not how we go about installing these applications.

13
00:00:57.960 --> 00:01:00.490
You can't just drag and drop an IPA file.

14
00:01:00.840 --> 00:01:02.790
So how do we run it on our simulator then?

15
00:01:03.090 --> 00:01:09.360
Well, what we can do is we can go back to Expo, build iOS and we can specifically save the simulator

16
00:01:09.540 --> 00:01:10.080
build.

17
00:01:10.440 --> 00:01:15.300
So this is going to create an optimized build specifically to run on the simulator.

18
00:01:15.930 --> 00:01:24.640
It cannot be opened on a legitimate iPhone, but you could drag and drop it on your simulator.

19
00:01:24.660 --> 00:01:30.750
So if we go back over here to Expo builds, what we're going to see is that we've could build specifically

20
00:01:30.750 --> 00:01:31.740
for the simulator.

21
00:01:32.370 --> 00:01:37.830
And once this build has finished, what we can do is we can download the output and drag and drop that

22
00:01:37.830 --> 00:01:38.700
into our simulator.

23
00:01:39.690 --> 00:01:43.830
And so while this build is processing for the simulator, you may be asking, well, how do I run it

24
00:01:43.830 --> 00:01:44.940
on an actual device?

25
00:01:45.300 --> 00:01:49.800
Well, to test it on a device, you need to use something called test flight, and then you need to

26
00:01:49.800 --> 00:01:54.450
download the IPPEI file to your local machine, which we had already done.

27
00:01:54.930 --> 00:02:01.770
And with the App Store Kinect, which is a specific app that you need to use in order to upload, you

28
00:02:01.770 --> 00:02:04.620
need to upload this IPPEI file into test flight.

29
00:02:04.630 --> 00:02:10.320
So there's a whole process here that can only be done if you have an IOC device.

30
00:02:10.530 --> 00:02:15.480
If you have a MacBook, you cannot do this on a Windows machine.

31
00:02:15.480 --> 00:02:17.240
You cannot do this on a Linux machine.

32
00:02:17.460 --> 00:02:24.090
So we're running into the limitations of being outside of OS and the Apple environment.

33
00:02:24.900 --> 00:02:29.120
So now that the simulator build has completed, we can press the download button here.

34
00:02:29.250 --> 00:02:33.930
And what we're going to see is that we're downloading an IPA for the production build.

35
00:02:34.290 --> 00:02:37.270
Now it's downloading Atah Cheezy.

36
00:02:37.320 --> 00:02:38.370
So a zip file.

37
00:02:38.880 --> 00:02:39.810
Interesting.

38
00:02:40.200 --> 00:02:41.940
What will that zip file contain?

39
00:02:42.120 --> 00:02:43.620
And it's way smaller.

40
00:02:44.580 --> 00:02:49.800
And if we open that zip file up, what we're going to see is that it's going to output this miles to

41
00:02:49.800 --> 00:02:53.520
go that we can drag and drop inside of our simulator.

42
00:02:53.980 --> 00:02:58.650
And what that's going to do is it's going to install a simulator build of our production app and now

43
00:02:58.650 --> 00:03:00.870
we can see meals to go running on our simulator.

44
00:03:01.530 --> 00:03:08.610
If we open that up, what we can do now is we can test out our application as if it was a production

45
00:03:08.610 --> 00:03:11.160
build that was coming from the App Store.

46
00:03:12.310 --> 00:03:17.610
And what we can then see is that we're able to test our application and all of the different aspects,

47
00:03:17.620 --> 00:03:23.020
and unlike Android, where we needed to set up a Google Maps because Android works with Google Maps,

48
00:03:23.380 --> 00:03:28.970
the Apple Maps works out of the box and does not need those additional steps in order to function.

49
00:03:29.830 --> 00:03:37.120
So knowing that we now know the different types of builds that we can generate for iOS, we can generate

50
00:03:37.120 --> 00:03:42.220
a production level build that can only be distributed through test flight to live devices.

51
00:03:42.400 --> 00:03:43.360
Apple test flight.

52
00:03:43.540 --> 00:03:52.090
Or we can generate an iOS simulator build that can actually run on our simulator to test what exactly

53
00:03:52.090 --> 00:03:52.680
is going on.

54
00:03:53.260 --> 00:04:01.360
Now, with that said, this is the actual build that we need to submit to the Apple App Store in order

55
00:04:01.360 --> 00:04:02.410
to get that running.

56
00:04:02.680 --> 00:04:04.390
So let's take a look at how that would work.

