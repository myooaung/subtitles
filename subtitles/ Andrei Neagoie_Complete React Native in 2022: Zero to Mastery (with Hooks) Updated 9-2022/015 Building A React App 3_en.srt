1
00:00:00,420 --> 00:00:05,580
All right, we're getting closer and closer to having our app look like this, but we clearly see that

2
00:00:05,580 --> 00:00:07,580
we have a search box here.

3
00:00:07,830 --> 00:00:11,580
So in this video, we're going to work on having this interactive.

4
00:00:12,850 --> 00:00:18,310
Looking back at our app, we see that what we definitely need a title and the search box, so let's

5
00:00:18,310 --> 00:00:18,880
create that.

6
00:00:21,200 --> 00:00:27,710
If I go to Index Dot, James, I think now that we're officially building an app instead of having the

7
00:00:27,710 --> 00:00:32,720
Carlist component here, we should have one big component called app.

8
00:00:34,180 --> 00:00:38,810
And this app will be the father of all our children, all our components.

9
00:00:39,790 --> 00:00:40,390
Let's do that.

10
00:00:40,390 --> 00:00:42,640
Let's build the app component first.

11
00:00:47,110 --> 00:00:53,020
And this app component, again, will import react from react.

12
00:00:59,590 --> 00:01:00,370
Well, equal.

13
00:01:06,690 --> 00:01:12,900
The card list component, which we can just copy and put in here.

14
00:01:15,400 --> 00:01:20,770
And again, changing this to Bable, we want to import.

15
00:01:23,730 --> 00:01:25,650
The card list component.

16
00:01:30,290 --> 00:01:35,120
And we also want to have our robots actually imported.

17
00:01:36,690 --> 00:01:38,720
In here, so we have access to it.

18
00:01:39,970 --> 00:01:45,910
And then finally, we now just want to render the app component so we can just bring this back to the

19
00:01:45,910 --> 00:01:46,630
way it was.

20
00:01:50,930 --> 00:01:54,860
We need to obviously export our app, so we'll say.

21
00:01:55,900 --> 00:01:56,770
Export.

22
00:01:58,060 --> 00:01:59,470
Default app.

23
00:02:00,850 --> 00:02:01,690
Save this.

24
00:02:03,020 --> 00:02:04,550
Let's go back, yeah.

25
00:02:04,640 --> 00:02:12,620
Everything is still working now within the Scarless, we also have a header, so we'll do hattar one

26
00:02:12,830 --> 00:02:14,630
that will say Wrobel friends.

27
00:02:17,840 --> 00:02:24,950
And again, remember that we need to return just one single parent, so we need to do something like

28
00:02:24,950 --> 00:02:26,990
a div to wrap it.

29
00:02:31,550 --> 00:02:33,830
And I need to close this H1 tag.

30
00:02:37,200 --> 00:02:44,940
All right, I have my Rabois friends title, and we also need a search box, and although each one was

31
00:02:44,940 --> 00:02:52,170
easy and we didn't have to build a component for it, it sounds like we probably want to create a search

32
00:02:52,170 --> 00:02:53,070
box component.

33
00:02:54,280 --> 00:02:56,140
For this app, so let's do that.

34
00:02:56,590 --> 00:02:57,430
I'm going to say.

35
00:02:58,440 --> 00:03:00,600
Import search box.

36
00:03:01,770 --> 00:03:04,770
From a file that will create called Search Box.

37
00:03:06,940 --> 00:03:09,160
We will create a new file.

38
00:03:19,640 --> 00:03:21,230
And this file will have.

39
00:03:22,240 --> 00:03:25,810
Imports react from react.

40
00:03:28,890 --> 00:03:30,090
And the search box.

41
00:03:32,430 --> 00:03:37,890
We'll have a function that returns us, think about what it returns.

42
00:03:39,280 --> 00:03:50,500
Well, it definitely returns and input, right, that is type of search and let's also have a placeholder.

43
00:03:51,490 --> 00:03:53,980
Let's close this and a placeholder.

44
00:03:55,400 --> 00:03:59,300
That says search robots.

45
00:04:02,760 --> 00:04:08,280
We close this and safe and we have to export export default.

46
00:04:12,470 --> 00:04:14,270
Save compiled successfully.

47
00:04:14,930 --> 00:04:19,220
All right, we have our search box, but, well, it's not searching anything right now.

48
00:04:22,630 --> 00:04:24,010
Let's add this on a new line.

49
00:04:25,360 --> 00:04:30,820
Just so it looks nicer and it's always a good idea, just in case you want to add more things to the

50
00:04:30,820 --> 00:04:35,500
search box to wrap everything in a div.

51
00:04:35,530 --> 00:04:36,990
So I'm going to do that right now.

52
00:04:39,490 --> 00:04:47,710
And this day, we'll just have a class name of padding to, again, using tachyons and with the input

53
00:04:47,740 --> 00:04:49,320
we can do a class name.

54
00:04:51,310 --> 00:04:52,860
And I just know these look good.

55
00:04:52,870 --> 00:04:55,360
So I'm just going to copy and paste.

56
00:04:55,360 --> 00:04:58,120
You're just padding or with background.

57
00:04:58,330 --> 00:05:01,090
Lightest blue if I do this.

58
00:05:01,090 --> 00:05:02,520
And let's go back.

59
00:05:02,800 --> 00:05:03,220
All right.

60
00:05:03,460 --> 00:05:04,360
This looks better.

61
00:05:04,660 --> 00:05:06,100
We want to center everything.

62
00:05:06,430 --> 00:05:09,940
So maybe in the app we can just add a class name.

63
00:05:11,080 --> 00:05:12,130
Equals to.

64
00:05:13,060 --> 00:05:15,520
Tax center, see if that works.

65
00:05:16,890 --> 00:05:17,590
There you go.

66
00:05:17,640 --> 00:05:18,390
That's much better.

67
00:05:19,200 --> 00:05:20,160
I like this already.

68
00:05:21,310 --> 00:05:24,580
Now, how can we make this interactive?

69
00:05:25,520 --> 00:05:30,760
Up until now, we've just had this static websites, but real websites are interactive, right?

70
00:05:33,510 --> 00:05:37,980
Let's think about this logically, we have an app.

71
00:05:39,440 --> 00:05:41,690
We have a search box.

72
00:05:42,750 --> 00:05:44,550
And we have a card list.

73
00:05:46,380 --> 00:05:54,870
But the search box component needs to communicate with the Carlist and same with the Carlist, Carlist

74
00:05:54,870 --> 00:06:02,330
needs to know what is in the search box so that it can filter out robots accordingly.

75
00:06:03,740 --> 00:06:07,610
Let's go back to our image that we have of one way dataflow.

76
00:06:09,220 --> 00:06:18,520
Looking at this, we have the app component and then the card list component that has cards and then

77
00:06:18,520 --> 00:06:22,600
the search box component that doesn't have any children now.

78
00:06:22,810 --> 00:06:29,980
But in order for these two to communicate, we have a one way dataflow that is they need to send their

79
00:06:29,980 --> 00:06:35,920
information to their parent and the parent tells them what to do.

80
00:06:37,090 --> 00:06:38,830
Now, how can we do that?

81
00:06:40,180 --> 00:06:46,150
Up until now, we just had some data that we just trickled down, but we never had it where one of the

82
00:06:46,150 --> 00:06:51,880
children had to modify data or communicate with a neighbor.

83
00:06:54,660 --> 00:07:04,590
Well, in order to do this, React has an idea of something called state, up until now, we learned

84
00:07:04,590 --> 00:07:12,630
about props such as properties that we keep passing down, but we've never changed them because of react

85
00:07:12,630 --> 00:07:14,190
just with the props.

86
00:07:15,090 --> 00:07:21,300
If I go to Carlist, it just with the props that it receives and it just renders something.

87
00:07:23,250 --> 00:07:29,100
And this one way dataflow is really nice because this card list is a pure function.

88
00:07:30,150 --> 00:07:37,020
It receives an input and then it always returns the same output.

89
00:07:37,530 --> 00:07:42,450
So if robots are always the same, it's always going to return the same thing.

90
00:07:42,670 --> 00:07:46,800
It's deterministic, pure functions, and it's something that we've talked about before.

91
00:07:47,430 --> 00:07:49,140
And this is a really, really good thing.

92
00:07:49,740 --> 00:07:55,460
These components are what's called pure components, and some even call it dumb components.

93
00:07:56,040 --> 00:08:01,440
It just means that they don't really need to know about anything other than the fact that they're pure

94
00:08:01,440 --> 00:08:04,280
functions that receive something and return something.

95
00:08:05,040 --> 00:08:08,670
And this is really nice because we always know what this is going to look like.

96
00:08:10,370 --> 00:08:18,560
And that's all we had up until this point, but now we have to worry about something other than props.

97
00:08:18,590 --> 00:08:19,820
Props never change.

98
00:08:19,820 --> 00:08:24,160
Props are always just inputs that we get and we've never modified them.

99
00:08:25,070 --> 00:08:29,300
But in this case, we need a memory in our app.

100
00:08:29,540 --> 00:08:35,710
We need this to communicate with this and also change and update accordingly.

101
00:08:36,169 --> 00:08:40,299
And that's what state is in react state.

102
00:08:40,309 --> 00:08:42,380
And you'll hear this in computer programming.

103
00:08:42,380 --> 00:08:47,960
A lot simply means the description of your app.

104
00:08:47,960 --> 00:08:53,840
A state is simply an object, an object that describes your application.

105
00:08:54,290 --> 00:09:02,600
And this state which describes our application is the robots and whatever is entered in the search box.

106
00:09:03,930 --> 00:09:10,620
And state is able to change, we're able to change the value of the search box, the value of the input,

107
00:09:10,770 --> 00:09:16,110
and we're able to change what robots ouray means, what gets displayed.

108
00:09:17,210 --> 00:09:24,920
This is a rule that you just have to remember, props are simply things that come out of state.

109
00:09:26,310 --> 00:09:34,460
So a parent feeds state into a child component, and as soon as the child component component receives

110
00:09:34,470 --> 00:09:39,300
a state, it's a property that child can never change that property.

111
00:09:39,510 --> 00:09:46,700
The parent just tells it what the state is and the child receives it as robots.

112
00:09:47,520 --> 00:09:57,600
So the first thing we need to do is to start being able to use state in our app, the description of

113
00:09:57,600 --> 00:09:59,340
what our state should be.

114
00:10:00,570 --> 00:10:09,000
So let's just do a constant state for now and show you that our state needs to have a robust array and

115
00:10:09,000 --> 00:10:10,890
it needs to have let's call it.

116
00:10:14,440 --> 00:10:21,790
And this is just whatever our search field needs, but in order to use state, we have to go back to

117
00:10:21,790 --> 00:10:25,360
our original way that we created Rijad components.

118
00:10:25,360 --> 00:10:28,030
If you remember this, when we first did create react tap.

119
00:10:29,140 --> 00:10:31,570
We create a class.

120
00:10:32,800 --> 00:10:34,180
And we do that.

121
00:10:35,310 --> 00:10:40,350
By saying export default or export.

122
00:10:46,500 --> 00:10:50,220
Extends react dot component.

123
00:10:51,500 --> 00:10:58,970
It extends the component class and again, we can use shorthand here and just say.

124
00:11:01,310 --> 00:11:03,350
So now we can just remove reac from here.

125
00:11:04,370 --> 00:11:10,010
And this always has a render function.

126
00:11:11,270 --> 00:11:14,750
That has to return something, which is this.

127
00:11:18,860 --> 00:11:22,040
Again, is just the syntax that you have to.

128
00:11:23,070 --> 00:11:23,730
Get used to.

129
00:11:25,020 --> 00:11:31,800
If I say this and I made a mistake here, instead of export, this should say class, so yeah, class

130
00:11:32,040 --> 00:11:36,590
app extends component and then we do export default app.

131
00:11:36,600 --> 00:11:43,700
So again, we're just declaring a class I save and we just have something that says state is assigned

132
00:11:43,710 --> 00:11:45,540
a value but never used.

133
00:11:46,620 --> 00:11:48,190
That's because that's pretty true.

134
00:11:48,210 --> 00:11:52,590
We don't use it, so how can we add state will and react?

135
00:11:52,860 --> 00:11:55,940
We simply do a constructor.

136
00:11:55,950 --> 00:11:58,380
You might remember this from when we spoke about object.

137
00:11:59,490 --> 00:12:04,230
And this constructor in here, we can declare the state.

138
00:12:05,180 --> 00:12:09,470
We simply say this state equals.

139
00:12:11,030 --> 00:12:15,530
And in here, we just put whatever we want our state to have.

140
00:12:21,270 --> 00:12:22,350
So if I save this.

141
00:12:23,950 --> 00:12:31,000
I get this is not allowed before super again, something that you might remember from the Advanced Objects

142
00:12:31,000 --> 00:12:40,270
video, in order to use this, we have to do this weird thing where we call super, which calls the

143
00:12:40,270 --> 00:12:42,130
constructor of component.

144
00:12:43,000 --> 00:12:43,840
If I do this.

145
00:12:45,700 --> 00:12:48,190
And safe, everything's working fine.

146
00:12:49,770 --> 00:12:56,520
And now we have our state, which is robots and search field.

147
00:12:57,470 --> 00:13:04,040
And this state, as I said before, is what describes our app, these are the things that can change

148
00:13:04,040 --> 00:13:08,390
and that's what it is state is something that can change and affect our app.

149
00:13:10,160 --> 00:13:17,150
And they usually live in the parent component, the component that is the parent that just kind of passes

150
00:13:17,150 --> 00:13:18,860
state to different components.

151
00:13:19,550 --> 00:13:30,440
Now, I can access robots not from here, but from this DOD state dot robots and again, just react

152
00:13:30,440 --> 00:13:32,120
syntax that you'll have to get used to.

153
00:13:34,120 --> 00:13:42,400
All right, so everything is working as expected, and you see that our state, which is robots, is

154
00:13:42,400 --> 00:13:44,410
now passed down as props.

155
00:13:44,410 --> 00:13:52,180
So card list accepts robots as props, even though in the app dogs, it's state.

156
00:13:53,210 --> 00:14:00,770
And like I said, because app now owns state, that includes robots, it's allowed to change it.

157
00:14:01,810 --> 00:14:09,070
OK, now the way we can communicate them, we have these two values and ideally in the search box.

158
00:14:10,080 --> 00:14:19,020
I have something called on search change, which, again, is a function that I'm just going to make

159
00:14:19,020 --> 00:14:19,230
up.

160
00:14:20,370 --> 00:14:22,800
This is just a random name that I've created.

161
00:14:23,520 --> 00:14:29,290
And on search change, I want to say that every time the input changes, just like we did with dumb

162
00:14:29,310 --> 00:14:31,590
manipulation, we get an event.

163
00:14:32,460 --> 00:14:37,500
And within this event, I'm going to console dialog, this event.

164
00:14:41,410 --> 00:14:42,430
Created a function.

165
00:14:43,490 --> 00:14:50,660
And I want to any time this input changes to trigger console Dahlborg so we can pass this actually now

166
00:14:50,870 --> 00:14:51,710
I can say.

167
00:14:53,110 --> 00:15:02,770
Search change is on search change, but again, because this is an object we have to say this dot so

168
00:15:02,770 --> 00:15:09,090
that it says this, which is the app dot on search change is searching.

169
00:15:10,100 --> 00:15:10,940
If I save this.

170
00:15:12,370 --> 00:15:14,050
And now go to the search box.

171
00:15:14,530 --> 00:15:16,890
I now have search change.

172
00:15:21,420 --> 00:15:28,860
As a function, so I can just say just like an e-mail, remember, and him all he can do on change HTML.

173
00:15:30,790 --> 00:15:39,670
It's an event we're just listening to any time the input changes, I can say on change equals.

174
00:15:43,870 --> 00:15:50,890
Let's see if that works, I'm getting no errors, if I go back to my app, I open up the console and

175
00:15:50,890 --> 00:15:54,160
I type in something like that, I'm getting the event.

176
00:15:56,640 --> 00:16:04,200
And this is just something you have to remember is that with an event we always have event dot target

177
00:16:04,800 --> 00:16:08,340
dot value, which should give us the value of the.

178
00:16:09,090 --> 00:16:09,870
Let's save that.

179
00:16:11,780 --> 00:16:13,130
And type in something here.

180
00:16:15,130 --> 00:16:18,700
Look at that, we're now noticing the difference as we type.

181
00:16:19,900 --> 00:16:22,530
So let's go over one more time, what just happened?

182
00:16:23,480 --> 00:16:29,600
And again, I know this is tough, this took me a while to get when we first started, but this diagram

183
00:16:29,600 --> 00:16:30,920
really explains it well.

184
00:16:31,990 --> 00:16:36,970
I have my app component, my search box and my card list.

185
00:16:37,900 --> 00:16:44,560
Any time the search bloc changes on change, I'm going to run the function, I'm going to.

186
00:16:45,870 --> 00:16:55,080
Call this function, and the way we call it is we add this remember how when we did Dom events, we

187
00:16:55,110 --> 00:16:58,950
defined the function and then every time the event happens, it would call it.

188
00:16:59,790 --> 00:17:05,849
So we are saying every time the on change event is triggered, called the.

189
00:17:06,750 --> 00:17:14,910
Search function, and if you remember, the search function, which is a prop, is the on search change

190
00:17:15,180 --> 00:17:17,319
function that is defined in the app.

191
00:17:17,400 --> 00:17:19,369
That's how we communicate with the parent.

192
00:17:19,380 --> 00:17:20,579
It triggers the event.

193
00:17:21,210 --> 00:17:26,460
The parent says help run this function and now this function.

194
00:17:27,490 --> 00:17:37,390
Gets read, but now that I have the value of the search input, I can now directly communicate that

195
00:17:37,390 --> 00:17:40,540
search input to the robot's list.

196
00:17:41,050 --> 00:17:41,980
Let's see how that works.

197
00:17:42,640 --> 00:17:47,830
We can create a variable, let's say, filtered robots.

198
00:17:48,880 --> 00:17:53,350
And this will equal the this state.

199
00:17:57,830 --> 00:18:01,880
And these robots, which is Zeray, again, this is how we access state.

200
00:18:03,320 --> 00:18:14,210
Is going to use the filter filtering our way, we give it robots, and now our array will have to return

201
00:18:14,780 --> 00:18:20,450
a condition and the conditions are going to be robots dot name.

202
00:18:22,010 --> 00:18:25,370
And we're going to do something that we haven't seen before, which is to.

203
00:18:26,810 --> 00:18:33,730
Lower case, and this is a method that comes with all strengths and it just makes everything lower case,

204
00:18:33,740 --> 00:18:35,150
and this is good for comparison.

205
00:18:35,150 --> 00:18:38,390
So we don't have to compare capitalized or lowercase.

206
00:18:39,820 --> 00:18:43,780
And if the name of robots, which is now lowercase.

207
00:18:45,770 --> 00:18:46,700
Includes.

208
00:18:48,330 --> 00:18:56,880
Is another method, and again, it's pre-built into JavaScript if it includes the search field.

209
00:18:58,440 --> 00:19:06,600
And again, we want to do two lower case in case, well, in case we use capitals or lower case, it

210
00:19:06,600 --> 00:19:08,970
works both ways and there it is.

211
00:19:09,390 --> 00:19:13,620
If the name of the robots in lowercase includes.

212
00:19:14,640 --> 00:19:23,310
And this does the comparison, if anything, in the string includes two lower case, well then only

213
00:19:23,310 --> 00:19:26,100
return the robots that returns.

214
00:19:26,100 --> 00:19:27,720
True to this, let's save.

215
00:19:28,870 --> 00:19:33,190
Oh, and you see here the how I get the search field there, because, well, it's part of the state.

216
00:19:33,190 --> 00:19:39,280
I have to do this state search field if I save this.

217
00:19:41,440 --> 00:19:47,980
I get that filter robots is assigned a value but never used, but don't worry, we can now console log

218
00:19:47,980 --> 00:19:49,030
this and see what we get.

219
00:19:53,620 --> 00:20:01,840
Let's go back to our app, and if I see something here, I get an error and this is an error that is

220
00:20:01,840 --> 00:20:03,120
very, very confusing.

221
00:20:03,370 --> 00:20:04,840
It is tricky the first time.

222
00:20:04,990 --> 00:20:06,040
But bear with me here.

223
00:20:06,520 --> 00:20:15,430
The problem right now is that the value of this well, it's not referring to the app because the event

224
00:20:16,240 --> 00:20:19,330
happened in the input.

225
00:20:19,990 --> 00:20:27,550
The value of this is well, the input and input doesn't have state robots.

226
00:20:28,300 --> 00:20:32,170
And this is a trick that you always forget.

227
00:20:32,590 --> 00:20:34,810
But just keep this in mind as a rule of thumb.

228
00:20:35,920 --> 00:20:43,690
With anything that comes from react so constructor and render our pre-built and react, any time you

229
00:20:43,690 --> 00:20:49,330
make your own methods on a component, use this syntax.

230
00:20:49,870 --> 00:20:51,250
So error functions.

231
00:20:51,640 --> 00:20:57,660
And this makes sure that the this value is according to where it was created, which is the app.

232
00:20:58,030 --> 00:20:59,260
I know it's confusing.

233
00:20:59,290 --> 00:21:00,570
You can read up more about it.

234
00:21:00,580 --> 00:21:01,830
I'll leave resource for it.

235
00:21:02,140 --> 00:21:03,850
It's a tough topic to get.

236
00:21:04,630 --> 00:21:09,160
But again, rule of thumb, use the arrows if I do this now and I click.

237
00:21:11,050 --> 00:21:11,600
There you go.

238
00:21:11,830 --> 00:21:12,610
I now get.

239
00:21:16,510 --> 00:21:17,830
But here's the thing.

240
00:21:18,130 --> 00:21:24,910
Search field right now, you see that I still have 10 robots, it's not really filtering anything and

241
00:21:24,910 --> 00:21:32,800
that is because my search field is always an empty string in order to update state again, another rule

242
00:21:32,830 --> 00:21:38,170
of react is to do this dot set state.

243
00:21:38,440 --> 00:21:40,840
And it's, again, a method that comes with react.

244
00:21:40,840 --> 00:21:43,750
And any time you want to change state, you always do this.

245
00:21:43,750 --> 00:21:49,230
You don't do this dot state search field equals you never do that.

246
00:21:49,240 --> 00:21:50,950
You have to do this dot.

247
00:21:55,490 --> 00:22:02,120
And within here, we just say search field is and again, we're using an object, so search field is

248
00:22:02,120 --> 00:22:06,260
now going to be event dot target, dot valley.

249
00:22:08,320 --> 00:22:09,400
If I say this.

250
00:22:11,730 --> 00:22:13,410
And go back.

251
00:22:15,060 --> 00:22:19,590
You see that now everything is being filtered.

252
00:22:20,610 --> 00:22:28,430
I'm changing the state so that the search field always gets updated and now we're filtering the robots

253
00:22:28,430 --> 00:22:30,590
according to the changed search field.

254
00:22:33,210 --> 00:22:34,830
OK, so one last thing.

255
00:22:35,900 --> 00:22:42,500
Looking at this, we have the fact that filter robots is still not assigned, and you're right, if

256
00:22:42,500 --> 00:22:48,350
we look at this, we've now communicated the search box with the app and we have the search field constantly

257
00:22:48,350 --> 00:22:48,810
changing.

258
00:22:48,860 --> 00:22:51,890
So now we need to communicate it to the filtered robots.

259
00:22:52,880 --> 00:23:01,780
What we can do is that filtered robots can now be used as props instead of this state, that robots.

260
00:23:02,210 --> 00:23:03,040
So let's do that.

261
00:23:03,050 --> 00:23:06,530
Let's move this down here.

262
00:23:10,270 --> 00:23:16,030
And now we have access to filter robots, and instead of passing this stuff, state that robots, we

263
00:23:16,030 --> 00:23:19,200
simply pass filtered robots.

264
00:23:19,990 --> 00:23:23,220
If I see this, make sure the search bar is saved as well.

265
00:23:23,770 --> 00:23:24,970
And now I go back.

266
00:23:27,510 --> 00:23:29,670
I'm going to close the tab and let's check it out.

267
00:23:33,100 --> 00:23:37,180
Look at that, we have our app working.

268
00:23:37,480 --> 00:23:38,410
How cool is that?

269
00:23:39,810 --> 00:23:42,950
Let's go over it one more time to show you exactly what it does.

270
00:23:45,020 --> 00:23:49,400
We have our app component that has two states.

271
00:23:50,570 --> 00:23:59,030
Robots and search field and because app owns the state, any component that has state uses the class

272
00:23:59,040 --> 00:24:08,300
syntax so they can use the constructor function to create this DOT state and this state is what changes

273
00:24:08,300 --> 00:24:08,830
in an app.

274
00:24:08,840 --> 00:24:11,030
It's what describes the app.

275
00:24:11,300 --> 00:24:14,480
Remember when I said the virtual dorm is just a JavaScript object?

276
00:24:14,510 --> 00:24:23,210
The virtual dom is just an object that collects this entire state and we act uses this state to render

277
00:24:23,660 --> 00:24:30,590
and pass them down as props to these components so that these components that are just pure functions

278
00:24:30,590 --> 00:24:31,880
can just render.

279
00:24:32,760 --> 00:24:37,470
And we always know that the app is going to look the same because, well, they're just simple, pure

280
00:24:37,470 --> 00:24:37,950
functions.

281
00:24:39,240 --> 00:24:46,170
We manage the state and here the app is the only thing that can change the state, but it can pass down

282
00:24:46,170 --> 00:24:47,670
things such as props.

283
00:24:48,300 --> 00:24:53,640
So we pass down on social change to the search box and the search box.

284
00:24:54,000 --> 00:25:00,150
Every time there's an odd change on the input, it lets the app know, hey, there was a change on this

285
00:25:00,150 --> 00:25:00,590
function.

286
00:25:00,870 --> 00:25:07,380
It runs the function with the event and updates the state of the search feel to whatever we type.

287
00:25:09,470 --> 00:25:15,410
Now, with the information that we have from the search box, we can now communicate to the card list

288
00:25:15,410 --> 00:25:25,820
and tell it, hey, I want you to filter the robot's state to now have only what includes in the search

289
00:25:25,820 --> 00:25:26,090
field.

290
00:25:26,870 --> 00:25:32,900
And instead of passing the this state, our robots, we just passed the filtered robots.

291
00:25:34,990 --> 00:25:38,920
You might be asking yourself what robots never really changes, does it?

292
00:25:38,930 --> 00:25:43,240
We always just create a new array called filtered robots and we always pass that down.

293
00:25:43,540 --> 00:25:47,960
Does this need to be part of the state and right now?

294
00:25:48,280 --> 00:25:51,700
Not really, because we're just have a hardcoded robot.

295
00:25:52,030 --> 00:25:55,680
But when we get later on into the course, you'll see that that's not the case.

296
00:25:56,080 --> 00:26:02,500
Most of the time you're getting the users or robots from another place over the Internet, in which

297
00:26:02,500 --> 00:26:11,770
case we will need robots to change from an empty array to an array after we go and grab all of our users.

298
00:26:14,610 --> 00:26:20,850
All right, that was a lot I know, I know it's a lot of information, a lot of new syntax, but as

299
00:26:20,850 --> 00:26:25,710
you can see with a few lines of code, we build a pretty awesome app.

300
00:26:26,250 --> 00:26:30,570
In the next video, we're going to finish this up and finalize our app.

301
00:26:30,570 --> 00:26:33,000
So it looks as pretty as this.

302
00:26:33,420 --> 00:26:35,100
I'll see in that one by.

