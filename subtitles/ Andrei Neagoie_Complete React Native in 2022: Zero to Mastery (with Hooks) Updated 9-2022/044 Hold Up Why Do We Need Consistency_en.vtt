WEBVTT
1
00:00:00.640 --> 00:00:06.430
So it's time to reflect a bit and by reflect, I mean, I just really want to make sure you grasp this

2
00:00:06.430 --> 00:00:12.880
concept of the spacer component, because we're going to be applying the same variation model to multiple

3
00:00:12.880 --> 00:00:13.870
baseline components.

4
00:00:13.870 --> 00:00:17.080
And it's important to understand why exactly we're doing this.

5
00:00:18.000 --> 00:00:24.000
Now, if we look at holistically how components work, right holistically, components work by supplying

6
00:00:24.000 --> 00:00:29.880
you kind of the ability to put things on the screen in a certain way.

7
00:00:31.070 --> 00:00:32.870
If we look at a screen, right?

8
00:00:34.080 --> 00:00:38.130
This was a phone screen, and we have two components here, a component A, component B, component

9
00:00:38.130 --> 00:00:41.220
C, now component A, B and C.

10
00:00:42.440 --> 00:00:47.990
They kind of serve a function, and when we talk about a function, it means they're visualizing something,

11
00:00:48.410 --> 00:00:53.320
maybe a picture B, maybe a picture and see maybe text and D, maybe a button.

12
00:00:53.330 --> 00:00:53.680
Right.

13
00:00:53.750 --> 00:00:54.350
Right here.

14
00:00:54.350 --> 00:00:55.270
There's a button you press.

15
00:00:55.430 --> 00:00:56.900
This is not a great picture, by the way.

16
00:00:57.290 --> 00:01:04.370
But what I'm trying to get at here is that even with these visualizations, when we look at how we get

17
00:01:04.370 --> 00:01:05.300
placed on the screen.

18
00:01:06.340 --> 00:01:11.500
At the end of the day, the last thing you want to do is, well, I'm going to put an image here and

19
00:01:11.500 --> 00:01:14.710
I'm going to put a button here and I'm going to style this button specifically for the screen.

20
00:01:14.710 --> 00:01:19.240
I'm going to style this button for this other screen and a style this text for the screen and this text

21
00:01:19.240 --> 00:01:20.000
for the other screen.

22
00:01:20.680 --> 00:01:26.050
No, you want to create components that last the test of time that serve a functionality that can be

23
00:01:26.050 --> 00:01:27.390
used across the code base.

24
00:01:27.620 --> 00:01:27.940
Right.

25
00:01:28.030 --> 00:01:30.460
And this spacer component is just the first step to that.

26
00:01:30.910 --> 00:01:36.640
The spacer component is like a very basic interface in which we're saying, OK, your only job is either

27
00:01:36.640 --> 00:01:39.020
to give a margin top left bottom or right.

28
00:01:39.070 --> 00:01:40.030
That's all you do.

29
00:01:40.600 --> 00:01:40.960
Right.

30
00:01:41.350 --> 00:01:43.390
And we'll give you a position in a size.

31
00:01:43.390 --> 00:01:47.470
And based on that position and size, you're going to either add a margin top, a margin bottom marginal

32
00:01:47.470 --> 00:01:53.180
left, a margin right around this thing instead of having to give the thing itself a margin.

33
00:01:53.440 --> 00:02:00.370
Now, it's not to say it's perfectly correct to give the thing itself a margin, but in terms of consistency

34
00:02:00.370 --> 00:02:07.270
and ability to have consistent styling, I would say, or consistent pattern, I like the spacer component

35
00:02:07.270 --> 00:02:10.900
for that consistency purpose because I always know, OK, I need to push this down a bit.

36
00:02:10.910 --> 00:02:16.000
Well, I'm going to use a spacer component because I can then say to that spacer component, well,

37
00:02:16.240 --> 00:02:22.300
hey, like, for instance, in here, I could say, well, hey, if you're an droid, like over here,

38
00:02:22.300 --> 00:02:24.610
well, I could add like an inline if statement.

39
00:02:24.820 --> 00:02:32.350
Hey, if you're Android, right, do a small otherwise do a large for iOS.

40
00:02:32.350 --> 00:02:38.800
And it becomes very clear like why this is happening, why this is happening and you can read it in

41
00:02:38.800 --> 00:02:43.330
the UI, whereas in a stylesheet, you know, it's going to be nested all the way at the bottom and

42
00:02:43.330 --> 00:02:46.990
then you're going to go look and kind of not understand why exactly this is happening.

43
00:02:47.150 --> 00:02:48.070
It's one of those things.

44
00:02:48.670 --> 00:02:50.620
But then we get to the next part of this, right.

45
00:02:50.770 --> 00:02:52.270
Why enforced consistency?

46
00:02:53.020 --> 00:02:54.730
And we can look over here at our text.

47
00:02:54.730 --> 00:02:55.000
Right.

48
00:02:55.030 --> 00:03:02.560
Our text is currently coming in from Riak Native and our textiles really aren't being addressed.

49
00:03:02.590 --> 00:03:02.950
Right.

50
00:03:03.070 --> 00:03:09.760
We have this title over here that we're giving all of these properties and we maybe have some text at

51
00:03:09.760 --> 00:03:12.970
a certain point that's going to have to interact a different way, like over here.

52
00:03:13.360 --> 00:03:18.490
And so because of that, our text really doesn't have consistent styling.

53
00:03:18.490 --> 00:03:23.080
We don't want to go around the code base creating title components that are going to have very specific

54
00:03:23.080 --> 00:03:24.760
styles for very specific title.

55
00:03:24.910 --> 00:03:31.780
No, we want to define what a title looks like once and once only, and then we want to use that across

56
00:03:31.780 --> 00:03:32.410
the code base.

57
00:03:32.530 --> 00:03:37.240
Right now in the restaurant card, there's only one instance of a title because this is the only feature

58
00:03:37.240 --> 00:03:37.840
we've built.

59
00:03:38.020 --> 00:03:40.150
But it's also like it's not a real title.

60
00:03:40.150 --> 00:03:42.310
It's the restaurant card title.

61
00:03:42.400 --> 00:03:42.760
Right.

62
00:03:43.120 --> 00:03:46.600
Imagine if your titles in your application were actually this small.

63
00:03:46.810 --> 00:03:47.200
No.

64
00:03:47.200 --> 00:03:48.670
You want them to be a bit bigger.

65
00:03:48.940 --> 00:03:57.760
So semantically, we're talking about expanding the reasoning around text to be broader than just inline

66
00:03:57.760 --> 00:04:00.490
components like the title component in the restaurant card.

67
00:04:00.670 --> 00:04:04.210
No, we want a broader definition of the text component.

68
00:04:04.300 --> 00:04:06.460
And that's why I dropped this little nugget in here.

69
00:04:06.460 --> 00:04:06.820
Right.

70
00:04:06.990 --> 00:04:13.660
You may have noticed this is not a real Riak native property variant label is not really native.

71
00:04:13.660 --> 00:04:14.350
No, no.

72
00:04:14.560 --> 00:04:20.290
This is something we're going to build variant label and it's going to take into account all of those

73
00:04:20.290 --> 00:04:22.390
different things that we'll be talking about.

74
00:04:22.660 --> 00:04:27.880
Now, with that said, we're going to be building a text component, a custom text component that's

75
00:04:27.880 --> 00:04:34.300
going to take invariance and we're going to get rid of the need to build these inline components like

76
00:04:34.300 --> 00:04:37.960
title that's going to have a very specific type of styling and whatever.

77
00:04:37.960 --> 00:04:40.210
No, we want consistent text across the code base.

78
00:04:40.420 --> 00:04:45.610
And so I wanted to talk about this consistency because it's very important to understand what the purpose

79
00:04:45.610 --> 00:04:49.060
of building something like this space component is.

80
00:04:49.060 --> 00:04:49.390
Right.

81
00:04:50.110 --> 00:04:52.690
This is quintessential complexity.

82
00:04:52.690 --> 00:04:57.670
We're adding complexity to the component to understand how to form styles.

83
00:04:57.820 --> 00:04:59.620
And there's different ways of doing this.

84
00:04:59.800 --> 00:05:06.670
But this way, this way, we're able to create different variations very easily based on just two simple

85
00:05:06.670 --> 00:05:08.410
properties, props and size.

86
00:05:08.560 --> 00:05:12.730
And then we can go to the theme and get the proper spacing right.

87
00:05:13.150 --> 00:05:14.950
So you could have called this value.

88
00:05:14.950 --> 00:05:16.150
You could have called the spacing.

89
00:05:16.150 --> 00:05:18.250
You could have called this whatever under the sun.

90
00:05:18.250 --> 00:05:24.700
But the end goal is that we got this margin bottom right, left or top based on a positional value.

91
00:05:25.000 --> 00:05:25.360
Right.

92
00:05:26.020 --> 00:05:29.920
And we got the size based on a small, medium, large factor.

93
00:05:30.490 --> 00:05:37.600
And so with that, we're now going to extend this same principle out to typography text, specifically

94
00:05:37.600 --> 00:05:38.800
write the text component.

95
00:05:38.950 --> 00:05:44.710
We're going to build the text component that's able to do similar things based on a simple variant,

96
00:05:44.710 --> 00:05:52.180
whether you see label caption or whatever else, we're going to get the styles, the correct styles

97
00:05:52.180 --> 00:05:53.590
for it based off of that.

