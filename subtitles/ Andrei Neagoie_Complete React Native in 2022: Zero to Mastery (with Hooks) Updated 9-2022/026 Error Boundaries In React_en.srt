1
00:00:01,569 --> 00:00:04,870
Let's add one more tool to our knowledge and react.

2
00:00:05,980 --> 00:00:14,560
And React 16, which was a new version of React, introduced something called error boundaries, and

3
00:00:14,560 --> 00:00:21,130
it solved the problem that reactor had previously, which was if there was some sort of an air within

4
00:00:21,130 --> 00:00:26,320
a component, for whatever reason, there wasn't a graceful way to handle it.

5
00:00:27,070 --> 00:00:33,010
On the next render, you'd get all these cryptic errors and things just wouldn't work out nicely.

6
00:00:33,040 --> 00:00:40,960
And for a user, you want to make sure that even if a part of your componentry breaks, you can still

7
00:00:40,960 --> 00:00:42,910
have a nice UI experience.

8
00:00:42,910 --> 00:00:48,040
Maybe a piece of text says something went wrong but not have the app break.

9
00:00:48,700 --> 00:00:53,470
So in this video we're going to talk about er boundaries and apply it to our friends up.

10
00:00:57,060 --> 00:01:04,290
The first thing I want to do is in the component, I'm going to add a new file and we'll call this component

11
00:01:04,650 --> 00:01:07,080
error boundry.

12
00:01:08,280 --> 00:01:14,670
And just serves as a reminder, you do need Riak 16 or higher for this to work, so make sure that in

13
00:01:14,670 --> 00:01:18,990
your package, that JSON file, that you have the right version of react.

14
00:01:20,380 --> 00:01:25,900
Now, in here, we can do our regular import react.

15
00:01:28,890 --> 00:01:37,020
Component, and we're importing that from the react package and then finally, we have a class of error

16
00:01:37,260 --> 00:01:40,950
boundary that extends the rear component.

17
00:01:43,750 --> 00:01:45,850
And within here, we have the constructor.

18
00:01:48,860 --> 00:01:55,640
And again, we call super here, and just so we have access to the props.

19
00:01:57,510 --> 00:02:00,090
We'll have to within the constructor.

20
00:02:01,410 --> 00:02:10,070
Have the props parameter and then finally for this state, we're going to create a property called has

21
00:02:11,060 --> 00:02:13,880
error and for now it's going to be false.

22
00:02:16,160 --> 00:02:22,430
And let's also not forget to export default Arab boundaries, so we have access to it.

23
00:02:24,160 --> 00:02:29,290
And have our default render here that will return for us.

24
00:02:30,770 --> 00:02:32,360
Hmm, what should I return?

25
00:02:33,140 --> 00:02:41,030
Well, ideally, with this er boundry component, we can wrap the component or we can wrap a component

26
00:02:41,030 --> 00:02:45,530
such as the Kahless component with an error boundary component.

27
00:02:46,010 --> 00:02:51,020
And if the Kahless component fails, we can catch it in the error boundary.

28
00:02:52,290 --> 00:02:57,570
I know this is a little bit hard to follow, react does have really good documentation on this, so

29
00:02:57,570 --> 00:02:59,520
you can always read up on it later.

30
00:02:59,520 --> 00:03:02,390
But stick with me, trust me, it's going to make sense.

31
00:03:03,150 --> 00:03:12,300
So the first thing we want to do is we want to check if this thought state dot has there is equal to

32
00:03:12,300 --> 00:03:12,630
true.

33
00:03:14,060 --> 00:03:22,970
So if there is some sort of an error, then we want to return this default state of how can we gracefully?

34
00:03:24,240 --> 00:03:29,670
Display something to the user that makes it meaningful to them, even though we weren't able to display

35
00:03:29,670 --> 00:03:33,360
what we intended originally in our case, we can just say.

36
00:03:34,960 --> 00:03:43,510
That we have an H1 of groups that is not good for the user to see.

37
00:03:44,540 --> 00:03:48,500
So we're saying here that if for some reason there's an air.

38
00:03:49,700 --> 00:03:52,790
We're going to just spit out an H1 tag.

39
00:03:53,820 --> 00:03:56,490
Otherwise, and we could just do a return here.

40
00:03:58,480 --> 00:04:06,430
We're going to say that this props dot children Warrender again, remember, because children will be

41
00:04:06,430 --> 00:04:11,950
anything that's in between error, boundry in our case is probably probably going to be the Carlist.

42
00:04:13,180 --> 00:04:19,000
So render the children whatever is inside of our boundry, otherwise render each one.

43
00:04:19,630 --> 00:04:21,820
Now, how are we going to be able to change?

44
00:04:21,820 --> 00:04:29,560
This has er well with Riak 16 we have a new Life-cycle method that was introduced.

45
00:04:30,690 --> 00:04:33,990
And it's called Component Did Catch.

46
00:04:36,460 --> 00:04:43,540
And this component, Dick Catch is kind of like the tri cash block in JavaScript, if anything airs

47
00:04:43,540 --> 00:04:43,840
out.

48
00:04:45,120 --> 00:04:52,770
Ill run this life-cycle hook and this life-cycle hook actually gets a couple of parameters, that is

49
00:04:52,770 --> 00:04:54,540
the error and the info.

50
00:04:55,820 --> 00:05:03,950
But in our case, we just want to say that that this set state is going to now, if this component arose

51
00:05:03,950 --> 00:05:07,600
out, is going to have has error equal to true.

52
00:05:08,210 --> 00:05:12,530
So if that ever gets triggered, we're going to render the H1 tag.

53
00:05:13,770 --> 00:05:14,910
All right, let's save.

54
00:05:15,900 --> 00:05:20,730
And let's go to James, let's import our air boundaries.

55
00:05:25,110 --> 00:05:26,400
From our component's.

56
00:05:32,090 --> 00:05:40,130
And now we can use this let's use it over here for the card list, so if something goes on with the

57
00:05:40,130 --> 00:05:45,530
card list, we want to have some sort of a graceful exit bounce.

58
00:05:46,490 --> 00:05:47,960
So we'll say our boundry.

59
00:05:50,320 --> 00:05:55,780
And because we're rendering this props our children, if we wrap it like this.

60
00:05:57,130 --> 00:06:02,860
And nothing goes on, it'll still render card list, so let's say let's see if we made any mistakes.

61
00:06:03,040 --> 00:06:04,130
So far, so good.

62
00:06:04,600 --> 00:06:06,220
Let's go back to our app.

63
00:06:07,630 --> 00:06:13,630
And all right, let's look at the console, no errors here if we refresh, no errors here.

64
00:06:13,870 --> 00:06:17,080
If I type stuff, no errors, that's good.

65
00:06:19,120 --> 00:06:26,140
Now, with this air boundary, if anything in the Carlist fails, it's going to catch it and display

66
00:06:26,140 --> 00:06:27,300
our error message.

67
00:06:28,000 --> 00:06:28,960
So let's see what I mean.

68
00:06:29,710 --> 00:06:38,230
If I go in to Carlist here and now and here, if we say if for now, we'll just say true.

69
00:06:39,600 --> 00:06:47,070
We're going to assume that, Cardless, there was an error so we can do that by saying throw a new error,

70
00:06:47,820 --> 00:06:49,960
we'll say no.

71
00:06:51,680 --> 00:06:58,190
If we save this, everything is still working, if I go back, you see that I'm still getting the air,

72
00:06:58,430 --> 00:06:59,670
says uncute error.

73
00:06:59,750 --> 00:07:05,630
No, and at the bottom it says the above error occurred in the Kahless component.

74
00:07:05,630 --> 00:07:11,560
Reacts will try to recreate this componentry from scratch using the air boundary you provided everybody.

75
00:07:12,260 --> 00:07:13,880
OK, that's great.

76
00:07:13,880 --> 00:07:16,460
But I still see the error.

77
00:07:16,790 --> 00:07:23,060
And that is because we're running right now in development mode for a reactor up.

78
00:07:23,720 --> 00:07:27,050
They want to show us whenever there's an error in our component.

79
00:07:27,980 --> 00:07:35,210
Airborne drugs are really useful when you put your apps into production where you don't have this detailed

80
00:07:35,210 --> 00:07:40,240
logs of what errors you have, your users are never going to see this.

81
00:07:40,490 --> 00:07:45,010
So if I refresh you really fast, do you see that right over here?

82
00:07:45,020 --> 00:07:45,800
How is said?

83
00:07:46,400 --> 00:07:48,140
Oops, that is not good.

84
00:07:48,410 --> 00:07:49,850
Oops, that is not good.

85
00:07:50,390 --> 00:07:53,930
So in production, users are going to see that.

86
00:07:54,980 --> 00:08:01,670
But for our case, the intended behavior for Creative React app in development is to show us the errors.

87
00:08:01,880 --> 00:08:05,570
But with air boundaries, we have that extra safety during production.

88
00:08:07,720 --> 00:08:08,530
That's it for now.

89
00:08:08,800 --> 00:08:09,710
I'll see you in the next one.

90
00:08:10,450 --> 00:08:10,810
Bye bye.

