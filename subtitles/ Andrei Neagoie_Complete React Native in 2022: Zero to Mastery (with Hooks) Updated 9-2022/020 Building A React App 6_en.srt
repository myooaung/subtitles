1
00:00:01,340 --> 00:00:07,610
I want to add one final thing that we've kind of overlooked up until this point, because, well, I

2
00:00:07,610 --> 00:00:13,460
don't want to bog you down with too many things if we take a look at our project.

3
00:00:15,080 --> 00:00:15,920
Well, it's.

4
00:00:16,930 --> 00:00:17,950
It's a lot of files.

5
00:00:19,000 --> 00:00:25,450
Even though it's a simple app, you can imagine how bigger and bigger and bigger this source file can

6
00:00:25,450 --> 00:00:30,010
get, an organization is a big part of working on projects.

7
00:00:30,910 --> 00:00:36,880
Most applications will be way bigger than the ones that we've built, and we need a good way to organize

8
00:00:36,880 --> 00:00:37,210
these.

9
00:00:37,210 --> 00:00:40,130
And folder structure is one of the most important things.

10
00:00:40,540 --> 00:00:42,310
So let's clean up this code.

11
00:00:42,430 --> 00:00:46,330
I'll show you what I would do if I was working on this application.

12
00:00:46,330 --> 00:00:48,730
And I want to make it more accessible.

13
00:00:48,730 --> 00:00:49,570
That is cleaner.

14
00:00:49,570 --> 00:00:52,530
So when other people come on the team, they understand it.

15
00:00:52,540 --> 00:00:56,050
And also I can keep growing this code base.

16
00:00:59,170 --> 00:01:03,190
First thing I will do is I'll create a few folders one.

17
00:01:04,360 --> 00:01:05,440
Is going to be called.

18
00:01:06,920 --> 00:01:14,360
Components and these are the components that we've built, such as Carlist search box and Skrull, the

19
00:01:14,360 --> 00:01:19,940
second one is going to be called containers and containers.

20
00:01:20,840 --> 00:01:28,640
Are these smart components, the containing components that have state in them, that have lifecycle

21
00:01:28,640 --> 00:01:35,270
hooks, that have the class syntax, you see these components or these containers.

22
00:01:35,540 --> 00:01:39,280
We can't use a pure function with them because technically they're not pure.

23
00:01:39,620 --> 00:01:44,450
They have state that they modify within these functions.

24
00:01:44,450 --> 00:01:45,220
And that's OK.

25
00:01:45,530 --> 00:01:52,670
It's impossible to have just pure functions because most of the time, while we may need to make requests

26
00:01:52,670 --> 00:01:53,690
to the outside world.

27
00:01:54,990 --> 00:01:56,670
But these components are special.

28
00:01:56,700 --> 00:02:01,980
We're going to call them containers, they contain things, and they just passed out state to components.

29
00:02:03,430 --> 00:02:06,940
Now we can just say that we're going to move.

30
00:02:08,210 --> 00:02:13,130
Access to now be in containers.

31
00:02:14,790 --> 00:02:18,840
We're also going to say, yes, we're going to move it to be in.

32
00:02:20,490 --> 00:02:21,530
Containers as well.

33
00:02:25,270 --> 00:02:31,510
And then the components, the simple functions, pure functions that we've created, search box, Skrull

34
00:02:31,780 --> 00:02:35,140
and Cardless, well, these can be in components.

35
00:02:37,090 --> 00:02:39,910
Let's just open up the folder and make this simpler.

36
00:02:41,060 --> 00:02:50,820
Going to close the tab, open up Wrobel friends, and let's open up source will say that scroll search

37
00:02:50,820 --> 00:02:51,360
box.

38
00:02:52,680 --> 00:02:58,080
Card and card list, which are just pure functions, are inside of components.

39
00:02:59,260 --> 00:03:06,940
Now, if you remember, our font is also part of the app file, so we'll move that in there as well

40
00:03:07,150 --> 00:03:08,530
because it's defined in their.

41
00:03:09,900 --> 00:03:15,240
With that, let's go back to our map and, well, now we have a lot of fails because.

42
00:03:16,480 --> 00:03:18,490
These now refer to different parts.

43
00:03:19,800 --> 00:03:24,660
We don't app well, lives in a different folder than Carlist in search box and scroll.

44
00:03:25,850 --> 00:03:35,030
The way we do that is we use dot dot, which means leave the folder or go to the folder and then from

45
00:03:35,030 --> 00:03:35,390
there.

46
00:03:36,640 --> 00:03:37,870
Go into the containers.

47
00:03:40,290 --> 00:03:48,710
Or sorry, go into from the containers, so we're apt jazzes, I'm going to leave, which is dot dot

48
00:03:49,020 --> 00:03:54,120
and then once I got here, the folder level, I'm going to say component's.

49
00:03:55,490 --> 00:03:58,420
And I can do the same for the rest of them as well.

50
00:04:05,320 --> 00:04:05,770
Safe.

51
00:04:06,640 --> 00:04:08,410
And we also have.

52
00:04:09,590 --> 00:04:16,670
Index thugs that now is referring to app that lives in containers, so again, because we're now leaving

53
00:04:16,670 --> 00:04:23,060
a folder, we're in the same neighborhood while we can just do dot containers.

54
00:04:28,120 --> 00:04:31,070
And I spelled out wrong good spelling by me.

55
00:04:31,600 --> 00:04:32,680
Everything looks fine.

56
00:04:32,950 --> 00:04:34,390
Let's go back to our website.

57
00:04:35,940 --> 00:04:36,550
There you go.

58
00:04:36,690 --> 00:04:38,190
Everything is scrolling nicely.

59
00:04:39,750 --> 00:04:48,540
OK, so we have a nice folder structure here, things have cleaned up and we also have scroll down and

60
00:04:48,540 --> 00:04:51,510
I think we just have an extra copy of it so we can just.

61
00:04:52,910 --> 00:04:54,680
Might have made a copy of that.

62
00:04:55,610 --> 00:04:58,840
Make sure everything still works, yeah, everything still works.

63
00:05:01,500 --> 00:05:08,700
We want to remove a couple of spaces here that we've done, we also notice a few areas, so not necessarily

64
00:05:08,700 --> 00:05:10,050
areas, but stylistic things.

65
00:05:10,050 --> 00:05:15,880
For example, with the filter, I say filter the robots and iterate through the robots.

66
00:05:15,900 --> 00:05:17,380
That doesn't really make sense, does it?

67
00:05:17,430 --> 00:05:17,820
Should be.

68
00:05:18,120 --> 00:05:21,900
Each item is a robot user that we get.

69
00:05:25,490 --> 00:05:27,290
Still the same, no errors.

70
00:05:28,240 --> 00:05:31,630
I also see a bit of cleaning that can be done with.

71
00:05:32,710 --> 00:05:39,400
With using this state a lot, we can just say again, using the structure, we can say const.

72
00:05:41,980 --> 00:05:45,460
Robots and search field, we're doing the structuring.

73
00:05:45,700 --> 00:05:46,630
He calls this.

74
00:05:48,390 --> 00:05:49,380
Dot St..

75
00:05:50,850 --> 00:05:59,370
And now I can remove this state from here, I can't remove this dust from here and from.

76
00:06:00,540 --> 00:06:05,400
All the other places that we're using this state and the render by save.

77
00:06:06,530 --> 00:06:10,370
Everything still works, but the code is much cleaner.

78
00:06:11,580 --> 00:06:16,510
We also noticed that within here, a robust length equals zero.

79
00:06:16,530 --> 00:06:20,690
There's actually an easy way of doing this and again is just stylistic.

80
00:06:21,030 --> 00:06:22,770
This is going to equal zero.

81
00:06:23,850 --> 00:06:31,020
So if this is zero, that's going to evaluate in JavaScript to false, so we can just say the opposite.

82
00:06:31,180 --> 00:06:32,240
Remember the syntax.

83
00:06:32,250 --> 00:06:40,110
So if this is zero, which is going to be false, turn it into true so that if there's no robots, we're

84
00:06:40,110 --> 00:06:40,500
loading.

85
00:06:42,260 --> 00:06:48,350
Safe, and that's just still work, and then finally, if you see NFL statement.

86
00:06:50,010 --> 00:06:52,950
Well, we can do a ternary can we we can say.

87
00:06:55,420 --> 00:06:58,900
We turn robots if there's robots.

88
00:07:02,410 --> 00:07:04,180
Return this.

89
00:07:05,540 --> 00:07:06,580
Let's see if that still works.

90
00:07:08,940 --> 00:07:09,790
We don't need that extra.

91
00:07:14,070 --> 00:07:19,030
Look at that, it still works and you can see now that things are much cleaner.

92
00:07:19,080 --> 00:07:20,460
We have an app.

93
00:07:21,580 --> 00:07:31,690
That renders all our things for us and to finish off remember package Dodgson, how we had some pre-built

94
00:07:31,690 --> 00:07:35,860
scripts and we had this build command.

95
00:07:36,160 --> 00:07:42,430
If I stop this now and I do npm build or npm run build.

96
00:07:47,110 --> 00:07:53,470
While this is building, they've created a new folder called Built and Within Here.

97
00:07:54,640 --> 00:08:00,010
We have all our files, but this time optimized, what does that mean?

98
00:08:00,040 --> 00:08:04,270
Well, if we go to static and go to James, look at that.

99
00:08:05,360 --> 00:08:07,590
Everything is minified for us.

100
00:08:08,060 --> 00:08:17,960
Our success is optimized and everything that we need to deploy the website is in this folder so we can

101
00:08:17,960 --> 00:08:20,840
now take this built folder and put it anywhere.

102
00:08:20,960 --> 00:08:24,320
So it's on the Internet and it even gives you some good information.

103
00:08:24,560 --> 00:08:26,720
So now we have this optimized build.

104
00:08:27,320 --> 00:08:28,760
We don't have to minifie it.

105
00:08:28,760 --> 00:08:30,920
We don't have to do all these optimization.

106
00:08:31,370 --> 00:08:36,440
It goes through Bable so that we can use import statements in the browsers and now this build folder

107
00:08:36,440 --> 00:08:38,330
can now be deployed anywhere.

108
00:08:40,309 --> 00:08:45,980
Like I said, create react app takes away all the pain of the setup, everything is done for you.

109
00:08:45,980 --> 00:08:52,490
You can just write code, use, react components from around the web to build beautiful websites.

110
00:08:55,150 --> 00:09:00,820
I hope you're excited about react as I am, this is why it's such a popular tool and this is why so

111
00:09:00,820 --> 00:09:02,500
many companies now are using it.

112
00:09:03,580 --> 00:09:05,290
I'll see in the next one, bye bye.

