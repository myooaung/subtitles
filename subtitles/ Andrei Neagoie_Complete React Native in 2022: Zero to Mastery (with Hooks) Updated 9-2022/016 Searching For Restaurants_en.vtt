WEBVTT
1
00:00:00.560 --> 00:00:07.430
Last we left off, we hooked up our search component all the way into the location context, so by triggering

2
00:00:07.430 --> 00:00:14.120
a search, we trigger an update in the location context that will go and fetch the location of what

3
00:00:14.120 --> 00:00:17.690
we filled in and subsequently track all of the state.

4
00:00:17.690 --> 00:00:21.640
And we had console logs to make sure that what we were getting made sense.

5
00:00:21.950 --> 00:00:29.150
Now, the next step is our restaurant context is currently hooked up to no location at all.

6
00:00:29.150 --> 00:00:32.420
So it's defaulting a location currently in the service.

7
00:00:32.420 --> 00:00:33.950
Right, right here.

8
00:00:33.980 --> 00:00:35.470
It's being defaulted.

9
00:00:35.510 --> 00:00:37.400
So this is not something that we want.

10
00:00:37.610 --> 00:00:40.700
But this also means that when we refresh here.

11
00:00:41.680 --> 00:00:46.660
There's not going to be any restaurants, we're just not going to have anything, so in order for us

12
00:00:46.660 --> 00:00:54.400
to figure out the best way to retrieve restaurants, what we need to do is we need to get location in

13
00:00:54.400 --> 00:00:54.670
here.

14
00:00:55.150 --> 00:01:01.660
And so one way of doing that is to say consed location context is equal to use context.

15
00:01:02.200 --> 00:01:11.100
And then we can put location context in here so we can grab use context from here and then we can grab

16
00:01:11.110 --> 00:01:13.420
location context by doing import.

17
00:01:14.680 --> 00:01:16.030
Location context.

18
00:01:17.390 --> 00:01:27.620
And then we'll do from that location, location, context, and we'll grab the EU's context here and

19
00:01:27.620 --> 00:01:30.790
what we can grab off of it, basically all we need is location.

20
00:01:30.920 --> 00:01:34.400
So we'll add location to this part.

21
00:01:35.090 --> 00:01:37.340
And what will happen is we'll reload.

22
00:01:37.730 --> 00:01:43.530
And what we'll see happen is that the default location should theoretically come in.

23
00:01:44.300 --> 00:01:46.430
Now, why isn't that occurring?

24
00:01:46.460 --> 00:01:52.460
Well, one thing to note here and one thing that I noted is we don't need a use effect in our location

25
00:01:52.460 --> 00:01:55.310
context, but we didn't really solve for that just yet.

26
00:01:55.320 --> 00:02:00.920
So if we go into our search component, one thing we need to add here is a use effect.

27
00:02:01.700 --> 00:02:07.430
And that use effect is basically what's going to trigger search for us.

28
00:02:07.440 --> 00:02:12.650
So we're going to add the use effect here and we're going to say, hey, when the search bar mounts,

29
00:02:13.550 --> 00:02:18.820
when the search bar mounts, let's quickly do a search of what we already have.

30
00:02:19.100 --> 00:02:24.190
So the search keyword, let's quickly do a search of the search keyword.

31
00:02:24.920 --> 00:02:30.280
And so that's going to allow us to render out for the very first location.

32
00:02:30.290 --> 00:02:38.390
So if we trigger this, what we should end up seeing is inside of location context if we open up our

33
00:02:38.390 --> 00:02:38.990
terminal.

34
00:02:40.120 --> 00:02:44.920
If we console out, log the results here, console that log result.

35
00:02:45.870 --> 00:02:52.020
What we're going to see is that we're getting a longitude, latitude, amazing, why isn't our.

36
00:02:52.960 --> 00:02:56.710
Why isn't our restaurant context actually working then?

37
00:02:57.160 --> 00:03:00.910
Well, it's getting longitude, latitude as an object.

38
00:03:01.210 --> 00:03:05.430
It's not getting it as a proper formatted string, right.

39
00:03:05.440 --> 00:03:10.750
Remember, we have to do longitude, latitude as a comma separated value where we had longitude, latitude,

40
00:03:11.320 --> 00:03:12.310
kind of like that.

41
00:03:12.940 --> 00:03:17.290
And so right now we're getting our location, but we kind of need to format it.

42
00:03:17.290 --> 00:03:24.820
So we'll see const location string is equal to and then we can formulate a string by doing a template

43
00:03:24.820 --> 00:03:29.650
string and we can do location, dot, lap, comma.

44
00:03:30.490 --> 00:03:33.340
And then we'll do location, thought longitude.

45
00:03:34.310 --> 00:03:38.510
And we'll take that location string and we'll pass it in to retrieve restaurants.

46
00:03:39.500 --> 00:03:44.990
And so that in itself, let's check it out, console that log, location, string.

47
00:03:45.970 --> 00:03:48.740
That in itself should give us what we need.

48
00:03:48.760 --> 00:03:52.750
So let's go look terminal thirty seven, minus one, twenty two.

49
00:03:53.200 --> 00:03:55.060
Let's quickly go look at our marks.

50
00:03:55.570 --> 00:03:57.550
And it's thirty seven.

51
00:03:58.060 --> 00:03:58.780
Minus one.

52
00:03:58.780 --> 00:03:59.560
Twenty two.

53
00:04:00.410 --> 00:04:02.100
Four one one five.

54
00:04:02.150 --> 00:04:05.210
OK, so now we're formatting the correct string.

55
00:04:07.150 --> 00:04:09.460
And we have the correct location string.

56
00:04:10.710 --> 00:04:13.920
So why isn't it retrieving the restaurants for us?

57
00:04:14.310 --> 00:04:15.300
That's a good question.

58
00:04:15.570 --> 00:04:22.160
That's because we're not taking in the actual location and passing that into our request.

59
00:04:22.650 --> 00:04:27.180
So by doing that now, because we have defaulted everything, let's call it lock, because I don't want

60
00:04:27.180 --> 00:04:29.010
to conflict with an outer scoped variable.

61
00:04:29.850 --> 00:04:35.640
What we can see now is that if we reload, the location is going to be.

62
00:04:36.670 --> 00:04:44.200
Set now one second here, dismissed, dismiss, if we reload, what we're going to see is that location

63
00:04:44.200 --> 00:04:45.550
that long isn't a value.

64
00:04:45.580 --> 00:04:51.100
So what we have to do is we have to say if location, we always have to check if we have a location

65
00:04:51.100 --> 00:04:56.560
and if it's a proper value that's going to play a big role in us being able to search here.

66
00:04:57.580 --> 00:05:02.470
One thing we need to do is we need to add location here so that every time location changes, it actually

67
00:05:02.470 --> 00:05:02.950
renders.

68
00:05:05.740 --> 00:05:10.600
So now that this is happening, what we can see that we're getting Zuni CafÃ©, Brenden's French school,

69
00:05:10.840 --> 00:05:15.240
but we can look now and we can fill in Antwerp and let's see what happens.

70
00:05:15.520 --> 00:05:20.440
We get along itude latitude and oh, we got different restaurants.

71
00:05:21.070 --> 00:05:21.940
Interesting.

72
00:05:22.300 --> 00:05:24.100
We just retrieve different restaurants.

73
00:05:24.100 --> 00:05:30.290
And if we fill in Chicago and we do that, we can see our little render cycle going in the background.

74
00:05:30.550 --> 00:05:36.940
So one thing that we need to add into this procedure and one thing that we're not seeing happen is if

75
00:05:36.940 --> 00:05:38.290
we go into location complex.

76
00:05:39.520 --> 00:05:46.960
Every time we trigger a search, rather, in our restaurants, what should be happening is that when

77
00:05:46.960 --> 00:05:52.810
we do retrieve restaurants, we should set restaurants back to an empty value because we're trying to

78
00:05:52.810 --> 00:05:54.400
search for new restaurants.

79
00:05:55.380 --> 00:06:01.080
So we'll set it to empty and then when we look for Antwerp, that's going to trigger we're going to

80
00:06:01.080 --> 00:06:04.050
be looking for Antwerp, then we look for Chicago.

81
00:06:04.470 --> 00:06:08.150
That's going to trigger a cycle and a loading cycle.

82
00:06:08.430 --> 00:06:14.920
And then when we look for, for instance, Toronto, that's going to trigger another Virender cycle.

83
00:06:14.980 --> 00:06:16.500
Now, there's something going on here.

84
00:06:17.160 --> 00:06:22.530
The street address for some reason is still being set to the Mac address.

85
00:06:22.800 --> 00:06:23.610
Why is that?

86
00:06:23.640 --> 00:06:25.220
Well, let's look into that in the next video.

