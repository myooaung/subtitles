WEBVTT
1
00:00:00.300 --> 00:00:08.310
Oh, boy, hopefully your head didn't explode from all these lectures, we're going to keep our slides,

2
00:00:08.340 --> 00:00:13.290
lectures to a minimum from now and actually get into coding, actually practicing with react native

3
00:00:13.290 --> 00:00:16.400
because at the end of the day, that's how you get better.

4
00:00:16.830 --> 00:00:18.900
But I do have one question to ask you.

5
00:00:18.900 --> 00:00:26.720
One exercise based on what we've learned up until now and hopefully you can answer it, is their success

6
00:00:26.730 --> 00:00:27.750
in React Native?

7
00:00:29.290 --> 00:00:36.160
Pause the video and think about it is their success and success, hopefully everybody knows is a way

8
00:00:36.160 --> 00:00:40.010
to style your Web apps, your Web pages.

9
00:00:40.450 --> 00:00:42.600
But is there success and react native?

10
00:00:42.970 --> 00:00:47.800
Is there a way for us to style things on mobile with react native?

11
00:00:48.530 --> 00:00:49.470
Ready for the answer?

12
00:00:50.480 --> 00:00:52.460
Technically, no.

13
00:00:53.560 --> 00:01:01.180
Technically, there is no success and react native because remember, we're not on the Web sites and

14
00:01:01.180 --> 00:01:04.780
HTML are for the Web, right.

15
00:01:05.050 --> 00:01:09.670
Riak native instead uses native mobile tools.

16
00:01:10.480 --> 00:01:16.400
So the success that we use in Riak native is actually built through JavaScript.

17
00:01:17.230 --> 00:01:20.350
It's based on the syntax, but a little bit different.

18
00:01:23.810 --> 00:01:26.330
If we go to the style section.

19
00:01:27.610 --> 00:01:29.080
Of the React Native Dock's.

20
00:01:30.070 --> 00:01:37.210
You see that with react native, you style your application using JavaScript and that all core components

21
00:01:37.210 --> 00:01:38.950
except a prop name style.

22
00:01:40.540 --> 00:01:47.590
So although they've mimicked how styles work on CSFs, they're small differences like using JavaScript

23
00:01:47.950 --> 00:01:54.220
case instead of the dashes that we see with CSFs properties, and we also have things like stylesheet

24
00:01:54.610 --> 00:01:59.860
the stylesheet class that react native gives us for us to create stats.

25
00:02:01.370 --> 00:02:07.070
But there's a few things like not having pixels because, again, it just natively creates the views

26
00:02:07.070 --> 00:02:07.610
for us.

27
00:02:08.860 --> 00:02:14.080
So if we go to height and with you see that it has something called fixed dimensions.

28
00:02:15.700 --> 00:02:23.740
All dimensions and react native our unit lists and represent density, independent pixels, essentially

29
00:02:23.740 --> 00:02:30.490
a way of saying that it just figures out the best way to display things on the screen based on the screen

30
00:02:30.490 --> 00:02:31.120
dimensions.

31
00:02:32.170 --> 00:02:39.550
The other thing it does is that for layout A uses flex box automatically, so although it's very, very

32
00:02:39.550 --> 00:02:46.570
similar to success, technically is just all JavaScript because we're in the mobile world, not the

33
00:02:46.570 --> 00:02:47.080
Web world.

34
00:02:47.860 --> 00:02:51.010
Hopefully you got that in hopefully because of the previous lessons.

35
00:02:51.340 --> 00:02:52.840
This all makes sense.

36
00:02:53.260 --> 00:02:54.760
I'll see in the next one, Papy.

