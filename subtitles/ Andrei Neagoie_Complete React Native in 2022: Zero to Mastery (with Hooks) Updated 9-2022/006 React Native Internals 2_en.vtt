WEBVTT
1
00:00:00.450 --> 00:00:06.030
You want to hear something exciting, you just learned an important concept of react native and something

2
00:00:06.030 --> 00:00:11.600
that most native developers don't know, and that is what it actually does.

3
00:00:12.390 --> 00:00:18.000
You see, if we go to the react native people here by Facebook, because, remember, REAC native was

4
00:00:18.000 --> 00:00:19.080
created at Facebook.

5
00:00:20.000 --> 00:00:25.640
If we scroll down, we see what language or languages it uses.

6
00:00:26.680 --> 00:00:34.930
So over here, we see that it's mainly rain in JavaScript that makes sense, but there's also Java Objective

7
00:00:34.930 --> 00:00:36.370
C C++.

8
00:00:37.270 --> 00:00:38.160
Why is that?

9
00:00:38.500 --> 00:00:40.120
You should be able to answer that question.

10
00:00:40.120 --> 00:00:49.150
Not right, because Riak native, not only is it just JavaScript code, but it is also the bridge that

11
00:00:49.150 --> 00:00:52.630
allows us to communicate with the native platform.

12
00:00:52.630 --> 00:00:57.190
And the way we communicate with the Android platform is through Java.

13
00:00:57.220 --> 00:01:03.580
The way we communicate with the iOS platform is using things like Objective C and C++.

14
00:01:04.209 --> 00:01:10.810
And now we're also able to uncover some interesting things about REAC native and actually understand

15
00:01:10.930 --> 00:01:12.560
why they are the way they are.

16
00:01:13.270 --> 00:01:20.680
For example, if I go to the JavaScript environment section on our Riak native docs, we can actually

17
00:01:20.680 --> 00:01:21.430
understand this.

18
00:01:22.480 --> 00:01:27.670
It's going to say when using react native, you're going to be running your JavaScript code in two environments.

19
00:01:28.000 --> 00:01:34.260
OK, in most cases, react native will use JavaScript core, the JavaScript engine, that power safari.

20
00:01:34.300 --> 00:01:35.440
We just learned that.

21
00:01:35.440 --> 00:01:35.910
That's great.

22
00:01:36.670 --> 00:01:41.680
Now, when using chrome debugging, which we're going to do throughout the course, that is when we

23
00:01:41.680 --> 00:01:48.940
test our app on our computer instead of our phones, we're going to be using the JavaScript code on

24
00:01:48.940 --> 00:01:49.630
Chrome.

25
00:01:49.630 --> 00:01:53.490
So Chrome uses the V8 engine instead of JavaScript core.

26
00:01:53.770 --> 00:02:00.430
So when we test our code on our browser instead of using JavaScript core, it's going to test using

27
00:02:00.430 --> 00:02:03.610
the VT engine to understand JavaScript.

28
00:02:03.620 --> 00:02:07.630
So this way we don't have to ship the JavaScript core while testing our app.

29
00:02:07.630 --> 00:02:11.860
Everything is really, really fast because our browsers already have this.

30
00:02:12.730 --> 00:02:20.560
Now the beauty is that because all our react native apps have this JavaScript runtime or environment,

31
00:02:20.890 --> 00:02:24.850
it also gives us some niceties like the Bable JavaScript compiler.

32
00:02:25.300 --> 00:02:32.290
So this way we can use all the new JavaScript features because our code is compiled through this so

33
00:02:32.290 --> 00:02:38.380
that we can use our functions, that we can use objects spread, we can use things like gess, sex for

34
00:02:38.380 --> 00:02:40.450
react and so on and so forth.

35
00:02:41.450 --> 00:02:48.440
But there's also some exciting things now, for example, when you go to using Hermes, this is a new

36
00:02:48.440 --> 00:02:50.700
feature that just came out out of Facebook.

37
00:02:50.720 --> 00:02:58.550
Facebook was having issues with this idea that the gas core that we were running with every single react

38
00:02:58.550 --> 00:03:02.050
native application was really, really slow on Android.

39
00:03:02.870 --> 00:03:10.360
So they came up with an open source JavaScript engine optimized for running react native apps on Android.

40
00:03:10.670 --> 00:03:12.810
And this is an interesting thing.

41
00:03:12.980 --> 00:03:21.830
So Hermes is a new way for you to instead of using the JavaScript core to ship Hermès, which is optimized

42
00:03:21.830 --> 00:03:26.810
and faster for Android, and this was a common problem with Riak native.

43
00:03:26.810 --> 00:03:36.290
Usually apps on Android were slower than the apps on iOS, and that was because iOS naturally already

44
00:03:36.290 --> 00:03:38.360
comes with the JavaScript core.

45
00:03:38.360 --> 00:03:41.750
Remember, JavaScript score is used for Safari.

46
00:03:41.750 --> 00:03:48.980
Safari is a browser by Apple and they include JavaScript core on all the iOS apps.

47
00:03:49.370 --> 00:03:51.980
Android, on the other hand, doesn't have that.

48
00:03:52.310 --> 00:03:59.960
So we saved a bit of space with iOS apps because they didn't need to include the score with Riak native

49
00:03:59.960 --> 00:04:03.020
because it was already on the phone versus Android.

50
00:04:03.200 --> 00:04:10.760
That doesn't have the score on the phone and instead had to ship it all together with our JavaScript

51
00:04:10.760 --> 00:04:11.210
logic.

52
00:04:11.330 --> 00:04:17.930
So Hermès was created to say, hey, don't use JavaScript core because it's bloated, it's heavy, it's

53
00:04:17.930 --> 00:04:18.890
not as performant.

54
00:04:19.010 --> 00:04:25.370
Instead, use Hermès, a new JavaScript engine that is optimized for Android.

55
00:04:26.060 --> 00:04:27.630
How cool is that?

56
00:04:27.830 --> 00:04:32.570
Now, I know we get out a bit about the internals, but I hope things are starting to make sense.

57
00:04:32.570 --> 00:04:39.800
And this is kind of fun now because when we write code now, we understand how things are working underneath

58
00:04:39.800 --> 00:04:47.120
the hood, how react native is able to have native like performance, but also use JavaScript to communicate

59
00:04:47.270 --> 00:04:53.180
with these phones that historically only like to be coded in a certain language.

60
00:04:54.370 --> 00:04:57.090
We have some fun times ahead, so let's get into it.

