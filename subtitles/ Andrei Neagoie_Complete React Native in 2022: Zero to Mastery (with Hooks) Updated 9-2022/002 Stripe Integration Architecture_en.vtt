WEBVTT
1
00:00:00.150 --> 00:00:08.340
Hey, everyone, before we dig too deep into this stripe integration, I wanted to give us a small overview

2
00:00:08.340 --> 00:00:12.420
of something we've already seen, which is the way that our architecture works, because I want to give

3
00:00:12.420 --> 00:00:15.240
us the lay of the land before we get to deepen.

4
00:00:16.379 --> 00:00:17.830
So over here, we have our phone.

5
00:00:18.090 --> 00:00:24.480
And in this box, we have the architecture of our application being that we have a navigation instance

6
00:00:24.480 --> 00:00:27.730
that bootstraps and visualizes the future for us.

7
00:00:28.080 --> 00:00:34.320
We have styled system over here that helps us visualize the features and our riak context that talks

8
00:00:34.320 --> 00:00:36.290
to a service folder.

9
00:00:36.840 --> 00:00:39.230
And in that service folder we have all these files.

10
00:00:39.240 --> 00:00:44.910
That's main purpose is to go and talk to external providers, external providers being any number of

11
00:00:44.910 --> 00:00:47.730
services or servers that can provide us data.

12
00:00:48.710 --> 00:00:53.720
Now, for this stripe integration, we will be building an external service the same way that we did

13
00:00:54.050 --> 00:01:01.760
for the Google bonus section, and we will be utilizing a firebase function over here in order to feed

14
00:01:01.760 --> 00:01:09.530
our service with the appropriate end points that it needs to talk to and points being places where we

15
00:01:09.530 --> 00:01:11.140
can send request to.

16
00:01:11.720 --> 00:01:15.440
And the reason that we're going to be building that in a firebase function is for security sake.

17
00:01:15.440 --> 00:01:21.380
We want to build this with first principles in mind, being that we want to isolate the entry point

18
00:01:21.380 --> 00:01:22.610
to our payment provider.

19
00:01:22.610 --> 00:01:26.210
And the best way to do that is to build it as an external service.

20
00:01:26.780 --> 00:01:32.990
And the reason that we're utilizing firebase functions is because they allow us to build and deploy

21
00:01:33.170 --> 00:01:35.060
servers quite easily.

22
00:01:35.630 --> 00:01:39.020
Now, same with the bonus Google integration.

23
00:01:39.200 --> 00:01:46.370
If you cannot buy a paid firebase plan, you can still run this locally, but be aware that you cannot

24
00:01:46.370 --> 00:01:52.310
deploy it and use your app in a production like setting because you are not deploying the function.

25
00:01:53.470 --> 00:01:58.510
Now, over here in our service there, we will be talking to these endpoints, subsequently feeding

26
00:01:58.510 --> 00:02:04.030
the request and the responses back into the real context, back into the features, into the visualization,

27
00:02:04.240 --> 00:02:11.380
thus creating a checkout flow for us and understanding this flow and understanding the way that we handle

28
00:02:11.830 --> 00:02:18.580
the overall infrastructure and architecture of our features helps us better prepare ourselves for the

29
00:02:18.580 --> 00:02:19.580
implementation path.

30
00:02:20.200 --> 00:02:24.580
And so now that we know that and now that we know that this is extremely similar to what we've done

31
00:02:25.090 --> 00:02:31.690
on the bonus Google side, what we can do now is go ahead and see, OK, what is our stripe integration

32
00:02:31.690 --> 00:02:32.260
going to look like?

33
00:02:32.260 --> 00:02:34.090
What do we need to set up ahead of time?

34
00:02:34.540 --> 00:02:36.130
And where do we go from there?

