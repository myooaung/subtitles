WEBVTT
1
00:00:00.830 --> 00:00:04.100
Now comes the question, how does this geocoding stuff work?

2
00:00:04.460 --> 00:00:08.090
And so to understand that what we're going to do is we're going to create a new service, we're going

3
00:00:08.090 --> 00:00:13.640
to call it location and inside of location, we're going to create a file location that mock thought,

4
00:00:13.650 --> 00:00:23.750
Jess, and that mock file is going to export a certain amount of information from every single city

5
00:00:23.930 --> 00:00:27.350
that we want to get information from.

6
00:00:27.860 --> 00:00:29.720
So it looks a little something like this.

7
00:00:30.170 --> 00:00:33.140
And all this information can be retrieved from the resources folder.

8
00:00:33.350 --> 00:00:35.840
You'll be able to pull it from the pull request.

9
00:00:36.230 --> 00:00:39.870
Now, if you see here, we're doing export control locations.

10
00:00:40.400 --> 00:00:43.360
So these are the locations that we want to have accessible.

11
00:00:43.970 --> 00:00:52.340
And again, the information that is in here strongly mimics what Google would return us so that in the

12
00:00:52.340 --> 00:00:55.850
end we can swap out our API call to work with the Google API.

13
00:00:56.090 --> 00:01:03.350
But the information here is not of the same accuracy as what you would get back from Google, of course.

14
00:01:03.800 --> 00:01:09.680
So over here you can see that for Antwerp it has a results array and in that results array there is

15
00:01:09.680 --> 00:01:10.910
a geometry object.

16
00:01:10.910 --> 00:01:16.310
And in that geometry object there is a location with a long itude latitude and then there is a viewport

17
00:01:16.310 --> 00:01:16.800
object.

18
00:01:17.090 --> 00:01:19.370
Now, both of these objects are equally important.

19
00:01:19.430 --> 00:01:25.970
This will allow us to find the city right, the city that we're trying to get the restaurants for.

20
00:01:26.360 --> 00:01:33.890
And this at a later stage will help us configure our map view in order to render out the location correctly

21
00:01:33.890 --> 00:01:34.430
on the map.

22
00:01:35.060 --> 00:01:41.990
Now that we know that these are our results, what we can do is based on this, we can give it each

23
00:01:41.990 --> 00:01:42.530
result.

24
00:01:42.530 --> 00:01:43.010
A key.

25
00:01:43.220 --> 00:01:43.570
Right.

26
00:01:44.030 --> 00:01:49.990
And the key of the objects is the key of the city, the search term, so to speak.

27
00:01:50.180 --> 00:01:52.730
So we'll have Toronto, Chicago, San Francisco.

28
00:01:52.730 --> 00:02:01.340
And as you can see here, I put a space between San Francisco in order for us to be able to search for

29
00:02:01.340 --> 00:02:02.250
it properly.

30
00:02:02.910 --> 00:02:08.060
Now, when we hit Google, obviously it won't really matter because the search term will go to Google,

31
00:02:08.060 --> 00:02:11.310
but we're hiding the results inside of the object key.

32
00:02:12.110 --> 00:02:15.410
OK, so now we can go ahead and create our location.

33
00:02:15.410 --> 00:02:16.980
That service thought.

34
00:02:17.000 --> 00:02:17.480
Yes.

35
00:02:17.750 --> 00:02:25.070
And this location, that service, that what it's going to do is similar to what the restaurant service

36
00:02:25.070 --> 00:02:28.350
did, but it's going to work a bit different.

37
00:02:28.400 --> 00:02:34.700
So first of all, we're going to get Canalis, we're going to say export consed location request.

38
00:02:35.300 --> 00:02:38.990
And this is going to be a function that does something for us.

39
00:02:39.500 --> 00:02:43.760
And then we're going to do export content, location, transform.

40
00:02:44.740 --> 00:02:47.350
And this is going to transform the request for us.

41
00:02:48.480 --> 00:02:48.840
Right.

42
00:02:48.880 --> 00:02:53.280
I need braces here, curly braces, curly braces, that's what they're called.

43
00:02:53.940 --> 00:02:56.250
I've been struggling to figure out that word for so long.

44
00:02:56.760 --> 00:03:00.900
In any case, the other thing we need is our mock location.

45
00:03:00.900 --> 00:03:05.700
So we'll import locations from locations that mock.

46
00:03:05.820 --> 00:03:08.270
And this will allow us to get our mock locations.

47
00:03:08.880 --> 00:03:19.740
Now, what we need to do is, again, we need to return a promise, so return new promise and then it

48
00:03:19.740 --> 00:03:22.830
gets a resolve and a reject function.

49
00:03:23.490 --> 00:03:28.700
And this will allow us to basically mimic as if we were talking to an API.

50
00:03:29.550 --> 00:03:39.390
So what we'll do is we'll say location mock is equal to locations and we'll of course, what are we

51
00:03:39.390 --> 00:03:40.080
trying to find?

52
00:03:40.380 --> 00:03:43.740
We're trying to find a search term.

53
00:03:44.220 --> 00:03:45.270
That's what we're looking for.

54
00:03:45.270 --> 00:03:45.530
Right.

55
00:03:45.540 --> 00:03:48.660
What are the Antwerp, Brussels or whatever else?

56
00:03:48.870 --> 00:03:50.190
Toronto, Chicago.

57
00:03:50.550 --> 00:03:54.450
So we'll do locations, search term and then we'll say if.

58
00:03:55.690 --> 00:03:56.980
This doesn't have a value.

59
00:03:58.470 --> 00:04:02.010
We're going to reject with saying not found.

60
00:04:04.680 --> 00:04:11.380
And then if it does have a value, we're going to resolve with that value location.

61
00:04:11.400 --> 00:04:11.820
Mark?

62
00:04:12.880 --> 00:04:20.769
OK, so knowing that now what we can do is we can utilize this information to figure out, hey, what

63
00:04:20.769 --> 00:04:22.180
do we need off of this object?

64
00:04:22.540 --> 00:04:26.710
So, for instance, if we were looking at San Francisco, well off of the geometry object, we're going

65
00:04:26.710 --> 00:04:29.740
to need location, latitude and longitude.

66
00:04:30.130 --> 00:04:31.580
So how do we go about that?

67
00:04:32.110 --> 00:04:35.380
Well, in our location transform, we're going to get the result.

68
00:04:36.220 --> 00:04:41.170
And that result is going to be equal to the entirety of this object.

69
00:04:41.200 --> 00:04:42.040
The inner object.

70
00:04:42.040 --> 00:04:43.090
Right, the results.

71
00:04:43.810 --> 00:04:46.890
So how do we go about that?

72
00:04:47.680 --> 00:04:54.610
First of all, we need to figure out how to get geometry location off of result.

73
00:04:54.790 --> 00:05:02.710
So we're going to say CONSED location is equal to result thought results and we're going to say zero

74
00:05:02.710 --> 00:05:04.660
because again, it's an array.

75
00:05:05.750 --> 00:05:10.910
But it only has one value in here, and we're always going to pluck the first value anyways, so we're

76
00:05:10.910 --> 00:05:13.070
going to see a result that results zero.

77
00:05:14.530 --> 00:05:20.590
And then with that, we can console that log location and that basically would give us the following

78
00:05:20.980 --> 00:05:23.830
if we were to log it out, it would give us this object.

79
00:05:24.170 --> 00:05:31.960
So now we know that we need geometry and then location so we can say, well, if I need geometry off

80
00:05:31.960 --> 00:05:32.410
of this.

81
00:05:33.760 --> 00:05:38.260
So if we take geometry off of this and then we we make sure to default it to an object.

82
00:05:39.240 --> 00:05:47.730
What we can do here is we can say get lap and get Lange off of geometry, that location, so this becomes

83
00:05:47.730 --> 00:05:49.560
like a very nested procedure.

84
00:05:49.590 --> 00:05:56.400
Now we have to say, OK, consed latitude longitude is equal to geometry.

85
00:05:57.710 --> 00:05:58.850
Thought location.

86
00:06:00.100 --> 00:06:08.950
And then what we need to do is we need to return that Laerte and langue, and that's going to give us

87
00:06:09.100 --> 00:06:13.990
the ability to have the last line of what we're trying to get here.

88
00:06:14.680 --> 00:06:19.840
OK, so now that we have both of these, while there's one more thing we need to do.

89
00:06:20.110 --> 00:06:20.530
Right.

90
00:06:21.160 --> 00:06:25.060
And basically we need to catalyze the results.

91
00:06:25.060 --> 00:06:28.870
So let's go ahead and wrap result.

92
00:06:29.920 --> 00:06:31.180
That results.

93
00:06:32.230 --> 00:06:40.540
Inside of camels, and then we'll pluck zero off of it and what that will do is basically like, for

94
00:06:40.540 --> 00:06:45.910
instance, if there was any information in here that was poorly formatted, which it doesn't seem to

95
00:06:45.910 --> 00:06:50.410
have, all of the information in here seems to be completely legit.

96
00:06:50.410 --> 00:06:52.390
And it shouldn't have to do anything.

97
00:06:52.610 --> 00:06:53.560
It would fix it up.

98
00:06:53.560 --> 00:06:59.160
But just in case, maybe the ABI would add something later on by chance.

99
00:06:59.170 --> 00:07:00.820
That wasn't camel case.

100
00:07:01.030 --> 00:07:07.480
We still want to wrap it with camels just to make sure that everything comes back so we can see const

101
00:07:07.480 --> 00:07:11.400
formatted response is equal to camels results.

102
00:07:11.970 --> 00:07:18.940
Let's do it like this and then we can do formatted response and then dot results and that way.

103
00:07:19.570 --> 00:07:26.950
OK, so this is looking all right now that we have this now in the next video, we need to look at how

104
00:07:26.950 --> 00:07:31.180
we're going to integrate this into the holistic infrastructure.

105
00:07:31.180 --> 00:07:31.490
Right.

106
00:07:31.630 --> 00:07:33.340
We don't have a context for this yet.

107
00:07:33.340 --> 00:07:34.830
So let's look at that in the next video.

