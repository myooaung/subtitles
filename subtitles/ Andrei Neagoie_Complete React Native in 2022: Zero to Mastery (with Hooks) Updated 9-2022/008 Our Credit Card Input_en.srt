1
00:00:00,710 --> 00:00:03,620
We've set up our canvas to start painting our feature.

2
00:00:04,340 --> 00:00:06,300
Now, I know I'm not Picasso.

3
00:00:06,650 --> 00:00:12,490
I get it, but I think we can build a pretty awesome checkout feature.

4
00:00:13,040 --> 00:00:18,200
And the way that we're going to do it is we're going to take all of the principles that we've learned

5
00:00:18,200 --> 00:00:21,560
so far and we're going to start thinking about what we need to do.

6
00:00:22,190 --> 00:00:28,220
Now, if we go back over here and we look at our diagram, what we're going to see is that the user

7
00:00:28,220 --> 00:00:33,300
needs to input their credit card information in order for us to create a payment.

8
00:00:34,070 --> 00:00:40,540
Now we've set up our checkout canvas on which we are going to start our payment process.

9
00:00:41,030 --> 00:00:47,480
But in order for us to do our payment process, credit card info needs to be fed into this feature right

10
00:00:47,720 --> 00:00:47,990
there.

11
00:00:47,990 --> 00:00:52,800
Not it's not so much that this user flow is independent, right?

12
00:00:52,820 --> 00:00:54,490
It's not that checkout happens here.

13
00:00:54,500 --> 00:00:58,310
Credit card info happens here where we're talking about what the user interacts with.

14
00:00:58,310 --> 00:01:02,540
So the user fills in their credit card info, gets the token, and then you start your checkout flow.

15
00:01:02,840 --> 00:01:08,140
But the credit card information is still being inputted on the checkout screen.

16
00:01:08,840 --> 00:01:16,220
So in order for us to do this, what we're going to need to do is get some type of credit card input

17
00:01:16,490 --> 00:01:21,680
visualized on the screen so that we can start building on our.

18
00:01:22,700 --> 00:01:26,720
Feature to get the straight talking going before we set up Stripe.

19
00:01:26,900 --> 00:01:29,510
Well, the first thing we're going to need is some type of credit card.

20
00:01:30,320 --> 00:01:31,320
So let's take a look at that.

21
00:01:31,850 --> 00:01:37,160
Now, let's go ahead and take what we have here, go over to our code base and install it like we've

22
00:01:37,160 --> 00:01:39,830
installed so, so many packages throughout the course.

23
00:01:40,190 --> 00:01:41,900
So I'm going to open up a new terminal.

24
00:01:42,440 --> 00:01:49,340
And what I'm going to do is Yorn react native credit card input, Yahav rather raclette credit card

25
00:01:49,340 --> 00:01:49,670
input.

26
00:01:49,670 --> 00:01:51,890
That's going to add it to my code base.

27
00:01:52,460 --> 00:01:55,930
And once it's been added, then I can go ahead and use it.

28
00:01:56,210 --> 00:02:01,220
Now, the way that we need to use this is a bit different than what you may think.

29
00:02:02,940 --> 00:02:07,710
What we're going to do is we're going to go inside our features folder, check out, and we're going

30
00:02:07,710 --> 00:02:13,200
to create a new folder inside of Check-Out called Components and inside of Components.

31
00:02:13,200 --> 00:02:17,910
We're going to create a component called the credit card component.

32
00:02:19,550 --> 00:02:24,350
Component, but, yes, now this credit card component is going to be the baseline where we're going

33
00:02:24,350 --> 00:02:27,550
to utilize our credit card information.

34
00:02:27,920 --> 00:02:34,640
So the way that we do that is we're going to say export CONSED credit card input.

35
00:02:35,510 --> 00:02:41,570
Is equal to and then we're going to render out null for now, let's close this up here and let's focus

36
00:02:41,570 --> 00:02:45,770
on the code we're going to import react from react.

37
00:02:46,790 --> 00:02:52,250
And then we're going to focus on some of the imports that we need, so we're going to import from the

38
00:02:52,250 --> 00:02:53,000
library.

39
00:02:53,940 --> 00:03:01,200
We're going to import the light creditcard input and we're going to do the like credit card input from

40
00:03:01,680 --> 00:03:06,150
react need of credit card input.

41
00:03:07,090 --> 00:03:09,340
Now, why the light credit card?

42
00:03:09,910 --> 00:03:14,680
Well, the light credit card in and it seems I have a small typo here, the light credit card input

43
00:03:14,680 --> 00:03:17,020
looks a little bit like this right here.

44
00:03:17,050 --> 00:03:21,910
We don't want the big juggernaut of a card doing all its stuff.

45
00:03:22,160 --> 00:03:25,380
No, we want the simple, simplistic kind of look.

46
00:03:25,990 --> 00:03:27,700
So let's not that we have that.

47
00:03:27,820 --> 00:03:30,480
Let's look at what we can do inside of our render function.

48
00:03:31,060 --> 00:03:35,590
So inside of our render function, what we're going to do is we're going to do a return here and inside

49
00:03:35,590 --> 00:03:36,460
of the return.

50
00:03:36,610 --> 00:03:43,060
Well, what we need to return is the light credit card input, but we need to give it some functions

51
00:03:43,240 --> 00:03:44,080
to hook into.

52
00:03:44,740 --> 00:03:48,310
And that function, as you can see here, is the on change function.

53
00:03:48,790 --> 00:03:50,360
So we need to give it an on change.

54
00:03:50,980 --> 00:03:54,320
Now, what is on change going to do necessarily for us?

55
00:03:54,730 --> 00:04:00,190
Well, let's let's give it our own change function here and let's declare our own change function outside

56
00:04:00,190 --> 00:04:00,820
of the render.

57
00:04:01,090 --> 00:04:04,510
And let's say const on change is equal to a function.

58
00:04:05,550 --> 00:04:07,980
And then what is it going to give us?

59
00:04:08,520 --> 00:04:11,730
Well, it's going to give us something called Form detA.

60
00:04:12,830 --> 00:04:14,600
So if we cancel that log that.

61
00:04:15,790 --> 00:04:17,649
We're going to see the form data come in.

62
00:04:19,399 --> 00:04:24,530
And once we've gone so long that now what we need to do is we need to go inside of our checkout screen

63
00:04:24,830 --> 00:04:29,750
and we need to import the credit card and put.

64
00:04:33,520 --> 00:04:35,030
Parts, components.

65
00:04:35,590 --> 00:04:37,090
Credit card component.

66
00:04:37,870 --> 00:04:42,960
And so now we have our credit card input and so let's give that over here to the render function.

67
00:04:43,720 --> 00:04:49,060
And of course, we need to declare it like it's an actual component and we can go see here.

68
00:04:49,300 --> 00:04:51,160
Oh, it's not in a safe area.

69
00:04:51,640 --> 00:04:53,920
Well, we know how to take care of that, don't we?

70
00:04:54,250 --> 00:04:59,820
So let's go up here and let's import safe area.

71
00:05:01,790 --> 00:05:07,710
From, you guessed it, dot, dot, dot, dot, dot, dot, dot, slash components.

72
00:05:08,750 --> 00:05:12,280
And then we'll take utility and we'll take Sieff area.

73
00:05:12,830 --> 00:05:17,530
And by doing this now, we can wrap our component with the safe area.

74
00:05:19,090 --> 00:05:24,250
If we wrap that around here, what we're going to see is that our credit card input is now going to

75
00:05:24,250 --> 00:05:25,080
be a focus.

76
00:05:25,810 --> 00:05:32,170
And if we open up our console here in the terminal and we go over to where the app is rendering, what

77
00:05:32,170 --> 00:05:35,350
we can see here is if we go ahead and reload.

78
00:05:36,310 --> 00:05:42,760
We'll create some clean space between the previous errors we had and over here, what we can do is we

79
00:05:42,760 --> 00:05:46,660
can say four two four two four two four two four two.

80
00:05:46,840 --> 00:05:49,630
And you can see it's coming in in the log.

81
00:05:49,630 --> 00:05:54,130
So we can see the number coming in the expiry, the CBC, the type.

82
00:05:54,280 --> 00:05:56,170
It's all coming into our values.

83
00:05:56,740 --> 00:05:57,400
Awesome.

84
00:05:57,400 --> 00:06:02,470
So we're getting all of the values that we input into our credit card component.

85
00:06:03,070 --> 00:06:06,100
And that is exactly what we need.

86
00:06:06,280 --> 00:06:13,330
We need all of that information in order for us to make decisions about what should happen now.

87
00:06:14,110 --> 00:06:20,170
For us to do that, we can see over here that there is a valid field, right?

88
00:06:20,440 --> 00:06:26,890
There's a valid field coming back in this object and it's telling us, hey, is this valid, yes or

89
00:06:26,890 --> 00:06:27,220
no?

90
00:06:27,370 --> 00:06:30,280
But there's also statuses linked to each individual field.

91
00:06:30,460 --> 00:06:33,040
Is the quick complete, is the expiry complete?

92
00:06:33,220 --> 00:06:34,450
Is the number complete?

93
00:06:34,690 --> 00:06:37,930
If none of those are complete, we can't really do anything with it.

94
00:06:37,930 --> 00:06:38,220
Right.

95
00:06:38,650 --> 00:06:45,070
So now that we have all of this information, what we can do is we can build out a status check.

96
00:06:45,310 --> 00:06:53,620
So in our on change function, we could, for instance, say something like const values is equal to

97
00:06:53,860 --> 00:06:54,580
form data.

98
00:06:54,580 --> 00:07:00,010
So we're structuring we're taking values right here off of the form data.

99
00:07:00,840 --> 00:07:07,320
But on top of that, what we need to do is we need to determine a state so we'll say CONSED is incomplete,

100
00:07:07,620 --> 00:07:12,390
is equal to and what we can say is object dot values.

101
00:07:12,420 --> 00:07:18,480
Now, this is a function in JavaScript which will take the values off of form data values.

102
00:07:19,350 --> 00:07:29,250
And what we can say is that will also take the status, right, so we need the status, so we have values.

103
00:07:29,250 --> 00:07:30,700
So let's also take the status.

104
00:07:30,960 --> 00:07:34,530
So what we're going to do is we're going to see object out values of status.

105
00:07:34,530 --> 00:07:36,810
So we're going to get these three values.

106
00:07:37,880 --> 00:07:40,350
And we want to make sure that they're all complete, right?

107
00:07:40,370 --> 00:07:41,760
That's that's the state we're looking for.

108
00:07:41,780 --> 00:07:47,600
So if we say object about values, that includes incomplete.

109
00:07:48,660 --> 00:07:50,700
Then we know that.

110
00:07:52,020 --> 00:07:56,910
All of our statuses haven't reached complete yet because this object contains all of these property,

111
00:07:56,920 --> 00:08:04,110
CVC expiry number and by using object thought values, what we're doing is we're saying, hey, just

112
00:08:04,110 --> 00:08:05,820
take the values off of this object.

113
00:08:05,820 --> 00:08:10,080
So we're going to say incomplete, incomplete, incomplete.

114
00:08:10,290 --> 00:08:10,640
Right.

115
00:08:11,040 --> 00:08:13,510
Those are the three values that we currently have here.

116
00:08:13,830 --> 00:08:14,670
So that's what we're doing.

117
00:08:14,670 --> 00:08:17,010
We're transforming it into an array here.

118
00:08:17,520 --> 00:08:22,800
And by transforming it into this array, we can now use something that is not includes.

119
00:08:23,040 --> 00:08:25,920
So if we did something like this, that includes.

120
00:08:26,280 --> 00:08:26,580
Right.

121
00:08:26,580 --> 00:08:32,820
And we and we wrapped all of these with text, what we could see is if we did that includes complete.

122
00:08:32,820 --> 00:08:33,900
We're going to get false.

123
00:08:33,900 --> 00:08:36,100
If we did not include incomplete.

124
00:08:36,419 --> 00:08:38,320
This would return true.

125
00:08:38,820 --> 00:08:43,770
So by doing this now, we know when our status has reached completion.

126
00:08:44,610 --> 00:08:51,450
If we log that out instead of form data, what we can do now is we can go over here, we can reload

127
00:08:52,200 --> 00:08:56,400
and by reloading, going to checkout and starting to fill it out.

128
00:08:56,430 --> 00:09:01,620
What we're going to see is once we start filling it out here at the bottom, it's incomplete.

129
00:09:02,220 --> 00:09:03,750
It's incomplete, it's incomplete.

130
00:09:03,750 --> 00:09:05,010
It's incomplete, it's incomplete.

131
00:09:05,010 --> 00:09:07,530
It's incomplete and so forth and so forth.

132
00:09:07,860 --> 00:09:16,890
But now, due to too high its return, this false, it's finally complete because we filled out all

133
00:09:16,890 --> 00:09:17,910
of the information.

134
00:09:18,300 --> 00:09:19,800
So we have our status checks.

135
00:09:20,640 --> 00:09:21,930
We have our values.

136
00:09:22,230 --> 00:09:27,390
Now, the next thing that we need to do here, now that we have our credit card input, we're able to

137
00:09:27,390 --> 00:09:28,910
get credit card info.

138
00:09:29,610 --> 00:09:31,410
How about we register a straight token?

139
00:09:31,410 --> 00:09:31,650
Right.

140
00:09:32,310 --> 00:09:37,130
Because over here in our diagram, well, the users inputted their credit card info.

141
00:09:37,800 --> 00:09:42,840
So the next thing we logically can do is create the stripe payment token.

142
00:09:43,080 --> 00:09:44,610
So let's look at that in the next video.

