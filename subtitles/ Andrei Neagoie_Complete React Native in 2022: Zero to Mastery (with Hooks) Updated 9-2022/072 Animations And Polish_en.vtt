WEBVTT
1
00:00:01.080 --> 00:00:07.380
Now that we've completed roughly the holistic setup of our application and have all of the main features

2
00:00:08.130 --> 00:00:14.990
ready to roll, what we need to do is look at our app and say, hey, could we polish this a bit more?

3
00:00:15.750 --> 00:00:21.630
And one of the things that I think about when I think about Polish well, I think about animations and

4
00:00:21.630 --> 00:00:27.750
animations are very important because they are the cornerstone of what creates what is considered a

5
00:00:27.750 --> 00:00:29.090
great user experience.

6
00:00:29.370 --> 00:00:33.050
You see, stationary objects are kind of like pops into view.

7
00:00:33.990 --> 00:00:35.960
It's not really a great feeling.

8
00:00:35.970 --> 00:00:42.240
Now, React Native provides two components, the animated component, which is granular and can allow

9
00:00:42.240 --> 00:00:45.480
you to kind of create very, very custom animations.

10
00:00:45.480 --> 00:00:49.020
And then there's the layout animations for global layout transactions.

11
00:00:49.590 --> 00:00:55.920
Now, if we look at the animated API versus the layout API, what I want us to do is kind of see, well,

12
00:00:56.040 --> 00:00:57.000
what can we do here?

13
00:00:57.150 --> 00:01:02.970
And if we see you right over here, if we look at the feeding in component, we can see that if we tap

14
00:01:02.970 --> 00:01:09.420
to play here, it will fade into view and we can kind of look at what the code looks like.

15
00:01:09.900 --> 00:01:11.070
We have a Fada animation.

16
00:01:11.070 --> 00:01:12.610
That's a that's a reference.

17
00:01:12.750 --> 00:01:14.190
This is a react reference.

18
00:01:14.400 --> 00:01:19.500
So they utilize that to to reference an object and keep that reference.

19
00:01:19.770 --> 00:01:26.130
Moyse So in memory and we'll use something called the animated timing to take the feed animation that

20
00:01:26.130 --> 00:01:32.280
was just currently of value zero and transition it to value one over ten thousand milliseconds.

21
00:01:32.640 --> 00:01:36.810
And we'll call that the feed animation and then we give that feed animation, that value that's going

22
00:01:36.810 --> 00:01:39.990
to go from zero to one over ten thousand milliseconds.

23
00:01:40.170 --> 00:01:45.210
We'll give it to the opacity and by giving it to the opacity, what's going to happen is going to feed

24
00:01:45.210 --> 00:01:45.610
into view.

25
00:01:45.630 --> 00:01:52.920
Now, iOS is having a difficulty loading, but over here we can see it fading into view over ten thousand

26
00:01:52.920 --> 00:01:55.050
milliseconds, which is equivalent to ten seconds.

27
00:01:55.680 --> 00:01:57.950
And so that's slow fade that we're getting.

28
00:01:57.990 --> 00:01:59.310
That's what we want to achieve.

29
00:01:59.310 --> 00:02:05.310
We want to feed some of using to do kind of create this non stationary feel.

30
00:02:05.320 --> 00:02:09.500
This Jianqing is almost that, you know, some apps can to have.

31
00:02:09.780 --> 00:02:11.940
So we're going to do is in our animations folder.

32
00:02:12.180 --> 00:02:16.140
We're going to create a new folder called Animation's.

33
00:02:17.110 --> 00:02:20.500
And that folder is going to contain all of our animation.

34
00:02:21.350 --> 00:02:27.200
Type of components, and so you can expand on this and test out different animations and so the animation

35
00:02:27.200 --> 00:02:32.060
we want to create is the feed animation that animation dogs.

36
00:02:32.720 --> 00:02:37.370
And so you may have been thinking throughout the course meal, why do you use the dot dot animation,

37
00:02:37.370 --> 00:02:38.930
dot component, thought style?

38
00:02:39.260 --> 00:02:42.260
Well, that's basically for search purposes.

39
00:02:42.260 --> 00:02:48.470
If I were to go in my search here and I work to say dot component, now I can find all of my components

40
00:02:48.470 --> 00:02:49.430
that I'm looking for.

41
00:02:49.910 --> 00:02:54.080
Similarly, for my animation, I can quickly reveal all of the animations.

42
00:02:54.410 --> 00:02:57.980
And if I wanted to find all the screens, well, now I can see all the screens.

43
00:02:58.190 --> 00:03:01.030
And the same is true for if I wanted to find em that screen.

44
00:03:01.040 --> 00:03:01.760
Oh, OK.

45
00:03:01.760 --> 00:03:08.960
Now I can fuzzy search map out screen and I can kind of navigate my code base in a smarter way with

46
00:03:08.960 --> 00:03:09.270
that.

47
00:03:09.650 --> 00:03:13.430
Now let's look at kind of how we're going to build out this animation.

48
00:03:13.430 --> 00:03:15.380
So there's two things we need to do.

49
00:03:15.380 --> 00:03:22.820
Well, we need to import the animated API from Riak native and we're going to have a ref and also import

50
00:03:22.820 --> 00:03:23.840
react as we always do.

51
00:03:24.410 --> 00:03:32.210
Then we're going to export the concept, fade in view, which is going to be the name of our animation

52
00:03:32.210 --> 00:03:32.540
here.

53
00:03:32.900 --> 00:03:37.520
And we're going to give it a duration standard of one point five seconds or a second and a half.

54
00:03:38.620 --> 00:03:47.350
Then what we'll do is we'll return the animated view similar to what they're doing on the documentation.

55
00:03:48.340 --> 00:03:54.220
And we're going to do the same type of Phedon where we're going to give it to the opacity, so we're

56
00:03:54.220 --> 00:03:58.600
going to bind the opacity, the animated value, and this is the special animated view.

57
00:03:59.650 --> 00:04:06.730
And with with this, we can basically now say, well, we can animate something into the view, now

58
00:04:06.730 --> 00:04:11.620
we have to use animated that view because it's a special type of view that is animated.

59
00:04:11.980 --> 00:04:18.310
So animated, just like style components, is exporting a view that has extra properties on it to allow

60
00:04:18.310 --> 00:04:19.269
it to be animated.

61
00:04:19.510 --> 00:04:23.950
And we'll wrap things with this feed in view in order for them to start feeding in.

62
00:04:24.930 --> 00:04:29.790
Now, you can see here we still need to declare our fate animation, which we're going to do.

63
00:04:30.720 --> 00:04:36.320
Like this, we're going to say consed fate animation is equal to use ref of a new animated value, zero

64
00:04:36.320 --> 00:04:44.310
about current, and then we're going to also put in place a use effect that is going to allow us to

65
00:04:44.310 --> 00:04:47.870
transition that value from zero to one.

66
00:04:48.660 --> 00:04:56.370
And by doing this, we can then allow the animated hook to animate itself.

67
00:04:56.370 --> 00:05:03.840
But we also need to add in duration just in case if duration were to change as a prop, that we re trigger

68
00:05:03.870 --> 00:05:06.780
the effect to properly interact.

69
00:05:07.740 --> 00:05:12.390
OK, so now that we have our feet animation, well, where are we going to put it so we could put it

70
00:05:12.390 --> 00:05:13.200
in a bunch of places?

71
00:05:13.200 --> 00:05:15.480
We could put it around a ton of different things.

72
00:05:15.780 --> 00:05:22.770
I was thinking, for instance, if we go into well, let's say let's say we go to our actual features

73
00:05:22.770 --> 00:05:26.910
and we said on the screens we have restaurants that screen here.

74
00:05:27.600 --> 00:05:30.180
We could easily import a feed animation over here.

75
00:05:30.180 --> 00:05:34.140
First of all, let's get rid of our flat list here, get rid of some of the errors.

76
00:05:34.920 --> 00:05:39.110
And what we can do is next to importing safe area.

77
00:05:39.120 --> 00:05:45.720
We can import feed in view and we can import that from the animation's.

78
00:05:46.350 --> 00:05:51.930
So we have to do is remove this component animation feed.

79
00:05:52.980 --> 00:05:57.920
And by importing the feed in view now, we can wrap inside of our safe area.

80
00:05:59.270 --> 00:06:01.220
To feed the entire view.

81
00:06:04.270 --> 00:06:06.550
And if we go look at that, if we go to restaurants.

82
00:06:07.900 --> 00:06:09.610
Well, what's happening?

83
00:06:09.640 --> 00:06:14.830
Well, let's reload quickly and what we'll see here is, oh, you can see that fade into view, but

84
00:06:14.830 --> 00:06:18.160
it's kind of breaking the rest of the animation.

85
00:06:18.460 --> 00:06:24.850
So maybe we shouldn't put it right there, but maybe we should rather put it specifically around our

86
00:06:24.850 --> 00:06:28.840
restaurant list so that our restaurant list will fade into view.

87
00:06:30.140 --> 00:06:34.460
Because we don't want our animation to break the rest of our application.

88
00:06:35.590 --> 00:06:41.110
And by doing this, we now allow ourselves the room to.

89
00:06:42.270 --> 00:06:49.710
Create that animation effect without breaking the rest of the UI, so as we can see here now, our animation

90
00:06:49.950 --> 00:06:51.870
of it didn't fade into view, did it?

91
00:06:53.980 --> 00:06:55.420
Well, why is that?

92
00:06:56.320 --> 00:07:00.780
Well, it's because the FT interview has actually already rendered at this point.

93
00:07:01.420 --> 00:07:03.580
So how do we go about this?

94
00:07:03.880 --> 00:07:05.470
Well, maybe we should put it a little deeper.

95
00:07:05.470 --> 00:07:07.560
Maybe we should put it around the restaurant info card.

96
00:07:07.570 --> 00:07:08.560
So let's try that.

97
00:07:09.220 --> 00:07:13.890
If we put it around the restaurant info card, will that affect the restaurant info card?

98
00:07:14.650 --> 00:07:15.160
Let's see.

99
00:07:16.070 --> 00:07:22.520
So let's put it around here and by doing this, oh, OK, now the fate animation is coming in and every

100
00:07:22.520 --> 00:07:29.810
single card itself is feeding itself into view, which creates this pleasing effect of it coming in

101
00:07:30.380 --> 00:07:32.370
and where you put the animation.

102
00:07:32.390 --> 00:07:33.950
This is why I wanted to showcase this.

103
00:07:33.950 --> 00:07:39.500
Where you put the animation may affect whether or not it occurs, whether or not it breaks other things

104
00:07:39.500 --> 00:07:40.250
in the layout.

105
00:07:40.280 --> 00:07:43.690
So picking the right spot, it's fairly important.

106
00:07:43.970 --> 00:07:47.480
And if we go over, here's the settings, we can put it in a bunch of different spots.

107
00:07:47.730 --> 00:07:53.810
But basically what we want to achieve here is the ability for you to be able to use this feed into view

108
00:07:53.810 --> 00:07:56.660
and put it in certain places to create that aesthetic.

109
00:07:57.470 --> 00:08:02.330
Now, with that, we've created a lot of Polish to our application because the main feature that you

110
00:08:02.330 --> 00:08:08.990
are greeted with as a user now has this aesthetically pleasing thing where it comes into view and you

111
00:08:08.990 --> 00:08:12.560
have this nice effect guiding you into the restaurant.

112
00:08:12.560 --> 00:08:17.690
Less than that feeling, that user experience is extremely important for keeping users engaged.

113
00:08:18.350 --> 00:08:23.780
OK, so now that we have that in place, what else do we need to do?

114
00:08:23.810 --> 00:08:26.380
Well, do we have any errors?

115
00:08:26.390 --> 00:08:27.680
Do we have any LINTANG errors?

116
00:08:27.680 --> 00:08:28.760
Doesn't seem like it.

117
00:08:29.710 --> 00:08:33.220
So with that, we've now added a very good level of Polish to our application.

