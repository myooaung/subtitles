1
00:00:01,220 --> 00:00:06,770
Let's start off by building our request, so first off, in our restaurant service, we're going to

2
00:00:06,770 --> 00:00:15,710
have CONSED restaurant request and this is going to be a request to get restaurants right.

3
00:00:16,070 --> 00:00:23,120
So any time you do this, you need to think, OK, what is my restaurant request need in order to get

4
00:00:23,240 --> 00:00:24,440
the information?

5
00:00:25,390 --> 00:00:34,060
For the restaurants, well, the first thing we need is the location, and so by getting the location,

6
00:00:34,060 --> 00:00:36,550
we'll be able to retrieve.

7
00:00:37,410 --> 00:00:46,320
Whether or not it's Toronto, Chicago or anything else, now, if we go look at our Mock's, they're

8
00:00:46,320 --> 00:00:49,080
based on a longitude latitude.

9
00:00:49,090 --> 00:00:50,760
So this is a position on a map.

10
00:00:51,540 --> 00:00:59,400
And so that is going to be the location that will be requesting by so any time we get a location.

11
00:00:59,790 --> 00:01:05,220
And so we'll put our default location to San Francisco just for now, will say that in the service,

12
00:01:05,220 --> 00:01:07,970
the default location is equal to San Francisco.

13
00:01:08,430 --> 00:01:16,080
What we can do inside of here is we can say, OK, well, I need to import my MOCs.

14
00:01:17,700 --> 00:01:25,650
And I need to import those from Dotts Mock's so we can do index or we can just do this, which will

15
00:01:25,650 --> 00:01:26,540
pull the index.

16
00:01:27,120 --> 00:01:31,800
So now that we have our Mock's, we can console that log mocs.

17
00:01:33,140 --> 00:01:35,180
OK, so how do we run this?

18
00:01:35,630 --> 00:01:36,650
Well, first of all.

19
00:01:37,930 --> 00:01:43,180
We can't really run it right now because we don't have any availability, we haven't imported this anywhere,

20
00:01:43,780 --> 00:01:49,540
so the way that we can quickly and easily test this is we can, for instance, import it at the top

21
00:01:49,540 --> 00:01:55,270
level so we could say like import something like import restaurants request.

22
00:01:56,140 --> 00:01:57,700
And then we could say from.

23
00:01:58,630 --> 00:02:02,890
This is not the final implementation, but this is just for us to, like, see what's going on, that's

24
00:02:03,160 --> 00:02:08,680
source slash services, slash restaurants, and then we'll do restaurant service.

25
00:02:09,580 --> 00:02:17,460
And over here we have to make sure that we export this right, because we're importing this specifically.

26
00:02:18,100 --> 00:02:25,220
And so now we can go to our terminal and we can see what is going on here.

27
00:02:25,780 --> 00:02:34,360
So when we run this, what we can see is all of the mock's that are available and they're massive,

28
00:02:34,570 --> 00:02:36,130
massive, massive objects.

29
00:02:36,670 --> 00:02:37,300
So.

30
00:02:38,210 --> 00:02:45,800
If we were to say that we wanted a specific mosque, we could take our location and we could say, let's

31
00:02:45,800 --> 00:02:47,030
call our location.

32
00:02:48,340 --> 00:02:56,200
So our location is this, and we know that this massive object takes the location as a key, so if we

33
00:02:56,200 --> 00:02:59,710
did Mock's location, we should get an object.

34
00:02:59,710 --> 00:02:59,950
Right.

35
00:03:00,310 --> 00:03:02,050
And sure enough, we do.

36
00:03:02,260 --> 00:03:08,920
And we know that it's San Francisco because of the places that are coming back from it.

37
00:03:09,940 --> 00:03:13,960
So with that, we now have a mock of a location.

38
00:03:14,850 --> 00:03:16,990
OK, so we have a mock of a location.

39
00:03:17,590 --> 00:03:23,410
And so with that mock of a location, we now know that we can pull specific mock information from specific

40
00:03:23,410 --> 00:03:25,790
spots as long as we have the right key.

41
00:03:26,560 --> 00:03:31,410
So our mock information is already set up for us properly over here.

42
00:03:32,920 --> 00:03:34,990
So in this case.

43
00:03:36,200 --> 00:03:44,000
What we need to do is whenever we do an API call, it's going to be something called a promise, and

44
00:03:44,000 --> 00:03:46,000
a promise is something that you have to await.

45
00:03:46,010 --> 00:03:47,990
It's something that runs asynchronously.

46
00:03:47,990 --> 00:03:49,890
It's something that happens in the future.

47
00:03:50,660 --> 00:03:58,220
And so because we want our request to mimic as close to a real API as possible, what we need to do

48
00:03:58,220 --> 00:04:03,970
here is, well, the Mock's location returns almost immediately because it's local, right?

49
00:04:04,220 --> 00:04:07,030
So we have to mimic as if it was a promise.

50
00:04:07,040 --> 00:04:13,790
So we'll return new promise and then we'll do a new promise, takes a resolve and a reject function.

51
00:04:14,960 --> 00:04:22,670
And what we'll do is we'll go inside the function of this and we'll say, get the mark so Consed Mark

52
00:04:23,180 --> 00:04:30,860
is equal to Mark's location and then we'll say, if you don't have a mark for this location, reject

53
00:04:30,860 --> 00:04:33,200
and say no location.

54
00:04:33,200 --> 00:04:33,830
Not found.

55
00:04:34,100 --> 00:04:34,450
Right.

56
00:04:34,490 --> 00:04:35,200
Not found.

57
00:04:35,600 --> 00:04:36,950
That's the first thing we got to do.

58
00:04:38,080 --> 00:04:42,370
And then once we do that, it becomes pretty easy.

59
00:04:43,310 --> 00:04:48,110
If we do have a mock, will resolve the mock.

60
00:04:49,800 --> 00:04:54,750
OK, so now that we have this, what's going to happen over here is.

61
00:04:56,050 --> 00:04:57,760
What is our Consolo going to give us?

62
00:04:58,420 --> 00:05:01,180
Well, this is now going to be a then.

63
00:05:02,400 --> 00:05:02,780
Right.

64
00:05:02,820 --> 00:05:06,640
So any time you create a promise, it is now deniable.

65
00:05:06,960 --> 00:05:09,060
So it's awaiting something in the future.

66
00:05:09,570 --> 00:05:14,340
This is a way of basically saying a restaurant request is not going to return immediately.

67
00:05:14,550 --> 00:05:16,970
It's going to return sometime in the future.

68
00:05:17,430 --> 00:05:18,900
So we're doing that then.

69
00:05:19,290 --> 00:05:21,990
And that then returns us the result.

70
00:05:23,090 --> 00:05:29,420
As an inner function, so by doing this, syntax will be resolving the inner function and will have

71
00:05:29,420 --> 00:05:35,780
the result, and if we don't do a log result, we'll retrieve the result now.

72
00:05:36,620 --> 00:05:39,200
So now we can see that we have our result again.

73
00:05:39,200 --> 00:05:45,140
So we're getting the actual return of San Francisco information.

74
00:05:45,800 --> 00:05:50,650
Now, if we did not catch, we could see what would happen if we got an error.

75
00:05:51,350 --> 00:05:54,140
So if we got an error console log error.

76
00:05:54,980 --> 00:05:55,340
Right.

77
00:05:56,280 --> 00:06:01,080
We would see what would go on if we actually got the error, so if we filled in a location here that

78
00:06:01,080 --> 00:06:10,440
doesn't exist like something random, what we're going to see over here at the bottom is an error case

79
00:06:10,440 --> 00:06:11,340
happen, right?

80
00:06:11,340 --> 00:06:12,240
Error, error.

81
00:06:13,080 --> 00:06:14,790
Now, what is the error?

82
00:06:14,850 --> 00:06:18,820
Well, the error is not found because it can't find this location.

83
00:06:19,050 --> 00:06:20,300
This does not exist.

84
00:06:20,730 --> 00:06:21,240
So.

85
00:06:22,480 --> 00:06:29,110
With that, we have to know now that we're mimicking a real API in a very, very simple fashion.

86
00:06:29,710 --> 00:06:34,570
OK, so in the next video, we'll look at the shape of the data and what it's returning us.

