WEBVTT
1
00:00:00.390 --> 00:00:05.370
Now that we have our credentials ready and we've set up Google Cloud platform in order to be able to

2
00:00:05.370 --> 00:00:11.210
utilize the maps services, the next thing we'll need is a package.

3
00:00:11.820 --> 00:00:14.730
It's the no client for Google Maps services.

4
00:00:14.800 --> 00:00:22.110
This library is a factor of the original Google Maps it is utilized to use in nogs.

5
00:00:22.260 --> 00:00:27.810
So it's basically a package that we can use in our firebase function if we want to geocode something,

6
00:00:27.810 --> 00:00:29.980
look for directions, et cetera, et cetera.

7
00:00:30.000 --> 00:00:33.780
It's basically a wrapper around all of the maps, API calls.

8
00:00:34.020 --> 00:00:36.030
And so these are the APIs that it exposes.

9
00:00:36.060 --> 00:00:41.700
And over here we can see it exposes the geocoding API and the police's API, both APIs that we want

10
00:00:41.700 --> 00:00:42.270
to use.

11
00:00:42.750 --> 00:00:46.260
Now, this library is designed for server side, not just applications.

12
00:00:46.500 --> 00:00:49.380
You cannot use it client side if you use a client side.

13
00:00:49.650 --> 00:00:51.030
In some cases it could work.

14
00:00:51.030 --> 00:00:54.150
But personally, I would steer clear from that.

15
00:00:54.690 --> 00:00:58.680
So what we're going to do is we're going to copy this and then we're going to go over to our code.

16
00:00:58.680 --> 00:01:00.930
We're going to open up our command line.

17
00:01:01.830 --> 00:01:07.110
And what we're going to do is we're going to do yarn, add Google Maps, Google Map Services.

18
00:01:07.800 --> 00:01:10.290
This is going to install the client.

19
00:01:10.800 --> 00:01:14.170
And then once we have that, we can import the client.

20
00:01:14.730 --> 00:01:21.300
Now, obviously, this is the typescript S6 type notation where we use the import syntax.

21
00:01:21.690 --> 00:01:23.550
Now, we're not using that.

22
00:01:23.550 --> 00:01:25.710
We're going to use the required syntax.

23
00:01:26.630 --> 00:01:34.250
If we go over to our server environment for our functions and we go over to the root index, then we

24
00:01:34.250 --> 00:01:35.480
can import the client.

25
00:01:36.400 --> 00:01:38.620
And now we have to bootstrap the client in some way.

26
00:01:39.620 --> 00:01:45.860
So the way that we do that is we go beneath the import statement and we say create a client when the

27
00:01:45.860 --> 00:01:52.700
core of the firebase functions start, and now we can pass that client along to our geocode request

28
00:01:53.030 --> 00:01:59.780
as well as our places of requests in this client is what we're going to utilize to do our API call.

29
00:02:00.890 --> 00:02:07.610
If we go over to our geocode request, then what we can do is we can accept client as an extra parameter,

30
00:02:08.330 --> 00:02:10.990
but now we're in a particular situation, right?

31
00:02:11.210 --> 00:02:14.450
Because right now we're only returning moch information.

32
00:02:15.350 --> 00:02:19.210
So this doesn't really help us in terms of making smart decisions.

33
00:02:19.940 --> 00:02:24.770
What I want us to do is I want us to accept the second parameter called Moch on the wall.

34
00:02:25.280 --> 00:02:29.890
And if Mark is being passed, that is when we'll return a location.

35
00:02:30.620 --> 00:02:35.330
Now, the way to do that is we have to check if Mark is equal to true.

36
00:02:35.450 --> 00:02:43.970
Now, query parameters come in a string's when Mark comes in, Mark will be equal to true or false as

37
00:02:43.970 --> 00:02:44.570
a string.

38
00:02:45.420 --> 00:02:47.820
And so we need to validate that in that way.

39
00:02:49.690 --> 00:02:53.470
So what we'll say here is if Mark is is equal to true.

40
00:02:54.530 --> 00:03:02.540
Then we will run the response that, Jason, for this and we'll also return the response that Jason

41
00:03:02.540 --> 00:03:03.830
so that it doesn't continue.

42
00:03:04.790 --> 00:03:12.350
After we do that now, beyond this line of code, we can actually accept the ability to return something

43
00:03:12.350 --> 00:03:12.500
else.

44
00:03:12.500 --> 00:03:14.420
So a response to Jason here.

45
00:03:15.800 --> 00:03:16.820
Something else.

46
00:03:18.270 --> 00:03:25.350
And when we do that, what we're going to see is if we do yard serve and we try to utilize our geocoding

47
00:03:25.350 --> 00:03:25.770
API.

48
00:03:26.980 --> 00:03:34.630
If we go over here to localhost five thousand and one and we do Geocode.

49
00:03:35.780 --> 00:03:40.400
Well, we're going to see is if we do Geocode, Antwerp is going to hit something else.

50
00:03:40.820 --> 00:03:46.880
But if we say and Mark is equal to true, now we're getting more information.

51
00:03:48.050 --> 00:03:50.340
OK, well, why does Mark need to be this way?

52
00:03:50.370 --> 00:03:51.870
Well, let me remove that real quick.

53
00:03:52.770 --> 00:03:56.510
And what we can see here is that if Mark is equal to true, it will still work.

54
00:03:56.700 --> 00:03:59.640
But if Mark is equal to something else, it will still work.

55
00:04:00.270 --> 00:04:04.040
And if Mark is equal to false, it still works.

56
00:04:04.290 --> 00:04:06.540
So it isn't really parsing the value.

57
00:04:06.720 --> 00:04:09.270
What it's doing is it's using the string based value.

58
00:04:09.280 --> 00:04:11.400
So we're sending it to false and it's still working.

59
00:04:11.940 --> 00:04:16.440
That is why we're checking it against the true value as a string.

60
00:04:16.829 --> 00:04:21.300
There are other ways that you could pass this, but we're trying to keep it simple since it's just the

61
00:04:21.300 --> 00:04:22.590
mock solution over here.

62
00:04:23.610 --> 00:04:29.610
OK, so now that we know that we can do something else over here, what we're going to do is we're going

63
00:04:29.610 --> 00:04:34.260
to utilize that client and what we're going to do is do client or geocode.

64
00:04:35.440 --> 00:04:42.970
And this will accept parameters now, the parameters it will accept are the following, it will accept

65
00:04:42.970 --> 00:04:46.120
address, in which case we're going to put address a city.

66
00:04:46.690 --> 00:04:53.020
So the city we get is what we're going to give to the address parameter, and that will translate into

67
00:04:53.470 --> 00:04:54.640
geocode search.

68
00:04:55.370 --> 00:04:57.250
And then the second parameter is the key.

69
00:04:57.640 --> 00:05:02.440
Now, this is the API key for Google that we just got.

70
00:05:03.420 --> 00:05:06.540
Interesting, so are we just kind of hard coded in here?

71
00:05:07.110 --> 00:05:13.010
Well, no hard coding API keys directly into here is not a great idea.

72
00:05:13.320 --> 00:05:15.210
So we'll take a look at that in a minute.

73
00:05:15.210 --> 00:05:16.860
But let's just finish up what we need to do.

74
00:05:17.280 --> 00:05:20.490
Let's add a time out of a thousand seconds, a thousand milliseconds.

75
00:05:20.490 --> 00:05:21.690
So it's going to wait one second.

76
00:05:21.690 --> 00:05:23.310
If it doesn't get a response, then it's going to.

77
00:05:24.330 --> 00:05:30.290
And what we're going to say is that when Geocode returns, the results is what we're going to send back.

78
00:05:30.540 --> 00:05:35.960
So we're going to say return response Dodgson of red dot data.

79
00:05:36.750 --> 00:05:41.900
And this is going to allow us to return the data that comes back from the Geocode API.

80
00:05:42.270 --> 00:05:46.830
Otherwise, if we catch something, what we're going to do is we're going to take that error and we're

81
00:05:46.830 --> 00:05:49.230
going to say response.

82
00:05:49.230 --> 00:05:50.100
That's status.

83
00:05:51.850 --> 00:05:56.830
Is equal to four hundred, so we're going to say four hundred, something went wrong and we're going

84
00:05:56.830 --> 00:05:58.980
to say a response thought send.

85
00:05:59.740 --> 00:06:02.410
So we're going to return a response thoughts and we're not going to respond.

86
00:06:02.420 --> 00:06:03.580
SJS, Jason, in this case.

87
00:06:04.270 --> 00:06:06.370
And we're going to send an error.

88
00:06:07.310 --> 00:06:13.730
Of IDOT response, the data error message, OK?

89
00:06:14.870 --> 00:06:20.000
So now that this is set up, well, let's go look over here, if we look at the way that this is set

90
00:06:20.000 --> 00:06:22.400
up and we do Mark Drew.

91
00:06:24.030 --> 00:06:26.310
If we say and Mark.

92
00:06:27.140 --> 00:06:28.550
Is equal to true.

93
00:06:29.760 --> 00:06:35.400
We're going to get more information, McCaffrey now say it's equal to false, the provided APIC is invalid.

94
00:06:36.260 --> 00:06:39.990
OK, so how are we going to give our API key to the service?

95
00:06:41.150 --> 00:06:42.090
Well, that's a good question.

96
00:06:42.770 --> 00:06:47.630
There are many different ways to look at this, to how to supply the we could hardcoded in here and

97
00:06:47.630 --> 00:06:51.140
you could go take the AP IQ we just generated from Google, put it straight in here.

98
00:06:51.530 --> 00:06:56.030
But we want to go one level above and do a bit more management here.

99
00:06:56.330 --> 00:07:00.560
So I'm going to show you a way on how to manage secrets with Firebase.

