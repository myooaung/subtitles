WEBVTT
1
00:00:00.330 --> 00:00:08.280
All right, we can talk the stripe when we can get a token, we can even put in information and send

2
00:00:08.280 --> 00:00:09.150
it over, right.

3
00:00:09.660 --> 00:00:11.920
But it's not built to our staff.

4
00:00:12.510 --> 00:00:14.180
We have standards in this code base.

5
00:00:14.190 --> 00:00:15.330
We don't just do things.

6
00:00:15.330 --> 00:00:15.840
We do them.

7
00:00:17.140 --> 00:00:24.460
And so implementing the stripe integration directly in the component just doesn't feel right, and you

8
00:00:24.460 --> 00:00:27.160
can know and you hear where I'm leaning towards.

9
00:00:27.730 --> 00:00:29.130
Why isn't this a service?

10
00:00:29.890 --> 00:00:30.790
And you're right.

11
00:00:30.940 --> 00:00:32.140
Why isn't it a service?

12
00:00:32.560 --> 00:00:33.340
I messed up.

13
00:00:33.940 --> 00:00:39.910
Or rather, I wanted to show you how the integration would look in a simple way before we go and scale

14
00:00:39.910 --> 00:00:40.030
it.

15
00:00:40.030 --> 00:00:42.820
And even in your day to day job, this is something you want to take.

16
00:00:43.660 --> 00:00:49.300
You want to try things out on a smaller scale before you start expanding it, because the more you expand

17
00:00:49.300 --> 00:00:55.510
it, if you can't prove the simple solution, then you won't be able to get the bigger picture going

18
00:00:55.510 --> 00:00:55.860
right.

19
00:00:55.870 --> 00:01:02.020
We want to make sure that this library works before we start integrating the seven different files in

20
00:01:02.020 --> 00:01:03.160
which we're going to split it up.

21
00:01:03.160 --> 00:01:03.430
Right.

22
00:01:03.820 --> 00:01:04.940
So that was the main point.

23
00:01:05.440 --> 00:01:10.390
And now that we've proven this, what we can go ahead and do is start doing some of that split out.

24
00:01:11.050 --> 00:01:16.540
So what we're going to see over here is in the services, we're going to create a new folder called

25
00:01:16.540 --> 00:01:17.080
Checkout.

26
00:01:17.590 --> 00:01:22.930
And in checkout, we're going to have something called Checkout Thought Service Dot James.

27
00:01:24.240 --> 00:01:31.140
And inside of that service is where we're going to move the bulk of the information that was in here,

28
00:01:31.140 --> 00:01:35.370
so we're going to take it to create strife in the normal strife we're going to put inside of here.

29
00:01:35.820 --> 00:01:40.980
We're going to remove the wheat stripe that create Tolkan directly from here.

30
00:01:41.430 --> 00:01:45.990
We're going to make this a weight of what should we call it.

31
00:01:46.420 --> 00:01:52.410
It's always like there's naming things is always one of the hardest things you can do when writing code.

32
00:01:52.810 --> 00:01:56.270
So I think what we should call it is called token request.

33
00:01:56.280 --> 00:02:00.210
So let's say export const card, token request.

34
00:02:00.810 --> 00:02:06.690
And what that's going to do is it's going to do the stripe out, create token on our behalf of the card

35
00:02:06.690 --> 00:02:08.210
information we send to it.

36
00:02:08.490 --> 00:02:12.300
So we'll send it some card info and that's what it's going to do for us.

37
00:02:12.450 --> 00:02:19.440
It's a very, very, very simple wrapper that's just going to take the card and create the card token

38
00:02:19.440 --> 00:02:20.010
for us.

39
00:02:20.950 --> 00:02:27.580
OK, so knowing that, Mo, why aren't you wrapping this in a dog then and all that stuff?

40
00:02:27.610 --> 00:02:31.290
Well, we're just creating the indirection here.

41
00:02:31.300 --> 00:02:37.780
So what we want to do is instead of doing our stripe integration directly in here, we're going to import

42
00:02:37.990 --> 00:02:45.400
car token requests from thoughts, thoughts that slash services, slash checkout's, check out that

43
00:02:45.400 --> 00:02:45.900
service.

44
00:02:46.660 --> 00:02:48.700
And so we'll take our car token request.

45
00:02:48.700 --> 00:02:51.520
And instead of waiting, that will await the car token request.

46
00:02:51.950 --> 00:02:55.260
We'll make sure that all of this still works.

47
00:02:56.510 --> 00:03:04.460
By going into our terminal over here and then once we do that, where we can see in the checkout is

48
00:03:04.460 --> 00:03:06.430
if we fill in the three, it's true.

49
00:03:06.950 --> 00:03:10.100
So why couldn't we just put the stripe library here?

50
00:03:10.130 --> 00:03:14.440
Well, we don't want to put the library integration's directly in the components.

51
00:03:14.450 --> 00:03:19.160
Rather, we want our service layer to control talking to the external party.

52
00:03:19.160 --> 00:03:19.400
Right.

53
00:03:19.550 --> 00:03:23.180
Our service layer talks to strike on our behalf.

54
00:03:23.360 --> 00:03:28.220
That way, if anything needed to change card token request, we don't need to go directly into the credit

55
00:03:28.220 --> 00:03:31.800
card component and start fiddling around with all of these settings.

56
00:03:31.830 --> 00:03:33.440
No, no, we're organizing things.

57
00:03:33.440 --> 00:03:36.020
We're merican doing our code base, so to speak.

58
00:03:36.620 --> 00:03:44.600
And so with that now, what we can go ahead and do is start integrating the credit card component properly

59
00:03:44.870 --> 00:03:47.210
to the information that is on values.

60
00:03:47.720 --> 00:03:50.840
And so the first thing is this is going to be values is no.

61
00:03:51.530 --> 00:03:51.920
Right.

62
00:03:52.310 --> 00:03:57.230
And then we're going to go look and we're going to go see, well, what what else is in values.

63
00:03:57.500 --> 00:04:03.380
So let's go ahead and disable this for a second and let's go take a look at what's on values.

64
00:04:03.380 --> 00:04:03.740
Right.

65
00:04:04.570 --> 00:04:12.280
And so what we can see is that we have an expiry, a type and a CVC, so we know that Coke is going

66
00:04:12.280 --> 00:04:14.180
to be values, thought CVC.

67
00:04:14.590 --> 00:04:19.980
We don't necessarily have a name yet, and that's because the name is going to come externally.

68
00:04:20.380 --> 00:04:23.080
That's going to come from somewhere else.

69
00:04:23.350 --> 00:04:28.140
So the name is going to come into the credit card because it's going to be filled in somewhere else.

70
00:04:28.570 --> 00:04:32.230
So we're going to default the name for now to MO.

71
00:04:32.650 --> 00:04:34.240
That's what we're going to default it to.

72
00:04:34.720 --> 00:04:37.870
And by doing that now we have three of the five.

73
00:04:38.530 --> 00:04:44.500
But what we can see here is if we fill in all of this information just just really quickly and you can

74
00:04:44.500 --> 00:04:46.480
see it's not accepting this as an input.

75
00:04:46.480 --> 00:04:49.230
So it has some credit card validation built into it.

76
00:04:50.080 --> 00:04:58.690
If we fill this in, what we can see is that here at the bottom, expiry is a string, but we need two

77
00:04:58.690 --> 00:04:59.980
separate parameters.

78
00:04:59.980 --> 00:05:07.630
So what we're going to do is values that expiry and we're going to do a thought split and we're going

79
00:05:07.630 --> 00:05:09.100
to split it on the slash.

80
00:05:09.490 --> 00:05:17.440
So then over here we're going to say CONSED and we'll say expiry is equal to values that expire that

81
00:05:17.440 --> 00:05:18.020
split.

82
00:05:18.610 --> 00:05:24.850
And by doing this, we can now say the month is zero and the year is one.

83
00:05:25.270 --> 00:05:28.600
Because if we cancel the log this right.

84
00:05:29.140 --> 00:05:33.670
What we're going to see inside of expiry is actually.

85
00:05:34.810 --> 00:05:37.960
We should see these two fields, it was locked above.

86
00:05:39.010 --> 00:05:43.990
Got a little confused there on the logs, but yeah, right here we see an array of two values, zero,

87
00:05:43.990 --> 00:05:45.000
four and twenty two.

88
00:05:45.190 --> 00:05:48.100
So by calling the zero index, we're getting to zero four.

89
00:05:48.130 --> 00:05:50.710
By calling the first index, we're getting the twenty two.

90
00:05:51.650 --> 00:05:55.280
Now that we have all of that, we can turn this back on.

91
00:05:56.240 --> 00:06:02.390
And we can give it the card information, we can remove the council log, we can console that log info

92
00:06:02.390 --> 00:06:02.770
here.

93
00:06:03.620 --> 00:06:11.660
And by doing this now, if we fill in a civic code right here due to what we're going to see is that

94
00:06:11.660 --> 00:06:13.220
we're getting a token back.

95
00:06:13.490 --> 00:06:16.220
So we're getting our token back.

96
00:06:16.960 --> 00:06:22.810
And two things that we'll need to do later on, we'll need to be able to pass this Tolkan up to the

97
00:06:22.810 --> 00:06:27.310
checkout and if an error occurs, we also need to pass the error up.

98
00:06:27.730 --> 00:06:29.380
But that's more of a leader concern.

99
00:06:29.380 --> 00:06:36.640
Right now, we've focused on implementing the first full flow of our user being our user inputs.

100
00:06:36.640 --> 00:06:42.000
Their credit card info goes to Strib, creates a token, flows all the way back to the user.

101
00:06:42.280 --> 00:06:47.680
So now that we have that, we can take that token and we can start building a checkout.

