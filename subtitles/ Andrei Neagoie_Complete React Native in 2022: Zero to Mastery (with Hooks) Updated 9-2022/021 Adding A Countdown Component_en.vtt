WEBVTT
1
00:00:00.870 --> 00:00:07.800
All right, so in this next video, what we're going to do is we're actually going to set up what is

2
00:00:07.800 --> 00:00:11.220
in the demo called the countdown component.

3
00:00:11.820 --> 00:00:18.510
So the countdown component is basically, in essence, this component right here and we are providing

4
00:00:18.510 --> 00:00:25.290
this to you out of the box, this specific component that's going to handle counting down the time this

5
00:00:25.290 --> 00:00:30.690
component kind of like the button component, is an isolated component, which sole purpose is to visualize

6
00:00:30.690 --> 00:00:34.050
numbers in this box and subsequently count them down.

7
00:00:34.530 --> 00:00:43.140
If you go into the links on the resources, what you will find is a resource to the actual countdown

8
00:00:43.140 --> 00:00:43.800
component.

9
00:00:44.250 --> 00:00:50.940
And what all you need to do is copy out that code specifically for the countdown component.

10
00:00:51.990 --> 00:00:56.040
And will add it to a component inside of our snack.

11
00:00:56.490 --> 00:01:00.690
So we go over here to components and we do Countdown Dot J.S..

12
00:01:03.440 --> 00:01:07.910
So now let's look at what this component is actually trying to do, this components.

13
00:01:07.940 --> 00:01:13.910
So visual rim, there is a text output with the form at a time of the minutes and the format of time

14
00:01:13.910 --> 00:01:15.200
of the seconds left.

15
00:01:15.920 --> 00:01:21.800
We take the milliseconds and we kind of divide the by a thousand divided by six and we have the minutes.

16
00:01:21.800 --> 00:01:27.170
And if we take the milliseconds, divide them by a thousand and then modulo 60, we have the seconds

17
00:01:27.170 --> 00:01:27.420
left.

18
00:01:27.440 --> 00:01:31.700
So all they're rendering out is the minutes and the seconds.

19
00:01:32.540 --> 00:01:36.860
That's the sole purpose of this component, but there's a bit more complexity to it because if we look

20
00:01:36.860 --> 00:01:42.290
at the top of this component, basically what you'll see is that this component has some utility functions

21
00:01:42.290 --> 00:01:44.240
to convert minutes to milliseconds.

22
00:01:44.780 --> 00:01:46.770
It also has a function to form at the time.

23
00:01:46.790 --> 00:01:54.230
Now, the specifics of how these functions work are not really relevant for the core of this course,

24
00:01:54.230 --> 00:01:56.150
but let's go through them just to look at it.

25
00:01:56.690 --> 00:02:01.730
Minutes The Milly's takes in an amount in minutes and then the time, sometimes a thousand times, sometimes

26
00:02:01.730 --> 00:02:03.830
60, which converts them to milliseconds.

27
00:02:04.460 --> 00:02:08.840
Format time will take the amount of time left and then.

28
00:02:09.880 --> 00:02:13.900
If it's smaller than 10, a pin that would have zero or otherwise remove time.

29
00:02:14.170 --> 00:02:20.680
This is purely for the visual aspect over here where we add format time because if we're counting down,

30
00:02:20.890 --> 00:02:28.570
let's say 10 nine eight seven six, once you reach nine seven six five, the zero in front isn't necessarily

31
00:02:28.570 --> 00:02:30.220
something that is visualized.

32
00:02:30.250 --> 00:02:32.880
So we need to format it in order to add it.

33
00:02:32.890 --> 00:02:38.350
If we don't add it, then you would just see zero zero nine eight seven six, which doesn't look right

34
00:02:38.350 --> 00:02:40.000
in terms of like a countdown timer.

35
00:02:40.780 --> 00:02:44.560
So at the top here we have a cast interval is use ref.

36
00:02:45.070 --> 00:02:48.080
Use ref is a hook from react.

37
00:02:48.490 --> 00:02:55.030
Now the mean difference between use ref and you state is that you use state will cause a re render and

38
00:02:55.030 --> 00:03:00.900
use ref will not also similarly use state exposure to variables in an array syntax.

39
00:03:00.910 --> 00:03:04.630
One is the holder of the actual value and the other is the center.

40
00:03:05.620 --> 00:03:14.320
A ref only returns you one object in which you can set it to whatever variable you want in, if that

41
00:03:14.320 --> 00:03:16.390
variable changes, if something happens to it.

42
00:03:17.020 --> 00:03:19.720
It won't really cause a rerun to happen on the screen.

43
00:03:20.380 --> 00:03:26.650
So when we count down, basically what we're going to use is something called set interval, which is

44
00:03:27.010 --> 00:03:33.460
in JavaScript, a function that allows you during a certain period of time to call a function.

45
00:03:33.470 --> 00:03:38.980
So here we're saying every 1000 milliseconds or every second call the countdown function.

46
00:03:39.280 --> 00:03:40.570
That's what our intervals doing.

47
00:03:41.590 --> 00:03:52.270
So when we use React, use ref, we're using it to track the value of set interval so that we can clear

48
00:03:52.270 --> 00:04:01.090
it in case you know, we want to pause the timer or in case our component is removed from the screen.

49
00:04:01.750 --> 00:04:03.250
That's all it's trying to do.

50
00:04:03.790 --> 00:04:09.160
So the way that this works is if we look over here constantly, we're setting the initial value to null.

51
00:04:09.670 --> 00:04:16.600
And then when we come into our function, our first use effect use effect has this property where if

52
00:04:16.600 --> 00:04:21.430
you don't give it any properties, that's going to be the equivalent of mounting the component.

53
00:04:22.180 --> 00:04:24.220
But we're passing, this is paused.

54
00:04:25.920 --> 00:04:29.100
Which is a property on the countdown timer.

55
00:04:29.700 --> 00:04:34.230
Now this is going to be evaluated, the very first time pass gets a value, which is either true or

56
00:04:34.230 --> 00:04:34.650
false.

57
00:04:35.160 --> 00:04:40.080
So if it is paused, we're going to clear the interval from interval duck current.

58
00:04:40.080 --> 00:04:44.210
So we're tracking the actual return value of the interval we've set.

59
00:04:44.220 --> 00:04:50.040
If it was given a value, if it wasn't, then we won't do it for safety reasons because we're not going

60
00:04:50.040 --> 00:04:50.880
to clear null.

61
00:04:51.360 --> 00:04:54.930
It's only if interval was actually set over here previously.

62
00:04:55.930 --> 00:05:01.120
OK, so looking at that, well, let's say we come in and we're not past, then we're going to set interval

63
00:05:01.120 --> 00:05:04.420
to set interval and we're going to call the countdown function every second.

64
00:05:05.230 --> 00:05:09.790
If we remove this from the screen, we're going to clear the interval completely and that's for the

65
00:05:09.790 --> 00:05:10.960
safety of memory.

66
00:05:13.600 --> 00:05:14.020
Cool.

67
00:05:15.160 --> 00:05:20.260
Now, if we look at every time milliseconds changes, so OK, let's go look at here.

68
00:05:20.590 --> 00:05:24.580
So every second we're going to call Countdown if we're in a countdown function.

69
00:05:24.580 --> 00:05:28.600
So let's say a press start every second, it's going to call Countdown.

70
00:05:28.600 --> 00:05:29.770
That's what's happening over here.

71
00:05:31.060 --> 00:05:37.360
Now, if we look at Countdown, Countdown is calling set milliseconds, but it's calling seven milliseconds

72
00:05:37.360 --> 00:05:40.480
with a callback function so that we isolate the behavior.

73
00:05:40.930 --> 00:05:48.520
And the reason we call it this way is so that we're ensured that time is always the previously set amount

74
00:05:48.520 --> 00:05:49.570
of milliseconds.

75
00:05:50.850 --> 00:05:53.040
That was given to Milly's.

76
00:05:53.490 --> 00:06:00.930
Now why don't we just you, you know, set Milly's and then do Milly's minus whatever?

77
00:06:01.230 --> 00:06:08.880
Well, Milly's is being adapted as we countdown in the interval, so you may get into weird memory states

78
00:06:08.880 --> 00:06:09.810
while doing that.

79
00:06:10.020 --> 00:06:17.070
Every time we call Countdown, we want to ensure that the time passed in or the time being manipulated

80
00:06:17.580 --> 00:06:21.330
is the time that was previously given to milliseconds.

81
00:06:21.330 --> 00:06:26.700
So we do this callback function and then we're ensured that this value is the previous value.

82
00:06:27.090 --> 00:06:32.850
Whatever we return at the end is what is going to be set whenever we return at any point in the function

83
00:06:32.850 --> 00:06:36.030
actually is what's going to be set in milliseconds.

84
00:06:36.420 --> 00:06:41.490
So we get the previous time and then we say if time is zero, hey, you know, at the end the timer

85
00:06:42.330 --> 00:06:43.500
and return zero.

86
00:06:44.100 --> 00:06:49.560
But if it isn't, take the amount of milliseconds, take a second off of them and return that.

87
00:06:49.560 --> 00:06:52.440
And that's how you see a countdown here each second.

88
00:06:53.250 --> 00:06:57.600
And that, in a nutshell, is kind of how this countdown timer works.

89
00:06:58.050 --> 00:07:01.890
Now, of course, every time it counts down, we need to report progress.

90
00:07:02.250 --> 00:07:08.580
So the function or the component that's going to use this needs a callback to know, Hey, where am

91
00:07:08.580 --> 00:07:10.170
I at in my countdown cycle?

92
00:07:10.350 --> 00:07:12.210
And that's what our progress is for.

93
00:07:12.600 --> 00:07:18.420
On end is a function that will be passed in by the parent to tell the countdown what to do when it ends.

94
00:07:19.690 --> 00:07:21.370
And that's about it.

95
00:07:21.850 --> 00:07:25.540
That's the countdown function component, in a nutshell.

