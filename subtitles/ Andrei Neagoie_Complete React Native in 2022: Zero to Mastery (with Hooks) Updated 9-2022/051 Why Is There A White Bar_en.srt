1
00:00:00,850 --> 00:00:09,670
Funny story, did you notice right down here that there's this blank space, why is this blank space

2
00:00:09,670 --> 00:00:10,000
here?

3
00:00:10,720 --> 00:00:15,070
Well, it comes from an early decision that we made and we made this decision on purpose because I was

4
00:00:15,070 --> 00:00:20,530
teaching you how Flex works and I was teaching you how Flex works in a very, very specific way because

5
00:00:20,530 --> 00:00:22,570
I didn't want to confuse you between.

6
00:00:22,750 --> 00:00:23,830
Well, Flex applies here.

7
00:00:23,830 --> 00:00:24,790
Flex doesn't apply here.

8
00:00:24,790 --> 00:00:31,690
Flex does this flex does that flex safe area view is one of those special components that is trying

9
00:00:31,690 --> 00:00:33,880
to avoid and dodge.

10
00:00:33,880 --> 00:00:34,360
Right.

11
00:00:34,780 --> 00:00:43,240
The areas that you can click now in order to do that, it basically has a specific overlay schedule.

12
00:00:43,870 --> 00:00:51,730
And so by giving it flex one, basically what we did is we told it, hey, you're forced to be the entire

13
00:00:51,730 --> 00:00:54,670
height and that kind of messed with it.

14
00:00:55,980 --> 00:01:02,070
Now, if we remove flex one, you can see gone is the white little edge, and that looks way more aesthetically

15
00:01:02,070 --> 00:01:04,950
pleasing on iOS specifically, right?

16
00:01:06,020 --> 00:01:12,590
That's way better, but when we put it there, well, we didn't have the issue of it dodging to the

17
00:01:12,590 --> 00:01:13,940
bottom here, right.

18
00:01:13,940 --> 00:01:16,880
Like it actually grew with the bottom.

19
00:01:17,880 --> 00:01:22,560
And so that isn't really aesthetically pleasing, but if we remove the flex one, what we'll see is

20
00:01:22,560 --> 00:01:25,830
that basically now our content is dodging at the bottom.

21
00:01:26,250 --> 00:01:33,540
And so what we could do to avoid that is now we could go calculate a margin bottom over here, right?

22
00:01:33,560 --> 00:01:38,910
We could say margin bottom and then we could kind of go that route and then we could say five.

23
00:01:39,120 --> 00:01:42,420
And that would kind of allow it to dodge the bottom.

24
00:01:42,600 --> 00:01:45,960
But that really isn't dynamic in any way, shape or form.

25
00:01:46,380 --> 00:01:50,280
So you're kind of stuck here with one of two options.

26
00:01:50,280 --> 00:01:55,830
Either you give your safe area of you flex one, in which case everything below it can grow properly.

27
00:01:56,460 --> 00:01:56,850
Right.

28
00:01:56,850 --> 00:02:00,240
And everything below it can kind of properly take the shape.

29
00:02:00,240 --> 00:02:04,590
And you can see here now the area has become double because of this margin bottom.

30
00:02:05,940 --> 00:02:12,750
And that will allow everything to fill properly, but you're stuck with this kind of like, ugly thing,

31
00:02:12,750 --> 00:02:18,570
and if you gave this background color blue, it would become even more obnoxious because now everywhere

32
00:02:18,570 --> 00:02:19,040
it's blue.

33
00:02:19,260 --> 00:02:22,560
But now you can see kind of where it's dodging and what it's wrapping.

34
00:02:22,560 --> 00:02:24,090
And that visual piece is important.

35
00:02:24,630 --> 00:02:29,520
So this is the best way that I found to render a flat list to fill the parent height.

36
00:02:29,760 --> 00:02:34,550
And you kind of have to live with this area here that's going to fill in kind of white.

37
00:02:35,040 --> 00:02:41,220
But to be honest, it's better that way because at least is an indication to the user in the user experience

38
00:02:41,220 --> 00:02:44,460
cycle that this area is free for them to still utilize.

39
00:02:45,000 --> 00:02:50,130
Now, if you don't want that, then you're going to have to remove Fleck's one from the safe area and

40
00:02:50,130 --> 00:02:55,620
you're going to have to do some dynamic calculations inside of either the styles of the restaurant list

41
00:02:55,620 --> 00:03:00,830
or otherwise to determine if your list has over a certain amount of items grow or don't grow.

42
00:03:00,840 --> 00:03:07,920
Because what happens here is if, for instance, we said if this had only two items and we did that,

43
00:03:07,950 --> 00:03:11,280
well, now at least we know that it's filling the full height.

44
00:03:11,280 --> 00:03:15,330
Whereas if we removed Fleck's one here now, it's a bit weird.

45
00:03:15,340 --> 00:03:16,940
Oh, look at where it's cutting off already.

46
00:03:16,950 --> 00:03:17,430
Look at what?

47
00:03:17,430 --> 00:03:19,610
Oh, that's that's not good.

48
00:03:19,830 --> 00:03:25,590
So it's like the better of two evils, in my opinion, to render a flat list this way.

49
00:03:25,950 --> 00:03:34,710
And although this on iOS is not the greatest visual, it still adds usability concerns into account

50
00:03:34,710 --> 00:03:38,310
in terms of having the clickable area and not overlapping it.

51
00:03:38,610 --> 00:03:42,420
And it allows your content inside to grow dynamically, which is useful.

52
00:03:42,420 --> 00:03:47,400
Now, you could go other approaches and you could find different approaches online on how to render

53
00:03:47,400 --> 00:03:51,120
lists dynamically with their height to fill the parent and all this stuff.

54
00:03:51,510 --> 00:03:53,490
But I opt for flex.

55
00:03:53,670 --> 00:03:55,110
In this case, I opt for Flex.

56
00:03:55,110 --> 00:04:00,060
In the scenario, it's just the easiest way of achieving the best possible outcome for the UI.

