1
00:00:00,390 --> 00:00:02,040
Hello.

2
00:00:02,070 --> 00:00:08,310
All right, this is going to be another exciting one, but before we dive into all the coding, all

3
00:00:08,310 --> 00:00:14,550
the building of apps, playing with our phones and feeling confident with react native, there's the

4
00:00:14,550 --> 00:00:20,370
first thing we have to do, and that is to understand the landscape of mobile development.

5
00:00:20,770 --> 00:00:22,500
Why do we use react native?

6
00:00:22,680 --> 00:00:24,660
Why should we use react native?

7
00:00:24,660 --> 00:00:26,700
And what are all our options?

8
00:00:27,450 --> 00:00:28,260
Get ready for this.

9
00:00:28,480 --> 00:00:30,350
I'm going to give you a bit of a history lesson.

10
00:00:31,050 --> 00:00:32,479
So how do we get here?

11
00:00:32,670 --> 00:00:37,140
How do we get to a land where we have apps on our phone?

12
00:00:38,170 --> 00:00:45,250
Well, if you know, just like on your computer applications or apps are designed to run on a particular

13
00:00:45,400 --> 00:00:46,510
operating system.

14
00:00:47,320 --> 00:00:56,320
We have iOS for the iPhones and then we have Android for all other phones, like Samsung, like Google

15
00:00:56,320 --> 00:01:00,510
phones, and these are the two major operating systems in the world.

16
00:01:01,030 --> 00:01:04,840
But the thing is, you can't take one app, let's say an iOS app.

17
00:01:05,710 --> 00:01:08,380
And just run it on an Android app.

18
00:01:09,280 --> 00:01:17,200
Just like you can't use a Windows application on an apple, I mean, sure you can, but usually there's

19
00:01:17,200 --> 00:01:18,400
different download options.

20
00:01:18,400 --> 00:01:20,790
If you have a Mac, then download this app.

21
00:01:21,100 --> 00:01:24,190
If you have a Windows, then download this version of the app.

22
00:01:24,550 --> 00:01:30,910
And without getting too much into the details, this has to do with the underlying architecture that

23
00:01:31,060 --> 00:01:33,580
these operating systems are built on.

24
00:01:34,400 --> 00:01:40,270
iOS or runs apps in a certain way, Android runs apps in a certain way.

25
00:01:40,700 --> 00:01:50,420
So in order for us to target 99 percent of smartphone users, they use iOS or Android, we have to build

26
00:01:50,810 --> 00:01:54,460
two apps, one for Android and one for iOS.

27
00:01:55,130 --> 00:01:56,330
That's not very fun, is it?

28
00:01:56,330 --> 00:01:57,640
But that's the reality.

29
00:01:57,680 --> 00:02:02,480
Most companies, when they start, they decide, hey, should we target Android or should we target

30
00:02:02,810 --> 00:02:08,660
iOS first and then from there build their second version of their app that works in the other operating

31
00:02:08,660 --> 00:02:09,080
system.

32
00:02:10,050 --> 00:02:17,310
Just like on Windows or Macs, so initially when Apple came up with the App Store, they said, hey,

33
00:02:17,820 --> 00:02:24,540
if you want to build an app, well, you need to use this language called Objective C, which they created,

34
00:02:25,110 --> 00:02:31,550
use objective C, and you can code and build an app that can be put on the App Store.

35
00:02:32,040 --> 00:02:35,190
Then Google came along and said, Oh, I want an app store too.

36
00:02:35,310 --> 00:02:40,080
So they created the Google Play store and they said, would the Google Play store, you're going to

37
00:02:40,080 --> 00:02:43,290
have to use Java programming language to build an app.

38
00:02:44,600 --> 00:02:46,160
Now, here's a trick question.

39
00:02:46,470 --> 00:02:51,560
OK, not that tricky because it's going to be obvious, how do you think these operating systems are

40
00:02:51,560 --> 00:02:51,850
written?

41
00:02:52,160 --> 00:02:54,350
What language is iOS?

42
00:02:54,350 --> 00:02:55,940
Reknit that's right.

43
00:02:56,240 --> 00:03:04,400
iOS it's written in objective C and C, and that's why you build your apps in the same language that

44
00:03:04,400 --> 00:03:06,070
the operating system is built in.

45
00:03:06,260 --> 00:03:07,670
Same with Android.

46
00:03:07,700 --> 00:03:10,000
Android is written in Java.

47
00:03:10,040 --> 00:03:18,890
That's why you write apps for Android and Java then a few years past and Apple said, Hey, we have

48
00:03:18,890 --> 00:03:20,390
a new language, swift.

49
00:03:20,600 --> 00:03:26,090
It's a little bit cleaner, nicer than objective C so that Apple can say, hey, use Swift.

50
00:03:26,120 --> 00:03:30,890
It's going to be a lot nicer as a developer for you to build apps on our store.

51
00:03:31,070 --> 00:03:34,790
So now you can use two languages again, both created by Apple.

52
00:03:35,330 --> 00:03:37,790
Then Google came up with Kotlin.

53
00:03:38,490 --> 00:03:44,870
Colin is again a nicer version of Java, makes things a little bit nicer for developers, for programmers

54
00:03:45,170 --> 00:03:47,330
to build Android apps.

55
00:03:48,320 --> 00:03:53,330
So now if you want to build an iOS app, you could use one of these two languages.

56
00:03:53,870 --> 00:03:57,800
If you want to build an Android app, then you'd use one of these two languages.

57
00:03:58,700 --> 00:03:59,990
But here's the thing.

58
00:04:00,410 --> 00:04:01,200
Are you stuck?

59
00:04:01,220 --> 00:04:04,070
Is that the only option for you?

60
00:04:04,760 --> 00:04:06,200
Actually, no.

61
00:04:06,230 --> 00:04:08,330
This was just a small subset.

62
00:04:09,850 --> 00:04:17,769
Because people can get creative, you see, up until now, we talked about the native way of creating

63
00:04:17,769 --> 00:04:24,490
an app and native way just means the intended way, the way that the phone intends you to build an app,

64
00:04:24,700 --> 00:04:28,890
either using Objective C and Swift or Java and Codling.

65
00:04:29,440 --> 00:04:31,690
But there's one big problem.

66
00:04:32,230 --> 00:04:39,490
If you want to target both phones, then you essentially need two separate teams of developers, which

67
00:04:39,490 --> 00:04:45,430
costs money, each one specializing in their own language, to build an app that is essentially doing

68
00:04:45,430 --> 00:04:47,830
the same thing for two things.

69
00:04:48,370 --> 00:04:51,040
Companies didn't really like that so much.

70
00:04:51,490 --> 00:04:54,390
So a few alternatives came to be.

71
00:04:54,760 --> 00:04:59,290
By the way, I hope you're not sleeping during this history lesson because things are about to get exciting.

72
00:04:59,950 --> 00:05:05,170
One of the first solutions that came to be in this environment was the Web.

73
00:05:05,440 --> 00:05:06,580
We browse the Web.

74
00:05:06,580 --> 00:05:09,580
We use Chrome, we use Safari, we use Firefox.

75
00:05:10,210 --> 00:05:17,200
So Córdova was one of the first things that came out that said, hey, instead of playing around with

76
00:05:17,200 --> 00:05:23,450
all this native nonsense, that is really, really hard to program one, why don't we just use HMO success

77
00:05:23,530 --> 00:05:30,430
and JavaScript that we use on the Web to display information to user to display Web pages and just pretend

78
00:05:30,430 --> 00:05:31,640
like they're native things.

79
00:05:32,350 --> 00:05:40,150
So things like Córdova and Ionic do something called using the Web view and Web view is a browser that's

80
00:05:40,150 --> 00:05:46,240
actually bundled inside of the mobile application and we essentially create a hybrid app.

81
00:05:46,630 --> 00:05:55,660
So instead of using a native way, a native view that an iOS or an Android app might use, instead we

82
00:05:55,660 --> 00:06:04,570
have a browser that has some of the browser tabs missing, but it still makes it look like an app on

83
00:06:04,570 --> 00:06:05,060
your phone.

84
00:06:05,710 --> 00:06:12,160
This way you're able to code an app in JavaScript instead of, let's say, swift or codling.

85
00:06:12,760 --> 00:06:15,190
And that's because JavaScript is very popular.

86
00:06:15,190 --> 00:06:20,170
A lot of people know JavaScript, so they can create if you know how to create websites or web apps,

87
00:06:20,170 --> 00:06:23,620
well, then you can create a hybrid app on the mobile phone as well.

88
00:06:24,100 --> 00:06:28,480
And those hybrid apps can actually be put on both app stores.

89
00:06:29,230 --> 00:06:30,190
How awesome is that?

90
00:06:31,180 --> 00:06:39,100
The problem with the Web, though, was that, well, you're essentially shipping a browser, a browser

91
00:06:39,100 --> 00:06:46,620
view inside of this phone and both iOS and Android apps are optimized to run native code.

92
00:06:46,900 --> 00:06:54,730
So no matter what this Web version of apps was, always slower, was clunkier than native apps.

93
00:06:55,300 --> 00:06:59,050
Also, Android and iOS have different looks.

94
00:06:59,050 --> 00:07:05,890
For example, on Android, the navigation is usually on the top, while iOS navigation is usually on

95
00:07:05,890 --> 00:07:06,310
the bottom.

96
00:07:06,940 --> 00:07:10,900
And there's all these different looks and feels of Android and iOS apps.

97
00:07:11,680 --> 00:07:20,290
So with this Web view option, you kind of had to settle on just one look and hope that it looks good

98
00:07:20,290 --> 00:07:20,710
enough.

99
00:07:21,190 --> 00:07:28,450
So it's almost like a downgrade from native apps, but at the convenience of having to only build it

100
00:07:28,450 --> 00:07:32,270
once and have it in both operating systems.

101
00:07:32,680 --> 00:07:36,820
Now, one of my first projects that I ever worked on was a Córdova app.

102
00:07:37,060 --> 00:07:43,840
And I remember this specifically being an issue where we always had performance issues because we used

103
00:07:43,840 --> 00:07:48,070
a Web view instead of native use, which are just much faster.

104
00:07:48,550 --> 00:07:55,960
But also we always had this weird app that never looked like an iOS app, never look like an Android

105
00:07:55,960 --> 00:07:58,570
app, because we're trying to please both things.

106
00:07:58,930 --> 00:08:02,170
Now, things like Ionic have made this experience better.

107
00:08:02,170 --> 00:08:08,770
But no matter what, when you use the Web on mobile, it's just never going to have the performance

108
00:08:08,770 --> 00:08:09,400
that you want.

109
00:08:09,490 --> 00:08:14,770
So you never build a serious app, a native app using these technologies.

110
00:08:15,550 --> 00:08:22,360
Now, one other option that came quite recently was this idea of a progressive web and progressive web

111
00:08:22,360 --> 00:08:31,540
app is essentially a Web app that is a website that you're able to download on your phone or potentially

112
00:08:31,540 --> 00:08:34,480
even use it offline like you would with a native app.

113
00:08:35,270 --> 00:08:40,850
For example, we can go to a progressive app store and here we have all these progressive apps that

114
00:08:41,390 --> 00:08:47,900
are on my browser, all my Chrome browser, because they're Web based, they use things like service

115
00:08:47,900 --> 00:08:54,680
workers, app, manifest these Web tricks to pretend like they're mobile apps.

116
00:08:54,680 --> 00:08:59,080
And yes, you can download them on your phone, but they're not really native.

117
00:08:59,090 --> 00:09:00,620
They're more web than anything.

118
00:09:00,680 --> 00:09:02,150
It's something Google came up with.

119
00:09:02,300 --> 00:09:05,800
But again, when it comes to performance is just not there.

120
00:09:07,780 --> 00:09:09,820
So now we get to the exciting part.

121
00:09:10,790 --> 00:09:12,840
What if we can have the best of both worlds?

122
00:09:13,070 --> 00:09:21,320
What if we can have native code that is performant, but also use this idea of right once and run on

123
00:09:21,320 --> 00:09:26,390
both iOS and Android, and that's where we get into this box over here.

124
00:09:26,540 --> 00:09:28,340
But this video's getting long.

125
00:09:28,370 --> 00:09:31,250
So let's take a break and I'll see you in the next one.

126
00:09:31,660 --> 00:09:31,830
Bye.

