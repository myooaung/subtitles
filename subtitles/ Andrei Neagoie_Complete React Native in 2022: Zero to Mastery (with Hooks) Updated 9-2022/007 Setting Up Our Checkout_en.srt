1
00:00:00,480 --> 00:00:06,480
Hey, now that we've got our Strib client all set up and ready to rock and roll and we're ready to start

2
00:00:06,480 --> 00:00:12,150
building out this integration that we put together here, where we're going to first pull in the credit

3
00:00:12,150 --> 00:00:18,280
card info, create the Strib token and pass it to the checkout and so forth, like any other feature.

4
00:00:19,050 --> 00:00:22,110
Let's start with the simple things we can put together.

5
00:00:22,620 --> 00:00:28,710
And if we look here at our fully integrated app, what we can see is that over here at the bottom,

6
00:00:28,950 --> 00:00:35,640
we have this checkout tap and this checkout tab shows us where we're checking out from what we're ordering.

7
00:00:36,150 --> 00:00:40,680
We can potentially clear the cart, show an empty cart and all of that good stuff.

8
00:00:41,250 --> 00:00:46,520
Now, as with everything else, this comes from a place of configuration.

9
00:00:47,040 --> 00:00:53,340
So let's step back, put together the building blocks for this route and for everything that needs to

10
00:00:53,340 --> 00:00:56,850
be put in place for us to build out the holistic feature.

11
00:00:57,670 --> 00:01:05,410
And if we look at that from a point of view of getting everything ready, what we need to do is use

12
00:01:05,410 --> 00:01:09,750
our App Navigator in order to set up the screen.

13
00:01:10,240 --> 00:01:11,440
So let's get to that.

14
00:01:11,470 --> 00:01:16,570
So the first thing we're going to do is we're going to create a tab screen called Checkout.

15
00:01:17,320 --> 00:01:21,250
And that checkout screen is going to accept the component called checkout screen.

16
00:01:21,940 --> 00:01:27,570
That checkout screen is going to come from the same place where we take all our screens.

17
00:01:27,580 --> 00:01:29,300
So we're going to duplicate this line.

18
00:01:29,770 --> 00:01:33,040
We're going to take checkout screen, but we're not going to take it from features map.

19
00:01:33,040 --> 00:01:39,790
No, we're going to say features, checkout screens, checkout dot screen, and that's where we're going

20
00:01:39,790 --> 00:01:41,260
to get checkout screen from.

21
00:01:41,680 --> 00:01:43,540
And so that checkout screen is going to.

22
00:01:44,540 --> 00:01:51,980
Render out where we're going to build checkout now over here in the Tabbaa icon, we can obviously note

23
00:01:51,980 --> 00:01:59,150
that checkout isn't going to necessarily be a map, know what it's going to be as an MD cart.

24
00:01:59,750 --> 00:02:02,750
And by doing this, we're setting ourselves up for success.

25
00:02:02,780 --> 00:02:04,200
Now, let's see, is our app running?

26
00:02:04,490 --> 00:02:06,920
So over here, what we want to do is start.

27
00:02:07,700 --> 00:02:17,690
And then once we start up our client, what we can do over here is go over to the loaded app that's

28
00:02:17,690 --> 00:02:18,950
running locally.

29
00:02:19,790 --> 00:02:25,640
And by utilizing that, we can figure out what exactly we've just put on the screen.

30
00:02:25,670 --> 00:02:26,180
Whoops.

31
00:02:26,540 --> 00:02:27,590
Oh, can't resolve.

32
00:02:27,590 --> 00:02:28,670
Check out that screen.

33
00:02:29,040 --> 00:02:29,990
Well, that's obvious.

34
00:02:30,230 --> 00:02:31,790
We don't have it set up yet.

35
00:02:32,100 --> 00:02:36,560
So what we need to do is we need to create a new folder called Checkout and Features.

36
00:02:37,010 --> 00:02:39,770
And in checkout, we've got to create a new folder called Screens.

37
00:02:40,520 --> 00:02:44,950
And then inside of screens will create checkout dot screen dogs.

38
00:02:45,440 --> 00:02:48,950
And so we'll import react from react.

39
00:02:49,310 --> 00:02:56,270
And we'll just quickly say export content checkout screen is equal to the return of no.

40
00:02:56,360 --> 00:03:02,360
And if we return null, then we'll temporarily just render out nothing or reload here.

41
00:03:03,050 --> 00:03:07,160
And what we'll be able to see is that our app should load up just fine.

42
00:03:07,400 --> 00:03:13,400
And if we then go ahead and log in, what we're going to see is that our app is going to load test one,

43
00:03:13,400 --> 00:03:14,990
two, three and we log in.

44
00:03:15,320 --> 00:03:16,550
But there's a problem here.

45
00:03:16,730 --> 00:03:21,440
We're not retrieving any data and that's because our is mark is set to false.

46
00:03:21,620 --> 00:03:23,450
So let's go ahead and set that to true.

47
00:03:23,840 --> 00:03:32,390
And on top of that, what we need to do is make sure that our local firebase is running.

48
00:03:33,280 --> 00:03:34,890
So let's go ahead and do that.

49
00:03:37,950 --> 00:03:45,480
And so if you are running in Android mode, what you're going to want to do is you're going to want

50
00:03:45,660 --> 00:03:49,980
to run deploy these functions in order to be able to run the app.

51
00:03:50,190 --> 00:03:56,130
And you're going to want to set the live host to always be the available host because otherwise it will

52
00:03:56,130 --> 00:03:56,610
not work.

53
00:03:57,420 --> 00:04:03,690
Now, if if this is tricky for you, please reach back to the videos where we did the Google integration

54
00:04:03,690 --> 00:04:06,480
to refresh your memory on how to get this working.

55
00:04:07,430 --> 00:04:11,900
Now, there were in the functions folder, let's go ahead and look how we start up our functions.

56
00:04:12,020 --> 00:04:16,579
So in the package, Jason, you can see here that we have an enhanced surf command.

57
00:04:16,579 --> 00:04:23,600
So we'll do yard surf and by doing that, will serve up our emulators in order for our functions to

58
00:04:23,600 --> 00:04:25,490
run locally on our computer.

59
00:04:25,760 --> 00:04:29,660
And we're going to be running them in a mock mode.

60
00:04:30,330 --> 00:04:34,400
Now, your functions could not be passed due to an issue with your node modules.

61
00:04:34,520 --> 00:04:42,440
So let's make sure that we install all of the modules that are required and then serve up our emulators

62
00:04:42,470 --> 00:04:43,220
once more.

63
00:04:43,250 --> 00:04:47,220
And as we can see here, our functions are now running on Port Thousand.

64
00:04:47,420 --> 00:04:48,380
Our app is running.

65
00:04:48,770 --> 00:04:53,720
And if we go ahead and refresh our app over here like I did right, we all know how to do this.

66
00:04:53,720 --> 00:04:57,650
You'll see that the mock data comes and populates itself.

67
00:04:57,980 --> 00:05:03,200
And what we can also see is that our checkout route is now rendering its rendering.

68
00:05:03,200 --> 00:05:07,400
Nothing, of course, and nothing is visual right here, right now.

69
00:05:07,790 --> 00:05:11,120
But we have our route, our screen and our tabs set up.

70
00:05:11,270 --> 00:05:16,060
So we have the canvas on which we can start painting our feature.

71
00:05:16,370 --> 00:05:17,420
So let's get to that.

