1
00:00:00,600 --> 00:00:06,300
There's an interesting issue we have with our spacer component, you see when we run on Android, we're

2
00:00:06,300 --> 00:00:11,550
seeing an issue of it not being able to set the property position in the shadow of our view.

3
00:00:11,590 --> 00:00:12,510
Now, what does this mean?

4
00:00:13,170 --> 00:00:18,510
Well, basically, this means that Android is having difficulties rendering the styled component view

5
00:00:19,140 --> 00:00:20,310
from the get go.

6
00:00:20,460 --> 00:00:26,220
When the app launches, it's unable to process the get very in function on load.

7
00:00:26,380 --> 00:00:33,240
So this is a bug that specifically will happen on Android, whereas iOS has no difficulties at all.

8
00:00:33,780 --> 00:00:36,860
See, iOS is just able to function correctly.

9
00:00:37,200 --> 00:00:43,710
And this is one of the many scenarios that you may run into where you write code for iOS, you test

10
00:00:43,710 --> 00:00:46,830
it on Android and suddenly everything breaks.

11
00:00:47,580 --> 00:00:49,430
OK, so now what comes the question?

12
00:00:49,560 --> 00:00:52,800
Well, we still want our space component and we still want it to work properly.

13
00:00:53,010 --> 00:00:54,340
But how do we optimize it?

14
00:00:54,900 --> 00:01:04,590
Well, the way to go about this is basically this inline function that we're running inside of the styled

15
00:01:04,590 --> 00:01:05,010
view.

16
00:01:05,220 --> 00:01:05,600
Right.

17
00:01:05,610 --> 00:01:10,450
We're running a dynamic function inside of the render body of style.

18
00:01:10,450 --> 00:01:10,760
Do you?

19
00:01:11,250 --> 00:01:13,420
Well, we need to separate that out.

20
00:01:13,440 --> 00:01:19,940
So what we're going to do is instead of having the spacer component immediately return a style view,

21
00:01:19,950 --> 00:01:26,430
what we're going to do is we're going to do const space view is equal to style dot view.

22
00:01:27,120 --> 00:01:33,180
And when we do this, what we're going to do is we're going to say instead of running a function, we're

23
00:01:33,180 --> 00:01:40,200
going to pass the variant immediately that it needs to render and we're going to say return the variant.

24
00:01:40,890 --> 00:01:43,500
So it's not going to run the dynamic function anymore.

25
00:01:44,280 --> 00:01:50,220
And by doing this, we optimize our ability to render out the spacer.

26
00:01:50,490 --> 00:01:52,740
So the spacer is going to become a normal component.

27
00:01:52,740 --> 00:01:55,140
And we know what happens when we import normal components.

28
00:01:55,440 --> 00:01:57,210
We need to import react.

29
00:01:58,390 --> 00:01:59,800
From React.

30
00:02:00,880 --> 00:02:07,000
And by doing this, we're now able to write a normal component now that said, we need position, we

31
00:02:07,000 --> 00:02:08,949
need size and we need children.

32
00:02:09,759 --> 00:02:16,180
And with these three properties, what we're going to do is we're also going to import use theme, which

33
00:02:16,180 --> 00:02:16,840
is a hook.

34
00:02:17,200 --> 00:02:26,830
That style system extends us so that we can calculate the variant inside of the functional body of spacer.

35
00:02:26,840 --> 00:02:31,000
So we'll open the body and what we'll say is const variant equals.

36
00:02:31,540 --> 00:02:35,100
But before we do that, we want to get the theme.

37
00:02:35,110 --> 00:02:38,310
So we'll say conse theme is equal to use theme.

38
00:02:38,890 --> 00:02:45,520
And by using the theme now we can say over here const variance is equal to get variant of position,

39
00:02:45,820 --> 00:02:47,110
size and theme.

40
00:02:47,380 --> 00:02:52,900
So now we've calculated the variance ahead of time and what we can do now is we can return.

41
00:02:53,450 --> 00:03:00,250
And what will be returning is the spacer of you will be returning the spacer view and will be giving

42
00:03:00,250 --> 00:03:02,270
it variant equal to variant.

43
00:03:03,130 --> 00:03:07,930
So we've calculated the variance ahead of time and the last thing we need to do is ensure that spacer

44
00:03:07,930 --> 00:03:11,530
view renders out the children, if there are any.

45
00:03:13,010 --> 00:03:18,980
Given to it, and so by doing this, we've now inverted the flow, the in line render function of the

46
00:03:18,980 --> 00:03:21,720
spacer initially created issues for us.

47
00:03:21,770 --> 00:03:28,610
So now if we go into Android and we run Miles to go, what we should be able to see is that because

48
00:03:28,610 --> 00:03:35,820
we're calculating the variance ahead of time now, everything works properly and our spacers work properly.

49
00:03:36,440 --> 00:03:41,810
Now these types of things can happen, and these differences between Android and iOS can creep up at

50
00:03:41,810 --> 00:03:42,700
a moment's notice.

51
00:03:42,980 --> 00:03:51,620
What's important to note here, though, is that in order to anticipate these issues, we need to test

52
00:03:51,620 --> 00:03:54,290
on Android and iOS regularly.

