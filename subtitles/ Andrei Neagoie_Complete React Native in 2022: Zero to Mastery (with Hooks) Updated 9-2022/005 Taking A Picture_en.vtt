WEBVTT
1
00:00:00.960 --> 00:00:05.550
Our permissions are working and we're able to view the camera, but the next step we need to do is we

2
00:00:05.550 --> 00:00:07.800
need to enable the user to be able to take a picture.

3
00:00:08.250 --> 00:00:11.630
And the way that I implement that, this is just a simple tap on the screen.

4
00:00:11.790 --> 00:00:12.740
We'll take the picture.

5
00:00:13.260 --> 00:00:16.820
It's intuitive enough that the user is going to tap on the screen regardless.

6
00:00:16.830 --> 00:00:21.450
And by tapping on the screen, the picture will be taken and they'll be taken back automatically to

7
00:00:21.450 --> 00:00:22.190
the previous screen.

8
00:00:23.010 --> 00:00:28.530
The way that we do that is we can use our touchable opacity from react native.

9
00:00:28.530 --> 00:00:30.780
So we do touchable opacity.

10
00:00:32.380 --> 00:00:38.350
And what we can do is we can put a touchable opacity inside of the profile camera, and by putting it

11
00:00:38.350 --> 00:00:43.890
inside of the profile camera, we now enable the user to tap on the screen.

12
00:00:44.470 --> 00:00:51.640
So if we put an arm press here and we said that that press was going to invoke a function called SNAP,

13
00:00:52.120 --> 00:00:53.660
which is going to snap the picture.

14
00:00:53.800 --> 00:00:55.540
Well, now we have to define that function.

15
00:00:56.350 --> 00:01:04.900
Consed snap is going to be a function that's going to be asynchronous because every time you take a

16
00:01:04.900 --> 00:01:07.180
picture, it's going to happen asynchronously.

17
00:01:07.190 --> 00:01:11.470
You don't know what's happening because the camera module is out of our control.

18
00:01:11.470 --> 00:01:13.870
It's out of its out of our domain.

19
00:01:13.870 --> 00:01:14.740
It's out of react native.

20
00:01:14.740 --> 00:01:18.430
So when a when a picture is being taken, a lot of background processes are happening.

21
00:01:18.700 --> 00:01:20.370
So we do it in an async manner.

22
00:01:20.590 --> 00:01:22.120
Think of this like a promise.

23
00:01:22.240 --> 00:01:24.100
We know something is going to come back to us.

24
00:01:24.340 --> 00:01:30.790
So we're going to use async a wait, which is basically a wrapper around a promise that enables us to

25
00:01:30.790 --> 00:01:32.930
await something for it, for it to come back.

26
00:01:33.640 --> 00:01:38.830
So what we'll do here is we set up our camera reference, which is going to point to the profile camera,

27
00:01:39.070 --> 00:01:41.440
and we can now use that camera reference.

28
00:01:41.680 --> 00:01:43.540
So we'll say if camera reference.

29
00:01:44.880 --> 00:01:49.760
Then we can do stuff, if this has a value, then we know we can take a picture, so we'll say CONSED

30
00:01:49.770 --> 00:01:51.530
photo and this will get us back.

31
00:01:51.570 --> 00:02:00.240
The photo is a weight camera ref dot current, which is the current value of the camera, which will

32
00:02:00.240 --> 00:02:01.680
be the profile camera.

33
00:02:02.190 --> 00:02:07.560
So camera of the current dot take picture async.

34
00:02:08.930 --> 00:02:13.850
And this will go ahead and take a picture, and once it's taken a picture, what it's going to return

35
00:02:13.850 --> 00:02:21.010
us is console that log photo and we'll know what the photo is at that point in time.

36
00:02:22.070 --> 00:02:27.500
OK, so now if we have our touchable capacity here and we press snap, we'll know that we'll get it

37
00:02:27.500 --> 00:02:28.160
back, right?

38
00:02:28.610 --> 00:02:29.480
Well, let's try that out.

39
00:02:30.230 --> 00:02:36.950
If we just put our touchable capacity here and we open up our camera, which for that will open up the

40
00:02:36.950 --> 00:02:39.290
terminal as well so that we can see what's going on.

41
00:02:40.620 --> 00:02:47.460
And if we go over to here and we open up our camera, what's going to happen is when we press.

42
00:02:48.300 --> 00:02:48.720
Oh.

43
00:02:49.730 --> 00:02:50.690
Nothing's happening.

44
00:02:51.080 --> 00:02:52.430
Well, did we do something wrong?

45
00:02:52.910 --> 00:02:56.240
Well, let's quickly reload if we reload.

46
00:02:57.520 --> 00:02:59.690
And we try again, will it work?

47
00:03:00.370 --> 00:03:01.170
Let's try it out.

48
00:03:02.300 --> 00:03:05.570
Huh, pressing on the camera isn't doing anything.

49
00:03:06.080 --> 00:03:07.350
Well, why would that be?

50
00:03:08.090 --> 00:03:08.910
That's a good question.

51
00:03:09.140 --> 00:03:14.960
So if we go look at our code here, well, touchable opacity is inside of the profile camera and if

52
00:03:14.960 --> 00:03:16.490
it's inside of the profile camera.

53
00:03:17.440 --> 00:03:20.350
Is it actually taking up the width and height that it should?

54
00:03:21.600 --> 00:03:27.420
Obviously, our touchable capacity is in the wrong spot, so it shouldn't be inside of the profile camera,

55
00:03:27.420 --> 00:03:30.920
but rather it should be wrapping the profile camera.

56
00:03:31.140 --> 00:03:38.760
So if we put it over here and then we close the tag at the end, what will happen is our touchable capacity

57
00:03:38.760 --> 00:03:40.730
is now wrapping the entire camera.

58
00:03:41.370 --> 00:03:49.920
And if we open up our terminal here and we look at our camera now, if we press oh, we're getting back

59
00:03:49.920 --> 00:03:50.700
information.

60
00:03:50.730 --> 00:03:52.420
We're getting back information from the camera.

61
00:03:52.440 --> 00:03:55.620
If we're giving back a height, we're getting back a uttara.

62
00:03:55.800 --> 00:04:02.170
So it's storing the image on the phone and we're getting back that image location on the phone.

63
00:04:02.610 --> 00:04:08.830
Well, this seems like something we can use to render out the profile picture of the user.

64
00:04:09.540 --> 00:04:16.050
Well, let's try and go ahead and do that now that we have our camera hooked up to be able to take pictures.

65
00:04:16.870 --> 00:04:17.459
Awesome.

