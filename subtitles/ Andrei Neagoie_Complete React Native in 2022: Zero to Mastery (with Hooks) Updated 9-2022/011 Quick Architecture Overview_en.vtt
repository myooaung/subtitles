WEBVTT
1
00:00:00.990 --> 00:00:06.150
Before we continue down the path of integrating the search functionality, I wanted to give us a quick

2
00:00:06.150 --> 00:00:10.770
lay of the land of where we're at right now because we've made a lot of decisions and we've written

3
00:00:10.770 --> 00:00:11.520
a lot of code.

4
00:00:12.120 --> 00:00:14.870
But that code creates a specific infrastructure.

5
00:00:15.240 --> 00:00:17.520
And so over here, we have our phone right.

6
00:00:17.880 --> 00:00:20.640
And we're targeting our phone for Android and iOS.

7
00:00:21.150 --> 00:00:24.210
And over here is what we would consider our code base.

8
00:00:24.540 --> 00:00:29.330
This is our code that we're writing and we've structured it in a certain way.

9
00:00:29.850 --> 00:00:31.650
So we have our navigation.

10
00:00:31.770 --> 00:00:35.640
So our phone comes in, sends a request and the navigation kicks in.

11
00:00:36.120 --> 00:00:42.750
And the navigation has certain features, whether it be restaurants right now or later on search and

12
00:00:42.750 --> 00:00:46.020
map and the features use styled system.

13
00:00:47.030 --> 00:00:54.890
In order to make up the components and style them for the phone now, when we talk about how we're retrieving

14
00:00:54.890 --> 00:01:02.320
data so far, we've really supercharged our development specifically in that area.

15
00:01:02.540 --> 00:01:10.430
And that is because the way that the services work is very, very tailored to how the features interact

16
00:01:10.430 --> 00:01:10.650
with it.

17
00:01:10.670 --> 00:01:12.270
So I wanted to explain the flow here.

18
00:01:12.650 --> 00:01:20.100
So when our feature kicks in, right, whether it be restaurants or whatnot, that feature has a context.

19
00:01:20.120 --> 00:01:22.160
So we created a restaurant context.

20
00:01:22.760 --> 00:01:29.060
And so features like the restaurant feature in this case gets the information from the restaurant context,

21
00:01:29.600 --> 00:01:34.370
and that's the array of values that contain the restaurant information.

22
00:01:34.580 --> 00:01:38.810
But it also enables the context to do something special.

23
00:01:38.810 --> 00:01:39.080
Right.

24
00:01:39.440 --> 00:01:41.480
The feature is very stupid at this point.

25
00:01:41.770 --> 00:01:44.440
It doesn't have anything, doesn't know anything.

26
00:01:44.450 --> 00:01:47.300
All it knows is that, hey, I have this restaurant context.

27
00:01:47.660 --> 00:01:54.500
So the context is kind of our glue right now between the feature and the outside world.

28
00:01:55.160 --> 00:02:01.610
And so we structured this thing called Services and services came with a request and a transform.

29
00:02:02.150 --> 00:02:06.800
And the request is the request that we're doing to the outside world to get information, whether it

30
00:02:06.800 --> 00:02:08.840
be from Google or elsewhere.

31
00:02:08.960 --> 00:02:12.630
It could be any given API, could be the Weather Channel, could be anything at all.

32
00:02:12.800 --> 00:02:16.880
So our services serve the function of getting that information.

33
00:02:17.560 --> 00:02:22.390
OK, so knowing that we over here are riak context comes into play.

34
00:02:22.700 --> 00:02:27.190
Our feature is all it knows is at some point I'm going to get restaurants right.

35
00:02:27.290 --> 00:02:31.100
I'm going to get this array of information and our context is smart.

36
00:02:31.340 --> 00:02:33.980
It says, hey, well, I'm the restaurant context.

37
00:02:33.980 --> 00:02:36.800
So in a context is nothing more than a component, right?

38
00:02:36.800 --> 00:02:38.810
We wrap it at a certain layer.

39
00:02:39.050 --> 00:02:44.590
It kind of acts like a component, but it's a bit smarter because it can share its state along the application.

40
00:02:45.020 --> 00:02:46.340
So the context is smart.

41
00:02:46.340 --> 00:02:47.810
And when mounts, it says, hey.

42
00:02:48.700 --> 00:02:54.490
I'm the restaurant's context and I have this use effect, I have this this life cycle hook that's going

43
00:02:54.490 --> 00:02:55.210
to tell me, Hey.

44
00:02:56.130 --> 00:03:03.240
I have a location and this location is coming in externally, right, the feature is feeding the location

45
00:03:03.240 --> 00:03:04.140
into the context.

46
00:03:04.140 --> 00:03:07.350
For instance, it doesn't really matter for this particular use case.

47
00:03:07.350 --> 00:03:09.920
We hardcoded the location inside of the context.

48
00:03:09.930 --> 00:03:14.000
It doesn't matter where it comes from, but the context itself is smart.

49
00:03:14.010 --> 00:03:15.960
It says, hey, I got a location.

50
00:03:16.350 --> 00:03:21.450
And so I've just mounted for instance, I've just mounted myself or something is updated.

51
00:03:21.990 --> 00:03:26.190
And based on that information that's coming into the context, it can make decisions.

52
00:03:26.430 --> 00:03:32.460
And so the decision we had to make is we had it call a service the restaurants service.

53
00:03:32.670 --> 00:03:35.370
Now, this service is, of course, a mock service.

54
00:03:35.370 --> 00:03:39.600
So we're we're getting back information that's actually already in our code base.

55
00:03:39.960 --> 00:03:46.770
But we built our services in a way that they actually act like they're on the Internet.

56
00:03:46.800 --> 00:03:47.150
Right.

57
00:03:47.160 --> 00:03:48.330
They have a time out.

58
00:03:48.720 --> 00:03:54.360
They're wrapped in a promise, which is something that has to come back to us.

59
00:03:54.360 --> 00:03:56.070
It's not immediately available.

60
00:03:56.310 --> 00:04:01.260
So the services act as if they are real API calls.

61
00:04:01.290 --> 00:04:06.840
And we structured the service in such a way that later in the course, when we do decide that we want

62
00:04:06.840 --> 00:04:13.590
to integrate with an external source, that we can just swap out at the service, layer the request

63
00:04:14.130 --> 00:04:17.459
and then the transform in the context should just take over.

64
00:04:17.459 --> 00:04:23.040
So all we need to do is formulate a request to an external service and the rest of our infrastructure

65
00:04:23.040 --> 00:04:28.290
will just take over as we set it up and feed the feature with the information it requires.

66
00:04:29.040 --> 00:04:32.040
This is kind of the baseline architecture that we have right now.

67
00:04:32.400 --> 00:04:39.750
And so now that we know where we are, we can continue down the path of building out the search infrastructure.

