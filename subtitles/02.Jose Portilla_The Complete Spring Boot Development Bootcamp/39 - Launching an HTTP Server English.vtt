WEBVTT

00:00.360 --> 00:03.510
Launching an HTTP server with spring boot is very easy.

00:05.220 --> 00:06.090
How easy is it?

00:06.120 --> 00:08.280
Just add a dependency called spring web.

00:11.550 --> 00:14.370
In this lesson, you will launch an HTTP server.

00:16.190 --> 00:19.370
The Spring Web dependency launches an HTTP server.

00:20.990 --> 00:27.260
A dependency refers to a packaged library of files, i.e. jar files that your application can use.

00:29.870 --> 00:31.460
Now the spring web dependency.

00:31.460 --> 00:34.250
What it's going to do is bootstrap an HTTP server.

00:39.210 --> 00:43.410
If you open your XML file there, you will find two dependencies.

00:43.980 --> 00:47.610
These dependencies are common to every spring boot application.

00:47.700 --> 00:49.070
Now the spring web dependency.

00:49.080 --> 00:54.570
What it's going to do is instrument our spring boot application to launch an HTTP server, essentially

00:54.570 --> 00:56.370
making our app a web app.

00:57.140 --> 00:59.420
So in a Google search type.

01:00.250 --> 01:04.180
Spring boot web dependency.

01:06.270 --> 01:09.330
And we're going to click on the Central Maven Repository.

01:11.660 --> 01:16.970
The Central Maven repository contains all of the dependencies that we can leverage in a spring boot

01:16.970 --> 01:17.570
up.

01:21.840 --> 01:26.490
Choose the Spring Boot Web version that matches your spring boot application.

01:27.090 --> 01:29.310
In my case, it's 2.6.7.

01:30.570 --> 01:32.070
Copy the dependency.

01:33.580 --> 01:36.490
And paste it into your PubMed XML file.

01:41.330 --> 01:48.290
And now actually what I want you to do is remove the version number because you'll notice that on top

01:48.290 --> 01:52.580
the version number for all spring boot starters is already specified.

01:53.090 --> 01:58.430
So all of these starter dependencies are automatically going to have a version of 2.6.7.

01:58.910 --> 02:05.060
And by virtue of just adding the spring web dependency, it's going to embed an HTTP server called Tomcat

02:05.060 --> 02:06.770
into your spring boot application.

02:06.770 --> 02:10.870
And by default, the HTTP server is going to run on Port 8080.

02:11.270 --> 02:13.640
So let's run our application to see this in action.

02:14.920 --> 02:16.030
Wrong command.

02:17.270 --> 02:17.750
Maven.

02:17.750 --> 02:19.220
Clean spring boot run.

02:29.370 --> 02:33.510
And here you can see the HTTP server is running on Port 8080.

02:39.720 --> 02:41.610
Let's revisit the client server model.

02:41.970 --> 02:45.450
The client server model is different when you're developing the application.

02:46.720 --> 02:51.730
In the previous lesson, the model portrays a client that makes a request via the internet.

02:52.210 --> 02:54.730
An HTTP server is inside of a machine.

02:54.730 --> 02:55.990
Inside of a computer.

02:56.020 --> 03:00.610
On the other side of the world, it receives the request and it responds.

03:05.020 --> 03:10.740
In our case, your browser and HTTP server are inside of the same computer.

03:10.750 --> 03:13.060
So what should your IP address be?

03:16.490 --> 03:20.090
120 7.0.0.1.

03:20.120 --> 03:23.090
This is called a loopback address.

03:23.240 --> 03:26.180
It connects the request of the computer that you're using.

03:28.500 --> 03:35.220
The Loopback address 120 7.0.0.1 essentially loops the request back to your computer.

03:40.870 --> 03:43.110
The request is made on point 8080.

03:43.120 --> 03:48.610
So then your computer, upon receiving the request from your browser, forwards it to port 8080.

03:49.210 --> 03:54.340
Your application's HTTP server is running on that port and it receives the request.

03:55.400 --> 04:04.520
So now from your browser, what you're going to do is write 120 7.0.0.1 so that the request is routed

04:04.520 --> 04:11.420
to your computer and then write 8080 because our app is listening on port 8080.

04:14.090 --> 04:18.110
And we get the generic white label error page.

04:20.230 --> 04:24.420
That's because the application's HTTP server receives the request.

04:24.430 --> 04:30.160
But you didn't write any code that tells Spring how to respond, so it sends back the default error

04:30.160 --> 04:30.880
page.

04:35.320 --> 04:43.030
Now before we fix this issue, I just want to emphasize that writing 120 7.0.0.1 has really annoying

04:43.060 --> 04:45.700
local host translates to this address.

04:45.700 --> 04:48.190
So instead we can write local host.

04:49.770 --> 04:50.670
8080.

04:52.580 --> 04:57.950
And in similar fashion, local host is going to route the request to the computer that you're using.

04:57.950 --> 05:03.470
And in turn, your computer is going to forward the request to Port 88 where your application is listening,

05:03.470 --> 05:08.380
and our application responds to the request by returning a white label error page.

05:08.390 --> 05:09.500
Let's fix it.

05:09.530 --> 05:15.710
The next step when we make a request on local host 8080 is for the HTTP server to send back a static

05:15.710 --> 05:16.610
web page.

05:18.320 --> 05:23.150
The static folder, as discussed in the previous lesson, is what contains static web content.

05:23.600 --> 05:30.170
The next step is to send back a static web page, but you'll notice that the resources is missing the

05:30.170 --> 05:34.370
static folder, as well as the templates folder that we talked about in the previous lesson.

05:34.730 --> 05:40.970
The reason why is because we didn't initially add the spring web dependency upon generating the project

05:40.970 --> 05:42.440
using the spring initial riser.

05:42.440 --> 05:45.320
So for now, we'll have to create the folder ourselves.

05:45.350 --> 05:46.550
We'll say new.

05:47.660 --> 05:51.020
Directory and we'll call it static.

05:51.230 --> 05:53.310
Please make sure to get the naming right.

05:53.330 --> 05:54.970
Do not capitalize anything.

05:54.980 --> 05:56.660
Do not add a period at the end.

05:56.690 --> 05:58.520
It has to be just static.

05:59.760 --> 06:03.030
The static folder is where you should put static web content.

06:03.060 --> 06:11.460
Examples include images, logos, CSS or static HTML content in order to send the client a static web

06:11.460 --> 06:12.150
page.

06:12.180 --> 06:21.180
We're going to add an indexed HTML file, so create a new HTML file and call it index dot HTML.

06:22.500 --> 06:25.500
It already creates a template for us, which is really nice.

06:26.100 --> 06:30.690
Now, as a spring boot developer, I don't expect you to know any HTML.

06:30.870 --> 06:36.540
All I want you to know is the metadata goes here and visual elements go here.

06:37.020 --> 06:39.780
We're not too concerned with metadata at the moment.

06:39.930 --> 06:44.520
All we want to do is display a simple header with the H1 tag.

06:46.980 --> 06:50.070
And the header is going to say Hello Spring.

06:52.090 --> 06:57.430
So what each one is going to do is it's going to populate a web page with a big header that reads whatever

06:57.430 --> 06:58.870
string you provide.

07:00.960 --> 07:05.580
One thing I want to stress before we do anything is that it's really important that you name the file

07:05.580 --> 07:10.350
indexed HTML when Spring Boot is responding to an incoming request.

07:10.350 --> 07:13.740
By default, it looks for the index of the HTML file.

07:14.130 --> 07:18.720
So now what we can do is stop our runtime using the command control c.

07:21.430 --> 07:22.690
We run the application.

07:33.760 --> 07:38.950
Our app is listening on port 1880, so we'll make a request to local host 8080.

07:41.470 --> 07:45.910
And the HTTP server responds with a big header that says Hello Spring.

07:47.630 --> 07:50.150
The client sends a request to Port 1880.

07:50.720 --> 07:55.940
The Springwood Application's HTTP server listing on that port receives the request.

07:56.300 --> 07:59.810
Spring looks for the indexed HTML file and responds with it.

07:59.840 --> 08:03.260
The HTML file populates the browser with Hello Spring.

08:06.930 --> 08:09.930
Now you can change the port that Tomcat runs on.

08:10.260 --> 08:13.560
You can choose the port to where your app should listen for requests.

08:13.770 --> 08:18.780
And so recall that application DOT Properties is the file where you can configure the settings for your

08:18.780 --> 08:19.590
application.

08:19.980 --> 08:26.820
What you're going to do is right server dot port and set it equal to 1990.

08:27.060 --> 08:29.070
To change the default port.

08:31.020 --> 08:32.310
We run the application.

08:42.240 --> 08:46.130
Now the app is listening for requests on point 1990.

08:46.470 --> 08:52.260
So if you try sending a request to Port 8080, there is nothing listening on that port.

08:52.920 --> 08:57.810
The application's Tomcat server is running on Port 99, so you must send the request there.

08:59.520 --> 09:00.150
Beautiful.

09:01.640 --> 09:02.000
All right.

09:02.000 --> 09:05.750
To recap, you launched an HTTP server using spring boots.

09:07.790 --> 09:10.490
First you added the spring web dependency.

09:10.790 --> 09:17.420
The spring web dependency starts up an embedded HTTP server called Tomcat, and by default, the HTTP

09:17.420 --> 09:20.450
server listens for requests on Port 8080.

09:22.760 --> 09:28.280
Inside the Application Properties file, you can figure the web server to listen on Port 1990.

09:29.230 --> 09:32.410
So your full address is local host 1990.

09:33.150 --> 09:39.180
Such that local host loops a browser's request to your machine and then your machine, upon receiving

09:39.180 --> 09:45.510
the request, forwards it to port 1990 where your spring boots HTTP server happens to be listening.

09:46.020 --> 09:49.800
Spring Boot looks through the index of the HTML file and responds with it.

09:50.650 --> 09:56.110
The HTML we sent back populates the browser with a big header that says Hello Spring.
