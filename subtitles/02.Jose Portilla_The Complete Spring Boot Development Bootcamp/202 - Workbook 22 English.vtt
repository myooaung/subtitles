WEBVTT

00:00.150 --> 00:01.730
Welcome to Workbook 2.2.

00:01.740 --> 00:08.400
I've already gone ahead and launched the Starter Project so we can just go ahead and jump right into

00:08.400 --> 00:14.640
Task One, which is to create a pod of Class four show objects, and the class will have three fields

00:14.640 --> 00:16.500
title episode and rating.

00:16.860 --> 00:18.270
So we'll go over here.

00:19.390 --> 00:25.840
And we'll add a class that's meant to create plain old Java show objects.

00:25.930 --> 00:30.130
The title episode and rating are the following.

00:31.310 --> 00:32.900
I will create.

00:34.160 --> 00:36.500
A constructor using all fields.

00:39.140 --> 00:43.430
I will create getters as well as setters.

00:45.750 --> 00:50.130
Now before returning The View, it's telling us to add the following objects to the model.

00:51.390 --> 00:55.260
So I'll go back to workbook controller Java.

00:55.530 --> 01:02.490
Every handler method has direct access to the model like so, and I wonder why the autocomplete didn't

01:02.490 --> 01:02.800
work.

01:02.820 --> 01:04.110
Let me just try this again.

01:05.400 --> 01:06.060
There we are.

01:07.690 --> 01:07.980
Okay.

01:08.050 --> 01:11.560
Now we can just say model dot add attributes.

01:13.780 --> 01:15.730
We'll copy this five times as well.

01:17.120 --> 01:19.580
The first attribute name will be first.

01:21.340 --> 01:22.990
The second one will be.

01:22.990 --> 01:24.940
Well, you guessed it second.

01:25.030 --> 01:26.860
We'll just repeat this process.

01:32.600 --> 01:42.230
And now each key needs to map to a value, and that value is simply going to be a plain old Java object.

01:44.040 --> 01:45.510
Seemed to have a mistake.

01:46.140 --> 01:46.920
No, we're good.

02:01.660 --> 02:03.110
Now add Star Wars.

02:03.110 --> 02:04.670
The Clone Wars.

02:07.260 --> 02:15.240
So now instead of hard coding the data inside of the HTML, we're passing it from our back end and populating

02:15.240 --> 02:18.100
the HTML file accordingly using leaf.

02:19.400 --> 02:20.000
Okay.

02:20.480 --> 02:23.930
That's all for task number two.

02:24.530 --> 02:30.380
Number three is to remove the hard coded data inside of shows that HTML and use a variable expressions

02:30.380 --> 02:33.470
instead to populate the view with data from the model.

02:35.240 --> 02:37.250
So what we can do.

02:38.610 --> 02:45.570
Is here to replace the hard coded data with the result of a live expression.

02:45.570 --> 02:53.250
So timely text is going to equal a variable expression and a variable expression is able to grab a model

02:53.250 --> 02:55.800
attribute as well as a value that derives from it.

02:55.800 --> 03:03.360
So here we're going to grab the first object and we will display its title.

03:05.620 --> 03:06.940
Copying this.

03:11.730 --> 03:13.050
Here we can grab.

03:16.600 --> 03:16.870
Okay.

03:16.960 --> 03:19.810
Then it's just episode and rating.

03:22.060 --> 03:26.170
And now what I'm going to do, actually, is just copy this everywhere.

03:30.570 --> 03:32.520
This will say second title.

03:34.400 --> 03:36.440
This will say third title.

03:37.940 --> 03:40.310
And we'll just continue the process.

03:48.200 --> 03:53.570
So at every single turn we're using a variable expression to grab the model object.

03:53.570 --> 03:57.320
And from this model object, we're able to extract its field.

03:58.540 --> 04:04.090
And then we're using thin leaf text to display the textual result of this style leaf expression.

04:04.900 --> 04:05.950
All right.

04:06.310 --> 04:11.990
And task force tells us that variable expressions can get a little verbose.

04:12.010 --> 04:19.840
We must remove them, bind each row to a model object, and then underlying elements in that row can

04:19.840 --> 04:22.900
select a field from the previously bound object.

04:23.570 --> 04:24.680
So.

04:26.770 --> 04:33.590
What we can do is use the leaf attribute object to bind each row to a particular object.

04:33.610 --> 04:37.210
We're going to bind this row to the first object.

04:38.410 --> 04:41.950
We're going to bind the next row to the second object.

04:43.180 --> 04:46.570
Bind the third row to the third object.

04:47.050 --> 04:48.430
Here, the fourth.

04:49.610 --> 04:50.740
Did I spell this right?

04:50.750 --> 04:51.590
Fourth.

04:52.330 --> 04:52.970
Yeah, I did.

04:52.990 --> 04:55.240
I don't know why I doubted myself there.

04:56.220 --> 04:58.470
Finally if object fifth.

05:01.250 --> 05:01.940
Now.

05:03.940 --> 05:12.040
And now each underlying element in this row can select a field and the previously bound object using

05:12.040 --> 05:13.750
a selection expression.

05:16.330 --> 05:23.800
So here we can see episode and rating, and now we can just copy and paste this as many times as we

05:23.800 --> 05:30.610
want without making any changes, because every single time it's just going to select a field in whatever

05:30.610 --> 05:32.980
object is bound to that row.

05:34.660 --> 05:35.470
Okay.

05:38.860 --> 05:43.960
Now, before we do anything else, let me just run the code to make sure I didn't make any silly mistakes.

05:45.500 --> 05:47.810
You can never be too confident when you're coding.

05:47.840 --> 05:51.020
Should always run every time you make a lot of changes.

05:57.670 --> 05:58.290
Beautiful.

05:58.300 --> 05:59.590
Everything looks the same.

06:03.870 --> 06:08.430
Now Task force is to remove the model parameter inside your handler method.

06:08.430 --> 06:16.650
And I really like this because when I first started using Spring Boot, I was not defining the model

06:16.650 --> 06:17.700
as such.

06:18.240 --> 06:22.230
If you think about it, the model is just a bunch of key value pairs.

06:22.470 --> 06:29.040
And so back then we had to use a hash map to store our key value pairs before passing them into our

06:29.280 --> 06:30.150
leaf template.

06:30.330 --> 06:31.680
So we're going to do just that.

06:31.680 --> 06:36.210
We're going to create a hash map that can store key value pairs of string and show.

06:36.480 --> 06:41.790
So here we'll create a hash map, import the appropriate classes.

06:47.140 --> 06:47.840
Okay.

06:47.880 --> 06:49.010
Call it model.

06:49.020 --> 06:50.820
We don't need to do this anymore.

06:51.750 --> 06:55.800
And now instead of model ad attribute, you can just say model output.

07:00.400 --> 07:00.950
Okay.

07:01.730 --> 07:02.150
Beautiful.

07:02.150 --> 07:05.600
We just defined a model that contains key value pairs of data.

07:06.050 --> 07:11.630
And it also says that back then the model and view return type was used instead of string.

07:11.930 --> 07:14.030
So usually what would happen when you return?

07:14.030 --> 07:18.440
The string is just as it's about to return the leaf template.

07:18.440 --> 07:20.760
The model data is sent over and time.

07:20.780 --> 07:26.780
Leaf uses it to populate your template, but in this case we can just return the model and view all

07:26.780 --> 07:27.890
at the same time.

07:27.980 --> 07:34.430
So we can say public model and view and we will return.

07:34.820 --> 07:36.020
Oh, I already wrote return.

07:36.020 --> 07:38.300
We'll return a new model in view.

07:39.500 --> 07:45.860
The view name is going to be the form and the not form shows.

07:46.220 --> 07:52.310
And the show's theme leaf template is going to be populated with data from the following model.

07:54.690 --> 07:55.370
OC.

07:56.090 --> 07:58.220
And I think that's about it.

08:01.390 --> 08:02.320
And beautiful.

08:02.320 --> 08:05.500
We don't see any change, which means we did it successfully.

08:05.620 --> 08:11.770
As we're about to return, the show's view finally populates it with data from the model.

08:12.490 --> 08:13.750
All right.

08:14.540 --> 08:16.740
And why did we do this?

08:16.760 --> 08:17.740
You might ask.

08:17.750 --> 08:19.820
And this says it all.

08:19.820 --> 08:21.200
It's good to be versatile.

08:21.230 --> 08:26.360
You never know when you'll encounter a piece of code that uses model and view.

08:26.810 --> 08:29.180
You never know what code base you'll be working on.

08:29.180 --> 08:33.290
So it's good to know as many things as possible, in my opinion.

08:33.290 --> 08:40.520
But personally speaking, if I am writing code, I prefer the newer approach, which is just to return

08:40.520 --> 08:48.830
a string and access the model directly from the handler methods, list of parameters, and then adding

08:48.830 --> 08:50.870
the attributes as follows.

08:51.860 --> 08:54.590
And here I can just say return shows.

08:55.500 --> 08:58.650
I prefer this method a lot more than the other one.
