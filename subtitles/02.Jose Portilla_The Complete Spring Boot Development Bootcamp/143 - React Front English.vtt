WEBVTT

00:00.210 --> 00:04.440
React is a JavaScript framework that focuses on front end development.

00:05.150 --> 00:10.550
Currently, our grade submission application combines the front end as well as the back end.

00:11.120 --> 00:13.640
Nowadays, nobody writes code like this.

00:13.640 --> 00:17.780
The front end should be completely decoupled from the back end.

00:18.710 --> 00:23.270
In this lesson, we will explore a design that decouples the front end from the back end.

00:25.160 --> 00:26.960
Let's look at our current design.

00:27.200 --> 00:32.360
The front end, which represents the graphical interface of our app, was created using Leaf.

00:34.780 --> 00:41.050
The back end, which is logic that stores and manages data was created using spring boots when a request

00:41.050 --> 00:42.640
is made from the client.

00:44.640 --> 00:45.540
The Web server.

00:45.540 --> 00:51.900
In this case, Tomcat intercepts the request, and our spring boot app prepares the data in some way.

00:52.170 --> 00:58.710
Finally, if is going to update the view and ultimately the entire application sends back HTML to the

00:58.710 --> 00:59.550
client.

01:00.800 --> 01:06.170
We combined the front end as well as the back end as part of the same web application.

01:06.380 --> 01:12.350
This is a very outdated practice, and nowadays nobody writes code like this.

01:13.590 --> 01:18.270
The only reason I taught you tell me for so that you can understand the spring mood fundamentals.

01:18.300 --> 01:24.570
Now that you understand concepts such as field validation, beans, dependency, injection, loose coupling,

01:24.570 --> 01:27.150
we can move on from this outdated design.

01:29.290 --> 01:34.600
The proposed design is one where the front end is completely decoupled from the back end.

01:34.720 --> 01:40.480
When a client makes a request, it is routed through a front end application which would typically be

01:40.480 --> 01:43.300
created using a JavaScript framework like React.

01:43.630 --> 01:48.850
Notice here that the front end is its own application running on Porte 3000.

01:49.090 --> 01:54.880
It receives the request and it routes it to the back end, which is running on Port 8080.

01:55.360 --> 01:59.860
The back end contains all of the logic needed to store and manage data.

02:00.220 --> 02:07.360
The sole purpose of your Spring Boot application is to manage the data in some way in essence creating,

02:07.360 --> 02:10.930
retrieving, updating, or deleting resources from a database.

02:12.060 --> 02:16.140
Once it does that, it's going to send a response back to the front end.

02:16.200 --> 02:22.080
And the back end communicates with the front end by sending back data packets in the form of JSON or

02:22.140 --> 02:22.770
XML.

02:22.860 --> 02:27.330
However, JSON is much more popular and the preferred way of doing so.

02:28.260 --> 02:29.790
Now the front end emerges.

02:29.790 --> 02:32.960
The data returned from your spring boot back end with its view.

02:32.970 --> 02:37.800
Then it communicates with the client by sending back an HTML web page.

02:39.640 --> 02:41.820
Finally, I want to make a statement.

02:41.830 --> 02:44.380
I have used to react and I have used time.

02:44.380 --> 02:51.730
Leif React is by far a much better front end technology than in leaf and in real life you have to decouple

02:51.730 --> 02:58.570
your front end from your back end because a back end can be associated and it can receive calls from

02:58.570 --> 03:00.340
many types of front ends.

03:00.490 --> 03:07.090
If a client makes a request from the browser, that request is received by a react or an angular application

03:07.090 --> 03:10.000
and routed to your spring boot to back end.

03:10.420 --> 03:17.350
If a client makes a request from an iPhone, the iPhone app built using Swift or Flutter is your front

03:17.350 --> 03:21.400
end, which would in turn request data from your back end.

03:21.790 --> 03:28.030
If a client makes a request from an android, the Android application built using perhaps Kotlin or

03:28.030 --> 03:33.220
Flutter Flutter is cross-platform a route that request to a back end.

03:33.460 --> 03:38.560
It follows that the back end should be completely decoupled from your front end.

03:39.490 --> 03:40.510
Going forward.

03:40.510 --> 03:46.530
Module two of this course is going to focus on the back end aspect of web development, which is where

03:46.540 --> 03:49.860
Spring Boot really shines as we move forward.

03:49.870 --> 03:55.990
The only concept I want you to take away from what we've done so far, our field validation three layer

03:55.990 --> 03:58.630
architecture and dependency injection.

03:59.110 --> 04:03.730
In this lesson, we explored a design that decouples the front end and the back end.

04:04.360 --> 04:06.340
Our current design is flawed.

04:06.580 --> 04:12.910
I can think of no company that actually combines the front end and the back end inside of the same application.

04:14.180 --> 04:19.550
When a client makes a request, it is typically routed through a front end application like a React

04:19.550 --> 04:20.440
application.

04:20.450 --> 04:25.220
The front end, which is its own app, wrote that request to your back end.

04:25.340 --> 04:30.260
A back end component such as your Spring Boot application will manage the data inside of a database

04:30.260 --> 04:31.160
in some way.

04:31.460 --> 04:36.440
It sends back a data packet to the front end in the form of JSON or XML.

04:36.770 --> 04:42.440
However, JSON is much more commonly used and is considered better practice to represent your data.

04:42.890 --> 04:48.920
Now the front end merges whatever data it receives from your back end and merges it with a view, and

04:48.920 --> 04:51.830
then it returns the updated view to your client.

04:54.690 --> 04:59.940
In the next lesson, we will look at a practical example where a React application speaks to a spring

04:59.940 --> 05:01.140
boot application.
