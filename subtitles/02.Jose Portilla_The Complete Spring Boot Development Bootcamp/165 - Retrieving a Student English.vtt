WEBVTT

00:00.090 --> 00:03.510
In this lesson, you're going to retrieve a student from your database.

00:03.510 --> 00:07.200
So right now I've got two rows inside of my table.

00:07.200 --> 00:13.320
If I want to retrieve the row that has an ID equal to one inside the primary key column, then what

00:13.320 --> 00:19.020
I'm going to do is say select all from the student table where the ID equals one and press run.

00:20.860 --> 00:25.390
And it retrieves the student that has an ID of one, a unique ID of one.

00:25.930 --> 00:30.850
Now, once again, we're not here to write any SQL statements instead of writing all of this, what

00:30.850 --> 00:39.400
I can do is go back into my code and inside of this method, say student repository, dot find by ID,

00:40.030 --> 00:45.160
find the record inside of our table that has this unique ID get.

00:46.020 --> 00:46.500
All right.

00:46.500 --> 00:52.860
And now inside of my rest controller, there is a handler method that intercepts a get request that

00:52.860 --> 00:56.760
is made on slash student with a path variable of ID.

00:56.790 --> 01:02.730
So whatever ID that gets passed in, we're going to use that to access a specific resource from our

01:02.730 --> 01:03.480
database.

01:03.480 --> 01:05.700
So student service dot find.

01:08.300 --> 01:11.060
For some reason, autocomplete is not working.

01:11.060 --> 01:16.430
Oh, it's get student student serviced, get student by whatever ID that gets passed in.

01:16.880 --> 01:17.480
All right.

01:17.480 --> 01:23.060
And because we made changes to our code, our app reran, which means our data store was reset.

01:23.060 --> 01:26.390
So let's go back and make some post requests.

01:26.390 --> 01:30.470
I'm going to create a new student called her Mini.

01:31.010 --> 01:33.650
Create a new student called Harry Potter.

01:35.010 --> 01:36.510
We'll just change the year.

01:37.710 --> 01:40.560
Press send going back over here.

01:40.560 --> 01:44.220
It's going to prompt me to reconnect because they reset.

01:44.820 --> 01:45.330
All right.

01:45.330 --> 01:48.420
Here we can see we've got our two records.

01:48.480 --> 01:54.060
If I go back here and I try to grab the student that has an ID of one.

01:55.730 --> 01:57.680
It sends back Hermione Granger.

02:02.640 --> 02:08.340
The student repository is able to successfully find the student that has this particular ID.

02:08.370 --> 02:11.970
It returns that student in the form of a Java object.

02:11.970 --> 02:19.020
And inside of our response, we're serializing that object into JSON before sending it back to the consumer.

02:19.200 --> 02:20.580
And that's all.

02:22.080 --> 02:26.910
Once again, using pure Java, we're able to talk to the database from the repository.

02:26.970 --> 02:33.240
Our Java code is intercepted by an object relational layer before being translated to the correct query.

02:33.600 --> 02:38.460
So let's try grabbing a row with an ID of two now.

02:41.010 --> 02:43.260
Once again, we get a successful response.

02:43.260 --> 02:45.000
We get back Harry Potter.

02:49.200 --> 02:52.350
In this lesson, you retrieved rows from the student table.

02:53.920 --> 03:00.280
First we retrieved a specific grow from our table using plain old SQL, but we're not here to write

03:00.310 --> 03:04.740
SQL statements courtesy of Spring GPUs CRUD repository.

03:04.750 --> 03:07.690
We can interact with our database using pure Java.

03:07.810 --> 03:13.900
All we had to say was fine by ID and it was able to retrieve the student with the correct ID.
