WEBVTT

00:00.120 --> 00:04.680
In this lesson, you will learn how to apply a breakpoints in Visual Studio code.

00:04.710 --> 00:08.830
First thing I want you to do is from your spring boot to boot camp resources.

00:08.850 --> 00:13.050
Go to appendix A and open the breakpoints folder.

00:15.850 --> 00:16.210
Okay.

00:16.360 --> 00:17.860
I was already inside.

00:17.860 --> 00:22.600
And the first thing I want you to do is apply your first breakpoint.

00:22.630 --> 00:24.400
Doing it in vs code is very easy.

00:24.400 --> 00:28.990
Just left click beside the line of code that you want to breakpoint.

00:29.380 --> 00:35.680
And what I'll do before running the application and debug mode is add another print statement and this

00:35.680 --> 00:38.770
print statement is just going to print the receipt.

00:38.860 --> 00:44.470
I'll add another breakpoint here and if you want to run your application in debug mode, either press

00:44.470 --> 00:48.190
on debug or click on the following option.

00:48.190 --> 00:51.460
Run in debug and click run and Debug.

00:55.840 --> 01:00.730
And this is how you're going to be break pointing your spring boot applications, by the way.

01:01.120 --> 01:07.720
Anyways, the first thing I want to talk to you about is the continue button continue goes from one

01:07.720 --> 01:09.190
breakpoint to another.

01:09.190 --> 01:14.500
So if I press continue, it goes to the next breakpoint and it runs this line of code.

01:14.620 --> 01:18.730
Now, here is where you monitor the state of your variables.

01:18.820 --> 01:24.280
After we ran this line of code, our receipt was updated to equal.

01:24.280 --> 01:26.260
The total is $5.

01:26.260 --> 01:30.910
And if I press continue again, there are no more breakpoints that follow.

01:30.910 --> 01:36.160
So their runtime is going to finish and it will print your message.

01:39.000 --> 01:39.410
Okay.

01:39.450 --> 01:41.820
Let's debug the application again.

01:43.130 --> 01:43.430
Now.

01:43.430 --> 01:48.690
This time I want to know exactly what happens inside of our get receipt function.

01:48.710 --> 01:50.810
I don't want to just step to the next breakpoint.

01:50.810 --> 01:57.920
I want to step inside, get a receipt, and luckily we have a step into button which you can press.

01:57.920 --> 02:00.860
And what that's going to do is step inside the function.

02:00.860 --> 02:07.060
Here I can see the state of my variables, the price one and price two parameters equal 2.5.

02:07.070 --> 02:11.000
You can also see this by going off to the side anyways.

02:11.000 --> 02:13.580
I can keep stepping inside my function.

02:14.210 --> 02:21.170
Now the message equals a string and now if I press step inside again, it's going to step into the sum

02:21.170 --> 02:21.890
function.

02:22.980 --> 02:25.650
Once again, we can monitor the state of our variables.

02:25.650 --> 02:28.250
Price one and price two are still 2.5.

02:28.260 --> 02:32.220
This is going to return price one plus price to.

02:33.900 --> 02:36.030
The return value is five.

02:36.030 --> 02:41.610
And then if I keep stepping inside, my function total is going to equal the return value.

02:44.660 --> 02:51.440
Having ran this line of code, now total equals five and our function is going to return the message

02:51.440 --> 02:54.860
plus the total value which will result.

02:55.460 --> 03:02.180
And one thing I want to point out is if you press the step inside button right as you're about to return

03:02.180 --> 03:05.450
something in your function, it's going to step into some weird stuff.

03:05.450 --> 03:09.050
So step out of it using the step out button.

03:10.080 --> 03:12.630
Step out again and we're back.

03:14.580 --> 03:18.120
Once you reach the return keyword press, step over.

03:20.390 --> 03:21.820
All right.

03:21.830 --> 03:24.560
Our function returns the following string.

03:26.200 --> 03:27.730
If I press continue.

03:29.300 --> 03:32.760
Receipt ends up equaling the value that was returned.

03:32.780 --> 03:36.770
If I press continue again, it prints the receipts.

03:36.890 --> 03:40.970
All right, one more thing I want to show you, which is really important.

03:41.510 --> 03:43.730
We'll step inside, get receipt again.

03:43.760 --> 03:50.960
Now, I want to step inside every single line of get receipts, but I don't want to step inside of some.

03:51.230 --> 03:58.280
If I press step into, it's going to step into some before it steps into the remaining lines.

03:58.280 --> 04:04.430
But I don't want to do that because imagine some was millions of lines long, then this would be very

04:04.430 --> 04:05.210
annoying.

04:05.300 --> 04:09.920
But if I were to press continue, then all that's going to do is just go to the next breakpoint.

04:09.920 --> 04:11.300
So we don't want to do that.

04:11.300 --> 04:14.840
So what I'll do is I will restart the runtime.

04:17.210 --> 04:17.840
Okay.

04:17.840 --> 04:19.330
Let's step inside again.

04:19.340 --> 04:25.610
We will keep stepping inside the function and once I reach this line, I can actually step over it using

04:25.610 --> 04:26.870
the step over button.

04:30.580 --> 04:35.260
Now total equals five based on whatever was returned from the sum function.

04:35.470 --> 04:37.390
I will press step over again.

04:38.320 --> 04:41.620
The function returns the total as $5.

04:43.850 --> 04:46.190
Receipt ends up equaling this value.

04:46.190 --> 04:49.760
And if I press continue again, that's what gets printed.

04:53.660 --> 04:54.050
Okay.

04:54.230 --> 04:56.020
One last thing I want to show you.

04:56.030 --> 04:56.710
I promise.

04:56.720 --> 04:57.800
It's the last thing.

04:58.130 --> 04:58.700
Press on.

04:58.700 --> 04:59.750
Run and debug.

05:02.590 --> 05:09.520
You can also disable your breakpoints, which means if I press continue or next or anything, it will

05:09.520 --> 05:10.390
ignore them.

05:11.660 --> 05:12.440
Okay.

05:13.250 --> 05:14.960
Now, let's just say you have.

05:15.860 --> 05:21.860
10 million breakpoints inside of your app, and you don't want to individually get rid of all of them.

05:22.520 --> 05:24.410
You can just press the following button.

05:25.690 --> 05:26.590
And that is all.

05:26.650 --> 05:28.930
I'll see you in the next breakpoint session.
