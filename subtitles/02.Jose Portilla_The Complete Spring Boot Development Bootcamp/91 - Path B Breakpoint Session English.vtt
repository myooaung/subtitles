WEBVTT

00:00.180 --> 00:04.620
So in this breakpoint session, we're going to trace the runtime of two different scenarios.

00:04.650 --> 00:10.020
The first scenario is a bug that we encountered when we were updating with a name, and the final scenario

00:10.020 --> 00:12.690
will trace the runtime of our current solution.

00:12.690 --> 00:15.080
So here I'm starting with scenario number one.

00:15.090 --> 00:19.920
I launched a previous version of the project, so you don't have to do what I'm doing, just follow

00:19.920 --> 00:20.570
along.

00:20.580 --> 00:24.660
And in this project we were using a name to update a student's grade.

00:24.660 --> 00:29.070
So what I'm going to do is start by running the application in debug mode.

00:30.920 --> 00:31.790
Um.

00:31.820 --> 00:37.430
You'll notice I already have all of my breakpoints set up, but I disabled them, so I'll go ahead and

00:37.430 --> 00:38.510
re-enable them.

00:39.860 --> 00:40.700
Oh, right.

00:47.070 --> 00:49.590
And I think my application should have run by now.

00:49.590 --> 00:53.430
So I'll go to local hosts.

00:53.730 --> 00:54.480
You know what?

00:54.480 --> 00:56.340
Let me disable the breakpoints.

01:01.020 --> 01:03.300
And I'm going to add a piece of data to our data store.

01:03.300 --> 01:06.840
We'll say Harry C minus potions.

01:07.750 --> 01:11.870
And now updating a student's grade based on their name is not a good idea.

01:11.910 --> 01:12.760
Here's why.

01:13.030 --> 01:15.880
Let's say I want to give Harry another grade in Quidditch.

01:15.880 --> 01:18.910
So we'll say Harry, we'll give him a C-minus.

01:19.450 --> 01:20.350
Or, you know what?

01:20.350 --> 01:21.070
Let's change it up.

01:21.070 --> 01:25.300
We'll give him a B-minus in Quidditch.

01:25.330 --> 01:29.110
And before I press the submit button, let me just re-enable the breakpoints.

01:32.020 --> 01:40.510
Submit initiates a post request the handler method receives that post request starts by creating a new

01:40.510 --> 01:43.720
grade object using your empty constructor.

01:48.240 --> 01:53.730
And now Spring Boot is smart enough to use your setter is an update every field in the grade object

01:53.730 --> 02:00.360
with payload from the post request so it's going to update the name field with a value from the post

02:00.360 --> 02:01.080
request.

02:01.170 --> 02:07.680
It will update the score field with a value from the post request and it will update the subject field.

02:09.200 --> 02:09.770
Sweet.

02:11.400 --> 02:17.820
And as we step further into the handler method, the name parameter matches one of the objects inside

02:17.820 --> 02:18.900
of the array list.

02:20.210 --> 02:21.560
This is a problem.

02:22.950 --> 02:27.690
Because this function is effectively going to return an index.

02:28.050 --> 02:35.730
And so even though our intent was to add a new object to that data store, it updates an existing one.

02:43.810 --> 02:47.410
The handler method then redirects the user to the grades template.

02:48.610 --> 02:50.950
It's going to send over the model data.

02:52.990 --> 02:58.840
And finally, it's going to generate a table with rows that reflect, in this case, the newly updated

02:58.840 --> 02:59.800
array list.

02:59.950 --> 03:02.440
This is not good.

03:05.490 --> 03:10.710
As our current design implies that each student can only have one grade.

03:11.010 --> 03:12.300
So what did we do?

03:12.330 --> 03:15.060
Well, let's travel a few edits into the future.

03:17.820 --> 03:24.720
What we did in this project is we added a new ID field and unlike the name, the ID is going to be unique

03:24.720 --> 03:28.140
for every grade object, so it's perfect for updates.

03:28.620 --> 03:32.730
So I'm going to add the exact same breakpoints as before.

03:41.440 --> 03:44.530
And I'll add a breakpoint here.

03:44.620 --> 03:45.820
One here.

03:48.020 --> 03:49.790
One here, one here as well.

03:51.700 --> 03:54.670
All right, now I'll go ahead and run the application and debug mode.

04:00.920 --> 04:04.080
And let's say I want to give Harry another grade in Quidditch.

04:04.100 --> 04:07.160
If I go to local host 8080.

04:08.170 --> 04:10.940
The Handler method intercepts the get request.

04:10.960 --> 04:14.040
There is no ID parameter that was being passed back.

04:14.050 --> 04:14.830
It's null.

04:17.170 --> 04:22.000
The Handler method ends up creating a new grade object, and right away the constructor is going to

04:22.000 --> 04:24.790
generate a unique ID for the ID field.

04:34.470 --> 04:37.800
Get form adds this grade object to the model.

04:38.840 --> 04:43.190
The key grade maps to an empty grade object that does have an ID.

04:44.030 --> 04:47.630
And as the handler method returns the form templates.

04:49.180 --> 04:51.310
It sends over the model data.

04:51.340 --> 04:55.390
The form element selects the grade object.

04:55.390 --> 04:59.890
Every field in the object is bound to a form input.

05:01.370 --> 05:07.400
Three of the fields in the model object are empty, so it follows that three of the form inputs are

05:07.400 --> 05:08.870
going to be empty as well.

05:09.050 --> 05:16.700
But the ID field does contain data and the last input which happens to be hidden is bound to it.

05:16.910 --> 05:20.660
And so now when you submit the form, we'll give Harry another grade and Quidditch.

05:20.660 --> 05:22.150
We'll say B-minus.

05:22.610 --> 05:26.360
In Quidditch, it's going to initiate a post request.

05:26.360 --> 05:30.290
And this time the post request carries four values back to the back end.

05:30.470 --> 05:34.220
It's going to carry back a name subject score as well as an ID.

05:34.490 --> 05:41.870
Now, before we can see that the Handler method submit form receives the post request and as soon as

05:41.870 --> 05:47.870
it does, you can see that it creates an empty grade object using your empty constructor.

05:48.380 --> 05:54.050
Every field in the object starts off as empty, but the empty constructor generates another ID for this

05:54.050 --> 05:54.770
object.

05:56.580 --> 06:03.180
Bring boot uses your setters to update every field in the grade object with payload from the post request

06:03.180 --> 06:08.130
and it's going to override that ID value with a value from the post request.

06:08.870 --> 06:11.390
It updates the name of the value from the Post request.

06:11.540 --> 06:16.370
It updates the score where they add value from the Post request and it updates the subject.

06:17.580 --> 06:18.450
Beautiful.

06:19.160 --> 06:22.130
And as we step further into the handler method.

06:23.040 --> 06:24.000
The ID field.

06:24.000 --> 06:26.070
It doesn't match anything in the data store.

06:27.230 --> 06:30.320
So it adds this object to our array list.

06:31.580 --> 06:35.600
Then it redirects the client to make another get request on slash grades.

06:35.930 --> 06:39.710
This is going to add the updated array list to our model.

06:41.090 --> 06:41.660
Returns.

06:41.660 --> 06:48.050
The grades, templates and the grade template is going to generate rows that reflect our newly updated

06:48.050 --> 06:49.010
array list.

06:50.770 --> 06:52.780
And just like that, the bug is gone.

06:53.940 --> 06:58.440
Before we actually wrap things up, one last thing I want to breakpoint in this section is updating

06:58.440 --> 06:59.490
a student grade.

06:59.850 --> 07:01.290
So we'll press update.

07:01.290 --> 07:07.920
And what the update button does is it makes a get request to local host 8080 and in that request it

07:07.920 --> 07:09.990
sends back an ID parameter.

07:10.970 --> 07:12.710
e0f6.

07:14.940 --> 07:18.960
This is the ID of Harry's great object for potions.

07:20.950 --> 07:28.930
The handler method get form receives this ID and it checks if that ID matches anything inside of our

07:28.930 --> 07:29.830
data store.

07:30.100 --> 07:31.210
It definitely should.

07:31.210 --> 07:32.710
So if I press continue.

07:33.980 --> 07:41.690
It adds Harry's great object to our model the grade key maps to our grade object.

07:42.020 --> 07:48.830
So upon returning the form view, it's going to send over this model data and the form element is going

07:48.830 --> 07:57.050
to be bound to this grade object such that each input is going to bind to a field in that form backing

07:57.050 --> 07:57.920
object.

07:58.670 --> 08:04.250
All of the fields are populated, so it follows that all of the form inputs are going to be populated

08:04.250 --> 08:04.850
as well.

08:05.150 --> 08:05.870
Beautiful.

08:06.770 --> 08:16.670
And now if I decide to update Harry's grade to an A-plus and press submit, remember this I'd e0f6 if

08:16.670 --> 08:17.840
I press submit.

08:19.280 --> 08:25.790
What that does is it initiates a post request and the handler method submit form receives that post

08:25.790 --> 08:26.330
request.

08:26.330 --> 08:32.080
The first thing that it does is it creates a new grade object using your empty constructor.

08:32.090 --> 08:37.190
Now, the problem is, upon creating this new grade object, it's going to assign it a new ID.

08:37.760 --> 08:43.730
But not to worry because Spring Boot is smart enough to update every single field in this object with

08:43.730 --> 08:45.320
payload from the post request.

08:45.320 --> 08:54.740
And so what it's going to do is override this ID value with the one provided by the post request e0f6.

08:54.950 --> 08:57.350
So now the IDs are consistent again.

08:57.350 --> 09:00.200
Now we're updating the name with a value from the post request.

09:00.200 --> 09:02.930
We're updating the score and we're updating the subject.

09:03.230 --> 09:04.190
All right.

09:07.550 --> 09:11.840
And now we're checking if the idea of this grade matches anything in the data store.

09:11.930 --> 09:13.430
It definitely should.

09:13.460 --> 09:19.760
The index it returns is zero, which means it did find an object to update and it's going to update

09:19.760 --> 09:21.620
the object at index zero.

09:22.340 --> 09:27.800
Upon doing so, it will redirect the client to make a get request on slash grades.

09:28.280 --> 09:35.660
The grades handler method is going to add this new array list as a model attribute.

09:36.950 --> 09:42.710
Giving Harry an A-plus in potions and upon returning the grades templates.

09:43.460 --> 09:48.440
The new rose that it generates will reflect the newly updated array list.

09:50.920 --> 09:51.640
Just like that.

09:51.640 --> 09:53.350
We updated Harry's grade.
