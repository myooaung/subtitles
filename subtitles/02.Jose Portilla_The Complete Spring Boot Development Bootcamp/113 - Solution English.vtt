WEBVTT

00:00.150 --> 00:04.980
Welcome back to another challenge and this one we're going to validate the item fields of the global

00:04.980 --> 00:07.410
superstore before submitting the form.

00:07.440 --> 00:12.690
And so in order to validate fields, we need access to all of the constraint, annotations and classes

00:12.690 --> 00:17.040
that are provided from the library of files in the validation dependency.

00:17.040 --> 00:22.500
So we'll go over and look for spring boot validation dependency.

00:23.430 --> 00:25.560
Go to the central maven repo.

00:25.830 --> 00:29.370
I'll choose a dependency that matches my spring boot version.

00:30.000 --> 00:37.050
However, going back to that XML file, the version for spring boot starters is already been specified,

00:37.050 --> 00:39.960
so we don't need to actually include the version.

00:41.480 --> 00:42.140
Okay.

00:43.630 --> 00:45.190
Now going to task two.

00:45.220 --> 00:49.300
We need to make sure that the category and name fields are not blank.

00:49.330 --> 00:55.720
The price and discounts cannot be zero and the date must not be in the present or in the future.

00:56.960 --> 01:02.750
First thing to look out for is the only way our category field ends up being blank is if the user selects

01:02.750 --> 01:06.860
the choose category option, which equals a blank value.

01:06.950 --> 01:11.140
So over here we need to make sure the value submitted is not blank.

01:11.150 --> 01:18.380
And if it is, we will display a message that says Please select a category.

01:20.290 --> 01:20.860
Okay.

01:20.890 --> 01:25.180
Now we need to also make sure that the name they input is not blank.

01:25.210 --> 01:29.590
If it is, we'll say name cannot be blank.

01:31.710 --> 01:36.420
The price and discount can be at minimum zero.

01:36.810 --> 01:39.200
So the value has to be at least zero.

01:39.210 --> 01:44.490
And if it isn't, we will say price cannot be negative.

01:47.620 --> 01:49.450
The discount cannot be zero.

01:49.450 --> 01:52.630
So we'll say discount cannot be negative.

01:52.990 --> 01:57.220
And we need to make sure that data that they provide is in the past.

01:57.820 --> 02:03.820
If it's not, we will say the date must be of the past.

02:05.870 --> 02:11.750
We don't need to validate ID because it's auto generated and I think that should be it.

02:12.050 --> 02:18.500
Now, these constraint annotations alone don't really do anything unless we actually validate the fields

02:18.500 --> 02:20.690
that were submitted in the post request.

02:21.600 --> 02:27.720
And so when a post request is made, a new item object is created and spring boot updates every field

02:27.720 --> 02:29.010
in this item object.

02:29.010 --> 02:36.060
But as it's doing so, we need to validate every single value that's being used to update the fields

02:36.390 --> 02:40.950
and what's going to carry the result of the validation is the binding results.

02:41.190 --> 02:43.440
Binding result results.

02:43.470 --> 02:48.440
Always make sure to define your binding result after the validation process.

02:48.450 --> 02:52.020
Otherwise, I'm pretty sure spring boots are going to throw an exception.

02:53.340 --> 03:00.240
Now the binding result as it carries the result of our validation, we can check if the result has any

03:00.240 --> 03:01.050
errors.

03:01.980 --> 03:05.010
If that's the case, we can just return the form.

03:07.510 --> 03:08.260
Okay.

03:09.810 --> 03:11.960
Maybe there's no need to run our code just yet.

03:11.970 --> 03:14.640
Let's finalize task number two.

03:16.600 --> 03:23.290
So if the result so if the binding result ends up having any errors, it keeps record of the object

03:23.290 --> 03:25.300
where those values came from.

03:25.300 --> 03:31.540
And it also keeps a record of every error that's associated with each field in the object.

03:31.540 --> 03:39.940
So right above each form element, we're going to display the error that corresponds to it using a paragraph

03:39.940 --> 03:40.750
element.

03:40.840 --> 03:47.080
A paragraph element is just used to display text and we're going to display the error that's in our

03:47.080 --> 03:48.730
binding result here.

03:48.730 --> 03:55.000
We're going to select the error that's associated with the category field, and we'll give it a style

03:55.000 --> 03:58.390
equals color red.

04:00.180 --> 04:04.020
Here, we will select the error that's associated with the name field.

04:08.880 --> 04:09.930
Price.

04:15.940 --> 04:17.110
Discount.

04:23.000 --> 04:24.560
Order dates.

04:26.600 --> 04:28.010
And the ID is hidden.

04:28.010 --> 04:29.630
No need to do anything here.

04:29.840 --> 04:31.400
I think we're ready to run our code.

04:43.920 --> 04:45.000
All right.

04:48.060 --> 04:48.690
Um.

04:48.690 --> 04:53.370
Let's just make sure everything is erroneous.

04:53.400 --> 04:57.570
Negative four and negative five will choose a value in the future.

04:59.750 --> 05:01.040
Looking good so far.

05:01.070 --> 05:07.880
Now, the reason why this happens is because these were initially side by side, and the following error

05:07.880 --> 05:10.220
message was displayed between them.

05:10.220 --> 05:20.030
So what I'm going to do is grab this error message and put it right beside the price error message.

05:20.510 --> 05:21.710
Let's try this again.

05:24.900 --> 05:25.740
Beautiful.

05:27.850 --> 05:30.700
Going back to task number three.

05:30.730 --> 05:34.510
Upon returning the form, the drop down list loses its data.

05:34.540 --> 05:36.190
Let's make sure that happens.

05:36.190 --> 05:37.690
And indeed it does.

05:37.930 --> 05:46.060
And now I don't know about you, but do you think it would make sense to keep adding this array to the

05:46.060 --> 05:49.180
model every single time we display the form?

05:49.600 --> 05:50.640
I don't think so.

05:50.650 --> 05:57.160
Now actually having the categories constant inside of our spring boot source code doesn't make any sense

05:57.160 --> 06:02.830
because number one, it doesn't contribute to any of the logic inside of the store controller and the

06:02.830 --> 06:04.810
data inside of it is fixed.

06:04.840 --> 06:12.040
The only purpose this data is serving is updating values inside of our dropdown, so it should be integrated

06:12.040 --> 06:14.020
directly inside the HTML.

06:14.050 --> 06:20.560
There is no reason to pass it from our spring boot up to the HTML when it only serves one purpose,

06:20.560 --> 06:25.090
which is to update the view with fixed data so we will remove it.

06:25.870 --> 06:30.390
Remove the following and then inside of form that HTML.

06:30.400 --> 06:32.140
We don't need this time loop.

06:32.140 --> 06:33.940
It was only there for you to practice.

06:33.940 --> 06:36.910
We can just directly add three options.

06:37.090 --> 06:38.770
This one will say furniture.

06:40.160 --> 06:44.240
Here, we will say office supplies and then technology.

06:46.540 --> 06:52.120
And the value that each option will equal will match the content that it's displaying.

06:55.710 --> 07:01.230
So when the user selects one of these options, it's the value that determines what gets bound to our

07:01.230 --> 07:04.800
field and in turn passed into a post request.

07:05.930 --> 07:07.970
This text over here means nothing.

07:08.390 --> 07:14.540
Anyways, we already covered that, but if we go ahead and try everything out again, should always

07:14.540 --> 07:15.510
touch your code.

07:15.530 --> 07:17.540
Everything works exactly as it should.

07:17.540 --> 07:19.760
But we're not going to choose anything.

07:19.760 --> 07:22.220
We'll make sure everything is erroneous.

07:23.500 --> 07:24.670
Submit the item.

07:25.560 --> 07:26.670
All right.

07:26.730 --> 07:28.150
We'll say negative five.

07:28.180 --> 07:29.190
Negative four.

07:29.670 --> 07:30.300
Beautiful.

07:30.300 --> 07:33.210
Try to select categories and we're good.

07:35.810 --> 07:39.620
And if I may say so, this even looks a lot cleaner than our family flu.

07:39.650 --> 07:41.000
It wasn't necessary.

07:41.840 --> 07:47.840
The final task is to apply cross field validation to the price and discount, such that the price cannot

07:47.840 --> 07:49.250
be less than the discount.

07:49.280 --> 07:53.480
This is something you already learned about in Workbook 3.2.

07:53.540 --> 08:01.130
Cross field validation is a way to not just compare a single field, but to make sure that the combination

08:01.130 --> 08:03.200
of data they're submitting makes sense.

08:05.760 --> 08:10.770
So what we need to do is go back to handle submit.

08:10.860 --> 08:16.320
So just because the payload from the post request is valid in the sense that the price and discount

08:16.320 --> 08:21.660
fields are both bigger than zero, we still need to make sure if.

08:23.660 --> 08:24.560
The price.

08:24.560 --> 08:28.070
So we'll say if items get price.

08:29.850 --> 08:31.140
Is greater than.

08:32.380 --> 08:33.880
Or is less than.

08:36.550 --> 08:38.140
Item, not the get discount.

08:38.530 --> 08:42.910
If that happens to be the case, we need to reject one of these values.

08:42.910 --> 08:46.810
So we'll say result, reject value.

08:48.100 --> 08:53.020
The value that we're going to reject will be the price field.

08:53.350 --> 08:54.630
You can reject discount.

08:54.640 --> 08:55.480
It doesn't matter.

08:57.860 --> 08:59.690
Error code, you will leave blank.

08:59.990 --> 09:04.580
And the default message will be price cannot be less than discount.

09:09.950 --> 09:16.400
So even though there weren't any errors validating each individual field, once you reject a particular

09:16.400 --> 09:20.790
field, then the binding result records an error for that field.

09:20.810 --> 09:24.170
There are errors, so it's going to return the form view.

09:25.880 --> 09:30.650
And then our final leaf attribute to will display the error that's associated with the price.

09:33.910 --> 09:34.410
All right.

09:34.420 --> 09:36.550
Think we're ready to run our code?

09:38.660 --> 09:46.760
We'll just we'll do everything right, but we'll set a price of 300 with a discount of 500.

09:47.000 --> 09:48.950
Order a date will be.

09:50.110 --> 09:52.540
Uh, May 5th, submit the item.

09:52.990 --> 09:55.070
Price cannot be less than discount.

09:55.090 --> 09:56.110
Great.

09:59.570 --> 10:01.280
And looks like we're all done.

10:01.910 --> 10:07.310
As always, I like to visualize the runtime using breakpoints before wrapping up.

10:07.340 --> 10:12.560
If you want to stop here, by all means, if you want to trace the runtime with me, then you're most

10:12.560 --> 10:13.250
welcome.

10:13.490 --> 10:16.160
So I'm going to stop the runtime.

10:17.960 --> 10:24.200
And then just add breakpoints inside of handle submit.

10:25.160 --> 10:25.720
Um.

10:26.820 --> 10:27.060
Yeah.

10:27.090 --> 10:28.740
Maybe I'll just add them here.

10:29.570 --> 10:30.800
That should be good enough.

10:34.410 --> 10:36.750
Now we're in the application and debug mode.

10:44.460 --> 10:44.610
Okay.

10:44.770 --> 10:46.930
I'll go back to local host 8080.

10:50.790 --> 10:51.210
First.

10:51.210 --> 10:53.430
All the data I'll submit will be faulty.

10:59.470 --> 11:00.670
Submit the item.

11:02.220 --> 11:02.790
Okay.

11:03.570 --> 11:07.620
So at this point, all of the data was passed into a post request.

11:07.800 --> 11:14.460
Spring Boot created an item object behind the scenes and populated every single field in this object

11:14.460 --> 11:16.920
with values from the post request.

11:16.950 --> 11:22.590
Here you can see all the data, but then as the fields were being populated with payload from the post

11:22.590 --> 11:30.030
request, it was being validated using the constraints that we applied to each field, and the binding

11:30.030 --> 11:33.060
result carries the result of this validation.

11:33.060 --> 11:39.480
So here, if we drill into the result, we can see that there are actually four errors.

11:39.480 --> 11:41.880
We have an array list with four errors.

11:43.320 --> 11:47.940
It keeps a record of the object where these errors came from.

11:50.180 --> 11:55.280
And Thiamine is able to access every single error that belongs to each field.

11:55.280 --> 11:58.340
So by the time we display the form.

12:01.780 --> 12:04.840
It displays those errors all the right.

12:08.310 --> 12:12.240
Now, if I were to say ten bucks here.

12:13.270 --> 12:15.860
50 bucks here will choose a category.

12:15.880 --> 12:17.930
We'll put a name of.

12:17.950 --> 12:19.060
Couch

12:21.550 --> 12:21.880
order.

12:21.880 --> 12:25.510
Date will just leave that to be a good value.

12:26.660 --> 12:35.900
So at this point, every individual field was validated and it concludes that there are no errors.

12:36.110 --> 12:43.400
However, just because each individual field is valid in its own, we still need to compare the data

12:43.400 --> 12:47.210
to make sure that what was submitted actually makes sense.

12:47.240 --> 12:52.200
Here, we're checking if the item price is lower than the item discount.

12:52.220 --> 12:58.520
If that happens to be the case, we need to reject either the price or the discount because one of them

12:58.520 --> 13:01.040
is clearly wrong in this case.

13:02.050 --> 13:03.580
We reject the price.

13:05.000 --> 13:11.210
So now we have one error in the binding result that corresponds to the price field.

13:11.210 --> 13:15.670
And the message that will be displayed is price cannot be less than discount.

13:15.680 --> 13:23.600
So right before we return the form, finally, if errors is going to grab the error message that's associated

13:23.600 --> 13:24.830
with the price field.

13:25.550 --> 13:28.670
And that is exactly what we see.

13:28.700 --> 13:30.650
I hope you enjoyed this challenge.

13:31.600 --> 13:34.390
It wasn't too hard compared to what we did in Java Gram.

13:34.390 --> 13:40.630
And now I have to admit, although we have come a long way with the Global Superstore application,

13:40.630 --> 13:44.730
the code is getting really, really messy.

13:44.740 --> 13:50.560
We haven't really done that much and the code is already starting to pile up and that's why in the next

13:50.560 --> 13:55.750
section we're going to refactor our code into a three layer code base.

13:55.840 --> 13:57.310
I can't wait to see you there.
