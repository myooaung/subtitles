WEBVTT

00:00.180 --> 00:01.110
Welcome back, everyone.

00:01.110 --> 00:04.800
Before I move on to the solution for a book 3.2.

00:04.830 --> 00:11.550
I just want to tell you that I just finished editing workbook 3.1 and I noticed that I had mindlessly

00:11.550 --> 00:12.890
made these public.

00:12.900 --> 00:16.980
They should be private and just want to apologize for doing that.

00:16.980 --> 00:19.010
But I am human too.

00:19.020 --> 00:25.290
Sometimes I make mistakes and in this case it just was not worth the rerecording and re editing a 22

00:25.290 --> 00:26.820
minute video just for that.

00:26.820 --> 00:29.460
That would take a very, very long time.

00:29.460 --> 00:34.620
So forgive me, I did update your solution code, so not to worry.

00:34.620 --> 00:36.180
But anyways, enough of that.

00:36.180 --> 00:37.770
Let's move on to Workbook 3.2.

00:37.770 --> 00:40.680
This one is going to focus on cross field validation.

00:40.860 --> 00:49.260
So if you look at each field individually, the client may enter valid data in the sense that, yes,

00:49.260 --> 00:55.470
this is not blank, this does have a minimum size of two characters, so does the last name.

00:55.470 --> 01:01.260
But from a cross field point of view, if you were to compare both of these values together, the user

01:01.260 --> 01:04.050
is not taking the submission process seriously.

01:04.050 --> 01:07.920
What we're going to do is compare the last name against the first name.

01:07.920 --> 01:15.510
If they happen to be equal, we're going to reject the last name field and by doing so, our binding

01:15.510 --> 01:18.930
result is going to end up carrying an error for that field.

01:18.930 --> 01:24.300
And the third argument is where we can specify that error message that finally, if is going to eventually

01:24.300 --> 01:27.360
display, all right, let's do just that.

01:27.360 --> 01:29.280
We'll go to handle submit.

01:29.490 --> 01:36.870
So by this point, let's say our client entered a valid data for each individual field.

01:36.870 --> 01:40.170
We still want to perform a check right after.

01:41.480 --> 01:47.420
That compares the first name against the last name.

01:51.660 --> 01:58.170
And if it so happens that the first name equals the last name, they're clearly not taking the process

01:58.170 --> 01:58.950
seriously.

01:58.950 --> 02:02.100
So we're going to actually reject the last name.

02:03.390 --> 02:08.220
The field we're going to reject is the last name.

02:10.470 --> 02:11.760
The error code.

02:11.790 --> 02:13.510
I always just leave it blank.

02:13.530 --> 02:15.450
No need for this argument.

02:15.780 --> 02:20.250
And the message that file MIF is going to display will be what was it?

02:20.640 --> 02:22.020
Please enter valid data.

02:26.490 --> 02:27.210
OC.

02:28.490 --> 02:32.330
So this is going to add another error to our binding result.

02:32.330 --> 02:37.490
That error is going to be associated with the last name, and that same error will have the following

02:37.490 --> 02:43.640
message by the time we return, sign up Ethereum Leaf will have access to all the data inside the binding

02:43.640 --> 02:51.260
result and it will display the error that's associated with the last name of our user object so we can

02:51.260 --> 02:52.550
go ahead and run our code.

03:03.320 --> 03:06.110
We'll go over to local host 8080.

03:08.150 --> 03:09.620
We'll say Arthur.

03:09.740 --> 03:11.240
We'll say Arthur again.

03:11.270 --> 03:13.370
Everything else is going to be valid.

03:14.830 --> 03:15.550
Um.

03:15.820 --> 03:16.900
Give them a random birthday.

03:16.900 --> 03:18.040
That's in the past.

03:19.830 --> 03:20.580
Beautiful.

03:21.000 --> 03:22.530
Please enter a valid.

03:23.220 --> 03:23.910
Did I.

03:24.840 --> 03:27.810
I'm really making a lot of silly mistakes these days.

03:27.840 --> 03:30.780
Error message should be please enter valid data.

03:36.430 --> 03:37.860
All right, much better.

03:37.870 --> 03:40.030
See you in Workbook 3.3.
