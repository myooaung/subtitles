WEBVTT

00:00.450 --> 00:05.250
It's necessary to test all of the business logic inside of the service class.

00:05.610 --> 00:10.380
And the last lesson we set up a class that mocks the great repository dependency.

00:10.740 --> 00:17.340
It creates a real object out of great service, and then it injects the grade repository mock into it.

00:17.550 --> 00:22.590
We're essentially wiring this great repository mark into the following variable.

00:22.710 --> 00:28.500
This allows us to test the grade service in complete isolation because we can control exactly what the

00:28.500 --> 00:30.750
mock can or can't return.

00:32.040 --> 00:36.660
In this lesson, you will unit test every single meaningful method inside of grade service.

00:39.410 --> 00:41.540
The unit testing process is fairly simple.

00:41.600 --> 00:45.680
The test annotation tells J Unit to run the method as a unit test.

00:48.660 --> 00:54.270
And there are three steps to writing a unit test arrange means mock the data that's needed to carry

00:54.270 --> 00:55.410
out the unit test.

00:55.530 --> 01:01.530
You kind of just prepare everything until you're ready to act, until you're ready to call the actual

01:01.530 --> 01:03.360
method that you want to test.

01:03.690 --> 01:06.540
After you call your method, you need to assert.

01:06.540 --> 01:09.300
You need to check if it's actually behaving correctly.

01:12.310 --> 01:18.550
So we're going to start by testing if get grades is actually able to retrieve the grades from the repository.

01:20.270 --> 01:25.490
The test annotation tells J Unit to treat the method that follows as a test.

01:25.580 --> 01:27.290
We're going to call the method.

01:27.950 --> 01:31.440
Get grades from repo.

01:31.460 --> 01:32.270
Test.

01:34.320 --> 01:34.970
Okay.

01:34.980 --> 01:39.090
Step one is to mock the data that's needed to carry out the unit test.

01:39.570 --> 01:44.430
The nice thing is telling the mock what data to return reads like English.

01:44.730 --> 01:52.620
For example, when the service calls, grade reports get grades, then it should return a list of grades.

01:52.650 --> 01:55.230
This translates to the following code.

02:18.140 --> 02:25.490
So inside the unit test, we're going to write when the service object calls the grade repository mock

02:26.030 --> 02:26.750
grades.

02:29.840 --> 02:33.410
Then we're going to want this to return an array list.

02:33.560 --> 02:37.880
Then return arrays, dot as list.

02:38.120 --> 02:42.470
And the array list that it returns will contain two objects.

02:43.310 --> 02:49.010
The first grade object will be Harry potions C minus.

02:51.660 --> 02:53.760
The second one will be her mining.

02:57.270 --> 02:58.500
Breath Mincy.

03:02.440 --> 03:03.280
A-plus.

03:08.350 --> 03:11.420
Now that we've prepared the data, the next step is to act.

03:11.440 --> 03:14.410
The next step is to call the method that you want to test.

03:14.440 --> 03:17.350
The method that we want to test is grade service.

03:17.680 --> 03:18.580
Get grades.

03:19.990 --> 03:24.820
And we want to test if it's actually able to retrieve the grades from the repo.

03:24.940 --> 03:29.710
We're going to store the result in an array list, list, grade.

03:30.520 --> 03:35.700
Result is equal to whatever comes from grade service get grades.

03:35.700 --> 03:41.100
And now that we've called the method that we want to test, the last step is to assert, is it actually

03:41.100 --> 03:42.300
behaving correctly?

03:42.510 --> 03:48.390
In other words, we're going to perform a sanity check that ensures grade service, get grades, is

03:48.390 --> 03:52.380
actually getting the grades from grade repo to get grades.

03:52.380 --> 03:56.610
And we can do that with an assertion we'll say assert equals.

03:58.160 --> 04:03.010
And here we compare the value that we're expecting against the actual value.

04:03.020 --> 04:10.370
So I expect the name and index zero to equal Harry and then the actual value is going to be the name

04:10.370 --> 04:11.570
at index zero.

04:15.910 --> 04:17.830
Let's perform another assertion.

04:18.010 --> 04:22.740
I expect the subject at index one to be arithmetic.

04:23.540 --> 04:27.560
And the actual value is going to be the subject at index one.

04:33.120 --> 04:34.320
Run your test.

04:37.350 --> 04:45.360
In the assertion passes this confirms that great service don't get grades is actually getting the grades

04:45.360 --> 04:47.700
from grade repo to get grades.

04:48.150 --> 04:53.640
Now before we continue, I want to emphasize that we didn't actually need to test grade service to get

04:53.640 --> 04:56.700
grades because the code here is very trivial.

04:56.700 --> 05:02.310
Which leads me to my rule of thumb only unit test methods that offer meaningful logic.

05:04.820 --> 05:10.910
I only unit tested get grades as an example of arranging the data that you need for your test.

05:11.150 --> 05:17.420
Acting on that data by calling the method you want to test and then making assertions to make sure that

05:17.420 --> 05:19.730
the method you're testing actually works.

05:20.090 --> 05:26.030
That being said, we're not going to be testing the following methods because the code inside is very

05:26.030 --> 05:28.730
simple and I'm pretty sure it works.

05:29.330 --> 05:31.400
That leads us to unit test number two.

05:31.430 --> 05:37.580
We're going to test if get grade index is able to return the correct index when it receives an ID.

05:37.760 --> 05:43.190
This method contains meaningful business logic, which makes it vulnerable to bugs, and it's really

05:43.190 --> 05:48.380
important to write a unit test that ensures it's behaving correctly as before.

05:49.410 --> 05:54.810
The test annotation tells J Unit to treat the method that follows as a test.

05:54.840 --> 05:59.280
And I'm going to call the method grade index test.

06:01.930 --> 06:06.070
Now step one is to mock the data that's needed to carry out the unit test.

06:07.490 --> 06:16.640
If you look inside of grade service dot get grade index it calls get grades and in turn get grades calls

06:16.640 --> 06:18.560
grade report get grades.

06:18.560 --> 06:22.010
So we need to mock the data that this method returns.

06:22.010 --> 06:24.680
We can just copy and paste what we had before.

06:24.680 --> 06:31.160
When grade repo get grades gets called, we wanted to return the following ArrayList.

06:32.170 --> 06:38.710
And for us to be able to test get grade index, we need to pass in a bunch of IDs.

06:39.280 --> 06:42.150
So we're going to need access to the data store.

06:42.160 --> 06:48.820
So we'll need to call grade service, dot get grades before we can even start testing, get to grade

06:48.820 --> 06:55.480
index because we need to grab the ID of each grade and we'll just store this in a result variable.

06:59.650 --> 07:00.550
Step one is done.

07:00.550 --> 07:03.910
We've already marked the data that's needed to carry out the tests.

07:04.240 --> 07:06.260
And now step two is to act.

07:06.280 --> 07:11.350
We need to call the get grade index function to make sure that it's working correctly.

07:11.650 --> 07:16.000
We'll say grade service dot get grade index.

07:16.270 --> 07:19.540
The first ID we're going to pass in is the one for Harry.

07:24.510 --> 07:28.020
And the second ID we're going to pass in.

07:29.380 --> 07:31.310
Is invalid.

07:31.330 --> 07:32.830
I'll just say one, two, three.

07:33.610 --> 07:41.860
So I'll store the return value here into a variable called valid, and I'll store the return value here.

07:41.860 --> 07:43.900
Any variable called not found.

07:46.490 --> 07:47.020
Okay.

07:47.480 --> 07:53.750
The last step is to assert is to check if get grid index is behaving correctly.

07:55.210 --> 07:56.920
We can do that with an assertion.

07:56.920 --> 08:02.830
So using assert equals, we expect the valid index to be zero.

08:03.370 --> 08:10.040
So when we give get grade index Harry's ID, we expect it to return an index of zero.

08:10.060 --> 08:11.080
But will it?

08:11.110 --> 08:12.370
Let's find out.

08:13.600 --> 08:15.370
And we'll make another assertion.

08:16.090 --> 08:16.480
Here.

08:16.480 --> 08:23.010
We expect that if we give a get grade index some random ID, then it's going to return constants dot

08:23.020 --> 08:23.830
not found.

08:23.830 --> 08:30.850
So we're going to make sure constants dot not found is what this not found variable equals.

08:37.070 --> 08:39.110
And we get a null pointer exception.

08:39.500 --> 08:41.510
What could that be?

08:41.540 --> 08:46.700
Well, thankfully, this leads me to something else and that we can set up breakpoints.

08:47.240 --> 08:52.700
So upon calling get grade index, we're getting a null pointer exception.

08:53.120 --> 08:55.760
What I'll do is I will debug my test.

08:58.920 --> 09:03.960
And I'm going to step inside, get grid index, press the step inside button.

09:05.900 --> 09:09.440
I'm going to step out and step back in.

09:11.570 --> 09:13.220
All right, step out.

09:13.220 --> 09:14.840
Step back in now.

09:15.170 --> 09:16.310
And it works.

09:16.700 --> 09:19.070
So this ID belongs to Harry.

09:20.500 --> 09:22.690
First step loops through get grades.

09:25.710 --> 09:26.610
Interesting here.

09:26.610 --> 09:28.590
It's calling get grade.

09:28.710 --> 09:30.570
If I put a breakpoint here.

09:34.300 --> 09:39.420
We completely forgot to mark what get grade should return when it's called.

09:39.430 --> 09:42.220
So what it's doing is it's returning a null.

09:46.440 --> 09:53.790
Get great returns and null and attempting to call a method from a null results in a null pointer exception.

09:54.030 --> 09:56.490
So we actually didn't finish step one.

09:56.490 --> 09:58.870
We mocked what a great report get.

09:58.950 --> 10:03.540
Grades should return, but we didn't mock what this method should return.

10:03.540 --> 10:06.030
So we're going to have to stop our test.

10:07.260 --> 10:08.370
And fix it up.

10:09.010 --> 10:11.950
So what I'm going to do just to keep things simple.

10:13.150 --> 10:14.110
Is.

10:16.000 --> 10:16.300
Here.

10:16.300 --> 10:17.530
We'll say grade.

10:18.550 --> 10:21.490
Grade is equal to a new grade.

10:22.270 --> 10:23.620
We'll copy this over.

10:26.570 --> 10:32.660
And instead of this returning an ArrayList of two grades, it will just return one there is no need

10:32.660 --> 10:33.680
to return to.

10:42.530 --> 10:44.510
And now I can mark the data that grade.

10:44.510 --> 10:47.600
Reporter Grade should return when it's called.

10:47.720 --> 10:48.980
So here we'll say.

10:50.270 --> 10:51.140
When.

10:51.620 --> 10:52.040
Grade.

10:52.040 --> 10:53.980
Repository dot.

10:53.990 --> 10:55.250
Get grade.

10:56.150 --> 10:57.560
At Index zero.

10:58.370 --> 10:59.900
Then it should return.

11:05.680 --> 11:06.400
The following.

11:06.400 --> 11:06.970
Great.

11:08.390 --> 11:08.810
Okay.

11:08.810 --> 11:10.370
We don't need this anymore.

11:11.970 --> 11:12.150
Here.

11:12.150 --> 11:14.400
We can just say Gray Dot, get ID.

11:15.420 --> 11:20.940
So now we've properly applied step one, which is to mark the data that's needed to carry out the unit

11:20.940 --> 11:21.510
test.

11:21.510 --> 11:25.860
When grade three get grades it's called, then it should return an array list.

11:25.860 --> 11:31.950
When grade report get grade gets called for an index of zero, then it should return the following grade.

11:32.220 --> 11:36.540
So now we've successfully marked the data that's needed to carry out the unit test.

11:36.990 --> 11:44.340
And here we're checking when grade service calls get grade index, is it actually able to get an index

11:44.340 --> 11:45.120
of zero?

11:45.420 --> 11:51.840
And then we're checking if grade service calls get grade index for an ID of 1 to 3, is it actually

11:51.840 --> 11:56.520
able to get a constant dot not found running our test?

11:58.900 --> 12:00.700
And it works out beautiful.

12:01.180 --> 12:06.160
So now test number three is to check if get grade by ID.

12:06.850 --> 12:10.270
Is returning the correct grade when you give it an ID.

12:10.690 --> 12:12.640
So we'll create a new test.

12:13.600 --> 12:20.140
We will call the test return grade by ID test.

12:20.320 --> 12:24.460
Step one is to mock the data that's needed to carry out this test.

12:24.460 --> 12:28.000
So we're just going to copy what we have over here.

12:31.480 --> 12:40.840
Because if you look inside of get grade by ID, it calls get grade index which in turn calls get grades

12:40.840 --> 12:42.270
as well as get grade.

12:42.280 --> 12:46.300
So we need to mock what these methods return when they are called.

12:48.060 --> 12:50.590
Now that we've prepared the data, the next step is to act.

12:50.610 --> 12:53.370
The next step is to call the method that you want to test.

12:53.400 --> 12:57.900
So first we're going to grab the grades ID and store it in a string variable.

12:57.930 --> 12:59.700
String ID is equal to grade.

13:00.030 --> 13:01.080
Get ID.

13:02.620 --> 13:10.090
Then we'll call great service dot get grade by ID and store the result in a grade variable.

13:10.570 --> 13:15.250
So here we'll say grade result is equal to the return value.

13:16.060 --> 13:22.690
The last step is to check if get grade by ID is behaving correctly and we can do that with an assertion

13:22.870 --> 13:30.880
we're going to use assert equals and we expect the grade that gets returned to equal the following object.

13:31.090 --> 13:37.600
When we pass in the following ID, we expect get grade by ID to return the correct results.

13:37.600 --> 13:43.510
The result that we're expecting is this grade, and we're going to see if that's the actual case.

13:48.740 --> 13:51.620
Nice get greyed by ID is working correctly.

13:52.880 --> 13:56.210
Now let's unit test our fourth method.

13:56.240 --> 14:01.040
We're going to check if submit grade is able to actually add a grade.

14:01.400 --> 14:03.770
This method contains two things to test.

14:03.800 --> 14:06.700
The first test is to verify the addition of a new grade.

14:06.710 --> 14:11.480
So like before, we're going to have to go back and create another test.

14:13.200 --> 14:16.320
We'll say public void.

14:17.090 --> 14:18.770
And grade.

14:19.600 --> 14:20.350
Test.

14:23.290 --> 14:29.110
And like before, we need to mock what get grades and get grade return so we can just use the following

14:29.110 --> 14:30.550
code to prepare the data.

14:32.350 --> 14:36.590
This test will check if submit grade calls add grade.

14:36.610 --> 14:38.890
If the index isn't found.

14:38.890 --> 14:42.240
So the next step is to call the method that you want to test.

14:42.250 --> 14:45.220
We're going to create a new grade that doesn't already exist.

14:45.220 --> 14:46.620
We'll say grade.

14:46.720 --> 14:47.800
New grade.

14:48.690 --> 14:51.450
Is equal to a new grade object.

14:51.690 --> 14:53.100
We'll say her mining.

14:54.850 --> 14:55.820
Arithmetic.

14:59.540 --> 15:00.410
A-plus.

15:01.320 --> 15:03.000
And then we'll submit the grade.

15:03.210 --> 15:04.560
Grade service.

15:05.370 --> 15:07.110
Dart submit grade.

15:08.310 --> 15:08.970
New grid.

15:12.180 --> 15:14.670
And how can we test if this works?

15:14.670 --> 15:19.140
How can we test if submit grade is actually calling add grade.

15:21.550 --> 15:25.690
The Verify assertion can verify how many times something happened.

15:25.840 --> 15:27.460
It accepts three arguments.

15:27.460 --> 15:33.280
The mock how many times you expect a mock method to be called as well as the method.

15:35.650 --> 15:37.840
We're going to verify that.

15:38.170 --> 15:44.650
Ad grade gets called at least once when we submit a new grade that doesn't exist in our data store.

15:44.860 --> 15:46.510
So we'll say verify.

15:47.290 --> 15:50.590
First you pass in your mock grade repo mock.

15:51.430 --> 15:54.550
We're going to check if the method gets called once.

15:55.720 --> 15:56.480
Time's not.

15:56.500 --> 15:57.460
Time out.

15:57.610 --> 16:03.970
The wanted number of invocations is one and we're going to check if add grade.

16:05.400 --> 16:08.490
New grade gets called at least once.

16:09.670 --> 16:10.690
Run your test.

16:12.950 --> 16:14.020
And it does.

16:14.030 --> 16:17.390
So we can rest assured that submit grade is working correctly.

16:17.390 --> 16:23.030
When you submit a new grade that doesn't exist inside of your data store, then it's going to call add

16:23.030 --> 16:23.690
grade.

16:24.140 --> 16:25.100
All right.

16:25.100 --> 16:32.480
Unit test number five is to test if submit grade is updating an existing grade.

16:33.760 --> 16:37.330
Like before I'm going to create another test.

16:37.840 --> 16:42.130
We'll say public void update grade test.

16:43.670 --> 16:47.030
And we can prepare the data in much the same way.

16:49.340 --> 16:53.330
When this gets called, we wanted to return an array list of one grade.

16:53.360 --> 16:56.660
When this gets called, we want it to return that same grade.

16:56.660 --> 17:01.340
And now step number two is to actually call the method that you want to test, the method that you're

17:01.340 --> 17:02.540
actually interested in.

17:02.540 --> 17:06.200
What we're going to do is we'll say grade service.

17:07.080 --> 17:11.100
Dot submit grade and we'll resubmit the grade.

17:11.100 --> 17:20.280
But before that we'll say grade dot set score and we'll set it equal to an A minus.

17:23.370 --> 17:27.380
And once again, we can verify how many times something happened.

17:27.390 --> 17:29.850
We're going to verify if.

17:32.270 --> 17:36.890
Grade repo marked update grade gets called at least once.

17:37.740 --> 17:40.020
So the muck is great repository.

17:42.050 --> 17:43.580
We're going to check.

17:43.760 --> 17:51.920
The wanted number of invocations is one and we're going to check if update grade for the following grade

17:51.920 --> 17:53.420
at index zero.

17:54.660 --> 17:59.340
Does this function get called when we submit an existing grade?

18:00.390 --> 18:01.380
Run your test.

18:03.100 --> 18:04.330
And it does.

18:05.820 --> 18:11.850
This confirms that when you pass in an existing grade and to submit grade, it calls the appropriate

18:11.850 --> 18:12.500
method.

18:12.510 --> 18:18.540
When you pass a method that doesn't exist already inside of the data store inside of submit grade,

18:18.540 --> 18:20.880
then it's going to call the add grade method.

18:21.120 --> 18:22.230
All right.

18:22.260 --> 18:25.410
If I were to run every single test in my class.

18:28.500 --> 18:34.430
They all pass, which confirms that every method inside of grade service is working correctly.

18:34.440 --> 18:38.820
We tested submit grade, get grade by DX, get grade index.

18:38.820 --> 18:43.830
We also test it gets grades which we really shouldn't have because it was really trivial.

18:43.830 --> 18:49.440
But anyways, we can rest assured that our application or our great service class for that matter,

18:49.440 --> 18:51.000
doesn't have any bugs.

18:51.420 --> 18:56.280
In this lesson, you wrote a unit test for every meaningful method inside of grade service.

18:56.280 --> 19:02.250
The passing test cases imply that our methods are behaving correctly, and we can rest assured that

19:02.250 --> 19:03.900
there aren't any bugs.
