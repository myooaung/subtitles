WEBVTT

00:00.420 --> 00:00.960
All right.

00:00.960 --> 00:01.630
Welcome back.

00:01.650 --> 00:04.450
Now we will implement the update functionality.

00:04.470 --> 00:10.920
The first step is to get each update button to make a request on an empty path.

00:11.650 --> 00:19.750
So here is the update button that will be a part of each row that gets generated and every update button

00:19.750 --> 00:21.700
must make a get request.

00:21.700 --> 00:29.560
We will use the family attribute h ref to make a request and you can specify a URL using the familiar

00:29.560 --> 00:30.790
link expression.

00:32.110 --> 00:37.630
The URL is context relative, so we can just specify the empty path and that should be enough.

00:37.840 --> 00:39.970
Let's rerun our code.

00:56.230 --> 00:57.100
Go here?

00:57.280 --> 00:59.290
Actually, we'll have to resubmit some data.

00:59.620 --> 01:04.600
We'll say furniture, couch, 350.9.

01:05.050 --> 01:05.650
Any date?

01:05.650 --> 01:06.180
Really?

01:07.420 --> 01:08.830
Okay, looking good.

01:08.830 --> 01:12.430
If I press the update bone, it should take me back to the home page.

01:12.760 --> 01:13.900
And it does.

01:16.080 --> 01:21.720
Now the updated button must pass a parameter into the request that identifies the object in the row.

01:22.380 --> 01:23.160
All right.

01:23.160 --> 01:24.490
In order to do that.

01:24.540 --> 01:31.620
Well, before we pass a parameter into the request, we're missing one very important field.

01:31.620 --> 01:34.410
Different objects can have the same category.

01:34.410 --> 01:35.730
They can have the same name.

01:35.730 --> 01:38.850
They can have the same price, discount or order date.

01:39.240 --> 01:46.020
So what we need to do is give each object a field that is going to be unique to it.

01:46.470 --> 01:50.010
And so let's remove the full constructor to avoid confusion.

01:50.010 --> 01:57.030
And whenever a new object is created using the Item constructor, what we're going to do is set that

01:57.030 --> 02:01.410
object ID equal to a universally unique identifier.

02:05.830 --> 02:10.060
And then, as always, generate the getters and setters.

02:10.980 --> 02:11.570
OC.

02:12.250 --> 02:17.170
And going back to task two, the update button must pass a parameter into the request that identifies

02:17.170 --> 02:18.790
the object in the row.

02:19.810 --> 02:26.590
So back here, the update button that gets pressed, it's going to pass back an ID parameter.

02:28.100 --> 02:33.860
That equals the ID of the object that was used to generate this table row.

02:34.670 --> 02:36.020
Item dot ID.

02:37.680 --> 02:38.130
Okay.

02:38.130 --> 02:39.780
All our brackets are in order.

02:39.780 --> 02:41.070
I think we're good to go.

02:41.550 --> 02:41.970
All right.

02:41.970 --> 02:43.770
And now if I go back.

02:46.580 --> 02:48.360
Submit furniture.

02:48.380 --> 02:49.340
Couch.

02:55.220 --> 02:55.530
Okay.

02:55.580 --> 02:56.840
If I press update.

02:58.730 --> 03:03.580
It returns the ID of the object that was used to generate the row OC.

03:04.480 --> 03:11.560
Task three is before returning the form view, we need to pre populate the form inputs with the values

03:11.560 --> 03:12.850
from the object.

03:14.310 --> 03:16.470
So our handler method.

03:18.230 --> 03:19.220
Over here.

03:19.850 --> 03:21.620
Let's remove all the breakpoints.

03:25.310 --> 03:31.700
Our Handler method, it needs to receive that ID as a request parameter request per m.

03:37.370 --> 03:42.050
And that request per diem is not always going to be required.

03:42.950 --> 03:48.500
But the request parameter that we will expect on updates will be string ID.

03:51.040 --> 03:56.830
And now the model attribute that we're going to add depends on whether we can find an object in our

03:56.830 --> 04:00.280
data store that matches the ID that was provided.

04:00.880 --> 04:04.300
So down here, I'm going to create a new method.

04:04.390 --> 04:09.880
We're going to say public int get index from ID.

04:11.630 --> 04:13.490
It will receive a string ID.

04:16.300 --> 04:21.460
And now here I will create a for loop that runs through the size of our items.

04:21.460 --> 04:22.570
Array list items.

04:22.570 --> 04:23.560
Dot size.

04:24.680 --> 04:30.860
And now we're going to check if the item at the current index that's being iterated through does its

04:30.860 --> 04:31.700
ID.

04:33.290 --> 04:36.080
Equal the IED that was passed in.

04:37.010 --> 04:39.710
If that's the case, we will return the index.

04:42.170 --> 04:45.080
Otherwise we will return -10,000.

04:45.590 --> 04:53.180
And instead of having loose integers in our code, I'll go over to constants dot java and I will define

04:53.180 --> 04:58.130
a constant that says public static final.

04:58.910 --> 05:06.770
The constant will be an integer called not found and it's going to equal an integer if -10,000.

05:07.700 --> 05:14.150
So instead of having a loose integer, we'll just say constants dot not found.

05:14.600 --> 05:16.220
And then here we're going to say.

05:18.750 --> 05:19.410
If.

05:19.920 --> 05:30.270
We cannot find an index for the ID, so if the value from this function is constantly not found, so

05:30.270 --> 05:36.180
if it's not able to find an object that matches the ID, then what we're going to do is just add a new

05:36.180 --> 05:37.460
object to the model.

05:37.470 --> 05:40.380
So we'll say new item.

05:41.980 --> 05:45.460
Otherwise you will return the object at the found index.

05:45.460 --> 05:52.180
And instead of calling this function twice, we'll just say int index is equal to get index from ID.

05:53.760 --> 05:59.080
Then we'll say if the index is equal to constants not found, return a new object.

05:59.100 --> 06:02.160
Otherwise, return the object that we found.

06:02.190 --> 06:03.930
Return items.

06:04.140 --> 06:04.620
Dot.

06:04.620 --> 06:05.310
Get.

06:09.080 --> 06:09.470
Okay.

06:09.470 --> 06:10.880
Let's try this out.

06:16.280 --> 06:18.920
Will submit the usual coach.

06:25.320 --> 06:26.940
The press updates.

06:27.800 --> 06:28.780
Beautiful.

06:30.730 --> 06:36.820
The update button passed back an ID parameter that identifies the object that was used to create that

06:36.820 --> 06:37.360
row.

06:39.200 --> 06:40.160
The Handler method.

06:40.160 --> 06:46.280
Upon intercepting the get request, it received an ID parameter, and then the handler method was able

06:46.280 --> 06:54.350
to find an object whose ID matches the ID parameter, therefore adding that pre-existing object to our

06:54.350 --> 06:54.970
model.

06:54.980 --> 07:01.430
And just as we're about to return the form, the object that we're passing into the model is now a form

07:01.430 --> 07:02.780
backing object.

07:02.990 --> 07:09.920
That means every single element inside of our form is bound to a field in the form backing object.

07:09.920 --> 07:16.400
Because all of the fields are going to be pre-populated, then our elements are going to be pre populated

07:16.400 --> 07:17.120
as well.

07:17.150 --> 07:18.890
This is just great.

07:21.040 --> 07:21.600
Okay.

07:21.610 --> 07:24.250
Now we're done.

07:24.250 --> 07:26.680
Task three if the submitted item.

07:26.710 --> 07:28.120
Oh, my bad.

07:28.800 --> 07:34.620
If the submitted item already exists, your post handler method will seek to update the data store instead.

07:34.860 --> 07:35.700
All right.

07:35.700 --> 07:39.420
This is yelling at us to add some logic inside of handle.

07:41.700 --> 07:47.430
And so upon pressing submit all of the data inside the form backing object is going to be sent back

07:47.430 --> 07:53.190
as part of the post request handle submit intercepts, the post request and here we're going to use

07:53.190 --> 07:57.840
the ID of that item object to check and see if it already exists.

07:57.840 --> 08:03.990
So int index will say get index from id item dot get id.

08:06.430 --> 08:16.360
And if index is equal to constants not found, only then do we want to say items dot add item.

08:17.110 --> 08:20.620
Otherwise if it does actually find the index.

08:22.310 --> 08:23.720
We'll say items.

08:24.770 --> 08:28.060
And we'll update the item at that index.

08:31.530 --> 08:32.250
Okay.

08:32.950 --> 08:34.800
I think now we're ready to test it out.

08:38.150 --> 08:39.740
Will choose furniture.

08:39.980 --> 08:40.790
Couch.

08:40.790 --> 08:41.870
300 bucks.

08:41.870 --> 08:43.490
50.99.

08:46.520 --> 08:48.200
Then we'll try to update it.

08:48.590 --> 08:53.300
We'll give them a better discount, let's say 100 and $250.

08:55.130 --> 08:58.910
And it adds another row to our table instead of updating it.

08:59.570 --> 09:03.370
We can debug the runtime to understand why this is happening.

09:03.380 --> 09:06.260
So if I were to stop.

09:08.520 --> 09:13.320
Put breakpoints all over our setters.

09:21.770 --> 09:23.330
As well as the constructor.

09:24.010 --> 09:27.040
Some breakpoints inside of handle submit.

09:30.180 --> 09:32.640
We run the application and debug mode.

09:33.670 --> 09:35.380
We can figure out what's going on.

09:35.410 --> 09:41.650
First, I will mute the breakpoints because I only want to see what's happening once we start updating.

09:44.400 --> 09:50.580
So once again we will submit a couch with the usual price May 5th.

09:52.720 --> 09:54.160
No press updates.

09:55.410 --> 10:00.060
Remember this id ff0d6ec.

10:00.750 --> 10:03.600
All right, I'll re-enable the breakpoints.

10:04.870 --> 10:06.070
And press submit.

10:09.000 --> 10:09.230
Okay.

10:09.420 --> 10:15.180
And so upon pressing submit, it's going to initiate a post request that carries all of this data as

10:15.180 --> 10:15.960
payload.

10:17.000 --> 10:23.900
The Handler method handle submit is going to receive this post request, but just before this logic

10:23.900 --> 10:30.470
starts to execute, spring boot actually creates a new item object behind the scenes using your empty

10:30.470 --> 10:31.280
constructor.

10:31.640 --> 10:33.050
But there is an issue.

10:33.080 --> 10:37.220
It assigns that new item object an entirely new ID.

10:37.670 --> 10:41.690
So this id of f f is 0d6 now means nothing.

10:45.230 --> 10:48.230
Then it's going to update all of our other fields.

10:52.570 --> 11:00.340
But now it doesn't matter because it's going to check if this ID for item matches any of the IDs for

11:00.340 --> 11:02.190
the objects in the array list.

11:02.200 --> 11:03.920
Clearly it doesn't.

11:03.940 --> 11:08.410
So it's going to add this object instead.

11:13.670 --> 11:14.930
All right.

11:28.110 --> 11:28.330
Okay.

11:28.410 --> 11:35.490
So the issue here is that our form, it sends back all of this data, but it doesn't send back the ID.

11:36.810 --> 11:42.390
So Spring Boot creates an entirely new ID and it's not able to find this object in our data store.

11:42.870 --> 11:44.070
What we need to do.

11:44.990 --> 11:47.360
Is add another input to our reform.

11:48.650 --> 11:49.580
That's hidden.

11:50.090 --> 11:52.610
We'll say input type is equal to hidden.

11:54.210 --> 12:01.110
And now this input is going to be bound to our ID field and that should fix our bug.

12:02.730 --> 12:04.150
Go back to inventory.

12:04.170 --> 12:08.610
Now I'll press the now I'll re-enable the breakpoints.

12:10.500 --> 12:11.790
Press the update button.

12:12.330 --> 12:16.770
It passes back an ID that identifies the object we pressed update on.

12:16.800 --> 12:24.090
I'm going to update the discount to 3499 Press Submit item, but let me make sure all the breakpoints

12:24.090 --> 12:25.140
are there real quick.

12:28.800 --> 12:29.400
They are.

12:31.550 --> 12:32.450
Wonderful.

12:32.570 --> 12:39.170
Store comptroller intercepts the post request, and right before this logic executes, it creates a

12:39.170 --> 12:43.280
new object of the item class using our empty constructor.

12:43.310 --> 12:47.720
Unfortunately, it assigns this object an entirely new ID.

12:48.770 --> 12:53.900
And then it's going to update every single field in our object with payload from the post request.

12:55.720 --> 12:59.050
It updates the category and updates the date.

12:59.680 --> 13:01.180
It updates the discount.

13:01.910 --> 13:07.250
And now that the form is sending back an ID as part of a post request, we're able to override this

13:07.250 --> 13:08.990
value with the correct ID.

13:09.790 --> 13:10.720
Beautiful.

13:11.600 --> 13:14.180
AF is 090577.

13:16.270 --> 13:19.180
We'll update the name, we'll update the price.

13:19.570 --> 13:25.360
And now it's going to check if the ID matches any of the objects IDs inside of the array list.

13:25.390 --> 13:26.890
It definitely does.

13:29.240 --> 13:32.750
And so it's going to update the object at that index instead.

13:35.090 --> 13:39.260
Redirect the user to make a get request on slash inventory.

13:40.070 --> 13:46.640
Get inventory gets called and it's going to add the updated array list to our model and return the inventory

13:46.640 --> 13:47.090
view.

13:49.200 --> 13:49.950
Beautiful.

13:50.430 --> 13:55.440
Now, there are still many more tasks that we need to implement.

13:55.890 --> 13:58.550
This is actually a new topic that we haven't covered.

13:58.560 --> 14:05.490
So I'm going to stop right here and in the next video we'll cover the remainder of the solution.
