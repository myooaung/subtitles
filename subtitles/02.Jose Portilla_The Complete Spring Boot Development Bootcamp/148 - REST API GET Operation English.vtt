WEBVTT

00:00.630 --> 00:04.020
The get operation is used to access a resource.

00:04.970 --> 00:10.910
Rest API defines operations that can manipulate resources, one of them being get which can retrieve

00:10.910 --> 00:18.890
a resource post which creates a resource put which updates one and delete deletes a resource.

00:19.700 --> 00:23.600
In this lesson, your rest API will perform the get operation.

00:24.950 --> 00:26.250
Let's go through the process.

00:26.270 --> 00:31.430
If a user if a consumer wants to access a resource, they will make a get request.

00:31.460 --> 00:35.120
The Yury identifies the resource to be accessed.

00:35.890 --> 00:40.510
The API defines an operation that is capable of accessing that resource.

00:40.540 --> 00:46.510
It will use the information provided by the URI to access the resource in question.

00:47.250 --> 00:50.700
And it will send back the response in JSON format.

00:50.910 --> 00:54.960
JSON represents that data in the form of key value pairs.

00:56.650 --> 01:03.130
Typically the API would retrieve the resources from some kind of external database, but for our purposes,

01:03.130 --> 01:08.350
the contact resources are actually inside of the same application in the array list.

01:08.470 --> 01:16.330
So our rest controller is going to act as the mediator between the resources that are going to be here

01:16.330 --> 01:18.910
and the consumer that needs access.

01:19.240 --> 01:26.950
The array list currently doesn't have any data inside of it, and because we don't have any create methods

01:26.950 --> 01:31.270
just yet, what we're going to do is pre populate it with some data.

01:31.420 --> 01:36.970
So here I'm going to say equal to arrays dot as list.

01:38.030 --> 01:42.170
And we'll create one contact object over here.

01:43.010 --> 01:45.560
We will have an idea of 1 to 3.

01:46.440 --> 01:48.690
We'll call this guy, Jon Snow.

01:49.650 --> 01:56.670
And we'll just give him a random phone number of four one, three, five, three, two.

01:57.060 --> 01:58.980
We'll just say nine, four, three, whatever.

01:59.960 --> 02:02.990
We'll create another contact object here.

02:02.990 --> 02:03.890
We'll say four or five.

02:03.890 --> 02:04.670
Six.

02:05.000 --> 02:06.830
Tyrion Lannister.

02:09.050 --> 02:10.850
And just change the phone number up.

02:10.850 --> 02:14.750
We'll say 6134428213.

02:14.900 --> 02:17.390
And let's create another resource.

02:20.980 --> 02:22.360
Seven, eight, nine.

02:22.390 --> 02:23.560
The Hound.

02:25.170 --> 02:30.120
8973425642, whatever.

02:31.110 --> 02:38.010
So the first thing we need to do is when a user makes a gut request on slash contact.

02:38.040 --> 02:39.960
So here we'll say gut mapping.

02:41.700 --> 02:48.810
When a user makes a request on slash contact, the URI they specify is going to include an ID.

02:49.320 --> 02:53.100
As we wrap the ID in curly brackets.

02:54.640 --> 03:00.550
That means we expect the consumer to define a variable inside of their path.

03:02.050 --> 03:04.240
The handler method that receives this request.

03:04.240 --> 03:05.380
Public void.

03:05.560 --> 03:07.000
Get contact.

03:07.970 --> 03:09.980
For now is not going to return anything.

03:09.980 --> 03:16.040
We'll get back to this and it's going to access the variable inside of the path as a string.

03:17.220 --> 03:18.960
So here we'll say path variable.

03:19.550 --> 03:21.570
String ID.

03:24.260 --> 03:28.040
For now, we're just going to print the ID that gets passed into the U.S..

03:31.520 --> 03:33.110
Seem to have a mistake.

03:33.200 --> 03:34.910
Oh, silly me.

03:40.100 --> 03:44.930
Now, before starting this recording, I took the liberty of opening up a terminal.

03:44.960 --> 03:48.740
If you're using a Windows computer, open up your command prompt.

03:48.950 --> 03:56.150
And from here, the terminal will act as a consumer by making a get request using the Curl Command.

03:57.280 --> 04:01.660
Now, if a consumer wants to access a resource, they need to specify a URI.

04:01.690 --> 04:05.180
The URI identifies the location of a resource.

04:05.200 --> 04:09.400
What we're going to do is say local host 8080.

04:10.850 --> 04:12.140
Slash contact.

04:12.230 --> 04:13.250
And.

04:13.250 --> 04:19.520
And now the next thing we input, our rest API is going to interpret as a path variable.

04:21.180 --> 04:24.270
We want to access the resource with the following ID.

04:28.060 --> 04:29.790
Now nothing really happens.

04:29.800 --> 04:37.630
It prints the path variable and in accordance with the rest API guideline, the URI should identify

04:37.630 --> 04:39.790
the location of a resource.

04:42.040 --> 04:47.140
But right now the API doesn't actually do anything upon receiving the location.

04:47.140 --> 04:53.860
So based on the path variable, we need to return the JSON representation of the resource that they're

04:53.860 --> 04:54.760
requesting.

04:55.450 --> 04:58.330
Let's talk about the response body annotation.

04:58.480 --> 05:03.490
The response body annotation serialize an object into JSON.

05:05.450 --> 05:09.260
If we go back here and return a contact object.

05:12.110 --> 05:13.400
Let's just import it.

05:15.240 --> 05:22.440
Response body is going to serialize the object that we return into a JSON of key value pairs.

05:26.050 --> 05:26.380
No.

05:26.380 --> 05:32.170
This annotation can be applied at the class level or it can be applied at the level of each handler

05:32.170 --> 05:32.860
method.

05:32.890 --> 05:38.950
For now, we're just going to apply it at the level of this method, such that whatever object this

05:38.950 --> 05:42.850
handler method returns needs to be converted into JSON.

05:43.330 --> 05:50.410
Now, JSON is a universal way of communicating with other systems and the object we return must be serialized

05:50.410 --> 05:53.180
into JSON before being sent back to the consumer.

05:53.200 --> 05:56.830
So let's go ahead and just copy and paste.

05:56.830 --> 06:01.650
The first object will set up some methods inside the service class after.

06:01.660 --> 06:03.700
So let's just return new contact.

06:03.700 --> 06:04.870
John Snow.

06:08.660 --> 06:09.710
Back to our terminal.

06:09.710 --> 06:11.840
We will use Curl to make a request.

06:13.290 --> 06:20.340
Here you can see the object being returned was serialized into JSON before being returned thanks to

06:20.340 --> 06:22.440
the response body annotation.

06:23.720 --> 06:30.470
If you don't include it, our app is going to send back a plain old Java object and the recipient will

06:30.470 --> 06:32.320
just have no idea what to do with it.

06:32.330 --> 06:37.310
So if we were to curl that, it just shows an error not found.

06:37.580 --> 06:43.340
So long story short, JSON is the universal way of communicating with other systems.

06:43.460 --> 06:45.800
Which brings me to my next point.

06:46.340 --> 06:52.300
Rest controller is basically the same thing as the controller annotation plus response body.

06:52.310 --> 06:58.880
So if you're building a rest API instead of including response body to serialize the returned object

06:58.880 --> 07:05.000
into JSON, you can just define your controller class as a rest controller and avoid that step.

07:08.190 --> 07:12.960
So remember that I told you response body can also be applied at the class level.

07:14.790 --> 07:19.560
And instead of doing that, we can just skip that step and just say Rest controller.

07:22.450 --> 07:26.720
This naming also befits the fact that we're building a rest API.

07:26.740 --> 07:29.680
So if I were to retry this, we'll curl.

07:30.860 --> 07:31.370
Boom.

07:32.080 --> 07:39.910
The response body annotation that exists behind the scenes serialize our object into JSON before sending

07:39.910 --> 07:40.600
it back.

07:40.630 --> 07:45.670
Here we can see that the JSON is just a bunch of key value pairs.

07:49.040 --> 07:50.030
And one more thing.

07:50.030 --> 07:52.690
It's not just the object that will be returning.

07:52.700 --> 07:59.840
We're going to return a response entity which allows us to respond with data as well as a status code.

08:01.680 --> 08:06.870
So here among the official Mozilla documentation for HTTP status codes.

08:06.960 --> 08:09.480
These status codes, in my opinion, are useless.

08:09.480 --> 08:11.280
You will almost never, ever use them.

08:11.280 --> 08:15.420
So let's just jump over to the 200 category for now.

08:16.330 --> 08:22.270
Now, any response that we send back in the 200 category means that the request was good and it was

08:22.270 --> 08:23.140
successful.

08:23.410 --> 08:26.670
200 OC is the most common.

08:26.680 --> 08:31.030
It means, hey, we got your request and it was successful.

08:31.510 --> 08:39.610
201 is most often used with post requests because what it means is, Hey, we got your request.

08:39.610 --> 08:44.230
It was successful and a new resource was created as a result.

08:45.690 --> 08:48.900
Now 202 means, hey, we got your request.

08:48.900 --> 08:49.800
It's a good request.

08:49.800 --> 08:54.960
It was successful and we're cuing it for processing, so we're not going to fulfill your requests right

08:54.960 --> 08:55.500
away.

08:55.530 --> 08:57.240
It's going to happen later.

08:57.540 --> 09:00.000
And another common one is 204.

09:00.030 --> 09:02.340
This means, hey, we got your request.

09:02.340 --> 09:05.790
It was successful, but there's no data to really send back.

09:05.790 --> 09:09.090
This would most often be used in a delete request.

09:10.200 --> 09:11.340
Now there are others.

09:11.340 --> 09:16.020
You can feel free to go through them yourself, but the ones I just presented are pretty much the most

09:16.020 --> 09:17.100
common ones.

09:17.580 --> 09:23.190
All right, so we'll go back here, and instead of returning just the object, we're going to return

09:23.280 --> 09:24.960
a response entity.

09:26.740 --> 09:31.700
And inside of generics, you can specify what type of data we are going to be sending back.

09:31.720 --> 09:34.240
We're going to be sending back a contact.

09:35.800 --> 09:42.310
Now in this case, your contact service implementation already contains a find index by ID function.

09:42.340 --> 09:44.980
I set it up for you in the interest of time.

09:45.390 --> 09:48.160
Integer streams of something already covered in the Java course.

09:48.160 --> 09:52.870
So I'm not going to go through them here, but it doesn't really matter if you use streams or you could

09:52.870 --> 09:55.250
have also used a regular for loop over here.

09:55.270 --> 09:59.950
In any case, all it does is it goes through your contacts and finds one that matches the ID.

09:59.980 --> 10:01.480
You can use a loop if you want.

10:01.630 --> 10:08.650
Inside the interface, what we're going to do is bind any implementation into defining a get contact

10:08.650 --> 10:09.910
by ID method.

10:10.120 --> 10:11.230
Contact.

10:12.010 --> 10:15.580
Get contact by ID.

10:24.910 --> 10:28.640
And then we're going to override this method inside of the implementation.

10:28.660 --> 10:31.930
We can override get contact by ID.

10:32.590 --> 10:37.720
And here I can just return contact, repository, dot, get contact.

10:38.080 --> 10:42.760
And we're going to get the contact at the index based on the ID that's provided.

10:45.060 --> 10:48.720
Now back here, I can say contact.

10:49.080 --> 10:51.810
Contact is equal to contact.

10:51.810 --> 10:58.170
Service dot get contact by ID and then I'm going to return a response entity.

10:58.710 --> 11:01.200
A new response entity.

11:01.200 --> 11:05.850
And this response entity is going to encapsulate an object.

11:06.510 --> 11:13.110
The object being returned will be serialized into JSON as it's being sent back to the consumer.

11:13.260 --> 11:21.390
And we're also going to send back a status code of OC, so a HTTP status dot OC and the status code

11:21.390 --> 11:27.630
OC translates to 200 to indicate that we received the request and it was successful.

11:28.200 --> 11:29.040
All right.

11:29.130 --> 11:32.490
Rerunning my application in debug mode.

11:43.510 --> 11:44.410
Back to our terminal.

11:44.410 --> 11:46.720
We will use Carl to make a request.

11:47.560 --> 11:51.160
If a consumer wants to access a resource, need to specify a URI.

11:51.190 --> 11:53.940
The URI identifies the location of a resource.

11:53.950 --> 11:59.110
The following URI identifies the location of a contact resource with ID of 1 to 3.

12:00.900 --> 12:06.630
And the API defines an operation that is capable of accessing the resource in question.

12:06.810 --> 12:13.800
It uses the information provided by the URI, which is a string ID of 1 to 3 to try and find the resource

12:13.800 --> 12:15.360
inside of the array list.

12:16.290 --> 12:19.540
It should be able to find it all right.

12:19.560 --> 12:21.330
It was able to get the resource.

12:21.330 --> 12:26.580
And now here the resource is going to be serialized into JSON before being sent back.

12:27.280 --> 12:32.980
So those are going to be your key value pairs and you can see that it sends back a status of 200.

12:37.680 --> 12:44.000
Now as the consumer, I see that data has been returned, but I can't really see the status code.

12:44.010 --> 12:46.170
So what we're going to do is go to Chrome.

12:47.750 --> 12:49.550
And we're going to make that same request.

12:49.550 --> 12:55.400
We'll say local host slash 80, 80 slash contact, slash, one, two, three.

13:02.420 --> 13:04.760
Here we see the JSON that gets sent back.

13:06.220 --> 13:08.770
If we go to the developer tools, more tools.

13:08.770 --> 13:11.710
Developer tools go to the network.

13:15.140 --> 13:18.200
Press refresh, we see a status of 200.

13:18.560 --> 13:20.390
Now, this is a bit inconvenient.

13:20.390 --> 13:24.590
So in the next video, we'll be downloading a software to make requests from.
