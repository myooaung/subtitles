WEBVTT

00:00.060 --> 00:01.950
Welcome to Workbook 2.11.

00:01.950 --> 00:08.970
I already went ahead and launched the Starter Project and Task one is to create a class for plain old

00:08.970 --> 00:10.640
Java record objects.

00:10.650 --> 00:16.500
The class will have three fields, so I'll go ahead and create a new class.

00:17.260 --> 00:29.170
Called Record Java and paste in the fields generate the typical getters and setters generate the constructor.

00:31.770 --> 00:32.820
Simple enough.

00:33.440 --> 00:35.870
Task two is before returning the view.

00:35.870 --> 00:38.090
Add the following objects to the model.

00:38.090 --> 00:41.810
So we choose to populate our model with the following data.

00:57.500 --> 01:01.820
Now we'll just say model dot ad attributes.

01:02.750 --> 01:08.870
We're going to add an attribute called the records that maps to our records array list.

01:12.030 --> 01:18.840
Task three is under the header and records of the HTML credit table where the first table row has headers,

01:18.840 --> 01:24.570
and every row that follows is generated based on what is probably a timely fluke.

01:24.960 --> 01:26.280
So we'll go here.

01:27.350 --> 01:29.000
We'll create a new table.

01:35.060 --> 01:37.340
That table is going to have one row.

01:39.110 --> 01:40.820
With three headers.

01:46.680 --> 01:51.120
The first header will be or four headers I should say.

01:51.210 --> 01:54.510
And they are item revenue, cost and profits.

01:57.850 --> 01:58.510
Um.

02:00.120 --> 02:00.870
Item.

02:01.870 --> 02:02.650
Revenue.

02:04.780 --> 02:07.810
Costs and profits.

02:08.980 --> 02:09.730
Sweet.

02:11.920 --> 02:13.800
Task Force is using a Tamiflu app.

02:13.810 --> 02:19.570
Your table must generate as many arrows as there are objects in their records list.

02:19.570 --> 02:24.370
So every table row that follows is going to be generated based on a loop.

02:25.180 --> 02:27.190
Here we're going to run a loop.

02:27.330 --> 02:35.320
Finally, each and this loop is going to run through every single record inside of the records array

02:35.320 --> 02:36.040
list.

02:38.350 --> 02:44.890
That we can grab using a variable expression, and for every record that it loops through, it's going

02:44.890 --> 02:46.690
to generate a table row.

02:46.690 --> 02:52.240
And that table row is going to have how many cells for data cells?

02:59.040 --> 03:05.070
Each data cell will display one of the fields of the current record that's being iterated through.

03:05.490 --> 03:08.280
So this data cell will display the text.

03:09.780 --> 03:12.840
For the record, Dot.

03:14.390 --> 03:17.480
Item Revenue and cost record item.

03:23.440 --> 03:25.360
Record revenue.

03:27.650 --> 03:29.780
Record cost.

03:31.730 --> 03:33.920
And there isn't a fourth field.

03:33.920 --> 03:40.070
But here it tells us that for the profit rose final leaf allows you to subtract using the minus operator.

03:40.280 --> 03:42.770
So here we can say leaf text.

03:47.960 --> 03:50.990
Record revenue minus.

03:51.860 --> 03:53.870
Record cost.

03:55.810 --> 03:56.340
Okay.

03:56.980 --> 03:58.030
Let's try it out.

03:58.390 --> 03:59.270
Is our app running?

03:59.290 --> 04:00.520
No, it is not.

04:19.680 --> 04:20.280
All right.

04:20.280 --> 04:25.930
We have a table with as many rows as there is data and the array list.

04:25.950 --> 04:29.070
Let's just give it the typical border.

04:30.630 --> 04:32.340
Which equals solid.

04:33.090 --> 04:36.210
And with equal to 100%.

04:37.140 --> 04:39.150
Just so that it's more legible.

04:39.750 --> 04:41.070
Okay, great.

04:41.460 --> 04:46.710
Now, in Task five, it tells us that we shouldn't use double to store currency because it carries to

04:46.710 --> 04:54.060
a certain precision, whereas big decimal is an exact way of representing numbers to update our class

04:54.060 --> 04:54.760
accordingly.

04:54.780 --> 05:02.250
What we can do is declare the revenue and cost as big decimals.

05:05.590 --> 05:07.990
And we can delete everything here.

05:08.970 --> 05:13.530
Regenerate our constructor getters and setters accordingly.

05:18.270 --> 05:18.920
Okay.

05:19.740 --> 05:22.890
And here it tells us to use this list instead.

05:27.510 --> 05:33.300
All right, make sure to import the big decimal class, and we're good.

05:33.900 --> 05:36.120
I think if we were to rerun our code.

05:40.200 --> 05:41.400
Looks a lot better.

05:43.600 --> 05:52.810
Now Task six tells us to find a utility method that will format the model attribute into a currency.

05:52.960 --> 05:57.310
So we want the revenue, cost and profit to appear as currencies.

05:58.570 --> 06:00.250
We'll go to the family repo.

06:01.690 --> 06:03.790
Look for numbers.

06:04.550 --> 06:07.130
And control f currency.

06:07.550 --> 06:13.620
We see a format currency method that we can use instead of our code.

06:13.670 --> 06:17.030
The method that we're going to grab is part of the numbers class.

06:17.030 --> 06:23.810
So since we're operating on numbers, we'll have to say numbers followed by the pound dot.

06:24.580 --> 06:27.520
Format currency followed by your method.

06:30.100 --> 06:35.950
And then you only have to pass in one thing into it, which is going to be your target.

06:36.040 --> 06:38.530
In this case, your model attribute.

06:40.650 --> 06:44.100
All right, we can do the same thing over here.

06:47.900 --> 06:52.610
Record cost, and I'll wrap this up in brackets.

06:53.740 --> 06:55.360
We'll do the same thing here.

07:04.420 --> 07:06.400
Go back and refresh.

07:07.890 --> 07:09.240
And we're looking good.

07:10.550 --> 07:14.660
The utility method format currency operates on our target.

07:14.660 --> 07:21.860
In this case, our model attribute and what it returns is a string value that is displayed thanks to

07:21.860 --> 07:23.360
thin leaf texts.

07:23.990 --> 07:25.370
All right.

07:25.760 --> 07:27.370
Going to task seven.

07:27.380 --> 07:30.600
You can use thin leaf style to format an HTML element.

07:30.620 --> 07:32.150
Sure, we already know that.

07:32.150 --> 07:38.960
And the styling we will apply as a background of green if the profit is greater than or equal to zero.

07:38.990 --> 07:42.230
Otherwise the background will equal red.

07:42.710 --> 07:43.580
All right.

07:43.580 --> 07:50.960
This reminds me of the ternary operator as we run through every single record in the records array list.

07:51.050 --> 07:59.690
A row is being generated, and the styling that that row is going to have is going to depend on a condition.

08:04.820 --> 08:11.180
So here we're going to say record revenue minus record cost.

08:13.550 --> 08:19.970
As we grab a value that derives from each record and then subtract them, we're going to compare that

08:19.970 --> 08:22.070
result against zero.

08:23.630 --> 08:31.760
If it's greater than or equal to zero, then what we're going to do is assign life style a background

08:31.760 --> 08:32.690
of green.

08:33.620 --> 08:39.170
So we're setting family style equal to a string background green.

08:43.320 --> 08:47.790
Otherwise we're going to set it equal to a string of background red.

08:53.630 --> 08:54.350
Okay.

08:57.340 --> 08:59.120
I think we should be good now.

09:00.910 --> 09:04.120
And say local host, 80, 80 and beautiful.

09:04.690 --> 09:05.380
All right.

09:05.380 --> 09:11.010
As we generate each table row, the family style is going to equal a background of green.

09:11.020 --> 09:17.560
If the profit is greater than zero and it's going to equal a background of red if the prophet is less

09:17.560 --> 09:18.370
than zero.

09:19.130 --> 09:21.770
This wraps up workbook 2.11.
