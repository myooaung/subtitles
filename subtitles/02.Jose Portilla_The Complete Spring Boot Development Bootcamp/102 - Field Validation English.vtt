WEBVTT

00:00.450 --> 00:03.780
Field validation prevents the user from inputting invalid data.

00:04.050 --> 00:07.560
Data storage costs money in your app should only store what's meaningful.

00:11.740 --> 00:15.910
So in this lesson, you will add constraints to the name and subject fields.

00:19.760 --> 00:21.470
Let's go through the field validation process.

00:21.470 --> 00:22.670
It takes five steps.

00:22.670 --> 00:25.940
Step one is to annotate the fields that you want to validate.

00:27.110 --> 00:33.260
In this example, courtesy of Spring Boot Magic, the men annotation can check if the age provided is

00:33.260 --> 00:34.940
at least 18 years old.

00:37.990 --> 00:40.270
Step two is to pass on a bad input.

00:44.390 --> 00:50.840
When the user presses submit, a post request will be initiated and the post request payload will have

00:50.840 --> 00:55.130
as many parameters as there are fields attached to each input.

01:00.380 --> 01:02.540
The handler method validates the fields.

01:05.580 --> 01:11.080
Spring Boot will create an empty person object that's ready to receive the payload from the post request.

01:11.100 --> 01:16.500
And Spring Boot is smart enough to use your setters to update every single field in this object with

01:16.500 --> 01:18.450
payload from the post request.

01:19.820 --> 01:24.280
As we update the object, Spring Boot is going to try and validate each field.

01:24.290 --> 01:26.030
The first field is valid.

01:26.900 --> 01:29.990
However, we require the age to be at least 18.

01:29.990 --> 01:32.630
So the age field is not valid.

01:37.730 --> 01:41.120
A binding result will carry the result of the validation.

01:42.780 --> 01:49.380
So in this case, our validation process does have errors in step five if the result is negative.

01:49.410 --> 01:53.100
The handler method forces the user to stay in the form view.

01:56.490 --> 02:01.260
So the binding result has errors, which means we're going to force the user to go back to the form.

02:01.890 --> 02:05.850
And step six finally catches the errors and displays them to the user.

02:08.520 --> 02:14.640
So the binding result keeps a record of the object name where the validation process took place, and

02:14.640 --> 02:20.520
this object name is going to match whatever object file if attached to our form.

02:20.940 --> 02:25.470
It's going to keep a record of all the errors associated with each field.

02:25.500 --> 02:28.460
There is an error associated with the field.

02:28.470 --> 02:32.880
Finally, if can access that error from the binding result and display it in the form.

02:34.300 --> 02:38.410
So step one is to actually annotate your field that needs validation.

02:41.560 --> 02:44.690
And field validation in Spring Boot is like magic.

02:44.710 --> 02:49.260
Spring Boot provides many standard annotations that you can apply to your fields.

02:49.270 --> 02:52.060
This will be inside of your cheat sheet, so not to worry.

02:52.510 --> 02:55.480
Now, each annotation validates a field in some way.

02:55.750 --> 03:01.300
In order to leverage these annotations, we're going to have to add the spring boot starter validation

03:01.300 --> 03:02.230
dependency.

03:02.830 --> 03:10.150
So I'll go over to Google and I will Google the spring boot validation dependency.

03:12.390 --> 03:14.970
We can grab it from the central maven repo.

03:15.930 --> 03:20.910
I'll grab the one that corresponds to my application version 2.6.7.

03:21.270 --> 03:28.290
But that won't really matter because what I'm going to do is delete the version number because the version

03:28.290 --> 03:34.680
for spring boot starters has already been specified on top, and I will choose to synchronize the built

03:34.680 --> 03:35.280
file.

03:37.410 --> 03:38.490
All right.

03:39.090 --> 03:43.260
This dependency provides all of the classes we need for field validation.

03:43.500 --> 03:50.400
So first, what I'm going to do is go to great Java and apply the not blank annotation to name and to

03:50.400 --> 03:51.330
subject.

03:51.630 --> 03:52.830
We'll say.

03:54.150 --> 03:55.260
And.

03:57.160 --> 04:02.620
And just as a side note, if this doesn't auto import for you or it doesn't show you the option, try

04:02.620 --> 04:07.480
just running the app first and if that doesn't work, relaunch your editor.

04:08.020 --> 04:12.010
This applies to both V's code and IntelliJ and an intelligent.

04:12.010 --> 04:15.370
You should have this invalidate cache button.

04:15.640 --> 04:18.520
Make sure to press that and your problem should be solved.

04:18.760 --> 04:21.310
So we'll add the not too blank annotation.

04:22.190 --> 04:24.110
Over here and here as well.

04:26.610 --> 04:30.390
And each constraint can return a message if the user violates it.

04:30.420 --> 04:34.590
This should come with a default message that we're just going to override.

04:34.950 --> 04:38.520
We'll say Name cannot be blank.

04:39.800 --> 04:40.700
Not blank.

04:40.730 --> 04:41.510
Blank.

04:43.010 --> 04:45.230
And we'll do the same thing here.

04:45.260 --> 04:49.280
We'll just say subject cannot be blank.

04:49.640 --> 04:54.170
Now careful to use, not blank instead of not empty.

04:54.320 --> 05:00.530
The not empty annotation doesn't consider the fact that the user may enter a lot of white space, which

05:00.530 --> 05:03.440
isn't considered empty but is considered blank.

05:05.680 --> 05:05.950
All right.

05:05.950 --> 05:10.870
Step two is to pass in bed and put the post request carries the data to your app, and regardless of

05:10.870 --> 05:17.590
the input that's going to populate the object with fields, you can actually verify this by running

05:17.590 --> 05:18.400
your app.

05:20.280 --> 05:22.470
And I'll just go ahead.

05:24.120 --> 05:25.290
In print.

05:26.040 --> 05:28.980
The grade subject.

05:30.840 --> 05:32.520
Or get subject, I should say.

05:34.120 --> 05:35.430
And grade name.

05:35.440 --> 05:41.050
So even if we have those annotations, it's still going to update the fields in this object.

05:42.170 --> 05:43.580
Let's test it out.

05:47.150 --> 05:50.000
We'll leave this blank and we'll say C minus.

05:52.140 --> 05:54.630
And you can't really see anything because the values are blank.

05:54.630 --> 05:58.140
But the field values were printed there, just white space.

05:58.890 --> 06:01.410
So take home message regardless of the input.

06:01.410 --> 06:04.350
Spring populates every field in this object.

06:05.220 --> 06:08.370
So step three is to apply the valid annotation.

06:08.520 --> 06:11.420
The valid annotation checks if the fields are valid.

06:11.430 --> 06:17.130
So as spring is populating the object with field values from the post request valid.

06:18.720 --> 06:21.990
Can actually check if any of them are invalid.

06:22.080 --> 06:24.170
So make sure to add this annotation.

06:24.180 --> 06:27.030
Otherwise the validation process will not happen.

06:28.810 --> 06:31.730
Now step four is to check for the binding result.

06:31.750 --> 06:35.260
Binding result carries the result of the validation.

06:38.080 --> 06:39.370
After valid checks.

06:39.370 --> 06:43.660
If the fields are valid, binding result carries the result of the validation.

06:44.800 --> 06:51.760
You can access the binding result from the handlers list of parameters binding result results.

06:52.240 --> 06:58.240
Now this binding result must always come after the object that is being validated or else spring is

06:58.240 --> 07:01.570
going to fail to validate the object and it's going to throw an exception.

07:02.380 --> 07:05.650
So do not mix the order of the parameters.

07:05.650 --> 07:11.050
The object's fields get validated first and the binding result comes right after.

07:11.080 --> 07:13.690
And so after spring boot validates the object.

07:13.690 --> 07:16.150
We're going to check if the result has errors.

07:16.150 --> 07:17.800
So we'll just print.

07:19.570 --> 07:22.810
Has errors with a question mark.

07:23.500 --> 07:27.220
And we're going to print the boolean value that results from a result.

07:27.230 --> 07:28.930
DOT has errors.

07:33.120 --> 07:33.520
Okay.

07:33.540 --> 07:36.420
Now I'll go back to Slash.

07:37.000 --> 07:37.950
Choose the button.

07:39.450 --> 07:43.950
I'll submit a form where the field values are blank.

07:43.950 --> 07:45.240
Press submit.

07:46.060 --> 07:47.200
We do have errors.

07:47.230 --> 07:47.800
Cool.

07:48.580 --> 07:51.730
Now step five is to return the appropriate view.

07:51.910 --> 07:56.050
A negative binding result must force the user to stay inside the form.

07:56.170 --> 07:59.830
If there are errors, the handler method should return the form view.

08:03.070 --> 08:09.160
So at the moment, regardless of errors, the the handler method is updating the data store and redirecting

08:09.160 --> 08:10.150
them to the grades view.

08:10.180 --> 08:11.530
That's not how it should be.

08:12.130 --> 08:17.530
If there are errors, we don't want to redirect the user anywhere.

08:17.530 --> 08:20.180
We want to keep them inside the form view.

08:20.200 --> 08:26.890
So we'll say if result has errors, then we're just going to return the form.

08:35.940 --> 08:39.810
The binding result has errors and so the user stays inside the form.

08:41.590 --> 08:45.400
Now step six is to actually display the errors to the user.

08:45.910 --> 08:52.480
This binding result that you see here, it keeps a record of the object as well as the fields that were

08:52.480 --> 08:53.350
violated.

08:53.470 --> 09:00.430
This information, upon keeping the user inside the form view, is sent back to the file template and

09:00.430 --> 09:05.740
so we can use the leaf attribute errors to display the constraint violation of a field.

09:08.110 --> 09:12.640
So here, what I can do is add a paragraph tag.

09:15.470 --> 09:23.750
Now this entire form is bound to the model object grade, which means this paragraph element and all

09:23.750 --> 09:30.920
other underlying elements can use a selection expression to select a field in the form backing object.

09:31.710 --> 09:38.850
So this is going to select the name field and timely errors is smart enough to access the error associated

09:38.850 --> 09:41.250
with that field, not the field itself.

09:41.610 --> 09:44.880
So leaf errors will display the error for that field.

09:44.880 --> 09:49.150
And what we're going to do is actually give this a style of read.

09:49.170 --> 09:55.140
So style is equal to color red, just to make this look nice.

09:55.350 --> 10:03.000
And then I will put another paragraph tag right above the subject, and here I will select the subject

10:03.000 --> 10:05.110
of the previously bound object.

10:05.130 --> 10:09.600
Finally, if errors will return the error associated with that field.

10:10.170 --> 10:11.160
All right.

10:13.250 --> 10:14.570
If I go back here.

10:19.700 --> 10:20.600
Wonderful.

10:21.350 --> 10:27.050
The first paragraph element displays the constraint violation for the field name, and the second paragraph

10:27.050 --> 10:30.530
element displays the constraint violation for the field subject.

10:32.620 --> 10:37.330
Now some of you might be wondering why not redirect the user to the home page.

10:37.480 --> 10:39.700
There are two issues with this.

10:39.730 --> 10:44.080
Number one, why would you redirect them to a page that they're already in?

10:44.110 --> 10:50.650
Number two, if you do this, you would actually lose the binding result data because now you're making

10:50.650 --> 10:52.890
an entirely new get request.

10:52.900 --> 10:57.490
So all data that was initiated from the post request would now be gone.

11:00.740 --> 11:01.910
Try it out.

11:03.860 --> 11:09.410
And we see nothing because it made an entirely new get request and we lost all that data from the binding

11:09.410 --> 11:09.970
result.

11:09.980 --> 11:10.400
So.

11:12.610 --> 11:18.940
So the solution is to just return the leaf template and right before returning it, spring boot is going

11:18.940 --> 11:23.110
to send over all of the necessary data, only redirect the user.

11:23.110 --> 11:26.950
If the form submission is successful, that's when it would make sense.

11:27.310 --> 11:32.020
Otherwise, if the result has errors, we don't want to redirect them anywhere.

11:32.020 --> 11:34.330
We just want to keep them inside the form.

11:35.080 --> 11:39.850
To recap, you prevented the user from inputting invalid name and subject data.

11:39.880 --> 11:43.810
This is a lot to recap, so tune in to the next breakpoint session.
