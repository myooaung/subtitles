WEBVTT

00:00.180 --> 00:04.600
So in this breakpoint session, we're going to trace the runtime of two different scenarios.

00:04.620 --> 00:10.020
The first scenario is a bug that we encountered when we were updating with a name, and the final scenario

00:10.020 --> 00:12.680
will trace the runtime of our current solution.

00:12.690 --> 00:15.080
So here I'm starting with scenario number one.

00:15.090 --> 00:19.920
I launched a previous version of the project, so you don't have to do what I'm doing, just follow

00:19.920 --> 00:20.570
along.

00:20.580 --> 00:24.660
And in this project we were using a name to update a student's grade.

00:24.660 --> 00:29.070
So what I'm going to do is start by running the application in debug mode.

00:30.920 --> 00:31.790
Um.

00:31.820 --> 00:37.430
You'll notice I already have all of my breakpoints set up, but I disabled them, so I'll go ahead and

00:37.430 --> 00:38.510
re-enable them.

00:39.860 --> 00:43.570
All right, I'll add one more breakpoint right over here, actually.

00:44.530 --> 00:45.700
One here as well.

00:47.080 --> 00:49.570
And I think my application should have run by now.

00:49.570 --> 00:53.410
So I'll go to local host.

00:53.740 --> 00:54.480
You know what?

00:54.490 --> 00:56.320
Let me disable the breakpoints.

01:01.020 --> 01:03.290
And I'm going to add a piece of data to our data store.

01:03.300 --> 01:06.840
We'll say Harry C minus potions.

01:07.750 --> 01:11.860
And now updating a student's grade based on their name is not a good idea.

01:11.900 --> 01:12.760
Here's why.

01:13.030 --> 01:15.880
Let's say I want to give Harry another grade in Quidditch.

01:15.880 --> 01:18.910
So we'll say Harry, we'll give him a C-minus.

01:19.450 --> 01:20.350
Or, you know what?

01:20.350 --> 01:21.070
Let's change it up.

01:21.070 --> 01:25.320
We'll give him a B-minus in Quidditch.

01:25.330 --> 01:29.110
And before I press the submit button, let me just re-enable the breakpoints.

01:32.050 --> 01:40.510
Submit initiates a post request the handler method receives that post request starts by creating a new

01:40.510 --> 01:43.720
grade object using your empty constructor.

01:48.230 --> 01:50.690
And now Spring Boot is smart enough to use your sweaters.

01:50.690 --> 01:58.340
An update every field in the grade object with payload from the post request so it's going to update

01:58.340 --> 02:01.130
the name field with a value from the post request.

02:01.160 --> 02:07.700
It will update the score field with a value from the post request and it will update the subject field.

02:09.180 --> 02:09.700
Sweet.

02:11.440 --> 02:17.800
And as we step further into the handler method, the name parameter matches one of the objects inside

02:17.800 --> 02:18.910
of the array list.

02:20.200 --> 02:21.550
This is a problem.

02:22.950 --> 02:27.690
Because this function is effectively going to return an index.

02:28.080 --> 02:35.730
And so even though our intent was to add a new object to that data store, it updates an existing one.

02:40.340 --> 02:43.970
The handler method then redirects the user to the grades template.

02:48.710 --> 02:51.050
It's going to send over the model data.

02:53.110 --> 02:58.960
And finally, it's going to generate a table with rows that reflect, in this case, the newly updated

02:58.960 --> 02:59.890
ArrayList.

03:00.100 --> 03:02.560
This is not good.

03:05.600 --> 03:10.820
As our current design implies that each student can only have one grade.

03:11.090 --> 03:12.410
So what did we do?

03:12.440 --> 03:15.170
Well, let's travel a few edits into the future.

03:18.000 --> 03:24.870
What we did in this project is we added a new ID field and unlike the name, the ID is going to be unique

03:24.870 --> 03:26.370
for every great object.

03:26.370 --> 03:28.320
So it's perfect for updates.

03:28.770 --> 03:32.910
So I'm going to add the exact same breakpoints as before.

03:37.270 --> 03:41.710
And looking back, there's no reason to be returning the class type integer.

03:41.710 --> 03:43.600
Let me just return the normal int.

03:47.050 --> 03:50.140
And I'll add a breakpoint here.

03:50.230 --> 03:51.430
One here.

03:53.600 --> 03:55.400
One here, one here as well.

03:59.370 --> 04:02.340
All right, now I'll go ahead and run the application and debug mode.

04:05.220 --> 04:08.380
And let's say I want to give Harry another grade in Quidditch.

04:08.400 --> 04:11.490
If I go to local host 8080.

04:12.470 --> 04:15.260
The Handler method intercepts the get request.

04:15.290 --> 04:18.340
There is no ID parameter that was being passed back.

04:18.350 --> 04:19.130
It's null.

04:21.480 --> 04:26.280
The Handler method ends up creating a new grade object, and right away the constructor is going to

04:26.280 --> 04:29.070
generate a unique ID for the ID field.

04:31.490 --> 04:34.820
Get form adds this grade object to the model.

04:35.890 --> 04:40.210
The key grade maps to an empty grade object that does have an ID.

04:41.100 --> 04:44.670
And as the handler method returns the form templates.

04:46.240 --> 04:48.340
It sends over the model data.

04:48.370 --> 04:52.420
The form element selects the grade object.

04:52.450 --> 04:56.920
Every field in the object is bound to a form input.

04:58.370 --> 05:04.430
Three of the fields in the model object are empty, so it follows that three of the form inputs are

05:04.430 --> 05:05.900
going to be empty as well.

05:06.050 --> 05:13.730
But the ID field does contain data and the last input which happens to be hidden is bound to it.

05:13.940 --> 05:17.690
And so now when you submit the form, we'll give Harry another grade and Quidditch.

05:17.690 --> 05:19.250
We'll say B minus.

05:19.640 --> 05:23.390
In Quidditch, it's going to initiate a post request.

05:23.390 --> 05:27.320
And this time the post request carries four values back to the back end.

05:27.500 --> 05:31.250
It's going to carry back a name subject score as well as an ID.

05:31.490 --> 05:38.900
Now, before we can see that the Handler method submit form receives the post request and as soon as

05:38.900 --> 05:44.900
it does, you can see that it creates an empty grade object using your empty constructor.

05:45.410 --> 05:51.080
Every field in the object starts off as empty, but the empty constructor generates another ID for this

05:51.080 --> 05:51.830
object.

05:53.630 --> 06:00.200
Bring uses your setters to update every field and the great object with payload from the post request

06:00.200 --> 06:05.180
and it's going to override that ID value with a value from the post request.

06:05.880 --> 06:08.430
It updates the name with the value from the Post request.

06:08.610 --> 06:13.380
It updates the score where they add value from the Post request and it updates the subject.

06:14.670 --> 06:15.480
Beautiful.

06:16.190 --> 06:19.160
And as we step further into the handler method.

06:20.070 --> 06:21.050
The ID field.

06:21.060 --> 06:23.100
It doesn't match anything in the data store.

06:24.240 --> 06:27.330
So it adds this object to our array list.

06:28.640 --> 06:32.660
Then it redirects the client to make another get request on slash grades.

06:32.960 --> 06:36.740
This is going to add the updated array list to our model.

06:38.140 --> 06:38.680
Returns.

06:38.680 --> 06:45.070
The grades, templates and the grade template is going to generate rows that reflect our newly updated

06:45.070 --> 06:46.000
array list.

06:47.810 --> 06:49.790
And just like that, the bug is gone.

06:50.980 --> 06:55.480
Before we actually wrap things up, one last thing I want to breakpoint in this section is updating

06:55.480 --> 06:56.530
a student grade.

06:56.860 --> 06:58.330
So we'll press update.

06:58.330 --> 07:04.960
And what the update button does is it makes a get request to local host 8080 and in that request it

07:04.960 --> 07:07.030
sends back an ID parameter.

07:08.010 --> 07:09.430
BD two.

07:09.450 --> 07:10.560
DD seven.

07:10.860 --> 07:14.910
This is the ID of Harry's great object for potions.

07:16.880 --> 07:24.860
The handler method get form receives this ID and it checks if that ID matches anything inside of our

07:24.860 --> 07:25.760
data store.

07:26.030 --> 07:27.140
It definitely should.

07:27.140 --> 07:28.640
So if I press continue.

07:29.940 --> 07:37.620
It adds Harry's great object to our model the grade key maps to our grade object.

07:37.980 --> 07:44.760
So upon returning the form view, it's going to send over this model data and the form element is going

07:44.760 --> 07:52.980
to be bound to this grade object such that each input is going to bind to a field in that form backing

07:52.980 --> 07:53.850
object.

07:54.640 --> 07:56.410
All of the fields are populated.

07:56.410 --> 08:00.790
So it follows that all of the farm inputs are going to be populated as well.

08:01.060 --> 08:01.810
Beautiful.

08:02.700 --> 08:11.940
And now if I decide to update Harris grade to an A-plus and press submit, remember this I'd be d2d

08:12.420 --> 08:13.770
if I press submit.

08:15.190 --> 08:21.730
What that does is it initiates a post request and the handler method submit form receives that post

08:21.730 --> 08:22.270
request.

08:22.270 --> 08:28.010
The first thing that it does is it creates a new grade object using your empty constructor.

08:28.030 --> 08:33.160
Now, the problem is, upon creating this new grade object, it's going to assign it a new ID.

08:36.050 --> 08:41.870
But not to worry, because Spring Boot is smart enough to update every single field in this object with

08:41.870 --> 08:43.490
payload from the post request.

08:43.490 --> 08:51.800
And so what it's going to do is override this ID value with the one provided by the post request BD

08:51.800 --> 08:52.610
to DH.

08:53.120 --> 08:55.520
So now the IDs are consistent again.

08:55.520 --> 08:58.340
Now we're updating the name with a value from the post request.

08:58.340 --> 09:01.100
We're updating the score and we're updating the subject.

09:01.370 --> 09:02.360
All right.

09:02.360 --> 09:06.710
And now we're checking if the idea of this grade matches anything in the data store.

09:06.770 --> 09:08.330
It definitely should.

09:08.330 --> 09:14.630
The index it returns is zero, which means it did find an object to update and it's going to update

09:14.630 --> 09:16.460
the object at index zero.

09:17.180 --> 09:22.640
Upon doing so, it will redirect the client to make a get request on slash grades.

09:23.180 --> 09:30.530
The grades handler method is going to add this new array list as a model attribute.

09:31.810 --> 09:37.570
Giving Harry an A-plus in potions and upon returning the grades templates.

09:38.350 --> 09:43.300
The new rose that it generates will reflect the newly updated array list.

09:45.780 --> 09:46.500
Just like that.

09:46.500 --> 09:48.210
We updated Harry's grade.
