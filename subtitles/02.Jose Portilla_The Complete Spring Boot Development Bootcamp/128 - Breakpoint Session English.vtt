WEBVTT

00:00.560 --> 00:06.560
Everything appears to be magical until we apply a breakpoints and trace the runtime step by step.

00:06.800 --> 00:13.820
So what I'm going to do is apply breakpoints at the heart of our application, which is the grade controller.

00:14.060 --> 00:17.570
I will apply some breakpoints pretty much everywhere.

00:19.920 --> 00:21.540
And now.

00:22.230 --> 00:24.940
I think I'm ready to run the app and debug mode.

00:33.870 --> 00:35.510
I probably should have ran by now.

00:35.510 --> 00:37.500
So I'll go to local host.

00:37.520 --> 00:37.880
80.

00:37.880 --> 00:38.480
80.

00:43.900 --> 00:49.660
You probably noticed by now the this keyword, this means current object.

00:50.290 --> 00:55.750
So as soon as we ran our spring boot application, it performed a component.

00:55.750 --> 01:01.660
Scan controller is a derivative of component, but it's more specialized because it can also handle

01:01.660 --> 01:02.610
web requests.

01:02.620 --> 01:12.460
But anyways, this class was scanned by our spring boot application and upon startup an object was created

01:12.460 --> 01:14.230
of the grade controller class.

01:14.350 --> 01:18.610
And right now we are inside the current grade controller object.

01:19.060 --> 01:25.720
And now you'll notice if you expand this, the grade controller object has a grade service object.

01:26.700 --> 01:31.500
Once again a -- application startup it scanned for components.

01:32.370 --> 01:39.570
The service annotation is a derivative of component, so a great service being was created and is being

01:39.570 --> 01:46.890
managed inside the spring container and this grade service bean was ordered wired inside of this great

01:46.890 --> 01:47.910
service variable.

01:48.450 --> 01:54.240
Now, if you go even further, the grade service object has a great repository object.

01:54.540 --> 01:57.030
Again, a -- application startup.

01:57.030 --> 01:59.040
It performed a component scan.

02:01.580 --> 02:08.630
Repository is a component derivative, so a greater repository being was created and is currently being

02:08.630 --> 02:10.850
managed inside of the spring container.

02:10.850 --> 02:16.910
But this same bean was ordered wired into the grade repository variable.

02:21.120 --> 02:27.180
So you can say that a great controller, instead of creating a great service object, it's using a great

02:27.180 --> 02:30.910
service object that already lives inside of the spring container.

02:30.930 --> 02:33.450
It's leveraging a spring bean.

02:34.080 --> 02:38.790
And from this great service object, we can make calls to get grade by ID.

02:43.850 --> 02:45.530
In order to get an index.

02:45.530 --> 02:49.040
Then based on this index, it will return an object.

02:53.390 --> 02:57.320
So everything still works exactly the same way as before.

02:57.350 --> 03:02.930
Instead of creating its own object, it is simply using an object that already exists.

03:05.490 --> 03:06.000
By press.

03:06.000 --> 03:07.950
Next, it returns the form.

03:10.280 --> 03:15.650
I'll go ahead and submit something, let's say Harry C-minus, and we'll do everything correctly this

03:15.650 --> 03:15.950
time.

03:15.950 --> 03:17.000
Potions.

03:19.540 --> 03:20.030
All right.

03:20.050 --> 03:20.890
There are no errors.

03:20.890 --> 03:23.200
So we can step into the next breakpoint.

03:23.800 --> 03:27.620
And now I can call submit grade from our grade service object.

03:27.640 --> 03:29.590
I can step inside of this function.

03:30.040 --> 03:31.780
I'll step over this line.

03:32.620 --> 03:34.330
The index is -1000.

03:34.330 --> 03:36.010
So this will execute.

03:37.160 --> 03:40.520
Ad grade leverage is the great repository been.

03:41.620 --> 03:42.790
And ad grade.

03:42.790 --> 03:44.590
I will step inside of this function.

03:46.280 --> 03:53.060
And here, like before, the great service object is not creating its own instance of the great repository.

03:53.150 --> 03:59.150
It's simply using an instance of greater repository that already exists inside of the spring container

03:59.300 --> 04:05.730
and using this great repository object, this great repository being we can call get grades.

04:05.750 --> 04:07.010
I won't step inside.

04:07.010 --> 04:08.810
I'm just going to step over this.

04:12.160 --> 04:16.090
And here you can see that it has added a grade to the student grades ArrayList.

04:16.270 --> 04:17.020
All right.

04:17.020 --> 04:19.960
Everything still works exactly the same way as before.

04:22.150 --> 04:25.780
Now it redirects them to make a get request on slash grades.

04:26.670 --> 04:34.560
It will do exactly that and it will call get grades from the great service object stepping into that.

04:34.980 --> 04:41.280
This is going to call get to grades from the great repository object and it's going to return the student

04:41.280 --> 04:42.090
grades.

04:45.760 --> 04:47.890
Here you can visualize the return value.

04:47.920 --> 04:49.450
There is only one grade.

04:49.450 --> 04:51.970
So it follows that the.

04:53.480 --> 04:56.480
The grades template will just return a single grade.

04:56.810 --> 04:57.560
Beautiful.

04:59.130 --> 05:05.070
So just to really drive home the point, instead of creating our own objects, these objects already

05:05.070 --> 05:06.840
exist behind the scenes.

05:06.840 --> 05:08.610
We're just wiring them in.

05:12.980 --> 05:18.350
That being said, an object that we wire in from the spring container is a bean.
