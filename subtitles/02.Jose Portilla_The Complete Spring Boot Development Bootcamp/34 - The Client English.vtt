WEBVTT

00:00.270 --> 00:03.270
A client and a server communicate with each other.

00:07.150 --> 00:08.680
How do they communicate?

00:08.950 --> 00:11.950
Well, the client starts off by making a request.

00:12.220 --> 00:15.430
The server receives that request and responds.

00:19.160 --> 00:22.310
In this lesson, you will understand the client server model.

00:27.540 --> 00:29.430
A client makes a request.

00:33.470 --> 00:36.980
A client will make an HTTP request via the internet.

00:37.220 --> 00:39.200
An example of a client is your browser.

00:39.230 --> 00:46.250
Like Google, Chrome, Safari, Firefox, and from your browser you can make requests via the internet.

00:51.180 --> 00:53.220
Now let's talk about the physical server.

00:53.220 --> 00:57.480
And this is the computer, the machine that receives your request.

01:00.920 --> 01:04.550
A client makes an HTTP request via the internet.

01:05.800 --> 01:10.240
A physical server that lives on the other side of the world receives your request.

01:12.850 --> 01:18.400
Now an HTTP server is the software that actually processes your request.

01:21.620 --> 01:25.520
Spring boot applications have an embedded HTTP server.

01:28.130 --> 01:32.900
The HTTP server inside of a spring boot app is what processes a request.

01:35.600 --> 01:39.470
So if we go through the process again, the client makes a request.

01:40.010 --> 01:44.870
When a client makes a request, a computer, a physical server on the other side of the world picks

01:44.870 --> 01:45.440
it up.

01:47.850 --> 01:54.000
And the physical server forwards it to the HTTP server inside of your spring boot application.

01:57.700 --> 02:00.490
The Spring Boot application prepares a response.

02:01.730 --> 02:07.340
And once the response is ready, the HTTP server sends it back to the client.

02:09.350 --> 02:12.440
Their response populates the client's web page.

02:16.120 --> 02:17.920
Now what is an IP address?

02:18.220 --> 02:22.480
An IP address is a sequence of numbers that identifies a computer.

02:25.820 --> 02:31.310
There are millions of computers and every computer has a unique IP address.

02:34.280 --> 02:40.460
The client's request needs to include an IP address because it's the IP address that identifies the

02:40.460 --> 02:42.170
server they want to access.

02:45.580 --> 02:49.480
The physical server that matches the address picks up the request.

02:55.590 --> 03:00.030
The port tells the physical server where to forward the request.

03:03.900 --> 03:07.380
A physical server can have over 65,000 ports.

03:10.070 --> 03:14.300
The HTTP server listens for requests on one of them.

03:17.320 --> 03:22.600
When a client makes a request, it needs to specify an IP address and a port.

03:25.390 --> 03:28.660
The IP address identifies the physical server.

03:32.150 --> 03:36.620
And the port number tells the physical server where to forward the request.

03:36.980 --> 03:40.970
In this case, the server forwards the request to port 8080.

03:41.000 --> 03:48.140
The HTTP server embedded in your Spring Boot app happens to be listening for requests on that very same

03:48.140 --> 03:48.530
port.

03:48.560 --> 03:49.640
Port 8080.

03:50.060 --> 03:53.150
It gets the request and it sends back a response.

03:56.810 --> 03:57.020
Okay.

03:57.080 --> 03:59.240
Let's look at the client server model in action.

04:04.260 --> 04:08.760
I'm going to go to my browser and I'm going to make a request that specifies the following address and

04:08.760 --> 04:09.450
ports.

04:16.800 --> 04:18.330
And we get Google.

04:22.600 --> 04:26.380
I made a request that specifies an IP address and a port.

04:29.710 --> 04:33.130
The IP address belongs to one of the servers from Google.

04:36.710 --> 04:39.260
The request was forwarded to Port 80.

04:42.780 --> 04:44.250
And HTTP server.

04:44.250 --> 04:49.650
Listening on that port received our request and sent back a response.

04:49.860 --> 04:52.770
The response is HTML that populates the browser.

04:57.290 --> 05:00.880
It's worth noting that in real life, nobody ever writes the full address.

05:00.890 --> 05:08.210
We write URLs like Google.com, and behind the scenes a DNS server matches the URL to an address.

05:11.570 --> 05:14.090
In this lesson you learned about the client server model.

05:16.350 --> 05:20.880
When a client makes a request, it specifies an IP address and a port.

05:23.690 --> 05:26.600
The IP address identifies a physical server.

05:26.960 --> 05:30.800
The port number tells the physical server where to forward the request.

05:30.830 --> 05:34.670
In this case, the server forwards the request to port 8080.

05:35.780 --> 05:42.570
The HTTP server embedded in some spring boot app happens to be listening for requests on Port 880.

05:42.710 --> 05:45.590
It gets the request and it sends back a response.
