WEBVTT

00:00.060 --> 00:03.240
The put operation is meant to update a resource.

00:03.770 --> 00:07.980
A rest API defines many operations that can manipulate a resource.

00:07.980 --> 00:14.730
Get to retrieve their resource post creates one, put updates a resource and delete delete it.

00:15.360 --> 00:18.480
In this lesson, we will focus on the put operation.

00:19.350 --> 00:25.440
In order to update a contact, we expect the consumer to initiate a put request so we can use the put

00:25.440 --> 00:28.860
mapping annotation to map this request to a handler method.

00:29.760 --> 00:34.800
The path that the consumer specifies will contain an ID variable.

00:35.870 --> 00:39.440
Because we need the ID to know which contact to update.

00:39.650 --> 00:46.160
And when we update a contact, we're going to send back the updated resource as well as the status code.

00:46.160 --> 00:50.000
So here we can say public response entity.

00:52.160 --> 00:57.290
And we're going to send back the updated resource for confirmation.

00:58.050 --> 01:00.030
I'm going to call this handler method.

01:00.030 --> 01:01.500
Update contact.

01:03.360 --> 01:07.410
We can access the path variable of ID over here.

01:11.650 --> 01:17.260
And we also expect the consumer to send us the JSON data that's needed to update the resource.

01:17.260 --> 01:21.010
We can serialize the contents of that JSON.

01:21.980 --> 01:25.490
Into a Java object using the request body annotation.

01:33.790 --> 01:38.290
And now inside the interface, we're going to force the implementation to override an update function.

01:38.290 --> 01:41.350
So we'll say void, update, contact.

01:42.350 --> 01:43.550
String ID.

01:44.620 --> 01:45.700
Contact.

01:46.310 --> 01:47.330
Contact.

01:49.180 --> 01:53.080
Now in the implementation, we're going to have to override the update function.

01:54.110 --> 01:58.610
And you can just say contact, repository, dot, update, contact.

01:58.700 --> 02:02.060
And here we can pass in the index of that contact.

02:02.990 --> 02:08.420
And now back inside the controller, we're going to update the resource that matches this ID.

02:08.690 --> 02:10.670
So we'll say contact service.

02:12.620 --> 02:14.360
Dot update contact.

02:15.130 --> 02:17.590
Updating the contact with the matching ID.

02:18.220 --> 02:19.030
All right.

02:19.030 --> 02:24.400
Now let's have a look at the the list of 200 status codes.

02:24.400 --> 02:27.250
Which one do you think we should send back?

02:27.870 --> 02:30.100
I think in this case, let's not overthink it.

02:30.120 --> 02:31.830
200 seems reasonable.

02:32.130 --> 02:35.860
90% of the time you're going to be sending back a status of 200.

02:35.880 --> 02:37.000
It's the most common.

02:37.020 --> 02:39.540
We got your request and it was successful.

02:39.690 --> 02:43.320
So we'll go back here and return a new response entity.

02:45.740 --> 02:48.570
That encapsulates the data we want to send back.

02:48.590 --> 02:55.010
In this case, I want to send back the updated resource as confirmation to the user that we did in fact

02:55.010 --> 02:59.390
make the update and we'll send back a status of 200.

03:01.030 --> 03:01.690
Okay.

03:01.720 --> 03:02.770
Let's try it out.

03:02.800 --> 03:05.230
I'll run my app in debug mode.

03:07.880 --> 03:09.140
Oh, wrong mode.

03:12.090 --> 03:15.630
I'll put breakpoints on every setter.

03:18.050 --> 03:18.410
Now.

03:18.410 --> 03:19.670
I already have them set up.

03:19.670 --> 03:20.330
Cool.

03:23.520 --> 03:29.070
So the first thing we have to do is actually make a post request in order to have some data inside of

03:29.070 --> 03:30.060
our data store.

03:30.090 --> 03:34.410
So I will go ahead and create a resource of John Snow.

03:37.670 --> 03:41.660
Stepping through that and go here.

03:42.710 --> 03:44.570
And copy the ID value.

03:44.570 --> 03:46.190
This is very important.

03:46.460 --> 03:54.050
So it's going to create a contact resource with the following ID and save it inside of our contact array

03:54.050 --> 03:54.710
list.

03:56.080 --> 03:59.050
All right, now we need to make a put request.

03:59.500 --> 04:02.830
Now, the Yuri identifies the location of the resource.

04:02.830 --> 04:09.460
We want to locate the resource with the following ID make sure to remove the string quotes.

04:10.990 --> 04:17.050
Och this is the resource that we want to update and contact that we want to update it with.

04:17.080 --> 04:19.510
We want to represent it using JSON.

04:19.510 --> 04:27.130
So remember that our empty constructor is going to auto generate an ID, but we do not want the ID of

04:27.130 --> 04:29.170
the resource we're updating to change.

04:29.170 --> 04:33.190
So we're going to make sure to include an ID key value pair as well.

04:33.430 --> 04:34.930
So we'll say ID.

04:36.440 --> 04:39.080
Is equal to the original ID.

04:39.560 --> 04:46.880
And so what that is going to do is ultimately invoke the set ID setter, which will override the auto

04:46.880 --> 04:51.570
generated ID value with the one that we get from the JSON data packet.

04:51.590 --> 04:53.150
Here we have the name, the phone number.

04:53.180 --> 04:54.370
Okay, we're good.

04:54.380 --> 04:56.660
Now, I believe the original phone number was this.

04:56.660 --> 04:57.680
So let's change it up.

04:57.680 --> 05:02.810
Let's update John Snow's phone number to nine, eight, six, five.

05:03.810 --> 05:05.910
Go ahead and make a pitch request.

05:06.840 --> 05:09.330
So spring boots received our put request.

05:09.330 --> 05:13.360
And the first thing it does is it creates a new object of the contact class.

05:13.380 --> 05:17.340
Using your empty constructor, it auto generates the ID value.

05:19.490 --> 05:25.850
Now this auto generated ID is going to get overridden by the ID we passed in inside the JSON.

05:26.620 --> 05:30.670
And just like that, our resource is able to retain its original ID.

05:31.180 --> 05:38.140
The remaining contents of our request are serialized into our object, such that name invokes the set

05:38.170 --> 05:41.380
name setter and its corresponding value is passed in.

05:42.350 --> 05:44.900
Phone number invokes the set phone number setter.

05:47.880 --> 05:54.270
And if we go back, we see that the John Snow resource was actually updated with a status of 200 K because

05:54.270 --> 06:01.440
after we performed the update we fetched that same resource and indeed it was updated.
