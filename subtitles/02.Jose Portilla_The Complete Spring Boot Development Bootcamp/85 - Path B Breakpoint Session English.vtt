WEBVTT

00:00.210 --> 00:06.120
In order to recap what we did in the last lesson, it's important to trace the runtime and see exactly

00:06.150 --> 00:08.010
what's happening behind the scenes.

00:08.430 --> 00:13.380
And so what I'm going to do is just start by running the application and debug mode.

00:21.700 --> 00:24.040
Apply some breakpoints to the application.

00:24.040 --> 00:25.570
I will apply them everywhere.

00:31.420 --> 00:35.110
And it might actually apply some in the sectors as well.

00:36.520 --> 00:36.930
Set.

00:36.940 --> 00:37.630
Score.

00:38.290 --> 00:38.650
Set.

00:38.650 --> 00:39.700
Subject.

00:40.850 --> 00:42.020
Set name.

00:43.520 --> 00:44.870
And.

00:45.740 --> 00:49.160
It might be worthwhile adding one in the empty constructor as well.

00:52.260 --> 00:54.390
We'll just put a random print statement for now.

00:55.620 --> 00:56.430
All right.

00:57.860 --> 01:02.300
So now, starting from the very top, I'll make a get request on local host 8080.

01:04.260 --> 01:08.940
The first breakpoint hits and the request maps to the handler method get form.

01:09.360 --> 01:15.780
The handler method starts by creating a grade object, obviously using the empty constructor.

01:21.400 --> 01:25.900
Now the model has data and you can drill into it and you'll notice a key value pair.

01:25.930 --> 01:31.090
The string grade is the key and the value that it maps to is an MT grade object.

01:31.420 --> 01:36.610
As the handler method returns the form template, it's going to send over the model data to the form

01:36.610 --> 01:37.600
that HTML.

01:38.050 --> 01:45.700
The form element is going to look inside the model and it binds to the MT grade object.

01:47.200 --> 01:51.610
Family field selects a field from the previously bound object.

01:51.610 --> 01:58.570
And what family field is going to do is bind every single form input to a field in the model object.

01:58.570 --> 02:05.230
So it follows that because all of the fields in this object are empty, all of the inputs in the form

02:05.230 --> 02:06.940
are going to be empty as well.

02:11.960 --> 02:13.460
We get exactly that.

02:13.640 --> 02:19.070
And now when we submit the form, I will submit data for Harry.

02:20.420 --> 02:24.890
A post request is going to be made and it's going to carry all of that data to the back end.

02:27.420 --> 02:29.880
Now what's the first thing that will get executed?

02:31.510 --> 02:32.850
The empty constructor.

02:32.850 --> 02:36.610
Weird will remember when a post request is made.

02:36.630 --> 02:41.760
The handler method submit form is going to receive it and the first thing it's going to do is create

02:41.760 --> 02:45.240
an empty grade object using your empty constructor.

02:45.240 --> 02:47.370
You can see it happening in real time.

02:48.750 --> 02:50.160
And if I continue.

02:51.220 --> 02:57.220
This is a parameter from the post request and Spring Boot is smart enough to use your public setter

02:57.220 --> 03:00.850
to update your field with a parameter from the post request.

03:00.850 --> 03:03.280
So it's going to update the name field.

03:07.570 --> 03:10.150
The score is a parameter from the post request.

03:10.150 --> 03:11.980
It's going to update the score field.

03:12.810 --> 03:17.580
And it's going to update the subject with the subject parameter from the post request.

03:18.000 --> 03:19.130
That's really cool.

03:19.140 --> 03:26.160
So after we've created that grade and updated it with values, we can add it to the data store student

03:26.160 --> 03:26.880
grades.

03:28.660 --> 03:34.860
And then this is going to prompt the client to make another get request on slash grades.

03:34.870 --> 03:37.300
So where do you think the next breakpoint is going to hit?

03:38.990 --> 03:39.980
There you go.

03:40.070 --> 03:45.680
So the client made a get request on slash grades and the handler method received it.

03:45.710 --> 03:49.220
Here we have the array list that's populated with our data.

03:49.340 --> 03:57.860
We're adding it as a model attribute and before actually returning the grades, template grades is going

03:57.860 --> 04:01.320
to receive this array list of grade objects.

04:01.340 --> 04:05.750
There is only one grade object, so it's just going to generate one row of data.

04:06.230 --> 04:08.600
So if I go back and press next.

04:10.880 --> 04:12.320
That's just beautiful.

04:15.210 --> 04:21.240
So now compare the process that you just saw to the diagram that we talked about in the previous video.

04:21.780 --> 04:23.220
I'll leave it here to play.
