WEBVTT

00:00.150 --> 00:02.750
Welcome to the challenge for the Beans section.

00:02.760 --> 00:05.550
The goal of this challenge is to loosely couple our code.

00:05.550 --> 00:11.190
Currently it's tightly coupled and it's giving us many options to configure our beans.

00:11.190 --> 00:18.240
We can either use component derivative annotations, create objects out of each class, and register

00:18.240 --> 00:22.830
them as being definitions that will live inside of the spring container where we can auto wire them

00:22.830 --> 00:26.160
after or we can configure our beans using XML.

00:26.190 --> 00:34.260
I'm going to choose the easiest option, which is just to mark the store repository class as a repo.

00:34.710 --> 00:38.820
And we're going to mark the service class as a service.

00:42.110 --> 00:47.180
So it's going to happen as soon as we run our application.

00:47.180 --> 00:54.920
Spring Boot is going to run a component scan and the component scan is going to identify these component

00:54.920 --> 00:56.090
annotations.

00:56.090 --> 01:02.120
And what it will do is it will create an object out of store repository, and that object will live

01:02.120 --> 01:03.650
inside of the spring container.

01:03.680 --> 01:08.720
It will create an object out of store service and that object will live inside of the spring container.

01:08.720 --> 01:14.840
And objects that are internally managed by spring boot inside of the spring container are called beans.

01:15.650 --> 01:21.830
So right here, instead of saying store repository is equal to a new repository object, we can wire

01:21.830 --> 01:24.230
the store repository being into it.

01:24.590 --> 01:25.730
Auto wired.

01:26.470 --> 01:32.260
And this will inject the store repository being into this field and we can use it accordingly.

01:32.350 --> 01:38.740
Now, if you look back at the instructions, it's telling us not to directly wire the beans into each

01:38.740 --> 01:44.350
field, because if you have a look at the automated annotations targets, it can also be applied to

01:44.350 --> 01:46.600
constructors, the parameter is etc..

01:46.930 --> 01:48.340
So what we're going to do?

01:50.000 --> 01:52.790
Is we're going to add a constructor to store controller.

01:53.360 --> 01:56.530
The way to do that, well, you know how to make constructors by now.

01:56.540 --> 01:59.120
It's just basic object oriented programming.

01:59.120 --> 02:03.860
But this constructor is going to receive a store service object.

02:07.300 --> 02:12.970
Now, once you run your Spring Booth application, an object of store controller is created and as this

02:12.970 --> 02:17.770
object is being created, the constructor will be called, and this constructor expects to receive a

02:17.770 --> 02:18.940
store service object.

02:18.940 --> 02:20.870
But where is it going to come from?

02:20.890 --> 02:26.680
Well, we can auto wire the store service bin right over here.

02:34.820 --> 02:41.780
And then we can say this store service is equal to the store service dependency that gets injected.

02:42.530 --> 02:44.490
So we don't have to do this anymore.

02:44.510 --> 02:50.930
Instead of creating an object of the store service class, we're injecting an object and setting our

02:50.930 --> 02:52.850
store service field equal to it.

02:52.880 --> 02:58.100
Now, our application is loosely coupled because instead of the controller creating its own object,

02:58.100 --> 03:05.210
it's using an object that already exists inside of the spring container that we're wiring into our constructor.

03:05.270 --> 03:09.350
And we're going to do the exact same thing inside of store service.

03:10.020 --> 03:14.670
We will auto wire it directly into the field because that's not what the instructions say.

03:14.760 --> 03:21.000
As soon as our application scans for components and creates an object of store service, the constructor

03:21.000 --> 03:28.080
is going to be called and this constructor will receive a store repository object.

03:29.580 --> 03:31.110
We're going to wire it.

03:32.310 --> 03:34.110
From the spring container.

03:42.360 --> 03:48.630
So now that we've injected the store repository bean into this constructor parameter, we can just say

03:48.630 --> 03:52.350
this store repository and update our field.

03:53.710 --> 03:54.430
Okay.

03:58.670 --> 04:00.290
Let's test our code.

04:10.600 --> 04:13.720
And everything still works really well.

04:18.770 --> 04:21.980
Just before we wrap up, let's apply the usual breakpoints.

04:21.980 --> 04:30.080
I will apply one breakpoint over here and one breakpoint over here.

04:32.160 --> 04:33.200
I think we're good to go.

04:33.230 --> 04:35.780
I'll run the application and debug mode.

04:39.630 --> 04:45.870
As the store service object is being internally created by spring, the store service constructor gets

04:45.870 --> 04:51.210
called and what we're doing is we're injecting the store repository, being right over here.

04:52.110 --> 04:55.470
Here you can see the store repository being that was injected.

04:57.040 --> 05:00.730
And here we're setting the store repository field equal to it.

05:04.010 --> 05:08.000
And here as the store comptroller object is being created by spring.

05:08.030 --> 05:13.490
Its constructor gets called and we're injecting the store service bean into the constructor.

05:13.850 --> 05:19.820
And right over here you can see the store service dependency that was injected into the following parameter,

05:19.820 --> 05:23.600
and we're setting our store service field equal to it.

05:37.130 --> 05:39.890
And that is dependency injection.
