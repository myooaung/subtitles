WEBVTT

00:00.360 --> 00:01.220
Let's get started.

00:01.230 --> 00:06.030
Please launch the starter project by following this path inside of your course resources.

00:11.800 --> 00:12.250
All right.

00:12.250 --> 00:14.920
Let's start with some key things to point out.

00:14.920 --> 00:20.440
The resources that a consumer may want to access is actually just an array list.

00:20.470 --> 00:28.420
We're going to define a rest controller that can act as a mediator between these resources and whatever

00:28.420 --> 00:29.740
the consumer may be.

00:31.000 --> 00:37.810
Number two is it's actually common practice to create a service interface and use it to define every

00:37.810 --> 00:40.870
method that a service implementation must override.

00:42.870 --> 00:49.910
Creating a service implementation that implements a service interface helps further achieve loose coupling

00:49.920 --> 00:55.150
because Spring Boot is going to create an object out of the service implementation.

00:55.170 --> 01:00.810
We can visualize this by running the application in debug mode, which I had already done prior to this

01:00.810 --> 01:01.530
recording.

01:01.530 --> 01:07.620
And here you can see, thanks to my spring boot dashboard and vs code that the contact service implementation

01:07.620 --> 01:11.070
exists as a bean inside of the spring container.

01:11.070 --> 01:18.870
And thanks to polymorphism, this contact service implementation is of its own type and of type contact

01:18.870 --> 01:27.800
service, which means that bean can be injected over here inside of our controller as a contact service.

01:27.810 --> 01:31.170
Now, how does this actually help achieve loose coupling?

01:31.170 --> 01:35.730
Well, what if in the future just follow for now, don't do what I'm doing.

01:35.730 --> 01:38.610
I decide to create a better.

01:39.840 --> 01:43.470
Our contact service implementation.

01:45.040 --> 01:48.070
And let's just copy everything over here.

01:48.960 --> 01:55.650
And using your imagination assume that this is a much better contact service implementation than what

01:55.650 --> 01:56.610
we have here.

01:56.730 --> 01:59.430
So let's go ahead and comment all of this out.

02:01.890 --> 02:09.180
Now, I don't have to touch anything inside of my controller because this bean that gets created is

02:09.180 --> 02:16.440
also going to be a type contact service, and so it's going to be injected over here as well.

02:16.470 --> 02:23.220
The fact that we can make this change and not do anything inside of the controller means that it's loosely

02:23.220 --> 02:24.030
coupled.

02:24.060 --> 02:28.500
This is a very common design, and we're going to be pursuing it going forward.

02:29.130 --> 02:33.660
Now, let me give you another example of why you don't want to depend on an interface.

02:34.590 --> 02:37.350
Rather than the actual implementation itself.

02:38.040 --> 02:41.760
Let's have both classes implementing the interface.

02:44.110 --> 02:46.840
And when I rerun my application and debug mode.

02:53.220 --> 03:01.980
Indoor app crashes because the field contact service in our contact controller required a single bean

03:01.980 --> 03:05.120
to be injected, but two of them were found.

03:05.130 --> 03:09.290
There are two contact service beans inside of the spring container.

03:09.300 --> 03:11.750
This one and this one.

03:11.760 --> 03:15.630
And Spring Boot has no idea which one to inject.

03:16.950 --> 03:18.300
So it gets confused.

03:18.300 --> 03:22.230
Then it crashes inside of application properties.

03:22.230 --> 03:27.120
Add a server dot port equals 8080.

03:28.440 --> 03:29.310
All right.

03:29.490 --> 03:35.000
And now let's just say that for whatever reason, I want this beam to be created.

03:35.010 --> 03:41.970
If the server port is 80, 80, and I want this beam to be created if the port is 1990.

03:42.570 --> 03:46.860
What I can do is define a conditional based on this property.

03:46.980 --> 03:48.450
So here I can say.

03:49.620 --> 03:52.440
Add conditional on property.

03:54.600 --> 04:03.240
So this being is going to be created on the condition that the property that's named server port.

04:04.460 --> 04:05.660
Has a value.

04:05.690 --> 04:06.920
Having value.

04:08.330 --> 04:08.780
Um.

04:08.780 --> 04:11.240
I think we said we wanted this one to be 80.

04:11.330 --> 04:11.840
You know what?

04:11.840 --> 04:17.990
If the server port is 9090, then we will allow spring boot to create a been out of this implementation.

04:18.200 --> 04:20.210
And we'll go over here and we'll say.

04:21.390 --> 04:25.830
On the condition that the server port property is 8080.

04:26.280 --> 04:32.430
Then we will allow Spring Boot to create a bean out of the following implementation.

04:35.170 --> 04:37.000
Conditional on property.

04:38.670 --> 04:45.070
And when Spring Boot creates an object out of this class, then its constructor will get called.

04:45.090 --> 04:47.190
In which case, let's just.

04:48.950 --> 04:52.160
We'll print something like created the better.

04:53.570 --> 04:56.300
Contact service implementation.

05:01.080 --> 05:06.270
And if spring boot ends up creating a bean out of the following.

05:07.440 --> 05:09.690
Then its constructor will get called.

05:11.690 --> 05:16.400
Contact service implementation, in which case we can just print.

05:17.480 --> 05:21.170
Created the contact service implementation.

05:25.170 --> 05:25.380
Okay.

05:25.470 --> 05:28.230
Let's run the application and debug mode.

05:37.390 --> 05:38.080
Okay.

05:38.080 --> 05:38.920
Um.

05:39.930 --> 05:41.760
The port is 8080.

05:41.760 --> 05:44.040
So it should have created the better one.

05:44.190 --> 05:46.260
Let's just control find better.

05:46.960 --> 05:47.540
There you go.

05:47.560 --> 05:50.050
It created the better contact service implementation.

05:50.170 --> 05:55.300
And if I were to change this property to 1990.

06:01.090 --> 06:03.280
We would have to rerun our code.

06:10.850 --> 06:13.100
And we should see the following message.

06:14.680 --> 06:14.970
Okay.

06:14.980 --> 06:22.120
Now, all of that was to show you that you can achieve loose coupling when a controller relies on an

06:22.120 --> 06:26.150
interface rather than the actual implementation itself.

06:26.170 --> 06:31.870
We're going to follow what I believe to be a good practice of keeping our code loosely coupled.

06:31.900 --> 06:36.340
Now, this is only for a demonstration purposes, so we will go ahead and remove it.

06:38.030 --> 06:43.010
And we do not actually need this, quote, unquote, better service implementation.

06:43.550 --> 06:44.480
All right.

06:44.480 --> 06:47.820
This should be just as we left it before.

06:47.840 --> 06:53.720
So I will see you in the next video where we're going to define a gut operation that is able to access

06:53.720 --> 06:56.000
a resource from the following.

06:56.270 --> 06:57.020
See you soon.
