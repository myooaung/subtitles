WEBVTT

00:00.240 --> 00:03.990
Remember that relationships can create a link between two tables.

00:04.230 --> 00:09.750
So far you looked at a unidirectional many to one relationship where the foreign key lives inside of

00:09.750 --> 00:10.830
the child table.

00:11.070 --> 00:15.240
In this lesson, you will define a bidirectional one to many relationship.

00:15.780 --> 00:16.950
So here is my task.

00:16.950 --> 00:20.190
I want to query Harry's grades right now in our app.

00:20.190 --> 00:24.750
The way we have it set up is there's a uni directional many to one relationship.

00:24.960 --> 00:29.700
So if I want to query Harry's grade, I can do it directly from the grade table.

00:31.460 --> 00:32.840
But I can't do anything.

00:32.840 --> 00:35.300
I cannot access anything from the student table.

00:35.900 --> 00:41.420
That's why we need to set up a bidirectional one to many relationship, because it's going to provide

00:41.420 --> 00:44.210
navigational access from both sides.

00:44.480 --> 00:47.900
So on the child side, we say there is a many to one relationship.

00:47.900 --> 00:50.300
Many grades belong to one student.

00:52.190 --> 00:55.730
And on the parent side, we say there is a one to many relationship.

00:55.730 --> 01:02.180
One student is associated with many grades, and just like that, we have a bidirectional relationship.

01:02.210 --> 01:07.550
Now, another thing in this case, the owner of the relationship is the one who is managing the foreign

01:07.550 --> 01:08.450
key column.

01:08.570 --> 01:14.630
So because the grade table is the owner of the relationship on the other side, we need to put the mapped

01:14.630 --> 01:15.710
by parameter.

01:17.170 --> 01:20.330
What mapped by does is it tell spring JPA?

01:20.400 --> 01:25.720
Hey, the other table is the owner of this relationship, so please don't create another join table

01:25.720 --> 01:26.530
or anything.

01:26.530 --> 01:28.300
We'll talk about join tables later.

01:28.300 --> 01:34.900
But as a rule of thumb but mapped by goes on the side that isn't the owner of the relationship.

01:42.980 --> 01:49.910
So in order for this relationship to be bidirectional from the child side, we're saying that many grades

01:49.910 --> 01:52.160
belong to one student.

01:53.040 --> 01:54.840
And now from the parent side.

01:55.610 --> 02:02.270
We need to specify that one student associates with many grades, so we're going to have a one to many

02:02.270 --> 02:08.060
relationship between one student and a list of grades.

02:11.050 --> 02:12.270
But that's not enough.

02:12.280 --> 02:14.140
Now we need to tell Spring JPA.

02:14.170 --> 02:19.060
The relationship is already being mapped by the owner of this relationship, the one that's managing

02:19.060 --> 02:22.150
the foreign column, which binds our two tables together.

02:22.180 --> 02:27.250
If you don't put mapped by if I were to view the H two console right now, this is what we would have.

02:27.370 --> 02:31.570
Spring is going to create a join table in an attempt to map the relationship.

02:31.600 --> 02:33.940
We absolutely do not want that.

02:34.360 --> 02:38.890
We want to set map to buy equal to the property that maps the relationship.

02:42.730 --> 02:45.550
And make sure the string is an exact match.

02:47.570 --> 02:52.110
And by doing that, we're instructing JPA do not create another joint table.

02:52.130 --> 02:55.130
The relationship is already being mapped over here.

02:55.280 --> 02:55.820
Perfect.

02:55.820 --> 03:01.580
Now we have navigational access from both sides, and we do get some errors because now the complete

03:01.580 --> 03:04.730
constructor is going to expect for parameters.

03:08.490 --> 03:09.900
So here's what we'll do.

03:09.930 --> 03:14.550
Back over to my student entity.

03:15.180 --> 03:20.150
Instead of an all ARGs constructor, we're going to say required args constructor.

03:20.160 --> 03:24.540
We want a constructor that only updates a certain number of fields.

03:24.540 --> 03:26.600
Which fields is it going to update?

03:26.610 --> 03:29.370
Well, the ones that are non null.

03:29.550 --> 03:33.990
So we're going to mark this field as non null.

03:34.900 --> 03:36.160
And this one as well.

03:41.720 --> 03:46.250
I can go back here and remove all the IDs because they will be auto generated.

03:51.350 --> 03:57.590
So now every time we create a new student object, it's going to update these two fields with these

03:57.590 --> 03:58.820
two parameters.

04:01.620 --> 04:09.000
The ID at first is going to be null, but that's fine because it will eventually be auto generated and

04:09.000 --> 04:11.340
we don't care about this being null right now.

04:12.090 --> 04:15.360
As our opera runs, our four students will get submitted.

04:15.360 --> 04:16.620
So let's query them.

04:19.220 --> 04:22.310
I'll copy this because it will prompt me to reconnect.

04:24.530 --> 04:26.260
And it's not even doing that.

04:26.270 --> 04:26.780
So.

04:28.400 --> 04:28.750
Oh.

04:28.760 --> 04:30.620
Do we have an error of some sort?

04:32.440 --> 04:33.280
Let's see.

04:37.820 --> 04:38.750
The constructor.

04:38.780 --> 04:41.720
Student Long string local date.

04:45.670 --> 04:47.690
And it seems to be confused.

04:47.710 --> 04:51.700
So what I'm going to do is just restart the app.

05:06.070 --> 05:06.580
Okay.

05:06.610 --> 05:07.780
Much better now.

05:15.340 --> 05:18.100
Here we can see our four students are submitted.

05:18.100 --> 05:22.600
Let's make a get request from Postman and Access the student with an ID of one.

05:27.010 --> 05:33.970
And we see that now the student has a grades property so as get student returns back this record as

05:33.970 --> 05:34.990
an object.

05:35.880 --> 05:40.980
All four fields are serialized into JSON before being returned to the consumer.

05:41.010 --> 05:47.280
This one gets converted into a JSON array, but right now Harry doesn't have any grades, so the array

05:47.280 --> 05:47.910
is empty.

05:48.180 --> 05:49.530
Looking good so far.

05:49.950 --> 05:57.000
But unfortunately when we end up returning a student entity and then serializing all of its fields into

05:57.000 --> 06:04.050
JSON properties, we cannot allow the list of entities to be part of the serialization process.

06:04.050 --> 06:07.650
So we have to put JSON ignore over here.

06:08.250 --> 06:13.920
We don't want this to be part of the JSON that gets sent back and I'll explain why very soon.

06:14.070 --> 06:19.350
What I'm going to do now is create a temporary method inside of the student service implementation.

06:19.920 --> 06:21.960
And I'm just going to call this method.

06:22.880 --> 06:24.110
Print grids.

06:26.790 --> 06:29.040
It's going to receive a student entity.

06:31.520 --> 06:35.360
And it's just going to loop through every single grade from the grades list.

06:49.070 --> 06:54.380
And for every grade that we iterate through, we're going to print the score, grade dot, get score.

06:57.490 --> 06:58.060
All right.

06:58.060 --> 07:00.700
And as we retrieve a student.

07:01.540 --> 07:02.830
We're just going to call.

07:03.570 --> 07:04.680
Print grades.

07:07.000 --> 07:09.160
It's going to perform the query twice for now.

07:09.160 --> 07:13.300
But whatever this method is temporary, we're going to be deleting it very soon.

07:14.090 --> 07:17.360
Now I'm going to go back and save two grades for Harry.

07:22.220 --> 07:24.290
I'll give Harry one A-plus.

07:26.140 --> 07:27.760
And I'll give him a D-plus.

07:32.750 --> 07:33.890
Let's refresh.

07:34.070 --> 07:35.990
See if everything is working properly.

07:38.410 --> 07:38.950
It is.

07:38.950 --> 07:40.960
Harry has an A+ and a D plus.

07:41.780 --> 07:45.280
I've got four students, two grades, all belonging to Harry.

07:45.290 --> 07:47.240
So if I query Harry.

07:51.760 --> 07:57.610
And so the first thing you'll notice is that as Spring Boot was returning the student entity, it ignored

07:57.610 --> 08:00.550
the grades field during the serialization process.

08:01.030 --> 08:04.420
And now from here I can see that all of Henry's grades were printed.

08:06.070 --> 08:12.010
So over here we were actually able to access all of the grades from the student entity, from the parent

08:12.010 --> 08:12.700
side.

08:13.170 --> 08:13.380
Okay.

08:13.420 --> 08:17.890
But just because we now have two way access, it doesn't mean that now I'm going to go start setting

08:17.890 --> 08:22.600
up another handler method in the student controller that says Get the students grades.

08:23.500 --> 08:28.240
I'm already accessing the grade data from the greater repository and I'm satisfied with that.

08:28.240 --> 08:32.710
So I'm going to go back to the student service implementation and delete this method.

08:32.740 --> 08:37.630
It was just to show you that now we have navigational access from both sides.

08:38.360 --> 08:39.560
And we're good.

08:39.770 --> 08:45.110
The reason we made the relationship bi directional is because we have a very big bug in our app right

08:45.110 --> 08:45.530
now.

08:45.530 --> 08:47.480
We will address that bug in the next video.

08:47.480 --> 08:48.620
Don't worry about it for now.

08:48.620 --> 08:54.590
But before we wrap up, I want to talk about why I put this JSON ignore field.

08:55.840 --> 08:57.010
Just follow for now.

08:57.040 --> 08:59.620
Don't do what I'm doing inside the command line.

08:59.620 --> 09:00.030
Runner.

09:00.040 --> 09:02.650
I'm going to paste in the following grade.

09:07.580 --> 09:07.820
Um.

09:08.030 --> 09:09.030
Let's just auto wire.

09:09.050 --> 09:10.100
Great repository.

09:23.350 --> 09:25.060
Let's go to the H two database.

09:31.080 --> 09:31.950
And there you go.

09:32.520 --> 09:34.650
Now, if I remove Jason, ignore.

09:38.140 --> 09:40.690
And I'm going to try to query Harry Potter.

09:46.150 --> 09:48.310
The request gets aborted.

09:49.200 --> 09:51.120
We can't really tell what's happening here.

09:51.120 --> 09:55.140
So what I'm going to do is make this same get request from the terminal.

09:55.710 --> 09:57.180
So I'm going to say Curl.

09:58.680 --> 10:00.180
And copy this path.

10:03.430 --> 10:04.120
All right.

10:04.120 --> 10:05.390
And what is all this junk?

10:05.410 --> 10:07.300
Let's crawl all the way to the top.

10:11.610 --> 10:19.530
And the reason why we get this recursive loop is because as spring boot tries to serialize every field

10:19.530 --> 10:22.770
into a JSON property, it starts with the ID.

10:22.830 --> 10:24.150
Okay, that's fine.

10:24.360 --> 10:27.570
Followed by the name and then the birth date.

10:28.140 --> 10:33.540
And once we get to grades, every grade entity references a student.

10:33.540 --> 10:36.000
So now it starts going in a loop.

10:36.030 --> 10:42.600
The grades contains a student, starts serializing the student again data and then you get this loop

10:42.600 --> 10:44.100
that never ends.

10:44.100 --> 10:47.730
So as we send back the student, we need to tell Spring Boot.

10:47.760 --> 10:53.880
As you're serializing every single field into a JSON property, please just ignore this one.

10:53.880 --> 10:55.050
We don't want to send it back.

10:55.050 --> 10:56.100
It's troublesome.

10:56.910 --> 11:00.930
So to recap, you set up a bidirectional one to many relationship.

11:00.930 --> 11:04.380
So on the child side we say there is a many to one relationship.

11:04.380 --> 11:10.260
Many grades belong to one student, and on the parent side we say there is a one to many relationship.

11:10.260 --> 11:16.560
One student is associated with many grades, and just like that, we have navigational access from both

11:16.560 --> 11:17.460
sides.
