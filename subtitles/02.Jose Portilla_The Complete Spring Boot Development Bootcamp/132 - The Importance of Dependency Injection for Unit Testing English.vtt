WEBVTT

00:00.360 --> 00:03.720
Dependency injection is very important for unit testing.

00:06.470 --> 00:10.820
You cannot unit test service when it's tightly coupled to its dependencies.

00:13.310 --> 00:17.900
Service becomes unit testable when it's loosely coupled to its dependencies.

00:20.510 --> 00:23.870
On one hand, the service is creating its dependency.

00:24.530 --> 00:29.600
And on the other hand, the dependency already exists inside the spring container as a bean.

00:29.630 --> 00:31.700
The service is simply using it.

00:34.380 --> 00:34.920
Anyways.

00:34.920 --> 00:36.480
What should we unit test?

00:37.020 --> 00:41.160
We should unit test the service because it contains all of your business logic.

00:41.190 --> 00:44.520
Business logic is most prone to bugs.

00:45.970 --> 00:50.770
In other words, we're going to need a service test class that's entirely devoted to testing the service

00:50.770 --> 00:51.490
class.

00:52.030 --> 00:57.850
The test class contains a unit test for every meaningful piece of logic inside of grade service.

00:59.200 --> 01:05.500
If every unit test passes, then you can rest assured that the grade service doesn't have any bugs.

01:05.680 --> 01:11.080
If one of your tests fails, then there's a bug inside of grade service, so you'll need to fix your

01:11.080 --> 01:13.180
code until the unit test passes.

01:17.780 --> 01:20.720
Once it passes, you'll know that you fixed your bug.

01:23.650 --> 01:24.670
Now here's the catch.

01:24.670 --> 01:28.960
You cannot test the service class when it's tightly coupled to its dependencies.

01:30.860 --> 01:36.680
We need a service test class that's entirely devoted to testing only the service class and nothing else.

01:39.660 --> 01:44.850
In a tightly coupled scenario, great service creates its own repository dependency.

01:45.700 --> 01:49.120
The goal is to test great service in complete isolation.

01:50.790 --> 01:53.360
But the dependency is a disturbance.

01:53.370 --> 01:58.140
The dependency returns data based on logic defined in the repository class.

01:58.170 --> 02:04.230
It interferes with our unit test because we only want to test the logic inside of great service.

02:05.120 --> 02:09.650
Tight coupling means we can never test a great service in complete isolation.

02:11.920 --> 02:14.290
That's why a loose coupling is important.

02:14.290 --> 02:17.800
In loose coupling, the class does not create a dependency.

02:17.800 --> 02:21.580
Rather, the dependency already exists inside of the spring container.

02:21.610 --> 02:23.170
We're simply using it.

02:23.170 --> 02:25.900
Spring injects a bean into the variable.

02:28.870 --> 02:32.100
And so you can achieve dependency injection using auto fired.

02:33.440 --> 02:39.350
But the thing is, when your unit testing, you're not actually starting up the spring boot up, you're

02:39.350 --> 02:42.630
only running the test class and nothing else.

02:42.650 --> 02:45.290
There is no mechanism for component scanning.

02:45.290 --> 02:49.790
There is no spring container, which means there are no beans to inject.

02:49.820 --> 02:53.150
So when you're testing, this variable is actually null.

02:54.920 --> 03:01.200
But because the service class is loosely coupled, we can inject a mock into the variable instead.

03:01.220 --> 03:06.510
The mock can mimic the behavior of a dependency, but it doesn't have any logic of its own.

03:06.530 --> 03:11.870
From the testing class, we can completely control what the mock can or can't return.

03:12.410 --> 03:18.590
So ultimately, using a mock allows you to test grade service in complete isolation.

03:21.480 --> 03:25.500
So to recap, you can only unit test a class when it's loosely coupled.

03:27.060 --> 03:31.160
If service is tightly coupled to its dependency, then you're stuck with it.

03:31.170 --> 03:34.020
You can never test the grade service in isolation.

03:34.020 --> 03:39.030
The dependency logic will always interfere with the great service logic that we want to test.

03:39.480 --> 03:43.860
If the service is loosely coupled, then we can inject a mock instead.

03:43.890 --> 03:49.830
The mock doesn't have any logic of its own, so we can test grade service in complete isolation.
