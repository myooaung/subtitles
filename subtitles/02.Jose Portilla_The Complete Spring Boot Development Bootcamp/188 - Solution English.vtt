WEBVTT

00:00.480 --> 00:02.380
Welcome to part two of your challenge.

00:02.400 --> 00:08.790
Please start by launching the Starter Project and we're going to begin by making four pitch requests.

00:09.360 --> 00:13.140
I'm going to enroll Harry in Charms and Potions.

00:23.590 --> 00:27.420
Then I will enrol, run and charms and transfiguration.

00:33.020 --> 00:33.410
All right.

00:33.410 --> 00:34.580
Looking good so far.

00:35.480 --> 00:39.590
Let me go to my H two database and make sure that everything is working as it should.

00:39.620 --> 00:45.500
I'm going to query the student table, then I'm going to query the course student table.

00:46.100 --> 00:48.380
Then I'll query the course table.

00:50.530 --> 00:53.110
I will copy this for a later press run.

00:53.560 --> 00:54.580
All right.

00:55.030 --> 00:56.080
Everything looks good.

00:56.080 --> 01:01.090
We have Harry and Ron both enrolled in their respective courses.

01:04.200 --> 01:09.720
The next step is to delete the course with an ID of five and we need to validate that it gets deleted

01:09.720 --> 01:10.740
in the course table.

01:10.740 --> 01:12.570
So we'll go to delete course.

01:14.160 --> 01:19.710
Delete that course, make sure everything is working as it should, and you'll notice that its association

01:19.710 --> 01:22.110
inside of the course table gets deleted as well.

01:22.140 --> 01:22.680
All right.

01:22.680 --> 01:23.880
Looking good so far.

01:24.150 --> 01:28.950
And here it's telling you that because course owns the association, that it's able to manage what goes

01:28.950 --> 01:30.870
on inside of the joint table.

01:31.050 --> 01:35.310
But now what happens if we try deleting a student with an ID of two?

01:35.340 --> 01:38.310
Let's go over to our delete request for students.

01:38.310 --> 01:42.420
I will delete run from our database or at least attempt to.

01:43.550 --> 01:47.180
And we get a data integrity violation exception.

01:47.780 --> 01:54.050
The issue is we're trying to delete Iran from our table, but unfortunately the student side, it is

01:54.050 --> 02:00.370
the non owning side and as a result it cannot delete its associations inside of the joint table.

02:00.380 --> 02:05.720
If the deletion of this record were to work, this would end up being null, which violates the integrity

02:05.720 --> 02:06.650
of our data.

02:06.950 --> 02:12.110
So at its core, the problem is that the student side of the relationship is not able to make changes

02:12.110 --> 02:14.450
to the table because it is the non owning side.

02:14.480 --> 02:20.720
We need to fix that because mapped by implies that there is another property on the other side that

02:20.720 --> 02:22.350
is managing the relationship.

02:22.370 --> 02:28.650
In turn, the map to BI also implies that this is the non owning side of the association.

02:28.670 --> 02:31.130
It cannot make changes to the joint table.

02:31.130 --> 02:37.220
So we need to remove map to buy and make sure that the student side also has ownership of the joint

02:37.220 --> 02:40.400
table and is equal in managing the relationship.

02:40.430 --> 02:47.000
Now, before I do this, I want to mention that in some cases you may only want a single side of a many

02:47.000 --> 02:53.900
to many relationship to own the association and as a result, putting mapped by on the non owning side

02:53.900 --> 02:55.010
would be perfect.

02:55.100 --> 03:00.590
But for our purposes we need both sides to be equal and managing the relationship.

03:00.590 --> 03:07.400
So what we're going to do is, as was suggested in the article, remove mapped by and make a reference

03:07.400 --> 03:09.230
to the joint table here as well.

03:10.640 --> 03:15.080
But the only difference is from the perspective of student, it would be the owning side.

03:15.080 --> 03:20.480
So we have to call the student ID and the inverse side of the relationship from the student perspective

03:20.480 --> 03:21.290
would be course.

03:21.290 --> 03:23.450
So we would have to call this course ID.

03:27.590 --> 03:30.310
So now we basically have two owning sides.

03:30.320 --> 03:36.640
Both of them are equal in managing the relationship and both are referencing the exact same table.

03:36.650 --> 03:37.670
We should be good.

03:37.670 --> 03:38.900
Now let's try it out.

03:38.930 --> 03:40.640
What is our next task?

03:40.640 --> 03:43.100
We need to make two push requests.

03:43.100 --> 03:46.850
So let's go back to enroll student.

03:46.850 --> 03:49.190
Let's enroll Harry in Charms.

03:50.910 --> 03:54.720
And that's enrol Ron and charms as well.

03:55.800 --> 04:02.130
Now we're going to delete the student with an ID of two and ideally it should delete him as well as

04:02.130 --> 04:05.310
all of his respective associations inside the joint table.

04:05.310 --> 04:06.510
Let's test it out.

04:11.800 --> 04:13.720
And this works beautifully.
