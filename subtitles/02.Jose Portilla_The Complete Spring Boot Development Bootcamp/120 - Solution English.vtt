WEBVTT

00:00.270 --> 00:02.040
Welcome to another challenge.

00:02.040 --> 00:07.410
And this one, we're going to refactor our code because if you have a quick look at the controller,

00:07.410 --> 00:12.030
we barely added any features and it's already looking really messy.

00:12.390 --> 00:18.570
This means our code is not scalable because if we were to add even more features, it would just look

00:18.570 --> 00:19.950
really, really bad.

00:19.950 --> 00:22.290
So we need to refactor our code base.

00:22.470 --> 00:26.850
First thing we're going to do is create a repository layer, place the data store there and as well

00:26.850 --> 00:28.980
as every single crud operation.

00:29.070 --> 00:34.380
So I will create a new file called Store Repo Java.

00:35.640 --> 00:37.260
Store repository dot java.

00:38.350 --> 00:38.980
All right.

00:38.980 --> 00:43.750
And inside of this class, I'm going to move the data store.

00:46.210 --> 00:49.120
Make it private so that it's only invisible here.

00:49.990 --> 00:53.740
Import the list and import the array list.

00:55.490 --> 00:56.480
Sweet.

00:56.810 --> 01:04.010
And now the next thing we need to do is move every crud operation that's in the controller to the repository.

01:04.310 --> 01:08.740
So here we're retrieving an object at a particular index.

01:08.750 --> 01:11.270
This represents the r and crud.

01:12.050 --> 01:18.950
So here, what we need to do is define an operation that grabs an item at a particular index.

01:24.030 --> 01:26.540
It's going to return items.

01:27.050 --> 01:31.790
Get the item at the following index.

01:33.140 --> 01:34.760
We'll leave this error for now.

01:36.180 --> 01:40.470
Here, we're creating an item and adding it to our data store.

01:40.500 --> 01:50.190
This represents the C in CRUD so we can go back to store repo and say public void add item.

01:51.140 --> 01:54.620
And we can say items add.

01:57.570 --> 01:59.880
And we will add the item being passed in.

02:01.780 --> 02:02.440
Okay.

02:05.670 --> 02:09.860
And here we're also retrieving an object at a particular index.

02:09.870 --> 02:12.060
We already have a method for that here.

02:12.060 --> 02:14.760
We're updating an object at a particular index.

02:14.760 --> 02:16.840
This represents the you in crud.

02:16.860 --> 02:26.220
So here we'll say public void update item and we're going to update an item at a particular index.

02:26.430 --> 02:29.580
And here we can just say items dot set.

02:31.800 --> 02:32.430
Item.

02:38.510 --> 02:42.660
So this grabs every single element inside of the ArrayList.

02:42.680 --> 02:44.540
We can go ahead.

02:46.260 --> 02:51.600
And just say public, I will return the list of items.

02:55.450 --> 02:56.800
Get items.

02:57.920 --> 03:00.410
And it's just going to return the array list.

03:02.960 --> 03:07.250
Now you might be wondering what the heck's the point of making this private if we're just going to return

03:07.250 --> 03:08.420
all of it anyways?

03:08.720 --> 03:14.640
You have to realize that in real life you're not using an ArrayList to store your data.

03:14.660 --> 03:18.650
So even though we're returning a reference to the items array list.

03:23.620 --> 03:28.610
You have to realize that in real life you're not going to be using an array list to store your data.

03:28.630 --> 03:31.030
You'll be using an actual data store.

03:32.600 --> 03:38.600
So while this method here is returning a reference that points to the entire array list in real life,

03:38.600 --> 03:42.350
what this method would be doing is actually querying the data from our database.

03:42.350 --> 03:48.140
So let's not put too much thought into it, except for the fact that we're refactoring our code base

03:48.140 --> 03:51.500
so that all CRUD operations are made here.

03:52.280 --> 03:53.450
All right.

03:55.380 --> 03:55.650
Here.

03:55.650 --> 03:59.970
We're grabbing an item at a particular index and that's it.

04:00.150 --> 04:06.240
I think now we're ready to move on to task, to place all business and decision making logic inside

04:06.240 --> 04:07.140
the service layer.

04:07.140 --> 04:11.760
And it's the layer that handles the business logic which should be making calls to the repo.

04:12.150 --> 04:17.220
We will start with bullet point number two, because we already have all these errors that we can resolve

04:17.220 --> 04:23.220
by starting off with creating a new service Java file.

04:24.970 --> 04:30.700
And the store service is going to act as the middleman between the controller and the repository, because

04:30.700 --> 04:34.780
it's the layer that handles the business logic that should be making calls to the repo in the first

04:34.780 --> 04:35.380
place.

04:35.650 --> 04:40.690
So the easiest way to do this is to just copy the following.

04:41.960 --> 04:43.370
And paste them over here.

04:44.390 --> 04:45.000
And now here.

04:45.020 --> 04:47.720
Create a new object of a store repo.

04:51.440 --> 04:53.420
New store repository.

04:55.140 --> 05:00.780
And here I can say return store repo dot get item.

05:03.130 --> 05:04.210
Store repo.

05:04.600 --> 05:05.560
Ad item.

05:07.000 --> 05:09.490
Story Podcast Update item.

05:13.220 --> 05:17.060
And store repo dot get items.

05:20.930 --> 05:26.450
And now it can finally resolve these errors because the controller, instead of making its own CRUD

05:26.450 --> 05:31.890
operations, it's going to call upon the service class to in turn make calls to the repo.

05:31.910 --> 05:37.710
So here we'll actually have to create a new object of the store service, not the great service.

05:37.730 --> 05:39.290
I keep getting those mixed up.

05:42.250 --> 05:45.760
Here, I can say store service.

05:45.950 --> 05:46.870
Dot get.

05:51.950 --> 05:53.930
Story service dot ad.

06:11.140 --> 06:13.540
Story Service dot update.

06:21.040 --> 06:21.670
Um.

06:21.670 --> 06:22.570
What's the error?

06:23.590 --> 06:25.030
The parameters are mixed up.

06:30.150 --> 06:30.700
Um.

06:30.720 --> 06:33.420
Storage service get items.

06:35.360 --> 06:36.260
Here to.

06:39.550 --> 06:42.610
And here we get an item at a particular index.

06:47.930 --> 06:48.120
Okay.

06:48.230 --> 06:50.930
So this has been resolved.

06:52.920 --> 06:59.130
The next thing we have to do is place all of the business and decision making logic inside the service

06:59.130 --> 06:59.670
layer.

07:00.270 --> 07:03.960
Okay, so we'll start from the top down.

07:04.650 --> 07:11.230
So from first glance I can see get index from ID has business logic that does not belong here.

07:11.370 --> 07:14.460
We can copy it over to store service.

07:19.210 --> 07:20.740
Make the following changes.

07:25.990 --> 07:28.240
Now we can safely remove this.

07:29.570 --> 07:32.710
From the controller class within five days.

07:32.710 --> 07:33.990
It should not be here.

07:34.010 --> 07:36.440
It should be inside of store service.

07:38.840 --> 07:40.610
Import the appropriate classes.

07:40.910 --> 07:43.910
Not Java Util, not java SQL Java.

07:44.120 --> 07:47.030
You tell be careful what you import.

07:52.040 --> 07:52.530
Okay.

07:55.730 --> 07:56.660
We're good here.

07:58.620 --> 07:59.220
And now this.

07:59.220 --> 08:05.850
Here is a decision making process that does not belong inside of handle submit inside.

08:05.850 --> 08:08.190
What I'm going to do is delete it.

08:11.180 --> 08:13.610
And I'm going to create a new function.

08:14.340 --> 08:17.520
Public string handle submit.

08:17.520 --> 08:22.680
It's going to return a string that represents the status of the submission, a value that's needed for

08:22.680 --> 08:24.000
the flash attribute.

08:24.820 --> 08:25.690
And.

08:27.630 --> 08:30.030
The status starts off as success here.

08:30.030 --> 08:30.810
It's updated.

08:30.810 --> 08:34.620
We'll return status by the end of the operation.

08:36.510 --> 08:39.600
Get index from ID item get ID.

08:39.600 --> 08:41.310
Oh, it seems.

08:42.550 --> 08:44.400
Now we're going to have to add an item here.

08:46.590 --> 08:47.190
Okay.

08:55.200 --> 08:56.100
Looking good.

08:59.480 --> 09:07.670
And so now here we can just say store service, dot handle, submit, and we will get the status of

09:07.670 --> 09:08.570
the submission.

09:10.780 --> 09:16.930
Now, I'm not going to move this anywhere because either we could call a function that performs this

09:16.930 --> 09:19.470
comparison or we can just do it directly.

09:19.480 --> 09:23.530
In this case, I think it actually might be easier to just do it directly.

09:24.650 --> 09:33.650
And here we're deciding which object to add to our model depending on whether the index was found or

09:33.650 --> 09:34.310
not.

09:34.460 --> 09:41.000
So what I'm going to do is go to store service and create a function that says.

09:43.170 --> 09:50.490
Uh, well, create a function that returns an object based on an ID, so we'll say get item from ID.

09:52.830 --> 09:58.380
It's going to receive a string ID, which is the ID parameter that's passed back from the get request.

09:58.590 --> 10:02.340
And here we can say if the index.

10:05.280 --> 10:06.270
Is not found.

10:06.300 --> 10:08.240
Then we'll return a new item.

10:08.250 --> 10:10.950
Otherwise, we'll return the item that was found.

10:13.280 --> 10:18.200
And now back in store controller, we can just say model dot ad attributes.

10:20.790 --> 10:26.160
Story service dot get index or no get.

10:26.870 --> 10:28.220
Item from ID.

10:28.280 --> 10:29.000
ID.

10:32.150 --> 10:38.930
And just like that, we refactored our code and this is looking a lot better.

10:38.960 --> 10:43.640
The only thing the controller is doing is managing the model and presenting the view.

10:44.210 --> 10:49.460
The store service takes care of all the business logic, and it's the layer that handles the business

10:49.460 --> 10:51.980
logic that should be making calls to the repo.

10:51.980 --> 10:58.400
And it's the repo that performs the CRUD operations needed to create, read, update, or delete data

10:58.400 --> 10:59.630
from the data store.

11:02.490 --> 11:06.060
I'm just going to run the application to make sure that everything still works.

11:06.060 --> 11:07.530
And we didn't miss anything.

11:23.840 --> 11:25.400
Let's submit some data.

11:30.870 --> 11:31.830
Looks good.

11:32.130 --> 11:35.160
I'll update the item to have an order dates.

11:35.700 --> 11:38.310
That's way beyond what it should be.

11:39.030 --> 11:40.800
You fail to submit the item.

11:41.780 --> 11:42.410
I will.

11:44.530 --> 11:47.890
Make the date something more correct.

11:48.400 --> 11:49.580
Looking good.

11:50.950 --> 11:55.420
I will submit incorrect values to test out our annotations.

11:59.700 --> 12:00.720
Looks good.

12:01.290 --> 12:04.050
I will test out the cross field validation.

12:09.990 --> 12:13.350
We'll say five bucks with a discount of ten.

12:14.410 --> 12:14.840
Okay.

12:14.890 --> 12:19.960
Everything still seems to be working well, and our code was refactored to look a lot better.
