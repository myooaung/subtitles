WEBVTT

00:00.180 --> 00:01.950
Welcome to Workbook 9.1.

00:01.950 --> 00:05.970
In this workbook, we're going to prepare the rest end points for the student controller.

00:06.000 --> 00:11.340
We're now workbooks 9.2 and 9.3 all follow a very similar theme.

00:11.340 --> 00:17.220
And the reason we're doing this is because once we officially start our first lesson in the SQL section,

00:17.220 --> 00:20.490
I just want to worry about the SQL portion of things.

00:20.490 --> 00:22.560
I want this to already be set up.

00:22.560 --> 00:27.690
Now, if you already feel comfortable with the rest and the concepts that we learned in the rest API

00:27.690 --> 00:33.450
section, you can feel free to skip these workbooks and just launch the starter project for the first

00:33.450 --> 00:35.430
lesson in the SQL section.

00:35.550 --> 00:40.350
But if you want to get some more practice with rest, then feel free to follow along.

00:41.460 --> 00:44.400
Start by launching the starter project for a book 9.1.

00:44.400 --> 00:49.890
I've already gone ahead and done that, and this workbook starts with a note about the request mapping

00:49.890 --> 00:52.200
annotation, which we have not covered yet.

00:52.200 --> 00:54.150
But this is very, very useful.

00:54.180 --> 01:00.840
What this is going to do is map any web request that starts with slash student to our student controller.

01:00.840 --> 01:09.000
This is very useful because let's assume we have a bunch of get post put and delete operations.

01:09.000 --> 01:14.850
If all of them happen to start with the path slash student, then instead of repeating that over and

01:14.850 --> 01:21.780
over and over, we can just map any web request that starts with slash student to our student controller

01:21.780 --> 01:23.250
and go from there.

01:23.610 --> 01:24.510
All right.

01:25.710 --> 01:31.920
Task one is we need a method that handles get requests made on slash students that returns the following

01:31.920 --> 01:38.820
response entity name get student expects a path variable of long ID and just returns a status code of

01:38.850 --> 01:39.420
200.

01:39.450 --> 01:41.430
All right, I think I've memorized that.

01:41.430 --> 01:43.290
Let me just go to my controller.

01:46.010 --> 01:47.780
We'll say get to mapping.

01:48.750 --> 01:56.130
And now we're going to map any request that is made on slash student slash some variable ID to the following

01:56.130 --> 01:59.430
handler method public response entity.

02:00.030 --> 02:04.380
This method is going to return a student that gets serialized into JSON.

02:05.630 --> 02:12.770
Called Get student, if I remember correctly, and this expects a path variable of long ID.

02:13.070 --> 02:19.340
So we expect the consumer to send us an identifier of type long a numeric identifier and now we're going

02:19.340 --> 02:25.160
to return a new response entity, I believe for now we're not returning any data.

02:25.160 --> 02:29.210
We're just going to return a status code of 200 HTTP status.

02:29.540 --> 02:30.290
Okay.

02:30.320 --> 02:32.210
Let me go ahead and run my code.

02:32.210 --> 02:36.980
Now, I know we didn't write much, but let's just test every single handler method that we set up.

02:42.070 --> 02:42.820
Looking good.

02:43.150 --> 02:48.760
And here it tells us inside postmen to create a collection called Grade Requests.

02:48.790 --> 02:50.530
Let me start by doing that.

02:50.560 --> 02:54.970
Press the plus button and here I will rename this.

02:55.720 --> 02:57.820
Two great requests.

02:58.420 --> 02:59.050
All right.

02:59.050 --> 03:02.640
Inside the collection, create a request called Read Student.

03:02.650 --> 03:05.080
That's going to make a guest request.

03:05.560 --> 03:09.640
Add a request, call it get.

03:09.670 --> 03:10.720
Was it read student?

03:10.720 --> 03:11.860
I think it was.

03:13.290 --> 03:16.470
And it's going to make a great request on local hosts.

03:16.500 --> 03:19.500
80, 80 slash student slash one.

03:20.850 --> 03:21.210
Okay.

03:21.240 --> 03:26.250
So this request, because it starts with slash student, it's going to get mapped to this controller

03:26.250 --> 03:28.680
and it's going to get routed to this handler method.

03:28.860 --> 03:30.030
Let's try it out.

03:31.750 --> 03:32.140
Okay.

03:32.140 --> 03:35.690
A just sends back a status of okay, that's good so far.

03:35.710 --> 03:41.760
Let's move on to our next task, which is to set up a method that can handle post requests made on Slack

03:41.770 --> 03:45.010
student and you'll notice that nothing comes after slash students.

03:45.010 --> 03:48.160
So our path for the post mapping will be empty.

03:48.490 --> 03:51.730
It will return the same response entity.

03:51.760 --> 03:53.650
It's going to be called save student.

03:54.190 --> 04:00.460
Whatever JSON we send through the post request will be serialized into a Java object and it's going

04:00.460 --> 04:06.940
to return a response entity which we serialize whatever object we receive into a JSON.

04:06.940 --> 04:08.110
All right.

04:09.690 --> 04:11.360
So we'll say post mapping.

04:11.370 --> 04:15.540
The request is going to be made on slash student and we don't need to put anything here.

04:15.570 --> 04:18.360
We'll say public response entity.

04:25.440 --> 04:27.600
It's going to be called safe students.

04:27.810 --> 04:33.900
And now whatever payload that we receive from the post request, we're going to serialize the properties

04:33.900 --> 04:36.870
of that JSON into a Java object.

04:39.210 --> 04:42.510
And now we can return a new response entity.

04:42.630 --> 04:47.640
And over here that object is going to be re serialized into JSON.

04:48.630 --> 04:51.780
And then we'll say HTTP status created.

04:53.510 --> 04:54.410
All right.

04:55.010 --> 05:00.110
And now inside the Greater Trust Collection, create a request called Create Student, and it's going

05:00.110 --> 05:03.920
to make a post request that sends whatever JSON is there.

05:03.920 --> 05:06.200
Let's add a new post request.

05:08.370 --> 05:11.130
We'll rename this to Create Student.

05:14.000 --> 05:19.040
And it's going to make a request on local hosts, 80, 80 students.

05:23.880 --> 05:29.580
It will be a post request and we're going to send over the following data.

05:34.090 --> 05:34.810
All right.

05:34.810 --> 05:42.280
So by virtue of sending this JSON, its properties are going to get D serialized into this Java object

05:42.280 --> 05:45.480
because we're not sending an ID as part of the payload.

05:45.490 --> 05:52.330
Then our set ID setter is never going to get called and the ID field for the student object is going

05:52.330 --> 05:53.410
to remain null.

05:53.560 --> 06:00.580
Which is why when this object gets re serialized into JSON, it sends back three properties where one

06:00.580 --> 06:03.430
of them is null and the other two were populated.

06:03.790 --> 06:07.570
OC looking good so far and this is what we were expecting anyways.

06:07.930 --> 06:13.720
And now if you want to visualize how as soon as we receive the post request, a new student object is

06:13.720 --> 06:19.480
created and each property inside the JSON based on its name, it's going to invoke one of the object

06:19.480 --> 06:20.080
setters.

06:20.080 --> 06:24.280
You can feel free to rerun this in debug mode, but we've already covered this in the last section,

06:24.280 --> 06:26.050
so I'm going to skip that.

06:26.080 --> 06:27.910
Let's just move on with this one.

06:28.330 --> 06:34.000
The next task is to create a method that can handle delete requests once again made on slash student.

06:34.000 --> 06:38.920
But it does expect a path variable of long ID which needs to be part of our path.

06:38.920 --> 06:41.350
So we're going to go back over here.

06:41.620 --> 06:43.450
We'll say delete mapping.

06:44.780 --> 06:51.920
Whatever delete request it's going to be slash student and ID variable is going to be part of the path.

06:52.800 --> 06:54.120
And now back here.

06:55.210 --> 07:01.810
Whatever delete request is made is going to be mapped to a method that returns a response entity.

07:03.020 --> 07:05.300
That Centre back initiative status code.

07:05.600 --> 07:07.940
The method is going to be called delete student.

07:08.180 --> 07:10.340
It expects a path variable.

07:11.670 --> 07:13.860
Of long ID.

07:14.640 --> 07:21.690
And right over here we're just going to say return you response entity, HTTP status, no content.

07:23.860 --> 07:24.550
OC.

07:27.130 --> 07:28.900
Inside the great request collection.

07:28.900 --> 07:32.650
Create a request called delete student and make a delete request.

07:32.980 --> 07:33.940
Sounds good.

07:34.810 --> 07:35.890
At a request.

07:36.520 --> 07:42.280
By the way, you'll notice that we specified this as a post request, but it still shows that it's a

07:42.310 --> 07:43.720
get request over here.

07:43.750 --> 07:48.190
You just need to save your file by pressing commands.

07:48.220 --> 07:53.530
If you're using a mac or control as if you're using windows, you'll know that it was saved once the

07:53.530 --> 07:54.760
dot is gone.

07:54.790 --> 07:56.470
Do the same thing over here.

07:57.040 --> 07:58.390
It's always good to save.

07:58.390 --> 08:02.290
And we're going to call this one delete student.

08:04.390 --> 08:07.960
And it's going to make a delete request to local host.

08:08.670 --> 08:11.760
8080 slash student slash some ID.

08:13.300 --> 08:14.710
Call this delete.

08:15.740 --> 08:17.170
Let's go out and make their quest.

08:17.180 --> 08:19.810
It should just send back a status code of no content.

08:19.820 --> 08:21.170
Looking good so far.

08:22.580 --> 08:30.560
And one last request is one that returns every single student that will be in our database eventually,

08:30.560 --> 08:34.390
but for now is just going to return a response entity with no data.

08:34.400 --> 08:36.650
So we'll say get to mapping.

08:37.310 --> 08:42.170
It's going to expect a request made on slash student slash all.

08:43.590 --> 08:47.400
Then I will say public response entity.

08:51.200 --> 08:58.880
It's going to return a list of students and that list of students will get serialized into a JSON collection.

08:59.360 --> 09:01.670
We're going to call this Get Students.

09:03.700 --> 09:05.410
I'll import the less class.

09:06.340 --> 09:12.490
And here I'm just going to return a new response entity with HTTP status of OC.

09:12.520 --> 09:17.680
We're not going to be sending any data yet because, well, we don't have a database or any data set

09:17.680 --> 09:21.970
up, but let's just set up our APIs methods.

09:22.990 --> 09:24.700
I think that should be it.

09:25.630 --> 09:30.010
Now we cheat to make create a new request called the Read students.

09:30.370 --> 09:32.950
So here I'll say add request.

09:34.970 --> 09:36.620
Reed students.

09:37.250 --> 09:40.400
We're going to be making a request on local hosts.

09:40.430 --> 09:43.130
88 slash student slash all.

09:43.860 --> 09:45.220
Oh, don't forget to save this.

09:45.230 --> 09:47.220
It should say delete OC.

09:48.160 --> 09:48.670
Over here.

09:48.670 --> 09:51.460
We'll make a request to slash student slash all.

09:52.410 --> 09:54.120
And we're looking good.

09:55.030 --> 09:56.800
Final touches save every request.

09:56.800 --> 09:59.950
We've done that inside the grade request collection.

09:59.950 --> 10:04.390
Create a new folder called Student and drag every student request there.

10:04.420 --> 10:05.520
Sounds good.

10:05.530 --> 10:08.410
This is a good way to organize our requests for later.

10:08.440 --> 10:11.890
We'll add a folder called Students.

10:11.890 --> 10:12.970
Oh, sorry.

10:13.060 --> 10:15.100
Rename to students.

10:16.920 --> 10:20.010
And I'm going to drag each request one by one.

10:28.510 --> 10:29.260
Oh, right.

10:29.260 --> 10:30.130
And.

10:30.850 --> 10:31.870
Let me save that.

10:31.870 --> 10:33.080
That should be it.

10:33.100 --> 10:35.470
I'll see you in Workbook 9.2.
