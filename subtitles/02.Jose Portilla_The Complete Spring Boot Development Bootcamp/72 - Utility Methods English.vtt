WEBVTT

00:00.240 --> 00:05.010
Finally, it has many utility methods that can apply to a wide range of types.

00:05.040 --> 00:10.890
You saw that a variable expression can be used to return a model attribute or a value that derives from

00:10.890 --> 00:11.400
it.

00:11.490 --> 00:14.850
It can execute a condition based on a model attributes.

00:14.940 --> 00:21.570
It can also be used in a loop, and it can also execute a utility method on a model attributes.

00:21.600 --> 00:25.350
In this lesson, we'll be looking at executing utility methods.

00:29.430 --> 00:29.730
Now.

00:29.730 --> 00:37.530
Finally, he has methods that can operate on arrays, calendars, dates, lists, maps, numbers, objects,

00:37.530 --> 00:38.820
sets, strings.

00:38.820 --> 00:40.920
And I'm probably even missing a few.

00:41.430 --> 00:47.550
This gives us a lot of flexibility and in my opinion it's a very powerful feature because it allows

00:47.550 --> 00:53.460
you to perform very special operations on pretty much any data type that could exist in our model.

00:54.120 --> 00:56.180
And the syntax is as follows.

00:56.190 --> 01:00.360
So you've got your variable expression followed by a pound sign.

01:00.360 --> 01:04.200
Which time leave class do you need utility methods from?

01:04.290 --> 01:09.660
If you're operating on a string, then you would need a utility method from the strings class.

01:09.720 --> 01:14.880
If you're operating on a date, then you would need a utility method from the data class.

01:14.970 --> 01:18.600
Let's assume we're operating on strings next.

01:18.600 --> 01:22.140
Which method do you want to grab from the strings class?

01:22.290 --> 01:25.170
Let's assume we want to grab the contains method.

01:25.590 --> 01:29.220
This method, like any java function expects parameters.

01:29.220 --> 01:31.980
The first parameter is usually the target.

01:31.980 --> 01:37.320
In other words, the value that you're operating on, which will always be your model attributes.

01:37.680 --> 01:40.380
The parameters that follow depend on the method.

01:41.960 --> 01:48.380
And the contains method returns a boolean value of true or false, and the resulting value can be displayed

01:48.380 --> 01:50.110
with something like thin leaf text.

01:50.120 --> 01:51.920
You can do whatever you want with the value.

01:55.750 --> 01:56.020
Okay.

01:56.020 --> 02:00.700
Now, what I want you to do is open up the starter project for this lesson by following this path in

02:00.700 --> 02:02.260
your course resources.

02:09.390 --> 02:13.090
Here you can see the handler method right as it's about to return the view.

02:13.110 --> 02:20.430
It adds an attribute to the model called Menu that maps to a string that says we sell chocolate rice

02:20.430 --> 02:22.170
cakes and bubble tea.

02:22.440 --> 02:29.910
And now back inside of The View, what we want to do is see if the string being passed in.

02:30.240 --> 02:32.790
We sell chocolate rice cakes and bubble tea.

02:32.820 --> 02:35.760
Does it contain the word rice cakes?

02:36.450 --> 02:38.670
And then we want to display the results.

02:38.670 --> 02:41.460
We will display the result with live text.

02:42.980 --> 02:48.620
And somehow in this variable expression, we need to check if the model attribute menu.

02:48.650 --> 02:51.710
Does the string contain the word rice cakes?

02:51.920 --> 02:55.940
So I need to find a utility method that can perform this task.

02:56.090 --> 03:02.600
Since we're operating on a string, we're going to need a utility method from the strings class.

03:02.810 --> 03:06.390
So this link is inside of your resources folder.

03:06.410 --> 03:08.510
Please make sure to click on it.

03:10.160 --> 03:15.680
And now down here, I'm going to scroll down to the strings class and now I'm going to try to look for

03:15.680 --> 03:19.790
a utility method that we can use to operate on the string menu.

03:20.580 --> 03:21.930
All right.

03:23.910 --> 03:25.110
Contains.

03:25.230 --> 03:29.820
It expects to parameters the target, the value that you're operating on.

03:30.030 --> 03:33.960
And the second parameter is the fragment that you're looking for.

03:33.990 --> 03:39.750
So if the target you're operating on contains the fragment, this is going to return.

03:39.750 --> 03:40.260
True.

03:42.840 --> 03:43.140
Okay.

03:43.140 --> 03:46.860
So we'll go back here, followed by a pound sign.

03:46.860 --> 03:50.760
Which time leaf class are we grabbing utility methods from?

03:51.030 --> 03:54.870
In this case, we're going to grab a utility method from the strings class.

03:55.560 --> 03:58.050
The method we want to grab is contains.

03:59.170 --> 04:05.960
And contains accepts to parameters the target, the value that you're operating on.

04:05.980 --> 04:08.800
In this case, it's our model attributes.

04:10.160 --> 04:14.300
And don't worry, it's going to know to grab the menu model attributes.

04:17.520 --> 04:21.450
And the second parameter in this case is your fragment.

04:21.720 --> 04:26.460
So we're going to check if the string that menu maps to.

04:26.490 --> 04:29.910
Does it contain the fragment rice cakes?

04:30.770 --> 04:36.800
And if you're ever putting a plane string inside of a thin leaf expression, please make sure to wrap

04:36.800 --> 04:38.720
it in single quotes.

04:39.580 --> 04:40.720
All right.

04:43.550 --> 04:45.800
This utility method is going to return.

04:45.800 --> 04:52.340
A Boolean value of true or false and timely text will display the resulting boolean value.

04:52.430 --> 04:54.110
So let's try this out.

05:08.840 --> 05:11.330
I'm going to go to local host 8080.

05:12.330 --> 05:14.040
And it displays true.

05:14.550 --> 05:15.480
All right.

05:15.660 --> 05:20.070
What if I say, does the menu include.

05:23.770 --> 05:24.880
Creme brulÃ©e.

05:27.320 --> 05:28.700
Not even sure that's how you spell it.

05:28.700 --> 05:31.160
But anyways, that is false.

05:35.430 --> 05:41.730
Now the boolean value that comes out of this expression, I can even use it in a ternary operation here.

05:41.730 --> 05:47.010
I can say if the value is true, then I'm going to display the text.

05:49.570 --> 05:51.220
We have this item.

05:53.430 --> 05:56.190
Otherwise I will display.

05:56.990 --> 05:59.480
We do not have this item.

06:01.030 --> 06:04.090
All right, don't be frightened.

06:04.120 --> 06:07.300
This is just a regular ternary operation.

06:07.330 --> 06:11.200
If this is true, fine leaf text will equal this value.

06:11.230 --> 06:15.010
If this is false, fine leaf text will equal the other value.

06:19.810 --> 06:21.570
We do not have this item.

06:21.580 --> 06:24.310
Let's put this back to rice cakes.

06:28.800 --> 06:29.790
Beautiful.

06:34.570 --> 06:41.290
Now I want you to think about the power that you have being able to leverage all of these utility methods

06:41.290 --> 06:43.540
for a wide range of types.

06:43.570 --> 06:49.600
You can do pretty much anything that you want in life, and I really hope this makes you appreciate

06:49.600 --> 06:52.180
how powerful the family library is.

06:54.920 --> 06:58.430
In this lesson you learned about leaf utility methods.

07:02.090 --> 07:05.250
This wraps up our discussion on variable expressions.

07:05.270 --> 07:11.180
You saw that a variable expression can return a model attribute or a value that derives from it.

07:11.330 --> 07:14.630
It can execute a condition based on a model attributes.

07:14.660 --> 07:21.230
A variable expression can also be used in a loop, and it can also execute utility methods on a model

07:21.230 --> 07:22.130
attributes.
