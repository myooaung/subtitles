WEBVTT

00:00.530 --> 00:03.880
In this lesson, you will refactor your code around options.

00:05.840 --> 00:10.250
Before we start this lesson, I want you to create a new folder called Exception.

00:14.730 --> 00:18.270
And in your resources folder there are three Java files.

00:18.300 --> 00:20.880
Please take some time to drag them over here.

00:26.270 --> 00:28.310
All right, you should have the following set up.

00:28.310 --> 00:29.240
Let's begin.

00:30.450 --> 00:34.830
An optional is meant to prevent the possibility of a null pointer exception.

00:36.840 --> 00:40.710
It is a container around an object that risks being null.

00:42.370 --> 00:48.760
You'll notice that the crowd repository fine by ID method it actually returns an optional students.

00:48.940 --> 00:49.970
Why does it do that?

00:49.990 --> 00:52.030
Why not just return the student object itself?

00:52.030 --> 00:55.030
Why is it wrapping it around this weird optional type?

00:55.270 --> 00:57.300
It's actually trying to send you a message.

00:57.310 --> 01:03.010
It's telling you, Hey, this student object that I am sending back, it's at risk of being null.

01:05.310 --> 01:11.490
We're forcefully unwrapping the optional using dust gets a few force fill the unwrap an optional like

01:11.490 --> 01:14.280
so without doing any prior checks before.

01:14.280 --> 01:20.340
If the object inside the optional happens to be null, then we're actually leaving ourselves exposed

01:20.340 --> 01:22.320
to a no such element exception.

01:22.680 --> 01:23.580
Let's try it out.

01:23.580 --> 01:26.100
I'm going to look for a student that doesn't exist.

01:27.060 --> 01:28.950
A student with an ID of ten.

01:31.500 --> 01:34.110
And we get back a no such element exception.

01:34.440 --> 01:36.390
Now the no such element exception.

01:36.390 --> 01:43.050
It is a Java exception and it's an indicator that you as the Java developer, you failed to account

01:43.050 --> 01:44.880
for something in your application.

01:45.240 --> 01:50.460
The find by ID method by virtue of sending us back the object in an optional.

01:50.490 --> 01:52.170
It was giving us a warning.

01:52.170 --> 01:56.700
Hey, the object inside might be null and we completely ignored that warning.

01:56.700 --> 01:59.640
We just forcefully unwrapped it and got an exception.

01:59.730 --> 02:05.600
So instead what we should do is consider the fact that the optional might be null.

02:05.610 --> 02:11.670
So the correct way of handling the situation is setting this equal to an optional type.

02:12.030 --> 02:13.440
We'll say optional.

02:17.600 --> 02:18.800
Of type student.

02:19.500 --> 02:22.890
Student is equal to whatever this gives us back.

02:24.090 --> 02:26.580
We're not going to unwrap the optional just yet.

02:26.610 --> 02:28.410
First, we have to make a check.

02:28.470 --> 02:31.410
So we're going to say if student.

02:32.280 --> 02:38.610
Dot is present if there is actually a value inside this optional, if the object inside is not null.

02:38.880 --> 02:41.370
Only then can we actually unwrap it.

02:41.580 --> 02:42.660
Return student.

02:42.930 --> 02:43.590
Get.

02:44.590 --> 02:46.330
By unwrapping it over here.

02:46.330 --> 02:51.370
I'm at no risk of throwing a no such element exception if there isn't a value.

02:51.400 --> 02:58.990
What I would want to do is return a404 to the user and I can do that by throwing a custom unchecked

02:58.990 --> 02:59.770
exception.

02:59.770 --> 03:04.630
So throw new student not found exception.

03:07.680 --> 03:10.290
Again, DevTools is really slowing everything down.

03:11.050 --> 03:16.600
Passing in the ID and your next workbook, we're going to handle that exception inside of a controller

03:16.600 --> 03:22.450
advice and then there will send a status code of 404 in the event of a student not found exception.

03:23.370 --> 03:26.520
So let's repeat this process wherever else.

03:26.520 --> 03:32.190
We're forcefully unwrapping an optional without doing a prior check inside, of course.

03:32.190 --> 03:33.500
Service implementation.

03:33.510 --> 03:34.950
I'm doing it over here.

03:35.980 --> 03:41.080
Let's store whatever optional is returned inside of an optional course type.

03:42.320 --> 03:45.710
Course is equal to course repository defined by ID.

03:45.740 --> 03:50.060
We're not going to unwrap the optional until we perform a check.

03:50.060 --> 03:54.560
If course is present then we will say return course.

03:54.560 --> 03:55.370
Don't get.

03:58.020 --> 04:03.870
Otherwise throw a new in this case course not found exception.

04:06.730 --> 04:13.180
When you're checking if there is actually a value inside of an optional, it's very similar to performing

04:13.180 --> 04:15.390
a null check on a normal object.

04:15.400 --> 04:19.150
It's just that this, in my opinion, is more elegant.

04:19.150 --> 04:24.190
And it's also what's being returned by fine by ID, so we have no choice but to check it in this manner.

04:24.670 --> 04:25.570
All right.

04:25.720 --> 04:26.890
And.

04:28.190 --> 04:30.020
Should be good everywhere else.

04:31.780 --> 04:35.800
Um, inside of great service implementation.

04:36.220 --> 04:37.360
And this is a problem.

04:37.360 --> 04:41.560
This returns a grade, this also returns a grade.

04:41.680 --> 04:46.570
And me, as an unsuspecting developer, I called this method.

04:46.570 --> 04:51.340
It gave me back an object and I did not even consider that this object might be null.

04:51.370 --> 04:55.570
I tried calling set score from a null and it threw a null pointer exception.

04:55.690 --> 05:03.010
Well, instead, if I go back to my great repository and I return a grade that is actually wrapped around

05:03.010 --> 05:03.820
an optional.

05:05.950 --> 05:08.890
I'm basically warning whoever is calling this method.

05:08.920 --> 05:12.940
Hey, the object that I'm sending you back, it is at risk of being null.

05:12.970 --> 05:15.440
So for your sake, I wrapped it inside of an optional.

05:15.460 --> 05:17.680
That way you don't get a null pointer exception.

05:17.680 --> 05:24.040
But please do anticipate the scenario that the object I'm sending you back might be null and handle

05:24.040 --> 05:25.900
this optional appropriately.

05:26.110 --> 05:32.380
So as I call this method over here, I now see that it actually returns an optional grade.

05:32.380 --> 05:35.410
And this prompts me to be careful because now I know.

05:35.410 --> 05:37.480
Oh, this might actually be null.

05:38.410 --> 05:42.400
So I'm going to store this inside of an optional grade type.

05:43.810 --> 05:45.220
Optional grade.

05:47.680 --> 05:48.840
And then I will check.

05:48.850 --> 05:53.950
Is there actually a value inside if grade DOT is present?

05:54.860 --> 06:00.680
In that case, I can feel safe about unwrapping this optional return grade get.

06:01.970 --> 06:03.050
Otherwise.

06:04.040 --> 06:08.750
I will throw a new grade not found exception.

06:10.650 --> 06:13.830
I'll go back over here and do the exact same thing.

06:24.610 --> 06:27.730
If there is a value, then I will say grade.

06:28.210 --> 06:33.190
Unwrapped grade is equal to grade get.

06:34.460 --> 06:36.100
Then I'll update the score.

06:39.770 --> 06:41.420
And save the grade.

06:42.240 --> 06:43.440
Great repository.

06:44.700 --> 06:46.400
Save grade.

06:47.920 --> 06:49.540
Or unwrapped grade, I should say.

06:53.630 --> 06:57.830
And if the grade that they're trying to find those in exist, then we're going to throw a new grade

06:57.830 --> 06:59.150
not found exception.

07:02.540 --> 07:05.150
Oh, don't forget to return whatever grade that gets saved.

07:06.000 --> 07:07.010
All right.

07:07.020 --> 07:08.820
I think we're looking great.

07:08.820 --> 07:10.070
We're in really good shape.

07:10.080 --> 07:16.560
Again, we could have just returned a normal grade and then said if whatever grade returns equals null.

07:19.510 --> 07:24.850
But by sending back an optional, we're giving whoever is calling this method a warning that the grade

07:24.850 --> 07:25.960
here might be null.

07:25.990 --> 07:30.070
Then they will have the intuition to perform that null check beforehand.
