WEBVTT

00:00.730 --> 00:04.720
Well, right now we get to add the final feature, which is to update the student's grade.

00:06.560 --> 00:07.980
Let's go through the process.

00:08.000 --> 00:11.000
First, we're going to add an update button inside of each table row.

00:11.030 --> 00:11.510
That's easy.

00:11.510 --> 00:13.730
We'll just look inside of the HTML cheat sheet.

00:17.140 --> 00:22.300
And then step two, the update button when pressed, will make a get request to access the form.

00:23.200 --> 00:28.480
This is new because normally we're making get requests directly from the browser, but this time one

00:28.480 --> 00:31.840
of your HTML elements is going to make a get request.

00:37.050 --> 00:41.850
And in step three, the update button is actually going to pass a parameter into the get request before

00:41.850 --> 00:42.720
it makes it.

00:42.960 --> 00:46.800
The parameter will be the student name whose grade we want to update.

00:48.710 --> 00:53.360
And in step four, the handler method will use the parameter to fetch the students.

00:53.570 --> 00:59.270
Upon receiving the request, the handler method will receive the parameter from inside the brackets

00:59.270 --> 01:03.560
and it will use the parameter to look inside the data store and fetch the students.

01:03.920 --> 01:06.320
And from there, we can update that student's grade.

01:08.480 --> 01:13.850
So let's start with step one, which is to add an update button inside of each row.

01:14.720 --> 01:22.640
If you look back at the HTML cheat sheet, you'll notice that an anchor element with a roll of button

01:22.640 --> 01:25.580
is capable of making web requests.

01:25.790 --> 01:32.270
So inside of each row that gets generated, we're going to add another data cell.

01:35.930 --> 01:36.560
TD.

01:39.950 --> 01:42.770
And inside the data cell, we'll add our button.

01:42.770 --> 01:44.840
So we'll say anchor tag.

01:46.770 --> 01:50.160
And then it will have a roll of button.

01:51.110 --> 01:54.380
And this button will display the text updates.

01:59.290 --> 02:04.270
Now each row that gets generated is going to have an extra data cell with a button inside.

02:04.450 --> 02:09.580
If I were to go back, I guess I'll have to just submit some data first.

02:14.040 --> 02:16.470
Nice, but this looks kind of ugly.

02:17.490 --> 02:22.980
If you look back at the CCIS that was provided by our wonderful front end developer.

02:24.060 --> 02:31.290
Your button can reference the update section of your CSIS by simply saying.

02:32.160 --> 02:35.070
Class equals updates.

02:37.190 --> 02:41.810
And if you look very briefly, what this is going to do is center your button.

02:41.900 --> 02:43.590
It's going to fix up the font size.

02:43.610 --> 02:45.290
Give it a nice background color.

02:45.290 --> 02:50.110
When you hover over it, it's going to give it a color of orange cursor turns into a pointer.

02:50.120 --> 02:51.930
Nothing crazy.

02:51.950 --> 02:56.780
Let's just refresh and nice.

02:56.780 --> 02:59.390
Our friend and developer did a wonderful job.

02:59.420 --> 03:03.260
Now you might be wondering, Hey, Ron, you never taught us CSS again.

03:03.260 --> 03:04.490
We're back end developers.

03:04.490 --> 03:08.210
We don't care about HTML or CSS.

03:08.240 --> 03:12.680
The HTML and CSS is already given to you by a frontend developer.

03:12.710 --> 03:18.050
Your job is to simply manage how it's presented using Java and leave us.

03:18.050 --> 03:21.110
Even adding the button is not even something that we should have done.

03:21.140 --> 03:24.000
It's the front end developer's job to create the view.

03:24.020 --> 03:25.400
But not to worry.

03:25.400 --> 03:27.080
We'll take it out of their paycheck.

03:28.610 --> 03:32.510
Now in step two, the update button should make a get request.

03:34.420 --> 03:43.150
If you look back at the HTML cheat sheet and anchor tag can use the leaf attribute a ref to make a gut

03:43.150 --> 03:45.430
request, and rightfully so.

03:45.430 --> 03:47.640
It uses a link expression.

03:47.650 --> 03:52.930
You'll remember that a link expression can specify a URL endpoint or a path to a resource.

03:52.960 --> 03:57.130
Given the context, it's going to specify a URL endpoint.

04:01.800 --> 04:09.630
So to my button I will add the final leaf attribute h ref and we're going to make a request to the home

04:09.630 --> 04:10.380
page.

04:11.770 --> 04:17.650
This URL is context relative because it already considers the host and port so we don't have to put

04:17.650 --> 04:17.980
it.

04:19.940 --> 04:23.450
Now step three is to pass a parameter into the get request.

04:23.480 --> 04:27.020
The parameter will be the student name whose grade we want to update.

04:29.630 --> 04:34.130
You can pass data into a get request by starting off with a question mark.

04:34.160 --> 04:37.910
The question mark means you want to pass parameters into a request.

04:38.060 --> 04:41.660
The parameter and its value are separated by an equal sign.

04:42.980 --> 04:45.950
And the plus symbol replaces white space.

04:48.700 --> 04:52.970
So going back here, I'm going to make a request to local host 8080.

04:52.990 --> 04:55.630
Then I'll add a name parameter.

04:56.920 --> 05:00.010
With a value that equals Harry.

05:02.790 --> 05:03.870
Plus Potter.

05:04.170 --> 05:06.030
So this is just white space.

05:07.650 --> 05:09.280
And nothing new happens.

05:09.300 --> 05:16.740
The user meet is still requesting resources on the empty path and the get mapping handler method is

05:16.740 --> 05:18.690
going to return that resource.

05:18.990 --> 05:24.540
However, behind the scenes, the get request was actually carrying a name parameter that equals Harry

05:24.540 --> 05:25.140
Potter.

05:25.560 --> 05:29.880
The handler method can actually receive that name string as a parameter.

05:34.380 --> 05:37.680
So for now, all I'm going to do is actually print it.

05:40.750 --> 05:43.150
Okay if I make that same request again.

05:45.690 --> 05:46.470
Beautiful.

05:47.070 --> 05:51.740
Now we need to be able to make that same gut request from the update button.

05:51.750 --> 05:57.990
So if you were to look back at the HTML cheat sheet, the way to specify a parameter is in a file.

05:57.990 --> 06:02.880
If expression is a bit different, you have to put your parameter and value inside of brackets.

06:02.880 --> 06:05.220
So we'll go ahead and do just that.

06:05.220 --> 06:07.380
Copy the syntax over to here.

06:07.380 --> 06:11.610
The parameter is going to be name and the value will say is Harry Potter.

06:11.640 --> 06:17.250
Now remember in a timeless expression, you should enclose your string values inside of single quotes.

06:18.490 --> 06:19.870
So I'll go back here.

06:20.920 --> 06:22.660
I'll submit a piece of data.

06:25.120 --> 06:27.910
And then if I press the update button for one of them.

06:32.240 --> 06:34.930
It passes a parameter into the get request.

06:34.940 --> 06:37.010
The parameter is Harry Potter.

06:37.790 --> 06:41.600
The handler method receives the parameter that the get request is carrying and prints.

06:41.600 --> 06:43.090
It's beautiful.

06:43.100 --> 06:46.670
Now we don't actually want to pass back a static value.

06:46.700 --> 06:51.560
What we want to do is set the parameter equal to a variable expression.

06:53.210 --> 07:00.140
Because remember that a variable expression will return a model attribute or a value that derives from

07:00.140 --> 07:00.560
it.

07:00.590 --> 07:05.480
In this case, we're going to pass back the name of the student that we're pressing update on.

07:07.910 --> 07:08.470
Okay.

07:08.480 --> 07:13.400
Now let's go back to grades.

07:14.840 --> 07:16.610
Try using this update button.

07:18.590 --> 07:22.130
It makes a get request while passing in the name parameter.

07:23.060 --> 07:24.980
The handler method intercepts.

07:24.980 --> 07:28.160
The request receives the name, parameter and princess.

07:29.800 --> 07:36.520
Now, although this works perfectly, it's good practice to actually label this as being a request parameter.

07:36.730 --> 07:38.680
So we'll say request.

07:41.350 --> 07:42.160
Param.

07:44.820 --> 07:49.200
Meaning this parameter can only come from a get request and nothing else.

07:49.560 --> 07:53.100
But now, if I were to actually just go to local host 8080.

07:54.050 --> 08:02.510
It throws an error because now we made a get request to hear, but it seems to be expecting a name parameter

08:02.510 --> 08:06.680
and because it did not receive that request parameter, it threw an error.

08:06.950 --> 08:10.100
So we have to say required.

08:11.060 --> 08:12.350
Equals false.

08:13.580 --> 08:19.160
Basically we're saying this parameter is optional because this parameter is only required when we're

08:19.160 --> 08:20.360
making an update.

08:20.600 --> 08:25.280
Now, after pressing update, the form contains the name of student we intend on updating.

08:25.280 --> 08:30.530
We need to use this parameter to find the object in the ArrayList that matches it.

08:30.530 --> 08:36.470
So inside a the grade controller create a function called find index.

08:36.500 --> 08:41.000
Actually I will call it get grade index.

08:42.930 --> 08:45.240
They receives a string name.

08:46.670 --> 08:52.130
And what I'm going to do is loop through every single object inside of the student grades, array,

08:52.130 --> 08:55.100
list, student grades, size.

08:55.100 --> 09:02.360
And for every object that we loop through, we're going to check if that object at that index.

09:03.130 --> 09:04.390
We'll get its name.

09:04.810 --> 09:08.260
Does it match the name parameter that's being passed in?

09:09.240 --> 09:13.320
If it does match, it will return the index of that object.

09:13.980 --> 09:18.990
Otherwise, we will just return, I don't know, -1000.

09:19.320 --> 09:22.560
This value will just represent index not found.

09:22.590 --> 09:25.600
Now, you shouldn't actually have loose integers like this in your code.

09:25.620 --> 09:28.800
We will fix this in the last lesson of the section.

09:28.800 --> 09:37.380
But anyways, here, what we want to do is find the object in the ArrayList whose name field matches

09:37.380 --> 09:38.480
the name parameter.

09:38.490 --> 09:43.590
So what I'm going to do is create a new grade variable.

09:45.580 --> 09:50.560
And then we will say if the index if get grade index.

09:52.620 --> 09:54.720
Is equal to -1000.

09:57.090 --> 10:02.580
Then we're going to set the grade variable equal to an empty grade object.

10:03.330 --> 10:04.440
Otherwise.

10:06.900 --> 10:12.660
Otherwise we're going to grab the object at that index and set the grade variable equal to that.

10:19.390 --> 10:20.990
All right, let's test this out.

10:21.010 --> 10:25.270
I'm going to need to fill the data store with some data.

10:27.360 --> 10:34.590
Now, if I were to actually make a get request and pass in a name that doesn't match anything in our

10:34.590 --> 10:35.370
data store.

10:37.580 --> 10:39.020
The form is going to be empty.

10:41.960 --> 10:47.930
The handler method received our name parameter concluded that it couldn't find anything inside the data

10:47.930 --> 10:54.740
store set grade equal to an empty grade object and passed the empty grade object as a model attribute.

10:54.740 --> 10:59.760
And that empty grade object is what was bound to our form.

11:00.020 --> 11:04.190
But if I were to go back and press the update button.

11:04.490 --> 11:06.740
So we'll go back to slash grades.

11:11.730 --> 11:18.510
This time, the get request carries a name that matches one of the objects in the data store.

11:18.570 --> 11:21.420
That object is being passed into the model.

11:22.690 --> 11:26.950
And the form is now bound to this fully populated grade object.

11:26.950 --> 11:28.990
And you can see this right over here.

11:29.440 --> 11:33.340
Each input is bound to a field in the model object.

11:35.790 --> 11:41.370
This is great and all, but I prefer conditional assignments syntax over if statements this is kind

11:41.370 --> 11:42.030
of dirty.

11:42.030 --> 11:51.030
So what I'm going to say is model dot add attribute grade and here I will check if the index is equal

11:51.030 --> 11:54.480
to -1000, then we'll say new grade.

11:56.500 --> 12:01.150
Otherwise will pass in the object at that index in our data store.

12:02.650 --> 12:05.170
Seem to have a syntax error.

12:05.880 --> 12:08.770
Oh, there should be a colon, not a comma.

12:09.970 --> 12:12.280
Index is not a variable.

12:15.760 --> 12:16.530
All right.

12:16.540 --> 12:18.340
I'm really off my game today.

12:21.460 --> 12:22.360
Sweets.

12:22.360 --> 12:24.610
So now we can go ahead and delete all of that.

12:26.270 --> 12:28.580
This is much better and cleaner than if else.

12:32.560 --> 12:33.640
All right, let's start fresh.

12:33.640 --> 12:35.950
We'll submit another grade for Harry.

12:37.000 --> 12:39.850
We'll say C minus potions.

12:40.240 --> 12:41.090
All right.

12:41.110 --> 12:44.500
Now, what happens if I try to update this grade?

12:48.420 --> 12:49.860
We'll update it to an EF.

12:52.840 --> 12:55.300
And instead of updating the grade and added a new one.

12:55.660 --> 13:01.690
That's because the handler method upon form submission is always just going to add a new grade to our

13:01.690 --> 13:02.440
data store.

13:02.470 --> 13:06.220
Then it redirects the user to make a request on slash grades.

13:06.550 --> 13:10.630
That updated data store is added to the model and it returns the grades view.

13:11.200 --> 13:15.550
We only want to add a new grade if it doesn't already exist.

13:15.550 --> 13:19.240
So what we can say is if.

13:20.150 --> 13:23.250
Get grade and ducks grade.

13:23.270 --> 13:28.160
Dot get name if it equals to -1000.

13:30.160 --> 13:31.480
Then we'll say.

13:32.610 --> 13:34.440
Student grades add.

13:40.440 --> 13:43.050
Otherwise, we want to update the array list.

13:43.050 --> 13:45.000
Student grades set.

13:45.970 --> 13:48.850
We will update the grade at that index.

13:50.750 --> 13:51.590
And you know what?

13:52.130 --> 13:59.180
Instead of calling the function twice, let me just say end index is equal to get grade index.

14:07.760 --> 14:08.630
All right.

14:12.480 --> 14:13.980
If we try this out now.

14:15.010 --> 14:16.060
Start fresh.

14:16.270 --> 14:19.030
We'll say Harry C minus potions.

14:20.480 --> 14:22.520
We will try to update Terry's grade.

14:23.530 --> 14:24.580
It works perfectly.

14:25.990 --> 14:28.630
If you go back to the home page without pressing updates.

14:29.710 --> 14:31.090
At a new student.

14:35.700 --> 14:36.630
And we're done.

14:37.520 --> 14:40.250
The next video is going to break point to the entire flow.

14:40.340 --> 14:43.330
So to recap in this lesson, you updated a student's grade.

14:43.340 --> 14:47.450
I suggest tuning into the next breakpoints lesson for a full recap.
