WEBVTT

00:00.600 --> 00:03.690
We need to give each grade a unique ID field.

00:07.140 --> 00:10.650
Right now we're updating each grade based on the student's name.

00:11.100 --> 00:13.860
What if I want to add another grade for Harry?

00:16.340 --> 00:17.510
We'll say, Harry.

00:19.070 --> 00:22.850
We'll give him a C-plus and Quidditch.

00:24.930 --> 00:30.360
Instead of adding another grade, it updates his grade and potions to a grade in Quidditch.

00:36.610 --> 00:42.910
Updating a grade based on a name is clearly not a good idea because it's this piece of logic right here

00:42.910 --> 00:43.900
that's flawed.

00:45.350 --> 00:49.400
So in this lesson, you will update grades based on a unique ID field.

00:52.250 --> 00:57.950
That being said, we do not need the complete constructor right now so we can get rid of it to avoid

00:57.950 --> 00:58.910
confusion.

00:59.630 --> 01:04.730
And now what I'm going to do is add an ID field, private string ID.

01:05.570 --> 01:12.680
Every time a new grade object is created, we're going to set the ID field equal to a random unique

01:12.680 --> 01:13.690
identifier.

01:13.700 --> 01:19.580
So we'll say this dot ID is equal to a universal unique identifier.

01:19.610 --> 01:23.510
A random universal unique identifier to string.

01:26.350 --> 01:33.610
Random UUID uses a complex algorithm to create a universally unique identifier and then to string returns

01:33.610 --> 01:34.510
it as a string.

01:34.990 --> 01:41.740
Ultimately, this ensures that the ID field of every grade object that gets created remains unique.

01:42.780 --> 01:43.190
Okay.

01:43.230 --> 01:47.790
And now, because this field is private, we can't forget to give it a getter and setter.

01:48.630 --> 01:49.320
Java code.

01:49.320 --> 01:50.430
Generators.

01:50.790 --> 01:52.140
Getters and setters.

01:54.970 --> 02:01.210
And now when the user presses the update button, the parameter that they should pass back is the ID.

02:01.780 --> 02:04.840
ID is equal to gray dot ID.

02:06.090 --> 02:10.500
The Get request is going to carry an ID field that matches a great object.

02:10.500 --> 02:17.010
So it follows that the get mapping method should expect an ID, not a name.

02:19.060 --> 02:24.430
It's going to try to retrieve a grade object based on an ID not name.

02:25.580 --> 02:29.000
Do the same thing inside submit form.

02:30.290 --> 02:31.880
Dot get id.

02:34.870 --> 02:37.420
String ID here.

02:37.420 --> 02:43.060
We're going to get the idea of every student grade and we're going to check if it equals the ID that's

02:43.060 --> 02:44.110
being passed in.

02:44.290 --> 02:46.300
If that's the case, return it's index.

02:46.300 --> 02:50.770
Otherwise return -1000 and that's really it.

02:51.160 --> 02:53.260
We're going to rerun our application.

02:53.260 --> 02:55.030
Well, it already rerun.

02:55.030 --> 02:57.520
Let's populate our table with data.

02:57.880 --> 03:03.550
We'll say Harry C minus potions, creating a new grade.

03:04.090 --> 03:05.950
And now if you press update.

03:07.110 --> 03:15.300
It makes a request to local host 8080 while carrying the object ID and each input in the field binds

03:15.300 --> 03:16.460
to one of the objects.

03:16.470 --> 03:17.250
Fields.

03:17.250 --> 03:18.090
Perfect.

03:18.090 --> 03:19.260
But there is an issue.

03:25.710 --> 03:27.540
Upon form submission.

03:27.540 --> 03:31.080
Springwood creates an empty grade object using your empty constructor.

03:34.860 --> 03:39.660
The empty constructor is going to generate a new ID for this great object.

03:41.620 --> 03:45.730
So the data from the Post request updates the three other fields.

03:49.110 --> 03:52.740
But the new ID doesn't match what's inside the data store.

04:00.070 --> 04:02.530
There's a very simple workaround.

04:03.660 --> 04:09.570
What you're going to have to do is add another input to the form, and this input is going to bind to

04:09.570 --> 04:11.520
the grade ID field.

04:15.460 --> 04:17.110
You can remove everything else.

04:18.980 --> 04:22.660
And so now the Post request is going to send back four fields.

04:22.670 --> 04:28.670
So even if the empty constructor generates a new ID for this grade, the data from the post request

04:28.670 --> 04:31.190
is going to re update all four fields.

04:35.920 --> 04:38.170
So if you were to try it now.

04:40.050 --> 04:40.770
You know what?

04:40.770 --> 04:45.390
Let's rerun the application so that we can start from a clean slate.

04:54.470 --> 04:55.840
We'll say a local host.

04:55.850 --> 04:56.900
80, 80.

05:03.150 --> 05:03.870
Harry.

05:04.860 --> 05:05.910
A-minus.

05:06.420 --> 05:07.470
Charms.

05:08.660 --> 05:09.870
Remember this ID?

05:13.530 --> 05:14.880
We'll press submit.

05:15.300 --> 05:17.010
And if you press update.

05:20.620 --> 05:23.320
Notice that the IDs are consistent.

05:23.620 --> 05:24.610
Perfect.

05:26.040 --> 05:32.340
I'll update his grade to C-minus and the update works.

05:35.100 --> 05:40.500
The Handler method was able to match the object's ID to one of the objects in the array list.

05:44.860 --> 05:48.430
It updates the array list and finally takes care of the rest.

05:49.120 --> 05:52.120
Now going back to local host 8080.

05:56.810 --> 06:01.310
The form containing four inputs sends back four fields in the post request.

06:01.700 --> 06:06.590
Spring Boot creates an empty grade object using your empty constructor, which automatically generates

06:06.590 --> 06:11.660
a new ID, but as post requests data as populating the object's fields.

06:14.970 --> 06:18.480
It also overrides the ID field with the correct value.

06:23.750 --> 06:29.990
But having an ID input is really ugly and the user shouldn't be allowed to access it.

06:30.170 --> 06:34.280
You can hide an HTML element using type equals hidden.

06:40.790 --> 06:41.960
Equals hidden.

06:48.480 --> 06:50.020
And everything should still work.

06:50.040 --> 06:52.200
We'll add a new grade for her mighty.

06:52.980 --> 06:57.630
Score a plus arithmetic, press submit.

06:57.870 --> 07:03.690
And now I'm going to go back and update Harry's grade to D.

07:03.690 --> 07:09.930
Plus, everything works perfectly if I try to give Harry a grade in Quidditch.

07:10.620 --> 07:12.930
Harry A-plus.

07:13.500 --> 07:14.490
Quidditch.

07:15.930 --> 07:17.340
Finally the bug is gone.

07:17.370 --> 07:20.580
The name field has no association with updates.

07:22.810 --> 07:26.710
So to recap in this lesson, you updated a grade based on its ID.
