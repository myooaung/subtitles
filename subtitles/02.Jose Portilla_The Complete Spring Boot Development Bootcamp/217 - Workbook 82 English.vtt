WEBVTT

00:00.300 --> 00:01.960
Welcome to Workbook 8.2.

00:01.980 --> 00:07.260
I already went ahead and launch the starter project and the first thing it tells us is that in the previous

00:07.260 --> 00:12.270
workbook we were handling bad requests by throwing and catching checked exceptions.

00:12.300 --> 00:20.280
This was really annoying because we had to go and modify every single method to throw that checked exception,

00:20.280 --> 00:23.160
modify the service interface.

00:23.160 --> 00:29.490
And then we had to try to run the code in every single handler method here and catch the exception if

00:29.490 --> 00:30.500
the code fails.

00:30.510 --> 00:36.510
We had to modify the code in many places of our app for a single functionality, and that's not something

00:36.510 --> 00:40.130
that I like in this lesson or in this workbook, I should say.

00:40.140 --> 00:44.760
We're going to handle bad requests inside of a single controller advice class.

00:45.060 --> 00:50.070
Let's start with Task One tells us to create a new folder called Exception, where we're going to create

00:50.070 --> 00:54.370
a contact not found exception, class and paste in the following code.

00:54.390 --> 00:59.220
Let's go ahead and do that right now and we'll create a new folder called Exception.

01:00.850 --> 01:09.100
I'll create a new file called No Contact Found Exception dot java and I will just paste in the code

01:09.100 --> 01:10.420
from learn the part.

01:11.350 --> 01:12.610
And did I?

01:12.850 --> 01:13.290
Oh.

01:15.620 --> 01:16.880
Should rename this.

01:17.900 --> 01:18.470
Okay.

01:18.470 --> 01:23.840
So the reason this is a runtime exception is so that we're not forced to catch it wherever it's being

01:23.840 --> 01:24.400
thrown.

01:24.410 --> 01:30.110
Whenever you throw a new instance of an exception, it's constructor is going to be called.

01:30.110 --> 01:36.170
We're expecting whoever throws a new instance of this exception to pass in an ID because it's also going

01:36.170 --> 01:39.690
to pass in a custom message into our parent constructor.

01:39.710 --> 01:41.480
Now, what does this do behind the scenes?

01:41.480 --> 01:48.050
If you're curious, if we go to this parent constructor, which passes the message into another parent

01:48.050 --> 01:51.780
constructor, which passes the message into another parent constructor.

01:51.800 --> 01:55.610
What this does is it updates a field called detail message.

01:55.610 --> 02:00.680
So the detail message field is going to contain the message that we ultimately passed in.

02:00.680 --> 02:05.750
Our message can be accessed using the gap message function, which is exactly what we're going to do.

02:05.750 --> 02:09.470
But anyways, no need to focus too much on the nitty gritty.

02:09.470 --> 02:15.440
All I want you to know is that whenever this exception is thrown in this manner, throw new contact,

02:15.470 --> 02:16.730
not found exception.

02:16.730 --> 02:22.760
When it's caught inside of our controller advice, we'll be able to get this message as follows.

02:22.760 --> 02:24.920
Exception get message.

02:26.050 --> 02:27.070
All right.

02:28.060 --> 02:33.820
Going back to task two, we need to modify the defined index by ID function to throw this newly created

02:33.820 --> 02:34.720
exception.

02:34.960 --> 02:43.000
Now, if we go to the service implementation, our find index by the function already throws an unchecked

02:43.000 --> 02:46.600
exception in the name of no such element exception.

02:46.600 --> 02:54.970
But in this case I just wanted to throw a custom exception instead a custom exception that is more descriptive

02:54.970 --> 03:01.420
and recall the constructor for this exception expects an ID as this exception is being created.

03:01.420 --> 03:07.730
It's going to pass a custom message into the parent constructor, allowing us to access it later on.

03:07.750 --> 03:12.580
And finally, because this is a runtime exception, we're not going to be forced to try and catch it.

03:12.580 --> 03:15.630
So we don't need to specify that this function throws anything.

03:15.640 --> 03:20.290
This makes our lives much easier because now we do not have to touch any of these operations.

03:20.290 --> 03:22.720
We do not have to touch the interface.

03:22.720 --> 03:26.170
We do not have to do anything inside of the controller.

03:26.170 --> 03:31.750
Any exception that gets thrown during the runtime, we're going to handle inside of a controller advice

03:31.750 --> 03:32.530
class.

03:32.530 --> 03:34.300
We'll get to that momentarily.

03:34.330 --> 03:38.830
Task three is to run the application and make a get request from postmen.

03:38.830 --> 03:40.030
Let's do just that.

03:40.030 --> 03:42.610
I'll copy this over to Postman right now.

03:42.640 --> 03:45.190
It seemed I'd already done this earlier, but whatever.

03:45.190 --> 03:46.480
I'll just press send again.

03:47.740 --> 03:50.080
And we get an internal server error.

03:50.350 --> 03:53.600
Now here the consumer is sending a bad request.

03:53.620 --> 03:56.170
The ID they're sending over does not exist.

03:56.170 --> 04:02.980
And as a result, the application fails and it throws an exception, an unchecked exception during the

04:02.980 --> 04:10.060
runtime that throws our runtime exception, and then it responds with a 500 status code.

04:10.390 --> 04:17.380
The 500 status code must be reserved for actual failures due to unexpected conditions.

04:17.380 --> 04:23.830
Like, for example, if our application is not able to connect to a database for some unexpected reason,

04:23.830 --> 04:25.380
the service might be down.

04:25.390 --> 04:32.710
It will send back a status of 500, but the consumer sending a bad ID is something that should be totally

04:32.710 --> 04:33.490
expected.

04:33.490 --> 04:40.660
US as developers, we need to anticipate this scenario and ensure that the application does not fail.

04:40.690 --> 04:48.430
It must be fully equipped to handle the bad request and respond with a 400 status code, which implies

04:48.430 --> 04:49.540
that it's their fault.

04:49.600 --> 04:52.240
They are the ones who passed in an invalid ID.

04:52.270 --> 04:59.950
So we'll go over here and it tells us that the controller advice is a class level annotation that allows

04:59.950 --> 05:02.980
you to define global exception handlers.

05:03.040 --> 05:09.100
I'll move on to Task four, which tells us to create a class called Application Exception Handler and

05:09.100 --> 05:11.590
apply the annotation we just talked about.

05:12.010 --> 05:12.940
All right.

05:13.980 --> 05:15.900
To let me collapse all of these.

05:17.010 --> 05:22.620
And I'll create a class called Application Exception Handler.

05:22.920 --> 05:28.450
This will serve as the global exception handler across our entire application.

05:28.470 --> 05:32.070
Anything that gets thrown, we're going to handle right here.

05:32.100 --> 05:32.610
All right.

05:32.610 --> 05:38.280
And inside of this controller advice, we can define exception handlers.

05:38.400 --> 05:44.730
The exception handler is a method level annotation that instruments a method to handle exceptions.

05:44.730 --> 05:49.860
So inside of our global exception handler, we're going to create an exception handler method called

05:49.860 --> 05:52.140
handle contact, not found exception.

05:52.920 --> 05:54.510
So I'm going to say public.

05:55.610 --> 06:03.530
And when a contact is not found, when this exception gets thrown, what we want to do is send back

06:03.530 --> 06:05.360
a response entity.

06:07.010 --> 06:09.200
That encapsulates a status code.

06:10.950 --> 06:12.140
HTTP status.

06:12.150 --> 06:17.810
As you may have guessed it, that's going to end up being 404 and we're going to call it handle contact,

06:17.820 --> 06:19.170
not found exception.

06:19.710 --> 06:24.450
And this method is going to receive the contact, not found exception that gets thrown.

06:25.170 --> 06:32.580
Now, in order for this method to actually get invoked, when this exception gets thrown, we need to

06:32.580 --> 06:40.830
market as an exception handler that is capable of handling exceptions of type contact, not found exception

06:41.460 --> 06:42.180
class.

06:43.410 --> 06:44.280
All right.

06:45.410 --> 06:51.350
And so when this runtime exception gets thrown, instead of our app failing during the runtime, it's

06:51.350 --> 06:54.230
actually going to get handled inside of this method.

06:54.230 --> 07:03.440
And we're just going to return a new response entity with a status of 404, which would be not found.

07:05.460 --> 07:07.740
All right, let's test this out.

07:08.740 --> 07:10.450
And this is a lot better.

07:11.660 --> 07:12.120
Well, right.

07:12.120 --> 07:16.140
And here it tells us it would be nice to send the user an error response.

07:16.140 --> 07:19.110
So right now it just sends back a 404.

07:19.110 --> 07:21.720
But let's send back some JSON.

07:21.720 --> 07:25.500
What we're going to do is right over here, define.

07:26.870 --> 07:29.540
An error response pod class.

07:29.540 --> 07:35.150
So the idea is that we'll be creating an object out of this class and all of its properties are going

07:35.150 --> 07:37.190
to be serialized into JSON.

07:37.190 --> 07:46.940
So here I'll just say private string message and I will generate a complete constructor as well as getters

07:46.940 --> 07:47.990
and setters.

07:54.530 --> 07:55.820
Here, I'll create.

07:56.930 --> 07:59.300
A new object.

08:00.510 --> 08:02.460
Of the error response class.

08:04.860 --> 08:09.480
And the message we're going to pass in is exception, but get message.

08:10.280 --> 08:11.960
So when we threw.

08:13.150 --> 08:16.390
Our contact not found exception and passed in an IED.

08:17.000 --> 08:23.860
Our exception passed in a message into the parent constructor which updated a particular field behind

08:23.860 --> 08:24.730
the scenes.

08:25.920 --> 08:30.750
And the exceptional get message method is able to grab the contents of that field.

08:31.200 --> 08:31.740
All right.

08:31.740 --> 08:39.030
And now here it tells us to actually specify a return type of object, because object is the most generic

08:39.030 --> 08:40.290
Java class.

08:41.200 --> 08:43.160
We can put anything over here.

08:43.180 --> 08:46.810
What we're going to do is send back an error response.

08:48.370 --> 08:50.500
As well as in HTTP status code.

08:51.010 --> 08:58.270
Now this error response, this object spring boot is going to serialize all of its properties into JSON

08:58.270 --> 09:00.580
before sending it back to the consumer.

09:01.060 --> 09:02.710
So if we try this out.

09:07.140 --> 09:14.790
Press send our our response was serialized into JSON such that the message property equals a JSON value

09:14.820 --> 09:17.770
of the ID 1 to 3 does not exist in our records.

09:17.790 --> 09:19.560
Very, very nice.

09:20.330 --> 09:21.230
All right.

09:21.560 --> 09:23.740
And I think we already did that.

09:23.750 --> 09:27.710
We have a 404 not found task eight.

09:27.740 --> 09:30.020
It would be nice to also send back a time stamp.

09:30.020 --> 09:31.880
Let's do just that.

09:35.540 --> 09:38.330
Local date time meets import it.

09:39.330 --> 09:45.810
And as soon as the error gets created, we're just going to set the time stamp equal to the current

09:45.810 --> 09:46.590
time.

09:46.590 --> 09:49.560
So I think we can do that by setting local date time.

09:49.890 --> 09:50.610
Now.

09:52.370 --> 09:53.110
Looks good.

09:53.120 --> 09:57.620
Let's add the usual getters and setters to our pod class.

10:00.470 --> 10:01.250
Okay.

10:03.080 --> 10:09.590
And now as we send back the error response, Spring Boot will serialize these two properties into JSON.

10:12.050 --> 10:13.370
It does just that.

10:13.370 --> 10:14.910
But I don't know about you.

10:14.930 --> 10:17.990
This last part is not very readable.

10:17.990 --> 10:26.660
So going over to Task nine, it tells us that as the property is being serialized into JSON, we can

10:26.660 --> 10:31.190
use the JSON format annotation to configure how it's serialized.

10:32.520 --> 10:39.210
So here, as you can see, our time stamp is already being serialized into a JSON string, so we're

10:39.210 --> 10:40.740
going to do just that.

10:41.840 --> 10:47.360
But the pattern we're going to serialize this date to is going to be the following pattern.

10:47.360 --> 10:52.430
So I'm just going to go ahead and copy this into our code.

10:57.690 --> 10:58.950
Trying this again.

11:00.450 --> 11:02.460
And this is just beautiful.

11:02.490 --> 11:09.570
Our API is now resilient to bad requests and it tells the user exactly what they did wrong.

11:09.660 --> 11:14.370
As a consumer, this tells me exactly what I need to know to make a good request.
