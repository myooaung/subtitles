WEBVTT

00:00.240 --> 00:03.540
The Post operation is used to create a resource.

00:03.930 --> 00:07.890
An API defines operations that can manipulate a resource.

00:07.890 --> 00:15.600
The gut operation retrieves a resource post, creates a resource, put updates a resource and delete

00:15.600 --> 00:17.130
deletes a resource.

00:17.430 --> 00:21.390
In this lesson, your API will define a post operation.

00:24.610 --> 00:28.340
Before we do anything else, go to your pod class.

00:28.360 --> 00:33.970
Make sure to remove your complete constructor because it's just going to mess everything up.

00:34.420 --> 00:37.690
And we're not going to need this anymore.

00:39.480 --> 00:43.670
Because now we're going to be creating objects using a post operation.

00:43.680 --> 00:47.850
So we'll just set this equal to a new.

00:48.740 --> 00:49.760
ArrayList.

00:51.330 --> 00:52.230
All right.

00:53.180 --> 01:01.160
Because what we want ultimately is for Spring Boot to use the empty constructor and auto generate an

01:01.160 --> 01:03.540
ID for each object that gets created.

01:03.560 --> 01:07.700
We're not going to have those IDs of one, two, three, four, five, six and whatever.

01:08.330 --> 01:09.050
All right.

01:09.050 --> 01:15.380
The next step is, you guessed it, we expect the consumer to send a post request.

01:15.380 --> 01:22.390
So what we can do is use the post mapping annotation to map this request to a handler method.

01:22.400 --> 01:27.080
So we expect them to make a post request on slash contact.

01:27.440 --> 01:30.980
They're obviously going to be sending over payload along with their request.

01:30.980 --> 01:40.640
And what we're going to send back upon creating the contact object is we're just going to send back

01:40.640 --> 01:41.700
an HTTP status.

01:41.720 --> 01:44.960
We're not going to carry any data back to the consumer.

01:45.290 --> 01:51.290
So in this case, when we want it to carry back data as well as the status, you have to specify the

01:51.290 --> 01:53.090
type of data you would send back.

01:53.120 --> 01:58.460
In this case, we're just sending back a status and we're going to call the handler method, create

01:58.460 --> 02:03.290
contact, and it expects to receive a contact from the consumer.

02:06.020 --> 02:06.540
Okay.

02:06.950 --> 02:10.880
Let's not do anything for now inside the interface.

02:11.480 --> 02:16.490
What we will do is force the implementation to override a save function.

02:16.700 --> 02:18.380
So we're going to say void.

02:19.860 --> 02:21.720
Save contact.

02:22.940 --> 02:25.670
And it's going to expect a contact.

02:28.900 --> 02:34.120
And now back inside of my implementation, I can just override the following method.

02:35.930 --> 02:37.010
Here, we'll say.

02:37.580 --> 02:38.360
Contact.

02:38.360 --> 02:40.100
Repository, dot.

02:40.100 --> 02:41.420
Save contact.

02:46.700 --> 02:54.800
And back here I can say contact service dot save whatever contact gets passed in as payload inside of

02:54.800 --> 02:55.910
the post request.

02:56.450 --> 02:56.990
All right.

02:56.990 --> 03:01.890
And now we'll go back here and have a look at the 200 status codes.

03:01.910 --> 03:04.520
Which one do you think we should send back?

03:05.090 --> 03:05.710
Obviously.

03:05.720 --> 03:09.620
201201 means, hey, we got your request.

03:09.650 --> 03:14.630
It was successful, and a new resource was created as a result.

03:14.660 --> 03:19.690
Now, usually you'd want to send back the resource that was created as confirmation.

03:19.700 --> 03:24.380
But in this case, we're not going to be doing that just because it would add a lot of unnecessary work.

03:24.680 --> 03:30.860
Eventually, we'll be using an actual database, not an array list, and that's when we'll do that.

03:30.860 --> 03:37.820
But I'm very, very certain that the object will get created and there won't be any issues with the

03:37.820 --> 03:38.690
array list.

03:39.170 --> 03:42.330
All right, so here I can just return.

03:42.330 --> 03:49.070
And a new response entity that encapsulates an HTTP status.

03:50.210 --> 03:53.450
Of created status code 201.

03:55.540 --> 03:59.260
What I'm going to do is actually run my application in debug mode.

04:12.900 --> 04:14.460
I'll close this console.

04:15.830 --> 04:17.870
All right, let's try it out.

04:19.000 --> 04:21.330
We'll go back here or sorry.

04:21.340 --> 04:24.070
We'll go back here and we'll make a post request.

04:25.850 --> 04:31.430
To slash contact and we need to pass in some payload.

04:31.910 --> 04:34.820
So right here, we're going to define some JSON.

04:36.740 --> 04:38.630
Let's just copy over the format.

04:41.950 --> 04:46.180
Make sure to specify that we're sending over JSON to our API.

04:46.970 --> 04:47.930
All right.

04:48.610 --> 04:55.450
And the only fields that we're going to include in the JSON payload are the name and the phone number.

04:55.480 --> 05:05.560
The ID is going to be automatically generated inside of the empty constructor that we have in our class.

05:06.890 --> 05:07.370
Okay.

05:07.370 --> 05:08.960
Let's go ahead and send it over.

05:12.420 --> 05:16.590
All right if I press next and expand this.

05:16.860 --> 05:17.460
Hmm.

05:18.320 --> 05:26.990
Spring Boot is not able to serialize the contents of the request body onto our object.

05:27.290 --> 05:33.140
There's actually one last step, and before I explain this step, remember how I told you that the response

05:33.140 --> 05:40.580
body annotation that's contained within the rest controller serialize is the object that's returned

05:40.580 --> 05:43.100
into JSON before it's sent back.

05:43.700 --> 05:49.580
Well, postman, when it sends us data, it's not actually going to send us a Java object as would be

05:49.580 --> 05:50.570
suggested here.

05:51.390 --> 05:56.970
It's sending us a JSON data packet and our application isn't going to magically know what to do with

05:56.970 --> 05:57.840
the JSON.

05:57.840 --> 06:05.430
And so what we need to do is d serialize that JSON into a Java object.

06:05.640 --> 06:10.710
And so what we need to do is include the request body annotation.

06:11.850 --> 06:18.030
So a DC realizes the contents of the request body into a java object.

06:18.270 --> 06:20.580
So if we send that same request.

06:22.970 --> 06:28.790
You can see that thanks to request body, Spring Boot was effectively able to serialize the contents

06:28.790 --> 06:31.580
of the JSON into a Java object.

06:31.580 --> 06:40.490
So actually if we're going to look at this line by line, let's include breakpoints in all the setters.

06:43.760 --> 06:43.930
Uh.

06:44.170 --> 06:45.800
Let's just step through this.

06:45.820 --> 06:47.320
Make another request.

06:47.320 --> 06:48.310
Send it.

06:50.520 --> 06:54.300
So first spring boot creates a new object of the contact class.

06:54.930 --> 06:58.110
It creates a new object using your empty constructor.

06:58.170 --> 07:01.470
The ID field is auto generated over here.

07:02.420 --> 07:08.420
And every single setter that spring boot calls matches a field value from the JSON.

07:09.720 --> 07:16.650
So the name field matches the set name setter of our object and its corresponding value is going to

07:16.650 --> 07:18.120
get passed in accordingly.

07:18.780 --> 07:24.690
The phone number field matches the set phone number setter of our Java object.

07:29.730 --> 07:36.840
So just like that, the contents of our request body are serialized into a Java object.

07:38.090 --> 07:38.390
Here.

07:38.390 --> 07:41.540
We're saving that object inside of our repository.

07:42.370 --> 07:50.310
And the API should send back a status code of 201, which means we got the request and it was successful,

07:50.320 --> 07:51.820
but it took too long.

07:51.820 --> 07:55.270
So as it says, the socket hung up.

07:55.270 --> 07:56.530
Let's just send it again.

07:57.810 --> 07:59.040
Boom, boom, boom.

08:00.870 --> 08:02.760
Sends back a status code of 201.

08:03.090 --> 08:08.880
Now, this is very nice because on one hand we have an annotation called Response Body, which is part

08:08.880 --> 08:14.460
of your rest controller, and it's able to serialize the object that we're responding with into JSON.

08:14.640 --> 08:23.600
And we also have a request body which DC realizes the contents of incoming JSON into a Java object.

08:23.610 --> 08:29.430
And just like that, we created an API that's capable of communicating with another system.

08:31.970 --> 08:35.630
So to recap, the post operation creates a resource.

08:35.660 --> 08:38.840
This only leaves to operations put and delete.

08:38.840 --> 08:40.310
So let's get to it.
