WEBVTT

00:00.640 --> 00:04.120
Now that we have our table, we can add some data to it.

00:05.590 --> 00:08.290
By annotating our project class with the entity.

00:08.290 --> 00:15.220
Annotation Spring JP's object relational mapper understands that we need to create a relational table.

00:16.570 --> 00:22.930
The columns of our table were derived from the column annotation that we applied to every single field.

00:23.230 --> 00:26.920
We were able to do all of that without writing any SQL.

00:26.980 --> 00:32.350
The object relational mapper takes care of everything behind the scenes, but right now our table is

00:32.350 --> 00:32.690
empty.

00:32.710 --> 00:36.370
So in this lesson, you will add some data to the student table.

00:38.450 --> 00:44.130
JPA provides a CRUD repository that we can use to save entities into our database.

00:44.150 --> 00:49.970
Once we have our CRUD repository in place, then we can make a post request with payload that consists

00:49.970 --> 00:50.990
of JSON.

00:51.200 --> 00:56.540
The JSON that we send over will contain every single field except for the ID.

00:57.270 --> 01:04.680
We will serialize every JSON property into our Java entity and entity is just a Java object that spring

01:04.680 --> 01:11.250
Java can work with two JSON properties as you can see where serialized into two fields, the students

01:11.250 --> 01:13.470
ID for the time being remains null.

01:16.970 --> 01:21.230
And now from JPA Se Crud Repository, we're going to save the entity.

01:21.560 --> 01:24.620
The crud repository offers a save method.

01:24.620 --> 01:30.830
So by virtue of simply, quote unquote, saving our student object behind the scenes, what's going

01:30.830 --> 01:36.440
to happen is the object relational layer is going to take care of all the hard work and create a new

01:36.440 --> 01:41.810
student record inside of our student table and inside the primary key column.

01:41.810 --> 01:47.570
Our ID that uniquely identifies this record is going to get auto generated.

01:53.140 --> 01:57.950
So first I'll show you how to do everything we just described using plain old SQL.

01:57.970 --> 02:01.100
So here we've got our table of students.

02:01.120 --> 02:06.790
What I'm going to do is insert two new rows into the student table with the following values.

02:07.090 --> 02:10.660
So in the first row, we've got Harry Potter with an ID of one.

02:10.660 --> 02:16.570
And the second row we're inserting a new student called her Mini Granger with an ID of two.

02:16.600 --> 02:24.520
Let's run these SQL commands, and it just now inserted two new rows inside of our student table.

02:24.520 --> 02:31.630
What I can do is click on our student table and it should auto generate a query that allows us to view

02:31.660 --> 02:33.190
every single record.

02:33.820 --> 02:39.850
And here you can see that we saved two new students into our database, into our table.

02:40.150 --> 02:43.120
Now, once again, we're not here to write SQL statements.

02:43.120 --> 02:49.720
Spring JPA provides an object relational mapper that acts as a layer between our application and the

02:49.720 --> 02:57.070
database itself so we can define all of our logic using Java objects and the object relational layer

02:57.070 --> 02:59.590
will take care of everything behind the scenes.

03:00.160 --> 03:06.460
So you'll remember that step one was that Spring Java provides a crud repository that can save entities

03:06.460 --> 03:12.280
into our database in order to set up a repository that interact with an SQL database.

03:12.280 --> 03:18.310
All we have to do is define an interface that inherits from CRUD repository inside generics.

03:18.310 --> 03:23.590
The first parameter is the entity that you want to save, and the second parameter is the data type

03:23.590 --> 03:26.140
of its ID, which is going to be long.

03:26.140 --> 03:32.350
We're going to use identifiers of type long to uniquely identify each student entity inside of our table.

03:32.350 --> 03:35.080
Now notice that this repository is an interface.

03:35.080 --> 03:36.730
It's not a class.

03:36.730 --> 03:42.940
That's because behind the scenes spring JPA will provide will automatically provide an implementation

03:42.940 --> 03:45.100
of this interface during their time.

03:45.990 --> 03:51.180
An object will be created from this implementation and it will exist inside of the spring container

03:51.180 --> 03:52.320
as a bean.

03:52.320 --> 03:58.230
And now this repository bean will inherit all of the methods that the crud repository exposes, like

03:58.260 --> 04:01.980
save find by ID exists by and so on and so forth.

04:01.980 --> 04:07.530
We can then auto wire this repository being where we need it and use all of its methods.

04:08.290 --> 04:14.380
So back here inside a student repository java, what I'm going to do is define an interface, public

04:14.380 --> 04:15.520
interface.

04:15.910 --> 04:18.550
I will call it student repository.

04:20.020 --> 04:24.700
And this interface is going to inherit from CRUD repository.

04:25.790 --> 04:32.060
We're going to use this repository to read, update and delete student entities.

04:33.260 --> 04:39.710
And every single student entity that we save will be identified by IDs of type long.

04:42.930 --> 04:46.510
And perfect now that we've defined our interface behind the scenes.

04:46.560 --> 04:49.080
Spring Boot is going to auto generate a bean.

04:49.290 --> 04:55.260
That bean is going to inherit all of the methods that our CRUD repository exposes.

04:55.260 --> 05:02.460
So methods like save, save all find by ID exists by ID find all so on and so forth.

05:02.460 --> 05:05.070
We have all of these methods at our disposal.

05:05.750 --> 05:10.520
So what I'm going to do is go inside of our student service implementation.

05:10.730 --> 05:15.710
And right over here, I can auto wire our student repository bean.

05:15.720 --> 05:17.630
So I will auto wire.

05:20.660 --> 05:24.930
Whatever being exists inside of our spring container into the following variable.

05:24.950 --> 05:26.440
Student Repository.

05:26.450 --> 05:27.980
Student repository.

05:29.050 --> 05:29.410
Okay.

05:29.440 --> 05:34.960
Now you'll remember that the CRUD repository offers a save method that we can use to save, in this

05:34.960 --> 05:37.090
case, student entities.

05:38.660 --> 05:46.970
So inside of the save student method by simply calling student repository dot save student.

05:49.380 --> 05:54.870
The object relational layer is going to take care of all the hard work and save a new student record

05:54.870 --> 05:56.700
inside of our database.

05:56.970 --> 05:58.560
All right, step two.

05:58.560 --> 06:05.130
Now that our CRUD repository is in place, we can make a post request with the appropriate JSON payload.

06:05.160 --> 06:07.650
Let's start by setting up the request.

06:08.640 --> 06:10.410
So I'm going to go to a post man.

06:10.680 --> 06:17.070
And the request collection that I currently have is something that we set up during the workbooks.

06:17.100 --> 06:23.490
If you for some reason don't have the same setup that I do, download the file inside of the resources

06:23.490 --> 06:25.080
folder of this lesson.

06:26.930 --> 06:31.740
Once you do, what you're going to do is delete whatever collection you already have.

06:31.760 --> 06:37.460
Press on import and import the JSON file that I provided for you.

06:37.790 --> 06:42.380
It's going to know how to interpret the JSON file and create the following requests.

06:43.100 --> 06:43.700
All right.

06:43.700 --> 06:47.720
Now, this is the post request that I intend on sending.

06:47.750 --> 06:51.980
There should be something inside the body in this case, Harry Potter, with a birth with the following

06:51.980 --> 06:52.790
birth date.

06:52.940 --> 06:59.420
And before I send over this post request, what I'm going to do is go back to my student controller

06:59.420 --> 07:04.420
and we're going to configure the handler method that intercepts it, save student.

07:04.430 --> 07:08.570
So here what we're going to do is auto wire the student service bin.

07:09.700 --> 07:12.670
A wired student service.

07:12.670 --> 07:14.080
Student service?

07:15.390 --> 07:22.410
And when a post request is made, request body is going to d serialize the incoming JSON properties

07:22.410 --> 07:24.300
into a student object.

07:24.570 --> 07:26.940
And here what we can do is call.

07:27.770 --> 07:31.970
Student service dot save student students.

07:32.330 --> 07:38.180
Whatever student that gets passed in our student repository is going to save them to the H to database

07:38.180 --> 07:39.960
that our app is connected to.

07:39.980 --> 07:42.140
So let's actually try it out.

07:42.500 --> 07:48.350
Well, I seem to be having an error, and that's because it could not find the student service being.

07:48.350 --> 07:49.970
And silly me.

07:50.890 --> 07:55.510
I'm going to have to add the service annotation over here.

07:55.540 --> 08:02.050
Now, notice that you do not need to put a repository annotation here because Spring Boot is automatically

08:02.050 --> 08:06.940
going to create an implementation of this interface and that implementation will exist as a bean.

08:06.940 --> 08:08.960
So no need to put it here.

08:08.980 --> 08:15.820
You still need to add the service annotation to all of these classes so that spring boot is able to

08:15.820 --> 08:19.660
scan for them and create a bean out of them.

08:19.690 --> 08:23.860
For some reason my imports are not working, so let me just copy this over.

08:25.430 --> 08:27.220
And do the same thing over here.

08:27.230 --> 08:28.460
Let's get it over with.

08:31.870 --> 08:32.340
Okay.

08:32.350 --> 08:36.310
What I'm going to do actually, is rerun my application in debug mode.

08:44.420 --> 08:46.040
Not a breakpoint over here.

08:46.670 --> 08:47.270
Here.

08:48.160 --> 08:52.660
End here, and I'll go to the student controller.

08:52.960 --> 08:54.730
Let's add one more over here.

08:57.270 --> 09:01.170
So let's go ahead and make this post request.

09:04.590 --> 09:11.250
So here you can see the properties from the incoming JSON are getting serialized into a Java object.

09:18.490 --> 09:21.280
For the time being, the idea remains null.

09:21.280 --> 09:23.800
That's going to get auto generated later.

09:31.180 --> 09:37.170
But what's going to happen is our student repository is simply going to save this to our SQL database.

09:37.180 --> 09:39.940
So let me just press next and get it over with.

09:41.450 --> 09:43.940
All right, I'll go back over here.

09:44.090 --> 09:48.020
Let me just copy this query, because it's going to tell me to reconnect.

09:52.850 --> 09:54.050
And beautiful.

09:54.650 --> 10:01.850
I hope you can appreciate that we did not have to write any SQL to save this data into our table.

10:03.370 --> 10:11.110
All we had to do was invoke a very intuitive dot save method and the object relational layer that exists

10:11.110 --> 10:17.980
between our repository and the database itself takes care of all the hard work.

10:18.960 --> 10:22.980
You'll notice that an ID of one was automatically generated for the row.

10:23.250 --> 10:31.290
Remember that the primary key column uniquely identifies every row inside of this table, and then after

10:31.290 --> 10:37.860
the student gets successfully saved, you'll notice that the save method actually returns the student

10:37.860 --> 10:40.350
that was saved in the form of an object.

10:40.890 --> 10:46.630
If we go back to our student controller, we're actually sending this object back as a response.

10:46.650 --> 10:53.010
The resulting object that gets returned inside of our response entity is serialized into JSON before

10:53.010 --> 10:54.900
being sent back to the consumer.

10:55.820 --> 11:01.460
And here you can see an entity with an ID of one named Harry Potter with the following birth date was

11:01.460 --> 11:03.170
saved into our database.

11:03.170 --> 11:09.170
This is further confirmation to the consumer that their request was processed successfully and their

11:09.170 --> 11:11.270
data was saved successfully.

11:11.270 --> 11:13.070
201 created.

11:13.700 --> 11:14.600
Nice.

11:16.030 --> 11:19.580
So to recap in this lesson, you added rows to the student table.

11:19.600 --> 11:26.750
First we created our rows using plain old SQL, but we're not here to write any SQL statements.

11:26.770 --> 11:32.540
Courtesy of Spring GPUs, CRUD or repository, we can interact with our database.

11:32.560 --> 11:39.700
All we had to do was specify a very intuitive dot save method and a new student was added to the student's

11:39.700 --> 11:40.330
table.
