WEBVTT

00:00.240 --> 00:04.380
The solution will cover Part one of your global superstore challenge.

00:04.410 --> 00:08.640
Task one was to create a controller class and assign it a name of your choice.

00:08.640 --> 00:10.650
So we'll go ahead and do just that.

00:10.650 --> 00:14.640
I will create a new file called Store Controller Java.

00:18.170 --> 00:22.550
And I will make this into a controller class.

00:24.210 --> 00:25.290
In Task two.

00:25.290 --> 00:30.900
If a user makes a get request on an empty path, we need to map that request to a handler method called

00:30.900 --> 00:34.470
get form and then get form will return the form view.

00:35.970 --> 00:41.310
Before we can do that, since we're returning a form template, we need to make sure that we have final

00:41.310 --> 00:43.830
leaf installed, which we do perfect.

00:44.130 --> 00:51.570
And now we can just declare a handler method that can receive get requests on an empty path.

00:51.570 --> 00:54.330
The handler method is going to be called.

00:55.190 --> 00:56.150
Get form.

00:59.970 --> 01:02.010
And then we'll return the form string.

01:03.040 --> 01:03.380
Okay.

01:03.460 --> 01:08.200
Before we do anything, it's good to just keep testing things as you go along, even if what we did

01:08.200 --> 01:09.540
was fairly trivial.

01:09.550 --> 01:11.530
So we'll spin up a new terminal.

01:12.850 --> 01:16.510
I'll run my code using Maven clean spring boot to run.

01:27.260 --> 01:27.830
All right.

01:27.830 --> 01:29.690
Now I can just say local host, 80.

01:29.690 --> 01:30.200
80.

01:33.390 --> 01:37.710
The request goes to my handler method and it returns the form templates.

01:37.830 --> 01:38.550
Beautiful.

01:40.560 --> 01:46.830
Now the next step is to populate the dropdown list with values from the array in constants dot Java.

01:46.950 --> 01:53.970
So if you press the button right now there are only two options choose category and a placeholder option.

01:54.120 --> 02:00.180
Our dropdown list can be populated with an array of values, so we're going to keep the choose category

02:00.180 --> 02:06.030
option and every option that comes after must be generated by an array using final leaf.

02:06.540 --> 02:09.090
So we will.

02:09.660 --> 02:13.470
Upon returning the form, we'll need access to our model.

02:15.460 --> 02:18.920
Because ultimately it's the model that provides the data to our review.

02:18.940 --> 02:22.300
So now we can say model does not add attribute.

02:22.330 --> 02:25.750
The attribute we are going to add will be named categories.

02:25.990 --> 02:33.070
And this categories key will map to our constants dot categories array.

02:34.130 --> 02:38.060
So here we'll say constants dot categories.

02:40.320 --> 02:40.830
All right.

02:40.830 --> 02:45.030
And now back, in my view, inside former HTML.

02:45.330 --> 02:48.060
I have one option that says choose category.

02:48.060 --> 02:52.470
And every option that comes after needs to be generated by a timely loop.

02:52.620 --> 02:56.310
So here I can say if each is equal to.

02:57.730 --> 03:02.460
First I can use a variable expression to retrieve the model attributes.

03:02.470 --> 03:06.130
The model attribute is named categories.

03:07.230 --> 03:14.520
But that's going to do is fetch our array of categories and then this loop is going to run through every

03:14.520 --> 03:15.780
single category.

03:17.380 --> 03:18.910
In the categories array.

03:21.900 --> 03:28.320
And for every option that gets generated from this timely loop, we're going to set the text.

03:29.580 --> 03:33.090
Equal to the category that's currently being iterated through.

03:33.690 --> 03:39.630
And as before, we can use a variable expression to return a value that derives from the model object

03:39.870 --> 03:40.770
category.

03:41.520 --> 03:42.600
All right.

03:45.780 --> 03:48.720
If I go ahead and refresh.

03:49.620 --> 03:50.430
Beautiful.

03:55.240 --> 03:57.610
Well, right now it's down to task number four.

03:57.610 --> 04:03.670
And Task Force tells us that the value attribute is needed to determine what will be sent upon form

04:03.670 --> 04:04.450
submission.

04:04.870 --> 04:10.020
So this text value that each option is displaying means nothing.

04:10.030 --> 04:12.410
This is just what's displayed to the user.

04:12.430 --> 04:17.830
But what the option value actually equals is determined with the value attribute.

04:18.970 --> 04:24.430
So it tells us that the option displaying choose category should equal a blank value.

04:24.670 --> 04:26.950
So here we will say value.

04:27.820 --> 04:29.170
Is equal to blank.

04:30.960 --> 04:36.930
If the user were to choose the choose category option and then press submit the value that would be

04:36.930 --> 04:39.630
sent back in the post request would be blank.

04:41.150 --> 04:46.700
But if the user were to choose any other option like furniture, office supplies or technology, then

04:46.700 --> 04:50.440
the value that it equals should match the text being displayed.

04:50.450 --> 04:56.370
So if the user were to select furniture, we would want the value being sent to back to be furniture.

04:56.390 --> 04:57.890
So here we can say.

04:59.340 --> 05:02.540
Value is equal to and hmm.

05:02.680 --> 05:07.630
We would need to grab the category that's currently being iterated through.

05:07.660 --> 05:10.340
To do that, we need a family expression.

05:10.360 --> 05:14.710
Well, thankfully, family provides a timely value attribute.

05:17.610 --> 05:21.030
You always need this when you're evaluating a family's expression.

05:23.480 --> 05:26.770
So the value attribute is just straight up html.

05:26.780 --> 05:31.190
Finally, value allows it to obtain its results from a leaf expression.

05:31.310 --> 05:32.870
Nothing too complicated.

05:32.870 --> 05:38.120
And now it's worth mentioning that let's just say I work to avoid all this and just say value equals

05:38.120 --> 05:38.720
apple.

05:40.410 --> 05:46.470
Then no matter what the user selects, the value that will be sent back to the server will be Apple.

05:46.920 --> 05:48.960
But obviously we're not going to do that.

05:54.730 --> 05:55.180
All right.

05:55.180 --> 06:00.910
And for task five, if the user were to make a request on path inventory, we want to intercept the

06:00.910 --> 06:06.490
request with a handler method called get inventory and that method will return the inventory view.

06:06.640 --> 06:07.630
Simple enough.

06:07.630 --> 06:17.200
We'll go back to our store controller and we'll define a gut mapping annotation that will intercept

06:17.200 --> 06:25.450
requests on slash inventory, and the handler method to handle that request will be get inventory.

06:26.110 --> 06:31.210
And what that's going to do is just return the inventory view.

06:32.190 --> 06:33.150
All right.

06:37.700 --> 06:39.230
Slash inventory.

06:40.730 --> 06:41.230
All right.

06:41.230 --> 06:47.890
And we see a table with static data, nothing too interesting, but we'll be fixing that up in the next

06:47.890 --> 06:49.240
few workbooks.

06:50.860 --> 06:55.840
Now, the next step is to instrument the form and inventory buttons on the top navigator to make gut

06:55.870 --> 06:58.930
requests on their respective paths.

06:59.080 --> 07:02.620
Simple enough, we can use a link expression.

07:05.390 --> 07:07.640
As we have done many times in the past.

07:07.940 --> 07:14.330
So here in this anchor tag, we'll define finally a ref.

07:14.840 --> 07:23.390
And we'll set that equal to a link expression, which starts with an add symbol followed by two brackets.

07:23.750 --> 07:25.840
And the URL is context relative.

07:25.850 --> 07:27.860
So we can just specify the path.

07:29.950 --> 07:31.510
And here we'll do the same thing.

07:32.360 --> 07:35.630
This will make get requests on the path inventory.

07:39.560 --> 07:44.450
And we will apply the same thing inside of our inventory.

07:44.690 --> 07:45.290
HTML.

07:47.200 --> 07:49.300
And I'll paste the same thing here.

07:49.300 --> 07:55.710
But this will make requests on the home page and sure enough, this should work.

07:55.720 --> 07:58.270
Let's go back and make some requests.

07:58.600 --> 08:01.700
I'll go to inventory, then I'll go to form there and back.

08:01.720 --> 08:02.500
Beautiful.

08:05.440 --> 08:07.150
Now Task seven was optional.

08:07.150 --> 08:13.120
So if you want to stop here, by all means, but I'm going to use a breakpoints to trace the runtime

08:13.120 --> 08:15.940
of get requests made on different paths.

08:20.720 --> 08:29.990
So I'm going to apply the breakpoints to my handler methods and then I will stop the runtime using Control

08:29.990 --> 08:34.040
C And I'll go ahead and run the application in debug mode.

08:34.070 --> 08:37.520
If you're using IntelliJ, you should have already learned how to do this by now.

08:43.380 --> 08:43.890
All right.

08:43.890 --> 08:47.880
The first request we're going to make will be on local host 8080.

08:49.400 --> 08:51.620
The handler method intercepts the request.

08:51.620 --> 08:53.840
And if I step over this line.

08:54.590 --> 09:02.630
It adds data to the model such that the categories key maps to an array of string values.

09:02.810 --> 09:08.450
And then right before we return, the form finally has access to all of this model data.

09:10.080 --> 09:15.300
So here we're using a variable expression to grab the categories array inside of the model.

09:15.300 --> 09:22.290
And what it's going to do is for each category in the categories array, it's going to generate an option

09:22.290 --> 09:28.260
and the option that gets generated will equal a text that matches the current category that's being

09:28.260 --> 09:29.310
iterated through.

09:29.310 --> 09:35.130
And that same option is going to equal a value that matches the text being displayed.

09:36.930 --> 09:39.730
There are three categories that were looping through.

09:39.750 --> 09:43.530
So finally, each is going to generate three options.

09:43.800 --> 09:44.820
Press next.

09:47.020 --> 09:48.550
And it does just that.

09:50.320 --> 09:53.020
Let's make that same request on slash inventory.

09:55.470 --> 09:57.030
Nothing too crazy here.

09:57.390 --> 09:59.730
It just makes a request on slash inventory.

10:00.450 --> 10:04.710
This handler method intercepts it and it just returns the inventory view.
