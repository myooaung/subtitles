WEBVTT

00:00.820 --> 00:03.910
Now we're ready to finalize the great service implementation.

00:03.940 --> 00:09.820
The next step is to delete a student's grade based on whatever course that you're taking.

00:09.820 --> 00:18.700
So inside of the grade repository, we can define a specialized method from which GPA is going to generate

00:18.700 --> 00:19.960
a statement.

00:20.170 --> 00:25.090
So another acceptable action that we can define is delete by.

00:25.090 --> 00:30.370
And we're going to be deleting by the student ID as well as the course ID.

00:34.800 --> 00:35.220
All right.

00:35.220 --> 00:40.890
And back inside my great service implementation, I can say great repository, dot delete by student

00:40.890 --> 00:45.210
ID and course ID inside my handler method.

00:45.480 --> 00:47.070
I can delete that grade.

00:47.070 --> 00:51.540
So here I will say great service.

00:51.900 --> 00:53.000
Delete grade.

00:53.550 --> 00:56.010
Think we're ready to test it out?

00:57.110 --> 00:58.820
So what I'll do?

00:59.970 --> 01:01.170
Let me reconnect.

01:04.600 --> 01:09.310
And what I'm going to do is give Neville an A-minus in charms.

01:10.610 --> 01:14.480
So Neville would be the student with an idea for charms as an idea of one.

01:14.480 --> 01:19.400
So I'll create a grade four and one.

01:19.400 --> 01:21.770
Let's give him an A minus.

01:24.540 --> 01:25.800
Let's test it out.

01:26.070 --> 01:27.060
Everything's good.

01:27.090 --> 01:31.980
Let me update his grade to an A-plus for one.

01:32.520 --> 01:33.510
A-plus.

01:34.240 --> 01:34.660
Now.

01:34.660 --> 01:36.280
Neville should have an A-plus.

01:36.660 --> 01:41.170
Okay, let me delete the grade that has a student ID of four and of course, ID of one.

01:45.670 --> 01:49.320
And it says there is no transaction available for current thread.

01:49.330 --> 01:56.140
So the deletion because it requires a database access, it needs to be part of a transaction.

01:56.440 --> 02:01.540
Now what we never had to worry about this for the other methods that also require database access because

02:01.540 --> 02:07.840
they are by default transactional but for the specialized delete action.

02:09.020 --> 02:15.830
We need to add the transactional annotation to ensure that this action is part of our newly created

02:15.830 --> 02:16.760
transaction.

02:17.870 --> 02:18.880
Let's try it out now.

02:18.890 --> 02:22.310
I'm going to create that same grade for Neville.

02:23.150 --> 02:26.030
Going to delete his grid and it works perfectly.

02:26.300 --> 02:31.610
This error that you just saw, it's actually commonly known to happen among the delete by specialized

02:31.610 --> 02:32.190
methods.

02:32.210 --> 02:37.070
The accepted solution is to just give it the transactional annotation to make sure that it is part of

02:37.070 --> 02:40.040
a transaction when that is trying to access the database.

02:40.430 --> 02:40.940
All right.

02:40.940 --> 02:48.350
The next thing I want to do is set up a query that returns a list of grades based on a student ID find

02:48.350 --> 02:50.180
by student ID.

02:56.100 --> 03:01.800
And back inside of my grade service implementation, I can say great repository.

03:02.530 --> 03:03.370
Dot.

03:04.690 --> 03:07.000
Fine by student ID.

03:08.130 --> 03:16.260
Then I can go back to my grade controller, update the handler method grade service dot get student

03:16.260 --> 03:17.010
grades.

03:18.160 --> 03:21.490
So this will get all the grades for a particular students.

03:21.850 --> 03:24.790
And back inside of my grade repository.

03:26.480 --> 03:32.480
I'm going to create another query, but this one is going to find all the grades based on a course ID.

03:35.260 --> 03:37.550
All right, let me just make sure everything's good.

03:37.570 --> 03:38.680
We are good.

03:39.620 --> 03:42.180
I'll go back to my great service implementation.

03:42.200 --> 03:49.400
I will update this to be great repository defined by course ID and this one is fairly simple.

03:49.430 --> 03:50.420
Greater repository.

03:50.690 --> 03:55.970
Find all this returns and enter a bull which I'm going to typecast to a list.

03:57.980 --> 04:02.750
And I'll update my handler method back over to.

04:03.080 --> 04:04.820
Sorry, to my great controller.

04:07.080 --> 04:08.140
Here, I'll say.

04:08.160 --> 04:09.420
Great service.

04:10.020 --> 04:12.450
Do not get coarse grades.

04:14.490 --> 04:17.580
And here I'll say great service, Dot.

04:17.580 --> 04:19.230
Get all grades.

04:20.530 --> 04:21.280
All right.

04:21.280 --> 04:28.390
With the final line of code, I am proud to announce that we're done implementing our API.

04:28.420 --> 04:33.970
We still have to do exception handling in the next workbook, but as far as the functionality goes,

04:33.970 --> 04:37.150
we have implemented all of it and let's put it to the test.

04:40.110 --> 04:44.370
So first, what I'm going to do is I will submit.

04:45.180 --> 04:46.560
Four grades for Harry.

04:47.870 --> 04:51.200
So I'll give him an A-plus and a minus in the first course.

04:52.250 --> 04:54.470
I'll give him an A minus in the second course.

04:54.470 --> 04:55.290
What the heck?

04:55.310 --> 04:57.050
And a minus in the third.

04:57.050 --> 04:58.880
And then a minus in the fourth.

04:59.760 --> 05:00.950
I will give whoever.

05:00.960 --> 05:06.420
Number two is Ron Weasley a C-plus in the first course.

05:07.890 --> 05:09.810
A C-minus in the second.

05:11.230 --> 05:13.120
And a D-minus in the third.

05:14.620 --> 05:16.180
I will give her a mini.

05:17.220 --> 05:18.840
An A-plus and everything.

05:27.260 --> 05:27.830
All right.

05:27.830 --> 05:29.150
And I will give.

05:30.770 --> 05:31.730
Neville.

05:32.590 --> 05:34.000
A B-plus and everything.

05:39.190 --> 05:39.940
More.

05:40.760 --> 05:41.510
I've.

05:43.070 --> 05:44.030
And six.

05:45.490 --> 05:46.360
All right.

05:46.690 --> 05:53.350
The first request I need to test is, am I able to read all of the student grades for Harry?

05:56.230 --> 05:59.540
All right, let me just validate against my database.

06:05.460 --> 06:05.760
Okay.

06:05.760 --> 06:15.120
So Harry has a minuses in four courses and here we can see that it sent back a minuses in four courses.

06:15.480 --> 06:17.520
Let me get all the grades for Ron.

06:18.640 --> 06:25.450
Run as a C plus in charm C minus and defense against the dark arts and a D minus in HERBOLOGY.

06:25.930 --> 06:29.370
And that is exactly what we see over here.

06:29.380 --> 06:34.840
These are Ron's grades, C plus C minus and D minus in the following classes.

06:34.960 --> 06:39.580
So I can rest assured that get student grades is working fine.

06:39.580 --> 06:41.470
What about course grades?

06:42.690 --> 06:48.200
So here it seems that charms should have four grades associated with it.

06:48.210 --> 06:53.010
One A minus one C plus one A plus one B plus.

06:54.920 --> 06:56.360
Let's check that out.

06:58.570 --> 06:59.080
Beautiful.

06:59.110 --> 07:01.480
A minus C plus, A plus, B plus.

07:01.510 --> 07:03.780
Exactly what is seen in our database.

07:03.790 --> 07:05.800
Let's read all of the grades.

07:07.510 --> 07:09.640
Here we see 17 grades.

07:11.200 --> 07:17.980
And back here we also see 17 grades and that is all the last thing we have to do is apply some constraints

07:17.980 --> 07:19.060
to our grade entity.

07:19.060 --> 07:24.610
We'll do that in the next lesson, followed by exception handling, and then we'll be done implementing

07:24.610 --> 07:26.020
our rest API.

07:26.350 --> 07:26.830
All right.

07:26.830 --> 07:27.550
See you soon.
