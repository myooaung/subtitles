WEBVTT

00:00.360 --> 00:01.400
Welcome to part two.

00:01.410 --> 00:03.570
Now we're going to implement form submission.

00:03.570 --> 00:07.860
So the first task tells us to create a Jojo item class.

00:07.860 --> 00:11.610
So we'll create a new file called Item Java.

00:13.030 --> 00:17.140
And inside the item class, we will add the following fields.

00:17.620 --> 00:18.580
And now?

00:18.670 --> 00:21.180
Well, first we have to import the data class.

00:21.190 --> 00:25.840
And by the way, when you're coding, please make sure to import the correct class.

00:25.840 --> 00:30.160
So we're going to import the data class from java util, not from Java.

00:30.400 --> 00:31.090
SQL.

00:33.180 --> 00:36.000
It's really important that you're careful what you import.

00:36.240 --> 00:39.690
And now I will generate the getters and setters for each field.

00:39.720 --> 00:46.350
If you're using analogy, I already showed you how to do that in the lesson titled Path be the model.

00:48.500 --> 00:52.700
In any case, generate a full constructor.

00:56.280 --> 00:58.080
As well as an empty constructor.

01:03.010 --> 01:03.420
OC.

01:03.550 --> 01:04.240
Sweet.

01:04.630 --> 01:05.800
Everything looks good.

01:06.550 --> 01:06.880
Okay.

01:06.970 --> 01:11.500
Going back, we have to create an item object and bind it to the form.

01:11.500 --> 01:17.200
So let's do just that inside of.

01:18.020 --> 01:20.690
Well, let me just remove all of these breakpoints.

01:23.790 --> 01:25.260
Inside of get form.

01:26.810 --> 01:31.580
I'm going to add a new model attribute model dot add attribute.

01:32.640 --> 01:39.540
It's going to be a key called item that maps to a new item object.

01:40.960 --> 01:46.000
And this item object that we're passing into our model.

01:47.230 --> 01:51.460
We're going to bind it to our form using the leaf attribute object.

01:52.450 --> 01:58.330
And here we can use a variable expression to retrieve our item object.

01:58.330 --> 01:59.410
I believe it's called.

01:59.410 --> 01:59.920
Yeah.

02:02.030 --> 02:08.780
So this retrieves the item object that we're passing in and it binds it to our form.

02:10.130 --> 02:15.740
Task number three is to bind each form element to a field in the object, and it's telling us to pay

02:15.740 --> 02:19.550
attention to the fact that the dropdown list is also a form element.

02:19.580 --> 02:26.390
That makes sense because when we submit this form, all of the values are going to come from the following

02:26.390 --> 02:27.280
elements.

02:27.290 --> 02:30.100
This will give us the category that the user chose.

02:30.110 --> 02:36.170
This will give us the name they inputted, the price discount, etc. And once the user presses submit,

02:36.170 --> 02:39.830
all of that data will be sent as part of a post request.

02:39.830 --> 02:45.020
So we're going to bind this element to the category field of our item object.

02:45.020 --> 02:52.280
So we'll say finally, field is equal to and this time we can use a selection expression to select a

02:52.280 --> 02:54.920
field from the previously bound object.

02:54.920 --> 02:57.920
And that field, I believe, is called category.

03:00.360 --> 03:06.990
So for the sake of example, let's just say there was a let's just say there was an Apple option with

03:06.990 --> 03:08.220
a value of apple.

03:09.240 --> 03:16.350
If the user selects this option, then the value that will be used to update our category field will

03:16.350 --> 03:17.100
be Apple.

03:18.160 --> 03:21.820
But obviously they're going to choose either office supplies, furniture or a table.

03:22.330 --> 03:26.950
And we're going to bind this input to the name field.

03:31.860 --> 03:33.660
You may just copy and paste it.

03:36.080 --> 03:39.350
Will bind this input to the price field.

03:40.520 --> 03:44.390
We will bind this one to the discount field.

03:49.060 --> 03:51.910
Then we will bind this one to the date field.

03:52.810 --> 03:59.110
So as soon as the user submits the form, the category that they selected the name, they inputted the

03:59.110 --> 04:00.580
price discount, the date.

04:00.580 --> 04:04.390
All of that data will be sent as part of a post request.

04:05.970 --> 04:12.030
Now upon form submission, we need to actually make that post request and we can do that with the leaf

04:12.030 --> 04:13.260
attribute action.

04:17.930 --> 04:22.310
And where does it say to make a post request to on submit item?

04:22.310 --> 04:26.690
So once again we can use a link expression to specify a URL.

04:26.780 --> 04:33.230
The URL is context relative, so we don't need to define the host and port.

04:33.260 --> 04:36.170
We can just say slash submit item.

04:39.810 --> 04:40.420
Okay.

04:41.500 --> 04:46.750
And now it's telling us to create a handler method that intercepts the post request as well as an array

04:46.750 --> 04:49.270
list that can store item objects.

04:49.510 --> 04:55.120
Then we need to add that item to the data store, i.e. our array list and return the inventory view.

04:55.510 --> 05:00.190
Simple enough, we can go back to our store controller class.

05:01.670 --> 05:05.770
And we need to create a handler method that can receive post requests.

05:05.780 --> 05:13.910
So any post request that's made on the path submit item, we're going to map it to a handler method

05:13.910 --> 05:18.410
called actually, I don't think it says what you need to call the handler method.

05:18.410 --> 05:20.210
So we'll call it whatever we want.

05:20.210 --> 05:22.670
I'm going to call it handle submit.

05:23.690 --> 05:25.100
So handle submit.

05:25.100 --> 05:30.500
Upon intercepting the post request will receive the item object.

05:31.190 --> 05:32.210
Great.

05:32.450 --> 05:36.440
And then I think it told us to create an array list and populate it.

05:36.440 --> 05:37.790
So let's do just that.

05:38.150 --> 05:43.190
I'll create a list of type item.

05:44.980 --> 05:45.390
Uh.

05:45.900 --> 05:46.930
What should I call it?

05:46.950 --> 05:47.620
We'll call it.

05:47.640 --> 05:53.340
Items is equal to a new array list that can store item objects.

05:54.620 --> 05:55.460
All right.

05:55.670 --> 06:05.150
And now here I can say items dot add and we're going to add the item, object to it and return.

06:05.630 --> 06:12.830
Or actually what we're going to do is redirect them to make a request on slash inventory.

06:15.500 --> 06:20.900
If you're not sure why we're redirecting them as opposed to just returning the inventory view, I highly

06:20.900 --> 06:26.960
recommend you look back at the form submission lecture inside of the model view controller section.

06:27.170 --> 06:31.210
Explaining it here again would be a bit tedious anyways.

06:32.960 --> 06:34.230
Now we get to run our app.

06:34.250 --> 06:35.000
Cool.

06:35.360 --> 06:38.900
I'll go ahead and Maven Spring Boot clean.

06:38.900 --> 06:39.740
Run it.

06:40.740 --> 06:42.660
Or I should say Maven clean spring boots.

06:42.660 --> 06:45.420
Run it because the clean happens first.

06:46.580 --> 06:47.420
Okay.

06:52.850 --> 06:53.840
No need for Google.

06:53.870 --> 06:55.220
We'll just go here.

06:57.750 --> 07:03.540
I'll try to submit a coach for 300 bucks.

07:03.540 --> 07:04.530
We'll give them.

07:05.490 --> 07:06.570
I'm feeling generous.

07:06.600 --> 07:13.260
A 5099 discount order dates will say May 5th.

07:13.260 --> 07:17.640
Submit the item and we get an error.

07:18.000 --> 07:24.780
Now it's really important that whenever you get an error like this, try to ignore all of the noise

07:24.780 --> 07:26.940
and look for the meaningful messages.

07:27.060 --> 07:31.230
So the message here is that there was a problem with the date field.

07:31.620 --> 07:33.540
The value was rejected.

07:34.550 --> 07:35.260
Okay.

07:35.270 --> 07:36.290
Interesting.

07:36.860 --> 07:43.730
Fail to convert a value of type java string to java date for the property dates.

07:44.150 --> 07:45.590
All right.

07:45.950 --> 07:50.030
So upon receiving the post request, it received a string.

07:50.060 --> 07:52.010
Our application received a string.

07:53.110 --> 08:00.460
And it tried converting it to a date, but our spring boot application wasn't able to parse the following

08:00.460 --> 08:04.510
string into a date, and that's why it threw an exception.

08:05.430 --> 08:09.960
Now, where is this conversion happening and why is it failing?

08:10.080 --> 08:11.850
Let's figure that out.

08:13.350 --> 08:19.710
As always, if you want to debug something, I highly, highly recommend applying breakpoints.

08:20.250 --> 08:25.040
So I will now need for inventory.

08:25.050 --> 08:30.750
We can just add breakpoints here because it seems to be happening somewhere inside of handle submit.

08:30.750 --> 08:32.700
So I'll stop the application.

08:33.360 --> 08:35.610
I'm really bad at typing today it seems.

08:35.610 --> 08:38.820
And then I will run the app and debug mode.

08:44.730 --> 08:45.710
All right.

08:46.050 --> 08:48.390
So we'll go to local host 8080.

08:51.790 --> 08:53.920
I'll submit once again.

08:53.920 --> 08:55.420
We'll use the same data couch.

08:55.420 --> 08:57.130
300 bucks, 50, 99.

08:57.430 --> 08:59.680
We'll say May 5th.

09:01.530 --> 09:02.370
Interesting.

09:02.370 --> 09:03.960
Nothing got called.

09:05.220 --> 09:11.830
All right, well, ask yourself what happens before the logic inside of handles submit gets executed.

09:11.850 --> 09:16.470
A new item object is created using your empty constructor.

09:19.750 --> 09:27.490
And then Spring Boot is smart enough to update every single field in that object with payload from the

09:27.490 --> 09:28.550
post request.

09:28.570 --> 09:32.230
So what I'm going to do is set some new breakpoints.

09:33.280 --> 09:35.080
Maybe there is no need to put one here.

09:36.210 --> 09:39.120
We'll put one in said category one in set.

09:39.120 --> 09:40.620
Name the one inside.

09:40.650 --> 09:41.760
Set price.

09:41.760 --> 09:44.640
Set discount and set date.

09:46.640 --> 09:47.350
Okay.

09:49.570 --> 09:52.600
I'll go ahead and go back to local host 8080.

09:53.380 --> 09:54.620
We'll say furniture.

09:54.640 --> 09:55.180
Couch.

09:55.180 --> 09:56.110
300 bucks.

09:56.110 --> 09:57.190
50, 99.

10:02.780 --> 10:03.950
Submit the item.

10:03.980 --> 10:07.220
All right, so something does run before the exception is thrown.

10:07.220 --> 10:08.210
That's comforting.

10:08.780 --> 10:15.500
So just as our handler method was about to run, Spring Boot creates a new item object using your empty

10:15.500 --> 10:16.340
constructor.

10:16.340 --> 10:22.430
And then it's smart enough to update every single field in that object with a value from the post request.

10:22.430 --> 10:24.980
So here it updates the category with furniture.

10:34.710 --> 10:36.450
Then it updates the discount.

10:39.970 --> 10:41.440
Then it updates the name.

10:44.130 --> 10:45.720
Then in updates the price.

10:48.140 --> 10:50.090
So it seems everything was updated.

10:50.090 --> 10:52.040
Will it update our date?

10:53.850 --> 10:56.370
And that's where the exception is happening.

11:01.310 --> 11:02.720
All right.

11:06.620 --> 11:09.500
So now we know exactly where the exception is happening.

11:09.500 --> 11:11.840
But why is it happening here?

11:11.870 --> 11:17.360
The problem is that the form is sending back a string with the following data format.

11:18.510 --> 11:25.380
Year, month, a day and spring boot as it's trying to update your date field.

11:25.410 --> 11:32.820
It tries parsing the string that it receives into a date that matches the format of your data field.

11:32.910 --> 11:40.140
But during this parsing process, it throws an exception because it cannot convert from type string

11:40.170 --> 11:42.780
to a date for the following value.

11:42.810 --> 11:46.410
We can actually confirm this by replacing this with a string.

11:46.410 --> 11:54.720
Instead we'll say string str and for test for troubleshooting purposes I should say we'll just set this

11:54.720 --> 11:59.310
equal to a new date for now and we'll.

12:00.030 --> 12:02.760
Put only a breakpoint right here.

12:03.120 --> 12:04.710
We run our app.

12:08.860 --> 12:09.230
Okay.

12:09.270 --> 12:10.000
We'll go to local.

12:10.020 --> 12:10.740
Host 80.

12:10.750 --> 12:11.340
80.

12:14.600 --> 12:15.540
Furniture.

12:15.560 --> 12:16.310
Couch.

12:16.310 --> 12:19.790
300 5099 March 5th.

12:21.490 --> 12:21.750
Okay.

12:21.760 --> 12:29.470
And as you can see, it receives the string 2020 20505 So now I'm positive of what the crash is.

12:29.470 --> 12:32.200
I will revert everything to what it was before.

12:32.410 --> 12:38.590
What Spring Boot was trying to do is behind the scenes it was trying to parse this string into a date

12:38.590 --> 12:41.020
that matches the format of your data field.

12:41.500 --> 12:42.700
It was enabled to do that.

12:42.700 --> 12:48.340
So through an exception where a data field probably has a different format than the one that's being

12:48.340 --> 12:49.840
provided from the post request.

12:49.840 --> 12:51.250
So what we need to do.

12:52.660 --> 12:55.740
Is the fine a format for this field.

12:56.610 --> 13:00.050
That matches the one provided from the post request.

13:00.060 --> 13:03.390
So we'll say the pattern is equal to it seems.

13:03.420 --> 13:03.810
Yea.

13:03.810 --> 13:04.080
Yea.

13:04.080 --> 13:04.530
Yea.

13:04.560 --> 13:05.040
Month.

13:05.040 --> 13:05.460
Month.

13:05.460 --> 13:05.760
A day.

13:05.760 --> 13:06.300
Day.

13:06.390 --> 13:06.900
So.

13:06.900 --> 13:07.260
Yea.

13:07.260 --> 13:07.590
Yea.

13:07.590 --> 13:07.860
Yea.

13:07.860 --> 13:08.310
Yea.

13:08.340 --> 13:08.820
Month.

13:08.820 --> 13:09.360
Month.

13:09.360 --> 13:09.920
Day.

13:09.930 --> 13:10.500
Day.

13:11.400 --> 13:12.570
All right.

13:12.660 --> 13:17.430
Now, I'm pretty positive this will work, so I will stop the runtime.

13:17.700 --> 13:19.650
You run the app normally.

13:23.020 --> 13:24.700
No more need for breakpoints.

13:41.910 --> 13:42.040
Okay.

13:42.230 --> 13:43.190
We'll say couch.

13:43.190 --> 13:44.120
300 bucks.

13:44.120 --> 13:45.260
59, 89.

13:47.270 --> 13:48.230
A fifth.

13:50.340 --> 13:51.150
Beautiful.

13:53.370 --> 14:01.050
Upon receiving the post request, Spring Boot was able to successfully create a new item object, populate

14:01.050 --> 14:05.700
it with payload from the post request, add that item to the items ArrayList.

14:05.700 --> 14:13.590
Then it redirected the user to make a get request on slash inventory and then get inventory return the

14:13.590 --> 14:15.090
inventory view.

14:15.510 --> 14:23.280
So just before we wrap this up, I want to emphasize that it's really important when you get an exception

14:23.280 --> 14:29.130
in spring boot, don't panic, look at the error message and then use a breakpoint to try to identify

14:29.130 --> 14:31.440
exactly where the error is happening.

14:31.440 --> 14:34.230
Only then will you have an idea of what's going on.

14:34.230 --> 14:38.340
And then the most important step is to research.

14:38.340 --> 14:39.960
Research for a solution.

14:39.960 --> 14:41.310
Go on, StackOverflow.

14:41.310 --> 14:43.230
Maybe this question has been asked before.

14:43.230 --> 14:46.950
Maybe someone else has encountered this in the past and there's a whole thread about it.

14:46.950 --> 14:52.680
Look up articles on how to correctly submit a date through a form with spring boot and only look at

14:52.680 --> 14:53.640
the sample code.

14:53.640 --> 14:58.290
Compare it with yours, see what's different, and then you'll realize, Oh, they have a date time

14:58.290 --> 14:59.280
format pattern.

14:59.280 --> 14:59.970
I don't.

14:59.970 --> 15:01.380
Maybe that's where I'm going wrong.

15:01.380 --> 15:05.700
And then that will give you an idea of how to solve your issue.

15:05.700 --> 15:12.060
So it's really important that you get into the habit of applying these four steps every single time

15:12.060 --> 15:13.560
you get an exception.

15:13.590 --> 15:19.890
Just stay, come break, point your way to find where the issue is and then research a solution.

15:20.490 --> 15:21.120
All right.

15:21.150 --> 15:23.100
See you in the next challenge.
