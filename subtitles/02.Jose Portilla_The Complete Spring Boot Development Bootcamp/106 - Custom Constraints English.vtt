WEBVTT

00:00.180 --> 00:03.630
You can create a custom annotation to validate a field.

00:03.810 --> 00:06.620
Spring Root provides many standard annotations.

00:06.630 --> 00:13.860
You already use the not to blank annotation, but sometimes what you're trying to validate is very specialized.

00:13.890 --> 00:20.730
For example, if I want to check if the score is a letter grade between plus to F, this requires a

00:20.730 --> 00:25.560
custom constraint annotation unless there's some standard annotation that exists that I don't know about.

00:25.560 --> 00:31.550
But as far as I know, this behavior is specialized and we need custom validation logic.

00:31.560 --> 00:35.520
So in this lesson you will create a custom annotation for the score.

00:38.600 --> 00:40.610
Now the process is relatively simple.

00:40.610 --> 00:43.400
You need two things for a custom constraint annotation.

00:43.430 --> 00:47.150
You can define an annotation using the at interface keyword.

00:49.270 --> 00:53.560
And then you need to connect your annotation to validation logic.

00:53.860 --> 00:58.870
So we'll start with step one, creating the annotation using the at interface keyword.

01:03.480 --> 01:09.090
So the first step is to say public at interface followed by what you want to name your annotation.

01:12.600 --> 01:16.650
And then for every annotation you have to define a target.

01:16.860 --> 01:20.640
The target means where is this annotation going to be applied?

01:20.640 --> 01:22.440
Will you apply it to methods?

01:22.440 --> 01:24.210
Will you apply it to fields?

01:24.210 --> 01:25.740
Will you apply it to classes?

01:25.740 --> 01:26.910
To constructors?

01:29.290 --> 01:35.500
You also need to define a retention of runtime because we would want this annotation to be retained

01:35.500 --> 01:37.270
while we're running the application.

01:39.480 --> 01:43.470
So this is how you would define any annotation in Spring Boots.

01:47.140 --> 01:49.960
Let's go ahead and do just that.

01:50.230 --> 01:52.810
We'll say we'll create a new file.

01:53.940 --> 01:56.190
Call it scorched java.

01:57.670 --> 01:58.090
All right.

01:58.090 --> 02:00.960
As I create this class, it says public class core.

02:00.970 --> 02:06.550
But because we're creating an annotation, we have to say public act, interface score.

02:07.700 --> 02:09.620
First thing you have to define is the target.

02:09.620 --> 02:12.230
What will this annotation bind to?

02:12.320 --> 02:14.040
Is it going to bind to constructors?

02:14.060 --> 02:16.440
Is it going to bind to methods to fields?

02:16.460 --> 02:20.400
In this case, it's just going to bind to fields.

02:20.420 --> 02:27.320
Then we have to define the retention policy because we want this annotation to be retained during the

02:27.320 --> 02:28.100
runtime.

02:28.580 --> 02:31.940
This is how you would define any annotation in spring.

02:31.970 --> 02:38.960
So now we can go ahead and apply this annotation to the score field.

02:38.960 --> 02:40.580
So we'll just say add score.

02:41.700 --> 02:42.610
All right.

02:42.630 --> 02:49.200
Now, notice that I keep calling this annotation as opposed to a constraint validation annotation because

02:49.200 --> 02:52.890
we haven't applied any logic for this to be considered a constraint.

02:53.160 --> 02:56.220
Constraint annotations are more specialized in that.

02:56.220 --> 03:00.390
You need to also explicitly specify that this is a constraint.

03:00.690 --> 03:05.130
And then here is where you would connect this constraint to validation logic.

03:12.370 --> 03:18.070
So here I have to actually specify that this annotation will actually serve as a constraint.

03:19.620 --> 03:20.600
All right.

03:20.610 --> 03:27.010
And I need to connect this constraint annotation to a class that implements a validation logic.

03:27.030 --> 03:31.010
The way to do that is to write out the class name.

03:31.020 --> 03:36.450
In this case, I'm going to call my class score validator and follow this up with class.

03:36.810 --> 03:43.440
Now, the score validator class does not exist yet, so I'm going to have to do is create a new file

03:43.440 --> 03:45.900
called score validator dot Java.

03:51.150 --> 03:51.510
Oh.

03:51.690 --> 03:54.450
I need to follow this up with a validated by.

03:55.210 --> 03:58.000
Is equal to all the right.

03:59.090 --> 04:03.860
So this leads us to step two, which is to actually connect our constraint annotation to validation

04:03.860 --> 04:04.510
logic.

04:04.520 --> 04:09.340
We've already connected it to a validator class which to put some logic into it.

04:09.350 --> 04:16.400
So the first thing you have to do to create a validator class is to implement the constraint validator

04:16.400 --> 04:17.270
interface.

04:17.690 --> 04:23.150
The first parameter refers to the annotation type, and the second parameter is the type of value that

04:23.150 --> 04:24.050
we're validating.

04:28.280 --> 04:30.590
So here we're going to have to implement.

04:31.720 --> 04:40.030
The constraint validator interface, the constraint validator whose definition you can travel to expects

04:40.030 --> 04:41.080
to parameters.

04:41.080 --> 04:44.890
So if you're using a mac, press the command key.

04:44.920 --> 04:50.230
If you're using a Windows Press the control key, this applies to IntelliJ or VTS code.

04:50.230 --> 04:55.150
Click on the interface and you can see it expects to parameters.

04:55.150 --> 04:59.200
The first parameter is the annotation that you're validating in this case score.

04:59.230 --> 05:02.590
The second parameter is the type of value that you're validating.

05:03.070 --> 05:05.920
So we'll say the annotation is scored.

05:07.130 --> 05:10.010
And the type of value is string.

05:11.170 --> 05:12.100
Splendid.

05:12.870 --> 05:17.610
Now, if you remember from my Java boot camp, an interface is a contract of behavior.

05:17.640 --> 05:25.050
This was explained, I believe, in the polymorphism section and what a interface does is it defines

05:25.050 --> 05:27.210
methods that a class needs to override.

05:27.840 --> 05:29.970
In this case, the method is is valid.

05:29.970 --> 05:34.140
So go back here and override is valid.

05:36.920 --> 05:42.140
This method is really important because it's the heart of where the validation is actually happening.

05:42.350 --> 05:46.970
This method needs to return true if the score inputted by the user.

05:46.970 --> 05:51.350
If that value equals a letter grade from A+ to F.

05:51.560 --> 05:55.770
Otherwise it must return false meaning that there are errors.

05:55.790 --> 05:58.910
So what I'll start by doing is I will create a list.

06:00.020 --> 06:01.310
String values.

06:02.400 --> 06:08.130
We'll call it scores is equal to arrays dot as list.

06:09.300 --> 06:11.580
And I'll say a plus.

06:12.590 --> 06:15.500
Uh, a a minus.

06:18.670 --> 06:20.260
I'll have to copy this.

06:20.260 --> 06:23.020
One, two, three, four times.

06:23.260 --> 06:30.040
Here we can just say F, here we'll say B plus, b b minus.

06:31.330 --> 06:31.660
C.

06:32.060 --> 06:32.980
C.

06:32.980 --> 06:33.400
C.

06:33.400 --> 06:37.480
Minus D minus d, d plus.

06:41.010 --> 06:42.870
Don't forget our comas.

06:44.950 --> 06:45.730
All right.

06:46.880 --> 06:53.840
And now I can create a simple for loop that compares the value inputted by the user against each value

06:53.870 --> 06:54.530
here.

06:54.800 --> 06:56.600
So I'll say for.

06:57.920 --> 07:02.750
Each to iterate over each string and the score is list.

07:02.960 --> 07:09.650
And I'll say if the value inputted by the user, make sure to use the equals method, not the equals

07:09.650 --> 07:10.460
equals operator.

07:10.460 --> 07:15.140
Because we're dealing with strings here if the value equals one of the letter grades.

07:16.200 --> 07:17.280
Then we'll return.

07:17.280 --> 07:17.970
True.

07:19.090 --> 07:21.490
Otherwise return false.

07:21.970 --> 07:23.170
And I think we're done.

07:24.520 --> 07:31.660
You created a custom constraint annotation and then you connected it to a validator that implements

07:31.660 --> 07:33.250
the validation logic.

07:34.280 --> 07:38.240
This is how you would create any constraint annotation in Spring Boot.

07:39.230 --> 07:46.750
Now there's just one last thing I need to address, and that is inside of your resources folder.

07:46.760 --> 07:48.350
I left you some code.

07:48.380 --> 07:51.770
I want you to pause the video and copy it over here.

08:05.950 --> 08:12.040
Now before we panic, I just want to say that in accordance with the spring boot documentation, when

08:12.040 --> 08:18.970
you're defining a constraint annotation, you must always define the groups and the payload parameters.

08:19.510 --> 08:20.620
Don't be frightened.

08:20.620 --> 08:25.540
Just know that when you're creating a constraint annotation, you must always include these.

08:26.020 --> 08:33.100
The message parameter is interesting because what this does is if the user violates this constraint,

08:33.100 --> 08:36.910
then our binding result will retain this default error message.

08:36.910 --> 08:42.040
But we're actually going to override this message as we did before.

08:42.520 --> 08:47.050
And we'll say Score must be a letter grid.

08:49.320 --> 08:51.180
So don't panic too much.

08:51.180 --> 08:54.660
I would just consider these boilerplate code that you need to include.

08:55.230 --> 08:55.680
All right.

08:55.680 --> 08:59.730
And now we have constraint annotations bound to each field.

08:59.730 --> 09:07.680
So when our handler method receives the post request, valid is going to validate three fields inside

09:07.680 --> 09:13.410
of our grade object, and the binding result is going to carry the result of that validation.

09:14.590 --> 09:20.410
It will carry the results for name, subject and score, and it's going to send all of that data back

09:20.410 --> 09:21.340
to form.

09:21.580 --> 09:24.040
Here we're catching the error for the field name.

09:24.040 --> 09:26.520
Here we're catching the error for the subject field.

09:26.530 --> 09:29.440
We're going to catch the error for the score field as well.

09:31.610 --> 09:32.270
All right.

09:32.270 --> 09:34.670
If I go ahead and run the application now.

09:44.610 --> 09:46.290
We'll say local host.

09:46.290 --> 09:47.430
80, 80.

09:52.080 --> 09:52.960
Um.

09:52.980 --> 09:54.060
Leave the name blank.

09:54.090 --> 09:54.840
Leave the score.

09:54.870 --> 09:55.440
You know what?

09:55.470 --> 09:56.790
Here, we'll say our plus.

09:56.790 --> 09:59.970
That's the example I typically default to.

10:00.660 --> 10:01.900
We'll leave the subject blank.

10:01.920 --> 10:03.180
Press submit.

10:04.030 --> 10:05.440
Nice name.

10:05.440 --> 10:06.640
Cannot be blank score.

10:06.670 --> 10:08.320
Must be a letter grade and subject.

10:08.320 --> 10:09.550
Cannot be blank.

10:14.410 --> 10:21.970
The valid annotation uses the logic that we defined inside of the score validator to check if the value

10:21.970 --> 10:23.770
that was inputted by the user.

10:23.800 --> 10:27.070
Is it valid or not in this case is valid.

10:27.070 --> 10:28.240
Returned false.

10:28.240 --> 10:34.900
So valid determined that there was an error and that error is eventually carried by the binding result

10:34.900 --> 10:38.680
sent over to our form and our belief errors.

10:38.680 --> 10:42.040
Attribute catches that error and displays it to the user.

10:42.220 --> 10:47.500
That's all you added a constraint for each field, one custom constraint and two default ones.

10:47.500 --> 10:50.590
Stick around for the breakpoint session for a full recap.
