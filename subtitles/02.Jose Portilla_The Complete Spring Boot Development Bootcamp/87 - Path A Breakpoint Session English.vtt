WEBVTT

00:00.390 --> 00:01.950
Welcome to this breakpoint session.

00:01.950 --> 00:05.760
I'm going to start off by running the application and debug mode.

00:07.070 --> 00:14.690
And before I actually end up adding any breakpoints, what I'm going to do is populate the data store

00:14.690 --> 00:15.830
with some data.

00:16.160 --> 00:19.130
So I'll wait for the request to get processed.

00:19.130 --> 00:25.730
We'll say Harry C minus potions, we'll add another grade, go back to local host 8080.

00:25.820 --> 00:27.650
We'll add another gate for her mini.

00:28.620 --> 00:29.790
Press submit.

00:30.030 --> 00:34.080
And I think now we're ready to apply some breakpoints.

00:34.380 --> 00:39.150
I'm going to add breakpoints pretty much in every single handler method.

00:41.630 --> 00:48.650
We'll add some and get grades some and get great index just for the purpose of tracing the runtime.

00:48.680 --> 00:54.500
I already added a throwaway print line function here just for the sake of putting a breakpoint.

00:54.710 --> 00:56.330
Set name, set.

00:56.330 --> 00:58.160
Subject, set, score.

00:58.370 --> 00:58.820
All right.

00:58.820 --> 01:02.360
Those are all the breakpoints that I want to apply.

01:02.720 --> 01:08.210
And so now what I'm going to do is starting from the very top, make another get request on local host

01:08.210 --> 01:09.830
88 slash grades.

01:10.460 --> 01:16.460
The first breakpoint hits and the request maps to the handler method get grades.

01:16.490 --> 01:22.070
The handler method adds an attribute to the model grades that maps to an array list.

01:24.000 --> 01:25.470
If I press continue.

01:26.070 --> 01:27.570
Now, the model has data.

01:27.570 --> 01:33.210
If I drill into it, you'll notice a string key called grades that maps to a value.

01:33.210 --> 01:36.210
That's an array list with two grade objects.

01:38.380 --> 01:44.110
As the handler method is about to return the grades template, it's going to first send over all of

01:44.110 --> 01:50.830
that model data to our time leaf templates inside the template file leaf is going to generate as many

01:50.830 --> 01:55.360
table rows as there are elements inside of the array list.

01:55.630 --> 02:02.260
For every grade object that it loops through, it generates a row that shares the exact same name,

02:02.260 --> 02:09.670
the exact same subject, and the same score, as well as an update button whose link is connected to

02:09.670 --> 02:10.900
that grade's name.

02:11.320 --> 02:15.520
There are two grades, so Leaf is going to generate two rows.

02:16.390 --> 02:18.040
As you can clearly see over here.

02:19.700 --> 02:22.070
Now if I pressed the first button.

02:23.580 --> 02:29.490
It's going to make a get request to local host 8080 passing back the student name.

02:30.150 --> 02:35.850
The handler method intercepted the get request and it received the request parameter inside of a variable

02:35.850 --> 02:37.080
called string name.

02:40.140 --> 02:45.330
Now if I step inside get grayed index by just pressing continue.

02:47.620 --> 02:52.600
It's going to eventually find a grade object that matches this name parameter.

02:52.630 --> 02:55.080
It should be the object, that index zero.

02:55.090 --> 02:58.060
So eventually it will return and zero.

03:02.740 --> 03:08.060
And it did return the index a grab the object at that index and added it to the model.

03:08.080 --> 03:09.980
You can check the model itself.

03:10.000 --> 03:15.010
You can see that we have a great key that maps to Harry's great object.

03:16.860 --> 03:22.860
As the handler method is about to return the form template first it sends over the model data.

03:23.650 --> 03:28.360
The form element is going to look inside the model for a great object.

03:29.200 --> 03:36.100
This great object is bound to this form and every underlying field is bound to a form input.

03:36.130 --> 03:41.620
The fields are populated, so it follows that the form is going to be populated as well.

03:43.630 --> 03:45.040
As you can clearly see here.

03:45.770 --> 03:51.980
Now, if I were to change this to a D-minus, when you submit the form.

03:53.270 --> 03:56.870
A post request is going to carry that data to the back end.

03:56.900 --> 04:03.920
Now the first thing that happens is the handler method actually receives the post request, and as soon

04:03.920 --> 04:09.150
as it does, you can see that it starts by creating an empty grade object.

04:09.170 --> 04:15.470
So if we go to grade Java, it's already creating an empty grade object using your empty constructor.

04:15.740 --> 04:21.350
And then Spring Boot is smart enough to use your setters and update every field inside of the grade

04:21.350 --> 04:24.050
object with payload from the post request.

04:24.050 --> 04:27.410
It updates the name field with a value from the post request.

04:29.020 --> 04:32.440
It updates the score field with a value from the post request.

04:33.220 --> 04:37.150
And that updates the subject field with a value from the post request.

04:37.630 --> 04:38.500
Nice.

04:39.940 --> 04:45.550
As we step further into the handler method, it's going to call get grade index.

04:46.310 --> 04:52.640
The name parameter does match one of the objects in the array list, so this will eventually return

04:52.640 --> 04:53.930
an index of zero.

04:54.500 --> 04:55.700
Let's just step through it.

04:55.730 --> 04:57.320
It does return an index of zero.

04:57.320 --> 04:58.220
That's great.

04:58.250 --> 05:05.600
The index is not equal to -1000, so the block gets executed and it updates the object at that index.

05:05.600 --> 05:11.090
So now instead of having a C minus, Harry will have a D minus.

05:11.480 --> 05:16.880
And then after we've successfully submitted the form, whether it's an addition, whether it's an update,

05:16.880 --> 05:21.530
we redirect the client to make a get request on slash grades.

05:21.530 --> 05:22.430
So.

05:23.230 --> 05:25.210
Then get grades is going to get called.

05:25.210 --> 05:28.120
It's going to add the updated ArrayList to the model.

05:29.900 --> 05:36.170
Here we now see a key value pair where the grade's key maps to our updated array list.

05:37.630 --> 05:43.570
And as the handler method is about to render the grades view first, it sends over the model data to

05:43.570 --> 05:50.680
grades XHTML, HTML and finally is going to generate a table with the rows that reflect the newly updated

05:50.680 --> 05:51.540
array list.

05:51.550 --> 05:54.550
So if I go and press that final continue button.

05:56.550 --> 05:58.020
We see the change.

06:00.010 --> 06:00.770
And that's really it.

06:00.800 --> 06:03.200
I hope you enjoyed this breakpoint session.

06:03.200 --> 06:04.850
I'll see you in the next lesson.
