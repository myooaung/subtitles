WEBVTT

00:00.210 --> 00:03.270
Same leaf allows you to combine the view and the model.

00:05.140 --> 00:09.980
Your model contains data, but the next step is to merge that data with the view, and that's what Fine

00:10.030 --> 00:10.840
Leaf is for.

00:13.920 --> 00:17.670
So in this lesson you will use thin leaf to combine the view and the model.

00:20.570 --> 00:22.330
Let's go through the process right now.

00:22.340 --> 00:28.520
Your view is a static HTML and your model contains an attribute that maps to a grade object.

00:28.550 --> 00:30.440
A key value pair, if you will.

00:30.860 --> 00:36.830
Somehow Leaf is going to magically merge the data from the model with visual elements in the view.

00:42.070 --> 00:43.480
How will it do that?

00:46.730 --> 00:49.430
The answer lies in variable expressions.

00:51.640 --> 00:56.050
A variable expression executes on a model attribute in some way.

00:56.260 --> 01:01.390
Repeating it one more time a variable expression executes on a model attributes.

01:04.770 --> 01:10.950
A variable expression consists of a dollar sign followed by curly brackets inside the curly brackets.

01:10.970 --> 01:15.040
The variable expression executes on a model attribute in some way.

01:15.050 --> 01:19.280
In this case, the variable expression returns the model attribute age.

01:24.750 --> 01:28.620
There are many ways that a variable expression can execute on a model attributes.

01:28.650 --> 01:34.560
A variable expression can be used to return a model attribute or a value that derives from it.

01:34.800 --> 01:38.190
It can execute a condition based on a model attributes.

01:39.610 --> 01:42.580
A variable expression can also be used in a loop.

01:43.240 --> 01:47.560
And it can also execute utility methods on a model attribute.

01:48.250 --> 01:51.100
In this lesson, we're going to be looking at the first scenario.

01:54.970 --> 01:57.700
Finally, text displays a text value.

02:01.160 --> 02:06.810
This variable expression returns the score that derives from the model attribute grade.

02:06.830 --> 02:10.690
Now, this value could be a string, could be a boolean, could be a number.

02:10.760 --> 02:12.800
Finally, text doesn't care.

02:12.950 --> 02:17.630
All time leaf text is going to do is display the result as a text value.

02:21.240 --> 02:24.000
You should already have finally installed as a dependency.

02:24.030 --> 02:28.770
The family of dependency is required to work with HTML templates.

02:30.900 --> 02:37.260
So far your table only contains one row with a bunch of headers as is reflected in the UI.

02:38.490 --> 02:42.360
Per the HTML cheat sheet, I'm going to add another row.

02:45.230 --> 02:47.240
That contains three data cells.

02:47.240 --> 02:48.830
So these are header cells.

02:48.830 --> 02:50.810
We're going to create data cells.

02:52.930 --> 02:55.870
I'll copy this two more times.

02:57.190 --> 02:59.890
The first cell we're going to say, Harry.

03:01.330 --> 03:03.970
The subject will be potions.

03:05.030 --> 03:07.370
In the score is a C minus.

03:08.810 --> 03:09.160
All right.

03:09.170 --> 03:13.790
Now, thanks to Spring Boot Def Tools, our application should reflect the changes.

03:13.790 --> 03:14.900
And it does.

03:15.710 --> 03:17.960
And now your table has another row of data.

03:18.230 --> 03:21.830
However, the data was written directly into the HTML.

03:22.010 --> 03:26.060
So remove the hard coded data, but keep the cells as is.

03:28.080 --> 03:31.530
And so inside the first cell, we're going to set a leaf text.

03:34.440 --> 03:36.210
Equal to a variable expression.

03:36.210 --> 03:41.340
And finally, if text is just going to display whatever the result is as a text, in this case, we

03:41.340 --> 03:48.000
just want our variable expression to return the name field that derives from the model attribute grade.

03:54.470 --> 03:56.270
We're going to copy this over here.

04:00.420 --> 04:02.520
Here, we can display the subject.

04:05.830 --> 04:07.930
And here we will display the score.

04:12.170 --> 04:13.510
This is really important.

04:13.520 --> 04:18.500
The variable expression invokes the getter of each field, so the naming needs to match.

04:19.560 --> 04:23.520
So if I go back thanks to Spring Boot Def Tools, everything should rerun.

04:25.740 --> 04:26.760
And voila.

04:26.790 --> 04:29.880
Finally uses the model to populate the view with data.

04:30.570 --> 04:36.600
Now, before I wrap up this lesson, let's just assume we did happen to misspell one of the fields.

04:36.990 --> 04:40.650
What would happen is we would get a big error.

04:42.890 --> 04:49.730
Now what's really important with these areas is to not get intimidated by them, because somewhere in

04:49.730 --> 04:54.990
all of these logs, there is a very useful message that's going to tell you exactly where you went wrong.

04:55.010 --> 04:58.400
So here it tells us an error happened during template parsing.

04:58.560 --> 04:59.780
Okay, what is that error?

04:59.810 --> 05:06.920
Let's scroll through and eventually you'll see that the parse exception occurred because it could not

05:06.920 --> 05:11.570
find the subject field that it was trying to get from the model object.

05:11.600 --> 05:17.840
The model object has a great dot subject field, so make sure to fix it accordingly.

05:19.070 --> 05:20.300
All right.

05:24.840 --> 05:29.010
And so to recap, you use dime leaf to populate the view with data from the model.

05:29.130 --> 05:33.660
When a user makes a request, the controller maps the request to a handler method.

05:33.750 --> 05:36.900
The handler method stores a great object inside the model.

05:36.930 --> 05:41.280
Each cell in the table row displays a field value from the model object.

05:45.700 --> 05:49.810
After merging the model variable, the controller presents your updated view.
