WEBVTT

00:00.090 --> 00:01.470
Welcome to your first challenge.

00:01.500 --> 00:06.720
Task number one was to create a new project using the spring initialize order that has the following

00:06.720 --> 00:07.620
attributes.

00:07.620 --> 00:11.280
So first thing I to do is go to start spring IO.

00:11.310 --> 00:15.810
We're going to create a Maven project using the Java programming language.

00:15.810 --> 00:21.150
The version of Spring Boot we're going to use, or the one that you should choose, is the latest stable

00:21.150 --> 00:21.780
version.

00:21.780 --> 00:24.510
As of this recording, it's 2.7.0.

00:24.540 --> 00:30.120
The group ID will be learned the parts artifact ID painting.

00:31.210 --> 00:34.210
We're going to choose the default packaging type jar.

00:34.390 --> 00:37.590
Choose a Java version that matches the one you have installed.

00:37.600 --> 00:41.530
I'm using Java 11 for dependencies.

00:41.530 --> 00:43.900
We're going to be using Spring Web.

00:44.950 --> 00:48.940
As well as spring boot def tools.

00:51.010 --> 00:53.440
And generate your project.

00:54.570 --> 01:00.330
I will show in Finder if you're using Windows Show and File Explorer, whatever it's called.

01:01.380 --> 01:05.130
Unzip the package and open it using IntelliJ.

01:07.440 --> 01:10.020
So here, I'll go file open.

01:12.090 --> 01:14.880
And I will open my painting project.

01:17.020 --> 01:17.890
Okay.

01:22.210 --> 01:25.860
Task number three is inside of the starter folder.

01:25.870 --> 01:32.590
There are two paintings of Mona Lisa and Salvator Mundi, so we're going to drag these into our project.

01:35.180 --> 01:40.090
So if you are to follow this path, go to Intro to Spring Boot Challenge Starter.

01:40.100 --> 01:41.770
There are the images.

01:41.780 --> 01:45.560
We're going to drag them into our static folder.

01:46.410 --> 01:48.900
So here, I'll create a folder called Images.

01:50.400 --> 01:52.800
And I will place the images here.

01:54.100 --> 01:54.720
Okay.

01:57.750 --> 02:03.570
Task number four is using the HTML cheat sheet to create a header element that displays Da Vinci artwork.

02:03.600 --> 02:09.900
Another image element that displays the Mona Lisa Salvator mundi, giving each image a width of 200

02:10.230 --> 02:10.890
OC.

02:11.460 --> 02:15.540
What I'm going to do is start by creating an HTML file.

02:16.620 --> 02:23.790
So under static I'll say new HTML file and we'll call it index.

02:23.820 --> 02:30.450
It's really important that you get the naming right and this is going to show up under images, which

02:30.450 --> 02:32.010
doesn't make any sense.

02:32.070 --> 02:35.430
I'm going to drag this out into resources.

02:35.940 --> 02:38.940
Source slash, main slash resources.

02:38.940 --> 02:41.250
And we're going to put this under static.

02:43.650 --> 02:44.640
Much better.

02:46.660 --> 02:47.200
Okay.

02:47.500 --> 02:53.350
So inside of our HTML body, let me just call this something like paintings.

02:54.070 --> 03:00.070
And inside of our HTML body, we have to display a header that displays Da Vinci artwork.

03:00.100 --> 03:01.300
Let me grab.

03:02.230 --> 03:05.290
So anything from H 1 to 6 is a header.

03:05.320 --> 03:12.400
We're going to display a header using the H one element and it's going to say Da Vinci artwork.

03:13.500 --> 03:14.940
Let me just copy and paste it.

03:21.280 --> 03:25.630
Then I need to create two image elements Mona Lisa and Salvator Mundi.

03:25.660 --> 03:29.470
You can create an image using the following syntax.

03:29.470 --> 03:37.270
So inside of this image element, you would specify a source attribute which contains the path to the

03:37.270 --> 03:41.140
image you want to display, and the path will start from your static folder.

03:41.140 --> 03:45.850
And in case your image doesn't show, you can provide an alternative text description.

03:46.150 --> 03:52.020
So over here we will create an image with the following attribute.

03:52.030 --> 03:55.810
The path starts from static so we can say slash images.

03:56.650 --> 03:59.800
The image we will display first is Mona Lisa.

04:05.780 --> 04:13.190
JPEG and in case the image doesn't show, will provide an alternative text description of Mona Lisa.

04:15.370 --> 04:19.300
The next image we're going to so show is the Salvator mundi.

04:22.300 --> 04:24.760
We'll give that a text description as well.

04:26.750 --> 04:29.810
And we also have to give each one a width of 200.

04:32.130 --> 04:33.510
That should be it.

04:33.900 --> 04:36.870
What I can do now is spin up a new terminal.

04:38.660 --> 04:40.430
And compile my code.

04:42.540 --> 04:43.680
Now it's really important.

04:43.680 --> 04:45.660
If you want Liv, reload to work.

04:47.350 --> 04:49.690
That in your settings.

04:50.460 --> 04:52.350
You have this checked?

04:56.490 --> 04:57.960
As well as the following.

04:58.850 --> 05:00.620
Build project automatically.

05:10.730 --> 05:11.200
Sweet.

05:11.240 --> 05:12.800
We're making good progress.

05:13.190 --> 05:13.910
All right.

05:13.940 --> 05:19.910
Task number five is to place each painting in a block level container.

05:20.210 --> 05:24.500
And a block level container is one that takes up the entire width.

05:24.590 --> 05:28.130
Div is a block level container that can group html elements.

05:28.130 --> 05:32.690
So what we'll do is place each image inside of a div.

05:42.750 --> 05:45.000
This container will take up the entire width.

05:45.000 --> 05:49.470
So the div that follows is going to start on a new line.

05:51.100 --> 05:53.470
All right, let's refresh live.

05:53.470 --> 05:58.030
Reload is a bit slow on IntelliJ and never mind, I stand corrected.

05:59.250 --> 05:59.930
OC.

06:01.400 --> 06:09.380
Task number six using the HTML cheat sheet display the following text under each image and to display

06:09.380 --> 06:12.770
text you can use the handy paragraph element.

06:12.800 --> 06:18.380
Conveniently, this is a block level element, which means each text will take up the whole width,

06:18.380 --> 06:21.050
which is exactly what we need for this task.

06:23.580 --> 06:25.980
I should paste the text instead.

06:32.190 --> 06:34.530
We'll display the Salvator mundi here.

06:38.740 --> 06:40.720
All right, refresh.

06:44.190 --> 06:45.180
Looking at.

06:48.240 --> 06:53.040
Task number seven, using the cheat sheet placed the text inside of an inline element.

06:53.040 --> 06:56.910
So because the paragraph tag is block level, it takes up the whole width.

06:56.910 --> 07:03.300
But if we place the text inside of a span, which is an inline container, it's simply going to wrap

07:03.300 --> 07:04.830
around our text.

07:04.830 --> 07:07.890
So here we'll place this inside of a span.

07:10.750 --> 07:11.770
This as well.

07:16.500 --> 07:18.000
It's going to take a few refreshes.

07:18.000 --> 07:19.170
And there you go.

07:19.200 --> 07:24.300
The span container wraps around whatever content is inside of it.

07:25.670 --> 07:27.110
I think that should be all.

07:28.640 --> 07:30.110
And indeed it is.

07:30.140 --> 07:34.930
Now, this course is focused on back end development.

07:34.940 --> 07:37.060
We don't really care about HTML.

07:37.070 --> 07:40.070
This would fall into the realm of a front end developer's job.

07:40.100 --> 07:46.130
However, throughout this course, as we use the leaf, we are going to have to work around HTML so

07:46.130 --> 07:48.620
it doesn't hurt to be a little familiar with it.

07:48.620 --> 07:55.430
And I hope this challenge was a good opportunity for you to get familiar with the cheat sheet.

07:55.460 --> 07:57.110
That is all for this section.

07:57.110 --> 07:59.540
I will see you in the next section.

07:59.540 --> 08:01.190
Model View Controller.
