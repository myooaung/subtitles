WEBVTT

00:00.420 --> 00:03.870
The service class is the middle layer of a three layer code base.

00:05.970 --> 00:09.630
The service class is the middleman between the repository and the controller.

00:12.190 --> 00:15.100
It also contains every business related operation.

00:17.510 --> 00:21.500
So in this lesson, you will finally refactor your code into three parts.

00:24.280 --> 00:25.450
Going through the process.

00:25.450 --> 00:29.240
The controller, class and repository should not communicate directly.

00:29.260 --> 00:32.530
The service class must act as a middleman between the two.

00:35.760 --> 00:40.110
Any calls to the repository will first pass by the service class.

00:44.940 --> 00:49.830
Step two is to move every business related operation from the controller into service.

00:49.830 --> 00:54.270
The controller class's only concern should be managing the model and presenting the view.

00:54.570 --> 01:00.540
We already stripped the controller class of card related operations, and now the next step is to strip

01:00.540 --> 01:02.670
it from business related logic.

01:09.090 --> 01:13.500
The service class should act as a middleman between the controller and the repository.

01:16.770 --> 01:20.130
The controller and repository should not communicate directly.

01:20.370 --> 01:25.500
The layer that handles the business logic should be the one that communicates with the repo.

01:28.920 --> 01:35.340
So the controller communicates with the service, and the service in turn communicates with the repository.

01:38.170 --> 01:45.160
So what we'll do is inside the controller class, create a new instance of grade service.

01:46.180 --> 01:47.550
Great service.

01:47.560 --> 01:51.580
Great service is equal to a new great service object.

01:53.210 --> 01:58.010
And now, because great service is the middleman between the repo and the controller, we're going to

01:58.010 --> 02:00.590
call the methods from great service instead.

02:22.240 --> 02:25.390
And we will have to copy all of these functions.

02:26.520 --> 02:28.020
Integrate service.

02:29.720 --> 02:34.610
Now, of course you cannot make CRUD operations anywhere except the grid repo.

02:34.790 --> 02:40.580
So here we're going to have to create an instance of the greater repository grade repo is equal to a

02:40.580 --> 02:42.680
new grade repository object.

02:51.470 --> 02:53.150
We can do the same thing all over.

03:18.940 --> 03:19.600
All right.

03:19.600 --> 03:21.730
Perform the necessary inputs.

03:52.220 --> 03:54.770
Here is an example of a computation.

03:54.950 --> 03:57.830
This logic does not belong in the controller.

03:58.310 --> 04:04.280
So inside service, we're going to add a new method called get grade index.

04:07.480 --> 04:10.600
That returns an index upon receiving an ID.

04:11.620 --> 04:17.530
And what we can do is delete all of the logic from controller.

04:18.650 --> 04:20.690
And place it inside of service.

04:31.500 --> 04:34.680
We're already inside of grade service, so we can remove that.

04:36.070 --> 04:38.980
And we'll have to import the constant class.

04:39.010 --> 04:41.290
Make sure you import the right class.

04:43.030 --> 04:46.720
There are so many things you can import to make sure you import the right one.

04:47.850 --> 04:48.480
Okay.

04:48.600 --> 04:51.210
And now going back to grade controller.

04:52.520 --> 04:53.630
Call great service.

04:53.900 --> 04:56.240
Get great index wherever you need to.

05:02.930 --> 05:03.160
Okay.

05:03.320 --> 05:07.790
And now this is an example of a decision making process.

05:08.300 --> 05:15.770
First, it looks for an index based on an ID, and if the index leads to no result, then it returns

05:15.770 --> 05:17.420
a new grade object.

05:17.450 --> 05:21.680
Otherwise, it retrieves a grade object at a particular index.

05:21.710 --> 05:25.670
This is business logic and it does not belong in the controller.

05:26.150 --> 05:33.200
So what we'll do is inside the service class, add a new method called get grade by ID.

05:34.650 --> 05:35.430
Public.

05:36.060 --> 05:36.900
Grade.

05:37.720 --> 05:39.370
Get grade.

05:40.660 --> 05:40.970
I.

05:41.030 --> 05:41.710
I'd.

05:42.980 --> 05:46.190
That returns an object once it receives an ID.

05:49.920 --> 05:50.430
Okay.

05:50.440 --> 05:53.070
Now you can remove the logic from the controller.

05:53.100 --> 05:53.710
Or you know what?

05:53.730 --> 05:54.660
Don't remove it yet.

05:54.660 --> 05:56.160
Just copy and paste it.

05:56.700 --> 05:57.960
We'll go back to it.

05:58.350 --> 06:01.170
We're already inside of great service, so we're good here.

06:01.560 --> 06:06.630
And now what we have to do is return a grade based on the index that we get.

06:06.960 --> 06:13.440
So if the index is equal to invalid return a new grade.

06:13.530 --> 06:15.900
Otherwise, call the get grade function.

06:19.610 --> 06:25.250
And now back in the controller, I can remove all of this logic and just say model dot add attribute

06:25.250 --> 06:26.030
grade.

06:27.010 --> 06:32.560
And call great service dot get grade by ID.

06:34.050 --> 06:34.740
Beautiful.

06:35.900 --> 06:41.000
Now submitting a grade also involves a decision making process.

06:41.330 --> 06:45.890
If the index yields no meaningful result, it adds a grade.

06:46.160 --> 06:49.640
Otherwise it updates the grade at a particular index.

06:49.820 --> 06:53.240
This logic does not belong in the controller.

06:54.460 --> 06:59.980
So inside the service class, what I'm going to do is add a new method called submit grade.

07:00.490 --> 07:01.750
Public void.

07:01.750 --> 07:02.620
Submit grade.

07:02.620 --> 07:05.080
That's going to take care of all the business logic.

07:06.390 --> 07:08.670
It's going to receive a great object.

07:10.090 --> 07:14.050
And then inside we can just copy and paste the logic from the controller.

07:15.470 --> 07:17.720
And make the changes where necessary.

07:18.500 --> 07:20.930
So we don't have to call great service here.

07:21.530 --> 07:25.100
We can just say add grade and update grade.

07:28.510 --> 07:29.050
All right.

07:29.050 --> 07:32.740
And now back in grade controller, I can just say.

07:36.570 --> 07:37.590
Great service.

07:37.970 --> 07:39.420
Dot submit grade.

07:43.500 --> 07:45.270
And this is looking pretty good.

07:45.390 --> 07:47.770
Look at how much better the code looks.

07:47.790 --> 07:52.650
The only thing the controller is doing is managing the model and presenting the view.

07:52.830 --> 07:58.200
The service class contains all of the business logic and is the middleman between the controller and

07:58.200 --> 07:58.980
the repo.

07:59.550 --> 08:03.660
The repo performs the crud related operations on the data store.

08:04.200 --> 08:06.720
I have to say we've come a long way in the past.

08:06.720 --> 08:07.710
Two lessons.

08:10.850 --> 08:14.540
So to recap, you refactored your code base into three layers.

08:21.050 --> 08:26.150
We stripped the controller class of CRUD related operations and placed them inside the repo.

08:28.110 --> 08:32.100
We removed all of the business logic and placed them inside the service class.

08:32.760 --> 08:37.090
The layer that handles the business logic should be the one that communicates with the repo.

08:37.110 --> 08:41.220
So service is also the middleman between the controller and the repository.

08:43.770 --> 08:48.150
The controller communicates with the service, which in turn communicates with the repository.

08:48.690 --> 08:52.890
The three layer design ensures that your code is clean and easier to scale.

08:57.020 --> 09:00.830
And as you can tell right now, the code is really clean.
