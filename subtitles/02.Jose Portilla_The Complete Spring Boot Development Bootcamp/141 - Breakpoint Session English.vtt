WEBVTT

00:00.090 --> 00:01.860
Welcome to another breakpoint session.

00:01.860 --> 00:02.640
And this one.

00:02.640 --> 00:08.910
It would be nice to trace their runtime and see how exactly does an integration test map the request

00:08.910 --> 00:10.440
and response lifecycle.

00:10.710 --> 00:17.880
First, an integration test starts by performing a mock request that is going to be intercepted by one

00:17.880 --> 00:19.260
of your handler methods.

00:19.350 --> 00:25.110
Already you want to add an added breakpoints to the three handler methods that we have in the controller.

00:25.560 --> 00:29.970
So here what I'll do is I will run this test in debug mode.

00:38.320 --> 00:39.930
All right, beautiful.

00:40.050 --> 00:47.160
It performs a mock request on an empty path, and it passes in an ID that equals 1 to 3.

00:47.670 --> 00:53.850
The handler method grade form will intercept the request made on this empty path, and it will receive

00:53.850 --> 00:55.860
the ID that equals 1 to 3.

00:55.980 --> 01:01.590
But the idea that gets passed in doesn't really matter because this will either return an empty object

01:01.590 --> 01:04.550
or it will return an object that's pre-populated.

01:04.560 --> 01:08.370
But anyways, the object that gets returned will be added to our model.

01:08.400 --> 01:14.310
Finally, if can use it from there and then our handler method will successfully return the form view.

01:17.170 --> 01:21.970
If you go back, our test should pass because the response was successful.

01:22.000 --> 01:28.420
The view returned was the form, and the model did have an attribute grade that acted as a form backing

01:28.420 --> 01:29.260
object.

01:29.410 --> 01:35.290
So now we can rest assured that when our application receives requests made on an empty path.

01:35.320 --> 01:37.300
It's going to behave correctly.

01:39.040 --> 01:43.000
The integration test that follows will test for a successful submission.

01:43.000 --> 01:49.540
So this is going to do is perform a post request on the path handle submit and it's going to pass in

01:49.540 --> 01:53.200
three parameters a name, a subject and a score.

02:07.190 --> 02:12.770
Our handler method intercepts the post request that was made on handle submit and as soon as it does,

02:12.770 --> 02:18.740
it's going to create an MBTI grade object and populate it with fields from payload and the post request.

02:18.740 --> 02:25.160
All of the payload that was passed in was valid, so it follows that our binding result isn't going

02:25.160 --> 02:26.480
to have any errors.

02:26.480 --> 02:34.580
There are zero errors, so we can rest assured that when a user passes incorrect data.

02:35.530 --> 02:40.630
Our handler method is not going to return the form, it's going to submit the grade, and then it's

02:40.630 --> 02:44.170
going to redirect them to another request on slash grades.

02:44.950 --> 02:51.100
So our test passes because it was expecting a redirection and it was expecting the redirected URL to

02:51.100 --> 02:52.660
be on slash grades.

02:53.050 --> 02:59.800
So now our test reassures us that when a user enters valid data, the submission will be successful.

03:00.190 --> 03:02.770
But what if they enter invalid data?

03:03.850 --> 03:05.680
Let's run this in debug mode.

03:13.260 --> 03:18.720
Once again, our handler method receives the post request made on slash handle submit.

03:18.750 --> 03:25.470
The parameters that were passed into the post request were garbage data in this case as submit form

03:25.470 --> 03:30.440
creates a new grid object and tries to populate it with values from the payload.

03:30.450 --> 03:35.880
The validation will fail and our binding result will carry three errors.

03:35.880 --> 03:39.600
Because the result has errors, it's going to return the form.

03:43.420 --> 03:46.970
And our test passes because that's exactly what it was expecting.

03:46.990 --> 03:53.140
It was expecting that when a user enters garbage data, the application should take them back to the

03:53.140 --> 03:54.010
form view.

03:55.160 --> 03:55.790
All right.

03:55.790 --> 04:03.020
The last thing we tested was if a user makes a request on slash grades, will our handler method return

04:03.020 --> 04:04.200
the appropriate view?

04:04.220 --> 04:08.780
Is it going to add the correct model attribute that's needed to populate the view with data?

04:08.810 --> 04:10.010
Let's find out.

04:10.040 --> 04:11.450
Debug the test.

04:18.700 --> 04:21.520
Our handler method does receive the get request.

04:21.520 --> 04:24.310
It adds the grades model attribute.

04:24.790 --> 04:26.800
It does return the grades view.

04:28.250 --> 04:35.690
And our test reassures us that when a request is made on grades, our application will behave correctly.

04:35.930 --> 04:38.480
This concludes our discussion on testing.
