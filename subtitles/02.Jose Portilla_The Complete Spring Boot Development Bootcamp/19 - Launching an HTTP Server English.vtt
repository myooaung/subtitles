WEBVTT

00:00.390 --> 00:03.540
Launching an HTTP server with spring boot is very easy.

00:05.270 --> 00:06.140
How easy is it?

00:06.170 --> 00:08.330
Just add a dependency called spring web.

00:11.600 --> 00:14.420
In this lesson, you will launch an HTTP server.

00:16.240 --> 00:19.420
The Spring Web dependency launches an HTTP server.

00:20.860 --> 00:27.130
A dependency refers to a packaged library of files, i.e. jar files that your application can use.

00:29.750 --> 00:31.340
Now the spring web dependency.

00:31.340 --> 00:34.130
What it's going to do is bootstrap an HTTP server.

00:37.710 --> 00:41.410
Now you can manage your project's dependencies inside of Palm XML.

00:42.060 --> 00:47.760
Open your Palm XML file and there you will find two dependencies common to all spring good applications

00:48.120 --> 00:53.610
the spring web dependency instruments, a spring boot application to launch an HTTP server.

00:53.850 --> 00:57.840
So instead of a Google search type spring hops.

00:57.840 --> 01:00.330
Spring Web dependency.

01:02.980 --> 01:06.190
Actually correction type spring boot web dependency.

01:08.030 --> 01:11.690
And go to the Central Maven repository.

01:12.860 --> 01:18.170
The Central Maven repository contains all of the dependencies that we can leverage in a spring boot

01:18.170 --> 01:19.040
application.

01:24.930 --> 01:28.680
You're going to choose a dependency version that matches your spring boot up.

01:28.890 --> 01:33.810
And once you do copy and paste this dependency inside of your palm XML file.

01:35.070 --> 01:35.760
Like so.

01:37.150 --> 01:40.480
Now, what I want you to do, actually, is remove the version number.

01:44.120 --> 01:44.810
On top.

01:44.810 --> 01:48.500
The version number for all spring boot starters is already specified.

01:49.310 --> 01:54.230
This is a spring boot starter, so it's going to be version 2.6.7, just like these two.

01:54.410 --> 02:01.370
And by virtue of just adding the spring web dependency, it's going to embed an HTTP server called Tomcat

02:01.370 --> 02:02.870
into your Spring Boot app.

02:03.080 --> 02:06.560
And the HTTP server is going to run on Port 8080.

02:06.710 --> 02:10.220
So run your application by writing Maven.

02:11.060 --> 02:13.490
Clean spring boot run.

02:27.440 --> 02:32.420
And now we have an HTTP server called Tomcat listing on Port 8080.

02:35.920 --> 02:39.220
Now let's revisit the client server model from the previous lesson.

02:39.880 --> 02:44.530
The client server model is different when you're developing the application and the previous lesson.

02:44.530 --> 02:48.520
The model portrays a client that makes a request via the internet.

02:49.030 --> 02:51.550
An HTTP server is inside of a machine.

02:51.550 --> 02:52.820
Inside of a computer.

02:52.840 --> 02:57.430
On the other side of the world, it receives the request and it responds.

03:01.810 --> 03:07.560
In our case, your browser and HTTP server are inside of the same computer.

03:07.570 --> 03:09.880
So what should your IP address be?

03:13.240 --> 03:16.870
120 7.0.0.1.

03:16.900 --> 03:19.900
This is called a loopback address.

03:19.960 --> 03:22.960
It connects the request to the computer that you're using.

03:25.280 --> 03:32.000
The Loopback address 120 7.0.0.1 essentially loops the request back to your computer.

03:37.650 --> 03:39.880
The request is made on point 8080.

03:39.900 --> 03:45.390
So then your computer, upon receiving the request from your browser, forwards it to port 8080.

03:45.990 --> 03:51.120
Your application's HTTP server is running on that port and it receives the request.

03:53.270 --> 04:02.420
So now from your browser, what you're going to do is write 120 7.0.0.1 so that the request is routed

04:02.420 --> 04:09.320
to your computer and then write 8080 because our app is listening on port 8080.

04:12.190 --> 04:16.210
And we get the generic white label error page.

04:16.900 --> 04:21.120
That's because the application's HTTP server receives the request.

04:21.130 --> 04:26.890
But you didn't write any code that tells Spring Boot how to respond, so it sends back the default error

04:26.890 --> 04:27.580
page.

04:32.040 --> 04:39.750
Now before we fix this issue, I just want to emphasize that writing 120 7.0.0.1 has really annoying

04:39.780 --> 04:42.420
local host translates to this address.

04:42.420 --> 04:44.910
So instead we can write local host.

04:46.480 --> 04:47.380
8080.

04:49.300 --> 04:54.670
And in similar fashion, local host is going to route the request to the computer that you're using.

04:54.670 --> 05:00.160
And in turn, your computer is going to forward the request to Port 88 where your application is listening,

05:00.160 --> 05:05.080
and our application responds to the request by returning a white label error page.

05:05.080 --> 05:06.220
Let's fix it.

05:06.250 --> 05:12.430
The next step when we make a request on local host 8080 is for the HTTP server to send back a static

05:12.430 --> 05:13.330
web page.

05:13.660 --> 05:17.560
The static folder is where you should put static web contents.

05:18.500 --> 05:20.270
Resources static.

05:20.300 --> 05:27.680
So examples of things that you would put in the static folder are images, logos, CSS designs and static

05:27.890 --> 05:31.670
HTML in order to send the client a static web page.

05:31.670 --> 05:34.880
Add an indexed HTML file to the static folder.

05:35.080 --> 05:37.130
Index html.

05:40.500 --> 05:45.780
Now, whenever you want to write any HTML code, you have to start with a boilerplate template.

05:45.900 --> 05:50.270
And as a spring boot developer, I don't expect you to know any HTML.

05:50.280 --> 05:56.910
So what we'll do is go to the marketplace and look for the HTML boilerplate extension.

05:59.700 --> 06:01.260
Let's try HTML5.

06:01.290 --> 06:02.070
There you go.

06:02.610 --> 06:03.600
Click install.

06:06.490 --> 06:06.940
All right.

06:06.940 --> 06:11.230
We may have to relaunch V's code for this to work, but it's worth a try.

06:11.260 --> 06:15.760
I'm going to write HTML boilerplate, and it works.

06:15.910 --> 06:18.730
Now you can go ahead and delete all of this.

06:20.460 --> 06:22.230
Delete all of that.

06:24.530 --> 06:25.640
And we're good to go.

06:26.770 --> 06:32.500
All I want you to know is that metadata goes here and your visual elements go here.

06:33.130 --> 06:35.980
We're not too concerned with metadata at the moment.

06:36.040 --> 06:38.170
All we want to display is a header.

06:39.230 --> 06:40.160
Each one.

06:42.110 --> 06:44.240
That says Hello Spring.

06:47.550 --> 06:51.690
So what each one is going to do is it's going to populate your Web page with a big header that reads

06:51.690 --> 06:53.250
whatever string you provide.

06:53.460 --> 06:59.880
And one thing I want to stress is that it's really important that you name your file indexed HTML when

06:59.880 --> 07:02.640
Spring Boot is responding to an incoming request.

07:02.640 --> 07:05.850
By default, it looks for the indexed HTML file.

07:06.180 --> 07:10.470
So now what we can do is rerun maven spring boot to run.

07:21.180 --> 07:27.600
Make that same request and the HTTP server responds with a big header that says Hello Spring.

07:33.210 --> 07:35.730
The client sends a request to Port 8080.

07:36.500 --> 07:39.110
The Springwood application's HTTP server.

07:39.110 --> 07:41.660
Listening on that port receives the request.

07:42.050 --> 07:45.560
Spring Boot looks for the indexed HTML file and responds with it.

07:45.590 --> 07:49.010
The HTML file populates the browser with Hello Spring.

07:52.740 --> 07:55.680
Now you can change the port that Tomcat runs on.

07:56.010 --> 07:59.280
You can choose the port where your app should listen for requests.

07:59.280 --> 08:04.290
And you recall that application DOT Properties is the file where you can configure the settings of your

08:04.290 --> 08:05.190
application.

08:05.280 --> 08:12.280
So here what we're going to do is we're going to say server dot port is equal to 1990.

08:12.300 --> 08:14.550
To change the default port.

08:14.970 --> 08:17.400
So now we're going to rerun our application.

08:26.390 --> 08:29.150
And now try sending a request to Port 8080.

08:29.930 --> 08:31.820
There is nothing listening on that port.

08:31.850 --> 08:37.040
That's because the application's HTTP server is listing on Port 1990.

08:37.070 --> 08:39.260
So you must send the request there.

08:42.250 --> 08:42.640
All right.

08:42.640 --> 08:46.360
To recap, you launched an HTTP server using spring boots.

08:48.430 --> 08:51.100
First you added the spring web dependency.

08:51.400 --> 08:58.060
The spring web dependency starts up an embedded HTTP server called Tomcat, and by default, the HTTP

08:58.060 --> 09:01.070
server listens for requests on Port 8080.

09:02.020 --> 09:07.600
Inside the Application Properties file, you configured the web server to listen on Port 1990.

09:08.420 --> 09:12.410
Your browser and HTTP server live inside of the same machine.

09:12.410 --> 09:20.480
So your full address is local host 1990, such that local host loops a browser's request to your machine

09:20.480 --> 09:26.540
and then your machine upon receiving the request, forwards it to port 1990 where your spring boots

09:26.540 --> 09:28.760
HTTP server happens to be listening.

09:29.240 --> 09:33.080
Spring Boot looks through the index of the HTML file and responds with it.

09:33.920 --> 09:39.350
The HTML we sent back populates the browser with a big header that says Hello Spring.
