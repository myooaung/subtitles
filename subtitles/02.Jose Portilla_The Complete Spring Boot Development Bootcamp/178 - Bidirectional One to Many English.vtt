WEBVTT

00:00.460 --> 00:05.800
In this lesson, you will establish a bidirectional relationship between the course and the grade table.

00:06.830 --> 00:11.800
Now one course can be associated with many grades in this relationship.

00:11.810 --> 00:15.950
The parent table would be the course and the child table is grade.

00:16.280 --> 00:18.680
So where should the foreign key column go?

00:19.190 --> 00:24.260
When applicable, put the foreign key column in the table that can't live without the other.

00:27.920 --> 00:32.650
In this case, the existence of a grade does not make any sense without a student.

00:32.660 --> 00:36.020
So we put a foreign key for student IDs over here.

00:36.050 --> 00:40.400
Similarly, the existence of a grade does not make any sense without a course.

00:40.400 --> 00:42.500
So we put a foreign key there to.

00:43.530 --> 00:44.840
This makes more sense.

00:44.850 --> 00:50.160
These are all of Harry's grades, and this is Harry's grade and potions.

00:53.790 --> 00:58.500
These are all of her mind is grids and this is her grid and charms.

01:01.790 --> 01:03.500
Let's start setting up the relationship.

01:03.500 --> 01:07.710
We need to ensure that many grades associate with one course.

01:07.730 --> 01:13.490
We already have a very similar relationship over here, so let's just copy it over in this case.

01:13.490 --> 01:14.300
Course.

01:14.300 --> 01:15.170
Course.

01:16.520 --> 01:19.520
And the existence of a course is not optional.

01:19.640 --> 01:25.020
A grade needs to be assigned to a student, and it needs to be based on a course.

01:25.040 --> 01:26.840
None of these can be null.

01:27.050 --> 01:30.740
The foreign key column for course IDs will be called course ID.

01:31.850 --> 01:36.890
And it's going to reference the primary key column of the course, which is also called ID.

01:36.920 --> 01:39.050
So we can leave that as is.

01:39.230 --> 01:40.790
And we're good here.

01:41.270 --> 01:46.910
But like before, we want the relationship to be bidirectional such that there is navigational access

01:46.910 --> 01:47.990
from both sides.

01:47.990 --> 01:58.790
So here we need to define a one to many relationship, such that one course is associated with many

01:58.790 --> 01:59.660
grades.

02:04.500 --> 02:05.380
We're not done yet.

02:05.400 --> 02:09.990
We need to set mapped by equal to the property that maps this relationship.

02:11.450 --> 02:14.300
Make sure the string is an exact match.

02:14.660 --> 02:20.540
And just like before, we're going to say Cascade is equal to Cascade Type Dot.

02:21.050 --> 02:27.440
So any operation that we perform on a particular course, we'll get cascaded to all of its associated

02:27.440 --> 02:30.080
child entities as before.

02:30.110 --> 02:37.040
Do not forget to put JSON ignore when a course entity is being serialized into JSON.

02:37.070 --> 02:41.480
We do not want this field to be part of the JSON.

02:41.510 --> 02:48.230
Otherwise the serialization process will go into a recursive loop and then the request will get aborted,

02:48.230 --> 02:51.230
just like you saw before with this particular field.

02:53.410 --> 02:56.140
So let's view what we have so far in the H two console.

03:03.170 --> 03:10.670
Let's view all the students, all the grades, as well as all the courses.

03:12.460 --> 03:12.560
Okay.

03:12.640 --> 03:13.210
We're looking good.

03:13.210 --> 03:19.210
We've got one table of students, one table of courses, and the grade table, which references the

03:19.210 --> 03:26.440
two others such that a score is assigned to each student based on a particular course.

03:26.590 --> 03:33.340
Now we can finally finish up the grade service implementation, so when we're querying for a grade,

03:33.340 --> 03:37.390
we need to find that grade based on a student ID.

03:37.930 --> 03:40.510
And a course I'd.

03:42.680 --> 03:47.270
So as long as you follow the syntax we talked about earlier, start with your action.

03:47.270 --> 03:48.830
What are you trying to do?

03:48.860 --> 03:50.780
Followed by your criteria.

03:50.780 --> 03:56.570
And if you've got multiple criteria, you can separate it with either or or end.

03:56.570 --> 04:00.710
We want to find a grade based on a student ID and a course ID.

04:00.740 --> 04:06.260
So we need to also make sure to include a course ID parameter that it can use to make the query.

04:08.410 --> 04:13.300
This should actually be returning an optional grade, not a grade.

04:13.720 --> 04:18.790
We will refactor our code around optional IDs very soon, but that's a topic for later.

04:18.820 --> 04:20.590
For now, let's just finish up.

04:21.040 --> 04:27.130
So right now, spring JPA is going to see our method signature and it will auto generate a query that

04:27.130 --> 04:33.880
will find a grade based on these identifiers which match these two column names.

04:35.860 --> 04:39.090
So we can go back and fix the method here.

04:39.100 --> 04:43.480
Fine by student ID and course ID passing in the course ID.

04:43.960 --> 04:50.380
And now when we're saving a grade, we need to set the student who the grade belongs to, and we also

04:50.380 --> 04:53.770
need to set the course that they're being graded on.

04:53.770 --> 04:54.970
So we'll say grade.

04:55.000 --> 05:05.320
Dot set course will need to auto wire the course repository, but dependency injection will happen behind

05:05.320 --> 05:06.010
the scenes.

05:06.010 --> 05:07.900
Thanks to all our constructor.

05:07.900 --> 05:09.580
And now we can just say.

05:10.670 --> 05:11.780
Course.

05:12.730 --> 05:16.300
Course is equal to course repository.

05:17.220 --> 05:24.600
Dot fined by ID or face ID and we will forcefully unwrap the optional dot to get for now.

05:25.260 --> 05:30.990
And now, once the grade has been associated with a student entity, once it has been associated with

05:30.990 --> 05:33.720
a course entity, then we can save it.

05:33.840 --> 05:39.750
So now what I'm going to do is go back and I will give her mine.

05:39.750 --> 05:41.260
He has an ID of three.

05:41.280 --> 05:44.370
I will give her an A-plus in history of magic.

05:44.880 --> 05:49.980
So a student with an ID of three History of Magic has an idea for.

05:50.010 --> 05:51.840
Let's give her an A-plus.

05:53.990 --> 06:01.280
And what happens is as spring GPA saves our grade, the grade that was saved is returned and serialized

06:01.280 --> 06:02.270
into JSON.

06:02.270 --> 06:05.240
And here we can see the grade has an ID of one.

06:05.240 --> 06:06.410
It's an A-plus.

06:06.440 --> 06:11.990
It belongs to her mini Granger and her mini got an A-plus in history of magic.

06:12.410 --> 06:16.490
Let's go to the H two console and verify that everything is working as it should.

06:18.850 --> 06:24.970
And clearly it gives her mini an A-plus in history of magic.

06:26.410 --> 06:28.420
This is looking really good so far.

06:29.690 --> 06:33.620
I can now make a get request that fetches her minis grade.

06:33.620 --> 06:37.640
So ID of three course ID of four.

06:37.670 --> 06:43.850
Let's make that get request and it sends back her Minnie's grade in History of Magic, which is very

06:43.850 --> 06:45.530
clearly an A-plus.

06:45.620 --> 06:48.050
Everything is looking really good so far.

06:48.950 --> 06:49.140
Okay.

06:49.220 --> 06:50.870
Now let's update a grade.

06:51.780 --> 06:59.160
Going back to our great service implementation, the save method is actually very, very special because

06:59.160 --> 07:05.100
if it sees that you're saving a great entity that already exists in the database, then it's going to

07:05.100 --> 07:06.510
update that grade instead.

07:06.510 --> 07:07.840
It's not going to create a new one.

07:07.860 --> 07:12.780
So what I'll do over here is I will say grade.

07:13.550 --> 07:20.660
Grade is equal to grade repository dot fine by student ID and course ID.

07:21.800 --> 07:24.780
So here we're fetching a grade that already exists.

07:24.800 --> 07:30.590
We're going to update the pre existing grade to whatever score we get from the consumer.

07:32.130 --> 07:33.240
And then we'll say.

07:34.130 --> 07:36.590
Great repository dot save grade.

07:40.740 --> 07:46.560
And because this time we're saving a grade that already exists inside the database, we're clearly fetching

07:46.560 --> 07:47.310
it from there.

07:47.580 --> 07:50.990
Spring JPA is not going to create a new grade record.

07:51.000 --> 07:55.080
It's going to update the existing record with whatever score was passed in.

07:55.740 --> 08:01.860
Now, back here inside of grade controller, we're going to call grade service dot update grade.

08:07.720 --> 08:08.160
Okay.

08:08.970 --> 08:09.840
And.

08:10.670 --> 08:13.430
Now what I'm going to do is give Harry a grade.

08:13.430 --> 08:18.440
So Harry has an idea of one and we'll give him a grade in potions.

08:18.890 --> 08:23.390
So we'll give him a C plus or a D plus and potions.

08:26.290 --> 08:26.770
All right.

08:26.770 --> 08:30.790
Here we see Harry has a D plus and potions looking good.

08:31.640 --> 08:32.810
Let me just confirm.

08:32.810 --> 08:36.530
Everything is working well inside of our h to console.

08:37.550 --> 08:38.390
We're good.

08:38.810 --> 08:39.980
And now you know what?

08:39.980 --> 08:42.710
I've decided that a D plus is a bit too harsh.

08:42.710 --> 08:46.630
So let me go back and update Harry's grade.

08:46.820 --> 08:48.530
Give him a C-plus instead.

08:54.380 --> 08:56.600
And the update works beautifully.

08:57.290 --> 08:58.760
If I were to refresh.

08:59.950 --> 09:01.780
And now this is looking good.

09:01.810 --> 09:07.270
The save method is to recognize that that grade already existed in the database.

09:07.600 --> 09:13.720
We updated that grade entity score to a C plus, and because the grade already exists in the database,

09:13.720 --> 09:16.060
it does not create a new grade record.

09:16.090 --> 09:19.510
It just updates the existing one to a C plus.

09:19.540 --> 09:21.580
This is looking really, really good.

09:21.820 --> 09:25.590
Now, what happens if I try to update a grade that doesn't exist?

09:25.600 --> 09:29.080
So right now, Harmony doesn't have any grades for any courses.

09:29.170 --> 09:33.130
I'll go back and I will update a grade for her mining.

09:36.800 --> 09:39.020
Oh, we get a null pointer exception.

09:39.020 --> 09:41.300
We have a vulnerability in our app.

09:41.810 --> 09:51.740
Now, I could just go back here and say if grade is equal to null, perform my null check and handle

09:51.740 --> 09:52.910
things accordingly.

09:52.910 --> 09:57.410
But the thing is optional is offer a much more elegant way of dealing with nulls.

09:57.410 --> 10:00.290
So we're not going to be performing null checks like this.

10:00.590 --> 10:02.690
This video has gone on long enough, though.

10:02.690 --> 10:07.150
So in the next lesson, we're going to refactor some of our code around options.
