WEBVTT

00:00.640 --> 00:06.840
Relationships can create a link between two tables in a unidirectional many to one relationship.

00:06.850 --> 00:10.870
Many rows in the child table belong to one row in the parent table.

00:13.910 --> 00:18.530
In this lesson, you will establish a many to one relationship between grade and students.

00:19.160 --> 00:24.500
Before we continue, you will often hear the words parent and child in the context of relational databases.

00:24.680 --> 00:29.480
In this case, the student table is the parent, and the grade table is going to be the child.

00:29.750 --> 00:30.900
Why is that?

00:30.920 --> 00:34.310
Because one student can have many grades.

00:35.390 --> 00:36.050
That's all.

00:36.870 --> 00:39.690
So here we have a table that stores grades on the right.

00:39.720 --> 00:46.530
The grades table has a primary key column that provides a unique identity for every grade record.

00:46.560 --> 00:47.500
But wait.

00:47.520 --> 00:49.260
Where did this column come from?

00:49.380 --> 00:53.130
We haven't set it up yet, but this is called a foreign key column.

00:53.220 --> 00:58.650
The foreign key column associates every single grade record with a student.

00:59.280 --> 01:00.160
Big word alert.

01:00.180 --> 01:01.620
What is a foreign key?

01:02.040 --> 01:05.760
A foreign key references the primary key of another table.

01:07.570 --> 01:12.790
So the primary key column for the student table provides a unique identity for each student.

01:16.170 --> 01:21.030
The primary key column for the grades table provides a unique identity for each grade.

01:25.450 --> 01:28.480
The foreign key column of the grades table references.

01:28.480 --> 01:31.150
The primary key column of the student table.

01:31.880 --> 01:35.930
So each ID in the foreign key column is referencing a student.

01:38.320 --> 01:40.130
These are the grades for Harry.

01:40.150 --> 01:42.010
These are the grades for Ron.

01:42.040 --> 01:43.920
These are the grades for Malfoy.

01:43.930 --> 01:46.000
And these are the grades for her Mini.

01:47.860 --> 01:53.740
So using this foreign key column, we've established a link between these two tables such that there

01:53.740 --> 01:57.730
is a many to one relationship between many grades and one students.

01:58.150 --> 02:01.120
Now, how do we do this using spring boot GPA?

02:01.150 --> 02:02.760
Let's go through the process.

02:02.770 --> 02:08.470
First, we need to ensure that many grades must be associated with one student.

02:11.040 --> 02:19.320
Inside the great entity, we're going to define a student field, private student student as spring

02:19.320 --> 02:21.840
GPA creates our grade table.

02:21.840 --> 02:27.840
We need to tell it that there's going to be a many to one relationship at many to one.

02:28.650 --> 02:37.230
So now spring GPA understands that many grades will be associated with one student and in a one direction

02:37.230 --> 02:38.850
or many to one relationship.

02:38.850 --> 02:41.520
The child table manages the foreign key.

02:43.650 --> 02:49.710
So if you want to define a foreign key column that joins two separate tables, we're going to say join

02:49.710 --> 02:50.400
column.

02:50.700 --> 02:57.900
And the foreign key column of the grade table needs to reference the primary key column of the student

02:57.900 --> 02:58.490
table.

02:58.500 --> 03:02.370
In this case, the primary key column of the student is called ID.

03:02.370 --> 03:06.450
So the referenced column name needs to be ID.

03:06.780 --> 03:09.120
And now let's give our foreign key column a name.

03:09.810 --> 03:12.090
So a name is equal to.

03:12.090 --> 03:19.380
And because the foreign key column is going to be storing student IDs, we're going to call it student

03:19.860 --> 03:20.520
ID.

03:23.990 --> 03:24.500
All right.

03:24.500 --> 03:26.430
I'm going to run my application.

03:26.450 --> 03:30.740
I have to stop it in between recordings because my computer was really slowing down.

03:30.740 --> 03:32.720
But I think we should be good now.

03:40.590 --> 03:40.950
Okay.

03:41.070 --> 03:43.260
Going back to my database.

03:48.370 --> 03:49.120
Press run.

03:50.750 --> 03:51.890
All right.

03:52.670 --> 03:56.000
Here we can see the grade table has three columns.

03:56.000 --> 04:00.300
The primary key column provides a unique identity to each grade.

04:00.320 --> 04:05.540
Here you can see that the foreign key column is called Student ID, as we specified over here.

04:05.550 --> 04:10.670
And the foreign key column references the primary key column of the student table ID.

04:10.700 --> 04:15.860
The next step is to make a post request that submits a grade as well as the student that it's associated

04:15.860 --> 04:18.260
to going back to Postman.

04:18.290 --> 04:20.700
Go to the create grade request.

04:20.720 --> 04:23.420
You can see that the request is already set up.

04:23.900 --> 04:28.230
We're not dealing with courses yet so you can ignore this part of our path.

04:28.250 --> 04:30.290
So back to the controller.

04:31.590 --> 04:36.240
We're going to say great service, dot save grade.

04:37.230 --> 04:37.440
Here.

04:37.440 --> 04:43.680
We're passing in both the student ID and course ID path variables from our request, but in this lesson

04:43.680 --> 04:47.640
we're only going to be making use of the student ID will make use of the course ID later.

04:49.630 --> 04:52.420
Now I can go back and make a post request.

04:54.050 --> 04:56.990
Our request to successful 201 created.

04:57.020 --> 05:00.860
If I go back to my database and I'm going to query both tables.

05:04.780 --> 05:06.070
The score is A-plus.

05:06.070 --> 05:13.180
As we specified in the JSON in the primary key column, the grades ID is auto generated, but the foreign

05:13.180 --> 05:15.280
key column doesn't have anything.

05:15.580 --> 05:21.190
The foreign key column needs to reference the ID of the student who this grade belongs to.

05:22.400 --> 05:25.070
We assigned this grade to Harry.

05:26.030 --> 05:30.830
So here are the foreign key columns should have a value of one, but in this case the grade doesn't

05:30.830 --> 05:32.330
belong to anybody.

05:32.330 --> 05:37.390
And the existence of a grade that doesn't belong to anyone doesn't make any sense.

05:37.400 --> 05:40.700
Every grade needs to be assigned to a student.

05:40.820 --> 05:45.620
On that very same note, we need to specify in our relationship.

05:47.020 --> 05:48.700
That the student is not optional.

05:49.330 --> 05:52.000
So optional is equal to false.

05:54.400 --> 05:57.110
A grade cannot exist without a student.

05:57.130 --> 05:58.840
It just doesn't make any sense.

05:58.960 --> 06:03.460
So right now, if I try submitting this same grade again.

06:04.370 --> 06:05.960
It throws a big error.

06:07.590 --> 06:08.940
Which is perfect.

06:09.210 --> 06:14.700
Now, instead of saying optional equals false, some people like to say knowable equals false.

06:16.760 --> 06:22.730
The difference is that optional equals false is a runtime instruction, whereas and it happens before

06:22.730 --> 06:27.660
contacting the database, whereas this blocks the null value at the database layer.

06:27.680 --> 06:32.870
From experience, it's common practice to block the null before contacting the database.

06:33.620 --> 06:39.440
And inside of our method, inside of save grade.

06:39.470 --> 06:44.840
Right before we save the grade, we need to assign it to a student.

06:44.900 --> 06:51.530
So here we're getting the ID of the student to this grade belongs to, we'll say student student.

06:51.530 --> 06:55.850
And we're going to use the path variable to fetch the student using the student repository.

06:57.710 --> 07:01.910
It seems that I ought to wire this before the recording, so please make sure to do so.

07:02.570 --> 07:02.810
Here.

07:02.810 --> 07:04.490
I'll say student repository.

07:04.580 --> 07:12.480
Dot find by ID we're going to find the student to this grade belongs to once we don't forget the dot

07:12.560 --> 07:13.310
get.

07:14.590 --> 07:16.840
And once we fetch the students.

07:18.580 --> 07:21.580
We're going to assign it to our grade grade set.

07:21.580 --> 07:22.960
Student, student.

07:24.060 --> 07:26.370
Now the grade right before being saved.

07:26.370 --> 07:28.740
It's referencing a student entity.

07:29.070 --> 07:30.510
How is that going to look?

07:30.540 --> 07:33.480
Well, let's submit a post request again.

07:34.050 --> 07:36.750
We're going to be giving Harry an A-plus.

07:40.010 --> 07:40.890
Beautiful.

07:40.910 --> 07:45.530
So just by looking at the JSON, we see that there is a grade with an ID of one.

07:45.560 --> 07:50.690
The score is A-plus and this grade belongs to the student with an ID of one.

07:50.690 --> 07:52.190
And his name is Harry.

07:52.400 --> 07:56.540
If we go back to our table, let me just copy these statements.

07:56.720 --> 07:57.830
Reconnect.

08:00.220 --> 08:01.670
And that is amazing.

08:01.690 --> 08:06.940
Here we can see that the student with an idea of one Harry Potter, received an A-plus.

08:07.180 --> 08:12.130
Now I'm going to submit four more grades that belong to the student with an idea of one.

08:12.130 --> 08:14.470
So I'm going to give Harry a B-plus.

08:15.580 --> 08:17.410
I'm going to give him a C-plus.

08:18.350 --> 08:20.480
And I'll give him a D-plus.

08:24.240 --> 08:26.280
Going back to the age to console.

08:28.720 --> 08:33.160
Now we've got four grades, and all of them belong to Harry.

08:35.140 --> 08:37.840
Now I'm going to submit three grades for her mini.

08:37.840 --> 08:40.900
So her mini has an ID of three.

08:43.910 --> 08:45.950
We'll give her an A-plus and everything.

08:45.950 --> 08:49.220
So we'll give her one grade two, grade three grades.

08:52.430 --> 08:54.680
And now we've got three grades for her Mini.

08:57.150 --> 08:59.630
Now our grades table has seven grades.

08:59.640 --> 09:04.500
Four of them belong to Harry and three of them belong to her Mini.

09:05.230 --> 09:11.860
I hope that now you can see how the foreign key column creates a link between two tables such that there

09:11.860 --> 09:18.880
is a many to one relationship between many grades and one student.
