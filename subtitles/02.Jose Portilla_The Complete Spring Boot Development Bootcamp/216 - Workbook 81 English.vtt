WEBVTT

00:00.270 --> 00:01.980
Welcome to Workbook 8.1.

00:01.980 --> 00:08.970
I already went ahead and launched the Starter Project and I also ran the application and now our application

00:08.970 --> 00:17.220
as it stands is not resilient because if the consumer were to make a request to retrieve a resource

00:17.220 --> 00:19.110
with an ID of 1 to 3.

00:19.980 --> 00:24.510
Our application fails, it sends back a status code of 500.

00:24.540 --> 00:32.420
Now, if you go here, a status code of 500 means our server or our application encountered a situation

00:32.430 --> 00:34.280
it does not know how to handle.

00:34.290 --> 00:40.650
In this case, our application failed to throw an exception and it sent back a status code to 500.

00:40.800 --> 00:49.500
Now our application, if it were resilient, it would be perfectly capable of handling a situation where

00:49.500 --> 00:52.410
the consumer sends an ID that doesn't exist.

00:52.620 --> 00:57.060
So the resource not existing should not be deemed our fault.

00:57.090 --> 01:02.430
We should be sending back a status code of 400, which implies that it's the consumer's fault.

01:02.430 --> 01:06.060
They made the bad request they need to fix their URI.

01:06.060 --> 01:07.770
And we're going to do just that.

01:07.770 --> 01:11.250
We need to set up some logic that can handle such scenarios.

01:11.340 --> 01:12.030
All right.

01:12.030 --> 01:15.900
Let's start with Task One tells us to create a new folder called Exception.

01:15.900 --> 01:19.890
And inside the folder, create a no contact abstraction class.

01:19.890 --> 01:23.220
So essentially we're creating our own custom checked exception.

01:23.220 --> 01:24.930
Let's do just that.

01:25.200 --> 01:27.450
Create a new folder right over here.

01:30.430 --> 01:37.420
And we're going to create a no contact exception, a contact not found exception.

01:38.020 --> 01:41.460
It's going to inherit from the exception class.

01:41.470 --> 01:48.610
And by doing so, this becomes a custom checked exception that we can throw whatever a piece of logic

01:48.610 --> 01:50.440
throws this checked exception.

01:50.440 --> 01:55.570
Java's going to force us to try to run that code and catch the exception if the code fails.

01:55.600 --> 02:01.780
So task two is to modify define index by ID function to throw the no contact exception.

02:02.050 --> 02:06.460
So here inside of our service implementation.

02:06.700 --> 02:09.940
So currently our find index by ID function.

02:09.970 --> 02:17.080
If it can find the resource, it throws a runtime exception, no such element exception which implies

02:17.080 --> 02:23.080
that our application didn't know how to handle the scenario and it sends back a 500 internal server

02:23.080 --> 02:25.840
error along with the exception that we threw.

02:25.870 --> 02:28.990
We don't want to throw a runtime exception over here.

02:28.990 --> 02:34.180
What we're going to do is throw a checked exception that forces you to handle it.

02:36.130 --> 02:37.900
No contact exception.

02:37.960 --> 02:42.460
And here we need to specify that this function throws a checked exception.

02:42.460 --> 02:45.910
So anyone that tries to call it needs to handle it.

02:46.060 --> 02:47.890
And here we're getting an error.

02:48.460 --> 02:53.560
Oh, forgot my new keyword because we're creating a new object of the contact exception class.

02:56.440 --> 03:01.780
And so now this piece of logic is prone to throwing a checked exception.

03:01.780 --> 03:08.490
So once again, we need to specify that this function may throw a no contact exception.

03:08.500 --> 03:10.540
It needs to be handled accordingly.

03:11.320 --> 03:19.030
Now, this is kind of annoying because now we have to go to the contact service interface and redefine

03:19.030 --> 03:22.390
what our implementation needs to override.

03:22.420 --> 03:27.370
This is really inconvenient, but bear with me in the next workbook we're going to look at a much better

03:27.370 --> 03:29.440
method anyways.

03:31.660 --> 03:33.420
I think we're missing one function.

03:33.430 --> 03:34.630
Oh, this one over here.

03:38.640 --> 03:40.920
And we'll update the interface here as well.

03:43.820 --> 03:44.750
All right.

03:44.780 --> 03:47.240
Now we've got to fix our code inside the controller.

03:49.540 --> 03:49.810
Here.

03:49.810 --> 03:51.970
We need to try to run the code.

03:55.900 --> 03:58.600
And catch the exception if the code fails.

03:59.080 --> 04:04.600
So in case there is a no contact exception that gets thrown.

04:05.820 --> 04:06.120
Here.

04:06.120 --> 04:11.040
We're catching the exception and we're going to return a new response entity.

04:11.250 --> 04:13.320
The status code we send back.

04:14.770 --> 04:15.910
Is going to be.

04:17.070 --> 04:19.800
Let's see the status codes that we have at our disposal.

04:19.830 --> 04:22.140
Which one do you think we should use?

04:22.590 --> 04:25.980
I think 404 makes the most sense.

04:26.070 --> 04:29.280
The server cannot find the resource you requested.

04:30.910 --> 04:35.380
HTTP status dot not 404 not found.

04:40.770 --> 04:41.790
All right.

04:41.940 --> 04:44.220
We'll do the exact same thing here.

04:44.250 --> 04:46.380
We will try to run this code.

04:48.400 --> 04:50.290
And if an exception is thrown.

04:54.570 --> 04:57.560
That means the consumer needs to fix their request.

04:57.570 --> 05:01.620
They made a bad request, in which case we're going to return.

05:03.180 --> 05:08.250
HTTP status dot not found.

05:09.570 --> 05:15.180
So when a consumer receives an HTTP status of not found, they're going to automatically know, Oh,

05:15.180 --> 05:16.850
I'm the one who made the mistake.

05:16.860 --> 05:19.530
I need to be the one who fixes my request.

05:21.470 --> 05:22.100
All right.

05:22.100 --> 05:23.660
Doing the same thing over here.

05:31.110 --> 05:33.090
No contact exception.

05:35.940 --> 05:37.180
Now I know what you're thinking.

05:37.200 --> 05:38.700
There has to be a better way.

05:38.730 --> 05:40.110
I promise you there is.

05:40.110 --> 05:42.370
But let's just do it this way for now.

05:42.390 --> 05:47.610
Sometimes it's always good to do it the more fatiguing way, so that you can then fully appreciate the

05:47.610 --> 05:51.000
more elegant features that Spring Boot offers.

05:52.820 --> 05:55.970
So anyways, I think now we should be good to go.

05:58.340 --> 06:01.640
Now we need to test our API using Postman First.

06:01.640 --> 06:03.920
We need to create the following resources.

06:04.460 --> 06:05.840
This is kind of fun.

06:05.840 --> 06:14.780
So we will make a bunch of post requests because remember, post implies creating a resource inside

06:14.780 --> 06:15.830
the body.

06:18.930 --> 06:22.020
Don't forget to specify that we're sending over JSON.

06:22.440 --> 06:24.300
First we will create.

06:25.650 --> 06:27.350
A John Snow resource.

06:28.580 --> 06:28.940
Boom.

06:28.940 --> 06:30.110
It's been created.

06:31.070 --> 06:35.570
Then we will create a the hound resource.

06:37.750 --> 06:39.100
That was created as well.

06:39.910 --> 06:46.780
Then we'll create a Tyrion Lannister resource that was created to let's just make sure everything is

06:46.780 --> 06:50.080
well, let's make a get request on all.

06:50.740 --> 06:52.450
Okay, this is perfect.

06:52.840 --> 06:55.090
And the next step.

06:55.720 --> 06:57.400
We already applied this test case.

06:57.400 --> 06:58.150
We're good.

06:58.510 --> 07:04.000
Let's request a resource and the Yuri will specify an ID that doesn't exist.

07:08.190 --> 07:09.030
And perfect.

07:09.030 --> 07:12.930
The server sends back a response of 404 not found.

07:12.960 --> 07:18.300
This tells us it says right here the requested resource could now be found and it's telling us to fix

07:18.300 --> 07:19.170
our request.

07:19.170 --> 07:21.570
This was our fault as the consumer.

07:22.290 --> 07:23.400
All right.

07:24.780 --> 07:27.660
Let's make a put request on local hosts.

07:28.110 --> 07:29.130
Slash contact.

07:29.130 --> 07:29.460
Slash.

07:29.460 --> 07:30.300
One, two, three.

07:34.740 --> 07:37.590
And now we get a 400 bad request.

07:37.590 --> 07:39.830
So we didn't actually set this up ourselves.

07:39.840 --> 07:47.760
Spring Boot automatically knows that the consumer made a bad request because this does not match anything

07:47.760 --> 07:50.430
we have in our controller.

07:50.460 --> 07:54.180
Our put operation expects a request body gear.

07:54.180 --> 07:55.920
We're not passing a request body.

07:55.920 --> 08:00.180
So spring boot automatically sends a 400 bad request.

08:01.010 --> 08:07.910
400, if you go here, means that the server cannot or will not process the request because there is

08:07.910 --> 08:11.540
a client error, a malformed request in this case.

08:11.900 --> 08:12.920
All right.

08:13.830 --> 08:18.420
Now let's make a request that does include a body.

08:22.700 --> 08:26.030
But we're going to specify an ID that does not exist.

08:31.370 --> 08:36.020
We get a 404 not found and now let's make a delete request on slash.

08:36.020 --> 08:36.830
One, two, three.

08:41.330 --> 08:42.950
No need to include that.

08:44.560 --> 08:49.230
Again, it cannot find the resource and it sends back a 404 not found.

08:49.240 --> 08:50.860
Please fix your request.

08:50.890 --> 08:53.530
Get an actual ID that's in the server.

08:53.770 --> 08:56.440
All right, so take home messages.

08:56.440 --> 09:02.110
When a client makes a bad request, we should be sending back 400 messages.

09:02.110 --> 09:04.930
We shouldn't allow our application to fail.

09:04.960 --> 09:12.190
These error responses should be reserved for actual internal server failures, not for when a consumer

09:12.190 --> 09:14.620
isn't able to input the correct ID.
