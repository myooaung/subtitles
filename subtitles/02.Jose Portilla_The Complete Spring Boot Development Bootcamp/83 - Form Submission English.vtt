WEBVTT

00:00.240 --> 00:02.190
Now we're ready to submit our form.

00:02.220 --> 00:04.650
The first step is to make a post request.

00:04.650 --> 00:11.010
So a get request is when the client is requesting a resource, but when they want to submit data to

00:11.010 --> 00:14.310
our application, then they need to make a post request.

00:15.120 --> 00:21.540
So when the user presses submit, the post request is going to carry all of the user input to our spring

00:21.540 --> 00:28.350
boot back end the post request payload will have as many parameters as there are fields attached to

00:28.350 --> 00:35.250
each input, so there will be a name parameter that equals the name input, a score parameter that equals

00:35.250 --> 00:40.590
the score inputs and a subject parameter that equals the subject inputs.

00:40.920 --> 00:44.850
Okay, now we have all of this data being carried back to our application.

00:44.850 --> 00:47.220
We need something to receive that data.

00:47.220 --> 00:51.300
So step two is to create a handler method that accepts the post request.

00:53.470 --> 00:54.570
All right.

00:54.580 --> 01:01.240
And then step three, the handler method needs to specify an object that can receive the payload inside

01:01.240 --> 01:02.380
the post request.

01:02.800 --> 01:06.100
Obviously, it's going to specify a grade object.

01:09.040 --> 01:14.950
And then in step four, which we don't have to do ourselves behind the scenes, Spring Boot is going

01:14.950 --> 01:21.640
to create an MBTI grade object, and it's going to use your setters to update every field in the object

01:21.640 --> 01:23.860
with payload from the post request.

01:25.180 --> 01:28.720
So it's going to start off by creating an empty grade object.

01:31.230 --> 01:36.990
And it's going to use your sweaters to update every single field in this object with payload from the

01:36.990 --> 01:38.130
post request.

01:45.300 --> 01:51.930
This object that spring boot creates for us behind the scenes is going to be wired to our grade parameter.

01:53.260 --> 01:55.990
And then step five is to update the data store.

01:56.170 --> 02:02.470
So back here, this form was designed to make a post request when the client presses on the submit button,

02:02.470 --> 02:09.830
whereas that post request going to go well, we can direct the post request of a form using the leaf

02:09.880 --> 02:11.040
attribute action.

02:11.050 --> 02:17.140
And you may have guessed it, we're going to use a link expression to specify a URL endpoint.

02:17.500 --> 02:22.670
The URL is context relative, so it's already going to consider the local host 8080.

02:22.690 --> 02:27.310
So we can just specify a path of handle submit.

02:28.220 --> 02:33.710
So a post request is going to be made on handle submit that's going to carry all of this user input.

02:33.710 --> 02:37.070
So what we can do is back inside of the great controller.

02:38.380 --> 02:41.830
Are going to map this post request using post mapping.

02:42.280 --> 02:47.290
We're going to map the post request made on path slash handle submit.

02:49.900 --> 02:52.030
To a handler method called.

02:53.000 --> 02:54.350
Submit grade.

02:56.770 --> 03:03.040
So now we have a handler method that intercepts the post request, but we need to specify a grade object

03:03.670 --> 03:07.990
that receives the payload that's being carried by the post request.

03:08.080 --> 03:14.740
And so behind the scenes, what Spring Boot is going to do is create an empty grade object using your

03:14.740 --> 03:21.190
empty constructor, and it's going to use your setters to update every single field inside of this grade

03:21.190 --> 03:24.040
object with payload from the post request.

03:24.550 --> 03:25.240
All right.

03:25.240 --> 03:28.120
This is something you'll visualize in the next breakpoint session.

03:28.120 --> 03:36.160
And when a grade is submitted, we're going to add that grade to our array list so we can remove all

03:36.160 --> 03:41.290
of this hardcoded data and just set this equal to a new array list.

03:46.830 --> 03:48.240
Of great objects.

03:48.360 --> 03:49.920
And then we can say.

03:51.150 --> 03:57.510
Student grades dot add and we're going to add the submitted grade object.

04:01.090 --> 04:02.410
Then I will return.

04:03.720 --> 04:04.470
ABC.

04:07.060 --> 04:07.210
Okay.

04:07.270 --> 04:12.460
Now, before I continue, let me just add a two string method real quick and print the great object

04:12.640 --> 04:15.460
Java code generators generate to string.

04:17.780 --> 04:20.990
All right, I will print the grade object.

04:25.250 --> 04:26.270
Go back here.

04:30.710 --> 04:38.890
Oh, and one more thing is, when we load our form, we're passing in an object that's already pre-populated.

04:38.900 --> 04:41.630
We want our form to start off as empty.

04:41.630 --> 04:44.810
So we're going to start by passing in an empty grade object.

04:48.000 --> 04:48.490
Okay.

04:49.050 --> 04:51.300
I'm going to submit a grade for Harry.

04:51.810 --> 04:55.020
Give him a C minus and potions.

04:56.020 --> 04:56.860
We get an error.

04:56.890 --> 05:00.340
I'll come back to this error in a bit, but you'll notice.

05:01.290 --> 05:02.580
That if we were.

05:02.580 --> 05:05.520
Well, ignoring the error that's also displayed in the terminal.

05:06.120 --> 05:07.170
If I scroll up.

05:10.690 --> 05:15.020
We see that the forum data was successfully received by our handler method.

05:15.040 --> 05:20.410
We see a great object with the name of Harry, a subject of potions and a score of C minus.

05:20.680 --> 05:26.080
So what happened was that a post request was made from our form.

05:26.080 --> 05:30.010
That post request was directed to the path slash handle.

05:30.010 --> 05:37.120
Submit our handler method submit grade intercepted this post request and behind the scenes spring boot

05:37.120 --> 05:44.590
actually created an empty grade object using your empty constructor and Spring Boot was smart enough

05:44.590 --> 05:48.760
to use your setters to update every single field in that grade.

05:48.760 --> 05:51.850
Object with payload from the post request.

05:53.360 --> 05:59.120
And having successfully received the payload from the post request, we were able to print the grade

05:59.120 --> 06:02.000
object and print it successfully.

06:02.330 --> 06:04.300
So let's go back to the error.

06:04.310 --> 06:10.400
It's telling us that it's having trouble resolving the template A, B, C, because that template doesn't

06:10.400 --> 06:11.120
exist.

06:11.150 --> 06:15.890
Before I do anything, what I'm going to do is remove the two string method.

06:16.160 --> 06:18.290
This was only for testing purposes.

06:18.530 --> 06:20.090
Remove the print statement.

06:20.090 --> 06:21.200
All right.

06:26.670 --> 06:30.180
And so once the user submits the form, we update the data store.

06:30.210 --> 06:35.010
We want to redirect the client to make a get request on slash grades.

06:35.460 --> 06:38.040
The way to do that is to say redirect.

06:39.980 --> 06:41.960
Redirect.

06:42.590 --> 06:45.770
Then put a colon followed by a path.

06:45.980 --> 06:49.520
In this case, the path is going to be slash grades.

06:50.310 --> 06:56.370
Basically what we're telling the user is, hey, the submission completed successfully and the content

06:56.370 --> 06:59.670
you're looking for afterwards is over here and slash grades.

06:59.670 --> 07:02.370
So please go ahead and make a get request there.

07:02.370 --> 07:09.180
And so the browser, the client is going to automatically make a get request on slash grade triggering

07:09.180 --> 07:10.590
this handler method.

07:10.590 --> 07:15.390
It's going to add this array list to the model and display the grades view.

07:16.950 --> 07:21.720
So I think the app will end with no errors going back here.

07:22.780 --> 07:24.700
Let's submit Harry.

07:24.730 --> 07:26.320
Give him the usual C minus.

07:26.320 --> 07:27.790
He was never good in potions.

07:27.790 --> 07:29.080
We'll press submit.

07:29.260 --> 07:30.340
Beautiful.

07:30.850 --> 07:34.320
Now, before I get flooded with this question.

07:34.330 --> 07:37.240
Hey, Ryan, why not just return the grade's view?

07:37.810 --> 07:39.610
Och, I'll entertain it for now.

07:40.540 --> 07:42.370
Let's go and submit a grade.

07:43.210 --> 07:45.280
We'll say Harry Press submit.

07:45.550 --> 07:46.400
There's no data.

07:46.420 --> 07:47.350
Why not?

07:48.260 --> 07:50.690
Well, let's think about this logically.

07:51.440 --> 07:53.250
The rose up.

07:53.290 --> 07:54.650
Wrong html.

07:54.890 --> 08:00.860
The rose inside of the grades table are bound to the grades array list.

08:03.920 --> 08:09.200
However, in this case, the handler method that returns the grades view doesn't add any model attributes.

08:09.470 --> 08:15.080
So now am I expected to just copy the logic from the grades handler method over to here?

08:15.350 --> 08:16.490
No way.

08:16.820 --> 08:22.010
Submit form has no business rendering the grades templates and updating its data.

08:22.010 --> 08:29.090
Its only purpose is to handle form submission and after it fulfills that purpose, which it does successfully,

08:29.090 --> 08:31.560
it must redirect the client.

08:31.580 --> 08:33.500
So we'll say redirect.

08:34.610 --> 08:35.960
Slash grades.

08:39.140 --> 08:45.290
The redirection basically tells the client, Hey, the content you asked for is over here, so go ahead

08:45.290 --> 08:46.650
and make it get request.

08:46.670 --> 08:52.760
The browser is going to automatically make a get request to slash grades and the correct handler method

08:52.760 --> 08:53.390
intercepts.

08:53.390 --> 09:01.010
It adds the list as a model attribute and renders the grades templates if I rerun the app now.

09:04.610 --> 09:06.140
And that's just beautiful.

09:07.420 --> 09:10.780
In this lesson, the user entered data through a form.

09:10.810 --> 09:14.950
Now this is a lot to recap, so just tune in to the next breakpoint session.
