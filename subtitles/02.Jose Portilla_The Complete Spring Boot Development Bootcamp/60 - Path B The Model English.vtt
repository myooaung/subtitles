WEBVTT

00:00.090 --> 00:03.870
The model makes up another component of the model view controller design.

00:06.750 --> 00:09.570
The model is data that the controller sends to the view.

00:11.820 --> 00:14.270
Without a model, the view is meaningless.

00:14.280 --> 00:17.490
The view alone offers visual elements, but nothing more.

00:20.510 --> 00:23.330
In this lesson, you will learn about the model component.

00:25.600 --> 00:27.340
Let's go through the whole process.

00:29.670 --> 00:31.950
First the user makes a get to request.

00:33.140 --> 00:36.320
The controller maps the get request to a handler method.

00:40.120 --> 00:43.010
Step one is courtesy of Spring Boot Magic.

00:43.030 --> 00:45.940
A handler method has direct access to the model.

00:50.740 --> 00:55.060
The Handler method has access to the model directly from its function parameters.

01:01.440 --> 01:06.300
The Handler method can create data in the form of plain old Java objects.

01:09.150 --> 01:11.770
Imagine there is a grade class from it.

01:11.790 --> 01:15.720
The handler method can create three plain old grade objects.

01:23.720 --> 01:27.320
Step three is to store the data in a model attribute.

01:30.750 --> 01:33.660
The Handler method can add an attribute to the model.

01:33.810 --> 01:38.670
The model attribute consists of a key that maps to a chunk of data.

01:39.540 --> 01:40.500
At a high level.

01:40.500 --> 01:44.460
This diagram shows how the handler method can add data to the model.

01:48.260 --> 01:53.060
Once the data is added, the controller sends the model containing all of that data to the view.

01:56.420 --> 01:59.480
Before we get ahead of ourselves, we can start with step one.

02:00.570 --> 02:03.150
Think of a model as a container that holds data.

02:05.680 --> 02:08.140
Every handler method has access to the model.

02:10.550 --> 02:14.750
Courtesy of Spring Boot Magic Handler methods have direct access to the model.

02:14.780 --> 02:18.410
You can access it directly from the methods list of parameters.

02:22.410 --> 02:23.090
Model.

02:23.100 --> 02:24.780
Make sure to import it.

02:34.370 --> 02:37.970
A Hojo class is the simplest type of Java class.

02:41.830 --> 02:44.590
A pod class contains private fields.

02:46.400 --> 02:47.630
Constructors.

02:49.740 --> 02:52.650
As well as public getters and setters for each field.

02:55.590 --> 03:00.060
From a pod class, you can create a plain old Java object.

03:03.060 --> 03:05.400
A podger represents a piece of data.

03:08.800 --> 03:14.440
Looking back at the grades page, each row inside the table needs a piece of data that contains the

03:14.440 --> 03:17.550
student name, the subject and the score.

03:17.560 --> 03:24.280
In any case, because each piece of data needs three fields, what I'm going to do is add a pod class

03:24.280 --> 03:29.230
with three fields, so I'll create a new Java file called a grade.

03:29.980 --> 03:30.610
Java.

03:35.910 --> 03:40.050
And I will create three fields private string name.

03:44.920 --> 03:47.830
Private string subject.

03:54.990 --> 03:57.840
Private string score.

04:00.790 --> 04:01.230
Okay.

04:01.240 --> 04:05.230
And now what I can do is generate a constructor using all fields.

04:11.070 --> 04:13.800
I will generate an empty constructor as well.

04:22.400 --> 04:24.830
Generate all of the getters and setters.

04:34.250 --> 04:35.810
And that should be it.

04:40.170 --> 04:44.700
From this Pogo class, you can create data in the form of grade objects.

04:46.080 --> 04:51.480
So inside the handler method, what I'm going to do is create a new object of the grade class.

05:00.210 --> 05:02.220
And the parameters will be hairy.

05:04.170 --> 05:06.150
The subject is potions.

05:07.030 --> 05:09.640
And their score will be a C minus.

05:12.860 --> 05:16.860
The great object is a piece of data referring back to the diagram.

05:16.880 --> 05:20.300
The handler method creates data and stores it in the model.

05:25.740 --> 05:28.980
Then it sends the model containing all of that data to The View.

05:34.320 --> 05:35.600
So back to the code.

05:35.610 --> 05:39.180
You need to somehow add this piece of data to the model.

05:45.930 --> 05:48.450
An attribute maps to a piece of data.

05:50.880 --> 05:54.810
You can add a model attribute using the method add attribute.

05:56.920 --> 06:00.100
It accepts two arguments the name of the attribute.

06:02.260 --> 06:04.090
And the data that it stores.

06:07.330 --> 06:08.920
Inside of your handler method.

06:08.920 --> 06:13.510
Add an attribute to the model called grade model dot add attribute.

06:15.900 --> 06:16.710
Grade.

06:20.150 --> 06:24.140
And the great attribute will map to the grade object.

06:27.870 --> 06:28.510
And that's it.

06:28.530 --> 06:30.270
Now your model contains data.

06:30.300 --> 06:32.820
The next step is to merge that data with the view.

06:34.580 --> 06:37.100
In this lesson, you add a data to the model.
