WEBVTT

00:00.740 --> 00:04.100
In this lesson, you will retrieve a grade based on a student ID.

00:06.160 --> 00:11.080
There's something very special about the fact that our user defined repository is an interface, not

00:11.080 --> 00:12.100
a class.

00:12.220 --> 00:18.040
You'll remember that Spring Boot automatically creates an implementation of this interface which inherits

00:18.040 --> 00:21.370
all of the predefined methods from the CRUD repository.

00:21.610 --> 00:27.790
This implementation lives inside the spring container as a bean, and we're auto wiring this bean wherever

00:27.790 --> 00:28.660
we want.

00:29.140 --> 00:35.320
On top of these predefined operations, we can add our own queries to the repository as long as we follow

00:35.320 --> 00:37.720
a very specific naming convention.

00:38.380 --> 00:40.320
First you start with your action.

00:40.330 --> 00:41.860
What are you trying to do?

00:41.980 --> 00:44.560
In this case, we want to find by.

00:44.860 --> 00:48.490
We want to find an existing record based on a set of criteria.

00:48.940 --> 00:51.710
And then what follows is your field values.

00:51.730 --> 00:55.720
Your field values must match the name of your columns.

00:56.790 --> 01:03.000
So if I want to query a grade based on a student ID that it belongs to the convention and SQL, as you

01:03.000 --> 01:06.600
can see, is to use underscore to separate two words.

01:06.600 --> 01:13.260
But in Java you can match it with camel case and then obviously it would expect an ID value to be passed

01:13.260 --> 01:13.650
in.

01:16.390 --> 01:22.780
If you follow this naming convention spring, JP's query builder will take care of the rest, which

01:22.780 --> 01:24.220
I think is very powerful.

01:24.340 --> 01:28.300
All we have to do is define a method signature inside the interface.

01:29.430 --> 01:33.120
And a spring boot automatically creates an implementation of your interface.

01:33.120 --> 01:39.240
It's going to override this method and derive a query based on how it interprets your method signature.

01:43.900 --> 01:50.260
So over here, inside of the grid repository, I'm going to define a custom query that can find a grade

01:50.260 --> 01:51.790
based on a student ID.

01:51.820 --> 01:53.830
The return type will be grade.

01:54.840 --> 01:57.690
And then I will start with my prefix fine by.

01:59.060 --> 02:01.950
Followed by what my query is based on.

02:01.970 --> 02:06.700
In this case, I want to find a grade based on the student ID column.

02:06.710 --> 02:10.220
So we're going to say find by student.

02:11.370 --> 02:12.150
I'd.

02:14.950 --> 02:21.220
And this custom query is going to attempt to find a grade based on whatever student ID we pass in.

02:22.890 --> 02:23.670
All right.

02:23.670 --> 02:24.600
Out of the box.

02:24.600 --> 02:30.030
As Spring Boot creates an implementation of your interface, it will override this method and build

02:30.030 --> 02:33.210
a query based on how it interprets your method signature.

02:33.210 --> 02:36.870
Which is beautiful because now I can just finalize my service method.

02:37.170 --> 02:43.380
I can go over to course service implementation and oh sorry, great service implementation and I can

02:43.380 --> 02:52.440
say great repository dot find by student ID, student ID, and now I can go back to my grade controller.

02:53.440 --> 02:55.780
And here I will say great service.

02:56.330 --> 02:58.750
Dot get grade.

02:59.630 --> 03:01.450
You can ignore the course ID for now.

03:01.460 --> 03:02.690
We're not using it.

03:04.340 --> 03:05.660
And that should be on.

03:09.090 --> 03:13.860
I'm going to submit a grade for I guess I think this is her mining.

03:17.650 --> 03:19.420
I'm going to copy this path.

03:19.690 --> 03:25.450
What you put for the course doesn't really matter because our query is purely based on the student ID.

03:25.450 --> 03:29.410
But anyways, let's copy the exact path over to read grade.

03:31.230 --> 03:35.110
And we're going to try to find a grade based on a student ID of three.

03:35.130 --> 03:36.630
Let's see if it works out.

03:37.080 --> 03:38.270
And it gets her mini.

03:38.280 --> 03:39.720
That is awesome.

03:42.260 --> 03:45.830
Fined by student ID received an ID of three.

03:45.860 --> 03:49.490
The grade repository was able to successfully query our table.

03:49.700 --> 03:51.320
Returned a grade.

03:51.320 --> 03:58.370
And over here we serialized whatever object was returned into JSON and the result was the following

03:58.400 --> 04:01.520
a grade of A+ that belongs to her mini.
