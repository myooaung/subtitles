WEBVTT

00:00.360 --> 00:03.420
Finally if is capable of implementing conditional logic.

00:06.980 --> 00:11.000
There are many ways that a variable expression can execute on a model attributes.

00:11.030 --> 00:16.910
A variable expression can be used to return a model attribute or a value that derives from it.

00:17.150 --> 00:20.570
It can execute a condition based on a model attributes.

00:20.600 --> 00:26.990
It can also be used in a loop, and it can also execute utility methods on a model attribute.

00:27.020 --> 00:30.500
In this lesson, we will be looking at executing conditionals.

00:33.290 --> 00:38.660
We won't be implementing any conditional logic in the grade submission app, but it will come again

00:38.660 --> 00:39.890
in your final challenge.

00:39.890 --> 00:46.520
So pay close attention and I'll start you off by downloading the starter code on the following path.

00:46.520 --> 00:49.910
So take some time to launch it from the Spring Boot resources.

00:55.360 --> 01:00.820
Finally, if allows you to selectively render HTML elements depending on a condition.

01:05.230 --> 01:10.810
Now remember that a variable expression executes on a model attribute in some way, and this variable

01:10.810 --> 01:14.410
expression executes a condition based on a model attributes.

01:14.500 --> 01:19.240
It grabs an age that was stored in the model and compares it against the value.

01:19.330 --> 01:22.180
If true, it's going to render the paragraph element.

01:22.180 --> 01:25.810
If it's false, the paragraph element will not render.

01:27.960 --> 01:34.590
So here inside of the starter project, what we're going to do is access the model.

01:34.590 --> 01:36.480
We'll say model.

01:37.300 --> 01:37.870
Model.

01:37.870 --> 01:39.670
And we're going to add.

01:40.680 --> 01:49.530
An attribute where the key is going to be sales and let's just pass in sales of $100.

01:52.130 --> 01:53.960
This should be ad attributes.

01:53.990 --> 01:55.040
My apologies.

01:57.590 --> 01:59.320
Now inside of the HTML.

02:01.860 --> 02:09.930
What I'm going to do is create a paragraph element that says sales are good, and then what I'll do

02:09.930 --> 02:12.460
is apply a thin leaf condition.

02:12.480 --> 02:13.140
Finally, f.

02:13.140 --> 02:13.680
F.

02:14.220 --> 02:14.790
Finally f.

02:14.790 --> 02:15.000
F.

02:15.000 --> 02:20.850
Will use a variable expression to execute a condition based on a model attributes.

02:21.150 --> 02:24.930
So we're going to grab the sales value from the model.

02:26.700 --> 02:31.190
And the condition that determines whether this element will render or not.

02:31.200 --> 02:35.040
We'll be checking if the sales are greater than $50.

02:35.430 --> 02:37.710
So if I go ahead and run this application.

02:50.020 --> 02:50.340
Okay.

02:50.470 --> 02:51.580
Running the app.

02:54.130 --> 02:55.210
The condition is true.

02:55.210 --> 02:57.280
So the element renders.

02:59.800 --> 03:05.320
Going back, I'm going to change the sales to, let's say, $30.

03:10.350 --> 03:12.720
And this time the HTML does not render.

03:17.920 --> 03:18.970
Now finally fun.

03:18.970 --> 03:21.080
This is the opposite of family faith.

03:21.310 --> 03:24.100
It renders an element if your condition is false.

03:26.310 --> 03:34.590
So back here, what I'm going to do is copy the exact same element and change it to unless.

03:38.090 --> 03:43.760
If the sales are not bigger than 50, then we'll display sales are bad.

03:44.880 --> 03:45.900
Run the up.

03:46.670 --> 03:48.230
And the sales are bad.

03:48.260 --> 03:52.310
Change the sales to $150.

03:56.760 --> 03:58.200
And now sales are good.

03:59.280 --> 04:04.770
If and unless are typically used together like this, as is typical to an if else block.

04:08.550 --> 04:12.450
Now a ternary operator returns a value based on a condition.

04:15.600 --> 04:20.250
Once more, a variable expression executes a condition based on a model attributes.

04:20.250 --> 04:25.890
The first value to the right of the ternary operator is returned if the condition is true and the second

04:25.890 --> 04:28.440
value is returned if the condition is false.

04:32.280 --> 04:38.700
So back here, instead of having two paragraph elements, what I can do is say Leave text.

04:40.540 --> 04:45.010
And the text value that gets returned will be based on the following condition.

04:45.010 --> 04:52.060
So we'll say if sales were bigger than 50, if this condition is true, then we're going to return.

04:52.060 --> 04:55.090
The string sales were good.

04:56.950 --> 04:59.650
Now this doesn't do anything, but let's remove it anyways.

05:00.720 --> 05:03.720
Otherwise we're going to say sales were bad.

05:04.980 --> 05:11.490
Whenever I'm defining a string inside of a life expression, I wrap it around single quotes.

05:13.360 --> 05:15.040
All right if I go back.

05:18.320 --> 05:19.190
Beautiful.

05:19.850 --> 05:23.240
But I go back here and say, 30 bucks.

05:26.410 --> 05:27.730
Sales were bad.

05:29.970 --> 05:36.910
Finally, text relies on a text of value that's returned based on the condition that's being evaluated.

05:36.930 --> 05:38.200
This is really good.

05:38.220 --> 05:41.400
I don't know about you, but I much prefer the ternary operator.

05:45.760 --> 05:51.160
Timely switch compares a value against a list of cases and it renders the case match.

05:54.750 --> 05:59.970
Timely switch is normally used when there are more than two possible results when we compare one value

05:59.970 --> 06:01.390
against a list of cases.

06:01.410 --> 06:07.080
The value is once again fetched from the model using a variable expression and is compared against a

06:07.080 --> 06:08.280
list of cases.

06:09.200 --> 06:15.290
The default case marked as a star executes in the event that the value from the model doesn't match

06:15.290 --> 06:15.950
anything.

06:20.820 --> 06:28.140
So what I'm going to do is I'm going to go back here and say, model, don't add attributes.

06:28.740 --> 06:34.710
And what I'll do is I'll store a product value of table inside the model.

06:37.270 --> 06:38.530
And then back here.

06:39.330 --> 06:41.490
I will create a div.

06:47.440 --> 06:52.510
Which, according to the cheat sheet, is a container that can hold many elements.

06:53.760 --> 06:57.390
And this div is going to evaluate a switch condition.

06:57.570 --> 06:58.980
Finally switch.

07:01.350 --> 07:06.630
We're going to set this equal to a variable expression that fetches product from the model.

07:11.640 --> 07:17.220
And we can execute a condition based on this model attribute by comparing this product against a list

07:17.220 --> 07:18.540
of other products.

07:20.310 --> 07:25.020
So what I'm going to do is create three paragraph elements.

07:27.300 --> 07:28.590
Copying this over.

07:30.510 --> 07:37.620
And here we'll say in the event that the product happens to be a chair.

07:41.040 --> 07:45.360
This element is going to render and display $50.

07:46.690 --> 07:54.360
If it happens to be a TV, we'll say $150 if the product from the model doesn't match any of the cases

07:54.370 --> 07:56.050
in the event of a star.

07:57.650 --> 08:01.430
Then we'll say no match.

08:05.810 --> 08:11.620
And the default element was rendered because the table value does not match chair or TV.

08:11.630 --> 08:14.540
So if I go back and make this into a chair.

08:20.600 --> 08:23.600
The paragraph tag with the matching case is rendered.

08:24.080 --> 08:25.160
All right.

08:26.980 --> 08:31.990
So to recap, a variable expression can execute a condition based on a model attribute.

08:34.950 --> 08:38.130
Finally, if render is an element, if a condition is true.

08:39.670 --> 08:40.390
Family fun.

08:40.390 --> 08:43.270
Less a render is an element if a condition is false.

08:44.540 --> 08:48.410
The ternary operator returns a value based on a condition.

08:49.740 --> 08:53.010
Switch renders the element with a matching case.

08:53.310 --> 08:56.370
I hope you're prepared for the workbooks that lie ahead.
