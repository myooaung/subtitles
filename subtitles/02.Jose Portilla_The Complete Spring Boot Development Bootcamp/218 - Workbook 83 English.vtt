WEBVTT

00:00.090 --> 00:00.750
Welcome to work.

00:00.750 --> 00:02.080
Book 8.3.

00:02.100 --> 00:04.900
I already went ahead and launched the Starter Project.

00:04.920 --> 00:10.710
This workbook is going to be a bit nostalgic because we're basically going back to the concept of field

00:10.710 --> 00:11.720
validation.

00:11.730 --> 00:16.020
So first things first, we need to add the validation dependency.

00:16.050 --> 00:23.310
Go to the Central Maven repo and just copy it over to your POM that XML file so that your validation

00:23.310 --> 00:25.160
dependency can be pulled.

00:25.170 --> 00:32.190
We do not need to specify the version for this spring boot starter and I'm going to synchronize the

00:32.190 --> 00:33.120
build file.

00:34.890 --> 00:35.610
All right.

00:36.870 --> 00:38.100
Should be enough.

00:38.190 --> 00:45.810
Test two is to apply a validation constraints such that we need to prevent the submission of a blank

00:45.810 --> 00:48.330
name or a blank phone number.

00:48.750 --> 00:57.180
So we'll go over to our pod class and we will make sure that the name they provide is not the blank,

00:57.180 --> 01:03.300
so that the message you are going to send back is name cannot be blank.

01:06.810 --> 01:07.770
And here.

01:11.090 --> 01:16.310
The message we were going to send back is number cannot be blank.

01:18.660 --> 01:19.290
Okay.

01:20.960 --> 01:27.230
Now you'll recall that the valid annotation is what actually performs the validation process on your

01:27.230 --> 01:32.360
object based on the constraint applied to each field.

01:32.510 --> 01:37.370
Now, where should we apply the valid annotation, do you think?

01:39.300 --> 01:44.040
Well wherever a contact object is being created and populated with fields.

01:44.040 --> 01:48.900
So when this handler method gets invoked, what's going to happen is Spring Boot is going to create

01:48.900 --> 01:57.420
a new contact object using your constructor, and then it's going to serialize the contents of the request

01:57.420 --> 02:02.790
body into your Java object, updating your name and updating the phone number.

02:02.790 --> 02:09.540
And as the name and phone number are being updated, we need to make sure that they are being validated

02:09.540 --> 02:11.640
using the valid annotation.

02:11.730 --> 02:15.690
We're going to do this over here.

02:17.500 --> 02:19.060
And that should be it.

02:19.090 --> 02:22.150
These are the only two places where we need to perform validation.

02:24.580 --> 02:31.600
Now in order to handle invalid fields, we can actually do this in our global exception handler, which

02:31.600 --> 02:37.230
is extremely convenient because we already have it set up to handle our runtime exception.

02:37.240 --> 02:40.190
All we need to do is inherit from the response entity.

02:40.210 --> 02:44.800
Exception Handler Class extends response entity.

02:44.800 --> 02:46.180
Exception Handler.

02:46.180 --> 02:53.170
And now I can override the handle method argument not valid function beautiful.

02:53.410 --> 03:02.590
So now you'll remember that after spring boot validates the fields of your object, a binding result

03:02.590 --> 03:05.590
is going to carry the result of this validation.

03:05.590 --> 03:07.630
We studied this in section three.

03:07.630 --> 03:13.570
We can access the binding result through the method argument, not valid exception.

03:13.810 --> 03:15.910
So for now I'm just going to print it.

03:15.910 --> 03:25.270
I'm just going to say print line exception dot get binding result dot get all errors.

03:26.040 --> 03:26.310
Here.

03:26.310 --> 03:33.990
It tells us to return an appropriate status code in the event that there are invalid arguments in this

03:33.990 --> 03:34.740
case.

03:34.770 --> 03:37.200
What do you think we need to return?

03:37.440 --> 03:40.290
Well, let's go to modular status codes.

03:42.150 --> 03:49.020
We'll go to the client responses because this involves a bad request on the client portion of things.

03:50.180 --> 03:56.320
And I would say this is a bad request because the user is passing in invalid data.

03:56.330 --> 04:06.350
So if this happens, we're going to send back a new response entity with an HTTP status code of bad

04:06.350 --> 04:07.250
request.

04:09.120 --> 04:09.990
All right.

04:09.990 --> 04:11.750
And now and learn the part.

04:11.760 --> 04:14.520
It tells us to create a far loop.

04:15.490 --> 04:21.310
That loops through every single error inside of the list of errors.

04:21.310 --> 04:24.940
So each element is of type object error.

04:25.030 --> 04:27.160
Let's just go ahead and import that.

04:29.570 --> 04:30.200
Okay.

04:30.680 --> 04:32.930
And we can just go ahead and print.

04:35.640 --> 04:37.500
Error Dot.

04:39.160 --> 04:43.000
Get default message because this allows us to print a string.

04:45.050 --> 04:46.970
I think we're good to go.

04:48.440 --> 04:54.260
Let's go to postmen and we're going to make a post request.

04:58.190 --> 04:59.050
Um.

04:59.060 --> 05:03.020
The name is going to be Tyrion Lannister.

05:04.840 --> 05:06.570
Actually there should be data and learn the part.

05:06.580 --> 05:07.330
Let's just copy that.

05:07.330 --> 05:07.870
Over.

05:12.950 --> 05:15.320
We're sending over a bad phone number.

05:18.010 --> 05:19.960
And did I even run my application?

05:19.960 --> 05:21.520
Silly me, I did not.

05:33.930 --> 05:39.330
All right, we'll send over that request and we get back a 400 bad request.

05:39.900 --> 05:43.590
So here, if you look closely, it says the number cannot be blank.

05:43.890 --> 05:44.640
All right.

05:44.640 --> 05:48.060
There's actually only one error, so we didn't actually need to perform the loop.

05:48.240 --> 05:51.870
But anyways, we can move on with task number five.

05:52.080 --> 05:54.120
Inside Error Response Java.

05:54.120 --> 05:57.540
We need to convert our message field into a list.

05:57.660 --> 05:57.900
Hmm.

05:57.900 --> 05:59.280
I wonder why we're doing that.

05:59.280 --> 06:02.070
That's going to become apparent very soon.

06:03.670 --> 06:05.500
So we'll make this into a list.

06:08.800 --> 06:09.790
All right.

06:09.790 --> 06:12.850
We're going to have to modify our constructor.

06:17.020 --> 06:20.650
And we can regenerate our galleries and setters.

06:24.130 --> 06:24.720
Okay.

06:25.240 --> 06:26.650
Going back over here.

06:29.150 --> 06:37.460
Our Error Response constructor now expects a list so we can cheat and just say arrays dot as list passing

06:37.460 --> 06:40.550
this into a list and then passing it into our constructor.

06:42.540 --> 06:47.400
And now let me just go ahead and pass in a bad get request.

06:47.400 --> 06:48.810
We'll say slash contact.

06:48.810 --> 06:50.970
We'll put in an idea that doesn't exist.

06:52.820 --> 06:53.480
All right.

06:53.480 --> 06:59.540
And now you'll notice that as spring boots sterilizes the properties of this Java object into JSON,

06:59.540 --> 07:03.440
the list gets converted into a JSON array type.

07:04.580 --> 07:10.970
Such that all of the elements that would be contained in this list will be part of the JSON array inside

07:10.970 --> 07:12.080
of these brackets.

07:12.290 --> 07:13.340
This is really nice.

07:13.340 --> 07:18.920
In JSON, there are array types, there are string types, there are number types.

07:18.920 --> 07:24.530
So far we've only seen array in string, but I'm sure in the future will be seeing many more data types.

07:24.620 --> 07:27.290
Anyways, inside handle method argument.

07:27.320 --> 07:27.860
Not valid.

07:27.860 --> 07:34.100
We need to create an error response object and append every error message from the binding result into

07:34.100 --> 07:34.860
the list.

07:34.880 --> 07:41.480
This makes a lot of sense because if the user were to mess up both the names and the phone number,

07:41.480 --> 07:46.620
we would need to send back two error messages, not just one.

07:46.640 --> 07:55.490
So here, what we're going to do is create a new list, list, string.

07:56.680 --> 08:01.150
We'll call it error is I guess is equal to a new array list.

08:01.870 --> 08:03.700
And now I can just say.

08:04.850 --> 08:05.870
Errors.

08:06.790 --> 08:12.550
Dot ad and we're going to add each error or each string into this errors list.

08:14.590 --> 08:21.040
And now I can respond with a new object of the error response class.

08:21.280 --> 08:24.940
And into this constructor, we can pass in the errors list.

08:27.070 --> 08:29.020
All right, let's try this out.

08:29.920 --> 08:30.460
You know what?

08:30.460 --> 08:32.200
Let's retest the get request.

08:32.620 --> 08:33.670
Everything still working?

08:33.670 --> 08:34.520
Just fine.

08:34.540 --> 08:37.750
Let's test the post request this time.

08:37.750 --> 08:40.320
We'll make sure the name is blank as well.

08:40.330 --> 08:41.560
Send it over.

08:41.980 --> 08:44.170
And this is awesome.

08:44.290 --> 08:50.980
As we pass in a blank name and a blank phone number, our binding result is going to have two errors

08:50.980 --> 08:57.820
where appending two strings inside of our errors list, we're creating a new error response, passing

08:57.820 --> 09:00.250
in that array list of two elements.

09:00.520 --> 09:07.360
Spring Boot is going to serialize the properties of this Java object into JSON, such that this list

09:07.360 --> 09:12.040
is converted to a JSON array type that contains each element.

09:12.350 --> 09:13.390
All right.

09:13.390 --> 09:16.960
And I believe this wraps up workbook 8.3.
