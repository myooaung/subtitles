WEBVTT

00:00.300 --> 00:02.730
Hello and welcome to Workbook 3.3.

00:02.730 --> 00:06.360
And this one, we're going to create a custom constraint annotation.

00:06.450 --> 00:14.220
In fact, we'll be creating to one annotation will be used to prevent the user or to prevent users that

00:14.220 --> 00:17.160
are under 18 from signing up to our platform.

00:17.460 --> 00:25.560
And another annotation will prevent the client from inputting a username that has special characters

00:25.560 --> 00:27.240
or uppercase characters.

00:27.390 --> 00:31.050
This is, I'm guessing, going to be one of the longer workbooks.

00:31.050 --> 00:36.630
So let's just jump straight into task number one, which is to create an annotation named Age.

00:36.630 --> 00:39.450
I'll stop right there and create an annotation.

00:41.990 --> 00:48.950
Called Edge Java and to define any annotation in Spring Boot, you just got to use the at interface

00:48.950 --> 00:52.220
keyword and right now we have an annotation.

00:52.220 --> 00:57.530
It's as simple as that, but right now our annotation doesn't do anything.

00:57.530 --> 00:59.840
It's just a skeleton, if you will.

01:00.170 --> 01:02.840
So the annotation will be applied at the field level.

01:02.840 --> 01:04.700
We have to specify the target.

01:04.700 --> 01:09.470
It will be retained runtime and it's going to carry a default message of invalid age.

01:09.470 --> 01:15.410
And from the cheat sheet we have to copy the obligatory groups and payload parameters needed for constraint

01:15.410 --> 01:16.400
annotations.

01:16.400 --> 01:19.730
So here we'll say.

01:20.400 --> 01:22.530
At Target.

01:23.530 --> 01:25.930
And the target is going to be fields.

01:25.930 --> 01:28.690
We're going to apply this annotation to Fields.

01:29.590 --> 01:34.210
The retention will be runtime as we did before.

01:34.840 --> 01:43.450
And let's go ahead and define this as a constraint that is going to be connected to a validator class.

01:45.920 --> 01:51.980
So the logic that this constraint is going to use will be implemented inside of a validator.

01:52.680 --> 01:57.090
And we've yet to actually define this class, so ignore the error for now.

01:57.240 --> 02:01.680
The next step was to define your message groups and payload parameters.

02:01.680 --> 02:06.750
That is something that you can just grab from your cheat sheet that I will do right now.

02:07.050 --> 02:08.970
I'm grabbing it from a different screen.

02:09.810 --> 02:10.950
All right.

02:10.950 --> 02:12.750
Import the payload.

02:15.810 --> 02:21.000
And these are just the boilerplate parameters that you would need to include in any constraint annotation.

02:21.030 --> 02:23.190
I wouldn't put too much thought into it.

02:23.190 --> 02:28.710
And to get rid of this error, let's go ahead and create the Age Validator class.

02:30.410 --> 02:31.580
The Age validator.

02:31.580 --> 02:37.970
For it to validate constraints, it needs to implement the constraint validator interface.

02:38.300 --> 02:44.030
The first thing you have to pass in is the annotation type, followed by what type of value are you

02:44.030 --> 02:44.870
validating?

02:44.870 --> 02:47.810
In this case, it's going to be a date.

02:48.980 --> 02:54.530
And now if we override the is valid method that is defined in this interface.

02:55.640 --> 02:59.840
You'll notice that it's already focused on validating a data value.

03:00.260 --> 03:05.120
So when a post request is made, let's just go through the process.

03:05.950 --> 03:11.080
When a post request is made, it's going to be carrying the payload from the form.

03:11.920 --> 03:15.610
Spring Boot creates a user object using your empty constructor.

03:15.610 --> 03:20.260
It's going to populate every single field in that object with a value.

03:20.260 --> 03:28.390
As the object is being populated, it's going to validate each field and as it's about to validate your

03:28.390 --> 03:33.340
data field, it's going to use the validation logic that's connected to your age.

03:33.340 --> 03:39.880
Annotation So the date value that was submitted by the user will come here and here we can check if

03:39.880 --> 03:41.530
the user is over 18.

03:41.740 --> 03:43.600
If they are, we'll return true.

03:43.600 --> 03:45.430
Otherwise we'll return false.

03:45.430 --> 03:49.000
If you look back at the article, there should be logic already there.

03:49.000 --> 03:50.800
We don't have to reinvent the wheel.

03:51.310 --> 03:52.560
Do we have to import data?

03:52.570 --> 03:53.320
It's already there.

03:53.320 --> 03:53.950
Cool.

03:54.100 --> 03:57.040
So now we can say return.

03:57.890 --> 03:58.790
Age.

03:59.380 --> 04:02.320
Is bigger than 18.

04:03.920 --> 04:10.180
So if this returns true, then there won't be any errors in the binding result.

04:10.190 --> 04:15.950
But if this returns false, then our binding result will carry an error for the date of birth fields.

04:16.900 --> 04:24.760
And here I cheat to say constraint is validated by h validator class import time unit.

04:25.810 --> 04:27.580
All right, no more errors.

04:27.580 --> 04:31.180
And I think we're ready to test this out.

04:31.540 --> 04:32.590
Let's run.

04:40.630 --> 04:40.930
Now.

04:40.930 --> 04:44.770
By all means, feel free to run this application in debug mode.

04:44.770 --> 04:50.530
Put some breakpoints here and you'll see that spring boot is going to be using your is valid method

04:50.530 --> 04:55.300
to validate the date field that gets passed in, which is really cool.

04:55.300 --> 05:01.360
But since we already covered this in the lessons, I won't do that now in the interest of time.

05:02.680 --> 05:06.380
So here I'll say Arthur Pendragon, King Arthur.

05:06.400 --> 05:10.210
Normal email, but they're going to be under 18.

05:12.800 --> 05:15.770
And it returns success, weirdly enough.

05:16.160 --> 05:19.850
Return age is bigger than a teen.

05:20.210 --> 05:22.340
The age was smaller than a teen.

05:22.340 --> 05:23.660
So what happened?

05:24.080 --> 05:24.420
Hmm.

05:29.600 --> 05:32.510
Let's apply some breakpoints that this even get hit.

05:37.480 --> 05:40.240
I did apply the age annotation.

05:46.330 --> 05:47.020
Okay.

05:47.140 --> 05:48.280
We'll go back here.

05:51.420 --> 05:51.820
We'll see.

05:51.840 --> 05:52.650
Arthur.

05:54.430 --> 05:56.200
Dragon King Arthur.

05:57.500 --> 05:58.970
Let's give a random date.

06:01.700 --> 06:03.110
It does reach here.

06:06.800 --> 06:07.460
Okay.

06:08.360 --> 06:09.710
What is the age?

06:09.740 --> 06:10.640
The age?

06:10.640 --> 06:12.260
It says the age is zero.

06:12.710 --> 06:15.440
Zero is not bigger than 18.

06:15.440 --> 06:17.270
So this should return false.

06:23.760 --> 06:24.140
Huh?

06:24.300 --> 06:26.430
It randomly works now.

06:27.380 --> 06:29.600
Well, you can't write this stuff.

06:30.740 --> 06:31.670
Anyways.

06:41.360 --> 06:45.920
All right, anyways, let me just make sure I didn't miss any steps.

06:46.070 --> 06:52.730
I did miss a step in task two, telling us to apply the annotation and override the default message.

06:52.820 --> 06:57.020
The annotation is something I've already applied, but back here.

06:57.920 --> 06:59.120
I can say.

07:02.760 --> 07:06.390
Message is equal to must be at least 18.

07:08.240 --> 07:09.440
Will it override it?

07:09.470 --> 07:10.430
Let's try it out.

07:13.610 --> 07:14.390
It does.

07:14.400 --> 07:15.110
Beautiful.

07:15.950 --> 07:18.680
Now let's make Arthur.

07:20.370 --> 07:21.450
Over 18.

07:23.270 --> 07:26.900
I mean, he's really 1500 years old, but we won't travel that far.

07:27.590 --> 07:29.960
Let's say February 1939.

07:31.280 --> 07:31.970
Beautiful.

07:33.010 --> 07:33.880
All right.

07:35.920 --> 07:40.840
Task four is the username cannot contain any special characters.

07:40.840 --> 07:45.970
So what we'll do is create another annotation for the username.

07:48.460 --> 07:52.780
And what I'll do before anything is place these inside the same folder.

07:54.630 --> 07:57.000
Or we'll create a new folder called Validation.

07:59.220 --> 08:01.170
I'll put the age inside of it.

08:05.050 --> 08:07.540
Put the age validator and the username.

08:08.910 --> 08:12.330
Make sure to agree to the refactoring changes.

08:12.360 --> 08:15.210
That way you don't have to redo the imports yourself.

08:15.210 --> 08:16.680
It does it automatically.

08:17.730 --> 08:24.630
And we need to define this as an annotation that we're going to apply at the field level.

08:24.720 --> 08:27.420
At Target will be field.

08:27.690 --> 08:30.210
Their attention will be runtime.

08:33.880 --> 08:42.100
And this is a constraint that will be validated by username validator class.

08:44.550 --> 08:51.630
All right, copy the boilerplate message groups and payload parameters.

08:51.630 --> 08:53.370
Import the payload.

08:54.090 --> 08:57.750
And now we can create our username validator.

09:01.790 --> 09:07.520
For this to be able to validate constraints, it must implement the validation interface or sorry,

09:07.520 --> 09:09.800
the constraint validator interface.

09:10.190 --> 09:16.880
The first thing you have to pass in is the annotation that it will be validating and what type of value

09:16.880 --> 09:18.230
are you validating in this case?

09:18.230 --> 09:19.820
It's going to be a string.

09:20.030 --> 09:25.790
So as soon as you implement the constraint validator interface, Spring Boot is going to recognize this

09:25.790 --> 09:31.910
as a constraint validator, which means as it goes to start validating our user name.

09:35.910 --> 09:40.500
Then what it's going to do is use this as valid method to do so.

09:41.160 --> 09:43.530
And here we're going to return.

09:43.530 --> 09:44.070
True.

09:44.070 --> 09:51.860
If the string value that was inputted doesn't contain any special characters or uppercase characters,

09:51.870 --> 09:55.440
we can do that by using the following code.

09:59.050 --> 10:02.020
Import the right classes.

10:09.130 --> 10:11.350
I must have imported the wrong thing.

10:16.540 --> 10:17.470
Mature.

10:19.130 --> 10:20.270
This should be Java.

10:20.510 --> 10:22.910
You tell rejects, not log back.

10:23.450 --> 10:30.050
Since we're dealing with rejects expressions regular expressions matures.

10:30.380 --> 10:31.310
Find.

10:33.520 --> 10:34.470
It should be mature.

10:34.480 --> 10:37.240
I will update the learn the part article soon.

10:37.600 --> 10:44.860
So what this will do is it will return false if the characters are between A to Z or is 0 to 9 A to

10:44.860 --> 10:49.060
Z being lowercase if the characters are valid.

10:49.060 --> 10:57.070
So what we need to do is return the opposite of what this evaluates to by putting a not operator.

10:58.190 --> 11:04.370
So in this case, if the values are valid, then this expression will return true.

11:04.400 --> 11:06.950
There will be no error in the binding result.

11:06.950 --> 11:13.280
If invalid, this whole thing will return false and the binding result will register an error for the

11:13.280 --> 11:14.870
user name field.

11:15.440 --> 11:16.340
OC.

11:17.100 --> 11:20.130
I think we're all done here.

11:23.930 --> 11:27.020
Let's just run our app or test our app.

11:28.980 --> 11:31.170
We'll say Arthur Pendragon.

11:31.350 --> 11:35.100
I'll put an uppercase character here.

11:37.480 --> 11:38.830
Arthur Pendragon.

11:43.580 --> 11:44.900
Make him over 18.

11:52.240 --> 11:53.620
Invalid age.

11:54.340 --> 11:55.300
Silly me.

11:57.820 --> 11:59.950
Invalid username.

12:01.950 --> 12:06.660
And we're going to override this default.

12:07.940 --> 12:08.960
Message.

12:12.230 --> 12:13.220
And say.

12:14.650 --> 12:17.030
Cannot contain.

12:17.050 --> 12:17.470
You know what?

12:17.470 --> 12:18.820
Let's get it right from learn.

12:18.820 --> 12:23.170
The parts cannot contain special or uppercase characters.

12:27.840 --> 12:28.530
All right.

12:30.750 --> 12:32.190
Let's try resubmitting that.

12:33.590 --> 12:34.430
Looking good.

12:34.550 --> 12:36.920
Now I'll say Arthur Pendragon.

12:39.510 --> 12:42.420
But I will add a special character like so.

12:43.700 --> 12:46.010
And it does not allow special characters either.

12:47.380 --> 12:49.720
And that is all for Workbook 3.3.

12:49.720 --> 12:51.480
I really hope you enjoyed it.

12:51.490 --> 12:57.670
If you were able to follow along so far, then the upcoming challenge should be a breeze for you.
