WEBVTT

00:00.270 --> 00:04.260
Let's just jump right into it and write some integration tests.

00:04.350 --> 00:09.840
Now, before anything, we need to identify the type of web requests that can be made.

00:10.200 --> 00:11.310
There are three.

00:11.730 --> 00:17.730
A get request can be made on an empty path, and that request can include an ID parameter.

00:17.760 --> 00:19.590
A get request can be made on handle.

00:19.590 --> 00:20.430
Submit.

00:20.730 --> 00:26.940
Looking back, I should have called the handler method handle, submit and called and specified a path

00:26.940 --> 00:28.170
of submit form.

00:28.560 --> 00:32.310
I don't know why I got that backwards, but anyway, let's just roll with what we have.

00:32.340 --> 00:34.200
Doesn't really matter all that much.

00:34.440 --> 00:38.100
And we have another web request that is made on slash grades.

00:39.730 --> 00:44.260
So step one is going to be to perform a mock request that simulates a Web request.

00:44.290 --> 00:49.170
And step two is going to be to make assertions with respect to the model view and status.

00:49.180 --> 00:55.270
As the test maps, the entire request and response lifecycle, the assertions will verify if different

00:55.270 --> 00:57.970
parts of your app were interacting as they should.

00:58.330 --> 01:00.010
So let's start with step one.

01:00.010 --> 01:04.240
First, we will perform a mock request on the empty path.

01:05.450 --> 01:08.300
And include an ID parameter in that request.

01:08.510 --> 01:09.680
So over here.

01:10.550 --> 01:17.150
Instead of running the app and going on local host AT&amp;T, we're going to create an integration test,

01:17.540 --> 01:19.030
public void.

01:19.040 --> 01:26.780
And this test is going to verify that great form behaves correctly as it handles web requests made on

01:26.780 --> 01:27.680
an empty path.

01:27.680 --> 01:33.110
So I'll call this test show grade form.

01:40.170 --> 01:43.710
And now I can build a mock request using a request builder.

01:43.950 --> 01:55.830
I can say request builder request is equal to mock MVC request builders dot get and we're going to make

01:55.830 --> 02:01.410
a get request on an empty path and include an ID equals to one, two, three.

02:02.250 --> 02:03.180
All right.

02:03.450 --> 02:09.870
Now, the ID you pass in doesn't really matter, because the handler method is going to call grade service,

02:10.110 --> 02:14.160
get grade by ID, which is capable of handling invalid IDs.

02:14.460 --> 02:19.360
But now we can use mock MVC to perform a mock request.

02:19.380 --> 02:24.420
I can say mock MVC upper form, and it's going to make a request.

02:27.890 --> 02:30.710
I called this request builder, let me call it request.

02:30.800 --> 02:32.180
That's more intuitive.

02:32.450 --> 02:38.840
And I think this is beautiful because we're able to mock a get request without actually running the

02:38.840 --> 02:41.510
application and going on localhost, 80, 80.

02:41.900 --> 02:47.450
The test is going to traverse all of the applications layers starting from the controller, which is

02:47.450 --> 02:52.330
kind of call upon the great service, which is going to call upon the repository.

02:52.340 --> 02:56.000
So this test is going to travel all of our applications layers.

02:56.000 --> 02:57.710
Which brings us to step two.

02:57.740 --> 03:01.640
You need to make assertions with respect to the model view and status.

03:01.640 --> 03:07.040
The assertions will verify if components across all layers of your app are working as they should.

03:09.020 --> 03:13.050
The reason we have an error is because this throws a checked exception.

03:13.070 --> 03:15.720
Let's just say throws exception here and get rid of it.

03:15.740 --> 03:16.570
All right.

03:16.580 --> 03:21.650
And now after making the request, I expect the status.

03:23.410 --> 03:24.610
To be successful.

03:28.570 --> 03:35.560
I always have trouble importing the status, so I'm just going to leave you this import inside of your

03:35.560 --> 03:36.760
resources folder.

03:36.940 --> 03:38.830
You can grab it and copy it.

03:39.400 --> 03:42.520
Anyways, I expect the status to be successful.

03:44.620 --> 03:47.020
I expect the view that's returned.

03:49.660 --> 03:51.090
This isn't importing either.

03:51.100 --> 03:51.640
You know what?

03:51.640 --> 03:55.900
Let's just import everything from mock MVC result matches.

03:57.480 --> 04:00.930
I expect the view returned to be named form.

04:03.780 --> 04:06.300
And I expect the model.

04:07.170 --> 04:08.700
To have an attribute.

04:09.830 --> 04:11.660
A tribute exists.

04:12.960 --> 04:14.280
Called Grade.

04:16.030 --> 04:19.600
This is the object that's going to back our forum data.

04:19.990 --> 04:22.180
Now I can run my integration test.

04:32.440 --> 04:33.440
And it passes.

04:33.460 --> 04:39.280
Now I have confidence that the app can successfully handle get requests made on an empty path.

04:40.810 --> 04:41.710
All right.

04:44.740 --> 04:50.730
Next thing we're going to do is perform a mock request on the path handle submit.

04:50.740 --> 04:55.400
The next test we write will validate the life cycle of a successful submission.

04:55.420 --> 05:01.120
So I'll go back and create an integration test that is capable of making post requests.

05:01.120 --> 05:06.520
I will call the Integration Test Test successful submission.

05:09.860 --> 05:11.870
Let's just throw the exception right now.

05:17.580 --> 05:21.750
As before, you can build a mock request using the request builder.

05:21.780 --> 05:26.350
Request Builder request is equal to mock MVC.

05:26.370 --> 05:34.050
Request Builder's dot post because it will be making a post request and the post request will be made

05:34.050 --> 05:35.280
on the path.

05:36.240 --> 05:37.770
And I'll submit.

05:38.280 --> 05:42.500
I really wish I had called this submit form because that would make a lot more sense.

05:42.510 --> 05:47.490
But anyways, the handler method for handle submit.

05:48.430 --> 05:51.340
It expects a valid grade object.

05:51.340 --> 05:56.920
So by default this handler method, it will create a grade object using your empty constructor, but

05:56.920 --> 06:02.320
then it needs to update every single field in that object with payload from the post request.

06:02.320 --> 06:08.680
So we still need to pass in the name, the subject and the score fields right here.

06:08.800 --> 06:13.900
And we can do that by saying dot param, we need to pass in a name.

06:17.480 --> 06:18.920
Uh, we'll say Harry.

06:22.840 --> 06:24.490
Pass in a subject.

06:29.100 --> 06:30.630
Let's say potions.

06:32.320 --> 06:35.740
And passing a score.

06:37.170 --> 06:38.580
What's, say, C-minus.

06:40.680 --> 06:46.170
Now, just like we did with the form and make sure the parameters you pass into the post request match

06:46.170 --> 06:47.730
the fields of your pod.

06:47.740 --> 06:51.600
So now we can use mock MVC to perform the post request.

06:51.600 --> 06:53.520
I'll say Mock MVC.

06:54.690 --> 06:56.070
Dot perform.

06:56.100 --> 06:58.440
It will perform the post request.

06:59.630 --> 07:04.370
Now, by the end of this Post request, we expect a redirection.

07:05.150 --> 07:08.960
Now let's just say that we make the post request and it's successful.

07:09.410 --> 07:11.630
The great object is going to be valid.

07:11.660 --> 07:17.650
The binding result won't have any errors, so we expect a redirection by the very end.

07:17.660 --> 07:22.340
So here we'll say and expect status.

07:23.130 --> 07:24.090
Dot.

07:25.860 --> 07:27.390
Is redirection.

07:28.270 --> 07:29.200
Run the test.

07:37.030 --> 07:38.080
And it passes.

07:38.080 --> 07:38.740
Beautiful.

07:40.450 --> 07:40.860
All right.

07:40.860 --> 07:45.330
And then we can say we expect the redirected URL.

07:46.430 --> 07:47.300
To be.

07:49.000 --> 07:50.770
Like, Great.

07:51.220 --> 07:52.360
Yeah, it's not great.

07:52.390 --> 07:53.170
Of course it is.

07:57.070 --> 07:57.490
All right.

07:57.490 --> 07:59.050
If both of these pasts.

08:06.160 --> 08:13.450
Now I'm confident that if the user enters valid data, the application will respond appropriately by

08:13.450 --> 08:15.520
redirecting them to the grade's view.

08:16.450 --> 08:19.580
Now, what if the user enters invalid data?

08:19.600 --> 08:21.610
How is our app going to behave?

08:21.790 --> 08:24.040
Once again, we can use an integration test.

08:24.040 --> 08:29.860
We'll say public void test, unsuccessful submission.

08:32.160 --> 08:33.390
Heroes exception.

08:37.790 --> 08:38.450
Oops.

08:41.640 --> 08:45.600
This test will validate the life cycle of an unsuccessful submission.

08:45.720 --> 08:49.680
And as before, you can build a mock request using a request builder.

08:50.130 --> 08:57.480
Let's say request builder request is equal to mock MVC request builders.

09:01.460 --> 09:02.210
Post.

09:03.500 --> 09:06.950
We're going to make a post request on handle submit.

09:12.970 --> 09:13.480
All right.

09:13.480 --> 09:18.880
And we're going to pass parameters into the post request, but they're going to be invalid.

09:19.180 --> 09:20.680
So we'll say.

09:21.550 --> 09:28.750
Blank, blank and will put in an invalid grade of our plus and let's perform the post request play mock

09:28.750 --> 09:30.700
MVC perform request.

09:31.150 --> 09:36.220
And upon performing this request, we expect.

09:37.200 --> 09:39.150
The grade to be invalid.

09:39.270 --> 09:41.670
The binding result is going to have errors.

09:41.700 --> 09:44.070
The view returned will be the form.

09:45.630 --> 09:46.440
So.

09:47.530 --> 09:50.530
The status is still going to be 200 successful.

09:51.570 --> 09:59.760
However, the view returned is going to be the form, and if the form is returned, and that's a clear

09:59.760 --> 10:06.690
indication that our handler method did not accept the user's garbage data and it prompted them to go

10:06.690 --> 10:09.010
back and resubmit it.

10:09.030 --> 10:11.820
So let's run this integration test.

10:20.940 --> 10:22.470
And our test passes.

10:22.530 --> 10:29.790
Now, I'm fully confident that my post mapping can correctly handle successful and unsuccessful submissions.

10:30.840 --> 10:36.270
The last thing we're going to mock is a request on slash grades as before.

10:36.570 --> 10:42.780
I will create an integration test public void, and I'm going to call it.

10:43.580 --> 10:45.440
Test get grades.

10:47.500 --> 10:48.730
Heroes exception.

10:56.140 --> 11:01.210
Like always, I will make build a mock request using the request builder.

11:03.230 --> 11:12.200
Is equal to mock MVC request builders do dot get and I will make a get request on grades.

11:12.230 --> 11:15.380
Now we can use mock MVC to perform the get request.

11:15.380 --> 11:17.540
Mock MVC dot perform.

11:20.350 --> 11:21.370
All right.

11:22.230 --> 11:28.140
Again, this is beautiful how we're able to simulate a get request without actually running the application

11:28.140 --> 11:29.580
and going on local host.

11:29.820 --> 11:33.450
Anyways, now we're going to make assertions with respect to the model view and status.

11:33.450 --> 11:40.920
So by the end of the request and response, what we're expecting is a status of 200.

11:46.520 --> 11:49.430
The view returned must be grades.

11:56.300 --> 12:01.190
And the model must contain a grade's attribute model.

12:02.250 --> 12:03.900
Attribute exists.

12:05.460 --> 12:10.050
Grades because that grades attribute is needed to populate the grades table.

12:24.290 --> 12:26.690
And if you're on this test, it passes.

12:26.870 --> 12:33.370
This gives me a lot of confidence that a request made on the path slash grades will return the right

12:33.410 --> 12:35.150
view and the right data.

12:35.510 --> 12:41.300
With this last test, we successfully validated the interaction of different layers in the app.

12:41.810 --> 12:48.110
We mocked every web request the user can make, and by the end of the request response lifecycle, as

12:48.110 --> 12:53.630
it traversed all of the applications layers, we verified the model, we verified the view, and we

12:53.630 --> 12:55.130
verified the status.
