WEBVTT

00:00.720 --> 00:03.990
Before we do anything else, we need to set up the course entity.

00:04.230 --> 00:05.940
Most of this is going to be review.

00:05.940 --> 00:12.000
So by virtue of just marking our class with the entity annotation, this class is going to map to a

00:12.000 --> 00:20.490
table and using the table annotation, we can specify the name of that table, which is going to be

00:20.500 --> 00:21.300
course.

00:21.630 --> 00:23.490
All right, we've set up our table.

00:23.490 --> 00:27.510
Now let's map each field to an appropriate column name.

00:27.510 --> 00:33.750
So the column annotation is going to map a field to a column.

00:34.380 --> 00:42.750
We'll call the column for this one ID This one will map to a column of subject knowable equals false.

00:45.270 --> 00:48.390
This one will map to a column of code.

00:50.110 --> 00:51.400
And description.

00:54.320 --> 01:01.190
The field that maps to our primary key column must be assigned the at ID annotation.

01:01.370 --> 01:07.580
Whenever we create a new course, the identity of that course needs to be auto generated, and we're

01:07.580 --> 01:15.650
going to auto generate our value using the generated value annotation with a strategy of generation

01:15.650 --> 01:17.480
type dot identity.

01:18.670 --> 01:19.790
Looking good so far.

01:19.810 --> 01:20.740
Nothing new.

01:21.960 --> 01:27.810
And now, instead of an all ARGs constructor, we're going to define a required ARGs constructor.

01:27.990 --> 01:30.670
Notice that at first we get an error.

01:30.690 --> 01:37.410
That's because the No ARGs constructor is an empty constructor and we didn't specify any fields as required.

01:37.410 --> 01:40.050
So this is going to be an empty constructor as well.

01:40.050 --> 01:42.820
It assumes duplication, which is why we get an error.

01:42.840 --> 01:48.720
What we'll have to do is specify the subject code and description as non null.

01:49.540 --> 01:51.310
Or non nulla, I should say.

01:55.480 --> 02:00.280
So during the creation of the course object, they must be given a value.

02:00.280 --> 02:02.830
They are, quote unquote, required.

02:03.490 --> 02:06.700
Now, I'm not really sure why it's doing this.

02:06.700 --> 02:08.230
This is kind of weird.

02:08.530 --> 02:09.610
And you know what?

02:09.610 --> 02:16.600
I'm not really a big fan of inlay hints to begin with, so I'm going to go over to my preferences.

02:16.690 --> 02:20.170
If you're using Windows and this happens, go to your file then preferences.

02:20.170 --> 02:22.540
So I'll go to my preferences and settings.

02:23.080 --> 02:25.930
I will type inlay in the search.

02:26.810 --> 02:29.270
And disable in Lance.

02:30.920 --> 02:31.600
All right.

02:31.610 --> 02:32.600
And it's gone.

02:33.020 --> 02:33.440
All right.

02:33.440 --> 02:36.650
So now our constructor will expect three values.

02:36.710 --> 02:42.090
Right now, we have a CRUD repository that can persist, update and delete students.

02:42.110 --> 02:45.570
We have one that can persist, update and delete grades.

02:45.590 --> 02:48.890
Now we need a crowd repository that can manage course entities.

02:48.890 --> 02:50.270
So let's set that up.

02:50.270 --> 02:53.720
I'm just going to copy what we have over here because I am pretty lazy.

02:56.640 --> 03:00.300
We'll call this course repository.

03:00.960 --> 03:03.690
It's going to manage course entities.

03:03.960 --> 03:07.110
And we do not need any specialized queries in here.

03:07.770 --> 03:08.430
Looks good.

03:08.430 --> 03:09.680
Public interface.

03:09.690 --> 03:10.590
All right.

03:11.040 --> 03:15.330
So an implementation of this interface will automatically be created by spring.

03:15.360 --> 03:21.900
That being will live inside the spring container and you can auto wire the course repository bean.

03:22.050 --> 03:23.900
Actually, we don't need to auto wire it.

03:23.910 --> 03:26.020
We can just define the field.

03:26.040 --> 03:26.460
Of course.

03:26.460 --> 03:27.510
Repository.

03:27.720 --> 03:29.400
Course, repository.

03:30.340 --> 03:34.900
And all our constructor is going to generate a constructor using all fields.

03:35.230 --> 03:39.940
Spring is going to inject any beans into that constructor, which in turn will update your field and

03:39.940 --> 03:41.680
perform your dependency injection.

03:42.520 --> 03:49.270
So the CRUD repository will recall offers a save method, which we're going to use inside of our core

03:49.280 --> 03:50.680
service implementation.

03:51.050 --> 03:57.490
We'll say course, repository, dot, save whatever course that gets passed in and now we'll go back

03:57.490 --> 03:58.840
inside the controller.

04:01.100 --> 04:07.730
Inside of a safe course, we will say, let me define the core service field over here.

04:08.030 --> 04:13.220
Of course, service core service dependency injection will happen automatically.

04:13.220 --> 04:15.380
So now I can just say core service.

04:18.300 --> 04:19.380
I'd say, of course.

04:19.380 --> 04:20.130
Over here.

04:20.700 --> 04:21.540
Looking good.

04:22.140 --> 04:24.780
I can now run my app and make a post request.

04:39.890 --> 04:40.280
Okay.

04:40.280 --> 04:40.910
No errors.

04:40.910 --> 04:42.080
We're looking good.

04:42.320 --> 04:44.300
I'm going to save.

04:45.800 --> 04:48.940
I believe our post payload in order to be set up.

04:50.410 --> 04:52.510
I will send over this course.

04:54.290 --> 04:56.530
And it creates a new course in our database.

04:56.540 --> 04:58.130
Let me just make sure of that.

04:59.150 --> 05:00.110
Press run.

05:03.550 --> 05:09.850
I'm going to query the students first, followed by the grades, followed by the courses.

05:12.390 --> 05:12.840
Beautiful.

05:12.840 --> 05:15.150
We've got four students and one course.

05:15.150 --> 05:16.890
Everything looks good so far.

05:17.340 --> 05:22.560
Now, before we set up the logic for deleting a course, please download the text file that's inside

05:22.560 --> 05:24.030
of your resources folder.

05:29.030 --> 05:29.450
All right.

05:29.450 --> 05:35.360
I'm assuming you did that inside of your run method.

05:35.900 --> 05:38.240
Copy and paste the code that I gave you.

05:40.940 --> 05:44.390
Loop through all of the course entities as we did over here.

05:44.840 --> 05:47.280
Let's just copy this over courses.

05:47.300 --> 05:50.120
Dot length here we'll say course suppository.

05:50.120 --> 05:50.480
Oh.

05:52.480 --> 05:53.240
And you know what?

05:53.260 --> 05:55.060
Let's just auto wire it as well.

05:56.020 --> 06:00.250
We're going to be removing this code at some point eventually once we deploy our app.

06:02.380 --> 06:02.990
So we'll see.

06:03.010 --> 06:04.660
Course repository.

06:06.010 --> 06:09.460
Dot save whatever courses are inside this array.

06:11.110 --> 06:13.960
So now every time we run our app.

06:15.120 --> 06:20.730
It should populate our database with four students and seven courses.

06:23.720 --> 06:24.470
Looking good.

06:24.890 --> 06:31.670
Now we can set up the logic for deleting a course, so I'll go over to my core service implementation.

06:32.390 --> 06:35.150
Here we will say course repository.

06:36.690 --> 06:44.040
Di delete by ID whatever idea that gets passed in inside of my course controller.

06:45.100 --> 06:50.500
In, say, core service, delete course, buy whatever ID that gets passed in.

06:52.370 --> 06:53.570
Let's try it out.

06:53.600 --> 06:59.060
I will go back here and delete the course that has an idea of one.

06:59.060 --> 07:01.040
So charms.

07:05.640 --> 07:06.030
Here.

07:06.030 --> 07:12.840
It says local host 88 student It should say course, so please make sure to fix that if you happen to

07:12.840 --> 07:15.510
use the same collection as me.

07:22.400 --> 07:23.270
Have a look.

07:25.670 --> 07:26.430
And it deletes it.

07:26.450 --> 07:27.110
Beautiful.

07:27.140 --> 07:33.350
Before we wrap up, we just have two more requests to handle and get course and get courses.

07:33.770 --> 07:35.870
So going back over here.

07:37.350 --> 07:44.310
The crowd repository offers a fine by ID method that we can use to find our course.

07:44.820 --> 07:46.740
Oh, don't forget your doth get.

07:48.120 --> 07:55.260
And over here what we can do is set course repository dot to find all that's going to return all entities

07:55.260 --> 07:56.560
in an iterable.

07:56.580 --> 07:59.550
Let's typecast that iterable to a list.

08:01.480 --> 08:02.620
Returning that.

08:05.800 --> 08:06.060
Okay.

08:06.100 --> 08:09.370
Now, back inside of the course controller.

08:09.790 --> 08:12.490
I will finalize all of these methods here.

08:12.490 --> 08:13.420
I will say.

08:15.430 --> 08:16.700
Course service.

08:18.170 --> 08:19.250
Dot.

08:19.970 --> 08:20.620
Um.

08:22.770 --> 08:23.700
Get course.

08:27.540 --> 08:28.710
And here I will say.

08:30.060 --> 08:33.000
Course, service did get courses.

08:35.400 --> 08:40.410
And here I seem to have the wrong return type.

08:40.530 --> 08:47.970
This should be returning a list of courses that eventually get serialized into a JSON collection, not

08:47.970 --> 08:49.110
just a course.

08:51.040 --> 08:52.300
We're looking good now.

09:03.260 --> 09:07.370
First, I'm going to get the course with an idea for history of magic.

09:07.700 --> 09:10.370
So I will go on read course.

09:11.190 --> 09:15.840
Get the course of an idea for that works perfectly.

09:15.990 --> 09:18.660
Now I'm going to get all of the courses.

09:19.870 --> 09:23.370
And it grabs every single course from our SQL database.

09:23.380 --> 09:25.380
That is looking very good.

09:25.390 --> 09:31.960
We didn't do anything new in this video, but we're basically setting ourselves up for the next lesson

09:31.960 --> 09:37.150
because in the next lesson there's also going to be another mini to one relationship.

09:37.150 --> 09:44.860
But between course and grade, because the existence of a grade, it only makes sense if there is a

09:44.860 --> 09:50.440
student who the grade belongs to and if there is a course that the grade is based on.

09:50.440 --> 09:54.040
So let's start setting up that relationship in the next lesson.
