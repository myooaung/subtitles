WEBVTT
ï»¿1
00:00:00.000 --> 00:00:08.900
Another powerful tool you can use to optimize for performance is child processes.

2
00:00:08.900 --> 00:00:12.070
So we're going to do that within our Seelye.

3
00:00:12.070 --> 00:00:14.890
We're going to modify one of our functions,

4
00:00:14.890 --> 00:00:16.270
one of our responders,

5
00:00:16.270 --> 00:00:20.790
to use a child process rather than the built in library that it's using.

6
00:00:20.790 --> 00:00:21.090
Now,

7
00:00:21.090 --> 00:00:23.180
as I mentioned in the section overview,

8
00:00:23.180 --> 00:00:28.780
using a child process allows you to call any other application that might be living in the

9
00:00:28.780 --> 00:00:35.010
system that you're running on and so you can think of a child process as giving you access

10
00:00:35.010 --> 00:00:36.940
to the show to the terminal.

11
00:00:36.940 --> 00:00:41.410
So any application that you could boot up and read input from If you're living in the

12
00:00:41.410 --> 00:00:42.050
terminal,

13
00:00:42.050 --> 00:00:44.460
you can access from child process.

14
00:00:44.460 --> 00:00:48.100
So what we're going to do is change.

15
00:00:48.100 --> 00:00:56.030
The responder that lists out logs to rather than using are built in Underscore Logs list

16
00:00:56.030 --> 00:00:56.630
function.

17
00:00:56.630 --> 00:00:59.150
It's going to call the shell,

18
00:00:59.150 --> 00:01:05.860
and it's just going to use the show on this system to call L s within the directory,

19
00:01:05.860 --> 00:01:08.110
where all the logs live in the wild,

20
00:01:08.110 --> 00:01:12.420
you can spawn a process to call any kind of application that you want.

21
00:01:12.420 --> 00:01:16.950
If you have some kind of compiled binary that calculates pie,

22
00:01:16.950 --> 00:01:17.860
for example.

23
00:01:17.860 --> 00:01:23.110
Then you can call that and pipe in the output back into your know J s application.

24
00:01:23.110 --> 00:01:24.750
In our simple example,

25
00:01:24.750 --> 00:01:28.500
we are just piping in the outputs of a simple shell command.

26
00:01:28.500 --> 00:01:31.550
But these really could be any commands that you can think of.

27
00:01:31.550 --> 00:01:33.080
So before we do that,

28
00:01:33.080 --> 00:01:37.720
let's go up to our dependencies and require child process.

29
00:01:37.720 --> 00:01:44.430
So I'm to say the child process equals require child underscore process.

30
00:01:44.430 --> 00:01:51.150
Now let's go back down to our list logs function to review how it works now.

31
00:01:51.150 --> 00:01:54.760
Over doing is calling our log library,

32
00:01:54.760 --> 00:01:58.060
telling it to list out the logs,

33
00:01:58.060 --> 00:02:00.580
telling it that we do want all of the logs,

34
00:02:00.580 --> 00:02:01.910
even the compressed ones,

35
00:02:01.910 --> 00:02:08.660
and then putting in a vertical space and then cycling through each of the log file names in

36
00:02:08.660 --> 00:02:11.950
the result into Ray and logging them to the council,

37
00:02:11.950 --> 00:02:14.500
each followed by a vertical space.

38
00:02:14.500 --> 00:02:20.650
So we're going to do this exact same thing is this that we're going to get the array of

39
00:02:20.650 --> 00:02:25.340
file names directly from the shell instead of from our built in library.

40
00:02:25.340 --> 00:02:26.940
So for now,

41
00:02:26.940 --> 00:02:34.150
I'm just going to move this section of the code down here on the assumption that we are

42
00:02:34.150 --> 00:02:36.580
still going to end up with an array that we need to cycle through.

43
00:02:36.580 --> 00:02:38.510
We're going to rewrite the rest of this.

44
00:02:38.510 --> 00:02:41.190
So let's start by doing the LS.

45
00:02:41.190 --> 00:02:51.500
So I'm gonna call l s equals child process dot spawn who were responding a child process

46
00:02:51.500 --> 00:02:52.620
with the command,

47
00:02:52.620 --> 00:02:54.750
the show command ls.

48
00:02:54.750 --> 00:02:59.930
And we're telling it to execute that command within a specific working directory.

49
00:02:59.930 --> 00:03:05.430
And that working directory is going to be put inside of an array and is going to be dot,

50
00:03:05.430 --> 00:03:07.800
slash dot logs.

51
00:03:07.800 --> 00:03:15.200
Remember the name of the laws directories actually dot logs and then another slash Now we

52
00:03:15.200 --> 00:03:17.150
have this command being executed,

53
00:03:17.150 --> 00:03:19.490
but we need to pipe the output somewhere.

54
00:03:19.490 --> 00:03:20.550
So we want to say,

55
00:03:20.550 --> 00:03:25.770
ls standard out on data?

56
00:03:25.770 --> 00:03:26.860
In other words,

57
00:03:26.860 --> 00:03:31.810
every time this command starts piping data to standard out,

58
00:03:31.810 --> 00:03:33.050
let's catch it here.

59
00:03:33.050 --> 00:03:34.630
Let's bind to that.

60
00:03:34.630 --> 00:03:38.250
So it's going to call data object,

61
00:03:38.250 --> 00:03:45.210
and we are going to want to take this data object converted to a string and then split that

62
00:03:45.210 --> 00:03:46.230
string into an array.

63
00:03:46.230 --> 00:03:47.240
So we're dealing with in Ray,

64
00:03:47.240 --> 00:03:49.750
just like we used to so explode.

65
00:03:49.750 --> 00:03:54.000
Think to separate lines.

66
00:03:54.000 --> 00:04:04.670
We want to say that this string version of this object is just going to be data object to

67
00:04:04.670 --> 00:04:05.150
string.

68
00:04:05.150 --> 00:04:15.780
And then the actual log file names is going to be data string split on the new line

69
00:04:15.780 --> 00:04:16.260
character.

70
00:04:16.260 --> 00:04:25.290
Now let's go ahead and paste this part that we took out back inside so we can keep using it

71
00:04:25.290 --> 00:04:25.290
.

72
00:04:25.290 --> 00:04:31.290
We want to play in the vertical space and then for each of the long file names,

73
00:04:31.290 --> 00:04:32.500
we want to cycle through it.

74
00:04:32.500 --> 00:04:36.050
But as you're aware when you do an LS on a directory,

75
00:04:36.050 --> 00:04:41.550
it's possible that some operating system files of various kinds might be there.

76
00:04:41.550 --> 00:04:43.870
So before we log out everything,

77
00:04:43.870 --> 00:04:50.010
we want to verify that the things that were logging out really are the type of file that

78
00:04:50.010 --> 00:04:50.720
we're looking for.

79
00:04:50.720 --> 00:04:54.550
So before we log out and do the vertical space,

80
00:04:54.550 --> 00:04:56.060
let's just put in,

81
00:04:56.060 --> 00:04:57.130
and if so,

82
00:04:57.130 --> 00:05:00.220
we already check it for a dash.

83
00:05:00.220 --> 00:05:02.420
But let's make it a little bit more robust.

84
00:05:02.420 --> 00:05:15.210
We want to say if the type of log file name is a string and log file name length is greater

85
00:05:15.210 --> 00:05:15.950
than zero,

86
00:05:15.950 --> 00:05:21.500
and it has a dash just to add some extra bulletproofing here.

87
00:05:21.500 --> 00:05:26.840
If it has a dash and it is a string will assume that it's the ones that were looking for.

88
00:05:26.840 --> 00:05:30.550
So let's go ahead and start this app.

89
00:05:30.550 --> 00:05:37.120
The seal eyes open that's called the list Logs command.

90
00:05:37.120 --> 00:05:38.420
You can see it's working.

91
00:05:38.420 --> 00:05:40.630
We're listening all the same flowers as we were doing before.

92
00:05:40.630 --> 00:05:45.210
But last time we were trimming off the dodgy z dot be 64.

93
00:05:45.210 --> 00:05:49.510
So let's go ahead and do that to in our console dot log.

94
00:05:49.510 --> 00:05:58.530
Let's just call log file name dot trim and then split it on the docked and take the first

95
00:05:58.530 --> 00:05:59.960
element of the resulting array.

96
00:05:59.960 --> 00:06:01.010
In other words,

97
00:06:01.010 --> 00:06:03.860
split this whole string on the dot,

98
00:06:03.860 --> 00:06:07.140
which is going to end up as different elements in the array.

99
00:06:07.140 --> 00:06:08.830
This is going to be the first element in the ray,

100
00:06:08.830 --> 00:06:09.680
and that's all we want.

101
00:06:09.680 --> 00:06:12.750
So let's try this again.

102
00:06:12.750 --> 00:06:17.870
List logs and there we have it.

103
00:06:17.870 --> 00:06:18.920
Same output,

104
00:06:18.920 --> 00:06:20.450
as we were getting before,

105
00:06:20.450 --> 00:06:25.780
were just acquiring it in a very different way by calling in the built in LS function

106
00:06:25.780 --> 00:06:33.590
instead of our data library that used the FS functions to read all of the elements in a

107
00:06:33.590 --> 00:06:34.900
directory again.

108
00:06:34.900 --> 00:06:37.400
This is not necessarily a faster way to do it.

109
00:06:37.400 --> 00:06:43.390
I don't know that ls is any faster than the F S module would be might be the same.

110
00:06:43.390 --> 00:06:44.470
It might even be slower.

111
00:06:44.470 --> 00:06:51.280
But this is an example of how you can use commands from an alternative application or from

112
00:06:51.280 --> 00:06:54.300
the shell to take the place of something.

113
00:06:54.300 --> 00:06:58.170
You might be doing a node if that alternative is going to be faster.

114
00:06:58.170 --> 00:07:01.670
So this is something that you'd be doing as you do performance optimization.

115
00:07:01.670 --> 00:07:03.120
You know,

116
00:07:03.120 --> 00:07:08.090
we can kill this app and move on to the section review.

