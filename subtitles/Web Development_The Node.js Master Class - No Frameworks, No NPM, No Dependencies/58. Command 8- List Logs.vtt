WEBVTT
ï»¿1
00:00:00.000 --> 00:00:04.270
in this lecture.

2
00:00:04.270 --> 00:00:07.960
We want to build out the functionality for list logs.

3
00:00:07.960 --> 00:00:11.280
But if you remember many lectures back,

4
00:00:11.280 --> 00:00:15.760
we don't interact with the logs through the data library.

5
00:00:15.760 --> 00:00:20.240
We actually interact with it through a special library called Logs.

6
00:00:20.240 --> 00:00:21.230
So up here,

7
00:00:21.230 --> 00:00:22.950
where we have included the data lib.

8
00:00:22.950 --> 00:00:26.650
Let's include underscore blog's as well,

9
00:00:26.650 --> 00:00:30.350
and that's going to be at dot slash logs.

10
00:00:30.350 --> 00:00:33.210
That library is this one here,

11
00:00:33.210 --> 00:00:38.100
and the first thing that we're going to want to do to list all the logs is used.

12
00:00:38.100 --> 00:00:41.150
This lib dot list function,

13
00:00:41.150 --> 00:00:41.450
which,

14
00:00:41.450 --> 00:00:42.340
if you recall,

15
00:00:42.340 --> 00:00:43.910
only takes in one parameter,

16
00:00:43.910 --> 00:00:48.700
and that is a true or false 1,000,000,000 indicating whether or not to include the

17
00:00:48.700 --> 00:00:49.790
compressed logs.

18
00:00:49.790 --> 00:00:54.300
That is the dot gc dot be 64 logs instead of just the dot log files.

19
00:00:54.300 --> 00:00:58.450
So let's go back to the CLI and start filling in this function.

20
00:00:58.450 --> 00:00:59.720
Let's logs.

21
00:00:59.720 --> 00:01:01.940
We're going to get rid of this console dot log.

22
00:01:01.940 --> 00:01:06.200
We're going to call underscore logs dot list.

23
00:01:06.200 --> 00:01:10.650
We're gonna pass it true because we do want it to include the compressed logs,

24
00:01:10.650 --> 00:01:19.250
and we're going to expect back in the air and an array of log file names if there is no air

25
00:01:19.250 --> 00:01:21.330
and log file names is Truth,

26
00:01:21.330 --> 00:01:24.230
E and Love file names.

27
00:01:24.230 --> 00:01:25.700
Length is greater than zero.

28
00:01:25.700 --> 00:01:27.080
We're going to continue.

29
00:01:27.080 --> 00:01:30.300
Otherwise we'll do nothing before we print out anything else.

30
00:01:30.300 --> 00:01:34.050
We want to print out a vertical space to give this response some room.

31
00:01:34.050 --> 00:01:37.950
Now for each of the log file names,

32
00:01:37.950 --> 00:01:42.050
we want to cycle through them using a for each loop,

33
00:01:42.050 --> 00:01:45.950
which will give us log file name.

34
00:01:45.950 --> 00:01:51.780
But now we actually want to get rid of the logs that haven't been compressed.

35
00:01:51.780 --> 00:01:54.770
We just want to list out the logs that have.

36
00:01:54.770 --> 00:02:04.190
And so let's actually change the description that we put up here to show a list of log

37
00:02:04.190 --> 00:02:07.890
files available to be read compressed only,

38
00:02:07.890 --> 00:02:11.340
you know,

39
00:02:11.340 --> 00:02:12.710
back tour for each loop.

40
00:02:12.710 --> 00:02:19.700
We want to say if the log file name includes the string dash,

41
00:02:19.700 --> 00:02:22.150
then we want to continue.

42
00:02:22.150 --> 00:02:28.530
We're checking for the string dash because if you remember the logs here when they are

43
00:02:28.530 --> 00:02:29.240
compressed,

44
00:02:29.240 --> 00:02:34.740
they have the original log file name and then a dash and then a time stamp and then dot gc

45
00:02:34.740 --> 00:02:42.480
dot b 64 While the UN compressed logs just have the i d dot log.

46
00:02:42.480 --> 00:02:47.190
So we're going to check for the dash to make sure that we're only including the compressed

47
00:02:47.190 --> 00:02:48.680
lines in this list.

48
00:02:48.680 --> 00:02:49.880
So if it matches,

49
00:02:49.880 --> 00:02:51.920
then we want to log it out console,

50
00:02:51.920 --> 00:02:52.340
log,

51
00:02:52.340 --> 00:02:53.130
log,

52
00:02:53.130 --> 00:02:56.980
file name and then a vertical space.

53
00:02:56.980 --> 00:03:00.230
Now,

54
00:03:00.230 --> 00:03:08.880
the start of the app and try this out list looks Looks like all the logs are being listed.

55
00:03:08.880 --> 00:03:13.350
But we have some kind of issue with the name that is passing through.

56
00:03:13.350 --> 00:03:15.750
We're getting the log I d.

57
00:03:15.750 --> 00:03:18.250
And then a dash than a time stamp.

58
00:03:18.250 --> 00:03:20.930
And then the word undefined.

59
00:03:20.930 --> 00:03:23.590
There might be an issue in our log library.

60
00:03:23.590 --> 00:03:24.310
And yes,

61
00:03:24.310 --> 00:03:28.440
it looks like we just have a typo in this replace that we did.

62
00:03:28.440 --> 00:03:30.850
We have an extra parentheses in here,

63
00:03:30.850 --> 00:03:34.350
but we need to move the outer parentheses out here.

64
00:03:34.350 --> 00:03:36.650
So let's try this again.

65
00:03:36.650 --> 00:03:39.750
List logs.

66
00:03:39.750 --> 00:03:41.670
And there we go.

67
00:03:41.670 --> 00:03:45.550
We have each of the compressed logs.

68
00:03:45.550 --> 00:03:46.370
Listen out,

69
00:03:46.370 --> 00:03:48.290
one by one that's working.

70
00:03:48.290 --> 00:03:48.680
Fine.

71
00:03:48.680 --> 00:03:53.150
So let's kill this app and move on to the next lecture

