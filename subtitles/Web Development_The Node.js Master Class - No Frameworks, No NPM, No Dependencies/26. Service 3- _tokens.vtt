WEBVTT
ï»¿1
00:00:00.000 --> 00:00:06.320
The next service that we want to build is called tokens.

2
00:00:06.320 --> 00:00:10.670
Tokens are going to be the authentication mechanism for this application.

3
00:00:10.670 --> 00:00:16.390
Rather than sending a user's phone number and password with each requests and over orderto

4
00:00:16.390 --> 00:00:17.220
authenticate them,

5
00:00:17.220 --> 00:00:22.380
we're just going to have them create a token with their phone number and password and then

6
00:00:22.380 --> 00:00:26.580
use that token for any subsequent requests that would require authentication.

7
00:00:26.580 --> 00:00:31.510
So let's go ahead and create a token service on the router.

8
00:00:31.510 --> 00:00:37.650
Go back to index dot Js scroll down and we're going to add tokens,

9
00:00:37.650 --> 00:00:47.230
which is handlers dot tokens and before forget within our data folder.

10
00:00:47.230 --> 00:00:53.600
We should also create a tokens sub border the same way that we did for users here.

11
00:00:53.600 --> 00:01:01.850
So I'm going to make the directory data tokens,

12
00:01:01.850 --> 00:01:06.350
and that will be where all the tokens get stored.

13
00:01:06.350 --> 00:01:07.810
Okay,

14
00:01:07.810 --> 00:01:09.380
Now I'm gonna go back to handlers,

15
00:01:09.380 --> 00:01:12.520
and we have to create a whole bunch of tokens handlers.

16
00:01:12.520 --> 00:01:19.210
We want to go about this in the same way that we did for users where there is going to be a

17
00:01:19.210 --> 00:01:24.970
blanket handler that grabs all requests coming into tokens and then checks it against

18
00:01:24.970 --> 00:01:28.850
acceptable methods and relays it onto wherever it needs to go.

19
00:01:28.850 --> 00:01:39.320
So I'm actually going to copy the handlers users and start the tokens handlers with the

20
00:01:39.320 --> 00:01:40.650
same basic scaffolding.

21
00:01:40.650 --> 00:01:45.100
So call rename this tokens.

22
00:01:45.100 --> 00:01:51.700
Rename it handlers dot tokens is going to have the same acceptable methods post get put and

23
00:01:51.700 --> 00:01:52.160
elite.

24
00:01:52.160 --> 00:01:58.420
And it should instead of relaying to the users sub methods,

25
00:01:58.420 --> 00:02:03.150
it should relate to the tokens of methods in the same way.

26
00:02:03.150 --> 00:02:05.350
Now we need to create,

27
00:02:05.350 --> 00:02:07.050
although some methods.

28
00:02:07.050 --> 00:02:07.440
So first,

29
00:02:07.440 --> 00:02:07.750
that's great.

30
00:02:07.750 --> 00:02:08.350
A container.

31
00:02:08.350 --> 00:02:25.340
Now we can create some methods on this container.

32
00:02:25.340 --> 00:02:40.410
We'll go ahead and do ghost get put delete Do handlers tokens post because function that

33
00:02:40.410 --> 00:02:42.550
takes a data at a call back.

34
00:02:42.550 --> 00:02:45.000
No,

35
00:02:45.000 --> 00:02:51.180
I'm just gonna copy this Or to be more times,

36
00:02:51.180 --> 00:03:01.250
change this one to get change this one to put and change this one to delete.

37
00:03:01.250 --> 00:03:08.680
So let's go ahead and start building the actual post service.

38
00:03:08.680 --> 00:03:15.820
But this one we're going to say that the required data is going to be phone and password

39
00:03:15.820 --> 00:03:16.810
because remember,

40
00:03:16.810 --> 00:03:21.390
this is a user creating a token that they're going to use subsequently later.

41
00:03:21.390 --> 00:03:26.790
And so we do need the phone number and the password in order to create a token for them.

42
00:03:26.790 --> 00:03:30.150
The optional data is none.

43
00:03:30.150 --> 00:03:37.800
So let's go ahead and Parsi phone number and the password the same way that we did in the

44
00:03:37.800 --> 00:03:39.730
user's handlers.

45
00:03:39.730 --> 00:03:43.710
So let's go ahead and just steal it from there.

46
00:03:43.710 --> 00:03:44.780
From handlers.

47
00:03:44.780 --> 00:03:46.150
Users Post.

48
00:03:46.150 --> 00:03:50.170
We want the phone and password the exact same way.

49
00:03:50.170 --> 00:03:59.190
So we have the phone and password and then we want to say if phone and password continue on

50
00:03:59.190 --> 00:03:59.190
,

51
00:03:59.190 --> 00:04:03.980
otherwise we're going to call back and error to the user.

52
00:04:03.980 --> 00:04:12.150
Call that 400 tell them that the error is missing.

53
00:04:12.150 --> 00:04:14.550
Required fields.

54
00:04:14.550 --> 00:04:17.360
OK,

55
00:04:17.360 --> 00:04:19.520
but if they do have a phone number and a password,

56
00:04:19.520 --> 00:04:31.150
then we want to first look up the user who matches that phone number,

57
00:04:31.150 --> 00:04:39.310
and then we're going to have to take some more steps to match that user against the

58
00:04:39.310 --> 00:04:40.660
password that was sent.

59
00:04:40.660 --> 00:04:42.450
But first we just need to look them up.

60
00:04:42.450 --> 00:04:48.920
So we're gonna say data read this time we're reading from the user's collection with the

61
00:04:48.920 --> 00:04:50.170
phone number provided,

62
00:04:50.170 --> 00:04:55.850
and they're gonna call back and air and hopefully some user data.

63
00:04:55.850 --> 00:05:03.590
If there is not an air and there is user data we're going to continue.

64
00:05:03.590 --> 00:05:07.340
Otherwise we're going to call back in error to the user.

65
00:05:07.340 --> 00:05:17.750
400 here could not find the specified user,

66
00:05:17.750 --> 00:05:23.890
but if everything was valid now we have the user's data,

67
00:05:23.890 --> 00:05:28.870
and we need to check the password that was sent against the hashed password that stored.

68
00:05:28.870 --> 00:05:34.140
So we need to first hash the password and before we can compare it to the string that

69
00:05:34.140 --> 00:05:35.300
started the Jason file.

70
00:05:35.300 --> 00:05:50.310
So we want to hash the scent password and compare it to the password stored in the user up

71
00:05:50.310 --> 00:05:50.310
.

72
00:05:50.310 --> 00:05:52.050
So in this case,

73
00:05:52.050 --> 00:05:59.420
we want to use pretty much the same logic that we did in post users of our hash password

74
00:05:59.420 --> 00:06:00.270
equals helpers.

75
00:06:00.270 --> 00:06:01.660
That hash password.

76
00:06:01.660 --> 00:06:05.270
Pace that down here.

77
00:06:05.270 --> 00:06:13.850
Now we want to say if hash password equals user data dot hash password,

78
00:06:13.850 --> 00:06:15.200
then we have a match.

79
00:06:15.200 --> 00:06:17.360
We have a phone number and a password match.

80
00:06:17.360 --> 00:06:19.860
If it doesn't equal that,

81
00:06:19.860 --> 00:06:22.210
we gotta error out to the user.

82
00:06:22.210 --> 00:06:26.160
They cannot create a token unless they provide the right password.

83
00:06:26.160 --> 00:06:41.050
So we're gonna call back a 400 tell them air password did not match the specified users

84
00:06:41.050 --> 00:06:49.350
stored password,

85
00:06:49.350 --> 00:06:52.980
But if the hash password did match.

86
00:06:52.980 --> 00:06:58.230
Then we can go ahead and create a new token for that user that they can use for subsequent

87
00:06:58.230 --> 00:06:58.950
requests.

88
00:06:58.950 --> 00:07:01.230
We want to say,

89
00:07:01.230 --> 00:07:02.130
if valid,

90
00:07:02.130 --> 00:07:06.650
create a new token with a random name.

91
00:07:06.650 --> 00:07:18.810
Sit expiration date one hour in the future.

92
00:07:18.810 --> 00:07:25.180
So we want to say that the token I D.

93
00:07:25.180 --> 00:07:33.850
Is helpers create random string with a length of 20.

94
00:07:33.850 --> 00:07:41.120
Now you don't know what helpers dot create random string is yet because we have not created

95
00:07:41.120 --> 00:07:41.370
that.

96
00:07:41.370 --> 00:07:43.550
But we will come back to that in just second.

97
00:07:43.550 --> 00:07:44.700
Let's just say,

98
00:07:44.700 --> 00:07:51.930
for argument's sake that calling this function gives you a random string of letters and of

99
00:07:51.930 --> 00:07:52.830
the length 20.

100
00:07:52.830 --> 00:07:54.310
And so that's going to be the I.

101
00:07:54.310 --> 00:07:56.670
D of the new token that we just created.

102
00:07:56.670 --> 00:08:02.150
And we want to say that this expires now,

103
00:08:02.150 --> 00:08:05.270
plus one hour.

104
00:08:05.270 --> 00:08:12.870
So 1000 milliseconds times 60 seconds in a minute time.

105
00:08:12.870 --> 00:08:14.150
60 minutes in an hour.

106
00:08:14.150 --> 00:08:18.280
Now we want to store the new token I d.

107
00:08:18.280 --> 00:08:24.960
And the expires field as a token of so the token object that needs to be persisted to disk

108
00:08:24.960 --> 00:08:29.900
is gonna have three keys phone,

109
00:08:29.900 --> 00:08:41.050
which equals phone I D which he calls the token I D and expires which ecause the time it

110
00:08:41.050 --> 00:08:41.770
expires.

111
00:08:41.770 --> 00:08:47.970
So anyone looking at this token Comptel which user it's for by looking at phone,

112
00:08:47.970 --> 00:08:53.750
it can uniquely identify this token and it will know when it can no longer be used.

113
00:08:53.750 --> 00:08:56.540
We want to actually store the token.

114
00:08:56.540 --> 00:09:04.150
So we're gonna call data create this time we're gonna call the Tokens Collection,

115
00:09:04.150 --> 00:09:08.250
and we're gonna name this new file the same as token I d.

116
00:09:08.250 --> 00:09:11.950
We're gonna save the data as token object,

117
00:09:11.950 --> 00:09:16.080
and we're gonna get back in there.

118
00:09:16.080 --> 00:09:31.060
We want to continue on if there is no air and call back 200 the token object that we saved

119
00:09:31.060 --> 00:09:31.060
.

120
00:09:31.060 --> 00:09:36.420
If there is an air,

121
00:09:36.420 --> 00:09:37.030
however,

122
00:09:37.030 --> 00:09:47.670
we want Teoh call back 500 because it's our fault to the air equals could not create the

123
00:09:47.670 --> 00:09:49.800
new token for some reason.

124
00:09:49.800 --> 00:09:51.940
All right,

125
00:09:51.940 --> 00:09:55.980
so that's how you post two tokens.

126
00:09:55.980 --> 00:10:00.370
But now we have to create this function named create Random String.

127
00:10:00.370 --> 00:10:03.650
So let's go to the helpers file.

128
00:10:03.650 --> 00:10:14.450
We want to create a function that allows us to create a string of random Alfa Merrick

129
00:10:14.450 --> 00:10:19.080
characters of a given length.

130
00:10:19.080 --> 00:10:24.950
That's me called helpers create random string.

131
00:10:24.950 --> 00:10:30.050
The other thing that accepts is a string length.

132
00:10:30.050 --> 00:10:32.890
Let's go ahead and sanity.

133
00:10:32.890 --> 00:10:33.810
Check the string length.

134
00:10:33.810 --> 00:10:34.610
When it comes in,

135
00:10:34.610 --> 00:10:46.150
we're going to say that String Ling should be a number and should be greater than zero.

136
00:10:46.150 --> 00:10:51.720
Otherwise,

137
00:10:51.720 --> 00:10:52.790
we default divorce.

138
00:10:52.790 --> 00:10:57.020
If it is a strangling,

139
00:10:57.020 --> 00:10:58.350
we continue.

140
00:10:58.350 --> 00:11:03.650
Otherwise we're gonna go ahead and returned false.

141
00:11:03.650 --> 00:11:08.550
But if there is a string length greater than zero,

142
00:11:08.550 --> 00:11:18.140
we want to define all the possible characters that could go into a strength we're going to

143
00:11:18.140 --> 00:11:22.710
save our possible characters equals.

144
00:11:22.710 --> 00:11:28.380
Then we're going to just list every letter in the alphabet and zero through nine.

145
00:11:28.380 --> 00:11:43.650
So a B C D E f g h i j k l M N o p Q r S T U V w x Y z and then 0123456789 That's a whole

146
00:11:43.650 --> 00:11:44.650
bunch of characters.

147
00:11:44.650 --> 00:11:55.430
We want to start the stream as an empty strength.

148
00:11:55.430 --> 00:12:02.680
We're going to go through a four loop over and over and over again until we reach our

149
00:12:02.680 --> 00:12:10.440
required length and upend a random character out of the possible character string to our

150
00:12:10.440 --> 00:12:16.450
new string over and over again until it is a string of random characters of the length that

151
00:12:16.450 --> 00:12:16.820
we need.

152
00:12:16.820 --> 00:12:17.890
Okay,

153
00:12:17.890 --> 00:12:27.250
so we're gonna say four equals one is smaller,

154
00:12:27.250 --> 00:12:33.940
then string length it looks,

155
00:12:33.940 --> 00:12:50.730
plus get random character from the possible characters string and then a pen,

156
00:12:50.730 --> 00:12:55.750
this character to the final string.

157
00:12:55.750 --> 00:13:06.030
So we're gonna say that random character equals something,

158
00:13:06.030 --> 00:13:11.360
and then we're going to append that to the string that we started building.

159
00:13:11.360 --> 00:13:17.550
All right,

160
00:13:17.550 --> 00:13:19.150
So how do we get a random character?

161
00:13:19.150 --> 00:13:30.350
We're going to say that the possible characters char at math dot floor math,

162
00:13:30.350 --> 00:13:37.560
Random times,

163
00:13:37.560 --> 00:13:40.570
possible characters.

164
00:13:40.570 --> 00:13:43.560
So in other words,

165
00:13:43.560 --> 00:13:52.440
we're going to grab a random number in between the first position and the last position of

166
00:13:52.440 --> 00:13:54.070
the possible character string.

167
00:13:54.070 --> 00:13:58.940
And then we're going to grab the actual character at that position.

168
00:13:58.940 --> 00:14:01.490
Now that we have a character,

169
00:14:01.490 --> 00:14:06.200
we have headed it to the string and what's we exit that four loop.

170
00:14:06.200 --> 00:14:09.050
We're going to return the final strength.

171
00:14:09.050 --> 00:14:12.250
So I returned strength.

172
00:14:12.250 --> 00:14:14.480
All right,

173
00:14:14.480 --> 00:14:19.850
Now that the helper exists,

174
00:14:19.850 --> 00:14:23.310
the create random string token,

175
00:14:23.310 --> 00:14:25.080
I d should happen just fine.

176
00:14:25.080 --> 00:14:32.170
So let's go ahead and start the app and see if we can use it to create a token for one of

177
00:14:32.170 --> 00:14:33.450
the users we created before.

178
00:14:33.450 --> 00:14:36.570
All right,

179
00:14:36.570 --> 00:14:39.630
I'm gonna go back to Postman.

180
00:14:39.630 --> 00:14:44.050
I'm gonna look at one of the things that I sent before.

181
00:14:44.050 --> 00:14:48.680
See which users still exist.

182
00:14:48.680 --> 00:14:52.960
We still have a user call in 568 When we created that guy,

183
00:14:52.960 --> 00:14:56.410
we created him with this phone number and this password.

184
00:14:56.410 --> 00:14:59.850
So I'm going to create a new request.

185
00:14:59.850 --> 00:15:03.370
Two local host 3000 tokens.

186
00:15:03.370 --> 00:15:10.000
It's going to be a post with the same phone number and same password.

187
00:15:10.000 --> 00:15:11.350
And in theory,

188
00:15:11.350 --> 00:15:13.150
this should give me a token back.

189
00:15:13.150 --> 00:15:15.060
All right,

190
00:15:15.060 --> 00:15:16.820
I got a token back.

191
00:15:16.820 --> 00:15:18.430
It expires at this time.

192
00:15:18.430 --> 00:15:20.030
It has this I d.

193
00:15:20.030 --> 00:15:22.350
And it is for the phone number I asked for.

194
00:15:22.350 --> 00:15:26.290
I should be able to do it again and get a different one.

195
00:15:26.290 --> 00:15:27.350
You can see that has a different I.

196
00:15:27.350 --> 00:15:27.860
D.

197
00:15:27.860 --> 00:15:30.030
And a slightly later expires Time.

198
00:15:30.030 --> 00:15:35.350
If I simply wrong password like I misspelled it and said it long.

199
00:15:35.350 --> 00:15:36.810
I get 400 bad requests.

200
00:15:36.810 --> 00:15:40.050
The password did not match the specified users stored password.

201
00:15:40.050 --> 00:15:41.980
But if I fix my air,

202
00:15:41.980 --> 00:15:45.820
everything works fine again,

203
00:15:45.820 --> 00:15:49.820
and I can keep on creating new tokens for this user as much as I want.

204
00:15:49.820 --> 00:15:52.630
If we go back to the tokens folder,

205
00:15:52.630 --> 00:15:59.140
we can see that all these tokens now exist on the file system with their different I DS and

206
00:15:59.140 --> 00:16:04.000
expires times and that the name of their files is the same as the I DS.

207
00:16:04.000 --> 00:16:13.740
So that is tokens dot post Now we can move on to tokens dot Get tokens get is going to be a

208
00:16:13.740 --> 00:16:17.390
fairly simple service very similar to users.

209
00:16:17.390 --> 00:16:23.410
Get We're going to say that the required data is just a i d.

210
00:16:23.410 --> 00:16:30.290
Optional data is none.

211
00:16:30.290 --> 00:16:39.070
The first thing you want to do is check that the i d that they sent is valid.

212
00:16:39.070 --> 00:16:42.160
We're going to get the i.

213
00:16:42.160 --> 00:16:42.420
D.

214
00:16:42.420 --> 00:16:44.820
From the query string object that the users sent.

215
00:16:44.820 --> 00:16:49.710
So I'm gonna grab the last time that we grab something off of the query string and really

216
00:16:49.710 --> 00:16:57.070
just copy this Whole users get function because we get tokens is going to be similar as

217
00:16:57.070 --> 00:16:57.460
well.

218
00:16:57.460 --> 00:17:06.480
I want to change phone toe i d.

219
00:17:06.480 --> 00:17:10.690
So query string object.

220
00:17:10.690 --> 00:17:22.140
I d equals string and I d trim length should actually equal 20 because that was the length

221
00:17:22.140 --> 00:17:23.940
of the random strings that we created.

222
00:17:23.940 --> 00:17:31.490
And then we want to continue on if there is an i d.

223
00:17:31.490 --> 00:17:33.080
If there's not an I d.

224
00:17:33.080 --> 00:17:36.160
We want to have the same error missing required fields.

225
00:17:36.160 --> 00:17:41.720
Now we want to look up the token,

226
00:17:41.720 --> 00:17:42.530
not the user.

227
00:17:42.530 --> 00:17:52.470
So data read to the token service and we identify the file by D Air or token data should

228
00:17:52.470 --> 00:17:53.090
come back.

229
00:17:53.090 --> 00:17:57.990
So if there is no air and there is token data will continue here.

230
00:17:57.990 --> 00:17:59.350
Otherwise,

231
00:17:59.350 --> 00:18:01.020
we will call back before four.

232
00:18:01.020 --> 00:18:01.720
Here.

233
00:18:01.720 --> 00:18:04.170
We don't need to remove any hash password,

234
00:18:04.170 --> 00:18:06.320
cause the token data doesn't include that.

235
00:18:06.320 --> 00:18:10.000
We want to call back 200 the token data.

236
00:18:10.000 --> 00:18:12.020
And before I continue on,

237
00:18:12.020 --> 00:18:14.600
I just want to fix this typo.

238
00:18:14.600 --> 00:18:16.090
It's the tokens collection,

239
00:18:16.090 --> 00:18:17.420
not the token.

240
00:18:17.420 --> 00:18:18.300
Singular.

241
00:18:18.300 --> 00:18:19.510
All right,

242
00:18:19.510 --> 00:18:22.660
let's start up the app and see if we can get this.

243
00:18:22.660 --> 00:18:23.690
Get to work.

244
00:18:23.690 --> 00:18:29.060
All right,

245
00:18:29.060 --> 00:18:36.270
Now I'm gonna go back and look at one of the post two tokens that I just did Resend it to

246
00:18:36.270 --> 00:18:37.210
get a new token.

247
00:18:37.210 --> 00:18:37.840
I d.

248
00:18:37.840 --> 00:18:42.720
Now I'm going to create a new request that doesn't get two tokens.

249
00:18:42.720 --> 00:18:54.410
Where the query String equals I d equals that new I d and send it off and I get back this

250
00:18:54.410 --> 00:18:57.350
new payload so get seem to be working fine.

251
00:18:57.350 --> 00:19:04.550
If I change the i d so that it is now something that doesn't exist in the file system,

252
00:19:04.550 --> 00:19:06.260
we'll get back before before.

253
00:19:06.260 --> 00:19:08.550
Okay,

254
00:19:08.550 --> 00:19:11.910
so gets are working fine.

255
00:19:11.910 --> 00:19:22.810
And now we can move on to tokens Put tokens put are going to have to required fields i D

256
00:19:22.810 --> 00:19:24.070
and extend.

257
00:19:24.070 --> 00:19:30.320
That will make more sense once you understand that there's really no reason to send a put

258
00:19:30.320 --> 00:19:31.490
to the token service.

259
00:19:31.490 --> 00:19:35.660
There's nothing to modify about a token other than its expiration time,

260
00:19:35.660 --> 00:19:40.190
But we don't want to allow users to set an arbitrary expiration time,

261
00:19:40.190 --> 00:19:47.050
so instead we only allow them to send an EXTEND equals true payload.

262
00:19:47.050 --> 00:19:49.630
If they send extent equals true,

263
00:19:49.630 --> 00:19:54.110
we will extend the token out to one hour from this moment,

264
00:19:54.110 --> 00:19:57.440
and there is no other field that they're allowed to update.

265
00:19:57.440 --> 00:20:05.550
And so optional data is not so.

266
00:20:05.550 --> 00:20:08.000
We want to get to things out of this payload,

267
00:20:08.000 --> 00:20:13.090
and I d and extend we can grab.

268
00:20:13.090 --> 00:20:19.630
The last time that we got something out of a payload case that in here change this to I D.

269
00:20:19.630 --> 00:20:43.020
And again the length should be 20 and we're gonna copy this down and use it as a base for

270
00:20:43.020 --> 00:20:44.670
validating the extent.

271
00:20:44.670 --> 00:20:47.110
But that should be data payload.

272
00:20:47.110 --> 00:21:01.260
Extend type is Boolean and really the only valid value for data payload extend is true.

273
00:21:01.260 --> 00:21:06.770
So it's either that or anything else is false.

274
00:21:06.770 --> 00:21:06.950
E.

275
00:21:06.950 --> 00:21:14.160
So now we want to say that if there's an i d and extend it was true,

276
00:21:14.160 --> 00:21:20.130
then we'll continue on logic.

277
00:21:20.130 --> 00:21:21.330
Otherwise,

278
00:21:21.330 --> 00:21:24.320
anything else is a invalid payload.

279
00:21:24.320 --> 00:21:26.030
So we want to call back 400.

280
00:21:26.030 --> 00:21:36.670
The error is missing required fields.

281
00:21:36.670 --> 00:21:42.950
Four fields are invalid.

282
00:21:42.950 --> 00:21:45.510
For example,

283
00:21:45.510 --> 00:21:47.270
if they would have sent extend equals false,

284
00:21:47.270 --> 00:21:48.480
that's not a valid payload.

285
00:21:48.480 --> 00:21:50.870
The only thing that you can do to extend is center.

286
00:21:50.870 --> 00:21:55.320
That's true if they date if they sent I d and extend and the first thing you want to do is

287
00:21:55.320 --> 00:21:56.360
look up the token.

288
00:21:56.360 --> 00:22:05.630
So we want to use our same helpers before data read from the tokens collection based on I D

289
00:22:05.630 --> 00:22:05.630
.

290
00:22:05.630 --> 00:22:10.190
And it's going to send us back and air and token data,

291
00:22:10.190 --> 00:22:18.410
and we want to say that if there is no air and there is token data,

292
00:22:18.410 --> 00:22:19.760
let's continue.

293
00:22:19.760 --> 00:22:24.450
Otherwise we're going to call back 400.

294
00:22:24.450 --> 00:22:32.370
There specified Token does not exist.

295
00:22:32.370 --> 00:22:34.760
But if we did get the token data back,

296
00:22:34.760 --> 00:22:41.650
first thing we need to do is check to make sure that token isn't already expired.

297
00:22:41.650 --> 00:22:47.100
We only want to let users extend.

298
00:22:47.100 --> 00:22:51.590
A token that is still currently active is a lot like when you're on a Web page,

299
00:22:51.590 --> 00:22:58.020
and as long as you keep active it will continue letting you keep your session alive.

300
00:22:58.020 --> 00:22:59.820
But as soon as that session dies,

301
00:22:59.820 --> 00:23:04.040
there's nothing you can do to reactivate it except locking and again,

302
00:23:04.040 --> 00:23:04.670
in our case,

303
00:23:04.670 --> 00:23:05.800
getting a whole new token.

304
00:23:05.800 --> 00:23:08.330
So as long as they still have an active session,

305
00:23:08.330 --> 00:23:12.650
they can send a put to the service to extend their session even further.

306
00:23:12.650 --> 00:23:14.430
But once the session is dead,

307
00:23:14.430 --> 00:23:15.620
it's Dad.

308
00:23:15.620 --> 00:23:16.480
There's nothing they can do.

309
00:23:16.480 --> 00:23:25.350
So we want to make sure that if token data expires is greater than date now,

310
00:23:25.350 --> 00:23:27.850
then we want to continue with the logic.

311
00:23:27.850 --> 00:23:32.160
Otherwise they can't extend it.

312
00:23:32.160 --> 00:23:40.950
So we want to say Colback 400 here,

313
00:23:40.950 --> 00:23:49.050
the token has already expired and cannot be extended.

314
00:23:49.050 --> 00:23:54.380
But if everything is fine with the expiration now,

315
00:23:54.380 --> 00:24:01.260
we want to set the expiration an hour from now.

316
00:24:01.260 --> 00:24:04.580
So token data expires.

317
00:24:04.580 --> 00:24:06.670
Equals date.

318
00:24:06.670 --> 00:24:08.070
Now then,

319
00:24:08.070 --> 00:24:12.470
the same thing we did before 1000 times 60 times 60.

320
00:24:12.470 --> 00:24:13.500
And we need to persist.

321
00:24:13.500 --> 00:24:14.250
This two disc,

322
00:24:14.250 --> 00:24:17.010
so store the new updates.

323
00:24:17.010 --> 00:24:21.850
Data update,

324
00:24:21.850 --> 00:24:24.880
tokens collection.

325
00:24:24.880 --> 00:24:33.450
Identify the file by D Overriding data with this new token data and we're expecting back in

326
00:24:33.450 --> 00:24:40.160
air we want to continue on if there is no air and call back 200.

327
00:24:40.160 --> 00:24:43.280
Otherwise,

328
00:24:43.280 --> 00:24:51.450
we want to call back 500 here.

329
00:24:51.450 --> 00:25:02.160
Could not update the token expiration.

330
00:25:02.160 --> 00:25:07.010
All right,

331
00:25:07.010 --> 00:25:08.770
so that is tokens put.

332
00:25:08.770 --> 00:25:12.550
Let's try that out and see if we can get to work.

333
00:25:12.550 --> 00:25:14.760
I'm gonna start the at back up.

334
00:25:14.760 --> 00:25:23.940
Looks like I have a little air here online to A to I should have wrapped this in object,

335
00:25:23.940 --> 00:25:25.050
and I didn't.

336
00:25:25.050 --> 00:25:28.720
But before we start this up,

337
00:25:28.720 --> 00:25:32.030
let's just fix this little typo expire.

338
00:25:32.030 --> 00:25:33.460
Says one s all right.

339
00:25:33.460 --> 00:25:34.550
Now let's start this up,

340
00:25:34.550 --> 00:25:37.160
okay?

341
00:25:37.160 --> 00:25:47.000
And I'm gonna go back and create a new token using the same users before,

342
00:25:47.000 --> 00:25:48.780
so I have created a token.

343
00:25:48.780 --> 00:25:53.160
It ends in t 585 If we go to the tokens for order,

344
00:25:53.160 --> 00:25:56.320
we can see it right there.

345
00:25:56.320 --> 00:26:06.050
It expires and something ending in 8389 I'm going to craft a new request,

346
00:26:06.050 --> 00:26:15.590
saying that extend equals true and sending that I d.

347
00:26:15.590 --> 00:26:16.950
For this time it's a put.

348
00:26:16.950 --> 00:26:23.660
I got a 200 back and you can see it's a different expiration time.

349
00:26:23.660 --> 00:26:25.640
It's a time further in the future,

350
00:26:25.640 --> 00:26:29.850
so right now it's 0757 Extended again.

351
00:26:29.850 --> 00:26:35.570
Now it's 3137 So every time I send that it will extend it a little bit.

352
00:26:35.570 --> 00:26:38.910
Let's kill this server,

353
00:26:38.910 --> 00:26:43.080
and now we can do the last method in the token service,

354
00:26:43.080 --> 00:26:45.080
which is delete.

355
00:26:45.080 --> 00:26:48.090
Delete is going to be similar to users.

356
00:26:48.090 --> 00:26:53.160
Where they require data is I D.

357
00:26:53.160 --> 00:26:55.470
Optional data is none,

358
00:26:55.470 --> 00:27:08.050
and it's so much like users that where it is going to copy some of logic from users,

359
00:27:08.050 --> 00:27:12.610
deleting a token would be the same as locking out basically.

360
00:27:12.610 --> 00:27:16.260
So I'm a copy this from users.

361
00:27:16.260 --> 00:27:29.210
Check that the I D is valid change phone to i d.

362
00:27:29.210 --> 00:27:39.730
The link should equal 20 continue on.

363
00:27:39.730 --> 00:27:40.480
If there isn't.

364
00:27:40.480 --> 00:27:41.890
I d this time.

365
00:27:41.890 --> 00:27:59.430
Look up the token data re tokens by D If air and data data delete tokens by D and call back

366
00:27:59.430 --> 00:28:04.950
in 200 and modify these messages,

367
00:28:04.950 --> 00:28:09.190
but everything else is the same.

368
00:28:09.190 --> 00:28:10.640
All right,

369
00:28:10.640 --> 00:28:15.850
so let's start it up again and try to delete this token.

370
00:28:15.850 --> 00:28:27.060
So it's I'm just gonna do we get requests.

371
00:28:27.060 --> 00:28:29.230
First we can see that this token exists.

372
00:28:29.230 --> 00:28:31.550
I'm a change this to a delete.

373
00:28:31.550 --> 00:28:37.450
We've got a 200 which means if I try to do it get again,

374
00:28:37.450 --> 00:28:40.050
it should be a 44 which we see there.

375
00:28:40.050 --> 00:28:42.430
And now that is gone.

376
00:28:42.430 --> 00:28:43.980
That token no longer exists,

377
00:28:43.980 --> 00:28:46.050
so delete is working just fine.

378
00:28:46.050 --> 00:28:54.750
But there are a couple two DUIs in this file from an earlier lecture which had to do with

379
00:28:54.750 --> 00:28:55.630
authentication,

380
00:28:55.630 --> 00:28:57.660
for example,

381
00:28:57.660 --> 00:29:03.250
on lee let authenticated users delete their object only let them update their object,

382
00:29:03.250 --> 00:29:05.290
only let them get their own object.

383
00:29:05.290 --> 00:29:10.070
So we need to actually update those functions with a new helper that weaken.

384
00:29:10.070 --> 00:29:11.480
Define right now,

385
00:29:11.480 --> 00:29:16.500
now that tokens exists and authentication as the possibility to exist.

386
00:29:16.500 --> 00:29:28.650
So we're gonna write a general purpose function here Verify It's given i d is currently

387
00:29:28.650 --> 00:29:32.580
valid for a given user to specify.

388
00:29:32.580 --> 00:29:33.400
I mean,

389
00:29:33.400 --> 00:29:34.520
a given token,

390
00:29:34.520 --> 00:29:44.020
I d So we want to take in a token I d and spit back tour false that the token is valid for

391
00:29:44.020 --> 00:29:45.760
the user that we're checking against.

392
00:29:45.760 --> 00:30:00.850
So we're gonna call this handlers tokens verify token.

393
00:30:00.850 --> 00:30:05.950
And this will be a function that takes in an idea of a token,

394
00:30:05.950 --> 00:30:08.950
the phone number of a user and a call back.

395
00:30:08.950 --> 00:30:17.050
And it should check that this i d of a token works for this phone number.

396
00:30:17.050 --> 00:30:19.840
So we first want to look up the token.

397
00:30:19.840 --> 00:30:28.260
So data read from tokens based on I d.

398
00:30:28.260 --> 00:30:34.260
It's gonna give us back in air and token data.

399
00:30:34.260 --> 00:30:39.430
We want to continue if there is no air and there is talking data,

400
00:30:39.430 --> 00:30:45.130
otherwise we can call back false.

401
00:30:45.130 --> 00:30:46.380
If we're continuing,

402
00:30:46.380 --> 00:30:58.500
we want to check that the token is for the giving user and has not expired.

403
00:30:58.500 --> 00:31:01.290
So we do that by saying,

404
00:31:01.290 --> 00:31:17.350
If token data dot phone equals the phone number provided and token data expires is greater

405
00:31:17.350 --> 00:31:18.840
then date.

406
00:31:18.840 --> 00:31:22.580
Now then everything's fine.

407
00:31:22.580 --> 00:31:23.150
Callback.

408
00:31:23.150 --> 00:31:23.380
True.

409
00:31:23.380 --> 00:31:32.060
Other ones call back force because either the token news expired or it wasn't for that

410
00:31:32.060 --> 00:31:32.660
phone number.

411
00:31:32.660 --> 00:31:38.510
So now we have a general purpose function that can compare a token I d toe a phone number

412
00:31:38.510 --> 00:31:40.090
and see if they match up.

413
00:31:40.090 --> 00:31:47.750
So let's go ahead and incorporate that into our functions above that start the first time

414
00:31:47.750 --> 00:31:48.530
we used it,

415
00:31:48.530 --> 00:31:51.130
which is handlers users get.

416
00:31:51.130 --> 00:31:54.090
So I'm gonna take out this to do whenever this to do,

417
00:31:54.090 --> 00:31:55.000
said Onley.

418
00:31:55.000 --> 00:31:58.120
Let unauthenticated users access their object.

419
00:31:58.120 --> 00:32:00.080
So that's what we're implementing right now.

420
00:32:00.080 --> 00:32:03.660
So underneath phone before looking up the user,

421
00:32:03.660 --> 00:32:06.770
I want to do a couple things.

422
00:32:06.770 --> 00:32:12.550
I want to get the token from the headers.

423
00:32:12.550 --> 00:32:14.920
Since this is a authenticated request,

424
00:32:14.920 --> 00:32:20.970
it should be expected that any clients sending that request would have included Token

425
00:32:20.970 --> 00:32:27.170
equals this as a header in that request and so we can grab the token from there.

426
00:32:27.170 --> 00:32:36.580
So our token equals type of data headers token,

427
00:32:36.580 --> 00:32:42.200
equal string data,

428
00:32:42.200 --> 00:32:43.140
headers,

429
00:32:43.140 --> 00:32:44.760
gang core falls.

430
00:32:44.760 --> 00:32:45.360
So,

431
00:32:45.360 --> 00:32:46.120
in other words,

432
00:32:46.120 --> 00:32:46.740
get the token.

433
00:32:46.740 --> 00:32:48.840
If they sent it and they put it in the headers,

434
00:32:48.840 --> 00:32:50.680
otherwise default to false.

435
00:32:50.680 --> 00:33:00.260
And now we want to verify that the given token from the headers is valid for the phone

436
00:33:00.260 --> 00:33:00.660
number.

437
00:33:00.660 --> 00:33:01.560
In other words,

438
00:33:01.560 --> 00:33:04.450
the phone number that the user is specifying they get request.

439
00:33:04.450 --> 00:33:07.160
So we want to say handlers,

440
00:33:07.160 --> 00:33:14.840
tokens verify token the function we just created,

441
00:33:14.840 --> 00:33:22.490
and we're gonna send it the token i d the phone number and we're gonna expect back the

442
00:33:22.490 --> 00:33:25.700
outcome of token is valid.

443
00:33:25.700 --> 00:33:26.490
Now,

444
00:33:26.490 --> 00:33:29.680
we only want to continue on.

445
00:33:29.680 --> 00:33:33.840
If token is valid,

446
00:33:33.840 --> 00:33:36.410
that's where the rest of logic is gonna go.

447
00:33:36.410 --> 00:33:41.610
Otherwise we're going to call back four or three to the user saying,

448
00:33:41.610 --> 00:33:43.480
Yeah,

449
00:33:43.480 --> 00:33:57.850
missing required token in header four token is invalid.

450
00:33:57.850 --> 00:34:09.460
And then we're going to cut all this stuff and place it within this if all right,

451
00:34:09.460 --> 00:34:15.960
so now good users get is unauthenticated service To recap the way that this is working is

452
00:34:15.960 --> 00:34:18.930
the requester is sending a get request,

453
00:34:18.930 --> 00:34:21.210
asking for information about this phone number.

454
00:34:21.210 --> 00:34:24.120
So what we're doing is we're saying all right,

455
00:34:24.120 --> 00:34:26.020
you want information about this phone number?

456
00:34:26.020 --> 00:34:31.320
Let's check your token that you're sending and check that if we look up that token,

457
00:34:31.320 --> 00:34:32.010
I d.

458
00:34:32.010 --> 00:34:35.030
That matches the phone number you're asking about,

459
00:34:35.030 --> 00:34:41.610
because the only way you could have a token whose data references that phone number is if

460
00:34:41.610 --> 00:34:46.160
you created that token because you had the phone number and a password of the user.

461
00:34:46.160 --> 00:34:47.050
So in other words,

462
00:34:47.050 --> 00:34:51.210
we're validating that you are you before we give you information about you.

463
00:34:51.210 --> 00:34:53.820
Now we can basically do the same thing,

464
00:34:53.820 --> 00:34:55.850
and users put,

465
00:34:55.850 --> 00:35:00.850
we want to use the same logic of getting the token from the headers.

466
00:35:00.850 --> 00:35:03.240
This time,

467
00:35:03.240 --> 00:35:05.350
we're gonna place it down here,

468
00:35:05.350 --> 00:35:15.550
and we want to use basically the same logic all over again.

469
00:35:15.550 --> 00:35:27.820
I'm just gonna close this if and we want that else to call back the same four or three that

470
00:35:27.820 --> 00:35:42.210
we did above then I'm going to place all of this logic inside of this.

471
00:35:42.210 --> 00:35:44.260
If so,

472
00:35:44.260 --> 00:35:47.110
we're doing the same kind of check that we did above.

473
00:35:47.110 --> 00:35:48.600
No,

474
00:35:48.600 --> 00:35:54.110
we want to do the same basic thing for users.

475
00:35:54.110 --> 00:35:54.680
Delete.

476
00:35:54.680 --> 00:35:59.660
Let me just get rid of this to do because we don't need to do it anymore.

477
00:35:59.660 --> 00:36:07.900
So I'm gonna copy these two things getting away to this to do because that's what we're

478
00:36:07.900 --> 00:36:08.740
doing right now.

479
00:36:08.740 --> 00:36:18.640
I'm saying if there is a phone number and I'm gonna start the token validation closing this

480
00:36:18.640 --> 00:36:19.240
all up.

481
00:36:19.240 --> 00:36:27.960
I'm going to grab the same four or three air from above.

482
00:36:27.960 --> 00:36:32.270
Put that in the bottom of the else,

483
00:36:32.270 --> 00:36:38.900
and I'm going to place the rest of this logic inside token is valid.

484
00:36:38.900 --> 00:36:40.350
All right,

485
00:36:40.350 --> 00:36:49.140
so now we've modified users get put and elite so that only a user who has previously

486
00:36:49.140 --> 00:36:52.510
created about a token could do any of those things.

487
00:36:52.510 --> 00:36:54.340
Let's go ahead and try that out.

488
00:36:54.340 --> 00:36:58.490
Okay?

489
00:36:58.490 --> 00:37:05.430
I'm gonna go back to creating a token for this user.

490
00:37:05.430 --> 00:37:13.000
All right?

491
00:37:13.000 --> 00:37:14.170
I got a new token.

492
00:37:14.170 --> 00:37:15.740
Has this I d.

493
00:37:15.740 --> 00:37:24.950
Now I'm going to try to do a get request to users with this phone number,

494
00:37:24.950 --> 00:37:29.940
and I should get a four or three because I haven't included the token.

495
00:37:29.940 --> 00:37:36.630
But when I modify the headers say the token equals this That new token I just created and I

496
00:37:36.630 --> 00:37:37.710
send Matt along.

497
00:37:37.710 --> 00:37:39.490
Now I'm getting it 200 back,

498
00:37:39.490 --> 00:37:40.650
and I'm getting all the data,

499
00:37:40.650 --> 00:37:45.110
so it looks like the token validation is working.

500
00:37:45.110 --> 00:37:45.360
Fine.

501
00:37:45.360 --> 00:37:46.230
All right,

502
00:37:46.230 --> 00:37:49.440
so now we can move on to the next lecture

