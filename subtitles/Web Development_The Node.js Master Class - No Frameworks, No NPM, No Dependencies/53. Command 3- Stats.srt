1
00:00:00,000 --> 00:00:04,260
in this lecture,

2
00:00:04,260 --> 00:00:07,520
we're going to fill in the responder for the stats command.

3
00:00:07,520 --> 00:00:10,200
There a number of stats that might be useful for an admin,

4
00:00:10,200 --> 00:00:15,530
but we've chosen a few common metrics related to resource utilization memory,

5
00:00:15,530 --> 00:00:16,220
CPU,

6
00:00:16,220 --> 00:00:16,770
etcetera.

7
00:00:16,770 --> 00:00:18,900
When user enters the stats command,

8
00:00:18,900 --> 00:00:23,300
we want to build something similar to what we did for the help command that is,

9
00:00:23,300 --> 00:00:26,730
create an object and then cycle through the keys in that object,

10
00:00:26,730 --> 00:00:29,170
printing out one stat at a time.

11
00:00:29,170 --> 00:00:31,810
We're going to fill in this section sealed.

12
00:00:31,810 --> 00:00:33,710
I don't responders dot stats.

13
00:00:33,710 --> 00:00:38,650
The first thing that we're gonna want to do is compile and object,

14
00:00:38,650 --> 00:00:39,760
Uh,

15
00:00:39,760 --> 00:00:47,260
stats that objects just going to be called var stance and that will go ahead and fill in.

16
00:00:47,260 --> 00:00:50,460
The keys will come back to the values in just a moment.

17
00:00:50,460 --> 00:00:52,540
First key is load average,

18
00:00:52,540 --> 00:01:03,850
and then we're going to do a CPU count free memory.

19
00:01:03,850 --> 00:01:23,670
Current Medlock memory pique My locked memory allocated keep used as a percentage available

20
00:01:23,670 --> 00:01:23,670
.

21
00:01:23,670 --> 00:01:32,550
He allocated also as a percentage and finally up time.

22
00:01:32,550 --> 00:01:38,060
That is the number of seconds that the system has been up.

23
00:01:38,060 --> 00:01:44,340
Now imagine that we have filled in all these keys with corresponding values after we do so

24
00:01:44,340 --> 00:01:49,650
we actually want to create a header the same way that we did for the man page.

25
00:01:49,650 --> 00:01:57,790
So I'm just going to copy what we did up there and paste it down here to create a header

26
00:01:57,790 --> 00:01:59,600
for the stats.

27
00:01:59,600 --> 00:02:01,850
I'm pasting that in.

28
00:02:01,850 --> 00:02:05,030
And rather than having the title cli manual,

29
00:02:05,030 --> 00:02:08,290
we're going to say system statistics.

30
00:02:08,290 --> 00:02:13,710
Now we're gonna log out each stat,

31
00:02:13,710 --> 00:02:14,630
but this,

32
00:02:14,630 --> 00:02:15,040
too,

33
00:02:15,040 --> 00:02:18,640
is going to be very similar to what we did in the last section.

34
00:02:18,640 --> 00:02:20,940
So I'm going to grab the four loop from here,

35
00:02:20,940 --> 00:02:25,050
as well as the vertical space and horizontal line that we did afterwards.

36
00:02:25,050 --> 00:02:29,440
I'm gonna use it down in dysfunction rather than for Barkey.

37
00:02:29,440 --> 00:02:33,850
And commands were going to do for Barkey in stats the object above.

38
00:02:33,850 --> 00:02:37,380
If stats has own property key,

39
00:02:37,380 --> 00:02:38,170
then we'll continue.

40
00:02:38,170 --> 00:02:39,820
We're getting the value the same.

41
00:02:39,820 --> 00:02:44,280
We're creating a line that's also a 33 to make it yellow.

42
00:02:44,280 --> 00:02:49,050
We're creating padding that is 60 minus the line length,

43
00:02:49,050 --> 00:02:55,590
and then we're going through each line and adding that panning and at the very end,

44
00:02:55,590 --> 00:02:59,690
we add the value after the padding and log out the line,

45
00:02:59,690 --> 00:03:02,490
followed by a vertical space.

46
00:03:02,490 --> 00:03:03,900
When we're completely done,

47
00:03:03,900 --> 00:03:08,210
we add a vertical space and then end with another horizontal line.

48
00:03:08,210 --> 00:03:10,790
So before we move on and actually start filling out these stats,

49
00:03:10,790 --> 00:03:12,310
let's just see what this looks like.

50
00:03:12,310 --> 00:03:22,380
I'm gonna start the at backup when asked the question stats and you can see it through an

51
00:03:22,380 --> 00:03:22,840
error.

52
00:03:22,840 --> 00:03:27,750
And that is due to the fact that we're still getting the value as commands key when really

53
00:03:27,750 --> 00:03:30,210
it should be stats key.

54
00:03:30,210 --> 00:03:31,860
Let's try that again.

55
00:03:31,860 --> 00:03:36,650
Just gonna make this a little bit bigger so you can see the center header start up.

56
00:03:36,650 --> 00:03:41,430
Ask it the stats question and there you have it.

57
00:03:41,430 --> 00:03:42,930
You can see the keys,

58
00:03:42,930 --> 00:03:45,150
and now we just need to fill in the values.

59
00:03:45,150 --> 00:03:46,970
I'll kill this.

60
00:03:46,970 --> 00:03:50,470
Move this back over to make some room.

61
00:03:50,470 --> 00:03:56,950
Now that's fill in each one of these In order to get the load average of the underlying

62
00:03:56,950 --> 00:03:59,170
operating system as well as the CPU,

63
00:03:59,170 --> 00:04:03,580
count the free memory and the up time seconds,

64
00:04:03,580 --> 00:04:06,650
we're going to have to use a module called OS.

65
00:04:06,650 --> 00:04:09,550
We haven't actually required that at the top yet,

66
00:04:09,550 --> 00:04:14,770
and so let's go do that now BAR O.

67
00:04:14,770 --> 00:04:15,290
S,

68
00:04:15,290 --> 00:04:19,680
which stands for operating system equals require OS.

69
00:04:19,680 --> 00:04:25,640
Now that we required that module,

70
00:04:25,640 --> 00:04:32,060
we can go back down and use some of the built in functions for that module to get this data

71
00:04:32,060 --> 00:04:32,880
that we want.

72
00:04:32,880 --> 00:04:40,450
The load average is going to be available at os dot load a V G.

73
00:04:40,450 --> 00:04:43,850
That's a function that you have to call,

74
00:04:43,850 --> 00:04:50,980
and then we actually want to join the resulting array with a space.

75
00:04:50,980 --> 00:04:56,270
That is because this load average that comes back as a return value of this function is an

76
00:04:56,270 --> 00:05:00,980
array which would then need to be joined to make it into a consistent strength.

77
00:05:00,980 --> 00:05:08,430
The CPU count is going to be available to us at os dot CPUs CP use and that's gonna come

78
00:05:08,430 --> 00:05:08,670
back.

79
00:05:08,670 --> 00:05:09,950
It is an array as well,

80
00:05:09,950 --> 00:05:13,140
specifying details about each CPU.

81
00:05:13,140 --> 00:05:16,430
We want to just get the length of that array,

82
00:05:16,430 --> 00:05:19,150
which would tell us how many CP use are in the system.

83
00:05:19,150 --> 00:05:24,950
Free memory is available to us at OS Don't free mammoth,

84
00:05:24,950 --> 00:05:26,470
and that's a function as well.

85
00:05:26,470 --> 00:05:27,430
Lastly,

86
00:05:27,430 --> 00:05:32,350
the up time is available to us at os dot up time,

87
00:05:32,350 --> 00:05:37,680
and that is a function that we call and then for convenience.

88
00:05:37,680 --> 00:05:42,850
We're just going to add on the word seconds so we can start the at back up,

89
00:05:42,850 --> 00:05:46,100
see the results of this OS module.

90
00:05:46,100 --> 00:05:52,380
I'm gonna ask you the stats question and you can see this is the load.

91
00:05:52,380 --> 00:05:53,990
This is the CPU.

92
00:05:53,990 --> 00:05:58,470
Count the amount of free memory and the number of seconds that the system has been up.

93
00:05:58,470 --> 00:06:00,050
Of course,

94
00:06:00,050 --> 00:06:03,150
the results will vary for whatever system you're building on.

95
00:06:03,150 --> 00:06:08,390
The rest of these metrics are going to be available to us in a different package.

96
00:06:08,390 --> 00:06:11,580
A different no Js module called V eight.

97
00:06:11,580 --> 00:06:17,130
As you know from the early lectures note is built on top of V eight,

98
00:06:17,130 --> 00:06:24,820
but it also provides aviate module that gives you some low level metrics about the runtime

99
00:06:24,820 --> 00:06:25,550
itself.

100
00:06:25,550 --> 00:06:32,750
We can access these metrics with far V eight equals require V eight.

101
00:06:32,750 --> 00:06:35,540
We're gonna go back down.

102
00:06:35,540 --> 00:06:42,730
The current Matlock memory is going to be available to us at V eight dot get heap

103
00:06:42,730 --> 00:06:49,340
statistics and then a key of the resultant object that gets returned from that function.

104
00:06:49,340 --> 00:06:54,450
The key is my locked memory.

105
00:06:54,450 --> 00:06:56,450
Similarly,

106
00:06:56,450 --> 00:07:00,780
we can just copy this down to the next section The peak.

107
00:07:00,780 --> 00:07:09,580
My lost memory is going to be available at V eight dot get Keep statistics peak underscore

108
00:07:09,580 --> 00:07:11,570
Mel Locked Underscore memory.

109
00:07:11,570 --> 00:07:18,570
Now the allocated heap used is actually going to be a metric that we create as a percentage

110
00:07:18,570 --> 00:07:20,570
of the total keep size available,

111
00:07:20,570 --> 00:07:25,550
so we are going to use the same metric scaffolding.

112
00:07:25,550 --> 00:07:32,470
V eight dot get keep statistics dot used heap size,

113
00:07:32,470 --> 00:07:38,160
But then we actually want to divide that by another metric,

114
00:07:38,160 --> 00:07:45,270
which is v eight dot get heaps statistics dot total heat size,

115
00:07:45,270 --> 00:07:47,870
then wrap this,

116
00:07:47,870 --> 00:07:53,210
multiply it by 100 then round the result.

117
00:07:53,210 --> 00:08:02,870
So math dot ground and what math is rounding is 100 times the used heap size divided by the

118
00:08:02,870 --> 00:08:03,900
total heap size.

119
00:08:03,900 --> 00:08:10,850
So what that's going to end up with is a rounded percentage of the allocated heap used.

120
00:08:10,850 --> 00:08:17,470
We can take this same basic scaffolding of one thing divided by another times 100 then

121
00:08:17,470 --> 00:08:19,650
rounded and paste it down below.

122
00:08:19,650 --> 00:08:24,160
We're just going to change the metrics involved for available heave allocated.

123
00:08:24,160 --> 00:08:33,780
We actually want to use the total keep size as the numerator and divide that by heap size

124
00:08:33,780 --> 00:08:34,400
limit,

125
00:08:34,400 --> 00:08:37,820
then we'll multiply by 100 round it.

126
00:08:37,820 --> 00:08:45,360
So that's going to give you the percentage of the total heap size limit that has been

127
00:08:45,360 --> 00:08:45,820
allocated.

128
00:08:45,820 --> 00:08:47,200
Both of these metrics,

129
00:08:47,200 --> 00:08:51,570
the allocated heap used as a percentage and the available heave allocated as a percentage

130
00:08:51,570 --> 00:08:54,540
will be important to understanding the usage of the heap.

131
00:08:54,540 --> 00:08:56,450
So those air all our statistics,

132
00:08:56,450 --> 00:09:04,360
let's go ahead and start the at backup and asked the stats question and we can see all of

133
00:09:04,360 --> 00:09:06,450
these metrics coming through.

134
00:09:06,450 --> 00:09:10,370
So now our Stats command is working fine,

135
00:09:10,370 --> 00:09:12,670
and we can move on to the next lecture.

