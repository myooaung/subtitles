1
00:00:00,000 --> 00:00:08,530
in this lecture and the lectures that follow were going to be creating some for lack of a

2
00:00:08,530 --> 00:00:14,550
better term Hello world applications with some of those modules that we mentioned earlier.

3
00:00:14,550 --> 00:00:19,080
But since we're just wrapping up here and these modules aren't necessarily going to provide

4
00:00:19,080 --> 00:00:20,980
value to our existing application,

5
00:00:20,980 --> 00:00:24,090
we're gonna leave our code based as it is,

6
00:00:24,090 --> 00:00:29,610
and then just create a separate photo where you can run these examples on their own in a

7
00:00:29,610 --> 00:00:30,390
standalone way.

8
00:00:30,390 --> 00:00:39,320
So I'm going to create a new directory and call it miscellaneous M I s e within the

9
00:00:39,320 --> 00:00:40,400
miscellaneous border.

10
00:00:40,400 --> 00:00:45,370
The first thing that we're going to demo is HDP two module.

11
00:00:45,370 --> 00:00:51,820
The primary thing that H two B two is able to accomplish out of the box is streaming Web

12
00:00:51,820 --> 00:00:52,510
sockets,

13
00:00:52,510 --> 00:00:57,550
which is something you'd have to implement manually in earlier versions of H two b,

14
00:00:57,550 --> 00:00:59,150
but initially be too.

15
00:00:59,150 --> 00:01:01,730
That's just a built in part of the protocol.

16
00:01:01,730 --> 00:01:08,040
And so we're going to create HDB to client and http do server and show how they can

17
00:01:08,040 --> 00:01:08,570
interact.

18
00:01:08,570 --> 00:01:11,130
So within Miss,

19
00:01:11,130 --> 00:01:16,650
I am going to create touch miscellaneous HDP two,

20
00:01:16,650 --> 00:01:25,390
client dot Js and touch miscellaneous H two B two dash server dot Js.

21
00:01:25,390 --> 00:01:27,590
Let's start by creating the server.

22
00:01:27,590 --> 00:01:32,750
So I'm gonna open up these files and I was gonna add a comment at the top.

23
00:01:32,750 --> 00:01:36,850
Example HDP two server.

24
00:01:36,850 --> 00:01:39,580
As you can imagine,

25
00:01:39,580 --> 00:01:43,350
this is only gonna have one dependency HDP two.

26
00:01:43,350 --> 00:01:45,000
Because that's the only thing we need to demo here,

27
00:01:45,000 --> 00:01:47,950
and that's going to be require HDP two.

28
00:01:47,950 --> 00:01:52,050
The first thing that we would need to do is initialized server.

29
00:01:52,050 --> 00:01:52,930
So in it,

30
00:01:52,930 --> 00:02:02,250
the server we're going to save our server equals http to create server.

31
00:02:02,250 --> 00:02:06,560
And that's just a function that you call on its own.

32
00:02:06,560 --> 00:02:09,300
Just like the other service that we've created in this lecture.

33
00:02:09,300 --> 00:02:14,400
We need to give the servers some behavior that happens when events occur,

34
00:02:14,400 --> 00:02:16,380
then tell it to start listening.

35
00:02:16,380 --> 00:02:21,050
So the behavior that we want to configure is that on a stream,

36
00:02:21,050 --> 00:02:24,330
this is what I was referring to as a Web socket earlier.

37
00:02:24,330 --> 00:02:30,950
But they refer to as a stream we want to send back some hello world H t m l.

38
00:02:30,950 --> 00:02:33,570
So when someone connects on a stream,

39
00:02:33,570 --> 00:02:36,900
we want to send this payload in response.

40
00:02:36,900 --> 00:02:45,520
So we want to call a server on stream and then provide a callback where we're expecting

41
00:02:45,520 --> 00:02:49,030
back the stream and the headers.

42
00:02:49,030 --> 00:02:54,240
Now that we were within the function that's going to get called when a new stream gets

43
00:02:54,240 --> 00:02:54,850
connected,

44
00:02:54,850 --> 00:02:57,570
we can configure what the response should be.

45
00:02:57,570 --> 00:03:03,710
So we should say stream don't respond with status were responding with his 200 and the

46
00:03:03,710 --> 00:03:08,680
content type is going to be text html.

47
00:03:08,680 --> 00:03:11,040
Then we want to end the stream.

48
00:03:11,040 --> 00:03:18,790
So stream and and we'll end it by providing the html text payload that we want the user to

49
00:03:18,790 --> 00:03:21,550
see in the browser or whatever the client is.

50
00:03:21,550 --> 00:03:31,500
So I'm gonna have an HTML opening and closing tag within their I'm just gonna put a body

51
00:03:31,500 --> 00:03:36,690
opening and closing tag and within the body,

52
00:03:36,690 --> 00:03:38,850
I'm gonna put a paragraph,

53
00:03:38,850 --> 00:03:41,600
and inside that paragraph,

54
00:03:41,600 --> 00:03:42,860
I'm gonna say hello,

55
00:03:42,860 --> 00:03:43,300
world.

56
00:03:43,300 --> 00:03:45,120
So,

57
00:03:45,120 --> 00:03:47,350
in response to any of these new stream connections,

58
00:03:47,350 --> 00:03:49,980
we're gonna write 200 status code.

59
00:03:49,980 --> 00:03:54,250
We're going to tell them that it's text html and we're gonna give him this HTML.

60
00:03:54,250 --> 00:04:00,970
Now we need to tell the server to listen on what is pick a port will say port 6000.

61
00:04:00,970 --> 00:04:02,810
So we're gonna call server.

62
00:04:02,810 --> 00:04:05,150
Don't listen 6000.

63
00:04:05,150 --> 00:04:10,690
That's a pretty simple http server that responds with some HTML.

64
00:04:10,690 --> 00:04:10,970
Now,

65
00:04:10,970 --> 00:04:13,630
let's create a client that can interact with this silver.

66
00:04:13,630 --> 00:04:18,250
I'm just going to note that this is an example Http to client.

67
00:04:18,250 --> 00:04:22,660
And again,

68
00:04:22,660 --> 00:04:32,570
this is gonna have one dependency http two equals Require http two to create an HDP

69
00:04:32,570 --> 00:04:36,090
connection as if we were a browser or some other kind of client.

70
00:04:36,090 --> 00:04:38,450
We want to create a client.

71
00:04:38,450 --> 00:04:44,960
The calling of our client is equal to http to dot connect.

72
00:04:44,960 --> 00:04:47,720
And then we'll need to specify the euro that we want to connect to.

73
00:04:47,720 --> 00:04:48,550
In our case,

74
00:04:48,550 --> 00:04:56,180
that's going to be local host 6000 because that's the silver in the port that we've

75
00:04:56,180 --> 00:04:58,000
configured this server to.

76
00:04:58,000 --> 00:04:58,450
Listen on.

77
00:04:58,450 --> 00:05:00,250
Now let's create the request.

78
00:05:00,250 --> 00:05:05,550
If you remember from creating htp requests earlier in this series,

79
00:05:05,550 --> 00:05:10,290
you always have to have some kind of configuration there to tell it what to do.

80
00:05:10,290 --> 00:05:12,050
This is no exception.

81
00:05:12,050 --> 00:05:21,840
So we're gonna call that the request is client dot request and then pass it.

82
00:05:21,840 --> 00:05:23,320
This configuration object.

83
00:05:23,320 --> 00:05:24,730
But we need to configure.

84
00:05:24,730 --> 00:05:29,410
Is that the path which is going to be specified with a colon first?

85
00:05:29,410 --> 00:05:35,850
so calling path is going to be slash because we're just requesting the base directory.

86
00:05:35,850 --> 00:05:41,350
Now we want to tell it that when a message is received,

87
00:05:41,350 --> 00:05:49,150
add the pieces of it together until you reach the end.

88
00:05:49,150 --> 00:05:52,570
So if you remember,

89
00:05:52,570 --> 00:05:59,340
parsing HDP payloads from incoming requests when we're building a P I data that's coming in

90
00:05:59,340 --> 00:06:00,690
is going to stream,

91
00:06:00,690 --> 00:06:02,430
and HDP two is no different.

92
00:06:02,430 --> 00:06:03,060
And in fact,

93
00:06:03,060 --> 00:06:06,050
HDP two is enforcing this kind of streaming thing.

94
00:06:06,050 --> 00:06:07,350
Previously,

95
00:06:07,350 --> 00:06:08,600
when we were creating http,

96
00:06:08,600 --> 00:06:12,780
servers were thinking of the client as something that sent a payload,

97
00:06:12,780 --> 00:06:15,060
and the server is something that received a payload.

98
00:06:15,060 --> 00:06:15,540
Remember,

99
00:06:15,540 --> 00:06:21,470
Now we're configuring the client were telling the client to stream in data from the server

100
00:06:21,470 --> 00:06:21,470
.

101
00:06:21,470 --> 00:06:24,590
That is because HDP to like Web sockets,

102
00:06:24,590 --> 00:06:31,070
opens up a full duplex connection where both client and server can send data back and forth

103
00:06:31,070 --> 00:06:33,200
to each other in these open streams.

104
00:06:33,200 --> 00:06:37,710
So we need to allow the client to read in payloads from the server,

105
00:06:37,710 --> 00:06:40,220
just as we would have the server do from the client.

106
00:06:40,220 --> 00:06:48,610
So we're going to say that the request on data it's going to expect a choke to come in and

107
00:06:48,610 --> 00:06:52,930
it's going to need to start assembling those chunks into a coherent strength.

108
00:06:52,930 --> 00:06:58,120
So we're going to start by saying string is empty and then as thes chunks come in,

109
00:06:58,120 --> 00:07:01,890
we append them to the end of this strength.

110
00:07:01,890 --> 00:07:06,250
Then when the message ends,

111
00:07:06,250 --> 00:07:08,130
log it out.

112
00:07:08,130 --> 00:07:11,500
So we want to say that on end.

113
00:07:11,500 --> 00:07:15,150
So when we know we reached the end of the message,

114
00:07:15,150 --> 00:07:21,350
we can stop assembling this string and just log out the results.

115
00:07:21,350 --> 00:07:23,050
Lastly,

116
00:07:23,050 --> 00:07:24,900
for this request to actually fire,

117
00:07:24,900 --> 00:07:28,100
we need to do what they call end the request.

118
00:07:28,100 --> 00:07:29,670
So call wreck.

119
00:07:29,670 --> 00:07:32,350
And now let's go back to the terminal.

120
00:07:32,350 --> 00:07:37,710
And this time I'm going to create two separate times so that you can see both the client

121
00:07:37,710 --> 00:07:38,980
and the server in action.

122
00:07:38,980 --> 00:07:43,470
In this first tab,

123
00:07:43,470 --> 00:07:46,350
I'm going to start up the HDP two server,

124
00:07:46,350 --> 00:07:55,590
so I'm gonna call it node misc slash HDP two server dot Js.

125
00:07:55,590 --> 00:07:59,050
As you can see,

126
00:07:59,050 --> 00:08:03,150
we get experimental warning that the HDP two module is experimental.

127
00:08:03,150 --> 00:08:08,980
But now we can go to our client and call node MISC.

128
00:08:08,980 --> 00:08:14,760
Http two client dot Js And as soon as I call this,

129
00:08:14,760 --> 00:08:18,750
this client should run through and make a connection to that server.

130
00:08:18,750 --> 00:08:20,950
All right,

131
00:08:20,950 --> 00:08:26,630
so we can see that the client received back this payload from the server.

132
00:08:26,630 --> 00:08:28,530
The server.

133
00:08:28,530 --> 00:08:33,640
We don't have anything logged out because we didn't send any payload from the client.

134
00:08:33,640 --> 00:08:34,840
This HTML,

135
00:08:34,840 --> 00:08:35,490
as you can see,

136
00:08:35,490 --> 00:08:39,820
is the exact same HTML that we told it to send out here.

137
00:08:39,820 --> 00:08:42,540
So if this client was a Web browser or something,

138
00:08:42,540 --> 00:08:44,950
it could make this connection to this server,

139
00:08:44,950 --> 00:08:47,020
open up the stream,

140
00:08:47,020 --> 00:08:49,820
receive this body coming down the stream,

141
00:08:49,820 --> 00:08:52,270
and then render this Web page for the user.

142
00:08:52,270 --> 00:09:00,630
So that is a brief overview of H two B two HB two streams and how you can use no to create

143
00:09:00,630 --> 00:09:04,490
both in age to be to server or an HDP to client,

144
00:09:04,490 --> 00:09:05,120
if you wish.

145
00:09:05,120 --> 00:09:07,200
So now let's move on to the next lecture.

