WEBVTT
ï»¿1
00:00:00.000 --> 00:00:03.680
before we jump into the technical details of how note works,

2
00:00:03.680 --> 00:00:06.440
Just sit back and relax for a minute.

3
00:00:06.440 --> 00:00:06.790
Here.

4
00:00:06.790 --> 00:00:11.970
We're going to go over the history of no Js from conception in 2009 to the present day.

5
00:00:11.970 --> 00:00:13.850
It's a fascinating story,

6
00:00:13.850 --> 00:00:15.770
and if you're a tech history buffer,

7
00:00:15.770 --> 00:00:17.670
just curious where all this came from.

8
00:00:17.670 --> 00:00:18.890
I know you'll love it.

9
00:00:18.890 --> 00:00:23.600
It's also important to the understanding of why node is used.

10
00:00:23.600 --> 00:00:29.310
The weight is why there's so much current emphasis on NPM modules and frameworks.

11
00:00:29.310 --> 00:00:30.570
Here we go.

12
00:00:30.570 --> 00:00:37.750
In March 2011 a video began circulating on YouTube and being emailed from one developer toe

13
00:00:37.750 --> 00:00:38.150
another.

14
00:00:38.150 --> 00:00:39.400
In the video,

15
00:00:39.400 --> 00:00:44.870
a scraggly twentysomething named Ryan Dahl is giving a lecture to a small group at a San

16
00:00:44.870 --> 00:00:48.860
Francisco PHP meet up about a new way of running Java script.

17
00:00:48.860 --> 00:00:49.710
On the server,

18
00:00:49.710 --> 00:00:56.020
he said he had packaged up Chrome's V eight runtime so that it could interpret JavaScript

19
00:00:56.020 --> 00:00:58.950
server side on any UNIX like machine.

20
00:00:58.950 --> 00:01:02.010
And then he had added some useful AP eyes on.

21
00:01:02.010 --> 00:01:06.250
He was calling his creation node Js.

22
00:01:06.250 --> 00:01:07.750
Eventually,

23
00:01:07.750 --> 00:01:13.110
this video would garner hundreds of thousands of views and helped propel note into the

24
00:01:13.110 --> 00:01:15.510
spotlight for many developers,

25
00:01:15.510 --> 00:01:16.510
myself included.

26
00:01:16.510 --> 00:01:23.050
The story of node started when we first watched that video in the summer or fall of 2011

27
00:01:23.050 --> 00:01:28.770
but what seemed to so many of us is the beginning was actually far from it.

28
00:01:28.770 --> 00:01:36.450
Ryan Dahl had authored Node two years earlier in 2009 and had been giving presentations at

29
00:01:36.450 --> 00:01:36.920
meet ups,

30
00:01:36.920 --> 00:01:38.870
conferences and elsewhere since then.

31
00:01:38.870 --> 00:01:43.700
Ryan had been node steadfast evangelist for years at that point,

32
00:01:43.700 --> 00:01:46.250
but the going had not been easy.

33
00:01:46.250 --> 00:01:49.400
His first presentation shortly after authoring the framework,

34
00:01:49.400 --> 00:01:55.100
was given at a Javascript centric conference in Europe in 2009 and it ended in a standing

35
00:01:55.100 --> 00:01:56.260
ovation for Ryan.

36
00:01:56.260 --> 00:01:57.550
But since then,

37
00:01:57.550 --> 00:02:01.380
the broader programming community hadn't been quite so welcoming.

38
00:02:01.380 --> 00:02:02.390
At first,

39
00:02:02.390 --> 00:02:04.160
the community just ignored Note.

40
00:02:04.160 --> 00:02:10.580
The original hacker news threat announcing Node received zero comments and only got eight

41
00:02:10.580 --> 00:02:11.150
points.

42
00:02:11.150 --> 00:02:12.960
If you know anything about hacker news,

43
00:02:12.960 --> 00:02:20.040
that not exactly of overwhelming response once people did start paying attention to it,

44
00:02:20.040 --> 00:02:23.550
the response wasn't particularly charitable towards the project.

45
00:02:23.550 --> 00:02:30.660
As one skeptical forum commenter wrote in 2009 what exactly is the driving force behind the

46
00:02:30.660 --> 00:02:32.780
desire to do everything in JavaScript.

47
00:02:32.780 --> 00:02:36.150
Is it just because we have a surplus of JavaScript programmers?

48
00:02:36.150 --> 00:02:40.400
It doesn't seem to me that this task is particularly well suited to JavaScript.

49
00:02:40.400 --> 00:02:42.050
As another said,

50
00:02:42.050 --> 00:02:42.830
Well,

51
00:02:42.830 --> 00:02:46.590
I think it's great that more and more developers are being exposed to boating network

52
00:02:46.590 --> 00:02:48.550
applications using a sink io,

53
00:02:48.550 --> 00:02:51.040
which I guess is a vented now via Know J.

54
00:02:51.040 --> 00:02:51.410
S.

55
00:02:51.410 --> 00:02:56.000
I think it's worthwhile to point out that the state of the art has moved well beyond these

56
00:02:56.000 --> 00:02:57.730
kind of call back frameworks.

57
00:02:57.730 --> 00:02:59.150
The reason is simple.

58
00:02:59.150 --> 00:03:03.620
It sucks programming and callback patterns on serious large projects.

59
00:03:03.620 --> 00:03:09.000
You end up with lots of routines that air six or seven callbacks chained together.

60
00:03:09.000 --> 00:03:13.250
And don't forget to attach Eric Callbacks as well at each point.

61
00:03:13.250 --> 00:03:15.750
And as another said,

62
00:03:15.750 --> 00:03:19.250
I think JavaScript is a fine little language,

63
00:03:19.250 --> 00:03:23.560
but I don't make my server side language decisions based on what happens to be in the

64
00:03:23.560 --> 00:03:24.050
browser.

65
00:03:24.050 --> 00:03:28.700
To think that a language required for use in such a constrained environment is just

66
00:03:28.700 --> 00:03:30.000
coincidentally,

67
00:03:30.000 --> 00:03:32.420
also the best language to use server side,

68
00:03:32.420 --> 00:03:35.680
where people have been doing event best programming for decades,

69
00:03:35.680 --> 00:03:37.380
seems unlikely.

70
00:03:37.380 --> 00:03:39.130
It would be Aziz ridiculous,

71
00:03:39.130 --> 00:03:43.550
asserting that we should all use postscript in the browser because that's a standard we've

72
00:03:43.550 --> 00:03:45.950
been using in printers for the last 20 years.

73
00:03:45.950 --> 00:03:48.020
As such,

74
00:03:48.020 --> 00:03:51.750
Ryan was facing a decidedly uphill battle.

75
00:03:51.750 --> 00:03:57.920
Though most full Stack developer has had to use JavaScript on the browser with regularity,

76
00:03:57.920 --> 00:04:01.550
many were not comfortable with the idea of running it on the server.

77
00:04:01.550 --> 00:04:02.710
Besides,

78
00:04:02.710 --> 00:04:07.240
in 2009 there was already a hot new thing to embrace.

79
00:04:07.240 --> 00:04:08.130
Ruby on,

80
00:04:08.130 --> 00:04:08.950
rails to,

81
00:04:08.950 --> 00:04:15.400
and every hipster worth his weight in avocado toast was on the ruby bandwagon back then.

82
00:04:15.400 --> 00:04:17.190
They didn't need node.

83
00:04:17.190 --> 00:04:18.250
They didn't want it.

84
00:04:18.250 --> 00:04:25.690
But in 2010 as Ryan continued pounding the pavement evangelizing his creation,

85
00:04:25.690 --> 00:04:27.630
his luck started to change.

86
00:04:27.630 --> 00:04:28.540
First.

87
00:04:28.540 --> 00:04:35.770
In January 2010 Isaac Schlueter created a package manager he called Ackley and PM,

88
00:04:35.770 --> 00:04:37.390
the node package manager.

89
00:04:37.390 --> 00:04:41.160
This allowed developers to share no Js modules,

90
00:04:41.160 --> 00:04:41.600
a k A.

91
00:04:41.600 --> 00:04:43.950
Packages with each other quite easily.

92
00:04:43.950 --> 00:04:49.790
No longer did a deaf have to search through disparate projects hosted in various ways in

93
00:04:49.790 --> 00:04:54.370
various programming languages to find the one that suited their needs and runtime.

94
00:04:54.370 --> 00:05:01.340
Every package on NPM was structured in a way to make it usable in anyone else's No Js

95
00:05:01.340 --> 00:05:01.950
project,

96
00:05:01.950 --> 00:05:06.870
and each one was semantically version so that the user could manage their dependencies in a

97
00:05:06.870 --> 00:05:07.550
predictable way.

98
00:05:07.550 --> 00:05:10.790
It was also convenient with NPM.

99
00:05:10.790 --> 00:05:13.270
There was no get cloning or sitting up.

100
00:05:13.270 --> 00:05:14.560
Get sub modules.

101
00:05:14.560 --> 00:05:20.760
Just add the dependency toe one list called a package of Jason Run one Command and PM

102
00:05:20.760 --> 00:05:24.640
Install in Boo The library's living in your project now,

103
00:05:24.640 --> 00:05:26.280
and it's available for use.

104
00:05:26.280 --> 00:05:33.570
This practicality made node much more user friendly and allow developers to externalize the

105
00:05:33.570 --> 00:05:35.250
time costs of bootstrapping.

106
00:05:35.250 --> 00:05:37.250
Their projects are addressing bugs in their code.

107
00:05:37.250 --> 00:05:39.640
One developer could tackle one issue,

108
00:05:39.640 --> 00:05:40.050
Let's say,

109
00:05:40.050 --> 00:05:43.140
integrating with a database while the other could tackle another,

110
00:05:43.140 --> 00:05:43.520
Let's say,

111
00:05:43.520 --> 00:05:44.650
integrating with an A P I.

112
00:05:44.650 --> 00:05:47.050
And then they could share their code with each other.

113
00:05:47.050 --> 00:05:51.680
This collaborative sharing model was an idea whose time had come,

114
00:05:51.680 --> 00:05:56.410
and it greatly reduced the burden on each developer who attempted to build a project in

115
00:05:56.410 --> 00:05:56.850
note.

116
00:05:56.850 --> 00:05:58.270
After all,

117
00:05:58.270 --> 00:05:59.880
in these early days,

118
00:05:59.880 --> 00:06:02.480
note was not only unstable,

119
00:06:02.480 --> 00:06:06.280
but it gave cryptic error messages when something went wrong.

120
00:06:06.280 --> 00:06:11.220
The know J s a P I back then was nothing like the LTs releases.

121
00:06:11.220 --> 00:06:16.360
We get to work with now and back then a developer might spend a huge part of their time

122
00:06:16.360 --> 00:06:18.510
tracking down obscure bugs.

123
00:06:18.510 --> 00:06:23.750
NPM made writing node much less isolating and much less frustrating.

124
00:06:23.750 --> 00:06:28.650
When one engineer figured out how to solve a problem or build a feature in a way that

125
00:06:28.650 --> 00:06:30.830
didn't throw convoluted error messages,

126
00:06:30.830 --> 00:06:34.240
he could share that solution with everyone else.

127
00:06:34.240 --> 00:06:35.800
And for everyone else.

128
00:06:35.800 --> 00:06:39.060
That was one last bug that they had to hunt down on their own.

129
00:06:39.060 --> 00:06:41.100
Another early days,

130
00:06:41.100 --> 00:06:44.120
Boon for Node came from symbiosis or synergy,

131
00:06:44.120 --> 00:06:45.010
with a small,

132
00:06:45.010 --> 00:06:50.570
obscure database project that had been built around the same time is Node and was also

133
00:06:50.570 --> 00:06:56.000
experimenting with V eight and was also being evangelized around the tech community at that

134
00:06:56.000 --> 00:06:56.550
time.

135
00:06:56.550 --> 00:07:04.250
Mongo dp In early 2009 there were a few entrance competing for the title of Ah no sequel

136
00:07:04.250 --> 00:07:05.660
database of choice.

137
00:07:05.660 --> 00:07:06.630
Couch DB,

138
00:07:06.630 --> 00:07:12.660
reddest React and others were all independently trying to pitch potential use cases to

139
00:07:12.660 --> 00:07:13.480
developers.

140
00:07:13.480 --> 00:07:15.560
But they were all getting lukewarm reception.

141
00:07:15.560 --> 00:07:20.250
Much of development world wasn't sold on the idea of no sequel.

142
00:07:20.250 --> 00:07:20.920
At that time,

143
00:07:20.920 --> 00:07:22.310
it was still a new idea,

144
00:07:22.310 --> 00:07:26.050
and besides many Dev's already had their databases of choice.

145
00:07:26.050 --> 00:07:27.080
Ruby on rails.

146
00:07:27.080 --> 00:07:32.710
Folk tended to like post rests PHP developers used my sequel almost exclusively.

147
00:07:32.710 --> 00:07:37.380
Still others used or coal or Microsoft sequel Server Or what have you?

148
00:07:37.380 --> 00:07:43.760
Why would any pragmatic developer want to switch his tooling around to embrace a new DB,

149
00:07:43.760 --> 00:07:48.350
especially one that worked in a way so completely different than anything they were used to

150
00:07:48.350 --> 00:07:48.350
?

151
00:07:48.350 --> 00:07:50.880
One that didn't even support sequel queries?

152
00:07:50.880 --> 00:07:57.720
One that store data in a binary form of Jason Ah format that was largely unfamiliar to most

153
00:07:57.720 --> 00:08:00.570
Debs and unsupported in many languages at that time,

154
00:08:00.570 --> 00:08:06.640
even developers who routinely integrated with third party AP eyes had no use for Jason as

155
00:08:06.640 --> 00:08:12.090
most AP eyes exposed themselves over XML or soap at that time.

156
00:08:12.090 --> 00:08:14.560
But in the late two thousands,

157
00:08:14.560 --> 00:08:19.180
the meteoric rise of social media sites started to change.

158
00:08:19.180 --> 00:08:25.670
That AP eyes like Twitter's started being released and became wildly popular among

159
00:08:25.670 --> 00:08:26.370
developers.

160
00:08:26.370 --> 00:08:32.850
These AP eyes almost exclusively exposed themselves over rest with Jason.

161
00:08:32.850 --> 00:08:34.670
So in the late two thousands,

162
00:08:34.670 --> 00:08:38.550
any developer who wanted to integrate with social media AP eyes,

163
00:08:38.550 --> 00:08:44.710
which was many of them had to become familiar with Jason and the languages and frameworks

164
00:08:44.710 --> 00:08:47.250
they worked in had to begin supporting it.

165
00:08:47.250 --> 00:08:53.750
So as social media sites grew in popularity and standardized things like Ole Off and Rest

166
00:08:53.750 --> 00:08:55.490
the use of Jason AP,

167
00:08:55.490 --> 00:09:00.370
I spread and soon most new public AP eyes were being released.

168
00:09:00.370 --> 00:09:02.120
Rest feli with Jason.

169
00:09:02.120 --> 00:09:05.340
So then Jason became everyone's problem.

170
00:09:05.340 --> 00:09:08.850
And as more and more developers were fetching data in Jason,

171
00:09:08.850 --> 00:09:15.160
the idea of and the attractiveness of a Jason based document store started to make sense to

172
00:09:15.160 --> 00:09:15.490
them.

173
00:09:15.490 --> 00:09:21.300
Fetching Jason documents from an A P I and storing them in a traditional columnar data

174
00:09:21.300 --> 00:09:25.800
store like an rd bms took a lot of extra work.

175
00:09:25.800 --> 00:09:30.900
You had to make sure there was a column for every key and sub key within the Jason document

176
00:09:30.900 --> 00:09:30.900
.

177
00:09:30.900 --> 00:09:34.690
And if the document change your schema headed changes well with ski Melis,

178
00:09:34.690 --> 00:09:37.150
Jason document stores like Mongo,

179
00:09:37.150 --> 00:09:39.870
developers face no such hurdles.

180
00:09:39.870 --> 00:09:42.740
They could simply vetch adjacent document from an A p.

181
00:09:42.740 --> 00:09:44.500
I send it to their DB,

182
00:09:44.500 --> 00:09:49.520
as is no more flattening the object or translating it from common format to Jason object

183
00:09:49.520 --> 00:09:50.190
and back again.

184
00:09:50.190 --> 00:09:52.750
Mongo just made their lives easier,

185
00:09:52.750 --> 00:09:59.610
but still working with Jason objects on the back end with a language like PHP or Java.

186
00:09:59.610 --> 00:10:02.400
Ruby was still no picnic.

187
00:10:02.400 --> 00:10:09.480
If the language didn't natively understand nested object structures and Jason Data types,

188
00:10:09.480 --> 00:10:16.230
a developer had to manage to ideas of every Jason object in parallel the actual Jason

189
00:10:16.230 --> 00:10:20.660
representation of the object as it might be stored in Mongo or might be fetched from an A P

190
00:10:20.660 --> 00:10:25.830
I and the object structure that his language was presenting to him to allow him to

191
00:10:25.830 --> 00:10:26.850
manipulate the data.

192
00:10:26.850 --> 00:10:31.450
These mental hurdles were painful and mistakes were common.

193
00:10:31.450 --> 00:10:36.150
Enter no Js since node was just JavaScript.

194
00:10:36.150 --> 00:10:37.280
Jason,

195
00:10:37.280 --> 00:10:39.740
which stands for JavaScript Object notation,

196
00:10:39.740 --> 00:10:41.090
was in native construct.

197
00:10:41.090 --> 00:10:43.710
Knowed represented the object format,

198
00:10:43.710 --> 00:10:44.420
the keys,

199
00:10:44.420 --> 00:10:50.700
values and nested objects in the same way as it was being represented in the D B and in the

200
00:10:50.700 --> 00:10:55.480
external AP eyes the developer was integrating with So in note,

201
00:10:55.480 --> 00:10:58.230
Mongo found a partner in arms,

202
00:10:58.230 --> 00:11:01.800
though the projects weren't linked by any official doctrine.

203
00:11:01.800 --> 00:11:05.570
By early 2010 their fates had become intertwined,

204
00:11:05.570 --> 00:11:10.380
and they were both benefiting from the rise of Jason and Jason AP eyes.

205
00:11:10.380 --> 00:11:11.320
Together,

206
00:11:11.320 --> 00:11:15.640
the projects were doing much more than the sum of their parts apart.

207
00:11:15.640 --> 00:11:17.350
They had major issues.

208
00:11:17.350 --> 00:11:20.260
If a no Js dev wasn't using Mongo,

209
00:11:20.260 --> 00:11:23.270
where would he send his Js objects for storage?

210
00:11:23.270 --> 00:11:26.280
And if a mongo user wasn't using no Js,

211
00:11:26.280 --> 00:11:31.370
how painful would it be to represent and manipulate the data objects within his language of

212
00:11:31.370 --> 00:11:31.860
choice,

213
00:11:31.860 --> 00:11:35.600
Mongo and Node solved each other's problems.

214
00:11:35.600 --> 00:11:37.760
But unfortunately for Ryan Dahl,

215
00:11:37.760 --> 00:11:41.850
by mid 2010 there was still significant resistance to know J.

216
00:11:41.850 --> 00:11:45.290
S and many developers were openly skeptic,

217
00:11:45.290 --> 00:11:47.520
if not hostile to the idea,

218
00:11:47.520 --> 00:11:51.090
though that was beginning to thaw ever so slightly.

219
00:11:51.090 --> 00:11:54.060
In July of 2010 Google,

220
00:11:54.060 --> 00:12:00.160
the authors of the V eight run time that no Js is built on top of invited Ryan to come

221
00:12:00.160 --> 00:12:02.140
speak for some of their staff,

222
00:12:02.140 --> 00:12:04.660
is part of a lecture series on new technology.

223
00:12:04.660 --> 00:12:09.260
But when the day came and Ryan approached the podium to speak,

224
00:12:09.260 --> 00:12:15.820
even the Google employees who introduced him couldn't resist expressing his skepticism and

225
00:12:15.820 --> 00:12:20.390
explaining how tenuous his support for her this no Js idea Waas.

226
00:12:20.390 --> 00:12:21.690
In his opening remarks,

227
00:12:21.690 --> 00:12:22.750
the employee exclaimed,

228
00:12:22.750 --> 00:12:25.200
This guy is controversial!

229
00:12:25.200 --> 00:12:26.860
When I first heard of the project,

230
00:12:26.860 --> 00:12:27.720
I didn't get it.

231
00:12:27.720 --> 00:12:33.150
Why is this guy trying to run Java script on the server when everyone else is trying to run

232
00:12:33.150 --> 00:12:34.650
Java on the client.

233
00:12:34.650 --> 00:12:40.530
The version of Node that Ryan presented that day was still bare bones and unstable,

234
00:12:40.530 --> 00:12:41.560
but it was maturing,

235
00:12:41.560 --> 00:12:43.850
paring it conceptually,

236
00:12:43.850 --> 00:12:46.630
with mongo minutes appeal stronger,

237
00:12:46.630 --> 00:12:53.150
and the package sharing by NPM made a project in node look less daunting for everyone

238
00:12:53.150 --> 00:12:53.650
involved.

239
00:12:53.650 --> 00:12:58.960
But working in node was still a lonely manual process.

240
00:12:58.960 --> 00:12:59.700
At this point,

241
00:12:59.700 --> 00:13:00.950
there were many libraries,

242
00:13:00.950 --> 00:13:02.820
but no particularly popular frameworks,

243
00:13:02.820 --> 00:13:07.120
the likes of which a full stack dev of average experience would need before they could

244
00:13:07.120 --> 00:13:08.080
embrace note.

245
00:13:08.080 --> 00:13:08.540
Fully.

246
00:13:08.540 --> 00:13:11.410
Integrating with Mongo directly from node,

247
00:13:11.410 --> 00:13:11.900
however,

248
00:13:11.900 --> 00:13:17.450
was still a bit of a pain and required a significant amount of work as well as a low level

249
00:13:17.450 --> 00:13:20.050
understanding of notes networking capabilities.

250
00:13:20.050 --> 00:13:21.640
As you can see,

251
00:13:21.640 --> 00:13:28.370
by mid 2010 node as a whole still needed a miracle if it was ever going to grab mainstream

252
00:13:28.370 --> 00:13:28.850
appeal.

253
00:13:28.850 --> 00:13:31.430
But over the next 12 months,

254
00:13:31.430 --> 00:13:34.240
that miracle would materialize,

255
00:13:34.240 --> 00:13:40.360
ushered in by a number of creative early adopters and unrelated third parties who built and

256
00:13:40.360 --> 00:13:46.290
release projects one after another that turned node from a strange choice to the clear

257
00:13:46.290 --> 00:13:48.050
choice for many developers.

258
00:13:48.050 --> 00:13:49.320
In no particular order,

259
00:13:49.320 --> 00:13:51.780
those projects were expressed Js,

260
00:13:51.780 --> 00:13:55.300
angular mongoose and No Js for Windows.

261
00:13:55.300 --> 00:13:57.950
The NBC framework,

262
00:13:57.950 --> 00:14:00.140
aptly named Express Js,

263
00:14:00.140 --> 00:14:03.210
was released in November 2010 by T.

264
00:14:03.210 --> 00:14:03.450
J.

265
00:14:03.450 --> 00:14:03.870
Holloway.

266
00:14:03.870 --> 00:14:06.760
Chuck Express was in many ways,

267
00:14:06.760 --> 00:14:08.650
no Js for the masses.

268
00:14:08.650 --> 00:14:14.630
T J had abstracted away much of the cumbersome border plate that made Node so difficult to

269
00:14:14.630 --> 00:14:15.570
get up to speed with,

270
00:14:15.570 --> 00:14:23.040
and had somehow managed to create a set of very predictable and stable AP eyes on top of

271
00:14:23.040 --> 00:14:23.470
nodes.

272
00:14:23.470 --> 00:14:25.830
Unstable core for ruby on rails,

273
00:14:25.830 --> 00:14:26.320
Developers,

274
00:14:26.320 --> 00:14:27.860
especially Express,

275
00:14:27.860 --> 00:14:28.970
was a game changer,

276
00:14:28.970 --> 00:14:35.170
an NBC not too dissimilar from rails that would allow them to write JavaScript or,

277
00:14:35.170 --> 00:14:37.840
if they wanted coffee script a new,

278
00:14:37.840 --> 00:14:43.850
more ruby like language that easily transpired to drop a script and that many ruby on rails

279
00:14:43.850 --> 00:14:46.640
developers were growing fond of so fond of.

280
00:14:46.640 --> 00:14:47.130
In fact,

281
00:14:47.130 --> 00:14:50.850
that coffee script would become standard on ruby and rails in 2011.

282
00:14:50.850 --> 00:14:53.600
But in 2010 prior to that,

283
00:14:53.600 --> 00:14:59.030
many early Ruby Debs were growing weary of ruby on rails but had nowhere else to go.

284
00:14:59.030 --> 00:15:04.330
Express gave these developers an easy way to get their feet wet in a framework structure

285
00:15:04.330 --> 00:15:05.570
they already understood.

286
00:15:05.570 --> 00:15:11.680
Another key project released in February 2011 was monkeys and easy to use.

287
00:15:11.680 --> 00:15:15.630
No Js driver for Mongo With Mongoose,

288
00:15:15.630 --> 00:15:20.360
anyone could easily plug up Mongo to note within a few minutes rather than a few hours.

289
00:15:20.360 --> 00:15:24.810
This made building Hello World projects and fund hackathon projects in node.

290
00:15:24.810 --> 00:15:25.180
Ah,

291
00:15:25.180 --> 00:15:26.370
lot more practical.

292
00:15:26.370 --> 00:15:29.600
One more key development was on the front end,

293
00:15:29.600 --> 00:15:30.270
not the back.

294
00:15:30.270 --> 00:15:33.650
In October 2010 Google release angular,

295
00:15:33.650 --> 00:15:37.470
the front end Web framework that dealt heavily with two way binding,

296
00:15:37.470 --> 00:15:41.980
the act of sinking data objects represented on the client with those represented on the

297
00:15:41.980 --> 00:15:44.670
server and in the database In angular,

298
00:15:44.670 --> 00:15:47.390
Both Node and Mongo found their champion.

299
00:15:47.390 --> 00:15:49.510
If a dead was working in angular,

300
00:15:49.510 --> 00:15:55.550
it was so cumbersome toe work within back ends and DBS that didn't understand Jason that

301
00:15:55.550 --> 00:15:57.450
the project would be very slow going,

302
00:15:57.450 --> 00:16:04.920
but with no Js plus mongo plus mongoose that Jason objects represented on the front end

303
00:16:04.920 --> 00:16:10.040
within angular could easily and intuitively be sink to the back end in the database,

304
00:16:10.040 --> 00:16:15.670
with node and mongo by their sides embracing two way binding became a cinch.

305
00:16:15.670 --> 00:16:20.890
And those developers who chose this stack quickly gained a competitive edge when building

306
00:16:20.890 --> 00:16:22.440
real time applications.

307
00:16:22.440 --> 00:16:23.950
And because of this advantage,

308
00:16:23.950 --> 00:16:28.520
the so called mean stack was born mean stands for Mongo Express.

309
00:16:28.520 --> 00:16:29.120
Angular,

310
00:16:29.120 --> 00:16:30.010
No Js.

311
00:16:30.010 --> 00:16:34.740
But it could just as easily stand for Mongoose Express.

312
00:16:34.740 --> 00:16:35.630
Angular.

313
00:16:35.630 --> 00:16:36.450
NPM,

314
00:16:36.450 --> 00:16:40.710
I mean quickly became what lamp and R.

315
00:16:40.710 --> 00:16:40.870
O.

316
00:16:40.870 --> 00:16:44.170
R stacks had been to a previous generation of deaths.

317
00:16:44.170 --> 00:16:49.080
Everything they needed to build the kind of applications that were demanded in their day

318
00:16:49.080 --> 00:16:56.740
with relative ease for those building in raw no Js outside of the means deck node remain

319
00:16:56.740 --> 00:16:57.400
cumbersome,

320
00:16:57.400 --> 00:16:59.550
unstable and hard to debug.

321
00:16:59.550 --> 00:17:04.900
These limitations were due in no small part to the fact that it was a one man project with

322
00:17:04.900 --> 00:17:10.390
a loose association of contributors and no sponsoring entity or governing organization to

323
00:17:10.390 --> 00:17:12.660
manage a facilitate the progress of the project.

324
00:17:12.660 --> 00:17:13.920
In short,

325
00:17:13.920 --> 00:17:14.700
to become,

326
00:17:14.700 --> 00:17:15.960
as Ryan Dahl had said,

327
00:17:15.960 --> 00:17:23.080
the next PHP node was going to need a corporate sponsor In a block post in November 2010

328
00:17:23.080 --> 00:17:28.610
Dull explained the situation and introduced much of development community to a company

329
00:17:28.610 --> 00:17:34.630
called Joint who had hired him and was purchasing the name and the trademark for node and

330
00:17:34.630 --> 00:17:36.780
becoming the official steward of the project.

331
00:17:36.780 --> 00:17:40.940
Giant stewardship of the project promised stability,

332
00:17:40.940 --> 00:17:46.690
security and a scaled up development effort on node core and the tooling surrounding it and

333
00:17:46.690 --> 00:17:47.660
within a year,

334
00:17:47.660 --> 00:17:52.340
joint had delivered on this promise and gave the next boon to know J.

335
00:17:52.340 --> 00:17:52.790
S.

336
00:17:52.790 --> 00:17:59.920
In 2011 join in a partnership with Microsoft released Node version 0.6 point zero,

337
00:17:59.920 --> 00:18:03.550
which included support for Windows opening Noto,

338
00:18:03.550 --> 00:18:07.720
a much wider audience than just OS X and Linux space developers.

339
00:18:07.720 --> 00:18:11.560
While many developers build software for Linux machines,

340
00:18:11.560 --> 00:18:14.510
they did their local work on Windows machines,

341
00:18:14.510 --> 00:18:20.110
and a Windows version of node was crucial to them adopting the platform and incorporating

342
00:18:20.110 --> 00:18:21.760
it into their development cycle.

343
00:18:21.760 --> 00:18:29.550
By the fall of 2011 around the time the video Ryan dollars March 2011 talk began

344
00:18:29.550 --> 00:18:32.150
circulating heavily in development circles.

345
00:18:32.150 --> 00:18:36.710
All of these developments express Js angular mongoose,

346
00:18:36.710 --> 00:18:39.420
no jails for Windows they'd already taken place,

347
00:18:39.420 --> 00:18:41.320
and thanks to giants governance,

348
00:18:41.320 --> 00:18:42.090
the projects,

349
00:18:42.090 --> 00:18:45.970
it was getting more stable and easier to use with every release.

350
00:18:45.970 --> 00:18:47.260
Additionally,

351
00:18:47.260 --> 00:18:50.210
Jason Ap eyes were spreading like wildfire,

352
00:18:50.210 --> 00:18:54.460
making mean stacks in no Js in general much more attractive.

353
00:18:54.460 --> 00:18:59.290
And nodes still had its creator and evangelist extraordinaire Ryan dull,

354
00:18:59.290 --> 00:19:02.100
pounding the pavement all over the Bay Area and abroad,

355
00:19:02.100 --> 00:19:03.730
spreading the gospel of note.

356
00:19:03.730 --> 00:19:10.760
So by the end of 2011 all these forces had come together and manifested exactly the miracle

357
00:19:10.760 --> 00:19:12.010
that node needed,

358
00:19:12.010 --> 00:19:17.460
cementing its place as a force to be reckoned with and a top tier platform on which to

359
00:19:17.460 --> 00:19:19.190
build real time applications,

360
00:19:19.190 --> 00:19:23.050
traditional NBC's and everything else for the Modern Web.

361
00:19:23.050 --> 00:19:26.140
From that time until today,

362
00:19:26.140 --> 00:19:27.920
under Giants governance,

363
00:19:27.920 --> 00:19:32.580
the No Js project grew and changed and largely predictable ways.

364
00:19:32.580 --> 00:19:34.340
In 2012 Doll,

365
00:19:34.340 --> 00:19:36.790
Step Aside and promoted Isaac Schlueter,

366
00:19:36.790 --> 00:19:39.760
the creative NPM toe lead the note project instead.

367
00:19:39.760 --> 00:19:44.920
He subsequently stepped down and promoted TJ Fontaine to take his place.

368
00:19:44.920 --> 00:19:50.130
Then in 2015 due to a rift that have formed between groups of no developers,

369
00:19:50.130 --> 00:19:52.900
some now calling their project ioo dot Js.

370
00:19:52.900 --> 00:19:53.720
Instead of node,

371
00:19:53.720 --> 00:19:59.400
governance of the project was taken out of giants hands and placed in a new neutral no Js

372
00:19:59.400 --> 00:20:00.050
foundation.

373
00:20:00.050 --> 00:20:04.640
This new organisational body allow all sides to come together,

374
00:20:04.640 --> 00:20:07.030
steer the project and rejoined forces.

375
00:20:07.030 --> 00:20:12.840
So the time of this writing no Js is still under the governance of the know J s foundation

376
00:20:12.840 --> 00:20:12.840
.

377
00:20:12.840 --> 00:20:14.340
No.

378
00:20:14.340 --> 00:20:17.520
Its popularity has grown ever stronger since its early days,

379
00:20:17.520 --> 00:20:21.550
though the faces associated with it have largely changed over time.

380
00:20:21.550 --> 00:20:23.490
Early pioneers like T.

381
00:20:23.490 --> 00:20:23.660
J.

382
00:20:23.660 --> 00:20:27.120
Holloway Chuck have since moved on to other projects and platforms,

383
00:20:27.120 --> 00:20:30.940
replaced by equally prolific developers like Cinder Saurus,

384
00:20:30.940 --> 00:20:32.150
James Halladay,

385
00:20:32.150 --> 00:20:36.350
Gay Subject Ideas Mani and Patraeus Crimmins.

386
00:20:36.350 --> 00:20:42.700
The project reached a significant level of stability in 2015 and release its official non

387
00:20:42.700 --> 00:20:47.370
beta version according to the generally accepted rules of semantic version ING,

388
00:20:47.370 --> 00:20:51.760
since all versions of Noah prior to then had been less than 1.0 point.

389
00:20:51.760 --> 00:20:52.310
Oh,

390
00:20:52.310 --> 00:20:54.420
they were actually just some kind of beta,

391
00:20:54.420 --> 00:20:55.770
or non public release,

392
00:20:55.770 --> 00:20:59.440
despite some of them being LTs releases in 2015.

393
00:20:59.440 --> 00:21:00.690
Io Dutch Oh yes,

394
00:21:00.690 --> 00:21:01.760
released version one,

395
00:21:01.760 --> 00:21:07.790
and once i o dot Js was merged back into node under the new umbrella organisation Node

396
00:21:07.790 --> 00:21:09.470
released 4.0,

397
00:21:09.470 --> 00:21:10.450
later that same year,

398
00:21:10.450 --> 00:21:16.110
nodes rise to adoption has been unexpected and impressive,

399
00:21:16.110 --> 00:21:19.170
But something happened during notes rise to fame,

400
00:21:19.170 --> 00:21:25.630
something not quite worth celebrating and that is this many of the new breed of no Js

401
00:21:25.630 --> 00:21:26.470
developers.

402
00:21:26.470 --> 00:21:32.790
Those who adopted the platform after 2012 or so adopted the platform not because of nodes

403
00:21:32.790 --> 00:21:39.450
runtime its Iot model that cli or it's a P I but because of its ecosystem,

404
00:21:39.450 --> 00:21:45.110
in the speed and ease with which they could build applications with tools like express and

405
00:21:45.110 --> 00:21:51.370
with the plethora of available in PM modules without having toe learn note itself or care

406
00:21:51.370 --> 00:21:52.480
much about how it worked.

407
00:21:52.480 --> 00:21:56.630
Today we have an entire generation of developers.

408
00:21:56.630 --> 00:21:57.800
They know the means,

409
00:21:57.800 --> 00:22:02.520
stack that no mongoose and underscore and angular in bootstrap,

410
00:22:02.520 --> 00:22:05.030
and they build applications on node using these tools.

411
00:22:05.030 --> 00:22:08.950
But they know virtually nothing of no Js itself.

412
00:22:08.950 --> 00:22:11.450
You can see why the ecosystem,

413
00:22:11.450 --> 00:22:17.100
not the a p I is what propelled node from a quiet backwater project to a mainstream

414
00:22:17.100 --> 00:22:17.610
juggernaut.

415
00:22:17.610 --> 00:22:19.170
NPM,

416
00:22:19.170 --> 00:22:20.240
not node,

417
00:22:20.240 --> 00:22:22.280
is what attracts most developers.

418
00:22:22.280 --> 00:22:27.730
Mean not node is what many deaf specialize in mongoose,

419
00:22:27.730 --> 00:22:28.810
not Mongo,

420
00:22:28.810 --> 00:22:29.240
is met.

421
00:22:29.240 --> 00:22:35.640
Many Debs understand how to integrate with this ecosystem of libraries and frameworks and

422
00:22:35.640 --> 00:22:36.520
projects,

423
00:22:36.520 --> 00:22:41.080
helped propel node to stardom and help the community gain so much.

424
00:22:41.080 --> 00:22:44.260
But that doesn't mean we haven't lost something in return.

425
00:22:44.260 --> 00:22:50.720
It's especially ironic that as the know J s a P I has been stabilizing and has finally

426
00:22:50.720 --> 00:22:56.130
become a fully featured A p I that provides so much to developers out of the box,

427
00:22:56.130 --> 00:23:02.940
developers have all but abandoned it in favor of the libraries and frameworks built on top

428
00:23:02.940 --> 00:23:03.310
of it.

429
00:23:03.310 --> 00:23:05.630
In the next lecture,

430
00:23:05.630 --> 00:23:08.130
we start reversing that trend.

431
00:23:08.130 --> 00:23:14.840
We're going to dive into the nuts and bolts of how no Js and its underlying V eight runtime

432
00:23:14.840 --> 00:23:15.780
really work.

