WEBVTT
ï»¿1
00:00:00.000 --> 00:00:04.220
in this lecture,

2
00:00:04.220 --> 00:00:08.520
we're going to explore user data Graham Protocol or UDP,

3
00:00:08.520 --> 00:00:15.370
which comes in the UDP data Graham module that no provides UDP.

4
00:00:15.370 --> 00:00:16.660
If you're unfamiliar with it,

5
00:00:16.660 --> 00:00:18.420
it's part of the core PPI stack.

6
00:00:18.420 --> 00:00:20.710
Like he CPS and the primary differences,

7
00:00:20.710 --> 00:00:25.570
you can think of most TCP HDP connections as handshakes.

8
00:00:25.570 --> 00:00:28.870
You can think of one node reaching out to another dem,

9
00:00:28.870 --> 00:00:32.240
agreeing on a protocol and sharing information between them.

10
00:00:32.240 --> 00:00:40.850
UDP is more like one node sending off information to another in hopes or on the assumption

11
00:00:40.850 --> 00:00:43.170
that that recipient might receive it.

12
00:00:43.170 --> 00:00:47.750
UDP is like mailing letters off to someone and just assuming that they're reading them.

13
00:00:47.750 --> 00:00:55.010
Whereas HDP is more like initiating a phone call between two points and confirming that

14
00:00:55.010 --> 00:00:56.020
you're talking to each other.

15
00:00:56.020 --> 00:00:59.950
UDP is used often in streaming services.

16
00:00:59.950 --> 00:01:03.200
If you stream videos or the like,

17
00:01:03.200 --> 00:01:07.050
then you've likely encountered UDP for this demo.

18
00:01:07.050 --> 00:01:11.390
We are going to build a very simple UDP server and you'd be client.

19
00:01:11.390 --> 00:01:13.610
So let's start with the server first.

20
00:01:13.610 --> 00:01:16.060
I'm going to create these two files.

21
00:01:16.060 --> 00:01:22.940
The first is touch miscellaneous UDP dash server dot Js.

22
00:01:22.940 --> 00:01:31.370
Then I'm gonna create touch miscellaneous UDP dash client dot Js Now that those exists,

23
00:01:31.370 --> 00:01:33.390
open up to server at the top.

24
00:01:33.390 --> 00:01:43.930
I'm going to write a comment that this is an example UDP server and that we're creating a

25
00:01:43.930 --> 00:01:49.550
UDP data Graham server listening on 6000.

26
00:01:49.550 --> 00:01:52.000
Next,

27
00:01:52.000 --> 00:01:53.810
we're gonna have our dependencies.

28
00:01:53.810 --> 00:01:57.650
We're going to use the data Graham module.

29
00:01:57.650 --> 00:02:05.780
So we're going to say that Di Gram equals require di gram,

30
00:02:05.780 --> 00:02:09.050
which is how note refers to the data Graham module.

31
00:02:09.050 --> 00:02:11.290
But in order to create a server,

32
00:02:11.290 --> 00:02:20.090
we really only need one part going to say that we are creating a server and we're going to

33
00:02:20.090 --> 00:02:26.660
call off our server equal is Di Gram create socket.

34
00:02:26.660 --> 00:02:34.110
And then we're gonna pass it UDP four as the specific type of UDP that it should create.

35
00:02:34.110 --> 00:02:42.390
Now we need to configure what should happen if the server receives an incoming connection

36
00:02:42.390 --> 00:02:46.370
because the server is going to send stuff down to the client.

37
00:02:46.370 --> 00:02:49.550
But it still was going to receive the initial collection from the client.

38
00:02:49.550 --> 00:02:54.350
So we need to call server on message.

39
00:02:54.350 --> 00:03:05.500
We're gonna provide a call back and expect back a message buffer and the center Now we need

40
00:03:05.500 --> 00:03:14.860
to do something with an incoming message core do something with the center was identified.

41
00:03:14.860 --> 00:03:20.840
So we're gonna say that the message string is going to equal message,

42
00:03:20.840 --> 00:03:28.270
buffer to strength and we can just log out whatever that is that they said a message

43
00:03:28.270 --> 00:03:28.600
straight.

44
00:03:28.600 --> 00:03:31.640
Lastly,

45
00:03:31.640 --> 00:03:33.690
we need to start the server listening,

46
00:03:33.690 --> 00:03:40.450
so we're gonna find to 6000 so server bind and pass it 6000.

47
00:03:40.450 --> 00:03:41.080
Now,

48
00:03:41.080 --> 00:03:42.670
that's create that client.

49
00:03:42.670 --> 00:03:45.610
I'm gonna open up the client document and at the top,

50
00:03:45.610 --> 00:03:57.100
I'm saying that this is an example UDP client sending a message to a UDP server in Port

51
00:03:57.100 --> 00:03:58.990
6000 again,

52
00:03:58.990 --> 00:04:05.850
we're just gonna have the one dependency Vardy Graham equals require di gram.

53
00:04:05.850 --> 00:04:09.350
We're gonna create the client.

54
00:04:09.350 --> 00:04:16.280
Our client is going to equal di gram,

55
00:04:16.280 --> 00:04:22.450
create socket you d p four.

56
00:04:22.450 --> 00:04:25.890
If you'll note So far,

57
00:04:25.890 --> 00:04:27.350
we're doing the same thing.

58
00:04:27.350 --> 00:04:33.920
That is because the clients and the servers for UDP or pretty much the same protocol UDP

59
00:04:33.920 --> 00:04:37.870
doesn't really care about the distinction between client and server.

60
00:04:37.870 --> 00:04:40.490
We're creating that distinction arbitrarily here.

61
00:04:40.490 --> 00:04:50.910
Now we want to defined the message and pull it into a buffer of our message.

62
00:04:50.910 --> 00:04:52.980
String is going to equal.

63
00:04:52.980 --> 00:04:54.750
This is a message.

64
00:04:54.750 --> 00:04:57.350
Now we need to convert it to a buffer.

65
00:04:57.350 --> 00:04:58.460
So far,

66
00:04:58.460 --> 00:05:01.680
message Buffer is going to equal buffer.

67
00:05:01.680 --> 00:05:03.330
We're gonna use that global buffer.

68
00:05:03.330 --> 00:05:07.580
There's always available to us from message strength.

69
00:05:07.580 --> 00:05:08.740
So that's going to say,

70
00:05:08.740 --> 00:05:09.840
create a new buffer.

71
00:05:09.840 --> 00:05:10.530
Instead,

72
00:05:10.530 --> 00:05:13.310
she ate a new buffer and base it on this message.

73
00:05:13.310 --> 00:05:14.580
During that we've had to find.

74
00:05:14.580 --> 00:05:17.840
Now we want to send off the message.

75
00:05:17.840 --> 00:05:18.760
So for that,

76
00:05:18.760 --> 00:05:27.650
will call client send will send it the message Buffer would tell it to send it to Port 6000

77
00:05:27.650 --> 00:05:31.850
on the host local host.

78
00:05:31.850 --> 00:05:38.770
And then we'll expect back and air when it calls.

79
00:05:38.770 --> 00:05:42.750
Bear will call client close and that'll be it.

80
00:05:42.750 --> 00:05:47.010
So let's try this out again.

81
00:05:47.010 --> 00:05:54.150
I'm going to open up two tabs in the first cab.

82
00:05:54.150 --> 00:06:01.100
I'm gonna call node miscellaneous UDP server just started up and now that's running.

83
00:06:01.100 --> 00:06:10.380
I'm going to go to the other tab and call a node Miscellaneous you d p dash client dot Js

84
00:06:10.380 --> 00:06:12.650
which will send off this message.

85
00:06:12.650 --> 00:06:18.540
So it sent off that message and then it exited because it has nothing left to do.

86
00:06:18.540 --> 00:06:20.020
If you go back to the server,

87
00:06:20.020 --> 00:06:22.630
we can see that it received and logged out.

88
00:06:22.630 --> 00:06:25.120
This is a message you might be saying.

89
00:06:25.120 --> 00:06:31.210
Didn't you say that in UDP thes servers air sending messages down to the clients,

90
00:06:31.210 --> 00:06:32.300
not the other way around?

91
00:06:32.300 --> 00:06:32.980
Well,

92
00:06:32.980 --> 00:06:33.890
yes and no.

93
00:06:33.890 --> 00:06:41.510
Like HDB to the UDP protocol doesn't much care between the distinction of client and server

94
00:06:41.510 --> 00:06:42.390
as I mentioned.

95
00:06:42.390 --> 00:06:43.060
And so,

96
00:06:43.060 --> 00:06:43.960
in our case,

97
00:06:43.960 --> 00:06:46.430
we're using a client to send a message up to the server.

98
00:06:46.430 --> 00:06:50.440
If we wanted to stream video down for a client from the server,

99
00:06:50.440 --> 00:06:51.320
we could do that.

100
00:06:51.320 --> 00:06:51.750
Justus.

101
00:06:51.750 --> 00:06:52.090
Well,

102
00:06:52.090 --> 00:06:58.360
here we have used that distinction to say that the client is the thing that sends We've

103
00:06:58.360 --> 00:07:00.740
just called it a client you tp server was.

104
00:07:00.740 --> 00:07:03.840
Instead she did the same way Di gram don't create socket.

105
00:07:03.840 --> 00:07:05.500
And we called it a server,

106
00:07:05.500 --> 00:07:07.030
so that really doesn't matter.

107
00:07:07.030 --> 00:07:08.910
The distinction is arbitrary,

108
00:07:08.910 --> 00:07:11.580
and it's really just to help conceptualize the situation.

109
00:07:11.580 --> 00:07:13.020
So with that,

110
00:07:13.020 --> 00:07:15.650
we can kill this server and move onto the next lecture

