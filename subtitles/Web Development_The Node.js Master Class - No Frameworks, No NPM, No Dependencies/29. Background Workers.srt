1
00:00:00,000 --> 00:00:07,170
Now that we have much of the A P I in place,

2
00:00:07,170 --> 00:00:10,440
we have a way for users to be created,

3
00:00:10,440 --> 00:00:11,550
to sign in,

4
00:00:11,550 --> 00:00:15,730
to create checks and to be alerted by SMS.

5
00:00:15,730 --> 00:00:20,800
Now we need to actually go about performing the checks that they create.

6
00:00:20,800 --> 00:00:24,080
And for that we need background workers.

7
00:00:24,080 --> 00:00:25,760
We need background processes.

8
00:00:25,760 --> 00:00:26,920
So at this point,

9
00:00:26,920 --> 00:00:31,260
the nature of our application is fundamentally changing.

10
00:00:31,260 --> 00:00:39,070
We're going from a server that simply starts up and listens on a port to an application

11
00:00:39,070 --> 00:00:45,010
that starts up a server and starts up background workers and needs to be able to do both

12
00:00:45,010 --> 00:00:46,150
things at the same time.

13
00:00:46,150 --> 00:00:48,000
So this old structure we have,

14
00:00:48,000 --> 00:00:49,140
where the index stuck,

15
00:00:49,140 --> 00:00:53,820
Js just starts up the server itself and has all the servers logic contained.

16
00:00:53,820 --> 00:00:56,150
That doesn't really work anymore.

17
00:00:56,150 --> 00:01:02,830
We need to start re factoring so that this index dot Js file will be much smaller and we'll

18
00:01:02,830 --> 00:01:10,190
simply call a server file to start up the server and then we'll call a workers file to

19
00:01:10,190 --> 00:01:12,120
start up the new workers that we're gonna right.

20
00:01:12,120 --> 00:01:13,060
So in other words,

21
00:01:13,060 --> 00:01:16,990
there's a whole bunch of re factoring that we need to do right now,

22
00:01:16,990 --> 00:01:20,380
let's start with this index dot Js.

23
00:01:20,380 --> 00:01:22,550
As I mentioned,

24
00:01:22,550 --> 00:01:27,640
much of the logic here is going to need to move to a server file,

25
00:01:27,640 --> 00:01:30,650
so I'm just going to cut all of it out,

26
00:01:30,650 --> 00:01:46,470
then go to my terminal and create a new file called lib slash server dot Js and I'm gonna

27
00:01:46,470 --> 00:01:47,750
paste it all in there.

28
00:01:47,750 --> 00:01:53,870
We are gonna have to re factor this file so that it exports a lot of what it's doing.

29
00:01:53,870 --> 00:01:56,360
But let's just leave it there for now,

30
00:01:56,360 --> 00:01:57,500
and we'll come back to it.

31
00:01:57,500 --> 00:01:59,520
I take this comment back,

32
00:01:59,520 --> 00:01:59,740
though,

33
00:01:59,740 --> 00:02:02,050
because I do want that to stay in the index file.

34
00:02:02,050 --> 00:02:06,680
And now the index file is just going to do a few simple things.

35
00:02:06,680 --> 00:02:08,950
It's going to have some dependencies,

36
00:02:08,950 --> 00:02:11,850
namely the server file and a new workers file.

37
00:02:11,850 --> 00:02:18,750
So I'm gonna say that far server equals require dot,

38
00:02:18,750 --> 00:02:24,780
slash lib slash server So that's gonna pull in that new server file that we just created.

39
00:02:24,780 --> 00:02:30,080
Now I'm going to create another file called live workers dot Js.

40
00:02:30,080 --> 00:02:32,350
So that lives there now,

41
00:02:32,350 --> 00:02:43,990
and I'm in a reference that here as well workers equals require that's last lid slash

42
00:02:43,990 --> 00:02:44,650
workers.

43
00:02:44,650 --> 00:03:00,550
Now we're gonna want to declare the app just say that for after equals an empty object.

44
00:03:00,550 --> 00:03:08,220
And the only function that we need for now is an initialization function.

45
00:03:08,220 --> 00:03:09,900
Call it an innit function.

46
00:03:09,900 --> 00:03:14,940
So we're gonna say that in it equals a function,

47
00:03:14,940 --> 00:03:18,310
and we're going to within this function,

48
00:03:18,310 --> 00:03:21,450
call the server and workers file.

49
00:03:21,450 --> 00:03:28,060
Then we're going to execute that function.

50
00:03:28,060 --> 00:03:31,350
We're gonna say it.

51
00:03:31,350 --> 00:03:32,560
Lastly,

52
00:03:32,560 --> 00:03:34,850
we're going to export the app.

53
00:03:34,850 --> 00:03:36,860
That's not something that we had done before,

54
00:03:36,860 --> 00:03:39,800
but it will be useful later on when it comes to testings.

55
00:03:39,800 --> 00:03:44,610
Were going to say that module exports equals in the APP.

56
00:03:44,610 --> 00:03:44,880
Innit?

57
00:03:44,880 --> 00:03:45,260
File.

58
00:03:45,260 --> 00:03:51,980
We want to start with the server and we want to start the workers.

59
00:03:51,980 --> 00:03:54,380
We're gonna call them in similar ways.

60
00:03:54,380 --> 00:03:56,170
Server in it.

61
00:03:56,170 --> 00:03:58,380
That means back in that server file,

62
00:03:58,380 --> 00:04:00,370
we need to make sure to create a function called in it.

63
00:04:00,370 --> 00:04:03,600
And we want to start the workers once they exist.

64
00:04:03,600 --> 00:04:06,850
So we're gonna call workers that in it.

65
00:04:06,850 --> 00:04:08,210
So,

66
00:04:08,210 --> 00:04:08,880
as you can see,

67
00:04:08,880 --> 00:04:11,580
the index file is much more streamlined now.

68
00:04:11,580 --> 00:04:12,060
Now,

69
00:04:12,060 --> 00:04:18,300
let's go back over to our server file and start re factoring that we do want to comment up

70
00:04:18,300 --> 00:04:18,840
here.

71
00:04:18,840 --> 00:04:21,000
Just be different than index dot gs.

72
00:04:21,000 --> 00:04:24,780
We want to say that these are server related tasks.

73
00:04:24,780 --> 00:04:33,850
Oliver dependencies are going to stay the same,

74
00:04:33,850 --> 00:04:40,240
except that now that server is living within the lib file.

75
00:04:40,240 --> 00:04:45,390
We don't need to have our require statements walking into the lib file.

76
00:04:45,390 --> 00:04:50,310
So config consider the be referenced dot,

77
00:04:50,310 --> 00:04:51,220
slash config.

78
00:04:51,220 --> 00:04:57,270
Same with handlers and same with helpers later on.

79
00:04:57,270 --> 00:05:00,930
We are also going to need the path module.

80
00:05:00,930 --> 00:05:03,390
And so I'm just going to require that now,

81
00:05:03,390 --> 00:05:04,670
since they know what need it later,

82
00:05:04,670 --> 00:05:12,250
we want to change this so that we in Stan she a several module object.

83
00:05:12,250 --> 00:05:20,700
In other words,

84
00:05:20,700 --> 00:05:24,880
we want to just save our server equals an empty object,

85
00:05:24,880 --> 00:05:27,210
and later on,

86
00:05:27,210 --> 00:05:32,350
we are going to export the whole server.

87
00:05:32,350 --> 00:05:44,320
So we're going to say at modelled on exports equals server.

88
00:05:44,320 --> 00:05:48,140
As you can tell router and all these other functions,

89
00:05:48,140 --> 00:05:52,410
unified server etcetera are declared as local variables.

90
00:05:52,410 --> 00:05:59,810
So they all need to be changed now so that they are keys on this server block so that when

91
00:05:59,810 --> 00:06:01,250
server gets exported,

92
00:06:01,250 --> 00:06:02,310
they do too.

93
00:06:02,310 --> 00:06:06,600
So let's start with the HDP server rather than saying,

94
00:06:06,600 --> 00:06:15,310
Bar http Server were going to say server http server But rather than making the server dot

95
00:06:15,310 --> 00:06:15,920
Listen,

96
00:06:15,920 --> 00:06:17,010
be another key.

97
00:06:17,010 --> 00:06:18,750
I'm gonna cut it out of here,

98
00:06:18,750 --> 00:06:25,760
and I'm going to move it down inside of a new unit function which,

99
00:06:25,760 --> 00:06:26,780
as remember,

100
00:06:26,780 --> 00:06:28,840
gets called here.

101
00:06:28,840 --> 00:06:30,520
So we're gonna call server in it.

102
00:06:30,520 --> 00:06:33,610
So anything that needs to get called when the server should start up,

103
00:06:33,610 --> 00:06:35,550
it's going to move down into this innit function.

104
00:06:35,550 --> 00:06:43,100
I mean,

105
00:06:43,100 --> 00:06:46,250
it's a server that in it equals function,

106
00:06:46,250 --> 00:06:49,160
and it's gonna do two things.

107
00:06:49,160 --> 00:06:54,050
It's going to start the http server,

108
00:06:54,050 --> 00:06:56,750
which is what it's doing here.

109
00:06:56,750 --> 00:06:59,990
But this is no longer valid reference.

110
00:06:59,990 --> 00:07:03,060
So now I want to say server dot http server dot Listen,

111
00:07:03,060 --> 00:07:10,010
Then it's going to start the h g.

112
00:07:10,010 --> 00:07:11,250
P s server.

113
00:07:11,250 --> 00:07:15,650
So let me go up and find where we were starting that.

114
00:07:15,650 --> 00:07:21,800
Move that down here.

115
00:07:21,800 --> 00:07:28,580
So we want to say server dot https server dot Listen,

116
00:07:28,580 --> 00:07:29,230
all right,

117
00:07:29,230 --> 00:07:30,360
now that we have that in its grip,

118
00:07:30,360 --> 00:07:37,060
we could go back to modifying things up here instead of saying https server options,

119
00:07:37,060 --> 00:07:44,550
I want to say server dot https server options and instead of saying var issue to P s server

120
00:07:44,550 --> 00:07:44,550
.

121
00:07:44,550 --> 00:07:49,660
I want to say server https server.

122
00:07:49,660 --> 00:07:52,750
When I referenced the server options here,

123
00:07:52,750 --> 00:07:58,540
I want to say server dot h two b A server options.

124
00:07:58,540 --> 00:07:59,160
Otherwise,

125
00:07:59,160 --> 00:08:00,450
it wouldn't be a valid reference.

126
00:08:00,450 --> 00:08:01,750
And now,

127
00:08:01,750 --> 00:08:04,070
within the silver options,

128
00:08:04,070 --> 00:08:12,270
we need to modify these paths because thes air no longer valid paths to the key and assert

129
00:08:12,270 --> 00:08:17,450
for that we're going to use the path module as we did before.

130
00:08:17,450 --> 00:08:21,220
So we want to cut this out of here for now.

131
00:08:21,220 --> 00:08:29,740
And we want to say path join and the two things rejoining our your name and then pasted

132
00:08:29,740 --> 00:08:30,890
when I just copied out.

133
00:08:30,890 --> 00:08:34,850
Except that I want to back it up one directory.

134
00:08:34,850 --> 00:08:36,230
So I'm gonna save changing from dot,

135
00:08:36,230 --> 00:08:37,740
slash to slash,

136
00:08:37,740 --> 00:08:37,930
dot,

137
00:08:37,930 --> 00:08:38,130
dot,

138
00:08:38,130 --> 00:08:40,900
slash So that it backs out of the lib directory,

139
00:08:40,900 --> 00:08:43,870
goes into the HDP s directory and then gets the key.

140
00:08:43,870 --> 00:08:48,650
I'm gonna modify this the same way I'm gonna say path join,

141
00:08:48,650 --> 00:08:51,750
join it with the current directory,

142
00:08:51,750 --> 00:08:59,770
your name pasting when I just copied out and change it to back out of this directory.

143
00:08:59,770 --> 00:09:01,280
All right,

144
00:09:01,280 --> 00:09:06,320
All these modifications air going well instead of Hvar Unified server.

145
00:09:06,320 --> 00:09:09,050
We want to say server dot unified server.

146
00:09:09,050 --> 00:09:13,550
The rest of these references look fine,

147
00:09:13,550 --> 00:09:17,930
because while they are local variables there within server dot unified server,

148
00:09:17,930 --> 00:09:19,950
so we don't need to change any of that.

149
00:09:19,950 --> 00:09:26,550
Now we're going to modify router so that it is server dot router,

150
00:09:26,550 --> 00:09:32,530
which means that we need to modify where router gets reference,

151
00:09:32,530 --> 00:09:33,310
namely,

152
00:09:33,310 --> 00:09:36,380
routed its reference when we're choosing the correct handler.

153
00:09:36,380 --> 00:09:38,730
So instead of type of router,

154
00:09:38,730 --> 00:09:39,340
etcetera,

155
00:09:39,340 --> 00:09:40,620
we want to say,

156
00:09:40,620 --> 00:09:43,370
server dot router in all of these places,

157
00:09:43,370 --> 00:09:54,200
Lastly,

158
00:09:54,200 --> 00:09:59,150
we want to go back up to where the unified service getting called and make sure that we

159
00:09:59,150 --> 00:10:00,530
reference that correctly.

160
00:10:00,530 --> 00:10:04,980
Okay,

161
00:10:04,980 --> 00:10:05,240
Now,

162
00:10:05,240 --> 00:10:07,880
before we move on to anything else,

163
00:10:07,880 --> 00:10:09,890
let's make sure that this part is working.

164
00:10:09,890 --> 00:10:14,750
So I'm gonna comment out what we're doing with workers because workers don't exist yet.

165
00:10:14,750 --> 00:10:19,090
And I'm start up the app and make sure that everything is fine.

166
00:10:19,090 --> 00:10:22,070
All right?

167
00:10:22,070 --> 00:10:25,210
The server is working just as it was before,

168
00:10:25,210 --> 00:10:27,220
so everything is fine so far.

169
00:10:27,220 --> 00:10:29,010
We could kill the act.

170
00:10:29,010 --> 00:10:31,080
A NCAA meant what we just commented.

171
00:10:31,080 --> 00:10:39,420
And now we can go to create the workers library to reiterate the workers are going to

172
00:10:39,420 --> 00:10:44,530
actually perform all of the checking that has been configured by all the users.

173
00:10:44,530 --> 00:10:50,190
So one of the things that workers are going to have to do is gather up all the checks.

174
00:10:50,190 --> 00:10:51,220
As you know,

175
00:10:51,220 --> 00:10:56,940
we're storing all of our checks as separate files within a checks directory.

176
00:10:56,940 --> 00:11:02,580
So one of the things that the workers is going to do is list all of the available checks in

177
00:11:02,580 --> 00:11:03,440
that directory.

178
00:11:03,440 --> 00:11:04,850
Unfortunately,

179
00:11:04,850 --> 00:11:08,320
our Datafile only handles creating,

180
00:11:08,320 --> 00:11:09,040
reading,

181
00:11:09,040 --> 00:11:11,250
updating and deleting files.

182
00:11:11,250 --> 00:11:17,410
It doesn't currently allow you to list all the files in a collection or in a directory.

183
00:11:17,410 --> 00:11:18,350
And so,

184
00:11:18,350 --> 00:11:23,580
before restore writing the workers we actually need to modify our data file.

185
00:11:23,580 --> 00:11:27,060
Add on a function called lib dot list,

186
00:11:27,060 --> 00:11:31,390
which will allow a user to list all the files in a directory,

187
00:11:31,390 --> 00:11:31,890
which,

188
00:11:31,890 --> 00:11:32,600
for our case,

189
00:11:32,600 --> 00:11:35,390
is listing every key in a collection.

190
00:11:35,390 --> 00:11:37,490
So within the data for order,

191
00:11:37,490 --> 00:11:45,200
I want to say list all the items in a directory.

192
00:11:45,200 --> 00:11:48,850
I'm to call this lib dot list,

193
00:11:48,850 --> 00:11:56,450
and he's going to be a function that takes it directory and call back.

194
00:11:56,450 --> 00:12:03,750
We want to call the function reactor or however you pronounce it r e a d D I r.

195
00:12:03,750 --> 00:12:10,980
Which is nodes built in FS function for listing things in a directory.

196
00:12:10,980 --> 00:12:14,050
We need to pass it the base directory as we did before,

197
00:12:14,050 --> 00:12:17,070
whatever directory they're asking about,

198
00:12:17,070 --> 00:12:18,400
and then a slash.

199
00:12:18,400 --> 00:12:24,270
And it's going to pass us back an air and data,

200
00:12:24,270 --> 00:12:27,780
and that data will contain all of the files in the directory.

201
00:12:27,780 --> 00:12:30,020
So we want to say,

202
00:12:30,020 --> 00:12:31,790
if it's not an error,

203
00:12:31,790 --> 00:12:34,220
we'll continue.

204
00:12:34,220 --> 00:12:35,610
Otherwise,

205
00:12:35,610 --> 00:12:40,450
we are going to call back air and data to whoever called us.

206
00:12:40,450 --> 00:12:48,710
But if there is no air and there is data and the data which will be an array has a length

207
00:12:48,710 --> 00:12:50,850
greater than zero,

208
00:12:50,850 --> 00:12:52,370
we'll continue on,

209
00:12:52,370 --> 00:12:58,650
and we're want to get an array of file names that have been trimmed.

210
00:12:58,650 --> 00:13:03,950
So we want to say trimmed file names is an empty array for now.

211
00:13:03,950 --> 00:13:16,770
Now we are going to look through so data for each look through each of the things that they

212
00:13:16,770 --> 00:13:17,460
gave us.

213
00:13:17,460 --> 00:13:20,200
Get the file name,

214
00:13:20,200 --> 00:13:28,140
and we want to just trim off the word dot Jason because we want to know all of the keys,

215
00:13:28,140 --> 00:13:34,990
not with the dot Jason on it so trimmed file names push.

216
00:13:34,990 --> 00:13:36,650
So we're adding things to that array,

217
00:13:36,650 --> 00:13:39,720
and before we add it,

218
00:13:39,720 --> 00:13:41,180
we want to say Found name,

219
00:13:41,180 --> 00:13:44,790
replace dot Jason within every strip.

220
00:13:44,790 --> 00:13:51,530
So again we're looping through the array of file names that we're getting.

221
00:13:51,530 --> 00:13:54,380
We're taking dot Jason off,

222
00:13:54,380 --> 00:13:57,650
and then we're pushing it onto a direct,

223
00:13:57,650 --> 00:14:02,990
and now we just need to call back that array.

224
00:14:02,990 --> 00:14:08,690
So we're not gonna call back an air and we are going to call that Jim found things.

225
00:14:08,690 --> 00:14:14,940
We don't need to test this right now because we're going to be using it extensively within

226
00:14:14,940 --> 00:14:15,400
workers.

227
00:14:15,400 --> 00:14:16,700
And if there's any issue here,

228
00:14:16,700 --> 00:14:17,650
we'll catch it then.

229
00:14:17,650 --> 00:14:21,770
So now we can actually move on to writing these workers.

230
00:14:21,770 --> 00:14:25,350
So let's go into the new workers dot Js file.

231
00:14:25,350 --> 00:14:33,330
Let's set it up with a comment saying that these are worker related tasks.

232
00:14:33,330 --> 00:14:40,190
This file is going to have some dependencies,

233
00:14:40,190 --> 00:14:45,160
and I might as well just list them all out now rather than coming back to them later.

234
00:14:45,160 --> 00:14:47,150
We're going to be using path,

235
00:14:47,150 --> 00:14:49,250
which is required path.

236
00:14:49,250 --> 00:14:57,580
We're going to be using the file system which is require fs.

237
00:14:57,580 --> 00:15:03,780
We're going to be using our data library that we wrote.

238
00:15:03,780 --> 00:15:09,850
So underscore data is require dot slash data because,

239
00:15:09,850 --> 00:15:10,100
remember,

240
00:15:10,100 --> 00:15:11,520
we're already in the liver directory,

241
00:15:11,520 --> 00:15:13,150
so we don't need to do slash lib.

242
00:15:13,150 --> 00:15:16,250
We're going to be using the https module.

243
00:15:16,250 --> 00:15:19,120
We're gonna require https.

244
00:15:19,120 --> 00:15:20,950
We're gonna be using HDP.

245
00:15:20,950 --> 00:15:23,020
We're gonna require it should be.

246
00:15:23,020 --> 00:15:28,940
That is because these workers need to perform https Post get put,

247
00:15:28,940 --> 00:15:30,760
delete or http,

248
00:15:30,760 --> 00:15:32,880
depending on the nature of the check.

249
00:15:32,880 --> 00:15:35,930
So if the check is an https check will use this one.

250
00:15:35,930 --> 00:15:38,500
If it's an HDP check will use that one.

251
00:15:38,500 --> 00:15:43,310
We are going to be using the helpers that we've been reading.

252
00:15:43,310 --> 00:15:46,260
So helpers equals require dot,

253
00:15:46,260 --> 00:15:47,150
slash helpers.

254
00:15:47,150 --> 00:15:50,070
And lastly,

255
00:15:50,070 --> 00:15:52,150
the URL equals require.

256
00:15:52,150 --> 00:15:58,480
You're you'll see how we're using these different note modules as we go.

257
00:15:58,480 --> 00:16:01,150
We want to instead initiate the worker object.

258
00:16:01,150 --> 00:16:09,950
We're just gonna say that workers is an empty object and down at the bottom,

259
00:16:09,950 --> 00:16:10,950
we're gonna export it.

260
00:16:10,950 --> 00:16:24,320
Now what do we need to write?

261
00:16:24,320 --> 00:16:26,820
As you remember in the index dot Js file,

262
00:16:26,820 --> 00:16:30,740
We are starting up the app and immediately calling workers dot in it.

263
00:16:30,740 --> 00:16:34,350
So we know that workers needs to at least have an in its grip,

264
00:16:34,350 --> 00:16:36,400
just like server does.

265
00:16:36,400 --> 00:16:54,340
I'm gonna say workers dot in it is a function and we want to call two functions that don't

266
00:16:54,340 --> 00:16:55,020
exist yet.

267
00:16:55,020 --> 00:17:04,660
We want to execute all the checks as soon as it starts up,

268
00:17:04,660 --> 00:17:11,160
and then we want to call a loop so that the checks continue to execute on their own.

269
00:17:11,160 --> 00:17:26,350
This is because we're going to be initiating this loop with a set interval.

270
00:17:26,350 --> 00:17:28,140
And the set interval,

271
00:17:28,140 --> 00:17:28,630
for example,

272
00:17:28,630 --> 00:17:32,500
of a set interval is every five seconds when it starts,

273
00:17:32,500 --> 00:17:36,280
is not going to execute the first time until after the 1st 5 seconds.

274
00:17:36,280 --> 00:17:38,390
So we want to execute.

275
00:17:38,390 --> 00:17:39,820
As soon as we start up,

276
00:17:39,820 --> 00:17:43,990
we want to perform all the checks and then let the loop takeover.

277
00:17:43,990 --> 00:17:53,480
So these two functions are going to be called workers don't gather all checks,

278
00:17:53,480 --> 00:18:01,660
and the loop is going to be called workers dot loop.

279
00:18:01,660 --> 00:18:05,440
We go ahead and write that loop.

280
00:18:05,440 --> 00:18:14,950
Now we're going to say that this is a timer to execute the worker process once per minute,

281
00:18:14,950 --> 00:18:17,740
as I may have mentioned earlier,

282
00:18:17,740 --> 00:18:21,050
No matter what kind of check the user has set up,

283
00:18:21,050 --> 00:18:26,000
we are just going to execute it once per minute and so once permitted,

284
00:18:26,000 --> 00:18:31,290
all of the checks need to be gathered up way to read all the current checks in the system

285
00:18:31,290 --> 00:18:32,950
and then perform them.

286
00:18:32,950 --> 00:18:39,840
So workers dot Liu is going to be a function.

287
00:18:39,840 --> 00:18:45,660
But it is just immediately going to call a set interval,

288
00:18:45,660 --> 00:18:56,170
and it's going to execute everything in here once.

289
00:18:56,170 --> 00:19:00,990
So we're going to say 1000 milliseconds times 60 seconds.

290
00:19:00,990 --> 00:19:04,650
We could just as easily put this in our config file,

291
00:19:04,650 --> 00:19:06,660
but we don't need to for now.

292
00:19:06,660 --> 00:19:12,040
So once a minute it's going to perform the same thing that we executed immediately upon

293
00:19:12,040 --> 00:19:12,540
Start,

294
00:19:12,540 --> 00:19:22,820
which is workers dot gather all checks and this you work there is not.

295
00:19:22,820 --> 00:19:25,350
We're calling to functions here.

296
00:19:25,350 --> 00:19:27,530
This one is calling the same function,

297
00:19:27,530 --> 00:19:29,250
and this function is that function.

298
00:19:29,250 --> 00:19:37,320
And so the only thing left to do is build out this worker dot gather all checks and any

299
00:19:37,320 --> 00:19:39,160
supporting functions that it would need.

300
00:19:39,160 --> 00:19:41,550
Workers gather all checks.

301
00:19:41,550 --> 00:19:43,490
It's going to do a few things.

302
00:19:43,490 --> 00:19:45,670
It's going to look up all the checks,

303
00:19:45,670 --> 00:19:51,320
get their data and then send all that data to what we're calling a validator,

304
00:19:51,320 --> 00:19:54,070
which is going to make sure that the checks are valid.

305
00:19:54,070 --> 00:20:00,050
So we're gonna say that workers dot gather all checks is a function,

306
00:20:00,050 --> 00:20:09,650
and the first thing that that function wants to do is get all the checks that exist in the

307
00:20:09,650 --> 00:20:10,160
system.

308
00:20:10,160 --> 00:20:11,700
In order to do that,

309
00:20:11,700 --> 00:20:17,260
we're going to use that new data list function that we just made so called data list,

310
00:20:17,260 --> 00:20:21,270
and we want to the list everything in the checks to four order.

311
00:20:21,270 --> 00:20:21,900
Right now,

312
00:20:21,900 --> 00:20:22,830
there's nothing in there,

313
00:20:22,830 --> 00:20:24,110
but we'll fix that in a moment.

314
00:20:24,110 --> 00:20:32,530
It's gonna pass us back an air and an array of checks if there are any or just in India.

315
00:20:32,530 --> 00:20:32,800
Rey.

316
00:20:32,800 --> 00:20:43,930
So we want to say if there's not an air and if checks is valid and checks has a length

317
00:20:43,930 --> 00:20:44,850
created zero,

318
00:20:44,850 --> 00:20:47,350
then we want to continue.

319
00:20:47,350 --> 00:20:48,800
Otherwise,

320
00:20:48,800 --> 00:20:55,760
we just want to log out to ourselves air.

321
00:20:55,760 --> 00:21:01,580
I could not find any checks to process.

322
00:21:01,580 --> 00:21:03,500
Remember,

323
00:21:03,500 --> 00:21:04,800
this is a background worker.

324
00:21:04,800 --> 00:21:06,760
There is no requester here,

325
00:21:06,760 --> 00:21:09,300
so there's no one to call back a response to.

326
00:21:09,300 --> 00:21:15,220
So we're just going to log things out on the assumption that at some point we will want to

327
00:21:15,220 --> 00:21:21,440
look at the terminal or looking a log file which will create later and see what these

328
00:21:21,440 --> 00:21:24,890
process was doing when it was trying to gather all the checks.

329
00:21:24,890 --> 00:21:27,660
So if it did find checks to process,

330
00:21:27,660 --> 00:21:34,450
then we're gonna call checks for each and we're gonna loop through this.

331
00:21:34,450 --> 00:21:38,660
It's gonna give us one check at a time.

332
00:21:38,660 --> 00:21:39,590
And remember,

333
00:21:39,590 --> 00:21:42,860
this is the name of the Czech file without the dot Jason,

334
00:21:42,860 --> 00:21:51,910
So we can just read in the Czech data by passing the Czech name to data dot reid.

335
00:21:51,910 --> 00:21:55,690
And we don't need to strip off that Jason because that's already gone.

336
00:21:55,690 --> 00:22:02,350
So we're just gonna say data read from the checks collection,

337
00:22:02,350 --> 00:22:14,420
this check and that will pass back an error and what we're gonna call original check data.

338
00:22:14,420 --> 00:22:14,970
Remember,

339
00:22:14,970 --> 00:22:18,290
we are going to do stuff with this check,

340
00:22:18,290 --> 00:22:21,180
and so we want to keep track of the state.

341
00:22:21,180 --> 00:22:27,730
The check was in before we performed the check itself and the state afterwards of the

342
00:22:27,730 --> 00:22:31,710
original state that we pull it from the database before actually performing the check is

343
00:22:31,710 --> 00:22:33,190
the original check data.

344
00:22:33,190 --> 00:22:39,940
Now we want to say if there is not an air and there's original check data,

345
00:22:39,940 --> 00:22:41,550
then we want to continue.

346
00:22:41,550 --> 00:22:43,890
Otherwise,

347
00:22:43,890 --> 00:22:46,330
if we've encountered in air with one of these checks,

348
00:22:46,330 --> 00:22:54,680
we want to just log that out so that we could take note of it air reading one of the checks

349
00:22:54,680 --> 00:22:56,350
data.

350
00:22:56,350 --> 00:22:58,950
But if there is check data,

351
00:22:58,950 --> 00:23:12,750
then we want to pass the data to what we're calling the check validator and let that

352
00:23:12,750 --> 00:23:21,930
function continue or log air is as needed once again.

353
00:23:21,930 --> 00:23:24,850
Since we are not dealing with a request that's coming in,

354
00:23:24,850 --> 00:23:30,590
we don't need to worry about the status of any particular operation being called back to

355
00:23:30,590 --> 00:23:32,510
this original calling function.

356
00:23:32,510 --> 00:23:38,650
We don't care about returning any status to someone who initiated this process.

357
00:23:38,650 --> 00:23:41,670
All we care about is that certain processes take place,

358
00:23:41,670 --> 00:23:43,100
and if they air out,

359
00:23:43,100 --> 00:23:44,480
we don't need to call back an error.

360
00:23:44,480 --> 00:23:45,930
We just log out that air.

361
00:23:45,930 --> 00:23:49,150
So rather than doing the structure that we had before,

362
00:23:49,150 --> 00:23:51,890
where we invoke different functions,

363
00:23:51,890 --> 00:23:57,850
get the call backs and then call back the status of those functions to the requester were

364
00:23:57,850 --> 00:24:02,720
actually just going to pass around the data that we need two different functions.

365
00:24:02,720 --> 00:24:04,760
They don't need to call back to each other.

366
00:24:04,760 --> 00:24:07,500
They just need to pass it where it needs to go.

367
00:24:07,500 --> 00:24:09,180
And if they encounter any issue,

368
00:24:09,180 --> 00:24:11,050
they just need to log it out on their own.

369
00:24:11,050 --> 00:24:18,080
There's no master requester who needs to get the status of these processes sent back to

370
00:24:18,080 --> 00:24:18,310
them.

371
00:24:18,310 --> 00:24:22,660
So we want to pass this on to workers Validate,

372
00:24:22,660 --> 00:24:25,280
check data,

373
00:24:25,280 --> 00:24:27,760
and we want to pass them original check data.

374
00:24:27,760 --> 00:24:30,890
So it should be clear what we need to do next.

375
00:24:30,890 --> 00:24:32,630
Now that this function is filled out,

376
00:24:32,630 --> 00:24:35,170
we need to validate check data,

377
00:24:35,170 --> 00:24:36,170
right that function.

378
00:24:36,170 --> 00:24:37,770
So let's do that.

379
00:24:37,770 --> 00:24:38,260
Now.

380
00:24:38,260 --> 00:24:42,120
We're going to say that the purpose of this function is sanity.

381
00:24:42,120 --> 00:24:45,550
Checking the check data.

382
00:24:45,550 --> 00:24:47,210
Remember,

383
00:24:47,210 --> 00:24:49,310
this is Chuck data that we're pulling out of the database.

384
00:24:49,310 --> 00:24:55,030
We still need to make sure that it has everything that we are expecting you to have.

385
00:24:55,030 --> 00:24:57,030
If we're going to perform the check,

386
00:24:57,030 --> 00:24:57,550
for example,

387
00:24:57,550 --> 00:25:00,760
we need to know that there's a girl we need to know that there's a methods era.

388
00:25:00,760 --> 00:25:10,700
So we're gonna say workers validate check data is function and we know what it accepts.

389
00:25:10,700 --> 00:25:13,260
It accepts original check data,

390
00:25:13,260 --> 00:25:16,010
and it doesn't need a callback because this,

391
00:25:16,010 --> 00:25:16,820
for each loop,

392
00:25:16,820 --> 00:25:19,010
is going to pass things to it,

393
00:25:19,010 --> 00:25:22,160
but it's not expecting anything to be called back or even return to it.

394
00:25:22,160 --> 00:25:24,360
It's just going to pass it to this function.

395
00:25:24,360 --> 00:25:25,600
This function is going to log out.

396
00:25:25,600 --> 00:25:26,450
Errors is needed,

397
00:25:26,450 --> 00:25:34,110
so we just need to start by making sure that the original check data exists as a object

398
00:25:34,110 --> 00:25:35,200
with pass keys on it.

399
00:25:35,200 --> 00:25:52,600
Say original check data type of is an object and original check data is not know still

400
00:25:52,600 --> 00:25:58,050
would deal with it or defaulted to an empty object.

401
00:25:58,050 --> 00:26:03,400
Now we want to say that original tech data I D.

402
00:26:03,400 --> 00:26:07,050
Is a strength,

403
00:26:07,050 --> 00:26:25,030
and it has a length of 20 for the fourth.

404
00:26:25,030 --> 00:26:32,040
That would force we want to do basically the same thing with user phone,

405
00:26:32,040 --> 00:26:34,270
except that the length should be ted.

406
00:26:34,270 --> 00:26:55,300
We want to do a similar thing with protocol,

407
00:26:55,300 --> 00:26:58,770
except remember that protocol must be either http or H.

408
00:26:58,770 --> 00:26:59,710
Two p s.

409
00:26:59,710 --> 00:27:06,900
We want to say that protocol is a string and is one of those two things,

410
00:27:06,900 --> 00:27:11,270
just like we did in post checks and put checks.

411
00:27:11,270 --> 00:27:29,890
You are l is going to be just like I d or user found was,

412
00:27:29,890 --> 00:27:33,160
except we just want to make sure that it has any length.

413
00:27:33,160 --> 00:27:46,490
So any length above zero method is going to be set up similar to the way we did protocol.

414
00:27:46,490 --> 00:27:54,820
Except it must be one of post get put.

415
00:27:54,820 --> 00:28:06,340
Delete success code should be an array,

416
00:28:06,340 --> 00:28:09,160
and it should have a length greater than zero.

417
00:28:09,160 --> 00:28:40,050
And if you remember,

418
00:28:40,050 --> 00:28:42,320
time out seconds used to be a number,

419
00:28:42,320 --> 00:28:43,680
it needs to be inter jer.

420
00:28:43,680 --> 00:28:48,070
It is to be greater than or equal to one and needs to be less than or equal to five.

421
00:28:48,070 --> 00:28:48,070
-

422
00:28:48,070 --> 00:29:35,030
Now

423
00:29:35,030 --> 00:29:35,030
,

424
00:29:35,030 --> 00:29:36,010
if you'll remember.

425
00:29:36,010 --> 00:29:43,140
We said that this object that was originally created was not going to be the final state of

426
00:29:43,140 --> 00:29:45,170
the checks once the workers got a hold of it.

427
00:29:45,170 --> 00:29:52,750
And so we actually need to check to see if the new keys that workers would be added have

428
00:29:52,750 --> 00:29:53,390
been added.

429
00:29:53,390 --> 00:29:54,170
And if not,

430
00:29:54,170 --> 00:29:58,350
we should add them to the copy of the object that we're working with.

431
00:29:58,350 --> 00:30:03,160
We want to set the keys that may not be set.

432
00:30:03,160 --> 00:30:09,390
If the workers have never seen this check before,

433
00:30:09,390 --> 00:30:13,750
lamely there to new keys when it's called state,

434
00:30:13,750 --> 00:30:17,890
there's gonna hold whether the check is currently up or currently down.

435
00:30:17,890 --> 00:30:20,700
and the next key is called Last Checked,

436
00:30:20,700 --> 00:30:26,760
which is a timestamp indicating the last time that this check waas performed.

437
00:30:26,760 --> 00:30:35,000
We want to say that original check data a state is a string and it's literally going to be

438
00:30:35,000 --> 00:30:37,340
a string called up or down.

439
00:30:37,340 --> 00:30:42,550
So we want Teoh set it up just like we did protocol.

440
00:30:42,550 --> 00:30:54,050
Except with those two strings instead or down.

441
00:30:54,050 --> 00:31:00,820
And instead of defaulting toe false,

442
00:31:00,820 --> 00:31:03,080
we want to default to down.

443
00:31:03,080 --> 00:31:07,330
So what this means is if a cheque has never been performed If a u.

444
00:31:07,330 --> 00:31:08,680
R l has never been checked,

445
00:31:08,680 --> 00:31:11,370
we want to assume that it is down.

446
00:31:11,370 --> 00:31:13,550
And so the first time we check it,

447
00:31:13,550 --> 00:31:15,450
if we find out that it is up,

448
00:31:15,450 --> 00:31:19,520
it is now going to switch from a downstate to an upstate.

449
00:31:19,520 --> 00:31:22,020
If it is down the first time we check it,

450
00:31:22,020 --> 00:31:24,050
its state will stay down.

451
00:31:24,050 --> 00:31:25,280
The last check.

452
00:31:25,280 --> 00:31:30,010
Timestamp is going to be the result of calling date now,

453
00:31:30,010 --> 00:31:31,370
so it is a number.

454
00:31:31,370 --> 00:31:35,290
So we're gonna copy what we did for time out seconds.

455
00:31:35,290 --> 00:31:49,350
Say that last checked should be a number and it should be greater than zero.

456
00:31:49,350 --> 00:31:55,790
We can get rid of the rest of this,

457
00:31:55,790 --> 00:32:05,770
but we still want to devote it to false.

458
00:32:05,770 --> 00:32:12,330
And that is so we can know by looking at an object whether or not it is in a downstate,

459
00:32:12,330 --> 00:32:14,420
because it has never been checked.

460
00:32:14,420 --> 00:32:15,560
Last check this folks,

461
00:32:15,560 --> 00:32:20,160
or if it's a downstate and that downstate is the result of a check.

462
00:32:20,160 --> 00:32:21,560
If that's the case,

463
00:32:21,560 --> 00:32:25,050
the state will be down and last checked will be a time stamp.

464
00:32:25,050 --> 00:32:28,850
So now we want to do some checking.

465
00:32:28,850 --> 00:32:34,240
We want to say if all the checks pass,

466
00:32:34,240 --> 00:32:40,790
pass the data along to the next step in the process.

467
00:32:40,790 --> 00:32:44,100
This is why this function is called validate Check data.

468
00:32:44,100 --> 00:32:45,530
This is really all it's doing.

469
00:32:45,530 --> 00:32:51,860
Its checking that this thing that we just pull it off of the file system is sane.

470
00:32:51,860 --> 00:32:53,490
And if so,

471
00:32:53,490 --> 00:32:59,180
it's going to pass it along to the workhorse functions that actually preform these checks.

472
00:32:59,180 --> 00:33:00,080
And if it's not,

473
00:33:00,080 --> 00:33:03,710
is just gonna do nothing or just log out an error.

474
00:33:03,710 --> 00:33:08,260
So we're gonna say if original check data I D.

475
00:33:08,260 --> 00:33:15,190
And going to start working on another line now because this is going to be a very long if

476
00:33:15,190 --> 00:33:33,950
original check data user phone and original check data protocol and you are ill and method

477
00:33:33,950 --> 00:33:41,880
and success codes and time out seconds.

478
00:33:41,880 --> 00:33:45,820
Then we want to pass it along.

479
00:33:45,820 --> 00:33:48,050
Otherwise we just want to log out.

480
00:33:48,050 --> 00:33:57,350
But the issue air one of the checks is not properly formatted.

481
00:33:57,350 --> 00:33:58,950
Skipping it.

482
00:33:58,950 --> 00:34:02,990
So that would just let us know when we're looking at the console.

483
00:34:02,990 --> 00:34:07,450
It encountered a check that did not contain the keys for some reason.

484
00:34:07,450 --> 00:34:12,160
And so it's just not even attempting to perform that one.

485
00:34:12,160 --> 00:34:13,730
If everything was fine,

486
00:34:13,730 --> 00:34:15,130
we want to call workers,

487
00:34:15,130 --> 00:34:16,590
don't perform,

488
00:34:16,590 --> 00:34:22,480
check and pass it the original check data because we know all the original check data is

489
00:34:22,480 --> 00:34:22,750
good.

490
00:34:22,750 --> 00:34:28,050
So workers perform check is going to be exactly what it sounds like.

491
00:34:28,050 --> 00:34:31,600
This is going to perform the check,

492
00:34:31,600 --> 00:34:44,950
send the original check data and the outcome of the Czech process to the next step in the

493
00:34:44,950 --> 00:34:45,720
process.

494
00:34:45,720 --> 00:34:50,350
And so this is going to actually look at the euro,

495
00:34:50,350 --> 00:34:53,500
make the http request to that your hell,

496
00:34:53,500 --> 00:34:59,920
Then it's going to record an outcome and then send this original check data and the outcome

497
00:34:59,920 --> 00:35:02,810
to the next step in the process.

498
00:35:02,810 --> 00:35:10,960
So we're gonna call this workers that perform check and it's going to be a function that

499
00:35:10,960 --> 00:35:16,680
takes in original check data from this previous step in the process.

500
00:35:16,680 --> 00:35:29,220
So the first thing it wants to do is prepare the initial check outcome by default.

501
00:35:29,220 --> 00:35:37,120
We are going to just set a outcome that will most likely get overridden as the check gets

502
00:35:37,120 --> 00:35:37,750
performed.

503
00:35:37,750 --> 00:35:46,260
We want to say that check outcome is an object that contains two keys.

504
00:35:46,260 --> 00:35:47,560
One is air.

505
00:35:47,560 --> 00:35:50,210
Did it encountered in air so far in the process?

506
00:35:50,210 --> 00:35:50,400
No,

507
00:35:50,400 --> 00:35:50,900
it didn't.

508
00:35:50,900 --> 00:35:52,300
So that's false.

509
00:35:52,300 --> 00:35:54,930
And the response code that it received well,

510
00:35:54,930 --> 00:35:56,380
it didn't even make the request yet.

511
00:35:56,380 --> 00:35:58,540
So the response code is going to be false.

512
00:35:58,540 --> 00:36:00,400
In the next step of the process,

513
00:36:00,400 --> 00:36:03,650
we want to mark that the outcome has not been sent yet.

514
00:36:03,650 --> 00:36:17,000
In other words,

515
00:36:17,000 --> 00:36:23,170
this outcome object has not been relate to the next phase in the process yet,

516
00:36:23,170 --> 00:36:28,870
and the reason we need this variable will make sense as we go through this function.

517
00:36:28,870 --> 00:36:32,460
Now we need to figure out who were making this request to.

518
00:36:32,460 --> 00:36:40,740
So we want toe parse the host name and the path out of the original check data.

519
00:36:40,740 --> 00:36:52,260
So we want to say that the parsed U R l is going to be your l that parts we're using the

520
00:36:52,260 --> 00:37:00,300
URL module that we required above We want to pass it original check data dot protocol and

521
00:37:00,300 --> 00:37:06,310
then add on colon slash last cause original check dated up protocol is either http or https

522
00:37:06,310 --> 00:37:12,860
So we're adding on colon slash slash and then we're adding on the original check data dot

523
00:37:12,860 --> 00:37:15,450
your l's and we say true.

524
00:37:15,450 --> 00:37:24,400
Now why do we need to this if you remember in the last lecture when we were sending the HDP

525
00:37:24,400 --> 00:37:29,920
requested twilio ap I you remember that part of that payload that we need to send when

526
00:37:29,920 --> 00:37:33,310
crafting htp requests is the hosting.

527
00:37:33,310 --> 00:37:37,850
But when we asked the users to tell us the URL,

528
00:37:37,850 --> 00:37:44,180
we didn't ask them to split the host name off from the path or off from any query string.

529
00:37:44,180 --> 00:37:53,020
We just gave them a taco http or https and we give them a Eurail tefillin that you are l is

530
00:37:53,020 --> 00:37:56,760
gonna contain host name plus a path and a query string.

531
00:37:56,760 --> 00:38:02,840
So we need to reconstruct the full Earl and then parse it into its different parts.

532
00:38:02,840 --> 00:38:06,330
So that we can craft the HDP request accordingly.

533
00:38:06,330 --> 00:38:08,340
So now that we have the parts,

534
00:38:08,340 --> 00:38:08,830
you are Oh,

535
00:38:08,830 --> 00:38:15,120
we know that the host name equals par Sharell dot host name.

536
00:38:15,120 --> 00:38:22,370
This is exactly what we did when we were parsing incoming requests earlier on when we were

537
00:38:22,370 --> 00:38:29,370
first Setting up the server and warpath equals parsed your l dot path.

538
00:38:29,370 --> 00:38:36,020
And I was gonna put a note here that we are using path and not path name,

539
00:38:36,020 --> 00:38:40,530
which are both available because we want the query string.

540
00:38:40,530 --> 00:38:43,030
We want the full query string that they entered there.

541
00:38:43,030 --> 00:38:46,460
And so if we had only used path name,

542
00:38:46,460 --> 00:38:48,050
we wouldn't have had that query string,

543
00:38:48,050 --> 00:38:49,770
but it might be important to the check.

544
00:38:49,770 --> 00:38:53,050
So we do want it now.

545
00:38:53,050 --> 00:38:55,740
We can go about constructing the request.

546
00:38:55,740 --> 00:39:06,040
We're going to say request details is set up much like we set up the request to twilio in

547
00:39:06,040 --> 00:39:06,880
the last lecture.

548
00:39:06,880 --> 00:39:09,900
So request details is a big object.

549
00:39:09,900 --> 00:39:19,770
Protocol needs to be set to original check data dot protocol and remember that it needs to

550
00:39:19,770 --> 00:39:21,390
include a colon on there.

551
00:39:21,390 --> 00:39:30,320
So we're gonna add on the colon host name equals what we have set to the host name Variable

552
00:39:30,320 --> 00:39:30,320
.

553
00:39:30,320 --> 00:39:40,640
Right now the method needs to be set to original check data dot method.

554
00:39:40,640 --> 00:39:44,600
But since this function wants all methods in upper case,

555
00:39:44,600 --> 00:39:50,920
we need to now call the to upper case function.

556
00:39:50,920 --> 00:39:51,250
Teoh,

557
00:39:51,250 --> 00:39:52,330
switch it to that.

558
00:39:52,330 --> 00:39:58,740
So the path is going to be the path and we're including the query string in there.

559
00:39:58,740 --> 00:39:59,680
And lastly,

560
00:39:59,680 --> 00:40:10,750
the time out is going to be set to original check data time out seconds times 1000 because

561
00:40:10,750 --> 00:40:14,750
this key is expecting milliseconds.

562
00:40:14,750 --> 00:40:18,670
But we asked the user how many seconds before it should time out.

563
00:40:18,670 --> 00:40:20,120
And so if it's three,

564
00:40:20,120 --> 00:40:20,860
for example,

565
00:40:20,860 --> 00:40:24,360
we actually need to enter 3000 so we're just gonna multiply it there.

566
00:40:24,360 --> 00:40:27,050
That's all the request details we need to fill out.

567
00:40:27,050 --> 00:40:32,930
Now we're about to perform an http request in the manner that the user asked us to.

568
00:40:32,930 --> 00:40:37,520
So the next thing that we need to do is just like last time in Stan.

569
00:40:37,520 --> 00:40:50,740
She ate the request object using either the HDP or a GPS module as we went over earlier.

570
00:40:50,740 --> 00:40:52,490
If you're doing a shitty P stuff,

571
00:40:52,490 --> 00:40:55,740
you were making requests to HDP colon slash last.

572
00:40:55,740 --> 00:40:58,780
Something you want to use the HDP module.

573
00:40:58,780 --> 00:41:01,640
If you're making a request to http s cones,

574
00:41:01,640 --> 00:41:05,520
that's something you want to use the https module.

575
00:41:05,520 --> 00:41:11,830
And so the first thing we need to determine is what module to use and risk going to assign

576
00:41:11,830 --> 00:41:14,890
that module to this variable and use this variable instead.

577
00:41:14,890 --> 00:41:26,600
So we're going to say that the module to use equals the original check data's protocol in

578
00:41:26,600 --> 00:41:27,320
model form.

579
00:41:27,320 --> 00:41:28,210
So,

580
00:41:28,210 --> 00:41:29,140
in other words,

581
00:41:29,140 --> 00:41:35,740
if the original check data's protocol is http used the http module This variable http is

582
00:41:35,740 --> 00:41:42,880
assigned to that module up here otherwise used the HDP s Marshall.

583
00:41:42,880 --> 00:41:47,850
So now we have the module to use and we can craft the request.

584
00:41:47,850 --> 00:41:55,520
So we're going to say that the requests the rec equals martyr to use dot request.

585
00:41:55,520 --> 00:41:58,410
Then we're gonna pass in the request details.

586
00:41:58,410 --> 00:42:03,110
It's gonna pass us back a response object.

587
00:42:03,110 --> 00:42:06,660
And just like last time,

588
00:42:06,660 --> 00:42:12,920
we're going to grab the status of the sent A request.

589
00:42:12,920 --> 00:42:19,510
So the status equals rez status code.

590
00:42:19,510 --> 00:42:25,010
They should all look familiar because this is what we did when making the request to twilio

591
00:42:25,010 --> 00:42:25,010
.

592
00:42:25,010 --> 00:42:33,010
Now we want to update the check outcome and pass the data along.

593
00:42:33,010 --> 00:42:40,440
So we want to say that they check outcome dot response code number.

594
00:42:40,440 --> 00:42:47,010
This thing up here equals whatever status we just got back.

595
00:42:47,010 --> 00:42:54,660
Now we want to check if the outcome has not been sent already and if it hasn't will pass it

596
00:42:54,660 --> 00:42:56,130
off the next phase in the process.

597
00:42:56,130 --> 00:42:56,710
In a moment,

598
00:42:56,710 --> 00:42:58,150
you'll understand why,

599
00:42:58,150 --> 00:42:59,290
in some cases,

600
00:42:59,290 --> 00:43:02,870
the outcome would have already been sent by the time we reached this part.

601
00:43:02,870 --> 00:43:06,550
So we want to say if the outcome has not been sent,

602
00:43:06,550 --> 00:43:13,650
then we want to call workers process check outcome,

603
00:43:13,650 --> 00:43:16,200
which is the next phase in the process.

604
00:43:16,200 --> 00:43:20,470
And then we want to pass it original check data on the original thing we were working with

605
00:43:20,470 --> 00:43:22,310
and the Czech outcome.

606
00:43:22,310 --> 00:43:27,720
Then we want to say outcome sent Too true.

607
00:43:27,720 --> 00:43:31,270
That's all we need to do here.

608
00:43:31,270 --> 00:43:34,240
But in the next section of the function,

609
00:43:34,240 --> 00:43:37,360
we're going to bind to an air,

610
00:43:37,360 --> 00:43:43,660
and that error is also going to pass things along to process check outcome if the outcome

611
00:43:43,660 --> 00:43:44,630
hasn't been set yet.

612
00:43:44,630 --> 00:43:53,250
So we're going to say bind to the air event so it doesn't get thrown,

613
00:43:53,250 --> 00:43:54,310
just like last night.

614
00:43:54,310 --> 00:44:00,520
So we're gonna say a request on air.

615
00:44:00,520 --> 00:44:17,310
So if the request throws the air event and give us the air and we want to say update just

616
00:44:17,310 --> 00:44:21,910
like above the check outcome and pass the data along.

617
00:44:21,910 --> 00:44:28,450
So I'm just gonna copy that here,

618
00:44:28,450 --> 00:44:35,720
we're going to say check outcome dot Air needs to be sent.

619
00:44:35,720 --> 00:44:36,000
Rumor.

620
00:44:36,000 --> 00:44:46,020
This field here and that's going to equal an object because it has some data we need.

621
00:44:46,020 --> 00:44:58,320
Teoh said air true value is going to be whatever this air is that got passed to us.

622
00:44:58,320 --> 00:45:01,600
Now that we have filled out the error,

623
00:45:01,600 --> 00:45:07,300
we want to say if outcome has not been sent,

624
00:45:07,300 --> 00:45:12,540
then do the same thing that we did above.

625
00:45:12,540 --> 00:45:19,290
Send the original check data and this new filled out check out.

626
00:45:19,290 --> 00:45:20,010
Come here.

627
00:45:20,010 --> 00:45:21,810
Now,

628
00:45:21,810 --> 00:45:24,980
The next thing that we need to do is something we didn't do on the last request,

629
00:45:24,980 --> 00:45:27,690
which is bind to the time out.

630
00:45:27,690 --> 00:45:32,050
So behind to the time out event,

631
00:45:32,050 --> 00:45:36,770
I'm just copying the whole error thing cause it's very similar and we want to say request

632
00:45:36,770 --> 00:45:37,630
on time out.

633
00:45:37,630 --> 00:45:37,730
So,

634
00:45:37,730 --> 00:45:38,440
in other words,

635
00:45:38,440 --> 00:45:41,450
if they exceed the time out seconds,

636
00:45:41,450 --> 00:45:44,580
If we said three seconds and it passes three seconds.

637
00:45:44,580 --> 00:45:51,130
Then we want to throw this event and we want to say there is an air,

638
00:45:51,130 --> 00:45:56,370
the air is true and the value this time is going to be time out.

639
00:45:56,370 --> 00:46:01,890
So now when the process check outcome function receives payloads,

640
00:46:01,890 --> 00:46:07,520
it can tell the difference between an air that is thrown and an error that is the result of

641
00:46:07,520 --> 00:46:10,560
a time out So the outcomes not sent.

642
00:46:10,560 --> 00:46:12,320
We're going to send that along here,

643
00:46:12,320 --> 00:46:14,050
so these are all set up.

644
00:46:14,050 --> 00:46:20,570
So that process chat outcome will only receive the original check data and check outcome

645
00:46:20,570 --> 00:46:22,100
once for each check.

646
00:46:22,100 --> 00:46:26,720
Because every time it's about descended in these three different places is checking if

647
00:46:26,720 --> 00:46:28,310
anyone else has ever ascended,

648
00:46:28,310 --> 00:46:31,490
and it's only going to send it if no one else has.

649
00:46:31,490 --> 00:46:32,770
Lastly,

650
00:46:32,770 --> 00:46:33,810
we want to,

651
00:46:33,810 --> 00:46:36,230
And the request,

652
00:46:36,230 --> 00:46:38,090
which is the same thing,

653
00:46:38,090 --> 00:46:41,330
is sending the request correct.

654
00:46:41,330 --> 00:46:46,590
And so now it'll get sent off.

655
00:46:46,590 --> 00:46:47,840
At this point,

656
00:46:47,840 --> 00:46:49,200
we need this function,

657
00:46:49,200 --> 00:46:51,390
so let's go ahead and write it.

658
00:46:51,390 --> 00:46:57,320
It's going to be the one that takes in these process checks after they've been performed.

659
00:46:57,320 --> 00:47:01,370
They might be in an air estate or they might have a status code,

660
00:47:01,370 --> 00:47:02,270
who knows?

661
00:47:02,270 --> 00:47:08,200
So we want to say that the purpose of this function is to process the check outcome an

662
00:47:08,200 --> 00:47:08,870
update,

663
00:47:08,870 --> 00:47:17,150
check data as needed and then trigger an alert to the user if needed.

664
00:47:17,150 --> 00:47:29,330
And we're going to include special logic here for accommodating a check that has never been

665
00:47:29,330 --> 00:47:30,400
tested before.

666
00:47:30,400 --> 00:47:36,090
And we want to say that we don't want to alert on that one.

667
00:47:36,090 --> 00:47:37,490
So,

668
00:47:37,490 --> 00:47:38,180
in other words,

669
00:47:38,180 --> 00:47:40,690
if the state is switching from down to up,

670
00:47:40,690 --> 00:47:44,490
but that's only because the state was set to down by default.

671
00:47:44,490 --> 00:47:51,440
We don't want to send a SMS to the user saying that the check went from down to up.

672
00:47:51,440 --> 00:47:57,210
We only want to alert the user that the status has changed if this status has truly changed

673
00:47:57,210 --> 00:47:59,990
from something that we read wants to something that we read now,

674
00:47:59,990 --> 00:48:02,830
so that's craft dysfunction were fished out.

675
00:48:02,830 --> 00:48:06,060
Process check outcome is,

676
00:48:06,060 --> 00:48:13,190
they function takes in the original check data and the check outcome.

677
00:48:13,190 --> 00:48:14,490
Like the others,

678
00:48:14,490 --> 00:48:15,680
it doesn't need to call back.

679
00:48:15,680 --> 00:48:20,930
It's going to handle whatever it needs to do and log out errors accordingly.

680
00:48:20,930 --> 00:48:30,140
First thing it needs to do is decide if the check is considered up or down in this current

681
00:48:30,140 --> 00:48:30,490
state,

682
00:48:30,490 --> 00:48:47,590
we're gonna say this state equals that there is no check outcome dot there and there is a

683
00:48:47,590 --> 00:48:51,190
check outcome dot response code.

684
00:48:51,190 --> 00:49:00,380
And that response code is one of the response codes that the user told us should be

685
00:49:00,380 --> 00:49:01,360
considered up.

686
00:49:01,360 --> 00:49:14,390
So we want to say that the original check data success codes index of check outcome

687
00:49:14,390 --> 00:49:22,280
response code is greater than negative one.

688
00:49:22,280 --> 00:49:24,640
If so,

689
00:49:24,640 --> 00:49:25,890
the check is up.

690
00:49:25,890 --> 00:49:27,890
Otherwise the check is down.

691
00:49:27,890 --> 00:49:31,190
So to say that one more time,

692
00:49:31,190 --> 00:49:35,090
we're considering the check the euro to be up.

693
00:49:35,090 --> 00:49:38,280
If when we went to process it,

694
00:49:38,280 --> 00:49:39,670
we didn't find an error,

695
00:49:39,670 --> 00:49:41,550
we did get a response code back,

696
00:49:41,550 --> 00:49:44,820
which means we didn't time out or in country and the other kind of there.

697
00:49:44,820 --> 00:49:51,540
And the response code that we got back was one of the codes in the array that the user set

698
00:49:51,540 --> 00:49:57,100
when he or she said that these were the allowable response codes that should be considered

699
00:49:57,100 --> 00:49:57,100
.

700
00:49:57,100 --> 00:49:57,990
Okay,

701
00:49:57,990 --> 00:50:01,770
Now we need to decide if an alert is warranted.

702
00:50:01,770 --> 00:50:07,630
Remember,

703
00:50:07,630 --> 00:50:12,870
we are texting users when the status of their check changes,

704
00:50:12,870 --> 00:50:17,820
and so we only want to text a user if it was previously down and went toe up or is

705
00:50:17,820 --> 00:50:19,290
previously up and went down.

706
00:50:19,290 --> 00:50:22,140
So we're going to save our alert.

707
00:50:22,140 --> 00:50:24,160
Warranted equals original.

708
00:50:24,160 --> 00:50:37,390
Check data dot last checked and original check data State does not equal state that we just

709
00:50:37,390 --> 00:50:37,980
set there.

710
00:50:37,980 --> 00:50:40,390
If so true,

711
00:50:40,390 --> 00:50:41,410
otherwise false.

712
00:50:41,410 --> 00:50:42,810
Let me explain what this means.

713
00:50:42,810 --> 00:50:45,910
We're trying to figure out if it's worth texting.

714
00:50:45,910 --> 00:50:46,290
User.

715
00:50:46,290 --> 00:50:53,100
The first thing we need to know is that they really did have a state before,

716
00:50:53,100 --> 00:50:56,820
so that if the check was down,

717
00:50:56,820 --> 00:50:57,660
it really was down.

718
00:50:57,660 --> 00:51:00,710
It wasn't just defaulted to down because he had never been checked before.

719
00:51:00,710 --> 00:51:05,940
And so we want to check that the last checked field is set.

720
00:51:05,940 --> 00:51:10,790
Any number is going to be Truth E and so checking it this way,

721
00:51:10,790 --> 00:51:11,280
it's fine,

722
00:51:11,280 --> 00:51:12,600
because if it was false,

723
00:51:12,600 --> 00:51:13,530
it would fail this job.

724
00:51:13,530 --> 00:51:16,990
And so if it said is a number and not said it's false,

725
00:51:16,990 --> 00:51:18,270
it'll pass here.

726
00:51:18,270 --> 00:51:24,170
And then we're checking that the original check data states of the last recorded state is

727
00:51:24,170 --> 00:51:30,870
different than the state that we just noted that the Ural currently is in.

728
00:51:30,870 --> 00:51:36,840
So we're saying that if it was down and is now up and the largest warranted,

729
00:51:36,840 --> 00:51:40,430
or if it was up and is now down,

730
00:51:40,430 --> 00:51:41,600
then it alert is warranted.

731
00:51:41,600 --> 00:51:44,620
And in the other case alert is not wanted.

732
00:51:44,620 --> 00:51:47,980
So now it's time to update the check data,

733
00:51:47,980 --> 00:51:50,470
regardless of whether or not it's worth texting.

734
00:51:50,470 --> 00:51:50,970
User,

735
00:51:50,970 --> 00:51:56,700
We do want to update the check in the database with this new data that we just got the last

736
00:51:56,700 --> 00:51:59,190
check time and the new state.

737
00:51:59,190 --> 00:52:10,520
So we want to say that new check data equals original check data and that new check data,

738
00:52:10,520 --> 00:52:11,260
uh,

739
00:52:11,260 --> 00:52:19,670
state equals state and new check data dot Last checked equals right now.

740
00:52:19,670 --> 00:52:23,670
Now we want to save the updates to disk.

741
00:52:23,670 --> 00:52:40,280
You want to say data update the Czechs collection with the I.

742
00:52:40,280 --> 00:52:42,050
D of the check that we're dealing with,

743
00:52:42,050 --> 00:52:47,760
we update it with new check data.

744
00:52:47,760 --> 00:52:50,130
They passes back and air.

745
00:52:50,130 --> 00:52:51,590
If there is no air,

746
00:52:51,590 --> 00:52:54,770
we want to continue.

747
00:52:54,770 --> 00:52:55,970
Otherwise,

748
00:52:55,970 --> 00:53:02,020
we want to just log out the fact that we're having issues we want to say air trying to save

749
00:53:02,020 --> 00:53:05,120
updates to one of the checks.

750
00:53:05,120 --> 00:53:08,360
But if everything's fine,

751
00:53:08,360 --> 00:53:15,910
we want to send the new check data to the next phase in the process,

752
00:53:15,910 --> 00:53:17,070
if needed.

753
00:53:17,070 --> 00:53:20,720
And the next phase of the process is actually sending the alert to the user.

754
00:53:20,720 --> 00:53:23,570
So we want to say if alert warranted,

755
00:53:23,570 --> 00:53:27,710
go ahead and send that alert.

756
00:53:27,710 --> 00:53:30,260
Otherwise we're not gonna do anything.

757
00:53:30,260 --> 00:53:34,770
So we're going to say check.

758
00:53:34,770 --> 00:53:36,970
Outcome has not changed.

759
00:53:36,970 --> 00:53:39,110
No alert needed,

760
00:53:39,110 --> 00:53:42,800
but it looked alert is warranted.

761
00:53:42,800 --> 00:53:50,580
We're gonna say workers that alert user to status change which is not a function that

762
00:53:50,580 --> 00:53:51,370
exists yet,

763
00:53:51,370 --> 00:53:57,960
but it will in a second workers that alert user to status change and then passed in new

764
00:53:57,960 --> 00:53:58,740
check day.

765
00:53:58,740 --> 00:53:59,990
Now,

766
00:53:59,990 --> 00:54:06,800
the last function that we need to build is you guessed it alert user to status change.

767
00:54:06,800 --> 00:54:13,960
And this is one that's going to send the actual SMS using the library that we made in the

768
00:54:13,960 --> 00:54:14,640
last lecture.

769
00:54:14,640 --> 00:54:21,710
So alert the user has to a change in their check status.

770
00:54:21,710 --> 00:54:23,570
As we can see above,

771
00:54:23,570 --> 00:54:24,930
workers got alert.

772
00:54:24,930 --> 00:54:32,260
User to status change is a function accepts in the new check data only,

773
00:54:32,260 --> 00:54:34,780
and at this point,

774
00:54:34,780 --> 00:54:36,980
we're going to craft the message.

775
00:54:36,980 --> 00:54:53,710
So we're going to get the message is equal to alert your check for new check data method to

776
00:54:53,710 --> 00:55:04,170
upper case and then new check Data protocol.

777
00:55:04,170 --> 00:55:22,460
Colts Last lash new Jeff data Your l is currently new check data State.

778
00:55:22,460 --> 00:55:23,760
So what this would say,

779
00:55:23,760 --> 00:55:24,340
for example,

780
00:55:24,340 --> 00:55:25,160
is alert.

781
00:55:25,160 --> 00:55:35,540
Your check for post http s colon slash slash google dot com is currently up or something

782
00:55:35,540 --> 00:55:36,050
like that.

783
00:55:36,050 --> 00:55:38,850
So now we have the messaging taken care of.

784
00:55:38,850 --> 00:55:44,750
We want to call the helpers using the helpless library we included up there.

785
00:55:44,750 --> 00:55:58,750
So we want to say helpers don't send twilio sms new check data dot Use your phone.

786
00:55:58,750 --> 00:56:01,130
Remember,

787
00:56:01,130 --> 00:56:06,920
we first need to say the phone number that we need to alert and we're storing the user's

788
00:56:06,920 --> 00:56:11,070
phone number on the check data so we don't need to look up the user.

789
00:56:11,070 --> 00:56:13,970
We already know who the user is that needs to be alerted.

790
00:56:13,970 --> 00:56:23,240
We need to send them that message and then we're gonna expect back an air in the car back.

791
00:56:23,240 --> 00:56:36,340
So we're going to say if there's not an air then bringing the log out Success user was

792
00:56:36,340 --> 00:56:46,150
alerted to a status change in their check via SMS.

793
00:56:46,150 --> 00:56:54,150
And then why don't we just also log out the message that we send them.

794
00:56:54,150 --> 00:56:56,040
But if there was an error,

795
00:56:56,040 --> 00:56:59,540
we want to log out.

796
00:56:59,540 --> 00:57:14,240
Air could not send SMS alert to user who had a state change in their check.

797
00:57:14,240 --> 00:57:22,800
So that is all we need to do for these workers.

798
00:57:22,800 --> 00:57:25,680
You should have a pretty good idea of how they work.

799
00:57:25,680 --> 00:57:28,310
But of course there are no checks in our system.

800
00:57:28,310 --> 00:57:30,220
So now when we start up this,

801
00:57:30,220 --> 00:57:33,340
besides a few errors that we might need to fix,

802
00:57:33,340 --> 00:57:36,510
we should see this error get logged out,

803
00:57:36,510 --> 00:57:38,830
could not find any checks to process.

804
00:57:38,830 --> 00:57:39,810
And then,

805
00:57:39,810 --> 00:57:41,230
since this is running once a minute,

806
00:57:41,230 --> 00:57:42,230
a minute later,

807
00:57:42,230 --> 00:57:43,410
we would see the same thing.

808
00:57:43,410 --> 00:57:45,580
So let's see what happens.

809
00:57:45,580 --> 00:57:51,350
There we have it.

810
00:57:51,350 --> 00:57:55,910
And just for illustrative purposes,

811
00:57:55,910 --> 00:58:00,030
I'm to speed this up to run every five seconds instead,

812
00:58:00,030 --> 00:58:02,510
just so we can see the loop work.

813
00:58:02,510 --> 00:58:04,500
I could not find any checks.

814
00:58:04,500 --> 00:58:05,110
The process.

815
00:58:05,110 --> 00:58:05,670
That's the run.

816
00:58:05,670 --> 00:58:09,150
This running initially now five seconds later,

817
00:58:09,150 --> 00:58:10,820
could not find the checks to process.

818
00:58:10,820 --> 00:58:12,530
Five seconds after that,

819
00:58:12,530 --> 00:58:14,980
could not find any checks to process.

820
00:58:14,980 --> 00:58:19,320
It's so it's just going to continue to try over and over again.

821
00:58:19,320 --> 00:58:25,930
Let me set this back to 60 and we might encounter some other heirs when we I actually have

822
00:58:25,930 --> 00:58:26,760
some checks in there.

823
00:58:26,760 --> 00:58:27,940
But let's see.

824
00:58:27,940 --> 00:58:35,850
So let's go to postman and create a few checks with our user and then start the at back up

825
00:58:35,850 --> 00:58:44,120
and see if the checks are getting processed normally when a start up the app And now let

826
00:58:44,120 --> 00:58:45,650
before I need to get a token,

827
00:58:45,650 --> 00:58:49,360
This the token I'm gonna use and my subsequent requests.

828
00:58:49,360 --> 00:58:53,320
I'm gonna go create a new check just like I did before.

829
00:58:53,320 --> 00:59:03,700
But this time you use this new token and this same one that we were creating with the user

830
00:59:03,700 --> 00:59:04,810
before we deleted him,

831
00:59:04,810 --> 00:59:05,660
I think would be fine.

832
00:59:05,660 --> 00:59:11,330
Except let's say that this https protocol all right,

833
00:59:11,330 --> 00:59:13,900
you've created that that's create another one,

834
00:59:13,900 --> 00:59:18,330
too yahoo dot com Oh,

835
00:59:18,330 --> 00:59:25,280
I'm hitting this issue because I just manually save this user without updating Hiss array

836
00:59:25,280 --> 00:59:26,830
of checks.

837
00:59:26,830 --> 00:59:33,640
And so I'm going to delete this guy's checks and re save his user.

838
00:59:33,640 --> 00:59:37,250
Start the backup.

839
00:59:37,250 --> 00:59:41,830
Most are gonna delete this check since it's now and orphan.

840
00:59:41,830 --> 00:59:47,880
All right,

841
00:59:47,880 --> 00:59:52,360
created one for Yahoo.

842
00:59:52,360 --> 00:59:54,670
Let's create one for Google.

843
00:59:54,670 --> 00:59:56,130
All right,

844
00:59:56,130 --> 00:59:56,540
Now,

845
00:59:56,540 --> 00:59:59,980
this user has these two checks on his object.

846
00:59:59,980 --> 01:00:00,570
Now,

847
01:00:00,570 --> 01:00:02,590
let's go ahead and restart the server,

848
01:00:02,590 --> 01:00:03,930
See what it does.

849
01:00:03,930 --> 01:00:07,560
Could not find any checks to process,

850
01:00:07,560 --> 01:00:09,020
so that's not right.

851
01:00:09,020 --> 01:00:13,850
Let's go ahead and check this out and see what's going on.

852
01:00:13,850 --> 01:00:18,580
Looks like it might be an error with this listing function that we did.

853
01:00:18,580 --> 01:00:25,780
We said there was a strength when it is supposed to be the variable start the workers back

