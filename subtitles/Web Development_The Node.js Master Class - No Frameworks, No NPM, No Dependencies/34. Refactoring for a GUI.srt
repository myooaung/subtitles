1
00:00:00,000 --> 00:00:09,460
Let's begin re factoring our application so that it can support a Web interface and not

2
00:00:09,460 --> 00:00:11,140
just a Jace on a P I.

3
00:00:11,140 --> 00:00:16,220
I've gone ahead and opened up the server dot Js file inside of the lip directory on the

4
00:00:16,220 --> 00:00:20,380
scroll all the way down to where we have defined this router.

5
00:00:20,380 --> 00:00:24,080
The pass on this rather were fine for a Jason a p I.

6
00:00:24,080 --> 00:00:30,460
We didn't need any prefixes to any of these services because we didn't have anything else

7
00:00:30,460 --> 00:00:32,090
going on in this application.

8
00:00:32,090 --> 00:00:34,740
Now that's starting to change,

9
00:00:34,740 --> 00:00:42,070
and we actually are going to want to move a lot of these services up into their own AP I

10
00:00:42,070 --> 00:00:49,850
directory with their own AP I prefix just to get out of the way off any other new user

11
00:00:49,850 --> 00:00:52,750
facing rows that we will need for the Web app.

12
00:00:52,750 --> 00:01:00,150
So I'm going to modify these three services users tokens and checks so that they exist off

13
00:01:00,150 --> 00:01:02,560
of an A p I prefix.

14
00:01:02,560 --> 00:01:07,690
So rather than making requests to local host slash users,

15
00:01:07,690 --> 00:01:12,330
a client would now make a request to local host slash AP I slash users.

16
00:01:12,330 --> 00:01:12,960
For example,

17
00:01:12,960 --> 00:01:18,020
I'm gonna leave Ping as its own path because that might be useful,

18
00:01:18,020 --> 00:01:19,800
and it's not really part of our A P I.

19
00:01:19,800 --> 00:01:21,720
It's just the app itself,

20
00:01:21,720 --> 00:01:25,460
telling anyone who might ping it that it is alive.

21
00:01:25,460 --> 00:01:30,100
What we're here in anticipation of the routes we're going to build.

22
00:01:30,100 --> 00:01:35,690
We might a swell fill out this router with everything that's going to need to be there in

23
00:01:35,690 --> 00:01:36,820
the coming lectures.

24
00:01:36,820 --> 00:01:37,750
So at the top,

25
00:01:37,750 --> 00:01:41,430
we're going to add a path of a nature we haven't seen before.

26
00:01:41,430 --> 00:01:43,050
And that is an empty string.

27
00:01:43,050 --> 00:01:50,140
And that empty string will route to Handler called handlers dot Index,

28
00:01:50,140 --> 00:01:50,300
which,

29
00:01:50,300 --> 00:01:50,650
of course,

30
00:01:50,650 --> 00:01:51,550
doesn't exist yet.

31
00:01:51,550 --> 00:01:52,720
If you look at this,

32
00:01:52,720 --> 00:01:55,080
you can probably guess what this means.

33
00:01:55,080 --> 00:01:56,200
Until now,

34
00:01:56,200 --> 00:02:01,370
any path that a user might hit has had a string of a length.

35
00:02:01,370 --> 00:02:03,190
It's always had something in it.

36
00:02:03,190 --> 00:02:04,470
But now,

37
00:02:04,470 --> 00:02:06,500
like any normal Web app,

38
00:02:06,500 --> 00:02:12,530
we're going to have users who request the base directory who requests no path at all,

39
00:02:12,530 --> 00:02:17,270
and that will mean that we need to serve them the index file of this new website.

40
00:02:17,270 --> 00:02:18,450
So for them,

41
00:02:18,450 --> 00:02:22,210
we're going to say that if you request no path,

42
00:02:22,210 --> 00:02:24,590
you should be served by the index handler.

43
00:02:24,590 --> 00:02:28,270
Now that's built out a few of the other ones.

44
00:02:28,270 --> 00:02:30,400
Before a user can do anything,

45
00:02:30,400 --> 00:02:32,640
the user first needs to exist.

46
00:02:32,640 --> 00:02:38,310
And so the first route that we want besides the index is account slash create.

47
00:02:38,310 --> 00:02:44,820
This is the path in the browser that the user will actually visit if they visit local host

48
00:02:44,820 --> 00:02:49,320
2000 or whatever at the base directory is where this app is hosted,

49
00:02:49,320 --> 00:02:51,850
and then they click on Sign Up.

50
00:02:51,850 --> 00:02:58,900
They'll be taken to the domaine dot com slash account slash create and this handler called

51
00:02:58,900 --> 00:03:02,450
handlers dot account create.

52
00:03:02,450 --> 00:03:05,530
We'll need to serve them in HTML page,

53
00:03:05,530 --> 00:03:11,050
showing them a sign up form where they can fill out information and sign up for an account

54
00:03:11,050 --> 00:03:11,050
.

55
00:03:11,050 --> 00:03:13,230
Once they're inside of their account,

56
00:03:13,230 --> 00:03:16,110
they're going to be able to edit their settings.

57
00:03:16,110 --> 00:03:21,540
So I'm gonna create a path called account Slash Edit that will route to a handler called

58
00:03:21,540 --> 00:03:24,150
handlers dot account at it.

59
00:03:24,150 --> 00:03:26,760
Once their account exists,

60
00:03:26,760 --> 00:03:28,640
they also need the ability to delete it,

61
00:03:28,640 --> 00:03:32,890
and that is going to be a button that exists on the account edit page.

62
00:03:32,890 --> 00:03:35,170
But once they have deleted their account,

63
00:03:35,170 --> 00:03:39,590
they need to be taken to a your account has been deleted page,

64
00:03:39,590 --> 00:03:46,450
and so we're going to set up that route at account slash deleted that will be served by

65
00:03:46,450 --> 00:03:55,920
Handler called handlers dot account deleted in order to do anything on the edit path or in

66
00:03:55,920 --> 00:04:00,220
order to reach the deleted path they will have needed to sign it.

67
00:04:00,220 --> 00:04:01,680
Or in our parliaments,

68
00:04:01,680 --> 00:04:03,710
they need to create a session.

69
00:04:03,710 --> 00:04:07,680
And so we're going to create a route called Session Slash create.

70
00:04:07,680 --> 00:04:11,830
If they visit the home page and then they click a button that says Sinan,

71
00:04:11,830 --> 00:04:14,110
they'll be taken to a log in form,

72
00:04:14,110 --> 00:04:19,530
and that log in form is going to be served at the earl slash session slash create,

73
00:04:19,530 --> 00:04:25,350
and it's going to be served by Handler called handlers dot session create.

74
00:04:25,350 --> 00:04:28,120
Similarly,

75
00:04:28,120 --> 00:04:30,270
they need to be able to log out,

76
00:04:30,270 --> 00:04:32,250
which is deleting a session,

77
00:04:32,250 --> 00:04:34,160
and after a session is deleted,

78
00:04:34,160 --> 00:04:39,660
they need to be taken to a page that says you have deleted your session or in user speak.

79
00:04:39,660 --> 00:04:40,780
You have logged out,

80
00:04:40,780 --> 00:04:45,380
so we're going to create a route called Session Slash deleted that they'll be taken to

81
00:04:45,380 --> 00:04:46,550
after logging out,

82
00:04:46,550 --> 00:04:54,070
and that will be served by handlers DOT Session deleted when they're signed in and they

83
00:04:54,070 --> 00:04:55,990
want to create checks.

84
00:04:55,990 --> 00:05:00,230
The first thing they're going to need to see is a dashboard of their existing checks,

85
00:05:00,230 --> 00:05:05,820
where they can click on them and reach more details or click a button and to be taken to a

86
00:05:05,820 --> 00:05:07,340
page where they can create a new check.

87
00:05:07,340 --> 00:05:10,450
This dashboard page is going to be called checks.

88
00:05:10,450 --> 00:05:11,750
Slash all,

89
00:05:11,750 --> 00:05:12,600
and this,

90
00:05:12,600 --> 00:05:14,150
like many of these other routes,

91
00:05:14,150 --> 00:05:19,840
is going to be a protected route that you can only reach if you're signed in Check slash

92
00:05:19,840 --> 00:05:24,150
all is going to be served by handlers dot checks list.

93
00:05:24,150 --> 00:05:26,050
As I mentioned,

94
00:05:26,050 --> 00:05:31,250
they're also going to want to be able to create a check on a special page that gives them a

95
00:05:31,250 --> 00:05:36,790
form that they can fill out in order to create a check and that path that they're on when

96
00:05:36,790 --> 00:05:42,840
they're doing that will be checks Slash create that we served by Handler called handlers

97
00:05:42,840 --> 00:05:44,650
dot checks create.

98
00:05:44,650 --> 00:05:49,570
They're also going to want to be able to edit and delete a check.

99
00:05:49,570 --> 00:05:55,820
If they delete a check will simply be taken back to a checks list page,

100
00:05:55,820 --> 00:05:57,220
but if they edit it,

101
00:05:57,220 --> 00:06:02,530
they will simply need to see a message on that same editing page saying that they're

102
00:06:02,530 --> 00:06:04,060
changes have been saved.

103
00:06:04,060 --> 00:06:09,620
That page is going to be called checks slash edit checks slash ed.

104
00:06:09,620 --> 00:06:12,790
It will be served by handlers dot checks.

105
00:06:12,790 --> 00:06:13,150
Edit.

106
00:06:13,150 --> 00:06:17,370
That's all the new routes that we need.

107
00:06:17,370 --> 00:06:23,310
And now we can actually go about modifying the server a little bit more so that it can

108
00:06:23,310 --> 00:06:26,060
support HTML content types.

109
00:06:26,060 --> 00:06:28,170
Right now it serves Jason,

110
00:06:28,170 --> 00:06:29,970
and it only serves Jason,

111
00:06:29,970 --> 00:06:32,020
so we're going to need to modify that behavior.

112
00:06:32,020 --> 00:06:40,040
So we're going to go off inside of the unified server function and look for where we are

113
00:06:40,040 --> 00:06:45,370
passing the incoming request to the chosen handler to review.

114
00:06:45,370 --> 00:06:51,160
We expect all handlers to call back to optional fields a status code which will default to

115
00:06:51,160 --> 00:06:52,500
200 if they don't send it back.

116
00:06:52,500 --> 00:06:56,280
A payload which will default to an empty object,

117
00:06:56,280 --> 00:06:57,960
and that's it.

118
00:06:57,960 --> 00:07:04,940
But now we actually want to add 1/3 optional parameter to this function callback,

119
00:07:04,940 --> 00:07:13,310
which will allow anyone who is calling back as a handler to send 1/3 variable to us and

120
00:07:13,310 --> 00:07:17,120
that variable is going to be content type now,

121
00:07:17,120 --> 00:07:22,970
since no existing handler is calling this back there on Lee ever calling back status,

122
00:07:22,970 --> 00:07:24,010
code or payload,

123
00:07:24,010 --> 00:07:29,450
we're going to have to create a sensible default for content type that won't change the

124
00:07:29,450 --> 00:07:35,070
behavior of any of the existing routes or handlers for our case.

125
00:07:35,070 --> 00:07:37,220
We're going to make sure that the content type,

126
00:07:37,220 --> 00:07:38,710
if it's not specified,

127
00:07:38,710 --> 00:07:40,950
defaults to Jason.

128
00:07:40,950 --> 00:07:53,080
So here we want to determined the type of response fall back to Jason.

129
00:07:53,080 --> 00:08:06,860
So we want to say that the content type should equal strength and if it does,

130
00:08:06,860 --> 00:08:13,190
use whatever it is otherwise default to a strain called Jason.

131
00:08:13,190 --> 00:08:14,710
Up until now,

132
00:08:14,710 --> 00:08:15,980
in all cases,

133
00:08:15,980 --> 00:08:20,380
we have simply sent back the content type header,

134
00:08:20,380 --> 00:08:21,730
as always,

135
00:08:21,730 --> 00:08:28,110
set to applications last Jason and we have written the payload string to the body,

136
00:08:28,110 --> 00:08:32,490
defaulting it to an empty Jason object.

137
00:08:32,490 --> 00:08:39,640
Now we need to re factor this section of it to check if the content type being served

138
00:08:39,640 --> 00:08:40,820
should be Jason,

139
00:08:40,820 --> 00:08:43,040
in which case this behavior should stay the same.

140
00:08:43,040 --> 00:08:46,890
Or if the content type is going to be HTML,

141
00:08:46,890 --> 00:08:49,930
in which case a different header should be sent out.

142
00:08:49,930 --> 00:08:58,570
And rather than defaulting to a empty object issued default to an empty strength So rather

143
00:08:58,570 --> 00:09:01,220
than simply saying we want to return the response,

144
00:09:01,220 --> 00:09:09,850
we say that we want to return the response parts that are content specific,

145
00:09:09,850 --> 00:09:20,550
and then we want to return the response parts that are common to all content types.

146
00:09:20,550 --> 00:09:28,560
Let's start with what are common writing.

147
00:09:28,560 --> 00:09:34,800
This status code is going to be common to all requests and writing.

148
00:09:34,800 --> 00:09:40,140
Something that is defined as payload string is going to be common to all requests.

149
00:09:40,140 --> 00:09:45,850
It's just that what that payload string is will vary depending on the content type.

150
00:09:45,850 --> 00:09:53,550
So first we need to default the payload strength to an empty strength.

151
00:09:53,550 --> 00:09:56,300
Then we want to say,

152
00:09:56,300 --> 00:10:00,830
if the content type equals Jason,

153
00:10:00,830 --> 00:10:02,900
we want to do certain behavior.

154
00:10:02,900 --> 00:10:04,780
Otherwise,

155
00:10:04,780 --> 00:10:09,400
if the content type equals H t mail,

156
00:10:09,400 --> 00:10:12,710
we want to perform other set of behaviors.

157
00:10:12,710 --> 00:10:18,650
The behavior that we want to do if the content type is Jason is much of this behavior that

158
00:10:18,650 --> 00:10:19,950
exists up here.

159
00:10:19,950 --> 00:10:25,560
We want to set the headers to content type application.

160
00:10:25,560 --> 00:10:26,040
Jason,

161
00:10:26,040 --> 00:10:30,950
we want to default the payload to an empty object,

162
00:10:30,950 --> 00:10:42,790
and then we want to override this payload string variable with the Jason string of five

163
00:10:42,790 --> 00:10:43,250
payload.

164
00:10:43,250 --> 00:10:50,940
Alternatively,

165
00:10:50,940 --> 00:10:53,550
if the content type is HTML.

166
00:10:53,550 --> 00:10:57,850
I'm just going to copy this header from here.

167
00:10:57,850 --> 00:11:02,000
We want to say that content type instead of equals.

168
00:11:02,000 --> 00:11:06,650
Application slash Jason that's going to equal text slash html.

169
00:11:06,650 --> 00:11:08,400
Secondly,

170
00:11:08,400 --> 00:11:17,540
we want to say that the payload string it's going to be set to type of payload equals

171
00:11:17,540 --> 00:11:23,050
string payload or empty strength.

172
00:11:23,050 --> 00:11:24,920
In other words,

173
00:11:24,920 --> 00:11:29,750
if the existing payload that's being called back by the handler is already a string,

174
00:11:29,750 --> 00:11:32,190
then that's a string we need to use.

175
00:11:32,190 --> 00:11:33,010
Otherwise,

176
00:11:33,010 --> 00:11:37,310
we're going to use an empty string of our own For these HTML handlers.

177
00:11:37,310 --> 00:11:40,020
Calling back an object is not going to work.

178
00:11:40,020 --> 00:11:46,120
We're expecting these handlers to call back strings so that we can write them to the body

179
00:11:46,120 --> 00:11:47,550
of an HTML document.

180
00:11:47,550 --> 00:11:49,630
Now that we have this set up,

181
00:11:49,630 --> 00:11:56,430
I'd like to create a simple hello world route on the index handler that we defined in the

182
00:11:56,430 --> 00:11:58,550
router down here.

183
00:11:58,550 --> 00:12:01,540
So let's open up our handlers file,

184
00:12:01,540 --> 00:12:10,450
and we want to first note that everything below this point it's going to be considered

185
00:12:10,450 --> 00:12:24,660
Jason ap I peddlers and we're going to create a section up here that is just going to be

186
00:12:24,660 --> 00:12:28,590
dedicated to the new HD mail handlers that we're creating.

187
00:12:28,590 --> 00:12:35,680
The first handler is going to be the index handler,

188
00:12:35,680 --> 00:12:39,050
and it's going to be set up initially,

189
00:12:39,050 --> 00:12:44,980
just like the Jase on a P I handlers were going to say that handlers dot index,

190
00:12:44,980 --> 00:12:47,200
it's going to equal function,

191
00:12:47,200 --> 00:12:50,670
takes in data and to call back.

192
00:12:50,670 --> 00:12:52,690
And initially,

193
00:12:52,690 --> 00:12:56,260
let's just make it Colback Nothing at all.

194
00:12:56,260 --> 00:13:05,390
This will make the status code default to 200 the body default to an empty HTML string.

195
00:13:05,390 --> 00:13:09,420
But this is also going to make it default to Jason.

196
00:13:09,420 --> 00:13:16,160
So we actually want to make sure that the third parameter says html So rather than having

197
00:13:16,160 --> 00:13:16,940
nothing at all,

198
00:13:16,940 --> 00:13:18,950
we're going to say undefined,

199
00:13:18,950 --> 00:13:21,650
undefined,

200
00:13:21,650 --> 00:13:23,550
and then html.

201
00:13:23,550 --> 00:13:30,150
Now let's start the app up and then view the index page in a Web browser so we can see that

202
00:13:30,150 --> 00:13:31,170
this page is rendered.

203
00:13:31,170 --> 00:13:35,040
Okay,

204
00:13:35,040 --> 00:13:38,880
Now I'm gonna open up chrome and try to view this page.

205
00:13:38,880 --> 00:13:40,860
Okay,

206
00:13:40,860 --> 00:13:46,140
Now we can actually see that this page is at local host 3000 which is the index of this

207
00:13:46,140 --> 00:13:46,530
site.

208
00:13:46,530 --> 00:13:47,890
I'm gonna refresh it,

209
00:13:47,890 --> 00:13:51,470
and I'm actually switching to view source,

210
00:13:51,470 --> 00:13:52,500
which you can see here,

211
00:13:52,500 --> 00:13:55,450
you can see that there is nothing coming out.

212
00:13:55,450 --> 00:14:05,660
I'm gonna open up the inspector and then reload this so that we can actually just make sure

213
00:14:05,660 --> 00:14:07,250
that anything is happening at all.

214
00:14:07,250 --> 00:14:08,630
As we can see,

215
00:14:08,630 --> 00:14:15,780
local host 3000 was fetched with a get and the response headers were pretty minimal.

216
00:14:15,780 --> 00:14:17,360
We said content type,

217
00:14:17,360 --> 00:14:22,170
text slash html the date the transfer encoding and keep alive,

218
00:14:22,170 --> 00:14:25,350
which is stuff that note put on automatically.

219
00:14:25,350 --> 00:14:26,620
So so far,

220
00:14:26,620 --> 00:14:27,150
so good.

221
00:14:27,150 --> 00:14:33,180
We're able to serve an empty HTML file to the browser to make this a little bit easier.

222
00:14:33,180 --> 00:14:35,050
Let's view it in postman as well.

223
00:14:35,050 --> 00:14:36,440
I mean,

224
00:14:36,440 --> 00:14:45,360
to make a get request to local host 3000 and we see that we got back nothing at all except

225
00:14:45,360 --> 00:14:52,260
a 200 and content type text html as well as those other headers that I mentioned a moment

226
00:14:52,260 --> 00:14:58,610
ago to debug this front and application will use a combination of the browser when it's

227
00:14:58,610 --> 00:15:00,800
useful and postman,

228
00:15:00,800 --> 00:15:06,590
when we need to do simple things that don't require actually rendering the HTML objects or

229
00:15:06,590 --> 00:15:08,420
viewing the CSS or anything like that.

230
00:15:08,420 --> 00:15:17,530
Now let's go back and modify this new route so that it can serve some real HTML,

231
00:15:17,530 --> 00:15:19,550
such as a hello world message.

232
00:15:19,550 --> 00:15:21,320
I'll get rid of this.

233
00:15:21,320 --> 00:15:28,580
You can see I've added this comment that we want to reject any request that isn't a get so

234
00:15:28,580 --> 00:15:35,180
we want to say that if the data dot method equals,

235
00:15:35,180 --> 00:15:37,340
get will continue.

236
00:15:37,340 --> 00:15:44,780
Otherwise we want to call back four or five undefined and in html,

237
00:15:44,780 --> 00:15:46,350
strength.

238
00:15:46,350 --> 00:15:50,410
Simply saying four or five.

239
00:15:50,410 --> 00:15:51,620
That method is not allowed.

240
00:15:51,620 --> 00:15:51,830
What?

241
00:15:51,830 --> 00:15:56,560
We're going to tell you that by serving in HTML content type and the four or five status

242
00:15:56,560 --> 00:15:56,860
code.

243
00:15:56,860 --> 00:15:59,670
If the data method is get,

244
00:15:59,670 --> 00:16:04,280
then we want to read in the index template,

245
00:16:04,280 --> 00:16:07,150
which we haven't created yet as a strength.

246
00:16:07,150 --> 00:16:11,290
And though this function doesn't exist yet,

247
00:16:11,290 --> 00:16:13,370
I'm just going to use it in anticipation.

248
00:16:13,370 --> 00:16:21,470
We want to call helpers that get template and then pass it the word index because we want

249
00:16:21,470 --> 00:16:29,220
the index template and we want it to give us back and air and a string that string should

250
00:16:29,220 --> 00:16:31,100
contain the actual template data.

251
00:16:31,100 --> 00:16:34,580
So if there is no air and there is a string,

252
00:16:34,580 --> 00:16:42,790
we want to continue and simply called back 200 then the content of that template and then

253
00:16:42,790 --> 00:16:45,320
note that this is HTML that we're calling back.

254
00:16:45,320 --> 00:16:45,870
So,

255
00:16:45,870 --> 00:16:47,380
as you can anticipate,

256
00:16:47,380 --> 00:16:51,490
the template is going to hold with a bunch of HTML,

257
00:16:51,490 --> 00:16:57,150
and our handlers will simply fetch those templates from the file system and then serve them

258
00:16:57,150 --> 00:16:58,960
within HTML content type.

259
00:16:58,960 --> 00:17:03,560
If there was an air or there wasn't any template string,

260
00:17:03,560 --> 00:17:12,760
we want to call back 500 because something is wrong with the app Now that we've set that up

261
00:17:12,760 --> 00:17:12,760
.

262
00:17:12,760 --> 00:17:18,450
Obviously we need to go defined this helpers dot get template function.

263
00:17:18,450 --> 00:17:20,430
Let's open up the helpers.

264
00:17:20,430 --> 00:17:25,110
And the first thing that we're going to need to do in this helpers file is add some

265
00:17:25,110 --> 00:17:28,520
dependencies because in anticipation what's coming,

266
00:17:28,520 --> 00:17:32,610
we know that we're going to need the path module.

267
00:17:32,610 --> 00:17:36,380
So we're going to require path and we're going to need the file system.

268
00:17:36,380 --> 00:17:40,400
We're gonna require fs now.

269
00:17:40,400 --> 00:17:41,200
That's right,

270
00:17:41,200 --> 00:17:44,950
that get template function that we just referenced a moment ago.

271
00:17:44,950 --> 00:17:47,240
So down at the bottom,

272
00:17:47,240 --> 00:17:55,440
I'm to create this new function that should get the string content of a template,

273
00:17:55,440 --> 00:17:58,050
and it will be called helpers.

274
00:17:58,050 --> 00:18:00,660
Don't get template,

275
00:18:00,660 --> 00:18:07,660
as we saw a moment ago it's going to accept in a template name and a callback.

276
00:18:07,660 --> 00:18:11,060
The first thing that's going to need to do is sanity.

277
00:18:11,060 --> 00:18:12,570
Check the template name.

278
00:18:12,570 --> 00:18:13,180
So what?

279
00:18:13,180 --> 00:18:19,250
We will set the template name equals type of template.

280
00:18:19,250 --> 00:18:27,090
Name equals string and template.

281
00:18:27,090 --> 00:18:30,050
Name length is greater than zero.

282
00:18:30,050 --> 00:18:38,260
Then whatever template name is defined as or false then we only want to continue if

283
00:18:38,260 --> 00:18:40,350
template name Issa good variable.

284
00:18:40,350 --> 00:18:41,410
Otherwise,

285
00:18:41,410 --> 00:18:44,870
we're not gonna try to read a file of that name,

286
00:18:44,870 --> 00:18:53,050
so we will call back A valid template name was not specified.

287
00:18:53,050 --> 00:18:56,290
But if a valid string came through,

288
00:18:56,290 --> 00:19:00,300
then we want to read in the template file.

289
00:19:00,300 --> 00:19:09,160
So the first thing we're gonna do is define a templates directory as path Don't join.

290
00:19:09,160 --> 00:19:15,920
This should look familiar from the data folder underscore under store directory name and

291
00:19:15,920 --> 00:19:17,150
then slash,

292
00:19:17,150 --> 00:19:17,330
dot,

293
00:19:17,330 --> 00:19:17,540
dot,

294
00:19:17,540 --> 00:19:20,660
slash Templates slash.

295
00:19:20,660 --> 00:19:22,530
So,

296
00:19:22,530 --> 00:19:23,360
as you can see,

297
00:19:23,360 --> 00:19:28,350
we now need a new directory to exist in the roof order.

298
00:19:28,350 --> 00:19:30,950
We need to create directory.

299
00:19:30,950 --> 00:19:33,900
So I'm going to make directory templates.

300
00:19:33,900 --> 00:19:35,650
And there it is.

301
00:19:35,650 --> 00:19:38,760
Now that we've referenced that templates directory,

302
00:19:38,760 --> 00:19:45,990
we can try to use fs read file to pull in whatever the user is asking for.

303
00:19:45,990 --> 00:19:57,390
So we're gonna say Read file templates directory plus template name plus dot html Because

304
00:19:57,390 --> 00:20:00,950
all these templates are going to be named something dot html.

305
00:20:00,950 --> 00:20:08,880
Then we're gonna read it in as utf eight and expect back in air or a string.

306
00:20:08,880 --> 00:20:11,930
As you can guess.

307
00:20:11,930 --> 00:20:19,520
If there's not an air and there is a string and the string has a length of greater than

308
00:20:19,520 --> 00:20:20,050
zero,

309
00:20:20,050 --> 00:20:23,160
then we're just going to call back.

310
00:20:23,160 --> 00:20:26,580
No error and a string to the requester.

311
00:20:26,580 --> 00:20:27,850
Otherwise,

312
00:20:27,850 --> 00:20:29,160
we're going to call back.

313
00:20:29,160 --> 00:20:34,390
No template could be found.

314
00:20:34,390 --> 00:20:42,580
So now we have the basic scaffolding set up to read in in html template and then pass it

315
00:20:42,580 --> 00:20:47,350
back to a caller so that they can render it to the browser.

316
00:20:47,350 --> 00:20:50,090
But we don't have any templates yet,

317
00:20:50,090 --> 00:20:57,710
so let's go ahead and create this index template so that it can be rendered when someone

318
00:20:57,710 --> 00:20:59,280
requests the base directory.

319
00:20:59,280 --> 00:21:01,660
So within the templates for order,

320
00:21:01,660 --> 00:21:10,950
I'm going to create a new file called index dot html.

321
00:21:10,950 --> 00:21:16,450
Open that up and it's going to be very simple.

322
00:21:16,450 --> 00:21:17,580
HTML document.

323
00:21:17,580 --> 00:21:22,970
It's gonna have an HTML opening and closing tag.

324
00:21:22,970 --> 00:21:36,880
It's going to have a head opening and closing tag as well as one for the body and in the

325
00:21:36,880 --> 00:21:37,390
head.

326
00:21:37,390 --> 00:21:49,840
There's just going to be a title tag saying in the World and similarly in the body and H

327
00:21:49,840 --> 00:21:51,730
one saying Hello,

328
00:21:51,730 --> 00:21:53,280
world exclamation point.

329
00:21:53,280 --> 00:21:57,730
Now that we've set that up,

330
00:21:57,730 --> 00:22:02,810
we've created this template that's living in the templates for her.

331
00:22:02,810 --> 00:22:05,180
When the handler gets called,

332
00:22:05,180 --> 00:22:12,140
we're going to use this get template function to find here in order to read in the content

333
00:22:12,140 --> 00:22:15,180
of this template and serve it back to the browser.

334
00:22:15,180 --> 00:22:17,880
So when we go to postman now,

335
00:22:17,880 --> 00:22:24,370
we start up the APP and make this request to the base directory.

336
00:22:24,370 --> 00:22:24,740
Again.

337
00:22:24,740 --> 00:22:31,140
We'll see that a body is returned and it is an HTML document.

338
00:22:31,140 --> 00:22:32,310
Similarly,

339
00:22:32,310 --> 00:22:34,550
when we refresh the page in the browser,

340
00:22:34,550 --> 00:22:37,430
we can see Hello world.

341
00:22:37,430 --> 00:22:38,620
When I view source,

342
00:22:38,620 --> 00:22:43,960
we see the same HTML document that we created in the template photo.

343
00:22:43,960 --> 00:22:52,730
So that's our little hello world Proof of concept of rendering HTML for the browser R A p I

344
00:22:52,730 --> 00:22:58,950
should still be working as normal is just that the paths have been moved up to live inside

345
00:22:58,950 --> 00:23:01,780
of another directory called slash AP.

346
00:23:01,780 --> 00:23:05,380
I and now our APP is ready to get a bit more complicated.

347
00:23:05,380 --> 00:23:06,960
So in the following lectures,

348
00:23:06,960 --> 00:23:12,790
we are going to add on some more features that let us serve more complicated content such

349
00:23:12,790 --> 00:23:14,990
as photos and CSS files.

350
00:23:14,990 --> 00:23:22,840
And then we're just going to start building out these HTML templates and the client side,

351
00:23:22,840 --> 00:23:28,550
JavaScript and CSS that we need to exist for Our users toe have a fully functional Web app

352
00:23:28,550 --> 00:23:28,550
.

353
00:23:28,550 --> 00:23:34,800
But this basic concept of serving hte email to the browser has been accomplished.

354
00:23:34,800 --> 00:23:35,090
Here.

355
00:23:35,090 --> 00:23:39,720
It's now we can kill the APP and move on to the next lecture.

