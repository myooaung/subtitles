1
00:00:00,000 --> 00:00:03,960
Okay,

2
00:00:03,960 --> 00:00:04,510
At this point,

3
00:00:04,510 --> 00:00:08,680
we have enough of these scaffolding of the application built up so we can actually start

4
00:00:08,680 --> 00:00:11,410
building on the production routes.

5
00:00:11,410 --> 00:00:14,870
The first round we want to build is super simple.

6
00:00:14,870 --> 00:00:16,520
It is called Ping,

7
00:00:16,520 --> 00:00:19,650
So we're going to add a route to the router called Ping,

8
00:00:19,650 --> 00:00:24,570
and we're going to create a handler for that route that simply calls back 200.

9
00:00:24,570 --> 00:00:25,540
What is this for?

10
00:00:25,540 --> 00:00:32,170
The purpose is so you can monitor your application and easily find out if it is alive or

11
00:00:32,170 --> 00:00:33,980
dot Coincidentally,

12
00:00:33,980 --> 00:00:37,110
this is also really useful for up time monitoring.

13
00:00:37,110 --> 00:00:41,150
If this application was being monitored by another uptime monitor,

14
00:00:41,150 --> 00:00:47,460
the slash ping route is probably the one that we would give when we're setting up the check

15
00:00:47,460 --> 00:00:47,460
.

16
00:00:47,460 --> 00:00:51,050
Because the Ping route doesn't have any actual effect on the server.

17
00:00:51,050 --> 00:00:53,870
All it does is called back 200 say,

18
00:00:53,870 --> 00:00:54,260
Yes,

19
00:00:54,260 --> 00:00:55,090
I'm still alive.

20
00:00:55,090 --> 00:00:59,070
So let's go ahead and create that run within index dot Js.

21
00:00:59,070 --> 00:01:09,320
I'm going to get rid of the sample route entirely and leave the not found handler because

22
00:01:09,320 --> 00:01:12,110
that is still something that we want to invoke.

23
00:01:12,110 --> 00:01:15,420
Anytime a user requests a path,

24
00:01:15,420 --> 00:01:16,270
it doesn't exist,

25
00:01:16,270 --> 00:01:19,580
but we want to define a router rather than sample.

26
00:01:19,580 --> 00:01:20,720
We want to call it pink,

27
00:01:20,720 --> 00:01:24,200
and it needs to go to handlers dot pig.

28
00:01:24,200 --> 00:01:26,380
So I'm gonna recreate a hammer here.

29
00:01:26,380 --> 00:01:27,850
That's a lot like the sample route.

30
00:01:27,850 --> 00:01:30,650
Call it a ping handler.

31
00:01:30,650 --> 00:01:37,160
Handlers dot Ping Just like the others.

32
00:01:37,160 --> 00:01:40,730
It takes a data object and call back,

33
00:01:40,730 --> 00:01:46,600
and all it's going to do is call back 200.

34
00:01:46,600 --> 00:01:53,220
Remember that you can call back a status code and a data object optionally.

35
00:01:53,220 --> 00:01:54,990
And if it doesn't call back a data object,

36
00:01:54,990 --> 00:01:56,770
an empty object gets returned to the user.

37
00:01:56,770 --> 00:02:00,150
So we're just going to call that 200 cause we don't care about the payload.

38
00:02:00,150 --> 00:02:00,410
Really?

39
00:02:00,410 --> 00:02:03,940
I'm going to start up the act.

40
00:02:03,940 --> 00:02:07,160
It's listening.

41
00:02:07,160 --> 00:02:09,160
Now,

42
00:02:09,160 --> 00:02:11,450
I'm gonna go back over to Postman,

43
00:02:11,450 --> 00:02:20,050
make a request to local host 3000 slash king,

44
00:02:20,050 --> 00:02:24,950
and I should just get 200 back with a raw object,

45
00:02:24,950 --> 00:02:28,060
and I do All right,

46
00:02:28,060 --> 00:02:29,630
so that was pretty simple.

47
00:02:29,630 --> 00:02:34,150
Now we have a ping set up that will always call back 200 to any request.

48
00:02:34,150 --> 00:02:37,550
We can kill this application and move on to the next lecture

