WEBVTT
ï»¿1
00:00:00.000 --> 00:00:04.600
in this lecture,

2
00:00:04.600 --> 00:00:11.780
we're going to go over how to modify a node application so that it can serve static assets

3
00:00:11.780 --> 00:00:13.660
like CSS files,

4
00:00:13.660 --> 00:00:15.260
static JavaScript files,

5
00:00:15.260 --> 00:00:17.470
fab icons and images.

6
00:00:17.470 --> 00:00:20.950
So before we start modifying the APP,

7
00:00:20.950 --> 00:00:27.200
let's create a folder full of assets that are going to need to be served something to make

8
00:00:27.200 --> 00:00:29.650
a new directory and call it public.

9
00:00:29.650 --> 00:00:35.250
Now let's create some files within that directory.

10
00:00:35.250 --> 00:00:39.350
I'm going to create a CSS file for the application.

11
00:00:39.350 --> 00:00:45.290
I'm gonna create a client side javascript file.

12
00:00:45.290 --> 00:00:48.150
You can see them getting created here.

13
00:00:48.150 --> 00:00:53.150
Now we want to add a fabrikant dot i CEO,

14
00:00:53.150 --> 00:00:57.870
a logo file and just a test J pick,

15
00:00:57.870 --> 00:01:03.540
rather than going into a drawing program and creating these images and files.

16
00:01:03.540 --> 00:01:07.990
And now I'm just going to use ones that I've created for this lecture and paste the man.

17
00:01:07.990 --> 00:01:09.830
If you want these files,

18
00:01:09.830 --> 00:01:13.020
you can go to the get hub that's linked from this lecture.

19
00:01:13.020 --> 00:01:14.900
Go into the public folder.

20
00:01:14.900 --> 00:01:21.300
You'll see fabric conduct I CEO logo dot PNG and test J Peg all in there,

21
00:01:21.300 --> 00:01:25.350
and you can go ahead and use those so you can see,

22
00:01:25.350 --> 00:01:25.740
I guess,

23
00:01:25.740 --> 00:01:30.910
placed these three files in here now within the app dot Js file.

24
00:01:30.910 --> 00:01:39.670
I'm just going to note that this is the front and logic for the application,

25
00:01:39.670 --> 00:01:50.150
and all that's going to do so far is create and an object and then log out.

26
00:01:50.150 --> 00:01:52.410
Hello,

27
00:01:52.410 --> 00:01:53.950
Concert world.

28
00:01:53.950 --> 00:01:57.760
We should see that within the chrome console.

29
00:01:57.760 --> 00:02:02.710
When we go to inspect the page that's rendered with an app dot CSS.

30
00:02:02.710 --> 00:02:07.830
I'm going to add a bunch of styles just to clean up what we've done so far.

31
00:02:07.830 --> 00:02:15.990
I'm going to note that this is the CSS styles for the application.

32
00:02:15.990 --> 00:02:27.040
Now I'm going to create a bunch of CSS that I don't want to waste your time with here

33
00:02:27.040 --> 00:02:29.670
because this isn't a front end course.

34
00:02:29.670 --> 00:02:34.700
But if you want the CSS that we're going to be using Utkan,

35
00:02:34.700 --> 00:02:36.950
go ahead and grab it from the get hub.

36
00:02:36.950 --> 00:02:39.180
When you get the version on get Hub,

37
00:02:39.180 --> 00:02:46.360
you'll see that this file is going to be changing with each lecture to only include the

38
00:02:46.360 --> 00:02:51.210
styles that are relevant to the particular lecture code that you're looking at.

39
00:02:51.210 --> 00:02:59.240
But I am just pasting in really all the CSS that we're going to need and you're welcome to

40
00:02:59.240 --> 00:03:00.150
browse through it.

41
00:03:00.150 --> 00:03:05.280
You can find this final style sheet within a folder called Final.

42
00:03:05.280 --> 00:03:08.110
Within the section that we're in right now.

43
00:03:08.110 --> 00:03:10.490
You can see that includes some resets,

44
00:03:10.490 --> 00:03:19.470
the main color palette styles for the index page and then styles for the account creation

45
00:03:19.470 --> 00:03:22.660
page and all the other pages on the site.

46
00:03:22.660 --> 00:03:27.210
We won't be returning to the CSS file again in this lecture,

47
00:03:27.210 --> 00:03:31.450
so I'll just leave it to you to look more deeply into it if you feel like it.

48
00:03:31.450 --> 00:03:32.340
We will,

49
00:03:32.340 --> 00:03:32.980
however,

50
00:03:32.980 --> 00:03:39.030
be adding pieces of front and logic to the application in the app dot Js file as these

51
00:03:39.030 --> 00:03:42.670
lectures go on because while that is a front and thing,

52
00:03:42.670 --> 00:03:49.270
I do want to at least briefly go over how we're using client side Ajax to interact with the

53
00:03:49.270 --> 00:03:50.750
rest for a P I that we built.

54
00:03:50.750 --> 00:03:58.120
Now we are going to add some logic to the application so that it can serve the static file

55
00:03:58.120 --> 00:04:02.040
CSS JavaScript I CEO and images that we've created.

56
00:04:02.040 --> 00:04:03.060
Before we do that,

57
00:04:03.060 --> 00:04:03.600
though,

58
00:04:03.600 --> 00:04:08.500
let me just modify this header so that it's going to have some real links in it.

59
00:04:08.500 --> 00:04:20.430
Home is going to go to slash Sign up should go to account slash create log in should go to

60
00:04:20.430 --> 00:04:26.950
session slash Create the dashboard should go to checks.

61
00:04:26.950 --> 00:04:27.910
Oh,

62
00:04:27.910 --> 00:04:38.030
the account settings page should be account slash edit and log out for now is just going to

63
00:04:38.030 --> 00:04:40.530
be a pound symbol later on.

64
00:04:40.530 --> 00:04:44.150
Will buying the log out button to actually log you out?

65
00:04:44.150 --> 00:04:46.850
And then we direct you to the logged out page.

66
00:04:46.850 --> 00:04:47.300
Now,

67
00:04:47.300 --> 00:04:49.600
as you can see in this header file,

68
00:04:49.600 --> 00:04:54.480
things like app dot Js are served from a public directory.

69
00:04:54.480 --> 00:04:56.850
The directories actually call it public,

70
00:04:56.850 --> 00:04:59.290
which corresponds to the border that it's really in.

71
00:04:59.290 --> 00:05:03.300
So we need to go to our server and add a route.

72
00:05:03.300 --> 00:05:04.350
Call it public.

73
00:05:04.350 --> 00:05:05.960
Also,

74
00:05:05.960 --> 00:05:10.930
since fabric Conduct I CEO should be served from the base directory,

75
00:05:10.930 --> 00:05:12.460
not from the public folder,

76
00:05:12.460 --> 00:05:13.780
just by convention,

77
00:05:13.780 --> 00:05:15.670
we need to add that as well.

78
00:05:15.670 --> 00:05:19.940
So we're going to add a route called Con that I C E.

79
00:05:19.940 --> 00:05:20.150
O.

80
00:05:20.150 --> 00:05:25.040
Which is going to be handled by handlers dot fabric on,

81
00:05:25.040 --> 00:05:28.850
and we want a public route.

82
00:05:28.850 --> 00:05:32.650
There's handled by handlers dot public.

83
00:05:32.650 --> 00:05:37.050
Now let's go to our handlers file and actually write those handlers.

84
00:05:37.050 --> 00:05:40.010
But though the index handler,

85
00:05:40.010 --> 00:05:42.400
I'm going to create a fabric on handler first.

86
00:05:42.400 --> 00:05:51.990
So handlers dot fabric Khan is just like any other out takes in data and a call back.

87
00:05:51.990 --> 00:05:56.170
And just like the index,

88
00:05:56.170 --> 00:06:10.290
we're going to reject any method that isn't get and return a four or five if it is a get we

89
00:06:10.290 --> 00:06:13.290
actually want to serve the fabric on.

90
00:06:13.290 --> 00:06:21.150
So we want to read in the fabric Cons data.

91
00:06:21.150 --> 00:06:22.750
So for that,

92
00:06:22.750 --> 00:06:28.450
we're going to call the helper that we haven't written yet called helpers dot get static

93
00:06:28.450 --> 00:06:29.550
asset.

94
00:06:29.550 --> 00:06:35.350
We're going to say that the static asset is farrakhan dot ceo.

95
00:06:35.350 --> 00:06:39.610
Then we're going to expect an air,

96
00:06:39.610 --> 00:06:42.790
and I have climbed dated to come back.

97
00:06:42.790 --> 00:06:49.020
If there isn't a right and there is data we're going to continue,

98
00:06:49.020 --> 00:06:53.650
otherwise we're gonna call back 500.

99
00:06:53.650 --> 00:06:55.550
If everything is fine,

100
00:06:55.550 --> 00:07:05.010
we're just gonna call back the data which will look like call back 200 call back the raw

101
00:07:05.010 --> 00:07:06.290
data of the fabric con,

102
00:07:06.290 --> 00:07:11.280
and then tell the server that the type that we're calling back it's not Jason,

103
00:07:11.280 --> 00:07:12.470
and it's not hte email.

104
00:07:12.470 --> 00:07:14.880
It's actually going to be fabric are.

105
00:07:14.880 --> 00:07:19.180
So when we go back to our server file.

106
00:07:19.180 --> 00:07:23.940
We're going to need to modify it to accept a Fabrikant type as well.

107
00:07:23.940 --> 00:07:29.230
Now we're going to write another handler that just serves all the public assets that are

108
00:07:29.230 --> 00:07:33.270
within the public directory and any that we will be adding later.

109
00:07:33.270 --> 00:07:36.650
This is gonna be for public assets.

110
00:07:36.650 --> 00:07:37.840
I'm gonna pay.

111
00:07:37.840 --> 00:07:42.650
Stay at the top of the fabric on Hammer and then modify some things so handlers dot public

112
00:07:42.650 --> 00:07:49.270
going to take in the same things and reject anything that isn't a get method with the four

113
00:07:49.270 --> 00:07:49.950
or five.

114
00:07:49.950 --> 00:07:58.170
But for this method since thes u r l requester coming in as public slash something,

115
00:07:58.170 --> 00:08:01.990
we have to determine what actual file is being requested.

116
00:08:01.990 --> 00:08:09.460
So get the file name being requested in order to figure out what they're asking for.

117
00:08:09.460 --> 00:08:17.950
We need to trim the word public off of the string that we're seeing in the path so trimmed

118
00:08:17.950 --> 00:08:28.670
asset name is going to equal data trimmed path replaced the string public with an empty

119
00:08:28.670 --> 00:08:29.050
string.

120
00:08:29.050 --> 00:08:36.850
Now we want to say that if the trimmed asset name has a length greater zero,

121
00:08:36.850 --> 00:08:38.660
we'll continue.

122
00:08:38.660 --> 00:08:42.650
Otherwise we're gonna call back for four.

123
00:08:42.650 --> 00:08:46.860
Now that we know which asked that they're asking for inside of the public quarter.

124
00:08:46.860 --> 00:08:51.400
We want to read in the assets data,

125
00:08:51.400 --> 00:08:55.400
and we're going to do that the same way that we did above,

126
00:08:55.400 --> 00:08:58.830
except instead of reading in fabric on dot I see Oh,

127
00:08:58.830 --> 00:09:08.080
we're just going to read in trimmed asset name and then expect back the data of whatever

128
00:09:08.080 --> 00:09:09.380
that asset is.

129
00:09:09.380 --> 00:09:21.130
So if there isn't an error and there is data we want to continue otherwise we still want to

130
00:09:21.130 --> 00:09:26.050
call back before four because we couldn't find the asset that they're looking for now,

131
00:09:26.050 --> 00:09:29.930
In order to call back the data of this asset,

132
00:09:29.930 --> 00:09:33.960
we first need to determine what kind of asset it is,

133
00:09:33.960 --> 00:09:38.540
what kind of mime type or what kind of file extension it has.

134
00:09:38.540 --> 00:09:40.280
So that when we call back,

135
00:09:40.280 --> 00:09:41.410
for example,

136
00:09:41.410 --> 00:09:43.010
the Fabrikant data,

137
00:09:43.010 --> 00:09:44.080
as we're doing here,

138
00:09:44.080 --> 00:09:46.550
we can say that this is a type fabric on.

139
00:09:46.550 --> 00:09:47.400
Otherwise,

140
00:09:47.400 --> 00:09:52.160
we don't know whether to tell our server they should be serving this as Jason or serving it

141
00:09:52.160 --> 00:09:54.250
is HTML or serving as something else.

142
00:09:54.250 --> 00:10:01.300
So we are going to look at the file name again and determine what the content type should

143
00:10:01.300 --> 00:10:01.650
be.

144
00:10:01.650 --> 00:10:09.130
We want to determine the content type and default to plain text if we can't figure it out.

145
00:10:09.130 --> 00:10:14.080
So we're going to start off by saying the content type equals playing.

146
00:10:14.080 --> 00:10:23.230
If the trimmed asset name contains the string dot CSS,

147
00:10:23.230 --> 00:10:27.660
then we want to say that the content type equals CSS.

148
00:10:27.660 --> 00:10:34.450
I'm gonna copy this logic again because we are going to use it a few times.

149
00:10:34.450 --> 00:10:41.650
If the asset name contains dot P and G,

150
00:10:41.650 --> 00:10:44.590
that content type is going to be P and G.

151
00:10:44.590 --> 00:10:50.240
If it contains dot jpeg,

152
00:10:50.240 --> 00:10:53.450
the content type is going to be Jay Peak.

153
00:10:53.450 --> 00:11:00.950
If it contains dot i CEO because instead of requesting the i c e o the fabric on at the

154
00:11:00.950 --> 00:11:01.250
base,

155
00:11:01.250 --> 00:11:04.550
you're out there requesting it from the public folder here.

156
00:11:04.550 --> 00:11:07.450
Then we still want to be able to serve it from there,

157
00:11:07.450 --> 00:11:10.160
and the content type is going to equal Fabrikant.

158
00:11:10.160 --> 00:11:15.950
Then we want to call back the data.

159
00:11:15.950 --> 00:11:22.070
So we're going to say call back 200 the data and the content.

160
00:11:22.070 --> 00:11:25.180
Now that we've done this,

161
00:11:25.180 --> 00:11:30.490
we can go and return to our server file and modify it so that it can accept all these

162
00:11:30.490 --> 00:11:33.250
content types that it currently could not.

163
00:11:33.250 --> 00:11:36.800
So we're gonna go to the section.

164
00:11:36.800 --> 00:11:43.360
We're currently only choosing between Jason Html and add support for all these other

165
00:11:43.360 --> 00:11:44.340
content types.

166
00:11:44.340 --> 00:11:46.830
So we'll leave the payload string defined.

167
00:11:46.830 --> 00:11:48.650
If content type is Jason,

168
00:11:48.650 --> 00:11:53.400
that's what we want to do if content type because html that's what we want to do.

169
00:11:53.400 --> 00:11:57.820
But now we're gonna copy this html block down below,

170
00:11:57.820 --> 00:12:02.210
because we want to add on logic for fabric con plain text,

171
00:12:02.210 --> 00:12:02.890
CSS,

172
00:12:02.890 --> 00:12:05.050
PNG and JPEG.

173
00:12:05.050 --> 00:12:19.460
So we're going to say if the content type is Fabrikant,

174
00:12:19.460 --> 00:12:23.140
we want to set the header content.

175
00:12:23.140 --> 00:12:30.250
Type two equal image slash X dash icon.

176
00:12:30.250 --> 00:12:35.250
If the content type is CSS,

177
00:12:35.250 --> 00:12:40.040
we want to set the header content type to text slash CSS.

178
00:12:40.040 --> 00:12:43.250
If it's P and G,

179
00:12:43.250 --> 00:12:48.660
we want to set the header to Image slash p and G.

180
00:12:48.660 --> 00:12:50.560
If it's J.

181
00:12:50.560 --> 00:12:51.080
Peg,

182
00:12:51.080 --> 00:12:57.140
we want to set the header to image slash J P e G Drew Peg.

183
00:12:57.140 --> 00:13:00.950
And if the content type is plain,

184
00:13:00.950 --> 00:13:06.520
then we want to set the content type to text slash claim,

185
00:13:06.520 --> 00:13:08.340
and that would be the default.

186
00:13:08.340 --> 00:13:10.040
But before this works,

187
00:13:10.040 --> 00:13:16.750
we referenced some helpers a moment ago in our handlers get static asset to be specific.

188
00:13:16.750 --> 00:13:17.830
And so now,

189
00:13:17.830 --> 00:13:18.800
within helpers,

190
00:13:18.800 --> 00:13:19.850
we need to write.

191
00:13:19.850 --> 00:13:22.040
He gets static asset function.

192
00:13:22.040 --> 00:13:26.060
So down at the bottom of the file,

193
00:13:26.060 --> 00:13:27.910
we're going to write this new function,

194
00:13:27.910 --> 00:13:32.650
which is going to let us get the contents of a static,

195
00:13:32.650 --> 00:13:33.570
a k a.

196
00:13:33.570 --> 00:13:35.980
Public acid.

197
00:13:35.980 --> 00:13:40.370
It's going to be called helpers dot get static asset.

198
00:13:40.370 --> 00:13:42.400
It's going to be a function that,

199
00:13:42.400 --> 00:13:43.370
as you've seen,

200
00:13:43.370 --> 00:13:48.160
takes in a file name and they call back,

201
00:13:48.160 --> 00:13:50.490
It's gonna Saturday.

202
00:13:50.490 --> 00:13:51.170
Check the file.

203
00:13:51.170 --> 00:13:55.070
Name equals type of file name,

204
00:13:55.070 --> 00:13:58.040
People's String and Fire.

205
00:13:58.040 --> 00:14:04.250
Name length is greater than zero bio name or force.

206
00:14:04.250 --> 00:14:09.050
It's only going to continue if there was a real file name found.

207
00:14:09.050 --> 00:14:10.540
Otherwise,

208
00:14:10.540 --> 00:14:13.280
it's going to call back the air.

209
00:14:13.280 --> 00:14:17.950
Valid final name was not specified.

210
00:14:17.950 --> 00:14:21.050
Get the file name is there.

211
00:14:21.050 --> 00:14:27.580
Then we need to define the public directory folder much in the same way we defined the data

212
00:14:27.580 --> 00:14:30.350
folder and the templates border before that.

213
00:14:30.350 --> 00:14:35.950
So we're going to say that public they're equals path.

214
00:14:35.950 --> 00:14:40.930
Join directory name and join it to slash,

215
00:14:40.930 --> 00:14:41.120
dot,

216
00:14:41.120 --> 00:14:41.320
dot,

217
00:14:41.320 --> 00:14:44.820
slash public slash.

218
00:14:44.820 --> 00:14:53.410
Now we're going to try to read the file in so f s dot reid file the public directory plus

219
00:14:53.410 --> 00:14:54.050
the final name,

220
00:14:54.050 --> 00:14:58.700
and it should give back an air and data.

221
00:14:58.700 --> 00:15:03.350
If there's no air and there is data,

222
00:15:03.350 --> 00:15:06.550
we'll go ahead and call back.

223
00:15:06.550 --> 00:15:09.350
No air and data.

224
00:15:09.350 --> 00:15:11.550
But if we hit an air,

225
00:15:11.550 --> 00:15:13.420
we'll call back.

226
00:15:13.420 --> 00:15:17.750
No file could be found.

227
00:15:17.750 --> 00:15:20.420
Now that that helper exists,

228
00:15:20.420 --> 00:15:23.830
our handlers should be able to read in the aesthetic assets.

229
00:15:23.830 --> 00:15:26.660
That's both the public handler and our Fabrikant handler.

230
00:15:26.660 --> 00:15:29.050
So if we start the at back up,

231
00:15:29.050 --> 00:15:36.480
we should be able to render this new page with the static assets being served,

232
00:15:36.480 --> 00:15:40.210
I'm gonna go back to the browser.

233
00:15:40.210 --> 00:15:42.050
Refresh here.

234
00:15:42.050 --> 00:15:45.350
We haven't seen the CSS change here,

235
00:15:45.350 --> 00:15:47.710
so the CSS is not loading.

236
00:15:47.710 --> 00:15:49.650
And now we just need to figure out why.

237
00:15:49.650 --> 00:15:51.160
Look at the network.

238
00:15:51.160 --> 00:15:52.790
Refresh the page.

239
00:15:52.790 --> 00:15:54.440
See if we have any indication.

240
00:15:54.440 --> 00:15:54.960
Yes,

241
00:15:54.960 --> 00:15:59.750
we are getting a 404 from the app dot CSS public route.

242
00:15:59.750 --> 00:16:01.910
And so now we need to figure out why.

243
00:16:01.910 --> 00:16:03.050
Yes,

244
00:16:03.050 --> 00:16:07.730
this is because within our server file,

245
00:16:07.730 --> 00:16:09.760
we have defined this route.

246
00:16:09.760 --> 00:16:11.850
Public handlers,

247
00:16:11.850 --> 00:16:12.560
not public.

248
00:16:12.560 --> 00:16:16.660
But these routes don't take any kind of wild cards.

249
00:16:16.660 --> 00:16:21.120
This route is on Lee going to match the public path.

250
00:16:21.120 --> 00:16:21.970
Exactly.

251
00:16:21.970 --> 00:16:27.860
So the only way hammers dot public is going to get cold right now is if these assets were

252
00:16:27.860 --> 00:16:30.600
sitting exactly at slash public,

253
00:16:30.600 --> 00:16:34.350
which they're not there sitting at slash public slash their own name.

254
00:16:34.350 --> 00:16:40.700
So we actually need to modify our server logic just a little bit so that public slash

255
00:16:40.700 --> 00:16:41.360
anything,

256
00:16:41.360 --> 00:16:41.910
for example,

257
00:16:41.910 --> 00:16:47.460
public slash star ends up getting around it to the hammers dot public handler.

258
00:16:47.460 --> 00:16:50.790
So when we are choosing a handler,

259
00:16:50.790 --> 00:16:54.380
we just need to add a little bit more logic.

260
00:16:54.380 --> 00:17:00.150
If the request is within the public directory,

261
00:17:00.150 --> 00:17:06.050
use the public handler instead.

262
00:17:06.050 --> 00:17:11.550
So we want to say chosen handler,

263
00:17:11.550 --> 00:17:26.200
defined above equals trimmed path index of public slash greater than negative one.

264
00:17:26.200 --> 00:17:26.980
In other words,

265
00:17:26.980 --> 00:17:33.060
if the path that the requesting includes the string public slash anything,

266
00:17:33.060 --> 00:17:36.950
then we want to switch from whatever chosen handler we just got.

267
00:17:36.950 --> 00:17:40.260
Whether it is the 44 handler or some other handler,

268
00:17:40.260 --> 00:17:48.290
two handlers don't public otherwise default to the chosen handler,

269
00:17:48.290 --> 00:17:49.350
whatever it waas.

270
00:17:49.350 --> 00:17:51.820
So in this case,

271
00:17:51.820 --> 00:17:55.950
this path we created down here is on Lee getting called.

272
00:17:55.950 --> 00:17:59.460
If somebody references slash public and doesn't include anything.

273
00:17:59.460 --> 00:18:05.110
So now we should be able to start our server back up and try that again.

274
00:18:05.110 --> 00:18:09.140
I'm going to refresh and good.

275
00:18:09.140 --> 00:18:13.120
Now we can see that app dot CSS is being returned,

276
00:18:13.120 --> 00:18:15.830
but we still don't see this style is changing,

277
00:18:15.830 --> 00:18:18.680
which means we still have some issue somewhere.

278
00:18:18.680 --> 00:18:22.020
If I open up the app dot CSS that got returned,

279
00:18:22.020 --> 00:18:25.850
we can see that the content type is coming back to us correctly,

280
00:18:25.850 --> 00:18:31.350
but the response is empty and we should see CSS inside of there.

281
00:18:31.350 --> 00:18:38.980
So let's go back to her half and try to figure out why it looks like the issue is that we

282
00:18:38.980 --> 00:18:43.110
are making sure that the payload is always a strain before he read it out.

283
00:18:43.110 --> 00:18:45.910
But on second consideration,

284
00:18:45.910 --> 00:18:50.110
we have to realize that hte email will be a string.

285
00:18:50.110 --> 00:18:57.450
But fabric cons and others will be buffers that have been read in from a file and so they

286
00:18:57.450 --> 00:18:59.090
will fail this validation.

287
00:18:59.090 --> 00:19:04.090
So rather than saying that the payload should be a string for all of these types were just

288
00:19:04.090 --> 00:19:07.660
going to say that the payload should not be undefined.

289
00:19:07.660 --> 00:19:23.980
We start the at back up and try it one more time.

290
00:19:23.980 --> 00:19:25.950
All right.

291
00:19:25.950 --> 00:19:28.600
Looks like we have some CSS appearing.

292
00:19:28.600 --> 00:19:31.060
So things are working well.

293
00:19:31.060 --> 00:19:34.040
But if we look in the console and refresh,

294
00:19:34.040 --> 00:19:39.780
we don't see that log that we put in app dot Js Also,

295
00:19:39.780 --> 00:19:44.480
the network does not show app dot Js as being loaded at all.

296
00:19:44.480 --> 00:19:46.160
So if you view source,

297
00:19:46.160 --> 00:19:53.920
we can still see that the application is referencing public slash ap dot Js So we just have

298
00:19:53.920 --> 00:19:56.330
to figure out what else the issue might be.

299
00:19:56.330 --> 00:20:03.410
It might very well be that were mixed spelling text slash javascript we missed in a in Java

300
00:20:03.410 --> 00:20:03.840
script.

301
00:20:03.840 --> 00:20:06.600
So I'll make that edit and try again.

302
00:20:06.600 --> 00:20:26.430
Now we refreshing this refreshing this and we can see app dot Js is getting loaded in the

303
00:20:26.430 --> 00:20:27.150
console.

304
00:20:27.150 --> 00:20:29.650
We can see Hello console world.

305
00:20:29.650 --> 00:20:32.260
So the CSS is getting loaded.

306
00:20:32.260 --> 00:20:34.500
The JavaScript is getting loaded.

307
00:20:34.500 --> 00:20:37.940
Now let's try to navigate to the images that we placed.

308
00:20:37.940 --> 00:20:45.910
Let's check public slash logo dot p and G and we see this logo.

309
00:20:45.910 --> 00:20:51.200
This is being transmitted to us with the content type image slash p a G.

310
00:20:51.200 --> 00:21:01.050
Now let's navigate to test JPEG and see there we have Dave Chappelle staring at us,

311
00:21:01.050 --> 00:21:06.570
and this JPEG is being transmitted with the content type image slash Jay Peak.

312
00:21:06.570 --> 00:21:09.370
So those images should be working fine.

313
00:21:09.370 --> 00:21:15.620
Now we want to modify the template so that the logo appears in the upper left hand corner.

314
00:21:15.620 --> 00:21:20.540
So within the logo a tag,

315
00:21:20.540 --> 00:21:27.910
I'm gonna add an image tag and the source is going to equal public slash logo because of

316
00:21:27.910 --> 00:21:28.430
the base.

317
00:21:28.430 --> 00:21:29.920
Ural again,

318
00:21:29.920 --> 00:21:32.550
we don't need to reference a backslash there.

319
00:21:32.550 --> 00:21:35.760
Public's last logo dot p and G.

320
00:21:35.760 --> 00:21:46.260
Now we can refresh this page,

321
00:21:46.260 --> 00:21:52.280
and we see the logo in the upper left hand corner.

322
00:21:52.280 --> 00:21:53.160
Now,

323
00:21:53.160 --> 00:21:55.840
one thing you're not seeing is the Fabrikant up here.

324
00:21:55.840 --> 00:22:01.270
But that is because browser's tend to heavily cash the fabric on whether it exists or it

325
00:22:01.270 --> 00:22:01.810
doesn't.

326
00:22:01.810 --> 00:22:06.050
If we navigate to the fabric on that i c e o.

327
00:22:06.050 --> 00:22:14.060
We can see this small black dot here indicating that it actually does exist and we can

328
00:22:14.060 --> 00:22:18.950
inspect it and see the fabric gone is getting transmitted.

329
00:22:18.950 --> 00:22:21.300
The response exists,

330
00:22:21.300 --> 00:22:25.630
and it's coming through with image slash X icon as the content type.

331
00:22:25.630 --> 00:22:28.310
Now we have static assets serving,

332
00:22:28.310 --> 00:22:34.460
working fine and we can move on to the next lecture where we will be creating the basic

333
00:22:34.460 --> 00:22:36.600
scaffolding for the index page.

