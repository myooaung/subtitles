WEBVTT
ï»¿1
00:00:00.000 --> 00:00:05.390
when you're working with no Js,

2
00:00:05.390 --> 00:00:10.430
it's very common to include a library that ends up throwing an error without you knowing

3
00:00:10.430 --> 00:00:14.120
why or how it did it in this lecture,

4
00:00:14.120 --> 00:00:16.930
we're going to create an example library,

5
00:00:16.930 --> 00:00:23.130
require it into our index dot Js file and then used the D bugger to help us diagnose that

6
00:00:23.130 --> 00:00:25.150
that library is indeed the issue.

7
00:00:25.150 --> 00:00:31.580
So let's go ahead and create library that does nothing except throw an error when it's in

8
00:00:31.580 --> 00:00:32.210
its function.

9
00:00:32.210 --> 00:00:32.750
It's called,

10
00:00:32.750 --> 00:00:45.750
So I'm gonna call touch lib slash I'm gonna call this example debugging problem dot Js.

11
00:00:45.750 --> 00:00:47.720
Now let's go to that library.

12
00:00:47.720 --> 00:00:49.080
We're gonna create it.

13
00:00:49.080 --> 00:01:01.180
I'm going to say that this is a library that demonstrates something throwing when it's in,

14
00:01:01.180 --> 00:01:03.540
it is called.

15
00:01:03.540 --> 00:01:11.970
We're gonna set this up like any other module is gonna have a container for the module.

16
00:01:11.970 --> 00:01:22.100
Our example equals an object at the bottom is going to export the module module exports

17
00:01:22.100 --> 00:01:25.520
equals example and in the middle,

18
00:01:25.520 --> 00:01:27.870
we're going to create at in function,

19
00:01:27.870 --> 00:01:30.350
so example,

20
00:01:30.350 --> 00:01:34.850
in it equals function.

21
00:01:34.850 --> 00:01:38.450
And inside this,

22
00:01:38.450 --> 00:01:48.210
this is an air created intentionally bar is not defined by that,

23
00:01:48.210 --> 00:01:48.850
I mean,

24
00:01:48.850 --> 00:01:51.950
we're going to say that bar food equals bar.

25
00:01:51.950 --> 00:01:55.470
This is going to throw an error specifically a reference air,

26
00:01:55.470 --> 00:02:00.030
because food cannot be defined to bar when bar has not been to find itself.

27
00:02:00.030 --> 00:02:01.970
So now that this library exists,

28
00:02:01.970 --> 00:02:05.030
we can go ahead and included into our index file,

29
00:02:05.030 --> 00:02:09.980
and we should see that exception is thrown when this is called.

30
00:02:09.980 --> 00:02:14.570
But I don't want to crowd up our actual index file with a bunch of debugging later,

31
00:02:14.570 --> 00:02:17.570
and so I'm going to create a new one.

32
00:02:17.570 --> 00:02:22.580
But I'm actually just going to copy or existing file and name it something else.

33
00:02:22.580 --> 00:02:32.990
So I'm going to copy index dot Js to index dash debug dot Js and then we'll start the app

34
00:02:32.990 --> 00:02:36.230
with index dash debug instead of index.

35
00:02:36.230 --> 00:02:38.460
Now we have index dash debug,

36
00:02:38.460 --> 00:02:40.060
and it's an exact copy.

37
00:02:40.060 --> 00:02:45.860
Let's go ahead and start the app up with node index dash debug.

38
00:02:45.860 --> 00:02:46.850
See what happens.

39
00:02:46.850 --> 00:02:54.290
Nothing so far because we have it include this library Now that's though this library You

40
00:02:54.290 --> 00:03:04.400
are example debugging problem equals example debugging problem.

41
00:03:04.400 --> 00:03:07.750
It was started up again.

42
00:03:07.750 --> 00:03:13.930
We still don't have any issue because we're not calling the in it now that's actually call

43
00:03:13.930 --> 00:03:22.740
the in it within that library told the in its crypt that will throw.

44
00:03:22.740 --> 00:03:30.110
So we're gonna call example debugging problem that in it,

45
00:03:30.110 --> 00:03:33.350
and set it up again.

46
00:03:33.350 --> 00:03:34.740
And boom,

47
00:03:34.740 --> 00:03:36.270
we have this issue.

48
00:03:36.270 --> 00:03:38.130
Bar is not defined,

49
00:03:38.130 --> 00:03:39.580
and it's a reference error.

50
00:03:39.580 --> 00:03:44.330
But let's say that this script is a little bit more complicated.

51
00:03:44.330 --> 00:03:50.890
Let's just add some logic here so that we can make this script a bit more robust.

52
00:03:50.890 --> 00:03:57.260
Let's say that here we create food and assign it toe one that we increment food.

53
00:03:57.260 --> 00:04:01.680
So I'm gonna call food plus plus,

54
00:04:01.680 --> 00:04:04.570
and then we square it.

55
00:04:04.570 --> 00:04:09.260
Fu equals food,

56
00:04:09.260 --> 00:04:10.090
times food,

57
00:04:10.090 --> 00:04:13.850
and then we convert food to a string.

58
00:04:13.850 --> 00:04:19.470
So we're going to say food equals food to string,

59
00:04:19.470 --> 00:04:24.120
and then we call the Indus Script That will throw so in our example,

60
00:04:24.120 --> 00:04:27.080
this error that's thrown is not very cryptic.

61
00:04:27.080 --> 00:04:28.720
It tells us exactly what's going on,

62
00:04:28.720 --> 00:04:30.290
but in no Js,

63
00:04:30.290 --> 00:04:33.000
you'll might not be this lucky all the time.

64
00:04:33.000 --> 00:04:38.130
You might have a reference error or some other type of air that's deep within some library

65
00:04:38.130 --> 00:04:38.130
,

66
00:04:38.130 --> 00:04:39.360
and you don't know why,

67
00:04:39.360 --> 00:04:44.550
and you're not even really sure which part of the code is throwing a rich library is

68
00:04:44.550 --> 00:04:45.000
throwing.

69
00:04:45.000 --> 00:04:51.300
And so you look back at your in dash dash debug and you're not sure which part of this

70
00:04:51.300 --> 00:04:52.710
logic is throwing?

71
00:04:52.710 --> 00:04:58.370
You just know that when you start up the application like so you end up with a throw.

72
00:04:58.370 --> 00:05:03.750
So let's go through how you would use the D bugger to step through this issue.

73
00:05:03.750 --> 00:05:04.580
Now,

74
00:05:04.580 --> 00:05:09.120
there's a different way to start up a node application if you want to use the debunker and

75
00:05:09.120 --> 00:05:14.670
that is with node inspect and then your entry file.

76
00:05:14.670 --> 00:05:15.570
So Index,

77
00:05:15.570 --> 00:05:16.570
Dash d buck.

78
00:05:16.570 --> 00:05:19.980
Now we're using the Inspector,

79
00:05:19.980 --> 00:05:22.230
which automatically attach is three d bugger.

80
00:05:22.230 --> 00:05:23.600
But as you can see,

81
00:05:23.600 --> 00:05:25.450
there isn't much going on here.

82
00:05:25.450 --> 00:05:29.040
And there really isn't any debugging that's happening.

83
00:05:29.040 --> 00:05:30.620
And so we want to kill this.

84
00:05:30.620 --> 00:05:31.880
No,

85
00:05:31.880 --> 00:05:33.710
we want to add some debugging,

86
00:05:33.710 --> 00:05:38.840
and so I'm gonna add them all over the place so that we can step through this file later on

87
00:05:38.840 --> 00:05:42.390
toe Addy debugging break point.

88
00:05:42.390 --> 00:05:44.080
You just call d bugger!

89
00:05:44.080 --> 00:05:53.550
Time to call it there and there I'm gonna call it above and below basically every function

90
00:05:53.550 --> 00:05:53.550
.

91
00:05:53.550 --> 00:06:01.230
And now I'm going to add some logging so that we can tell where we are in the file when

92
00:06:01.230 --> 00:06:06.180
severed up in a worker's dot in it and cli dot in it get called there already logging out

93
00:06:06.180 --> 00:06:06.940
what they're doing.

94
00:06:06.940 --> 00:06:10.770
And so I'm just need to add luck here.

95
00:06:10.770 --> 00:06:19.440
Console dot log Just assigned one food council log.

96
00:06:19.440 --> 00:06:23.150
Just increment id food.

97
00:06:23.150 --> 00:06:25.950
Just squared food.

98
00:06:25.950 --> 00:06:30.540
Just converted food to string.

99
00:06:30.540 --> 00:06:33.810
Just called the library.

100
00:06:33.810 --> 00:06:36.970
Okay,

101
00:06:36.970 --> 00:06:37.690
now that started.

102
00:06:37.690 --> 00:06:38.750
Do bugger back up.

103
00:06:38.750 --> 00:06:48.850
Let me just get rid of this extra l There start it up,

104
00:06:48.850 --> 00:06:52.360
as you can see is starting up much in the same way.

105
00:06:52.360 --> 00:06:56.050
But now that we have debugging points worked out here,

106
00:06:56.050 --> 00:07:00.560
we can use some special debug commands to walk through this file.

107
00:07:00.560 --> 00:07:07.900
The D bugger lets you use Kant to continue execution next to step to the next break point

108
00:07:07.900 --> 00:07:09.360
in to step in,

109
00:07:09.360 --> 00:07:13.900
out to step out and pause deposit for this example,

110
00:07:13.900 --> 00:07:14.840
I'm going to use Kant.

111
00:07:14.840 --> 00:07:19.150
So we have continued until the next debugging point,

112
00:07:19.150 --> 00:07:22.930
which in this case is the first debugging point that we hit.

113
00:07:22.930 --> 00:07:25.550
So it has stopped at 18.

114
00:07:25.550 --> 00:07:27.440
If we do Kant again now,

115
00:07:27.440 --> 00:07:29.960
we're at line 20 and we can continue doing it.

116
00:07:29.960 --> 00:07:31.450
Now we're at line 23.

117
00:07:31.450 --> 00:07:33.590
Now we're at line 25.

118
00:07:33.590 --> 00:07:35.030
At this point,

119
00:07:35.030 --> 00:07:36.940
the first logs are starting to come through.

120
00:07:36.940 --> 00:07:38.950
You stepping down where?

121
00:07:38.950 --> 00:07:41.220
All the way down at line 36.

122
00:07:41.220 --> 00:07:43.250
Now I'm going to keep on stepping,

123
00:07:43.250 --> 00:07:49.270
and I stepped all the way until the air was thrown.

124
00:07:49.270 --> 00:07:52.190
So if I look back through my steps,

125
00:07:52.190 --> 00:07:55.150
I can see why made it past 49.

126
00:07:55.150 --> 00:07:59.850
I made it past 54 but I never reached the bugger on 59.

127
00:07:59.850 --> 00:08:00.860
Also,

128
00:08:00.860 --> 00:08:06.300
I got the consul logs to come out that told me that a converted food to a string.

129
00:08:06.300 --> 00:08:11.380
But I never got the console logs to come out that told me that it called the library.

130
00:08:11.380 --> 00:08:15.900
And so remember that this would be something you'd be doing if you couldn't figure out

131
00:08:15.900 --> 00:08:18.170
where these errors were being thrown from.

132
00:08:18.170 --> 00:08:24.480
And so using debugging steps and stepping in and out in this way could let you identify

133
00:08:24.480 --> 00:08:26.100
exactly which part of the code is throwing.

134
00:08:26.100 --> 00:08:31.460
But let's use another command to dive a little bit deeper.

135
00:08:31.460 --> 00:08:36.520
Let's imagine that we hadn't done this console logging or that really the only thing that

136
00:08:36.520 --> 00:08:40.310
we could keep track of was the value of food as we re debugging.

137
00:08:40.310 --> 00:08:41.940
So let's start this up again.

138
00:08:41.940 --> 00:08:48.150
I'm going to start stepping through as I did before.

139
00:08:48.150 --> 00:08:50.550
But at this point,

140
00:08:50.550 --> 00:08:57.070
let's say that the only thing that can let me know where the code is at execution wise is

141
00:08:57.070 --> 00:08:59.150
figuring out what the value of Fu is.

142
00:08:59.150 --> 00:09:02.280
So I'm going to Rather than writing Kant,

143
00:09:02.280 --> 00:09:09.890
I'm gonna write Rappel Now I'm inside of a rebel inside of the D bugger And all of the

144
00:09:09.890 --> 00:09:16.670
values of the variables inside of my file are made available to me in this rebel so I can

145
00:09:16.670 --> 00:09:24.200
simply log out food and it will tell me that it is currently undefined.

146
00:09:24.200 --> 00:09:27.470
So let's step out of this rebel.

147
00:09:27.470 --> 00:09:31.250
I'm going to control sea and continue on with the execution.

148
00:09:31.250 --> 00:09:35.150
I've gone a few more steps and now it can step back into the rebel,

149
00:09:35.150 --> 00:09:38.040
try to log out food again.

150
00:09:38.040 --> 00:09:38.590
You know,

151
00:09:38.590 --> 00:09:42.570
tell me Fu is currently set to to so I can No,

152
00:09:42.570 --> 00:09:44.950
No matter what has been logged out,

153
00:09:44.950 --> 00:09:47.620
which might have not come out in a timely manner,

154
00:09:47.620 --> 00:09:54.350
I can know that as faras the code execution goes what the system has done so far is

155
00:09:54.350 --> 00:09:55.420
increment ID food,

156
00:09:55.420 --> 00:09:57.270
but it hasn't done the next step.

157
00:09:57.270 --> 00:10:00.380
So I'm to step out again,

158
00:10:00.380 --> 00:10:02.930
continue on with the execution,

159
00:10:02.930 --> 00:10:06.550
step back into the debunker call food,

160
00:10:06.550 --> 00:10:09.910
and now it's set to a string called four.

161
00:10:09.910 --> 00:10:12.370
I'll know that you must have increment it,

162
00:10:12.370 --> 00:10:14.650
squared it and then converted it to a strength.

163
00:10:14.650 --> 00:10:16.230
How is this useful?

164
00:10:16.230 --> 00:10:16.510
Well,

165
00:10:16.510 --> 00:10:23.160
it's useful in many cases because often the issues that you're debugging and no Js our race

166
00:10:23.160 --> 00:10:31.000
conditions and with race conditions you can't just look at where the logic has gotten two

167
00:10:31.000 --> 00:10:31.820
in the file,

168
00:10:31.820 --> 00:10:38.550
like how far down in a file the process has gone because you have multiple asynchronous

169
00:10:38.550 --> 00:10:39.700
calls that you're making,

170
00:10:39.700 --> 00:10:45.700
and you really don't know what they've done so far in their own libraries,

171
00:10:45.700 --> 00:10:46.250
etcetera.

172
00:10:46.250 --> 00:10:53.190
And so using the rebel within the D bugger can let you step into the variables that you

173
00:10:53.190 --> 00:10:57.670
want to analyze and figure out exactly their state at that moment,

174
00:10:57.670 --> 00:11:01.430
regardless of where the execution is in this file,

175
00:11:01.430 --> 00:11:02.600
because,

176
00:11:02.600 --> 00:11:03.110
remember,

177
00:11:03.110 --> 00:11:07.310
very rarely will you be using purely synchronous law.

178
00:11:07.310 --> 00:11:08.370
Jake inside of Notre.

179
00:11:08.370 --> 00:11:08.820
Yes,

180
00:11:08.820 --> 00:11:12.810
you'll very often have a secret is calls all over the place.

181
00:11:12.810 --> 00:11:19.680
So that is how you use the bugger to walk through your code and how you step into a rebel

182
00:11:19.680 --> 00:11:24.710
within VD bugger in order to analyze the value of the variables set at any moment.

183
00:11:24.710 --> 00:11:26.750
So with that,

184
00:11:26.750 --> 00:11:28.720
we can move on to the next lecture.

