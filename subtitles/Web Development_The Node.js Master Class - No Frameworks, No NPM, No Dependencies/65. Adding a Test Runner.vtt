WEBVTT
ï»¿1
00:00:00.000 --> 00:00:05.150
in this lecture,

2
00:00:05.150 --> 00:00:09.890
we're going to be adding a test runner so that in the following lectures we can add both

3
00:00:09.890 --> 00:00:15.970
unit tests and integration tests to our app In order to add a test runner.

4
00:00:15.970 --> 00:00:19.780
We're going to invoke nodes built in Assertion Library,

5
00:00:19.780 --> 00:00:24.260
but we're going to have to write the logic for invoking the tests and running through the

6
00:00:24.260 --> 00:00:25.350
test ourselves.

7
00:00:25.350 --> 00:00:26.610
Before we do that,

8
00:00:26.610 --> 00:00:30.290
it will be worth creating a very simple function that we can test.

9
00:00:30.290 --> 00:00:32.380
So within the helpers library,

10
00:00:32.380 --> 00:00:35.970
I'm just to create a new function called Get a Number.

11
00:00:35.970 --> 00:00:50.720
So this is going to be a sample for testing that simply returns a number so helpers don't

12
00:00:50.720 --> 00:00:52.560
get a number.

13
00:00:52.560 --> 00:00:58.590
Going to be a function and I was going to do is return the number one.

14
00:00:58.590 --> 00:01:04.940
Now we can create a test runner and some sample unit tests that assert that get a number

15
00:01:04.940 --> 00:01:06.820
should return a number,

16
00:01:06.820 --> 00:01:08.360
and it should return the number one.

17
00:01:08.360 --> 00:01:12.150
Let's create a directory in our route called Test.

18
00:01:12.150 --> 00:01:16.120
Now,

19
00:01:16.120 --> 00:01:16.850
with in test,

20
00:01:16.850 --> 00:01:22.590
we're going to create a single file called test slash index dot Js.

21
00:01:22.590 --> 00:01:26.190
Since it's the index file within the test directory to invoke it.

22
00:01:26.190 --> 00:01:29.220
All we have to call is node test,

23
00:01:29.220 --> 00:01:31.200
but we don't need to do that quite yet.

24
00:01:31.200 --> 00:01:36.670
Let's go inside of this index dot Js and start setting up this test runner.

25
00:01:36.670 --> 00:01:44.380
We're going to say at the top that this is the test runner and it is going to have a few

26
00:01:44.380 --> 00:01:45.180
dependencies.

27
00:01:45.180 --> 00:01:52.070
We know that we're gonna need the helpers file because that includes the function.

28
00:01:52.070 --> 00:01:56.600
Get a number that we're going to need a test so helpers equals require.

29
00:01:56.600 --> 00:01:59.830
And to get there,

30
00:01:59.830 --> 00:02:04.310
we need to go dot slash that slash live helpers.

31
00:02:04.310 --> 00:02:09.680
That is because we need to back out of this test directory and then into the live directory

32
00:02:09.680 --> 00:02:10.650
and then into helpers.

33
00:02:10.650 --> 00:02:17.060
The next dependency that we need is the Assertion Library that I mentioned so far.

34
00:02:17.060 --> 00:02:21.850
Assert is going to eagle require a search.

35
00:02:21.850 --> 00:02:24.520
And as you'll see this assertion,

36
00:02:24.520 --> 00:02:30.520
library allows us to write very simple syntax that asserts that one thing should equal

37
00:02:30.520 --> 00:02:31.430
something else.

38
00:02:31.430 --> 00:02:36.810
And if it doesn't equal that it will create a assertion error.

39
00:02:36.810 --> 00:02:46.700
Now we need to create the application logic for the test runner and then a container for

40
00:02:46.700 --> 00:02:47.460
the test.

41
00:02:47.460 --> 00:02:51.350
So the logic holder is just going to be underscore app,

42
00:02:51.350 --> 00:02:53.550
and that's an object.

43
00:02:53.550 --> 00:02:55.780
The container for the test,

44
00:02:55.780 --> 00:02:56.380
however,

45
00:02:56.380 --> 00:03:01.760
is going to be asked dot tests and then within here we could have asthma knee sub keys,

46
00:03:01.760 --> 00:03:05.880
as we want for now that sticks create one sub key called Unit and will place all of our

47
00:03:05.880 --> 00:03:08.830
unit tests as sub keys on this unit.

48
00:03:08.830 --> 00:03:09.350
Object.

49
00:03:09.350 --> 00:03:10.610
Now,

50
00:03:10.610 --> 00:03:13.350
even though we haven't read a test runner,

51
00:03:13.350 --> 00:03:18.310
let's go ahead and write a few tests first so that we have something that will need to be

52
00:03:18.310 --> 00:03:18.650
Ram.

53
00:03:18.650 --> 00:03:28.090
Let's assert that the get a number function is returning number.

54
00:03:28.090 --> 00:03:35.410
The way that we're going to structure these unit tests is creating them as keys on this

55
00:03:35.410 --> 00:03:38.920
unit object with a name that is human,

56
00:03:38.920 --> 00:03:39.350
readable,

57
00:03:39.350 --> 00:03:43.130
and then though each be a function that needs to be invoked.

58
00:03:43.130 --> 00:03:45.650
So we are going to say app,

59
00:03:45.650 --> 00:03:55.970
Tess unit and then we're going to name this test that helpers to get a number should return

60
00:03:55.970 --> 00:03:55.970
.

61
00:03:55.970 --> 00:04:00.350
One is going to be a function that takes a call back,

62
00:04:00.350 --> 00:04:02.610
and we're gonna call this callback done.

63
00:04:02.610 --> 00:04:07.370
Now that is just a convention that many tests runners have used in the past and it tends to

64
00:04:07.370 --> 00:04:11.890
be a easy way to conceptualize what's going on there.

65
00:04:11.890 --> 00:04:13.760
When the test is done running,

66
00:04:13.760 --> 00:04:15.030
you need to call done.

67
00:04:15.030 --> 00:04:21.710
So we're going to say that this value of helpers get a number,

68
00:04:21.710 --> 00:04:23.780
should equal one for that.

69
00:04:23.780 --> 00:04:25.210
We're gonna call the Assertion Library.

70
00:04:25.210 --> 00:04:25.990
So we're going to say,

71
00:04:25.990 --> 00:04:26.780
Assert,

72
00:04:26.780 --> 00:04:31.270
we want to assert That's two things are equal.

73
00:04:31.270 --> 00:04:32.990
So assert dot equal.

74
00:04:32.990 --> 00:04:35.350
We want to assert that vow.

75
00:04:35.350 --> 00:04:40.050
This returning value from get a number is equal to one.

76
00:04:40.050 --> 00:04:43.400
So we put Vow and one separated by a comma.

77
00:04:43.400 --> 00:04:46.080
That's all we need to assert,

78
00:04:46.080 --> 00:04:49.680
and we're done asserting it So now we can call Done,

79
00:04:49.680 --> 00:04:51.590
which in fact,

80
00:04:51.590 --> 00:04:53.120
is just a call back as any other.

81
00:04:53.120 --> 00:04:54.940
But it's calling done to make this clearer.

82
00:04:54.940 --> 00:04:56.350
Now let's copy this.

83
00:04:56.350 --> 00:04:59.710
Actually,

84
00:04:59.710 --> 00:05:02.120
let's make this comment a little clear down here.

85
00:05:02.120 --> 00:05:03.560
We should say that Get a number.

86
00:05:03.560 --> 00:05:04.950
Function is returning.

87
00:05:04.950 --> 00:05:10.950
One been up here will write a different one that it's returning a number to return a number

88
00:05:10.950 --> 00:05:10.950
,

89
00:05:10.950 --> 00:05:14.510
and we'll get the value as we did before.

90
00:05:14.510 --> 00:05:23.820
But now we're going to assert that type of thou is equal to number.

91
00:05:23.820 --> 00:05:26.570
So first we're asserting that it is a type of number,

92
00:05:26.570 --> 00:05:30.130
and now we're asserting that its one both of these tests should pass.

93
00:05:30.130 --> 00:05:32.680
Now let's assert something that isn't true.

94
00:05:32.680 --> 00:05:36.190
That's assert that get a number function is returning the number two.

95
00:05:36.190 --> 00:05:39.540
We know that these two things are contradictory,

96
00:05:39.540 --> 00:05:42.090
so one of them was obviously going to fail or both.

97
00:05:42.090 --> 00:05:49.150
Let's assert that value equals two and then call done now at the very bottom of our file.

98
00:05:49.150 --> 00:05:52.660
Let's say that rather than exporting this module,

99
00:05:52.660 --> 00:05:55.080
we want to run the test.

100
00:05:55.080 --> 00:06:01.140
So we're going to call underscore app dot run tests now.

101
00:06:01.140 --> 00:06:01.400
App.

102
00:06:01.400 --> 00:06:02.990
That run test doesn't exist.

103
00:06:02.990 --> 00:06:09.420
So now let's write this function that is going to figure out a way to call all of these

104
00:06:09.420 --> 00:06:14.900
tests and give us an outcome or report on the outcome.

105
00:06:14.900 --> 00:06:20.380
Let's call underscored Ron tests.

106
00:06:20.380 --> 00:06:22.050
He goes a function.

107
00:06:22.050 --> 00:06:30.660
We're gonna have a comment here that this is to run all the tests collecting the heirs and

108
00:06:30.660 --> 00:06:32.690
successes from those tests.

109
00:06:32.690 --> 00:06:40.410
The goal of this function is to run all of the tests and then be able to tell us at the end

110
00:06:40.410 --> 00:06:44.910
three of these fail two of them succeeded and print out a report.

111
00:06:44.910 --> 00:06:52.050
So first that's creating Empty Array to hold all the errors that might occur.

112
00:06:52.050 --> 00:06:58.430
And now let's create zero counter,

113
00:06:58.430 --> 00:07:01.600
and that is to count the successes that have occurred.

114
00:07:01.600 --> 00:07:04.470
We need to know when to stop running the tests.

115
00:07:04.470 --> 00:07:07.250
And so we're going to say that the limit is,

116
00:07:07.250 --> 00:07:08.150
uh,

117
00:07:08.150 --> 00:07:10.980
count tests.

118
00:07:10.980 --> 00:07:14.220
Now that isn't a function that exists yet,

119
00:07:14.220 --> 00:07:15.950
and so we'll need to write that next.

120
00:07:15.950 --> 00:07:17.950
But let's continue on for this for now.

121
00:07:17.950 --> 00:07:21.870
This counter of how many tests we've done so far is,

122
00:07:21.870 --> 00:07:22.200
of course,

123
00:07:22.200 --> 00:07:22.950
going to be zero.

124
00:07:22.950 --> 00:07:28.690
And now we're going to cycle through the tests in AP tests.

125
00:07:28.690 --> 00:07:38.710
So let's call the four loop for four key in at Tess we to cycle through all the sub keys

126
00:07:38.710 --> 00:07:41.630
and then all the tests within those sub keys.

127
00:07:41.630 --> 00:07:42.180
Right now,

128
00:07:42.180 --> 00:07:44.010
there's only one sub key That's unit.

129
00:07:44.010 --> 00:07:45.080
But in the future,

130
00:07:45.080 --> 00:07:45.870
there could be many.

131
00:07:45.870 --> 00:07:52.900
We want to say that if AP tests has owned property key will continue looping.

132
00:07:52.900 --> 00:07:59.070
We want to say that far sub tests equals yeah,

133
00:07:59.070 --> 00:08:02.100
tests at the current key.

134
00:08:02.100 --> 00:08:04.040
Now that we have those some tests,

135
00:08:04.040 --> 00:08:04.980
we can look through them.

136
00:08:04.980 --> 00:08:13.080
So for of our test name in sub tests.

137
00:08:13.080 --> 00:08:15.340
Let's loop through.

138
00:08:15.340 --> 00:08:23.350
So if sub tests has owned property key test name,

139
00:08:23.350 --> 00:08:25.680
we can continue.

140
00:08:25.680 --> 00:08:28.960
And within here we're actually going to write a closure.

141
00:08:28.960 --> 00:08:37.140
So we're going to say that this is a self executing function that called itself a the end.

142
00:08:37.140 --> 00:08:42.970
And the purpose of this is just to encapsulate all of these tests specific variables that

143
00:08:42.970 --> 00:08:48.390
were about to define without these nested loops overriding each other's variables.

144
00:08:48.390 --> 00:08:51.690
So once we reach actually testing each test,

145
00:08:51.690 --> 00:08:54.060
we are going to wrap it in a closure.

146
00:08:54.060 --> 00:09:03.950
Were going to say that bar temporary test name equals test name and then var test value

147
00:09:03.950 --> 00:09:07.760
equals sub tests.

148
00:09:07.760 --> 00:09:10.850
Test name.

149
00:09:10.850 --> 00:09:12.320
So at this point,

150
00:09:12.320 --> 00:09:16.350
test value equals the value of these functions,

151
00:09:16.350 --> 00:09:22.830
and test name equals the name that we gave to the test.

152
00:09:22.830 --> 00:09:25.350
Now we need to call the test,

153
00:09:25.350 --> 00:09:31.130
and for that we're going to wrap it in a try catch because thes assertion,

154
00:09:31.130 --> 00:09:31.490
errors,

155
00:09:31.490 --> 00:09:32.340
if they occur,

156
00:09:32.340 --> 00:09:33.450
will likely throw.

157
00:09:33.450 --> 00:09:37.530
So we need to catch those throws when you want to say,

158
00:09:37.530 --> 00:09:38.890
if it throws.

159
00:09:38.890 --> 00:09:40.450
Then it failed,

160
00:09:40.450 --> 00:09:47.600
so captured the air thrown and log it in red,

161
00:09:47.600 --> 00:09:49.850
and we'll do that in a second.

162
00:09:49.850 --> 00:09:51.860
But within the try,

163
00:09:51.860 --> 00:09:54.280
we want to call test value,

164
00:09:54.280 --> 00:09:56.520
which remember,

165
00:09:56.520 --> 00:10:00.250
contains this function now because we defined it there.

166
00:10:00.250 --> 00:10:05.650
So we're going to call the function test value and we're going to pass it this call back,

167
00:10:05.650 --> 00:10:08.600
which will get invoked with done.

168
00:10:08.600 --> 00:10:13.580
And so we want to say if it calls back without throwing,

169
00:10:13.580 --> 00:10:20.880
then it succeeded because there's no way would have made it to done if it would have had an

170
00:10:20.880 --> 00:10:21.850
assertion fail.

171
00:10:21.850 --> 00:10:24.440
So if it calls back without throwing,

172
00:10:24.440 --> 00:10:25.450
then it succeeded.

173
00:10:25.450 --> 00:10:28.610
So log it in green.

174
00:10:28.610 --> 00:10:30.750
So now we have two different outcomes.

175
00:10:30.750 --> 00:10:34.610
We have an assertion failing or an assertion passing.

176
00:10:34.610 --> 00:10:37.590
Let's fill out what should happen if the assertion passes.

177
00:10:37.590 --> 00:10:38.080
First,

178
00:10:38.080 --> 00:10:46.560
let's go back to our workers file and copy this console log that we did in yellow because

179
00:10:46.560 --> 00:10:50.050
we're gonna need to color this success in green.

180
00:10:50.050 --> 00:10:53.650
So we're going to log out the name of the test,

181
00:10:53.650 --> 00:10:57.490
which would be a value such as this,

182
00:10:57.490 --> 00:10:59.300
and we're going to log it in green.

183
00:10:59.300 --> 00:11:02.860
So for this we want to change 33 to 32.

184
00:11:02.860 --> 00:11:06.260
Now we've logged out that it passed.

185
00:11:06.260 --> 00:11:08.590
We need to count its success.

186
00:11:08.590 --> 00:11:09.960
So we're gonna increment the counter.

187
00:11:09.960 --> 00:11:14.060
We're going to increment the success counter.

188
00:11:14.060 --> 00:11:16.460
So successes plus plus,

189
00:11:16.460 --> 00:11:22.400
then we're going to say if the counter is equal to the limit,

190
00:11:22.400 --> 00:11:23.560
we're done.

191
00:11:23.560 --> 00:11:28.750
So we need to call app dot produce test report,

192
00:11:28.750 --> 00:11:34.710
and we're going to send all this data we've been collecting to the producer of this chest

193
00:11:34.710 --> 00:11:35.160
report.

194
00:11:35.160 --> 00:11:36.750
We're going to send it the limit.

195
00:11:36.750 --> 00:11:39.680
We're gonna send it the number of successes,

196
00:11:39.680 --> 00:11:46.680
and we're going to send it the array of errors now obviously produced test report is

197
00:11:46.680 --> 00:11:48.320
another function that doesn't exist yet.

198
00:11:48.320 --> 00:11:49.230
And so,

199
00:11:49.230 --> 00:11:50.300
just like count tests,

200
00:11:50.300 --> 00:11:52.280
we're going to have to write that after this one.

201
00:11:52.280 --> 00:11:56.340
Now that's handle what should happen if an assertion error fails.

202
00:11:56.340 --> 00:12:02.960
So let's say we need to push this error onto this errors array,

203
00:12:02.960 --> 00:12:08.990
so we want to call errors dot push and the thing that we're going to be pushing onto it is

204
00:12:08.990 --> 00:12:14.050
actually an object and that objects going to have two keys and name,

205
00:12:14.050 --> 00:12:18.190
which is the test name and in error,

206
00:12:18.190 --> 00:12:20.460
which is the value of E,

207
00:12:20.460 --> 00:12:24.960
which is the air that we caught now we want to do something similar to what we did above.

208
00:12:24.960 --> 00:12:28.880
We want to log out the test name,

209
00:12:28.880 --> 00:12:30.580
but we want to do it in red.

210
00:12:30.580 --> 00:12:33.150
So we're gonna change 32.

211
00:12:33.150 --> 00:12:33.750
31

212
00:12:33.750 --> 00:12:35.150
We're gonna increment the counter.

213
00:12:35.150 --> 00:12:39.810
We're not going to increment the successes because this wasn't a success.

214
00:12:39.810 --> 00:12:42.910
And then we're going to have the same F clause.

215
00:12:42.910 --> 00:12:46.240
If the counter now that is incremental equals the limit,

216
00:12:46.240 --> 00:12:49.500
go ahead and produce the test report with the value of limits,

217
00:12:49.500 --> 00:12:51.160
successes and the errors array.

218
00:12:51.160 --> 00:12:52.010
Now,

219
00:12:52.010 --> 00:12:52.730
obviously,

220
00:12:52.730 --> 00:12:56.200
we need to write these helper functions or none of this is going to work.

221
00:12:56.200 --> 00:12:57.740
So let's do the easy one first.

222
00:12:57.740 --> 00:12:58.400
That's right.

223
00:12:58.400 --> 00:13:00.150
Be count tests function.

224
00:13:00.150 --> 00:13:02.200
This is going to be to count.

225
00:13:02.200 --> 00:13:02.820
Oh,

226
00:13:02.820 --> 00:13:04.710
the Tess.

227
00:13:04.710 --> 00:13:08.260
So we're gonna call it at dot count tests,

228
00:13:08.260 --> 00:13:13.460
and that is a function it doesn't take anything in.

229
00:13:13.460 --> 00:13:18.750
And it's just going to need to started counter.

230
00:13:18.750 --> 00:13:26.500
And then look through all of the tests that might be on this unit object or any other sub

231
00:13:26.500 --> 00:13:30.480
key and count them up so that we know how many total test there are.

232
00:13:30.480 --> 00:13:35.800
So for Barkey in act Tess,

233
00:13:35.800 --> 00:13:44.450
we want to check that Israel so If Tess has owned property key,

234
00:13:44.450 --> 00:13:46.310
it looks like I just have a little type of here.

235
00:13:46.310 --> 00:13:47.650
So it's not hash on property.

236
00:13:47.650 --> 00:13:49.600
It's hazard property from the update.

237
00:13:49.600 --> 00:13:52.390
These If AP Test has own property key,

238
00:13:52.390 --> 00:13:54.980
then we'll continue again.

239
00:13:54.980 --> 00:14:01.770
We're saying that sub tests equals Tess Key,

240
00:14:01.770 --> 00:14:09.150
and then we're going to look to the sub test once again for far test name in sub tests.

241
00:14:09.150 --> 00:14:16.350
If sub tests has own property test name,

242
00:14:16.350 --> 00:14:19.250
then we'll increment the counter.

243
00:14:19.250 --> 00:14:21.580
Lastly,

244
00:14:21.580 --> 00:14:22.900
when all these loops air done,

245
00:14:22.900 --> 00:14:24.790
we want to return the captor.

246
00:14:24.790 --> 00:14:30.050
The last thing we have to do is write the function that will produce the test report.

247
00:14:30.050 --> 00:14:32.530
After this runner completes,

248
00:14:32.530 --> 00:14:37.580
we're going to say that that is the function to produce a test outcome report,

249
00:14:37.580 --> 00:14:40.560
and that is at produced test report.

250
00:14:40.560 --> 00:14:41.550
And as we saw,

251
00:14:41.550 --> 00:14:45.050
it is a function that takes in limit successes,

252
00:14:45.050 --> 00:14:49.680
which is a counter and an array of errors.

253
00:14:49.680 --> 00:14:53.190
First thing is going to want to do is just create a header,

254
00:14:53.190 --> 00:14:57.910
much like we did when we were creating the stats in the command mind lectures.

255
00:14:57.910 --> 00:15:00.380
But we don't need to do anything that complicated here.

256
00:15:00.380 --> 00:15:03.090
That's just log out an empty line.

257
00:15:03.090 --> 00:15:05.500
I've been a bunch of dashes and say,

258
00:15:05.500 --> 00:15:14.000
Begin test report a bunch more dashes And we want to say that the total test that we ran,

259
00:15:14.000 --> 00:15:16.250
we're going to equal limit.

260
00:15:16.250 --> 00:15:23.670
Then we want to say that the number that have passed so pass is going to equal successes

261
00:15:23.670 --> 00:15:29.730
and then fails is going to ICO errors dot length because remember,

262
00:15:29.730 --> 00:15:33.580
it's an array of air objects that we can log out another empty line.

263
00:15:33.580 --> 00:15:36.190
As with most test runners,

264
00:15:36.190 --> 00:15:41.060
we don't just want to list out the errors or have the test names in red,

265
00:15:41.060 --> 00:15:43.640
but at the very bottom below this report.

266
00:15:43.640 --> 00:15:47.780
We want to list out the air details in detail.

267
00:15:47.780 --> 00:15:50.450
If there are heirs,

268
00:15:50.450 --> 00:15:53.350
print them in detail,

269
00:15:53.350 --> 00:16:00.740
who have to say that if heiress dot length is greater than zero,

270
00:16:00.740 --> 00:16:03.880
then will continue regardless of if it's greater than zero.

271
00:16:03.880 --> 00:16:04.990
At the very end,

272
00:16:04.990 --> 00:16:08.410
we want to indicate that we've reached the end of the chest report,

273
00:16:08.410 --> 00:16:14.660
so we want to console log and empty line and then console log and test report.

274
00:16:14.660 --> 00:16:21.280
But within here we want to law that we were beginning and ending the printing of error

275
00:16:21.280 --> 00:16:30.430
details begin air details and then at the end and their details now in the middle,

276
00:16:30.430 --> 00:16:33.850
we need to look through the air details and log each one out,

277
00:16:33.850 --> 00:16:35.550
going to start with an empty line,

278
00:16:35.550 --> 00:16:38.810
and we actually put an empty line before the end.

279
00:16:38.810 --> 00:16:40.200
In between here,

280
00:16:40.200 --> 00:16:42.850
we want to say prayers for each.

281
00:16:42.850 --> 00:16:46.400
You're gonna pass us an object called test air.

282
00:16:46.400 --> 00:16:51.850
We want to log out the test Ares name and then the actual exception.

283
00:16:51.850 --> 00:16:56.010
And then an empty line might as well make it read as we did the other ones.

284
00:16:56.010 --> 00:16:58.530
So when we log out the air name,

285
00:16:58.530 --> 00:16:59.440
we're going to say,

286
00:16:59.440 --> 00:17:00.820
Call it test air.

287
00:17:00.820 --> 00:17:03.710
Got name now logging out.

288
00:17:03.710 --> 00:17:08.340
The whole exception object in red would be a little hard for people to look at.

289
00:17:08.340 --> 00:17:12.460
And so let's just log out the exception object in plain,

290
00:17:12.460 --> 00:17:16.590
so test their dot there and then a blank line.

291
00:17:16.590 --> 00:17:17.310
Okay,

292
00:17:17.310 --> 00:17:19.100
so that is a test report,

293
00:17:19.100 --> 00:17:22.050
including all the details of any areas that may occur.

294
00:17:22.050 --> 00:17:24.570
So to invoke these tests,

295
00:17:24.570 --> 00:17:27.400
all we need to do is call note test because remember,

296
00:17:27.400 --> 00:17:30.770
that is going to invoke the index file within the test directory.

297
00:17:30.770 --> 00:17:32.450
So we call it no test.

298
00:17:32.450 --> 00:17:37.450
We run the tests and you see a pretty nice report.

299
00:17:37.450 --> 00:17:40.620
We see two green lines for helpers.

300
00:17:40.620 --> 00:17:41.310
Get a number.

301
00:17:41.310 --> 00:17:43.160
Should return a number that turned out green.

302
00:17:43.160 --> 00:17:44.250
Get a number.

303
00:17:44.250 --> 00:17:46.440
Should return one that turned out green.

304
00:17:46.440 --> 00:17:49.790
But then get her number should return to turned out red.

305
00:17:49.790 --> 00:17:52.410
So when we look at our test report,

306
00:17:52.410 --> 00:17:56.690
we can see we had three tests to over them past and one of them failed.

307
00:17:56.690 --> 00:18:00.280
Then if we want more details about the one that's failed,

308
00:18:00.280 --> 00:18:05.110
we know it's gonna be this red one here and we can look down and see OK for helpers,

309
00:18:05.110 --> 00:18:12.620
get a number should return to this was the air we asserted that one equals two because the

310
00:18:12.620 --> 00:18:15.230
return value of get a number was one.

311
00:18:15.230 --> 00:18:20.500
But we asserted that it should equal to all the rest of this is just the stack trace

312
00:18:20.500 --> 00:18:23.150
telling us how they arrived at this conclusion.

313
00:18:23.150 --> 00:18:28.550
But all we really need to know is we expected this to equal to,

314
00:18:28.550 --> 00:18:31.250
and it actually equaled one.

315
00:18:31.250 --> 00:18:35.390
That's the end of the era details and the end of the test report.

316
00:18:35.390 --> 00:18:40.010
So that's all the scaffolding that we need in place to be able to run these unit tests,

317
00:18:40.010 --> 00:18:44.280
and the next lectures will add on more unit tests so that we can start bulletproofing this

318
00:18:44.280 --> 00:18:48.530
application at least nominally and then in the lecture.

319
00:18:48.530 --> 00:18:49.100
After that,

320
00:18:49.100 --> 00:18:53.160
will adults of integration tests as well so we can move on to the next lecture?

