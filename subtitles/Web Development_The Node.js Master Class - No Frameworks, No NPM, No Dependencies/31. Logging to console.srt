1
00:00:00,000 --> 00:00:04,450
in this lecture,

2
00:00:04,450 --> 00:00:09,580
we're going to show a few different tricks that you can do with console logging.

3
00:00:09,580 --> 00:00:13,600
We already went over the basics of logging to files,

4
00:00:13,600 --> 00:00:19,150
but there's still many different reasons that you'll want to lock the console.

5
00:00:19,150 --> 00:00:21,090
But the more that you look to the console,

6
00:00:21,090 --> 00:00:26,550
the harder it is to see or pinpoint any given mind that you might be looking for.

7
00:00:26,550 --> 00:00:33,080
And so these tricks we're going to allow you to separate out different things and also tell

8
00:00:33,080 --> 00:00:37,280
node when toe log certain strings versus others.

9
00:00:37,280 --> 00:00:46,220
So we're going to go to our workers file and log out the fact that it has started right now

10
00:00:46,220 --> 00:00:46,220
.

11
00:00:46,220 --> 00:00:47,140
As you know,

12
00:00:47,140 --> 00:00:49,320
when you start up the application,

13
00:00:49,320 --> 00:00:51,590
a few different logs happen.

14
00:00:51,590 --> 00:00:54,650
It says the server is listening on a Port 3000.

15
00:00:54,650 --> 00:01:02,570
It's listening for 2001 And then there's a bunch of logs happening from log file truncation

16
00:01:02,570 --> 00:01:02,570
,

17
00:01:02,570 --> 00:01:09,570
new logs big sent to log files and then the workers telling us that they did not need to

18
00:01:09,570 --> 00:01:11,450
send new alerts to users.

19
00:01:11,450 --> 00:01:12,570
That's a lot to happen.

20
00:01:12,570 --> 00:01:17,160
And if you're just trying to glance at this and figure out whether or not the workers have

21
00:01:17,160 --> 00:01:21,030
started whether or not the server has started,

22
00:01:21,030 --> 00:01:22,240
it might be a little difficult.

23
00:01:22,240 --> 00:01:24,850
So in this initial ation script,

24
00:01:24,850 --> 00:01:28,130
let's log out the fact that the workers have started.

25
00:01:28,130 --> 00:01:34,550
But let's log it in yellow so that we can see it really easily when the at boots up.

26
00:01:34,550 --> 00:01:36,540
So we're going to say,

27
00:01:36,540 --> 00:01:39,750
said to console in yellow,

28
00:01:39,750 --> 00:01:43,830
we're going to do a normal console dot log.

29
00:01:43,830 --> 00:01:51,220
But this time we're going to send a code that tells Node to do everything in yellow instead

30
00:01:51,220 --> 00:01:51,220
.

31
00:01:51,220 --> 00:01:53,860
And that code looks like this.

32
00:01:53,860 --> 00:02:04,650
Then we're going to put in the string that we actually wanted to send.

33
00:02:04,650 --> 00:02:14,100
Background workers are running now to explain this a little bit more consul dot log When it

34
00:02:14,100 --> 00:02:16,870
comes to node doesn't just take simple strings,

35
00:02:16,870 --> 00:02:22,100
but it actually takes in string interpolation or allows you to put in variables.

36
00:02:22,100 --> 00:02:22,700
Now,

37
00:02:22,700 --> 00:02:29,850
this whole string is actually a command telling console to put it in yellow.

38
00:02:29,850 --> 00:02:36,210
But this percent s is actually telling it that whatever the next parameter is that you send

39
00:02:36,210 --> 00:02:36,710
in,

40
00:02:36,710 --> 00:02:41,640
go ahead and insert that in here and then make this whole thing to come out.

41
00:02:41,640 --> 00:02:44,250
And so when we start this up,

42
00:02:44,250 --> 00:02:47,330
you can see background workers or running,

43
00:02:47,330 --> 00:02:49,550
and that's coming out in yellow.

44
00:02:49,550 --> 00:02:57,650
We can actually modify these numbers 33 34 32 etcetera to get different colors.

45
00:02:57,650 --> 00:02:59,600
There's not that many colors available,

46
00:02:59,600 --> 00:03:01,270
but there are a few.

47
00:03:01,270 --> 00:03:04,240
So now that that's working,

48
00:03:04,240 --> 00:03:10,460
let's change the server listening imported 5001 to be a different color because there's two

49
00:03:10,460 --> 00:03:14,450
things that we really need to know when we glance at the AP after it starts.

50
00:03:14,450 --> 00:03:18,630
One is that the workers were running and then the other that the server is listening.

51
00:03:18,630 --> 00:03:23,690
So let's copy what we did here and then move over to server.

52
00:03:23,690 --> 00:03:27,000
Go down to the initial Asian script,

53
00:03:27,000 --> 00:03:31,550
and we're actually going to modify these two functions to be different.

54
00:03:31,550 --> 00:03:34,790
So I'm pasting in what I just got from over there.

55
00:03:34,790 --> 00:03:44,480
I'm moving them into the second parameter of the log.

56
00:03:44,480 --> 00:03:57,150
So now if we start this up,

57
00:03:57,150 --> 00:04:00,200
we'll see a whole lot of yellow.

58
00:04:00,200 --> 00:04:01,590
That's kind of hard to grok.

59
00:04:01,590 --> 00:04:06,000
So let's change the two colors of these two messages.

60
00:04:06,000 --> 00:04:16,170
Let's change this 1 to 36 this 1 to 35 see what happens now when we started up background

61
00:04:16,170 --> 00:04:18,000
workers air running still in yellow.

62
00:04:18,000 --> 00:04:22,140
The server is listening of Port 3000 is coming through in light blue,

63
00:04:22,140 --> 00:04:23,230
and the server is listening.

64
00:04:23,230 --> 00:04:23,910
Import 1000.

65
00:04:23,910 --> 00:04:25,320
What is coming through and pick.

66
00:04:25,320 --> 00:04:26,490
I like the way that looks.

67
00:04:26,490 --> 00:04:28,980
So let's just leave that there now.

68
00:04:28,980 --> 00:04:34,170
Despite all these other messages that are coming through weaken glance at this app when it

69
00:04:34,170 --> 00:04:36,260
starts and see yellow,

70
00:04:36,260 --> 00:04:37,800
light blue and pink and no.

71
00:04:37,800 --> 00:04:38,330
Okay,

72
00:04:38,330 --> 00:04:40,160
everything is at least started up.

73
00:04:40,160 --> 00:04:44,380
So that's how you make the console long strings of different colors.

74
00:04:44,380 --> 00:04:45,530
That's very useful,

75
00:04:45,530 --> 00:04:49,040
especially if you want to make errors very pronounced to the user.

76
00:04:49,040 --> 00:04:53,630
May come out and read or success messages come out in green etcetera.

77
00:04:53,630 --> 00:04:57,220
But the issue that were going to run into with this app,

78
00:04:57,220 --> 00:04:59,530
especially when there are lots and lots of checks,

79
00:04:59,530 --> 00:05:02,950
is that there's gonna be lots and lots of logs happening as well.

80
00:05:02,950 --> 00:05:08,880
And someone looking at this console is just going to be inundated with success and error

81
00:05:08,880 --> 00:05:11,890
messages so quickly that they can't really grok was going on,

82
00:05:11,890 --> 00:05:15,370
especially if there is a lot of requests coming to the A P.

83
00:05:15,370 --> 00:05:18,410
I and a lot of background workers happening at the same time.

84
00:05:18,410 --> 00:05:24,900
So the next thing that we need to do is figure out how to modify the AB so that not all

85
00:05:24,900 --> 00:05:27,660
these logs need to be coming through all the time.

86
00:05:27,660 --> 00:05:34,620
The way that we do that is actually with nodes debug command line argument now to see what

87
00:05:34,620 --> 00:05:35,400
I mean by that,

88
00:05:35,400 --> 00:05:44,740
we can start this app up with node debug equals any built in module into note.

89
00:05:44,740 --> 00:05:46,980
So one of the ones that were using his http,

90
00:05:46,980 --> 00:05:55,040
so let's just say no debug equals http and then start up is normal node index dot Js c o

91
00:05:55,040 --> 00:05:56,650
this extra stuff coming through.

92
00:05:56,650 --> 00:05:59,170
We have our yellow,

93
00:05:59,170 --> 00:06:00,060
blue and pink,

94
00:06:00,060 --> 00:06:07,140
but then we have all these debug messages coming through from this HDP module does

95
00:06:07,140 --> 00:06:09,110
identifying itself as its module.

96
00:06:09,110 --> 00:06:10,970
And then it's process I d.

97
00:06:10,970 --> 00:06:16,150
If we go over to postman and just send a random post,

98
00:06:16,150 --> 00:06:24,060
you're going to see that there's even more information coming through the socket opening

99
00:06:24,060 --> 00:06:24,740
and closing.

100
00:06:24,740 --> 00:06:28,760
And so every time the http module does something,

101
00:06:28,760 --> 00:06:32,410
there's going to be mawr and Mawr messages here,

102
00:06:32,410 --> 00:06:38,020
and that is true of any node package that sends out deep of messages,

103
00:06:38,020 --> 00:06:39,850
which many of the modules do.

104
00:06:39,850 --> 00:06:49,020
But you can also use the node debug command line argument to specify your own packages or

105
00:06:49,020 --> 00:06:54,580
specify your own bits and pieces of console locking that you might be doing in different

106
00:06:54,580 --> 00:06:55,300
places.

107
00:06:55,300 --> 00:06:59,210
The way that you do that is with the utilities package.

108
00:06:59,210 --> 00:07:08,830
So let's go over to workers and we're going to include the utilities package.

109
00:07:08,830 --> 00:07:09,750
So far,

110
00:07:09,750 --> 00:07:11,230
you till equals,

111
00:07:11,230 --> 00:07:12,720
require you,

112
00:07:12,720 --> 00:07:13,050
too.

113
00:07:13,050 --> 00:07:18,510
And then we're going to say that debug in other words,

114
00:07:18,510 --> 00:07:22,800
what we're going to be using instead of consul dot log.

115
00:07:22,800 --> 00:07:30,140
So debug equals you tail dot debug log and then we have to give it a name.

116
00:07:30,140 --> 00:07:34,830
So this name is the same thing that we will pass as a startup argument.

117
00:07:34,830 --> 00:07:35,790
So in our case,

118
00:07:35,790 --> 00:07:41,020
we're gonna call this workers because we're in the workers file and when we want to only

119
00:07:41,020 --> 00:07:44,270
see debug messages from the workers file,

120
00:07:44,270 --> 00:07:52,560
we're going to start the app up with node debug equals workers knowed index Js Right now

121
00:07:52,560 --> 00:07:54,480
that would not have much of an effect.

122
00:07:54,480 --> 00:08:01,690
But once we modify the consul logging here to use debug instead it will have effect.

123
00:08:01,690 --> 00:08:08,120
So I am actually just going to find replace most of the console logging that happens in

124
00:08:08,120 --> 00:08:08,950
this file.

125
00:08:08,950 --> 00:08:12,900
Just replace it with D book.

126
00:08:12,900 --> 00:08:24,260
That is true for most of them except this last one where we are using the colored console

127
00:08:24,260 --> 00:08:26,100
logging to make the background.

128
00:08:26,100 --> 00:08:28,370
Workers are running come out as yellow,

129
00:08:28,370 --> 00:08:34,250
and we want that to come out whether or not we've started it with no debug equals workers.

130
00:08:34,250 --> 00:08:36,660
So now that we've switched all the console,

131
00:08:36,660 --> 00:08:40,470
don't log to be called with the debug function.

132
00:08:40,470 --> 00:08:41,190
Instead,

133
00:08:41,190 --> 00:08:42,350
let's start this up.

134
00:08:42,350 --> 00:08:48,600
Now you can see all the same logs that were coming out before yellow,

135
00:08:48,600 --> 00:08:48,910
blue,

136
00:08:48,910 --> 00:08:51,750
pink and then a bunch of workers related logging.

137
00:08:51,750 --> 00:08:59,710
But you can see that now workers are coming out specifying that they're coming from the

138
00:08:59,710 --> 00:09:05,630
workers in this realization of this debug blogger and also a process i d.

139
00:09:05,630 --> 00:09:11,500
That also means that if we start this up without no debunk equals workers,

140
00:09:11,500 --> 00:09:17,230
we don't have that locking happen at all.

141
00:09:17,230 --> 00:09:20,920
So now that logging has gone from something that happens all the time,

142
00:09:20,920 --> 00:09:23,600
every time we start the app to log in,

143
00:09:23,600 --> 00:09:28,220
that happens conditionally on Lee if we start the application with a certain flat,

144
00:09:28,220 --> 00:09:33,430
so that will make it a lot easier for us to grok what's going on now.

145
00:09:33,430 --> 00:09:37,440
Let's go over to server dot Js and do something similar.

146
00:09:37,440 --> 00:09:39,250
So I'm gonna copy this here,

147
00:09:39,250 --> 00:09:41,400
move it over to server.

148
00:09:41,400 --> 00:09:47,490
But this time I want the debug log flag to be called server instead.

149
00:09:47,490 --> 00:09:51,540
Now that we have that debug function defined,

150
00:09:51,540 --> 00:09:56,950
we can go ahead and replace most of the console log in this file as well.

151
00:09:56,950 --> 00:09:57,840
So I'm gonna do,

152
00:09:57,840 --> 00:09:58,040
ah,

153
00:09:58,040 --> 00:09:58,450
find,

154
00:09:58,450 --> 00:10:02,790
replace and start replacing things.

155
00:10:02,790 --> 00:10:09,050
But I actually still don't want to replace Thies,

156
00:10:09,050 --> 00:10:09,320
too,

157
00:10:09,320 --> 00:10:13,260
because I don't want the server is listening messages to be conditional.

158
00:10:13,260 --> 00:10:17,480
I want them toe happen every time we start up the app while we're here,

159
00:10:17,480 --> 00:10:24,750
let's go ahead and get rid of this old console log that we just replaced and let's make it

160
00:10:24,750 --> 00:10:26,500
a little bit more robust.

161
00:10:26,500 --> 00:10:32,350
So let's say instead of just logging the request path that came in when a user makes a

162
00:10:32,350 --> 00:10:33,500
request or a P,

163
00:10:33,500 --> 00:10:33,780
I,

164
00:10:33,780 --> 00:10:39,510
let's say if the response is 200 print green,

165
00:10:39,510 --> 00:10:43,400
otherwise print red,

166
00:10:43,400 --> 00:10:45,460
so we're gonna add some coloring here,

167
00:10:45,460 --> 00:10:52,210
but we still only want these red or green messages to happen if the application is started

168
00:10:52,210 --> 00:10:54,090
with no deep of equal server.

169
00:10:54,090 --> 00:10:59,090
So we're going to keep this within debug instead of console dot log.

170
00:10:59,090 --> 00:11:05,850
So we're going to say if status code equals 200 we want to look something out.

171
00:11:05,850 --> 00:11:07,250
Otherwise,

172
00:11:07,250 --> 00:11:09,740
we want to log it out in red.

173
00:11:09,740 --> 00:11:16,870
So what we want to log out in Green is going to be the method that the user requested,

174
00:11:16,870 --> 00:11:22,770
and we're gonna push it up to upper case and then the path that they requested,

175
00:11:22,770 --> 00:11:28,250
and then the status code that we sent back.

176
00:11:28,250 --> 00:11:34,830
And this first parameter is going to become the green coloration.

177
00:11:34,830 --> 00:11:40,800
If it's not a status equals 200 it's gonna come out with the same message is just going to

178
00:11:40,800 --> 00:11:41,770
come out red.

179
00:11:41,770 --> 00:11:45,190
So let's go down here.

180
00:11:45,190 --> 00:11:51,150
Copy this string pasted in here.

181
00:11:51,150 --> 00:11:54,340
But instead of it coming out with that color,

182
00:11:54,340 --> 00:12:00,640
let's change the 201 to 32 which will make it come out green,

183
00:12:00,640 --> 00:12:06,160
and let's change the else to 31 which will make it come out red.

184
00:12:06,160 --> 00:12:06,610
So,

185
00:12:06,610 --> 00:12:07,340
in other words,

186
00:12:07,340 --> 00:12:09,950
good requests are coming out with green.

187
00:12:09,950 --> 00:12:11,940
Bad requests are coming out with red,

188
00:12:11,940 --> 00:12:19,150
so I'm gonna start this server backup with no debug equals server.

189
00:12:19,150 --> 00:12:21,290
There's nothing there yet,

190
00:12:21,290 --> 00:12:21,830
cause remember,

191
00:12:21,830 --> 00:12:26,340
these debug messages only come when requests hit the a p I.

192
00:12:26,340 --> 00:12:32,070
So I'm gonna go back to Postman said off a random request that was a 200 so that messages

193
00:12:32,070 --> 00:12:33,080
coming out is great.

194
00:12:33,080 --> 00:12:37,930
Now I want to modify this to be something that doesn't exist.

195
00:12:37,930 --> 00:12:38,670
Send that often,

196
00:12:38,670 --> 00:12:40,870
get a 404 That's not a 200.

197
00:12:40,870 --> 00:12:42,910
So the message should be read.

198
00:12:42,910 --> 00:12:48,340
So now every request that comes into the a P I is going to be law green or red if it's 200

199
00:12:48,340 --> 00:12:49,790
or not.

200
00:12:49,790 --> 00:12:56,190
And so when you're debugging issues and you're trying to figure out what happened when that

201
00:12:56,190 --> 00:12:59,910
user got a 500 back to track down that request,

202
00:12:59,910 --> 00:13:06,710
you congest visually scan for red marks as opposed to trying to figure out exactly which

203
00:13:06,710 --> 00:13:09,470
request you need based on text alone.

204
00:13:09,470 --> 00:13:11,300
But once again,

205
00:13:11,300 --> 00:13:18,470
if we hadn't started this up with the no debug equal server flag,

206
00:13:18,470 --> 00:13:21,930
none of these messages would have appeared at all right,

207
00:13:21,930 --> 00:13:24,390
so I can clear out the terminal.

208
00:13:24,390 --> 00:13:28,100
That's all the fancy console logging that we really need to go over here.

209
00:13:28,100 --> 00:13:32,850
All the modifications that we need to make to are apt to make these messages a little clear

210
00:13:32,850 --> 00:13:35,550
for us so we can move on to the next lecture.

