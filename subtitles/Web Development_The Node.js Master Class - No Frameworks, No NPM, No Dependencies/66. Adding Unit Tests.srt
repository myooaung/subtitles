1
00:00:00,000 --> 00:00:04,540
in this lecture,

2
00:00:04,540 --> 00:00:09,240
we're going to add on a number of unit tests so that we can show the different type of

3
00:00:09,240 --> 00:00:10,650
testing that you could do,

4
00:00:10,650 --> 00:00:15,420
or at least the different kinds of assertions that you can make in your unit tests.

5
00:00:15,420 --> 00:00:21,420
The first thing that we need to do is push these unit tests into their own file because

6
00:00:21,420 --> 00:00:25,590
this file that were using to run the test is getting a little bit too crowded.

7
00:00:25,590 --> 00:00:27,870
And if we added in a whole bunch of unit tests here,

8
00:00:27,870 --> 00:00:29,140
is just gonna be too big.

9
00:00:29,140 --> 00:00:32,450
So let's go ahead and create a separate file to hold these tests.

10
00:00:32,450 --> 00:00:45,220
We're going to say touch test slash unit dot Js and let's just cut these out and paste them

11
00:00:45,220 --> 00:00:45,820
here for now,

12
00:00:45,820 --> 00:00:47,750
and we'll come back and clean that up in a bit later.

13
00:00:47,750 --> 00:00:52,640
But we want this file to work much in the same way.

14
00:00:52,640 --> 00:00:53,510
And so,

15
00:00:53,510 --> 00:00:57,450
rather than defining these unit tests as an empty object here,

16
00:00:57,450 --> 00:01:07,450
we can actually just coal at tests set up is an object and then add on the unit tests as a

17
00:01:07,450 --> 00:01:08,250
dependency.

18
00:01:08,250 --> 00:01:13,630
So at Tess unit going to equal require dot,

19
00:01:13,630 --> 00:01:17,100
slash unit because we're in the same directory now.

20
00:01:17,100 --> 00:01:22,250
We can actually move both of these dependencies to that new file as well,

21
00:01:22,250 --> 00:01:29,480
because our test runner is of our own creation and we're not using any dependencies here,

22
00:01:29,480 --> 00:01:32,350
So all the rest of this should work the same way.

23
00:01:32,350 --> 00:01:35,170
It's now going back to this new file recreated.

24
00:01:35,170 --> 00:01:44,120
Just gonna add a comment at the top saying that this is the unit tests and we have our

25
00:01:44,120 --> 00:01:44,950
dependencies.

26
00:01:44,950 --> 00:01:45,480
For now,

27
00:01:45,480 --> 00:01:48,780
we have helpers and assert we're actually going to need a few more.

28
00:01:48,780 --> 00:01:52,680
We're going to write some unit tests that deal with the libraries and here,

29
00:01:52,680 --> 00:01:58,200
particularly logs and the example debugging problem and helpers,

30
00:01:58,200 --> 00:01:59,830
which we've already included.

31
00:01:59,830 --> 00:02:03,550
So let's include the logs bar logs equals require.

32
00:02:03,550 --> 00:02:05,090
Then once again,

33
00:02:05,090 --> 00:02:13,240
we need to back out and up into the live directory toe logs and now far example debugging

34
00:02:13,240 --> 00:02:14,150
problem.

35
00:02:14,150 --> 00:02:24,250
It's going to equal require once again into the live directory example of debugging problem

36
00:02:24,250 --> 00:02:24,250
.

37
00:02:24,250 --> 00:02:26,300
Now that we have all these dependencies,

38
00:02:26,300 --> 00:02:31,540
let's go ahead and create a holder for these tests.

39
00:02:31,540 --> 00:02:35,590
So we're gonna call it for unit,

40
00:02:35,590 --> 00:02:39,310
and then when we defined these tests,

41
00:02:39,310 --> 00:02:41,730
we don't need to call AP Test unit.

42
00:02:41,730 --> 00:02:43,280
We just call unit the richest,

43
00:02:43,280 --> 00:02:48,920
adding on keys to this unit object when their time and at the bottom of file.

44
00:02:48,920 --> 00:02:49,870
As you would expect,

45
00:02:49,870 --> 00:02:54,350
we just need to export the tests to the runner.

46
00:02:54,350 --> 00:02:59,950
Marjo dot exports equals unit.

47
00:02:59,950 --> 00:03:05,150
I'm gonna leave these three tests that we've defined already here and then add on some new

48
00:03:05,150 --> 00:03:14,300
ones That's ready Test that says that logs dot list I should call back and array and a

49
00:03:14,300 --> 00:03:15,650
false air.

50
00:03:15,650 --> 00:03:24,270
Remember that logs dot list should go through the logs directory here and give us back in

51
00:03:24,270 --> 00:03:25,850
array of file names.

52
00:03:25,850 --> 00:03:27,860
And since we're doing their back pattern,

53
00:03:27,860 --> 00:03:30,880
it should give us false as the first parameter that calls back.

54
00:03:30,880 --> 00:03:35,320
So we're going to create this test with name logs,

55
00:03:35,320 --> 00:03:36,090
got list,

56
00:03:36,090 --> 00:03:44,860
should call back a false air and and a ray of log names.

57
00:03:44,860 --> 00:03:46,880
And this is a function that,

58
00:03:46,880 --> 00:03:47,370
of course,

59
00:03:47,370 --> 00:03:48,350
take done.

60
00:03:48,350 --> 00:03:49,600
And within it,

61
00:03:49,600 --> 00:03:54,970
we're gonna call logs that list just as we would normally we're gonna pass it true,

62
00:03:54,970 --> 00:04:01,590
telling it to include the compressed files and it's going to pass us back an air and log

63
00:04:01,590 --> 00:04:06,560
file names within this call back we want to assert that the air is false.

64
00:04:06,560 --> 00:04:13,670
So we're calling assert dot equal are asserting that two things are equal air and false.

65
00:04:13,670 --> 00:04:15,040
Next,

66
00:04:15,040 --> 00:04:18,330
we want to assert that something is truth e.

67
00:04:18,330 --> 00:04:24,460
We want to assert that log file names being an instance of an array is Truth E.

68
00:04:24,460 --> 00:04:28,580
And so for that you can call assert dot OK,

69
00:04:28,580 --> 00:04:29,810
by okay,

70
00:04:29,810 --> 00:04:30,790
they mean truth e.

71
00:04:30,790 --> 00:04:38,240
So log file names instance of array should be a true the assertion.

72
00:04:38,240 --> 00:04:39,550
Next,

73
00:04:39,550 --> 00:04:41,640
we can add on as many assertions as we want,

74
00:04:41,640 --> 00:04:43,050
but we want to call one more.

75
00:04:43,050 --> 00:04:51,320
That is also asserting that log file names length greater than one should be true.

76
00:04:51,320 --> 00:04:51,960
Thea's Well,

77
00:04:51,960 --> 00:04:54,750
if all these pass will call the done,

78
00:04:54,750 --> 00:04:56,400
if any of them don't pass it,

79
00:04:56,400 --> 00:04:57,160
they'll throw.

80
00:04:57,160 --> 00:04:59,420
That will get caught by our test runner,

81
00:04:59,420 --> 00:05:00,610
and it will come back as an air.

82
00:05:00,610 --> 00:05:01,770
Next.

83
00:05:01,770 --> 00:05:06,710
Let's call another function within the Logs library That's called truncate,

84
00:05:06,710 --> 00:05:10,710
and we should say that truncate should not throw,

85
00:05:10,710 --> 00:05:18,050
even if the i d that we send to truncate doesn't exist to remind you what truncate is.

86
00:05:18,050 --> 00:05:21,180
This is a simple function that truncate,

87
00:05:21,180 --> 00:05:22,120
say log file.

88
00:05:22,120 --> 00:05:23,570
It takes in the log i d.

89
00:05:23,570 --> 00:05:29,020
It tries to truncate that file on the assumption that it lives in the Logs directory and

90
00:05:29,020 --> 00:05:31,920
then calls back either no air or an error.

91
00:05:31,920 --> 00:05:36,740
But it should not throw if there's an error because the log file didn't exist,

92
00:05:36,740 --> 00:05:38,100
it should call it back,

93
00:05:38,100 --> 00:05:39,470
but it shouldn't ever throw.

94
00:05:39,470 --> 00:05:44,050
So we're going to write this unit tests to assert that that's true.

95
00:05:44,050 --> 00:05:51,780
So logs truncate should not throw if the log I d.

96
00:05:51,780 --> 00:05:53,050
Doesn't exist.

97
00:05:53,050 --> 00:06:01,590
So let's say that this is a unit test name logs truncate should not throw.

98
00:06:01,590 --> 00:06:03,740
If the log i d.

99
00:06:03,740 --> 00:06:05,090
Does not exist,

100
00:06:05,090 --> 00:06:11,450
it should call back and air instead.

101
00:06:11,450 --> 00:06:17,950
Now you can see having these comments up here and having the names of the test in plain

102
00:06:17,950 --> 00:06:19,570
English is a bit redundant.

103
00:06:19,570 --> 00:06:21,380
When you're reading your tests,

104
00:06:21,380 --> 00:06:24,010
you should certainly feel free to leave off the comments.

105
00:06:24,010 --> 00:06:27,270
So this is going to be a function that takes in done like the others,

106
00:06:27,270 --> 00:06:28,200
and within it,

107
00:06:28,200 --> 00:06:31,650
we are actually going to call an assertion first,

108
00:06:31,650 --> 00:06:37,800
and that assertion is going to be assert dot does not throw,

109
00:06:37,800 --> 00:06:40,730
and within it,

110
00:06:40,730 --> 00:06:43,870
we're going to define a function and within it.

111
00:06:43,870 --> 00:06:48,160
We're going to place logic that were asserting will not throw.

112
00:06:48,160 --> 00:06:50,680
But when you call does not throw,

113
00:06:50,680 --> 00:06:54,860
you actually need to assert that it does not throw a specific thing.

114
00:06:54,860 --> 00:06:59,190
And so we're asserting that it does not throw a type air.

115
00:06:59,190 --> 00:07:03,340
So we're going to call logs truncate.

116
00:07:03,340 --> 00:07:10,750
And this idea is going to be I do not exist because that doesn't exist and we expect back

117
00:07:10,750 --> 00:07:12,690
an air within it.

118
00:07:12,690 --> 00:07:14,300
We can actually assert more.

119
00:07:14,300 --> 00:07:22,380
We can assert that the air is okay because the air should be truth EOC this point and then

120
00:07:22,380 --> 00:07:23,350
we can call done.

121
00:07:23,350 --> 00:07:25,450
If any of this throws,

122
00:07:25,450 --> 00:07:28,450
it'll be caught by this does not throw,

123
00:07:28,450 --> 00:07:31,220
which will itself thrown air,

124
00:07:31,220 --> 00:07:33,020
which will be caught by the test runner.

125
00:07:33,020 --> 00:07:33,500
Now,

126
00:07:33,500 --> 00:07:35,400
this is something that does not throw.

127
00:07:35,400 --> 00:07:39,030
Now let's do an example of something that actually does throw.

128
00:07:39,030 --> 00:07:40,650
So I'm gonna copy this down.

129
00:07:40,650 --> 00:07:42,970
Change the description,

130
00:07:42,970 --> 00:07:43,550
too.

131
00:07:43,550 --> 00:07:46,020
Example.

132
00:07:46,020 --> 00:07:50,650
Debugging problem dot in it should not throw,

133
00:07:50,650 --> 00:07:52,260
but it does.

134
00:07:52,260 --> 00:07:55,230
We know that example.

135
00:07:55,230 --> 00:08:00,500
Any button problem from nearly lecture does nothing except throw because it tries to use

136
00:08:00,500 --> 00:08:02,100
the value of bar which doesn't exist.

137
00:08:02,100 --> 00:08:05,670
Let's change the test name to example,

138
00:08:05,670 --> 00:08:11,450
debugging problem in it should not throw when cold.

139
00:08:11,450 --> 00:08:14,660
We're going to wrap it and it does not throw.

140
00:08:14,660 --> 00:08:21,050
But then call example debugging problem in it and then done afterwards.

141
00:08:21,050 --> 00:08:26,550
Let's run these tests and see what happens knowed test.

142
00:08:26,550 --> 00:08:28,640
And there we have it.

143
00:08:28,640 --> 00:08:31,090
We have to failures get a number,

144
00:08:31,090 --> 00:08:33,500
should return to which we already knew was failing.

145
00:08:33,500 --> 00:08:34,730
And then example.

146
00:08:34,730 --> 00:08:36,640
The problem in it should not throw.

147
00:08:36,640 --> 00:08:37,350
When called.

148
00:08:37,350 --> 00:08:43,010
The first details that we could look at is the same as before.

149
00:08:43,010 --> 00:08:45,540
We were expecting the number to,

150
00:08:45,540 --> 00:08:47,050
but it was actually number one.

151
00:08:47,050 --> 00:08:50,290
But then an example bucking problem dot in it.

152
00:08:50,290 --> 00:08:56,510
It's actually going to show us the error that got thrown that caused the issue in the first

153
00:08:56,510 --> 00:08:56,920
place.

154
00:08:56,920 --> 00:08:57,860
So for us,

155
00:08:57,860 --> 00:08:59,800
bar is not defined,

156
00:08:59,800 --> 00:09:01,850
which is the root of the issue.

157
00:09:01,850 --> 00:09:02,990
In example,

158
00:09:02,990 --> 00:09:03,830
T button problem.

159
00:09:03,830 --> 00:09:10,900
This is also an example of how errors can bubble up through many different tries and

160
00:09:10,900 --> 00:09:12,410
catches within.

161
00:09:12,410 --> 00:09:13,260
No Js.

162
00:09:13,260 --> 00:09:20,310
This is one of the reasons that debunking issues in node can be extremely complicated and

163
00:09:20,310 --> 00:09:24,680
tiresome because you think you're dealing with one file,

164
00:09:24,680 --> 00:09:31,340
but an issue is actually buried deep within another and is bubbling all the way up through

165
00:09:31,340 --> 00:09:34,600
the try catch that you put somewhere else.

166
00:09:34,600 --> 00:09:39,750
So those are some examples of different ways that you can assert things to be true.

167
00:09:39,750 --> 00:09:43,940
You can assert things to be truth EU concert things to have a certain value.

168
00:09:43,940 --> 00:09:47,190
You can assert that logic should not throw.

169
00:09:47,190 --> 00:09:50,750
There are many other ways to use the Assertion Library as well.

170
00:09:50,750 --> 00:09:52,220
In the next lecture,

171
00:09:52,220 --> 00:09:58,340
we're going to go on to writing some integration tests to actually test the outcome off our

172
00:09:58,340 --> 00:10:01,500
A p I that we built so we can move on to the next lecture.

