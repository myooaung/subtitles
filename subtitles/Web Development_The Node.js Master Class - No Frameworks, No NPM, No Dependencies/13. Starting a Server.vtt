WEBVTT
ï»¿1
00:00:00.000 --> 00:00:03.490
All right,

2
00:00:03.490 --> 00:00:06.860
Now we're going to be starting up an HDP server.

3
00:00:06.860 --> 00:00:10.450
So let's start by adding some code comments up here,

4
00:00:10.450 --> 00:00:21.150
we're just gonna know that this is the primary file for the A P I.

5
00:00:21.150 --> 00:00:23.310
Before we do anything,

6
00:00:23.310 --> 00:00:32.760
we are going to need one of nodes built in modules called http.

7
00:00:32.760 --> 00:00:39.570
This is the http server that lets you listen on ports and respond with did it?

8
00:00:39.570 --> 00:00:43.750
This one is called HDP.

9
00:00:43.750 --> 00:00:52.080
So we're going to require the HDP module by saying require http and we're just going to

10
00:00:52.080 --> 00:00:53.690
assign it back to the variable.

11
00:00:53.690 --> 00:00:54.300
Http,

12
00:00:54.300 --> 00:01:03.130
you'll notice that a lot of people have started using constant instead of our that works as

13
00:01:03.130 --> 00:01:03.350
well.

14
00:01:03.350 --> 00:01:11.540
So the way the http server works is we first need to use the HDP module to define what the

15
00:01:11.540 --> 00:01:12.770
server does.

16
00:01:12.770 --> 00:01:14.450
And then later on,

17
00:01:14.450 --> 00:01:19.340
we need to actually tell the server to start listening on a specific port.

18
00:01:19.340 --> 00:01:25.350
So I'm just going to add some commenting so that we know what we're about to fill in.

19
00:01:25.350 --> 00:01:47.440
Okay,

20
00:01:47.440 --> 00:01:51.970
So what this says is that the servers should respond to all requests with a string of the

21
00:01:51.970 --> 00:01:52.880
world or whatever,

22
00:01:52.880 --> 00:01:57.810
and that then we need to start the server and haven't listened on Port 3000.

23
00:01:57.810 --> 00:01:59.500
Let's go ahead and do that.

24
00:01:59.500 --> 00:02:01.910
In order to configure the server,

25
00:02:01.910 --> 00:02:04.370
we're going to create a server object.

26
00:02:04.370 --> 00:02:05.950
That's just call that server.

27
00:02:05.950 --> 00:02:17.350
We're going to use HDP dot create server and we're gonna pass it a call back.

28
00:02:17.350 --> 00:02:24.260
And that callback accepts two parameters wreck with stands for request and rez,

29
00:02:24.260 --> 00:02:25.900
which stands for response.

30
00:02:25.900 --> 00:02:34.080
And I'll explain that what that means more in a second now we're going to use when the

31
00:02:34.080 --> 00:02:39.440
functions built into the rez object that will be coming back to send a string back in

32
00:02:39.440 --> 00:02:40.890
response to any request.

33
00:02:40.890 --> 00:02:45.320
So rez dot end hello,

34
00:02:45.320 --> 00:02:45.990
world,

35
00:02:45.990 --> 00:02:49.180
and then we want to terminate it with a new line.

36
00:02:49.180 --> 00:02:55.670
Now we need to tell the server to start listening on a port.

37
00:02:55.670 --> 00:03:09.370
So we're going to say server listen on 3000 and also give us a call back to tell us when

38
00:03:09.370 --> 00:03:13.640
you're done listening and when it is done listening,

39
00:03:13.640 --> 00:03:22.550
we're going toe log out that the server is listening on a Port 3000 now,

40
00:03:22.550 --> 00:03:27.950
so we have these two really simple functions.

41
00:03:27.950 --> 00:03:31.830
The 1st 1 defines the behaviors of the server.

42
00:03:31.830 --> 00:03:36.780
We're creating the server and then saying that it should respond with a hello world.

43
00:03:36.780 --> 00:03:37.860
And then second,

44
00:03:37.860 --> 00:03:39.940
we are telling it,

45
00:03:39.940 --> 00:03:40.060
Toe,

46
00:03:40.060 --> 00:03:41.450
listen on Port 3000.

47
00:03:41.450 --> 00:03:47.990
Let's go ahead and run this program and see what happens.

48
00:03:47.990 --> 00:03:52.750
We're going to run it by calling the same thing that we did in the previous lecture node

49
00:03:52.750 --> 00:03:56.470
index dot Js We have a console log.

50
00:03:56.470 --> 00:03:58.850
That server is listening on Port 3000 now.

51
00:03:58.850 --> 00:04:01.610
But how can we test it?

52
00:04:01.610 --> 00:04:04.650
Let's go ahead and open a new tab in our terminal.

53
00:04:04.650 --> 00:04:11.550
And I'm just going to curl local host 3000 and see I got back the string.

54
00:04:11.550 --> 00:04:12.410
Hello world.

55
00:04:12.410 --> 00:04:13.850
Okay,

56
00:04:13.850 --> 00:04:14.300
now I'm in.

57
00:04:14.300 --> 00:04:16.380
The clothes are coral.

58
00:04:16.380 --> 00:04:16.790
Client,

59
00:04:16.790 --> 00:04:21.740
back out and kill this server by pressing control.

60
00:04:21.740 --> 00:04:22.550
See,

61
00:04:22.550 --> 00:04:26.960
otherwise that server just listens continuously.

62
00:04:26.960 --> 00:04:32.080
It is keeping the node Js event loop busy by telling it.

63
00:04:32.080 --> 00:04:33.560
It always has something new to do,

64
00:04:33.560 --> 00:04:37.050
which is continue to listen on the server and 40,000.

65
00:04:37.050 --> 00:04:37.670
So,

66
00:04:37.670 --> 00:04:39.240
in order to get the program to stop,

67
00:04:39.240 --> 00:04:41.960
we actually have to proactively kill it.

68
00:04:41.960 --> 00:04:44.520
And that's what the control see does.

69
00:04:44.520 --> 00:04:47.160
If you're on a windows machine or something after than OS X,

70
00:04:47.160 --> 00:04:48.450
Your command will be different.

71
00:04:48.450 --> 00:04:52.550
It will be whatever the command is that normally kills programs in the command line.

