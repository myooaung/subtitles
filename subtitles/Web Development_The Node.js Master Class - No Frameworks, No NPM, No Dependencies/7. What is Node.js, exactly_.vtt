WEBVTT
ï»¿1
00:00:00.000 --> 00:00:01.260
What is no Js?

2
00:00:01.260 --> 00:00:01.950
Exactly?

3
00:00:01.950 --> 00:00:02.970
No.

4
00:00:02.970 --> 00:00:06.650
Js is a server side JavaScript runtime environment.

5
00:00:06.650 --> 00:00:08.600
Let's break that sentence down.

6
00:00:08.600 --> 00:00:09.530
No,

7
00:00:09.530 --> 00:00:11.440
Js is a server side.

8
00:00:11.440 --> 00:00:14.460
It's an application that runs on a computer's operating system,

9
00:00:14.460 --> 00:00:19.300
as opposed to in a Web browser or on a phone Java script.

10
00:00:19.300 --> 00:00:20.720
Runtime environment.

11
00:00:20.720 --> 00:00:23.230
It's an application that looks at JavaScript,

12
00:00:23.230 --> 00:00:28.080
decides which job script files or commands should be executed and when,

13
00:00:28.080 --> 00:00:34.850
and then sends that JavaScript to an embedded JavaScript engine V eight for execution on

14
00:00:34.850 --> 00:00:35.560
the computer.

15
00:00:35.560 --> 00:00:39.980
If you recall what the V eight is from the previous lecture,

16
00:00:39.980 --> 00:00:43.920
you can think of the eight as a car's engine and drive train.

17
00:00:43.920 --> 00:00:48.670
While no Js is everything else that makes the car the seats,

18
00:00:48.670 --> 00:00:49.580
the steering wheel,

19
00:00:49.580 --> 00:00:50.200
the windows,

20
00:00:50.200 --> 00:00:52.840
etcetera and as a no Js developer,

21
00:00:52.840 --> 00:00:54.590
you are the driver of the car.

22
00:00:54.590 --> 00:00:56.440
If you didn't have no Js,

23
00:00:56.440 --> 00:00:59.310
it be like trying to drive an engine down the street.

24
00:00:59.310 --> 00:01:04.780
You'd have to manually squirt gas into the cylinders at the right time and pull on pieces

25
00:01:04.780 --> 00:01:08.740
of the chassis to make it turn it be very difficult to drive the vehicle down the street

26
00:01:08.740 --> 00:01:12.190
and without the engine and only the car shell,

27
00:01:12.190 --> 00:01:14.220
you wouldn't be able to go anywhere at all.

28
00:01:14.220 --> 00:01:19.740
So both the engine and the shell are important and crucial to being able to operate the car

29
00:01:19.740 --> 00:01:19.740
.

30
00:01:19.740 --> 00:01:21.180
Similarly,

31
00:01:21.180 --> 00:01:22.530
without node,

32
00:01:22.530 --> 00:01:24.660
using V eight would be very difficult.

33
00:01:24.660 --> 00:01:27.780
You'd not only have to write your JavaScript files,

34
00:01:27.780 --> 00:01:33.180
but then write another application that packages up and send those JavaScript files to V

35
00:01:33.180 --> 00:01:34.520
eight at the right time,

36
00:01:34.520 --> 00:01:35.810
then handles the response.

37
00:01:35.810 --> 00:01:38.050
No Js does all that for you.

38
00:01:38.050 --> 00:01:39.700
So what is node?

39
00:01:39.700 --> 00:01:43.850
It's a C plus plus application that in beds V eight,

40
00:01:43.850 --> 00:01:48.110
if we look at the first few commits that Ryan doll made to know J s weaken,

41
00:01:48.110 --> 00:01:54.150
see him embedding the V eight application and then writing more C plus plus that handles

42
00:01:54.150 --> 00:01:59.360
the logic of figuring out which JavaScript ascend to v eight and when and what to do with

43
00:01:59.360 --> 00:02:04.320
the responses in modern no Js you can still see via embedded in there,

44
00:02:04.320 --> 00:02:09.650
though the rest of the code bases many 1000 times larger than it used to be in crafting no

45
00:02:09.650 --> 00:02:10.940
Js and iterating on it.

46
00:02:10.940 --> 00:02:11.740
Over time,

47
00:02:11.740 --> 00:02:16.580
Ryan Doll and other contributors have made two primary programs,

48
00:02:16.580 --> 00:02:18.720
both of which get called from the command line,

49
00:02:18.720 --> 00:02:22.830
a rebel read evil print loop and a script processor.

50
00:02:22.830 --> 00:02:24.650
Let's start with the script processor.

51
00:02:24.650 --> 00:02:30.610
The script processor gets called by simply invoking node and naming the script you'd like

52
00:02:30.610 --> 00:02:31.380
to execute.

53
00:02:31.380 --> 00:02:35.150
Example would be node index dot Js.

54
00:02:35.150 --> 00:02:36.140
In this way,

55
00:02:36.140 --> 00:02:42.310
you're passing a script name to know J s so that node can open that file and process the

56
00:02:42.310 --> 00:02:43.950
JavaScript commands within it,

57
00:02:43.950 --> 00:02:45.790
but it's a bit more complicated.

58
00:02:45.790 --> 00:02:48.260
Met when you invoke the note program.

59
00:02:48.260 --> 00:02:48.920
In this way,

60
00:02:48.920 --> 00:02:52.650
note isn't simply going to pass your drive a script to V eight.

61
00:02:52.650 --> 00:02:56.370
It's first going to initialize a process called the Event Loop,

62
00:02:56.370 --> 00:03:00.360
and then it's going to process the initial parts of your JavaScript file.

63
00:03:00.360 --> 00:03:05.140
And then it's going to start processing the invent loop it initialized earlier.

64
00:03:05.140 --> 00:03:10.890
You can think of the event loop as an infinitely repeating task that starts over Justus

65
00:03:10.890 --> 00:03:14.210
suit as it completes each pass of this task,

66
00:03:14.210 --> 00:03:15.310
or each tick,

67
00:03:15.310 --> 00:03:16.060
as it's called,

68
00:03:16.060 --> 00:03:21.000
consists of no Js checking to see if there's anything else it needs to do.

69
00:03:21.000 --> 00:03:21.440
Now,

70
00:03:21.440 --> 00:03:22.730
you might be saying Wait,

71
00:03:22.730 --> 00:03:27.650
didn't note already process the file at the beginning before it started the loop?

72
00:03:27.650 --> 00:03:28.600
Well,

73
00:03:28.600 --> 00:03:29.460
yes and no.

74
00:03:29.460 --> 00:03:30.800
If you recall,

75
00:03:30.800 --> 00:03:35.180
javascript can include both synchronous and asynchronous behaviors.

76
00:03:35.180 --> 00:03:40.670
Synchronous behaviors are executed and completed by node as soon as they are encountered,

77
00:03:40.670 --> 00:03:45.710
while asynchronous behaviors air simply invoked but not immediately completed.

78
00:03:45.710 --> 00:03:46.770
Instead,

79
00:03:46.770 --> 00:03:49.280
these behaviors just get added to ah que,

80
00:03:49.280 --> 00:03:54.070
which lists everything a synchronous that no Js still has left to do.

81
00:03:54.070 --> 00:03:58.790
The event loop is nodes way of processing that to do list.

82
00:03:58.790 --> 00:04:00.650
With each tick of the loop,

83
00:04:00.650 --> 00:04:03.510
it completes an item or several items on its list.

84
00:04:03.510 --> 00:04:08.930
But those items may very well create further items asynchronous operations that need to be

85
00:04:08.930 --> 00:04:09.990
completed later.

86
00:04:09.990 --> 00:04:12.770
So every time the event loop runs,

87
00:04:12.770 --> 00:04:16.370
the number of items left to complete may just stay the same.

88
00:04:16.370 --> 00:04:17.450
Or it may grow.

89
00:04:17.450 --> 00:04:23.010
If at some point the event loop checks off the final thing it had to do on its to do list,

90
00:04:23.010 --> 00:04:25.070
and there's nothing left for it to do.

91
00:04:25.070 --> 00:04:27.020
The application exits.

92
00:04:27.020 --> 00:04:28.050
That's the end.

93
00:04:28.050 --> 00:04:29.010
If,

94
00:04:29.010 --> 00:04:29.710
however,

95
00:04:29.710 --> 00:04:33.660
each task on the list creates a new task on the lists,

96
00:04:33.660 --> 00:04:38.880
and so the length of the to do list never reaches zero that it's possible for no to run

97
00:04:38.880 --> 00:04:40.620
indefinitely or infinitely,

98
00:04:40.620 --> 00:04:43.160
and never reach a point where it needs to exit.

99
00:04:43.160 --> 00:04:46.320
Many note programs like servers or background workers,

100
00:04:46.320 --> 00:04:46.970
for example,

101
00:04:46.970 --> 00:04:53.000
are designed this way to perpetually create more items on the to do list and never let

102
00:04:53.000 --> 00:04:55.250
their to do list get down to zero.

103
00:04:55.250 --> 00:04:56.230
That way,

104
00:04:56.230 --> 00:04:58.450
the application never dies.

105
00:04:58.450 --> 00:05:03.770
Items that can be added to the to do list include any task that shouldn't be executed

106
00:05:03.770 --> 00:05:04.600
synchronously,

107
00:05:04.600 --> 00:05:10.490
such as those invoked with a call back and those whose execution is scheduled at a later

108
00:05:10.490 --> 00:05:11.000
time,

109
00:05:11.000 --> 00:05:13.000
such as timeouts and intervals.

110
00:05:13.000 --> 00:05:19.010
We call this umbrella of tasks non blocking in many programming languages.

111
00:05:19.010 --> 00:05:20.950
Everything you do is block it.

112
00:05:20.950 --> 00:05:21.730
That is,

113
00:05:21.730 --> 00:05:24.630
if you have a sequence of tasks that need to be performed.

114
00:05:24.630 --> 00:05:28.790
Your single threaded application will perform each task in order.

115
00:05:28.790 --> 00:05:31.350
And while it's executing each task,

116
00:05:31.350 --> 00:05:33.920
it is incapable of doing anything else.

117
00:05:33.920 --> 00:05:36.100
That is what is meant by blocking.

118
00:05:36.100 --> 00:05:38.950
Each task is quote unquote blocking.

119
00:05:38.950 --> 00:05:40.240
If it is occupying,

120
00:05:40.240 --> 00:05:41.790
the resource is of the thread.

121
00:05:41.790 --> 00:05:46.600
And if the application logic will need to be focused on that task at the expense of

122
00:05:46.600 --> 00:05:47.560
anything else,

123
00:05:47.560 --> 00:05:52.890
it might be doing at the time blocking tax and run times with a blocking I oh,

124
00:05:52.890 --> 00:05:54.760
definitely have their place.

125
00:05:54.760 --> 00:05:58.940
If you must perform a sequence of tax in an exact order,

126
00:05:58.940 --> 00:06:03.360
and there's nothing else your thread would rather be doing than there is virtually no

127
00:06:03.360 --> 00:06:05.280
drawback toe a blocking Iot.

128
00:06:05.280 --> 00:06:09.350
But that is often not the case with modern Web applications.

129
00:06:09.350 --> 00:06:13.950
Web ABS often need to handle and process multiple things at a single time.

130
00:06:13.950 --> 00:06:14.870
While you're a P,

131
00:06:14.870 --> 00:06:18.260
I is fetching database results for one user's request.

132
00:06:18.260 --> 00:06:23.480
It must also be simultaneously sending a welcome email to another user and looking up the

133
00:06:23.480 --> 00:06:27.440
Twitter profile of another while charging the credit card of yet another.

134
00:06:27.440 --> 00:06:32.820
So how does a non blocking Io enable an application threat to handle multiple things at the

135
00:06:32.820 --> 00:06:33.690
same time?

136
00:06:33.690 --> 00:06:34.320
Well,

137
00:06:34.320 --> 00:06:37.560
it doesn't no Js is single threat,

138
00:06:37.560 --> 00:06:39.150
although it can spawn on the threads,

139
00:06:39.150 --> 00:06:40.160
which we'll discuss later.

140
00:06:40.160 --> 00:06:41.330
But for argument's sake,

141
00:06:41.330 --> 00:06:46.330
it's best to understand node as having a single thread that can only do one thing at a time

142
00:06:46.330 --> 00:06:46.330
.

143
00:06:46.330 --> 00:06:52.890
The concept of a non blocking Io and the concept of an event loop doesn't allow no to do

144
00:06:52.890 --> 00:06:54.350
multiple things at one time.

145
00:06:54.350 --> 00:06:58.110
It just allows node to schedule things later.

146
00:06:58.110 --> 00:06:59.890
This might sound trivial,

147
00:06:59.890 --> 00:07:02.420
but it's actually a huge deal.

148
00:07:02.420 --> 00:07:07.610
If you take a close look at what modern Web applications actually do when they process a

149
00:07:07.610 --> 00:07:12.840
request the vast majority of the time they aren't actually doing anything.

150
00:07:12.840 --> 00:07:16.240
They're just waiting for some other thing to do something.

151
00:07:16.240 --> 00:07:17.750
And while they're waiting,

152
00:07:17.750 --> 00:07:19.750
they're blocked from doing anything else.

153
00:07:19.750 --> 00:07:20.340
For example,

154
00:07:20.340 --> 00:07:25.150
let's say you've created an A P I in a language or platform that only has a single threaded

155
00:07:25.150 --> 00:07:29.020
or blocking io and doesn't allow any asynchronous calls.

156
00:07:29.020 --> 00:07:29.380
Now,

157
00:07:29.380 --> 00:07:32.340
let's say a post request comes into the A P I.

158
00:07:32.340 --> 00:07:37.190
And that request contains the information of a new user and that user data needs to be

159
00:07:37.190 --> 00:07:38.250
written to the database.

160
00:07:38.250 --> 00:07:40.390
Your A P I parses the request,

161
00:07:40.390 --> 00:07:41.450
gets the user data,

162
00:07:41.450 --> 00:07:46.880
then sends the data to the DB waits for the DB to respond while your code is waiting for

163
00:07:46.880 --> 00:07:48.390
the database to respond,

164
00:07:48.390 --> 00:07:49.640
it is blocked.

165
00:07:49.640 --> 00:07:51.380
It's not doing anything,

166
00:07:51.380 --> 00:07:53.140
but since the platform has a blocking,

167
00:07:53.140 --> 00:07:54.060
I owe it.

168
00:07:54.060 --> 00:07:55.880
Can't do anything else.

169
00:07:55.880 --> 00:08:00.180
There might be many other things that your baby I could be doing and wants to do at that

170
00:08:00.180 --> 00:08:05.310
moment except and respond to different requests coming in from another user or perform some

171
00:08:05.310 --> 00:08:06.650
background task.

172
00:08:06.650 --> 00:08:12.930
But it can't not until the database response and much of your back end system likely acts

173
00:08:12.930 --> 00:08:13.530
this way.

174
00:08:13.530 --> 00:08:16.340
It contacts other services by rest,

175
00:08:16.340 --> 00:08:21.750
ful AP eyes and waits for them to respond or rights information to the database it performs

176
00:08:21.750 --> 00:08:21.750
,

177
00:08:21.750 --> 00:08:23.680
reads and writes to the disk.

178
00:08:23.680 --> 00:08:27.380
While it's doing these things in waiting for its counter party to respond,

179
00:08:27.380 --> 00:08:29.500
it is blocked from doing anything else,

180
00:08:29.500 --> 00:08:31.870
and it's stuck in a state of idleness.

181
00:08:31.870 --> 00:08:36.200
Non blocking Iose and event loops are the answer to this issue.

182
00:08:36.200 --> 00:08:40.640
You see when notice faced with processing the same a P I request,

183
00:08:40.640 --> 00:08:42.520
it will take in the user data,

184
00:08:42.520 --> 00:08:45.270
parse it synchronously just like any other a p I.

185
00:08:45.270 --> 00:08:46.220
But then,

186
00:08:46.220 --> 00:08:49.960
when it needs to send that information to the database it was.

187
00:08:49.960 --> 00:08:52.120
Send off the information to the DB,

188
00:08:52.120 --> 00:08:54.540
then put an item on its to do list,

189
00:08:54.540 --> 00:08:56.930
saying whenever the database responds,

190
00:08:56.930 --> 00:08:58.250
process the response.

191
00:08:58.250 --> 00:08:58.980
So now,

192
00:08:58.980 --> 00:09:01.350
while the database is processing the data,

193
00:09:01.350 --> 00:09:06.640
the no Js thread will move on to its other tasks process other user requests,

194
00:09:06.640 --> 00:09:07.300
etcetera.

195
00:09:07.300 --> 00:09:09.580
When the database finally responds.

196
00:09:09.580 --> 00:09:11.720
The event Luke processor will see.

197
00:09:11.720 --> 00:09:12.010
Oh,

198
00:09:12.010 --> 00:09:16.410
I just got a response from the database and I have a to do list item saying to send that

199
00:09:16.410 --> 00:09:18.200
response to this function over here.

200
00:09:18.200 --> 00:09:19.450
So I'm going to do that now.

201
00:09:19.450 --> 00:09:20.780
In this way,

202
00:09:20.780 --> 00:09:25.990
no Js is continually getting out of its own way when encounters anything that would

203
00:09:25.990 --> 00:09:29.740
normally require blocking the thread and waiting around doing nothing.

204
00:09:29.740 --> 00:09:35.600
Note is designed to move that task out of the way and then do it at some point when it has

205
00:09:35.600 --> 00:09:36.450
downtime.

206
00:09:36.450 --> 00:09:40.070
Note is simply much better at managing its own time.

207
00:09:40.070 --> 00:09:43.560
It's constantly re prioritizing the tasks in front of it,

208
00:09:43.560 --> 00:09:48.480
so it's never sitting around waiting at a time when it could actually be doing something.

209
00:09:48.480 --> 00:09:50.080
Many of the note AP eyes,

210
00:09:50.080 --> 00:09:51.850
such as writing to disk,

211
00:09:51.850 --> 00:09:54.620
are designed a synchronously in this way.

212
00:09:54.620 --> 00:09:56.220
And as in no Js developer,

213
00:09:56.220 --> 00:10:00.650
you're encouraged to design your programs around this idea as well.

214
00:10:00.650 --> 00:10:05.710
So now you understand how node executes the tasks inside of a javascript file.

215
00:10:05.710 --> 00:10:10.180
It works with V A to decide which function should be executed in at what moment and in

216
00:10:10.180 --> 00:10:14.820
which order it interacts with third party counter parties like the discord databases and AP

217
00:10:14.820 --> 00:10:15.150
eyes,

218
00:10:15.150 --> 00:10:17.780
but never since around waiting for them to respond.

219
00:10:17.780 --> 00:10:18.360
Instead,

220
00:10:18.360 --> 00:10:20.450
it keeps itself busy with other tasks,

221
00:10:20.450 --> 00:10:22.780
while counter parties air taking their time to respond.

222
00:10:22.780 --> 00:10:29.190
The idea of non blocking Io asynchronous functions and the event loop all revolve around

223
00:10:29.190 --> 00:10:30.210
this concept.

224
00:10:30.210 --> 00:10:36.750
Now that we understand that we need to get a handle on how node runs an entire application

225
00:10:36.750 --> 00:10:38.660
split across many files.

226
00:10:38.660 --> 00:10:39.220
After all,

227
00:10:39.220 --> 00:10:41.010
when you start a note application,

228
00:10:41.010 --> 00:10:44.760
you don't specify a set of files or a directory of files.

229
00:10:44.760 --> 00:10:49.480
You actually only specify a single file that needs to be executed.

230
00:10:49.480 --> 00:10:52.580
This may seem counterintuitive because,

231
00:10:52.580 --> 00:10:53.330
as you know,

232
00:10:53.330 --> 00:10:57.710
applications are often made of dozens or hundreds or thousands of individual files,

233
00:10:57.710 --> 00:10:58.830
not just one.

234
00:10:58.830 --> 00:11:05.010
So how does node start an entire application when all you tell it is to start one file?

235
00:11:05.010 --> 00:11:08.350
This is where nodes module system comes into play.

236
00:11:08.350 --> 00:11:09.880
If you've used note before,

237
00:11:09.880 --> 00:11:14.050
you've likely encountered require or import statements like these,

238
00:11:14.050 --> 00:11:16.720
usually at the top of source files.

239
00:11:16.720 --> 00:11:20.750
Here's an example within node require and import,

240
00:11:20.750 --> 00:11:21.260
which R.

241
00:11:21.260 --> 00:11:21.480
E.

242
00:11:21.480 --> 00:11:26.260
S five and s six syntax respectively do virtually the same thing.

243
00:11:26.260 --> 00:11:32.950
They grab a resource from elsewhere and allow you to assign the contents off that resource

244
00:11:32.950 --> 00:11:35.750
to a variable or define it as a constant.

245
00:11:35.750 --> 00:11:36.780
Similarly,

246
00:11:36.780 --> 00:11:39.730
if you've looked at a node package or module before,

247
00:11:39.730 --> 00:11:45.580
you've likely seen that it contains a module dot exports or a export declaration.

248
00:11:45.580 --> 00:11:53.070
This line declares what content should be sent to another file when that file imports or

249
00:11:53.070 --> 00:11:54.810
requires this one.

250
00:11:54.810 --> 00:11:55.750
For example,

251
00:11:55.750 --> 00:12:00.380
File A is an object containing a function called food file.

252
00:12:00.380 --> 00:12:08.760
Be wants to use file a fu function so it imports or requires all of file A and A signs its

253
00:12:08.760 --> 00:12:12.640
content to a variable called My imported Functions.

254
00:12:12.640 --> 00:12:14.130
Now file aces.

255
00:12:14.130 --> 00:12:17.340
Full function will be available to use within file.

256
00:12:17.340 --> 00:12:21.750
Be by calling my imported functions dot food.

257
00:12:21.750 --> 00:12:24.510
As you browse through a no Js application,

258
00:12:24.510 --> 00:12:28.200
you'll see import require statements all over the place.

259
00:12:28.200 --> 00:12:35.750
These Air notes way of letting each file say which other files contents it needs access to

260
00:12:35.750 --> 00:12:35.750
.

261
00:12:35.750 --> 00:12:37.260
When you zoom out.

262
00:12:37.260 --> 00:12:41.600
All of these require or import statements form a bit of a tree.

263
00:12:41.600 --> 00:12:45.450
The index dot Js file requires the controller file.

264
00:12:45.450 --> 00:12:47.960
The controller file requires the lib file.

265
00:12:47.960 --> 00:12:53.690
The lib file requires the sdk of some database and that SdK require several helpers,

266
00:12:53.690 --> 00:12:54.400
etcetera,

267
00:12:54.400 --> 00:12:55.070
etcetera,

268
00:12:55.070 --> 00:12:55.700
etcetera.

269
00:12:55.700 --> 00:12:57.940
So back to the topic at hand.

270
00:12:57.940 --> 00:12:58.880
When you start it.

271
00:12:58.880 --> 00:13:05.630
No Js application by invoking a single file node simply starts reading through that file

272
00:13:05.630 --> 00:13:09.100
looks at which other files it requires been,

273
00:13:09.100 --> 00:13:14.690
reads those looks through which files they require and reads in those other ones,

274
00:13:14.690 --> 00:13:21.010
and continues all the way through all of the files that the entire application needs until

275
00:13:21.010 --> 00:13:24.570
it has read the entire application into memory.

276
00:13:24.570 --> 00:13:25.940
So in this way,

277
00:13:25.940 --> 00:13:30.190
if you haven't sdk or library or package sitting in your applications directory.

278
00:13:30.190 --> 00:13:35.770
But none of the files in your application ever called that sdk no drill treated like it

279
00:13:35.770 --> 00:13:36.670
doesn't exist,

280
00:13:36.670 --> 00:13:39.820
and it won't read it into memory when the application starts.

281
00:13:39.820 --> 00:13:42.950
So let's go back to the original question we were trying to answer.

282
00:13:42.950 --> 00:13:46.430
What doesn't node Script processor do now?

283
00:13:46.430 --> 00:13:51.030
We can see it does a few things when you call node index dot Js.

284
00:13:51.030 --> 00:13:54.780
You're passing the name of the index dot Js file to note,

285
00:13:54.780 --> 00:13:56.680
and it will be getting a reading it,

286
00:13:56.680 --> 00:14:03.070
and then it will read in all the other files by traversing the dependency tree codified in

287
00:14:03.070 --> 00:14:04.050
those files.

288
00:14:04.050 --> 00:14:11.220
And then it will begin executing the synchronous tasks called in those files and then start

289
00:14:11.220 --> 00:14:15.050
processing all the asynchronous tasks by repeating its event.

290
00:14:15.050 --> 00:14:18.920
Loop over and over until it has nothing to do.

291
00:14:18.920 --> 00:14:22.740
Isn't waiting for any responses that has nothing scheduled for the future,

292
00:14:22.740 --> 00:14:25.450
and at that point it will exit.

293
00:14:25.450 --> 00:14:31.250
Now that you understand the script processor understanding the rebel read evil print loop

294
00:14:31.250 --> 00:14:32.350
should be easy.

295
00:14:32.350 --> 00:14:36.970
The Ripple works much like the console within a Web browser.

296
00:14:36.970 --> 00:14:43.160
It is a way to define an execute JavaScript code against the V eight engine in real time

297
00:14:43.160 --> 00:14:46.320
when you enter the node command in your terminal,

298
00:14:46.320 --> 00:14:49.370
but don't supply a file name for no to execute.

299
00:14:49.370 --> 00:14:51.700
Note will start the rappel automatically.

300
00:14:51.700 --> 00:14:54.780
You will see a cursor marker appear in your terminal,

301
00:14:54.780 --> 00:14:59.070
which tells you that the rebel has started the our phase of its process.

302
00:14:59.070 --> 00:15:01.330
Reading input from you.

303
00:15:01.330 --> 00:15:02.450
So initially,

304
00:15:02.450 --> 00:15:07.480
all the rebel is going to do is start the event loop in the background than sit and wait

305
00:15:07.480 --> 00:15:09.750
for you to write something and press return.

306
00:15:09.750 --> 00:15:10.500
Here,

307
00:15:10.500 --> 00:15:14.380
you can write any statements that you could write in a no Js JavaScript file.

308
00:15:14.380 --> 00:15:15.630
The caveat is,

309
00:15:15.630 --> 00:15:20.320
line breaks within strings may need to be escaped with a backslash before you press return

310
00:15:20.320 --> 00:15:20.320
,

311
00:15:20.320 --> 00:15:21.550
but besides that,

312
00:15:21.550 --> 00:15:23.920
you can do anything you want within the rebel.

313
00:15:23.920 --> 00:15:27.450
You could define variables and manipulate them or add them together.

314
00:15:27.450 --> 00:15:29.650
You can define and execute functions,

315
00:15:29.650 --> 00:15:33.100
and you can even define and execute a synchronous processes.

316
00:15:33.100 --> 00:15:36.190
The ripple stages are just what they sound like.

317
00:15:36.190 --> 00:15:44.030
It moves from our reading input from U T E executing whatever you wrote to pee printing its

318
00:15:44.030 --> 00:15:48.750
response or the return values of your functions or whatever your code said should be loved

319
00:15:48.750 --> 00:15:48.750
.

320
00:15:48.750 --> 00:15:50.430
And then it does L.

321
00:15:50.430 --> 00:15:53.930
It loops back up to the top and repeats that process again.

322
00:15:53.930 --> 00:15:57.520
All of no Js is made available to you within the command line,

323
00:15:57.520 --> 00:16:00.850
including requiring and importing modules.

324
00:16:00.850 --> 00:16:03.570
So that is how node works.

325
00:16:03.570 --> 00:16:06.370
Now let's take a closer look at a sample,

326
00:16:06.370 --> 00:16:10.850
know J s application and walk you through the pieces that you see there

