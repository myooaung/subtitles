WEBVTT
ï»¿1
00:00:00.000 --> 00:00:09.150
as we mentioned in the section when we were building that CLI application note actually

2
00:00:09.150 --> 00:00:15.540
includes a stand alone module called Rebel that makes building command line APS very,

3
00:00:15.540 --> 00:00:16.380
very easy.

4
00:00:16.380 --> 00:00:23.500
We chose not to use it in that section because I wanted to show how read line and console

5
00:00:23.500 --> 00:00:26.040
log and could be used instead.

6
00:00:26.040 --> 00:00:32.580
But in this lecture will go over rappel and you'll see how easy it is to implement a CLI.

7
00:00:32.580 --> 00:00:42.210
So I'm going to create a new file touch miscellaneous slash rep O r e p l dot Js Inside

8
00:00:42.210 --> 00:00:42.810
this file,

9
00:00:42.810 --> 00:00:47.850
I'm going to say that this is a example Ripple server.

10
00:00:47.850 --> 00:00:54.150
Take in the word phase and log out Buzz.

11
00:00:54.150 --> 00:00:56.420
We're just gonna have one dependency.

12
00:00:56.420 --> 00:01:02.070
Raffle equals require rebel to remind you,

13
00:01:02.070 --> 00:01:05.450
rappel equals read evil print loop.

14
00:01:05.450 --> 00:01:11.070
The rebel in node is what you get when you start up node with just the node command.

15
00:01:11.070 --> 00:01:20.580
So we're in the node rectal right now and we can say things like far food equals one food

16
00:01:20.580 --> 00:01:25.030
Times two and we'll see to that's built into node.

17
00:01:25.030 --> 00:01:31.150
And this rebel module exposes all the low level AP,

18
00:01:31.150 --> 00:01:34.040
I said allow you to build your own rebel instead.

19
00:01:34.040 --> 00:01:42.310
So we worked for It's going to have to start the rifle and we'll do that by calling Ripple

20
00:01:42.310 --> 00:01:42.310
.

21
00:01:42.310 --> 00:01:46.650
Start with the start command.

22
00:01:46.650 --> 00:01:48.710
We're actually going to pass it an object,

23
00:01:48.710 --> 00:01:51.780
and this object is going to be fairly complex.

24
00:01:51.780 --> 00:01:57.200
Is going to contain everything that we need to configure the application.

25
00:01:57.200 --> 00:02:02.120
We're going to say that the prompt is going to equal in our case,

26
00:02:02.120 --> 00:02:03.510
a greater than sign,

27
00:02:03.510 --> 00:02:06.080
just like the read line module.

28
00:02:06.080 --> 00:02:08.450
You can configure whatever prompt simple you want.

29
00:02:08.450 --> 00:02:15.350
We're going to say that evil and then this is the evaluation function for incoming inputs.

30
00:02:15.350 --> 00:02:20.560
So any input that comes in is automatically gonna get passed to this evil function.

31
00:02:20.560 --> 00:02:24.090
It's going to equal and anonymous function that takes in the string.

32
00:02:24.090 --> 00:02:29.580
We're just gonna know that this is evaluation function.

33
00:02:29.580 --> 00:02:33.800
And then with that string,

34
00:02:33.800 --> 00:02:37.520
it can do whatever we want for our case.

35
00:02:37.520 --> 00:02:48.970
We just want to lock out that we are at the evaluation stage and that we received strength

36
00:02:48.970 --> 00:02:59.950
next if the user said fizz se buzz back to them.

37
00:02:59.950 --> 00:03:12.740
And that's a simple as checking if the string includes fist.

38
00:03:12.740 --> 00:03:15.270
So if the index of phase is greater than negative one.

39
00:03:15.270 --> 00:03:18.480
We're gonna log out Buzz.

40
00:03:18.480 --> 00:03:22.480
So I'm just going to start up this reptile now.

41
00:03:22.480 --> 00:03:24.950
Node miscellaneous,

42
00:03:24.950 --> 00:03:31.550
rappel dot Js You can see what brought to a command prompt.

43
00:03:31.550 --> 00:03:35.550
If I write in a bunch of random strings,

44
00:03:35.550 --> 00:03:39.420
we get to the evaluation stage and we see that,

45
00:03:39.420 --> 00:03:42.590
but nothing else happens Now I can write something else.

46
00:03:42.590 --> 00:03:44.480
I can write fizz,

47
00:03:44.480 --> 00:03:48.050
and we can see it got to the evaluation stage.

48
00:03:48.050 --> 00:03:49.710
It knew we wrote phase,

49
00:03:49.710 --> 00:03:54.550
and then it wrote the word buzz back to me because this logic got called.

50
00:03:54.550 --> 00:03:56.320
As you can see,

51
00:03:56.320 --> 00:04:00.830
a whole bunch of thes scaffolding that we had to write when we were using the re line

52
00:04:00.830 --> 00:04:03.890
function doesn't need to be included.

53
00:04:03.890 --> 00:04:05.500
If you're using rappel instead,

54
00:04:05.500 --> 00:04:10.750
telling it to prompt again after it has evaluated the strings doesn't need to happen.

55
00:04:10.750 --> 00:04:12.690
Creating your own wiring toe.

56
00:04:12.690 --> 00:04:16.260
Pass the incoming lines to an evaluation function.

57
00:04:16.260 --> 00:04:17.460
It doesn't need to happen.

58
00:04:17.460 --> 00:04:20.990
You can divine your evaluation function right here.

59
00:04:20.990 --> 00:04:23.810
This is just in many ways easier to use,

60
00:04:23.810 --> 00:04:28.440
and there are a whole bunch of other built in parts to rappel that makes building a command

61
00:04:28.440 --> 00:04:30.010
line application even easier.

62
00:04:30.010 --> 00:04:30.840
So with that,

63
00:04:30.840 --> 00:04:33.960
we can kill this app and move onto the next lecture

