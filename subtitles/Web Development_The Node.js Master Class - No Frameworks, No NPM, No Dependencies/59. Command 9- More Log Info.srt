1
00:00:00,000 --> 00:00:04,390
in this lecture,

2
00:00:04,390 --> 00:00:08,570
we're going to fill out the responder for the more log info command.

3
00:00:08,570 --> 00:00:11,250
Let's take a look at the man page for that command.

4
00:00:11,250 --> 00:00:24,800
We can see the more log info works just like more check info and more user info.

5
00:00:24,800 --> 00:00:26,150
One of the main differences,

6
00:00:26,150 --> 00:00:26,460
though,

7
00:00:26,460 --> 00:00:32,600
is that more log info allows you to put in the file name of an existing compressed log,

8
00:00:32,600 --> 00:00:36,960
and then it will decompress it for you and spit out the Jason.

9
00:00:36,960 --> 00:00:41,240
Since we know we're going to be dealing with parsing these Jason strings,

10
00:00:41,240 --> 00:00:46,240
we're going to need the help for library that we created a while back.

11
00:00:46,240 --> 00:00:48,990
So let's include it up in our dependencies.

12
00:00:48,990 --> 00:00:53,170
Far helpers equals require dot,

13
00:00:53,170 --> 00:00:55,260
slash helpers.

14
00:00:55,260 --> 00:00:56,490
Now,

15
00:00:56,490 --> 00:00:59,300
let's go back and fill out this responder.

16
00:00:59,300 --> 00:01:05,910
We're going to start by using the more check info function as a base.

17
00:01:05,910 --> 00:01:07,230
So we're gonna pace that in here.

18
00:01:07,230 --> 00:01:13,940
The first thing we're going to do is get the log file name from the string.

19
00:01:13,940 --> 00:01:15,130
What?

20
00:01:15,130 --> 00:01:17,560
We're still going to split on dash dash.

21
00:01:17,560 --> 00:01:19,100
So rather than check,

22
00:01:19,100 --> 00:01:19,550
I d.

23
00:01:19,550 --> 00:01:22,010
We're going to get log file.

24
00:01:22,010 --> 00:01:25,630
Name is the second element in the array after the split,

25
00:01:25,630 --> 00:01:28,660
and we're going to continue if there is a log file name,

26
00:01:28,660 --> 00:01:33,250
but the rest of this is going to be different so we can get rid of everything in here.

27
00:01:33,250 --> 00:01:37,210
We want to start by putting in a vertical space,

28
00:01:37,210 --> 00:01:44,440
and then we want to decompress the log file.

29
00:01:44,440 --> 00:01:47,750
So we want to say logs decompress.

30
00:01:47,750 --> 00:01:52,540
Remember the decompression function that we wrote here?

31
00:01:52,540 --> 00:01:53,910
But we never really tried out.

32
00:01:53,910 --> 00:01:55,050
We're trying it out now,

33
00:01:55,050 --> 00:01:56,850
so we're gonna call logs,

34
00:01:56,850 --> 00:01:57,780
decompress,

35
00:01:57,780 --> 00:02:07,850
and they were gonna pass it a log file name and expect back an error and string data,

36
00:02:07,850 --> 00:02:11,990
which should just be the string of the log.

37
00:02:11,990 --> 00:02:19,500
If there is no air and there is string data we want to continue otherwise will ignore it.

38
00:02:19,500 --> 00:02:27,860
The first thing we need to do he's realized that the log is a whole bunch of individual

39
00:02:27,860 --> 00:02:31,440
Jason lines upended after each other,

40
00:02:31,440 --> 00:02:34,000
went after the other with new line characters.

41
00:02:34,000 --> 00:02:35,300
And so,

42
00:02:35,300 --> 00:02:38,040
in order to read out the output of this file,

43
00:02:38,040 --> 00:02:40,830
we need to first split it up line by line.

44
00:02:40,830 --> 00:02:47,450
So we're going to split into lines which will put it into an array.

45
00:02:47,450 --> 00:02:55,960
We're going to say that this array are are is string data split and we're going to split on

46
00:02:55,960 --> 00:03:03,750
this slash n new line character that's going to give us an array of strings.

47
00:03:03,750 --> 00:03:15,790
So we're going to say array for each Jason String because these air still individual Jason

48
00:03:15,790 --> 00:03:17,440
strings Now,

49
00:03:17,440 --> 00:03:23,850
for each one we want to create an object from that string line.

50
00:03:23,850 --> 00:03:25,130
So far,

51
00:03:25,130 --> 00:03:27,340
log object equals helpers.

52
00:03:27,340 --> 00:03:28,060
This is where the help is.

53
00:03:28,060 --> 00:03:28,780
Class comes in,

54
00:03:28,780 --> 00:03:31,640
parse Jason toe object,

55
00:03:31,640 --> 00:03:39,230
and we're going to pass it the Jason String if we got an object back from that line.

56
00:03:39,230 --> 00:03:54,590
So if log object and the string of five version of that object does not equal an empty

57
00:03:54,590 --> 00:03:55,170
object,

58
00:03:55,170 --> 00:03:56,190
then we want to continue.

59
00:03:56,190 --> 00:04:02,600
Now we want to use console dot de ir because we want to pretty print out this object.

60
00:04:02,600 --> 00:04:10,950
We're gonna pass it log object and the configuration object telling it that colors car True

61
00:04:10,950 --> 00:04:10,950
.

62
00:04:10,950 --> 00:04:13,100
Lastly,

63
00:04:13,100 --> 00:04:17,080
we wanted to add a cli vertical space.

64
00:04:17,080 --> 00:04:22,520
You know this test out this function,

65
00:04:22,520 --> 00:04:26,950
which will in away test out this decompression function at the same time,

66
00:04:26,950 --> 00:04:28,850
we're gonna start the at backup.

67
00:04:28,850 --> 00:04:33,650
We're gonna first list blog's.

68
00:04:33,650 --> 00:04:39,450
Then we're going to take one of these log file names was gonna take the one at the top,

69
00:04:39,450 --> 00:04:42,620
and I'm going to say more glogg info,

70
00:04:42,620 --> 00:04:45,760
Dash dash and then that file name.

71
00:04:45,760 --> 00:04:49,270
As you can see,

72
00:04:49,270 --> 00:04:53,390
it spat out the UN compressed data from that walk.

73
00:04:53,390 --> 00:04:57,970
If we look up this log file name in our file system,

74
00:04:57,970 --> 00:05:01,700
this is a base 64 G zip file.

75
00:05:01,700 --> 00:05:07,220
So our decompression function must be working fine because it's getting the Jason out of

76
00:05:07,220 --> 00:05:08,560
here now.

77
00:05:08,560 --> 00:05:09,410
In this case,

78
00:05:09,410 --> 00:05:13,360
there was only one line inside of this compressed log,

79
00:05:13,360 --> 00:05:16,320
so let's pick a larger log to use.

80
00:05:16,320 --> 00:05:18,350
I'm going to use this file name,

81
00:05:18,350 --> 00:05:21,280
which I happen to know is a much larger file.

82
00:05:21,280 --> 00:05:25,260
I'm gonna enter the command again,

83
00:05:25,260 --> 00:05:27,050
More log info,

84
00:05:27,050 --> 00:05:27,380
dash,

85
00:05:27,380 --> 00:05:27,830
dash,

86
00:05:27,830 --> 00:05:34,360
this file name and we can see that it has three separate lines which represent the three

87
00:05:34,360 --> 00:05:37,130
different lines inside of that file.

88
00:05:37,130 --> 00:05:38,220
We can see that it was,

89
00:05:38,220 --> 00:05:38,640
of course,

90
00:05:38,640 --> 00:05:42,460
for the same check getting checked over and over again.

91
00:05:42,460 --> 00:05:47,500
And each time the state was up and there was no need for an alert.

92
00:05:47,500 --> 00:05:52,290
So that is the complete functionality for our cli tool.

93
00:05:52,290 --> 00:05:59,450
We've created several different commands that an admin might use in order to find out more

94
00:05:59,450 --> 00:06:05,380
information about the system or about the users or about the checks or any of the events

95
00:06:05,380 --> 00:06:07,290
that have happened in the past through the logs.

96
00:06:07,290 --> 00:06:13,210
And now we can move on to the section review to talk about all the different modules that

97
00:06:13,210 --> 00:06:14,540
we used in this section.

