1
00:00:00,000 --> 00:00:07,130
Now that we have a library in place for manipulating data,

2
00:00:07,130 --> 00:00:10,950
we can go ahead and create our first real service outside of the ping service,

3
00:00:10,950 --> 00:00:13,470
and that service is going to be users.

4
00:00:13,470 --> 00:00:15,680
Normally,

5
00:00:15,680 --> 00:00:19,510
we would just go ahead and add the handlers down here.

6
00:00:19,510 --> 00:00:21,750
But these handlers air going to be pretty big.

7
00:00:21,750 --> 00:00:23,570
They're going to be creating users,

8
00:00:23,570 --> 00:00:24,390
reading users,

9
00:00:24,390 --> 00:00:26,040
updating them and leading them,

10
00:00:26,040 --> 00:00:29,560
and that's a lot throw into one file.

11
00:00:29,560 --> 00:00:35,640
So I think what it's worth doing at this point is re factoring a bit and moving the

12
00:00:35,640 --> 00:00:41,570
handlers from here within the index diet Js to their own file within the lip directory.

13
00:00:41,570 --> 00:00:50,680
So let's go ahead and create a new file touch lib slash handlers dot Js.

14
00:00:50,680 --> 00:00:54,740
Now that file exists in the lip directory,

15
00:00:54,740 --> 00:01:00,840
and we're going to move all of this stuff into that one.

16
00:01:00,840 --> 00:01:03,500
I'm just gonna paste it here from now,

17
00:01:03,500 --> 00:01:08,770
and we'll clean it up in a second back to the index dot Js file.

18
00:01:08,770 --> 00:01:14,280
We still need the handlers defined because the router is still in this file,

19
00:01:14,280 --> 00:01:16,390
so we need to know what the handlers are.

20
00:01:16,390 --> 00:01:24,740
So up here we are going to require that new file that we just created far handlers equals

21
00:01:24,740 --> 00:01:25,650
require.

22
00:01:25,650 --> 00:01:31,590
And then we're just going to walk up live directory handlers.

23
00:01:31,590 --> 00:01:32,950
Okay,

24
00:01:32,950 --> 00:01:33,660
Now,

25
00:01:33,660 --> 00:01:36,090
let's go back into that file and clean it up a little bit.

26
00:01:36,090 --> 00:01:39,940
So we're going to say with a big comment at the top,

27
00:01:39,940 --> 00:01:42,750
These are the request handlers.

28
00:01:42,750 --> 00:01:48,050
Okay,

29
00:01:48,050 --> 00:01:52,250
Now we're gonna have some dependencies,

30
00:01:52,250 --> 00:01:55,460
which we don't need to you fill in yet,

31
00:01:55,460 --> 00:01:56,550
but that's where they will go.

32
00:01:56,550 --> 00:02:00,240
And we want to define all the handlers as we doing.

33
00:02:00,240 --> 00:02:02,020
And lastly,

34
00:02:02,020 --> 00:02:07,150
we want to export all of the handlers at the very bottom.

35
00:02:07,150 --> 00:02:17,390
Okay,

36
00:02:17,390 --> 00:02:18,060
Now,

37
00:02:18,060 --> 00:02:19,690
everything else works exactly the same.

38
00:02:19,690 --> 00:02:22,720
Now that we re factored,

39
00:02:22,720 --> 00:02:29,490
we can go ahead and start adding on more complicated handlers for this new route called

40
00:02:29,490 --> 00:02:30,000
users.

41
00:02:30,000 --> 00:02:32,290
So in the index dot Js file,

42
00:02:32,290 --> 00:02:37,460
the first thing I'm gonna do is match up a new path called users.

43
00:02:37,460 --> 00:02:42,150
Two handlers dot users.

44
00:02:42,150 --> 00:02:47,550
Now we need to go back to handlers and make sure that this path exists.

45
00:02:47,550 --> 00:02:54,950
Somebody create a new object for users indemnifying handlers that users,

46
00:02:54,950 --> 00:02:57,470
and this is going to be a function that,

47
00:02:57,470 --> 00:02:58,300
just like the other ones,

48
00:02:58,300 --> 00:03:00,950
takes in a data object and call back.

49
00:03:00,950 --> 00:03:09,450
But what this function is going to do is actually figure out which method you're requesting

50
00:03:09,450 --> 00:03:09,450
.

51
00:03:09,450 --> 00:03:15,890
Figure out that's when the acceptable methods and then pass it along to some sub handlers.

52
00:03:15,890 --> 00:03:24,990
So I'm going to list out the acceptable methods for the users route,

53
00:03:24,990 --> 00:03:28,850
and that's going to be post okay,

54
00:03:28,850 --> 00:03:37,360
put and elite for this round.

55
00:03:37,360 --> 00:03:38,980
We don't accept anything else.

56
00:03:38,980 --> 00:03:48,660
So we want to say if the acceptable methods index of the data object that we're getting

57
00:03:48,660 --> 00:03:49,360
method.

58
00:03:49,360 --> 00:03:50,250
So in other words,

59
00:03:50,250 --> 00:03:55,850
if data method exists within the acceptable methods array,

60
00:03:55,850 --> 00:04:07,540
then we want to call handlers don't underscore users.

61
00:04:07,540 --> 00:04:18,080
And we want to call specifically data method that we want to pass along data and call back

62
00:04:18,080 --> 00:04:18,080
.

63
00:04:18,080 --> 00:04:22,550
And if that does not exist,

64
00:04:22,550 --> 00:04:25,410
we just want to call back four or five,

65
00:04:25,410 --> 00:04:28,570
which is the http status code for method not allowed.

66
00:04:28,570 --> 00:04:31,660
Now you're probably saying what is underscore users,

67
00:04:31,660 --> 00:04:34,030
and what do you calling their that stuff?

68
00:04:34,030 --> 00:04:35,900
We have a defined yet by convention.

69
00:04:35,900 --> 00:04:41,400
I'm just going to create this thing called underscore users to denote the fact that these

70
00:04:41,400 --> 00:04:45,350
are kind of private methods that are used by the users,

71
00:04:45,350 --> 00:04:50,650
Handler and it's not really something that someone calling this library would use directly

72
00:04:50,650 --> 00:04:50,650
.

73
00:04:50,650 --> 00:04:57,500
So I'm gonna create a container for the users sub methods,

74
00:04:57,500 --> 00:05:02,710
And that's gonna be handlers underscore you choose.

75
00:05:02,710 --> 00:05:05,660
And that's just an object on that object.

76
00:05:05,660 --> 00:05:09,240
I'm going to create handlers,

77
00:05:09,240 --> 00:05:09,590
users,

78
00:05:09,590 --> 00:05:10,800
post handlers,

79
00:05:10,800 --> 00:05:12,150
users get hamburgers,

80
00:05:12,150 --> 00:05:13,910
users put and delete.

81
00:05:13,910 --> 00:05:19,080
So let's start with post users post.

82
00:05:19,080 --> 00:05:23,580
We're gonna call it handlers,

83
00:05:23,580 --> 00:05:26,750
underscore users dot post,

84
00:05:26,750 --> 00:05:31,550
and it's going to accept in the same thing as anything else that it's getting from appear

85
00:05:31,550 --> 00:05:38,840
data and a call back All right,

86
00:05:38,840 --> 00:05:40,360
before we feel that in,

87
00:05:40,360 --> 00:05:57,770
Let's go ahead and create the scaffolding for the other three users get users put and users

88
00:05:57,770 --> 00:06:02,500
do it so you can see how this works.

89
00:06:02,500 --> 00:06:04,120
The request comes in.

90
00:06:04,120 --> 00:06:09,380
It says this post get put or delete it checks to see that it is one of those four,

91
00:06:09,380 --> 00:06:10,160
and if it is,

92
00:06:10,160 --> 00:06:14,050
it passes it along to the respective place where it needs to go.

93
00:06:14,050 --> 00:06:20,020
If we wanted all posts toe act just like put so we wanted gets Tau AC elect elites.

94
00:06:20,020 --> 00:06:20,770
For some reason,

95
00:06:20,770 --> 00:06:22,700
there would be no reason to separate these out,

96
00:06:22,700 --> 00:06:23,430
but for us,

97
00:06:23,430 --> 00:06:29,130
the logic that happens when you post T users route is gonna be very different than when you

98
00:06:29,130 --> 00:06:30,400
put to the users route.

99
00:06:30,400 --> 00:06:33,350
So we want to make sure that these handlers are all separate.

100
00:06:33,350 --> 00:06:38,850
So now that start filling in these handlers before I do,

101
00:06:38,850 --> 00:06:42,480
I just want to write a note to myself about what I'm doing here.

102
00:06:42,480 --> 00:06:45,080
Specifically,

103
00:06:45,080 --> 00:06:45,920
What are they required?

104
00:06:45,920 --> 00:06:46,950
Fields for us.

105
00:06:46,950 --> 00:06:47,850
It's first name,

106
00:06:47,850 --> 00:06:49,850
last name,

107
00:06:49,850 --> 00:06:55,750
phone password and a 1,000,000,000 code to US agreement.

108
00:06:55,750 --> 00:07:00,980
Is there any optional data pass along?

109
00:07:00,980 --> 00:07:01,350
You know,

110
00:07:01,350 --> 00:07:02,750
all right,

111
00:07:02,750 --> 00:07:06,510
now I have those just to guide me while I'm writing this.

112
00:07:06,510 --> 00:07:07,120
Now,

113
00:07:07,120 --> 00:07:10,990
I got to do some of the tedious sanity checking that you always have to do.

114
00:07:10,990 --> 00:07:22,130
Check that all required fields are filled out.

115
00:07:22,130 --> 00:07:29,420
What we do here is check that the user gave us the payload in the structure that we require

116
00:07:29,420 --> 00:07:29,420
.

117
00:07:29,420 --> 00:07:30,640
And if they didn't,

118
00:07:30,640 --> 00:07:32,530
we need to send the Mac and error.

119
00:07:32,530 --> 00:07:33,550
And if they did,

120
00:07:33,550 --> 00:07:35,750
we can continue on with the logic.

121
00:07:35,750 --> 00:07:44,380
So we want to say that first name is going to be defined to the first name that was that

122
00:07:44,380 --> 00:07:45,410
came in the payload.

123
00:07:45,410 --> 00:07:50,280
As long as it meets certain requirements otherwise going to be defined this false.

124
00:07:50,280 --> 00:08:01,180
We do that by saying first name because type of data payload first name equals string,

125
00:08:01,180 --> 00:08:06,310
and its length is greater than zero.

126
00:08:06,310 --> 00:08:07,950
So we're going to say that this,

127
00:08:07,950 --> 00:08:09,890
like,

128
00:08:09,890 --> 00:08:11,750
greater than zero.

129
00:08:11,750 --> 00:08:13,450
We just move this over a bit.

130
00:08:13,450 --> 00:08:19,010
I'm gonna make sure that it's trimmed.

131
00:08:19,010 --> 00:08:20,650
Length is actually greater than zero.

132
00:08:20,650 --> 00:08:22,430
In other words,

133
00:08:22,430 --> 00:08:25,290
when you get rid of the white space that still has a good length,

134
00:08:25,290 --> 00:08:27,920
go ahead and use it.

135
00:08:27,920 --> 00:08:29,210
Data payload,

136
00:08:29,210 --> 00:08:30,500
first name trim.

137
00:08:30,500 --> 00:08:33,500
Otherwise default.

138
00:08:33,500 --> 00:08:42,370
Divorce gonna go ahead and copy this whole first line down to the next line and basically

139
00:08:42,370 --> 00:08:47,180
just used the exact same logic again for last name because it has the same requirements.

140
00:08:47,180 --> 00:08:52,230
The last name he goes type of data payload.

141
00:08:52,230 --> 00:08:52,810
Last name,

142
00:08:52,810 --> 00:08:53,750
he called string.

143
00:08:53,750 --> 00:08:57,460
Make sure has a trend length grade of zero.

144
00:08:57,460 --> 00:08:58,170
If it does,

145
00:08:58,170 --> 00:09:01,760
go ahead and use the trimmed version of it going to fall to force.

146
00:09:01,760 --> 00:09:03,560
Okay,

147
00:09:03,560 --> 00:09:08,830
Now I want to do a similar thing for the phone number for us.

148
00:09:08,830 --> 00:09:10,600
Even though phone number looks like a number,

149
00:09:10,600 --> 00:09:14,990
we want to accept it as a string in case it starts with a zero or something else that a

150
00:09:14,990 --> 00:09:18,450
that a true integer wouldn't be able to convey.

151
00:09:18,450 --> 00:09:24,850
So we want to say that of our phone equals type of data payload phone.

152
00:09:24,850 --> 00:09:30,600
But then we have stricter requirements about the length here.

153
00:09:30,600 --> 00:09:33,790
So we want to say that data payload,

154
00:09:33,790 --> 00:09:37,860
phone trim length not just greater than zero,

155
00:09:37,860 --> 00:09:42,750
but it is exactly equal to 10 because we're looking for area code plus seven digit number,

156
00:09:42,750 --> 00:09:47,150
then data payload,

157
00:09:47,150 --> 00:09:49,360
phone trim or default.

158
00:09:49,360 --> 00:09:49,950
Divorce.

159
00:09:49,950 --> 00:09:54,470
Now we need Teoh set some requirements for the password field that they're sending.

160
00:09:54,470 --> 00:10:02,220
So we want to say password because type of data payload,

161
00:10:02,220 --> 00:10:03,270
password,

162
00:10:03,270 --> 00:10:04,250
equal string.

163
00:10:04,250 --> 00:10:10,550
Then we want to make sure that the trim length is greater than zero.

164
00:10:10,550 --> 00:10:14,480
If so,

165
00:10:14,480 --> 00:10:15,050
get the trembling.

166
00:10:15,050 --> 00:10:20,260
The only requirement we're putting for passwords right now is that it has a length.

167
00:10:20,260 --> 00:10:21,300
Lastly,

168
00:10:21,300 --> 00:10:25,070
we want to put some requirements for the toss agreement,

169
00:10:25,070 --> 00:10:26,330
Julian.

170
00:10:26,330 --> 00:10:28,890
So we want to say that the toss agreement,

171
00:10:28,890 --> 00:10:47,050
because data payload toss agreement equals Boolean and that that Julian equals true.

172
00:10:47,050 --> 00:10:49,250
If so,

173
00:10:49,250 --> 00:10:54,510
it should be true or should deport a false.

174
00:10:54,510 --> 00:10:56,440
So,

175
00:10:56,440 --> 00:10:57,130
in other words,

176
00:10:57,130 --> 00:10:59,740
that they didn't fill out that toss agreement at all.

177
00:10:59,740 --> 00:11:01,680
If they didn't check the box one way or another,

178
00:11:01,680 --> 00:11:06,430
or if the payload didn't come along for that field,

179
00:11:06,430 --> 00:11:08,300
we're going to devote it to false.

180
00:11:08,300 --> 00:11:09,740
Otherwise,

181
00:11:09,740 --> 00:11:14,600
it'll be true as long as they defined it and they said it to true defaulting into false in

182
00:11:14,600 --> 00:11:15,470
our case,

183
00:11:15,470 --> 00:11:17,830
it's going to set it to an unacceptable field.

184
00:11:17,830 --> 00:11:24,000
And so whether they said it to false manually or they just forgot to include the Toss

185
00:11:24,000 --> 00:11:27,960
Agreement 1,000,000,000 we're going to say this isn't a valid payload.

186
00:11:27,960 --> 00:11:30,080
You have to agree to the terms of service.

187
00:11:30,080 --> 00:11:32,890
So next we want to say,

188
00:11:32,890 --> 00:11:46,820
if first name and last name and phone and password and toss agreement then continue on.

189
00:11:46,820 --> 00:11:52,950
Otherwise we are going to call back and say Raju because you are messing up.

190
00:11:52,950 --> 00:11:59,210
So we want to call back 400 we might as well give them a pay low.

191
00:11:59,210 --> 00:12:00,260
Italian was going on.

192
00:12:00,260 --> 00:12:02,050
We want to say error.

193
00:12:02,050 --> 00:12:09,950
I didn't spell out what the air is missing,

194
00:12:09,950 --> 00:12:12,900
required fields,

195
00:12:12,900 --> 00:12:18,600
Otherwise we continue on with the logic is normal.

196
00:12:18,600 --> 00:12:23,280
So the next thing that we need to do is now that they're trying to create a user.

197
00:12:23,280 --> 00:12:27,050
We want to make sure that that user doesn't already exist.

198
00:12:27,050 --> 00:12:28,060
As you can guess.

199
00:12:28,060 --> 00:12:33,460
Here we're uniquely identifying users with a phone number and a password rather than email

200
00:12:33,460 --> 00:12:35,730
in a password or a user name and password.

201
00:12:35,730 --> 00:12:37,040
That is because,

202
00:12:37,040 --> 00:12:38,620
as I mentioned before,

203
00:12:38,620 --> 00:12:40,810
we're going to be texting users alerts.

204
00:12:40,810 --> 00:12:43,780
And so we don't really care what your email addresses.

205
00:12:43,780 --> 00:12:46,090
We care that you have a unique phone number,

206
00:12:46,090 --> 00:12:50,640
and so if you try to create a user that has a phone number that's already in use,

207
00:12:50,640 --> 00:12:51,880
we're not gonna let you do that.

208
00:12:51,880 --> 00:13:00,950
So we need to make sure that the user doesn't already exist.

209
00:13:00,950 --> 00:13:07,500
The way that we're going to do that is we're going to attempt to read from the user's data

210
00:13:07,500 --> 00:13:07,500
,

211
00:13:07,500 --> 00:13:10,620
and if the user's data comes back with an error,

212
00:13:10,620 --> 00:13:12,470
then we know it doesn't exist.

213
00:13:12,470 --> 00:13:16,050
The reason this makes sense is every time that we create a new user,

214
00:13:16,050 --> 00:13:20,790
we're going to be saving a file called your phone number dot Jason.

215
00:13:20,790 --> 00:13:27,980
So if your phone number is 5555555555 there's going to be inside of the data forger,

216
00:13:27,980 --> 00:13:31,370
a user's directory at inside of that directory,

217
00:13:31,370 --> 00:13:36,570
there's going to be a file called 5555555555 dot Jason.

218
00:13:36,570 --> 00:13:39,260
And so once it reaches this part of the logic,

219
00:13:39,260 --> 00:13:41,190
if someone's trying to create a new user,

220
00:13:41,190 --> 00:13:44,250
we're going to try to read the file.

221
00:13:44,250 --> 00:13:48,050
5555 dot Jason.

222
00:13:48,050 --> 00:13:49,820
And if it comes back with an air,

223
00:13:49,820 --> 00:13:51,500
we know that file doesn't exist,

224
00:13:51,500 --> 00:13:54,440
so we can go ahead and continue trying to create that user.

225
00:13:54,440 --> 00:13:56,460
If it comes back with an error,

226
00:13:56,460 --> 00:13:57,960
that fire already exists,

227
00:13:57,960 --> 00:13:59,710
which means that user already exists.

228
00:13:59,710 --> 00:14:02,450
And we can't allow you to create a new user with that same phone number.

229
00:14:02,450 --> 00:14:03,580
Okay,

230
00:14:03,580 --> 00:14:11,080
so let's go ahead and use that data library that we just created in the last lecture to

231
00:14:11,080 --> 00:14:13,050
start reading from the final system.

232
00:14:13,050 --> 00:14:19,260
So we want to say data dot reid number that function that we created,

233
00:14:19,260 --> 00:14:22,790
we want to read from the user's subdirectory.

234
00:14:22,790 --> 00:14:27,950
We want to look up this user by the phone number,

235
00:14:27,950 --> 00:14:33,250
and we're going to get back an air and data.

236
00:14:33,250 --> 00:14:42,570
Now you might be saying once the data don't read what's data?

237
00:14:42,570 --> 00:14:43,130
Well,

238
00:14:43,130 --> 00:14:47,250
that's gonna be dependency on our end underscored data.

239
00:14:47,250 --> 00:14:58,730
There's going to equal require dot slash data so that's gonna pull in that data library

240
00:14:58,730 --> 00:14:59,950
that we wrote earlier.

241
00:14:59,950 --> 00:15:05,350
Now we want to go back to where we are using this new library to do the read,

242
00:15:05,350 --> 00:15:10,820
and we want to say If it comes back with an air that's good,

243
00:15:10,820 --> 00:15:13,660
we want to continue on with what we were doing.

244
00:15:13,660 --> 00:15:14,780
Otherwise,

245
00:15:14,780 --> 00:15:18,420
we want to call back an error to the requester,

246
00:15:18,420 --> 00:15:21,890
saying a user with that phone number already exists.

247
00:15:21,890 --> 00:15:32,280
Call 400 again,

248
00:15:32,280 --> 00:15:40,870
a data object with a key called Air and an explanation that says a user with that phone

249
00:15:40,870 --> 00:15:43,130
number already exists.

250
00:15:43,130 --> 00:15:47,090
OK,

251
00:15:47,090 --> 00:15:48,860
but if the phone number is valid,

252
00:15:48,860 --> 00:15:54,600
then we want to start the process of creating the new user object.

253
00:15:54,600 --> 00:15:58,960
So the first thing that we're going to need to do to create that user object is hash the

254
00:15:58,960 --> 00:15:59,570
password.

255
00:15:59,570 --> 00:16:04,330
We don't want to store the password as the users send it to us.

256
00:16:04,330 --> 00:16:05,710
That's just a bad practice.

257
00:16:05,710 --> 00:16:10,000
And we don't want to store plain text passwords in your file system or in your database or

258
00:16:10,000 --> 00:16:15,000
every restoring data you want to store in some kind of way that mask the true string of the

259
00:16:15,000 --> 00:16:15,600
password.

260
00:16:15,600 --> 00:16:20,830
So we want to say past the password.

261
00:16:20,830 --> 00:16:23,390
How do we do that for you?

262
00:16:23,390 --> 00:16:27,700
That we were going to use a built in library that comes with node called crypto.

263
00:16:27,700 --> 00:16:29,170
But within this file,

264
00:16:29,170 --> 00:16:34,000
all we need to do is reference a helper function that we're going to create.

265
00:16:34,000 --> 00:16:44,080
So here we're going to say that bar Pash password is just equal to helpers hash,

266
00:16:44,080 --> 00:16:47,290
and then we pass it the password string.

267
00:16:47,290 --> 00:16:50,880
So what is this helpers dot hash function?

268
00:16:50,880 --> 00:16:52,480
That's what we need to create.

269
00:16:52,480 --> 00:16:58,660
But we're going to create it within a separate file that we will call helpers and we'll

270
00:16:58,660 --> 00:17:02,160
reference that helpers file at the top of this handlers file.

271
00:17:02,160 --> 00:17:08,850
So let's make that reference up here with our dependencies Were going to say that far

272
00:17:08,850 --> 00:17:17,760
helpers equals require dot slash helpers.

273
00:17:17,760 --> 00:17:21,460
Remember that this file is living within the live directory,

274
00:17:21,460 --> 00:17:25,860
so referencing dot slash means referencing something within lib.

275
00:17:25,860 --> 00:17:27,200
So within lib,

276
00:17:27,200 --> 00:17:30,030
we just need to create another file and this time,

277
00:17:30,030 --> 00:17:42,260
call it help restart Js and you can see it's been created here.

278
00:17:42,260 --> 00:17:51,450
We're going to say that this file is just helpers for various tasks.

279
00:17:51,450 --> 00:18:01,550
We're going to create a container for all the helpers,

280
00:18:01,550 --> 00:18:19,350
and then we're going to export that container down at the bottom.

281
00:18:19,350 --> 00:18:30,280
And,

282
00:18:30,280 --> 00:18:32,390
as you can guess from what we were a fenced here,

283
00:18:32,390 --> 00:18:35,780
helpers needs to contain a key,

284
00:18:35,780 --> 00:18:38,330
a function called hash that,

285
00:18:38,330 --> 00:18:43,500
except in a string and returns out the hash diversion off that string.

286
00:18:43,500 --> 00:18:49,110
So let's go ahead and create that function within helpers for our purposes.

287
00:18:49,110 --> 00:18:52,650
We're going to use Shah to 56 as our hash,

288
00:18:52,650 --> 00:18:55,610
although you're welcome to use whatever hash you like.

289
00:18:55,610 --> 00:18:59,460
Shock to 36 is one of the few that are built into nodes,

290
00:18:59,460 --> 00:19:03,620
so it doesn't take any external library to hash things that way.

291
00:19:03,620 --> 00:19:15,560
As I mentioned,

292
00:19:15,560 --> 00:19:20,660
this is a function that takes in a string that is all.

293
00:19:20,660 --> 00:19:25,770
It doesn't accept a callback because it's actually going to return the value instead of

294
00:19:25,770 --> 00:19:26,710
calling it back.

295
00:19:26,710 --> 00:19:32,190
So we want to first validate the string that's coming in.

296
00:19:32,190 --> 00:19:32,810
Say,

297
00:19:32,810 --> 00:19:43,260
if the type of this string equals string and it has a length,

298
00:19:43,260 --> 00:19:46,740
then we can continue.

299
00:19:46,740 --> 00:19:48,990
Otherwise we're going Teoh return.

300
00:19:48,990 --> 00:19:49,490
False.

301
00:19:49,490 --> 00:19:57,830
So now we actually need to hash this string and return it in order to do that.

302
00:19:57,830 --> 00:20:00,470
This is where we use the crypto library.

303
00:20:00,470 --> 00:20:03,350
So let's go ahead and add dependencies at the top.

304
00:20:03,350 --> 00:20:12,260
And our first dependency is going to be crypto itself.

305
00:20:12,260 --> 00:20:20,590
Now that we have it included,

306
00:20:20,590 --> 00:20:23,880
we can use it to pash this string.

307
00:20:23,880 --> 00:20:36,050
We want to say that it's hash equals krypton don't create H Mac,

308
00:20:36,050 --> 00:20:43,380
and then we're going to pass it shot to 56 because that's the type of passion that we want

309
00:20:43,380 --> 00:20:43,380
.

310
00:20:43,380 --> 00:20:47,370
And we're going to pass it a hashing secret.

311
00:20:47,370 --> 00:20:49,350
In this case,

312
00:20:49,350 --> 00:20:55,150
we're going to store that hashing secret in our config,

313
00:20:55,150 --> 00:20:57,450
which will get back to in a second,

314
00:20:57,450 --> 00:21:03,990
then docked update passing that string that we want to be hashed.

315
00:21:03,990 --> 00:21:11,290
Don't digest picks.

316
00:21:11,290 --> 00:21:13,510
Okay,

317
00:21:13,510 --> 00:21:13,800
now,

318
00:21:13,800 --> 00:21:15,220
that's really complicated.

319
00:21:15,220 --> 00:21:21,920
But all that basically means is we are hashing this thing with Shaw to 56.

320
00:21:21,920 --> 00:21:23,360
And after it does that,

321
00:21:23,360 --> 00:21:27,670
we want to return to whoever called that function.

322
00:21:27,670 --> 00:21:28,630
Okay,

323
00:21:28,630 --> 00:21:29,020
now,

324
00:21:29,020 --> 00:21:31,400
what is config dot hashing secret.

325
00:21:31,400 --> 00:21:35,550
This is just how this create h mac function works.

326
00:21:35,550 --> 00:21:36,860
It needs a hash secret.

327
00:21:36,860 --> 00:21:41,690
But since it's really shotted 56 it won't have much of an effect but at any rate,

328
00:21:41,690 --> 00:21:49,350
we want to add to our configuration a key called Passion Secret.

329
00:21:49,350 --> 00:21:59,410
And I'm just gonna say this is a secret and the most gonna added to production passion

330
00:21:59,410 --> 00:22:05,050
secret is equal to this is also a secret.

331
00:22:05,050 --> 00:22:07,660
All right,

332
00:22:07,660 --> 00:22:09,690
now those have been added to the CONFIG.

333
00:22:09,690 --> 00:22:11,290
In order to use that,

334
00:22:11,290 --> 00:22:18,760
we're going to need to add another dependency to this helpers file so that it can use

335
00:22:18,760 --> 00:22:21,210
things that are defined in convict.

336
00:22:21,210 --> 00:22:34,100
We're going to say that far config equals require dot slash convict No,

337
00:22:34,100 --> 00:22:40,350
back to our handlers dot Js file where we're actually calling this function and using it,

338
00:22:40,350 --> 00:22:44,080
we're passing in the password that the user sent to us.

339
00:22:44,080 --> 00:22:46,210
We're getting back out a hash password.

340
00:22:46,210 --> 00:22:53,000
And now we need toe continue on creating that user with the data that they sent along with

341
00:22:53,000 --> 00:22:54,050
the hash password.

342
00:22:54,050 --> 00:23:08,030
We want to create the user object say that bar user object equals this big object that

343
00:23:08,030 --> 00:23:13,350
we're gonna add a bunch of keys to one his first name that's gonna equal for his name.

344
00:23:13,350 --> 00:23:19,160
One is last name That's going to Eagle.

345
00:23:19,160 --> 00:23:20,820
You guessed it.

346
00:23:20,820 --> 00:23:32,540
Last name phone is going to equal phone hashed password is going to equal hash password.

347
00:23:32,540 --> 00:23:37,260
We're not including the raw password and the Toss Agreement.

348
00:23:37,260 --> 00:23:40,020
He's going to Eagle.

349
00:23:40,020 --> 00:23:40,550
True,

350
00:23:40,550 --> 00:23:47,080
because it wouldn't have made it past this level of validation if the toss Agreement wasn't

351
00:23:47,080 --> 00:23:47,450
true.

352
00:23:47,450 --> 00:23:50,950
Now we actually need to persist that user to disk.

353
00:23:50,950 --> 00:23:53,700
It's a story.

354
00:23:53,700 --> 00:24:01,550
The user and we're gonna use that create function that we wrote in the last lecture.

355
00:24:01,550 --> 00:24:05,260
We're gonna write it to users,

356
00:24:05,260 --> 00:24:09,060
which means that within this data for her,

357
00:24:09,060 --> 00:24:12,540
we need to first create that users subdirectory.

358
00:24:12,540 --> 00:24:13,290
So what?

359
00:24:13,290 --> 00:24:13,950
We're here.

360
00:24:13,950 --> 00:24:25,260
I'm gonna go into the data for order and then make a new directory called Users.

361
00:24:25,260 --> 00:24:27,260
Okay,

362
00:24:27,260 --> 00:24:29,350
You can see it there.

363
00:24:29,350 --> 00:24:31,450
Get back out.

364
00:24:31,450 --> 00:24:34,790
We're creating it within users.

365
00:24:34,790 --> 00:24:39,740
And we want this file to be named the same as the phone number dot Jason remembered The

366
00:24:39,740 --> 00:24:43,060
create function is going to add on the dot Jason by itself.

367
00:24:43,060 --> 00:24:44,160
So we need to pass in.

368
00:24:44,160 --> 00:24:47,350
Is the phone number the contents of this file?

369
00:24:47,350 --> 00:24:50,290
We want to be this user object that we just created,

370
00:24:50,290 --> 00:24:58,850
and then we're gonna supply the callback and check the air that comes back.

371
00:24:58,850 --> 00:25:01,450
If there is no air.

372
00:25:01,450 --> 00:25:10,160
We want to call back 200 to the requester because everything went fine and we stored the

373
00:25:10,160 --> 00:25:10,950
user disk.

374
00:25:10,950 --> 00:25:12,340
Otherwise,

375
00:25:12,340 --> 00:25:27,260
we need to log out that air and call back 500 a payload That spells out what the Air Waas

376
00:25:27,260 --> 00:25:32,470
could not create the new user.

377
00:25:32,470 --> 00:25:36,010
They're just add some extra safety here.

378
00:25:36,010 --> 00:25:43,020
I just want to add some sanity checking around the hash password so that the logical only

379
00:25:43,020 --> 00:25:45,820
continue if the password got hash successfully.

380
00:25:45,820 --> 00:25:48,190
So before creating the user object,

381
00:25:48,190 --> 00:25:49,800
I'm going to say,

382
00:25:49,800 --> 00:25:52,950
if hashed password.

383
00:25:52,950 --> 00:25:54,850
Do all of this.

384
00:25:54,850 --> 00:26:02,050
Otherwise,

385
00:26:02,050 --> 00:26:21,680
call back 500 and spell out what the air was now before we started up.

386
00:26:21,680 --> 00:26:28,440
We need to make sure that the payload that's coming to the handler isn't just a raw buffer

387
00:26:28,440 --> 00:26:28,440
,

388
00:26:28,440 --> 00:26:31,310
but it's actually the parsed Jason Data.

389
00:26:31,310 --> 00:26:38,920
So I'm going back to the index dot Js and we want to change payload to rev and be buffer.

390
00:26:38,920 --> 00:26:51,480
We wanted to be helpers done Poor's Jason to object and then pass it a buffer pass.

391
00:26:51,480 --> 00:26:53,950
Pass it the variable that we've called buffer.

392
00:26:53,950 --> 00:26:55,960
Now again,

393
00:26:55,960 --> 00:27:00,000
we want to reference helpers as a dependency.

394
00:27:00,000 --> 00:27:10,510
So the top we're going to say that Bar Helper is equal is require dot,

395
00:27:10,510 --> 00:27:13,260
slash lib slash overs.

396
00:27:13,260 --> 00:27:20,620
Now we can go to helpers and actually create that function.

397
00:27:20,620 --> 00:27:30,080
So we want to create a function that takes in an arbitrary string and either returns the

398
00:27:30,080 --> 00:27:33,640
Jason object from that string or returns false.

399
00:27:33,640 --> 00:27:38,470
The reason that we're doing this is because natively Notre Job Skip will just throw an

400
00:27:38,470 --> 00:27:44,820
error if the Jason dot parts function is trying to parse something that isn't valid.

401
00:27:44,820 --> 00:27:46,850
Jace on and we don't want things to throw.

402
00:27:46,850 --> 00:28:01,580
So we want to say course a Jason String to an object and all cases without throwing and

403
00:28:01,580 --> 00:28:07,850
helpers done poorest Jason Object is going to be a function that takes in a string.

404
00:28:07,850 --> 00:28:14,150
It's basically just going to wrap Jason dot parson a try catch.

405
00:28:14,150 --> 00:28:27,450
So we're going to try Catch are Object equals Jason dot parse the string.

406
00:28:27,450 --> 00:28:30,730
If that catch gets called,

407
00:28:30,730 --> 00:28:34,000
we want to return an empty object.

408
00:28:34,000 --> 00:28:36,300
If the catch doesn't get called,

409
00:28:36,300 --> 00:28:38,400
we want to return whatever to Scott,

410
00:28:38,400 --> 00:28:40,050
parse that we want to return object.

411
00:28:40,050 --> 00:28:41,100
All right,

412
00:28:41,100 --> 00:28:47,450
so that is all the logic that we need within this users post method.

413
00:28:47,450 --> 00:28:50,720
Let's go ahead and test it out.

414
00:28:50,720 --> 00:28:54,590
Try to create a new user using postman and see what happens.

415
00:28:54,590 --> 00:28:56,050
So I'm gonna start up the app.

416
00:28:56,050 --> 00:29:02,250
All right?

417
00:29:02,250 --> 00:29:04,500
I'm getting a syntax.

418
00:29:04,500 --> 00:29:07,950
Error just means that I forgot the if.

419
00:29:07,950 --> 00:29:10,180
All right,

420
00:29:10,180 --> 00:29:11,160
try that again.

421
00:29:11,160 --> 00:29:13,130
Ah,

422
00:29:13,130 --> 00:29:22,550
this error is happening because Helpers expects the config file to be within the Libs

423
00:29:22,550 --> 00:29:23,160
directory.

424
00:29:23,160 --> 00:29:25,350
But I haven't actually moved it there yet.

425
00:29:25,350 --> 00:29:27,950
And so I need to move it there.

426
00:29:27,950 --> 00:29:38,280
Se mueve config dot Js to live slash convict up?

427
00:29:38,280 --> 00:29:38,860
Yes.

428
00:29:38,860 --> 00:29:40,800
All right,

429
00:29:40,800 --> 00:29:45,130
now it's living up here since I've moved it,

430
00:29:45,130 --> 00:29:52,180
I need to change index dot Js to reference it up inside the lib directory.

431
00:29:52,180 --> 00:30:00,240
The reason I've moved it is just because now that we have a lot of other libraries going on

432
00:30:00,240 --> 00:30:02,190
configures only one of them,

433
00:30:02,190 --> 00:30:06,810
they might as well all live in the same directory and have just index dot Js living at the

434
00:30:06,810 --> 00:30:07,160
root.

435
00:30:07,160 --> 00:30:08,650
All right,

436
00:30:08,650 --> 00:30:10,550
let's try to start this up again.

437
00:30:10,550 --> 00:30:22,100
We have the server listening on 3000 so I'm going to go over to Postman and create a post

438
00:30:22,100 --> 00:30:25,450
request toe local host slash users.

439
00:30:25,450 --> 00:30:34,770
Let's just send off this request without anybody see what happens?

440
00:30:34,770 --> 00:30:40,410
We have a 400 coming back that says Error missing required fields.

441
00:30:40,410 --> 00:30:42,970
That's what we were hoping would happen.

442
00:30:42,970 --> 00:30:48,620
So now let's construct this request with all the required fields and see if we can get a

443
00:30:48,620 --> 00:30:49,350
200 back.

444
00:30:49,350 --> 00:30:53,300
And we got a 200 back.

445
00:30:53,300 --> 00:30:56,020
We sent in first name John.

446
00:30:56,020 --> 00:31:01,900
Last name Smith phone number was 555 Whatever password is this is a password and toss

447
00:31:01,900 --> 00:31:02,680
agreement is true.

448
00:31:02,680 --> 00:31:06,440
If we tried to send this payload again,

449
00:31:06,440 --> 00:31:10,060
we got 400 back.

450
00:31:10,060 --> 00:31:14,410
ARer user with that phone number already exists if we try to change the phone number a

451
00:31:14,410 --> 00:31:14,950
little bit.

452
00:31:14,950 --> 00:31:16,110
Changes.

453
00:31:16,110 --> 00:31:21,060
7218 We should get back a 200 again because that was valid.

454
00:31:21,060 --> 00:31:24,120
We tried to create yet another user.

455
00:31:24,120 --> 00:31:25,630
Let's change 8 to 9,

456
00:31:25,630 --> 00:31:26,470
But then set,

457
00:31:26,470 --> 00:31:28,980
Let's say toss agreement to false.

458
00:31:28,980 --> 00:31:31,550
We're going to get back error missing.

459
00:31:31,550 --> 00:31:36,170
Required fields that be the same eras if we left off one of the fields entirely.

460
00:31:36,170 --> 00:31:37,000
Okay,

461
00:31:37,000 --> 00:31:46,270
so this post method is working and we can go back and look at our data folder inside of

462
00:31:46,270 --> 00:31:46,970
users.

463
00:31:46,970 --> 00:31:55,820
We have these two new Jason files that both contain the data for the two new users that we

464
00:31:55,820 --> 00:31:56,390
just created.

465
00:31:56,390 --> 00:31:58,220
Now that post is working,

466
00:31:58,220 --> 00:32:02,270
let's move on in the handlers file,

467
00:32:02,270 --> 00:32:05,080
too get.

468
00:32:05,080 --> 00:32:10,130
But before we move on to the get method,

469
00:32:10,130 --> 00:32:16,570
there's one other function within our data library that could benefit from that parts Jason

470
00:32:16,570 --> 00:32:21,770
Toe object helper that we just created this one.

471
00:32:21,770 --> 00:32:25,640
So let's go to the data library.

472
00:32:25,640 --> 00:32:31,850
And rather than simply calling back the raw data,

473
00:32:31,850 --> 00:32:36,430
let's call back the parts Jason Data.

474
00:32:36,430 --> 00:32:39,710
Since we know that we're always going to be storing Jason,

475
00:32:39,710 --> 00:32:44,800
it makes sense that we can just return parsed Jason objects to the requester rather than

476
00:32:44,800 --> 00:32:47,660
the raw Jason string that get stored in the file.

477
00:32:47,660 --> 00:33:03,570
So we're going to say that if it's not air and there is data we want to get parse data and

478
00:33:03,570 --> 00:33:13,220
parse data equals helpers dot parts Jason object and we're gonna pass it in the data that

479
00:33:13,220 --> 00:33:16,210
we got out of whatever file were reading,

480
00:33:16,210 --> 00:33:22,950
and then we're gonna call back False and the coursed data.

481
00:33:22,950 --> 00:33:30,950
Otherwise we're gonna keep it the same.

482
00:33:30,950 --> 00:33:34,950
We're going to call back the air in the data as it came out of that file.

483
00:33:34,950 --> 00:33:36,250
Okay,

484
00:33:36,250 --> 00:33:37,840
now back to what we were doing.

485
00:33:37,840 --> 00:33:41,610
Let's go to the get method in the user's handler.

486
00:33:41,610 --> 00:33:43,870
Is that some commenting here?

487
00:33:43,870 --> 00:33:45,940
That is required.

488
00:33:45,940 --> 00:33:53,330
Data phone optional,

489
00:33:53,330 --> 00:33:59,150
data none.

490
00:33:59,150 --> 00:34:02,050
And we're gonna read a note to ourselves.

491
00:34:02,050 --> 00:34:08,850
But is it to do for later that we should only let authenticated users access their own

492
00:34:08,850 --> 00:34:09,640
object?

493
00:34:09,640 --> 00:34:13,810
We don't want to let people access other people's objects,

494
00:34:13,810 --> 00:34:24,160
so only let and authenticated user access their object.

495
00:34:24,160 --> 00:34:31,880
Don't let them access anyone else's.

496
00:34:31,880 --> 00:34:34,850
Okay,

497
00:34:34,850 --> 00:34:36,050
Now,

498
00:34:36,050 --> 00:34:37,090
within the function,

499
00:34:37,090 --> 00:34:46,860
the first thing that we needed to do is check that the phone number provided is valid since

500
00:34:46,860 --> 00:34:47,800
is a get request.

501
00:34:47,800 --> 00:34:48,810
There is no payload,

502
00:34:48,810 --> 00:34:51,750
so we're actually gonna pull the phone number from the query string.

503
00:34:51,750 --> 00:34:58,060
Object within the data object instead of the payload gets is a reminder number.

504
00:34:58,060 --> 00:35:01,660
When we're forming all these requests and sending them along to the handlers were sending

505
00:35:01,660 --> 00:35:03,010
this whole object along.

506
00:35:03,010 --> 00:35:04,730
The payload is only part of it.

507
00:35:04,730 --> 00:35:09,510
There's also a query string object that contains any key value parameters that would have

508
00:35:09,510 --> 00:35:11,060
been sent and get request.

509
00:35:11,060 --> 00:35:16,310
You're gonna have keys and values in the query string instead of in the payload instead.

510
00:35:16,310 --> 00:35:26,580
So we're going to say that the phone number of our phone equals type of data query,

511
00:35:26,580 --> 00:35:26,970
string,

512
00:35:26,970 --> 00:35:29,270
object phone,

513
00:35:29,270 --> 00:35:30,460
equal strength.

514
00:35:30,460 --> 00:35:33,920
And it is length equals 10.

515
00:35:33,920 --> 00:35:49,460
The same kind of validation that we did on the Post Request.

516
00:35:49,460 --> 00:36:00,480
We're gonna deport False.

517
00:36:00,480 --> 00:36:01,930
And on the next line,

518
00:36:01,930 --> 00:36:07,590
we're going to say if the phone was provided and it was valid that we're gonna continue

519
00:36:07,590 --> 00:36:20,390
otherwise we're going to call back a 400 error to the user saying 400 air missing,

520
00:36:20,390 --> 00:36:21,950
required field.

521
00:36:21,950 --> 00:36:23,280
In this case,

522
00:36:23,280 --> 00:36:24,170
it's missing the fun of her.

523
00:36:24,170 --> 00:36:26,920
But if there is a good phone number,

524
00:36:26,920 --> 00:36:28,830
then we wanna look up,

525
00:36:28,830 --> 00:36:29,540
user.

526
00:36:29,540 --> 00:36:30,770
And to do that,

527
00:36:30,770 --> 00:36:35,540
we're going to call our one of our data methods data dot Reid,

528
00:36:35,540 --> 00:36:37,990
we're gonna read from the user's collection,

529
00:36:37,990 --> 00:36:44,580
and we want to read the phone number provided it's gonna call back an air and some data

530
00:36:44,580 --> 00:36:47,660
when it calls back.

531
00:36:47,660 --> 00:36:49,420
We want to check that.

532
00:36:49,420 --> 00:36:53,240
If there is not a right and there is data,

533
00:36:53,240 --> 00:36:56,340
we can continue with the request.

534
00:36:56,340 --> 00:36:57,640
Otherwise,

535
00:36:57,640 --> 00:37:01,750
we're gonna call back 44 as you are.

536
00:37:01,750 --> 00:37:02,020
No.

537
00:37:02,020 --> 00:37:04,220
44 stands for not found.

538
00:37:04,220 --> 00:37:05,360
So in this case,

539
00:37:05,360 --> 00:37:10,010
you're asking for a user that does not exist before we return this user object and

540
00:37:10,010 --> 00:37:10,690
requester.

541
00:37:10,690 --> 00:37:17,230
We actually want to remove the hashed password from the user object because that's not data

542
00:37:17,230 --> 00:37:20,410
that they will ever need to read or that it would be safe.

543
00:37:20,410 --> 00:37:20,750
Teoh,

544
00:37:20,750 --> 00:37:21,240
show them.

545
00:37:21,240 --> 00:37:32,650
So remove the hashed password from the user object before returning it to the requester.

546
00:37:32,650 --> 00:37:35,060
Okay,

547
00:37:35,060 --> 00:37:44,870
so we do that by just saying delete data hashed password and then we want to call back 200

548
00:37:44,870 --> 00:37:53,570
everything else that was in that data object this case using data too many times it doesn't

549
00:37:53,570 --> 00:37:54,200
really matter,

550
00:37:54,200 --> 00:37:55,720
but just for clarity sick.

551
00:37:55,720 --> 00:37:59,400
That is not this data object that's coming in.

552
00:37:59,400 --> 00:38:02,530
That's the data that's coming back from the,

553
00:38:02,530 --> 00:38:03,560
uh,

554
00:38:03,560 --> 00:38:04,970
don't read function.

555
00:38:04,970 --> 00:38:08,910
So that's all we need to be able to get users.

556
00:38:08,910 --> 00:38:14,300
Let's go ahead and try this out and make sure that we can read a user must startup the

557
00:38:14,300 --> 00:38:20,180
server listening on a port.

558
00:38:20,180 --> 00:38:29,120
I'm to go back to here the postman and do a get requests to local host slash users.

559
00:38:29,120 --> 00:38:36,580
But this time I'm going to say that phone equals 5551234567 Since that is one of the users

560
00:38:36,580 --> 00:38:38,350
that we created click send.

561
00:38:38,350 --> 00:38:40,620
Looks like a crash.

562
00:38:40,620 --> 00:38:42,770
Helpers is not defined.

563
00:38:42,770 --> 00:38:46,570
That is because within the data file,

564
00:38:46,570 --> 00:38:48,200
I'm calling helpers,

565
00:38:48,200 --> 00:38:50,100
but I never required it appear.

566
00:38:50,100 --> 00:38:56,580
And so I need to do that now for helpers equals require,

567
00:38:56,580 --> 00:38:57,640
uh,

568
00:38:57,640 --> 00:38:59,530
slash helpers.

569
00:38:59,530 --> 00:39:03,370
Okay,

570
00:39:03,370 --> 00:39:05,130
so let's try to start it up again.

571
00:39:05,130 --> 00:39:07,330
Send the request again.

572
00:39:07,330 --> 00:39:08,810
All right.

573
00:39:08,810 --> 00:39:10,750
We just did a successful read.

574
00:39:10,750 --> 00:39:11,530
We have the first name,

575
00:39:11,530 --> 00:39:12,010
last name,

576
00:39:12,010 --> 00:39:13,620
phone and toss agreement coming back.

577
00:39:13,620 --> 00:39:17,210
And we do not have the hash password coming back because we're deleting that from the

578
00:39:17,210 --> 00:39:19,850
object prior to returning it to the requester.

579
00:39:19,850 --> 00:39:23,800
If we change this phone to something that doesn't exist,

580
00:39:23,800 --> 00:39:32,640
like 560 instead of 567 we get a 44 If we change it to remove the phone field entirely,

581
00:39:32,640 --> 00:39:36,120
we're gonna get that We're missing a required field.

582
00:39:36,120 --> 00:39:36,620
Okay,

583
00:39:36,620 --> 00:39:38,270
so this get seems to be working.

584
00:39:38,270 --> 00:39:38,750
Fine.

585
00:39:38,750 --> 00:39:40,320
Now that we have get,

586
00:39:40,320 --> 00:39:47,490
we can move on to put for put.

587
00:39:47,490 --> 00:39:48,420
Once again,

588
00:39:48,420 --> 00:39:53,350
the required data is phone.

589
00:39:53,350 --> 00:39:57,270
You must specify which user you want to put to.

590
00:39:57,270 --> 00:39:59,470
So which user you want to update.

591
00:39:59,470 --> 00:40:03,630
And this time there is optional data.

592
00:40:03,630 --> 00:40:06,240
The optional data is everything else.

593
00:40:06,240 --> 00:40:08,320
First name,

594
00:40:08,320 --> 00:40:11,630
last name and password,

595
00:40:11,630 --> 00:40:19,130
and we're just gonna write a note to ourselves that at least one must be specified so

596
00:40:19,130 --> 00:40:20,420
individually,

597
00:40:20,420 --> 00:40:22,250
they are optional fields.

598
00:40:22,250 --> 00:40:23,350
But collectively,

599
00:40:23,350 --> 00:40:26,280
at least one of these optional fields must be specified.

600
00:40:26,280 --> 00:40:27,980
In addition to the required field.

601
00:40:27,980 --> 00:40:30,450
We want to write one more note to ourselves.

602
00:40:30,450 --> 00:40:30,770
That is,

603
00:40:30,770 --> 00:40:40,930
to do only let and authenticated user update their own object.

604
00:40:40,930 --> 00:40:46,930
Don't let them update anyone houses.

605
00:40:46,930 --> 00:40:51,490
So it's the same reasons that's before we for security.

606
00:40:51,490 --> 00:40:57,330
We don't want to let a user with phone number X update the user object for the user for

607
00:40:57,330 --> 00:40:57,870
phone number.

608
00:40:57,870 --> 00:41:03,860
Why you owe me should be able to read and now update your own object.

609
00:41:03,860 --> 00:41:08,110
But we'll get into that later after we have offing mechanism.

610
00:41:08,110 --> 00:41:09,730
All right,

611
00:41:09,730 --> 00:41:13,420
so the first thing we need to do is check for the required field,

612
00:41:13,420 --> 00:41:25,350
which in this case is the same thing as above the differences.

613
00:41:25,350 --> 00:41:27,360
Rather than pulling it from the query string object,

614
00:41:27,360 --> 00:41:28,820
we're gonna pull it from the payload.

615
00:41:28,820 --> 00:41:36,800
So all right,

616
00:41:36,800 --> 00:41:39,320
now we want to check for the optional fields.

617
00:41:39,320 --> 00:41:46,940
These were going to be three of them.

618
00:41:46,940 --> 00:41:48,170
First name,

619
00:41:48,170 --> 00:41:49,320
last name and password.

620
00:41:49,320 --> 00:41:55,880
And they are actually going to be the same as we did for Post.

621
00:41:55,880 --> 00:41:58,810
So I'm going to copy those down from here.

622
00:41:58,810 --> 00:42:00,720
I could have copied phone as well.

623
00:42:00,720 --> 00:42:10,020
Could you just get rid of phone now?

624
00:42:10,020 --> 00:42:15,090
Rather than saying that the request must include all of these things,

625
00:42:15,090 --> 00:42:20,560
We're gonna put in a little logic that says you must have the phone and you must have

626
00:42:20,560 --> 00:42:23,100
either the first name last name or the password.

627
00:42:23,100 --> 00:42:28,310
So we want to air if the phone is invalid in all cases.

628
00:42:28,310 --> 00:42:32,510
So only continue if the phone is good.

629
00:42:32,510 --> 00:42:43,450
Otherwise we're gonna call back 400 air until the air may saying required field.

630
00:42:43,450 --> 00:42:49,080
And we want to say air if nothing is sent to update.

631
00:42:49,080 --> 00:42:57,810
So we want to continue if there is first name or last name or password.

632
00:42:57,810 --> 00:43:00,310
Otherwise,

633
00:43:00,310 --> 00:43:03,720
we want to call that a 400.

634
00:43:03,720 --> 00:43:10,360
Tell the user air missing fields to update.

635
00:43:10,360 --> 00:43:14,090
Now that we have valid strings,

636
00:43:14,090 --> 00:43:20,730
we need to look up this user and actually make sure that they exist prior to trying to

637
00:43:20,730 --> 00:43:23,640
update their object So look up,

638
00:43:23,640 --> 00:43:24,220
user,

639
00:43:24,220 --> 00:43:30,000
and we're gonna use one of our data helpers again.

640
00:43:30,000 --> 00:43:33,310
Data read in the user's collection.

641
00:43:33,310 --> 00:43:37,630
And we're going to read based on this phone number,

642
00:43:37,630 --> 00:43:43,110
give us back and air and user data.

643
00:43:43,110 --> 00:43:52,310
We're going to say that if there is not an air and there is user data,

644
00:43:52,310 --> 00:43:59,870
then we're going to update the fields that are necessary.

645
00:43:59,870 --> 00:44:01,160
Otherwise,

646
00:44:01,160 --> 00:44:04,080
if it came back with an error came back without user data,

647
00:44:04,080 --> 00:44:06,970
we want to call back and Eric to the requester,

648
00:44:06,970 --> 00:44:24,100
saying 400 air the specified user does not exist.

649
00:44:24,100 --> 00:44:31,320
We could also call this back as a 404 Some people prefer not to have four fours on a put.

650
00:44:31,320 --> 00:44:33,290
It's really a personal choice.

651
00:44:33,290 --> 00:44:38,100
As long as you convey what you're doing to whoever is consuming your A P I.

652
00:44:38,100 --> 00:44:40,030
It's up to you to make that distinction.

653
00:44:40,030 --> 00:44:41,290
All right,

654
00:44:41,290 --> 00:44:41,460
Now,

655
00:44:41,460 --> 00:44:43,130
back to updating the fields.

656
00:44:43,130 --> 00:44:44,900
We have the user data here,

657
00:44:44,900 --> 00:44:50,540
so we're actually going to update that user data object as we go if these fields have been

658
00:44:50,540 --> 00:44:50,840
set.

659
00:44:50,840 --> 00:44:53,820
So if first name has been sent,

660
00:44:53,820 --> 00:45:05,000
then we're gonna update user data first name with whatever this new value is let's do the

661
00:45:05,000 --> 00:45:12,610
exact same thing for last name if last name update user data,

662
00:45:12,610 --> 00:45:13,130
last name,

663
00:45:13,130 --> 00:45:13,830
he goes last name.

664
00:45:13,830 --> 00:45:16,870
And lastly,

665
00:45:16,870 --> 00:45:19,410
if password,

666
00:45:19,410 --> 00:45:21,810
we need to do the same thing.

667
00:45:21,810 --> 00:45:24,820
But we need to hash that password the same way we did before.

668
00:45:24,820 --> 00:45:33,060
So user data hashed password equals helpers dot hash,

669
00:45:33,060 --> 00:45:35,100
and we're gonna pass in the past right straight.

670
00:45:35,100 --> 00:45:39,400
Now we've up in his object.

671
00:45:39,400 --> 00:45:40,710
We actually need to store it,

672
00:45:40,710 --> 00:45:46,630
so store the new updates persists them to disk.

673
00:45:46,630 --> 00:45:47,940
For that,

674
00:45:47,940 --> 00:45:52,540
we're going to use our data update function that we created again.

675
00:45:52,540 --> 00:45:56,060
It's gonna be the users collection we're identifying,

676
00:45:56,060 --> 00:45:56,260
which,

677
00:45:56,260 --> 00:46:02,010
while we want to update by the phone number and the data that we want to overwrite into

678
00:46:02,010 --> 00:46:06,360
that file is the user data object that we've been manipulating,

679
00:46:06,360 --> 00:46:10,900
and that's gonna pass us back and air if there is any.

680
00:46:10,900 --> 00:46:14,900
So we only want to continue if there is no air.

681
00:46:14,900 --> 00:46:16,290
Otherwise,

682
00:46:16,290 --> 00:46:18,460
if we get an error back,

683
00:46:18,460 --> 00:46:22,750
we might as well log it for debugging purposes.

684
00:46:22,750 --> 00:46:29,540
But also call it back to the user has a 500 because this is something internally wrong with

685
00:46:29,540 --> 00:46:31,840
us that we couldn't figure out how to up its file.

686
00:46:31,840 --> 00:46:37,210
You want to say air could not update user.

687
00:46:37,210 --> 00:46:41,680
The reason we're saying 500 instead of 400 is there's really nothing necessarily wrong with

688
00:46:41,680 --> 00:46:45,550
the user's request if we're having an issue updating the file,

689
00:46:45,550 --> 00:46:50,910
and so there's no reason for them to retry or reform at the request is just a air on our

690
00:46:50,910 --> 00:46:53,490
server that we're gonna have toe deal with.

691
00:46:53,490 --> 00:46:55,750
But if there is no air,

692
00:46:55,750 --> 00:47:02,030
we want to call back 200 to tell the requester that everything was successful.

693
00:47:02,030 --> 00:47:03,890
So that is,

694
00:47:03,890 --> 00:47:11,950
users put let's start the server back up and see if we can update one of these users that

695
00:47:11,950 --> 00:47:12,790
we created earlier.

696
00:47:12,790 --> 00:47:20,230
So I'm gonna go to this post request that I created before,

697
00:47:20,230 --> 00:47:23,700
and I'm a change it to be a put.

698
00:47:23,700 --> 00:47:28,170
Let me change it so that we're modifying users.

699
00:47:28,170 --> 00:47:34,340
1234567 And I want to change his first name too.

700
00:47:34,340 --> 00:47:35,560
Jim,

701
00:47:35,560 --> 00:47:37,690
instead of John,

702
00:47:37,690 --> 00:47:40,990
I'm gonna leave the rest of these fields off.

703
00:47:40,990 --> 00:47:43,170
Okay?

704
00:47:43,170 --> 00:47:45,240
So when I send this put,

705
00:47:45,240 --> 00:47:48,660
I should get back a 200 with nobody.

706
00:47:48,660 --> 00:47:50,090
And if we go back,

707
00:47:50,090 --> 00:47:52,700
we look inside of the users object.

708
00:47:52,700 --> 00:47:56,900
1234567 We can see that his first name is now Jim,

709
00:47:56,900 --> 00:48:00,510
so the put seems to be working as expected.

710
00:48:00,510 --> 00:48:02,620
Now that puts their we've done,

711
00:48:02,620 --> 00:48:02,970
create,

712
00:48:02,970 --> 00:48:03,810
read and update.

713
00:48:03,810 --> 00:48:10,530
The last thing to do for the users service is delete deletes going to be set up in a

714
00:48:10,530 --> 00:48:18,390
similar way to get so we're going to start with a required field that is just phone,

715
00:48:18,390 --> 00:48:23,190
and we want to have a couple to do notes to herself.

716
00:48:23,190 --> 00:48:24,830
The first is,

717
00:48:24,830 --> 00:48:25,980
as you might guess,

718
00:48:25,980 --> 00:48:29,810
only let on authenticated user.

719
00:48:29,810 --> 00:48:33,390
Delete their object.

720
00:48:33,390 --> 00:48:39,780
Don't let then delete anyone else's.

721
00:48:39,780 --> 00:48:43,160
We also want to have one other to do,

722
00:48:43,160 --> 00:48:55,430
telling us to clean up a delete any other data files but show shaded with this user.

723
00:48:55,430 --> 00:48:56,760
This doesn't relate now,

724
00:48:56,760 --> 00:48:57,730
but later on,

725
00:48:57,730 --> 00:49:02,630
let's say that this user has a bunch of checks associated with them or a bunch of other

726
00:49:02,630 --> 00:49:03,470
kind of files.

727
00:49:03,470 --> 00:49:05,280
When this user gets deleted,

728
00:49:05,280 --> 00:49:07,320
we don't want their checks to keep running,

729
00:49:07,320 --> 00:49:11,840
and so we're going to have to have some logic in here At some point that cleans up

730
00:49:11,840 --> 00:49:15,160
everything associated with this user But for now,

731
00:49:15,160 --> 00:49:21,030
we don't need to have those things in to The first thing we want to do in this function is

732
00:49:21,030 --> 00:49:24,300
check that the phone number is valid.

733
00:49:24,300 --> 00:49:31,510
We're going to do that with this exact same logic we used and get pretty extensively.

734
00:49:31,510 --> 00:49:39,310
And so I'm just going to copy the whole get function and paste it down in here.

735
00:49:39,310 --> 00:49:46,260
That double comment phone equals the phone that's provided in the query string.

736
00:49:46,260 --> 00:49:47,830
If there is a phone,

737
00:49:47,830 --> 00:49:49,580
we want to look up the user.

738
00:49:49,580 --> 00:49:53,560
If the user can't to be found,

739
00:49:53,560 --> 00:49:58,510
we want to call back A 407 for four.

740
00:49:58,510 --> 00:49:59,970
We want to call back with 400.

741
00:49:59,970 --> 00:50:01,070
That says Air.

742
00:50:01,070 --> 00:50:07,270
I could not find the specified user.

743
00:50:07,270 --> 00:50:11,530
And then from here inside of these two brackets,

744
00:50:11,530 --> 00:50:13,640
it's gonna be some new logic.

745
00:50:13,640 --> 00:50:20,240
So we're going to say data delete and we're gonna be deleting something from the user's

746
00:50:20,240 --> 00:50:23,160
collection identified by that phone number,

747
00:50:23,160 --> 00:50:25,270
and it's gonna pass us back and air.

748
00:50:25,270 --> 00:50:30,970
So we're just telling the users collection to delete that user,

749
00:50:30,970 --> 00:50:34,090
and we want to say that if it's not an error,

750
00:50:34,090 --> 00:50:38,840
call back 200 to the user.

751
00:50:38,840 --> 00:50:40,480
Otherwise,

752
00:50:40,480 --> 00:50:44,570
call back 500.

753
00:50:44,570 --> 00:50:53,070
I could not delete the specified user.

754
00:50:53,070 --> 00:50:55,480
Okay,

755
00:50:55,480 --> 00:50:56,620
so that's it.

756
00:50:56,620 --> 00:50:59,690
That's so we needed for the elite logic.

757
00:50:59,690 --> 00:51:01,880
Let's go ahead and start the at back up.

758
00:51:01,880 --> 00:51:04,200
You're going to use this old get request.

759
00:51:04,200 --> 00:51:06,760
We can see if they get still works,

760
00:51:06,760 --> 00:51:10,410
but we're going to change it to a delete request.

761
00:51:10,410 --> 00:51:13,570
Leave it the same and click Send.

762
00:51:13,570 --> 00:51:15,450
We got a 200 back.

763
00:51:15,450 --> 00:51:16,880
If we go over here,

764
00:51:16,880 --> 00:51:20,530
that 567 object is gone.

765
00:51:20,530 --> 00:51:22,290
So if we send the delete again,

766
00:51:22,290 --> 00:51:23,400
we get the 400.

767
00:51:23,400 --> 00:51:26,560
Could not find the specified user because the delete worked the first time.

768
00:51:26,560 --> 00:51:28,820
So that's the user service.

769
00:51:28,820 --> 00:51:31,780
We have post get put and elite or create,

770
00:51:31,780 --> 00:51:32,000
read,

771
00:51:32,000 --> 00:51:32,510
update,

772
00:51:32,510 --> 00:51:32,980
delete.

773
00:51:32,980 --> 00:51:37,110
And now we can move on to the next section.

