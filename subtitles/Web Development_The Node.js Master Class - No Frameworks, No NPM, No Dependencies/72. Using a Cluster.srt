1
00:00:00,000 --> 00:00:04,430
in this lecture,

2
00:00:04,430 --> 00:00:11,590
we're going to talk about how to use no Js cluster module to spread the work of your

3
00:00:11,590 --> 00:00:16,790
application across all the CPI use available on whatever system you're running on.

4
00:00:16,790 --> 00:00:22,450
Doing that is going to make some major changes to the way index dot Js works.

5
00:00:22,450 --> 00:00:26,510
So I'm actually going to create an alternative index dot Js again and I'm gonna call this

6
00:00:26,510 --> 00:00:29,280
one index dash cluster dot Js.

7
00:00:29,280 --> 00:00:35,950
So I'm going to copy index dot Js to index dash cluster dot Js,

8
00:00:35,950 --> 00:00:39,190
and that will make the modifications to this new file.

9
00:00:39,190 --> 00:00:41,360
And when we started up,

10
00:00:41,360 --> 00:00:42,330
well started with this one.

11
00:00:42,330 --> 00:00:46,110
In order to use the cluster module properly,

12
00:00:46,110 --> 00:00:53,170
we actually need to require to new modules cluster and Os OS is something we used before to

13
00:00:53,170 --> 00:00:58,970
get information about the underlying Cebu resource is and we're gonna use that again to let

14
00:00:58,970 --> 00:01:02,050
us know how much of a cluster we can build.

15
00:01:02,050 --> 00:01:12,500
So let's require cluster equals require cluster and let's require us bridge equals require

16
00:01:12,500 --> 00:01:13,050
os.

17
00:01:13,050 --> 00:01:19,310
When you start up your app on multiple cores,

18
00:01:19,310 --> 00:01:22,370
it is the same thing as starting multiple versions of your app.

19
00:01:22,370 --> 00:01:27,030
So there's certain things we don't want to be running multiple times even though we're

20
00:01:27,030 --> 00:01:29,180
spreading this application across multiple cores.

21
00:01:29,180 --> 00:01:33,490
We don't want our CLI to be running across multiple cores.

22
00:01:33,490 --> 00:01:40,490
We don't need to give inputs to for different See ELISA for running on a four core system.

23
00:01:40,490 --> 00:01:41,980
Similarly,

24
00:01:41,980 --> 00:01:44,720
we don't want our workers to run four times as much.

25
00:01:44,720 --> 00:01:48,610
We set our workers to run at the interval that we thought was appropriate.

26
00:01:48,610 --> 00:01:51,340
We don't want those to run any faster,

27
00:01:51,340 --> 00:01:55,760
so starting four of them on a forecourt system would actually get four times as many

28
00:01:55,760 --> 00:02:00,050
workers running so four times as much stuff happening as we intended.

29
00:02:00,050 --> 00:02:00,580
Instead,

30
00:02:00,580 --> 00:02:04,710
the only thing we really want spread across all of our course is what our server is doing,

31
00:02:04,710 --> 00:02:08,800
which is taking in requests As the server takes in requests.

32
00:02:08,800 --> 00:02:15,700
We want the load to be spread across as many courses possible so as many Htp requests could

33
00:02:15,700 --> 00:02:20,180
be processed per minute as our whole system resource is will allow.

34
00:02:20,180 --> 00:02:25,450
So I'm just going to reorganize this section here a little bit.

35
00:02:25,450 --> 00:02:31,300
I'm going to move the cli and the workers to the top of this innit function,

36
00:02:31,300 --> 00:02:33,350
and I'm gonna put the server at the bottom.

37
00:02:33,350 --> 00:02:35,570
So when node starts up,

38
00:02:35,570 --> 00:02:38,450
it's going to start up in the normal way.

39
00:02:38,450 --> 00:02:44,060
And that first thread that starts is what the cluster module is going to call master.

40
00:02:44,060 --> 00:02:48,400
Everything else that the cluster module creates all the other threads.

41
00:02:48,400 --> 00:02:49,940
We're gonna be called Forks.

42
00:02:49,940 --> 00:02:52,880
We're forking the process to another corvus CPU.

43
00:02:52,880 --> 00:02:58,950
So we need to write logic in here that can tell if I am the master.

44
00:02:58,950 --> 00:03:00,570
I need to perform this behavior.

45
00:03:00,570 --> 00:03:03,920
If I am one of the forked clusters,

46
00:03:03,920 --> 00:03:05,960
actually perform some other behavior.

47
00:03:05,960 --> 00:03:14,040
So what we're going to say is that the workers and the CLI should start on the master

48
00:03:14,040 --> 00:03:18,090
threat and then all these other forks that get created All these other threads,

49
00:03:18,090 --> 00:03:18,390
though,

50
00:03:18,390 --> 00:03:20,370
should be the ones that startup the server,

51
00:03:20,370 --> 00:03:21,880
which my moved it down here.

52
00:03:21,880 --> 00:03:24,320
So the first thing we're gonna say is,

53
00:03:24,320 --> 00:03:28,250
if cluster is master,

54
00:03:28,250 --> 00:03:31,880
then we want to do these two things here.

55
00:03:31,880 --> 00:03:41,710
So I'm gonna place thes inside of this f so these will get started on this first master

56
00:03:41,710 --> 00:03:46,350
threat that get started up when you boot up the application.

57
00:03:46,350 --> 00:03:54,140
But then I'm gonna put in an else and here we're going to paste in server dot in it and

58
00:03:54,140 --> 00:03:54,830
severed in.

59
00:03:54,830 --> 00:03:57,520
It is actually going to start the HDP server.

60
00:03:57,520 --> 00:04:04,350
I'm gonna change his comment to say if we're not on the master thread,

61
00:04:04,350 --> 00:04:09,210
start the http server up here.

62
00:04:09,210 --> 00:04:13,740
We're going to say if we're on the master thread,

63
00:04:13,740 --> 00:04:19,700
start the background workers and the CLI.

64
00:04:19,700 --> 00:04:20,710
Now,

65
00:04:20,710 --> 00:04:26,480
the changes we've made so far aren't going to work because we haven't actually forked this

66
00:04:26,480 --> 00:04:29,340
thread the master thread at all.

67
00:04:29,340 --> 00:04:31,960
And so this else is never going to get called.

68
00:04:31,960 --> 00:04:34,010
There isn't ever going to be a fork started,

69
00:04:34,010 --> 00:04:37,850
so we have to manually fork this process when it's in Master Boat.

70
00:04:37,850 --> 00:04:41,380
So we're going to say for the process and for that,

71
00:04:41,380 --> 00:04:48,250
we're going to call a four loop and we're going to cycle through this four loop the same

72
00:04:48,250 --> 00:04:50,400
number of times as the number.

73
00:04:50,400 --> 00:04:52,120
Of course on the CPU,

74
00:04:52,120 --> 00:04:54,330
that is where the OS module comes in.

75
00:04:54,330 --> 00:04:56,160
So we're gonna say for Hvar,

76
00:04:56,160 --> 00:04:57,710
I equals zero.

77
00:04:57,710 --> 00:05:04,040
I is less than os dot c p use dot length,

78
00:05:04,040 --> 00:05:04,640
remember?

79
00:05:04,640 --> 00:05:04,780
Oh,

80
00:05:04,780 --> 00:05:09,330
SCP use retardants an array with information about all the CPI use.

81
00:05:09,330 --> 00:05:13,400
So getting the length of that array gives you the number of sea pews in the system.

82
00:05:13,400 --> 00:05:16,220
This is similar to what we did in the stats module.

83
00:05:16,220 --> 00:05:18,760
They were gonna call I plus Plus.

84
00:05:18,760 --> 00:05:24,110
So this four loop is going to get called once for each of the number of CP use in the

85
00:05:24,110 --> 00:05:24,540
system.

86
00:05:24,540 --> 00:05:25,150
And so,

87
00:05:25,150 --> 00:05:26,420
for each of the CPI use,

88
00:05:26,420 --> 00:05:31,650
we're gonna call cluster dot fork as this gets called,

89
00:05:31,650 --> 00:05:38,080
this is going to start the app up again and call this primary file our entry file again.

90
00:05:38,080 --> 00:05:41,220
But when it gets called the second time,

91
00:05:41,220 --> 00:05:42,590
it's going to be a fork,

92
00:05:42,590 --> 00:05:44,250
and it will know that it's a fork.

93
00:05:44,250 --> 00:05:45,220
So when it hits,

94
00:05:45,220 --> 00:05:46,750
cluster is master.

95
00:05:46,750 --> 00:05:49,110
This will not be truth e.

96
00:05:49,110 --> 00:05:54,070
And you'll end up in the else where all they will do is start this server dot in it.

97
00:05:54,070 --> 00:06:00,660
You can see this in effect if we start this up because of the logging that we have in place

98
00:06:00,660 --> 00:06:02,650
for the different parts of the system.

99
00:06:02,650 --> 00:06:06,770
So if I start the app up the normal way with index dot yes,

100
00:06:06,770 --> 00:06:10,560
we can see background workers are running servers,

101
00:06:10,560 --> 00:06:12,040
listening servers listening.

102
00:06:12,040 --> 00:06:13,090
See allies running.

103
00:06:13,090 --> 00:06:19,790
What if I started up with this new file we created Node Index dash cluster dot Js

104
00:06:19,790 --> 00:06:22,330
background workers,

105
00:06:22,330 --> 00:06:22,870
air running.

106
00:06:22,870 --> 00:06:31,120
The CLI is running and now we actually have four of each type of server log the servers

107
00:06:31,120 --> 00:06:34,100
listening on 2000 again again again,

108
00:06:34,100 --> 00:06:35,260
2001

109
00:06:35,260 --> 00:06:35,620
Again,

110
00:06:35,620 --> 00:06:35,960
again,

111
00:06:35,960 --> 00:06:36,350
again,

112
00:06:36,350 --> 00:06:38,250
you might be thinking,

113
00:06:38,250 --> 00:06:40,350
How can these different threads lol,

114
00:06:40,350 --> 00:06:42,840
listen on the same port without having a poor conflict?

115
00:06:42,840 --> 00:06:46,770
That is something node is smart enough to resolve on its own.

116
00:06:46,770 --> 00:06:51,150
These different threads are going to share listening on the same port.

117
00:06:51,150 --> 00:06:53,450
But as requests come in,

118
00:06:53,450 --> 00:06:56,730
they'll be delegated to each of the cores,

119
00:06:56,730 --> 00:06:59,660
and they'll each be able to handle some of the load.

120
00:06:59,660 --> 00:07:03,950
If we go back to postman and sent a request to this a p I.

121
00:07:03,950 --> 00:07:05,450
We see it works,

122
00:07:05,450 --> 00:07:05,910
is normal.

123
00:07:05,910 --> 00:07:08,460
We got a 200 back where it would create a token,

124
00:07:08,460 --> 00:07:11,710
and the FBI is functioning as normal.

125
00:07:11,710 --> 00:07:13,600
Except that all these cores air running.

126
00:07:13,600 --> 00:07:21,250
The one issue with this is being able to test or create tests or created test runner.

127
00:07:21,250 --> 00:07:24,940
When your a p I is taking over,

128
00:07:24,940 --> 00:07:27,610
all the cores can be somewhat tricky.

129
00:07:27,610 --> 00:07:29,530
And so if you're going to implement it.

130
00:07:29,530 --> 00:07:34,900
If you have a good reason to implement cluster module and you have some good functionality

131
00:07:34,900 --> 00:07:37,820
that you want to push over two different forks,

132
00:07:37,820 --> 00:07:40,000
two different CP use go ahead and do it.

133
00:07:40,000 --> 00:07:42,850
But be prepared to re factor the way that you're testing.

134
00:07:42,850 --> 00:07:44,250
So with that,

135
00:07:44,250 --> 00:07:47,150
we can kill this and move on to the next lecture.

