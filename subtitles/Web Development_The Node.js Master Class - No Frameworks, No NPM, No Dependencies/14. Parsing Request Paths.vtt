WEBVTT
ï»¿1
00:00:00.000 --> 00:00:07.090
the next thing we need to do to turn this from just something that listens on a port and

2
00:00:07.090 --> 00:00:08.940
says hello world into an a p.

3
00:00:08.940 --> 00:00:15.400
I is start figuring out which resource is people are requesting when they send a request to

4
00:00:15.400 --> 00:00:16.190
the A P I.

5
00:00:16.190 --> 00:00:17.250
In order to do that,

6
00:00:17.250 --> 00:00:22.330
we need to parse the u R L that they are asking for Let's go ahead and clear out our

7
00:00:22.330 --> 00:00:24.490
console in OS X.

8
00:00:24.490 --> 00:00:27.760
It is to command K on that erases everything.

9
00:00:27.760 --> 00:00:28.550
Luckily,

10
00:00:28.550 --> 00:00:34.150
note has a nice helper library for all things related to your L functions,

11
00:00:34.150 --> 00:00:35.760
and that is call the U.

12
00:00:35.760 --> 00:00:36.190
R L.

13
00:00:36.190 --> 00:00:43.640
So let's go ahead and require that and we're assigning it to a variable called Europe.

14
00:00:43.640 --> 00:00:46.640
Okay,

15
00:00:46.640 --> 00:00:49.830
so now we have the or L library available,

16
00:00:49.830 --> 00:01:02.040
and I'm going to just write some comments that lay out exactly what we're trying to do the

17
00:01:02.040 --> 00:01:05.240
first days we want to get the u.

18
00:01:05.240 --> 00:01:06.350
R l and parse it.

19
00:01:06.350 --> 00:01:15.150
Then we want to get the path from that your L.

20
00:01:15.150 --> 00:01:21.480
Then we want to send the response.

21
00:01:21.480 --> 00:01:29.340
And then we went to a log what path the person was asking for,

22
00:01:29.340 --> 00:01:34.620
so that when it request comes in when we look at the tournament or weaken C o User just

23
00:01:34.620 --> 00:01:35.670
asked for,

24
00:01:35.670 --> 00:01:36.440
you know,

25
00:01:36.440 --> 00:01:40.550
slash users or slash admin or slash Whatever.

26
00:01:40.550 --> 00:01:48.890
And for now,

27
00:01:48.890 --> 00:01:51.440
we're going to keep this response the same.

28
00:01:51.440 --> 00:01:53.620
Where stood is going to say hello world,

29
00:01:53.620 --> 00:01:54.620
back to the user.

30
00:01:54.620 --> 00:01:58.220
But these other three sections logging the request path,

31
00:01:58.220 --> 00:01:59.370
getting that path,

32
00:01:59.370 --> 00:02:02.430
getting the Orioles parsing it is what we need to fill in.

33
00:02:02.430 --> 00:02:05.970
And we're going to use the your L library for that.

34
00:02:05.970 --> 00:02:07.680
Okay,

35
00:02:07.680 --> 00:02:10.850
so I want to create a variable called Parse TRL.

36
00:02:10.850 --> 00:02:28.360
And the value of that is going to be you are l dot ports Grech dot your l and then the

37
00:02:28.360 --> 00:02:29.930
second parameter is true.

38
00:02:29.930 --> 00:02:30.540
All right,

39
00:02:30.540 --> 00:02:31.260
What is that?

40
00:02:31.260 --> 00:02:32.080
What does that mean?

41
00:02:32.080 --> 00:02:38.240
This is where we need to start explaining what's coming back from this callback or in this

42
00:02:38.240 --> 00:02:45.850
call back when we create the server and then tell it to listen when a request comes in,

43
00:02:45.850 --> 00:02:50.770
both of these objects get filled out and sent to,

44
00:02:50.770 --> 00:02:51.030
you know,

45
00:02:51.030 --> 00:02:54.980
the meat of this function here every single time the request comes in,

46
00:02:54.980 --> 00:02:57.270
so someone hits,

47
00:02:57.270 --> 00:02:57.980
you know,

48
00:02:57.980 --> 00:03:01.310
local host 3000 this function gets called,

49
00:03:01.310 --> 00:03:03.530
someone hits the coast 3000 again,

50
00:03:03.530 --> 00:03:04.990
this function gets called again,

51
00:03:04.990 --> 00:03:12.010
and each time it does this wreck and this rez or new this request object and this response

52
00:03:12.010 --> 00:03:17.910
object a brand new every time and the wreck object.

53
00:03:17.910 --> 00:03:24.170
The request object contains a whole bunch of information about what that user is asking for

54
00:03:24.170 --> 00:03:24.170
.

55
00:03:24.170 --> 00:03:25.380
In this case,

56
00:03:25.380 --> 00:03:28.220
the thing that we're never going down on is exactly which you are.

57
00:03:28.220 --> 00:03:36.330
L full girl HDP Cohen slash last local host 3000 slash Whatever the user is actually asking

58
00:03:36.330 --> 00:03:37.330
for now,

59
00:03:37.330 --> 00:03:41.750
the second parameter is true because of a little bit of a complicated reason.

60
00:03:41.750 --> 00:03:43.550
When we say true,

61
00:03:43.550 --> 00:03:46.790
we're telling it to parse the query string,

62
00:03:46.790 --> 00:03:56.800
which means to set the parse terrell dot query value at the equivalent as if we had sent

63
00:03:56.800 --> 00:04:00.340
this data to the query string module.

64
00:04:00.340 --> 00:04:02.380
So really were using two modules.

65
00:04:02.380 --> 00:04:07.620
And once we're using the URL module because it contains a whole bunch of functions were

66
00:04:07.620 --> 00:04:14.650
actually passing this true to tell it to call the query string module itself.

67
00:04:14.650 --> 00:04:20.630
These two modules work together and you're l can call query string in order to give you are

68
00:04:20.630 --> 00:04:24.780
you are l object or a party or l object that is fully complete,

69
00:04:24.780 --> 00:04:30.200
including parsing the query string data which will be useful for us later on.

70
00:04:30.200 --> 00:04:31.310
But for now,

71
00:04:31.310 --> 00:04:32.930
we don't really need to worry about it.

72
00:04:32.930 --> 00:04:40.370
All we need to know is that once we do this partial oral is an object that contains a whole

73
00:04:40.370 --> 00:04:46.950
bunch of keys of parts to metadata about the request path or your l that came in.

74
00:04:46.950 --> 00:04:52.370
Now we want to get the actual path from this party or l object.

75
00:04:52.370 --> 00:04:55.550
So I'm gonna create a variable and call it path,

76
00:04:55.550 --> 00:05:05.030
and it is going to be defined as parsed your l dot path name all lower case path name is a

77
00:05:05.030 --> 00:05:07.600
key that set on this object,

78
00:05:07.600 --> 00:05:10.300
and it is exactly what it sounds like.

79
00:05:10.300 --> 00:05:14.340
It is the untrimmed path that the user request.

80
00:05:14.340 --> 00:05:20.550
So if they user requested HDP colon slash slash local host 3000 slash fu,

81
00:05:20.550 --> 00:05:26.330
the path is just the food part and the party or l object would contain a whole bunch of

82
00:05:26.330 --> 00:05:28.340
other things about the host etcetera,

83
00:05:28.340 --> 00:05:29.660
which will get into later.

84
00:05:29.660 --> 00:05:34.570
But for now we just want the path and that's contained in the path name which is now

85
00:05:34.570 --> 00:05:35.850
assigned to this variable path.

86
00:05:35.850 --> 00:05:36.910
Okay,

87
00:05:36.910 --> 00:05:37.800
as I mentioned,

88
00:05:37.800 --> 00:05:38.390
is going to go.

89
00:05:38.390 --> 00:05:42.310
This is the untrimmed path and we're going to want this path trimmed.

90
00:05:42.310 --> 00:05:47.580
So we're going to create another object called True Path.

91
00:05:47.580 --> 00:05:55.120
And we are going to do a simple string Replace with the Reg.

92
00:05:55.120 --> 00:05:59.140
Exe And you can go ahead and try to copy this from the source code.

93
00:05:59.140 --> 00:05:59.670
It's ah,

94
00:05:59.670 --> 00:06:00.350
bit convoluted,

95
00:06:00.350 --> 00:06:03.050
as all rejects it seemed to be.

96
00:06:03.050 --> 00:06:07.280
And then the second parameter is just an empty strength.

97
00:06:07.280 --> 00:06:09.050
What is this?

98
00:06:09.050 --> 00:06:15.440
This is basically just trimming off any extraneous slashes from the path.

99
00:06:15.440 --> 00:06:17.190
When the user sends a request,

100
00:06:17.190 --> 00:06:23.890
they might be sending it to local host slash food or they might be sending it to local host

101
00:06:23.890 --> 00:06:27.020
slash food slash on dso.

102
00:06:27.020 --> 00:06:33.100
We basically just want to trim off the slashes from both sides so that this is a clean your

103
00:06:33.100 --> 00:06:35.250
l and we can understand what they're asking for.

104
00:06:35.250 --> 00:06:37.250
We're going to build our A p.

105
00:06:37.250 --> 00:06:37.410
I,

106
00:06:37.410 --> 00:06:38.080
like many people,

107
00:06:38.080 --> 00:06:45.090
build websites where you know the page at slash fu renders the exact same thing as slash

108
00:06:45.090 --> 00:06:46.020
food slash.

109
00:06:46.020 --> 00:06:46.690
Okay,

110
00:06:46.690 --> 00:06:50.430
Now we're sending the response as normal as I mentioned.

111
00:06:50.430 --> 00:06:51.510
And lastly,

112
00:06:51.510 --> 00:06:57.350
we want to go ahead and log out the path that the user is requesting.

113
00:06:57.350 --> 00:07:03.650
So we're going to say that request is received on this path.

114
00:07:03.650 --> 00:07:08.540
Okay,

115
00:07:08.540 --> 00:07:12.480
so I just save this file and I'm gonna go ahead and try to run it again.

116
00:07:12.480 --> 00:07:17.140
Node index dot Js The server is port listening on Port 3000.

117
00:07:17.140 --> 00:07:20.880
Now gonna once again open up another tab in my terminal.

118
00:07:20.880 --> 00:07:26.850
Do curl local host 3000 slash food.

119
00:07:26.850 --> 00:07:28.330
All right,

120
00:07:28.330 --> 00:07:30.100
I got the hello world response back.

121
00:07:30.100 --> 00:07:32.170
And if we look back in the other tab,

122
00:07:32.170 --> 00:07:33.760
we were actually running the note app,

123
00:07:33.760 --> 00:07:34.180
weaken.

124
00:07:34.180 --> 00:07:36.660
See requests received on path food.

125
00:07:36.660 --> 00:07:39.310
Now let's see that rejects at work.

126
00:07:39.310 --> 00:07:44.050
Let's see if we did local host 3000 slash food slash What would happen?

127
00:07:44.050 --> 00:07:50.300
It's gonna log out that you requested the path food because it's trimming slashes from both

128
00:07:50.300 --> 00:07:50.880
sides.

129
00:07:50.880 --> 00:07:53.850
What if we just do local host 3000?

130
00:07:53.850 --> 00:07:58.750
It's going to say that you asked for a path of nothing of an empty string.

131
00:07:58.750 --> 00:08:02.740
What if you just have local host 3000 and then slash?

132
00:08:02.740 --> 00:08:07.970
It's going to say that again it's an empty strength.

133
00:08:07.970 --> 00:08:12.030
So whether you have something in the path or not,

134
00:08:12.030 --> 00:08:14.070
it's going to take away the slashes.

135
00:08:14.070 --> 00:08:18.410
But one important caveat is it should not take away.

136
00:08:18.410 --> 00:08:21.250
Slash is that live in the middle of a string?

137
00:08:21.250 --> 00:08:21.380
So,

138
00:08:21.380 --> 00:08:22.000
for example,

139
00:08:22.000 --> 00:08:23.000
if you're asking,

140
00:08:23.000 --> 00:08:24.050
you know,

141
00:08:24.050 --> 00:08:32.060
for a resource that several directories up like it is at local host 3000 slash food slash

142
00:08:32.060 --> 00:08:36.080
bar slash Sorry,

143
00:08:36.080 --> 00:08:38.640
I didn't request at 300.

144
00:08:38.640 --> 00:08:46.060
It's supposed to be a 3000 if we coral local host 3000 food slash bar Slash It's going to

145
00:08:46.060 --> 00:08:52.300
tell us that the user requested food slash bar so that middle slash is going to stay there

146
00:08:52.300 --> 00:08:52.300
,

147
00:08:52.300 --> 00:08:56.090
whether or not we have that final slash on the end.

148
00:08:56.090 --> 00:09:00.490
So that is how we're getting the path from the user request.

149
00:09:00.490 --> 00:09:01.560
And for now,

150
00:09:01.560 --> 00:09:02.660
we're just locking it out.

151
00:09:02.660 --> 00:09:06.300
We are obviously going to do things with it momentarily.

152
00:09:06.300 --> 00:09:07.830
But before we do that,

153
00:09:07.830 --> 00:09:13.200
there are other things that we need to grab out of this incoming request so that we can

154
00:09:13.200 --> 00:09:15.750
process the request and return response to the user.

155
00:09:15.750 --> 00:09:16.720
For now,

156
00:09:16.720 --> 00:09:17.950
I'm just gonna kill this server,

157
00:09:17.950 --> 00:09:19.750
clean my terminal out,

158
00:09:19.750 --> 00:09:21.950
and we'll go on to the next lecture

