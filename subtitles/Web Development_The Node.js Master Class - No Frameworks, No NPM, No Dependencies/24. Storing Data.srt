1
00:00:00,000 --> 00:00:04,600
and the next lecture.

2
00:00:04,600 --> 00:00:07,280
We're going to want to start creating routes that right,

3
00:00:07,280 --> 00:00:08,900
data and manipulated.

4
00:00:08,900 --> 00:00:09,760
But before we do that,

5
00:00:09,760 --> 00:00:15,800
we need to set up a regime to write data to the final system and read it back out.

6
00:00:15,800 --> 00:00:17,080
As I mentioned in previous lecture,

7
00:00:17,080 --> 00:00:21,470
we're going to be using the file system as a bit of a key value store of different Jason

8
00:00:21,470 --> 00:00:22,210
Files.

9
00:00:22,210 --> 00:00:26,130
But we need a library in order to set that all up.

10
00:00:26,130 --> 00:00:33,050
So the first thing that we're going to do is create a couple new directories within our app

11
00:00:33,050 --> 00:00:33,050
.

12
00:00:33,050 --> 00:00:37,550
The first directory is going to be called Docked Data.

13
00:00:37,550 --> 00:00:44,480
Since it starts with a dot by convention,

14
00:00:44,480 --> 00:00:46,600
it is a hidden folder.

15
00:00:46,600 --> 00:00:53,230
And that is just because we want to make it clear to anyone looking at this code that the

16
00:00:53,230 --> 00:00:55,760
things inside of dot data is not logic,

17
00:00:55,760 --> 00:01:01,280
but actually just files that are being written as a part of the apse process of running.

18
00:01:01,280 --> 00:01:05,050
The next directory that we're going to bond is a lip directory,

19
00:01:05,050 --> 00:01:09,250
so I'm creating it there.

20
00:01:09,250 --> 00:01:12,930
This live directory is going to have a number of files inside of it eventually,

21
00:01:12,930 --> 00:01:19,440
but for now we are just going to create a library for working with data specifically the

22
00:01:19,440 --> 00:01:21,360
data inside of the dot data folder.

23
00:01:21,360 --> 00:01:23,600
So inside of the lib directory,

24
00:01:23,600 --> 00:01:28,780
I'm going to create a file called data dot Js.

25
00:01:28,780 --> 00:01:43,150
This fire was going to be the library that we used for storing and editing data.

26
00:01:43,150 --> 00:01:59,390
This file is going to have to dependencies.

27
00:01:59,390 --> 00:02:01,650
The first is the file system,

28
00:02:01,650 --> 00:02:03,750
or FS,

29
00:02:03,750 --> 00:02:12,650
And the second is a module called Path,

30
00:02:12,650 --> 00:02:18,800
which we're going to use to normalize the paths to different directories.

31
00:02:18,800 --> 00:02:27,930
Okay,

32
00:02:27,930 --> 00:02:28,720
as normal,

33
00:02:28,720 --> 00:02:41,400
we're going to create a container for this module and at the bottom of the file,

34
00:02:41,400 --> 00:02:43,900
we're going to export it.

35
00:02:43,900 --> 00:02:57,940
Okay.

36
00:02:57,940 --> 00:02:58,410
Now,

37
00:02:58,410 --> 00:02:59,880
for the meat of the file,

38
00:02:59,880 --> 00:03:04,050
the first thing we want to do is create a function for writing data to a file.

39
00:03:04,050 --> 00:03:17,330
So we're gonna call that function lib dot Create this function is gonna take him three

40
00:03:17,330 --> 00:03:18,030
parameters.

41
00:03:18,030 --> 00:03:19,200
A directory.

42
00:03:19,200 --> 00:03:24,280
We're not going to just write data to the dot data folder.

43
00:03:24,280 --> 00:03:28,450
It's We wanted to be held in something analogous to tables or collections.

44
00:03:28,450 --> 00:03:29,880
And so for us,

45
00:03:29,880 --> 00:03:36,280
subdirectories within the dot data folder is going to be like the table or the collection

46
00:03:36,280 --> 00:03:37,060
of keys.

47
00:03:37,060 --> 00:03:37,950
So,

48
00:03:37,950 --> 00:03:38,970
for example,

49
00:03:38,970 --> 00:03:42,580
within the dot data Ford er there might be a user's directory,

50
00:03:42,580 --> 00:03:46,230
and all the files within that directory are going to be all the users.

51
00:03:46,230 --> 00:03:50,050
There's gonna be a different directory called tokens in all the files with him that's of

52
00:03:50,050 --> 00:03:51,500
directory or the tokens.

53
00:03:51,500 --> 00:03:56,810
So the first thing that we want to know when we're creating ah file or writing data to a

54
00:03:56,810 --> 00:03:59,640
file is what directory or what group?

55
00:03:59,640 --> 00:04:04,870
What collection are we actually reading to the next is going to be the file name that we

56
00:04:04,870 --> 00:04:05,220
want.

57
00:04:05,220 --> 00:04:06,250
This actual file,

58
00:04:06,250 --> 00:04:08,110
to be called the Third parameter,

59
00:04:08,110 --> 00:04:09,820
is going to be called data,

60
00:04:09,820 --> 00:04:16,920
and this is the data that's going to be going to the file toe comprise the file itself.

61
00:04:16,920 --> 00:04:17,380
Lastly,

62
00:04:17,380 --> 00:04:18,470
there's going to be a call back.

63
00:04:18,470 --> 00:04:22,470
All right,

64
00:04:22,470 --> 00:04:23,170
Now,

65
00:04:23,170 --> 00:04:27,650
the first thing that we need to do is try to open the file for writing.

66
00:04:27,650 --> 00:04:36,430
For that,

67
00:04:36,430 --> 00:04:40,550
we're going to use fs the file system dot open,

68
00:04:40,550 --> 00:04:47,710
but now we need to pass in an actual path to the file that we want to create.

69
00:04:47,710 --> 00:04:50,270
So before we fill out the rest of this,

70
00:04:50,270 --> 00:04:57,940
we need some way to know exactly where the data directory lives relative to where we are

71
00:04:57,940 --> 00:04:58,360
now.

72
00:04:58,360 --> 00:04:58,950
For that,

73
00:04:58,950 --> 00:05:00,190
we use path.

74
00:05:00,190 --> 00:05:02,860
So just above this function,

75
00:05:02,860 --> 00:05:09,900
I'm actually going to define the base directory of the data for order on the lib objects so

76
00:05:09,900 --> 00:05:20,730
that all these different functions can use it Live,

77
00:05:20,730 --> 00:05:21,190
Don,

78
00:05:21,190 --> 00:05:32,060
we will call baster equals path join Then we're using a constant that's available in every

79
00:05:32,060 --> 00:05:36,890
node application in every file called directory name,

80
00:05:36,890 --> 00:05:40,660
which is basically where we are right now or specifically,

81
00:05:40,660 --> 00:05:44,720
we are living This file is living inside of the lip directory.

82
00:05:44,720 --> 00:05:51,250
So we want to take the directory name where we are now and normalize it.

83
00:05:51,250 --> 00:05:54,710
Uh,

84
00:05:54,710 --> 00:06:00,350
back up the tree one directory and then into the data folder.

85
00:06:00,350 --> 00:06:11,390
What this functions going to do is take these two locations where we are right now and then

86
00:06:11,390 --> 00:06:16,060
the fact that we want we know we want toe jump back up a directory and then go to the data

87
00:06:16,060 --> 00:06:16,510
folder,

88
00:06:16,510 --> 00:06:19,030
it's going to make this into one nice,

89
00:06:19,030 --> 00:06:20,850
clean path without you know,

90
00:06:20,850 --> 00:06:21,870
slash dot,

91
00:06:21,870 --> 00:06:22,110
dot,

92
00:06:22,110 --> 00:06:23,250
slash Etcetera.

93
00:06:23,250 --> 00:06:23,650
In there.

94
00:06:23,650 --> 00:06:26,190
So now we have the brace directory.

95
00:06:26,190 --> 00:06:33,860
So when we're doing fs dot open always to do is call lib dot based directory and then

96
00:06:33,860 --> 00:06:39,160
append on the directory that the user specified.

97
00:06:39,160 --> 00:06:39,270
So,

98
00:06:39,270 --> 00:06:39,830
for example,

99
00:06:39,830 --> 00:06:44,350
we want this file to live in dot data slash users.

100
00:06:44,350 --> 00:06:56,730
So we depend on the directory and then we need to upend on a slash and the actual file name

101
00:06:56,730 --> 00:06:57,930
that they passed.

102
00:06:57,930 --> 00:07:02,330
They're not going to be passing on the dot Jason that it's going to be implied.

103
00:07:02,330 --> 00:07:04,950
So we're going to add on DOT Jason.

104
00:07:04,950 --> 00:07:11,670
We want to open this file for writing,

105
00:07:11,670 --> 00:07:14,540
so we're passing in a W X flag.

106
00:07:14,540 --> 00:07:17,710
There's a lot of flags in the documentation.

107
00:07:17,710 --> 00:07:20,620
This is just the one that works for this particular case,

108
00:07:20,620 --> 00:07:28,810
and what we're going to get back as a call back are two things error and a file descriptor

109
00:07:28,810 --> 00:07:28,810
.

110
00:07:28,810 --> 00:07:39,950
You can think of a file to skip door as a way to uniquely identify a specific file.

111
00:07:39,950 --> 00:07:42,480
We would use that file descriptor to do,

112
00:07:42,480 --> 00:07:43,430
uh,

113
00:07:43,430 --> 00:07:44,180
the next things.

114
00:07:44,180 --> 00:07:47,700
So once that call that comes back to us,

115
00:07:47,700 --> 00:07:48,460
we want to say,

116
00:07:48,460 --> 00:07:52,100
If there's not an air and there is a file descriptor,

117
00:07:52,100 --> 00:07:55,240
then we want to continue with logic there.

118
00:07:55,240 --> 00:07:56,570
Otherwise,

119
00:07:56,570 --> 00:08:00,250
we want to go ahead and call back an error.

120
00:08:00,250 --> 00:08:03,940
Remember that we're using the air back pattern.

121
00:08:03,940 --> 00:08:09,680
So we're just going to call back a string with the air in it.

122
00:08:09,680 --> 00:08:15,700
And this air would be I could not create new file.

123
00:08:15,700 --> 00:08:18,250
It may already exist.

124
00:08:18,250 --> 00:08:21,010
You end up here.

125
00:08:21,010 --> 00:08:25,590
If you trying to f s dot open with a W X flag,

126
00:08:25,590 --> 00:08:28,160
a file that already existed,

127
00:08:28,160 --> 00:08:34,310
We specifically want to open it and error out if the file already exists.

128
00:08:34,310 --> 00:08:36,300
Before we tried to open a created.

129
00:08:36,300 --> 00:08:37,650
All right,

130
00:08:37,650 --> 00:08:39,030
if we make it here,

131
00:08:39,030 --> 00:08:39,790
everything's good.

132
00:08:39,790 --> 00:08:41,060
We created the file,

133
00:08:41,060 --> 00:08:42,220
it didn't exist.

134
00:08:42,220 --> 00:08:48,140
And so now we want to take the data that we got past to us and convert it to a string so

135
00:08:48,140 --> 00:08:52,950
that we can write it to the file so convert data to strength.

136
00:08:52,950 --> 00:08:58,100
We always going to have to convert to a string because this library is going to be used in

137
00:08:58,100 --> 00:09:00,710
such a way that we're just gonna be throwing Jason at it,

138
00:09:00,710 --> 00:09:01,630
not just on strings,

139
00:09:01,630 --> 00:09:03,480
but just data objects at it.

140
00:09:03,480 --> 00:09:04,700
Jason objects,

141
00:09:04,700 --> 00:09:09,290
and we're going to want that converted to a flat string written to a file.

142
00:09:09,290 --> 00:09:11,280
And then when we read it back out.

143
00:09:11,280 --> 00:09:14,050
We want it converted back to a normal Jason object.

144
00:09:14,050 --> 00:09:17,550
So we want to create string data out of it.

145
00:09:17,550 --> 00:09:24,760
And string data is going to equal Jason dot string if I and then whatever data they sent to

146
00:09:24,760 --> 00:09:25,090
us,

147
00:09:25,090 --> 00:09:33,050
So we're converting that data to a string Now we want to write to file and close it.

148
00:09:33,050 --> 00:09:36,530
So for that,

149
00:09:36,530 --> 00:09:38,790
we're gonna use fs dot right file.

150
00:09:38,790 --> 00:09:41,040
We're going to pass.

151
00:09:41,040 --> 00:09:45,950
It is the first parameter the foul descriptor that we got up here.

152
00:09:45,950 --> 00:09:53,900
The second parameter is going to be in the string data that we want to actually right to

153
00:09:53,900 --> 00:09:54,550
that file.

154
00:09:54,550 --> 00:09:56,350
And that's it.

155
00:09:56,350 --> 00:10:01,280
The call back that is going to send us is just going to have an heir parameter in it.

156
00:10:01,280 --> 00:10:09,190
So we only want to continue if there's no air else.

157
00:10:09,190 --> 00:10:10,640
In other words,

158
00:10:10,640 --> 00:10:11,850
if there isn't here,

159
00:10:11,850 --> 00:10:18,850
we want to call back air writing to new file.

160
00:10:18,850 --> 00:10:21,740
This in theory should never get called,

161
00:10:21,740 --> 00:10:22,450
but you never know.

162
00:10:22,450 --> 00:10:24,710
All right,

163
00:10:24,710 --> 00:10:26,770
so we have written to that file,

164
00:10:26,770 --> 00:10:28,360
but we actually still need to close the file,

165
00:10:28,360 --> 00:10:33,670
So we're gonna call f s dot clothes and all we need to pass.

166
00:10:33,670 --> 00:10:34,800
It is the file descriptor.

167
00:10:34,800 --> 00:10:45,990
It's going to pass us back again in error and we want to continue if there is no error.

168
00:10:45,990 --> 00:10:49,250
Otherwise we call back.

169
00:10:49,250 --> 00:10:53,550
You guessed it air closing new file.

170
00:10:53,550 --> 00:10:59,750
If there is no air,

171
00:10:59,750 --> 00:11:02,280
though we call back false,

172
00:11:02,280 --> 00:11:03,450
We're calling back false.

173
00:11:03,450 --> 00:11:05,230
Because remember this parameter,

174
00:11:05,230 --> 00:11:08,330
this air back pattern expects its parameter to be an error,

175
00:11:08,330 --> 00:11:10,750
so a false error is actually a good thing.

176
00:11:10,750 --> 00:11:12,280
All right,

177
00:11:12,280 --> 00:11:15,730
so that's how you write data to these files.

178
00:11:15,730 --> 00:11:22,370
Let's go ahead and just temporarily modify index dot Js so that we can actually see if this

179
00:11:22,370 --> 00:11:22,890
is working.

180
00:11:22,890 --> 00:11:26,440
We're not gonna leave this code in index dot Js is just a convenient way.

181
00:11:26,440 --> 00:11:27,290
Teoh,

182
00:11:27,290 --> 00:11:28,220
test this out.

183
00:11:28,220 --> 00:11:35,400
So the first thing I'm going to do is make another directory within the dot data directory

184
00:11:35,400 --> 00:11:39,550
and call it dot data slash test.

185
00:11:39,550 --> 00:11:49,410
You can see that it's in there now and we're going to write to that test and then we're

186
00:11:49,410 --> 00:11:50,000
gonna delete it.

187
00:11:50,000 --> 00:11:54,280
So within the index dot Js,

188
00:11:54,280 --> 00:12:05,050
I want to require this file that we just created so far data equals require.

189
00:12:05,050 --> 00:12:11,470
Then I want to go up into the live directory and require data.

190
00:12:11,470 --> 00:12:19,110
I'm just going to throw this test right here at the top because we are going to delete it

191
00:12:19,110 --> 00:12:19,590
in us again.

192
00:12:19,590 --> 00:12:26,260
So to test this,

193
00:12:26,260 --> 00:12:40,890
I'm going to call data and then the function that we just created since it's a dot create,

194
00:12:40,890 --> 00:12:49,070
I'm gonna call that than the directory name is going to be tested.

195
00:12:49,070 --> 00:12:52,260
The subdirectory of the dot data folder that we just created.

196
00:12:52,260 --> 00:12:56,060
The file name that I wanted create,

197
00:12:56,060 --> 00:13:02,000
which is the next parameter is going to be new file.

198
00:13:02,000 --> 00:13:07,050
The next parameter is data that we want.

199
00:13:07,050 --> 00:13:11,390
So I'm just going to say that this data should be passed.

200
00:13:11,390 --> 00:13:14,080
Who bar.

201
00:13:14,080 --> 00:13:16,490
And lastly,

202
00:13:16,490 --> 00:13:20,850
it's a callback that's going to pass us in here,

203
00:13:20,850 --> 00:13:32,090
and I'm gonna log at that area if it comes.

204
00:13:32,090 --> 00:13:35,590
All right.

205
00:13:35,590 --> 00:13:39,130
I'm gonna save the file and go ahead and start up the application again,

206
00:13:39,130 --> 00:13:45,560
making sure I'm in the right directory knowed index dot Yes.

207
00:13:45,560 --> 00:13:49,290
This was the error.

208
00:13:49,290 --> 00:13:50,210
False.

209
00:13:50,210 --> 00:13:51,540
So in other words,

210
00:13:51,540 --> 00:13:52,740
there was no error.

211
00:13:52,740 --> 00:13:55,850
So if I look inside of the dock data directory,

212
00:13:55,850 --> 00:14:01,760
I should see inside of test another file called new file.

213
00:14:01,760 --> 00:14:06,950
Jason inside of it is just the Jason stratified object that I sent.

214
00:14:06,950 --> 00:14:08,690
So that all seems to be working.

215
00:14:08,690 --> 00:14:09,090
Fine.

216
00:14:09,090 --> 00:14:11,950
But what happens to be running again?

217
00:14:11,950 --> 00:14:17,190
This was the air could not create new file.

218
00:14:17,190 --> 00:14:18,670
It may already exist.

219
00:14:18,670 --> 00:14:21,340
So when this app started up the second time,

220
00:14:21,340 --> 00:14:26,490
it did what we expected it to dio It tried to create this new file inside of the tests of

221
00:14:26,490 --> 00:14:27,150
directory,

222
00:14:27,150 --> 00:14:31,950
but it aired out because that file got created last time it already existed.

223
00:14:31,950 --> 00:14:36,620
All right,

224
00:14:36,620 --> 00:14:37,700
that seems to be working.

225
00:14:37,700 --> 00:14:38,240
Well,

226
00:14:38,240 --> 00:14:46,670
I'm gonna leave this here for now and go ahead and go back to our data library and create

227
00:14:46,670 --> 00:14:47,450
the next function.

228
00:14:47,450 --> 00:14:51,100
Now that we've created the create function,

229
00:14:51,100 --> 00:14:58,550
the next thing I want to do is be able to read data from a file from a file.

230
00:14:58,550 --> 00:15:03,620
So I'm gonna call this function lib dot reid and it is going to,

231
00:15:03,620 --> 00:15:09,230
except three parameters a directory,

232
00:15:09,230 --> 00:15:14,430
making a collection file name without the dot Jason on it,

233
00:15:14,430 --> 00:15:16,050
and then a call back.

234
00:15:16,050 --> 00:15:29,170
It's going to read the contents of a file by using fs dot reid file and again it's going to

235
00:15:29,170 --> 00:15:32,660
pass the Lib based directory,

236
00:15:32,660 --> 00:15:51,630
plus the directory that specified plus slash and then file name and then done.

237
00:15:51,630 --> 00:16:08,540
Jason is going to read it in a sooty F eight and it's going to receive to call back

238
00:16:08,540 --> 00:16:11,250
parameters back Air and data.

239
00:16:11,250 --> 00:16:24,350
It's going to call back air and data to whoever called it.

240
00:16:24,350 --> 00:16:26,070
Okay,

241
00:16:26,070 --> 00:16:28,460
so let's go ahead and try this out.

242
00:16:28,460 --> 00:16:35,200
I'm gonna go back to index dot Js and I'm gonna modify this tense that we're doing to say

243
00:16:35,200 --> 00:16:37,380
data don't read.

244
00:16:37,380 --> 00:16:43,860
And I want to read in from the same directory.

245
00:16:43,860 --> 00:16:46,300
I want to read that same file name.

246
00:16:46,300 --> 00:16:50,160
I'm not passing any data to it cause I'm reading from it this time,

247
00:16:50,160 --> 00:16:54,510
and I'm going to get back air and data.

248
00:16:54,510 --> 00:16:58,850
So this was the air air,

249
00:16:58,850 --> 00:17:06,450
and this was the data there.

250
00:17:06,450 --> 00:17:07,620
Okay,

251
00:17:07,620 --> 00:17:08,410
let's go ahead and run.

252
00:17:08,410 --> 00:17:08,860
This.

253
00:17:08,860 --> 00:17:12,970
This was the error.

254
00:17:12,970 --> 00:17:13,450
No.

255
00:17:13,450 --> 00:17:15,010
And this was the data food bar.

256
00:17:15,010 --> 00:17:16,820
All right,

257
00:17:16,820 --> 00:17:17,100
now,

258
00:17:17,100 --> 00:17:19,140
what if we tried to read something that didn't exist?

259
00:17:19,140 --> 00:17:20,490
That's a new file,

260
00:17:20,490 --> 00:17:22,260
one that doesn't exist.

261
00:17:22,260 --> 00:17:24,570
So let's start the f again.

262
00:17:24,570 --> 00:17:27,830
This was the air.

263
00:17:27,830 --> 00:17:29,540
No such file or directory.

264
00:17:29,540 --> 00:17:32,020
And this was the data undefined.

265
00:17:32,020 --> 00:17:32,830
So in that case,

266
00:17:32,830 --> 00:17:34,360
the air came back on the data didn't.

267
00:17:34,360 --> 00:17:43,060
And in the next part of this library that I want to build is the ability to update an

268
00:17:43,060 --> 00:17:45,000
existing file with new data.

269
00:17:45,000 --> 00:17:48,260
So I'm gonna call that function lib dot update.

270
00:17:48,260 --> 00:18:08,380
It's going to take the same things that create it.

271
00:18:08,380 --> 00:18:10,050
It's going to take a directory,

272
00:18:10,050 --> 00:18:11,760
a file name,

273
00:18:11,760 --> 00:18:14,050
data call back.

274
00:18:14,050 --> 00:18:24,420
It's going to work much of the same way that create did accept going to have some extra

275
00:18:24,420 --> 00:18:28,070
logic in there for truncating any existing data.

276
00:18:28,070 --> 00:18:31,610
That's part of the file already before it writes in the new data.

277
00:18:31,610 --> 00:18:39,280
So the first thing is going to do is open the file for writing and again,

278
00:18:39,280 --> 00:18:40,950
we're going to use F s start open,

279
00:18:40,950 --> 00:18:44,890
pass it live baster,

280
00:18:44,890 --> 00:18:49,160
and then all the same things that we did before,

281
00:18:49,160 --> 00:19:14,700
but now is going to open up the file with the switch.

282
00:19:14,700 --> 00:19:15,760
Our plus,

283
00:19:15,760 --> 00:19:18,410
the difference between W.

284
00:19:18,410 --> 00:19:22,670
X and R plus is I'm gonna open it up for writing.

285
00:19:22,670 --> 00:19:29,700
But this time I want it to air out if the file doesn't exist yet,

286
00:19:29,700 --> 00:19:31,830
whereas before it had an air,

287
00:19:31,830 --> 00:19:33,510
if the file already existed,

288
00:19:33,510 --> 00:19:35,850
So I'm gonna open up with the or plus switch,

289
00:19:35,850 --> 00:19:40,360
and it's going to come back with an heir and a file descriptor.

290
00:19:40,360 --> 00:19:43,950
Okay,

291
00:19:43,950 --> 00:19:56,630
I only want to continue if there's no air and there is a file descriptor else I want to

292
00:19:56,630 --> 00:19:57,450
call back.

293
00:19:57,450 --> 00:20:02,550
The fact that there's an error could not open the file for updating.

294
00:20:02,550 --> 00:20:10,960
It may not exist.

295
00:20:10,960 --> 00:20:18,520
You I continue on if there is and no air and there is a file descriptor.

296
00:20:18,520 --> 00:20:19,190
And again,

297
00:20:19,190 --> 00:20:21,680
I pretty much want to do this exact same thing.

298
00:20:21,680 --> 00:20:24,940
I want to convert that data that we got to a string,

299
00:20:24,940 --> 00:20:26,550
so I'm just gonna copy it from above.

300
00:20:26,550 --> 00:20:33,890
But now I don't just want to write to that file because there might already be something

301
00:20:33,890 --> 00:20:34,380
there.

302
00:20:34,380 --> 00:20:40,800
That's what I need to do is truncate the contents of that file before I right on top of it

303
00:20:40,800 --> 00:20:40,800
.

304
00:20:40,800 --> 00:20:42,030
For that,

305
00:20:42,030 --> 00:20:49,400
I'm going to use fs dot truncate and I just need to pass it a file descriptor.

306
00:20:49,400 --> 00:20:59,080
It will go ahead and chunky that file for me and pass back in air once again.

307
00:20:59,080 --> 00:21:04,220
I want to continue if there is no air and if there is an air,

308
00:21:04,220 --> 00:21:16,760
I want to call that back air truncating file okay,

309
00:21:16,760 --> 00:21:18,270
but there is no error.

310
00:21:18,270 --> 00:21:33,460
So the next thing I want to do is write to the file and close it for that.

311
00:21:33,460 --> 00:21:35,260
I'm gonna use fs dot right file,

312
00:21:35,260 --> 00:21:43,260
pass it a file descriptor passes the string data just like we did before.

313
00:21:43,260 --> 00:21:46,260
It's gonna pass me back and air,

314
00:21:46,260 --> 00:21:48,160
as you probably guessed.

315
00:21:48,160 --> 00:21:53,160
And I only want to continue if there is no air.

316
00:21:53,160 --> 00:21:55,530
If there is an air,

317
00:21:55,530 --> 00:22:03,550
I don't call that back air righting to existing file.

318
00:22:03,550 --> 00:22:11,090
Let's say there is no air than I want to close the file.

319
00:22:11,090 --> 00:22:13,360
Fs stop close.

320
00:22:13,360 --> 00:22:14,330
Passing a foul,

321
00:22:14,330 --> 00:22:16,150
descriptor it,

322
00:22:16,150 --> 00:22:17,480
passing me back and air.

323
00:22:17,480 --> 00:22:22,400
If there is no air,

324
00:22:22,400 --> 00:22:25,710
I want to call back False as I did before,

325
00:22:25,710 --> 00:22:27,790
which means I'm not calling back in air.

326
00:22:27,790 --> 00:22:28,850
Otherwise,

327
00:22:28,850 --> 00:22:33,550
I want to call that the fact that there was an air closing the file.

328
00:22:33,550 --> 00:22:58,190
Now let's go back to we were manipulating new file Jason in the index dot u s border and go

329
00:22:58,190 --> 00:23:04,200
ahead and modify this example that we're doing to use this new piece of library.

330
00:23:04,200 --> 00:23:06,750
So we're gonna call underscore data.

331
00:23:06,750 --> 00:23:08,550
Don't update.

332
00:23:08,550 --> 00:23:12,280
I want to call it with directory.

333
00:23:12,280 --> 00:23:14,610
The file and now I want overwrites,

334
00:23:14,610 --> 00:23:14,960
um,

335
00:23:14,960 --> 00:23:17,150
new data instead of what we had before.

336
00:23:17,150 --> 00:23:23,160
So before we had food bar Now I want to override it with theirs.

337
00:23:23,160 --> 00:23:35,250
But so we're gonna be sending that object and said and it's going to call back with only a

338
00:23:35,250 --> 00:23:36,010
single air,

339
00:23:36,010 --> 00:23:36,760
No data.

340
00:23:36,760 --> 00:23:40,350
So I can go back to just saying this was the air.

341
00:23:40,350 --> 00:23:45,120
All right,

342
00:23:45,120 --> 00:23:46,160
let's go ahead and run that,

343
00:23:46,160 --> 00:23:46,850
see what happens.

344
00:23:46,850 --> 00:23:49,140
I just have a small subjects air here.

345
00:23:49,140 --> 00:23:54,450
That's because I separated fizz and buzz with a comma rather than a cold.

346
00:23:54,450 --> 00:23:55,550
Alright,

347
00:23:55,550 --> 00:24:00,230
Fixed that running that this was the air false.

348
00:24:00,230 --> 00:24:01,070
There was no air.

349
00:24:01,070 --> 00:24:03,080
So if he opened up new found out Jason,

350
00:24:03,080 --> 00:24:04,780
we should see it now.

351
00:24:04,780 --> 00:24:05,440
Contains fizz,

352
00:24:05,440 --> 00:24:06,640
Buzz and said a food bar,

353
00:24:06,640 --> 00:24:08,060
so updates working.

354
00:24:08,060 --> 00:24:10,350
All right,

355
00:24:10,350 --> 00:24:11,920
now,

356
00:24:11,920 --> 00:24:15,840
what would you guess is going to be the last thing that we need to add to this library

357
00:24:15,840 --> 00:24:16,890
before we move on?

358
00:24:16,890 --> 00:24:17,770
We did create.

359
00:24:17,770 --> 00:24:21,450
We did read with the update was the last part of crowd delete.

360
00:24:21,450 --> 00:24:25,850
So we need to create a piece of this library for deleting a file.

361
00:24:25,850 --> 00:24:35,760
I'm a call it live dot delete,

362
00:24:35,760 --> 00:24:44,160
and it's going to be a function that accepts in the directory the final name and call back

363
00:24:44,160 --> 00:24:44,160
,

364
00:24:44,160 --> 00:24:48,130
and it's going to call back an error.

365
00:24:48,130 --> 00:24:50,830
It doesn't to call back any data because nothing's getting red.

366
00:24:50,830 --> 00:24:53,050
This is going to be a fairly simple one.

367
00:24:53,050 --> 00:24:57,310
We're going to be doing what's called on linking,

368
00:24:57,310 --> 00:25:00,160
which is removing this file from the file system.

369
00:25:00,160 --> 00:25:06,850
We're going to call FS got a link,

370
00:25:06,850 --> 00:25:09,760
then we need to pass it the full path like we did before.

371
00:25:09,760 --> 00:25:12,260
So live the base directory.

372
00:25:12,260 --> 00:25:16,250
Oh,

373
00:25:16,250 --> 00:25:18,710
that same stuff as we've been doing,

374
00:25:18,710 --> 00:25:33,760
it's gonna passes back in there.

375
00:25:33,760 --> 00:25:44,000
There is no air.

376
00:25:44,000 --> 00:25:45,400
We want to call that close.

377
00:25:45,400 --> 00:25:47,160
Otherwise,

378
00:25:47,160 --> 00:25:59,260
all those we want to call back the error that we are having trouble deleting the file.

379
00:25:59,260 --> 00:26:00,580
All right,

380
00:26:00,580 --> 00:26:06,160
let's go ahead and try to use that in our index dot Js,

381
00:26:06,160 --> 00:26:11,260
We're gonna call data delete Best directory,

382
00:26:11,260 --> 00:26:12,160
new file.

383
00:26:12,160 --> 00:26:14,880
We don't need to pass it.

384
00:26:14,880 --> 00:26:15,550
Any data?

385
00:26:15,550 --> 00:26:18,690
Let's run this.

386
00:26:18,690 --> 00:26:21,670
Have a small syntax air here.

387
00:26:21,670 --> 00:26:23,550
I need to go back and fix.

388
00:26:23,550 --> 00:26:28,400
Jason is supposed to be a string,

389
00:26:28,400 --> 00:26:32,130
so there we go.

390
00:26:32,130 --> 00:26:33,190
Let's try this again.

391
00:26:33,190 --> 00:26:40,270
I'm just gonna clear at this console to make it easier to see.

392
00:26:40,270 --> 00:26:44,240
All right,

393
00:26:44,240 --> 00:26:46,260
one more syntax error.

394
00:26:46,260 --> 00:26:50,450
I said leave instead of lib fixed that.

395
00:26:50,450 --> 00:26:53,160
All right,

396
00:26:53,160 --> 00:26:54,810
this was the air false.

397
00:26:54,810 --> 00:26:55,760
There was no air.

398
00:26:55,760 --> 00:27:01,140
So if we go back into this directory and look for new file dot Jason,

399
00:27:01,140 --> 00:27:02,170
you can see that it's gone.

400
00:27:02,170 --> 00:27:03,310
It has been unlinked,

401
00:27:03,310 --> 00:27:05,450
all right.

402
00:27:05,450 --> 00:27:11,250
It still exists in Adam just because that's how Adam were keeping to lead a flat out.

403
00:27:11,250 --> 00:27:13,160
But until you close the window here,

404
00:27:13,160 --> 00:27:15,830
it won't actually be gone out of your editor.

405
00:27:15,830 --> 00:27:16,720
But as you can see,

406
00:27:16,720 --> 00:27:18,290
it's gone from the file system.

407
00:27:18,290 --> 00:27:26,240
Kill this server and we have a library for doing all the court operations within this dot

408
00:27:26,240 --> 00:27:26,400
date.

409
00:27:26,400 --> 00:27:27,420
Afford that we created,

410
00:27:27,420 --> 00:27:28,900
we have greet.

411
00:27:28,900 --> 00:27:29,590
We have read,

412
00:27:29,590 --> 00:27:31,050
we have update and we have delete.

413
00:27:31,050 --> 00:27:36,150
And so now we can move on to creating another service that actually reads and writes data,

414
00:27:36,150 --> 00:27:44,350
and we are going to be calling this library that we have created before we move on.

415
00:27:44,350 --> 00:27:52,090
I gotta follow this to do delete this thing that we promised to delete get rid of this

416
00:27:52,090 --> 00:27:59,670
dependency that we don't need at this second save it and now we can move on to the next

417
00:27:59,670 --> 00:28:00,050
lecture

