WEBVTT
ï»¿1
00:00:00.000 --> 00:00:03.970
So at this point,

2
00:00:03.970 --> 00:00:08.590
we have gotten everything out of this request that the user might have sent us.

3
00:00:08.590 --> 00:00:10.790
We know which full you are.

4
00:00:10.790 --> 00:00:10.990
Well,

5
00:00:10.990 --> 00:00:11.880
they're asking for.

6
00:00:11.880 --> 00:00:14.590
But specifically we want to know the path,

7
00:00:14.590 --> 00:00:16.110
for example slash Fu.

8
00:00:16.110 --> 00:00:21.120
We know the query strings that they might have asked for with its request.

9
00:00:21.120 --> 00:00:25.440
We know which HDP method they're asking or they're sending.

10
00:00:25.440 --> 00:00:27.790
We know the headers that they're sending.

11
00:00:27.790 --> 00:00:30.180
We know the payload that they're sending,

12
00:00:30.180 --> 00:00:30.890
if any.

13
00:00:30.890 --> 00:00:35.220
So now we have all the data of this request.

14
00:00:35.220 --> 00:00:42.380
We want to package it up into a nice object and send it on or route it to some request

15
00:00:42.380 --> 00:00:43.060
handlers.

16
00:00:43.060 --> 00:00:51.140
So our next task is to start defining some sample request handlers and set up a routing

17
00:00:51.140 --> 00:00:51.650
structure,

18
00:00:51.650 --> 00:00:58.100
set up a router so that this http server can look at a request and route it to the right

19
00:00:58.100 --> 00:01:02.340
handler that it needs to go to the way that we're going to conceptualize.

20
00:01:02.340 --> 00:01:03.210
This is pretty simple.

21
00:01:03.210 --> 00:01:08.290
We're going to route requests based on the path that the users asking for.

22
00:01:08.290 --> 00:01:11.990
We want to define handlers that are specific to a path.

23
00:01:11.990 --> 00:01:12.180
So,

24
00:01:12.180 --> 00:01:12.720
for example,

25
00:01:12.720 --> 00:01:16.970
if they ask for slash food that should go to the food handler.

26
00:01:16.970 --> 00:01:19.100
If they ask for slash users,

27
00:01:19.100 --> 00:01:21.000
that should go to the users handler.

28
00:01:21.000 --> 00:01:28.620
So the first thing that we need to do is set up a router that can match incoming paths to

29
00:01:28.620 --> 00:01:30.330
their respective handlers.

30
00:01:30.330 --> 00:01:31.100
Lastly,

31
00:01:31.100 --> 00:01:38.200
we want to set up a structure to allow any requests that doesn't match something within the

32
00:01:38.200 --> 00:01:41.070
router to go to a default handler,

33
00:01:41.070 --> 00:01:43.220
which will be the 404 handler,

34
00:01:43.220 --> 00:01:44.560
the not found handler.

35
00:01:44.560 --> 00:01:51.700
So let's start buying defining a router down at the bottom of the file,

36
00:01:51.700 --> 00:02:04.820
saying that we are defining a request router where it is going to call it a router,

37
00:02:04.820 --> 00:02:07.030
and it's going to be an object.

38
00:02:07.030 --> 00:02:08.590
Each path is unique,

39
00:02:08.590 --> 00:02:11.890
so there's no reason not to use an object.

40
00:02:11.890 --> 00:02:13.320
And for us,

41
00:02:13.320 --> 00:02:15.950
we're going to just define one path for now.

42
00:02:15.950 --> 00:02:18.610
And that path is going to be called Sample.

43
00:02:18.610 --> 00:02:21.440
And when that path gets called,

44
00:02:21.440 --> 00:02:26.080
we want the handler to be the sample handler,

45
00:02:26.080 --> 00:02:30.550
so handlers dot sample should get cold.

46
00:02:30.550 --> 00:02:32.470
Now you might be saying,

47
00:02:32.470 --> 00:02:35.100
What is Handlers down sample?

48
00:02:35.100 --> 00:02:36.550
We didn't find that anywhere.

49
00:02:36.550 --> 00:02:37.410
That's right.

50
00:02:37.410 --> 00:02:40.350
So let's go ahead and also define our handlers.

51
00:02:40.350 --> 00:02:47.250
We're gonna start with an object call handlers,

52
00:02:47.250 --> 00:02:49.890
initialize it to an empty object.

53
00:02:49.890 --> 00:02:51.480
Now,

54
00:02:51.480 --> 00:02:52.960
let's write the sample handler.

55
00:02:52.960 --> 00:03:05.990
It's gonna be a function that accepts in data and a callback,

56
00:03:05.990 --> 00:03:12.380
and we're going to do some stuff inside of it in a moment.

57
00:03:12.380 --> 00:03:16.540
But let's also define a not found him.

58
00:03:16.540 --> 00:03:22.160
We don't need to write the not found handler in the router because it's it's only gonna get

59
00:03:22.160 --> 00:03:25.590
Call it if nothing matches anything else in the router.

60
00:03:25.590 --> 00:03:31.330
So handlers dot not found again.

61
00:03:31.330 --> 00:03:35.450
It's a function that takes in data and a call back,

62
00:03:35.450 --> 00:03:39.080
and eventually we'll have it do something.

63
00:03:39.080 --> 00:03:41.240
So let's talk about what these handlers should do,

64
00:03:41.240 --> 00:03:43.520
and then we'll work on some logic up here,

65
00:03:43.520 --> 00:03:48.510
Teoh actually call these handlers and route incoming requests to these handlers.

66
00:03:48.510 --> 00:03:56.310
The data that it receives is going to be a big block of data of everything contained in

67
00:03:56.310 --> 00:03:56.790
requests.

68
00:03:56.790 --> 00:03:57.130
Basically,

69
00:03:57.130 --> 00:04:01.520
everything we've parse out of the request up here is going to be contained in the data

70
00:04:01.520 --> 00:04:02.760
objects sent to the hamburger.

71
00:04:02.760 --> 00:04:04.910
There were also going to send it a call back,

72
00:04:04.910 --> 00:04:10.950
and we want the handlers to call back when they're done handling the requests and tell us

73
00:04:10.950 --> 00:04:26.170
two things we want to call back a http status code and a payload.

74
00:04:26.170 --> 00:04:29.250
And that payload should be an object.

75
00:04:29.250 --> 00:04:35.520
Because although we haven't enforced Jason yet,

76
00:04:35.520 --> 00:04:41.150
we're starting to build this ap I toe work with Jason exclusively.

77
00:04:41.150 --> 00:04:43.310
Okay.

78
00:04:43.310 --> 00:04:46.950
So even though we don't have a way of calling this handler,

79
00:04:46.950 --> 00:04:53.600
let's just set up the sample handler so that it can call back according to the specs.

80
00:04:53.600 --> 00:04:56.150
So it's going to call back.

81
00:04:56.150 --> 00:04:58.590
Let's say that when you call the sample,

82
00:04:58.590 --> 00:05:00.960
you should get a 406 response,

83
00:05:00.960 --> 00:05:04.310
and it's gonna call back and objects.

84
00:05:04.310 --> 00:05:07.950
And my name is simple.

85
00:05:07.950 --> 00:05:18.290
Handler did not found is going to call back the status code for four and doesn't need a

86
00:05:18.290 --> 00:05:18.730
payload.

87
00:05:18.730 --> 00:05:21.410
All right,

88
00:05:21.410 --> 00:05:23.050
so now we have a router.

89
00:05:23.050 --> 00:05:24.950
We have not found handler,

90
00:05:24.950 --> 00:05:26.280
and we have a sample handler.

91
00:05:26.280 --> 00:05:26.570
Now,

92
00:05:26.570 --> 00:05:32.400
we need to modify our H two b server so that it figures out which hammer to call,

93
00:05:32.400 --> 00:05:38.790
depending on the path of the user is requesting and sends it the data and then receives the

94
00:05:38.790 --> 00:05:44.750
call back data from that handler and sends the response in the correct issue.

95
00:05:44.750 --> 00:05:46.450
Be satis code to the user.

96
00:05:46.450 --> 00:05:47.650
Okay,

97
00:05:47.650 --> 00:05:49.950
let's go back up here.

98
00:05:49.950 --> 00:05:54.320
We want to put all this logic in the request on end handler,

99
00:05:54.320 --> 00:05:57.050
because this is going to get Call it for every request,

100
00:05:57.050 --> 00:05:58.010
regardless,

101
00:05:58.010 --> 00:06:03.320
if it has a payload or not so below where we cap off the buffer.

102
00:06:03.320 --> 00:06:08.540
Let's go ahead and choose the handler.

103
00:06:08.540 --> 00:06:18.520
This request should go to if one is not found used.

104
00:06:18.520 --> 00:06:21.350
The not found hammer.

105
00:06:21.350 --> 00:06:23.000
All right,

106
00:06:23.000 --> 00:06:30.750
so we're going to say that the chosen handler equals Now we want to say if the path that

107
00:06:30.750 --> 00:06:35.970
the user is requesting exists as a key on the router.

108
00:06:35.970 --> 00:06:36.630
For example,

109
00:06:36.630 --> 00:06:40.750
if they're requesting slash sample that exists on the router,

110
00:06:40.750 --> 00:06:43.950
so that requests you get routed to handlers shot sample,

111
00:06:43.950 --> 00:06:46.790
but if it doesn't exist,

112
00:06:46.790 --> 00:06:48.580
if they request slash food,

113
00:06:48.580 --> 00:06:50.220
we want to look at this.

114
00:06:50.220 --> 00:06:50.810
Rather say,

115
00:06:50.810 --> 00:06:54.820
Does this rather have a dot a food key?

116
00:06:54.820 --> 00:06:55.620
It doesn't.

117
00:06:55.620 --> 00:06:59.350
So we should round things to the not found handler instead.

118
00:06:59.350 --> 00:07:14.490
So the chosen handler equals Does the type of router trimmed path exist?

119
00:07:14.490 --> 00:07:18.040
Is it defined?

120
00:07:18.040 --> 00:07:20.120
If the type is not undefined,

121
00:07:20.120 --> 00:07:22.330
that means if it exists,

122
00:07:22.330 --> 00:07:23.900
then the router,

123
00:07:23.900 --> 00:07:29.090
it should go to lives at grounder trimmed path.

124
00:07:29.090 --> 00:07:30.150
Otherwise,

125
00:07:30.150 --> 00:07:34.350
it should go to handlers not found.

126
00:07:34.350 --> 00:07:37.680
Okay,

127
00:07:37.680 --> 00:07:38.850
now we've chosen a handler.

128
00:07:38.850 --> 00:07:47.550
Now we want to construct the data object to send to the handler.

129
00:07:47.550 --> 00:07:51.690
I was gonna call it data,

130
00:07:51.690 --> 00:07:54.750
and we're gonna add a hoping to keys on it.

131
00:07:54.750 --> 00:08:00.330
That comprises all the data that we've parsed out of this request as we've been working

132
00:08:00.330 --> 00:08:00.650
with it.

133
00:08:00.650 --> 00:08:02.370
So we know what the trip path iss.

134
00:08:02.370 --> 00:08:05.290
The trim path is Jim Path.

135
00:08:05.290 --> 00:08:13.790
The query string object is query,

136
00:08:13.790 --> 00:08:14.450
string object,

137
00:08:14.450 --> 00:08:19.850
the method,

138
00:08:19.850 --> 00:08:21.050
his method.

139
00:08:21.050 --> 00:08:25.650
The headers are currently defined as headers.

140
00:08:25.650 --> 00:08:32.600
And the payload is defined right now as a buffer.

141
00:08:32.600 --> 00:08:34.110
If there is any,

142
00:08:34.110 --> 00:08:34.850
if it's not,

143
00:08:34.850 --> 00:08:36.200
if there is none,

144
00:08:36.200 --> 00:08:38.050
it's gonna be an empty string.

145
00:08:38.050 --> 00:08:39.080
Okay,

146
00:08:39.080 --> 00:08:42.250
so that's the data that we want to send to the chosen handler.

147
00:08:42.250 --> 00:08:42.880
Now,

148
00:08:42.880 --> 00:08:44.610
we can actually called the chosen happen.

149
00:08:44.610 --> 00:08:56.760
We can round the request to the handler specified in the router to call that we just need

150
00:08:56.760 --> 00:09:02.150
to call shows in handler because chosen handler now holds the value of whatever that

151
00:09:02.150 --> 00:09:04.350
function waas that it chose.

152
00:09:04.350 --> 00:09:10.570
So shows in handler get called and we pass it.

153
00:09:10.570 --> 00:09:12.460
This data object we just made.

154
00:09:12.460 --> 00:09:15.710
And what we expect back is what we talked about a minute ago.

155
00:09:15.710 --> 00:09:21.350
We expect back a status code and a payload.

156
00:09:21.350 --> 00:09:28.520
But now we want to define some sensible defaults for status,

157
00:09:28.520 --> 00:09:31.700
code and payload on the assumption that some handlers,

158
00:09:31.700 --> 00:09:33.400
like the not found handler,

159
00:09:33.400 --> 00:09:36.530
are going to call back and not have a payload defined.

160
00:09:36.530 --> 00:09:40.160
Other handlers might just call back and not have anything to find,

161
00:09:40.160 --> 00:09:41.180
or they might have all.

162
00:09:41.180 --> 00:09:46.150
So let's define the default status code.

163
00:09:46.150 --> 00:09:50.550
Use the status code.

164
00:09:50.550 --> 00:09:58.190
Call it that by the hammer or default to 200.

165
00:09:58.190 --> 00:10:00.850
We also want to define a default payload.

166
00:10:00.850 --> 00:10:02.650
Use the payload.

167
00:10:02.650 --> 00:10:06.550
Call it back by the handler.

168
00:10:06.550 --> 00:10:11.250
Four default to an empty object.

169
00:10:11.250 --> 00:10:14.450
Okay,

170
00:10:14.450 --> 00:10:16.350
so this status code,

171
00:10:16.350 --> 00:10:26.770
we're gonna say that status code goes type of status code equals number.

172
00:10:26.770 --> 00:10:35.900
Turn every operator status Code Colin 200.

173
00:10:35.900 --> 00:10:37.790
What that means is again,

174
00:10:37.790 --> 00:10:39.070
this is using the turn.

175
00:10:39.070 --> 00:10:39.860
Every operator,

176
00:10:39.860 --> 00:10:42.000
which is a condensed way of using.

177
00:10:42.000 --> 00:10:42.270
Ah,

178
00:10:42.270 --> 00:10:42.640
you know,

179
00:10:42.640 --> 00:10:48.050
if else is saying if the status code is type of number,

180
00:10:48.050 --> 00:10:50.340
then it's good.

181
00:10:50.340 --> 00:10:51.520
We accept any Sasko.

182
00:10:51.520 --> 00:10:55.600
That's a number so defined status code as whatever it is,

183
00:10:55.600 --> 00:10:56.590
it is already.

184
00:10:56.590 --> 00:10:58.400
If it's something other than a number,

185
00:10:58.400 --> 00:11:00.010
including undefined,

186
00:11:00.010 --> 00:11:01.960
then go ahead and to find it to 200.

187
00:11:01.960 --> 00:11:04.060
Now let's do the same for the payload.

188
00:11:04.060 --> 00:11:04.980
The payload,

189
00:11:04.980 --> 00:11:08.590
The only kind of payload we wanted except is a object.

190
00:11:08.590 --> 00:11:14.750
So the payload is if the type of payload equals object,

191
00:11:14.750 --> 00:11:19.970
then it's fine.

192
00:11:19.970 --> 00:11:21.840
Go ahead and define payload as payload,

193
00:11:21.840 --> 00:11:23.850
otherwise to find as an empty object.

194
00:11:23.850 --> 00:11:24.370
So now,

195
00:11:24.370 --> 00:11:27.380
regardless of if they call back a payload or not,

196
00:11:27.380 --> 00:11:31.500
it's going to be either the object they gave us or is going to be an empty object.

197
00:11:31.500 --> 00:11:40.430
But now we can't send an object back down to the user who sent this request.

198
00:11:40.430 --> 00:11:41.450
We need to send a string.

199
00:11:41.450 --> 00:11:45.740
Every payload that we received is now an object.

200
00:11:45.740 --> 00:11:47.770
So go ahead and convert it to a string.

201
00:11:47.770 --> 00:11:59.150
We're gonna call it payload strength,

202
00:11:59.150 --> 00:12:03.740
and we're going to use the standard Jason String.

203
00:12:03.740 --> 00:12:09.420
If I for the payload that we are sending back now,

204
00:12:09.420 --> 00:12:09.760
remember,

205
00:12:09.760 --> 00:12:11.620
this is not the paler that we received.

206
00:12:11.620 --> 00:12:15.090
This is the payload that the handler is sending back to the user.

207
00:12:15.090 --> 00:12:18.560
Finally,

208
00:12:18.560 --> 00:12:21.260
we want to return the response.

209
00:12:21.260 --> 00:12:31.540
So instead of having simply rez end saying hello,

210
00:12:31.540 --> 00:12:31.810
world.

211
00:12:31.810 --> 00:12:35.400
Every time we want to say rez,

212
00:12:35.400 --> 00:12:41.450
right head and then status code.

213
00:12:41.450 --> 00:12:48.400
What this means is reusing the built in right head function that comes on every response

214
00:12:48.400 --> 00:12:53.990
object received by the HDP server to right the status code.

215
00:12:53.990 --> 00:12:59.050
So if we are returning a 200 we are writing that 200 response here.

216
00:12:59.050 --> 00:13:01.120
If it's a 444 or six whatever,

217
00:13:01.120 --> 00:13:05.580
or whatever status code the handler defined were writing it there as well.

218
00:13:05.580 --> 00:13:06.860
Now,

219
00:13:06.860 --> 00:13:10.490
rather than raise and hello world,

220
00:13:10.490 --> 00:13:13.420
we want to raise and the payload string.

221
00:13:13.420 --> 00:13:17.410
So we're gonna swap this string out for a string or new string.

222
00:13:17.410 --> 00:13:25.850
So now we are writing the status code that the Hamlet gave back and we were writing the

223
00:13:25.850 --> 00:13:28.040
payload that the handler gave back.

224
00:13:28.040 --> 00:13:28.630
Jason.

225
00:13:28.630 --> 00:13:29.370
String aside.

226
00:13:29.370 --> 00:13:32.390
Lastly,

227
00:13:32.390 --> 00:13:35.390
let's take this console log,

228
00:13:35.390 --> 00:13:40.490
move it inside of the callback for the chosen handler.

229
00:13:40.490 --> 00:13:45.560
And rather than logging out the payload that we received were going to say that we are

230
00:13:45.560 --> 00:13:55.710
returning this response and we're going toe log out the status code and the payload string

231
00:13:55.710 --> 00:13:57.450
that we're sending back.

232
00:13:57.450 --> 00:14:00.250
Okay,

233
00:14:00.250 --> 00:14:04.650
So toe walk back through this again.

234
00:14:04.650 --> 00:14:07.530
We're calling the chosen handler.

235
00:14:07.530 --> 00:14:09.770
We're sending it a whole bunch of data,

236
00:14:09.770 --> 00:14:12.970
which is all the same data that we spent a few lectures gathering.

237
00:14:12.970 --> 00:14:16.680
We're calling that handler.

238
00:14:16.680 --> 00:14:18.420
We know what's handler to call.

239
00:14:18.420 --> 00:14:20.790
Based on it being defined in the router.

240
00:14:20.790 --> 00:14:22.520
When the handler calls back,

241
00:14:22.520 --> 00:14:25.640
we expect it to be sending us a status code and a payload.

242
00:14:25.640 --> 00:14:30.600
If it doesn't send either those or if he status code is in a number or if the payload isn't

243
00:14:30.600 --> 00:14:31.310
an object,

244
00:14:31.310 --> 00:14:34.320
we default them to 200 empty object,

245
00:14:34.320 --> 00:14:34.990
respectively.

246
00:14:34.990 --> 00:14:39.210
Then we convert the payload to a string using Jason String.

247
00:14:39.210 --> 00:14:44.600
If I we go ahead and return the status code to the user and the payload to the user as a

248
00:14:44.600 --> 00:14:45.110
string,

249
00:14:45.110 --> 00:14:46.720
and then we log out what we did.

250
00:14:46.720 --> 00:14:48.000
Okay,

251
00:14:48.000 --> 00:14:50.880
so I'm gonna save this and go ahead and start the APA.

252
00:14:50.880 --> 00:14:52.410
All right.

253
00:14:52.410 --> 00:14:54.690
I have a syntax error.

254
00:14:54.690 --> 00:14:59.560
This is a good time to point out what errors look like in note.

255
00:14:59.560 --> 00:15:05.580
This is tends to be what it looks like if you have an error that's occurring at the moment

256
00:15:05.580 --> 00:15:05.580
,

257
00:15:05.580 --> 00:15:10.970
that theme app is spinning up and trying to process all the synchronous commands.

258
00:15:10.970 --> 00:15:12.320
In my case,

259
00:15:12.320 --> 00:15:16.850
this error that it caught is that I did var data and didn't have an equal sign.

260
00:15:16.850 --> 00:15:19.310
So I'm gonna go ahead and throw in the equal sign.

261
00:15:19.310 --> 00:15:24.830
It tried to give me some pointers about the error,

262
00:15:24.830 --> 00:15:29.680
so it said that this occurred in index dot Js online 43.

263
00:15:29.680 --> 00:15:31.560
So that's the line that I corrected,

264
00:15:31.560 --> 00:15:38.030
and it pointed out where it was having trouble parsing or under understanding this when you

265
00:15:38.030 --> 00:15:39.050
have syntax,

266
00:15:39.050 --> 00:15:40.560
error unexpected token,

267
00:15:40.560 --> 00:15:43.650
this is generally what it looks like.

268
00:15:43.650 --> 00:15:48.450
It will be a line number and your point to where it's having trouble parsing.

269
00:15:48.450 --> 00:15:52.330
That's not necessarily always the place where your issue is,

270
00:15:52.330 --> 00:15:58.270
but that is the place where the node runtime got tripped up and could no longer understand

271
00:15:58.270 --> 00:15:59.950
the job script that you were trying to write.

272
00:15:59.950 --> 00:16:02.080
So let's try toe started up again.

273
00:16:02.080 --> 00:16:03.900
So we have any other syntax errors.

274
00:16:03.900 --> 00:16:06.110
Not yet.

275
00:16:06.110 --> 00:16:08.120
There might be other syntax errors,

276
00:16:08.120 --> 00:16:12.810
but it didn't catch any in the card of the code that's been executed so far.

277
00:16:12.810 --> 00:16:14.650
But remember,

278
00:16:14.650 --> 00:16:20.760
the only thing that the note runtime is process so far is the synchronous parts.

279
00:16:20.760 --> 00:16:24.530
Everything within here hasn't really been called yet.

280
00:16:24.530 --> 00:16:27.650
And so it might catch certain errors.

281
00:16:27.650 --> 00:16:30.000
It might not catch others others,

282
00:16:30.000 --> 00:16:33.720
such as certain things not being defined when it reaches this point.

283
00:16:33.720 --> 00:16:35.290
For example,

284
00:16:35.290 --> 00:16:38.850
if I tried to use the data object here and never defined data,

285
00:16:38.850 --> 00:16:40.640
I might get an object.

286
00:16:40.640 --> 00:16:44.700
I'm I get an error thrown on Lee during execution.

287
00:16:44.700 --> 00:16:47.230
Not when the at boots up in the first place,

288
00:16:47.230 --> 00:16:48.530
but things such as,

289
00:16:48.530 --> 00:16:54.040
like a missing equal sign that'll get caught when you're trying to start up the app because

290
00:16:54.040 --> 00:16:56.350
it's actually having trouble parsing the job script.

291
00:16:56.350 --> 00:16:57.950
All right,

292
00:16:57.950 --> 00:17:00.920
so let's go ahead and go back to Postman.

293
00:17:00.920 --> 00:17:02.440
Now that the apus started,

294
00:17:02.440 --> 00:17:05.690
I'm going to switch back to a post Request.

295
00:17:05.690 --> 00:17:11.990
This is the body that I'm sending those of the headers that I'm sending.

296
00:17:11.990 --> 00:17:14.000
This is all from a previous lecture.

297
00:17:14.000 --> 00:17:16.230
Gonna ho head and send it off.

298
00:17:16.230 --> 00:17:22.660
You can see that I got back for four not found and an empty object back.

299
00:17:22.660 --> 00:17:23.750
All right,

300
00:17:23.750 --> 00:17:31.410
so the server said I'm returning this response 44 and the object Now,

301
00:17:31.410 --> 00:17:36.080
let's go ahead and request a path that the server should recognize,

302
00:17:36.080 --> 00:17:39.230
and it should recognise the sample path I should.

303
00:17:39.230 --> 00:17:42.300
And there we get back a four or six and this object.

304
00:17:42.300 --> 00:17:49.860
So let's go ahead and do look host 1000 slash sample send request and great.

305
00:17:49.860 --> 00:17:51.110
I got back this object.

306
00:17:51.110 --> 00:17:52.550
The name is Sample Hammer.

307
00:17:52.550 --> 00:17:55.380
That's the object that I wrote back and it's been turned into Jason.

308
00:17:55.380 --> 00:17:59.550
And the status code that I got is 406 Not acceptable.

309
00:17:59.550 --> 00:18:01.040
Don't read too much into that.

310
00:18:01.040 --> 00:18:03.210
I just called it for 06 Just for this example,

311
00:18:03.210 --> 00:18:04.330
you can call it anything you want.

312
00:18:04.330 --> 00:18:09.470
So again the server logged out what it was doing.

313
00:18:09.470 --> 00:18:15.610
It's returning this response for 06 code and that if we request,

314
00:18:15.610 --> 00:18:16.090
you know,

315
00:18:16.090 --> 00:18:17.960
sample slash blah,

316
00:18:17.960 --> 00:18:18.670
blah blah,

317
00:18:18.670 --> 00:18:25.550
I'm gonna get another 44 because that showed up to the server as this whole path.

318
00:18:25.550 --> 00:18:28.800
It looked for that whole path as a key on this router.

319
00:18:28.800 --> 00:18:29.590
Couldn't find it.

320
00:18:29.590 --> 00:18:33.550
But if I do sample slash,

321
00:18:33.550 --> 00:18:35.410
it finds it.

322
00:18:35.410 --> 00:18:37.530
If I do sample without the slash,

323
00:18:37.530 --> 00:18:38.640
it finds it.

324
00:18:38.640 --> 00:18:39.800
Because,

325
00:18:39.800 --> 00:18:40.170
remember,

326
00:18:40.170 --> 00:18:42.320
we're trimming off all the slashes.

327
00:18:42.320 --> 00:18:48.450
If I do sample and at a query strain,

328
00:18:48.450 --> 00:18:54.670
it still finds it because it's parsing the query string separately and really just checking

329
00:18:54.670 --> 00:18:56.350
the path when it comes to routing.

330
00:18:56.350 --> 00:18:58.160
All right,

331
00:18:58.160 --> 00:19:00.740
so it looks like we're routing pretty well.

332
00:19:00.740 --> 00:19:03.870
The http status code getting returned.

333
00:19:03.870 --> 00:19:08.020
The Jason is getting returned as a string.

334
00:19:08.020 --> 00:19:11.660
And so the routings working the handlers are working as well.

335
00:19:11.660 --> 00:19:14.390
Now we can move on to the next lecture.

