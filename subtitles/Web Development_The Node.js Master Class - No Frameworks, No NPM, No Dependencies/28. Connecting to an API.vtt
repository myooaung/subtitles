WEBVTT
﻿1
00:00:00.000 --> 00:00:05.680
when you're building applications in node,

2
00:00:05.680 --> 00:00:11.160
One of the most common task that you're going to have to do is integrate with another AP I

3
00:00:11.160 --> 00:00:12.900
integrate with some third party.

4
00:00:12.900 --> 00:00:14.500
When tasked with this,

5
00:00:14.500 --> 00:00:21.860
many developers will need to go to that third party and look for a no Js library that they

6
00:00:21.860 --> 00:00:27.880
provide or look for a no Js or NPM library that someone else has written for interacting

7
00:00:27.880 --> 00:00:29.330
with that ap I.

8
00:00:29.330 --> 00:00:32.510
But there is another way to integrate.

9
00:00:32.510 --> 00:00:40.440
You can simply craft http messages or https messages and send them off to the third party,

10
00:00:40.440 --> 00:00:41.100
a p I.

11
00:00:41.100 --> 00:00:42.650
In this lecture,

12
00:00:42.650 --> 00:00:46.280
I'm going to show you how to do that for this app.

13
00:00:46.280 --> 00:00:48.530
We want to integrate with twilio.

14
00:00:48.530 --> 00:00:49.600
Twilio,

15
00:00:49.600 --> 00:00:50.760
if you haven't heard of it,

16
00:00:50.760 --> 00:00:57.570
allows you to provisioned and manipulate phone numbers in order to take and receive calls

17
00:00:57.570 --> 00:01:00.970
or taken receive SMS messages or video calls anything like that.

18
00:01:00.970 --> 00:01:06.520
So we're going to use Twilio to send the SMS alerts to our users,

19
00:01:06.520 --> 00:01:09.550
telling them if their checks are up or down.

20
00:01:09.550 --> 00:01:12.830
And so before we do that full integration,

21
00:01:12.830 --> 00:01:19.910
we'd like to write a little library that integrates with twilio and allows us to send an

22
00:01:19.910 --> 00:01:21.320
SMS message.

23
00:01:21.320 --> 00:01:24.450
So I'm gonna go to the helpers file.

24
00:01:24.450 --> 00:01:30.780
I'm gonna start crafting a little function that will let us send in SMS via twilio.

25
00:01:30.780 --> 00:01:42.450
So I'm gonna call this helpers dot send twilio SMS.

26
00:01:42.450 --> 00:01:50.060
It is going to be a function that takes in a phone number that we need to send to the

27
00:01:50.060 --> 00:01:51.570
message that we want to send,

28
00:01:51.570 --> 00:01:54.050
which would be a string and a call back.

29
00:01:54.050 --> 00:02:00.910
The first thing that the functions going to want to do is validate the parameters.

30
00:02:00.910 --> 00:02:20.450
So we're going to say that the phone number should be a stream and it should have the

31
00:02:20.450 --> 00:02:26.500
length of 10 core default to force the message.

32
00:02:26.500 --> 00:02:53.040
It should also be a string with a length greater than zero and the length smaller than or

33
00:02:53.040 --> 00:02:54.450
equal to 1600.

34
00:02:54.450 --> 00:02:58.550
Cause that's the maximum characters we can send through an SMS on Giulio.

35
00:02:58.550 --> 00:03:06.660
And before I forget,

36
00:03:06.660 --> 00:03:11.250
this is a little typo there.

37
00:03:11.250 --> 00:03:11.470
Yeah,

38
00:03:11.470 --> 00:03:13.340
All right,

39
00:03:13.340 --> 00:03:15.420
so we have the two parameters that would have come in,

40
00:03:15.420 --> 00:03:25.790
and we want to say that if phone and message continue on otherwise we're gonna call that

41
00:03:25.790 --> 00:03:32.550
the air using the air back pattern giving in parameters,

42
00:03:32.550 --> 00:03:37.050
we're missing or invalid.

43
00:03:37.050 --> 00:03:47.550
But if everything was fine,

44
00:03:47.550 --> 00:03:52.910
we want to configure the request payload that we're going to send it.

45
00:03:52.910 --> 00:03:53.380
Twilio.

46
00:03:53.380 --> 00:03:58.680
Since this course is not about writing twilio APS,

47
00:03:58.680 --> 00:04:01.830
I'm not going to go through the twilio docks in detail.

48
00:04:01.830 --> 00:04:06.920
I'll just briefly mention how this integration works.

49
00:04:06.920 --> 00:04:10.460
We're going to send a payload to TWILIO.

50
00:04:10.460 --> 00:04:13.080
We're gonna have to send it to a P.

51
00:04:13.080 --> 00:04:15.550
I doubt twilio dot com as a post,

52
00:04:15.550 --> 00:04:23.790
and we're going to send it to and accounts slash messages and point with certain headers,

53
00:04:23.790 --> 00:04:30.300
and that will automatically send an SMS message to the number that we specified.

54
00:04:30.300 --> 00:04:32.350
So when crafting this payload,

55
00:04:32.350 --> 00:04:42.950
we're going to say that payload equals from it's gonna equal config twilio from phone.

56
00:04:42.950 --> 00:04:47.960
So we're going to add an object to our config called twilio,

57
00:04:47.960 --> 00:04:50.520
and it's going to have a key on it called from phone,

58
00:04:50.520 --> 00:04:53.200
which is the sender phone that we are using.

59
00:04:53.200 --> 00:04:59.260
We want to say to is going to be whatever number is provided,

60
00:04:59.260 --> 00:05:00.550
plus the country code.

61
00:05:00.550 --> 00:05:06.450
We're going to see if the body is whatever the messages.

62
00:05:06.450 --> 00:05:10.720
So this payload needs to get sent to Tokyo.

63
00:05:10.720 --> 00:05:21.370
So now we want to string if I the payload and then configure the request details.

64
00:05:21.370 --> 00:05:40.080
So we are going to use the query string module to string.

65
00:05:40.080 --> 00:05:43.250
If I this payload as opposed to Jason String defying,

66
00:05:43.250 --> 00:05:48.390
which means above,

67
00:05:48.390 --> 00:05:51.380
we're going to need to require query string.

68
00:05:51.380 --> 00:06:06.250
What?

69
00:06:06.250 --> 00:06:07.050
We're up here.

70
00:06:07.050 --> 00:06:13.130
We're going to have to send a request to an https endpoint,

71
00:06:13.130 --> 00:06:17.450
so we know that we're going to need the https module.

72
00:06:17.450 --> 00:06:26.950
The HDP in https modules are pretty versatile.

73
00:06:26.950 --> 00:06:32.720
Not only do they contain functions that let you start http or https server,

74
00:06:32.720 --> 00:06:39.180
but they also contain functions that let you craft and send off http or https requests.

75
00:06:39.180 --> 00:06:42.170
So since we need to talk to an https endpoint,

76
00:06:42.170 --> 00:06:45.300
we're going to use the HDP s module,

77
00:06:45.300 --> 00:06:49.610
which is the same module that we use when we were creating our https server.

78
00:06:49.610 --> 00:06:54.480
Now we need to create the request details,

79
00:06:54.480 --> 00:07:00.550
which contains all the information about the HDP s request that we are about to send off.

80
00:07:00.550 --> 00:07:03.850
So the protocol,

81
00:07:03.850 --> 00:07:05.510
as I mentioned,

82
00:07:05.510 --> 00:07:07.230
is going to be https,

83
00:07:07.230 --> 00:07:09.350
the host name.

84
00:07:09.350 --> 00:07:12.170
It's going to be a P.

85
00:07:12.170 --> 00:07:13.950
I got twilio dot com.

86
00:07:13.950 --> 00:07:26.020
The method is going to be capital post the path is going to be this long twilio path,

87
00:07:26.020 --> 00:07:28.080
which is just how their a p I works.

88
00:07:28.080 --> 00:07:41.830
2010 04 01 That is a a p I version of theirs accounts slash Then we're gonna in this string

89
00:07:41.830 --> 00:07:54.240
and put in a Tulio account I d So twilio count s I d And then start the string back up with

90
00:07:54.240 --> 00:07:56.880
another slash and then messages.

91
00:07:56.880 --> 00:07:57.770
Jason.

92
00:07:57.770 --> 00:07:59.750
Okay,

93
00:07:59.750 --> 00:08:07.870
Now we need to include an authentication header for basic http authentication So that is

94
00:08:07.870 --> 00:08:09.340
going to be config.

95
00:08:09.340 --> 00:08:16.850
That twilio dot account s i d as it was a moment ago than Colin.

96
00:08:16.850 --> 00:08:22.930
And then config twilio dot off token.

97
00:08:22.930 --> 00:08:26.760
So now you can see that it is twilio object we're creating is gonna have to have at least

98
00:08:26.760 --> 00:08:33.670
the parameters If from phone and account s I d and an off token now,

99
00:08:33.670 --> 00:08:38.950
we're going to explicitly state the other headers that we need to declare.

100
00:08:38.950 --> 00:08:50.950
We need to say that content type is going to be application slash x www form.

101
00:08:50.950 --> 00:08:52.850
You're out encoded.

102
00:08:52.850 --> 00:08:56.960
This is not a Jason ap,

103
00:08:56.960 --> 00:09:00.380
I This is a more traditional a p I.

104
00:09:00.380 --> 00:09:07.430
And so we're going to need to send it as this contact content type instead of a Jason

105
00:09:07.430 --> 00:09:11.350
content type and rather than Jason String defying it.

106
00:09:11.350 --> 00:09:12.990
That is why we query,

107
00:09:12.990 --> 00:09:13.910
string string,

108
00:09:13.910 --> 00:09:18.150
fight it because we need to make it more like a normal foreign being posted.

109
00:09:18.150 --> 00:09:19.210
Lastly,

110
00:09:19.210 --> 00:09:26.150
the content link something we need to declare explicitly.

111
00:09:26.150 --> 00:09:29.910
And to get the length we're going to use the buffer module,

112
00:09:29.910 --> 00:09:34.470
which is not something that you need to declare as a dependency of the talk.

113
00:09:34.470 --> 00:09:36.420
It's just a global available to you.

114
00:09:36.420 --> 00:09:42.350
We're gonna say that buffer bite,

115
00:09:42.350 --> 00:09:44.850
capital length,

116
00:09:44.850 --> 00:09:48.450
string payload.

117
00:09:48.450 --> 00:09:57.440
So this function is going to get the bite length of this string ified payload that we query

118
00:09:57.440 --> 00:09:57.710
string,

119
00:09:57.710 --> 00:09:58.470
string ified.

120
00:09:58.470 --> 00:10:02.770
And that's just a function available on the buffer module,

121
00:10:02.770 --> 00:10:04.480
which is why we're invoking buffer.

122
00:10:04.480 --> 00:10:09.330
So that is the entire request details object.

123
00:10:09.330 --> 00:10:13.350
Now we need to create a request and then send it off.

124
00:10:13.350 --> 00:10:16.450
So we're going to Winstanley.

125
00:10:16.450 --> 00:10:26.070
She ate the request object by declaring it that bar request equals https.

126
00:10:26.070 --> 00:10:28.650
That module we required dot request,

127
00:10:28.650 --> 00:10:33.790
and then we're gonna pass it in the request details.

128
00:10:33.790 --> 00:10:36.810
So we string if I to pay load.

129
00:10:36.810 --> 00:10:43.110
We created a bunch of https request details.

130
00:10:43.110 --> 00:10:48.610
Now reusing https dot Request to actually send off all those details,

131
00:10:48.610 --> 00:10:57.900
and it's going to pass us back a response object with in the response when the response

132
00:10:57.900 --> 00:10:58.650
comes back,

133
00:10:58.650 --> 00:11:03.750
we want to grab the status of the scent request.

134
00:11:03.750 --> 00:11:07.050
They don't tell us if it was successful or not.

135
00:11:07.050 --> 00:11:13.000
So the status is going to equal response rez dot status coat.

136
00:11:13.000 --> 00:11:19.950
Now we want to call that to our original caller successfully.

137
00:11:19.950 --> 00:11:35.350
If the request went so we want to say if status equals 200 for status equals two a one,

138
00:11:35.350 --> 00:11:37.350
either one is fine.

139
00:11:37.350 --> 00:11:44.220
We want to call back false calling back false because we're using the air back pattern and

140
00:11:44.220 --> 00:11:45.150
there is no air.

141
00:11:45.150 --> 00:11:46.780
Otherwise,

142
00:11:46.780 --> 00:11:59.600
we want to call back status code returned waas and then just tell them whatever it waas All

143
00:11:59.600 --> 00:11:59.920
right,

144
00:11:59.920 --> 00:12:03.150
so that is three request object,

145
00:12:03.150 --> 00:12:07.050
and that is what is going to happen when the request comes back.

146
00:12:07.050 --> 00:12:13.180
But now we actually need to send the request off right before we do that,

147
00:12:13.180 --> 00:12:19.490
we need to do to other things we need to bind to an error event in case an air happens then

148
00:12:19.490 --> 00:12:21.890
we need to add the payload string payload.

149
00:12:21.890 --> 00:12:24.790
Then we need to actually stand off the request.

150
00:12:24.790 --> 00:12:36.870
So bind to the air event so it doesn't get thrown.

151
00:12:36.870 --> 00:12:41.030
We don't want any air toe killed the thread.

152
00:12:41.030 --> 00:12:45.120
So we're going to say that request on air.

153
00:12:45.120 --> 00:12:50.850
So when the request that we created emits an event called Air or if it admits an event

154
00:12:50.850 --> 00:12:51.540
called error,

155
00:12:51.540 --> 00:12:56.480
we want to invoke this function,

156
00:12:56.480 --> 00:13:04.550
which will simply call back the air to our request.

157
00:13:04.550 --> 00:13:08.030
Now,

158
00:13:08.030 --> 00:13:10.060
we want to add the payload to the request,

159
00:13:10.060 --> 00:13:12.360
which is done in a separate step.

160
00:13:12.360 --> 00:13:15.690
So we're gonna say request wreck dot right,

161
00:13:15.690 --> 00:13:18.580
and then add the string payload.

162
00:13:18.580 --> 00:13:21.250
All right.

163
00:13:21.250 --> 00:13:23.500
Lastly,

164
00:13:23.500 --> 00:13:30.540
we want to end the request and ending the request is the same as sending it off.

165
00:13:30.540 --> 00:13:31.750
So we want to say wreck.

166
00:13:31.750 --> 00:13:34.610
And once we do that,

167
00:13:34.610 --> 00:13:39.260
once the application hits this point is actually going to send the request off.

168
00:13:39.260 --> 00:13:41.590
And when the request comes back,

169
00:13:41.590 --> 00:13:44.150
it's going to involve what happens inside of there.

170
00:13:44.150 --> 00:13:48.830
So the callback could either get called because an air happened or because it came back

171
00:13:48.830 --> 00:13:49.970
with a status code.

172
00:13:49.970 --> 00:13:50.700
Now,

173
00:13:50.700 --> 00:13:53.290
before this works,

174
00:13:53.290 --> 00:13:59.510
we to go to our config file and add all those twilio parameters that we mentioned.

175
00:13:59.510 --> 00:14:03.590
So we're going to say that twilio is itself an object,

176
00:14:03.590 --> 00:14:05.080
and inside of that,

177
00:14:05.080 --> 00:14:07.200
it has account s i D.

178
00:14:07.200 --> 00:14:10.650
It has off token,

179
00:14:10.650 --> 00:14:15.450
and it has from phone.

180
00:14:15.450 --> 00:14:22.430
Now,

181
00:14:22.430 --> 00:14:28.340
there are two ways that you can get the values that you want to put in here.

182
00:14:28.340 --> 00:14:35.500
You could sign up for a twilio account and they will provide you staging tokens that you

183
00:14:35.500 --> 00:14:38.250
can use without having to pay for anything.

184
00:14:38.250 --> 00:14:41.890
And they will give you a staging account s i d.

185
00:14:41.890 --> 00:14:46.540
As staging off token and they'll let you choose which from phone you want to use.

186
00:14:46.540 --> 00:14:50.920
Or you can just go into the get hub that is linked on this lecture.

187
00:14:50.920 --> 00:14:56.020
And look at the code that we've been writing and the account s I D.

188
00:14:56.020 --> 00:14:58.650
And off token will be provided there,

189
00:14:58.650 --> 00:15:00.150
and you can just copy it in.

190
00:15:00.150 --> 00:15:03.370
Copying it in is exactly what I'm going to do.

191
00:15:03.370 --> 00:15:05.710
And there we go.

192
00:15:05.710 --> 00:15:07.940
That came straight from our get hub.

193
00:15:07.940 --> 00:15:10.150
And you're welcome to use these as well.

194
00:15:10.150 --> 00:15:20.220
Now I'm going to modify our index dot Js to invoke this helper so that we can see that the

195
00:15:20.220 --> 00:15:24.440
scent twilio SMS function that we just wrote actually works.

196
00:15:24.440 --> 00:15:30.350
So I'm gonna go back to Index and right at the top.

197
00:15:30.350 --> 00:15:35.000
Que rid of this?

198
00:15:35.000 --> 00:15:37.620
I'm going to say Helper,

199
00:15:37.620 --> 00:15:39.650
that sent Tulio SMS.

200
00:15:39.650 --> 00:15:42.630
Now I'm going to just make up a number here.

201
00:15:42.630 --> 00:15:49.350
4151234567 And it should receive the message.

202
00:15:49.350 --> 00:15:51.050
Hello?

203
00:15:51.050 --> 00:16:04.000
Then we're gonna log out the air.

204
00:16:04.000 --> 00:16:05.520
All right,

205
00:16:05.520 --> 00:16:06.550
so let's start this up,

206
00:16:06.550 --> 00:16:10.300
OK?

207
00:16:10.300 --> 00:16:15.550
Looks like we have a little syntax error when we're setting the content length.

208
00:16:15.550 --> 00:16:22.070
We should not have terminated it with a semi colon to go back to index and try this again.

209
00:16:22.070 --> 00:16:31.680
It looks like I made another typo when I was crafting this,

210
00:16:31.680 --> 00:16:39.540
and that is that the http s must have a colon on it.

211
00:16:39.540 --> 00:16:40.310
Similarly,

212
00:16:40.310 --> 00:16:42.220
if you were doing the HDP protocol,

213
00:16:42.220 --> 00:16:43.650
you need to use a coping as well.

214
00:16:43.650 --> 00:16:46.110
Alright,

215
00:16:46.110 --> 00:16:46.860
let's try again.

216
00:16:46.860 --> 00:16:56.440
The status code that we got back was 400 which likely meant that this phone every reused

217
00:16:56.440 --> 00:16:57.770
was not valid.

218
00:16:57.770 --> 00:17:03.350
So let's use a one that is more likely to be riel that say,

219
00:17:03.350 --> 00:17:03.850
uh,

220
00:17:03.850 --> 00:17:11.050
reference that old 1980 song 8375309 Try that.

221
00:17:11.050 --> 00:17:14.550
All right,

222
00:17:14.550 --> 00:17:16.370
this was the air False.

223
00:17:16.370 --> 00:17:20.860
So had we been using real production twilio credentials,

224
00:17:20.860 --> 00:17:24.490
Tulio would have sent off a really SMS to this number.

225
00:17:24.490 --> 00:17:29.020
Since we're using test credentials that we got from TWILIO for free,

226
00:17:29.020 --> 00:17:34.070
it's just telling us that there was no air and had this been production,

227
00:17:34.070 --> 00:17:36.060
the SMS would have sent for real.

228
00:17:36.060 --> 00:17:40.230
If you do go to twilio and get credentials of your own,

229
00:17:40.230 --> 00:17:44.080
go ahead and place them here for your staging credentials and for your production

230
00:17:44.080 --> 00:17:46.550
credentials placed him down there.

231
00:17:46.550 --> 00:17:47.800
All right,

232
00:17:47.800 --> 00:17:50.200
so I'm just going to get rid of this since it's working.

233
00:17:50.200 --> 00:17:52.830
Kill server.

234
00:17:52.830 --> 00:17:58.350
And now we have a library that can send SMS so we can move on to the next lecture.

