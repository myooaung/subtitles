WEBVTT
ï»¿1
00:00:00.000 --> 00:00:11.170
Welcome to the know J s masterclass,

2
00:00:11.170 --> 00:00:17.300
where you're going to learn to build applications in raw no Js with no frameworks and no

3
00:00:17.300 --> 00:00:19.370
external libraries together,

4
00:00:19.370 --> 00:00:26.300
we're going to build three pieces of software arrest full A P I A Web G Y and a terminal

5
00:00:26.300 --> 00:00:28.650
based CLI command my foot room.

6
00:00:28.650 --> 00:00:32.020
And you're going to do all of this from scratch.

7
00:00:32.020 --> 00:00:34.550
Just a text editor and a terminal.

8
00:00:34.550 --> 00:00:36.150
Nobody else is code.

9
00:00:36.150 --> 00:00:38.010
Nobody else is frameworks.

10
00:00:38.010 --> 00:00:40.050
Nobody else's libraries,

11
00:00:40.050 --> 00:00:46.340
just plain old JavaScript and nodes runtime we won't be using in PM at all.

12
00:00:46.340 --> 00:00:52.130
Just note your APS won't even have a package dot Jason file because we don't need any

13
00:00:52.130 --> 00:00:53.510
dependency management.

14
00:00:53.510 --> 00:00:54.750
After all,

15
00:00:54.750 --> 00:00:57.750
your APS won't have any dependencies to manage.

16
00:00:57.750 --> 00:00:59.830
Now I know what you're thinking.

17
00:00:59.830 --> 00:01:03.610
Building fully featured applications with no dependencies,

18
00:01:03.610 --> 00:01:05.070
no NPM,

19
00:01:05.070 --> 00:01:06.290
no libraries,

20
00:01:06.290 --> 00:01:07.290
no frameworks.

21
00:01:07.290 --> 00:01:08.450
How is that possible?

22
00:01:08.450 --> 00:01:12.750
You're about to find out and I promise you you're going to love it.

23
00:01:12.750 --> 00:01:15.480
Let me tell you a secret about no Js.

24
00:01:15.480 --> 00:01:19.550
It is powerful all by itself.

25
00:01:19.550 --> 00:01:21.080
If you have a second,

26
00:01:21.080 --> 00:01:22.850
take a look at the no Js docks.

27
00:01:22.850 --> 00:01:28.550
Did you know that you can hash passwords and encrypt strings with just a few lines of code

28
00:01:28.550 --> 00:01:28.550
.

29
00:01:28.550 --> 00:01:34.130
Did you know you can write files buying two events and even dropped down to C plus plus all

30
00:01:34.130 --> 00:01:40.840
within plain old No Js as you come to see many of the most popular in PM libraries are

31
00:01:40.840 --> 00:01:45.550
redundant and unneeded because node supports that functionality natively.

32
00:01:45.550 --> 00:01:47.430
I bet you didn't know that.

33
00:01:47.430 --> 00:01:49.840
No Js has testing built right in,

34
00:01:49.840 --> 00:01:50.290
did you?

35
00:01:50.290 --> 00:01:51.630
It does.

36
00:01:51.630 --> 00:01:53.520
It has an assertion library you can use.

37
00:01:53.520 --> 00:01:55.900
You don't even need mocha or chai.

38
00:01:55.900 --> 00:02:01.030
As with all JavaScript that supports string interpolation that lets you create 10 plated

39
00:02:01.030 --> 00:02:05.300
views so you don't need an M V C framework like express er attempt later,

40
00:02:05.300 --> 00:02:10.450
like handlebars starting a server and routing requests can be done with a few dozen lines

41
00:02:10.450 --> 00:02:10.950
of code.

42
00:02:10.950 --> 00:02:12.980
So if you're building an A P I,

43
00:02:12.980 --> 00:02:16.540
you don't need happy sales or express for that either.

44
00:02:16.540 --> 00:02:19.170
And if you need to build a command line tool,

45
00:02:19.170 --> 00:02:23.190
you'll be happy to learn that reading from and writing to the console or out of the box

46
00:02:23.190 --> 00:02:23.850
features.

47
00:02:23.850 --> 00:02:25.250
But wait,

48
00:02:25.250 --> 00:02:25.740
you say,

49
00:02:25.740 --> 00:02:27.960
Isn't it just easier to use frameworks?

50
00:02:27.960 --> 00:02:30.670
Isn't it faster to use NPM modules?

51
00:02:30.670 --> 00:02:34.820
Isn't it more convenient to just copy and paste together other people's code rather than

52
00:02:34.820 --> 00:02:35.550
write your own.

53
00:02:35.550 --> 00:02:36.880
Yes,

54
00:02:36.880 --> 00:02:38.850
of course it ISS.

55
00:02:38.850 --> 00:02:40.870
There's a reason most Dev's never learned.

56
00:02:40.870 --> 00:02:41.890
Plain know J s.

57
00:02:41.890 --> 00:02:44.780
There's a reason most people build an express.

58
00:02:44.780 --> 00:02:48.090
There's a reason most people can't recognize any of the functions,

59
00:02:48.090 --> 00:02:52.560
and then no Js docks if you want to be most people.

60
00:02:52.560 --> 00:02:56.240
If you want to be an ordinary dev and have a common skill set,

61
00:02:56.240 --> 00:02:58.050
this course isn't for you.

62
00:02:58.050 --> 00:03:01.380
This course is a master class.

63
00:03:01.380 --> 00:03:05.250
It is for developers who want uncommon abilities.

64
00:03:05.250 --> 00:03:07.750
Do you want to write your own framework?

65
00:03:07.750 --> 00:03:10.510
How about author your own useful modules?

66
00:03:10.510 --> 00:03:13.850
This course is going to teach you what you need to know to accomplish that.

67
00:03:13.850 --> 00:03:19.280
Do you want to be able to fix other libraries when they break and submit pull requests to

68
00:03:19.280 --> 00:03:21.600
your favorite projects to make them better and stronger?

69
00:03:21.600 --> 00:03:24.350
Then this course is the way forward.

70
00:03:24.350 --> 00:03:27.720
On a more basic level.

71
00:03:27.720 --> 00:03:30.650
If you've got imposter syndrome,

72
00:03:30.650 --> 00:03:33.450
this course is the cure.

73
00:03:33.450 --> 00:03:36.350
If you've got an inferiority complex,

74
00:03:36.350 --> 00:03:41.530
if you feel like everyone else knows more than you and your sick of people mentioning

75
00:03:41.530 --> 00:03:41.810
things,

76
00:03:41.810 --> 00:03:44.500
you've never heard of and building things you can't understand.

77
00:03:44.500 --> 00:03:47.450
This course was designed just for you.

78
00:03:47.450 --> 00:03:48.810
After this,

79
00:03:48.810 --> 00:03:50.690
there will be nothing you haven't heard off.

80
00:03:50.690 --> 00:03:52.650
There will be nothing you can't do.

81
00:03:52.650 --> 00:03:58.970
I'm going to present to you every piece of the no Js docks and you are going to write code

82
00:03:58.970 --> 00:04:04.670
using at least one function from almost every non deprecate ID section of those docks.

83
00:04:04.670 --> 00:04:07.290
You're going to learn the history of note.

84
00:04:07.290 --> 00:04:09.620
You're going to learn how it works in detail.

85
00:04:09.620 --> 00:04:13.280
You're going to learn how to make it work for you.

86
00:04:13.280 --> 00:04:20.010
My goal for this course is to show you how beautiful note is and to take your skill set up

87
00:04:20.010 --> 00:04:20.870
to the next level.

88
00:04:20.870 --> 00:04:22.560
But be fair,

89
00:04:22.560 --> 00:04:23.050
warned.

90
00:04:23.050 --> 00:04:25.610
This course is not going to be quick,

91
00:04:25.610 --> 00:04:27.420
and it certainly isn't going to be easy,

92
00:04:27.420 --> 00:04:29.410
but it will be worth it.

93
00:04:29.410 --> 00:04:31.560
If you're looking for a challenge,

94
00:04:31.560 --> 00:04:34.160
you've come to the right place to ah,

95
00:04:34.160 --> 00:04:35.130
very poorly.

96
00:04:35.130 --> 00:04:36.600
Paraphrase JFK.

97
00:04:36.600 --> 00:04:40.250
We do these things not because they are easy,

98
00:04:40.250 --> 00:04:42.800
but because they are hard.

99
00:04:42.800 --> 00:04:46.040
Welcome to the no Js masterclass

