WEBVTT
ï»¿1
00:00:00.000 --> 00:00:04.480
congratulations.

2
00:00:04.480 --> 00:00:11.850
You have made it through the section on building and a P I in raw no Js with no libraries

3
00:00:11.850 --> 00:00:12.970
and no frameworks.

4
00:00:12.970 --> 00:00:13.810
Bravo.

5
00:00:13.810 --> 00:00:19.500
All the rest of the sections of this course should be a lot easier for you if this was

6
00:00:19.500 --> 00:00:20.200
challenging.

7
00:00:20.200 --> 00:00:20.890
Don't worry,

8
00:00:20.890 --> 00:00:22.770
it just gets easier from here.

9
00:00:22.770 --> 00:00:24.980
But if you made it through this section,

10
00:00:24.980 --> 00:00:26.780
you should be very proud of yourself.

11
00:00:26.780 --> 00:00:27.690
So now,

12
00:00:27.690 --> 00:00:28.880
before we move on,

13
00:00:28.880 --> 00:00:35.290
we're going to go over all the node libraries and modules that we used in this lecture

14
00:00:35.290 --> 00:00:40.330
Siris in this section so that you can start to familiarize yourself with the no

15
00:00:40.330 --> 00:00:45.600
documentation a little bit and also just recap what we did this,

16
00:00:45.600 --> 00:00:47.170
if you haven't seen it before,

17
00:00:47.170 --> 00:00:52.020
is the no Js documentation that's available on their website.

18
00:00:52.020 --> 00:00:53.140
By the time you're viewing this,

19
00:00:53.140 --> 00:00:54.690
this might change a little bit.

20
00:00:54.690 --> 00:00:58.770
Just make sure that you are viewing node version eight point something.

21
00:00:58.770 --> 00:00:59.740
Right now,

22
00:00:59.740 --> 00:01:03.320
the LTs release of node is a 0.9 point four,

23
00:01:03.320 --> 00:01:08.950
but that could bump up a minor or patch version number at any time.

24
00:01:08.950 --> 00:01:10.900
In no particular order.

25
00:01:10.900 --> 00:01:16.750
One of the modules that we used in this lecture series was command line options.

26
00:01:16.750 --> 00:01:22.610
Command line options is what we were just speaking about in the last lecture.

27
00:01:22.610 --> 00:01:28.070
The fact that we were able to start note with environmental variables such as node

28
00:01:28.070 --> 00:01:33.740
underscore debug allowed us to get our logging under control so that we weren't logging

29
00:01:33.740 --> 00:01:35.310
tons of things to the console.

30
00:01:35.310 --> 00:01:40.910
There's also a whole bunch of other command line options that you can start node with and

31
00:01:40.910 --> 00:01:43.300
will score a few of these as time goes on.

32
00:01:43.300 --> 00:01:48.690
Another module that we use was console for the same reason we did.

33
00:01:48.690 --> 00:01:51.300
Consul dot log a lot,

34
00:01:51.300 --> 00:01:57.900
and you learned that you can pass different kinds of arguments to console dot log in order

35
00:01:57.900 --> 00:01:59.480
to change the color.

36
00:01:59.480 --> 00:02:04.850
There's also a whole bunch of other things that you can do with conso dot log or use other

37
00:02:04.850 --> 00:02:09.500
console functions such as dot count or dot error dot group.

38
00:02:09.500 --> 00:02:12.730
Another model that we use was crypto.

39
00:02:12.730 --> 00:02:16.460
If you remember when we were creating the user service,

40
00:02:16.460 --> 00:02:18.930
when we would post to users,

41
00:02:18.930 --> 00:02:21.710
we would have to hash their password.

42
00:02:21.710 --> 00:02:24.750
And for that we use the crypto module.

43
00:02:24.750 --> 00:02:25.980
It's built in,

44
00:02:25.980 --> 00:02:33.420
create H Mac and shot 2 56 functions allowed us to hash those passwords and also hash them

45
00:02:33.420 --> 00:02:38.850
again in the token service when we needed to compare a cent password to one that we had

46
00:02:38.850 --> 00:02:39.480
stored.

47
00:02:39.480 --> 00:02:43.950
Another module that we used in this section was file system,

48
00:02:43.950 --> 00:02:46.500
which we refer to as F S.

49
00:02:46.500 --> 00:02:51.410
F s allowed us to read from the file system right to the file system,

50
00:02:51.410 --> 00:02:52.800
open files,

51
00:02:52.800 --> 00:02:56.360
truncate files on link files and ah,

52
00:02:56.360 --> 00:03:02.190
whole bunch of other things synchronously and a synchronously F s is a very useful module.

53
00:03:02.190 --> 00:03:04.000
And if you're building applications in node,

54
00:03:04.000 --> 00:03:06.960
this will probably be one that you're using.

55
00:03:06.960 --> 00:03:13.370
Perhaps more than any other Global's Global's is another module that we did not ever have

56
00:03:13.370 --> 00:03:15.010
to require because,

57
00:03:15.010 --> 00:03:16.430
as his name implies,

58
00:03:16.430 --> 00:03:21.230
Global's is just a collection of things that become globally available to you.

59
00:03:21.230 --> 00:03:24.050
If you remember when we were creating based directories,

60
00:03:24.050 --> 00:03:30.700
we used underscore underscore directory name a lot in order to resolve our path or create a

61
00:03:30.700 --> 00:03:33.080
long path that could be resolved later.

62
00:03:33.080 --> 00:03:38.770
We also did module dot exports within our file in order to export the contents of a file

63
00:03:38.770 --> 00:03:40.960
into another one that was requiring it.

64
00:03:40.960 --> 00:03:48.350
Speaking of require require is another global and require allows us to import the contents

65
00:03:48.350 --> 00:03:50.570
of one file into another.

66
00:03:50.570 --> 00:03:55.010
So all these global's have been important to us as we've been using them.

67
00:03:55.010 --> 00:03:57.100
And as you use node,

68
00:03:57.100 --> 00:04:00.050
you'll use the other global's available as well.

69
00:04:00.050 --> 00:04:07.000
Two modules that we used at the beginning When we're just setting up or http and https

70
00:04:07.000 --> 00:04:07.970
servers were,

71
00:04:07.970 --> 00:04:09.150
as the name implies,

72
00:04:09.150 --> 00:04:13.110
the HDP module and the H two B s module.

73
00:04:13.110 --> 00:04:16.480
These ones allowed us to create new servers.

74
00:04:16.480 --> 00:04:19.870
Listen on ports https allowed us to listen on,

75
00:04:19.870 --> 00:04:23.990
poured securely with self sign SSL certificates.

76
00:04:23.990 --> 00:04:24.870
But remember,

77
00:04:24.870 --> 00:04:32.390
the http and https also allowed us to create and craft HTP requests that could be sent to

78
00:04:32.390 --> 00:04:38.780
http or https endpoints in order for us to perform our checks and actually check whether

79
00:04:38.780 --> 00:04:42.300
these girls configured by the users or up or down.

80
00:04:42.300 --> 00:04:42.740
So,

81
00:04:42.740 --> 00:04:50.240
http and https are very useful both for listening for HDP connections and making outbound

82
00:04:50.240 --> 00:04:52.250
htp requests as well.

83
00:04:52.250 --> 00:04:57.850
There is a module which is actually just called modules.

84
00:04:57.850 --> 00:04:58.160
Now,

85
00:04:58.160 --> 00:05:03.680
this is kind of a meta module that you never really use yourself.

86
00:05:03.680 --> 00:05:10.550
It's really just documenting the fact that modules the ability to require import different

87
00:05:10.550 --> 00:05:14.280
functions that are scoped to whatever variable you assign them.

88
00:05:14.280 --> 00:05:21.300
That whole thing exists and is part of the node experience that's all encapsulated in this

89
00:05:21.300 --> 00:05:21.670
module.

90
00:05:21.670 --> 00:05:21.820
So,

91
00:05:21.820 --> 00:05:22.450
in a way,

92
00:05:22.450 --> 00:05:25.550
just by using node and doing requiring,

93
00:05:25.550 --> 00:05:27.650
you have used this module.

94
00:05:27.650 --> 00:05:29.220
If you remember,

95
00:05:29.220 --> 00:05:33.880
we were setting up the data library as well as the logging library.

96
00:05:33.880 --> 00:05:35.600
We used path a lot.

97
00:05:35.600 --> 00:05:43.030
We were using PATH in order to resolve our path and normalize it and make it clean enough

98
00:05:43.030 --> 00:05:48.070
to be able to read in a certificate or write to a file system in a coherent way.

99
00:05:48.070 --> 00:05:51.220
Another module was process.

100
00:05:51.220 --> 00:05:52.570
If you remember,

101
00:05:52.570 --> 00:06:00.920
process not off was one of the global's that we access in order to determine what command

102
00:06:00.920 --> 00:06:05.150
line options have been sent to us when this got started up.

103
00:06:05.150 --> 00:06:12.010
And so there are other process Global's that you can use dot off is just one example.

104
00:06:12.010 --> 00:06:16.200
But the way that we used on off you can use the others as well.

105
00:06:16.200 --> 00:06:17.570
Query strings,

106
00:06:17.570 --> 00:06:21.100
query strings is a module that we used early on,

107
00:06:21.100 --> 00:06:22.550
and then more recently,

108
00:06:22.550 --> 00:06:29.000
when we needed to take a euro that was full of path and query string parameters and

109
00:06:29.000 --> 00:06:35.060
exploded into a more coherent object that separated out the host name from the path and the

110
00:06:35.060 --> 00:06:40.650
query string we use that were originally taking in HTP requests with the server.

111
00:06:40.650 --> 00:06:41.160
And then,

112
00:06:41.160 --> 00:06:41.930
more recently,

113
00:06:41.930 --> 00:06:48.440
when we're making http requests out from us to whatever you are out that we wanted to check

114
00:06:48.440 --> 00:06:50.470
string decoder.

115
00:06:50.470 --> 00:06:57.980
It's something that we used early on in order to get the A load parsed that the users had

116
00:06:57.980 --> 00:07:04.340
been sending in and parse it as utf eight string decoder isn't really used that often,

117
00:07:04.340 --> 00:07:05.670
but when you do use it,

118
00:07:05.670 --> 00:07:09.120
such as for parsing and incoming payload into a buffer,

119
00:07:09.120 --> 00:07:10.650
it's extremely useful.

120
00:07:10.650 --> 00:07:13.300
Another module that we've been using,

121
00:07:13.300 --> 00:07:14.710
especially in the workers,

122
00:07:14.710 --> 00:07:15.720
is timers.

123
00:07:15.720 --> 00:07:19.650
Timers is another module that we don't need to require explicitly.

124
00:07:19.650 --> 00:07:22.620
It just exposes some global's to us,

125
00:07:22.620 --> 00:07:30.130
similar to the kind of global sick it exposed in the browser as it pertains to timing that

126
00:07:30.130 --> 00:07:35.910
is set interval set time out and a few others we've been using set interval when it comes

127
00:07:35.910 --> 00:07:40.850
to making sure our workers fire every minute or every hour as it were.

128
00:07:40.850 --> 00:07:44.800
Another module that we used early on is your l.

129
00:07:44.800 --> 00:07:51.230
When it came to parsing out the host name the path name etcetera from the Earl.

130
00:07:51.230 --> 00:07:52.630
We used the U.

131
00:07:52.630 --> 00:07:59.560
R L module and brought in some query straight module usage as well utilities.

132
00:07:59.560 --> 00:08:01.010
More recently,

133
00:08:01.010 --> 00:08:09.030
we just used the util dot debug log functions in order to set up that note,

134
00:08:09.030 --> 00:08:11.500
underscore debug regime,

135
00:08:11.500 --> 00:08:17.650
where we can use that startup command line option in order to say which things should be

136
00:08:17.650 --> 00:08:19.980
Console log in which things should not.

137
00:08:19.980 --> 00:08:24.350
The utility class has a bunch of other really useful functions in there.

138
00:08:24.350 --> 00:08:28.060
It also has a bunch of deprecating things that you should probably stay away from in my

139
00:08:28.060 --> 00:08:34.020
sorority using them another library that we didn't need to require but we did use was

140
00:08:34.020 --> 00:08:34.610
buffers,

141
00:08:34.610 --> 00:08:35.420
If you remember,

142
00:08:35.420 --> 00:08:38.460
when we were compressing and decompressing a file,

143
00:08:38.460 --> 00:08:39.310
for example,

144
00:08:39.310 --> 00:08:45.410
we were moving from a string into a buffer and then back to a string.

145
00:08:45.410 --> 00:08:46.720
And similarly,

146
00:08:46.720 --> 00:08:50.040
when we were decoding that same file,

147
00:08:50.040 --> 00:08:56.960
we went from a base 64 string up into a new buffer and then back to a plain text Cherie

148
00:08:56.960 --> 00:08:58.680
Buffers air really useful.

149
00:08:58.680 --> 00:09:04.210
It's really how Node thinks of a represents streaming data payload data,

150
00:09:04.210 --> 00:09:10.450
such as when we did HDP incoming payloads and you'll be using them a lot.

151
00:09:10.450 --> 00:09:18.620
Z Live Module is something that we only used during the law compression and decompression

152
00:09:18.620 --> 00:09:19.700
lecture zeal.

153
00:09:19.700 --> 00:09:26.040
It provides a few useful functions and different options for zipping,

154
00:09:26.040 --> 00:09:27.530
inflating G,

155
00:09:27.530 --> 00:09:28.220
zipping,

156
00:09:28.220 --> 00:09:29.240
deflating,

157
00:09:29.240 --> 00:09:29.950
etcetera.

158
00:09:29.950 --> 00:09:32.640
So if you need to compress data,

159
00:09:32.640 --> 00:09:34.950
look no further than the lab module.

160
00:09:34.950 --> 00:09:36.380
Lastly,

161
00:09:36.380 --> 00:09:37.510
as I mentioned,

162
00:09:37.510 --> 00:09:40.030
we have been using the streaming module,

163
00:09:40.030 --> 00:09:46.700
especially as it pertains to the incoming payload that we are parsing when users make a

164
00:09:46.700 --> 00:09:50.810
request or a post with a Jason payload.

165
00:09:50.810 --> 00:09:53.510
We stream it in a little bit at a time,

166
00:09:53.510 --> 00:09:56.670
as opposed to trying to read it all at one time.

167
00:09:56.670 --> 00:10:02.200
So that is all of the node modules that we used in this section.

168
00:10:02.200 --> 00:10:03.850
It was a whole bunch of them,

169
00:10:03.850 --> 00:10:11.820
and in the next sections we will slowly use all of the's remaining modules or at least

170
00:10:11.820 --> 00:10:16.400
mentioned why you wouldn't want to use them or why you would want to use them well,

171
00:10:16.400 --> 00:10:17.050
eventually,

172
00:10:17.050 --> 00:10:24.340
at least address in passing all of the modules listed here and after eat section in our

173
00:10:24.340 --> 00:10:25.310
lecture series,

174
00:10:25.310 --> 00:10:33.810
we will return to this documentation and talk about which modules we just went over.

175
00:10:33.810 --> 00:10:37.340
This is so that you after you finish this course,

176
00:10:37.340 --> 00:10:43.660
can look at this no Js documentation and quickly identify what buffer is.

177
00:10:43.660 --> 00:10:48.150
What console is what file system is etcetera.

178
00:10:48.150 --> 00:10:49.820
So without further do,

179
00:10:49.820 --> 00:10:53.820
we can move on to the next poll section in this course,

180
00:10:53.820 --> 00:11:01.230
which is about building a Web app front end for this rest for MP I that we do is built on

181
00:11:01.230 --> 00:11:01.810
the back end.

182
00:11:01.810 --> 00:11:07.660
So we've been spending a whole bunch of time on the back end and now we get to do some

183
00:11:07.660 --> 00:11:08.580
front and stuff.

184
00:11:08.580 --> 00:11:10.880
Although since it's no Js,

185
00:11:10.880 --> 00:11:15.690
of course you're still going to be a lot of what feels like back and work involved.

