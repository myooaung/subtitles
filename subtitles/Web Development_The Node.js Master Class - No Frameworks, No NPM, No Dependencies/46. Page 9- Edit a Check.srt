1
00:00:00,000 --> 00:00:07,860
Now we've reached the lecture for the last template that we have to create.

2
00:00:07,860 --> 00:00:08,760
As you can see,

3
00:00:08,760 --> 00:00:11,520
throwing together these templates does take some time,

4
00:00:11,520 --> 00:00:12,460
but thankfully,

5
00:00:12,460 --> 00:00:13,860
we've reached the end.

6
00:00:13,860 --> 00:00:19,690
The last thing that we need to do is create a new template that will allow us to edit a

7
00:00:19,690 --> 00:00:20,150
check.

8
00:00:20,150 --> 00:00:24,150
We can see that this route already exists on our about er.

9
00:00:24,150 --> 00:00:31,390
It is called checks slash ed it and it maps to handlers dot checks edit so we can go to our

10
00:00:31,390 --> 00:00:32,050
handlers,

11
00:00:32,050 --> 00:00:41,150
copy down one that we already have and now edit it for checks at it.

12
00:00:41,150 --> 00:00:48,960
So trains this comment to edit a check the title.

13
00:00:48,960 --> 00:00:51,650
It's going to be checked details,

14
00:00:51,650 --> 00:00:57,550
and the body class will be checks at it.

15
00:00:57,550 --> 00:01:01,130
The template that should be fetched is checks.

16
00:01:01,130 --> 00:01:01,530
Edit.

17
00:01:01,530 --> 00:01:05,780
So now I'm going to go and touch templates.

18
00:01:05,780 --> 00:01:07,210
Checks.

19
00:01:07,210 --> 00:01:16,620
Edit html Great that Open it up and now we can paste in form or get huh?

20
00:01:16,620 --> 00:01:18,760
This full template,

21
00:01:18,760 --> 00:01:20,390
as you can see it,

22
00:01:20,390 --> 00:01:26,760
is just as big and complicated as the template that allows us to create a new check.

23
00:01:26,760 --> 00:01:28,200
It's much the same,

24
00:01:28,200 --> 00:01:33,360
except that it also includes the ability to delete a check as part of another form.

25
00:01:33,360 --> 00:01:34,720
As you can imagine,

26
00:01:34,720 --> 00:01:38,990
this template needs to be loaded with data when it's presented to the user.

27
00:01:38,990 --> 00:01:41,290
We don't just want to show them an empty form.

28
00:01:41,290 --> 00:01:47,660
And so we need to add logic to Apthe Js that will determine which check the users trying to

29
00:01:47,660 --> 00:01:50,540
view by reading the U R L.

30
00:01:50,540 --> 00:01:57,770
That they're trying to access and then make it request to a P I slash checks using a get in

31
00:01:57,770 --> 00:02:03,630
order to get data about that particular check if the user has access to it and then load

32
00:02:03,630 --> 00:02:06,860
that checks details into this actual form.

33
00:02:06,860 --> 00:02:10,050
So let's go ahead and update after Js.

34
00:02:10,050 --> 00:02:13,190
And as you can see,

35
00:02:13,190 --> 00:02:17,140
there is now a load Checks Edit Page function,

36
00:02:17,140 --> 00:02:19,990
which makes a request to a P I slacks,

37
00:02:19,990 --> 00:02:25,960
checks and then fills this form up with all the data about that check so that the user can

38
00:02:25,960 --> 00:02:28,270
view what's there before they edit it.

39
00:02:28,270 --> 00:02:33,580
This includes checking all the boxes programmatically that need to be checked for success

40
00:02:33,580 --> 00:02:39,950
codes and selecting all the right options within the drop downs that are on the page.

41
00:02:39,950 --> 00:02:41,210
Now that this exists,

42
00:02:41,210 --> 00:02:43,350
we can go ahead and we start the app.

43
00:02:43,350 --> 00:02:47,950
We're going to refresh the pace that were on.

44
00:02:47,950 --> 00:02:53,060
It looks like I need to log in again now.

45
00:02:53,060 --> 00:02:53,840
I'm logged in.

46
00:02:53,840 --> 00:03:00,780
I want to view the check we created for Twitter and we can see all the details.

47
00:03:00,780 --> 00:03:01,630
The check I D.

48
00:03:01,630 --> 00:03:04,570
Was programmatically created and it's not edible.

49
00:03:04,570 --> 00:03:06,670
The current state is listed here,

50
00:03:06,670 --> 00:03:07,740
and it's not edible,

51
00:03:07,740 --> 00:03:09,410
But everything else is.

52
00:03:09,410 --> 00:03:10,230
For example,

53
00:03:10,230 --> 00:03:14,550
let's add on 400 that's changed a protocol to https.

54
00:03:14,550 --> 00:03:15,950
Now we're going to save.

55
00:03:15,950 --> 00:03:22,610
The changes have been saved and we can go back to the dashboard and see that those changes

56
00:03:22,610 --> 00:03:23,550
have pushed her.

57
00:03:23,550 --> 00:03:26,410
So now all the checks exist.

58
00:03:26,410 --> 00:03:28,340
They're all being checked.

59
00:03:28,340 --> 00:03:34,070
That's why even the newly created Facebook one from the last lecture now has a state of up

60
00:03:34,070 --> 00:03:35,030
instead of unknown.

61
00:03:35,030 --> 00:03:39,750
So all the background workers are actually performing the checks as they're supposed to.

62
00:03:39,750 --> 00:03:40,930
The users,

63
00:03:40,930 --> 00:03:48,850
if we had any would really beginning SMS alerts and our application as a whole is working.

64
00:03:48,850 --> 00:03:52,560
But before you would go live with an application like this,

65
00:03:52,560 --> 00:03:58,350
you would want to build yourself some kind of admin interface so that you can cheap track

66
00:03:58,350 --> 00:04:02,850
of how many users you have and the different logs for the different checks,

67
00:04:02,850 --> 00:04:09,120
and generally keep tabs on your system without having to parse through all your data files

68
00:04:09,120 --> 00:04:09,640
manually.

69
00:04:09,640 --> 00:04:12,880
So in the next section of this course,

70
00:04:12,880 --> 00:04:18,120
we are going to create a command line interface that is actually an admin tool that will

71
00:04:18,120 --> 00:04:25,090
let us walk around inside of the data and view different metrics about our server and about

72
00:04:25,090 --> 00:04:26,800
the application as a whole.

73
00:04:26,800 --> 00:04:29,210
So we can kill this lecture now,

74
00:04:29,210 --> 00:04:31,070
and after the section review,

75
00:04:31,070 --> 00:04:33,120
we will move on to a whole new section.

