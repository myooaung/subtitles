WEBVTT
ï»¿1
00:00:00.000 --> 00:00:05.280
Welcome back in this lecture,

2
00:00:05.280 --> 00:00:10.610
we're going to be setting up the basic scaffolding for the command line application.

3
00:00:10.610 --> 00:00:15.270
That means modifying our index file so that when the entire application starts up,

4
00:00:15.270 --> 00:00:21.090
so does thes specific command line component and then building a command line library with

5
00:00:21.090 --> 00:00:26.600
some standard functions that we will need to be able to read in inputs from the command

6
00:00:26.600 --> 00:00:29.830
line and write them back out so that the user can see them.

7
00:00:29.830 --> 00:00:33.550
Let's start with our index dot Js file at the top.

8
00:00:33.550 --> 00:00:38.700
We're going to need to reference a new library that we haven't quite built yet and that is

9
00:00:38.700 --> 00:00:42.630
going to be called CLI and it will live in the live directory.

10
00:00:42.630 --> 00:00:46.660
So we're going to save our cli equals require dot,

11
00:00:46.660 --> 00:00:49.000
slash lib slash cli.

12
00:00:49.000 --> 00:00:52.930
Now we need to actually start up the application.

13
00:00:52.930 --> 00:00:55.280
We want to start the CLI,

14
00:00:55.280 --> 00:00:58.900
but we want to make sure it starts last.

15
00:00:58.900 --> 00:01:02.560
That is because the seal I will not just start itself up,

16
00:01:02.560 --> 00:01:06.250
but it will hang the console at an input simple.

17
00:01:06.250 --> 00:01:12.380
And so we want all that logging that we do at the beginning such as The silver has started

18
00:01:12.380 --> 00:01:13.810
up the workers have started up.

19
00:01:13.810 --> 00:01:15.700
We want all that to happen first.

20
00:01:15.700 --> 00:01:21.320
And then we want the CLI to start up so that it can end the console with an input symbol

21
00:01:21.320 --> 00:01:25.430
without it being confusing to anyone who's looking at the console.

22
00:01:25.430 --> 00:01:29.130
Because if you had an input symbol and then a bunch of output written after it,

23
00:01:29.130 --> 00:01:29.410
ah,

24
00:01:29.410 --> 00:01:33.880
user would be unsure whether or not there would be actually seeing a prompt that they could

25
00:01:33.880 --> 00:01:34.460
respond to.

26
00:01:34.460 --> 00:01:38.850
So we want to start this with a set time out.

27
00:01:38.850 --> 00:01:39.370
And,

28
00:01:39.370 --> 00:01:39.720
of course,

29
00:01:39.720 --> 00:01:45.640
the set time out isn't the most deterministic way to start something up late.

30
00:01:45.640 --> 00:01:46.650
But it'll do for now.

31
00:01:46.650 --> 00:01:51.250
So we just want to offset this by 50 milliseconds.

32
00:01:51.250 --> 00:01:54.360
And then just like we call it server in it workers in it.

33
00:01:54.360 --> 00:01:57.050
We want to call cli dot in it.

34
00:01:57.050 --> 00:01:59.940
That's all the modification.

35
00:01:59.940 --> 00:02:01.270
When you do the index file.

36
00:02:01.270 --> 00:02:09.940
Now we can create this lived at C l f file by doing touch lib slash Seelye dot Js.

37
00:02:09.940 --> 00:02:12.190
I'm gonna open up this file.

38
00:02:12.190 --> 00:02:14.050
We can fill it up at the top.

39
00:02:14.050 --> 00:02:21.950
I'm gonna just add a comment that these are CLI related tasks.

40
00:02:21.950 --> 00:02:25.100
We are going to have a number of dependencies here.

41
00:02:25.100 --> 00:02:30.610
And these are the dependencies that we're going to need it ordered to interact with the

42
00:02:30.610 --> 00:02:31.290
console,

43
00:02:31.290 --> 00:02:33.290
both reading input and writing output.

44
00:02:33.290 --> 00:02:38.430
I'll go into all these in more detail as we start building out to these different features

45
00:02:38.430 --> 00:02:40.400
in this CLI library.

46
00:02:40.400 --> 00:02:41.220
But for now,

47
00:02:41.220 --> 00:02:42.690
this just require what we need.

48
00:02:42.690 --> 00:02:45.170
We're going to need read line,

49
00:02:45.170 --> 00:02:47.050
which is more read.

50
00:02:47.050 --> 00:02:50.810
Line equals require read line.

51
00:02:50.810 --> 00:02:53.630
Read line is exactly what it sounds like.

52
00:02:53.630 --> 00:02:54.240
It's ah,

53
00:02:54.240 --> 00:02:56.560
built in package to know that lets you read online.

54
00:02:56.560 --> 00:02:57.050
Next,

55
00:02:57.050 --> 00:03:00.100
we're going to use you till which we've done before.

56
00:03:00.100 --> 00:03:08.290
And this is just a way to get us to be able to set up the cli specific logging on this next

57
00:03:08.290 --> 00:03:12.640
line with the debug convention that we set up before.

58
00:03:12.640 --> 00:03:17.640
So we're going to say that Vardy bug equals you tail dot debug log.

59
00:03:17.640 --> 00:03:23.210
But the special phrase for this debugging is going to be cli.

60
00:03:23.210 --> 00:03:28.040
So the logging that we're doing this fire will only be apparent to the user if they start

61
00:03:28.040 --> 00:03:33.660
the app with node underscore debug Equal Seelye and then note indexed gs.

62
00:03:33.660 --> 00:03:36.050
Next you want to include the events library.

63
00:03:36.050 --> 00:03:36.980
As I mentioned,

64
00:03:36.980 --> 00:03:41.980
we're going to be building this in a different kind of way when input comes into the

65
00:03:41.980 --> 00:03:43.410
console and we read it in.

66
00:03:43.410 --> 00:03:47.200
That's going to emit events that are panels can respond to.

67
00:03:47.200 --> 00:03:50.140
And so we're going to use the events library pretty extensively.

68
00:03:50.140 --> 00:03:54.770
So we're going to require events in order to use the events.

69
00:03:54.770 --> 00:03:59.120
We actually have to extend our own class from the base class.

70
00:03:59.120 --> 00:04:00.870
And then instead she ate it.

71
00:04:00.870 --> 00:04:03.720
We want to say that class underscore events,

72
00:04:03.720 --> 00:04:09.770
extends events Now that we have our own extent class,

73
00:04:09.770 --> 00:04:15.390
we want to save our E equals new underscore events.

74
00:04:15.390 --> 00:04:22.000
And that is this a convention that no Js recommends for interacting with the events class.

75
00:04:22.000 --> 00:04:25.400
It's specific to the way that this module works.

76
00:04:25.400 --> 00:04:27.940
And once you have this new Ian Stan,

77
00:04:27.940 --> 00:04:31.800
she hated you can do all of the event handling that you want to do.

78
00:04:31.800 --> 00:04:34.040
So let's just in Stan.

79
00:04:34.040 --> 00:04:38.060
She ate the CLI module object,

80
00:04:38.060 --> 00:04:40.090
which is a really fancy way of saying,

81
00:04:40.090 --> 00:04:41.710
Let's create an object,

82
00:04:41.710 --> 00:04:46.450
call it CLI and then let's export it down at the bottom.

83
00:04:46.450 --> 00:04:51.910
Marjo dot exports equals Seelye,

84
00:04:51.910 --> 00:04:54.020
All right,

85
00:04:54.020 --> 00:04:55.930
Now we need to write this library.

86
00:04:55.930 --> 00:04:57.080
Where should we start?

87
00:04:57.080 --> 00:04:57.600
Well,

88
00:04:57.600 --> 00:05:00.910
it index dot Js were calling cli dot in it,

89
00:05:00.910 --> 00:05:02.500
so we might as well start there.

90
00:05:02.500 --> 00:05:10.150
Let's define and in its crypt say that CLI in it equals function.

91
00:05:10.150 --> 00:05:15.990
And what do we want to do within this initialization?

92
00:05:15.990 --> 00:05:25.070
We want to send the start message to the console Didn't dark blue this time.

93
00:05:25.070 --> 00:05:32.160
So let's go ahead and copy or a start message that we used for server when we said the

94
00:05:32.160 --> 00:05:33.750
server is up and running.

95
00:05:33.750 --> 00:05:42.630
But it said we're going to say the CLI is running and we're going to get rid of the rest of

96
00:05:42.630 --> 00:05:43.210
this text.

97
00:05:43.210 --> 00:05:50.410
We do want to modify the cover,

98
00:05:50.410 --> 00:05:50.720
though,

99
00:05:50.720 --> 00:05:53.400
so rather than using 36 which we were using before,

100
00:05:53.400 --> 00:05:57.870
we're going to change this to 34 that's going to give us a dark blue color.

101
00:05:57.870 --> 00:06:01.800
Now that we've said the command line APP is running,

102
00:06:01.800 --> 00:06:04.970
we actually have to start that prompt that I mentioned earlier.

103
00:06:04.970 --> 00:06:08.880
We have to put a input symbol in the console,

104
00:06:08.880 --> 00:06:13.520
and this will indicate to the user that we're waiting for something from you.

105
00:06:13.520 --> 00:06:17.260
So let's start the interface.

106
00:06:17.260 --> 00:06:22.070
The way you do this is defined an interface object,

107
00:06:22.070 --> 00:06:29.700
and then you used the read line package dot Create interface.

108
00:06:29.700 --> 00:06:33.110
This takes a bunch of keys,

109
00:06:33.110 --> 00:06:34.150
which you can define,

110
00:06:34.150 --> 00:06:41.050
so we want to define input as something that should be coming from process.

111
00:06:41.050 --> 00:06:47.830
Don't standard in which in this kind of application would route to the console.

112
00:06:47.830 --> 00:06:48.450
Naturally,

113
00:06:48.450 --> 00:06:54.250
output should route to process standard out,

114
00:06:54.250 --> 00:06:57.550
which also will write the council.

115
00:06:57.550 --> 00:06:58.730
And lastly,

116
00:06:58.730 --> 00:07:03.140
we want to define what are prompt should look like for us.

117
00:07:03.140 --> 00:07:04.540
We don't need to do anything fancy,

118
00:07:04.540 --> 00:07:09.390
so we're just going to leave the prompt as a blank line as an empty string.

119
00:07:09.390 --> 00:07:12.610
So when users see that there's an empty string,

120
00:07:12.610 --> 00:07:14.700
that means they're being profit for something.

121
00:07:14.700 --> 00:07:14.920
Now,

122
00:07:14.920 --> 00:07:18.060
I should mention that the way that we're creating this interface,

123
00:07:18.060 --> 00:07:23.670
using relied is only one of a few ways that you can create these kind of applications in

124
00:07:23.670 --> 00:07:24.150
node.

125
00:07:24.150 --> 00:07:26.220
There's also a rebel module,

126
00:07:26.220 --> 00:07:32.470
R E p l that provides a bunch of the scaffolding that we're about to set up out of the box

127
00:07:32.470 --> 00:07:32.470
.

128
00:07:32.470 --> 00:07:34.910
The rectal is so easy to use,

129
00:07:34.910 --> 00:07:35.170
though,

130
00:07:35.170 --> 00:07:40.390
that I didn't feel it was worth building this section of the course around rebel.

131
00:07:40.390 --> 00:07:44.930
I wanted to do a deeper dive in some of these more advanced modules.

132
00:07:44.930 --> 00:07:46.180
But later on,

133
00:07:46.180 --> 00:07:47.420
at the end of this course,

134
00:07:47.420 --> 00:07:50.450
I'll go over how to use the rebel module if you'd rather use that.

135
00:07:50.450 --> 00:07:51.340
But for now,

136
00:07:51.340 --> 00:07:56.130
we are using read line to read one line at a time and right into the console manually,

137
00:07:56.130 --> 00:07:59.320
rather than using a rebel module which handles all that for you.

138
00:07:59.320 --> 00:08:01.700
So we have created the interface.

139
00:08:01.700 --> 00:08:03.660
So now when they say life starts up,

140
00:08:03.660 --> 00:08:07.790
users will see this console message and then be met with this prompt.

141
00:08:07.790 --> 00:08:12.950
But starting the interface isn't actually enough to read in anything from the user.

142
00:08:12.950 --> 00:08:16.210
So now we actually need to create the prompt,

143
00:08:16.210 --> 00:08:18.160
not defined the prompt symbol,

144
00:08:18.160 --> 00:08:18.990
as we did above,

145
00:08:18.990 --> 00:08:22.760
but actually manually create the prop that the user will see.

146
00:08:22.760 --> 00:08:26.900
So we want to create and initial prompt.

147
00:08:26.900 --> 00:08:34.350
So we're going to call underscore interface dot prompt.

148
00:08:34.350 --> 00:08:36.230
Now,

149
00:08:36.230 --> 00:08:38.550
if I want to start this application up,

150
00:08:38.550 --> 00:08:43.590
you can see we're getting the sea allies running sent back to us,

151
00:08:43.590 --> 00:08:46.950
and the user is met with a prompt where they can write something.

152
00:08:46.950 --> 00:08:48.370
But when they enter it.

153
00:08:48.370 --> 00:08:52.850
Nothing happened because we haven't to find any way to handle what they're writing.

154
00:08:52.850 --> 00:08:58.610
If I kill this application and then change the prompt to a greater than sign started back

155
00:08:58.610 --> 00:08:58.950
up,

156
00:08:58.950 --> 00:09:01.310
you'll see that were met with a prompt.

157
00:09:01.310 --> 00:09:05.450
But this time it starts with the greater than side where we can write whatever we want.

158
00:09:05.450 --> 00:09:06.430
It's up to you.

159
00:09:06.430 --> 00:09:07.310
If you want to use a prompt,

160
00:09:07.310 --> 00:09:08.000
simple or not,

161
00:09:08.000 --> 00:09:09.240
I tend not to use it.

162
00:09:09.240 --> 00:09:11.430
So now we have actually created the prompt.

163
00:09:11.430 --> 00:09:16.280
We need to start handling the lines of text that the user will write in response to the

164
00:09:16.280 --> 00:09:16.660
prompt.

165
00:09:16.660 --> 00:09:23.280
So you want to handle each line of input separately.

166
00:09:23.280 --> 00:09:26.000
So we're gonna call interface,

167
00:09:26.000 --> 00:09:32.490
and then we're going to bind to the on line event that's going to be omitted every time the

168
00:09:32.490 --> 00:09:33.660
user write something,

169
00:09:33.660 --> 00:09:40.690
presses return and sends us a line of this road so online this function is going to get

170
00:09:40.690 --> 00:09:43.350
called and it's going to pass us this string,

171
00:09:43.350 --> 00:09:48.430
so we're going to need to now do something with this string,

172
00:09:48.430 --> 00:09:52.760
so we're going to ascend to the input processor.

173
00:09:52.760 --> 00:09:55.440
The input processor isn't something we've defined yet,

174
00:09:55.440 --> 00:09:57.310
but we will create that function next.

175
00:09:57.310 --> 00:10:03.970
This is gonna call cli dot process input and then pass the string that we just got.

176
00:10:03.970 --> 00:10:08.800
Now that we have handled this input line from the user,

177
00:10:08.800 --> 00:10:12.470
we actually need to re initialize the prompt.

178
00:10:12.470 --> 00:10:13.250
Otherwise,

179
00:10:13.250 --> 00:10:14.970
they're not going to see the prompt again.

180
00:10:14.970 --> 00:10:22.650
So we need to read initialize the prompt afterwards,

181
00:10:22.650 --> 00:10:27.150
so interface again Duh prompt.

182
00:10:27.150 --> 00:10:28.590
Otherwise,

183
00:10:28.590 --> 00:10:30.270
they would just see the prompt the first time.

184
00:10:30.270 --> 00:10:31.530
But after they wrote something,

185
00:10:31.530 --> 00:10:32.490
they wouldn't see it again.

186
00:10:32.490 --> 00:10:33.540
Lastly,

187
00:10:33.540 --> 00:10:39.410
we need to handle the situation if the user stopped the cli.

188
00:10:39.410 --> 00:10:41.040
So we want to say that in that case,

189
00:10:41.040 --> 00:10:44.790
you want to kill the associate ID process,

190
00:10:44.790 --> 00:10:51.150
So interface woman close.

191
00:10:51.150 --> 00:10:55.120
So on the event where the CLI is closed by the user,

192
00:10:55.120 --> 00:11:04.370
we want to call this anonymous function and just manually kill everything with process dot

193
00:11:04.370 --> 00:11:04.890
Exit.

194
00:11:04.890 --> 00:11:07.760
The zero is the status code that were exiting on.

195
00:11:07.760 --> 00:11:10.370
If we wanted to exit on a non zero status code,

196
00:11:10.370 --> 00:11:11.770
we could put that there.

197
00:11:11.770 --> 00:11:15.390
But zero status code tends to mean that everything is fine.

198
00:11:15.390 --> 00:11:16.620
So we want to do that.

199
00:11:16.620 --> 00:11:19.150
Now we've set up this input prompt.

200
00:11:19.150 --> 00:11:24.930
We need to define the cli dot process input function that will actually handle everything

201
00:11:24.930 --> 00:11:29.050
that the user might be writing so above the initial Asian script.

202
00:11:29.050 --> 00:11:29.970
That's right,

203
00:11:29.970 --> 00:11:32.950
this input processor.

204
00:11:32.950 --> 00:11:38.770
It'll be cli dot process input.

205
00:11:38.770 --> 00:11:40.600
It's going to be a function that,

206
00:11:40.600 --> 00:11:41.410
as we saw,

207
00:11:41.410 --> 00:11:42.340
just takes a string.

208
00:11:42.340 --> 00:11:44.100
The first thing we need to do.

209
00:11:44.100 --> 00:11:45.460
Of course it's sanitized.

210
00:11:45.460 --> 00:11:50.650
This string a string eco's type of string string,

211
00:11:50.650 --> 00:11:54.860
and it has a length even after its trimmed.

212
00:11:54.860 --> 00:11:57.520
If so,

213
00:11:57.520 --> 00:12:00.980
we want to use it or call it false.

214
00:12:00.980 --> 00:12:05.450
Now we only want to process the input.

215
00:12:05.450 --> 00:12:10.580
If the user actually wrote something,

216
00:12:10.580 --> 00:12:13.050
otherwise,

217
00:12:13.050 --> 00:12:13.970
we want to ignore it.

218
00:12:13.970 --> 00:12:16.210
So if there's a string,

219
00:12:16.210 --> 00:12:22.550
we want to continue and we don't need an else here because we don't need to handle the case

220
00:12:22.550 --> 00:12:28.030
that the user wrote nothing in just pressed return or had an empty space and press return.

221
00:12:28.030 --> 00:12:29.220
When that happens,

222
00:12:29.220 --> 00:12:29.640
we will,

223
00:12:29.640 --> 00:12:30.410
naturally,

224
00:12:30.410 --> 00:12:32.150
after processing this input,

225
00:12:32.150 --> 00:12:38.060
returned them to the interface prompt and so we don't need to actually handle that event.

226
00:12:38.060 --> 00:12:42.210
Weaken dis ignore it so will only continue inside of this if and outside of this.

227
00:12:42.210 --> 00:12:43.750
If nothing will happen now,

228
00:12:43.750 --> 00:12:50.940
we want to codify the unique strings that identify the different unique questions that the

229
00:12:50.940 --> 00:12:51.940
user can ask.

230
00:12:51.940 --> 00:12:53.700
So codify unique.

231
00:12:53.700 --> 00:13:10.770
What that means is we want to respond to a set of strings,

232
00:13:10.770 --> 00:13:12.940
as we talked about in the section overview,

233
00:13:12.940 --> 00:13:15.000
such as Man Help,

234
00:13:15.000 --> 00:13:16.100
Exit stats,

235
00:13:16.100 --> 00:13:16.690
etcetera.

236
00:13:16.690 --> 00:13:23.270
We want to define what those allowable inputs are so that we can check this string against

237
00:13:23.270 --> 00:13:25.300
those strings that we want to allow.

238
00:13:25.300 --> 00:13:27.000
And if we don't find a match,

239
00:13:27.000 --> 00:13:28.570
we want to just tell the user.

240
00:13:28.570 --> 00:13:29.170
Sorry,

241
00:13:29.170 --> 00:13:31.120
we don't know what you're asking us.

242
00:13:31.120 --> 00:13:36.570
So we want to say that far unique inputs is an array,

243
00:13:36.570 --> 00:13:41.950
and these are going to be unique strings that could not possibly be confused with each

244
00:13:41.950 --> 00:13:42.270
other.

245
00:13:42.270 --> 00:13:59.640
Man help exit stats list users Mawr User info.

246
00:13:59.640 --> 00:14:09.400
Let's chicks more check info list logs,

247
00:14:09.400 --> 00:14:18.870
mawr log info So now that we have these unique strings,

248
00:14:18.870 --> 00:14:24.980
we want to try to find a match for the string that the user just sent us.

249
00:14:24.980 --> 00:14:36.550
So we're going to go through the possible inputs and emit an event when a a match is found

250
00:14:36.550 --> 00:14:36.550
.

251
00:14:36.550 --> 00:14:45.130
So we're gonna start with match found equals false and our counter equals zero Now we're

252
00:14:45.130 --> 00:14:50.960
going to cycle through this array using unique inputs dot Some we're going to cycle through

253
00:14:50.960 --> 00:14:52.550
and get one in play at a time.

254
00:14:52.550 --> 00:15:03.700
We want to say if the string to lower case so if the lower case version of the string index

255
00:15:03.700 --> 00:15:08.120
of this specific input is greater than negative one.

256
00:15:08.120 --> 00:15:09.060
In other words,

257
00:15:09.060 --> 00:15:14.190
when you take the string that the user gave us and you push it down to lower case,

258
00:15:14.190 --> 00:15:19.240
does this particular input that we're looking at or this input that we're looking at or

259
00:15:19.240 --> 00:15:23.130
this input that we're looking at contained within this straight?

260
00:15:23.130 --> 00:15:23.920
If so,

261
00:15:23.920 --> 00:15:26.890
we have uniquely identified which question the user is asking.

262
00:15:26.890 --> 00:15:27.890
So in that case,

263
00:15:27.890 --> 00:15:30.360
we want to say match round equals true.

264
00:15:30.360 --> 00:15:43.170
And then we want to emit and event matching the unique input and include the full string

265
00:15:43.170 --> 00:15:44.050
given by the user.

266
00:15:44.050 --> 00:15:47.420
So we want to do e dot emit.

267
00:15:47.420 --> 00:15:49.120
Remember,

268
00:15:49.120 --> 00:15:55.340
E is our in Stan Shih ation of this events class that we extended from the other events

269
00:15:55.340 --> 00:15:55.940
module.

270
00:15:55.940 --> 00:16:00.000
So we want to emit an event whose name is input,

271
00:16:00.000 --> 00:16:03.210
and member input is going to be one of these things.

272
00:16:03.210 --> 00:16:08.050
So that event name will be man or help or exit etcetera.

273
00:16:08.050 --> 00:16:14.330
And then we also want to include this string that we received from the user.

274
00:16:14.330 --> 00:16:19.170
So anyone binding to this event can bind to steps,

275
00:16:19.170 --> 00:16:19.950
for example.

276
00:16:19.950 --> 00:16:27.080
And then they will see this string being passed to them when they bind to that class.

277
00:16:27.080 --> 00:16:32.360
And that'll make more sense in a few moments since we found a match,

278
00:16:32.360 --> 00:16:34.070
we want to return true.

279
00:16:34.070 --> 00:16:36.570
Break out of this loop at whatever place we're in.

280
00:16:36.570 --> 00:16:44.070
Now if we reach all the way to the end of the loop and if no match is found,

281
00:16:44.070 --> 00:16:47.770
tell the user to try again.

282
00:16:47.770 --> 00:16:51.960
So if no match found,

283
00:16:51.960 --> 00:16:54.970
we're just gonna right back to the console.

284
00:16:54.970 --> 00:16:58.000
Sorry.

285
00:16:58.000 --> 00:17:04.820
Try again So we can go ahead and start this application up and see how that works.

286
00:17:04.820 --> 00:17:06.740
You can see the sea allies running.

287
00:17:06.740 --> 00:17:10.280
If I type in something like Foo Bar which isn't recognized,

288
00:17:10.280 --> 00:17:11.590
it'll say sorry.

289
00:17:11.590 --> 00:17:12.150
Try again.

290
00:17:12.150 --> 00:17:12.650
Where?

291
00:17:12.650 --> 00:17:15.480
If I type in man which is recognized,

292
00:17:15.480 --> 00:17:17.470
we won't get a response at all.

293
00:17:17.470 --> 00:17:23.790
If I type it help Also recognized we won't get a response if I type in phys will say sorry

294
00:17:23.790 --> 00:17:23.790
.

295
00:17:23.790 --> 00:17:24.370
Try again.

296
00:17:24.370 --> 00:17:28.450
So that is the basic scaffolding of a command mine application.

297
00:17:28.450 --> 00:17:29.300
In the future,

298
00:17:29.300 --> 00:17:35.470
Lectures will obviously need to bind to thes different events that could be omitted here so

299
00:17:35.470 --> 00:17:40.530
that we can handle them and actually list the users if the user is asking that question or

300
00:17:40.530 --> 00:17:42.900
give a help screen if the user is asking for help,

301
00:17:42.900 --> 00:17:43.550
etcetera.

302
00:17:43.550 --> 00:17:45.430
So in the following lectures,

303
00:17:45.430 --> 00:17:46.810
we will do just that.

304
00:17:46.810 --> 00:17:51.970
We will build out the responses to each of these questions when it at a time.

305
00:17:51.970 --> 00:17:57.530
But first we'll need to go through one more lecture that builds a bit of more scaffolding

306
00:17:57.530 --> 00:17:59.470
around handling these events.

307
00:17:59.470 --> 00:18:02.340
So we'll build some event handling infrastructure,

308
00:18:02.340 --> 00:18:07.370
and then we'll build out each response to each of these commands when a time So now we can

309
00:18:07.370 --> 00:18:08.760
move on to the next lecture.

