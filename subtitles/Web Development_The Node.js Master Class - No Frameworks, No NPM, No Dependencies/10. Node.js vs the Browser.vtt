WEBVTT
ï»¿1
00:00:00.000 --> 00:00:02.750
no Js versus the browser or window.

2
00:00:02.750 --> 00:00:06.010
If you're coming from the world of front and JavaScript,

3
00:00:06.010 --> 00:00:07.170
particularly for the browser,

4
00:00:07.170 --> 00:00:12.430
you may be thrown off by some of the differences in node versus that kind of environment.

5
00:00:12.430 --> 00:00:13.060
First,

6
00:00:13.060 --> 00:00:15.710
when in the browser or the consul of a browser,

7
00:00:15.710 --> 00:00:20.520
there are a number of global variables and functions that are available to you that have no

8
00:00:20.520 --> 00:00:21.750
counterpart in note.

9
00:00:21.750 --> 00:00:23.550
Here's a partial list of them,

10
00:00:23.550 --> 00:00:25.790
as you can see,

11
00:00:25.790 --> 00:00:30.550
these air built in features that let you do things like manipulate objects on the screen or

12
00:00:30.550 --> 00:00:32.580
redirect users from one place to another.

13
00:00:32.580 --> 00:00:34.750
There's no back and equipment to these,

14
00:00:34.750 --> 00:00:38.250
so there's no way to use them or do anything like that in node.

15
00:00:38.250 --> 00:00:39.150
Also,

16
00:00:39.150 --> 00:00:40.280
the converse is true.

17
00:00:40.280 --> 00:00:44.580
There are a number of things that are possible from the back end that have no equivalent on

18
00:00:44.580 --> 00:00:45.260
the front end.

19
00:00:45.260 --> 00:00:47.460
This includes writing to the file system,

20
00:00:47.460 --> 00:00:49.360
interacting with the operating system,

21
00:00:49.360 --> 00:00:49.990
etcetera.

22
00:00:49.990 --> 00:00:51.770
To facilitate these features,

23
00:00:51.770 --> 00:00:56.580
Node makes a number of AP eyes and global's available and will be going over those later in

24
00:00:56.580 --> 00:00:58.300
these lectures when appropriate.

25
00:00:58.300 --> 00:00:59.000
All note.

26
00:00:59.000 --> 00:01:00.750
When we're using vanilla JavaScript,

27
00:01:00.750 --> 00:01:02.150
such as writing a four loop.

28
00:01:02.150 --> 00:01:05.320
And when we're using a feature specific to note,

29
00:01:05.320 --> 00:01:08.790
such as getting the number of cores of the current operating system.

30
00:01:08.790 --> 00:01:09.840
For now,

31
00:01:09.840 --> 00:01:13.760
all you have to remember is that nothing related to a window objects,

32
00:01:13.760 --> 00:01:14.990
browser objects,

33
00:01:14.990 --> 00:01:19.290
the screen or the brasher location make any sense in Noda Land,

34
00:01:19.290 --> 00:01:22.310
and that note is devoid of anything like those.

35
00:01:22.310 --> 00:01:27.640
Another major difference between note and the browser is that node is a single static

36
00:01:27.640 --> 00:01:28.350
environment.

37
00:01:28.350 --> 00:01:30.220
If you done much work in the browser,

38
00:01:30.220 --> 00:01:34.550
you know how much of a pain cross browser compatibility is.

39
00:01:34.550 --> 00:01:39.770
One feature Working Chrome but will fail in Internet Explorer or something will work a

40
00:01:39.770 --> 00:01:44.400
certain way in opera but a totally different way in Safari or Firefox.

41
00:01:44.400 --> 00:01:50.490
Cross browser issues take loads of time and patients both from the Debs and the Q A People

42
00:01:50.490 --> 00:01:51.920
and the end users.

43
00:01:51.920 --> 00:01:52.690
Luckily,

44
00:01:52.690 --> 00:01:53.550
on the back end,

45
00:01:53.550 --> 00:01:54.920
there's no such issue.

46
00:01:54.920 --> 00:01:57.010
When you're building a node application,

47
00:01:57.010 --> 00:02:00.680
you don't have to worry about it running well on X platform,

48
00:02:00.680 --> 00:02:02.120
or why distribution.

49
00:02:02.120 --> 00:02:07.520
You only have to get it to run on the servers you're using and the local host environment.

50
00:02:07.520 --> 00:02:09.530
You're working on much of the time.

51
00:02:09.530 --> 00:02:10.310
This is trivial.

52
00:02:10.310 --> 00:02:13.380
Anywhere you have given node version installed,

53
00:02:13.380 --> 00:02:16.790
it will be able to run your application the way it's intended.

54
00:02:16.790 --> 00:02:19.800
And if you have issues with cross platform compatibility,

55
00:02:19.800 --> 00:02:23.260
there are container solutions like doctor that make your life a lot easier.

56
00:02:23.260 --> 00:02:25.370
But that's rarely even necessary.

57
00:02:25.370 --> 00:02:30.380
The last important difference between note and the browser is the fact that the Java script

58
00:02:30.380 --> 00:02:34.720
source code within node can't be seen by the end users.

59
00:02:34.720 --> 00:02:36.640
When you're writing job script in the browser,

60
00:02:36.640 --> 00:02:41.330
you must take into account that anything you write can be seen by the user if they view

61
00:02:41.330 --> 00:02:42.740
source on the document.

62
00:02:42.740 --> 00:02:43.700
But in node,

63
00:02:43.700 --> 00:02:45.350
there's no way for them to do that.

64
00:02:45.350 --> 00:02:50.040
This means you can use private keys and other sensitive information in your code without

65
00:02:50.040 --> 00:02:51.650
worrying about prying eyes.

