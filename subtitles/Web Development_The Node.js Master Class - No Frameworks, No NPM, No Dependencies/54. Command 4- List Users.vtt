WEBVTT
ï»¿1
00:00:00.000 --> 00:00:04.390
in this lecture,

2
00:00:04.390 --> 00:00:08.330
we're going to build out the responder for the list users command.

3
00:00:08.330 --> 00:00:11.360
But before we go down and start filling out that function,

4
00:00:11.360 --> 00:00:15.200
we know that in order to get data about the user's,

5
00:00:15.200 --> 00:00:18.870
we're going to need the data library that we created earlier.

6
00:00:18.870 --> 00:00:20.850
So let's require it now.

7
00:00:20.850 --> 00:00:27.720
Far underscore Data is going to be required dot slash data because this library,

8
00:00:27.720 --> 00:00:28.910
the CLI library,

9
00:00:28.910 --> 00:00:32.450
is in the live directory the same place as the data lip.

10
00:00:32.450 --> 00:00:37.960
So now we can go down to the list users responder and start filling it in.

11
00:00:37.960 --> 00:00:41.400
If you remember within our data library,

12
00:00:41.400 --> 00:00:50.030
we already have a function called list that allows us to specify the directory that we want

13
00:00:50.030 --> 00:00:50.980
things listed in.

14
00:00:50.980 --> 00:00:54.230
And it will go ahead and give us an array of everything there.

15
00:00:54.230 --> 00:01:02.360
So we're gonna call that within our list users function underscored data dot list and then

16
00:01:02.360 --> 00:01:04.670
tell it that we want to list out the users.

17
00:01:04.670 --> 00:01:09.170
It's going to pass us back in the air and user i d.

18
00:01:09.170 --> 00:01:10.290
S as an array.

19
00:01:10.290 --> 00:01:18.890
If there is no air and there are user I ds and the user,

20
00:01:18.890 --> 00:01:19.310
I d.

21
00:01:19.310 --> 00:01:21.480
S have a life above zero,

22
00:01:21.480 --> 00:01:23.180
then we'll continue.

23
00:01:23.180 --> 00:01:24.050
Otherwise,

24
00:01:24.050 --> 00:01:29.850
we can pretty much ignore this command as there's nothing to send back to the user.

25
00:01:29.850 --> 00:01:35.180
We want to start with a vertical space to space the response out from anything that might

26
00:01:35.180 --> 00:01:36.120
have come before it.

27
00:01:36.120 --> 00:01:43.520
So cli vertical space get called then for each of the users,

28
00:01:43.520 --> 00:01:45.700
we want to log out user specific data.

29
00:01:45.700 --> 00:01:48.630
So we're going to do a for each loop user.

30
00:01:48.630 --> 00:01:55.540
I d s dot for each and this for each is going to pass us a user i d.

31
00:01:55.540 --> 00:01:58.290
For each of these user id's,

32
00:01:58.290 --> 00:02:06.740
we're going to call data read and actually read in that user I d from the user's collection

33
00:02:06.740 --> 00:02:06.740
.

34
00:02:06.740 --> 00:02:08.190
So we'll pass it.

35
00:02:08.190 --> 00:02:13.400
Use your I d and will expect back an air core user data.

36
00:02:13.400 --> 00:02:19.250
If there is not an air and there is user data,

37
00:02:19.250 --> 00:02:23.640
we'll continue otherwise will ignore this user.

38
00:02:23.640 --> 00:02:27.730
Now we want to construct the line that we are going to log out.

39
00:02:27.730 --> 00:02:34.390
So we're going to say that barred line equals name Colon.

40
00:02:34.390 --> 00:02:37.240
Then we want to insert their names.

41
00:02:37.240 --> 00:02:38.650
So user data,

42
00:02:38.650 --> 00:02:40.150
first name,

43
00:02:40.150 --> 00:02:44.490
then a space and then user data.

44
00:02:44.490 --> 00:02:45.000
Last name.

45
00:02:45.000 --> 00:02:47.830
Now let's add their phone.

46
00:02:47.830 --> 00:02:49.130
So we want to say Phone,

47
00:02:49.130 --> 00:03:01.040
colon user data dot phone And then let's say checks and we're going to list out the number

48
00:03:01.040 --> 00:03:02.160
of checks that they have.

49
00:03:02.160 --> 00:03:06.550
But let's terminate this line for now and then calculate the number of checks that the user

50
00:03:06.550 --> 00:03:08.270
has on a separate line,

51
00:03:08.270 --> 00:03:14.470
using separate logic so we can save our number of checks equals.

52
00:03:14.470 --> 00:03:21.700
Then we need to check if the checks key is actually defined on the user data object,

53
00:03:21.700 --> 00:03:33.050
which it may not be So we want to say user data checks equals object and user data checks

54
00:03:33.050 --> 00:03:43.750
isn't array and user data checks length is greater than zero.

55
00:03:43.750 --> 00:03:52.350
Then we use the length of the array otherwise would have fought 20 So now that we have the

56
00:03:52.350 --> 00:03:53.240
number of checks,

57
00:03:53.240 --> 00:04:00.390
we can add that to the end of this line so we can say line should be appended with number

58
00:04:00.390 --> 00:04:01.350
of checks.

59
00:04:01.350 --> 00:04:05.030
Now that we have the whole line in its entirety,

60
00:04:05.030 --> 00:04:06.290
we can just log it out,

61
00:04:06.290 --> 00:04:11.680
console log line and then add on another vertical space.

62
00:04:11.680 --> 00:04:16.630
If we look in our data directory,

63
00:04:16.630 --> 00:04:22.530
we can see that we have to existing users So let's try this command out and see if it works

64
00:04:22.530 --> 00:04:22.530
.

65
00:04:22.530 --> 00:04:24.150
I'm gonna start the act back up,

66
00:04:24.150 --> 00:04:31.170
make this screen a little bit bigger.

67
00:04:31.170 --> 00:04:36.250
I'm gonna ask it to list users.

68
00:04:36.250 --> 00:04:38.120
There.

69
00:04:38.120 --> 00:04:38.480
You see,

70
00:04:38.480 --> 00:04:40.110
we have to users.

71
00:04:40.110 --> 00:04:41.050
John Smith.

72
00:04:41.050 --> 00:04:45.110
First phone number ends in an eight and he has four checks.

73
00:04:45.110 --> 00:04:46.680
The next user,

74
00:04:46.680 --> 00:04:47.840
John Smithy,

75
00:04:47.840 --> 00:04:49.840
has a phone of reading in a nine.

76
00:04:49.840 --> 00:04:52.860
And he has two checks Now.

77
00:04:52.860 --> 00:04:55.930
We can tell it to exit and will do so.

78
00:04:55.930 --> 00:04:58.850
So the List users Command is working fine now,

79
00:04:58.850 --> 00:05:00.580
and we could move on to the next lecture.

