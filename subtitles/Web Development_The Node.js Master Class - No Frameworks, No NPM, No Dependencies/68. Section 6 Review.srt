1
00:00:00,000 --> 00:00:06,720
in this section on stabilizing your application,

2
00:00:06,720 --> 00:00:10,300
we used a few new node modules that we hadn't before.

3
00:00:10,300 --> 00:00:12,570
The first is the D bugger,

4
00:00:12,570 --> 00:00:19,570
the debunker we used when we wanted to step through our application to be able to pinpoint

5
00:00:19,570 --> 00:00:21,830
exactly where an issue was occurring.

6
00:00:21,830 --> 00:00:25,340
We used break points to be able to walk from point to point,

7
00:00:25,340 --> 00:00:27,300
using the continue flags.

8
00:00:27,300 --> 00:00:33,750
And we also stepped into the rebel that lives inside of the debunker and used it to inspect

9
00:00:33,750 --> 00:00:38,800
the current value of variables at the moment of execution.

10
00:00:38,800 --> 00:00:43,430
The bugger is very useful when you're diagnosing difficult problems,

11
00:00:43,430 --> 00:00:46,150
especially raise conditions or anything related to that.

12
00:00:46,150 --> 00:00:51,220
The next module that we used extensively was errors as we went over.

13
00:00:51,220 --> 00:00:54,920
There are many different types of errors in No Js,

14
00:00:54,920 --> 00:00:57,840
grouped into different categories like evil,

15
00:00:57,840 --> 00:00:59,260
heiress in tax range,

16
00:00:59,260 --> 00:01:00,820
reference type in your eye,

17
00:01:00,820 --> 00:01:07,260
and then a whole host of system errors and user specified errors that we triggered

18
00:01:07,260 --> 00:01:10,850
ourselves as well as airs from the Assertion module,

19
00:01:10,850 --> 00:01:14,780
all those taking together or a lot to deal with.

20
00:01:14,780 --> 00:01:20,170
But we went over some ways that you can try and catch different errors so that they don't

21
00:01:20,170 --> 00:01:22,460
kill your thread and take down your app.

22
00:01:22,460 --> 00:01:23,180
But then,

23
00:01:23,180 --> 00:01:24,090
as mentioned,

24
00:01:24,090 --> 00:01:30,280
you can use the bugger to jump deeper into any issues that you're experiencing to try to

25
00:01:30,280 --> 00:01:33,330
figure out where that execution is hitting a problem.

26
00:01:33,330 --> 00:01:36,770
The last module that we introduced here was assert,

27
00:01:36,770 --> 00:01:41,900
assert is the Assertion library built into know J s.

28
00:01:41,900 --> 00:01:46,760
A lot of people include third party libraries when it really isn't necessary.

29
00:01:46,760 --> 00:01:50,970
Assert includes a whole bunch of functionality out of the box.

30
00:01:50,970 --> 00:01:55,300
We use the ability to assert equality between different values,

31
00:01:55,300 --> 00:02:02,630
assert that things should not throw when they're called and assert that things or truth e

32
00:02:02,630 --> 00:02:03,900
using a certain Okay.

33
00:02:03,900 --> 00:02:05,350
As you can see,

34
00:02:05,350 --> 00:02:08,770
there are a number of other assertions that you can make,

35
00:02:08,770 --> 00:02:15,720
and these taken together wrap up much of what you need to be able to do to right robust

36
00:02:15,720 --> 00:02:17,550
unit and integration tests.

37
00:02:17,550 --> 00:02:22,790
Most unit and integration tests are simply asserting equality or asserting that thing

38
00:02:22,790 --> 00:02:24,130
shouldn't or should throw.

39
00:02:24,130 --> 00:02:25,880
Now that we've gone over these,

40
00:02:25,880 --> 00:02:28,210
we could move on to the next section in this course,

41
00:02:28,210 --> 00:02:30,240
which is all about performance,

42
00:02:30,240 --> 00:02:36,380
and the next section we're going to go through how to tweak your application to make it

43
00:02:36,380 --> 00:02:37,060
faster.

44
00:02:37,060 --> 00:02:44,780
How to diagnosis performance issues and have to get the most out of your underlying CPU and

45
00:02:44,780 --> 00:02:47,430
memory resource is so without further ado,

46
00:02:47,430 --> 00:02:48,980
we can move on to the next section.

