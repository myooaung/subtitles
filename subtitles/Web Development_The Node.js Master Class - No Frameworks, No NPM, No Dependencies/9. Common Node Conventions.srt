1
00:00:00,000 --> 00:00:03,310
As you browse through existing node applications and libraries,

2
00:00:03,310 --> 00:00:07,950
you're likely to encounter a number of conventions that many projects use for one reason or

3
00:00:07,950 --> 00:00:08,390
another.

4
00:00:08,390 --> 00:00:14,200
Some of these air prescribed by node itself or in PM while others have been developed in an

5
00:00:14,200 --> 00:00:15,080
ad hoc way.

6
00:00:15,080 --> 00:00:20,180
Others still are only one of many competing conventions you may encounter for the same

7
00:00:20,180 --> 00:00:22,250
topic or issue in this section.

8
00:00:22,250 --> 00:00:25,780
We're going to go over a few of the most popular conventions in use today.

9
00:00:25,780 --> 00:00:28,340
This is by no means an exhaustive list,

10
00:00:28,340 --> 00:00:30,460
nor is it a prescriptive list.

11
00:00:30,460 --> 00:00:33,740
I'm by no means recommending the conventions we go over here.

12
00:00:33,740 --> 00:00:34,110
In fact,

13
00:00:34,110 --> 00:00:34,710
many of them,

14
00:00:34,710 --> 00:00:37,290
like packaged up Jason Files or NPM,

15
00:00:37,290 --> 00:00:39,950
won't be in use at all during these lectures.

16
00:00:39,950 --> 00:00:40,990
Nevertheless,

17
00:00:40,990 --> 00:00:45,050
as you are likely to bruise many node applications in the near future,

18
00:00:45,050 --> 00:00:49,920
I feel your no Js education would be woefully incomplete if we didn't at least peruse the

19
00:00:49,920 --> 00:00:53,430
conventions that many developers use and have used to date.

20
00:00:53,430 --> 00:00:56,280
Let us start with the convention mentioned a moment ago.

21
00:00:56,280 --> 00:01:00,470
The package dot Jason file to illustrate this and the other conventions,

22
00:01:00,470 --> 00:01:05,180
we're going to return to the same sample application whose structure we reviewed in the

23
00:01:05,180 --> 00:01:06,050
previous lecture.

24
00:01:06,050 --> 00:01:06,780
Again,

25
00:01:06,780 --> 00:01:11,590
it currently consists of just a few files and index dot Js and two separate library files

26
00:01:11,590 --> 00:01:13,250
within a lib directory.

27
00:01:13,250 --> 00:01:14,500
As an aside,

28
00:01:14,500 --> 00:01:17,240
this lib directory is a bit of a convention itself,

29
00:01:17,240 --> 00:01:21,910
though you may also frequently see a vendor directory or a note underscore modules

30
00:01:21,910 --> 00:01:25,740
directory as we'll discuss in a moment dependency management.

31
00:01:25,740 --> 00:01:27,520
The package dot Jason file.

32
00:01:27,520 --> 00:01:28,590
If this application had,

33
00:01:28,590 --> 00:01:31,100
one would live in this directory like this,

34
00:01:31,100 --> 00:01:34,260
just sitting in the root of the project inside.

35
00:01:34,260 --> 00:01:38,060
It contains metadata about the project very similar to the data,

36
00:01:38,060 --> 00:01:43,260
such as this description that we've already included in the index that Js file in our

37
00:01:43,260 --> 00:01:43,910
example.

38
00:01:43,910 --> 00:01:45,380
This includes the name,

39
00:01:45,380 --> 00:01:47,450
version and description of the project.

40
00:01:47,450 --> 00:01:51,920
But many types of information may be included in the package that Jason File.

41
00:01:51,920 --> 00:01:56,060
We're not going to deep dive into this because this course isn't about NPM.

42
00:01:56,060 --> 00:01:59,690
But let's look briefly at one of the more important payloads.

43
00:01:59,690 --> 00:02:00,510
Many projects,

44
00:02:00,510 --> 00:02:02,090
including their packaged at Jason,

45
00:02:02,090 --> 00:02:03,860
a list of dependencies.

46
00:02:03,860 --> 00:02:09,250
If we add a list of dependencies to the package dot Jason like so and then run the NPM

47
00:02:09,250 --> 00:02:10,410
install command.

48
00:02:10,410 --> 00:02:15,470
Those projects are going to be installed inside of a directory called Node Underscore

49
00:02:15,470 --> 00:02:18,500
Modules in the root of our directory.

50
00:02:18,500 --> 00:02:19,880
Let's say that,

51
00:02:19,880 --> 00:02:20,440
for example,

52
00:02:20,440 --> 00:02:22,090
I've gotten sick of our jokes.

53
00:02:22,090 --> 00:02:25,850
And so I've decided to find 1/3 party joke module on NPM.

54
00:02:25,850 --> 00:02:27,820
I find the module called jokes,

55
00:02:27,820 --> 00:02:30,810
review its current version and want to add it to my project.

56
00:02:30,810 --> 00:02:31,910
In that case,

57
00:02:31,910 --> 00:02:38,780
I add the name and version Number two are packaged Jason file here and then run NPM install

58
00:02:38,780 --> 00:02:44,450
on the command line now that projects code has been added inside of a subdirectory called

59
00:02:44,450 --> 00:02:49,360
node underscore modules and I can require or import that library,

60
00:02:49,360 --> 00:02:53,350
as I would any other node module that I had written myself.

61
00:02:53,350 --> 00:02:56,550
But note actually provides a helper for this.

62
00:02:56,550 --> 00:03:00,610
Since that module has now been installed in the directory called node modules,

63
00:03:00,610 --> 00:03:04,160
I can require it by just stating the name of the module.

64
00:03:04,160 --> 00:03:08,060
I don't need to write the relative or absolute path to the node modules.

65
00:03:08,060 --> 00:03:13,980
Forger note is automatically going to look for packages in that folder name by convention.

66
00:03:13,980 --> 00:03:15,540
After I run in PM,

67
00:03:15,540 --> 00:03:20,640
install you notice I now have a package dash lock dot Jason file.

68
00:03:20,640 --> 00:03:23,680
This is the feature available on later versions of NPM,

69
00:03:23,680 --> 00:03:28,530
which locks down the exact versions of the node modules you have installed since your

70
00:03:28,530 --> 00:03:32,920
package that Jason File may have specified you dependencies in such a way that they don't

71
00:03:32,920 --> 00:03:37,700
actually specify an exact version for each dependency but less things dollar choose the

72
00:03:37,700 --> 00:03:40,710
newest from a range of possible dependency versions.

73
00:03:40,710 --> 00:03:46,830
Getting node modules installed into a note project is one of the primary purposes of NPM,

74
00:03:46,830 --> 00:03:48,690
which is why it's named as such.

75
00:03:48,690 --> 00:03:50,080
The Node Package Manager.

76
00:03:50,080 --> 00:03:55,250
The package dot Jason file is a primary artifact of NPM and has a number of features and

77
00:03:55,250 --> 00:03:57,560
capabilities that we haven't gone into here.

78
00:03:57,560 --> 00:04:00,050
If a project has a package dot Jason file,

79
00:04:00,050 --> 00:04:04,510
you may also notice a hidden file called dot N P M R C.

80
00:04:04,510 --> 00:04:10,120
This file is pretty simple inside and just contains a token that lets her local NPM

81
00:04:10,120 --> 00:04:14,970
installation authenticate as a given user against the NPM Cloud.

82
00:04:14,970 --> 00:04:21,490
This enables NPM to do things such as download private NPM modules that the user has access

83
00:04:21,490 --> 00:04:21,850
to,

84
00:04:21,850 --> 00:04:27,330
but that an anonymous user would not have access to as far as using these private and

85
00:04:27,330 --> 00:04:28,390
public dependencies.

86
00:04:28,390 --> 00:04:32,940
We've already gone over a few conventions in the last lecture that you require,

87
00:04:32,940 --> 00:04:38,730
or import module is genuinely at the top of the file and that each no Js file generally

88
00:04:38,730 --> 00:04:39,920
requires Onley,

89
00:04:39,920 --> 00:04:44,920
the modules that it individually needs to perform its tasks rather than some master file.

90
00:04:44,920 --> 00:04:48,880
Importing all the dependencies for a project and then passing those modules to other

91
00:04:48,880 --> 00:04:49,550
scripts.

92
00:04:49,550 --> 00:04:55,210
Testing and task ready testing in task running are both quite popular in the note.

93
00:04:55,210 --> 00:05:01,030
Community testing scripts are commonly contained in a slash test directory and are often

94
00:05:01,030 --> 00:05:05,350
triggered or ran by a quote unquote test runner such as Mocha.

95
00:05:05,350 --> 00:05:11,920
If the project you're reviewing has a complex testing C I or deployment CD configuration

96
00:05:11,920 --> 00:05:15,030
and is using a C I C D Runner such as Travis See,

97
00:05:15,030 --> 00:05:21,340
I you may also notice a dot Travis dot yeah mo file in the root directory as well,

98
00:05:21,340 --> 00:05:22,790
which tells Travis C.

99
00:05:22,790 --> 00:05:27,300
I all the configuration that the project needs for the test to pass as well as other

100
00:05:27,300 --> 00:05:28,250
related settings.

101
00:05:28,250 --> 00:05:29,560
Similarly,

102
00:05:29,560 --> 00:05:31,510
if the project is using a JavaScript,

103
00:05:31,510 --> 00:05:33,250
letters such as Js hint,

104
00:05:33,250 --> 00:05:38,420
you may see another hidden file a dot Js hint RC file,

105
00:05:38,420 --> 00:05:39,970
which configures the Java script.

106
00:05:39,970 --> 00:05:45,950
Linder in various ways all of the kinds of tasks JavaScript lending test running C I.

107
00:05:45,950 --> 00:05:50,670
C D operations are often controlled by a general purpose task runner.

108
00:05:50,670 --> 00:05:55,600
The two most popular task runners are a grant and gulp accordingly.

109
00:05:55,600 --> 00:06:01,300
It's quite common to see grunt files and hope files inside of no Js projects,

110
00:06:01,300 --> 00:06:06,060
documentation and source control get into a lesser extent.

111
00:06:06,060 --> 00:06:09,380
Get hub is by far the defacto source control.

112
00:06:09,380 --> 00:06:13,470
Implementation for note get is the underlying protocol in application.

113
00:06:13,470 --> 00:06:17,660
While Get Hub is a SAS provider of cloud based get repositories,

114
00:06:17,660 --> 00:06:22,050
which facilitates easy collaboration among and between teams as resort,

115
00:06:22,050 --> 00:06:27,900
you're very commonly see a doctor get hidden file within no Js applications and modules.

116
00:06:27,900 --> 00:06:30,550
You also see a dot get ignore file,

117
00:06:30,550 --> 00:06:30,910
which,

118
00:06:30,910 --> 00:06:32,280
as its name implies,

119
00:06:32,280 --> 00:06:36,300
hide specified files and directories from source control.

120
00:06:36,300 --> 00:06:37,050
In addition,

121
00:06:37,050 --> 00:06:41,160
since get Hub has fantastic built in support for markdown formatting,

122
00:06:41,160 --> 00:06:42,210
you often fighting,

123
00:06:42,210 --> 00:06:45,250
read me dot MD file in the root of a project.

124
00:06:45,250 --> 00:06:46,170
This file,

125
00:06:46,170 --> 00:06:48,110
which should contain markdown syntax,

126
00:06:48,110 --> 00:06:52,090
is automatically highlighted on the primary project page for a repository,

127
00:06:52,090 --> 00:06:56,860
so project descriptions in human readable metadata about the project often goes in this

128
00:06:56,860 --> 00:06:57,290
file.

129
00:06:57,290 --> 00:07:02,530
The NPM Cloud and PMG s dot org's has adopted this convention as well and automatically

130
00:07:02,530 --> 00:07:08,710
displays the parsed markdown Read me for repositories modules on each packages home page.

131
00:07:08,710 --> 00:07:09,380
Technically,

132
00:07:09,380 --> 00:07:14,980
there can be many different markdown files in any given directory of a repository as well

133
00:07:14,980 --> 00:07:16,010
as subdirectories.

134
00:07:16,010 --> 00:07:19,170
But in practice you're likely to only encounter one.

135
00:07:19,170 --> 00:07:22,620
Read me dot m d file in the root of the project,

136
00:07:22,620 --> 00:07:28,450
and this file is likely to contain the vast majority of the documentation for the project.

137
00:07:28,450 --> 00:07:34,320
Documentation often also takes the form of code comments within JavaScript files,

138
00:07:34,320 --> 00:07:40,180
and a common convention is to use code comments above each function and the at Program

139
00:07:40,180 --> 00:07:43,860
string to spell out a description of each parameter being passed to that function.

140
00:07:43,860 --> 00:07:49,640
This convention plays well and may very well have been born from the use of comment parses

141
00:07:49,640 --> 00:07:52,770
that generate automatic documentation for projects.

142
00:07:52,770 --> 00:07:57,170
You're likely to encounter other code comments of various formats in many places.

143
00:07:57,170 --> 00:07:58,190
Within a note app.

144
00:07:58,190 --> 00:08:03,870
Some developers up to use the at to do line to indicate a feature they're currently working

145
00:08:03,870 --> 00:08:09,830
on or need to work on some also up to use the at author tag to indicate who wrote a certain

146
00:08:09,830 --> 00:08:10,850
line or section.

147
00:08:10,850 --> 00:08:12,050
It's worth noting,

148
00:08:12,050 --> 00:08:12,350
though,

149
00:08:12,350 --> 00:08:15,200
that many other Debs vehemently opposed.

150
00:08:15,200 --> 00:08:20,870
The use of such comments as Gipp commits are a much more robust and reliable way to

151
00:08:20,870 --> 00:08:24,190
indicate who authored what within a given file.

152
00:08:24,190 --> 00:08:26,520
Environments and configuration.

153
00:08:26,520 --> 00:08:29,210
When it comes to application configuration,

154
00:08:29,210 --> 00:08:32,190
no provides woefully few conventions,

155
00:08:32,190 --> 00:08:32,750
if any,

156
00:08:32,750 --> 00:08:35,550
when configuring an application to run on local host.

157
00:08:35,550 --> 00:08:37,600
This issue is of trivial importance.

158
00:08:37,600 --> 00:08:41,390
But once you've gotten application that needs to run in different ways within different

159
00:08:41,390 --> 00:08:44,490
environments on a staging site versus a production site,

160
00:08:44,490 --> 00:08:45,250
for example,

161
00:08:45,250 --> 00:08:48,160
configuration is used can come into focus.

162
00:08:48,160 --> 00:08:49,240
Unfortunately,

163
00:08:49,240 --> 00:08:52,420
there's no given solution that works in all cases,

164
00:08:52,420 --> 00:08:57,430
because much of the configuration of an APP is dependent on the features available within

165
00:08:57,430 --> 00:08:58,200
the environment,

166
00:08:58,200 --> 00:09:00,010
the apple eventually be running in,

167
00:09:00,010 --> 00:09:05,040
and the continuous integration and deployment systems that will ship the app to those

168
00:09:05,040 --> 00:09:08,780
environments here will go over a few of the most popular options.

169
00:09:08,780 --> 00:09:10,090
The first option,

170
00:09:10,090 --> 00:09:11,520
and likely the most popular,

171
00:09:11,520 --> 00:09:17,690
is to start your application with the node underscore arm equals environment name such as

172
00:09:17,690 --> 00:09:19,830
node underscore on equals,

173
00:09:19,830 --> 00:09:23,000
staging or note off equals production.

174
00:09:23,000 --> 00:09:28,550
The command line variable will become accessible within your note application at process

175
00:09:28,550 --> 00:09:31,530
dot um dot node.

176
00:09:31,530 --> 00:09:32,770
Underscore off.

177
00:09:32,770 --> 00:09:39,880
Really any command line arguments set will be available at process dot on dot that variable

178
00:09:39,880 --> 00:09:40,340
name,

179
00:09:40,340 --> 00:09:43,620
but note arm is a particularly popular convention.

180
00:09:43,620 --> 00:09:48,150
You could just as easily call it Food bar equals production to the same effect.

181
00:09:48,150 --> 00:09:49,110
At any rate,

182
00:09:49,110 --> 00:09:52,600
since the environment variable is available within your application,

183
00:09:52,600 --> 00:09:57,430
many developers will create a single configuration file with a switch inside of it.

184
00:09:57,430 --> 00:10:03,710
This configuration file will export on Lee the variables configured for the environment in

185
00:10:03,710 --> 00:10:04,360
question.

186
00:10:04,360 --> 00:10:08,550
Any of the other node files can require that config file,

187
00:10:08,550 --> 00:10:13,370
and the variables they'll see will be specific to the environment they're in.

188
00:10:13,370 --> 00:10:16,330
This is the convention will be using later on in the course,

189
00:10:16,330 --> 00:10:19,530
so we'll dive into how this works in detail much more later.

190
00:10:19,530 --> 00:10:22,740
Don't worry if there's still a bit confused right now.

191
00:10:22,740 --> 00:10:27,890
Another convention that we won't be using but it's still popular is to pass every single

192
00:10:27,890 --> 00:10:31,310
configuration variable to the note app when it starts,

193
00:10:31,310 --> 00:10:32,450
for example,

194
00:10:32,450 --> 00:10:37,750
rather than having a config file that states What DB password is in different environments

195
00:10:37,750 --> 00:10:37,750
.

196
00:10:37,750 --> 00:10:43,910
You would simply pass the DB password to the node app when you issue the start command.

197
00:10:43,910 --> 00:10:47,360
This convention sounds unwieldy and hard to manage,

198
00:10:47,360 --> 00:10:51,770
but it's actually a fairly elegant solution and has a number of benefits.

199
00:10:51,770 --> 00:10:54,900
First for a large project or an open source project.

200
00:10:54,900 --> 00:10:57,990
None of your configuration gets committed to source control.

201
00:10:57,990 --> 00:10:58,760
Second,

202
00:10:58,760 --> 00:11:01,430
you write your code in a much more function away,

203
00:11:01,430 --> 00:11:04,320
and this makes it much easier to write tests.

204
00:11:04,320 --> 00:11:05,020
Third,

205
00:11:05,020 --> 00:11:07,130
when you configuration needs to change,

206
00:11:07,130 --> 00:11:11,020
you just stop the app and restart it with the other variables.

207
00:11:11,020 --> 00:11:12,650
No code changes needed.

208
00:11:12,650 --> 00:11:16,560
Another convention is to use a dot arm file.

209
00:11:16,560 --> 00:11:23,380
This a file whose name is predictably dot e envy and sits in your repo but gets ignored by

210
00:11:23,380 --> 00:11:25,770
source control using a get ignore file.

211
00:11:25,770 --> 00:11:32,050
The idea is you put all your configuration inside of the dot arm file whose format is

212
00:11:32,050 --> 00:11:32,860
similar to Yam.

213
00:11:32,860 --> 00:11:33,150
Oh,

214
00:11:33,150 --> 00:11:35,310
and then your application reads that file.

215
00:11:35,310 --> 00:11:36,300
Ideally,

216
00:11:36,300 --> 00:11:41,570
you're testing and build systems would insert dot arm files into the code base before they

217
00:11:41,570 --> 00:11:42,640
test and deploy it,

218
00:11:42,640 --> 00:11:48,960
and developers would have their own dot arm files living in the repo for their local host

219
00:11:48,960 --> 00:11:52,480
work styles in patterns like PHP,

220
00:11:52,480 --> 00:11:53,670
ruby and python.

221
00:11:53,670 --> 00:11:56,840
No developers tend to code with certain styles.

222
00:11:56,840 --> 00:12:02,830
By far the most ubiquitous and popular style guide is published by Airbnb and is worth

223
00:12:02,830 --> 00:12:03,950
reviewing here.

224
00:12:03,950 --> 00:12:07,380
This is a general purpose JavaScript style guide,

225
00:12:07,380 --> 00:12:10,880
but is very popular with no Js Debs in particular.

226
00:12:10,880 --> 00:12:15,810
Another influence on style comes from the letters that are popular in no Js projects,

227
00:12:15,810 --> 00:12:17,020
namely Js,

228
00:12:17,020 --> 00:12:18,350
hint and Js lint.

229
00:12:18,350 --> 00:12:23,570
These lenders will catch many style issues that aren't of major consequence to the function

230
00:12:23,570 --> 00:12:24,650
of the application.

231
00:12:24,650 --> 00:12:26,580
But our common conventions used,

232
00:12:26,580 --> 00:12:29,890
rather than going over all the styles and patterns here.

233
00:12:29,890 --> 00:12:30,380
Now,

234
00:12:30,380 --> 00:12:33,810
just pay attention to the way applications in this course are written.

235
00:12:33,810 --> 00:12:34,390
Later on,

236
00:12:34,390 --> 00:12:37,550
I'll try to adhere to popular patterns whenever possible.

237
00:12:37,550 --> 00:12:39,370
Error handling,

238
00:12:39,370 --> 00:12:41,500
as you'll see in the coming lectures,

239
00:12:41,500 --> 00:12:45,250
are functions and libraries will take a common approach to error.

240
00:12:45,250 --> 00:12:48,320
Handling this approach has three components.

241
00:12:48,320 --> 00:12:55,320
One air back this another convention popularized by express with the air back pattern.

242
00:12:55,320 --> 00:12:56,290
Every callbacks,

243
00:12:56,290 --> 00:12:58,630
first parameter is an error parameter,

244
00:12:58,630 --> 00:13:02,380
which should come back is no undefined or false.

245
00:13:02,380 --> 00:13:05,780
If There's no error to when writing functions.

246
00:13:05,780 --> 00:13:08,400
We avoid throwing exceptions most of the time,

247
00:13:08,400 --> 00:13:12,890
opting instead to return the encountered error to the collar,

248
00:13:12,890 --> 00:13:14,780
such as through the air bath parameter.

249
00:13:14,780 --> 00:13:16,220
Since no Js is single,

250
00:13:16,220 --> 00:13:16,690
threaded,

251
00:13:16,690 --> 00:13:19,620
thrown exceptions kill the entire application.

252
00:13:19,620 --> 00:13:22,990
So if we request comes sin to your node rest API I,

253
00:13:22,990 --> 00:13:23,640
for example,

254
00:13:23,640 --> 00:13:25,240
and you encounter an errant throw.

255
00:13:25,240 --> 00:13:26,010
An exception,

256
00:13:26,010 --> 00:13:27,810
the entire application will die,

257
00:13:27,810 --> 00:13:31,650
not just the process that's handling that particular request,

258
00:13:31,650 --> 00:13:34,910
but the entire application handling all requests.

259
00:13:34,910 --> 00:13:39,060
If you encounter an error that truly should kill the whole advocation,

260
00:13:39,060 --> 00:13:40,580
it's fine to throw.

261
00:13:40,580 --> 00:13:42,950
But these cases are pretty rare.

262
00:13:42,950 --> 00:13:43,910
Three.

263
00:13:43,910 --> 00:13:46,490
As in browser based JavaScript,

264
00:13:46,490 --> 00:13:51,080
avoid using Global's and polluting the global name space whenever possible.

265
00:13:51,080 --> 00:13:56,920
Many note applications have dozens or even hundreds of dependencies and libraries.

266
00:13:56,920 --> 00:14:02,500
If every library at its own global variables and polluted the global name space,

267
00:14:02,500 --> 00:14:07,770
it would be very difficult to avoid collisions when your application is defining variables

268
00:14:07,770 --> 00:14:08,610
of its own.

269
00:14:08,610 --> 00:14:10,510
So rather than risk collisions,

270
00:14:10,510 --> 00:14:16,780
each module or library should scope there variables to its own module and to its own

271
00:14:16,780 --> 00:14:17,540
functions,

272
00:14:17,540 --> 00:14:19,890
thus avoiding any names based pollution.

273
00:14:19,890 --> 00:14:24,410
You'll see how we accomplish this and other conventions in the coming lectures

