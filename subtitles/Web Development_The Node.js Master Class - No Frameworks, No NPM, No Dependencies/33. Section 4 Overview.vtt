WEBVTT
ï»¿1
00:00:00.000 --> 00:00:10.120
welcome to the final section of this course that no J a s a p I consists of about 45 46 or

2
00:00:10.120 --> 00:00:11.200
so modules,

3
00:00:11.200 --> 00:00:12.640
and so far in this course,

4
00:00:12.640 --> 00:00:17.160
we have used about 30 of them in this last section.

5
00:00:17.160 --> 00:00:22.070
We are going to skim over some of the modules that I don't think it would be appropriate to

6
00:00:22.070 --> 00:00:23.020
use in this chorus,

7
00:00:23.020 --> 00:00:28.170
either because they're too experimental or because they're just outside the scope of this

8
00:00:28.170 --> 00:00:28.580
course.

9
00:00:28.580 --> 00:00:34.510
And then we are going to have a number of lectures showing examples of half a dozen or so

10
00:00:34.510 --> 00:00:38.780
of this remaining modules that I think it would be useful for you to use specifically.

11
00:00:38.780 --> 00:00:53.050
We're going to do lectures on http two on VM on u dp Data Graham on net on TLS SSL on rebel

12
00:00:53.050 --> 00:01:00.310
and on a sink hooks so that will be coming in the next lectures of this section.

13
00:01:00.310 --> 00:01:03.270
But before we jump into those modules,

14
00:01:03.270 --> 00:01:07.530
let's just do some final housekeeping on some of the modules that we won't be doing a deep

15
00:01:07.530 --> 00:01:12.230
dive on in this course 1st 3 of the modules are deprecate ID,

16
00:01:12.230 --> 00:01:14.090
so unless you're already using it,

17
00:01:14.090 --> 00:01:19.920
you don't want to deprecate id AP Eyes is a section full of modules that you really should

18
00:01:19.920 --> 00:01:21.710
not be using at all anymore.

19
00:01:21.710 --> 00:01:24.150
There's another module called domain,

20
00:01:24.150 --> 00:01:26.380
which is officially deprecate ID.

21
00:01:26.380 --> 00:01:29.410
Another module is called puny code,

22
00:01:29.410 --> 00:01:30.150
and again,

23
00:01:30.150 --> 00:01:32.800
although it is part of the documentation,

24
00:01:32.800 --> 00:01:33.310
still,

25
00:01:33.310 --> 00:01:35.500
it is clearly deprecate ID,

26
00:01:35.500 --> 00:01:39.150
and you don't want to use it unless you absolutely have to.

27
00:01:39.150 --> 00:01:40.270
Next,

28
00:01:40.270 --> 00:01:47.390
there is a module that no tells you you really won't have a good reason to use or will not

29
00:01:47.390 --> 00:01:48.290
be able to use.

30
00:01:48.290 --> 00:01:50.450
And that is called T T Y T.

31
00:01:50.450 --> 00:01:50.590
T.

32
00:01:50.590 --> 00:01:55.060
Y is a stable module but is really part of other modules.

33
00:01:55.060 --> 00:02:01.660
It enforces part of the behavior that no does automatically when you are inside of a

34
00:02:01.660 --> 00:02:02.790
terminal application.

35
00:02:02.790 --> 00:02:06.620
It does have a few things that you might find useful.

36
00:02:06.620 --> 00:02:07.350
For example,

37
00:02:07.350 --> 00:02:13.160
this event resize allows you to bind to the event when the screen size of the terminal

38
00:02:13.160 --> 00:02:13.750
changes.

39
00:02:13.750 --> 00:02:17.180
So if you're doing something like we're doing with our command line application and you

40
00:02:17.180 --> 00:02:21.490
want to keep track of the screen size changing so you don't have to read the screen size

41
00:02:21.490 --> 00:02:22.790
over and over again,

42
00:02:22.790 --> 00:02:24.250
you can do that.

43
00:02:24.250 --> 00:02:25.770
And when you do that,

44
00:02:25.770 --> 00:02:28.160
you're using the T T Y module,

45
00:02:28.160 --> 00:02:31.090
but you don't actually have to require or call tt White.

46
00:02:31.090 --> 00:02:36.950
All that just exposes itself as process standard out on resize.

47
00:02:36.950 --> 00:02:38.060
So T.

48
00:02:38.060 --> 00:02:38.280
T.

49
00:02:38.280 --> 00:02:42.430
Y itself is never really something that you're going to have to do.

50
00:02:42.430 --> 00:02:47.790
Require TT why you might be doing things like binding to this resize event.

51
00:02:47.790 --> 00:02:52.910
But at least I have not had a situation where I needed to require the TT.

52
00:02:52.910 --> 00:02:54.650
Why module explicitly?

53
00:02:54.650 --> 00:03:00.050
And that is exactly what note says will be the case for most people.

54
00:03:00.050 --> 00:03:01.100
In most cases,

55
00:03:01.100 --> 00:03:01.640
they say,

56
00:03:01.640 --> 00:03:05.830
it will not be necessary or possible to use this module directly.

57
00:03:05.830 --> 00:03:06.510
If you did,

58
00:03:06.510 --> 00:03:06.920
though,

59
00:03:06.920 --> 00:03:07.850
you could access it.

60
00:03:07.850 --> 00:03:10.160
T t y equals Required to do what?

61
00:03:10.160 --> 00:03:18.100
There's one module called ECMO script modules That will be a very nice feature for note in

62
00:03:18.100 --> 00:03:19.660
future versions of Node.

63
00:03:19.660 --> 00:03:23.530
But in this LTs inversion eight LTs of node,

64
00:03:23.530 --> 00:03:26.020
there's some crucial components missing,

65
00:03:26.020 --> 00:03:27.100
so in version eight,

66
00:03:27.100 --> 00:03:29.100
it's still considered experimental.

67
00:03:29.100 --> 00:03:31.940
You have to turn it on with an experimental flag,

68
00:03:31.940 --> 00:03:34.980
and there are some crucial components,

69
00:03:34.980 --> 00:03:37.620
like import that are missing for me.

70
00:03:37.620 --> 00:03:43.340
The primary reason to use GSM modules was so that you could switch from the require syntax

71
00:03:43.340 --> 00:03:50.620
to the import syntax and end up importing modules back and forth that way with note eight.

72
00:03:50.620 --> 00:03:51.930
That's not a possibility,

73
00:03:51.930 --> 00:03:55.400
because import is not part of this release.

74
00:03:55.400 --> 00:03:59.810
In future versions that will be and then switching over to GSM modules.

75
00:03:59.810 --> 00:04:02.990
Atmospheric modules is something that I would recommend.

76
00:04:02.990 --> 00:04:07.350
There are two modules that require third party tools to use.

77
00:04:07.350 --> 00:04:09.820
One is called Tracing,

78
00:04:09.820 --> 00:04:16.850
which really just allows you to create log files that allow you to do tracing in chrome or

79
00:04:16.850 --> 00:04:18.290
some other tracing reader.

80
00:04:18.290 --> 00:04:19.310
For us,

81
00:04:19.310 --> 00:04:21.390
Tracy isn't a major concern,

82
00:04:21.390 --> 00:04:26.950
but if you do need to do tracing and you have some way to retrace files like in chrome,

83
00:04:26.950 --> 00:04:28.910
then you can look into this module.

84
00:04:28.910 --> 00:04:31.170
The other one is the inspector.

85
00:04:31.170 --> 00:04:34.510
The inspector is experimental,

86
00:04:34.510 --> 00:04:41.630
but this inspector module basically just provides an A p I so that you can interact with

87
00:04:41.630 --> 00:04:42.830
the VA inspector.

88
00:04:42.830 --> 00:04:45.090
You'll still need some way to do that.

89
00:04:45.090 --> 00:04:48.950
This is just exposing different ways that you could be interacting.

90
00:04:48.950 --> 00:04:53.200
If you're building some kind of inspector or you're using inspector,

91
00:04:53.200 --> 00:04:55.430
then you can plug into this module here.

92
00:04:55.430 --> 00:04:59.260
Now there's three other modules that might be useful to you,

93
00:04:59.260 --> 00:05:02.920
but they require you to build node separately.

94
00:05:02.920 --> 00:05:08.120
These aren't things that you can just do in no doubt the box you need to rebuild your own

95
00:05:08.120 --> 00:05:09.250
version of node,

96
00:05:09.250 --> 00:05:11.440
a re compiled note that is,

97
00:05:11.440 --> 00:05:13.250
with these things turned on,

98
00:05:13.250 --> 00:05:15.690
and with whatever additions that you've added,

99
00:05:15.690 --> 00:05:18.780
these three things are going to be internationalization.

100
00:05:18.780 --> 00:05:23.790
So if you have situations where you need to support internationalization,

101
00:05:23.790 --> 00:05:30.300
you can rebuild node with this built in or if you have your own I see you as they call it.

102
00:05:30.300 --> 00:05:36.500
You can embed that internationalization data inside of node and provided at run time.

103
00:05:36.500 --> 00:05:37.150
If you like.

104
00:05:37.150 --> 00:05:39.450
There are different options for you to do,

105
00:05:39.450 --> 00:05:40.890
and by default.

106
00:05:40.890 --> 00:05:42.300
None of these are.

107
00:05:42.300 --> 00:05:45.520
Very few of these are going to be turned on the other two modules.

108
00:05:45.520 --> 00:05:50.660
I mentioned R C plus plus add ons and C plus plus add ons and a P I.

109
00:05:50.660 --> 00:05:59.300
Both of these modules allow you to write C plus plus and then rebuild node or include that

110
00:05:59.300 --> 00:06:03.970
C plus plus within node and reference it from JavaScript land.

111
00:06:03.970 --> 00:06:05.060
Obviously,

112
00:06:05.060 --> 00:06:08.300
writing c++ would be outside the scope of this course.

113
00:06:08.300 --> 00:06:12.530
But if you are interested in writing a C plus plus at on those are building here.

114
00:06:12.530 --> 00:06:18.810
The major difference between these modules is that n a p I is striving to support a

115
00:06:18.810 --> 00:06:26.140
consistent way to interact with the module so that Thesis e Plus plus AP eyes don't keep

116
00:06:26.140 --> 00:06:27.900
changing over time,

117
00:06:27.900 --> 00:06:33.870
whereas C plus plus add ons isn't striving for any kind of intergenerational consistency

118
00:06:33.870 --> 00:06:34.150
there.

119
00:06:34.150 --> 00:06:36.500
If you'd like to do C plus plus add ons,

120
00:06:36.500 --> 00:06:41.210
you would like to write C plus plus and interact with V eight directly.

121
00:06:41.210 --> 00:06:45.680
The no documentation walks you through some hello world stuff where you can write C plus

122
00:06:45.680 --> 00:06:48.680
plus and build it into note yourself.

123
00:06:48.680 --> 00:06:52.560
You will need some tools like no TGIF etcetera,

124
00:06:52.560 --> 00:06:57.970
but it is a pretty straightforward documentation if you want to go into their alright.

125
00:06:57.970 --> 00:06:59.480
Without further ado,

126
00:06:59.480 --> 00:07:05.830
we can now start jumping in to some examples of the last few remaining modules that we

127
00:07:05.830 --> 00:07:09.990
mentioned HDB to the M rappel,

128
00:07:09.990 --> 00:07:10.520
etcetera,

129
00:07:10.520 --> 00:07:11.020
etcetera.

130
00:07:11.020 --> 00:07:15.650
So let's move on to the next lecture and explore these final modules

