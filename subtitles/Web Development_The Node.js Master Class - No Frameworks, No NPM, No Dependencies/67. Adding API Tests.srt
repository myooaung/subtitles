1
00:00:00,000 --> 00:00:04,420
in this lecture,

2
00:00:04,420 --> 00:00:07,380
we're going to create some A P I tests.

3
00:00:07,380 --> 00:00:12,780
And by that I mean we're actually going to start up our application and then make http

4
00:00:12,780 --> 00:00:16,500
requests to the application and check the responses.

5
00:00:16,500 --> 00:00:17,560
For example,

6
00:00:17,560 --> 00:00:21,790
will want to verify that the Ping route really does return a 200.

7
00:00:21,790 --> 00:00:22,910
And by doing that over,

8
00:00:22,910 --> 00:00:23,860
http,

9
00:00:23,860 --> 00:00:29,800
this kind of integration test or and toe end test is testing that all the intermediary

10
00:00:29,800 --> 00:00:34,280
steps like processing the user's request and being able to spit out Jason.

11
00:00:34,280 --> 00:00:36,850
Those must be working if the A p I.

12
00:00:36,850 --> 00:00:38,980
Itself is returning the expected result.

13
00:00:38,980 --> 00:00:43,990
So we're going to start by creating another file next to the unit dot Js file.

14
00:00:43,990 --> 00:00:51,670
But we're gonna call it a p i dot Js So I'm going to say touch test ap i dot Js open this

15
00:00:51,670 --> 00:00:56,580
up and say that this file is going to contain the A P I tests.

16
00:00:56,580 --> 00:01:01,250
This is going to have a number of dependencies.

17
00:01:01,250 --> 00:01:04,240
The first is going to be the app itself.

18
00:01:04,240 --> 00:01:05,020
Like I said,

19
00:01:05,020 --> 00:01:09,950
we need to start up the app which is not something that we've done from a test before.

20
00:01:09,950 --> 00:01:15,480
So we actually need to require the index file from the root of our directory.

21
00:01:15,480 --> 00:01:17,950
We need the assertion library as before,

22
00:01:17,950 --> 00:01:29,610
we're going to need the HDP module in order to craft these HTP requests and we're going to

23
00:01:29,610 --> 00:01:31,200
need our config object.

24
00:01:31,200 --> 00:01:40,120
The config object is going to tell us which port that we should actually make our htp

25
00:01:40,120 --> 00:01:44,180
requests to Before we fill out the rest of this file,

26
00:01:44,180 --> 00:01:50,330
Let's actually go to that config object and create a separate configuration block just for

27
00:01:50,330 --> 00:01:50,830
testing.

28
00:01:50,830 --> 00:01:56,520
So I'm gonna copy or a staging environment and say that this is going to be the testing

29
00:01:56,520 --> 00:01:59,750
environment when it paste it down here.

30
00:01:59,750 --> 00:02:05,770
And the only difference that we want to make is that we want when in testing mode.

31
00:02:05,770 --> 00:02:16,480
Http port to be 4000 https to be 4000 and what the armed name is then going to be testing,

32
00:02:16,480 --> 00:02:19,950
But everything else can stay the same.

33
00:02:19,950 --> 00:02:25,350
So now when we start our app in testing mode,

34
00:02:25,350 --> 00:02:27,350
it's gonna be running on 4000.

35
00:02:27,350 --> 00:02:28,260
Or to put it another way,

36
00:02:28,260 --> 00:02:31,950
if we see the application running on 4000 we know that it's in testing mode,

37
00:02:31,950 --> 00:02:34,610
not staging we Of course,

38
00:02:34,610 --> 00:02:37,350
though need to change this key to be testing as well.

39
00:02:37,350 --> 00:02:39,290
Okay,

40
00:02:39,290 --> 00:02:45,750
now we actually need a way to tell the application to run in testing mode.

41
00:02:45,750 --> 00:02:47,250
When we started up,

42
00:02:47,250 --> 00:02:50,990
we could do note off equals testing,

43
00:02:50,990 --> 00:02:56,150
but we want to just be able to call no test that having to remember anything else from the

44
00:02:56,150 --> 00:02:56,880
command line.

45
00:02:56,880 --> 00:02:59,530
So I'm going to goto our test runner here,

46
00:02:59,530 --> 00:03:05,760
and the first thing I'm going to do is override the node off variable.

47
00:03:05,760 --> 00:03:09,470
We do this by just saying process that,

48
00:03:09,470 --> 00:03:13,070
um dot note off equals testing.

49
00:03:13,070 --> 00:03:13,620
Now,

50
00:03:13,620 --> 00:03:19,060
no matter what somebody said when they did note on and then node test,

51
00:03:19,060 --> 00:03:22,020
we would be overriding it to testing we.

52
00:03:22,020 --> 00:03:26,720
So we are enforcing the fact that when these tests run is going to be starting that

53
00:03:26,720 --> 00:03:29,820
vacation up with note off equals testing.

54
00:03:29,820 --> 00:03:36,020
Which means anyone using the config is going to inherit this configuration object as

55
00:03:36,020 --> 00:03:37,850
opposed to the staging or production ones.

56
00:03:37,850 --> 00:03:38,980
Okay,

57
00:03:38,980 --> 00:03:39,290
Now,

58
00:03:39,290 --> 00:03:40,700
let's go back to a P I.

59
00:03:40,700 --> 00:03:40,830
D.

60
00:03:40,830 --> 00:03:41,570
J s.

61
00:03:41,570 --> 00:03:43,040
We want to,

62
00:03:43,040 --> 00:03:43,800
as before,

63
00:03:43,800 --> 00:03:46,570
create a holder for the test.

64
00:03:46,570 --> 00:03:48,120
This one,

65
00:03:48,120 --> 00:03:49,990
we're gonna call ap I instead of unit,

66
00:03:49,990 --> 00:03:59,620
and it's just going to be an object and down at the bottom we're going to export the tests

67
00:03:59,620 --> 00:04:00,750
to the runner.

68
00:04:00,750 --> 00:04:05,140
So Marjo dot exports equals a P I.

69
00:04:05,140 --> 00:04:07,580
Now let's write some tests.

70
00:04:07,580 --> 00:04:12,640
All of these tests are going to include making requests over http.

71
00:04:12,640 --> 00:04:17,270
So rather than crafting http requests by hand each time,

72
00:04:17,270 --> 00:04:19,450
let's just make ourselves a little helper.

73
00:04:19,450 --> 00:04:25,490
We're gonna call this our helpers equals an object,

74
00:04:25,490 --> 00:04:28,940
and then this function is going to be helpers.

75
00:04:28,940 --> 00:04:31,550
Make get request,

76
00:04:31,550 --> 00:04:35,850
and that's going to be a function that takes in a path and a callback.

77
00:04:35,850 --> 00:04:42,460
We want to configure the request details and then if you remember,

78
00:04:42,460 --> 00:04:44,810
send the request afterwards.

79
00:04:44,810 --> 00:04:46,850
So let's configure these details.

80
00:04:46,850 --> 00:04:51,780
This is just going to be for simple get requests.

81
00:04:51,780 --> 00:04:54,750
And so we don't really need to do anything fancy here,

82
00:04:54,750 --> 00:05:00,380
since they're always coming to our a p I on local host,

83
00:05:00,380 --> 00:05:06,650
the protocol is always going to be http post name.

84
00:05:06,650 --> 00:05:12,000
It's local host port comes from the config file Port is config.

85
00:05:12,000 --> 00:05:20,770
Http port the method it's going to be get the path is going to be the path that gets passed

86
00:05:20,770 --> 00:05:29,390
its function when the headers are going to be content type application slash J saw.

87
00:05:29,390 --> 00:05:33,380
That's all the configuration we need to do.

88
00:05:33,380 --> 00:05:35,180
Then when we actually send the request,

89
00:05:35,180 --> 00:05:40,560
we're gonna call rec equals http module request,

90
00:05:40,560 --> 00:05:47,470
Pass it the request details and expect back in response object which we can simply call

91
00:05:47,470 --> 00:05:48,850
back to whoever called us.

92
00:05:48,850 --> 00:05:51,860
Then we call wreck end,

93
00:05:51,860 --> 00:05:53,350
which ends it off.

94
00:05:53,350 --> 00:05:55,380
And we're done.

95
00:05:55,380 --> 00:06:01,160
So that helper will allow us to write these tests a lot easier before we make that first

96
00:06:01,160 --> 00:06:05,750
http requests We actually need to include the app and started up.

97
00:06:05,750 --> 00:06:14,240
So we want to say that the main in it function should be able to run without throwing.

98
00:06:14,240 --> 00:06:21,800
So we're gonna write this like we did those other does not throw functions before we want

99
00:06:21,800 --> 00:06:24,860
to call a p i bath in.

100
00:06:24,860 --> 00:06:28,560
It should start without throwing.

101
00:06:28,560 --> 00:06:34,350
It's going to be a function that takes done.

102
00:06:34,350 --> 00:06:37,780
We're going to call.

103
00:06:37,780 --> 00:06:40,650
Assert does not throw,

104
00:06:40,650 --> 00:06:47,250
and within that does not throw of type there.

105
00:06:47,250 --> 00:06:57,250
We are going to just call app in it and expect to Colback after in it is done booting up

106
00:06:57,250 --> 00:06:59,470
after in it is done.

107
00:06:59,470 --> 00:07:05,300
We want to call that done the one thing you might be remembering from our index dot Js file

108
00:07:05,300 --> 00:07:05,300
.

109
00:07:05,300 --> 00:07:06,980
Is that app in?

110
00:07:06,980 --> 00:07:08,950
It doesn't call back anything at all.

111
00:07:08,950 --> 00:07:10,800
It does three different things.

112
00:07:10,800 --> 00:07:14,340
One of them is set off by 50 milliseconds.

113
00:07:14,340 --> 00:07:18,430
So in order for this test to ever reach the done,

114
00:07:18,430 --> 00:07:21,450
we're going to need to add a callback toe apthe in it.

115
00:07:21,450 --> 00:07:23,050
Let's do that now.

116
00:07:23,050 --> 00:07:26,250
Within the function declaration,

117
00:07:26,250 --> 00:07:30,800
we're gonna include call back and then within the set time out,

118
00:07:30,800 --> 00:07:36,970
we're going to call callback because that should be the last thing that happens out of

119
00:07:36,970 --> 00:07:37,830
these procedures.

120
00:07:37,830 --> 00:07:39,640
Lastly,

121
00:07:39,640 --> 00:07:41,510
when we call the execute,

122
00:07:41,510 --> 00:07:44,850
we can't just invoke up in it because it is expecting a call backs.

123
00:07:44,850 --> 00:07:48,590
We have to call app in it and then pass it a callback that doesn't do anything,

124
00:07:48,590 --> 00:07:55,530
but one of the other things you'll notice is that we are requiring the application here and

125
00:07:55,530 --> 00:07:57,470
then asking it to start up,

126
00:07:57,470 --> 00:08:02,560
which means we don't expect it to start up the moment that we require it.

127
00:08:02,560 --> 00:08:06,610
We don't expect this file to self execute.

128
00:08:06,610 --> 00:08:14,430
We expect it to simply export itself and wait for us some third party to call the minute

129
00:08:14,430 --> 00:08:14,890
function.

130
00:08:14,890 --> 00:08:18,370
That's not how this primary index file works.

131
00:08:18,370 --> 00:08:22,400
This index file defines its own in it and then calls itself,

132
00:08:22,400 --> 00:08:25,510
which means our tests would never reach this point.

133
00:08:25,510 --> 00:08:32,220
It would never be able to call in it because the moment that it included of our at this

134
00:08:32,220 --> 00:08:35,210
logic would run through and self execute.

135
00:08:35,210 --> 00:08:42,430
So we need to use a trick that's built into node to tell this file on Lee to self execute

136
00:08:42,430 --> 00:08:43,770
under certain conditions.

137
00:08:43,770 --> 00:08:48,110
And those conditions are that someone is invoking the file directly,

138
00:08:48,110 --> 00:08:52,200
such as going to the command line and calling node index dot Js.

139
00:08:52,200 --> 00:08:54,200
If they're invoking that directly,

140
00:08:54,200 --> 00:08:56,280
that means they're trying to run the application.

141
00:08:56,280 --> 00:08:57,400
If this file,

142
00:08:57,400 --> 00:08:58,170
on the other hand,

143
00:08:58,170 --> 00:09:00,460
is being invoked in directly,

144
00:09:00,460 --> 00:09:03,520
which means some other file is including it,

145
00:09:03,520 --> 00:09:07,030
our test runner is including it and then trying to invoke it.

146
00:09:07,030 --> 00:09:09,210
It should not self execute.

147
00:09:09,210 --> 00:09:18,270
So let's change this comment to self invoking only if required directly.

148
00:09:18,270 --> 00:09:26,440
So let's say if require dot main equals,

149
00:09:26,440 --> 00:09:28,250
equals equals module,

150
00:09:28,250 --> 00:09:30,690
then we want itself execute.

151
00:09:30,690 --> 00:09:36,190
Now this is just a quirk of the syntax built into knowed.

152
00:09:36,190 --> 00:09:38,010
What this is saying is,

153
00:09:38,010 --> 00:09:43,460
if you're invoking me directly my module is going to equal required at Main.

154
00:09:43,460 --> 00:09:49,430
If this file is being invoked from another file and that other file is the one that's being

155
00:09:49,430 --> 00:09:50,900
called from the command line,

156
00:09:50,900 --> 00:09:53,510
these two are not going to equal each other.

157
00:09:53,510 --> 00:09:56,400
And so this initialization function will never happen.

158
00:09:56,400 --> 00:09:58,840
So let's go back to a p i dot Js.

159
00:09:58,840 --> 00:10:05,710
We've modified in it and told in it not to start unless we tell it to when we're invoking

160
00:10:05,710 --> 00:10:07,590
it from a separate file,

161
00:10:07,590 --> 00:10:13,130
such as we're doing here now that we've started the application up and we've waited for it

162
00:10:13,130 --> 00:10:14,150
to start all the way up,

163
00:10:14,150 --> 00:10:19,160
we can make a request to Pink.

164
00:10:19,160 --> 00:10:32,610
So let's say that this test name is slash Ping should respond to get with 200 and this is

165
00:10:32,610 --> 00:10:37,490
going to accept a done and it's going to call our helper.

166
00:10:37,490 --> 00:10:40,850
So it's going to say helpers that make get request,

167
00:10:40,850 --> 00:10:44,170
the path we're going to tell it to hit it slash ping,

168
00:10:44,170 --> 00:10:52,770
and we're going to expect back a response when the response comes back.

169
00:10:52,770 --> 00:10:58,570
We're going to assert the equality between the Status code,

170
00:10:58,570 --> 00:11:04,710
which is available at Rez Status code and the number 200 which is the same as saying status

171
00:11:04,710 --> 00:11:07,240
code should equal 200 during assertion error.

172
00:11:07,240 --> 00:11:09,670
If that's not true and they were gonna call it done,

173
00:11:09,670 --> 00:11:11,870
let's make another request.

174
00:11:11,870 --> 00:11:13,140
Let's copy this down.

175
00:11:13,140 --> 00:11:16,550
Let's make a request to a P I slash users.

176
00:11:16,550 --> 00:11:19,120
Since we're making a ball,

177
00:11:19,120 --> 00:11:20,160
http,

178
00:11:20,160 --> 00:11:21,330
get request.

179
00:11:21,330 --> 00:11:23,250
With none of the required fields,

180
00:11:23,250 --> 00:11:25,470
this should call back of 400 to us.

181
00:11:25,470 --> 00:11:29,300
So make a request to a P I slash users.

182
00:11:29,300 --> 00:11:36,730
We want to say that a P I slash users should respond to get with a 400.

183
00:11:36,730 --> 00:11:46,490
So I'm gonna modify this path a p I slash users and assert equality between the status code

184
00:11:46,490 --> 00:11:51,850
and the number 400 to hammer this example home.

185
00:11:51,850 --> 00:11:55,750
Let's make a request to a random path,

186
00:11:55,750 --> 00:12:08,420
and we want to say a random path should respond to get with 404 We want to make a get

187
00:12:08,420 --> 00:12:11,570
request to this,

188
00:12:11,570 --> 00:12:13,250
uh,

189
00:12:13,250 --> 00:12:16,650
shouldn't exist.

190
00:12:16,650 --> 00:12:23,980
And then we want to assert the equality between the status code we get back and 404 Okay,

191
00:12:23,980 --> 00:12:26,620
so those are all the integration tests that we need.

192
00:12:26,620 --> 00:12:27,850
As you can see,

193
00:12:27,850 --> 00:12:29,760
it's very easy to get the status code.

194
00:12:29,760 --> 00:12:37,700
It would be just as easy to get the body text or the response headers or anything else from

195
00:12:37,700 --> 00:12:38,580
these requests.

196
00:12:38,580 --> 00:12:43,050
And if you did so you could validate all kinds of things.

197
00:12:43,050 --> 00:12:44,720
If you want to validate that,

198
00:12:44,720 --> 00:12:50,080
the payload that the AP eyes returning should include certain keys or should have certain

199
00:12:50,080 --> 00:12:50,760
values.

200
00:12:50,760 --> 00:12:52,350
You could do that there.

201
00:12:52,350 --> 00:12:56,820
If you wanted to scrape HTML pages and assert,

202
00:12:56,820 --> 00:13:01,920
you know there should be a head or there should be a body or there should be this Dave or

203
00:13:01,920 --> 00:13:04,370
this span inside of this HTML.

204
00:13:04,370 --> 00:13:07,100
You could parsi html and do that there.

205
00:13:07,100 --> 00:13:08,460
In this way,

206
00:13:08,460 --> 00:13:14,110
these kind of a P I or integration or end to end test can be used to validate your HTML

207
00:13:14,110 --> 00:13:15,020
pages there,

208
00:13:15,020 --> 00:13:21,810
Jason responses and everything else that you're a P I or your user facing Web app is doing

209
00:13:21,810 --> 00:13:21,810
.

210
00:13:21,810 --> 00:13:23,780
Before we call this,

211
00:13:23,780 --> 00:13:24,090
though,

212
00:13:24,090 --> 00:13:30,690
we actually need to modify our test runner just a bit more because we're not including the

213
00:13:30,690 --> 00:13:31,520
A P I test.

214
00:13:31,520 --> 00:13:38,570
So we want to say that AP tests a p I equals require a P I and then,

215
00:13:38,570 --> 00:13:40,710
at the very end of the test,

216
00:13:40,710 --> 00:13:44,640
report after we console log that we're ending the test report.

217
00:13:44,640 --> 00:13:49,940
We want to kill the process by calling process exit zero.

218
00:13:49,940 --> 00:13:52,540
This is because within the A P I test,

219
00:13:52,540 --> 00:13:58,630
we have started up the application and there's no where else in the code that is explicitly

220
00:13:58,630 --> 00:13:59,320
stopping it.

221
00:13:59,320 --> 00:14:06,430
So this will explicitly stop the app from continuing on in any form after the test report

222
00:14:06,430 --> 00:14:06,920
runs.

223
00:14:06,920 --> 00:14:12,560
Let's go ahead and run these tests and see what happens.

224
00:14:12,560 --> 00:14:19,450
I'm calling node test and you can see that we have a number of issues here.

225
00:14:19,450 --> 00:14:27,910
We have the areas that we expected in get a number and the debugging problem in it.

226
00:14:27,910 --> 00:14:33,840
But we're also getting that there's an issue with the get request to paying which there

227
00:14:33,840 --> 00:14:34,440
shouldn't be.

228
00:14:34,440 --> 00:14:38,550
And it looks like that is a similar error that we've hit before.

229
00:14:38,550 --> 00:14:42,390
Http is not a supported type.

230
00:14:42,390 --> 00:14:43,650
We actually need to make it.

231
00:14:43,650 --> 00:14:45,050
Http Colon.

232
00:14:45,050 --> 00:14:46,900
So I'm gonna edit that here.

233
00:14:46,900 --> 00:14:51,950
We're gonna clear out these tests and run it again.

234
00:14:51,950 --> 00:14:53,940
Okay,

235
00:14:53,940 --> 00:14:54,330
Now,

236
00:14:54,330 --> 00:14:55,260
this is looking good.

237
00:14:55,260 --> 00:14:56,560
We're seeing a lot of green,

238
00:14:56,560 --> 00:15:03,390
and we're also still seeing the blues and pinks and yellows that we're locking out when

239
00:15:03,390 --> 00:15:04,690
we're booting up the application.

240
00:15:04,690 --> 00:15:08,680
That is because the application is being started up by the test runner.

241
00:15:08,680 --> 00:15:13,840
It runs through all these tests and is telling us that there are two failures and it's the

242
00:15:13,840 --> 00:15:16,660
same two failures that we experience before.

243
00:15:16,660 --> 00:15:17,510
Get a number,

244
00:15:17,510 --> 00:15:19,060
an example debugging problem.

245
00:15:19,060 --> 00:15:22,650
And so all of these seem to be running fine,

246
00:15:22,650 --> 00:15:26,010
and that's all we need to go over.

247
00:15:26,010 --> 00:15:31,980
A Sfar is adding tests and debugging and glinting to our application.

248
00:15:31,980 --> 00:15:34,140
If this was a production application,

249
00:15:34,140 --> 00:15:37,310
you obviously want to go through all of your files,

250
00:15:37,310 --> 00:15:43,280
all of your library's all your functionality and write tests all over the place for

251
00:15:43,280 --> 00:15:44,350
everything that you can.

252
00:15:44,350 --> 00:15:45,800
The more test that you write,

253
00:15:45,800 --> 00:15:51,100
the more solid your application is going to be and the more easily and quickly you'll be

254
00:15:51,100 --> 00:15:56,400
able to tell if and when you do accidentally break some functionality in the future because

255
00:15:56,400 --> 00:15:57,510
your test will start failing,

256
00:15:57,510 --> 00:16:01,080
so now we can move on to the section review

