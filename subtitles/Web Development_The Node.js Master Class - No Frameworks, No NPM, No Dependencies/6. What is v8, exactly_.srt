1
00:00:00,000 --> 00:00:00,370
No,

2
00:00:00,370 --> 00:00:00,910
J s,

3
00:00:00,910 --> 00:00:02,180
as you may have heard,

4
00:00:02,180 --> 00:00:06,190
is built on top of the chrome V eight JavaScript engine.

5
00:00:06,190 --> 00:00:10,330
So to properly understand what no Js is and what it does,

6
00:00:10,330 --> 00:00:13,470
we must first take some time to understand what V eight is,

7
00:00:13,470 --> 00:00:16,760
how it works and what JavaScript engines are in general.

8
00:00:16,760 --> 00:00:18,130
To do that,

9
00:00:18,130 --> 00:00:22,550
it's worth taking a step back and defining a few key concepts around this topic.

10
00:00:22,550 --> 00:00:22,950
First.

11
00:00:22,950 --> 00:00:23,890
First,

12
00:00:23,890 --> 00:00:29,080
it's worth understanding that modern day computers Onley understand machine code,

13
00:00:29,080 --> 00:00:33,510
and that machine code looks nothing like the programming languages you may write.

14
00:00:33,510 --> 00:00:38,700
Machine code looks more like a string of ones and zeros than it does a Java script or C

15
00:00:38,700 --> 00:00:41,250
plus plus or PHP your ruby.

16
00:00:41,250 --> 00:00:46,400
So most programmers never attempt to write raw machine code instructions.

17
00:00:46,400 --> 00:00:47,260
Instead,

18
00:00:47,260 --> 00:00:51,380
the right quote unquote high level programming languages.

19
00:00:51,380 --> 00:00:57,110
High level languages are those that abstract away the close to the metal operations that

20
00:00:57,110 --> 00:00:58,230
the CPU is doing,

21
00:00:58,230 --> 00:00:59,500
like loading,

22
00:00:59,500 --> 00:01:00,010
adding,

23
00:01:00,010 --> 00:01:05,630
comparing and storing numbers to and from RAM and let the programmer create variables,

24
00:01:05,630 --> 00:01:07,050
perform operations,

25
00:01:07,050 --> 00:01:08,700
execute functions and the like.

26
00:01:08,700 --> 00:01:13,080
The terms high level and low level are ambiguous and relative,

27
00:01:13,080 --> 00:01:16,210
though if you ask a visual basic programmer.

28
00:01:16,210 --> 00:01:20,150
Ruby might be low level if you ask a ruby programmer,

29
00:01:20,150 --> 00:01:25,430
C might be low level and to those who work closely to the metal in assembly in machine code

30
00:01:25,430 --> 00:01:25,430
.

31
00:01:25,430 --> 00:01:27,910
All of these are high level languages.

32
00:01:27,910 --> 00:01:28,900
In reality,

33
00:01:28,900 --> 00:01:30,510
languages lie on a spectrum,

34
00:01:30,510 --> 00:01:34,220
and there's no clear point where low level ends in high level begins.

35
00:01:34,220 --> 00:01:39,820
But one thing is for certain JavaScript C plus plus ruby and all the other popular

36
00:01:39,820 --> 00:01:43,410
languages are completely foreign to the computer itself.

37
00:01:43,410 --> 00:01:44,840
It doesn't understand them.

38
00:01:44,840 --> 00:01:46,550
So broadly speaking,

39
00:01:46,550 --> 00:01:51,230
one or more things need to happen before a computer can execute.

40
00:01:51,230 --> 00:01:53,120
Run ah program.

41
00:01:53,120 --> 00:01:55,450
Written in a modern programming languages,

42
00:01:55,450 --> 00:01:59,650
this is the work of three main groups of software.

43
00:01:59,650 --> 00:02:01,040
Compilers,

44
00:02:01,040 --> 00:02:03,890
transpire Eilers and interpreters.

45
00:02:03,890 --> 00:02:05,310
There are also others,

46
00:02:05,310 --> 00:02:06,380
such as assemblers,

47
00:02:06,380 --> 00:02:10,180
but those air outside the scope of this course compilers.

48
00:02:10,180 --> 00:02:16,110
They take source code that is code written in a programming languages and turn it into

49
00:02:16,110 --> 00:02:20,810
machine code or assembly or by code or object code or something else.

50
00:02:20,810 --> 00:02:24,330
Low level so that the computer can run the program easily,

51
00:02:24,330 --> 00:02:27,170
or only has to take a few short steps to run it.

52
00:02:27,170 --> 00:02:29,100
Compilers create,

53
00:02:29,100 --> 00:02:30,280
execute a bles.

54
00:02:30,280 --> 00:02:32,760
These are programs that are ready to be run,

55
00:02:32,760 --> 00:02:34,250
transpire,

56
00:02:34,250 --> 00:02:34,710
alors,

57
00:02:34,710 --> 00:02:39,660
take source code and generate more source code of another type.

58
00:02:39,660 --> 00:02:45,780
Common examples of trance filing include turning coffee script into JavaScript or turning

59
00:02:45,780 --> 00:02:49,880
Less or SAS into CSS interpreters.

60
00:02:49,880 --> 00:02:54,430
They take source code and directly executed themselves.

61
00:02:54,430 --> 00:02:58,200
They do this by performing real time intermediate steps,

62
00:02:58,200 --> 00:03:04,080
such as compiling pieces of the code as it goes and optimizing aspects of it for

63
00:03:04,080 --> 00:03:04,860
performance.

64
00:03:04,860 --> 00:03:08,080
So you can think of interpreting as compiling,

65
00:03:08,080 --> 00:03:09,390
plus executing.

66
00:03:09,390 --> 00:03:10,450
Except interpreters.

67
00:03:10,450 --> 00:03:12,780
Don't leave behind any artifacts.

68
00:03:12,780 --> 00:03:15,580
Any executed will programs like the compilers dio.

69
00:03:15,580 --> 00:03:17,790
So what is V eight?

70
00:03:17,790 --> 00:03:18,550
Well,

71
00:03:18,550 --> 00:03:24,200
via is what we call a JavaScript engine and JavaScript engines are interpreters for

72
00:03:24,200 --> 00:03:24,970
JavaScript.

73
00:03:24,970 --> 00:03:30,850
V eight compiles JavaScript down to native machine code and executes it.

74
00:03:30,850 --> 00:03:35,920
It also optimizes the code at runtime to make it faster.

75
00:03:35,920 --> 00:03:38,060
V eight is a standalone application,

76
00:03:38,060 --> 00:03:40,800
but people rarely interact with it directly.

77
00:03:40,800 --> 00:03:41,740
However,

78
00:03:41,740 --> 00:03:43,830
if you've used the chrome Web browser,

79
00:03:43,830 --> 00:03:45,600
you've already used V eight.

80
00:03:45,600 --> 00:03:49,750
If you've opened up the console and debug JavaScript on the client side,

81
00:03:49,750 --> 00:03:52,860
the rebel you're interacting with is V eight.

82
00:03:52,860 --> 00:03:58,170
There are a couple other job Skip engines you're probably familiar with if you've ever

83
00:03:58,170 --> 00:04:04,360
built an app in react native or if you've ever used the Safari Web browser you've been

84
00:04:04,360 --> 00:04:05,400
interacting with.

85
00:04:05,400 --> 00:04:11,420
A JavaScript engine called JavaScript Core V eight was written by the folks at Google in

86
00:04:11,420 --> 00:04:12,560
order to power Chrome,

87
00:04:12,560 --> 00:04:17,750
while Java script core is written by the folks at Apple largely to Power Safari.

88
00:04:17,750 --> 00:04:21,140
There's another popular engine called Spider Monkey,

89
00:04:21,140 --> 00:04:25,550
which is developed by Mozilla and is used inside of the Firefox Web browser.

90
00:04:25,550 --> 00:04:32,240
Spider Monkey and V eight have alternately both been used inside of Mongo DB so that Mongo

91
00:04:32,240 --> 00:04:34,800
can understand that Jason commands you send to it.

92
00:04:34,800 --> 00:04:37,100
Interestingly enough,

93
00:04:37,100 --> 00:04:41,110
Spider Monkey was actually the first ever JavaScript engine,

94
00:04:41,110 --> 00:04:43,440
and it was written by Brendan Eich,

95
00:04:43,440 --> 00:04:45,550
the same guy who invented Java script.

96
00:04:45,550 --> 00:04:47,100
He was working at Netscape,

97
00:04:47,100 --> 00:04:53,900
and he wrote Spider Monkey in 1996 to be used inside off the Netscape Navigator Web browser

98
00:04:53,900 --> 00:04:53,900
.

99
00:04:53,900 --> 00:04:56,950
In 1998 Netscape created Mozilla,

100
00:04:56,950 --> 00:04:58,760
the current parent of Firefox.

101
00:04:58,760 --> 00:05:02,160
There's also a JavaScript engine called Chakra,

102
00:05:02,160 --> 00:05:06,570
and if you've ever using Microsoft's Internet Explorer or Edge Web browsers,

103
00:05:06,570 --> 00:05:08,380
you've used chocolate before.

104
00:05:08,380 --> 00:05:11,730
Modern Web browsers perform a lot of tasks,

105
00:05:11,730 --> 00:05:15,460
but many of them include parsing and executing JavaScript.

106
00:05:15,460 --> 00:05:16,490
So in a way,

107
00:05:16,490 --> 00:05:22,030
you can think of a Web browser as an application that looks at JavaScript files and sends

108
00:05:22,030 --> 00:05:26,970
them to an embedded JavaScript engine like V eight so that the job script can be executed.

109
00:05:26,970 --> 00:05:28,480
So in this way,

110
00:05:28,480 --> 00:05:33,050
browsers are built on top of a job script engine.

111
00:05:33,050 --> 00:05:35,550
Now that you've got that concept down,

112
00:05:35,550 --> 00:05:36,210
weaken,

113
00:05:36,210 --> 00:05:42,180
turn to look at know J s a different type of application that is also built on top of a

114
00:05:42,180 --> 00:05:45,400
JavaScript engine and functions much the same way.

115
00:05:45,400 --> 00:05:52,030
No Js looks at JavaScript files and then sends those files to an embedded JavaScript engine

116
00:05:52,030 --> 00:05:55,510
V eight so that the JavaScript can be executed.

