WEBVTT
ï»¿1
00:00:00.000 --> 00:00:04.460
in this section,

2
00:00:04.460 --> 00:00:09.470
we went over how to optimize your application for performance in No Js.

3
00:00:09.470 --> 00:00:12.620
We used a few modules that we had not encountered before.

4
00:00:12.620 --> 00:00:14.790
The 1st 1 was DNS.

5
00:00:14.790 --> 00:00:22.050
DNS was the module that we used in order to try to make an attempt to resolve the host

6
00:00:22.050 --> 00:00:28.540
names that the users were giving us prior to adding those checks to all the other checks

7
00:00:28.540 --> 00:00:28.780
that are,

8
00:00:28.780 --> 00:00:31.330
workers have to perform in the background.

9
00:00:31.330 --> 00:00:38.210
Making these kind of adjustments to your application upstream of where any issue exists can

10
00:00:38.210 --> 00:00:39.670
really help save your system.

11
00:00:39.670 --> 00:00:41.400
Resource is later on.

12
00:00:41.400 --> 00:00:45.940
Another module that we used was performance hooks.

13
00:00:45.940 --> 00:00:50.280
This is the module most clearly dedicated to performance within node.

14
00:00:50.280 --> 00:00:55.130
It globally is called the performance timing A P I or performance hooks.

15
00:00:55.130 --> 00:00:56.400
It is still,

16
00:00:56.400 --> 00:00:59.580
as you see in experimental mode,

17
00:00:59.580 --> 00:01:02.200
it really is not a stable module.

18
00:01:02.200 --> 00:01:06.940
But since it's something you're only using to diagnose issues,

19
00:01:06.940 --> 00:01:08.320
in my opinion,

20
00:01:08.320 --> 00:01:14.080
it's fine to use because it's not something that you would necessarily deployed to

21
00:01:14.080 --> 00:01:14.770
production.

22
00:01:14.770 --> 00:01:18.180
There wouldn't necessarily be any reason to deploy to production,

23
00:01:18.180 --> 00:01:21.770
especially if you can recreate any performance issues locally.

24
00:01:21.770 --> 00:01:28.590
If you are going to deploy your performance timing to production so that you can get some

25
00:01:28.590 --> 00:01:30.280
readouts from your production server.

26
00:01:30.280 --> 00:01:35.950
Just keep in mind that it's not the most stable AP I yet in future versions of note it will

27
00:01:35.950 --> 00:01:36.260
be.

28
00:01:36.260 --> 00:01:37.210
But for now,

29
00:01:37.210 --> 00:01:40.700
they are still open to the idea of making changes to it,

30
00:01:40.700 --> 00:01:43.200
and it really hasn't become a heart and a p I.

31
00:01:43.200 --> 00:01:45.240
Yet that being said,

32
00:01:45.240 --> 00:01:51.040
it gives us extremely powerful tools for measuring code execution without having to Jerry

33
00:01:51.040 --> 00:01:52.440
rig anything ourselves.

34
00:01:52.440 --> 00:02:00.240
The next section that we used was the cluster module cluster allowed us to spawn our server

35
00:02:00.240 --> 00:02:04.850
so that it could use a bunch of different cores at the same time.

36
00:02:04.850 --> 00:02:06.000
In our example,

37
00:02:06.000 --> 00:02:08.010
we're running on a four course system,

38
00:02:08.010 --> 00:02:16.030
and so we were able to start up four different servers that were all sharing a certain port

39
00:02:16.030 --> 00:02:16.030
,

40
00:02:16.030 --> 00:02:20.870
and we're all listening for requests and balancing the load between them.

41
00:02:20.870 --> 00:02:23.440
Cluster is a stable module.

42
00:02:23.440 --> 00:02:26.280
It is something that you can used in production,

43
00:02:26.280 --> 00:02:29.090
but it is extremely complicated,

44
00:02:29.090 --> 00:02:31.840
and so just make sure that if you're going to use cluster,

45
00:02:31.840 --> 00:02:37.060
you have a good reason to do it and just be aware that when you move a note application

46
00:02:37.060 --> 00:02:42.150
from taking up one of the course of a machine to taking up all of the course,

47
00:02:42.150 --> 00:02:44.590
the results on that machine may vary.

48
00:02:44.590 --> 00:02:47.730
It is much more likely that you'll end up consuming.

49
00:02:47.730 --> 00:02:51.090
The resource is that other tasks on that machine may need.

50
00:02:51.090 --> 00:02:52.580
Lastly,

51
00:02:52.580 --> 00:02:59.470
we used child processes in order to drop down to the command line and issue that LS that

52
00:02:59.470 --> 00:03:00.870
let us read from a directory.

53
00:03:00.870 --> 00:03:04.430
Child processes are extremely powerful,

54
00:03:04.430 --> 00:03:11.000
as it's a way that allows you to branch out from node to any other application or any other

55
00:03:11.000 --> 00:03:16.700
process that might be more performance in a certain area or might be custom built to handle

56
00:03:16.700 --> 00:03:19.250
a process that note can't handle.

57
00:03:19.250 --> 00:03:24.690
Using child processes is a pretty common thing to do in node,

58
00:03:24.690 --> 00:03:27.630
and it is a stable module,

59
00:03:27.630 --> 00:03:32.870
so you should feel free to branch out any processes that you need to connect to.

60
00:03:32.870 --> 00:03:37.960
So at this point in the course you have created an A P I.

61
00:03:37.960 --> 00:03:39.770
You've created a front end for that,

62
00:03:39.770 --> 00:03:40.440
a p I.

63
00:03:40.440 --> 00:03:42.220
You've created a command line tool.

64
00:03:42.220 --> 00:03:46.530
You've added tests and learned how to do debugging.

65
00:03:46.530 --> 00:03:48.270
Then you've done performance,

66
00:03:48.270 --> 00:03:53.250
optimization and performance timing on that application.

67
00:03:53.250 --> 00:03:54.690
So at this point,

68
00:03:54.690 --> 00:03:59.980
the majority of the lectures are finished in the final section of this course coming up

69
00:03:59.980 --> 00:04:00.500
next.

70
00:04:00.500 --> 00:04:05.940
The only things that we're going to talk about are the various modules from these docks

71
00:04:05.940 --> 00:04:08.080
that we just didn't happen to hit.

72
00:04:08.080 --> 00:04:10.200
Over the course of this lecture series,

73
00:04:10.200 --> 00:04:15.920
I want to make sure that this course was complete and hit all of the sections in the No Js

74
00:04:15.920 --> 00:04:16.520
docks.

75
00:04:16.520 --> 00:04:22.370
And so in the next section we are going to do some examples with some of the modules that

76
00:04:22.370 --> 00:04:28.150
we haven't talked about yet and at least given overview of some of the modules that that we

77
00:04:28.150 --> 00:04:29.550
won't be dealing with at all.

78
00:04:29.550 --> 00:04:30.490
For example,

79
00:04:30.490 --> 00:04:33.130
the deprecate ID AP I section etcetera.

80
00:04:33.130 --> 00:04:35.080
Without further ado,

81
00:04:35.080 --> 00:04:37.190
let's move on to the final section of this course.

