1
00:00:00,000 --> 00:00:06,270
one of the things that node is very useful for,

2
00:00:06,270 --> 00:00:11,010
but it's not commonly used for is building low level and networking applications.

3
00:00:11,010 --> 00:00:17,040
And that is because it exposes the TCP stack to you So you do not need to build HDP

4
00:00:17,040 --> 00:00:18,700
applications if you don't want to,

5
00:00:18,700 --> 00:00:26,060
you can drop down to the level of TCP and buying two sockets and write messages back and

6
00:00:26,060 --> 00:00:27,690
forth all you want.

7
00:00:27,690 --> 00:00:29,230
In this example,

8
00:00:29,230 --> 00:00:32,370
we're going to create a simple TCP server,

9
00:00:32,370 --> 00:00:33,870
any TCP client,

10
00:00:33,870 --> 00:00:38,290
so that you can see how you would go about building that kind of low level networking

11
00:00:38,290 --> 00:00:40,560
application in the miscellaneous Ford.

12
00:00:40,560 --> 00:00:42,270
I'm gonna create two files again.

13
00:00:42,270 --> 00:00:54,880
Touch Miscellaneous Net dash server dot Js and touch Miscellaneous net dash client dot Js

14
00:00:54,880 --> 00:01:04,040
I've been open up server and note at the top that this is a example TCP make a net,

15
00:01:04,040 --> 00:01:09,480
which is the package that node calls the TCP ap eyes server.

16
00:01:09,480 --> 00:01:22,480
I'm also gonna know that this listens to port 6000 and sends the word poem to clients.

17
00:01:22,480 --> 00:01:26,370
You can guess what the clients are going to send to the server.

18
00:01:26,370 --> 00:01:30,510
They're going to send the word pain now,

19
00:01:30,510 --> 00:01:31,700
as far as dependencies.

20
00:01:31,700 --> 00:01:33,560
We only need the one we need.

21
00:01:33,560 --> 00:01:38,600
Barnett equals require net again.

22
00:01:38,600 --> 00:01:41,480
When you see net in no Js parlance,

23
00:01:41,480 --> 00:01:51,690
you can just think of TCP Now we want to create server we're gonna call of our server

24
00:01:51,690 --> 00:01:55,140
equals net that create server.

25
00:01:55,140 --> 00:01:57,750
The syntax should start to seem familiar to you now,

26
00:01:57,750 --> 00:02:02,870
as the different ways of creating servers all seem to have familiar traits.

27
00:02:02,870 --> 00:02:08,800
And then we're gonna expect back a connection object in the callback.

28
00:02:08,800 --> 00:02:10,870
Now that we have the connection,

29
00:02:10,870 --> 00:02:14,560
we can send the word Paul.

30
00:02:14,560 --> 00:02:22,360
So we want to say that the outbound message the one leaving the server is just a string

31
00:02:22,360 --> 00:02:23,150
called Paul.

32
00:02:23,150 --> 00:02:26,610
And on this connection,

33
00:02:26,610 --> 00:02:29,450
we want to write the outbound message.

34
00:02:29,450 --> 00:02:34,950
But now when the client write something,

35
00:02:34,950 --> 00:02:37,050
we want to log it out.

36
00:02:37,050 --> 00:02:44,270
So connection on data.

37
00:02:44,270 --> 00:02:46,850
So we didn't receive something from a client.

38
00:02:46,850 --> 00:02:53,450
We want to get past the inbound message.

39
00:02:53,450 --> 00:02:56,600
Now that we have it,

40
00:02:56,600 --> 00:02:59,230
we want to get it as a string.

41
00:02:59,230 --> 00:03:05,350
So message string is going to equal inbound message to string.

42
00:03:05,350 --> 00:03:11,050
And then we want to log it out so console log is going to equal.

43
00:03:11,050 --> 00:03:23,050
I wrote How about message and they said message straight.

44
00:03:23,050 --> 00:03:30,310
So it is going to say that the outbound message that it wrote and then it's going to tell

45
00:03:30,310 --> 00:03:32,500
the inbound message that it received.

46
00:03:32,500 --> 00:03:34,590
Finally,

47
00:03:34,590 --> 00:03:35,940
we have to do what we always do.

48
00:03:35,940 --> 00:03:37,950
We just tell the server to listen a port.

49
00:03:37,950 --> 00:03:39,880
So server Listen,

50
00:03:39,880 --> 00:03:41,450
6000

51
00:03:41,450 --> 00:03:44,480
Now let's go over to the client.

52
00:03:44,480 --> 00:03:45,440
That's,

53
00:03:45,440 --> 00:03:45,910
um,

54
00:03:45,910 --> 00:03:47,470
comments at the top here.

55
00:03:47,470 --> 00:03:59,850
We're going to say that this is an example TCP client make a net and that it connects to

56
00:03:59,850 --> 00:04:07,650
port 6000 and sends the word ping to the servers.

57
00:04:07,650 --> 00:04:12,100
It,

58
00:04:12,100 --> 00:04:12,350
too,

59
00:04:12,350 --> 00:04:15,750
is just gonna have the one dependency for net equals require net.

60
00:04:15,750 --> 00:04:23,140
Now we want to define the message that they should send.

61
00:04:23,140 --> 00:04:28,540
So the outbound message again this time is going to be pig.

62
00:04:28,540 --> 00:04:29,470
That's it.

63
00:04:29,470 --> 00:04:29,950
A pop.

64
00:04:29,950 --> 00:04:36,570
Now we want to create the client by saying that bar client equals net.

65
00:04:36,570 --> 00:04:38,480
Create connection.

66
00:04:38,480 --> 00:04:45,050
This is creating connection to a server on Port 6000.

67
00:04:45,050 --> 00:04:49,250
We're going expect back a call back,

68
00:04:49,250 --> 00:04:51,500
and when it does call back,

69
00:04:51,500 --> 00:04:56,320
we want to send the message because that means this connection is open and it's ready for

70
00:04:56,320 --> 00:05:00,800
us to write stuff so kind right outbound message.

71
00:05:00,800 --> 00:05:02,850
Now,

72
00:05:02,850 --> 00:05:09,370
what we've done so far is opened up the connection to this server and wrote a message.

73
00:05:09,370 --> 00:05:16,790
What we can expect is that the server is configured to write back a message as soon as it

74
00:05:16,790 --> 00:05:18,450
receives a message from the client.

75
00:05:18,450 --> 00:05:24,240
So now we need to configure the client to parse out this message from the server when it

76
00:05:24,240 --> 00:05:27,190
receives it in response to what it said to the server.

77
00:05:27,190 --> 00:05:31,550
So we want to say when the server writes back,

78
00:05:31,550 --> 00:05:46,750
look what it says then kill the client so claimed on data we're gonna expect and inbound

79
00:05:46,750 --> 00:05:47,650
message.

80
00:05:47,650 --> 00:05:51,450
And we're going to do just like we did before.

81
00:05:51,450 --> 00:05:57,790
Message string equals inbound message to string.

82
00:05:57,790 --> 00:06:05,770
Now we can take the console log that we did here and really just paste it in.

83
00:06:05,770 --> 00:06:07,430
It's the same log,

84
00:06:07,430 --> 00:06:09,880
except it should say different things.

85
00:06:09,880 --> 00:06:14,030
It's going to say I wrote the outbound message and they said the message string.

86
00:06:14,030 --> 00:06:15,850
But what the client is logging,

87
00:06:15,850 --> 00:06:16,590
and with the servers,

88
00:06:16,590 --> 00:06:19,050
logging should be two different messages.

89
00:06:19,050 --> 00:06:20,050
Lastly,

90
00:06:20,050 --> 00:06:21,240
we need to kill the client.

91
00:06:21,240 --> 00:06:29,000
So we're gonna call client and I'm gonna open up two different tabs and this one.

92
00:06:29,000 --> 00:06:30,030
I'm gonna start up to server,

93
00:06:30,030 --> 00:06:35,750
so I'm gonna call node Miscellaneous net server dot Js.

94
00:06:35,750 --> 00:06:37,800
Now that that's running,

95
00:06:37,800 --> 00:06:45,870
going to go to the other tab and call node miscellaneous net client dot Js and this is

96
00:06:45,870 --> 00:06:48,850
going to create the connection and set it off.

97
00:06:48,850 --> 00:06:53,580
Now we see that the client has logged something out.

98
00:06:53,580 --> 00:06:56,150
The client has said I wrote Ping,

99
00:06:56,150 --> 00:06:59,050
we could see they did and they said Palm,

100
00:06:59,050 --> 00:07:01,850
Now let's go to the server.

101
00:07:01,850 --> 00:07:07,640
The server says I wrote Pong and they said,

102
00:07:07,640 --> 00:07:08,220
Ping,

103
00:07:08,220 --> 00:07:10,450
that is exactly what we were hoping it would do.

104
00:07:10,450 --> 00:07:14,540
So this is how you set up a raw TCP client and server,

105
00:07:14,540 --> 00:07:15,450
and at this point,

106
00:07:15,450 --> 00:07:16,850
we can move on to the next lecture.

