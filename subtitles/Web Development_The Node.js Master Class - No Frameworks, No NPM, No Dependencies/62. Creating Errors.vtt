WEBVTT
ï»¿1
00:00:00.000 --> 00:00:04.220
in this lecture,

2
00:00:04.220 --> 00:00:07.800
we're going to go over no Js errors and air types.

3
00:00:07.800 --> 00:00:14.830
And then we're going to create a sample error within our application and then reinforce our

4
00:00:14.830 --> 00:00:20.140
application with a try catch that will allow us to handle that error in a graceful way.

5
00:00:20.140 --> 00:00:21.530
Before we jump into that,

6
00:00:21.530 --> 00:00:24.550
Let's go over how node thinks about errors.

7
00:00:24.550 --> 00:00:26.130
Broadly speaking,

8
00:00:26.130 --> 00:00:31.170
no Js errors work very similarly to any kind of JavaScript error.

9
00:00:31.170 --> 00:00:33.950
There a class that have different types,

10
00:00:33.950 --> 00:00:35.770
like evil air syntax,

11
00:00:35.770 --> 00:00:36.150
error,

12
00:00:36.150 --> 00:00:36.780
etcetera.

13
00:00:36.780 --> 00:00:38.140
As you've been seeing,

14
00:00:38.140 --> 00:00:40.090
we debug this application.

15
00:00:40.090 --> 00:00:41.150
In these lectures,

16
00:00:41.150 --> 00:00:42.930
you've seen different kinds of errors.

17
00:00:42.930 --> 00:00:43.740
Get thrown.

18
00:00:43.740 --> 00:00:48.170
Many of the ones that you've seen have been system errors,

19
00:00:48.170 --> 00:00:51.670
which happened when we're trying to open a file that doesn't exist,

20
00:00:51.670 --> 00:00:52.250
etcetera.

21
00:00:52.250 --> 00:00:56.450
And today we're going to be dealing with users specified errors.

22
00:00:56.450 --> 00:01:02.560
Those are ones that we define as part of the application and throw ourselves.

23
00:01:02.560 --> 00:01:07.100
Let's go ahead and open up our server and down at the bottom.

24
00:01:07.100 --> 00:01:13.760
We're going to define a new route that calls a handler that is designed to throw an error

25
00:01:13.760 --> 00:01:15.420
and crash the application.

26
00:01:15.420 --> 00:01:17.200
So I'm gonna add a route.

27
00:01:17.200 --> 00:01:24.140
Two examples slash air and that's going to route to handlers dot example error.

28
00:01:24.140 --> 00:01:31.080
I'm gonna open up our handlers file and start crafting this.

29
00:01:31.080 --> 00:01:40.350
I'm going to do it down at the same level as the Jason AP I handlers is going to call it

30
00:01:40.350 --> 00:01:44.570
example air handlers dot example error,

31
00:01:44.570 --> 00:01:51.010
and it's going to be a function like any other now the reason we're building this handler

32
00:01:51.010 --> 00:01:57.570
to throw an error is to go over the real life scenario where you built the scaffolding of

33
00:01:57.570 --> 00:02:01.190
your application and the scaffolding is pretty rock solid.

34
00:02:01.190 --> 00:02:04.970
But over time you add more and more handlers,

35
00:02:04.970 --> 00:02:09.250
and it's only a matter of time before one of your handlers has an issue.

36
00:02:09.250 --> 00:02:11.310
So within this example,

37
00:02:11.310 --> 00:02:11.680
Eric,

38
00:02:11.680 --> 00:02:13.450
we're just going to create a new air.

39
00:02:13.450 --> 00:02:18.040
We're going to save our air equals new air,

40
00:02:18.040 --> 00:02:21.500
and the air class is available globally.

41
00:02:21.500 --> 00:02:22.840
You don't need to require it,

42
00:02:22.840 --> 00:02:24.380
but when you create a new air,

43
00:02:24.380 --> 00:02:29.030
you get to define what's going to be thrown when that error is thrown.

44
00:02:29.030 --> 00:02:31.010
So we're basically giving it a name,

45
00:02:31.010 --> 00:02:34.190
and I'm gonna say this is an example,

46
00:02:34.190 --> 00:02:36.170
Hair.

47
00:02:36.170 --> 00:02:38.330
Now the air exists.

48
00:02:38.330 --> 00:02:39.160
We want to throw it,

49
00:02:39.160 --> 00:02:41.270
so gonna throw air.

50
00:02:41.270 --> 00:02:52.570
I'll start up the application now never go over the postman and call this route example.

51
00:02:52.570 --> 00:02:54.550
Slash air and see what happens.

52
00:02:54.550 --> 00:02:56.400
All right,

53
00:02:56.400 --> 00:03:04.450
so enter local host 3000 slash examples slash air Send off their request.

54
00:03:04.450 --> 00:03:09.650
You can say we didn't get any response likely because the system crashed while trying to

55
00:03:09.650 --> 00:03:10.510
produce a response.

56
00:03:10.510 --> 00:03:11.700
So if we go back here,

57
00:03:11.700 --> 00:03:12.520
yes,

58
00:03:12.520 --> 00:03:18.420
we can see that at hammers dot Js at line 3 85 which is right here.

59
00:03:18.420 --> 00:03:20.890
We received this air air.

60
00:03:20.890 --> 00:03:22.660
This is an example Air.

61
00:03:22.660 --> 00:03:26.350
So that is how you throw errors and get it to show up at a certain line.

62
00:03:26.350 --> 00:03:33.920
But let's say that we built this handler and we can't really diagnosis what is going on.

63
00:03:33.920 --> 00:03:37.590
Either we don't have time to diagnose was going on or what's going on.

64
00:03:37.590 --> 00:03:41.160
The air that's being thrown is deep within some library,

65
00:03:41.160 --> 00:03:43.500
and we've opened a support ticket for the library.

66
00:03:43.500 --> 00:03:45.480
But who knows when they'll get back to us etcetera.

67
00:03:45.480 --> 00:03:51.580
And so we need to reinforce our server infrastructure so that this handler can throw this

68
00:03:51.580 --> 00:03:54.830
air as they're doing without taking down the whole application.

69
00:03:54.830 --> 00:03:55.110
Because,

70
00:03:55.110 --> 00:03:57.210
as you see the application is dead now,

71
00:03:57.210 --> 00:03:59.350
it's not going to accept any more requests.

72
00:03:59.350 --> 00:04:00.610
The thread doesn't exist.

73
00:04:00.610 --> 00:04:09.210
So let's go back to server dot Js And look at ways that we can reinforce where Recall this

74
00:04:09.210 --> 00:04:14.460
handler so that we call it in such a way that it can't do anything to take down the

75
00:04:14.460 --> 00:04:15.020
application.

76
00:04:15.020 --> 00:04:18.340
Let's go back over this unified server for a moment.

77
00:04:18.340 --> 00:04:19.200
If you remember,

78
00:04:19.200 --> 00:04:21.470
this is a function we built early on.

79
00:04:21.470 --> 00:04:25.650
It gets all the properties of the request like your l the path,

80
00:04:25.650 --> 00:04:26.260
the query,

81
00:04:26.260 --> 00:04:26.500
string,

82
00:04:26.500 --> 00:04:26.940
object,

83
00:04:26.940 --> 00:04:27.650
etcetera.

84
00:04:27.650 --> 00:04:30.620
Once the request is all gathered up,

85
00:04:30.620 --> 00:04:35.160
it chooses a handler and then routes the request to that handler.

86
00:04:35.160 --> 00:04:42.830
So this actually looks like a good point to jump in and try to intercept any thrown errors

87
00:04:42.830 --> 00:04:44.550
before they crash or threat.

88
00:04:44.550 --> 00:04:51.010
So the first thing we want to do is move all the logic inside of the chosen hand.

89
00:04:51.010 --> 00:04:53.520
They're called back to its own function.

90
00:04:53.520 --> 00:04:57.180
So I'm going to copy everything inside of these brackets.

91
00:04:57.180 --> 00:05:03.320
I'm gonna cut it out,

92
00:05:03.320 --> 00:05:13.690
and then I'm going to find a new function here that is to process the response from the

93
00:05:13.690 --> 00:05:14.170
handler.

94
00:05:14.170 --> 00:05:19.590
We're gonna call it a server dot process handler response.

95
00:05:19.590 --> 00:05:27.350
And it's going to be a function that takes in the response a method trimmed path,

96
00:05:27.350 --> 00:05:31.550
a status code and a content type.

97
00:05:31.550 --> 00:05:35.080
Then inside of here,

98
00:05:35.080 --> 00:05:36.990
I'm going to paste everything I just got,

99
00:05:36.990 --> 00:05:40.490
which means inside of the chosen handler Colback.

100
00:05:40.490 --> 00:05:41.990
What we need to do now is,

101
00:05:41.990 --> 00:05:44.250
rather than running through that logic ourselves,

102
00:05:44.250 --> 00:05:51.650
we just need to call server that process handler response and invoke it with rez,

103
00:05:51.650 --> 00:05:53.150
method,

104
00:05:53.150 --> 00:05:54.650
trimmed path,

105
00:05:54.650 --> 00:05:59.350
status code payload and content type.

106
00:05:59.350 --> 00:06:03.410
Looks like I actually forgot to include payload down here.

107
00:06:03.410 --> 00:06:06.120
Okay.

108
00:06:06.120 --> 00:06:12.200
What is the difference between invoking all this logic directly or invoking it inside of

109
00:06:12.200 --> 00:06:12.880
dysfunction?

110
00:06:12.880 --> 00:06:14.270
So far,

111
00:06:14.270 --> 00:06:14.670
nothing.

112
00:06:14.670 --> 00:06:19.100
These two ways of handling these issues have the exact same effect.

113
00:06:19.100 --> 00:06:22.590
Except that now that this is slim down,

114
00:06:22.590 --> 00:06:25.920
it's easy to wrap it in a try catch.

115
00:06:25.920 --> 00:06:27.280
So we're gonna wrap it in,

116
00:06:27.280 --> 00:06:27.850
try,

117
00:06:27.850 --> 00:06:34.690
and then we're going to catch any exception that is thrown while that handler is being

118
00:06:34.690 --> 00:06:35.250
called.

119
00:06:35.250 --> 00:06:37.370
And when we do catch an error,

120
00:06:37.370 --> 00:06:38.220
for example,

121
00:06:38.220 --> 00:06:40.770
if this handler through this error,

122
00:06:40.770 --> 00:06:44.750
we can log it out by calling debug e.

123
00:06:44.750 --> 00:06:45.410
And remember,

124
00:06:45.410 --> 00:06:49.970
we've defined debug above so that will log it to the console.

125
00:06:49.970 --> 00:06:55.840
And then we can continue on calling server process handler response.

126
00:06:55.840 --> 00:07:01.350
But this time we'll call it with raise method trimmed path.

127
00:07:01.350 --> 00:07:02.460
And then,

128
00:07:02.460 --> 00:07:05.440
rather than the status code that came back from Hammer,

129
00:07:05.440 --> 00:07:08.110
we can call it with a 500 toe.

130
00:07:08.110 --> 00:07:13.250
Let the requester know something really bad just happened and it crashed our server.

131
00:07:13.250 --> 00:07:17.370
Or at least it would have crashed our server if we hadn't have caught the response.

132
00:07:17.370 --> 00:07:19.500
So we're gonna call it a 500.

133
00:07:19.500 --> 00:07:24.640
And rather than returning any payload from that handler since that hand a crash,

134
00:07:24.640 --> 00:07:25.910
we have to create her own payload.

135
00:07:25.910 --> 00:07:35.390
So we're gonna created Jason object called Air and Unknown Air has occurred.

136
00:07:35.390 --> 00:07:41.460
And then we want to make sure that they know that the content type for this response about

137
00:07:41.460 --> 00:07:46.880
what you were trying to request the content type for this response is going to be Jason.

138
00:07:46.880 --> 00:07:51.170
So let's start the at back up and then go to Postman and make that request again.

139
00:07:51.170 --> 00:07:54.450
Now we send the get to the same route,

140
00:07:54.450 --> 00:07:56.630
but it returns back.

141
00:07:56.630 --> 00:07:59.650
It returns back with 500 internal silver air,

142
00:07:59.650 --> 00:08:00.550
a census,

143
00:08:00.550 --> 00:08:02.550
this message saying an air has occurred.

144
00:08:02.550 --> 00:08:05.090
But the APP is still alive.

145
00:08:05.090 --> 00:08:06.440
Nothing has crashed.

146
00:08:06.440 --> 00:08:11.310
We don't even have anything in the console telling us that it crashed because we started

147
00:08:11.310 --> 00:08:13.140
the APP without that no debug flag.

148
00:08:13.140 --> 00:08:25.010
If we start the app with no debug flag node deep of equal server knowed index dot Js and

149
00:08:25.010 --> 00:08:26.250
then make the request again,

150
00:08:26.250 --> 00:08:32.260
we get the same response and we can see the log saying this is an example.

151
00:08:32.260 --> 00:08:39.850
Air has been thrown at handlers dot Js 3 84 which is close to right where we threw that air

152
00:08:39.850 --> 00:08:39.850
.

153
00:08:39.850 --> 00:08:42.170
But as in the last case,

154
00:08:42.170 --> 00:08:47.140
the application is still alive and you can take this request over and over again without

155
00:08:47.140 --> 00:08:48.010
actually dying.

156
00:08:48.010 --> 00:08:52.050
As we told the server to print out non 200 codes in a red,

157
00:08:52.050 --> 00:08:54.240
these five hundreds air coming back in red.

158
00:08:54.240 --> 00:08:59.500
So that is one way to bulletproof your handlers or at least a bulletproof the way you call

159
00:08:59.500 --> 00:08:59.880
them,

160
00:08:59.880 --> 00:09:05.910
so that there's nothing a developer could do really to crash the app from within a handler

161
00:09:05.910 --> 00:09:05.910
.

162
00:09:05.910 --> 00:09:06.350
Now,

163
00:09:06.350 --> 00:09:07.090
unfortunately,

164
00:09:07.090 --> 00:09:07.780
in the wild,

165
00:09:07.780 --> 00:09:12.670
many of the areas or issues that you encounter are going to be a lot more complex than a

166
00:09:12.670 --> 00:09:14.050
line in a file,

167
00:09:14.050 --> 00:09:15.500
simply throwing error.

168
00:09:15.500 --> 00:09:16.180
And so,

169
00:09:16.180 --> 00:09:16.920
in the next lecture,

170
00:09:16.920 --> 00:09:22.360
we're going to go over using the D bugger in detail so that you can understand how toe walk

171
00:09:22.360 --> 00:09:24.250
there with step through your applications in real time.

172
00:09:24.250 --> 00:09:26.070
So let's move on to the next lecture.

