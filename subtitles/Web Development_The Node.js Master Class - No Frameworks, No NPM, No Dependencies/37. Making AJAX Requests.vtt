WEBVTT
ï»¿1
00:00:00.000 --> 00:00:06.690
Now that we've set up this app dot Js file,

2
00:00:06.690 --> 00:00:13.800
I'm gonna modify it to include a HDP client that can interact with our Jason A.

3
00:00:13.800 --> 00:00:14.400
P I.

4
00:00:14.400 --> 00:00:15.220
Again,

5
00:00:15.220 --> 00:00:18.290
we're going to do this without any kind of other libraries.

6
00:00:18.290 --> 00:00:21.770
Without Jake weary or under school or anything like that.

7
00:00:21.770 --> 00:00:26.760
We're just going to craft the raw XML issued GP requests ourselves.

8
00:00:26.760 --> 00:00:32.940
So I'm gonna get rid of this console and then just add a note here that this is the

9
00:00:32.940 --> 00:00:36.850
container for the front end application.

10
00:00:36.850 --> 00:00:41.790
Now,

11
00:00:41.790 --> 00:00:44.450
before we move any further attacks curating the functions,

12
00:00:44.450 --> 00:00:48.040
I'm going to have a config object on the client side.

13
00:00:48.040 --> 00:00:53.290
It will be important to be able to administer some kind of configuration that holds

14
00:00:53.290 --> 00:00:59.300
environment specific variables or just state dependent variables such as the session token

15
00:00:59.300 --> 00:00:59.300
.

16
00:00:59.300 --> 00:01:03.600
All we know for sure that we need right now is this session tokens.

17
00:01:03.600 --> 00:01:06.060
So I'm gonna call the conflict variable Abdel Config,

18
00:01:06.060 --> 00:01:09.650
and it's just gonna have one key on it for now called session token,

19
00:01:09.650 --> 00:01:11.350
which defaults toe false.

20
00:01:11.350 --> 00:01:13.800
So client side,

21
00:01:13.800 --> 00:01:17.440
our logic is going to know if you have logged in.

22
00:01:17.440 --> 00:01:19.140
If you have got in a session token,

23
00:01:19.140 --> 00:01:20.550
it's going to live here.

24
00:01:20.550 --> 00:01:27.170
We're also later on going to persist it further to local storage as opposed to disk.

25
00:01:27.170 --> 00:01:29.180
We can't persist a disc on the client side,

26
00:01:29.180 --> 00:01:34.510
but we're going to persist it to local storage so that the session token can survive the

27
00:01:34.510 --> 00:01:35.830
browser being refreshed.

28
00:01:35.830 --> 00:01:40.750
Now we're actually going to write the Ajax client for the rest ful.

29
00:01:40.750 --> 00:01:42.340
A p I.

30
00:01:42.340 --> 00:01:44.260
The client is going toe,

31
00:01:44.260 --> 00:01:45.630
have a few functions,

32
00:01:45.630 --> 00:01:50.850
and so it's going to be a container itself at that client is just an empty object.

33
00:01:50.850 --> 00:01:55.230
Now we're actually going to write APP that client dot requests,

34
00:01:55.230 --> 00:02:03.350
which is going to be the interface for making a P I calls after a client dot request,

35
00:02:03.350 --> 00:02:10.230
is going to be a function that takes in everything that the user needs to specify.

36
00:02:10.230 --> 00:02:12.880
In order to make the A P.

37
00:02:12.880 --> 00:02:13.450
I call,

38
00:02:13.450 --> 00:02:15.640
they need to be able to specify the headers.

39
00:02:15.640 --> 00:02:19.380
They want to send the path they want to make the request to.

40
00:02:19.380 --> 00:02:21.270
We don't need domain or anything like that,

41
00:02:21.270 --> 00:02:25.140
because this is always happening on local host to the same application.

42
00:02:25.140 --> 00:02:27.080
They need to specify the method post,

43
00:02:27.080 --> 00:02:30.150
get put or delete the query string object.

44
00:02:30.150 --> 00:02:32.940
Rather than writing it in the path,

45
00:02:32.940 --> 00:02:37.860
they could just provide key value pairs of the query string parameters that should be sent

46
00:02:37.860 --> 00:02:37.860
,

47
00:02:37.860 --> 00:02:40.310
the payload that they want to send,

48
00:02:40.310 --> 00:02:40.900
if any,

49
00:02:40.900 --> 00:02:42.990
and then a call back.

50
00:02:42.990 --> 00:02:49.150
Now we have to do the tedious task of actually setting defaults for all of these things.

51
00:02:49.150 --> 00:02:52.100
So the headers should be an object,

52
00:02:52.100 --> 00:03:01.070
and it should not equal.

53
00:03:01.070 --> 00:03:01.550
No.

54
00:03:01.550 --> 00:03:03.770
If it passes,

55
00:03:03.770 --> 00:03:05.050
those tests will use it.

56
00:03:05.050 --> 00:03:06.880
Otherwise,

57
00:03:06.880 --> 00:03:08.650
we will defaulted to an empty object.

58
00:03:08.650 --> 00:03:13.750
Half should be a strength.

59
00:03:13.750 --> 00:03:17.160
If it is,

60
00:03:17.160 --> 00:03:18.250
we'll use it.

61
00:03:18.250 --> 00:03:22.350
Otherwise we will default it to slash to nothing at all.

62
00:03:22.350 --> 00:03:27.050
Method should also be a string,

63
00:03:27.050 --> 00:03:44.860
and it should be specified as capital post get put or delete client side.

64
00:03:44.860 --> 00:03:50.250
The XML http requests that we're going to create will require capital methods.

65
00:03:50.250 --> 00:04:15.050
The query string object needs to be an object and not equal to know.

66
00:04:15.050 --> 00:04:20.100
And so we're going to steal the validation that we just did on headers.

67
00:04:20.100 --> 00:04:32.810
That is the same requirements for payload.

68
00:04:32.810 --> 00:04:40.180
Copy that again so that haloed has the same validation.

69
00:04:40.180 --> 00:04:42.780
Lastly,

70
00:04:42.780 --> 00:04:43.550
Colback.

71
00:04:43.550 --> 00:04:58.460
It's the equal they function or would have wanted to force.

72
00:04:58.460 --> 00:05:02.870
We normally don't do this kind of sanity checking on the callback parameter.

73
00:05:02.870 --> 00:05:08.530
The reason we're doing it here is we want to allow users to make app that client that

74
00:05:08.530 --> 00:05:09.590
request calls,

75
00:05:09.590 --> 00:05:11.300
with or without a call back.

76
00:05:11.300 --> 00:05:15.780
And so we're just default him to fall so that we can check it later and say if there is a

77
00:05:15.780 --> 00:05:17.550
callback call back.

78
00:05:17.550 --> 00:05:19.800
But if there is not a call bath,

79
00:05:19.800 --> 00:05:23.950
don't bother trying to call back because there's no function there now since we're actually

80
00:05:23.950 --> 00:05:26.360
crafting this as a full u.

81
00:05:26.360 --> 00:05:26.910
R L.

82
00:05:26.910 --> 00:05:32.850
We want to add the query strict parameters to the path before we send it off.

83
00:05:32.850 --> 00:05:38.400
Even though we allowed the users to specify the queries during our object s keys and values

84
00:05:38.400 --> 00:05:39.360
when we send it,

85
00:05:39.360 --> 00:05:41.750
we need to add it to the path.

86
00:05:41.750 --> 00:05:48.350
So for each query string parameter sent,

87
00:05:48.350 --> 00:05:52.370
add it to the path two.

88
00:05:52.370 --> 00:05:53.150
So far,

89
00:05:53.150 --> 00:06:05.260
the request you are well equals path plus question Mark and the question mark is there so

90
00:06:05.260 --> 00:06:09.850
that we can add on the parameters just one after another,

91
00:06:09.850 --> 00:06:13.950
we're going to count how every parameters we have,

92
00:06:13.950 --> 00:06:24.830
and then we're gonna look through them safer of our query key in the query string object.

93
00:06:24.830 --> 00:06:32.390
Perform this loop First you have to make sure that it's a rial ki.

94
00:06:32.390 --> 00:06:42.250
So if the query drink object as own property query key,

95
00:06:42.250 --> 00:06:44.720
then we'll continue.

96
00:06:44.720 --> 00:06:45.260
Well,

97
00:06:45.260 --> 00:06:57.750
both the counter up and then if at least one query string parameter has already been added

98
00:06:57.750 --> 00:07:03.060
pre penned new ones with an ampersand.

99
00:07:03.060 --> 00:07:05.490
So in other words,

100
00:07:05.490 --> 00:07:09.670
if the query string already has Fu equals bar than before,

101
00:07:09.670 --> 00:07:11.620
we add fizz equals buzz.

102
00:07:11.620 --> 00:07:16.000
We have to add the and percent So we want to say,

103
00:07:16.000 --> 00:07:19.980
if the counter this is the reason we're making the counting at all.

104
00:07:19.980 --> 00:07:23.220
If the counter is greater than one remember,

105
00:07:23.220 --> 00:07:24.460
it was just increment it here,

106
00:07:24.460 --> 00:07:28.180
so it will already be one even for the first parameter.

107
00:07:28.180 --> 00:07:29.630
So if it's greater than one,

108
00:07:29.630 --> 00:07:37.350
then we want to say that the request you are l should have ampersand added to it.

109
00:07:37.350 --> 00:07:53.970
And now we can actually add to keep that request Your l equals query key equals query,

110
00:07:53.970 --> 00:07:54.250
string,

111
00:07:54.250 --> 00:07:56.730
object quickie.

112
00:07:56.730 --> 00:08:01.860
Now that we've gone through that four loop and the path has all the keys and values that we

113
00:08:01.860 --> 00:08:02.550
needed to have,

114
00:08:02.550 --> 00:08:08.950
we can form http request as a Jason type.

115
00:08:08.950 --> 00:08:16.120
So we want to say that far x h r equals new XML.

116
00:08:16.120 --> 00:08:24.980
Http request and then we want to open it.

117
00:08:24.980 --> 00:08:30.850
So x h r dot open and pass it the method,

118
00:08:30.850 --> 00:08:36.850
the request you are l the full euro that we just created and true.

119
00:08:36.850 --> 00:08:45.200
Now we want to set the headers so x hr set request better.

120
00:08:45.200 --> 00:08:51.480
But the only one we're concerned with at this moment is that content type should equal

121
00:08:51.480 --> 00:08:59.660
application slash Jason now for each additional header sent in the actual headers object

122
00:08:59.660 --> 00:09:00.950
that the user might have sent.

123
00:09:00.950 --> 00:09:07.460
Now we need to add it to the request one by one.

124
00:09:07.460 --> 00:09:19.560
So we're going to say that for far header key and headers that's looped through if headers

125
00:09:19.560 --> 00:09:32.060
as own property pitter key exchange are set request header better key and then the value

126
00:09:32.060 --> 00:09:34.350
which is headers Turkey.

127
00:09:34.350 --> 00:09:40.180
Now if there is a current session token In other words,

128
00:09:40.180 --> 00:09:42.150
if there's a session token up here,

129
00:09:42.150 --> 00:09:45.270
we need to add that as a header as well.

130
00:09:45.270 --> 00:10:06.770
So we want to say if app dot config the session token then and that as a header as well

131
00:10:06.770 --> 00:10:16.510
header would be called token and the value is at config dot session token dot i d because

132
00:10:16.510 --> 00:10:18.230
if the session token was added there,

133
00:10:18.230 --> 00:10:21.060
it would be an object that would have a key called idee.

134
00:10:21.060 --> 00:10:23.020
Now,

135
00:10:23.020 --> 00:10:25.960
we need to start preparing for the request to come back.

136
00:10:25.960 --> 00:10:35.750
So we're going to say when the request comes back hand of the response.

137
00:10:35.750 --> 00:10:46.070
So x h r on ready state change is a function,

138
00:10:46.070 --> 00:11:03.380
and we want to say if text HR ready state equals XML http request dot capital done.

139
00:11:03.380 --> 00:11:07.700
That means the request is done.

140
00:11:07.700 --> 00:11:13.920
And this syntax is just very specific to the way the XML HTP requests functions expose

141
00:11:13.920 --> 00:11:15.480
themselves in browsers.

142
00:11:15.480 --> 00:11:18.250
We want to get the status code that came back from the a p I.

143
00:11:18.250 --> 00:11:26.240
So the status code equals x h r dot status and the response that they sent back response

144
00:11:26.240 --> 00:11:31.250
returned equals x h r dot response text.

145
00:11:31.250 --> 00:11:32.340
Now,

146
00:11:32.340 --> 00:11:37.380
this is where we want to call back if the user provided a call back in the first place.

147
00:11:37.380 --> 00:11:41.360
So called back if requested in some cases,

148
00:11:41.360 --> 00:11:42.690
we might want to send often.

149
00:11:42.690 --> 00:11:45.950
Http request and we don't care about the call back.

150
00:11:45.950 --> 00:11:48.320
We don't care about getting response.

151
00:11:48.320 --> 00:11:51.160
We just want Teoh send it off.

152
00:11:51.160 --> 00:11:52.160
But in some cases,

153
00:11:52.160 --> 00:11:53.180
we do want to call back.

154
00:11:53.180 --> 00:11:54.310
So we will provide one.

155
00:11:54.310 --> 00:12:03.020
We want to say if call back then we want to try and catch parsing the Jason response

156
00:12:03.020 --> 00:12:09.030
because Jason Parse will throw in air if the response that I got back from the server

157
00:12:09.030 --> 00:12:09.620
wasn't valid,

158
00:12:09.620 --> 00:12:10.110
Jason.

159
00:12:10.110 --> 00:12:15.100
So we're gonna catch the error and within the try,

160
00:12:15.100 --> 00:12:27.230
we're going to say that far first response equals Jason dot cars the response returned and

161
00:12:27.230 --> 00:12:35.760
then call back the status code and the poorest response to whoever called it.

162
00:12:35.760 --> 00:12:37.190
Otherwise,

163
00:12:37.190 --> 00:12:41.100
we'll just call back Status code and false.

164
00:12:41.100 --> 00:12:45.250
Now we have prepared for what happens when the request comes back,

165
00:12:45.250 --> 00:12:48.170
but we actually haven't sent off the request yet.

166
00:12:48.170 --> 00:12:55.900
So now we want to send the payload as Jason when we do that by saying that the far payload

167
00:12:55.900 --> 00:12:59.590
string equals Jason string.

168
00:12:59.590 --> 00:13:11.490
If I payload and now we want to say x h r dot Send the payload straight.

169
00:13:11.490 --> 00:13:18.550
I'm going to start this at back up just so we can load this page and this after Js in a

170
00:13:18.550 --> 00:13:23.420
browser again and then used the console to play around with making client requests.

171
00:13:23.420 --> 00:13:27.750
So I'm gonna reload this page.

172
00:13:27.750 --> 00:13:36.720
Then I should be able to open up the console and directly access this object after client

173
00:13:36.720 --> 00:13:39.260
that requests in order to make requests.

174
00:13:39.260 --> 00:13:48.160
So I want to say dot client dot request and for illustrative purposes,

175
00:13:48.160 --> 00:13:51.220
I'm just going to hit the pigging service right now,

176
00:13:51.220 --> 00:13:53.150
so I don't need headers.

177
00:13:53.150 --> 00:13:54.270
I can leave that undefined.

178
00:13:54.270 --> 00:13:56.110
But I do want to send a path,

179
00:13:56.110 --> 00:13:58.850
and that path is going to be paying.

180
00:13:58.850 --> 00:14:03.750
The method is going to be get the query string object.

181
00:14:03.750 --> 00:14:06.360
I was going to be undefined payload,

182
00:14:06.360 --> 00:14:07.620
undefined.

183
00:14:07.620 --> 00:14:14.850
But I do want a call back status code and the payload returned when it calls back.

184
00:14:14.850 --> 00:14:17.550
I just want to look out what happened.

185
00:14:17.550 --> 00:14:19.150
Status code,

186
00:14:19.150 --> 00:14:22.380
payload.

187
00:14:22.380 --> 00:14:28.310
All right,

188
00:14:28.310 --> 00:14:29.950
so that just sent off.

189
00:14:29.950 --> 00:14:34.160
And we can see that what came back was 200 an empty object.

190
00:14:34.160 --> 00:14:36.380
I want to send off that same request again,

191
00:14:36.380 --> 00:14:39.860
but this time I'm going to send it to a different round.

192
00:14:39.860 --> 00:14:42.490
Let's send it to the users route.

193
00:14:42.490 --> 00:14:47.670
We got a 404 because the user's route doesn't exist anymore.

194
00:14:47.670 --> 00:14:51.340
It actually exists as a P I slash users.

195
00:14:51.340 --> 00:14:56.130
So we're going to send that off and we got a 400 that we're missing a required field.

196
00:14:56.130 --> 00:15:00.990
So we're seeing the same responses coming back for more a p I that we used to see when we

197
00:15:00.990 --> 00:15:03.090
would make the requests using postman.

198
00:15:03.090 --> 00:15:09.300
This client request function that we just built is the most important thing inside of app

199
00:15:09.300 --> 00:15:15.880
dot Js And it's really the only client side logic that I think it's worth going into detail

200
00:15:15.880 --> 00:15:17.940
on in this course.

201
00:15:17.940 --> 00:15:24.920
The rest of the functions that will be added to this file will simply be gathering up form

202
00:15:24.920 --> 00:15:27.620
inputs and sending it to our MP I,

203
00:15:27.620 --> 00:15:33.160
or redirecting a logged out user to the You've been locked out page etcetera,

204
00:15:33.160 --> 00:15:33.710
etcetera.

205
00:15:33.710 --> 00:15:36.110
And so in the following lectures,

206
00:15:36.110 --> 00:15:41.760
I'm not going to go into detail about the way that the app dot Js file is changing.

207
00:15:41.760 --> 00:15:47.460
I'm simply just going to note that we are adding things to the app dot Js file and all

208
00:15:47.460 --> 00:15:48.710
paste figs in there.

209
00:15:48.710 --> 00:15:51.660
If you want to see the Code Amore detailed,

210
00:15:51.660 --> 00:15:53.140
go over in detail.

211
00:15:53.140 --> 00:15:59.350
All the code lecture by lecture is again available on the get hub separated out by lecture

212
00:15:59.350 --> 00:16:03.350
so you can see how the code changed from lecture to lecture.

213
00:16:03.350 --> 00:16:05.190
So without further ado,

214
00:16:05.190 --> 00:16:09.550
we can kill this app and move on to the next lecture.

