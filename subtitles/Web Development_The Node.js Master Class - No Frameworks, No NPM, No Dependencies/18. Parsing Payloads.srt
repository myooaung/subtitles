1
00:00:00,000 --> 00:00:03,220
all right,

2
00:00:03,220 --> 00:00:08,370
The next thing we want to do for the last thing we want to do before we start handling

3
00:00:08,370 --> 00:00:12,800
these requests and routing them somewhere is get the payload that the users sent.

4
00:00:12,800 --> 00:00:16,860
This is going to be a bit more complicated than the others,

5
00:00:16,860 --> 00:00:18,790
but is still fairly straightforward.

6
00:00:18,790 --> 00:00:23,570
So let's go ahead and above this response say what we're trying to do.

7
00:00:23,570 --> 00:00:30,370
Get the payload.

8
00:00:30,370 --> 00:00:33,330
If there is any for this,

9
00:00:33,330 --> 00:00:39,010
we're going to need a another library that's built into node and that is called string

10
00:00:39,010 --> 00:00:39,650
decoder.

11
00:00:39,650 --> 00:00:47,550
So we're going to require appear you're gonna say that bar string decoder equals require

12
00:00:47,550 --> 00:00:49,210
string.

13
00:00:49,210 --> 00:00:50,300
Underscore,

14
00:00:50,300 --> 00:00:56,950
decoder Don't string decoder.

15
00:00:56,950 --> 00:01:02,160
The String Dakota Library contains a number of useful things,

16
00:01:02,160 --> 00:01:09,900
and the string decoder functions that we want are actually available on the string decoder

17
00:01:09,900 --> 00:01:13,390
parameter within that object to now there,

18
00:01:13,390 --> 00:01:15,890
available to us at the variable string decoder.

19
00:01:15,890 --> 00:01:17,700
Now back to getting the payload.

20
00:01:17,700 --> 00:01:21,860
First thing we want is to create a new string decoder.

21
00:01:21,860 --> 00:01:27,750
So we're going to say that this decoder equals new strain decoder.

22
00:01:27,750 --> 00:01:30,320
And when you create a new stream decoder,

23
00:01:30,320 --> 00:01:36,470
you want to tell it what kind of char set or encoding it can expect her.

24
00:01:36,470 --> 00:01:40,740
You know what it should be decoding And for our case is gonna be utf eight.

25
00:01:40,740 --> 00:01:44,850
This is going to be the case with pretty much any.

26
00:01:44,850 --> 00:01:45,570
You know,

27
00:01:45,570 --> 00:01:50,140
Jason ap Either gonna be building unless you're specifically trying to do something other

28
00:01:50,140 --> 00:01:50,990
than utf eight,

29
00:01:50,990 --> 00:01:53,990
which probably very rarely be the case.

30
00:01:53,990 --> 00:01:55,790
So as you might have heard,

31
00:01:55,790 --> 00:01:59,740
no deals heavily with these things called streams.

32
00:01:59,740 --> 00:02:03,550
We don't need to do a deep dive into what streams are right now,

33
00:02:03,550 --> 00:02:08,050
but it's worth knowing that they are pretty much what they sound like.

34
00:02:08,050 --> 00:02:11,970
Their bits of information that are coming in a little bit at a time,

35
00:02:11,970 --> 00:02:14,280
as opposed to all at once.

36
00:02:14,280 --> 00:02:17,060
Payloads that come as part of an HTP.

37
00:02:17,060 --> 00:02:22,500
Requests come in to the HDP server as a stream,

38
00:02:22,500 --> 00:02:26,830
and so we need to collect that stream as it comes in.

39
00:02:26,830 --> 00:02:27,280
And then,

40
00:02:27,280 --> 00:02:29,950
when the stream tells us were at the end,

41
00:02:29,950 --> 00:02:35,120
coalesce that into one coherent thing before we can figure out what that pay low it is

42
00:02:35,120 --> 00:02:38,160
because as we receive little bits of this payload,

43
00:02:38,160 --> 00:02:40,640
we might only know a few characters at a time.

44
00:02:40,640 --> 00:02:46,840
But re are really interested in what the entire payload is in its entirety once it is

45
00:02:46,840 --> 00:02:47,750
finished streaming in.

46
00:02:47,750 --> 00:02:50,050
So in order to do that,

47
00:02:50,050 --> 00:02:53,520
before we start catching the payload as it comes in,

48
00:02:53,520 --> 00:02:55,450
we want to create a new string to hold it.

49
00:02:55,450 --> 00:02:57,330
I was gonna call it Buffer for now,

50
00:02:57,330 --> 00:03:04,330
and I'm gonna initialize it to an empty string itself than as new data comes in.

51
00:03:04,330 --> 00:03:09,040
I'm going to append it to this existing string here.

52
00:03:09,040 --> 00:03:13,460
We do that by binding to an event that the request object emits.

53
00:03:13,460 --> 00:03:15,550
And that event is called data.

54
00:03:15,550 --> 00:03:20,880
So when the request object emits the event,

55
00:03:20,880 --> 00:03:23,550
so on the event called data,

56
00:03:23,550 --> 00:03:35,390
we want this call back to be called and we want the data that is being emitted to be passed

57
00:03:35,390 --> 00:03:36,350
to this call back.

58
00:03:36,350 --> 00:03:48,090
And what we want to do is we want to say that that buffer recreated up here should have the

59
00:03:48,090 --> 00:03:56,890
new data appended to it through a string decoder to the buffer is going to be appended with

60
00:03:56,890 --> 00:03:58,740
decoder doctor,

61
00:03:58,740 --> 00:03:59,850
right?

62
00:03:59,850 --> 00:04:03,950
And then the data that we received.

63
00:04:03,950 --> 00:04:06,960
So what that means is,

64
00:04:06,960 --> 00:04:12,090
as this data is streaming in every time it's dreams in a little piece.

65
00:04:12,090 --> 00:04:20,510
The request object emits the data event that were binding to and it sends us a bunch of un

66
00:04:20,510 --> 00:04:21,590
decoded data.

67
00:04:21,590 --> 00:04:23,590
We know it should be utf eight.

68
00:04:23,590 --> 00:04:31,550
So we decode it to utf eight using this new YouTube UTF eight decoder that we created and

69
00:04:31,550 --> 00:04:37,380
we upend the result onto the buffer that we created a moment ago.

70
00:04:37,380 --> 00:04:45,390
What that means is a large string that streaming in is going to be received by us little

71
00:04:45,390 --> 00:04:46,590
pieces at a time.

72
00:04:46,590 --> 00:04:50,820
But eventually after this data event emits,

73
00:04:50,820 --> 00:04:51,190
you know,

74
00:04:51,190 --> 00:04:53,890
a certain number of times it's all going to be there,

75
00:04:53,890 --> 00:04:58,580
and the buffer is going to have it all as a normal utf eight string.

76
00:04:58,580 --> 00:05:07,010
But there's actually another event that tells us that it's done when it's done and that is

77
00:05:07,010 --> 00:05:08,490
called end.

78
00:05:08,490 --> 00:05:18,650
So when the request object emit so wreck on and we I want to call this callback,

79
00:05:18,650 --> 00:05:21,010
which doesn't take any parameters,

80
00:05:21,010 --> 00:05:24,040
and that's going to tell us,

81
00:05:24,040 --> 00:05:24,460
Okay,

82
00:05:24,460 --> 00:05:25,310
this is the end.

83
00:05:25,310 --> 00:05:35,450
So the buffer is going to be appended with whatever we just ended it with decoder dot end

84
00:05:35,450 --> 00:05:42,810
and now that the request has finished,

85
00:05:42,810 --> 00:05:46,050
we want to do the things that we were doing before,

86
00:05:46,050 --> 00:05:50,940
namely sending the response and logging the request.

87
00:05:50,940 --> 00:05:52,810
So removing the response,

88
00:05:52,810 --> 00:05:54,470
sending and the request,

89
00:05:54,470 --> 00:06:02,820
logging from where they used to live just inside the function body into the handler of the

90
00:06:02,820 --> 00:06:03,610
end event.

91
00:06:03,610 --> 00:06:10,850
Now you might be saying not every request is going to have a payload.

92
00:06:10,850 --> 00:06:13,170
So is this end event going to get called?

93
00:06:13,170 --> 00:06:14,670
The answer is yes.

94
00:06:14,670 --> 00:06:16,310
The end event was yet called.

95
00:06:16,310 --> 00:06:18,510
This data event won't always be called.

96
00:06:18,510 --> 00:06:20,380
So if there is no payload,

97
00:06:20,380 --> 00:06:23,570
the buffer is going to get initialized to an empty string.

98
00:06:23,570 --> 00:06:26,050
It's never going to get anything appended to it.

99
00:06:26,050 --> 00:06:27,680
But then it's going to get ended,

100
00:06:27,680 --> 00:06:29,900
and we're still going to send the response.

101
00:06:29,900 --> 00:06:38,870
And let's go ahead and say that the request was received with this payload and go ahead and

102
00:06:38,870 --> 00:06:41,770
log out whatever the payload.

103
00:06:41,770 --> 00:06:42,450
Waas.

104
00:06:42,450 --> 00:06:50,070
Okay,

105
00:06:50,070 --> 00:06:56,240
so just toe walk back through this one more time to make sure it's totally coming home.

106
00:06:56,240 --> 00:07:00,270
We created a decoder that we're using later on.

107
00:07:00,270 --> 00:07:03,280
The buffer is calling it buffer.

108
00:07:03,280 --> 00:07:06,250
It's really just a placeholder for a string.

109
00:07:06,250 --> 00:07:07,360
As it requests,

110
00:07:07,360 --> 00:07:13,270
payload gets streamed in the request object is going to admit a data event that were

111
00:07:13,270 --> 00:07:14,000
binding on.

112
00:07:14,000 --> 00:07:17,090
So the request on this data object,

113
00:07:17,090 --> 00:07:26,200
we get a new bit of data and then we use the decoder to turn that into a simple string

114
00:07:26,200 --> 00:07:28,050
through utf eight.

115
00:07:28,050 --> 00:07:29,790
And then when it ends,

116
00:07:29,790 --> 00:07:33,760
we cap off the buffer with whatever the request ended with,

117
00:07:33,760 --> 00:07:38,230
we send the response and then lock out what the payload waas.

118
00:07:38,230 --> 00:07:43,340
This is how streams are generally handled in no Js.

119
00:07:43,340 --> 00:07:46,510
You don't simply just grab the value of a stream.

120
00:07:46,510 --> 00:07:52,770
You need to bind to the data events of a stream or the ending event of a stream or whatever

121
00:07:52,770 --> 00:07:54,500
events the stream has defined,

122
00:07:54,500 --> 00:08:00,300
so that you can grab the little pieces of information that the stream is sending along and

123
00:08:00,300 --> 00:08:02,960
then know when the stream has finished.

124
00:08:02,960 --> 00:08:04,100
In this way.

125
00:08:04,100 --> 00:08:09,300
We're actually using another part of the no Js docks right now,

126
00:08:09,300 --> 00:08:12,980
which is called stream streams air built into node.

127
00:08:12,980 --> 00:08:15,110
There are fundamental concept,

128
00:08:15,110 --> 00:08:19,230
especially when it comes to http servers or any kind of servers,

129
00:08:19,230 --> 00:08:22,020
and this is generally how you deal with them.

130
00:08:22,020 --> 00:08:24,370
You can create them or you can read them in.

131
00:08:24,370 --> 00:08:31,310
So let's go ahead and start the server again knowed index dot Js servers listening.

132
00:08:31,310 --> 00:08:38,450
We're gonna go back over the postman here and now we're going to add a body to our request

133
00:08:38,450 --> 00:08:40,530
in order to have a body,

134
00:08:40,530 --> 00:08:44,370
we to switch to something other than get because technically,

135
00:08:44,370 --> 00:08:49,710
according to the definitions of get it shouldn't have any kind of payload there.

136
00:08:49,710 --> 00:08:52,600
So we're going to switch to a post,

137
00:08:52,600 --> 00:08:57,390
and now we're going to add that the body should be a raw body.

138
00:08:57,390 --> 00:08:59,450
That's just text.

139
00:08:59,450 --> 00:09:03,650
And this is the body we are sending.

140
00:09:03,650 --> 00:09:05,120
Let's go ahead and send it.

141
00:09:05,120 --> 00:09:06,220
Send it.

142
00:09:06,220 --> 00:09:07,690
We got hello world back.

143
00:09:07,690 --> 00:09:13,700
Let's see what the application thought it received it received.

144
00:09:13,700 --> 00:09:15,860
This is the body that we are sending.

145
00:09:15,860 --> 00:09:20,720
So that is how you stream in a payload that comes in.

146
00:09:20,720 --> 00:09:23,130
This could be for a giant payload,

147
00:09:23,130 --> 00:09:25,430
like a huge Jason object in our case,

148
00:09:25,430 --> 00:09:29,850
Or this could be for a small bit of text or nothing at all.

149
00:09:29,850 --> 00:09:33,250
Let's send one more request without the body,

150
00:09:33,250 --> 00:09:36,220
the one that we did previously.

151
00:09:36,220 --> 00:09:41,490
Just to make sure that the a p I still working even if there is nobody.

152
00:09:41,490 --> 00:09:45,400
So the request is been received with this payload.

153
00:09:45,400 --> 00:09:48,010
Nothing in our case would be an empty string.

154
00:09:48,010 --> 00:09:50,850
Because that's what we initialized this buffer variable too.

155
00:09:50,850 --> 00:09:52,850
Okay,

156
00:09:52,850 --> 00:09:54,750
so now we can move on to the next lecture.

