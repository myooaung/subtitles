1
00:00:00,000 --> 00:00:00,580
All right,

2
00:00:00,580 --> 00:00:04,470
let's get to building your first note app when I'm working.

3
00:00:04,470 --> 00:00:06,850
I like to keep at least two things open.

4
00:00:06,850 --> 00:00:10,900
First is my text editor so that I can write and edit the program,

5
00:00:10,900 --> 00:00:16,360
and I also sometimes use this to browse through the folders in the directory that I'm

6
00:00:16,360 --> 00:00:17,130
inside of.

7
00:00:17,130 --> 00:00:19,530
And the second is my terminal.

8
00:00:19,530 --> 00:00:24,880
So I can run and test the application and see the deep of messages etcetera.

9
00:00:24,880 --> 00:00:25,630
Later on,

10
00:00:25,630 --> 00:00:28,460
when we're building the Web app front end.

11
00:00:28,460 --> 00:00:33,370
It's also useful toe have a browser open so that you could test it when I'm building an A P

12
00:00:33,370 --> 00:00:33,370
.

13
00:00:33,370 --> 00:00:38,600
I also often have an A p I tester like postman open For now,

14
00:00:38,600 --> 00:00:40,460
these two windows are fine.

15
00:00:40,460 --> 00:00:42,060
For the purpose of this video,

16
00:00:42,060 --> 00:00:47,610
I'm going to collapse these windows into one screen so that you can see the text editor on

17
00:00:47,610 --> 00:00:49,940
the left hand side and the terminal in the right hand side.

18
00:00:49,940 --> 00:00:50,610
Normally,

19
00:00:50,610 --> 00:00:51,420
I wouldn't do that.

20
00:00:51,420 --> 00:00:53,940
I would just kind of toggle between the screens,

21
00:00:53,940 --> 00:00:54,450
but ta,

22
00:00:54,450 --> 00:00:57,090
going back and forth would make this video very dizzying.

23
00:00:57,090 --> 00:00:59,030
So I'm just putting it all in one.

24
00:00:59,030 --> 00:01:03,200
If you're going to court along go ahead and open up your terminal and your text editor,

25
00:01:03,200 --> 00:01:04,070
if you like,

26
00:01:04,070 --> 00:01:05,640
so that we can get rolling.

27
00:01:05,640 --> 00:01:07,710
Now to recap in this section,

28
00:01:07,710 --> 00:01:14,700
we're going to be building a rest ful a p I for an up time monitoring application using no

29
00:01:14,700 --> 00:01:15,860
NPM modules,

30
00:01:15,860 --> 00:01:17,980
no dependencies or anything like that.

31
00:01:17,980 --> 00:01:18,570
We will,

32
00:01:18,570 --> 00:01:18,930
however,

33
00:01:18,930 --> 00:01:23,150
be using a large chunk of the features available in the No Js library,

34
00:01:23,150 --> 00:01:28,250
and I'll point out what each one of these is as we go along several sections from now,

35
00:01:28,250 --> 00:01:32,830
we're going to go back through this code and add some tests and re factor a little bit to

36
00:01:32,830 --> 00:01:34,610
make it better and more robust overall.

37
00:01:34,610 --> 00:01:35,290
But for now,

38
00:01:35,290 --> 00:01:38,670
we're just going to build a quick and dirty application.

39
00:01:38,670 --> 00:01:39,650
As I mentioned,

40
00:01:39,650 --> 00:01:42,510
we're building up time monitoring app.

41
00:01:42,510 --> 00:01:47,390
This is an app that lets you as a user into a U R L that you want monitor,

42
00:01:47,390 --> 00:01:49,010
and it'll send you alerts.

43
00:01:49,010 --> 00:01:52,650
If that euro goes down or comes back up after being down,

44
00:01:52,650 --> 00:01:57,050
you're probably familiar with a lot of uptime monitoring applications available.

45
00:01:57,050 --> 00:01:59,640
We want this app to be usable in the wild,

46
00:01:59,640 --> 00:02:03,700
so let's make sure that our users can sign up signing,

47
00:02:03,700 --> 00:02:04,570
sign out,

48
00:02:04,570 --> 00:02:09,790
then edit their settings in addition to just being able to make up time checks and that

49
00:02:09,790 --> 00:02:10,350
kind of thing.

50
00:02:10,350 --> 00:02:11,370
Also,

51
00:02:11,370 --> 00:02:16,510
we want our users to get their up time alerts their up alerts and they're down alerts by

52
00:02:16,510 --> 00:02:18,530
SMS instead of email.

53
00:02:18,530 --> 00:02:21,820
So we're gonna be integrating that way before we get to coding.

54
00:02:21,820 --> 00:02:24,100
Let's speck out or requirements here.

55
00:02:24,100 --> 00:02:24,760
What is this,

56
00:02:24,760 --> 00:02:26,750
a P I part supposed to do?

57
00:02:26,750 --> 00:02:29,190
We want a rest for a P I.

58
00:02:29,190 --> 00:02:36,530
That one listens on a port and accepts incoming HDP requests for post get put,

59
00:02:36,530 --> 00:02:39,170
delete and head to.

60
00:02:39,170 --> 00:02:45,050
We want the FBI to allow a client to connect to it so that they can create a new user.

61
00:02:45,050 --> 00:02:47,290
Edit that user or delete that user.

62
00:02:47,290 --> 00:02:48,130
Three.

63
00:02:48,130 --> 00:02:51,120
We want users to be able to sign in,

64
00:02:51,120 --> 00:02:55,800
and we want that signing mechanism to give them back a token that they can use for a

65
00:02:55,800 --> 00:02:58,080
subsequent authenticated requests.

66
00:02:58,080 --> 00:03:00,980
If they want to do something that requires being logged in,

67
00:03:00,980 --> 00:03:05,260
they're going to need to provide that token that they got when they signed in the first

68
00:03:05,260 --> 00:03:06,890
Number four.

69
00:03:06,890 --> 00:03:09,900
We want that same user to be able to sign out,

70
00:03:09,900 --> 00:03:12,360
and we want their token to be invalidated,

71
00:03:12,360 --> 00:03:16,290
or you want them to be able to invalidate their token when they sign out.

72
00:03:16,290 --> 00:03:17,790
Number five.

73
00:03:17,790 --> 00:03:23,150
We want a signed in user to be able to use that token to create a new check.

74
00:03:23,150 --> 00:03:24,160
And by check,

75
00:03:24,160 --> 00:03:29,850
we mean a task for the system to check a given your l to see if it's up or down.

76
00:03:29,850 --> 00:03:35,410
We also want the user to be able to define what up or down is.

77
00:03:35,410 --> 00:03:36,280
For example,

78
00:03:36,280 --> 00:03:40,880
for some websites up might mean that you receive a 200 status code,

79
00:03:40,880 --> 00:03:48,620
while other websites might say that for us and up is anything that isn't 500 Number six.

80
00:03:48,620 --> 00:03:53,630
We want a signed in user to be able to edit or delete any of their checks,

81
00:03:53,630 --> 00:03:59,550
and we want to limit their checks to five so we don't want a user to be able to create 1/6

82
00:03:59,550 --> 00:03:59,970
check.

83
00:03:59,970 --> 00:04:06,600
We want them to be able to have zero through five checks and seven in the background.

84
00:04:06,600 --> 00:04:13,200
We want to perform all the checks at the appropriate time and alert the users when a check

85
00:04:13,200 --> 00:04:13,720
changes.

86
00:04:13,720 --> 00:04:17,150
It's state from up to down or vice versa.

87
00:04:17,150 --> 00:04:20,470
We want our checks to run once a minute.

88
00:04:20,470 --> 00:04:25,350
So once a minute we want all the checks created by all of the users to run.

89
00:04:25,350 --> 00:04:28,820
We want to check those euros to see if they're up or down,

90
00:04:28,820 --> 00:04:34,750
given the definition provided by the user and if it is currently down when it had been up,

91
00:04:34,750 --> 00:04:36,450
we want to send them an SMS.

92
00:04:36,450 --> 00:04:39,230
If it is up when it had just been down,

93
00:04:39,230 --> 00:04:40,900
we want to send them an SMS.

94
00:04:40,900 --> 00:04:41,840
Otherwise,

95
00:04:41,840 --> 00:04:43,430
if it doesn't fit those two conditions,

96
00:04:43,430 --> 00:04:45,050
we just want to do nothing.

97
00:04:45,050 --> 00:04:46,170
Okay,

98
00:04:46,170 --> 00:04:49,020
so that's pretty much our requirements for the A P I.

99
00:04:49,020 --> 00:04:52,220
There's a few other little things that we want to be able to do,

100
00:04:52,220 --> 00:04:56,700
but we'll walk through those as they appear for the majority of these features will use the

101
00:04:56,700 --> 00:04:58,380
plane known AP I.

102
00:04:58,380 --> 00:05:01,420
But to alert users by SMS messages,

103
00:05:01,420 --> 00:05:06,940
we use no to connect to the twilio a p I to send SMS to the user,

104
00:05:06,940 --> 00:05:12,340
though this doesn't mean that will be using 1/3 party library to connect to TWILIO.

105
00:05:12,340 --> 00:05:16,410
We're actually going to craft that http requests by hand,

106
00:05:16,410 --> 00:05:20,390
and I chose this integration because I wanted to be able to show you how it's possible to

107
00:05:20,390 --> 00:05:23,800
interact with AP eyes from plain note itself,

108
00:05:23,800 --> 00:05:26,160
without needing a library from that vendor.

109
00:05:26,160 --> 00:05:26,980
Also,

110
00:05:26,980 --> 00:05:28,960
since it's a fairly simple program,

111
00:05:28,960 --> 00:05:32,750
we will be writing to the file system rather than a traditional data store.

112
00:05:32,750 --> 00:05:35,170
If we were building this program for production,

113
00:05:35,170 --> 00:05:37,990
it would be worth integrating with a true data store,

114
00:05:37,990 --> 00:05:39,670
possibly through a library.

115
00:05:39,670 --> 00:05:42,890
But that's outside the scope of this course for us.

116
00:05:42,890 --> 00:05:48,600
We're just gonna be writing Jason files to the file system and reading them as if the file

117
00:05:48,600 --> 00:05:50,450
system was a key value store.

