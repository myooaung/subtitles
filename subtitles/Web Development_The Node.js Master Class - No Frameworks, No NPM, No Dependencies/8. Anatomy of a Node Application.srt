1
00:00:00,000 --> 00:00:00,790
in this lecture,

2
00:00:00,790 --> 00:00:05,380
we're going to be going over the basic anatomy of a small node application.

3
00:00:05,380 --> 00:00:07,750
This is not a building exercise.

4
00:00:07,750 --> 00:00:10,880
There's no need for you to write this small application yourself,

5
00:00:10,880 --> 00:00:12,180
but if you want the code,

6
00:00:12,180 --> 00:00:14,180
you can download it from the link on your screen.

7
00:00:14,180 --> 00:00:22,170
This application is just a super small example to familiarize yourself passively with the

8
00:00:22,170 --> 00:00:23,480
structure of a note,

9
00:00:23,480 --> 00:00:28,160
app will be going over all this stuff again as you build your own APS in the following

10
00:00:28,160 --> 00:00:28,760
lectures.

11
00:00:28,760 --> 00:00:30,040
First,

12
00:00:30,040 --> 00:00:32,120
let's start with an empty directory.

13
00:00:32,120 --> 00:00:34,280
This is where the APP is going to live.

14
00:00:34,280 --> 00:00:39,030
This is where we're going to put the primary job script file for this application,

15
00:00:39,030 --> 00:00:41,410
whose name we will pass to know J.

16
00:00:41,410 --> 00:00:43,280
S in order to start the APP,

17
00:00:43,280 --> 00:00:45,670
we can call it anything we want.

18
00:00:45,670 --> 00:00:46,570
In this example,

19
00:00:46,570 --> 00:00:49,240
we've called it index dot Js.

20
00:00:49,240 --> 00:00:50,120
So when we run,

21
00:00:50,120 --> 00:00:55,600
this application would do so by calling node index dot Js from within the base directory.

22
00:00:55,600 --> 00:00:56,680
In other words,

23
00:00:56,680 --> 00:01:02,880
within our terminal will CD change directory until we are inside of the base directory and

24
00:01:02,880 --> 00:01:04,480
then we'll enter that command.

25
00:01:04,480 --> 00:01:07,400
If we entered that command within a different directory,

26
00:01:07,400 --> 00:01:13,820
we would likely need to provide a relative or absolute path to index dot Js so node would

27
00:01:13,820 --> 00:01:18,130
know which file we're actually talking about when we're inside of the base directory.

28
00:01:18,130 --> 00:01:21,420
Note is going to look for the file called index dot Js.

29
00:01:21,420 --> 00:01:25,400
In that directory automatically inside of this index dot Js file,

30
00:01:25,400 --> 00:01:27,750
We can see a few sections comments,

31
00:01:27,750 --> 00:01:28,780
dependencies,

32
00:01:28,780 --> 00:01:33,320
module scaffolding and configuration function declarations and function.

33
00:01:33,320 --> 00:01:34,150
Invocation.

34
00:01:34,150 --> 00:01:36,260
We're going to take a round about way,

35
00:01:36,260 --> 00:01:39,130
but will eventually look at each of these sections in more detail.

36
00:01:39,130 --> 00:01:43,830
First upper comment Block these air pretty self explanatory.

37
00:01:43,830 --> 00:01:48,500
I'm giving the file a title as well as a lengthier description,

38
00:01:48,500 --> 00:01:53,520
and I'm also using one of the much derided conventions of stating the author and date

39
00:01:53,520 --> 00:01:54,810
within the comments as well.

40
00:01:54,810 --> 00:01:59,300
You'll find a lot of developers who hate this tradition today and find get commits to be a

41
00:01:59,300 --> 00:02:04,560
much more expressive way of conveying who was added what to which file and when.

42
00:02:04,560 --> 00:02:09,700
But for this example of just hard coded in my name and the date dependencies,

43
00:02:09,700 --> 00:02:14,960
the logic contained further down in the file is based on having certain variables such as

44
00:02:14,960 --> 00:02:15,370
math,

45
00:02:15,370 --> 00:02:20,680
lib and certain functions such as math lib dot get random number defined.

46
00:02:20,680 --> 00:02:26,720
We don't define these ourselves instead require or import and external file and assigned

47
00:02:26,720 --> 00:02:30,030
the contents of that file to a variable or more accurately,

48
00:02:30,030 --> 00:02:34,960
That imported module has exported a certain object or interface,

49
00:02:34,960 --> 00:02:40,650
and the interface it is exporting becomes available to us at the variable we assigned to it

50
00:02:40,650 --> 00:02:40,650
.

51
00:02:40,650 --> 00:02:42,400
So in our example,

52
00:02:42,400 --> 00:02:51,060
we require a library that lives at dot slash lib slash math dot Js and we assign it to the

53
00:02:51,060 --> 00:02:53,230
variable math lib.

54
00:02:53,230 --> 00:02:54,210
At this point,

55
00:02:54,210 --> 00:03:01,260
everything that the math dot Js library has decided to export has become available to us

56
00:03:01,260 --> 00:03:05,040
within that math lib variable before we move on,

57
00:03:05,040 --> 00:03:09,380
let's open up lib slash math dot Js and see what's going on inside.

58
00:03:09,380 --> 00:03:11,240
This file is very small.

59
00:03:11,240 --> 00:03:13,730
There are some comments that an object is created.

60
00:03:13,730 --> 00:03:14,000
Ah,

61
00:03:14,000 --> 00:03:19,590
function is added as a key to the object and finally that object is exported using the

62
00:03:19,590 --> 00:03:21,610
module dot exports convention.

63
00:03:21,610 --> 00:03:23,050
To put it another way,

64
00:03:23,050 --> 00:03:29,190
an object is defined and then exported to whatever file has decided to require or import

65
00:03:29,190 --> 00:03:29,950
this module.

66
00:03:29,950 --> 00:03:34,550
This includes the get random number key that was on the object.

67
00:03:34,550 --> 00:03:36,890
So back to index dot Js.

68
00:03:36,890 --> 00:03:38,910
We import the math library,

69
00:03:38,910 --> 00:03:42,480
assign it to the math lib variable than further down.

70
00:03:42,480 --> 00:03:48,790
You can see that we use math dot Js is get random number function and that we do it by

71
00:03:48,790 --> 00:03:55,550
calling the get random number key on the math lib variable we assigned to the object when

72
00:03:55,550 --> 00:03:56,460
we imported it.

73
00:03:56,460 --> 00:03:57,100
Note,

74
00:03:57,100 --> 00:03:57,790
however,

75
00:03:57,790 --> 00:04:03,220
that the top variable name to which get random number is a key is arbitrary.

76
00:04:03,220 --> 00:04:08,430
We could have just as easily imported the math dot Js library and assigned it to a variable

77
00:04:08,430 --> 00:04:09,600
called coconut.

78
00:04:09,600 --> 00:04:10,060
And then,

79
00:04:10,060 --> 00:04:10,860
in that case,

80
00:04:10,860 --> 00:04:17,790
we would call get random number by invoking coca dot get random number instead of math lib

81
00:04:17,790 --> 00:04:19,050
dot get random number.

82
00:04:19,050 --> 00:04:25,950
The keys that Matha Js defined are always available to us as they were defined in that file

83
00:04:25,950 --> 00:04:25,950
.

84
00:04:25,950 --> 00:04:30,240
But the variable object that contains them can be named anything we want.

85
00:04:30,240 --> 00:04:31,140
But hold on.

86
00:04:31,140 --> 00:04:39,470
You might be saying we didn't import lib slash math dot Js We only imported lib slash math

87
00:04:39,470 --> 00:04:41,190
without any file extension.

88
00:04:41,190 --> 00:04:48,260
So how come math dot Js with the dot Js extension got imported well That's just a

89
00:04:48,260 --> 00:04:49,450
convenience that no,

90
00:04:49,450 --> 00:04:50,550
it provides us.

91
00:04:50,550 --> 00:04:52,250
When you try to import something,

92
00:04:52,250 --> 00:04:57,530
it assumes that you're either importing that file name with dot Js at the end or that

93
00:04:57,530 --> 00:05:04,140
importing a folder of that name and that folder contains a file called index dot Js.

94
00:05:04,140 --> 00:05:05,180
In that case,

95
00:05:05,180 --> 00:05:08,600
we will import the index dot Js file within that Ford ER.

96
00:05:08,600 --> 00:05:11,030
This is exactly how the next slide works.

97
00:05:11,030 --> 00:05:12,460
You'll see it's importing,

98
00:05:12,460 --> 00:05:17,650
slash lib slash jokes and assigning it to the variable jokes lip.

99
00:05:17,650 --> 00:05:20,110
But if you open up the lib directory,

100
00:05:20,110 --> 00:05:21,480
you won't see a joke.

101
00:05:21,480 --> 00:05:22,890
Start Js file.

102
00:05:22,890 --> 00:05:24,790
You'll see a Jokes directory,

103
00:05:24,790 --> 00:05:28,120
which has an index dot Js file inside of it.

104
00:05:28,120 --> 00:05:34,520
Notice smart enough to know that you intend to import the index dot Js file within the

105
00:05:34,520 --> 00:05:35,600
Jokes directory,

106
00:05:35,600 --> 00:05:39,550
and all you have to specify is the location of the directory itself.

107
00:05:39,550 --> 00:05:45,280
Let's open up the index dot Js file within the lib slash jokes directory and see what's

108
00:05:45,280 --> 00:05:45,720
inside.

109
00:05:45,720 --> 00:05:50,450
The first thing you'll notice after the obligatory comments is that this module is also

110
00:05:50,450 --> 00:05:52,120
requiring something else.

111
00:05:52,120 --> 00:05:53,440
It's important to point out,

112
00:05:53,440 --> 00:05:53,760
though,

113
00:05:53,760 --> 00:06:00,090
that variables such as fs that are defined within this module are scoped to this module and

114
00:06:00,090 --> 00:06:01,180
this module alone.

115
00:06:01,180 --> 00:06:03,670
You notice that the jokes object gets created,

116
00:06:03,670 --> 00:06:05,490
a key gets added to it,

117
00:06:05,490 --> 00:06:07,040
and then it gets exported.

118
00:06:07,040 --> 00:06:11,100
But FS is not defined as a key on that object.

119
00:06:11,100 --> 00:06:13,660
So it's not one of the things that gets exported.

120
00:06:13,660 --> 00:06:15,130
But if you look closely,

121
00:06:15,130 --> 00:06:18,540
you'll see that a function defined within F S.

122
00:06:18,540 --> 00:06:23,300
It gets used within the all jokes function on this module.

123
00:06:23,300 --> 00:06:26,650
So you might be asking if f s never gets exported.

124
00:06:26,650 --> 00:06:28,630
Won't this function break?

125
00:06:28,630 --> 00:06:33,450
If another file requires this one and then tries to call the all jokes function?

126
00:06:33,450 --> 00:06:34,310
No,

127
00:06:34,310 --> 00:06:35,150
it won't break.

128
00:06:35,150 --> 00:06:40,840
This is another quirk of how node scopes variables you don't need to export FS.

129
00:06:40,840 --> 00:06:46,400
It's the know J s equivalent of a private object or function within the module and is only

130
00:06:46,400 --> 00:06:48,780
used internally to that module.

131
00:06:48,780 --> 00:06:49,130
If,

132
00:06:49,130 --> 00:06:49,710
however,

133
00:06:49,710 --> 00:06:53,290
the file that requires this one wants to use FS,

134
00:06:53,290 --> 00:06:55,850
then that file would need to require it on its own.

135
00:06:55,850 --> 00:07:00,480
Either that or this file will need to export it directly to that one.

136
00:07:00,480 --> 00:07:03,260
I'm sure all of this consume a bit confusing,

137
00:07:03,260 --> 00:07:07,170
but it will make more and more intuitive sense over time and with repetition,

138
00:07:07,170 --> 00:07:09,190
will be dealing with this issue a lot.

139
00:07:09,190 --> 00:07:14,730
Now let's browse through the repo and try to find this FS library that this file is

140
00:07:14,730 --> 00:07:15,650
importing and using.

141
00:07:15,650 --> 00:07:17,610
Oops,

142
00:07:17,610 --> 00:07:18,430
it's not there.

143
00:07:18,430 --> 00:07:19,490
Is this an oversight?

144
00:07:19,490 --> 00:07:19,970
No,

145
00:07:19,970 --> 00:07:26,760
it's not there because F S is a module that comes standard with no Js as part of their A P

146
00:07:26,760 --> 00:07:27,140
I.

147
00:07:27,140 --> 00:07:30,600
You don't need to download FS or write it yourself,

148
00:07:30,600 --> 00:07:35,220
but you do still need to require or imported and assign it to a variable.

149
00:07:35,220 --> 00:07:36,200
If you want to use it.

150
00:07:36,200 --> 00:07:41,230
Over the course of this lecture series will be building our applications with many native

151
00:07:41,230 --> 00:07:45,180
no Js modules as opposed to 1/3 party NPM modules,

152
00:07:45,180 --> 00:07:47,750
so you'll become very acquainted with these over time.

153
00:07:47,750 --> 00:07:49,090
Now,

154
00:07:49,090 --> 00:07:53,750
what does this node application do before we look in detail?

155
00:07:53,750 --> 00:07:57,170
Let's just run it and see if you've downloaded the code earlier.

156
00:07:57,170 --> 00:08:01,890
Just CD into the directory and type node index dot Js,

157
00:08:01,890 --> 00:08:02,650
then press return.

158
00:08:02,650 --> 00:08:04,080
At this point,

159
00:08:04,080 --> 00:08:08,390
you should be seeing a new joke printed to your console once every second.

160
00:08:08,390 --> 00:08:11,510
Now you can kill the program in OS X.

161
00:08:11,510 --> 00:08:14,840
Just hold down the control key impressed the letters C.

162
00:08:14,840 --> 00:08:19,800
Other platforms will differ so we can see that this is a pretty ridiculous program.

163
00:08:19,800 --> 00:08:21,670
It just tells us random,

164
00:08:21,670 --> 00:08:26,160
terrible jokes one at a time and sometimes due to random chance,

165
00:08:26,160 --> 00:08:28,350
it repeats jokes twice in a row.

166
00:08:28,350 --> 00:08:30,400
Now that we understand the purpose,

167
00:08:30,400 --> 00:08:34,950
let's go back to the primary index dot Js file in the base directory.

168
00:08:34,950 --> 00:08:38,200
We've covered what the comments in dependencies do,

169
00:08:38,200 --> 00:08:40,250
so let's move down from there.

170
00:08:40,250 --> 00:08:45,840
We can see that this file is also built as an object and has keys added to it.

171
00:08:45,840 --> 00:08:48,140
This isn't for any particular reason,

172
00:08:48,140 --> 00:08:52,640
but I find that using this kind of object literal notation OLN,

173
00:08:52,640 --> 00:08:53,860
for all my files,

174
00:08:53,860 --> 00:08:57,400
keeps things cleaner and makes testing easier later on.

175
00:08:57,400 --> 00:09:01,150
The first sub key that gets defined is a config key,

176
00:09:01,150 --> 00:09:02,520
and within that object,

177
00:09:02,520 --> 00:09:09,070
we define a time between jokes variable that we can use later by accessing the app dot

178
00:09:09,070 --> 00:09:11,350
config dot time between jokes.

179
00:09:11,350 --> 00:09:12,160
Keep it.

180
00:09:12,160 --> 00:09:13,300
We keep scrolling down.

181
00:09:13,300 --> 00:09:16,270
We can see that we define two functions.

182
00:09:16,270 --> 00:09:21,570
One that prints of random joked to the console and one that loops indefinitely.

183
00:09:21,570 --> 00:09:24,200
Calling the first function over and over and over.

184
00:09:24,200 --> 00:09:26,310
Let's look at the first function.

185
00:09:26,310 --> 00:09:27,160
First,

186
00:09:27,160 --> 00:09:33,070
it invokes the all jokes function that is part of the Jokes Library and assigns the return

187
00:09:33,070 --> 00:09:34,570
value to a variable.

188
00:09:34,570 --> 00:09:36,250
What's the return value?

189
00:09:36,250 --> 00:09:40,750
Let's look at Libs last jokes slash index dot Js again.

190
00:09:40,750 --> 00:09:45,640
Here we can see that this function simply reads in the content of a joke.

191
00:09:45,640 --> 00:09:48,170
Stop text file from the file system,

192
00:09:48,170 --> 00:09:52,850
splits the content into an array and then returns the result to the caller.

193
00:09:52,850 --> 00:09:55,540
If he opened up the jokes directory,

194
00:09:55,540 --> 00:09:58,850
we can see the jokes dot text files that it reads in.

195
00:09:58,850 --> 00:10:02,510
Now back to the main index dot Js file in the Root directory.

196
00:10:02,510 --> 00:10:03,600
At this point,

197
00:10:03,600 --> 00:10:09,360
the function we were looking at has imported that array of jokes and assigned it to an all

198
00:10:09,360 --> 00:10:10,300
jokes variable.

199
00:10:10,300 --> 00:10:16,020
Then it gets the length of that array and a signs that length to the variable number of

200
00:10:16,020 --> 00:10:16,590
jokes.

201
00:10:16,590 --> 00:10:20,500
Now it needs to pick a random joke out of this array of jokes,

202
00:10:20,500 --> 00:10:23,150
so it gets a random number between one.

203
00:10:23,150 --> 00:10:25,520
And however many jokes were in that array.

204
00:10:25,520 --> 00:10:32,870
It does that by passing one and the number of jokes variable to the get random number

205
00:10:32,870 --> 00:10:37,190
function that is defined within the math dot Js library,

206
00:10:37,190 --> 00:10:40,500
which has been assigned to the math lib variable.

207
00:10:40,500 --> 00:10:47,960
So it calls math lib dot get random number between one and the length of the joke array,

208
00:10:47,960 --> 00:10:52,410
and the resulting random number gets assigned to the variable random number.

209
00:10:52,410 --> 00:10:58,160
Now we can see that this script wants to get the joke of the joke array,

210
00:10:58,160 --> 00:11:00,330
effectively getting a random joke.

211
00:11:00,330 --> 00:11:04,540
But since a raise in JavaScript start with the position called zero,

212
00:11:04,540 --> 00:11:05,300
not one,

213
00:11:05,300 --> 00:11:10,460
we would need to actually get the joke at the end minus one position,

214
00:11:10,460 --> 00:11:12,000
not the position.

215
00:11:12,000 --> 00:11:15,170
That way we have a chance of getting the zeroth joke,

216
00:11:15,170 --> 00:11:19,680
and we don't run the risk of asking for a joke at a position that is one greater than the

217
00:11:19,680 --> 00:11:21,150
maximum position in the Erect.

218
00:11:21,150 --> 00:11:25,520
We select the random joke and assigned it to the variable selected joke,

219
00:11:25,520 --> 00:11:28,260
and then we log selected joke to the console.

220
00:11:28,260 --> 00:11:29,620
So in a nutshell,

221
00:11:29,620 --> 00:11:33,540
this function uses the two libraries required at the top.

222
00:11:33,540 --> 00:11:35,330
To get all the available jokes,

223
00:11:35,330 --> 00:11:41,200
select a random item from the set of jokes and then log that joke to the console Now let's

224
00:11:41,200 --> 00:11:44,510
look at the other function app dot indefinite loop.

225
00:11:44,510 --> 00:11:46,530
This one seems simple enough.

226
00:11:46,530 --> 00:11:52,670
All that does is create an interval that calls the first function above and does that after

227
00:11:52,670 --> 00:11:54,290
every X milliseconds,

228
00:11:54,290 --> 00:11:59,710
where X is what every number ISS set in the config object to find at the top of the file.

229
00:11:59,710 --> 00:12:01,640
Once this function is called,

230
00:12:01,640 --> 00:12:05,910
the printed joke function will be called over and over again indefinitely.

231
00:12:05,910 --> 00:12:10,140
And as we learned earlier in this example at all times,

232
00:12:10,140 --> 00:12:14,390
the No Js event loop will always have something left to do on its to do list.

233
00:12:14,390 --> 00:12:15,400
In this case,

234
00:12:15,400 --> 00:12:20,790
it will always have another printer joke function to call in the future and therefore this

235
00:12:20,790 --> 00:12:24,790
note app will never exit unless some kind of error occurs.

236
00:12:24,790 --> 00:12:25,780
Now,

237
00:12:25,780 --> 00:12:26,550
at this point,

238
00:12:26,550 --> 00:12:28,810
all we've done is defined to functions.

239
00:12:28,810 --> 00:12:31,860
So when no Js starts and reads this file,

240
00:12:31,860 --> 00:12:33,640
it was see those functions defined,

241
00:12:33,640 --> 00:12:34,970
but it won't call them.

242
00:12:34,970 --> 00:12:36,650
It will read in the dependencies,

243
00:12:36,650 --> 00:12:38,240
since they are defined in the tree.

244
00:12:38,240 --> 00:12:44,060
But the apple actually start running because nothing explicitly started the app that is

245
00:12:44,060 --> 00:12:48,410
left up to the final line that actually invokes the looping function.

246
00:12:48,410 --> 00:12:50,360
All it does is call that function,

247
00:12:50,360 --> 00:12:53,700
which in turn calls the other one once every x milliseconds,

248
00:12:53,700 --> 00:12:54,980
1000 milliseconds,

249
00:12:54,980 --> 00:12:55,710
a k a.

250
00:12:55,710 --> 00:12:58,680
One second in this case to illustrate this,

251
00:12:58,680 --> 00:13:03,200
let's comment out the last line so that nobody explicitly calls any functions.

252
00:13:03,200 --> 00:13:04,650
Now let's start the APP.

253
00:13:04,650 --> 00:13:06,630
As you can see,

254
00:13:06,630 --> 00:13:11,140
it returns you right back to the command prompt and doesn't seem to have done anything at

255
00:13:11,140 --> 00:13:11,570
all.

256
00:13:11,570 --> 00:13:12,520
In fact,

257
00:13:12,520 --> 00:13:15,410
it did do something it read in the dependencies.

258
00:13:15,410 --> 00:13:18,080
It pulled the function definitions into memory.

259
00:13:18,080 --> 00:13:19,730
It started up the event loop,

260
00:13:19,730 --> 00:13:24,050
but then there wasn't any asynchronous code to actually invoke these functions.

261
00:13:24,050 --> 00:13:27,020
So nobody lit the proverbial match.

262
00:13:27,020 --> 00:13:30,120
Nothing got the ball rolling after starting the event loop.

263
00:13:30,120 --> 00:13:30,920
It's all ahead.

264
00:13:30,920 --> 00:13:33,670
Nothing left to do and nothing to do in the future.

265
00:13:33,670 --> 00:13:36,150
So it exited all within a split second.

266
00:13:36,150 --> 00:13:37,290
All right.

267
00:13:37,290 --> 00:13:37,560
That,

268
00:13:37,560 --> 00:13:38,200
in a nutshell,

269
00:13:38,200 --> 00:13:39,650
is a node application.

270
00:13:39,650 --> 00:13:40,320
Really?

271
00:13:40,320 --> 00:13:42,000
It's more complicated than it needs to be,

272
00:13:42,000 --> 00:13:45,750
but I want to show you how require statements work in practice.

273
00:13:45,750 --> 00:13:46,290
However,

274
00:13:46,290 --> 00:13:51,140
practically every know J s application you encounter in the wild is going to be more

275
00:13:51,140 --> 00:13:56,590
complicated in this most will contain more files like it package dot Jason that we didn't

276
00:13:56,590 --> 00:13:57,230
include here.

277
00:13:57,230 --> 00:14:01,880
So in the next section we're going to go over many of the common no Js conventions.

278
00:14:01,880 --> 00:14:06,110
You'll find out in the wild from file structure to coding patterns.

279
00:14:06,110 --> 00:14:09,840
We may or may not be using these conventions later on to this chorus,

280
00:14:09,840 --> 00:14:12,230
but it'll be worth it to go over them,

281
00:14:12,230 --> 00:14:16,450
so you can better understand any random no tap that you may encounter.

