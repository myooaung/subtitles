1
00:00:00,000 --> 00:00:09,280
the next service we wanna build is called checks Checks is really the meat of our

2
00:00:09,280 --> 00:00:11,920
application to review what a check is.

3
00:00:11,920 --> 00:00:18,960
A check is basically a task that tells our system Go check this u R L every X number of

4
00:00:18,960 --> 00:00:24,330
seconds and then tell the user the creator of the check whether the U.

5
00:00:24,330 --> 00:00:24,730
R L.

6
00:00:24,730 --> 00:00:25,950
Is up or down.

7
00:00:25,950 --> 00:00:33,550
We're going to allow users to create up to five checks and later on will go about building

8
00:00:33,550 --> 00:00:37,560
the background processes that need to actually preform the checking.

9
00:00:37,560 --> 00:00:38,840
But for now,

10
00:00:38,840 --> 00:00:46,080
all we need to do is create a check service with post get put and elite that allows a user

11
00:00:46,080 --> 00:00:52,790
who has logged in and got a token to create up to five checks and have those checks listed

12
00:00:52,790 --> 00:00:53,670
in his account.

13
00:00:53,670 --> 00:01:02,450
So let's go ahead and get started by modifying index dot Js to include the new checks route

14
00:01:02,450 --> 00:01:02,450
.

15
00:01:02,450 --> 00:01:12,860
Going to say that checks needs to go to handlers that checks.

16
00:01:12,860 --> 00:01:21,140
Then we'll go ahead and open up the handlers file again and start building out these checks

17
00:01:21,140 --> 00:01:21,140
.

18
00:01:21,140 --> 00:01:27,490
I'm gonna scroll all the way down to where we left off from tokens and start building out

19
00:01:27,490 --> 00:01:29,530
the check service.

20
00:01:29,530 --> 00:01:33,140
We're going to set up the primary checks handler,

21
00:01:33,140 --> 00:01:34,730
just like we did the other ones.

22
00:01:34,730 --> 00:01:42,050
So I'm actually going to copy what we did on tokens and just used that down here.

23
00:01:42,050 --> 00:01:45,080
We're gonna see the hand.

24
00:01:45,080 --> 00:01:48,300
There's checks is a function acceptable?

25
00:01:48,300 --> 00:01:49,470
Methods are all the same.

26
00:01:49,470 --> 00:01:50,260
Post get put,

27
00:01:50,260 --> 00:01:50,970
delete,

28
00:01:50,970 --> 00:01:59,850
and it should relay data and call back on to private methods for checks.

29
00:01:59,850 --> 00:02:00,730
Now,

30
00:02:00,730 --> 00:02:05,850
let's have a container for all the checks methods.

31
00:02:05,850 --> 00:02:14,840
And now we need to build out checks,

32
00:02:14,840 --> 00:02:32,300
post the required data for post Going to be a few parameters protocol,

33
00:02:32,300 --> 00:02:32,940
That is,

34
00:02:32,940 --> 00:02:33,580
http.

35
00:02:33,580 --> 00:02:34,610
Or https,

36
00:02:34,610 --> 00:02:35,890
the euro.

37
00:02:35,890 --> 00:02:39,590
That the user wants us to check a method as in post,

38
00:02:39,590 --> 00:02:43,250
get put or delete that we should use when checking this girl.

39
00:02:43,250 --> 00:02:47,240
The success codes Now,

40
00:02:47,240 --> 00:02:52,890
success codes will basically be an array of numbers that we should treat as meaning success

41
00:02:52,890 --> 00:02:52,890
.

42
00:02:52,890 --> 00:02:57,670
So that could be a 200 or to a one or anything that isn't a 500 etcetera.

43
00:02:57,670 --> 00:02:58,800
And lastly,

44
00:02:58,800 --> 00:03:00,170
the time out seconds.

45
00:03:00,170 --> 00:03:04,240
If the euro takes more than X number of seconds,

46
00:03:04,240 --> 00:03:04,690
the time out,

47
00:03:04,690 --> 00:03:05,950
seconds to respond,

48
00:03:05,950 --> 00:03:08,280
we should consider it to be down.

49
00:03:08,280 --> 00:03:12,550
Optional data is none.

50
00:03:12,550 --> 00:03:13,430
Okay,

51
00:03:13,430 --> 00:03:22,250
no handers underscore checks dot Post going to equal function takes it data and co back.

52
00:03:22,250 --> 00:03:29,920
But one thing that we know is that we are going to have to enforce the five check limit on

53
00:03:29,920 --> 00:03:30,800
this post service.

54
00:03:30,800 --> 00:03:33,910
So before we start voting on this post service completely,

55
00:03:33,910 --> 00:03:40,050
let's add the max checks limit to he can fake dot Js.

56
00:03:40,050 --> 00:03:46,320
So we're going to say in both staging and production that max checks,

57
00:03:46,320 --> 00:03:50,970
meaning the maximum matter checks that any user may have on their account is gonna be five

58
00:03:50,970 --> 00:03:50,970
.

59
00:03:50,970 --> 00:03:55,700
Now,

60
00:03:55,700 --> 00:03:56,990
back to handlers.

61
00:03:56,990 --> 00:03:57,260
Dutch.

62
00:03:57,260 --> 00:03:57,870
Yes,

63
00:03:57,870 --> 00:04:00,600
It wouldn't keep voting out this service.

64
00:04:00,600 --> 00:04:06,350
The first thing that we're gonna need to do within the service is validate all these inputs

65
00:04:06,350 --> 00:04:06,350
.

66
00:04:06,350 --> 00:04:12,910
We're going to do it the same way that we did posts for the other services.

67
00:04:12,910 --> 00:04:20,920
So I mean a copy one of this sanity checking strings that we did before pace that down here

68
00:04:20,920 --> 00:04:20,920
,

69
00:04:20,920 --> 00:04:22,350
but instead,

70
00:04:22,350 --> 00:04:23,300
for us,

71
00:04:23,300 --> 00:04:28,730
that's going to be protocol equals type of data.

72
00:04:28,730 --> 00:04:32,890
Payload protocol equals string.

73
00:04:32,890 --> 00:04:37,850
And rather than checking the length,

74
00:04:37,850 --> 00:04:46,850
we want to say that it should be one of these two options in this array.

75
00:04:46,850 --> 00:04:49,750
So we want to say that within this array,

76
00:04:49,750 --> 00:04:53,550
the index of data,

77
00:04:53,550 --> 00:04:58,830
a load protocol should be greater than one.

78
00:04:58,830 --> 00:04:59,700
In other words,

79
00:04:59,700 --> 00:05:02,100
we don't care of his http or https,

80
00:05:02,100 --> 00:05:02,740
as long is.

81
00:05:02,740 --> 00:05:04,370
It is one of these two,

82
00:05:04,370 --> 00:05:05,390
and if it is,

83
00:05:05,390 --> 00:05:10,510
we'll go ahead and use it or deported falls.

84
00:05:10,510 --> 00:05:13,150
Now we want to set up the URL.

85
00:05:13,150 --> 00:05:15,720
The earl,

86
00:05:15,720 --> 00:05:19,270
excluding the protocol should be a string,

87
00:05:19,270 --> 00:05:22,350
and it should have a length.

88
00:05:22,350 --> 00:05:28,250
We were to say that length of the girl is greater than zero.

89
00:05:28,250 --> 00:05:30,560
If it is,

90
00:05:30,560 --> 00:05:33,740
take it or default to false for method.

91
00:05:33,740 --> 00:05:36,190
We're going to do something similar to protocol.

92
00:05:36,190 --> 00:05:41,460
So I'm going to pace that down here from Method needs to be a string,

93
00:05:41,460 --> 00:05:46,510
and it needs to be one of thes options in disarray.

94
00:05:46,510 --> 00:05:48,270
Post get,

95
00:05:48,270 --> 00:05:54,950
put or delete and the index of data pay.

96
00:05:54,950 --> 00:05:56,950
The method should be greater than one.

97
00:05:56,950 --> 00:05:58,350
If so,

98
00:05:58,350 --> 00:06:02,860
we use it or default.

99
00:06:02,860 --> 00:06:07,250
False success codes is going to be a little bit different,

100
00:06:07,250 --> 00:06:08,650
but will use this as a template.

101
00:06:08,650 --> 00:06:21,950
Success codes needs to equal type of object,

102
00:06:21,950 --> 00:06:34,590
and it needs to be an instance off and Ray,

103
00:06:34,590 --> 00:06:38,650
and it needs to have a length greater than zero.

104
00:06:38,650 --> 00:06:49,350
If so,

105
00:06:49,350 --> 00:06:55,560
we'll go ahead and use it or would have fought divorce time out.

106
00:06:55,560 --> 00:06:57,980
Seconds is the last one we need to do.

107
00:06:57,980 --> 00:07:02,360
I'm going to copy your l Use that again.

108
00:07:02,360 --> 00:07:07,050
Time out seconds is actually going to need to be a number.

109
00:07:07,050 --> 00:07:15,950
And we're going to need it to be a whole number.

110
00:07:15,950 --> 00:07:33,140
And we're going to need it to be greater than or equal to one and less than or equal to

111
00:07:33,140 --> 00:07:33,750
five.

112
00:07:33,750 --> 00:07:43,950
If so,

113
00:07:43,950 --> 00:07:51,270
we'll use it or default.

114
00:07:51,270 --> 00:07:51,870
Divorce.

115
00:07:51,870 --> 00:07:53,170
All right.

116
00:07:53,170 --> 00:07:55,020
We validated all the inputs.

117
00:07:55,020 --> 00:07:58,800
Now we want to only move on with the logic if they're all valid.

118
00:07:58,800 --> 00:08:12,570
So if protocol and you are l and method and success codes and time out seconds,

119
00:08:12,570 --> 00:08:15,550
then we move on.

120
00:08:15,550 --> 00:08:31,580
Otherwise we're going to return an heir to the requester that says 400 air facing required

121
00:08:31,580 --> 00:08:35,880
inputs or inputs are invalid.

122
00:08:35,880 --> 00:08:37,700
Okay,

123
00:08:37,700 --> 00:08:42,150
but assuming that payload is valid,

124
00:08:42,150 --> 00:08:43,660
we'll move on.

125
00:08:43,660 --> 00:08:50,270
The next thing that we need to do is check that the user has provided a token in the

126
00:08:50,270 --> 00:08:54,700
headers and then we need to look up the user by reading that token.

127
00:08:54,700 --> 00:08:58,930
We don't want to allow anonymous users to create checks.

128
00:08:58,930 --> 00:09:02,200
This has to be something that you have to be logged in to do.

129
00:09:02,200 --> 00:09:09,080
So we are going to get the token from the headers.

130
00:09:09,080 --> 00:09:14,600
We're going to use the same logic that we did before this.

131
00:09:14,600 --> 00:09:15,250
Wear it again,

132
00:09:15,250 --> 00:09:20,380
Token because type of data,

133
00:09:20,380 --> 00:09:21,200
headers token,

134
00:09:21,200 --> 00:09:30,620
equal strength data hitters,

135
00:09:30,620 --> 00:09:32,060
Token force.

136
00:09:32,060 --> 00:09:34,550
All right,

137
00:09:34,550 --> 00:09:43,350
now we want to look up the user by reading the token,

138
00:09:43,350 --> 00:09:49,650
so we're going to try to read that token that they provided from the file system.

139
00:09:49,650 --> 00:09:55,700
So we're gonna say that data read we want to read from the tokens collection and the token

140
00:09:55,700 --> 00:10:00,950
i d that we're reading is identified by the token variable they're gonna pass back in here

141
00:10:00,950 --> 00:10:03,280
and token data.

142
00:10:03,280 --> 00:10:04,150
If it exists,

143
00:10:04,150 --> 00:10:07,620
it's possible that it doesn't exist.

144
00:10:07,620 --> 00:10:13,150
So we are only going to continue on if there's not an air and they're in stoking data.

145
00:10:13,150 --> 00:10:15,650
And if there isn't,

146
00:10:15,650 --> 00:10:22,320
they need to call back for all three to the user,

147
00:10:22,320 --> 00:10:27,470
which is the status code for not authorized on the assumption that there is talking data.

148
00:10:27,470 --> 00:10:30,050
We're going to get the user's phone number.

149
00:10:30,050 --> 00:10:31,730
So far,

150
00:10:31,730 --> 00:10:39,670
user phone equals token data dot Now that we know the user's phone,

151
00:10:39,670 --> 00:10:41,450
we can look up the user.

152
00:10:41,450 --> 00:10:43,260
Look,

153
00:10:43,260 --> 00:10:46,540
what user data we're gonna say.

154
00:10:46,540 --> 00:10:47,300
Data read.

155
00:10:47,300 --> 00:10:50,650
We're gonna read from the user service user phone,

156
00:10:50,650 --> 00:10:58,450
and then they're gonna passes back an air and user data.

157
00:10:58,450 --> 00:11:00,890
If that user exists now,

158
00:11:00,890 --> 00:11:02,350
just like in the last step,

159
00:11:02,350 --> 00:11:06,550
we want to make sure that there is no air and there is user data.

160
00:11:06,550 --> 00:11:14,900
Otherwise we're going to call back for three not authorized because they provide us a token

161
00:11:14,900 --> 00:11:14,900
,

162
00:11:14,900 --> 00:11:17,400
But it wasn't really or didn't correspond to a real user.

163
00:11:17,400 --> 00:11:20,140
But if there is good user data,

164
00:11:20,140 --> 00:11:24,580
then we need to identify which checks the user already has.

165
00:11:24,580 --> 00:11:25,170
Now,

166
00:11:25,170 --> 00:11:28,110
if we look at the user data stored here,

167
00:11:28,110 --> 00:11:30,510
there's no checks on.

168
00:11:30,510 --> 00:11:31,920
This object is just first name,

169
00:11:31,920 --> 00:11:32,440
last name,

170
00:11:32,440 --> 00:11:33,200
phone hash,

171
00:11:33,200 --> 00:11:35,310
password and toss agreement.

172
00:11:35,310 --> 00:11:35,850
1,000,000,000.

173
00:11:35,850 --> 00:11:38,520
That's the whole user object.

174
00:11:38,520 --> 00:11:41,780
But now that users are going to be able to create checks,

175
00:11:41,780 --> 00:11:47,710
we are going to need to add another key onto this object called checks,

176
00:11:47,710 --> 00:11:51,880
and we're going to store an array of checks by check I.

177
00:11:51,880 --> 00:11:52,160
D.

178
00:11:52,160 --> 00:11:57,090
S on this user so that to know which checks belong to which user we just need to look up

179
00:11:57,090 --> 00:12:00,080
the user and see which checks are attached to his object.

180
00:12:00,080 --> 00:12:02,700
So when we looking up this user,

181
00:12:02,700 --> 00:12:08,650
we need to just see if the checks key exists and if there's anything to find there.

182
00:12:08,650 --> 00:12:17,200
So we're going to say that the user checks equals type of user data,

183
00:12:17,200 --> 00:12:18,270
don't checks,

184
00:12:18,270 --> 00:12:25,310
equals object and user data.

185
00:12:25,310 --> 00:12:29,150
Dot checks is an instance of Ray.

186
00:12:29,150 --> 00:12:30,920
If so,

187
00:12:30,920 --> 00:12:37,940
user data checks we'll use or we're going to default to an empty array.

188
00:12:37,940 --> 00:12:44,090
We're going to be adding the new check to the users existing array or their brand new empty

189
00:12:44,090 --> 00:12:46,660
array if they don't already have any checks.

190
00:12:46,660 --> 00:12:47,110
Now,

191
00:12:47,110 --> 00:12:57,260
we need to actually verify that the user has less than the number of Max checks per user.

192
00:12:57,260 --> 00:13:02,710
So remember we just configured here that the Max checks is five.

193
00:13:02,710 --> 00:13:05,900
So before we allow this user to create another check,

194
00:13:05,900 --> 00:13:09,400
we need to make sure that he doesn't already have the max.

195
00:13:09,400 --> 00:13:18,700
We're going to say F user checks length is smaller,

196
00:13:18,700 --> 00:13:22,140
then can fig max checks.

197
00:13:22,140 --> 00:13:24,040
You can continue.

198
00:13:24,040 --> 00:13:25,830
So the Max Texas five,

199
00:13:25,830 --> 00:13:27,880
which means if you have less than five right now,

200
00:13:27,880 --> 00:13:29,650
we're going to allow you to create another one.

201
00:13:29,650 --> 00:13:30,740
Otherwise,

202
00:13:30,740 --> 00:13:35,380
we need to stop you here until you delete one of your checks.

203
00:13:35,380 --> 00:13:39,040
So if they already have the max,

204
00:13:39,040 --> 00:13:48,290
then we need to return error to them saying call back 400 Here.

205
00:13:48,290 --> 00:13:59,630
The user already has the maximum number of checks.

206
00:13:59,630 --> 00:14:05,850
And just to remind three Quester what that number is,

207
00:14:05,850 --> 00:14:15,750
we're going to spit that out to them in parentheses.

208
00:14:15,750 --> 00:14:19,150
If they haven't exceeded the max number of checks,

209
00:14:19,150 --> 00:14:22,260
then we can go ahead and create the new Jack.

210
00:14:22,260 --> 00:14:32,380
So the first thing that we need to do is create a random i d for the check.

211
00:14:32,380 --> 00:14:38,880
And this we're going to do the same way that we created random I ds for the tokens were

212
00:14:38,880 --> 00:14:48,370
going to say that the check I d equals helpers create random string and a length of 20.

213
00:14:48,370 --> 00:15:01,500
Now we want to create the Czech object and include the users phone number.

214
00:15:01,500 --> 00:15:04,080
The phone number is how we uniquely identify of user.

215
00:15:04,080 --> 00:15:08,190
So we're going to store each check with a reference to its creator,

216
00:15:08,190 --> 00:15:12,900
and we're also going to make sure that these creators have a reference on their object to

217
00:15:12,900 --> 00:15:13,990
each of their checks.

218
00:15:13,990 --> 00:15:18,420
This is a no sequel way of story things.

219
00:15:18,420 --> 00:15:22,150
This is how you generally might want to do things with key value stores.

220
00:15:22,150 --> 00:15:25,250
This is not the way that you would use a relational database,

221
00:15:25,250 --> 00:15:31,460
but if you're using something like readiness or Mongo or any kind of no sequel than this

222
00:15:31,460 --> 00:15:33,730
pattern will probably be familiar to you.

223
00:15:33,730 --> 00:15:41,550
So we're going to say that the check object is this big object with a bunch of keys on it.

224
00:15:41,550 --> 00:15:46,920
The I d of this check is gonna be check.

225
00:15:46,920 --> 00:15:57,990
I d Use your phone is going to be used from protocol is going to be protocol.

226
00:15:57,990 --> 00:16:01,850
You're always you're ill.

227
00:16:01,850 --> 00:16:09,130
Method is method success codes,

228
00:16:09,130 --> 00:16:13,830
his access codes and time out.

229
00:16:13,830 --> 00:16:14,550
Seconds.

230
00:16:14,550 --> 00:16:15,900
It is time out.

231
00:16:15,900 --> 00:16:19,490
Seconds later on.

232
00:16:19,490 --> 00:16:24,650
There will be more keys added to these objects as our background workers start to process

233
00:16:24,650 --> 00:16:24,970
them.

234
00:16:24,970 --> 00:16:26,280
But for now,

235
00:16:26,280 --> 00:16:28,020
they're just the keys that it got.

236
00:16:28,020 --> 00:16:28,650
Start with.

237
00:16:28,650 --> 00:16:30,260
No,

238
00:16:30,260 --> 00:16:31,170
we need to persist.

239
00:16:31,170 --> 00:16:32,510
This new object to disk,

240
00:16:32,510 --> 00:16:36,090
we're going to save data create.

241
00:16:36,090 --> 00:16:42,150
We don't want to create something in the checks collection.

242
00:16:42,150 --> 00:16:44,860
And before I continue with this,

243
00:16:44,860 --> 00:16:53,060
let me just make that directory because our data border does not include that.

244
00:16:53,060 --> 00:16:57,510
So I want to make the directory data checks,

245
00:16:57,510 --> 00:16:58,640
and there it is.

246
00:16:58,640 --> 00:17:00,350
So that's where these things would get stored.

247
00:17:00,350 --> 00:17:05,140
So when a story in the Czechs collection and all be storing it by check,

248
00:17:05,140 --> 00:17:05,620
I d.

249
00:17:05,620 --> 00:17:14,030
Since that'll be unique and I will be storing the check object and that's just gonna pass

250
00:17:14,030 --> 00:17:15,370
me back an error,

251
00:17:15,370 --> 00:17:19,350
I only want to continue if there is no air.

252
00:17:19,350 --> 00:17:22,960
If there is an air,

253
00:17:22,960 --> 00:17:26,390
I want to call back and air to the requester,

254
00:17:26,390 --> 00:17:39,350
saying 500 I could not create the new check.

255
00:17:39,350 --> 00:17:43,040
So now that check has been created.

256
00:17:43,040 --> 00:17:45,840
But before we return response to the user,

257
00:17:45,840 --> 00:17:47,670
there's another step that we need to take.

258
00:17:47,670 --> 00:17:49,510
We actually need to add this.

259
00:17:49,510 --> 00:17:58,360
Do check i d to the users object and then update The users object with this new array of

260
00:17:58,360 --> 00:17:59,060
their checks,

261
00:17:59,060 --> 00:18:00,850
so we want to say,

262
00:18:00,850 --> 00:18:04,510
Add the check i d.

263
00:18:04,510 --> 00:18:06,060
To the users.

264
00:18:06,060 --> 00:18:08,590
Object already have the users object.

265
00:18:08,590 --> 00:18:19,590
So we're going to say that user data chicks equals user checks because remember that we

266
00:18:19,590 --> 00:18:27,050
have their existing checks or possibly this new empty array saved as a variable user checks

267
00:18:27,050 --> 00:18:27,050
,

268
00:18:27,050 --> 00:18:32,180
so we just want to sync up that variable to the user object dot checks.

269
00:18:32,180 --> 00:18:40,550
Now that sink tup we can do the addition of our new check I d So we want to say user data

270
00:18:40,550 --> 00:18:43,380
dot checks push.

271
00:18:43,380 --> 00:18:47,260
So I'm adding to their array Were pushing on the check i d.

272
00:18:47,260 --> 00:18:55,860
So now that user data dot checks contains possibly just an array with one check I d or all

273
00:18:55,860 --> 00:18:56,720
of their old check I.

274
00:18:56,720 --> 00:18:57,010
D.

275
00:18:57,010 --> 00:18:58,260
S with this new one added.

276
00:18:58,260 --> 00:19:04,960
And now we actually need to save the new user data.

277
00:19:04,960 --> 00:19:11,550
So we're gonna call data update users.

278
00:19:11,550 --> 00:19:15,260
We're gonna update it by user phone.

279
00:19:15,260 --> 00:19:19,570
We're going to be updating with user data,

280
00:19:19,570 --> 00:19:21,760
which is all of their new data.

281
00:19:21,760 --> 00:19:23,950
They're gonna passes back and error,

282
00:19:23,950 --> 00:19:32,480
and if there's not an error will continue Otherwise,

283
00:19:32,480 --> 00:19:34,360
Well,

284
00:19:34,360 --> 00:19:51,050
we turn that air to the user saying air could update the user with the new check if

285
00:19:51,050 --> 00:19:51,980
everything was fine.

286
00:19:51,980 --> 00:19:57,840
We want to return the data about the new check to the requester.

287
00:19:57,840 --> 00:19:59,400
So we're going to call back,

288
00:19:59,400 --> 00:20:01,160
not just a 200.

289
00:20:01,160 --> 00:20:02,790
What?

290
00:20:02,790 --> 00:20:10,470
We're gonna call back the whole check object this one back to the requester.

291
00:20:10,470 --> 00:20:16,370
So they create something they don't know what that new check I d is unless we tell them.

292
00:20:16,370 --> 00:20:18,840
So we're going to send back this check,

293
00:20:18,840 --> 00:20:23,070
object to them to let them know what this whole object looks like now that it's getting

294
00:20:23,070 --> 00:20:23,480
stored.

295
00:20:23,480 --> 00:20:25,090
All right,

296
00:20:25,090 --> 00:20:31,140
so that is handlers checks dot Post we can save that.

297
00:20:31,140 --> 00:20:36,670
Now I'm going to try to start up this server and we can test out the service.

298
00:20:36,670 --> 00:20:45,390
Testing this out is going to be a little bit more complicated because this service is

299
00:20:45,390 --> 00:20:46,250
authenticated.

300
00:20:46,250 --> 00:20:49,230
So I'm going to need to recreate a token.

301
00:20:49,230 --> 00:20:57,430
The same way that I did before just created a token for this user one of the frog 68 And

302
00:20:57,430 --> 00:21:05,490
this new token is that so Now I'm going to create another request,

303
00:21:05,490 --> 00:21:08,080
but this is going to be going to the check service,

304
00:21:08,080 --> 00:21:09,660
and it's going to have a header,

305
00:21:09,660 --> 00:21:14,650
which includes the token that I just got.

306
00:21:14,650 --> 00:21:18,260
Now I need to form the payload that I want,

307
00:21:18,260 --> 00:21:25,210
and we're going to use all of these same things that we expected to use you to say protocol

308
00:21:25,210 --> 00:21:25,210
.

309
00:21:25,210 --> 00:21:26,090
You are all methods,

310
00:21:26,090 --> 00:21:27,320
success codes and time out.

311
00:21:27,320 --> 00:21:27,890
Seconds.

312
00:21:27,890 --> 00:21:35,080
So we're gonna say protocol is,

313
00:21:35,080 --> 00:21:35,910
Http,

314
00:21:35,910 --> 00:22:03,460
your l is google dot com method is get success codes 200 or to a one time out seconds is

315
00:22:03,460 --> 00:22:03,850
three.

316
00:22:03,850 --> 00:22:05,530
All right,

317
00:22:05,530 --> 00:22:06,850
so I'm gonna send this off.

318
00:22:06,850 --> 00:22:13,330
I was hoping to get a 200 back,

319
00:22:13,330 --> 00:22:14,500
but I got a 400 back,

320
00:22:14,500 --> 00:22:16,590
which means something's not quite right.

321
00:22:16,590 --> 00:22:18,390
And if we look at it,

322
00:22:18,390 --> 00:22:21,910
we can see this is likely the issue here.

323
00:22:21,910 --> 00:22:24,850
I'm spelling success wrong.

324
00:22:24,850 --> 00:22:28,050
So let me add a c here.

325
00:22:28,050 --> 00:22:33,450
Make sure that these are all correct.

326
00:22:33,450 --> 00:22:41,380
And now when we go down to success codes,

327
00:22:41,380 --> 00:22:44,050
we need to spell it right over there as well.

328
00:22:44,050 --> 00:22:47,850
Okay,

329
00:22:47,850 --> 00:22:50,350
so that should be everywhere.

330
00:22:50,350 --> 00:22:52,760
Start this back up,

331
00:22:52,760 --> 00:23:01,520
send it again and looks like it crashed because config is not defined.

332
00:23:01,520 --> 00:23:08,750
Which means we need to make sure that handlers has a reference to the config file,

333
00:23:08,750 --> 00:23:10,050
which it doesn't so far,

334
00:23:10,050 --> 00:23:14,080
so config equals can thick.

335
00:23:14,080 --> 00:23:14,910
All right,

336
00:23:14,910 --> 00:23:17,050
let's try to start this up again.

337
00:23:17,050 --> 00:23:23,910
We got another crash that says check.

338
00:23:23,910 --> 00:23:24,370
I d.

339
00:23:24,370 --> 00:23:25,400
Is not defined.

340
00:23:25,400 --> 00:23:26,550
Let's go down there.

341
00:23:26,550 --> 00:23:37,510
That is because check i d has a capital I but this one does not.

342
00:23:37,510 --> 00:23:38,350
Okay.

343
00:23:38,350 --> 00:23:41,090
Had a few bugs here that started up again.

344
00:23:41,090 --> 00:23:42,160
See what we can get.

345
00:23:42,160 --> 00:23:43,780
All right,

346
00:23:43,780 --> 00:23:48,230
Now we're getting a 200 back so we can see that this is a new I.

347
00:23:48,230 --> 00:23:48,540
D.

348
00:23:48,540 --> 00:23:50,090
That was automatically created.

349
00:23:50,090 --> 00:23:54,160
And this is the phone number of the user who created this check.

350
00:23:54,160 --> 00:23:55,890
It's with protocol.

351
00:23:55,890 --> 00:23:56,530
Http.

352
00:23:56,530 --> 00:23:58,780
It's to that girl is a get these air.

353
00:23:58,780 --> 00:24:02,070
The optional success codes and time out seconds is three.

354
00:24:02,070 --> 00:24:08,070
So let's send this again on certain again.

355
00:24:08,070 --> 00:24:12,240
This user should have three checks on their account now.

356
00:24:12,240 --> 00:24:15,120
So if we go look at this user,

357
00:24:15,120 --> 00:24:21,350
we should see checks is an array of three.

358
00:24:21,350 --> 00:24:23,470
Now,

359
00:24:23,470 --> 00:24:29,100
let's create 1/4 1 and the 5th 1 Now it shouldn't let us create this.

360
00:24:29,100 --> 00:24:30,570
61 Let's see what happens.

361
00:24:30,570 --> 00:24:31,610
Alright,

362
00:24:31,610 --> 00:24:33,090
400 bad requests.

363
00:24:33,090 --> 00:24:35,740
User already has the maximum number of checks.

364
00:24:35,740 --> 00:24:37,450
We go back to the user object,

365
00:24:37,450 --> 00:24:43,320
we can see he has 12345 checks on account.

366
00:24:43,320 --> 00:24:46,120
And that is all the checks that you see here.

367
00:24:46,120 --> 00:24:49,720
So this post service seems to be working correctly.

368
00:24:49,720 --> 00:24:53,050
Let's move on to the get service.

369
00:24:53,050 --> 00:25:05,750
So forget we're going to say that they require data is just the i d similar to the other

370
00:25:05,750 --> 00:25:06,580
services.

371
00:25:06,580 --> 00:25:08,160
Optional data?

372
00:25:08,160 --> 00:25:10,850
None.

373
00:25:10,850 --> 00:25:14,700
Now we want to form this,

374
00:25:14,700 --> 00:25:19,110
but we can use a lot from some of the previous ones that we created.

375
00:25:19,110 --> 00:25:28,360
I'll grab the one from users since that had a similar level of validation happening.

376
00:25:28,360 --> 00:25:32,090
All right,

377
00:25:32,090 --> 00:25:37,700
so now we want to say handlers checks get takes data in a callback,

378
00:25:37,700 --> 00:25:42,260
and the first thing we need to do is check that the i d is valid.

379
00:25:42,260 --> 00:25:47,550
So we're going to say that i d equals query string object.

380
00:25:47,550 --> 00:25:55,480
I d equals string that the length should equal 20 and if it does,

381
00:25:55,480 --> 00:25:58,370
will use it or deported false.

382
00:25:58,370 --> 00:26:00,520
If it isn't valid,

383
00:26:00,520 --> 00:26:02,260
i d String will continue.

384
00:26:02,260 --> 00:26:03,280
Otherwise,

385
00:26:03,280 --> 00:26:04,390
we will call back.

386
00:26:04,390 --> 00:26:05,920
That is missing required field.

387
00:26:05,920 --> 00:26:08,760
Now we are going to want to get the token from the headers.

388
00:26:08,760 --> 00:26:14,690
But first we need to figure out which user created this check and if the check exists So

389
00:26:14,690 --> 00:26:15,950
before we do that,

390
00:26:15,950 --> 00:26:19,050
we want to look up check.

391
00:26:19,050 --> 00:26:26,330
So we're going to say data read checks,

392
00:26:26,330 --> 00:26:29,120
I d.

393
00:26:29,120 --> 00:26:34,290
So we're looking in the Czechs collection by the idea that the user just sent and they're

394
00:26:34,290 --> 00:26:37,820
going to send us back error and checked it.

395
00:26:37,820 --> 00:26:48,350
So if there is no air and there is check data,

396
00:26:48,350 --> 00:26:50,350
we want to continue,

397
00:26:50,350 --> 00:26:54,590
Otherwise we're going to call back before four to the user.

398
00:26:54,590 --> 00:26:55,480
Now,

399
00:26:55,480 --> 00:26:59,760
we can move this stuff up inside here,

400
00:26:59,760 --> 00:27:03,710
but we are going to modify a bunch of it.

401
00:27:03,710 --> 00:27:08,800
So we do want to get the token that sent the request.

402
00:27:08,800 --> 00:27:12,120
So it's token getting from the headers object.

403
00:27:12,120 --> 00:27:19,850
And now we want to verify that the given token is valid and belongs to the user who created

404
00:27:19,850 --> 00:27:20,380
the check.

405
00:27:20,380 --> 00:27:35,680
So we're gonna use that same tokens.

406
00:27:35,680 --> 00:27:38,660
Verify token helper that we created before.

407
00:27:38,660 --> 00:27:42,470
So handlers tokens verify Token.

408
00:27:42,470 --> 00:27:44,850
We're gonna pass it token.

409
00:27:44,850 --> 00:27:46,100
And then,

410
00:27:46,100 --> 00:27:47,480
rather than passing it,

411
00:27:47,480 --> 00:27:48,350
phone variable,

412
00:27:48,350 --> 00:27:49,280
we're passing it.

413
00:27:49,280 --> 00:27:52,850
Check data dot user phone.

414
00:27:52,850 --> 00:27:54,230
Remember,

415
00:27:54,230 --> 00:28:01,550
each check is storing a key called user phone that tells us which user created that check.

416
00:28:01,550 --> 00:28:08,750
So we are verifying that the token in the headers belongs to the same user who created the

417
00:28:08,750 --> 00:28:14,930
check that we're looking up right now and we're gonna pass us back whether or not the token

418
00:28:14,930 --> 00:28:15,800
is valid.

419
00:28:15,800 --> 00:28:18,850
So then we're going to say if the token is valid,

420
00:28:18,850 --> 00:28:27,760
the next thing we need to do is just return that check data to the user who is trying to

421
00:28:27,760 --> 00:28:28,210
look it up.

422
00:28:28,210 --> 00:28:31,860
So we don't need to do any of this stuff here.

423
00:28:31,860 --> 00:28:34,350
We're just going to say if token is valid,

424
00:28:34,350 --> 00:28:37,630
return the cheque data.

425
00:28:37,630 --> 00:28:46,170
So we're going to call back 200 and the check data that the user asked for.

426
00:28:46,170 --> 00:28:48,140
If the token isn't valid,

427
00:28:48,140 --> 00:28:57,580
we're gonna call back just 403 All right,

428
00:28:57,580 --> 00:28:59,110
clean this up a little bit.

429
00:28:59,110 --> 00:28:59,790
Well,

430
00:28:59,790 --> 00:29:00,770
hadn't saved that.

431
00:29:00,770 --> 00:29:11,970
Restart the app and see if I can use this same token to do it get request and get one of

432
00:29:11,970 --> 00:29:14,800
the checks that we created a moment ago.

433
00:29:14,800 --> 00:29:18,790
So I'm going to turn this into a get request,

434
00:29:18,790 --> 00:29:23,620
and I am going to say that I want to look up one of thes ideas.

435
00:29:23,620 --> 00:29:25,760
Let's grab one of the ideas here.

436
00:29:25,760 --> 00:29:29,020
I want to look a check.

437
00:29:29,020 --> 00:29:32,130
I d ending in fl two.

438
00:29:32,130 --> 00:29:33,870
There we go.

439
00:29:33,870 --> 00:29:35,290
I got a 200 back.

440
00:29:35,290 --> 00:29:40,860
If I left off this token and try to send the request,

441
00:29:40,860 --> 00:29:42,260
I get a four or three back.

442
00:29:42,260 --> 00:29:44,440
If I leave on the token,

443
00:29:44,440 --> 00:29:46,850
but change it to something that doesn't exist.

444
00:29:46,850 --> 00:29:49,200
I get a four or four.

445
00:29:49,200 --> 00:29:50,440
Otherwise,

446
00:29:50,440 --> 00:29:51,260
everything's fine.

447
00:29:51,260 --> 00:29:52,780
All right.

448
00:29:52,780 --> 00:29:54,410
Now that they get is working,

449
00:29:54,410 --> 00:30:03,510
we can move on to put back to the handlers file.

450
00:30:03,510 --> 00:30:07,450
Now,

451
00:30:07,450 --> 00:30:08,770
as far as put goes,

452
00:30:08,770 --> 00:30:14,780
we're going to allow the user to change any of the things that they set when they created

453
00:30:14,780 --> 00:30:15,780
the check in the first place.

454
00:30:15,780 --> 00:30:17,560
The protocol you are l method success,

455
00:30:17,560 --> 00:30:17,840
coz,

456
00:30:17,840 --> 00:30:18,820
or time out seconds.

457
00:30:18,820 --> 00:30:20,760
But all of those will be optional.

458
00:30:20,760 --> 00:30:23,820
The only required data will be the i D.

459
00:30:23,820 --> 00:30:27,100
But one of the optional things must be sent as well.

460
00:30:27,100 --> 00:30:34,350
So checks put required data.

461
00:30:34,350 --> 00:30:35,430
His i.

462
00:30:35,430 --> 00:30:35,840
D.

463
00:30:35,840 --> 00:30:45,790
Optional data protocol.

464
00:30:45,790 --> 00:30:47,200
You are ill.

465
00:30:47,200 --> 00:30:49,770
Method six s codes.

466
00:30:49,770 --> 00:30:51,180
Time out.

467
00:30:51,180 --> 00:30:54,450
Seconds one must be sent.

468
00:30:54,450 --> 00:30:56,810
All right,

469
00:30:56,810 --> 00:31:00,210
now let's create this Put service handlers.

470
00:31:00,210 --> 00:31:07,950
Checks put is a function that takes data call back.

471
00:31:07,950 --> 00:31:15,830
Now we want to check for the required field and then check for the optional fields.

472
00:31:15,830 --> 00:31:19,360
This feels a lot like the put that we did above.

473
00:31:19,360 --> 00:31:22,950
So I'm going to grab the put that we did too.

474
00:31:22,950 --> 00:31:29,350
Users and copy some stuff from there.

475
00:31:29,350 --> 00:31:41,660
So first we want to check for the required field is going to be the I D.

476
00:31:41,660 --> 00:31:49,280
So type of data payload string data payload I d tram length equals 20.

477
00:31:49,280 --> 00:31:55,550
Take it or we deported to false and then the optional fields are going to be the same.

478
00:31:55,550 --> 00:31:56,150
Actually,

479
00:31:56,150 --> 00:31:58,980
rather than using this first name that I copied down,

480
00:31:58,980 --> 00:32:07,710
I'm going to grab the same validation that we did for Post because these are all the same.

481
00:32:07,710 --> 00:32:10,220
And it's still occurring within the payload,

482
00:32:10,220 --> 00:32:11,740
not within the query string object.

483
00:32:11,740 --> 00:32:13,550
So there we go.

484
00:32:13,550 --> 00:32:18,780
We've gotten all those and now we want to make sure that the I d is valid.

485
00:32:18,780 --> 00:32:30,000
So if I d continual otherwise callback of 400 to the user saying missing required field.

486
00:32:30,000 --> 00:32:45,260
Now we want to make sure that they have included one of the optional fields or more.

487
00:32:45,260 --> 00:33:04,450
So we're going to say,

488
00:33:04,450 --> 00:33:10,660
if protocol or euro or method,

489
00:33:10,660 --> 00:33:16,050
we're success codes four time out seconds it's sent,

490
00:33:16,050 --> 00:33:17,690
then continue.

491
00:33:17,690 --> 00:33:18,920
Otherwise,

492
00:33:18,920 --> 00:33:28,550
we're gonna call back another 400 telling the user missing fields to update.

493
00:33:28,550 --> 00:33:33,360
If they did include at least one field update,

494
00:33:33,360 --> 00:33:36,160
then we'll continue by looking up the check.

495
00:33:36,160 --> 00:33:47,980
So we're going to dio data read to the Czechs collection by I D.

496
00:33:47,980 --> 00:33:54,550
They're gonna passes back and air and check data.

497
00:33:54,550 --> 00:34:00,950
If there is no air and there is checked,

498
00:34:00,950 --> 00:34:04,260
data will continue.

499
00:34:04,260 --> 00:34:12,190
Otherwise we're gonna call back and heir to the requester,

500
00:34:12,190 --> 00:34:18,350
saying there check I d did not exist.

501
00:34:18,350 --> 00:34:32,310
Now we need to do similar token checking that we did on the last one.

502
00:34:32,310 --> 00:34:35,560
So we're going to get the token that sent the requests.

503
00:34:35,560 --> 00:34:39,350
We can pretty much copy this logic from here.

504
00:34:39,350 --> 00:34:46,050
We're getting the token from the headers,

505
00:34:46,050 --> 00:34:51,620
and then we're verifying that the given token is valid and belongs to the user who created

506
00:34:51,620 --> 00:34:59,460
the check by comparing the token to check data that we got from here dot user phone.

507
00:34:59,460 --> 00:35:00,920
Now,

508
00:35:00,920 --> 00:35:03,050
I just need to close some of these brackets.

509
00:35:03,050 --> 00:35:08,610
So if the token data is not valid,

510
00:35:08,610 --> 00:35:11,590
we're going to call that four or three.

511
00:35:11,590 --> 00:35:14,250
If the token data is valid,

512
00:35:14,250 --> 00:35:22,110
then we need to update the check where necessary.

513
00:35:22,110 --> 00:35:25,960
So we'll start with protocol.

514
00:35:25,960 --> 00:35:27,850
If they sent protocol,

515
00:35:27,850 --> 00:35:31,410
then what date?

516
00:35:31,410 --> 00:35:34,900
That check data protocol equals.

517
00:35:34,900 --> 00:35:39,160
Now let's do the oriole.

518
00:35:39,160 --> 00:35:40,640
If you're out,

519
00:35:40,640 --> 00:35:43,000
check data.

520
00:35:43,000 --> 00:35:44,770
Euro equals euro.

521
00:35:44,770 --> 00:35:53,460
If method then check data method equals method.

522
00:35:53,460 --> 00:35:54,430
Now,

523
00:35:54,430 --> 00:36:02,780
if success codes check data success codes equals success codes.

524
00:36:02,780 --> 00:36:04,640
Leslie,

525
00:36:04,640 --> 00:36:06,530
if time out seconds,

526
00:36:06,530 --> 00:36:09,080
then check data time out.

527
00:36:09,080 --> 00:36:09,870
Seconds.

528
00:36:09,870 --> 00:36:15,430
You guessed it equals time out seconds.

529
00:36:15,430 --> 00:36:16,470
Now we need a story.

530
00:36:16,470 --> 00:36:17,200
The updates.

531
00:36:17,200 --> 00:36:27,710
So we're gonna say data update the Czechs collection.

532
00:36:27,710 --> 00:36:34,880
By this I d remember the I d is what we originally started with that the user sent in,

533
00:36:34,880 --> 00:36:43,450
and we're going to update it with this new updated check data and expect an error back.

534
00:36:43,450 --> 00:36:45,740
If there is no air,

535
00:36:45,740 --> 00:36:49,150
then we'll continue.

536
00:36:49,150 --> 00:36:57,190
And we just need to call back 200 to the user if there is an error.

537
00:36:57,190 --> 00:37:07,950
Me to call back 500 or fault and say air could not update the check.

538
00:37:07,950 --> 00:37:11,640
All right,

539
00:37:11,640 --> 00:37:15,240
that is the checks dot put method.

540
00:37:15,240 --> 00:37:19,490
Let's go ahead and start silver back up and trying to use it.

541
00:37:19,490 --> 00:37:24,520
So I'm gonna use the same token since it hasn't been an hour yet,

542
00:37:24,520 --> 00:37:26,150
so it hasn't expired.

543
00:37:26,150 --> 00:37:27,260
Climate change.

544
00:37:27,260 --> 00:37:29,740
This to be a put.

545
00:37:29,740 --> 00:37:35,520
I'm going to move this.

546
00:37:35,520 --> 00:37:49,760
I d down into the payload and let's just modify each thing.

547
00:37:49,760 --> 00:37:50,580
I'm a change.

548
00:37:50,580 --> 00:37:52,080
Http to https.

549
00:37:52,080 --> 00:38:02,350
Change this to yahoo dot com with a put and the success codes are going to be 200 to 1 and

550
00:38:02,350 --> 00:38:04,590
403 and the time out seconds,

551
00:38:04,590 --> 00:38:08,000
they're going to be to said,

552
00:38:08,000 --> 00:38:11,830
that looks like it hit an issue.

553
00:38:11,830 --> 00:38:16,360
It's the same issue as before success codes.

554
00:38:16,360 --> 00:38:20,940
It's not something that I seem to be able to spell correctly consistently,

555
00:38:20,940 --> 00:38:27,880
so I'm just going to update those wherever I did it.

556
00:38:27,880 --> 00:38:46,940
All right,

557
00:38:46,940 --> 00:38:56,760
All of those have been updated.

558
00:38:56,760 --> 00:38:57,740
Let's start it Back up.

559
00:38:57,740 --> 00:39:00,780
Send this Put.

560
00:39:00,780 --> 00:39:02,370
We got a 200 back.

561
00:39:02,370 --> 00:39:14,640
This is the check ending in fl two f l two we look at it.

562
00:39:14,640 --> 00:39:15,880
Https.

563
00:39:15,880 --> 00:39:16,930
Yahoo!

564
00:39:16,930 --> 00:39:19,980
Put these new success codes time out.

565
00:39:19,980 --> 00:39:20,900
Seconds is too.

566
00:39:20,900 --> 00:39:24,100
So all of these updates seem to be working.

567
00:39:24,100 --> 00:39:25,520
Now that puts working,

568
00:39:25,520 --> 00:39:39,030
we can go ahead and write the delete method to require data is just going to be I d.

569
00:39:39,030 --> 00:39:41,940
And there won't be any optional data.

570
00:39:41,940 --> 00:39:52,700
We're going to start with the scaffolding from the last elite that we wrote.

571
00:39:52,700 --> 00:39:58,970
But this delete is going to be a bit more complicated because not only do we need to delete

572
00:39:58,970 --> 00:39:59,710
the check,

573
00:39:59,710 --> 00:40:04,370
but then we need to go into the user's object and delete any record of that.

574
00:40:04,370 --> 00:40:06,320
Check being on the user's object as well,

575
00:40:06,320 --> 00:40:12,020
some copying the delete function from users.

576
00:40:12,020 --> 00:40:17,320
Since it has some off validation that we can use,

577
00:40:17,320 --> 00:40:21,230
we're going to say handlers checks delete.

578
00:40:21,230 --> 00:40:22,930
Here is a function,

579
00:40:22,930 --> 00:40:28,750
and the first thing we need to do is check that the I.

580
00:40:28,750 --> 00:40:29,070
D.

581
00:40:29,070 --> 00:40:29,630
Is valid.

582
00:40:29,630 --> 00:40:36,220
Same modifications.

583
00:40:36,220 --> 00:40:37,320
I mean last time.

584
00:40:37,320 --> 00:40:41,240
And if it's an I D,

585
00:40:41,240 --> 00:40:43,010
then we're going to continue.

586
00:40:43,010 --> 00:40:44,120
Otherwise,

587
00:40:44,120 --> 00:40:47,120
we're going to call back an error to the user.

588
00:40:47,120 --> 00:40:48,130
Now,

589
00:40:48,130 --> 00:40:49,330
before we move on,

590
00:40:49,330 --> 00:40:54,230
we actually want to look up the check that they want to delete.

591
00:40:54,230 --> 00:41:04,160
So we're going to say data read from the checks collection by I D and passes back in air

592
00:41:04,160 --> 00:41:05,320
and check data.

593
00:41:05,320 --> 00:41:12,460
If there's not an air and there is check,

594
00:41:12,460 --> 00:41:14,130
data will continue.

595
00:41:14,130 --> 00:41:23,020
Otherwise we will call that 400 and heir to the user,

596
00:41:23,020 --> 00:41:30,070
saying air the specified check I D.

597
00:41:30,070 --> 00:41:32,020
Does not exist,

598
00:41:32,020 --> 00:41:38,630
but if the check data it was good,

599
00:41:38,630 --> 00:41:44,490
then we need to get the token and verify that it belongs to the same user who created the

600
00:41:44,490 --> 00:41:44,880
check.

601
00:41:44,880 --> 00:41:49,630
So let's move all of this up here.

602
00:41:49,630 --> 00:41:54,000
Okay,

603
00:41:54,000 --> 00:41:56,580
so we're getting the token than we want to do.

604
00:41:56,580 --> 00:41:58,790
Handlers tokens verify,

605
00:41:58,790 --> 00:42:03,940
token and compare it to check data,

606
00:42:03,940 --> 00:42:05,390
user phone,

607
00:42:05,390 --> 00:42:06,680
just like we did before.

608
00:42:06,680 --> 00:42:11,670
And it's gonna passes back of Boolean saying that the token is or is not valid.

609
00:42:11,670 --> 00:42:13,810
If the token is not valid,

610
00:42:13,810 --> 00:42:18,220
then we're going to return a 403 to the user.

611
00:42:18,220 --> 00:42:25,610
But if it is valid,

612
00:42:25,610 --> 00:42:31,080
then we can immediately delete that check that they're asking us to delete.

613
00:42:31,080 --> 00:42:33,670
So we're gonna say,

614
00:42:33,670 --> 00:42:36,720
delete the check data.

615
00:42:36,720 --> 00:42:39,850
We're gonna call data,

616
00:42:39,850 --> 00:42:48,110
delete the Czechs collection by i d passes back and air.

617
00:42:48,110 --> 00:42:51,370
It's not an air.

618
00:42:51,370 --> 00:42:52,200
Continue.

619
00:42:52,200 --> 00:43:07,610
If there is an air call back to the user of 500 saying air could really the check data,

620
00:43:07,610 --> 00:43:14,450
But if there is no air now we need to use this section that we copied down.

621
00:43:14,450 --> 00:43:20,410
We need to look up that user and then modify their object to get rid of any reference to

622
00:43:20,410 --> 00:43:21,010
that check.

623
00:43:21,010 --> 00:43:26,890
So we want to look up the users in the user collection,

624
00:43:26,890 --> 00:43:29,840
and we're gonna look them up by check data.

625
00:43:29,840 --> 00:43:31,220
Use your phone.

626
00:43:31,220 --> 00:43:38,220
It's going to pass us back air and user data.

627
00:43:38,220 --> 00:43:43,510
If there is no air and there is user data will continue here.

628
00:43:43,510 --> 00:43:47,270
If we hit an error or there wasn't any data,

629
00:43:47,270 --> 00:43:58,910
then we're going to call back a 500 say could not find the user who created check so could

630
00:43:58,910 --> 00:44:04,450
not remove the check from the list of checks on the user.

631
00:44:04,450 --> 00:44:11,300
Clean this up a bit,

632
00:44:11,300 --> 00:44:12,830
right?

633
00:44:12,830 --> 00:44:14,620
But back to hear.

634
00:44:14,620 --> 00:44:17,070
If we did get the user data out,

635
00:44:17,070 --> 00:44:20,870
then we need to figure out what the users checks are.

636
00:44:20,870 --> 00:44:25,100
So we're going to take the logic from before,

637
00:44:25,100 --> 00:44:33,300
and we're going to use that down here.

638
00:44:33,300 --> 00:44:50,590
So now we have the list of the user checks and we need to remove the deleted check from

639
00:44:50,590 --> 00:44:52,740
their list of checks.

640
00:44:52,740 --> 00:44:54,770
The way that we're going to do that,

641
00:44:54,770 --> 00:45:02,430
it's figure out what position in that array the user checks is so check position is going

642
00:45:02,430 --> 00:45:04,730
to equal user checks.

643
00:45:04,730 --> 00:45:09,480
The index of i D.

644
00:45:09,480 --> 00:45:12,290
Maybe that's the I d.

645
00:45:12,290 --> 00:45:13,800
From up here.

646
00:45:13,800 --> 00:45:16,500
Now we have the position of the check.

647
00:45:16,500 --> 00:45:18,800
We want to say,

648
00:45:18,800 --> 00:45:23,930
if check position greater than negative one,

649
00:45:23,930 --> 00:45:28,210
then there's something for us to do if for some reason is not greater than negative one,

650
00:45:28,210 --> 00:45:29,590
which had never happened.

651
00:45:29,590 --> 00:45:40,130
But just in case we want to call back an error here.

652
00:45:40,130 --> 00:45:51,300
I could not find the check on the user's object so could not remove it.

653
00:45:51,300 --> 00:45:55,440
But if the check does exist on the user's object,

654
00:45:55,440 --> 00:45:57,940
then we need to remove it with this place.

655
00:45:57,940 --> 00:45:59,480
So use your checks.

656
00:45:59,480 --> 00:46:05,990
This place check position one.

657
00:46:05,990 --> 00:46:09,100
Now that has been removed.

658
00:46:09,100 --> 00:46:13,490
We can re save the users data.

659
00:46:13,490 --> 00:46:17,700
So we're going to just copy this.

660
00:46:17,700 --> 00:46:21,200
Move that up here,

661
00:46:21,200 --> 00:46:28,580
but it's going to be data update.

662
00:46:28,580 --> 00:46:33,130
The users identified by check data,

663
00:46:33,130 --> 00:46:33,990
user phone.

664
00:46:33,990 --> 00:46:40,600
We're going to be updating them with this new user data and they're gonna pass back in air

665
00:46:40,600 --> 00:46:41,470
if there's not an error.

666
00:46:41,470 --> 00:46:42,750
Gonna call back 200.

667
00:46:42,750 --> 00:46:50,400
If there isn't a right that we're gonna say 500 air could not update the user.

668
00:46:50,400 --> 00:46:53,920
Okay,

669
00:46:53,920 --> 00:46:56,410
so that is how we delete a check.

670
00:46:56,410 --> 00:47:00,290
Let's try and start this server back up,

671
00:47:00,290 --> 00:47:02,140
see if we can do it.

672
00:47:02,140 --> 00:47:06,560
So I'm going to change this.

673
00:47:06,560 --> 00:47:13,670
Put to a delete since is a delete.

674
00:47:13,670 --> 00:47:19,590
I do need to move this into the query string.

675
00:47:19,590 --> 00:47:21,800
Get rid of this body.

676
00:47:21,800 --> 00:47:27,900
I'm going to leave the token in the headers and send it off.

677
00:47:27,900 --> 00:47:29,840
I got a 200 back,

678
00:47:29,840 --> 00:47:36,150
so the check ending in f 02 shouldn't exist in here.

679
00:47:36,150 --> 00:47:43,020
And if I open up the users object his array should be missing it.

680
00:47:43,020 --> 00:47:47,900
It should have 1234 So now that that's gone,

681
00:47:47,900 --> 00:47:53,930
I would be able as this user to create my fifth check again since my fifth check has been

682
00:47:53,930 --> 00:47:54,410
deleted.

683
00:47:54,410 --> 00:47:56,870
So Delete seemed to be working fine.

684
00:47:56,870 --> 00:47:59,480
But before we move on to the next lecture,

685
00:47:59,480 --> 00:48:04,320
there is one other modification that we need to make to the handlers file.

686
00:48:04,320 --> 00:48:13,800
But that is in reference to the to do that we made a very long time ago in the user's dot

687
00:48:13,800 --> 00:48:18,690
delete method here.

688
00:48:18,690 --> 00:48:26,360
We told ourselves to clean up any other data files associated with the user when the user

689
00:48:26,360 --> 00:48:27,200
gets deleted.

690
00:48:27,200 --> 00:48:29,900
So let's go ahead and get rid of this to do,

691
00:48:29,900 --> 00:48:31,990
because that's what we are addressing now.

692
00:48:31,990 --> 00:48:32,850
And now,

693
00:48:32,850 --> 00:48:37,150
instead of just calling back 200 we're gonna call back 200 bottom to get rid of that for

694
00:48:37,150 --> 00:48:37,460
now,

695
00:48:37,460 --> 00:48:40,270
because we're gonna put a whole bunch more logic in here.

696
00:48:40,270 --> 00:48:43,680
We're gonna say if the user was deleted successfully.

697
00:48:43,680 --> 00:48:48,000
Now we need to delete each of the checks,

698
00:48:48,000 --> 00:48:51,730
Associate ID with the user.

699
00:48:51,730 --> 00:48:57,280
So let's figure out what the user checks are.

700
00:48:57,280 --> 00:49:01,190
We're going to use that same logic that we did a moment ago.

701
00:49:01,190 --> 00:49:15,180
So now we have the user checks to find,

702
00:49:15,180 --> 00:49:24,710
and we're going to say that that checks to delete is equal to user checks.

703
00:49:24,710 --> 00:49:25,740
Dark length.

704
00:49:25,740 --> 00:49:29,300
So that's the total number of checks that we need to get rid of.

705
00:49:29,300 --> 00:49:35,940
If checks to delete is greater than zero,

706
00:49:35,940 --> 00:49:36,970
we want to do one thing.

707
00:49:36,970 --> 00:49:39,120
If it's not ready than zero,

708
00:49:39,120 --> 00:49:40,450
we want to do another.

709
00:49:40,450 --> 00:49:42,500
If it's not greater than zero,

710
00:49:42,500 --> 00:49:48,570
then we just want to call back 200 to the user because there's really nothing left for us

711
00:49:48,570 --> 00:49:48,990
to do.

712
00:49:48,990 --> 00:49:51,060
If it is greater than zero,

713
00:49:51,060 --> 00:49:52,980
then there's some work that we need to do,

714
00:49:52,980 --> 00:49:54,160
deleting some checks.

715
00:49:54,160 --> 00:49:56,990
So we're gonna continue on with the logic.

716
00:49:56,990 --> 00:49:59,850
We want to start counting the checks.

717
00:49:59,850 --> 00:50:00,970
It we have deleted,

718
00:50:00,970 --> 00:50:03,530
so we're going to say checks deleted.

719
00:50:03,530 --> 00:50:06,040
It is a new variable.

720
00:50:06,040 --> 00:50:10,700
You got a zero and we also want to count.

721
00:50:10,700 --> 00:50:12,630
If we have any delish in errors.

722
00:50:12,630 --> 00:50:18,510
So right now deletion airs are false.

723
00:50:18,510 --> 00:50:24,400
We're basically going to look through all of the checks and delete them one by one.

724
00:50:24,400 --> 00:50:29,090
Keep track of how many we've done and keep track if any of the relations have hit in air.

725
00:50:29,090 --> 00:50:36,430
So we want to loop through checks.

726
00:50:36,430 --> 00:50:41,670
We want to say user checks for each.

727
00:50:41,670 --> 00:50:46,790
Let us use the check I D.

728
00:50:46,790 --> 00:50:52,770
So for each pass of this loop,

729
00:50:52,770 --> 00:50:59,980
we want to delete the check by calling Data docked elite.

730
00:50:59,980 --> 00:51:07,180
We're gonna delete it by i d passes back in air.

731
00:51:07,180 --> 00:51:16,430
And if there is an air deletion airs,

732
00:51:16,430 --> 00:51:18,570
gets set to true.

733
00:51:18,570 --> 00:51:25,550
So we can keep track at some point over this looping process and error happened,

734
00:51:25,550 --> 00:51:28,300
but at any rate,

735
00:51:28,300 --> 00:51:28,660
rather,

736
00:51:28,660 --> 00:51:31,580
an air happened during the deletion process or not,

737
00:51:31,580 --> 00:51:33,030
the checks deleted,

738
00:51:33,030 --> 00:51:45,270
gets increment ID and once checks deleted is equal to checks to delete.

739
00:51:45,270 --> 00:51:47,050
In other words,

740
00:51:47,050 --> 00:51:51,810
once we have passed through the same number of things that we have to do,

741
00:51:51,810 --> 00:51:56,190
then if there's no delusion errors,

742
00:51:56,190 --> 00:52:01,380
we'll just call back 200 to the user because everything went fine.

743
00:52:01,380 --> 00:52:06,370
If there are any heirs,

744
00:52:06,370 --> 00:52:10,670
then we want to call back 500 because we messed something up.

745
00:52:10,670 --> 00:52:28,230
We want to say Air Air is encountered while attempting to delete all of the users checks

746
00:52:28,230 --> 00:52:38,260
Paul checks may not have being deleted from the system successfully.

747
00:52:38,260 --> 00:52:49,330
Let's start the silver back up and tried to delete this user and then make sure that all of

748
00:52:49,330 --> 00:52:51,680
his checks got deleted when he did.

749
00:52:51,680 --> 00:52:56,670
So I'm going to do a delete,

750
00:52:56,670 --> 00:53:01,170
but I need to figure out what this user is called.

751
00:53:01,170 --> 00:53:08,980
So I'm going to do another delete request,

752
00:53:08,980 --> 00:53:15,970
but this time it's to users by phone number.

753
00:53:15,970 --> 00:53:21,370
I'm going to keep the same token and send it off.

754
00:53:21,370 --> 00:53:26,190
Looks like we hit air user data is not defined.

755
00:53:26,190 --> 00:53:35,280
And that is because I'm referencing the user data as user data here when it's really coming

756
00:53:35,280 --> 00:53:36,430
back as data.

757
00:53:36,430 --> 00:53:41,740
So I'm just gonna make it so it comes back is user data and then change it where it needs

758
00:53:41,740 --> 00:53:42,560
to be changed.

759
00:53:42,560 --> 00:53:44,330
Now,

760
00:53:44,330 --> 00:53:45,680
since I'm in Adam,

761
00:53:45,680 --> 00:53:54,320
I can actually re save this file to make the user reappear and restart the so the user's

762
00:53:54,320 --> 00:53:55,120
back in there,

763
00:53:55,120 --> 00:53:57,040
and so are his checks.

764
00:53:57,040 --> 00:54:00,150
So I'm gonna send us off again All right,

765
00:54:00,150 --> 00:54:01,390
We got a 200 back.

766
00:54:01,390 --> 00:54:02,730
That one user is gone.

767
00:54:02,730 --> 00:54:03,790
All the checks were gone,

768
00:54:03,790 --> 00:54:06,710
so that's working as we wanted it to.

769
00:54:06,710 --> 00:54:07,650
Now,

770
00:54:07,650 --> 00:54:14,160
I am actually going to re save this user again just because we wouldn't want to use him

771
00:54:14,160 --> 00:54:15,140
again later.

772
00:54:15,140 --> 00:54:16,040
All right,

773
00:54:16,040 --> 00:54:17,060
I'm gonna kill this app.

774
00:54:17,060 --> 00:54:24,740
That is the modification that we need to make to users dot elite and all of the services

775
00:54:24,740 --> 00:54:27,560
that we needed to build for checks.

776
00:54:27,560 --> 00:54:30,170
So now we can move on to the next lecture.

