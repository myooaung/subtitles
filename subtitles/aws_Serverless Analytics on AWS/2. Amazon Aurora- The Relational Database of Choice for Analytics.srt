1
00:00:00,993 --> 00:00:05,076
One of the first builds we'll do is to create and populate

2
00:00:05,076 --> 00:00:07,588
an Amazon Aurora relational database,

3
00:00:07,588 --> 00:00:12,756
so we can have Glue crawlers crawl the database and populate

4
00:00:12,756 --> 00:00:18,481
the Glue Data Catalog with the schema and statistics of our

5
00:00:18,481 --> 00:00:21,669
Amazon Aurora relational database.

6
00:00:21,669 --> 00:00:30,042
Amazon Aurora is a MySQL or PostgreSQL compatible relational database engine.

7
00:00:30,042 --> 00:00:31,280
On this slide,

8
00:00:31,280 --> 00:00:37,500
I'm lucky to introduce you to Amazon Aurora's service-oriented decoupled

9
00:00:37,500 --> 00:00:42,587
architecture that's applied to a relational database engine.

10
00:00:42,587 --> 00:00:44,194
When Andy Jassy,

11
00:00:44,194 --> 00:00:49,275
AWS' CEO challenged his data team to recreate the

12
00:00:49,275 --> 00:00:52,433
relational database in a world where AWS exists,

13
00:00:52,433 --> 00:00:56,333
they took about half the database out of the process,

14
00:00:56,333 --> 00:00:59,021
the logging and storage.

15
00:00:59,021 --> 00:01:02,111
Caching is outside the database process as well.

16
00:01:02,111 --> 00:01:06,611
Notice the green rectangle that includes caching with logging and storage.

17
00:01:06,611 --> 00:01:11,683
By doing this, cache remains warm in the event of a database restart.

18
00:01:11,683 --> 00:01:15,632
It lets you resume fully-loaded operations much faster.

19
00:01:15,632 --> 00:01:20,273
Looking at the data plane on the left side of the diagram,

20
00:01:20,273 --> 00:01:24,764
the database engine is tightly integrated with the

21
00:01:24,764 --> 00:01:30,980
SSD-based new virtual storage layer, reducing write to the storage system,

22
00:01:30,980 --> 00:01:32,420
minimizing lock contention,

23
00:01:32,420 --> 00:01:37,019
and eliminating delays created by database processing threads.

24
00:01:37,019 --> 00:01:40,911
On the lower-left side, you'll see there's automatic,

25
00:01:40,911 --> 00:01:48,592
continual, and incremental backups happening all the time to Amazon S3.

26
00:01:48,592 --> 00:01:50,150
On the right side,

27
00:01:50,150 --> 00:01:53,954
you'll see that Amazon Aurora is integrated with some of the

28
00:01:53,954 --> 00:01:58,468
premier Amazon services for control plane operations where

29
00:01:58,468 --> 00:02:01,653
forwarding and routing decisions are made.

30
00:02:01,653 --> 00:02:07,208
Here we have a closer look of how Amazon Aurora replicates your data across

31
00:02:07,208 --> 00:02:12,039
three availability zones for security and fault tolerance.

32
00:02:12,039 --> 00:02:15,713
You remember that AWS regions are separate geographic areas

33
00:02:15,713 --> 00:02:19,858
that provide durability and fault tolerance from large-scale

34
00:02:19,858 --> 00:02:22,145
disasters like earthquakes.

35
00:02:22,145 --> 00:02:28,023
Each region has multiple isolated locations known as availability zones.

36
00:02:28,023 --> 00:02:33,285
Availability zones provide durability and fault tolerance for more

37
00:02:33,285 --> 00:02:37,024
localized problems that might come up like power outages.

38
00:02:37,024 --> 00:02:41,970
Amazon RDS provides you the ability to place resources such as

39
00:02:41,970 --> 00:02:46,629
instances and data in multiple locations.

40
00:02:46,629 --> 00:02:52,133
Resources aren't replicated across AWS regions unless you do so specifically.

41
00:02:52,133 --> 00:02:55,891
And so far as the availability zones are concerned,

42
00:02:55,891 --> 00:02:59,842
there's always one primary instance, in this diagram,

43
00:02:59,842 --> 00:03:02,837
it's labeled M, kind of like for master.

44
00:03:02,837 --> 00:03:09,160
Master slave is referred to as the primary instance and read replicas.

45
00:03:09,160 --> 00:03:14,416
In this example, the primary instance is in availability zone A,

46
00:03:14,416 --> 00:03:19,338
and one Aurora replica is in availability zone B,

47
00:03:19,338 --> 00:03:25,034
and two Aurora replicas reside in availability zone C.

48
00:03:25,034 --> 00:03:28,973
Notice the cluster volume and the how the reads and writes are distributed

49
00:03:28,973 --> 00:03:33,623
among the primary instance and all the replica instances.

50
00:03:33,623 --> 00:03:41,550
There now is Aurora Serverless for MySQL, with PostgreSQL in preview.

51
00:03:41,550 --> 00:03:46,552
It removes the complexity of managing database instances and capacity.

52
00:03:46,552 --> 00:03:48,960
The database will automatically start up,

53
00:03:48,960 --> 00:03:52,852
shutdown, and scale to match your application's needs.

54
00:03:52,852 --> 00:03:57,383
It seamlessly scales compute and memory capacity as needed

55
00:03:57,383 --> 00:04:00,480
with no disruption to client connections.

56
00:04:00,480 --> 00:04:07,108
You pay only for the database resources you consume on a per-second basis.

57
00:04:07,108 --> 00:04:12,608
You don't pay for the database instance unless it's actually running.

58
00:04:12,608 --> 00:04:17,212
It's built on distributed fault tolerant self-healing Aurora storage

59
00:04:17,212 --> 00:04:22,176
with six-way replication to protect against data loss.

60
00:04:22,176 --> 00:04:27,087
It responds to your application loads automatically.

61
00:04:27,087 --> 00:04:33,187
It scales capacity with no downtime, its multitenant proxy is highly available,

62
00:04:33,187 --> 00:04:37,154
it scales the target so it has a warm buffer pool,

63
00:04:37,154 --> 00:04:40,702
and it shuts down when not in use.

64
00:04:40,702 --> 00:04:51,000
In the next section, I'll cover what AWS Glue is, what it does, and the business problems it solves.

