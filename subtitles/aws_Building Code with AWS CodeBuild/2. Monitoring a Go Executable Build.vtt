WEBVTT
1
00:00:01.400 --> 00:00:06.050
So now we understand some of the core components of creating a CodeBuild build,

2
00:00:06.050 --> 00:00:09.580
let's take a look at creating one.

3
00:00:09.580 --> 00:00:16.340
For our first build, we'll need to set up an S3 bucket and a CodeBuild project,

4
00:00:16.340 --> 00:00:18.990
which will and create a Go executable artifact,

5
00:00:18.990 --> 00:00:24.020
and we're going to store that in another S3 bucket.

6
00:00:24.020 --> 00:00:27.020
In this next demo, we're going to cover the following.

7
00:00:27.020 --> 00:00:29.460
We're going to have a look at creating our build,

8
00:00:29.460 --> 00:00:33.870
and we're going to do that by setting up the S3 buckets we just talked about,

9
00:00:33.870 --> 00:00:36.190
we're then going to upload our source code,

10
00:00:36.190 --> 00:00:37.820
we're going to run the build,

11
00:00:37.820 --> 00:00:41.580
and then we're going to look at managing the artifact.

12
00:00:41.580 --> 00:00:50.230
So let's go ahead and create our bucket, so we'll give it a name of whatever

13
00:00:50.230 --> 00:01:01.660
my initials are and then codebuild‑simplegoapp. I'm going to put it in my

14
00:01:01.660 --> 00:01:12.570
region, Create bucket. And then let's create a folder, and we'll call this

15
00:01:12.570 --> 00:01:20.290
one Source, Save, create another folder.

16
00:01:20.290 --> 00:01:27.480
We'll call this one Artifact, Save. And let's jump into

17
00:01:27.480 --> 00:01:33.960
Source, and then let's upload an Archive.zip of the

18
00:01:33.960 --> 00:01:38.340
buildspec, the go.mod, and the main.go.

19
00:01:38.340 --> 00:01:47.440
Let's upload that. Perfect. Now, let's jump over to the CodeBuild dashboard.

20
00:01:47.440 --> 00:01:51.440
So let's create a build project.

21
00:01:51.440 --> 00:02:01.410
We'll give it a name, CodeBuild‑SimpleGoApp.

22
00:02:01.410 --> 00:02:05.020
I'm not going to add a description, but you can do if you want.

23
00:02:05.020 --> 00:02:06.810
And then let's scroll down to Source. Now, you can

24
00:02:06.810 --> 00:02:10.400
have multiple sources for CodeBuild, which is really cool,

25
00:02:10.400 --> 00:02:12.440
and it integrates really well into CodeCommit,

26
00:02:12.440 --> 00:02:17.900
but we're just going to use Amazon S3 as it's super simple and straightforward.

27
00:02:17.900 --> 00:02:18.810
We'll select our bucket.

28
00:02:18.810 --> 00:02:25.120
We'll select our source key,

29
00:02:25.120 --> 00:02:27.590
I'm not going to give it a source version, and we're going

30
00:02:27.590 --> 00:02:32.320
to select a Managed image, so we'll select Ubuntu, we'll

31
00:02:32.320 --> 00:02:35.150
give it a runtime of Standard,

32
00:02:35.150 --> 00:02:39.820
and then we'll select the 4.0 image that we used locally.

33
00:02:39.820 --> 00:02:43.940
We'll let it use the latest image, and the Environment type is Linux.

34
00:02:43.940 --> 00:02:45.750
We don't need it to be privileged,

35
00:02:45.750 --> 00:02:48.450
and we're going to select an existing service role

36
00:02:48.450 --> 00:02:54.090
that we created in a previous module, which is this one.

37
00:02:54.090 --> 00:02:59.460
We'll select the buildspec file that we've submitted into the source code,

38
00:02:59.460 --> 00:03:05.340
and then we're going to say store our artifacts into Amazon S3 into the

39
00:03:05.340 --> 00:03:15.480
bucket that we created, and then we'll give it a path.

40
00:03:15.480 --> 00:03:18.360
We don't need to package the artifact, we'll keep it as a

41
00:03:18.360 --> 00:03:21.710
Go executable, we'll enable CloudWatch logs, and we'll go

42
00:03:21.710 --> 00:03:24.240
into this into the next demo.

43
00:03:24.240 --> 00:03:29.670
So let's create our build project.

44
00:03:29.670 --> 00:03:30.390
Perfect.

45
00:03:30.390 --> 00:03:32.850
So here's our project.

46
00:03:32.850 --> 00:03:35.750
Let's go ahead and start our build.

47
00:03:35.750 --> 00:03:38.670
You can select a different timeout if you want.

48
00:03:38.670 --> 00:03:49.980
I've already got the source selected, so let's go ahead and start our build.

49
00:03:49.980 --> 00:03:55.190
Now, this might take a few minutes to run, so let's just leave it to do that.

50
00:03:55.190 --> 00:03:59.780
So now that's completed, let's have a look at some of the phase details that

51
00:03:59.780 --> 00:04:04.230
have been output here. So we can actually see some of the phases that we created

52
00:04:04.230 --> 00:04:09.430
in our buildspec file, how long they took, and if they were successful. They

53
00:04:09.430 --> 00:04:13.580
were all successful, so let's jump over to our S3 bucket and have a look at our

54
00:04:13.580 --> 00:04:22.240
artifact. Go into Artifacts, our SimpleGoApp, and then there's our CodeBuild,

55
00:04:22.240 --> 00:04:24.520
and there is our artifact.

56
00:04:24.520 --> 00:04:29.950
How easy was that? CodeBuild makes it so simple to create executable,

57
00:04:29.950 --> 00:04:35.300
binaries, or anything that you need to build and run. So now we have

58
00:04:35.300 --> 00:04:40.820
created a build. Now, let's take a look how to monitor its actions. In

59
00:04:40.820 --> 00:04:43.340
this demo, we're going to cover the following.

60
00:04:43.340 --> 00:04:46.720
We're going to look at the CloudWatch logs and how they

61
00:04:46.720 --> 00:04:51.850
interact with the CodeBuild build. So here I am, back on

62
00:04:51.850 --> 00:04:54.650
the build that we created before.

63
00:04:54.650 --> 00:04:59.200
Let's have a look at what's in Build logs. So in Build logs is all of

64
00:04:59.200 --> 00:05:03.470
the CloudWatch logs and all of the different steps and outputs from

65
00:05:03.470 --> 00:05:06.540
our container that ran our build scripts.

66
00:05:06.540 --> 00:05:08.950
Now, if any of your builds are unsuccessful,

67
00:05:08.950 --> 00:05:11.850
this is the first place you will look to try and debug your

68
00:05:11.850 --> 00:05:15.690
build. And going through here, you can see all of the similar

69
00:05:15.690 --> 00:05:18.620
stuff that we've seen in the phases before.

70
00:05:18.620 --> 00:05:21.070
You can have a look at where it was entering the phase INSTALL,

71
00:05:21.070 --> 00:05:25.740
what commands were run and the output from them.

72
00:05:25.740 --> 00:05:30.300
Scroll down, we can see our BUILD phase down here somewhere

73
00:05:30.300 --> 00:05:37.590
after all of these logs. Here it is, and we can see if it was

74
00:05:37.590 --> 00:05:41.330
successful, and here's the output of the command saying that it

75
00:05:41.330 --> 00:05:44.510
was successful. Really simple,

76
00:05:44.510 --> 00:05:47.540
really straightforward. And this would be your first protocol for

77
00:05:47.540 --> 00:05:53.220
debugging and monitoring your build. So let's have a quick recap of

78
00:05:53.220 --> 00:05:58.040
what we just covered with our CodeBuild module.

79
00:05:58.040 --> 00:06:02.120
We had a look at the prerequisites required to run the builds, we had

80
00:06:02.120 --> 00:06:05.920
a look at planning the build and what's involved in creating them, we

81
00:06:05.920 --> 00:06:09.380
had to go at creating and running a build, and we had a look at

82
00:06:09.380 --> 00:06:11.550
managing the artifacts in S3,

83
00:06:11.550 --> 00:06:21.000
and then we looked at how to monitor and debug our build using the CloudWatch logs that is integrated into the CodeBuild dashboard.

