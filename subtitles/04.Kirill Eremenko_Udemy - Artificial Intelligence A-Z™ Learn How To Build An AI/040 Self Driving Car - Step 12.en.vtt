WEBVTT
1
00:00:00.270 --> 00:00:02.590
Hello and welcome to this Python tutorial.

2
00:00:02.820 --> 00:00:08.730
All right so today we will be making the update function which will update everything there is to date

3
00:00:08.850 --> 00:00:12.240
as soon as the eye reaches a new state.

4
00:00:12.510 --> 00:00:16.140
So when it reaches new stage you know we need to update the action.

5
00:00:16.200 --> 00:00:19.320
The last actually comes the new action that was just played.

6
00:00:19.530 --> 00:00:22.630
But also the last date that becomes the new state.

7
00:00:22.680 --> 00:00:27.450
And finally the last word that becomes the new word we get when we play the action.

8
00:00:27.480 --> 00:00:31.480
So that's the logical path that happens right after selecting an action.

9
00:00:31.530 --> 00:00:35.100
We need to update all the elements of the transitions.

10
00:00:35.310 --> 00:00:37.370
And of course you'll get a new transition.

11
00:00:37.420 --> 00:00:40.300
So we will have to append this new transition to the memory.

12
00:00:40.350 --> 00:00:46.200
And finally we will also update or reward window you know to keep an eye on the evolution of how the

13
00:00:46.200 --> 00:00:49.460
training is going and how the exploration is going.

14
00:00:49.680 --> 00:00:55.380
But what's most important for you to understand is that now we can finally make a connection between

15
00:00:55.530 --> 00:01:01.650
the AI that we're implementing right now to our map because if we go back to our map remember there

16
00:01:01.650 --> 00:01:08.580
is this Beiji update function into the game class and that's where we were actually making the game

17
00:01:08.580 --> 00:01:12.940
with the car and defining how the car should be punished when it's making a mistake.

18
00:01:13.170 --> 00:01:19.140
But in this game class we noticed this update function and in this update function we noticed this line

19
00:01:19.500 --> 00:01:24.700
action because brain update last we worked less signal.

20
00:01:24.900 --> 00:01:28.410
And actually this is exactly what we're about to make.

21
00:01:28.410 --> 00:01:36.300
We are about to make this update function that will take the last word and the last signal to get the

22
00:01:36.300 --> 00:01:37.860
next action to play.

23
00:01:37.860 --> 00:01:41.640
So not only will the update all the different elements of the transition.

24
00:01:41.910 --> 00:01:48.390
But mostly we will be playing the action that we should play when getting the last word and the last

25
00:01:48.390 --> 00:01:55.920
signal and so of course in this update function we will use the select action function that we just

26
00:01:55.920 --> 00:02:02.400
implemented before we will integrate the select action function in the future update function that we're

27
00:02:02.400 --> 00:02:07.740
about to make to select direction to play besides making all the updates.

28
00:02:07.860 --> 00:02:11.200
So that's really important to make this connection with the map right now.

29
00:02:11.310 --> 00:02:18.480
What we're about to make is eventually the connection between our eye and the game the game that we

30
00:02:18.480 --> 00:02:19.750
make in this class.

31
00:02:19.770 --> 00:02:24.030
And so what we can do now is directly take this update.

32
00:02:24.060 --> 00:02:29.970
Last we were less signal because that is actually the function that we'll be making with these two arguments

33
00:02:29.970 --> 00:02:30.430
here.

34
00:02:30.720 --> 00:02:38.530
And just as a quick reminder brain is our AI object that is it's the object of the Dejuan class.

35
00:02:38.540 --> 00:02:45.690
So what we're going to do now is we're going to copy this update less word less signal and that's going

36
00:02:45.690 --> 00:02:48.390
to be our next function we're making.

37
00:02:48.480 --> 00:02:54.120
And therefore and pasting that here then just to be careful I would just like to give some different

38
00:02:54.120 --> 00:02:56.190
names than the names we have here.

39
00:02:56.200 --> 00:03:00.820
You know we have last word here and I don't want to confuse this last word with this one.

40
00:03:00.900 --> 00:03:02.060
That can be dangerous.

41
00:03:02.220 --> 00:03:06.100
So I'm going to replace last word here by word.

42
00:03:06.390 --> 00:03:13.880
And by the way same for less signal let's just put signal or even new signal to specify that you know

43
00:03:13.920 --> 00:03:18.900
we want to measure that when reaching a new state and therefore getting a new signal.

44
00:03:18.900 --> 00:03:26.100
But then of course this word here is going to be the last reward that we get here.

45
00:03:26.280 --> 00:03:32.400
You know when going onto some sand or worse getting too close to one edge of the map that's where we

46
00:03:32.670 --> 00:03:34.130
define the last word.

47
00:03:34.200 --> 00:03:39.400
This last word is going to be the input of the update function so that's why we have last word here.

48
00:03:39.600 --> 00:03:43.660
But right here I'm just giving another name for the argument.

49
00:03:43.710 --> 00:03:47.640
We want to not confuse it with last word here.

50
00:03:47.640 --> 00:03:50.160
All right so this is the update function.

51
00:03:50.310 --> 00:03:54.090
And now let's go inside it and let's do these two things.

52
00:03:54.090 --> 00:03:58.970
That is the data all the elements of our transition and of course select the action.

53
00:03:59.290 --> 00:04:01.670
OK so what do we need to update first.

54
00:04:01.950 --> 00:04:06.760
Well as you understood we want to make a date when reaching any state.

55
00:04:06.840 --> 00:04:12.800
So the first thing we'll be updating is obviously this news that that is the news that we we're reaching.

56
00:04:12.840 --> 00:04:17.340
So I'm going to call this new state new state and then it will.

57
00:04:17.340 --> 00:04:19.810
And so how can we get this new state.

58
00:04:20.040 --> 00:04:25.460
Well of course that depends on the signal the new signal that the sensors just detected.

59
00:04:25.830 --> 00:04:32.760
And as a reminder the state is the signal itself composed of the three signals that the sensors signal

60
00:04:32.760 --> 00:04:37.470
one signal to signal three plus orientation and minus orientation.

61
00:04:37.530 --> 00:04:38.600
That's our state.

62
00:04:38.610 --> 00:04:42.470
So be sure to understand that the signal is the state.

63
00:04:42.660 --> 00:04:46.160
But right now it is a simple list of five elements.

64
00:04:46.200 --> 00:04:51.540
And since this is going to be the input to do all that work remember we have to convert it into a torch

65
00:04:51.540 --> 00:04:52.200
sensor.

66
00:04:52.490 --> 00:04:54.960
So that's exactly what we're going to do right now.

67
00:04:54.960 --> 00:05:03.910
We are going to take our torch library and then take the tensor class there we go which will convert

68
00:05:04.450 --> 00:05:12.420
our new signal into a torch denser then it's better to make sure that all the elements of the torch

69
00:05:12.420 --> 00:05:19.650
to answer are floats so I'm going to make a type conversion to convert them into floats like this.

70
00:05:19.900 --> 00:05:24.500
And then finally try to get a reflex of what we need to do next.

71
00:05:24.530 --> 00:05:29.590
It's of course to create that fake down engine to add diamonds and correspond to the batch and we do

72
00:05:29.590 --> 00:05:37.080
this of course with the squeeze function to which we have to put the index of this big diamond.

73
00:05:37.100 --> 00:05:40.210
And we want to for the batch which is zero.

74
00:05:40.770 --> 00:05:41.320
All right.

75
00:05:41.320 --> 00:05:47.110
And now we have our new states composed of the three signals of the three sensors plus orientation minus

76
00:05:47.110 --> 00:05:54.290
orientation and of course that will depend on the new signal we are getting with this update function.

77
00:05:54.400 --> 00:05:57.940
Right at this time last signal we get the three signals.

78
00:05:57.940 --> 00:06:04.450
So in addition minus or in addition and as a reminder the three signals are the density of sensor detected

79
00:06:04.720 --> 00:06:06.490
around the sensors.

80
00:06:06.490 --> 00:06:06.940
All right.

81
00:06:06.970 --> 00:06:13.710
So we just got a new stage so that means we reached the new stage and now we have to make the next update.

82
00:06:13.750 --> 00:06:16.440
So according to you what do we need to update now.

83
00:06:16.660 --> 00:06:22.320
What would be the logical thing to date right now after reaching this new state.

84
00:06:22.630 --> 00:06:25.940
Well what we need to date now is the memory.

85
00:06:25.960 --> 00:06:27.010
Why is that.

86
00:06:27.010 --> 00:06:34.200
It's because at each time t a transition is composed of the current state Estey the next day as tipis

87
00:06:34.220 --> 00:06:37.660
when the reward arti and the action 80.

88
00:06:37.860 --> 00:06:44.020
And right now we already have S-T we already have our team and we already have 80 and we just got the

89
00:06:44.020 --> 00:06:47.540
last element of the transition Estep plus one.

90
00:06:47.590 --> 00:06:55.720
So by getting this new state as deep as one we are getting one brand new transition of the memory and

91
00:06:55.720 --> 00:07:01.910
therefore we have to append this brand new transition to the memory because that's simply our next transition.

92
00:07:01.930 --> 00:07:03.980
So that's why we have to that memory right now.

93
00:07:04.120 --> 00:07:10.990
And therefore what I'm going to do is take my memory object created from the replay memory class and

94
00:07:10.990 --> 00:07:17.130
therefore I'm going to take self memory to refer to the object.

95
00:07:17.160 --> 00:07:22.700
But since I'm using self I have to include the self in the of that function.

96
00:07:22.950 --> 00:07:25.440
So now you can really see what this self is for.

97
00:07:25.550 --> 00:07:32.600
It's whenever you use one variable that you created and initialized in the init function a that memory.

98
00:07:32.600 --> 00:07:33.960
And now we did it.

99
00:07:34.190 --> 00:07:36.950
And according to you how we're going to update that.

100
00:07:37.160 --> 00:07:41.290
Well the good news is that we already made a function to do that.

101
00:07:41.300 --> 00:07:46.990
It's the push function which bans an event or a transition to the memory.

102
00:07:47.190 --> 00:07:49.060
So that's exactly what we're going to use now.

103
00:07:49.070 --> 00:07:55.460
We're going to use the push function to pen our new transition that we just made to the memory and therefore

104
00:07:55.760 --> 00:08:01.820
here I'm taking not an equal because we're going to use the method and therefore we can directly use

105
00:08:02.320 --> 00:08:04.200
that push.

106
00:08:04.280 --> 00:08:10.010
And first I'm going to add the transition this new transition that we just got and that is first the

107
00:08:10.010 --> 00:08:10.780
last date.

108
00:08:10.850 --> 00:08:14.010
So self that last date.

109
00:08:14.270 --> 00:08:18.680
So that's S-T That's exactly this one it already exists.

110
00:08:18.680 --> 00:08:23.620
Then the next element of this transition is of course the new state that we just reached.

111
00:08:23.840 --> 00:08:29.720
And therefore since it is not viable of the object that we created and initialized in this init function

112
00:08:30.080 --> 00:08:31.470
we don't put itself here.

113
00:08:31.580 --> 00:08:39.940
We directly put the Newstead then the next element of the transition is the action and say we already

114
00:08:39.940 --> 00:08:43.690
have the last section which is this self that last action here.

115
00:08:43.840 --> 00:08:45.320
So of course it is equal to zero.

116
00:08:45.350 --> 00:08:50.050
But then of course it will be updated with the select action function.

117
00:08:50.170 --> 00:08:51.190
But that's this one.

118
00:08:51.190 --> 00:08:55.620
So then it is self that last action.

119
00:08:55.840 --> 00:08:57.120
But now be careful.

120
00:08:57.190 --> 00:09:01.540
The elements that were included in this transition should all be torched answers.

121
00:09:01.870 --> 00:09:03.860
As you can see that's the case for the last date.

122
00:09:03.880 --> 00:09:05.200
It's a torch sensor.

123
00:09:05.350 --> 00:09:07.860
The new state is also torched answer.

124
00:09:07.900 --> 00:09:12.050
And so this must be the same for the action and then the reward of course.

125
00:09:12.190 --> 00:09:17.320
But now you're going to think how can it be a torched answer considering that it's simply a number.

126
00:09:17.410 --> 00:09:20.700
You know the action is either 0 1 or 2.

127
00:09:20.890 --> 00:09:22.370
But in fact that's not a problem.

128
00:09:22.390 --> 00:09:28.640
We can still convert this 0 1 or 2 variable into a torch sensor.

129
00:09:28.660 --> 00:09:31.530
This will just be what we call a long tensor.

130
00:09:31.540 --> 00:09:36.910
The long is a type and that's the tensor that will contain an integer because the last action is an

131
00:09:36.910 --> 00:09:39.660
integer it is 0 1 or 2.

132
00:09:39.670 --> 00:09:47.650
So what we're going to take now is our library torche then we're going to take the long is long tensor

133
00:09:48.190 --> 00:09:53.470
class that will create an object which will be the non-tenure itself.

134
00:09:53.710 --> 00:10:00.370
And by taking this self last action function as input it will create this long tensor object but it

135
00:10:00.370 --> 00:10:08.590
will still contain 0 1 or 2 into a long tensor object and that is just to be consistent with the transition

136
00:10:08.830 --> 00:10:14.070
that it only contains tensors because we're working with PI torch and we're working with a neural network.

137
00:10:14.170 --> 00:10:18.480
So we have to work with sensors so that we go torche long to answer.

138
00:10:18.580 --> 00:10:20.780
And one last conversion to make.

139
00:10:20.860 --> 00:10:27.520
We must be sure that what's inside this long answer is an integer and to make sure of it even if we

140
00:10:27.520 --> 00:10:34.000
already know that the last action is 0 1 or 2 to make sure that we are going to make this int type conversion

141
00:10:34.000 --> 00:10:39.310
again we convert our self last action into an integer.

142
00:10:39.310 --> 00:10:46.450
There we go and then we must just put that integer selfless action into brackets right here so that

143
00:10:46.450 --> 00:10:52.810
now we get a long tensor of one element which will be this last action 0 or 1 or 2 itself.

144
00:10:52.810 --> 00:10:59.880
So the key point is that's just how you convert a simple number zero one or two into a tensor with torche.

145
00:11:00.060 --> 00:11:00.360
All right.

146
00:11:00.360 --> 00:11:06.820
And then finally the last element of the transition and that's of course the last word we got.

147
00:11:06.880 --> 00:11:12.980
That's exactly the last word volleyball we created in any function that was initialized to zero.

148
00:11:13.110 --> 00:11:19.720
But then of course is updated right here in this code either when we go on to some sense which is negative

149
00:11:19.770 --> 00:11:24.020
word or if we get further away from the goal that's again a negative reward.

150
00:11:24.180 --> 00:11:30.090
If we get closer to the goal that's a positive reward and the worst punishment if we get too close to

151
00:11:30.090 --> 00:11:34.080
one edge of the map Well that's a terrible negative word minus one.

152
00:11:34.290 --> 00:11:36.190
And that's a.

153
00:11:36.260 --> 00:11:40.810
So let's add this last element of the transition self-direct the word.

154
00:11:41.060 --> 00:11:47.660
So I'm copying this pasting here and now we have to make another conversion which will be of course

155
00:11:47.750 --> 00:11:53.570
exactly the same as this one only since the word is not an integer but a float number.

156
00:11:53.780 --> 00:12:00.350
We will simply make a torch that tensor conversion but without that it will keep the brackets here because

157
00:12:00.350 --> 00:12:06.200
you know first we have to put the number into a list and then this list will go and put the torch into

158
00:12:06.200 --> 00:12:11.510
to class but we don't have to make that in conversion because last word is a float number.

159
00:12:11.510 --> 00:12:21.400
So what we're going to do is simply add here torche dot tensor torched a tensor then parenthesis brackets.

160
00:12:21.680 --> 00:12:27.470
And we are going to close the brackets here and we close the parenthesis.

161
00:12:27.470 --> 00:12:28.820
There we go.

162
00:12:28.820 --> 00:12:35.180
So to summarize Which did you say that we just reached and the we word we observe a new event of transition

163
00:12:35.540 --> 00:12:37.150
that we add to the memory.

164
00:12:37.550 --> 00:12:44.240
And this transition contains the last date and see the new state as tipis when the last action plays

165
00:12:44.540 --> 00:12:47.640
80 and the last word Archie.

166
00:12:48.020 --> 00:12:48.390
All right.

167
00:12:48.440 --> 00:12:51.220
And now we are going with our memory of dates.

168
00:12:51.410 --> 00:12:55.710
So let's have a quick break and we'll take care of the next update in the next tutorial.

169
00:12:55.970 --> 00:12:57.440
Until then I.
