WEBVTT
1
00:00:00.610 --> 00:00:03.190
Hello and welcome to this Python tutorial.

2
00:00:03.190 --> 00:00:09.460
So let's do this let's make this for loop starting from the right and going to the left and to do this

3
00:00:09.460 --> 00:00:11.900
we're going to add four.

4
00:00:11.920 --> 00:00:17.980
So this is an iterative VAR was going to be our step because we're going to go from the last step to

5
00:00:17.980 --> 00:00:21.590
the first step of a series of transitions and so forth.

6
00:00:21.960 --> 00:00:29.850
And then the trick to go from the right to the left is to use for step in reversed reversed.

7
00:00:30.160 --> 00:00:35.300
And now we just need to input a sequence and this sequence is going to be of course our series.

8
00:00:35.380 --> 00:00:41.790
So we can put our series but as you can see in the paper we go from T minus 1 to start.

9
00:00:41.950 --> 00:00:47.760
So we don't go from the last step that is the terminal stage but the step before that there is to minus

10
00:00:47.800 --> 00:00:50.380
one but to start that is the first step.

11
00:00:50.430 --> 00:00:59.090
And so here to go from not to let's take that step before we need to add in brackets column minus one.

12
00:00:59.380 --> 00:01:04.270
I'm sure that for those of you who followed the machine learning in a deeper course you know this trick

13
00:01:04.560 --> 00:01:11.050
Kollin minus one means that you're going up to the element before the last element but not up to the

14
00:01:11.050 --> 00:01:14.740
last element and therefore we get the sequence we want.

15
00:01:14.860 --> 00:01:20.890
That's what we're going to go from the element before the last element to the first element and that

16
00:01:20.890 --> 00:01:23.900
we do things reversed to go from the right to the left.

17
00:01:24.160 --> 00:01:26.810
All right so we are ready to enter the for loop.

18
00:01:27.170 --> 00:01:29.740
And so inside this for loop what are we going to do.

19
00:01:29.780 --> 00:01:32.870
Where are we going to do exactly as in the paper.

20
00:01:32.900 --> 00:01:39.340
We're going to update the cumulative reward by multiplying it by Ghana and adding the word attained

21
00:01:39.400 --> 00:01:42.500
in the current step that is in the step of the follow up.

22
00:01:42.670 --> 00:01:45.450
All right so let's do this going back to Python.

23
00:01:45.590 --> 00:01:57.780
And so we want to update our cumulated we work the following way by first multiplying its by gamma.

24
00:01:57.780 --> 00:01:58.580
There we go.

25
00:01:58.660 --> 00:02:07.910
Here we multiply it by gamma and then we want to add the reward of that which we can access this way

26
00:02:07.970 --> 00:02:09.420
with the special structure.

27
00:02:09.450 --> 00:02:13.120
Remember that word is an attribute of the object.

28
00:02:13.130 --> 00:02:15.910
And so here of course we add a plus.

29
00:02:16.020 --> 00:02:17.330
All right it's a cumulative reward.

30
00:02:17.450 --> 00:02:19.310
Equals do we want this step.

31
00:02:19.370 --> 00:02:25.620
We are in right now the loop plus Gahanna times the previous cumulative reward before it is a.

32
00:02:26.150 --> 00:02:26.870
Perfect.

33
00:02:26.870 --> 00:02:28.190
So now I think we're good.

34
00:02:28.220 --> 00:02:30.180
We're following thoroughly the algorithm.

35
00:02:30.500 --> 00:02:32.600
And now time for the next steps.

36
00:02:32.840 --> 00:02:35.090
Well now it's going to become pretty easy.

37
00:02:35.090 --> 00:02:40.880
We go back to the first follow up because this for loop is just to compute the cumulative reward no

38
00:02:41.060 --> 00:02:44.010
going from the right to the left by updating this way.

39
00:02:44.030 --> 00:02:50.930
Following the algorithm and now as you remember the goal of doing this is to get our inputs ready and

40
00:02:50.930 --> 00:02:55.950
our targets ready so that we can minimize the squared difference between the two for the training.

41
00:02:55.950 --> 00:03:01.020
And so right now the only thing that we have to do that is get these inputs and toilet's ready.

42
00:03:01.220 --> 00:03:08.410
So let's do this first what we need to do is add the first date of the series in our parts list.

43
00:03:08.510 --> 00:03:11.460
So far this state is in this in part of our goal.

44
00:03:11.480 --> 00:03:14.100
That was just to compute the output.

45
00:03:14.270 --> 00:03:19.370
So we're going to get this input state of the first step separately because that's exactly what we need

46
00:03:19.370 --> 00:03:21.320
to happen in our list.

47
00:03:21.380 --> 00:03:23.340
So let's get this separately.

48
00:03:23.360 --> 00:03:25.910
Therefore we're going to call it state.

49
00:03:26.000 --> 00:03:32.930
And so exactly the same as here we can get it this way by taking the first index of the series which

50
00:03:32.930 --> 00:03:38.300
contains the first transition and then adding that state to get the state of this first transition.

51
00:03:38.330 --> 00:03:44.390
So that's the site we need then saying we're going to get separately the targets associated to this

52
00:03:44.840 --> 00:03:46.830
input stage of the transition.

53
00:03:46.880 --> 00:03:53.450
And so an interesting new variable here target which will be equal to the value of the first step.

54
00:03:53.540 --> 00:03:59.990
And since the Q value is returned by the neural network and its content and output and since outputs

55
00:04:00.070 --> 00:04:07.370
is the output associated to this input which contains the first of the transition well we can get this

56
00:04:07.370 --> 00:04:12.830
q value of the first date by just taking output here and taking the index zero.

57
00:04:13.100 --> 00:04:20.630
And then we add that data that will simply get us the Q value of the input state of the first transition

58
00:04:21.050 --> 00:04:22.310
and that is exactly the time.

59
00:04:22.320 --> 00:04:30.080
Q So that way we take it then we are going to update this target variable but only for the action that

60
00:04:30.080 --> 00:04:35.680
was selected in the first step of the series and to access this first step of the series.

61
00:04:35.870 --> 00:04:42.710
Well we need to take first series 0 because this is exactly the first step at a series 3 0.

62
00:04:42.970 --> 00:04:50.290
And to access the action corresponding to this first step of the series well we need to add here that

63
00:04:50.380 --> 00:04:57.340
action again that is this attribute structure that we're using you know action is an attribute of the

64
00:04:57.340 --> 00:04:58.900
first step of the series.

65
00:04:58.900 --> 00:05:04.570
That is the first transition of the series because each transition of the series has the following structure

66
00:05:04.720 --> 00:05:11.350
state action word and done so action here this attribute action here means that we're simply getting

67
00:05:11.500 --> 00:05:14.150
the action of this first date.

68
00:05:14.330 --> 00:05:21.320
And so the target for that specific action of the first step is exactly what needs to be updated by

69
00:05:21.410 --> 00:05:22.850
the community of the world.

70
00:05:22.850 --> 00:05:29.490
So basically here we're just going to write that target associated to the action that was played.

71
00:05:29.630 --> 00:05:35.810
The first step of the series is this cumulative reward that we just computed.

72
00:05:36.130 --> 00:05:44.780
All right and now we're finally ready to update our input by appending this first stay here and this

73
00:05:44.780 --> 00:05:46.770
first are here for the first hour.

74
00:05:46.970 --> 00:05:53.090
We only need to update the first step of the series because you know we train the AI on 10 steps and

75
00:05:53.090 --> 00:05:56.000
therefore the input is the first step of the ten steps.

76
00:05:56.180 --> 00:06:01.400
And also we get the target in this first step but then we don't get any inputs or any toilets in the

77
00:06:01.400 --> 00:06:06.310
following steps of the 10 steps because basically the learning happens 10 steps afterwards.

78
00:06:06.500 --> 00:06:11.380
Thats why right now we only getting the state and the target of the first step of the series.

79
00:06:11.840 --> 00:06:16.820
So its important to understand that and therefore if we understand that now we understand that we have

80
00:06:16.820 --> 00:06:20.590
to input them in our list of inputs and our list of targets.

81
00:06:20.660 --> 00:06:21.560
So let's do this.

82
00:06:21.560 --> 00:06:25.140
First let's append the states to our inputs.

83
00:06:25.190 --> 00:06:33.680
So we take our inputs list and we use the append function to add the state which remembrancer the input

84
00:06:33.680 --> 00:06:41.030
state of the first step of the series and then we are going to append the target at the first step to

85
00:06:41.120 --> 00:06:47.270
our list of targets and to do this we take our list of targets and say we use the append function to

86
00:06:47.270 --> 00:06:49.460
append this first target.

87
00:06:49.490 --> 00:06:50.360
There we go.

88
00:06:50.540 --> 00:06:56.750
Almost done and now we need to return the last things which are of course what we needed to as we said

89
00:06:56.840 --> 00:07:01.760
at the beginning of this tutorial the inputs and the targets that are now updated.

90
00:07:02.090 --> 00:07:07.580
So we are going to add here every turn and we're going to get our inputs first but then that's the thing

91
00:07:07.580 --> 00:07:14.660
we need to convert them into a number array first then do a type conversion to make sure we have a single

92
00:07:14.660 --> 00:07:21.710
type with the type you equals and that floats 32 the same.

93
00:07:21.890 --> 00:07:28.520
And then we convert this into a torch tensor because of course we're working with a torch that's totally

94
00:07:28.730 --> 00:07:29.540
compulsory.

95
00:07:29.570 --> 00:07:36.040
And so I'm using the torch from non-Thai function again.

96
00:07:37.180 --> 00:07:39.000
And that gives us our inputs.

97
00:07:39.130 --> 00:07:39.590
Perfect.

98
00:07:39.590 --> 00:07:42.460
And now let's do the same for the targets.

99
00:07:42.520 --> 00:07:44.620
Now we can use this trick which is quicker.

100
00:07:44.710 --> 00:07:50.950
We're going to stack the targets together and to do this we need to take first our torch library because

101
00:07:50.950 --> 00:07:57.230
we are going to use the stack function by torch to stack the targets.

102
00:07:57.250 --> 00:07:57.550
All right.

103
00:07:57.550 --> 00:08:04.030
And so this line of code basically returns the inputs and the toilets that were just updated through

104
00:08:04.030 --> 00:08:07.100
this eligibility trace Sarsour algorithm.

105
00:08:07.180 --> 00:08:10.710
Or we can call it and step in and send our congratulations.

106
00:08:10.780 --> 00:08:16.540
We were ready to do the final training because basically the training consists of minimizing the square

107
00:08:16.540 --> 00:08:20.950
differences between the predictions of our inputs and the toilets.

108
00:08:21.160 --> 00:08:22.870
So let's get our eyes smart.

109
00:08:22.870 --> 00:08:25.150
It will become smart and the next its.

110
00:08:25.210 --> 00:08:26.980
And so until then enjoy AI.
