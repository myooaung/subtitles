1
00:00:00,640 --> 00:00:04,140
[Autogenerated] All right, let's dive into Amazon s and s.

2
00:00:04,140 --> 00:00:10,310
SNS allows us to have system to system messaging for different architectures.

3
00:00:10,310 --> 00:00:12,850
So how it works is we have a topic.

4
00:00:12,850 --> 00:00:16,930
And then topics have both publishers and subscribers,

5
00:00:16,930 --> 00:00:20,540
and you can see a diagram here on the right that Amazon lays out.

6
00:00:20,540 --> 00:00:25,440
So what happens is publishers send messages to a topic,

7
00:00:25,440 --> 00:00:28,330
and that topic allows us to notify several

8
00:00:28,330 --> 00:00:31,580
subscribers at once using the same message.

9
00:00:31,580 --> 00:00:36,230
Now a publisher does not have to be an application in the sense

10
00:00:36,230 --> 00:00:38,640
of something that you create in your running.

11
00:00:38,640 --> 00:00:43,030
A notification can even come from something like a CloudWatch alarm

12
00:00:43,030 --> 00:00:46,620
that notifies a topic of some action that's going on.

13
00:00:46,620 --> 00:00:51,600
And a really good example of that is using CloudWatch alarms for auto

14
00:00:51,600 --> 00:00:56,830
scaling groups that send notifications to the topic to alert admin is

15
00:00:56,830 --> 00:00:59,000
that it's scaling out or having issues.

16
00:00:59,000 --> 00:01:00,220
So let's just go ahead.

17
00:01:00,220 --> 00:01:02,020
I want to create a new topic.

18
00:01:02,020 --> 00:01:05,740
I'll create one called Pluralsight s and s.

19
00:01:05,740 --> 00:01:09,990
I'll do the display, name the same, and then we have our encryption.

20
00:01:09,990 --> 00:01:15,480
So if we wanted to, we could encrypt our data at rest using kms.

21
00:01:15,480 --> 00:01:20,040
Now you'll notice that in transit encryption is already provided by default.

22
00:01:20,040 --> 00:01:23,160
But they recently added this server side at rest

23
00:01:23,160 --> 00:01:25,960
encryption as an option for compliance.

24
00:01:25,960 --> 00:01:27,840
So I'm gonna disable this.

25
00:01:27,840 --> 00:01:29,940
It moves to our access policy,

26
00:01:29,940 --> 00:01:35,100
and our access policy is what defines who can do what with our topic.

27
00:01:35,100 --> 00:01:40,660
So the default is that only the topic owner can publish and only the

28
00:01:40,660 --> 00:01:44,690
topic owner can define who can subscribe to the topic.

29
00:01:44,690 --> 00:01:46,520
Now, a common scenario for this,

30
00:01:46,520 --> 00:01:51,640
which is similar to this diagram here is you can have the topic owner

31
00:01:51,640 --> 00:01:54,580
still be the only one who can publish messages.

32
00:01:54,580 --> 00:01:59,070
But then maybe you want to notify cross account A W s

33
00:01:59,070 --> 00:02:01,580
accounts with the same message.

34
00:02:01,580 --> 00:02:05,820
So this is extremely popular under enterprise organizations accounts,

35
00:02:05,820 --> 00:02:09,430
so we could have only the topic owner published messages,

36
00:02:09,430 --> 00:02:11,690
But then we allow anyone in different A.

37
00:02:11,690 --> 00:02:15,440
W s accounts to subscribe to the topic.

38
00:02:15,440 --> 00:02:19,240
So that way we can notify several subscribers at once.

39
00:02:19,240 --> 00:02:21,440
Now I'll leave the default here.

40
00:02:21,440 --> 00:02:22,710
We can look at our delivery.

41
00:02:22,710 --> 00:02:23,350
Retry.

42
00:02:23,350 --> 00:02:28,170
So this is defining how many re tries error going to happen if messages

43
00:02:28,170 --> 00:02:33,070
failed to deliver to a HTTP s endpoint and you can see there are several

44
00:02:33,070 --> 00:02:36,410
options here that error specific to this retry policy.

45
00:02:36,410 --> 00:02:39,670
So a number of re tries the different delays,

46
00:02:39,670 --> 00:02:43,070
and then they even have a back off function that you can use.

47
00:02:43,070 --> 00:02:44,650
I'll leave the default.

48
00:02:44,650 --> 00:02:47,340
I'll move on to delivery status logging.

49
00:02:47,340 --> 00:02:52,900
And this is where we can log our delivery status is for our subscriptions.

50
00:02:52,900 --> 00:02:56,140
So for pushing to on AWS lambda, for example,

51
00:02:56,140 --> 00:02:59,840
we can logged the delivery status for those protocols.

52
00:02:59,840 --> 00:03:02,870
So if you want to see or get an insight of how well

53
00:03:02,870 --> 00:03:06,950
your messages error getting delivered, you can use this status logging,

54
00:03:06,950 --> 00:03:10,100
optional setting, and you'll see that when we do this,

55
00:03:10,100 --> 00:03:13,200
it requires permissions to write the CloudWatch logs,

56
00:03:13,200 --> 00:03:14,260
Which makes sense.

57
00:03:14,260 --> 00:03:16,880
So I'm not going to go and collect any logs for this

58
00:03:16,880 --> 00:03:20,630
we can tag it if we wanted to, and then I create.

59
00:03:20,630 --> 00:03:21,240
That's it.

60
00:03:21,240 --> 00:03:24,270
We now have a topic for publishing messages to.

61
00:03:24,270 --> 00:03:28,550
From here we would create subscriptions and depending on our

62
00:03:28,550 --> 00:03:32,430
access policy that we define that determines who can create

63
00:03:32,430 --> 00:03:34,410
subscriptions for this topic.

64
00:03:34,410 --> 00:03:36,620
Now we left the default, so only the owner,

65
00:03:36,620 --> 00:03:39,340
which is me, can create subscriptions.

66
00:03:39,340 --> 00:03:41,540
Let's just go ahead and create one.

67
00:03:41,540 --> 00:03:44,580
You'll see that we can send a several different endpoints,

68
00:03:44,580 --> 00:03:48,040
including Sqs and Lambda.

69
00:03:48,040 --> 00:03:50,830
Now we're going to talk about Sqs and Lambda here in an

70
00:03:50,830 --> 00:03:54,830
upcoming clip when we move into pub sub architectures and

71
00:03:54,830 --> 00:03:57,340
we'll cover a topic known as fanning out.

72
00:03:57,340 --> 00:03:57,980
So for this,

73
00:03:57,980 --> 00:04:02,540
I just want to do email and then let me answer my quick to cloud email in here.

74
00:04:02,540 --> 00:04:06,010
So any time a message gets published to our topic,

75
00:04:06,010 --> 00:04:10,160
this subscriber might quick to cloud email will receive a message.

76
00:04:10,160 --> 00:04:13,580
And below this, we have our subscription filter policy.

77
00:04:13,580 --> 00:04:17,680
So this is a very powerful optional tool that you can use.

78
00:04:17,680 --> 00:04:23,840
So if you have several subscriptions, you can define a policy in here via JSON.

79
00:04:23,840 --> 00:04:28,870
That's saying we wanna look for a specific key in that JSON

80
00:04:28,870 --> 00:04:32,740
message in order to send to the subscriber.

81
00:04:32,740 --> 00:04:36,760
So maybe we're passing a key of email in the message.

82
00:04:36,760 --> 00:04:38,330
And if we match that,

83
00:04:38,330 --> 00:04:42,010
we want to go ahead and send to any email protocol endpoints.

84
00:04:42,010 --> 00:04:45,710
And if it doesn't match the mandatory keys we can set,

85
00:04:45,710 --> 00:04:48,830
it won't even notify this subscriber at all.

86
00:04:48,830 --> 00:04:52,050
So these error very handy when you're trying to filter

87
00:04:52,050 --> 00:04:54,940
out which subscriptions get what?

88
00:04:54,940 --> 00:04:59,110
I'm gonna leave this blank and we can specify a re Docker policy.

89
00:04:59,110 --> 00:05:00,510
So this is a dead letter.

90
00:05:00,510 --> 00:05:01,440
Q.

91
00:05:01,440 --> 00:05:01,700
Now,

92
00:05:01,700 --> 00:05:04,980
we talked about dead letter cues in the previous clip where

93
00:05:04,980 --> 00:05:07,740
we were talking about sqs in general.

94
00:05:07,740 --> 00:05:13,140
So if we wanted to we can send UN delivery ble messages to a particular queue,

95
00:05:13,140 --> 00:05:17,760
and this once again allows for resiliency of processing messages.

96
00:05:17,760 --> 00:05:20,690
So I'm gonna create a subscription here and there we go.

97
00:05:20,690 --> 00:05:22,380
We now get our unique subscription.

98
00:05:22,380 --> 00:05:27,280
IDE and I get an email that's asking me to confirm my subscription,

99
00:05:27,280 --> 00:05:30,850
which you can see here and then once I subscribe,

100
00:05:30,850 --> 00:05:34,970
it brings me to a confirmation screen, and if I go back to my topic,

101
00:05:34,970 --> 00:05:39,370
you'll see that we are confirmed because I just confirmed it via browser.

102
00:05:39,370 --> 00:05:46,570
So now what happens is when I send a message or publish a message to this topic,

103
00:05:46,570 --> 00:05:50,440
I should get an email, so I'll give it a subject.

104
00:05:50,440 --> 00:05:52,990
We'll give it a 62nd time to live.

105
00:05:52,990 --> 00:05:56,310
We can send identical payloads for all protocols,

106
00:05:56,310 --> 00:06:00,800
so email lambda etcetera or we can choose a custom

107
00:06:00,800 --> 00:06:03,640
payload for each delivery protocol,

108
00:06:03,640 --> 00:06:06,240
and you could see them listed here on the left.

109
00:06:06,240 --> 00:06:08,620
So depending on our subscriber type,

110
00:06:08,620 --> 00:06:11,680
that alters the message that sent Now I'm gonna do

111
00:06:11,680 --> 00:06:13,830
identical just since this is simple.

112
00:06:13,830 --> 00:06:17,940
And let me just type a simple message in here, So Pluralsight rocks.

113
00:06:17,940 --> 00:06:22,940
So now that I have my simple message we can set our message attributes.

114
00:06:22,940 --> 00:06:24,620
Now, I'm not going to set any of these,

115
00:06:24,620 --> 00:06:29,040
but this allows us to provide metadata on our messages

116
00:06:29,040 --> 00:06:32,240
for our subscribers to pull if needed.

117
00:06:32,240 --> 00:06:35,040
So let me go ahead and I'm gonna publish this message.

118
00:06:35,040 --> 00:06:36,460
We get a success.

119
00:06:36,460 --> 00:06:42,640
And now in a second, I should get an email from my SNS topic, and I already did.

120
00:06:42,640 --> 00:06:44,440
That's how fast it was.

121
00:06:44,440 --> 00:06:46,260
And this is what it looks like here.

122
00:06:46,260 --> 00:06:47,570
With this screenshot,

123
00:06:47,570 --> 00:06:50,450
you can see our subject line and then you can see our

124
00:06:50,450 --> 00:06:53,540
Pluralsight rocks message that we just sent.

125
00:06:53,540 --> 00:06:58,260
So that's how easy it is to create a topic and then published two and

126
00:06:58,260 --> 00:07:02,720
subscribe to it to receive messages almost immediately.

127
00:07:02,720 --> 00:07:07,530
So a valid use case would be to set up some type of alarm notification for

128
00:07:07,530 --> 00:07:13,050
maybe your compute and then have a W s automatically published to a topic

129
00:07:13,050 --> 00:07:18,330
that has maybe a cloud admin as a receiver or subscriber who can take action

130
00:07:18,330 --> 00:07:20,650
and look in to see what's going on now.

131
00:07:20,650 --> 00:07:24,370
One last thing Before we wrap up, we have our subscriptions page,

132
00:07:24,370 --> 00:07:28,210
so this shows us all of our subscriptions.

133
00:07:28,210 --> 00:07:31,500
Within this region, you can see I have two different topics.

134
00:07:31,500 --> 00:07:35,040
I have an admin alert and then the one I just created.

135
00:07:35,040 --> 00:07:39,210
So this admin alert is an example of what we were just talking about.

136
00:07:39,210 --> 00:07:42,040
Anytime I get messages for alerts,

137
00:07:42,040 --> 00:07:47,590
I get emails to my quick to cloud email specifying what the message was.

138
00:07:47,590 --> 00:07:48,800
So with that,

139
00:07:48,800 --> 00:07:51,330
let's go ahead and wrap up here and then we're

140
00:07:51,330 --> 00:07:58,000
going to pick up in the next clip, talking about pub sub architectures with fanning out.

