WEBVTT
1
00:00:00.840 --> 00:00:01.240
[Autogenerated] All right,

2
00:00:01.240 --> 00:00:04.100
let's go ahead and start talking about pub sub

3
00:00:04.100 --> 00:00:07.310
architectures now pumps up architectures.

4
00:00:07.310 --> 00:00:12.600
Allow us to fan out our architecture er so that we can configure multiple

5
00:00:12.600 --> 00:00:17.270
consumers and subscribers to take action on one notification.

6
00:00:17.270 --> 00:00:22.210
So it allows us to really decouple our architectures even more so and

7
00:00:22.210 --> 00:00:27.500
perform parallel processing of messages that come in now An example of a pub

8
00:00:27.500 --> 00:00:33.220
sub architecture ER that is commonly quizzed over on the exams is using SNS

9
00:00:33.220 --> 00:00:36.540
with multiple sqs cues on the back end.

10
00:00:36.540 --> 00:00:39.740
So if I go to my Pluralsight SNS topic, we just made,

11
00:00:39.740 --> 00:00:42.130
we have my in point here of my email.

12
00:00:42.130 --> 00:00:48.250
But now what we want to do is we want to subscribe our sqs cues to our topic.

13
00:00:48.250 --> 00:00:54.040
Now, to do this, you want to initiate it from the sqs topic itself.

14
00:00:54.040 --> 00:00:59.470
So I have Q and Q B here that I made in between clips and these error what

15
00:00:59.470 --> 00:01:03.780
I'm going to be using as subscribers for our SNS topic.

16
00:01:03.780 --> 00:01:05.010
So let's just go ahead.

17
00:01:05.010 --> 00:01:09.820
I wanna go to Q actions, and I'm going to subscribe my cue to a topic.

18
00:01:09.820 --> 00:01:14.220
So I select my topic and then I subscribe and you'll see that it has

19
00:01:14.220 --> 00:01:20.220
allowed permissions from S and s that topic we decided and it allows

20
00:01:20.220 --> 00:01:23.530
it to send a message to our sqs Q.

21
00:01:23.530 --> 00:01:27.740
So now if I go to s and s and I refresh this page,

22
00:01:27.740 --> 00:01:31.540
we see a rescue sq right here as a subscription.

23
00:01:31.540 --> 00:01:34.490
Now let's say we initiated it from the S and s side.

24
00:01:34.490 --> 00:01:42.440
So if I create a subscription, let me select Sqs and let me go grab the ARN.

25
00:01:42.440 --> 00:01:46.370
If I go here and I create this, if I go to Sqs,

26
00:01:46.370 --> 00:01:49.940
you're going to see the permissions didn't change.

27
00:01:49.940 --> 00:01:52.960
So even though it is subscribe to that topic,

28
00:01:52.960 --> 00:01:56.850
we didn't grant that topic permissions to send a message so it

29
00:01:56.850 --> 00:01:59.310
won't actually send the message to the Q.

30
00:01:59.310 --> 00:02:02.150
It will try, but then it will just fail.

31
00:02:02.150 --> 00:02:07.340
So what I want to do is let me go ahead and kill that subscription.

32
00:02:07.340 --> 00:02:13.240
I'll initiate it from the sqs side and there we go.

33
00:02:13.240 --> 00:02:14.420
We now have our permission.

34
00:02:14.420 --> 00:02:18.040
So if I go to SNS, I refresh.

35
00:02:18.040 --> 00:02:20.050
We see our sqs queues here.

36
00:02:20.050 --> 00:02:22.200
Now, for the sake of this demo,

37
00:02:22.200 --> 00:02:25.960
I wanna edit these and I want to enable raw message delivery.

38
00:02:25.960 --> 00:02:29.740
So let me edit this.

39
00:02:29.740 --> 00:02:32.510
And this is because I want to go ahead and perform some

40
00:02:32.510 --> 00:02:36.460
mathematics operations that it's just easier if I send in an

41
00:02:36.460 --> 00:02:38.760
exact value and don't have to parse it.

42
00:02:38.760 --> 00:02:40.010
And what this does,

43
00:02:40.010 --> 00:02:43.660
is it prevents or it doesn't have SNS wrapped the

44
00:02:43.660 --> 00:02:46.390
message in an S and s event notification.

45
00:02:46.390 --> 00:02:49.740
It just sends it in the exact format that we specify.

46
00:02:49.740 --> 00:02:53.290
So let me go back to my SNS page and what I want to do is I

47
00:02:53.290 --> 00:02:56.260
created to Lambda Functions on the back end.

48
00:02:56.260 --> 00:02:58.260
Sqs worker A.

49
00:02:58.260 --> 00:03:00.800
And what this is doing is it's pulling in an event.

50
00:03:00.800 --> 00:03:02.960
It's parsing it for the message body.

51
00:03:02.960 --> 00:03:05.040
And then I'm printing that with simple math.

52
00:03:05.040 --> 00:03:07.720
So I'm doing the number that I send plus one,

53
00:03:07.720 --> 00:03:11.630
and that's what gets printed to the logs and then in worker bee.

54
00:03:11.630 --> 00:03:14.250
All I'm doing is doing the same action,

55
00:03:14.250 --> 00:03:18.640
except I'm multiplying the number that I pull in by 100.

56
00:03:18.640 --> 00:03:25.840
So what we're gonna do is subscribe these to a rescue s cuse so far worker A.

57
00:03:25.840 --> 00:03:27.110
I'm sure you guessed it will choose.

58
00:03:27.110 --> 00:03:27.970
Q A.

59
00:03:27.970 --> 00:03:29.630
I'll leave a batch size of one.

60
00:03:29.630 --> 00:03:31.840
I'll enable it and add.

61
00:03:31.840 --> 00:03:33.790
And then I'll do the same for B.

62
00:03:33.790 --> 00:03:39.040
Except for I'll choose Q B.

63
00:03:39.040 --> 00:03:39.540
Alright.

64
00:03:39.540 --> 00:03:45.020
So we now have our Q triggers added to our functions,

65
00:03:45.020 --> 00:03:48.440
and you can see them right here on the console.

66
00:03:48.440 --> 00:03:52.700
So if I go back to SNS now with this architecture,

67
00:03:52.700 --> 00:03:56.920
er, I should in theory, be able to publish a message here,

68
00:03:56.920 --> 00:03:58.510
we'll leave them subject in the T.

69
00:03:58.510 --> 00:03:59.630
T l blank.

70
00:03:59.630 --> 00:04:01.940
I'm gonna enter the number five.

71
00:04:01.940 --> 00:04:06.380
And since we're doing raw message delivery, this is exactly what will get sent.

72
00:04:06.380 --> 00:04:07.520
Just five.

73
00:04:07.520 --> 00:04:09.640
It won't wrap it in any format.

74
00:04:09.640 --> 00:04:12.340
And when I published this message,

75
00:04:12.340 --> 00:04:14.770
it's going to publish to all of these in points.

76
00:04:14.770 --> 00:04:17.210
So I should get an email, which I just did,

77
00:04:17.210 --> 00:04:19.270
and it's got the number five in the body.

78
00:04:19.270 --> 00:04:22.300
But that means error cues should have received some messages.

79
00:04:22.300 --> 00:04:26.410
So if I refresh here, these cues should have invoked our worker functions.

80
00:04:26.410 --> 00:04:31.430
So let me go to my logs and CloudWatch So for worker

81
00:04:31.430 --> 00:04:37.040
A If we look at the log streams, open this up Perfect.

82
00:04:37.040 --> 00:04:40.390
So we did five plus one, which is six.

83
00:04:40.390 --> 00:04:42.570
As you can recall, in the code here.

84
00:04:42.570 --> 00:04:45.160
So what it did is it flowed through Q.

85
00:04:45.160 --> 00:04:47.150
A invoked function A.

86
00:04:47.150 --> 00:04:50.590
And we performed a separate mathematical equation.

87
00:04:50.590 --> 00:04:55.440
Then be so if we look at worker bee now,

88
00:04:55.440 --> 00:04:59.640
go into the logs and we look at our latest event stream.

89
00:04:59.640 --> 00:05:00.950
We'll see 500.

90
00:05:00.950 --> 00:05:05.280
And that's because we multiplied that value of five by

91
00:05:05.280 --> 00:05:09.040
100 which is down here in the code.

92
00:05:09.040 --> 00:05:13.180
So that's how you can scale out and fan out your architectures.

93
00:05:13.180 --> 00:05:14.450
Using pub sub,

94
00:05:14.450 --> 00:05:18.710
we use the same message but perform different functions and different

95
00:05:18.710 --> 00:05:23.640
work using that same message from one ingress point.

96
00:05:23.640 --> 00:05:27.330
So hopefully that helps you solidify your understanding of pub

97
00:05:27.330 --> 00:05:31.620
sub architectures and how you can use s and s fanning out to

98
00:05:31.620 --> 00:05:38.140
multiple sqs cues in order to perform different work functions

99
00:05:38.140 --> 00:05:40.240
based on the same message.

100
00:05:40.240 --> 00:05:48.000
So that's going to do it for this clip Well, in here and then we're going to start looking at step functions within a W s

