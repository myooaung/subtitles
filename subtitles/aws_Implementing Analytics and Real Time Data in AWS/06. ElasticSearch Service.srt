1
00:00:00,840 --> 00:00:03,250
[Autogenerated] and now we can make our way to Amazon.

2
00:00:03,250 --> 00:00:08,080
Elastic search service now Amazon Elastic Search services,

3
00:00:08,080 --> 00:00:14,440
a fully managed service for running elastic search within the AWS Cloud.

4
00:00:14,440 --> 00:00:20,450
Now elastic search itself is an open source search and analytics engine

5
00:00:20,450 --> 00:00:24,840
that's used for real time analytics and visualizations.

6
00:00:24,840 --> 00:00:30,540
It's a very handy tool for quickly identifying patterns within a dataset.

7
00:00:30,540 --> 00:00:36,390
Some solid use cases for elastic search include Log analytics or even real

8
00:00:36,390 --> 00:00:40,440
time application monitoring with click stream analysis.

9
00:00:40,440 --> 00:00:45,640
These error all solid choices for elastic search service as the back end.

10
00:00:45,640 --> 00:00:49,400
And since it's a manage service, this means that A.

11
00:00:49,400 --> 00:00:54,940
W s provisions all resource is that we need for our cluster.

12
00:00:54,940 --> 00:00:59,690
We just set a few different configuration options, depending on what we need.

13
00:00:59,690 --> 00:01:02,700
And that could be anything from instantiation to

14
00:01:02,700 --> 00:01:04,640
maybe the storage size that we need.

15
00:01:04,640 --> 00:01:07,840
And we'll take a look at that here in the upcoming clip.

16
00:01:07,840 --> 00:01:08,490
Now next.

17
00:01:08,490 --> 00:01:13,320
It allows for detection and recovery of failed notes.

18
00:01:13,320 --> 00:01:17,550
And what's nice about this is that this is an automatic action,

19
00:01:17,550 --> 00:01:21,090
so it automatically detects and recovers if we have any

20
00:01:21,090 --> 00:01:24,240
failed nodes within our elasticsearch cluster,

21
00:01:24,240 --> 00:01:25,690
and then finally,

22
00:01:25,690 --> 00:01:32,740
it allows us to scale extremely easily with a single API call to the service.

23
00:01:32,740 --> 00:01:38,090
So using either an STK or the A W s CLI we can easily

24
00:01:38,090 --> 00:01:42,260
scale to our needs via one call to a W s.

25
00:01:42,260 --> 00:01:46,040
So that really makes for an efficient service all around.

26
00:01:46,040 --> 00:01:47,110
It's managed.

27
00:01:47,110 --> 00:01:48,840
It's open source.

28
00:01:48,840 --> 00:01:52,020
It handles detection and recovery of failures,

29
00:01:52,020 --> 00:01:55,040
and it can scale easily within API call.

30
00:01:55,040 --> 00:01:57,240
It's a very solid offering.

31
00:01:57,240 --> 00:01:58,750
So with that wrapped up, well,

32
00:01:58,750 --> 00:02:02,770
cut this clip here and then we'll pick back up in the elastic search

33
00:02:02,770 --> 00:02:12,000
service console within a W s and start spinning apps, um, instances and clusters and then preview how that works.

