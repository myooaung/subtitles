WEBVTT
1
00:00:00.360 --> 00:00:01.340
Hello and welcome back.

2
00:00:01.500 --> 00:00:08.340
And today we'll be working with order by ORDER BY is a very useful statement and ask you well but it's

3
00:00:08.340 --> 00:00:10.010
a pretty brief one as well.

4
00:00:10.020 --> 00:00:11.620
There's not much to explain about.

5
00:00:11.880 --> 00:00:13.520
So let's dive straight into it.

6
00:00:13.590 --> 00:00:19.180
As you can see I have console games database opened up and console games ready to roll.

7
00:00:19.380 --> 00:00:27.180
So let's go create new querido and the first thing I want to do is I want to show I want to select everything

8
00:00:28.050 --> 00:00:33.770
from and then I just want to say console games.

9
00:00:33.920 --> 00:00:41.210
Now if you run this what we'll get back is all 12 columns all filled with data or most of them feel

10
00:00:41.210 --> 00:00:44.450
that they add up and they will not be organized.

11
00:00:44.450 --> 00:00:47.050
They will be displayed in a pretty messy way.

12
00:00:47.150 --> 00:00:49.930
So yeah as you can see everything is here out of order.

13
00:00:50.300 --> 00:00:51.080
And this is where.

14
00:00:51.110 --> 00:00:53.170
ORDER BY statement comes in play.

15
00:00:53.300 --> 00:00:58.760
So all we need to do is we need to type ORDER BY and then we need to select a column that will want

16
00:00:58.760 --> 00:01:00.950
the whole table to be ordered by.

17
00:01:01.400 --> 00:01:05.710
So in our case the column that makes most sense is game rank.

18
00:01:05.960 --> 00:01:13.520
Global sales is the same as game rank but game rank just displays a nice neat number of a whole integer

19
00:01:13.520 --> 00:01:15.000
1 2 3 etc..

20
00:01:15.230 --> 00:01:18.990
So let's go ahead and say that we want this to be ordered by game rank.

21
00:01:19.040 --> 00:01:25.460
And in the standing order ascending order means that the lower values will be displayed first and the

22
00:01:25.460 --> 00:01:28.970
higher values will be just fate lost.

23
00:01:29.030 --> 00:01:34.610
This is done in our case just to show game ranked number one will be the first row in the table.

24
00:01:34.820 --> 00:01:39.050
And as you can see now it follows one another and it's all pretty and neat.

25
00:01:39.960 --> 00:01:45.550
And you can also see that the global sales will correspond to this by constantly descending.

26
00:01:45.810 --> 00:01:53.550
But now what if we want to flip the order so we have the game rank the highest game rank the worst game

27
00:01:53.550 --> 00:01:55.230
rank displayed first.

28
00:01:55.320 --> 00:02:04.260
Well in this case we just want to ride this Sunday and that way what we'll get is the flip version of

29
00:02:04.260 --> 00:02:05.120
this table.

30
00:02:05.400 --> 00:02:09.560
So we'll have the game rank sixteen thousand six hundred.

31
00:02:09.720 --> 00:02:10.080
There it is.

32
00:02:10.080 --> 00:02:13.790
We have the game rank sixteen thousand six hundred first.

33
00:02:14.070 --> 00:02:17.600
And as you can see the global sales it made is pretty low.

34
00:02:17.700 --> 00:02:21.820
Obviously this data was collected from real world in millions of copies sold.

35
00:02:21.840 --> 00:02:25.580
So there might be some mistakes here that have been made.

36
00:02:25.740 --> 00:02:33.080
And that's why for example this road is not the last place even though it seems like it has to be there.

37
00:02:33.240 --> 00:02:38.790
How can we use order buy from as well point of view from data management perspective.

38
00:02:38.790 --> 00:02:40.880
Well there's a lot of uses to it.

39
00:02:40.890 --> 00:02:50.070
And the bigger databases you work with the more common data every row has the more order by will come

40
00:02:50.070 --> 00:02:52.200
into play with this database.

41
00:02:52.200 --> 00:02:58.870
The easiest example is that we can say we want it to be ordered by platform ascending.

42
00:02:59.250 --> 00:03:02.460
And then we wanted to also be ordered by Game year.

43
00:03:02.820 --> 00:03:08.750
And if we leave the game year before anything so we don't specify that it has to be ascending.

44
00:03:08.790 --> 00:03:14.940
It will basically by default decide to be ascending.

45
00:03:14.950 --> 00:03:16.460
So you can just leave it like this.

46
00:03:16.480 --> 00:03:21.420
I just liked it but ascending or descending to check my code for mistakes later on.

47
00:03:21.430 --> 00:03:23.320
So now what does that do to us.

48
00:03:23.320 --> 00:03:27.990
It will give us a very nice looking table where the rank is out of order.

49
00:03:28.060 --> 00:03:33.640
The game name is out of water and everything else is pretty much out of order except that it's all organized

50
00:03:33.640 --> 00:03:38.420
by the platform name and the year in which the game was released.

51
00:03:38.440 --> 00:03:45.670
So as you can see the first several dozen rows are all from the twenty six hundred platform and the

52
00:03:45.670 --> 00:03:48.170
games are organized but the year they were released.

53
00:03:48.430 --> 00:03:50.480
So this is pretty neat isn't it.

54
00:03:50.480 --> 00:03:54.540
For For example if you can see that the game you know should be descending.

55
00:03:54.580 --> 00:04:02.530
This will give us all the platforms and the first game you see on that platform for that platform will

56
00:04:02.530 --> 00:04:04.690
be the last game released for the platform.

57
00:04:04.690 --> 00:04:07.020
So for example we can see that for the platform.

58
00:04:07.070 --> 00:04:11.100
Twenty six hundred game CLAX was released last.

59
00:04:11.170 --> 00:04:13.330
So there are no more games after this.

60
00:04:13.330 --> 00:04:16.040
And then we can scroll further down to find Fredy.

61
00:04:16.120 --> 00:04:25.220
And in Freedia as we can see that they game called puzzle and Dragons was released last but since the

62
00:04:25.230 --> 00:04:30.520
data had this from 2015 it does not mean that this is the last game to be released.

63
00:04:30.520 --> 00:04:33.600
This is the last game to be included in this dataset.

64
00:04:33.640 --> 00:04:38.050
So as you can see there are a lot of different uses for this.

65
00:04:38.050 --> 00:04:48.340
You can also order by names even characters so it doesn't have to be numbers necessarily even though

66
00:04:48.340 --> 00:04:53.470
it just makes more sense to order by numbers rather than letters.

67
00:04:53.470 --> 00:04:59.360
But as you can see if you run this code right now it will order all these games by game name ascending.

68
00:04:59.380 --> 00:05:01.760
So first we have all the symbols go.

69
00:05:01.780 --> 00:05:05.750
So like come like dots commas slashes.

70
00:05:05.830 --> 00:05:12.250
Then we have all numbers go from zero to nine and only then at the very bottom we start having letters

71
00:05:12.250 --> 00:05:12.580
come in.

72
00:05:12.580 --> 00:05:15.400
So a b c d and so on.

73
00:05:15.400 --> 00:05:18.490
So we have a combination of letters.

74
00:05:18.550 --> 00:05:22.600
It will basically go a B a C and so on.

75
00:05:22.600 --> 00:05:23.680
It makes sense.

76
00:05:23.710 --> 00:05:30.280
A lot of programming languages have order by even Excel works that a lot of sorting tools teach you

77
00:05:30.280 --> 00:05:32.820
how to use order by ascending descending.

78
00:05:33.010 --> 00:05:36.220
So I don't think you'll have much problems with this.

79
00:05:36.220 --> 00:05:43.870
But remember that there is far more uses to order by than just the general one that order by the primary

80
00:05:43.870 --> 00:05:44.860
key of the table.

81
00:05:45.100 --> 00:05:52.910
So never forget that and try to find more ways to display the data you need quicker and more efficient.

82
00:05:52.930 --> 00:05:56.560
I hope you enjoyed today's lecture and I'll see you in the next one.
