WEBVTT
1
00:00:00.730 --> 00:00:03.630
Hello and welcome back to the course on databases.

2
00:00:03.760 --> 00:00:08.950
So the Tauriel we checked that this table is in first normal form and we confirmed that.

3
00:00:08.950 --> 00:00:17.560
So let's go ahead and at the top type in a comment and it was say check one an F..

4
00:00:17.800 --> 00:00:23.890
And now we're going to check for the second normal form check to enough.

5
00:00:23.930 --> 00:00:26.550
So let's quickly bring up the slide for the second formal form.

6
00:00:26.630 --> 00:00:28.270
And here's the definition.

7
00:00:28.280 --> 00:00:30.110
A table is in second normal form.

8
00:00:30.110 --> 00:00:35.000
If it isn't first on the form which we have confirmed and every non-prime attribute of the table is

9
00:00:35.000 --> 00:00:37.220
dependent on the whole of every candidate.

10
00:00:37.520 --> 00:00:42.740
So if we remember the mnemonic every non-prime attribute must provide facts about the key the whole

11
00:00:42.740 --> 00:00:44.070
key and nothing but the key.

12
00:00:44.080 --> 00:00:46.470
So we're talking about the whole key.

13
00:00:46.640 --> 00:00:49.200
And as we remember here it's every candidate.

14
00:00:49.240 --> 00:00:53.900
So this should be replaced with the whole of every candidate.

15
00:00:54.140 --> 00:00:55.420
So that's what we're going to be looking at.

16
00:00:55.460 --> 00:00:59.530
Let's go and investigate here.

17
00:00:59.630 --> 00:01:06.680
So basically what this is is we just ran a select store from transaction's so we can just repost it

18
00:01:06.680 --> 00:01:08.380
here so that we know that we ran it.

19
00:01:08.390 --> 00:01:16.850
And all right so what do we want to understand here is that first of all we need to find the Prime and

20
00:01:16.850 --> 00:01:18.520
non-prime attributes right.

21
00:01:18.800 --> 00:01:22.950
And to do that we need to find the candidate keys.

22
00:01:23.000 --> 00:01:25.250
So let's let's go ahead and do that.

23
00:01:25.280 --> 00:01:31.080
Let's find out which of these columns or combinations of columns are candidate keys.

24
00:01:31.220 --> 00:01:40.750
So obviously this column right away is a candidate key because it identifies every single row uniquely.

25
00:01:40.760 --> 00:01:43.570
That's that's the design of this column that's what it's made for.

26
00:01:43.610 --> 00:01:43.880
Right.

27
00:01:43.890 --> 00:01:44.740
It's a transaction ID.

28
00:01:44.750 --> 00:01:46.020
So this is a candidate.

29
00:01:46.370 --> 00:01:48.260
But the question is does it stop there.

30
00:01:48.260 --> 00:01:50.430
Or can we maybe find another candidate.

31
00:01:50.570 --> 00:01:54.050
So how do you go about these things.

32
00:01:54.050 --> 00:02:00.110
Well let's let's try just randomly picking some columns and thinking about it that way and then we will

33
00:02:01.910 --> 00:02:03.500
go about it a bit more logically.

34
00:02:03.500 --> 00:02:05.900
So let's say we pick first name right.

35
00:02:05.900 --> 00:02:08.910
Could first name be the candidate key here right.

36
00:02:08.930 --> 00:02:09.940
How do we think about it.

37
00:02:09.950 --> 00:02:18.230
Well first name cannot uniquely identify every column because here it is the name of the person that

38
00:02:18.230 --> 00:02:22.370
made the purchase and a person can make several purchases right.

39
00:02:22.370 --> 00:02:28.280
So therefore this column would work neither would the column first name surname if you combine these

40
00:02:28.280 --> 00:02:29.010
two columns.

41
00:02:29.090 --> 00:02:34.950
Again it wouldn't work because this is not a table about people on a table of our customers.

42
00:02:34.970 --> 00:02:36.920
This is a table about the purchases they make.

43
00:02:36.950 --> 00:02:47.750
And if a customer makes two purchases then you will not be able to identify.

44
00:02:48.080 --> 00:02:53.000
You will not be able to separate those two rows if your candidate is going to be first name and surname

45
00:02:53.000 --> 00:02:57.130
and therefore first name plus surname is not a candidate key.

46
00:02:57.200 --> 00:02:57.670
What else.

47
00:02:57.710 --> 00:03:03.770
Well let's say item could item be a candidate again item cannot be a candidate for that same reason

48
00:03:03.770 --> 00:03:10.130
that this is a documentation of this table.

49
00:03:10.130 --> 00:03:16.100
Documents all the purchases that happened and a certain item can be purchased several times because

50
00:03:16.610 --> 00:03:22.940
those items are not unique those items are just in stock and this is just an item code it doesn't mean

51
00:03:23.600 --> 00:03:27.580
a unique item it just means a type of item that you quote.

52
00:03:27.620 --> 00:03:31.070
And there's hundreds and maybe thousands of those coats in the warehouse.

53
00:03:31.070 --> 00:03:36.140
And every time it's purchased the same code is used you can see that there's duplicates in this column

54
00:03:36.140 --> 00:03:36.890
already.

55
00:03:37.450 --> 00:03:40.000
And so you can go about.

56
00:03:40.040 --> 00:03:45.080
Think about it that way and just look at individual columns or combinations of columns but the same

57
00:03:45.080 --> 00:03:49.230
time it'll take quite a lot of time because there's lots of combinations of columns as you can imagine.

58
00:03:49.550 --> 00:03:54.870
And therefore the best way to think about it is just to think logically like what is this table about.

59
00:03:54.870 --> 00:03:56.870
What is the purpose of this table.

60
00:03:56.910 --> 00:04:05.180
Always think of the purpose the purpose of this table is to document all of the transactions to have

61
00:04:05.240 --> 00:04:09.500
a trail or a trace of all of these transactions that occurred.

62
00:04:09.680 --> 00:04:10.180
Right.

63
00:04:10.190 --> 00:04:16.660
Hence the transaction ID over here at the start and hence the name of the table is all transactions.

64
00:04:16.700 --> 00:04:25.550
So basically the intention of this table is for every single transaction to be unique in this.

65
00:04:25.550 --> 00:04:29.760
All right so the transaction isn't based on a person isn't based on the item.

66
00:04:29.780 --> 00:04:34.140
It is based on when that transaction happened right.

67
00:04:34.160 --> 00:04:35.630
And who made that transaction.

68
00:04:35.630 --> 00:04:43.790
So those are some of those things that that can help us identify if a transaction is unique.

69
00:04:43.790 --> 00:04:46.700
So let's let's start looking at that.

70
00:04:46.710 --> 00:04:52.110
Right so a transaction is somebody goes online somebody purchase an item and has to be sent to them.

71
00:04:52.340 --> 00:04:58.880
And so here we've got an interesting column time stamps which tells us at which point in time a certain

72
00:04:58.880 --> 00:05:05.660
person purchased a certain item and then it also has the ID of that person.

73
00:05:05.660 --> 00:05:11.520
So the interesting ones that we will want to look at here is the combination of times.

74
00:05:11.570 --> 00:05:15.820
Well first of all can timestamp on its own be a candidate key.

75
00:05:15.890 --> 00:05:22.300
Well the answer is no because even though it's to the second because we have Caudel of country commerce

76
00:05:22.400 --> 00:05:32.000
some over like 900 960 I think 160 to customers there is in this database in this table because we have

77
00:05:32.000 --> 00:05:35.520
so many customers it can hypothetically happens.

78
00:05:35.540 --> 00:05:43.550
So that's two different customers purchased in the same time at the same time all the way to the second.

79
00:05:43.550 --> 00:05:49.820
So at the exact same second two customers could indeed purchase it is probably hard to find.

80
00:05:50.120 --> 00:05:55.700
And like you could look through and maybe you'd find that one of those examples but the point is that

81
00:05:55.700 --> 00:05:59.790
theoretically it's possible and therefore timestamped cannot be that candid.

82
00:05:59.840 --> 00:06:00.200
Right.

83
00:06:00.320 --> 00:06:05.660
If that wasn't possible if we knew for a fact that two customers can purchase same time timestamp would

84
00:06:05.660 --> 00:06:09.060
be a candidate because it would uniquely identify every road.

85
00:06:09.530 --> 00:06:16.910
But what if we combine timestamp and for example item right what if we say those two fields are those

86
00:06:16.910 --> 00:06:19.740
two attributes are accounted.

87
00:06:19.740 --> 00:06:20.890
Could that be the case.

88
00:06:21.050 --> 00:06:32.720
Well is it is it is more it is much less likely that the the two rose would have the same timestamp

89
00:06:32.780 --> 00:06:39.110
and the same item but it still can happen so two different customers could at the same time purchase

90
00:06:39.410 --> 00:06:40.400
the same item.

91
00:06:40.400 --> 00:06:41.070
Right.

92
00:06:41.480 --> 00:06:42.430
And that could happen.

93
00:06:42.440 --> 00:06:45.760
And therefore this combination wouldn't be a candidate.

94
00:06:46.160 --> 00:06:53.030
But now if you look at timestamp Plus customer ID that's much more interesting because if you think

95
00:06:53.030 --> 00:06:59.670
about it a customer cannot physically make two purchases in the same second.

96
00:06:59.770 --> 00:07:05.990
Right because you have to click the checkout button and clicking the checkout button takes at least

97
00:07:05.990 --> 00:07:06.790
one second.

98
00:07:06.860 --> 00:07:07.100
Right.

99
00:07:07.100 --> 00:07:08.750
So we're going to go off that assumption.

100
00:07:08.750 --> 00:07:14.350
Maybe there are some crazy customers or if you're dealing with like crazy quick customers or if you're

101
00:07:14.360 --> 00:07:17.360
dealing with machines.

102
00:07:17.370 --> 00:07:17.580
Right.

103
00:07:17.630 --> 00:07:21.800
If you're if you're this transaction these transactions are happening business to business and they're

104
00:07:21.800 --> 00:07:26.230
happening through robots maybe they could purchase in one second.

105
00:07:26.480 --> 00:07:32.420
But in our case we're going to assume that an individual customer a human sitting in front of the computer

106
00:07:32.990 --> 00:07:42.770
for example here Amy Wilkins cannot make two purchases in one second and therefore the customer ID plus

107
00:07:42.770 --> 00:07:49.790
the time stamp will become a unique identifier for every single row because there are no two rows with

108
00:07:49.790 --> 00:07:55.520
the same time stamp and the same customer ID because if there were that would mean that that customer

109
00:07:55.850 --> 00:08:00.680
had made two purchases in one second which we assume to be impossible.

110
00:08:00.680 --> 00:08:07.610
So therefore the timestamp Plus customer id combination the combination of these two columns is another

111
00:08:07.670 --> 00:08:09.980
candidate key of this table.

112
00:08:10.580 --> 00:08:15.440
So what we have is the result is that we have two candidate keys this combo itself and the combination

113
00:08:15.440 --> 00:08:17.450
of these two columns.

114
00:08:17.510 --> 00:08:18.680
Very interesting isn't it.

115
00:08:18.680 --> 00:08:21.620
This whole I like the way you need to think about these things.

116
00:08:21.620 --> 00:08:29.910
I like the logic that goes into coming up with these solutions and these ideas and like if you don't.

117
00:08:29.930 --> 00:08:34.880
You don't even need to check the rest of the rows you can by looking them understand that there are

118
00:08:34.880 --> 00:08:37.430
no more candidate keys in there right.

119
00:08:37.460 --> 00:08:44.330
So but you do need to like practice a little bit to get the hang of it with time.

120
00:08:44.390 --> 00:08:46.590
And that's exactly what we're doing so we're practicing.

121
00:08:46.670 --> 00:08:50.040
And so now we know that there's this is a can to keep these so they can get.

122
00:08:50.060 --> 00:08:59.510
So the question is which of these columns are our prime attributes and which are our non-prime attributes.

123
00:08:59.570 --> 00:09:02.460
So our prime attributes are the first three.

124
00:09:02.480 --> 00:09:12.110
Right so the prime prime attribute is a column that is part of any or part of at least one candidate

125
00:09:12.110 --> 00:09:12.890
key.

126
00:09:12.980 --> 00:09:20.420
So these three columns are all parts of candidate keys and non-prime attributes are comb's which are

127
00:09:20.420 --> 00:09:24.190
not part of any candidate keys and that these columns are here.

128
00:09:24.260 --> 00:09:26.180
These are non-prime attributes.

129
00:09:26.270 --> 00:09:34.700
So now we're going to go back to our definition and check if this table is conforms to second normal

130
00:09:34.700 --> 00:09:40.820
form and our definition said that every non-prime attribute of the table is dependent on the whole of

131
00:09:40.820 --> 00:09:41.690
every candidate.

132
00:09:41.780 --> 00:09:46.850
All right so we're looking just at these columns now because they are the non-prime attributes these

133
00:09:46.850 --> 00:09:50.230
columns and so on and from 4 and all the way to the end.

134
00:09:50.510 --> 00:09:56.340
And the question is is each one of these columns dependent on ever on the whole of every candidate.

135
00:09:56.570 --> 00:10:02.140
So here's our first candidate and we're going to investigate all of these calls against this candidate.

136
00:10:02.450 --> 00:10:04.460
Well the answer here is obvious.

137
00:10:04.460 --> 00:10:09.680
The answer is yes because the whole of this candidate key is in deed.

138
00:10:09.680 --> 00:10:14.870
This candidate key itself right because it only contains one call me cannot split it apart and therefore

139
00:10:14.870 --> 00:10:20.360
because it uniquely identifies every single row so meaning that this column the first name will depend

140
00:10:20.480 --> 00:10:27.950
fully on the surname and so and so by default if the child if the candidated consists of only one column

141
00:10:28.040 --> 00:10:33.290
by default the that condition is met.

142
00:10:33.290 --> 00:10:38.350
Now let's have a look at this candidate key which consists of two columns.

143
00:10:38.360 --> 00:10:46.340
Right so now we're going to go through all columns here and see if they depend wholly on fully on this

144
00:10:46.340 --> 00:10:51.390
candidate key or part of the candidate keys sufficient to identify them.

145
00:10:51.450 --> 00:10:53.900
Right so first name right away let's start here.

146
00:10:53.900 --> 00:10:59.050
So first name does it require both of these columns for.

147
00:10:59.150 --> 00:11:02.340
Do we require both these columns to identify the person's first name.

148
00:11:02.540 --> 00:11:08.280
Well the answer is no we the customer ID is sufficient to identify the first name.

149
00:11:08.300 --> 00:11:13.210
You don't need the timestamp to the first name will not change if the time stamp changes.

150
00:11:13.220 --> 00:11:13.640
OK.

151
00:11:13.640 --> 00:11:14.210
Interesting.

152
00:11:14.210 --> 00:11:21.320
So there we go we already found one case where the second normal form condition is in met Let's keep

153
00:11:21.320 --> 00:11:21.560
going.

154
00:11:21.560 --> 00:11:26.060
So surname do we need both of these columns to identify surname.

155
00:11:26.060 --> 00:11:27.710
No we don't.

156
00:11:27.830 --> 00:11:30.330
We actually only need customer ID.

157
00:11:30.360 --> 00:11:33.080
Again another call shipping state.

158
00:11:33.110 --> 00:11:39.200
Do we need both or is one column sufficient one to call most efficient the customer ID is sufficient

159
00:11:39.230 --> 00:11:42.370
to identify the state item.

160
00:11:42.440 --> 00:11:46.540
Do we need both columns or is one enough in this case we need both.

161
00:11:46.550 --> 00:11:46.900
Right.

162
00:11:46.910 --> 00:11:51.050
We cannot say that by knowing customer ID we know what that person purchased because we need to know

163
00:11:51.050 --> 00:11:54.770
at what time they purchased to know exactly what they purchased right.

164
00:11:54.770 --> 00:11:59.980
So you cannot identify that just through the customer ID and also you cannot identify just through a

165
00:11:59.990 --> 00:12:06.830
timestamp because again if there could hypothetically be a situation where two people purchased at the

166
00:12:06.830 --> 00:12:12.500
same exact time and they purchase different items then you would not be able to identify what item was

167
00:12:12.500 --> 00:12:15.180
purchased just through the timestamp.

168
00:12:15.500 --> 00:12:19.540
So this call meets the criteria the description of the item.

169
00:12:19.610 --> 00:12:23.910
The same thing basically just like the item that meets the criteria the price.

170
00:12:24.020 --> 00:12:30.650
Again same thing you need both of these and the loyalty loyalty discount actually is interesting because

171
00:12:30.650 --> 00:12:32.930
loyalty discount does.

172
00:12:33.050 --> 00:12:33.620
Lets have a look.

173
00:12:33.620 --> 00:12:37.930
So do we need both of these columns to identify the loyalty discount.

174
00:12:38.090 --> 00:12:41.060
Well lets see is a timestamp sufficient.

175
00:12:41.360 --> 00:12:47.230
No the time is not sufficient because just by knowing at what time something was purchased You wouldn't

176
00:12:47.300 --> 00:12:48.230
know you.

177
00:12:48.360 --> 00:12:52.750
You are not able to identify uniquely the loyalty discount.

178
00:12:52.790 --> 00:12:53.900
Why.

179
00:12:53.930 --> 00:13:00.290
Because again that could be hypothetically a situation where two purchases were made exactly at the

180
00:13:00.290 --> 00:13:04.000
same time and they would have different loyalty discount.

181
00:13:04.010 --> 00:13:05.090
That's possible.

182
00:13:05.090 --> 00:13:06.470
So that's how you think about it.

183
00:13:06.490 --> 00:13:09.690
No you you don't think about it does time to find loyalty discount.

184
00:13:09.700 --> 00:13:16.660
You just think about what happens if there's two rows with exactly the same timestamp.

185
00:13:16.880 --> 00:13:18.410
Will it be.

186
00:13:18.410 --> 00:13:20.780
Is it possible that the discount could be different.

187
00:13:20.780 --> 00:13:26.920
Yes it is possible that the old discount can be different but what about if we take two roles with exactly

188
00:13:26.920 --> 00:13:32.090
the same customer ID will it be possible that the loyalty discount is different.

189
00:13:32.770 --> 00:13:34.730
Yes in that case actually no.

190
00:13:34.750 --> 00:13:39.550
In that case it's not possible that the world is kind of be different because the loyalty discount is

191
00:13:39.550 --> 00:13:43.840
actually tied to the customer and hence it's tied to the customer ID.

192
00:13:43.990 --> 00:13:52.840
So in this case for the lower discount it is sufficient for us to use just one column to identify the

193
00:13:52.840 --> 00:13:59.920
loyalty discount and therefore this column this attribute does not comply with the criteria of the second

194
00:13:59.920 --> 00:14:01.380
normal form.

195
00:14:01.390 --> 00:14:09.250
So our conclusion is that this table is not in second normal form and that these four columns so first

196
00:14:09.250 --> 00:14:17.530
name surname shipping state and loyalty discount are the columns that do not wholly or fully depend

197
00:14:18.010 --> 00:14:25.320
on every single kind of key and in this case is this candidate that they dont fully depend on.

198
00:14:25.340 --> 00:14:31.470
And so what is the result or what is the recommendation here that needs.

199
00:14:31.480 --> 00:14:34.690
What do we need to do to make this table conform.

200
00:14:34.840 --> 00:14:36.550
Well it's pretty straightforward.

201
00:14:36.550 --> 00:14:41.120
What we need to do is we need to separate out these four columns these three and this call.

202
00:14:41.140 --> 00:14:43.030
They need to go into a separate table.

203
00:14:43.030 --> 00:14:43.880
Right.

204
00:14:44.500 --> 00:14:49.050
And so that's our conclusion that's how we think about it.

205
00:14:49.600 --> 00:14:54.820
And it does take some time but I find it quite interesting it's like a little little challenge or a

206
00:14:54.820 --> 00:14:58.160
little riddle you have to solve another We've identified the columns.

207
00:14:58.180 --> 00:15:06.370
The final step for the second normal form would be to make this table or turn this design of this current

208
00:15:06.370 --> 00:15:11.890
database which only contains one table turn the design into a different design which would be in second

209
00:15:11.890 --> 00:15:16.680
normal form and we're going to continue that in the next tutorial.

210
00:15:16.780 --> 00:15:19.920
I look forward see and then and until next I'm happy analyzing.
