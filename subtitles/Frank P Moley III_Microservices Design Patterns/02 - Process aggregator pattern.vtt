WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] The next integration pattern

2
00:00:02.000 --> 00:00:05.001
that we will discuss is an orchestration pattern

3
00:00:05.001 --> 00:00:08.000
called the process aggregator pattern.

4
00:00:08.000 --> 00:00:10.009
The process aggregator is a very straightforward way

5
00:00:10.009 --> 00:00:15.007
within your system to develop complex processes.

6
00:00:15.007 --> 00:00:18.003
When we have multiple data domains

7
00:00:18.003 --> 00:00:21.007
that need to be called together within a business process,

8
00:00:21.007 --> 00:00:24.005
we use business process services.

9
00:00:24.005 --> 00:00:28.000
There may be cases, hopefully infrequently,

10
00:00:28.000 --> 00:00:29.002
where you need to do the same

11
00:00:29.002 --> 00:00:32.001
for business processes themselves.

12
00:00:32.001 --> 00:00:35.001
This is where this pattern comes into play.

13
00:00:35.001 --> 00:00:38.000
So the problem that we need to solve is we have built out

14
00:00:38.000 --> 00:00:41.004
several business processes within our system

15
00:00:41.004 --> 00:00:45.004
but we see a frequent need to call two or more of them

16
00:00:45.004 --> 00:00:48.005
at the same time in certain use cases

17
00:00:48.005 --> 00:00:52.006
and then build a composite response from it.

18
00:00:52.006 --> 00:00:55.004
This is where this pattern shines.

19
00:00:55.004 --> 00:01:00.002
The aggregator provides clients with a single API to call.

20
00:01:00.002 --> 00:01:02.007
This API contract not only handles

21
00:01:02.007 --> 00:01:05.006
the underlying business process calls,

22
00:01:05.006 --> 00:01:10.001
but assembles the payload for the client system.

23
00:01:10.001 --> 00:01:12.001
The process aggregator can

24
00:01:12.001 --> 00:01:16.009
and really should introduce its own processing logic.

25
00:01:16.009 --> 00:01:20.003
If you are building an aggregator to simply group calls

26
00:01:20.003 --> 00:01:21.008
for your clients,

27
00:01:21.008 --> 00:01:24.001
you can leverage a gateway aggregator

28
00:01:24.001 --> 00:01:27.005
or even just keep the calls in the client.

29
00:01:27.005 --> 00:01:30.009
The aggregator really shines from a value perspective

30
00:01:30.009 --> 00:01:34.005
when it is also encapsulating the business logic

31
00:01:34.005 --> 00:01:37.001
for these aggregation calls.

32
00:01:37.001 --> 00:01:40.008
If every client has to reproduce a set of rules

33
00:01:40.008 --> 00:01:43.008
when calling multiple business processes,

34
00:01:43.008 --> 00:01:47.007
you're breaking the don't-repeat-yourself or dry principle.

35
00:01:47.007 --> 00:01:50.008
The aggregator encapsulates that logic

36
00:01:50.008 --> 00:01:54.003
and then has the added benefit of consolidating

37
00:01:54.003 --> 00:01:56.008
the payload out to the client

38
00:01:56.008 --> 00:01:59.006
for the parts of the model that are relevant

39
00:01:59.006 --> 00:02:02.008
for the aggregation call in the first place.

40
00:02:02.008 --> 00:02:07.000
I will urge you to please use this pattern with caution

41
00:02:07.000 --> 00:02:11.001
as it can introduce a choke point in your system.

42
00:02:11.001 --> 00:02:13.009
Consider the case of a loan process,

43
00:02:13.009 --> 00:02:17.000
where there may be several business processes

44
00:02:17.000 --> 00:02:19.009
and multiple data domains of play.

45
00:02:19.009 --> 00:02:23.005
In addition, in order to proceed from one process

46
00:02:23.005 --> 00:02:25.007
to the next, you need to complete

47
00:02:25.007 --> 00:02:29.006
the first business process call completely.

48
00:02:29.006 --> 00:02:31.007
This can make your aggregation call

49
00:02:31.007 --> 00:02:35.005
a very long running process, which in turn,

50
00:02:35.005 --> 00:02:38.007
is a blocking call for the API.

51
00:02:38.007 --> 00:02:43.005
This choke point can bring a distributed system to a crawl

52
00:02:43.005 --> 00:02:49.004
as network I/O increases and wait times also increase.

53
00:02:49.004 --> 00:02:52.003
Once you get into this realm of processing,

54
00:02:52.003 --> 00:02:55.003
you really need to consider asynchronous patterns

55
00:02:55.003 --> 00:02:57.004
instead of aggregators.

56
00:02:57.004 --> 00:02:59.002
Designing and building an aggregator

57
00:02:59.002 --> 00:03:02.005
should look very familiar at this point.

58
00:03:02.005 --> 00:03:04.004
The first thing you need to do is determine

59
00:03:04.004 --> 00:03:10.000
which business processes are needed behind the aggregator.

60
00:03:10.000 --> 00:03:13.000
Ensuring, you know the business processes first

61
00:03:13.000 --> 00:03:17.001
will help you make informed design decisions going forward.

62
00:03:17.001 --> 00:03:21.005
Now you need to determine the processing rules.

63
00:03:21.005 --> 00:03:24.005
Again, once you understand the process

64
00:03:24.005 --> 00:03:26.006
and the processing rules,

65
00:03:26.006 --> 00:03:30.001
you can make better informed decisions going forward.

66
00:03:30.001 --> 00:03:32.003
Now based on the previous steps,

67
00:03:32.003 --> 00:03:35.004
you should be able to define a new model

68
00:03:35.004 --> 00:03:37.004
for your aggregator.

69
00:03:37.004 --> 00:03:39.008
This really shouldn't be as simple pass-through

70
00:03:39.008 --> 00:03:43.000
and consolidation of your underlying processes

71
00:03:43.000 --> 00:03:45.009
because your internal processing rules will add

72
00:03:45.009 --> 00:03:49.002
or modify the model in most use cases.

73
00:03:49.002 --> 00:03:50.008
Once you have your model,

74
00:03:50.008 --> 00:03:55.005
you can design the API based on that model.

75
00:03:55.005 --> 00:03:58.003
Many times, if you design the model right,

76
00:03:58.003 --> 00:04:02.000
you can use standard rest verbs on these models.

77
00:04:02.000 --> 00:04:06.006
But if not, you always have the action pattern as needed.

78
00:04:06.006 --> 00:04:09.008
And finally, you need to wire the service together

79
00:04:09.008 --> 00:04:13.004
and implement the internal processing features.

80
00:04:13.004 --> 00:04:15.002
Once again, and I may sound a little bit

81
00:04:15.002 --> 00:04:17.002
like a broken record here,

82
00:04:17.002 --> 00:04:18.000
but once again,

83
00:04:18.000 --> 00:04:19.009
I will urge you to encapsulate

84
00:04:19.009 --> 00:04:23.001
your internal business processing rules

85
00:04:23.001 --> 00:04:25.006
to prevent a risk of changes down the road,

86
00:04:25.006 --> 00:04:27.008
causing more problems.

87
00:04:27.008 --> 00:04:30.004
This encapsulation helps with design

88
00:04:30.004 --> 00:04:33.007
as well as maintainability of your system.

89
00:04:33.007 --> 00:04:36.009
The aggregator pattern is useful in some cases

90
00:04:36.009 --> 00:04:39.006
and is a good pattern to have in your toolbox.

91
00:04:39.006 --> 00:04:43.003
Just heed the warnings about the pattern before you jump in.

92
00:04:43.003 --> 00:04:45.005
Abstraction for the sake of abstraction

93
00:04:45.005 --> 00:04:46.005
does you no good

94
00:04:46.005 --> 00:04:49.006
in a distributed microservices architecture.

95
00:04:49.006 --> 00:04:52.003
And if you find yourself down that path,

96
00:04:52.003 --> 00:04:54.004
I can almost promise you,

97
00:04:54.004 --> 00:04:57.000
you will see network issues in the future.

