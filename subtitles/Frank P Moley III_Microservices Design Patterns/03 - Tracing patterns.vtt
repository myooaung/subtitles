WEBVTT
1
00:00:00.005 --> 00:00:02.009
- [Frank] In a microservices-based system,

2
00:00:02.009 --> 00:00:05.007
call stacks can quickly get lost.

3
00:00:05.007 --> 00:00:08.009
Enter into the picture tracing patterns.

4
00:00:08.009 --> 00:00:11.007
Tracing is one of those things that, once you build it,

5
00:00:11.007 --> 00:00:15.002
you'll regret not having it before that time.

6
00:00:15.002 --> 00:00:18.004
Consider for a moment a monolithic system.

7
00:00:18.004 --> 00:00:21.007
All code execution from edge to database call

8
00:00:21.007 --> 00:00:24.002
was in a single process.

9
00:00:24.002 --> 00:00:29.000
As such, a code trace will help you recreate the path

10
00:00:29.000 --> 00:00:31.005
that that service call took.

11
00:00:31.005 --> 00:00:34.002
In a microservices architecture, however,

12
00:00:34.002 --> 00:00:37.004
that is gone because calls span processes

13
00:00:37.004 --> 00:00:41.006
as well as network, not jut functions.

14
00:00:41.006 --> 00:00:45.002
Tracing gives you a way to recreate the call stack

15
00:00:45.002 --> 00:00:49.004
by injecting a trace identifier into every call.

16
00:00:49.004 --> 00:00:53.000
The tracing identifier should be injected at the edge

17
00:00:53.000 --> 00:00:55.009
and span all the way to the database call

18
00:00:55.009 --> 00:00:59.008
or even into the database itself, if possible.

19
00:00:59.008 --> 00:01:03.001
By spanning the stack, you can inject the trace ID

20
00:01:03.001 --> 00:01:08.001
into logs and that will help you further diagnose issues.

21
00:01:08.001 --> 00:01:11.008
By leveraging tracing, no call is ever lost,

22
00:01:11.008 --> 00:01:15.006
as long as everyone honors the trace identifier.

23
00:01:15.006 --> 00:01:20.001
Implementations of tracing is relatively straightforward.

24
00:01:20.001 --> 00:01:24.004
First and foremost, use a standards-based approach.

25
00:01:24.004 --> 00:01:28.002
I have worked in environments where a pattern was home-grown

26
00:01:28.002 --> 00:01:30.007
and to be honest, it was painful.

27
00:01:30.007 --> 00:01:34.001
Open standards allow you to use off-the-shelf tooling

28
00:01:34.001 --> 00:01:36.005
to introspect your system.

29
00:01:36.005 --> 00:01:39.009
The trace ID should be injected into the entry point

30
00:01:39.009 --> 00:01:43.001
of your system, be it a browser, an edge service

31
00:01:43.001 --> 00:01:46.009
or any other mechanism, even an ETL.

32
00:01:46.009 --> 00:01:50.006
Every log message should embed the trace ID.

33
00:01:50.006 --> 00:01:52.005
Open standards use headers,

34
00:01:52.005 --> 00:01:54.009
so your logging functions should simply

35
00:01:54.009 --> 00:01:58.000
pull it out of the header and drop it into a tag

36
00:01:58.000 --> 00:02:02.000
on the log message using common taxonomy.

37
00:02:02.000 --> 00:02:04.000
Leverage tracing tools in APM

38
00:02:04.000 --> 00:02:06.008
can help you visualize the call stacks,

39
00:02:06.008 --> 00:02:09.000
which can be helpful to many people

40
00:02:09.000 --> 00:02:12.001
when that 2 a.m. page hits your phone.

41
00:02:12.001 --> 00:02:15.007
As with logging in metrics, don't recreate the wheel.

42
00:02:15.007 --> 00:02:18.005
There are very good patterns out there for systems

43
00:02:18.005 --> 00:02:22.008
as a whole that all play nicely with microservices.

44
00:02:22.008 --> 00:02:26.000
Just use what already exists.

