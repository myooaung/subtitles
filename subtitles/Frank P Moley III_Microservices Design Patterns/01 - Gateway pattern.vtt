WEBVTT
1
00:00:00.005 --> 00:00:03.002
- [Instructor] We will now move from decomposition patterns

2
00:00:03.002 --> 00:00:05.005
into integration patterns.

3
00:00:05.005 --> 00:00:08.000
These patterns allow you to solve orchestration

4
00:00:08.000 --> 00:00:11.004
and Ingress needs across your system as a whole.

5
00:00:11.004 --> 00:00:13.004
The first pattern that we're going to talk about

6
00:00:13.004 --> 00:00:15.004
is the gateway pattern.

7
00:00:15.004 --> 00:00:18.006
The API gateway pattern or gateway pattern

8
00:00:18.006 --> 00:00:21.007
is an Ingress pattern for clients communicating

9
00:00:21.007 --> 00:00:24.002
with your system services.

10
00:00:24.002 --> 00:00:26.002
The problem statement we're trying to solve

11
00:00:26.002 --> 00:00:28.002
is that of chaos.

12
00:00:28.002 --> 00:00:32.007
If we allow any client of any system to access any service

13
00:00:32.007 --> 00:00:36.003
however they wish, operational and maintenance needs

14
00:00:36.003 --> 00:00:40.000
will skyrocket across the system as a whole.

15
00:00:40.000 --> 00:00:44.009
This grows even more chaotic as your clients set increases,

16
00:00:44.009 --> 00:00:47.007
especially if third party vendors

17
00:00:47.007 --> 00:00:50.005
start consuming your APIs.

18
00:00:50.005 --> 00:00:53.008
The gateway pattern is designed to provide a buffer

19
00:00:53.008 --> 00:00:58.007
between the underlying services and the client needs.

20
00:00:58.007 --> 00:01:02.009
That can be accomplished via a facade or a simple proxy,

21
00:01:02.009 --> 00:01:05.007
each having risks and rewards.

22
00:01:05.007 --> 00:01:08.002
This single layer becomes the interface

23
00:01:08.002 --> 00:01:11.002
for the outside world into your system as a whole.

24
00:01:11.002 --> 00:01:15.001
And this includes client systems that you own.

25
00:01:15.001 --> 00:01:19.004
It can simply proxy the calls to your underlying services.

26
00:01:19.004 --> 00:01:23.007
It can mutate the calls, or it can limit the calls

27
00:01:23.007 --> 00:01:27.005
based on what the gateway itself exposes.

28
00:01:27.005 --> 00:01:31.004
This also, however, can become a single point of failure

29
00:01:31.004 --> 00:01:33.005
for a system as a whole.

30
00:01:33.005 --> 00:01:36.009
So care needs to be taken to ensure that it scales

31
00:01:36.009 --> 00:01:40.007
and responds well when the need arises.

32
00:01:40.007 --> 00:01:43.006
One of the most powerful aspects of a gateway

33
00:01:43.006 --> 00:01:46.006
is its ability to mutate the payloads

34
00:01:46.006 --> 00:01:49.004
from your system in a specific way

35
00:01:49.004 --> 00:01:52.008
to the specific consuming client.

36
00:01:52.008 --> 00:01:57.003
In its most simple form, it can proxy the backend calls.

37
00:01:57.003 --> 00:01:59.009
Using a gateway in this way allows you to put

38
00:01:59.009 --> 00:02:03.000
your security and authorization logic

39
00:02:03.000 --> 00:02:05.006
in a single Ingress point.

40
00:02:05.006 --> 00:02:07.009
You can restrict or allow access

41
00:02:07.009 --> 00:02:11.005
based on the client and its credentials.

42
00:02:11.005 --> 00:02:15.000
You can have a simple buffer so your internal system

43
00:02:15.000 --> 00:02:18.004
doesn't have to be exposed publicly.

44
00:02:18.004 --> 00:02:22.006
Only the gateway itself needs public Ingress.

45
00:02:22.006 --> 00:02:26.005
The gateway can also decorate payloads,

46
00:02:26.005 --> 00:02:28.009
oftentimes, we need to have common headers

47
00:02:28.009 --> 00:02:32.002
or other data points in the payload

48
00:02:32.002 --> 00:02:36.009
that are not necessarily relevant to the underlying service.

49
00:02:36.009 --> 00:02:39.007
By using the gateway we can apply that decoration

50
00:02:39.007 --> 00:02:43.002
in one place in a consistent way.

51
00:02:43.002 --> 00:02:47.002
Another powerful aspect is we can do aggregation.

52
00:02:47.002 --> 00:02:51.003
We have many use cases like high bandwidth desktop clients

53
00:02:51.003 --> 00:02:55.005
that can and should consume more data at one time.

54
00:02:55.005 --> 00:02:59.005
So we can use the gateway to aggregate the payloads

55
00:02:59.005 --> 00:03:02.001
under these approved situations,

56
00:03:02.001 --> 00:03:05.000
the gateway makes the underlying calls

57
00:03:05.000 --> 00:03:09.005
and assembles the data into a single payload for the client.

58
00:03:09.005 --> 00:03:12.008
Be very careful here of not applying

59
00:03:12.008 --> 00:03:15.004
business logic when doing this.

60
00:03:15.004 --> 00:03:20.001
It can and will lead to an unmanageable gateway.

61
00:03:20.001 --> 00:03:21.008
If you're going to need business logic

62
00:03:21.008 --> 00:03:24.009
in your aggregation routine, please stay tuned

63
00:03:24.009 --> 00:03:27.009
for the process aggregator pattern.

64
00:03:27.009 --> 00:03:31.000
In a similar vein, you can limit access.

65
00:03:31.000 --> 00:03:34.009
Say for instance, you have a lower bandwidth mobile client

66
00:03:34.009 --> 00:03:37.003
that doesn't have the screen real estate,

67
00:03:37.003 --> 00:03:39.007
let alone the bandwidth to handle

68
00:03:39.007 --> 00:03:43.000
a full call to your underlying API.

69
00:03:43.000 --> 00:03:45.002
The gateway allows you to limit the data

70
00:03:45.002 --> 00:03:48.005
you send to these clients, while not modifying

71
00:03:48.005 --> 00:03:53.008
the underlying services or the calls for other clients.

72
00:03:53.008 --> 00:03:56.009
One of my most favorite benefits of this pattern

73
00:03:56.009 --> 00:04:01.000
is it gives me the ability to provide a movement buffer.

74
00:04:01.000 --> 00:04:04.003
Consider having a web, desktop and mobile clients

75
00:04:04.003 --> 00:04:07.007
for your system, as well as public API clients

76
00:04:07.007 --> 00:04:10.004
you publish to npm or Maven.

77
00:04:10.004 --> 00:04:15.004
The gateway pattern gives you a contract driven API point,

78
00:04:15.004 --> 00:04:20.004
they can be static while the underlying services can change,

79
00:04:20.004 --> 00:04:23.002
migrate and move as needed.

80
00:04:23.002 --> 00:04:26.003
The gateway implementation may change,

81
00:04:26.003 --> 00:04:30.000
but your clients don't need to feel the pain of that change,

82
00:04:30.000 --> 00:04:33.009
because it adheres to your public contract.

83
00:04:33.009 --> 00:04:35.009
The strategy for building a gateway

84
00:04:35.009 --> 00:04:37.009
is actually very straightforward.

85
00:04:37.009 --> 00:04:41.004
First, you need to define your contracts.

86
00:04:41.004 --> 00:04:42.009
You can start small here.

87
00:04:42.009 --> 00:04:47.008
Remember, however, that this is your public touch point.

88
00:04:47.008 --> 00:04:52.007
Now, you expose those APIs in your gateway component.

89
00:04:52.007 --> 00:04:56.007
These APIs are static, or at least passive contracts

90
00:04:56.007 --> 00:05:00.004
and can be tailored for specific clients.

91
00:05:00.004 --> 00:05:03.000
You want to keep the contract solid

92
00:05:03.000 --> 00:05:05.003
so you may build out sets of APIs

93
00:05:05.003 --> 00:05:08.009
for each client independently of the rest,

94
00:05:08.009 --> 00:05:12.007
or just focus on the most dynamic APIs

95
00:05:12.007 --> 00:05:15.008
and expose them as being client specific

96
00:05:15.008 --> 00:05:19.005
along with a core set of global APIs.

97
00:05:19.005 --> 00:05:20.007
If you haven't heard,

98
00:05:20.007 --> 00:05:24.000
I've mentioned passive a few times on purpose.

99
00:05:24.000 --> 00:05:27.005
These APIs are your public touch point.

100
00:05:27.005 --> 00:05:30.009
Nothing and I mean nothing makes a developer

101
00:05:30.009 --> 00:05:35.000
more upset than having to fix code that worked yesterday,

102
00:05:35.000 --> 00:05:38.002
because someone in a third party system

103
00:05:38.002 --> 00:05:41.003
broke the passivity of a contract.

104
00:05:41.003 --> 00:05:44.003
In order to keep these contracts static,

105
00:05:44.003 --> 00:05:48.007
you strict version control like semantic versioning

106
00:05:48.007 --> 00:05:51.003
to keep your APIs growing,

107
00:05:51.003 --> 00:05:56.002
but to help ensure passing behavior.

108
00:05:56.002 --> 00:05:59.000
Of course, the versioning isn't enough.

109
00:05:59.000 --> 00:06:02.003
You have to make your your changes passive as well,

110
00:06:02.003 --> 00:06:05.002
based on that versioning strategy.

111
00:06:05.002 --> 00:06:08.007
Now, you simply implement your gateway.

112
00:06:08.007 --> 00:06:12.007
It is recommended that you build your internal client code

113
00:06:12.007 --> 00:06:16.003
in distinct modules and consume those modules

114
00:06:16.003 --> 00:06:18.005
within your implementation.

115
00:06:18.005 --> 00:06:21.001
By doing this, you could isolate the changes

116
00:06:21.001 --> 00:06:23.000
that are needed on the backend

117
00:06:23.000 --> 00:06:26.004
to support the growth of your internal APIs

118
00:06:26.004 --> 00:06:30.000
as a whole while keeping that public contract solid.

