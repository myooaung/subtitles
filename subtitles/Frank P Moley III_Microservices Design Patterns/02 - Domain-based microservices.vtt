WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Instructor] Domain-based microservices,

2
00:00:02.004 --> 00:00:03.006
as you might imagine,

3
00:00:03.006 --> 00:00:07.000
are based on domain-driven design patterns,

4
00:00:07.000 --> 00:00:08.005
but what does this mean in practice

5
00:00:08.005 --> 00:00:12.001
to someone building out a services architecture?

6
00:00:12.001 --> 00:00:15.003
We will dig into this area where domains come into play,

7
00:00:15.003 --> 00:00:17.000
in this video.

8
00:00:17.000 --> 00:00:20.000
Data domain decomposition is the lowest level

9
00:00:20.000 --> 00:00:22.006
of decomposition that you will usually see

10
00:00:22.006 --> 00:00:24.009
in a microservices architecture.

11
00:00:24.009 --> 00:00:27.007
The core problem we're trying to solve with this

12
00:00:27.007 --> 00:00:30.006
is to make our services more scalable,

13
00:00:30.006 --> 00:00:34.008
as such you'll need them smaller and much more focused.

14
00:00:34.008 --> 00:00:36.009
Decomposition of the domain level

15
00:00:36.009 --> 00:00:39.009
is one of the most efficient ways to do that.

16
00:00:39.009 --> 00:00:44.001
These services are driven by the data domain itself.

17
00:00:44.001 --> 00:00:47.003
They focus on serving the data as it will be used

18
00:00:47.003 --> 00:00:49.009
throughout the system, and applying logic

19
00:00:49.009 --> 00:00:53.005
for the domain itself, and nothing outside of the domain.

20
00:00:53.005 --> 00:00:54.007
And that's key,

21
00:00:54.007 --> 00:00:58.005
only worry about logic within the domain itself.

22
00:00:58.005 --> 00:01:01.002
The underlying schema is not important

23
00:01:01.002 --> 00:01:03.002
when designing these services.

24
00:01:03.002 --> 00:01:07.000
The access patterns for the data is what is important.

25
00:01:07.000 --> 00:01:09.008
That being said, often they will share

26
00:01:09.008 --> 00:01:12.007
some very key characteristics.

27
00:01:12.007 --> 00:01:16.003
The key factor is that they focus on the data patterns,

28
00:01:16.003 --> 00:01:18.003
and the domain itself.

29
00:01:18.003 --> 00:01:20.002
You will build decomposed services

30
00:01:20.002 --> 00:01:23.001
that focus on one data domain.

31
00:01:23.001 --> 00:01:27.002
Sometimes a domain shares enough traits with another

32
00:01:27.002 --> 00:01:30.005
that you will merge them into one single domain.

33
00:01:30.005 --> 00:01:33.003
Sometimes they won't have enough sharing

34
00:01:33.003 --> 00:01:35.003
and you'll need to split them up.

35
00:01:35.003 --> 00:01:38.007
But again, the key here is to focus on your data,

36
00:01:38.007 --> 00:01:42.005
and how it is actually used throughout your system.

37
00:01:42.005 --> 00:01:44.008
When it comes to designing your domain,

38
00:01:44.008 --> 00:01:47.002
and hence your domain services,

39
00:01:47.002 --> 00:01:50.002
there is not a recipe card to make this happen.

40
00:01:50.002 --> 00:01:53.001
Much of the design comes from trial and error

41
00:01:53.001 --> 00:01:54.009
with fast iteration,

42
00:01:54.009 --> 00:01:58.002
but experience will reduce this burden.

43
00:01:58.002 --> 00:02:00.009
Hopefully, it is clear that we should be doing

44
00:02:00.009 --> 00:02:04.004
domain-driven design for the most part of this point.

45
00:02:04.004 --> 00:02:06.003
This course isn't going to be one

46
00:02:06.003 --> 00:02:08.003
on domain-driven design.

47
00:02:08.003 --> 00:02:10.006
That is at least one course in its own.

48
00:02:10.006 --> 00:02:13.004
And in fact, it already exists here in the library,

49
00:02:13.004 --> 00:02:16.008
but we're going to talk about a few basics.

50
00:02:16.008 --> 00:02:18.006
You need to start with the model

51
00:02:18.006 --> 00:02:21.005
when building services around data domains.

52
00:02:21.005 --> 00:02:24.003
You never start with the database.

53
00:02:24.003 --> 00:02:26.002
You start with the model.

54
00:02:26.002 --> 00:02:29.000
The model itself should represent your domain

55
00:02:29.000 --> 00:02:30.008
to the outside world,

56
00:02:30.008 --> 00:02:33.008
and you need to consider how the model is needed,

57
00:02:33.008 --> 00:02:36.001
and how it is consumed.

58
00:02:36.001 --> 00:02:38.009
Next we need to evaluate the actions

59
00:02:38.009 --> 00:02:41.008
that we'll need to perform on these models.

60
00:02:41.008 --> 00:02:44.002
Don't think solely in terms of crud,

61
00:02:44.002 --> 00:02:46.009
and don't think solely in terms of rest.

62
00:02:46.009 --> 00:02:49.004
You can work actions into the API,

63
00:02:49.004 --> 00:02:52.001
if they are applicable to your domain.

64
00:02:52.001 --> 00:02:55.009
Now we need to apply the service definition itself.

65
00:02:55.009 --> 00:02:58.000
We start with the API contract.

66
00:02:58.000 --> 00:03:00.003
Again, we're focusing on the model,

67
00:03:00.003 --> 00:03:02.008
and not the underlying data store.

68
00:03:02.008 --> 00:03:06.006
Then we work our way down to ultimately the storage

69
00:03:06.006 --> 00:03:10.008
of the data and implementation of the actions.

70
00:03:10.008 --> 00:03:13.001
Let's take a look at a visual representation

71
00:03:13.001 --> 00:03:15.004
of how we would build these services.

72
00:03:15.004 --> 00:03:17.007
Obviously in a much simpler scale

73
00:03:17.007 --> 00:03:19.005
than most of you will deal with,

74
00:03:19.005 --> 00:03:22.005
but hopefully it should solidify the topic for you,

75
00:03:22.005 --> 00:03:25.001
because this is so critical.

76
00:03:25.001 --> 00:03:27.003
First, we start with our model design.

77
00:03:27.003 --> 00:03:31.009
This includes all of the attributes of our model itself.

78
00:03:31.009 --> 00:03:35.002
Next, we'll define our actions.

79
00:03:35.002 --> 00:03:37.008
Now you're going to then write your service boundary,

80
00:03:37.008 --> 00:03:41.008
and expose your actions as APIs.

81
00:03:41.008 --> 00:03:45.008
Finally, you build your data store to store the model.

82
00:03:45.008 --> 00:03:49.001
Note, the model doesn't have to match the schema

83
00:03:49.001 --> 00:03:51.005
in the data store itself.

84
00:03:51.005 --> 00:03:54.004
Now, this is a very simplified view of the pattern,

85
00:03:54.004 --> 00:03:57.008
because it is all based on domain-driven design.

86
00:03:57.008 --> 00:03:59.008
Of all the patterns, however,

87
00:03:59.008 --> 00:04:03.000
you will use this one, the most.

