WEBVTT
1
00:00:00.005 --> 00:00:02.002
- [Instructor] We have talked about microservices

2
00:00:02.002 --> 00:00:05.008
being smaller, but what does that really mean?

3
00:00:05.008 --> 00:00:08.008
Consider for a moment how you decompose a problem

4
00:00:08.008 --> 00:00:11.002
when writing a piece of software.

5
00:00:11.002 --> 00:00:15.000
You don't cram everything into a single function and finish.

6
00:00:15.000 --> 00:00:17.008
You break the problem into logical steps

7
00:00:17.008 --> 00:00:21.002
and convert those steps into reusable functions

8
00:00:21.002 --> 00:00:24.006
that can be used as the code base grows.

9
00:00:24.006 --> 00:00:27.004
This is much the same with microservices,

10
00:00:27.004 --> 00:00:30.000
but instead of a single problem statement,

11
00:00:30.000 --> 00:00:30.008
you are looking at all of the problems

12
00:00:30.008 --> 00:00:36.005
across the system as a whole, that you're operating within.

13
00:00:36.005 --> 00:00:39.005
The first area of decomposition we will talk about

14
00:00:39.005 --> 00:00:42.004
is the service types that you can create.

15
00:00:42.004 --> 00:00:45.001
These are designed to provide very specific uses

16
00:00:45.001 --> 00:00:47.006
across the system as a whole.

17
00:00:47.006 --> 00:00:50.006
Each service has a distinct function in the system

18
00:00:50.006 --> 00:00:52.006
and through building these services,

19
00:00:52.006 --> 00:00:56.000
we decompose the problems we need to solve

20
00:00:56.000 --> 00:00:58.005
into smaller blocks of work.

21
00:00:58.005 --> 00:01:01.005
Domain-based services are usually one of the first areas

22
00:01:01.005 --> 00:01:04.005
we attack when building microservices.

23
00:01:04.005 --> 00:01:07.002
We will discuss how we use domain driven design

24
00:01:07.002 --> 00:01:09.002
to build functional domains,

25
00:01:09.002 --> 00:01:13.002
and then break up our system on these domain boundaries.

26
00:01:13.002 --> 00:01:15.005
These domains can further be broken down

27
00:01:15.005 --> 00:01:18.006
into functional needs like data domain services

28
00:01:18.006 --> 00:01:22.000
or ed services, but only if those are called upon,

29
00:01:22.000 --> 00:01:24.008
based on our architecture as a whole.

30
00:01:24.008 --> 00:01:27.001
Another breaking point in service designs

31
00:01:27.001 --> 00:01:30.005
comes from your business processes themselves.

32
00:01:30.005 --> 00:01:35.005
Sometimes, complex processes have so much inherent coupling

33
00:01:35.005 --> 00:01:39.006
that you cannot further break it down into smaller domains

34
00:01:39.006 --> 00:01:42.009
while still maintaining sustainable traffic patterns

35
00:01:42.009 --> 00:01:45.001
across your system as a whole.

36
00:01:45.001 --> 00:01:47.006
Because of the needs of network health,

37
00:01:47.006 --> 00:01:49.003
these business process domains

38
00:01:49.003 --> 00:01:52.006
become a clear point of delineation within your system

39
00:01:52.006 --> 00:01:55.002
without further breaking them down.

40
00:01:55.002 --> 00:01:59.000
Now, in some business models, eventual consistency

41
00:01:59.000 --> 00:02:01.004
isn't an acceptable model.

42
00:02:01.004 --> 00:02:05.001
While these are few and far between for most industries,

43
00:02:05.001 --> 00:02:07.001
there are some use cases for this,

44
00:02:07.001 --> 00:02:10.002
especially in the financial services realm.

45
00:02:10.002 --> 00:02:13.003
As such, business process themselves

46
00:02:13.003 --> 00:02:17.007
maybe too granular to still achieve an atomic state.

47
00:02:17.007 --> 00:02:21.000
So, you need to build your decomposition model

48
00:02:21.000 --> 00:02:24.001
around the atomic transaction itself.

49
00:02:24.001 --> 00:02:25.008
And we're going to get really deep into this

50
00:02:25.008 --> 00:02:28.003
because this is an important point.

51
00:02:28.003 --> 00:02:29.006
Functional use patterns.

52
00:02:29.006 --> 00:02:32.000
We need to talk about ways to achieve this

53
00:02:32.000 --> 00:02:35.006
in a microservices architecture as a whole.

54
00:02:35.006 --> 00:02:37.001
The first one that we will discuss

55
00:02:37.001 --> 00:02:39.007
is a very powerful strategy to migrate

56
00:02:39.007 --> 00:02:43.008
from a monolithic system into a microservices architecture

57
00:02:43.008 --> 00:02:46.002
based on other design patterns.

58
00:02:46.002 --> 00:02:48.007
And that is called the strangler pattern.

59
00:02:48.007 --> 00:02:51.003
It is by far the most common pattern talked about

60
00:02:51.003 --> 00:02:53.005
when dealing with microservices,

61
00:02:53.005 --> 00:02:56.005
because often, we are breaking down monoliths

62
00:02:56.005 --> 00:02:59.003
instead of writing new systems.

63
00:02:59.003 --> 00:03:01.008
Another strategy that we will discuss

64
00:03:01.008 --> 00:03:04.007
that often gets used to promote separation of concerns

65
00:03:04.007 --> 00:03:09.000
across the system as a whole is the sidecar pattern.

66
00:03:09.000 --> 00:03:11.006
This pattern allows us to offload

67
00:03:11.006 --> 00:03:14.005
often operational security functions

68
00:03:14.005 --> 00:03:18.006
into separate functional components that they themselves

69
00:03:18.006 --> 00:03:22.002
get deployed alongside the main service component

70
00:03:22.002 --> 00:03:24.001
so that we don't litter our code

71
00:03:24.001 --> 00:03:26.001
with all of these functional needs

72
00:03:26.001 --> 00:03:28.003
across the system as a whole.

73
00:03:28.003 --> 00:03:30.005
So now, that we have an overview,

74
00:03:30.005 --> 00:03:34.000
let's jump into our domain-based services.

