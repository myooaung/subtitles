WEBVTT
1
00:00:00.005 --> 00:00:02.003
- [Instructor] We will now delve into the world

2
00:00:02.003 --> 00:00:06.003
of data patterns in a microservices-based architecture.

3
00:00:06.003 --> 00:00:09.008
There are really only a few ways to solve your data needs.

4
00:00:09.008 --> 00:00:11.004
But we will start out with what should

5
00:00:11.004 --> 00:00:14.003
be the most common pattern,

6
00:00:14.003 --> 00:00:16.008
the single service database pattern.

7
00:00:16.008 --> 00:00:17.007
As I stated before,

8
00:00:17.007 --> 00:00:20.005
the single service, single database pattern should

9
00:00:20.005 --> 00:00:22.006
be the most common pattern

10
00:00:22.006 --> 00:00:25.005
for all data domain-based services

11
00:00:25.005 --> 00:00:28.000
in a microservices architecture.

12
00:00:28.000 --> 00:00:31.001
The concept is actually very simple,

13
00:00:31.001 --> 00:00:33.002
but can be cost-prohibitive

14
00:00:33.002 --> 00:00:35.009
if used with proprietary databases

15
00:00:35.009 --> 00:00:39.001
or improperly-sized databases.

16
00:00:39.001 --> 00:00:41.007
The problem that we were solving with this pattern

17
00:00:41.007 --> 00:00:43.009
is that of scalability.

18
00:00:43.009 --> 00:00:46.005
In a microservices architecture,

19
00:00:46.005 --> 00:00:48.007
the service scalability needs should

20
00:00:48.007 --> 00:00:53.005
be proportional to the database scaling needs.

21
00:00:53.005 --> 00:00:56.006
As load on a single service increases,

22
00:00:56.006 --> 00:01:01.000
the associated use of the database will also increase.

23
00:01:01.000 --> 00:01:04.006
This can cause you to size the database based

24
00:01:04.006 --> 00:01:07.005
on a single service peak needs when

25
00:01:07.005 --> 00:01:11.000
the entire system is under utilized.

26
00:01:11.000 --> 00:01:13.003
In this pattern, each data domain

27
00:01:13.003 --> 00:01:17.008
that you build gets its own dedicated data store.

28
00:01:17.008 --> 00:01:21.006
The caveat here is that if the domain also

29
00:01:21.006 --> 00:01:25.000
is included in an atomic transaction,

30
00:01:25.000 --> 00:01:27.008
you have to be a little bit less fine grained.

31
00:01:27.008 --> 00:01:30.007
So hard and fast rules seldom apply,

32
00:01:30.007 --> 00:01:33.008
it's really best case effort.

33
00:01:33.008 --> 00:01:36.004
As your service scales in this pattern,

34
00:01:36.004 --> 00:01:40.002
your data store itself also scales.

35
00:01:40.002 --> 00:01:42.007
This is the key benefit of this pattern,

36
00:01:42.007 --> 00:01:45.002
because the data domain is isolated,

37
00:01:45.002 --> 00:01:48.008
and the data store itself is also isolated,

38
00:01:48.008 --> 00:01:53.009
you can scale both of them up or down without impacting

39
00:01:53.009 --> 00:01:56.001
this system as a whole.

40
00:01:56.001 --> 00:01:58.001
If you really build this right,

41
00:01:58.001 --> 00:02:00.004
you could actually isolate your data

42
00:02:00.004 --> 00:02:04.009
per region while your system still functions as a whole,

43
00:02:04.009 --> 00:02:06.002
but that's much more advanced

44
00:02:06.002 --> 00:02:09.002
than we're going to discuss in this course.

45
00:02:09.002 --> 00:02:11.005
So let's visualize what this will look

46
00:02:11.005 --> 00:02:14.009
like in a simplified systems architecture.

47
00:02:14.009 --> 00:02:17.003
You start with a single service

48
00:02:17.003 --> 00:02:19.007
and its single data store.

49
00:02:19.007 --> 00:02:21.003
Now, to color this a little bit,

50
00:02:21.003 --> 00:02:22.007
we'll add two more services,

51
00:02:22.007 --> 00:02:25.007
each of which has its own database.

52
00:02:25.007 --> 00:02:29.002
Now, we have load on our first data service.

53
00:02:29.002 --> 00:02:33.009
So, we scale the services independently of anything else,

54
00:02:33.009 --> 00:02:37.000
adding two more instances.

55
00:02:37.000 --> 00:02:41.001
This causes increased load on our database,

56
00:02:41.001 --> 00:02:43.009
so we need to scale it as well.

57
00:02:43.009 --> 00:02:46.001
Now most often, this is accomplished by making

58
00:02:46.001 --> 00:02:48.002
the database itself bigger,

59
00:02:48.002 --> 00:02:50.002
giving it more IOPS,

60
00:02:50.002 --> 00:02:54.001
and in doing so, we've scaled our service independently

61
00:02:54.001 --> 00:02:57.000
of any other service, including the data stores.

