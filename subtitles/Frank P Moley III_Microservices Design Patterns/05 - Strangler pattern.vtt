WEBVTT
1
00:00:00.005 --> 00:00:01.006
- [Instructor] Now that we have discussed

2
00:00:01.006 --> 00:00:04.006
some of the most common decomposition patterns,

3
00:00:04.006 --> 00:00:07.005
we need to talk for a bit about how to get there

4
00:00:07.005 --> 00:00:09.008
from a legacy system.

5
00:00:09.008 --> 00:00:11.005
So, let's talk about the strangler pattern

6
00:00:11.005 --> 00:00:14.006
from a high level concept point of view.

7
00:00:14.006 --> 00:00:16.007
It really is a simple pattern

8
00:00:16.007 --> 00:00:20.000
as long as you can plan appropriately.

9
00:00:20.000 --> 00:00:22.007
The idea behind the pattern as a whole,

10
00:00:22.007 --> 00:00:24.007
is start with your monolith

11
00:00:24.007 --> 00:00:29.004
and then essentially strangling your dependencies off of it.

12
00:00:29.004 --> 00:00:32.005
You shard your services off piece by piece,

13
00:00:32.005 --> 00:00:35.005
into new microservice endpoints,

14
00:00:35.005 --> 00:00:38.003
point the dependency to the new microservice,

15
00:00:38.003 --> 00:00:41.000
and eventually, deprecate the functionality

16
00:00:41.000 --> 00:00:43.009
out of your monolith, once all of the dependencies

17
00:00:43.009 --> 00:00:46.008
are weaned off of it or strangled.

18
00:00:46.008 --> 00:00:50.005
You can break your services off at the API layer first,

19
00:00:50.005 --> 00:00:54.005
by building out the API and underlying service,

20
00:00:54.005 --> 00:00:58.006
and then, moving the database itself behind it,

21
00:00:58.006 --> 00:01:00.006
assuming it's a data domain service

22
00:01:00.006 --> 00:01:02.007
that you are sharding, of course.

23
00:01:02.007 --> 00:01:05.006
You can likewise start at the data store itself

24
00:01:05.006 --> 00:01:09.007
and move the domains out and then traverse up the tree

25
00:01:09.007 --> 00:01:12.006
to the business processes, and so on,

26
00:01:12.006 --> 00:01:14.006
depending on which part of your system

27
00:01:14.006 --> 00:01:16.005
is causing the most pain,

28
00:01:16.005 --> 00:01:20.006
be it the database or the API itself will help you determine

29
00:01:20.006 --> 00:01:23.008
which of these two strategies to employ.

30
00:01:23.008 --> 00:01:25.006
Essentially, both are the same.

31
00:01:25.006 --> 00:01:28.002
You're carving functionality out of the monolith

32
00:01:28.002 --> 00:01:30.003
and replace it with a properly designed

33
00:01:30.003 --> 00:01:33.001
microservice artifact within your system.

34
00:01:33.001 --> 00:01:35.006
You move the processing to the new microservice

35
00:01:35.006 --> 00:01:39.002
and eventually, your monolith has strangled away.

36
00:01:39.002 --> 00:01:41.006
Okay, so, let's look at the bottom up type

37
00:01:41.006 --> 00:01:43.005
of strangling a monolith.

38
00:01:43.005 --> 00:01:46.009
Now, this of course, is going to be a very simple example,

39
00:01:46.009 --> 00:01:48.009
but we're going to start with our monolith.

40
00:01:48.009 --> 00:01:52.000
It has a couple of clients and a database.

41
00:01:52.000 --> 00:01:53.003
Now, within our monolith,

42
00:01:53.003 --> 00:01:57.009
we identify two business processes within it.

43
00:01:57.009 --> 00:02:01.003
We then define three distinct data access areas

44
00:02:01.003 --> 00:02:04.002
that can be defined as data domains.

45
00:02:04.002 --> 00:02:05.009
In the bottoms up approach,

46
00:02:05.009 --> 00:02:09.002
where we will use a single service database design,

47
00:02:09.002 --> 00:02:10.004
and don't worry about that term,

48
00:02:10.004 --> 00:02:11.009
we're going to talk about it later.

49
00:02:11.009 --> 00:02:14.005
But for now, just know that each data domain

50
00:02:14.005 --> 00:02:16.006
gets its own database.

51
00:02:16.006 --> 00:02:19.002
But we don't want to do it all at once.

52
00:02:19.002 --> 00:02:20.003
First thing we need to do,

53
00:02:20.003 --> 00:02:24.004
is we need to build a single new instance database.

54
00:02:24.004 --> 00:02:27.000
Next, we need to build our data domain.

55
00:02:27.000 --> 00:02:29.002
Of course, at some point here,

56
00:02:29.002 --> 00:02:32.005
we will need to sync the data and keep it in sync,

57
00:02:32.005 --> 00:02:35.004
but that's beyond the scope of this course.

58
00:02:35.004 --> 00:02:39.008
Now, we move our client over to use this data domain.

59
00:02:39.008 --> 00:02:42.004
It's important to note that it may still communicate

60
00:02:42.004 --> 00:02:44.009
with the monolith for other purposes.

61
00:02:44.009 --> 00:02:48.006
So for now, we're going to leave that link in place.

62
00:02:48.006 --> 00:02:51.006
Once all the data is moved over and the usage

63
00:02:51.006 --> 00:02:54.007
from all clients are gone from the monolith,

64
00:02:54.007 --> 00:02:57.002
we can remove the data access block

65
00:02:57.002 --> 00:02:59.009
and the data from the original database,

66
00:02:59.009 --> 00:03:02.000
as well as all of our syncing logic

67
00:03:02.000 --> 00:03:04.005
that we have put in place.

68
00:03:04.005 --> 00:03:07.005
Now, we're going to migrate a business process

69
00:03:07.005 --> 00:03:10.000
and we'll start by building out the service

70
00:03:10.000 --> 00:03:12.001
as we previously talked about.

71
00:03:12.001 --> 00:03:14.002
For the purpose of this business process,

72
00:03:14.002 --> 00:03:16.004
we need to have a couple of data domains.

73
00:03:16.004 --> 00:03:18.008
So, we'll go ahead and move one other one over

74
00:03:18.008 --> 00:03:21.000
and build out a new business process

75
00:03:21.000 --> 00:03:24.000
to consume both of them.

76
00:03:24.000 --> 00:03:29.000
Once again, we connect the client to our business process.

77
00:03:29.000 --> 00:03:30.002
Now, in this example,

78
00:03:30.002 --> 00:03:32.007
we will actually remove the calls to the monolith

79
00:03:32.007 --> 00:03:37.006
from the client and all the internal code can be deprecated.

80
00:03:37.006 --> 00:03:40.000
Eventually, with this pattern,

81
00:03:40.000 --> 00:03:42.002
you will strangle the monolith completely

82
00:03:42.002 --> 00:03:45.009
from being consumed from clients, and at that point,

83
00:03:45.009 --> 00:03:49.000
the monolith itself can be deprecated.

