WEBVTT
1
00:00:00.005 --> 00:00:02.003
- [Instructor] Now we're going to dive into our final set

2
00:00:02.003 --> 00:00:05.009
of patterns, which are operational patterns.

3
00:00:05.009 --> 00:00:07.006
Now these are unique and that they're more about

4
00:00:07.006 --> 00:00:12.003
how you run your system than how you build your system.

5
00:00:12.003 --> 00:00:14.009
But these are tried and true methods.

6
00:00:14.009 --> 00:00:16.001
The first one that we're going to talk

7
00:00:16.001 --> 00:00:18.008
about is log aggregation.

8
00:00:18.008 --> 00:00:21.004
So I'll dive into this pattern by first talking

9
00:00:21.004 --> 00:00:25.006
about the source and that is the logs themselves.

10
00:00:25.006 --> 00:00:27.008
The problem that we are trying to solve

11
00:00:27.008 --> 00:00:31.006
is that operationally, we need to know what is going on

12
00:00:31.006 --> 00:00:33.004
with our systems.

13
00:00:33.004 --> 00:00:37.003
When errors occur, we need a way to quickly diagnose

14
00:00:37.003 --> 00:00:40.003
and resolve the errors and logs are one of

15
00:00:40.003 --> 00:00:43.005
the single best places to look.

16
00:00:43.005 --> 00:00:46.009
Logs are invaluable if done right.

17
00:00:46.009 --> 00:00:50.003
Logs provide detailed information of the runtime behavior

18
00:00:50.003 --> 00:00:53.000
of your microservice artifact.

19
00:00:53.000 --> 00:00:56.000
Through other operational patterns that we'll talk about,

20
00:00:56.000 --> 00:00:58.008
logs can be written and linked

21
00:00:58.008 --> 00:01:02.005
to other systems logs as well.

22
00:01:02.005 --> 00:01:07.008
As such, logging must be consistent across services.

23
00:01:07.008 --> 00:01:11.002
As we start doing log aggregation and indexing,

24
00:01:11.002 --> 00:01:14.003
consistency, not only within a single service

25
00:01:14.003 --> 00:01:18.008
but across the entire system becomes critical.

26
00:01:18.008 --> 00:01:22.001
The structure and format of your logs therefore

27
00:01:22.001 --> 00:01:25.008
must be consistent and enforced across the system

28
00:01:25.008 --> 00:01:27.000
as a whole.

29
00:01:27.000 --> 00:01:31.004
While polyglot programming can make this more difficult,

30
00:01:31.004 --> 00:01:35.003
the time spent making your log output consistent

31
00:01:35.003 --> 00:01:37.006
will be well worth it.

32
00:01:37.006 --> 00:01:41.008
Beyond simple structure and possibly more important,

33
00:01:41.008 --> 00:01:45.006
because of the ability to process logs via aggregation,

34
00:01:45.006 --> 00:01:48.007
is the need for common taxonomy.

35
00:01:48.007 --> 00:01:51.009
Domain level taxonomy and logs should be shared

36
00:01:51.009 --> 00:01:56.001
across every consumer and related service.

37
00:01:56.001 --> 00:02:00.008
Identifiers and core values across your log messages

38
00:02:00.008 --> 00:02:04.004
should be keyed the same, and well documented

39
00:02:04.004 --> 00:02:07.000
so that everyone knows what those keys are,

40
00:02:07.000 --> 00:02:09.004
and what keys they should be using

41
00:02:09.004 --> 00:02:11.009
when they write log messages.

42
00:02:11.009 --> 00:02:15.000
Log aggregation is a key pattern in the operations

43
00:02:15.000 --> 00:02:17.008
of a microservices based system.

44
00:02:17.008 --> 00:02:21.004
In monolithic models, the log messages usually all go

45
00:02:21.004 --> 00:02:23.007
to the same output.

46
00:02:23.007 --> 00:02:27.008
As such, they are essentially aggregated on their own.

47
00:02:27.008 --> 00:02:31.005
With microservices however, it's a different thing.

48
00:02:31.005 --> 00:02:33.000
The problem we need to solve is

49
00:02:33.000 --> 00:02:35.002
that our logs are everywhere.

50
00:02:35.002 --> 00:02:38.004
Each service writes its own logs and dumps them

51
00:02:38.004 --> 00:02:41.001
to output of some kind.

52
00:02:41.001 --> 00:02:45.001
The output locations usually are unique per service,

53
00:02:45.001 --> 00:02:50.002
and can be very difficult to follow in a stateless flow.

54
00:02:50.002 --> 00:02:52.004
Log aggregation is, as you might imagine,

55
00:02:52.004 --> 00:02:55.005
a way to aggregate the various output locations

56
00:02:55.005 --> 00:02:58.001
into a single stream of data.

57
00:02:58.001 --> 00:03:00.004
This aggregation takes on many forms,

58
00:03:00.004 --> 00:03:02.006
but the key here is that at the end,

59
00:03:02.006 --> 00:03:06.003
the logs all end up in one place.

60
00:03:06.003 --> 00:03:09.008
Part of that aggregation can and should be parsing

61
00:03:09.008 --> 00:03:11.004
of the logs.

62
00:03:11.004 --> 00:03:14.005
This is where the log structure is so important.

63
00:03:14.005 --> 00:03:16.007
Logs usually have a message and a bunch

64
00:03:16.007 --> 00:03:20.001
of metadata called tags that are associated

65
00:03:20.001 --> 00:03:21.008
with that message.

66
00:03:21.008 --> 00:03:24.003
The more structured the logs are,

67
00:03:24.003 --> 00:03:27.002
the less parsing you have to do on them

68
00:03:27.002 --> 00:03:30.002
because of a limited set of rules.

69
00:03:30.002 --> 00:03:32.001
The reality is that the faster you can

70
00:03:32.001 --> 00:03:35.006
get your logs aggregated, the faster you can use log data

71
00:03:35.006 --> 00:03:38.001
to diagnose issues.

72
00:03:38.001 --> 00:03:41.001
Correlation of log messages is where the real power

73
00:03:41.001 --> 00:03:44.007
comes into play, and why things like structure and taxonomy

74
00:03:44.007 --> 00:03:46.004
are so important.

75
00:03:46.004 --> 00:03:48.005
We will talk about tracing later,

76
00:03:48.005 --> 00:03:52.001
but ensuring tracing identifiers are injected into logs

77
00:03:52.001 --> 00:03:57.006
the exact same way across every service with the same key

78
00:03:57.006 --> 00:04:03.004
will allow you to recreate call stacks of errant processes.

79
00:04:03.004 --> 00:04:07.006
In addition, taxonomy will help you identify issues

80
00:04:07.006 --> 00:04:09.009
as well as have a clear picture

81
00:04:09.009 --> 00:04:13.003
of what those identifiers actually mean.

82
00:04:13.003 --> 00:04:16.002
Finally, and sometimes considered optional,

83
00:04:16.002 --> 00:04:18.008
is the indexing of logs.

84
00:04:18.008 --> 00:04:20.002
Well, I would never build

85
00:04:20.002 --> 00:04:22.009
a log aggregation system without it.

86
00:04:22.009 --> 00:04:26.006
Some may be comfortable searching logs sequentially.

87
00:04:26.006 --> 00:04:30.007
For me, however, indexing the logs for rapid searching

88
00:04:30.007 --> 00:04:33.009
using a common structure, and common taxonomy,

89
00:04:33.009 --> 00:04:35.007
is the way to go.

90
00:04:35.007 --> 00:04:37.005
Logging as a whole is one of those things

91
00:04:37.005 --> 00:04:41.003
that you should just use off the shelf components for.

92
00:04:41.003 --> 00:04:43.006
Structured logging frameworks exist

93
00:04:43.006 --> 00:04:46.005
and almost every language has them.

94
00:04:46.005 --> 00:04:48.003
Log parsing and shipping exists

95
00:04:48.003 --> 00:04:52.002
for almost every common aggregation platform.

96
00:04:52.002 --> 00:04:55.009
You just need to build a common taxonomy and document it,

97
00:04:55.009 --> 00:04:58.000
and then let the tools do their job

98
00:04:58.000 --> 00:05:00.000
across your system as a whole.

