WEBVTT
1
00:00:00.005 --> 00:00:02.001
- [Instructor] Before we get too deep

2
00:00:02.001 --> 00:00:05.000
into the world of microservices design patterns,

3
00:00:05.000 --> 00:00:06.009
I want to level set on the vernacular

4
00:00:06.009 --> 00:00:10.000
that I will use when discussing microservices.

5
00:00:10.000 --> 00:00:12.003
These are not authoritative.

6
00:00:12.003 --> 00:00:16.001
These are just the terminology I learned and grew up on.

7
00:00:16.001 --> 00:00:17.008
When I discuss microservices,

8
00:00:17.008 --> 00:00:20.009
I leverage these terms often, and as such,

9
00:00:20.009 --> 00:00:22.000
I just want to define them

10
00:00:22.000 --> 00:00:24.003
so that you know where I'm coming from.

11
00:00:24.003 --> 00:00:25.007
The first set of terms that I want

12
00:00:25.007 --> 00:00:27.007
to define are service types.

13
00:00:27.007 --> 00:00:29.002
These will be critical to understanding

14
00:00:29.002 --> 00:00:32.000
how various patterns are implemented.

15
00:00:32.000 --> 00:00:34.004
A data service is that which connects

16
00:00:34.004 --> 00:00:37.000
to a data source within the system.

17
00:00:37.000 --> 00:00:39.008
This does not mean databases alone.

18
00:00:39.008 --> 00:00:44.000
Any valid source that can be served through a microservice.

19
00:00:44.000 --> 00:00:46.007
Data services are usually bound by domains defined

20
00:00:46.007 --> 00:00:49.006
within the global architecture of the system.

21
00:00:49.006 --> 00:00:51.009
Examples of these services abound,

22
00:00:51.009 --> 00:00:54.004
but a simple one to understand is a product service

23
00:00:54.004 --> 00:00:56.005
that deals with a product domain.

24
00:00:56.005 --> 00:01:00.000
Usually, these domains have details about products,

25
00:01:00.000 --> 00:01:02.002
but not inventory or orders,

26
00:01:02.002 --> 00:01:05.008
so they can be built as individual data services.

27
00:01:05.008 --> 00:01:09.002
A business service is a higher level of abstraction

28
00:01:09.002 --> 00:01:11.009
that builds on data services.

29
00:01:11.009 --> 00:01:14.005
Often, we need to define business domains

30
00:01:14.005 --> 00:01:17.005
that transcend individual data services

31
00:01:17.005 --> 00:01:20.009
in order to be correct from the business perspective.

32
00:01:20.009 --> 00:01:24.008
Business services can be built around a single data domain

33
00:01:24.008 --> 00:01:28.000
if there is more complex business processing

34
00:01:28.000 --> 00:01:31.001
that needs to be done in order to operate correctly

35
00:01:31.001 --> 00:01:32.007
within the system.

36
00:01:32.007 --> 00:01:36.000
One of the best examples of this is an order domain.

37
00:01:36.000 --> 00:01:37.001
To place an order,

38
00:01:37.001 --> 00:01:40.002
you need to have a product and customer data.

39
00:01:40.002 --> 00:01:42.006
You also need the inventory data to ensure

40
00:01:42.006 --> 00:01:44.003
that the product is available,

41
00:01:44.003 --> 00:01:46.008
and then, as the order is placed,

42
00:01:46.008 --> 00:01:48.003
you need to charge the customer

43
00:01:48.003 --> 00:01:51.001
while decreasing your inventory counts.

44
00:01:51.001 --> 00:01:54.009
As you can see, these are usually much more complex systems

45
00:01:54.009 --> 00:01:57.000
than a simple data domain.

46
00:01:57.000 --> 00:02:00.004
A translation service is any abstraction

47
00:02:00.004 --> 00:02:04.004
on a third party operation that you want to encapsulate

48
00:02:04.004 --> 00:02:06.004
under your own facade.

49
00:02:06.004 --> 00:02:09.004
Think of something like an email sending service.

50
00:02:09.004 --> 00:02:11.009
You may actually consume this service

51
00:02:11.009 --> 00:02:15.002
from various parts within your system as a whole,

52
00:02:15.002 --> 00:02:18.000
but you want to decorate that with sending logs

53
00:02:18.000 --> 00:02:21.001
and specific credentials that you don't want littered

54
00:02:21.001 --> 00:02:23.001
throughout your overall system.

55
00:02:23.001 --> 00:02:25.005
As such, you encapsulate the service

56
00:02:25.005 --> 00:02:28.002
with your own translation service.

57
00:02:28.002 --> 00:02:31.005
The beauty of these services, and why I really like them,

58
00:02:31.005 --> 00:02:34.003
is that when you change vendors, or versions,

59
00:02:34.003 --> 00:02:36.003
of the third party system,

60
00:02:36.003 --> 00:02:39.001
you can maintain your service API

61
00:02:39.001 --> 00:02:41.007
and consume the new underlying service

62
00:02:41.007 --> 00:02:44.008
without any other code having to change.

63
00:02:44.008 --> 00:02:46.007
An edge service is responsible

64
00:02:46.007 --> 00:02:50.009
for serving data to users and external services.

65
00:02:50.009 --> 00:02:54.001
These services can be used to provide a web view,

66
00:02:54.001 --> 00:02:56.004
a service that delivers that content,

67
00:02:56.004 --> 00:03:00.002
and other services that deliver to mobile devices.

68
00:03:00.002 --> 00:03:04.002
Often, we use edge services to slim down our payloads

69
00:03:04.002 --> 00:03:06.004
to make them more mobile friendly,

70
00:03:06.004 --> 00:03:09.007
or provide modified payloads that meet the need

71
00:03:09.007 --> 00:03:11.009
of a third party contract.

72
00:03:11.009 --> 00:03:14.006
While edge services aren't always used,

73
00:03:14.006 --> 00:03:16.001
they can be a powerful layer

74
00:03:16.001 --> 00:03:19.006
in a complete microservices architecture.

75
00:03:19.006 --> 00:03:21.004
When describing a platform,

76
00:03:21.004 --> 00:03:25.001
there are many different things that people can think of.

77
00:03:25.001 --> 00:03:26.007
For the perspective of this course,

78
00:03:26.007 --> 00:03:28.007
I will consider the platform

79
00:03:28.007 --> 00:03:33.001
as the all-encompassing arena for all service operations

80
00:03:33.001 --> 00:03:37.008
across multiple data centers, but thinking of it as whole.

81
00:03:37.008 --> 00:03:39.000
First and foremost,

82
00:03:39.000 --> 00:03:42.000
and definitely what people consider the platform,

83
00:03:42.000 --> 00:03:44.000
is the runtime itself.

84
00:03:44.000 --> 00:03:46.004
This can include bare metal servers,

85
00:03:46.004 --> 00:03:49.009
virtualization through VMs, either public or private,

86
00:03:49.009 --> 00:03:51.004
or containerized runtimes

87
00:03:51.004 --> 00:03:53.009
like Kubernetes or Cloud Foundry.

88
00:03:53.009 --> 00:03:57.003
I have spent time in each and every one of these runtimes

89
00:03:57.003 --> 00:03:58.009
and I will be the first to admit

90
00:03:58.009 --> 00:04:01.000
that none of them is perfect.

91
00:04:01.000 --> 00:04:02.008
Running on bare metal servers

92
00:04:02.008 --> 00:04:05.003
definitely is the most performant,

93
00:04:05.003 --> 00:04:08.002
but there's a lot of pain associated with that.

94
00:04:08.002 --> 00:04:09.004
Kubernetes, on the other hand,

95
00:04:09.004 --> 00:04:11.003
is one of the most flexible,

96
00:04:11.003 --> 00:04:14.000
but, again, it has its own pain points

97
00:04:14.000 --> 00:04:16.007
and I cannot recommend one way or another,

98
00:04:16.007 --> 00:04:17.009
but I will tell you this,

99
00:04:17.009 --> 00:04:20.001
if you are running on multiple data centers,

100
00:04:20.001 --> 00:04:22.005
especially public and private mixed,

101
00:04:22.005 --> 00:04:26.006
containerization starts to become more and more attractive.

102
00:04:26.006 --> 00:04:29.000
There are also a host of ancillary services

103
00:04:29.000 --> 00:04:32.005
that you don't write, but that you run within the runtime

104
00:04:32.005 --> 00:04:35.008
that are included in that platform definition.

105
00:04:35.008 --> 00:04:39.000
These can be things like message queues, cash services,

106
00:04:39.000 --> 00:04:41.005
authentication and authorization services,

107
00:04:41.005 --> 00:04:43.003
and various others.

108
00:04:43.003 --> 00:04:45.006
Some of these may be first class services

109
00:04:45.006 --> 00:04:47.000
for your organization.

110
00:04:47.000 --> 00:04:49.007
Like in mine, authentication and authorization

111
00:04:49.007 --> 00:04:53.002
is a first class service that we build upon.

112
00:04:53.002 --> 00:04:55.009
The key here is that the platform should include

113
00:04:55.009 --> 00:05:00.006
everything that your applications need to get work done.

114
00:05:00.006 --> 00:05:03.005
Also included are operational components.

115
00:05:03.005 --> 00:05:06.003
These are things like log aggregators and shippers,

116
00:05:06.003 --> 00:05:08.005
metrics aggregators and shippers,

117
00:05:08.005 --> 00:05:11.009
and various other operations that you need to have running

118
00:05:11.009 --> 00:05:16.000
in your platform in order to maintain operational integrity.

119
00:05:16.000 --> 00:05:17.004
If I have learned anything,

120
00:05:17.004 --> 00:05:20.005
especially in the move to more mission critical systems,

121
00:05:20.005 --> 00:05:22.004
it's that operational components

122
00:05:22.004 --> 00:05:25.005
should never be overlooked in a platform.

123
00:05:25.005 --> 00:05:29.000
And, finally, I want to talk about diagnostic components.

124
00:05:29.000 --> 00:05:31.003
These are anything from simple shell scripts

125
00:05:31.003 --> 00:05:33.009
that you execute on your local machine

126
00:05:33.009 --> 00:05:36.006
to containers running in your runtime

127
00:05:36.006 --> 00:05:39.008
that enable you to connect and perform operations

128
00:05:39.008 --> 00:05:42.000
from within the runtime itself

129
00:05:42.000 --> 00:05:46.004
to diagnose, troubleshoot, and improve system performance.

130
00:05:46.004 --> 00:05:49.003
For instance, we run a container in our runtime

131
00:05:49.003 --> 00:05:52.004
that our team uses to connect internally

132
00:05:52.004 --> 00:05:56.008
to the Kubernetes runtime itself in a secure fashion.

133
00:05:56.008 --> 00:06:00.007
This allows us to test both low level components like DNS

134
00:06:00.007 --> 00:06:04.000
as well as test the network and associated services

135
00:06:04.000 --> 00:06:05.009
within the runtime.

136
00:06:05.009 --> 00:06:07.009
So now that we have had a little conversation

137
00:06:07.009 --> 00:06:11.008
about the vernacular and perspective of the term platform,

138
00:06:11.008 --> 00:06:14.000
let's talk about cloud native.

