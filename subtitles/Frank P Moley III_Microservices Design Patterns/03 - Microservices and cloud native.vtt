WEBVTT
1
00:00:00.005 --> 00:00:03.006
- [Instructor] Let me start by saying one thing very clear,

2
00:00:03.006 --> 00:00:07.001
Microservices do not make a system Cloud Native.

3
00:00:07.001 --> 00:00:11.002
And Cloud Native doesn't require Microservices.

4
00:00:11.002 --> 00:00:13.009
All too often this topic gets confounded.

5
00:00:13.009 --> 00:00:17.004
And I want to be very clear from the beginning about this.

6
00:00:17.004 --> 00:00:18.007
Now, from my perspective,

7
00:00:18.007 --> 00:00:21.003
and from the perspective of this course,

8
00:00:21.003 --> 00:00:25.001
we're going to focus more on how to utilize Microservices

9
00:00:25.001 --> 00:00:28.008
in a Cloud Native pattern for building our system.

10
00:00:28.008 --> 00:00:30.002
Why you may ask?

11
00:00:30.002 --> 00:00:32.001
Because Cloud Native can literally run

12
00:00:32.001 --> 00:00:35.003
anywhere, not just in the cloud.

13
00:00:35.003 --> 00:00:39.001
So let's talk a little bit about what Cloud Native means.

14
00:00:39.001 --> 00:00:42.007
First of all, Cloud Native is an architectural style.

15
00:00:42.007 --> 00:00:46.008
What that means is that it isn't a pattern per say,

16
00:00:46.008 --> 00:00:48.008
of how to solve a problem.

17
00:00:48.008 --> 00:00:53.004
Instead, it is a way of doing processes and building systems

18
00:00:53.004 --> 00:00:56.003
to facilitate an end goal.

19
00:00:56.003 --> 00:00:59.009
Cloud Native is designed primarily to facilitate

20
00:00:59.009 --> 00:01:01.008
operating in the cloud.

21
00:01:01.008 --> 00:01:05.004
This is a very distinct meaning in Cloud Native environment.

22
00:01:05.004 --> 00:01:08.008
It includes things like externalizing configuration,

23
00:01:08.008 --> 00:01:10.008
focusing on scalability,

24
00:01:10.008 --> 00:01:13.006
making your application startup fast,

25
00:01:13.006 --> 00:01:16.008
and handle immediate shutdowns gracefully.

26
00:01:16.008 --> 00:01:18.004
There's a whole plethora of ways

27
00:01:18.004 --> 00:01:21.003
to represent Cloud Native applications.

28
00:01:21.003 --> 00:01:23.009
Be them things like 12-factors, 15-factors,

29
00:01:23.009 --> 00:01:25.007
or whatever you may call it.

30
00:01:25.007 --> 00:01:28.000
I have a course here in the library called

31
00:01:28.000 --> 00:01:30.002
Twelve-Factor Application development

32
00:01:30.002 --> 00:01:32.004
that I encourage you to look at when wanting

33
00:01:32.004 --> 00:01:34.007
to learn more about Cloud Native.

34
00:01:34.007 --> 00:01:39.001
One very clear key and summed up in much of the operations

35
00:01:39.001 --> 00:01:42.005
needs, is that Cloud Native applications are designed

36
00:01:42.005 --> 00:01:45.003
to be portable and scalable.

37
00:01:45.003 --> 00:01:48.006
Portability comes into play when you can deploy or move your

38
00:01:48.006 --> 00:01:51.002
applications anywhere globally

39
00:01:51.002 --> 00:01:55.003
and they still work without adding additional code.

40
00:01:55.003 --> 00:01:58.009
Scalability entails building your applications to run

41
00:01:58.009 --> 00:02:02.005
as a single unit or multiple units,

42
00:02:02.005 --> 00:02:05.007
depending on the overall needs of your system.

43
00:02:05.007 --> 00:02:08.008
Advanced designs like using auto scaling to allow

44
00:02:08.008 --> 00:02:11.007
your services to scale up or down

45
00:02:11.007 --> 00:02:13.008
based on the overall system load,

46
00:02:13.008 --> 00:02:16.008
increase the need for this scalability.

47
00:02:16.008 --> 00:02:20.003
It is very important to note that Cloud Native designs

48
00:02:20.003 --> 00:02:22.009
can be run in a single datacenter.

49
00:02:22.009 --> 00:02:26.001
There is nothing that prevents you from building

50
00:02:26.001 --> 00:02:29.007
Cloud Native applications and running them in your corporate

51
00:02:29.007 --> 00:02:31.009
single instance datacenter.

52
00:02:31.009 --> 00:02:34.006
This is perfectly acceptable and actually,

53
00:02:34.006 --> 00:02:39.000
it's a very powerful way to do things because it will allow

54
00:02:39.000 --> 00:02:42.006
you to grow to multiple datacenters as your business

55
00:02:42.006 --> 00:02:45.002
and user needs also grow.

56
00:02:45.002 --> 00:02:47.005
So now let's talk about Microservices a bit

57
00:02:47.005 --> 00:02:50.001
and that's after all, why you're here.

58
00:02:50.001 --> 00:02:52.005
I want to start by saying that this is very

59
00:02:52.005 --> 00:02:55.004
open to personal interpretation.

60
00:02:55.004 --> 00:02:57.005
There is no clear definition

61
00:02:57.005 --> 00:03:00.009
of what makes a Microservice micro.

62
00:03:00.009 --> 00:03:04.000
I have seen nano services that go overboard,

63
00:03:04.000 --> 00:03:08.004
and I've seen smaller mono less that don't go far enough.

64
00:03:08.004 --> 00:03:11.005
Microservices are what you make them.

65
00:03:11.005 --> 00:03:15.004
But dependency graphs help determine the right size.

66
00:03:15.004 --> 00:03:18.009
And we'll talk quite a bit about this throughout the course.

67
00:03:18.009 --> 00:03:21.009
For now, we will just talk about Microservices

68
00:03:21.009 --> 00:03:24.009
being smaller scoped units of work.

69
00:03:24.009 --> 00:03:28.005
When we used to build large war files in the Java world

70
00:03:28.005 --> 00:03:30.000
that had multiple endpoints,

71
00:03:30.000 --> 00:03:33.004
sometimes hundreds or thousands of them that covered

72
00:03:33.004 --> 00:03:37.008
many business domains, we would then deploy these monolithic

73
00:03:37.008 --> 00:03:40.006
war files as part of an ear often,

74
00:03:40.006 --> 00:03:43.006
to large WebLogic or WebSphere servers,

75
00:03:43.006 --> 00:03:46.001
running as a single JVM.

76
00:03:46.001 --> 00:03:49.003
Scaling these systems was a massive undertaking.

77
00:03:49.003 --> 00:03:53.003
Microservices are all about breaking those endpoints

78
00:03:53.003 --> 00:03:55.006
into distinct units of work,

79
00:03:55.006 --> 00:04:00.003
so we can scale them independently, among other things.

80
00:04:00.003 --> 00:04:04.006
Microservices are built to focus on units of work that span

81
00:04:04.006 --> 00:04:08.008
data domains, business domains, or functional domains,

82
00:04:08.008 --> 00:04:11.006
each as individual units.

83
00:04:11.006 --> 00:04:14.005
We look at call patterns and dependency graphs to find

84
00:04:14.005 --> 00:04:18.002
the sweet spot where the service boundary should be.

85
00:04:18.002 --> 00:04:21.005
But the core concept here is that Microservices

86
00:04:21.005 --> 00:04:24.001
can scale independently.

87
00:04:24.001 --> 00:04:27.001
If your customer domain is experiencing high request

88
00:04:27.001 --> 00:04:30.003
volumes, but your order domain isn't,

89
00:04:30.003 --> 00:04:34.006
you can scale one without impacting the other and eating

90
00:04:34.006 --> 00:04:38.003
up your compute resources unnecessarily.

91
00:04:38.003 --> 00:04:41.005
The most important point in my mind is these are not

92
00:04:41.005 --> 00:04:44.002
monolithic service artifacts.

93
00:04:44.002 --> 00:04:45.009
I don't get too far in the weeds

94
00:04:45.009 --> 00:04:48.007
of where to break them down appropriately.

95
00:04:48.007 --> 00:04:52.005
Instead, I focus on them being individually scalable,

96
00:04:52.005 --> 00:04:56.000
hence, they are not monolithic artifacts.

97
00:04:56.000 --> 00:04:59.004
Now, I have some services that may be considered large

98
00:04:59.004 --> 00:05:00.009
in some circles.

99
00:05:00.009 --> 00:05:03.008
But I leveraged dependencies call patterns and focus

100
00:05:03.008 --> 00:05:06.006
from there, not really caring about the size

101
00:05:06.006 --> 00:05:09.001
when I'm defining a Microservice.

102
00:05:09.001 --> 00:05:11.007
So there may be very little overlap in the previous

103
00:05:11.007 --> 00:05:15.004
two slides between Cloud Native and Microservices.

104
00:05:15.004 --> 00:05:17.009
But often we hear these concepts talked

105
00:05:17.009 --> 00:05:20.001
about at the same time.

106
00:05:20.001 --> 00:05:23.006
Both Cloud Native development practices and Microservices

107
00:05:23.006 --> 00:05:27.006
architectures, put an emphasis on building scalability

108
00:05:27.006 --> 00:05:30.007
into your application and system as a whole.

109
00:05:30.007 --> 00:05:33.007
Now, often, when building Cloud Native systems,

110
00:05:33.007 --> 00:05:38.000
Microservices appears to be clear path to getting there.

111
00:05:38.000 --> 00:05:40.003
And this can muddy the water some when talking

112
00:05:40.003 --> 00:05:42.007
about these two topics.

113
00:05:42.007 --> 00:05:45.006
It is important to note that you can do Cloud Native

114
00:05:45.006 --> 00:05:48.008
development without building Microservices.

115
00:05:48.008 --> 00:05:51.008
And likewise, you can build micro services,

116
00:05:51.008 --> 00:05:54.008
not targeting Cloud Native deployments.

117
00:05:54.008 --> 00:05:57.008
It is important to make sure that this is clear.

118
00:05:57.008 --> 00:06:01.000
All too often I hear people talking about one topic,

119
00:06:01.000 --> 00:06:03.000
and implying the other.

120
00:06:03.000 --> 00:06:06.000
I have seen monolithic applications written

121
00:06:06.000 --> 00:06:07.006
to be Cloud Native.

122
00:06:07.006 --> 00:06:11.004
And I've seen Microservices designs that could never run

123
00:06:11.004 --> 00:06:13.004
in a public or private cloud

124
00:06:13.004 --> 00:06:16.002
without significant refactoring.

125
00:06:16.002 --> 00:06:19.005
So I do want to discuss for one moment here, why these very

126
00:06:19.005 --> 00:06:23.006
distinct concepts often get discussed together?

127
00:06:23.006 --> 00:06:27.000
And the answer simply is because they do go hand

128
00:06:27.000 --> 00:06:29.003
in hand very often.

129
00:06:29.003 --> 00:06:32.009
I would not consider a new Cloud Native deployment

130
00:06:32.009 --> 00:06:36.001
without using Microservices architectures,

131
00:06:36.001 --> 00:06:38.006
at least at the current time.

132
00:06:38.006 --> 00:06:41.003
There just is so much crossover when solving

133
00:06:41.003 --> 00:06:44.008
the needs for scalability, to not use Microservices

134
00:06:44.008 --> 00:06:47.004
when building a Cloud Native system.

135
00:06:47.004 --> 00:06:50.003
So then, as we talk about this in this course

136
00:06:50.003 --> 00:06:53.007
about Microservices, consider that we will be directing

137
00:06:53.007 --> 00:06:56.008
this conversation towards Microservices built

138
00:06:56.008 --> 00:07:00.004
for Cloud Native deployments because most often

139
00:07:00.004 --> 00:07:02.007
even though they are so distinct,

140
00:07:02.007 --> 00:07:06.007
they work so well together to solve the common problem.

141
00:07:06.007 --> 00:07:09.005
So please, just take into account that even though some may

142
00:07:09.005 --> 00:07:12.001
consider them requirements of each other,

143
00:07:12.001 --> 00:07:15.000
that is not the truth in any way, shape or form.

