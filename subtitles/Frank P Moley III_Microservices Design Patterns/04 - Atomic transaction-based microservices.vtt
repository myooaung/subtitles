WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] There are potentially times

2
00:00:02.000 --> 00:00:04.002
in a microservice's architecture

3
00:00:04.002 --> 00:00:07.005
where you need to have true atomic transactions

4
00:00:07.005 --> 00:00:11.004
because eventual consistency isn't good enough.

5
00:00:11.004 --> 00:00:14.009
Atomic transactions are sometimes needed in a system.

6
00:00:14.009 --> 00:00:19.001
When those atomic transactions span multiple data domains

7
00:00:19.001 --> 00:00:23.003
there is a distinct need to build special logic and systems

8
00:00:23.003 --> 00:00:26.002
to handle these unique use cases.

9
00:00:26.002 --> 00:00:29.000
One of the primary characteristics of these services

10
00:00:29.000 --> 00:00:33.003
is the need to guarantee ACID compliant transactions

11
00:00:33.003 --> 00:00:35.009
across more than one data domain.

12
00:00:35.009 --> 00:00:39.004
If you need atomic transactions in a single domain,

13
00:00:39.004 --> 00:00:42.003
there is no need to specialize a service

14
00:00:42.003 --> 00:00:46.001
because the underlying implementation is hidden.

15
00:00:46.001 --> 00:00:47.009
You may need to provide services

16
00:00:47.009 --> 00:00:50.008
that support failure domains and, within those domains,

17
00:00:50.008 --> 00:00:55.000
provide rollback of the entire domain's scope.

18
00:00:55.000 --> 00:00:58.004
These services force a blocking API call

19
00:00:58.004 --> 00:01:00.008
until the commit is successful.

20
00:01:00.008 --> 00:01:04.002
While you can logically do these asynchronously,

21
00:01:04.002 --> 00:01:07.007
usually the caller needs a guarantee of success

22
00:01:07.007 --> 00:01:13.002
or an error, so the API must be synchronous and blocking.

23
00:01:13.002 --> 00:01:15.005
You may be tempted to use data domains

24
00:01:15.005 --> 00:01:17.008
with distributed transactions.

25
00:01:17.008 --> 00:01:21.009
I would highly suggest you stop and don't do this

26
00:01:21.009 --> 00:01:25.005
because of the complexity that it adds to your system.

27
00:01:25.005 --> 00:01:29.000
Designing these atomic services is very simple,

28
00:01:29.000 --> 00:01:32.006
but you need to do some homework first.

29
00:01:32.006 --> 00:01:34.006
First, you need to ensure

30
00:01:34.006 --> 00:01:38.004
that you really must have the service be atomic.

31
00:01:38.004 --> 00:01:42.008
While many times people say they need atomic transactions,

32
00:01:42.008 --> 00:01:46.001
the cases of actually needing them are fewer

33
00:01:46.001 --> 00:01:47.009
and further between.

34
00:01:47.009 --> 00:01:49.007
Spend some time and make sure

35
00:01:49.007 --> 00:01:53.001
that your stakeholders understand the complexity

36
00:01:53.001 --> 00:01:56.001
as well as the constraints that this puts on your system

37
00:01:56.001 --> 00:01:58.008
as a whole and try to encourage them

38
00:01:58.008 --> 00:02:00.009
to look at other options.

39
00:02:00.009 --> 00:02:02.007
But, at the end, they may decide

40
00:02:02.007 --> 00:02:05.002
that they need an atomic transaction,

41
00:02:05.002 --> 00:02:08.006
and when they do, your next step is to ensure

42
00:02:08.006 --> 00:02:12.002
that your underlying data domains share a database.

43
00:02:12.002 --> 00:02:14.004
If they don't, you need to merge them

44
00:02:14.004 --> 00:02:16.008
into a single shared database

45
00:02:16.008 --> 00:02:20.000
in order to build your atomic service.

46
00:02:20.000 --> 00:02:23.007
This risk also needs to be understood by all involved

47
00:02:23.007 --> 00:02:28.009
as well because now you're modifying existing functionality.

48
00:02:28.009 --> 00:02:32.007
You'll also need to get clear and concise rules defined

49
00:02:32.007 --> 00:02:35.000
about the transaction.

50
00:02:35.000 --> 00:02:37.003
Because this will be a blocking call

51
00:02:37.003 --> 00:02:40.009
that is not a normal thing on a distributed system,

52
00:02:40.009 --> 00:02:44.002
make sure everything, including rollback conditions,

53
00:02:44.002 --> 00:02:46.002
are well defined.

54
00:02:46.002 --> 00:02:49.005
Consider documenting these rules in code comments

55
00:02:49.005 --> 00:02:52.007
or readme files for future reference.

56
00:02:52.007 --> 00:02:56.003
Finally, you need to implement the service as normal,

57
00:02:56.003 --> 00:03:01.000
but consider fast failure before even starting a transaction

58
00:03:01.000 --> 00:03:04.001
as a much more serious concept.

59
00:03:04.001 --> 00:03:08.002
Rollbacks take time, especially in a blocking call,

60
00:03:08.002 --> 00:03:11.004
and those confirmations from remote systems

61
00:03:11.004 --> 00:03:14.003
can become bottlenecks.

62
00:03:14.003 --> 00:03:16.000
A final word here on these.

63
00:03:16.000 --> 00:03:18.007
If you can avoid them, please do.

64
00:03:18.007 --> 00:03:22.005
They muddy the water for distributed systems as a whole.

65
00:03:22.005 --> 00:03:25.003
You cannot adequately distribute the databases

66
00:03:25.003 --> 00:03:27.001
as effectively.

67
00:03:27.001 --> 00:03:29.009
You cannot avoid network congestion.

68
00:03:29.009 --> 00:03:33.007
Try to sell your stakeholders on eventual consistency

69
00:03:33.007 --> 00:03:35.008
or simulated rollbacks.

70
00:03:35.008 --> 00:03:38.009
But each of these also has pain points of its own

71
00:03:38.009 --> 00:03:41.004
and all options really need to be considered

72
00:03:41.004 --> 00:03:44.000
before walking down a single path.

