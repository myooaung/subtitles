WEBVTT
1
00:00:00.006 --> 00:00:02.006
- [Instructor] Of all the data patterns from Microservices

2
00:00:02.006 --> 00:00:04.007
we will discuss in this course,

3
00:00:04.007 --> 00:00:08.007
the Command Query Responsibility Segregation pattern

4
00:00:08.007 --> 00:00:12.003
is by far the most complex of them all.

5
00:00:12.003 --> 00:00:17.001
CQRS is one of the most ethereal concepts of Microservices.

6
00:00:17.001 --> 00:00:20.006
Those that get it well and can implement it successfully,

7
00:00:20.006 --> 00:00:23.003
can dramatically improve their data behavior

8
00:00:23.003 --> 00:00:25.008
across the system as a whole.

9
00:00:25.008 --> 00:00:27.006
The core pattern we are solving

10
00:00:27.006 --> 00:00:30.007
is that our data access patterns diverge

11
00:00:30.007 --> 00:00:35.007
from traditional CRUD to more complex multi-model patterns

12
00:00:35.007 --> 00:00:40.004
within a single bounded context or data delay.

13
00:00:40.004 --> 00:00:44.003
This becomes more clear as we have multiple interfaces.

14
00:00:44.003 --> 00:00:48.008
In CQRS model, query interfaces may transform

15
00:00:48.008 --> 00:00:52.000
and aggregate the schema to represent the model

16
00:00:52.000 --> 00:00:54.004
in a very specific use.

17
00:00:54.004 --> 00:00:58.004
However, the right interfaces may inject behavior

18
00:00:58.004 --> 00:01:00.003
and infer characteristics

19
00:01:00.003 --> 00:01:03.000
based on an entirely different model

20
00:01:03.000 --> 00:01:04.006
and set of rules.

21
00:01:04.006 --> 00:01:08.000
But the underlying data becomes the same

22
00:01:08.000 --> 00:01:10.006
through eventual consistency.

23
00:01:10.006 --> 00:01:14.006
Now obviously this is a very clear divergence from CRUD,

24
00:01:14.006 --> 00:01:17.002
where a model has a unified set of rules

25
00:01:17.002 --> 00:01:19.001
about reading and writing.

26
00:01:19.001 --> 00:01:21.009
In CQRS, we diverge dramatically

27
00:01:21.009 --> 00:01:25.008
and apply different rules, as I previously stated.

28
00:01:25.008 --> 00:01:29.000
As you might imagine, this dramatically increases

29
00:01:29.000 --> 00:01:31.005
complexity of the system.

30
00:01:31.005 --> 00:01:34.005
When you need this special type of processing

31
00:01:34.005 --> 00:01:37.003
and want to go beyond business processes

32
00:01:37.003 --> 00:01:40.001
to accomplish this access pattern,

33
00:01:40.001 --> 00:01:44.003
CQRS can be great if implemented correctly.

34
00:01:44.003 --> 00:01:48.006
But, if it isn't it can cause a nightmare

35
00:01:48.006 --> 00:01:52.005
from a maintainability and operational perspective.

36
00:01:52.005 --> 00:01:55.000
So, you may ask, when is the complexity

37
00:01:55.000 --> 00:01:58.000
worth the pain of CQRS?

38
00:01:58.000 --> 00:01:59.009
A common place that it is attempted

39
00:01:59.009 --> 00:02:03.001
is with task-based user interfaces.

40
00:02:03.001 --> 00:02:06.007
As the write model focuses on the tasks,

41
00:02:06.007 --> 00:02:09.009
the read models are based on the system state

42
00:02:09.009 --> 00:02:14.004
after the interactions from that task.

43
00:02:14.004 --> 00:02:17.000
Because of how these systems work,

44
00:02:17.000 --> 00:02:21.001
eventual consistency isn't just something you can live with

45
00:02:21.001 --> 00:02:22.009
it's a must have.

46
00:02:22.009 --> 00:02:27.002
You must fully accept that you cannot read data

47
00:02:27.002 --> 00:02:31.004
that was just written and be guaranteed its state.

48
00:02:31.004 --> 00:02:36.000
As such, your use cases must match this model.

49
00:02:36.000 --> 00:02:40.000
Furthermore, event-driven models also play well

50
00:02:40.000 --> 00:02:41.008
in this use case.

51
00:02:41.008 --> 00:02:44.001
When triggers and system events occur

52
00:02:44.001 --> 00:02:47.009
from the write operations, the CQRS model works well

53
00:02:47.009 --> 00:02:53.001
because reading what was just written doesn't make sense.

54
00:02:53.001 --> 00:02:55.005
Now, this is where I'm going to stop for this course.

55
00:02:55.005 --> 00:02:58.002
I'm not going to go much deeper into this pattern.

56
00:02:58.002 --> 00:03:00.004
We've exposed it and introduced it,

57
00:03:00.004 --> 00:03:02.007
but the reality is that I could spend hours

58
00:03:02.007 --> 00:03:04.003
working through the ins and out

59
00:03:04.003 --> 00:03:06.000
of how to build this correctly

60
00:03:06.000 --> 00:03:10.004
and it still wouldn't solve the needs of your use case.

61
00:03:10.004 --> 00:03:13.009
If you find yourself traveling down this road

62
00:03:13.009 --> 00:03:15.007
do some homework on the topic.

63
00:03:15.007 --> 00:03:19.008
And spend some significant time and design

64
00:03:19.008 --> 00:03:23.000
before you even create the empty project

65
00:03:23.000 --> 00:03:25.000
that will house your code.

66
00:03:25.000 --> 00:03:27.001
This is a very complex topic

67
00:03:27.001 --> 00:03:29.000
and if you read many blog posts

68
00:03:29.000 --> 00:03:32.004
you will see failure after failure of implementing this

69
00:03:32.004 --> 00:03:34.002
because it's not easy.

70
00:03:34.002 --> 00:03:36.004
But like I said before, when it's done right

71
00:03:36.004 --> 00:03:39.001
it is extremely powerful

72
00:03:39.001 --> 00:03:42.009
and it reduces the complexity of your system as a whole,

73
00:03:42.009 --> 00:03:47.000
even though this component itself becomes much more complex.

