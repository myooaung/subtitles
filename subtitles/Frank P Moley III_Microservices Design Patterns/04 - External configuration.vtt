WEBVTT
1
00:00:00.006 --> 00:00:02.002
- [Instructor] Externalized configuration

2
00:00:02.002 --> 00:00:04.006
in a microservices architecture isn't a hard

3
00:00:04.006 --> 00:00:07.006
and fast requirement like it is for cloud native

4
00:00:07.006 --> 00:00:11.003
but its value becomes operationally important when load

5
00:00:11.003 --> 00:00:14.003
and movement of services occurs.

6
00:00:14.003 --> 00:00:17.003
The value proposition for externalized configuration

7
00:00:17.003 --> 00:00:19.006
and micro services is more

8
00:00:19.006 --> 00:00:22.007
about operations than distribution.

9
00:00:22.007 --> 00:00:25.006
When you have systems running and issues occur,

10
00:00:25.006 --> 00:00:28.008
having a clear spot to see configuration outside

11
00:00:28.008 --> 00:00:33.007
of code can greatly impact the meantime to resolution.

12
00:00:33.007 --> 00:00:37.002
Externalization of your configuration varies based

13
00:00:37.002 --> 00:00:41.003
on your runtime as well as the frameworks being used.

14
00:00:41.003 --> 00:00:45.000
Runtimes like Kubernetes and frameworks like Spring,

15
00:00:45.000 --> 00:00:48.009
have sophisticated models to inject configuration

16
00:00:48.009 --> 00:00:53.004
into your application but many other tools do as well.

17
00:00:53.004 --> 00:00:55.004
The key here is to use tooling

18
00:00:55.004 --> 00:00:59.006
that makes external environmental variables easy to find,

19
00:00:59.006 --> 00:01:01.008
as well as manipulate.

20
00:01:01.008 --> 00:01:03.008
Well, it may not seem like a huge deal,

21
00:01:03.008 --> 00:01:07.007
consistent naming could also be very helpful.

22
00:01:07.007 --> 00:01:10.007
Again, always look at operational patterns

23
00:01:10.007 --> 00:01:14.006
from the perspective of the on-call engineer being woken up

24
00:01:14.006 --> 00:01:16.006
in the middle of the night.

25
00:01:16.006 --> 00:01:19.006
If you consistently call a variable X,

26
00:01:19.006 --> 00:01:24.008
except in one case, when you get a page on that one case,

27
00:01:24.008 --> 00:01:28.007
you may find that your resolution time suffers.

28
00:01:28.007 --> 00:01:30.004
When defining which values

29
00:01:30.004 --> 00:01:33.006
for configuration should be externalized,

30
00:01:33.006 --> 00:01:36.009
my recommendation is to always err on the side

31
00:01:36.009 --> 00:01:38.009
of externalization.

32
00:01:38.009 --> 00:01:42.004
It doesn't hurt to expose too much config

33
00:01:42.004 --> 00:01:45.009
but if you don't expose enough, resolution

34
00:01:45.009 --> 00:01:48.004
and troubleshooting may suffer.

35
00:01:48.004 --> 00:01:53.000
On that line however, there is a need to protect secrets.

36
00:01:53.000 --> 00:01:55.009
Secrets can and should be externalized

37
00:01:55.009 --> 00:02:00.003
in most implementations through special constructs

38
00:02:00.003 --> 00:02:05.003
but ensure the on-call team has a path to get them securely

39
00:02:05.003 --> 00:02:08.006
while not exposing them to prying eyes.

40
00:02:08.006 --> 00:02:11.003
Externalized config is not a hard concept

41
00:02:11.003 --> 00:02:14.008
but I do want to talk about the pattern and how it applies.

42
00:02:14.008 --> 00:02:18.000
First and foremost, config is usually injected

43
00:02:18.000 --> 00:02:21.002
into your service or retrieved

44
00:02:21.002 --> 00:02:24.007
as part of the startup routine for your framework.

45
00:02:24.007 --> 00:02:27.000
These values then become available

46
00:02:27.000 --> 00:02:30.001
to your code through various mechanisms

47
00:02:30.001 --> 00:02:32.008
and each language has very specific ways

48
00:02:32.008 --> 00:02:35.004
of accessing these values.

49
00:02:35.004 --> 00:02:37.007
Your service should then be written

50
00:02:37.007 --> 00:02:43.002
to utilize these values in favor of the embedded values.

51
00:02:43.002 --> 00:02:45.009
I say embedded because I do believe in the use

52
00:02:45.009 --> 00:02:49.004
of defaults where they make sense.

53
00:02:49.004 --> 00:02:52.009
Once again, there's a lot of common libraries, toolings

54
00:02:52.009 --> 00:02:55.009
and patterns within each language

55
00:02:55.009 --> 00:02:58.004
that will help you consume, use

56
00:02:58.004 --> 00:03:02.000
and flex behavior based on various values.

57
00:03:02.000 --> 00:03:05.009
Once again, use what already exists.

58
00:03:05.009 --> 00:03:09.001
The basic pattern however, is always the same.

59
00:03:09.001 --> 00:03:14.004
Read the config, flex your behavior as necessary and act,

60
00:03:14.004 --> 00:03:16.000
it's simple enough.

