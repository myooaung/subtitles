WEBVTT
1
00:00:00.006 --> 00:00:03.006
- [Instructor] Sometimes when building out decompositions,

2
00:00:03.006 --> 00:00:08.004
you run into more complex processes in certain cases.

3
00:00:08.004 --> 00:00:13.006
Often, these processes don't fit into a single domain,

4
00:00:13.006 --> 00:00:18.008
but the domains themselves can live in a standalone fashion.

5
00:00:18.008 --> 00:00:23.005
Enter into the picture business process-based microservices.

6
00:00:23.005 --> 00:00:26.001
A business process service can help you build

7
00:00:26.001 --> 00:00:29.005
a more structured microservices architecture.

8
00:00:29.005 --> 00:00:31.007
The problem that you may be faced with

9
00:00:31.007 --> 00:00:34.005
is that in order to replicate business processes

10
00:00:34.005 --> 00:00:36.005
across different components,

11
00:00:36.005 --> 00:00:40.005
you have to recreate the same code logic multiple times.

12
00:00:40.005 --> 00:00:44.000
Especially, when they span multiple domains.

13
00:00:44.000 --> 00:00:47.005
In order to adhere to the don't repeat yourself principle

14
00:00:47.005 --> 00:00:50.002
and to help simplify your architecture,

15
00:00:50.002 --> 00:00:52.008
you can leverage business process domains

16
00:00:52.008 --> 00:00:57.000
as a higher level of service within your architecture.

17
00:00:57.000 --> 00:00:58.004
First and foremost,

18
00:00:58.004 --> 00:01:01.002
it provides a higher level of abstraction

19
00:01:01.002 --> 00:01:04.008
written around specific business functionality.

20
00:01:04.008 --> 00:01:08.003
This help you not only encapsulate these uses,

21
00:01:08.003 --> 00:01:11.007
but scale them more effectively in your system.

22
00:01:11.007 --> 00:01:13.007
It also provides a mechanism

23
00:01:13.007 --> 00:01:16.008
to encapsulate your related domains.

24
00:01:16.008 --> 00:01:18.007
The key here is that these domains

25
00:01:18.007 --> 00:01:21.007
need individual access as well.

26
00:01:21.007 --> 00:01:25.000
If you are simply encapsulating data domains,

27
00:01:25.000 --> 00:01:28.006
but they are always accessed through the process domain,

28
00:01:28.006 --> 00:01:31.006
your domain model is not built correctly.

29
00:01:31.006 --> 00:01:35.000
Building extra layers for uniformity, for instance,

30
00:01:35.000 --> 00:01:38.009
only increases your network traffic unnecessarily.

31
00:01:38.009 --> 00:01:42.006
One key aspect in business process services

32
00:01:42.006 --> 00:01:45.009
is that they don't have their own data access.

33
00:01:45.009 --> 00:01:48.002
This allows you to not muddy the waters

34
00:01:48.002 --> 00:01:51.005
between business domains and data domains.

35
00:01:51.005 --> 00:01:55.003
While this rule should be considered, many do ignore it.

36
00:01:55.003 --> 00:01:57.004
From my experience, however, this will bring you

37
00:01:57.004 --> 00:01:59.005
a lot of headaches going forward.

38
00:01:59.005 --> 00:02:02.001
It is better to keep your boundaries tight

39
00:02:02.001 --> 00:02:05.008
and work within the overall architectural model.

40
00:02:05.008 --> 00:02:09.004
The final key aspect is that they should have distinct,

41
00:02:09.004 --> 00:02:11.004
functional uses.

42
00:02:11.004 --> 00:02:14.007
You don't want to build out all of your business processes

43
00:02:14.007 --> 00:02:17.003
into a single domain package.

44
00:02:17.003 --> 00:02:20.008
If they are related, especially in uses,

45
00:02:20.008 --> 00:02:23.002
it is fine to put them together,

46
00:02:23.002 --> 00:02:26.007
but be very careful you don't layer a monolith

47
00:02:26.007 --> 00:02:30.004
into your system with business processes.

48
00:02:30.004 --> 00:02:32.003
Building a business process service

49
00:02:32.003 --> 00:02:34.000
is fairly straightforward.

50
00:02:34.000 --> 00:02:36.007
You start by identifying the process

51
00:02:36.007 --> 00:02:39.000
with which you want to expose.

52
00:02:39.000 --> 00:02:43.001
This may sound simple, but oftentimes the rules definitions

53
00:02:43.001 --> 00:02:47.008
are very specific when it comes to these business processes.

54
00:02:47.008 --> 00:02:51.006
As such, you need to spend some significant time here

55
00:02:51.006 --> 00:02:54.000
gathering requirements and ensuring

56
00:02:54.000 --> 00:02:58.005
you have the data you need before you start.

57
00:02:58.005 --> 00:03:00.009
Once you have your business process,

58
00:03:00.009 --> 00:03:03.008
you should be able to identify the data domains

59
00:03:03.008 --> 00:03:06.002
that you will need to consume.

60
00:03:06.002 --> 00:03:09.002
Next, you need to define the APIs

61
00:03:09.002 --> 00:03:12.003
that handle your business processes.

62
00:03:12.003 --> 00:03:14.007
Once again, we focus on the contract

63
00:03:14.007 --> 00:03:17.003
and not the underlying models.

64
00:03:17.003 --> 00:03:20.006
The APIs should represent the actual processes

65
00:03:20.006 --> 00:03:23.004
that are needed and many times you may find

66
00:03:23.004 --> 00:03:28.001
that the action pattern for RESTful services is very useful

67
00:03:28.001 --> 00:03:30.009
in this level abstraction.

68
00:03:30.009 --> 00:03:34.006
Finally, we will build our service and wire the API

69
00:03:34.006 --> 00:03:38.002
to the client calls for the domain services.

70
00:03:38.002 --> 00:03:40.007
It is recommended that you actually encapsulate

71
00:03:40.007 --> 00:03:44.006
your business process code into its own module

72
00:03:44.006 --> 00:03:46.003
for easy access.

73
00:03:46.003 --> 00:03:49.002
This will make it clearer where to make the changes

74
00:03:49.002 --> 00:03:52.001
when the business process itself changes,

75
00:03:52.001 --> 00:03:54.007
and it will change.

76
00:03:54.007 --> 00:03:55.008
Let's take a look real quick

77
00:03:55.008 --> 00:03:59.002
at a visual representation of the design strategy

78
00:03:59.002 --> 00:04:02.005
around using business process services.

79
00:04:02.005 --> 00:04:06.004
First and foremost, we define our processes themselves.

80
00:04:06.004 --> 00:04:10.001
In this case, our service will expose three related

81
00:04:10.001 --> 00:04:12.003
but different processes.

82
00:04:12.003 --> 00:04:15.000
We assume we have done our due diligence

83
00:04:15.000 --> 00:04:18.000
and look at current and future usage patterns

84
00:04:18.000 --> 00:04:21.007
to determine that these services can scale well together

85
00:04:21.007 --> 00:04:23.007
without waste.

86
00:04:23.007 --> 00:04:26.003
Now, we will identify the domain or domains

87
00:04:26.003 --> 00:04:30.003
that these business processes need to interact with.

88
00:04:30.003 --> 00:04:34.002
In this case, we have two unique data domains.

89
00:04:34.002 --> 00:04:37.002
Each of these has an associated data store

90
00:04:37.002 --> 00:04:40.001
that we have removed for simplification.

91
00:04:40.001 --> 00:04:44.009
Now, we define the APIs for our business processes.

92
00:04:44.009 --> 00:04:48.003
In this case, we have one API for each.

93
00:04:48.003 --> 00:04:51.009
Remember, the action pattern for REST can be your friend

94
00:04:51.009 --> 00:04:54.006
if traditional REST verbs don't do well

95
00:04:54.006 --> 00:04:57.003
in your business processes.

96
00:04:57.003 --> 00:05:01.001
Now, we will implement and wire our service together

97
00:05:01.001 --> 00:05:04.001
using client code to interact with our data domains

98
00:05:04.001 --> 00:05:05.005
over REST.

99
00:05:05.005 --> 00:05:08.005
The implementation should be a box to the outside world.

100
00:05:08.005 --> 00:05:13.009
However, consider using internal modules for each process

101
00:05:13.009 --> 00:05:17.004
or stepping the process as this will help you iterate

102
00:05:17.004 --> 00:05:20.000
as the process changes over time.

