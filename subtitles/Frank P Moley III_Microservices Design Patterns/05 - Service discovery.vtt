WEBVTT
1
00:00:00.006 --> 00:00:03.005
- [Frank] As a microservices architecture grows,

2
00:00:03.005 --> 00:00:07.002
so does the complexity of finding the appropriate service

3
00:00:07.002 --> 00:00:10.004
that provides the models and behavior you need.

4
00:00:10.004 --> 00:00:13.002
Enter into the picture service discovery.

5
00:00:13.002 --> 00:00:17.002
Service discovery can save you a lot of time,

6
00:00:17.002 --> 00:00:21.001
especially in a dynamic runtime where service locations

7
00:00:21.001 --> 00:00:26.002
can vary by scaling events and geographic location.

8
00:00:26.002 --> 00:00:29.006
The problem we are trying to solve here is very simple,

9
00:00:29.006 --> 00:00:31.007
what service do I need to call

10
00:00:31.007 --> 00:00:34.004
to perform some body of work?

11
00:00:34.004 --> 00:00:37.006
While when you only have a small set of microservices,

12
00:00:37.006 --> 00:00:41.006
that may seem very maintainable within your configuration,

13
00:00:41.006 --> 00:00:43.007
once you go to hundreds or even thousands

14
00:00:43.007 --> 00:00:47.006
within a single deployment, it's not so manageable.

15
00:00:47.006 --> 00:00:50.003
The concept is actually quite simple as well.

16
00:00:50.003 --> 00:00:53.004
A central location exists that allows

17
00:00:53.004 --> 00:00:55.007
for discovery of services.

18
00:00:55.007 --> 00:00:57.009
As a new service comes online,

19
00:00:57.009 --> 00:01:01.009
it advertises itself and what models or processes

20
00:01:01.009 --> 00:01:05.004
it exposes to the rest of the system.

21
00:01:05.004 --> 00:01:08.002
It does this by introspection of its URI,

22
00:01:08.002 --> 00:01:11.002
essentially saying at location foo,

23
00:01:11.002 --> 00:01:14.003
you can find services for bar.

24
00:01:14.003 --> 00:01:18.002
A service can then query the central location

25
00:01:18.002 --> 00:01:22.000
to find out which services exist within the system

26
00:01:22.000 --> 00:01:24.006
that expose the needed behavior.

27
00:01:24.006 --> 00:01:27.008
Once it's found, a URI to that service

28
00:01:27.008 --> 00:01:30.009
is returned from the central location

29
00:01:30.009 --> 00:01:35.001
and it's all based on the afore mentioned advertisement.

30
00:01:35.001 --> 00:01:37.009
The service has then been discovered

31
00:01:37.009 --> 00:01:40.009
and the client call can call the URI

32
00:01:40.009 --> 00:01:44.006
from discovery instead of configuration.

33
00:01:44.006 --> 00:01:50.005
This model becomes much more extensible than simple config.

34
00:01:50.005 --> 00:01:53.001
Building a discovery system in clients, however,

35
00:01:53.001 --> 00:01:55.007
is beyond the scope of this course.

36
00:01:55.007 --> 00:02:00.001
But I will say, off the shelf components in libraries exist.

37
00:02:00.001 --> 00:02:02.004
Use them if possible.

38
00:02:02.004 --> 00:02:04.008
Netflix, for instance, has done a great job

39
00:02:04.008 --> 00:02:07.002
of open sourcing many of their components

40
00:02:07.002 --> 00:02:11.001
around service discovery and they're an example of a company

41
00:02:11.001 --> 00:02:14.004
running thousands and thousands of microservices,

42
00:02:14.004 --> 00:02:17.000
all based on service discovery.

