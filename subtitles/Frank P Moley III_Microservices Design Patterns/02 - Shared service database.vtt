WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Instructor] While the single service database pattern

2
00:00:02.004 --> 00:00:05.000
is usually a more effective one,

3
00:00:05.000 --> 00:00:09.001
there are some times when you must use a shared database.

4
00:00:09.001 --> 00:00:12.004
The shared database pattern isn't really much new,

5
00:00:12.004 --> 00:00:15.004
especially if you have done some application development

6
00:00:15.004 --> 00:00:16.009
in your life.

7
00:00:16.009 --> 00:00:20.002
In reality, this is an enterprise construct that is

8
00:00:20.002 --> 00:00:24.003
carried over into a distributed model like microservices,

9
00:00:24.003 --> 00:00:28.000
mainly due to contracts that have already been signed.

10
00:00:28.000 --> 00:00:31.003
There are some ways we can pattern our data, however,

11
00:00:31.003 --> 00:00:34.006
in our data store to be more effective

12
00:00:34.006 --> 00:00:38.001
for eventually breaking the database up.

13
00:00:38.001 --> 00:00:42.001
The given in this case is that all data domains exist

14
00:00:42.001 --> 00:00:44.008
within a single database instance.

15
00:00:44.008 --> 00:00:47.001
The key here is we can still treat them

16
00:00:47.001 --> 00:00:50.006
as separate databases from a code concept

17
00:00:50.006 --> 00:00:54.001
even if physically they are single instance.

18
00:00:54.001 --> 00:00:56.006
Data distribution should still be handled

19
00:00:56.006 --> 00:00:58.009
by the database itself.

20
00:00:58.009 --> 00:01:01.007
If you're deploying to multiple data centers,

21
00:01:01.007 --> 00:01:04.006
you need the database to handle the data synchronization

22
00:01:04.006 --> 00:01:07.005
across the data centers themselves.

23
00:01:07.005 --> 00:01:09.009
Pushing that to code will cause databases

24
00:01:09.009 --> 00:01:12.003
to become out of sync.

25
00:01:12.003 --> 00:01:15.001
Even with some more modern databases,

26
00:01:15.001 --> 00:01:19.002
replication across WAN gateways is an afterthought,

27
00:01:19.002 --> 00:01:21.008
and you may lose database functionality

28
00:01:21.008 --> 00:01:23.006
when you consume them.

29
00:01:23.006 --> 00:01:26.008
So choose your databases well.

30
00:01:26.008 --> 00:01:29.003
While we won't get the scalability benefits

31
00:01:29.003 --> 00:01:31.006
of a single instance database,

32
00:01:31.006 --> 00:01:34.009
we can structure our data so that we can isolate it

33
00:01:34.009 --> 00:01:39.002
and prepare it for a hopeful breakout one day.

34
00:01:39.002 --> 00:01:40.000
To do this,

35
00:01:40.000 --> 00:01:43.001
we need to leverage schemas, key spaces,

36
00:01:43.001 --> 00:01:45.001
or similar logical groupings

37
00:01:45.001 --> 00:01:47.008
within the database engine itself.

38
00:01:47.008 --> 00:01:50.002
This way our code will be written

39
00:01:50.002 --> 00:01:53.001
with a single database isolation model,

40
00:01:53.001 --> 00:01:56.005
even if the database is shared.

41
00:01:56.005 --> 00:01:59.009
To ensure we have proper segmentation,

42
00:01:59.009 --> 00:02:03.005
each schema and each service that consumes that schema

43
00:02:03.005 --> 00:02:06.006
should have unique credentials.

44
00:02:06.006 --> 00:02:10.008
Those credentials should never span the logical breaks.

45
00:02:10.008 --> 00:02:15.002
If you have a user that can connect to multiple schemas,

46
00:02:15.002 --> 00:02:18.000
you might as well stick with the existing model

47
00:02:18.000 --> 00:02:19.006
that you have.

48
00:02:19.006 --> 00:02:22.002
The idea here is to break it up,

49
00:02:22.002 --> 00:02:25.002
even if only logically.

50
00:02:25.002 --> 00:02:27.000
In a similar vein,

51
00:02:27.000 --> 00:02:31.003
the data domain should connect to a single schema.

52
00:02:31.003 --> 00:02:33.002
Again, we're treating these systems

53
00:02:33.002 --> 00:02:35.001
as though they're isolated,

54
00:02:35.001 --> 00:02:37.009
even if they aren't.

55
00:02:37.009 --> 00:02:40.000
By enforcing this pattern,

56
00:02:40.000 --> 00:02:43.007
you can better break the database up at a later time

57
00:02:43.007 --> 00:02:45.006
because the data and the apps

58
00:02:45.006 --> 00:02:48.001
are already logically isolated,

59
00:02:48.001 --> 00:02:50.001
even if unfortunately,

60
00:02:50.001 --> 00:02:53.000
your database has to be shared.

