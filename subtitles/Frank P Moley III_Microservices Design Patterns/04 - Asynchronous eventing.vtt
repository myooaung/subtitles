WEBVTT
1
00:00:00.005 --> 00:00:02.002
- [Frank] The final data access pattern

2
00:00:02.002 --> 00:00:05.000
we will discuss is asynchronous evening.

3
00:00:05.000 --> 00:00:07.005
While it needs to be talked about as a pattern,

4
00:00:07.005 --> 00:00:10.006
it is much bigger than this course.

5
00:00:10.006 --> 00:00:12.000
Check out my course in the library,

6
00:00:12.000 --> 00:00:14.008
Microservices: Asynchronous Messaging,

7
00:00:14.008 --> 00:00:18.001
to dive much deeper into this topic.

8
00:00:18.001 --> 00:00:21.004
Many times in a microservices architecture,

9
00:00:21.004 --> 00:00:24.006
you run into situations with long-running transactions

10
00:00:24.006 --> 00:00:28.002
or complex workflows that just cannot fit

11
00:00:28.002 --> 00:00:31.004
into a single, blocking API call.

12
00:00:31.004 --> 00:00:34.008
Enter into the picture asynchronous eventing.

13
00:00:34.008 --> 00:00:38.004
The problems we can solve go beyond what I just described.

14
00:00:38.004 --> 00:00:40.007
But essentially, in a nutshell, we can describe

15
00:00:40.007 --> 00:00:43.007
the super set of problems as some process

16
00:00:43.007 --> 00:00:48.004
that cannot be done in real-time through a blocking call.

17
00:00:48.004 --> 00:00:52.002
The pattern deployed depend upon the use cases.

18
00:00:52.002 --> 00:00:54.008
But they all share a common thread,

19
00:00:54.008 --> 00:00:58.006
a service API that triggers the event.

20
00:00:58.006 --> 00:01:03.003
The event can cascade asynchronously from the API itself,

21
00:01:03.003 --> 00:01:05.003
putting together a series of actions

22
00:01:05.003 --> 00:01:07.003
that happen behind the scenes,

23
00:01:07.003 --> 00:01:10.007
after the client has received an accepted message

24
00:01:10.007 --> 00:01:13.003
from the service API.

25
00:01:13.003 --> 00:01:16.001
Other times, you can make a single blocking call

26
00:01:16.001 --> 00:01:18.007
and put a message on a messaging system.

27
00:01:18.007 --> 00:01:21.004
Once that is done, the service returns

28
00:01:21.004 --> 00:01:23.008
and the behind-the-scenes processing occurs

29
00:01:23.008 --> 00:01:26.001
in an asynchronous manner.

30
00:01:26.001 --> 00:01:28.006
One key characteristic of this model

31
00:01:28.006 --> 00:01:32.005
is how powerful it can be in a distributed system.

32
00:01:32.005 --> 00:01:36.004
Nothing is a silver bullet when it comes to software.

33
00:01:36.004 --> 00:01:41.004
But, there are many complex problems in distributed systems

34
00:01:41.004 --> 00:01:44.007
that asynchronous eventing can solve.

35
00:01:44.007 --> 00:01:47.001
As I stated before, I encourage you to take

36
00:01:47.001 --> 00:01:50.001
the Microservices: Asynchronous Messaging course

37
00:01:50.001 --> 00:01:53.007
for a lot more detailed view of the why

38
00:01:53.007 --> 00:01:56.000
as well as the how-to-do this set

39
00:01:56.000 --> 00:01:59.000
of complex patterns for data access.

