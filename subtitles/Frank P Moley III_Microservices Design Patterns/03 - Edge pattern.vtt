WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Narrator] The final integration pattern

2
00:00:02.000 --> 00:00:03.007
that we will talk about in this course

3
00:00:03.007 --> 00:00:07.003
is another Ingress pattern called the Edge pattern.

4
00:00:07.003 --> 00:00:08.007
Much like the aggregator

5
00:00:08.007 --> 00:00:11.003
was a subset of the Gateway pattern,

6
00:00:11.003 --> 00:00:15.005
the Edge pattern is also a subset of the Gateway pattern.

7
00:00:15.005 --> 00:00:17.006
The basic problem that we need to solve

8
00:00:17.006 --> 00:00:20.003
with the Edge pattern comes in two flavors.

9
00:00:20.003 --> 00:00:22.006
The most common is that using a Gateway

10
00:00:22.006 --> 00:00:27.004
becomes a scaling concern as one client type, say mobile,

11
00:00:27.004 --> 00:00:31.002
contributes to request volume significantly more

12
00:00:31.002 --> 00:00:33.000
than other services.

13
00:00:33.000 --> 00:00:37.007
As such, scaling the Gateway becomes wasteful.

14
00:00:37.007 --> 00:00:41.002
The other problem is similar to the aggregation

15
00:00:41.002 --> 00:00:44.006
in that a client doesn't just need a single touch point.

16
00:00:44.006 --> 00:00:48.004
It needs special business logic as well,

17
00:00:48.004 --> 00:00:51.006
that only applies to this client.

18
00:00:51.006 --> 00:00:53.005
Edge Services really become very much

19
00:00:53.005 --> 00:00:56.002
client-specific Gateways.

20
00:00:56.002 --> 00:00:58.005
They provide the benefits of aggregation,

21
00:00:58.005 --> 00:01:03.002
consolidation companies and complexity isolation,

22
00:01:03.002 --> 00:01:07.008
while doing so based on the sole needs of a specific client.

23
00:01:07.008 --> 00:01:10.008
These Edge Services focus on a specific client,

24
00:01:10.008 --> 00:01:12.008
so their isolation pattern

25
00:01:12.008 --> 00:01:16.003
is directly addressing that client.

26
00:01:16.003 --> 00:01:18.009
Say we have data that a mobile client doesn't need

27
00:01:18.009 --> 00:01:21.009
because it isn't available in the application,

28
00:01:21.009 --> 00:01:25.005
but when we use an Edge Service, we can target the payload

29
00:01:25.005 --> 00:01:29.003
while allowing the system to scale with need,

30
00:01:29.003 --> 00:01:34.004
while not exposing data that the client itself cannot use.

31
00:01:34.004 --> 00:01:37.005
Edge design very much follows the Gateway pattern

32
00:01:37.005 --> 00:01:39.000
as a whole.

33
00:01:39.000 --> 00:01:40.009
First and foremost, however,

34
00:01:40.009 --> 00:01:42.008
is you need to identify the client

35
00:01:42.008 --> 00:01:46.006
and the needs of your client as well as the constraints.

36
00:01:46.006 --> 00:01:50.004
Since you have such laser focus on a specific client,

37
00:01:50.004 --> 00:01:56.002
you can spend a lot more dedicated focus on that client.

38
00:01:56.002 --> 00:01:59.000
Next, based on that information,

39
00:01:59.000 --> 00:02:02.008
you build your contracts and associated models.

40
00:02:02.008 --> 00:02:05.007
You can implement the APIs and contracts

41
00:02:05.007 --> 00:02:08.006
for your client Edge Service.

42
00:02:08.006 --> 00:02:09.008
One benefit here,

43
00:02:09.008 --> 00:02:13.002
especially with a very specific client focus,

44
00:02:13.002 --> 00:02:16.004
is that your passivity concerns only last

45
00:02:16.004 --> 00:02:19.009
as long as your client version is in scope.

46
00:02:19.009 --> 00:02:22.002
This is very powerful in worlds like mobile

47
00:02:22.002 --> 00:02:26.000
where you can drive upgrades from within the application

48
00:02:26.000 --> 00:02:30.000
and keep your client usage at a relatively current level.

49
00:02:30.000 --> 00:02:32.004
So you can make more non-passive changes

50
00:02:32.004 --> 00:02:35.002
by forcing a client upgrade.

51
00:02:35.002 --> 00:02:37.000
So at this point, you may wonder

52
00:02:37.000 --> 00:02:40.005
if the Gateway and Edge Services are so similar,

53
00:02:40.005 --> 00:02:43.005
why do we have two patterns, and why have both?

54
00:02:43.005 --> 00:02:45.002
And this is a great question.

55
00:02:45.002 --> 00:02:47.004
And I'll give you a little early hint here.

56
00:02:47.004 --> 00:02:51.008
I don't use Gateways I only use Edge Services.

57
00:02:51.008 --> 00:02:54.009
On paper they are very similar.

58
00:02:54.009 --> 00:02:57.008
By focusing on a client for the Edge,

59
00:02:57.008 --> 00:03:00.000
you can apply all of the Gateway patterns,

60
00:03:00.000 --> 00:03:03.005
to that client only, but in both cases,

61
00:03:03.005 --> 00:03:06.005
we're handling things like isolation, consolidation,

62
00:03:06.005 --> 00:03:08.006
aggregating and proxying,

63
00:03:08.006 --> 00:03:12.005
it's whether it's for the whole system or just one client.

64
00:03:12.005 --> 00:03:15.008
The Edge becomes much more flexible in my opinion,

65
00:03:15.008 --> 00:03:18.009
because it targets the clients specifically,

66
00:03:18.009 --> 00:03:22.001
any aggregation needs can be handled more robustly

67
00:03:22.001 --> 00:03:23.006
in an Edge Service,

68
00:03:23.006 --> 00:03:27.003
because the client needs being taken into account.

69
00:03:27.003 --> 00:03:31.008
Consolidation and isolation needs are also more flexible

70
00:03:31.008 --> 00:03:34.008
with an Edge Service for the same reason.

71
00:03:34.008 --> 00:03:37.001
A big win for the Edge pattern

72
00:03:37.001 --> 00:03:40.006
is that you can have a more scalable component.

73
00:03:40.006 --> 00:03:43.003
Because you are targeting a single client,

74
00:03:43.003 --> 00:03:47.005
as that client load increases or decreases,

75
00:03:47.005 --> 00:03:50.008
you can scale your service appropriately.

76
00:03:50.008 --> 00:03:53.003
You can also better introduce throttling,

77
00:03:53.003 --> 00:03:55.007
specific to a client type

78
00:03:55.007 --> 00:03:58.001
without applying it to your system as a whole

79
00:03:58.001 --> 00:04:00.005
as you would have to with a Gateway.

80
00:04:00.005 --> 00:04:03.006
The Edge pattern is also more flexible

81
00:04:03.006 --> 00:04:06.004
when new clients come on board.

82
00:04:06.004 --> 00:04:08.002
By using the Edge pattern,

83
00:04:08.002 --> 00:04:11.009
no other system will be impacted with this advent

84
00:04:11.009 --> 00:04:14.000
of a new client.

85
00:04:14.000 --> 00:04:18.002
With a Gateway, you have to deploy the entire Gateway

86
00:04:18.002 --> 00:04:20.006
to address the needs of these new clients.

87
00:04:20.006 --> 00:04:21.008
Well with the Edge Service,

88
00:04:21.008 --> 00:04:23.008
you just deploy the new service

89
00:04:23.008 --> 00:04:26.001
and the new client picks it up.

90
00:04:26.001 --> 00:04:31.002
On the same lines, you won't impact as many types of clients

91
00:04:31.002 --> 00:04:33.004
when you do need to deploy new versions

92
00:04:33.004 --> 00:04:37.006
of your Edge Services, because they're very targeted.

93
00:04:37.006 --> 00:04:41.003
When it comes to maintenance however, the Gateway wins.

94
00:04:41.003 --> 00:04:45.006
You get consolidation of modules and underlying processing,

95
00:04:45.006 --> 00:04:50.004
so keeping clients in sync becomes much easier.

96
00:04:50.004 --> 00:04:52.007
You're also deploying fewer instance types

97
00:04:52.007 --> 00:04:57.007
across the system, again, improving maintainability

98
00:04:57.007 --> 00:04:59.005
for their parts.

99
00:04:59.005 --> 00:05:03.004
As I stated before I only use the Edge pattern anymore,

100
00:05:03.004 --> 00:05:07.001
but I do always use it and that's the key.

101
00:05:07.001 --> 00:05:10.001
Isolation of clients is critical

102
00:05:10.001 --> 00:05:13.008
to preventing exposing your entire system to the world

103
00:05:13.008 --> 00:05:18.003
and for preventing clients from calling unapproved APIs.

104
00:05:18.003 --> 00:05:22.005
Add an OAuth and you have a very good security footprint

105
00:05:22.005 --> 00:05:24.006
on the Edge Services.

106
00:05:24.006 --> 00:05:27.003
In addition, by targeting this way,

107
00:05:27.003 --> 00:05:31.007
I can handle any of the needs of a client much more quickly,

108
00:05:31.007 --> 00:05:35.003
because I know that there's only one component impacted

109
00:05:35.003 --> 00:05:38.000
by changing the Edge service.

