WEBVTT
1
00:00:00.005 --> 00:00:03.000
- [Instructor] In a similar vein to log aggregation,

2
00:00:03.000 --> 00:00:07.007
operationally, metrics are invaluable to diagnosing issues.

3
00:00:07.007 --> 00:00:10.007
In fact, metrics can be more powerful

4
00:00:10.007 --> 00:00:13.007
than logging if used correctly.

5
00:00:13.007 --> 00:00:16.000
Metrics is also easier than logging

6
00:00:16.000 --> 00:00:19.000
because there's really less human interaction.

7
00:00:19.000 --> 00:00:21.004
Logging relies on a developer to write

8
00:00:21.004 --> 00:00:23.008
and structure the log message.

9
00:00:23.008 --> 00:00:26.002
Metrics, however, usually just requires

10
00:00:26.002 --> 00:00:28.005
a bit of instrumentation.

11
00:00:28.005 --> 00:00:30.002
The problem we're looking to solve

12
00:00:30.002 --> 00:00:33.001
is that we need to know what is going on with the system

13
00:00:33.001 --> 00:00:35.005
or service at a system level.

14
00:00:35.005 --> 00:00:38.003
We aren't really looking at code output,

15
00:00:38.003 --> 00:00:41.000
we're looking for system output.

16
00:00:41.000 --> 00:00:45.008
Once again, a common taxonomy is critical with metrics.

17
00:00:45.008 --> 00:00:49.006
Structuring your keys to be consistent and descriptive

18
00:00:49.006 --> 00:00:53.008
will help explain what the ultimate dashboards are saying.

19
00:00:53.008 --> 00:00:56.003
As with logging, much has been done already,

20
00:00:56.003 --> 00:00:59.003
and there are standard metrics libraries available

21
00:00:59.003 --> 00:01:02.004
in almost every language to generate metrics.

22
00:01:02.004 --> 00:01:05.004
While much of the metrics you collect are system level

23
00:01:05.004 --> 00:01:08.001
and runtime component data points,

24
00:01:08.001 --> 00:01:11.002
you may want to also decorate your metrics dashboards

25
00:01:11.002 --> 00:01:13.006
with custom metrics.

26
00:01:13.006 --> 00:01:15.009
Metric shipping is accomplished again

27
00:01:15.009 --> 00:01:18.004
via standard componentry.

28
00:01:18.004 --> 00:01:21.005
Most metrics aggregation solutions have one or more

29
00:01:21.005 --> 00:01:26.008
shipping standards that already exist, so just use them.

30
00:01:26.008 --> 00:01:28.006
Once your metrics are shipped,

31
00:01:28.006 --> 00:01:30.008
you can view them usually graphically

32
00:01:30.008 --> 00:01:33.009
through a metrics aggregation solution.

33
00:01:33.009 --> 00:01:38.007
Dashboards are powerful, especially for on-call activity.

34
00:01:38.007 --> 00:01:41.008
Metrics aggregation is relatively simple,

35
00:01:41.008 --> 00:01:45.003
but it is critical in an operational model.

36
00:01:45.003 --> 00:01:49.003
I have learned the hard way to not ignore metrics ever.

37
00:01:49.003 --> 00:01:51.006
As such, I want to share with you a few lessons

38
00:01:51.006 --> 00:01:53.002
I have learned over time,

39
00:01:53.002 --> 00:01:56.007
and how I use them still to this day.

40
00:01:56.007 --> 00:01:59.002
First and foremost, I would recommend that you build

41
00:01:59.002 --> 00:02:01.009
very high level dashboards.

42
00:02:01.009 --> 00:02:06.001
Your on-call engineer can use these high level dashboards

43
00:02:06.001 --> 00:02:10.006
as a place to see trouble starting before it takes hold.

44
00:02:10.006 --> 00:02:12.009
Don't make these dashboards too busy,

45
00:02:12.009 --> 00:02:14.009
but make them busy enough that you can see

46
00:02:14.009 --> 00:02:18.003
the true health of your system as a whole.

47
00:02:18.003 --> 00:02:20.008
In addition to those high level dashboards,

48
00:02:20.008 --> 00:02:25.000
you want to then build detailed dashboards for each service.

49
00:02:25.000 --> 00:02:28.005
The high level is an aggregated and simplified view.

50
00:02:28.005 --> 00:02:30.005
But once you think you have a problem,

51
00:02:30.005 --> 00:02:32.008
the detailed dashboard can provide

52
00:02:32.008 --> 00:02:35.007
much more insight into the system.

53
00:02:35.007 --> 00:02:38.004
I usually embed links to log queries

54
00:02:38.004 --> 00:02:41.007
in my metrics dashboard, because at two in the morning,

55
00:02:41.007 --> 00:02:44.001
building a log query with the stress of an outage

56
00:02:44.001 --> 00:02:48.006
after being woken up from sleep isn't very appealing.

57
00:02:48.006 --> 00:02:52.005
Consider also injecting events into your dashboards.

58
00:02:52.005 --> 00:02:55.008
System events that can impact system performance,

59
00:02:55.008 --> 00:02:58.006
as well as user events, can help you understand

60
00:02:58.006 --> 00:03:01.007
what systems are being impacted.

61
00:03:01.007 --> 00:03:05.003
In addition, deployment events can help understand

62
00:03:05.003 --> 00:03:08.005
if you have code issues that are impacting the system

63
00:03:08.005 --> 00:03:12.004
as a whole based on newly introduced code.

64
00:03:12.004 --> 00:03:17.004
If you can, put traces on your graphs at alarm points.

65
00:03:17.004 --> 00:03:19.005
If you're going to get paged,

66
00:03:19.005 --> 00:03:22.003
having a reason for the page visually

67
00:03:22.003 --> 00:03:26.002
can help promote a quicker meantime to resolution.

68
00:03:26.002 --> 00:03:29.000
Again, consider the middle of the night scenario

69
00:03:29.000 --> 00:03:31.008
of being woken up by a page.

70
00:03:31.008 --> 00:03:36.001
Finally, ensure you have runbooks for every alarm

71
00:03:36.001 --> 00:03:39.009
and explanation of metrics and logs to look at.

72
00:03:39.009 --> 00:03:43.008
Metrics and log aggregations both are about identifying

73
00:03:43.008 --> 00:03:46.006
as well as resolving issues.

74
00:03:46.006 --> 00:03:50.008
If you build an alarm, you know why the alarm fired.

75
00:03:50.008 --> 00:03:55.000
The runbook will make troubleshooting significantly easier.

76
00:03:55.000 --> 00:03:58.009
I embed links to runbooks into the pages themselves,

77
00:03:58.009 --> 00:04:00.008
as well as the dashboards,

78
00:04:00.008 --> 00:04:04.004
again, making life easier for on-call,

79
00:04:04.004 --> 00:04:08.000
which ultimately is the point of all operational patterns.

