WEBVTT
1
00:00:00.005 --> 00:00:01.007
- [Instructor] In our learning environment,

2
00:00:01.007 --> 00:00:03.005
we only have a single instance

3
00:00:03.005 --> 00:00:06.002
of each of our services up and running,

4
00:00:06.002 --> 00:00:10.001
so Ribbon's load balancing doesn't make a lot of sense.

5
00:00:10.001 --> 00:00:13.005
But seldom, if ever, in a cloud environment,

6
00:00:13.005 --> 00:00:15.009
We will run single instances.

7
00:00:15.009 --> 00:00:17.006
In cases where we don't have

8
00:00:17.006 --> 00:00:19.008
default load balancers involved,

9
00:00:19.008 --> 00:00:22.001
Ribbon provides us a way to integrate

10
00:00:22.001 --> 00:00:26.008
a software load balancer to our web service calls.

11
00:00:26.008 --> 00:00:28.007
Let's jump back over here to our ID

12
00:00:28.007 --> 00:00:31.008
and create a new module.

13
00:00:31.008 --> 00:00:34.004
We'll use Spring initializer once again,

14
00:00:34.004 --> 00:00:38.005
use the same group name.

15
00:00:38.005 --> 00:00:39.008
And in this case, we're going to call this

16
00:00:39.008 --> 00:00:43.007
a room reservation service,

17
00:00:43.007 --> 00:00:45.001
Java 11.

18
00:00:45.001 --> 00:00:47.004
And what this room reservation service is going to be

19
00:00:47.004 --> 00:00:50.006
is it's going to represent a business service in our system

20
00:00:50.006 --> 00:00:53.007
that integrates multiple domains.

21
00:00:53.007 --> 00:00:56.008
So the only dependency that we're going to need on this is Web,

22
00:00:56.008 --> 00:00:59.005
however since we want to use Ribbon,

23
00:00:59.005 --> 00:01:03.009
we're going to go down here to routing and select Ribbon,

24
00:01:03.009 --> 00:01:09.008
and we also want to do Discovery Client.

25
00:01:09.008 --> 00:01:11.004
Accept the rest of the defaults

26
00:01:11.004 --> 00:01:14.001
and we'll let Maven do its thing.

27
00:01:14.001 --> 00:01:16.002
Okay, so once Maven's done all of its importing,

28
00:01:16.002 --> 00:01:18.008
open up the room reservation service.

29
00:01:18.008 --> 00:01:22.005
Let's go to source, main, resources to start with

30
00:01:22.005 --> 00:01:25.005
and open up our application.properties file.

31
00:01:25.005 --> 00:01:27.008
Now we're going to give our application a name

32
00:01:27.008 --> 00:01:29.001
and in this case, we're putting it

33
00:01:29.001 --> 00:01:32.007
in the application.properties instead of a boot strap.

34
00:01:32.007 --> 00:01:37.004
Now we could have written configuration for this,

35
00:01:37.004 --> 00:01:39.007
if we wanted to, and run this all through a boot strap,

36
00:01:39.007 --> 00:01:41.009
but kind of we've already seen that,

37
00:01:41.009 --> 00:01:43.002
so it doesn't really add any value.

38
00:01:43.002 --> 00:01:45.006
So we'll just set our Spring application name

39
00:01:45.006 --> 00:01:48.004
to room reservation services.

40
00:01:48.004 --> 00:01:53.002
We're going to execute this at port 8080,

41
00:01:53.002 --> 00:01:55.001
and we're going to be explicit about that.

42
00:01:55.001 --> 00:01:58.004
The last property we need to add is Eureka client,

43
00:01:58.004 --> 00:02:04.003
service URL, and we're going to set the default zone here,

44
00:02:04.003 --> 00:02:10.005
and that is going to be equal to http://localhost

45
00:02:10.005 --> 00:02:12.009
:8761

46
00:02:12.009 --> 00:02:15.008
/eureka.

47
00:02:15.008 --> 00:02:18.009
And those are the properties that we need to set.

48
00:02:18.009 --> 00:02:20.007
So let's now go to source main Java,

49
00:02:20.007 --> 00:02:25.000
open up our root package, and our application class.

50
00:02:25.000 --> 00:02:28.009
We are going to enable the discovery client,

51
00:02:28.009 --> 00:02:30.006
we're also going to create a bean.

52
00:02:30.006 --> 00:02:32.008
Now this is going to be something we're going to do temporarily

53
00:02:32.008 --> 00:02:36.003
just to get past some initial configuration here.

54
00:02:36.003 --> 00:02:39.001
But we're going to use the load balanced annotation

55
00:02:39.001 --> 00:02:41.004
on this bean, and what load balance does

56
00:02:41.004 --> 00:02:43.005
is its going to tell Ribbon to use this

57
00:02:43.005 --> 00:02:46.003
across a load balancing routine.

58
00:02:46.003 --> 00:02:48.000
All right, so we are going to create an instance

59
00:02:48.000 --> 00:02:52.004
of REST template, simply call it that.

60
00:02:52.004 --> 00:02:55.003
And it will return a new REST template.

61
00:02:55.003 --> 00:02:57.001
This is probably not the best way to create one

62
00:02:57.001 --> 00:02:58.008
but again, this is demo purposes

63
00:02:58.008 --> 00:03:01.000
and this should be just fine.

64
00:03:01.000 --> 00:03:03.003
Now we also need to create a domain object

65
00:03:03.003 --> 00:03:05.002
and that domain object that we are going to create

66
00:03:05.002 --> 00:03:10.006
is going to be called a room reservation.

67
00:03:10.006 --> 00:03:12.000
So a room reservation is going to be

68
00:03:12.000 --> 00:03:16.008
a very simple data bag or a DTO.

69
00:03:16.008 --> 00:03:20.004
So let me put a few values in here.

70
00:03:20.004 --> 00:03:22.003
All right, so now that we have all of our attributes

71
00:03:22.003 --> 00:03:24.000
that we need for our room reservation,

72
00:03:24.000 --> 00:03:26.000
we're going to set a getter and setter

73
00:03:26.000 --> 00:03:28.000
for each of those elements

74
00:03:28.000 --> 00:03:31.000
and that's all we need with that class.

75
00:03:31.000 --> 00:03:34.002
Now, we're going to make a call to our room itself

76
00:03:34.002 --> 00:03:37.006
to our room services itself in order to do this,

77
00:03:37.006 --> 00:03:41.001
so we need to create a Java class that represents that.

78
00:03:41.001 --> 00:03:44.008
So we will create a room entity.

79
00:03:44.008 --> 00:03:47.002
And essentially, we're going to copy all of the attributes

80
00:03:47.002 --> 00:03:52.006
from our data layer without all of the annotations.

81
00:03:52.006 --> 00:03:56.003
Once again, getters and setters

82
00:03:56.003 --> 00:03:59.000
and that class is done.

83
00:03:59.000 --> 00:04:01.001
So now we are going to create our web service

84
00:04:01.001 --> 00:04:10.000
and we'll create a room reservation web service

85
00:04:10.000 --> 00:04:13.009
@REST controller,

86
00:04:13.009 --> 00:04:16.001
@request mapping,

87
00:04:16.001 --> 00:04:17.007
and we're going to respond,

88
00:04:17.007 --> 00:04:19.002
and a little bit different this time,

89
00:04:19.002 --> 00:04:22.009
we're going to do room-reservations,

90
00:04:22.009 --> 00:04:25.006
just to kind of keep things really clear,

91
00:04:25.006 --> 00:04:28.006
what's what, we'll make that a little bit more detailed,

92
00:04:28.006 --> 00:04:30.001
and put that hyphen in there.

93
00:04:30.001 --> 00:04:37.001
So now, we need an instance of our REST template.

94
00:04:37.001 --> 00:04:46.004
And we will inject that in our constructor.

95
00:04:46.004 --> 00:04:50.003
And then now we are going to set a get mapping

96
00:04:50.003 --> 00:04:56.006
and we will get a list of our room reservation objects.

97
00:04:56.006 --> 00:04:58.007
And for right now, we will return null,

98
00:04:58.007 --> 00:05:01.008
we will come back to that momentarily.

99
00:05:01.008 --> 00:05:04.003
We're going to create a method

100
00:05:04.003 --> 00:05:08.001
that returns a list of rooms

101
00:05:08.001 --> 00:05:10.005
called getAllRooms

102
00:05:10.005 --> 00:05:15.000
and getAllRooms is going to set a response entity

103
00:05:15.000 --> 00:05:17.002
of a list of room objects,

104
00:05:17.002 --> 00:05:20.002
and this is how you have to do this with REST template.

105
00:05:20.002 --> 00:05:24.001
We get returns a list, and you want to use the exchange,

106
00:05:24.001 --> 00:05:26.007
so we're going to set this to a room response

107
00:05:26.007 --> 00:05:30.002
and that's going to be equal to this .getrestTemplate

108
00:05:30.002 --> 00:05:32.004
.exchange.

109
00:05:32.004 --> 00:05:35.008
Now we need a URL, so what URL can we use?

110
00:05:35.008 --> 00:05:38.006
Well in this case, we are going to use a URL

111
00:05:38.006 --> 00:05:41.005
that consumes Eureka.

112
00:05:41.005 --> 00:05:45.003
So, the room services is the actual name of the element

113
00:05:45.003 --> 00:05:47.001
from Eureka itself.

114
00:05:47.001 --> 00:05:50.007
Notice we're not putting in a real URL for our service.

115
00:05:50.007 --> 00:05:52.008
So Eureka's going to handle that

116
00:05:52.008 --> 00:05:55.004
and it's going to get aspected in.

117
00:05:55.004 --> 00:06:00.005
This is a get call with null and we need to return

118
00:06:00.005 --> 00:06:08.004
a new parameterized type reference of this room.

119
00:06:08.004 --> 00:06:13.000
And we will have an empty implementation of that,

120
00:06:13.000 --> 00:06:16.005
sorry I rolled off screen there.

121
00:06:16.005 --> 00:06:21.009
And, import our http method on the get.

122
00:06:21.009 --> 00:06:23.004
Okay.

123
00:06:23.004 --> 00:06:28.000
So now I can return our room response .getBody.

124
00:06:28.000 --> 00:06:31.005
And that should be a list of room elements.

125
00:06:31.005 --> 00:06:33.006
So finally, let's jump back up

126
00:06:33.006 --> 00:06:36.004
to our room reservation method here.

127
00:06:36.004 --> 00:06:37.006
All right, so we're going to go ahead

128
00:06:37.006 --> 00:06:40.008
and get rid of this null marker now.

129
00:06:40.008 --> 00:06:45.008
We're going to create a list of rooms

130
00:06:45.008 --> 00:06:48.006
calling our getAllRooms function.

131
00:06:48.006 --> 00:06:49.007
And we'll go ahead and create a list

132
00:06:49.007 --> 00:06:55.001
of room reservations as well.

133
00:06:55.001 --> 00:06:57.009
And I'll just create that as an empty array list.

134
00:06:57.009 --> 00:07:02.007
Now we need to iterate over our rooms.

135
00:07:02.007 --> 00:07:05.003
We'll do that via Lambda.

136
00:07:05.003 --> 00:07:06.005
And what we're going to do is we're going to create

137
00:07:06.005 --> 00:07:09.007
a new room reservation,

138
00:07:09.007 --> 00:07:12.005
and then we will populate that room reservation

139
00:07:12.005 --> 00:07:15.001
based on the room data that we have.

140
00:07:15.001 --> 00:07:16.008
So if we look at what we can set,

141
00:07:16.008 --> 00:07:20.005
we can set a room number,

142
00:07:20.005 --> 00:07:25.007
and then we can set a room name,

143
00:07:25.007 --> 00:07:33.001
and then we can set a room ID.

144
00:07:33.001 --> 00:07:34.002
All right, so that's all the data

145
00:07:34.002 --> 00:07:37.003
that we are going to set on our room reservation.

146
00:07:37.003 --> 00:07:44.006
So let's add that to our room reservations list

147
00:07:44.006 --> 00:07:52.005
and then, all we need to do now is return that data

148
00:07:52.005 --> 00:07:57.006
and we will start up our application here.

149
00:07:57.006 --> 00:08:01.002
All right, so now let's jump over to our web browser.

150
00:08:01.002 --> 00:08:03.004
And we'll see indeed our room reservation service

151
00:08:03.004 --> 00:08:05.003
is still up and running.

152
00:08:05.003 --> 00:08:06.004
Everything looks good there,

153
00:08:06.004 --> 00:08:10.006
so let's open up a local host 8080

154
00:08:10.006 --> 00:08:15.002
on room reservations, and now we get a payload of data back.

155
00:08:15.002 --> 00:08:18.000
Obviously we haven't populated this entire data structure

156
00:08:18.000 --> 00:08:20.007
but the data that we have, we've populated,

157
00:08:20.007 --> 00:08:23.003
which is really good 'cause this gets us moving forward

158
00:08:23.003 --> 00:08:25.006
with getting populated data.

159
00:08:25.006 --> 00:08:27.006
But we've done this using a load balancer,

160
00:08:27.006 --> 00:08:31.000
so this is really where the power of all of this comes from.

161
00:08:31.000 --> 00:08:32.004
As we move in next, I'm going to show you

162
00:08:32.004 --> 00:08:35.000
an even easier way to consume this data.

