WEBVTT
1
00:00:00.000 --> 00:00:04.005
(upbeat music)

2
00:00:04.005 --> 00:00:07.005
- [Instructor] So now let's take a look at the solution

3
00:00:07.005 --> 00:00:10.004
for consuming Config Server.

4
00:00:10.004 --> 00:00:13.009
I hope you found this to be a relatively easy task.

5
00:00:13.009 --> 00:00:17.003
All we needed to do was go into the Pom file

6
00:00:17.003 --> 00:00:20.009
for both our reservation services and our room services

7
00:00:20.009 --> 00:00:22.009
and add a few values.

8
00:00:22.009 --> 00:00:27.000
So we added the property here on line 19 we added our

9
00:00:27.000 --> 00:00:31.004
dependency for spring cloud config client on line 31

10
00:00:31.004 --> 00:00:35.007
through 34 we added in our dependency management section

11
00:00:35.007 --> 00:00:41.002
from 53 to 63 and then we added in our repository

12
00:00:41.002 --> 00:00:45.000
as you can see here from 64 to 70 that was everything

13
00:00:45.000 --> 00:00:48.008
that we needed to do to get our system up and running.

14
00:00:48.008 --> 00:00:52.000
In addition to that, we needed to actually now consume

15
00:00:52.000 --> 00:00:56.009
that by going to source main resources and bring up

16
00:00:56.009 --> 00:01:00.005
a bootstrap.properties file, so for the reservation

17
00:01:00.005 --> 00:01:03.006
services our spring application name will be just

18
00:01:03.006 --> 00:01:06.004
that reservationservices without the hyphen

19
00:01:06.004 --> 00:01:09.005
and we will do the same for the roomservices.

20
00:01:09.005 --> 00:01:12.007
Now if you start all of your applications as I have done

21
00:01:12.007 --> 00:01:15.004
you're going to have reservationservices running

22
00:01:15.004 --> 00:01:16.008
on 8801

23
00:01:16.008 --> 00:01:19.008
and roomservices on 8802

24
00:01:19.008 --> 00:01:20.007
let's go ahead and jump

25
00:01:20.007 --> 00:01:23.005
to a web browser and see if that's what's going on.

26
00:01:23.005 --> 00:01:26.000
So we've already got our work on guests and we'll go ahead

27
00:01:26.000 --> 00:01:28.004
and refresh that and make sure that it's still returning on

28
00:01:28.004 --> 00:01:31.008
port 8800, now open up a new tab and go

29
00:01:31.008 --> 00:01:38.004
to localhost8801/reservations

30
00:01:38.004 --> 00:01:40.002
and we've got our reservations

31
00:01:40.002 --> 00:01:43.005
and we'll do one more new tab and on this one we're going

32
00:01:43.005 --> 00:01:50.005
to go localhost8802/rooms and we are getting room data.

33
00:01:50.005 --> 00:01:54.000
So on my machine, I am running four web services at one

34
00:01:54.000 --> 00:01:58.003
time all on different ports, 9000 for the config server

35
00:01:58.003 --> 00:01:59.009
8800, 8801 and 8802

36
00:01:59.009 --> 00:02:02.006
for the guests, reservations and rooms

37
00:02:02.006 --> 00:02:05.007
and we're not done yet but we're starting to simulate

38
00:02:05.007 --> 00:02:08.003
what it looks like in a cloud environment where we have

39
00:02:08.003 --> 00:02:11.006
multiple processes running in this same virtualized

40
00:02:11.006 --> 00:02:14.006
host system and that's where the value of cloud native

41
00:02:14.006 --> 00:02:17.001
programming comes from, is the ability to do that

42
00:02:17.001 --> 00:02:20.007
and then horizontally scale, which without running some sort

43
00:02:20.007 --> 00:02:24.000
of a container management would start to impose problems on

44
00:02:24.000 --> 00:02:27.000
my single image machine but I'll leave that for something

45
00:02:27.000 --> 00:02:30.000
for you to play with at another time.

