WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] Before we get too deep

2
00:00:01.008 --> 00:00:06.002
into Spring Cloud, I do want to touch on Microservices.

3
00:00:06.002 --> 00:00:09.000
Microservices aren't really a new concept

4
00:00:09.000 --> 00:00:10.008
in software engineering.

5
00:00:10.008 --> 00:00:15.002
But they're more an evolution on how software is written.

6
00:00:15.002 --> 00:00:17.004
If you have been involved in writing software

7
00:00:17.004 --> 00:00:20.009
for some time, you may have seen several iterations

8
00:00:20.009 --> 00:00:23.007
of services-based architectures.

9
00:00:23.007 --> 00:00:27.000
One of the most common that we have seen for some time

10
00:00:27.000 --> 00:00:30.008
is services oriented architecture, or SOA.

11
00:00:30.008 --> 00:00:33.005
Now, Microservices are not SOA,

12
00:00:33.005 --> 00:00:35.009
so please don't get that idea.

13
00:00:35.009 --> 00:00:41.000
The similarities end with the concepts of services-based.

14
00:00:41.000 --> 00:00:43.007
In a Microservices architecture, transactions

15
00:00:43.007 --> 00:00:47.000
are usually over REST or GRPC,

16
00:00:47.000 --> 00:00:49.007
with REST being the most common.

17
00:00:49.007 --> 00:00:54.002
SOA usually runs over SOAP and has complex logic

18
00:00:54.002 --> 00:00:56.004
built into BPMs.

19
00:00:56.004 --> 00:01:01.003
Microservices restrict logic to the actual code.

20
00:01:01.003 --> 00:01:05.005
Microservices focus on domain-driven designs.

21
00:01:05.005 --> 00:01:07.009
Domains become the service boundaries

22
00:01:07.009 --> 00:01:10.006
even in higher abstraction layers.

23
00:01:10.006 --> 00:01:14.001
They key in a solid Microservices architecture

24
00:01:14.001 --> 00:01:17.008
is the need for the services to be loosely coupled.

25
00:01:17.008 --> 00:01:20.008
This doesn't change in any quality implementation

26
00:01:20.008 --> 00:01:24.005
of software, but tightly coupled Microservices

27
00:01:24.005 --> 00:01:26.008
actually add overhead, that makes the system

28
00:01:26.008 --> 00:01:29.005
as a whole, much more brittle.

29
00:01:29.005 --> 00:01:32.006
As you will see, if you study Microservices more,

30
00:01:32.006 --> 00:01:36.004
the benefits can be fantastic, however, the detriments

31
00:01:36.004 --> 00:01:38.006
can really start to become a headache

32
00:01:38.006 --> 00:01:40.007
if not properly managed.

33
00:01:40.007 --> 00:01:44.006
Coupling of services is one such potential headache.

34
00:01:44.006 --> 00:01:47.009
Not all domains are evident from the raw data.

35
00:01:47.009 --> 00:01:51.007
While we do usually make data-specific services,

36
00:01:51.007 --> 00:01:56.000
we also do process services and other abstraction types.

37
00:01:56.000 --> 00:01:59.003
These services still operate on domains,

38
00:01:59.003 --> 00:02:03.008
but they are composite domains built using underlying data,

39
00:02:03.008 --> 00:02:08.000
usually, bits and pieces of sub-domains.

40
00:02:08.000 --> 00:02:10.004
Decompositions in Microservices

41
00:02:10.004 --> 00:02:13.002
are based at the system level,

42
00:02:13.002 --> 00:02:16.005
and not the component level, specifically.

43
00:02:16.005 --> 00:02:20.004
Component level decomposition should still occur, of course,

44
00:02:20.004 --> 00:02:23.003
as part of good development practices,

45
00:02:23.003 --> 00:02:29.000
but it is now also critical at a higher level of the system.

46
00:02:29.000 --> 00:02:30.006
A question that often comes up

47
00:02:30.006 --> 00:02:34.006
when I speak about Microservices is where do applications

48
00:02:34.006 --> 00:02:38.000
fit into a Microservices architecture?

49
00:02:38.000 --> 00:02:41.005
The answer is simply that you treat applications

50
00:02:41.005 --> 00:02:45.005
as every other service in its own container.

51
00:02:45.005 --> 00:02:48.001
This can be anything from a Web application,

52
00:02:48.001 --> 00:02:51.003
a cron job, or a simple Web service;

53
00:02:51.003 --> 00:02:54.002
they are all treated the same.

54
00:02:54.002 --> 00:02:56.005
Each application should serve

55
00:02:56.005 --> 00:02:59.008
as an individual use and purpose.

56
00:02:59.008 --> 00:03:03.002
Again, this goes for anything within our system.

57
00:03:03.002 --> 00:03:06.002
Every Web application, a cron job, Web service,

58
00:03:06.002 --> 00:03:10.008
whatever, should be for single use and single purpose.

59
00:03:10.008 --> 00:03:14.005
This really helps define boundaries for each of our systems

60
00:03:14.005 --> 00:03:19.004
as well as promotes reuse within the system, as a whole.

61
00:03:19.004 --> 00:03:22.008
Part of making these applications single-purpose

62
00:03:22.008 --> 00:03:26.009
stems from the ability to rely on other services

63
00:03:26.009 --> 00:03:30.003
for the processing needs and data access needs

64
00:03:30.003 --> 00:03:32.009
that the application may have.

65
00:03:32.009 --> 00:03:36.009
As we build applications in a Microservices architecture,

66
00:03:36.009 --> 00:03:40.004
we focus on that single task and single purpose,

67
00:03:40.004 --> 00:03:43.004
so we need to rely on other services and processes

68
00:03:43.004 --> 00:03:45.008
to do the same things.

69
00:03:45.008 --> 00:03:48.002
This is where the power of the architecture pattern

70
00:03:48.002 --> 00:03:52.004
comes from: do one thing really well and rapidly

71
00:03:52.004 --> 00:03:54.009
iterate on it, and that's the end.

72
00:03:54.009 --> 00:03:59.008
So you may be wondering how Spring fits into this model.

73
00:03:59.008 --> 00:04:04.007
At its core, Spring Boot was designed for two main purposes.

74
00:04:04.007 --> 00:04:08.002
Microservices is one of those purposes.

75
00:04:08.002 --> 00:04:11.004
Spring Boot does, indeed, allow us to build applications

76
00:04:11.004 --> 00:04:15.001
quickly and easily, but it also focuses

77
00:04:15.001 --> 00:04:17.004
on Microservices architecture,

78
00:04:17.004 --> 00:04:20.007
because setting up an application quickly and easily

79
00:04:20.007 --> 00:04:23.008
you can build more of them even quicker,

80
00:04:23.008 --> 00:04:25.008
as setup costs are a big part

81
00:04:25.008 --> 00:04:29.003
of the cost of developing a new application.

82
00:04:29.003 --> 00:04:32.009
Spring Cloud brings in the cloud-native aspects

83
00:04:32.009 --> 00:04:34.006
to Spring Boot.

84
00:04:34.006 --> 00:04:37.006
Now, you can write Spring Boot applications

85
00:04:37.006 --> 00:04:40.007
without using the Spring Cloud abstractions

86
00:04:40.007 --> 00:04:43.008
and still hold to cloud-native principles.

87
00:04:43.008 --> 00:04:47.000
However, Spring Cloud definitely provides

88
00:04:47.000 --> 00:04:50.001
some much valued abstractions.

89
00:04:50.001 --> 00:04:52.000
I want to expand on this a bit.

90
00:04:52.000 --> 00:04:54.005
Because you don't need Spring Boot, either,

91
00:04:54.005 --> 00:04:56.004
to build these applications.

92
00:04:56.004 --> 00:04:59.005
Again, it's about simplicity.

93
00:04:59.005 --> 00:05:02.004
This course will focus primarily on cloud-native

94
00:05:02.004 --> 00:05:04.008
applications, but we will also work

95
00:05:04.008 --> 00:05:07.005
with Microservices-based architecture.

96
00:05:07.005 --> 00:05:09.007
They are not one in the same.

97
00:05:09.007 --> 00:05:11.003
But as you will see in this course,

98
00:05:11.003 --> 00:05:15.003
they can go hand-in-hand and work well with each other.

99
00:05:15.003 --> 00:05:17.007
In this course, we'll build a few different types

100
00:05:17.007 --> 00:05:19.005
of Microservices.

101
00:05:19.005 --> 00:05:21.006
Data services will be used in this course

102
00:05:21.006 --> 00:05:24.009
to serve data from the database to our runtime.

103
00:05:24.009 --> 00:05:27.007
Data services generally are built with their own

104
00:05:27.007 --> 00:05:30.009
abstracted data store, however, often,

105
00:05:30.009 --> 00:05:33.007
companies will focus on solving a data problem

106
00:05:33.007 --> 00:05:36.004
using a quality no SQL database

107
00:05:36.004 --> 00:05:40.002
that can handle global distributions, like Cassandra.

108
00:05:40.002 --> 00:05:43.005
Either using individual databases or large-scale,

109
00:05:43.005 --> 00:05:46.003
highly-available distributed databases,

110
00:05:46.003 --> 00:05:49.006
the application service operates the same.

111
00:05:49.006 --> 00:05:52.000
The data domains are designed in such a way

112
00:05:52.000 --> 00:05:55.000
that all reads and writes to the database

113
00:05:55.000 --> 00:05:58.006
go through the data services, including operations

114
00:05:58.006 --> 00:06:00.006
like cron jobs.

115
00:06:00.006 --> 00:06:02.009
We'll be using a processor/business service

116
00:06:02.009 --> 00:06:06.004
to aggregate data across several data domains.

117
00:06:06.004 --> 00:06:10.001
We will be using this construct to not only aggregate data,

118
00:06:10.001 --> 00:06:13.002
but also to manage the interaction from the front end.

119
00:06:13.002 --> 00:06:15.006
Now, while we won't be building Web applications

120
00:06:15.006 --> 00:06:18.006
in this course, they can be used to provide

121
00:06:18.006 --> 00:06:22.002
a visual reference for our applications.

122
00:06:22.002 --> 00:06:24.000
So let's jump in.

