WEBVTT
1
00:00:00.005 --> 00:00:01.007
- [Instructor] As you start to build out

2
00:00:01.007 --> 00:00:05.001
a distributed system, it becomes very, very clear

3
00:00:05.001 --> 00:00:08.008
that identifying where all of your service endpoints are

4
00:00:08.008 --> 00:00:11.002
can become a maintenance nightmare.

5
00:00:11.002 --> 00:00:13.003
Welcome to Eureka.

6
00:00:13.003 --> 00:00:17.008
Eureka includes both a console and a discovery platform

7
00:00:17.008 --> 00:00:21.004
for registering and identifying all of your services

8
00:00:21.004 --> 00:00:24.001
within a distributed system.

9
00:00:24.001 --> 00:00:28.004
Eureka was created and open sourced by Netflix.

10
00:00:28.004 --> 00:00:30.005
It is a REST-based service,

11
00:00:30.005 --> 00:00:33.007
and in addition to the console and the platform,

12
00:00:33.007 --> 00:00:37.001
Netflix also contributed a client to consume

13
00:00:37.001 --> 00:00:40.002
the discovery platform itself.

14
00:00:40.002 --> 00:00:41.008
Now why would we want to use Eureka

15
00:00:41.008 --> 00:00:45.000
when there's so many other ways to discover services,

16
00:00:45.000 --> 00:00:47.008
especially in cloud providers?

17
00:00:47.008 --> 00:00:51.002
And really, it comes down to not everything

18
00:00:51.002 --> 00:00:53.004
should be publicly exposed.

19
00:00:53.004 --> 00:00:55.007
And most cloud providers have platforms

20
00:00:55.007 --> 00:00:59.000
that publicly expose all of your services.

21
00:00:59.000 --> 00:01:02.006
In addition, Eureka provides a very clean,

22
00:01:02.006 --> 00:01:04.009
again, REST-based interface,

23
00:01:04.009 --> 00:01:08.005
for both registration and discovery.

24
00:01:08.005 --> 00:01:11.009
It has a default round-robin load balancing client,

25
00:01:11.009 --> 00:01:14.006
and best of all, for our purposes,

26
00:01:14.006 --> 00:01:17.003
there's easy integration with Spring

27
00:01:17.003 --> 00:01:21.008
thanks to Netflix having open sourced the entire project.

28
00:01:21.008 --> 00:01:25.002
So let's talk a little bit about Eureka Server.

29
00:01:25.002 --> 00:01:27.001
Now, the Eureka Server itself

30
00:01:27.001 --> 00:01:29.006
is very much like Config Server

31
00:01:29.006 --> 00:01:32.004
that we previously worked with.

32
00:01:32.004 --> 00:01:35.002
It has an easy dashboard that's built in,

33
00:01:35.002 --> 00:01:38.007
so you can see not only everything that is registered,

34
00:01:38.007 --> 00:01:41.002
but its status and its health.

35
00:01:41.002 --> 00:01:44.002
It also supports replication, which is great

36
00:01:44.002 --> 00:01:47.005
because if Eureka becomes your single point of failure,

37
00:01:47.005 --> 00:01:50.000
your entire system goes down.

38
00:01:50.000 --> 00:01:52.001
But within any given data center,

39
00:01:52.001 --> 00:01:55.000
you can have multiple instances of Eureka

40
00:01:55.000 --> 00:01:56.005
that all talk to each other

41
00:01:56.005 --> 00:01:59.003
and keep each other at the same level.

42
00:01:59.003 --> 00:02:01.007
And if one of them fails,

43
00:02:01.007 --> 00:02:05.004
you have one or more fallbacks that the services can go to

44
00:02:05.004 --> 00:02:07.004
to get their discovery.

45
00:02:07.004 --> 00:02:10.002
Now I want to talk a little bit about the client as well.

46
00:02:10.002 --> 00:02:12.000
The client that Netflix offers

47
00:02:12.000 --> 00:02:16.003
leverages the same Spring application name property

48
00:02:16.003 --> 00:02:19.001
that we used with the Config Server.

49
00:02:19.001 --> 00:02:21.004
In fact, what you might find

50
00:02:21.004 --> 00:02:23.007
is a lot of the Spring cloud offerings

51
00:02:23.007 --> 00:02:26.002
leverage this application name.

52
00:02:26.002 --> 00:02:30.004
And the client works very much like the Config Client works

53
00:02:30.004 --> 00:02:32.005
in that it gets its configuration,

54
00:02:32.005 --> 00:02:35.001
or in this case its server endpoints

55
00:02:35.001 --> 00:02:39.006
directly during the life cycle of the Spring application.

56
00:02:39.006 --> 00:02:43.003
Eureka Client also registers your service

57
00:02:43.003 --> 00:02:46.000
with the Eureka Server as well as does

58
00:02:46.000 --> 00:02:48.005
the discovery needed in order to consume

59
00:02:48.005 --> 00:02:50.007
the services within your system,

60
00:02:50.007 --> 00:02:53.005
so it really becomes a one-stop shop.

61
00:02:53.005 --> 00:02:56.000
So let's set up a Eureka Server.

