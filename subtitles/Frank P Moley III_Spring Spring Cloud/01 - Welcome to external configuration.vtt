WEBVTT
1
00:00:00.005 --> 00:00:01.005
- [Instructor] So now we're going to talk

2
00:00:01.005 --> 00:00:04.001
a little bit about externalized configuration

3
00:00:04.001 --> 00:00:06.001
in a cloud native space.

4
00:00:06.001 --> 00:00:08.003
The first question that may come to your mind is

5
00:00:08.003 --> 00:00:11.004
why would I ever externalize our configuration?

6
00:00:11.004 --> 00:00:14.001
The first and probably the most prevalent reason

7
00:00:14.001 --> 00:00:16.001
is because the 12-factor methodologies

8
00:00:16.001 --> 00:00:18.009
specifically state that configuration

9
00:00:18.009 --> 00:00:20.009
should be externalized.

10
00:00:20.009 --> 00:00:23.005
Another reasoning behind this and why it's more important

11
00:00:23.005 --> 00:00:25.003
than just that they say it,

12
00:00:25.003 --> 00:00:27.006
is that it becomes more and more clear

13
00:00:27.006 --> 00:00:29.006
as you start working in this space

14
00:00:29.006 --> 00:00:33.003
how powerful externalized configurations are.

15
00:00:33.003 --> 00:00:36.003
But for the moment, just accept that because it says it

16
00:00:36.003 --> 00:00:38.000
that's why we want to do it.

17
00:00:38.000 --> 00:00:40.004
Now one of the main reasons that we want to do this

18
00:00:40.004 --> 00:00:44.009
is because it increases the portability of your application.

19
00:00:44.009 --> 00:00:49.000
Because, if it can be fed all of its configured startup,

20
00:00:49.000 --> 00:00:53.001
it's not tied to a specific data center or instance.

21
00:00:53.001 --> 00:00:56.007
But it also makes your application more scalable

22
00:00:56.007 --> 00:00:58.008
because I can drop it onto Cloud Foundry

23
00:00:58.008 --> 00:01:01.005
or Kubernetes Container, a Cloud VM,

24
00:01:01.005 --> 00:01:05.002
or even a local VM, or a big iron server,

25
00:01:05.002 --> 00:01:07.004
as long as I'm providing that config,

26
00:01:07.004 --> 00:01:10.001
it doesn't really matter where the server or VM,

27
00:01:10.001 --> 00:01:12.003
or docker container, or whatever,

28
00:01:12.003 --> 00:01:14.009
is actually located.

29
00:01:14.009 --> 00:01:18.001
It also removes the need for an environment variables

30
00:01:18.001 --> 00:01:20.008
when dealing with external config.

31
00:01:20.008 --> 00:01:23.004
Now a purist of the 12-factor methodology,

32
00:01:23.004 --> 00:01:26.009
let's say the environment variables are the specific way

33
00:01:26.009 --> 00:01:30.003
that you handle externalized configuration.

34
00:01:30.003 --> 00:01:33.007
This portability not only applies to deployments

35
00:01:33.007 --> 00:01:36.008
but it also applies to environments.

36
00:01:36.008 --> 00:01:39.008
You can use the same code in every environment

37
00:01:39.008 --> 00:01:42.008
and only modify the externalized config.

38
00:01:42.008 --> 00:01:45.007
In addition, you can scale out new instances

39
00:01:45.007 --> 00:01:49.000
of applications using the same configuration

40
00:01:49.000 --> 00:01:52.002
from the externalized host without having

41
00:01:52.002 --> 00:01:54.009
to reconfigure another instance.

42
00:01:54.009 --> 00:01:58.005
Well in the Spring world, it's not necessarily a requirement

43
00:01:58.005 --> 00:02:01.008
that we use environmental variables.

44
00:02:01.008 --> 00:02:03.008
And now we're going to talk a little bit about that.

45
00:02:03.008 --> 00:02:06.008
So Spring's implementation specifically leverages

46
00:02:06.008 --> 00:02:09.000
what they call config server.

47
00:02:09.000 --> 00:02:11.009
Config server is backed by a git repository,

48
00:02:11.009 --> 00:02:14.006
so you can apply source control

49
00:02:14.006 --> 00:02:17.004
to your configuration values.

50
00:02:17.004 --> 00:02:20.004
This can extend across environments as well,

51
00:02:20.004 --> 00:02:23.008
which increases the power of the configuration.

52
00:02:23.008 --> 00:02:25.007
You can use patterns like git flow

53
00:02:25.007 --> 00:02:28.003
to manage and stage configuration

54
00:02:28.003 --> 00:02:30.007
across multiple environments.

55
00:02:30.007 --> 00:02:33.004
Additionally, config server gives

56
00:02:33.004 --> 00:02:35.005
a centralized management point

57
00:02:35.005 --> 00:02:38.005
of all of our configuration variables.

58
00:02:38.005 --> 00:02:41.000
As opposed to each container specifically

59
00:02:41.000 --> 00:02:44.002
having to have its own environment variables,

60
00:02:44.002 --> 00:02:47.005
we have one central place that we can distribute it

61
00:02:47.005 --> 00:02:51.009
to all of our applications running within that data center.

62
00:02:51.009 --> 00:02:53.003
Now a little bit about the Spring

63
00:02:53.003 --> 00:02:55.008
cloud config server itself.

64
00:02:55.008 --> 00:02:59.008
It's actually a very simple Spring boot starter project.

65
00:02:59.008 --> 00:03:02.005
As a matter of fact, all you have to do is go

66
00:03:02.005 --> 00:03:06.002
and to find the project with the appropriate dependency,

67
00:03:06.002 --> 00:03:10.000
tie it to a git repo, and you're really done.

68
00:03:10.000 --> 00:03:14.000
You can load the config on start up of any other app

69
00:03:14.000 --> 00:03:18.000
because it gets served via the REST endpoint.

70
00:03:18.000 --> 00:03:20.003
An additional benefit, with the fact that it's backed

71
00:03:20.003 --> 00:03:24.000
by git, is that you have support for branches.

72
00:03:24.000 --> 00:03:26.007
And because Spring config server allows you to use

73
00:03:26.007 --> 00:03:31.000
YAML files, you also have the benefit of Spring profiles.

74
00:03:31.000 --> 00:03:32.009
So now I can have a different profile

75
00:03:32.009 --> 00:03:35.005
for each data center and a different instance

76
00:03:35.005 --> 00:03:38.002
of config server for each branch,

77
00:03:38.002 --> 00:03:42.004
or all of them in one config server, separated by branches.

78
00:03:42.004 --> 00:03:44.007
And then, I have the ability to deploy

79
00:03:44.007 --> 00:03:48.009
through a centralized git repository to a very large number

80
00:03:48.009 --> 00:03:51.009
of config server instances per data center.

81
00:03:51.009 --> 00:03:54.006
And that really allows you a lot of flexibility

82
00:03:54.006 --> 00:03:59.004
while still having management over your config itself.

83
00:03:59.004 --> 00:04:01.009
Now I briefly alluded to it a moment ago

84
00:04:01.009 --> 00:04:04.005
about how to consume this config.

85
00:04:04.005 --> 00:04:08.007
Indeed, it is actually available through a REST API call,

86
00:04:08.007 --> 00:04:11.001
which is one way that you could get it.

87
00:04:11.001 --> 00:04:13.009
But, more importantly for a Spring user

88
00:04:13.009 --> 00:04:16.007
is that Spring has given us a starter project

89
00:04:16.007 --> 00:04:20.005
for actually becoming a client of the config server.

90
00:04:20.005 --> 00:04:23.002
One of the benefits of using that client

91
00:04:23.002 --> 00:04:26.009
is that it allows us to bootstrap to that config server

92
00:04:26.009 --> 00:04:29.008
and get our config at the appropriate point

93
00:04:29.008 --> 00:04:33.001
of the bean lifecycle, so that those environment variables,

94
00:04:33.001 --> 00:04:35.008
that config, those properties,

95
00:04:35.008 --> 00:04:38.004
are actually injected into our application

96
00:04:38.004 --> 00:04:43.000
at the current time for bean post processing to occur.

