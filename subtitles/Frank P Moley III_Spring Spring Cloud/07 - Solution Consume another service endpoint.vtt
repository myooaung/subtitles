WEBVTT
1
00:00:00.000 --> 00:00:05.007
(upbeat music)

2
00:00:05.007 --> 00:00:06.005
- [Instructor] All right.

3
00:00:06.005 --> 00:00:09.003
Now, it's time for the completion of the service

4
00:00:09.003 --> 00:00:12.004
and the solution to that challenge exercise.

5
00:00:12.004 --> 00:00:14.003
We're going to do this one just a little bit different.

6
00:00:14.003 --> 00:00:15.002
I want you to navigate

7
00:00:15.002 --> 00:00:25.001
to localhost:8080/room-reservations?date=2020-01-01.

8
00:00:25.001 --> 00:00:27.005
What I want you to see is if in this first element

9
00:00:27.005 --> 00:00:31.009
you get Roy Adams, you've implemented it correctly.

10
00:00:31.009 --> 00:00:34.001
If not, this is your opportunity

11
00:00:34.001 --> 00:00:37.001
to go implement it before you see the answer.

12
00:00:37.001 --> 00:00:37.009
If you're still with me,

13
00:00:37.009 --> 00:00:41.001
we're going to go take a look at the answer to this problem.

14
00:00:41.001 --> 00:00:43.006
I'm going to start with the reservation service

15
00:00:43.006 --> 00:00:46.009
and we're going to look, first of all, at the repository.

16
00:00:46.009 --> 00:00:50.003
So what I did here was I added on line 10 an interval

17
00:00:50.003 --> 00:00:51.008
method using spring data.

18
00:00:51.008 --> 00:00:53.006
That takes a date, object in,

19
00:00:53.006 --> 00:00:57.004
and it gets all reservations for a date.

20
00:00:57.004 --> 00:00:59.003
I then added a similar method

21
00:00:59.003 --> 00:01:01.006
to the web services that surrounds that.

22
00:01:01.006 --> 00:01:04.009
And what I did was I took the existing get reservations

23
00:01:04.009 --> 00:01:09.007
online 22 and added an optional request parameter.

24
00:01:09.007 --> 00:01:12.009
And that request perimeter was a date element.

25
00:01:12.009 --> 00:01:17.001
And if the data's not null, then I call the final by date .

26
00:01:17.001 --> 00:01:19.005
Otherwise I call find all, not way.

27
00:01:19.005 --> 00:01:23.004
I kind of have a little bit of flexibility there.

28
00:01:23.004 --> 00:01:26.006
So now let's jump into the room reservation service.

29
00:01:26.006 --> 00:01:29.005
So I had to go implement all of my domain objects.

30
00:01:29.005 --> 00:01:32.009
So I've got a guest, a reservation,

31
00:01:32.009 --> 00:01:35.000
and the room that we did before,

32
00:01:35.000 --> 00:01:37.007
I also implemented a feign client for each one of them.

33
00:01:37.007 --> 00:01:41.008
So there's my guests client, my reservation client.

34
00:01:41.008 --> 00:01:44.007
You'll notice that I carried forward that date

35
00:01:44.007 --> 00:01:47.008
because we need to be able to pass that across.

36
00:01:47.008 --> 00:01:50.008
And then in my web service is the last section of changes,

37
00:01:50.008 --> 00:01:54.009
so what I did starting down here at line 59

38
00:01:54.009 --> 00:01:58.004
was I created a simple function to take a date string

39
00:01:58.004 --> 00:02:01.000
and converted into a Java.util date.

40
00:02:01.000 --> 00:02:04.000
Now I could have done this as Java sequel date,

41
00:02:04.000 --> 00:02:05.007
but that didn't really feel right.

42
00:02:05.007 --> 00:02:08.007
And I'm not really even sure about passing the sequel date

43
00:02:08.007 --> 00:02:10.004
across to any of those barriers.

44
00:02:10.004 --> 00:02:12.005
But for right now it works fine.

45
00:02:12.005 --> 00:02:15.001
So I convert that string into a date object.

46
00:02:15.001 --> 00:02:19.005
Back up here in the get room reservations method,

47
00:02:19.005 --> 00:02:22.007
you'll notice on line 34 that I take a date object

48
00:02:22.007 --> 00:02:25.001
in also require being false.

49
00:02:25.001 --> 00:02:27.000
That is a date string.

50
00:02:27.000 --> 00:02:30.004
I take that date string and create a date object.

51
00:02:30.004 --> 00:02:32.002
I still am getting all of the rooms

52
00:02:32.002 --> 00:02:34.002
but now I create a map

53
00:02:34.002 --> 00:02:36.004
and that map is the room ID

54
00:02:36.004 --> 00:02:37.009
and then the room reservation.

55
00:02:37.009 --> 00:02:39.007
You're going to use that map

56
00:02:39.007 --> 00:02:43.004
and I populate it from all of the rooms.

57
00:02:43.004 --> 00:02:46.000
So I populate the map with all the room data.

58
00:02:46.000 --> 00:02:47.008
Now since I have the rooms

59
00:02:47.008 --> 00:02:51.009
I can then go take a look and see what reservations exist

60
00:02:51.009 --> 00:02:55.003
for a given date and that's online 45

61
00:02:55.003 --> 00:02:57.000
I go through each of those reservations.

62
00:02:57.000 --> 00:03:00.002
And if the reservation exists,

63
00:03:00.002 --> 00:03:03.004
there will be a room and I take and I populate the room

64
00:03:03.004 --> 00:03:06.001
based on getting the data from the map,

65
00:03:06.001 --> 00:03:08.008
filling out all of the guest information at that point

66
00:03:08.008 --> 00:03:10.007
with the call of the guest client.

67
00:03:10.007 --> 00:03:13.001
And then I return it as an array list.

68
00:03:13.001 --> 00:03:16.007
And in doing so, I get the data that I expect.

69
00:03:16.007 --> 00:03:19.007
So that's the quick and dirty run through of that solution.

70
00:03:19.007 --> 00:03:22.003
And I hope you find that one a little bit more challenging.

71
00:03:22.003 --> 00:03:25.000
There was a few bits and pieces to run through,

72
00:03:25.000 --> 00:03:27.006
but I also hope that you see the power of feign

73
00:03:27.006 --> 00:03:32.000
when dealing with the distributed microservices architecture

74
00:03:32.000 --> 00:03:33.003
especially when you're dealing

75
00:03:33.003 --> 00:03:36.000
with the cloud native infrastructure

