WEBVTT
1
00:00:00.005 --> 00:00:02.005
- [Instructor] So now it's time to go actually implement

2
00:00:02.005 --> 00:00:05.000
that first microservice that we got ready.

3
00:00:05.000 --> 00:00:06.003
So back on our IDE,

4
00:00:06.003 --> 00:00:09.005
I want you to open up your guest services module

5
00:00:09.005 --> 00:00:13.000
and src/main/java in the root package.

6
00:00:13.000 --> 00:00:17.007
We're going to create a new file,

7
00:00:17.007 --> 00:00:21.004
and that class we are going to call Guest.

8
00:00:21.004 --> 00:00:23.003
Now, our guest is going to actually represent

9
00:00:23.003 --> 00:00:25.003
our database entity,

10
00:00:25.003 --> 00:00:30.001
so we're going to annotate it with @Entity and then @Table,

11
00:00:30.001 --> 00:00:33.003
and we will set the name of that table equal to GUEST.

12
00:00:33.003 --> 00:00:36.007
Now, the data from this will actually come from

13
00:00:36.007 --> 00:00:41.002
the schema file that we copied in the previous video.

14
00:00:41.002 --> 00:00:42.004
But for now,

15
00:00:42.004 --> 00:00:44.001
I'm just going to go ahead and code this,

16
00:00:44.001 --> 00:00:48.007
so let's import Entity from javax.persistence,

17
00:00:48.007 --> 00:00:52.003
import Table from the same spot,

18
00:00:52.003 --> 00:00:54.008
and now we'll go ahead and put some attributes on here.

19
00:00:54.008 --> 00:00:58.002
So the first thing we'll do is we'll do an @Id

20
00:00:58.002 --> 00:01:01.000
from javax.persistence,

21
00:01:01.000 --> 00:01:03.008
@Column also from javax.persistence.

22
00:01:03.008 --> 00:01:08.001
The name of this column is GUEST_ID.

23
00:01:08.001 --> 00:01:11.001
And again, reference that schema file if you need to.

24
00:01:11.001 --> 00:01:13.007
The generated value that we will use,

25
00:01:13.007 --> 00:01:18.000
we're going to set our strategy on that to be auto.

26
00:01:18.000 --> 00:01:21.005
And then we will do a private long of type id

27
00:01:21.005 --> 00:01:23.009
to match the BIGINT data type.

28
00:01:23.009 --> 00:01:27.007
And we'll go ahead and do the rest of this table.

29
00:01:27.007 --> 00:01:29.006
All right, now that we've entered in all of our attributes,

30
00:01:29.006 --> 00:01:31.009
I'm going to use a function in my IDE

31
00:01:31.009 --> 00:01:34.000
to generate getters and setters.

32
00:01:34.000 --> 00:01:35.004
Now, each IDE has this.

33
00:01:35.004 --> 00:01:37.007
There's a different way to get to this in each IDE.

34
00:01:37.007 --> 00:01:40.002
But essentially, I'm just going to automatically generate

35
00:01:40.002 --> 00:01:44.003
getters and setters for all of the attributes,

36
00:01:44.003 --> 00:01:47.005
and that's all we need to do on that class.

37
00:01:47.005 --> 00:01:51.001
So now we're going to create another class file,

38
00:01:51.001 --> 00:01:53.002
only this time we're going to make it an interface,

39
00:01:53.002 --> 00:01:58.002
and we are going to call this GuestRepository.

40
00:01:58.002 --> 00:02:01.004
Now, this interface is going to extend

41
00:02:01.004 --> 00:02:04.007
the CrudRepository interface,

42
00:02:04.007 --> 00:02:05.009
and it takes two parameters,

43
00:02:05.009 --> 00:02:15.004
a Guest and the type of the ID.

44
00:02:15.004 --> 00:02:17.006
Helps to make that extends.

45
00:02:17.006 --> 00:02:21.001
And that's all we need to do on that class.

46
00:02:21.001 --> 00:02:23.002
And now the last thing we're going to add

47
00:02:23.002 --> 00:02:26.001
is we're going to create one more class,

48
00:02:26.001 --> 00:02:30.006
and this one we are going to call GuestWebServices.

49
00:02:30.006 --> 00:02:32.006
On this, we are going to annotate it

50
00:02:32.006 --> 00:02:38.006
with @RestController, @RequestMapping,

51
00:02:38.006 --> 00:02:40.002
and that request mapping that we are going to do

52
00:02:40.002 --> 00:02:43.007
is going to be at /guests.

53
00:02:43.007 --> 00:02:49.002
And we will have a private final guest repository.

54
00:02:49.002 --> 00:02:51.005
Just call that repository.

55
00:02:51.005 --> 00:03:01.001
Make a constructor on this class that takes that value.

56
00:03:01.001 --> 00:03:04.008
Now we will do an @GetMapping,

57
00:03:04.008 --> 00:03:10.003
return an iterable Guest,

58
00:03:10.003 --> 00:03:17.008
and then we'll simply return this.repository.findAll.

59
00:03:17.008 --> 00:03:20.004
Then we're going to do one more GetMapping,

60
00:03:20.004 --> 00:03:21.005
and this one we're going to do at

61
00:03:21.005 --> 00:03:27.004
slash curly brace id end curly brace.

62
00:03:27.004 --> 00:03:32.001
This one will just be a guest.

63
00:03:32.001 --> 00:03:33.006
And I see I missed public up here,

64
00:03:33.006 --> 00:03:37.000
so let me add that back real quick.

65
00:03:37.000 --> 00:03:38.009
And this will just get a guest,

66
00:03:38.009 --> 00:03:41.006
and this will take a path variable,

67
00:03:41.006 --> 00:03:45.004
and that path variable will have an ID of id,

68
00:03:45.004 --> 00:03:47.007
and it will be a long id,

69
00:03:47.007 --> 00:03:55.006
and here we will return this.repository.findById,

70
00:03:55.006 --> 00:03:57.004
and we'll pass the ID.

71
00:03:57.004 --> 00:04:00.005
Now, this is actually going to return an optional,

72
00:04:00.005 --> 00:04:02.003
so we need to call get on this,

73
00:04:02.003 --> 00:04:05.002
but if we just call get and one doesn't exist,

74
00:04:05.002 --> 00:04:06.007
it's going to return null.

75
00:04:06.007 --> 00:04:09.008
So we're not really going to have very good error handling

76
00:04:09.008 --> 00:04:11.006
or response statuses,

77
00:04:11.006 --> 00:04:13.007
but for the purpose of this, it will be fine.

78
00:04:13.007 --> 00:04:14.007
In a production system,

79
00:04:14.007 --> 00:04:17.006
I would probably throw an exception if it didn't exist

80
00:04:17.006 --> 00:04:21.000
and in that case convert that exception into a 404.

81
00:04:21.000 --> 00:04:24.006
But again, for demo purposes, this is just fine.

82
00:04:24.006 --> 00:04:28.004
So let's go ahead and start up our application.

83
00:04:28.004 --> 00:04:30.009
Now, in my IDE, I've got a really easy way to do this.

84
00:04:30.009 --> 00:04:32.008
You can compile the code with Maven

85
00:04:32.008 --> 00:04:34.008
and run it through the command line.

86
00:04:34.008 --> 00:04:36.009
You can run the main application class.

87
00:04:36.009 --> 00:04:41.000
There's a hundred different ways to run this application.

88
00:04:41.000 --> 00:04:42.004
I'm going to leave that up to you,

89
00:04:42.004 --> 00:04:43.009
but I'm just going to go ahead and click this button

90
00:04:43.009 --> 00:04:46.009
and allow it to compile and build.

91
00:04:46.009 --> 00:04:48.005
Now our application has come up

92
00:04:48.005 --> 00:04:50.007
and you can see it's run on port 8080.

93
00:04:50.007 --> 00:04:53.005
So let's go to our web browser

94
00:04:53.005 --> 00:04:57.005
and we're going to simply navigate to localhost:8080.

95
00:04:57.005 --> 00:04:59.003
And you'll see we get a whitelabel error page,

96
00:04:59.003 --> 00:05:01.001
which is what we would expect.

97
00:05:01.001 --> 00:05:03.004
And now we go to guests,

98
00:05:03.004 --> 00:05:05.007
and we get a nice payload of guest data.

99
00:05:05.007 --> 00:05:08.003
Again, this has been formatted with the viewer,

100
00:05:08.003 --> 00:05:11.006
but you'll see that we have all of the guests in our system.

101
00:05:11.006 --> 00:05:14.001
Now, let's just check a couple individual guests.

102
00:05:14.001 --> 00:05:17.004
So guest one, great.

103
00:05:17.004 --> 00:05:20.004
Let's do guest 1000, who doesn't exist,

104
00:05:20.004 --> 00:05:23.004
and we get an error page because there is no data.

105
00:05:23.004 --> 00:05:26.006
It's throwing a 500 because that value doesn't exist.

106
00:05:26.006 --> 00:05:28.007
Again, we would control that much better

107
00:05:28.007 --> 00:05:30.002
in a production system,

108
00:05:30.002 --> 00:05:32.000
but for now, that's sufficient.

