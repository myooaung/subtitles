WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.190 --> 00:00:05.505
Let's get to work now on some of these stats down at the bottom.

00:00:05.505 --> 00:00:12.000
This video, we're going to focus on calculating the total and also the average distance.

00:00:12.000 --> 00:00:17.805
Now to do this, we are going to make use of a JavaScript array method called reduce.

00:00:17.805 --> 00:00:20.875
Let's take a quick look at how we can use this.

00:00:20.875 --> 00:00:23.600
If you've not used the reduced method before,

00:00:23.600 --> 00:00:25.610
it can look pretty complex,

00:00:25.610 --> 00:00:28.295
but it's really not too difficult to use.

00:00:28.295 --> 00:00:31.550
The main concept behind a reduce method,

00:00:31.550 --> 00:00:33.919
is it will take all of the elements,

00:00:33.919 --> 00:00:38.150
all of the values which is inside of an array, in our case,

00:00:38.150 --> 00:00:40.390
it's going to be all of our distances,

00:00:40.390 --> 00:00:44.150
and then we're going to reduce it into one single value.

00:00:44.150 --> 00:00:49.640
In our case, we're going to reduce down all of our values by adding them all together.

00:00:49.640 --> 00:00:53.425
This is going to give us our total which we need just here,

00:00:53.425 --> 00:00:55.490
and then we can also make use of this in

00:00:55.490 --> 00:01:00.305
the average distance by dividing this total by the number of entries.

00:01:00.305 --> 00:01:04.990
Back to the reducer, we're going to create a function just like this.

00:01:04.990 --> 00:01:09.200
The example we see here is pretty much exactly how we need to use it.

00:01:09.200 --> 00:01:12.560
We're going to add together all of the values in the array.

00:01:12.560 --> 00:01:18.865
We do this by calling a method which adds the current value to the previous total.

00:01:18.865 --> 00:01:22.325
For the first element inside of the array which is one,

00:01:22.325 --> 00:01:24.200
it will then call this method,

00:01:24.200 --> 00:01:26.660
but this first time we only have the current value,

00:01:26.660 --> 00:01:27.995
we don't have the total,

00:01:27.995 --> 00:01:30.790
so the reducer will be equal to one.

00:01:30.790 --> 00:01:33.580
For the second value which is two,

00:01:33.580 --> 00:01:38.015
the current value of two will be added to the total of one,

00:01:38.015 --> 00:01:40.390
resulting in a value of three.

00:01:40.390 --> 00:01:42.860
Continuing on, the value of three will then be

00:01:42.860 --> 00:01:46.715
added to the current total, making this six.

00:01:46.715 --> 00:01:49.625
The value of four then completes the reducer,

00:01:49.625 --> 00:01:53.065
resulting in a total value of 10.

00:01:53.065 --> 00:01:55.710
Back over to our script.js,

00:01:55.710 --> 00:02:00.410
we're going to begin by creating a function which is going to have the same behavior.

00:02:00.410 --> 00:02:04.290
I'm going to do mine just above our handleSubmit.

00:02:04.550 --> 00:02:07.130
The function which I'm going to call

00:02:07.130 --> 00:02:12.679
the reducer takes in our two values which is the total,

00:02:12.679 --> 00:02:15.560
and then the current value.

00:02:15.560 --> 00:02:21.740
I'll just call this a total rather than accumulator since it seems more clear.

00:02:21.740 --> 00:02:26.390
All this function is going to do is to return the new value,

00:02:26.390 --> 00:02:31.895
which is equivalent of the total which has been added to the current value.

00:02:31.895 --> 00:02:34.220
Just as a side note here,

00:02:34.220 --> 00:02:37.070
we are adding the current value to the total,

00:02:37.070 --> 00:02:40.210
but you could do other things such as take it away too.

00:02:40.210 --> 00:02:42.320
The whole idea is exactly the same.

00:02:42.320 --> 00:02:48.490
The reducer is intended to reduce our array values into one single value.

00:02:48.490 --> 00:02:53.840
The next thing to do is we're going to create a new function just below,

00:02:53.840 --> 00:02:56.690
and I'm going to call this calTotal.

00:02:56.690 --> 00:02:59.840
This function is going to grab all of our entries,

00:02:59.840 --> 00:03:01.655
use a reduce method,

00:03:01.655 --> 00:03:04.250
and then update our value just here.

00:03:04.250 --> 00:03:08.045
To do this, it also needs to take in all of our current entries,

00:03:08.045 --> 00:03:10.920
which is inside of our array.

00:03:12.170 --> 00:03:15.320
We can then grab our entries array,

00:03:15.320 --> 00:03:18.365
which is only values stored inside here.

00:03:18.365 --> 00:03:20.765
We can then call the reduced method,

00:03:20.765 --> 00:03:23.360
which we just looked at on the Mozilla website,

00:03:23.360 --> 00:03:26.940
and then we can pass in our reducer function.

00:03:28.600 --> 00:03:32.300
This will then give us our single total value,

00:03:32.300 --> 00:03:35.760
and we can also store this inside of a constant.

00:03:36.040 --> 00:03:40.000
Now I have this value, we're going to update the DOM.

00:03:40.000 --> 00:03:43.265
The two values which we want to update if we take a look at

00:03:43.265 --> 00:03:46.715
our project is the total section just here,

00:03:46.715 --> 00:03:52.045
and we also have a total which is updated for our weekly targets.

00:03:52.045 --> 00:03:54.480
Let's grab the documents,

00:03:54.480 --> 00:03:57.090
we can grab an element by the id.

00:03:57.090 --> 00:04:01.425
The first one which we want to grab is for the total just here,

00:04:01.425 --> 00:04:03.555
scroll down to the data section,

00:04:03.555 --> 00:04:06.940
and we have a span with the id of total.

00:04:08.540 --> 00:04:15.300
We can then set the innerText content to be equal to our total value.

00:04:15.370 --> 00:04:17.840
Let's duplicate this line,

00:04:17.840 --> 00:04:21.460
and we can also use this to update the weekly targets.

00:04:21.460 --> 00:04:24.170
Now the bottom of our index page,

00:04:24.170 --> 00:04:27.995
this is this progressTotal which currently has the value of zero,

00:04:27.995 --> 00:04:33.230
we could remove the placeholder, update our id.

00:04:33.230 --> 00:04:36.650
We now have our function which calculates the total.

00:04:36.650 --> 00:04:39.335
In fact, it should just be calcTotal.

00:04:39.335 --> 00:04:42.365
Now every time we handleSubmit down at the bottom,

00:04:42.365 --> 00:04:45.390
we now want to call this function.

00:04:46.820 --> 00:04:51.029
When we call this, we can also pass in the entries.

00:04:51.029 --> 00:04:55.190
The entries was the value from our array at the very top here,

00:04:55.190 --> 00:04:58.445
or we can leave this empty for this particular case,

00:04:58.445 --> 00:05:01.595
because this is a global variable.

00:05:01.595 --> 00:05:06.020
When we declare a variable outside of any of these functions,

00:05:06.020 --> 00:05:08.975
this means this is now in global scope,

00:05:08.975 --> 00:05:14.510
meaning that we can access the value of entries anywhere inside of our program.

00:05:14.510 --> 00:05:18.275
If our variable was declared inside of any particular function,

00:05:18.275 --> 00:05:21.650
we could only access it inside of that function.

00:05:21.650 --> 00:05:23.360
So since this is global,

00:05:23.360 --> 00:05:29.080
we can access this inside of this function and also this one just here too.

00:05:29.080 --> 00:05:33.015
With this in place, now let's save this and over to the browser.

00:05:33.015 --> 00:05:35.145
Let's add some new values.

00:05:35.145 --> 00:05:40.505
One and two, these two added up give us the total of three,

00:05:40.505 --> 00:05:43.235
and also down in our target too.

00:05:43.235 --> 00:05:49.770
Let's add one more, and our totals are now updated.

00:05:51.110 --> 00:05:55.765
With this working, now let's move on to the average distance.

00:05:55.765 --> 00:05:59.050
The average distance is going to be pretty simple because

00:05:59.050 --> 00:06:02.585
we already have our reducer function in place.

00:06:02.585 --> 00:06:06.700
All we need to do is to create a new function to take care of this.

00:06:06.700 --> 00:06:09.740
I'm going to call this calcAverage.

00:06:13.940 --> 00:06:17.260
The way we can calculate the average is to first,

00:06:17.260 --> 00:06:20.545
grab all of the total values which you've added together.

00:06:20.545 --> 00:06:24.025
We know how to do this from our function just above.

00:06:24.025 --> 00:06:29.200
Then we can divide it by how many entries we currently have giving us the average.

00:06:29.200 --> 00:06:33.140
Let's start this inside of a constant called average.

00:06:33.320 --> 00:06:38.100
This equal to our entries array, we can again,

00:06:38.100 --> 00:06:40.275
call our reduce method,

00:06:40.275 --> 00:06:43.960
passing in our reducer function.

00:06:44.690 --> 00:06:47.700
This will then give us the total,

00:06:47.700 --> 00:06:52.490
and the next thing we need to do is to divide this by the number of entries.

00:06:52.490 --> 00:06:57.935
We can do this by grabbing our entries array and then calling.length.

00:06:57.935 --> 00:07:03.630
The next step is to update the DOM with document.getElementById.

00:07:03.880 --> 00:07:08.240
The Id which you want to grab over in the index.html,

00:07:08.240 --> 00:07:11.490
is this average id just here.

00:07:13.580 --> 00:07:15.990
Just like above, we'll also set

00:07:15.990 --> 00:07:23.090
the innerText to be equal to our average variable from above.

00:07:23.090 --> 00:07:28.180
The last step is to actually call this function, calcAverage.

00:07:28.180 --> 00:07:31.275
This also doesn't need anything passed to it since it's

00:07:31.275 --> 00:07:33.815
only taking advantage of the entries array,

00:07:33.815 --> 00:07:35.435
which we have at the top.

00:07:35.435 --> 00:07:38.940
Save this file and off to the browser.

00:07:40.180 --> 00:07:42.980
Now if we add in it two different values,

00:07:42.980 --> 00:07:44.735
we see the total of four.

00:07:44.735 --> 00:07:49.720
The total of 4 divided by 2 gives us a average of 2.

00:07:49.720 --> 00:07:52.995
Let's try at one more, go for 10.

00:07:52.995 --> 00:07:55.804
Our average is now updated.

00:07:55.804 --> 00:07:59.120
Just one more finishing touch we can do to this project for

00:07:59.120 --> 00:08:03.820
these two values is to round these to one decimal place.

00:08:03.820 --> 00:08:07.040
At the moment, we get a rounded number of 14,

00:08:07.040 --> 00:08:09.995
but if we do something such as 2.7,

00:08:09.995 --> 00:08:15.745
but I want to keep this consistent and make sure all values are to one decimal place.

00:08:15.745 --> 00:08:20.130
Just like earlier, the way to do this is to use toFixed.

00:08:20.130 --> 00:08:24.980
I'm going to set this to be one decimal place so passing the value of one.

00:08:24.980 --> 00:08:27.365
This is going to be for our total,

00:08:27.365 --> 00:08:30.215
and we can do the same for our average too.

00:08:30.215 --> 00:08:33.790
We would need to wrap this inside of our brackets,

00:08:33.790 --> 00:08:37.720
and then call toFixed on the total.

00:08:39.110 --> 00:08:41.774
If we didn't wrap this in brackets,

00:08:41.774 --> 00:08:45.330
toFixed would be called on the entries.length rather than

00:08:45.330 --> 00:08:49.125
the total sum. Let's test this out.

00:08:49.125 --> 00:08:53.480
One and five giving us a total of six,

00:08:53.480 --> 00:08:56.380
which has a value of 6.0 now.

00:08:56.380 --> 00:09:00.709
The average, let's add some more values.

00:09:00.709 --> 00:09:05.060
We can now say our total and average is rounded to one decimal place.

00:09:05.060 --> 00:09:08.240
We can also do the same for our entries just here.

00:09:08.240 --> 00:09:13.360
We can do this up above where we created our new entries,

00:09:13.360 --> 00:09:17.375
and also here where we add the new entry as our text note.

00:09:17.375 --> 00:09:19.325
Just like before, we can also call

00:09:19.325 --> 00:09:23.780
toFixed passing in the value of one and now if we add some entries,

00:09:23.780 --> 00:09:27.830
we see these rounded to one decimal place.

00:09:28.100 --> 00:09:32.430
This is now our total and the average now taken care of,

00:09:32.430 --> 00:09:33.740
and in the next video,

00:09:33.740 --> 00:09:35.615
we'll take a look at the weekly goal,

00:09:35.615 --> 00:09:38.310
and also the weekly high.
