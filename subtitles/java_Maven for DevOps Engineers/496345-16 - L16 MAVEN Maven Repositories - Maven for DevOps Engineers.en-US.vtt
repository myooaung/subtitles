WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.220
Hello folks, welcome back.

00:00:02.220 --> 00:00:04.680
In this lecture we are going to talk about what

00:00:04.680 --> 00:00:07.275
is local repository and the remote repository.

00:00:07.275 --> 00:00:11.280
We were talking about this one when we were talking about a map and goals, right?

00:00:11.280 --> 00:00:13.890
That is a good show you over here, your winnable.

00:00:13.890 --> 00:00:16.830
We execute install, install the packages on to

00:00:16.830 --> 00:00:21.765
the local repository for use as a dependency in the other projects locally.

00:00:21.765 --> 00:00:25.230
Which means that there is a local repository in our system.

00:00:25.230 --> 00:00:27.180
So far we haven't discussed about it.

00:00:27.180 --> 00:00:28.470
Let's go and see.

00:00:28.470 --> 00:00:31.485
Whenever we run our mapping project for stem,

00:00:31.485 --> 00:00:33.854
it is going to create a local repository.

00:00:33.854 --> 00:00:38.575
By default, the local repository git created under the user's home directory,

00:00:38.575 --> 00:00:40.940
the data EOM do user's home directory,

00:00:40.940 --> 00:00:43.370
nothing but in my case I'm using your user called

00:00:43.370 --> 00:00:46.985
relaxin under the two dot m2 directory, it got created.

00:00:46.985 --> 00:00:51.140
Even I can go to this directory through the File Explorer.

00:00:51.140 --> 00:00:52.970
If I go here, again,

00:00:52.970 --> 00:00:57.545
I'm going back to the projects and the user under user home directory.

00:00:57.545 --> 00:00:59.285
There is a directory called M2.

00:00:59.285 --> 00:01:03.920
If I go into the repository and whenever we run any comments,

00:01:03.920 --> 00:01:06.680
it requests any dependencies it pulled

00:01:06.680 --> 00:01:09.695
from the internet and the stores in the local repository,

00:01:09.695 --> 00:01:12.695
nothing but this, we call it as a local repository.

00:01:12.695 --> 00:01:15.290
It will get updated whenever we are changing

00:01:15.290 --> 00:01:18.110
the packages which we need to run our project.

00:01:18.110 --> 00:01:21.290
This information, again gathered from the palm dot xml.

00:01:21.290 --> 00:01:23.345
Now let me show you how does it work.

00:01:23.345 --> 00:01:27.155
Let's assume that we have three developers and they are working on your project.

00:01:27.155 --> 00:01:30.380
Whenever they are working on the project that they might be using Eclipse and

00:01:30.380 --> 00:01:34.040
start building the projects whenever they build the project to foster time,

00:01:34.040 --> 00:01:37.339
it is going to create the ATM2 directory in the locally.

00:01:37.339 --> 00:01:40.325
And it pulls the required packages which are

00:01:40.325 --> 00:01:43.760
needed by that application from the remote repository,

00:01:43.760 --> 00:01:46.145
that is Mab and central repository we call,

00:01:46.145 --> 00:01:48.740
I will show you Marvin central repository URL.

00:01:48.740 --> 00:01:51.710
From there, it is going to pull the required packages,

00:01:51.710 --> 00:01:53.105
not all the packages,

00:01:53.105 --> 00:01:57.020
only required packages it pulls and stores in the local repository.

00:01:57.020 --> 00:02:00.350
That is the reason whenever we build any application faster,

00:02:00.350 --> 00:02:01.670
met take your well, why?

00:02:01.670 --> 00:02:04.220
Because it pulls the required packages from

00:02:04.220 --> 00:02:07.775
the Maven central repository and keep it in the local system.

00:02:07.775 --> 00:02:11.150
But subsequent attempts, it doesn't go to the central repository

00:02:11.150 --> 00:02:14.600
because packages are available in the local repository,

00:02:14.600 --> 00:02:17.045
the execution would be quicker.

00:02:17.045 --> 00:02:19.250
In some organizations, they will use

00:02:19.250 --> 00:02:22.219
their one more repository called the enterprise repository,

00:02:22.219 --> 00:02:27.845
which will be internal for the company whenever we create a new projects are libraries.

00:02:27.845 --> 00:02:31.535
Those libraries we can push it into the enterprise repository.

00:02:31.535 --> 00:02:36.365
So if we want to keep our files in the only data M2 directory,

00:02:36.365 --> 00:02:38.555
then we can use the install.

00:02:38.555 --> 00:02:41.180
So Marvin goals helps us to keep

00:02:41.180 --> 00:02:45.890
the packages or libraries which we have created under local repository,

00:02:45.890 --> 00:02:47.944
Arles in the enterprise repository,

00:02:47.944 --> 00:02:51.020
this is the central repository for Oliver employees.

00:02:51.020 --> 00:02:55.760
And usually companies use this one because to avoid those security incidents, Why?

00:02:55.760 --> 00:02:57.620
Because getting the packages from

00:02:57.620 --> 00:03:02.960
the enterprise repository rather than the central repository will be more secure.

00:03:02.960 --> 00:03:05.030
That's how the repositories does work.

00:03:05.030 --> 00:03:06.980
Now, let's go back and run.

00:03:06.980 --> 00:03:09.620
Yeah, Marvin goal to add our packages to

00:03:09.620 --> 00:03:12.410
the local repository and we'll see how does it work.

00:03:12.410 --> 00:03:14.555
So we should use install goal.

00:03:14.555 --> 00:03:18.125
It is going to add our packages to the local repository, right?

00:03:18.125 --> 00:03:20.029
If I go to File Explorer,

00:03:20.029 --> 00:03:22.340
so this is the yum repository.

00:03:22.340 --> 00:03:23.735
Here you can see com,

00:03:23.735 --> 00:03:26.120
I think it is already added to this repository.

00:03:26.120 --> 00:03:30.695
Let me go insert your demo project and foster Maven project.

00:03:30.695 --> 00:03:31.955
This is the one, right?

00:03:31.955 --> 00:03:33.710
And the snapshot, you can see

00:03:33.710 --> 00:03:37.685
our packages is already added weight because it is the eclipsed.

00:03:37.685 --> 00:03:41.330
By default, it might be taking whenever we do some changes in a way,

00:03:41.330 --> 00:03:42.710
if you want to get it done,

00:03:42.710 --> 00:03:46.580
we need to go to the Manhattan Project in our Eclipse and go

00:03:46.580 --> 00:03:50.690
to right-click run math and build.

00:03:50.690 --> 00:03:53.570
Here I'm going to go clean nothing but in

00:03:53.570 --> 00:03:56.645
case any files are generated by the previous build.

00:03:56.645 --> 00:04:01.565
Clean those files, let me execute to only clean and we'll see what happens.

00:04:01.565 --> 00:04:04.640
I'm just executing the clean goal.

00:04:04.640 --> 00:04:07.205
Okay. It has been executed successfully.

00:04:07.205 --> 00:04:08.510
And if I am correct,

00:04:08.510 --> 00:04:12.635
we could not able to see the target directory in our project.

00:04:12.635 --> 00:04:13.910
Let me go back.

00:04:13.910 --> 00:04:17.179
So I'm going back to my user.

00:04:17.179 --> 00:04:19.640
Under user, we help projects, right?

00:04:19.640 --> 00:04:23.240
So projects and custom demo project.

00:04:23.240 --> 00:04:26.165
And you can see there is no target directory or here,

00:04:26.165 --> 00:04:28.550
here it is showing because it is not updated.

00:04:28.550 --> 00:04:31.100
But anyway, if I refresh again, it gets created.

00:04:31.100 --> 00:04:33.320
Whenever we refresh it, build the project.

00:04:33.320 --> 00:04:35.765
That's the behavior of the eclipse.

00:04:35.765 --> 00:04:40.700
But anyway, we cannot able to see the targeted director because we have just two cleaned.

00:04:40.700 --> 00:04:44.540
Again, I'm executing my map and goal on my project that

00:04:44.540 --> 00:04:49.700
is running as and build clean install.

00:04:49.700 --> 00:04:51.770
Okay, whenever I do install,

00:04:51.770 --> 00:04:55.265
it automatically runs all these goals,

00:04:55.265 --> 00:05:00.095
whatever goals are there in the default lifecycle prior to the install,

00:05:00.095 --> 00:05:02.075
everything it is going to execute.

00:05:02.075 --> 00:05:03.785
So let's execute it.

00:05:03.785 --> 00:05:05.820
I'm just running.

00:05:07.600 --> 00:05:09.830
Okay, building successful.

00:05:09.830 --> 00:05:14.060
If I go up, you can see here it is executing all goals.

00:05:14.060 --> 00:05:18.365
Default to clean default resources and their default compile,

00:05:18.365 --> 00:05:20.690
default attests to resource like that.

00:05:20.690 --> 00:05:22.700
And the testing also it has done,

00:05:22.700 --> 00:05:24.425
once the testing is done,

00:05:24.425 --> 00:05:25.850
It's created a JAR file.

00:05:25.850 --> 00:05:29.090
You can see here, this is the JAR file it created default install.

00:05:29.090 --> 00:05:31.595
It should install in the local repository, right?

00:05:31.595 --> 00:05:33.170
So installing this one,

00:05:33.170 --> 00:05:36.860
it is taking the JAR file from this location and it

00:05:36.860 --> 00:05:40.880
is adding to see Dr. users will access DMT repository,

00:05:40.880 --> 00:05:42.740
okay, in this location it is adding.

00:05:42.740 --> 00:05:46.670
Alright, so that is what it is going to do the install that sulfur,

00:05:46.670 --> 00:05:51.725
this lecture, hopefully you got an idea how it works on the eclipse.

00:05:51.725 --> 00:05:56.375
In next section, we are going to see how to work with Marvin on Linux system.

00:05:56.375 --> 00:06:00.035
There we discuss some of the concepts which we haven't covered over here.

00:06:00.035 --> 00:06:02.850
Thanks for watching and see you there.
