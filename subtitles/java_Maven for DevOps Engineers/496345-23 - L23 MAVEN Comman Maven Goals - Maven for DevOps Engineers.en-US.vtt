WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.940
In previous lecture, we have seen different math

00:00:02.940 --> 00:00:05.970
and goals to execute or to build our code.

00:00:05.970 --> 00:00:08.865
In this lecture, I'm going to show you what of the

00:00:08.865 --> 00:00:12.180
quite commonly used with Marvin goals or MATLAB commands.

00:00:12.180 --> 00:00:13.725
That is quite simple.

00:00:13.725 --> 00:00:16.905
At this moment, we have the target directory.

00:00:16.905 --> 00:00:20.070
Usually whenever we are building any new application,

00:00:20.070 --> 00:00:22.485
we are going to clean the existing repository.

00:00:22.485 --> 00:00:24.210
That is your Vm, clean.

00:00:24.210 --> 00:00:26.250
Whenever we do MV and clean,

00:00:26.250 --> 00:00:30.000
it is going to clear all the files which created in the previous build.

00:00:30.000 --> 00:00:32.100
And you can see here what it is doing.

00:00:32.100 --> 00:00:37.545
It is executing the maven clean goal and it's diluting and their folder off target,

00:00:37.545 --> 00:00:42.175
okay, because this target directory itself Creator from the previous build.

00:00:42.175 --> 00:00:43.955
If I check your list,

00:00:43.955 --> 00:00:46.745
you can see there is no target directory.

00:00:46.745 --> 00:00:50.030
Next, we want to execute our build the code.

00:00:50.030 --> 00:00:56.075
So instead of executing each command like eNB and compare, test,

00:00:56.075 --> 00:01:02.165
package, install, okay, instead of executing all this,

00:01:02.165 --> 00:01:03.995
if I do only install,

00:01:03.995 --> 00:01:05.840
that would be more than enough.

00:01:05.840 --> 00:01:08.525
Why? Because whenever we execute install,

00:01:08.525 --> 00:01:13.025
it is going to execute all the goals which are prior to install.

00:01:13.025 --> 00:01:14.900
If you see that default lifecycle,

00:01:14.900 --> 00:01:17.360
you can see validate, compile,

00:01:17.360 --> 00:01:19.745
test, compelled test, package,

00:01:19.745 --> 00:01:22.370
verify, all are before to install.

00:01:22.370 --> 00:01:24.980
That's the reason if you execute only installed,

00:01:24.980 --> 00:01:26.195
that is more than enough.

00:01:26.195 --> 00:01:28.460
And while executing install again,

00:01:28.460 --> 00:01:30.215
we need to clean the previous build.

00:01:30.215 --> 00:01:34.685
That is the reason it's always best practice to use Jacobian clean install.

00:01:34.685 --> 00:01:38.480
This is the best command we mostly use in case you would like

00:01:38.480 --> 00:01:42.365
to take until installing the packages sent to the local repository.

00:01:42.365 --> 00:01:45.635
If you don't want to install the work packages onto local repository,

00:01:45.635 --> 00:01:49.160
maybe clean package is sufficient.

00:01:49.160 --> 00:01:52.340
Okay, So, but in most of the cases we

00:01:52.340 --> 00:01:56.045
execute clean install so that it will get to deploy it into the,

00:01:56.045 --> 00:01:57.215
once the build is done,

00:01:57.215 --> 00:02:00.229
it is going to deploy it into the local repository.

00:02:00.229 --> 00:02:02.225
And you can see here this time,

00:02:02.225 --> 00:02:03.890
our goals are quite faster,

00:02:03.890 --> 00:02:06.770
even it's not taken five seconds because most of

00:02:06.770 --> 00:02:10.775
the required packages are already there in our local repository.

00:02:10.775 --> 00:02:14.540
That is the reason first-time whenever you execute any project,

00:02:14.540 --> 00:02:16.865
it will take a little bit of time to take the,

00:02:16.865 --> 00:02:19.925
all the required packages from the remote repository.

00:02:19.925 --> 00:02:21.170
Once that is done,

00:02:21.170 --> 00:02:24.155
it would be quite faster in the subsequent bids.

00:02:24.155 --> 00:02:29.660
Now, again, if I create a new project and if I execute building up that project,

00:02:29.660 --> 00:02:32.630
that project to record some of the libraries or packages

00:02:32.630 --> 00:02:35.780
which has been downloaded by this program.

00:02:35.780 --> 00:02:38.750
Still it helps because even that also

00:02:38.750 --> 00:02:41.990
go and check in the local repository with that context.

00:02:41.990 --> 00:02:46.370
In next video, I'm going to create a new project from our Linux command line.

00:02:46.370 --> 00:02:50.225
There is your option, even we can use the archetype over here as well.

00:02:50.225 --> 00:02:52.340
I will show you how to use that.

00:02:52.340 --> 00:02:55.230
Thanks for watching and see you there.
