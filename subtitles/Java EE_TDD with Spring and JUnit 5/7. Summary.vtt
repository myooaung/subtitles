WEBVTT
1
00:00:00.000 --> 00:00:02.930
In this section, we're going to review what we learned.

2
00:00:02.930 --> 00:00:05.692
The review web service is a Spring Boot 5 microservice that

3
00:00:05.692 --> 00:00:10.015
persists reviews to and from a MongoDB NoSQL database.

4
00:00:10.015 --> 00:00:13.146
It implements the standard components, namely a controller,

5
00:00:13.146 --> 00:00:15.299
a service, and a repository.

6
00:00:15.299 --> 00:00:17.635
The new thing about this web service is that our

7
00:00:17.635 --> 00:00:21.600
persistence logic uses Spring Data, which generates our persistence code for us.

8
00:00:21.600 --> 00:00:25.576
We reviewed how to test our controller using MockMvc.

9
00:00:25.576 --> 00:00:27.564
This was mostly review from the last module,

10
00:00:27.564 --> 00:00:29.825
but this module introduced date comparisons,

11
00:00:29.825 --> 00:00:34.358
as well as demonstrated how to test a more complicated JSON document.

12
00:00:34.358 --> 00:00:37.090
We very briefly reviewed our service testing strategy,

13
00:00:37.090 --> 00:00:40.518
which included loading a Spring application context using

14
00:00:40.518 --> 00:00:43.984
the SpringBootTest annotation and testing the service's

15
00:00:43.984 --> 00:00:46.621
interactions with a mock repository.

16
00:00:46.621 --> 00:00:51.190
Finally, we got into the meat of the module, namely testing our repository.

17
00:00:51.190 --> 00:00:55.612
We leveraged the Jackson ObjectMapper to load data from a sample JSON file

18
00:00:55.612 --> 00:00:58.744
and Spring's MongoTemplate to insert that data into Mongo.

19
00:00:58.744 --> 00:01:03.688
This enabled us to write test methods against a known set of good data.

20
00:01:03.688 --> 00:01:07.666
We finished up the module by building a custom JUnit 5 Extension and

21
00:01:07.666 --> 00:01:10.282
Helper annotation to both make our tests more elegant,

22
00:01:10.282 --> 00:01:13.163
as well as make our testing more flexible.

23
00:01:13.163 --> 00:01:13.695
At this point,

24
00:01:13.695 --> 00:01:23.000
you should feel more confident using Spring's MockMvc to test controllers, and you should be able to write tests against a repository connected to MongoDB.

