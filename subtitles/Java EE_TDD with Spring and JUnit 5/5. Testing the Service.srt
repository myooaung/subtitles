1
00:00:00,009 --> 00:00:03,362
Now let's turn our attention to testing our service.

2
00:00:03,362 --> 00:00:06,642
The role of a service in the Spring application is twofold.

3
00:00:06,642 --> 00:00:08,917
First, it implements your business logic.

4
00:00:08,917 --> 00:00:11,310
While the controller is responsible for handling web

5
00:00:11,310 --> 00:00:13,305
requests and generating web responses,

6
00:00:13,305 --> 00:00:16,582
it should be isolated from the inner workings of the

7
00:00:16,582 --> 00:00:18,198
rest of the Spring application.

8
00:00:18,198 --> 00:00:22,015
The service implements any business logic that you may require.

9
00:00:22,015 --> 00:00:22,387
Second,

10
00:00:22,387 --> 00:00:25,835
the service serves as an abstraction layer between your

11
00:00:25,835 --> 00:00:27,968
controller and back-end dependencies.

12
00:00:27,968 --> 00:00:31,284
If the data is stored in a database and accessed a

13
00:00:31,284 --> 00:00:34,792
repository today and tomorrow it's stored in the cloud and

14
00:00:34,792 --> 00:00:36,613
accessed via a web service call,

15
00:00:36,613 --> 00:00:40,107
the Spring service isolates the controller from needing to know that.

16
00:00:40,107 --> 00:00:43,119
The controller simply asks the service for a product,

17
00:00:43,119 --> 00:00:45,996
and the service is responsible for connecting to the

18
00:00:45,996 --> 00:00:48,270
correct dependency and retrieving it.

19
00:00:48,270 --> 00:00:52,497
The product service provides four key pieces of functionality: First,

20
00:00:52,497 --> 00:00:57,267
it allows us to find a product using its ID or to find all products.

21
00:00:57,267 --> 00:00:59,643
Next, it allows us to save a product,

22
00:00:59,643 --> 00:01:02,022
which creates a new product in the database.

23
00:01:02,022 --> 00:01:05,394
Then it allows us to update an existing product.

24
00:01:05,394 --> 00:01:09,060
And finally, it allows us to delete a product from the database.

25
00:01:09,060 --> 00:01:13,072
Let's look at the source code for the product service and see how it works.

26
00:01:13,072 --> 00:01:15,046
The ProductService is pretty simple because there's not

27
00:01:15,046 --> 00:01:17,175
a whole lot of business logic to it.

28
00:01:17,175 --> 00:01:17,623
First,

29
00:01:17,623 --> 00:01:21,953
the ProductService interface defines five methods: findById returns an

30
00:01:21,953 --> 00:01:25,606
optional product instance for the product with the specified ID.

31
00:01:25,606 --> 00:01:28,383
If the product's not found, then it returns an Optional empty.

32
00:01:28,383 --> 00:01:32,449
FindAll returns a list containing all products in the database.

33
00:01:32,449 --> 00:01:35,320
Update updates the specified product and returns

34
00:01:35,320 --> 00:01:37,340
true if the update was successful.

35
00:01:37,340 --> 00:01:40,521
Save saves a product to the database and returns a

36
00:01:40,521 --> 00:01:42,499
reference to the product that was saved.

37
00:01:42,499 --> 00:01:45,670
Finally, the delete method deletes a product from the database,

38
00:01:45,670 --> 00:01:48,373
returning true if the deletion was successful.

39
00:01:48,373 --> 00:01:51,988
The productServiceImpl class implements the ProductService interface.

40
00:01:51,988 --> 00:01:54,513
It's annotated with Spring's Service annotation,

41
00:01:54,513 --> 00:01:57,258
which identifies it as a Spring service.

42
00:01:57,258 --> 00:01:59,260
When Spring scans the class path,

43
00:01:59,260 --> 00:02:01,748
it'll find the productServiceImpl through this annotation

44
00:02:01,748 --> 00:02:04,795
and add it to its application context.

45
00:02:04,795 --> 00:02:08,503
The ProductServiceImpl defines a constructor that accepts a product

46
00:02:08,503 --> 00:02:12,080
repository and saves that product repository to a number variable.

47
00:02:12,080 --> 00:02:14,719
When Spring is creating a ProductService and sees

48
00:02:14,719 --> 00:02:18,672
that it needs a productRepository, which itself is a Spring-managed bean,

49
00:02:18,672 --> 00:02:21,179
then it will automatically pass the productRepository to

50
00:02:21,179 --> 00:02:23,973
the productServiceImpl's constructor.

51
00:02:23,973 --> 00:02:26,339
The findById, findAll, update,

52
00:02:26,339 --> 00:02:29,118
and delete methods are all pass through methods to

53
00:02:29,118 --> 00:02:30,674
the underlying productRepository.

54
00:02:30,674 --> 00:02:34,135
The save method first sets the version of the new product to 1,

55
00:02:34,135 --> 00:02:36,768
and then passes it to the productRepository.

56
00:02:36,768 --> 00:02:39,631
This service is simple, but if you had any complex business logic,

57
00:02:39,631 --> 00:02:42,231
this is the place where it would go.

58
00:02:42,231 --> 00:02:44,766
As you just saw, the product service is fairly simple.

59
00:02:44,766 --> 00:02:47,251
For all cases, other than the save method,

60
00:02:47,251 --> 00:02:50,426
it's just a pass through to the underlying repository.

61
00:02:50,426 --> 00:02:53,275
As such, our testing strategy is also simple.

62
00:02:53,275 --> 00:02:55,375
We're going to create a mock product repository,

63
00:02:55,375 --> 00:02:57,648
wire it into the product service,

64
00:02:57,648 --> 00:03:01,532
and then test various scenarios by configuring the response from the mock

65
00:03:01,532 --> 00:03:05,383
product repository and validating the response from the service.

66
00:03:05,383 --> 00:03:08,814
Let's dive in and write our unit test for the product service.

67
00:03:08,814 --> 00:03:11,663
The ProductServiceTest class is annotated with both

68
00:03:11,663 --> 00:03:13,680
the JUnit 5 ExtendWith annotation,

69
00:03:13,680 --> 00:03:17,719
to allow the SpringExtension.class to receive JUnit 5 lifecycle

70
00:03:17,719 --> 00:03:20,458
notifications and manage our application context,

71
00:03:20,458 --> 00:03:22,480
and the SpringBootTest annotation,

72
00:03:22,480 --> 00:03:26,469
to tell Spring to scan our class path and construct an application context.

73
00:03:26,469 --> 00:03:30,761
We have Autowired our ProductService instance to test into our Test class,

74
00:03:30,761 --> 00:03:33,285
and we've defined a mock ProductRepository.

75
00:03:33,285 --> 00:03:36,056
The first test method is findByIdSuccess,

76
00:03:36,056 --> 00:03:38,634
which tests a successful product retrieval.

77
00:03:38,634 --> 00:03:41,926
We create a mockProduct object and configure the mockProduct

78
00:03:41,926 --> 00:03:44,862
repository to return that product when its findById method

79
00:03:44,862 --> 00:03:46,940
is called with the argument 1.

80
00:03:46,940 --> 00:03:49,856
We then execute the ProductService's findById method,

81
00:03:49,856 --> 00:03:53,623
and then execute two assertions on the returned object.

82
00:03:53,623 --> 00:03:56,228
First, the returnedProduct should be present,

83
00:03:56,228 --> 00:03:57,392
and second,

84
00:03:57,392 --> 00:03:59,797
the returnedProduct should be the same object as

85
00:03:59,797 --> 00:04:01,916
the mockProduct we created above.

86
00:04:01,916 --> 00:04:03,865
If you've been using JUnit for a while,

87
00:04:03,865 --> 00:04:06,687
you may notice that JUnit 5 has switched the order of

88
00:04:06,687 --> 00:04:08,598
the arguments in its Assert method.

89
00:04:08,598 --> 00:04:12,873
It now expects the condition first and the error message as the last argument.

90
00:04:12,873 --> 00:04:16,052
The second test method is findByIdNotFound,

91
00:04:16,052 --> 00:04:17,799
and it repeats the same steps,

92
00:04:17,799 --> 00:04:21,339
but with a mock repository that returns an Optional.empty and an

93
00:04:21,339 --> 00:04:23,893
assertion that the product is not present.

94
00:04:23,893 --> 00:04:26,300
The third test method is testFindAll.

95
00:04:26,300 --> 00:04:29,421
This method constructs two mockProducts and configures the

96
00:04:29,421 --> 00:04:32,479
mock repository to return a list containing those two objects

97
00:04:32,479 --> 00:04:34,939
when its findAll method is called.

98
00:04:34,939 --> 00:04:36,931
We execute the service's findAll method,

99
00:04:36,931 --> 00:04:39,620
and then validate that we received the two objects back.

100
00:04:39,620 --> 00:04:42,896
Finally, the testSave method creates a mockProduct,

101
00:04:42,896 --> 00:04:45,274
configures the mock repository to return that product

102
00:04:45,274 --> 00:04:49,483
when its save method is called, and then we execute the service's save method,

103
00:04:49,483 --> 00:04:51,530
passing it that same mockProduct.

104
00:04:51,530 --> 00:04:54,325
We then assert that the returnedProduct is not null

105
00:04:54,325 --> 00:04:56,691
and that the version is set to 1,

106
00:04:56,691 --> 00:05:00,457
which is the only business logic that the product service provides for us.

107
00:05:00,457 --> 00:05:03,814
There are plenty of opportunities for you to add more test cases here,

108
00:05:03,814 --> 00:05:06,367
such as support for update, failures and save,

109
00:05:06,367 --> 00:05:07,994
update, and delete, and so forth.

110
00:05:07,994 --> 00:05:15,000
This test class will get you started, and the pattern for all of these test cases is the same.

