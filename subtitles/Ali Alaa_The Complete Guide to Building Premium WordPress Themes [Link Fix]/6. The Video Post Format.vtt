WEBVTT

0
00:03.270 --> 00:08.790
Let's create the Video Post Format in this lecture. And in the video post format we're gonna follow a slightly

1
00:08.790 --> 00:10.040
different approach.

2
00:10.140 --> 00:12.600
So let's search for "post format video".

3
00:15.900 --> 00:18.480
And that is go to the index.

4
00:18.690 --> 00:24.100
So what we're gonna do is we're gonna make the video format exactly like the standard post

5
00:24.120 --> 00:30.570
format like this one. The only difference will be instead of this image we will display the first video we

6
00:30.690 --> 00:33.230
find in the post content.

7
00:33.290 --> 00:33.540
Right?

8
00:33.540 --> 00:40.080
So we could have done it like the quote and the link and made the users add the just video in the content

9
00:40.140 --> 00:41.470
and displayed here.

10
00:41.490 --> 00:42.510
But let's try another thing.

11
00:42.540 --> 00:48.780
Let's allow the users to write normal post that will have videos embedded in it.

12
00:48.780 --> 00:54.630
And then if they chose a video post format instead of the featured image we will display the first video

13
00:54.910 --> 00:56.100
in the post content,

14
00:56.100 --> 00:57.890
right?

15
00:57.930 --> 01:02.740
So let's go and create the content-video

16
01:02.760 --> 01:05.220
file.

17
01:05.970 --> 01:13.970
And as we mentioned this one will be similar to the normal content. So let's copy the normal content.

18
01:14.210 --> 01:18.860
And the only difference here will be in the post thumbnail. Instead of the post thumbnail

19
01:18.890 --> 01:22.480
we need to find the first video in the post content and display it.

20
01:22.490 --> 01:28.490
And if the post has no videos we will fall back to the post thumbnail,

21
01:28.650 --> 01:29.390
right?

22
01:29.510 --> 01:30.650
So let's open PHP tags

23
01:30.800 --> 01:37.790
at the very start. And let's define a variable called $videos. And let's call a function called get_media

24
01:38.790 --> 01:41.240
get_media_embedded_in_content().

25
01:41.330 --> 01:48.400
So this function will take the content of the post and an array of embed types. And it will return an

26
01:48.400 --> 01:51.760
array of all the embedded content in this post.

27
01:51.770 --> 02:00.250
Right? So we need the content of the post. So get_the_content(). And we need the types. So a video could be maybe a

28
02:00.290 --> 02:13.050
"video" tag normal HTML5 VIDEO tag or maybe an "object" tag or an "embed" tag or just an "iframe" like a YouTube

29
02:13.530 --> 02:14.740
embed or something.

30
02:15.090 --> 02:24.830
So let's var_dump() this, the output of this function. And let's go and see. And as you can see we have

31
02:24.830 --> 02:26.300
posts with videos in it.

32
02:26.300 --> 02:28.010
So let's open this one.

33
02:28.190 --> 02:31.870
So I've a video here but the function here is returning an empty array.

34
02:32.850 --> 02:40.050
And that's because as we mentioned in I think the previous section, get_the_content() will get the content without any

35
02:40.290 --> 02:42.300
filters applied to it.

36
02:42.420 --> 02:48.150
And as we already know the content passes through a lot of filters and we need these filters in order

37
02:48.150 --> 02:50.860
to get the final content, right?

38
02:50.940 --> 02:59.610
So let's define another variable called $content and let's apply filters. And we'll apply "the_content" to get_the_content().

39
02:59.610 --> 03:03.540
And now the output of this will be the content,

40
03:03.960 --> 03:07.240
but with all the filters applied, right?

41
03:07.250 --> 03:14.220
So you might think why we didn't just call the_content() here which outputs the content with all the filters

42
03:14.220 --> 03:14.820
applied.

43
03:14.940 --> 03:19.170
And that's because this is an argument to the function and the_content() will echo the output.

44
03:19.170 --> 03:22.620
We just need the output returned in a variable, right?

45
03:22.710 --> 03:27.330
So let's pass the content now and let's refresh.

46
03:27.340 --> 03:35.200
And as you can see we have an array and this post has one video. So array of one video and here also.

47
03:35.510 --> 03:36.990
Let's ignore the VideoPress.

48
03:36.990 --> 03:42.460
It's testing a plugin that we're not using. Let's ignore it. We've a YouTube video and a

49
03:42.460 --> 03:47.310
video from WordPress.tv. So now we have the video in this array.

50
03:47.530 --> 03:54.140
Let's now instead of the post thumbnail check if we have a video, display the video otherwise display

51
03:54.230 --> 03:55.590
the post thumbnail.

52
03:55.910 --> 03:59.250
So in addition to checking that we have a post thumbnail

53
03:59.570 --> 04:02.820
let's also check that the video is empty.

54
04:03.140 --> 04:08.140
So we don't have any videos. So if the video is empty we'll also display the post thumbnail.

55
04:08.330 --> 04:16.180
And let's write here another if condition. And this condition will deal with being in the archive page.

56
04:16.190 --> 04:17.980
So not single.

57
04:18.980 --> 04:28.440
So if you in the loop not in the single page and the video array is not empty then we need to output the video.

58
04:28.700 --> 04:34.650
So let's close the if condition. And let's add a class called,

59
04:35.500 --> 04:40.320
DIV sorry, with a class "c-post__video".

60
04:40.370 --> 04:46.250
And inside of it we will just echo the video actually 

61
04:46.400 --> 04:47.660
it's called videos.

62
04:50.610 --> 04:56.750
So let's "echo $videos[0]" which would be the first video in this array.

63
04:56.840 --> 04:57.990
Right?

64
04:58.220 --> 05:07.250
Let's see now. And as you can see we have the videos and if we visit a post of them what we need to do is

65
05:07.250 --> 05:10.520
we need to still display the post thumbnail

66
05:10.640 --> 05:11.440
if there is one.

67
05:11.510 --> 05:12.180
Right?

68
05:12.220 --> 05:14.500
So let's edit this post and add a post thumbnail.

69
05:24.480 --> 05:29.340
And right now we're not displaying the post thumbnail because in this if condition we're only displaying

70
05:29.340 --> 05:30.500
the post thumbnail

71
05:30.630 --> 05:34.870
if there is a post thumbnail and we're also checking if the videos are empty.

72
05:34.890 --> 05:35.980
Right?

73
05:36.060 --> 05:38.190
We need to add an "||" here. So if

74
05:38.220 --> 05:41.680
the videos are empty or if you are in the single.

75
05:42.340 --> 05:49.390
So "is_single()". In the single page you also need to display the post thumbnail.

76
05:49.440 --> 05:54.410
So let's go back and as you can see you have the post thumbnail here and the video in the content

77
05:54.990 --> 06:00.060
and in the loop we will still have the video as expected.

78
06:00.060 --> 06:08.140
Let's try and remove the video to make sure the post thumbnail will still appear. I don't know how to remove it.

79
06:08.770 --> 06:11.710
"What kind of guy turns down it to" show up.

80
06:11.930 --> 06:20.070
So let's remove this whole block and update. And we should now have the post thumbnail because we don't

81
06:20.070 --> 06:21.970
have any videos in the post.

82
06:22.450 --> 06:27.480
Let's finally try something. Let's try to add a video using the Gutenberg blocks. The post that we

83
06:27.480 --> 06:30.030
were editing was created using the classic editor.

84
06:30.030 --> 06:33.260
So let's try to add a video.

85
06:35.980 --> 06:39.260
Actually we have a separate block for YouTube videos.

86
06:43.870 --> 06:45.200
Le's updates and

87
06:45.410 --> 06:50.280
make sure our post format is also working with Gutenberg.

88
06:51.360 --> 06:52.630
So great.

89
06:52.720 --> 06:58.630
One final thing we need to make the video is responsive. Right now as you can see they have a fixed width.

90
06:59.350 --> 07:02.800
And this width will actually not change when we resize the window.

91
07:03.280 --> 07:04.330
So I have a class. called,

92
07:04.420 --> 07:06.540
I think we used that before.

93
07:07.360 --> 07:14.770
It's called "u-responsive_video". And we need to add this class only if we have an iframe. It makes

94
07:14.980 --> 07:18.960
iframe videos responsive. Let's var_dump() something here.

95
07:20.640 --> 07:28.480
We'll call a function called string position or strpos(). And we'll give it our first video.

96
07:31.120 --> 07:37.710
And an opening IFRAME and let's see what this will do.

97
07:38.990 --> 07:40.960
And we have an "int(0)", right?

98
07:40.990 --> 07:42.150
So this function will do?

99
07:42.160 --> 07:48.060
It will take a string which is the "<iframe" and it will search for a substring in it and return its

100
07:48.070 --> 07:48.910
position.

101
07:49.180 --> 07:55.510
So the position of the iframe opening tag is 0 because it is the first thing in the in the iframe.

102
07:55.890 --> 08:00.370
But if the iframe opening tag is not found this function will return "false".

103
08:00.400 --> 08:00.970
Right?

104
08:01.030 --> 08:05.130
So we need to do an if condition that this is not equals "false".

105
08:08.720 --> 08:14.570
And that's because if it's 0 which we still need to display the class,

106
08:14.600 --> 08:16.830
right?

107
08:17.010 --> 08:20.980
And then DIV with a class "u-responsive-

108
08:21.160 --> 08:23.700
"u-responsive-video".

109
08:24.220 --> 08:29.850
And let's close the if condition. And then we'll have to repeat this condition again.

110
08:31.510 --> 08:33.610
To close the DIV, right?

111
08:36.700 --> 08:42.220
So only if we have an iframe video, we need to add this class and then we echo the iframe in the

112
08:42.220 --> 08:44.050
videos.

113
08:44.180 --> 08:53.060
So let's see now and as you can see the video is now responsive. So great. So I think that's it for the video post format.

114
08:53.310 --> 08:56.100
Let's see the Audio Post Format in the next lecture.