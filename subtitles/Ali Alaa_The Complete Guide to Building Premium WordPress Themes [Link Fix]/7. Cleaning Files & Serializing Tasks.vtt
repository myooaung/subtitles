WEBVTT

0
00:03.450 --> 00:08.320
So let's summarize what we've  done so far in case you're a bit confused. 

1
00:09.180 --> 00:16.700
So we have now our source folder and our dist folder. Our source folder will only be used during development

2
00:17.580 --> 00:20.900
and our dist folder will be used in production.

3
00:21.330 --> 00:25.860
So actually the source folder will not be included in the final theme, only the dist folder,

4
00:26.420 --> 00:27.410
right?

5
00:28.900 --> 00:38.130
So we've the assets which contains images folder. Anything we put inside the images folder gets compressed

6
00:38.700 --> 00:45.670
and then moved to the images folder in the dist folder. We haven't done the JavaScript task yet. But here

7
00:45.670 --> 00:51.820
will have the row ES6 JavaScript files and then we will compile it and move it to the JavaScript

8
00:51.820 --> 01:01.180
file in the dist folder. scss folder will compile the admin.scss and bundle.scss and then move them to

9
01:01.180 --> 01:07.140
the css folder in dist folder. Anything else you add to the assets folder,

10
01:07.430 --> 01:10.420
it needs to be copied to the dist folder.

11
01:10.680 --> 01:15.200
Since as I mentioned the source folder will not actually be included in the final theme so need to copy it 

12
01:15.200 --> 01:15.440
to the  

13
01:15.470 --> 01:22.900
dist folder. All right, so in the last lecture we had this problem that we whenever we delete something from

14
01:22.900 --> 01:25.670
the source it's not deleted from the dist.

15
01:27.470 --> 01:33.040
So the best way to tackle that is to actually whenever we want to run our style or or any task that

16
01:33.040 --> 01:38.970
we created to delete the dist folder entirely and then recreate it from the beginning.

17
01:41.370 --> 01:46.360
So let's create a task now that will delete the folder generally.

18
01:46.360 --> 01:54.990
So I'm gonna google "npm del". And it's a famous package.

19
01:58.580 --> 02:00.180
So let's install it.

20
02:04.550 --> 02:07.840
And just I'm gonna --save-dev instead

21
02:08.230 --> 02:09.410
instead of --save.

22
02:13.600 --> 02:15.730
And it's on to see how to use it.

23
02:18.060 --> 02:28.260
Let's actually do it directly in the gulpfile. So let's "import del from 'del'".

24
02:33.300 --> 02:44.210
And create a task. A new task. Let's call it "clean". So I need to clean the folder first before running any task.

25
02:50.600 --> 02:52.190
And sorry, export.

26
02:56.520 --> 02:58.040
And this time we will return

27
03:01.110 --> 03:09.300
the del() function. And it takes an array of paths to delete. So in our case we want to delete the dist folder.

28
03:09.580 --> 03:11.820
So just simply give it, "dist".

29
03:15.680 --> 03:19.260
And the delete function returns a JavaScript promise.

30
03:19.860 --> 03:25.590
And if you return a JavaScript promise in a Gulp task, you  also don't need to the done() 

31
03:25.690 --> 03:27.780
signal kind of thing.

32
03:28.710 --> 03:36.810
And one more thing in ES6, if you have arrow functions and your function body is only one line you can

33
03:36.810 --> 03:47.370
actually skip the curly braces and the return keyword. So you can do that and it's exactly the same thing.

34
03:47.420 --> 03:53.900
So let's try and run the delete function. And we've the folder here and the command line.

35
03:54.690 --> 03:57.950
So "gulp clean".

36
04:01.000 --> 04:09.390
And as you can see it's deleted. So now doesn't make sense to actually every time we need to run our "styles"

37
04:09.410 --> 04:14.780
task to run the "clean" first and then run the "styles" and so on.

38
04:14.810 --> 04:18.030
So need to be done in one task. To do that 

39
04:18.170 --> 04:26.060
we'll use a new Gulp function. And this function will run multiple tasks concurrently.

40
04:26.060 --> 04:31.860
So let's create a new task. And I'll call it "build".

41
04:32.150 --> 04:34.510
So this task will build our project.

42
04:34.790 --> 04:40.850
It will clean the dist folder first and then run all the tasks that we've created, the "styles" and the "images"

43
04:40.850 --> 04:41.420
and the "copy". 

44
04:45.840 --> 04:48.030
So need to type the "const" keyword

45
04:48.060 --> 04:48.600
and then

46
04:52.390 --> 04:53.830
"gulp.series()".

47
04:54.760 --> 05:00.270
What this will do is, you pass it multiple tasks and it'll run each task one after the other.

48
05:00.340 --> 05:06.180
It will wait for the first one to finish first and then run the second one and so on.

49
05:07.390 --> 05:13.810
And that's because we want to clean the folder first, remove the folder first before running any task

50
05:14.670 --> 05:15.810
So run "clean"

51
05:16.000 --> 05:21.380
and then any task that we'll type in the other arguments will only run

52
05:21.430 --> 05:23.980
after the clean is done.

53
05:23.980 --> 05:28.990
So what if we want to run tasks at the same time. We'll use "gulp

54
05:29.010 --> 05:31.810
.parallel()".

55
05:32.110 --> 05:38.650
So we have the "styles" and the "images" and "copy".

56
05:38.770 --> 05:43.300
We actually don't care which one of these run first or finish first.

57
05:43.350 --> 05:48.150
They can run at the same time and that will cause no problem.

58
05:48.150 --> 05:50.580
But "clean" however needs to be done first.

59
05:50.670 --> 05:51.430
So that's why we used

60
05:51.480 --> 06:04.030
"gulp.series()".  So let's try now and run the "build" function, task. "gulp build".

61
06:04.240 --> 06:10.670
And as you can see "Starting 'build'" and "Starting 'clean'" and then "Finished 'clean'" first before starting

62
06:10.670 --> 06:14.050
the others. And the others started at the same time.

63
06:14.230 --> 06:18.260
So "Starting 'styles', 'images' and 'copy'" and then they finish. Whenever they finish.

64
06:19.370 --> 06:20.240
And then build is end.

65
06:25.490 --> 06:31.670
If we now open dist folder we'll see the old asset folder is gone now.

66
06:31.880 --> 06:37.880
And the image that we deleted. Let's just create it from scratch.

67
06:37.900 --> 06:39.130
The dist folder.

68
06:39.730 --> 06:42.690
So the build task will, we will use it

69
06:43.450 --> 06:51.020
when we want to, you know, build the our files for production. But during development we'd like to do the same

70
06:51.020 --> 06:51.580
thing.

71
06:53.800 --> 06:55.940
So I'm gonna create another task

72
06:55.960 --> 06:59.160
called maybe, "dev".

73
06:59.270 --> 07:01.010
So I'm gonna do exactly the same thing.

74
07:01.490 --> 07:06.740
But after building we want to watch for changes, because of development.

75
07:06.920 --> 07:13.490
So we will run the "watch" task after the "styles" and "images" and "copy" tasks are done.

76
07:15.220 --> 07:22.540
So build the files first and then we watch for changes. So currently we are only watching for changes

77
07:23.350 --> 07:27.180
for the SASS files only. So let's watch for

78
07:28.030 --> 07:31.580
also the "images" and the "copy" task.

79
07:32.140 --> 07:35.170
So far the images we would like to detect when

80
07:38.140 --> 07:48.410
any image is added to the images folder. We can actually use this path. So I'm gonna type "paths.images

81
07:49.300 --> 07:50.380
.src".

82
07:52.510 --> 07:57.660
And once something is changed, we would like to run the "images" task.

83
08:00.840 --> 08:02.220
And same thing for the "copy".

84
08:04.920 --> 08:06.680
So "paths

85
08:07.180 --> 08:12.210
.other.src" and the "copy" task.

86
08:15.520 --> 08:21.710
So let's try the "dev" task now. "gulp dev".

87
08:22.360 --> 08:22.540
Sorry.

88
08:29.650 --> 08:35.770
So it run all of the our tasks like the "build" one. And then it's watching for changes.

89
08:35.850 --> 08:39.660
So if we, maybe, you can add the

90
08:44.830 --> 08:51.280
an image or maybe you can add a file to the assets folder so we can see if the copy

91
08:51.890 --> 08:53.610
task will run.

92
08:53.800 --> 08:56.870
And as you can see "Starting 'copy'" and "Finished 'copy'".

93
08:57.320 --> 09:01.800
And just to make sure, it's added to the dist folder

94
09:05.020 --> 09:06.540
One more thing

95
09:06.640 --> 09:09.890
I just realized we don't have a default task.

96
09:10.210 --> 09:15.700
So I think we can use the "dev" task as the default one.

97
09:15.940 --> 09:25.680
So now when we run "gulp", the "dev" task will run. And other thing as I mentioned the "built" task is meant to

98
09:26.100 --> 09:29.670
be run when we want to compile our files for production,

99
09:29.670 --> 09:30.360
right?

100
09:30.690 --> 09:38.770
So whenever we run it we're probably, I'm gonna look at to see the. Whenever we run the "build"  task

101
09:38.790 --> 09:47.440
we'll have to use the production flag. And this is something that we might forget.

102
09:47.600 --> 09:56.430
So there is a more convenient way to run tasks in NPM. In the package.json file there is a "scripts"

103
09:56.590 --> 10:03.940
key here in the JSON file. You can actually right your own scripts. So I'm gonna remove the default one here and

104
10:04.920 --> 10:10.150
and let's create one called "start".

105
10:10.200 --> 10:14.510
And this will start the development task.

106
10:15.010 --> 10:22.870
So it would run "gulp". And another one we call it "build" and

107
10:25.680 --> 10:30.530
this will run "gulp build" with the production flag.

108
10:35.530 --> 10:48.630
So to run these NPM scripts, we can type instead of "gulp", we can type "npm run build".

109
10:48.760 --> 10:59.160
And as you can see it runs "gulp built" with the production flag. And we can also run the "start" task

110
11:01.990 --> 11:04.040
and this will start watching.

111
11:04.360 --> 11:11.360
So this is something convenient that you can do with NPM. Let's carry on with the other tasks in the next lecture.