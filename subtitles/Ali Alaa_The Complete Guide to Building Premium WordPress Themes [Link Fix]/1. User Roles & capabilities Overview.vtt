WEBVTT

0
00:03.150 --> 00:07.660
In this section we'll talk about a couple of security concepts in WordPress.

1
00:07.890 --> 00:14.450
So we've talked about security before and we already know about sanitization and validation and escaping.

2
00:14.550 --> 00:22.160
So in this section we'll shed some light on user roles and capabilities and also on nonces.

3
00:22.210 --> 00:28.920
So let's make sure you have your MAMP server open. And I'm gonna change to my theme and run "npm start".

4
00:36.190 --> 00:44.390
And let's go to wp-admin and login.

5
00:44.560 --> 00:49.350
So when you create a new user in WordPress, so go to Users and Add New.

6
00:49.550 --> 00:56.510
You have a field called Role here. And it could be a Subscriber or an Admin or Author and stuff like

7
00:56.510 --> 00:57.130
that.

8
00:57.440 --> 01:05.060
So the user we are currently logged in with is an Administrator. So let's create a new user and let's call it "test".

9
01:12.000 --> 01:15.430
And let's make this user a Subscriber.

10
01:18.050 --> 01:21.890
So you now have a subscriber user and we'll use this user later.

11
01:22.140 --> 01:29.330
But let's now take a look at this article here which is about roles and capabilities in WorkPress. So roles

12
01:29.330 --> 01:33.370
are as we mentioned are admins and editors and authors and stuff like that.

13
01:33.470 --> 01:39.380
And each one of these roles we have some capabilities. And capabilities are some permissions or stuff

14
01:39.440 --> 01:42.360
that you can do as a user in WordPress.

15
01:42.410 --> 01:50.540
So we have here a really good table which lists all the capabilities in the rows and in the columns we have

16
01:50.540 --> 01:53.070
the roles or the user types.

17
01:53.330 --> 01:56.000
So we have Super Admin or Admin or Editor and stuff like that.

18
01:56.210 --> 02:02.540
And then in the table cells you can check if that user type have this capability or this permission.

19
02:02.540 --> 02:07.150
So for example activate_plugins and a Super Admin and an Admin can activate plugins.

20
02:07.220 --> 02:10.090
But all the other user types cannot.

21
02:10.240 --> 02:15.010
And the Super Admin by the way is only different than an Admin

22
02:15.110 --> 02:20.660
if you have a multi-site WordPress installation. And we don't have that to Super Admin is an Admin in

23
02:20.660 --> 02:21.650
our case.

24
02:21.680 --> 02:27.470
So in order to check if the currently logged in user has a certain capability WordPress provides

25
02:27.530 --> 02:33.170
this function, current_user_can(). And it takes the capability as a string and it returns a boolean

26
02:33.170 --> 02:37.710
whether this currently logged in user can do this permission or not.

27
02:37.730 --> 02:40.680
There is also another function, user_can() without "current".

28
02:40.880 --> 02:46.460
And this is if you want to check if another user other than the currently logged in one can do something.

29
02:46.610 --> 02:50.150
But most of the time we'll use the currently logged in user.

30
02:50.150 --> 02:56.570
So these are roles and capabilities in a nutshell. Let's now create a feature that will let us further

31
02:56.570 --> 03:05.720
understand the roles and capabilities. So let's go to the our website. And in our blog

32
03:05.850 --> 03:09.180
let's create a button for each blog post somewhere here.

33
03:09.290 --> 03:15.470
And this button will delete these posts but only if the currently logged in user is allowed to delete

34
03:15.470 --> 03:16.250
posts.

35
03:16.250 --> 03:17.600
So how will we do that?

36
03:17.600 --> 03:22.550
We will create a link. And this link will go to some URL and will send some requests to the server.

37
03:22.640 --> 03:26.330
And then we'll handle this request in order to delete the post.

38
03:26.330 --> 03:35.010
So what we saw the link will be, let's open new tag here. It will be our home URL and then some query arguments

39
03:35.010 --> 03:47.050
here. So we'll have an action. It should be delete for example. And post and it will be the ID of the post.

40
03:48.520 --> 03:56.770
And then we will need to handle this request and get the post with this ID and delete it. So before handling

41
03:56.770 --> 03:59.120
lets first create this link.

42
04:02.110 --> 04:11.550
So I'm gonna go to functions.php and create a new function. Let's actually edit in the helpers file.

43
04:20.030 --> 04:26.690
So "function" and prefixed, "_themename_" let's call it "delete_post()"

44
04:30.150 --> 04:38.370
So this function will return some URL, right? Let's create this URL now. So I think,

45
04:38.510 --> 04:50.820
right. I'm gonna get the home URL using this function. And then append to it our query arguments. So "?action"

46
04:50.910 --> 04:52.550
and so on.

47
04:52.760 --> 04:56.160
But actually WordPress provides a better way to do that much cleaner

48
04:56.160 --> 05:05.020
is called, function called add_query_args or add_query_arg(). And it takes two arguments the array

49
05:05.880 --> 05:10.840
arguments we need to add to the URL and the URL that we need to add these arguments to.

50
05:10.890 --> 05:13.630
So in our case it's home URL.

51
05:15.150 --> 05:18.440
And the array will be.

52
05:18.980 --> 05:23.380
We'll have the "action" and let's prefix the action as well

53
05:23.440 --> 05:27.040
in order not to interfere with any other actions.

54
05:27.050 --> 05:33.350
Let's call it  "_themename_delete_post" and we need to get the "post".

55
05:37.640 --> 05:45.410
Ao we can make this function accept the post ID as an argument or we can directly use get_the_ID() because

56
05:45.410 --> 05:48.740
we will use this function inside of the loop.

57
05:48.740 --> 05:52.890
So get_the_ID() will get the ID of the current post in the loop.

58
05:53.680 --> 06:01.010
So we will return an A tag with this URL as the "href". So

59
06:04.600 --> 06:07.780
let's use ' here and our URL.

60
06:12.100 --> 06:13.160
And then let's close it.

61
06:17.440 --> 06:23.710
And then let's add the delete text which should be escaped and translated of course.

62
06:25.040 --> 06:32.800
So "Delete Post" and the text domain which is "_themename".

63
06:35.540 --> 06:36.810
And we are missing the.

64
06:46.480 --> 06:53.600
I think this should be fine. So let's use this function inside of our post which was I think we created a

65
06:53.620 --> 06:54.790
template part for it.

66
06:54.910 --> 07:01.700
Yes in content. Let's add it after the Read More link.

67
07:02.470 --> 07:03.770
It's not important how it looks.

68
07:03.780 --> 07:07.710
Now we just need to know how to do the functionality.

69
07:07.710 --> 07:18.110
So we'll echo the output of this function. And let's see now. And we have the post link.

70
07:18.260 --> 07:24.160
And if you look at the bottom left you'll see where this link will take us.

71
07:24.170 --> 07:28.130
So if you click one of these now it will take us to this link.

72
07:28.160 --> 07:33.890
Nothing will happen of course it won't be deleted. Because now we need to handle this request.

73
07:33.950 --> 07:38.560
We need to check if we have this action and the post and then delete this post.

74
07:38.600 --> 07:42.550
If the user has this capability. So let's do that in the next lecture.