WEBVTT

0
00:03.130 --> 00:07.410
So let's quickly recap what we've done in the last couple of lectures. 

1
00:07.440 --> 00:14.400
First we added this color field and then using wp_add_inline_styles() we had some inline styles to our websites

2
00:14.490 --> 00:19.400
in order to override some of our original styles to use this color field.

3
00:19.530 --> 00:26.520
So if we in the iframe, which represents our website, open the HEAD tag. We will find our inline styles

4
00:26.970 --> 00:30.900
here. And by changing this color by default

5
00:30.930 --> 00:36.750
the Customizer will reload the iframe. And therefore these styles will be updated. But we further

6
00:36.750 --> 00:42.640
improved this experience by using the postMessage technique and replacing the styles inside the STYLE

7
00:42.660 --> 00:51.570
tag using JavaScript. And to do that we had to duplicate the CSS string that we created in PHP. We had to

8
00:51.600 --> 00:54.510
duplicate it using JavaScript.

9
00:54.510 --> 00:59.610
So in this lecture we need to figure out a way in order to avoid this duplication. Especially if you're

10
00:59.640 --> 01:06.390
working in a large template the CSS string here could be very large and it's kind of impractical to keep

11
01:07.080 --> 01:08.850
these two things in sync.

12
01:09.030 --> 01:18.210
So what I'm proposing is defining our CSS styles just in the PHP and then passing the PHP to the JavaScript and

13
01:18.210 --> 01:20.920
WordPress provides a way to do that.

14
01:21.030 --> 01:27.100
So to pass variables from PHP to JavaScript WordPress provides a function called wp_localize_script().

15
01:27.100 --> 01:31.390
So in the enqueue-assets.php file.

16
01:31.940 --> 01:37.610
And what we need to do is when we enqueue our customize-preview file which is this one, we need to make

17
01:37.820 --> 01:43.420
a PHP variable available here which is the CSS string that we want to add here.

18
01:43.520 --> 01:51.080
So to do that before or after enqueueing the customize-preview file we can call a function called and

19
01:51.080 --> 01:56.780
this is kind of similar to the add_inline_style().

20
01:57.150 --> 02:01.910
This time it's called wp_localize_script(). And it also takes a "handle".

21
02:02.330 --> 02:08.760
And this is the handle of the JavaScript file that you want the PHP variable to be available in.

22
02:08.810 --> 02:14.830
So we want our PHP variable to be available in customize-preview file so give it this handle. And

23
02:14.840 --> 02:18.780
the object name is a JavaScript object that will contain all your variables.

24
02:18.860 --> 02:20.980
So let's call this "_themename".

25
02:23.950 --> 02:29.170
and we'll use this object to put any PHP variables that we would like to post from PHP to

26
02:29.170 --> 02:32.240
JavaScript. And you'll see more what I mean in a moment.

27
02:32.500 --> 02:41.250
And then the last argument you pass an array of variables that you would like to be available inside this object.

28
02:41.320 --> 02:48.790
So let's add a variable "x" and it will be equals to 3.

29
02:48.810 --> 02:51.700
And now let's go back to our Customizer and refresh it.

30
02:54.560 --> 03:06.300
And let's inspect the iframe. This one and then go to the end of the body where we have our JavaScript

31
03:06.300 --> 03:07.240
files.

32
03:07.270 --> 03:10.140
So as you can see we have our customize-preview.js file.

33
03:10.630 --> 03:16.820
And right before it WordPress added this "var _themename" and then the object with our variables.

34
03:16.840 --> 03:18.220
So we've x and 3.

35
03:18.220 --> 03:23.580
So now if we, inside this file, let's try to do this now.

36
03:24.690 --> 03:26.790
In the customize-preview, let's "console.log

37
03:30.040 --> 03:35.120
(_themename)" and let's now open our console and refresh.

38
03:38.240 --> 03:41.780
And we have an object with x equals to 3.

39
03:41.810 --> 03:46.090
So this way we can instead of 3 we can parse any PHP variable, right?

40
03:47.540 --> 03:56.670
So let's try and let's keep this console. And let's go to the enqueue-assets and let's include the same file

41
03:58.130 --> 04:02.460
inline-css to make it, to make the variable available in this function.

42
04:02.570 --> 04:06.970
And instead of 3 let's now pass the variable which is $inline_styles.

43
04:13.070 --> 04:15.110
And we're consoling the "_themename" object.

44
04:15.160 --> 04:16.720
So let's see what we've got now.

45
04:20.110 --> 04:28.990
And as you can see we have our PHP string here which is this one. We've managed to pass it in the JavaScript

46
04:28.990 --> 04:30.260
file.

47
04:30.340 --> 04:31.500
So you might think,

48
04:31.570 --> 04:31.870
all right,

49
04:31.870 --> 04:39.800
I'm gonna use this "_themename.x" string and replace the inline styles with it. Like 

50
04:39.800 --> 04:50.680
so, in the customize-preview and I think ok. I'm gonna remove this and replace the CSS inside the inline styles

51
04:50.800 --> 04:54.420
with "_themename.x". So let's see.

52
04:57.090 --> 05:02.040
And let's try to change it. And nothing happens.

53
05:02.040 --> 05:07.920
And that's because we are replacing the inline styles with the string and the string is already created

54
05:07.980 --> 05:15.130
using the original color. And it won't change when we change the accent color because it's JavaScript

55
05:15.150 --> 05:17.130
variable that is already created.

56
05:17.130 --> 05:20.560
We haven't done anything to update this color.

57
05:20.670 --> 05:25.830
So after doing is we are basically, let's "console.log

58
05:29.830 --> 05:37.520
(_themename.x)" here. And refresh. And change it.

59
05:40.890 --> 05:43.090
And whenever we change it we get the same string.

60
05:43.090 --> 05:47.030
So what we're doing is we are basically adding the same string to the inline styles

61
05:47.230 --> 05:48.400
again and again.

62
05:48.970 --> 05:50.410
So nothing is happening. 

63
05:50.410 --> 05:52.960
So we still haven't solved our problem here.

64
05:53.020 --> 05:59.830
We still need a way to regenerate these CSS styles in the JavaScript and updating the color as we change it

65
05:59.830 --> 06:00.880
here.

66
06:01.510 --> 06:10.120
So to do that we came up with an idea instead inside inline-css.php, instead of constructing

67
06:10.120 --> 06:12.310
the CSS string like

68
06:12.430 --> 06:23.160
so, I'm gonna create a variable and I'm gonna call it $inline_styles_selectors. And this is gonna

69
06:23.160 --> 06:28.810
be an array and this array will contain the CSS selectors,

70
06:28.830 --> 06:34.590
the "a" tag and the ":focus" and the "post.sticky"and so on. And these will be the keys of the array. We'll

71
06:34.620 --> 06:36.040
have the "a" tag as a key.

72
06:36.300 --> 06:45.200
And then as a value we have another array and this array will have a key of the CSS property.

73
06:45.820 --> 06:55.550
So "color" and the value of the setting name. And you will see why I did that in a moment. So let's add

74
06:55.580 --> 06:57.370
the rest of them the same way.

75
06:57.800 --> 07:03.050
So we have the ":focus" as a key and value

76
07:05.720 --> 07:11.770
an array with the "outline-color" and also the same thing.

77
07:14.410 --> 07:20.170
So I'm now done creating the array of selectors with the properties and setting name. And now instead of

78
07:20.350 --> 07:24.150
creating the inline styles string like so, let's comment this out,

79
07:24.250 --> 07:30.290
and we will create it by looping through this array and constructing our CSS.

80
07:30.370 --> 07:33.110
So let's define this variable again.

81
07:33.130 --> 07:35.100
But now as an empty string.

82
07:36.230 --> 07:41.450
And then we loop through our array and append to the empty string as we go.

83
07:41.450 --> 07:49.670
So let's create a "foreach loop". And we need to loop through the $inline_styles_selectors and the key

84
07:49.670 --> 07:58.940
will be the $selector. So the $selector will be the "a" and ":focus" and so on. And the value will be the $props.

85
08:01.690 --> 08:07.740
And by $props I mean CSS props. So there will be an array of color and the setting name.

86
08:08.020 --> 08:15.580
So now inside the loop you can append to the $inline_styles variable.

87
08:15.710 --> 08:18.080
So what we will append is the $selector. 

88
08:23.260 --> 08:25.900
and than open a { for the CSS.

89
08:28.830 --> 08:35.020
So the $selector will basically be replaced by the A tag in this case, in the first iteration. And then let's append the

90
08:35.020 --> 08:45.300
closing } for the CSS. And followed by a space for the next one. So what will be in the middle

91
08:45.300 --> 08:49.280
between the opening and the closing of the CSS selector?

92
08:49.380 --> 08:52.030
We will loop through the array of props.

93
08:52.080 --> 08:57.320
So in our case each array will contain one key but it may contain more.

94
08:57.660 --> 09:06.540
So let's do a "foreach loop" again. And this time we need to loop through the value which is 

95
09:06.670 --> 09:11.550
$prop and each key will be $prop.

96
09:13.560 --> 09:18.330
And the $value let's keep it as $value. And then we will append 

97
09:21.210 --> 09:22.070
the $prop.

98
09:26.080 --> 09:28.110
And then the value of the $prop.

99
09:28.170 --> 09:29.820
So what will be the value of the $prop.

100
09:29.840 --> 09:37.770
We will concatenate it using the ". .", because we'll have to write a PHP function here.

101
09:37.990 --> 09:42.370
What PHP function? It's get_theme_mod().

102
09:43.180 --> 09:45.520
So in our case what will be the name of the field.

103
09:45.610 --> 09:49.480
This one which is the value in our array.

104
09:49.480 --> 09:51.820
So we're looping through this array for example,

105
09:51.820 --> 09:56.760
so we have this key which is the $prop and its value is the setting name.

106
09:57.010 --> 09:59.310
So this will be here.

107
10:00.520 --> 10:01.560
So let's add the $value.

108
10:04.440 --> 10:09.570
And a "default" which was this one in the commented code.

109
10:10.070 --> 10:13.730
And also don't forget to sanitize as we did in the old code here.

110
10:17.910 --> 10:19.350
And our ;.

111
10:19.350 --> 10:25.250
So if you're still confused take your time to look at this loop and understand what it does. And what it does

112
10:25.260 --> 10:27.440
is it just basically creates this string

113
10:27.560 --> 10:34.170
but from this array instead of just adding it in the string. And we'll know why later in a moment.

114
10:34.420 --> 10:37.950
So let's save now and see if this is still working.

115
10:38.340 --> 10:44.520
So to check that we are passing the $inline_styles here in the add_inline_style.

116
10:44.730 --> 10:46.230
So let's go to the source.

117
10:49.680 --> 10:50.360
And let's make sure.

118
10:50.370 --> 10:56.320
And as you can see here inside the inline-css we have created our string.

119
10:56.550 --> 11:04.320
And if you took a closer look it's the same one as this one.

120
11:04.890 --> 11:09.690
So you're probably wondering now why are we doing this. And this string was working fine.

121
11:10.020 --> 11:13.510
Why are we looping and constructing the string this way?

122
11:13.890 --> 11:18.780
Let's remove this old code.

123
11:18.850 --> 11:23.470
Now we can pass this array to JavaScript. And using JavaScript

124
11:23.470 --> 11:31.110
we will do this exact same loop and we will reconstruct the CSS string by using the updated accent color

125
11:31.150 --> 11:31.810
value.

126
11:32.020 --> 11:34.590
So to do that and it will become much clearer.

127
11:35.050 --> 11:40.660
So now we want to parse the $inline_styles_selectors to the Javascript.

128
11:40.730 --> 11:49.780
So in enqueue-assets instead of passing $inline_styles we will pass the array of selectors and I still have

129
11:49.770 --> 11:51.910
"x" let's call it "inline-css".

130
11:52.160 --> 11:55.310
"inline-css" and save.

131
11:56.000 --> 12:04.770
And don't worry when you are passing a PHP array here. The wp_localize_script() will take care of converting it to JavaScript

132
12:04.770 --> 12:08.830
object. So let's see now the, here our console.

133
12:09.420 --> 12:14.130
And the "_themename" object.

134
12:14.490 --> 12:15.650
So we have now inline-css.

135
12:15.660 --> 12:26.420
And it's a JavaScript object with our CSS selectors as keys and the properties as values.

136
12:26.460 --> 12:29.630
So it's basically the same exact thing as the PHP.

137
12:29.640 --> 12:31.270
So what can we do with this now.

138
12:31.590 --> 12:39.230
Let's go back to the customize-preview file and let's mimic this PHP loop.

139
12:39.390 --> 12:42.360
But this time in JavaScript.

140
12:42.360 --> 12:48.540
So, ok. We are repeating ourselves in this loop but we will repeat this loop once instead of repeating

141
12:48.540 --> 12:53.930
the whole CSS string that that we used to use before.

142
12:53.970 --> 13:09.920
So let's now remove this and this. And let's create a new variable. So "inline_css" and it will be an empty string.

143
13:11.280 --> 13:18.110
And let's write a "forin loop". And the "forin loop" will loop through a JavaScript object like this one.

144
13:18.450 --> 13:27.230
So it takes the key which is, this is actually in our case.

145
13:27.230 --> 13:35.670
So for keys in our object which is "_themename" and "inline-css".

146
13:40.480 --> 13:41.690
And we'll do the same thing.

147
13:41.980 --> 13:53.090
We'll append the property name and the "{". And just JavaScript will take a $ and ` 

148
13:53.150 --> 14:01.900
of course instead of " and the "selector" and "{" .

149
14:04.110 --> 14:07.110
Then let's close it.

150
14:09.000 --> 14:16.370
The symbol of the let were already defined the variable. And then let's look through the properties. 

151
14:16.370 --> 14:26.460
So another for loop, "forin loop", and this time the key will be the property and for each iteration we will

152
14:26.600 --> 14:28.130
need to get the

153
14:31.020 --> 14:33.180
properties object for the selector.

154
14:33.240 --> 14:35.510
So this one and this one and so on.

155
14:35.640 --> 14:44.280
And to get this we will access the "inline-css" object and the current key which is the current $selector

156
14:44.700 --> 14:45.680
in this loop. 

157
14:49.330 --> 14:51.580
So essentially use this a lot

158
14:51.630 --> 14:58.610
let's define a variable for it. Let's call it "inline_css_obj".

159
15:01.490 --> 15:02.930
And let's use it here.

160
15:08.620 --> 15:11.900
Instead of typing the this whole thing every time.

161
15:11.920 --> 15:20.220
So now we have the property which will be these values, "border-left-color", "outline-color" and so on. And we need to get

162
15:20.340 --> 15:23.540
the "_themename_accent_colour" which is setting name.

163
15:23.550 --> 15:27.540
So how to get this in JavaScript? Let's find a variable called value or

164
15:27.560 --> 15:34.470
"val". So we need the current properties object for our current selector. The "inline_css_obj" is the whole

165
15:34.650 --> 15:42.190
this whole object. And the "selector" is the current selector which is one of these, "post.sticky"

166
15:42.190 --> 15:49.160
and ":focus" and "a". So this way we are accessing each of these values.

167
15:49.480 --> 15:53.830
The whole object. And we need the "_themename_accent_colour".

168
15:54.040 --> 15:56.630
So we need to access this key, right?

169
15:56.830 --> 16:01.440
And this key in our case will be the "prop".

170
16:01.820 --> 16:02.580
So let's add it.

171
16:05.510 --> 16:08.070
So the "val" now will contain the setting name.

172
16:08.240 --> 16:10.750
So this is the most important part.

173
16:10.760 --> 16:11.690
Let's now append the

174
16:14.740 --> 16:18.290
property.

175
16:18.490 --> 16:26.880
So we need the property name and then for the CSS syntax ":" and then the value for this property.

176
16:26.890 --> 16:29.350
So how do we get the value for this property?

177
16:29.470 --> 16:33.170
And we have the setting only the setting name. And the setting name

178
16:33.180 --> 16:42.560
is this "val". So the WP Customize API provides a way to do this. So "wp.customize()"  and we give it the

179
16:42.560 --> 16:44.410
setting name which is "val".

180
16:45.170 --> 16:51.540
And then we call a function called ".get" and this will get the value for the setting name which in

181
16:51.530 --> 16:54.720
our case is the color picker.

182
16:54.740 --> 17:00.560
So this way each time the accent color changes we will reconstruct the "inlines_css" string. And loop

183
17:00.560 --> 17:05.360
through the selectors that we already defined only one time in the PHP.

184
17:05.480 --> 17:08.830
So we don't have to define them again in the JavaScript.

185
17:09.200 --> 17:15.340
And then we will use the current value of the setting that we need to change which we past here.

186
17:18.410 --> 17:26.960
The final step now is to append or replace the inline styles with the string that we just constructed.

187
17:27.850 --> 17:28.700
So let's see now.

188
17:32.420 --> 17:34.640
And let's try and change the color.

189
17:36.560 --> 17:39.950
And as you can see it's now changing in real time.

190
17:40.250 --> 17:45.200
We could have used instead of getting the value this way  we could have used the two variable

191
17:45.320 --> 17:47.680
which will be the current value for the accent color.

192
17:48.370 --> 17:50.970
But I intended to do this way

193
17:51.170 --> 17:56.340
just to let you know that you can get the value for the setting using this way.

194
17:56.580 --> 18:05.390
It could be useful if you have, maybe you have some button that has a color and another property

195
18:05.390 --> 18:06.830
background color for example.

196
18:06.980 --> 18:08.920
And these would be two different settings.

197
18:09.470 --> 18:16.540
And in the callback you need to get these two settings. So using the two variables you'll only have the

198
18:16.540 --> 18:24.240
value of the setting that changed but you won't have both of them. So using this way you will be able to get

199
18:24.270 --> 18:27.870
any setting by its name.

200
18:27.870 --> 18:29.320
I hope I'm making sense.

201
18:29.340 --> 18:33.850
I know this section might be a little bit complicated.

202
18:34.080 --> 18:39.750
So feel free to watch this lecture again and try to go through this code again and understand it if

203
18:40.170 --> 18:45.260
if anything is unclear. And also feel free to leave me a question if you have any inquiry.

204
18:45.300 --> 18:47.160
So that's it for this section.

205
18:47.220 --> 18:49.180
Let's see what we can do next.