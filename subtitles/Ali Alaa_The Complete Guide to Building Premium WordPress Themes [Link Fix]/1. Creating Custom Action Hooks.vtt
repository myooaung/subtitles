WEBVTT

0
00:03.440 --> 00:05.040
Let's now go back to the WordPress stuff

1
00:05.040 --> 00:12.150
after a long JavaScript break. In this section we will discuss very important topics for your theme to

2
00:12.150 --> 00:17.170
be more customizable by other developers which is a very important thing.

3
00:17.220 --> 00:19.500
If you want your theme to be more premium.

4
00:19.570 --> 00:23.090
So in this section we will discuss hooks and child themes.

5
00:23.220 --> 00:25.630
So let's start by discussing the hooks.

6
00:25.830 --> 00:31.650
Hooks are a way for one piece of code to interact or modify another piece of code. Or in other words it's a

7
00:31.650 --> 00:37.920
way for theme and plugin developers to interact with the WordPress core without directly modifying

8
00:37.920 --> 00:42.150
the WordPress core. Directly modifying the WordPress core is not a best practice.

9
00:42.150 --> 00:46.220
Once WordPress updates anything you modified in the core will be gone.

10
00:46.220 --> 00:51.810
Hooks can also be used by theme developers to allow other developers to interact with your theme without

11
00:51.810 --> 00:54.820
directly modifying your theme for the same reason.

12
00:54.840 --> 01:00.150
If you release an update for your theme any modifications done by other developers it will be gone.

13
01:00.150 --> 01:04.170
There are two types of hooks in WordPress: Actions and Filters.

14
01:04.210 --> 01:07.220
We'll start in this lecture by discussing actions.

15
01:07.430 --> 01:14.010
Actions allow you to run a function at a specific point in the code execution. Inside your function you can

16
01:14.010 --> 01:21.780
perform some kind of a task like echoing something or modifying a global variable or maybe modifying something

17
01:21.780 --> 01:23.430
in the database.

18
01:23.430 --> 01:29.640
I think the best way to understand action hooks is to actually create one in our theme to allow other

19
01:29.670 --> 01:37.480
developers to interact with our theme. And then we will take a look at the hooks that are included in the WordPress core.

20
01:37.920 --> 01:41.240
So let's go to for example the index.php.

21
01:41.310 --> 01:50.360
Let's say you want to allow another developer to add something after "the_posts_pagination()".

22
01:50.370 --> 02:02.940
So what we can do is open a PHP tag and then call a function called "do_action()" and then this action should

23
02:02.940 --> 02:09.750
have a name and it should be prefixed as well. So we can use our prefix which is "_themename"

24
02:13.170 --> 02:18.190
and let's call our action "_after_pagination".

25
02:18.800 --> 02:20.560
Right?

26
02:20.580 --> 02:27.980
So right now this code will do absolutely nothing. And to let this code do something,

27
02:28.650 --> 02:31.990
you should register callback functions to this action.

28
02:32.170 --> 02:37.590
So let's say a user of your theme would like to add some code after the pagination.

29
02:38.310 --> 02:42.570
So what we can do is, in the functions create a new function. Let's call it

30
02:47.780 --> 02:49.560
"after_pagination()".

31
02:53.620 --> 03:00.700
And then echo some text.

32
03:00.710 --> 03:06.460
Now we can register this function to this action. And to do that we type "add_action()".

33
03:10.340 --> 03:16.970
So it takes the name of the action which is our prefix and than "after_pagination". And then the function

34
03:17.420 --> 03:24.710
which is a function name which is "after_pagination". And the priority, right?

35
03:24.780 --> 03:28.860
Let's just try it without the priority for now and see what will happen.

36
03:29.700 --> 03:36.690
Let's go back now to our browser and make sure you have  your MAMP server open. And than open your website and after

37
03:36.690 --> 03:44.710
the pagination we have the text. We still have the JavaScript. We have the text that we added, right? 

38
03:44.710 --> 03:45.600
So let's

39
03:45.880 --> 03:48.800
let's remove the stuff here.

40
03:51.560 --> 03:56.750
And also the click event that we created.

41
04:03.260 --> 04:21.780
All right. And we can also run the Gulp task. Change to your theme name. And run "npm run start". So that we can refresh

42
04:21.780 --> 04:26.570
the browser whenever we change the code, right?

43
04:26.610 --> 04:32.670
So we've done a great thing here we're now allowing other developers to run some function at some point

44
04:33.240 --> 04:34.790
in the execution of our code.

45
04:37.790 --> 04:39.750
So in index.php

46
04:39.790 --> 04:44.270
we're allowing developers to hook into this part of the code and run some function.

47
04:44.860 --> 04:46.570
And this is a great feature.

48
04:46.810 --> 04:50.920
We probably won't do this again throughout the theme but you get the idea.

49
04:50.980 --> 04:53.560
You can use this feature all around your theme.

50
04:53.590 --> 05:01.810
One more thing you can do with actions is you can register multiple functions to the action, right? 

51
05:01.840 --> 05:12.020
So we can have another function. And let's call it "after_pagination2" and add some more text. And then add another action

52
05:13.430 --> 05:18.730
to this hook. And change the function name and let's see what happens.

53
05:20.080 --> 05:22.150
So we now have the two texts, right?

54
05:24.330 --> 05:27.910
So you might be wondering what will decide which function will run first.

55
05:27.990 --> 05:29.820
And the answer is the priority.

56
05:29.880 --> 05:33.860
You can add a third argument here, which is a priority.

57
05:34.020 --> 05:40.980
So let's make this 1 and let's make this or actually let's make this 1 and let's make this 2.

58
05:41.130 --> 05:43.750
So this can run first and save.

59
05:43.800 --> 05:55.670
And as you can see the second one run first. If both have the same priority which was the case first,

60
05:55.810 --> 06:01.250
they both have the default priority which is 10, they will run according to their order in the code.

61
06:01.360 --> 06:04.850
So this will run first and then this one, all right?

62
06:04.880 --> 06:07.010
So we've now created an action in our theme.

63
06:07.170 --> 06:13.440
Let's see how to use actions that are provided by WordPress in order to interact with the WordPress core.