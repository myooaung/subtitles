WEBVTT

0
00:00.080 --> 00:02.560
[ music ]

1
00:03.150 --> 00:06.200
So let's summarize what we've discussed in the last couple of lectures

2
00:06.210 --> 00:08.880
in case you're self confused.

3
00:08.910 --> 00:15.800
First we discussed actions. And actions are used to enable developers to modify your code without

4
00:15.800 --> 00:18.050
actually editing your files.

5
00:18.050 --> 00:24.950
So for example you mentioned that if you want to allow the other developers to add some code in this

6
00:25.400 --> 00:31.410
after the pagination, you can create an action and call do_action() and give it a name.

7
00:31.790 --> 00:37.730
So this way other developers can hook into this part of the code and add some code. And this is done

8
00:37.730 --> 00:45.480
by calling a function called add_action() and attaching or registering a function that is hooked. And we've seen

9
00:45.500 --> 00:47.180
how to do that in the last lecture.

10
00:47.180 --> 00:51.300
We've also seen that you can pass arguments to actions.

11
00:51.340 --> 00:58.060
So for example WordPress has an action called "pre_get_posts" and the function used to register an action

12
00:58.630 --> 01:07.210
get passed the current instance of the WP_Query. And we then  discussed filters. And the difference between actions

13
01:07.210 --> 01:15.160
and filters is that, you know, in actions you allow the other person to write some code at some point

14
01:15.160 --> 01:16.810
in the in your code.

15
01:16.810 --> 01:23.080
So here we allow the other developers to write code in this part of the code. And filters however, you allow other

16
01:23.080 --> 01:28.230
developers to modify just something you output in your theme. So get an input,

17
01:28.240 --> 01:29.830
you filter it and you return it.

18
01:29.830 --> 01:32.140
You're not allowed to do further than that.

19
01:32.170 --> 01:39.190
So in our case we were echoing this string escaped and translated and we wanted to allow other developers

20
01:39.190 --> 01:39.790
to filter it.

21
01:39.790 --> 01:40.290
Right?

22
01:40.300 --> 01:43.390
So we called apply_filters() and give it a name.

23
01:43.390 --> 01:50.700
And the thing that we want to filter and then using the add_filter() function. We add a function to the filter

24
01:50.710 --> 01:52.560
name that we gave.

25
01:52.810 --> 01:58.510
And then the function we have the thing that we want to filter as an argument. So we can modify it and

26
01:58.510 --> 02:03.870
return it. Or we can return a completely new string as we did here.

27
02:03.880 --> 02:07.350
So that's mainly the difference between filters and actions.

28
02:07.810 --> 02:14.050
And then we mentioned that we have a problem that we, all right we are allowing other developers to interact

29
02:14.050 --> 02:20.530
with our theme but to do that they will have to modify functions.php to hook into our actions and

30
02:20.530 --> 02:21.550
filters.

31
02:21.550 --> 02:25.530
So modifying the function.php file is actually modifying the theme.

32
02:25.780 --> 02:29.760
And if a theme gets in updates, everything they've written here will be gone.

33
02:29.860 --> 02:32.920
And we mentioned that the solution to this is child themes.

34
02:33.070 --> 02:39.400
So child themes are themes that inherits all the functionality of the parent theme but it can modify it

35
02:39.550 --> 02:40.570
or add to it.

36
02:40.630 --> 02:46.660
And the main advantage to child themes is as we've been mentioning you can modify the parent theme while

37
02:46.660 --> 02:50.830
allowing them to be updated without destroying your changes.

38
02:51.550 --> 02:56.180
So let's create a child theme. It's a very simple procedure.

39
02:56.500 --> 03:05.740
So in my themes folder inside wp-contents, the same folder where we have our main theme, let's create, let's copy

40
03:05.800 --> 03:12.720
the theme names and create a new folder. And you should call it the same name, the same parent's theme name

41
03:12.730 --> 03:14.760
and then "-child".

42
03:15.400 --> 03:17.510
And then I'm gonna add this folder to our

43
03:21.260 --> 03:31.680
VS Code project. So add folder to WordPress. And then this one.

44
03:31.990 --> 03:35.410
So we now have the two folders here. We can browse through them.

45
03:35.410 --> 03:43.390
So in the  child theme let's create a new file. And this will be style.css. Similar to the parent

46
03:43.390 --> 03:51.700
theme when we have the information in the style.css, we can actually copy it and paste it in the child themes

47
03:51.820 --> 03:53.670
style.css.

48
03:53.890 --> 04:01.240
So of course in production your theme will be called "firsttheme". So you can call this "firsttheme child".

49
04:02.090 --> 04:03.790
And you can change these.

50
04:03.840 --> 04:11.780
But what's important is now we should add a new field called "Template". And this should be your parents

51
04:12.070 --> 04:18.710
theme name, which is "firsttheme". And you should also change the text domain to something unique.

52
04:19.730 --> 04:24.740
So we can call it "firsttheme-child".

53
04:26.070 --> 04:32.540
And I think that's it. We can save it. And then let's go to the wp-admin.

54
04:38.840 --> 04:44.540
Login and let's actually remove this pink color.

55
04:44.540 --> 04:46.330
It's kind of annoying.

56
04:47.140 --> 04:53.740
So source, assets and admin.

57
04:55.480 --> 05:03.650
Great. So now go to Appearance and Themes and the color's still cached,  and we'll find our child theme here.

58
05:03.890 --> 05:04.820
So activate it.

59
05:07.440 --> 05:09.910
And if you find your CSS isn't changing

60
05:10.180 --> 05:17.600
you can, in Chrome, you can just to enable and disable this. And here we go.

61
05:18.180 --> 05:20.830
So now we have our child theme activated.

62
05:21.060 --> 05:27.560
So our website will look exactly the same. Because we still have the functionality of our parent theme.

63
05:27.620 --> 05:31.820
But now we can add to it or modify it in our child theme.

64
05:33.000 --> 05:43.410
So let's go to our child theme folder and our problem that we wanted to have these functions in a child

65
05:43.440 --> 05:43.740
theme.

66
05:43.740 --> 05:44.010
Right?

67
05:44.010 --> 05:48.850
So let's copy them, all the filters and the actions.

68
05:52.560 --> 06:01.300
And we can simply create a new file in the child theme called functions.php. And this will not override

69
06:01.300 --> 06:09.250
your original function.php file in the parent theme. It will just extend it. So let's open PHP

70
06:12.680 --> 06:14.540
and paste.

71
06:17.390 --> 06:28.010
So let's save and see if our actions and filters are still. And here go. Our actions and the filters is working

72
06:28.020 --> 06:33.210
because you have two post. We have three posts because this is a sticky post in case you're wondering. If you

73
06:33.210 --> 06:35.340
go to the second page

74
06:35.610 --> 06:38.750
I still have two posts.

75
06:39.040 --> 06:40.150
So we've done it.

76
06:40.240 --> 06:46.650
We've created the child theme and we have our functions.php now that can extend our original functions.

77
06:46.660 --> 06:50.820
So what we can also do with child themes, we can override template files.

78
06:50.890 --> 06:55.660
So if we create a new file called index.php. Sorry.

79
06:58.910 --> 07:03.410
This file will actually override completely the original file.

80
07:03.410 --> 07:10.160
So now if we refresh, we will have a blank file.

81
07:11.300 --> 07:15.390
So let's delete this and this will apply to any template file in your theme.

82
07:15.530 --> 07:19.490
You can override it with a child theme.

83
07:19.520 --> 07:21.220
So let's delete this before now.

84
07:21.440 --> 07:27.090
Another thing I want to point out in child themes is when your reference a file in your theme.

85
07:27.260 --> 07:31.850
So let's say we want to enqueue a new style sheet in our child theme.

86
07:32.030 --> 07:41.240
So we create a new file. Let's call it bundle.css and let's add a background to the body.

87
07:45.530 --> 07:51.890
And let's use our favorite color.

88
07:52.080 --> 07:54.350
So it's exactly the same thing

89
07:54.630 --> 08:00.350
when we enqueue the CSS in our parent theme. Only a difference that we'll see.

90
08:00.930 --> 08:04.910
So "wp_enqueue_scripts".

91
08:04.950 --> 08:06.060
So this is an action.

92
08:06.510 --> 08:07.950
And we just need to give it a function.

93
08:07.950 --> 08:19.700
So let's call it "firsttheme_child_scripts".

94
08:24.040 --> 08:24.910
And let's create the function.

95
08:32.670 --> 08:39.080
And like we did in the parent theme "wp_enqueue_style".

96
08:42.330 --> 08:55.500
And the "firsttheme-child-styles". So here when we wanted to reference the file, we use "get_ template

97
08:56.680 --> 08:57.530
"get_template_directory_uri",

98
08:57.530 --> 08:58.040
right?

99
08:58.110 --> 08:59.380
right?

100
08:59.430 --> 09:04.620
So "get_template_directory_uri()" will always reference the parent theme even if you use it in a child

101
09:04.620 --> 09:05.740
theme.

102
09:06.210 --> 09:13.120
So to reference a file inside the child theme, we use "get_stylesheet_directory_uri()".

103
09:15.240 --> 09:19.980
So this will always reference the active theme even if it's a child theme.

104
09:19.990 --> 09:25.390
"get_template_directory_uri" however will always reference the parent theme even if you use it in a child

105
09:25.390 --> 09:25.800
theme.

106
09:25.810 --> 09:27.430
So this is important.

107
09:28.030 --> 09:31.690
So our path is simply "/styles.css".

108
09:32.540 --> 09:33.790
"/styles.css".

109
09:34.060 --> 09:43.070
So next we need to add our dependencies and media. So the media is "all".

110
09:43.610 --> 09:44.950
And we also have the version.

111
09:45.320 --> 09:46.750
So let' say "1.0.

112
09:46.800 --> 09:47.280
0".

113
09:51.180 --> 09:58.790
And the dependencies, we can actually add an array of dependencies. So we can add this file as a dependency

114
09:58.790 --> 10:01.540
to our parent file, to our parent styles.

115
10:01.610 --> 10:08.970
So the handle for our parent stylesheet was "_themename-stylesheet" which in production of course

116
10:08.970 --> 10:11.700
will be your theme name "-stylesheet".

117
10:11.720 --> 10:14.810
But in order to work we'll use the theme name placeholder.

118
10:14.960 --> 10:19.320
So we can make the child styles depend on the parent styles.

119
10:19.340 --> 10:24.470
So this way it will be enqueued after it in order to override it.

120
10:24.680 --> 10:32.030
If we don't do that, if we leave it as an empty array, the functions.php file for the child theme run first.

121
10:32.030 --> 10:38.110
So probably you'll have your child theme enqueued first and it will be overridden by the parent theme.

122
10:38.360 --> 10:43.400
So adding this dependency, we will ensure it's added after the parent stylesheet.

123
10:43.430 --> 10:49.180
So let's save this. And see what happens. So

124
10:52.470 --> 10:54.420
let's view the source.

125
10:54.460 --> 10:56.440
So looks like we've done something wrong.

126
10:56.800 --> 10:57.590
Ok, ok.

127
10:57.640 --> 11:04.010
So we'll call this "/bundle.css" not "styles".  It should work I think.

128
11:04.290 --> 11:07.240
Ok, so I already discover that I have a typo here.

129
11:07.360 --> 11:10.230
Sorry for that.

130
11:10.270 --> 11:12.310
And it should work now.

131
11:12.860 --> 11:21.940
And as you can see in the source, we can see that we have our "_themename-stylesheet" and our "firsttheme-

132
11:21.970 --> 11:25.060
child-styles" enqueued after it.

133
11:25.060 --> 11:27.490
So this's how we enqueue a stylesheet

134
11:27.510 --> 11:34.980
in our child theme to override our parent's stylesheet. So last thing I want to mention in child themes for

135
11:34.980 --> 11:43.390
now is as I mentioned the functions.php of the child theme runs before the functions.php of

136
11:43.400 --> 11:45.910
the parent theme.

137
11:45.930 --> 11:47.640
So if we for example,

138
11:50.360 --> 11:58.790
let's open the helpers functions. So let's say we want to override this function in our child theme.

139
11:59.070 --> 12:08.780
So let's create a function with the same name. And I'll just make it echo some string here.

140
12:08.900 --> 12:15.290
So what will happen now is of course this will give us an error because we are duplicating the function's

141
12:15.290 --> 12:17.620
name.

142
12:18.210 --> 12:20.780
Let's remove the pink background.

143
12:21.770 --> 12:27.890
So the solution to this if you want to allow child themes to override your parent theme functions,

144
12:28.010 --> 12:32.010
you can in your functions in the parent theme

145
12:32.030 --> 12:37.680
so in the helpers folder you can check first if function exists.

146
12:38.300 --> 12:43.070
So "if( function_exists() )" and the name of the function.

147
12:46.450 --> 12:53.040
Or actually if function does not exist, if it does not exist or if it's not overridden by a child themes

148
12:53.690 --> 12:55.100
so define it.

149
12:55.100 --> 12:59.890
If it already exists, if it's already defined by child theme so don't do anything.

150
12:59.900 --> 13:07.920
So this way we will have the, you know, the meta string here is now the child theme function.

151
13:08.150 --> 13:13.140
So we can do this if you want to allow child themes to override your functions.

152
13:13.160 --> 13:19.490
So I think that's it for child themes for now. During the course we will get back to this child theme and see

153
13:19.490 --> 13:21.030
what other things we can do.

154
13:21.080 --> 13:22.550
So see you in the next section.