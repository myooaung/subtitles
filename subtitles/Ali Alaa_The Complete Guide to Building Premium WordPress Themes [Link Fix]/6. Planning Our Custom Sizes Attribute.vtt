WEBVTT

0
00:03.150 --> 00:09.120
So in a previous lecture we took a look at the responsive image that WordPress generates. And we mentioned

1
00:09.120 --> 00:14.260
that the "srcset" attribute we will not have to change anything in it, it's fine.

2
00:14.270 --> 00:16.530
WordPress lists all the image sizes.

3
00:16.710 --> 00:18.550
And that's exactly what we need.

4
00:19.020 --> 00:24.810
But for the "sizes" attribute WordPress will add a condition that if the screen width is less than the image

5
00:24.810 --> 00:28.250
width, the image will cover 100% of the screen,

6
00:28.290 --> 00:29.890
so 100vw here.

7
00:30.450 --> 00:36.750
Otherwise the image will cover 1024 pixels or actually the maximum size of the image.

8
00:36.750 --> 00:42.840
But in our case here we have this content width which is 800 pixels and we already calculated

9
00:42.840 --> 00:44.200
that in the last lecture.

10
00:44.370 --> 00:51.960
So now our screen that is larger than 1024, this width. So the image tag will decide that 1024 is

11
00:52.050 --> 00:56.540
the width that we would like to look for in the "srcset" attributes.

12
00:56.730 --> 01:00.020
When in fact our content width is just 800.

13
01:00.090 --> 01:04.920
So this way we can possibly load an image larger than what we actually need.

14
01:05.310 --> 01:11.020
So this condition that WordPress adds could actually be useful if the image width is less than the content width,

15
01:11.070 --> 01:11.960
right?

16
01:12.030 --> 01:14.530
So we have the content width which is 800.

17
01:15.030 --> 01:24.370
And if we edit the post and make this picture maybe the medium size. And the medium size's width is 300.

18
01:24.700 --> 01:26.680
And 300 is less than 800.

19
01:30.170 --> 01:36.300
So as you can see now the condition will be, if the screen with less than 300 pixels then the image

20
01:36.300 --> 01:42.740
will cover 100% of the screen otherwise the image will be 300 pixels which is the maximum width

21
01:42.750 --> 01:44.050
of the screen, right?

22
01:44.590 --> 01:46.650
And here that's kind of what we need.

23
01:46.650 --> 01:56.500
So if the screen width is less than 300 our image will cover most of the screen maybe not 100%. It

24
01:56.500 --> 02:01.210
will be 100% - these paddings and margins and also the border on both sides.

25
02:01.390 --> 02:03.740
But it's kind of close to what we need.

26
02:04.460 --> 02:11.240
And if the screen size is larger than 300 we would like to load the maximum width of the image which in

27
02:11.240 --> 02:20.570
our case is 300 pixels, a medium size. So that's only when the image width is less than the content width. But let's

28
02:20.890 --> 02:26.680
get this image back to maybe the "large" or "full". Let's keep it "large".

29
02:32.890 --> 02:34.710
So now this condition won't work with us.

30
02:34.750 --> 02:41.440
Now what we need to do is the image will take a width of 800 as long as the screen size is larger

31
02:41.440 --> 02:43.160
than a certain number of pixels.

32
02:43.180 --> 02:43.720
All right.

33
02:44.110 --> 02:50.620
And this certain number of pixels is 800 + these paddings and margins.

34
02:50.620 --> 02:52.740
So we have the content width which is 800

35
02:52.750 --> 03:01.630
and we have these paddings and margins. And these are 20 pixels on both sides, so 40, and then these margins

36
03:02.530 --> 03:04.110
are 10 on both sides.

37
03:04.360 --> 03:08.970
So 60 and you also have the borders of " pixel on both sides, so 62.

38
03:09.180 --> 03:09.970
All right?

39
03:10.270 --> 03:17.350
So when the screen width is less than 800 + 62 the image will start to resize, right? Larger

40
03:17.350 --> 03:17.850
than that,

41
03:17.890 --> 03:21.160
it will keep at 800. Less than that,

42
03:21.280 --> 03:30.310
it will resize and it will cover 100% of the screen - these borders and paddings and margins.

43
03:30.310 --> 03:31.690
So I hope this is clear.

44
03:31.720 --> 03:36.940
If it's not maybe try to rewatch and understand exactly what we need to do just to be able to keep

45
03:36.940 --> 03:40.780
up with what we are going to code in the next step.

46
03:40.780 --> 03:42.280
So now we have two conditions.

47
03:42.280 --> 03:47.120
If the image is less than the content width, we'll do something. If the image is larger than the content

48
03:47.120 --> 03:53.440
width, we'll do another thing. And there will be also a condition if the layout has a sidebar but

49
03:53.440 --> 03:58.250
let's now focus on the first two before going to the sidebar.

50
03:58.510 --> 04:03.040
So what can we do in order to change this

51
04:03.130 --> 04:04.140
"sizes" attribute?

52
04:04.230 --> 04:13.970
We can use filters and WordPress provides a filter called "wp_calculate_image_sizes". And let's define a 

53
04:13.990 --> 04:22.170
function. Let's call it "_themename_" maybe "image_sizes". And this function will also receive 5 arguments.

54
04:22.240 --> 04:28.510
So this is your priority of 10 and 5 arguments. And let's define this function.

55
04:33.940 --> 04:40.400
So these 5 arguments will be the $sizes and this will be an array that contains all the sizes for the

56
04:40.400 --> 04:43.130
image. And also $size

57
04:43.160 --> 04:50.320
and this will be an array that contains the width and the height of the image. And $image_src

58
04:50.740 --> 04:57.140
and this will contain the source of the image. $image_meta, it will be an object that will contain some

59
04:57.140 --> 04:58.650
information about the image.

60
04:58.730 --> 05:00.050
You know, the date it was uploaded

61
05:00.050 --> 05:01.170
stuff like that.

62
05:01.400 --> 05:05.750
And we'll also get the $attachment ID, the image ID.

63
05:05.840 --> 05:12.170
So I think we'll actually need only the $size in this filter but maybe in your case you'll need some of the

64
05:12.170 --> 05:13.710
other information as well.

65
05:14.590 --> 05:17.590
So let's try and return something.

66
05:17.610 --> 05:24.760
So let's return some random text here. And let's save.

67
05:24.940 --> 05:28.690
And now as you can see the "sizes" attribute is our random text.

68
05:28.850 --> 05:36.910
So in this filter we can do whatever calculations we need to do and then return the valid "sizes" attribute.

69
05:36.910 --> 05:43.230
So let's actually write logic in the next lecture but let's first get some variables that we will need.

70
05:43.420 --> 05:49.840
So we have the $width of the image and this will be the first item in the $size.

71
05:49.890 --> 05:50.800
The second argument here.

72
05:54.170 --> 05:56.990
We also need the $content_width.

73
05:59.870 --> 06:08.960
And we've already calculated that in this action. We also will need the global $post. And we will also have

74
06:08.960 --> 06:13.390
to copy this if condition.

75
06:14.630 --> 06:17.210
And let's just remove this line.

76
06:17.210 --> 06:20.920
And let's also default the $layout variable here to "full".

77
06:21.380 --> 06:26.330
And then we'll do some if conditions here that we will decide the layout depending on the current page

78
06:26.360 --> 06:29.690
and the current options and custom fields and stuff like that.

79
06:29.690 --> 06:35.540
So here we have this example of the single page but also we might need to add some other if conditions

80
06:35.540 --> 06:38.200
as well for pages and archives and stuff like that.

81
06:38.450 --> 06:41.690
So now we have all the variables we need. We have the width of the image.

82
06:41.690 --> 06:43.420
We have the content width.

83
06:43.610 --> 06:51.250
We have the post and we have the layout of the current post. And here we'll have to do our calculations.

84
06:51.290 --> 06:52.650
Let's do that in the next lecture.