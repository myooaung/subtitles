WEBVTT

0
00:03.330 --> 00:10.620
So we've seen in the last couple of lectures two ways in order to refresh this iframe and reflect the changes

1
00:10.710 --> 00:14.790
that we do here and the actual website.

2
00:14.790 --> 00:19.660
So the first one was refreshing the whole iframe. So we have to contact the server and tell it I want

3
00:19.700 --> 00:23.160
to refresh the iframe. And that of course is a bit slow and it takes some time.

4
00:23.220 --> 00:29.490
So we've seen another way to do it using the JavaScript callbacks and using this way we don't have to communicate

5
00:29.490 --> 00:30.380
with the server at all.

6
00:30.420 --> 00:36.660
And thus this way is the fastest and you almost see the changes real time. But we also mentioned that this

7
00:36.660 --> 00:42.420
way will have its drawbacks that you will need to duplicate your PHP logic in JavaScript and that could

8
00:42.420 --> 00:44.170
be not very practical.

9
00:44.580 --> 00:45.220
So lets see

10
00:45.240 --> 00:51.030
in this lecture a third way to refresh what you change here in the website preview using what's called

11
00:51.510 --> 00:52.700
Selective Refresh.

12
00:52.830 --> 00:58.710
So the Refresh method will refresh the whole iframe the Selective Refresh will refresh just some part

13
00:58.710 --> 01:00.110
of the iframe.

14
01:00.150 --> 01:04.800
So how it works is that when you send an Ajax request to the server and tell the server we need to fetch

15
01:04.830 --> 01:07.360
this part instead of fetching the whole website.

16
01:07.500 --> 01:09.690
So I think it's better to see this in action.

17
01:09.690 --> 01:15.050
So let's go to our code and what we have to do is create something called a partial.

18
01:15.100 --> 01:17.510
So it's also in $wp_customize.

19
01:17.640 --> 01:26.730
And we will access the selective refresh object, "selective_refresh". And then a method called 

20
01:26.790 --> 01:30.190
add_partial().

21
01:30.240 --> 01:35.960
So this partial gets an ID and will see this in a moment and an array of options.

22
01:36.660 --> 01:38.940
So the first option is the settings.

23
01:43.250 --> 01:45.040
And this could be an array of settings.

24
01:45.140 --> 01:47.170
So you put the ID of the settings here.

25
01:47.300 --> 01:51.400
And whenever these settings are changed this parcel will get fetched.

26
01:51.400 --> 01:56.710
So say we need to do this for the blogname so we can put the "blogname" here.

27
01:56.720 --> 02:03.100
However if you named a partial after the setting you don't have to add the settings array.

28
02:03.280 --> 02:08.450
You only have to add the settings array if you have multiple settings that you need to fetch this partial for

29
02:08.570 --> 02:16.720
when they are changed. So let's add the second argument which is a "selector". And a selector is the HTML

30
02:16.720 --> 02:20.740
selector that we will replace the content in.

31
02:20.750 --> 02:22.560
So we have the header logo here

32
02:22.610 --> 02:24.030
or actually the blogname.

33
02:24.360 --> 02:32.030
So when we change the Site Title here we need to replace the text inside the blogname. So this selector is

34
02:32.030 --> 02:33.060
what we need, so.

35
02:35.720 --> 02:40.660
And we have another important argument called "container_inclusive".

36
02:42.260 --> 02:50.480
And what that means is when we load this partial do we want to replace just the content inside this

37
02:50.790 --> 02:55.910
A tag, inside this class or replace the whole A tag?

38
02:55.940 --> 03:05.210
So in this case it's "false" we just need to replace the contents inside the A tag. the last and the most important

39
03:05.300 --> 03:10.580
argument is the "render_callback".

40
03:10.740 --> 03:16.780
And this is the function that will return the content that we want to replace the stuff inside header

41
03:16.790 --> 03:18.150
blogname with.

42
03:18.270 --> 03:24.600
So let's create a function and we can also create this function here or anywhere and then write its name here.

43
03:24.600 --> 03:29.210
But it's not gonna be a big function so anonymous function will be faster, so.

44
03:29.410 --> 03:35.380
So what we need to do here is run a PHP function that will return what we need to return here.

45
03:35.400 --> 03:38.850
So, and in our case we need to get the blog title.

46
03:38.910 --> 03:41.960
So we get it the same way we got as in the header.

47
03:42.150 --> 03:44.410
So we can return what's return from this function.

48
03:45.000 --> 03:52.110
So let's copy that and just paste here. And let's see what will happen now.

49
03:54.770 --> 04:03.710
And let's also open the Network tab and clear it. And select Ajax request here. And let's now change the 

50
04:03.710 --> 04:05.600
title.

51
04:05.710 --> 04:11.710
And as you can see it's a bit slower than the JavaScript one but also it did not refresh the whole

52
04:11.710 --> 04:14.570
website. It just refreshed this part.

53
04:14.860 --> 04:21.140
And as you can see in the network whenever we change something in Ajax request get sent. And what's returned

54
04:21.140 --> 04:26.890
here is the contents, the content that is returned by this render_callback function.

55
04:26.990 --> 04:32.150
So great. So what we've done here is instead of refreshing the whole website we are just sending a small Ajax

56
04:32.780 --> 04:38.390
request in order to get the contents just for this part and not the all website.

57
04:39.170 --> 04:42.480
So let's do the same thing for our footer text.

58
04:42.520 --> 04:46.180
So let's actually copy this instead of typing the whole thing.

59
04:47.240 --> 04:56.100
And then let's paste. Let's give it an ID that is unique and not a setting name. So "_themename"

60
04:56.780 --> 04:59.600
and let's call it "footer_partial".

61
04:59.960 --> 05:07.820
And this time we'll set the settings in this array instead of the ID the partial. So we run this partial

62
05:07.820 --> 05:10.900
when the site info is changed.

63
05:11.210 --> 05:22.080
So we put the "_themename_site_info" ID inside here. And the selector we need to replace the contents of

64
05:22.080 --> 05:23.280
this site-info DIV.

65
05:26.590 --> 05:30.550
So let's add this.

66
05:31.410 --> 05:36.410
So and "container-inlusive" we'll see this in a moment. So let's see what we need to run here.

67
05:36.880 --> 05:41.200
So let's go to the footer and let's see what we do in order to get this site

68
05:41.340 --> 05:44.740
info parts.

69
05:44.910 --> 05:50.150
So we run get_template_part() and then get this template. So we can do exactly the same thing.

70
05:50.460 --> 05:52.060
So let's copy this.

71
05:52.920 --> 05:58.800
So this is one more advantage of using get_template_parts(). We can use them to load the little pieces of code

72
05:58.800 --> 06:00.060
in the partials here.

73
06:00.210 --> 06:01.800
So let's do that.

74
06:01.800 --> 06:08.760
And now the get_template_part(), it will return the what is contained in the info, which is here.

75
06:11.410 --> 06:15.510
So what's contained the info contains in the site-info class.

76
06:15.630 --> 06:23.450
So if we leave the "container-inclusive" to "false" it will get the template part which contains the site-

77
06:23.480 --> 06:30.550
info class and then add it in the site info class again. So we'll have site-info class in inside of it another

78
06:30.570 --> 06:32.500
site-info class.

79
06:32.660 --> 06:41.030
So this time we want to set "container-inclusive" to "true". So that way the partial will replace the whole

80
06:41.450 --> 06:46.710
site-info class that already exists and we do not put the contents inside of it.

81
06:46.750 --> 06:48.000
So I hope that's clear.

82
06:48.380 --> 06:54.290
And oh by the way when we use partials we still need to set the transport to postMessage. And that way

83
06:54.290 --> 06:56.420
we will avoid refreshing the whole iframe.

84
06:56.660 --> 07:00.940
But if a partial exists for this setting it won't run the JavaScript callbacks.

85
07:01.040 --> 07:03.530
It will however load the partial instead.

86
07:03.810 --> 07:07.520
So let's try that.

87
07:08.270 --> 07:14.520
And as you can see it added the button here. It's accurately positioned but we can adjust that with CSS.

88
07:14.530 --> 07:21.760
But let's, right for  now, let's click on it and it will take you directly to the setting. And then when

89
07:21.760 --> 07:26.170
we change something we just load this part of the website

90
07:32.760 --> 07:38.170
As you can see here if we type a lot of text it will wait until we stop and then send one request. It

91
07:38.220 --> 07:41.380
won't send a request for each character we type. So great.

92
07:41.400 --> 07:47.900
You know, we are not able to exactly preview here what will be previewed in the actual website because we use

93
07:47.990 --> 07:51.230
the same function. And we are not loading the entire iframe.

94
07:51.320 --> 07:58.100
It may be a little bit slower than the JavaScript but it's iterative I think it's it has a real advantage

95
07:58.160 --> 08:04.970
of not repeating your PHP code in JavaScript. And also as I mentioned if you add more, we only have

96
08:04.970 --> 08:11.480
one setting now, but if you add more settings in that setting array you can refresh this partial for many settings

97
08:11.480 --> 08:16.550
and not just one. And we'll use that later in the course when we add more options.

98
08:16.550 --> 08:25.810
One more thing before ending this lecture. Let's close this. If we add widgets now let's say in the footer.

99
08:29.220 --> 08:35.160
It refreshes the whole website. And you can also use Selective Refresh for widgets but you have, your theme 

100
08:35.160 --> 08:37.780
have to opt in to support that.

101
08:37.770 --> 08:43.090
So let's go to the theme support file.

102
08:43.470 --> 08:51.870
And let's add another line. And this will be of course "add_theme_support" and the feature is called "customize-

103
08:54.180 --> 08:55.170
selective-

104
08:57.570 --> 08:59.890
refresh-widgets".

105
09:00.030 --> 09:07.500
So when we support this feature it, and refresh the customizer. And let's add a widget now.

106
09:14.820 --> 09:19.650
And it will load for the first time because we don't have any widgets. But let's try now and add another

107
09:19.650 --> 09:28.470
one. Calendar. And it will be added and let's try new order without refreshing at all.

108
09:28.470 --> 09:34.770
And you also now get these buttons here that when you click it will open the setting for this widget.

109
09:36.770 --> 09:41.480
So great. So you can also notice that WordPress internally uses

110
09:41.490 --> 09:44.370
Selective Refresh for the navigation as well.

111
09:45.320 --> 09:52.700
And we've already seen that when we refresh, when we reorder the only the menu get refreshed.

112
09:52.940 --> 09:56.420
Great. So now that we know all the different options that we can use.

113
09:56.710 --> 09:59.530
Let's now try and add some more options.

114
09:59.540 --> 10:04.100
We still have the footer columns and default background and stuff like that.

115
10:04.100 --> 10:05.670
So let's do that in the next lecture.