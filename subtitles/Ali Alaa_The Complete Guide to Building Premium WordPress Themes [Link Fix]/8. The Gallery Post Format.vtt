WEBVTT

0
00:02.450 --> 00:08.340
So let's do the final post format which is the Gallery Post Format.

1
00:08.530 --> 00:13.290
So let's search for "post format gallery".

2
00:13.820 --> 00:17.650
And we have a post from a gallery post. And there's another one,

3
00:17.810 --> 00:26.840
it used to test a certain plugin Jetpack. And we don't have to support this plugin So let's keep this one.

4
00:27.050 --> 00:28.320
And let's open it.

5
00:30.900 --> 00:33.300
As you can see we have a gellery.

6
00:33.470 --> 00:40.130
And we need also go to the Dashboard and Posts and search for "gallery".

7
00:43.300 --> 00:46.000
And edit it using the classic editor.

8
00:46.120 --> 00:52.990
So when you create a gallery using the classic editor, WordPress will create a gallery shortcode. However using

9
00:53.800 --> 01:00.370
the Gutenberg editor galleries are created differently, shortcodes are not used in Gutenberg.

10
01:00.370 --> 01:05.330
So in this lecture we will see both ways, how to support both ways in the post formats.

11
01:05.350 --> 01:06.130
Right?

12
01:06.490 --> 01:12.640
So let's start by the the classic editor. In the classic editor as we mentioned we can create galleries

13
01:12.670 --> 01:14.190
and WordPress will add shortcodes.

14
01:14.380 --> 01:19.870
And we have a function that is called get_post_gallery() that will get the first gallery in your post,

15
01:19.870 --> 01:24.390
if you have multiple galleries. And will return "false" if you don't have any galleries.

16
01:24.490 --> 01:30.430
So what we're gonna do is instead of displaying the post thumbnail here, we will display a slider

17
01:30.550 --> 01:33.160
that will contain all the images in the gallery.

18
01:34.000 --> 01:37.510
And if we don't have a gallery we will fall back to the slider.

19
01:37.540 --> 01:41.010
It's gonna like the video and the audio post formats right.

20
01:41.020 --> 01:50.680
So let's go and create a file. And let's call it , we have to call it actually content-gallery.

21
01:51.210 --> 01:59.730
And I think we can also copy maybe the audio. And let's see what we'll have to change. So now we don't have

22
01:59.730 --> 02:01.450
to get any audios.

23
02:01.600 --> 02:09.180
So let's remove that. And here we check if $audios is empty but if we need to check that we don't have galleries.

24
02:10.410 --> 02:14.100
We can check if "! get_post_gallery()", right?

25
02:14.400 --> 02:19.910
If you don't have galleries get_post_gallery() will return "false". And same thing here.

26
02:20.550 --> 02:22.860
Here we needed to check that we have audios.

27
02:22.890 --> 02:31.410
So we checked not empty audios but here we can check if we have galleries, this way. And instead of audio

28
02:32.130 --> 02:33.210
we have a class called

29
02:33.260 --> 02:42.490
"gallery". And let's remove this. And now let's see what the get_post_gallery() function will return.

30
02:42.490 --> 02:54.150
So let's var_dump() the function and see what it will return.

31
02:54.190 --> 03:02.350
So we have here a string of a large amount of lines. And this string is actually the HTML for the gallery.

32
03:02.350 --> 03:08.000
So we have the HTML for the gallery displayed here. Let's do an esc_html() to make this clear.

33
03:16.770 --> 03:21.950
And this is what will be returned from the get_post_gallery() function.

34
03:22.050 --> 03:26.460
So I mentioned we need to get the images and put them in a slider, so how can we do that when you

35
03:26.460 --> 03:30.540
already have some markup here that displays thumbnails for the images.

36
03:31.640 --> 03:34.700
We can, let's remove the esc_html().

37
03:35.210 --> 03:41.570
We can give the get_post_gallery() an argument which will instead of returning the HTML, it will return

38
03:41.570 --> 03:44.270
an object containing the images.

39
03:44.270 --> 03:48.780
So it's the second argument so the first argument is the ID.

40
03:48.980 --> 03:57.100
So get_the_ID() and then "false" and this will make this function return an object containing the images.

41
03:57.130 --> 03:59.750
So let's see how this will look like.

42
04:05.390 --> 04:10.520
And as you can see we have now an array. So let's now do a PRE tags to see this better.

43
04:16.110 --> 04:21.710
So it's an array and contains a key called "src". And this will contain another array that will contain the

44
04:21.720 --> 04:25.110
thumbnails for the images, the URLs for the thumbnails.

45
04:25.650 --> 04:35.420
And then we have another key called "type". And then we have number of "columns" and then we have "ids".

46
04:35.460 --> 04:37.900
So these are the IDs of the images in the gallery.

47
04:38.160 --> 04:43.890
So what we will do is we will grab these IDs and loop through them. And then for each ID we will get

48
04:44.190 --> 04:50.660
the large image for it. And then put them in DIVs and then initialize a Slick Slider on this DIV, right?

49
04:51.090 --> 04:58.560
So the reason why we did not use these because these are the thumbnails 150x150 as you can see.

50
04:58.800 --> 05:03.200
And we want to get the large size, so we'll have to use these IDs.

51
05:03.420 --> 05:07.820
So let's put this in a variable,

52
05:07.940 --> 05:08.400
$gallery.

53
05:11.720 --> 05:17.040
And let's grab the IDs in the $gallery.

54
05:18.170 --> 05:23.570
So now we have a string that will contain the IDs comma separated and we want to convert the string

55
05:23.570 --> 05:25.190
into array of IDs.

56
05:25.380 --> 05:31.430
So we can use explode() and we did this before in the footer columns, I think.

57
05:31.430 --> 05:39.870
So we need to explode() on the "," . So $gallery will contain an array of IDs for the images and in the gallery.

58
05:39.900 --> 05:49.530
So what I can do is we can write a foreach loop and "foreach( $gallery  as $id )".

59
05:50.720 --> 05:55.300
And then let's "echo wp_get_attachment_image()".

60
05:56.930 --> 06:00.110
And we need the current image.

61
06:00.330 --> 06:03.690
And the "large" size.

62
06:03.730 --> 06:05.450
So let's remove the PRE tags now.

63
06:08.790 --> 06:10.250
And let's see now.

64
06:11.120 --> 06:13.430
And as you can see we have all the images for the gallery.

65
06:16.020 --> 06:20.080
And the large size also not the thumbnail.

66
06:20.580 --> 06:24.610
So now let's quickly install Slick Slider in our theme.

67
06:24.630 --> 06:28.680
We did that in the plugin for the shortcodes already.

68
06:29.040 --> 06:33.840
So I know we are installing the same package for the theme and a plugin.

69
06:33.990 --> 06:36.230
And this way we will load the plugin twice.

70
06:36.420 --> 06:37.540
And that's not a good practice.

71
06:37.600 --> 06:44.260
But let's for now focus on the post format gallery and maybe later we will see how to avoid loading

72
06:44.270 --> 06:45.790
a plugin twice.

73
06:45.790 --> 06:54.980
So let's "npm install slick-carousel --save".

74
06:58.850 --> 07:00.710
And "npm start" again.

75
07:05.740 --> 07:10.220
And let's now initialize the Slick Slider on this DIV

76
07:10.220 --> 07:19.260
"c-post__gallery". So let's copy that and let's a go to source and assets and scss. We have

77
07:19.260 --> 07:23.730
to import the CSS for the Slick Slider.

78
07:24.210 --> 07:26.100
So let's do this maybe here.

79
07:26.700 --> 07:28.190
So "import"

80
07:29.460 --> 07:41.100
And then up three times and then node_modules and then slick-carousel and slick and then slick.scss.

81
07:43.390 --> 07:54.100
And let's also go to the jd and the bundle. And let's "import 'slick-carousel'".

82
07:54.230 --> 08:03.190
I think in the last section in the shortcode section I imported the slick-carousel using the full node_modules path.

83
08:04.240 --> 08:09.280
And that's not wrong but we can just do that as long as the package inside the node_modules folder,

84
08:09.370 --> 08:13.020
we can import it like that without typing the all path.

85
08:13.090 --> 08:18.130
So anyways that's on document ready.

86
08:21.330 --> 08:23.390
Let's select our gallery

87
08:24.520 --> 08:30.780
and ".slick". And we can add some options but let's keep it simple for now.

88
08:31.200 --> 08:33.300
And let's see now.

89
08:34.400 --> 08:36.130
And as you can see we have our slider.

90
08:36.510 --> 08:49.670
Of course you can make this look a little better. So let's remove the arrows.

91
08:49.920 --> 08:51.510
So that's a little better.

92
08:51.510 --> 08:57.330
We also have an option for adaptive height, so see this extra height here.

93
08:57.330 --> 08:59.420
So let's do that.

94
08:59.420 --> 09:02.500
"adaptiveHeight: true".

95
09:09.260 --> 09:11.750
And now it's a little bit better.

96
09:12.110 --> 09:13.770
So great we now have a gallery.

97
09:13.850 --> 09:14.920
And it's looking great.

98
09:14.930 --> 09:22.000
However we still have a problem that using Gutenberg, galleries are added a little bit differently.

99
09:22.490 --> 09:27.760
Solet's create new posts with a Gutenberg editor.

100
09:28.170 --> 09:33.370
And let's call it "gallery". And let's add a Gallery

101
09:39.770 --> 09:45.920
Let's add some images.

102
09:46.150 --> 09:53.740
And now if you take a look at the code editor, we don't have shortcodes anymore.

103
09:55.460 --> 10:06.730
And also if we view the post we won't have a slider here. And that's because now the get_post_gallery()

104
10:06.790 --> 10:09.970
function will not work for Gutenberg galleries.

105
10:10.090 --> 10:11.900
It will also work for the old

106
10:11.980 --> 10:15.000
editor galleries. Now it will return "false".

107
10:15.040 --> 10:20.530
So we need to figure out a way. Right now we will not be able to get the IDs of the galleries and look

108
10:20.530 --> 10:24.820
through them. But maybe you can do something just to support the Gutenberg editor.

109
10:24.940 --> 10:26.450
So let's do that in the next lecture.