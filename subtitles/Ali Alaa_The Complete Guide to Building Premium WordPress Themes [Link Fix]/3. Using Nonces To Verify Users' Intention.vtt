WEBVTT

0
00:03.430 --> 00:09.150
In the last couple of lectures we generated a Delete Post link which holds arguments like the action

1
00:09.180 --> 00:15.960
and the post. And then we handled this URL request and deleted the posts but only if the user has the

2
00:15.960 --> 00:17.370
permission to read the post.

3
00:17.400 --> 00:23.790
But then we said if some malicious user knows this URL, he can't do anything with it because we check

4
00:24.120 --> 00:25.650
if the user is logged in.

5
00:25.650 --> 00:29.640
But you can be logged in and he can trick you into clicking into this link.

6
00:29.640 --> 00:34.350
Maybe by sending in an email with this link and some button or something like that.

7
00:34.350 --> 00:39.780
So by visiting this link the post will be deleted but you didn't really intend to delete it.

8
00:39.840 --> 00:45.780
So to make sure that it's you who clicked this button and you were not forced into clicking it.

9
00:45.910 --> 00:47.810
We'll use something called nonces.

10
00:47.900 --> 00:54.720
So nonces basically another argument that we will send along with the action and the post. And this argument

11
00:54.720 --> 00:59.120
will be a hash generated by WordPress using a certain function.

12
00:59.130 --> 01:04.440
And then when we receive the request and the server we will verify that this hash is a valid one and

13
01:04.440 --> 01:06.570
if not we will not perform any action.

14
01:06.570 --> 01:10.770
So let's do it and we'll explain more while we're coding it.

15
01:10.830 --> 01:20.660
So when we are constructing the URL, we need to add another argument.

16
01:21.060 --> 01:22.770
So this another argument called "nonce".

17
01:26.690 --> 01:36.830
And this will be generated by function called wp_create_nonce(). And it takes an action and this is the action

18
01:36.830 --> 01:38.130
that you are performing.

19
01:38.210 --> 01:40.590
So you can call it any arbitrary name.

20
01:40.610 --> 01:42.100
So in our case you are deleting a post.

21
01:42.110 --> 01:47.070
So let's call it, let's also prefix it to avoid any collision.

22
01:47.210 --> 01:59.110
So "_themename_delete_post" and we can also add the IDs. So  "_delete_post_" and then the ID. This will

23
01:59.110 --> 02:06.030
make our action more specific. So we now created the hash and the hash will contain some information

24
02:06.600 --> 02:12.900
like the current user ID and the current session token and the session token is a token generated when

25
02:12.900 --> 02:18.000
you log into WordPress and it's a unique token. If you log in with the same account but in another browser

26
02:18.510 --> 02:19.700
the token will be different.

27
02:19.710 --> 02:21.980
So it's a unique token for your current session.

28
02:22.090 --> 02:26.340
And it also contains information about the time that this nonce was generated that.

29
02:26.360 --> 02:30.520
And it also contains your action that you specified here.

30
02:30.540 --> 02:35.070
So it's a hash string that contains all of these information and we'll send it.

31
02:35.130 --> 02:40.680
And then when we are processing the form we will call another function or first we should make sure

32
02:40.680 --> 02:44.960
that we have a nonce field. And if we don't have we should not perform any action.

33
02:45.870 --> 02:55.220
So let's write another if condition. So "isset($_GET['nonce'])".

34
02:55.270 --> 03:03.630
So if this value is not set or even if it's set we still need to verify that it's a valid nonce.

35
03:03.940 --> 03:11.320
So we call a function called wp_verify_nonce(). And it takes the nonce itself, the hashed string 

36
03:11.320 --> 03:21.450
itself which is will be this one. And the action which we called "delete_post" and then the ID. So.

37
03:22.360 --> 03:27.420
And the ID in this case will be the "post" in the $_GET array.

38
03:27.610 --> 03:29.030
So if these conditions are not met

39
03:29.050 --> 03:31.640
we will return, we will do nothing.

40
03:31.640 --> 03:34.790
So now if you don't have a nonce field we will do nothing.

41
03:34.900 --> 03:38.410
So even if we have this URL with the post and the action

42
03:38.410 --> 03:41.960
it won't work unless you have a nonce field. And also this nonce field

43
03:41.980 --> 03:48.550
even if it exists it should be a valid nonce field. So wp_verify_nonce() will  verify that this nonce field is

44
03:48.550 --> 03:55.130
valid and not just any hash text. And at the moment however WordPress checks if it's valid or not.

45
03:55.180 --> 04:00.890
And I'm sorry we have a typo here or we missed the "!" here we need to check that it is not a verified nonce

46
04:00.900 --> 04:02.300
we need to return and not

47
04:02.510 --> 04:04.030
And not a verified nonce.

48
04:04.390 --> 04:08.510
So let's see now. So let's try and delete this.

49
04:08.530 --> 04:12.960
And as you can see in the URL in the bottom left we have nonce field now.

50
04:14.000 --> 04:17.970
And when we send this nonce field to the server it will confirm that it's a valid one.

51
04:18.170 --> 04:20.110
And if yes it will delete the post.

52
04:20.120 --> 04:29.490
So let's try. And it's deleted. So let's restore this one.

53
04:29.620 --> 04:31.950
And now that, let's just copy this link.

54
04:37.180 --> 04:42.570
Now if you have a user that somehow made us click on this link without the nonce field,

55
04:43.110 --> 04:45.930
nothing would happen. Because there is no nonce field.

56
04:46.050 --> 04:52.560
And even if he pass the nonce field it must be a valid one and he will never be able to generate a valid

57
04:52.560 --> 04:53.050
one.

58
04:53.220 --> 04:58.370
So if he write anything here, it will be invalid and nothing will be deleted.

59
04:58.380 --> 05:04.400
So only if this is a valid field like this one. Now the "test 2" is deleted.

60
05:04.470 --> 05:07.590
So the bottom line for this is that this link will now,

61
05:07.650 --> 05:13.230
it will never work except if we pass a valid nonce. And nobody will be able to generate a valid nonce.

62
05:13.310 --> 05:18.850
And to understand that let's took a look at the wp_create_nonce() and wp_verify_nonce() source codes.

63
05:18.930 --> 05:26.070
So the generate_nonce() function. It will generate a hash using the wp_hash() function. And this hash will

64
05:26.070 --> 05:30.630
consist of $i and $i is the result of wp_nonce_tick() function.

65
05:30.660 --> 05:35.280
And wp_nonce_tick()  function returns a number which will remain the same.

66
05:35.280 --> 05:39.830
It will only change every 12 hours. And you'll know why in a moment.

67
05:40.230 --> 05:44.440
And then we have the $action. And this is the $action that we defined here.

68
05:45.410 --> 05:50.490
And then we have the user id ($uid) and then we have the $token of the current session.

69
05:50.600 --> 05:52.870
So this is what the nonce consist of.

70
05:53.050 --> 05:59.690
So now when we create this nonce and we need to verify it on the server. We use wp_verify_nonce.

71
06:00.120 --> 06:05.320
And what this will do is that it will reconstruct your hash using the $i and the $action and the $uid and the

72
06:05.400 --> 06:06.020
$token.

73
06:06.170 --> 06:10.650
And then if the two hashes are equal it will return 1 or 2.

74
06:10.670 --> 06:12.390
Otherwise it will return "false".

75
06:12.470 --> 06:17.210
So as you can see the information used here is very specific and it's impossible for anyone to be able

76
06:17.210 --> 06:19.230
to generate a hash like this.

77
06:21.900 --> 06:28.260
I just want to mention quickly that the 1 and 2. 1 will be returned if the nonce is generated from zero

78
06:28.260 --> 06:30.470
to 12 hours ago and 2 will be returned

79
06:30.480 --> 06:35.310
if the nonce is generated from 12 to 24 hours ago. So both values are true.

80
06:35.550 --> 06:38.820
If you give 1 or 2 to an if condition it returns "true".

81
06:39.120 --> 06:44.420
But that's just in case you want to know if the nonce is generated from 12 hours or more.

82
06:44.550 --> 06:47.320
And that's the point of the wp_nonce_tick() function.

83
06:47.850 --> 06:51.650
As I mentioned this function will increment by one every 12 hours.

84
06:51.690 --> 06:57.180
So if you add the $i here when you're checking and the result matches the given nonce that means that this

85
06:57.300 --> 06:59.570
nonce is generated from zero to 12 hours ago.

86
06:59.580 --> 07:06.910
However if it matched $i-1 that means that the wp_nonce_tick() function is incremented by one.

87
07:07.020 --> 07:14.460
And that means that 12 hour has passed since you generated the nonse that you give to the wp_verify_nonce()

88
07:14.540 --> 07:15.170
function.

89
07:15.180 --> 07:20.700
So I know this might be confusing so you can take a look and this function if you want. You don't have

90
07:20.700 --> 07:23.200
to know the details of the nonce functions.

91
07:23.220 --> 07:29.160
You just need to know how to use them. And I also put a link to a post here which contains some in-depth

92
07:29.250 --> 07:36.420
information about nonces. So that was user roles and capabilities and nonces. And I created this introduction

93
07:36.420 --> 07:42.680
section to these topics because we will use them in the next section when we start creating custom fields.

94
07:42.930 --> 07:43.980
So see you in the next section.