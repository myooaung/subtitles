WEBVTT

0
00:03.360 --> 00:07.720
So into the last lecture we mentioned that we need to add metadata to our post.

1
00:07.830 --> 00:14.940
But at the same time we don't need to use this Custom Fields box because it's not very practical and

2
00:15.000 --> 00:18.840
also because it's actually removed in the new WordPress editor.

3
00:18.900 --> 00:24.790
So let's go to our code now and let's create a new file in the lib folder.

4
00:24.790 --> 00:27.590
Now let's call it metaboxes.php.

5
00:33.440 --> 00:38.860
And don't forget to include it in your PHP in your functions.php file.

6
00:45.270 --> 00:51.670
And let's open a PHP tag. So of course as we do in everything in WordPress we use actions. So let's have  the new

7
00:51.670 --> 01:00.280
action and the action to add meta boxes is called "add_meta_boxes". And let's give it a function 

8
01:00.280 --> 01:02.050
"_themename".

9
01:02.580 --> 01:15.180
Let's call it "add_meta_box". And let's create this function.

10
01:15.320 --> 01:20.850
So this function will call another function

11
01:21.110 --> 01:22.460
that is called add_meta_box().

12
01:25.550 --> 01:27.760
And it takes a lot of arguments as you can see.

13
01:27.770 --> 01:31.530
So the first one is a unique ID for this box.

14
01:31.850 --> 01:40.950
So let's give it a prefixed ID and let's call it "post_meta_box".

15
01:45.100 --> 01:52.940
And it also needs a "title". And the title will be what appears here instead of the Excerpt here.

16
01:53.740 --> 01:55.330
So let's call it.

17
01:55.610 --> 02:03.280
Maybe Post Settings and then a callback. And the callback is a function that we will create and it will

18
02:03.280 --> 02:08.680
be responsible for rendering the content inside this meta box.

19
02:08.680 --> 02:13.600
So it will basically be responsible for creating the HTML fields inside this meta box.

20
02:13.600 --> 02:17.200
So let's choose a name and then we will create this function.

21
02:17.350 --> 02:28.390
So "_themename_" and let's call it "post_metabox_html"  as it should return HTML for the meta box. And

22
02:28.390 --> 02:31.000
the "screen" is which post types

23
02:31.000 --> 02:36.260
you would like this meta box to appear in. So it could be an array of post types.

24
02:36.310 --> 02:45.190
So we can have a "post" and the "page". And these will be the post types that we would like this meta box to appear in.

25
02:45.430 --> 02:46.790
Or it could be just a string

26
02:46.810 --> 02:53.500
if we have only one post type. So let's assume we would like to add it just in the post.

27
02:53.710 --> 02:55.760
So let's give it a string "post".

28
02:55.870 --> 03:00.230
And the "context" is where would you like this box to appear.

29
03:00.550 --> 03:05.000
So this could be after the post or in the side.

30
03:05.050 --> 03:09.940
So this could be either "normal" or "side" or "advanced".

31
03:10.060 --> 03:15.940
And the difference between "normal" and "advance" both will appear after the content but "advance" will

32
03:15.940 --> 03:17.680
appear after the "normal".

33
03:17.890 --> 03:19.420
So if there are two meta boxes,

34
03:19.450 --> 03:23.950
one is normal and one advance, the "normal" will appear first.

35
03:23.980 --> 03:25.000
So it doesn't matter.

36
03:25.000 --> 03:28.780
Now let's give it "normal" and the "priority".

37
03:28.780 --> 03:33.280
This is obviously the priority of the order which the meta box will appear.

38
03:33.280 --> 03:39.070
So let's give it a "default" priority. And "callback_args"

39
03:39.080 --> 03:41.150
"callback_args" are extra arguments

40
03:41.150 --> 03:48.110
you'd like to pass to this function. And you probably won't need to pass extra arguments or at least

41
03:48.170 --> 03:49.240
in our case.

42
03:49.460 --> 03:54.310
So let's remove this for now and let's see now what this will do.

43
03:54.370 --> 03:54.820
"normal".

44
03:58.360 --> 04:04.180
And as you can see we now have a meta box Post Settings and it's throwing an error here because we 

45
04:04.180 --> 04:07.000
did not define this function yet.

46
04:07.060 --> 04:10.110
So that's not a problem.

47
04:10.240 --> 04:17.710
So let's now just try and change this to "side".

48
04:17.880 --> 04:20.580
And now as you can see it's moved to the side here.

49
04:22.060 --> 04:27.820
This option actually won't make any difference in Gutenberg, the new editor when I tested. It will

50
04:27.820 --> 04:29.730
always appear after the post.

51
04:29.800 --> 04:36.300
So if you're planning to support Gutenberg this option won't really matter.

52
04:36.400 --> 04:37.980
Let's keep it "normal" for now.

53
04:38.160 --> 04:47.070
So let's now create this function which will be responsible for theHTML output of the meta box.

54
04:49.040 --> 04:51.840
And I think we'll have a lot of HTML here.

55
04:52.160 --> 04:59.560
Personally I prefer to close the PHP and type the HTML instead of you know echoing PHP strings.

56
05:01.310 --> 05:09.750
So let's create our first field. Let's open a P tag. And to create this field it's no different than creating a

57
05:09.770 --> 05:12.400
normal HTML field for a form.

58
05:12.410 --> 05:18.450
So we have the LABEL and this LABEL will be for a certain input.

59
05:18.500 --> 05:25.010
So let's leave it for now until we create an INPUT. And let's open PHP now to output the text because

60
05:25.010 --> 05:28.190
we need to escape it and translate it.

61
05:28.940 --> 05:33.000
So let's create a field for a subtitle for the post for instance.

62
05:33.000 --> 05:34.180
So let's call it "Subtitle".

63
05:38.960 --> 05:48.810
And "_themename". And close the LABEL And then in a new line let's create our INPUT.

64
05:49.140 --> 05:56.680
And we'll need type to be text for this one. And let's choose a name for this field. And the name of

65
05:56.680 --> 05:59.820
the field is different than the name of the meta key.

66
05:59.830 --> 06:03.550
So just keep this in mind and we'll see what this means in a moment.

67
06:03.580 --> 06:12.520
So let's call this "_themename_post_subtitle_field".

68
06:13.150 --> 06:17.390
And let's give it an ID with the same name.

69
06:18.040 --> 06:20.310
Just use it in the FOR here.

70
06:21.250 --> 06:27.520
So let's see how this will look like. As you can see you have a field and a label.

71
06:27.540 --> 06:28.480
So let's give.

72
06:28.710 --> 06:37.680
This is a WordPress class called "widefat" for the input. And this will make the input take the full width.

73
06:37.800 --> 06:39.830
So I think that's a little better.

74
06:39.840 --> 06:41.750
So now we have our fields.

75
06:42.120 --> 06:44.850
But let's type anything in it and save.

76
06:48.210 --> 06:52.900
And nothing will be saved. So WordPress does not automatically save your data.

77
06:52.900 --> 06:55.290
Somehow we need to handle this manually.

78
06:55.290 --> 06:59.670
So whatever you type here will be available in the super global variable

79
06:59.670 --> 07:05.940
$_POST exactly when you are submitting a normal HTML form using PHP. You get the fields in the super

80
07:05.940 --> 07:06.760
global $_POST.

81
07:06.900 --> 07:09.490
So this will be exactly the same here when we save the post.

82
07:09.530 --> 07:13.540
These fields that we type here will be available in the super global $_POST.

83
07:13.650 --> 07:18.020
But when can we access this $_POST super global.

84
07:18.260 --> 07:24.260
It's by using an action called save_post(). And this action will be triggered every time you save a post.

85
07:24.280 --> 07:33.820
So let's add action and "save_post". And let's add a new function to handle saving a post.

86
07:37.250 --> 07:47.260
Let's call it "_themename_save_post_metabox". And this action receives two arguments.

87
07:47.360 --> 07:57.980
So you have to specify the number of arguments here and let's create this function.

88
07:58.840 --> 08:05.700
So the two arguments that this function will receive are the $post_id of the post that is being saved

89
08:05.950 --> 08:08.850
and the $post object of the same post.

90
08:09.160 --> 08:13.330
So in this function we will have the our fields available in the $_POST super global.

91
08:13.330 --> 08:23.620
So we'll have this field available in $_POST and this field.

92
08:24.040 --> 08:26.420
And we have the $post and the $post_id.

93
08:26.500 --> 08:29.640
So how can we add meta information using what we have.

94
08:29.680 --> 08:34.370
So what we need to do is just open the database again.

95
08:36.010 --> 08:38.650
We need to add a new field in this table.

96
08:38.650 --> 08:39.220
Right?

97
08:41.340 --> 08:48.030
And we have the post ID and we have the value in the $_POST super global and will choose any arbitrary

98
08:48.420 --> 08:52.070
name for the key and add a new value in this table.

99
08:52.200 --> 09:00.930
So to do that WordPress provide a function called add_post_meta(). But this function every time you call it,

100
09:01.110 --> 09:06.050
it will add multiple values for the same meta key as we saw in the last lecture.

101
09:06.150 --> 09:11.310
But in our case we only need the last value the user typed to be saved.

102
09:11.310 --> 09:13.520
We don't need to store the value each time

103
09:13.530 --> 09:18.950
the user saves. So to do that we can use another function called update_post_meta().

104
09:19.050 --> 09:20.110
And this will check first

105
09:20.150 --> 09:21.550
in the wp_meta table.

106
09:21.600 --> 09:27.690
If the meta key already exists instead of adding another one it will update the one that already exists.

107
09:27.690 --> 09:33.570
So let's use this function. But before we do that let's first make sure that this key exists in the $_POST

108
09:33.570 --> 09:39.160
super global. So we can use isset() or we can use array_key_exists().

109
09:39.240 --> 09:41.460
So this will check if this key

110
09:43.940 --> 09:46.630
exists in the $_POST super global.

111
09:50.050 --> 09:58.550
And if so we will use this value to add, sorry, to add  the post meta. And the update_post_meta() also if you are

112
09:58.550 --> 10:04.820
saving for the first time and we don't have the meta key in the database yet it will create a new

113
10:04.820 --> 10:08.250
one. And if it finds an existing one it will update it

114
10:08.390 --> 10:15.740
as we mentioned. So we have the $post_id here and we have the "meta_key".

115
10:15.840 --> 10:19.310
We don't have it but we can choose a name for it.

116
10:19.320 --> 10:22.030
So let's call it "__themename_".

117
10:22.110 --> 10:26.810
And I'll tell you why two "_" in a moment.

118
10:26.810 --> 10:31.810
So "_themename_", and let's call it "post_subtitle".

119
10:32.930 --> 10:37.780
So remember when I told you the meta key is not the same as the field name here.

120
10:37.970 --> 10:42.030
The field name is just the name of this input in the form that you are submitting.

121
10:42.210 --> 10:48.870
It should be available in the $_POST super global. However the meta key is the key that we will choose when we're

122
10:48.900 --> 10:51.770
saving the meta data in the database.

123
10:52.050 --> 10:54.150
So there are two different things.

124
10:54.200 --> 11:03.850
So let's call it just "_themename_meta_subtitle", and the value will be this whatever the user typed. And forth argument

125
11:03.850 --> 11:09.910
is it's only important if you have multiple meta values for the same meta keys and you want to update

126
11:09.970 --> 11:11.770
a certain value of them.

127
11:11.770 --> 11:17.580
So in our case we will only have one meta value for every meta key so it'ss not important.

128
11:17.580 --> 11:19.230
We're having a bracket missing.

129
11:23.900 --> 11:28.810
And let's clean this, add some lines.

130
11:31.030 --> 11:35.300
And let's now try and save the field.

131
11:35.430 --> 11:40.470
So let's go to the posts and let's type something and save.

132
11:43.650 --> 11:56.100
And you find nothing here but let's go to the database. And let's go to the third page. Let's search for 

133
11:56.100 --> 12:03.200
"_themename" and as you can see we have our key and value saved. So let's try and change it.

134
12:04.650 --> 12:07.020
Let's type this time "test"

135
12:10.400 --> 12:11.720
And let's refresh.

136
12:19.680 --> 12:25.320
And as you can see the value is updated and at the same time it did not add another value to the same

137
12:25.430 --> 12:28.010
meta key as we saw in the last lecture.

138
12:28.020 --> 12:31.470
So let's see why I added two "_" here before I forget.

139
12:31.530 --> 12:34.490
So remember in the, when we added the custom field this way.

140
12:34.590 --> 12:41.160
If you add a field name without an "_" it will appear here and you can edit your field from here.

141
12:41.250 --> 12:42.060
But we don't need that.

142
12:42.060 --> 12:48.660
We only need to edit our field using our meta boxes. So to hide your field from this dropdown here

143
12:48.660 --> 12:51.880
you add an "_" before it's key.

144
12:51.990 --> 12:58.720
But the reason we added two "_" is because when we build our theme for production the "_themename"

145
12:59.030 --> 13:01.730
will be replaced with your theme name.

146
13:01.740 --> 13:07.840
So the extra "_" is to hide this field from the Custom Fields dropdown.

147
13:08.100 --> 13:13.300
So let's do one final thing for this lecture. We need the value that we saved to appear here as a value

148
13:13.300 --> 13:15.520
for the input.

149
13:15.570 --> 13:22.610
So let's before closing the PHP, create a new variable and call it $subtitle.

150
13:25.820 --> 13:31.950
So we need to get the value from the database. So we can use get_post_meta() as we did in the last lecture.

151
13:32.280 --> 13:36.780
And this takes the ID and you can get the ID in the HTML callback.

152
13:36.780 --> 13:45.720
We get the post object here as an argument. So we can just call or retrieve the ID of the post using

153
13:45.720 --> 13:50.290
the $post object  this way.

154
13:50.530 --> 13:58.500
And then it takes the key and this key. Remember that is different from the field name. And as we saw in the last lecture

155
13:58.590 --> 14:00.120
this will return an array.

156
14:00.220 --> 14:01.660
But the value itself.

157
14:01.660 --> 14:03.780
And in our case you are updating  the post meta.

158
14:03.820 --> 14:07.650
So this array will always contain just one key, right?.

159
14:07.660 --> 14:11.750
So if we add the third argument here and set it to "true" , sorry.

160
14:14.920 --> 14:18.760
This will return the first value in the array.

161
14:19.270 --> 14:26.740
So inside the $subtitle now we have the value that we typed. And let's just add it as a value for the

162
14:26.740 --> 14:27.840
input.

163
14:32.500 --> 14:36.780
So remember we're outputting some variable in an HTML attribute.

164
14:36.840 --> 14:45.780
So we should esc_attr() and then the value. And also before saving this value to the database using

165
14:45.840 --> 14:46.810
update_post_meta().

166
14:46.810 --> 14:54.350
Make sure you remove any HTML or any unallowed tags using one of the sanitization functions.

167
14:54.390 --> 15:00.540
So I'm gonna use, since we are having a text field I'm gonna use sanitize_text _field.

168
15:01.670 --> 15:07.150
And as you already know this will prevent any unwanted HTML from being saved in the database.

169
15:07.500 --> 15:08.730
So let's try now.

170
15:11.590 --> 15:14.490
And as you can see we have the value here. Let's try and update it.

171
15:17.180 --> 15:18.810
And it's still there.

172
15:18.950 --> 15:20.100
So that's great.

173
15:20.120 --> 15:21.820
We still have a problem though.

174
15:21.830 --> 15:27.680
So remember in the last lecture we mentioned that whenever you are submitting data to the database or deleting

175
15:27.680 --> 15:31.310
the post or anything like that you need to check for user capabilities.

176
15:31.580 --> 15:36.570
And you also need to add a nonce field to make sure that  the user intended to press save

177
15:36.620 --> 15:37.430
in this case.

178
15:37.490 --> 15:42.410
So we learned how to add an nonce field in a GET request in the URL, let's see in the next lecture how to

179
15:42.410 --> 15:48.120
add a nonce field in the form or in the post request. And we'll also check for user capabilities.

180
15:48.180 --> 15:49.620
So let's do that in the next lecture.