WEBVTT

0
00:00.120 --> 00:02.300
-

1
00:04.360 --> 00:13.860
Let's do now the JavaScript task. And let's first, you know, summarize what we need to do before starting.

2
00:14.100 --> 00:16.410
So we have this js folder.

3
00:16.980 --> 00:23.540
And what we want to do is we want to create one single file to compile, just like the SASS file here.

4
00:23.610 --> 00:24.970
Like the bundle file.

5
00:25.350 --> 00:32.370
And then if we want to include other JavaScript files we will import them using JavaScript ES6 import

6
00:32.390 --> 00:34.280
statements.

7
00:34.440 --> 00:35.670
So let's say we have the

8
00:38.960 --> 00:42.700
bundle.js.

9
00:44.440 --> 00:50.470
And we have maybe a folder for components.

10
00:52.950 --> 00:57.850
And say a slider component.

11
01:02.810 --> 01:10.020
What we'd like to is to import the slider component using import statements like so,

12
01:13.190 --> 01:14.760
all right?

13
01:16.900 --> 01:25.340
And also be able to use ES6  JavaScript so we can use the "let" keyword here.

14
01:27.720 --> 01:30.090
And compile just this one file

15
01:30.900 --> 01:32.500
which will include other files.

16
01:32.610 --> 01:35.220
Right?

17
01:35.270 --> 01:43.470
So let's do this now. So you can find a lot of Gulp plugins that will transpile ES6 to ES5. I'll have one

18
01:43.470 --> 01:47.060
of them can support module bundling.

19
01:47.400 --> 01:54.150
And by modular bundling I mean using the import statements here to bundle all files into just one single

20
01:54.150 --> 01:54.770
file.

21
01:54.960 --> 02:04.960
So one of the famous plugins that support module bundling is called "webpack". And webpack is actually,

22
02:04.980 --> 02:11.500
it's not a Gulp plugin, it's a separate library. But we'll just need to use the module bundling

23
02:11.630 --> 02:13.870
and ES6 compiling part of it.

24
02:13.920 --> 02:21.780
And thankfully somebody made a Gulp integration with webpack. So it's called "gulp"

25
02:22.160 --> 02:24.200
I think "webpack stream".

26
02:28.280 --> 02:28.840
Yeah, "webpack-stream".

27
02:34.650 --> 02:36.060
So let's install it.

28
02:40.600 --> 02:43.500
And always make sure you are in the right directory.

29
02:47.130 --> 02:51.270
So now it's installed. Let's see how to use it.

30
02:51.280 --> 02:55.150
So let's we go back to the gulpfile now and "import

31
02:58.090 --> 03:01.330
webpack from

32
03:04.570 --> 03:05.110
'webpack-stream'".

33
03:08.320 --> 03:09.450
And let's create a new task.

34
03:13.360 --> 03:16.260
And let's call it "scripts".

35
03:31.190 --> 03:32.850
And we'll return a stream.

36
03:35.730 --> 03:38.840
So let's type the source and the destination here.

37
03:42.120 --> 03:45.270
So let's put after the.

38
03:47.730 --> 03:48.400
So "scrips:"

39
03:54.320 --> 03:55.810
And "src:"

40
03:58.090 --> 03:58.900
And there will be

41
04:03.060 --> 04:07.880
"src/assetsjs/bundle.js".

42
04:12.050 --> 04:19.700
So as I mentioned we need to have all the JavaScript bundle in one file so we have one file here and

43
04:19.700 --> 04:25.560
then the destination will be "dist/assets/

44
04:26.260 --> 04:27.470
js".

45
04:28.340 --> 04:34.220
Right? So that's in the source we'll have "paths.

46
04:37.590 --> 04:39.990
scrips.src".

47
04:40.210 --> 04:50.510
And then we'll pipe the webpack plugin.

48
04:50.570 --> 04:51.690
So "webpack()".

49
04:55.840 --> 04:57.070
And let's save it to

50
05:00.630 --> 05:13.150
our destination. So "gulp.dest" and then "paths.scrips.dest". So let's try out this

51
05:13.160 --> 05:15.090
now.

52
05:15.260 --> 05:22.040
So let's run "gulp js" and see what will happen.

53
05:22.060 --> 05:23.710
Sorry, "gulp scripts".

54
05:27.490 --> 05:28.320
And I've an error.

55
05:31.440 --> 05:32.160
All right. So

56
05:32.380 --> 05:38.010
looks like we mistyped something in the here, "assets/js". Let's run

57
05:41.460 --> 05:41.910
again.

58
05:47.420 --> 05:50.210
So as you can see you've created something here.

59
05:50.230 --> 05:57.020
So now in your dist directory you should have a js folder with the generated file. So as you can see it

60
05:57.020 --> 05:58.530
adds some stuff here.

61
06:00.180 --> 06:03.640
And then we'll find our file "let x = 0".

62
06:03.840 --> 06:05.000
So that's weird right

63
06:05.010 --> 06:07.580
"let" is not supported in ES5.

64
06:08.010 --> 06:09.790
So this should be converted to "var".

65
06:09.950 --> 06:16.410
So actually what we've done is that we activated module bundling or using the input statements, but we 

66
06:16.410 --> 06:19.330
haven't yet used webpack to transpile our files.

67
06:19.380 --> 06:22.940
And to do that we'll install another plugin.

68
06:23.790 --> 06:24.730
So "npm

69
06:27.250 --> 06:34.470
install --save" and it's called " babel-loader".

70
06:39.580 --> 06:48.400
And now it's installed so webpack works with something called loaders. So we can add in an object to the

71
06:48.430 --> 06:54.560
webpack argument, first argument. And then a key of "module:" 

72
06:58.050 --> 07:01.790
and then "loaders:"

73
07:04.680 --> 07:10.600
and there will be an array of loaders. And loaders are actually what webpack uses in order to, you know,

74
07:10.860 --> 07:17.060
transform a file or do some sort of a task like the task we've been doing using Gulp. So I'm not gonna

75
07:17.070 --> 07:18.560
go into more details

76
07:18.570 --> 07:19.440
in webpack.

77
07:19.470 --> 07:20.740
It's not important for you.

78
07:20.960 --> 07:23.740
But you can read more about it if you would like.

79
07:24.300 --> 07:31.410
So the first loader, the first item in the loaders array will test for

80
07:34.410 --> 07:35.650
JavaScript files.

81
07:35.940 --> 07:45.530
So if the file we are parsing is a JavaScript file it will run this loader. And then "use:" and this is the

82
07:45.540 --> 07:48.180
loader that we would like to use.

83
07:49.140 --> 07:51.360
So it's the loader that

84
07:51.390 --> 08:00.620
we've just installed "babel-loader" which will transpile the files from ES6 to ES5, right?

85
08:01.090 --> 08:06.450
And we're gonna have options. And we can define our preset.

86
08:10.610 --> 08:11.370
Remember

87
08:11.370 --> 08:19.490
the preset that you should define when you want to use Babel. We use it here in the .babelrc

88
08:19.590 --> 08:23.930
file, "{ "presets": [ "env" ] }". So it's the same thing here.

89
08:24.340 --> 08:27.390
But here we have to define, to write 

90
08:28.290 --> 08:34.580
the whole NPM package name and sorry. And not just "env".

91
08:34.910 --> 08:42.390
So if you don't have any webpack experience before this may look weird to you, but you can just follow along

92
08:42.400 --> 08:47.510
and it's not really important for you as a WordPress developer to know what's going on here.

93
08:47.590 --> 08:52.260
Do read more about it if you would like. So let's try run this now.

94
08:54.340 --> 08:55.640
"gulp scripts".

95
08:55.830 --> 08:59.340
And we've an error.

96
08:59.490 --> 08:59.890
Ok,

97
08:59.900 --> 09:00.470
that's "presets".

98
09:00.490 --> 09:02.660
not "preset".

99
09:05.230 --> 09:07.640
I hope that's the error.

100
09:09.610 --> 09:11.450
Ok, so we now have a new bundle.

101
09:11.470 --> 09:15.170
So let's go to the js folder.

102
09:18.290 --> 09:28.070
And now it's "var" and not "let". Because we're now using the "babel-loader" in order to transpile ES6 into ES5.

103
09:28.580 --> 09:35.930
So notice here the Hash things that webpack does everytime you create a new file and with a new

104
09:35.950 --> 09:44.080
Hash. This might be useful actually in order to when you change something in your js files, it

105
09:44.080 --> 09:46.090
will create a new Hash.

106
09:46.290 --> 09:51.230
And you can avoid browser caching and you know it could be useful.

107
09:51.240 --> 09:59.040
But let's keep it simple for now and just rename this hash into a constant file name in order to

108
09:59.040 --> 10:01.310
load it easily in the WordPress side.

109
10:01.920 --> 10:08.490
So let's add one more option to the webpack.

110
10:09.360 --> 10:12.060
So after the "module" let's add "output:"

111
10:15.730 --> 10:16.740
and then "filename:"

112
10:20.280 --> 10:27.150
and "bundle.js". And let's run "gulp script" again.

113
10:27.940 --> 10:30.710
Now the file name is bundle.js as you can see.

114
10:31.120 --> 10:34.250
And here it is.

115
10:34.250 --> 10:38.250
So this way when we load the file in the WordPress site the filename will be constant.

116
10:38.250 --> 10:43.980
We know that there is a file called bundle.js in the dist directory. But if we use the hash here we

117
10:44.050 --> 10:49.650
will have to do additional stuff in order to figure out the name and load it. So let's keep it

118
10:49.650 --> 10:50.630
simple for now.

119
10:50.730 --> 10:53.420
So let's now load the bundle.js file

120
10:54.990 --> 11:00.760
in the WordPress site. So I want to go to

121
11:03.540 --> 11:14.420
enqueue-assets. And we are enqueueing a style here so there is similar function for enqueueing scripts. And let's call,

122
11:15.460 --> 11:26.030
as you might expect, "wp_enqueue_scripts" or "script". So we have the handler.

123
11:26.420 --> 11:33.620
So let's use our prefix as we agreed and then "scripts"

124
11:36.720 --> 11:37.570
and the source.

125
11:37.590 --> 11:40.100
So it's the "get_template_directory_uri"

126
11:40.140 --> 11:44.840
to get the themes directory. And then

127
11:46.500 --> 11:47.850
our bundle would be in "dist/

128
11:50.430 --> 11:55.060
assets/js/bundle.js".

129
11:55.430 --> 11:59.480
mistyped bundle.js

130
12:00.650 --> 12:03.770
And then we have an array of dependencies.

131
12:03.790 --> 12:09.030
So let's leave it as an empty array for now.

132
12:11.200 --> 12:13.840
And "in_footer" this is a boolean.

133
12:13.840 --> 12:19.370
If you want to add your scripts in the footer set this "true". If you want added in the header set it

134
12:19.390 --> 12:21.030
to "false".

135
12:21.120 --> 12:28.140
So I'd like to add it into footer so we can avoid render blocking and make our web page loads faster.

136
12:29.980 --> 12:37.000
So we're missing a semi-colon. So that's it.

137
12:37.000 --> 12:45.750
So let's make sure you've, you are having your MAMP server is open and open your web site.

138
12:45.790 --> 12:49.310
And let's add actually something to bundle.js

139
12:49.460 --> 12:53.110
like a "console.log()" or something.

140
12:53.580 --> 12:55.530
So we can make sure it's loaded.

141
12:55.720 --> 13:01.700
So let's "console.log(x)". And save and run.

142
13:05.330 --> 13:14.360
And let's open the our console. And refresh and we're having the console log.

143
13:14.370 --> 13:23.650
So we are successfully loaded a file but now as you may notice we have the same CSS problem. We've here 

144
13:23.650 --> 13:26.340
says the console log is coming from bundle.js.

145
13:26.880 --> 13:34.540
And it's actually coming from bundle.js so let's add another console log in the slider.

146
13:36.780 --> 13:40.510
So any number and run the task.

147
13:40.620 --> 13:46.230
We're not watching yet for changes. And refresh.

148
13:47.070 --> 13:48.240
So we have this one here.

149
13:48.340 --> 13:49.030
It says

150
13:49.110 --> 13:50.080
it's coming from bundle.

151
13:50.110 --> 13:51.110
js.

152
13:51.360 --> 13:59.250
When it's actually coming from slider.js. So we need to add the sourcemaps like we did for

153
13:59.250 --> 14:00.030
the SASS.

154
14:00.030 --> 14:01.250
Right?

155
14:02.010 --> 14:08.500
And to do that we don't have to use the sourcemaps like we did for the styles.

156
14:08.580 --> 14:11.150
Actually webpack have an option to add sourcemaps

157
14:14.040 --> 14:23.570
before compiling so we can add "devtools" or "devtool:".

158
14:23.770 --> 14:27.670
And this could either be a sourcemaps or inline sourcemaps.

159
14:27.670 --> 14:29.020
So I'm gonna use inline sourcemaps.

160
14:32.560 --> 14:39.190
The sourcemaps option will add the sourcemaps in separate files, the inline one will add in the same

161
14:39.190 --> 14:40.070
file.

162
14:40.530 --> 14:40.990
All right.

163
14:40.990 --> 14:43.090
So let's run the task now and see.

164
14:49.290 --> 14:51.600
So let's open the bundle file.

165
14:51.620 --> 14:53.560
And now we have the sourcemap.

166
14:53.860 --> 14:56.940
So that's what I meant when I said it adds the 

167
14:57.370 --> 14:59.690
sourcemap in the same file.

168
14:59.860 --> 15:06.430
Otherwise it will add it in the in a separate file in the js folder. And doesn't really matter just, I just like

169
15:06.430 --> 15:08.990
to use the inline one.

170
15:09.010 --> 15:11.990
So let's refresh here.

171
15:12.460 --> 15:17.920
And now we're having the actual slider file, right?

172
15:19.010 --> 15:20.520
So that's great. So

173
15:20.750 --> 15:24.860
one more thing, we would like to add this option only for production,

174
15:24.860 --> 15:26.580
right?

175
15:26.870 --> 15:28.370
So you can do it in the expression here.

176
15:28.370 --> 15:34.090
So if not production add the inline sourcemap option.

177
15:34.100 --> 15:37.790
Otherwise just set the "devtool" to "false".

178
15:40.660 --> 15:43.370
So now if we run it

179
15:46.240 --> 15:48.310
I really hope you're not hearing these cats.

180
15:51.070 --> 15:53.760
So now it should be working now.

181
15:53.890 --> 15:57.040
The sourcemaps but if we run it for production

182
16:01.810 --> 16:04.900
it shouldn't have sourcemaps, right?

183
16:08.840 --> 16:10.560
One more final thing for this video,

184
16:10.580 --> 16:13.910
I know it's probably too long.

185
16:14.030 --> 16:22.160
But after compiling and bundling the JavaScript, we want to minify it for production also.

186
16:22.160 --> 16:28.470
So I'm gonna use a plugin called "gulp uglify".

187
16:31.710 --> 16:41.850
And it's a plugin that simply minifies JavaScript. So let's install it and use it real quickly. So install.

188
16:44.320 --> 16:47.200
while it's installing let's import it.

189
16:47.640 --> 16:55.590
So "import uglify from 'gulp-uglify".

190
16:58.980 --> 17:13.000
All right. And we'll simply after the webpack pipe, we will pipe the "uglify". And only for production.

191
17:13.000 --> 17:16.300
So if production

192
17:19.090 --> 17:24.460
uglify, otherwise don't do.

193
17:24.600 --> 17:25.980
So this should work.

194
17:25.980 --> 17:30.160
So I'm gonna run the scripts for production

195
17:33.660 --> 17:40.290
And we should have our bundle file minified as you can see.