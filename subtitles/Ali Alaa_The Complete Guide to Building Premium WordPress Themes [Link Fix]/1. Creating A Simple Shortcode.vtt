WEBVTT

0
00:03.140 --> 00:08.920
In this section we'll talk about shortcodes. And in case you have no prior WordPress experience,

1
00:09.000 --> 00:11.150
let's first discuss what shortcodes are.

2
00:11.430 --> 00:14.760
And then we will take a look at how to create shortcodes.

3
00:15.180 --> 00:22.050
So of course always make sure you have your MAMP server open and your npm running. And then I'm gonna

4
00:22.050 --> 00:32.250
go to the wp-admin and Pages. And I'm gonna edit any page. So let's edit this Sample Page. And during this section I'm

5
00:32.250 --> 00:38.310
gonna be using the classic editor. I'm not gonna be using the Gutenberg editor. And that's because shortcodes

6
00:38.550 --> 00:44.730
in Gutenberg are not gonna be used as often as they were used before in the classic editor. But they

7
00:44.730 --> 00:45.820
can still be used.

8
00:45.900 --> 00:50.520
And I think it's still important to learn how to create them.

9
00:50.550 --> 01:00.810
So let's edit this page. So shortcodes are away when you are creating a post in the editor to render some HTML components.

10
01:01.350 --> 01:06.570
Or maybe to interact with the database maybe get the latest post or something like that without actually

11
01:06.570 --> 01:07.240
writing

12
01:07.400 --> 01:08.910
HTML or PHP.

13
01:09.240 --> 01:14.040
So for example if we add a gallery here, a default gallery, WordPress gallery.

14
01:16.840 --> 01:19.200
So let's choose a couple of images.

15
01:21.680 --> 01:27.990
And then if you go to text, you'll find that wordPress uses this string here.

16
01:28.180 --> 01:32.120
And if you update and then view the page,

17
01:35.030 --> 01:40.430
the string will be converted to the HTML for the gallery.

18
01:40.470 --> 01:43.070
So this string here is this ashortcode.

19
01:43.080 --> 01:49.710
And when WordPress is parsing your page content, it finds a string written in this syntax and then it

20
01:49.710 --> 01:53.750
triggers a certain function that will output some HTML.

21
01:53.790 --> 01:59.720
So in this case this function will loop through these IDs for the images and then output them like

22
01:59.710 --> 02:00.760
so.

23
02:00.790 --> 02:05.640
So WordPress actually uses shortcodes in the classic editor. In Gutenberg.

24
02:05.730 --> 02:08.900
things are different but let's learn how to write our own shortcodes now.

25
02:08.900 --> 02:11.800
So let's say,let's remove this.

26
02:11.960 --> 02:14.730
Let's say we would like to create a shortcode

27
02:17.510 --> 02:18.030
that is called,

28
02:18.080 --> 02:20.740
and by the way shortcodes are also, should also be prefixed.

29
02:23.540 --> 02:34.090
So let's write a shortcode which should be a button. And shortcodes as you saw for the gallery can have attributes.

30
02:34.510 --> 02:38.930
So let's say we want the color and the text for the button.

31
02:40.000 --> 02:41.630
And then close it.

32
02:41.710 --> 02:44.380
So right now we'll refresh our page.

33
02:44.410 --> 02:46.950
This will not do anything really.

34
02:47.350 --> 02:53.590
And that's because we have not defined the shortcode. So let's see how to define shortcode and attach a function to

35
02:53.590 --> 02:58.360
it that will run once WordPress finds this string in your content.

36
02:58.360 --> 03:07.180
So let's go to our text editor. And let's open functions.php and let's write this code here now. And then we will

37
03:07.360 --> 03:15.220
see if we'll have to create a separate folder for it. So our shortcode we decided it will be called 

38
03:15.220 --> 03:17.080
"_themename_button".

39
03:17.170 --> 03:26.060
So to define the shortcode we're gonna call a function called add_shortcode(). And this function will take

40
03:26.440 --> 03:30.750
the shortcode name and the function that will run once

41
03:30.920 --> 03:36.940
a shortcode is found in your content. So let's call it the same name.

42
03:37.030 --> 03:45.600
"_themename_button". And then let's define this function. And this function will receive the attributes and

43
03:45.600 --> 03:48.740
the attributes are the things that we paste here.

44
03:48.800 --> 03:50.220
Right?

45
03:50.270 --> 03:57.430
So let's actually var_dump() and just make sure what the attributes will look like.

46
04:02.330 --> 04:07.460
And we have an array with "color" and "text". So great.

47
04:07.460 --> 04:13.700
So the first thing you have to do when you create a shortcode is to define some default attributes

48
04:13.700 --> 04:21.790
for your shortcode. So to do that let's call a function called shortcode_ atts(). And the first argument

49
04:21.790 --> 04:25.010
will be an array of default attributes.

50
04:25.060 --> 04:32.070
And the second argument will be the attributes that the user passed for this shortcode which are in our

51
04:32.080 --> 04:33.020
case

52
04:33.390 --> 04:37.570
these ones. So let's define the defaults.

53
04:37.600 --> 04:49.960
So we have the "color". And let's say the color is, I don't know, "red". And the "text" and let's default it to "Button".

54
04:50.420 --> 04:52.700
So this function will return another array.

55
04:52.730 --> 04:57.410
So let's see. Let's var_dump() what will be returned from this function

56
05:01.990 --> 05:05.870
And as you can see it returns the color and the string that are here.

57
05:06.120 --> 05:15.310
But let's say the user did not provide this attribute for example, the color. And let's refresh here.

58
05:16.140 --> 05:21.850
And as you can see the shortcode_atts() function will return the color as the default color and

59
05:21.850 --> 05:25.020
the text as the text that was passed here.

60
05:25.380 --> 05:32.760
So the shortcode_atts() function we'll just see what the user provided and what are the defaults

61
05:32.930 --> 05:37.180
and then produce an array that will be the product of both.

62
05:37.180 --> 05:44.370
Also one thing that is common when writing shortcodes is to use the extract() function for the shortcode_atts()

63
05:44.370 --> 05:49.830
function. And the extract() function will just convert the array into normal PHP variables.

64
05:49.830 --> 05:57.480
So for example now here anywhere we can use color and we can use text instead of, you know, saving the

65
05:57.630 --> 06:02.400
shortcode attributes an array and then accessing the color in this array,

66
06:02.430 --> 06:05.680
like so. Right?

67
06:05.740 --> 06:06.130
So

68
06:08.910 --> 06:12.140
short code functions should always return a value.

69
06:12.380 --> 06:18.210
You can not for example just echo some HTML here. You must return an HTML string.

70
06:18.440 --> 06:21.630
So let's do that, let's return.

71
06:21.740 --> 06:22.540
But before doing that

72
06:22.590 --> 06:27.870
one important note also. Attributes should always be in lowercase.

73
06:27.870 --> 06:32.740
You cannot use uppercase or camel case in the attribute names.

74
06:32.790 --> 06:34.530
Right?

75
06:34.710 --> 06:45.200
So let's return a button with a "style". And style will have "background-color" and then we will concatenate our

76
06:45.200 --> 06:45.500
color.

77
06:49.320 --> 06:55.220
And then the $text and then close the bottom tag.

78
06:55.250 --> 06:58.320
Of course this is a simple shortcode.

79
06:58.670 --> 07:03.420
You also might have a lot of attributes and stuff like that. But let's keep it simple for now.

80
07:04.660 --> 07:11.040
So let's see now. And as you can see we now have a button with the background and the text.

81
07:11.230 --> 07:18.170
We've done something wrong however. We did not escape the color and the text. Shortcode also requires

82
07:18.190 --> 07:22.160
that you escape any variable that you used in your content.

83
07:22.330 --> 07:30.440
So the color is an HTML attribute, so let's "esc_attr($color)".

84
07:31.120 --> 07:34.110
And the $text is inside of an HTML tag.

85
07:34.130 --> 07:36.670
So let's "esc_html($text)".

86
07:39.870 --> 07:43.930
And now we have created our first shortcode.

87
07:43.950 --> 07:46.050
Now let's create another one.

88
07:47.070 --> 07:52.390
And I'm gonna create this other one for a certain reason that you will see in the next lecture.

89
07:52.470 --> 07:53.010
Let's create

90
07:53.040 --> 07:54.320
an icon shortcode.

91
07:59.190 --> 08:05.650
And let's say the icon will receive one attribute the "icon" class name and this will be an icon class name

92
08:05.680 --> 08:13.180
from Font Awesome that we've already loaded. And then it will load an I tag with the class

93
08:17.420 --> 08:18.400
for this icon.

94
08:18.410 --> 08:22.840
So class and then the $icon here.

95
08:29.500 --> 08:32.710
And icons also get an "aria-hidden" attribute.

96
08:36.330 --> 08:37.370
So remember when we use the

97
08:37.420 --> 08:48.030
icon Font Awesome in the search form I think. We used these classes. So this was would be provided to the shortcode and

98
08:48.120 --> 08:51.630
it will render the I tag. So let's try this.

99
08:51.630 --> 08:52.290
Let's go 

100
08:52.290 --> 08:52.480
here

101
08:52.500 --> 08:53.070
and

102
08:56.130 --> 08:59.670
"_themename_icon".

103
09:08.550 --> 09:14.250
And let's see now. And we have typo in esc_attr().

104
09:21.890 --> 09:25.550
And I think we forgot to close the I tag properly, sorry.

105
09:31.000 --> 09:34.650
So now we have a button and an icon. Let's see what we can do more

106
09:34.650 --> 09:36.160
with shortcodes in the next lecture.