WEBVTT

0
00:03.050 --> 00:09.160
So let's now create our first task which will compile SASS to CSS and minify

1
00:09.420 --> 00:20.480
CSS. So I'm gonna now rename the "hello" dummy task to "styles". And so we can write our logic here.

2
00:21.730 --> 00:29.450
Let's now create a new SASS file. And this will be the file that we want to compile.

3
00:29.560 --> 00:37.520
So let's call it bundle.scss. So it will be just one single file that we will compile.

4
00:37.730 --> 00:44.090
And if you want to you know organize your files into multiple SASS files we can just import them into

5
00:44.090 --> 00:44.910
the bundle

6
00:45.060 --> 00:45.370
.scss.

7
00:45.440 --> 00:53.480
So for example we can have a folder called components.

8
00:53.760 --> 00:55.880
And again I created a file.

9
01:06.270 --> 01:13.470
And let's say inside of it you've some sort of a component. Maybe you want to add the header styles in a

10
01:13.470 --> 01:17.790
separate file. So we have our SASS file for the header.

11
01:22.680 --> 01:29.300
And we can just include it in the bundle file in order to have one file to compile.

12
01:31.250 --> 01:35.860
So in the same directory search for components

13
01:38.790 --> 01:40.530
and then header.

14
01:47.020 --> 01:52.400
So now we need to compile this bundle.scss file into bundle.css file.

15
01:53.980 --> 01:58.270
So let's write our task now. So Gulp itself,

16
01:58.300 --> 02:03.720
it helps us create tasks but it doesn't actually do the jobs we need.

17
02:03.740 --> 02:11.020
It doesn't actually compile the SASS and that's and that sort of stuff. We need to install the additional

18
02:11.030 --> 02:12.280
packages in order to do that.

19
02:12.280 --> 02:15.320
So I search for "gulp sass",

20
02:22.440 --> 02:23.800
and install it.

21
02:32.090 --> 02:39.210
And it might take a while and after it's done, we can see how to use it here.

22
02:40.520 --> 02:45.530
So let's go back now to our gulpfile and try to use this task library.

23
02:45.600 --> 02:50.350
Some I'm gonna import it. "import sass from 

24
02:53.340 --> 02:54.350
'gulp-sass'".

25
02:58.100 --> 03:05.000
So remember when we created a dummy task we used  this done() signal in order to tell Gulp when the task

26
03:05.000 --> 03:07.090
is done.

27
03:07.340 --> 03:15.230
In our case we won't have to use that. Because we will return a Gulp a no stream. And a no stream

28
03:15.230 --> 03:18.420
is just the representation for the, for a file.

29
03:19.220 --> 03:27.680
So if we type "gulp.src" and then a path for a file.

30
03:27.900 --> 03:31.590
So in our case it's "src/" and

31
03:34.610 --> 03:44.740
then "assets/scss" and then "bundle.scss".

32
03:44.950 --> 03:51.590
So this function will return a kind of representation for the file in this path.

33
03:51.780 --> 03:53.420
And it's called a stream.

34
03:53.430 --> 03:58.700
And if you know about node.js you might heard about this before but you know the details are not important.

35
03:58.860 --> 04:02.810
It's just enough to know that this is a representation for the file.

36
04:02.840 --> 04:05.430
And now we want to do some sort of a transformation to this file,

37
04:05.470 --> 04:05.870
right?

38
04:05.880 --> 04:12.030
We want to take scss file and compile it. And to do that we use another function called

39
04:12.030 --> 04:13.340
pipe().

40
04:13.410 --> 04:20.090
So ".pipe()". And inside the pipe() function we'll run the SASS package.

41
04:20.270 --> 04:22.140
So "sass()".

42
04:23.210 --> 04:26.030
And it takes an error callback.

43
04:26.310 --> 04:37.330
So if you have a syntax error in your SASS files, you can log it in the console. "sass.logError".  And

44
04:37.350 --> 04:40.610
pipe() also returns the same representation for the file

45
04:40.650 --> 04:45.030
but after you know, you've done the transformation, you've done the SASS plugin.

46
04:46.020 --> 04:48.580
So now we need to save it somewhere.

47
04:48.990 --> 04:58.890
So to do that we'll use pipe() also. And then we use something called "gulp.dest" for destination and

48
04:58.890 --> 05:03.370
then type the destination path we want to save the file in.

49
05:03.450 --> 05:10.410
So it's a convention to save the compiled files in a folder called "dist" for distribution.

50
05:11.980 --> 05:17.540
And then we follow the same path as we created in the source folder.

51
05:17.560 --> 05:23.830
So "dist/asset/scss" or "css" this time.

52
05:26.970 --> 05:29.830
So let's try and run now and see what will happen.

53
05:31.310 --> 05:33.830
So I'm gonna run "gulp styles "

54
05:37.710 --> 05:38.900
And we've an error here.

55
05:38.940 --> 05:40.700
Ok.

56
05:40.810 --> 05:42.760
So let's comment this out for now.

57
05:46.890 --> 05:53.610
So as you can see "Starting styles" , "Finished styles". So let's go to the folder and see if it

58
05:53.610 --> 05:56.110
created the compiled file.

59
05:56.400 --> 06:04.750
As you can see you have the dist folder now. And asset, css and the compiled CSS file. So let's type actually

60
06:04.950 --> 06:07.910
some CSS in order to make sure that it is working properly.

61
06:08.220 --> 06:15.280
So inside the header file which we include in the bundle I'm gonna type some CSS.

62
06:22.950 --> 06:25.060
And then run

63
06:25.500 --> 06:26.660
the Gulp task again.

64
06:30.910 --> 06:36.250
And now we have the in the bundle.css the compiled version.

65
06:36.250 --> 06:38.410
So let's do the minification now.

66
06:39.400 --> 06:44.740
And for that I'm gonna use another package called "gulp clean css".

67
06:55.920 --> 06:56.920
So let's install it.

68
07:09.840 --> 07:11.070
And then use it.

69
07:13.870 --> 07:18.390
So in the gulpfile let's "import

70
07:21.460 --> 07:25.240
cleanCSS from

71
07:28.210 --> 07:31.850
'gulp-clean-css'".

72
07:32.030 --> 07:37.160
And then after the SASS compiling, we'll do another transformation.

73
07:37.240 --> 07:38.370
".pipe()"

74
07:38.800 --> 07:49.960
and then "cleanCSS()". And it takes some arguments it can take a "compatibility" and it takes a minimum browser

75
07:49.990 --> 07:50.870
to support.

76
07:51.070 --> 07:56.180
So I'm gonna type "ie8". So let's save and run the task again

77
07:58.720 --> 08:07.420
"gulp styles". And let's see what happened to the bundle.css. And it's minified as you can see.

78
08:08.020 --> 08:15.940
So as we mentioned we won't have to do the minification during development. So we did this production

79
08:15.940 --> 08:20.530
flag and now we need to use it. We need to add some if condition here.

80
08:20.900 --> 08:28.450
If you are, if you are in production minify the CSS otherwise just skip this part. And to do that we will

81
08:28.450 --> 08:33.720
have to add another package called "gulp if".

82
08:33.730 --> 08:43.130
So "gulp if" will simply allows to do something in the pipe() function depending on certain conditions. So,

83
08:43.180 --> 08:44.230
so let's install it.

84
08:44.260 --> 08:52.130
It's called "gulp if". So "npm install gulp-if --save-dev".

85
09:01.680 --> 09:02.930
and then we'll import it.

86
09:18.670 --> 09:20.650
And to use inside the pipe() function

87
09:20.660 --> 09:29.060
we just have to instead of just running "cleanCSS()" directly we'll run "gulpif()" and then add the condition which

88
09:29.060 --> 09:29.930
is PRODUCTION.

89
09:29.960 --> 09:34.990
If production is true, run "cleanCSS()".

90
09:35.300 --> 09:40.750
So the second argument is the function that we want to run if the first argument is true.

91
09:41.180 --> 09:52.730
So let's try this. So let's run  "gulp styles" without the production flag and as you can see it's not

92
09:52.890 --> 09:53.780
minified.

93
09:54.440 --> 09:57.350
And if we type --prod,

94
10:00.200 --> 10:03.180
now it's minified. Great.

95
10:03.180 --> 10:05.790
So let's load now the CSS in the theme.

96
10:06.100 --> 10:09.920
So go to the WordPress stuff for a bit.

97
10:09.970 --> 10:17.500
So remember in the header file when we said we mentioned that we will use the head, wp_head() 

98
10:17.510 --> 10:29.710
and the wp_footer() functions in order to enqueue in order to add JavaScript files and CSS files.

99
10:29.790 --> 10:31.320
That's exactly what we're gonna do now.

100
10:31.320 --> 10:42.360
So in the functions.php. So let's keep it organized this. Let's add another file to add our

101
10:42.380 --> 10:43.280
scripts.

102
10:43.640 --> 10:54.110
So I'm gonna call it enqueue-assets.php. And let's copy the name and create this file in the lib folder.

103
11:00.250 --> 11:07.140
I'm gonna open PHP tag and create a new function.

104
11:07.360 --> 11:15.310
So remember in the helpers file we mentioned that all our functions must be prefixed, right? So I'm gonna do the

105
11:15.890 --> 11:18.910
prefix and then function name.

106
11:18.910 --> 11:30.820
And let's call it simply assets. And then to add a style sheet with a function called wp_enqueue_style().

107
11:30.900 --> 11:38.310
So the first argument is the handle or the this is the unique name for the style sheet. And it should

108
11:38.310 --> 11:40.010
also be prefixed.

109
11:40.110 --> 11:50.630
So let's use the "firsttheme" prefix and then "stylesheet".

110
11:50.680 --> 12:00.140
So this should be unique and then the source which is the path for the file. And a path for the file would

111
12:00.160 --> 12:08.140
be the "dist/asset/css/bundle.css". So we'll get the theme directly using a function called get_template_

112
12:09.570 --> 12:10.620
directory_

113
12:10.810 --> 12:12.450
uri().

114
12:13.930 --> 12:23.990
And then append it with our path which is "dist/assets/css/bundle.css".

115
12:29.780 --> 12:32.860
And then we can have an array of dependencies.

116
12:33.080 --> 12:35.230
We can leave it as an empty array for now.

117
12:36.240 --> 12:44.590
And media as css media query. We want to rather for all media queries so let's type "all".

118
12:44.930 --> 12:48.560
And then we'll use a function called add_action().

119
12:51.770 --> 12:54.370
And we'll talk more about add_action() later.

120
12:54.770 --> 13:03.890
But what that add_action() will do is just simply will use the wp_head() and the wp_footer() hooks

121
13:03.950 --> 13:06.330
in order to add something to them.

122
13:07.540 --> 13:09.280
It just sounds you know vague to you.

123
13:09.280 --> 13:12.550
We'll talk about later more details in the course. That's just for now.

124
13:12.550 --> 13:18.550
The first arguments is the action name which is "wp_enqueu_

125
13:23.110 --> 13:23.730
scripts"

126
13:26.940 --> 13:30.010
and then the function name which is this one.

127
13:33.840 --> 13:34.570
And don't worry

128
13:34.670 --> 13:39.360
as I mentioned we'll talk about the add_action()  function later.

129
13:39.610 --> 13:43.590
But right now it should be, it should work.

130
13:43.600 --> 13:49.760
So let's go back to the browser and actually have the MAMP server opened and go to your theme.

131
13:52.240 --> 13:55.420
And looks like it's not loaded

132
13:55.420 --> 13:57.040
so let's take a look.

133
13:57.350 --> 13:58.450
Oh, it is loaded actually

134
14:01.890 --> 14:05.330
Ok, I mistyped bundle here.

135
14:05.420 --> 14:06.390
Sorry about that.

136
14:17.480 --> 14:24.420
Ok, so I realized that we've done another mistake in the gulpfile. I typed "asset" here instead of "assets".

137
14:24.980 --> 14:37.320
So let's correct that and the run the "gulp styles" task again. And it should work this time.

138
14:37.380 --> 14:47.040
So it looks like I did another mistake in the enqueue scripts function enqueue_style after the array

139
14:47.040 --> 14:47.840
of dependencies

140
14:47.880 --> 14:56.250
we have a diversion before the media query. So I'm gonna type version 1. And I hope it will work

141
14:56.250 --> 14:57.440
this time.

142
14:58.140 --> 15:04.840
So I realize another mistake in the SASS file.

143
15:07.830 --> 15:15.800
The body just is not a class it's the element so rerun the task.

144
15:16.440 --> 15:18.780
It should work this time pretty sure.

145
15:19.230 --> 15:19.920
And finally.