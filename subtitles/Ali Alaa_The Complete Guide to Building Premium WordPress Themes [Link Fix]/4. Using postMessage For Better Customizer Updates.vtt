WEBVTT

0
00:03.070 --> 00:10.090
So in the last lecture we've added this field. And we had this issue of annoying refreshing the whole iframe

1
00:10.270 --> 00:10.570
thing.

2
00:10.570 --> 00:19.300
Whenever we change a single character. So let's go back to the guide here. And we took a look at this

3
00:19.300 --> 00:25.240
in the first lecture this diagram. And we saw that we have something called Transport and it could

4
00:25.240 --> 00:28.360
be Refresh or Selective Refresh or postMessage.

5
00:28.380 --> 00:33.450
So refresh is the default option which as you saw refreshes the whole iframe.

6
00:33.530 --> 00:37.300
So let's see the other options. So let's start by the postMessage.

7
00:37.480 --> 00:38.620
So let's go back to the code

8
00:38.620 --> 00:46.240
and in the where we added setting let's add a new option called "transport"

9
00:50.590 --> 00:55.250
and the variable be "postMessage".

10
00:55.900 --> 00:58.390
And let's see now what will happen.

11
00:58.840 --> 00:59.660
So let's refresh.

12
01:03.800 --> 01:07.070
And we are talking and it's not refreshing.

13
01:07.280 --> 01:09.370
But it's not changing here as well.

14
01:09.560 --> 01:15.470
So the way postMessage works is by allowing communication between the settings panel and the iframe

15
01:15.470 --> 01:19.390
here using a JavaScript technique called postMessage.

16
01:19.520 --> 01:24.950
And this technique allows cross origin communication between two windows or a window and iframe.

17
01:24.950 --> 01:29.350
You can read about more if you want. But you don't really have to. We'll learn how to use it.

18
01:29.540 --> 01:31.360
For our case we just need to know JavaScript.

19
01:31.360 --> 01:33.800
You don't need any other special skills for that.

20
01:33.800 --> 01:39.320
So how this works is whenever we change something here it will fire an event in the iframe. And then

21
01:39.320 --> 01:45.500
we can add an event listener to listen to this event and do something whenever this field is changed.

22
01:45.500 --> 01:52.730
So to do that we need to write our JavaScript in a special file so we can't just edit in the this admin file.

23
01:52.730 --> 01:59.180
It needs to be enqueued in a certain way. So lets add a new file in the js folder and let's call it "customize

24
02:00.560 --> 02:02.090
customize-preview.js".

25
02:02.710 --> 02:08.180
But now we'll have to modify the gulpfile in order to watch for this file. 

26
02:08.180 --> 02:21.400
So let's add another one and same paths just different file name. So "customize-preview". So whenever you change

27
02:21.400 --> 02:26.020
something in the gulpfile you need to rerun the "npm start".

28
02:26.020 --> 02:28.480
So let's rerun it.

29
02:32.610 --> 02:36.010
And then let's see how to enqueue this file.

30
02:36.070 --> 02:39.620
So let's go to enqueue-assets in the lib folder.

31
02:39.990 --> 02:49.540
So the admin_enqueue_scripts won't work in our case. We need a new action. And this action is called "customize_preview

32
02:49.920 --> 02:56.850
"customize_preview_init". And it takes a function of course so let's add a function that we will create in a

33
02:56.850 --> 02:57.240
moment.

34
02:57.240 --> 03:03.630
So "_themename_customize_preview_js"

35
03:07.760 --> 03:08.620
So let's create this function.

36
03:15.280 --> 03:17.220
And here we'll enqueue a script

37
03:17.230 --> 03:18.590
normally like any other script.

38
03:18.640 --> 03:26.810
So "wp_enqueue_script" and the handle "_themename-customize-preview".

39
03:30.360 --> 03:44.310
And the source and this would be "get_template_directory_uri()" and then "/dist/assets/js

40
03:44.310 --> 03:52.150
customize-preview.js". And we've an array of dependencies.

41
03:52.560 --> 03:53.630
And this is important.

42
03:53.730 --> 03:59.490
Here we need to add a dependency called "customize-preview".

43
04:03.110 --> 04:04.940
And also we'll need "jquery"

44
04:08.700 --> 04:09.620
and then the version.

45
04:13.060 --> 04:16.540
And then "in_ footer" and let's set this to "true".

46
04:16.630 --> 04:23.990
So inside this file now we can write our event handlers for the Customizer. So let's open this file.

47
04:25.020 --> 04:33.460
And let's import jQuery. So WordPress adds a global JavaScript variable called wp.

48
04:33.770 --> 04:39.520
So let's "console.log(wp)". And let's see what that looks like.

49
04:41.100 --> 04:48.350
So let's inspect and refresh.

50
04:48.380 --> 04:51.020
So this is it, coming from the customize-preview file.

51
04:51.610 --> 04:57.830
And it contains a lot of JavaScript APIs that WordPress made available globally. So the one we need to

52
04:57.830 --> 04:59.850
use is customize.

53
04:59.850 --> 05:03.230
So let's use now this customize API.

54
05:04.310 --> 05:11.410
So this will take the first argument is the setting ID which in our case is "_themename_

55
05:11.570 --> 05:17.600
"_themename_site_info" and the callback function will get passed a value and the value will

56
05:17.600 --> 05:20.400
represent this field.

57
05:21.350 --> 05:27.600
So now we have this value and this is not the value of the of the text here.

58
05:27.670 --> 05:31.390
This is a JavaScript object that represents this control here.

59
05:31.600 --> 05:34.320
So we can run events on it, so.

60
05:34.780 --> 05:36.900
So let's call ".bind".

61
05:36.910 --> 05:43.720
So now we are listening to change events for this input. And in the callback function

62
05:43.720 --> 05:49.750
we have an argument called "to". So let's now "console.log(to)".

63
05:52.560 --> 05:56.400
And "to" is the value that the user typed.

64
05:56.400 --> 06:06.400
So let's reload and let's inspect.

65
06:06.840 --> 06:12.940
So as you can see whenever we change the value we have the updated value in the "to" variable.

66
06:13.650 --> 06:15.500
So this is how you listen for changes.

67
06:15.500 --> 06:18.660
First use the "customize" to get this value object.

68
06:18.690 --> 06:21.930
And then this value object you can run events on it.

69
06:21.930 --> 06:30.060
So now that we have this value we can now target some classes here. And using jQuery we can manipulate

70
06:30.600 --> 06:31.930
its value.

71
06:31.950 --> 06:35.580
So let's copy the class for the text-info.

72
06:38.540 --> 06:47.430
And we have jQuery imported so, we can use jQuery to target this class and then change its HTML. And 

73
06:47.430 --> 06:48.780
just put the value.

74
06:52.600 --> 07:01.040
So let's check now.

75
07:01.480 --> 07:04.180
And as you can see it changes immediately.

76
07:04.420 --> 07:04.980
So that's great.

77
07:04.990 --> 07:15.820
But one drawback for this is that now if we type, let's add a B tag which is for bold and now it's added and it appears

78
07:15.820 --> 07:21.130
here. But it won't really represent what this will look like after savings. So after saving we will

79
07:21.130 --> 07:24.430
run through the sanitization functions and all that sort of stuff.

80
07:24.490 --> 07:29.490
And if we refresh now the bold tag is removed.

81
07:29.800 --> 07:35.680
So this one drawback of the postMessage technique that if you use it you will have to make sure that

82
07:36.010 --> 07:41.490
any PHP logic that happens to this text here it will have to be duplicated in the JavaScript.

83
07:41.680 --> 07:43.540
And this is not a good practice.

84
07:43.540 --> 07:46.600
So this might work for a small text like this.

85
07:46.600 --> 07:52.700
We can try to duplicate the sanitization but for a more complicated option this may become almost impossible.

86
07:53.020 --> 07:56.700
So let's try and duplicate this in JavaScript.

87
07:56.760 --> 08:02.480
So inside the js folder I'm gonna create a new folder and call it helpers.

88
08:04.450 --> 08:14.440
And then inside this folder I'm gonna create a new file and call it strip-tags.js. And here I'm gonna paste

89
08:14.440 --> 08:22.390
a function that I got from a Stack Overflow. And this function will actually strip all tags and like

90
08:22.390 --> 08:28.300
the wp_kses() it takes an input and some allowed tags. So I'm exporting this function.

91
08:28.350 --> 08:43.990
So let's now import it in the customize-preview file. So I'm gonna "import strip_tags from './helpers/strip-tags'".

92
08:47.210 --> 08:49.020
And now I can run this function here.

93
08:51.900 --> 08:56.720
So it takes the first argument the text and the second argument an A tag.

94
08:57.350 --> 09:01.540
So as you may notice in the PHP function we had more options. 

95
09:01.560 --> 09:07.830
But you can't choose attributes and stuff like that. But here we are trying just to mimic the PHP function as much

96
09:07.830 --> 09:09.270
as possible.

97
09:09.390 --> 09:15.510
So this might be ok here but for some more complicated cases it would be a lot of work to duplicate

98
09:15.510 --> 09:17.960
the PHP to JavaScript.

99
09:18.000 --> 09:20.310
So let's just check it now.

100
09:26.320 --> 09:37.530
And let's add a B tag and now as you can see it's removed directly using JavaScript.

101
09:37.560 --> 09:43.620
So as I mentioned this might be fine for this kind of situation but for more complicated situations

102
09:44.040 --> 09:46.180
we might need to see another solution.

103
09:46.210 --> 09:48.550
That's what we will do in the next lecture.

104
09:48.600 --> 09:56.760
But before that let's see something. Let's try, edit the site title here. And let's add some text. As you

105
09:56.760 --> 10:00.000
can see it also refreshes the whole thing.

106
10:00.000 --> 10:08.080
So I just want to point out that you can change these settings for already existing settings. So 

107
10:08.070 --> 10:09.570
let's go to customize and

108
10:13.260 --> 10:18.030
$wp_customize class will have a function called get_setting()

109
10:21.350 --> 10:23.810
So this setting is called blog name and you can tell by

110
10:27.010 --> 10:29.410
inspecting and seeing these values.

111
10:29.440 --> 10:31.080
I'm sure there's a better way to do it.

112
10:31.160 --> 10:37.560
But anyways, so we now have the setting object for this setting.

113
10:37.750 --> 10:41.760
And you can change some stuff in it. So we can change the "transport"

114
10:44.630 --> 10:51.490
to "postMessage".

115
10:51.510 --> 10:52.260
And now if we save

116
10:58.430 --> 11:00.630
and change it, it won't refresh.

117
11:01.850 --> 11:04.800
And that's because we need to add the JavaScript callback.

118
11:04.910 --> 11:13.640
So let's add another one real quick here. So let's actually copy this one to save some time.

119
11:14.870 --> 11:22.000
And change this to "blogname". And my class for the header text is called "c-site-header__

120
11:22.650 --> 11:32.380
"c-site-header__blogname". And we don't need this strip any tags here.

121
11:32.550 --> 11:34.310
And let's see now.

122
11:37.380 --> 11:39.600
And now it's changing directly.

123
11:39.810 --> 11:46.200
So this is fine but it's also a bit risky because you don't know what WordPress does before it outputs

124
11:46.260 --> 11:48.430
the blog title here.

125
11:48.720 --> 11:53.190
So you already know that these kind of functions maybe already running through PHP filters and stuff

126
11:53.190 --> 11:54.140
like that.

127
11:54.250 --> 11:56.670
So in the next lecture let's discover another way

128
11:56.730 --> 12:04.200
that is a bit of a compromise between refreshing the whole iframe and using JavaScript's to duplicate

129
12:04.290 --> 12:05.240
the logic.

130
12:05.430 --> 12:06.330
So see you in the next lecture.