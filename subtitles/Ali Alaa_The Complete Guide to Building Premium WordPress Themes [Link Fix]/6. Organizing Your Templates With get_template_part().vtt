WEBVTT

0
00:02.650 --> 00:09.630
In this lecture we'll learn how to use a function called get_template_part() in order to organize our theme files and

1
00:09.630 --> 00:12.200
also make it more child theme friendly.

2
00:12.420 --> 00:15.380
Remember this hierarchy chart.

3
00:15.780 --> 00:18.610
Currently we only have the index.php template file.

4
00:18.720 --> 00:25.820
Right? Imagine now we need to create an archive page that will be the default template for the author or the

5
00:25.830 --> 00:32.690
category or the data and tags and so on pages. So we can create each one of these separately.

6
00:32.940 --> 00:35.200
But let's now create a general

7
00:35.300 --> 00:39.490
archive.php page to display all of these. So

8
00:43.060 --> 00:47.960
in my folder now I'm gonna create a new file called archive.php

9
00:54.670 --> 00:55.690
Let's save.

10
00:55.750 --> 01:03.680
And now if we go to some category, actually have the categories here.

11
01:04.240 --> 01:06.710
So let's go to this one.

12
01:06.860 --> 01:10.890
And now we have a blank page because we have a blank archive.php.

13
01:11.010 --> 01:15.600
So what we need to put in archive.php is mainly the same as index.php.

14
01:15.760 --> 01:22.240
We need to look through the posts and display the pagination and a sidebar and pretty much the same, right?

15
01:22.370 --> 01:29.580
So let's copy this and paste it  in archive.

16
01:29.670 --> 01:33.370
Now we have the only post with this category, right?

17
01:33.510 --> 01:39.330
So maybe the only difference we want to add here is maybe add the category title before the posts. So

18
01:39.350 --> 01:50.280
let's go to the archive and let's add another row here. And it will span 12. So let's copy this and close it.

19
01:53.460 --> 02:02.370
And then this should be the pages header too, we can use HTML5 HEADER tag here and put the title of the

20
02:02.850 --> 02:14.540
category. So to do that we use the WordPress function called the_archive_title() and it takes before and after

21
02:14.540 --> 02:16.800
so we can wrap it in H1 tag.

22
02:27.840 --> 02:28.860
We can also add the

23
02:32.060 --> 02:33.570
description.

24
02:34.280 --> 02:41.180
Any category or tag can have a description so we can add a title and wrap it in a P tag

25
02:49.850 --> 02:55.270
So now we have the category or the archive title in the page here.

26
02:55.510 --> 02:56.920
So now we have 2 pages.

27
02:56.920 --> 03:06.100
The index. Let's open this in a new tab. We've the category page and the index page. And they're pretty much the

28
03:06.100 --> 03:08.340
same except that we have the title here.

29
03:08.800 --> 03:15.220
So we're kind of repeating some code here and it's not a best practice. So what we can do is we can go to

30
03:15.220 --> 03:18.730
index and then copy the loop

31
03:21.450 --> 03:25.450
or cut it. And then create a new file.

32
03:25.610 --> 03:28.740
Let's call it loop.php.

33
03:32.350 --> 03:33.070
And then paste.

34
03:38.240 --> 03:41.990
And now we've created first template part.

35
03:41.990 --> 03:50.940
So after all this chunk of code now in the index.php, we might say we can use PHP require or include functions

36
03:51.660 --> 03:53.480
but you should never do that.

37
03:53.550 --> 03:56.690
WordPress have a built in function called get_template_part()

38
04:00.950 --> 04:08.110
where you can load template parts. So it takes two arguments, a slug and a name so let's ignore this name

39
04:08.110 --> 04:08.820
for now.

40
04:09.100 --> 04:13.510
We'll see this in a moment and the slug is just the part of the file.

41
04:14.090 --> 04:14.720
So "loop".

42
04:19.990 --> 04:29.590
And let's see in our index.php. And it's the same. So what you can do is you can actually use this line

43
04:29.590 --> 04:35.060
here in the archive page and remove the loop from here.

44
04:39.760 --> 04:41.880
So that's a huge improvement, right?

45
04:41.900 --> 04:45.970
So that's the category page now and it's still the same.

46
04:45.970 --> 04:51.160
So using get_template_part() allow us to reuse our code here.

47
04:51.160 --> 04:53.330
So we didn't have to write the loop twice.

48
04:54.010 --> 04:56.140
And it's also child theme friendly.

49
04:56.200 --> 05:04.610
So I mentioned when using the get_template_part() that you shouldn't use PHP's require or include.

50
05:04.900 --> 05:11.320
And the reason is that get_template_part() will look first for a file called loop.php in your child theme.

51
05:11.560 --> 05:14.480
And if it's not found it will fall back to the parent theme.

52
05:14.680 --> 05:18.750
So imagine some other developer wants to modify something in your loop.

53
05:18.760 --> 05:24.280
Now he'll have to only create a file called loop.php in his child theme instead of creating the whole

54
05:24.340 --> 05:29.390
archive page and copying this whole thing just to modify something in the loop.

55
05:29.410 --> 05:32.950
So let's try this. Let's add the, add our child theme in the

56
05:35.940 --> 05:37.570
child theme folder into our workspace.

57
05:40.220 --> 05:43.370
And make sure you have your child theme active.

58
05:43.450 --> 05:47.980
And now let's create a new file and let's call it loop.php.

59
05:50.820 --> 05:52.800
And let's type some text.

60
05:55.890 --> 05:58.280
And let's see what happens.

61
05:58.320 --> 06:04.560
So as you can see get_template_part() with search for the loop.php in your child theme first. And if that's not

62
06:04.560 --> 06:11.950
found it will fall back to your original parent's theme loop.php. So that will make a child theme customization

63
06:11.970 --> 06:13.570
a lot easier for developers.

64
06:15.280 --> 06:16.600
So let's now talk about the

65
06:20.270 --> 06:21.660
second argument of get_template_

66
06:21.710 --> 06:26.610
part(). So I've mentioned that the first argument is the path to your template.

67
06:26.840 --> 06:32.630
In some cases you might need to consider this template as a generic template that can have a more specialized

68
06:32.630 --> 06:33.690
template.

69
06:34.220 --> 06:39.890
So for example let's imagine you want to allow child theme developers to create different loop files for the

70
06:39.890 --> 06:42.430
archive and the index.

71
06:42.440 --> 06:48.230
Right now the child theme developer will only have the choice to override the loop file and this will get

72
06:48.230 --> 06:51.370
loaded for both the archive and the index.

73
06:51.500 --> 06:59.810
So to give more flexibility you can add a second argument here. And let's call this "archive".

74
07:00.030 --> 07:03.810
And the second argument here. And let's call it "index".

75
07:06.640 --> 07:12.970
What this will do is that it will give you the option to create a file called "loop-index" and that's

76
07:12.970 --> 07:14.300
what will get loaded here.

77
07:14.620 --> 07:20.370
And if loop-index is not found it will fall back to loop. And same for here.

78
07:20.560 --> 07:26.460
If loop-archive is not found, it will fall back to loop. And in the case of a child theme get_template_

79
07:26.460 --> 07:30.060
part() with search for loop_archive in the child theme.

80
07:30.160 --> 07:34.480
And if not found it will search for loop.php in the child theme.

81
07:34.630 --> 07:40.620
And if that's not found it will search for loop-archive in the parent theme. And then just loop in the parent theme.

82
07:40.750 --> 07:42.270
So let's try this.

83
07:42.760 --> 07:55.120
Let's in the child theme create a new file called loop-archive.php. And let's call

84
07:55.150 --> 07:55.890
Let's write

85
07:55.900 --> 08:02.680
"child loop archive". And let's create another one.

86
08:09.180 --> 08:16.060
And lett's call it loop-index.php. And let's call, let's write

87
08:16.320 --> 08:21.240
"child loop index". And let's go now

88
08:24.360 --> 08:31.490
and in the index we have "child loop index" and in the archive we have "child loop archive".

89
08:31.590 --> 08:37.920
So now it's given to child theme developers the option to create a specific template for different template files like

90
08:37.920 --> 08:39.230
index and archive.

91
08:39.440 --> 08:43.890
Most of us use the generic loop that would be used for all the files.

92
08:44.100 --> 08:49.170
So I think this is a great concept and it can be very beneficial in your theme development.

93
08:49.230 --> 08:54.890
So let's see where we can use this concept in a couple of places in our theme so far.

94
08:55.650 --> 09:04.870
So in the, now in the loop.php in our parent theme we can actually create a template

95
09:04.880 --> 09:06.290
part here.

96
09:06.480 --> 09:13.330
So in the post part starting from the ARTICLE tag we can cut this and make this into a template.

97
09:13.460 --> 09:17.700
But now let's make it in a instead of just putting it in the root folder

98
09:17.700 --> 09:22.770
let's create a new folder. And call it "template-parts"

99
09:25.480 --> 09:29.650
And we probably have different templates for different places in the theme. So let's create another folder

100
09:29.700 --> 09:38.570
inside this one and let's call it  "post". And let's create a new file for our template and call it "content".

101
09:38.670 --> 09:42.820
So this will be the post content. So let's pasteour content here.

102
09:45.170 --> 09:53.090
And then let's load it using get_template_part(). So let's open a PHP tag and then get_template_part().

103
09:58.310 --> 10:12.180
And now we have our file "template-parts/post/content".

104
10:12.410 --> 10:16.470
So let's save and check if we've done anything wrong.

105
10:17.570 --> 10:21.400
And let's remove the child theme

106
10:23.250 --> 10:24.110
templates here.

107
10:41.230 --> 10:43.060
And everything's still fine.

108
10:43.480 --> 10:49.490
So what we've done now will be very beneficial when we come to the Post Formats section.

109
10:49.510 --> 10:55.630
If you're familiar with Post Formats it's a feature in WordPress that your theme can support that will allow

110
10:55.630 --> 11:00.640
users to choose different formats for the post and depending on that format you'll have to style

111
11:00.640 --> 11:02.040
your posts differently.

112
11:02.080 --> 11:07.750
So when we come to this we'll make use of the second argument here to make some special templates for

113
11:07.750 --> 11:09.410
the content template.

114
11:09.460 --> 11:10.310
So we'll come to this later.

115
11:10.340 --> 11:15.840
But what we can do now is we can create a template file for this part.

116
11:16.060 --> 11:18.300
So let's cut this.

117
11:18.390 --> 11:26.110
And in our template-parts folder, in the post let's create a new one called "content-none.php".

118
11:27.440 --> 11:34.850
And this is a specific template for the post content when there are no posts.

119
11:34.900 --> 11:45.610
So let's paste now and save and then load it using, can copy this line, and then just add a second argument

120
11:45.750 --> 11:46.170
"none".

121
11:49.040 --> 11:50.890
So let's try this Let's type

122
11:51.200 --> 11:58.270
maybe a category that doesn't exist. And we'll have no posts.

123
11:58.450 --> 12:05.260
So doing this will allow child theme developers to maybe override this template content-none, instead of just

124
12:05.260 --> 12:08.960
overriding the whole loop just to modify this part.

125
12:09.340 --> 12:11.190
So just to clarify this.

126
12:11.350 --> 12:20.240
Let's quickly create a new folder in our child theme and call it "template-parts". And another folder

127
12:21.260 --> 12:26.150
"posts" and a file "content"

128
12:26.330 --> 12:28.670
"content-none.php"

129
12:29.960 --> 12:31.360
And let's type "child

130
12:31.490 --> 12:34.610
none".

131
12:35.070 --> 12:40.490
And now this is what will be loaded when there are no posts.

132
12:40.510 --> 12:45.010
So finally one other place we can use get_template_part()

133
12:45.020 --> 12:49.770
for is our footer. So you see our footer

134
12:52.940 --> 12:54.090
has a lot of code.

135
12:54.110 --> 12:55.100
Right?

136
12:55.490 --> 13:01.790
And if a child theme developer needs to, you know, just override something very little here he'll have to copy

137
13:01.790 --> 13:04.440
his whole file and create a footer.php in the child theme.

138
13:04.490 --> 13:11.360
So let's create some template parts for different places here. So let's create a new folder inside the "template-parts"

139
13:11.360 --> 13:13.050
for the footer.

140
13:16.400 --> 13:26.700
And inside of it we'll need to create two templates for the widgets and for the site info.

141
13:26.830 --> 13:28.050
So let's create two files.

142
13:32.130 --> 13:38.590
"widgets.php" and "info.php".

143
13:41.930 --> 13:42.920
And we'll just copy

144
13:45.550 --> 13:46.880
the widgets part.

145
13:54.290 --> 13:57.550
And save. And cut the info part.

146
14:00.310 --> 14:03.180
in info.php.

147
14:04.680 --> 14:10.920
Just make sure you have the footer background variable in this file. So let's define it

148
14:14.660 --> 14:17.380
and as I told you these options will be dynamic later.

149
14:17.430 --> 14:25.260
So this will not be a problem. And let's finally load them using

150
14:25.650 --> 14:26.640
get_template_part()

151
14:34.050 --> 14:36.140
"template-files".

152
14:38.000 --> 14:51.790
Or "template-parts/footer/widgets" and we don't have a special template for this one. And let's

153
14:51.790 --> 14:54.700
duplicate and just type "info".

154
14:58.120 --> 15:06.190
And we still have everything in place but now it's more organized more easier for child theme developers to

155
15:06.190 --> 15:11.630
override just the info part or the widget part without having to recreate the whole footer.

156
15:11.770 --> 15:15.180
So I think that's it for Template Parts. Throughout the development

157
15:15.190 --> 15:19.830
we'll try to use it as much as we can because it's a really useful feature.

158
15:20.010 --> 15:20.980
Let's see you in the next lecture.