WEBVTT

0
00:00.120 --> 00:02.900
-

1
00:03.240 --> 00:10.840
So the final thing I want to talk about for the script part is including third party JavaScript plugins

2
00:10.890 --> 00:13.710
into website. So to do that,

3
00:13.740 --> 00:20.960
Normally what you would do is, especially if you're using a famous plugin like jQuery you'll find an

4
00:20.960 --> 00:30.660
NPM. So "npm install jquery"  and then this time we'll use "--save".

5
00:31.310 --> 00:39.530
And the difference is between "--save" and "--save-dev". --save used when you are installing

6
00:39.580 --> 00:44.560
plugins that you will use in your website, in your actual website. "--save-dev"

7
00:44.580 --> 00:49.910
however used when you are installing something that yo'll use during development like

8
00:49.990 --> 00:51.910
Gulp.

9
00:52.110 --> 01:00.210
All right? So let's install jQuery. And mistyped install.

10
01:07.020 --> 01:16.690
Now we installed the jQuery and in our package.json file now you will have it in a different key dependencies

11
01:16.830 --> 01:20.000
rather than "devDependencies".

12
01:20.050 --> 01:26.440
So as you know now any NPM package that we install  goes to the node_modules folder.

13
01:27.390 --> 01:30.260
So you can search here for jquery.

14
01:30.310 --> 01:31.320
So here it is.

15
01:31.360 --> 01:38.200
So you can open it and in this directory you'll find your jQuery source.

16
01:38.400 --> 01:39.040
Right.

17
01:39.060 --> 01:47.200
So you might think, ok I'mgonna go to the enqueue-assets and duplicate this file.

18
01:47.970 --> 01:52.510
And then here I'm gonna add "node_modules/jquery/" etc.

19
01:52.730 --> 01:53.350
Ok?

20
01:53.610 --> 01:55.110
But it's completely wrong.

21
01:55.740 --> 02:03.270
You shouldn't ever rely on the node_modules folder to exist in production. node_module folder is only

22
02:03.270 --> 02:06.740
used during development.

23
02:06.760 --> 02:16.180
So what we can do is actually we can go to our entry point or bundle. And import whatever libraries we

24
02:16.180 --> 02:17.690
want here.

25
02:18.640 --> 02:25.520
So "import "and when we import from node_modules we don't have to you know write the complete path to node_modules.

26
02:25.570 --> 02:26.800
We just type the library name.

27
02:26.800 --> 02:27.490
So "jquery".

28
02:30.710 --> 02:43.040
So let's save that and run "gulp scripts".

29
02:43.190 --> 02:47.290
And as you can see it's 1.1 MB file now which is big.

30
02:47.350 --> 02:52.250
And that's because we include the jQuery library inside of it.

31
02:52.250 --> 03:01.660
So if we go to dist and bundle you'll actually have the jQuery library inside of it.

32
03:02.480 --> 03:09.180
And the bundle file is the file that we will eventually include in the enqueue scripts, right?

33
03:09.190 --> 03:14.960
So you don't have to actually include it from the node_modules files, from the node_modules folder.

34
03:15.260 --> 03:20.690
We include everything we need in just one single file and enqueue this one single file.

35
03:21.100 --> 03:27.170
Ok. Some plugins however are actually included in WordPress core.

36
03:27.680 --> 03:42.750
So let's go to the "wp enqueue script" documentation. WordPress documentation. And you will find a table of all included

37
03:45.030 --> 03:48.750
JavaScript plugins.

38
03:48.880 --> 03:54.520
So whenever you include a JavaScript plugin to your website make sure first if it's already included

39
03:54.520 --> 04:02.230
in WordPress core. And if so you can check the table and check the handle here and includ it using "wp_

40
04:02.240 --> 04:03.100
enqueue_script".

41
04:06.250 --> 04:08.310
So actually jQuery is an exception here.

42
04:08.310 --> 04:17.510
We'll not include it through NPM. It is an actual requirement in WordPress and web sites like Theme Forest to

43
04:17.510 --> 04:24.270
never include your own jQuery version or actually any plugin that is actually included in the WordPress core.

44
04:26.470 --> 04:30.220
You should however include it using "wp_enqueue_script".

45
04:30.250 --> 04:35.300
So if we type here "wp_enqueue_script"

46
04:38.250 --> 04:45.810
and the handle this time will be "jquery". And we won't add any other parameters.

47
04:45.810 --> 04:52.700
"jquery" is an already existing handle in WordPress.

48
04:52.790 --> 04:56.540
Let's see in the browser now. Refresh

49
04:59.710 --> 05:01.020
and view the source.

50
05:04.750 --> 05:17.410
And let's search for "jquery". And as you can see we are now adding the jQuery version included in wp-includes

51
05:17.680 --> 05:20.410
folder which is the WordPress core.

52
05:20.680 --> 05:24.440
So this is the only way we should include plugins like jQuery.

53
05:24.670 --> 05:30.910
And the reason for that is that, if everyone, every theme developer and plugin developer include their own

54
05:30.910 --> 05:37.240
version of the jQuery, what end up with a website that contains multiple jQuery versions and that

55
05:37.240 --> 05:39.180
may cause problems.

56
05:39.910 --> 05:51.180
So if a theme developer like us used enqueue scripts in jQuery and then maybe a plugin developer used the

57
05:51.180 --> 05:58.110
same line WordPress will now from the handle, the unique handle will figure out that we should load jQuery only

58
05:58.110 --> 06:01.220
once. And that's the use of the of the handle.

59
06:01.260 --> 06:02.780
That's why it should be unique.

60
06:03.000 --> 06:05.440
So the bottom line is never do something like that.

61
06:05.450 --> 06:14.450
Like maybe create a new handle and then put a jQuery and link here and load another jQuery version

62
06:14.490 --> 06:21.420
other than the one included with WordPress. Another way to include jQuery is actually to put it as

63
06:21.420 --> 06:24.110
a dependency for our scripts.

64
06:24.420 --> 06:31.070
So in the array dependencies here I can put "query" and let's refresh the source.

65
06:32.860 --> 06:39.490
And we still have it. WordPress will make sure that any dependencies for any script that we load is loaded

66
06:39.820 --> 06:41.220
before that script.

67
06:41.510 --> 06:43.190
So we can use it inside the script.

68
06:43.330 --> 06:51.370
So let's go now to bundle. And let's comment this line and run "gulp scripts" again.

69
06:54.930 --> 07:03.960
And this way we should we should have the WordPress jQuery. And to make sure type jQuery in the console.

70
07:05.160 --> 07:09.360
And if it returns something that means jQuery is loaded. It is a global variable

71
07:09.470 --> 07:14.280
jQuery.

72
07:14.310 --> 07:20.540
So what if we want to use like $ in order bundle.

73
07:20.710 --> 07:28.740
So let's try now and you know create a jQuery event handler with a $ like you are used

74
07:28.740 --> 07:35.340
to. On the body for example and click and then any function.

75
07:39.330 --> 07:42.030
And let's try to compile this

76
07:45.210 --> 07:51.110
and reload it. And "$ is not a function".

77
07:51.880 --> 07:53.860
If we usejQuery however.

78
08:00.470 --> 08:02.680
I forgot to compile.

79
08:08.120 --> 08:08.860
We have no errors.

80
08:08.870 --> 08:14.350
And if we click on the body we get the alert.

81
08:14.370 --> 08:18.100
So what if we want to use $.

82
08:18.180 --> 08:29.790
One way is that you can define a new constant here. "const $ = jQuery"

83
08:29.830 --> 08:33.490
So now we can use the $ and compile.

84
08:36.770 --> 08:48.570
And refresh and still working. Another way, if you want to use import statements so you want to "import

85
08:48.640 --> 08:51.370
$ from 'jquery'".

86
08:52.650 --> 08:57.990
So this way we'll import the jQuery library into the bundle like we did the first time. And that, and we don't

87
08:57.990 --> 09:04.940
need that. We don't need to include the jQuery from the node_modules. we need just to find the global jQuery .

88
09:04.950 --> 09:07.800
object and assign it to $.

89
09:08.370 --> 09:12.960
So webpack has a way to do that. In the gulpfile

90
09:15.340 --> 09:19.060
let's add a new option in the webpack.

91
09:19.240 --> 09:26.550
Let's call "externals:" and use that when you want to add an external library as a dependency.

92
09:27.060 --> 09:33.340
And by external library I mean library loaded using a SCRIPT tag rather than install using NPM. So I type 

93
09:33.390 --> 09:39.830
library name. And the global variable that you want to import.

94
09:39.840 --> 09:44.240
So in our case a "jQuery" with a capital Q.

95
09:44.550 --> 09:50.910
So now this way when we compile our bundle.js we're not actually import the jQuery from the node_modules

96
09:51.450 --> 09:57.590
but it will rather search for a global variable "jquery" and assign it to the $.

97
09:57.950 --> 09:58.830
So let's compile.

98
10:01.810 --> 10:03.210
And we have an error.

99
10:04.180 --> 10:06.020
Ok, so in the gulpfile.

100
10:08.110 --> 10:10.180
It's "externals" and not "external".

101
10:13.930 --> 10:14.870
And let's compile.

102
10:17.570 --> 10:21.790
As you can see the bundle is still small which means jQuery is not there.

103
10:22.800 --> 10:27.900
And if we refresh. It's still working and we are using

104
10:31.290 --> 10:36.610
the $, still using the $.

105
10:36.730 --> 10:38.800
So let's summarize what we've done.

106
10:39.280 --> 10:48.340
Whenever you want to include a third party JavaScript library or plugin first go to this page,

107
10:48.370 --> 10:57.990
wp enqueue script documentation page. And make sure it's not included in WordPress, right?

108
10:57.990 --> 11:05.290
If it's not included install it using NPM. And then import it in your file, in your bundle file.

109
11:05.520 --> 11:19.780
Otherwise just use, just find the handle for the plugin, right, which is this row here. And then include it

110
11:19.860 --> 11:22.760
using the "wp_enqueue_script".

111
11:22.920 --> 11:28.860
Or maybe as a dependency like we did here. And if you want to use it as a NPM dependency in your bundle

112
11:28.860 --> 11:39.890
file like so, using the import statement just add in your gulpfile the "externals" and add your external library

113
11:40.910 --> 11:43.570
So I hope this makes sense to you.

114
11:44.220 --> 11:45.960
Let's go now to the next task.