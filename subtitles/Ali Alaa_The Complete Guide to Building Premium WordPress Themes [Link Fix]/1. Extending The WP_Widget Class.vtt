WEBVTT

0
00:03.470 --> 00:11.970
So we've seen the Widgets page in the wp-admin before and also in the Customizer. And we've seen that we have some default

1
00:12.120 --> 00:19.220
widgets that come with the WordPress. Let's say in this section learn how to create our own widgets.

2
00:20.010 --> 00:26.850
So we will create one widget in this section and this widget will display the recent posts. You already

3
00:26.850 --> 00:29.590
have a widget that does that,

4
00:29.660 --> 00:35.260
this one. But we're gonna create a similar one on our own now.

5
00:35.790 --> 00:40.150
And this will give you an idea on how to generally create custom widgets.

6
00:40.440 --> 00:45.820
So when we create custom widgets we have three things that we need to take care of.

7
00:45.990 --> 00:51.450
First we need to take care of what we should display in the admin, in this page.

8
00:51.600 --> 00:58.440
You know this form, the fields and stuff like that. And second we need to take care of what to display

9
00:58.530 --> 00:59.450
in the frontend,

10
00:59.530 --> 01:00.600
right?

11
01:00.690 --> 01:03.270
So let's put this widget here.

12
01:04.810 --> 01:07.860
And let's refresh.

13
01:07.890 --> 01:15.590
So here is the Recent Posts widget. We need to also take care of what to display here, in the actual website.

14
01:16.930 --> 01:25.740
And the last thing is, in the backend when you click Save we need to get the values the user types here

15
01:26.160 --> 01:28.810
and sanitize them and save them to the database.

16
01:28.860 --> 01:34.330
So let's start creating this widget and we'll see how to create each one of these steps.

17
01:34.350 --> 01:35.240
Right?

18
01:35.380 --> 01:40.640
So let's go to our functions.php and I cleaned the top a little bit.

19
01:40.710 --> 01:44.320
I created separate files for the images and the content width 

20
01:44.400 --> 01:50.220
and also the portfolio and the delete post link.

21
01:50.460 --> 02:00.950
Let's create a new file now in the lib. And let's call it most-recent-widget.php.

22
02:04.270 --> 02:07.630
And let's include this file here.

23
02:12.390 --> 02:20.490
And inside of this file we will create our widget. So let's open PHP tag. And to create a new widget we use

24
02:20.490 --> 02:29.810
actions. So "add_action()" and the action that we'll have to use is called "widgets_init".

25
02:31.620 --> 02:39.470
And then let's give it a function "_themename_register_most_recent_widget".

26
02:40.020 --> 02:41.280
And let's create this function.

27
02:44.680 --> 02:47.770
And inside of this function we'll call another function called register_widget().

28
02:51.210 --> 02:53.270
And it takes a "widget class".

29
02:53.280 --> 02:54.520
So what's a widget class?

30
02:54.530 --> 03:00.330
It's a PHP class that will be responsible for displaying the widget and saving the values and so

31
03:00.330 --> 03:00.980
on.

32
03:01.050 --> 03:11.820
So we will creating this PHP class in this page and we will call it "Most_Recent_Widget".

33
03:12.390 --> 03:15.930
It's also better if you prefix the class name like so.

34
03:16.600 --> 03:21.930
But it's a convention that class names will start with a capital letter.

35
03:22.260 --> 03:25.770
So if we add "_themename" here and then we build our theme,

36
03:25.800 --> 03:30.660
this will be replaced with the "firsttheme" and it's not capital.

37
03:30.660 --> 03:36.450
So it's not wrong but if you want to, you know, stick to the convention and make this capital, maybe you

38
03:36.450 --> 03:45.410
can add in the gulp, in the package.json, another name here maybe "capitalname" or something. And then

39
03:45.410 --> 03:47.100
add another prefix and then in your gulp 

40
03:47.110 --> 03:51.920
tasks you can replace this prefix as well. But now I'm not gonna do that.

41
03:51.920 --> 03:54.460
I think you can do it on your own.

42
03:54.460 --> 04:06.060
So let's carry on. Now let's create this class. So "class " and our name. And we have to extend a WordPress class called WP_

43
04:06.690 --> 04:08.960
WP_Widget.

44
04:09.010 --> 04:09.950
Right?

45
04:10.130 --> 04:16.260
So this way we will get all the widget functionality like the drag and drop and stuff like that.

46
04:16.490 --> 04:21.410
And a lot of things actually we don't have to get into details but you should know that you have to 

47
04:21.410 --> 04:27.360
extend this class. Next what we have to do is define our constructor.

48
04:27.800 --> 04:30.240
So "public function"

49
04:32.500 --> 04:37.810
and it's called "__construct".

50
04:42.990 --> 04:49.490
And inside of this function we will call the construct() function of the parent of the WP_Widget.

51
04:49.740 --> 04:56.160
If you are good in PHP you already know what I'm doing but. And if not it's not, you know, very important

52
04:56.160 --> 04:58.100
to know all the details.

53
04:58.140 --> 05:01.500
You can just know how to define your widget,

54
05:01.500 --> 05:03.310
right?

55
05:03.740 --> 05:10.950
So now we are calling the construct method in the WP_Widget and inside of this call we will define

56
05:10.950 --> 05:12.420
some arguments.

57
05:12.450 --> 05:21.920
So the first one is an ID for your widget. So let's call it "_themename_mst_recent_widget".

58
05:25.110 --> 05:28.310
The second is the name that will appear in the Admin Page.

59
05:28.460 --> 05:33.170
So it should be escaped and translated.

60
05:33.390 --> 05:42.540
So let's say "Recent Posts" and of course our text domain.

61
05:43.580 --> 05:52.070
And finally we have an array of some extra information like a "description", also escaped and translated.

62
05:54.400 --> 06:02.080
And let's just type any.

63
06:02.370 --> 06:04.610
So that's it for the construct().

64
06:05.090 --> 06:12.000
Let's now take a look at the wp-admin the Widgets page.

65
06:12.230 --> 06:14.380
And now we should have our widget.

66
06:14.380 --> 06:15.600
Here it is.

67
06:15.710 --> 06:17.820
Recent Posts and "some description".

68
06:18.550 --> 06:23.800
So let's add it to any, let's add it to the primary sidebar.

69
06:23.950 --> 06:27.830
And as you can see there are no options for this widget.

70
06:27.910 --> 06:33.010
So how do we display a form here with some, you know, some fields and options.

71
06:33.250 --> 06:41.320
We will add another method in the class. And this one is called, it's a public function, and it's called

72
06:41.350 --> 06:41.720
form().

73
06:46.170 --> 06:48.950
I think we have a typo here.

74
06:49.690 --> 06:58.360
So let's echo something here. And let's go back. And let's take a look now.

75
06:58.700 --> 07:01.500
And now we have the text that we echoed.

76
07:01.790 --> 07:07.610
So this function we will display our form and all the options that we need to put in this widget, right?

77
07:08.040 --> 07:12.930
And then you may have noticed that we have some error here, warning, and that is because this function

78
07:12.960 --> 07:21.660
should receive an argument called $instance. And we'll see what the $instance is.

79
07:21.810 --> 07:25.790
But now error should be gone.

80
07:25.790 --> 07:29.280
So this is where we will display our form,

81
07:29.280 --> 07:30.050
right?

82
07:30.050 --> 07:35.440
So how do we display the frontend, here?

83
07:37.460 --> 07:49.150
You will create a new method called widget(). So "public function widget()". And this receives two things: $args

84
07:50.980 --> 07:52.090
and also the $instance.

85
07:55.860 --> 07:57.340
Let's echo something here.

86
08:00.430 --> 08:05.440
And we have our text here.

87
08:05.550 --> 08:12.660
So the $instance is same as this $instance. We will see what it is, why we are coding the widget. The 

88
08:12.690 --> 08:13.110
$args

89
08:13.180 --> 08:17.510
however, remember when we were registering sidebars.

90
08:17.610 --> 08:25.370
So here. When we registered a sidebar we added some arguments. So we have "before_widget", after_widget", "before_title" 

91
08:25.410 --> 08:26.780
and "after_title".

92
08:27.090 --> 08:30.620
And when we are creating a widget we actually need to know what are these,

93
08:30.620 --> 08:31.510
right?

94
08:31.590 --> 08:35.350
We need to add these before our widget and after and so on.

95
08:35.360 --> 08:43.400
So this $args, let's var_dump() it, will contain these arguments that you pass to the register_sidebar() function.

96
08:47.640 --> 08:53.080
Let us take a look. And as you can see we have the "name" of the sidebar and the "description" and "before_

97
08:53.080 --> 08:58.270
widget" and "after_widget" and all the arguments that we specified here.

98
08:58.420 --> 08:59.380
Right?

99
08:59.500 --> 09:05.530
And of course these will be different depending on which sidebar you put your widget in, right?

100
09:06.460 --> 09:12.160
Finally we mentioned that we need to sanitize and save our fields. To do that

101
09:12.160 --> 09:15.640
we will have another public function called update().

102
09:18.590 --> 09:21.410
And update receives also two arguments.

103
09:21.410 --> 09:27.260
It receives $new_instance and $old_instance.

104
09:30.600 --> 09:32.340
So let's in the next lecture

105
09:32.420 --> 09:36.800
start creating these functions and we'll see what these $instance are.

106
09:37.080 --> 09:39.070
And the $new_instance and the old one.

107
09:39.090 --> 09:40.380
So see you on the next lecture.