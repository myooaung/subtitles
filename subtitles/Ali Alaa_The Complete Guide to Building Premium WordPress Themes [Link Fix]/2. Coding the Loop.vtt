WEBVTT

0
00:03.260 --> 00:10.680
So in the last lecture we mentioned some special types of  template tags that can only be used inside the loop.

1
00:10.680 --> 00:15.010
So you might have heard of the loop before if you have a prior WordPress experience.

2
00:15.190 --> 00:22.870
But let's have some deeper understanding of what the loop really does. So template tags like the_title() can actually

3
00:22.870 --> 00:27.040
be used outside of the loop but only if you provide an ID.

4
00:27.490 --> 00:36.010
So if you provide an ID it will go to the database and find the title of a post with an ID 4. If you

5
00:36.020 --> 00:41.310
don't on the other hand, it will get to the title from a global variable called $post.

6
00:41.740 --> 00:44.220
And in case you don't know, a global variable

7
00:44.230 --> 00:49.940
in PHP is a variable that can be accessed from any file or even from inside a function.

8
00:49.990 --> 00:56.500
So the loop is basically responsible for setting this global variable $post so that you can use template

9
00:56.500 --> 01:03.020
tags without providing an ID to get information about the current post in this global post variable.

10
01:03.250 --> 01:05.670
So I know this might sound a bit vague. 

11
01:05.770 --> 01:10.780
So let's now write some code and then we will take a deeper look on how the loop actually works.

12
01:10.780 --> 01:16.960
So always make sure first that you have your MAMP server open and then open your browser on the project

13
01:17.110 --> 01:17.980
directory.

14
01:18.340 --> 01:25.990
So we had some dummy text here in index.php. Let's finally replace this with some real code. So to

15
01:25.990 --> 01:30.490
start the loop we must check first if you have any posts.

16
01:30.490 --> 01:37.830
So we'll use a function called have_posts() inside an if condition. And let's now close the if condition and the

17
01:37.990 --> 01:42.680
PHP tag and then we'll have to write some else statement here.

18
01:42.820 --> 01:47.420
So if you don't have any posts maybe you would like to display some message, right?

19
01:47.590 --> 01:53.470
So inside a P tag let's just put some message and then close the P tag.

20
01:53.470 --> 01:54.870
Now if we have posts,

21
01:55.000 --> 01:56.850
we will start our loop,

22
01:56.860 --> 01:57.710
right?

23
01:57.880 --> 01:59.620
So in a while loop

24
01:59.620 --> 02:08.420
we will check if we still have posts using the same have_posts() function.

25
02:08.440 --> 02:12.930
So now that we are inside the loop, we can now use template tags.

26
02:13.120 --> 02:18.000
But before using template tags we must call a function called the_post().

27
02:18.190 --> 02:19.650
And that's very important.

28
02:19.840 --> 02:26.460
Without calling the_post() we might run into an infinite loop. And we'll see why in the next lecture.

29
02:26.500 --> 02:32.530
But for now you can think of the_post() as a function that will make the post global variable point to

30
02:32.530 --> 02:33.690
the right post.

31
02:33.700 --> 02:37.910
So that template tags will work properly inside the loop.

32
02:37.930 --> 02:39.060
So inside an H2 tag

33
02:39.060 --> 02:44.040
now let's get the title.So I'm gonna open an ANCHOR tag inside the H2 tag

34
02:44.440 --> 02:50.220
and in the "href" let's open PHP and call our first template tag the_permalink().

35
02:50.280 --> 02:55.440
This template tag will obviously get the link for this blog post.

36
02:55.560 --> 02:59.270
And then inside the ANCHOR tag let's call the_title().

37
02:59.580 --> 03:06.640
So inside PHP tags let's call the_title(). And let's remove these arguments we won't need to add

38
03:06.640 --> 03:07.680
any arguments.

39
03:07.900 --> 03:16.720
And then let's close the PHP tags. So next you might want to add a "title" attribute to the ANCHOR tag.

40
03:16.730 --> 03:21.330
So let's add the "title" attribute and let's open PHP.

41
03:21.980 --> 03:24.210
And then let's call the_title() again.

42
03:25.180 --> 03:32.310
So the title however can contain some characters that are not allowed in an HTML tag, like single and

43
03:32.380 --> 03:34.330
double quotes for example.

44
03:34.330 --> 03:41.820
So WordPress provides another template tag called the_title_attribute() and this will be the same as the_title().

45
03:41.980 --> 03:47.480
However it will just be cleaned up to be used as a valid title attribute.

46
03:47.500 --> 03:51.170
So let's now go to the browser and refresh and see what's going on.

47
03:51.240 --> 03:57.560
And as you can see we have our titles. And let's inspect and make sure we have the attributes and everything.

48
03:57.680 --> 04:00.780
And as you can see everything is looking fine.

49
04:00.930 --> 04:07.950
So let's now add another thing. Let's open an empty DIV and let's display some more information about the

50
04:07.950 --> 04:12.150
post. So first let's display the date of the post.

51
04:12.230 --> 04:20.000
So I'm gonna type "Posted on" and then I'm gonna add the date as a link. And this link will be the

52
04:20.000 --> 04:23.250
link of the post, the permalink. As you'll see later

53
04:23.360 --> 04:30.710
some posts might not have a title. So it's always a good idea to allow users to go to the post by clicking

54
04:30.740 --> 04:32.960
on the date of the post.

55
04:33.200 --> 04:35.930
And as you can see here I did not use the_permalink().

56
04:35.960 --> 04:38.720
I used a function called get_permalink().

57
04:38.840 --> 04:42.800
If you are completely new to WordPress here's a quick note.

58
04:42.860 --> 04:47.990
Functions that start with "the" usually echos the result.

59
04:48.200 --> 04:52.190
And that's why we don't have to add echo before calling the function.

60
04:52.340 --> 04:57.360
On the other hand functions that start with "get" usually just return the output.

61
04:57.360 --> 04:59.720
And that's why we have to echo it.

62
04:59.740 --> 05:07.340
So I'm gonna open a TIME tag now to display the time. And make sure you always use HTML5 tags whenever

63
05:07.490 --> 05:08.490
applicable.

64
05:08.540 --> 05:14.150
These tags would make your theme much better in SEO  and also accessibility.

65
05:14.230 --> 05:21.260
I'm just gonna add some lines here to make this more legible. And let's now display to date and

66
05:21.260 --> 05:22.150
to display the date

67
05:22.150 --> 05:30.550
I'm gonna use another template tag called get_the_date(). And this function receives a date format as

68
05:30.550 --> 05:31.590
an argument.

69
05:31.990 --> 05:35.080
So let's go and check the documentation for 

70
05:35.080 --> 05:40.630
get_the_date() function. And as you can see the first argument is a PHP date format. And it gives you a link

71
05:40.630 --> 05:47.290
to the PHP date format and if you open that you will find, you know, some different characters that

72
05:47.290 --> 05:54.420
will map to different date formats. So let's copy this example and let's add it as an argument to our function.

73
05:54.610 --> 05:59.010
So each one of these characters will be replaced with something.

74
05:59.440 --> 06:06.220
So the small "l" will be the full day name the capital "F" will be the full month name and "j" will be the day

75
06:06.220 --> 06:10.550
number and "Y" will be the year.

76
06:10.610 --> 06:16.070
We will also need to add some attribute to the TIME tag which is the "datetime".

77
06:16.160 --> 06:23.600
So to see the description for the datetime attribute and it represents a machine readable date/time

78
06:23.720 --> 06:25.460
of the time element.

79
06:25.490 --> 06:31.850
So in order to add this attribute we will use the same get_the_date() function only this time we will

80
06:31.850 --> 06:38.030
use a different format. So as we saw inside the TIME tag we can use whatever formatting we would like

81
06:38.420 --> 06:43.760
because that's what humans see. The "datetime" attribute however is what

82
06:43.760 --> 06:46.050
search engines see,right?

83
06:46.310 --> 06:52.490
So it must be formatted in a specific way and this specific format corresponds to the character small

84
06:52.490 --> 06:58.110
"c" in the PHP date format. So let's go back now to the browser and see.

85
06:58.320 --> 07:01.550
And now we have our dates in the format we wanted.

86
07:02.080 --> 07:09.400
But now I'm gonna go back and remove that format and that's because get_the_date() function by default

87
07:09.730 --> 07:16.050
returns the date in the format the user chose in the wp-admin. And by adding a format here

88
07:16.180 --> 07:20.980
you're kind of forcing the user to have a specific format that they can actually change

89
07:20.990 --> 07:26.950
in the wp-admin. So most of the time you won't have to provide a format for the date functions.

90
07:26.960 --> 07:32.440
Let's now add another information about the post which is the post author.

91
07:32.440 --> 07:38.530
So what we need to do is we need to echo the name of the author. And then wrap this name of the author

92
07:38.530 --> 07:44.640
with a link. And this link will take us to a page that contains only the posts of this author.

93
07:45.830 --> 07:50.800
So to get this link we can use a template tag called get_author_posts_url().

94
07:50.810 --> 07:54.490
And this function needs as an argument

95
07:54.530 --> 08:01.010
the ID of the author. And to get the ID of the author we will use an other function called 

96
08:01.130 --> 08:05.910
get_the_author_meta(). And this function can get a lot of information about the author.

97
08:05.930 --> 08:08.620
So we need to specify which information we need.

98
08:08.750 --> 08:14.810
So we need the ID. And then inside the ANCHOR tag we need to display the author's name.

99
08:15.020 --> 08:21.260
So let's inside the A tag open PHP and use another template tag called get_the_author().

100
08:24.010 --> 08:24.370
Great.

101
08:24.370 --> 08:31.660
So let's now go back to the browser and let's see what we have. And sure enough we have the author name.

102
08:31.820 --> 08:38.350
And if you click on one of the authors you will have a page for the specific author. And it will only

103
08:38.350 --> 08:47.820
contain the posts of this author. So let's now go and display one more information about the post. Let's

104
08:47.820 --> 08:49.450
display the excerpt.

105
08:49.450 --> 08:53.780
And the excerpt is a short summary of your blog post.

106
08:53.830 --> 09:00.610
So inside a new DIV I'm gonna call a function or template tag which is called the_excerpt(). And

107
09:00.610 --> 09:07.150
the excerpt can be either auto generated from the post content or you can specify custom excerpt when

108
09:07.150 --> 09:09.150
you are creating the post.

109
09:09.220 --> 09:16.900
And now if you go back to the browser and refresh you will find the short summaries for each blog post.

110
09:16.930 --> 09:21.710
Let's finally add one more thing. Let's add a Read More link,

111
09:22.640 --> 09:27.230
which is a link that will just take us to the single blog post page.

112
09:27.380 --> 09:28.890
So let's add an ANCHOR tag

113
09:28.890 --> 09:35.880
and in the "href" we will add the permalink to the post. So echo get_the_permalink().

114
09:36.050 --> 09:42.140
And we'll also need to have a "title" attribute for the A tag so let's copy it from there and just paste it to be

115
09:42.140 --> 09:43.690
the same.

116
09:43.780 --> 09:52.780
And then let's type "Read More" inside the A tag. Let's take a look now and we have now a Read More link. And if we click

117
09:52.780 --> 09:57.890
on it it takes us to the single blog post.

118
09:57.920 --> 10:05.980
So that's great but there is something that we can do here that can improve accessibility. And in case

119
10:05.980 --> 10:12.250
you're not familiar, accessibility refers to making a website accessible to everyone including people

120
10:12.490 --> 10:13.980
with disabilities.

121
10:13.990 --> 10:20.790
So for instance if a user who can't see is browsing our website, he will be using a screen reader. And a

122
10:20.800 --> 10:24.970
screen reader is a software that reads out loud the content of a website.

123
10:24.970 --> 10:31.890
So in our case if the user is navigating through this link, the screen reader will read out read more.

124
10:31.900 --> 10:33.430
But the user will have no idea

125
10:33.430 --> 10:38.210
read more about what. So I'm gonna do something now that will tackle this.

126
10:38.210 --> 10:45.850
I'm gonna open a SPAN tag and then give it a class of "u-screen-reader-text". And currently

127
10:45.850 --> 10:50.770
this class will do nothing because we haven't yet loaded any CSS. But let's just for now

128
10:50.770 --> 10:58.480
type in the SPAN let's type of some additional text to the Read More link. So let's type "About" and then the

129
10:58.480 --> 10:59.890
title of the post.

130
11:01.130 --> 11:08.990
So when we load our CSS later in the course, this class will hide whatever inside it. So it will only be available

131
11:09.050 --> 11:11.810
for screen readers. For normal users

132
11:11.810 --> 11:20.840
however the button will read Read More without any extra text. So let's go now to the browser and see what we

133
11:20.840 --> 11:22.600
have.

134
11:22.810 --> 11:26.080
And as you can see we have Read More About Template: Sticky, 

135
11:26.140 --> 11:29.630
Read more about Hello World and so on.

136
11:29.740 --> 11:33.010
When we load our CSS it will just be Read More.

137
11:33.010 --> 11:35.270
However screen readers will hear it

138
11:35.350 --> 11:37.340
read more about something.

139
11:37.670 --> 11:42.700
So accessibility is actually a big topic. In this course from time to time

140
11:42.700 --> 11:49.690
I'm gonna give you some tips about how to make your website more accessible. But it's actually a big

141
11:49.690 --> 11:52.750
topic you might need to maybe watch a separate course for it

142
11:52.810 --> 11:54.720
if you want to know more about it.

143
11:54.980 --> 11:58.400
So just one final thing for this lecture.

144
11:58.420 --> 12:05.080
We now have some posts but these are not all the posts. We need to have pagination in order to see all

145
12:05.080 --> 12:06.540
the posts, right?

146
12:06.880 --> 12:14.740
So after the while loop, after the curly braces of the while loop, let's add another template tag which is called

147
12:14.950 --> 12:19.180
the_post_pagination() and that's really it.

148
12:19.180 --> 12:22.270
Let's take a look now and refresh.

149
12:22.270 --> 12:27.260
And as you can see we have pagination and we can browse through pages.

150
12:27.610 --> 12:29.970
So I think that's it for this lecture.

151
12:29.970 --> 12:35.530
We now have a loop and we are displaying information about each post, but we don't really know what's

152
12:35.530 --> 12:36.940
going on behind the scenes.

153
12:37.060 --> 12:42.000
We don't know what have_posts() function does and what the_post() function does.

154
12:42.130 --> 12:44.170
So let's try to figure this out in the next lecture.