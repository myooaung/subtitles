WEBVTT

0
00:03.240 --> 00:09.330
Another important topic that we need to discuss before getting deeper into our theme is internationalization

1
00:09.360 --> 00:11.040
and localization.

2
00:11.280 --> 00:16.510
So internationalization sometimes you'll see it is written as i18n.

3
00:16.860 --> 00:20.720
And that's because there are 18 letters between the i and the n,

4
00:20.750 --> 00:25.170
refers to the process of making your theme available for translation.

5
00:25.170 --> 00:30.900
So in order for translators to be able to translate your theme we have to do some special things while

6
00:30.900 --> 00:38.670
coding. Localization on the other hand refers to the process of actually translating the theme.

7
00:39.110 --> 00:44.740
So in order to localize a theme it must be internationalized first.

8
00:44.900 --> 00:48.360
So we will talk about localization at the end of this course.

9
00:48.710 --> 00:54.980
But what's important to know now is how to internationalize your theme. And you should know that very

10
00:54.980 --> 01:02.530
well early on because we will use internationalization functions in pretty much every file we create.

11
01:02.600 --> 01:08.350
So let's visit our code now and see what you should do in order to make our theme translatable.

12
01:08.570 --> 01:15.530
I'm having index.php open right now. And we're not responsible for anything that comes from the

13
01:15.530 --> 01:19.230
database like the title and the content and so on.

14
01:19.490 --> 01:25.690
We're only responsible for strings like the "Sorry, no posts match your criteria."

15
01:26.120 --> 01:28.520
Imagine we want to translate this string. 

16
01:28.760 --> 01:35.040
The only way we can do that now is by actually editing the index.php file and replacing the string.

17
01:35.360 --> 01:37.300
But that's not a good practice.

18
01:37.310 --> 01:43.820
So what we can do is we can wrap the strings in some functions. And these functions will make sure that

19
01:43.970 --> 01:46.060
the string will be translatable.

20
01:46.100 --> 01:53.900
So before doing anything let's go to the browser. And let's go to an unexisting page so that we can get the "Sorry..."

21
01:54.260 --> 02:01.050
string. This one. And now let's go back and let's open PHP tags before the string.

22
02:04.660 --> 02:10.150
And let's pass our string as a first argument in a function called __().

23
02:12.820 --> 02:13.790
Right?

24
02:14.130 --> 02:19.770
And then the second argument is something called the text domain.

25
02:19.810 --> 02:26.410
So remember in  style.css when we mentioned that we should add a field called "Text Domain"

26
02:26.920 --> 02:28.860
and it should be unique.

27
02:28.880 --> 02:29.870
So this is it.

28
02:30.140 --> 02:36.570
And this is what we should pass as a second argument here. So WordPress will use this text domain in

29
02:36.570 --> 02:41.970
order to distinguish between the translations for different themes and plugins.

30
02:41.970 --> 02:47.850
So it should be unique to our theme. And we will also use it when we come to localization at the end

31
02:47.850 --> 02:48.740
of this course.

32
02:49.730 --> 02:56.400
But for now just make sure to pass the second argument every time you use one of these tranlation functions.

33
02:56.400 --> 03:04.520
Also make sure not to pass it as a variable. It should always be a string. And same for the translation

34
03:04.520 --> 03:06.150
string make sure not use 

35
03:06.150 --> 03:10.700
variables here like this or even by appending like this.

36
03:11.340 --> 03:14.540
We'll see how to handle variables in strings

37
03:14.580 --> 03:15.810
later in this lecture.

38
03:16.680 --> 03:20.830
So what this __() function will do?

39
03:20.910 --> 03:22.790
It will return the string

40
03:22.920 --> 03:24.960
we pass as a first argument,

41
03:24.960 --> 03:32.670
if your website is in English. Or if you have your website in another language it will return the translation

42
03:32.670 --> 03:38.970
of the string from a translation file that we will learn how to generate later in this course.

43
03:39.450 --> 03:43.390
So all you have to know now is just when you output any string in your theme

44
03:43.530 --> 03:49.430
you must wrap it in a translation function. And we'll see other translation functions later in this lecture.

45
03:49.430 --> 03:53.460
So let's have a refresh the browser and as you can see we have nothing.

46
03:53.670 --> 03:56.920
And that's because this function does not echo.

47
03:56.940 --> 04:02.970
It just returns the value. So you can use this function if you want to maybe assign the string to a

48
04:02.970 --> 04:10.620
variable maybe. But if you need to echo your string you can just use echo and then use the __()

49
04:10.620 --> 04:12.610
function.

50
04:12.620 --> 04:19.690
So here we have it. Or WordPress also provides another function called _e().

51
04:20.110 --> 04:24.950
And this will translate and echo your string. Great.

52
04:24.960 --> 04:31.050
So let's now see some of the other functions that we can use for translation.

53
04:31.230 --> 04:35.530
So I'm gonna open a PHP tag here to do some testing.

54
04:36.030 --> 04:41.510
So assume we have a number of comments that will come from the database, so it will be dynamic.

55
04:41.790 --> 04:48.300
But let's say it's currently 3. And then we want to display a string that will be "one comment",

56
04:48.330 --> 04:55.290
if we have only single comment. Or if we have more than one comment we want to display the number of

57
04:55.290 --> 04:59.300
comments and then the string "comments".

58
04:59.340 --> 05:08.070
In other words we want to display either "one comment" or "3 comments". 

59
05:08.070 --> 05:09.060
All right?

60
05:09.270 --> 05:14.070
And also at the same time we want to make the string translatable.

61
05:14.190 --> 05:15.910
So how can we do that.

62
05:16.290 --> 05:24.120
WordPress provides another function which is _n() and what you can do is you can pass the

63
05:24.210 --> 05:26.140
singular version of your string.

64
05:26.580 --> 05:33.190
So "One comment" and then the second argument is the plural version.

65
05:33.190 --> 05:40.120
So let's write "comments" for now and then we'll see how to add the number. And the third argument is

66
05:40.240 --> 05:45.540
the number and this number will decide which string will be used.

67
05:45.610 --> 05:51.780
And of course the last argument is the text domain.

68
05:51.930 --> 05:54.820
So let's see what we have in the browser.

69
05:56.170 --> 05:58.950
And we have "comments" because we have three comments.

70
05:58.960 --> 06:09.150
If we change this to 1, we now should have "One comment". Great. So how do we display the number before the comments?

71
06:09.150 --> 06:15.080
And keep in mind that we mentioned that we cannot put variables in translated strings.

72
06:15.270 --> 06:22.660
So in order to achieve that we can use a function called printf(). And printf(),

73
06:22.720 --> 06:26.920
if you're familiar with PHP, will print a formatted string.

74
06:27.370 --> 06:34.450
So let's say we would like to print a string which will say  "this post has " and then the number of

75
06:34.450 --> 06:36.250
comments.

76
06:36.290 --> 06:41.840
So what we can do is printf, we can out a placeholder which will start with a modular sign or a percentage

77
06:41.840 --> 06:48.800
sign and then a character. And this character will signify the type of the placeholder.

78
06:48.800 --> 06:50.280
So it's just gonna be a string.

79
06:50.360 --> 06:54.010
We can put "s". If it's gonna be number we can put "d",

80
06:54.050 --> 06:54.920
and so on.

81
06:55.220 --> 07:01.290
So in our case we can use "s" because it's a string. And then let's put the rest of the sentence.

82
07:01.400 --> 07:02.570
So "comments".

83
07:03.020 --> 07:08.000
And then the second argument is the value that we want to replace the placeholder with.

84
07:08.300 --> 07:11.780
So in our case it's $comments.

85
07:11.950 --> 07:13.420
So let's take a look.

86
07:15.720 --> 07:20.580
And as you can see we have "this post has 3 comments".

87
07:20.580 --> 07:25.240
The %s placeholder is replaced with the actual number.

88
07:25.620 --> 07:29.700
So how can we use printf() for this situation here.

89
07:29.700 --> 07:37.050
We can add the placeholder here before the "comments". So let's remove the printf() and now the

90
07:37.680 --> 07:41.150
_n() function will return "%s comments",

91
07:41.160 --> 07:50.190
if the comments is larger than 1. So what's written from the _n() we'll put it as a first argument

92
07:50.430 --> 07:54.020
in the printf() in order to replace the placeholder.

93
07:54.390 --> 07:57.490
And the second argument will be the $comments again.

94
07:58.220 --> 08:06.460
So this way if _n() returned "%s comments". The printf() replace the %s with

95
08:06.460 --> 08:08.170
the actual number of comments.

96
08:08.890 --> 08:18.610
So we just, we should not echo now because printf() already echoes. And we have "3 comments".

97
08:18.610 --> 08:20.530
Let's try one.

98
08:20.730 --> 08:24.640
And we should have "One comment".

99
08:24.720 --> 08:27.550
So that's how we can use _n().

100
08:27.960 --> 08:35.520
Let's now move on and highlight some other translation functions. We have _x() and this is when you

101
08:35.520 --> 08:37.660
want to give some context to your string.

102
08:37.710 --> 08:43.720
So let's say we have the word "Post" so this can be post as a noun and post as a verb.

103
08:44.100 --> 08:49.200
So _x() can take a second argument where you can describe what you mean.

104
08:49.200 --> 08:57.410
So in our case we can say "noun" and then the third argument will be the text domain. And the second argument,

105
08:57.950 --> 09:03.990
it can be anything. You can describe your string in any ways.

106
09:04.070 --> 09:11.090
We also have a version of _x() which is _ex() which will echo and translates at the 

107
09:11.090 --> 09:13.110
same time.

108
09:13.150 --> 09:18.070
So now that we've seen some of the translation functions I think it's time to mention that we will not

109
09:18.070 --> 09:21.010
use any of these functions.

110
09:21.080 --> 09:26.780
Remember in the last lecture when I told you that any input that is coming from the user must be escaped

111
09:27.230 --> 09:29.070
before it's outputted in our theme.

112
09:29.120 --> 09:30.270
Right?

113
09:30.350 --> 09:37.100
So these strings will be replaced with translations. And these translations are coming from users from

114
09:37.160 --> 09:44.250
translators. And the translator can put maybe a SCRIPT tag as a translation for one of the strings.

115
09:45.350 --> 09:52.640
So most of the time whenever we want to translate a string we will not use these functions. WordPress provides

116
09:53.150 --> 10:00.460
other functions that will escape and translate at the same time like esc_html_e().

117
10:00.480 --> 10:08.640
Some functions like _n() have no escaping equivalent like the _e().

118
10:09.020 --> 10:15.960
So in this case we can use esc_html() and then call _n() and inside of it.

119
10:16.010 --> 10:20.470
I'll leave you a link in this lecture for all the other translation functions.

120
10:20.780 --> 10:23.450
But now let's move on to another situation

121
10:23.450 --> 10:31.330
I would like to highlight. So let's say we have a variable called $city and this could be something dynamic

122
10:31.330 --> 10:32.920
from the database.

123
10:33.090 --> 10:36.600
And let's say it's currently "london".

124
10:36.610 --> 10:42.380
And now we need to echo a translatable string which will say "Your city is ".

125
10:42.400 --> 10:45.430
And then the variable $city, right?

126
10:45.610 --> 10:50.470
And remember that we cannot use variables in the translation functions.

127
10:50.590 --> 10:54.380
So what we can do is we can echo and then we can use,

128
10:54.670 --> 10:58.210
remember we have to use now esc_html__().

129
11:01.000 --> 11:07.090
And then as a first argument we can say "Your city is" and then space.

130
11:07.330 --> 11:09.370
And of course our text domain.

131
11:14.160 --> 11:18.590
And then we can just append the variable $city. Right?

132
11:18.780 --> 11:20.070
So this will work.

133
11:20.110 --> 11:22.600
Let's take a look.

134
11:22.780 --> 11:27.620
However this is not how it should be done.

135
11:27.630 --> 11:33.610
You are currently forcing the translator to just translate "Your city is " without the actual city being

136
11:33.670 --> 11:35.000
in the context.

137
11:35.350 --> 11:40.350
In other languages maybe the city will come in the middle or maybe at the beginning.

138
11:41.530 --> 11:46.770
So in situations like this one always use printf().

139
11:46.900 --> 11:48.570
So let's echo this string again

140
11:48.580 --> 12:00.080
but now using printf(). So "printf" and then "esc_html__ " and then "Your

141
12:00.200 --> 12:11.440
city is " and then a placeholder. And of course a second argument is the text domain.

142
12:11.620 --> 12:19.260
And then finally the second argument for the printf() function will be the variable $city, right?

143
12:19.270 --> 12:21.880
So this way it will also work.

144
12:21.910 --> 12:22.840
Let's take a look.

145
12:26.120 --> 12:32.770
But now we are allowing the translator to put the city name whereever he wants in the sentence, right?

146
12:33.800 --> 12:38.370
So during the course we'll have a lot of situations like this one.

147
12:38.540 --> 12:44.100
Another thing I want to point out is we can leave messages to the translator when we add placeholders

148
12:44.110 --> 12:45.160
in our strings.

149
12:45.230 --> 12:51.030
So if we add a PHP comment just before calling the translation functions the __(),

150
12:51.650 --> 12:58.880
and then this comment starts with "/* translators" and then ":" and then after ":" and we can

151
12:58.880 --> 13:02.000
write a message to the translator.

152
13:02.030 --> 13:09.530
So for instance in our example we can say "%s is the city name" for example.

153
13:09.530 --> 13:16.070
So it might be obvious here that the placeholder is a city name but in some situations you will have to leave

154
13:16.100 --> 13:19.210
messages like this one. All right?

155
13:19.460 --> 13:25.520
So let's finally go to our helper functions. And let's see if we will have to do any translations here.

156
13:28.590 --> 13:33.080
So we have here "Posted on " and then the time.

157
13:33.330 --> 13:34.140
And we also have

158
13:34.140 --> 13:38.440
"By " and then the author name and we need to translate these.

159
13:38.490 --> 13:43.670
So for the "Posted on ", this is a situation where we can use printf().

160
13:44.010 --> 13:47.470
So we need to allow the translator to reorder the "Posted on "

161
13:47.490 --> 13:49.840
And then something as he likes.

162
13:49.870 --> 13:52.000
Right?

163
13:52.070 --> 14:04.960
So let's do here a "printf" and then "esc_html__" and then "Posted on " and

164
14:05.790 --> 14:06.800
a placeholder.

165
14:09.100 --> 14:18.490
And then of course the text domain "firsttheme". And then the second argument for the printf() will be the

166
14:18.510 --> 14:20.830
date inside the A tag, right?

167
14:21.210 --> 14:24.130
So we'll have to copy the A tag from here.

168
14:25.090 --> 14:32.640
And then put it as the second argument for the printf(). So let's just add new lines to make this a bit

169
14:32.640 --> 14:33.840
more legible.

170
14:35.630 --> 14:39.220
And let's paste the A tag and then the TIME tag

171
14:43.740 --> 14:46.280
and the closing of the A tag.

172
14:49.890 --> 14:50.910
I think that should do it.

173
14:50.910 --> 14:53.610
So let's remove these echoes.

174
14:56.390 --> 15:06.780
and let's take a look in the browser. So let's go back to the home page and as you can see it's working.

175
15:06.780 --> 15:07.380
"Posted on "

176
15:07.380 --> 15:11.730
and then the A tag with the date inside of it.

177
15:11.780 --> 15:15.160
So let's do exactly the same for the "By "

178
15:15.200 --> 15:16.130
and then the author.

179
15:16.210 --> 15:29.060
So "printf" and then "By " and a placeholder and you just have to put the translation function so 

180
15:29.060 --> 15:31.670
"esc_html__"

181
15:35.200 --> 15:38.290
and then the text domain.

182
15:38.540 --> 15:45.890
And the second argument for the printf() will be the A tag. The A tag which contains the author name.

183
15:45.890 --> 15:47.730
So let's copy is from below.

184
15:58.580 --> 16:02.810
So let's now remove this one and let's see if it's working.

185
16:05.550 --> 16:09.330
And it's working but we also forgot the space before the "By ".

186
16:09.360 --> 16:15.970
So let's do it. And there we have it.

187
16:17.810 --> 16:22.740
So now our post_meta() function is fully translatable.

188
16:22.910 --> 16:29.340
Let's finally do the, I know this lecture took too long, but let's do the readmore_link() function.

189
16:29.410 --> 16:32.320
There is something a bit different about it.

190
16:32.510 --> 16:34.820
So here we have the "Read More".

191
16:35.060 --> 16:38.920
And then we have some text in a SPAN tag for screen readers

192
16:38.990 --> 16:41.900
As we discussed in the previous lecture.

193
16:42.090 --> 16:51.190
So what we can do here is printf() also. And then "esc_html__"

194
16:54.280 --> 16:59.840
and then "Read More " and then let's copy the SPAN tag.

195
17:02.330 --> 17:06.700
So "Read More " and then "About " placeholder, right?

196
17:08.260 --> 17:15.580
And let's close the SPAN tag and let's just copy the text domain and then the second argument for the

197
17:15.580 --> 17:18.100
printf() will be the the post title.

198
17:18.100 --> 17:19.480
Right?

199
17:19.510 --> 17:23.810
So we can use get_the_title().

200
17:24.010 --> 17:28.900
So this way we will replace the placeholder with the title of the post,

201
17:28.960 --> 17:30.200
right?

202
17:30.260 --> 17:31.490
So let's remove this

203
17:32.050 --> 17:36.280
all the echo here. And let's add a semicolon here.

204
17:36.910 --> 17:42.420
And I want you to notice something before even trying this on the browser. You are using

205
17:42.420 --> 17:47.790
esc_html() and we actually have HTML inside of our string, right?

206
17:49.420 --> 17:57.620
So let's see what will happen now and the HTML will be rendered as text because you are escaping it.

207
17:57.650 --> 18:05.810
So what we can do about that? Instead of escaping the HTML using esc_html() here we can use another

208
18:05.810 --> 18:09.630
function. A function that will escape HTML

209
18:09.920 --> 18:17.980
but also who can pass some tags. So in our case we want to escape all HTML except the SPAN tags.

210
18:18.250 --> 18:25.690
So it's called a function called wp_kses(). So k, s, e, s.

211
18:25.840 --> 18:31.000
And the first argument for this function will be the string that we would like to escape.

212
18:31.000 --> 18:35.980
So it will be the string inside the __() function.

213
18:36.050 --> 18:43.350
So it takes also a second argument but let's close the wp_kses() function first. And this second argument would

214
18:43.350 --> 18:44.570
to be an array.

215
18:45.180 --> 18:48.990
And this array will be the list of tags that we want to allow, right?

216
18:49.080 --> 18:50.920
So in our case it's a SPAN tag.

217
18:51.160 --> 18:58.560
And this will be the key of the array and the value will be another array of allowed attributes for

218
18:58.560 --> 18:59.240
this tag,

219
18:59.250 --> 18:59.600
right?

220
18:59.640 --> 19:07.010
So in our case we can allow the "class" attributes. And this also will be the key to the array. And the

221
19:07.010 --> 19:09.200
value we can make it in an empty array.

222
19:11.380 --> 19:14.020
And looks like we have some syntax error here.

223
19:14.830 --> 19:16.670
Yeah we're missing the comma here.

224
19:16.680 --> 19:17.630
So let's add it.

225
19:20.150 --> 19:25.700
Great. So let's just quickly recap in case you are confused.

226
19:26.020 --> 19:33.160
So the printf() function the first argument for it will be the wp_kses() function and the second will

227
19:33.190 --> 19:33.660
be

228
19:33.710 --> 19:39.150
get_the title(). The wp_kses() function, the first argument for it will be the string we want to escape.

229
19:40.960 --> 19:45.570
And the second argument will be an array of tags that we would like to allow.

230
19:45.580 --> 19:46.320
Right?

231
19:47.090 --> 19:48.550
So let's take a look now.

232
19:50.940 --> 19:53.610
And looks like we've done something wrong.

233
19:54.120 --> 19:55.290
So let's take a look.

234
19:56.500 --> 20:01.760
And ok, I just forgot the "s" in the placeholder. Let's take a look now.

235
20:02.180 --> 20:08.470
And it's working fine. And also let's make sure the SPAN tag is displayed.

236
20:08.740 --> 20:10.740
And here it is.

237
20:10.960 --> 20:15.940
Let's also try to add a SCRIPT tag here and let's see what will happen.

238
20:17.350 --> 20:20.650
So now we have a SCRIPT tag that should not be rendered,

239
20:20.650 --> 20:20.980
right?

240
20:20.980 --> 20:23.250
So let's have a look.

241
20:23.460 --> 20:33.030
And as expected the wp_kses() function removed the SCRIPT tag. And our string is now safe, right? Let's

242
20:33.140 --> 20:37.000
finally add translation messages for the translators.

243
20:37.090 --> 20:39.410
It's good practice so resume

244
20:39.430 --> 20:40.500
real quick here.

245
20:40.790 --> 20:47.080
So here we can say "%s is the Post Dates".

246
20:47.460 --> 20:53.360
And here we can say it's the "Post Author".

247
20:53.500 --> 21:00.330
And then finally here we can say the placeholder is the "Post Title", right?

248
21:02.670 --> 21:09.720
So I think that's it for internationalization and localization. During the course we will use these concepts

249
21:10.020 --> 21:10.970
a lot.

250
21:11.040 --> 21:14.400
So by the time I think you'll get more used to them.

251
21:14.400 --> 21:16.480
So let's move on now to the next section.