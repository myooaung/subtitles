WEBVTT

0
00:03.180 --> 00:07.160
So in the last lecture we've created this link and when we click on it,

1
00:07.200 --> 00:09.700
it will take you to a URL like this one.

2
00:09.780 --> 00:15.850
And now we need to handle this URL request and check if it has an action of "_themename_delete_post".

3
00:15.870 --> 00:17.500
We need to delete this post.

4
00:17.630 --> 00:24.750
So in order to handle URL request in WordPress of course we will use actions. So a suitable

5
00:24.750 --> 00:30.800
action to handle this request is the "init" action. So let's add action.

6
00:31.110 --> 00:37.030
And when the init action is called WordPress will be loaded and the user will be authenticated.

7
00:37.050 --> 00:42.570
So this will be the perfect action to use in order to use WordPress functions and also have the user

8
00:42.690 --> 00:45.490
authenticated in order to get its capabilities.

9
00:45.510 --> 00:48.040
So let's create a function now to handle the requests.

10
00:48.080 --> 00:58.100
So let's call it "_themename_handle_delete_post". And let's create this function

11
00:58.100 --> 01:08.500
now.

12
01:09.010 --> 01:14.980
So what we need to do is we need to check if these arguments exist.

13
01:15.120 --> 01:16.720
We need to do something.

14
01:17.630 --> 01:24.080
And of course you should know that these arguments are stored as an array in the super global variable $_GET,

15
01:24.260 --> 01:33.710
right? So let's write an if condition. And "isset()" which is a PHP function that will check if a variable

16
01:33.710 --> 01:41.310
is set. So "isset($_GET['action'])".

17
01:41.340 --> 01:48.300
And we also need to make sure that if this action is set. We need to make sure that is our action.

18
01:48.300 --> 01:55.840
So if this action is equal to and let's copy it from here

19
01:59.320 --> 02:00.790
then we need to do something.

20
02:00.860 --> 02:01.720
Delete the post.

21
02:01.780 --> 02:05.770
So the logic for deleting the post will be inside this if condition.

22
02:05.780 --> 02:16.470
So now lets get the post ID. And the post ID will be the post that we pass in the GET request so we

23
02:16.480 --> 02:23.990
have "$_GET['post']". First we need to check that this value exists.

24
02:24.000 --> 02:25.020
So let's call isset().

25
02:28.230 --> 02:38.910
And if it's set we will set the $post_id to this value. And if not let's set it to "null". And then the next step

26
02:38.910 --> 02:42.030
we need to verify that there is actually in the database

27
02:42.110 --> 02:43.940
a post with this ID.

28
02:43.940 --> 02:49.220
So to do that let's create a variable called $post. And it will call a function called get_post() which will get

29
02:49.220 --> 02:53.640
a post from a post object, from the post ID.

30
02:53.810 --> 03:01.230
So let's pass it the $post_id. But let's also make sure that this is an int not a string.

31
03:01.880 --> 03:02.380
We can do that

32
03:02.390 --> 03:06.420
by type casting using these ( ) and the int inside of it.

33
03:06.440 --> 03:13.550
So if this post is empty then there is no post with this ID, otherwise we have a post. So let's check if

34
03:13.550 --> 03:13.940
empty.

35
03:17.900 --> 03:22.110
And the $post, we will break out of the function, "return".

36
03:24.470 --> 03:25.440
And do nothing.

37
03:25.760 --> 03:28.210
Otherwise we will continue.

38
03:28.210 --> 03:34.060
So we now have the post ID and we confirm that the post exists.

39
03:34.070 --> 03:35.270
We now need to delete it.

40
03:35.300 --> 03:43.710
So to delete a post we'll call a function called wp_trash_post() and our post ID.

41
03:43.820 --> 03:49.370
So after deleting the post let's redirect maybe to our home URL or something.

42
03:49.440 --> 03:55.930
So WordPress has a function called wp_redirect() and wp_safe_redirect(). You should use safe_rdirect

43
03:55.970 --> 04:02.450
if you want to redirect to a URL that is inside your website not an external URL. And use 

44
04:02.460 --> 04:03.600
wp_redirect

45
04:03.620 --> 04:09.590
otherwise, if you want to go to an external URL.  So it takes a "location" and the "location" we need it to

46
04:09.590 --> 04:11.240
be the home URL.

47
04:16.800 --> 04:18.510
And of course after redirecting

48
04:18.540 --> 04:24.640
we should always call "die" or "exit" in order to avoid any further code execution.

49
04:24.720 --> 04:31.160
So let's try this. Let's try delete the post that we created.

50
04:31.260 --> 04:33.270
So let's create a new post to delete it.

51
04:33.300 --> 04:38.140
We don't want to delete these posts because we will use them in testing later.

52
04:38.880 --> 04:40.970
Let's create a new dummy post.Let's call it "test".

53
04:45.040 --> 04:54.750
And let's  now try and delete it. And as you can see it's deleted and we are redirected to home URL.

54
04:54.860 --> 05:00.830
And to make sure let's go to the posts. And you'll find it in the trash.

55
05:00.960 --> 05:02.850
So let's restore this.

56
05:03.370 --> 05:06.610
I don't I think I delete this by mistake.

57
05:06.640 --> 05:09.960
Let's just restore them in order to do some more testing.

58
05:10.990 --> 05:19.430
So logon now as let's open a new incognito window in order to just be able to log in as another user.

59
05:20.030 --> 05:21.020
So "localhost".

60
05:24.600 --> 05:26.960
And we call the test and test

61
05:32.320 --> 05:36.120
And let's now try and delete. As you can see it's deleted.

62
05:36.340 --> 05:42.010
However the Subscriber user type that we are logged in with should not be able to delete this.

63
05:42.010 --> 05:44.520
So this is a big security breach here.

64
05:44.560 --> 05:50.440
So let's go and restore the post back.

65
05:50.510 --> 05:55.880
So now it's time to use the current_user_can() in order to check for capabilities.

66
05:56.100 --> 06:03.890
So let's go to our code. So after we make sure that the the post exists,

67
06:04.040 --> 06:07.710
You also need to make sure that the current user can delete it.

68
06:08.270 --> 06:14.600
So let's write another if condition. And then "current_user_can()".

69
06:19.240 --> 06:27.660
And then let's try a capability called "delete_posts".

70
06:27.740 --> 06:30.630
Let's actually try and see what will this output.

71
06:31.150 --> 06:33.890
Let's try it in the where we output the link.

72
06:33.950 --> 06:40.170
Let's "var_dump" this. What will be written from this?

73
06:40.430 --> 06:48.730
And let's see our posts. So as you can see it returns "true". And that makes sense because this is an Admin,

74
06:49.030 --> 06:51.070
so he can delete any post.

75
06:51.370 --> 06:55.500
And here it returns "false" because this is a Subscriber and he can't.

76
06:55.620 --> 07:05.560
He does not have the privilege to delete posts.  Now let's however change the user from Subscriber to

77
07:08.050 --> 07:09.670
an Editor.

78
07:11.430 --> 07:12.190
An update it.

79
07:15.140 --> 07:20.980
And as you can see now it will return "true" because an Editor can delete posts but he can only delete

80
07:21.010 --> 07:28.750
his posts. So this capability that we used here is a bit generic.

81
07:28.770 --> 07:35.580
So yes the Editor can delete posts but he can't delete all posts. So there are some kinds of capabilities

82
07:35.580 --> 07:42.650
called meta capabilities and they are usually singular. So "delete_post" or "delete_user" or something singular.

83
07:43.230 --> 07:48.090
And they take a second argument and the second argument is the object that you want to check that they

84
07:48.150 --> 07:49.400
can delete.

85
07:49.440 --> 07:56.760
So in our case we can pass a certain post ID and the current_user_can() will check if they can eat this specific

86
07:56.760 --> 08:01.340
post and the posts generally. So let's pass it get_the_ID().

87
08:06.110 --> 08:11.880
And now here we are logged in as Admin so it will always return "true".

88
08:11.960 --> 08:14.180
And here it also returns "true".

89
08:14.180 --> 08:16.670
I don't know why. I think.

90
08:16.760 --> 08:17.310
Sorry I think the

91
08:20.780 --> 08:24.990
the Author is not allowed to delete other people's posts. So let's try that.

92
08:28.130 --> 08:31.600
And yeah. It now returns "false" for the Author user type

93
08:31.680 --> 08:36.250
if the post is not his post. But let's now create a post as an Author.

94
08:40.030 --> 08:48.870
And let's view the homepage. And now as you can see it returns "true" for this post because it's his. And

95
08:48.880 --> 08:50.990
"false" otherwise.

96
08:51.090 --> 08:52.760
So I hope this is clear.

97
08:52.790 --> 08:55.320
Let's now go back now to the code and use this

98
08:55.370 --> 09:01.570
check. Let's copy this and we need to check that when we handle the form,

99
09:02.250 --> 09:05.690
the URL. But now instead of get_the_ ID()

100
09:05.940 --> 09:11.430
we need to pass the post ID that is in the URL.

101
09:12.420 --> 09:18.230
So if he cannot we will return.

102
09:18.260 --> 09:20.130
So let's try this now.

103
09:24.540 --> 09:32.900
So let's try to delete a post as an Admin. And it should be deleted and let's restore it.

104
09:36.070 --> 09:38.920
And let's now go to the Author user type.

105
09:41.150 --> 09:48.120
Try to delete a post that is not his post which is "test". And it won't get deleted. Now let's try delete

106
09:48.120 --> 09:51.140
his post and now it's deleted.

107
09:51.280 --> 09:52.860
So of course you can display an error or something

108
09:52.870 --> 09:58.770
if he has no permission to delete. But that's not the point of this feature we just needed to take a

109
09:58.770 --> 10:01.240
look at the user capabilities.

110
10:01.290 --> 10:07.490
What we can do real quick here is we can add this check all to here.

111
10:14.050 --> 10:18.600
So if the current user can. And let's remove the

112
10:18.640 --> 10:19.760
"!" this time.

113
10:20.120 --> 10:29.020
And here we'll need the ID, get_the_ID(). So the user can display the link else just do nothing.

114
10:29.410 --> 10:39.260
So now let's restore our post. And now we should have the Delete link in all of them because Admin. But here we

115
10:39.260 --> 10:44.070
will only have the Delete link for the ones that we can actually delete.

116
10:44.190 --> 10:46.440
We still have another problem though.

117
10:46.440 --> 10:52.440
Imagine if someone knows how to delete a post on your website. So he knows that if you, let's copy this link,

118
10:53.160 --> 10:59.260
he knows that if you visited this link you will delete this post.

119
10:59.280 --> 11:04.160
So even if we check for capabilities someone might trick someone who is an Admin and there's an authenticated 

120
11:04.170 --> 11:07.710
user to click on this link.

121
11:07.710 --> 11:11.500
And if you click on this link the post will be deleted.

122
11:11.510 --> 11:17.440
So knowing the link is useless because you can't do anything with it except if you are a logged in user

123
11:17.580 --> 11:19.260
will have the privilege to delete it.

124
11:19.390 --> 11:25.690
But it's still can be an Admin user who can delete the post and someone might make you click on this link in

125
11:25.690 --> 11:26.650
some malicious way.

126
11:26.680 --> 11:32.940
Maybe send you this link in an email or something. So to tackle that WordPress provides what's called nonces.

127
11:33.070 --> 11:38.740
And this is a technique that will allow you as a developer to make sure that the user who clicks Delete

128
11:38.890 --> 11:43.380
really intended to click Delete and he was not just tricked into click in it.

129
11:43.510 --> 11:45.590
So let's see how that works in the next lecture.