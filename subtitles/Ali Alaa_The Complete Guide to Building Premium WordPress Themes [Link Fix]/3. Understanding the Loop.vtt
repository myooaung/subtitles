WEBVTT

0
00:03.210 --> 00:09.870
So in the last lecture we've written the loop. And we iterated through our posts and used template tags to get

1
00:09.870 --> 00:12.420
information about each post.

2
00:12.600 --> 00:19.950
So we checked that we have posts first using have_posts(). And then we mentioned that we should call a function

3
00:19.950 --> 00:24.290
called the_post() in order for template tags to work properly.

4
00:24.450 --> 00:26.980
And also in order to avoid an infinite loop.

5
00:27.330 --> 00:30.160
But we don't really know how these functions work,

6
00:30.180 --> 00:31.220
right?

7
00:31.290 --> 00:37.980
And in order to become a better developer and to be able to debug problems in your code, it's much better

8
00:37.980 --> 00:41.290
to understand what's going on behind the scenes.

9
00:41.430 --> 00:49.030
So to get posts from the database WordPress has a very powerful PHP class called WP_Query.

10
00:49.130 --> 00:55.830
This class accepts some query arguments and returns an object containing a lot of information and methods

11
00:56.070 --> 00:58.290
about this particular query.

12
00:58.320 --> 01:04.430
So let's say we want to create a widget that displays posts from a certain category.

13
01:04.560 --> 01:12.170
First we will initialize a new instance of the WP_Query class and pass it  our query arguments.

14
01:12.210 --> 01:18.680
So in our case we need to get the posts that have 
category, that has an id of 4 .

15
01:18.840 --> 01:23.000
Then we proceed and write the loop the same way we did in the last video.

16
01:23.460 --> 01:30.420
But this time we'll call have_posts() as a method of the query instance. And same for the_post() function.

17
01:31.640 --> 01:37.040
We'll also call it has a method of the query instance and not as a function like we did in the last video.

18
01:38.100 --> 01:41.670
And then we can use template tags the same way we did before.

19
01:44.690 --> 01:50.930
And that's actually not everything. You are writing a custom loop here which is different from the main

20
01:50.930 --> 01:51.830
loop.

21
01:51.830 --> 01:57.230
So in this case we must call a function called wp_reset_postdata().

22
01:57.260 --> 02:01.970
So notice that I said a custom loop and that a main loop.

23
02:02.360 --> 02:09.800
So what's the main loop and why did we write have_posts() and the_post() as functions and not as methods

24
02:09.890 --> 02:13.460
when we were writing the loop in the index.php file?

25
02:13.580 --> 02:18.350
And what is wp_reset_postdata()?  To answer these questions

26
02:18.350 --> 02:24.740
let's see what WordPress does when it receives the request. And by receives the request I mean, you know,

27
02:24.740 --> 02:28.430
when you type a URL in the browser like the one you see.

28
02:28.430 --> 02:35.400
So for the URL we see, you are now requesting a page for a category called unicorns.

29
02:35.520 --> 02:40.390
So WordPress will go and find all posts with category unicorns.

30
02:40.400 --> 02:42.920
And that's what the main loop loop through.

31
02:43.340 --> 02:50.250
So we've seen in the last slide, we defined a new variable and assigned it to a new instance of the WP_Query

32
02:50.270 --> 02:55.130
class to get the posts. WordPress does the same thing.

33
02:55.520 --> 03:02.780
It figures out the query from the URL and then it instantiates a new WP_Query class and assign

34
03:02.780 --> 03:09.210
it to a global variable called  $wp_query. So the global $wp_query now becomes the main query.

35
03:09.530 --> 03:11.900
And this loop is the main loop.

36
03:11.930 --> 03:18.350
Any other WP_Query instances like the one we did in the last slide are secondary queries.

37
03:18.350 --> 03:24.320
And the reason we call have_posts() in index.php directly as a function and not as a method

38
03:24.320 --> 03:31.340
of a class instance is that we were looping through the main loop. And what the function have_posts() actually

39
03:31.340 --> 03:32.420
is

40
03:32.420 --> 03:40.260
it's just a shortcut function that calls the method have_posts() for the global WP_Query class instance.

41
03:40.280 --> 03:46.370
So this is the source code for the have_posts() function. And it's essentially the same thing we did when

42
03:46.370 --> 03:48.340
we were writing our custom query,

43
03:48.530 --> 03:53.690
but now we're calling have_posts() for the global WP_Query instance.

44
03:53.690 --> 03:56.130
I know this might sound a bit confusing to some of you.

45
03:56.150 --> 03:58.600
So let's go back to index.php.

46
03:59.090 --> 04:05.990
And when we wanted to create a custom loop we created a variable. Let's call it $custom. And then we

47
04:05.990 --> 04:13.770
instantiate the new instance of the WP_Query class. And now to loop through the posts of the $custom 

48
04:13.960 --> 04:19.490
WP_Query instance, we call have_posts() as a method of the $custom instance,

49
04:19.490 --> 04:20.010
right?

50
04:20.330 --> 04:27.310
But now that we are looping through the main loop we just have to call the function have_posts(). And what

51
04:27.420 --> 04:30.890
the function have_posts() will do? It will call

52
04:30.960 --> 04:36.270
the have_posts() method on the global variable $wp_query.

53
04:36.300 --> 04:42.420
So if we type here in the if condition have_posts() of the class instance wp_query. The global

54
04:42.500 --> 04:44.300
variable $wp_query.

55
04:44.430 --> 04:45.890
It's exactly the same thing.

56
04:46.860 --> 04:52.540
have_posts() is just a wrapper function or a helper function that calls the method have_posts() on the global

57
04:52.960 --> 04:55.780
$wp_query. And same for the_post() function.

58
04:55.780 --> 05:01.570
So this is basically exactly the same thing as when we created a custom query only this time WordPress

59
05:01.580 --> 05:06.410
is responsible for creating the WP_Query instance depending on the URL.

60
05:06.760 --> 05:12.980
So I'm now using the var_dump() function to display the global $wp_query object.

61
05:13.120 --> 05:15.370
We would like to know what this object will contain.

62
05:15.460 --> 05:17.030
What will it look like?

63
05:17.260 --> 05:23.050
So if we refresh now the browser. As you can see it's a very large object.

64
05:23.320 --> 05:25.630
So let's view this a more formatted way.

65
05:25.880 --> 05:29.590
So add PRE tags around the var_dump() here.

66
05:34.450 --> 05:39.430
And let's take a look now. It's much clearer now.

67
05:39.740 --> 05:45.360
And as you can see, if we for example visit the category let's say unicorns,

68
05:48.940 --> 05:54.760
we will now have some query_vars as you can see. And if we scroll down we will find the key of posts

69
05:55.150 --> 05:59.780
and this key will contain all the post that the WP_Query class found.

70
06:00.100 --> 06:01.460
So here it is.

71
06:01.540 --> 06:06.560
And as you can see it's an empty array probably because this category does not exist.

72
06:06.730 --> 06:14.490
But if you go back now to the main page and see the same key. It's an array of 11 posts.

73
06:14.490 --> 06:22.620
So I hope now it's clear the difference between the main query and any other custom query that we write.

74
06:22.650 --> 06:30.810
So now that we've seen the $wp_query object in the browser and it looked something like this. This is just

75
06:30.840 --> 06:32.900
a short version of it.

76
06:32.940 --> 06:39.090
So this object had some information like the query vars and the post count.

77
06:39.090 --> 06:47.700
It also had a key called current_post. And it's initially -1. And it had the array of posts found. And it

78
06:47.700 --> 06:51.160
also had a key called post which is a post object.

79
06:51.360 --> 06:57.260
So let's now try to visualize what happens to these values when we start our loop.

80
06:57.300 --> 07:03.060
So imagine we have our main loop here on the left and we have the global $wp_query object

81
07:03.300 --> 07:09.970
on the right which contains as we saw in the last slide the post count, the current post, an array of posts

82
07:10.170 --> 07:11.550
and the post.

83
07:11.580 --> 07:15.810
So let's assume now we've found two posts for this query.

84
07:16.140 --> 07:24.030
So the post count will be 2 and the posts array will have two posts and the current post will be initially -1

85
07:24.050 --> 07:31.140
and the post will be the first post in the posts array. And we'll also have another global variable which

86
07:31.140 --> 07:32.940
is $post.

87
07:33.000 --> 07:38.220
Remember when we were discussing template tags and we mentioned that if you did not pass the post id

88
07:38.510 --> 07:39.930
to the template tag,

89
07:40.110 --> 07:44.050
it will get its value from a global variable called $post.

90
07:44.190 --> 07:49.690
So this is it. And initially its value will be the same as the post key

91
07:49.690 --> 07:53.670
in the $wp_query object. So it will also be Post 1.

92
07:54.030 --> 08:00.270
So let's go ahead now and trace the loop step by step and see how the values on the right will be

93
08:00.270 --> 08:01.030
affected.

94
08:02.010 --> 08:03.420
So the first line here,

95
08:03.510 --> 08:12.520
if ( have_posts() ). As we mentioned before the have_posts() function will call the have_posts() method on the 

96
08:12.590 --> 08:21.000
$wp_query global object. And this method inside the WP_Query instance will compare the post count and

97
08:21.000 --> 08:27.940
the current post. So the condition will be is current post + 1 less than post count.

98
08:28.080 --> 08:32.270
So in our case is zero less than 2 which is true.

99
08:32.520 --> 08:35.580
So have_posts() will return true. In the next line,

100
08:35.600 --> 08:36.720
while ( have_posts() ).

101
08:36.780 --> 08:39.100
So while 0 less than 2 which is true.

102
08:39.360 --> 08:42.570
So we will enter the loop and move to the_post().

103
08:42.690 --> 08:50.700
the_post() will also call a method called the_post() on the $wp_query  global object. And what this method

104
08:50.700 --> 08:56.660
will do is that it will increment the current post. So the current post is now will be zero.

105
08:57.000 --> 09:02.170
And  than it will set the post object to the first post in the post array.

106
09:02.370 --> 09:09.810
So the key post in the $wp_query object is now equals to Post 1 and also it will set the global $post variable

107
09:10.050 --> 09:11.750
to Post 1.

108
09:11.770 --> 09:15.900
Now we'll move to the_title(). the_title() without any ID provided

109
09:15.930 --> 09:22.650
will go to the global $post object and get its title from there. And this way we got the title of Post 1

110
09:22.680 --> 09:25.250
In the second iteration

111
09:25.360 --> 09:27.060
now current post is 0.

112
09:27.130 --> 09:31.560
So the condition be is 1 less than 2 which is true.

113
09:31.780 --> 09:34.610
So we will go to the_post().

114
09:34.730 --> 09:36.700
the_post() will call the_post() method

115
09:36.720 --> 09:42.810
in the $wp_query object. And this method will increment the current post by 1 and it will also set

116
09:42.930 --> 09:50.720
the post inside the $wp_query object and the global $post variable to the second post in the posts array.

117
09:50.740 --> 09:58.670
So now they will be Post 2. So now when we move to the next step and call the_title(). the_title() will go

118
09:58.670 --> 10:06.930
to the global $post variable and it will get the title of the post saved there, which is Post 2. And

119
10:06.930 --> 10:12.700
that's how the template tags get the right value without passing an ID to them.

120
10:12.700 --> 10:19.010
So now finally in the last ilteration we will have condition 2 less than 2 which is false.

121
10:19.140 --> 10:22.800
So the loop will now be finished.

122
10:22.890 --> 10:25.560
So I think it's clear now how the loop works.

123
10:25.920 --> 10:32.100
So remember in this slide when we were writing a custom wp_query and we mentioned that

124
10:32.100 --> 10:36.960
at any custom wp_query you must call a function called wp_reset_postdata() 

125
10:37.140 --> 10:38.350
when you are done with the loop,

126
10:38.650 --> 10:39.340
right?

127
10:39.780 --> 10:45.410
So now we need to know why do we call this function when we are writing a custom wp_query.

128
10:45.450 --> 10:49.090
So imagine we are displaying a template for a single blog post.

129
10:49.140 --> 10:54.450
So if you have a list of posts and you click on one of them you'll go to a page that will display more

130
10:54.450 --> 10:56.000
information about this post.

131
10:56.010 --> 10:58.210
So this is the single blog post.

132
10:58.260 --> 11:05.040
So in this case the $wp_query global object will only contain one post. Because we are not fetching a category

133
11:05.040 --> 11:12.670
or an archive or just fetching one post. So now the $post global object will be the first and the only post

134
11:13.480 --> 11:17.130
in the posts array in the $wp_query global object.

135
11:17.370 --> 11:24.370
Right? So now let's say we want to display the post title. So we will call the_title(). the_title() will go to

136
11:24.370 --> 11:28.780
the global $post object and it will get its title from there.

137
11:29.290 --> 11:35.020
And maybe you also would like to display the content. So we will call the_content() which we also go to

138
11:35.020 --> 11:39.030
the global $post variable and gets the content of this post.

139
11:40.110 --> 11:44.510
Now imagine we want to display the related posts for this post.

140
11:45.240 --> 11:52.180
Now you will have to write a custom query. This query will maybe gets the posts that share the same category

141
11:52.180 --> 11:53.950
as the main post.

142
11:54.710 --> 12:01.610
So notice now that when we start to loop in this custom query we will set in the global $post object

143
12:02.180 --> 12:10.140
to the first post in this custom query. And as we move forward we will set it to the second post and

144
12:10.140 --> 12:12.340
the custom query and so on.

145
12:13.560 --> 12:20.340
Now imagine after the related posts we would like to get the category for the main post, for the original

146
12:20.340 --> 12:20.980
post.

147
12:22.360 --> 12:26.280
You see the problem. The category template tag

148
12:26.410 --> 12:31.310
will go to the global $post object but it would have the wrong post.

149
12:31.350 --> 12:34.560
It will have the last post in our custom query.

150
12:34.870 --> 12:41.380
So that's why we call wp_reset_postdata() after any custom query to set the global $post object

151
12:41.740 --> 12:43.690
back to the original post.

152
12:43.780 --> 12:44.350
Right?

153
12:47.570 --> 12:54.240
So let's now take a quick look on some of the source codes for some of the WordPress functions that we saw.

154
12:54.620 --> 12:59.180
It's always a good idea to do that to maybe have a better understanding of what's going on behind the

155
12:59.180 --> 13:00.000
scenes.

156
13:00.290 --> 13:05.600
So here we have the have_posts() function. And we've seen that before.

157
13:05.660 --> 13:12.540
It just calls the have_posts() method in the $wp_query global object.

158
13:12.550 --> 13:15.880
So let's take a look at the have_posts() method

159
13:15.880 --> 13:26.820
in the WP_Query class. And what it does as we saw in the loop visualization, it compares the current post +

160
13:26.820 --> 13:29.640
1 with the post count.

161
13:29.940 --> 13:32.770
And if that's true it returns true.

162
13:33.300 --> 13:35.790
Otherwise it does some other things.

163
13:35.820 --> 13:38.700
We don't have to go into more details for now.

164
13:38.910 --> 13:47.410
Let's take a look now at the_post() function. And one of the things that it does is that it calls another

165
13:47.410 --> 13:56.360
method called next_post(). And the next_post() is responsible for incrementing the current post as we saw.

166
13:56.560 --> 14:02.300
And it also remember we had a property called post in the wp_query instance.

167
14:02.470 --> 14:09.160
So this function we set this post to the current post in the loop so we have the array posts. it was setted to

168
14:09.460 --> 14:19.040
the index of the current post, right? And it will also return  the current post.

169
14:19.110 --> 14:28.230
We also have the_title() and get_the_title(). You can have a look at these but I just want to show you 

170
14:28.230 --> 14:30.190
reset_postdata().

171
14:30.270 --> 14:35.970
So we've seen in the previous example that we can write our custom query that will override the global

172
14:35.970 --> 14:36.980
$post object,

173
14:37.010 --> 14:37.780
right?

174
14:38.310 --> 14:45.900
And this might cause some bugs as we saw in the example. So we use the wp_reset_postdata() function which

175
14:45.900 --> 14:51.040
will call a method called reset_postdata() in the WP_Query class.

176
14:51.150 --> 14:57.570
So what this method will do? It will reset the global $ post available to this post.

177
14:58.410 --> 14:59.860
And that is the post.

178
14:59.880 --> 15:03.240
Let's go back to the next_post() function.

179
15:03.240 --> 15:09.300
This next_post() will contain the current post in the $wp_query global instance.

180
15:09.300 --> 15:10.030
Right?

181
15:10.140 --> 15:14.280
So this would be the current post in the loop, the original post.

182
15:15.270 --> 15:24.380
So I hope this makes sense to you. Take your time and read these source codes and maybe I know this lecture

183
15:24.390 --> 15:26.970
might be kind of confusing to some of you.

184
15:27.120 --> 15:32.160
I think rewatching this lecture might make it a lot more clear.

185
15:32.160 --> 15:33.600
So that's it for now.

186
15:33.600 --> 15:35.040
See you in the next lecture.