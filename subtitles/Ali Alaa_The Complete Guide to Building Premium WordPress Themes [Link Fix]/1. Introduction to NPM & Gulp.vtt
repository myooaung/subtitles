WEBVTT

0
00:03.210 --> 00:09.750
So now we have a good understanding of how WordPress works. In this section we will deviate a little bit from

1
00:09.820 --> 00:15.720
WordPress stuff and will take a look at something interesting. What we're gonna do in this section

2
00:15.720 --> 00:18.680
is not required to actually create WordPress themes.

3
00:18.780 --> 00:24.740
However I think it's gonna be a very useful section. I think maybe it's the most important section

4
00:24.750 --> 00:30.290
in this course. Remember that we haven't yet loaded any CSS or JavaScript in our theme,

5
00:30.300 --> 00:31.470
right?

6
00:31.470 --> 00:36.480
I've actually intended to postpone this step a little bit because when you're working on a big theme

7
00:36.480 --> 00:42.420
or a theme that you're gonna sell to people, you will probably need to have your code organized and

8
00:42.480 --> 00:45.290
maintainable and easy to modify.

9
00:45.630 --> 00:52.420
In this section we will learn how to manage packages with NPM and automate tasks like compiling

10
00:52.420 --> 00:59.600
SASS to CSS, minifying CSS and JavaScript etc. And we will do that with a package called Gulp.

11
00:59.760 --> 01:02.940
In this lecture we'll have a very quick look on what is NPM and Gulp

12
01:02.970 --> 01:06.740
in case you don't know. But if you do, you can skip this one.

13
01:06.840 --> 01:14.070
So NPM is a package manager for JavaScript and it's used to manage JavaScript dependencies. NPM has a

14
01:14.070 --> 01:20.580
large online database that contains all the packages and is called the NPM Registry. And it also has

15
01:20.580 --> 01:26.120
a command line client in order to access the NPM Registry.

16
01:26.190 --> 01:28.390
So how exactly does NPM work?

17
01:28.530 --> 01:36.640
Imagine we have the NPM Registry, which contains pretty much all the packages you will need. And of course

18
01:36.640 --> 01:40.530
it's an online database. Now locally on your machine

19
01:40.780 --> 01:43.390
you need to access this database.

20
01:43.540 --> 01:46.670
So imagine this is the folder of our theme.

21
01:46.960 --> 01:50.560
So we have the lib folder and we also have the index.php and the other files.

22
01:50.560 --> 01:56.870
I just want to emphasize on node_modules folder and the package.json file.

23
01:56.930 --> 02:00.970
These two will be created once we install NPM in our folder.

24
02:01.020 --> 02:08.280
Now imagine this is our terminal or command line on Windows. If we have NPM installed on our machine,

25
02:08.830 --> 02:15.080
now inside the folder we can run "npm install" and then the package name. So for example "jquery".

26
02:15.150 --> 02:20.960
This will pull the juery package from the online database into the node_modules folder.

27
02:22.800 --> 02:27.300
So whenever you want to install or update a JavaScript plugin we won't have to create you know  JS

28
02:27.300 --> 02:31.420
folder and then download the code and then put it in the folder manually.

29
02:31.980 --> 02:35.920
And if we want to update it we will delete and replace.

30
02:35.970 --> 02:42.390
We can just manage everything with NPM using command line interface without doing anything manually.

31
02:42.390 --> 02:49.230
Another important feature of NPM is that if you are using a GIT repository for example you don't have

32
02:49.230 --> 02:55.200
to put the node_modules folder in the repository. The node_modules folder would probably be a very large

33
02:55.200 --> 03:01.320
folder with a lot of files and folders. And it will be a pain to move it around and track it on GIT

34
03:01.590 --> 03:03.100
and that sort of stuff.

35
03:03.180 --> 03:09.010
And the reason we don't need to include it in a GIT repository is package.json.

36
03:09.810 --> 03:16.450
package.json will keep track of plugins that we will install in a JSON file and it also includes the version

37
03:16.660 --> 03:18.850
that you want for each plugin.

38
03:18.850 --> 03:26.020
So once you have this file in your folder and you run "npm install" NPM will create the node_modules folder and install

39
03:26.020 --> 03:31.760
the plugins included in package.json. And that's why it's pointless to have node_modules in the repository.

40
03:31.770 --> 03:38.260
So always put node_modules folder in .gitignore file, right? As you can see in the NPM Registry

41
03:38.470 --> 03:40.330
we have a package called Gulp.

42
03:40.330 --> 03:45.130
So this is actually the first package that we are gonna use from NPM and it will help us in task

43
03:45.130 --> 03:50.340
automation. So Gulp is a tool for automating tasks in your development

44
03:50.410 --> 03:58.820
workflow. These tasks include you know compiling SASS to CSS and minifying CSS, transpiling

45
03:59.050 --> 04:08.010
new JavaScript versions to older ones in order to support older browsers, bundling multiple JavaScript

46
04:08.010 --> 04:14.530
files and package them into one file, compressing images and zipping files.

47
04:14.690 --> 04:21.020
I think it's better to start installing NPM and Gulp and see them in real life. So let's do that in the

48
04:21.020 --> 04:21.800
next lecture.