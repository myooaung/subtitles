WEBVTT

0
00:03.420 --> 00:07.680
It's time now to discuss a very important aspect in WordPress theme creation. 

1
00:08.070 --> 00:14.970
And the reason for its importance is that it concerns security. And that is validation, sanitization and

2
00:15.030 --> 00:17.300
escaping.

3
00:17.310 --> 00:22.350
So imagine this is the post creation page in the wp-admin.

4
00:22.590 --> 00:29.130
So we have our post title and the post content. And also imagine we have a custom field that is called

5
00:29.130 --> 00:34.880
price. And don't worry we will talk about custom fields later in the course.

6
00:34.890 --> 00:41.610
But briefly custom fields are just extra fields that we add to our posts in order to add more information

7
00:42.000 --> 00:43.710
in our post.

8
00:43.710 --> 00:49.140
So whenever we click Save, our data will go into the database.

9
00:49.140 --> 00:54.870
Now imagine this is the frontend of our website which our theme is responsible for.

10
00:55.910 --> 00:59.340
And we now want to display the data that we just saved.

11
00:59.540 --> 01:05.710
So we request the data from the database. And we just display the data somewhere in the theme,

12
01:05.780 --> 01:06.610
right?

13
01:06.980 --> 01:08.090
So sounds easy.

14
01:09.370 --> 01:15.730
But what if now the user enters something that is not a number. The value will be saved to the database

15
01:16.300 --> 01:19.100
and that's also will be displayed in the frontend.

16
01:22.480 --> 01:24.700
So we want to avoid this from happening. 

17
01:25.270 --> 01:32.160
And that's where we can use is validation. So validation is the process of comparing the data against the set

18
01:32.160 --> 01:39.040
of rules or patterns. And then decide whether to pass the data or just discard it.

19
01:39.050 --> 01:45.380
So in our case we want to make sure that the price is an integer. So we can parse the user input to a

20
01:45.380 --> 01:52.580
function called intval(). intval() will try to convert whatever the user typed into an integer and if it

21
01:52.580 --> 01:54.960
couldn't it will just return 0.

22
01:55.340 --> 02:00.080
So we can check if the return of this function is 0 then  we will discard the value.

23
02:00.590 --> 02:02.620
Otherwise we will pass it.

24
02:02.630 --> 02:10.770
So in our case what we typed will be converted to 230 and this is what will be saved in the database. If

25
02:10.870 --> 02:16.710
intval() however returns 0 we will discard the operation completely.

26
02:16.730 --> 02:21.820
You won't even touch the database, because our  data is invalid.

27
02:22.220 --> 02:26.690
So validation should be the very first thing to check before using the data.

28
02:26.720 --> 02:31.970
This way you will know whether you have valid data to work with or you just have to discard it.

29
02:32.360 --> 02:38.750
So this is the definition of validation according to WordPress. And validation is very strict.

30
02:38.750 --> 02:41.690
You have to decide whether your data is valid or not.

31
02:41.720 --> 02:43.160
There is no middle ground.

32
02:43.430 --> 02:51.270
And in order to perform validation you can use built in PHP functions like isset, empty, string length,

33
02:51.960 --> 02:54.710
preg_match, count, in_array and so on.

34
02:55.670 --> 02:59.330
And we'll  have some examples throughout this course. 

35
02:59.510 --> 03:06.200
You can also use some of WordPress's functions like is_email() to check if the value is a valid email or not.

36
03:06.830 --> 03:13.420
And other custom WordPress functions. I'll put a link to  these functions so you can read more about them.

37
03:13.440 --> 03:19.470
You can also create your own custom functions like maybe you need to check if a value is a valid U.S.

38
03:19.470 --> 03:23.910
phone number or a zip number and so on.

39
03:23.960 --> 03:29.600
Imagine now another situation where you maybe need to give your users some liberty to write whatever

40
03:29.600 --> 03:31.070
they want.

41
03:31.070 --> 03:36.680
So in our example let's say you need to give the user the ability to type the price as a string and

42
03:36.680 --> 03:42.480
not as a number. In order to type the currency symbol and not just the value.

43
03:42.590 --> 03:49.700
In this case it will be hard to validate the user's input and that's because there are no clear rules

44
03:49.910 --> 03:52.140
on what's valid and what's invalid.

45
03:53.020 --> 03:59.590
So in this case you can skip validation and whatever the user typed it will just appear in the 

46
03:59.590 --> 04:00.750
frontend.

47
04:00.820 --> 04:04.810
So that's very simple and we didn't have to do anything actually.

48
04:05.170 --> 04:11.470
But that's very unsafe. If you for instance have someone who does data entry for you. And this person

49
04:11.470 --> 04:13.350
maybe is not very trustworthy.

50
04:13.540 --> 04:17.530
He can maybe enter some malicious code here in the price field, 

51
04:17.530 --> 04:18.350
right?

52
04:18.520 --> 04:21.570
This code will be then saved to the database.

53
04:22.000 --> 04:26.190
And when you display it on your frontend the script will actually run.

54
04:26.440 --> 04:29.020
And this is very dangerous.

55
04:29.100 --> 04:36.090
So how can we give our users a bit of liberty but at the same time make sure that no code will be saved

56
04:36.090 --> 04:37.760
into the database?

57
04:37.800 --> 04:44.340
And the answer is sanitization. Sanitization is the process of cleaning your input data from anything

58
04:44.340 --> 04:51.120
that you would not like to save it to the database, like code for example.  WordPress provides us with some

59
04:51.120 --> 04:57.330
great sanitization functions like sanitize_text_field() for example which is used when you are expecting

60
04:57.330 --> 05:04.590
your data to be just text. Sanitization functions should be the last thing you do before saving it to your   

61
05:04.590 --> 05:05.970
database.

62
05:05.970 --> 05:09.790
That's why in the diagram I put it a bit close to the database.

63
05:09.900 --> 05:16.650
So clean your data and save. So sanitize_text_field() in our case will remove the SCRIPT tag and the value

64
05:16.650 --> 05:20.970
will be saved as 230 and thus when we display our data,

65
05:21.070 --> 05:22.710
no scripts will run.

66
05:23.190 --> 05:29.610
So as you can see unlike validation, sanitization can actually modify the data. In validation however you

67
05:29.610 --> 05:34.660
can either use the data or just discard it completely.

68
05:34.670 --> 05:38.390
So this is the definition of validation according to WordPress.

69
05:38.420 --> 05:43.610
So it's the process of cleaning or filtering your input data. So you can use it when you don't know

70
05:43.610 --> 05:49.240
what to expect or you don't want to be very strict with data validation.

71
05:49.250 --> 05:54.320
WordPress also provides a lot of great functions for sanitization. I'll put a link to them so you can read

72
05:54.320 --> 05:56.790
more about them.

73
05:56.950 --> 06:02.500
Now let's see if we have the same situation where we would like to give the user the liberty to type

74
06:02.500 --> 06:09.770
anything. And let us assume that we've done something wrong in our validation or maybe forgot to sanitize

75
06:10.550 --> 06:17.360
or maybe we've done our validation and sanitization but some malicious user managed to inject some

76
06:17.360 --> 06:19.080
code in our database somehow.

77
06:19.970 --> 06:27.250
So now we have some code sitting in our database. And when we display this data in the frontend this code will

78
06:27.260 --> 06:28.050
run, right?

79
06:29.240 --> 06:32.040
And this is where we will have to use escaping.

80
06:32.420 --> 06:39.860
Escaping is the process of securing the output by stripping some unwanted data like some HTML tags or

81
06:39.860 --> 06:41.360
SCRIPT tags.

82
06:41.370 --> 06:47.840
WordPress also provides some great escaping functions. But in our case we should use esc_html() since

83
06:47.840 --> 06:50.840
you are rendering HTML into the screen.

84
06:50.840 --> 06:57.620
So what the escaping will do is that instead of rendering the SCRIPT tag as code it will render it as

85
06:58.250 --> 06:59.830
text.

86
07:00.040 --> 07:03.750
So this way it would be harmless and nothing inside it will actually run.

87
07:04.180 --> 07:07.120
And this way we have prevented scripts from running

88
07:07.300 --> 07:14.980
even though it's saved in the database. So escaping is the most important part in this process because

89
07:15.060 --> 07:17.700
that's when we render data to our users.

90
07:17.950 --> 07:22.210
And it should be done the very last thing before outputting the data.

91
07:22.210 --> 07:26.470
And this is referred to as late escape.

92
07:26.560 --> 07:29.680
So here is the WordPress definition of escaping.

93
07:30.250 --> 07:32.530
And here are some of the escaping functions.

94
07:33.390 --> 07:40.150
esc_html() for example will be used if you are rendering something inside HTML tags. Like maybe rendering

95
07:40.210 --> 07:43.290
a title inside of H1 tags.

96
07:43.290 --> 07:50.070
We also have esc_url() when you're outputting a URL like for example in a "src" attribute or

97
07:50.130 --> 07:57.870
an "href". esc_js()  for when you are rendering in line javascript.

98
07:57.890 --> 08:03.800
We also have esc_attr() for when you are outputting something in an HTML attribute like

99
08:03.810 --> 08:06.810
maybe a "class" or a "title" and so on.

100
08:08.060 --> 08:10.130
And finally esc_textarea().

101
08:10.370 --> 08:17.970
When you're outputting something inside of a textarea. In some cases you can also use sanitization functions

102
08:18.090 --> 08:19.980
instead of escaping functions

103
08:20.160 --> 08:22.720
When you are rendering something in your theme.

104
08:23.130 --> 08:28.670
So let's take a quick look on the difference between sanitization and escaping.

105
08:29.070 --> 08:38.290
So suppose we have this text in our database. And now we want to output it in our theme. So escaping will

106
08:38.340 --> 08:46.470
render the HTML tags as text instead of rendering it as code, right? Sanitization

107
08:46.480 --> 08:50.650
however will not render the HTML tags at all.

108
08:50.650 --> 08:56.200
So depending on your situation you can either use escaping or sanitization functions when you render

109
08:56.200 --> 08:57.630
something in your theme.

110
08:58.030 --> 09:05.020
So I hope this is clear and if not don't worry we will use these functions a lot throughout this course.

111
09:05.440 --> 09:09.280
And I think by the time things will become more clear.

112
09:09.520 --> 09:16.350
In fact let's see in the code that we've written so far if we can use any of these functions.

113
09:16.540 --> 09:19.110
So let's open index.php.

114
09:19.720 --> 09:26.770
And let's check all the functions that get something from the database and see if we have to sanitize

115
09:26.800 --> 09:30.350
or escape any data.

116
09:30.370 --> 09:38.420
So here we have the_permalink(), we have the_title_attributes(), we have the_title() and we have the_excerpt().

117
09:39.010 --> 09:41.940
And also we've the two custom functions that we've written.

118
09:42.330 --> 09:49.630
So let's start with the_permalink(). So WordPress functions can sometimes need escaping and sometimes WordPress

119
09:49.730 --> 09:51.410
will just handle it.

120
09:51.440 --> 09:54.170
So in order to know let's Google the function.

121
09:59.310 --> 10:08.310
And let's click on this link. And then let's scroll down and see the discussion below.

122
10:08.600 --> 10:13.630
And as you can see in this example it's used directly without any escaping.

123
10:14.030 --> 10:20.990
And the reason is if we took a look at the source code for the function WordPress already echoes and escapes

124
10:21.320 --> 10:26.700
the result of get_permalink(), right?

125
10:26.750 --> 10:32.410
So when we use the_permalink() we don't have to escape because it's already escaped.

126
10:32.750 --> 10:38.930
If we use get_permanent() however we will have to escape. And we'll see that in the helper functions that

127
10:38.930 --> 10:41.840
we've written. We used get_permalink() in them.

128
10:41.840 --> 10:49.890
So in this case we will have to escape. But when we use the_permalink() there is no need to escape.

129
10:49.910 --> 10:56.330
So let's go back. We have the_title_attributes() and the purpose of this function is to actually clean 

130
10:57.110 --> 11:00.730
the title you know that will be used in the "title" attribute.

131
11:00.740 --> 11:04.490
So it's definitely safe to use this function without any escaping.

132
11:05.690 --> 11:14.450
the_title() is kind of debatable. By default WordPress does not escape the_title(), but they do that deliberately.

133
11:14.990 --> 11:22.070
And that's because some users like admins can actually type HTML in the title. So you can just escape

134
11:22.070 --> 11:22.690
the_title().

135
11:22.730 --> 11:30.200
This way you will be removing a feature that WordPress deliberately allows. So to keep the title safe

136
11:30.200 --> 11:37.160
just don't give any admin access to someone who's not trusted. Other user types like authors or contributors

137
11:37.640 --> 11:40.760
will not be allowed to type HTML in the title.

138
11:41.420 --> 11:42.880
And finally the_excerpt().

139
11:42.920 --> 11:43.920
It's also safe.

140
11:43.940 --> 11:45.720
WordPress will also handle it.

141
11:46.150 --> 11:53.480
So let's see the helper functions that we've written. And here we have get_permalink().

142
11:53.480 --> 12:01.470
And as we mentioned if we use get_permalink() and not the_permalink() we will have to escape it. And it's a URL so esc_url()

143
12:01.490 --> 12:07.970
and then get_permalink(). And then we have get_the_date().

144
12:08.260 --> 12:12.930
And this is probably safe but just in case we can also escape it.

145
12:12.930 --> 12:18.910
So this is an HTML attribute so we can use esc_attr(), right?

146
12:21.650 --> 12:23.860
And then we have get_the_date() again

147
12:23.870 --> 12:27.230
But inside HTML tags so esc_html().

148
12:33.320 --> 12:37.310
Next we have the author URL so we can use 

149
12:37.340 --> 12:53.730
esc_url() around the whole URL. And we've the author user name so we can use esc_html() for this one.

150
12:54.110 --> 12:57.360
get_the_permalink() is actually the same as get_permalink().

151
12:57.410 --> 13:02.500
It's just an alias. And it also needs escaping so let's esc_url().

152
13:05.610 --> 13:09.090
And then the_title_attribute() and get_the_title().

153
13:09.440 --> 13:12.790
We already mentioned that these are safe.

154
13:12.880 --> 13:16.810
So that's it for escaping and sanitization and validation.

155
13:16.810 --> 13:24.070
We haven't yet done any validation or sanitization. But when we get into the admin stuff, the wp-admin we will

156
13:24.070 --> 13:25.200
do a lot of them.

157
13:25.350 --> 13:26.920
So see you in the next lecture.