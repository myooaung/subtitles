WEBVTT

0
00:02.650 --> 00:09.750
So we've seen in the last lecture how we can allow other developers to hook into our themes code. We call

1
00:09.870 --> 00:16.560
do_action() and then other developers can add actions to this hook. WordPress actually implements the

2
00:16.560 --> 00:19.670
same concept in the WordPress core.

3
00:19.740 --> 00:25.770
Let's take a look at the WordPress source code you will find a lot of do_action() calls. And in the same way this

4
00:25.770 --> 00:30.970
will allow us plugin and theme developers to interact with the WordPress core.

5
00:31.200 --> 00:38.010
So for example there's an action called "plugins_loaded"

6
00:43.400 --> 00:48.840
and you can define a function that will run once WordPress loads the plugins.

7
00:48.950 --> 00:55.610
You can also run a function when WordPress first initialized with the "init" action.

8
00:55.790 --> 01:03.780
Some other actions accept arguments. For example there is an action called "save_posts" which obviously runs

9
01:03.780 --> 01:11.600
when you save a post. And inside your function you can actually get some arguments so in "save_post()" you

10
01:11.610 --> 01:17.720
get the $post_id and the actual $post object.

11
01:20.660 --> 01:23.600
So you can do something here with these variables.

12
01:23.600 --> 01:29.810
Let's make sure when you have more than one argument you must pass the number of arguments as the fourth

13
01:29.840 --> 01:31.820
parameter in add_action().

14
01:31.950 --> 01:38.400
So the second one is the priority and the default is 10 and this is the number of arguments. For more

15
01:38.400 --> 01:39.060
than one arguments

16
01:39.060 --> 01:40.890
you must specify this. So 2

17
01:40.910 --> 01:48.610
in our case. There are tons of actions that are included in the WordPress core in fact if we search for "action

18
01:48.610 --> 01:49.270
reference".

19
01:52.900 --> 02:01.720
You'll find this page and it includes all the actions that are included in the WordPress core. So we can actually

20
02:01.960 --> 02:08.020
do pretty much everything you would like to do to interact with the WordPress core. And in the same way

21
02:08.020 --> 02:12.020
we can hook into the WordPress core to add some code.

22
02:12.030 --> 02:18.320
WordPress can actually also hook into our theme in order to add some stuff. And we actually already did that.

23
02:18.340 --> 02:28.750
Remember in the header.php file we call the function called wp_head(). And what wp_head()

24
02:28.990 --> 02:30.070
actually is,

25
02:30.140 --> 02:34.570
it's a function that, let's take a look at it.

26
02:34.730 --> 02:42.140
It's a function that will actually call an action called "wp_head". So wp_head() actually calls

27
02:42.140 --> 02:45.410
do_action( 'wp_head' ).

28
02:45.430 --> 02:46.810
All right?

29
02:46.990 --> 02:55.580
So remember in the when we view the page source and we found that wp_head() added some stuff here, some

30
02:55.580 --> 03:02.300
scripts and some CSS. And the way this is actually possible is by WordPress registering some new

31
03:02.300 --> 03:06.430
functions to the wp_head hook in the WordPress core.

32
03:07.040 --> 03:20.110
So to further understand this let's search for the "wp_head hook". And I think it's this one.You'll

33
03:20.110 --> 03:21.110
find here

34
03:21.470 --> 03:27.360
that WordPress in the core of the WordPress. WordPress actually injects some functions the 

35
03:27.360 --> 03:29.030
"wp_head" hook.

36
03:29.420 --> 03:35.720
So these functions are actually responsible for displaying the stuff that we see here. And that's why coding

37
03:35.720 --> 03:41.830
wp_head() in your theme is mandatory. Because WordPress actually uses this hook to inject some stuff.

38
03:41.840 --> 03:45.710
in your theme. So let's actually try to use this hook here.

39
03:46.330 --> 03:56.740
So I'm gonna remove this "save_post" and let's skip the function name. It's not important for now.

40
03:56.950 --> 04:02.260
Then let's echo some

41
04:02.510 --> 04:04.450
maybe a STYLE tag.

42
04:11.660 --> 04:12.960
And let's change

43
04:16.150 --> 04:24.300
the background color of the body.

44
04:24.350 --> 04:28.400
And let's make it important. So we can make sure we will.

45
04:33.950 --> 04:45.220
As you can see let's refresh the page source. I'm not sure  if you can see, we've injected some CSS STYLE tags using the

46
04:45.310 --> 04:46.560
wp_head() function.

47
04:47.250 --> 04:49.930
So you might be wondering why haven't we done that.

48
04:51.600 --> 04:59.590
instead when we were enqueuing our CSS files instead of the enqueue "wp_enqueue_scripts" action.

49
04:59.690 --> 05:07.410
And the reason is that wp_enqueue_scripts does more than just injecting the script in the HEAD

50
05:07.430 --> 05:15.200
tag. It's actually responsible for making sure also no duplicate styles are included and 

51
05:15.200 --> 05:19.270
the dependencies are included and the versions and all that stuff.

52
05:19.280 --> 05:23.220
So this is the proper way to add styles and scripts to WordPress.

53
05:23.600 --> 05:24.950
You should never do that.

54
05:24.950 --> 05:25.630
Right?

55
05:25.640 --> 05:32.810
So I hope it's now clear that we can hook into the WordPress actions that are already defined by Wordpress

56
05:33.490 --> 05:34.870
and you have a list here.

57
05:36.110 --> 05:40.190
And WordPress actually can hook into our theme by calling functions like

58
05:43.010 --> 05:47.420
the wp_head() and the wp_footer() also.

59
05:47.570 --> 05:54.420
So one more thing I want to clarify in the actions, you can not just to echo something like we've done

60
05:54.420 --> 05:55.250
so far,

61
05:55.620 --> 05:58.830
you can actually run any kind of PHP script.

62
05:58.830 --> 06:04.800
So for example we have an action called "pre_get_posts", all right?

63
06:10.260 --> 06:19.620
And what that action does? Remember in the when we were discussing the wp_query and we said that we 

64
06:19.860 --> 06:23.760
have a global variable that holds all these posts that will loop through,

65
06:23.760 --> 06:24.680
right?

66
06:24.780 --> 06:31.770
And all these posts are retrieved using a function called get_posts(). If you don't remember that

67
06:31.770 --> 06:35.430
you can go back to the lecture where we discussed the loop.

68
06:35.600 --> 06:41.430
So "pre_get_posts" actually allows you to do something before calling get_posts().

69
06:41.570 --> 06:42.350
So what you can do

70
06:45.420 --> 06:52.710
is you can modify the global  $wp_query object before getting the post. So you can change the get_post() function

71
06:52.710 --> 06:53.320
behavior.

72
06:53.400 --> 07:01.790
So this action gets the $query as a parameter. And inside a function you can do whatever you want with

73
07:01.790 --> 07:04.830
the $query object, modify, change some stuff in it.

74
07:09.380 --> 07:21.350
I just wanna search for the "wp query class" and show you how WordPress actually implements actions in the core. So we have the

75
07:21.350 --> 07:25.730
source code for the WP_Query class here. Let's view it.

76
07:26.290 --> 07:29.960
And let's search for get_post.

77
07:33.440 --> 07:34.130
Here it is.

78
07:34.240 --> 07:39.890
So this is the get_post() function that is responsible for getting the post according to the query as we discussed

79
07:39.890 --> 07:40.960
before.

80
07:41.440 --> 07:47.550
And here is the "pre_get_posts" action. So WordPress is actually calling do_action()

81
07:47.640 --> 07:51.460
and this is another way to call do_action().

82
07:51.480 --> 07:56.180
The difference is just this one allows you to pass an array of parameters here.

83
07:56.670 --> 08:04.440
So the array of parameters here is $this. And $this here refers to the current instance of WP_Query. And that's

84
08:04.440 --> 08:07.180
actually what we get past here this $query.

85
08:07.380 --> 08:10.130
So this filter will run before calling

86
08:10.140 --> 08:14.940
get_posts() for any wp_query loop, right?

87
08:14.960 --> 08:22.270
So after modifying this, WordPress will go and use the modified one that you actually modified using

88
08:22.270 --> 08:24.000
the action.

89
08:24.100 --> 08:26.680
So what we can do is maybe you can check

90
08:29.370 --> 08:32.500
if the query is main query.

91
08:32.770 --> 08:40.480
Remember the difference between main query and a secondary query. So if it's a main query

92
08:41.210 --> 08:41.870
let's

93
08:46.050 --> 08:47.740
set the

94
08:48.180 --> 08:51.920
maybe the "posts_per_page"

95
08:55.300 --> 08:55.670
to 2.

96
08:59.550 --> 09:00.980
Let's see what will happen.

97
09:01.560 --> 09:04.170
So in our main query we only have two  posts now.

98
09:07.400 --> 09:14.700
So you can actually use this "pre_get_posts" action later in an advanced section in this course. It could be useful

99
09:14.700 --> 09:22.100
to implement and advance search or any feature that we're required to, you know, change the behavior of the query.

100
09:22.890 --> 09:30.840
Another thing I want to point out is there is a function called remove_query, remove_action(), sorry, that

101
09:30.840 --> 09:36.390
will remove a certain or unregister a certain function from an action.

102
09:36.570 --> 09:43.290
So maybe we as theme developers added some action and somebody another developer needs to remove

103
09:43.290 --> 09:52.080
it to override that. So he can call a remove_action() and the action name and also the function name.

104
09:55.450 --> 10:02.470
Let's also make sure that if you call add_action() with arguments with let's say priority and the

105
10:03.370 --> 10:09.770
number of arguments, you should do the exactly same arguments for the remove_action(). Otherwise it won't

106
10:09.770 --> 10:10.330
work.

107
10:12.000 --> 10:13.020
You might be wondering

108
10:13.200 --> 10:20.880
we are calling these add_action() hooks in the functions.php file which is actually inside our theme.

109
10:20.960 --> 10:21.940
So what's the point of that?

110
10:21.940 --> 10:23.740
This way we're also modifying the theme.

111
10:23.830 --> 10:29.380
So if another developer's needs to interact with some action hook,he needs to modify functions.php

112
10:29.400 --> 10:31.630
which is actually modifying the theme,

113
10:31.630 --> 10:32.360
right?

114
10:32.710 --> 10:38.470
And the answer to this is actually other developers won't have to add these add_action() calls in

115
10:38.470 --> 10:44.230
functions.php, they can add it in what referred to as child themes. And we'll take a look at child themes

116
10:44.230 --> 10:45.670
in a couple of lectures.