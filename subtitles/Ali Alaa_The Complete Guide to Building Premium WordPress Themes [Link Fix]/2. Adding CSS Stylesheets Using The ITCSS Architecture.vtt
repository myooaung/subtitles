WEBVTT

0
00:03.450 --> 00:09.180
So as I mentioned before this is not a CSS or a design course, we just need to focus on WordPress

1
00:09.180 --> 00:10.870
functionality.

2
00:10.890 --> 00:17.570
So I've written some CSS here as you can see organized into some folders.

3
00:17.950 --> 00:21.940
So I just want to talk about this organization

4
00:21.970 --> 00:27.420
little bit in this course. And of course it's up to you if you want to follow my structure or not.

5
00:27.630 --> 00:33.480
I just felt like I need to talk about my CSS structure and naming conventions, so you can get these SASS folders

6
00:33.480 --> 00:38.100
from the repository and copy them and just compile in order to save some time.

7
00:38.100 --> 00:48.120
So the CSS architecture we're using for this project is called the ITCSS or the inverted triangle CSS. And

8
00:48.120 --> 00:54.840
the idea is to divide your CSS into these layers here, where the higher there will be the most generic

9
00:55.200 --> 00:57.830
and we have the lowest specificity.

10
00:58.080 --> 01:04.170
And as we go down our style will become more explicit and will have higher specificity. So you can

11
01:04.170 --> 01:05.120
read more about that.

12
01:05.130 --> 01:13.650
I won't go into more details. But let's just break down these layers and see what each one of these will contain.

13
01:13.650 --> 01:16.740
So we have the

14
01:19.330 --> 01:27.190
settings layer and this will contain our SASS variables. The global SASS variables that we will use throughout

15
01:27.310 --> 01:32.970
all of our SASS files like the, you know, fonts and colors and stuff like that.

16
01:33.220 --> 01:41.330
The second layer is tools and this will be also SASS functions or mixins that we will use throughout

17
01:41.330 --> 01:46.070
our SASS files. And the generic layer.

18
01:46.240 --> 01:53.870
And this one will contain, you know, very generic CSS like normalizing CSS across browser, so CSS

19
01:53.900 --> 01:54.320
presets.

20
01:54.340 --> 02:00.760
So, you know, just a general global rules. And then we have the elements layer.

21
02:00.910 --> 02:03.750
And this one is for bare unclassed HTML elements

22
02:03.900 --> 02:08.800
like the H1 tag without any class or the P tag without any class .

23
02:08.800 --> 02:10.260
How will they look like?

24
02:10.390 --> 02:11.590
And then the objects.

25
02:11.710 --> 02:17.890
And this is for styling non cosmetic design patterns like layouts and grids.

26
02:17.890 --> 02:23.250
It does not deal with, you know, specific styles for a component just a skeleton or a layout.

27
02:23.620 --> 02:25.190
And then we have the components.

28
02:25.390 --> 02:33.270
And this is where we get very specific and start, you know, styling pieces of UI like a widget or a header or

29
02:33.300 --> 02:35.200
footer stuff like that.

30
02:35.290 --> 02:40.630
And then finally trumps. And these are layers with the highest specificity. You can use important with that

31
02:40.630 --> 02:47.110
to override any other style that the element has to, for example text center would force the text aligned

32
02:47.110 --> 02:49.590
to be center using importance.

33
02:49.600 --> 02:54.400
So this layer have the highest specificity and it comes last in our pyramid.

34
02:54.400 --> 02:59.140
So I just wanted to summarize these layers here but you can read more about it.

35
02:59.410 --> 03:04.700
There's a lot more to read here in this article I will put a link in the lecture links.

36
03:04.720 --> 03:08.470
I also use the BEM naming convention for CSS.

37
03:08.580 --> 03:14.360
You might have heard about this but if not I'll put a link to this article.

38
03:14.650 --> 03:20.280
And I also use what is referred to as name spacing.

39
03:20.590 --> 03:26.010
So I'll also put a link to this article but to summarize name spacing is just prefixing your CSS classes

40
03:26.080 --> 03:35.140
with some symbols in order to, you know, signify what type of an element it is. So we just mentioned

41
03:35.200 --> 03:41.650
that we have our layers here and we said we have, you know, objects and components and trumps.

42
03:42.190 --> 03:46.240
So these will translate to certain namespaces for our CSS classes.

43
03:46.270 --> 03:52.840
So for example, "o-" before the CSS class name will signify that this is an object. And "c-" component

44
03:52.900 --> 03:56.710
and "u-" utility class which are trumps

45
03:56.710 --> 03:59.730
in our case. And so on.

46
04:00.100 --> 04:05.060
So if you see that in my code, just you know, refer to this article.

47
04:05.450 --> 04:13.310
Also we have, if we, if you go to "codex.wordpress.org/CSS" 

48
04:13.660 --> 04:17.700
you'll find some bits of CSS here that you should include in your theme.

49
04:18.010 --> 04:24.130
So when you create a post and let's say you have an image and you align this image to left or right

50
04:24.520 --> 04:31.260
WordPress will generate a class in your frontend align right, align left, align center and so on.

51
04:31.750 --> 04:34.130
And these are not styled by default.

52
04:34.120 --> 04:40.720
You should add these classes in your style sheets. so WordPress provides you these styles here that you can

53
04:40.870 --> 04:42.720
use in your theme or modify.

54
04:42.820 --> 04:46.440
So I did that and I will show you in code.

55
04:47.140 --> 04:48.920
In fact we can do this now.

56
04:49.110 --> 04:54.790
So let's see how all what we've discussed will translate in code. So we have folders here and each one of

57
04:54.790 --> 04:56.850
these folders represent a layer.

58
04:57.160 --> 05:02.640
So we have the components. You can view one of these like the post components so we have "c-post".

59
05:02.650 --> 05:08.650
Because it's components and we have the BEM naming convention here as you can see the "__".

60
05:09.010 --> 05:16.520
So we also have the elements which we mentioned will be just displaying HTML elements without any styles.

61
05:16.600 --> 05:21.050
So we've the buttons and the inputs and so on.

62
05:21.100 --> 05:27.230
We also have the generic. The generic layer is the most generic CSS.

63
05:27.640 --> 05:35.140
So if we have CSS that targets all elements, the "*" and also the normalization.

64
05:35.500 --> 05:44.200
So here I've installed normalize.css using "npm install normalize.css" and than include it from the

65
05:44.200 --> 05:45.430
node_modules folder.

66
05:45.700 --> 05:51.370
And in case you don't know normalize just normalizes the CSS between different browsers because each browser

67
05:51.370 --> 05:58.150
will have certain default styles. So this library will just make all browsers look the same. And we have

68
05:58.150 --> 05:58.900
the objects.

69
06:02.110 --> 06:05.260
So I have my grid system here.

70
06:07.160 --> 06:16.160
You know some loops and some variables. And the "_wp" is the file that I just mentioned,

71
06:16.180 --> 06:18.730
this one. I modified some stuff and

72
06:18.730 --> 06:27.730
I added a SASS makes and converts pixels to rems and you know stuff like that. And the settings which was

73
06:27.940 --> 06:30.910
the first layer that will have some,

74
06:31.020 --> 06:32.520
you know, global variables.

75
06:35.440 --> 06:41.420
And the tools which are global mixins and functions.

76
06:41.420 --> 06:48.290
So I have some functions here that are borrowed from foundation that converts pixels to rem which is really

77
06:48.290 --> 06:48.830
useful.

78
06:48.890 --> 06:52.190
And we have the last layer which is the trumps.

79
06:52.220 --> 06:53.840
I called it utility here.

80
06:54.840 --> 06:59.930
So I have some some classes that will add some margin.

81
06:59.930 --> 07:08.360
And it uses "!important" so it will force that margin to be put in the element. And also some helper functions

82
07:08.360 --> 07:11.070
like, remember the "screen-reader" class.

83
07:11.080 --> 07:12.240
Here it is now.

84
07:13.400 --> 07:16.010
And we have some others that we'll use later.

85
07:17.300 --> 07:21.670
And also some classes for flex and stuff like that.

86
07:21.780 --> 07:29.410
And then finally in the bundle, I just add these files in order. So the settings first and then the tools and

87
07:29.420 --> 07:33.380
then generic and elements and so on.

88
07:33.810 --> 07:40.150
So that was just a summary of how I organize my CSS. You can totally ignore that and use your own implementation.

89
07:40.290 --> 07:43.470
I just needed to talk about how I did it.

90
07:44.040 --> 07:59.430
Let's now change to our theme and run "npm run start" and make sure you have your MAMP server open.

91
07:59.520 --> 08:01.460
So this is how it looks like now.

92
08:01.750 --> 08:08.430
In the next lecture we're gonna add some classes from the CSS I just loaded in order to make this look, you know,

93
08:08.700 --> 08:09.420
much better.

94
08:09.630 --> 08:10.530
See you in the next lecture.