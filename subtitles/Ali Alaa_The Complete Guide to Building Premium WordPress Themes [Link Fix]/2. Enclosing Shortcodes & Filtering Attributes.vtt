WEBVTT

0
00:03.270 --> 00:07.150
So in the last lecture we created these two simple shortcodes here.

1
00:07.500 --> 00:10.110
Let's see what else shortcodes can do.

2
00:10.620 --> 00:17.520
So let's go to the backend again. And what we created here is called a self-closing.

3
00:17.830 --> 00:21.120
shortcodes because closed we should go this way.

4
00:21.570 --> 00:30.220
Other kinds of shortcodes are called enclosing shortcodes. And encluding shortcodes are shortcodes which can have content

5
00:30.250 --> 00:33.750
inside of them. Solet's remove this"/" now.

6
00:34.000 --> 00:37.660
And let's close this shortcode in a different way.

7
00:39.590 --> 00:43.200
So let's copy its name and close it this way.

8
00:43.200 --> 00:45.760
And now you can have some content inside of here.

9
00:46.010 --> 00:54.180
So let's say we would like to have the text for the button inside the tags instead of having it as an attribute,

10
00:55.050 --> 00:55.430
like so.

11
00:58.820 --> 01:04.680
And now we'll have the default button because you are using an attribute here.

12
01:05.000 --> 01:11.890
So let's now instead of using this text attribute use what's inside the shortcode text.

13
01:12.050 --> 01:18.720
So in our shortcode function we receive a second argument which is the $content. And always default this content to "null"

14
01:18.730 --> 01:24.020
also the attributes let's default them to an empty array.

15
01:24.430 --> 01:31.000
So in case there is no content we can know that this is a self-closing shortcode. If we have content

16
01:31.010 --> 01:36.740
then there is some content inside the shortcode tags. And what we'll have to do now is instead of the text,

17
01:36.790 --> 01:37.870
we'll use the $content.

18
01:41.320 --> 01:43.700
And as you can see we have our text back.

19
01:44.050 --> 01:49.090
So of course for a button this might not make sense really the attribute was just fine but I just want

20
01:49.090 --> 01:52.620
to illustrate the enclosing shortcodes.

21
01:52.930 --> 01:53.410
One more thing.

22
01:53.410 --> 01:57.030
Let's say we want to add an icon in the button text.

23
01:57.520 --> 02:02.400
So let's say we'll have this shortcode inside our button shortcode.

24
02:02.920 --> 02:05.470
So we'll have an icon and then the text.

25
02:05.660 --> 02:11.980
Let's update and as you can see we have the shortcode as text here.

26
02:12.450 --> 02:18.200
So when WordPress parses your  shortcodes it will parse only one level of shortcodes. If you have nested

27
02:18.200 --> 02:24.000
shortcodes like in this case you have to handle this when you define your shortcodes.

28
02:24.030 --> 02:31.790
So when we define our button shortcode and when we output the content here, let' remove esc_html() 

29
02:31.800 --> 02:33.540
because we'll have an I tag.

30
02:33.840 --> 02:37.840
You can write a custom function to allow only I tags and so on.

31
02:37.910 --> 02:39.250
We've done that before.

32
02:40.080 --> 02:48.460
And instead of just outputting the content let's call a function before it called do_shortcode(). And do_shorcode() will

33
02:49.000 --> 02:53.330
take a string which is our content and it will find any shortcode in it

34
02:53.590 --> 03:00.560
And as the function says it will do it. It will output the HTML for this shortcode. So let's see now.

35
03:01.360 --> 03:06.500
And now we'll have our button with the icon and the text. Great so,

36
03:07.200 --> 03:12.150
whenever you create a shortcode that will have some content in it and you would like to allow adding

37
03:12.570 --> 03:19.050
other shortcodes inside your shortcode, you should always call do_shortcode() before outputting the content

38
03:19.080 --> 03:21.770
inside the shotcode tags.

39
03:21.780 --> 03:22.940
One more thing.

40
03:23.400 --> 03:28.250
Shortcode functions also receive a third argument called "tag".

41
03:29.340 --> 03:35.160
And let's default it to an empty string. And the "tag" is just a shortcode name which we defined here.

42
03:35.240 --> 03:42.110
So this $tag will contain "_themename_button" and this is optional but you can take this $tag

43
03:42.800 --> 03:43.420
and pass it

44
03:43.460 --> 03:50.210
as a third argument for the shortcode_atts() function. And by doing so you will allow filtering

45
03:50.320 --> 03:52.100
your shortcode attributes.

46
03:52.150 --> 03:57.560
So for any shortcode that has the "tag" passed in the shortcode_atts() function

47
03:57.730 --> 04:07.830
we can now add filter. And this filter will be called "shortcode_atts_"

48
04:07.860 --> 04:18.900
and then our shortcode name which in our case "_themename_button". And then we give

49
04:18.900 --> 04:21.030
it a function.

50
04:21.090 --> 04:29.370
So let's just call it anything we were just testing this filter. And let's define this function. And let's

51
04:29.370 --> 04:31.970
return a "color"

52
04:33.080 --> 04:33.950
"blue" for example.

53
04:38.460 --> 04:46.810
And let's see now. Now as you can see our shortcode color is blue although the default value for that is red.

54
04:46.900 --> 04:47.470
Right?

55
04:48.180 --> 04:51.350
But now we are able to filter our shortcode attributes.

56
04:51.710 --> 04:56.480
So I'm not sure what could be a use case for this but I just thought I would let you know that this

57
04:56.480 --> 04:57.560
exists.

58
04:57.680 --> 05:06.760
This filter also receives four arguments "out" and "pairs" and" attributes" and "shortcode".

59
05:08.540 --> 05:14.330
"pairs" will be the default attributes for the shortcode and "attributes" will be the attributes that the user

60
05:14.330 --> 05:20.170
passed the shortcode. And "shortcode" will be the shortcode name and "out" will be the output

61
05:20.170 --> 05:22.290
of the pairs and the attributes.

62
05:22.380 --> 05:27.520
It's if we give pairs and attributes to the shortcode_atts() function.

63
05:27.640 --> 05:36.420
So you can somehow use these variables here and return a new array to filter your shotcodes attributes.

64
05:36.700 --> 05:36.910
Right?

65
05:36.910 --> 05:39.960
So let's remove this.

66
05:40.180 --> 05:42.500
One final note for this lecture.

67
05:42.640 --> 05:47.710
You cannot nest two shortcodes with the same name together.

68
05:47.740 --> 05:52.370
So for example we cannot add "_themename_button" inside the "_themename_button", like so.

69
05:52.450 --> 05:55.020
WordPress will not understand this.

70
05:55.030 --> 05:57.670
And things might get a little messed up.

71
05:57.700 --> 05:58.860
So one use case for this.

72
05:58.870 --> 06:03.490
If you're creating rows and columns for example a grid system and you'd like to nest rows inside

73
06:03.490 --> 06:04.350
of each other.

74
06:04.660 --> 06:11.050
Unfortunately using shortcodes you cannot add shortcodes with the same name inside of each other.

75
06:11.050 --> 06:17.620
So I think you now know most of the important things about shortcodes. Let's in the next lecture

76
06:18.070 --> 06:21.730
move the shortcodes that we defined here in a plugin.

77
06:21.940 --> 06:28.240
And that's because like we did for the custom fields, we would like shortcodes to be available even if the user

78
06:28.240 --> 06:30.570
decided to change our theme,

79
06:30.610 --> 06:31.280
right?

80
06:31.510 --> 06:35.400
And this is actually a requirement by WordPress and Theme Forest.

81
06:35.830 --> 06:39.090
You cannot define shortcodes inside your theme.

82
06:39.130 --> 06:41.710
You should define them in a plugin. Ao let's do that in the next lecture.