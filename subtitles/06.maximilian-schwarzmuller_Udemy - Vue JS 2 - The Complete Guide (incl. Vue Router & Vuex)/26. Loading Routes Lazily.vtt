WEBVTT

00:02.000 --> 00:09.140
To conclude this routing module, I now want to go into an advanced topic which can really improve your

00:09.140 --> 00:11.190
bigger applications.

00:11.270 --> 00:12.870
Consider our application here,

00:12.890 --> 00:18.380
it's very simple but there's one thing we can notice, right now

00:18.440 --> 00:25.520
if we never click on user, all the code behind this link so all the components we created for that and

00:25.520 --> 00:27.900
so on will never be loaded,

00:27.920 --> 00:29.910
we won't use them at all.

00:30.050 --> 00:34.880
So it might be unnecessary to load them at the beginning of the application,

00:34.880 --> 00:37.590
now it does of course not matter for our tiny application here

00:37.610 --> 00:42.800
but for a bigger application with lots of code and lots of different features,

00:42.830 --> 00:47.720
this might really make a difference. If you're using a set up like we do with webpack where we bundle

00:47.720 --> 00:53.840
everything together into one file, then this has the disadvantage that whilst limiting the number of http

00:53.840 --> 00:59.420
requests you send, you might limit it too much because your bundle therefore is really big.

00:59.690 --> 01:05.380
So you want to find the right balance in having a big all in one bundle and loading stuff

01:05.390 --> 01:12.650
you only need at certain points of time, only at these points of time. With webpack, we can actually do this

01:12.950 --> 01:17.570
and you may simply google for lazy loading plus your preferred build system

01:17.570 --> 01:20.270
if you want to find out how to set it up there

01:20.300 --> 01:24.590
but webpack is pretty common, pretty popular so I will show it with this.

01:24.590 --> 01:25.980
So I always said it,

01:26.000 --> 01:27.220
it's called lazy loading

01:27.220 --> 01:33.620
what I'm talking about, lazy loading means we only need or we only load parts of the application when

01:33.620 --> 01:34.650
we need it.

01:34.970 --> 01:39.600
So back to our routing file, how can we prepare this for lazy loading?

01:39.620 --> 01:45.410
Right now, everything is loaded eagerly which means all the time because we added import statements at

01:45.410 --> 01:50.660
the top and everything which you import at the top will always be included in the bundle no matter if

01:50.660 --> 01:52.390
you use it or not,

01:52.400 --> 02:00.980
so we have to transfer these import statements here into another syntax.

02:01.350 --> 02:02.590
So I will get rid of them,

02:02.600 --> 02:09.670
I will always import home and header but now I want to lazily load the other four imports, the syntax now

02:09.680 --> 02:15.220
might look a bit strange but it's something you really just have to keep in mind, it's a syntax

02:15.240 --> 02:22.490
webpack will recognize, we'll therefore not include it into the initial bundle but instead, we'll create

02:22.490 --> 02:26.420
several other bundles. The syntax I'm talking about looks like this,

02:26.420 --> 02:31.750
we create a constant, user to also fit the name we use down there so that we don't have to adjust our

02:31.750 --> 02:38.450
code down there and then user simply is a ES6 function of where you pass resolve as a callback in there,

02:38.450 --> 02:40.180
as a function in there

02:40.460 --> 02:46.490
and in this function, we then want to call require ensure and now this is really just some code

02:46.490 --> 02:49.060
webpack will be able to execute and to recognize.

02:49.310 --> 02:52.790
So require ensure and this now takes an array

02:53.090 --> 02:57.820
and in this array, we set up the path to the component we want to load,

02:57.860 --> 03:03.080
so ./components/user and then user.vue,

03:03.160 --> 03:04.990
so like before in import statement,

03:05.000 --> 03:13.040
now nested in there. This is the first argument, this array, the second argument is another function where in

03:13.040 --> 03:19.940
the body of this function, we use the result function we passed in as an argument to call

03:19.960 --> 03:28.810
require components user user.vue again. Now this might look strange, what's happening here?

03:28.830 --> 03:37.310
It's some syntax webpack recognizers and it basically tells webpack whenever we want to load something

03:37.310 --> 03:40.610
which lives in this place, components user user.vue

03:40.670 --> 03:47.050
and we do want to load it for example once we visit the route using our user component here.

03:47.060 --> 03:55.280
So whenever we do this, execute this function here which is basically like a promise which means it resolves

03:55.280 --> 03:55.910
the path

03:55.910 --> 03:57.890
you should then really use.

03:57.890 --> 04:04.160
Now if we would have just require like this at the top, then webpack would see this in the same way

04:04.200 --> 04:09.960
it sees this import syntax, it's just a different syntax and would immediately load the file

04:10.160 --> 04:16.390
but by having it in this asynchronous function here which has to resolve before it gets executed, webpack

04:16.460 --> 04:23.090
is only doing this if we actually need that file and it will create appropriate bundles to be loaded

04:23.100 --> 04:29.030
at this point of time during the build process so that everything will work smoothly without us editing

04:29.060 --> 04:30.490
anything here.

04:31.190 --> 04:38.330
So with that, I can now copy this and yes, this arguably gets longer but it's worth it to save performance

04:38.330 --> 04:48.950
in bigger applications, for user start for example, then for user edit and also for user detail, like

04:48.950 --> 04:49.690
this.

04:49.970 --> 04:55.430
And now if we save this and we reload the application, we see it still works,

04:55.430 --> 04:56.450
this looks good

04:56.720 --> 04:59.070
but how can we tell if something changed?

04:59.450 --> 05:03.680
Well let's open the developer tools and go to the network tab here,

05:03.950 --> 05:08.410
if we go there and reload the application, you see a couple of files are loaded,

05:08.420 --> 05:13.670
most importantly our build file which is really big because it includes all the warnings, all the source

05:13.670 --> 05:16.310
maps, everything and it's not minified at all

05:16.310 --> 05:18.330
so don't be worried about that.

05:18.470 --> 05:25.040
Now let me clear this network tap and if I now click on user, you see there were two new panels

05:25.040 --> 05:25.810
downloaded,

05:25.810 --> 05:27.140
very small each,

05:27.320 --> 05:33.020
if I click on the individual user a new bundle was downloaded and if I click on edit user, yet another

05:33.020 --> 05:34.620
bundle was downloaded.

05:34.880 --> 05:38.120
I think you're seeing the theme here,

05:38.120 --> 05:46.790
these are the extra bundles webpack created because all these routes here, we set up here are now

05:46.790 --> 05:54.710
loaded lazily and this is how we can utilize this feature to make sure that in bigger applications,

05:54.800 --> 05:58.530
we only load parts of the application when we need it.

05:58.940 --> 06:05.690
As a side note, if you want to group certain pieces together into one sub-bundle, like that we don't want

06:05.690 --> 06:09.470
to have four user bundles, we want to store them in one extra bundle,

06:09.470 --> 06:17.310
you can group them by passing an additional argument here to our require ensure functions.

06:17.300 --> 06:25.240
So besides the array and this callback here, we then also have a third argument which is the group name,

06:25.250 --> 06:27.500
for example user.

06:27.500 --> 06:35.120
Now if we pass that to all our user related routes we set up here or the component imports, if we do

06:35.120 --> 06:43.150
this and then let's go back to our home page first, clear the console, click user, reload for build,

06:43.490 --> 06:46.250
but now you see we're not fetching any other files,

06:46.250 --> 06:47.560
it stays at this one file which

06:47.570 --> 06:53.780
of course now also is bigger because this file now includes all our user related files or pieces but

06:53.840 --> 06:59.200
that might be, might make sense, maybe you don't want to have a separate bundle for every component but

06:59.200 --> 07:03.520
you just want to group them together. And with that, you can do that using lazy loading

07:03.560 --> 07:06.040
and really therefore optimizing your application.
