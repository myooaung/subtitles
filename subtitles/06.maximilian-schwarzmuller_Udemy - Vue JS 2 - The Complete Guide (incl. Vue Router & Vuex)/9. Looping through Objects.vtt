WEBVTT

00:01.630 --> 00:07.660
Also, you're not limited to looping through arrays of single elements, you could also loop through

00:07.750 --> 00:13.150
arrays which hold objects or you can also loop through objects,

00:13.150 --> 00:19.460
let me show you. Above this template here since this really populates the whole field,

00:19.930 --> 00:26.830
I'll enter some new code, a horizontal line above and below so that we can clearly see it. Here

00:26.890 --> 00:36.310
I want to output an unordered list with a list item obviously, where I will use my for loop as before.

00:36.520 --> 00:43.360
Now I want to loop through persons, so I will loop through person in persons and then I could output

00:44.350 --> 00:47.800
person referring this person variable created by vuejs

00:47.800 --> 00:54.790
automatically here, since I named it like that, person.name for example. If I hit enter, we see

00:54.790 --> 01:00.760
Max and Anna here, that should be straightforward, it's the same usage as before, just using objects now

01:00.760 --> 01:04.080
but since I access the properties there like I always do,

01:04.200 --> 01:06.280
there's nothing special about that.

01:06.280 --> 01:13.060
Now let's say I don't want to use this default loop but instead I want to loop through all the key value

01:13.060 --> 01:18.010
pairs in that object, like in a for/in loop in normal javascript.

01:18.050 --> 01:21.290
Let's say I want to create a span for each key value pair

01:21.310 --> 01:28.810
and here I can use a nested for loop with v-for, I can nest them as much as I want and then looping

01:28.810 --> 01:35.360
through it is as simple as extracting the value in persons,

01:35.560 --> 01:37.310
so in person excuse me.

01:37.330 --> 01:43.840
So person here refers to the person up here in the outer loop, since I gave it that name and we're in this

01:43.840 --> 01:48.490
current iteration since we're in that specific list item and value,

01:48.490 --> 01:54.820
well that name was chosen by me but it will automatically be the value of each property,

01:54.820 --> 02:01.710
so I could output value here, just like that. If I now hit control enter,

02:01.870 --> 02:09.610
we see Max, 27, not very nicely formatted but you do see that these are the values of all the properties

02:09.730 --> 02:11.530
of these persons here,

02:11.770 --> 02:16.180
so that is how we can loop through properties of objects.

02:16.600 --> 02:24.580
Now as with arrays where we could also retrieve the index, for looping through objects, we can also not

02:24.580 --> 02:28.850
only retrieve the value of a property but by adding parentheses,

02:28.960 --> 02:33.140
also the key. As with arrays, the ordering here is important,

02:33.220 --> 02:37.810
the names of these variables which are created automatically are chosen by me,

02:37.810 --> 02:44.670
I could also name this v and k, just like that. But the order is important,

02:44.680 --> 02:49.810 
the first one and if you don't add parentheses, the only one as before will always be the value of the

02:49.810 --> 02:50.810
property,

02:50.830 --> 02:54.970
the second one, key in this case will be the name of the property,

02:55.000 --> 02:56.070
the key name.

02:56.410 --> 03:00.820
So I could say key colon

03:00.890 --> 03:02.000
and then the value

03:02.060 --> 03:05.910
and if I now hit enter, you see it looks a little bit nicer.

03:06.200 --> 03:14.570
If we make this a div instead of a span, well then we clearly can see name, age, color for all the

03:14.900 --> 03:15.590
persons,

03:15.590 --> 03:21.860
so now we're looping through all the key value pairs extracting both key and value, value again is the

03:21.860 --> 03:28.970
first element though and then outputting it here by using the variable names we chose between the parentheses.

03:29.300 --> 03:36.710
Finally if we also want to get the number of the iteration, we can access the index by passing a third kind

03:36.710 --> 03:37.830
of argument here,

03:37.850 --> 03:41.010
so adding a third variable between the parentheses,

03:41.270 --> 03:44.700
this will be simply the index of the current iteration.

03:45.050 --> 03:53.330
So here I can finally then output in parentheses after the value here for example between curly braces as

03:53.360 --> 03:54.400
always,

03:55.300 --> 04:00.950
the index like that. Fortunately a bit hard to read, that should make it easier.

04:00.970 --> 04:02.840
So if I hit enter a final time,

04:02.980 --> 04:04.450
well we see the index here,

04:04.450 --> 04:12.380
0, 1, 2, 0, 1, 2 as we loop through the property or the key value pairs in our objects here.

04:12.670 --> 04:15.450
That is the v-for loop,

04:15.460 --> 04:20.440
keep in mind using all these fields here between parentheses is optional,

04:20.440 --> 04:27.280
you can always go with the default by just extracting one element which in the case of looping through

04:27.280 --> 04:29.050
objects happens to be the value

04:29.170 --> 04:33.610
and in the case of normal arrays happens to be the element value,

04:33.670 --> 04:40.090
so always the value basically. But you can extend it with parentheses to get more information out of

04:40.090 --> 04:41.570
the object you're looping through.
