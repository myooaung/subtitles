WEBVTT

00:01.710 --> 00:02.130
Great,

00:02.130 --> 00:06.960
so we build our component which uses props to get data from the parent,

00:07.140 --> 00:09.930
we can then use it in a function as we do here.

00:09.960 --> 00:15.990
Maybe it's a reusable component you want to use in multiple places and in each place, it gets different

00:15.990 --> 00:16.800
data

00:16.800 --> 00:20.690
but of course, the type of data should always be equal.

00:20.700 --> 00:27.710
So here where we reverse the name, well this will not work if you pass in a number or a boolean,

00:27.750 --> 00:28.890
it has to be a string

00:28.890 --> 00:30.610
this component gets.

00:30.660 --> 00:36.780
So in order to make sure we're not getting an error due to someone passing, let's say one in here, keep the

00:36.780 --> 00:40.190
dynamic binding to pass a number instead of a string,

00:40.590 --> 00:43.660
well that of course will break the application

00:46.170 --> 00:50.390
as you can tell here because we can't use split on a number.

00:50.820 --> 00:57.060
So in order to prevent this, we want to validate the props coming in and we can set up validation

00:57.060 --> 01:04.890
here in this props array or in this props key here on our object. Props cannot only be an array, if

01:04.890 --> 01:06.150
we want to validate it,

01:06.300 --> 01:07.810
it should be an object

01:08.070 --> 01:12.880
and there we have as a key or a property name, like my name

01:13.080 --> 01:16.810
and then as a value, the type of that,

01:16.860 --> 01:22.420
so that could be of type string to force it to be of type string.

01:22.830 --> 01:26.100
You could also say it can be multiple types,

01:26.100 --> 01:31.800
so since we basically only want to reverse it, you could also say this should be of type string

01:32.220 --> 01:33.540
or array,

01:33.840 --> 01:36.310
so by passing an array of types here,

01:36.330 --> 01:41.070
you can say it can have multiple types, multiple types are valid, though

01:41.090 --> 01:44.330
here I want to revert back to just using the string.

01:44.520 --> 01:49.400
So with this, I'm making sure that I'm only getting the data I want to get,

01:49.410 --> 01:54.270
now what happens if I set up the validation here and pass a one?

01:54.270 --> 02:00.050
Now if I save this and I open the console and reload the page here,

02:00.420 --> 02:08.220
you see now I'm getting a warning that the prop check did fail and the whole component is therefore

02:08.250 --> 02:10.370
not attached like this.

02:10.370 --> 02:14.980
So I'm still getting an error of course because what else should vuejs do,

02:14.980 --> 02:17.810
it can't prevent me from typing a wrong code there.

02:18.020 --> 02:23.120
But I do get such warnings at development time and thus I might recognize that somewhere,

02:23.130 --> 02:30.380
I'm using the wrong property and by adding validation like this, I'm making sure that inside of this

02:30.380 --> 02:36.860
component, I can be sure that I only get strings because otherwise, my application will throw an error

02:36.890 --> 02:44.660
anyways and will give me at development time, a warning. When setting up the types of properties, you can

02:44.660 --> 02:48.580
do even more than just setting type like this,

02:48.680 --> 02:56.030
this could now also be an object where you set the type with the type key and you could also set required

02:56.030 --> 03:02.420
to true to make sure this is a property which always is a string and it should always be available, it

03:02.420 --> 03:05.850
should always be passed. If you don't set required,

03:05.990 --> 03:13.040
it would be valid to use your component like this and to not pass this name. Well by setting required to

03:13.040 --> 03:13.830
true,

03:13.850 --> 03:20.570
you're making sure this component may only be used if this component or excuse me, if this property is

03:20.570 --> 03:21.440
passed.

03:21.650 --> 03:27.140
So that's an addition when setting a prop validation to make sure that your component definitely

03:27.140 --> 03:29.760
has what it needs to run optimally,

03:30.020 --> 03:34.170
you can also set a default value to make sure that

03:34.190 --> 03:36.520
well you have something to work with.

03:36.560 --> 03:42.410
Now of course default doesn't make sense together with required because how would you have a default if it's

03:42.410 --> 03:43.400
required anyways,

03:43.430 --> 03:45.530
the default would always get overwritten.

03:45.740 --> 03:52.620
So default would be set to, in the case of a string, some string like Max

03:53.000 --> 04:01.280
so that now if my remove this my name here and I'm not passing a property, I'm still getting Max passed

04:01.280 --> 04:03.880
down there as you can see by the reverse name,

04:03.890 --> 04:05.800
I'll revert this nonetheless.

04:06.200 --> 04:10.970
And if you would have, let's say an object or array here,

04:10.970 --> 04:16.580
so if you have type object let's say, it doesn't make sense here but if you would have this, well then

04:16.580 --> 04:23.030
the default should always be a function which returns the object structure it should have or the default

04:23.060 --> 04:29.120
object you want to use like name Max. Again, doesn't make sense for this use case but just to let you

04:29.120 --> 04:36.380
know how that would look like, you would use such a function if that is of type object or array. For primitive

04:36.380 --> 04:39.260
types like string, boolean and number,

04:39.270 --> 04:45.110
so like string we used before, you set it directly to that value you want to use though.

04:45.860 --> 04:51.290
This is how you validate props and how you make sure that the properties, the props you're working with

04:51.620 --> 04:53.280
actually have the format

04:53.360 --> 04:54.530
you need them to have.
