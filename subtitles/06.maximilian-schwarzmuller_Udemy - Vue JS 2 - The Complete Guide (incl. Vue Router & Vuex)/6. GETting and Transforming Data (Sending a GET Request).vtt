WEBVTT

00:02.060 --> 00:08.120
We saw how to send a POST request in the last video, we also saw that we do get back a response which has a lot

00:08.120 --> 00:13.910
of data in it and we'll have a look at using this response in this video when we also have a look at

00:13.910 --> 00:19.970
sending a GET request so that we're not only able to store our data on a server but also that we're able

00:19.970 --> 00:25.850
to get it back and use it in our application and for using it, we'll also have a look at how we can extract

00:25.850 --> 00:28.320
data from the response we're getting back.

00:28.670 --> 00:34.970
Well let's start by adjusting our app to actually be able to fetch data and use that,

00:35.000 --> 00:40.000
I'll add new button button primary here where I will say get data,

00:40.000 --> 00:45.720
this should simply trigger this that I fetch the data and I will therefore add a click listener where

00:45.740 --> 00:49.430
I say fetch data, that shall be the method which should get executed,

00:49.430 --> 00:51.640
of course I still need to create this method.

00:51.950 --> 00:57.550
So here is the Get Data button and below this get data button here,

00:57.680 --> 01:01.150
I want to have an unordered list and in this unordered list,

01:01.160 --> 01:03.350
I'll also give it a class of list group,

01:03.650 --> 01:09.530
I want to output some list items with the list item bootstrap class where I basically output my user

01:09.530 --> 01:10.240
data.

01:10.430 --> 01:16.930
Now we can do this with v-for, you learned that and for that, we would need a users array.

01:17.210 --> 01:23.870
So I'll quickly create this new array here, users is an empty array initially and there, I simply want loop

01:23.870 --> 01:24.260
through them

01:24.290 --> 01:31.880
and since I already have user as a name here in my data, I'll use just u here in users, users of course

01:31.880 --> 01:33.110
refers to this array

01:33.340 --> 01:41.400
and then here, I want to output u.username and then separate with dash maybe, u.email.

01:41.640 --> 01:43.610
So that is how I output my user data,

01:43.650 --> 01:48.090
of course we don't see anything here because it is empty

01:48.260 --> 01:51.410
and yeah the fetch data method is not defined yet,

01:51.410 --> 01:54.860
thank you, I will do so in a second, so this is how we output it.

01:54.930 --> 02:02.930
Now I will add the fetch data method and in there, I now want to fetch the data from firebase and then

02:02.930 --> 02:10.100
somehow store it in this array and hopefully the list will then somehow well be updated in

02:10.160 --> 02:12.420
the dom here, in my HTML code.

02:12.650 --> 02:16.670
Let's start step by step and see how we can send a GET request.

02:16.720 --> 02:19.970
We of course we still use this.$http,

02:20.000 --> 02:28.460
now with the get method and in this get method, we pass the same URL as before, I don't need

02:28.460 --> 02:31.060
to pass an extra argument here

02:31.520 --> 02:37.060
but what I do need to do of course is I want to handle my response with the then function here.

02:37.100 --> 02:41.680
Now in this function, I do get my response, I know that

02:42.320 --> 02:48.450
and the cool thing is vue resource now gives us some helper methods on responses.

02:48.620 --> 02:55.380
This response not only has the body and so on, it also has some methods we can use

02:55.700 --> 02:58.500
and one very useful method is the

02:58.880 --> 03:07.070
json method here. Json basically extracts up your response and converts it into a javascript object

03:07.070 --> 03:08.340
which you may use,

03:08.360 --> 03:13.160
this is very handy of course because otherwise we get back a body which is a string, pretty finished,

03:13.210 --> 03:14.710
it can only be a string

03:15.050 --> 03:21.050
and we would have to manually parse this into a script object while the json function does this for

03:21.050 --> 03:22.130
us.

03:22.130 --> 03:30.050
Now this of course means we should now store it, let's store it in a constant, data and have a look at

03:30.050 --> 03:32.080
how this data looks like then,

03:32.210 --> 03:39.030
so if I print data here, let's see if this works the way we want it to work. If I now head over

03:39.140 --> 03:49.660
and I hit get data, oh I somehow get a promise here and not really the extracted data,

03:49.660 --> 03:51.450
why is that?

03:51.520 --> 03:59.980
The reason is response json also gives us back a promise and not the extracted data right away because

03:59.980 --> 04:03.190
it's an asynchronous task, it doesn't have that data right away.

04:03.520 --> 04:05.660
So in order to really access it,

04:05.790 --> 04:12.680
I can't do it like this instead what I should do is not store it in a constant but return response json

04:12.790 --> 04:19.010
and then simply chain another then method here to now use this extracted data in here,

04:19.150 --> 04:23.220
so we may name this data therefore

04:23.430 --> 04:25.200
and now let's log it. Here

04:25.200 --> 04:30.930
data will be extracted because this asynchronous task of extracting it with the json method and getting

04:30.930 --> 04:32.670
the response and everything,

04:32.700 --> 04:34.440
all these things have now been finished

04:34.440 --> 04:36.660
so now we do have access to the data.

04:36.840 --> 04:39.930
So if I now hit get data again,

04:39.930 --> 04:46.680
now we see an object where we actually do have our strange IDs and inside of these IDs, we do have

04:46.770 --> 04:49.290
our user data.

04:49.290 --> 04:50.340
Now that's nice

04:50.340 --> 04:57.120
and actually that's everything I need to be able to loop through it because this is now each a user

04:57.150 --> 04:59.550
and that's exactly what I wanted to print here.

04:59.880 --> 05:08.400
So in order to do so, I now should somehow use my extracted data here and assign it to my users array.

05:08.400 --> 05:10.880
Now the thing we're getting back is no array though,

05:10.880 --> 05:14.170
it's an object where we do have key value pairs right

05:14.310 --> 05:20.180
with these cryptic keys and then the values are our objects or being our objects.

05:20.280 --> 05:24.920
Now we can easily transform this into an array though and there are different ways of doing so,

05:24.930 --> 05:29.900
I will show you one. So my result array shall be an empty array initially let's say,

05:30.120 --> 05:34.350
then I loop through all my keys in data, data

05:34.380 --> 05:37.580
again is an object where the keys are these cryptic strings

05:37.860 --> 05:46.220
and then I can simply say result array push data and then access the key of the current iteration,

05:46.240 --> 05:48.170
so to get the value of that key.

05:48.460 --> 05:57.340
And then here finally, all I need to do is I need to set this.users, so this users array up here equal to result

05:57.400 --> 05:58.870
array,

05:58.910 --> 06:02.610
that's one way, of course there would be other ways but this should work.

06:02.830 --> 06:04.330
And now let's see this in action,

06:04.330 --> 06:07.570
I will reload this, it get data

06:07.840 --> 06:13.810
and you see, it took a couple of milliseconds but then the data was there and vuejs was clever enough

06:13.810 --> 06:20.120
to update the dom because it recognizes that we set a new value to this users and that is a trigger for

06:20.120 --> 06:22.160
vuejs to update the dom.

06:22.510 --> 06:25.420
And therefore this does now work as intended,

06:25.570 --> 06:31.720
I'll just add some line breaks below the button to make it look a bit nicer but now we see, fetching the data

06:31.900 --> 06:38.050
works fine and this is how we can send a get request and also very important, how we can use the data we

06:38.050 --> 06:43.780
get back, extract it with response.json which also returns us a promise and then use this promise

06:43.780 --> 06:44.720
down here

06:44.720 --> 06:49.990
to well use it how we need to use it, to transform the data in the way we need to transform it or whatever

06:49.990 --> 06:51.690
your plan is with the data

06:51.700 --> 06:52.470
you got back.
