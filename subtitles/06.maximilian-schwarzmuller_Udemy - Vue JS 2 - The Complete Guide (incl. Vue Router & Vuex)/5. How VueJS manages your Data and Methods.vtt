WEBVTT

00:01.840 --> 00:08.460
In the last lecture I mentioned that vuejs proxies, the properties we set up here on the data field

00:08.970 --> 00:14.500
and it does the same for the methods and computed properties so we can access them from outside, like

00:14.500 --> 00:21.640
here setting the title and I can also call this show method, for example.

00:21.640 --> 00:27.800
So if I want to do this and I hit control enter, you will see that after three seconds I get this alert

00:29.550 --> 00:35.970
and now it is updated and not changed by a timer because after changing the title here, I call the

00:35.970 --> 00:38.880
show method which changes the title again.

00:39.540 --> 00:45.540
So this is this proxying because in theory, we're not creating this vue instance,

00:45.540 --> 00:50.220
yes we're calling it, we're creating with the constructor but it's just an object shipped with the vuejs

00:50.250 --> 00:50.970
framework,

00:51.030 --> 00:57.540
the core object of that framework that is. And we don't know which properties this has or we can find

00:57.540 --> 01:03.330
out from the API reference but it clearly does not have the properties we set up here in the object

01:03.330 --> 01:04.880
we passed to the constructor,

01:04.920 --> 01:07.860
that's just an argument we give to that constructor, right.

01:08.130 --> 01:15.240
But behind the scenes, when creating an instance vuejs will take our object we pass in here and then

01:15.240 --> 01:22.740
it will take our data properties and our methods and will kind of use them as native properties on

01:22.740 --> 01:25.150
the vue instance object itself,

01:25.200 --> 01:27.490
so it'll kind of copy them.

01:27.510 --> 01:29.940
It does a bit more than that behind the scenes,

01:29.940 --> 01:35.880
it actually sets up a kind of a watcher for each of those properties which makes sure that it recognizes

01:36.150 --> 01:43.170
whenever one of these properties is changed so that it knows when to update the dom or when to do anything.

01:43.200 --> 01:48.160
So it not only takes them and allows us to work with them like in normal dummy javascript,

01:48.210 --> 01:55.910
it also has this watcher layer where it recognizes that something changed and is able to work with that.

01:56.130 --> 01:58.410
This has an important implication,

01:58.630 --> 02:04.920
we're able to access our properties like that from outside but we're not able to create a new property

02:04.920 --> 02:11.410
like this, if I set vm1 newProp equals new,

02:11.880 --> 02:17.400
then I can set it, this will work this is normal javascript script, I can add a property like this

02:17.880 --> 02:21.630
but what I can't do is I can't use it in my vue instance,

02:21.630 --> 02:29.640
it's not reactive, vuejs is not watching it because it only will create this proxying, it will

02:29.640 --> 02:36.540
only create these watchers for everything we pass in this object upon creation with these constructors,

02:36.540 --> 02:40.370
so everything we pass in this object we pass to the constructor.

02:40.650 --> 02:47.790
Every other property we add thereafter will be there as you can clearly tell if we print it to the

02:47.790 --> 02:48.710
console,

02:48.810 --> 02:51.840
so let's output it here and open up the console,

02:51.840 --> 02:58.460
you see the vue instance here. You can see it get a lot of properties here and you can see

02:58.460 --> 03:04.500
here are our proxied properties with getters and setters, this is this watcher effect that I was talking

03:04.500 --> 03:05.120
of

03:05.520 --> 03:07.330
and here you see this new prop,

03:07.440 --> 03:13.170
it doesn't have this getter or setter and that is because we didn't pass it up on creation of the instance,

03:13.400 --> 03:18.090
therefore vuejs did not set up these getters and setters and therefore it is not watching that.

03:18.390 --> 03:24.180
These getters and setters you see here all over the place are basically vuejs tool of understanding

03:24.180 --> 03:29.020
whenever we access a property or get the value from it, makes sense I guess.

03:29.310 --> 03:35.250
So this is important to understand, this proxying of properties that vuejs watches them for us, that

03:35.250 --> 03:41.760
we can access them from outside of the instance by directly accessing them on our vm variable where

03:41.760 --> 03:48.090
we store the instance but that we cannot add new properties or that we can add them but they won't work

03:48.120 --> 03:55.130
as normal properties we pass in this data property here or as methods when creating this vue instance.

03:55.200 --> 03:59.090
That is really important to understand and to keep in mind.
