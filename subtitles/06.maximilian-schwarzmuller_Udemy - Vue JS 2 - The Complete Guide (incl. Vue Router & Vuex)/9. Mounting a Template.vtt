WEBVTT

00:01.840 --> 00:02.800
You're still with me?

00:02.800 --> 00:03.680
Great.

00:04.030 --> 00:09.070
Almost at the end, I think we got a lot of a better understanding of what the vue instance does and how

00:09.070 --> 00:11.250
we can work with it.

00:11.290 --> 00:14.440
I get a couple of topics I still want to cover though

00:14.440 --> 00:18.720
and one of the most important ones is how it uses its template.

00:18.880 --> 00:25.200
We already learned that it takes its html code here and creates a template which it stores internally,

00:25.220 --> 00:30.700
it basically behind the scenes converts it to javascript since it's quicker to run through jsvascript

00:30.700 --> 00:33.700
than the native dom, it uses this template

00:33.940 --> 00:41.170
and then it's aware which string interpolations do we use there and which position and so on and it's able

00:41.170 --> 00:46.420
to update this template whenever we change something which is reflected in there and on the other hand,

00:46.420 --> 00:51.940
it won't update it if we change some property which is never output or never listened to.

00:51.940 --> 00:58.030
So it then is able to update this if it needs to and we'll write it to the native dom, the one we're seeing

00:58.030 --> 01:04.770
here in the browser and change or make the necessary changes. Regarding this template,

01:04.840 --> 01:10.930
it automatically picks the html code contained in this app, one div

01:10.930 --> 01:17.470
since this is what we tell it here with the el property, we tell it hey the element you should choose is

01:17.500 --> 01:19.000
app1.

01:19.030 --> 01:20.680
Now guess what, we can also do the following,

01:20.680 --> 01:22.730
we can remove the element here,

01:22.870 --> 01:25.380
now no element at all. If I hit control enter,

01:25.420 --> 01:32.020
it's therefore gone, we see the curly braces because now it's not controlled by the vuejs anymore and

01:32.020 --> 01:37.980
I can instead go below the creation of this vue instance,

01:37.980 --> 01:44.960
keep in mind it's stored in the vm1 variable and I can also call vm1 $mount.

01:44.980 --> 01:48.120
You probably see a pattern here,

01:48.150 --> 01:55.080
the property is prefixed with dollar sign adding native vuejs methods and properties we can

01:55.080 --> 01:58.870
use. $mount is not actually a property, it's a method

01:59.040 --> 02:07.710
and it allows us to do the same as the el property if set, like here does automatically. We can pass the element

02:07.800 --> 02:10.440
where we want to mount our application

02:10.800 --> 02:17.960
and I can do this just the same way as I would do it on the el selector or the el property, I pass the css

02:17.960 --> 02:20.920
selector of the place I want to mount the app at.

02:20.960 --> 02:23.780
So #app1, if I now hit control enter,

02:23.880 --> 02:25.160
it works again,

02:25.170 --> 02:31.110
so the only difference here is basically that the different syntax, behind the scenes it works the same.

02:31.650 --> 02:36.270
The el property well makes it easier for us, if we know where to mount it,

02:36.330 --> 02:38.250
use the el property because

02:38.260 --> 02:40.710
well this is just what it is meant for,

02:40.710 --> 02:41.150
right,

02:41.190 --> 02:47.220
it does the same as if we have $mount but automatically. But you might have a use case where

02:47.220 --> 02:53.730
you want to configure and set up your vue instance but you don't know yet where to mount it or the

02:53.970 --> 02:55.050
object,

02:55.110 --> 03:00.630
the html element where you want to mount it doesn't exist yet. In such a case, you could create it, execute

03:00.630 --> 03:01.520
some other code

03:01.680 --> 03:07.860
and once you know where to mount it, you can call the variable name where you stored your instance,

03:07.930 --> 03:15.170
$mount and as an argument pass the selector leading to the element where you do want to mount it.

03:15.360 --> 03:19.100
There is also one other thing you can do with templates and instances,

03:19.230 --> 03:25.020
I'm going to create a new div with an ID of app3 and that doesn't contain anything,

03:25.050 --> 03:26.350
it's empty.

03:26.370 --> 03:29.290
I'll also treat a new vue instance down here,

03:29.370 --> 03:31.050
new vue

03:31.620 --> 03:35.930
and in this vue instance, I will do something we haven't seen yet,

03:35.940 --> 03:39.060
I'll use a new property template.

03:39.390 --> 03:46.560
Until now, we always used the html code we already had in our document, in our html file, until vuejs

03:46.600 --> 03:49.360
hey take control over this part,

03:49.380 --> 03:54.830
like for example the app2 part here. We can also do it the other way around,

03:54.840 --> 03:58.350
we can create our own template here as a string

03:58.470 --> 04:04.280
and I will come to some of the limitations we now face soon. So we can create a template here and output

04:04.320 --> 04:07.930
a h1 tag or say hello, like that.

04:08.310 --> 04:11.680
Keep in mind, you can't write a multi-line string that simple here

04:11.680 --> 04:17.640
so I'll keep a very simple template here and again I'll come back to some of the limitations in a second.

04:17.720 --> 04:21.820
With that I created a new vue instance with its own template,

04:21.990 --> 04:29.260
it's now not deriving it from my code because I don't want to tell it to do so, I have set up an el element,

04:29.550 --> 04:33.240
instead it has its own element, its own template, excuse me.

04:33.540 --> 04:45.070
I can now say vm3 $mount and then pass app3, like this and if I hit control enter

04:45.460 --> 04:52.180
with a hashtag, with a hashtag in front of this, hit control enter, we see hello down there.

04:52.470 --> 04:57.550
So here we now see this template I set up here,

04:57.600 --> 05:03.080
we're not using the template, we're not inferring it from our document,

05:03.180 --> 05:06.610
instead we're setting it up in the vue instance. With that,

05:06.630 --> 05:15.110
I could even render recall mount like this with no argument and this would render it, create it off screen.

05:15.150 --> 05:23.670
I could now call document get element by id app3 and call append child, this is vanilla javascript

05:23.680 --> 05:33.240
here, nothing vuejs specific and append my vm3 variable, this new vue instance and here the el property,

05:33.670 --> 05:37.550
this will now be the template of this instance,

05:37.560 --> 05:40.320
if I hit enter, you see hello again.

05:40.320 --> 05:43.910
So now what I did is I created this instance off screen,

05:43.950 --> 05:47.550
it has its own template so it doesn't need anything else than that

05:47.670 --> 05:55.710
and then I can append it somewhere in my html code with a normal html or normal javascript function here,

05:55.710 --> 06:02.040
append child and pass the el property which happens to keep my compiled template

06:02.070 --> 06:04.040
in this vue instance.

06:04.290 --> 06:07.010
Now we're getting into pretty advanced stuff

06:07.020 --> 06:09.120
and I want to make a cut here.

06:09.150 --> 06:11.380
These are things I want you to know,

06:11.460 --> 06:19.710
the most common use case is to use the el property like here or to use the vm mount like here, doing it

06:19.710 --> 06:21.840
this way is pretty uncommon

06:21.840 --> 06:27.810
and one of the reasons why this is not that super common is that vuejs offers us so much greater

06:27.810 --> 06:34.380
ways of using it like with the el property or as we will soon learn, with components. Before going there,

06:34.380 --> 06:40.110
let me also explain why using a template like this has some limitations which could be problematic.
