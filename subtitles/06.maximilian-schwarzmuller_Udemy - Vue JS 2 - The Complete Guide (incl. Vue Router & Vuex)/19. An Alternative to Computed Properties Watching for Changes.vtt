WEBVTT

00:02.300 --> 00:07.850
When working with dependencies, vuejs also has another way of doing this.

00:08.000 --> 00:10.860
We're using a computed property right now,

00:10.940 --> 00:17.180
I can also use yet another property on the vuejs instance, the watch object,

00:17.180 --> 00:22.090
so that's another new object we're learning about right now. In computed,

00:22.130 --> 00:28.490
we set up the property and then as a function, we set up the logic how this property should be computed,

00:28.890 --> 00:29.210
for

00:29.210 --> 00:35.490
watch, it kind of works the other way around. Here as a key, I set up the property name

00:35.550 --> 00:38.060
I want to watch, for example counter,

00:38.150 --> 00:44.230
so this has to match one of my properties, in this case the data property counter here.

00:44.450 --> 00:52.340
Then as a function, I specify the code I want to execute whenever the counter changes and I pass or

00:52.470 --> 00:58.340
vuejs automatically passes the value of this upcoming change to this function.

00:58.430 --> 01:05.480
This allows me to react to changes and therefore here, I could also set a global output variable if I

01:05.480 --> 01:06.190
would have that

01:06.200 --> 01:12.920
and if it wasn't computed as it is here and set this up the other way around, which certainly will

01:12.920 --> 01:18.440
work though I will tell you right away that it is a best practice to use computed properties wherever

01:18.440 --> 01:23.860
you can, simply because they are more optimized due to this caching and so on,

01:23.930 --> 01:29.860
it really allows vuejs to run more optimal, to avoid unnecessary tasks.

01:30.060 --> 01:35.610
Though there are cases where you need to react to every change, also there is another case where

01:35.610 --> 01:38.000
computed properties won't do the trick

01:38.330 --> 01:46.610
and that is if you need asynchronous tasks to be run. Computed properties always need to run synchronously

01:47.060 --> 01:53.220
which means you're returning something here and that needs to happen as soon as possible or immediately,

01:53.300 --> 01:59.060
there is no way you can reach out to a server or do some other asynchronous task in between. If you

01:59.090 --> 02:02.980
need to run such a task or as I just mentioned before,

02:03.050 --> 02:09.820
you need to run some other code which really is triggered when a property updates and which is not

02:09.820 --> 02:13.510
solved by a computed property, then watch is for you.

02:13.750 --> 02:18.600
So here we might simply want to reset the counter after let's say two seconds,

02:18.730 --> 02:27.770
so I'll add a timeout here and I'll say that after two seconds, I want to execute this first function here.

02:30.770 --> 02:35.600
Now important, since this is now a closure in this callback here,

02:35.840 --> 02:43.610
I have to store in my view instance in a separate variable so this which allows me to conveniently access

02:43.610 --> 02:49.790
my properties and so on needs to be stored in a variable because while it is available with this, all

02:49.790 --> 02:56.180
throughout in my default vuejs objects and functions here, this is not the case for a callback

02:56.630 --> 02:58.760
closure like this one here.

02:58.820 --> 03:01.130
So here, I can then call vm,

03:01.280 --> 03:10.600
but now again just like before, access counter and set it to 0 to reset it after two seconds.

03:10.790 --> 03:17.210
With this in place, if I now hit control, I'll rapidly increase the counter and we see it go back

03:17.210 --> 03:24.890
to 0 after two seconds because we had watch in place which will be called whenever the counter

03:24.890 --> 03:25.880
changes, 

03:25.910 --> 03:27.530
thus executing this code

03:27.710 --> 03:31.870
and as you see here, able of executing asynchronous task.

03:31.910 --> 03:38.900
The reason for this of course is that here I'm not returning anything, here I'm not resetting a property

03:38.900 --> 03:41.290
which needs to be recalculated, here

03:41.330 --> 03:47.900
I'm simply specifying some code which should be run whenever some property we set up here as a key

03:48.170 --> 03:48.920
changes,

03:48.950 --> 03:50.570
in this case, the counter.
