WEBVTT

00:01.740 --> 00:06.390
The problem we want to solve is that our mutations always have to run synchronously,

00:06.390 --> 00:09.540
so they have to change the state immediately,

00:09.570 --> 00:17.670
there must not be any asynchronous action or function or method going on. Well we can fix this by putting an

00:17.710 --> 00:23.850
extra piece between our component where we want to trigger something and our mutation where we want to

00:23.850 --> 00:33.810
change the state. This extra piece is an action, an action is basically an extra function where we may run asynchronous

00:33.810 --> 00:41.070
tasks and it's in this action which we dispatch from the component or by the component where we then

00:41.190 --> 00:46.890
commit the mutation and we only commit the mutation once the asynchronous task is done.

00:46.980 --> 00:48.930
This has one major benefit,

00:49.080 --> 00:54.680
we may trigger action in our component, we dispatch it there then we reach out to the server,

00:54.690 --> 00:58.950
it takes a couple of milliseconds or seconds and no change is committed,

00:58.950 --> 01:01.070
the state hasn't been changed yet.

01:01.170 --> 01:08.670
Only once this long taking asynchronous calculation or getter generally function is finished, only at

01:08.670 --> 01:09.720
this point of time

01:09.810 --> 01:16.110
do we then commit the mutation so only then do we change the state in our store.

01:16.320 --> 01:23.880
So all the changes to our state still happen synchronously but with actions, we are still able to execute

01:23.880 --> 01:27.550
some async code before making this change.

01:27.730 --> 01:30.350
Well let's see this in action in the next video.
