WEBVTT

00:01.870 --> 00:10.930
Before concluding these videos, lectures here on outputting data with the interpolation or before the

00:10.930 --> 00:17.980
bind and listening to events, there's one important thing I need you to know or I need you to be aware

00:17.980 --> 00:18.800
of.

00:19.000 --> 00:24.490
Right now, we're most of the time using this in a way that once we output something, we output a single

00:24.490 --> 00:31.840
property like for the counter or x and y, before we saw though that we also could call a function which

00:31.850 --> 00:33.120
worked fine,

00:33.430 --> 00:39.340
that is by the way how we mostly use it for events, here we simply pass the reference to a function, to

00:39.340 --> 00:41.450
a method we want to execute.

00:41.470 --> 00:46.420
Be aware that in all the places where you can access your vue instance,

00:46.420 --> 00:51.970
so here when listening to a click event or here when outputting the counter, so whatever we access our

00:52.030 --> 00:59.050
vue instance, you can write any valid javascript code as long as it's only is one expression and doesn't

00:59.050 --> 01:03.050
contain an if or in statement or a for loop or something like that.

01:03.340 --> 01:07.420
So simple javascript statements can be evaluated here,

01:07.420 --> 01:17.230
so for example, here I could duplicate my click button and here, I don't want to call increase but I directly

01:17.230 --> 01:19.310
want to increment the counter by one.

01:19.450 --> 01:25.990
Well I can simply call counter++ here and if I save this, you see now I can click this button

01:25.990 --> 01:32.950
just fine and it increments my code or my counter, excuse me. The same is true here for the string interpolation,

01:33.220 --> 01:37.480
I could easily output counter times two, after saving,

01:37.480 --> 01:44.620
you see that now I can increment by two here even though I normally would only increment by one and here where

01:44.620 --> 01:46.310
I do increment by two,

01:46.480 --> 01:48.180
well it's by four now.

01:48.460 --> 01:50.210
So this is perfectly valid,

01:50.440 --> 01:56.230
you could even write short ternary expressions here like for example check if this is greater than

01:56.230 --> 02:00.210
10, in which case you could say greater than 10

02:00.220 --> 02:08.780
otherwise you could say smaller than 10. If you now hit control enter, you see that it is smaller than

02:08.800 --> 02:11.810
10 until I get a typo here

02:11.890 --> 02:21.470
but until I obviously seem to pass the 10 border. This is how you can work with the templates here,

02:21.520 --> 02:25.920
it really is a mixture of html and javascript code

02:25.960 --> 02:32.680
as long as you use template expressions like the double curly braces here and this gives you this very strong

02:32.680 --> 02:40.180
connection between your html code, your template up here and your javascript code, your vue instance

02:40.240 --> 02:49.150
down there all managed automatically by vuejs and giving you thus the power to write very, well powerful

02:49.180 --> 02:54.230
and user friendly applications where you have this natural connection.

02:54.310 --> 03:00.610
Think about the effort code like this would take to write with jQuery especially once you introduce

03:00.610 --> 03:07.930
more complex relations and need to do all this checking for possible changes in onepart of your application

03:08.350 --> 03:09.640
on your own.

03:09.640 --> 03:17.140
Speaking of that, we'll dive deeper into the reactivity of our properties in the next few lectures.
