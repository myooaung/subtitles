WEBVTT

00:02.130 --> 00:05.010
So we learn a lot about built-in validators,

00:05.010 --> 00:10.690
let's now work on the array here where we validate hobbies.

00:10.890 --> 00:13.560
Let's learn how we can validate erase,

00:13.560 --> 00:15.300
it's actually straightforward,

00:15.600 --> 00:20.190
first of all in this validations property, I'll add a new key

00:20.280 --> 00:21.990
and as always, I'll pick the key name

00:21.990 --> 00:30.240
I also bind to with v-model I'd say but we don't actually do that here, we manage this array in this key

00:30.240 --> 00:31.160
here however,

00:31.170 --> 00:34.750
so I'll use hobby inputs as a key here in validations too

00:34.800 --> 00:37.940
so that vuelidate can match the two

00:38.460 --> 00:47.120
and then I will set hobby inputs here equal to a javascript object and now, I can define some validators

00:47.130 --> 00:49.430
which are applied to the whole array,

00:49.530 --> 00:55.080
this mostly makes sense for a minimum length or maximum length to define how many elements this array must

00:55.080 --> 01:02.460
have or should have at a maximum. I'll add a minLen validator, use the minLength function we already

01:02.460 --> 01:06.120
import and say I want to have at least one element.

01:06.360 --> 01:11.360
Now more interesting is a special property we can now add, $each,

01:11.640 --> 01:17.370
as you've probably already noticed, dollar sign properties are always properties provided by vue

01:17.400 --> 01:19.900
or some package.

01:19.920 --> 01:25.950
$each is kind of a placeholder for all these dynamic elements we can add to the array because when we

01:25.950 --> 01:31.140
create this validation logic, we of course don't know for sure how many elements the user is going

01:31.140 --> 01:32.510
to have,

01:32.580 --> 01:39.900
so $each then also holds a javascript object and in there, we can now reference the data

01:39.900 --> 01:42.000
in all our inputs,

01:42.120 --> 01:49.780
so in hobby input here I'm actually storing new elements in onAddHobby, in this method and it's this

01:49.780 --> 01:56.040
value property which will be bound via v-model in my array up here,

01:56.070 --> 02:03.290
you see I'm binding with v-model to the value on the hobby input which I get out of this v-for loop.

02:03.840 --> 02:05.490
So it's this value property I

02:05.520 --> 02:08.120
then also want to bind to value

02:08.310 --> 02:14.790
and this again holds a javascript object which now just defines validation rules as we did it on any

02:14.790 --> 02:15.650
other value,

02:15.660 --> 02:19.220
so as we did it on email or age and so on.

02:19.440 --> 02:24.810
And now here we can say this should be required and maybe we also want to have a minimum length here,

02:24.810 --> 02:29.790
now here we are referring to the minimum amount of characters, let's say hobby should have at least

02:29.790 --> 02:31.620
have 5 characters,

02:31.740 --> 02:34.000
that's the set up in the javascript code,

02:34.020 --> 02:36.020
now we need to connect it.

02:36.240 --> 02:43.960
So in the array in the template, I have first of all want to hook up my input with @blur and there, I'll

02:43.960 --> 02:45.310
reach out to $v,

02:45.350 --> 02:48.210
then to hobby inputs,

02:48.270 --> 02:50.730
that's the identifier we created,

02:50.760 --> 02:53.000
there to $each

02:53.250 --> 03:00.480
and now on each, I'll pass the index of the element we're currently at and I get the index from v-for,

03:00.720 --> 03:03.720
I'm extracting it here as a second argument.

03:03.720 --> 03:11.420
So this is the element I now want to touch, so there to be precise I want to touch the value element

03:11.760 --> 03:15.900
because theoretically in this array, we could of course have multiple inputs,

03:15.900 --> 03:23.210
that is why we still inside each have the option to add multiple keys like we did with value.

03:23.490 --> 03:27.440
So value is the well value or a validator

03:27.450 --> 03:35.070
I now want to touch with $touch so that this gets validated. To see whether we have an error

03:35.070 --> 03:36.090
or not,

03:36.150 --> 03:39.800
I'll add something to the div which wraps my label and input,

03:39.840 --> 03:48.270
I'll add this good old class binding where I set the invalid class if $v.hobbyInputs,

03:49.350 --> 03:54.660
$each then the index, if that has an error

03:55.020 --> 04:03.180
and there, I could of course also reach out to value or I check if any element in this array element

04:03.270 --> 04:04.100
has an error,

04:04.110 --> 04:05.750
here we only have one input

04:05.760 --> 04:09.020
but again we could have many or multiple such inputs.

04:09.570 --> 04:16.260
Now we also added validation for the array as a whole, the array as a whole of course is not synchronized

04:16.260 --> 04:17.620
with v-model

04:17.760 --> 04:25.170
but what I can do is I can of course output some helper text below my list of hobbies maybe. I could

04:25.170 --> 04:25.870
output

04:26.010 --> 04:33.520
you have to specify at least and now a dynamic amount hobbies.

04:33.780 --> 04:44.850
This should only be shown with v-if if $v.hobbyInputs referring to our hobby inputs key

04:44.850 --> 04:51.910
here under validations, if that's has an invalid

04:51.970 --> 04:54.440
so a false minLen property.

04:54.520 --> 04:59.370
So we check for whether this is not true, then we want to show the error message

04:59.470 --> 05:01.930
and of course we want to output the amount of hobbies, 

05:02.080 --> 05:02.500
so here I'll

05:02.530 --> 05:12.620
access $v.hobbyInputs, then $params and there minLen and there, the min

05:12.680 --> 05:13.910
property.

05:13.930 --> 05:15.540
Let's see this in action,

05:15.620 --> 05:21.220
let's save this and go back to our application and here, we don't see this error message

05:21.220 --> 05:23.380
so we'll have to check what's wrong there.

05:23.540 --> 05:27.750
If I add a hobby though, validation for that is working,

05:27.770 --> 05:30.850
it only becomes valid if I have at least five characters

05:31.130 --> 05:36.140
but what's wrong with the overall validation where we want to output the minimum amount of characters

05:36.140 --> 05:37.100
on hobby inputs,

05:37.100 --> 05:38.510
why is this not working?

05:40.290 --> 05:47.990
Now the reason why we don't see this error message actually is that minLength one is never invalid,

05:48.000 --> 05:51.070
if we add a hobby, we fulfill the criteria,

05:51.180 --> 05:54.670
if we remove it, we're back to the untouched state.

05:54.750 --> 05:56.540
So instead I'll set this to 2

05:56.610 --> 06:02.220
and now if we go back and I add a hobby, you see that we also get this message that we need two hobbies

06:02.310 --> 06:05.780
and only if I add a second one, this disappears, if I remove it,

06:05.820 --> 06:07.810
we're back to the message

06:07.900 --> 06:12.720
and of course validation on the individual hobby also still works.

06:12.720 --> 06:15.150
So this is all working

06:15.450 --> 06:21.320
and of course I can also go down and add required here on hobby inputs,

06:21.360 --> 06:29.310
so on the overall array to make sure we also are not allowed to have zero hobbies, in this case we would

06:29.310 --> 06:35.280
not see the error message but still have this overall element or this overall control

06:35.280 --> 06:36.620
treated as invalid

06:36.630 --> 06:39.530
as long as no value was entered.

06:39.630 --> 06:46.410
So now with that, we got a great array under control of vuelidate which we can always validate to

06:46.410 --> 06:48.810
see whether we entered something good.

06:48.810 --> 06:55.950
Now let's complete it by adding another error message where we say please add hobbies and there, I want

06:55.960 --> 07:05.010
to output this if we have entered none hobby at all, so enter or access $v.hobbyInputs required.

07:05.010 --> 07:06.300
If this is not true,

07:06.480 --> 07:09.370
then I want to see this message, if I add one this disappears

07:09.390 --> 07:11.120
but we need two, if I click

07:11.190 --> 07:13.110
again, this is now also gone.

07:13.110 --> 07:16.730
So now we got a great array validation in place here,

07:16.860 --> 07:17.540
let's move on.
