WEBVTT

00:02.130 --> 00:07.340
In the last lecture we saw how we can add a validator and which information we get,

00:07.390 --> 00:09.550
now let's work on the user experience.

00:09.590 --> 00:15.200
I'm going to get rid of this $v output below the part and instead, I want to style the

00:15.200 --> 00:16.470
input differently

00:16.550 --> 00:25.270
if it is invalid. For this, you can of course use any styling rule you want, whatever fits your needs.

00:25.550 --> 00:32.210
What I'll do is I conditionally want to add a class to the wrapping div which contains both my label

00:32.270 --> 00:33.290
and my input

00:33.470 --> 00:35.370
if this is invalid,

00:35.630 --> 00:39.420
so here I'll bind class with colon class

00:39.650 --> 00:47.540
and I want to bind it to a javascript object where I set the invalid property and therefore css

00:47.540 --> 00:57.590
class if $v.email.$error or is true, error and not invalid because error also takes

00:57.590 --> 01:01.940
into account whether the user had a chance to edit the value or not,

01:01.940 --> 01:04.920
so whether the form is touched or not.

01:05.260 --> 01:09.570
Now that alone won't do much or at least we won't see much,

01:09.590 --> 01:16.370
so in order to see something, I also should prepare an invalid style.

01:16.550 --> 01:23.960
So I'll scroll down to my scoped styles here and I'll add a new style below

01:24.140 --> 01:28.660
all these input stylings here, maybe here,

01:28.850 --> 01:30.380
the position doesn't really matter

01:30.620 --> 01:37.450
and if we have the input class which is on the wrapping div and this also has the invalid class,

01:37.490 --> 01:40.410
so there is no whitespace between these two classes,

01:40.700 --> 01:48.020
then any input which is nested inside of this should receive a border which is one pixel solid and

01:48.030 --> 01:53.720
red and let's say a background color of some light red,

01:53.720 --> 02:00.650
so maybe let's pick this rosey, salmon color here, whatever you like, this

02:00.930 --> 02:03.760
is the value for an invalid input.

02:04.010 --> 02:06.410
And I also want to style the label differently,

02:06.440 --> 02:13.010
so I'll copy the rule and also style any label in such an input group, there

02:13.070 --> 02:16.410
I don't want to style border or background color,

02:16.490 --> 02:19.980
instead I want to style the text color and set it to red.

02:20.300 --> 02:25.220
If we now save this updated styling and we go back, you see everything looks normal

02:25.370 --> 02:33.330
but if I type here and I enter t, you see now it becomes invalid because now it was touched but it is invalid.

02:33.770 --> 02:37.460
If I complete this to a valid value though, it's gone,

02:37.730 --> 02:44.570
so now we give the user some visual feedback only once he had a chance to do something though, not when

02:44.570 --> 02:49.970
the page first loads, as you can see and that of course is a good user experience.

02:49.970 --> 02:53.110
Now we can also add a user or an error message,

02:53.210 --> 03:04.820
so below this email input we could add a paragraph where we say please provide a valid email address

03:05.870 --> 03:13.620
and then we could check if we want to show this with v-if and we could either show it if

03:13.620 --> 03:16.310
$v.email.$error is true,

03:16.340 --> 03:20.330
so in any error case, we would now also show this message,

03:20.330 --> 03:24.410
so as soon as I start typing here, we see that message.

03:24.950 --> 03:31.160
We could also only show this if it's an invalid e-mail though so that we don't show it just because

03:31.160 --> 03:35.650
the field is empty but only if it's an invalid e-mail address.

03:35.730 --> 03:45.590
This could be done if we actually check e-mail, referring to this e-mail rule now is not true because

03:45.590 --> 03:51.080
you saw in the last lecture that this is true if it is valid, so not true means it's not valid.

03:51.080 --> 03:57.940
Now you see if this is page reloads and I start typing and reverse this,

03:58.070 --> 04:01.280
now you don't see the error message even though an error is there,

04:01.310 --> 04:06.920
if I fill something in though, which also is an invalid email address, I get this error message.

04:07.100 --> 04:12.560
So you can fine tune this to your need and you could of course therefore also output multiple messages like

04:12.830 --> 04:15.850
this field must not be empty

04:16.040 --> 04:20.180
if the required validator is not true.

04:20.180 --> 04:24.020
So now we would show two error messages in this case

04:24.440 --> 04:27.360
and you see must not be empty right from the start,

04:27.470 --> 04:33.110
if I start typing, we only see that with the e-mail address, if I remove that, we're back to must not

04:33.110 --> 04:34.000
be empty.

04:34.250 --> 04:38.330
So this is how you can control the error messages,

04:38.330 --> 04:43.810
this is of course purely optional but it shows you what you can do with this validation package.

04:43.850 --> 04:50.960
You can really decide how you want to adjust the styling of your input, how you want to provide feedback

04:51.140 --> 04:53.750
to the user depending on his inputs.
