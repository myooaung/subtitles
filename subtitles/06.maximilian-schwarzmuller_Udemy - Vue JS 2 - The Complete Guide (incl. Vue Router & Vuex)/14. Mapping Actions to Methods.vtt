WEBVTT

00:01.950 --> 00:06.320
It's important to understand what map actions does behind the scenes though.

00:06.600 --> 00:10.360
So here I'm mapping to the increment and decrement actions

00:10.500 --> 00:16.410
and actually this will create the following two methods for me and I'm just writing it out so that

00:16.410 --> 00:18.700
you understand what map actions does here.

00:18.900 --> 00:21.480
We use map actions to get access to our actions

00:21.630 --> 00:28.050
but in the end, what these map actions function or helper here does is it gives us the increment method

00:28.320 --> 00:36.960
where we can then call this store dispatch increment, that is all this map actions function does.

00:36.960 --> 00:46.880
Now increment here could of course also take a value like the by property or argument here which you

00:47.090 --> 00:54.800
then can pass to increment to tell it by how much to increment or to increase this counter

00:55.310 --> 01:01.280
and then we could call increment with let's say 100 here to increase it by 100 on each click

01:01.280 --> 01:02.610
instead of one.

01:02.780 --> 01:08.660
That would be how we can do this and map actions and thankfully creates the method in just such a way

01:08.720 --> 01:16.440
that we are able to pass on an argument automatically. So we can pass 100 here with increment and in store.js

01:16.440 --> 01:23.300
here where we get or where we call our action, where we can pass the second argument here

01:23.300 --> 01:24.980
too which is named payload,

01:25.040 --> 01:29.100
you can name it whatever you like but payload is something you will see pretty often.

01:29.210 --> 01:32.490
Now it's named payload because it's the payload of our action

01:32.630 --> 01:39.830
and we can simply pass this onto our mutation because it turns out mutations also not only get the state

01:40.100 --> 01:43.150
but as a second argument, they may also get a payload,

01:43.310 --> 01:50.500
so we can then increment this by payload, like this. And if we save this and we click increment, you now

01:50.570 --> 01:57.510
see it gets increased by 200 actually because we still duplicate it in our getter or we take it times 2 in our

01:57.590 --> 01:58.160
getter

01:58.340 --> 02:00.320
but you see at the number of clicks,

02:00.350 --> 02:05.920
we actually increase it by 100 upon each click. So this how we can pass a payload

02:06.080 --> 02:10.290
and of course we can do the same here for our decrement function,

02:10.400 --> 02:17.420
so let me quickly do this, add the payload here too and decrease it by the payload and for that, I also

02:17.420 --> 02:20.080
need to expect the payload here on decrement

02:20.150 --> 02:25.520
and then this allows me to go to the counter.vue file or for that, I should still pass this of course

02:26.090 --> 02:31.570
to the counter.vue file and actually, let's say decrease it by 50 on each click.

02:31.850 --> 02:37.570
And this will make sure it gets decreased by 100 because again, I do multiply it with two in my getter

02:37.580 --> 02:41.450
but on the clicks, you see it gets reduced by 50 actually.

02:41.450 --> 02:44.600
So this is how I can pass a payload,

02:44.600 --> 02:47.870
now what if you want to pass more than one argument?

02:48.110 --> 02:51.830
What doesn't work is to add multiple arguments here,

02:51.950 --> 02:59.680
so let's say in the another counter when we use the async increment, we want to set the width or the

02:59.690 --> 03:04.100
size by which you want to increase it, for example to 50

03:04.110 --> 03:06.740
so I'll increase it by 50 on each click

03:06.920 --> 03:12.760
but then as a second argument, you also want to pass the duration for the async task.

03:12.860 --> 03:16.670
Right now, that is one second hardcoded into my code here

03:16.820 --> 03:22.850
but if I want to set this manually, I can pass it as a second argument because that's not how dispatch

03:22.850 --> 03:24.120
works.

03:24.140 --> 03:30.410
Instead what I can do is I can simply pass an object here as an argument and here, I can of course add

03:30.410 --> 03:32.660
as many properties as I want,

03:32.660 --> 03:39.670
for example the by property to set the step by which I want to increase the counter, so by 50

03:39.830 --> 03:44.830
and then let's say the duration property, let's set it to 500 milliseconds

03:45.170 --> 03:52.670
and of course I can do the same for async decrement, of course then I have to adjust my actions here

03:52.670 --> 03:55.030
to also be able to fetch the payload here.

03:55.070 --> 04:02.870
That still only is one argument here of course but we know this argument now is an object, so now I can simply

04:02.870 --> 04:08.460
commit payload by here, by is the step size, payload by

04:08.720 --> 04:15.910
and down there, I want to set this with payload duration because I know that I store this in this property.

04:16.130 --> 04:21.890
And with that if I save this again, you now see the top buttons work as before

04:21.970 --> 04:26.200
but the bottom buttons, they take a little while before it takes effect.

04:26.240 --> 04:28.140
We see it actually is 50,

04:28.160 --> 04:33.020
regarding the step size and timing wise I'd say it feels like half a second,

04:33.140 --> 04:35.820
so it seems like the duration also works.

04:35.990 --> 04:44.510
And this is how I can pass a payload with my actions to my mutations and I can either pass a

04:44.510 --> 04:51.410
string or a number or if I need to pass more than one argument, I just pass an object as payload where

04:51.410 --> 04:55.700
I set up all my key value pairs for as many properties I want to use.
