WEBVTT

00:02.200 --> 00:04.420
In the last video, maybe you already saw it.

00:04.520 --> 00:10.460
If I open up the console again and we inspect this vue instance, we see a couple of properties here which

00:10.460 --> 00:18.290
clearly are already created by us, for example children which is an empty array, el which clearly refers to

00:18.290 --> 00:26.330
this div which actually represents our instance or it represents our html code of this instance and also

00:26.420 --> 00:29.580
data here and some other things.

00:29.660 --> 00:33.160
These are actually properties we can use

00:33.440 --> 00:39.040
and whilst I won't go through all of them, some of them are also pretty self-explanatory and some I'll

00:39.100 --> 00:43.780
cover later when we come to components and more advanced objects,

00:43.880 --> 00:51.470
I want to go through some, specifically I want to talk about $el, $data and 

00:51.470 --> 00:52.880
$refs here.

00:53.060 --> 00:57.140
So let's have a look at that, $el

00:57.160 --> 01:00.990
is pretty clear, it refers to our template, 

01:00.990 --> 01:04.120
it refers to our html code of that instance.

01:04.140 --> 01:09.960
So as you see, it refers to this div and it is this native html element,

01:09.960 --> 01:11.670
nothing special about it.

01:11.700 --> 01:17.850
So this is how vuejs keeps track of what our html code is or where this instance lives.

01:18.980 --> 01:23.880
$data is an object which holds our data properties,

01:24.180 --> 01:27.850
this is another way of accessing the data from outside,

01:28.110 --> 01:37.770
so while I can access the data by directly typing vm1.title, I could also type $data.title because

01:37.920 --> 01:44.550
$data is the data block we passed here accessible from outside.

01:44.550 --> 01:52.320
I can prove this, if I create a new variable, data and set this equal to exactly the properties we have

01:52.320 --> 01:53.020
here,

01:54.260 --> 01:58.100
like this

01:58.320 --> 02:01.340
and then here I set data equal to data,

02:01.350 --> 02:03.850
now referring to this variable I created 

02:03.870 --> 02:12.160
outside of that instance, I can now down here check if the data stored in the $data property

02:12.160 --> 02:21.240
created by vuejs equals the data variable I created up here. Well let's see this in action, if I hit

02:21.240 --> 02:25.250
control and remove that semi-colon here,

02:25.260 --> 02:31.830
so if I hit control again and I open up my console, we see true here and this true refers to the only console

02:31.830 --> 02:34.770
log we have, to this one here.

02:34.780 --> 02:42.630
So the $data object, this data object is stored in our vuejs instance, actually still

02:42.630 --> 02:43.950
is this data object

02:43.950 --> 02:51.660
we set up up here. And this is by the way another way of how you may initialize the data in your instances,

02:52.020 --> 02:55.530
you don't have to write everything in this object,

02:55.530 --> 03:01.040
you may also create the data variable before creating your vue instance and then simply pass it as

03:01.070 --> 03:03.480
the value for this key value pair here.

03:03.510 --> 03:05.510
That is perfectly fine as you see here,

03:05.550 --> 03:07.350
it works in the same way,

03:07.800 --> 03:10.730
and this is one of the key things I want you to understand.

03:10.920 --> 03:14.340
Vuejs doesn't create its own enclosed world,

03:14.490 --> 03:16.070
it's normal Javascript code,

03:16.110 --> 03:22.470
it lives in the javascript code and it's able to interact with the javascript code around it, as you can

03:22.470 --> 03:27.540
see here. We can use a normal javascript variable to populate our data,

03:27.720 --> 03:30.670
we can access the instance from outside like here,

03:30.810 --> 03:35.280
we can use the proxied properties of the vue instance from outside,

03:35.280 --> 03:42.140
we can use multiple vue instances, we can throw in normal javascript code like this timeout

03:42.150 --> 03:42.920
where we can access 

03:42.940 --> 03:46.290
the vue instance data, we can do all of that.

03:46.320 --> 03:51.650
Of course we want to make sure that we don't mess with things under control of vuejs

03:51.650 --> 03:52.070
.

03:52.080 --> 03:59.790
so if we control a part of the html code, like this one with vuejs, you probably don't want to access it with

04:00.030 --> 04:07.140
vanilla javascript code too because it could mess up the reactivity of vuejs if it controls a certain

04:07.140 --> 04:07.960
part there,

04:08.070 --> 04:15.180
if it renders something with v-if and you try to access them with vanilla javascript code, you might access it when it doesn't

04:15.180 --> 04:16.710
exist or something like that,

04:16.710 --> 04:18.370
so that's something to watch out for.

04:18.570 --> 04:24.690
But generally there's nothing wrong with mixing your normal javascript code and vuejs, you don't have

04:24.690 --> 04:28.230
to create a vuejs only application,

04:28.230 --> 04:34.310
you can always throw it in if you only want to control parts or if you only need certain things of

04:34.370 --> 04:34.810
vuejs.

04:34.870 --> 04:41.280
I'm just emphasizing this because it is important to understand, once we will learn how to build

04:41.500 --> 04:42.150
vuejs

04:42.180 --> 04:44.300
only applications in this course too.

04:44.310 --> 04:48.350
Right now we're still in the stage where we only are controlling parts of the html page,

04:48.360 --> 04:53.260
keep this in mind and that is perfectly valid and something you will see in a lot of applications.
