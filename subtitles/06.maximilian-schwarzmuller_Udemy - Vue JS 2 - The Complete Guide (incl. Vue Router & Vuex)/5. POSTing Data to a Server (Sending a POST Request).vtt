WEBVTT

00:02.000 --> 00:06.980
We set up our applications such that we can submit this simple form here and send it to our firebase

00:06.980 --> 00:09.910
server which we also set up or our firebase app,

00:10.150 --> 00:14.710
the next step now is to do that, to actually send it. Now to send it,

00:14.720 --> 00:21.320
I will grab this link here on firebase, my firebase project which is modeling to my personal project

00:21.320 --> 00:24.970
which allows me to send data out there and then on Submit,

00:25.010 --> 00:27.500
Well I now want to send it instead.

00:27.680 --> 00:30.610
So here I will no longer log this to the console,

00:30.710 --> 00:34.640
instead the goal is to send the data to firebase.

00:34.640 --> 00:41.310
Now since we registered vue resource here on our global vue object here,

00:41.330 --> 00:49.130
the one we imported from vue up here, since we did this every vue instance we create has access to http

00:49.310 --> 00:51.260
through vue resource.

00:51.290 --> 00:54.370
Therefore I can now call this and then $http,

00:54.380 --> 00:57.860
now $http was added by vue resource,

00:57.860 --> 01:03.740
it's not available by default but now it was added due to us implementing this plugin with the vue

01:03.810 --> 01:05.060
use function.

01:05.270 --> 01:13.010
So I can then access this http object here and on this object, I get a couple of different methods I

01:13.010 --> 01:19.910
can call, basically one method for each http request type. So you could send a get request with the get method

01:20.330 --> 01:26.870
or as we want to do it here, a post request with the post method, post because we want to send some data

01:26.900 --> 01:28.200
to the server.

01:28.220 --> 01:33.340
Now this method then as a first argument expects the URL where we want to send it like this,

01:33.370 --> 01:39.320
that's the URL I just copied, though with firebase the special thing is sending it to this URL

01:39.330 --> 01:40.880
won't do anything,

01:40.880 --> 01:44.290
we have to specify a data node we want to create.

01:44.390 --> 01:51.650
So in this database here, we want to create a special node let's say data, and then we have this data node

01:51.650 --> 01:52.940
which holds our data,

01:53.120 --> 01:56.460
so we therefore have to go to our URL and add data

01:56.540 --> 01:57.920
and that still would not work,

01:57.920 --> 02:02.510
firebase only allows requests which target .json resources.

02:02.540 --> 02:06.850
So we have to simply add .json for firebase to handle this correctly,

02:06.920 --> 02:09.590
the .json is mandatory, the name here,

02:09.620 --> 02:10.910
data is up to you.

02:10.910 --> 02:15.530
This will create such a data package or node on our server where 

02:15.530 --> 02:17.230
this will be stored or in our database

02:17.240 --> 02:20.350
I should say. And with that, we set up the URL, though

02:20.360 --> 02:23.470
we of course also need to send some data, don't we?

02:23.500 --> 02:25.400
Now sending some data is very easy,

02:25.400 --> 02:31.570
we simply need to supply a second argument which allows us to send the data or to set up the data

02:31.580 --> 02:35.480
we want to send by default. Now which data do we want to send here?

02:35.570 --> 02:37.340
Well we want to send our user 

02:37.330 --> 02:41.800
so let's try sending this user and let's see if that works.

02:41.950 --> 02:45.920
This is how we generally set up a post request, for a get request,

02:45.920 --> 02:49.610
the second argument here of course wouldn't be needed but I'll come back to this.

02:49.850 --> 02:57.020
Now that will send the request, though we also might want to do something with the response, the vue

02:57.020 --> 03:03.410
resource package uses the promise library or uses this promises approach.

03:03.410 --> 03:09.440
So this will be a promise which means it's good for asynchronous action because it promises us to give

03:09.440 --> 03:15.890
us back some data in the future and it can only promise us this in the future because today, it isn't there yet, reaching

03:15.890 --> 03:19.760
out to a server is no synchronous task, it takes some time.

03:19.820 --> 03:27.320
So therefore I can now add then, the then function we do have available on promises which will allow

03:27.320 --> 03:32.030
me to add a function to be executed once this operation is done,

03:32.030 --> 03:36.680
so once this request has been sent and once we did get a response back.

03:36.710 --> 03:43.580
So here in this then function, I can use the response I get back and I use an ES6 function here with

03:43.580 --> 03:46.960
the arrow and then I can handle it here,

03:46.970 --> 03:53.900
so in this case here, I could simply say console log response to have a look at what we're actually

03:53.900 --> 03:55.490
getting back.

03:55.550 --> 03:56.910
Also important,

03:57.020 --> 04:01.380
you can add the second argument here too on this then

04:01.460 --> 04:04.890
function, that would be any error we get back.

04:04.970 --> 04:07.210
So here we can simply also log

04:07.370 --> 04:10.350
any error response we do get back.

04:10.700 --> 04:16.890
Well and with that set up, let's see if this now works, I'll go back to my application,

04:16.910 --> 04:20.710
open up the console to see any errors we might get

04:20.870 --> 04:23.330
and then I'll send some test data here.

04:23.390 --> 04:31.440
Let's hit submit and this looks good, we do get back a response which has some body where we do have

04:31.470 --> 04:33.500
a name which is very cryptical,

04:33.570 --> 04:35.190
I'll explain this in a second

04:35.340 --> 04:38.910
and then we do have the status 200 and that looks all good.

04:38.910 --> 04:42.580
Now we have a look in our firebase console in the database,

04:42.630 --> 04:49.460
you see this new data node was created, data of course because that was the name I set up here in the URL

04:49.460 --> 04:54.990
and if we have a look into this node, we see the same cryptical string and under this string,

04:55.000 --> 04:56.950
we see email and username, the data

04:56.970 --> 05:03.450
I submitted, also recognize that all the extra vuejs stuff vuejs created when we printed the object to

05:03.450 --> 05:05.750
the console before wasn't sent here,

05:05.760 --> 05:12.260
so that is really clever by vuejs here, it only sends our real object.

05:12.270 --> 05:14.600
Now what is this cryptical string here though?

05:14.760 --> 05:21.230
Well since we posted the data, it means we can submit the data over and over again, as you saw now, a

05:21.250 --> 05:23.650
node, new node was added under data.

05:23.760 --> 05:25.190
And that is what the string is for,

05:25.200 --> 05:29.890
it's a unique ID and this ID is necessary because otherwise the data would be equal

05:29.970 --> 05:34.650
and since we use post, we append new data to the existing one, we're not overwriting it,

05:34.740 --> 05:35.720
we're appending it

05:35.760 --> 05:41.100
and you can only append it if each resource has a unique identifier, otherwise there is no way to retrieve

05:41.100 --> 05:43.340
it securely in the future.

05:43.350 --> 05:45.280
This is what this strange string is

05:45.450 --> 05:52.080
which we also get back in the response by firebase and that more importantly is how easy it is to send

05:52.080 --> 05:59.700
a post request and to send it with your own data to your own URL and then as we see, handling the

05:59.700 --> 06:06.590
response here in the first function or in the first fucntion you can pass to the then function, this

06:06.660 --> 06:07.590
first callback.
