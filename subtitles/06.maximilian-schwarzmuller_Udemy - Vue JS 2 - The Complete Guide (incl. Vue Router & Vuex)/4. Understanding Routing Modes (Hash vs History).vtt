WEBVTT

00:02.030 --> 00:05.430
So we were able to set up our routes and navigate there in the last video,

00:05.540 --> 00:11.470
what we also saw is that we have this hashtag in the URL which was added automatically by the vue router.

00:11.690 --> 00:15.140
Now it was added because it's the default set up the vue router uses,

00:15.230 --> 00:20.970
it's a style you'll see a lot in single page applications due to a specific reason.

00:21.080 --> 00:26.080
If you have a normal route, normal URL I should say without the hash tag,

00:26.390 --> 00:30.810
then each request once you hit enter on your keyboard gets sent to the server,

00:30.860 --> 00:34.810
this is how the browser and how the web works and which makes sense, it would be hard to visit

00:34.820 --> 00:38.120
webpages if it wouldn't get sent to the server.

00:38.120 --> 00:43.580
The problem with sending it to the server is that we want to handle the route in our single page application

00:43.580 --> 00:46.320
though, we don't want to get the route to the server,

00:46.430 --> 00:54.030
we want to handle it on our local page here, though if we visit our page for the first time, in this case

00:54.030 --> 00:57.620
we want to get it to the server because we need to get the single page

00:57.710 --> 01:03.620
but if we for example visit /user without a hash tag, we would like to get our single page, the index.html

01:03.630 --> 01:10.550
file and then take over and handle the rest of the URL with our single page instead with the

01:10.550 --> 01:12.040
browser or the server

01:12.040 --> 01:18.230
I should say. Well the hash tag allows us to do just that, the part in front of the hash tag is sent to

01:18.230 --> 01:22.910
the server so to say, this will give us back our index.html file

01:23.090 --> 01:29.630
and the part after the hash tag is then handed over to our running Javascript application and may be

01:29.630 --> 01:31.490
handled by that application

01:31.490 --> 01:35.200
so that now we can extract our paths from there.

01:35.210 --> 01:41.960
This works fine and it spares us the issues we might face if we would have to configure our server

01:42.020 --> 01:46.610
in a certain way that it kind of gives us back the right thing. Though

01:46.640 --> 01:51.970
it turns out configuring our server isn't that difficult and having these URLs

01:51.980 --> 01:53.240
isn't that pretty,

01:53.300 --> 01:59.360
it would be nicer to have the normal URLs where we don't have a hash tag and still be able to use

01:59.360 --> 02:02.700
our single page application as we are used to do.

02:03.020 --> 02:05.040
Well turns out it's not that hard,

02:05.060 --> 02:11.360
the thing you will have to do on your server which I can't show you here is that you need to return

02:11.360 --> 02:12.920
the index.html file

02:12.920 --> 02:14.090
in all cases,

02:14.090 --> 02:19.550
so even in 404 error cases because that is what your server will throw if you visit this route which

02:19.550 --> 02:21.860
isn't registered on your server.

02:21.860 --> 02:24.020
This is what your server needs to do,

02:24.050 --> 02:31.430
always return the index.html file because then in the index.html file, our vuejs application

02:31.430 --> 02:36.250
gets launched and hence it is able to then parse our URL and take over,

02:36.470 --> 02:39.530
this is very convenient and gives us nicer routes.

02:39.620 --> 02:46.640
Now in order to tell the vuejs router that we want to use this way of setting up our URLs

02:46.670 --> 02:53.370
and that our server is configured correctly is simply to go to our router which we create here

02:53.420 --> 02:58.920
and not only pass the routes but also the mode property which you may set to history,

02:59.000 --> 03:00.770
that's the name for this

03:00.800 --> 03:02.230
no hash tag style,

03:02.240 --> 03:03.580
it's called history mode.

03:03.740 --> 03:08.190
The default mode is hash which you don't have to set because well it's the default,

03:08.240 --> 03:12.520
you can override it with history. And this will lead to the following behavior, if I

03:12.530 --> 03:15.570
now hit enter here, excuse me, not reload,

03:15.650 --> 03:16.740
hit enter,

03:16.910 --> 03:19.280
you now see I still load the user page,

03:19.430 --> 03:23.040
you'll see it reloads the page but then it navigates correctly.

03:23.060 --> 03:28.340
That of course works because our development server we're using here in the webpack project is automatically

03:28.340 --> 03:30.720
set up in a way to give us back the index.html

03:30.730 --> 03:32.770
file in all circumstances,

03:32.810 --> 03:34.080
otherwise this would not work,

03:34.130 --> 03:40.530
you need to configure your server appropriately. And to learn more about that, visit or google for

03:40.600 --> 03:41.720
vue router

03:41.990 --> 03:46.650
and then you may visit the official documentation on it.

03:46.750 --> 03:49.130
There, generally a good place to dive deeper,

03:49.130 --> 03:55.070
there you will find the html5 history mode point which explains how you may set up your server

03:55.160 --> 03:59.660
to serve the correct file but that's just a little addition.

03:59.780 --> 04:03.340
Let's now head back and now that we understood how we can change this,

04:03.350 --> 04:05.640
I will keep this history mode here.

04:05.840 --> 04:11.660
Let's now go back to the question how we can add links in our page to actually be able to click there

04:11.660 --> 04:12.650
and navigate around.
