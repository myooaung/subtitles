WEBVTT

00:01.860 --> 00:07.830
Let's start with the first exercise, starting the effect and then alternating between highlight and shrink

00:08.160 --> 00:10.370
on this first div here.

00:10.500 --> 00:13.530
I already get the start effect method here,

00:13.530 --> 00:22.440
so here I need to use set interval to well switch between these two classes, in order to attach to

00:22.440 --> 00:23.180
the classes,

00:23.190 --> 00:32.040
I also need some property in the data property here to which I can bind the class attribute. I'll name

00:32.080 --> 00:39.940
it effectClasses and this is just one possible set up here where I use an object which I want to attach,

00:40.110 --> 00:44.420
you could also simply store true or false here so yeah

00:44.430 --> 00:46.110
effectClasses might be just true or

00:46.120 --> 00:49.870
false and then set up this object up here in your html code,

00:49.890 --> 00:51.210
both will work as you learned

00:51.210 --> 00:54.660
in the last lectures. So here in this object,

00:54.690 --> 01:02.070
I basically want to have my highlight class and this shall either be attached or not,

01:02.070 --> 01:09.090
so initially I'll say well not attach it and the shrink class which initially should be attached for

01:09.090 --> 01:12.630
example. Up here on my div,

01:12.690 --> 01:21.610
I can now bind to this class property by using v-bind and then class

01:21.790 --> 01:29.190
and here I will refer to effectClasses, so to this property I just created. If I now hit control enter,

01:29.530 --> 01:35.500
well we see it is felt grey but hasn't really shrunken and to force it to shrink,

01:35.530 --> 01:44.370
let's add important here after the width, just like that if that is missing in your code you copied, it

01:44.370 --> 01:45.420
should be there though.

01:45.690 --> 01:51.970
So now you see it shrunk, now to make it alternate upon set interval when hitting the start effect

01:51.990 --> 01:52.920
button,

01:53.070 --> 01:58.680
I will add set up set interval here and I want to alternate every second,

01:58.680 --> 02:04.920
so I'll set this to 1000 and then this the function I'll execute every one second.

02:04.920 --> 02:09.510
Now in this function here, I will need access to my vue instance,

02:09.660 --> 02:12.120
therefore I need to bind it to a new variable,

02:12.120 --> 02:17.450
so this is bound to vm to get access to my properties on vm here.

02:17.460 --> 02:19.150
I can then set vm

02:19.640 --> 02:20.290
and then here

02:20.340 --> 02:31.160
effectClasses highlight equal to the opposite and I'll say this right away, there will be other

02:31.160 --> 02:33.590
ways of controlling this of course,

02:33.590 --> 02:35.850
feel free to come up with any other way,

02:35.870 --> 02:38.510
I'm going to choose a very explicit one here

02:38.990 --> 02:44.330
and of course I want to do the same for my shrink class here,

02:44.360 --> 02:50.230
so let's copy that too. If I now hit control enter and click start effect,

02:50.240 --> 02:57.030
we see that every second this jumps around so it changes the style because it is what I set it up to,

02:57.080 --> 02:59.210
I'm alternating between these two classes, 

02:59.210 --> 03:06.220
I'm the reversing the value of true or false here in the effectClasses property every one second thus

03:06.230 --> 03:13.270
changing the style applied to this class. Time for exercise number two, create a couple of css classes

03:13.270 --> 03:13.960
and attach them

03:13.960 --> 03:17.680
via the array syntax to this unstyled div here.

03:17.980 --> 03:19.510
Well let's quickly do this,

03:19.510 --> 03:21.180
I'll add here

03:21.190 --> 03:27.910
a class let's say blue and I want to set the background color to blue here.

03:28.300 --> 03:31.970
Next, I will have set this to float,

03:31.970 --> 03:39.440
I will create a new class, float where I set up float right

03:39.520 --> 03:53.020
and lastly, I will set up text color with a dash where I will simply set color to yellow, let's say. With

03:53.370 --> 04:00.020
that set up, I can now go to this div, use v-bind again to bind to my class and now, I want to use an

04:00.020 --> 04:04.680
array to attach all these different css classes here.

04:04.700 --> 04:07.250
Now I can, now in order to do that,

04:07.250 --> 04:12.290
I first need to create some properties holding links or holding the names of these classes,

04:12.290 --> 04:19.430
of course to be straight, this of course is a much longer and complicated way than just using normal

04:19.430 --> 04:23.700
class attribute and saying float, text color and so on

04:23.840 --> 04:30.340
but the sense of this exercise of course is to understand how to use this array syntax.

04:30.440 --> 04:39.310
So here in my data property, I will then create float and set this equal to float as a string referring

04:39.310 --> 04:40.500
to this class

04:40.870 --> 04:43.510
and then I can use float in here.

04:43.510 --> 04:47.810
I also don't have to create a property for each css class here,

04:47.860 --> 04:56.830
I can also enclose them in single quotes, blue and text color because that is what float here will also

04:56.830 --> 04:57.970
resolve to in the end,

04:58.090 --> 05:00.620
a single quote in css name.

05:00.670 --> 05:03.790
So if I now hit control enter, we see floats in the right

05:03.790 --> 05:05.850
it is yellow and it has a blue background,

05:05.860 --> 05:12.220
it doesn't look particularly pretty but our styles are applied successfully using this array syntax thus

05:12.220 --> 05:16.640
allowing us to flexibly add multiple classes. In lecture number three,

05:16.660 --> 05:22.880
we want to let the user enter a class and attach it. Well we already get a couple of classes which we

05:23.050 --> 05:25.130
can attach to this div here,

05:25.150 --> 05:36.670
so in order to see it though, I will add a new one which I will set to visible and this shall simply

05:36.670 --> 05:45.640
be where I'll add a width of 100 pixel and a height of 50 pixels so that we can always see this div.

05:46.090 --> 05:54.430
I can then use v-bind here to bind to my class and now to show yet another way of adding this,

05:54.490 --> 05:56.480
I will use the inline syntax,

05:56.500 --> 06:01.360
writing it here in the html code, I could outsource this in a separate property in the data property as

06:01.360 --> 06:08.400
well like we did here for effectClasses. And here I will always attach visible, the class I just created

06:08.410 --> 06:09.900
so that we could see the div

06:10.300 --> 06:17.250
and then I want to let the user attach another class. The user attached class will be stored in a property

06:17.290 --> 06:20.540
here, I'll name it user class,

06:20.560 --> 06:26.890
initially it's empty and I can bind to this property using two-way binding with v-model here.

06:26.890 --> 06:32.740
This will make sure that whatever the user inputs gets bound to this user class property here and now

06:32.740 --> 06:38.880
I want to use this user class property here in my setup in this div, so right

06:38.890 --> 06:45.610
now, I'm attaching visible true and now I can mix this or can use the array syntax and mix this

06:46.060 --> 06:52.540
class here which is always attached, so I could have of course also just written string visible but I

06:52.670 --> 06:58.480
just again want to show the different possibilities because maybe we had some code which conditionally changes

06:58.480 --> 07:00.540
true or false here.

07:01.030 --> 07:07.720
But now I want to also bind my user class here and this will just be a string which represents a class

07:07.720 --> 07:08.020
name,

07:08.020 --> 07:09.190
keep this in mind,

07:09.580 --> 07:15.970
so if I now hit control enter, we kind of see the div here but we really only see it once I enter blue here.

07:16.180 --> 07:19.370
We can also now enter float to also float it,

07:19.420 --> 07:24.280
so this is also possible, we can kind of chain our classes here separated with a whitespace of course

07:24.280 --> 07:27.420
so that it really is different classes

07:28.160 --> 07:36.970
and yeah, this is how we can reactively or flexibly set a class, doesn't have to be changed by user

07:36.970 --> 07:37.400
input,

07:37.400 --> 07:38.010
this is just the

07:38.020 --> 07:39.670
easiest source to simulate

07:39.670 --> 07:46.940
there, could be any source changing user class here though and mixing it with the array syntax with this other

07:46.940 --> 07:52.840
way of adding a class with key value pairs where the keys has the class name or gives you the class name

07:52.990 --> 07:59.160
and the value indicates whether this class should be attached or not, stored as an object directly inline

07:59.260 --> 08:00.730
in the HTML code there.

08:02.110 --> 08:04.490
In exercise number four, I want to pick up on that

08:04.750 --> 08:10.660
but now the user shall not only enter his own class but also be able to switch this visible switch, let's

08:10.660 --> 08:11.680
say.

08:11.800 --> 08:21.190
So here I want to bind to a new property which I haven't created yet which I'll name isVisible and

08:21.190 --> 08:24.350
I'll set this to true initially.

08:24.660 --> 08:33.870
I can therefore here in the first input still bind to let's say user class, on the second input here,

08:33.900 --> 08:44.330
I then want to bind to isVisible to let the user change this between true or false. On this div here, I

08:44.460 --> 08:47.050
now bind to class as above

08:47.490 --> 08:51.050
and I will simply copy the code from there

08:51.210 --> 08:58.410
but the key change here is that for visible, for this object, I just said the value here determines whether

08:58.440 --> 09:01.320
this visible class will be attached or not.

09:01.320 --> 09:03.180
Now the user is able to set this,

09:03.210 --> 09:10.340
so I will bind this to isVisible referring to this property which is bound to this input here.

09:10.560 --> 09:13.190
With that in place, let's hit control enter,

09:13.360 --> 09:16.800
you see true is populated and we clearly see something there,

09:16.800 --> 09:20.580
if I remove it, it seems to get removed as the input then moves up,

09:20.580 --> 09:24.470
so let's change this back to true and let's name it blue.

09:24.480 --> 09:28.740
There it is, again if I remove true here it's gone,

09:28.740 --> 09:34.230
if I set it to anything else which is interpreted as true, we see it again, if I explicitly set it to

09:34.230 --> 09:36.790
false, we also see it,

09:36.810 --> 09:43.710
the reason being that whatever we enter here always is a string and strings are interpreted as true,

09:43.800 --> 09:45.620
not cast to booleans

09:45.630 --> 09:46.860
automatically.

09:46.890 --> 09:50.400
So this is why only an empty input field will remove it

09:50.490 --> 09:56.580
whilst false won't, because again it is treated as a string not as a boolean and strings are therefore

09:56.580 --> 09:58.390
then always treated as true.

09:58.470 --> 10:03.960
So that's just a little issue you might have with understanding this otherwise,

10:04.000 --> 10:09.830
so that's important to understand how javascript, that's not vuejs, but javascript works behind the scenes

10:09.960 --> 10:13.510
but again, an empty input field will get rid of it.

10:13.560 --> 10:15.140
Time for exercise number five,

10:15.180 --> 10:20.910
let's repeat the exercise number three so that was the one where we were able to enter our old

10:20.910 --> 10:26.490
class name but now with a style for style of our choice.

10:26.490 --> 10:33.180
So here, I will set up the background color since it really is the easiest one to see, though that is

10:33.180 --> 10:39.840
the reason and I will name this my style because I want to create an object where I not only have the

10:39.840 --> 10:45.330
background color which is set through the user but I also want to have the width which let's say is 100

10:45.330 --> 10:53.100
pixels again where I also have my height which is 50 or let's make it 150 pixels to mix things up

10:53.280 --> 11:01.110
and then I want to have my background color, important camel case or alternative normal css name with

11:01.110 --> 11:08.760
the dash in this case but inside single quotation marks and then bind this to a property which is set

11:08.940 --> 11:11.010
through the user later on,

11:11.010 --> 11:18.180
so here initially I will set it to grey let's say. Well on this input where I want to let the user change

11:18.180 --> 11:19.300
the background color,

11:19.350 --> 11:28.980
I can set up v-model to be hooked up to my style background color because this is the property I want

11:28.980 --> 11:31.150
to change by the user, right

11:31.350 --> 11:35.530
and then here on this div, I will simply add v-bind

11:35.670 --> 11:42.120
but now I'm not binding to class as before but I want to set the style, so I'm binding to style and I

11:42.120 --> 11:49.770
pass my style as an argument which is an object, what style expects to get, which has the width and height

11:49.800 --> 11:55.200
and this dynamically settable background color. With control enter,

11:55.530 --> 11:58.720
we already see this gray div here

12:00.140 --> 12:04.070
and now if I change this to blue, it changes to blue

12:04.190 --> 12:08.290
and of course that works with any color which is recognized.

12:08.400 --> 12:17.240
It should also work with hex codes so that will also work here, anything which can be interpreted as

12:17.270 --> 12:19.230
a valid color in the end.

12:19.600 --> 12:24.180
This is how we can make parts of our style dynamic as you see here,

12:24.180 --> 12:30.290
one of course you can increase this degree of flexibility, you could add inputs setting the

12:30.290 --> 12:31.240
width and height

12:31.400 --> 12:35.550
and again as with the class, of course you cannot only react to user input,

12:35.650 --> 12:41.210
any place where you change this background color or this width or height or whatever will have the same

12:41.210 --> 12:43.420
effect here and will update the styles,

12:43.430 --> 12:48.830
this is what this style binding is there for in the end, I'm just choosing user input all the time because

12:48.830 --> 12:51.920
it's the easiest to simulate and to play around with for us.

12:55.390 --> 12:58.060
Almost done, time for the last exercise,

12:58.060 --> 13:04.600
the most complex one here. We want to create a simple progress bar below start progress,

13:04.630 --> 13:11.030
so this div here shall become the progress bar. In order to make it a progress bar,

13:11.110 --> 13:17.830
I will first create a new class and you could do this in your vuejs instance of course too but all

13:17.830 --> 13:24.760
I want to do here is I want to set up a width of 200 pixels and let's say a height of 20 pixels and

13:24.760 --> 13:29.980
I want to give it a border of one pixel solid and black, so that we can always see the empty progress

13:29.980 --> 13:37.290
bar at least. So I can now add v-bind class to use vuejs for that right now,

13:37.420 --> 13:43.150
add an array and bind to progress bar with single quotation marks.

13:43.150 --> 13:50.320
As you can see after hitting control enter, we now get this progress bar at the bottom. Of course it's

13:50.320 --> 13:53.800
not very interesting right now because it's not updating,

13:54.220 --> 14:01.180
well we can simply update it by changing the background color style and the width, kind of.

14:01.690 --> 14:06.260
Now a real progress bar would have this outer div,

14:06.310 --> 14:07.290
this one here

14:07.450 --> 14:13.270
and then an inner div which reflects the actual bar whereas the outer div reflects the maximal bar

14:13.300 --> 14:16.150
kind of, you could set it up like this,

14:16.180 --> 14:22.350
I will make a very simple progress bar where the whole bar grows and possibly shrinks.

14:22.400 --> 14:24.660
So this is really just what I set up here,

14:24.670 --> 14:29.950
you may of course choose a more complicated progress bar where you have this outer box and this inner

14:30.160 --> 14:34.590
bar but then you also have to make sure that the inner bar stops growing at some point.

14:34.690 --> 14:40.210
So this is the default progress bar we'll always see but now I want to replace it with a background color so

14:40.210 --> 14:47.530
that we get a growing one, for that I first need to hook up start progress with v-on for example and listen to

14:47.530 --> 14:51.600
a click event here of course where I say start progress.

14:51.730 --> 14:54.610
This is a function I yet have to create,

14:54.850 --> 15:02.620
so I'll do this here after start effect, we have start progress which is a function where I will use

15:02.690 --> 15:09.420
set interval as well because I want to with one l though, because I want to update it every half the

15:09.420 --> 15:10.940
a second let's say

15:11.260 --> 15:16.720
and then here, the function which should get executed every half second.

15:16.750 --> 15:21.700
Now in this function, I again need access to my vue instance so I'm storing it in a variable, the this

15:21.700 --> 15:22.160
keyword,

15:22.170 --> 15:24.810
so this reference to my vue instance.

15:25.420 --> 15:33.730
And then here inside set interval, I want to change some styles which I want to apply to this progress

15:33.730 --> 15:34.880
bar here,

15:35.230 --> 15:42.340
so I will add v-bind style and I want to style or I want to bind to a new style, a new object I created

15:42.340 --> 15:46.930
in this data property here which I'll name progress bar.

15:46.930 --> 15:49.550
This is a normal javascript object

15:49.570 --> 15:55.680
and here I will have a width of let's say 0 pixels initially

15:55.900 --> 16:04.270
and I will have a background color of let's say red by default and you could overwrite that. In set

16:04.420 --> 16:13.330
interval, I now want to access this progress bar object I just created, progress bar property and change

16:13.330 --> 16:14.260
the width,

16:14.260 --> 16:16.390
now to what do I want to change width

16:16.390 --> 16:19.200
though? It should continuously grow,

16:19.270 --> 16:26.350
so I somehow also need to increase the width, I need to store the current width and then add something

16:26.350 --> 16:27.370
to it, right?

16:27.490 --> 16:33.400
Well outside of this set interval function here but in the start progress function, I can simply create

16:33.400 --> 16:39.140
a variable width which I set to zero initially and then here in the progress bar,

16:39.410 --> 16:53.450
I set width equal to width plus 10 let's say and then here, I can set the vm.progressBar.width equal to width

16:53.920 --> 16:54.600
plus

16:54.650 --> 16:58.040
and since this need to be in pixels, pixels to also convert it to a string.

16:58.190 --> 17:01.880
Well let's try it out by adding to this style here,

17:01.910 --> 17:05.560
the style I want to add is progress bar,

17:05.570 --> 17:11.630
remember this is the object where I'm overwriting the width down here in the set interval function.

17:11.630 --> 17:14.370
So if I hit control enter to let this reload,

17:14.630 --> 17:16.330
let's hit start progress

17:17.300 --> 17:18.900
and we see it grow.

17:19.220 --> 17:20.750
And this will grow infinitely,

17:20.750 --> 17:22.010
it won't stop,

17:22.010 --> 17:28.600
so this would be an extra challenge I guess, to implement some method to make it stop at some point.

17:28.700 --> 17:32.110
I will simply reload the application here to

17:32.300 --> 17:35.120
well make it kind of hard stop here.

17:35.300 --> 17:41.150
But this will be a nice little extra but it's not really core of the styling task which is why I don't

17:41.150 --> 17:42.380
include it here,

17:42.410 --> 17:48.590
what this should show you though is how you can work with styles, how I set up my own style object here

17:48.630 --> 17:50.780
as a property in the data field, in

17:50.910 --> 17:56.920
the data property of my vue instance and how I then change a part of this progress bar object, the width

17:56.950 --> 17:59.360
in the set interval function.

17:59.370 --> 18:01.790
And of course I could change any part of it

18:01.790 --> 18:04.170
and of course there are different ways of setting this up,

18:04.280 --> 18:10.580
so feel free playing around with styles and classes and getting comfortable binding them dynamically

18:10.820 --> 18:14.770
in different ways, changing different things here in vuejs.
