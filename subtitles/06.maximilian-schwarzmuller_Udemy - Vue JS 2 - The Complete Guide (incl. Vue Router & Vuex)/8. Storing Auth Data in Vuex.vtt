WEBVTT

00:02.920 --> 00:09.350
In the last lecture we moved our code to reach out to the web, to vuex, to the actions,

00:09.430 --> 00:15.820
now I want to add a mutation which actually logs our user in, I'll name it auth user

00:16.180 --> 00:19.990
and there, I will receive the state by default

00:19.990 --> 00:26.190
and the second argument I will receive in this method will be my user data,

00:26.190 --> 00:28.190
let's name it like this.

00:28.230 --> 00:35.850
I will then set state ID token equal to user data and there, I expect to have a token property,

00:35.940 --> 00:46.370
it will be our job to pass this on and state user ID, this should be user data, user ID let's say.

00:46.450 --> 00:49.810
Now I expect these two fields on that user data object,

00:49.810 --> 00:52.070
so its my job to pass it on,

00:52.150 --> 01:00.190
we do pass it on by committing this auth user mutation in our then blocks for both signing up and signing

01:00.190 --> 01:00.750
in,

01:01.030 --> 01:06.700
so let's expand these and not only log something to the console, though I will still do that

01:07.060 --> 01:11.220
but let's also commit auth user here.

01:12.580 --> 01:19.130
Now there, I need to pass a javascript object and we just saw what we need to set up there, a token and

01:19.130 --> 01:28.030
a user id property because I try to access this in the auth user mutation. The token field therefore

01:28.060 --> 01:30.450
has to be extracted from the response,

01:30.500 --> 01:35.250
the response is an axios response objects so we have a data field there

01:35.470 --> 01:42.190
and then if you remember our earlier console logs, there will be an ID token field which is basically

01:42.190 --> 01:44.720
the data sent back from firebase.

01:44.740 --> 01:51.790
Now the user ID can also be extracted from res data and there, if you remember our earlier console logs,

01:52.120 --> 01:56.970
firebase stores the user ID in a field named local ID,

01:57.220 --> 01:59.910
these are the two fields I'm interested in for now.

02:00.370 --> 02:06.760
I'll take this then block and use the exact same one for logging users in,

02:06.760 --> 02:09.920
now with that we should have a way of storing the token,

02:10.060 --> 02:16.210
let's see if that works. I'll go back to the application and create yet another user with test3, let's

02:16.210 --> 02:24.370
say, let's add a valid password and hit submit, well we get the console log. To find out if it works, I'll

02:24.370 --> 02:29.950
use my vue dev tools which I mentioned earlier in the course which allow me to look into the store,

02:30.520 --> 02:32.650
if we access this and go to the store icon, 

02:32.690 --> 02:40.480
we see the auth user action was dispatched and our state now indeed knows an ID token and a user

02:40.480 --> 02:48.910
ID. So this now works, we're storing this data for a signing in, let's go to sign, for signing up excuse

02:48.910 --> 02:49.030
me,

02:49.030 --> 02:55.030
let's now go to sign in and reload so that we lose our state because it's only stored in javascript

02:55.030 --> 02:58.470
and that is lost if we reload the page.

02:58.480 --> 03:03.170
Now let me login with a valid user here and this also works,

03:03.220 --> 03:11.010
we commit auth user and we then do show or do store the token and the user ID.

03:11.500 --> 03:14.920
So this is all working and that's great,

03:14.950 --> 03:22.000
now the next step is to take advantage of this token, to append it to requests going out to protected

03:22.000 --> 03:29.590
resources before we then later also dive into how we can utilize the token so that we actually change

03:29.590 --> 03:34.590
what we see in the header, for example sign up sign in, that we only see that if we got no token.

03:34.870 --> 03:40.990
So the next thing however is to make sure we attach the token to outgoing requests which need it,

03:41.020 --> 03:43.100
let's do that in the next lecture.
