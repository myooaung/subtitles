WEBVTT

00:01.860 --> 00:03.710
So we learned a lot about components

00:03.720 --> 00:10.960
with the data property which should be a function, with the fact that we shall only have one root

00:11.200 --> 00:13.810
element in our component template

00:14.050 --> 00:21.160
and with the well methods of registering our component globally like this and locally with the components

00:21.160 --> 00:24.280
property. I want to do this here now too

00:24.430 --> 00:29.060
and I want to connect our components with some other things we learned earlier.

00:29.590 --> 00:32.370
Let me create a new vue file here,

00:32.510 --> 00:38.220
I'll name it ServerStatus.vue,

00:38.250 --> 00:40.990
this is kind of the file naming convention we currently use

00:40.990 --> 00:50.110
by the way. You give your vue components this naming where you start with a capital character and then

00:50.110 --> 00:58.780
you have well this casing where each sub-word in your title, in your name also begins with a capital

00:58.810 --> 01:00.730
character like status here.

01:01.090 --> 01:04.040
This will create our ServerStatus component though

01:04.040 --> 01:10.420
of course this file name is totally irrelevant for the selector you choose to use in the end because

01:10.420 --> 01:17.050
you set up the selectors like this in the vue component method or as a string in the components property

01:17.050 --> 01:19.270
for local components anyways.

01:19.570 --> 01:26.410
So in the ServerStatus component, I'll copy my code from the home component and here I basically want to

01:26.410 --> 01:33.400
use the exact same status, so or the same set up I have my template where I have the ServerStatus

01:33.400 --> 01:35.160
which I can change with a button

01:35.380 --> 01:40.380
but now let's imagine our application manages the state of several servers

01:40.470 --> 01:44.610
and so we want to be able to track the state of each server and change it.

01:44.950 --> 01:48.960
So in the home component, I will no longer output the ServerStatus,

01:49.000 --> 01:56.080
I will no longer manage data here, instead here I will only want to loop through all my servers I got.

01:56.670 --> 02:03.040
And for this, I need a for loop but I also need to have access to the ServerStatus component.

02:03.040 --> 02:08.660
Now I could register ServerStatus globally but here, I want to do this locally,

02:08.710 --> 02:17.880
so I'll add the components method and here, I set up a key as a string and I'll name it app-server-status.

02:18.040 --> 02:25.180
Therefore I will rename my global components here so that I don't get problems which I will simply name

02:25.270 --> 02:34.090
app servers, also adjust app servers here in the template of course to use this new selector we set up

02:34.090 --> 02:39.690
here globally and then in the home component, I have my local app-server-status selector

02:39.940 --> 02:47.870
and I want to refer to the component in the ServerStatus.vue file. Well for this, I need to import it

02:47.890 --> 02:50.990
here in this script tag which of course is possible here too,

02:51.010 --> 02:58.240
that's normal javascript code and I can use this import syntax since we're using ES6 since our project

02:58.270 --> 03:04.610
will compile to ES5 and allows us to use features like this which is very handy to split up the file

03:04.610 --> 03:06.980
or the project over multiple files.

03:07.300 --> 03:13.050
So here I will then import ServerStatus and the name here is totally up to you

03:13.060 --> 03:19.220
again, we don't imply a name here when we export just the default but it makes sense to use the file name

03:19.240 --> 03:25.670
so that you easily see where this is coming from, from and then it is from ./ServerStatus.vue

03:25.730 --> 03:27.490
file.

03:27.520 --> 03:33.550
Now here I simply assign the object we are importing from there to the selector and therefore I can

03:33.550 --> 03:38.370
now use app-server-status in my template

03:38.620 --> 03:43.690
but as I said, I want to loop through this and have multiple servers, no problem.

03:43.690 --> 03:55.030
I can use v-for and simply loop through it by saying server in 5 to loop from 0 to 5

03:55.030 --> 04:00.310
if you remember this, but with this set up we would get an error because even though we only have one

04:00.310 --> 04:02.060
element here, our code,

04:02.170 --> 04:04.520
this will result in five elements in the end

04:04.540 --> 04:07.780
so we would have again more than one root element.

04:07.990 --> 04:13.190
So again wrap it inside a div to have valid code here

04:13.690 --> 04:21.190
and with that, if you hit control s and save this, it should recompile and once this reloads here, you

04:21.190 --> 04:26.140
should see all these servers. As a side note if you have problems with it reloading,

04:26.230 --> 04:30.890
always feel free to cancel this process with Control-C and rerun npm run dev.

04:30.890 --> 04:35.470
So now we got all our servers which you can switch manually

04:35.650 --> 04:45.800
and now we're using both the global, the app servers home component and a local component here.

04:46.420 --> 04:53.830
And with that, you saw how you can use them, create them in single files, with this single file set

04:53.830 --> 04:54.120
up,

04:54.160 --> 04:55.430
important here, 

04:55.510 --> 04:58.340
keep in mind you have to have one root element.

04:58.630 --> 05:03.910
You also saw how to export them with export default and import them in other files

05:03.910 --> 05:10.920
due to us using ES6 which is required for this whole multi-file setup and you saw how to register

05:10.920 --> 05:13.050
them both globally and locally.

05:13.240 --> 05:20.950
You also saw how to use them with v-for because you can use your newly created components like normal

05:20.950 --> 05:22.330
html tags,

05:22.420 --> 05:27.400
you can use them with v-for, with v-if, all the things we learned

05:27.480 --> 05:30.720
and with that I'd say it's time to practice this.
