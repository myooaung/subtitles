WEBVTT

00:02.220 --> 00:04.900
So let's work on the password validation

00:04.960 --> 00:11.510
now, the password validation is special because the passwords should be equal.

00:11.530 --> 00:15.210
Now how can we check for equality,

00:15.330 --> 00:17.510
how does this work?

00:18.120 --> 00:19.880
Let's go down to validations

00:19.890 --> 00:25.950
first of all and let's define a validator for the first password field, I'll name it password

00:26.190 --> 00:28.880
and I definitely want this to be required,

00:28.920 --> 00:32.560
now I also want to ensure that it has a minimum length let's say,

00:32.730 --> 00:36.800
so let's import minLength here.

00:37.200 --> 00:44.050
With that, I can now add this minLength validator and it works a lot like minValue, I'll name it minLen,

00:44.340 --> 00:50.340
you could name it minLength of course, use the minLength here and this also is a function where I need

00:50.340 --> 00:52.230
to pass the length,

00:52.240 --> 00:59.540
so here I want to say have at least six characters. That also by the way is a requirement by firebase,

00:59.540 --> 01:01.970
so this actually fits firebase.

01:01.970 --> 01:03.830
So now I got the minLength,

01:04.010 --> 01:10.930
this should make sure that we correctly validate the first input, to find out if we do,

01:11.120 --> 01:14.960
let's go to the input which wraps the first password

01:15.230 --> 01:21.570
and let's add the class binding here to also bind to a javascript object as we did before

01:21.650 --> 01:30.130
and let's bind invalid here to $v.password.$error, as we did earlier.

01:30.290 --> 01:33.550
Now with that, we also need to connect the password of course,

01:33.580 --> 01:42.290
so I'll add the @blur event and bind this $v.password.$touch as a function

01:42.290 --> 01:48.560
call. With that if we go back to our application, if I start typing here and click out of it, it's marked

01:48.590 --> 01:54.920
as invalid, as soon as I enter a valid password which is more or equal to six characters long,

01:54.920 --> 01:56.610
now you see it's valid.

01:56.660 --> 01:57.740
Now that's great

01:57.740 --> 02:01.520
but we want to make sure that it's actually equal to this password

02:01.790 --> 02:06.850
or to be precise, that this second password is equal to the first one.

02:07.190 --> 02:15.350
So for that, I'll go back to my form and I'll add another validations group here, confirm password which

02:15.350 --> 02:18.170
should refer to the second input, there

02:18.170 --> 02:24.050
we could also specify required and minLength but this is not really necessary because if we say that

02:24.050 --> 02:30.650
the value has to be equal and we already require these validators on the first password, they're implicitly

02:30.650 --> 02:32.240
also assumed on the second,

02:32.270 --> 02:34.240
so we don't we need to check this here

02:34.580 --> 02:42.220
instead I want to use a special built-in validator which I'll also import which is called sameAs.

02:42.410 --> 02:51.080
Now as you probably are able to guess, sameAs allows us to check whether the value is equal to a different

02:51.080 --> 02:51.930
value,

02:51.990 --> 02:58.860
now I want to add sameAs here on my confirm password field so I'll name it

02:58.880 --> 02:59.910
sameAs

02:59.930 --> 03:05.810
but here actually, I now need to call sameAs as a function

03:05.870 --> 03:09.670
and now to this function, you can pass two types of data.

03:09.950 --> 03:13.520
The first is a property name of your vue instance,

03:13.520 --> 03:20.580
so we could pass password, that's the value I'm binding to with v-model on the first password field.

03:20.930 --> 03:26.840
Let's start with that, I can pass password and you have to make sure that you type it in exactly the

03:26.840 --> 03:30.720
same way as your property on your vue instance is named.

03:31.160 --> 03:39.290
Now let's find out if this works by simply going up to our form and by adding our error binding here

03:39.320 --> 03:41.300
to the confirm password group,

03:41.300 --> 03:44.000
we just need to update it to check for

03:44.030 --> 03:47.870
$v.confirmPassword, if this has an error

03:48.140 --> 03:52.440
and of course I will also connect it with @blur then,

03:52.760 --> 03:54.900
so here I'll touch

03:54.950 --> 04:03.770
confirm password. Let me now save this, if I go back to my application, if I enter a valid password in the

04:03.770 --> 04:09.800
first field and I click into the second and click out of it, it's marked as invalid,

04:09.860 --> 04:11.020
so this looks good.

04:11.260 --> 04:15.170
If I now enter exactly the same value as in the first field,

04:15.380 --> 04:18.410
it becomes valid, if I enter a wrong one,

04:18.410 --> 04:19.680
it's invalid again.

04:19.700 --> 04:28.290
So this is already working and this is how simple and easy you can add equality validations, as I said,

04:28.330 --> 04:33.010
this is only one option though, I'll keep it around but comment it out,

04:33.050 --> 04:40.760
the second option is that you use sameAs but you don't pass the property name but you pass a function

04:40.760 --> 04:41.560
to it.

04:41.570 --> 04:45.940
This can be a normal function with the function keyword or an error function,

04:46.040 --> 04:52.680
now this function receives one argument which is the vue instance of this component,

04:52.760 --> 04:55.020
I'll name it vm here.

04:55.190 --> 05:03.270
Now in this function, you can simply return the property you want to compare to the value of confirm password,

05:03.350 --> 05:11.780
so you could access vm email here to reach out to this email property or of course, you use password

05:11.870 --> 05:16.610
which probably makes more sense and therefore is just a more verbose way of achieving what we

05:16.610 --> 05:17.630
already had

05:17.750 --> 05:22.140
but this is especially useful if you don't just want to check against a certain value

05:22.250 --> 05:28.220
but let's say you wanted to check whether it's the old password plus a B at the end which makes absolutely

05:28.220 --> 05:32.120
no sense here but which might make sense in some use cases,

05:32.120 --> 05:33.410
let's see this in action.

05:33.530 --> 05:40.340
If I now go back to the form, remember I have to add a B at the end, if I enter some password and I enter something

05:40.330 --> 05:48.290
into confirm password, if I enter something that is equal, it's still treated as wrong only if I had

05:48.350 --> 05:49.950
this b at the end,

05:50.060 --> 05:54.560
so the old value plus b at the end is treated as valid.

05:54.560 --> 05:59.690
Again, this doesn't make a lot of sense here but I just want to show what you can do with this function

05:59.750 --> 06:03.220
syntax if you just want to compare it against a value,

06:03.260 --> 06:10.920
this syntax here is shorter. But this is how you can compare or how you can validate forms for equality

06:10.970 --> 06:13.970
and of course that is something you also need a lot.
