WEBVTT

00:02.030 --> 00:04.630
The last lecture we use the default value for age

00:04.670 --> 00:07.230
and we also nested our properties.

00:07.550 --> 00:14.870
Now let's dive a bit deeper into how we can modify the way v-model works with these inputs.

00:15.080 --> 00:21.590
Right now, the data down there is updated with each keystroke and I can prove this by going to my password

00:22.370 --> 00:28.850
and outputting the current value directly below the password, simply so that we can see it on the same

00:28.850 --> 00:30.800
page as the input field.

00:31.100 --> 00:36.400
So if I save this if I now enter a password here, we can see it updates with each keystroke,

00:36.410 --> 00:37.560
that is the default,

00:37.580 --> 00:44.360
it reacts to the input event which means it updates whenever the input here changes.

00:44.370 --> 00:51.150
Now maybe, we only want to update it after we enter the full password and well clicked in another input, so

00:51.160 --> 00:57.500
basically once we're done finishing this input. We can do this by adding a modifier to v-model here,

00:57.710 --> 01:03.470
I can add the lazy modifier with .lazy, what this will do is that behind the scenes, it will now not

01:03.470 --> 01:06.130
listen to the input event,

01:06.140 --> 01:11.810
so whenever we type something, whenever we enter something new but to the change event which is only

01:11.810 --> 01:17.340
fired once we click somewhere else, once we leave that input. You can see it in action here,

01:17.510 --> 01:23.990
if I now remove this, you see test is still there, only once I click into another input field does

01:23.990 --> 01:25.350
test disappear

01:25.460 --> 01:31.310
and on the same hand, if I now type here, it will only appear if I leave that input. That might be the

01:31.310 --> 01:34.760
behavior you want if you don't want to update on each keystroke,

01:34.760 --> 01:41.300
for example if you know you're going to write your values only upon hitting submit anyways or that is

01:41.300 --> 01:44.490
the place where you then want to validate them and use them,

01:44.630 --> 01:48.230
well you might use lazy to not update this instantly.

01:48.260 --> 01:55.250
On the other hand, if you want to provide real time validation or give the user some hints upon a completion,

01:55.490 --> 01:59.990
you might need that behavior of automatically detecting each keystroke

02:00.020 --> 02:06.110
and not only react once the user is done but it's great to know that you get this option. Other modifiers

02:06.110 --> 02:10.960
you can use are trim to trim any excess whitespace at the beginning and end

02:10.970 --> 02:15.720
if you want to force that you don't have such whitespace or number,

02:15.740 --> 02:22.310
so .number, .trim would have been the alternative for trimming .number to force that behind

02:22.310 --> 02:26.900
the scenes the input is converted to a number right away. By default there will be a string,

02:26.900 --> 02:30.680
everything you input here is a string that is how html works

02:30.680 --> 02:36.710
but if you know you want to work with number in your vuejs code, you could add .number as a modifier,

02:36.800 --> 02:42.950
like we add .lazy here so .number like that and that would force it to be transformed to a number

02:42.980 --> 02:45.280
automatically so that you can work with that.

02:45.440 --> 02:49.570
That is how you can use modifiers to adjust the input way,

02:49.610 --> 02:56.170
so when to react as well as format with trim and number in the way you need it to behave.
