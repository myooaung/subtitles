WEBVTT

00:02.180 --> 00:03.950
So were are you successful?

00:04.070 --> 00:06.240
Let's start with Exercise one,

00:06.260 --> 00:08.710
creating this sign up form.

00:08.960 --> 00:13.100
Now we're in a form element here already with some bootstrap columns,

00:13.100 --> 00:18.150
so what I'll do here is I'll create a div with a class, form group to give it some nice bootstrap

00:18.260 --> 00:18.980
styling

00:18.980 --> 00:26.500
and in there, I want to have a label where I say first name and then I have my input which

00:26.500 --> 00:32.600
is of type text of course which shall hold my first name,

00:32.710 --> 00:36.760
I will give it a class, form control to improve the styling of it

00:36.980 --> 00:38.500
and then I'm going to copy that

00:38.560 --> 00:44.260
to also get another form group for the last name and you could style this differently to have them

00:44.260 --> 00:46.250
sit next to each other or something like that,

00:46.270 --> 00:48.210
I'll keep that really simple.

00:48.320 --> 00:54.820
Thereafter we want to fetch the e-mail address so that shall be the e-mail address here and then

00:54.910 --> 00:55.530
let's see,

00:55.570 --> 00:57.630
we shall fetch the password next,

00:57.670 --> 01:01.710
now here of course we shall change the type to password,

01:01.720 --> 01:03.470
I think that makes sense, to hide it

01:03.670 --> 01:07.140
and lastly, I want to create these radio buttons.

01:07.240 --> 01:12.180
Now radio buttons with the bootstrap framework are created like this,

01:12.220 --> 01:15.200
we still have our form group here

01:15.820 --> 01:23.080
but then inside this form group, we want to have a label and in this label, we have our radio button then,

01:23.110 --> 01:30.510
so the type is therefore radio and we set a value which is assigned to this radio button

01:30.580 --> 01:32.100
and here, this is yes

01:32.470 --> 01:34.410
and of course we display yes here,

01:34.420 --> 01:41.210
so the value in the html element is what will be stored thereafter and yes, thereafter is basically just

01:41.210 --> 01:44.500
the text we can see in our template.

01:44.890 --> 01:49.770
Now the other radio button belongs to the same form group, so I'll add it like this

01:49.930 --> 01:54.890
and here I want to have no as the value and also as what I see here.

01:55.210 --> 01:58.140
So let's see this in the running application,

01:58.150 --> 02:00.840
I'm quickly going to speed up my server here again

02:01.360 --> 02:02.950
and this is what I end up with,

02:02.950 --> 02:03.850
looks good.

02:03.910 --> 02:09.180
Now with that form created in html, the next step is to hook it up to,

02:09.310 --> 02:13.270
well our properties and create these properties in the first place.

02:13.300 --> 02:15.790
So let me create these properties quickly,

02:15.880 --> 02:22.350
I got an empty object down there so I'm changing this by using my data here or by setting up my data

02:22.600 --> 02:32.710
and here I want to have first name which is empty by default,

02:32.880 --> 02:36.810
thereafter I want to have a last name which is empty by default,

02:36.930 --> 02:37.920
then an email,

02:37.950 --> 02:39.850
empty by default and a password,

02:39.870 --> 02:41.760
you guessed it empty by default

02:41.880 --> 02:46.670
and then also my store data field which I'll set to true initially.

02:46.710 --> 02:47.700
Now I can hook them up,

02:47.700 --> 02:58.660
so here I want to assign v-model first name to this form group here, so for form control I should say

02:58.990 --> 03:05.500
then for the next, it's the last name and then for this one here, it's the email, for the password

03:05.500 --> 03:11.940
it's obviously the password property I'm assigning and then here, for this radio button,

03:12.130 --> 03:19.630
well to each of the two radio buttons, I assigned the store data v-model because keep in mind, we have to

03:19.630 --> 03:25.720
assign the same model here to make them alternate, to let vuejs know that these two radio buttons are

03:25.720 --> 03:29.320
alternatives and should be bound to the same property.

03:29.320 --> 03:35.820
Now with that, I can already output my content here and I can output the full name here which simply

03:35.820 --> 03:37.500
is my first name

03:38.700 --> 03:42.880
and then a whitespace and then my last name, it's as easy as this,

03:42.880 --> 03:49.210
we could also create a computed property named full name which kind of concatenates our string here, that

03:49.320 --> 03:50.530
will be an alternative,

03:50.710 --> 03:53.430
nice little challenge you could do if you want to.

03:53.630 --> 03:59.950
Then down there, I of course want to output the email and then here, the password of course

04:00.280 --> 04:05.470
and finally here, I want to output the choice regarding the data storage.

04:05.470 --> 04:14.760
Now if I save this and we enter something here like Max Schwarzmuller, that's my name, choose your name here

04:14.790 --> 04:18.120
of course, any email address of your choice

04:18.120 --> 04:21.170
and finally a password, well that looks good to me,

04:21.330 --> 04:24.710
I think we got a nice working simple form here.

04:24.720 --> 04:30.810
Now the next step is that we take this form and enhance it by adding a submit button and only show the

04:30.810 --> 04:35.880
form as long as we haven't submitted it but once we submit it, show that data sheet here at the bottom,

04:35.880 --> 04:40.340
so let's work on this next. To add a submit button to this, I

04:40.470 --> 04:44.370
well surprisingly first add the button here,

04:44.790 --> 04:49.590
submit the form and I'll set this to type submit,

04:49.590 --> 04:56.280
now I want to add a click listener of course and importantly, I add prevent here to prevent the default

04:56.310 --> 04:59.750
which would be again to send this form to the server,

04:59.760 --> 05:00.900
I don't want that to happen,

05:00.900 --> 05:02.980
I don't want this form to reach the server,

05:03.000 --> 05:05.350
I want to handle it with vuejs.

05:05.670 --> 05:10.800
So here instead, I choose to do something upon a click and I could execute a method there

05:10.800 --> 05:15.140
and typically you would probably do this to then use your data in this method

05:15.360 --> 05:22.260
but here, all I need is really just a variable holding a true or false value which decides if I should

05:22.260 --> 05:24.580
show the form or the data.

05:24.780 --> 05:32.040
So here I will have my submitted property which is set to false initially and I will set this to true

05:32.040 --> 05:32.410
here,

05:32.430 --> 05:41.130
so submitted equals true now and this submitted property here decides whether I show this row here,

05:41.180 --> 05:47.370
this form, so it's this form I want to show then,

05:47.370 --> 05:55.560
so v-if equals submitted or I should say not submitted, so if it's not submitted then we show the form,

05:56.070 --> 05:57.790
if it was submitted,

05:58.170 --> 06:03.050
well in this case I want to show this and here I use submitted therefore.

06:03.160 --> 06:05.190
Now let's see this in action,

06:05.190 --> 06:05.950
looks good,

06:06.160 --> 06:09.480
let's give the button some styling, that looks ugly.

06:09.480 --> 06:13.650
So here it gets the button and button primary bootstrap classes here,

06:13.800 --> 06:17.280
just going to restructure that so that everything is on one page here.

06:17.550 --> 06:24.120
And now if I save this, looks much better, let me quickly fill out this form again so that we have some

06:24.130 --> 06:28.450
nice, well used to play around with and set this to yes

06:28.470 --> 06:31.420
again, submit the form and we see yes here

06:31.420 --> 06:39.600
too. Now there was one thing I don't like, the yes field is no preselected here, I have to select one,

06:39.690 --> 06:41.290
it's empty at the beginning,

06:41.460 --> 06:43.550
so let's fix this too.

06:43.590 --> 06:49.890
It is of course not preselected because I'm storing true or false here in my store data variable but of course

06:49.890 --> 06:51.980
here, I have yes and no,

06:51.990 --> 06:53.580
so that's a little mistake here,

06:53.640 --> 06:55.590
we should of course change this to

06:55.590 --> 06:56.040
yes

06:56.040 --> 07:00.580
for example and now we see it's preselected and I still can submit it and now I 

07:00.570 --> 07:06.430
would see no here since I switched it just a second ago. So with that, we finished the second exercise, added

07:06.450 --> 07:07.120
the button,

07:07.260 --> 07:13.950
now let's turn to exercise three and maybe put the button here below exercise two so that we can clearly

07:13.950 --> 07:14.670
see this

07:14.820 --> 07:25.460
and now exercise three wants us to basically go up to the fields here, to the first and last name and put

07:25.460 --> 07:29.300
that into a separate component which we then can use as a form control,

07:29.300 --> 07:30.780
so let's do that now.

07:31.350 --> 07:34.460
I first will create this component,

07:34.700 --> 07:35.480
I will name it

07:35.550 --> 07:37.840
fullname.vue here

07:38.060 --> 07:44.540
and of course I will have a template in there and I will have a script tag, I won't use any special styling

07:44.540 --> 07:45.330
here.

07:45.590 --> 07:52.010
Now what I'll do is I will quickly copy the code from there, that will be my template here of course,

07:52.010 --> 07:57.470
the two input fields, though I have to group them in a separate div because we may only have one top

07:57.470 --> 07:59.840
level element if you remember that.

08:00.050 --> 08:05.270
And then you hopefully also remember how we set up our own control,

08:05.270 --> 08:08.300
we need to be able to get a value passed in,

08:08.360 --> 08:13.990
so this value prop and then to return the input event or emit the input event.

08:14.240 --> 08:23.770
Well therefore I set up props here and I expect to get a value and then I also need to have a method

08:23.870 --> 08:28.810
somehow in my methods array where I can emit an input.

08:28.880 --> 08:32.370
Well let's first work with this value here,

08:32.390 --> 08:38.440
the interesting thing is that I have two different inputs here and I kind of need to split up a value

08:38.450 --> 08:46.010
I get passed in into two fields and concatenate any input I have into a field I can output. To do that,

08:46.010 --> 08:51.630
I'll first add a computed property, I'll name it first name,

08:51.650 --> 08:55.090
this of course is a function as all computed properties are or a method

08:55.090 --> 08:56.050
I should say

08:56.300 --> 09:01.510
and the goal is to take the first word from my value.

09:01.670 --> 09:03.000
Now that could be complicated,

09:03.020 --> 09:08.930
if I have let's say a name which has three parts like a middle name in-between, that is something we would

09:08.960 --> 09:10.250
have to handle differently,

09:10.280 --> 09:17.980
I'll keep it simple and assume I only get two parts separated with a whitespace, so an empty space.

09:18.290 --> 09:27.520
Then if this is the case, I can simply say the first name is the value and then I call the split function

09:27.520 --> 09:31.450
and split on the whitespace,

09:31.450 --> 09:32.790
now this is an array

09:32.980 --> 09:36.370
and the first element is of course the first name.

09:36.490 --> 09:41.170
Now I'm going to copy this to also get my last name here,

09:41.410 --> 09:47.920
just need to copy that though and there, I want to get the second element in this array I split,

09:48.010 --> 09:50.920
so that should be my last name then.

09:51.070 --> 09:58.350
And with that, I can now go to my input here and pass the value to this

09:58.780 --> 10:06.790
and the value here is of course my first name and the value on the second input is of course my last

10:06.790 --> 10:07.370
name.

10:08.220 --> 10:09.620
This is one thing,

10:09.660 --> 10:13.450
now with that I'm not emitting my input event though

10:13.470 --> 10:22.020
but let's already see if that works or if we can at least see that I pass my full name in there.

10:22.020 --> 10:28.500
So if I go back to the app.vue file, I have to register my components, so I first have to import it

10:28.500 --> 10:34.500
of course, so import full name from full

10:37.010 --> 10:37.970
whoops from,

10:38.000 --> 10:46.160
that is why I don't get support here, from fullname.vue and register it as a local component, components

10:46.570 --> 10:47.030
shall

10:47.030 --> 10:54.690
therefore have my app full name where I have the full name here.

10:54.750 --> 11:00.330
I also replace first name and last name here and instead only have my full name and I will provide a default

11:00.330 --> 11:05.040
value so that I can see if I correctly passed it down to my component,

11:05.280 --> 11:08.730
so here I will populate this with my name.

11:08.730 --> 11:12.640
So that's my app-full-name, I'll add it here,

11:12.650 --> 11:22.920
app-full-name like this and I will use v-model to set up or to pass my full name there.

11:23.010 --> 11:26.330
I also need to adjust it down there in the string interpolation,

11:26.340 --> 11:29.600
I also want to put full name, this new property I just created,

11:29.610 --> 11:30.460
let's have a look.

11:31.850 --> 11:32.960
Already looks good,

11:32.960 --> 11:36.630
we see it is correctly split up in the component we inserted,

11:36.740 --> 11:37.910
that's great.

11:37.910 --> 11:47.450
Now the missing piece is to also correctly submit it so that once I added it here, we see it updated

11:47.480 --> 11:49.120
here which currently doesn't happen,

11:49.120 --> 11:51.920
that of course doesn't happen because of a full name component,

11:51.970 --> 11:58.800
I'm not emitting events upon changing it. So I need to have listeners on both inputs,

11:58.820 --> 12:04.070
I'll listen to add input here and fire name changed

12:04.910 --> 12:08.490
and the same is of course true for my last name here.

12:08.720 --> 12:15.500
Now I need the name change the method here then and I do get the event passed in here.

12:15.560 --> 12:19.690
Now the important thing is the name change event,

12:19.910 --> 12:25.640
well what I have to do depends on which input emits this event because I know that the event target

12:25.880 --> 12:31.200
will be this input element and this will hold a value which I now need to update in my name.

12:31.490 --> 12:39.230
But to do this, I need to know if I need to append it to the first name or prepend it to the last name.

12:39.440 --> 12:47.390
So in order to be able to know this, I will pass an argument here where I say first and here, I say last

12:48.470 --> 12:55.070
and of course I also want to pass the default event which I get, passed by the dom kind of automatically

12:55.790 --> 13:02.880
as here, I can now check is first and therefore let's even make this easier, let's say true or false.

13:03.530 --> 13:06.230
So I check if it is the first thing which changed,

13:06.350 --> 13:16.670
if it is the first thing, so if isFirst is true, then I want to emit and an event which is called emit

13:17.060 --> 13:18.000
and some data.

13:18.020 --> 13:25.190
Well I went to emit this is in all cases so let's put it outside of this and instead let's create a variable,

13:25.280 --> 13:34.130
let name, it's empty at the beginning and here I will then say name equals and now it's the first name which

13:34.130 --> 13:41.030
changed so I can say event target value because that will be the input of my first input element

13:41.030 --> 13:41.330
here,

13:41.330 --> 13:43.040
event target value,

13:43.280 --> 13:51.740
so the first name changed and now I of course also want to concatenate a whitespace and then my last

13:51.740 --> 13:52.180
name,

13:52.250 --> 13:54.990
the computed property, last name here

13:55.720 --> 13:56.930
otherwise

13:57.040 --> 14:02.700
if it's not the first name, I want to do the same here but now of course the other way around.

14:02.800 --> 14:04.990
So now, I do have my

14:07.920 --> 14:18.320
first name which is constant and then I do add the changed value from the event which is now referring

14:18.320 --> 14:20.380
to the last name input.

14:20.390 --> 14:22.120
Now with name set here,

14:22.130 --> 14:26.570
I now have to set value equal to name of course, to update my value property

14:26.570 --> 14:32.510
otherwise my computed properties are not calculated correctly and then I should be able to output this

14:32.510 --> 14:33.720
value here.

14:34.150 --> 14:39.760
Let's see if this works as expected, if I reload this page and I change this to Maximillian,

14:39.760 --> 14:41.180
submit the form,

14:41.180 --> 14:42.830
well that looks good to me.

14:42.830 --> 14:46.660
Now let's also see what happens if I remove the last name,

14:46.670 --> 14:55.050
also looks great and if I change the last name and the first name, perfect. So the custom control seems

14:55.050 --> 14:56.390
to work as it should

14:56.520 --> 14:59.720
and I hope it became clear how to build that control.

14:59.730 --> 15:07.110
It always comes down to being able to handle a prop named value and emit an event named input.

15:07.290 --> 15:14.760
And with that, I'd say that were great steps in getting deeper into forms and really understanding them.
