WEBVTT

00:02.530 --> 00:05.900
We learned how to send and use parameters

00:05.950 --> 00:11.710
but let me now show a problem we do have with this. In order to be able to show the problem,

00:11.710 --> 00:19.480
I will adjust my header here to duplicate this only to have user 1 and 2 and therefore load the users

00:19.480 --> 00:20.640
1 and 2 here,

00:20.800 --> 00:24.460
so a very simple change with two different IDs being passed now.

00:24.460 --> 00:30.190
Now with that, if I go to the application and reload it, if I click on user 1, we load user 1 and click

00:30.190 --> 00:32.180
on user 2, we load user 2

00:32.200 --> 00:34.730
but do you see that? The ID is not updated,

00:34.780 --> 00:41.410
the ID remains at one. The reason for this is that this component where we use that, the user.vue

00:41.410 --> 00:45.010
file, the user component here isn't recreated

00:45.070 --> 00:51.640
if we are already on that component and then only the path changes but we would load the same component

00:51.640 --> 00:54.940
again. Vuejs will not recreate the component,

00:54.970 --> 01:00.200
it will save these resources and well simply keep the existing component.

01:00.280 --> 01:01.540
That of course is an issue

01:01.570 --> 01:07.540
if some pieces on this component have to change, like the ID here, therefore we have to watch for

01:07.540 --> 01:09.570
these router params to change

01:09.670 --> 01:16.480
and if they change, we want to update the pieces on our page which need to be updated depending on our

01:16.480 --> 01:17.520
parameters.

01:17.800 --> 01:25.740
Well for this, we can use something we learned about a long time ago in this course, watch, we can set up

01:25.770 --> 01:31.470
a watcher and we can watch our route like this, $route.

01:31.720 --> 01:37.630
This now defines that whatever $route changes and keep in mind, the route does change,

01:37.770 --> 01:43.680
it's only that ID is not updated here because this is no computed or dynamic component

01:43.860 --> 01:51.200
but here, we can watch for route changes and then execute any code we want to execute whenever this occurs.

01:51.390 --> 01:58.260
So here, this actually is a function and we will get two arguments passed to this function by vue router,

01:58.290 --> 01:59.370
to and from,

01:59.370 --> 02:00.810
so where are we coming from,

02:00.810 --> 02:04.260
which route are we coming from and to which route are we going.

02:04.380 --> 02:10.980
Well of course, it's the same route but there is one important thing, we do have our new params stored

02:11.040 --> 02:12.250
on the to route,

02:12.270 --> 02:14.240
this new route which is getting loaded.

02:14.400 --> 02:22.720
So here I can simply set this ID equal to to.params.Id, remember to just is a route,

02:22.740 --> 02:29.210
so not this $route, just to, this will be the new route which gets loaded.

02:29.340 --> 02:36.980
And if I do it like this and I reload the page here, now you see the ID is adjusted when I switch the

02:36.990 --> 02:39.710
page because now I'm watching for changes

02:39.780 --> 02:45.060
and of course you could execute more code here which is why I didn't choose a computed property here

02:45.240 --> 02:50.810
which of course should also work if you use this $route.params.id.

02:51.270 --> 02:56.820
And with that, we're now reacting to that and now we're really using the route parameters we're passing

02:56.820 --> 03:02.550
here to create a reactive application and using the data we're sending through the URL.
