WEBVTT

00:02.590 --> 00:04.890
In the last lecture, we installed axios,

00:05.050 --> 00:09.190
let me now import axios from axios,

00:09.190 --> 00:12.390
that's a package name in the signup.vue file,

00:12.400 --> 00:16.930
so this import statement is all we need for now. With this import statement,

00:16.930 --> 00:18.740
I can now use axios 

00:18.810 --> 00:24.430
and that's the default exput of the axios package and make http requests through it.

00:24.490 --> 00:28.220
Now the goal is to make a http request

00:28.240 --> 00:31.110
to our firebase backend, so there,

00:31.140 --> 00:38.660
I want to essentially target this URL we can see here, go back to our application. To make such a

00:38.680 --> 00:39.690
request,

00:39.700 --> 00:44.830
I want to do this in the onSubmit method which is fired when we submit the form where I right now

00:44.830 --> 00:47.680
only output the data, to make such a request,

00:47.680 --> 00:49.610
I'll now reach out to axios there

00:49.810 --> 00:57.490
and there, we get a couple of methods for the different http requests, get for a get request and post for

00:57.490 --> 01:00.120
a post request and put for a put request

01:00.130 --> 01:01.410
and so on.

01:01.420 --> 01:08.430
Now I want to store data on firebase and for that, we can use the put or the post request, post

01:08.440 --> 01:14.560
if we plan on essentially creating an array of data on the backend, put if we just want to write one

01:14.560 --> 01:15.330
object.

01:15.430 --> 01:19.330
Now I want to create an array of users, at least theoretically,

01:19.330 --> 01:21.280
so I will call post,

01:21.430 --> 01:26.560
now the post method from axios now requires at least two arguments,

01:26.560 --> 01:28.760
the URL as a string

01:29.500 --> 01:37.000
and here I will not just target our firebase database like this but I want to target to be created and

01:37.090 --> 01:44.980
therefore automatically created users node and for firebase specifically, we need to append .json

01:44.980 --> 01:45.650
at the end,

01:45.660 --> 01:49.590
now this is only required to target a valid endpoint on firebase,

01:49.660 --> 01:53.170
It's not something you have to do because of axios or something like that,

01:53.200 --> 01:57.260
we did this in earlier lectures too. So that's the URL,

01:57.260 --> 02:02.870
the first argument, the second argument axios post requires is the data,

02:02.930 --> 02:07.770
well actually it does require this but a post request typically send some data.

02:07.790 --> 02:14.090
So here I just want to send form data which is this javascript object and axios will automatically stringify

02:14.090 --> 02:19.330
this and therefore send a valid data piece to the backend.

02:19.820 --> 02:25.790
You could pass a third argument, a javascript object where you can pass additional configuration for the

02:25.790 --> 02:26.820
request,

02:26.840 --> 02:32.960
you can learn more about available config options in the axios documentation I showed you and I

02:32.960 --> 02:38.180
will also dive into some things you can configure on axios in general and which you then always can

02:38.180 --> 02:40.710
also configure on a per request level

02:40.820 --> 02:42.830
later in this module.

02:42.830 --> 02:45.230
So that's the post request,

02:45.230 --> 02:46.250
axios

02:46.310 --> 02:54.330
then returns a promise on the post method, so we can chain then to do something once the promise resolves.

02:54.500 --> 03:00.860
Because of course sending such a post request is a asynchronous task and therefore we can react to

03:00.860 --> 03:01.540
the result

03:01.580 --> 03:03.460
at some point in the future

03:03.530 --> 03:05.920
and that's exactly why we use a promise here.

03:05.990 --> 03:12.580
So in this then block, we can now create a function which executes the code once the request is done

03:12.800 --> 03:16.460
and here I will simply use an ES6 arrow function,

03:16.490 --> 03:19.060
you could use a normal function with the function keyword,

03:19.070 --> 03:24.950
again I'll use the arrow function, so we will at some time of the future get back a response and then

03:24.950 --> 03:26.500
I simply want to log that,

03:26.570 --> 03:29.490
so I got a very short arrow function here.

03:29.540 --> 03:35.610
You can also chain a catch block to catch any potential errors and then do something with them,

03:35.660 --> 03:38.440
maybe something more meaningful than just logging them here,

03:38.450 --> 03:45.340
you could for example simply set some property in your component and then output something in your template

03:45.380 --> 03:46.970
depending on that property

03:47.030 --> 03:49.830
but here, I want to focus on axios and it's this

03:49.880 --> 03:51.270
simple solution.

03:51.650 --> 03:56.460
So now we got all the code it takes to send a request with axios,

03:56.720 --> 03:58.010
let's see if that works.

03:58.010 --> 04:03.470
Make sure the firebase is configured correctly, that the rules allow everyone to write and read and

04:03.470 --> 04:04.280
thereafter,

04:04.310 --> 04:10.070
let's simply go back to our application and let's enter something here into this form.

04:10.250 --> 04:12.480
So for now, this doesn't have to be valid,

04:12.500 --> 04:14.030
you can enter anything you want,

04:14.030 --> 04:15.710
you can also leave out fields,

04:15.770 --> 04:20.390
let's enter a hobby here and click submit, before doing that

04:20.390 --> 04:26.010
however let me open the javascript console so that we can actually see something there.

04:26.060 --> 04:29.600
Let's now click submit and we see two things,

04:29.660 --> 04:36.860
the first object here is coming from this console log statement but thereafter, the second output we

04:36.860 --> 04:44.900
see is coming from the console log statement in the then block here and you see that we got a status

04:44.900 --> 04:47.840
code of 200, so it was successful.

04:47.840 --> 04:50.050
You also see data here,

04:50.210 --> 04:54.540
in this case, it's just a key value pair with a name and then some cryptic string

04:54.770 --> 04:59.160
and that actually is the ID of the data it received on the backend,

04:59.180 --> 05:05.350
so in firebase. If we switch to firebase, you see a new users node was created and

05:05.380 --> 05:12.350
if you expand this, here you see that same cryptic string that is just a unique ID created automatically

05:12.350 --> 05:16.880
by firebase and there, you see all the user data stored.

05:17.180 --> 05:23.960
So submitting the data to the backend did work correctly and that is already how we can use axios,

05:24.230 --> 05:31.820
just importing it and then calling post and of course it works in the same way for other requests, get,

05:31.900 --> 05:33.520
put and so on.

05:33.530 --> 05:37.480
Let's actually see a get request in action in the next lecture.
