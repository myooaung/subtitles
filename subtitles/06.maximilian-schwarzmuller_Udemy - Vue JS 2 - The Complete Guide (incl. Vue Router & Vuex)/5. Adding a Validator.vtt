WEBVTT

00:02.190 --> 00:04.610
In the last lecture we installed vuelidate,

00:04.630 --> 00:06.160
let's now use it.

00:06.160 --> 00:10.930
First of all, I'm going to restart npm run dev to bring my development server back up

00:11.140 --> 00:15.210
and let's now understand how we use this vuelidate package.

00:15.220 --> 00:17.650
We'll start with a simple validation,

00:17.920 --> 00:25.720
let's say we want to ensure that our e-mail address here is not empty and that it's also a valid email

00:25.720 --> 00:26.370
address,

00:26.500 --> 00:29.060
this is a very common validation of course,

00:29.110 --> 00:31.330
so it makes up for a great example.

00:31.360 --> 00:38.460
So we're talking about this input here, this input with the ID email which is of type email and bound

00:38.460 --> 00:40.460
to this e-mail property

00:40.510 --> 00:48.610
in my vue instance in my vue component here. Now we first of all need to unlock the vuelidate package

00:49.210 --> 00:57.030
and for that, I'll go to my main.js file where we start the application and I will import vuelidate

00:57.040 --> 00:59.600
from vuelidate here,

00:59.620 --> 01:05.570
so from this package we just installed. As a next step after all these imports,

01:05.710 --> 01:13.370
I then will use my vue package itself with the use method to use this vuelidate package and

01:13.390 --> 01:19.050
this is how you'll inject or add a lot of third party packages into vue.

01:19.060 --> 01:25.480
With that, we can now use vuelidate features in our vue components and instances and I want to use

01:25.480 --> 01:29.720
such a feature in the signup.vue file, this signup component.

01:29.860 --> 01:36.650
Now that we use vuelidate, we can add a special property to the component,

01:36.730 --> 01:45.070
so next to data, methods, computed and so on, we can now add validations. This otherwise would have been

01:45.070 --> 01:48.870
an unknown property, vue by default doesn't know this one

01:48.970 --> 01:51.380
but thanks to vuelidate, it now does.

01:51.610 --> 01:57.460
And now in validations, you can set up the validations you want to use in your form, for that,

01:57.460 --> 02:01.210
you use some keys to identify your form controls.

02:01.210 --> 02:03.160
Now here that's important,

02:03.160 --> 02:05.830
this has to be named email,

02:06.100 --> 02:10.200
it has to have the same name as the property you are binding to

02:10.240 --> 02:16.830
with v-model, that's required by vuelidate so that it can automatically synchronize this and knows

02:16.840 --> 02:18.540
when the value changes,

02:18.550 --> 02:24.460
so if you name the value in your data method which you return there email, if you name the property e-mail

02:24.460 --> 02:30.370
there I mean, then you have to name this property in the validations object here also e-mail.

02:30.430 --> 02:35.380
So I'll use e-mail and this standalone of course won't do anything,

02:35.380 --> 02:41.740
email now takes a javascript object where we configure the validators we want to register for this

02:41.800 --> 02:50.080
control and for that I want to import some validators because the vuelidate package, whilst allowing us

02:50.080 --> 02:55.160
to create our own validators, also ships with a lot of very common ones.

02:55.210 --> 03:03.370
So I simply have to import them into my component file here and I'll import them from vuelidate/lib

03:03.460 --> 03:07.880
/validators, from this package

03:07.900 --> 03:14.740
I can now install or import a couple of built-in validators, a full list of built-in validators can be

03:14.740 --> 03:17.430
found on the vuelidate documentation page,

03:17.560 --> 03:25.630
If you scroll down to built-in validators. I'm interested in two validators here, the required validator

03:25.780 --> 03:32.830
which simply checks if the field is not empty and the email validator which checks if it's a valid email

03:32.830 --> 03:36.360
address. With these two built-in validators

03:36.400 --> 03:44.100
imported, I can now assign them to my email control here and I do this by simply adding them as properties

03:44.320 --> 03:46.880
so I can add a required property here

03:47.080 --> 03:49.520
and I bind it to required,

03:49.540 --> 03:59.580
so to this required I import and I can also set my email property and bind it to email.

03:59.590 --> 04:01.420
Now it's actually up to you

04:01.510 --> 04:02.290
what you name

04:02.290 --> 04:06.520
these first parameters, you could have used req and mail here

04:06.670 --> 04:12.790
but a typical pattern is to use the validator names here because that then allows you to take advantage

04:12.820 --> 04:18.760
of a next generation javascript feature where you can omit the value because if the key name is equal

04:18.760 --> 04:19.700
to the value,

04:19.780 --> 04:23.320
it will automatically expand it into this key value pair.

04:23.350 --> 04:28.700
So now this is the same syntax as before or has the same result, we assigned required to required and

04:28.750 --> 04:31.650
email to email but it's a bit shorter.

04:31.780 --> 04:35.990
Now with that, these two validators are registered for this email

04:36.280 --> 04:44.710
and with that, we can now connect this e-mail validation rule we set up here in our javascript code to our

04:44.710 --> 04:48.380
template because that is something we haven't done yet.

04:48.480 --> 04:52.440
This alone, what we did thus far wouldn't do anything,

04:52.600 --> 04:57.400
how would vuelidate know to which input in our html code

04:57.580 --> 04:59.250
it should connect this.

04:59.500 --> 05:05.750
You could argue that since we named this email here, it should pick an input with the ID email but that would

05:05.750 --> 05:11.240
be really arbitrarily because it would really force us to use the same naming everywhere

05:11.240 --> 05:13.760
and it doesn't make this assumption,

05:13.970 --> 05:21.370
we manually have to connect it and connecting it is super super simple. To connect it,

05:21.490 --> 05:26.770
besides registering v-model here, we also register the input event.

05:26.980 --> 05:34.180
Now the input event is part of what v-model listens to but we can also register it standalone next to

05:34.180 --> 05:42.380
it. Now in here, we can access the special $v property and that is a reserved word,

05:42.390 --> 05:42.820
$v

05:42.830 --> 05:45.730
is exposed by the vuelidate package,

05:45.850 --> 05:50.640
just like you have $event as a reserved name for the incoming event data.

05:51.010 --> 05:57.640
So $v gives us access to the validators, to the validation rules and all the behind the scenes

05:57.640 --> 06:07.300
validation vuelidate does. On $v, we can now access any validation rule or control to

06:07.300 --> 06:08.270
be precise

06:08.290 --> 06:16.810
we set up. If we stroll down to our javascript code in validations, that's only one, email, so we can access

06:16.900 --> 06:19.730
email on $v,

06:19.900 --> 06:26.470
so let's access email. And now on this, we can call a method which is dollar sign,

06:26.470 --> 06:28.810
don't forget this,

06:28.810 --> 06:31.070
$touch, make sure to execute it.

06:31.490 --> 06:38.470
Now $touch is a method which is automatically exposed and added by the vuelidate package,

06:38.470 --> 06:40.790
so we just target our email control,

06:40.810 --> 06:47.830
we can then execute $touch and this will inform vuelidate that it should check if the

06:47.950 --> 06:55.240
input on which we registered this code with the input event, if that fulfills the requirements of the

06:55.240 --> 07:01.840
email validation rule which is that we should have required input so that it should be non-empty and

07:01.840 --> 07:04.150
that it should be an email.

07:04.150 --> 07:08.980
Now how can we find out if that actually is the case,

07:08.980 --> 07:10.700
if that actually works?

07:15.090 --> 07:19.360
Well let's simply try by temporarily outputting something below the input,

07:19.650 --> 07:30.460
I'll add a div below the input and in there, I'll simply output $v and let's see what's

07:30.460 --> 07:31.820
inside of this object.

07:31.960 --> 07:33.180
Now let's save this,

07:33.310 --> 07:39.750
let's go back to our application and in there, you now see this object below the input,

07:39.790 --> 07:42.990
that is what $v holds.

07:43.150 --> 07:49.780
Now it's a bit hard to read but what you see is that here indeed, we got this email property which is

07:49.780 --> 07:56.140
only present because we added such a validation rule, you see that required is false which means this

07:56.140 --> 07:57.710
validator is not met,

07:57.760 --> 08:06.040
it's empty, email actually is true but that simply is the starting value for this validator, it will quickly

08:06.040 --> 08:08.500
change once we start typing

08:08.500 --> 08:14.400
and now if I do type a T here, which is not a valid email address, you see the required

08:14.400 --> 08:21.010
now is true because we meet the criteria of having some value in there but email is false because

08:21.010 --> 08:28.390
obviously, this is not a valid email address. And we get some other utility properties exposed by vuelidate,

08:28.840 --> 08:34.120
like this $invalid property which is true because it is invalid, $dirty which

08:34.120 --> 08:35.860
means yeah, we did touch it,

08:35.860 --> 08:42.250
so we had a chance to edit it, $error which is true which means we have an error, it's not

08:42.250 --> 08:47.930
equal to invalid, error will actually only be true if dirty and invalid are true,

08:47.950 --> 08:54.250
so if we had a chance to touch it because that allows us to provide a better user experience by not

08:54.970 --> 09:00.280
marking this as false just because it's invalid, it's always invalid at the start,

09:00.280 --> 09:05.950
error also means that we had a chance to correct it. Pending means if we're currently evaluating the

09:05.950 --> 09:07.060
validity of this,

09:07.060 --> 09:10.300
this is more important for asynchronous validators

09:10.300 --> 09:17.400
and then here we see params which also lists the validators we assigned, required which then simply is what

09:17.400 --> 09:23.380
this validator returns us and we'll dive deeper into this once we write our own validators. And then again

09:23.380 --> 09:26.470
we got invalid, dirty and error for the overall form,

09:26.470 --> 09:32.540
so not just for this e-mail but for all validators we registered, here it is of course only one

09:32.650 --> 09:38.440
but if we had more validation rules, this would give us information about whether they all together are

09:38.500 --> 09:40.230
invalid or not.

09:40.310 --> 09:46.120
Now enough talking about this, if I complete this to a real email address, you see now we pass required,

09:46.210 --> 09:53.310
we pass the e-mail therefore invalid is false and error is false and we would have a valid input.

09:53.320 --> 09:55.790
This is how validation works,

09:55.840 --> 10:02.720
now outputting the information like this below the input probably is not the best possible user experience.

10:02.770 --> 10:06.940
So let's find out how we can take advantage of the information we got here

10:06.940 --> 10:12.260
to style our input differently and possibly show a warning message.
