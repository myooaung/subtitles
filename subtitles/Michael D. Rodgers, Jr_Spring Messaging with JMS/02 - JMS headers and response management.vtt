WEBVTT
1
00:00:00.050 --> 00:00:01.030
- [Instructor] Let's take a look

2
00:00:01.030 --> 00:00:04.040
at some JMS response management with our classes

3
00:00:04.040 --> 00:00:07.050
and methods that use the JMS listener.

4
00:00:07.050 --> 00:00:09.090
Opening our warehouse receiver class,

5
00:00:09.090 --> 00:00:12.020
we'll begin by modifying the receive method

6
00:00:12.020 --> 00:00:17.090
with some annotations.

7
00:00:17.090 --> 00:00:20.040
We'll start by annotating the book order parameter

8
00:00:20.040 --> 00:00:26.050
with @Payload.

9
00:00:26.050 --> 00:00:30.000
Spring says that this annotation binds a method parameter

10
00:00:30.000 --> 00:00:31.030
to the payload or the message.

11
00:00:31.030 --> 00:00:34.030
Now, we don't necessarily have to have the @Payload here,

12
00:00:34.030 --> 00:00:37.070
but it does help identify for us as we add more parameters

13
00:00:37.070 --> 00:00:40.080
which one bears the message content or payload.

14
00:00:40.080 --> 00:00:45.000
Next, Spring makes available the @Header annotation.

15
00:00:45.000 --> 00:00:48.070
So we'll hit Enter,

16
00:00:48.070 --> 00:00:53.040
comma, Enter, type @Header,

17
00:00:53.040 --> 00:00:57.030
and we'll supply the name property

18
00:00:57.030 --> 00:01:01.070
with the orderState,

19
00:01:01.070 --> 00:01:07.000
and

20
00:01:07.000 --> 00:01:16.050
this will take a String of orderState.

21
00:01:16.050 --> 00:01:29.020
We'll also add one for the bookOrderId.

22
00:01:29.020 --> 00:01:37.050
Again, we'll type String bookOrderId,

23
00:01:37.050 --> 00:01:42.030
and the last one

24
00:01:42.030 --> 00:01:56.090
will be for our storeId.

25
00:01:56.090 --> 00:01:59.000
Spring additionally makes available some objects

26
00:01:59.000 --> 00:02:01.030
that it will populate with message header details,

27
00:02:01.030 --> 00:02:03.080
like the aptly named message header object.

28
00:02:03.080 --> 00:02:05.090
We'll add it as well.

29
00:02:05.090 --> 00:02:08.090
This object will automatically get populated

30
00:02:08.090 --> 00:02:13.020
because of our @JmsListener annotation

31
00:02:13.020 --> 00:02:17.060
with all the core JMS headers and custom header objects.

32
00:02:17.060 --> 00:02:21.040
So I'll type

33
00:02:21.040 --> 00:02:28.000
MessageHeaders,

34
00:02:28.000 --> 00:02:31.090
and we'll just call it messageHeaders.

35
00:02:31.090 --> 00:02:34.000
With those in place, let's add some logging

36
00:02:34.000 --> 00:02:36.080
to see the contents of these messages.

37
00:02:36.080 --> 00:02:39.090
We'll type

38
00:02:39.090 --> 00:02:45.060
LOGGER.info,

39
00:02:45.060 --> 00:02:54.070
and we'll say that the Message property

40
00:02:54.070 --> 00:03:00.030
orderState equals curly brackets,

41
00:03:00.030 --> 00:03:08.090
the bookOrderId equals curly brackets,

42
00:03:08.090 --> 00:03:16.090
the storeId equals curly brackets,

43
00:03:16.090 --> 00:03:22.050
and then we're going to use the parameter pieces

44
00:03:22.050 --> 00:03:34.000
for this LOGGER to populate those curly brackets.

45
00:03:34.000 --> 00:03:46.000
Let's also create a LOGGER for our

46
00:03:46.000 --> 00:03:59.000
messageHeaders.

47
00:03:59.000 --> 00:04:02.030
Next, let's pass two of our custom headers down

48
00:04:02.030 --> 00:04:05.000
into the warehouse processing service.

49
00:04:05.000 --> 00:04:07.000
So we'll scroll down here,

50
00:04:07.000 --> 00:04:08.080
go to the warehouse processing service,

51
00:04:08.080 --> 00:04:17.050
and we're just going to add the orderState and the storeId.

52
00:04:17.050 --> 00:04:23.060
We'll go over and modify the original method signature next.

53
00:04:23.060 --> 00:04:28.010
And the processOrder, we'll modify this

54
00:04:28.010 --> 00:04:35.080
and add a String for our orderState

55
00:04:35.080 --> 00:04:43.000
and a String for our storeId.

56
00:04:43.000 --> 00:04:44.090
Now we talked about handling flow

57
00:04:44.090 --> 00:04:47.000
as some sort of branching logic.

58
00:04:47.000 --> 00:04:49.050
To demonstrate what could be done,

59
00:04:49.050 --> 00:04:51.080
we will add some if else checks

60
00:04:51.080 --> 00:04:55.060
that concern the String orderState.

61
00:04:55.060 --> 00:04:59.050
We'll add some pseudo database calls as well below

62
00:04:59.050 --> 00:05:03.000
on our processing order method and we'll type the following.

63
00:05:03.000 --> 00:05:09.000
We'll add a method called private

64
00:05:09.000 --> 00:05:17.040
void add, and this'll take a BookOrder,

65
00:05:17.040 --> 00:05:26.090
and we'll pass in a String of our storeId.

66
00:05:26.090 --> 00:05:36.000
And we'll use our LOGGER here, say info,

67
00:05:36.000 --> 00:05:43.050
adding a new order to the database.

68
00:05:43.050 --> 00:05:49.080
Create another method, private void update.

69
00:05:49.080 --> 00:05:55.050
Again, this'll take a BookOrder,

70
00:05:55.050 --> 00:06:02.060
String storeId, again we're gonna log this,

71
00:06:02.060 --> 00:06:07.020
and we're gonna say

72
00:06:07.020 --> 00:06:14.080
updating an order to the database.

73
00:06:14.080 --> 00:06:17.030
And finally we'll create our last method,

74
00:06:17.030 --> 00:06:24.050
private void delete.

75
00:06:24.050 --> 00:06:35.010
Again this'll take a BookOrder and a String storeId,

76
00:06:35.010 --> 00:06:39.060
LOGGER, info,

77
00:06:39.060 --> 00:06:43.060
and we're going to give a message

78
00:06:43.060 --> 00:06:49.070
that we are deleting the order

79
00:06:49.070 --> 00:06:52.000
from the database.

80
00:06:52.000 --> 00:06:57.020
Let's remove the LOGGER info for now,

81
00:06:57.020 --> 00:06:59.060
that's here.

82
00:06:59.060 --> 00:07:02.070
Now, we wanna set up the branching logic to call these

83
00:07:02.070 --> 00:07:05.020
before our convertAndSend method.

84
00:07:05.020 --> 00:07:14.010
So, let's just say if, new,

85
00:07:14.010 --> 00:07:21.000
equalsIgnoreCase, orderState,

86
00:07:21.000 --> 00:07:24.020
and we're gonna call the add bookOrder.

87
00:07:24.020 --> 00:07:31.000
We'll give it our bookOrder and the storeId,

88
00:07:31.000 --> 00:07:38.020
else if, update,

89
00:07:38.020 --> 00:07:42.060
equalsIgnoreCase, orderState,

90
00:07:42.060 --> 00:07:49.030
we're going to send it to the update, bookOrder, storeId,

91
00:07:49.030 --> 00:07:54.080
else if,

92
00:07:54.080 --> 00:08:00.080
delete, equalsIgnoreCase, orderState,

93
00:08:00.080 --> 00:08:05.010
and you guessed it, we're calling the delete method,

94
00:08:05.010 --> 00:08:08.010
bookOrder, storeId.

95
00:08:08.010 --> 00:08:10.010
I think you get the idea.

96
00:08:10.010 --> 00:08:12.040
Being able to utilize custom JMS headers

97
00:08:12.040 --> 00:08:14.070
in your response management can really open up

98
00:08:14.070 --> 00:08:17.080
a number of possibilities without having to modify

99
00:08:17.080 --> 00:08:21.000
your message POJO objects themselves.

