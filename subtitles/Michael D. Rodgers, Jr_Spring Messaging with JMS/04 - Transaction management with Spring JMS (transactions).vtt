WEBVTT
1
00:00:00.050 --> 00:00:02.030
- [Instructor] Transaction management is a nice

2
00:00:02.030 --> 00:00:04.070
feature that Spring makes available out of the box

3
00:00:04.070 --> 00:00:06.070
for automatically committing,

4
00:00:06.070 --> 00:00:10.000
or rolling back transactions if they fail.

5
00:00:10.000 --> 00:00:12.090
Spring makes available several implementations

6
00:00:12.090 --> 00:00:16.000
of the platform transaction manager interface

7
00:00:16.000 --> 00:00:19.020
for handling transactions across JDBC,

8
00:00:19.020 --> 00:00:22.030
JBA, Hibernate, JMS and more.

9
00:00:22.030 --> 00:00:26.090
We'll be using the JMS transaction manager in this video.

10
00:00:26.090 --> 00:00:29.020
Let's quickly add some transaction management

11
00:00:29.020 --> 00:00:31.040
to our course project.

12
00:00:31.040 --> 00:00:34.060
Opening back up our JMS config.java class

13
00:00:34.060 --> 00:00:40.080
we're going to add a new Spring Bean annotation.

14
00:00:40.080 --> 00:00:42.060
We'll type

15
00:00:42.060 --> 00:00:46.030
@bean

16
00:00:46.030 --> 00:00:54.030
public

17
00:00:54.030 --> 00:00:57.060
platform

18
00:00:57.060 --> 00:01:01.090
transaction manager.

19
00:01:01.090 --> 00:01:05.080
And we'll call this method our JMS

20
00:01:05.080 --> 00:01:11.040
transaction manager.

21
00:01:11.040 --> 00:01:14.010
Inside of it, the method we'll return

22
00:01:14.010 --> 00:01:17.060
a new JMS transaction manager.

23
00:01:17.060 --> 00:01:26.030
And we'll supply it,

24
00:01:26.030 --> 00:01:31.000
our connection factory method.

25
00:01:31.000 --> 00:01:34.050
Now for JMS transactions there really

26
00:01:34.050 --> 00:01:37.090
are only two things that can happen on rollback.

27
00:01:37.090 --> 00:01:41.080
For a send on rollback the message is not sent.

28
00:01:41.080 --> 00:01:45.010
For a receive however the message is re-queued

29
00:01:45.010 --> 00:01:47.040
for retrieval again on the MOM.

30
00:01:47.040 --> 00:01:51.000
The re-queuing of messages is broker dependent.

31
00:01:51.000 --> 00:01:54.080
For active MQ on rollback you can actually configure

32
00:01:54.080 --> 00:01:57.030
after a specified number of retries

33
00:01:57.030 --> 00:01:59.070
to move messages to a different queue.

34
00:01:59.070 --> 00:02:02.090
Which is commonly called the dead letter queue.

35
00:02:02.090 --> 00:02:06.000
For a rollback to occur generally there will have to be

36
00:02:06.000 --> 00:02:09.090
some sort of exception thrown in processing.

37
00:02:09.090 --> 00:02:14.020
Next we need our default JMS listener container factory bean

38
00:02:14.020 --> 00:02:18.000
to know about our JMS transaction manager.

39
00:02:18.000 --> 00:02:21.050
We'll do this by setting the transaction manager.

40
00:02:21.050 --> 00:02:23.030
Type

41
00:02:23.030 --> 00:02:25.020
factory

42
00:02:25.020 --> 00:02:27.000
set

43
00:02:27.000 --> 00:02:30.010
transaction manager.

44
00:02:30.010 --> 00:02:33.050
and we'll add our JMS transaction manager.

45
00:02:33.050 --> 00:02:35.050
The last thing we need to do in this class

46
00:02:35.050 --> 00:02:51.000
is annotate the class with enable transaction management.

47
00:02:51.000 --> 00:02:54.000
Using this annotation enables Spring's

48
00:02:54.000 --> 00:02:57.070
annotation driven transaction management capability.

49
00:02:57.070 --> 00:03:03.060
Similar to the support found in Spring's XML namespace.

50
00:03:03.060 --> 00:03:07.000
This means that any method that is wrapped

51
00:03:07.000 --> 00:03:10.040
in @transactional will use the transaction manager

52
00:03:10.040 --> 00:03:13.060
specified in the configuration like we have here.

53
00:03:13.060 --> 00:03:16.090
If you have more than one transaction manager

54
00:03:16.090 --> 00:03:20.030
the @transactional annotation will need to point

55
00:03:20.030 --> 00:03:22.080
to the correct transaction manager.

56
00:03:22.080 --> 00:03:25.000
Let's add some @transactional annotations

57
00:03:25.000 --> 00:03:26.070
on our send method.

58
00:03:26.070 --> 00:03:31.020
Let's open up our sender.

59
00:03:31.020 --> 00:03:37.030
And type @transactional.

60
00:03:37.030 --> 00:03:40.070
Let's open up our book order service.

61
00:03:40.070 --> 00:03:42.060
On the method again

62
00:03:42.060 --> 00:03:46.050
we'll type @transactional.

63
00:03:46.050 --> 00:03:50.080
And the warehouse processing service.

64
00:03:50.080 --> 00:03:58.030
We'll type @transactional.

65
00:03:58.030 --> 00:03:59.060
Okay one last note.

66
00:03:59.060 --> 00:04:02.060
We're not adding @transactional

67
00:04:02.060 --> 00:04:07.020
on the receiver classes like the warehouse receiver.

68
00:04:07.020 --> 00:04:10.040
Because this would really be redundant.

69
00:04:10.040 --> 00:04:12.080
These methods already are annotated

70
00:04:12.080 --> 00:04:15.080
with @JMS listener and any of our methods

71
00:04:15.080 --> 00:04:18.030
that use the JMS listener automatically

72
00:04:18.030 --> 00:04:21.000
pick up transaction management from

73
00:04:21.000 --> 00:04:24.000
the default listener container factory.

