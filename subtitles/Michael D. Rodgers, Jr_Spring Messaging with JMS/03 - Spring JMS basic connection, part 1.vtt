WEBVTT
1
00:00:00.060 --> 00:00:01.070
- [Instructor] In order to start coding

2
00:00:01.070 --> 00:00:04.080
we'll begin with a spring boot app which I've already added

3
00:00:04.080 --> 00:00:08.050
the necessary boiler plate code.

4
00:00:08.050 --> 00:00:10.070
I've applied the necessary dependencies

5
00:00:10.070 --> 00:00:12.020
in the gradle build file.

6
00:00:12.020 --> 00:00:15.050
I'm using IntelliJ community addition but any IDE will do

7
00:00:15.050 --> 00:00:20.000
since our builds will be through the command line.

8
00:00:20.000 --> 00:00:24.000
I'm using the built-in terminal inside of IntelliJ.

9
00:00:24.000 --> 00:00:27.000
If your IDE does not have a terminal option,

10
00:00:27.000 --> 00:00:29.050
open the command line or terminal window

11
00:00:29.050 --> 00:00:30.080
and navigate to the directory

12
00:00:30.080 --> 00:00:33.060
where the application code can be found.

13
00:00:33.060 --> 00:00:35.080
We'll quickly build the application from the command line

14
00:00:35.080 --> 00:00:38.050
inside the base level of our application folder

15
00:00:38.050 --> 00:00:44.030
by typing gradle clean build.

16
00:00:44.030 --> 00:00:45.090
This will put the app in a state

17
00:00:45.090 --> 00:00:48.070
where all the dependencies are needed for the sample

18
00:00:48.070 --> 00:00:52.010
and will be downloaded and made ready for application.

19
00:00:52.010 --> 00:00:54.090
Looking at the build gradle file,

20
00:00:54.090 --> 00:00:59.050
notice the dependencies for activemq.

21
00:00:59.050 --> 00:01:01.080
I've said this is a Spring boot application

22
00:01:01.080 --> 00:01:05.040
and so certain assumptions are made for us

23
00:01:05.040 --> 00:01:08.030
like the presence of an activemq server.

24
00:01:08.030 --> 00:01:10.010
With the dependencies specified

25
00:01:10.010 --> 00:01:13.060
for Spring boot starter activemq,

26
00:01:13.060 --> 00:01:16.050
Spring automatically will stand this up

27
00:01:16.050 --> 00:01:20.010
as a server with no further configuration necessary.

28
00:01:20.010 --> 00:01:23.050
Later on, we'll download and start our own activemq server

29
00:01:23.050 --> 00:01:26.070
with the appropriate configuration inside of our app.

30
00:01:26.070 --> 00:01:31.080
Okay, let's navigate to the application Java file.

31
00:01:31.080 --> 00:01:38.000
We're going to annotate this class with @enableJms.

32
00:01:38.000 --> 00:01:41.090
Doing so, we'll trigger the discovery of methods annotated

33
00:01:41.090 --> 00:01:44.040
with @JmsListener which will add

34
00:01:44.040 --> 00:01:46.070
in another class file shortly.

35
00:01:46.070 --> 00:01:48.090
Next, we need to add a Spring configuration

36
00:01:48.090 --> 00:01:51.000
bean to the application.java

37
00:01:51.000 --> 00:01:52.040
which is a public

38
00:01:52.040 --> 00:02:02.060
JmsListenerContainerFactory

39
00:02:02.060 --> 00:02:12.020
and we'll annotate this with @Bean.

40
00:02:12.020 --> 00:02:23.060
Let's call this configured bean method warehouseFactory.

41
00:02:23.060 --> 00:02:25.050
And because it annotate with that bean

42
00:02:25.050 --> 00:02:28.000
it'll be made available to the Spring context as a

43
00:02:28.000 --> 00:02:30.090
JmsListenerContainerFactory bean.

44
00:02:30.090 --> 00:02:35.000
Inside the method parenthesis, let's add two parameters.

45
00:02:35.000 --> 00:02:42.050
We'll add a ConnectionFactory

46
00:02:42.050 --> 00:02:56.070
and a DefaultJmsListenerContainerFactoryConfigure.

47
00:02:56.070 --> 00:02:58.080
Next, inside of our warehouseFactory method,

48
00:02:58.080 --> 00:03:15.020
we'll instantiate a DefaultJmsListenerContainerFactory.

49
00:03:15.020 --> 00:03:21.060
And pass this object to the configure

50
00:03:21.060 --> 00:03:33.060
as well as the ConnectionFactory variable.

51
00:03:33.060 --> 00:03:40.010
And then let's return the factory.

52
00:03:40.010 --> 00:03:42.080
Okay, one last thing we need to do in the application class

53
00:03:42.080 --> 00:03:45.070
is add inside of our static void main method.

54
00:03:45.070 --> 00:03:48.070
I call this send a message to the queue.

55
00:03:48.070 --> 00:03:51.070
I've already added a call to obtain

56
00:03:51.070 --> 00:03:53.090
the JMS template reference for you

57
00:03:53.090 --> 00:03:56.030
which we'll use for sending a message.

58
00:03:56.030 --> 00:04:00.040
So let me talk to this quickly to what this is doing.

59
00:04:00.040 --> 00:04:04.080
A default instance of the JMS template or object

60
00:04:04.080 --> 00:04:07.060
already exist inside the Spring context

61
00:04:07.060 --> 00:04:12.050
and we're simply accessing the other context call.

62
00:04:12.050 --> 00:04:16.060
With all this set up

63
00:04:16.060 --> 00:04:20.040
we'll use the JmsTemplate object

64
00:04:20.040 --> 00:04:28.090
and call convertAndSend.

65
00:04:28.090 --> 00:04:30.090
In chapter three, we'll talk more about

66
00:04:30.090 --> 00:04:33.050
convertAndSend method as it relates to

67
00:04:33.050 --> 00:04:36.010
converting and sending more complex objects

68
00:04:36.010 --> 00:04:39.080
like POJOs and sending them as JSON or XML messages.

69
00:04:39.080 --> 00:04:42.060
The convertAndSend method takes two parameters.

70
00:04:42.060 --> 00:04:45.090
The first is the name of the message queue or destination

71
00:04:45.090 --> 00:04:47.070
we will be sending to.

72
00:04:47.070 --> 00:04:49.080
The second parameter is the object

73
00:04:49.080 --> 00:04:51.070
that we'll be transmitting.

74
00:04:51.070 --> 00:04:59.060
We'll type order queue,

75
00:04:59.060 --> 00:05:01.050
first is the destination

76
00:05:01.050 --> 00:05:04.030
which is the message queue we want to transmit to.

77
00:05:04.030 --> 00:05:06.090
The second parameter will be the order object

78
00:05:06.090 --> 00:05:10.000
which for now will be a simple string message.

