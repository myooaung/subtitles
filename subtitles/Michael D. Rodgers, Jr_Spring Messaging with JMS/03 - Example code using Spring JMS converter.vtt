WEBVTT
1
00:00:00.050 --> 00:00:01.080
- [Instructor] We created some Book,

2
00:00:01.080 --> 00:00:03.030
Customer, and Order POJOs.

3
00:00:03.030 --> 00:00:06.040
Now we need to set up a JMS message converter.

4
00:00:06.040 --> 00:00:08.060
In order to create a JMS message converter,

5
00:00:08.060 --> 00:00:12.010
we need to do a little bit more setup work for our project.

6
00:00:12.010 --> 00:00:16.000
Let's create a separate configuration called a JMS config.

7
00:00:16.000 --> 00:00:18.020
We'll do that by Right Clicking on the config,

8
00:00:18.020 --> 00:00:20.030
go to New, Java Class.

9
00:00:20.030 --> 00:00:24.020
We'll type in JmsConfig.

10
00:00:24.020 --> 00:00:26.000
Inside of it

11
00:00:26.000 --> 00:00:33.010
we're going to copy from our Application.java.

12
00:00:33.010 --> 00:00:37.070
We'll copy from lines 40 through 58.

13
00:00:37.070 --> 00:00:40.080
We'll cut those out, come back to our JmsConfig,

14
00:00:40.080 --> 00:00:45.010
and we'll paste those inside.

15
00:00:45.010 --> 00:00:51.040
We'll annotate our JmsConfig with that configuration

16
00:00:51.040 --> 00:00:54.030
so that Spring knows to look at the beans in this

17
00:00:54.030 --> 00:00:56.050
as part of the configuration.

18
00:00:56.050 --> 00:01:00.060
We'll also annotate with EnableJms

19
00:01:00.060 --> 00:01:03.070
so that our JMS listeners will be picked up.

20
00:01:03.070 --> 00:01:05.050
Now, let's talk about the message converter.

21
00:01:05.050 --> 00:01:09.010
I mentioned that Spring makes available a default converter

22
00:01:09.010 --> 00:01:13.050
called a SimpleMessageConverter, which is used

23
00:01:13.050 --> 00:01:16.090
by default in transmission and conversion of JMS messages.

24
00:01:16.090 --> 00:01:22.070
Here we're going to specify a new bean which will cause

25
00:01:22.070 --> 00:01:25.080
Spring to use a different message converter methodology.

26
00:01:25.080 --> 00:01:27.060
And we'll just put this here at the top.

27
00:01:27.060 --> 00:01:31.000
We'll type @Bean.

28
00:01:31.000 --> 00:01:36.010
Public.

29
00:01:36.010 --> 00:01:38.080
MessageConverter.

30
00:01:38.080 --> 00:01:39.080
And we need to make sure

31
00:01:39.080 --> 00:01:43.000
that we use the jms.support.converter.

32
00:01:43.000 --> 00:01:46.090
And this is because Spring has two message supporter classes

33
00:01:46.090 --> 00:01:49.020
and they exist in different packages.

34
00:01:49.020 --> 00:01:52.060
If you choose the wrong one, things will not work properly.

35
00:01:52.060 --> 00:01:57.000
We'll call this a jacksonJms

36
00:01:57.000 --> 00:02:00.000
MessageConverter.

37
00:02:00.000 --> 00:02:04.030
And we'll instantiate a Mapping

38
00:02:04.030 --> 00:02:06.000
Jackson2MessageConverter.

39
00:02:06.000 --> 00:02:08.010
Again, Spring has

40
00:02:08.010 --> 00:02:10.050
two of these classes in different packages.

41
00:02:10.050 --> 00:02:14.060
You wanna use the one that's in the jms.support.converter.

42
00:02:14.060 --> 00:02:16.080
We'll call this a converter

43
00:02:16.080 --> 00:02:21.080
equals new MappingJackson2MessageConverter.

44
00:02:21.080 --> 00:02:24.020
MappingJackson2MessageConverter

45
00:02:24.020 --> 00:02:27.070
is designed for usage with JSON strings.

46
00:02:27.070 --> 00:02:32.040
So, now we need to type converter

47
00:02:32.040 --> 00:02:35.040
setTargetType.

48
00:02:35.040 --> 00:02:42.070
And we're going to set a target type of MessageType.TEXT.

49
00:02:42.070 --> 00:02:48.090
And this will use the underlying base JMS message type.

50
00:02:48.090 --> 00:02:52.030
So, we could use message type of bytes as well.

51
00:02:52.030 --> 00:02:54.000
We're going to use text here.

52
00:02:54.000 --> 00:02:58.060
And the last thing we'll type is converter.set

53
00:02:58.060 --> 00:03:02.090
TypeIdPropertyName.

54
00:03:02.090 --> 00:03:08.020
And we'll type in _type.

55
00:03:08.020 --> 00:03:11.070
Turn the converter.

56
00:03:11.070 --> 00:03:16.000
Now, the setTypeIdPropertyName,

57
00:03:16.000 --> 00:03:18.000
really doesn't matter what you set this to

58
00:03:18.000 --> 00:03:19.090
as long as the sender and the receiver

59
00:03:19.090 --> 00:03:23.000
both rely on the same message converter bean.

60
00:03:23.000 --> 00:03:25.020
I say this because if you decide

61
00:03:25.020 --> 00:03:27.030
to break this out into two separate projects,

62
00:03:27.030 --> 00:03:30.010
a warehouse API and a client API,

63
00:03:30.010 --> 00:03:33.060
make sure that whatever you set this type to

64
00:03:33.060 --> 00:03:36.070
is the same in both message converters.

65
00:03:36.070 --> 00:03:39.010
Otherwise your messages won't convert.

66
00:03:39.010 --> 00:03:44.070
Now, going back to the Application.java class.

67
00:03:44.070 --> 00:03:46.030
We're going to comment out a section

68
00:03:46.030 --> 00:03:49.030
inside the static void main method.

69
00:03:49.030 --> 00:03:53.020
And that's from line 34 through 37.

70
00:03:53.020 --> 00:04:00.050
So, we'll just type our comments here.

71
00:04:00.050 --> 00:04:02.000
And we're doing this because,

72
00:04:02.000 --> 00:04:04.010
as you'll find out in the next video,

73
00:04:04.010 --> 00:04:07.050
we'll be pushing our messages from the web frontend.

74
00:04:07.050 --> 00:04:09.090
And we don't really need this piece anymore.

75
00:04:09.090 --> 00:04:14.030
Now, going back to our JmsConfig class.

76
00:04:14.030 --> 00:04:16.010
We have one more thing to keep in mind here,

77
00:04:16.010 --> 00:04:19.040
and that is with the JmsTemplate bean we created earlier.

78
00:04:19.040 --> 00:04:21.080
The JmsTemplate bean

79
00:04:21.080 --> 00:04:26.060
we created is overwriting the default one provided by Spring

80
00:04:26.060 --> 00:04:29.000
which also means we have to do one of two things.

81
00:04:29.000 --> 00:04:31.020
First, if we leave this as is,

82
00:04:31.020 --> 00:04:32.090
then it means that we need to ensure

83
00:04:32.090 --> 00:04:37.000
the JmsTemplate variable is using our new message converter.

84
00:04:37.000 --> 00:04:40.050
And we could do that by typing template

85
00:04:40.050 --> 00:04:44.040
setMessageConverter and populating it

86
00:04:44.040 --> 00:04:48.010
with the JacksonMessageConverter we created.

87
00:04:48.010 --> 00:04:51.000
Doing so, however, means we don't have to set

88
00:04:51.000 --> 00:04:54.020
the message converter bean to Spring bean

89
00:04:54.020 --> 00:04:56.050
with the @Bean configuration.

90
00:04:56.050 --> 00:04:59.040
The @Bean causes the method it annotates

91
00:04:59.040 --> 00:05:01.040
to load an instance of that variable

92
00:05:01.040 --> 00:05:03.070
into the session memory at application startup.

93
00:05:03.070 --> 00:05:06.080
So, the application, through Spring API,

94
00:05:06.080 --> 00:05:08.040
calls it once with the @Bean,

95
00:05:08.040 --> 00:05:11.040
and then calling it again would be a waste of resources.

96
00:05:11.040 --> 00:05:13.020
The second way to handle this is

97
00:05:13.020 --> 00:05:16.050
to remove the JmsTemplate bean altogether.

98
00:05:16.050 --> 00:05:20.060
But then we would need to add an @Bean annotation

99
00:05:20.060 --> 00:05:22.080
on the ConnectionFactory to make it available

100
00:05:22.080 --> 00:05:25.050
because the internal JmsTemplate will need

101
00:05:25.050 --> 00:05:27.040
that ConnectionFactory set.

102
00:05:27.040 --> 00:05:31.000
Otherwise, Spring Boot will assume it is defaulting

103
00:05:31.000 --> 00:05:33.040
to its own internal ActiveMQ instance,

104
00:05:33.040 --> 00:05:35.050
and we really don't want that.

105
00:05:35.050 --> 00:05:37.010
Because Spring wires things together

106
00:05:37.010 --> 00:05:39.060
by looking first at the configuration class, beans,

107
00:05:39.060 --> 00:05:42.030
and then later the service component, et cetera.

108
00:05:42.030 --> 00:05:45.040
Class level annotations, we have to keep in mind

109
00:05:45.040 --> 00:05:48.080
what instances are already provided for us.

110
00:05:48.080 --> 00:05:50.020
For now, to keep this simple,

111
00:05:50.020 --> 00:05:52.020
we're gonna apply the @Bean annotation

112
00:05:52.020 --> 00:05:56.060
and we're going to remove the JmsTemplate.

113
00:05:56.060 --> 00:05:58.080
The last thing we need to do here

114
00:05:58.080 --> 00:06:00.080
is we need to create a new class

115
00:06:00.080 --> 00:06:03.040
and we're going to do this in our JMS service.

116
00:06:03.040 --> 00:06:05.090
We'll call this

117
00:06:05.090 --> 00:06:09.020
the BookStore

118
00:06:09.020 --> 00:06:14.010
Order

119
00:06:14.010 --> 00:06:16.080
Service.

120
00:06:16.080 --> 00:06:19.020
Inside of it

121
00:06:19.020 --> 00:06:21.060
we'll go ahead and apply the @Service annotation

122
00:06:21.060 --> 00:06:23.050
so Spring will pick it up.

123
00:06:23.050 --> 00:06:26.080
We will

124
00:06:26.080 --> 00:06:29.060
autowire a

125
00:06:29.060 --> 00:06:31.020
JmsTemplate

126
00:06:31.020 --> 00:06:34.050
to use the one Spring is specifying for us.

127
00:06:34.050 --> 00:06:38.040
And we'll create a private

128
00:06:38.040 --> 00:06:40.000
static

129
00:06:40.000 --> 00:06:41.030
final

130
00:06:41.030 --> 00:06:44.020
String variable for our queue destination.

131
00:06:44.020 --> 00:06:49.030
We'll call this our BOOK_QUEUE.

132
00:06:49.030 --> 00:06:58.070
And we'll make this be set to our book.order.queue.

133
00:06:58.070 --> 00:07:01.020
Then we'll create a new method.

134
00:07:01.020 --> 00:07:07.060
We'll call this public void

135
00:07:07.060 --> 00:07:10.080
send.

136
00:07:10.080 --> 00:07:18.020
And this will take a parameter of bookOrder.

137
00:07:18.020 --> 00:07:22.070
And inside of here we'll use our jmsTemplate.convertAndSend.

138
00:07:22.070 --> 00:07:27.000
We'll use our BOOK_QUEUE as our destination.

139
00:07:27.000 --> 00:07:31.040
And we'll send our bookOrder.

140
00:07:31.040 --> 00:07:34.000
As far as the warehouse receiver class,

141
00:07:34.000 --> 00:07:36.050
we'll add this as well in our next video.

142
00:07:36.050 --> 00:07:37.060
And then we'll run the app

143
00:07:37.060 --> 00:07:41.000
and introduce some frontend changes that I've made for you.

