WEBVTT
1
00:00:00.050 --> 00:00:01.070
- [Narrator] Let's examine the benefits

2
00:00:01.070 --> 00:00:04.000
of using Spring JMS API versus

3
00:00:04.000 --> 00:00:07.090
the standard JMS specification.

4
00:00:07.090 --> 00:00:10.070
First off, Spring JMS is not a MOM provider

5
00:00:10.070 --> 00:00:15.010
but an abstraction layer of APIs to JMS.

6
00:00:15.010 --> 00:00:17.040
If you remember from our previous video

7
00:00:17.040 --> 00:00:21.030
message-oriented middleware products, MOM,

8
00:00:21.030 --> 00:00:25.060
provides implementations of JMS spec interfaces.

9
00:00:25.060 --> 00:00:29.000
Spring JMS however, provides an API abstraction

10
00:00:29.000 --> 00:00:31.000
so the developer does not have to write

11
00:00:31.000 --> 00:00:34.010
all of the standard boilerplate code involved

12
00:00:34.010 --> 00:00:36.080
when talking to a MOM.

13
00:00:36.080 --> 00:00:40.050
To make this clear, in order to use JMS 1.1

14
00:00:40.050 --> 00:00:46.010
the developer has to first create the JNDI initial context.

15
00:00:46.010 --> 00:00:50.080
Then get a ConnectionFactory from the JNDI context.

16
00:00:50.080 --> 00:00:52.020
Followed by getting a queue

17
00:00:52.020 --> 00:00:54.020
from the queue ConnectionFactory.

18
00:00:54.020 --> 00:00:58.000
Then the developer can create the Session object

19
00:00:58.000 --> 00:01:02.030
which a Sender or Receiver object can then be created.

20
00:01:02.030 --> 00:01:06.010
Finally, the developer can either send or receive

21
00:01:06.010 --> 00:01:09.080
a message using the Sender or Receiver object.

22
00:01:09.080 --> 00:01:13.070
And then the developer has to close all the JMS resources

23
00:01:13.070 --> 00:01:16.010
used for processing the message.

24
00:01:16.010 --> 00:01:19.030
Spring JMS simplifies this process by abstracting

25
00:01:19.030 --> 00:01:22.090
all of the first five steps and the last step

26
00:01:22.090 --> 00:01:24.010
of closing the connection.

27
00:01:24.010 --> 00:01:28.020
So keep in mind that using JMS spec alone,

28
00:01:28.020 --> 00:01:30.050
the developer has to continually manage a number

29
00:01:30.050 --> 00:01:33.070
of JMS resources only for the task

30
00:01:33.070 --> 00:01:37.050
of sending and receiving message objects.

31
00:01:37.050 --> 00:01:40.000
Spring Framework introduced a templating API

32
00:01:40.000 --> 00:01:42.050
much like the did with JDBC template class

33
00:01:42.050 --> 00:01:46.060
or JNDI template class called the JMS Template.

34
00:01:46.060 --> 00:01:49.010
These class templates can be transactional.

35
00:01:49.010 --> 00:01:52.090
When needed and perform excellent at managing resources

36
00:01:52.090 --> 00:01:55.040
that need to be opened and closed without the developer

37
00:01:55.040 --> 00:01:58.040
having to pay too much attention.

38
00:01:58.040 --> 00:02:00.050
The JmsTemplate distills the work

39
00:02:00.050 --> 00:02:03.000
of performing JMS operations down to either

40
00:02:03.000 --> 00:02:06.010
sending or receiving messages.

41
00:02:06.010 --> 00:02:08.060
Connection sessions and JNDI contexts

42
00:02:08.060 --> 00:02:10.000
are all abstracted away

43
00:02:10.000 --> 00:02:13.010
to make the development process much easier.

44
00:02:13.010 --> 00:02:16.080
To set up JmsTemplate all you need is a ConnectionFactory

45
00:02:16.080 --> 00:02:19.050
that is usually provided by a MOM and via

46
00:02:19.050 --> 00:02:24.020
the JNDI context call from JEE qualified container.

47
00:02:24.020 --> 00:02:27.090
So let me reiterate advantages of using Spring JMS

48
00:02:27.090 --> 00:02:32.080
as well as a couple of others for JMS messaging.

49
00:02:32.080 --> 00:02:35.060
Spring JMS provides a JMS abstraction API

50
00:02:35.060 --> 00:02:39.010
that simplifies the use of JMS to access

51
00:02:39.010 --> 00:02:41.030
the destinations, queues or topics.

52
00:02:41.030 --> 00:02:46.010
And publish messages to specify destinations.

53
00:02:46.010 --> 00:02:49.000
J2EE developers don't need to be concerned

54
00:02:49.000 --> 00:02:52.000
about the differences between JMS versions,

55
00:02:52.000 --> 00:02:56.030
such as JMS 1.0.2 versus JMS 1.1.

56
00:02:56.030 --> 00:02:59.040
Spring JMS API handles this.

57
00:02:59.040 --> 00:03:02.020
And developers don't need to specifically deal

58
00:03:02.020 --> 00:03:06.040
with JMS checked exceptions because Spring catches those

59
00:03:06.040 --> 00:03:10.080
and returns the unchecked exception for any JMS exception

60
00:03:10.080 --> 00:03:13.050
that is re-thrown.

61
00:03:13.050 --> 00:03:17.010
Additionally instances of Spring JMS Template Class

62
00:03:17.010 --> 00:03:20.060
are thread safe once configured.

63
00:03:20.060 --> 00:03:23.040
Now that you know the benefits of using Spring JMS,

64
00:03:23.040 --> 00:03:25.080
we can set up a small Spring boot application

65
00:03:25.080 --> 00:03:28.010
to demonstrate how easy it is

66
00:03:28.010 --> 00:03:32.000
to use Spring Framework's JMS API.

