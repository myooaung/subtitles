WEBVTT
1
00:00:00.050 --> 00:00:02.010
- [Instructor] We've come along way in this course.

2
00:00:02.010 --> 00:00:05.010
And finally we'll start by considering JMS headers

3
00:00:05.010 --> 00:00:09.050
and ways to utilize them in our course project.

4
00:00:09.050 --> 00:00:12.010
Just a quick recap on JMS headers, the spec says

5
00:00:12.010 --> 00:00:16.020
a JMS message header contains a number of predefined

6
00:00:16.020 --> 00:00:20.020
fields that contain values that both clients and providers

7
00:00:20.020 --> 00:00:24.000
use to identify and route messages.

8
00:00:24.000 --> 00:00:26.070
In addition to JMS headers, the spec says

9
00:00:26.070 --> 00:00:31.020
you can also create and set properties for messages if you

10
00:00:31.020 --> 00:00:33.020
need values in addition to those

11
00:00:33.020 --> 00:00:35.020
provided by the header fields.

12
00:00:35.020 --> 00:00:38.020
These additional properties or customer headers if you like

13
00:00:38.020 --> 00:00:42.090
can be used in a message agnostic manner to help control

14
00:00:42.090 --> 00:00:45.070
the flow in your application by reading properties.

15
00:00:45.070 --> 00:00:50.030
So let's go back to our code and modify a send and

16
00:00:50.030 --> 00:00:53.060
convert method to set some headers and properties.

17
00:00:53.060 --> 00:00:56.030
I've made some modifications again to facilitate

18
00:00:56.030 --> 00:00:59.020
our training by adding additional parameters which

19
00:00:59.020 --> 00:01:02.000
will be set from the web front end.

20
00:01:02.000 --> 00:01:03.070
I'll show you those in a moment but for now,

21
00:01:03.070 --> 00:01:06.000
please make sure you have the correct

22
00:01:06.000 --> 00:01:08.040
project files open in your editor.

23
00:01:08.040 --> 00:01:11.090
Opening again the book order service,

24
00:01:11.090 --> 00:01:18.020
go into the send method, and let's modify

25
00:01:18.020 --> 00:01:22.030
the convert and send method and add another parameter

26
00:01:22.030 --> 00:01:27.020
after the book order parameter.

27
00:01:27.020 --> 00:01:34.020
What we'll add is a new message post processor.

28
00:01:34.020 --> 00:01:38.070
And then modify the message value that appears inside.

29
00:01:38.070 --> 00:01:41.020
Using the message post processor, we're able

30
00:01:41.020 --> 00:01:46.080
to access the core JMS message object

31
00:01:46.080 --> 00:01:48.000
which can set the default JMS headers

32
00:01:48.000 --> 00:01:50.070
or add custom headers to the message.

33
00:01:50.070 --> 00:01:54.010
What we're going to do is add some custom header properties

34
00:01:54.010 --> 00:02:07.020
so what we'll type is message.setStringProperty

35
00:02:07.020 --> 00:02:20.010
in we'll type bookOrderId,bookOrder.getBookOrderId.

36
00:02:20.010 --> 00:02:23.030
We'll add another message property, we'll say

37
00:02:23.030 --> 00:02:28.080
netmessage set string property, this time we're gonna

38
00:02:28.080 --> 00:02:37.030
pass in the store id and we'll pass in the value store id.

39
00:02:37.030 --> 00:02:42.020
As you can tell, these values are already pre set for

40
00:02:42.020 --> 00:02:45.000
you with the changes I talked about.

41
00:02:45.000 --> 00:02:48.060
The last one we're gonna do again is set string property

42
00:02:48.060 --> 00:02:54.020
and this time we're gonna call this the order state

43
00:02:54.020 --> 00:02:57.090
and we're gonna pass in an order state value.

44
00:02:57.090 --> 00:03:01.020
Okay, so you can see we're adding two properties

45
00:03:01.020 --> 00:03:02.080
here to put in these customer headers,

46
00:03:02.080 --> 00:03:06.000
the book order id and the store id.

47
00:03:06.000 --> 00:03:08.090
Imagine with me you own a warehouse and there

48
00:03:08.090 --> 00:03:12.000
are multiple stores out there, maybe there are different

49
00:03:12.000 --> 00:03:15.060
processing rules for some stores compared to others.

50
00:03:15.060 --> 00:03:18.070
Also notice we're adding an order state.

51
00:03:18.070 --> 00:03:21.030
This parameter is currently set to new but

52
00:03:21.030 --> 00:03:24.090
it is designed where it could be many different states

53
00:03:24.090 --> 00:03:30.040
like update, delete, or updated or deleted.

54
00:03:30.040 --> 00:03:36.060
Finally we just need to return our message.

55
00:03:36.060 --> 00:03:39.070
Those states that I mentioned could be handled

56
00:03:39.070 --> 00:03:41.090
differently from the warehouse perspective.

57
00:03:41.090 --> 00:03:46.000
This means the message is agnostic of its order state.

58
00:03:46.000 --> 00:03:50.000
So you could have an order state of delete to

59
00:03:50.000 --> 00:03:54.030
remove or cancel and order or an order state

60
00:03:54.030 --> 00:03:56.060
of update for well, you get the idea.

61
00:03:56.060 --> 00:04:19.040
Okay, let's compile and run the application.

62
00:04:19.040 --> 00:04:24.040
Okay, so it's complied, let's go back to our application.

63
00:04:24.040 --> 00:04:29.020
We'll refresh the page and we're going to ensure

64
00:04:29.020 --> 00:04:35.090
that we choose an order state of new with an add to order.

65
00:04:35.090 --> 00:04:41.040
Again, Lord of the Flies is gonna be chosen here.

66
00:04:41.040 --> 00:04:45.080
Okay again we're seeing the air handling kicking off.

67
00:04:45.080 --> 00:04:48.010
We've submitted Lord of the Flies.

68
00:04:48.010 --> 00:04:51.090
Let's go over to our active MQ, click on queues again.

69
00:04:51.090 --> 00:04:58.010
We have a message, actually it populated just as

70
00:04:58.010 --> 00:05:00.030
I clicked on it, we have two message.

71
00:05:00.030 --> 00:05:05.010
We'll go to the last message that was sent.

72
00:05:05.010 --> 00:05:07.040
And what I want you to notice here is we now

73
00:05:07.040 --> 00:05:12.040
have a book order property, we have a store id

74
00:05:12.040 --> 00:05:14.000
and we have the order state.

