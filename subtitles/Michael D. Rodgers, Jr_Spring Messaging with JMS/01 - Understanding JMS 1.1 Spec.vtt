WEBVTT
1
00:00:00.050 --> 00:00:02.070
- [Instructor] Before we dive in to Spring JMS,

2
00:00:02.070 --> 00:00:06.030
let's take a quick look at the Java messaging service spec,

3
00:00:06.030 --> 00:00:10.050
the two domain types of messaging, and some example uses.

4
00:00:10.050 --> 00:00:13.020
The JMS spec is a set of interfaces and terms

5
00:00:13.020 --> 00:00:17.080
that defines how a JMS client can access the facilities

6
00:00:17.080 --> 00:00:20.020
of an enterprise product.

7
00:00:20.020 --> 00:00:23.010
Looking over at the official documentation,

8
00:00:23.010 --> 00:00:26.080
you'll see here on the JMS spec is a great resource

9
00:00:26.080 --> 00:00:28.060
for any developer to consider.

10
00:00:28.060 --> 00:00:32.080
Feel free to browse this for more fine grain details.

11
00:00:32.080 --> 00:00:34.080
Third party products are providers

12
00:00:34.080 --> 00:00:37.020
that implement the JMS specification,

13
00:00:37.020 --> 00:00:39.080
will furnish the needed coded in the implementations

14
00:00:39.080 --> 00:00:42.070
for accessing a message oriented middleware product

15
00:00:42.070 --> 00:00:44.050
called a MOM.

16
00:00:44.050 --> 00:00:47.060
Messaging in general then allows for transmission

17
00:00:47.060 --> 00:00:49.080
of specifically formatted messages

18
00:00:49.080 --> 00:00:53.080
to a MOM for temporary retention before being accessed

19
00:00:53.080 --> 00:00:55.070
by another client.

20
00:00:55.070 --> 00:00:58.020
Published MOMs are in synchronized communication

21
00:00:58.020 --> 00:01:01.050
between a MOM and other JMS client applications.

22
00:01:01.050 --> 00:01:05.010
I know it sounds funny, but there are many various MOMs,

23
00:01:05.010 --> 00:01:07.000
or Message Oriented Middleware products

24
00:01:07.000 --> 00:01:10.070
like ActiveMQ, RabbitMZ, Jboss, StormMQ

25
00:01:10.070 --> 00:01:13.040
and even Oracle allows for queue creation

26
00:01:13.040 --> 00:01:14.060
inside of its database.

27
00:01:14.060 --> 00:01:17.050
Honestly, there are really too many to try to list them all.

28
00:01:17.050 --> 00:01:19.070
Later in the Spring JMS tutorials,

29
00:01:19.070 --> 00:01:23.020
we will publish messages to a topic and queues

30
00:01:23.020 --> 00:01:26.030
using ActiveMQ.

31
00:01:26.030 --> 00:01:29.010
There are two domain types of JMS messaging

32
00:01:29.010 --> 00:01:33.030
which are point to point, and publish subscribe systems.

33
00:01:33.030 --> 00:01:35.080
Point to point systems operate around message queues

34
00:01:35.080 --> 00:01:40.020
where a message is published to a specific queue on a MOM

35
00:01:40.020 --> 00:01:44.010
and a separate client is established to listen and consume

36
00:01:44.010 --> 00:01:47.080
only from that queue on that MOM.

37
00:01:47.080 --> 00:01:50.030
Peer to peer systems operate around message queues

38
00:01:50.030 --> 00:01:53.040
where a message is published to a specific queue

39
00:01:53.040 --> 00:01:58.010
on the MOM and a specific client is established

40
00:01:58.010 --> 00:02:03.030
to listen and consume only from that queue on the MOM.

41
00:02:03.030 --> 00:02:05.090
Let's look at some examples breaking down

42
00:02:05.090 --> 00:02:09.060
how point to point and Pub/Sub work.

43
00:02:09.060 --> 00:02:11.090
So the point to point messaging domain type

44
00:02:11.090 --> 00:02:14.080
is useful when you communicate to only one consumer

45
00:02:14.080 --> 00:02:19.060
with the queue or task or messages to be operated upon.

46
00:02:19.060 --> 00:02:23.010
For example, a storefront may place a request

47
00:02:23.010 --> 00:02:26.010
for a product that is in the warehouse inventory.

48
00:02:26.010 --> 00:02:29.020
That request for the product is published

49
00:02:29.020 --> 00:02:31.030
to a particular queue on a MOM.

50
00:02:31.030 --> 00:02:33.050
And in our case, ActiveMQ.

51
00:02:33.050 --> 00:02:36.060
We'll call that queue the order request queue.

52
00:02:36.060 --> 00:02:38.080
The warehouse client system listens

53
00:02:38.080 --> 00:02:41.090
to the order request queue and pulls the message

54
00:02:41.090 --> 00:02:45.030
or the request from the queue and acts upon it.

55
00:02:45.030 --> 00:02:48.020
In a point to point each message is designed

56
00:02:48.020 --> 00:02:50.010
to be sent to a particular queue

57
00:02:50.010 --> 00:02:54.090
on the MOM that a specified client is designed to receive.

58
00:02:54.090 --> 00:02:57.060
The Pub/Sub message domain type similarly

59
00:02:57.060 --> 00:03:00.080
involves publishing a message but instead of

60
00:03:00.080 --> 00:03:04.040
to a queue that is only for one and only one consumer,

61
00:03:04.040 --> 00:03:08.000
it publishes to a topic on a MOM.

62
00:03:08.000 --> 00:03:11.030
That topic can have multiple subscribers.

63
00:03:11.030 --> 00:03:13.080
Using the storefront warehouse example again,

64
00:03:13.080 --> 00:03:16.090
imagine that there are several storefronts

65
00:03:16.090 --> 00:03:19.060
that have subscribed to an inventory topic

66
00:03:19.060 --> 00:03:22.040
on an ActiveMQ server, our MOM.

67
00:03:22.040 --> 00:03:25.080
We'll apply call this topic the inventory topic.

68
00:03:25.080 --> 00:03:28.040
The warehouse client application would publish

69
00:03:28.040 --> 00:03:32.090
to the inventory topic messages that convey warehouse items

70
00:03:32.090 --> 00:03:35.090
that have been removed or added to the inventory.

71
00:03:35.090 --> 00:03:38.030
Storefront clients then, which have subscribed

72
00:03:38.030 --> 00:03:40.090
to the inventory topic on the MOM are then able

73
00:03:40.090 --> 00:03:44.010
to determine what items are available for order

74
00:03:44.010 --> 00:03:47.080
and store those inventory changes locally.

75
00:03:47.080 --> 00:03:50.070
Okay, since we have now refreshed our understanding

76
00:03:50.070 --> 00:03:53.080
of JMS and queue and topic basics,

77
00:03:53.080 --> 00:03:57.020
let's look at what Spring JMS is and why we might want

78
00:03:57.020 --> 00:04:00.000
to use it over JMS in general.

