WEBVTT
1
00:00:00.000 --> 00:00:02.030
- [Instructor] We have set up our transaction manager

2
00:00:02.030 --> 00:00:05.030
to handle message consuming and listening.

3
00:00:05.030 --> 00:00:08.000
Let's take this a step further by demonstrating

4
00:00:08.000 --> 00:00:10.060
how these messages could be persisted

5
00:00:10.060 --> 00:00:12.060
into a dead letter queue.

6
00:00:12.060 --> 00:00:15.040
In our JmsConfig class, we will add a new

7
00:00:15.040 --> 00:00:17.060
Spring being of JmsTemplate.

8
00:00:17.060 --> 00:00:25.060
After our platform transaction manager,

9
00:00:25.060 --> 00:00:31.000
type public JmsTemplate

10
00:00:31.000 --> 00:00:34.000
jmsTemplate,

11
00:00:34.000 --> 00:00:46.050
and inside, we'll instantiate a new JmsTemplate class.

12
00:00:46.050 --> 00:00:48.010
In the constructor, we're going to

13
00:00:48.010 --> 00:00:54.080
pass our connection factory.

14
00:00:54.080 --> 00:00:57.060
We're also going to ensure that our JmsTemplate is

15
00:00:57.060 --> 00:01:01.040
using the message converter that we have specified.

16
00:01:01.040 --> 00:01:08.050
We're gonna pass in our jackson message converter.

17
00:01:08.050 --> 00:01:12.020
Next, we need to ensure that messages are persistent.

18
00:01:12.020 --> 00:01:14.060
By default, these messages are not persistent,

19
00:01:14.060 --> 00:01:17.070
which means if a messages are not read in

20
00:01:17.070 --> 00:01:19.070
a couple of seconds, they'll automatically

21
00:01:19.070 --> 00:01:21.040
disappear off the queue.

22
00:01:21.040 --> 00:01:24.080
For our purposes, and for seeing messages fall into

23
00:01:24.080 --> 00:01:27.090
a dead letter queue, we want them to be persistent.

24
00:01:27.090 --> 00:01:34.040
We're gonna type jmsTemplate.setDeliveryPersistent,

25
00:01:34.040 --> 00:01:38.090
and we'll say that's true.

26
00:01:38.090 --> 00:01:43.020
The last thing we'll do is ensure that the jmsTemplate

27
00:01:43.020 --> 00:01:52.060
has a set session transacted

28
00:01:52.060 --> 00:01:56.010
to true, and this will enforce

29
00:01:56.010 --> 00:02:01.060
the use of our platform transaction manager.

30
00:02:01.060 --> 00:02:04.080
Then we're going to return our jmsTemplate.

31
00:02:04.080 --> 00:02:07.060
Next, we're gonna add a logger to the top of this class.

32
00:02:07.060 --> 00:02:11.070
We'll just do that real quickly.

33
00:02:11.070 --> 00:02:16.060
Private static final Logger,

34
00:02:16.060 --> 00:02:19.050
again, using our sf4j logger,

35
00:02:19.050 --> 00:02:22.010
we'll call it LOGGER

36
00:02:22.010 --> 00:02:29.020
equals LoggerFactory.getLogger.

37
00:02:29.020 --> 00:02:37.080
And we'll use our class name.

38
00:02:37.080 --> 00:02:40.010
Next, we want to add a error handler to

39
00:02:40.010 --> 00:02:47.030
our default Jms listener container factory.

40
00:02:47.030 --> 00:02:49.090
We'll come in here, we'll type

41
00:02:49.090 --> 00:02:56.030
factory.setErrorHandler,

42
00:02:56.030 --> 00:03:03.060
and we'll say t.

43
00:03:03.060 --> 00:03:12.060
Inside of here, we'll type our LOGGER.info,

44
00:03:12.060 --> 00:03:21.090
and we'll just say, "Handling error in listener

45
00:03:21.090 --> 00:03:28.010
for messages, error is,"

46
00:03:28.010 --> 00:03:38.050
and we'll just say t.getMessage.

47
00:03:38.050 --> 00:03:41.020
This will ensure that our error handler is

48
00:03:41.020 --> 00:03:43.020
populating messages appropriately.

49
00:03:43.020 --> 00:03:44.050
With these done, we want to

50
00:03:44.050 --> 00:03:46.090
simulate an exception occurring.

51
00:03:46.090 --> 00:03:49.020
The easiest way to set this condition,

52
00:03:49.020 --> 00:03:52.000
that we can simply throw a new runtime exception.

53
00:03:52.000 --> 00:03:57.010
So let's go to our warehouse receiver class

54
00:03:57.010 --> 00:03:59.050
and simulate an exception.

55
00:03:59.050 --> 00:04:02.090
Using your imagination, maybe you would have

56
00:04:02.090 --> 00:04:05.010
some sort of data processing that occurs

57
00:04:05.010 --> 00:04:07.010
that might throw an exception.

58
00:04:07.010 --> 00:04:09.050
Maybe you do a validation check on the data

59
00:04:09.050 --> 00:04:11.070
and throw a custom exception if the data

60
00:04:11.070 --> 00:04:13.010
does not meet your standard.

61
00:04:13.010 --> 00:04:16.040
Let's create a validation check for books that

62
00:04:16.040 --> 00:04:20.060
start with the letter L.

63
00:04:20.060 --> 00:04:23.060
We're going to force a runtime exception to be thrown.

64
00:04:23.060 --> 00:04:27.010
I know it's silly, right, but this can demonstrate

65
00:04:27.010 --> 00:04:29.040
how a processing error could be caught

66
00:04:29.040 --> 00:04:31.030
and the transaction could be rolled back.

67
00:04:31.030 --> 00:04:39.060
So we'll type if the book order, get the book,

68
00:04:39.060 --> 00:04:49.090
get the title, starts with the letter L.

69
00:04:49.090 --> 00:04:57.070
Then we're going to throw a new runtime exception,

70
00:04:57.070 --> 00:05:04.010
and we'll just say that the order ID is

71
00:05:04.010 --> 00:05:10.000
from the book order, get the book order ID.

72
00:05:10.000 --> 00:05:12.010
And then we'll also add some more details

73
00:05:12.010 --> 00:05:16.060
and we'll say begins with L,

74
00:05:16.060 --> 00:05:26.050
and these books are not allowed.

75
00:05:26.050 --> 00:05:42.080
Let's compile, run our program, and see what happens.

76
00:05:42.080 --> 00:05:49.040
With it compiled, let's open up our application.

77
00:05:49.040 --> 00:05:50.060
Go to localhost.

78
00:05:50.060 --> 00:05:53.010
Let's refresh the page.

79
00:05:53.010 --> 00:05:56.030
We have a book already set here starts with an L.

80
00:05:56.030 --> 00:06:04.080
Let's select Lord of the Flies, hit submit.

81
00:06:04.080 --> 00:06:08.000
Wow, did you see the error handler hit out?

82
00:06:08.000 --> 00:06:09.080
It says it's listening for messages.

83
00:06:09.080 --> 00:06:13.020
Error, listener message, so forth,

84
00:06:13.020 --> 00:06:16.020
threw an exception, and here it is.

85
00:06:16.020 --> 00:06:19.070
Order ID begins with L; these books are not allowed.

86
00:06:19.070 --> 00:06:23.030
Let's open up our ActiveMQ server.

87
00:06:23.030 --> 00:06:29.000
We'll click on Queues, and notice what you see.

88
00:06:29.000 --> 00:06:32.020
ActiveMQ has created a default

89
00:06:32.020 --> 00:06:37.020
ActiveMQ dead letter queue.

90
00:06:37.020 --> 00:06:39.020
Clicking on the message, you see that

91
00:06:39.020 --> 00:06:46.000
the message is persistent.

92
00:06:46.000 --> 00:06:49.020
But we also see that the message was delivered

93
00:06:49.020 --> 00:06:52.050
seven times, or it was attempted seven times.

94
00:06:52.050 --> 00:06:56.040
This tells us that the message was rolled back,

95
00:06:56.040 --> 00:06:58.030
put on the queue, attempted again.

96
00:06:58.030 --> 00:07:02.030
Rolled back, put on the queue, attempted for six times.

97
00:07:02.030 --> 00:07:04.070
On the seventh time, the message was put into

98
00:07:04.070 --> 00:07:07.000
a default dead letter queue.

