WEBVTT
1
00:00:00.050 --> 00:00:01.040
- [Instructor] You might be wondering,

2
00:00:01.040 --> 00:00:05.050
what is a Spring JMS message converter?

3
00:00:05.050 --> 00:00:09.010
JMS provides for some basic messaging types

4
00:00:09.010 --> 00:00:11.020
like Streams,

5
00:00:11.020 --> 00:00:12.030
Map,

6
00:00:12.030 --> 00:00:13.050
Text,

7
00:00:13.050 --> 00:00:14.050
Object,

8
00:00:14.050 --> 00:00:16.020
and Bytes.

9
00:00:16.020 --> 00:00:19.010
These JMS message types for the most part

10
00:00:19.010 --> 00:00:24.010
form the foundation of all other message types that exist.

11
00:00:24.010 --> 00:00:27.030
For example, a JSON or XML message

12
00:00:27.030 --> 00:00:30.020
could be easily sent as TextMessages.

13
00:00:30.020 --> 00:00:32.090
Images or sound or music files

14
00:00:32.090 --> 00:00:37.000
could be sent as ByteMessages.

15
00:00:37.000 --> 00:00:40.040
Spring provides out of the box, a default conversion

16
00:00:40.040 --> 00:00:43.060
through its SimpleMessageConverter.

17
00:00:43.060 --> 00:00:47.040
The SimpleMessageConverter is able to handle TextMessages,

18
00:00:47.040 --> 00:00:53.020
BytesMessages, MapMessages, and ObjectMessages.

19
00:00:53.020 --> 00:00:56.060
The only base JMS message type that it does not handle

20
00:00:56.060 --> 00:01:00.030
is the StreamMessages.

21
00:01:00.030 --> 00:01:04.080
We've used JmsTemplate.convertAndSend.

22
00:01:04.080 --> 00:01:08.050
The default conversion strategy used with converAndSend

23
00:01:08.050 --> 00:01:10.080
is the SimpleMessageConverter.

24
00:01:10.080 --> 00:01:13.090
This is the case, unless we specify a different converter

25
00:01:13.090 --> 00:01:18.020
in our configuration as a Spring bean.

26
00:01:18.020 --> 00:01:19.080
Spring additionally provides some other

27
00:01:19.080 --> 00:01:21.070
message converters for use.

28
00:01:21.070 --> 00:01:25.010
But, we would have to specify these in the configuration

29
00:01:25.010 --> 00:01:27.030
through an @Bean annotation.

30
00:01:27.030 --> 00:01:30.080
These other messaging converters are:

31
00:01:30.080 --> 00:01:35.090
MappingJackson2MessageConverter, MarshallingMessageConverter

32
00:01:35.090 --> 00:01:39.050
and MessagingMessageConverter.

33
00:01:39.050 --> 00:01:44.060
A MappingJackson2MessageConverter will use Jackson 2.x API

34
00:01:44.060 --> 00:01:48.060
to convert message payloads to and from JSON.

35
00:01:48.060 --> 00:01:53.040
It internally maps objects to ByteMessages or TextMessages,

36
00:01:53.040 --> 00:01:56.060
depending on what the targetType is set.

37
00:01:56.060 --> 00:02:00.030
A MarshallingMessageConverter uses a Marshaller

38
00:02:00.030 --> 00:02:03.060
and an Unmarshaller to marshall objects to ByteMessages

39
00:02:03.060 --> 00:02:05.080
or TextMessages, and again,

40
00:02:05.080 --> 00:02:09.040
it depends on what the targetType is set.

41
00:02:09.040 --> 00:02:13.000
A MessagingMessageConverter converts a JMS message

42
00:02:13.000 --> 00:02:15.060
using an underlying MessageConverter

43
00:02:15.060 --> 00:02:22.030
for payloads and a JmsHeaderMaper to map the JMS headers.

44
00:02:22.030 --> 00:02:23.060
So what if we wanted to create

45
00:02:23.060 --> 00:02:25.060
our own custom message converter?

46
00:02:25.060 --> 00:02:29.040
What would we do, and how would we go about it?

47
00:02:29.040 --> 00:02:31.050
Really, it's jut a matter of implementing

48
00:02:31.050 --> 00:02:36.030
Spring's MessageConverter interface.

49
00:02:36.030 --> 00:02:38.070
The MessageConverter interface has two methods

50
00:02:38.070 --> 00:02:42.060
that we would need to provide implementations for.

51
00:02:42.060 --> 00:02:44.070
They are the toMessage,

52
00:02:44.070 --> 00:02:47.010
which accepts an object to be converted

53
00:02:47.010 --> 00:02:52.010
and a session instance and it returns a message.

54
00:02:52.010 --> 00:02:56.000
The second method of the MessageConverter interface

55
00:02:56.000 --> 00:02:58.010
is the fromMessage,

56
00:02:58.010 --> 00:03:00.000
which takes a message,

57
00:03:00.000 --> 00:03:02.040
accepts a message to be converted,

58
00:03:02.040 --> 00:03:05.000
and returns a Java object.

