WEBVTT
1
00:00:00.040 --> 00:00:02.040
- [Instructor] Previously we added message listening

2
00:00:02.040 --> 00:00:05.000
capabilities with the @jmslistener annotation.

3
00:00:05.000 --> 00:00:07.050
This should be the preferred way of listening

4
00:00:07.050 --> 00:00:09.020
to a QR topic with Spring.

5
00:00:09.020 --> 00:00:13.050
Sometimes, however, you may need more fine grain control

6
00:00:13.050 --> 00:00:15.090
in listening for messages on queues

7
00:00:15.090 --> 00:00:17.080
as well as processing them.

8
00:00:17.080 --> 00:00:20.070
We'll do that, but let's look at our diagram

9
00:00:20.070 --> 00:00:22.080
of our course project first.

10
00:00:22.080 --> 00:00:26.070
As you can see, we process messages for book orders

11
00:00:26.070 --> 00:00:29.080
from the client storefront to the queue,

12
00:00:29.080 --> 00:00:33.030
and then the warehouse reads those messages.

13
00:00:33.030 --> 00:00:36.040
We will add a warehouse processing service

14
00:00:36.040 --> 00:00:41.000
and a new custom JMS message listener.

15
00:00:41.000 --> 00:00:44.070
Let's add a processing piece of logic

16
00:00:44.070 --> 00:00:47.080
to demonstrate that there's something

17
00:00:47.080 --> 00:00:51.050
that's happened to our book order by returning

18
00:00:51.050 --> 00:00:53.060
a new process book order project.

19
00:00:53.060 --> 00:00:56.060
This will contain the date and time of processing

20
00:00:56.060 --> 00:00:59.060
and expected date and time of shipping.

21
00:00:59.060 --> 00:01:04.000
Now, as you can see, I've already provided

22
00:01:04.000 --> 00:01:05.090
this for you.

23
00:01:05.090 --> 00:01:09.010
Next, we'll create a warehouse processing service

24
00:01:09.010 --> 00:01:11.050
to process book orders.

25
00:01:11.050 --> 00:01:15.040
Again, for the sake of time, I've already added

26
00:01:15.040 --> 00:01:17.040
the warehouse processing service

27
00:01:17.040 --> 00:01:19.080
in our sample code set.

28
00:01:19.080 --> 00:01:22.070
Please open this for a quick review, and what it does.

29
00:01:22.070 --> 00:01:25.020
The logic should be fairly straightforward at this point,

30
00:01:25.020 --> 00:01:28.020
in that the class is just like our book order service.

31
00:01:28.020 --> 00:01:32.090
The only difference is that we take a book order object,

32
00:01:32.090 --> 00:01:36.010
and then construct a processed book order

33
00:01:36.010 --> 00:01:38.090
from the POJO we opened a minute ago.

34
00:01:38.090 --> 00:01:41.040
Everything else is the same.

35
00:01:41.040 --> 00:01:44.020
We pass it to a convertAndSend, a destination,

36
00:01:44.020 --> 00:01:47.030
and the object to be sent.

37
00:01:47.030 --> 00:01:49.070
With this complete, let's move back to the question

38
00:01:49.070 --> 00:01:51.090
of our custom message listener.

39
00:01:51.090 --> 00:01:53.090
First, let's create a new package.

40
00:01:53.090 --> 00:01:57.020
We'll right click on packages, the default package,

41
00:01:57.020 --> 00:02:03.010
and we'll call this Listener.

42
00:02:03.010 --> 00:02:05.030
And inside the listener package,

43
00:02:05.030 --> 00:02:09.060
we'll create a new class.

44
00:02:09.060 --> 00:02:21.010
We'll call this the BookOrderProcessingMessageListener.

45
00:02:21.010 --> 00:02:24.080
We'll annotate this with @component

46
00:02:24.080 --> 00:02:27.070
because we want Spring to pick it up when we compile,

47
00:02:27.070 --> 00:02:36.010
and also ensure that this class implements

48
00:02:36.010 --> 00:02:43.010
message listener.

49
00:02:43.010 --> 00:02:45.050
Now the message listener class.

50
00:02:45.050 --> 00:02:49.060
It has to override a abstract method of on message.

51
00:02:49.060 --> 00:02:52.050
So we'll do that here.

52
00:02:52.050 --> 00:03:00.070
We'll type @Override, public void, onMessage,

53
00:03:00.070 --> 00:03:07.090
and the onMessage takes a message

54
00:03:07.090 --> 00:03:10.000
of JMS type.

55
00:03:10.000 --> 00:03:12.070
I'll pass that message,

56
00:03:12.070 --> 00:03:15.070
and then provide the curly brackets.

57
00:03:15.070 --> 00:03:19.040
We're also going to add a logger here.

58
00:03:19.040 --> 00:03:26.010
Private, static, final, Logger.

59
00:03:26.010 --> 00:03:35.000
We'll use the SSLOJ again, call it Logger equals

60
00:03:35.000 --> 00:03:38.090
LoggerFactory.getLogger,

61
00:03:38.090 --> 00:03:49.050
and we'll use our class name again.

62
00:03:49.050 --> 00:03:53.030
Inside our onMessage method,

63
00:03:53.030 --> 00:04:01.010
we're going to take the message.

64
00:04:01.010 --> 00:04:04.030
And this is a JMS message,

65
00:04:04.030 --> 00:04:06.070
so it's not a text message.

66
00:04:06.070 --> 00:04:08.050
So we're gonna have to do a couple of things here

67
00:04:08.050 --> 00:04:11.010
to get this message converted.

68
00:04:11.010 --> 00:04:13.030
First thing we're going to do is we're gonna put

69
00:04:13.030 --> 00:04:18.030
text message in front,

70
00:04:18.030 --> 00:04:20.070
and this is so we can cast it.

71
00:04:20.070 --> 00:04:24.030
Gonna wrap this, tie our string here,

72
00:04:24.030 --> 00:04:27.090
this entire line here with parentheses,

73
00:04:27.090 --> 00:04:32.000
and then we're gonna type getText,

74
00:04:32.000 --> 00:04:38.030
and this basically tells us there's an unhandled exception.

75
00:04:38.030 --> 00:04:40.010
You should be able to click on the little light bulb

76
00:04:40.010 --> 00:04:48.010
and surround with a try catch and...

77
00:04:48.010 --> 00:04:50.080
So what we'll do next is we'll come over here,

78
00:04:50.080 --> 00:04:53.060
click on this to introduce a local variable,

79
00:04:53.060 --> 00:04:56.040
and we'll say text,

80
00:04:56.040 --> 00:05:04.020
and we're going to use our logger.info,

81
00:05:04.020 --> 00:05:08.000
and we're going to simply just pass in the text

82
00:05:08.000 --> 00:05:10.000
that comes from the message.

