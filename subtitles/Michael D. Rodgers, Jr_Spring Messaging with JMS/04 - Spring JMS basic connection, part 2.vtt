WEBVTT
1
00:00:00.050 --> 00:00:01.030
- [Instructor] As I mentioned,

2
00:00:01.030 --> 00:00:03.070
we now need to add a listener class for listening

3
00:00:03.070 --> 00:00:06.020
to our queue called order queue.

4
00:00:06.020 --> 00:00:08.010
Springs make this so easy in listening

5
00:00:08.010 --> 00:00:09.090
to a message queue for messages.

6
00:00:09.090 --> 00:00:11.070
All you have to do is create a class

7
00:00:11.070 --> 00:00:14.060
and use a few spring JMS annotations.

8
00:00:14.060 --> 00:00:16.020
Let's do this now.

9
00:00:16.020 --> 00:00:25.020
We'll call our class ...

10
00:00:25.020 --> 00:00:32.040
The receiver class.

11
00:00:32.040 --> 00:00:35.070
And we'll annotate it ...

12
00:00:35.070 --> 00:00:44.070
With at component ...

13
00:00:44.070 --> 00:00:46.040
Which will cause this class to be added

14
00:00:46.040 --> 00:00:49.060
to the spring context as the application starts out.

15
00:00:49.060 --> 00:00:53.020
It subsequently allows other spring beans to find it.

16
00:00:53.020 --> 00:00:54.050
Inside of our class let's create

17
00:00:54.050 --> 00:01:07.040
a method called receive message.

18
00:01:07.040 --> 00:01:18.070
With a string message parameter.

19
00:01:18.070 --> 00:01:27.080
We'll annotate this method with at JMS listener.

20
00:01:27.080 --> 00:01:30.090
The JMS listener annotation can take several properties,

21
00:01:30.090 --> 00:01:33.060
but we'll provide two mandatory:

22
00:01:33.060 --> 00:01:45.030
the destination and the factory it will use.

23
00:01:45.030 --> 00:01:47.020
The destination will be the order queue

24
00:01:47.020 --> 00:01:50.000
which we specified earlier in sending a message

25
00:01:50.000 --> 00:01:53.020
to the application, dot Java class.

26
00:01:53.020 --> 00:01:56.020
The order queue is the queue that the JMS listener

27
00:01:56.020 --> 00:02:00.060
is being configured to listen for JMS messages.

28
00:02:00.060 --> 00:02:02.030
In order for this to work however,

29
00:02:02.030 --> 00:02:06.060
it also needs to know which message queue server, or MOM,

30
00:02:06.060 --> 00:02:08.010
that the queue resides on.

31
00:02:08.010 --> 00:02:18.000
We satisfy this need by adding a container factor parameter.

32
00:02:18.000 --> 00:02:20.000
And supplying it with the name ...

33
00:02:20.000 --> 00:02:23.040
Specified in our application dot Java for the bean

34
00:02:23.040 --> 00:02:28.040
which is named ...

35
00:02:28.040 --> 00:02:33.040
Warehouse factory.

36
00:02:33.040 --> 00:02:34.080
Okay.

37
00:02:34.080 --> 00:02:36.020
Last thing we want to do

38
00:02:36.020 --> 00:02:42.010
is add some system out print line statements.

39
00:02:42.010 --> 00:02:46.050
To demonstrate that, we received a message.

40
00:02:46.050 --> 00:03:06.020
We'll type.

41
00:03:06.020 --> 00:03:07.070
Our application class,

42
00:03:07.070 --> 00:03:09.080
we've already added a system out print line

43
00:03:09.080 --> 00:03:12.090
to see when and where the message starts.

44
00:03:12.090 --> 00:03:15.020
The last thing to do is build the program and run it.

45
00:03:15.020 --> 00:03:41.080
Let's do that now.

46
00:03:41.080 --> 00:03:42.080
Okay.

47
00:03:42.080 --> 00:03:46.040
The message was sent to our ActiveMQ instance internally,

48
00:03:46.040 --> 00:03:48.040
and automatically spring boot,

49
00:03:48.040 --> 00:03:50.020
and then immediately pulled back

50
00:03:50.020 --> 00:03:53.010
and brought through our JMS listener method.

51
00:03:53.010 --> 00:03:54.050
This is a very quick demonstration

52
00:03:54.050 --> 00:03:56.090
of how spring JMS simplifies and distills

53
00:03:56.090 --> 00:04:00.000
the process of using JMS.

