WEBVTT
1
00:00:00.005 --> 00:00:02.003
- [Instructor] We have talked throughout this course

2
00:00:02.003 --> 00:00:04.008
about the complexity of performance measuring,

3
00:00:04.008 --> 00:00:06.008
monitoring, and reporting.

4
00:00:06.008 --> 00:00:09.004
In response to our opening question,

5
00:00:09.004 --> 00:00:11.008
how does your application perform?

6
00:00:11.008 --> 00:00:13.006
We have learned many technical skills

7
00:00:13.006 --> 00:00:16.000
that are essential to a spring developer

8
00:00:16.000 --> 00:00:18.004
in mastering this aspect of our work.

9
00:00:18.004 --> 00:00:19.002
In this lesson,

10
00:00:19.002 --> 00:00:21.009
we will talk about how to translate those skills

11
00:00:21.009 --> 00:00:23.002
into action,

12
00:00:23.002 --> 00:00:25.004
making performance work a practical part

13
00:00:25.004 --> 00:00:28.002
of your everyday development workflow.

14
00:00:28.002 --> 00:00:31.001
When you and your team are committed to generating

15
00:00:31.001 --> 00:00:34.007
and maintaining a living compilation of metrics

16
00:00:34.007 --> 00:00:37.009
that are specific and useful to your application,

17
00:00:37.009 --> 00:00:40.004
then you have some excellent advantages.

18
00:00:40.004 --> 00:00:44.002
You can capture impactful decisions and decision trees.

19
00:00:44.002 --> 00:00:47.003
Then you can surface the impacts of those decisions

20
00:00:47.003 --> 00:00:50.007
to your performance, showing trends over time.

21
00:00:50.007 --> 00:00:54.001
It can lead you to informed conversations about performance

22
00:00:54.001 --> 00:00:56.006
over the life cycle of your application.

23
00:00:56.006 --> 00:00:58.000
Okay, that's great.

24
00:00:58.000 --> 00:01:00.003
But it's actually one of the hardest parts of this work

25
00:01:00.003 --> 00:01:01.007
to narrow down the field

26
00:01:01.007 --> 00:01:03.008
of possible things you can measure,

27
00:01:03.008 --> 00:01:06.006
to things that are useful and relevant for you to measure.

28
00:01:06.006 --> 00:01:07.008
This lesson will walk you through

29
00:01:07.008 --> 00:01:11.005
some of the steps you can take alone or with your team,

30
00:01:11.005 --> 00:01:13.004
in order to do this.

31
00:01:13.004 --> 00:01:14.007
Step one.

32
00:01:14.007 --> 00:01:18.008
If you haven't already, describe your application in words,

33
00:01:18.008 --> 00:01:21.001
and also as a component diagram.

34
00:01:21.001 --> 00:01:23.002
Given the pace of development these days,

35
00:01:23.002 --> 00:01:26.006
and the demands to roll out features as quickly as possible,

36
00:01:26.006 --> 00:01:28.007
often these system diagrams are missing

37
00:01:28.007 --> 00:01:30.006
or have fallen out of date.

38
00:01:30.006 --> 00:01:34.008
Find them and update them, or create them as necessary.

39
00:01:34.008 --> 00:01:35.007
Then you are prepared

40
00:01:35.007 --> 00:01:38.008
to identify the essential performance impacting parts

41
00:01:38.008 --> 00:01:39.008
of your system.

42
00:01:39.008 --> 00:01:41.000
Once that step is done,

43
00:01:41.000 --> 00:01:44.006
I suggest you break out your metrics into two categories,

44
00:01:44.006 --> 00:01:48.005
JVM metrics, and connected components.

45
00:01:48.005 --> 00:01:50.008
This is where the specifics of your spring application

46
00:01:50.008 --> 00:01:52.008
become very relevant,

47
00:01:52.008 --> 00:01:55.000
because the next step is to start describing

48
00:01:55.000 --> 00:01:57.007
the loads under which you need to operate.

49
00:01:57.007 --> 00:02:00.001
If these conversations have not yet taken place

50
00:02:00.001 --> 00:02:02.008
with your stakeholders in an official way,

51
00:02:02.008 --> 00:02:04.005
make some good guesses.

52
00:02:04.005 --> 00:02:08.000
Don't let this lack of direction or information stop you

53
00:02:08.000 --> 00:02:11.002
from taking the first steps to organizing your profile.

54
00:02:11.002 --> 00:02:15.001
Once you have identified some reasonable loads

55
00:02:15.001 --> 00:02:18.000
and identified the best way to run some tests,

56
00:02:18.000 --> 00:02:20.003
which is outside the scope of this course,

57
00:02:20.003 --> 00:02:23.003
then capture a baseline set of metrics.

58
00:02:23.003 --> 00:02:25.004
Basic metrics are okay to start with.

59
00:02:25.004 --> 00:02:28.005
In this example, we took a baseline load test,

60
00:02:28.005 --> 00:02:29.007
10 concurrent threads,

61
00:02:29.007 --> 00:02:33.002
calculating prime numbers to 10,000,

62
00:02:33.002 --> 00:02:37.000
and snagged a screenshot of JVM performance,

63
00:02:37.000 --> 00:02:41.007
JVM memory, CPU performance,

64
00:02:41.007 --> 00:02:45.008
and also key indicators of our database and service calls,

65
00:02:45.008 --> 00:02:47.007
and transaction metrics.

66
00:02:47.007 --> 00:02:49.005
Having assembled this much,

67
00:02:49.005 --> 00:02:52.000
then we can identify and communicate areas

68
00:02:52.000 --> 00:02:55.008
in need of attention, such as our memory issues,

69
00:02:55.008 --> 00:02:57.007
or we can expand our test scenarios

70
00:02:57.007 --> 00:03:00.006
to cover a wider range of conditions.

71
00:03:00.006 --> 00:03:03.009
The main point here is to start simple and go from there.

72
00:03:03.009 --> 00:03:06.006
There is a template document for you to start with

73
00:03:06.006 --> 00:03:08.006
in the repository,

74
00:03:08.006 --> 00:03:10.008
at the root of the repository called,

75
00:03:10.008 --> 00:03:13.006
application performance profile template.

76
00:03:13.006 --> 00:03:17.000
This document breaks down this process into manageable steps

77
00:03:17.000 --> 00:03:18.000
to help you assemble

78
00:03:18.000 --> 00:03:21.002
your living performance profile documentation.

79
00:03:21.002 --> 00:03:24.008
You will find it in Libra Office and also Word formats.

80
00:03:24.008 --> 00:03:27.004
Now that you have the technical skills in place,

81
00:03:27.004 --> 00:03:29.003
I hope you use these resources

82
00:03:29.003 --> 00:03:31.007
to begin the transition in your workflow

83
00:03:31.007 --> 00:03:33.000
to make performance tuning

84
00:03:33.000 --> 00:03:36.000
part of your everyday spring development life.

