WEBVTT
1
00:00:00.001 --> 00:00:05.006
(upbeat music)

2
00:00:05.006 --> 00:00:06.005
- [Instructor] Let us now solve

3
00:00:06.005 --> 00:00:09.001
our JVM Performance Challenge together.

4
00:00:09.001 --> 00:00:11.007
As a reminder, you can see the details of this challenge

5
00:00:11.007 --> 00:00:13.009
in the repository read me file,

6
00:00:13.009 --> 00:00:16.008
in a file called Challenge-JVM.

7
00:00:16.008 --> 00:00:19.006
So the first thing we want to do to solve this problem

8
00:00:19.006 --> 00:00:22.008
is set our DemoClientApplication

9
00:00:22.008 --> 00:00:25.006
into the correct modality for running.

10
00:00:25.006 --> 00:00:27.000
We have a special settings

11
00:00:27.000 --> 00:00:30.008
here in application properties file

12
00:00:30.008 --> 00:00:33.001
called challenge-jvm.

13
00:00:33.001 --> 00:00:37.009
Make sure your demo.mode property is set to that value.

14
00:00:37.009 --> 00:00:40.005
The second thing we want to do is we want to edit

15
00:00:40.005 --> 00:00:44.009
our runtime configurations for our application

16
00:00:44.009 --> 00:00:45.007
in our IDE.

17
00:00:45.007 --> 00:00:48.003
In my case, we're using IntelliJ.

18
00:00:48.003 --> 00:00:49.006
So what we want to do here

19
00:00:49.006 --> 00:00:53.000
is we're going to set a maximum heap size

20
00:00:53.000 --> 00:00:54.008
and a minimum heap size

21
00:00:54.008 --> 00:00:57.006
using the Java runtime parameters,

22
00:00:57.006 --> 00:01:07.001
- Xmx for max and -XMs for a minimum heap size.

23
00:01:07.001 --> 00:01:09.001
We're just setting them to be the same.

24
00:01:09.001 --> 00:01:11.009
In our case, this makes it a little simpler to watch and see

25
00:01:11.009 --> 00:01:12.008
what's going on.

26
00:01:12.008 --> 00:01:17.003
I have also edit a couple other parameters to my runtime,

27
00:01:17.003 --> 00:01:21.002
which is instructing Java to dump a heap dump

28
00:01:21.002 --> 00:01:24.000
in the case that we hit an OutOfMemoryError.

29
00:01:24.000 --> 00:01:26.000
Since I know that this is going to occur,

30
00:01:26.000 --> 00:01:27.002
that's a convenience for me

31
00:01:27.002 --> 00:01:31.003
and I can use the HeapDumpOutOfMemoryError

32
00:01:31.003 --> 00:01:34.008
in order to force that behavior by the JVM.

33
00:01:34.008 --> 00:01:36.006
So let's apply these things.

34
00:01:36.006 --> 00:01:41.001
And with these setups being done,

35
00:01:41.001 --> 00:01:46.001
and I have an unrecognized option here.

36
00:01:46.001 --> 00:01:51.006
Doesn't like X Java, lowercase ms,

37
00:01:51.006 --> 00:01:55.008
Xms we'll solve that problem.

38
00:01:55.008 --> 00:02:00.002
Okay, let's give this another run.

39
00:02:00.002 --> 00:02:01.004
And we're often running.

40
00:02:01.004 --> 00:02:06.000
So now let us go over to a view of VisualVM.

41
00:02:06.000 --> 00:02:09.007
Let's pull up our monitor of our running application,

42
00:02:09.007 --> 00:02:12.001
give this a few moments

43
00:02:12.001 --> 00:02:14.008
and we are going to run out of heap size

44
00:02:14.008 --> 00:02:18.008
right here in the monitor on the upper right table.

45
00:02:18.008 --> 00:02:21.007
We can keep track of our heap and watch what's happening.

46
00:02:21.007 --> 00:02:24.002
As our CPU activity goes up,

47
00:02:24.002 --> 00:02:26.008
that means our threads are doing things.

48
00:02:26.008 --> 00:02:32.005
And we're going to run out of heap space in just a minute.

49
00:02:32.005 --> 00:02:34.005
There we go, okay.

50
00:02:34.005 --> 00:02:37.004
I don't even like to see this when I'm doing it on purpose,

51
00:02:37.004 --> 00:02:38.004
but there we got our error.

52
00:02:38.004 --> 00:02:41.006
So let's go ahead and stop our application

53
00:02:41.006 --> 00:02:43.001
and let's figure out what to do now.

54
00:02:43.001 --> 00:02:45.006
Okay, what we can do here,

55
00:02:45.006 --> 00:02:47.006
there's two things that we can do.

56
00:02:47.006 --> 00:02:50.002
Over here in VisualVM,

57
00:02:50.002 --> 00:02:52.004
we would like to be able to snag a heap dump,

58
00:02:52.004 --> 00:02:55.000
and sometimes you can get a hold of it in time,

59
00:02:55.000 --> 00:02:56.004
but in this case we cannot.

60
00:02:56.004 --> 00:03:00.000
So instead, we're going to open the heap dump

61
00:03:00.000 --> 00:03:03.008
that we asked our Java VM to throw,

62
00:03:03.008 --> 00:03:08.001
and that will look like this one right here.

63
00:03:08.001 --> 00:03:09.001
Let's open this dump,

64
00:03:09.001 --> 00:03:11.004
and this is going to show us everything we need to know

65
00:03:11.004 --> 00:03:16.006
to trace back through the memory and to solve it.

66
00:03:16.006 --> 00:03:19.003
So you'll know that this heap dumpe from the JVM

67
00:03:19.003 --> 00:03:20.007
tells us actually,

68
00:03:20.007 --> 00:03:24.001
which exact thread was the final straw

69
00:03:24.001 --> 00:03:27.005
that caused us to run out of heat memory.

70
00:03:27.005 --> 00:03:30.004
Let's have a look at our object detail here.

71
00:03:30.004 --> 00:03:32.007
Now, right here at the top,

72
00:03:32.007 --> 00:03:36.009
glaringly we can see that we have a bunch of doubles here,

73
00:03:36.009 --> 00:03:39.001
two and a half million of them

74
00:03:39.001 --> 00:03:42.009
taking 53% of our memory size.

75
00:03:42.009 --> 00:03:44.005
Immediately, that's going to tell you

76
00:03:44.005 --> 00:03:47.005
that very likely this is your culprit,

77
00:03:47.005 --> 00:03:51.004
and this is the neat thing you can do here with a heat dump.

78
00:03:51.004 --> 00:03:55.003
We can drill into one of these instances of double

79
00:03:55.003 --> 00:04:00.001
under the references section of the entry.

80
00:04:00.001 --> 00:04:03.008
And we can look and find exactly where our reference

81
00:04:03.008 --> 00:04:06.007
to this object is occurring.

82
00:04:06.007 --> 00:04:08.007
This is the smoking gun that will tell us

83
00:04:08.007 --> 00:04:12.009
that we can go now into here into our source code

84
00:04:12.009 --> 00:04:15.007
and actually track down the problem.

85
00:04:15.007 --> 00:04:18.002
So I will tell you exactly what's happening here.

86
00:04:18.002 --> 00:04:23.005
We have a reference to a heapleaker object.

87
00:04:23.005 --> 00:04:26.000
We have a condition here when this is true,

88
00:04:26.000 --> 00:04:27.009
which it is in this case,

89
00:04:27.009 --> 00:04:33.000
we're initializing a big static value in that object.

90
00:04:33.000 --> 00:04:34.004
And then we're immediately setting

91
00:04:34.004 --> 00:04:37.004
our local resource to null.

92
00:04:37.004 --> 00:04:39.008
So normally you would think that this object

93
00:04:39.008 --> 00:04:41.005
will get garbage collected,

94
00:04:41.005 --> 00:04:45.007
however, because this list here is static,

95
00:04:45.007 --> 00:04:49.003
that static memory stays on the heap forever

96
00:04:49.003 --> 00:04:52.003
even after we dereference the object that holds it.

97
00:04:52.003 --> 00:04:53.006
So all we're going to do here

98
00:04:53.006 --> 00:04:57.001
is we're going to take away that static modifier

99
00:04:57.001 --> 00:04:59.009
on this object,

100
00:04:59.009 --> 00:05:03.003
and then when that happens,

101
00:05:03.003 --> 00:05:06.003
even though we initialize this list,

102
00:05:06.003 --> 00:05:08.002
which will no longer be static,

103
00:05:08.002 --> 00:05:10.002
once we nullify the reference,

104
00:05:10.002 --> 00:05:12.009
then we will be able to free that memory up.

105
00:05:12.009 --> 00:05:15.004
And then we will not in our case run out of memory.

106
00:05:15.004 --> 00:05:17.005
So let's run this thing again

107
00:05:17.005 --> 00:05:23.001
and see if we get a changed behavior.

108
00:05:23.001 --> 00:05:27.005
Okay, now we did jump up high on our memory usage,

109
00:05:27.005 --> 00:05:31.006
but since we no longer have that references static,

110
00:05:31.006 --> 00:05:35.002
immediately, when we dereference that instance,

111
00:05:35.002 --> 00:05:37.006
we freed our memory back upon the heap,

112
00:05:37.006 --> 00:05:40.001
and now we have heap space available for our threads

113
00:05:40.001 --> 00:05:42.008
to do all of the things that they're going to do.

114
00:05:42.008 --> 00:05:45.007
So that's an example of a heap leak,

115
00:05:45.007 --> 00:05:47.002
how to solve it,

116
00:05:47.002 --> 00:05:48.009
how to navigate your heapdump

117
00:05:48.009 --> 00:05:50.009
in order to isolate a problem,

118
00:05:50.009 --> 00:05:54.000
and that solves our challenge together, thank you.

