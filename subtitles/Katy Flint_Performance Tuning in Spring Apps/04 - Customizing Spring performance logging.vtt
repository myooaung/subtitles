WEBVTT
1
00:00:00.005 --> 00:00:02.002
- [Instructor] Let us continue our studies

2
00:00:02.002 --> 00:00:04.002
of spring performance monitoring

3
00:00:04.002 --> 00:00:08.005
by learning about the performance monitor interceptor.

4
00:00:08.005 --> 00:00:12.004
Performance monitor interceptor provides easy to configure

5
00:00:12.004 --> 00:00:15.002
targeted performance logging.

6
00:00:15.002 --> 00:00:19.002
It is an aspect oriented functionality.

7
00:00:19.002 --> 00:00:21.009
This particular class lives within the org dot spring

8
00:00:21.009 --> 00:00:26.005
framework dot AOP dot interceptor package.

9
00:00:26.005 --> 00:00:29.002
Performance monitor interceptor integrates seamlessly

10
00:00:29.002 --> 00:00:33.006
with Log4j or your existing logging infrastructure,

11
00:00:33.006 --> 00:00:36.009
in order to track specific performance concerns

12
00:00:36.009 --> 00:00:39.001
that are unique to your application.

13
00:00:39.001 --> 00:00:41.007
I find it useful when there's a method

14
00:00:41.007 --> 00:00:43.007
or a service call that I have some reason

15
00:00:43.007 --> 00:00:44.006
to be concerned about,

16
00:00:44.006 --> 00:00:46.007
or I just want to track it carefully.

17
00:00:46.007 --> 00:00:50.005
This is a really good time to invoke the functionality

18
00:00:50.005 --> 00:00:52.005
of the performance monitor interceptor.

19
00:00:52.005 --> 00:00:55.005
As I mentioned, it is an aspect oriented solution.

20
00:00:55.005 --> 00:00:59.009
And so let's go over three very high level terms

21
00:00:59.009 --> 00:01:03.004
that I might be referring to as I talk through the solution.

22
00:01:03.004 --> 00:01:07.002
Advice is a bit of externalized behavior.

23
00:01:07.002 --> 00:01:09.004
It can be just as simple as that in your mind,

24
00:01:09.004 --> 00:01:11.003
a bit of externalized behavior,

25
00:01:11.003 --> 00:01:15.003
a pointcut is an expression that describes points

26
00:01:15.003 --> 00:01:17.008
in the execution of your application,

27
00:01:17.008 --> 00:01:20.005
where you want advice to be applied.

28
00:01:20.005 --> 00:01:24.008
So where you want that externalized behavior to be invoked.

29
00:01:24.008 --> 00:01:27.008
And an aspect is a class that declares advices

30
00:01:27.008 --> 00:01:29.007
and pointcuts.

31
00:01:29.007 --> 00:01:31.000
Let us jump in.

32
00:01:31.000 --> 00:01:33.002
And what we're going to do is we're going to make

33
00:01:33.002 --> 00:01:35.006
an aspect class.

34
00:01:35.006 --> 00:01:37.001
Now, sometimes in these lessons,

35
00:01:37.001 --> 00:01:39.007
I'd like to do a lot of typing and talk you through

36
00:01:39.007 --> 00:01:41.000
what I'm doing as I build it.

37
00:01:41.000 --> 00:01:45.009
I found in this one that to have this pre-configured

38
00:01:45.009 --> 00:01:48.001
makes it a little easier to talk through it

39
00:01:48.001 --> 00:01:50.007
because it's a bit of a jigsaw puzzle in terms of how

40
00:01:50.007 --> 00:01:52.007
this all fits together.

41
00:01:52.007 --> 00:01:54.003
Let's just start at the beginning.

42
00:01:54.003 --> 00:01:56.000
We're making a class here.

43
00:01:56.000 --> 00:01:59.000
As I mentioned before, it's an aspect class,

44
00:01:59.000 --> 00:02:02.003
that means it's declaring pointcuts and advices

45
00:02:02.003 --> 00:02:04.007
and configuring the general behavior

46
00:02:04.007 --> 00:02:06.009
of our AOP functionality.

47
00:02:06.009 --> 00:02:12.002
Okay, so this is our class in our package, a custom class.

48
00:02:12.002 --> 00:02:15.005
Now what we want to do in this class is three things,

49
00:02:15.005 --> 00:02:17.006
we first wanted to declare a bean.

50
00:02:17.006 --> 00:02:21.002
The bean that we're getting ahold of here is object type

51
00:02:21.002 --> 00:02:23.005
performance monitor interceptor.

52
00:02:23.005 --> 00:02:26.002
This is the subject of the lesson within this larger

53
00:02:26.002 --> 00:02:28.004
spring framework package.

54
00:02:28.004 --> 00:02:31.003
This method here, which we could call anything,

55
00:02:31.003 --> 00:02:35.000
I'm calling it invocation interceptor,

56
00:02:35.000 --> 00:02:37.000
is going to return an instance of that performance

57
00:02:37.000 --> 00:02:38.005
monitor interceptor.

58
00:02:38.005 --> 00:02:40.007
Okay, we have also declared in here,

59
00:02:40.007 --> 00:02:43.003
a method called monitor.

60
00:02:43.003 --> 00:02:45.001
Again, this method name isn't special.

61
00:02:45.001 --> 00:02:48.000
We could call it anything, monitors kind of customary,

62
00:02:48.000 --> 00:02:50.000
and it works for me.

63
00:02:50.000 --> 00:02:53.001
So we've called this method and we've attached to it

64
00:02:53.001 --> 00:02:55.001
a pointcut description.

65
00:02:55.001 --> 00:02:59.001
This pointcut description corresponds to all of the entry

66
00:02:59.001 --> 00:03:02.004
points in our controller.

67
00:03:02.004 --> 00:03:05.003
Our demo controller is the thing that catches

68
00:03:05.003 --> 00:03:07.007
browser activity when the user entered a path

69
00:03:07.007 --> 00:03:08.007
in the browser,

70
00:03:08.007 --> 00:03:11.001
it resolves to these different methods.

71
00:03:11.001 --> 00:03:14.008
So we've got index method, error, monitor, query,

72
00:03:14.008 --> 00:03:18.009
all of these end points here, quoter.

73
00:03:18.009 --> 00:03:22.004
They are all being picked up here in this expression

74
00:03:22.004 --> 00:03:24.005
demo controller dot star,

75
00:03:24.005 --> 00:03:27.002
meaning every public method that returns a string.

76
00:03:27.002 --> 00:03:30.006
And finally, we have an adviser.

77
00:03:30.006 --> 00:03:32.007
Remember an adviser is the thing that combines

78
00:03:32.007 --> 00:03:35.007
our pointcuts with our advices.

79
00:03:35.007 --> 00:03:39.004
So without getting too far into the weeds here,

80
00:03:39.004 --> 00:03:41.006
what we're doing here in this performance monitor

81
00:03:41.006 --> 00:03:45.001
advisor method is we're putting together

82
00:03:45.001 --> 00:03:48.001
this monitor method that we declared up here

83
00:03:48.001 --> 00:03:51.004
with this invocation interceptor method,

84
00:03:51.004 --> 00:03:53.003
which returns the spring class

85
00:03:53.003 --> 00:03:55.006
performance monitor interceptor.

86
00:03:55.006 --> 00:03:59.008
Embedded in the spring class is the method that actually

87
00:03:59.008 --> 00:04:01.000
we're interested in running,

88
00:04:01.000 --> 00:04:03.006
which is called invoke under tracing.

89
00:04:03.006 --> 00:04:05.002
So finally,

90
00:04:05.002 --> 00:04:09.001
by pairing our demo controller entry points

91
00:04:09.001 --> 00:04:11.006
to our monitor method,

92
00:04:11.006 --> 00:04:14.006
which again it gets linked up with this

93
00:04:14.006 --> 00:04:17.000
performance monitor interceptor.

94
00:04:17.000 --> 00:04:19.009
We will cause things to get put out into the logs.

95
00:04:19.009 --> 00:04:20.008
Specifically,

96
00:04:20.008 --> 00:04:24.002
we're going to get some kind of generic timings.

97
00:04:24.002 --> 00:04:25.004
All right,

98
00:04:25.004 --> 00:04:28.001
let's start this up and let me show you what we've got here.

99
00:04:28.001 --> 00:04:29.007
You started successfully, okay.

100
00:04:29.007 --> 00:04:33.005
Nothing's happening interesting until we invoke

101
00:04:33.005 --> 00:04:36.006
some of these end points in our demo app,

102
00:04:36.006 --> 00:04:37.005
you can see in here,

103
00:04:37.005 --> 00:04:40.009
some of those logging's getting fired.

104
00:04:40.009 --> 00:04:44.007
Let's say evoke a few more just to prove the point.

105
00:04:44.007 --> 00:04:48.004
So every time we're invoking an end point now,

106
00:04:48.004 --> 00:04:50.008
the performance monitor interceptor is kicking

107
00:04:50.008 --> 00:04:53.000
out an instance of a stopwatch,

108
00:04:53.000 --> 00:04:55.009
which is a Java utility class.

109
00:04:55.009 --> 00:04:58.009
And the stopwatch is giving us simply the running time

110
00:04:58.009 --> 00:05:01.009
for the method that we invoked in nanoseconds,

111
00:05:01.009 --> 00:05:05.006
which is really hard to read.

112
00:05:05.006 --> 00:05:10.008
And I believe a nanosecond in this case is .15 seconds.

113
00:05:10.008 --> 00:05:12.004
So these are very, very fast methods.

114
00:05:12.004 --> 00:05:13.008
All right, so that's good.

115
00:05:13.008 --> 00:05:15.005
But now this is what gets interesting

116
00:05:15.005 --> 00:05:17.008
is when we can customize this behavior.

117
00:05:17.008 --> 00:05:20.006
Here is where we will do a little typing.

118
00:05:20.006 --> 00:05:21.009
All right,

119
00:05:21.009 --> 00:05:25.000
we can make a custom performance monitor interceptor.

120
00:05:25.000 --> 00:05:27.004
The key things here in this class, again,

121
00:05:27.004 --> 00:05:29.006
this is, we call this class anything we want to,

122
00:05:29.006 --> 00:05:33.001
but the point is it has to extend this abstract monitoring

123
00:05:33.001 --> 00:05:36.000
interceptor, which again is part of the spring framework

124
00:05:36.000 --> 00:05:37.002
AOP package.

125
00:05:37.002 --> 00:05:41.002
And this class as an extension of this interceptor class

126
00:05:41.002 --> 00:05:45.000
can have any kind of attributes that we want to have.

127
00:05:45.000 --> 00:05:47.006
We're going to declare a couple of longs

128
00:05:47.006 --> 00:05:50.001
and this invoke under trace method

129
00:05:50.001 --> 00:05:51.009
is the one I mentioned before.

130
00:05:51.009 --> 00:05:53.008
This is the method word that we're going to override

131
00:05:53.008 --> 00:05:55.006
to get our custom behavior.

132
00:05:55.006 --> 00:05:56.004
So again,

133
00:05:56.004 --> 00:05:58.005
I haven't typed out all of the functionality

134
00:05:58.005 --> 00:06:00.003
inside invoke under trace,

135
00:06:00.003 --> 00:06:03.006
but what we're doing is we're capturing some additional

136
00:06:03.006 --> 00:06:08.005
metrics about the method that is getting traced

137
00:06:08.005 --> 00:06:11.002
and how we make that happen is what we're going to do now.

138
00:06:11.002 --> 00:06:13.006
So this is where we are going to type,

139
00:06:13.006 --> 00:06:16.001
because I think it might be useful to teach.

140
00:06:16.001 --> 00:06:19.001
So back here in our performance monitor configuration class,

141
00:06:19.001 --> 00:06:23.003
remember this is our own class within our own package.

142
00:06:23.003 --> 00:06:24.009
And this is where we're configuring

143
00:06:24.009 --> 00:06:26.008
our aspect oriented behaviors.

144
00:06:26.008 --> 00:06:29.000
So we're going to declare another bean and it's going to be

145
00:06:29.000 --> 00:06:30.006
a lot like this one,

146
00:06:30.006 --> 00:06:33.007
except this one's going to be our custom

147
00:06:33.007 --> 00:06:38.006
performance monitor interceptor, which is in our own domain.

148
00:06:38.006 --> 00:06:42.004
We can't duplicate.

149
00:06:42.004 --> 00:06:44.002
Let's call it custom interceptor,

150
00:06:44.002 --> 00:06:45.005
keep it short.

151
00:06:45.005 --> 00:06:50.005
And then we're going to return an instance of our custom.

152
00:06:50.005 --> 00:06:53.006
Okay. So it's analogous to what we did before.

153
00:06:53.006 --> 00:06:54.005
Also,

154
00:06:54.005 --> 00:06:56.001
we're going to do another analogous thing

155
00:06:56.001 --> 00:07:00.002
is declare this new public method.

156
00:07:00.002 --> 00:07:03.000
We have to give it a unique name.

157
00:07:03.000 --> 00:07:05.007
Let's call it custom monitor.

158
00:07:05.007 --> 00:07:06.005
And now,

159
00:07:06.005 --> 00:07:09.001
instead of pairing this custom monitor method

160
00:07:09.001 --> 00:07:15.007
to our demo controllers, let's pair it with something else.

161
00:07:15.007 --> 00:07:21.009
Let's pair it with class in our domain package,

162
00:07:21.009 --> 00:07:24.009
this CPU loader class,

163
00:07:24.009 --> 00:07:29.007
and that class has a method called,

164
00:07:29.007 --> 00:07:31.005
let's pop in there real quick.

165
00:07:31.005 --> 00:07:36.001
Class has a method called expensive calculation.

166
00:07:36.001 --> 00:07:41.003
And that's the one we want to put a trace on.

167
00:07:41.003 --> 00:07:45.005
CPU loader expensive calculation.

168
00:07:45.005 --> 00:07:52.000
And I believe was it a string that was returned?

169
00:07:52.000 --> 00:07:55.003
Yes.

170
00:07:55.003 --> 00:07:56.005
Okay.

171
00:07:56.005 --> 00:07:58.007
So now we have a pointcut that describes our custom class

172
00:07:58.007 --> 00:08:02.000
within calculation that we want to track.

173
00:08:02.000 --> 00:08:08.009
And then finally, we need to make our advisor.

174
00:08:08.009 --> 00:08:10.003
We can't name it the same.

175
00:08:10.003 --> 00:08:11.003
We're going to call this one

176
00:08:11.003 --> 00:08:15.005
our custom performance monitor advisor.

177
00:08:15.005 --> 00:08:17.009
Going to make a generic pointcut.

178
00:08:17.009 --> 00:08:20.001
And this expression we're going to set here

179
00:08:20.001 --> 00:08:25.001
to this custom monitor method.

180
00:08:25.001 --> 00:08:27.009
And we don't want invocation interceptor.

181
00:08:27.009 --> 00:08:33.005
We want our custom interceptor.

182
00:08:33.005 --> 00:08:35.004
This really is a bit of spaghetti

183
00:08:35.004 --> 00:08:37.001
and it's a bit of a jigsaw puzzle.

184
00:08:37.001 --> 00:08:40.002
Let's go through what's happening one more time.

185
00:08:40.002 --> 00:08:44.000
We have a custom method inside of our aspect class.

186
00:08:44.000 --> 00:08:46.000
We're pairing by means at this point,

187
00:08:46.000 --> 00:08:49.005
cut expression or custom monitor method

188
00:08:49.005 --> 00:08:52.007
with our custom interceptor.

189
00:08:52.007 --> 00:08:58.000
Our custom interceptor when it does it's interception,

190
00:08:58.000 --> 00:09:01.002
it's going to run our custom logic here in this

191
00:09:01.002 --> 00:09:03.001
invoke under trace method.

192
00:09:03.001 --> 00:09:05.009
And then finally this custom monitor method

193
00:09:05.009 --> 00:09:09.004
is paired with our domain class CPU loader,

194
00:09:09.004 --> 00:09:12.007
this specific method called expensive calculation.

195
00:09:12.007 --> 00:09:18.005
Okay, now hopefully we'll start without error.

196
00:09:18.005 --> 00:09:19.008
Good.

197
00:09:19.008 --> 00:09:22.000
Now this time let's hit some of the same end points

198
00:09:22.000 --> 00:09:24.003
that we did before.

199
00:09:24.003 --> 00:09:27.009
And we also have this monitor endpoint

200
00:09:27.009 --> 00:09:34.002
that I happen to know does hit into this monitor class

201
00:09:34.002 --> 00:09:38.002
that we're trying to look and what we have here is behavior

202
00:09:38.002 --> 00:09:39.003
just as we had before,

203
00:09:39.003 --> 00:09:41.001
because we didn't take that away.

204
00:09:41.001 --> 00:09:44.000
All of our stopwatch methods,

205
00:09:44.000 --> 00:09:46.009
the default performance monitor interceptor is giving us.

206
00:09:46.009 --> 00:09:50.008
In addition, though, when we hit the CPU loader method,

207
00:09:50.008 --> 00:09:53.001
we got some additional statistics.

208
00:09:53.001 --> 00:09:58.006
We got a warning here in the logger warn category

209
00:09:58.006 --> 00:10:00.002
that we had a long running method,

210
00:10:00.002 --> 00:10:01.006
ran longer than 10 seconds.

211
00:10:01.006 --> 00:10:02.005
And we've,

212
00:10:02.005 --> 00:10:03.009
we're keeping track of how many times

213
00:10:03.009 --> 00:10:05.008
we get that warning here.

214
00:10:05.008 --> 00:10:09.000
Let's make it again.

215
00:10:09.000 --> 00:10:11.004
So now since our application has been running,

216
00:10:11.004 --> 00:10:13.007
we've gotten this particular warning twice.

217
00:10:13.007 --> 00:10:16.006
So this is just a super simple example of a method

218
00:10:16.006 --> 00:10:18.000
that I was concerned about.

219
00:10:18.000 --> 00:10:20.004
And we can put some additional logging around it

220
00:10:20.004 --> 00:10:23.002
to keep us informed about what's happening there.

221
00:10:23.002 --> 00:10:26.003
That's the lesson about performance monitor interceptor,

222
00:10:26.003 --> 00:10:28.001
and I hope it's clear to you how this works

223
00:10:28.001 --> 00:10:31.000
and how you might be able to use it in your applications.

