WEBVTT
1
00:00:00.005 --> 00:00:03.003
- [Instructor] How does your application perform?

2
00:00:03.003 --> 00:00:08.009
It is such a simple question and an intuitive concept.

3
00:00:08.009 --> 00:00:11.008
So why is it such a challenging aspect of our work

4
00:00:11.008 --> 00:00:13.004
as Spring developers?

5
00:00:13.004 --> 00:00:15.005
The key to effective performance tuning

6
00:00:15.005 --> 00:00:18.006
in a Spring-based application is to understand

7
00:00:18.006 --> 00:00:22.000
the underlying complexity of this question.

8
00:00:22.000 --> 00:00:24.003
In this video, we start to deconstruct it,

9
00:00:24.003 --> 00:00:26.000
to break it down so that we can see

10
00:00:26.000 --> 00:00:29.005
why it is indeed such a challenge.

11
00:00:29.005 --> 00:00:32.001
This is the only way to answer it successfully.

12
00:00:32.001 --> 00:00:34.008
It is only with this type of understanding

13
00:00:34.008 --> 00:00:36.008
that you can take systematic steps

14
00:00:36.008 --> 00:00:41.003
to improve your skills and to improve your application.

15
00:00:41.003 --> 00:00:43.008
So that eventually this question,

16
00:00:43.008 --> 00:00:45.009
"How does your application perform?"

17
00:00:45.009 --> 00:00:48.009
is one that you are prepared to answer confidently

18
00:00:48.009 --> 00:00:51.008
and accurately whenever it might come up.

19
00:00:51.008 --> 00:00:53.005
The first thing to understand

20
00:00:53.005 --> 00:00:55.005
is that as a Spring developer,

21
00:00:55.005 --> 00:00:58.007
it is extremely likely that you have direct influence

22
00:00:58.007 --> 00:01:02.003
only over a small portion of your application.

23
00:01:02.003 --> 00:01:04.002
The green parts of this diagram

24
00:01:04.002 --> 00:01:06.005
show the runtime environments

25
00:01:06.005 --> 00:01:09.007
that a typical Spring developer manages.

26
00:01:09.007 --> 00:01:12.008
You'll likely spend a good portion of your day

27
00:01:12.008 --> 00:01:16.004
inside the Java components that make up your project.

28
00:01:16.004 --> 00:01:18.009
One way that you can increase your fluency

29
00:01:18.009 --> 00:01:20.006
is to understand how to manage

30
00:01:20.006 --> 00:01:23.009
and measure the runtime JVM performance

31
00:01:23.009 --> 00:01:26.001
of your Java Spring project.

32
00:01:26.001 --> 00:01:28.009
Remember, every Spring-based application

33
00:01:28.009 --> 00:01:31.000
is a Java application.

34
00:01:31.000 --> 00:01:33.000
So it is important for a Spring developer

35
00:01:33.000 --> 00:01:36.008
to understand the basics of how JVM performance works

36
00:01:36.008 --> 00:01:41.000
and how the Spring framework may or may not impact

37
00:01:41.000 --> 00:01:43.005
the performance of the JVM.

38
00:01:43.005 --> 00:01:45.007
A proficiency with plain Vanilla,

39
00:01:45.007 --> 00:01:48.009
JVM profiling, and runtime parameters

40
00:01:48.009 --> 00:01:52.001
is an indispensable and often overlooked part

41
00:01:52.001 --> 00:01:54.004
of a Spring developer's toolkit.

42
00:01:54.004 --> 00:01:58.002
Spring also provides internal performance reporting metrics

43
00:01:58.002 --> 00:01:59.007
that allow a developer to gain

44
00:01:59.007 --> 00:02:04.002
more Spring specific insights into their application.

45
00:02:04.002 --> 00:02:05.008
All of these topics we will address

46
00:02:05.008 --> 00:02:08.002
in other portions of this course.

47
00:02:08.002 --> 00:02:11.000
Now the large majority of Spring-based applications

48
00:02:11.000 --> 00:02:14.008
are also composed of multiple connected systems

49
00:02:14.008 --> 00:02:18.006
whose internal performance you have no control over,

50
00:02:18.006 --> 00:02:22.000
or likely even visibility into.

51
00:02:22.000 --> 00:02:23.009
This is by design really,

52
00:02:23.009 --> 00:02:28.004
since one strong emphasis of the Spring framework itself

53
00:02:28.004 --> 00:02:33.004
is to facilitate, decouple component interactions.

54
00:02:33.004 --> 00:02:35.009
The green outline parts of our diagram

55
00:02:35.009 --> 00:02:39.007
show elements, such as databases, APIs,

56
00:02:39.007 --> 00:02:41.004
and messaging frameworks,

57
00:02:41.004 --> 00:02:43.007
whose performance you depend on,

58
00:02:43.007 --> 00:02:46.004
must measure and must design toward

59
00:02:46.004 --> 00:02:48.006
in order to make your part of the application

60
00:02:48.006 --> 00:02:50.005
as resilient as possible.

61
00:02:50.005 --> 00:02:54.003
The name of the game here, what you must be able to do,

62
00:02:54.003 --> 00:02:57.002
and what other portions of this course will cover

63
00:02:57.002 --> 00:03:01.000
is to measure and make informed runtime configurations

64
00:03:01.000 --> 00:03:03.007
based on the performance you can anticipate

65
00:03:03.007 --> 00:03:06.001
from the systems that you depend on.

66
00:03:06.001 --> 00:03:09.002
The connecting lines and gray parts of the diagram

67
00:03:09.002 --> 00:03:12.003
illustrate the virtual and physical infrastructure

68
00:03:12.003 --> 00:03:14.006
that your application is deployed on,

69
00:03:14.006 --> 00:03:17.001
and the networks that you communicate over.

70
00:03:17.001 --> 00:03:19.001
Here, again, a Spring developer

71
00:03:19.001 --> 00:03:21.002
often has little to no control

72
00:03:21.002 --> 00:03:23.000
over these parts of the system.

73
00:03:23.000 --> 00:03:24.007
In many enterprise workflows,

74
00:03:24.007 --> 00:03:27.008
a developer's visibility drops off sharply

75
00:03:27.008 --> 00:03:30.002
when it comes to really even knowing much

76
00:03:30.002 --> 00:03:32.001
about the host of your application.

77
00:03:32.001 --> 00:03:33.009
It's true that one of the cheapest

78
00:03:33.009 --> 00:03:36.003
and easiest ways to boost performance

79
00:03:36.003 --> 00:03:38.004
of a Spring application is to boost

80
00:03:38.004 --> 00:03:40.009
the computing resources that host it.

81
00:03:40.009 --> 00:03:45.005
Also, sometimes this is not so easy given the complexity

82
00:03:45.005 --> 00:03:48.001
of shared hosting environments, et cetera.

83
00:03:48.001 --> 00:03:49.007
So when it comes to this part,

84
00:03:49.007 --> 00:03:52.005
the best defense against any deployment situation

85
00:03:52.005 --> 00:03:54.008
is to know what your application needs

86
00:03:54.008 --> 00:03:57.002
in terms of computing resources,

87
00:03:57.002 --> 00:03:58.008
so that you can communicate clearly

88
00:03:58.008 --> 00:04:01.003
to the other teams and decision makers

89
00:04:01.003 --> 00:04:04.000
that are responsible for that part of your system.

90
00:04:04.000 --> 00:04:06.009
Now, this aspect of deployment uncertainty,

91
00:04:06.009 --> 00:04:09.002
taken together with all the other complexities

92
00:04:09.002 --> 00:04:11.005
of a Spring-based application,

93
00:04:11.005 --> 00:04:14.006
point to why an accurate and holistic understanding

94
00:04:14.006 --> 00:04:17.005
of your application's performance profile

95
00:04:17.005 --> 00:04:20.003
is the ultimate goal of any Spring developer.

96
00:04:20.003 --> 00:04:21.008
When you have that information,

97
00:04:21.008 --> 00:04:25.001
you can explain it, you can improve it,

98
00:04:25.001 --> 00:04:27.006
and you can continue to extend the resilience

99
00:04:27.006 --> 00:04:30.008
of your application over its entire life cycle.

100
00:04:30.008 --> 00:04:34.000
A proactive practice of performance profiling

101
00:04:34.000 --> 00:04:35.007
will allow you to meet the challenges

102
00:04:35.007 --> 00:04:39.005
of not only predictable growth and feature extensions,

103
00:04:39.005 --> 00:04:42.003
but also unpredictable stress conditions

104
00:04:42.003 --> 00:04:44.004
or deployment configurations.

105
00:04:44.004 --> 00:04:46.003
As this course progresses,

106
00:04:46.003 --> 00:04:48.002
we are going to build together

107
00:04:48.002 --> 00:04:51.004
practical example of a performance profile.

108
00:04:51.004 --> 00:04:55.005
It is within reach for any Spring developer to understand,

109
00:04:55.005 --> 00:04:57.008
improve, and communicate the performance

110
00:04:57.008 --> 00:04:59.006
of your Spring application.

111
00:04:59.006 --> 00:05:01.008
Now that we have taken this important step

112
00:05:01.008 --> 00:05:04.009
of breaking down the complexity of the problem,

113
00:05:04.009 --> 00:05:06.000
please continue with me

114
00:05:06.000 --> 00:05:09.000
as we start building our Spring performance skills.

