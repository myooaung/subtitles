WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] Aspect oriented programming

2
00:00:02.000 --> 00:00:03.009
is a super interesting topic,

3
00:00:03.009 --> 00:00:05.003
and it gets a lot of attention

4
00:00:05.003 --> 00:00:08.003
with respect to performance concerns.

5
00:00:08.003 --> 00:00:10.004
Let's spend this lesson unpacking

6
00:00:10.004 --> 00:00:12.007
what a spring practitioner needs to know

7
00:00:12.007 --> 00:00:15.005
about AOP and performance.

8
00:00:15.005 --> 00:00:18.008
AOP introduces modularity into systems

9
00:00:18.008 --> 00:00:21.004
by means of the aspect.

10
00:00:21.004 --> 00:00:25.000
In contrast, object oriented programming

11
00:00:25.000 --> 00:00:28.009
creates modularity by means of the object.

12
00:00:28.009 --> 00:00:31.007
AOP modularizes cross cutting concerns

13
00:00:31.007 --> 00:00:34.001
like logging and security,

14
00:00:34.001 --> 00:00:37.005
and this is where the two paradigms compliment one another.

15
00:00:37.005 --> 00:00:40.007
Solid OO design will want a tight encapsulation

16
00:00:40.007 --> 00:00:42.008
of your business logic.

17
00:00:42.008 --> 00:00:46.000
Cross cutting concerns like logging and security

18
00:00:46.000 --> 00:00:49.001
are super important to the functioning of the application,

19
00:00:49.001 --> 00:00:51.009
but they also muddy up good OO design

20
00:00:51.009 --> 00:00:54.007
since these concerns are secondary,

21
00:00:54.007 --> 00:00:57.000
or at least have a very different nature

22
00:00:57.000 --> 00:01:00.007
than the business concerns of your spring application,

23
00:01:00.007 --> 00:01:02.005
so that's why we need it.

24
00:01:02.005 --> 00:01:04.006
The spring framework makes it straightforward

25
00:01:04.006 --> 00:01:08.005
to configure AOP behaviors using annotations,

26
00:01:08.005 --> 00:01:10.008
and as a spring practitioner,

27
00:01:10.008 --> 00:01:13.006
you're likely to be depending on the spring AOP

28
00:01:13.006 --> 00:01:17.000
and or the AspectJ libraries.

29
00:01:17.000 --> 00:01:22.003
An AOP aware system combines native code with aspect code

30
00:01:22.003 --> 00:01:25.004
in order to produce a running application.

31
00:01:25.004 --> 00:01:27.004
This combining is called weaving,

32
00:01:27.004 --> 00:01:29.009
and it can be done in a number of ways.

33
00:01:29.009 --> 00:01:33.002
It can be done at the time you compile your code,

34
00:01:33.002 --> 00:01:35.004
it can be done after you compile your code

35
00:01:35.004 --> 00:01:39.008
with a binary code, or it can be done at runtime.

36
00:01:39.008 --> 00:01:42.002
The details of weaving are very interesting,

37
00:01:42.002 --> 00:01:45.003
and they're also outside the scope of this lesson.

38
00:01:45.003 --> 00:01:48.004
In this lesson, the question we're wondering is,

39
00:01:48.004 --> 00:01:51.005
does all of this weaving introduce enough overhead

40
00:01:51.005 --> 00:01:55.005
into my spring app that I need to worry about it?

41
00:01:55.005 --> 00:01:59.009
The answer is no, not for most spring applications.

42
00:01:59.009 --> 00:02:02.005
Many studies have been done in Academia

43
00:02:02.005 --> 00:02:05.001
deeply diving into aspect oriented programming

44
00:02:05.001 --> 00:02:07.009
and different ways of implementing it.

45
00:02:07.009 --> 00:02:10.002
And the consensus is clear that in most cases,

46
00:02:10.002 --> 00:02:14.003
AOP does not introduce enough runtime performance hit

47
00:02:14.003 --> 00:02:18.006
to be a concern, especially in a spring context

48
00:02:18.006 --> 00:02:20.009
where the vast majority of spring applications

49
00:02:20.009 --> 00:02:23.008
are concerned with database connections.

50
00:02:23.008 --> 00:02:26.009
APIs and services across the globe,

51
00:02:26.009 --> 00:02:31.003
complex CIC deployment build and deployment pipelines,

52
00:02:31.003 --> 00:02:35.000
all of those connectivity activities

53
00:02:35.000 --> 00:02:38.000
dwarf any negative impact that there might be

54
00:02:38.000 --> 00:02:40.002
with respect to AOP.

55
00:02:40.002 --> 00:02:41.007
Okay, so why this lesson,

56
00:02:41.007 --> 00:02:43.004
why do we need to care about it?

57
00:02:43.004 --> 00:02:44.004
This is why,

58
00:02:44.004 --> 00:02:47.006
because it's hard to predict the real-world behaviors

59
00:02:47.006 --> 00:02:50.004
that our AOP configurations will cause.

60
00:02:50.004 --> 00:02:52.006
And that's a result not of AOP itself,

61
00:02:52.006 --> 00:02:56.006
but as a result of the ease with which we can integrate

62
00:02:56.006 --> 00:03:01.006
aspects into our object oriented situation.

63
00:03:01.006 --> 00:03:05.003
Also, it's a key part of your application architecture

64
00:03:05.003 --> 00:03:08.006
and having a deep understanding of how AOP is impacting you

65
00:03:08.006 --> 00:03:12.006
is a good professional thing to be concerned about.

66
00:03:12.006 --> 00:03:15.005
The name of the game with AOP

67
00:03:15.005 --> 00:03:17.004
and the way that you can answer the questions

68
00:03:17.004 --> 00:03:19.009
you'll get from your stakeholders about it

69
00:03:19.009 --> 00:03:23.003
are to be answered with good observability.

70
00:03:23.003 --> 00:03:25.003
And we're going to learn about instrumentation

71
00:03:25.003 --> 00:03:26.003
in this lesson,

72
00:03:26.003 --> 00:03:28.004
and we're specifically going to learn to instrument

73
00:03:28.004 --> 00:03:32.000
our aspect oriented code within our demo application

74
00:03:32.000 --> 00:03:35.004
so that we can expose the impact that our AOP configurations

75
00:03:35.004 --> 00:03:36.005
are having.

76
00:03:36.005 --> 00:03:37.005
To instrument code,

77
00:03:37.005 --> 00:03:39.002
what you're doing is you're injecting hooks

78
00:03:39.002 --> 00:03:43.000
into an application at compile time or at runtime

79
00:03:43.000 --> 00:03:46.000
in order to debug or profile specific behaviors

80
00:03:46.000 --> 00:03:48.006
that you can configure.

81
00:03:48.006 --> 00:03:50.009
Instrumentation requires a Java agent

82
00:03:50.009 --> 00:03:53.009
to eavesdrop in a sense to your runtime

83
00:03:53.009 --> 00:03:57.000
and extract the profile data that you've asked for.

84
00:03:57.000 --> 00:03:58.001
In this application,

85
00:03:58.001 --> 00:04:01.003
we're going to use a platform called Glowroot.

86
00:04:01.003 --> 00:04:05.000
Glowroot's an open-source, easy to run locally

87
00:04:05.000 --> 00:04:07.001
application performance monitor,

88
00:04:07.001 --> 00:04:09.007
it represents a whole class of platforms.

89
00:04:09.007 --> 00:04:12.008
And the things that we learned with respect to Glowroot

90
00:04:12.008 --> 00:04:16.005
can transfer to any number of other performance monitor

91
00:04:16.005 --> 00:04:17.006
platforms.

92
00:04:17.006 --> 00:04:19.006
There are a couple of terms I would like to go over

93
00:04:19.006 --> 00:04:23.007
before we jump into our hands-on code demonstration,

94
00:04:23.007 --> 00:04:25.007
one of those terms is transaction.

95
00:04:25.007 --> 00:04:29.002
Just remember that a transaction is a capture point boundary

96
00:04:29.002 --> 00:04:32.002
for a request or operation.

97
00:04:32.002 --> 00:04:34.006
And a trace is detailed information

98
00:04:34.006 --> 00:04:37.005
about the operations within a transaction,

99
00:04:37.005 --> 00:04:41.005
like timings, error call stacks and thread profiles.

100
00:04:41.005 --> 00:04:45.000
Throughput is a measure of operation efficiency.

101
00:04:45.000 --> 00:04:47.006
It's often expressed as request served per minute

102
00:04:47.006 --> 00:04:50.004
or per second for a statistic like that.

103
00:04:50.004 --> 00:04:54.002
All right, let's jump in to our code and learn some things.

104
00:04:54.002 --> 00:04:59.002
In a previous lesson, we configured an aspect class

105
00:04:59.002 --> 00:05:03.002
in order to deliver some custom performance monitoring.

106
00:05:03.002 --> 00:05:07.000
And we're going to relook at that work that we did together

107
00:05:07.000 --> 00:05:11.006
in order to instrument this aspect part of our application,

108
00:05:11.006 --> 00:05:14.008
to get a deep understanding of the performance

109
00:05:14.008 --> 00:05:16.007
of this part of our application.

110
00:05:16.007 --> 00:05:19.001
Let me please walk you through the key points here

111
00:05:19.001 --> 00:05:20.003
in our code base,

112
00:05:20.003 --> 00:05:23.009
we have a monitor endpoint that we can hit in a browser,

113
00:05:23.009 --> 00:05:28.005
and what that will invoke is an expensive calculation

114
00:05:28.005 --> 00:05:30.003
on an object.

115
00:05:30.003 --> 00:05:33.008
That expensive calculation

116
00:05:33.008 --> 00:05:38.008
is joined by means of our aspect configuration class

117
00:05:38.008 --> 00:05:43.008
to our custom monitoring method.

118
00:05:43.008 --> 00:05:45.006
The custom monitoring method lives here

119
00:05:45.006 --> 00:05:48.005
in our custom performance monitor class,

120
00:05:48.005 --> 00:05:51.006
and it's specifically doing some calculations

121
00:05:51.006 --> 00:05:53.000
and some logging.

122
00:05:53.000 --> 00:05:54.008
It's actually not doing much calculation,

123
00:05:54.008 --> 00:05:57.005
it's mostly doing logging.

124
00:05:57.005 --> 00:05:59.008
So what we want to instrument here,

125
00:05:59.008 --> 00:06:02.008
in other words, the things that we want to get visibility on

126
00:06:02.008 --> 00:06:06.006
related to the subsystem of our application are three:

127
00:06:06.006 --> 00:06:10.001
I would like to have a view of this expensive calculation.

128
00:06:10.001 --> 00:06:11.008
I would like to know how much time

129
00:06:11.008 --> 00:06:13.005
my application is spending on it.

130
00:06:13.005 --> 00:06:17.003
I would like to know how my custom performance monitor

131
00:06:17.003 --> 00:06:18.008
is behaving,

132
00:06:18.008 --> 00:06:22.004
that would be represented by this method here.

133
00:06:22.004 --> 00:06:26.009
And I would like to know how much time my application

134
00:06:26.009 --> 00:06:31.007
is spending at runtime on this whole AOP setup

135
00:06:31.007 --> 00:06:33.004
that I have configured.

136
00:06:33.004 --> 00:06:37.002
So, I'm going to show you how to instrument this code

137
00:06:37.002 --> 00:06:38.004
in order to get visibility

138
00:06:38.004 --> 00:06:41.000
on those three really specific things.

139
00:06:41.000 --> 00:06:44.001
Like I said, we're going to use Glowroot to do this.

140
00:06:44.001 --> 00:06:45.004
In a previous lesson,

141
00:06:45.004 --> 00:06:49.007
we hopped over this instrumentation ability,

142
00:06:49.007 --> 00:06:51.009
but we're going to have a deep dive into it now.

143
00:06:51.009 --> 00:06:55.003
And I have pre set up some instrumented classes here

144
00:06:55.003 --> 00:06:56.009
that I'd like to walk you through.

145
00:06:56.009 --> 00:07:00.008
First of all, this expensive calculation class.

146
00:07:00.008 --> 00:07:03.004
How we configure this in the instrumentation panel

147
00:07:03.004 --> 00:07:06.007
of Glowroot is by naming the class,

148
00:07:06.007 --> 00:07:09.006
by naming the method that we want to look at,

149
00:07:09.006 --> 00:07:11.002
we're configuring a trace entry,

150
00:07:11.002 --> 00:07:14.003
in other words, I want some very detailed information

151
00:07:14.003 --> 00:07:17.003
about this performance.

152
00:07:17.003 --> 00:07:21.000
This trace entry matters,

153
00:07:21.000 --> 00:07:23.001
and I'm going to talk about that in a minute.

154
00:07:23.001 --> 00:07:24.008
We'll come back and visit what that trace entry

155
00:07:24.008 --> 00:07:25.007
is all about.

156
00:07:25.007 --> 00:07:28.000
This timer, we're calling it calculation.

157
00:07:28.000 --> 00:07:32.001
In other words, we want to roll up into a single timer.

158
00:07:32.001 --> 00:07:36.004
This timer will allow us to aggregate under a single label

159
00:07:36.004 --> 00:07:39.000
all of the time that our application spends

160
00:07:39.000 --> 00:07:40.007
in this particular method.

161
00:07:40.007 --> 00:07:43.002
We're going to give it a stack trace threshold of very low

162
00:07:43.002 --> 00:07:45.006
because I want to force traces to get thrown

163
00:07:45.006 --> 00:07:48.001
so that we can look at them.

164
00:07:48.001 --> 00:07:52.000
We will put this within a transaction that we call custom,

165
00:07:52.000 --> 00:07:53.007
and we're going to give it a transaction name

166
00:07:53.007 --> 00:07:57.004
of AOP_PerfMon.

167
00:07:57.004 --> 00:07:59.009
Okay, let's go look at the other two.

168
00:07:59.009 --> 00:08:03.003
We are going to also instrument this entire performance

169
00:08:03.003 --> 00:08:05.003
monitor configuration class.

170
00:08:05.003 --> 00:08:07.000
Remember, this is the aspect class

171
00:08:07.000 --> 00:08:10.002
that configures our AOP behaviors.

172
00:08:10.002 --> 00:08:13.006
Class name is AOP performance monitor configuration.

173
00:08:13.006 --> 00:08:15.003
We're going to have a look at all of the methods

174
00:08:15.003 --> 00:08:17.005
in that class.

175
00:08:17.005 --> 00:08:20.000
We're going to ask for a trace,

176
00:08:20.000 --> 00:08:23.000
detailed information on this method,

177
00:08:23.000 --> 00:08:26.009
our trace entry will be a method name,

178
00:08:26.009 --> 00:08:30.004
and we're going to give this particular timer the name AOP.

179
00:08:30.004 --> 00:08:34.005
So all of the time that we spend in that configuration class

180
00:08:34.005 --> 00:08:37.007
will be aggregated under a timer called AOP.

181
00:08:37.007 --> 00:08:40.008
Give it a very low stack trace threshold of one,

182
00:08:40.008 --> 00:08:43.004
we will also give it the same transaction type name

183
00:08:43.004 --> 00:08:47.008
of custom and the same transaction name of AOP_PerfMon.

184
00:08:47.008 --> 00:08:49.008
And then last but not least, similarly,

185
00:08:49.008 --> 00:08:52.003
we have also instrumented our custom performance

186
00:08:52.003 --> 00:08:54.000
monitor class,

187
00:08:54.000 --> 00:08:57.006
we're looking at the specific invokedUnderTrace.

188
00:08:57.006 --> 00:08:59.002
Much of this is the same.

189
00:08:59.002 --> 00:09:03.001
We're giving this timer the label of advice.

190
00:09:03.001 --> 00:09:05.003
This is advice within our system,

191
00:09:05.003 --> 00:09:07.002
and we're going to roll up all of the time

192
00:09:07.002 --> 00:09:11.004
we spend on our AOP advice under this timer name.

193
00:09:11.004 --> 00:09:13.002
Customers are transaction type,

194
00:09:13.002 --> 00:09:16.007
transaction name like the others is AOP_PerfMon.

195
00:09:16.007 --> 00:09:17.009
And that's that.

196
00:09:17.009 --> 00:09:21.000
That's an overview of the instrumentation that we've set up.

197
00:09:21.000 --> 00:09:21.009
All right.

198
00:09:21.009 --> 00:09:24.007
Let's go to our monitor endpoint,

199
00:09:24.007 --> 00:09:27.003
load it it up a couple times,

200
00:09:27.003 --> 00:09:29.003
and see what Glowroot will tell us.

201
00:09:29.003 --> 00:09:31.000
Now, look here.

202
00:09:31.000 --> 00:09:34.008
We have a new transaction type under our dropdown list

203
00:09:34.008 --> 00:09:37.005
that we didn't have the first time we looked at Glowroot,

204
00:09:37.005 --> 00:09:39.003
it's called custom.

205
00:09:39.003 --> 00:09:40.008
And inside custom,

206
00:09:40.008 --> 00:09:43.009
let's take this down to the last 60 minutes.

207
00:09:43.009 --> 00:09:45.006
Inside custom transaction,

208
00:09:45.006 --> 00:09:50.001
we have a transaction named AOP_PerfMon.

209
00:09:50.001 --> 00:09:54.004
AOP_PerfMon is what we have labeled our custom

210
00:09:54.004 --> 00:09:55.004
instrumentations.

211
00:09:55.004 --> 00:09:57.003
And the first thing I'd like to draw your attention to

212
00:09:57.003 --> 00:10:00.004
is this legend of timers.

213
00:10:00.004 --> 00:10:02.003
Remember those timers I pointed out to you

214
00:10:02.003 --> 00:10:04.009
on the instrumentation configuration page?

215
00:10:04.009 --> 00:10:06.008
This is where we can see the results

216
00:10:06.008 --> 00:10:08.005
of those instrumentations.

217
00:10:08.005 --> 00:10:11.004
In this view, we can see four different timers

218
00:10:11.004 --> 00:10:13.001
aggregated by color,

219
00:10:13.001 --> 00:10:16.006
two of them are from our custom instrumentations.

220
00:10:16.006 --> 00:10:18.001
The calculation timer

221
00:10:18.001 --> 00:10:20.003
is the work that our application is doing,

222
00:10:20.003 --> 00:10:22.005
and the advice is what we joined to our calculation

223
00:10:22.005 --> 00:10:25.005
by means of AOP.

224
00:10:25.005 --> 00:10:27.001
So it gives us a nice little chart here

225
00:10:27.001 --> 00:10:28.009
with a breakdown of all of these activities.

226
00:10:28.009 --> 00:10:32.000
I should add that logging was done automatically for us

227
00:10:32.000 --> 00:10:34.004
by Glowroot.

228
00:10:34.004 --> 00:10:36.000
And notice that there's another timer

229
00:10:36.000 --> 00:10:38.005
that's not here at all, which is that AOP timer,

230
00:10:38.005 --> 00:10:42.000
which tells us we've spent no time in that aspect class

231
00:10:42.000 --> 00:10:45.005
at all during the execution of this transaction,

232
00:10:45.005 --> 00:10:47.004
which is useful information to know.

233
00:10:47.004 --> 00:10:49.002
So let's quickly look here at the breakdown,

234
00:10:49.002 --> 00:10:51.005
we have numbers here on what we spent on

235
00:10:51.005 --> 00:10:53.001
all of these different activities.

236
00:10:53.001 --> 00:10:55.003
I'd like you to notice the calculation class,

237
00:10:55.003 --> 00:10:59.004
which is our "native class" invoked some advice,

238
00:10:59.004 --> 00:11:02.006
which then stepped back into calculation.

239
00:11:02.006 --> 00:11:04.007
And we're going to have a look at some of the details

240
00:11:04.007 --> 00:11:05.008
of that activity in a minute,

241
00:11:05.008 --> 00:11:07.003
but the thing to draw away from here

242
00:11:07.003 --> 00:11:09.007
is that the advice number that we're interested in

243
00:11:09.007 --> 00:11:11.003
is extremely tiny.

244
00:11:11.003 --> 00:11:13.007
We can see on the chart that the advice here

245
00:11:13.007 --> 00:11:18.004
is only 0.2% of our total activity,

246
00:11:18.004 --> 00:11:20.005
and then this breakdown just gives us more details

247
00:11:20.005 --> 00:11:24.008
about what activities have been taking our time.

248
00:11:24.008 --> 00:11:27.006
The final thing I want to have you look at is a trace.

249
00:11:27.006 --> 00:11:29.001
These aren't truly slow traces,

250
00:11:29.001 --> 00:11:32.000
we kind of manufacture these traces.

251
00:11:32.000 --> 00:11:34.000
But let's have a look at these trace entries.

252
00:11:34.000 --> 00:11:38.004
So remember I told you that the trace entry name mattered,

253
00:11:38.004 --> 00:11:39.003
this is why.

254
00:11:39.003 --> 00:11:43.003
What we can see here is the trace entry

255
00:11:43.003 --> 00:11:47.008
for our execute method we used as the input parameter.

256
00:11:47.008 --> 00:11:50.005
And then that trace entry is moving down here

257
00:11:50.005 --> 00:11:54.008
into the custom performance monitor interceptor.

258
00:11:54.008 --> 00:11:57.006
This is telling us that the expensive calculation

259
00:11:57.006 --> 00:12:03.001
is being joined here with spring frameworks AOP library

260
00:12:03.001 --> 00:12:06.008
to invoke our custom monitor,

261
00:12:06.008 --> 00:12:09.004
which is then returning control in the thread

262
00:12:09.004 --> 00:12:12.001
back to our expensive calculation thread,

263
00:12:12.001 --> 00:12:15.004
and then coming in the result of our logging.

264
00:12:15.004 --> 00:12:17.006
So here you can get a very detailed view

265
00:12:17.006 --> 00:12:23.000
of exactly how your AOP library

266
00:12:23.000 --> 00:12:24.008
is interacting with your native code

267
00:12:24.008 --> 00:12:28.004
in order to get your end result.

268
00:12:28.004 --> 00:12:32.002
The good news here is that our timings are excellent,

269
00:12:32.002 --> 00:12:35.001
we're spending no time in the configuration part of our AOP

270
00:12:35.001 --> 00:12:38.003
and a very tiny bit of time and the advice.

271
00:12:38.003 --> 00:12:40.005
So this is a very real-world demonstration

272
00:12:40.005 --> 00:12:43.002
of how to instrument any Java code, really,

273
00:12:43.002 --> 00:12:45.008
but specifically, you can instrument your aspect oriented

274
00:12:45.008 --> 00:12:48.002
code in your spring code base

275
00:12:48.002 --> 00:12:49.009
in order to get deep visibility

276
00:12:49.009 --> 00:12:53.000
into the aspect oriented behaviors of your system.

