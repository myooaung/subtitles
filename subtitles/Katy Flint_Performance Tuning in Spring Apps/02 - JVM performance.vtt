WEBVTT
1
00:00:00.006 --> 00:00:02.005
- [Instructor] Every Spring-based application

2
00:00:02.005 --> 00:00:04.005
is a Java application.

3
00:00:04.005 --> 00:00:07.006
So it is essential for a Spring developer to be comfortable

4
00:00:07.006 --> 00:00:10.008
with the basics of how JVM performance works.

5
00:00:10.008 --> 00:00:12.004
There is a lot to know.

6
00:00:12.004 --> 00:00:16.000
The JVM is a complicated discipline.

7
00:00:16.000 --> 00:00:18.005
At the same time, it is approachable,

8
00:00:18.005 --> 00:00:20.008
and even a basic knowledge about the JVM

9
00:00:20.008 --> 00:00:22.003
will pay many rewards

10
00:00:22.003 --> 00:00:24.008
in your understanding of your application.

11
00:00:24.008 --> 00:00:25.008
In this video,

12
00:00:25.008 --> 00:00:29.005
we will examine the essentials of JVM performance.

13
00:00:29.005 --> 00:00:34.000
We will cover the heap performance and CPU performance.

14
00:00:34.000 --> 00:00:36.008
We will put an emphasis on the practical skills

15
00:00:36.008 --> 00:00:42.001
of modifying, monitoring, and reporting on these metrics.

16
00:00:42.001 --> 00:00:43.009
The heap, in green there,

17
00:00:43.009 --> 00:00:47.000
in the diagram, holds all of our objects.

18
00:00:47.000 --> 00:00:50.006
Every time you call new to make a new instance of an object

19
00:00:50.006 --> 00:00:54.005
in your application, it will live on the heap.

20
00:00:54.005 --> 00:00:56.004
This is where the memory management happens

21
00:00:56.004 --> 00:00:57.009
that you need to care about.

22
00:00:57.009 --> 00:01:00.004
The heap is where garbage collection happens.

23
00:01:00.004 --> 00:01:03.007
Garbage collection is how Java reclaims the space

24
00:01:03.007 --> 00:01:06.004
on the heap for objects that are no longer needed

25
00:01:06.004 --> 00:01:07.008
by your application,

26
00:01:07.008 --> 00:01:10.007
and that no longer need to take up memory space.

27
00:01:10.007 --> 00:01:12.006
You can influence heap behavior.

28
00:01:12.006 --> 00:01:16.002
You can set max and min heap sizes to influence

29
00:01:16.002 --> 00:01:19.003
how your application performs on the host computer.

30
00:01:19.003 --> 00:01:22.005
The other thing we're going to talk about is CPU performance.

31
00:01:22.005 --> 00:01:24.007
CPU performance is the use

32
00:01:24.007 --> 00:01:27.001
of the host computer's processing resources

33
00:01:27.001 --> 00:01:29.000
to execute your Java code.

34
00:01:29.000 --> 00:01:32.002
It's what's reflected in CPU performance.

35
00:01:32.002 --> 00:01:34.005
There's very little as a developer that you can do

36
00:01:34.005 --> 00:01:36.005
to influence CPU performance,

37
00:01:36.005 --> 00:01:39.007
but understanding your needs and limitations

38
00:01:39.007 --> 00:01:41.002
will help you make informed decisions

39
00:01:41.002 --> 00:01:43.000
about your application design.

40
00:01:43.000 --> 00:01:45.003
We are going to use a tool called VisualVM

41
00:01:45.003 --> 00:01:49.001
in order to get insight into our demo application,

42
00:01:49.001 --> 00:01:52.000
and explore heap and CPU performance.

43
00:01:52.000 --> 00:01:55.004
VisualVM is bundled with JDK through Java 8.

44
00:01:55.004 --> 00:01:58.003
It's also available as a standalone download

45
00:01:58.003 --> 00:02:00.000
from a GitHub-hosted site.

46
00:02:00.000 --> 00:02:01.006
So let's hop in here and have a look

47
00:02:01.006 --> 00:02:03.008
at some actual JVM performance things.

48
00:02:03.008 --> 00:02:07.001
We're going to do this by launching our demo application

49
00:02:07.001 --> 00:02:08.009
in a baseline mode.

50
00:02:08.009 --> 00:02:13.002
And what I want you to know here is VisualVM will reflect

51
00:02:13.002 --> 00:02:16.004
to you every information about every Java application

52
00:02:16.004 --> 00:02:18.007
that's running currently on your system.

53
00:02:18.007 --> 00:02:21.009
That includes VisualVM itself, of course.

54
00:02:21.009 --> 00:02:24.008
That includes our IntelliJ IDE,

55
00:02:24.008 --> 00:02:25.009
but right here on the list,

56
00:02:25.009 --> 00:02:30.005
you will see it's specifically our demo application.

57
00:02:30.005 --> 00:02:32.006
And when we open our demo application,

58
00:02:32.006 --> 00:02:36.002
the first thing we will see here in VisualVM is a overview

59
00:02:36.002 --> 00:02:38.001
of the application itself with a bunch

60
00:02:38.001 --> 00:02:39.009
of static information.

61
00:02:39.009 --> 00:02:42.000
The process ID comes in handy

62
00:02:42.000 --> 00:02:43.007
if you ever have to kill the application

63
00:02:43.007 --> 00:02:45.008
for some reason manually.

64
00:02:45.008 --> 00:02:47.001
This is telling us something

65
00:02:47.001 --> 00:02:50.000
about the JVM arguments that we've passed in.

66
00:02:50.000 --> 00:02:53.008
These arguments here are specifically coming from IntelliJ.

67
00:02:53.008 --> 00:02:56.003
Also, a list of your system properties that impact

68
00:02:56.003 --> 00:03:03.006
your runtime, you have Java, then Java vendor, JVM version,

69
00:03:03.006 --> 00:03:07.000
and just system-wide things like operating system

70
00:03:07.000 --> 00:03:10.007
and user information and such.

71
00:03:10.007 --> 00:03:12.003
So that's the Static tab, actually,

72
00:03:12.003 --> 00:03:14.006
a wealth of resources there that you should understand,

73
00:03:14.006 --> 00:03:16.003
but the real interesting stuff here

74
00:03:16.003 --> 00:03:19.005
in VisualVM is this monitor tab.

75
00:03:19.005 --> 00:03:23.002
The monitor gives us a nice quick look

76
00:03:23.002 --> 00:03:25.006
at the critical parts of the whole system,

77
00:03:25.006 --> 00:03:28.008
many of which we discussed on the slides a minute ago.

78
00:03:28.008 --> 00:03:31.008
Upper left, you see CPU usage, okay,

79
00:03:31.008 --> 00:03:34.006
and here, you'll see that we're hardly doing anything.

80
00:03:34.006 --> 00:03:37.005
Our demo app is actually computing nothing.

81
00:03:37.005 --> 00:03:40.003
And so that's why our CPU usage down here

82
00:03:40.003 --> 00:03:43.002
is zero all the way across.

83
00:03:43.002 --> 00:03:45.004
Below CPU, you can see information

84
00:03:45.004 --> 00:03:46.009
about the classes that are loaded.

85
00:03:46.009 --> 00:03:48.007
Now these are the classes themselves,

86
00:03:48.007 --> 00:03:50.007
not the instances of classes.

87
00:03:50.007 --> 00:03:54.004
So this tells us that our application is requiring the use

88
00:03:54.004 --> 00:03:58.004
of nearly 12,000 classes to do its work.

89
00:03:58.004 --> 00:04:01.009
And then very closely related to this class's output

90
00:04:01.009 --> 00:04:03.009
is the Metaspace tab up here.

91
00:04:03.009 --> 00:04:07.004
The Metaspace is not memory that we're going to discuss.

92
00:04:07.004 --> 00:04:11.001
Metaspace is where your class information is held.

93
00:04:11.001 --> 00:04:12.009
You can't influence the size of this.

94
00:04:12.009 --> 00:04:15.001
It will grow and shrink as it wants to,

95
00:04:15.001 --> 00:04:17.009
according to how many classes are being loaded,

96
00:04:17.009 --> 00:04:20.008
and you want to see it mostly full all of the time.

97
00:04:20.008 --> 00:04:22.002
That's good and normal,

98
00:04:22.002 --> 00:04:26.004
meaning the blue bar is up close to the orange bar,

99
00:04:26.004 --> 00:04:28.007
which is your maximum.

100
00:04:28.007 --> 00:04:31.001
The JVM will take care of that stuff for you.

101
00:04:31.001 --> 00:04:33.004
The heap here is what's interesting.

102
00:04:33.004 --> 00:04:35.002
So the heap is what we discussed before,

103
00:04:35.002 --> 00:04:37.008
where all of your objects live,

104
00:04:37.008 --> 00:04:39.006
all of the instances of your objects.

105
00:04:39.006 --> 00:04:41.004
A couple of things to notice here

106
00:04:41.004 --> 00:04:45.009
are we did not set any size information

107
00:04:45.009 --> 00:04:50.003
from our JVM input parameters to influence heap size,

108
00:04:50.003 --> 00:04:52.002
and so, the JVM picked its own size

109
00:04:52.002 --> 00:04:56.003
based on a percentage of what's available on your system.

110
00:04:56.003 --> 00:04:57.001
And then finally,

111
00:04:57.001 --> 00:05:00.003
the fourth panel here on the monitor tab is information

112
00:05:00.003 --> 00:05:02.001
about the threads that you have running.

113
00:05:02.001 --> 00:05:04.000
Again, since we're doing very little work

114
00:05:04.000 --> 00:05:06.003
in our demo baseline application,

115
00:05:06.003 --> 00:05:08.006
the number of threads here are quite stable.

116
00:05:08.006 --> 00:05:11.004
These are mostly Spring-initiated threads

117
00:05:11.004 --> 00:05:12.009
that are running here.

118
00:05:12.009 --> 00:05:14.005
Okay, one more thing I'd like to show you

119
00:05:14.005 --> 00:05:16.008
on the heap here is a garbage collection right here

120
00:05:16.008 --> 00:05:18.002
in VisualVM.

121
00:05:18.002 --> 00:05:21.004
You can perform a garbage collection,

122
00:05:21.004 --> 00:05:22.006
and watch what happens here,

123
00:05:22.006 --> 00:05:26.002
how performing a garbage collection manually drives down

124
00:05:26.002 --> 00:05:27.008
the references on the heap

125
00:05:27.008 --> 00:05:30.000
to classes that are no longer needed.

126
00:05:30.000 --> 00:05:32.006
And it also allows the JVM to drop the size

127
00:05:32.006 --> 00:05:35.000
of the heap down here to 100 megs,

128
00:05:35.000 --> 00:05:38.001
because it no longer feels that it needs all 300

129
00:05:38.001 --> 00:05:40.008
of those megs to accommodate yourself.

130
00:05:40.008 --> 00:05:42.006
Let's have a look at this Threads tab.

131
00:05:42.006 --> 00:05:45.000
This Threads tab will show us details of all

132
00:05:45.000 --> 00:05:48.004
of these 20 threads here that we see in this panel.

133
00:05:48.004 --> 00:05:50.006
And it gives us information about the state

134
00:05:50.006 --> 00:05:53.005
of all of the threads that are supporting the application.

135
00:05:53.005 --> 00:05:54.008
Finally, the Sampler tab,

136
00:05:54.008 --> 00:05:56.001
we'll have a look at this in a minute,

137
00:05:56.001 --> 00:05:58.001
allows us to get more detail,

138
00:05:58.001 --> 00:06:01.001
that information about our CPO and our memory.

139
00:06:01.001 --> 00:06:02.009
Now let's have a little more fun with this,

140
00:06:02.009 --> 00:06:06.001
that we've had an overview of VisualVM,

141
00:06:06.001 --> 00:06:07.007
and let's stop our application,

142
00:06:07.007 --> 00:06:11.004
and let's start it in a different mode,

143
00:06:11.004 --> 00:06:15.001
which I've called VisualVM here in Application Properties.

144
00:06:15.001 --> 00:06:19.004
And let's also add to our JVM runtime indications

145
00:06:19.004 --> 00:06:21.008
of how big we want that heap to be.

146
00:06:21.008 --> 00:06:24.005
We can set that in our application itself,

147
00:06:24.005 --> 00:06:25.008
and we're going to do that here.

148
00:06:25.008 --> 00:06:29.000
We're going to set a max size of 100 meg

149
00:06:29.000 --> 00:06:32.007
and a min size of 100 also.

150
00:06:32.007 --> 00:06:35.009
It's very common to see, especially in production systems,

151
00:06:35.009 --> 00:06:39.006
that you set your max and your min to be the same.

152
00:06:39.006 --> 00:06:41.003
Let's see, OK here.

153
00:06:41.003 --> 00:06:43.004
Let's rerun our application.

154
00:06:43.004 --> 00:06:47.003
VisualVM will, did you see that flash up there,

155
00:06:47.003 --> 00:06:50.005
will automatically pull in a running application.

156
00:06:50.005 --> 00:06:52.000
First of all, in the Overview tab,

157
00:06:52.000 --> 00:06:55.004
you can see these additional arguments that we added.

158
00:06:55.004 --> 00:06:56.007
Just a moment to go.

159
00:06:56.007 --> 00:06:57.008
On the Monitor tab, now,

160
00:06:57.008 --> 00:07:00.001
we're actually showing some interesting things.

161
00:07:00.001 --> 00:07:01.007
We've got some threads running,

162
00:07:01.007 --> 00:07:04.002
doing some sort of pretend work there

163
00:07:04.002 --> 00:07:06.000
in the demo application.

164
00:07:06.000 --> 00:07:09.000
And we've got things being put up and down on the heap here

165
00:07:09.000 --> 00:07:10.004
that you can get a little more sense

166
00:07:10.004 --> 00:07:13.006
of what a real application would look like.

167
00:07:13.006 --> 00:07:15.008
We can perform a garbage collection here.

168
00:07:15.008 --> 00:07:19.008
But now notice that even though we collected

169
00:07:19.008 --> 00:07:21.002
a little bit of memory,

170
00:07:21.002 --> 00:07:23.003
the heap size remained the same

171
00:07:23.003 --> 00:07:27.008
because of the way we influenced it at the JVM input side.

172
00:07:27.008 --> 00:07:29.005
Let's have a look here at our Threads tab, though.

173
00:07:29.005 --> 00:07:32.004
This is really what you want to see.

174
00:07:32.004 --> 00:07:33.004
On our threads now,

175
00:07:33.004 --> 00:07:38.000
we have some threads that our application

176
00:07:38.000 --> 00:07:39.007
has self-initiated.

177
00:07:39.007 --> 00:07:43.004
This gives you a better indication of, in real life,

178
00:07:43.004 --> 00:07:46.003
how you can see the threads that you create

179
00:07:46.003 --> 00:07:49.008
in your application, and surface them here in VisualVM.

180
00:07:49.008 --> 00:07:52.002
This button allowed me to see the histogram

181
00:07:52.002 --> 00:07:54.003
for the threads over all time,

182
00:07:54.003 --> 00:07:55.005
so you can see the life cycle

183
00:07:55.005 --> 00:07:58.001
of the threads in our demo application.

184
00:07:58.001 --> 00:08:00.006
Also, we can have a very clear look

185
00:08:00.006 --> 00:08:03.007
at what's happening on our heap space.

186
00:08:03.007 --> 00:08:07.000
What's on the heap, what's on the heap by thread,

187
00:08:07.000 --> 00:08:10.000
same thing with CPU, what's happening in the CPU,

188
00:08:10.000 --> 00:08:12.004
and what's happening in the CPU by thread.

189
00:08:12.004 --> 00:08:16.005
So that's a little bit of information about VisualVM,

190
00:08:16.005 --> 00:08:20.008
how to monitor the health of your Java application runtime,

191
00:08:20.008 --> 00:08:23.000
and how to monitor your application

192
00:08:23.000 --> 00:08:25.006
at runtime using VisualVM.

193
00:08:25.006 --> 00:08:27.003
There's so much more to learn here,

194
00:08:27.003 --> 00:08:30.009
but with the fluency on these basics of JVM performance,

195
00:08:30.009 --> 00:08:33.003
it's within reach for any Spring developer

196
00:08:33.003 --> 00:08:35.005
to understand and improve the performance

197
00:08:35.005 --> 00:08:37.001
of your Spring application.

198
00:08:37.001 --> 00:08:38.008
Now that we've taken the important step

199
00:08:38.008 --> 00:08:41.001
of breaking down the complexity of the problem,

200
00:08:41.001 --> 00:08:42.001
please continue with me

201
00:08:42.001 --> 00:08:45.000
as we start building our Spring performance skills.

