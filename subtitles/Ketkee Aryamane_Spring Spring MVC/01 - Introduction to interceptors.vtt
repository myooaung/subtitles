WEBVTT
1
00:00:00.005 --> 00:00:02.008
- [Instructor] Let's now look the concept of interceptors

2
00:00:02.008 --> 00:00:04.006
in Spring MVC.

3
00:00:04.006 --> 00:00:07.009
Interceptors are very similar to the filter components

4
00:00:07.009 --> 00:00:10.004
in the Servlet JSP API

5
00:00:10.004 --> 00:00:14.000
which means they will be used for pre- and post-processing

6
00:00:14.000 --> 00:00:15.004
of the request.

7
00:00:15.004 --> 00:00:17.008
Very common use cases for interceptors

8
00:00:17.008 --> 00:00:19.008
could be user authentication

9
00:00:19.008 --> 00:00:22.002
or you maybe want to set up the session

10
00:00:22.002 --> 00:00:24.005
or maybe just lock some request data.

11
00:00:24.005 --> 00:00:28.004
Interceptors generally hold that piece of functionality

12
00:00:28.004 --> 00:00:31.009
which is the administrative part of your application.

13
00:00:31.009 --> 00:00:33.004
You want to keep that separate

14
00:00:33.004 --> 00:00:34.009
from the actual business logic

15
00:00:34.009 --> 00:00:37.003
which actually runs in the controller.

16
00:00:37.003 --> 00:00:38.009
Let's see how this work.

17
00:00:38.009 --> 00:00:41.006
When there's a request coming in to your application,

18
00:00:41.006 --> 00:00:44.009
it is first intercepted by the dispatcher servlet.

19
00:00:44.009 --> 00:00:48.001
Now, had this been a conventional Servlet JSP application

20
00:00:48.001 --> 00:00:50.002
that incoming request would have directly gone

21
00:00:50.002 --> 00:00:51.005
to a filter.

22
00:00:51.005 --> 00:00:53.006
However, in Spring MVC we have seen

23
00:00:53.006 --> 00:00:56.009
that Dispatcher Servlet is the first component line

24
00:00:56.009 --> 00:00:59.001
to receive the request.

25
00:00:59.001 --> 00:01:03.009
Every request is of course mapped to a set of interceptors

26
00:01:03.009 --> 00:01:05.008
along with the handler.

27
00:01:05.008 --> 00:01:07.007
This is done by HandlerMapping

28
00:01:07.007 --> 00:01:09.006
and we have discussed this special bean type

29
00:01:09.006 --> 00:01:11.005
in one of our previous videos.

30
00:01:11.005 --> 00:01:14.000
So once Dispatcher Servlet resolves the URL pattern

31
00:01:14.000 --> 00:01:16.003
and understands which interceptors and handler

32
00:01:16.003 --> 00:01:17.004
to invoke,

33
00:01:17.004 --> 00:01:20.006
then HandlerAdapter is going to help the servlet

34
00:01:20.006 --> 00:01:22.008
in order to invoke that method.

35
00:01:22.008 --> 00:01:25.006
That's when the interceptor gets called.

36
00:01:25.006 --> 00:01:28.007
Now, whatever happens as a part of this invocation

37
00:01:28.007 --> 00:01:31.009
is the pre-processing of the request

38
00:01:31.009 --> 00:01:34.004
because the handler is not yet called.

39
00:01:34.004 --> 00:01:37.000
If all the execution in the pre-processing logic

40
00:01:37.000 --> 00:01:38.004
of interceptors is okay

41
00:01:38.004 --> 00:01:41.006
then the controller's forwarded to the handler

42
00:01:41.006 --> 00:01:43.007
which is, of course the controller.

43
00:01:43.007 --> 00:01:46.001
The controller is then free to call the rest

44
00:01:46.001 --> 00:01:48.009
of the application logic to execute your flow.

45
00:01:48.009 --> 00:01:50.003
Once everything is ready,

46
00:01:50.003 --> 00:01:53.004
the call is given back to the interceptor

47
00:01:53.004 --> 00:01:57.004
and that logic is the post-processing of the request.

48
00:01:57.004 --> 00:01:59.000
So let's say you've got a lot of models

49
00:01:59.000 --> 00:02:00.006
that you've prepared in the controller

50
00:02:00.006 --> 00:02:02.005
and you want to enhance those models

51
00:02:02.005 --> 00:02:04.008
for display of that data on your JSP

52
00:02:04.008 --> 00:02:07.009
then that logic could be a part of post-processing

53
00:02:07.009 --> 00:02:09.009
inside the interceptor.

54
00:02:09.009 --> 00:02:11.003
So once everything is ready,

55
00:02:11.003 --> 00:02:14.009
the response can be written back to the client.

56
00:02:14.009 --> 00:02:16.002
Now, if you see on the slide

57
00:02:16.002 --> 00:02:18.007
the interceptors are one to many

58
00:02:18.007 --> 00:02:20.008
which means every request

59
00:02:20.008 --> 00:02:24.005
could definitely have multiple interceptors mapped to it.

60
00:02:24.005 --> 00:02:26.007
This is totally understandable.

61
00:02:26.007 --> 00:02:29.007
You may have many administrative pieces of functionality

62
00:02:29.007 --> 00:02:32.002
in your application which you do not want to bundle

63
00:02:32.002 --> 00:02:34.005
in the same interceptor class.

64
00:02:34.005 --> 00:02:37.000
So you could have multiple classes mapped

65
00:02:37.000 --> 00:02:38.005
to the same request.

66
00:02:38.005 --> 00:02:42.006
These interceptors will get executed in an order.

67
00:02:42.006 --> 00:02:45.001
If all the interceptors execute well,

68
00:02:45.001 --> 00:02:47.004
then the control goes to the handler.

69
00:02:47.004 --> 00:02:50.006
However, if one or more interceptors

70
00:02:50.006 --> 00:02:52.005
have a problem in the execution,

71
00:02:52.005 --> 00:02:54.004
then something is not okay

72
00:02:54.004 --> 00:02:56.003
which means the response will be returned back

73
00:02:56.003 --> 00:02:59.001
to the client there and then.

74
00:02:59.001 --> 00:03:02.005
In this case, the controller will never be invoked.

75
00:03:02.005 --> 00:03:05.002
So interceptors have this power

76
00:03:05.002 --> 00:03:08.007
of terminating the request processing chain.

77
00:03:08.007 --> 00:03:10.008
There could be two meanings to this.

78
00:03:10.008 --> 00:03:13.002
The first is there was something wrong

79
00:03:13.002 --> 00:03:15.006
in the execution of the interceptors.

80
00:03:15.006 --> 00:03:18.009
Second, the dispatcher servlet has probably concluded

81
00:03:18.009 --> 00:03:20.005
that interceptors were enough

82
00:03:20.005 --> 00:03:22.009
to serve this incoming request.

83
00:03:22.009 --> 00:03:24.008
And that's exactly why the response may return

84
00:03:24.008 --> 00:03:28.000
to the client in this case.

