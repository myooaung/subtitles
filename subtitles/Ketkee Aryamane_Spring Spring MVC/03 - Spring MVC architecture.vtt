WEBVTT
1
00:00:00.005 --> 00:00:01.003
- [Instructor] Let us take a look

2
00:00:01.003 --> 00:00:03.000
at the Spring MVC architecture

3
00:00:03.000 --> 00:00:04.005
at a high level.

4
00:00:04.005 --> 00:00:07.002
Let's say this is your client, a JSP.

5
00:00:07.002 --> 00:00:08.007
It could be any other view technology

6
00:00:08.007 --> 00:00:10.006
that you want to work with.

7
00:00:10.006 --> 00:00:12.000
When you have an incoming request

8
00:00:12.000 --> 00:00:13.006
from your client it is intercepted

9
00:00:13.006 --> 00:00:16.000
by an API called Dispatcher Servlet,

10
00:00:16.000 --> 00:00:19.004
and this is the star of the Spring MVC framework.

11
00:00:19.004 --> 00:00:21.009
Every request is always uniquely identified

12
00:00:21.009 --> 00:00:23.007
by a urlpattern.

13
00:00:23.007 --> 00:00:26.005
And this urlpattern is mapped to a filter

14
00:00:26.005 --> 00:00:30.004
and a controller dedicated to that request processing.

15
00:00:30.004 --> 00:00:33.001
This url mapping resolution will be done

16
00:00:33.001 --> 00:00:35.002
by Dispatcher Servlet by means of

17
00:00:35.002 --> 00:00:37.004
interacting with another special bean type

18
00:00:37.004 --> 00:00:39.004
called Handler Mapping.

19
00:00:39.004 --> 00:00:41.005
Once it does this resolution, then it'll

20
00:00:41.005 --> 00:00:45.003
delegate the control to the respective controller component.

21
00:00:45.003 --> 00:00:47.008
Dispatcher Servlet works on a design pattern

22
00:00:47.008 --> 00:00:49.009
called Front Controller.

23
00:00:49.009 --> 00:00:51.007
This pattern is common even across

24
00:00:51.007 --> 00:00:54.003
the other web MVC frameworks.

25
00:00:54.003 --> 00:00:55.005
How does it work?

26
00:00:55.005 --> 00:00:57.004
It's like a traffic policeman.

27
00:00:57.004 --> 00:00:59.008
All the vehicle at a traffic signal

28
00:00:59.008 --> 00:01:01.005
comes towards the policeman first

29
00:01:01.005 --> 00:01:03.002
and then stops.

30
00:01:03.002 --> 00:01:05.004
Then on the basis of who wants to go where

31
00:01:05.004 --> 00:01:07.002
the policeman will divert that traffic

32
00:01:07.002 --> 00:01:09.000
at all directions.

33
00:01:09.000 --> 00:01:11.004
This is how Dispatcher Servlet works.

34
00:01:11.004 --> 00:01:13.003
All the incoming requests that come

35
00:01:13.003 --> 00:01:15.005
in the application are first intercepted

36
00:01:15.005 --> 00:01:18.001
by it and bases who wants to go where

37
00:01:18.001 --> 00:01:21.001
it'll delegate the control to the respective controller.

38
00:01:21.001 --> 00:01:23.001
The controller is then free to call

39
00:01:23.001 --> 00:01:25.000
the rest of the Application Business Logic

40
00:01:25.000 --> 00:01:26.008
where it may talk to database or any

41
00:01:26.008 --> 00:01:29.000
other third-party service.

42
00:01:29.000 --> 00:01:31.002
Once the logic execution is completed,

43
00:01:31.002 --> 00:01:33.005
the flow comes back to the controller.

44
00:01:33.005 --> 00:01:35.002
And that's the point where the controller

45
00:01:35.002 --> 00:01:38.004
decides the name of the view that the control

46
00:01:38.004 --> 00:01:41.008
is supposed to be for, what it do for the display of data.

47
00:01:41.008 --> 00:01:43.009
Now this is a logical name.

48
00:01:43.009 --> 00:01:46.009
This logical name is picked up by the Dispatcher Servlet

49
00:01:46.009 --> 00:01:51.003
and it consults another component called View resolvers.

50
00:01:51.003 --> 00:01:53.007
View resolvers will help Dispatcher Servlet

51
00:01:53.007 --> 00:01:56.007
know the mapping of the logical name of the view

52
00:01:56.007 --> 00:01:59.005
to the respective JSP template.

53
00:01:59.005 --> 00:02:01.003
Thereafter the Dispatcher Servlet

54
00:02:01.003 --> 00:02:03.009
is then going to carry the JSP and display

55
00:02:03.009 --> 00:02:07.000
it in the browser as part of the response.

