WEBVTT
1
00:00:00.005 --> 00:00:01.008
- Let's now understand the concept

2
00:00:01.008 --> 00:00:03.009
of chaining of your resolvers.

3
00:00:03.009 --> 00:00:06.005
By far, we have our application H+,

4
00:00:06.005 --> 00:00:09.007
which is trying to use all kinds of your resolvers.

5
00:00:09.007 --> 00:00:11.000
Basically three:

6
00:00:11.000 --> 00:00:12.006
InternalResourceViewResolver,

7
00:00:12.006 --> 00:00:13.008
XML based resolver,

8
00:00:13.008 --> 00:00:15.007
and ResourceBundle resolver.

9
00:00:15.007 --> 00:00:18.001
But sometimes your application may have the need

10
00:00:18.001 --> 00:00:20.004
to configure multiple view resolvers.

11
00:00:20.004 --> 00:00:23.007
Maybe you need to render some content using a GSP

12
00:00:23.007 --> 00:00:26.008
and then you need an internal resource view resolver for it,

13
00:00:26.008 --> 00:00:28.007
then you may have certain templates

14
00:00:28.007 --> 00:00:30.005
with the velocity of freemarker,

15
00:00:30.005 --> 00:00:33.004
so you need a separate view resolver for them.

16
00:00:33.004 --> 00:00:35.008
So multiple view resolvers

17
00:00:35.008 --> 00:00:38.001
can exist in your spring application

18
00:00:38.001 --> 00:00:41.006
and you will be able to set an order on each of them,

19
00:00:41.006 --> 00:00:46.007
using a set order method available on the resolver object.

20
00:00:46.007 --> 00:00:50.006
So you can have these multiple view resolvers coexisting,

21
00:00:50.006 --> 00:00:55.004
both of them trying to resolve views across your application

22
00:00:55.004 --> 00:00:57.005
Higher is the order value number

23
00:00:57.005 --> 00:01:00.000
that you provide to that set order API.

24
00:01:00.000 --> 00:01:02.006
The later that view resolver is going to be placed

25
00:01:02.006 --> 00:01:04.004
in the execution chain.

26
00:01:04.004 --> 00:01:05.003
So how does it work?

27
00:01:05.003 --> 00:01:07.007
Let's say you have an XmlViewResolver

28
00:01:07.007 --> 00:01:10.005
and that was assigned an order of one.

29
00:01:10.005 --> 00:01:13.000
And then you have the InternalResourceViewResolver,

30
00:01:13.000 --> 00:01:15.006
which was assigned an order of two.

31
00:01:15.006 --> 00:01:19.004
So if the view was successfully resolved by XmlViewResolver,

32
00:01:19.004 --> 00:01:20.006
we are good.

33
00:01:20.006 --> 00:01:23.000
However, if it fails to do that,

34
00:01:23.000 --> 00:01:25.001
then your InternalResourceViewResolver

35
00:01:25.001 --> 00:01:27.001
is going to be set into action.

36
00:01:27.001 --> 00:01:29.006
If the view resolves successfully with it,

37
00:01:29.006 --> 00:01:30.007
we are good again.

38
00:01:30.007 --> 00:01:32.004
However, if that fails,

39
00:01:32.004 --> 00:01:34.009
then it is going to throw an exception,

40
00:01:34.009 --> 00:01:36.007
saying that it could not resolve the view

41
00:01:36.007 --> 00:01:39.001
and just go back and check your configuration.

42
00:01:39.001 --> 00:01:41.004
So you can chain those view resolvers

43
00:01:41.004 --> 00:01:42.002
and in the next video,

44
00:01:42.002 --> 00:01:43.009
we're going to see a demo for this.

45
00:01:43.009 --> 00:01:46.001
We are going to use InternalResourceViewResolver

46
00:01:46.001 --> 00:01:48.003
and XmlViewResolver together

47
00:01:48.003 --> 00:01:50.006
and we find out how to chain those resolvers

48
00:01:50.006 --> 00:01:52.000
and see the result.

