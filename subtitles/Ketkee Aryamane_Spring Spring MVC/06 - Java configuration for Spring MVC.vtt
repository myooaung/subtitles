WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] Let's go to the next step now.

2
00:00:02.000 --> 00:00:04.008
We have to add the Java configuration

3
00:00:04.008 --> 00:00:07.005
to bootstrap the DispatcherServlet class.

4
00:00:07.005 --> 00:00:09.005
Now the approach that we're going to adopt to

5
00:00:09.005 --> 00:00:11.009
in this entire course is that we're going to do

6
00:00:11.009 --> 00:00:13.009
all the configuration using either

7
00:00:13.009 --> 00:00:15.005
a Java configuration class

8
00:00:15.005 --> 00:00:17.005
or with the help of annotations.

9
00:00:17.005 --> 00:00:19.001
In a normal web application,

10
00:00:19.001 --> 00:00:23.008
you could have bootstrap an external servlet,

11
00:00:23.008 --> 00:00:25.001
using WebXML.

12
00:00:25.001 --> 00:00:26.004
But WebXML is not something

13
00:00:26.004 --> 00:00:27.008
that we're going to go ahead with,

14
00:00:27.008 --> 00:00:30.009
so entire bootstrapping of the DispatcherServlet

15
00:00:30.009 --> 00:00:33.002
will happen in a Java configuration class

16
00:00:33.002 --> 00:00:34.008
that I'm going to write now.

17
00:00:34.008 --> 00:00:36.005
So let's do that.

18
00:00:36.005 --> 00:00:38.003
On the IDE,

19
00:00:38.003 --> 00:00:41.005
let's create a package, here.

20
00:00:41.005 --> 00:00:44.009
Let's say com.test.

21
00:00:44.009 --> 00:00:49.003
And let's create a class which says

22
00:00:49.003 --> 00:00:54.001
ApplicationInitializer.

23
00:00:54.001 --> 00:00:56.004
Now this should implement a class

24
00:00:56.004 --> 00:00:59.009
which is called WebApplicationInitializer

25
00:00:59.009 --> 00:01:03.002
which is coming from the springframework web package.

26
00:01:03.002 --> 00:01:06.003
And this is going to provide you all the APIs

27
00:01:06.003 --> 00:01:08.009
in order to register the DispatcherServlet

28
00:01:08.009 --> 00:01:12.004
for this springmvcmaven project.

29
00:01:12.004 --> 00:01:15.009
So let's go ahead and add the

30
00:01:15.009 --> 00:01:19.001
unimplemented methods.

31
00:01:19.001 --> 00:01:20.008
So we have a method called onStartup

32
00:01:20.008 --> 00:01:23.006
which provides us with a parameter of servletContext.

33
00:01:23.006 --> 00:01:24.004
ServletContext is one of the APIs of the

34
00:01:24.004 --> 00:01:27.006
servlet jsp api, of course.

35
00:01:27.006 --> 00:01:29.001
This configuration that we're going to write

36
00:01:29.001 --> 00:01:32.006
inside the onStartup is equivalent to the configuration

37
00:01:32.006 --> 00:01:36.001
that you would probably do inside a web XML file.

38
00:01:36.001 --> 00:01:38.000
So let's go ahead and

39
00:01:38.000 --> 00:01:43.004
bootstrap the dispatcherservlet,

40
00:01:43.004 --> 00:01:44.008
that's the first step.

41
00:01:44.008 --> 00:01:46.006
Now how do we do that?

42
00:01:46.006 --> 00:01:48.008
Generally, inside a spring project,

43
00:01:48.008 --> 00:01:53.002
the entire configuration is fetched into a context object.

44
00:01:53.002 --> 00:01:55.003
Now since this is a web application,

45
00:01:55.003 --> 00:01:57.005
and we are using annotations,

46
00:01:57.005 --> 00:02:00.004
the API that we are trying to grab is the

47
00:02:00.004 --> 00:02:03.009
AnnotationConfigWebApplicationContext.

48
00:02:03.009 --> 00:02:05.007
So let's get hold of that.

49
00:02:05.007 --> 00:02:07.004
Instantiate that,

50
00:02:07.004 --> 00:02:10.001
this will be Annotation,

51
00:02:10.001 --> 00:02:12.007
we call the constructor included an object of it,

52
00:02:12.007 --> 00:02:16.009
and this also will have to be registered

53
00:02:16.009 --> 00:02:20.004
with the spring configuration that we want to write.

54
00:02:20.004 --> 00:02:22.000
Now the spring configuration also will go

55
00:02:22.000 --> 00:02:23.003
in another Java class,

56
00:02:23.003 --> 00:02:25.004
but we'll look at that point in a minute.

57
00:02:25.004 --> 00:02:26.009
So once we've cleared this object,

58
00:02:26.009 --> 00:02:29.009
the next big step is to bootstrap that dispatcher servlet,

59
00:02:29.009 --> 00:02:34.003
so that will be done with the ServletRegistration

60
00:02:34.003 --> 00:02:37.001
dot Dynamic interface.

61
00:02:37.001 --> 00:02:39.003
Let's grab a variable for it,

62
00:02:39.003 --> 00:02:44.005
and on the servletContext, we are going to say addServlet.

63
00:02:44.005 --> 00:02:47.003
Now addServlet is going to demand from you

64
00:02:47.003 --> 00:02:48.004
a name for the servlet,

65
00:02:48.004 --> 00:02:49.005
which is a name of your choice.

66
00:02:49.005 --> 00:02:51.007
I'm just going to say mvc,

67
00:02:51.007 --> 00:02:57.007
and then let's also create the dispatcherServlet instance.

68
00:02:57.007 --> 00:03:00.000
Now to this dispatcherServlet instance,

69
00:03:00.000 --> 00:03:02.000
we're going to tie the context,

70
00:03:02.000 --> 00:03:04.004
which we have created on line number fifteen.

71
00:03:04.004 --> 00:03:05.006
So I'm just going to

72
00:03:05.006 --> 00:03:08.000
go and attach that context.

73
00:03:08.000 --> 00:03:08.009
Let's

74
00:03:08.009 --> 00:03:10.003
move this to the new line,

75
00:03:10.003 --> 00:03:13.007
so that we're able to follow the Java conventions,

76
00:03:13.007 --> 00:03:16.002
and on this, a couple of more things.

77
00:03:16.002 --> 00:03:20.003
We have to say servletRegistration.setLoadOnStartup,

78
00:03:20.003 --> 00:03:22.001
set this to one.

79
00:03:22.001 --> 00:03:23.005
What does this mean?

80
00:03:23.005 --> 00:03:26.009
Whenever you register a servlet inside your application,

81
00:03:26.009 --> 00:03:30.000
you need to tell the container that this servlet

82
00:03:30.000 --> 00:03:34.002
has to be instatiated and initialized on priority.

83
00:03:34.002 --> 00:03:36.005
This LoadOnStartup number

84
00:03:36.005 --> 00:03:38.007
is going to help the container do that.

85
00:03:38.007 --> 00:03:41.000
The default value for this is minus one,

86
00:03:41.000 --> 00:03:43.007
and if it is set to minus one, then the container

87
00:03:43.007 --> 00:03:47.001
can initialize this as a lazy loading procedure,

88
00:03:47.001 --> 00:03:48.001
but we don't want that.

89
00:03:48.001 --> 00:03:50.008
So we set that priority to one.

90
00:03:50.008 --> 00:03:54.002
Another thing, we get the servletRegistration

91
00:03:54.002 --> 00:03:56.004
and addMapping,

92
00:03:56.004 --> 00:03:58.005
and now let's understand what this mapping is.

93
00:03:58.005 --> 00:04:00.004
So we have already seen in the architecture

94
00:04:00.004 --> 00:04:01.007
that every request that comes

95
00:04:01.007 --> 00:04:04.002
will come with a URL pattern.

96
00:04:04.002 --> 00:04:06.002
Now we want to specify

97
00:04:06.002 --> 00:04:09.005
all the requests coming to this project,

98
00:04:09.005 --> 00:04:11.002
or coming to this application

99
00:04:11.002 --> 00:04:13.002
with a specific URL pattern.

100
00:04:13.002 --> 00:04:17.005
So that URL pattern, you define with the addMapping API.

101
00:04:17.005 --> 00:04:18.008
It's completely your choice.

102
00:04:18.008 --> 00:04:21.002
I just kept it as a simple slash.

103
00:04:21.002 --> 00:04:22.007
Whatever follows after that,

104
00:04:22.007 --> 00:04:25.002
all of the requests will be intercepted

105
00:04:25.002 --> 00:04:26.005
by dispatcherServlet.

106
00:04:26.005 --> 00:04:29.003
However, if you choose something that's per your design

107
00:04:29.003 --> 00:04:30.006
and per your decision.

108
00:04:30.006 --> 00:04:34.001
And you can also do something like app slash and all that,

109
00:04:34.001 --> 00:04:36.009
so you can have a URL pattern that you're establishing

110
00:04:36.009 --> 00:04:38.009
for this project.

111
00:04:38.009 --> 00:04:41.000
So I'm going to go back to my default one.

112
00:04:41.000 --> 00:04:42.008
Yes.

113
00:04:42.008 --> 00:04:45.009
So that's what we do as a part of the first configuration.

114
00:04:45.009 --> 00:04:50.009
The next one will be to add the context configuration class.

115
00:04:50.009 --> 00:04:52.008
So let's go to the IDE,

116
00:04:52.008 --> 00:04:53.007
right click on this.

117
00:04:53.007 --> 00:04:55.004
Let's create another class.

118
00:04:55.004 --> 00:04:59.009
And say applicationConfig.

119
00:04:59.009 --> 00:05:02.003
Now this is the class that will hold

120
00:05:02.003 --> 00:05:04.009
all the configuration for your application

121
00:05:04.009 --> 00:05:07.002
with respect to the springnvc features

122
00:05:07.002 --> 00:05:10.005
that you want to use as a part of this application.

123
00:05:10.005 --> 00:05:14.002
And also, let's go to applicationInitializer.

124
00:05:14.002 --> 00:05:16.009
Let's come on line sixteen, and as I said before,

125
00:05:16.009 --> 00:05:20.002
that we have to tie up the springConfiguration class

126
00:05:20.002 --> 00:05:23.009
with the AnnotationConfigWebApplicationContext.

127
00:05:23.009 --> 00:05:24.008
So we will do that.

128
00:05:24.008 --> 00:05:27.005
Let's grab the context object and say

129
00:05:27.005 --> 00:05:29.008
register, and then you feed that

130
00:05:29.008 --> 00:05:34.003
ApplicationConfig class to it.

131
00:05:34.003 --> 00:05:36.003
Now let's go to ApplicationConfig,

132
00:05:36.003 --> 00:05:38.004
and since this is going to be the

133
00:05:38.004 --> 00:05:40.001
springConfiguration class,

134
00:05:40.001 --> 00:05:43.006
we will have to annotate it with the

135
00:05:43.006 --> 00:05:45.002
configuration annotation,

136
00:05:45.002 --> 00:05:48.002
which again comes from the springframwork context package.

137
00:05:48.002 --> 00:05:51.000
Additionally, we also have another annotation

138
00:05:51.000 --> 00:05:54.002
that we want to put into place: ComponentScan.

139
00:05:54.002 --> 00:05:55.006
Let me first write out the code,

140
00:05:55.006 --> 00:05:57.000
and then we'll see what this is.

141
00:05:57.000 --> 00:06:00.001
This takes an argument called basePackages,

142
00:06:00.001 --> 00:06:04.008
and I'm just going to go and say com.test.

143
00:06:04.008 --> 00:06:05.009
So what does this do?

144
00:06:05.009 --> 00:06:08.001
ComponentScan is the annotation

145
00:06:08.001 --> 00:06:10.009
which is going to help specify this application

146
00:06:10.009 --> 00:06:14.002
that whatever classes that you find inside

147
00:06:14.002 --> 00:06:15.004
basePackages com.test,

148
00:06:15.004 --> 00:06:17.009
all of them have to be created as spring beans,

149
00:06:17.009 --> 00:06:19.002
and have to be made available

150
00:06:19.002 --> 00:06:21.000
during the application's runtime.

151
00:06:21.000 --> 00:06:23.001
So it is a way to tell springmvcframework,

152
00:06:23.001 --> 00:06:25.006
"Hey, listen, I have a lot of annotations defined

153
00:06:25.006 --> 00:06:28.009
"in all the classes of com.test package;

154
00:06:28.009 --> 00:06:30.007
"make sure you pick it up from them

155
00:06:30.007 --> 00:06:33.004
"and then spawn the beans correctly."

156
00:06:33.004 --> 00:06:37.009
Now this ApplicationConfig is going to extend a class

157
00:06:37.009 --> 00:06:41.009
which is WebMvcConfigurationSupport.

158
00:06:41.009 --> 00:06:45.005
This context configuration class needs two configurations.

159
00:06:45.005 --> 00:06:48.001
One is the resource handler mapping,

160
00:06:48.001 --> 00:06:51.008
and second is defining the jsp view resolver.

161
00:06:51.008 --> 00:06:54.003
Let's look at the first one.

162
00:06:54.003 --> 00:06:57.005
There is one method, which is called addResourceHandlers.

163
00:06:57.005 --> 00:07:00.008
It's already a part of the WebMvcConfigurationSupport

164
00:07:00.008 --> 00:07:02.005
that we have extended on this class.

165
00:07:02.005 --> 00:07:04.002
What will this method do?

166
00:07:04.002 --> 00:07:08.004
This method helps us to tell springmvc that

167
00:07:08.004 --> 00:07:10.006
whenever you're picking up the static files,

168
00:07:10.006 --> 00:07:12.002
like css or images,

169
00:07:12.002 --> 00:07:15.006
you have to pick it up from a particular part.

170
00:07:15.006 --> 00:07:17.000
Now understand this point:

171
00:07:17.000 --> 00:07:18.007
the project structure that you're looking at

172
00:07:18.007 --> 00:07:22.003
on the left side of IDE is going to be a little different

173
00:07:22.003 --> 00:07:25.001
from the structure that actually gets generated

174
00:07:25.001 --> 00:07:26.006
in the war package.

175
00:07:26.006 --> 00:07:28.003
So we need to tell springframework that

176
00:07:28.003 --> 00:07:29.006
when the war is created,

177
00:07:29.006 --> 00:07:31.006
you need to pick up the csss and images

178
00:07:31.006 --> 00:07:33.002
from the appropriate parts.

179
00:07:33.002 --> 00:07:36.003
That's what this method is going to help us do.

180
00:07:36.003 --> 00:07:38.005
So let's go ahead and say registry,

181
00:07:38.005 --> 00:07:41.001
add the resource handler,

182
00:07:41.001 --> 00:07:45.004
and tell that any part that begins like this:

183
00:07:45.004 --> 00:07:50.006
css/** so every file under the css folder, part like that,

184
00:07:50.006 --> 00:07:54.009
and also a part like this, all the images.

185
00:07:54.009 --> 00:07:57.008
To this, you are going to make sure that

186
00:07:57.008 --> 00:08:02.009
the resource locations are respectively

187
00:08:02.009 --> 00:08:08.006
a folder from the classpath, which is slash css.

188
00:08:08.006 --> 00:08:11.005
Again, another folder from the classpath

189
00:08:11.005 --> 00:08:14.004
by the name images.

190
00:08:14.004 --> 00:08:16.009
Let me just correct the spelling there.

191
00:08:16.009 --> 00:08:19.001
Classpath.

192
00:08:19.001 --> 00:08:20.000
There we go.

193
00:08:20.000 --> 00:08:21.008
So we are saying if you find a part like this

194
00:08:21.008 --> 00:08:23.000
on your jsps,

195
00:08:23.000 --> 00:08:25.006
css slash, slash, images, slash, slash, whatever,

196
00:08:25.006 --> 00:08:28.005
then they're supposed to be mapped to the parts

197
00:08:28.005 --> 00:08:30.009
that you pick up from the classpath.

198
00:08:30.009 --> 00:08:33.000
So that's the first configuration that we do,

199
00:08:33.000 --> 00:08:35.002
and then the second configuration is

200
00:08:35.002 --> 00:08:38.003
we have to define the jsp view resolver.

201
00:08:38.003 --> 00:08:40.000
So let's go and do that.

202
00:08:40.000 --> 00:08:43.003
Now this will be a bean that we're trying to register

203
00:08:43.003 --> 00:08:44.004
with spring.

204
00:08:44.004 --> 00:08:46.005
So I'm going to write a method for this.

205
00:08:46.005 --> 00:08:51.000
This is going to return me InternalResourceViewResolver.

206
00:08:51.000 --> 00:08:53.002
Now this is the one that's commonly used

207
00:08:53.002 --> 00:08:55.007
for resolving your jsp files.

208
00:08:55.007 --> 00:08:57.008
So you've already seen what view resolvers are

209
00:08:57.008 --> 00:08:59.003
as a part of the architecture,

210
00:08:59.003 --> 00:09:02.001
and this is the class that we are going to use for jsps.

211
00:09:02.001 --> 00:09:07.002
So let's name this, say, jspViewResolver.

212
00:09:07.002 --> 00:09:10.003
Let's come down on line 22,

213
00:09:10.003 --> 00:09:16.004
I will just create an instance of this first.

214
00:09:16.004 --> 00:09:18.004
And to this I'm going to set a few parameters.

215
00:09:18.004 --> 00:09:20.005
One is, I'm going to set a prefix.

216
00:09:20.005 --> 00:09:23.005
I'm going to say that you have to pick up

217
00:09:23.005 --> 00:09:27.008
these jsps from this folder,

218
00:09:27.008 --> 00:09:31.009
and the extension of those files

219
00:09:31.009 --> 00:09:34.007
will be defined by the suffix api,

220
00:09:34.007 --> 00:09:38.004
and let's say that is .jsp.

221
00:09:38.004 --> 00:09:42.003
Another thing will be, you will have to set the ViewClass

222
00:09:42.003 --> 00:09:44.009
so that it appropriately renders your jsp files.

223
00:09:44.009 --> 00:09:49.002
So that view class is JstlView.

224
00:09:49.002 --> 00:09:51.003
Yeah, there we go.

225
00:09:51.003 --> 00:09:53.007
Once this is done, you just have to return

226
00:09:53.007 --> 00:09:56.005
the viewResolver.

227
00:09:56.005 --> 00:09:58.000
Fact: so there are two things that we've done.

228
00:09:58.000 --> 00:10:00.003
We have made sure that the static resources

229
00:10:00.003 --> 00:10:02.004
are mapped correctly using addResourceHandlers api

230
00:10:02.004 --> 00:10:03.007
on line sixteen,

231
00:10:03.007 --> 00:10:05.001
and we have defined the jspViewResolver

232
00:10:05.001 --> 00:10:07.005
so that the jsp templates are picked up

233
00:10:07.005 --> 00:10:09.000
from the correct folders.

