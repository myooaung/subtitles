WEBVTT
1
00:00:00.005 --> 00:00:01.004
- [Instructor] Now that we've seen

2
00:00:01.004 --> 00:00:04.002
the Spring MVC architecture, we have done a lot of theory,

3
00:00:04.002 --> 00:00:07.008
let's get started with creating a basic Spring MVC project

4
00:00:07.008 --> 00:00:10.003
that is going to work with Maven.

5
00:00:10.003 --> 00:00:12.008
So let's go to the IntelliJ IDE

6
00:00:12.008 --> 00:00:14.002
because the first step tells me

7
00:00:14.002 --> 00:00:19.002
that we have to create a Maven web app archetype project.

8
00:00:19.002 --> 00:00:20.006
This is that IntelliJ IDE,

9
00:00:20.006 --> 00:00:23.002
so I'm just going to say file, new,

10
00:00:23.002 --> 00:00:27.006
let's hit project, make sure that Maven is selected,

11
00:00:27.006 --> 00:00:30.005
and check this box of create from archetype.

12
00:00:30.005 --> 00:00:32.000
The archetype that we're looking at

13
00:00:32.000 --> 00:00:34.002
is the Maven web app archetype,

14
00:00:34.002 --> 00:00:36.005
so if you just scroll down a little further

15
00:00:36.005 --> 00:00:39.006
you should be able to find it, which is this one.

16
00:00:39.006 --> 00:00:43.000
Then click on Next, and as usual with the Maven project

17
00:00:43.000 --> 00:00:46.001
you will have to specify the group ID and the Artifact ID.

18
00:00:46.001 --> 00:00:48.008
Let me mention that.

19
00:00:48.008 --> 00:00:49.008
This spring examples

20
00:00:49.008 --> 00:00:55.005
and artifact ID could be springmvcmaven.

21
00:00:55.005 --> 00:00:56.006
Click on Next.

22
00:00:56.006 --> 00:00:58.009
Now on this screen, whatever options that you see,

23
00:00:58.009 --> 00:01:03.000
let them be there as they are and click on Next.

24
00:01:03.000 --> 00:01:05.009
And then, let's say Finish.

25
00:01:05.009 --> 00:01:07.008
Let's open this project in a new window

26
00:01:07.008 --> 00:01:10.000
and make sure that on the right hand side

27
00:01:10.000 --> 00:01:13.003
bottom part of your screen just click on enable auto import

28
00:01:13.003 --> 00:01:16.001
so that whatever new dependencies that you add

29
00:01:16.001 --> 00:01:20.000
in your pom.xml will automatically get imported.

30
00:01:20.000 --> 00:01:21.000
Fix all the other things

31
00:01:21.000 --> 00:01:23.003
that IntelliJ is asking you to configure.

32
00:01:23.003 --> 00:01:27.002
Right, so we have the basic project that is set up.

33
00:01:27.002 --> 00:01:29.008
Now this pom.xml has got all the dependencies

34
00:01:29.008 --> 00:01:32.003
with respect to the basic Maven web app archetype

35
00:01:32.003 --> 00:01:33.007
that we created the project with.

36
00:01:33.007 --> 00:01:36.001
But that's not what we want to work with.

37
00:01:36.001 --> 00:01:37.006
So in your exercise files,

38
00:01:37.006 --> 00:01:40.009
under the Resources folder, there is a text file called

39
00:01:40.009 --> 00:01:43.007
Dependencies for Spring Maven with MVC.

40
00:01:43.007 --> 00:01:45.007
I've already collected and gathered all of them

41
00:01:45.007 --> 00:01:48.006
into this document for you so that we save some time.

42
00:01:48.006 --> 00:01:50.009
So if you just open this document,

43
00:01:50.009 --> 00:01:53.005
you see that there are a list of dependencies

44
00:01:53.005 --> 00:01:55.004
that we have to insert in pom.xml

45
00:01:55.004 --> 00:01:57.003
so I'm just going to take this entire thing,

46
00:01:57.003 --> 00:02:01.002
copy, come back to the project,

47
00:02:01.002 --> 00:02:05.001
and I'm going to just override this from line number 30.

48
00:02:05.001 --> 00:02:07.005
So let's select everything from line number 30

49
00:02:07.005 --> 00:02:13.001
up to line number 66, base them, and we are good.

50
00:02:13.001 --> 00:02:15.004
So let's quickly inspect what we have done.

51
00:02:15.004 --> 00:02:17.000
We have basically first told

52
00:02:17.000 --> 00:02:19.000
that Maven should be compiling the source code

53
00:02:19.000 --> 00:02:21.009
of this project using JDK 1.8 version,

54
00:02:21.009 --> 00:02:24.003
then the next couple of dependencies

55
00:02:24.003 --> 00:02:28.000
that you see are for the Spring web MVC framework.

56
00:02:28.000 --> 00:02:30.000
The next few are the ones for working

57
00:02:30.000 --> 00:02:33.004
with Java server pages, so you will need the javax.servlet

58
00:02:33.004 --> 00:02:37.009
and jsp-api dependencies configured in your pom.xml.

59
00:02:37.009 --> 00:02:41.001
Lastly, we have to make sure that

60
00:02:41.001 --> 00:02:44.003
this project is packaged in a WAR file.

61
00:02:44.003 --> 00:02:47.009
WAR is a web archive, and then we'll run it on tomcat.

62
00:02:47.009 --> 00:02:51.004
So there's a Tomcat plugin that's already available for you,

63
00:02:51.004 --> 00:02:54.002
which I have entered as a part of this pom.xml

64
00:02:54.002 --> 00:02:58.000
so that once this project is packaged as a WAR file,

65
00:02:58.000 --> 00:03:00.008
it can be run with a Tomcat container

66
00:03:00.008 --> 00:03:04.000
right inside the IntelliJ IDE itself.

67
00:03:04.000 --> 00:03:05.006
So that you really don't have to go out

68
00:03:05.006 --> 00:03:07.006
and run it externally.

69
00:03:07.006 --> 00:03:13.001
So those are the first few steps that we had to do.

70
00:03:13.001 --> 00:03:14.008
We created the project.

71
00:03:14.008 --> 00:03:17.009
Next in, we put all dependencies for Spring MVC,

72
00:03:17.009 --> 00:03:20.002
so that's what we did as a part of the second step.

73
00:03:20.002 --> 00:03:25.000
Now, the next step is create source and resources folders.

