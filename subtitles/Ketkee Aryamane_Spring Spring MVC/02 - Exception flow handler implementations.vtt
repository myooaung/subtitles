WEBVTT
1
00:00:00.005 --> 00:00:01.004
- [Instructor] Now let us take a look

2
00:00:01.004 --> 00:00:04.002
at the Exception Handling part of Spring MVC.

3
00:00:04.002 --> 00:00:05.008
Exception handling, of course, is managed

4
00:00:05.008 --> 00:00:06.008
by a DispatcherServlet.

5
00:00:06.008 --> 00:00:09.000
We've already spoken of this before.

6
00:00:09.000 --> 00:00:10.001
But how?

7
00:00:10.001 --> 00:00:13.000
So whenever an exception occurs in your application,

8
00:00:13.000 --> 00:00:14.003
the DispatcherServlet is going

9
00:00:14.003 --> 00:00:16.006
to delegate the responsibility of exception handling

10
00:00:16.006 --> 00:00:21.003
to the HandlerExceptionResolver special bean type.

11
00:00:21.003 --> 00:00:24.000
Now this special bean has many implementations

12
00:00:24.000 --> 00:00:25.002
inside the framework.

13
00:00:25.002 --> 00:00:27.004
We will look at those in a minute.

14
00:00:27.004 --> 00:00:28.008
We spoke about exception handling,

15
00:00:28.008 --> 00:00:30.008
we said that DispatcherServlet is going to do

16
00:00:30.008 --> 00:00:33.004
that stuff for us, but what does exception handling

17
00:00:33.004 --> 00:00:36.001
actually mean in an application?

18
00:00:36.001 --> 00:00:37.006
So let's say you have an exception

19
00:00:37.006 --> 00:00:39.006
that has occurred in your application.

20
00:00:39.006 --> 00:00:42.006
You will have to decide the next course of action

21
00:00:42.006 --> 00:00:44.001
for that exception.

22
00:00:44.001 --> 00:00:46.005
Do you want to just go back to that calling method

23
00:00:46.005 --> 00:00:48.004
and throw that exception again?

24
00:00:48.004 --> 00:00:50.004
Or, do you want to extract the error message

25
00:00:50.004 --> 00:00:53.005
from the exception object, and carry it to your views

26
00:00:53.005 --> 00:00:55.007
so that it is displayed to the user?

27
00:00:55.007 --> 00:00:58.002
One of these approaches is exactly the mechanism

28
00:00:58.002 --> 00:00:59.009
of exception handling.

29
00:00:59.009 --> 00:01:02.003
And, why is that needed?

30
00:01:02.003 --> 00:01:04.006
If you have an exception that has happened

31
00:01:04.006 --> 00:01:07.005
in your application, generally, Java will show you

32
00:01:07.005 --> 00:01:09.003
the stack trace on the console.

33
00:01:09.003 --> 00:01:12.001
If you do not do exception handling in your application,

34
00:01:12.001 --> 00:01:15.001
that entire stack trace will go and get displayed

35
00:01:15.001 --> 00:01:18.002
on the views in your application's website.

36
00:01:18.002 --> 00:01:21.003
Now, the user is layman.

37
00:01:21.003 --> 00:01:24.002
And he, or she, would not be able to make any sense

38
00:01:24.002 --> 00:01:26.002
out of that stack trace information

39
00:01:26.002 --> 00:01:27.007
that was displayed on the user.

40
00:01:27.007 --> 00:01:30.007
So that is really not an intuitive experience

41
00:01:30.007 --> 00:01:32.000
for the user.

42
00:01:32.000 --> 00:01:35.002
Moreover, you do not want to risk trying

43
00:01:35.002 --> 00:01:37.004
to expose the code level details

44
00:01:37.004 --> 00:01:39.009
on an HTML inside a browser.

45
00:01:39.009 --> 00:01:41.003
That's a risky business.

46
00:01:41.003 --> 00:01:43.003
So, it is necessary that

47
00:01:43.003 --> 00:01:46.003
whenever you have exceptions happening in your application,

48
00:01:46.003 --> 00:01:48.006
you need to do a graceful exit,

49
00:01:48.006 --> 00:01:51.009
a graceful handling, so that appropriate error messages,

50
00:01:51.009 --> 00:01:55.001
which are user friendly, are displayed on the view.

51
00:01:55.001 --> 00:01:56.009
And that's why you do exception handling

52
00:01:56.009 --> 00:01:58.009
in your application.

53
00:01:58.009 --> 00:02:02.001
Now, the special bean type resolve for exception handling

54
00:02:02.001 --> 00:02:05.001
has many implementations in Spring MVC.

55
00:02:05.001 --> 00:02:07.000
Let's see them one by one.

56
00:02:07.000 --> 00:02:11.006
The first one is ExceptionHandlerExceptionResolver.

57
00:02:11.006 --> 00:02:13.003
Now these names are a little confusing,

58
00:02:13.003 --> 00:02:14.009
so just read them one by one.

59
00:02:14.009 --> 00:02:16.009
You do not need to remember them.

60
00:02:16.009 --> 00:02:19.000
Okay, so what does this first one do?

61
00:02:19.000 --> 00:02:23.005
It will give you a way to define exception handler methods

62
00:02:23.005 --> 00:02:25.005
in your controller classes.

63
00:02:25.005 --> 00:02:29.000
These methods will be dedicated only to exception handling,

64
00:02:29.000 --> 00:02:33.008
and they will annotated using @ExceptionHandler annotation.

65
00:02:33.008 --> 00:02:35.000
We are going to see a demo

66
00:02:35.000 --> 00:02:39.001
for this ExceptionHandlerResolver in our HPlus application

67
00:02:39.001 --> 00:02:40.007
going further.

68
00:02:40.007 --> 00:02:44.007
The next one is SimpleMappingExceptionResolver.

69
00:02:44.007 --> 00:02:46.005
Now this is supposed to be registered

70
00:02:46.005 --> 00:02:49.008
inside your configuration context file of Spring.

71
00:02:49.008 --> 00:02:54.007
And it offers you an API, where you can map one exception

72
00:02:54.007 --> 00:02:56.006
to a particular error page.

73
00:02:56.006 --> 00:02:59.000
So let's say you have a design in your application

74
00:02:59.000 --> 00:03:01.005
where you want to show specific error messages

75
00:03:01.005 --> 00:03:03.004
for specific kind of exceptions,

76
00:03:03.004 --> 00:03:05.006
this resolver is the way to go.

77
00:03:05.006 --> 00:03:09.002
The next one is DefaultHandlerExceptionResolver.

78
00:03:09.002 --> 00:03:12.007
Now, as the name suggests, it is the default implementation

79
00:03:12.007 --> 00:03:16.001
that's already active inside the Spring MVC framework.

80
00:03:16.001 --> 00:03:18.007
And it'll be available for your application too.

81
00:03:18.007 --> 00:03:19.008
What does it do?

82
00:03:19.008 --> 00:03:22.000
So, if, let's say, there was an exception

83
00:03:22.000 --> 00:03:23.007
that occurred in your application,

84
00:03:23.007 --> 00:03:26.006
which falls in the list of the exceptions

85
00:03:26.006 --> 00:03:30.002
from the Spring MVC exception hierarchy,

86
00:03:30.002 --> 00:03:34.001
then this resolver is going to map that exception

87
00:03:34.001 --> 00:03:37.009
to its predefined corresponding status code.

88
00:03:37.009 --> 00:03:39.006
That's what it going to do for you.

89
00:03:39.006 --> 00:03:43.008
The last one is ResponseStatusExceptionResolver,

90
00:03:43.008 --> 00:03:44.009
which is very similar

91
00:03:44.009 --> 00:03:47.003
to the DefaultHandlerExceptionResolver.

92
00:03:47.003 --> 00:03:49.007
The difference being is that it is going to work

93
00:03:49.007 --> 00:03:52.002
for your custom exceptions.

94
00:03:52.002 --> 00:03:54.003
In our applications we often have a practice

95
00:03:54.003 --> 00:03:56.008
of writing our own custom exception classes.

96
00:03:56.008 --> 00:03:59.005
Then those classes have to be annotated

97
00:03:59.005 --> 00:04:02.003
with @ResponseStatus annotation,

98
00:04:02.003 --> 00:04:06.004
and that has to be also provided with an HTTP status code.

99
00:04:06.004 --> 00:04:08.008
So let's say that custom exception gets thrown

100
00:04:08.008 --> 00:04:11.007
in your application, then this resolver is going

101
00:04:11.007 --> 00:04:15.005
to come to rescue, map that exception according to the code

102
00:04:15.005 --> 00:04:17.000
that was provided as a part

103
00:04:17.000 --> 00:04:20.003
of the @ResponseStatus annotation.

104
00:04:20.003 --> 00:04:23.008
In the next video, we are going to create a demo

105
00:04:23.008 --> 00:04:26.001
where we will produce an exception,

106
00:04:26.001 --> 00:04:27.006
and we will pick up the first

107
00:04:27.006 --> 00:04:30.002
ExceptionHandlerExceptionResolver

108
00:04:30.002 --> 00:04:33.000
to do the exception handling for our application.

