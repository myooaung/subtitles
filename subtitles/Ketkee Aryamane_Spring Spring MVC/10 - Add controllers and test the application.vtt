WEBVTT
1
00:00:00.005 --> 00:00:02.003
- [Instructor] Let's see the next steps now.

2
00:00:02.003 --> 00:00:05.003
Map static resources in the context configuration class.

3
00:00:05.003 --> 00:00:07.009
Add view resolver in context configuration for JSPs.

4
00:00:07.009 --> 00:00:09.003
So this is something that we already covered

5
00:00:09.003 --> 00:00:10.005
in the previous video.

6
00:00:10.005 --> 00:00:12.003
The next big this is you have to add

7
00:00:12.003 --> 00:00:15.008
database configuration in your .properties file.

8
00:00:15.008 --> 00:00:16.007
So if you remember,

9
00:00:16.007 --> 00:00:18.005
when we inspected the folder's structure,

10
00:00:18.005 --> 00:00:21.006
we said we already have an application.properties file.

11
00:00:21.006 --> 00:00:23.004
Now, this is the file that we'll use

12
00:00:23.004 --> 00:00:27.004
in order to do the database property configuration setup.

13
00:00:27.004 --> 00:00:29.007
Now, do not have to worry, you just have to pick it up

14
00:00:29.007 --> 00:00:31.000
from your resources folder.

15
00:00:31.000 --> 00:00:32.002
It's there already.

16
00:00:32.002 --> 00:00:34.001
So if you see, in the same file,

17
00:00:34.001 --> 00:00:37.004
just going to reopen that file,

18
00:00:37.004 --> 00:00:42.008
and on line 15 to line 18, I have all the properties

19
00:00:42.008 --> 00:00:46.000
that are respective to the Spring JPA API,

20
00:00:46.000 --> 00:00:48.008
and its integration with MySQL server.

21
00:00:48.008 --> 00:00:53.000
So I'm just going to pick that up, copy, let's go to IDE,

22
00:00:53.000 --> 00:00:56.003
and paste them in the properties file.

23
00:00:56.003 --> 00:00:59.003
So, this is basically resulting out of the integration

24
00:00:59.003 --> 00:01:02.008
of Spring with the MySQL server using JPA API,

25
00:01:02.008 --> 00:01:03.006
so those are the properties

26
00:01:03.006 --> 00:01:05.005
that you're to define for your database.

27
00:01:05.005 --> 00:01:08.000
We are going to spawn a database server

28
00:01:08.000 --> 00:01:12.000
locally on port 3306, HPlus is the database name,

29
00:01:12.000 --> 00:01:16.004
and the credentials for the database are root, root.

30
00:01:16.004 --> 00:01:18.005
So that configuration has to be in place.

31
00:01:18.005 --> 00:01:21.004
Please note that if you do not do this configuration,

32
00:01:21.004 --> 00:01:24.003
there will be an error that you will get at the startup.

33
00:01:24.003 --> 00:01:25.001
Why?

34
00:01:25.001 --> 00:01:28.003
Because we have included in pom.xml

35
00:01:28.003 --> 00:01:31.003
the dependency for MySQL connector,

36
00:01:31.003 --> 00:01:33.005
which means it will expect that you provide

37
00:01:33.005 --> 00:01:37.001
the database configuration beforehand.

38
00:01:37.001 --> 00:01:39.007
Once that's done, let's add a HomeController

39
00:01:39.007 --> 00:01:40.009
to go to the home page.

40
00:01:40.009 --> 00:01:43.005
Now this is exactly same as we have done

41
00:01:43.005 --> 00:01:45.005
in the previous project that we created,

42
00:01:45.005 --> 00:01:46.007
so I'm just going to go to Spring

43
00:01:46.007 --> 00:01:49.006
and we see Maven, which is this.

44
00:01:49.006 --> 00:01:54.000
Take the HomeController, copy, come back to HPlus,

45
00:01:54.000 --> 00:01:58.005
and paste it under a separate folder now.

46
00:01:58.005 --> 00:02:04.009
Let's call it controllers.

47
00:02:04.009 --> 00:02:06.008
So nothing is going to change here.

48
00:02:06.008 --> 00:02:10.005
We still have the index page, which is a part

49
00:02:10.005 --> 00:02:13.008
of WEB-INF, jsp, so nothing changes there.

50
00:02:13.008 --> 00:02:16.002
This URL pattern can be returned as well.

51
00:02:16.002 --> 00:02:18.003
No changes there, so that's all.

52
00:02:18.003 --> 00:02:20.002
And now, the last step will be

53
00:02:20.002 --> 00:02:22.006
to build and run the application.

54
00:02:22.006 --> 00:02:25.000
Let's go back and a couple of things to note here.

55
00:02:25.000 --> 00:02:27.001
When we generated this project,

56
00:02:27.001 --> 00:02:29.004
we had two classes that came with it.

57
00:02:29.004 --> 00:02:32.000
One is ServletInitializer,

58
00:02:32.000 --> 00:02:34.009
which extends SpringBootServletInitializer.

59
00:02:34.009 --> 00:02:37.000
If you inspect this class, you'll find out

60
00:02:37.000 --> 00:02:40.007
that it actually implements WebApplicationInitializer.

61
00:02:40.007 --> 00:02:43.000
This is the same interface that we configured

62
00:02:43.000 --> 00:02:45.004
in the previous project to bootstrap

63
00:02:45.004 --> 00:02:46.009
the DispatcherServlet class.

64
00:02:46.009 --> 00:02:48.006
So this is already in place for us

65
00:02:48.006 --> 00:02:50.003
and if you want to have a better control,

66
00:02:50.003 --> 00:02:52.003
you can definitely put in any configuration

67
00:02:52.003 --> 00:02:55.008
inside this configure method on line number nine.

68
00:02:55.008 --> 00:02:59.001
Additionally, there's an HPlusappApplication,

69
00:02:59.001 --> 00:03:01.003
which is going to help us run a Spring application

70
00:03:01.003 --> 00:03:03.002
from a traditional WAR archive.

71
00:03:03.002 --> 00:03:06.000
WAR is what we chose as the packaging strategy

72
00:03:06.000 --> 00:03:08.005
for this project when we generated it.

73
00:03:08.005 --> 00:03:12.003
It will also make sure that it'll bind the servlet filter

74
00:03:12.003 --> 00:03:14.009
and ServletContextInitiliazer beans

75
00:03:14.009 --> 00:03:17.007
from the application context to the server.

76
00:03:17.007 --> 00:03:19.004
So this application can be run both

77
00:03:19.004 --> 00:03:22.002
by the deploying the WAR on a Tomcat server

78
00:03:22.002 --> 00:03:25.007
and executing it as a self-executable WAR

79
00:03:25.007 --> 00:03:27.004
with embedded Tomcat.

80
00:03:27.004 --> 00:03:30.001
Please understand that since this is a Spring Boot project,

81
00:03:30.001 --> 00:03:33.001
it comes embedded Tomcat server.

82
00:03:33.001 --> 00:03:34.006
Just let's recap quickly.

83
00:03:34.006 --> 00:03:36.002
If you look at this dependency,

84
00:03:36.002 --> 00:03:38.003
that is supposed to be doing the job for us,

85
00:03:38.003 --> 00:03:40.007
so we already have an embedded server

86
00:03:40.007 --> 00:03:43.006
that Spring Boot has configured for us.

87
00:03:43.006 --> 00:03:46.004
So we can run this main method

88
00:03:46.004 --> 00:03:49.003
and then, run our WAR so that the application

89
00:03:49.003 --> 00:03:50.005
is up and running.

90
00:03:50.005 --> 00:03:53.007
However, the standard practice

91
00:03:53.007 --> 00:03:55.006
while using a Spring Boot application

92
00:03:55.006 --> 00:03:58.005
is to go to that Maven tab

93
00:03:58.005 --> 00:04:00.008
and if you see under the Plugins,

94
00:04:00.008 --> 00:04:04.003
you have a Spring Boot plugin ready for you.

95
00:04:04.003 --> 00:04:07.007
Spring Boot advices that you always run your project

96
00:04:07.007 --> 00:04:10.004
using this Spring Boot plugin, which is configured

97
00:04:10.004 --> 00:04:12.002
by default when you generate

98
00:04:12.002 --> 00:04:14.008
the project in Spring Initializer.

99
00:04:14.008 --> 00:04:16.001
So I'm going to take this

100
00:04:16.001 --> 00:04:18.007
and make sure that I double-click.

101
00:04:18.007 --> 00:04:20.008
When I double click, it'll compile.

102
00:04:20.008 --> 00:04:22.002
It will create the WAR

103
00:04:22.002 --> 00:04:24.000
and it will run our WAR against

104
00:04:24.000 --> 00:04:25.004
the embedded ServletContainer,

105
00:04:25.004 --> 00:04:28.002
the Tomcat container, which is already present

106
00:04:28.002 --> 00:04:30.006
as a part of this application.

107
00:04:30.006 --> 00:04:32.009
So now let's open a browser.

108
00:04:32.009 --> 00:04:34.002
For the Spring Boot application,

109
00:04:34.002 --> 00:04:38.004
all the requests will be served from local host,

110
00:04:38.004 --> 00:04:43.001
so that it'll be http, localhost, port number 8080.

111
00:04:43.001 --> 00:04:46.005
So that is the default opening URL for your application

112
00:04:46.005 --> 00:04:48.002
and now, you just have to make sure that you give

113
00:04:48.002 --> 00:04:52.005
your URL pattern for the controller that you want to invoke,

114
00:04:52.005 --> 00:04:54.005
so let's hit this.

115
00:04:54.005 --> 00:04:57.008
We have our index JSP, which is now rendered,

116
00:04:57.008 --> 00:04:59.002
of course, with Spring MVC,

117
00:04:59.002 --> 00:05:02.006
but this project entirely has been built with Spring Boot.

118
00:05:02.006 --> 00:05:04.005
So we will build the successive use cases

119
00:05:04.005 --> 00:05:06.004
that we have as a part of this course

120
00:05:06.004 --> 00:05:09.002
on this HPlus application.

121
00:05:09.002 --> 00:05:12.000
Just one important point here that I'm going to iterate.

122
00:05:12.000 --> 00:05:13.008
We run this project using Spring Boot

123
00:05:13.008 --> 00:05:17.000
run target of the Spring Boot plugin,

124
00:05:17.000 --> 00:05:19.007
which was provided to us by default in the pom.xml

125
00:05:19.007 --> 00:05:21.004
when we generated this entire

126
00:05:21.004 --> 00:05:24.005
Spring Boot project with SpringInitializer.

127
00:05:24.005 --> 00:05:27.006
And as I said, Spring Boot advices you to use this plugin.

128
00:05:27.006 --> 00:05:29.009
However, there is another way

129
00:05:29.009 --> 00:05:32.003
for you to deploy this application.

130
00:05:32.003 --> 00:05:34.006
What you could do is if you go up there

131
00:05:34.006 --> 00:05:38.005
on the project lifecycle, you could use clean

132
00:05:38.005 --> 00:05:41.005
and the install targets.

133
00:05:41.005 --> 00:05:44.001
Now these two, if you run,

134
00:05:44.001 --> 00:05:46.006
that will generate a WAR file for you,

135
00:05:46.006 --> 00:05:48.003
and once that WAR gets generated,

136
00:05:48.003 --> 00:05:51.000
it will be placed into your target folder.

137
00:05:51.000 --> 00:05:53.002
Now you can open a command prompt.

138
00:05:53.002 --> 00:05:56.006
Go to the IdeaProjects folder,

139
00:05:56.006 --> 00:05:59.006
go to your specific folder,

140
00:05:59.006 --> 00:06:03.005
and here, you can use the java command

141
00:06:03.005 --> 00:06:08.001
and execute that WAR file with the minus jar argument.

142
00:06:08.001 --> 00:06:10.001
So what you have to do after minus jar

143
00:06:10.001 --> 00:06:12.008
is provide the path to the WAR file

144
00:06:12.008 --> 00:06:14.006
and that will be picked up, as I said,

145
00:06:14.006 --> 00:06:16.009
from the target folder of your project.

146
00:06:16.009 --> 00:06:20.000
So this is another way of deploying your application

147
00:06:20.000 --> 00:06:21.005
and getting it up and running.

148
00:06:21.005 --> 00:06:25.001
However, Spring Boot plugin, as we said, is very convenient,

149
00:06:25.001 --> 00:06:26.004
so if you just double-click this,

150
00:06:26.004 --> 00:06:29.003
it is always going to do that same job for you.

151
00:06:29.003 --> 00:06:33.001
A while before, we did discuss that the HPlus application

152
00:06:33.001 --> 00:06:36.000
classes main method will allow you to run

153
00:06:36.000 --> 00:06:39.008
the WEB archive file that your project is packaged into.

154
00:06:39.008 --> 00:06:42.006
However, if you try to run your application

155
00:06:42.006 --> 00:06:45.009
using this HPlus application's main method,

156
00:06:45.009 --> 00:06:48.005
then your JSPs may not be rendered correctly.

157
00:06:48.005 --> 00:06:51.004
You will end up getting some exceptions on the console.

158
00:06:51.004 --> 00:06:52.006
The problem is that Spring Boot

159
00:06:52.006 --> 00:06:54.008
does not offer full support for JSPs.

160
00:06:54.008 --> 00:06:56.004
There's a limited support for it,

161
00:06:56.004 --> 00:06:58.006
which is why, if you remember in the pom.xml,

162
00:06:58.006 --> 00:07:00.006
during the initial setup of the project,

163
00:07:00.006 --> 00:07:03.000
we ended up adding dependency for the javax.servlet,

164
00:07:03.000 --> 00:07:06.005
jstl, and tomcat-embed-jasper.

165
00:07:06.005 --> 00:07:08.006
So, two options of running the project;

166
00:07:08.006 --> 00:07:11.006
you use the Spring Boot plugin or you create a WAR

167
00:07:11.006 --> 00:07:14.000
and run it using java minus jar.

