WEBVTT
1
00:00:00.005 --> 00:00:02.003
- [Instructor] In addition to giving a logic

2
00:00:02.003 --> 00:00:04.004
for the pre handle that we have already done

3
00:00:04.004 --> 00:00:05.002
in the previous video,

4
00:00:05.002 --> 00:00:07.003
you can also provide an implementation

5
00:00:07.003 --> 00:00:09.006
for the post handle method.

6
00:00:09.006 --> 00:00:11.008
So, if you see, this method comes in

7
00:00:11.008 --> 00:00:13.008
with request response objects as well

8
00:00:13.008 --> 00:00:18.006
and additionally has a ModelAndView as a method parameter.

9
00:00:18.006 --> 00:00:19.005
So, this is what I was saying

10
00:00:19.005 --> 00:00:21.000
is a part of post processing logic.

11
00:00:21.000 --> 00:00:23.007
If you want to enhance the model data

12
00:00:23.007 --> 00:00:25.002
that you're trying to display on your GSPs,

13
00:00:25.002 --> 00:00:27.000
you can grab this object here,

14
00:00:27.000 --> 00:00:29.002
provide that as a logic of your post processing,

15
00:00:29.002 --> 00:00:31.006
and then carry the response back to the client.

16
00:00:31.006 --> 00:00:33.002
Right now, I'm just going to put this as out.

17
00:00:33.002 --> 00:00:35.005
I do not need to do that right now.

18
00:00:35.005 --> 00:00:39.007
So, I'm just going to say post handle.

19
00:00:39.007 --> 00:00:41.004
Okay, what is the next step?

20
00:00:41.004 --> 00:00:43.005
The next step is adding the interceptor to registry

21
00:00:43.005 --> 00:00:44.008
in the configuration class.

22
00:00:44.008 --> 00:00:46.009
Yes, so since this is a custom interceptor

23
00:00:46.009 --> 00:00:47.007
that we have made,

24
00:00:47.007 --> 00:00:49.007
we have to make Spring aware of it,

25
00:00:49.007 --> 00:00:51.001
and that is what we'll do next.

26
00:00:51.001 --> 00:00:53.007
So, let's go back to the IDE.

27
00:00:53.007 --> 00:00:56.006
And under the ApplicationConfig,

28
00:00:56.006 --> 00:00:57.005
let's come down here

29
00:00:57.005 --> 00:01:01.001
and override a method called addInterceptors.

30
00:01:01.001 --> 00:01:04.002
Now, this one takes a parameter of interceptor registry,

31
00:01:04.002 --> 00:01:05.007
and that is what we have to grab,

32
00:01:05.007 --> 00:01:07.000
and add the interceptor

33
00:01:07.000 --> 00:01:09.002
so that MVC Framework knows about it.

34
00:01:09.002 --> 00:01:13.004
So, I'm just going to say registry dot addInterceptor.

35
00:01:13.004 --> 00:01:14.002
And how do you add it?

36
00:01:14.002 --> 00:01:16.002
You just instantiate the class

37
00:01:16.002 --> 00:01:18.005
that you created a minute ago.

38
00:01:18.005 --> 00:01:19.005
And additionally,

39
00:01:19.005 --> 00:01:24.003
it also has to be supplied the path patterns.

40
00:01:24.003 --> 00:01:27.000
What this means is now, in our use case,

41
00:01:27.000 --> 00:01:29.000
the logging interceptor has to apply for

42
00:01:29.000 --> 00:01:31.005
every URL pattern of your application.

43
00:01:31.005 --> 00:01:34.000
However you could have certain interceptors

44
00:01:34.000 --> 00:01:35.005
which are supposed to execute

45
00:01:35.005 --> 00:01:39.001
only for a particular flow in your application.

46
00:01:39.001 --> 00:01:40.006
Let's say you want to do something specific

47
00:01:40.006 --> 00:01:42.000
to the log in use case.

48
00:01:42.000 --> 00:01:43.002
You want to do something specific

49
00:01:43.002 --> 00:01:44.006
for the registration use case.

50
00:01:44.006 --> 00:01:47.002
Then you could have those interceptors getting called

51
00:01:47.002 --> 00:01:50.004
only for those specific URL patterns.

52
00:01:50.004 --> 00:01:52.005
Right now, I am going to call my interceptor

53
00:01:52.005 --> 00:01:53.006
for every pattern,

54
00:01:53.006 --> 00:01:57.003
so I'm just going to add this as slash star.

55
00:01:57.003 --> 00:01:59.005
Let's end the statement.

56
00:01:59.005 --> 00:02:02.001
So, for example, if you were trying to execute

57
00:02:02.001 --> 00:02:04.005
the logging interceptor only for the log in flow,

58
00:02:04.005 --> 00:02:07.002
then you should have mentioned something like this.

59
00:02:07.002 --> 00:02:09.003
So, that is something that you do beforehand.

60
00:02:09.003 --> 00:02:12.009
So, I'll just return this to slash star.

61
00:02:12.009 --> 00:02:13.007
So, once that's done,

62
00:02:13.007 --> 00:02:15.003
we have to build and run the applications.

63
00:02:15.003 --> 00:02:18.000
Yes, so, we have registered our interceptor.

64
00:02:18.000 --> 00:02:19.007
The logic of the interceptor is ready.

65
00:02:19.007 --> 00:02:21.004
Let's just make a build of this

66
00:02:21.004 --> 00:02:23.007
and find out if the interceptor gets called

67
00:02:23.007 --> 00:02:27.007
for all our URL patterns of the HPlus app.

68
00:02:27.007 --> 00:02:28.006
The build has gone well.

69
00:02:28.006 --> 00:02:30.002
Let's open a window.

70
00:02:30.002 --> 00:02:32.001
Okay, so, let's go back to the IDE.

71
00:02:32.001 --> 00:02:35.000
We have invoked a URL pattern of slash home,

72
00:02:35.000 --> 00:02:35.009
and what do we get?

73
00:02:35.009 --> 00:02:37.002
Yeah, there we go.

74
00:02:37.002 --> 00:02:39.000
So, we have incoming request data log.

75
00:02:39.000 --> 00:02:40.008
This is session ID that was created,

76
00:02:40.008 --> 00:02:42.009
and that is today.

77
00:02:42.009 --> 00:02:46.005
And that is for the slash home URL pattern.

78
00:02:46.005 --> 00:02:49.004
Let me execute few more.

79
00:02:49.004 --> 00:02:51.003
Let's say search.

80
00:02:51.003 --> 00:02:53.001
And, if you see, every single time,

81
00:02:53.001 --> 00:02:55.006
that interceptor now is going to get called.

82
00:02:55.006 --> 00:02:57.003
Additionally, also understand that

83
00:02:57.003 --> 00:02:59.002
the post handle method gets called.

84
00:02:59.002 --> 00:03:00.007
So, whenever the execution

85
00:03:00.007 --> 00:03:03.005
of your entire home URL pattern was completed,

86
00:03:03.005 --> 00:03:06.004
it went back to the post processing part of the interceptor,

87
00:03:06.004 --> 00:03:08.009
and then the response was committed to the client.

88
00:03:08.009 --> 00:03:10.001
Same thing can be seen

89
00:03:10.001 --> 00:03:12.009
even for the other flow that we executed.

90
00:03:12.009 --> 00:03:14.009
So, this is how an interceptor will work

91
00:03:14.009 --> 00:03:17.000
for your application.

