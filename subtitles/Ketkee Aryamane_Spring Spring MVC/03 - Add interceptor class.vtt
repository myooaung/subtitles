WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Lecturer] So let's get started with the steps.

2
00:00:01.008 --> 00:00:06.001
The first one, is to create a LoggingInterceptor class

3
00:00:06.001 --> 00:00:08.000
in our HPlus application.

4
00:00:08.000 --> 00:00:11.009
And we will do some logging of request data inside it.

5
00:00:11.009 --> 00:00:14.000
So let's go back to the IDE

6
00:00:14.000 --> 00:00:21.001
and I'm going to make another package here for interceptors.

7
00:00:21.001 --> 00:00:25.002
And inside this, let's create a class

8
00:00:25.002 --> 00:00:29.002
which is LoggingInterceptor.

9
00:00:29.002 --> 00:00:31.008
And this one, is as we discussed in the previous video,

10
00:00:31.008 --> 00:00:37.007
going to extend the HandlerInterceptorAdapter.

11
00:00:37.007 --> 00:00:39.002
That's the one.

12
00:00:39.002 --> 00:00:42.000
So this one, has got those three methods

13
00:00:42.000 --> 00:00:43.000
that we talked about,

14
00:00:43.000 --> 00:00:45.009
preHandle, postHandle and afterCompletion.

15
00:00:45.009 --> 00:00:48.006
So you can override one of those in order to facilitate

16
00:00:48.006 --> 00:00:51.009
any kind of pre or post processing logic that you may have.

17
00:00:51.009 --> 00:00:54.004
So let's override the preHandle.

18
00:00:54.004 --> 00:00:56.009
We do not want the super class call that's been done

19
00:00:56.009 --> 00:00:58.003
so, we'll eliminate that

20
00:00:58.003 --> 00:01:00.005
and let me just list out the steps.

21
00:01:00.005 --> 00:01:04.000
First, we will get all cookies

22
00:01:04.000 --> 00:01:08.008
then, we will get the session id from with the cookie

23
00:01:08.008 --> 00:01:12.005
and we log the session id

24
00:01:12.005 --> 00:01:19.002
and we will also log the request path.

25
00:01:19.002 --> 00:01:21.002
So what is the path that you're invoking?

26
00:01:21.002 --> 00:01:24.005
Slash login, slash go to login, slash go to search,

27
00:01:24.005 --> 00:01:26.009
slash whatever URL patterns are present

28
00:01:26.009 --> 00:01:28.002
in the HPlus application.

29
00:01:28.002 --> 00:01:29.005
Every time a request is made

30
00:01:29.005 --> 00:01:31.000
and this interceptor gets call,

31
00:01:31.000 --> 00:01:33.003
you're going to make sure that we log that data.

32
00:01:33.003 --> 00:01:34.003
So how do we do that?

33
00:01:34.003 --> 00:01:35.007
Let's come to the next line

34
00:01:35.007 --> 00:01:37.004
and the first thing that I have to do is,

35
00:01:37.004 --> 00:01:41.002
I have to just make one variable for the session id,

36
00:01:41.002 --> 00:01:43.006
set it to null initially

37
00:01:43.006 --> 00:01:46.003
and after that, let's now get the cookies.

38
00:01:46.003 --> 00:01:47.006
Now let's take a look at this class

39
00:01:47.006 --> 00:01:50.001
in a little closer detail.

40
00:01:50.001 --> 00:01:53.000
This method has three parameters.

41
00:01:53.000 --> 00:01:56.002
httpServletrequest, httpServletresponse

42
00:01:56.002 --> 00:01:58.001
and there is a handler object.

43
00:01:58.001 --> 00:02:01.000
So request and response objects are at your disposal

44
00:02:01.000 --> 00:02:03.003
so that you do the pre and post processing.

45
00:02:03.003 --> 00:02:04.008
So we going to get the cookies

46
00:02:04.008 --> 00:02:06.005
from the request object first

47
00:02:06.005 --> 00:02:10.001
and then, we will try to get the session id cookie

48
00:02:10.001 --> 00:02:12.004
so that, we print the value for it.

49
00:02:12.004 --> 00:02:13.005
So how do we do that?

50
00:02:13.005 --> 00:02:16.008
Let's first check whether the cookies are null.

51
00:02:16.008 --> 00:02:20.004
So I'm just going to say request.getCookies.

52
00:02:20.004 --> 00:02:22.003
So if they are not null,

53
00:02:22.003 --> 00:02:25.000
only then will execute the following code.

54
00:02:25.000 --> 00:02:27.000
So I'm going to run a for loop.

55
00:02:27.000 --> 00:02:29.005
So when you say get cookies on line 18,

56
00:02:29.005 --> 00:02:31.003
you get an array of cookies.

57
00:02:31.003 --> 00:02:33.003
I'm just going to run a for loop for it

58
00:02:33.003 --> 00:02:35.003
and try to retrieve them

59
00:02:35.003 --> 00:02:38.003
So let's just say,

60
00:02:38.003 --> 00:02:41.004
request again, getCookies.

61
00:02:41.004 --> 00:02:43.003
You could have taken it into a separate variable also,

62
00:02:43.003 --> 00:02:45.002
that also can be done.

63
00:02:45.002 --> 00:02:48.000
Let's go inside this and let's check something.

64
00:02:48.000 --> 00:02:50.003
If you want to get hold of the session id,

65
00:02:50.003 --> 00:02:53.001
the cookie name that the servlet SPE

66
00:02:53.001 --> 00:02:58.000
or any other way for MVC framework reserves, is JSESSIONID.

67
00:02:58.000 --> 00:03:00.004
So I'm going to come here and put an if condition

68
00:03:00.004 --> 00:03:06.004
and see if the JSESSIONID is something

69
00:03:06.004 --> 00:03:12.008
that you get as a part of the incoming cookie, Name.

70
00:03:12.008 --> 00:03:13.007
So we are comparing

71
00:03:13.007 --> 00:03:15.008
if the incoming cookie Name from that array

72
00:03:15.008 --> 00:03:17.009
is equal to the JSESSIONID.

73
00:03:17.009 --> 00:03:19.002
If that is the case,

74
00:03:19.002 --> 00:03:24.007
let's quickly assign that sessionId to it.

75
00:03:24.007 --> 00:03:28.005
So that will be by the getValue method.

76
00:03:28.005 --> 00:03:29.005
So once this is done,

77
00:03:29.005 --> 00:03:32.005
let's come out of here on line 26

78
00:03:32.005 --> 00:03:34.000
and put a very small Sys out.

79
00:03:34.000 --> 00:03:35.008
This Sys out is basically

80
00:03:35.008 --> 00:03:38.006
now going to log the incoming request data.

81
00:03:38.006 --> 00:03:41.005
So I'm going to say, let's put quotes,

82
00:03:41.005 --> 00:03:46.000
Incoming request data log

83
00:03:46.000 --> 00:03:48.006
and then I'm going to also say,

84
00:03:48.006 --> 00:03:51.002
session, put a space

85
00:03:51.002 --> 00:03:52.006
just let's say format it

86
00:03:52.006 --> 00:03:56.006
and we're just going to append that sessionId to it.

87
00:03:56.006 --> 00:04:00.008
Additionally, let's also do this at,

88
00:04:00.008 --> 00:04:03.009
the incoming request data log that sessionId

89
00:04:03.009 --> 00:04:08.001
has been encountered right now.

90
00:04:08.001 --> 00:04:10.000
So I'll just instantiate the data object

91
00:04:10.000 --> 00:04:11.009
so I get the current date and time

92
00:04:11.009 --> 00:04:14.003
at which this is happening for us.

93
00:04:14.003 --> 00:04:18.005
Additionally you can also say for, for what?

94
00:04:18.005 --> 00:04:24.009
For this particular request URI.

95
00:04:24.009 --> 00:04:26.003
So what we are trying to say is that,

96
00:04:26.003 --> 00:04:28.005
we have an coming request.

97
00:04:28.005 --> 00:04:31.006
That request is definitely going to enter this interceptor,

98
00:04:31.006 --> 00:04:33.006
LoggingInterceptor and when it does,

99
00:04:33.006 --> 00:04:34.008
this was the sessionId

100
00:04:34.008 --> 00:04:37.004
and this happened at this particular Date time

101
00:04:37.004 --> 00:04:41.004
for this particular URL pattern that was invoked.

102
00:04:41.004 --> 00:04:43.001
So that's what we are saying.

103
00:04:43.001 --> 00:04:45.006
Now at the end of this, if you see preHandle returns,

104
00:04:45.006 --> 00:04:49.000
a boolean value in the method signature on line number 13,

105
00:04:49.000 --> 00:04:53.004
which means, this has to return true

106
00:04:53.004 --> 00:04:56.005
and that is the signal so that

107
00:04:56.005 --> 00:04:59.004
the control goes next to the handler.

108
00:04:59.004 --> 00:05:01.002
So we discussed the chaining of interceptors

109
00:05:01.002 --> 00:05:03.006
and we discussed how the control gets forwarded

110
00:05:03.006 --> 00:05:07.004
to the handler in which cases the controller is not called

111
00:05:07.004 --> 00:05:09.000
et cetera in the previous video.

112
00:05:09.000 --> 00:05:10.000
So that is what it is.

113
00:05:10.000 --> 00:05:13.005
If your interceptor returns true, then it means that

114
00:05:13.005 --> 00:05:16.002
the entire execution of the interceptor was a success

115
00:05:16.002 --> 00:05:18.007
and then the control can be given to the controller.

116
00:05:18.007 --> 00:05:21.002
However, if you try to return false from here,

117
00:05:21.002 --> 00:05:24.007
then the response will go back to the GSP right from here.

118
00:05:24.007 --> 00:05:26.004
The controller will never get invoked.

119
00:05:26.004 --> 00:05:29.004
So that is what the interceptor looks like.

120
00:05:29.004 --> 00:05:30.008
And that's the logic we have written.

121
00:05:30.008 --> 00:05:33.000
Simple, it's just logging request data.

122
00:05:33.000 --> 00:05:34.001
Just one more point here,

123
00:05:34.001 --> 00:05:35.009
instead of doing the Sys out,

124
00:05:35.009 --> 00:05:38.002
you could also use a logging API.

125
00:05:38.002 --> 00:05:41.003
You could use log4j or maybe logback.xml,

126
00:05:41.003 --> 00:05:43.007
anything that suits you, which you're comfortable with

127
00:05:43.007 --> 00:05:45.000
in order to do the logging.

