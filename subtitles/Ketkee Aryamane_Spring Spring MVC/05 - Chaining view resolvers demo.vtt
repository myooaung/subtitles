WEBVTT
1
00:00:00.005 --> 00:00:03.002
- So let's find out how to chain the view resolvers

2
00:00:03.002 --> 00:00:05.001
in your H+ application.

3
00:00:05.001 --> 00:00:07.007
So what I'm going to do is, the resource bundle view resolver

4
00:00:07.007 --> 00:00:09.007
that you have declared on line 65,

5
00:00:09.007 --> 00:00:10.007
I'm going to shut that off.

6
00:00:10.007 --> 00:00:12.002
I'm not going to use that one.

7
00:00:12.002 --> 00:00:13.006
We'll just command it out.

8
00:00:13.006 --> 00:00:18.002
Instead, I will use the XML View Resolver defined on line 58

9
00:00:18.002 --> 00:00:22.004
so I'm going to uncommand 58 to 63,

10
00:00:22.004 --> 00:00:25.008
and also the internal resource view resolver

11
00:00:25.008 --> 00:00:27.003
is something that we want.

12
00:00:27.003 --> 00:00:32.007
So lines number 29 to 36 I will uncommand again.

13
00:00:32.007 --> 00:00:36.000
So now we have two view resolvers co-existing

14
00:00:36.000 --> 00:00:37.007
in our application,

15
00:00:37.007 --> 00:00:40.009
and we are going to employ a chaining mechanism for them.

16
00:00:40.009 --> 00:00:44.002
You can do that by setting an order as we discussed in the

17
00:00:44.002 --> 00:00:45.005
previous video.

18
00:00:45.005 --> 00:00:46.003
How do we do that?

19
00:00:46.003 --> 00:00:49.007
So let's come to line 33, press enter there,

20
00:00:49.007 --> 00:00:51.006
and let's do that at the end.

21
00:00:51.006 --> 00:00:54.007
So I'm going to go after 34,

22
00:00:54.007 --> 00:00:58.001
and on line 35 let's grab that view resolver object

23
00:00:58.001 --> 00:01:00.004
and there's a set order API to it.

24
00:01:00.004 --> 00:01:03.002
Set the order of this one to 2.

25
00:01:03.002 --> 00:01:04.002
I'll tell you why.

26
00:01:04.002 --> 00:01:05.003
Let's come down,

27
00:01:05.003 --> 00:01:08.000
go to the XML view resolver,

28
00:01:08.000 --> 00:01:11.003
and on line 63 grab the view resolver

29
00:01:11.003 --> 00:01:16.000
and set this order to 1.

30
00:01:16.000 --> 00:01:18.003
Now the fundamental concept here is that

31
00:01:18.003 --> 00:01:20.007
we know that if the XLM view resolver

32
00:01:20.007 --> 00:01:22.003
is set to an order of 1,

33
00:01:22.003 --> 00:01:24.003
this is the first resolver in chain

34
00:01:24.003 --> 00:01:26.003
which is going to try to resolve the views

35
00:01:26.003 --> 00:01:27.006
of your application.

36
00:01:27.006 --> 00:01:30.007
If it fails, then internal resource view resolver

37
00:01:30.007 --> 00:01:32.004
is going to come into action.

38
00:01:32.004 --> 00:01:34.008
Now for this H+ application,

39
00:01:34.008 --> 00:01:37.007
all of the views are definitely going to be resolved

40
00:01:37.007 --> 00:01:39.004
by internal resource view resolvers,

41
00:01:39.004 --> 00:01:41.004
because everything is mapped correctly.

42
00:01:41.004 --> 00:01:43.008
But in the XML view resolver XML file,

43
00:01:43.008 --> 00:01:46.009
that is views.xml, let's say you'll just have

44
00:01:46.009 --> 00:01:48.004
four views defined here.

45
00:01:48.004 --> 00:01:49.006
If you look at this file,

46
00:01:49.006 --> 00:01:53.007
lines 9 to 23 define just four views.

47
00:01:53.007 --> 00:01:56.008
You may have even the other views that could be a part

48
00:01:56.008 --> 00:01:58.002
of the H+ application,

49
00:01:58.002 --> 00:02:00.008
which are not right now configured here.

50
00:02:00.008 --> 00:02:03.005
So we have to be safe, we have to make sure

51
00:02:03.005 --> 00:02:06.008
that internal resource view resolver is definitely called

52
00:02:06.008 --> 00:02:09.008
because that is definitely capable of resolving

53
00:02:09.008 --> 00:02:12.000
all the views of your application.

54
00:02:12.000 --> 00:02:13.004
So to demo this now,

55
00:02:13.004 --> 00:02:14.009
what I'm going to do is

56
00:02:14.009 --> 00:02:17.007
I will disable these view definitions

57
00:02:17.007 --> 00:02:19.002
for the register page

58
00:02:19.002 --> 00:02:20.008
and for the login page.

59
00:02:20.008 --> 00:02:24.003
I'm going to command out lines 17 to 23.

60
00:02:24.003 --> 00:02:25.005
Which means

61
00:02:25.005 --> 00:02:30.002
the XML view resolver has got only two views

62
00:02:30.002 --> 00:02:31.006
that it can resolve

63
00:02:31.006 --> 00:02:35.002
for index jsp and for search jsp.

64
00:02:35.002 --> 00:02:38.001
However, the internal resource view resolver

65
00:02:38.001 --> 00:02:41.005
that is still in action will be able to resolve

66
00:02:41.005 --> 00:02:43.003
every other view.

67
00:02:43.003 --> 00:02:45.002
So when we run this application,

68
00:02:45.002 --> 00:02:47.006
the first two, that is index and the search,

69
00:02:47.006 --> 00:02:50.001
will be picked up by XML view resolver,

70
00:02:50.001 --> 00:02:52.002
whereas the rest of the views should be picked up

71
00:02:52.002 --> 00:02:55.001
by the internal resource view resolver.

72
00:02:55.001 --> 00:02:58.001
Just remember here that internal resource view resolver

73
00:02:58.001 --> 00:03:00.003
should always have a high order.

74
00:03:00.003 --> 00:03:04.006
Because it is intending to represent a very explicit mapping

75
00:03:04.006 --> 00:03:07.004
it will be able to resolve everything.

76
00:03:07.004 --> 00:03:08.002
Okay?

77
00:03:08.002 --> 00:03:09.004
So now let's go ahead,

78
00:03:09.004 --> 00:03:13.007
build this, and see how this works.

79
00:03:13.007 --> 00:03:16.007
Okay, so let's go to

80
00:03:16.007 --> 00:03:18.004
our homepage.

81
00:03:18.004 --> 00:03:19.002
Cool.

82
00:03:19.002 --> 00:03:22.009
So we have index jsp and this was definitely resolved by the

83
00:03:22.009 --> 00:03:24.003
XML view resolver.

84
00:03:24.003 --> 00:03:25.004
It's already there.

85
00:03:25.004 --> 00:03:28.006
And why do we know that XML resolver did it?

86
00:03:28.006 --> 00:03:30.004
Because its priority is 1.

87
00:03:30.004 --> 00:03:33.000
So it is the first resolver in chain,

88
00:03:33.000 --> 00:03:35.002
which will try to resolve your views.

89
00:03:35.002 --> 00:03:38.009
Now let's try the search link, let's go to the application.

90
00:03:38.009 --> 00:03:42.005
This also was definitely resolved by the XML view resolver.

91
00:03:42.005 --> 00:03:46.004
Now let's go to home again, and now let's go to login.

92
00:03:46.004 --> 00:03:47.005
And do you see what happened?

93
00:03:47.005 --> 00:03:50.008
It is successfully able to give me the login page.

94
00:03:50.008 --> 00:03:54.006
This view has now been resolved by your

95
00:03:54.006 --> 00:03:57.001
internal resource view resolver.

96
00:03:57.001 --> 00:03:57.009
Observe.

97
00:03:57.009 --> 00:04:02.006
In views XML we never had the view definition for login made

98
00:04:02.006 --> 00:04:06.003
which means the XML resolver failed to resolve this view,

99
00:04:06.003 --> 00:04:08.006
and that's why the responsibility was handed over to

100
00:04:08.006 --> 00:04:10.005
internal resource view resolver,

101
00:04:10.005 --> 00:04:12.003
which is second in the chain.

102
00:04:12.003 --> 00:04:14.009
And that did the resolution for us.

103
00:04:14.009 --> 00:04:17.000
Let's go and check the register.

104
00:04:17.000 --> 00:04:18.004
Yes, that works well too.

105
00:04:18.004 --> 00:04:20.006
So now these views are being resolved by the

106
00:04:20.006 --> 00:04:22.005
internal resource view resolver.

107
00:04:22.005 --> 00:04:23.005
So always remember this,

108
00:04:23.005 --> 00:04:26.006
that your internal resource view resolver should have

109
00:04:26.006 --> 00:04:28.001
a higher order,

110
00:04:28.001 --> 00:04:32.002
which is intended to represent a very explicit mapping.

111
00:04:32.002 --> 00:04:34.009
So that's all, that's how you can chain resolvers

112
00:04:34.009 --> 00:04:37.008
and you can have multiple resolvers co-existing

113
00:04:37.008 --> 00:04:39.000
in your application.

