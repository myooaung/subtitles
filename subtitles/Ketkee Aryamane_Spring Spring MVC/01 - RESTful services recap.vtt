WEBVTT
1
00:00:00.005 --> 00:00:02.003
- [Instructor] This module will talk about

2
00:00:02.003 --> 00:00:05.004
opening up simple RESTful endpoints

3
00:00:05.004 --> 00:00:08.002
within your Spring MVC application.

4
00:00:08.002 --> 00:00:11.005
REST is a representational state transfer,

5
00:00:11.005 --> 00:00:15.002
and a RESFTful web service follows an architectural style

6
00:00:15.002 --> 00:00:17.006
which helps us access resources on the web

7
00:00:17.006 --> 00:00:21.001
and return textual representations of it.

8
00:00:21.001 --> 00:00:23.005
We can perform action on these resources

9
00:00:23.005 --> 00:00:26.004
by means of simple and well-defined operations.

10
00:00:26.004 --> 00:00:28.006
For example, you can retrieve resources,

11
00:00:28.006 --> 00:00:31.008
or you can manipulate them in the form of update and delete,

12
00:00:31.008 --> 00:00:35.001
or you can even add more resources on the server.

13
00:00:35.001 --> 00:00:37.003
RESTful web services highly promote

14
00:00:37.003 --> 00:00:40.000
interoperability between systems.

15
00:00:40.000 --> 00:00:43.003
For example, if you have a REST service coded in .NET,

16
00:00:43.003 --> 00:00:46.008
you can easily access it with a Java client.

17
00:00:46.008 --> 00:00:50.000
So even if both the systems work on different platforms

18
00:00:50.000 --> 00:00:52.007
and run in different languages, it wouldn't matter.

19
00:00:52.007 --> 00:00:55.005
They can work together in harmony.

20
00:00:55.005 --> 00:00:57.009
Whenever a client invokes a REST service,

21
00:00:57.009 --> 00:01:01.004
it will do so with the stateless HTTP protocol.

22
00:01:01.004 --> 00:01:04.004
HTTP defines a standard set of method types

23
00:01:04.004 --> 00:01:07.002
in order to define your operations:

24
00:01:07.002 --> 00:01:09.009
GET which will help you retrieve resources,

25
00:01:09.009 --> 00:01:14.000
POST and PUT which helps you update and insert resources,

26
00:01:14.000 --> 00:01:17.006
DELETE, as the name suggests, help you remove a resource.

27
00:01:17.006 --> 00:01:20.002
So whenever you develop a REST service,

28
00:01:20.002 --> 00:01:24.007
it will always comply to these specific method types.

29
00:01:24.007 --> 00:01:26.008
A typical RESTful service is identified

30
00:01:26.008 --> 00:01:30.004
with a uniform resource identifier which looks like this.

31
00:01:30.004 --> 00:01:32.003
This is basically a URL.

32
00:01:32.003 --> 00:01:35.005
The first part is the host name and the port number.

33
00:01:35.005 --> 00:01:38.008
So that's the machine on which your REST service is working.

34
00:01:38.008 --> 00:01:42.006
Whatever follows after the port number is the resource part.

35
00:01:42.006 --> 00:01:44.008
So this URL, when you invoke,

36
00:01:44.008 --> 00:01:47.006
is going to get you a list of products.

37
00:01:47.006 --> 00:01:50.001
The second one is very specific.

38
00:01:50.001 --> 00:01:55.001
It also gets you a product but with an ID of 01.

39
00:01:55.001 --> 00:01:58.003
That product ID, 01, is appended to the end of the URL

40
00:01:58.003 --> 00:02:01.000
in the form of a query parameter.

41
00:02:01.000 --> 00:02:04.001
The third one does the same job as the second one

42
00:02:04.001 --> 00:02:07.000
except that the product ID, 01, is appended

43
00:02:07.000 --> 00:02:11.000
to the end of the URL in the form of a part variable.

44
00:02:11.000 --> 00:02:13.007
Query parameters and part variables

45
00:02:13.007 --> 00:02:17.008
are means to filter the results to get specific data.

46
00:02:17.008 --> 00:02:20.004
The fourth one is identical to the first one

47
00:02:20.004 --> 00:02:23.004
but completely serves a different purpose

48
00:02:23.004 --> 00:02:24.007
because the fourth one is trying

49
00:02:24.007 --> 00:02:26.008
to make a POST type of a request

50
00:02:26.008 --> 00:02:29.008
which means you're adding a product to the service side,

51
00:02:29.008 --> 00:02:31.004
and the information of the product

52
00:02:31.004 --> 00:02:33.004
will be passed into the request body

53
00:02:33.004 --> 00:02:35.009
when this service is invoked.

54
00:02:35.009 --> 00:02:38.002
Similarly, you can define URIs

55
00:02:38.002 --> 00:02:42.007
for the other request types too, for PUT and DELETE.

56
00:02:42.007 --> 00:02:44.008
Just to make an additional point here,

57
00:02:44.008 --> 00:02:47.000
whenever you're talking about a REST service,

58
00:02:47.000 --> 00:02:49.002
the body of the request and response

59
00:02:49.002 --> 00:02:52.006
is often referred to as payload.

60
00:02:52.006 --> 00:02:56.005
Now let us talk about data transfer in REST service.

61
00:02:56.005 --> 00:02:59.001
Whenever a client invokes a REST service,

62
00:02:59.001 --> 00:03:03.004
the exchange of data happens by XML or JSON.

63
00:03:03.004 --> 00:03:05.008
JSON is JavaScript Object Notation,

64
00:03:05.008 --> 00:03:09.001
and it borrows its syntax from the JavaScript language.

65
00:03:09.001 --> 00:03:12.006
It represents data in a simple key value way.

66
00:03:12.006 --> 00:03:14.008
If you compare JSON and XML,

67
00:03:14.008 --> 00:03:17.003
XML is a little cumbersome to work with.

68
00:03:17.003 --> 00:03:18.002
It is strict.

69
00:03:18.002 --> 00:03:20.002
It requires a predefined schema.

70
00:03:20.002 --> 00:03:22.004
It is heavy and hence takes time

71
00:03:22.004 --> 00:03:24.007
to get transported over the network.

72
00:03:24.007 --> 00:03:27.000
JSON, on the other hand, is lightweight,

73
00:03:27.000 --> 00:03:29.001
just a string representation of values,

74
00:03:29.001 --> 00:03:32.001
and is very convenient to work with.

75
00:03:32.001 --> 00:03:35.002
Moreover, if your application architectures support

76
00:03:35.002 --> 00:03:38.009
AJAX design, which is Asynchronous JavaScript and XML,

77
00:03:38.009 --> 00:03:42.002
then it is a pressing need to return JSON

78
00:03:42.002 --> 00:03:44.004
as your response payload.

79
00:03:44.004 --> 00:03:47.004
This is because browsers have a limited capability

80
00:03:47.004 --> 00:03:49.000
to work with XML.

81
00:03:49.000 --> 00:03:51.009
They can very conveniently parse JSON

82
00:03:51.009 --> 00:03:54.004
and display data for your views.

83
00:03:54.004 --> 00:03:57.006
Now in Spring MVC, you have a specific view

84
00:03:57.006 --> 00:04:00.000
which is called MarshallingView.

85
00:04:00.000 --> 00:04:01.009
Marshalling is a process where you convert

86
00:04:01.009 --> 00:04:05.003
an inanimate object to an XML representation.

87
00:04:05.003 --> 00:04:07.003
So you can return this kind of a view

88
00:04:07.003 --> 00:04:09.002
from your Spring MVC controllers

89
00:04:09.002 --> 00:04:11.008
so that XML response can be rendered.

90
00:04:11.008 --> 00:04:13.006
This Marshalling view will have to specified

91
00:04:13.006 --> 00:04:15.005
in your context configuration file,

92
00:04:15.005 --> 00:04:18.001
and it is a little tedious to work with this

93
00:04:18.001 --> 00:04:20.008
if you have many kinds of data representations

94
00:04:20.008 --> 00:04:23.006
that you want to make for your clients.

95
00:04:23.006 --> 00:04:25.005
Internally, MarshallingView will use

96
00:04:25.005 --> 00:04:29.004
one of Spring's many Marshallers like JAXB2 Marshaller.

97
00:04:29.004 --> 00:04:32.004
So Marshalling of XML happens through JAXB.

98
00:04:32.004 --> 00:04:36.003
Instead, we could use Spring MVC's HTTPMessageConvertors

99
00:04:36.003 --> 00:04:38.006
used for JSON representation.

100
00:04:38.006 --> 00:04:40.008
Internally, Spring uses Jackson.

101
00:04:40.008 --> 00:04:43.000
So converting your Java object to JSON

102
00:04:43.000 --> 00:04:45.002
and JSON back to Java is very convenient

103
00:04:45.002 --> 00:04:47.004
with the help of these convertors.

104
00:04:47.004 --> 00:04:49.007
Under the hood, message convertors will use

105
00:04:49.007 --> 00:04:54.000
Jackson's Jackson 2 JSON message convertor implementation

106
00:04:54.000 --> 00:04:56.007
to do the conversion of data for you.

107
00:04:56.007 --> 00:04:59.009
It essentially means that now in your controller methods,

108
00:04:59.009 --> 00:05:02.007
you do not have to return the view name.

109
00:05:02.007 --> 00:05:04.007
If you've observed in all the controllers

110
00:05:04.007 --> 00:05:06.005
that we have returned as a part of H plus,

111
00:05:06.005 --> 00:05:09.002
we kept returning a logical view name

112
00:05:09.002 --> 00:05:10.006
in the form of a string

113
00:05:10.006 --> 00:05:14.001
which was then mapped to a JSP template.

114
00:05:14.001 --> 00:05:15.007
We no longer need to do that in REST

115
00:05:15.007 --> 00:05:19.000
because REST essentially just returns data.

