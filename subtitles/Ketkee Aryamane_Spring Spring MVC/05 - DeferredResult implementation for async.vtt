WEBVTT
1
00:00:00.001 --> 00:00:02.007
- [Instructor] Let us also see the demo of async processing

2
00:00:02.007 --> 00:00:04.007
with deferred result of string

3
00:00:04.007 --> 00:00:06.008
as a return type from your controllers.

4
00:00:06.008 --> 00:00:08.006
So let's go back to the IDE,

5
00:00:08.006 --> 00:00:10.004
and inside our search controller

6
00:00:10.004 --> 00:00:14.005
instead of returning a callable of string on line number 24

7
00:00:14.005 --> 00:00:18.007
this time I'm going to return a deferred result of string,

8
00:00:18.007 --> 00:00:23.006
so let's do that first, like that.

9
00:00:23.006 --> 00:00:26.006
And we will have to create an instance

10
00:00:26.006 --> 00:00:31.007
of this deferred result right out here.

11
00:00:31.007 --> 00:00:34.002
This will be of string,

12
00:00:34.002 --> 00:00:38.002
let's create a variable and instantiate this.

13
00:00:38.002 --> 00:00:39.009
Okay, now we have already seen

14
00:00:39.009 --> 00:00:41.006
the implementation with callable.

15
00:00:41.006 --> 00:00:43.009
Callable is executed concurrently

16
00:00:43.009 --> 00:00:45.006
on behalf of the application,

17
00:00:45.006 --> 00:00:47.001
but when you use a deferred result

18
00:00:47.001 --> 00:00:48.008
the application can produce the result

19
00:00:48.008 --> 00:00:50.008
from a thread of its choice,

20
00:00:50.008 --> 00:00:53.002
which means that this deferred result object

21
00:00:53.002 --> 00:00:55.000
that is being utilized now,

22
00:00:55.000 --> 00:00:57.000
we are supposed to manage the threads for it.

23
00:00:57.000 --> 00:00:59.008
We have the choice of managing the threads for it.

24
00:00:59.008 --> 00:01:03.007
Now what I'm going to do is on line 24

25
00:01:03.007 --> 00:01:07.007
I'm just going to autowire that async task executor object

26
00:01:07.007 --> 00:01:11.000
so that we can grab that and we can submit the task

27
00:01:11.000 --> 00:01:12.009
so that we take care of the threads,

28
00:01:12.009 --> 00:01:14.004
so let's autowire that object.

29
00:01:14.004 --> 00:01:15.009
We've already instantiated the bean

30
00:01:15.009 --> 00:01:18.002
in the spring context configuration file,

31
00:01:18.002 --> 00:01:19.008
so we need to do nothing more.

32
00:01:19.008 --> 00:01:25.008
We just need to get that instance out in this controller.

33
00:01:25.008 --> 00:01:29.005
And with the executor now I will submit

34
00:01:29.005 --> 00:01:33.003
the task myself for the entire blocking calls,

35
00:01:33.003 --> 00:01:36.003
so let's comment the portions from lines 46 to 43

36
00:01:36.003 --> 00:01:38.000
because that is the callable implementation,

37
00:01:38.000 --> 00:01:39.006
we don't want that right now,

38
00:01:39.006 --> 00:01:42.001
and instead of that we are going to go ahead

39
00:01:42.001 --> 00:01:44.007
with the deferred result implementation,

40
00:01:44.007 --> 00:01:46.002
so how will that look like?

41
00:01:46.002 --> 00:01:50.003
So we will just grab that task executor that we got hold of,

42
00:01:50.003 --> 00:01:52.009
it was labeled as executor so let me get that,

43
00:01:52.009 --> 00:01:58.001
and on this of course you can call the execute method.

44
00:01:58.001 --> 00:02:00.000
That will demand a runnable,

45
00:02:00.000 --> 00:02:01.000
and that runnable implementation

46
00:02:01.000 --> 00:02:03.001
is basically the list of blocking calls

47
00:02:03.001 --> 00:02:05.002
that will happen as part of this application,

48
00:02:05.002 --> 00:02:07.008
and for us it is basically calling the database

49
00:02:07.008 --> 00:02:11.001
to get the list of products as a database call.

50
00:02:11.001 --> 00:02:13.005
Let's write a lambda expression quickly there,

51
00:02:13.005 --> 00:02:15.005
and let's just take these lines,

52
00:02:15.005 --> 00:02:22.004
37 to 41, copy, and paste on 46.

53
00:02:22.004 --> 00:02:24.004
Once that's done of course this will demand you

54
00:02:24.004 --> 00:02:25.009
to handle the interrupted exception.

55
00:02:25.009 --> 00:02:29.004
Just surround it with try catch quickly,

56
00:02:29.004 --> 00:02:30.008
and then that's done.

57
00:02:30.008 --> 00:02:34.003
Once it is done, the difference in a deferred result

58
00:02:34.003 --> 00:02:37.001
and callable is in deferred result you will have

59
00:02:37.001 --> 00:02:39.006
to set that result explicitly, like this,

60
00:02:39.006 --> 00:02:43.001
so we want to go back to search, okay,

61
00:02:43.001 --> 00:02:46.003
and after you are out of that runnable implementation

62
00:02:46.003 --> 00:02:50.001
then you can return that entire deferred result object,

63
00:02:50.001 --> 00:02:53.004
so you need to do this explicitly for deferred result.

64
00:02:53.004 --> 00:02:55.003
Just to iterate and be clear,

65
00:02:55.003 --> 00:02:58.004
there are few things that we did a little differently

66
00:02:58.004 --> 00:02:59.009
when we were trying to return

67
00:02:59.009 --> 00:03:01.009
deferred result from this code.

68
00:03:01.009 --> 00:03:04.009
First is we instantiated the deferred result object,

69
00:03:04.009 --> 00:03:08.008
then we grabbed the thread pool task executor instance

70
00:03:08.008 --> 00:03:11.001
and wired it to our controller.

71
00:03:11.001 --> 00:03:14.005
We invoked the execute method on line 45 ourselves,

72
00:03:14.005 --> 00:03:17.003
and then finally we set the value of the result

73
00:03:17.003 --> 00:03:19.006
to the deferred result object.

74
00:03:19.006 --> 00:03:20.004
Then we see framework suggests

75
00:03:20.004 --> 00:03:21.008
that when you use deferred result

76
00:03:21.008 --> 00:03:24.005
you will have to manage the threads yourself.

77
00:03:24.005 --> 00:03:26.001
The thread pool task executor

78
00:03:26.001 --> 00:03:28.005
that we have spawned in the configuration

79
00:03:28.005 --> 00:03:30.009
is the one where you can configure your threads,

80
00:03:30.009 --> 00:03:33.009
which means define the thread pool size

81
00:03:33.009 --> 00:03:35.001
beside how much time the thread

82
00:03:35.001 --> 00:03:37.000
is going to be alive, all of that.

83
00:03:37.000 --> 00:03:40.000
So management of threads has to be done by you.

84
00:03:40.000 --> 00:03:41.009
Vis a vis, when you use callable,

85
00:03:41.009 --> 00:03:44.004
that's really not required.

86
00:03:44.004 --> 00:03:48.001
However, by default Spring employs

87
00:03:48.001 --> 00:03:52.000
a default task executor for async processing.

88
00:03:52.000 --> 00:03:55.009
The name of that is simple async task executor,

89
00:03:55.009 --> 00:03:59.000
so this is the one that we play by default

90
00:03:59.000 --> 00:04:01.008
if you do not explicitly instantiate

91
00:04:01.008 --> 00:04:04.001
thread pool task executor.

92
00:04:04.001 --> 00:04:05.008
However, if you go with the default

93
00:04:05.008 --> 00:04:07.007
implementation of async processing,

94
00:04:07.007 --> 00:04:11.001
Spring will warn you saying that this is something

95
00:04:11.001 --> 00:04:13.008
that you need to check because this task executor

96
00:04:13.008 --> 00:04:16.005
may not be able to handle the load.

97
00:04:16.005 --> 00:04:18.009
Moral of the story, when it's callable

98
00:04:18.009 --> 00:04:20.008
you do not need to do all the extra things

99
00:04:20.008 --> 00:04:23.005
that we have done right now for deferred result.

100
00:04:23.005 --> 00:04:25.009
Additionally, you need to make sure that you manage

101
00:04:25.009 --> 00:04:29.007
your threads yourself when you use deferred result.

102
00:04:29.007 --> 00:04:31.002
The rest of the code does not change,

103
00:04:31.002 --> 00:04:34.009
so I'm just going to do this build.

104
00:04:34.009 --> 00:04:37.002
The end result in the HPlus application

105
00:04:37.002 --> 00:04:39.005
in the browser is going to stay the same.

106
00:04:39.005 --> 00:04:42.000
Nothing changes there, it's only the change in the API

107
00:04:42.000 --> 00:04:44.007
that we have employed in order to run it,

108
00:04:44.007 --> 00:04:51.004
so let's go home first and click on search.

109
00:04:51.004 --> 00:04:53.006
Let me enter the search criteria.

110
00:04:53.006 --> 00:04:54.007
This is going to be the same thing.

111
00:04:54.007 --> 00:04:56.008
There is a simulation for the delay

112
00:04:56.008 --> 00:04:58.003
for the blocking call of three seconds,

113
00:04:58.003 --> 00:05:02.003
so we just going to click one, two, three,

114
00:05:02.003 --> 00:05:04.006
and it will give us the results.

115
00:05:04.006 --> 00:05:06.003
So the output also wouldn't change.

116
00:05:06.003 --> 00:05:07.006
Async is supported, yes,

117
00:05:07.006 --> 00:05:09.008
there was a separate thread with processing

118
00:05:09.008 --> 00:05:11.005
spawned by the servlet container,

119
00:05:11.005 --> 00:05:14.007
and whatever was a part of the runnable implementation

120
00:05:14.007 --> 00:05:17.003
with the task executor dot submit call,

121
00:05:17.003 --> 00:05:20.009
which is this one, that has a separate thread now,

122
00:05:20.009 --> 00:05:24.007
so those blocking calls will be handed over to this thread.

123
00:05:24.007 --> 00:05:27.004
However, as we remembered, the response is still open

124
00:05:27.004 --> 00:05:28.009
because the database call is not

125
00:05:28.009 --> 00:05:32.002
over yet from lines 51 to 54,

126
00:05:32.002 --> 00:05:35.008
so after everything is done then we set the deferred result

127
00:05:35.008 --> 00:05:40.000
and we return it, and that's how we get back to the view.

128
00:05:40.000 --> 00:05:42.004
Now of course there are many other things

129
00:05:42.004 --> 00:05:43.009
that you can do with this object.

130
00:05:43.009 --> 00:05:46.003
You have certain callbacks that you can register,

131
00:05:46.003 --> 00:05:47.007
what happens on completion,

132
00:05:47.007 --> 00:05:49.005
and all of those things can be plugged in

133
00:05:49.005 --> 00:05:50.009
easily to the application,

134
00:05:50.009 --> 00:05:53.007
but as of now for this module we're restricting ourselves

135
00:05:53.007 --> 00:05:55.007
to the discussion of only using

136
00:05:55.007 --> 00:05:57.009
the callable and deferred result.

137
00:05:57.009 --> 00:06:01.000
In addition to that, let me exhibit a quick thing.

138
00:06:01.000 --> 00:06:05.003
We are going to do this change on line 47.

139
00:06:05.003 --> 00:06:09.005
We are going to increase the delay time to six seconds.

140
00:06:09.005 --> 00:06:11.007
If you remember in an application config

141
00:06:11.007 --> 00:06:14.007
we had this delay specified to five seconds,

142
00:06:14.007 --> 00:06:18.002
so let's see how our application behaves in this case.

143
00:06:18.002 --> 00:06:21.002
So let's do the build again.

144
00:06:21.002 --> 00:06:23.007
So basically we have crossed the timeout now.

145
00:06:23.007 --> 00:06:26.005
The delay that is happening for all your blocking calls

146
00:06:26.005 --> 00:06:28.007
is six seconds, so we are crossing the timeout.

147
00:06:28.007 --> 00:06:31.001
So let's see how our application behaves.

148
00:06:31.001 --> 00:06:36.001
So let's just go to the homepage first.

149
00:06:36.001 --> 00:06:40.001
Go to search, enter some criteria.

150
00:06:40.001 --> 00:06:46.001
One, two, three, four, five, six,

151
00:06:46.001 --> 00:06:48.004
and then there's a problem.

152
00:06:48.004 --> 00:06:50.009
So if you see the console you find out

153
00:06:50.009 --> 00:06:53.009
that there is an async request timeout exception

154
00:06:53.009 --> 00:06:56.008
because the search controller is now trying

155
00:06:56.008 --> 00:06:59.007
to cause a blocking call, a delay of six seconds,

156
00:06:59.007 --> 00:07:02.002
whereas the configuration was four, five seconds,

157
00:07:02.002 --> 00:07:03.001
so how do we fix this?

158
00:07:03.001 --> 00:07:06.009
We could just grab this exception class name,

159
00:07:06.009 --> 00:07:09.006
go to our exception handler,

160
00:07:09.006 --> 00:07:12.004
and you can provide a comma-separated list

161
00:07:12.004 --> 00:07:14.004
of classes for this exception handler,

162
00:07:14.004 --> 00:07:17.007
so you can actually add on to this list.

163
00:07:17.007 --> 00:07:22.003
Let's import that class and say dot class.

164
00:07:22.003 --> 00:07:25.008
So basically whenever this exception occurs in your code,

165
00:07:25.008 --> 00:07:28.008
that's also going to be taken care of by exception handler,

166
00:07:28.008 --> 00:07:30.001
and it is just going to tell the user

167
00:07:30.001 --> 00:07:33.001
that something went wrong and it'll display the error page.

168
00:07:33.001 --> 00:07:35.009
So let's go ahead and stop this

169
00:07:35.009 --> 00:07:39.006
and run the build again to see this working.

170
00:07:39.006 --> 00:07:42.000
So the point of doing this is basically

171
00:07:42.000 --> 00:07:46.003
we do not want to see this HTTP Status 503 error page.

172
00:07:46.003 --> 00:07:49.007
We want to see our error page, so let's monitor the build.

173
00:07:49.007 --> 00:07:51.002
Okay, the build has gone well.

174
00:07:51.002 --> 00:07:58.002
Let's go ahead and access home and go to search,

175
00:07:58.002 --> 00:08:04.004
enter the criteria, and wait and see what happens now.

176
00:08:04.004 --> 00:08:06.000
Yes, that looks perfect.

177
00:08:06.000 --> 00:08:08.001
So now we are driven to our error page

178
00:08:08.001 --> 00:08:11.000
rather than getting that HTTP Status 503 exception.

179
00:08:11.000 --> 00:08:13.008
So this is how you can have multiple exceptions

180
00:08:13.008 --> 00:08:15.009
being handled by the same exception handler.

181
00:08:15.009 --> 00:08:18.001
Of course you may have a way better design

182
00:08:18.001 --> 00:08:20.001
of how you want to have your exceptions handled,

183
00:08:20.001 --> 00:08:21.005
but this is just to make sure

184
00:08:21.005 --> 00:08:24.003
that we understand that exception handler

185
00:08:24.003 --> 00:08:27.000
can be used for multiple exceptions.

