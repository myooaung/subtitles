WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] Now that we have created a basic

2
00:00:02.000 --> 00:00:05.002
Spring MVC project using Spring Boot, let us deep-dive into

3
00:00:05.002 --> 00:00:08.003
the Controllers concept for Spring MVC.

4
00:00:08.003 --> 00:00:10.008
Now we already know that Controllers is basically the

5
00:00:10.008 --> 00:00:14.001
C component of Spring MVC and in order that

6
00:00:14.001 --> 00:00:15.009
it gets designated as a Controller you

7
00:00:15.009 --> 00:00:20.000
have to annotate its class with @Controller annotation.

8
00:00:20.000 --> 00:00:23.009
We have already done this inside the home Controller before.

9
00:00:23.009 --> 00:00:26.007
There are few Controller specific annotations and objects

10
00:00:26.007 --> 00:00:29.007
that we definitely need to know of before we start

11
00:00:29.007 --> 00:00:32.004
implementing the use cases for the HPlus application

12
00:00:32.004 --> 00:00:36.000
so that when we implement them it'll be comfortable for us.

13
00:00:36.000 --> 00:00:39.009
The first one in that list is @RequestParam.

14
00:00:39.009 --> 00:00:43.000
This annotation is primarily to make sure

15
00:00:43.000 --> 00:00:45.000
that you receive the request parameters from

16
00:00:45.000 --> 00:00:48.005
the incoming HTTP request inside your Controller.

17
00:00:48.005 --> 00:00:51.009
So if you attach this annotation at your method argument

18
00:00:51.009 --> 00:00:55.000
then you will be able to extract those values.

19
00:00:55.000 --> 00:00:58.001
The next one is Model or ModelMap.

20
00:00:58.001 --> 00:01:00.000
Model is an interface and ModelMap

21
00:01:00.000 --> 00:01:02.002
is an implementation of that interface.

22
00:01:02.002 --> 00:01:05.008
And both of these can be used to store the information

23
00:01:05.008 --> 00:01:09.001
for your views in the form of key end value params.

24
00:01:09.001 --> 00:01:12.000
So the data that you want to display on your JSP pages

25
00:01:12.000 --> 00:01:15.005
can be stored inside either of them.

26
00:01:15.005 --> 00:01:18.009
ModelAndView also pretty much serves the same purpose.

27
00:01:18.009 --> 00:01:21.006
The difference being that this object can

28
00:01:21.006 --> 00:01:25.001
allow you to hold the name of the view and the data

29
00:01:25.001 --> 00:01:28.005
on the JSP in one single return type.

30
00:01:28.005 --> 00:01:31.003
Just to be clear, in our previous demo the Controller

31
00:01:31.003 --> 00:01:32.008
method had a return type of String and

32
00:01:32.008 --> 00:01:35.006
we returned to the name of the View.

33
00:01:35.006 --> 00:01:38.004
ModelAndView can help us contain both,

34
00:01:38.004 --> 00:01:40.008
the name of the View and the data

35
00:01:40.008 --> 00:01:43.006
that we want to display on the JSP.

36
00:01:43.006 --> 00:01:47.004
Lastly, there is another annotation called @ModelAttribute

37
00:01:47.004 --> 00:01:49.005
and this is one of the most crucial ones that

38
00:01:49.005 --> 00:01:52.001
we want to use as a part of Spring MVC.

39
00:01:52.001 --> 00:01:55.000
This facilitates data binding.

40
00:01:55.000 --> 00:01:56.006
Now what is data binding?

41
00:01:56.006 --> 00:02:00.002
Let's say you have a form and you have many fields for it,

42
00:02:00.002 --> 00:02:04.001
when you submit that form you have to convert

43
00:02:04.001 --> 00:02:07.000
those form fields into a JAVA object

44
00:02:07.000 --> 00:02:10.001
so that you can use it for further processing.

45
00:02:10.001 --> 00:02:13.008
Conversely, when you go from your Controller to the View

46
00:02:13.008 --> 00:02:16.005
you need to be able to use that JAVA object to

47
00:02:16.005 --> 00:02:20.004
display the values on your JSP pages.

48
00:02:20.004 --> 00:02:24.007
Now, if you do this conventionally using the server JSP API

49
00:02:24.007 --> 00:02:26.008
you will have to invoke the request or get

50
00:02:26.008 --> 00:02:30.004
parameter method for every field on the form.

51
00:02:30.004 --> 00:02:33.009
It is quite a painful process and it is also prone

52
00:02:33.009 --> 00:02:38.001
to errors but this @ModelAttribute annotation

53
00:02:38.001 --> 00:02:41.007
that we have in Spring MVC will do that job for us.

54
00:02:41.007 --> 00:02:44.002
So when you attach this @ModelAttribute to the

55
00:02:44.002 --> 00:02:48.001
method argument or on a method level then Spring MVC

56
00:02:48.001 --> 00:02:51.000
is going to take care for auto conversion and

57
00:02:51.000 --> 00:02:55.004
parsing of those form fields into a JAVA object.

58
00:02:55.004 --> 00:02:59.006
So basically it will do the job of data binding for you.

59
00:02:59.006 --> 00:03:03.009
Now, in the next demo we are going to implement

60
00:03:03.009 --> 00:03:07.007
the Search use case in our HPlus application.

61
00:03:07.007 --> 00:03:09.001
So what is that use case exactly?

62
00:03:09.001 --> 00:03:12.005
Let's go back to our application that was running.

63
00:03:12.005 --> 00:03:16.002
So if you see on our home page we have this search hyperlink

64
00:03:16.002 --> 00:03:18.005
so when I click on search hyperlink I will get a

65
00:03:18.005 --> 00:03:21.009
text box for searching a product name, I can enter some text

66
00:03:21.009 --> 00:03:23.006
and then I can search for the products.

67
00:03:23.006 --> 00:03:25.006
That link is not implemented yes so I cannot show

68
00:03:25.006 --> 00:03:27.007
you the entire page but that's exactly what

69
00:03:27.007 --> 00:03:31.000
we are trying to implement as a part of the use case.

70
00:03:31.000 --> 00:03:32.007
How are we going to implement this?

71
00:03:32.007 --> 00:03:34.009
So there will be a JSP that we have.

72
00:03:34.009 --> 00:03:37.002
From the JSP we are going to make sure that

73
00:03:37.002 --> 00:03:40.004
we hit a request to one of our Controller classes.

74
00:03:40.004 --> 00:03:42.003
The Controller class is then going to

75
00:03:42.003 --> 00:03:44.006
give a call to the repository class.

76
00:03:44.006 --> 00:03:46.006
Now the repository class is a part

77
00:03:46.006 --> 00:03:50.009
of the Spring Java persistence API, JPA integration.

78
00:03:50.009 --> 00:03:52.007
We've already said before that I'm going to work

79
00:03:52.007 --> 00:03:56.001
with Spring JPA inside that application.

80
00:03:56.001 --> 00:03:59.001
So this is an optional class, you can either have a

81
00:03:59.001 --> 00:04:02.000
JDBC class or a HyperNet class or any other

82
00:04:02.000 --> 00:04:04.007
on the line database interaction that you want to use.

83
00:04:04.007 --> 00:04:06.002
So the flow will be like this,

84
00:04:06.002 --> 00:04:09.005
we will come to JSP and then we have to go to Controller and

85
00:04:09.005 --> 00:04:12.007
then the repository, get all the data from the database,

86
00:04:12.007 --> 00:04:14.005
come back to controller and display

87
00:04:14.005 --> 00:04:17.001
all the search results back on the JSP.

88
00:04:17.001 --> 00:04:20.000
So we will start with the demo in the next video.

