WEBVTT
1
00:00:00.005 --> 00:00:01.007
- [Instructor] So let's now do a demo

2
00:00:01.007 --> 00:00:05.002
with the JSR validations with Spring MVC.

3
00:00:05.002 --> 00:00:09.001
Before we do that, let's quickly see something.

4
00:00:09.001 --> 00:00:12.002
Under your external libraries,

5
00:00:12.002 --> 00:00:14.008
if you see, you have Javax validation API

6
00:00:14.008 --> 00:00:16.006
already included for you.

7
00:00:16.006 --> 00:00:19.005
Now this is a specification, which means

8
00:00:19.005 --> 00:00:21.007
you need some library which has implemented

9
00:00:21.007 --> 00:00:24.000
those interfaces and provided logic.

10
00:00:24.000 --> 00:00:26.008
Now that also is available to you as a part

11
00:00:26.008 --> 00:00:28.004
of the Spring Boot project.

12
00:00:28.004 --> 00:00:31.005
So if you go right down, you see hibernate validator,

13
00:00:31.005 --> 00:00:34.006
org.hibernator.validator library.

14
00:00:34.006 --> 00:00:36.003
That's the one which is going to provide us

15
00:00:36.003 --> 00:00:38.004
with all the necessary implementations

16
00:00:38.004 --> 00:00:40.008
from the JSR-380 API.

17
00:00:40.008 --> 00:00:42.005
Now please note that hibernate validator

18
00:00:42.005 --> 00:00:44.000
is not related to persistence,

19
00:00:44.000 --> 00:00:45.007
it is solely an implementation

20
00:00:45.007 --> 00:00:49.003
for the javax.validation package that we have

21
00:00:49.003 --> 00:00:51.009
as a part of JSR-380.

22
00:00:51.009 --> 00:00:55.003
So, let's minimize this,

23
00:00:55.003 --> 00:00:57.003
and let's see what steps do we have to carry out

24
00:00:57.003 --> 00:00:58.008
in order to do the validations.

25
00:00:58.008 --> 00:01:02.001
The first is, we have to insert JSR-380 validation

26
00:01:02.001 --> 00:01:05.008
annotations in user.javabean, so that's the one

27
00:01:05.008 --> 00:01:08.000
that you are using for the registration form

28
00:01:08.000 --> 00:01:10.006
and we're going to make sure that we have

29
00:01:10.006 --> 00:01:13.007
few annotations added to this class.

30
00:01:13.007 --> 00:01:16.000
So let's start off with the username.

31
00:01:16.000 --> 00:01:18.005
There are a lot of validation constraints available

32
00:01:18.005 --> 00:01:19.007
in the form of annotations.

33
00:01:19.007 --> 00:01:21.008
I am going to use some of them

34
00:01:21.008 --> 00:01:24.005
on some of the fields on this form.

35
00:01:24.005 --> 00:01:26.003
So let's say for username we want to carry out

36
00:01:26.003 --> 00:01:28.003
a validation for the size.

37
00:01:28.003 --> 00:01:31.007
There is an annotation called @size.

38
00:01:31.007 --> 00:01:35.009
That's the one, javax.validation.constraints

39
00:01:35.009 --> 00:01:41.003
and you can specify a size, so let's say min is six

40
00:01:41.003 --> 00:01:43.009
and if it does not comply to this validation,

41
00:01:43.009 --> 00:01:46.008
you can also provide a message.

42
00:01:46.008 --> 00:01:48.001
Now please understand this.

43
00:01:48.001 --> 00:01:51.001
There will be a default message that is configured

44
00:01:51.001 --> 00:01:54.003
for the @size annotation, but we do not want to

45
00:01:54.003 --> 00:01:56.009
display the default message, we want to customize it

46
00:01:56.009 --> 00:01:58.006
according to our application.

47
00:01:58.006 --> 00:02:00.006
So I'm going to override that message

48
00:02:00.006 --> 00:02:03.002
by setting that attribute right there.

49
00:02:03.002 --> 00:02:08.008
So I'm going to say, username cannot be less

50
00:02:08.008 --> 00:02:11.005
than six characters.

51
00:02:11.005 --> 00:02:14.001
So that's the message I want when this validation

52
00:02:14.001 --> 00:02:16.003
on username is going to fail.

53
00:02:16.003 --> 00:02:18.002
Okay, let's look at another one.

54
00:02:18.002 --> 00:02:21.009
Let's go to the password field and try to put

55
00:02:21.009 --> 00:02:24.002
another annotation for validation.

56
00:02:24.002 --> 00:02:27.001
This time we'll go with pattern.

57
00:02:27.001 --> 00:02:30.007
This is basically to insert any kind of regular expression

58
00:02:30.007 --> 00:02:33.003
that you want to apply on that input field.

59
00:02:33.003 --> 00:02:36.007
So for password, I am going to say regesp,

60
00:02:36.007 --> 00:02:38.007
that's the attribute that you have to define

61
00:02:38.007 --> 00:02:42.000
and let's try defining a regular expression now.

62
00:02:42.000 --> 00:02:43.009
So I'm going to first use the codes

63
00:02:43.009 --> 00:02:47.006
and then I'm going to define a regular expression.

64
00:02:47.006 --> 00:02:49.005
Now please note that this can be any kind of

65
00:02:49.005 --> 00:02:51.002
regular expression that you wish to have

66
00:02:51.002 --> 00:02:54.001
for the password field in your application.

67
00:02:54.001 --> 00:02:56.001
So I'm just going to write a simple one,

68
00:02:56.001 --> 00:03:01.003
let's say that we need something like this,

69
00:03:01.003 --> 00:03:04.007
so we need at least one capital letter

70
00:03:04.007 --> 00:03:11.005
and then we also want to make sure that we have

71
00:03:11.005 --> 00:03:20.001
a range of the password between six and 10 characters.

72
00:03:20.001 --> 00:03:22.002
And, instead of the default message,

73
00:03:22.002 --> 00:03:24.003
you can provide a message of your own,

74
00:03:24.003 --> 00:03:31.006
which says password must have one uppercase,

75
00:03:31.006 --> 00:03:44.000
one lowercase and should be between six and ten characters.

76
00:03:44.000 --> 00:03:45.008
So this can be as descriptive as possible,

77
00:03:45.008 --> 00:03:48.007
it's totally left to the design of your application.

78
00:03:48.007 --> 00:03:51.006
So we have done @size, we have done @pattern,

79
00:03:51.006 --> 00:03:54.001
let's have one more, down there on activity,

80
00:03:54.001 --> 00:03:58.007
I'm going to just insert not null for activity

81
00:03:58.007 --> 00:04:07.004
and let's say message, activity cannot be left empty.

82
00:04:07.004 --> 00:04:08.008
Okay.

83
00:04:08.008 --> 00:04:10.006
Another one, maybe for the first name,

84
00:04:10.006 --> 00:04:15.001
this time we'll use not empty as the annotation

85
00:04:15.001 --> 00:04:18.008
and the message again can be overridden with your

86
00:04:18.008 --> 00:04:25.008
customized message saying, first name cannot be empty.

87
00:04:25.008 --> 00:04:28.004
Okay, so these are just a few annotations

88
00:04:28.004 --> 00:04:29.007
that I have used in my form.

89
00:04:29.007 --> 00:04:32.006
There's a whole store of such annotations for validations

90
00:04:32.006 --> 00:04:34.009
that you can find on the official documentation

91
00:04:34.009 --> 00:04:39.000
of GSR-380 or even the hibernate validator implementation.

92
00:04:39.000 --> 00:04:41.009
So you can go and check it out and explore it further.

93
00:04:41.009 --> 00:04:45.000
The next step will be to enable the controller

94
00:04:45.000 --> 00:04:47.002
with @valid annotation.

95
00:04:47.002 --> 00:04:48.004
So what's this about?

96
00:04:48.004 --> 00:04:52.009
We have inserted all the annotations inside the JavaBean

97
00:04:52.009 --> 00:04:55.007
but then as we said, we also have to tell Spring MVC

98
00:04:55.007 --> 00:04:57.004
that we are going to carry out validations

99
00:04:57.004 --> 00:04:59.001
according to GSR-380.

100
00:04:59.001 --> 00:05:03.001
So for that, let's go to the controller,

101
00:05:03.001 --> 00:05:06.001
which is the registration controller

102
00:05:06.001 --> 00:05:09.000
and the line where you're trying to have

103
00:05:09.000 --> 00:05:11.008
a model attribute attached, line number 18,

104
00:05:11.008 --> 00:05:15.002
we have the @modelattribute that is tied up

105
00:05:15.002 --> 00:05:18.006
to the method signature, so just before that,

106
00:05:18.006 --> 00:05:20.003
we're going to use another validation

107
00:05:20.003 --> 00:05:22.008
which is called @valid.

108
00:05:22.008 --> 00:05:25.003
So this is a signal to the Spring MVC framework

109
00:05:25.003 --> 00:05:29.001
that hey, I have used javax annotation for validations

110
00:05:29.001 --> 00:05:32.002
inside the bean and whenever you're trying to do

111
00:05:32.002 --> 00:05:34.005
data binding for the user bean,

112
00:05:34.005 --> 00:05:37.005
make sure that you first run the validations.

113
00:05:37.005 --> 00:05:42.005
That is what you tell by @validannotation.

114
00:05:42.005 --> 00:05:45.007
The next will be attach a binding result parameter

115
00:05:45.007 --> 00:05:46.009
to the method.

116
00:05:46.009 --> 00:05:49.007
What this means is that let's say, one spring

117
00:05:49.007 --> 00:05:53.007
carries out all the validations on this model attribute

118
00:05:53.007 --> 00:05:57.007
of new user and let's say, some of the validations fail,

119
00:05:57.007 --> 00:06:01.001
then in that case, it is going to populate the errors

120
00:06:01.001 --> 00:06:05.009
in a special object, that is binding result.

121
00:06:05.009 --> 00:06:08.002
The binding result object has to be placed

122
00:06:08.002 --> 00:06:14.009
immediately next to the model attribute, that way.

123
00:06:14.009 --> 00:06:17.001
Please remember this, this is a condition

124
00:06:17.001 --> 00:06:19.002
that Spring presses on you.

125
00:06:19.002 --> 00:06:22.005
This object of binding result is going to follow

126
00:06:22.005 --> 00:06:26.000
the @modelattribute and addition.

127
00:06:26.000 --> 00:06:27.008
So that is what this is talking about.

128
00:06:27.008 --> 00:06:31.003
You're to attach the binding result parameter to the method

129
00:06:31.003 --> 00:06:33.003
and the other thing that we have to do is,

130
00:06:33.003 --> 00:06:36.002
let's come inside and let's say,

131
00:06:36.002 --> 00:06:37.008
once the validations are carried out,

132
00:06:37.008 --> 00:06:39.006
I'm just going to put a simple check.

133
00:06:39.006 --> 00:06:42.008
I'm going to say, if this result has errors,

134
00:06:42.008 --> 00:06:45.002
which means some of the validations fail,

135
00:06:45.002 --> 00:06:49.005
then we just return to the register right from here.

136
00:06:49.005 --> 00:06:52.005
Let's return to the register view and inform the user,

137
00:06:52.005 --> 00:06:54.008
hey, you've got some problems with your input,

138
00:06:54.008 --> 00:06:56.000
you have to correct them.

