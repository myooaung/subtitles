WEBVTT
1
00:00:00.005 --> 00:00:02.002
- So let's now go to Postman tool

2
00:00:02.002 --> 00:00:05.005
and test out the three cases that we have.

3
00:00:05.005 --> 00:00:08.001
So I'm going to create a new request.

4
00:00:08.001 --> 00:00:19.007
Let's say http://localhost8080/hplus/thatsrest

5
00:00:19.007 --> 00:00:22.006
and then we have login user,

6
00:00:22.006 --> 00:00:24.005
that's the service that we want to test.

7
00:00:24.005 --> 00:00:26.008
So let's go back to the ID and confirm that we

8
00:00:26.008 --> 00:00:29.003
are accessing the correct URL pattern.

9
00:00:29.003 --> 00:00:30.006
Yeah, that's the one.

10
00:00:30.006 --> 00:00:33.003
Now we'll first test the success case,

11
00:00:33.003 --> 00:00:36.002
which will give us a response of everything is okay,

12
00:00:36.002 --> 00:00:38.001
and then let's test the other ones.

13
00:00:38.001 --> 00:00:40.001
So this will change to post, of course.

14
00:00:40.001 --> 00:00:42.003
And then we have to send a request body,

15
00:00:42.003 --> 00:00:43.006
this is a post request,

16
00:00:43.006 --> 00:00:45.004
which means the information that you want to send

17
00:00:45.004 --> 00:00:47.005
along with the service will go in the body.

18
00:00:47.005 --> 00:00:50.004
So I'm just going to click on body, select a row,

19
00:00:50.004 --> 00:00:53.000
and select application Jason as the format of the data

20
00:00:53.000 --> 00:00:54.002
in the request body.

21
00:00:54.002 --> 00:00:57.008
So let's provide a Jason, the Jason will look like this.

22
00:00:57.008 --> 00:00:58.009
It will have two fields,

23
00:00:58.009 --> 00:01:02.008
username: that is admin,

24
00:01:02.008 --> 00:01:09.002
and then you have password, admin again.

25
00:01:09.002 --> 00:01:11.009
That's the Jason that is going to go in the request body

26
00:01:11.009 --> 00:01:15.003
when the service gets invoked via a post request.

27
00:01:15.003 --> 00:01:16.004
Let's find out how this works,

28
00:01:16.004 --> 00:01:19.003
let's click consent and we see that

29
00:01:19.003 --> 00:01:20.008
the status is okay.

30
00:01:20.008 --> 00:01:24.005
It was an okay request, which means it went to

31
00:01:24.005 --> 00:01:26.000
the repository against the database,

32
00:01:26.000 --> 00:01:27.007
checked everything, everything was okay.

33
00:01:27.007 --> 00:01:30.004
But if you also want some descriptive response

34
00:01:30.004 --> 00:01:31.004
given back to the client,

35
00:01:31.004 --> 00:01:34.003
you can also include a string saying that

36
00:01:34.003 --> 00:01:35.004
welcome admin.

37
00:01:35.004 --> 00:01:37.003
So let's quickly also do that.

38
00:01:37.003 --> 00:01:42.007
We have here we can include welcome,

39
00:01:42.007 --> 00:01:44.009
and then

40
00:01:44.009 --> 00:01:48.000
user.getusername

41
00:01:48.000 --> 00:01:50.003
and then the next parameter is okay.

42
00:01:50.003 --> 00:01:51.005
So you can do this.

43
00:01:51.005 --> 00:01:55.007
So let's quickly build this.

44
00:01:55.007 --> 00:01:57.002
So it is built well,

45
00:01:57.002 --> 00:02:00.001
let's go back to Postman and hit that request again

46
00:02:00.001 --> 00:02:03.002
with exactly the same credentials for a success case.

47
00:02:03.002 --> 00:02:05.005
So this time, you will have your response back there

48
00:02:05.005 --> 00:02:07.002
on your Postman tool.

49
00:02:07.002 --> 00:02:09.008
So now, both the status and the response is something

50
00:02:09.008 --> 00:02:12.004
that you, as a developer, can control.

51
00:02:12.004 --> 00:02:14.001
Let's check the other case.

52
00:02:14.001 --> 00:02:16.009
I am going to test out the case where

53
00:02:16.009 --> 00:02:18.004
the user can't be found.

54
00:02:18.004 --> 00:02:21.005
So no user.

55
00:02:21.005 --> 00:02:22.003
No.

56
00:02:22.003 --> 00:02:25.005
This user does not exist in the database at all.

57
00:02:25.005 --> 00:02:27.004
So let's hit this and see what happens.

58
00:02:27.004 --> 00:02:30.007
Here, so you see, there we got 404 now.

59
00:02:30.007 --> 00:02:33.007
And this is the correct response that you're trying

60
00:02:33.007 --> 00:02:35.004
to get the client,

61
00:02:35.004 --> 00:02:37.009
so that the client is aware that this user never existed

62
00:02:37.009 --> 00:02:39.000
in the system.

63
00:02:39.000 --> 00:02:41.005
Additionally we can also have a good string response

64
00:02:41.005 --> 00:02:42.004
coming back,

65
00:02:42.004 --> 00:02:45.002
so let's go to the IDE and instead of this,

66
00:02:45.002 --> 00:02:47.001
you can actually return a similar kind of

67
00:02:47.001 --> 00:02:49.001
return from line 31.

68
00:02:49.001 --> 00:02:52.007
Let's come back here, line 27.

69
00:02:52.007 --> 00:02:56.006
I'm pasting it on line 27, commenting like 26,

70
00:02:56.006 --> 00:03:00.002
and this is just another way of trying to send 404

71
00:03:00.002 --> 00:03:01.004
back to the client.

72
00:03:01.004 --> 00:03:04.004
So sometimes you just want to send a 404 instead of just

73
00:03:04.004 --> 00:03:05.009
trying to have a descriptive message.

74
00:03:05.009 --> 00:03:07.009
So it is up to the application design,

75
00:03:07.009 --> 00:03:10.004
it is up to how you design your restful services,

76
00:03:10.004 --> 00:03:13.001
what kind of strategy you have decided

77
00:03:13.001 --> 00:03:15.000
in order to get the response back to the client.

78
00:03:15.000 --> 00:03:16.009
Everything depends on that.

79
00:03:16.009 --> 00:03:19.009
But line 26 was coded just to show you that

80
00:03:19.009 --> 00:03:23.004
this is another way of getting 404 back to the client.

81
00:03:23.004 --> 00:03:26.008
So I'm just going to say,

82
00:03:26.008 --> 00:03:28.006
just put a message saying

83
00:03:28.006 --> 00:03:33.009
user not found.

84
00:03:33.009 --> 00:03:35.008
Let's build this.

85
00:03:35.008 --> 00:03:38.006
So just a point to be noted here is that

86
00:03:38.006 --> 00:03:41.009
generally the consumers of these rest services

87
00:03:41.009 --> 00:03:43.008
are nothing but other applications,

88
00:03:43.008 --> 00:03:47.003
and these are mostly consumed by the developers

89
00:03:47.003 --> 00:03:48.003
in their code.

90
00:03:48.003 --> 00:03:49.008
So it could be an Ajax request,

91
00:03:49.008 --> 00:03:51.008
or it could be another Java application.

92
00:03:51.008 --> 00:03:54.004
So just returning 404 is enough sometimes,

93
00:03:54.004 --> 00:03:56.003
but it's always better to even attach

94
00:03:56.003 --> 00:03:57.008
some description with it.

95
00:03:57.008 --> 00:04:00.008
So let's go ahead and hit that request again,

96
00:04:00.008 --> 00:04:02.006
and this time you'll get a user not found

97
00:04:02.006 --> 00:04:04.009
along with the status code as 200,

98
00:04:04.009 --> 00:04:06.008
and I think we made a mistake there,

99
00:04:06.008 --> 00:04:09.004
because this one was not supposed to be okay.

100
00:04:09.004 --> 00:04:12.003
It was supposed to be not found.

101
00:04:12.003 --> 00:04:13.006
That's the one.

102
00:04:13.006 --> 00:04:17.005
Let's build this again and make sure that we have the

103
00:04:17.005 --> 00:04:22.004
status code correctly in the client response.

104
00:04:22.004 --> 00:04:26.004
So let's hit that again, and this time you have 404

105
00:04:26.004 --> 00:04:28.002
and you have a description also

106
00:04:28.002 --> 00:04:30.003
stating that the user was not found.

107
00:04:30.003 --> 00:04:33.005
The last case is where you have the correct user name,

108
00:04:33.005 --> 00:04:36.003
let's say, and the wrong password.

109
00:04:36.003 --> 00:04:38.006
Let's see how this behaves.

110
00:04:38.006 --> 00:04:41.005
Right, so the exception handling worked perfectly for us.

111
00:04:41.005 --> 00:04:44.000
It gave us a result of 403,

112
00:04:44.000 --> 00:04:47.003
which was the forbidden status code that we responded.

113
00:04:47.003 --> 00:04:49.009
And also a message attached to it, which actually was

114
00:04:49.009 --> 00:04:52.005
extracted from our exception object.

115
00:04:52.005 --> 00:04:55.002
So what happened here is that when we through this,

116
00:04:55.002 --> 00:04:57.008
it went to the application exception handler

117
00:04:57.008 --> 00:05:00.003
and it responded with a forbidden status code

118
00:05:00.003 --> 00:05:04.002
along with the message that came in with the exception.

119
00:05:04.002 --> 00:05:08.002
So this was an additional point that we wanted to ensure

120
00:05:08.002 --> 00:05:09.006
that we look at.

121
00:05:09.006 --> 00:05:13.002
In exception handler you also can grab the exception object

122
00:05:13.002 --> 00:05:14.007
that was thrown.

123
00:05:14.007 --> 00:05:18.002
So this is it, this is how you can design your basic

124
00:05:18.002 --> 00:05:20.006
restful end points in Spring MVC Application.

125
00:05:20.006 --> 00:05:22.004
Of course Spring has a very big module

126
00:05:22.004 --> 00:05:25.006
called Spring Rest, where you can do even more stuff

127
00:05:25.006 --> 00:05:28.004
with designing and development of restful services.

128
00:05:28.004 --> 00:05:30.009
But these are just the basics of restful endpoints

129
00:05:30.009 --> 00:05:35.000
that we wanted to show as a part of Spring MVC course.

