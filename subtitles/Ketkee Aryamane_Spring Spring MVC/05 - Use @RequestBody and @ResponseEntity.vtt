WEBVTT
1
00:00:00.005 --> 00:00:05.000
- Now let's use the next annotation which is @RequestBody.

2
00:00:05.000 --> 00:00:07.000
We have used @ResponseBody,

3
00:00:07.000 --> 00:00:09.003
with the @Controller annotation before.

4
00:00:09.003 --> 00:00:12.001
Now let us quickly look at @RequestBody.

5
00:00:12.001 --> 00:00:15.008
This is very similar to the @ModelAttribute annotation

6
00:00:15.008 --> 00:00:18.006
that we have used in our MVC controllers.

7
00:00:18.006 --> 00:00:21.002
So if you can recall that entire discussion,

8
00:00:21.002 --> 00:00:23.005
we said that when a form gets submitted,

9
00:00:23.005 --> 00:00:26.000
all the values on the form should be

10
00:00:26.000 --> 00:00:28.001
bound to a Java object so that it is

11
00:00:28.001 --> 00:00:30.000
available for further processing.

12
00:00:30.000 --> 00:00:33.003
A very similar task is going to be done by RequestBody.

13
00:00:33.003 --> 00:00:35.005
When you call your RESTful services and

14
00:00:35.005 --> 00:00:38.001
pass data in the form of, let's say JSON,

15
00:00:38.001 --> 00:00:41.000
then that JSON can be converted to a Java object

16
00:00:41.000 --> 00:00:44.004
using the @RequestBody annotation.

17
00:00:44.004 --> 00:00:45.009
So let's find out how to do that.

18
00:00:45.009 --> 00:00:47.003
Let's go to the IDE.

19
00:00:47.003 --> 00:00:50.004
Let's make another controller class now.

20
00:00:50.004 --> 00:00:52.006
Let's say

21
00:00:52.006 --> 00:00:55.008
LoginRestController.

22
00:00:55.008 --> 00:01:00.004
And I'm going to annotate this with REST controller now.

23
00:01:00.004 --> 00:01:04.007
And let's say this has got a PostMapping this time

24
00:01:04.007 --> 00:01:06.009
because it is a login flow.

25
00:01:06.009 --> 00:01:08.009
Let's give it a URL pattern so say

26
00:01:08.009 --> 00:01:14.003
/hplus/rest/

27
00:01:14.003 --> 00:01:16.001
loginuser maybe

28
00:01:16.001 --> 00:01:18.006
and follow this with a method.

29
00:01:18.006 --> 00:01:19.006
And now this time,

30
00:01:19.006 --> 00:01:22.005
it is going to return again a response entity

31
00:01:22.005 --> 00:01:24.008
and what are we going to say?

32
00:01:24.008 --> 00:01:27.002
Let's say the method name is loginuser

33
00:01:27.002 --> 00:01:33.002
and to this method we are now going to annotate @RequestBody

34
00:01:33.002 --> 00:01:38.000
and this one should map to our login form.

35
00:01:38.000 --> 00:01:39.008
We already have a login bean.

36
00:01:39.008 --> 00:01:42.000
Just let's go and recap quickly.

37
00:01:42.000 --> 00:01:43.004
This is the login bean that we had created

38
00:01:43.004 --> 00:01:45.005
way before in our MVC demos and

39
00:01:45.005 --> 00:01:46.008
we had username and password.

40
00:01:46.008 --> 00:01:48.007
We are just going to reuse that bean

41
00:01:48.007 --> 00:01:50.007
inside the login REST controller.

42
00:01:50.007 --> 00:01:52.000
So we are saying that,

43
00:01:52.000 --> 00:01:56.001
whenever a request comes for this particular method,

44
00:01:56.001 --> 00:01:58.009
then the incoming request body is supposed to be

45
00:01:58.009 --> 00:02:00.007
converted to this object.

46
00:02:00.007 --> 00:02:03.005
That is what this means.

47
00:02:03.005 --> 00:02:04.008
Next, let's just go ahead and

48
00:02:04.008 --> 00:02:06.002
make sure that we get the data correctly.

49
00:02:06.002 --> 00:02:11.002
So I'm just going to say login.getUsername

50
00:02:11.002 --> 00:02:14.009
along with the password.

51
00:02:14.009 --> 00:02:18.003
And then, we are going to autowire the user repository.

52
00:02:18.003 --> 00:02:19.007
We already have that in place.

53
00:02:19.007 --> 00:02:22.007
So on line 11, I'm going to just say

54
00:02:22.007 --> 00:02:23.008
That's line 12

55
00:02:23.008 --> 00:02:29.008
So @Autowired and say private UserRepository

56
00:02:29.008 --> 00:02:31.004
We need this to call any methods

57
00:02:31.004 --> 00:02:33.006
on a user table of the database.

58
00:02:33.006 --> 00:02:36.000
So let's come down there and say,

59
00:02:36.000 --> 00:02:39.005
User bean

60
00:02:39.005 --> 00:02:43.004
getting assigned to UserRepository

61
00:02:43.004 --> 00:02:44.008
dot

62
00:02:44.008 --> 00:02:46.008
searchByName

63
00:02:46.008 --> 00:02:50.004
And this name will be given an argument

64
00:02:50.004 --> 00:02:52.001
of login.getUsername,

65
00:02:52.001 --> 00:02:54.007
that's the one we are getting from the request.

66
00:02:54.007 --> 00:02:56.000
So once this happens,

67
00:02:56.000 --> 00:02:58.004
then we can say if

68
00:02:58.004 --> 00:03:01.009
user is null,

69
00:03:01.009 --> 00:03:03.003
so what is it that we have to do here?

70
00:03:03.003 --> 00:03:04.003
If the user is null,

71
00:03:04.003 --> 00:03:07.005
which means the user was never found in the system.

72
00:03:07.005 --> 00:03:09.004
And in that case, what we could do is,

73
00:03:09.004 --> 00:03:11.008
we say return

74
00:03:11.008 --> 00:03:13.008
ResponseEntity

75
00:03:13.008 --> 00:03:14.006
dot

76
00:03:14.006 --> 00:03:16.008
status

77
00:03:16.008 --> 00:03:19.000
404 maybe,

78
00:03:19.000 --> 00:03:22.004
and just invoke build so that it builds this object for you

79
00:03:22.004 --> 00:03:25.002
and returns it as a part of the body.

80
00:03:25.002 --> 00:03:27.008
So this time we have used ResponseEntity

81
00:03:27.008 --> 00:03:30.005
in order to make sure that we give the

82
00:03:30.005 --> 00:03:33.001
correct information to the client,

83
00:03:33.001 --> 00:03:36.006
telling her that Yes, the user was not found!

84
00:03:36.006 --> 00:03:39.007
Instead of just saying OK and giving an empty body.

85
00:03:39.007 --> 00:03:43.002
That was the purpose of ResponseEntity object.

86
00:03:43.002 --> 00:03:45.008
Let's do another thing.

87
00:03:45.008 --> 00:03:49.000
Let's come down here and say,

88
00:03:49.000 --> 00:03:53.006
If user.getUsername()

89
00:03:53.006 --> 00:03:55.001
.equals

90
00:03:55.001 --> 00:03:59.004
(login.getUsername())

91
00:03:59.004 --> 00:04:04.002
and let's put another condition saying,

92
00:04:04.002 --> 00:04:06.008
let's put another condition on the password.

93
00:04:06.008 --> 00:04:11.003
Say, user.getPassword()

94
00:04:11.003 --> 00:04:15.005
.equals(login.getPassword())

95
00:04:15.005 --> 00:04:17.001
So what this essentially means is

96
00:04:17.001 --> 00:04:19.007
that the credentials matched correctly

97
00:04:19.007 --> 00:04:21.009
from the request body to the database.

98
00:04:21.009 --> 00:04:24.008
So we tried to query the user on line 21

99
00:04:24.008 --> 00:04:27.006
and we are trying to verify if the user that we got

100
00:04:27.006 --> 00:04:30.005
has exactly the same credentials as the one

101
00:04:30.005 --> 00:04:33.000
that was coming in the incoming request.

102
00:04:33.000 --> 00:04:34.009
So if that is the case,

103
00:04:34.009 --> 00:04:36.005
then what should we do?

104
00:04:36.005 --> 00:04:38.005
This is an OK operation.

105
00:04:38.005 --> 00:04:44.002
So you can just go ahead and say return new ResponseEntity

106
00:04:44.002 --> 00:04:49.000
This one can have HTTP status

107
00:04:49.000 --> 00:04:51.007
as OK.

108
00:04:51.007 --> 00:04:54.005
If, however, that is not the case,

109
00:04:54.005 --> 00:04:56.008
then we have a problem. Right?

110
00:04:56.008 --> 00:05:00.007
It essentially means that the incoming request

111
00:05:00.007 --> 00:05:03.008
did have a username which existed in the database.

112
00:05:03.008 --> 00:05:05.008
However the password did not match.

113
00:05:05.008 --> 00:05:07.004
So the credentials went wrong,

114
00:05:07.004 --> 00:05:10.003
which means that it is an invalid username

115
00:05:10.003 --> 00:05:11.009
or password case.

116
00:05:11.009 --> 00:05:13.009
So what we're going to do for that is,

117
00:05:13.009 --> 00:05:15.009
we're going to throw an exception.

118
00:05:15.009 --> 00:05:18.000
We'll see rest of the parts in the next demo.

