WEBVTT
1
00:00:00.005 --> 00:00:02.006
- [Instructor] Now let's take a look at the features

2
00:00:02.006 --> 00:00:05.003
of the Spring MVC framework.

3
00:00:05.003 --> 00:00:09.005
Firstly, it is built on top of the Servlet JSP API,

4
00:00:09.005 --> 00:00:11.007
which is from the Java Enterprise space,

5
00:00:11.007 --> 00:00:13.009
which essentially means that all the concepts

6
00:00:13.009 --> 00:00:18.003
of HTTP request, response, servlets, filters,

7
00:00:18.003 --> 00:00:23.002
listeners, Java Server Pages, Java Server Pages Tag Library,

8
00:00:23.002 --> 00:00:24.009
all of those are pretty much the same

9
00:00:24.009 --> 00:00:27.000
that we've already worked on if we have

10
00:00:27.000 --> 00:00:29.004
worked on Servlet API before.

11
00:00:29.004 --> 00:00:33.003
Spring MVC has put a layer on top of it, of course,

12
00:00:33.003 --> 00:00:35.007
with more optimization.

13
00:00:35.007 --> 00:00:38.002
Spring always says one line.

14
00:00:38.002 --> 00:00:42.002
If you follow the basic Java and Spring convention,

15
00:00:42.002 --> 00:00:47.000
then it will be very easy to build a minimum viable product

16
00:00:47.000 --> 00:00:48.006
with Spring MVC framework.

17
00:00:48.006 --> 00:00:51.002
You do not have to stuff in a lot of configuration

18
00:00:51.002 --> 00:00:56.004
for it to be working in the initial startup.

19
00:00:56.004 --> 00:00:58.007
When you talk about Spring MVC, we have said, of course,

20
00:00:58.007 --> 00:01:02.003
that it is based on Model-View-Controller design pattern

21
00:01:02.003 --> 00:01:05.003
and each of these components has a very clear

22
00:01:05.003 --> 00:01:08.000
distinction of responsibilities.

23
00:01:08.000 --> 00:01:11.000
So all of these components are independent of each other,

24
00:01:11.000 --> 00:01:13.000
none of them know what the other does,

25
00:01:13.000 --> 00:01:15.008
which means there's a clear separation of concerns

26
00:01:15.008 --> 00:01:20.003
and hence an increased maintainability of the code.

27
00:01:20.003 --> 00:01:24.002
Of course, Spring MVC offers you a plain old Java object,

28
00:01:24.002 --> 00:01:27.002
which is POJO based, light weight development.

29
00:01:27.002 --> 00:01:29.009
We've spoken before that the classes that you write

30
00:01:29.009 --> 00:01:33.002
in Spring MVC need not extend or implement

31
00:01:33.002 --> 00:01:35.005
classes and interfaces, which means it is not

32
00:01:35.005 --> 00:01:37.003
tightly bound by the framework.

33
00:01:37.003 --> 00:01:40.007
It also means that you will have a freedom

34
00:01:40.007 --> 00:01:44.000
to go and extend some other API classes,

35
00:01:44.000 --> 00:01:48.000
which may be crucial for your application logic.

36
00:01:48.000 --> 00:01:50.006
Having said all of that, if you do not want to follow

37
00:01:50.006 --> 00:01:52.009
the convention, of course there's a high level

38
00:01:52.009 --> 00:01:56.000
of possible customization that you can possibly do

39
00:01:56.000 --> 00:01:57.004
with Spring MVC.

40
00:01:57.004 --> 00:02:00.005
For example, how are your URLs going to be mapped?

41
00:02:00.005 --> 00:02:03.002
How are your teams supposed to be resolved?

42
00:02:03.002 --> 00:02:05.002
How is locale resolution done?

43
00:02:05.002 --> 00:02:07.000
How are validations carried out?

44
00:02:07.000 --> 00:02:09.000
What kind of messages do you want to have

45
00:02:09.000 --> 00:02:10.003
for your validations?

46
00:02:10.003 --> 00:02:14.001
All of these features can be very easily customized

47
00:02:14.001 --> 00:02:16.008
with the help of this Spring MVC framework.

48
00:02:16.008 --> 00:02:18.006
The point that I have on my slide right now

49
00:02:18.006 --> 00:02:20.001
is very important.

50
00:02:20.001 --> 00:02:22.005
Spring MVC never couples tightly

51
00:02:22.005 --> 00:02:24.006
with a particular view technology.

52
00:02:24.006 --> 00:02:27.002
Let's say today you're working on Java Server Pages,

53
00:02:27.002 --> 00:02:29.000
but you need not stick to it.

54
00:02:29.000 --> 00:02:31.001
There are other templating engines,

55
00:02:31.001 --> 00:02:35.003
for example, Velocity, Freemarker, Thymeleaf,

56
00:02:35.003 --> 00:02:37.002
and all these kind of templating pages

57
00:02:37.002 --> 00:02:39.009
that you can possibly integrate in your application.

58
00:02:39.009 --> 00:02:42.004
If you are not satisfied with either of them,

59
00:02:42.004 --> 00:02:45.004
you also have an option to write your own views

60
00:02:45.004 --> 00:02:47.002
by implementing the view interface

61
00:02:47.002 --> 00:02:49.007
inside the Spring MVC framework.

62
00:02:49.007 --> 00:02:52.002
Not only does Spring MVC provide you a bunch

63
00:02:52.002 --> 00:02:56.004
of HTTP endpoints, but it provides you a way

64
00:02:56.004 --> 00:02:58.006
to develop RESTful web services,

65
00:02:58.006 --> 00:03:02.000
which is such a common thing in the industry today.

66
00:03:02.000 --> 00:03:04.004
If you are working on a product, you often have

67
00:03:04.004 --> 00:03:08.002
this very common requirement of opening up a host

68
00:03:08.002 --> 00:03:12.004
of RESTful endpoints for your clients accessing data

69
00:03:12.004 --> 00:03:14.001
in various ways.

70
00:03:14.001 --> 00:03:16.004
Right, so that's not the exhaustive list of features

71
00:03:16.004 --> 00:03:17.007
that we have in Spring MVC.

72
00:03:17.007 --> 00:03:18.008
There are many more.

73
00:03:18.008 --> 00:03:21.003
But if you want to have a basic startup

74
00:03:21.003 --> 00:03:23.005
that's required to work with this framework,

75
00:03:23.005 --> 00:03:25.007
this is the list of features that you definitely

76
00:03:25.007 --> 00:03:26.008
need to know.

77
00:03:26.008 --> 00:03:29.005
Alternately, just remember that Spring MVC,

78
00:03:29.005 --> 00:03:32.007
sometimes referred to as Spring Web MVC,

79
00:03:32.007 --> 00:03:35.009
that's because the source code has been labeled like that.

80
00:03:35.009 --> 00:03:38.003
But you can rest assured that both of them

81
00:03:38.003 --> 00:03:40.000
are exactly the same.

