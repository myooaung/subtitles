WEBVTT
1
00:00:00.007 --> 00:00:03.005
- Let's do the demo for the async processing

2
00:00:03.005 --> 00:00:05.005
in the H plus application.

3
00:00:05.005 --> 00:00:08.003
The first step will be to set the async processing flag

4
00:00:08.003 --> 00:00:09.009
on Dispatcher Servlet.

5
00:00:09.009 --> 00:00:11.009
We talked about this flag that if you have to enable

6
00:00:11.009 --> 00:00:14.002
the async processing capability, then you need

7
00:00:14.002 --> 00:00:16.009
to set async supported flag to True.

8
00:00:16.009 --> 00:00:19.009
I also mentioned since we created the spring MBC project

9
00:00:19.009 --> 00:00:22.004
out of spring boat, we do not have to do this.

10
00:00:22.004 --> 00:00:25.005
It is already set for us by default.

11
00:00:25.005 --> 00:00:27.007
So that's done, step number one is okay.

12
00:00:27.007 --> 00:00:31.007
The next step is adding async processing configuration

13
00:00:31.007 --> 00:00:33.005
inside your WebConfig if needed.

14
00:00:33.005 --> 00:00:36.006
WebConfig is your spring context configuration class

15
00:00:36.006 --> 00:00:38.009
that we have as part of H plus.

16
00:00:38.009 --> 00:00:39.007
How do we do that?

17
00:00:39.007 --> 00:00:41.003
Let's go back to the IDE.

18
00:00:41.003 --> 00:00:43.006
Let's pull out Application Config class.

19
00:00:43.006 --> 00:00:47.009
In this class you can actually plug in some configuration

20
00:00:47.009 --> 00:00:51.005
that is very specific to your async processing.

21
00:00:51.005 --> 00:00:52.009
So how do you do that?

22
00:00:52.009 --> 00:00:55.005
There is a method that you have to override here.

23
00:00:55.005 --> 00:01:00.009
Let's come down on line 38.

24
00:01:00.009 --> 00:01:04.008
There's a method called configureAsyncSupport.

25
00:01:04.008 --> 00:01:09.001
Now this comes with a parameter of AsyncSupportConfigurer,

26
00:01:09.001 --> 00:01:11.002
which will help you to set any kind

27
00:01:11.002 --> 00:01:14.004
of specific configuration that you need for H plus

28
00:01:14.004 --> 00:01:16.004
for async processing.

29
00:01:16.004 --> 00:01:17.003
What could you do in this?

30
00:01:17.003 --> 00:01:20.002
We do not need the call to the super class method,

31
00:01:20.002 --> 00:01:22.000
so we'll get rid of that.

32
00:01:22.000 --> 00:01:26.004
We take the parameter, and on that, we call an API,

33
00:01:26.004 --> 00:01:29.007
which is called setTaskExecutor.

34
00:01:29.007 --> 00:01:30.007
So what is this?

35
00:01:30.007 --> 00:01:32.007
This is that MBC task executer that that you need

36
00:01:32.007 --> 00:01:35.005
to set beforehand so that it can be used to spawn

37
00:01:35.005 --> 00:01:38.003
threads for your background processing calls,

38
00:01:38.003 --> 00:01:40.004
which is the blocking calls that the thread

39
00:01:40.004 --> 00:01:42.000
has to handle.

40
00:01:42.000 --> 00:01:45.007
This will of course demand an async task executor,

41
00:01:45.007 --> 00:01:49.001
as you already see that's already highlighted on the IDE.

42
00:01:49.001 --> 00:01:52.003
Now this AsyncTaskExecutor is a bean that we

43
00:01:52.003 --> 00:01:55.008
have to instantiate as a part of our application.

44
00:01:55.008 --> 00:01:58.004
Let's park this method for now.

45
00:01:58.004 --> 00:02:03.000
Come down there, and instantiate the AsyncTaskExecutor bean.

46
00:02:03.000 --> 00:02:03.009
So how do we do that?

47
00:02:03.009 --> 00:02:06.009
Well first of all, we need the bean annotation.

48
00:02:06.009 --> 00:02:12.002
That will followed by the method.

49
00:02:12.002 --> 00:02:13.009
This method is going to return, of course,

50
00:02:13.009 --> 00:02:21.001
the asyncTaskExecutor, and let's call the method as

51
00:02:21.001 --> 00:02:24.001
mbcTaskExecutor.

52
00:02:24.001 --> 00:02:26.008
Inside this, we need an instance which can be mapped

53
00:02:26.008 --> 00:02:28.009
to AsyncTaskExecutor.

54
00:02:28.009 --> 00:02:33.007
We want to choose the thread pullTaskExecutor,

55
00:02:33.007 --> 00:02:36.005
which is this one.

56
00:02:36.005 --> 00:02:39.007
Let's instantiate that first, and then we'll talk about it.

57
00:02:39.007 --> 00:02:42.008
What is this class?

58
00:02:42.008 --> 00:02:44.002
This is basically coming from the spring framework,

59
00:02:44.002 --> 00:02:48.000
that you can actually go an navigate to this.

60
00:02:48.000 --> 00:02:50.008
If you see, this extends the ExecutorConfigurationSupport

61
00:02:50.008 --> 00:02:53.003
and implements other interfaces.

62
00:02:53.003 --> 00:02:56.002
This is basically that class which is going to help

63
00:02:56.002 --> 00:02:59.000
you create your thread pull, you can configure the

64
00:02:59.000 --> 00:03:00.003
max size of the pull.

65
00:03:00.003 --> 00:03:02.009
You can also configure what is the time the threads

66
00:03:02.009 --> 00:03:04.007
will be alive, et cetera.

67
00:03:04.007 --> 00:03:06.009
All the configuration for the thread pull

68
00:03:06.009 --> 00:03:10.005
can be done with the help of this instance.

69
00:03:10.005 --> 00:03:12.002
What are we going to set on it?

70
00:03:12.002 --> 00:03:18.004
We will just say TaskExecutor and on this, let's

71
00:03:18.004 --> 00:03:19.002
set something.

72
00:03:19.002 --> 00:03:22.007
We'll make sure that we have a thread named prefix,

73
00:03:22.007 --> 00:03:25.002
which is very specific to the H plus application.

74
00:03:25.002 --> 00:03:28.001
What this means is that when this task executor

75
00:03:28.001 --> 00:03:31.001
is used to spawn threads for your background

76
00:03:31.001 --> 00:03:33.000
blocking calls, then those threads should be created

77
00:03:33.000 --> 00:03:36.009
with a specific name, and that name will have to have

78
00:03:36.009 --> 00:03:39.001
a certain prefix, which is very specific

79
00:03:39.001 --> 00:03:41.002
to H plus application.

80
00:03:41.002 --> 00:03:47.009
Let's say we say hplusAppthread-.

81
00:03:47.009 --> 00:03:50.007
So now the threads that get created will look like

82
00:03:50.007 --> 00:03:56.001
hplusApp-thread-1, hplusApp-thread-2.

83
00:03:56.001 --> 00:03:59.003
This is what we are asking the thread pool task executor

84
00:03:59.003 --> 00:04:00.003
to do for us.

85
00:04:00.003 --> 00:04:01.004
Why do we need to this?

86
00:04:01.004 --> 00:04:04.001
Because we need to identify those thread names

87
00:04:04.001 --> 00:04:07.008
in our logs so that we know that this thread

88
00:04:07.008 --> 00:04:09.006
did a particular job.

89
00:04:09.006 --> 00:04:14.000
Once that's done, let's just return the task executor

90
00:04:14.000 --> 00:04:17.008
from here, and let's take this method.

91
00:04:17.008 --> 00:04:20.004
Let's copy the name of that thread from line 47.

92
00:04:20.004 --> 00:04:23.003
Let's go to line 43 and call that method here.

93
00:04:23.003 --> 00:04:27.003
This is going to return that AsyncTaskExecutor for us.

94
00:04:27.003 --> 00:04:31.004
That we are attaching to the setTaskExecutorAPI

95
00:04:31.004 --> 00:04:35.000
of the asyncSupportConfiguror.

96
00:04:35.000 --> 00:04:36.009
Inside this method of configure async support,

97
00:04:36.009 --> 00:04:38.008
you can also do some other configuration.

98
00:04:38.008 --> 00:04:45.007
For example, you say configuror.setdefaulttimeout.

99
00:04:45.007 --> 00:04:48.007
Now on Tomcat, I believe that timeout is 10 seconds,

100
00:04:48.007 --> 00:04:51.003
but you can configure anything for your own application.

101
00:04:51.003 --> 00:04:53.009
Let's actually set this to five seconds.

102
00:04:53.009 --> 00:04:56.004
So the argument value is in milliseconds, so we're going

103
00:04:56.004 --> 00:04:59.000
to set this default time out to five seconds.

104
00:04:59.000 --> 00:04:59.008
There we are.

105
00:04:59.008 --> 00:05:03.005
We have configured some level of details inside

106
00:05:03.005 --> 00:05:05.008
our application for H plus.

107
00:05:05.008 --> 00:05:07.007
It's not necessary that you do this,

108
00:05:07.007 --> 00:05:09.009
but it's always advisable to do that in case

109
00:05:09.009 --> 00:05:13.000
you want to treat your application in a different manner.

