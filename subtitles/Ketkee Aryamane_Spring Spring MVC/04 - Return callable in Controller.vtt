WEBVTT
1
00:00:00.005 --> 00:00:02.009
- [Instructor] Now we are supposed to return a Callable

2
00:00:02.009 --> 00:00:06.009
of String from Controllers instead of a normal String value.

3
00:00:06.009 --> 00:00:10.002
We've already spoken of this before in our slides videos

4
00:00:10.002 --> 00:00:12.009
where we said that instead of returning a String,

5
00:00:12.009 --> 00:00:14.006
if you want Async processing capability

6
00:00:14.006 --> 00:00:16.009
you need to return a Callable of String,

7
00:00:16.009 --> 00:00:18.007
or a DeferredReult of String.

8
00:00:18.007 --> 00:00:20.001
So that's the next change we're going to do.

9
00:00:20.001 --> 00:00:22.003
Let's com back to IDE.

10
00:00:22.003 --> 00:00:25.002
Let's pick up one of our Controllers,

11
00:00:25.002 --> 00:00:27.005
let's say I'm going to take the SearchController,

12
00:00:27.005 --> 00:00:29.007
and this is what we're going to modify.

13
00:00:29.007 --> 00:00:31.002
So now on line 22,

14
00:00:31.002 --> 00:00:33.009
if you look at the Controller method search,

15
00:00:33.009 --> 00:00:35.007
it returns you a String right now.

16
00:00:35.007 --> 00:00:38.009
Instead of this I'm going to return a Callable of String.

17
00:00:38.009 --> 00:00:46.000
So let's do that, which is going to look like this.

18
00:00:46.000 --> 00:00:48.009
Okay, once that's done, of course,

19
00:00:48.009 --> 00:00:51.006
now it is returning a Callable of String

20
00:00:51.006 --> 00:00:53.004
which means you need a Callable implementation

21
00:00:53.004 --> 00:00:55.002
out there inside that method.

22
00:00:55.002 --> 00:00:56.004
But before we do that

23
00:00:56.004 --> 00:00:59.004
we are just going to quickly put a couple of sys out.

24
00:00:59.004 --> 00:01:02.003
One is to ensure that the Async supported flag

25
00:01:02.003 --> 00:01:05.000
is definitely set to true for this application.

26
00:01:05.000 --> 00:01:06.004
We have to confirm that.

27
00:01:06.004 --> 00:01:07.006
Now how will we do that?

28
00:01:07.006 --> 00:01:09.004
For that on line number 23,

29
00:01:09.004 --> 00:01:11.001
as a part of the method signature,

30
00:01:11.001 --> 00:01:19.009
let's first grab the request object, the HttpServletRequest.

31
00:01:19.009 --> 00:01:22.003
And on line 27, I'm just going to say

32
00:01:22.003 --> 00:01:27.000
request.isAsyncSupported,

33
00:01:27.000 --> 00:01:29.000
so that's the flag that has already been

34
00:01:29.000 --> 00:01:31.006
set to true for us in Spring Boot.

35
00:01:31.006 --> 00:01:32.006
And we're just checking

36
00:01:32.006 --> 00:01:34.005
if that flag is definitely set to true or not.

37
00:01:34.005 --> 00:01:36.000
We're just confirming that.

38
00:01:36.000 --> 00:01:38.008
The other thing that we want to do is,

39
00:01:38.008 --> 00:01:42.004
we want to make sure that we have thread

40
00:01:42.004 --> 00:01:45.003
from the servlet container,

41
00:01:45.003 --> 00:01:48.000
the name of that thread, getting printed here.

42
00:01:48.000 --> 00:01:50.000
So how do you get hold of the current thread in Java?

43
00:01:50.000 --> 00:01:55.002
You can just call the thread class's currentThread API

44
00:01:55.002 --> 00:01:58.005
and on that chain, getName API.

45
00:01:58.005 --> 00:02:01.001
So we basically need to understand

46
00:02:01.001 --> 00:02:02.008
what was the name of the thread

47
00:02:02.008 --> 00:02:05.000
that was allocated to request processing?

48
00:02:05.000 --> 00:02:07.000
Because we've already understood the concept behind it.

49
00:02:07.000 --> 00:02:09.007
We said that as a part of the asynchronous processing

50
00:02:09.007 --> 00:02:11.002
there are two threads created,

51
00:02:11.002 --> 00:02:13.005
one is for the request processing.

52
00:02:13.005 --> 00:02:15.009
The other is for the blocking calls.

53
00:02:15.009 --> 00:02:19.008
So this one is going to print the name, line number 28,

54
00:02:19.008 --> 00:02:21.005
for the request processing thread.

55
00:02:21.005 --> 00:02:23.009
After that let's go ahead,

56
00:02:23.009 --> 00:02:28.009
and now define a Callable of String return type.

57
00:02:28.009 --> 00:02:31.001
So we're going to do that by a lambda expression.

58
00:02:31.001 --> 00:02:34.007
So I'll just say return, say this,

59
00:02:34.007 --> 00:02:36.003
and then just go ahead

60
00:02:36.003 --> 00:02:43.003
and put all of this inside that method.

61
00:02:43.003 --> 00:02:45.001
So now it's going to make sure

62
00:02:45.001 --> 00:02:47.005
that there is a Callable implementation.

63
00:02:47.005 --> 00:02:49.004
That Callable implementation is basically trying

64
00:02:49.004 --> 00:02:51.006
to fetch the products from the database,

65
00:02:51.006 --> 00:02:53.007
and adding it to model.

66
00:02:53.007 --> 00:02:55.009
A few other things that we need to do here are,

67
00:02:55.009 --> 00:02:58.000
on line 31, first of all,

68
00:02:58.000 --> 00:03:00.005
I am going to print the name of this thread now.

69
00:03:00.005 --> 00:03:05.007
So I'm going to copy line 28, come to line 31,

70
00:03:05.007 --> 00:03:17.000
and this thread will be from the spring mvc task executor.

71
00:03:17.000 --> 00:03:21.002
So whatever you define under the Callable implementation,

72
00:03:21.002 --> 00:03:25.000
those steps are going to be executed by a thread

73
00:03:25.000 --> 00:03:29.003
which is spawned from the spring mvc task executor,

74
00:03:29.003 --> 00:03:30.005
that is what it is.

75
00:03:30.005 --> 00:03:33.007
So whenever this entire blocking call is completed,

76
00:03:33.007 --> 00:03:37.006
we just are going to return to search and we are done.

77
00:03:37.006 --> 00:03:40.005
Additionally I will also put a delay here,

78
00:03:40.005 --> 00:03:43.009
let's say we make the entire processing sleep

79
00:03:43.009 --> 00:03:47.007
for about three seconds.

80
00:03:47.007 --> 00:03:49.007
Let's make sure that this happens.

81
00:03:49.007 --> 00:03:52.008
This is just to simulate that delay of a blocking call.

82
00:03:52.008 --> 00:03:54.007
You know when you call a database server

83
00:03:54.007 --> 00:03:56.001
or you call a REST API

84
00:03:56.001 --> 00:03:58.006
there will definitely be certain time that will go by.

85
00:03:58.006 --> 00:04:00.008
So this line number 31 that I have called

86
00:04:00.008 --> 00:04:04.003
is only to simulate that delay, nothing else.

87
00:04:04.003 --> 00:04:09.005
Okay, so I think we are set, let's go ahead and build this,

88
00:04:09.005 --> 00:04:12.000
and observe what happens.

89
00:04:12.000 --> 00:04:13.009
Let me do one small modification here,

90
00:04:13.009 --> 00:04:15.007
let me just stop the build,

91
00:04:15.007 --> 00:04:18.003
and we just label this sys out correctly.

92
00:04:18.003 --> 00:04:19.009
Instead of just printing the flag,

93
00:04:19.009 --> 00:04:27.009
let's say Async supported in application,

94
00:04:27.009 --> 00:04:31.002
and then let's print that flag.

95
00:04:31.002 --> 00:04:34.000
Okay, this is good, now run the build.

96
00:04:34.000 --> 00:04:38.002
So I'm going to double-click spring-boot.run.

97
00:04:38.002 --> 00:04:40.003
So the application build has gone well.

98
00:04:40.003 --> 00:04:41.008
So how will we check this now?

99
00:04:41.008 --> 00:04:43.007
So when I go to my search page

100
00:04:43.007 --> 00:04:46.000
I'll enter some search criteria, yes,

101
00:04:46.000 --> 00:04:48.007
and then these few statements will be executed.

102
00:04:48.007 --> 00:04:52.000
And then there'll be a delay of three seconds

103
00:04:52.000 --> 00:04:54.002
before we finally get the result

104
00:04:54.002 --> 00:04:56.003
from this set of operations.

105
00:04:56.003 --> 00:04:59.005
All right, so let's go to the browser, and check it out.

106
00:04:59.005 --> 00:05:03.005
So I'm just going to invoke /home first,

107
00:05:03.005 --> 00:05:08.002
go to search, enter some criteria, let's say water.

108
00:05:08.002 --> 00:05:09.006
Now observe carefully,

109
00:05:09.006 --> 00:05:14.002
I'm clicking on Search, one, two, three.

110
00:05:14.002 --> 00:05:17.006
So three seconds, and then I got my data displayed.

111
00:05:17.006 --> 00:05:21.006
So this is just simulating that delay in the blocking code.

112
00:05:21.006 --> 00:05:23.004
Let's go back to the IDE

113
00:05:23.004 --> 00:05:26.006
and see what all we got as a part of a sys out.

114
00:05:26.006 --> 00:05:29.005
So search criteria was okay, yes, that was water.

115
00:05:29.005 --> 00:05:32.008
Async supported in application, that is true.

116
00:05:32.008 --> 00:05:36.007
Thread from the servlet container was of this name.

117
00:05:36.007 --> 00:05:39.004
And thread from spring mvc task executor

118
00:05:39.004 --> 00:05:42.007
was hplusapp-thread-1.

119
00:05:42.007 --> 00:05:46.000
So this is working exactly as we expected it to.

120
00:05:46.000 --> 00:05:48.000
The request processing thread was allocated

121
00:05:48.000 --> 00:05:52.002
from the context of the container and that has this name.

122
00:05:52.002 --> 00:05:54.007
When it entered our Callable implementation

123
00:05:54.007 --> 00:05:56.003
this entire processing logic

124
00:05:56.003 --> 00:05:59.004
then was handed over to a thread spawned

125
00:05:59.004 --> 00:06:02.003
by the spring mvc task executor.

126
00:06:02.003 --> 00:06:05.003
And that is this thread.

127
00:06:05.003 --> 00:06:07.008
So that's all, this is how you inject the capability

128
00:06:07.008 --> 00:06:11.003
of Async processing using Callable as the return type

129
00:06:11.003 --> 00:06:13.000
for your Controller methods.

