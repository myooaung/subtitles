WEBVTT
1
00:00:00.005 --> 00:00:03.008
- Now let's talk about validations with Spring MVC.

2
00:00:03.008 --> 00:00:05.007
The first question we have to ask ourselves is

3
00:00:05.007 --> 00:00:07.008
why are validations needed?

4
00:00:07.008 --> 00:00:09.002
Well, in your application,

5
00:00:09.002 --> 00:00:11.006
in a web application, there are a lot of pages

6
00:00:11.006 --> 00:00:14.000
that you end up exposing to the users.

7
00:00:14.000 --> 00:00:17.001
And the users can then enter all kinds of data

8
00:00:17.001 --> 00:00:19.008
on the form fields on your GS piece.

9
00:00:19.008 --> 00:00:23.000
So when this data is submitted and reaches the server side,

10
00:00:23.000 --> 00:00:26.008
it is necessary that we validate the correctness of it.

11
00:00:26.008 --> 00:00:29.008
If we don't, then we may end up consuming bad

12
00:00:29.008 --> 00:00:31.008
or incorrect data in our systems,

13
00:00:31.008 --> 00:00:35.002
and we may even persist it in our data storage systems.

14
00:00:35.002 --> 00:00:36.005
Now, one may argue,

15
00:00:36.005 --> 00:00:39.007
why can't these validations be done on the client side?

16
00:00:39.007 --> 00:00:41.006
Of course, we can.

17
00:00:41.006 --> 00:00:43.006
We can grab all the form fields,

18
00:00:43.006 --> 00:00:46.005
write a JavaScript code to run some sanity checks

19
00:00:46.005 --> 00:00:48.004
to validate those inputs.

20
00:00:48.004 --> 00:00:50.002
However, unfortunately,

21
00:00:50.002 --> 00:00:52.008
there's a very high probability that these validations

22
00:00:52.008 --> 00:00:55.001
will be over [mumbles] from the client's side.

23
00:00:55.001 --> 00:00:58.000
And by the time the data reaches the server side

24
00:00:58.000 --> 00:01:00.006
it's already bad data again.

25
00:01:00.006 --> 00:01:03.001
That's exactly why we need to run

26
00:01:03.001 --> 00:01:06.003
another layer of validations on the server side

27
00:01:06.003 --> 00:01:08.008
and that's exactly why we're looking at this topic

28
00:01:08.008 --> 00:01:11.007
of validations with Spring MVC.

29
00:01:11.007 --> 00:01:13.007
Now Spring MVC framework offers you a couple

30
00:01:13.007 --> 00:01:15.005
of options to do this.

31
00:01:15.005 --> 00:01:18.008
One is there's a validator interface that it has exposed.

32
00:01:18.008 --> 00:01:20.006
So as a developer you write a class

33
00:01:20.006 --> 00:01:22.002
which implements that interface

34
00:01:22.002 --> 00:01:24.007
and provide a logic to the validate method

35
00:01:24.007 --> 00:01:28.000
for validations to your application's specific objects.

36
00:01:28.000 --> 00:01:30.007
Then ask Spring MVC to enable it for you

37
00:01:30.007 --> 00:01:32.007
and it will run the validations.

38
00:01:32.007 --> 00:01:36.002
The other option is using Java Specification

39
00:01:36.002 --> 00:01:40.000
Request 380 Bean Validation API.

40
00:01:40.000 --> 00:01:41.009
That's pretty much the standard today

41
00:01:41.009 --> 00:01:45.006
and Spring MVC has also integrated very well with it.

42
00:01:45.006 --> 00:01:47.001
So what do we do in this?

43
00:01:47.001 --> 00:01:48.006
We have our JavaBeans.

44
00:01:48.006 --> 00:01:50.003
We are just going to make sure that we put

45
00:01:50.003 --> 00:01:53.006
the appropriate annotations on each of the attributes

46
00:01:53.006 --> 00:01:55.004
inside your Java object,

47
00:01:55.004 --> 00:01:57.008
which will define the validation rules.

48
00:01:57.008 --> 00:02:01.006
Then we ask Spring MVC to enable those validations

49
00:02:01.006 --> 00:02:04.000
and then the framework is going to carry

50
00:02:04.000 --> 00:02:06.009
out the validations according to the roots.

51
00:02:06.009 --> 00:02:08.000
In the next demo,

52
00:02:08.000 --> 00:02:10.005
we are going to validate few fields

53
00:02:10.005 --> 00:02:14.002
of the registration form by using approach number two.

54
00:02:14.002 --> 00:02:16.008
And I would really like to advise the audience

55
00:02:16.008 --> 00:02:18.003
to stick to the second approach

56
00:02:18.003 --> 00:02:20.005
of using JSR380 Bean validation,

57
00:02:20.005 --> 00:02:22.006
because that is the standard practice

58
00:02:22.006 --> 00:02:26.000
to validate data in the Java world today.

