WEBVTT
1
00:00:00.005 --> 00:00:01.007
- [Instructor] Now let us go to the concept

2
00:00:01.007 --> 00:00:03.008
of convertors and Spring MVC.

3
00:00:03.008 --> 00:00:06.006
Now, convertors extends the binders

4
00:00:06.006 --> 00:00:09.005
concept further and provides you one more

5
00:00:09.005 --> 00:00:12.002
way of customization.

6
00:00:12.002 --> 00:00:14.006
So let's say on your clients site on a GSB

7
00:00:14.006 --> 00:00:18.001
you have a form which captures the value of city.

8
00:00:18.001 --> 00:00:20.004
And on the server side, the city field

9
00:00:20.004 --> 00:00:23.000
is represented by a graph of Java objects.

10
00:00:23.000 --> 00:00:25.000
So let's say there a person bean first.

11
00:00:25.000 --> 00:00:26.009
Inside that there's an address bean

12
00:00:26.009 --> 00:00:30.008
and finally within, there's a city string value.

13
00:00:30.008 --> 00:00:34.002
So now, the question is, how do we map that city

14
00:00:34.002 --> 00:00:37.004
value from the form to the city attribute

15
00:00:37.004 --> 00:00:41.002
of the address bean composed inside the person bean?

16
00:00:41.002 --> 00:00:43.007
So this is a graph of objects and then

17
00:00:43.007 --> 00:00:45.007
how do you set the value from the form

18
00:00:45.007 --> 00:00:48.000
to the respective Java attribute is something

19
00:00:48.000 --> 00:00:51.002
that you will have to tell Spring MVC about.

20
00:00:51.002 --> 00:00:52.009
Spring MVC wouldn't be able to do

21
00:00:52.009 --> 00:00:55.001
this kind of conversion and that's exactly

22
00:00:55.001 --> 00:00:57.007
where you have convertors coming to your rescue.

23
00:00:57.007 --> 00:00:59.004
It's used basically to transform your

24
00:00:59.004 --> 00:01:02.001
request data, yes, but it can help

25
00:01:02.001 --> 00:01:05.000
you transform that to the desired types

26
00:01:05.000 --> 00:01:08.009
that you have defined as a part of your application.

27
00:01:08.009 --> 00:01:10.006
Of course there are build-in convertors present.

28
00:01:10.006 --> 00:01:12.003
There's a conversion service available

29
00:01:12.003 --> 00:01:13.009
as a part of Spring MVC.

30
00:01:13.009 --> 00:01:15.007
So that you can do those conversions.

31
00:01:15.007 --> 00:01:17.004
But additionally when you have a requirement

32
00:01:17.004 --> 00:01:19.008
like the one that we have described on the slide,

33
00:01:19.008 --> 00:01:22.004
you may need to write your custom convertors

34
00:01:22.004 --> 00:01:25.009
and then plug them in to your Spring MVC application

35
00:01:25.009 --> 00:01:28.003
to define that very specific behavior

36
00:01:28.003 --> 00:01:30.003
for converting the string values

37
00:01:30.003 --> 00:01:32.004
to the respective Java attribute.

38
00:01:32.004 --> 00:01:34.004
In the next demo we are going to see

39
00:01:34.004 --> 00:01:37.007
the conversion of the gender values

40
00:01:37.007 --> 00:01:40.005
to a proper enum data type that we will

41
00:01:40.005 --> 00:01:43.000
define as part of our HPlus application.

