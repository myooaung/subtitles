WEBVTT
1
00:00:00.005 --> 00:00:01.005
- [Instructor] Now let's take a look

2
00:00:01.005 --> 00:00:03.005
at the asynchronous processing that happens

3
00:00:03.005 --> 00:00:05.007
in the Spring MVC framework.

4
00:00:05.007 --> 00:00:07.006
But before that, we have to understand

5
00:00:07.006 --> 00:00:09.009
the conventional HTTP request processing

6
00:00:09.009 --> 00:00:12.000
that happens in a web application.

7
00:00:12.000 --> 00:00:13.009
Let's say this is your servlet container

8
00:00:13.009 --> 00:00:16.001
which is third on get server in our case,

9
00:00:16.001 --> 00:00:19.002
and that is the web application that you deploy on it.

10
00:00:19.002 --> 00:00:21.008
Now this web application could have many components.

11
00:00:21.008 --> 00:00:23.000
One of them could be controllers

12
00:00:23.000 --> 00:00:25.008
who's going to tap the HTTP request for us,

13
00:00:25.008 --> 00:00:27.008
and then you have business logic layers

14
00:00:27.008 --> 00:00:30.004
which actually could encompass many layers within,

15
00:00:30.004 --> 00:00:33.001
like service class, facade classes,

16
00:00:33.001 --> 00:00:36.000
data access object classes, et cetera.

17
00:00:36.000 --> 00:00:37.008
Now when you have an incoming request

18
00:00:37.008 --> 00:00:39.002
entering your application,

19
00:00:39.002 --> 00:00:41.000
it is stopped by the controller,

20
00:00:41.000 --> 00:00:43.009
and that is the point when your servlet container

21
00:00:43.009 --> 00:00:46.000
is going to clear the thread for it.

22
00:00:46.000 --> 00:00:49.000
This thread is solely dedicated to that request processing

23
00:00:49.000 --> 00:00:51.001
that is going to happen.

24
00:00:51.001 --> 00:00:53.006
As the flow continues, the business logic layers

25
00:00:53.006 --> 00:00:56.008
may call a database, or a REST API,

26
00:00:56.008 --> 00:00:59.007
or any other third-party service you wish to invoke

27
00:00:59.007 --> 00:01:02.001
as a part of your application logic.

28
00:01:02.001 --> 00:01:03.008
Now please understand that these calls

29
00:01:03.008 --> 00:01:06.006
to the external services are blocking calls,

30
00:01:06.006 --> 00:01:09.006
which means Thread 1 is going to be stuck up

31
00:01:09.006 --> 00:01:12.004
till the execution of these calls get completed.

32
00:01:12.004 --> 00:01:14.003
Once done, then the response

33
00:01:14.003 --> 00:01:16.000
can be written back to the client

34
00:01:16.000 --> 00:01:19.004
and only then is Thread 1 freed

35
00:01:19.004 --> 00:01:24.002
to serve any other incoming requests for your application.

36
00:01:24.002 --> 00:01:26.000
So this process is the same for any number

37
00:01:26.000 --> 00:01:28.004
of subsequent requests that come in your application.

38
00:01:28.004 --> 00:01:30.003
The threads are stuck up

39
00:01:30.003 --> 00:01:33.003
till these heavy-duty calls get completed.

40
00:01:33.003 --> 00:01:36.000
Now this is not a very acceptable thing to do.

41
00:01:36.000 --> 00:01:38.005
If your web application has been designed in a way

42
00:01:38.005 --> 00:01:41.006
that you have a huge amount of traffic on a daily basis,

43
00:01:41.006 --> 00:01:44.000
you cannot let these threads stuck up

44
00:01:44.000 --> 00:01:46.002
for these heavy-duty calls.

45
00:01:46.002 --> 00:01:48.005
It's not feasible to do that.

46
00:01:48.005 --> 00:01:49.006
For example, if you have a look

47
00:01:49.006 --> 00:01:51.005
at the target servlet container,

48
00:01:51.005 --> 00:01:54.001
the thread pool capacity is around 200 threads,

49
00:01:54.001 --> 00:01:56.002
which means 200 concurrent requests

50
00:01:56.002 --> 00:01:58.006
can happen, can get executed.

51
00:01:58.006 --> 00:02:01.002
However, if the traffic is too high,

52
00:02:01.002 --> 00:02:04.001
then it will be too bad to keep those threads stuck up

53
00:02:04.001 --> 00:02:06.006
because they will not be able to serve

54
00:02:06.006 --> 00:02:10.000
any other incoming request to your application.

55
00:02:10.000 --> 00:02:14.007
This is the problem that Spring MVC asynchronous processing

56
00:02:14.007 --> 00:02:16.008
is trying to solve for us.

57
00:02:16.008 --> 00:02:19.000
We'll look at it in the next video.

