WEBVTT
1
00:00:00.005 --> 00:00:01.007
- [Instructor] So, let us see what we're going to do

2
00:00:01.007 --> 00:00:03.000
in the else part.

3
00:00:03.000 --> 00:00:06.006
Here, we are going to first throw an Exception.

4
00:00:06.006 --> 00:00:09.004
The Exception will state that, of course, the credentials

5
00:00:09.004 --> 00:00:12.001
that we got were not valid, anymore.

6
00:00:12.001 --> 00:00:14.002
But this, we will do by designing

7
00:00:14.002 --> 00:00:15.008
our own custom Exception class.

8
00:00:15.008 --> 00:00:18.001
So I'll go under the Exception Package

9
00:00:18.001 --> 00:00:19.003
and create a new class.

10
00:00:19.003 --> 00:00:24.009
And let's call that, maybe, LoginFailureException.

11
00:00:24.009 --> 00:00:28.000
And let this extend Exception class

12
00:00:28.000 --> 00:00:32.000
and of course, you can have the business as usual,

13
00:00:32.000 --> 00:00:34.003
you can create a constructor,

14
00:00:34.003 --> 00:00:36.007
Say LoginFailureException.

15
00:00:36.007 --> 00:00:42.005
And on this have message, which you can then use

16
00:00:42.005 --> 00:00:46.001
in the super constructor call.

17
00:00:46.001 --> 00:00:48.001
So we have an Exception class ready,

18
00:00:48.001 --> 00:00:50.003
and now we'll just come here and say

19
00:00:50.003 --> 00:00:56.009
throw new LoginFailureException.

20
00:00:56.009 --> 00:00:58.003
That will have a message saying

21
00:00:58.003 --> 00:01:02.006
Invalid username or password.

22
00:01:02.006 --> 00:01:03.008
So once we do this, of course,

23
00:01:03.008 --> 00:01:05.003
we'll have to make sure that it is defined

24
00:01:05.003 --> 00:01:06.002
in the method signature.

25
00:01:06.002 --> 00:01:09.002
So I'm going to quickly add that throws clause on line 21

26
00:01:09.002 --> 00:01:10.009
on the method signature.

27
00:01:10.009 --> 00:01:12.007
So this is the simplest logic

28
00:01:12.007 --> 00:01:14.009
that I could build in order to show you this demo.

29
00:01:14.009 --> 00:01:16.007
Of course, in your production grade application,

30
00:01:16.007 --> 00:01:17.009
you will have many layers

31
00:01:17.009 --> 00:01:20.001
of checks that you may want to do

32
00:01:20.001 --> 00:01:22.001
but this is just to exhibit ResponseEntity

33
00:01:22.001 --> 00:01:26.001
and exception handling for your REST services.

34
00:01:26.001 --> 00:01:27.002
So once we do that,

35
00:01:27.002 --> 00:01:28.005
let's do one more thing.

36
00:01:28.005 --> 00:01:33.003
You're going to use now the @ExceptionHandler annotation

37
00:01:33.003 --> 00:01:37.001
to manage the exception handling for our RESTful service.

38
00:01:37.001 --> 00:01:39.006
Now, we have already used this when we did the demos

39
00:01:39.006 --> 00:01:41.005
for the MVC controllers.

40
00:01:41.005 --> 00:01:43.005
So let's go to the IDE

41
00:01:43.005 --> 00:01:46.005
and under the ApplicationException handler,

42
00:01:46.005 --> 00:01:49.003
which we had already created for our MVC demos,

43
00:01:49.003 --> 00:01:51.008
I'm just going to add one more method there.

44
00:01:51.008 --> 00:01:53.004
And that method is of course going

45
00:01:53.004 --> 00:01:55.008
to have this ExceptionHandler annotation

46
00:01:55.008 --> 00:01:59.008
but this time, it will have another exception type

47
00:01:59.008 --> 00:02:04.009
of be handled which is LoginFailureException.class.

48
00:02:04.009 --> 00:02:06.001
And in that,

49
00:02:06.001 --> 00:02:07.008
we're going to say public.

50
00:02:07.008 --> 00:02:11.004
Let this also return a ResponseEntity

51
00:02:11.004 --> 00:02:17.006
and say handleLoginFailure maybe.

52
00:02:17.006 --> 00:02:21.006
This time, let's also get that LoginFailureException object

53
00:02:21.006 --> 00:02:23.005
as a method parameter.

54
00:02:23.005 --> 00:02:24.008
We can totally do that

55
00:02:24.008 --> 00:02:27.009
when we have our ExceptionHandler methods written like that.

56
00:02:27.009 --> 00:02:29.005
And this time, we are going

57
00:02:29.005 --> 00:02:35.003
to say return ResponseEntity.status

58
00:02:35.003 --> 00:02:41.000
and this time, it will be a forbidden status, right?

59
00:02:41.000 --> 00:02:43.004
So when you have incorrect credentials all together,

60
00:02:43.004 --> 00:02:46.000
which means you're not authorized to enter the system

61
00:02:46.000 --> 00:02:47.000
and in that case,

62
00:02:47.000 --> 00:02:49.003
they should be status code that you're trying to insert back

63
00:02:49.003 --> 00:02:52.005
to the response of the body will be forbidden.

64
00:02:52.005 --> 00:02:54.006
To this, you can also chain another method,

65
00:02:54.006 --> 00:02:59.001
body which will just take the exception object

66
00:02:59.001 --> 00:03:03.001
and get the message that came out of it.

67
00:03:03.001 --> 00:03:04.002
That's all.

68
00:03:04.002 --> 00:03:06.004
So what you're doing is if there's an exception thrown

69
00:03:06.004 --> 00:03:08.006
of this type, then this method

70
00:03:08.006 --> 00:03:09.008
is going to get called

71
00:03:09.008 --> 00:03:12.003
and ResponseEntity with a forbidden status

72
00:03:12.003 --> 00:03:16.001
is going to go back to the body of the response.

73
00:03:16.001 --> 00:03:16.009
Okay.

74
00:03:16.009 --> 00:03:19.004
So let's come back to the REST controller.

75
00:03:19.004 --> 00:03:21.003
So we have all our cases ready here

76
00:03:21.003 --> 00:03:23.002
and we use the exception handling.

77
00:03:23.002 --> 00:03:24.000
So everything looks good.

78
00:03:24.000 --> 00:03:27.000
Now let's build this and then test it out.

