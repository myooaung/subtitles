WEBVTT
1
00:00:00.005 --> 00:00:03.009
- [Instructor] So, let's understand what is Spring MVC?

2
00:00:03.009 --> 00:00:06.004
It is a web-based framework

3
00:00:06.004 --> 00:00:09.002
for doing web application development.

4
00:00:09.002 --> 00:00:13.004
It is one of the projects of the Spring Framework.

5
00:00:13.004 --> 00:00:17.007
As the name suggests, it is based on MVC design pattern,

6
00:00:17.007 --> 00:00:20.005
which is Model, View, and Controller.

7
00:00:20.005 --> 00:00:21.006
So, how does that work?

8
00:00:21.006 --> 00:00:24.008
So, let's say you have a view where the request comes from.

9
00:00:24.008 --> 00:00:26.008
That request is going to be intercepted

10
00:00:26.008 --> 00:00:29.000
by a component called controller.

11
00:00:29.000 --> 00:00:30.007
The controller is going to do

12
00:00:30.007 --> 00:00:32.009
the necessary application logic,

13
00:00:32.009 --> 00:00:35.000
and then there's model,

14
00:00:35.000 --> 00:00:39.005
which will hold the data of all your application flows.

15
00:00:39.005 --> 00:00:43.009
This data from the model can then be displayed back

16
00:00:43.009 --> 00:00:47.005
as response to the browser, which is the view, again.

17
00:00:47.005 --> 00:00:50.002
So, when you talk about Spring MVC,

18
00:00:50.002 --> 00:00:53.002
these definitions are pretty much the same.

19
00:00:53.002 --> 00:00:56.005
Views are JavaServer pages, JSBs,

20
00:00:56.005 --> 00:00:57.004
where you're going to have

21
00:00:57.004 --> 00:01:00.000
the content displayed in the browser.

22
00:01:00.000 --> 00:01:01.005
Then you have models,

23
00:01:01.005 --> 00:01:05.004
which are nothing but domain objects, or JavaBeans,

24
00:01:05.004 --> 00:01:08.008
which will hold the data of your application.

25
00:01:08.008 --> 00:01:10.007
And you have the controllers,

26
00:01:10.007 --> 00:01:13.007
which are going to receive your HTTP requests

27
00:01:13.007 --> 00:01:17.007
and forward the control to the next component in line.

28
00:01:17.007 --> 00:01:20.007
So, now we have to ask ourselves, why Spring MVC?

29
00:01:20.007 --> 00:01:23.000
It's a very important question.

30
00:01:23.000 --> 00:01:26.000
First of all, Spring MVC is, as I said,

31
00:01:26.000 --> 00:01:28.006
one of the projects of the Spring Framework,

32
00:01:28.006 --> 00:01:32.001
which means it will work on the basic principles

33
00:01:32.001 --> 00:01:34.005
that Spring works on.

34
00:01:34.005 --> 00:01:38.007
The most crucial feature is inversion of control,

35
00:01:38.007 --> 00:01:41.006
or as we say, IOC.

36
00:01:41.006 --> 00:01:43.000
What this means is,

37
00:01:43.000 --> 00:01:46.007
let's say if you create a controller class in Spring MVC

38
00:01:46.007 --> 00:01:48.006
then it is going to be created,

39
00:01:48.006 --> 00:01:52.002
instantiated inside a Spring context container,

40
00:01:52.002 --> 00:01:54.001
and it will be available for

41
00:01:54.001 --> 00:01:57.002
the entire run-time of the application.

42
00:01:57.002 --> 00:02:01.001
So, all the beans are managed by the Spring context.

43
00:02:01.001 --> 00:02:05.007
Similarly, any other concept like aspect-oriented program,

44
00:02:05.007 --> 00:02:09.000
or the fact that Spring works with JPA,

45
00:02:09.000 --> 00:02:11.003
Java Persistence API.

46
00:02:11.003 --> 00:02:15.002
All of these principles can be seamlessly integrated

47
00:02:15.002 --> 00:02:20.002
with Spring MVC because it is part of the same umbrella.

48
00:02:20.002 --> 00:02:23.005
Spring MVC provides a very high degree of flexibility

49
00:02:23.005 --> 00:02:26.009
and adaptability during your development process.

50
00:02:26.009 --> 00:02:29.006
Let's say you're writing a controller class,

51
00:02:29.006 --> 00:02:32.003
the method that you write in it, the signature,

52
00:02:32.003 --> 00:02:34.001
can be decided by you.

53
00:02:34.001 --> 00:02:38.001
It is not bound by the rules of the Spring MVC framework,

54
00:02:38.001 --> 00:02:40.002
that way it's very flexible.

55
00:02:40.002 --> 00:02:44.000
The only thing is that the portions of that method signature

56
00:02:44.000 --> 00:02:47.008
have to annotated correctly with appropriate annotations,

57
00:02:47.008 --> 00:02:52.002
so that the MVC framework recognizes the apropos.

58
00:02:52.002 --> 00:02:57.007
This framework promotes high reusability of business logic.

59
00:02:57.007 --> 00:03:01.000
Let's say you have existing JavaBeans,

60
00:03:01.000 --> 00:03:04.000
or form objects of backing beans that you've carried

61
00:03:04.000 --> 00:03:06.003
from your Legacy applications.

62
00:03:06.003 --> 00:03:09.006
There is no need that these classes should extend

63
00:03:09.006 --> 00:03:12.009
or inherent classes and interfaces from the framework.

64
00:03:12.009 --> 00:03:15.002
They can be very easily plugged in

65
00:03:15.002 --> 00:03:17.002
to the Spring MVC application.

66
00:03:17.002 --> 00:03:20.003
That way it promotes reusability.

67
00:03:20.003 --> 00:03:23.009
It is very mature and highly stable

68
00:03:23.009 --> 00:03:26.001
with loads of support online.

69
00:03:26.001 --> 00:03:28.009
You have a fantastic documentation that's available

70
00:03:28.009 --> 00:03:31.009
for Spring, for this framework as well, Spring MVC.

71
00:03:31.009 --> 00:03:33.009
You have a lot of get-up projects,

72
00:03:33.009 --> 00:03:37.005
and you also have a lot of beautiful online forums

73
00:03:37.005 --> 00:03:40.003
where you can post your questions when you're stuck up

74
00:03:40.003 --> 00:03:42.000
with your development process.

