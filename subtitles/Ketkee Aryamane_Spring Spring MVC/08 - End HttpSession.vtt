WEBVTT
1
00:00:00.005 --> 00:00:01.006
- [Instructor] Now let's understand how to

2
00:00:01.006 --> 00:00:03.003
end a user session.

3
00:00:03.003 --> 00:00:05.001
When we set up the interceptor,

4
00:00:05.001 --> 00:00:06.006
we had retrieved the session ID

5
00:00:06.006 --> 00:00:07.009
in our preHandle method,

6
00:00:07.009 --> 00:00:09.003
and we saw that that session ID

7
00:00:09.003 --> 00:00:12.000
was already printed for every request that you're making

8
00:00:12.000 --> 00:00:13.005
to the h plus application.

9
00:00:13.005 --> 00:00:14.009
We also need to make sure

10
00:00:14.009 --> 00:00:17.008
that we end that user session at some point in time.

11
00:00:17.008 --> 00:00:20.006
For that, we have a logout link out here

12
00:00:20.006 --> 00:00:23.002
on the profile JSP that we just worked with

13
00:00:23.002 --> 00:00:24.006
in the previous video.

14
00:00:24.006 --> 00:00:25.009
We are going to click it,

15
00:00:25.009 --> 00:00:26.009
and when we click,

16
00:00:26.009 --> 00:00:28.007
we are supposed to end the user session

17
00:00:28.007 --> 00:00:31.008
for all the requests that happened during the session.

18
00:00:31.008 --> 00:00:33.005
So when we click on logout link,

19
00:00:33.005 --> 00:00:35.007
we are just going to end the user session,

20
00:00:35.007 --> 00:00:36.005
and then we'll see

21
00:00:36.005 --> 00:00:39.001
how this behavior of session management happens.

22
00:00:39.001 --> 00:00:40.008
So let's go back to the IDE,

23
00:00:40.008 --> 00:00:44.003
and the first step will be to create the LogoutController,

24
00:00:44.003 --> 00:00:47.007
so on the controllers package,

25
00:00:47.007 --> 00:00:53.009
let's create a class, label it LogoutController.

26
00:00:53.009 --> 00:00:56.006
Business as usual, I'm not going through it.

27
00:00:56.006 --> 00:01:01.008
At Controller, and GetMapping,

28
00:01:01.008 --> 00:01:05.008
and follow that with a method.

29
00:01:05.008 --> 00:01:08.008
So I'm just saying logout, okay.

30
00:01:08.008 --> 00:01:11.006
Now, from this logout method,

31
00:01:11.006 --> 00:01:14.000
we are basically supposed to end the user session.

32
00:01:14.000 --> 00:01:14.008
But in order to do that,

33
00:01:14.008 --> 00:01:17.002
we'll have to grab the HttpSession object.

34
00:01:17.002 --> 00:01:20.007
So you can just quickly put that as a method parameter.

35
00:01:20.007 --> 00:01:23.006
So this is the beauty of this Spring Framework.

36
00:01:23.006 --> 00:01:25.000
Whatever objects you need,

37
00:01:25.000 --> 00:01:26.002
they can be plugged in very quickly

38
00:01:26.002 --> 00:01:28.003
as method arguments to your methods.

39
00:01:28.003 --> 00:01:29.008
So when we started off with the discussion,

40
00:01:29.008 --> 00:01:32.008
we have discussed that using Spring MVC is very flexible.

41
00:01:32.008 --> 00:01:35.001
The signature of the method, you decide!

42
00:01:35.001 --> 00:01:37.001
You decide what arguments you want,

43
00:01:37.001 --> 00:01:39.000
plug them in, and you are ready to go.

44
00:01:39.000 --> 00:01:40.002
So that's what this does for you.

45
00:01:40.002 --> 00:01:42.005
So I'm just going to grab the session as an argument here.

46
00:01:42.005 --> 00:01:46.000
Let's go to next line, and just call

47
00:01:46.000 --> 00:01:50.003
the session dot invalidate method.

48
00:01:50.003 --> 00:01:52.002
I'm just going to put a Sys-out additionally

49
00:01:52.002 --> 00:01:57.002
saying, "Ending user session."

50
00:01:57.002 --> 00:01:59.005
And what is this going to return?

51
00:01:59.005 --> 00:02:03.007
Let's just return the login page.

52
00:02:03.007 --> 00:02:06.001
Now that we have invalidated the session,

53
00:02:06.001 --> 00:02:09.007
on the next line, if we try to do something like this,

54
00:02:09.007 --> 00:02:15.000
let's say session dot getAttribute login.

55
00:02:15.000 --> 00:02:17.000
The same bean that we had actually stored

56
00:02:17.000 --> 00:02:20.001
in the session object using session attributes annotation,

57
00:02:20.001 --> 00:02:21.007
I'm just trying to get that attribute.

58
00:02:21.007 --> 00:02:24.000
It is not possible to get that attribute here.

59
00:02:24.000 --> 00:02:25.004
Because before this line itself,

60
00:02:25.004 --> 00:02:26.006
you already ended the session.

61
00:02:26.006 --> 00:02:27.008
So this is just to exhibit

62
00:02:27.008 --> 00:02:30.002
that the session definitely ended.

63
00:02:30.002 --> 00:02:32.006
Okay, so once we do this,

64
00:02:32.006 --> 00:02:35.006
let's just go and make sure that this URL pattern

65
00:02:35.006 --> 00:02:38.009
is mapped to the correct link on profile JSP.

66
00:02:38.009 --> 00:02:40.006
So let's open that,

67
00:02:40.006 --> 00:02:43.003
let's go to the logout link on line 17,

68
00:02:43.003 --> 00:02:45.008
and plug in that URL pattern.

69
00:02:45.008 --> 00:02:48.004
Similarly, I'm also going to plug in the other URL patterns

70
00:02:48.004 --> 00:02:49.007
that we have on profile JSP

71
00:02:49.007 --> 00:02:52.005
because this is a new JSP that we added.

72
00:02:52.005 --> 00:02:55.002
So let's do that.

73
00:02:55.002 --> 00:02:56.003
Just to iterate,

74
00:02:56.003 --> 00:02:59.002
these URL pattern names are completely your choice.

75
00:02:59.002 --> 00:03:02.003
I'm just trying to embed names which are logical

76
00:03:02.003 --> 00:03:04.005
from this h plus application point of view.

77
00:03:04.005 --> 00:03:05.004
This is completely your design,

78
00:03:05.004 --> 00:03:07.003
and there's nothing to argue about it.

79
00:03:07.003 --> 00:03:08.007
Nothing's right or wrong.

80
00:03:08.007 --> 00:03:11.005
So there we go, we have the LogoutController in place,

81
00:03:11.005 --> 00:03:14.006
and we have the logout link which is tied up with it.

82
00:03:14.006 --> 00:03:16.000
Let's do the build of this,

83
00:03:16.000 --> 00:03:20.006
and then we can see what happens.

84
00:03:20.006 --> 00:03:24.000
So for this now, I am going to open an Incognito window

85
00:03:24.000 --> 00:03:26.003
just to observe the entire session management

86
00:03:26.003 --> 00:03:28.000
cycle that happens.

87
00:03:28.000 --> 00:03:31.001
So, I'm just going to maximize this window a little bit

88
00:03:31.001 --> 00:03:32.007
so that we see the output clearly.

89
00:03:32.007 --> 00:03:34.004
It's cleared out everything.

90
00:03:34.004 --> 00:03:39.004
Let's access home first.

91
00:03:39.004 --> 00:03:41.006
Let's go to the IDE now and see what happened.

92
00:03:41.006 --> 00:03:45.008
So we got an incoming request data log session was null.

93
00:03:45.008 --> 00:03:47.002
That is correct.

94
00:03:47.002 --> 00:03:48.007
Let's go to the LoginInterceptor

95
00:03:48.007 --> 00:03:51.001
and find out what this happened.

96
00:03:51.001 --> 00:03:52.000
Here we are.

97
00:03:52.000 --> 00:03:53.006
Inside the interceptor,

98
00:03:53.006 --> 00:03:55.002
we are already making a check

99
00:03:55.002 --> 00:03:57.006
asking if the cookies that you're getting from request

100
00:03:57.006 --> 00:03:58.007
are null or not.

101
00:03:58.007 --> 00:04:00.007
Now this is an Incognito window,

102
00:04:00.007 --> 00:04:02.000
which means that it will not maintain

103
00:04:02.000 --> 00:04:03.006
the previous session information.

104
00:04:03.006 --> 00:04:05.002
Which is why the cookies object

105
00:04:05.002 --> 00:04:07.006
that you are trying to get right now is null.

106
00:04:07.006 --> 00:04:09.000
There's nothing there.

107
00:04:09.000 --> 00:04:11.005
Which is good, we are absolutely on the right track.

108
00:04:11.005 --> 00:04:15.004
Now, let's go ahead and access the login link.

109
00:04:15.004 --> 00:04:18.002
And let's go back to the IDE and see what happened.

110
00:04:18.002 --> 00:04:21.005
So now you have a session ID that has got generated for you.

111
00:04:21.005 --> 00:04:24.008
So that's for the gotoLogin request.

112
00:04:24.008 --> 00:04:26.002
Now let's go and log in.

113
00:04:26.002 --> 00:04:31.001
Make a successful login, say admin, admin.

114
00:04:31.001 --> 00:04:33.004
Log in, and let's see what happened next.

115
00:04:33.004 --> 00:04:35.001
So now it is the same session ID

116
00:04:35.001 --> 00:04:38.004
that has been tagged to your request.

117
00:04:38.004 --> 00:04:41.004
Now also let's go ahead and logout from this.

118
00:04:41.004 --> 00:04:43.007
So I'm just going to click this link.

119
00:04:43.007 --> 00:04:46.005
And if you see, you're getting an internal server error.

120
00:04:46.005 --> 00:04:50.003
Let's go back to the IDE and examine what happened.

121
00:04:50.003 --> 00:04:51.005
So the first thing is of course

122
00:04:51.005 --> 00:04:53.006
it definitely got a session ID

123
00:04:53.006 --> 00:04:56.001
which is the same as the previous request.

124
00:04:56.001 --> 00:04:59.009
It did that job perfectly for you for the logout URL.

125
00:04:59.009 --> 00:05:03.005
After that it says there's an IllegalStateException

126
00:05:03.005 --> 00:05:07.002
for getAttribute, the session was already invalidated.

127
00:05:07.002 --> 00:05:08.000
That is right.

128
00:05:08.000 --> 00:05:10.000
So whatever information that was stored

129
00:05:10.000 --> 00:05:12.001
as a part of the session object

130
00:05:12.001 --> 00:05:14.001
has now been completely erased

131
00:05:14.001 --> 00:05:17.004
because you have called the session dot invalidate API.

132
00:05:17.004 --> 00:05:19.009
So this is one way of ending the session,

133
00:05:19.009 --> 00:05:22.004
so that we ensure that no other information

134
00:05:22.004 --> 00:05:25.003
from that session object will be further available.

135
00:05:25.003 --> 00:05:27.006
So what I can do is I can just comment this line out

136
00:05:27.006 --> 00:05:29.004
because that's the one that's giving me a problem.

137
00:05:29.004 --> 00:05:30.009
We do not want this.

138
00:05:30.009 --> 00:05:33.000
And let me just build this again,

139
00:05:33.000 --> 00:05:36.001
and now observe the behavior.

140
00:05:36.001 --> 00:05:39.005
Open another Incognito window again,

141
00:05:39.005 --> 00:05:42.008
and access the home.

142
00:05:42.008 --> 00:05:44.002
So the cycle is pretty much the same.

143
00:05:44.002 --> 00:05:46.001
Initially we won't get anything.

144
00:05:46.001 --> 00:05:49.002
Nothing stored because it's a new, fresh window.

145
00:05:49.002 --> 00:05:53.006
And then let's log in.

146
00:05:53.006 --> 00:05:57.001
And when you click, I will reach the profile page.

147
00:05:57.001 --> 00:05:59.002
So if you see, now the session ID

148
00:05:59.002 --> 00:06:02.007
is ready with me, for the gotoLogin page,

149
00:06:02.007 --> 00:06:04.003
for the login URL pattern,

150
00:06:04.003 --> 00:06:06.004
and also for the user profile pattern.

151
00:06:06.004 --> 00:06:09.000
So every successive request that is coming in

152
00:06:09.000 --> 00:06:11.005
is tagged to the same session ID.

153
00:06:11.005 --> 00:06:13.008
And now, let me click on logout.

154
00:06:13.008 --> 00:06:16.001
And now, we go back to login, simple.

155
00:06:16.001 --> 00:06:18.005
So now let's see again, there we go.

156
00:06:18.005 --> 00:06:20.001
So you have the same session ID

157
00:06:20.001 --> 00:06:23.002
for all the requests in that particular session.

158
00:06:23.002 --> 00:06:24.004
Now I'm going to do one more thing.

159
00:06:24.004 --> 00:06:27.004
I'm just going to hit some other URL again.

160
00:06:27.004 --> 00:06:28.006
And now let's see what happens.

161
00:06:28.006 --> 00:06:31.009
You see, the session ID now changed.

162
00:06:31.009 --> 00:06:35.009
So we are definitely responsible for ending the session

163
00:06:35.009 --> 00:06:38.002
whenever we want to in our h plus application.

164
00:06:38.002 --> 00:06:39.009
It will be our duty to do that.

165
00:06:39.009 --> 00:06:42.004
And then when you hit a new request again,

166
00:06:42.004 --> 00:06:44.002
a new session will get generated

167
00:06:44.002 --> 00:06:46.000
along with its session ID.

168
00:06:46.000 --> 00:06:49.007
So in short, session management can be done very easily.

169
00:06:49.007 --> 00:06:53.000
It's borrowing the same concept that it has in servlet JSP.

170
00:06:53.000 --> 00:06:56.007
You can do extensive set of features with session management

171
00:06:56.007 --> 00:06:58.001
inside your web application.

172
00:06:58.001 --> 00:07:00.007
But this is just a basic demo to get you started

173
00:07:00.007 --> 00:07:03.005
to make sure we know how do you end the session

174
00:07:03.005 --> 00:07:06.009
in a Spring MVC application.

175
00:07:06.009 --> 00:07:08.002
Another thing to note here is

176
00:07:08.002 --> 00:07:10.004
the way we grab the HttpSession object

177
00:07:10.004 --> 00:07:14.005
in the LogoutController, you can do the same thing

178
00:07:14.005 --> 00:07:16.002
inside the LoginController.

179
00:07:16.002 --> 00:07:22.002
So on line 24, I can add a method argument like that.

180
00:07:22.002 --> 00:07:26.001
And then you can do a full session management

181
00:07:26.001 --> 00:07:32.000
starting from this point, with the session object.

182
00:07:32.000 --> 00:07:33.008
So let's say you want to go ahead and say

183
00:07:33.008 --> 00:07:36.003
session dot setAttribute,

184
00:07:36.003 --> 00:07:38.007
and set some key-value data to it,

185
00:07:38.007 --> 00:07:40.002
you can completely do that.

186
00:07:40.002 --> 00:07:42.008
In fact it is always advised that we completely set up

187
00:07:42.008 --> 00:07:45.001
the session management for our application.

188
00:07:45.001 --> 00:07:48.005
We try to set the data inside the session object

189
00:07:48.005 --> 00:07:50.007
using Spring MVC's way of doing it,

190
00:07:50.007 --> 00:07:53.004
at SessionAttribute and all of that,

191
00:07:53.004 --> 00:07:55.009
but you definitely can, and should,

192
00:07:55.009 --> 00:07:58.001
set up the entire session management

193
00:07:58.001 --> 00:08:00.002
by grabbing that HttpSession object,

194
00:08:00.002 --> 00:08:02.005
and that's exactly what we even utilized

195
00:08:02.005 --> 00:08:05.006
in the LogoutController to close the session.

196
00:08:05.006 --> 00:08:07.005
Additionally, you can also configure

197
00:08:07.005 --> 00:08:09.006
the max timeout interval.

198
00:08:09.006 --> 00:08:11.003
So on your LoginController,

199
00:08:11.003 --> 00:08:13.007
if you look at the session object,

200
00:08:13.007 --> 00:08:16.005
and you can say setMaxInactiveInterval.

201
00:08:16.005 --> 00:08:18.000
So what is the session timeout

202
00:08:18.000 --> 00:08:19.007
that you want to define for your application.

203
00:08:19.007 --> 00:08:22.006
All of that basic configuration is possible

204
00:08:22.006 --> 00:08:25.004
using the HttpSession object.

205
00:08:25.004 --> 00:08:27.003
So I'm going to eliminate this,

206
00:08:27.003 --> 00:08:30.005
just to show you guys that this is definitely okay,

207
00:08:30.005 --> 00:08:33.000
and this is something that should be done.

