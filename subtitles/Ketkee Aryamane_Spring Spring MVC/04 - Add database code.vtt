WEBVTT
1
00:00:00.005 --> 00:00:01.005
- Let's look at the next step.

2
00:00:01.005 --> 00:00:04.002
We have to add a ProductRespository java for

3
00:00:04.002 --> 00:00:06.004
all the database access related code

4
00:00:06.004 --> 00:00:08.009
and we have to also make sure that the method is added,

5
00:00:08.009 --> 00:00:11.000
which will help us search results

6
00:00:11.000 --> 00:00:13.003
against the database based on the criteria.

7
00:00:13.003 --> 00:00:14.002
So let's do that.

8
00:00:14.002 --> 00:00:16.000
Come back to IDE.

9
00:00:16.000 --> 00:00:17.006
Let's create another package now,

10
00:00:17.006 --> 00:00:20.008
which is for the repository.

11
00:00:20.008 --> 00:00:23.008
Again, this the convention that Spring JPA follows.

12
00:00:23.008 --> 00:00:25.008
So all your database interaction classes

13
00:00:25.008 --> 00:00:29.000
will be under the repository folder.

14
00:00:29.000 --> 00:00:31.002
Let's create a class on this

15
00:00:31.002 --> 00:00:36.007
by the name Product(Repository).

16
00:00:36.007 --> 00:00:38.000
Just so that Spring understands

17
00:00:38.000 --> 00:00:39.002
that this is a repository class,

18
00:00:39.002 --> 00:00:43.009
we need to annotate it with @Repository.

19
00:00:43.009 --> 00:00:44.008
There we go.

20
00:00:44.008 --> 00:00:48.002
And this will be an interface,

21
00:00:48.002 --> 00:00:52.009
which will extend CrudRepository

22
00:00:52.009 --> 00:00:57.003
that's already provided by the Spring JPA framework.

23
00:00:57.003 --> 00:00:59.009
So this is also a part of Spring data, particularly.

24
00:00:59.009 --> 00:01:01.003
And that will demand two things.

25
00:01:01.003 --> 00:01:05.003
This CrudRepository is for the product bin

26
00:01:05.003 --> 00:01:07.009
that we have already defined.

27
00:01:07.009 --> 00:01:12.007
And its primary key is an integer.

28
00:01:12.007 --> 00:01:13.005
So once you do this,

29
00:01:13.005 --> 00:01:15.000
all the Crud methods,

30
00:01:15.000 --> 00:01:18.001
which is insert, delete, update,

31
00:01:18.001 --> 00:01:19.009
all of those are already provided to you.

32
00:01:19.009 --> 00:01:21.005
They're implemented as well.

33
00:01:21.005 --> 00:01:22.008
So you just have to declare this

34
00:01:22.008 --> 00:01:25.005
in order to serve your purpose for Crud methods.

35
00:01:25.005 --> 00:01:27.003
However, in our case,

36
00:01:27.003 --> 00:01:29.000
we have a like query

37
00:01:29.000 --> 00:01:31.002
that has to be run on the search criteria

38
00:01:31.002 --> 00:01:34.000
and that's why we need to insert a custom query.

39
00:01:34.000 --> 00:01:35.003
So how will that look like?

40
00:01:35.003 --> 00:01:36.002
On line number 10,

41
00:01:36.002 --> 00:01:38.001
I am first going to write a method

42
00:01:38.001 --> 00:01:42.006
and say this returns a list of product.

43
00:01:42.006 --> 00:01:47.001
Let's make sure that the list interface is imported.

44
00:01:47.001 --> 00:01:49.004
And what will be the name of this method?

45
00:01:49.004 --> 00:01:54.004
Let's say searchByName.

46
00:01:54.004 --> 00:01:58.001
And of course this is going to take a parameter

47
00:01:58.001 --> 00:02:01.007
and that will be designated by the @Para annotation,

48
00:02:01.007 --> 00:02:04.005
which comes from the Spring framework data repository

49
00:02:04.005 --> 00:02:05.008
and let's give it a name.

50
00:02:05.008 --> 00:02:08.001
Let's say it is called "name"

51
00:02:08.001 --> 00:02:12.006
and this will be mapped to a string name.

52
00:02:12.006 --> 00:02:13.005
That's all.

53
00:02:13.005 --> 00:02:16.006
And how is this method going to be given the logic?

54
00:02:16.006 --> 00:02:20.005
Very simple, it is done with the help of a query annotation

55
00:02:20.005 --> 00:02:21.008
@Query

56
00:02:21.008 --> 00:02:25.005
and you just supposed to specify the query in quotes here.

57
00:02:25.005 --> 00:02:26.003
So I'm going to say,

58
00:02:26.003 --> 00:02:31.008
"select p from Product p

59
00:02:31.008 --> 00:02:36.000
where p.name like"

60
00:02:36.000 --> 00:02:39.007
so the like query runs something like this.

61
00:02:39.007 --> 00:02:40.008
So that's what it is.

62
00:02:40.008 --> 00:02:41.007
So what we're doing is

63
00:02:41.007 --> 00:02:42.009
is a product table

64
00:02:42.009 --> 00:02:46.000
and we are trying to search on this table

65
00:02:46.000 --> 00:02:47.007
with the search criteria text,

66
00:02:47.007 --> 00:02:49.002
but we are doing a like search,

67
00:02:49.002 --> 00:02:51.001
because even if you put part of the search criteria,

68
00:02:51.001 --> 00:02:53.000
you're supposed to get that product retrieved

69
00:02:53.000 --> 00:02:54.007
and displayed on the GSP.

70
00:02:54.007 --> 00:02:57.009
So this is how the custom query implementation can be done

71
00:02:57.009 --> 00:02:59.008
with the Spring data JPA.

72
00:02:59.008 --> 00:03:02.009
However, if you use any other database transaction code,

73
00:03:02.009 --> 00:03:04.009
this is not something that you're going to write

74
00:03:04.009 --> 00:03:07.000
as a part of your application.

