WEBVTT
1
00:00:00.005 --> 00:00:04.001
- Now let us see the concept of binders in Spring MVC.

2
00:00:04.001 --> 00:00:07.004
But, first, let's recap the @ModelAttribute annotation.

3
00:00:07.004 --> 00:00:09.008
We know that this is used for data binding.

4
00:00:09.008 --> 00:00:12.001
But in our UserBean class that we had written

5
00:00:12.001 --> 00:00:13.005
on this other side,

6
00:00:13.005 --> 00:00:16.002
all the values were of string data type.

7
00:00:16.002 --> 00:00:17.006
So the AutoCAD version,

8
00:00:17.006 --> 00:00:19.001
the parsing of the form fields

9
00:00:19.001 --> 00:00:21.008
to the respective attributes on the Java object,

10
00:00:21.008 --> 00:00:24.008
is done perfectly with @ModelAttribute.

11
00:00:24.008 --> 00:00:27.006
Now, binders, they also serve the same purpose.

12
00:00:27.006 --> 00:00:29.007
They extract and bind request data

13
00:00:29.007 --> 00:00:31.007
to your Java model objects.

14
00:00:31.007 --> 00:00:33.003
But it's a little different here,

15
00:00:33.003 --> 00:00:36.009
because these are used for converting string

16
00:00:36.009 --> 00:00:41.000
to complex data types that have been defined in your models.

17
00:00:41.000 --> 00:00:42.009
Let's say the date of birth field

18
00:00:42.009 --> 00:00:46.005
in our user class was actually of the date type

19
00:00:46.005 --> 00:00:48.000
in the Java object.

20
00:00:48.000 --> 00:00:51.001
Then the conversion would not have been a success

21
00:00:51.001 --> 00:00:53.003
using @ModelAttribute.

22
00:00:53.003 --> 00:00:56.007
That is the problem that we can solve with binders.

23
00:00:56.007 --> 00:00:58.009
You can convert a string to date type

24
00:00:58.009 --> 00:01:01.003
or a number type or an integer type,

25
00:01:01.003 --> 00:01:04.007
and binders exclusively do that job for you.

26
00:01:04.007 --> 00:01:06.001
How do they do that?

27
00:01:06.001 --> 00:01:09.003
Now, there is a host of PropertyEditor instances

28
00:01:09.003 --> 00:01:12.000
that have been exposed by the Spring MVC API

29
00:01:12.000 --> 00:01:14.001
for you to do this job.

30
00:01:14.001 --> 00:01:16.001
If you want to enable them,

31
00:01:16.001 --> 00:01:20.003
you have to use the @Initbinder annotation.

32
00:01:20.003 --> 00:01:22.008
This annotation is going to spawn

33
00:01:22.008 --> 00:01:25.001
a web data binder instance,

34
00:01:25.001 --> 00:01:27.005
which will do the job of converting the string

35
00:01:27.005 --> 00:01:31.004
to the specific data type on your target object.

36
00:01:31.004 --> 00:01:33.007
Now these are inbuilt.

37
00:01:33.007 --> 00:01:36.001
These are available inside the framework.

38
00:01:36.001 --> 00:01:38.008
However, if you wish to write your own editors,

39
00:01:38.008 --> 00:01:40.004
that's also possible.

40
00:01:40.004 --> 00:01:43.003
You have to implement the PropertyEditor interface

41
00:01:43.003 --> 00:01:46.001
and provide a logic to its respective methods

42
00:01:46.001 --> 00:01:48.006
so that Spring MVC understands how it is supposed

43
00:01:48.006 --> 00:01:54.003
to convert to and fro from form to Java object and back.

44
00:01:54.003 --> 00:01:55.004
In the next video,

45
00:01:55.004 --> 00:01:56.009
we are going to see a small demo

46
00:01:56.009 --> 00:01:59.007
with the binders for the date of birth field

47
00:01:59.007 --> 00:02:01.000
on our registration form.

