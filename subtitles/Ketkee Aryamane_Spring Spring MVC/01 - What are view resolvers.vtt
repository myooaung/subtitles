WEBVTT
1
00:00:00.005 --> 00:00:02.007
- [Instructor] Now let's talk about view resolvers

2
00:00:02.007 --> 00:00:04.005
in Spring MVC framework.

3
00:00:04.005 --> 00:00:06.007
We have spoken about this topic over and over

4
00:00:06.007 --> 00:00:08.002
in all our previous videos,

5
00:00:08.002 --> 00:00:10.001
but let's have a quick recap.

6
00:00:10.001 --> 00:00:12.005
Now, when you talk about view resolvers,

7
00:00:12.005 --> 00:00:15.001
they are basically to resolve views, we all know that.

8
00:00:15.001 --> 00:00:19.000
And resolving views, rendering content,

9
00:00:19.000 --> 00:00:22.005
displaying data, all of this is an integral part

10
00:00:22.005 --> 00:00:25.003
of any web MVC framework.

11
00:00:25.003 --> 00:00:27.008
It's not just Spring MVC that is supposed to be doing this,

12
00:00:27.008 --> 00:00:29.007
it's true for any other web MVC framework

13
00:00:29.007 --> 00:00:32.005
that we have around in the market today.

14
00:00:32.005 --> 00:00:34.002
Now when it comes to Spring,

15
00:00:34.002 --> 00:00:37.004
Spring provides a lot of flexibility with view technologies.

16
00:00:37.004 --> 00:00:39.001
If you've seen we have been working

17
00:00:39.001 --> 00:00:42.005
with HPlus application using JavaServer Pages, JSPs,

18
00:00:42.005 --> 00:00:44.007
but Spring has already integrated itself

19
00:00:44.007 --> 00:00:47.008
very well with other view technologies as well.

20
00:00:47.008 --> 00:00:49.006
You can have those templating languages

21
00:00:49.006 --> 00:00:52.006
like Velocity, Thymeleaf, FreeMarker, et cetera,

22
00:00:52.006 --> 00:00:55.004
and Spring works very well with them.

23
00:00:55.004 --> 00:00:58.003
Now, primarily when it comes to view resolvers,

24
00:00:58.003 --> 00:01:00.004
Spring works with two interfaces.

25
00:01:00.004 --> 00:01:02.000
One is view.

26
00:01:02.000 --> 00:01:04.008
So view is the actual view, the content that you

27
00:01:04.008 --> 00:01:07.000
render in the browser, and the data

28
00:01:07.000 --> 00:01:08.005
that you display on it.

29
00:01:08.005 --> 00:01:11.008
One view can have information collected and displayed

30
00:01:11.008 --> 00:01:14.007
across multiple model attributes.

31
00:01:14.007 --> 00:01:17.005
We've already executed use cases where we have taken data

32
00:01:17.005 --> 00:01:20.007
from a model attribute and displayed on the JSP.

33
00:01:20.007 --> 00:01:22.003
So you can have all sorts of information

34
00:01:22.003 --> 00:01:25.003
displayed by multiple model attributes.

35
00:01:25.003 --> 00:01:29.004
So if you, as a part of your design for your application,

36
00:01:29.004 --> 00:01:32.001
want to go ahead and implement your own view,

37
00:01:32.001 --> 00:01:34.000
then you will have to work with this interface.

38
00:01:34.000 --> 00:01:37.001
You'll have to implement this and provide your own logic.

39
00:01:37.001 --> 00:01:40.000
And the other big interface is the ViewResolver.

40
00:01:40.000 --> 00:01:43.005
This is responsible for actually resolving the views

41
00:01:43.005 --> 00:01:46.006
by name, and the view state will never change

42
00:01:46.006 --> 00:01:48.004
during the running of the application.

43
00:01:48.004 --> 00:01:51.006
So implementations are also free to cache views

44
00:01:51.006 --> 00:01:54.003
so that they can be loaded faster the next time

45
00:01:54.003 --> 00:01:56.007
they are rendered in the browser.

46
00:01:56.007 --> 00:01:59.001
Now there are many types of view resolvers.

47
00:01:59.001 --> 00:02:02.004
We have already looked at InternalResourceViewResolver,

48
00:02:02.004 --> 00:02:03.005
which we have heavily used

49
00:02:03.005 --> 00:02:05.004
in order to pick up the JSP templates

50
00:02:05.004 --> 00:02:07.008
from the correct folders in our project structure.

51
00:02:07.008 --> 00:02:09.006
So this is the one that we have been using

52
00:02:09.006 --> 00:02:12.009
to resolve the view names and map them

53
00:02:12.009 --> 00:02:15.002
to their respective JSPs.

54
00:02:15.002 --> 00:02:20.003
Other than that, you can also employ a .properties file

55
00:02:20.003 --> 00:02:21.009
to resolve your views.

56
00:02:21.009 --> 00:02:25.007
That is done by a ResourceBundleViewResolver.

57
00:02:25.007 --> 00:02:30.000
What this means is you go and define all your view names

58
00:02:30.000 --> 00:02:34.005
and map it to the correct JSPs in a .properties file.

59
00:02:34.005 --> 00:02:36.004
And then you employ this bean,

60
00:02:36.004 --> 00:02:38.007
called ResourceBundleViewResolver,

61
00:02:38.007 --> 00:02:41.006
which will pick up all the views and resolve them for you

62
00:02:41.006 --> 00:02:44.005
to render content inside your browser.

63
00:02:44.005 --> 00:02:48.000
Another way of doing it is through XML.

64
00:02:48.000 --> 00:02:50.005
So you have all the necessary view information

65
00:02:50.005 --> 00:02:52.009
defined in the form of an XML file,

66
00:02:52.009 --> 00:02:56.000
and this XML file generally has registrations

67
00:02:56.000 --> 00:03:00.004
of the views in the form of beans, which is a very common

68
00:03:00.004 --> 00:03:02.005
convention with the Spring framework.

69
00:03:02.005 --> 00:03:05.009
So you define all your views in the form of bean tags

70
00:03:05.009 --> 00:03:08.009
in their XML, and then you employ this bean,

71
00:03:08.009 --> 00:03:12.004
called XmlViewResolver so that your views are resolved

72
00:03:12.004 --> 00:03:14.001
to that XML file.

73
00:03:14.001 --> 00:03:17.006
Additionally, you also have VelocityViewResolver,

74
00:03:17.006 --> 00:03:20.007
FreeMarkerViewResolver, and these are very specific

75
00:03:20.007 --> 00:03:23.004
to the Velocity and FreeMarker templating languages.

76
00:03:23.004 --> 00:03:26.008
So Spring has got a host of view resolvers present,

77
00:03:26.008 --> 00:03:28.006
this is not the exhaustive list of course.

78
00:03:28.006 --> 00:03:31.000
These are the ones that we should know of,

79
00:03:31.000 --> 00:03:34.000
and in the next videos, we are going to resolve views

80
00:03:34.000 --> 00:03:37.007
through a resource bundle, that is in a properties file,

81
00:03:37.007 --> 00:03:41.000
and we also want to do that using an XML file.

