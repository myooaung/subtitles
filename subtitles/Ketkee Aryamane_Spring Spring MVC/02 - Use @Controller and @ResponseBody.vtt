WEBVTT
1
00:00:00.005 --> 00:00:03.006
- [Instructor] Now let us create simple RESTful services

2
00:00:03.006 --> 00:00:06.007
with a H plus spring MVC application.

3
00:00:06.007 --> 00:00:08.001
Let's create a controller,

4
00:00:08.001 --> 00:00:09.005
which uses two annotations,

5
00:00:09.005 --> 00:00:10.007
@controller,

6
00:00:10.007 --> 00:00:12.006
and @responsebody.

7
00:00:12.006 --> 00:00:14.005
Let's go back to the IDE,

8
00:00:14.005 --> 00:00:17.002
and on com.testwork H plus,

9
00:00:17.002 --> 00:00:18.001
I'm going to right click

10
00:00:18.001 --> 00:00:20.009
and create a new package first,

11
00:00:20.009 --> 00:00:23.004
which will be called REST controllers.

12
00:00:23.004 --> 00:00:25.009
I'm deliberately trying to keep this in a separate package

13
00:00:25.009 --> 00:00:27.006
so that when you refer the code,

14
00:00:27.006 --> 00:00:28.007
you have a clear distinction

15
00:00:28.007 --> 00:00:29.008
of which one was a REST controller

16
00:00:29.008 --> 00:00:33.003
and which one was an MVC controller.

17
00:00:33.003 --> 00:00:34.002
Under this,

18
00:00:34.002 --> 00:00:35.001
let's create a class.

19
00:00:35.001 --> 00:00:37.003
Let's call this

20
00:00:37.003 --> 00:00:41.007
products best controller.

21
00:00:41.007 --> 00:00:44.008
And let's designate this as controller quickly

22
00:00:44.008 --> 00:00:48.003
and down there let's provide a get mapping.

23
00:00:48.003 --> 00:00:50.006
Now there's a convention that your RESTful services

24
00:00:50.006 --> 00:00:54.003
generally follow when you try to define the URL pattern.

25
00:00:54.003 --> 00:01:00.003
So let's say this is called H plus/rest/products.

26
00:01:00.003 --> 00:01:01.007
Something like this.

27
00:01:01.007 --> 00:01:04.000
Alternatively, you could also use

28
00:01:04.000 --> 00:01:06.006
request mapping as an annotation.

29
00:01:06.006 --> 00:01:07.009
In all our controllers by far

30
00:01:07.009 --> 00:01:09.007
we have always used get mapping,

31
00:01:09.007 --> 00:01:11.001
post mapping, etcetera.

32
00:01:11.001 --> 00:01:13.001
But you could also use request mapping,

33
00:01:13.001 --> 00:01:15.006
but here, you will have to specify

34
00:01:15.006 --> 00:01:19.000
the name of the method by means of the method attribute,

35
00:01:19.000 --> 00:01:21.003
spring 4.0 version onwards,

36
00:01:21.003 --> 00:01:23.005
these specific annotations of get mapping

37
00:01:23.005 --> 00:01:25.003
and post mapping were introduced.

38
00:01:25.003 --> 00:01:26.003
And as you see,

39
00:01:26.003 --> 00:01:28.007
it becomes clear to look at that kind of code

40
00:01:28.007 --> 00:01:31.001
rather than a line like request mapping.

41
00:01:31.001 --> 00:01:33.009
So I'm going to stick to the get mapping annotation.

42
00:01:33.009 --> 00:01:34.008
Okay?

43
00:01:34.008 --> 00:01:36.008
Now let's go ahead and follow this with a method.

44
00:01:36.008 --> 00:01:38.001
Let's say this is public

45
00:01:38.001 --> 00:01:42.004
and will return a list of products.

46
00:01:42.004 --> 00:01:45.007
And let's call this get products.

47
00:01:45.007 --> 00:01:47.000
So if you see now

48
00:01:47.000 --> 00:01:48.006
I am not trying to define

49
00:01:48.006 --> 00:01:51.004
the return type of my controller method as a string type.

50
00:01:51.004 --> 00:01:56.000
Instead, I have a list of products being returned.

51
00:01:56.000 --> 00:01:57.009
And inside this, what am I going to do?

52
00:01:57.009 --> 00:01:59.007
I'm going to call

53
00:01:59.007 --> 00:02:04.000
the Product repository to get data.

54
00:02:04.000 --> 00:02:05.008
Now that infrastructure is already ready with us

55
00:02:05.008 --> 00:02:07.005
because we had already introduced the product repository

56
00:02:07.005 --> 00:02:09.006
in one of our earlier use cases.

57
00:02:09.006 --> 00:02:11.007
So I'm just going to auto wire that class again,

58
00:02:11.007 --> 00:02:14.004
on line 13.

59
00:02:14.004 --> 00:02:16.005
let's auto wire product repository,

60
00:02:16.005 --> 00:02:18.002
which has all the necessary methods

61
00:02:18.002 --> 00:02:21.000
to transact against the database.

62
00:02:21.000 --> 00:02:22.006
And inside this

63
00:02:22.006 --> 00:02:23.006
on line 21,

64
00:02:23.006 --> 00:02:26.008
I'll call product repository.findall.

65
00:02:26.008 --> 00:02:28.001
So this is that default method,

66
00:02:28.001 --> 00:02:29.008
which comes from crude repository,

67
00:02:29.008 --> 00:02:32.007
and it will give me an interoperable of products.

68
00:02:32.007 --> 00:02:36.000
So I'm going to employ for each

69
00:02:36.000 --> 00:02:38.002
and provide a consumer implementation to it.

70
00:02:38.002 --> 00:02:41.001
So let's say I'm saying product for every product,

71
00:02:41.001 --> 00:02:42.009
you have to add it to a list.

72
00:02:42.009 --> 00:02:45.002
So let's create a list first on the top.

73
00:02:45.002 --> 00:02:48.001
Let's just hold line 21 for a moment,

74
00:02:48.001 --> 00:02:55.004
and first get a list created for products.

75
00:02:55.004 --> 00:02:56.008
So once we have the list ready,

76
00:02:56.008 --> 00:02:59.005
now you can go ahead and add every product

77
00:02:59.005 --> 00:03:04.002
to that list.

78
00:03:04.002 --> 00:03:06.002
Okay, so we have employed the consumer

79
00:03:06.002 --> 00:03:07.006
using the for each implementation.

80
00:03:07.006 --> 00:03:10.005
Now let's go ahead and just say,

81
00:03:10.005 --> 00:03:12.004
return products,

82
00:03:12.004 --> 00:03:14.002
that is all.

83
00:03:14.002 --> 00:03:16.003
So now, if you see,

84
00:03:16.003 --> 00:03:18.008
this method is trying to return a list of products.

85
00:03:18.008 --> 00:03:21.008
Now when a request is made to this controller

86
00:03:21.008 --> 00:03:23.007
using this URL pattern,

87
00:03:23.007 --> 00:03:25.008
how is it that spring MVC is going to return

88
00:03:25.008 --> 00:03:27.008
that list of products to you?

89
00:03:27.008 --> 00:03:30.007
That will be done with the help of another annotation,

90
00:03:30.007 --> 00:03:32.007
which is response body.

91
00:03:32.007 --> 00:03:36.005
Response body annotation is used to tell spring MVC

92
00:03:36.005 --> 00:03:39.002
that the return type of the method,

93
00:03:39.002 --> 00:03:41.005
which is a list of products in this case,

94
00:03:41.005 --> 00:03:45.005
is supposed to represent the body of the response.

95
00:03:45.005 --> 00:03:47.004
So, whenever this service is invoked,

96
00:03:47.004 --> 00:03:49.000
the list of products will get converted

97
00:03:49.000 --> 00:03:50.007
into a JSON representation,

98
00:03:50.007 --> 00:03:52.006
and will go back to the client.

99
00:03:52.006 --> 00:03:55.008
That's how we use that @response body annotation.

100
00:03:55.008 --> 00:03:57.001
And that's what we were discussing

101
00:03:57.001 --> 00:03:58.002
in one of our previous slides

102
00:03:58.002 --> 00:04:02.000
that you no longer need the name of the view.

103
00:04:02.000 --> 00:04:04.000
So that is all,

104
00:04:04.000 --> 00:04:07.005
are first REST controller is ready with us?

105
00:04:07.005 --> 00:04:09.000
Let's go ahead and build this,

106
00:04:09.000 --> 00:04:11.002
and then let's test it out.

107
00:04:11.002 --> 00:04:13.007
Now the mechanism that we're going to employ to test this,

108
00:04:13.007 --> 00:04:15.002
is the postman tool.

109
00:04:15.002 --> 00:04:18.006
It is like the de facto standard of testing RESTful services

110
00:04:18.006 --> 00:04:19.008
in the industry today.

111
00:04:19.008 --> 00:04:20.007
So I'm going to employ that,

112
00:04:20.007 --> 00:04:22.004
let's open postman,

113
00:04:22.004 --> 00:04:23.009
let's create a new request,

114
00:04:23.009 --> 00:04:25.008
and that is a get request

115
00:04:25.008 --> 00:04:38.005
and say http localhost atat/hplus/rest/ products.

116
00:04:38.005 --> 00:04:39.006
So if you see,

117
00:04:39.006 --> 00:04:41.005
let's go to the IDE.

118
00:04:41.005 --> 00:04:44.003
That was the URL pattern that we had defined

119
00:04:44.003 --> 00:04:46.005
for this REST endpoint.

120
00:04:46.005 --> 00:04:48.002
So that's what we're embedding there.

121
00:04:48.002 --> 00:04:50.004
And when you click on Send,

122
00:04:50.004 --> 00:04:51.002
there you go,

123
00:04:51.002 --> 00:04:54.000
you have all your products returned as an array.

124
00:04:54.000 --> 00:04:56.007
So that list of products got converted

125
00:04:56.007 --> 00:04:59.004
into a JSON representation in the form of an array

126
00:04:59.004 --> 00:05:02.003
and is ready at your disposal.

127
00:05:02.003 --> 00:05:03.001
So this is it.

128
00:05:03.001 --> 00:05:07.005
We have design created a simple RESTful endpoint.

129
00:05:07.005 --> 00:05:10.003
Now our clients can go and access that endpoint

130
00:05:10.003 --> 00:05:12.002
in order to get a list of all the products

131
00:05:12.002 --> 00:05:14.000
that H plus has.

