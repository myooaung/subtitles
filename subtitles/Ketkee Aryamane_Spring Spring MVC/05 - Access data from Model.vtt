WEBVTT
1
00:00:00.005 --> 00:00:02.001
- [Instructor] Now that we have added the database

2
00:00:02.001 --> 00:00:04.004
introduction code, let's modify the SearchController

3
00:00:04.004 --> 00:00:08.001
to call repository and set the data of search results

4
00:00:08.001 --> 00:00:09.004
inside the Model object.

5
00:00:09.004 --> 00:00:11.003
So let's go back to (mumbles).

6
00:00:11.003 --> 00:00:14.002
Go to the SearchController,

7
00:00:14.002 --> 00:00:17.002
and we're going to make sure that we invoke

8
00:00:17.002 --> 00:00:19.004
the repository implementation from here.

9
00:00:19.004 --> 00:00:21.001
Now in Spring, it can be very easily done

10
00:00:21.001 --> 00:00:24.003
with the autowired annotation.

11
00:00:24.003 --> 00:00:28.001
So you just have to make sure that the product repository

12
00:00:28.001 --> 00:00:31.004
is dependency injected into SearchController,

13
00:00:31.004 --> 00:00:34.001
and that is done with autowired annotation.

14
00:00:34.001 --> 00:00:38.002
So I'm going to say ProductRepository,

15
00:00:38.002 --> 00:00:41.003
let's take a variable, and then let's come down

16
00:00:41.003 --> 00:00:44.002
to the search method on line 22.

17
00:00:44.002 --> 00:00:50.003
I'm just going to create a list first of Product.

18
00:00:50.003 --> 00:00:52.004
Let's label it as products,

19
00:00:52.004 --> 00:00:55.009
and you can create a new ArrayList object.

20
00:00:55.009 --> 00:00:59.007
And then to this, we assign the products

21
00:00:59.007 --> 00:01:01.006
that are coming out of the database code,

22
00:01:01.006 --> 00:01:05.000
which is ProductRepository.searchByName.

23
00:01:05.000 --> 00:01:07.001
And this searchByName is going to take a parameter,

24
00:01:07.001 --> 00:01:08.008
which is our search text,

25
00:01:08.008 --> 00:01:12.005
which is going to come as a part of RequestParam on line 22.

26
00:01:12.005 --> 00:01:16.000
So let's make sure that we pass that argument.

27
00:01:16.000 --> 00:01:16.008
Yeah.

28
00:01:16.008 --> 00:01:21.002
And then, finally, let's add it to the model as an object.

29
00:01:21.002 --> 00:01:24.004
So I'm going to say addAttribute.

30
00:01:24.004 --> 00:01:26.003
And it's going to be a key value pair,

31
00:01:26.003 --> 00:01:29.001
so let's say products, that's the key,

32
00:01:29.001 --> 00:01:33.002
and the object is going to be the actual list.

33
00:01:33.002 --> 00:01:37.008
The next step is add code to access that Model on the JSP.

34
00:01:37.008 --> 00:01:42.003
So let's go back to our searchjsp now.

35
00:01:42.003 --> 00:01:45.002
And this was the form that was taking your search criteria,

36
00:01:45.002 --> 00:01:47.005
and as we spoke before, there is this section

37
00:01:47.005 --> 00:01:50.006
that will allow you to display your products.

38
00:01:50.006 --> 00:01:54.008
Now, the entire display of data is going to be done

39
00:01:54.008 --> 00:01:57.005
with the JavaServer Pages Tag Library.

40
00:01:57.005 --> 00:02:00.006
So you have JSTL code library that you can use

41
00:02:00.006 --> 00:02:02.007
as a part of this JSP.

42
00:02:02.007 --> 00:02:04.000
Now the display of the data

43
00:02:04.000 --> 00:02:05.008
on the JSP is going to be provided

44
00:02:05.008 --> 00:02:08.005
by the JavaServer Pages Tag Library.

45
00:02:08.005 --> 00:02:11.004
We are going to use the JSTL code library

46
00:02:11.004 --> 00:02:13.004
in order to iterate that list of products

47
00:02:13.004 --> 00:02:15.009
for this section and display the data.

48
00:02:15.009 --> 00:02:19.006
So for that, I have to first include the JSTL code

49
00:02:19.006 --> 00:02:22.007
right at the top, the tag (mumbles) that we do in JSP.

50
00:02:22.007 --> 00:02:29.008
So let's go to internet and find our JSTL code library.

51
00:02:29.008 --> 00:02:32.002
So if you go here, you should be able to get

52
00:02:32.002 --> 00:02:33.007
the standard syntax right there.

53
00:02:33.007 --> 00:02:37.008
So that's the one that you put on your JSP pages.

54
00:02:37.008 --> 00:02:40.006
So go to the (mumbles), and at the top,

55
00:02:40.006 --> 00:02:43.008
let's make sure that it is right there.

56
00:02:43.008 --> 00:02:47.006
Now let's come down, under the section of the products,

57
00:02:47.006 --> 00:02:50.003
and this entire section, we want to make visible

58
00:02:50.003 --> 00:02:52.002
if the products that are set in the model

59
00:02:52.002 --> 00:02:54.005
from the controller is not empty.

60
00:02:54.005 --> 00:02:58.000
So on line 45, I'm going to put this tag

61
00:02:58.000 --> 00:03:00.001
from the code library of JSTL.

62
00:03:00.001 --> 00:03:04.006
Let's use c:if and say test some condition.

63
00:03:04.006 --> 00:03:06.001
What is our condition going to be?

64
00:03:06.001 --> 00:03:09.007
The condition is let's check

65
00:03:09.007 --> 00:03:15.009
if the products list is not empty.

66
00:03:15.009 --> 00:03:18.008
So this is that c:if tag that we want to use.

67
00:03:18.008 --> 00:03:22.000
So basically, this is just like the JSP expression

68
00:03:22.000 --> 00:03:23.002
language that we had.

69
00:03:23.002 --> 00:03:26.008
We are trying to access the products list from the Model

70
00:03:26.008 --> 00:03:29.004
and given to test whether that list is empty.

71
00:03:29.004 --> 00:03:33.003
If it is not, then we wish to display this entire section.

72
00:03:33.003 --> 00:03:34.005
Now, let's also make sure

73
00:03:34.005 --> 00:03:39.008
that we end it correctly on line 61.

74
00:03:39.008 --> 00:03:43.000
Also, the list of products, if it's not empty,

75
00:03:43.000 --> 00:03:44.009
we have to make sure that iterate to that,

76
00:03:44.009 --> 00:03:49.007
and then display this container item for every product.

77
00:03:49.007 --> 00:03:53.001
So it's basically a mix of HTML C:if classes

78
00:03:53.001 --> 00:03:54.003
that's right there for you.

79
00:03:54.003 --> 00:03:56.003
You just have to make sure that you iterate it

80
00:03:56.003 --> 00:03:58.004
using the C for each deck.

81
00:03:58.004 --> 00:03:59.005
So that's what we're going to do.

82
00:03:59.005 --> 00:04:03.007
Let's come on line 47 and say C.

83
00:04:03.007 --> 00:04:06.006
Let's make use of the c:forEach tag.

84
00:04:06.006 --> 00:04:09.008
It has an attribute called var,

85
00:04:09.008 --> 00:04:12.009
which will define the name of every variable

86
00:04:12.009 --> 00:04:14.004
in that products list.

87
00:04:14.004 --> 00:04:15.006
And what are the items?

88
00:04:15.006 --> 00:04:18.001
The items you're going to access

89
00:04:18.001 --> 00:04:23.001
using expression language like this.

90
00:04:23.001 --> 00:04:23.009
So there we go.

91
00:04:23.009 --> 00:04:26.007
So we have the products list ready for iteration,

92
00:04:26.007 --> 00:04:30.008
and for each of this, we're going to take this variable

93
00:04:30.008 --> 00:04:35.006
and assign correct values to the image and to the name.

94
00:04:35.006 --> 00:04:37.009
So let's go to the source attribute of the image

95
00:04:37.009 --> 00:04:45.005
and access it using expression language again, .imagePath.

96
00:04:45.005 --> 00:04:51.008
And for the name, it will be product.name.

97
00:04:51.008 --> 00:04:53.008
Please note that these attribute names

98
00:04:53.008 --> 00:04:55.007
that I'm trying to write here are exactly same

99
00:04:55.007 --> 00:04:58.001
as you defined in your product B.

100
00:04:58.001 --> 00:05:00.003
So that's how you use the expression language

101
00:05:00.003 --> 00:05:02.009
with the JSTL code library.

102
00:05:02.009 --> 00:05:04.003
So once we are done with that,

103
00:05:04.003 --> 00:05:09.000
then we can close this c:forEach in the proper position.

104
00:05:09.000 --> 00:05:19.004
So let's come back to line 57, and let's close this.

105
00:05:19.004 --> 00:05:21.009
So just to quickly summarize, we put a condition,

106
00:05:21.009 --> 00:05:24.005
checking if the products list is empty or not.

107
00:05:24.005 --> 00:05:26.007
If it is not empty, then we need to display

108
00:05:26.007 --> 00:05:27.009
this entire section.

109
00:05:27.009 --> 00:05:31.002
So we are iterating the products list to using c:forEach,

110
00:05:31.002 --> 00:05:34.000
and we'll generate this item those many times,

111
00:05:34.000 --> 00:05:37.001
and then we list end the (mumbles) tag here.

112
00:05:37.001 --> 00:05:38.006
So now the last step is just to build

113
00:05:38.006 --> 00:05:40.003
and run the application.

114
00:05:40.003 --> 00:05:42.009
So let's go to Maven tab.

115
00:05:42.009 --> 00:05:47.002
And let's run this spring boat run target.

116
00:05:47.002 --> 00:05:48.007
Please make sure that you always

117
00:05:48.007 --> 00:05:51.004
use the spring boat run target to make sure

118
00:05:51.004 --> 00:05:53.006
that you compile and generate the (mumbles),

119
00:05:53.006 --> 00:05:56.002
because this project is working with JSPs,

120
00:05:56.002 --> 00:06:00.001
and the spring boat run target will work well with it.

121
00:06:00.001 --> 00:06:02.004
So now let's go to our application.

122
00:06:02.004 --> 00:06:04.006
I'm just going to open this application again.

123
00:06:04.006 --> 00:06:06.005
So let's access the URL correctly.

124
00:06:06.005 --> 00:06:10.007
That will be http://localhost8080.

125
00:06:10.007 --> 00:06:13.007
Let's go to home first.

126
00:06:13.007 --> 00:06:15.007
From there, let's go to search.

127
00:06:15.007 --> 00:06:17.006
There we go, so you have the search form now,

128
00:06:17.006 --> 00:06:21.005
and let's enter some search criteria.

129
00:06:21.005 --> 00:06:23.003
There we go.

130
00:06:23.003 --> 00:06:25.000
So now we are getting those products,

131
00:06:25.000 --> 00:06:27.008
which are going to contain the text water.

132
00:06:27.008 --> 00:06:29.002
Let me search for something else.

133
00:06:29.002 --> 00:06:32.008
Let's say protein.

134
00:06:32.008 --> 00:06:35.003
So now you have just three products.

135
00:06:35.003 --> 00:06:38.008
In turn, let's go and say chocolate.

136
00:06:38.008 --> 00:06:39.007
Yes.

137
00:06:39.007 --> 00:06:41.005
So the entire search use case

138
00:06:41.005 --> 00:06:43.006
now has been implemented with Spring MVC.

139
00:06:43.006 --> 00:06:46.000
Of course, we got Spring JPA in the picture,

140
00:06:46.000 --> 00:06:49.001
so that we can interact with the database code.

141
00:06:49.001 --> 00:06:51.001
So we added the database introduction code

142
00:06:51.001 --> 00:06:52.003
with product repository.

143
00:06:52.003 --> 00:06:54.006
We added also a (mumbles) for it.

144
00:06:54.006 --> 00:06:55.009
Let's quickly go to the database.

145
00:06:55.009 --> 00:06:59.002
This is the MySQL Workbench that we have installed

146
00:06:59.002 --> 00:07:00.004
on my machine.

147
00:07:00.004 --> 00:07:05.002
And these are the two tables under the H plus schema.

148
00:07:05.002 --> 00:07:07.004
And if you look at this table of product,

149
00:07:07.004 --> 00:07:10.002
you already have the data for the product names

150
00:07:10.002 --> 00:07:11.007
and the image parts.

151
00:07:11.007 --> 00:07:16.001
The script for the entire H plus stable generation

152
00:07:16.001 --> 00:07:19.005
and inserting this data is already provided to you

153
00:07:19.005 --> 00:07:21.001
under your resources folder.

154
00:07:21.001 --> 00:07:22.005
You just have to run these scripts

155
00:07:22.005 --> 00:07:25.000
on the database server that you wish to use,

156
00:07:25.000 --> 00:07:27.006
and you can go ahead with your development.

157
00:07:27.006 --> 00:07:30.002
So this is the product table that we are talking about,

158
00:07:30.002 --> 00:07:32.009
which maps to this product entity.

159
00:07:32.009 --> 00:07:36.000
And inside this table, we have id as the primary key,

160
00:07:36.000 --> 00:07:39.005
which is designated by @Id annotation,

161
00:07:39.005 --> 00:07:43.006
which comes from the Spring JP data space.

162
00:07:43.006 --> 00:07:47.000
Also, if you look at your output in the console,

163
00:07:47.000 --> 00:07:48.005
you did go to home controller.

164
00:07:48.005 --> 00:07:49.006
You went to the search page,

165
00:07:49.006 --> 00:07:52.005
you went to the SearchController, and every single time,

166
00:07:52.005 --> 00:07:56.003
the search criteria was mapped with @RequestParam

167
00:07:56.003 --> 00:07:58.000
annotation on line 22.

168
00:07:58.000 --> 00:08:00.008
You're getting it correctly extracted

169
00:08:00.008 --> 00:08:02.007
in your controller class.

170
00:08:02.007 --> 00:08:04.006
So we have seen @RequestParam.

171
00:08:04.006 --> 00:08:06.001
We have used Model object

172
00:08:06.001 --> 00:08:08.003
in order to store the values for the views.

173
00:08:08.003 --> 00:08:10.003
We have also seen Model in view.

174
00:08:10.003 --> 00:08:12.001
In the next video, we're going to explore

175
00:08:12.001 --> 00:08:15.000
the Model attribute annotation.

