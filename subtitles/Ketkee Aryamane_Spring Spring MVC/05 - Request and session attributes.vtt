WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Narrator] Now that we have plugged in the

2
00:00:02.000 --> 00:00:05.003
log in interceptor in our H plus application.

3
00:00:05.003 --> 00:00:07.006
We are free to execute the remaining pieces

4
00:00:07.006 --> 00:00:09.009
of this demo.

5
00:00:09.009 --> 00:00:12.005
But before that let's take a quick look at

6
00:00:12.005 --> 00:00:15.004
how do you access the session and request

7
00:00:15.004 --> 00:00:18.004
attributes in your Spring MVC application.

8
00:00:18.004 --> 00:00:20.007
Now generally in a web application, storing

9
00:00:20.007 --> 00:00:24.006
data in HTTP session and request objects is

10
00:00:24.006 --> 00:00:26.000
a very common practice.

11
00:00:26.000 --> 00:00:28.001
When you have an incoming request, which could

12
00:00:28.001 --> 00:00:30.000
go to multiple controllers you need to

13
00:00:30.000 --> 00:00:33.001
access data across those controllers until

14
00:00:33.001 --> 00:00:34.007
the request gets completed.

15
00:00:34.007 --> 00:00:36.005
That data will alive until the request is

16
00:00:36.005 --> 00:00:37.004
completed processing.

17
00:00:37.004 --> 00:00:39.004
Similarly you can also store data in the

18
00:00:39.004 --> 00:00:41.006
HTTP session object which will be

19
00:00:41.006 --> 00:00:43.009
available across multiple requests

20
00:00:43.009 --> 00:00:46.004
until the session terminates.

21
00:00:46.004 --> 00:00:48.004
So playing around in floating data

22
00:00:48.004 --> 00:00:50.003
in request and session objects is

23
00:00:50.003 --> 00:00:52.004
quite an integral part of any web

24
00:00:52.004 --> 00:00:53.004
application.

25
00:00:53.004 --> 00:00:55.007
So how do you do that in Spring MVC?

26
00:00:55.007 --> 00:00:59.008
There is an annotation call @SessionAttributes.

27
00:00:59.008 --> 00:01:02.001
This will allow you to store an entire model of

28
00:01:02.001 --> 00:01:04.004
your application.

29
00:01:04.004 --> 00:01:07.000
This one is going be attached to a class level,

30
00:01:07.000 --> 00:01:10.000
along with the name of the model that you want to

31
00:01:10.000 --> 00:01:11.006
store the data for.

32
00:01:11.006 --> 00:01:13.008
We are going to exhibit this in one of our

33
00:01:13.008 --> 00:01:15.004
(unintelligible) of videos.

34
00:01:15.004 --> 00:01:17.007
Next is now that you know how to store data

35
00:01:17.007 --> 00:01:19.003
using session attributes annotation.

36
00:01:19.003 --> 00:01:20.008
How do you retrieve it?

37
00:01:20.008 --> 00:01:23.003
Simple, @Sessionattribute is the annotation

38
00:01:23.003 --> 00:01:24.006
to do that.

39
00:01:24.006 --> 00:01:26.002
So this is going to be our dash to the

40
00:01:26.002 --> 00:01:28.006
argument of you meta signature inside the

41
00:01:28.006 --> 00:01:31.003
controller and then you provide the name

42
00:01:31.003 --> 00:01:33.001
of the attribute that you are accessing

43
00:01:33.001 --> 00:01:35.005
and it will allow you to extract that value from

44
00:01:35.005 --> 00:01:38.002
the session inside your controller logic.

45
00:01:38.002 --> 00:01:41.001
Similar thing happens for the request attributes.

46
00:01:41.001 --> 00:01:43.007
So whatever data you store in the form of request

47
00:01:43.007 --> 00:01:46.005
attributes can be accessed on a meta signature

48
00:01:46.005 --> 00:01:50.008
argument with @Requestattribute annotation.

49
00:01:50.008 --> 00:01:52.007
Again, this will take in a name and then you

50
00:01:52.007 --> 00:01:57.000
can extract the value for that particular attribute.

