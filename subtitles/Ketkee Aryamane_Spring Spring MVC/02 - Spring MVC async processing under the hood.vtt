WEBVTT
1
00:00:00.005 --> 00:00:01.005
- [Instructor] Now let us understand

2
00:00:01.005 --> 00:00:04.004
Async Processing at Work.

3
00:00:04.004 --> 00:00:06.009
Firstly, this capability forms a part of

4
00:00:06.009 --> 00:00:08.008
Serviet 3.2 specification and Spring MVC

5
00:00:08.008 --> 00:00:13.000
has integrated itself very well with it.

6
00:00:13.000 --> 00:00:14.009
As a part of this mechanism, what happens is

7
00:00:14.009 --> 00:00:16.004
that there are separate threads.

8
00:00:16.004 --> 00:00:19.003
One for request processing and the other

9
00:00:19.003 --> 00:00:22.002
for the heavy lifting inside the application.

10
00:00:22.002 --> 00:00:25.001
How do we enable this in our Spring MVC App?

11
00:00:25.001 --> 00:00:25.009
Well, it's very simple.

12
00:00:25.009 --> 00:00:27.009
There's a flag called Async Supported.

13
00:00:27.009 --> 00:00:30.006
If you set that to True, then you have this

14
00:00:30.006 --> 00:00:32.008
enable in your application.

15
00:00:32.008 --> 00:00:35.000
We have created a project of Spring MVC

16
00:00:35.000 --> 00:00:38.000
using Spring Boot so that's already done for us

17
00:00:38.000 --> 00:00:40.005
by default, it's already set to True.

18
00:00:40.005 --> 00:00:43.006
In addition to enabling this capability,

19
00:00:43.006 --> 00:00:46.003
you've to make sure that your controller classes

20
00:00:46.003 --> 00:00:49.002
return either of the following from their methods.

21
00:00:49.002 --> 00:00:53.001
A Callable<T> or a DeferredResult<T>.

22
00:00:53.001 --> 00:00:55.002
By far all the controllers that we have designed

23
00:00:55.002 --> 00:00:58.003
for Hplus Application, the methods there

24
00:00:58.003 --> 00:01:01.001
return a String kind of a value

25
00:01:01.001 --> 00:01:02.005
and that is just the name of the view

26
00:01:02.005 --> 00:01:04.001
that we go back with.

27
00:01:04.001 --> 00:01:06.003
However, if you want to inject Async Processing

28
00:01:06.003 --> 00:01:08.000
capability to your application,

29
00:01:08.000 --> 00:01:10.009
then you need to return a Core Label of String

30
00:01:10.009 --> 00:01:13.009
or a DeferredResult of String.

31
00:01:13.009 --> 00:01:16.001
Right, so now that you've enabled and done

32
00:01:16.001 --> 00:01:17.007
everything right in your code,

33
00:01:17.007 --> 00:01:21.001
let's understand how will it work under the Hood.

34
00:01:21.001 --> 00:01:23.003
So now if a Request comes in,

35
00:01:23.003 --> 00:01:25.002
Thread-1 will be created from the

36
00:01:25.002 --> 00:01:27.006
Servlet Container for Request Processing.

37
00:01:27.006 --> 00:01:29.001
Thereafter, since you enabled

38
00:01:29.001 --> 00:01:32.003
MVC Asyncchronous Processing,

39
00:01:32.003 --> 00:01:34.001
Thread-2 which is another Thread is spawned

40
00:01:34.001 --> 00:01:37.007
by the Spring MVC Task Executor.

41
00:01:37.007 --> 00:01:40.008
Once that happens, Thread-1 going to dedicate

42
00:01:40.008 --> 00:01:43.002
all the responsibility to Thread-2,

43
00:01:43.002 --> 00:01:45.007
and Thread-2 in turn is going to call

44
00:01:45.007 --> 00:01:49.005
those blocking services for your application.

45
00:01:49.005 --> 00:01:52.001
Now because of this, Thread-1 is freed

46
00:01:52.001 --> 00:01:55.002
and can serve any other incoming SUTP request

47
00:01:55.002 --> 00:01:58.005
for your application.

48
00:01:58.005 --> 00:02:00.005
So when you enable this and a capability

49
00:02:00.005 --> 00:02:03.009
of Asynchronous Processing, your controllers

50
00:02:03.009 --> 00:02:05.000
of course return Call Label

51
00:02:05.000 --> 00:02:07.000
or Default Result types.

52
00:02:07.000 --> 00:02:09.004
Because of that, when Thread-1 dedicates

53
00:02:09.004 --> 00:02:11.004
the responsibility to Thread-2,

54
00:02:11.004 --> 00:02:14.000
the Dispatches servlet and all of it's associated

55
00:02:14.000 --> 00:02:17.003
filters will exit Thread-1.

56
00:02:17.003 --> 00:02:20.006
The response however, is still kept open

57
00:02:20.006 --> 00:02:22.005
because Thread-2 has not completed

58
00:02:22.005 --> 00:02:25.002
the execution of those Blocking calls.

59
00:02:25.002 --> 00:02:27.007
Once it's done with those calls,

60
00:02:27.007 --> 00:02:31.003
then the call label is going to produce a result.

61
00:02:31.003 --> 00:02:33.005
Or your application will set a value

62
00:02:33.005 --> 00:02:34.009
to that default result.

63
00:02:34.009 --> 00:02:36.006
Those are the result types.

64
00:02:36.006 --> 00:02:40.005
Once that's done, then the request is handed back

65
00:02:40.005 --> 00:02:42.003
to the Servlet container

66
00:02:42.003 --> 00:02:45.002
and at this point in time, the Dispatches Servlet

67
00:02:45.002 --> 00:02:47.009
and all the filters are invoked again

68
00:02:47.009 --> 00:02:52.000
to carry the Response-1 back to the client.

69
00:02:52.000 --> 00:02:54.007
So that is exactly what happens as a part

70
00:02:54.007 --> 00:02:57.007
of the Asynchronous Processing feature.

71
00:02:57.007 --> 00:03:00.008
In the next video, we will actually inject

72
00:03:00.008 --> 00:03:02.006
this capability of Asynchronous Processing

73
00:03:02.006 --> 00:03:06.000
in Hplus and look for the results ourselves.

