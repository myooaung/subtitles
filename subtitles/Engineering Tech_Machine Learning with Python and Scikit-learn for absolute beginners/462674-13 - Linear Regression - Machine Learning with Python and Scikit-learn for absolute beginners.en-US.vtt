WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:03.930
So let's understand linear regression through a simple example.

00:00:03.930 --> 00:00:08.715
Unlike classification where we predict the class of the output.

00:00:08.715 --> 00:00:11.070
Here we predict continuous values.

00:00:11.070 --> 00:00:17.295
For example, if this chart shows what is the car price for a certain number of cylinders,

00:00:17.295 --> 00:00:19.050
then given a number of cylinders,

00:00:19.050 --> 00:00:21.180
can we predict the car price?

00:00:21.180 --> 00:00:25.210
This type of prediction is called Regulation.

00:00:25.210 --> 00:00:28.370
Now given this data points,

00:00:28.370 --> 00:00:32.915
how do we determine the car price of a new car for a certain number of cylinders?

00:00:32.915 --> 00:00:36.275
Using linear regression, we can easily solve this problem.

00:00:36.275 --> 00:00:42.889
Linear regression is nothing but trying to find the line that best fits these points.

00:00:42.889 --> 00:00:45.410
And how do we determine this line?

00:00:45.410 --> 00:00:50.750
It's calculated based on a formula called Y equals a plus bx,

00:00:50.750 --> 00:00:55.140
where a is the intercept and b is the coefficient of the line.

00:00:55.630 --> 00:00:57.890
Now for it need new point,

00:00:57.890 --> 00:00:59.345
if we know the x value,

00:00:59.345 --> 00:01:03.530
then we can easily determine the y value by using this formula.

00:01:03.530 --> 00:01:06.380
Scikit-learn and other machine learning libraries,

00:01:06.380 --> 00:01:09.770
they provide you a class using which you can feed

00:01:09.770 --> 00:01:13.910
different data points and get this aggression or the predictor.

00:01:13.910 --> 00:01:17.135
How does the model determines the best-fitting line?

00:01:17.135 --> 00:01:20.810
And how do we know the accuracy of the prediction?

00:01:20.810 --> 00:01:25.430
So that is done by a simple concept called r-squared,

00:01:25.430 --> 00:01:28.460
which is also known as coefficient of determination.

00:01:28.460 --> 00:01:32.000
What this means is how good is the line compared to

00:01:32.000 --> 00:01:37.235
the line which is represented by the mean value of all the points.

00:01:37.235 --> 00:01:40.505
For example, if this is the mean value of all the data points,

00:01:40.505 --> 00:01:43.730
we can also predict using this mean value.

00:01:43.730 --> 00:01:47.210
But if we are coming up with a new line width linear regression,

00:01:47.210 --> 00:01:52.010
we need to see how good is that lane compared to this line.

00:01:52.010 --> 00:01:55.970
Now to calculate the R-square value concept is simple.

00:01:55.970 --> 00:02:00.035
You calculate what is the error for each of the points.

00:02:00.035 --> 00:02:06.500
That means how far is the line off from the actual value? For any point?

00:02:06.500 --> 00:02:08.165
If this is the actual value,

00:02:08.165 --> 00:02:15.650
the pointed with the vertical red line intercepts the predictor is the predicted value.

00:02:15.650 --> 00:02:20.870
The distance in red represents the loss or the error in prediction.

00:02:20.870 --> 00:02:23.645
You calculate loss for each point.

00:02:23.645 --> 00:02:26.045
Do a square of that, and add it up,

00:02:26.045 --> 00:02:32.945
you get the sum of residuals that is shown in the numerator here.

00:02:32.945 --> 00:02:36.680
Similarly, you calculate how far is the mean line from

00:02:36.680 --> 00:02:40.145
the actual value that is represented in green here.

00:02:40.145 --> 00:02:42.980
So that is sum of squares up totals lower

00:02:42.980 --> 00:02:46.835
the error lower is the value of sum of square of residuals.

00:02:46.835 --> 00:02:49.580
So the numerator will tend to 0.

00:02:49.580 --> 00:02:51.830
When the model becomes more accurate.

00:02:51.830 --> 00:02:56.825
That means R square value would be closer to one for a higher accuracy modelling.

00:02:56.825 --> 00:03:01.110
So higher the window part square better is the accuracy.

00:03:02.650 --> 00:03:06.275
And R-squared can never Maxwell loop one.

00:03:06.275 --> 00:03:10.775
R-square is also known as coefficient of determination.

00:03:10.775 --> 00:03:15.770
You may or may not remember the exact formula of R-squared.

00:03:15.770 --> 00:03:17.600
But for any model,

00:03:17.600 --> 00:03:20.135
you will find a method to get the R-square value.

00:03:20.135 --> 00:03:22.985
Hollywood to check is whether it is close to one or not.

00:03:22.985 --> 00:03:24.635
If the value is close to one,

00:03:24.635 --> 00:03:27.185
then you know that your model is very accurate.

00:03:27.185 --> 00:03:30.995
Let's apply this concept and solve a use case.

00:03:30.995 --> 00:03:33.740
Then we'll see how to extract formulas and then

00:03:33.740 --> 00:03:37.355
use the formula to predict output for new set of values.

00:03:37.355 --> 00:03:41.940
We have a new dataset called house prays dot csv.

00:03:42.730 --> 00:03:46.550
So it is two fields, distance and price.

00:03:46.550 --> 00:03:52.400
So distance represents what is the distance of the house from the city center and,

00:03:52.400 --> 00:03:54.920
and represents what is the house price.

00:03:54.920 --> 00:03:56.300
So as you can see,

00:03:56.300 --> 00:03:59.660
are higher the distance lower is the price.

00:03:59.660 --> 00:04:04.295
Now, how do we calculate how sprays of a new house,

00:04:04.295 --> 00:04:07.925
which is at a particular distance from the city center.

00:04:07.925 --> 00:04:12.500
We need to build a machine learning model using the linear regression technique,

00:04:12.500 --> 00:04:14.930
which you learn from this data and create

00:04:14.930 --> 00:04:19.880
a model using which we can predict house plays for new set of data.

00:04:19.880 --> 00:04:22.160
Let's import the standard libraries.

00:04:22.160 --> 00:04:28.010
This time we'll also import matplotlib so that we can plot the house price and distance.

00:04:28.010 --> 00:04:31.520
Next, let's load the dataset to a Pandas DataFrame.

00:04:31.520 --> 00:04:35.015
So as you can see, the advertisement loaded to the pandas DataFrame.

00:04:35.015 --> 00:04:39.030
Let's describe it to get some statistical info.

00:04:39.880 --> 00:04:43.880
We can see there are 40 records and the mean,

00:04:43.880 --> 00:04:45.995
standard deviation and other values.

00:04:45.995 --> 00:04:50.645
Let's separate out the independent and dependent variables.

00:04:50.645 --> 00:04:55.890
X will have the distance to the city center and why you left the house price.

00:05:01.660 --> 00:05:05.540
At this point. We can also plot

00:05:05.540 --> 00:05:10.710
the house price and distance to see how it looks on a chart.

00:05:12.310 --> 00:05:16.445
We can see that there's a linear relationship.

00:05:16.445 --> 00:05:19.385
As the distance increases,

00:05:19.385 --> 00:05:21.530
the house prices going down.

00:05:21.530 --> 00:05:24.815
And that is in a linear fashion.

00:05:24.815 --> 00:05:31.775
Now using linear regression will have to find a line that best represents these points.

00:05:31.775 --> 00:05:36.020
And using that will predict output for new data points.

00:05:36.020 --> 00:05:42.665
We'll comment it out for now. Let's run it again.

00:05:42.665 --> 00:05:49.590
Now using scikit-learn train test split will create the training data and test data

00:05:58.600 --> 00:06:04.610
using 32 records for training and eight records for testing.

00:06:04.610 --> 00:06:08.480
Scikit-learn provides in linear regression class using

00:06:08.480 --> 00:06:13.680
which we can create a regression object that will be our model.

00:06:14.500 --> 00:06:17.630
So this the aggression is the line or

00:06:17.630 --> 00:06:21.110
the model which has been trained on the training data.

00:06:21.110 --> 00:06:24.950
From regression, we can easily calculate the R-square value.

00:06:24.950 --> 00:06:28.130
There is a score method which gives us the R-square.

00:06:28.130 --> 00:06:36.510
Will print the R square value is 0.807.

00:06:36.760 --> 00:06:39.980
From the regressor, we can easily determine

00:06:39.980 --> 00:06:48.290
the intercept coefficient for our intercept is 610710.

00:06:48.290 --> 00:06:51.110
Let's now get the coefficient.

00:06:51.110 --> 00:06:58.744
Coefficient is minus 72635 because our house prices going down as the distance increases.

00:06:58.744 --> 00:07:01.565
So that's where we are a single negative coefficient.

00:07:01.565 --> 00:07:05.120
Now, anybody who wants to use our model can take

00:07:05.120 --> 00:07:08.285
this intercept and coefficient and get the house price.

00:07:08.285 --> 00:07:12.890
We do not need to send them the regressor class in binary format or export that model.

00:07:12.890 --> 00:07:16.025
All we need to share is the formula.

00:07:16.025 --> 00:07:22.160
So our formula becomes Y equal intercept plus coefficient multiplied by x.

00:07:22.160 --> 00:07:27.185
So it is the sequence 610710 minus

00:07:27.185 --> 00:07:34.490
72635 multiplied by the distance will first predict using the predictor method,

00:07:34.490 --> 00:07:38.730
will feed the training data to the regression and get the prediction.

00:07:41.980 --> 00:07:44.855
So this is the predicted house price.

00:07:44.855 --> 00:07:47.900
Let's compare it with the jailhouse place.

00:07:47.900 --> 00:07:51.650
We can see that for some cases it is very close.

00:07:51.650 --> 00:07:54.965
In some cases it is little bit off from the actual price.

00:07:54.965 --> 00:07:56.660
These are the actual prices,

00:07:56.660 --> 00:07:58.950
these are the predicted values.

00:07:59.920 --> 00:08:05.370
We can also plot the predicted value and the actual value.

00:08:07.570 --> 00:08:14.490
Created a scattered plot for the actual values per predicted value period L line plot.

00:08:14.740 --> 00:08:18.965
So this line represents our degree or our predictor.

00:08:18.965 --> 00:08:20.270
Now for any new point,

00:08:20.270 --> 00:08:24.950
we can easily determine the house price given the distance to the citizens.

00:08:24.950 --> 00:08:28.550
Let's now predict the house price for a house which is

00:08:28.550 --> 00:08:32.240
a 2.5 mile distance from the city center.

00:08:32.240 --> 00:08:36.695
The value is coming around 1449100 to 0.

00:08:36.695 --> 00:08:40.520
We can also get the same output using the formula

00:08:40.520 --> 00:08:45.260
y equals intercept plus coefficient multiplied by the X value.

00:08:45.260 --> 00:08:48.590
So we got four to 91 to 0.

00:08:48.590 --> 00:08:51.230
Now to share this model with anyone,

00:08:51.230 --> 00:08:52.325
we can share the formula.

00:08:52.325 --> 00:08:55.745
We can also create pickle files and create rest APIs,

00:08:55.745 --> 00:09:01.380
but this is one of the option that is available to export linear regression models.
