WEBVTT
1
00:00:01.540 --> 00:00:03.900
In our previous clip, we created our API.

2
00:00:03.900 --> 00:00:04.390
Now,

3
00:00:04.390 --> 00:00:07.580
let's take a look and explore it. In the AppSync start page, we

4
00:00:07.580 --> 00:00:11.800
should see our newly created API in the list of APIs. We named

5
00:00:11.800 --> 00:00:14.040
it GlobomanticsTaskManagerApi.

6
00:00:14.040 --> 00:00:17.220
Let's open it and explore. First,

7
00:00:17.220 --> 00:00:21.340
let's navigate to the schema by using the left side navigation bar.

8
00:00:21.340 --> 00:00:22.260
At first glance,

9
00:00:22.260 --> 00:00:25.730
we see the inputs. We have the create task input and the delete

10
00:00:25.730 --> 00:00:28.530
task input, and at the very bottom of the schema,

11
00:00:28.530 --> 00:00:31.640
we should have the update task input.

12
00:00:31.640 --> 00:00:35.780
The create task input has a title, date, and description. The ID will be

13
00:00:35.780 --> 00:00:39.950
autogenerated for us when you create a new item. For deleting,

14
00:00:39.950 --> 00:00:43.180
we only need to supply the ID, and for updating our data,

15
00:00:43.180 --> 00:00:47.040
we need to specify the ID, title, date, and the description.

16
00:00:47.040 --> 00:00:49.640
Next, we have the mutations.

17
00:00:49.640 --> 00:00:53.560
The wizard has created three mutations for us: the createGlobomanticsTasks,

18
00:00:53.560 --> 00:00:58.180
updateGlobomanticsTasks, and deleteGlobomanticsTasks. Using these, we'll be

19
00:00:58.180 --> 00:01:00.940
able to create tasks, update, and delete them.

20
00:01:00.940 --> 00:01:05.010
Next, we have the queries. We have two queries autogenerated for us: the

21
00:01:05.010 --> 00:01:09.280
getGlobomanticsTasks, which expects an ID, and returns a task.

22
00:01:09.280 --> 00:01:12.970
This is when we want to get a single task, and, to get all the

23
00:01:12.970 --> 00:01:16.070
tasks, we use the listGlobomanticsTasks query,

24
00:01:16.070 --> 00:01:19.440
which expects in a filter if you want to filter some items;

25
00:01:19.440 --> 00:01:22.240
and finally, we have the subscriptions.

26
00:01:22.240 --> 00:01:25.010
Subscriptions are what we use to get real time notifications

27
00:01:25.010 --> 00:01:28.450
when data changes, Here, the wizard has created three

28
00:01:28.450 --> 00:01:30.990
subscriptions for us: when a task is created,

29
00:01:30.990 --> 00:01:34.440
when a task is updated, and then when a task is deleted.

30
00:01:34.440 --> 00:01:38.170
We can subscribe from our client application, and get real time updates as

31
00:01:38.170 --> 00:01:42.340
soon as data changes, so we can show it to our users.

32
00:01:42.340 --> 00:01:45.040
Next, let's navigate to the data sources.

33
00:01:45.040 --> 00:01:49.140
Here is where we edit our data sources or add new ones.

34
00:01:49.140 --> 00:01:50.840
Next up, we have functions.

35
00:01:50.840 --> 00:01:55.350
Functions are single operations that are run against our data source that

36
00:01:55.350 --> 00:01:59.790
can be used to implement logic across multiple pipeline resolvers. We're

37
00:01:59.790 --> 00:02:02.620
going to come back at creating functions when we implement pipeline

38
00:02:02.620 --> 00:02:06.820
resolvers later on in the course. To test our API that we just created, we

39
00:02:06.820 --> 00:02:07.760
can navigate to the queries.

40
00:02:07.760 --> 00:02:11.260
Here, we have a helper UI that we can use to run queries

41
00:02:11.260 --> 00:02:15.410
against our API. The UI has a mutation for creating tasks,

42
00:02:15.410 --> 00:02:17.110
and a query for listing them.

43
00:02:17.110 --> 00:02:19.740
We can add or remove queries and mutations, and test them

44
00:02:19.740 --> 00:02:23.120
directly from in the screen without having to build a client

45
00:02:23.120 --> 00:02:25.890
UI. We also have the query variables.

46
00:02:25.890 --> 00:02:28.770
In this case, we have the createglobomanticstasksinput,

47
00:02:28.770 --> 00:02:31.040
which has a title, description, and date.

48
00:02:31.040 --> 00:02:36.190
So, let's run this query using the start query execution button, and create

49
00:02:36.190 --> 00:02:40.290
a new task by running the createGlobomanticsTasks mutation. As we can see,

50
00:02:40.290 --> 00:02:43.590
the query execution completed successfully, and now we have a task in our

51
00:02:43.590 --> 00:02:47.900
DynamoDB table. If you try to list them using the listGlobomantics query,

52
00:02:47.900 --> 00:02:51.040
we should see one item.

53
00:02:51.040 --> 00:02:54.340
Now, let's run the create task again,

54
00:02:54.340 --> 00:02:58.860
and if we list them, now we should see two items, and indeed,

55
00:02:58.860 --> 00:03:01.940
we have two tasks now in our DynamoDB table.

56
00:03:01.940 --> 00:03:07.540
Next, we have caching. Here, we can decide if we want to cache our API called.

57
00:03:07.540 --> 00:03:11.020
We can choose to cache full requests or perâ€‘resolver caching.

58
00:03:11.020 --> 00:03:14.070
We'll come back to caching and explore it in details later on in this

59
00:03:14.070 --> 00:03:19.430
course. In the settings page, here, we get our API details that we'll

60
00:03:19.430 --> 00:03:21.440
use to connect to our client application.

61
00:03:21.440 --> 00:03:26.040
We can change the API name as well, and then, change the authorization settings.

62
00:03:26.040 --> 00:03:28.890
We'll come back to this when we connect to our client application and

63
00:03:28.890 --> 00:03:34.610
set up authentication; and finally, we have monitoring. Here, we can

64
00:03:34.610 --> 00:03:37.940
choose to view our logs and see API metrics.

65
00:03:37.940 --> 00:03:41.520
Now that we have a better understanding of AppSync APIs, we'll start

66
00:03:41.520 --> 00:03:49.000
connecting our client application to this API that we just created, and start making queries and mutations.

