WEBVTT
1
00:00:02.240 --> 00:00:05.150
In this demo, we are going to connect our client application to

2
00:00:05.150 --> 00:00:08.640
the back end API that we created previously.

3
00:00:08.640 --> 00:00:13.140
You'll find the source code for the client application in the exercise files.

4
00:00:13.140 --> 00:00:15.050
This is a very large JavaScript application,

5
00:00:15.050 --> 00:00:17.750
so it's going to be straightforward, and you don't have to

6
00:00:17.750 --> 00:00:20.870
know any JavaScript frameworks like Angular, Vue, or React to

7
00:00:20.870 --> 00:00:22.740
complete this course successfully.

8
00:00:22.740 --> 00:00:26.840
First, let's start by installing the npm packages.

9
00:00:26.840 --> 00:00:28.280
Once the packages are installed,

10
00:00:28.280 --> 00:00:30.970
we start the application using the npm run dev

11
00:00:30.970 --> 00:00:35.740
command to run it on our local machine.

12
00:00:35.740 --> 00:00:39.170
This is an application without requesting any data from our API.

13
00:00:39.170 --> 00:00:43.040
Now, let's navigate back to the code and implement our logic.

14
00:00:43.040 --> 00:00:47.840
All the logic that we are going to implement can be found on the index.ts files.

15
00:00:47.840 --> 00:00:50.580
We are going to only implement the areas for querying

16
00:00:50.580 --> 00:00:52.840
and mutating data through AppSync.

17
00:00:52.840 --> 00:00:55.880
The rest of the code is basic even acquiring any updates,

18
00:00:55.880 --> 00:00:58.140
which you should not concern yourself with.

19
00:00:58.140 --> 00:01:03.240
We'll start importing the AWSAppSyncClient from the aws‑appsync library.

20
00:01:03.240 --> 00:01:07.640
Next, let's create a new instance of the AWSAppSyncClient.

21
00:01:07.640 --> 00:01:11.830
We need to specify three parameters for our AppSync client, the URL of our API,

22
00:01:11.830 --> 00:01:14.540
the region, and authentication.

23
00:01:14.540 --> 00:01:17.880
We can get this information from the settings page of our API in the

24
00:01:17.880 --> 00:01:23.200
AppSync console. Here, on the API details, we have the API URL, API ID,

25
00:01:23.200 --> 00:01:26.840
and the Primary auth mode, which is API KEY.

26
00:01:26.840 --> 00:01:35.040
Let's get these values and enter them in our code.

27
00:01:35.040 --> 00:01:37.410
The region, in my case, is us‑east‑1.

28
00:01:37.410 --> 00:01:40.800
Make sure you enter the correct region. You can also find the region in the

29
00:01:40.800 --> 00:01:45.560
API URL. The authentication mode for now is going to be API_KEY, and then we

30
00:01:45.560 --> 00:01:50.060
need to specify the API_KEY from the API settings details. Now that we have

31
00:01:50.060 --> 00:01:53.040
an instance of our AppSync client, let's start querying data.

32
00:01:53.040 --> 00:01:57.230
The AppSync client expects GraphQL queries. We need to pass the same queries

33
00:01:57.230 --> 00:02:01.490
that were defined in the schema of our API. Back in our API, if we now get a

34
00:02:01.490 --> 00:02:04.770
little schema definition, here in the queries,

35
00:02:04.770 --> 00:02:09.300
we are going to use the listGlobomanticsTasks query. In the src folder

36
00:02:09.300 --> 00:02:12.640
of the project, there is a folder called graphql,

37
00:02:12.640 --> 00:02:16.440
which has two files, Mutations.ts and Queries.ts.

38
00:02:16.440 --> 00:02:17.760
In the Queries.ts file,

39
00:02:17.760 --> 00:02:22.060
we are exporting the GetAllQuery object. Here, we are exporting the

40
00:02:22.060 --> 00:02:25.610
listGlobomanticsTasks query. And there's an output.

41
00:02:25.610 --> 00:02:29.740
It returns items with an id, title, date, and description.

42
00:02:29.740 --> 00:02:34.390
We are using the graphql‑tag library, so we get the string query and then parse

43
00:02:34.390 --> 00:02:39.340
it in the graphql object and then export it as GetAllQuery.

44
00:02:39.340 --> 00:02:39.740
Now,

45
00:02:39.740 --> 00:02:44.440
let's navigate back to the index.ts file and import this query.

46
00:02:44.440 --> 00:02:46.820
Here, we are doing import { GetAllQuery } from

47
00:02:46.820 --> 00:02:51.470
"./graphql/Queries.ts" file. Now, in the loadTasks function, we are

48
00:02:51.470 --> 00:02:56.440
going to query the tasks and render them in the UI.

49
00:02:56.440 --> 00:02:56.970
First,

50
00:02:56.970 --> 00:03:06.500
let's make an instance of the GetAllQuery. Now, using the AWS AppSync client,

51
00:03:06.500 --> 00:03:11.520
we can do client.query, and then specify the query as a parameter, and then

52
00:03:11.520 --> 00:03:16.440
here, we are going to specify the fetchPolicy as well to be network‑only. The

53
00:03:16.440 --> 00:03:21.120
network‑only policy will tell it to always make a query to the GraphQL API and

54
00:03:21.120 --> 00:03:23.540
never use the local cache.

55
00:03:23.540 --> 00:03:27.350
We'll get into caching later on in the course. The result of the query will

56
00:03:27.350 --> 00:03:31.320
have a data property, inside which there will be a listGlobomanticsTasks

57
00:03:31.320 --> 00:03:34.340
property, and then the items that we want inside.

58
00:03:34.340 --> 00:03:37.120
We are assigning the items into the tasks property,

59
00:03:37.120 --> 00:03:38.940
which is a global variable,

60
00:03:38.940 --> 00:03:43.290
and then we can use them later for updating or deleting them. And as a

61
00:03:43.290 --> 00:03:46.580
final step, we'll render them in the UI since we are not using any

62
00:03:46.580 --> 00:03:50.380
library like React or Angular. We are going to use a renderTasks

63
00:03:50.380 --> 00:03:55.640
function, and then pass in our tasks.

64
00:03:55.640 --> 00:03:58.840
Now, let's save the changes and test this out.

65
00:03:58.840 --> 00:04:01.840
And as we can see, we have two tasks listed here.

66
00:04:01.840 --> 00:04:05.550
Both their titles is Hello, world! since we used a query editor

67
00:04:05.550 --> 00:04:08.240
to create two tasks when we were testing.

68
00:04:08.240 --> 00:04:12.110
If we look at the Network tab, we can see the data that's come in. We have

69
00:04:12.110 --> 00:04:15.020
a property for data and then the listGlobomanticsTasks,

70
00:04:15.020 --> 00:04:19.260
which has the items inside, and then we have two items. And each

71
00:04:19.260 --> 00:04:22.340
item has a date, description, id, and the title.

72
00:04:22.340 --> 00:04:26.040
Let's try to change our query and remove the date property. Here in

73
00:04:26.040 --> 00:04:29.740
the queries, we just need to remove the date.

74
00:04:29.740 --> 00:04:34.580
Let's save the changes and navigate to our application. This time around,

75
00:04:34.580 --> 00:04:39.140
if we look at the data, the items do not have a date property, as we only

76
00:04:39.140 --> 00:04:42.440
requested the id, title, and description.

77
00:04:42.440 --> 00:04:46.150
Using GraphQL is very convenient for querying only the data that we need,

78
00:04:46.150 --> 00:04:54.000
allowing for using the same API for different applications. We'll look at data mutations in the next clip.

