1
00:00:02,040 --> 00:00:05,340
In this clip, we are going to take a look at resolvers.

2
00:00:05,340 --> 00:00:08,150
We are going to edit the existing resolvers so we can set a

3
00:00:08,150 --> 00:00:11,150
date property for our task automatically,

4
00:00:11,150 --> 00:00:13,790
and the UI will not need to pass a date.

5
00:00:13,790 --> 00:00:18,440
This way we make sure that the creation date of the task is always accurate.

6
00:00:18,440 --> 00:00:22,280
Resolvers are what GraphQL uses to gather the data that it delivers.

7
00:00:22,280 --> 00:00:26,790
It takes in a GraphQL query and outputs the data that the client has requested.

8
00:00:26,790 --> 00:00:30,720
In AppSync we can find the resolvers in the schema definition.

9
00:00:30,720 --> 00:00:35,040
On the right side, we have the resolvers for the mutations and the queries.

10
00:00:35,040 --> 00:00:37,360
Here we have three resolvers for creating,

11
00:00:37,360 --> 00:00:41,950
updating, and deleting tasks and two resolvers for getting and listing queries.

12
00:00:41,950 --> 00:00:46,640
We are going to update the resolver on the createGlobomanticsTasks.

13
00:00:46,640 --> 00:00:53,140
We can open the resolver by clicking on its name.

14
00:00:53,140 --> 00:00:55,540
The resolver has two mapping templates,

15
00:00:55,540 --> 00:00:59,940
one for mapping requests and one for mapping responses.

16
00:00:59,940 --> 00:01:02,510
The response mapping attribute is very straightforward.

17
00:01:02,510 --> 00:01:05,850
Here its just converting to JSON the output returned from the

18
00:01:05,850 --> 00:01:09,740
database which can be found on the context.result.

19
00:01:09,740 --> 00:01:12,380
AppSync has a couple of helping variables that can

20
00:01:12,380 --> 00:01:15,040
be used in the mapping templates.

21
00:01:15,040 --> 00:01:19,740
By clicking on the Info button, we can get a quick reference.

22
00:01:19,740 --> 00:01:24,470
We have context.arguments, or we can use context.args for short,

23
00:01:24,470 --> 00:01:28,840
which contains the data passed during the request from the client application.

24
00:01:28,840 --> 00:01:33,640
Next, we have the identity object that has info on the currently logged‑in user,

25
00:01:33,640 --> 00:01:36,280
which we can use if we want to insert user‑related

26
00:01:36,280 --> 00:01:38,160
information into our database.

27
00:01:38,160 --> 00:01:42,340
Context.result contains the output returned from our data source.

28
00:01:42,340 --> 00:01:46,040
In this case, it would be from our DynamoDB table.

29
00:01:46,040 --> 00:01:49,610
Then we have some helpers which are found on the util object for

30
00:01:49,610 --> 00:01:53,490
converting object to JSON or generating automatic IDs.

31
00:01:53,490 --> 00:01:55,380
If you want to look at the full reference,

32
00:01:55,380 --> 00:01:59,040
you can do that by clicking on the link here.

33
00:01:59,040 --> 00:02:01,950
Here you can find all the existing variables that can

34
00:02:01,950 --> 00:02:03,840
be used in the mapping template.

35
00:02:03,840 --> 00:02:05,620
We don't have time to go through all of them,

36
00:02:05,620 --> 00:02:09,740
but we'll be using a couple of them during this clip.

37
00:02:09,740 --> 00:02:13,540
Now let's take a look at our request mapping template.

38
00:02:13,540 --> 00:02:17,230
The operation for this action is PutItem, which is used to define that we

39
00:02:17,230 --> 00:02:21,040
are adding or updating an item from our DynamoDB table.

40
00:02:21,040 --> 00:02:21,520
Next,

41
00:02:21,520 --> 00:02:26,410
we define the key for a record. Here we are using the auto id function from

42
00:02:26,410 --> 00:02:31,440
our util helper and converting it to a DynamoDB JSON.

43
00:02:31,440 --> 00:02:35,230
Next we define the attributeValues. AttributeValues specify

44
00:02:35,230 --> 00:02:37,440
the data that goes into our database.

45
00:02:37,440 --> 00:02:42,100
The values can be found in the input property of the arguments, so we do

46
00:02:42,100 --> 00:02:48,100
context.arguments.input, or for short, ctx.args.input, and we are using

47
00:02:48,100 --> 00:02:52,040
the toMapValuesJson from our DynamoDB utility.

48
00:02:52,040 --> 00:02:57,400
This will map all the properties specified in our request to a DynamoDB table.

49
00:02:57,400 --> 00:03:02,780
Here we are going to change it so we specify the values individually so we can

50
00:03:02,780 --> 00:03:06,520
set the date property. Instead of mapping the entire output, we are going to

51
00:03:06,520 --> 00:03:09,140
specify each property individually.

52
00:03:09,140 --> 00:03:12,500
We are going to map the title and the description from the values that

53
00:03:12,500 --> 00:03:16,280
were specified on the request. And then for the date property, we are

54
00:03:16,280 --> 00:03:19,630
going to ignore the date that was specified in the request and set the

55
00:03:19,630 --> 00:03:23,750
current date. We are going to use the time utility and then use a

56
00:03:23,750 --> 00:03:27,860
nowFormatted function. Here we need to specify a valid date that is

57
00:03:27,860 --> 00:03:30,040
supported by the DynamoDB table.

58
00:03:30,040 --> 00:03:35,040
The year‑month‑date format works for this case. And then we convert this value

59
00:03:35,040 --> 00:03:40,240
to a DynamoDB JSON This way every time a new task is created,

60
00:03:40,240 --> 00:03:43,830
we are making sure that the date is the current date and the user

61
00:03:43,830 --> 00:03:48,740
cannot set an older date or a date in the future.

62
00:03:48,740 --> 00:03:51,760
Now let's save the resolver and navigate back to our client

63
00:03:51,760 --> 00:03:54,980
application. In our client application,

64
00:03:54,980 --> 00:03:58,940
where we create a task, let's remove the date field and leave it empty.

65
00:03:58,940 --> 00:04:03,040
And now let's navigate back to our UI to try and create a new task.

66
00:04:03,040 --> 00:04:09,700
Let's name our task Date Test And when we create our

67
00:04:09,700 --> 00:04:11,580
task, it should have the current date.

68
00:04:11,580 --> 00:04:14,250
And indeed, as soon as the task is created,

69
00:04:14,250 --> 00:04:17,340
we can now see that this has the current date.

70
00:04:17,340 --> 00:04:20,010
So our resolver is setting the date for us,

71
00:04:20,010 --> 00:04:21,750
and we don't have to specify the date.

72
00:04:21,750 --> 00:04:23,960
Even if the client application specifies the date,

73
00:04:23,960 --> 00:04:26,030
it will be ignored. This way,

74
00:04:26,030 --> 00:04:30,540
we make sure that the creation date for our task is always the current date.

75
00:04:30,540 --> 00:04:35,100
Resolvers enable us to customize the data going in and out of our database,

76
00:04:35,100 --> 00:04:42,000
which enables us to quickly customize them to support different scenarios for our APIs.

