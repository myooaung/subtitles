WEBVTT
1
00:00:02.040 --> 00:00:02.790
In this module,

2
00:00:02.790 --> 00:00:07.520
we learned how to customize our AppSync APIs and AppSync client. We went

3
00:00:07.520 --> 00:00:11.430
over using AppSync subscriptions from client application to get notified on

4
00:00:11.430 --> 00:00:16.390
data changes whenever a mutation is performed. We explored server‑side

5
00:00:16.390 --> 00:00:20.170
caching with our AppSync APIs and implemented per‑resolver caching from our

6
00:00:20.170 --> 00:00:24.160
Globomantics task query to provide the users with fast responses and

7
00:00:24.160 --> 00:00:26.840
improve our API latency.

8
00:00:26.840 --> 00:00:31.260
We looked at different fetch policies with our AppSync client and

9
00:00:31.260 --> 00:00:35.770
implemented client‑side caching to show cached data while the data from

10
00:00:35.770 --> 00:00:39.630
the server was still being loaded in order to provide our users with a

11
00:00:39.630 --> 00:00:44.230
better experience. We learned how to customize our AppSync client to

12
00:00:44.230 --> 00:00:48.370
work offline so users can keep working uninterrupted when an internet

13
00:00:48.370 --> 00:00:52.180
connection is not available and sync the changes when they are back

14
00:00:52.180 --> 00:00:53.240
online.

15
00:00:53.240 --> 00:00:53.890
Finally,

16
00:00:53.890 --> 00:00:57.110
we learned how to use pipeline resolvers to implement custom

17
00:00:57.110 --> 00:01:00.620
logic using lambda functions in order to customize the data

18
00:01:00.620 --> 00:01:02.440
coming into our application.

19
00:01:02.440 --> 00:01:05.850
I hope this has given you an understanding on how to work with application

20
00:01:05.850 --> 00:01:10.360
data using AppSync. You can start by putting this knowledge to use by using

21
00:01:10.360 --> 00:01:16.000
AppSync for building your own applications. Thank you for watching.

