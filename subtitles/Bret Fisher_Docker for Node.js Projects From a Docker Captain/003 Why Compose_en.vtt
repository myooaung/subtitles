WEBVTT
1
00:00:02.719 --> 00:00:05.149
When we talk about Compose, there's two parts to that

2
00:00:05.150 --> 00:00:08.170
puzzle. There is the Docker Compose command line,

3
00:00:08.540 --> 00:00:10.985
and then there is the Compose file format.

4
00:00:11.750 --> 00:00:14.270
A lot of times when I'm going back and forth between them,

5
00:00:14.360 --> 00:00:16.810
I'll say the Compose CLI for the command line, and

6
00:00:17.420 --> 00:00:20.000
I'll say Compose file for the file format.

7
00:00:20.150 --> 00:00:22.579
Because these can be used separate and together to do

8
00:00:22.580 --> 00:00:23.580
different things.

9
00:00:24.320 --> 00:00:25.594
The Compose CLI is largely

10
00:00:27.860 --> 00:00:30.160
focused around developer workflows.

11
00:00:30.440 --> 00:00:33.135
That is, you working on your local machine, or maybe on

12
00:00:33.440 --> 00:00:36.560
a server, but you're actually developing the software,

13
00:00:36.620 --> 00:00:39.021
and testing it, creating some automation for your

14
00:00:39.650 --> 00:00:42.920
test maybe. But, it's not really designed for production.

15
00:00:42.950 --> 00:00:45.100
We'll talk more about that throughout this section and

16
00:00:45.140 --> 00:00:46.140
course.

17
00:00:46.740 --> 00:00:49.700
The CLI talks to the Docker daemon, so it's a

18
00:00:49.860 --> 00:00:51.750
replacement in a lot of cases.

19
00:00:51.800 --> 00:00:54.720
In fact, in my day-to-day work, it is the

20
00:00:54.750 --> 00:00:56.140
command line tool I use all day.

21
00:00:56.160 --> 00:00:58.022
It's rare that I use the Docker binary

22
00:00:59.700 --> 00:01:00.780
to talk to the engine.

23
00:01:01.050 --> 00:01:03.029
When you think of the Docker Compose command line, just

24
00:01:03.030 --> 00:01:05.433
think of it as an alternative to the Docker CLI.

25
00:01:06.390 --> 00:01:09.300
It's easier to use when you have multiple,

26
00:01:09.660 --> 00:01:12.299
complex container deployments, you know, when you've got a

27
00:01:12.300 --> 00:01:14.699
bunch of settings. In fact, if you just look at this

28
00:01:14.700 --> 00:01:17.700
example command, this would be me running a typical

29
00:01:17.910 --> 00:01:20.460
Node developer environment of a single container.

30
00:01:21.000 --> 00:01:23.600
You can already see lots of complexity in here, right.

31
00:01:23.710 --> 00:01:25.700
We've got ports we need to open.

32
00:01:25.710 --> 00:01:27.170
We've got volumes we need to mount.

33
00:01:27.420 --> 00:01:30.750
We have environment settings we need to build before

34
00:01:31.080 --> 00:01:32.770
we actually deploy the container.

35
00:01:33.030 --> 00:01:34.420
This is a lot of stuff, right.

36
00:01:34.446 --> 00:01:36.561
So most people, if they didn't have Compose, would be

37
00:01:36.720 --> 00:01:39.415
creating shell scripts in order to wrap this complexity

38
00:01:39.780 --> 00:01:41.356
up, because we don't want have to type this every day,

39
00:01:41.670 --> 00:01:43.189
right. So, this Compose command

40
00:01:44.700 --> 00:01:47.493
line was largely spun out of the idea of let's not create

41
00:01:48.000 --> 00:01:50.670
more scripts to solve this problem.

42
00:01:50.920 --> 00:01:53.762
Let's create a tool that automates this workflow in a more

43
00:01:53.790 --> 00:01:54.840
declarative way.

44
00:01:55.910 --> 00:01:58.030
I'm always going to recommend you use the Docker CLI

45
00:01:58.430 --> 00:02:00.684
locally for development instead of the regular

46
00:02:01.460 --> 00:02:04.302
Docker command line, and we'll only use the Docker command

47
00:02:04.310 --> 00:02:06.589
line when there's maybe not a Compose command line

48
00:02:06.590 --> 00:02:09.799
equivalent. Lastly, ideally,

49
00:02:09.800 --> 00:02:12.130
you're not using the Docker Compose command line in

50
00:02:12.140 --> 00:02:13.260
production on servers.

51
00:02:13.400 --> 00:02:16.010
You might use it for testing on servers.

52
00:02:16.190 --> 00:02:18.836
But really, when you go production, in a lot of cases,

53
00:02:19.100 --> 00:02:21.730
you're going to want multiple servers for some redundancy.

54
00:02:22.010 --> 00:02:24.920
That's where orchestrators do well, such as

55
00:02:24.980 --> 00:02:25.980
Swarm or Kubernetes.

56
00:02:26.720 --> 00:02:29.870
In fact, later in the section, there's a lecture on

57
00:02:29.930 --> 00:02:32.723
the benefits of considering something like Swarm, instead

58
00:02:32.930 --> 00:02:35.449
of using Docker Compose, even when you're just doing one

59
00:02:35.450 --> 00:02:35.840
server.

