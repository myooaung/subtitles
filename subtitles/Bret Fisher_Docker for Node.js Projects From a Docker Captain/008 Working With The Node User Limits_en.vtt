WEBVTT
1
00:00:02.600 --> 00:00:05.478
In the last lecture, I gave you the introduction of using

2
00:00:05.680 --> 00:00:07.980
least privilege users in containers.

3
00:00:08.360 --> 00:00:10.999
That's fancy words for saying we're swapping out the root

4
00:00:11.000 --> 00:00:13.450
user for the built-in Node user that's not enabled

5
00:00:14.180 --> 00:00:16.924
by default. I want to show you some of the things you'll

6
00:00:17.210 --> 00:00:19.400
be dealing with when you do that.

7
00:00:19.550 --> 00:00:21.706
When you enable that user, it affects pretty

8
00:00:22.550 --> 00:00:24.230
much everything that you're going to be dealing with.

9
00:00:24.440 --> 00:00:27.380
Particularly file and directory permissions,

10
00:00:27.920 --> 00:00:30.726
particularly for write permissions because by default,

11
00:00:31.160 --> 00:00:32.839
when you do everything in a Dockerfile, it's going to put

12
00:00:32.840 --> 00:00:35.149
stuff in there as root, and root has access to everything.

13
00:00:35.150 --> 00:00:37.992
It can read, write, everything. But once you start running

14
00:00:38.030 --> 00:00:40.088
as Node user, weird little things can crop

15
00:00:41.000 --> 00:00:42.650
up that you didn't have to worry about before.

16
00:00:43.130 --> 00:00:45.923
Couple of those things would include write permissions in

17
00:00:46.160 --> 00:00:48.709
the directories in the container in case your Node app

18
00:00:48.710 --> 00:00:50.210
expects to have write permissions.

19
00:00:50.660 --> 00:00:53.230
It might be harder for you to do npm installs.

20
00:00:53.450 --> 00:00:55.879
You might get access denied on occasions because of certain

21
00:00:55.880 --> 00:00:56.920
permission setups.

22
00:00:57.290 --> 00:01:00.132
Then when you bind mount for local development, especially

23
00:01:00.440 --> 00:01:03.233
if you're on Mac or Windows, those bind mounts might show

24
00:01:03.470 --> 00:01:04.540
up as root as well.

25
00:01:04.730 --> 00:01:07.180
Then that's a problem because your Node user can't

26
00:01:07.730 --> 00:01:11.150
do anything on those folders with permissions

27
00:01:11.210 --> 00:01:12.210
for root only.

28
00:01:12.620 --> 00:01:15.462
Here's a couple of tips that will help you get through all

29
00:01:15.560 --> 00:01:18.530
that. First, it would definitely help you to brush up

30
00:01:18.860 --> 00:01:21.830
on your Linux file and directory permissions.

31
00:01:22.040 --> 00:01:24.098
Specifically, the chown and chmod commands

32
00:01:25.220 --> 00:01:27.559
because you'll be using those to solve some of these

33
00:01:27.560 --> 00:01:30.410
problems. There are also Docker commands

34
00:01:30.530 --> 00:01:31.610
that will help us along the way.

35
00:01:32.374 --> 00:01:35.085
First, I had this happy sample app here.

36
00:01:35.480 --> 00:01:38.559
I'm in the user node directory,

37
00:01:38.720 --> 00:01:41.030
if you're following along in the course repo.

38
00:01:41.480 --> 00:01:42.853
In here, I have a Dockerfile.

39
00:01:43.220 --> 00:01:44.220
Let me just pull that up.

40
00:01:48.240 --> 00:01:49.510
This is fairly standard.

41
00:01:49.870 --> 00:01:52.900
This was a very basic example because

42
00:01:52.930 --> 00:01:55.772
even the basic examples, when it comes to permissions, are

43
00:01:55.810 --> 00:01:57.999
going to have roughly the same issues as you would in a

44
00:01:58.000 --> 00:01:59.210
more complicated example.

45
00:02:00.470 --> 00:02:03.920
Normally, I could just go in here and I would pick a line

46
00:02:03.950 --> 00:02:06.680
and say, well let's do it down here.

47
00:02:07.130 --> 00:02:09.990
Let's do it at the very bottom. User node.

48
00:02:11.090 --> 00:02:14.300
If I do that, that means that any

49
00:02:14.810 --> 00:02:17.180
commands after that that are one of the three.

50
00:02:17.480 --> 00:02:19.716
There's the run command, the entry point and the cmd.

51
00:02:20.510 --> 00:02:23.107
If any of those three come after this line, they will

52
00:02:23.510 --> 00:02:26.156
be using the Node user to execute those things instead

53
00:02:26.690 --> 00:02:29.042
of the root user. But everything else will still

54
00:02:29.690 --> 00:02:30.690
be acting as root.

55
00:02:31.220 --> 00:02:33.439
That can be a little bit confusing especially if you're not

56
00:02:33.440 --> 00:02:35.659
used to those three. Make sure you remember that those

57
00:02:35.660 --> 00:02:38.030
three are the limit. Those are the only ones that will work

58
00:02:38.060 --> 00:02:39.060
as a Node user.

59
00:02:39.740 --> 00:02:41.060
If I exit this,

60
00:02:43.310 --> 00:02:46.092
and I do a docker build, I'll just call

61
00:02:46.520 --> 00:02:47.520
this user node.

62
00:02:50.980 --> 00:02:53.332
Everything works fine. In fact, my Node app will

63
00:02:54.040 --> 00:02:55.559
run because everything in there

64
00:02:57.220 --> 00:02:59.650
has read access, by default.

65
00:03:00.190 --> 00:03:02.679
But if I go check out the permissions in there with a

66
00:03:02.680 --> 00:03:04.787
docker exec here, I can see that everything

67
00:03:05.920 --> 00:03:07.370
is not like I would expect it.

68
00:03:08.490 --> 00:03:09.830
If I do a docker run

69
00:03:11.710 --> 00:03:12.710
into that user node,

70
00:03:14.930 --> 00:03:15.930
and get bash. If I do a ls

71
00:03:18.240 --> 00:03:21.380
al in here, you'll see that everything has the label root.

72
00:03:21.690 --> 00:03:23.130
If I go up a directory.

73
00:03:23.250 --> 00:03:26.550
Because I'm setting the Node modules in a directory higher,

74
00:03:26.820 --> 00:03:28.680
you'll notice that that's also root as well.

75
00:03:29.250 --> 00:03:31.112
This means that my app will run and it

76
00:03:32.280 --> 00:03:34.500
will work as the Node user, but if it expects to write

77
00:03:34.590 --> 00:03:37.481
anything anywhere in these file paths, it's going to have a

78
00:03:37.530 --> 00:03:39.539
problem. If I try to do npm install while

79
00:03:40.680 --> 00:03:43.700
doing local development as the Node user, this

80
00:03:43.710 --> 00:03:46.160
will have a problem because I won't have any write

81
00:03:46.170 --> 00:03:47.170
permissions.

82
00:03:47.830 --> 00:03:48.830
Let's back out.

83
00:03:49.210 --> 00:03:50.865
If I jump back into that Dockerfile,

84
00:03:55.660 --> 00:03:58.453
you might be tempted to take this user directive and move

85
00:03:58.870 --> 00:04:01.252
it all the way up. Just move it all the way to the very

86
00:04:01.253 --> 00:04:03.520
top. That way, everything is consistent.

87
00:04:07.320 --> 00:04:08.320
Let's try that one. Do a build again.

88
00:04:12.330 --> 00:04:14.760
You'll see that I actually had a build failure.

89
00:04:15.090 --> 00:04:17.148
This build failure was because npm install

90
00:04:18.120 --> 00:04:20.608
didn't have the permissions it needed on the directory

91
00:04:21.149 --> 00:04:24.240
because all those directories were created as

92
00:04:24.300 --> 00:04:27.250
root. Remember the workdir command is not one of the three.

93
00:04:27.480 --> 00:04:30.330
So, workdir is going to create the directory as root

94
00:04:30.360 --> 00:04:32.908
unfortunately. And then npm install doesn't have any

95
00:04:33.210 --> 00:04:34.320
permissions to do anything.

96
00:04:35.130 --> 00:04:37.289
One of the ways I get around that is with the example in

97
00:04:37.290 --> 00:04:39.818
the last lecture. I manually create directories, then I

98
00:04:39.840 --> 00:04:42.180
manually assign permissions as root.

99
00:04:42.480 --> 00:04:44.766
Then after that, I change to the user node.

100
00:04:45.830 --> 00:04:46.830
Let's try that.

101
00:04:51.530 --> 00:04:54.830
I'm going to move this down to where I need it to be,

102
00:04:58.270 --> 00:04:59.710
right before the run command.

103
00:05:00.250 --> 00:05:03.064
Then right above it, I can add another run command

104
00:05:07.930 --> 00:05:11.290
to do a mkdir on the app directory that I'll need later.

105
00:05:12.500 --> 00:05:16.220
Then I'm going to change the owner recursively

106
00:05:16.310 --> 00:05:19.190
in this directory and then any directories below it to

107
00:05:19.220 --> 00:05:20.446
node, group node.

108
00:05:21.210 --> 00:05:22.358
So, it will be user node, group node.

109
00:05:23.030 --> 00:05:25.284
The reason I'm putting this here is because if

110
00:05:26.090 --> 00:05:28.687
I tried to do it all in one line, with this run below

111
00:05:29.180 --> 00:05:31.581
it and I try to be optimized with it, the problem

112
00:05:32.450 --> 00:05:35.209
there is that it will be acting, and that run line on line

113
00:05:35.210 --> 00:05:36.925
10, as the user node, which doesn't

114
00:05:38.270 --> 00:05:39.970
have permissions to create directories.

115
00:05:39.980 --> 00:05:42.710
So, then that mkdir will fail, and you can see the problem.

116
00:05:42.990 --> 00:05:45.290
There's a little bit of an ordering problem here and

117
00:05:45.470 --> 00:05:46.730
basically this will work.

118
00:05:46.760 --> 00:05:48.530
I make the directory, change the permissions.

119
00:05:48.560 --> 00:05:50.765
I then change to user node and then I can run

120
00:05:51.620 --> 00:05:53.810
my npm stuff as that user.

121
00:05:53.990 --> 00:05:55.110
Let's try one last time.

122
00:06:01.360 --> 00:06:04.104
Great. We built successfully and if we run it, it should

123
00:06:04.420 --> 00:06:06.759
be fine for the simple app that doesn't really need a lot

124
00:06:06.760 --> 00:06:09.259
of special permissions. Of course, your apps may be

125
00:06:09.610 --> 00:06:12.400
different. You may be doing user uploads, or

126
00:06:12.640 --> 00:06:14.889
reading and writing files in various places, so make sure

127
00:06:14.890 --> 00:06:17.170
you do the chown on those as well.

128
00:06:17.770 --> 00:06:20.612
The next thing is you need to make sure that when you copy

129
00:06:20.830 --> 00:06:23.400
in files, that they're also the user node,

130
00:06:24.160 --> 00:06:26.590
just case that's what Node expects.

131
00:06:26.620 --> 00:06:29.349
A lot of apps with Node, in particular, it won't have that

132
00:06:29.350 --> 00:06:32.049
problem. That's not true of all apps, and so this is sort

133
00:06:32.050 --> 00:06:34.843
of a standard that I adhere to even though it maybe isn't

134
00:06:34.900 --> 00:06:36.970
required with your particular app.

135
00:06:37.360 --> 00:06:39.320
I'll jump back in that Dockerfile and on

136
00:06:40.450 --> 00:06:43.280
this copy line, I will add in the chown

137
00:06:44.940 --> 00:06:46.940
node node like so.

138
00:06:48.530 --> 00:06:50.570
That will behave as you would expect.

139
00:06:51.110 --> 00:06:53.779
You also might do that same thing on the copy line for the

140
00:06:53.780 --> 00:06:54.780
package JSON.

141
00:06:55.100 --> 00:06:57.844
It kind of just depends on your development workflow and

142
00:06:57.860 --> 00:06:59.479
whether you're going to need to edit those files in the

143
00:06:59.480 --> 00:07:00.510
container later on.

144
00:07:01.280 --> 00:07:03.534
But, even if you have problems with that later

145
00:07:04.250 --> 00:07:07.670
with Docker Compose, luckily Docker Compose to the rescue.

146
00:07:08.000 --> 00:07:11.360
You can do Docker Compose exec commands

147
00:07:11.390 --> 00:07:13.070
as specific users.

148
00:07:13.250 --> 00:07:15.749
Like I said before, by default, once you've changed

149
00:07:16.250 --> 00:07:19.460
the user to Node, any exec commands

150
00:07:19.520 --> 00:07:21.390
after you start the containers will also be Node.

151
00:07:21.950 --> 00:07:24.800
Simply doing a -u root here

152
00:07:25.010 --> 00:07:27.379
will get you into the container as root in case need to do

153
00:07:27.380 --> 00:07:30.267
something like a package manager command or an npm

154
00:07:30.560 --> 00:07:31.560
install globally.

155
00:07:32.610 --> 00:07:35.403
Hopefully that will get you through the majority of least

156
00:07:35.790 --> 00:07:38.400
privilege user problems that you might experience.

157
00:07:38.640 --> 00:07:41.309
And I hope you stick with it even if you hit permissions

158
00:07:41.310 --> 00:07:44.103
roadblocks because every problem that I've experienced is

159
00:07:44.370 --> 00:07:46.829
solvable through changing permissions and working with

160
00:07:46.830 --> 00:07:47.830
Docker commands.

161
00:07:48.090 --> 00:07:50.736
I really do think it's a great practice to always have

162
00:07:51.150 --> 00:07:53.670
your images using the Node user.

