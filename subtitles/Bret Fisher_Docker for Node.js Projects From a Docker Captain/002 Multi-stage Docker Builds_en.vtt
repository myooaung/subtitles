WEBVTT
1
00:00:02.510 --> 00:00:04.776
Multi-stage was a feature that came out in mid 2017,

2
00:00:04.976 --> 00:00:06.529
and it started

3
00:00:06.729 --> 00:00:07.863
with the 17.06 release.

4
00:00:08.063 --> 00:00:09.870
It's been in there ever since,

5
00:00:10.070 --> 00:00:12.820
and it's more or less stayed the same since then.

6
00:00:13.020 --> 00:00:14.352
You can now rely on it,

7
00:00:14.552 --> 00:00:17.330
but it was something that wasn't available just a few years ago.

8
00:00:17.530 --> 00:00:19.040
It solves one,

9
00:00:19.240 --> 00:00:22.429
major complexity as your complexity grows

10
00:00:22.629 --> 00:00:24.320
in your Dockerfiles. That is,

11
00:00:24.530 --> 00:00:26.527
how do we take a single Dockerfile,

12
00:00:26.870 --> 00:00:28.634
with a single from, and single CMD.

13
00:00:29.630 --> 00:00:31.460
How do we use that in all the different places.

14
00:00:31.940 --> 00:00:34.850
Multi-stage replaces what we used to do,

15
00:00:35.060 --> 00:00:36.478
which was create multiple Dockerfiles,

16
00:00:36.950 --> 00:00:38.900
for multiple reasons, of the same code.

17
00:00:39.200 --> 00:00:41.210
Or maybe we had one image for development,

18
00:00:41.420 --> 00:00:44.360
and then we maybe had another image that was based on that

19
00:00:44.560 --> 00:00:46.280
for production, or vice versa.

20
00:00:46.610 --> 00:00:48.967
We have lots of different ways to make Dockerfiles

21
00:00:49.670 --> 00:00:50.600
even with the same code.

22
00:00:51.050 --> 00:00:53.850
This essentially gives us the chance to use multiple from's

23
00:00:55.310 --> 00:00:56.287
inside the same Dockerfile

24
00:00:56.810 --> 00:00:58.450
and then multiple results.

25
00:00:58.760 --> 00:01:01.909
This gives us the chance to create multiple images from

26
00:01:02.109 --> 00:01:04.909
the single Dockerfile that you would normally use in a

27
00:01:05.108 --> 00:01:08.150
repo. This is great for us because it gives us flexibility

28
00:01:08.420 --> 00:01:09.290
for environments.

29
00:01:09.800 --> 00:01:13.190
The benefit of multi-stage is that those different parts

30
00:01:13.390 --> 00:01:16.177
of the Dockerfile can start from other parts of the Dockerfile.

31
00:01:16.880 --> 00:01:20.120
You can end up with multiple from statements that may

32
00:01:20.390 --> 00:01:23.479
stack on top of each other as you're building different images

33
00:01:23.679 --> 00:01:24.260
for different reasons.

34
00:01:24.871 --> 00:01:28.104
Another thing you can do in these multi-stages of a single Dockerfile

35
00:01:28.490 --> 00:01:31.549
is copy files between them to make your

36
00:01:31.749 --> 00:01:34.609
different environments and to make sure that you have the tools needed in each one

37
00:01:34.809 --> 00:01:37.639
of those. Besides the simplicity of a single file that does

38
00:01:37.839 --> 00:01:38.780
multiple things now,

39
00:01:38.990 --> 00:01:41.570
the other big benefits are security

40
00:01:41.770 --> 00:01:44.600
and size. Those are both related to the fact that you

41
00:01:44.840 --> 00:01:47.870
will no longer need certain things in

42
00:01:48.070 --> 00:01:50.330
each image output that you maybe didn't need there.

43
00:01:50.600 --> 00:01:53.360
For example, you may not want to have your build

44
00:01:53.560 --> 00:01:55.370
and test tools in your production image.

45
00:01:55.700 --> 00:01:58.729
This allows you to easily have different images for each

46
00:01:58.929 --> 00:02:01.929
one and only include the proper tooling in the place

47
00:02:02.129 --> 00:02:04.909
that it's needed. This gives you security advantages because

48
00:02:05.109 --> 00:02:07.120
it presents less attack surface.

49
00:02:07.320 --> 00:02:09.013
You can make sure that your images are smaller.

50
00:02:09.213 --> 00:02:12.259
Those small images only have the tools that are absolutely necessary

51
00:02:12.459 --> 00:02:13.790
for that purpose. Thus,

52
00:02:14.060 --> 00:02:17.149
making sure that you don't have unnecessary tools that might have more

53
00:02:17.349 --> 00:02:19.280
security risk or might have a bug in them,

54
00:02:19.490 --> 00:02:22.380
and have those not in your production images if they're not needed there.

55
00:02:22.580 --> 00:02:25.960
We call this artifact based images.

56
00:02:26.160 --> 00:02:27.529
In fact, several people in the community,

57
00:02:27.729 --> 00:02:29.270
like Kelsey Hightower from Google,

58
00:02:29.480 --> 00:02:32.420
have talked about early on in Docker's lifetime,

59
00:02:32.750 --> 00:02:36.109
that really what images should be is a presentation

60
00:02:36.309 --> 00:02:39.079
of artifacts, not necessarily a whole

61
00:02:39.279 --> 00:02:41.000
bunch of different tools all in one thing,

62
00:02:41.210 --> 00:02:42.866
but really just the output of your code that's

63
00:02:44.210 --> 00:02:47.530
the only minimal stuff needed for your production.

64
00:02:47.750 --> 00:02:50.480
And that's why we talk about Alpine as a base layer,

65
00:02:50.840 --> 00:02:52.129
just in case you can get away

66
00:02:52.329 --> 00:02:52.520
with that.

67
00:02:52.720 --> 00:02:55.549
That's a very small base image of Linux

68
00:02:55.749 --> 00:02:56.420
dependencies.

69
00:02:56.870 --> 00:02:59.300
Then as you take your node app

70
00:02:59.500 --> 00:03:00.860
and you put it in your production,

71
00:03:01.250 --> 00:03:03.380
this will allow you to have just the image

72
00:03:03.580 --> 00:03:05.040
and it's node dependencies

73
00:03:05.240 --> 00:03:06.800
and the minimum stuff in your production.

74
00:03:07.890 --> 00:03:10.859
All the same time keeping that same file for everything else,

75
00:03:11.059 --> 00:03:11.159
including dev and test.

76
00:03:13.020 --> 00:03:14.940
Let's look at a really quick example.

77
00:03:15.150 --> 00:03:18.149
A very simple one so we can at least get the basics of what this

78
00:03:18.349 --> 00:03:18.790
is trying to do.

79
00:03:19.910 --> 00:03:22.460
In this example, we've got, you'll notice line 1

80
00:03:22.660 --> 00:03:25.690
and line 7 both have a from line in them.

81
00:03:26.300 --> 00:03:29.389
You'll notice that the from line of line 1 now has

82
00:03:29.589 --> 00:03:32.390
an extra part to it. We're saying from node

83
00:03:32.720 --> 00:03:35.899
as prod. So that's basically us giving the

84
00:03:36.099 --> 00:03:38.990
node image an alias of

85
00:03:39.190 --> 00:03:42.289
prod. We can refer to that image in future

86
00:03:42.489 --> 00:03:43.922
parts of the same Dockerfile as prod.

87
00:03:44.600 --> 00:03:47.659
That just gives us an easier way in case you have a really long image

88
00:03:47.859 --> 00:03:49.250
name with an image dependency.

89
00:03:49.450 --> 00:03:52.190
This allows us to change that from...maybe we want a node

90
00:03:52.400 --> 00:03:52.626
10.something,

91
00:03:53.900 --> 00:03:54.859
but we're still going to call it prod,

92
00:03:55.280 --> 00:03:57.410
so we don't have to worry about it breaking the rest of this file.

93
00:03:57.920 --> 00:03:59.410
Then we do our standard thing right,

94
00:03:59.610 --> 00:04:01.009
lines 2, 3, 4

95
00:04:01.209 --> 00:04:03.470
and 5 and 6 are all sort of a normal,

96
00:04:03.670 --> 00:04:05.602
minimalistic production node image.

97
00:04:05.802 --> 00:04:07.296
In line 7,

98
00:04:08.000 --> 00:04:10.969
we're going to build another image based on

99
00:04:11.169 --> 00:04:13.910
the first one. That's where you see the from prod as dev.

100
00:04:14.210 --> 00:04:17.120
We're now going to start from where the last image left off,

101
00:04:17.480 --> 00:04:20.500
and we're going to start calling this new image dev,

102
00:04:20.720 --> 00:04:22.460
and then it's going to add lines 8

103
00:04:22.660 --> 00:04:23.330
and 9 to it.

104
00:04:23.630 --> 00:04:26.809
Line 8 would just change the environment variable so that it's in development

105
00:04:27.009 --> 00:04:29.360
mode, so when we start this development image,

106
00:04:29.690 --> 00:04:31.220
or dev image in this case,

107
00:04:31.460 --> 00:04:34.280
it is already set up for that environment variable.

108
00:04:34.480 --> 00:04:37.216
Then we're changing the CMD to use nodemon,

109
00:04:37.910 --> 00:04:40.400
and that would be used in a dev only environment,

110
00:04:40.600 --> 00:04:42.469
right. You wouldn't want to use nodemon in production.

111
00:04:42.669 --> 00:04:44.000
You'd want to use node directly,

112
00:04:44.200 --> 00:04:45.230
like we have in line 6.

113
00:04:45.620 --> 00:04:47.689
Normally, this would have to be two,

114
00:04:47.889 --> 00:04:49.670
separate Dockerfiles. But in this case,

115
00:04:50.000 --> 00:04:51.920
we're able to use this single file.

116
00:04:52.120 --> 00:04:55.040
We could have as many of these layers

117
00:04:55.370 --> 00:04:55.841
of from's

118
00:04:56.720 --> 00:04:59.120
and different changes in each one of them that we wanted,

119
00:04:59.320 --> 00:05:01.050
and they could all depend on each other.

120
00:05:01.250 --> 00:05:02.360
They could all pull from different,

121
00:05:02.560 --> 00:05:04.160
other unrelated images even,

122
00:05:04.400 --> 00:05:06.110
and those could all be in the same file.

123
00:05:06.470 --> 00:05:09.679
In order to build this image, you could just use the standard Docker build

124
00:05:09.879 --> 00:05:11.040
command and tag it myapp,

125
00:05:11.540 --> 00:05:12.860
or whatever you want to call it.

126
00:05:13.130 --> 00:05:16.279
Then we put the dot at the end to reference that this is the same directory

127
00:05:16.479 --> 00:05:18.052
we want to build it in, out of the build context.

128
00:05:18.920 --> 00:05:21.770
That's fine, right. That would build the entire thing,

129
00:05:21.970 --> 00:05:24.830
and the image would result in being the dev image

130
00:05:25.030 --> 00:05:26.720
because that's the final part of the file.

131
00:05:26.920 --> 00:05:28.040
So, it's still, in this case,

132
00:05:28.310 --> 00:05:30.770
working from the top down all the way to the bottom.

133
00:05:30.980 --> 00:05:33.020
We wouldn't gain the benefit, in this example,

134
00:05:33.220 --> 00:05:35.090
of the two images, for two, different purposes.

135
00:05:35.420 --> 00:05:37.880
The second example shows Docker build

136
00:05:38.240 --> 00:05:41.239
with us making a specific image name just for

137
00:05:41.439 --> 00:05:43.670
prod. Of course you can tag it whatever you want.

138
00:05:43.910 --> 00:05:44.968
In this case, I'm just calling it myapp

139
00:05:45.381 --> 00:05:48.233
:prod. Then I'm specifying a target.

140
00:05:48.433 --> 00:05:50.490
That Is a new option in Docker build.

141
00:05:50.930 --> 00:05:54.170
That option allows us to target a specific stage

142
00:05:54.470 --> 00:05:56.910
and use the stage name from that file.

143
00:05:57.110 --> 00:06:00.019
So yet another benefit of renaming that first line,

144
00:06:00.219 --> 00:06:00.980
that first from line,

145
00:06:01.340 --> 00:06:02.810
to prod.

146
00:06:03.170 --> 00:06:06.529
In this case, I'm going to build a second image that's just

147
00:06:06.729 --> 00:06:09.247
the first stage of the Dockerfile.

148
00:06:09.650 --> 00:06:12.739
So, the resulting situation would be on my local

149
00:06:12.939 --> 00:06:15.739
machine. I would have a myapp image that is

150
00:06:15.939 --> 00:06:17.273
the dev image, and a myapp

151
00:06:17.900 --> 00:06:20.566
with a tag of prod at the end. myapp:prod

152
00:06:21.890 --> 00:06:23.450
would only be the prod parts.

153
00:06:23.650 --> 00:06:25.610
We can get much more complicated from here,

154
00:06:25.810 --> 00:06:29.000
but this is the first mini example that you might try out.

155
00:06:29.200 --> 00:06:31.130
We'll be looking at some of these in an upcoming assignment.

