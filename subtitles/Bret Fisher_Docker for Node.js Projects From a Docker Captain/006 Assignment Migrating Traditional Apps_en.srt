1
00:00:02,200 --> 00:00:03,810
Now we get another assignment.

2
00:00:04,000 --> 00:00:06,891
This section might have seemed, to some of you, deceptively

3
00:00:07,540 --> 00:00:09,550
easy. That the lectures were short.

4
00:00:09,790 --> 00:00:12,940
There was mostly just words and me talking about concepts.

5
00:00:13,120 --> 00:00:14,710
But, this is where the rubber hits the road.

6
00:00:14,740 --> 00:00:17,386
And you may have to refer back to things, might need a

7
00:00:17,680 --> 00:00:19,969
little bit of Internet research on some things, especially

8
00:00:19,970 --> 00:00:21,430
on the Node part of this assignment.

9
00:00:21,640 --> 00:00:23,170
But this is real-world stuff.

10
00:00:23,470 --> 00:00:26,401
These are activities that I do with my clients

11
00:00:27,010 --> 00:00:29,460
every time I work with them on migrating their old

12
00:00:29,560 --> 00:00:31,304
applications into Docker.

13
00:00:31,690 --> 00:00:34,483
We've adopted the phrase, and actually Docker sort of was

14
00:00:34,630 --> 00:00:37,179
the first ones to coine this phrase, MTA or migrating

15
00:00:37,180 --> 00:00:40,030
traditional apps, rather than Legacy.

16
00:00:40,090 --> 00:00:43,180
Legacy might seem like it's an old, bad app,

17
00:00:43,480 --> 00:00:46,580
but we have lots of apps around that were created, or

18
00:00:46,810 --> 00:00:49,300
started, in the projects before those

19
00:00:49,780 --> 00:00:51,017
projects were used in Docker.

20
00:00:51,370 --> 00:00:54,280
We might have been using that absence

21
00:00:54,610 --> 00:00:57,099
way before Docker was even invented, or maybe that was an

22
00:00:57,100 --> 00:00:59,349
application that was simply created recently in your

23
00:00:59,350 --> 00:01:02,045
project, or in your company, or in your organization or

24
00:01:02,350 --> 00:01:04,114
wherever you are. That was something

25
00:01:05,530 --> 00:01:08,139
that was not yet in containers and now you want to put it

26
00:01:08,140 --> 00:01:09,700
there. So, perfectly normal.

27
00:01:09,790 --> 00:01:12,093
Happens all the time. In fact, I would say most

28
00:01:12,130 --> 00:01:14,820
applications in containers are MTA's,

29
00:01:15,400 --> 00:01:17,997
and that's going forward going to be more and more of

30
00:01:18,460 --> 00:01:21,440
them as we take our old systems and move them into

31
00:01:21,880 --> 00:01:24,526
containers, right. Not everything put into a container

32
00:01:24,970 --> 00:01:27,812
is a greenfield application where it starts in containers,

33
00:01:28,300 --> 00:01:29,649
by default, on the first commit.

34
00:01:29,650 --> 00:01:31,060
That's pretty rare.

35
00:01:31,240 --> 00:01:33,530
So, in this application, you're going to take a very simple

36
00:01:33,531 --> 00:01:36,460
CLI app, a command line app that I've created,

37
00:01:36,850 --> 00:01:39,429
that simply takes images and turns them into different

38
00:01:39,430 --> 00:01:41,840
images, or slightly different, altered images.

39
00:01:42,100 --> 00:01:44,992
This uses something called GraphicsMagick or ImageMagick,

40
00:01:45,460 --> 00:01:47,859
if you've ever heard of that. It's a standard command line

41
00:01:47,860 --> 00:01:50,310
tool for Unix and Windows systems that manipulates

42
00:01:50,890 --> 00:01:53,536
images. We're going to have sort of a command line app

43
00:01:53,890 --> 00:01:56,800
that imagine this was running on servers somewhere that was

44
00:01:57,130 --> 00:01:59,874
operating on images that were uploaded, and it needed to

45
00:02:00,130 --> 00:02:02,259
spit out something in a different directory, and it's been

46
00:02:02,260 --> 00:02:05,049
running for years, and it's running on Node versions that

47
00:02:05,050 --> 00:02:07,790
are old and stuff like that. So, this is real-world stuff.

48
00:02:07,810 --> 00:02:10,089
It just happens to be a very simple app that takes a lot of

49
00:02:10,090 --> 00:02:12,785
these concepts and adopts them into one little, problem

50
00:02:13,300 --> 00:02:15,468
set. You're going to look in the assignment-mta

51
00:02:16,330 --> 00:02:19,450
directory of this course repo for

52
00:02:19,480 --> 00:02:20,480
this assignment.

53
00:02:20,830 --> 00:02:23,109
You have three, main activities which I'm going to dive to

54
00:02:23,110 --> 00:02:24,880
here in this lecture.

55
00:02:24,940 --> 00:02:26,679
The first one is you're going to need to create a

56
00:02:26,680 --> 00:02:29,229
dockerignore file to make sure that certain things don't

57
00:02:29,230 --> 00:02:31,330
get into the image that don't need to be there.

58
00:02:31,660 --> 00:02:33,429
Secondly, you're going to need to create the Dockerfile and

59
00:02:33,430 --> 00:02:35,019
of course, you can create that first and then the

60
00:02:35,020 --> 00:02:36,020
dockerignore later.

61
00:02:36,340 --> 00:02:37,750
It doesn't really matter the order here.

62
00:02:38,080 --> 00:02:39,819
Then third, you're going to have to change something in the

63
00:02:39,820 --> 00:02:42,417
app because in this app, it's logging to a file using

64
00:02:42,790 --> 00:02:44,940
the Node Winston package.

65
00:02:45,310 --> 00:02:47,858
That's a very common way to log, and we talked about

66
00:02:48,370 --> 00:02:49,510
it in an earlier lecture.

67
00:02:49,867 --> 00:02:52,870
You're going to need to change the transport of that

68
00:02:52,900 --> 00:02:55,497
from logging to a file to logging to the screen, or a

69
00:02:55,630 --> 00:02:58,220
console, so that Docker can capture those logs.

70
00:02:58,810 --> 00:03:01,720
Imagine you are the devops engineer for

71
00:03:01,900 --> 00:03:04,209
this organization that's running this app and you're

72
00:03:04,210 --> 00:03:05,290
sitting in a project meeting.

73
00:03:05,530 --> 00:03:07,839
You probably didn't create this app, but it's now your job

74
00:03:07,840 --> 00:03:10,060
to Dockerize and get it working on the servers.

75
00:03:10,390 --> 00:03:12,200
Maybe you don't know anything about Node.

76
00:03:12,460 --> 00:03:14,460
Hopefully you do because you're taking this course.

77
00:03:14,650 --> 00:03:16,170
But there's not a whole lot you need to know.

78
00:03:16,180 --> 00:03:17,829
You're just going to need to do some basic research on

79
00:03:17,830 --> 00:03:19,202
stuff. The first is that the

80
00:03:20,800 --> 00:03:23,201
application has a readme that shows you the basic

81
00:03:23,350 --> 00:03:26,200
requirements. This is maybe what would be

82
00:03:26,410 --> 00:03:28,570
the operations documentation.

83
00:03:28,600 --> 00:03:31,099
It's obviously only a few lines in the file, but in

84
00:03:31,560 --> 00:03:34,330
the real world, a lot of times developers hand operators

85
00:03:34,570 --> 00:03:36,824
definitions like we need Node 8 installed, and

86
00:03:37,780 --> 00:03:40,573
we need these directories, and this needs to be installed

87
00:03:40,720 --> 00:03:42,880
on the server first before Node, and stuff like that.

88
00:03:43,360 --> 00:03:45,490
That's in that file, and you're going to need to read that.

89
00:03:45,520 --> 00:03:47,240
That's going to help you build the Dockerfile.

90
00:03:47,920 --> 00:03:50,970
When you build this image, you'll notice inside this repo,

91
00:03:51,150 --> 00:03:54,550
there are an in, an out and node_module directories.

92
00:03:54,910 --> 00:03:56,429
The in is going to be where the

93
00:03:57,970 --> 00:04:00,220
images come into this app, right.

94
00:04:00,250 --> 00:04:03,370
This app is ingesting images and then spitting them out

95
00:04:03,400 --> 00:04:04,720
into the out directory as

96
00:04:04,960 --> 00:04:05,960
you'll find out in the readme.

97
00:04:07,210 --> 00:04:10,510
Those two directories are not necessary in the container

98
00:04:10,540 --> 00:04:13,210
because the idea is that we're going to run this app

99
00:04:13,660 --> 00:04:16,647
in a container and then bind mount wherever we need it to

100
00:04:17,050 --> 00:04:18,670
ingest files coming in and out of it.

101
00:04:18,700 --> 00:04:21,444
So, think of it as a command line utility that will take

102
00:04:21,640 --> 00:04:24,370
files on a host and then spit them back out to the host

103
00:04:24,430 --> 00:04:26,140
from a directory to a directory.

104
00:04:26,530 --> 00:04:28,599
We don't want those in the image, right, because this is

105
00:04:28,600 --> 00:04:31,197
more of a utility that's going to process things on a

106
00:04:31,450 --> 00:04:34,840
machine. Doesn't need to store those images in the image

107
00:04:35,290 --> 00:04:36,639
itself, the Docker image that is.

108
00:04:36,640 --> 00:04:38,859
So, you're going to want to make sure that in your

109
00:04:38,860 --> 00:04:41,469
dockerignore, that you're definitely never including the

110
00:04:41,470 --> 00:04:42,470
Node modules.

111
00:04:42,730 --> 00:04:45,490
But you're also ignoring the in, the out

112
00:04:45,820 --> 00:04:48,274
and the logs directory. Now, the logs directory,

113
00:04:48,490 --> 00:04:51,430
traditionally with this application, was used in the code

114
00:04:51,730 --> 00:04:54,880
with Winston to log the error and the info

115
00:04:54,910 --> 00:04:57,069
output. But, we don't really want to do that anymore.

116
00:04:57,070 --> 00:05:00,400
So, you're going to need to open up the index.js file and

117
00:05:00,490 --> 00:05:01,490
change three lines.

118
00:05:01,870 --> 00:05:04,735
Basically commenting out the old Winston transports,

119
00:05:05,140 --> 00:05:07,884
and then adding a new Winston transport that simply goes

120
00:05:08,170 --> 00:05:11,320
to the console. If you have no experience with Winston,

121
00:05:11,590 --> 00:05:14,481
no worries, because really there's several options you have

122
00:05:14,590 --> 00:05:16,676
here. One is you could just change that line

123
00:05:17,020 --> 00:05:19,540
if your project allowed you to edit the code, right.

124
00:05:19,570 --> 00:05:21,330
You could go look up on Winston.

125
00:05:21,340 --> 00:05:23,409
In fact, if you go to GitHub and look up the Winston

126
00:05:23,410 --> 00:05:25,615
package, in that readme, it tells you exactly

127
00:05:26,680 --> 00:05:29,890
how to create a transport in order to log to the console.

128
00:05:30,160 --> 00:05:32,979
I've even given you a hint here that you could just search

129
00:05:32,980 --> 00:05:35,822
for Winston transports console and that would tell you the

130
00:05:35,860 --> 00:05:37,539
line you kind of need to put in this file, and then you

131
00:05:37,540 --> 00:05:39,430
could comment out the other lines.

132
00:05:39,790 --> 00:05:41,897
Secondly, you could, if you weren't allowed

133
00:05:43,120 --> 00:05:45,080
to change any code in this app, which is

134
00:05:46,180 --> 00:05:48,496
true in some cases. We're just simply not allowed to change

135
00:05:48,497 --> 00:05:50,560
it. We must get it working in a container.

136
00:05:50,950 --> 00:05:53,980
You could do a symlink, or an ln command,

137
00:05:54,400 --> 00:05:57,780
in the Dockerfile where the logs are going to go.

138
00:05:58,000 --> 00:06:00,290
That's how the official Nginx app does it.

139
00:06:00,310 --> 00:06:03,340
So, if you're curious how to link, or symlink,

140
00:06:03,790 --> 00:06:06,820
those log files, you could go check in the Docker Hub

141
00:06:07,120 --> 00:06:09,864
for the official Nginx and go look in the Dockerfile for

142
00:06:10,030 --> 00:06:11,890
that one, because they do the same thing.

143
00:06:11,920 --> 00:06:14,554
They symlink those log files into

144
00:06:15,160 --> 00:06:17,463
stdout and stderr because they can't change the

145
00:06:18,190 --> 00:06:20,559
app's behavior. In this case, because we have the source

146
00:06:20,560 --> 00:06:23,260
code for this Node app, we could change that and that's

147
00:06:23,560 --> 00:06:26,451
what I'm asking you to do in this because that's hopefully,

148
00:06:26,500 --> 00:06:28,869
if you're a Node developer, you have access to change the

149
00:06:28,870 --> 00:06:30,740
Node app. So, that's a better way to do it.

150
00:06:30,790 --> 00:06:33,309
The backup plan there, and if you want to play around, you

151
00:06:33,310 --> 00:06:36,310
could test simply taking that same

152
00:06:36,340 --> 00:06:38,640
code and only changing in the Dockerfile through symlinks

153
00:06:39,160 --> 00:06:40,630
instead of changing in the code itself.

154
00:06:40,810 --> 00:06:44,140
You're going to want to run this app as a docker run,

155
00:06:44,380 --> 00:06:46,830
and you will want to bind mount the in and the out

156
00:06:46,960 --> 00:06:49,890
directories back out to your host so that it pulls

157
00:06:50,470 --> 00:06:53,316
in those images from the repo that I gave you

158
00:06:53,830 --> 00:06:56,800
and then spits them back out into the out directory

159
00:06:57,070 --> 00:06:59,140
so that there's the results.

160
00:06:59,410 --> 00:07:01,749
Really what this is doing is this utility is using

161
00:07:01,750 --> 00:07:03,416
GraphicsMagick to change a regular

162
00:07:04,870 --> 00:07:08,290
GIF into, or any image really, into

163
00:07:08,530 --> 00:07:09,985
a charcoal-based one.

164
00:07:10,150 --> 00:07:12,669
Charcoal is one of the filters that will make it look like

165
00:07:12,670 --> 00:07:14,003
its hand drawn with charcoal, essentially.

166
00:07:16,060 --> 00:07:18,459
In this app, there is an environment variable that it

167
00:07:18,460 --> 00:07:21,700
depends on called the charcoal factor that changes

168
00:07:21,910 --> 00:07:24,159
the way the image is drawn, and makes it look a little bit

169
00:07:24,160 --> 00:07:26,840
different. It has thicker lines with the bigger the number.

170
00:07:27,110 --> 00:07:30,100
Okay. You could go look up how the app works, but you know,

171
00:07:30,310 --> 00:07:31,780
that's not really the point of this lecture.

172
00:07:31,990 --> 00:07:34,689
Really, this is about you making sure that that environment

173
00:07:34,690 --> 00:07:37,890
variable is set in the Dockerfile and it has a default.

174
00:07:38,230 --> 00:07:40,631
Then also testing it when you run your docker run

175
00:07:41,380 --> 00:07:43,449
command to see if you can override that environment

176
00:07:43,450 --> 00:07:46,119
variable. Change it to a different number and see if you

177
00:07:46,120 --> 00:07:47,830
get a different output in the image.

178
00:07:48,400 --> 00:07:51,039
The outcomes of all this, now that you have that basic

179
00:07:51,040 --> 00:07:53,490
information on the requirements, if you've run the

180
00:07:53,710 --> 00:07:55,866
container successfully and bind mounted both

181
00:07:57,070 --> 00:07:59,920
the in and the out directories, and

182
00:08:00,190 --> 00:08:03,032
on your host, whatever file you stick in there, what other

183
00:08:03,160 --> 00:08:05,620
image and I give you a few, some GIFs, by default.

184
00:08:05,830 --> 00:08:07,659
You can throw any image you want in there and then run

185
00:08:07,660 --> 00:08:10,269
this, and it will take that image and then spit out that

186
00:08:10,270 --> 00:08:13,420
exact same named image into the out directory on your host

187
00:08:13,810 --> 00:08:16,180
that looks like it was drawn with charcoal.

188
00:08:16,750 --> 00:08:19,053
If you do it correctly, that will be the result

189
00:08:19,990 --> 00:08:21,130
and you'll know that that works.

190
00:08:21,370 --> 00:08:23,950
The next outcome is that if you do a docker run with the

191
00:08:24,820 --> 00:08:27,700
--env to change the factor to something like 10,

192
00:08:27,940 --> 00:08:30,910
that the image does look different when you open it

193
00:08:30,940 --> 00:08:33,640
again. The next outcome is that we definitely don't want

194
00:08:33,730 --> 00:08:36,549
any of these images either in

195
00:08:36,880 --> 00:08:39,428
the in or out directories stored in the Docker image

196
00:08:39,549 --> 00:08:41,400
itself. You definitely make sure that your dockerignore is

197
00:08:42,039 --> 00:08:45,010
correct so that that works, and that there's no bloat

198
00:08:45,040 --> 00:08:46,870
or unnecessary files in the image.

199
00:08:47,380 --> 00:08:49,977
The last outcome here is that when I do a docker logs

200
00:08:50,410 --> 00:08:52,419
command on this container, that I get the

201
00:08:53,410 --> 00:08:55,909
Winston results, which will tell me which images it

202
00:08:56,353 --> 00:08:59,210
has processed and if it processed them correctly.

203
00:08:59,740 --> 00:09:02,710
By default, if you didn't do anything with the logging,

204
00:09:02,880 --> 00:09:05,379
your Docker logs would be empty because essentially the

205
00:09:05,380 --> 00:09:08,310
apps Winston module is writing those files that Docker

206
00:09:08,560 --> 00:09:11,890
can't see. Now, you have those four outcomes

207
00:09:12,100 --> 00:09:14,873
that are the results you need to have to consider this semi

208
00:09:14,966 --> 00:09:18,250
finished. In the next lecture, I want to do this myself.

209
00:09:18,490 --> 00:09:20,889
Of course, you can follow along there too, but give this a

210
00:09:20,890 --> 00:09:22,360
shot. Spend some time on it.

211
00:09:22,540 --> 00:09:24,819
You may have to go look up the Winston documentation to

212
00:09:24,820 --> 00:09:26,040
check for that one line you need to add.

213
00:09:27,100 --> 00:09:29,680
You can simply do symlinks if you wanted to do it that way.

214
00:09:30,490 --> 00:09:33,099
Then everything else should have been self-explanatory from

215
00:09:33,100 --> 00:09:35,354
previous lectures on the Dockerfile itself and

216
00:09:36,100 --> 00:09:37,100
the dockerignore file.

217
00:09:37,690 --> 00:09:38,722
Good luck and have fun.

