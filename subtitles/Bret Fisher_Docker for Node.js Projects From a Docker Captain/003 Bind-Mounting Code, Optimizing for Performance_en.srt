1
00:00:02,780 --> 00:00:05,426
Now that we've gotten some of the little details about

2
00:00:05,600 --> 00:00:07,939
Compose out of the way, let's focus on getting your code in

3
00:00:07,939 --> 00:00:11,030
the container. Because this is deceptively simple, but

4
00:00:11,090 --> 00:00:14,300
there are definitely a group of things that I see people

5
00:00:14,660 --> 00:00:17,208
having problems with, or designing incorrectly, when

6
00:00:17,330 --> 00:00:20,660
they're focusing on local development and bind mounting

7
00:00:20,730 --> 00:00:23,560
their source code into a running container, right.

8
00:00:23,600 --> 00:00:24,990
This is the ideal setup.

9
00:00:25,160 --> 00:00:27,949
The whole reason we're trying to do this locally is so that

10
00:00:27,950 --> 00:00:30,351
we can have all of our Node.js apps and its other

11
00:00:31,100 --> 00:00:33,480
apps, like your databases and all the other stuff that's

12
00:00:33,530 --> 00:00:35,450
going to be running, in your distributed app.

13
00:00:35,930 --> 00:00:38,390
All these things are ideally going to be running on Linux

14
00:00:38,420 --> 00:00:40,570
in production. That's the most likely case for Node.js.

15
00:00:41,750 --> 00:00:44,480
You want to develop on that same system

16
00:00:44,720 --> 00:00:47,510
and have all the conveniences of your different parts all

17
00:00:47,540 --> 00:00:48,950
talking together of the same network.

18
00:00:49,400 --> 00:00:52,190
Here, bind mounting of the code

19
00:00:52,430 --> 00:00:54,920
is a little bit different on each operating system.

20
00:00:55,520 --> 00:00:58,039
The first couple of gotchas that I want to make sure that

21
00:00:58,040 --> 00:01:00,441
you're clear on is that in your Compose files, it

22
00:01:01,130 --> 00:01:03,980
works best where everything is referenced as the parent

23
00:01:04,010 --> 00:01:05,010
working directory or the pwd.

24
00:01:05,870 --> 00:01:07,977
In this example here of my bad YAML in that

25
00:01:08,870 --> 00:01:11,990
same directory that we had in the last lecture, the

26
00:01:12,050 --> 00:01:13,275
my full path to the files

27
00:01:15,200 --> 00:01:16,200
on the host.

28
00:01:16,640 --> 00:01:19,188
That may work for you, but that's not how Compose is

29
00:01:19,430 --> 00:01:22,120
supposed to work. Really, the left side of this bind mount

30
00:01:22,130 --> 00:01:23,453
path should always just be a dot.

31
00:01:24,110 --> 00:01:27,440
If it needs to be maybe up a directory, and move around,

32
00:01:27,470 --> 00:01:29,675
it's always a relative path to the one you're

33
00:01:30,500 --> 00:01:33,169
currently in. If you're in a big project, you're going to

34
00:01:33,170 --> 00:01:36,450
have lots of different clones of repos,

35
00:01:36,470 --> 00:01:39,680
probably in one master directory with a bunch of different

36
00:01:40,010 --> 00:01:42,860
micro services maybe, in different subdirectories.

37
00:01:43,190 --> 00:01:46,280
You could have one, large Compose file that

38
00:01:46,310 --> 00:01:49,370
then bind mounts and runs a lot of different services.

39
00:01:49,610 --> 00:01:50,610
That's totally fine.

40
00:01:50,870 --> 00:01:52,670
In this line, you would then have a

41
00:01:53,840 --> 00:01:56,760
../ that means back up a directory and then maybe bind

42
00:01:57,260 --> 00:02:00,410
mount some path in a different directory.

43
00:02:00,450 --> 00:02:02,660
Ideally, that's how your products are set up, right.

44
00:02:02,840 --> 00:02:05,570
Usually, we don't get to run just one Git

45
00:02:05,840 --> 00:02:08,535
repo. We usually have to download a bunch if we're in a

46
00:02:08,538 --> 00:02:10,999
very large app, or just any old app, really.

47
00:02:11,390 --> 00:02:13,070
You're going to be able to do that here.

48
00:02:13,160 --> 00:02:16,400
No reason to do hard paths or fully qualified

49
00:02:16,430 --> 00:02:18,769
paths. You don't want to do those because when you pass

50
00:02:18,770 --> 00:02:20,809
these around your team, not everyone is going to have the

51
00:02:20,810 --> 00:02:22,680
same path. So, it's definitely not going to work well.

52
00:02:23,710 --> 00:02:26,310
And that's true on Windows, Linux and Mac.

53
00:02:26,580 --> 00:02:28,979
Sometimes people on the Windows side get a little confused

54
00:02:28,980 --> 00:02:31,871
because they see examples using the C drive and that's just

55
00:02:31,980 --> 00:02:34,920
not needed when you're in a Compose file.

56
00:02:35,250 --> 00:02:37,749
Docker run, sometimes you might need that depending

57
00:02:38,340 --> 00:02:41,280
on if you can use the pwd variable.

58
00:02:41,310 --> 00:02:42,787
But, here in the Compose, it's different.

59
00:02:42,788 --> 00:02:44,330
In the Compose, we can always use the dot.

60
00:02:45,210 --> 00:02:47,447
The one thing you don't want to do here is bind mount your

61
00:02:47,730 --> 00:02:49,589
databases. I see this happen all the time.

62
00:02:49,590 --> 00:02:50,850
It's a very common question.

63
00:02:51,300 --> 00:02:54,000
If I scroll down in my bad YAML file here,

64
00:02:54,300 --> 00:02:57,250
you definitely don't want to do this, where I'm bind

65
00:02:57,338 --> 00:02:59,970
mounting my databases into some subdirectory.

66
00:03:00,000 --> 00:03:02,744
That may seem like a good idea at first, but chances are

67
00:03:03,210 --> 00:03:05,730
you're probably developing on Mac or Windows.

68
00:03:06,510 --> 00:03:08,666
They don't work well across the OS boundary.

69
00:03:09,203 --> 00:03:11,880
If you happen to be one of the lucky few

70
00:03:12,210 --> 00:03:15,052
that are developing natively on Linux, and so your machine

71
00:03:15,150 --> 00:03:17,550
that you're on every day with your GUI and everything is

72
00:03:17,790 --> 00:03:19,260
pure Linux, then great.

73
00:03:19,290 --> 00:03:21,719
You can bind mount all day because that's really the same

74
00:03:21,720 --> 00:03:23,778
file system. It's just symlinking a little

75
00:03:24,720 --> 00:03:26,910
path between one part of the file system and another.

76
00:03:27,360 --> 00:03:30,153
If you're on Mac or Windows, these containers are running

77
00:03:30,390 --> 00:03:33,010
in a different OS. They're running in a mini Linux VM.

78
00:03:33,750 --> 00:03:35,857
These bind mounts are having to go over the

79
00:03:36,810 --> 00:03:39,358
file IO path and even on the Windows side, it can be

80
00:03:39,840 --> 00:03:42,240
even a little more tricky because it's actually using Samba

81
00:03:42,280 --> 00:03:44,730
or SMB file shares, and that can really be slow if

82
00:03:45,300 --> 00:03:46,710
you're in very large projects.

83
00:03:46,950 --> 00:03:49,057
All right. The next tip here is that if you

84
00:03:49,980 --> 00:03:52,038
are just using this Docker image for local

85
00:03:53,160 --> 00:03:55,806
development, and you're doing a docker compose up with

86
00:03:56,250 --> 00:03:58,955
a --build, or maybe you're doing a docker compose build,

87
00:03:59,490 --> 00:04:00,780
you don't necessarily need to do that.

88
00:04:00,990 --> 00:04:02,130
Not every time at least.

89
00:04:02,310 --> 00:04:04,360
If you don't change your package file, then

90
00:04:05,820 --> 00:04:07,208
just keep doing docker compose up.

91
00:04:07,650 --> 00:04:09,757
You don't need to rebuild your images every

92
00:04:10,740 --> 00:04:12,899
time you change code, right. That's not what we're here

93
00:04:12,900 --> 00:04:15,120
for. We're not here to rebuild our images.

94
00:04:15,180 --> 00:04:17,502
We're here to just develop and restart Node,

95
00:04:18,240 --> 00:04:20,909
not restart the image build process.

96
00:04:20,910 --> 00:04:23,760
If you think about it, you're mounting your host

97
00:04:23,970 --> 00:04:25,881
files over top of the ones in the image

98
00:04:26,970 --> 00:04:29,665
anyway. So, you technically could have an image with no

99
00:04:29,670 --> 00:04:30,750
source code in it.

100
00:04:31,080 --> 00:04:33,954
It just has your package dependencies from your Node

101
00:04:34,170 --> 00:04:36,810
modules, and then your code you're bind mounting in.

102
00:04:36,930 --> 00:04:39,610
In a lecture, in a little bit, of this same section, we'll

103
00:04:39,720 --> 00:04:42,930
talk about how you get over the problem of your

104
00:04:42,960 --> 00:04:45,018
Node modules on your host not getting into

105
00:04:45,960 --> 00:04:47,909
your container, not interfering with the ones in your

106
00:04:47,910 --> 00:04:49,790
container. That's a different setup.

107
00:04:49,830 --> 00:04:51,540
We just need to change a few bits for that.

108
00:04:51,750 --> 00:04:54,149
But for now, I want to reiterate that you can actually get

109
00:04:54,150 --> 00:04:56,759
away with just doing a docker compose up, not rebuilding

110
00:04:56,760 --> 00:04:58,979
the image every time until you change something with your

111
00:04:58,980 --> 00:05:02,160
dependencies, or something about the Dockerfile itself.

112
00:05:02,490 --> 00:05:05,550
Next up, a big deal here, is if you're on Windows

113
00:05:05,580 --> 00:05:08,039
and you're developing on Windows for Node.js, or really

114
00:05:08,040 --> 00:05:10,889
anything with Docker and Windows, you want to make sure you

115
00:05:10,890 --> 00:05:14,040
go in the settings and you enable the permissions

116
00:05:14,400 --> 00:05:17,070
for sharing the drive letter where your code is at.

117
00:05:17,910 --> 00:05:19,499
Your code may not always be on C.

118
00:05:19,500 --> 00:05:20,820
C is there by default.

119
00:05:20,880 --> 00:05:22,388
If you're on a different partition.

120
00:05:22,740 --> 00:05:25,043
Maybe you store your code on an external SSD or

121
00:05:25,740 --> 00:05:28,290
something, then you need to go in there and check that box.

122
00:05:28,770 --> 00:05:31,171
Also, if you have problems with files not sharing

123
00:05:31,770 --> 00:05:34,612
properly into your container, then the common fix there is

124
00:05:34,830 --> 00:05:37,980
to go back in your settings and uncheck that box,

125
00:05:38,010 --> 00:05:40,901
and then recheck it. That will reinitialize the permissions

126
00:05:41,610 --> 00:05:44,305
sharing thing that's going on in Windows that sometimes

127
00:05:44,460 --> 00:05:46,714
gets broken, especially on Enterprise machines

128
00:05:47,430 --> 00:05:50,272
where you're inside of an active directory and you have to

129
00:05:50,370 --> 00:05:53,190
deal with Enterprise policies that might be affecting you.

130
00:05:53,850 --> 00:05:55,761
Here on my Windows machine, I have my C

131
00:05:56,920 --> 00:05:59,970
drive selected, but if I needed to put source code

132
00:06:00,000 --> 00:06:02,699
on my E drive and share that into a container with a bind

133
00:06:02,700 --> 00:06:05,730
mount, I would then need to check that box and apply it.

134
00:06:06,210 --> 00:06:08,513
Again, if you wanted to sort of fix any sort of

135
00:06:09,150 --> 00:06:11,796
inconsistencies, you could unchecked that, apply, then

136
00:06:12,030 --> 00:06:14,730
recheck it and apply. That sort of refreshes things.

137
00:06:14,840 --> 00:06:16,589
That's been a quirk for a few years now.

138
00:06:16,590 --> 00:06:18,689
So, I'm pretty sure that's still an issue for certain

139
00:06:18,690 --> 00:06:21,336
machines. You also might have a prompt for permissions

140
00:06:21,690 --> 00:06:24,532
here that it asks you for a login and if your login is not

141
00:06:24,720 --> 00:06:26,580
working, you need to get an admin log in.

142
00:06:26,850 --> 00:06:29,099
You might even, in some cases depending on the security

143
00:06:29,100 --> 00:06:32,300
settings of your machine, you need to get a local admin,

144
00:06:32,310 --> 00:06:35,150
not a domain admin, if your box is on an active

145
00:06:35,370 --> 00:06:38,065
directory domain, you might need to get a local account

146
00:06:38,280 --> 00:06:40,769
created. There's a couple of different scenarios where

147
00:06:40,770 --> 00:06:42,839
these things don't work right depending on corporate

148
00:06:42,840 --> 00:06:45,300
policies. So, you might have to go down that road.

149
00:06:45,990 --> 00:06:48,749
As a side note, you might be seeing a warning, at times, on

150
00:06:48,750 --> 00:06:51,479
Windows, if you're developing on Windows and you're doing

151
00:06:51,480 --> 00:06:52,480
builds on Windows.

152
00:06:52,800 --> 00:06:54,360
A warning about file permissions.

153
00:06:54,540 --> 00:06:56,639
This is something here at the bottom where you would see

154
00:06:56,640 --> 00:06:59,460
security warning, you're building an image.

155
00:06:59,720 --> 00:07:01,799
This is really talking about the difference between file

156
00:07:01,800 --> 00:07:04,860
permissions on Windows and Linux, and how

157
00:07:05,040 --> 00:07:08,062
Windows uses NTFS and Linux doesn't.

158
00:07:09,350 --> 00:07:11,604
Over that share, the files that you would copy

159
00:07:12,390 --> 00:07:14,889
into an image from Windows may not turn up in Linux

160
00:07:15,600 --> 00:07:17,150
with the permissions you'd expect.

161
00:07:17,340 --> 00:07:19,447
That is a common struggle for building when

162
00:07:20,520 --> 00:07:22,560
you have your source code on Windows.

163
00:07:22,590 --> 00:07:25,120
Every problem has a different solution there.

164
00:07:25,380 --> 00:07:27,599
You might need to just make sure you're not building on

165
00:07:27,600 --> 00:07:29,490
Windows if you have certain permission problems.

166
00:07:29,700 --> 00:07:32,248
Or, you may need to design your Dockerfile to go and

167
00:07:32,670 --> 00:07:35,600
check those permissions after every Docker build,

168
00:07:35,870 --> 00:07:38,419
like a line down below in the Dockerfile that says, you

169
00:07:38,420 --> 00:07:40,672
know, go and chown these files, or chmod

170
00:07:41,790 --> 00:07:44,790
these files to certain settings that you need

171
00:07:44,850 --> 00:07:47,692
in your app. Those are a couple of common Windows problems

172
00:07:47,880 --> 00:07:48,880
when bind mounting.

173
00:07:49,170 --> 00:07:51,839
Let's talk about performance for a minute, because this

174
00:07:51,840 --> 00:07:54,551
comes up in larger projects, when people are getting

175
00:07:54,870 --> 00:07:57,965
large amount of files, hundreds of package

176
00:07:58,070 --> 00:07:59,090
dependencies.

177
00:07:59,490 --> 00:08:00,870
This can get really big.

178
00:08:01,170 --> 00:08:03,326
Bind mounts, because of that crossing the OS

179
00:08:04,200 --> 00:08:07,042
boundary like we talked about, that can cause some serious

180
00:08:07,410 --> 00:08:08,410
delays.

181
00:08:08,980 --> 00:08:11,675
If you're on Mac OS, and you're using Docker Desktop, I

182
00:08:11,830 --> 00:08:14,281
would like you to read a couple of resources on the Docker

183
00:08:14,670 --> 00:08:17,680
website about file IO caching.

184
00:08:18,160 --> 00:08:20,855
This is an interesting and complicated topic around how

185
00:08:21,520 --> 00:08:24,760
Docker is tweaking Mac and Linux

186
00:08:24,880 --> 00:08:27,669
in order for the files that you're bind mounting into the

187
00:08:27,670 --> 00:08:29,830
container to have improved performance.

188
00:08:29,860 --> 00:08:32,168
Because if you think about all the things that have to

189
00:08:32,169 --> 00:08:35,529
happen in order for your Mac to tell a Linux machine,

190
00:08:35,530 --> 00:08:37,679
over some special little connection, that a file has

191
00:08:37,750 --> 00:08:40,445
changed, it actually turns out that this round trip can

192
00:08:40,720 --> 00:08:42,669
cause around 100 milliseconds of delay.

193
00:08:43,179 --> 00:08:45,880
Not a big deal. That sounds like a small fraction of time.

194
00:08:46,180 --> 00:08:48,282
But when you're dealing with hundreds of thousands,

195
00:08:48,430 --> 00:08:50,929
possibly millions of reads and writes, this can get

196
00:08:51,400 --> 00:08:52,400
really, really slow.

197
00:08:52,660 --> 00:08:55,360
I want you to read the references that I have in here

198
00:08:55,420 --> 00:08:58,213
specifically for Mac OS in this lecture so that you fully

199
00:08:58,360 --> 00:09:00,660
understand the different settings you can have here.

200
00:09:00,700 --> 00:09:02,074
Because these are unique to Mac OS.

201
00:09:02,122 --> 00:09:04,719
Then I'm going to show you an example here in my good

202
00:09:05,080 --> 00:09:08,290
YAML. This good YAML shows a bind mount

203
00:09:08,350 --> 00:09:10,310
of a directory, inside my parent working

204
00:09:11,410 --> 00:09:13,969
directory, then under content, then it just mounts to some

205
00:09:13,970 --> 00:09:16,030
place inside of the container.

206
00:09:16,240 --> 00:09:18,400
But it has this delegated flag on the end.

207
00:09:18,820 --> 00:09:21,760
That delegated flag tells Docker that

208
00:09:22,060 --> 00:09:23,873
essentially, if there's writing going

209
00:09:25,180 --> 00:09:28,460
on in the container, that it's okay for the container

210
00:09:28,480 --> 00:09:31,450
file IO to get ahead of the host.

211
00:09:31,480 --> 00:09:34,790
In other words, not every file IO

212
00:09:35,020 --> 00:09:37,078
transaction has to be identical on host to

213
00:09:37,990 --> 00:09:40,509
container. And, that if there's any reading or writing

214
00:09:40,510 --> 00:09:42,315
going on in the container, that the container sort of wins

215
00:09:42,490 --> 00:09:45,760
out and the host writing can catch up later.

216
00:09:46,150 --> 00:09:49,041
This is handy when you're doing things like npm installs or

217
00:09:49,060 --> 00:09:51,559
anything where you're maybe taking typescript files

218
00:09:52,210 --> 00:09:55,510
and turning them into JavaScript, or taking a bunch of

219
00:09:55,630 --> 00:09:58,511
static files like Hugo or one of these static site

220
00:09:58,750 --> 00:10:01,209
generators, and turning a bunch of files into something

221
00:10:01,210 --> 00:10:03,312
else. Maybe you're turning your CSS

222
00:10:04,330 --> 00:10:05,516
into minification mode.

223
00:10:05,980 --> 00:10:08,800
All these different things are doing lots of writes, and

224
00:10:09,100 --> 00:10:11,599
there's a lot of potential for delay there that you

225
00:10:12,100 --> 00:10:14,452
can help solve if you add delegated to every one

226
00:10:15,070 --> 00:10:16,449
of these bind mounts on your Mac.

227
00:10:16,450 --> 00:10:17,920
And I mean just about every one of them.

228
00:10:17,980 --> 00:10:20,409
I default to putting it on there, and I have to come up

229
00:10:20,410 --> 00:10:21,610
with good reasons not to do it.

230
00:10:22,000 --> 00:10:23,889
You wouldn't normally do this if you were doing something

231
00:10:23,890 --> 00:10:25,920
like a database because you wouldn't want your read/writes

232
00:10:26,380 --> 00:10:27,450
to be out of sync.

233
00:10:27,880 --> 00:10:31,330
It can cause different inconsistencies, but in general,

234
00:10:31,690 --> 00:10:33,306
I have never experienced any of that.

235
00:10:33,307 --> 00:10:35,522
Again, like we talked about in the last lecture, I

236
00:10:36,310 --> 00:10:38,956
don't bind mount databases because that can just cause

237
00:10:39,070 --> 00:10:40,070
problems anyway.

238
00:10:40,870 --> 00:10:43,810
If you're on the Windows side, slightly different scenario.

239
00:10:43,990 --> 00:10:46,538
You don't get that advance delegated mode or setting

240
00:10:47,020 --> 00:10:50,320
the cache like you do on OS X because on Windows,

241
00:10:50,350 --> 00:10:53,320
it's really using an SMB file share between Windows

242
00:10:53,350 --> 00:10:55,604
and Linux. The disadvantage there is that it's

243
00:10:56,320 --> 00:10:59,113
not quite as performant and there's not as a deep a level

244
00:10:59,320 --> 00:11:00,430
of OS integration.

245
00:11:00,670 --> 00:11:03,550
You're also on Windows dealing with the file permissions

246
00:11:03,580 --> 00:11:06,430
and executable changes between Windows and Linux.

247
00:11:06,670 --> 00:11:09,220
So, a couple of scenarios there if you get into trouble.

248
00:11:09,460 --> 00:11:12,302
First, I should say that a whole lot of developers do just

249
00:11:12,550 --> 00:11:15,610
fine, Node.js and Windows, and bind mounting stuff

250
00:11:15,740 --> 00:11:17,380
in, and they don't need any special setup.

251
00:11:17,650 --> 00:11:20,233
But, once you start hitting edge cases where things either

252
00:11:20,234 --> 00:11:22,809
get really slow, or you start having problems that you just

253
00:11:22,810 --> 00:11:25,505
can't resolve another way, a couple of options you have

254
00:11:25,540 --> 00:11:29,020
there. One is to consider doing file synchronization

255
00:11:29,230 --> 00:11:32,320
rather than linking the containers through a file share.

256
00:11:32,560 --> 00:11:35,451
File sync tools, there's at least three of them that I know

257
00:11:35,470 --> 00:11:37,450
of that are still at least being maintained.

258
00:11:37,810 --> 00:11:41,020
Here's one called docker bg sync that runs

259
00:11:41,080 --> 00:11:44,440
a file copying utility, essentially, in the background

260
00:11:44,710 --> 00:11:46,670
that will copy files from your host into

261
00:11:47,860 --> 00:11:50,290
the container and then your container's running them

262
00:11:50,410 --> 00:11:52,958
natively in the container. There's a little bit of a

263
00:11:53,350 --> 00:11:56,094
disadvantage there because you have a potential for more

264
00:11:56,290 --> 00:11:57,725
delay of keeping files sync'd.

265
00:11:58,270 --> 00:12:00,429
In general, the people that have figured out how to set

266
00:12:00,430 --> 00:12:02,740
this up have told me that this works well for them,

267
00:12:03,100 --> 00:12:04,866
especially when they're in larger projects and they maybe

268
00:12:05,080 --> 00:12:06,340
have slow hard drives.

269
00:12:06,940 --> 00:12:09,159
SSD's are definitely a thing you want to have if you're

270
00:12:09,160 --> 00:12:11,560
doing Docker. But, if you can't have something like that,

271
00:12:11,840 --> 00:12:13,480
then this might be an alternative to you.

272
00:12:13,600 --> 00:12:16,393
It's outside the realm of the official Docker Desktop and

273
00:12:16,480 --> 00:12:19,126
the support model there, but it does work for a lot of

274
00:12:19,210 --> 00:12:21,160
people, so definitely check those tools out.

275
00:12:21,400 --> 00:12:24,280
I give you a link to a few here in the references.

276
00:12:24,550 --> 00:12:27,670
The other option you might consider is setting up the WSL

277
00:12:27,700 --> 00:12:29,470
or Windows Subsystem for Linux.

278
00:12:29,530 --> 00:12:31,360
Again, this is a little more advanced.

279
00:12:31,590 --> 00:12:33,939
It's beyond what I really wanted to teach in this course

280
00:12:33,940 --> 00:12:36,400
because it requires a lot of understanding and knowledge

281
00:12:36,760 --> 00:12:39,640
about different shells, different setups, because

282
00:12:39,760 --> 00:12:42,880
WSL is essentially a synthetic

283
00:12:42,910 --> 00:12:44,723
Linux, or a Linux interpreter, inside

284
00:12:46,030 --> 00:12:49,090
your windows machine that translates Linux

285
00:12:49,180 --> 00:12:51,070
system calls into the windows kernel.

286
00:12:51,400 --> 00:12:53,769
It's advanced stuff and it's super slick when it works

287
00:12:53,770 --> 00:12:55,930
well, but it doesn't work in all cases.

288
00:12:56,210 --> 00:12:58,464
Anyway, there's a great Readit about this from

289
00:12:59,170 --> 00:13:00,450
another Docker Captain, Nick.

290
00:13:00,820 --> 00:13:02,486
He talks about his setup of how he

291
00:13:04,090 --> 00:13:05,560
is using WSL plus an optimized

292
00:13:07,150 --> 00:13:09,850
bind mount configuration for his own development needs.

293
00:13:10,150 --> 00:13:12,580
Again, this is definitely not for the faint of heart.

294
00:13:12,610 --> 00:13:15,339
These are advanced setups that you probably shouldn't do

295
00:13:15,340 --> 00:13:16,730
until you really need them.

296
00:13:17,080 --> 00:13:19,569
And you will know you need them when things start to get

297
00:13:19,570 --> 00:13:22,000
really slow, and you just can't take it anymore.

