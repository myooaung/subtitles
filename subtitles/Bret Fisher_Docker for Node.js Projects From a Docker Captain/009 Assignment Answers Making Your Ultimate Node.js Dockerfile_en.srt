1
00:00:02,330 --> 00:00:05,360
Welcome to the assignment answer for the

2
00:00:05,450 --> 00:00:06,490
Ultimate Node Dockerfile.

3
00:00:07,610 --> 00:00:10,339
Hopefully, you've spent a significant amount of time, more

4
00:00:10,340 --> 00:00:12,950
than a few minutes, going through the assignment.

5
00:00:13,070 --> 00:00:16,180
There's a lot to it, so I don't expect your

6
00:00:16,520 --> 00:00:17,840
Dockerfile to look like mine.

7
00:00:18,050 --> 00:00:20,647
They might even get to the same, exact result and not

8
00:00:21,380 --> 00:00:22,640
be the same thing.

9
00:00:22,820 --> 00:00:25,459
That's the thing that happens when we all start getting

10
00:00:25,460 --> 00:00:28,204
more complicated in our designs as they get a little bit

11
00:00:28,370 --> 00:00:30,889
more opinionated. Maybe you like something that I don't

12
00:00:30,890 --> 00:00:33,650
prefer. So, there's not necessarily a black and white.

13
00:00:33,680 --> 00:00:36,680
That's why I wanted the outcomes at the bottom of the

14
00:00:36,920 --> 00:00:38,750
readme file, that you've hopefully gone through that.

15
00:00:38,990 --> 00:00:41,930
That is important because those outcomes

16
00:00:42,260 --> 00:00:45,053
don't necessarily reflect, line by line, what needs to be

17
00:00:45,260 --> 00:00:47,906
in this Dockerfile, right. That's really just, does it

18
00:00:48,230 --> 00:00:49,520
work the way you'd expect?

19
00:00:49,940 --> 00:00:52,684
So, I'm going to go through it, and do it like you would

20
00:00:52,970 --> 00:00:54,390
do it, and we'll have some fun.

21
00:00:55,510 --> 00:00:57,996
All right. I am in the directory, the ultimate node

22
00:00:57,997 --> 00:01:00,280
dockerfile directory.

23
00:01:00,310 --> 00:01:02,466
Now I'm in the readme, and I'm just going to

24
00:01:03,280 --> 00:01:04,730
go through each line.

25
00:01:04,750 --> 00:01:07,370
The first one here, on the finished

26
00:01:07,720 --> 00:01:10,500
Dockerfile, is creating a multistage Dockerfile

27
00:01:10,690 --> 00:01:12,909
that supports specific images for production, testing and

28
00:01:12,910 --> 00:01:15,760
development. If I open up that

29
00:01:16,060 --> 00:01:18,600
Dockerfile, the one that I've given you,

30
00:01:20,200 --> 00:01:21,327
has...it's very simple.

31
00:01:22,326 --> 00:01:23,840
It's a single stage Dockerfile.

32
00:01:24,820 --> 00:01:27,315
The first thing I notice is that it's saying that these

33
00:01:27,910 --> 00:01:30,762
apt-get commands are really only needed for dev and

34
00:01:32,230 --> 00:01:34,141
test. I don't need them in a production

35
00:01:35,350 --> 00:01:38,143
image. So, I definitely know that I need three, different

36
00:01:38,440 --> 00:01:40,694
stages, at least, because I need a production,

37
00:01:41,436 --> 00:01:43,390
a development and a test.

38
00:01:43,840 --> 00:01:46,840
I also need to move these out of this

39
00:01:46,900 --> 00:01:49,007
first image. Like you've seen several times

40
00:01:49,870 --> 00:01:51,528
whenever I've shown the multistage examples, there's

41
00:01:52,450 --> 00:01:54,165
typically a base stage where you do

42
00:01:55,510 --> 00:01:57,960
something that's going to be in every other stage.

43
00:01:58,480 --> 00:02:00,100
So, I end up just calling it base.

44
00:02:00,640 --> 00:02:03,250
It doesn't always have the source code in it.

45
00:02:03,310 --> 00:02:06,180
It might just have dependencies. You know, something like

46
00:02:06,190 --> 00:02:08,650
npm installs or apt-gets, stuff like that.

47
00:02:08,979 --> 00:02:11,499
Those are often the things that take the longest when

48
00:02:11,500 --> 00:02:13,569
you're building an image, other than maybe some of the

49
00:02:13,570 --> 00:02:16,020
testing stuff. So, I usually want that as early on

50
00:02:16,540 --> 00:02:19,089
as I can in a base image, and then I'll refer to that base

51
00:02:19,090 --> 00:02:21,295
image, or pull from that base image for later

52
00:02:22,060 --> 00:02:24,811
images. The first thing I want to do is, when

53
00:02:25,270 --> 00:02:26,270
I'm going to do multiple stages, is

54
00:02:30,280 --> 00:02:33,042
I'm going to think about it in a way where I'm just

55
00:02:33,940 --> 00:02:35,410
going to outline it.

56
00:02:35,890 --> 00:02:39,100
I'll just do a from base as.

57
00:02:40,110 --> 00:02:42,400
So, dev, because I'm going to have a dev image.

58
00:02:43,000 --> 00:02:45,370
Then a little later, I'm going to have

59
00:02:46,060 --> 00:02:47,060
from dev as test.

60
00:02:48,248 --> 00:02:50,208
The reason that I know, right away, that

61
00:02:51,250 --> 00:02:53,890
it's probably going to have a test based on dev is

62
00:02:54,310 --> 00:02:57,152
that I know that my dev dependencies, that all those tools

63
00:02:57,160 --> 00:02:58,420
are going to be needed when I do testing. To

64
00:03:00,160 --> 00:03:02,649
make it more efficient, I'll just have those hopefully be

65
00:03:02,650 --> 00:03:04,680
able to pull from each other.

66
00:03:04,700 --> 00:03:07,444
So, that dev will depend on base, and it'll just go from

67
00:03:07,630 --> 00:03:09,939
the first, to the second, to the third kind of image

68
00:03:09,940 --> 00:03:12,340
building scenario. You know, when you're creating these,

69
00:03:13,090 --> 00:03:14,842
you have an idea in your head how many stages

70
00:03:16,420 --> 00:03:19,149
you might need. But then once you get really into it, you

71
00:03:19,150 --> 00:03:20,679
might realize you need more stages.

72
00:03:20,680 --> 00:03:23,140
You might realize that you need to reoptimize your stages

73
00:03:23,170 --> 00:03:25,360
because there's too much stuff going on.

74
00:03:25,660 --> 00:03:27,718
So, I tend to find that whatever I thought

75
00:03:28,780 --> 00:03:31,389
I was going to have at the beginning of this is not exactly

76
00:03:31,390 --> 00:03:33,110
what I end up with at the end to get it to work.

77
00:03:33,111 --> 00:03:35,228
Then I want to do something that's...call it

78
00:03:36,220 --> 00:03:37,411
from base as prod.

79
00:03:39,360 --> 00:03:42,450
Just because I've done Node multistage

80
00:03:42,780 --> 00:03:46,260
before, and I know that I typically want my prod images

81
00:03:46,620 --> 00:03:48,972
to be so lean, and not have any of the dev stuff

82
00:03:49,660 --> 00:03:51,840
in them, or any of the test stuff in them.

83
00:03:52,380 --> 00:03:54,420
If you've been around a while, you know that you can

84
00:03:54,480 --> 00:03:56,979
actually do some npm uninstalls, where you can tell

85
00:03:57,540 --> 00:03:59,220
it to remove dev dependencies.

86
00:03:59,610 --> 00:04:02,070
But, I'm not so much a fan of that because

87
00:04:02,850 --> 00:04:05,519
I don't feel like that's guaranteeing me that my production

88
00:04:05,520 --> 00:04:06,870
image is exactly like I want.

89
00:04:07,230 --> 00:04:09,930
Basically, there's some magic that npm will do that will

90
00:04:10,380 --> 00:04:12,179
get rid of dev dependencies, and it's probably just

91
00:04:12,180 --> 00:04:13,260
removing a bunch of files.

92
00:04:13,740 --> 00:04:15,504
One is that that doesn't necessarily

93
00:04:17,040 --> 00:04:19,980
mean that my image will be smaller, because

94
00:04:20,040 --> 00:04:22,249
it would have to happen in some other image, right.

95
00:04:22,250 --> 00:04:23,730
It can't happen in the prod image.

96
00:04:24,120 --> 00:04:27,030
Because the prod image can't have anything in it

97
00:04:27,150 --> 00:04:29,551
at all. Otherwise, those layers will just bulk up

98
00:04:30,210 --> 00:04:33,003
the image. But, that all goes back to the way that images

99
00:04:33,540 --> 00:04:36,600
work. If you have a previous layer of the same image

100
00:04:36,810 --> 00:04:38,940
that has a bunch of files in it and then you remove them,

101
00:04:39,200 --> 00:04:41,579
they're still in the image. They're just not going to show

102
00:04:41,580 --> 00:04:44,610
up when you run it, but they're still taking up space,

103
00:04:44,730 --> 00:04:45,730
making it bigger.

104
00:04:46,080 --> 00:04:49,055
So, one of the scenarios is I don't want to use that

105
00:04:49,150 --> 00:04:52,030
npm remove dev dependencies command because it's

106
00:04:52,950 --> 00:04:55,592
kind of tricky on where I put it, in which stage, in order

107
00:04:55,593 --> 00:04:58,049
to make sure that those aren't there in the production

108
00:04:58,050 --> 00:05:00,840
image at all. So, you'll see me go through that, and

109
00:05:01,530 --> 00:05:04,537
I'll skip that option when I'm working in Docker.

110
00:05:05,040 --> 00:05:07,559
Here up at the top, I'm going to have to rename my first

111
00:05:07,560 --> 00:05:09,850
stage as base.

112
00:05:10,260 --> 00:05:11,609
That tends to be my standard.

113
00:05:11,610 --> 00:05:13,320
That's not necessarily anyone else's standard.

114
00:05:14,160 --> 00:05:16,580
I don't want to put these comments in here.

115
00:05:16,590 --> 00:05:19,138
I want to keep this as lean as possible just for the

116
00:05:19,680 --> 00:05:21,360
ease of you looking at the screen.

117
00:05:22,630 --> 00:05:24,835
Then, the next thing I want to do is put this

118
00:05:25,750 --> 00:05:28,970
dependency install stuff down here in the dev image only.

119
00:05:30,680 --> 00:05:33,079
Because I know that it's not needed in production according

120
00:05:33,080 --> 00:05:34,400
to that documentation.

121
00:05:34,910 --> 00:05:37,801
I'm going to clean up some spaces here, just so it's easier

122
00:05:37,970 --> 00:05:39,140
for us to move around.

123
00:05:45,200 --> 00:05:46,220
Save that for now.

124
00:05:48,510 --> 00:05:50,879
I've got three stages not really doing a whole lot there

125
00:05:50,880 --> 00:05:51,880
yet.

126
00:05:52,470 --> 00:05:55,470
Dev dependencies should not exist in production image.

127
00:05:55,980 --> 00:05:58,342
So, I know that now I'm going to need two, different npm

128
00:05:58,680 --> 00:05:59,700
install commands.

129
00:06:00,770 --> 00:06:02,870
The first one was already up here.

130
00:06:05,330 --> 00:06:06,653
All right. Really, in order

131
00:06:08,350 --> 00:06:11,320
to control npm install here, I need an

132
00:06:11,690 --> 00:06:13,597
env. I need that to be

133
00:06:19,610 --> 00:06:20,610
node env=production.

134
00:06:22,350 --> 00:06:25,320
Then, I can come down here to my

135
00:06:25,380 --> 00:06:26,820
dev image and paste that and change it to development.

136
00:06:33,340 --> 00:06:36,107
Then I can probably copy this npm install command

137
00:06:37,850 --> 00:06:39,470
and also put that down here

138
00:06:41,190 --> 00:06:42,190
under development.

139
00:06:42,810 --> 00:06:45,720
Now, I'd like to be more literal, so I

140
00:06:45,810 --> 00:06:47,600
also put in

141
00:06:50,280 --> 00:06:51,280
--only like

142
00:06:53,370 --> 00:06:56,330
that. Then I'll do the same thing up here

143
00:06:57,480 --> 00:06:58,898
at the top, I'll do a --only.

144
00:06:58,899 --> 00:06:59,899
So,

145
00:07:04,120 --> 00:07:05,950
it's a little clearer to someone reading it.

146
00:07:06,250 --> 00:07:09,092
That way, they don't have to go up to find the env line to

147
00:07:09,250 --> 00:07:10,750
see what's going to be installed later.

148
00:07:10,810 --> 00:07:13,162
They see that, oh, npm install will only install

149
00:07:13,690 --> 00:07:14,690
production.

150
00:07:15,040 --> 00:07:16,090
So, I kind of do both.

151
00:07:16,930 --> 00:07:18,490
You could get away with using one or the other.

152
00:07:19,240 --> 00:07:21,562
At some point, you're going to need a node env in there

153
00:07:21,563 --> 00:07:24,405
because other things in Node will act differently based on

154
00:07:24,580 --> 00:07:26,860
the node env, not just npm install.

155
00:07:27,280 --> 00:07:29,859
Here, I just like to put it in so that it's easier to read,

156
00:07:29,860 --> 00:07:32,604
and I can be doubly sure that it's definitely going only

157
00:07:32,680 --> 00:07:33,795
install the production stuff.

158
00:07:35,140 --> 00:07:38,200
That's enough, I believe, to qualify

159
00:07:38,230 --> 00:07:39,230
for that line.

160
00:07:39,690 --> 00:07:41,993
The next line, use npm ci to install production

161
00:07:42,700 --> 00:07:44,464
dependencies. Here, I want to change

162
00:07:45,730 --> 00:07:48,685
this from npm install to npm ci.

163
00:07:49,930 --> 00:07:52,750
Then, that means this production doesn't work.

164
00:07:53,170 --> 00:07:55,479
It doesn't need that because it will only install

165
00:07:55,480 --> 00:07:56,480
production dependencies anyway.

166
00:07:59,200 --> 00:08:01,770
All right. Use scenario one for setting up Node modules,

167
00:08:01,780 --> 00:08:03,999
the simple versions. If you remember back earlier in the

168
00:08:04,000 --> 00:08:06,459
course, that just means that we're going to put everything

169
00:08:06,460 --> 00:08:08,829
in the same app directory. We're not going to try to split

170
00:08:08,830 --> 00:08:11,980
out the Node modules and put it higher in the file path.

171
00:08:12,220 --> 00:08:13,360
So, I won't do that.

172
00:08:15,390 --> 00:08:17,580
Set node env properly for dev and prod.

173
00:08:18,120 --> 00:08:19,120
Done.

174
00:08:20,310 --> 00:08:23,610
The dev stage should run nodemon from dev dependencies,

175
00:08:23,640 --> 00:08:26,139
either by updating the path or hard coding the path in

176
00:08:26,140 --> 00:08:27,690
nodemon. Cool.

177
00:08:27,720 --> 00:08:28,720
So, I've already

178
00:08:30,930 --> 00:08:33,625
got the env path here, so I think I'm good to go on the

179
00:08:33,929 --> 00:08:36,780
path. It actually puts the Node

180
00:08:36,900 --> 00:08:39,990
module's bin in there, which will have the nodemon for me.

181
00:08:40,440 --> 00:08:41,714
That means down here under

182
00:08:43,409 --> 00:08:45,850
dev, I just need to do a cmd

183
00:08:46,500 --> 00:08:47,500
and change...just

184
00:08:56,850 --> 00:08:58,264
change it to be like that, where it's running nodemon

185
00:08:58,830 --> 00:08:59,830
instead of Node.

186
00:09:03,600 --> 00:09:06,330
Edit Docker Compose to target the dev stage.

187
00:09:06,870 --> 00:09:08,683
I have called this stage dev, so that

188
00:09:09,900 --> 00:09:13,010
way, in my Docker Compose to tell it to run

189
00:09:13,020 --> 00:09:14,020
that stage.

190
00:09:24,600 --> 00:09:27,209
Target dev. Add labels from OCI standard values are up to

191
00:09:27,210 --> 00:09:28,650
you to all the images.

192
00:09:29,190 --> 00:09:31,649
While I certainly don't memorize all these, and I certainly

193
00:09:31,650 --> 00:09:33,449
don't want to type them all out. So, I'm going to go back

194
00:09:33,450 --> 00:09:36,930
to the command line and back up a directory,

195
00:09:37,380 --> 00:09:39,634
and go to the label examples from the previous

196
00:09:40,830 --> 00:09:42,480
lecture that talked about labels.

197
00:09:43,440 --> 00:09:45,154
If I see in there, they're actually all in the Dockerfile

198
00:09:45,420 --> 00:09:46,620
there. So, I could open

199
00:09:50,020 --> 00:09:51,122
that up in Visual Studio Code.

200
00:09:52,000 --> 00:09:54,620
Or, if you have cat available, just cat the

201
00:09:55,000 --> 00:09:56,000
Dockerfile.

202
00:09:56,260 --> 00:09:58,370
Copy and paste those in.

203
00:09:59,710 --> 00:10:01,100
I may not use them all.

204
00:10:03,100 --> 00:10:04,849
But, I'll put them up here at the top. One of the

205
00:10:04,850 --> 00:10:07,249
requirements was all these labels would be in every one of

206
00:10:07,250 --> 00:10:09,830
them, which means I had to put them all the way at the top.

207
00:10:10,460 --> 00:10:13,302
I do like to put them at the very beginning so that people

208
00:10:13,610 --> 00:10:16,167
can see it. I'm not going to use created or revision here.

209
00:10:16,168 --> 00:10:18,840
I don't have a URL or source, so

210
00:10:19,430 --> 00:10:20,802
I can't really use them all.

211
00:10:20,832 --> 00:10:22,190
But, I can use some of these.

212
00:10:34,080 --> 00:10:35,220
Yeah. Something like that.

213
00:10:35,490 --> 00:10:37,793
Doesn't really matter. I've got those in there.

214
00:10:38,610 --> 00:10:41,452
It will pull the Node version from the official Node image

215
00:10:41,670 --> 00:10:43,110
that I'm using, Node 8 slim.

216
00:10:46,660 --> 00:10:50,080
Add npm config list output before running the npm install.

217
00:10:50,890 --> 00:10:52,066
In my base and in my dev

218
00:10:53,980 --> 00:10:56,599
images, where I have both these npm install commands...Oh,

219
00:10:56,600 --> 00:10:58,540
look at that.

220
00:10:58,600 --> 00:11:01,380
I don't have my npm install down here.

221
00:11:03,300 --> 00:11:06,840
So, I do need to do a run npm install.

222
00:11:09,630 --> 00:11:12,990
Oh, look at that. I've already made a mistake where my test

223
00:11:13,050 --> 00:11:16,065
is where I've got this Node env

224
00:11:16,170 --> 00:11:18,092
development stuff, and not the dev image itself.

225
00:11:18,093 --> 00:11:21,280
So, I'm going to fix that before I go any further.

226
00:11:21,300 --> 00:11:23,358
You're probably wondering why that was the

227
00:11:24,420 --> 00:11:26,400
case, and it shouldn't be that way.

228
00:11:26,670 --> 00:11:28,439
I should be putting all this in the dev image, and

229
00:11:30,900 --> 00:11:33,509
then leaving the test image blank from not, because I'm not

230
00:11:33,510 --> 00:11:35,170
really sure what the requirements are for that.

231
00:11:38,560 --> 00:11:39,620
All right. That's a little better.

232
00:11:41,220 --> 00:11:44,160
Now, according to that readme, I need to add

233
00:11:44,220 --> 00:11:45,592
a run line in for npm config

234
00:11:47,460 --> 00:11:48,460
list. Have

235
00:11:52,210 --> 00:11:53,976
that line run on both images

236
00:11:56,650 --> 00:11:58,041
right before it does npm install.

237
00:11:58,042 --> 00:12:00,100
The reason I'm putting in this as multiple

238
00:12:01,360 --> 00:12:03,761
run lines, because technically, you could combine

239
00:12:04,660 --> 00:12:05,920
these two run lines together.

240
00:12:06,610 --> 00:12:10,300
It would maybe save you like a hundred milliseconds

241
00:12:10,360 --> 00:12:12,489
on the build so that it doesn't have to stop and recreate a

242
00:12:12,490 --> 00:12:13,930
new container for the next line.

243
00:12:14,770 --> 00:12:16,240
But, when I'm building images,

244
00:12:17,740 --> 00:12:19,990
especially up front, when I'm just building it and I'm

245
00:12:20,410 --> 00:12:22,330
writing stuff down, I don't even know if it works yet.

246
00:12:22,810 --> 00:12:25,539
I always break out my run lines as much as I can, where I

247
00:12:25,540 --> 00:12:28,780
think they might have a problem, or might fail, because

248
00:12:29,140 --> 00:12:31,880
it's easier to troubleshoot and it's faster to rebuild when

249
00:12:33,520 --> 00:12:34,810
each one of them is on their own line.

250
00:12:34,870 --> 00:12:37,222
So, I'll worry about efficiency later, and maybe

251
00:12:37,900 --> 00:12:40,497
I'll combine these on my own when I just want to make

252
00:12:40,930 --> 00:12:42,160
this thing as fast as possible.

253
00:12:42,410 --> 00:12:44,272
I could possibly combine all these run

254
00:12:45,430 --> 00:12:48,550
lines together once I know they're working really well.

255
00:12:49,480 --> 00:12:51,636
For me, I tend to keep them separate as long

256
00:12:52,540 --> 00:12:55,870
as there's no serious delay or it's not going to cause

257
00:12:56,380 --> 00:12:58,150
a file bloat issue.

258
00:12:58,180 --> 00:13:00,502
You know the reason you do the apt-get update and the

259
00:13:00,790 --> 00:13:02,603
apt-get install all in one line is so

260
00:13:04,090 --> 00:13:07,090
that you get the right of current

261
00:13:07,120 --> 00:13:09,310
updates. So, if you put those in separate run lines,

262
00:13:09,610 --> 00:13:11,319
there's actually some potential problems you could have

263
00:13:11,320 --> 00:13:13,929
there. The same goes with the npm install and the cache

264
00:13:13,930 --> 00:13:16,690
clean. The cache clean won't really save you any space.

265
00:13:17,140 --> 00:13:19,990
But, I always make sure that's there, right.

266
00:13:20,590 --> 00:13:22,787
This hasn't really gained anything if I combine this run

267
00:13:22,788 --> 00:13:24,939
line here. I'm just going to leave it separate for easier

268
00:13:24,940 --> 00:13:25,940
troubleshooting. All right.

269
00:13:29,810 --> 00:13:32,900
Create a test stage that runs npm audit.

270
00:13:33,680 --> 00:13:35,320
All right. I can do that.

271
00:13:36,290 --> 00:13:38,985
I've already got the test stage, because I was going to

272
00:13:39,280 --> 00:13:40,500
have a dev test prod.

273
00:13:40,990 --> 00:13:43,460
Then I can just do a run npm audit.

274
00:13:46,820 --> 00:13:48,560
Really? Should work.

275
00:13:50,360 --> 00:13:53,060
Test directory should only exist in test image.

276
00:13:54,880 --> 00:13:57,010
Interesting. So, this one can be a little tricky.

277
00:13:57,610 --> 00:14:00,009
It may not be something that we fully fleshed out in a

278
00:14:00,010 --> 00:14:01,010
previous lecture.

279
00:14:01,720 --> 00:14:03,579
Sometimes you want to clean up some stuff before you put it

280
00:14:03,580 --> 00:14:04,580
into production.

281
00:14:04,990 --> 00:14:06,950
But, that stuff is included on the host.

282
00:14:07,670 --> 00:14:10,316
So, you can't put it in a Docker ignore because it has

283
00:14:10,690 --> 00:14:12,490
to be in at least one of the images.

284
00:14:12,550 --> 00:14:14,412
It just can't be in all of the images.

285
00:14:15,273 --> 00:14:17,233
That means you need possibly some images

286
00:14:18,400 --> 00:14:20,470
where it's only doing cleanup for you.

287
00:14:21,100 --> 00:14:23,409
Remember, you can't just copy stuff in, then clean it up in

288
00:14:23,410 --> 00:14:25,510
the same production image that you're going to ship.

289
00:14:25,570 --> 00:14:28,299
Because then you end up with image bloat where that stuff

290
00:14:28,300 --> 00:14:30,995
is sort of hidden in an old layer, and it didn't really

291
00:14:31,360 --> 00:14:33,625
get removed from the image. It's just not going to show up

292
00:14:34,150 --> 00:14:35,230
in the final layer.

293
00:14:35,980 --> 00:14:37,695
So, in this case, I'm going to need

294
00:14:39,160 --> 00:14:41,517
probably some sort of intermediate

295
00:14:42,130 --> 00:14:44,710
image where I do a remove command

296
00:14:45,250 --> 00:14:47,550
at the command line just to delete the files, and then I

297
00:14:47,560 --> 00:14:50,020
copy the final into the production.

298
00:14:50,080 --> 00:14:53,220
That way, I never have those unnecessary

299
00:14:53,230 --> 00:14:55,329
files in the production image, and it's as small as

300
00:14:55,330 --> 00:14:56,330
possible.

301
00:14:58,820 --> 00:15:01,663
I know that my copy command is all the way to top here.

302
00:15:01,686 --> 00:15:03,800
That's not really ideal.

303
00:15:04,040 --> 00:15:06,409
It never really should be like that in a multistage image,

304
00:15:06,410 --> 00:15:08,615
because the copy command will bust everything

305
00:15:09,740 --> 00:15:12,439
else. As soon as I change a single file, every line below

306
00:15:12,440 --> 00:15:14,496
this is going to have to be rebuilt unless you're using

307
00:15:14,750 --> 00:15:16,819
BuildKit. BuildKit gets a little bit smarter, but in the

308
00:15:16,820 --> 00:15:19,950
default building, it's going to require a lot of work.

309
00:15:19,970 --> 00:15:22,220
So, I'm going to move that down as much as I can.

310
00:15:23,180 --> 00:15:24,649
We know we don't need it in the base.

311
00:15:24,650 --> 00:15:27,443
We just need that package JSON in there so that we can do

312
00:15:27,590 --> 00:15:28,610
the npm installs.

313
00:15:28,900 --> 00:15:31,280
We don't necessarily need it in dev, like I covered before.

314
00:15:31,560 --> 00:15:34,353
Because in dev, I am going to bind mount, so I don't even

315
00:15:34,520 --> 00:15:37,790
need the source code in my image because it will be ignored

316
00:15:37,820 --> 00:15:38,930
when I do the bind mount.

317
00:15:39,440 --> 00:15:41,845
I'm going to try to put it here.

318
00:15:42,350 --> 00:15:43,940
I might be able to put it later.

319
00:15:43,970 --> 00:15:45,020
I'm not really sure yet.

320
00:15:45,740 --> 00:15:48,575
So, once my test image has done the npm

321
00:15:48,920 --> 00:15:51,800
audit, and presumably some other test commands we

322
00:15:52,010 --> 00:15:54,362
might have to add in later, I'm going to need to

323
00:15:54,980 --> 00:15:56,330
remove those files.

324
00:15:56,960 --> 00:15:58,789
I don't necessarily want to do them in a test image,

325
00:15:58,790 --> 00:16:00,559
though, because I'm going to need them throughout the

326
00:16:00,560 --> 00:16:02,690
image, and I don't want to end that image with the remove

327
00:16:02,780 --> 00:16:04,720
command, because it'll screw up that image.

328
00:16:04,730 --> 00:16:07,249
That image won't run properly in CI if doesn't have the

329
00:16:07,250 --> 00:16:10,310
test stuff. So, I'm going to have to create some other

330
00:16:10,760 --> 00:16:13,112
image here before I get to the production image.

331
00:16:13,152 --> 00:16:14,152
I'm

332
00:16:17,200 --> 00:16:19,601
going to have to pull it from the test and I want

333
00:16:20,200 --> 00:16:22,060
to call it pre prod, I guess.

334
00:16:23,590 --> 00:16:26,383
The way this is going to work is I'll do a run command in

335
00:16:26,620 --> 00:16:27,620
here to remove the

336
00:16:31,100 --> 00:16:33,160
files I need. So, let's do a

337
00:16:34,430 --> 00:16:35,430
test, right.

338
00:16:37,110 --> 00:16:39,340
That's what it said in the readme to remove that.

339
00:16:39,640 --> 00:16:42,237
Then over here, I'm going to need to copy that source

340
00:16:42,880 --> 00:16:44,656
code into the production image. I'm going to do a copy, but

341
00:16:44,657 --> 00:16:47,640
I'm going to have to do a from and tell it what

342
00:16:47,650 --> 00:16:48,650
stage.

343
00:16:49,210 --> 00:16:51,121
So, we're going to do it from pre prod.

344
00:16:51,275 --> 00:16:52,275
Then

345
00:16:59,060 --> 00:17:00,060
I need to give it full paths.

346
00:17:00,410 --> 00:17:02,958
What I've noticed is when I'm doing the copy command

347
00:17:03,650 --> 00:17:06,490
with the from, doesn't necessarily obey my working

348
00:17:06,500 --> 00:17:09,292
directory. So, I want to be more literal here and say app

349
00:17:09,398 --> 00:17:10,398
app.

350
00:17:14,020 --> 00:17:16,999
The other thing I know just from experience, really,

351
00:17:17,020 --> 00:17:20,529
and doing this wrong the first couple of hundred times,

352
00:17:20,800 --> 00:17:23,530
is that when I do it this way,

353
00:17:23,829 --> 00:17:27,190
when I'm copying my source code out of a development

354
00:17:27,430 --> 00:17:29,740
or testing situation, into my production image.

355
00:17:30,270 --> 00:17:32,812
What I don't want in Node is to also copy that Node

356
00:17:33,100 --> 00:17:35,354
modules, with all the unnecessary Node modules

357
00:17:36,310 --> 00:17:37,310
from dev and test.

358
00:17:38,830 --> 00:17:41,050
I have to remove that as well.

359
00:17:45,800 --> 00:17:47,760
Running this here means that when I copy

360
00:17:48,800 --> 00:17:51,299
this here, it will merge essentially what's already

361
00:17:52,130 --> 00:17:54,490
in that base image, which includes the production Node

362
00:17:54,650 --> 00:17:56,240
modules from base.

363
00:17:56,750 --> 00:17:59,494
Then it's going to copy all the source code, but not the

364
00:17:59,570 --> 00:18:01,922
test directory, and not the Node modules from my

365
00:18:02,630 --> 00:18:03,630
dev/test image.

366
00:18:04,220 --> 00:18:06,791
This right here is...it

367
00:18:07,490 --> 00:18:09,230
could be considered an intermediate layer.

368
00:18:09,410 --> 00:18:12,140
It's never used as its own

369
00:18:12,380 --> 00:18:14,781
image to run. It's just there to help me clean up

370
00:18:15,380 --> 00:18:17,830
some stuff before I copy it to a new image that is

371
00:18:18,510 --> 00:18:19,510
then production.

372
00:18:20,710 --> 00:18:23,200
Healthchecks should be added for production image.

373
00:18:23,890 --> 00:18:26,559
That's a nice thing that I can add down here at the very

374
00:18:26,560 --> 00:18:27,560
bottom.

375
00:18:36,720 --> 00:18:38,260
cmd and cURL is in the image.

376
00:18:49,190 --> 00:18:51,934
That is enough for now. I probably could make it fancier

377
00:18:52,550 --> 00:18:53,550
and do the exit 1,

378
00:18:57,900 --> 00:19:00,407
but really, it's just there as a basic

379
00:19:01,050 --> 00:19:04,260
test just to validate that I have a container working.

380
00:19:06,110 --> 00:19:09,125
Next, prevent repeating costly commands like npm

381
00:19:09,440 --> 00:19:12,620
installs or apt-gets. I think I've done that pretty well.

382
00:19:12,650 --> 00:19:15,140
I don't have any repeating commands here that are

383
00:19:15,200 --> 00:19:16,200
unnecessary.

384
00:19:16,850 --> 00:19:18,222
No unnecessary npm installs.

385
00:19:18,530 --> 00:19:20,800
No unnecessary copy commands because I'm only copying in

386
00:19:20,870 --> 00:19:22,820
once with the dot dot.

387
00:19:23,360 --> 00:19:24,710
Then, I'm doing a little removal.

388
00:19:26,870 --> 00:19:28,193
Only copy source code once.

389
00:19:28,347 --> 00:19:30,740
Then copy from to get into other stages.

390
00:19:30,840 --> 00:19:31,840
Well, I did that.

391
00:19:32,660 --> 00:19:35,029
Maybe because I wrote these rules, I knew them before I

392
00:19:35,030 --> 00:19:36,059
read them. All right.

393
00:19:36,336 --> 00:19:38,982
Now what I'm going to do is we're going to skip bonus.

394
00:19:39,080 --> 00:19:40,820
That's going to be in the next lecture.

395
00:19:41,250 --> 00:19:42,985
I'm going to go straight to the outcomes.

396
00:19:42,986 --> 00:19:44,946
I'm going to run through these different

397
00:19:46,070 --> 00:19:48,814
commands and things that we need to do to make sure that

398
00:19:49,040 --> 00:19:52,370
everything is as I would expect, and it builds and runs

399
00:19:52,490 --> 00:19:53,490
as it should.

400
00:19:54,690 --> 00:19:57,279
The first one on the list is build all stages as their own

401
00:19:57,280 --> 00:19:59,240
tag. Ultimate node test should be bigger

402
00:20:00,460 --> 00:20:01,900
than ultimate node prod.

403
00:20:02,500 --> 00:20:03,898
All right. So, I'm going to call it ultimate node.

404
00:20:03,899 --> 00:20:04,899
Let me get

405
00:20:07,360 --> 00:20:10,210
back in the ultimate directory.

406
00:20:10,990 --> 00:20:12,650
All right. So, let's do a docker build here.

407
00:20:14,120 --> 00:20:15,580
We're going to tag it ultimate node.

408
00:20:15,581 --> 00:20:16,581
We're going to

409
00:20:18,830 --> 00:20:21,049
start with dev. I'm just going to do dev and then the test

410
00:20:21,050 --> 00:20:23,119
image is in the prod, because that's sort of the flow

411
00:20:23,120 --> 00:20:24,128
they're going to be in anyways. Target dev. OK.

412
00:20:34,080 --> 00:20:36,769
It has successfully built the dev image, so I'm going to

413
00:20:36,770 --> 00:20:39,890
just hit the up arrow and do this for

414
00:20:39,950 --> 00:20:43,490
test. So, I'll change the target and I will change

415
00:20:43,760 --> 00:20:44,760
the tag to test.

416
00:20:50,380 --> 00:20:52,408
Now that I've done it for test, I'm going to do it for prod

417
00:20:52,720 --> 00:20:53,720
as well.

418
00:20:57,800 --> 00:21:00,446
Then, I'll do a docker image ls, and look at the three

419
00:21:00,470 --> 00:21:02,060
outputs just to see the sizes.

420
00:21:02,360 --> 00:21:04,957
The goal here, really, is that your prod image is the

421
00:21:05,360 --> 00:21:06,500
smallest size.

422
00:21:06,920 --> 00:21:09,800
So, your dev and your test will probably be pretty close

423
00:21:10,070 --> 00:21:12,679
together because they'll have the same stuff except for the

424
00:21:12,680 --> 00:21:15,650
source code, which will be in the test image,

425
00:21:15,680 --> 00:21:16,700
but not in the dev image.

426
00:21:17,060 --> 00:21:19,759
So, if you have lots of source code, then the test would be

427
00:21:19,760 --> 00:21:21,549
the biggest one. Typically, that's what I expected.

428
00:21:21,550 --> 00:21:24,090
Test has all the stuff it needs.

429
00:21:24,110 --> 00:21:27,140
Basically, everything you could possibly want for testing

430
00:21:27,560 --> 00:21:30,255
and production is going to be the smallest that I would

431
00:21:30,470 --> 00:21:33,490
expect. These are working as I would hope.

432
00:21:34,670 --> 00:21:36,630
All builds should finish. Well, definitely that one.

433
00:21:36,631 --> 00:21:38,030
So,the first two are finished.

434
00:21:38,450 --> 00:21:41,047
Run dev test prod images and ensure they can start as

435
00:21:41,390 --> 00:21:44,075
expected. All right. So, these are just one-off

436
00:21:44,390 --> 00:21:46,750
docker runs. So, I can do a docker run.

437
00:21:48,580 --> 00:21:50,491
Because I ran this a while ago and knew

438
00:21:51,580 --> 00:21:55,000
that it wouldn't control c, because this app is not aware

439
00:21:55,300 --> 00:21:57,554
of Tini and doesn't capture signals, I'm going

440
00:21:58,360 --> 00:22:01,180
to do an init here just to save me some time.

441
00:22:01,660 --> 00:22:02,983
We called it ultimate node.

442
00:22:03,286 --> 00:22:04,286
I'll

443
00:22:06,290 --> 00:22:07,670
do the test one.

444
00:22:12,050 --> 00:22:14,419
And it started. Now, it's going to wait for DB because I

445
00:22:14,420 --> 00:22:15,868
didn't use Docker Compose, and that's normal.

446
00:22:15,869 --> 00:22:17,682
I can control c out of that, and then

447
00:22:18,890 --> 00:22:21,046
do the same thing for prod, which should not

448
00:22:21,890 --> 00:22:23,255
be using nodemon.

449
00:22:26,170 --> 00:22:27,480
All right. That looks good.

450
00:22:28,300 --> 00:22:31,015
Then I could do a docker compose up

451
00:22:32,020 --> 00:22:33,580
and see if everything works here.

452
00:22:37,310 --> 00:22:40,460
All right. Once I see connected to DB, then

453
00:22:40,490 --> 00:22:41,670
I can jump over to my browser.

454
00:22:43,910 --> 00:22:47,120
Do the localhost 5000, or whatever

455
00:22:47,210 --> 00:22:49,260
Node your Docker is running on and then

456
00:22:50,300 --> 00:22:51,300
the result is 5001.

457
00:22:52,100 --> 00:22:54,130
I can click on dogs and see dogs.

458
00:22:54,170 --> 00:22:57,020
And click on cats and see cats.

459
00:22:57,110 --> 00:22:58,125
All right. We're good to go there.

460
00:23:00,890 --> 00:23:04,100
I've now done the first four, it looks like.

461
00:23:04,240 --> 00:23:06,380
Build all stages. All builds should finish.

462
00:23:06,440 --> 00:23:07,910
Run dev test prod images.

463
00:23:08,180 --> 00:23:10,459
Docker compose up should work, and you can vote and see

464
00:23:10,460 --> 00:23:13,400
results. Now, it says ensure prod images

465
00:23:13,460 --> 00:23:16,280
don't have unnecessary files by running docker run

466
00:23:16,420 --> 00:23:18,380
it. Okay. So, what I'm doing here is I'm

467
00:23:19,460 --> 00:23:22,760
going to run an image, the production image,

468
00:23:23,150 --> 00:23:24,914
manually and get a bash shell in it.

469
00:23:25,362 --> 00:23:26,362
Then, I can dig

470
00:23:28,380 --> 00:23:31,140
around. If you're familiar with

471
00:23:31,350 --> 00:23:34,139
tools in Docker, there's a tool that's pretty cool called

472
00:23:34,140 --> 00:23:35,140
Dive, D I V E.

473
00:23:35,685 --> 00:23:37,841
So, check that tool out if you're interested

474
00:23:39,090 --> 00:23:42,312
in a visual understanding of diving into

475
00:23:43,590 --> 00:23:45,240
what is in an image.

476
00:23:45,300 --> 00:23:47,460
This tool, Dive, does exactly that.

477
00:23:47,760 --> 00:23:49,829
And it's a pretty good one. But I'm not going to show that

478
00:23:49,830 --> 00:23:52,623
off. I'm really just going to do a simple docker run into

479
00:23:53,010 --> 00:23:54,192
the bash, and then do a couple of ls's.

480
00:24:00,880 --> 00:24:04,300
So docker run -it ultimate node prod

481
00:24:04,360 --> 00:24:06,939
and then bash will give me a shell inside one of those

482
00:24:06,940 --> 00:24:08,214
containers. I can do an ls

483
00:24:10,060 --> 00:24:11,060
real quick.

484
00:24:11,490 --> 00:24:12,813
I can see that I don't have

485
00:24:14,510 --> 00:24:16,680
the test directory in here, which is a good sign.

486
00:24:17,240 --> 00:24:19,680
Then if I do an ls of node modules/.bin.

487
00:24:22,620 --> 00:24:24,650
Good. So, I don't see nodemon in there.

488
00:24:25,020 --> 00:24:27,323
Part of the problem with a lot of these is that

489
00:24:28,010 --> 00:24:30,620
once you get into production, your image

490
00:24:30,980 --> 00:24:33,822
gets complicated enough that it's easy to accidentally put

491
00:24:33,980 --> 00:24:36,822
stuff in the production image because your different build

492
00:24:37,100 --> 00:24:38,539
stages are out of order, or maybe you don't have the

493
00:24:38,540 --> 00:24:39,680
commands just quite right.

494
00:24:39,980 --> 00:24:42,528
So, this is a really easy way to just dig around the

495
00:24:42,530 --> 00:24:45,020
production image to figure out what's in here and what

496
00:24:45,080 --> 00:24:48,350
isn't. Then after docker compose up, run

497
00:24:48,410 --> 00:24:51,050
the docker compose exec result.

498
00:24:51,500 --> 00:24:54,350
Test test to perform a functional test

499
00:24:54,920 --> 00:24:56,090
across test containers.

500
00:24:56,780 --> 00:24:59,034
All right. I'm just going to copy this command

501
00:24:59,870 --> 00:25:00,980
out and paste it in.

502
00:25:01,790 --> 00:25:04,070
So, I need to do a docker compose up first.

503
00:25:06,400 --> 00:25:08,820
I'll do a -d so it runs in the background.

504
00:25:09,300 --> 00:25:12,202
Then if I do a docker compose exec on the result service,

505
00:25:14,220 --> 00:25:15,926
and then run the test command,

506
00:25:18,460 --> 00:25:21,070
it'll take a minute for it to validate the tests.

507
00:25:22,930 --> 00:25:25,630
If you go digging around, then it's

508
00:25:25,900 --> 00:25:28,570
a shell script that's running from

509
00:25:28,930 --> 00:25:32,440
the result against the vote and changing votes,

510
00:25:32,740 --> 00:25:34,450
and then seeing if they show up in the result.

511
00:25:35,380 --> 00:25:36,700
All right test passed. Great.

512
00:25:37,707 --> 00:25:40,370
That's really it for this assignment.

513
00:25:40,430 --> 00:25:43,272
For the bonus stuff, see the next lecture where I'll dig a

514
00:25:43,400 --> 00:25:45,262
little bit more into the more advanced

515
00:25:46,730 --> 00:25:48,153
stuff of this

516
00:25:49,650 --> 00:25:50,322
assignment. Thanks for watching.

