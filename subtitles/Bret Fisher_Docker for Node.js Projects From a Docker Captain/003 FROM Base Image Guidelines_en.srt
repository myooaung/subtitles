1
00:00:02,920 --> 00:00:06,430
Let's spend a few minutes talking about your base images.

2
00:00:06,640 --> 00:00:09,750
That is the image that all your Node apps will be built on.

3
00:00:09,820 --> 00:00:11,439
The default images are great.

4
00:00:11,440 --> 00:00:13,329
We will be using those throughout this course.

5
00:00:13,330 --> 00:00:16,659
We won't be making bespoke custom builds

6
00:00:16,660 --> 00:00:19,119
of Node. I don't really think that's necessary,

7
00:00:19,120 --> 00:00:22,119
in almost all cases, unless you're maybe Google

8
00:00:22,120 --> 00:00:23,670
or Netflix.

9
00:00:23,860 --> 00:00:25,359
So, let's just stick

10
00:00:25,360 --> 00:00:26,649
with those unless you have a really,

11
00:00:26,650 --> 00:00:28,053
really specific reason why not.

12
00:00:28,054 --> 00:00:31,359
The first rule here is to stick to even versions.

13
00:00:31,360 --> 00:00:32,709
If you've been around Node awhile,

14
00:00:32,710 --> 00:00:36,510
you know that even versions are stable releases.

15
00:00:36,570 --> 00:00:39,639
Odd versions of Node are...tend to be experimental

16
00:00:39,640 --> 00:00:41,358
and new feature stuff.

17
00:00:42,280 --> 00:00:44,799
All the LTS, the long term stability,

18
00:00:44,800 --> 00:00:46,689
long term support versions,

19
00:00:46,690 --> 00:00:48,230
are even.

20
00:00:48,430 --> 00:00:50,670
You will notice, if you go into Docker Hub,

21
00:00:50,830 --> 00:00:54,069
that the latest isn't always even

22
00:00:54,070 --> 00:00:57,249
or odd. It's sort of just whatever is literally the latest
build

23
00:00:57,250 --> 00:01:00,369
of Node. That's why we don't tend to use latest.

24
00:01:00,370 --> 00:01:02,100
I don't recommend using latest,

25
00:01:02,230 --> 00:01:03,639
unless you're going to play around

26
00:01:03,640 --> 00:01:06,029
with something locally and you just want to tinker

27
00:01:06,420 --> 00:01:08,319
and experiment. That's fine.

28
00:01:08,320 --> 00:01:11,019
You can just run Node without specifying a tag.

29
00:01:11,020 --> 00:01:13,807
But, you'll see here on the GitHub repo for Node,

30
00:01:13,808 --> 00:01:15,939
you'll see here the Node releases,

31
00:01:15,940 --> 00:01:17,899
and you'll see how you have LTS's here.

32
00:01:18,700 --> 00:01:21,699
You have the maintenance releases for the older versions
that are really just

33
00:01:21,700 --> 00:01:24,510
in maintenance. Then as of this course,

34
00:01:24,700 --> 00:01:27,576
the active long term stable is 10.something.

35
00:01:28,750 --> 00:01:31,119
So,in this course we will be using 10.

36
00:01:31,120 --> 00:01:32,769
Again, this isn't really a Node course,

37
00:01:32,770 --> 00:01:35,949
but I want to point out that any app you should be pinning

38
00:01:35,950 --> 00:01:39,210
the version. A nice, cool thing is if we're always running
our apps

39
00:01:39,370 --> 00:01:40,860
inside of containers,

40
00:01:40,930 --> 00:01:43,509
that allows whatever Node you're running on your hosts,

41
00:01:43,510 --> 00:01:44,829
whether you're on Mac, or Windows,

42
00:01:44,830 --> 00:01:47,979
or Linux, you can just run that as whatever the latest

43
00:01:47,980 --> 00:01:50,859
version is, right. Because usually, that's just for running
host utilities

44
00:01:50,860 --> 00:01:53,609
or just to use NPM really to download host tools,

45
00:01:53,610 --> 00:01:56,889
maybe. If you're running all of your apps in containers,

46
00:01:56,890 --> 00:02:00,150
you can be very specific as to which Node version is
running

47
00:02:00,250 --> 00:02:02,130
and executing your code.

48
00:02:02,140 --> 00:02:04,800
Whereas, on the host, where maybe it doesn't matter as
much,

49
00:02:04,900 --> 00:02:06,369
you can just do whatever.

50
00:02:06,370 --> 00:02:09,000
That, for me, has allowed me to not have to use in NVM

51
00:02:09,100 --> 00:02:12,069
or N, any of these Node version manager

52
00:02:12,070 --> 00:02:15,039
tools. I can really just execute code

53
00:02:15,040 --> 00:02:18,159
inside my container. Then if I don't really care from host

54
00:02:18,160 --> 00:02:19,714
convenience perspectives,

55
00:02:19,870 --> 00:02:22,620
I can just run Node and NPM commands on my host for
whenever.

56
00:02:23,140 --> 00:02:26,049
You'll hear a lot of people in the industry talk about not
using latest.

57
00:02:26,050 --> 00:02:29,139
So, we will maybe talk about this later in the course when
we talk

58
00:02:29,140 --> 00:02:31,059
about production stuff because that's kind of obvious.

59
00:02:31,060 --> 00:02:33,940
You shouldn't just run Node random versions in production.

60
00:02:34,090 --> 00:02:36,519
But, I say start early.

61
00:02:36,520 --> 00:02:39,564
When you start your application development for some new
app,

62
00:02:39,760 --> 00:02:41,610
you're going to pick a stable version

63
00:02:41,770 --> 00:02:43,054
and stick with that, right.

64
00:02:43,055 --> 00:02:45,849
If you decide to upgrade to the next stable version,

65
00:02:45,850 --> 00:02:49,119
or if you have a specific reason to use an even release,

66
00:02:49,120 --> 00:02:50,439
at least know what you're doing

67
00:02:50,440 --> 00:02:53,469
and then hard code that in the FROM first line of your

68
00:02:53,470 --> 00:02:53,720
Dockerfile.

69
00:02:54,702 --> 00:02:58,479
If we're looking at the official Node repository

70
00:02:58,480 --> 00:02:59,760
on Docker Hub,

71
00:02:59,920 --> 00:03:01,449
we can see that there's lots

72
00:03:01,450 --> 00:03:04,689
and lots of versions. If you're not an old salty

73
00:03:04,690 --> 00:03:07,890
hat with Node, a lot of this may be a little overwhelming.

74
00:03:08,080 --> 00:03:11,169
I want to focus you here on a few simple rules that will
help you decide

75
00:03:11,170 --> 00:03:12,060
what you need to do.

76
00:03:12,520 --> 00:03:14,319
All images, by default,

77
00:03:14,320 --> 00:03:16,809
use Debian as their base image.

78
00:03:16,810 --> 00:03:19,860
Which means, really, that you get the apt get package
manager.

79
00:03:19,930 --> 00:03:21,398
You get some core utilities, openssl.

80
00:03:23,200 --> 00:03:25,110
Stuff like, you know, a bash shell.

81
00:03:25,270 --> 00:03:28,539
All official images on Docker Hub default to Debian.

82
00:03:28,540 --> 00:03:31,539
Which means you get the apt package manager out-of-the-box
so you can

83
00:03:31,540 --> 00:03:34,659
run apt get and the other apps commands like you would be
used

84
00:03:34,660 --> 00:03:35,949
to on Ubuntu

85
00:03:35,950 --> 00:03:38,469
or Debian. They're all stemming from Debian,

86
00:03:38,470 --> 00:03:41,160
and so that's a pretty popular release that people use.

87
00:03:41,290 --> 00:03:44,106
Right now, the latest image is over 800MB,

88
00:03:44,680 --> 00:03:46,019
so it's pretty big.

89
00:03:46,020 --> 00:03:47,589
That's really for convenience,

90
00:03:47,590 --> 00:03:50,010
to make sure that you have a lot the tools you might need.

91
00:03:50,650 --> 00:03:52,479
Through this course, though, we will be jumping back

92
00:03:52,480 --> 00:03:53,829
and forth between that

93
00:03:53,830 --> 00:03:55,320
and Alpine. So,

94
00:03:55,510 --> 00:03:58,569
I would recommend that you focus on Alpine when you

95
00:03:58,570 --> 00:04:01,380
can. For most of the projects I work on,

96
00:04:01,480 --> 00:04:05,040
if they're migrating an old app from pre-container world

97
00:04:05,110 --> 00:04:07,479
into a container, usually what I recommend up front,

98
00:04:07,480 --> 00:04:09,519
is to use the Debian-based image,

99
00:04:09,520 --> 00:04:12,150
if that's what they were used to building in production.

100
00:04:12,190 --> 00:04:15,067
Because that means that all their build documentation
around using apt

101
00:04:15,220 --> 00:04:18,779
package manager, or any other common Linux tool for that
distribution,

102
00:04:18,850 --> 00:04:20,380
will just naturally work in the Dockerfile.

103
00:04:21,100 --> 00:04:21,999
The nice thing is about

104
00:04:22,000 --> 00:04:24,005
Node is that we usually have very small Dockerfiles,

105
00:04:24,940 --> 00:04:27,710
and they don't depend on a lot of host utilities.

106
00:04:27,820 --> 00:04:30,879
So, it may not matter which base image

107
00:04:30,880 --> 00:04:32,128
you use for your Node.

108
00:04:32,620 --> 00:04:34,419
But, initially stick

109
00:04:34,420 --> 00:04:37,209
with what you know, and then eventually consider Alpine.

110
00:04:37,210 --> 00:04:38,529
If you're new to Alpine,

111
00:04:38,530 --> 00:04:41,589
Alpine is a very small base image that has only the

112
00:04:41,590 --> 00:04:44,529
minimal tools for Node to get started.

113
00:04:44,530 --> 00:04:46,380
Again, these all have the same Node

114
00:04:46,430 --> 00:04:48,240
and NPM stuff in them,

115
00:04:48,400 --> 00:04:51,810
but the Debian distribution will have more

116
00:04:51,820 --> 00:04:54,789
base OS packages that you might need for some of your

117
00:04:54,790 --> 00:04:56,490
NPM package dependencies.

118
00:04:56,650 --> 00:04:57,840
With Alpine,

119
00:04:57,970 --> 00:05:01,389
you're going to have to make sure that Alpine supports
those packages.

120
00:05:01,390 --> 00:05:04,379
There might be some Edge cases where you

121
00:05:04,380 --> 00:05:07,123
won't have, in the Alpine Package Manager,

122
00:05:07,350 --> 00:05:10,280
the package JSON dependencies in your app.

123
00:05:10,410 --> 00:05:12,381
So, realize that not every app,

124
00:05:12,382 --> 00:05:13,859
especially more complicated,

125
00:05:13,860 --> 00:05:15,110
larger Node apps,

126
00:05:15,180 --> 00:05:18,569
may work flawlessly out-of-the-box doing an NPM install

127
00:05:18,570 --> 00:05:20,200
on an Alpine base image.

128
00:05:20,310 --> 00:05:23,759
But you can see in the Docker Hub page how

129
00:05:23,760 --> 00:05:26,609
almost all these images have an Alpine variant.

130
00:05:26,610 --> 00:05:28,640
If we were to look at the 10 track,

131
00:05:28,800 --> 00:05:31,919
we could see down here that if I just wanted

132
00:05:31,920 --> 00:05:34,769
to specify 10 with a default Debian-based image,

133
00:05:34,770 --> 00:05:36,260
I could do that over here.

134
00:05:36,480 --> 00:05:37,769
If you know.

135
00:05:37,770 --> 00:05:39,823
So, basically if I typed in Node:10,

136
00:05:41,190 --> 00:05:44,219
I would get this image because you can see here that I
could

137
00:05:44,220 --> 00:05:47,060
specify 10. I personally like to specify

138
00:05:47,210 --> 00:05:50,399
10.something even so even the patch level of release

139
00:05:50,400 --> 00:05:53,369
I would prefer to use. Then you'll notice that I have an
Alpine variant

140
00:05:53,370 --> 00:05:56,570
of that exact, same version of Node that's going to be much
smaller.

141
00:05:56,580 --> 00:05:58,868
Less than a 100MB vs over 800MB.

142
00:06:00,156 --> 00:06:02,159
Then we have slim here.

143
00:06:02,160 --> 00:06:05,009
And slim is something I don't recommend you normally use.

144
00:06:05,010 --> 00:06:07,979
In fact, on this Readme page, they will tell you not to use
it unless

145
00:06:07,980 --> 00:06:09,260
you really need to.

146
00:06:09,390 --> 00:06:12,029
It's typically a smaller version of Debian.

147
00:06:12,030 --> 00:06:14,120
But really, that's what Alpine is now for.

148
00:06:14,220 --> 00:06:16,919
Alpine wasn't around when Docker necessarily started.

149
00:06:16,920 --> 00:06:20,249
It wasn't an image in the Docker Hub that was so popular,

150
00:06:20,250 --> 00:06:22,740
and it sort of gained its popularity over time.

151
00:06:22,860 --> 00:06:25,829
So, it's sort of become the industry standard for when you

152
00:06:25,830 --> 00:06:27,620
want a really small image.

153
00:06:27,720 --> 00:06:30,119
So, the slim isn't as popular.

154
00:06:30,120 --> 00:06:33,119
Although, what's nice about it is it does at least have the

155
00:06:33,120 --> 00:06:34,640
Debian Package Manager in it,

156
00:06:34,710 --> 00:06:37,169
versus the Alpine Package Manager.

157
00:06:37,170 --> 00:06:39,620
So, if for some reason you can't use Alpine,

158
00:06:39,720 --> 00:06:41,399
then maybe the slim might be for you.

159
00:06:41,400 --> 00:06:44,489
But, do realize that it has very little host utilities

160
00:06:44,490 --> 00:06:46,755
and add-on packages in it built in,

161
00:06:47,010 --> 00:06:49,340
so you may have to spend more time building it.

162
00:06:49,800 --> 00:06:51,929
For those of you who don't know Debian releases,

163
00:06:51,930 --> 00:06:55,010
if you're someone who cares about making sure that your

164
00:06:55,230 --> 00:06:58,070
base package is on the latest version of Debian,

165
00:06:58,200 --> 00:07:01,229
you would use the stretch because it is running

166
00:07:01,230 --> 00:07:02,790
Debian 9, I believe.

167
00:07:03,120 --> 00:07:05,780
Jessie is the older release of the base image.

168
00:07:06,060 --> 00:07:09,299
Ultimately, it's really up to you to learn what the
differences

169
00:07:09,300 --> 00:07:11,090
are there and which one you care about.

170
00:07:11,280 --> 00:07:14,376
There's a little history for you on the builds.

171
00:07:15,000 --> 00:07:17,790
The last one I will talk about here is not to use onbuild.

172
00:07:18,030 --> 00:07:21,440
You might see that and several of these options on
onbuilds.

173
00:07:21,600 --> 00:07:23,389
You're wondering maybe what the heck onbuild is.

174
00:07:23,390 --> 00:07:25,400
It talks a little bit about that here.

175
00:07:25,410 --> 00:07:28,739
But onbuild is actually a Dockerfile command that we don't
use

176
00:07:28,740 --> 00:07:30,680
because I'm not a huge fan of it.

177
00:07:30,750 --> 00:07:33,809
In fact, there's a lot of discussion in the community
around when to

178
00:07:33,810 --> 00:07:37,169
use it, and that is becoming a far less common

179
00:07:37,170 --> 00:07:40,169
use case just because it tends to cause problems later

180
00:07:40,170 --> 00:07:43,430
on. Originally, onbuild was the idea that we could

181
00:07:43,440 --> 00:07:46,409
make a Dockerfile, or maybe Docker Hub could have the
official

182
00:07:46,410 --> 00:07:49,769
Node image. Have an onbuild Dockerfile that sets

183
00:07:49,770 --> 00:07:53,039
commands in that Dockerfile that would then be used in any

184
00:07:53,040 --> 00:07:54,120
downstream Dockerfile,

185
00:07:54,480 --> 00:07:55,464
meaning, your Dockerfile.

186
00:07:56,190 --> 00:07:58,728
So, the idea was when you made your Dockerfile,

187
00:07:59,460 --> 00:08:01,376
that things from the upstream Dockerfile,

188
00:08:01,890 --> 00:08:03,530
from the official Node repo,

189
00:08:03,570 --> 00:08:05,370
would automatically execute in your Dockerfile.

190
00:08:06,390 --> 00:08:08,219
There are pros and cons to that,

191
00:08:08,220 --> 00:08:11,549
but ultimately, what it did was it caused people to be
confused

192
00:08:11,550 --> 00:08:14,519
about what exactly was happening during their Docker build
because there were

193
00:08:14,520 --> 00:08:16,887
some things happening that weren't even specified in their
Dockerfile

194
00:08:17,550 --> 00:08:19,042
because it was in an upstream Dockerfile.

195
00:08:19,740 --> 00:08:21,135
Long story short there,

196
00:08:21,600 --> 00:08:22,830
generally don't use onbuild.

197
00:08:23,040 --> 00:08:25,409
It was actually pretty neat for 5 minutes when I was
playing

198
00:08:25,410 --> 00:08:28,439
with it back when I first learned Docker because it would
allow you to

199
00:08:28,440 --> 00:08:29,720
potentially use Docker

200
00:08:29,880 --> 00:08:32,511
with your Node app without ever creating a Dockerfile.

201
00:08:33,330 --> 00:08:35,759
Pretty cool. But in reality,

202
00:08:35,760 --> 00:08:37,649
with any sort of normal app,

203
00:08:37,650 --> 00:08:40,318
you're going to want to eventually create a Dockerfile
anyway,

204
00:08:40,320 --> 00:08:41,693
so you might as well just do that out-of-the-box

205
00:08:42,390 --> 00:08:44,210
and skip the onbuild fanciness.

