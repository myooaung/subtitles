WEBVTT
1
00:00:05.510 --> 00:00:08.779
All right. The first one up here is using copy,

2
00:00:08.990 --> 00:00:12.320
not add. If you see recommendations on the Internet,

3
00:00:12.350 --> 00:00:14.849
or blogs, that suggest using the add command to get

4
00:00:15.380 --> 00:00:17.487
your files into your image, you're probably

5
00:00:18.380 --> 00:00:19.640
using the wrong command.

6
00:00:19.700 --> 00:00:22.720
Only because we have these two features

7
00:00:22.730 --> 00:00:25.189
now, copy and add in the Dockerfile, that essentially do

8
00:00:25.190 --> 00:00:27.589
the same thing in terms of copying files in from the

9
00:00:27.590 --> 00:00:29.720
command line from your local machine.

10
00:00:29.750 --> 00:00:32.590
But, the add can do a lot more stuff.

11
00:00:32.600 --> 00:00:34.490
It can actually download files from the Internet.

12
00:00:34.550 --> 00:00:37.160
It can untar any files that it sees

13
00:00:37.680 --> 00:00:38.960
in your local directory.

14
00:00:39.230 --> 00:00:42.170
It basically got a little too confusing and

15
00:00:42.530 --> 00:00:44.833
had some accidental side effects around copying

16
00:00:45.590 --> 00:00:47.942
files in. So, the industry basically has decided

17
00:00:48.800 --> 00:00:51.710
that you shouldn't use add unless you know why you need it,

18
00:00:51.860 --> 00:00:53.150
and then only use it for that.

19
00:00:53.180 --> 00:00:55.826
In this case, default to copy when you're putting your

20
00:00:55.850 --> 00:00:58.202
files in your images and in Nodeland, we usually

21
00:00:59.270 --> 00:01:01.426
just use copy. I rarely see anyone using the

22
00:01:02.330 --> 00:01:04.339
add command and having legitimate uses for that.

23
00:01:04.370 --> 00:01:06.330
Focus on copy for now and ignore any old

24
00:01:07.760 --> 00:01:10.070
blogs you might see, from the early days of Docker, that

25
00:01:10.130 --> 00:01:11.390
might suggest using add.

26
00:01:11.930 --> 00:01:13.580
Next up is npm and yarn.

27
00:01:13.730 --> 00:01:16.044
In all the official images that we're going to be using,

28
00:01:16.500 --> 00:01:18.170
they're going to be built in by default.

29
00:01:18.410 --> 00:01:20.929
They weren't always in Node by default, but nowadays, it's

30
00:01:20.930 --> 00:01:22.220
normal to have them both there.

31
00:01:22.635 --> 00:01:25.183
You'll hear us talk about base images later and what

32
00:01:25.700 --> 00:01:26.960
you're from images should be.

33
00:01:27.200 --> 00:01:29.251
Just know that you don't need to install npm and yarn.

34
00:01:29.510 --> 00:01:32.180
In fact, you tend to probably just use the one that came

35
00:01:32.390 --> 00:01:33.805
with the Node version that you're using.

36
00:01:33.806 --> 00:01:36.060
If you need to specifically update one of them

37
00:01:36.890 --> 00:01:39.732
because of maybe a bug or a new feature that you need, you

38
00:01:39.830 --> 00:01:40.830
could certainly do that in your Dockerfile.

39
00:01:41.180 --> 00:01:43.875
But, I don't normally recommend that out-of-the-box, by

40
00:01:43.910 --> 00:01:46.066
default, due to versions and the expectation

41
00:01:47.000 --> 00:01:49.450
around those packages being packaged with the same

42
00:01:50.150 --> 00:01:52.759
Node version. Opinions are different on that, so it's up to

43
00:01:52.760 --> 00:01:55.910
you. But, we won't be upgrading or installing

44
00:01:56.120 --> 00:01:57.590
npm or yarn because they're there.

45
00:01:57.920 --> 00:02:00.615
You can use either one. You'll see in this example file

46
00:02:00.620 --> 00:02:03.530
here that I'm using the npm command.

47
00:02:03.860 --> 00:02:07.010
But, certainly if you have a preference for either or, then

48
00:02:07.070 --> 00:02:09.499
use those. I will be using npm in this course just because

49
00:02:09.500 --> 00:02:12.109
I've been around Node a long time, and npm is always what

50
00:02:12.110 --> 00:02:14.480
I've used. Just realize both can be used.

51
00:02:14.510 --> 00:02:16.437
At this point, they more or less have most of the same

52
00:02:16.438 --> 00:02:19.039
features anyway. Whichever one you use, make sure that

53
00:02:19.040 --> 00:02:20.570
you're always cleaning up after yourself.

54
00:02:20.600 --> 00:02:23.449
Just like with apt-get package management, you need to make

55
00:02:23.450 --> 00:02:26.117
sure you do a clean. In this case, I'm doing an npm cache

56
00:02:26.390 --> 00:02:29.210
clean with a force to make sure it cleans everything off

57
00:02:29.510 --> 00:02:31.999
that's related to the caching, so that my image is as small

58
00:02:32.000 --> 00:02:34.940
as possible. The next one here is using

59
00:02:35.000 --> 00:02:37.310
Node in your cmd, not npm.

60
00:02:38.180 --> 00:02:40.336
And npm is sort of the default way we've all

61
00:02:41.360 --> 00:02:43.045
learned to launch programs in Node.

62
00:02:43.046 --> 00:02:45.937
It's very convenient, but in your Dockerfile, there's a few

63
00:02:46.160 --> 00:02:48.434
reasons to stick with Node and skip npm.

64
00:02:49.370 --> 00:02:51.281
One reason is that npm requires another

65
00:02:52.490 --> 00:02:53.449
application to run.

66
00:02:53.450 --> 00:02:56.047
So, in that Dockerfile, when you're running that as a

67
00:02:56.360 --> 00:02:58.516
container, now instead of just Node running,

68
00:02:59.450 --> 00:03:01.753
you now have npm running and Node will run as a

69
00:03:02.450 --> 00:03:05.329
subprocess. That's just the nature of one process launching

70
00:03:05.330 --> 00:03:08.025
another. That adds complexity and an unnecessary layer,

71
00:03:08.930 --> 00:03:11.030
or level, to our program running.

72
00:03:11.510 --> 00:03:13.568
Secondly, it's not as literal as I like to

73
00:03:14.600 --> 00:03:17.148
see it in Dockerfiles. I like Dockerfiles to tell me

74
00:03:17.330 --> 00:03:19.910
exactly what's going to happen when it launches.

75
00:03:20.330 --> 00:03:22.292
When I do something like npm start, then

76
00:03:23.330 --> 00:03:25.460
that means that really what's going to happen is in some

77
00:03:25.490 --> 00:03:27.482
other file that's not the Dockerfile.

78
00:03:27.890 --> 00:03:30.237
I would prefer that for these production Dockerfiles that

79
00:03:30.238 --> 00:03:32.835
we're talking about here, that we be very literal and

80
00:03:32.960 --> 00:03:35.259
specific about exactly what JavaScript file we're

81
00:03:35.260 --> 00:03:37.808
launching. Doing the Node command here gives us that

82
00:03:38.330 --> 00:03:41.510
feature. Lastly, npm doesn't

83
00:03:41.570 --> 00:03:43.579
work well as an init process. If you know

84
00:03:44.600 --> 00:03:47.540
a little bit about processes in Linux, you

85
00:03:47.570 --> 00:03:50.363
may know that there's always one main process that starts

86
00:03:50.840 --> 00:03:52.370
when Linux starts itself.

87
00:03:52.400 --> 00:03:53.968
This is true also in containers.

88
00:03:53.990 --> 00:03:56.587
There's always one, main process that everything else

89
00:03:56.660 --> 00:03:59.449
launches from. In a container, that's usually what we want

90
00:03:59.450 --> 00:04:00.500
to start in the cmd.

91
00:04:01.010 --> 00:04:02.820
We don't want to start something that then launches

92
00:04:02.840 --> 00:04:06.020
something else, and we get this sort of tree structure.

93
00:04:06.050 --> 00:04:08.843
One of the problems with npm currently is that it doesn't

94
00:04:09.230 --> 00:04:10.750
handle the signal termination.

95
00:04:10.760 --> 00:04:13.820
It doesn't pass signals correctly to Node.

96
00:04:14.570 --> 00:04:17.629
So it tends to just improperly shut down the container

97
00:04:17.630 --> 00:04:18.920
if we use npm here.

98
00:04:19.220 --> 00:04:22.399
Again, keeping Node as the main process is simpler

99
00:04:22.640 --> 00:04:25.430
and allows us to use direct signaling, as we'll learn later

100
00:04:25.490 --> 00:04:26.419
in this course.

101
00:04:26.420 --> 00:04:28.440
But for now, just know that we want to stick with Node.

102
00:04:28.990 --> 00:04:31.309
The last little tip I'm going to give you here is not

103
00:04:31.310 --> 00:04:32.810
necessarily a Node specific one.

104
00:04:33.020 --> 00:04:35.617
But, since we do tend to move around, as you'll learn

105
00:04:36.110 --> 00:04:38.756
through this course, with Node modules and copying our

106
00:04:39.020 --> 00:04:41.290
files in, we're going to be using workdir a lot.

107
00:04:41.330 --> 00:04:43.330
So, you shouldn't use cd or mkdir

108
00:04:44.510 --> 00:04:45.670
inside of your Dockerfile.

109
00:04:45.840 --> 00:04:48.050
You should really just use workdir, which does both.

110
00:04:48.320 --> 00:04:50.690
workdir will make a directory if it's not there.

111
00:04:51.170 --> 00:04:54.320
The one caveat is if you need specific permissions

112
00:04:54.500 --> 00:04:57.200
on a directory when it's created, a run

113
00:04:57.470 --> 00:05:00.580
mkdir might be better for you, and

114
00:05:00.720 --> 00:05:02.600
it's really sort of a one-off scenario.

115
00:05:03.110 --> 00:05:05.909
Usually, I don't have too many permissions when I'm dealing

116
00:05:05.910 --> 00:05:08.670
with Node because unlike some other programming languages,

117
00:05:08.730 --> 00:05:11.219
it seems to be pretty tolerant of the default permissions

118
00:05:11.220 --> 00:05:12.120
when you copy stuff in.

