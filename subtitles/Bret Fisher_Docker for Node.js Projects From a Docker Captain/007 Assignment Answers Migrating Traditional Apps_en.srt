1
00:00:02,730 --> 00:00:04,589
Hopefully you've spent some time working through the

2
00:00:04,590 --> 00:00:06,550
assignment, and you completed all of the

3
00:00:07,650 --> 00:00:09,930
objectives, the requirements and the outcomes.

4
00:00:10,260 --> 00:00:12,480
I want to do the same thing you did.

5
00:00:12,530 --> 00:00:15,149
Of course, like always, this is a little bit of an art

6
00:00:15,150 --> 00:00:17,370
form, so things might be slightly different.

7
00:00:17,490 --> 00:00:19,646
If you achieve the outcomes, then you finish

8
00:00:20,460 --> 00:00:22,649
the assignment, whether or not you did it exactly like I

9
00:00:22,650 --> 00:00:24,270
did, it's totally fine.

10
00:00:24,450 --> 00:00:26,759
Like most things in computers, there's more than one way to

11
00:00:26,760 --> 00:00:28,590
do it. Here I go.

12
00:00:28,680 --> 00:00:30,750
I'm in the assignment-mta directory.

13
00:00:31,200 --> 00:00:33,846
I can see here that they've given me this application.

14
00:00:34,650 --> 00:00:36,630
It's got a readme that I'm going to check out in a second.

15
00:00:36,660 --> 00:00:38,940
It's got a single index JavaScript file.

16
00:00:39,420 --> 00:00:42,209
It's got this in and out directory, a logs directory, and

17
00:00:42,210 --> 00:00:44,210
Node modules, and it's got the package file, right.

18
00:00:44,250 --> 00:00:47,370
So, I want to open up my Visual Studio code

19
00:00:47,430 --> 00:00:49,510
and go through these real quick.

20
00:00:49,530 --> 00:00:50,530
In the readme,

21
00:00:52,710 --> 00:00:55,454
I've got some things they sent me, you know, information

22
00:00:55,830 --> 00:00:57,960
in here about what it does.

23
00:00:58,110 --> 00:01:00,150
It pulls the things out of the in folder and then it

24
00:01:00,450 --> 00:01:03,092
changes them to a charcoal, or chalk, looking

25
00:01:04,140 --> 00:01:05,880
image, and then spits them in the out folder.

26
00:01:06,300 --> 00:01:08,064
It logs to two files in a directory,

27
00:01:09,630 --> 00:01:11,249
called the logs, which I definitely am going to have to

28
00:01:11,250 --> 00:01:13,100
change. It requires Node 8.

29
00:01:13,170 --> 00:01:14,541
No problem. We can do that with Docker.

30
00:01:14,850 --> 00:01:16,680
We can change the Node version real easy.

31
00:01:17,100 --> 00:01:20,220
It needs to have GraphicsMagick installed

32
00:01:20,310 --> 00:01:22,980
on the server, which is an interesting requirement.

33
00:01:23,010 --> 00:01:25,803
Obviously, there's other options in Node that you can not

34
00:01:25,860 --> 00:01:28,730
have to require other components outside of npm

35
00:01:29,280 --> 00:01:31,079
to do image manipulation, but I wanted to give you a

36
00:01:31,080 --> 00:01:33,670
real-world scenario of a Legacy app in this case.

37
00:01:34,080 --> 00:01:36,750
It requires an apt get install of GraphicsMagick.

38
00:01:37,470 --> 00:01:39,675
In this case, I'm going to choose the default

39
00:01:40,440 --> 00:01:41,670
Node Debian image.

40
00:01:42,110 --> 00:01:44,740
I'm going to do that because I need GraphicsMagick

41
00:01:45,120 --> 00:01:47,412
and instead of going and trying to find that in an Alpine

42
00:01:47,580 --> 00:01:49,561
image and see if I can find out how to download and install

43
00:01:49,562 --> 00:01:52,620
it in Alpine, I'm just going to stick to what this

44
00:01:52,770 --> 00:01:54,689
team has already been using in the past because they've

45
00:01:54,690 --> 00:01:57,042
clearly been using apt get, which is a Ubuntu or

46
00:01:57,810 --> 00:01:59,610
Debian type of install.

47
00:01:59,620 --> 00:02:01,619
So, don't necessarily need to change that.

48
00:02:01,620 --> 00:02:02,900
A lot of times with MTA apps.

49
00:02:02,910 --> 00:02:05,311
I don't want to upset the wheel cart too much and

50
00:02:05,760 --> 00:02:07,710
completely change everything in their workflow.

51
00:02:08,008 --> 00:02:10,289
I like to tell the developers, hey look, no it's running on

52
00:02:10,530 --> 00:02:13,029
the same OS distribution, or similar, than what you

53
00:02:13,560 --> 00:02:15,363
were using in the past so hey, no big deal.

54
00:02:15,364 --> 00:02:17,969
I know I need to create a couple files, so let me just do

55
00:02:17,970 --> 00:02:18,970
that first.

56
00:02:21,090 --> 00:02:22,090
Do the Dockerfile

57
00:02:24,680 --> 00:02:27,460
and the .ignore file.

58
00:02:28,810 --> 00:02:29,810
dockerignore.

59
00:02:34,190 --> 00:02:36,499
All right. In the requirements, it listed directories that

60
00:02:36,500 --> 00:02:37,720
I do not want in the image.

61
00:02:37,850 --> 00:02:40,400
Let me just go ahead and list those here so I know I

62
00:02:40,520 --> 00:02:43,340
definitely don't want the in, the out,

63
00:02:43,850 --> 00:02:47,050
the logs and

64
00:02:47,110 --> 00:02:48,310
the Node modules.

65
00:02:50,300 --> 00:02:52,249
We talked about in an earlier lecture, other things that

66
00:02:52,250 --> 00:02:54,945
you can put in this file, but I'm not going to focus on

67
00:02:55,040 --> 00:02:55,459
that.

68
00:02:55,460 --> 00:02:57,352
I just want to do exactly what the requirements gave me.

69
00:02:57,414 --> 00:03:00,305
That will ensure that those files never end up in the image

70
00:03:00,620 --> 00:03:03,290
because if I go poking around, I'll notice that there's

71
00:03:03,410 --> 00:03:05,930
already files in the in directory, and I don't want those

72
00:03:06,320 --> 00:03:08,569
accidentally stored in the image for no reason and create

73
00:03:08,570 --> 00:03:11,461
bloat. The idea here is this application is always designed

74
00:03:11,690 --> 00:03:14,119
to run with bind mounts so that it's always pulling stuff

75
00:03:14,120 --> 00:03:16,550
off the host, not from the image itself.

76
00:03:16,910 --> 00:03:18,065
All right. Let me go over to Dockerfile and we'll start

77
00:03:18,740 --> 00:03:19,740
there.

78
00:03:20,100 --> 00:03:21,100
I can do a

79
00:03:23,260 --> 00:03:25,730
from node:8. I might try a slim here.

80
00:03:25,760 --> 00:03:28,249
I could go look at Alpine, but each one of those would take

81
00:03:28,250 --> 00:03:30,949
more work and that's not necessarily what I'm required to

82
00:03:30,950 --> 00:03:33,694
do. It's sort of an upgrade, a bonus if you wanted to do

83
00:03:33,800 --> 00:03:36,020
that on your own to see if you could make that work.

84
00:03:37,480 --> 00:03:40,077
If we tried a node slim here, we might be able to get

85
00:03:40,540 --> 00:03:43,230
that to work, but a couple of things I'd have to check on.

86
00:03:43,240 --> 00:03:45,400
One is Version 8, since it's old.

87
00:03:45,430 --> 00:03:47,800
It may not even have a slim option on Docker Hub.

88
00:03:48,040 --> 00:03:50,170
I'd have to just try downloading that to see if it works.

89
00:03:50,590 --> 00:03:52,900
Secondly, I'd have to do an apt get install of

90
00:03:53,290 --> 00:03:56,500
GraphicsMagick, which may require more of the tooling

91
00:03:56,890 --> 00:03:59,210
that I need that's not in a slim image, right.

92
00:03:59,250 --> 00:04:01,994
A slim image in Node is ideal when you really don't need

93
00:04:02,320 --> 00:04:05,440
any outside packages and you don't need to build anything.

94
00:04:05,680 --> 00:04:08,229
You're just able to download packages that don't need

95
00:04:08,230 --> 00:04:11,121
binary builds. So I would need to test that and be a little

96
00:04:11,350 --> 00:04:13,604
bit more thorough with what exactly it's doing

97
00:04:14,710 --> 00:04:15,710
and working on.

98
00:04:15,790 --> 00:04:17,370
I'm not going to do that here.

99
00:04:17,380 --> 00:04:19,738
I'm just going to start with the simple image, node 8.

100
00:04:20,980 --> 00:04:23,436
I know down here, somewhere, I need to do a cmd,

101
00:04:24,460 --> 00:04:27,010
and I'm going to have to do some copying in some code.

102
00:04:27,510 --> 00:04:30,310
I'm just going to do that. I'm going to do the typical

103
00:04:30,820 --> 00:04:32,880
copy in of the package,

104
00:04:34,790 --> 00:04:37,219
like this, like we've talked about before, packaging, and

105
00:04:37,220 --> 00:04:40,550
then doing the run npm install

106
00:04:41,390 --> 00:04:42,390
in here.

107
00:04:42,790 --> 00:04:44,046
Then we'll have to do some clean up.

108
00:04:44,150 --> 00:04:46,429
Obviously, do the npm install and then the clean

109
00:04:46,430 --> 00:04:47,430
afterwards.

110
00:04:48,260 --> 00:04:49,729
I have to go look that up because I don't always remember

111
00:04:49,730 --> 00:04:50,990
it off the top of my head.

112
00:04:51,350 --> 00:04:53,520
I believe it's something like npm

113
00:04:54,380 --> 00:04:56,040
cache clean force.

114
00:04:56,170 --> 00:04:59,060
We'll check that, see if my memory serves.

115
00:05:02,050 --> 00:05:04,402
Then I know I need to put in here, somewhere, an

116
00:05:05,020 --> 00:05:07,179
environment variable, because I know in the requirements,

117
00:05:07,180 --> 00:05:08,740
it talked about charcoal factor.

118
00:05:09,280 --> 00:05:11,093
So let me...so this is an interesting

119
00:05:12,610 --> 00:05:14,011
debate. Like, where to put the env, right.

120
00:05:14,680 --> 00:05:16,591
I could put it all at the top, and that

121
00:05:17,650 --> 00:05:20,860
way, it would not need to be

122
00:05:20,890 --> 00:05:22,262
added every time after copy.

123
00:05:22,330 --> 00:05:24,879
Because if I put it down at the bottom, in theory, if it

124
00:05:24,880 --> 00:05:27,159
changed, right, if I put it up here, I need to go change

125
00:05:27,160 --> 00:05:28,780
the hard-coded value later.

126
00:05:29,260 --> 00:05:31,661
Then it would require rebuilding the entire image

127
00:05:32,470 --> 00:05:34,410
cache, and every line here would be busted, so that would

128
00:05:34,480 --> 00:05:36,820
slow it down. I, maybe, put it down here at the bottom.

129
00:05:37,150 --> 00:05:38,920
It would be for quick builds.

130
00:05:39,430 --> 00:05:41,779
Don't really see any downside to that, so let me just do

131
00:05:41,780 --> 00:05:44,744
env, and what did

132
00:05:44,930 --> 00:05:47,030
the documentation say? It said charcoal factor.

133
00:05:51,759 --> 00:05:54,097
It said to do a default of 0.1.

134
00:05:55,260 --> 00:05:58,230
The way I know that is you

135
00:05:58,240 --> 00:05:59,950
just poke your head in the index here.

136
00:06:00,580 --> 00:06:03,520
It says here these are the variables for the application.

137
00:06:04,210 --> 00:06:06,310
You know if you're a Node person, you know that this

138
00:06:06,430 --> 00:06:09,223
probably should be a const nowadays, but back in the day,

139
00:06:09,280 --> 00:06:11,790
we all wrote variables, so this is a Legacy app.

140
00:06:11,830 --> 00:06:12,960
So, it would be a var, not a const.

141
00:06:13,330 --> 00:06:15,486
No big deal, but I actually see that we have

142
00:06:16,300 --> 00:06:17,300
a const down here.

143
00:06:17,830 --> 00:06:19,120
So, clearly that must work.

144
00:06:19,690 --> 00:06:20,950
Bad example, I suppose.

145
00:06:21,220 --> 00:06:24,026
Anyway, getting back to this, ideally point...0.1

146
00:06:25,590 --> 00:06:27,160
so I'm going to stick with as the default.

147
00:06:27,610 --> 00:06:30,039
The idea here is that I can override it at any time, right.

148
00:06:30,040 --> 00:06:32,229
At the command line with docker run, I can override this

149
00:06:32,230 --> 00:06:35,200
environment variable at runtime, and then the app will run

150
00:06:35,650 --> 00:06:37,752
with that environment variable. I have to put it in my JSON

151
00:06:38,170 --> 00:06:39,400
syntax, node.

152
00:06:41,000 --> 00:06:43,590
And the file, it looks like it needs to run as index.js.

153
00:06:44,510 --> 00:06:47,680
So, I'm going to do that.

154
00:06:51,240 --> 00:06:53,970
Let's see. I know that the requirements in the

155
00:06:54,270 --> 00:06:57,120
readme said I have to do this apt get install

156
00:06:57,600 --> 00:06:58,600
GraphicsMagick.

157
00:06:59,060 --> 00:07:01,490
So, let me just copy that.

158
00:07:04,420 --> 00:07:06,940
I'm going to just put that in a run line,

159
00:07:07,620 --> 00:07:09,729
and you know this is one of those things where when you're

160
00:07:09,730 --> 00:07:10,928
building Dockerfiles like this, run,

161
00:07:17,050 --> 00:07:19,599
I'm not going to worry about cleaning things up and being

162
00:07:19,600 --> 00:07:22,630
super tidy in my first run through because I

163
00:07:22,660 --> 00:07:24,669
really just want to get it working first.

164
00:07:24,700 --> 00:07:27,600
Then I can worry about all the little things around cleanup

165
00:07:27,670 --> 00:07:29,746
and whatnot. I know I need to do an apt get update,

166
00:07:32,690 --> 00:07:34,250
and then an apt get install.

167
00:07:38,080 --> 00:07:40,190
All right. So, we're getting there.

168
00:07:40,720 --> 00:07:43,240
I've got my dockerignore. I've got the basics of a

169
00:07:43,630 --> 00:07:45,250
Dockerfile that I should be able to build.

170
00:07:45,580 --> 00:07:47,919
I know I need do something about logging, so let me just go

171
00:07:47,920 --> 00:07:49,350
check on the index file.

172
00:07:50,260 --> 00:07:52,857
I see this is where the Winston logger is created and

173
00:07:53,290 --> 00:07:55,887
I can see down here that this documentation and stuff

174
00:07:56,500 --> 00:07:59,040
talks about a transport to a file.

175
00:07:59,050 --> 00:08:01,507
I can see the file name here of error and combined.

176
00:08:01,720 --> 00:08:04,350
So, we definitely don't want that in a Docker container,

177
00:08:04,360 --> 00:08:07,030
right. We want to get the transport to be console.

178
00:08:07,360 --> 00:08:08,740
In fact, that's a tip I gave you.

179
00:08:09,580 --> 00:08:11,600
I'm just going to pull up my browser real quick.

180
00:08:12,690 --> 00:08:14,640
I'm just gonna search Winston

181
00:08:16,840 --> 00:08:17,840
node.js,

182
00:08:19,820 --> 00:08:23,000
and I should find the

183
00:08:23,870 --> 00:08:26,509
npm package, which you can go there and then I'll take you

184
00:08:26,510 --> 00:08:28,000
to the GitHub repo.

185
00:08:30,800 --> 00:08:32,662
If I get down here, I can see the home

186
00:08:33,890 --> 00:08:36,095
page on GitHub, the repository over there, so

187
00:08:36,860 --> 00:08:38,120
I get the repository.

188
00:08:38,929 --> 00:08:41,780
In here, I can search for

189
00:08:41,990 --> 00:08:45,560
that tip I gave you inside the slide, which is Winston

190
00:08:47,260 --> 00:08:48,260
transports console.

191
00:08:51,310 --> 00:08:52,878
It looks like here is an example

192
00:08:54,910 --> 00:08:55,910
of how to use that.

193
00:08:57,190 --> 00:08:59,560
I could possibly

194
00:09:00,510 --> 00:09:02,520
just have these commented out.

195
00:09:02,550 --> 00:09:05,189
Looks like I could try this, so I'm just going to give this

196
00:09:05,190 --> 00:09:07,101
a shot by copying and pasting it in and

197
00:09:08,160 --> 00:09:09,540
seeing if that helps.

198
00:09:12,370 --> 00:09:14,516
I'm going to comment out these other two.

199
00:09:19,160 --> 00:09:20,200
Comment those out.

200
00:09:23,320 --> 00:09:24,530
Copy that in.

201
00:09:25,910 --> 00:09:28,930
It looks like I have a redundant format here where I maybe

202
00:09:28,940 --> 00:09:30,409
could pull that out, but I really just want to see if I can

203
00:09:30,410 --> 00:09:32,780
get it working. You know, the formats up here, and

204
00:09:33,500 --> 00:09:34,786
this is repeated down here.

205
00:09:34,880 --> 00:09:37,069
I could probably get rid of that, or one of them, or

206
00:09:37,070 --> 00:09:39,490
something. But really, I'm just trying to get it working,

207
00:09:39,500 --> 00:09:41,313
right. I've changed that to make sure

208
00:09:42,470 --> 00:09:44,060
that it's going to the console.

209
00:09:44,660 --> 00:09:47,330
Let's do a build. I'm going to type docker

210
00:09:47,870 --> 00:09:51,020
build. I'm just going to call it mta for now.

211
00:09:52,320 --> 00:09:53,570
Let's see if it happens.

212
00:09:55,260 --> 00:09:58,352
OK, so it looks like it built successfully on my first try,

213
00:09:58,433 --> 00:10:00,190
which is amazing.

214
00:10:00,530 --> 00:10:02,833
It got all the way through the different steps.

215
00:10:03,410 --> 00:10:05,120
It copied in. It set the environment variable.

216
00:10:05,121 --> 00:10:06,591
Let's just run it and see what

217
00:10:08,090 --> 00:10:09,090
happens.

218
00:10:16,660 --> 00:10:18,730
I got an error on the first run.

219
00:10:18,940 --> 00:10:22,660
And that reminds me that I need to do volumes

220
00:10:22,690 --> 00:10:25,390
for the in and out, right. If I go look at my outcomes,

221
00:10:25,720 --> 00:10:28,089
one of the requirements is running with bind mounts on the

222
00:10:28,090 --> 00:10:30,932
in and out directories, so I'd need to do it with multiple

223
00:10:31,480 --> 00:10:34,029
bind mounts. Let me jump in the container real quick and

224
00:10:34,030 --> 00:10:35,500
just see what's there.

225
00:10:35,880 --> 00:10:38,400
This is something I like to do even when I don't run it.

226
00:10:38,440 --> 00:10:40,179
I just want to run it with a Bash shell.

227
00:10:40,180 --> 00:10:42,732
I could do a docker run -it mta

228
00:10:43,750 --> 00:10:45,880
bash because this is a Debian image.

229
00:10:47,140 --> 00:10:49,120
I could get in there, and I could simply look around,

230
00:10:49,450 --> 00:10:52,145
right. The first thing you'll notice is that I'm in the

231
00:10:52,270 --> 00:10:55,150
root of the image, and I've got all my

232
00:10:55,300 --> 00:10:57,759
packages, and my Node modules, and everything is at the

233
00:10:57,760 --> 00:10:57,999
root.

234
00:10:58,000 --> 00:11:00,489
That's not what I wanted, so that means that I forgot a

235
00:11:00,490 --> 00:11:03,070
line. Let me go back to the file

236
00:11:03,550 --> 00:11:05,992
and change in the Dockerfile

237
00:11:06,940 --> 00:11:09,359
up here, I need to add a workdir.

238
00:11:11,480 --> 00:11:14,500
I can just do app here if I wanted to for now,

239
00:11:14,920 --> 00:11:16,540
and put everything in there.

240
00:11:16,790 --> 00:11:19,659
That'll keep it cleaner and help me understand what's going

241
00:11:19,660 --> 00:11:21,879
on later so that it's not mixed in with the operating

242
00:11:21,880 --> 00:11:24,190
system files, right. Let me exit out of that.

243
00:11:24,790 --> 00:11:26,598
I'm just going to hit my up arrow, and rebuild.

244
00:11:26,599 --> 00:11:27,599
Then

245
00:11:35,940 --> 00:11:36,940
I'm going to run again with

246
00:11:39,570 --> 00:11:41,360
the bash and the -it.

247
00:11:42,000 --> 00:11:43,709
Now, you can see I'm in the app directory.

248
00:11:43,710 --> 00:11:46,013
If I do an ls in there, I can see all my stuff.

249
00:11:46,800 --> 00:11:49,500
I definitely see things, like I don't see the in and out

250
00:11:49,530 --> 00:11:51,000
directories, which is fantastic.

251
00:11:51,210 --> 00:11:53,970
That's the reason I got the error a while ago was the in

252
00:11:54,150 --> 00:11:56,459
path doesn't exist inside here because I use the

253
00:11:56,460 --> 00:11:57,740
dockerignore. So that's great.

254
00:11:57,750 --> 00:12:00,320
The out isn't in here. Those GIFs aren't in here.

255
00:12:00,570 --> 00:12:02,060
The Node modules does exist.

256
00:12:02,070 --> 00:12:05,100
It's in here. If I just did an ls on node modules,

257
00:12:05,520 --> 00:12:07,109
I could see that all my dependencies are there.

258
00:12:07,110 --> 00:12:10,200
This looks like it's a legit app.

259
00:12:10,260 --> 00:12:12,753
You could argue that maybe you don't want the readme and

260
00:12:12,754 --> 00:12:15,029
the Dockerfile in there because they're not necessary in

261
00:12:15,030 --> 00:12:17,699
the container. But, as I said in previous lectures, there's

262
00:12:17,700 --> 00:12:19,589
pros and cons to that. Sometimes, I just like the

263
00:12:19,590 --> 00:12:22,481
documentation, including the Dockerfile, to be in the image

264
00:12:22,860 --> 00:12:25,457
so that I can look at them without having to go refer

265
00:12:25,920 --> 00:12:27,600
to the history command. Stuff like that.

266
00:12:27,684 --> 00:12:30,770
Let's do the docker run again and

267
00:12:30,930 --> 00:12:32,729
this time, I'm going to bind mount the in and the out

268
00:12:32,730 --> 00:12:35,621
directories. If I look at this directory I'm in, I have the

269
00:12:35,730 --> 00:12:38,129
in and out's here. I really want to use them in the

270
00:12:38,130 --> 00:12:39,810
container like the directions specified.

271
00:12:39,840 --> 00:12:42,633
I would do a docker run, and I could use the short syntax

272
00:12:42,900 --> 00:12:45,448
of -v. I could also use the longer syntax of --mount

273
00:12:46,200 --> 00:12:49,830
if I wanted to. Let me just do the working directory

274
00:12:49,860 --> 00:12:50,860
and then in.

275
00:12:51,132 --> 00:12:54,570
Okay, so you see how I did that with the host directory.

276
00:12:54,900 --> 00:12:57,750
Then app in

277
00:12:58,470 --> 00:13:00,471
inside the container. And the way that I know that that's

278
00:13:00,720 --> 00:13:02,939
where I need to put it in the container is when I look at

279
00:13:02,940 --> 00:13:06,030
the app, it's setting in and out directory variables

280
00:13:06,390 --> 00:13:08,497
that are just like the Node app on my host,

281
00:13:09,540 --> 00:13:12,570
right. It expects those files to be in those directories in

282
00:13:12,640 --> 00:13:13,640
there.

283
00:13:14,180 --> 00:13:16,340
So, I put that there, and then I could do it again for the

284
00:13:16,370 --> 00:13:17,370
out directory.

285
00:13:24,800 --> 00:13:25,940
OK. I've got those two.

286
00:13:26,120 --> 00:13:27,919
I don't need to worry about the logs because that should be

287
00:13:27,920 --> 00:13:30,589
coming into the output of the console because we've changed

288
00:13:30,590 --> 00:13:31,700
Winston at this point.

289
00:13:32,050 --> 00:13:33,146
Then I should just be able to do mta.

290
00:13:33,560 --> 00:13:34,560
Let's see what happens.

291
00:13:37,090 --> 00:13:39,932
Oooh. We have the Winston info now coming out the console.

292
00:13:40,350 --> 00:13:41,350
That's great.

293
00:13:42,230 --> 00:13:44,449
I could use a docker logs command on this, later, and it

294
00:13:44,450 --> 00:13:45,800
would see those logs.

295
00:13:46,130 --> 00:13:48,776
All right. It looks like it has outputted those files,

296
00:13:49,340 --> 00:13:52,400
so if I come up here and I look.

297
00:13:52,450 --> 00:13:54,602
Yep. Indeed, those are there.

298
00:13:56,250 --> 00:13:59,730
Let me open one up in my Chrome

299
00:13:59,790 --> 00:14:00,599
browser.

300
00:14:00,600 --> 00:14:02,903
See if I can't get this over here and then drag

301
00:14:03,870 --> 00:14:05,648
one. That's kind of the easiest way for me to do that.

302
00:14:05,649 --> 00:14:06,649
There we go.

303
00:14:07,110 --> 00:14:09,690
That was one of our outcomes.

304
00:14:09,720 --> 00:14:12,317
We wanted these images to look like...and if you were

305
00:14:12,690 --> 00:14:15,239
just curious, you could actually go back and open up the

306
00:14:15,240 --> 00:14:17,159
originals, and they look like the original giffys from a

307
00:14:17,160 --> 00:14:20,090
previous lecture. You'll notice this giffy's

308
00:14:20,400 --> 00:14:21,750
got nice, thin lines.

309
00:14:22,110 --> 00:14:24,707
If I did that same docker run command, but then I did

310
00:14:25,200 --> 00:14:28,080
a --env, and we

311
00:14:28,500 --> 00:14:29,500
typed in that charcoal factor.

312
00:14:35,610 --> 00:14:36,610
The default was 0.1.

313
00:14:37,740 --> 00:14:39,580
If I changed it to 10.

314
00:14:40,470 --> 00:14:43,050
If I bothered reading the documentation of the

315
00:14:43,650 --> 00:14:46,394
GraphicsMagick, I'd learn that that really just thickens

316
00:14:46,470 --> 00:14:49,220
the lines, but that's not necessarily part of this lecture.

317
00:14:49,240 --> 00:14:51,270
We just needed to change it and get a difference.

318
00:14:51,690 --> 00:14:53,220
So, this will rerun it.

319
00:14:53,400 --> 00:14:56,291
It will take the same files and it will overwrite the files

320
00:14:56,370 --> 00:14:57,370
that I'm running.

321
00:14:59,890 --> 00:15:02,650
All right. Let me go back and check those

322
00:15:03,400 --> 00:15:04,989
files again. Oh, and look it's different.

323
00:15:04,990 --> 00:15:07,538
It's got thicker lines, and it did basically what we

324
00:15:08,020 --> 00:15:10,813
expected. We changed the environment variable so when the

325
00:15:10,960 --> 00:15:14,080
application ran, Node pulled that in and it caught

326
00:15:14,230 --> 00:15:15,290
that environment variable. So, great.

327
00:15:15,490 --> 00:15:18,610
If you look at our outcomes, we have the first one,

328
00:15:18,730 --> 00:15:21,621
which was the in and the out directories being bind mounted

329
00:15:21,750 --> 00:15:24,543
in so that it changes them and pulls those in at runtime,

330
00:15:24,760 --> 00:15:26,340
and then spits them back out to the host, right.

331
00:15:26,350 --> 00:15:27,520
That was one of the outcomes.

332
00:15:27,730 --> 00:15:29,680
Second one was that if we change the environment variable

333
00:15:29,740 --> 00:15:32,239
at runtime, does it change the output of the image?

334
00:15:32,421 --> 00:15:34,990
And that's working here, so that's the second one.

335
00:15:35,350 --> 00:15:37,653
No GIFs, or JIFS, depending on how you sit with

336
00:15:38,320 --> 00:15:39,320
that camp.

337
00:15:39,670 --> 00:15:40,670
GIFs or JIFs.

338
00:15:41,110 --> 00:15:42,579
None of those files are in the image and if you remember,

339
00:15:42,580 --> 00:15:44,049
we looked around in there and there and there's none of

340
00:15:44,050 --> 00:15:45,969
those in that image. There's no directories, in fact, of

341
00:15:45,970 --> 00:15:47,250
the in and the out because of our dockerignore.

342
00:15:48,280 --> 00:15:51,550
The fourth one was Docker logs shows Winston output.

343
00:15:51,970 --> 00:15:54,699
Because I'm running this command and it's quitting, I'm not

344
00:15:54,700 --> 00:15:57,670
naming this, so I could run it as a name,

345
00:15:57,820 --> 00:15:59,437
or I could just do a docker ps -l

346
00:16:00,820 --> 00:16:03,940
which shows me the last container that ran.

347
00:16:04,940 --> 00:16:07,292
That's a little tip. That -l would give me that.

348
00:16:07,409 --> 00:16:09,690
So, then I could do a docker logs a11.

349
00:16:10,770 --> 00:16:12,120
There we go.

350
00:16:12,330 --> 00:16:14,789
I'm seeing the log output which means that Winston did what

351
00:16:14,790 --> 00:16:15,930
I hoped it would do.

352
00:16:16,200 --> 00:16:18,540
From here, you could do all sorts of stuff, right.

353
00:16:18,570 --> 00:16:20,849
You could maybe set the other variables to environment

354
00:16:20,850 --> 00:16:22,910
variables so that they could change in the Dockerfile if

355
00:16:22,920 --> 00:16:25,200
you needed them. Not sure that's really necessary.

356
00:16:25,530 --> 00:16:28,740
You could go into the file and clean up after

357
00:16:29,010 --> 00:16:30,780
you did the apt get install.

358
00:16:30,810 --> 00:16:32,969
That's definitely a way, like we talked in previous

359
00:16:32,970 --> 00:16:35,100
sections, to make the image smaller.

360
00:16:35,430 --> 00:16:38,910
You could try going to Alpine or into Node slim

361
00:16:39,090 --> 00:16:41,460
to see if you can strength the image up that way.

362
00:16:41,820 --> 00:16:43,199
There's lots of things you can do here, right.

363
00:16:43,200 --> 00:16:45,719
You could go in and maybe clean up that Winston line to see

364
00:16:45,720 --> 00:16:49,140
the redundancy that we saw in there with the Winston

365
00:16:49,190 --> 00:16:50,190
logger setup.

366
00:16:50,910 --> 00:16:52,680
You can even change, with Winston,

367
00:16:52,890 --> 00:16:56,130
the format of the logs coming out and change them into

368
00:16:56,340 --> 00:16:59,220
what you need, maybe on your logging system through Docker.

369
00:17:00,030 --> 00:17:02,909
I don't actually do that, though, because Docker itself can

370
00:17:02,910 --> 00:17:05,720
change the log output it provides to JSON

371
00:17:06,118 --> 00:17:09,270
and other file formats with Docker logging drivers.

372
00:17:09,630 --> 00:17:11,338
So, I don't really need to do that in Winston.

373
00:17:11,339 --> 00:17:14,181
I always like just the application itself to just pump out

374
00:17:14,339 --> 00:17:16,285
generic logging, and I can do the rest in Docker.

375
00:17:17,130 --> 00:17:19,138
I hope you've enjoyed this assignment and

376
00:17:20,190 --> 00:17:21,240
it made sense to you.

377
00:17:21,900 --> 00:17:24,599
If you had a stumbling block, don't worry, because we

378
00:17:24,690 --> 00:17:26,729
wanted to really focus on the Docker part of this, not so

379
00:17:26,730 --> 00:17:27,810
much the Node stuff.

380
00:17:28,108 --> 00:17:30,810
This is definitely something I'm doing all the time

381
00:17:31,110 --> 00:17:33,509
when there are Node apps, or really any other app, that

382
00:17:33,510 --> 00:17:36,009
needs to migrate, it's usually changing environment

383
00:17:36,600 --> 00:17:38,729
variables. That's a big thing. Making sure that the app

384
00:17:38,730 --> 00:17:40,886
works. It's making sure the dependencies for

385
00:17:41,700 --> 00:17:43,410
the app are properly done in the Dockerfile.

386
00:17:44,040 --> 00:17:46,529
Making sure the dockerignore is set up so that nothing gets

387
00:17:46,530 --> 00:17:49,274
in there that shouldn't be, and that the app is flexible

388
00:17:49,320 --> 00:17:51,930
enough with the right base image that it can run anywhere.

389
00:17:52,380 --> 00:17:54,570
These are things that I'm doing always in projects and

390
00:17:54,600 --> 00:17:56,050
you'll probably do those as well.

