WEBVTT
1
00:00:02.840 --> 00:00:05.809
Welcome to my first assignment in this course.

2
00:00:05.810 --> 00:00:07.780
If you're new to my courses

3
00:00:08.060 --> 00:00:09.889
and you haven't taken one of my assignments before,

4
00:00:09.890 --> 00:00:11.239
they're a little bit free form

5
00:00:11.240 --> 00:00:14.239
and they're meant to reinforce the stuff you just learned
in the last few

6
00:00:14.240 --> 00:00:16.909
lectures. This is a little bit like my other courses,

7
00:00:16.910 --> 00:00:20.029
where this assignment has it's answer after that

8
00:00:20.030 --> 00:00:22.750
in a video where I do the same steps you're going to do

9
00:00:22.820 --> 00:00:24.169
and I talk a little, out loud,

10
00:00:24.170 --> 00:00:26.290
about why I chose the things I did.

11
00:00:26.450 --> 00:00:28.099
Please don't watch that video first.

12
00:00:28.100 --> 00:00:30.499
I think it's much better for learning

13
00:00:30.500 --> 00:00:33.229
and retaining the knowledge to put your hands on

14
00:00:33.230 --> 00:00:35.230
and try to solve the problems yourself,

15
00:00:35.240 --> 00:00:36.829
and understanding why you're doing it

16
00:00:36.830 --> 00:00:38.440
and think through the issues,

17
00:00:38.540 --> 00:00:40.039
and learn the thing as you go,

18
00:00:40.040 --> 00:00:43.120
and then see my assignment answer after.

19
00:00:43.190 --> 00:00:45.319
And maybe see why yours is a little bit different than
mine,

20
00:00:45.320 --> 00:00:46.960
or how you maybe did it a little different,

21
00:00:47.150 --> 00:00:48.700
and hopefully that will help.

22
00:00:50.250 --> 00:00:53.249
Though in this assignment, you're just going to be using
the Compose

23
00:00:53.250 --> 00:00:56.339
commands you just learned on a simple app that

24
00:00:56.340 --> 00:00:58.289
you actually might recognize from Docker Mastery,

25
00:00:58.290 --> 00:00:59.540
if you've taken that course.

26
00:00:59.860 --> 00:01:03.350
In there, I had a simple node app using the Express
framework.

27
00:01:03.450 --> 00:01:05.366
Here,you're going to be in the sample -O2

28
00:01:06.540 --> 00:01:07.979
directory. In there,

29
00:01:07.980 --> 00:01:09.299
you can do an up command,

30
00:01:09.300 --> 00:01:11.600
which is the typical thing you do at the beginning of the
day.

31
00:01:11.730 --> 00:01:13.319
Then you might control c out of that,

32
00:01:13.320 --> 00:01:16.649
which is similar to stop. Then you might do a down

33
00:01:16.650 --> 00:01:18.389
because it'll take everything down

34
00:01:18.390 --> 00:01:19.829
and you'll do a sort of a fresh start up,

35
00:01:19.830 --> 00:01:21.749
and then you'll use the detached mode

36
00:01:21.750 --> 00:01:24.719
with -d. You might use a log command to

37
00:01:24.720 --> 00:01:26.090
look at all the logs.

38
00:01:26.220 --> 00:01:29.519
Then, I'd like you to use exec to shell into the container

39
00:01:29.520 --> 00:01:32.939
while it's running and try to run cURL localhost.

40
00:01:32.940 --> 00:01:34.679
You'll find that cURL is not installed.

41
00:01:34.680 --> 00:01:37.649
You could just do an Alpine

42
00:01:37.650 --> 00:01:40.210
package install right there in the container,

43
00:01:40.350 --> 00:01:42.579
but I'd rather you back out,

44
00:01:42.580 --> 00:01:45.599
in this case, and edit the Dockerfile because I want you to
see how

45
00:01:45.600 --> 00:01:47.280
the build workflow works.

46
00:01:47.460 --> 00:01:49.164
That is, you're going to edit the Dockerfile

47
00:01:49.380 --> 00:01:51.200
and then do another docker compose up,

48
00:01:51.300 --> 00:01:54.329
and you'll realize that it doesn't rebuild the image
because

49
00:01:54.330 --> 00:01:55.979
you've already built the images.

50
00:01:55.980 --> 00:01:59.090
That's the thing I want to make the point there on is the
--build,

51
00:02:00.270 --> 00:02:02.429
or doing an entire docker compose build,

52
00:02:02.430 --> 00:02:04.610
one of the two, essentially is required,

53
00:02:04.710 --> 00:02:07.430
in order to make sure that Docker Compose builds the
images.

54
00:02:07.530 --> 00:02:10.739
You may not always want to build images every single

55
00:02:10.740 --> 00:02:13.859
time, and we'll see throughout this course cases where you
might want

56
00:02:13.860 --> 00:02:15.710
to do it and might not need to build.

57
00:02:15.810 --> 00:02:18.483
Ideally, you're not having to rebuild constantly on every
change,

58
00:02:18.484 --> 00:02:21.190
right. We're going to talk about that in future lectures.

59
00:02:21.270 --> 00:02:24.209
For now, I just want you to see Docker Compose in a typical
workflow

60
00:02:24.210 --> 00:02:27.080
and how you need to sometimes use build to make a new
image.

61
00:02:27.180 --> 00:02:29.345
That way, when you do the next docker compose up,

62
00:02:29.550 --> 00:02:30.140
you'll have cURL installed

63
00:02:30.870 --> 00:02:31.750
and you can check it.

64
00:02:32.660 --> 00:02:35.629
Remember to clean up. Run this command to shut everything
down

65
00:02:35.630 --> 00:02:36.440
and clean up when you're done.

