1
00:00:02,550 --> 00:00:05,669
In this lecture, I want to focus on the features

2
00:00:05,869 --> 00:00:08,820
that you need to have in your Node app just to make sure

3
00:00:09,020 --> 00:00:11,337
that it's going to work well in Docker.

4
00:00:11,537 --> 00:00:13,050
More importantly,

5
00:00:13,440 --> 00:00:14,670
in cloud systems

6
00:00:14,870 --> 00:00:16,379
and distributed systems.

7
00:00:16,580 --> 00:00:19,440
Whether or not you're specifically deploying this in the cloud

8
00:00:19,650 --> 00:00:22,649
is not as important as the fact that many of the principles that

9
00:00:22,849 --> 00:00:25,889
Docker adheres to are also those for distributed

10
00:00:26,089 --> 00:00:26,697
applications.

11
00:00:27,750 --> 00:00:30,839
I want to highlight a few that you need to make sure that your

12
00:00:31,039 --> 00:00:33,959
apps are considering when you're planning on deploying them

13
00:00:34,159 --> 00:00:37,080
in containers. Most of the things in this section

14
00:00:37,280 --> 00:00:39,730
are related to a 12-factor app.

15
00:00:39,930 --> 00:00:41,340
But before we get into that,

16
00:00:41,540 --> 00:00:44,729
let me just list a few of what the things are

17
00:00:44,929 --> 00:00:45,930
that you will be working through.

18
00:00:46,620 --> 00:00:48,689
The first one that we've definitely mentioned a few times,

19
00:00:48,889 --> 00:00:50,640
and we'll continue to talk about throughout this course,

20
00:00:50,840 --> 00:00:53,610
is using environment variables for defining

21
00:00:53,810 --> 00:00:56,472
your environment configuration in your Dockerfile,

22
00:00:56,970 --> 00:00:58,410
in your Compose files,

23
00:00:58,770 --> 00:00:59,731
and also in your APT.

24
00:01:00,240 --> 00:01:03,570
You've got to have it in all those different levels for the various types

25
00:01:03,770 --> 00:01:05,519
and ways you're going to deploy your containers.

26
00:01:06,120 --> 00:01:08,763
Another one is again ensuring that you're logging to stdout

27
00:01:10,110 --> 00:01:10,206
and stderr.

28
00:01:10,770 --> 00:01:13,170
We'll look at that in a specific lecture in a little bit,

29
00:01:13,440 --> 00:01:15,750
but that's also another 12-factor principle.

30
00:01:16,820 --> 00:01:19,610
And of course, pinning your versions of your application,

31
00:01:19,810 --> 00:01:21,379
and your from images are common,

32
00:01:21,579 --> 00:01:24,499
and we've talked about that, but also if you install anything

33
00:01:24,699 --> 00:01:25,467
else in there, whether it's apt-get

34
00:01:25,940 --> 00:01:29,239
or even if you do an npm global install of something

35
00:01:29,439 --> 00:01:32,660
like nodemon, you want to make sure you're pinning those versions as well.

36
00:01:32,860 --> 00:01:35,012
Even if you're hard coding those versions into the Dockerfile

37
00:01:35,360 --> 00:01:38,359
with an npm install command, you just want to make sure that

38
00:01:38,559 --> 00:01:41,329
basically for production, everything is a known

39
00:01:41,529 --> 00:01:43,819
version and that two different builds of the image,

40
00:01:44,019 --> 00:01:44,930
on two different days,

41
00:01:45,170 --> 00:01:48,620
doesn't accidentally get different applications.

42
00:01:48,920 --> 00:01:50,210
Like we've mentioned before,

43
00:01:50,410 --> 00:01:51,757
making sure that your sigterm sigint,

44
00:01:52,430 --> 00:01:54,709
these are something that we'll talk about in a second

45
00:01:54,909 --> 00:01:57,379
with 12-factor. These are all common things that cloud

46
00:01:57,579 --> 00:01:58,880
and distributed apps need to have.

47
00:01:59,450 --> 00:02:01,277
They're also something that may be out-of-the-box

48
00:02:01,790 --> 00:02:03,284
with Node app you don't get

49
00:02:03,484 --> 00:02:05,450
and you need to make sure that you're paying attention to.

50
00:02:06,940 --> 00:02:09,096
The last one here that I just want to mention is a .dockerignore

51
00:02:10,750 --> 00:02:13,959
file. We'll talk about that in a lecture here in a few minutes as well,

52
00:02:14,159 --> 00:02:15,580
about what that is and how to create it.

53
00:02:16,050 --> 00:02:18,100
But before we get into all the details of all that stuff,

54
00:02:18,300 --> 00:02:20,860
let's just focus on what a 12-factor app is.

55
00:02:21,100 --> 00:02:22,832
And 12-factor is a website,

56
00:02:23,260 --> 00:02:26,440
as well as a set of 12 principles

57
00:02:26,680 --> 00:02:29,370
that were created by the creators of Heroku,

58
00:02:29,570 --> 00:02:32,110
the team that built part of the Heroku system,

59
00:02:32,380 --> 00:02:35,344
which is a cloud PaaS for platform-based

60
00:02:36,640 --> 00:02:39,730
deployment of applications. It was actually around before Docker.

61
00:02:40,000 --> 00:02:42,864
In fact, Docker the original company before they were known as Docker,

62
00:02:43,064 --> 00:02:45,610
they were called DotCloud.They were

63
00:02:45,940 --> 00:02:48,310
building a competitive system to Heroku.

64
00:02:48,510 --> 00:02:51,399
So if you can imagine their mindset about how to

65
00:02:51,599 --> 00:02:54,579
create this competitive landscape of something against

66
00:02:54,779 --> 00:02:57,386
Heroku. And then they ended up just giving it all away

67
00:02:58,120 --> 00:02:59,800
as an open source tool called Docker.

68
00:03:00,070 --> 00:03:03,339
And then they created a new company around that to sell Enterprise versions

69
00:03:03,539 --> 00:03:06,279
and all the tooling around Docker. So you can see that Heroku

70
00:03:06,479 --> 00:03:08,080
and Docker have a strong history together.

71
00:03:08,280 --> 00:03:11,800
Since Heroku realized that as they build out a cloud system

72
00:03:12,000 --> 00:03:14,950
was going to need to have a lot of common principles.

73
00:03:15,150 --> 00:03:17,120
They basically created a set of best practices.

74
00:03:17,320 --> 00:03:20,050
Now, this has been around for over a decade.

75
00:03:20,320 --> 00:03:21,910
So, it's definitely not new,

76
00:03:22,110 --> 00:03:23,559
but it's still very relevant,

77
00:03:23,759 --> 00:03:26,709
and a lot of these things are something that you should just follow for every

78
00:03:26,909 --> 00:03:29,260
app you create that you're going to stick on a server.

79
00:03:29,460 --> 00:03:32,350
Because they really are about creating

80
00:03:32,550 --> 00:03:34,460
an application that survives a long time.

81
00:03:34,660 --> 00:03:37,330
That it lasts many years without quickly degrading.

82
00:03:37,570 --> 00:03:40,960
That it's able to be used amongst many members of the team

83
00:03:41,200 --> 00:03:43,900
and shared in a way that makes sense to a lot of people.

84
00:03:44,140 --> 00:03:46,780
They're really great stuff. If you haven't read through it,

85
00:03:47,020 --> 00:03:48,700
just take an hour of your day

86
00:03:48,900 --> 00:03:50,800
and read through...each page in it,

87
00:03:51,000 --> 00:03:52,270
of the 12, is pretty short.

88
00:03:52,480 --> 00:03:53,860
So, you'll get through them pretty quickly.

89
00:03:54,060 --> 00:03:55,570
They're not even specific to Docker

90
00:03:55,810 --> 00:03:57,940
or to even the cloud in general,

91
00:03:58,140 --> 00:04:00,750
although they certainly are focused more around cloud technologies.

92
00:04:00,950 --> 00:04:02,530
You can certainly use these in a data center

93
00:04:02,920 --> 00:04:04,900
and in distributed applications of all kinds.

94
00:04:05,530 --> 00:04:08,649
The point here is that containers are almost always going

95
00:04:08,849 --> 00:04:09,850
to be distributed apps.

96
00:04:10,200 --> 00:04:13,000
They're going to be something where two different containers,

97
00:04:13,200 --> 00:04:14,446
even if they're on the same physical host,

98
00:04:14,646 --> 00:04:18,129
are technically operating across a network using their DNS

99
00:04:18,329 --> 00:04:20,920
names and essentially at this point,

100
00:04:21,120 --> 00:04:24,175
they're acting like a distributed app even though they're on the same system,

101
00:04:24,490 --> 00:04:24,790
right.

102
00:04:25,369 --> 00:04:27,009
So, if we're using Docker,

103
00:04:27,209 --> 00:04:30,069
we're already getting so much out-of-the-box that when you

104
00:04:30,269 --> 00:04:33,189
read through the 12-factor, you'll realize that if you're using Docker,

105
00:04:33,389 --> 00:04:34,900
you're getting a lot of that for free.

106
00:04:35,200 --> 00:04:38,020
But there's a few of them that we definitely need to call out because

107
00:04:38,260 --> 00:04:39,660
they're not going to be built in out-of-the-box

108
00:04:40,090 --> 00:04:42,120
with Node or with your Docker setup.

109
00:04:42,340 --> 00:04:45,429
We need to highlight them and focus on them to make sure you're

110
00:04:45,629 --> 00:04:48,549
following those practices so that things will be easier

111
00:04:48,749 --> 00:04:51,519
and will last better over the long term as you

112
00:04:51,719 --> 00:04:52,560
build out your solutions.

