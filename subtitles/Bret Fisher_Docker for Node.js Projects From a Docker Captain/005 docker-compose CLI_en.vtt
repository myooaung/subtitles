WEBVTT
1
00:00:02.340 --> 00:00:05.819
The Docker Compose command line is designed around,

2
00:00:05.820 --> 00:00:06.800
in my opinion,

3
00:00:07.110 --> 00:00:10.409
developer happiness. Which means we don't have to relearn

4
00:00:10.410 --> 00:00:13.409
a whole bunch of new skills and we reduce the

5
00:00:13.410 --> 00:00:15.770
amount of typing we have at the command line.

6
00:00:16.050 --> 00:00:19.139
A lot. One of the great things here is that many

7
00:00:19.140 --> 00:00:21.089
of the Docker commands you may be used to,

8
00:00:21.090 --> 00:00:23.360
if you were not using Compose before,

9
00:00:24.210 --> 00:00:26.189
are going to be similar, or the same,

10
00:00:26.190 --> 00:00:29.210
with Docker Compose. We'll see those few examples in a
minute.

11
00:00:29.610 --> 00:00:32.789
And realize that the IDE you're using may

12
00:00:32.790 --> 00:00:35.930
have Docker or Docker Compose functionality built into it.

13
00:00:36.120 --> 00:00:39.209
That's become an increasingly common situation given that

14
00:00:39.210 --> 00:00:42.479
so many of us are starting to develop inside containers

15
00:00:42.480 --> 00:00:44.540
and becomes a part of our developer workflow.

16
00:00:44.760 --> 00:00:47.600
The IDE's, of course, are adding that functionality in.

17
00:00:47.990 --> 00:00:51.410
In this course, I will largely be using Visual Studio Code.

18
00:00:51.810 --> 00:00:53.849
That's mostly considered a text editor,

19
00:00:53.850 --> 00:00:55.700
not a full-fledged IDE.

20
00:00:55.710 --> 00:00:57.135
It, itself, has Docker

21
00:00:57.270 --> 00:00:59.390
and Docker Compose functionality built in it.

22
00:00:59.940 --> 00:01:02.819
I will leave most of that alone because frankly,

23
00:01:02.820 --> 00:01:04.052
we're not all using the same IDE's

24
00:01:04.440 --> 00:01:06.140
and every IDE is different.

25
00:01:06.480 --> 00:01:09.509
I really believe that it's crucial for you to know the
command

26
00:01:09.510 --> 00:01:13.030
line functionality before you start digging into the IDE.

27
00:01:13.170 --> 00:01:15.029
Because the IDE may either be old,

28
00:01:15.030 --> 00:01:17.240
or not complete, in its functionality.

29
00:01:17.340 --> 00:01:18.809
So, I want you to understand,

30
00:01:18.810 --> 00:01:20.309
and know well,

31
00:01:20.310 --> 00:01:23.369
the command line because that will serve you for years

32
00:01:23.370 --> 00:01:26.149
and years to come, as long as Docker Compose is being used.

33
00:01:26.150 --> 00:01:28.049
Another thing you'll notice, in this course,

34
00:01:28.050 --> 00:01:30.539
is Docker's idea around batteries included

35
00:01:30.540 --> 00:01:31.470
but swappable.

36
00:01:31.744 --> 00:01:34.739
What that means is that a lot of things come default

37
00:01:34.740 --> 00:01:35.027
out-of-the-box.

38
00:01:36.120 --> 00:01:39.299
They're all documented, but it's not always obvious what
the defaults

39
00:01:39.300 --> 00:01:42.059
are. I will point those out when they make sense.

40
00:01:42.060 --> 00:01:44.039
Realize, though, that most of the time,

41
00:01:44.040 --> 00:01:45.959
if you don't like a setting or a default,

42
00:01:45.960 --> 00:01:47.330
you can always change it.

43
00:01:47.430 --> 00:01:50.960
For example, you can change the default file name for
Compose.

44
00:01:51.000 --> 00:01:53.729
You can change what the project name is,

45
00:01:53.730 --> 00:01:55.199
by the default, out of the command line.

46
00:01:55.200 --> 00:01:57.170
It's just...there's a lot of options there you can change.

47
00:01:57.450 --> 00:01:58.889
Realize that you don't always have to stick

48
00:01:58.890 --> 00:02:01.880
with the default, but I will be focusing on the defaults
because

49
00:02:01.920 --> 00:02:05.069
that typically is a time-tested rule that works

50
00:02:05.070 --> 00:02:07.940
well for everyone. Also something to note here

51
00:02:08.038 --> 00:02:10.058
is that Docker Compose CLI's versions

52
00:02:11.730 --> 00:02:14.309
are not the same as the Compose file versions.

53
00:02:14.310 --> 00:02:17.639
You saw me talk a few minutes ago about Docker Compose
Versions

54
00:02:17.640 --> 00:02:18.920
2 and 3,

55
00:02:18.990 --> 00:02:21.689
and those aren't directly related to the CLI versions.

56
00:02:21.690 --> 00:02:24.869
Right now, I think the Compose file versions

57
00:02:24.870 --> 00:02:25.785
are something like 2.4

58
00:02:27.150 --> 00:02:28.679
and then there's a 3 branch,

59
00:02:28.680 --> 00:02:31.580
obviously, and then in the Compose command line,

60
00:02:31.650 --> 00:02:34.239
we have 1.23 I believe is the newest.

61
00:02:34.240 --> 00:02:36.149
And if you're on older versions of Windows,

62
00:02:36.150 --> 00:02:36.913
you may be using 1.21.

63
00:02:37.980 --> 00:02:40.061
This is because these two things are on different tracks,

64
00:02:40.062 --> 00:02:43.199
right. The Command line is used just

65
00:02:43.200 --> 00:02:45.179
for local development most of the time,

66
00:02:45.180 --> 00:02:48.080
and the file format is used for other things as well.

67
00:02:48.180 --> 00:02:50.879
So think of it as sort of the client

68
00:02:50.880 --> 00:02:52.679
and the server API kind of mentality,

69
00:02:52.680 --> 00:02:53.039
right.

70
00:02:53.040 --> 00:02:56.279
So, you just need to make sure that your command line
supports

71
00:02:56.280 --> 00:02:58.340
the versions of the Compose files you're using.

72
00:02:58.470 --> 00:03:01.559
Sometimes, if someone's using a bleeding edge version of
the Compose

73
00:03:01.560 --> 00:03:02.780
file format,

74
00:03:02.910 --> 00:03:05.909
they may be on a newer version than your CLI supports.

75
00:03:05.910 --> 00:03:07.940
You'll get an error message when you see that.

76
00:03:08.080 --> 00:03:10.439
So, if you ever see that in this course, or anytime in the
future,

77
00:03:10.440 --> 00:03:13.630
just realize that it's probably due to your Compose CLI

78
00:03:14.580 --> 00:03:16.610
being outdated, and you need to check for a new one.

79
00:03:16.940 --> 00:03:19.079
The first example here is docker compose up.

80
00:03:19.080 --> 00:03:21.170
You'll be using that a lot in this course.

81
00:03:21.220 --> 00:03:24.770
It is the one-stop shop for going from nothing

82
00:03:24.780 --> 00:03:26.150
to everything running.

83
00:03:26.340 --> 00:03:29.009
You can use it usually just by downloading,

84
00:03:29.010 --> 00:03:30.689
or cloning, a repo

85
00:03:30.690 --> 00:03:32.909
and then if that repo has a Docker Compose file,

86
00:03:32.910 --> 00:03:35.450
just jumping in that directory and typing docker compose
up.

87
00:03:35.670 --> 00:03:38.699
This will spin up everything that was designed in that

88
00:03:38.700 --> 00:03:40.619
Compose file, including building

89
00:03:40.620 --> 00:03:42.290
and pulling of the images.

90
00:03:42.420 --> 00:03:44.849
It will make sure that it creates the volumes,

91
00:03:44.850 --> 00:03:46.799
and the networks, and then the containers,

92
00:03:46.800 --> 00:03:49.550
before it then starts the containers

93
00:03:49.770 --> 00:03:52.610
with all the settings you gave it in the foreground.

94
00:03:52.680 --> 00:03:54.410
Most of the time,

95
00:03:54.450 --> 00:03:56.112
you'll want to be doing a docker compose up -d,

96
00:03:57.300 --> 00:04:00.008
and this puts it in detached mode just like docker run -d.

97
00:04:00.009 --> 00:04:02.192
That would have run in the background.

98
00:04:02.193 --> 00:04:05.249
Something that's not always obvious to people

99
00:04:05.250 --> 00:04:08.249
when they start is that when you do a docker compose up the
first

100
00:04:08.250 --> 00:04:10.079
time, it may build some images for you,

101
00:04:10.080 --> 00:04:11.300
which is very handy.

102
00:04:11.370 --> 00:04:15.110
But it's not always going to rebuild those images every
time something changes.

103
00:04:15.270 --> 00:04:17.000
That's kind of dependent on your workflow.

104
00:04:17.310 --> 00:04:20.428
We'll talk more about that stuff later, but do realize if
you want to

105
00:04:20.430 --> 00:04:23.290
rebuild images every time you type the up command,

106
00:04:23.730 --> 00:04:26.549
just add in a --build on the end of it

107
00:04:26.550 --> 00:04:28.000
and that'll make sure that it happens.

108
00:04:28.001 --> 00:04:30.719
The opposite of up is down.

109
00:04:30.720 --> 00:04:34.109
So, in this case, it's the one-stop shop for stopping

110
00:04:34.110 --> 00:04:36.620
all the containers, removing the containers,

111
00:04:36.630 --> 00:04:38.140
removing the networks,

112
00:04:38.160 --> 00:04:40.340
but it leaves the data alone by default.

113
00:04:40.650 --> 00:04:44.249
One of the core principles of Docker is really protecting

114
00:04:44.250 --> 00:04:45.440
your volume data

115
00:04:45.540 --> 00:04:48.476
and only deleting it when you are specific

116
00:04:49.110 --> 00:04:50.519
in the case that you want to do that.

117
00:04:50.520 --> 00:04:52.139
So, it usually takes extra commands

118
00:04:52.140 --> 00:04:53.750
or options to delete volumes.

119
00:04:53.820 --> 00:04:56.720
In this case, if you add a -v at the end

120
00:04:56.970 --> 00:04:59.450
to down, it will then remove the volumes.

121
00:04:59.580 --> 00:05:02.759
This is what I usually have people do when they're

122
00:05:02.760 --> 00:05:05.339
running Docker Compose and they have maybe a problem in
their app,

123
00:05:05.340 --> 00:05:06.839
or it's not behaving like they expect,

124
00:05:06.840 --> 00:05:08.780
and we want to have a clean slate.

125
00:05:08.880 --> 00:05:11.909
I'll usually ask them to do a docker compose down -v to
wipe

126
00:05:11.910 --> 00:05:14.360
out everything including the volume data,

127
00:05:14.400 --> 00:05:17.900
and then do a docker compose up to freshly start
everything.

128
00:05:18.360 --> 00:05:21.449
A few more quick example commands before

129
00:05:21.450 --> 00:05:23.030
we jump into the next lecture.

130
00:05:23.300 --> 00:05:27.019
Realize here that many of these have service

131
00:05:27.020 --> 00:05:29.419
options at the end so you can type the command

132
00:05:29.420 --> 00:05:32.290
and then the name of a service from the Compose file.

133
00:05:32.330 --> 00:05:33.709
Note, it's not the container name.

134
00:05:33.710 --> 00:05:35.050
It's the service name.

135
00:05:35.330 --> 00:05:38.620
Then that command will be specific for just that service.

136
00:05:38.810 --> 00:05:41.989
Options here include docker compose build for just building
the images

137
00:05:41.990 --> 00:05:43.870
and not messing around with up or down.

138
00:05:43.940 --> 00:05:46.909
Or just stopping, which is something you might do if you

139
00:05:46.910 --> 00:05:50.209
just need to take a break or you need to free up some
resources to start something

140
00:05:50.210 --> 00:05:51.643
else on your machine,

141
00:05:51.860 --> 00:05:53.449
and you might just stop the containers

142
00:05:53.450 --> 00:05:55.790
and not mess with them. Not actually delete them.

143
00:05:56.030 --> 00:05:57.859
Even the ps option, like we have

144
00:05:57.860 --> 00:06:00.010
with docker ps, exists here.

145
00:06:00.020 --> 00:06:01.879
But you gain extra benefits by using it

146
00:06:01.880 --> 00:06:03.619
with a Docker Compose version,

147
00:06:03.620 --> 00:06:05.569
because it'll show you not just running

148
00:06:05.570 --> 00:06:06.889
but also stopped containers.

149
00:06:06.890 --> 00:06:09.201
It'll show you in an easier format,

150
00:06:09.202 --> 00:06:11.140
which ports are open

151
00:06:11.180 --> 00:06:14.800
and which errors might have happened if a container has
stopped.

152
00:06:14.870 --> 00:06:16.330
I use that one a lot.

153
00:06:16.490 --> 00:06:18.649
Other options here include push,

154
00:06:18.650 --> 00:06:22.300
to push all the images in your Compose file up to the
registry.

155
00:06:22.340 --> 00:06:25.480
Of course, that one requires that you name the images
properly

156
00:06:25.490 --> 00:06:26.803
in your Compose file. Lastly,

157
00:06:27.320 --> 00:06:30.679
logs and exec. These work exactly like you would expect

158
00:06:30.680 --> 00:06:33.679
with the Docker command line where you can either just

159
00:06:33.680 --> 00:06:35.029
type docker compose logs

160
00:06:35.030 --> 00:06:36.379
and see all the logs,

161
00:06:36.380 --> 00:06:38.440
for all of the containers running.

162
00:06:38.630 --> 00:06:40.999
Or docker compose logs

163
00:06:41.000 --> 00:06:43.660
and then the name of a service to filter to just those.

164
00:06:43.730 --> 00:06:46.849
You'll see us using the exec command throughout this course

165
00:06:46.850 --> 00:06:49.940
to do one-off commands inside our containers while we're developing.

