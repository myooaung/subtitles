1
00:00:02,510 --> 00:00:06,290
Let's look at how we're going to do ARM, on your local machine, for development.

2
00:00:06,290 --> 00:00:08,920
Again, this is for Docker Desktop only.

3
00:00:08,930 --> 00:00:15,350
If you're using Linux Native, or if you're using Docker Toolbox, these options aren't available right

4
00:00:15,350 --> 00:00:16,180
out-of-the-box.

5
00:00:16,219 --> 00:00:21,130
There may be some workarounds you can look up online to set up a solution that would work for you,

6
00:00:21,140 --> 00:00:26,520
but really right now, I'm just going to focus on Docker Desktop. There's several ways to get started

7
00:00:26,520 --> 00:00:32,159
with this in your containers. Of course you need to start from images that are built for ARM, because

8
00:00:32,220 --> 00:00:37,350
each image needs to be specific to the OS and architecture that's it's going to run, right.

9
00:00:37,350 --> 00:00:43,390
So, Windows container images would be different than Linux container images. Just like Linux x86,

10
00:00:43,400 --> 00:00:52,070
or as we call it in Docker, AMD64 compatibility architecture. There's ARM64 as well.

11
00:00:52,080 --> 00:00:58,390
We just need to make sure that we're using an ARM-based image. The easy button here is to change

12
00:00:58,390 --> 00:01:07,360
the from line from the official Node image default, which is AMD64 to one that is ARM64.

13
00:01:07,360 --> 00:01:12,910
Usually, it's going to be the V8 version. There's other ARM processor additions that you can

14
00:01:12,910 --> 00:01:14,290
look at for different architectures.

15
00:01:14,290 --> 00:01:18,910
The most popular one now is the latest V8.

16
00:01:18,910 --> 00:01:26,320
What's interesting in the background, is this will cause Docker Desktop to run ARM emulation in the

17
00:01:26,320 --> 00:01:31,540
background on the processor, so that it'll run your container like it would normally run on a piece of

18
00:01:31,540 --> 00:01:32,800
ARM hardware.

19
00:01:32,800 --> 00:01:39,820
The way this works is through QEMU virtualization, or processor emulation, which is a common tool

20
00:01:39,820 --> 00:01:45,700
on Linux for doing this sort of work where you're emulating one type of processor on another, and able

21
00:01:45,700 --> 00:01:47,850
to run virtualization of those things.

22
00:01:47,860 --> 00:01:49,790
So, it's something that Docker didn't invent.

23
00:01:49,810 --> 00:01:57,910
They just built it into Docker Desktop, by default, as a bonus feature. QEMU is focused on running on

24
00:01:57,910 --> 00:02:03,220
a standard Linux x86 AMD64 type solution, like

25
00:02:03,250 --> 00:02:09,220
we'd all know in the cloud, or on your local machine, and then emulating a growing list of other processor

26
00:02:09,310 --> 00:02:14,650
architectures. ARM is just one of those. Of course, there's multiple ARM processor types.

27
00:02:14,770 --> 00:02:21,310
The one I'm here talking about is V8. Really after that, things just build and run like normal.

28
00:02:21,310 --> 00:02:25,630
You're just going to build that image like you normally would. You can run it like you normally would.

29
00:02:25,630 --> 00:02:32,110
It just so happens that it'll be running it on an emulated ARM computational stack.

30
00:02:32,320 --> 00:02:37,450
The neat thing here is if you're in a larger solution where you have other containers, and maybe you want

31
00:02:37,450 --> 00:02:42,340
to test some code that's going to eventually run on some sort of ARM device, but you also have other

32
00:02:42,340 --> 00:02:45,980
code that needs to run on your standard x86 code,

33
00:02:46,060 --> 00:02:50,950
you can run that in Compose together. Different containers can be mixed inside that single Compose file.

34
00:02:51,250 --> 00:02:55,420
So, you could technically be editing different containers running at the same time, editing the code

35
00:02:55,420 --> 00:03:01,180
on those from your local machine. And, they're running different processor architectures. Which is pretty

36
00:03:01,180 --> 00:03:06,910
amazing. Let's look at an example and some of the sites that you need to check out in order to make

37
00:03:06,910 --> 00:03:12,780
this all work. The first thing we need to concern ourselves with is making sure that our base image

38
00:03:12,780 --> 00:03:17,060
is ARM-based, rather than the AMD64 that we're used to, by default.

39
00:03:17,070 --> 00:03:22,410
If I'm over on Docker Hub. and I just go to the Node official image page, the easiest thing to do here,

40
00:03:22,410 --> 00:03:28,760
right now, is to just scroll down until you see the architecture list. You'll see that there's AMD64,

41
00:03:28,810 --> 00:03:40,170
ARM32v6, ARM32v7, i386, which is the old 32-bit kind of stuff, PPC64, S390, all these

42
00:03:40,170 --> 00:03:41,000
different architectures.

43
00:03:41,000 --> 00:03:42,570
Well, we've ignored that so far, right.

44
00:03:42,570 --> 00:03:43,850
That's not really mattered to us.

45
00:03:43,860 --> 00:03:51,090
But, if you just click on ARM64v8, then that will take you over to this official Node image page for

46
00:03:51,090 --> 00:03:58,100
that specific architecture. You'll notice that the names are all the same because they're building

47
00:03:58,370 --> 00:04:05,690
the same stuff, just with a different architecture type. That means I can copy this repo name here.

48
00:04:05,690 --> 00:04:12,380
The actual organizational name is ARM64v8. I can go over to any Dockerfile that's running Node

49
00:04:12,560 --> 00:04:19,250
and just swap out that from image, if I'm using the official image. I'm in the sample 02 directory.

50
00:04:19,640 --> 00:04:26,820
We have a standard Dockerfile in there, and if I just take a look, that Dockerfile is pretty basic,

51
00:04:26,830 --> 00:04:27,370
right.

52
00:04:27,550 --> 00:04:32,540
It's just building a standard Node app with the basics. Nothing fancy in here.

53
00:04:32,570 --> 00:04:41,850
If I just go in and add that organizational name, and put the slash in, then it tells Docker that this

54
00:04:41,850 --> 00:04:46,140
is the image I want to use, and that image just happens to be built with a different architecture.

55
00:04:46,140 --> 00:04:51,510
Now, you might wonder how we know about architectures, because they're not really obvious when you're

56
00:04:51,510 --> 00:04:52,800
looking at stuff, right.

57
00:04:52,830 --> 00:04:58,140
That's one of the things that Docker needs to improve on. But for now, you just basically do a docker

58
00:04:58,140 --> 00:05:06,020
inspect. We can do a docker image inspect. Then, give the image name. In this case, we're going to

59
00:05:06,020 --> 00:05:08,040
give it the ARM64.

60
00:05:08,420 --> 00:05:17,010
If I just did a grep for architecture, you'll see that it says architecture is ARM64.

61
00:05:17,050 --> 00:05:22,920
If I did that same thing without the option in the front there.

62
00:05:23,000 --> 00:05:23,420
Oops.

63
00:05:23,440 --> 00:05:29,830
Need to pull it. So, docker image pull node 10 Alpine.

64
00:05:35,200 --> 00:05:39,560
If I run that same command there, you'll see that it's AMD64.

65
00:05:39,560 --> 00:05:43,670
It's tricky, because if you look at both of them, they can get a little confusing. They're so similar.

66
00:05:44,000 --> 00:05:47,380
But, they're quite different. They're totally different computer architectures.

67
00:05:47,600 --> 00:05:52,240
They cannot work together, except for in this cool little emulation that we've got going on.

68
00:05:52,340 --> 00:05:58,730
Now, I can just build this image since I've changed the Dockerfile to specify, or hardcode the ARM64

69
00:05:58,730 --> 00:06:00,000
in there.

70
00:06:02,150 --> 00:06:05,870
We're just going to call this ARM64 node.

71
00:06:09,720 --> 00:06:12,060
If you see some unknown host little errors there,

72
00:06:12,060 --> 00:06:12,950
don't worry about those.

73
00:06:12,960 --> 00:06:15,050
They're just a part of the emulation software.

74
00:06:15,370 --> 00:06:17,250
You can see that I have my image built.

75
00:06:17,400 --> 00:06:22,530
If I did another inspect on that one, you would see that that image is also ARM based.

76
00:06:22,590 --> 00:06:24,460
So, we can just do a docker run on that.

77
00:06:24,500 --> 00:06:34,330
So, docker run, we'll do 8080 to port 3000 in the container, and we'll run it detached

78
00:06:34,870 --> 00:06:37,410
and we called it ARM64 node.

79
00:06:40,410 --> 00:06:45,700
If I do a docker ps, I should see that container running like we normally would have on a regular

80
00:06:45,720 --> 00:06:46,680
AMD system.

81
00:06:46,680 --> 00:06:54,570
If I jump over to my browser and go to localhost 8080, we'll see that sample app running.

82
00:06:54,800 --> 00:07:00,140
Now, that's running a completely different architecture, but we really can't tell because it's Node. Node

83
00:07:00,140 --> 00:07:01,470
works just about everywhere.

84
00:07:01,550 --> 00:07:05,480
You can see that it's really easy for local development. From here,

85
00:07:05,480 --> 00:07:06,950
the rest all still applies.

86
00:07:06,950 --> 00:07:11,260
Everything else, in the rest of this course, still works the same way. The way you bind mount.

87
00:07:11,270 --> 00:07:16,550
The way you develop. The way you network with it. It doesn't really matter. Because it's just emulating

88
00:07:16,550 --> 00:07:17,420
that processor type.

