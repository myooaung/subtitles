1
00:00:02,610 --> 00:00:05,670
Hopefully, you've spent some time trying out the assignment

2
00:00:05,700 --> 00:00:06,519
and getting your three stages clarified

3
00:00:09,180 --> 00:00:10,377
in your Dockerfile, and trying to build each one of those

4
00:00:11,370 --> 00:00:12,588
stages with the target options so that you can have three,

5
00:00:14,100 --> 00:00:15,100
different images.

6
00:00:15,870 --> 00:00:17,004
Now, you just kind of want to see how I do it and what

7
00:00:18,780 --> 00:00:21,720
differs, right. Because if you can get your images working,

8
00:00:21,750 --> 00:00:24,270
and you know, they're fine for you, then that's great.

9
00:00:25,200 --> 00:00:26,355
My way might be a little bit different, might take some

10
00:00:27,270 --> 00:00:29,730
different things into account. So, I will talk through this

11
00:00:29,760 --> 00:00:30,369
as I go about it, and since I

12
00:00:32,729 --> 00:00:35,202
gave you this helper file to start out your Dockerfile,

13
00:00:35,970 --> 00:00:36,789
we know here that we have three stages.

14
00:00:37,530 --> 00:00:40,050
They're in a certain order, and that each one is getting a

15
00:00:40,550 --> 00:00:42,960
NODE_ENV. Of course, if you've not seen

16
00:00:43,590 --> 00:00:44,766
NODE_ENV before, that is an environment variable that is

17
00:00:46,200 --> 00:00:47,397
usually just used to state production or development, and

18
00:00:48,810 --> 00:00:50,010
it can also say prod or dev.

19
00:00:50,640 --> 00:00:51,585
That was made popular by the Express package.

20
00:00:53,320 --> 00:00:54,559
It's not actually, as far as I'm aware, a built-in, node.js

21
00:00:55,556 --> 00:00:56,556
option.

22
00:00:57,360 --> 00:00:58,578
It's really more about the frameworks you're using and how

23
00:00:59,490 --> 00:01:00,456
they might differ. It might enable caching, or

24
00:01:02,550 --> 00:01:05,429
might enable different minifications of things, depending

25
00:01:05,430 --> 00:01:06,543
on what you're using. So, in here we're assigning the

26
00:01:08,053 --> 00:01:11,042
NODE_ENV, but you can always override that build at

27
00:01:11,227 --> 00:01:12,403
time so that things would be different in each one these

28
00:01:13,170 --> 00:01:15,930
stages. But typically, this is how you would see it

29
00:01:16,740 --> 00:01:17,780
as default, right.

30
00:01:18,072 --> 00:01:19,980
The first thing I want to deal with is the production.

31
00:01:20,010 --> 00:01:22,650
I know that since production has to have the code in it,

32
00:01:22,680 --> 00:01:23,898
and it has to have the package.json file, and it has to do

33
00:01:25,200 --> 00:01:26,334
at least an npm install, I'm going to have those three

34
00:01:27,600 --> 00:01:28,671
ingredients. I also know that, by the requirements,

35
00:01:30,990 --> 00:01:32,166
I'm supposed to do a node command and not an npm command

36
00:01:33,960 --> 00:01:35,115
to start this, right. So, if I just start to frame this

37
00:01:37,020 --> 00:01:38,091
out, I know I have to do a copy of the package file

38
00:01:40,200 --> 00:01:41,970
so I can actually just type this out.

39
00:01:44,260 --> 00:01:45,352
In this case, I could do a package.json as sort of a

40
00:01:46,690 --> 00:01:49,900
shortcut that allows me to have both files.

41
00:01:50,560 --> 00:01:52,230
Doesn't really matter how you do that there.

42
00:01:52,480 --> 00:01:54,710
Then I'm going to need to do an npm install.

43
00:01:57,700 --> 00:01:58,603
In this case, one of the benefits, and this

44
00:02:00,760 --> 00:02:01,999
isn't a requirement, but one of the benefits here is that I

45
00:02:02,680 --> 00:02:03,919
can be very literal about what goes into the production and

46
00:02:05,080 --> 00:02:08,110
what goes into development. So, in this case I could use

47
00:02:08,620 --> 00:02:10,989
--production as an npm install option.

48
00:02:11,380 --> 00:02:13,255
It also will read in the NODE_ENV.

49
00:02:14,260 --> 00:02:16,390
But, the way I like to do it is --only=production.

50
00:02:19,330 --> 00:02:20,128
Really, any of those three ways works.

51
00:02:22,020 --> 00:02:24,500
In fact, if you just go look at the Node documentation

52
00:02:25,030 --> 00:02:27,550
or the npm documentation, you'll see this stuff in there.

53
00:02:27,660 --> 00:02:28,878
That ensures that my production image won't have the extra

54
00:02:30,970 --> 00:02:33,310
things that it doesn't need that are just for development.

55
00:02:33,640 --> 00:02:37,030
I'm also going to need to run a cleanup command

56
00:02:37,090 --> 00:02:38,119
on the npm in order to make sure that it's small.

57
00:02:39,404 --> 00:02:42,610
I can do that with a double

58
00:02:42,780 --> 00:02:45,210
ampersand, and then npm cache clean.

59
00:02:47,430 --> 00:02:49,880
Then give it the force option just like we did before.

60
00:02:52,500 --> 00:02:54,430
Now I'm going to copy in the rest of my code.

61
00:02:57,430 --> 00:02:59,860
Now, you can always use the best practices we talked about

62
00:02:59,890 --> 00:03:02,800
earlier where you change working directory

63
00:03:02,950 --> 00:03:04,147
and you make a specific place, and then you copy the code

64
00:03:05,320 --> 00:03:08,590
into there. But, I'm trying to do this just for simplicity

65
00:03:08,620 --> 00:03:09,817
and not adding in all the options that we've talked about

66
00:03:11,500 --> 00:03:14,270
so far. This is really just focused on the multistage

67
00:03:14,620 --> 00:03:15,754
part of this, but there's nothing wrong with you doing

68
00:03:17,050 --> 00:03:18,226
that, right. Your production images are going to be more

69
00:03:19,600 --> 00:03:22,330
complicated than this, but this is at least the minimum

70
00:03:22,660 --> 00:03:25,140
that I need in order to get a working multistage.

71
00:03:27,620 --> 00:03:29,550
Then finally in this stage, I'm going to do a cmd,

72
00:03:30,570 --> 00:03:33,644
and that will allow me to put in the node command.

73
00:03:38,950 --> 00:03:41,754
I can go look at the package.json file to see, okay,

74
00:03:42,640 --> 00:03:43,522
so the start here has it running /bin/www.

75
00:03:44,432 --> 00:03:45,432
So,

76
00:03:47,830 --> 00:03:48,830
I'll put that in here.

77
00:03:53,010 --> 00:03:54,190
All right. I'm going to  save that file.

78
00:03:54,520 --> 00:03:55,633
That's my first stage. Now, I could just try to build

79
00:03:57,520 --> 00:04:00,330
this stage. I could actually just go type a docker

80
00:04:00,550 --> 00:04:01,516
build command and not have to finish the other

81
00:04:03,640 --> 00:04:05,460
two if I just wanted to test this one stage.

82
00:04:05,470 --> 00:04:07,720
So, I could do something like a docker build

83
00:04:08,500 --> 00:04:12,040
and I could call it multistage if I wanted.

84
00:04:13,300 --> 00:04:14,300
Need to give it the t,

85
00:04:19,019 --> 00:04:19,670
multistage and I have to target

86
00:04:22,019 --> 00:04:24,350
it to that stage.

87
00:04:24,520 --> 00:04:26,830
If you remember, the first one is called prod.

88
00:04:26,870 --> 00:04:28,109
We gave it an easy name to remember so that we can refer to

89
00:04:29,720 --> 00:04:33,000
it in commands and in the rest of this file.

90
00:04:36,760 --> 00:04:38,740
I use the dot for the current directory.

91
00:04:47,110 --> 00:04:48,286
All right. You'll see here that you don't see any of the

92
00:04:49,750 --> 00:04:52,270
other lines, from the other stages, of this build.

93
00:04:52,540 --> 00:04:55,600
If I left out the target option, it would build

94
00:04:55,630 --> 00:04:56,785
all three stages and essentially it would do a top down

95
00:04:58,720 --> 00:05:00,990
order and the image would be the result of all three of the

96
00:05:01,030 --> 00:05:02,030
stages.

97
00:05:02,320 --> 00:05:05,590
But, because I specified the target, it's only going to put

98
00:05:05,650 --> 00:05:07,190
the first stage in this image.

99
00:05:11,040 --> 00:05:12,360
Now, let's go to the second stage.

100
00:05:12,660 --> 00:05:13,752
The second stage is focused specifically on my local

101
00:05:15,420 --> 00:05:17,450
development. So, a couple of things are true here.

102
00:05:17,700 --> 00:05:18,834
This image will probably never live in a repository or

103
00:05:20,360 --> 00:05:22,802
registry. It won't ever list anywhere that

104
00:05:23,400 --> 00:05:25,890
I care about the size of it other than my local machine.

105
00:05:26,010 --> 00:05:29,220
Maybe I don't need to do an npm cache clean

106
00:05:29,370 --> 00:05:30,567
because that little bit of savings that it might save for

107
00:05:32,370 --> 00:05:34,940
me is not really that important on my local machine.

108
00:05:35,430 --> 00:05:38,001
I really care more about quick build times.

109
00:05:38,880 --> 00:05:41,930
Here we're going to need to install the dev dependencies

110
00:05:41,940 --> 00:05:43,137
from our package.json because those were not installed in

111
00:05:44,550 --> 00:05:45,550
the first stage.

112
00:05:45,820 --> 00:05:47,017
If I go back to the package.json file, I'll see that I do

113
00:05:48,690 --> 00:05:50,520
have some dev dependencies here.

114
00:05:50,910 --> 00:05:52,860
So, I'm going to definitely need to do that command.

115
00:05:53,100 --> 00:05:55,280
And that's probably what you would expect it to look like.

116
00:05:55,290 --> 00:05:57,210
It's going to be a very similar command to the above.

117
00:05:57,750 --> 00:06:00,090
I can do a run npm install

118
00:06:00,750 --> 00:06:01,750
only

119
00:06:04,950 --> 00:06:06,105
development. That will ensure that it doesn't waste its

120
00:06:07,590 --> 00:06:08,724
time installing everything it already did in the first

121
00:06:09,840 --> 00:06:12,090
stage. That's a big shortcut to save time.

122
00:06:12,390 --> 00:06:13,629
It's only going to install those 4 other ones and make sure

123
00:06:15,090 --> 00:06:16,266
that they're current. I don't need to do the cache clean

124
00:06:17,880 --> 00:06:19,098
here just because this is only going to probably sit on my

125
00:06:20,130 --> 00:06:21,348
local machine. I don't see myself putting this on a server

126
00:06:22,650 --> 00:06:23,650
somewhere.

127
00:06:24,180 --> 00:06:25,350
And, we're off to the next line.

128
00:06:25,710 --> 00:06:26,907
So, the next line is really, at this point, just changing

129
00:06:28,860 --> 00:06:31,830
the cmd. So, each stage as I go down the

130
00:06:32,130 --> 00:06:35,040
Dockerfile is going to change

131
00:06:35,430 --> 00:06:36,564
the cmd based on the environment it's going to run in.

132
00:06:38,010 --> 00:06:41,066
You'll see in the from line that I'm froming

133
00:06:41,370 --> 00:06:44,430
prod to dev and then down here, I'm froming dev to test.

134
00:06:44,610 --> 00:06:45,366
So, once I get to the test stage, it

135
00:06:47,640 --> 00:06:48,522
will essentially do the first stage first.

136
00:06:49,767 --> 00:06:50,901
It will build that. Then it will build the second one.

137
00:06:51,420 --> 00:06:52,575
Then it will build the third one. You could always have

138
00:06:53,550 --> 00:06:56,310
these out of order and have

139
00:06:56,550 --> 00:06:57,537
maybe the fourth stage later that's a different

140
00:06:59,580 --> 00:07:02,171
type of dev setup, that based off a test.

141
00:07:02,760 --> 00:07:05,910
So, you don't necessarily have to do everything in order,

142
00:07:06,090 --> 00:07:07,308
but when we're not using buildkit, which we talked about a

143
00:07:09,000 --> 00:07:10,071
few minutes ago, but we're not using buildkit here.

144
00:07:11,460 --> 00:07:13,410
We're just using the multistage feature.

145
00:07:13,890 --> 00:07:15,129
The thing is without buildkit, it's going to build from the

146
00:07:16,890 --> 00:07:18,129
top down. So, even if the second stage, for example, wasn't

147
00:07:19,890 --> 00:07:22,800
necessary to build the third one, let's say the third stage

148
00:07:23,250 --> 00:07:25,860
said from prod as test,

149
00:07:26,250 --> 00:07:27,468
it technically doesn't need that second stage to start the

150
00:07:29,190 --> 00:07:30,429
third one. If we were using buildkit, one of the advantages

151
00:07:31,830 --> 00:07:33,027
that you would see listed in the buildkit lecture is that

152
00:07:34,380 --> 00:07:36,360
it will skip unnecessary stages.

153
00:07:36,600 --> 00:07:37,755
We don't get that here with just the multistage feature

154
00:07:39,210 --> 00:07:42,690
set. So, it's important to make sure that they're in order

155
00:07:42,930 --> 00:07:44,127
so that we get the things we need, when we need them, and

156
00:07:45,570 --> 00:07:47,940
not to reuse the lines twice.

157
00:07:48,150 --> 00:07:51,300
If I were to put the test stage before the dev stage,

158
00:07:51,660 --> 00:07:54,750
there might be things that I need to do twice because

159
00:07:54,810 --> 00:07:57,530
the stages need different things at different times.

160
00:07:57,780 --> 00:07:58,977
So, I have found that for me, at least, it works a little

161
00:08:00,840 --> 00:08:03,330
bit better if I do the dev stage first.

162
00:08:03,660 --> 00:08:04,731
Also, if I'm just targeting the dev stage for local

163
00:08:06,240 --> 00:08:07,374
development, then it won't need to run the rest of the

164
00:08:09,240 --> 00:08:12,180
lines for test just to give me that image for development.

165
00:08:13,050 --> 00:08:13,953
So, back up here in the dev stage, I can go

166
00:08:16,080 --> 00:08:17,172
back to the package.json to look at what the command

167
00:08:19,230 --> 00:08:21,930
is for dev and pulling in...

168
00:08:22,410 --> 00:08:23,502
so imagine this being a Node app that existed before

169
00:08:24,990 --> 00:08:26,019
Docker, so they were using dev locally so someone

170
00:08:28,200 --> 00:08:31,050
who wasn't using Docker would do npm dev,

171
00:08:31,320 --> 00:08:34,409
or npm run dev, to start

172
00:08:34,770 --> 00:08:35,778
the dev script. We're not going to do that here.

173
00:08:36,600 --> 00:08:37,797
We want to put it straight in the Dockerfile so that it's

174
00:08:39,090 --> 00:08:40,090
the default.

175
00:08:40,590 --> 00:08:42,182
I could just copy this out, right.

176
00:08:42,360 --> 00:08:43,389
I could just copy this line and then make it into

177
00:08:45,360 --> 00:08:48,570
the JSON array that it needs to be in this line.

178
00:08:50,740 --> 00:08:52,960
Give it some quotes and commas where they're needed.

179
00:09:08,920 --> 00:09:11,016
And that should be it for the dev line.

180
00:09:11,740 --> 00:09:12,970
Now, we're on to the test line.

181
00:09:13,000 --> 00:09:15,610
And the test line won't need to install anything new

182
00:09:15,640 --> 00:09:16,585
because the npm install, as a part of the dev

183
00:09:18,820 --> 00:09:21,847
stage, got us all the dependencies, like Mocha

184
00:09:22,150 --> 00:09:23,095
for testing. Really, all that's required here

185
00:09:25,120 --> 00:09:26,590
is that we change the cmd.

186
00:09:27,160 --> 00:09:28,084
We could always override at runtime and type

187
00:09:30,340 --> 00:09:31,390
the npm test at the end of our docker run command.

188
00:09:32,875 --> 00:09:36,250
But it might be easier from your workflow perspective,

189
00:09:36,280 --> 00:09:37,309
or if using Docker Compose, it might be easier to

190
00:09:39,280 --> 00:09:41,380
set this up like so.

191
00:09:44,290 --> 00:09:46,270
That way, you have a specific

192
00:09:47,380 --> 00:09:50,020
image that is just for testing the code.

193
00:09:50,710 --> 00:09:51,760
Later on, we're going to get into a section around

194
00:09:53,050 --> 00:09:55,263
development workflow with Docker Compose locally.

195
00:09:55,960 --> 00:09:56,968
I'll be honest, this stage here, I would not use

196
00:09:59,140 --> 00:10:01,800
locally so much because I would typically run a Docker

197
00:10:02,080 --> 00:10:05,290
Compose exec command to jump right into the container and

198
00:10:05,320 --> 00:10:06,454
run my test, real time, in the container from the CLI.

199
00:10:07,992 --> 00:10:10,930
I Wouldn't necessarily have a separate image just for that.

200
00:10:11,140 --> 00:10:13,900
However, this is great for Continuous Integration.

201
00:10:13,930 --> 00:10:15,085
If you're using something like Jenkins, this is how you

202
00:10:16,450 --> 00:10:17,689
would do testing. You would have it build an image, and the

203
00:10:18,970 --> 00:10:19,957
image would run the test as a part of its build

204
00:10:22,090 --> 00:10:25,780
process. And if any of the stages failed their commands,

205
00:10:26,170 --> 00:10:29,110
then the image fails and your CI should not be

206
00:10:29,590 --> 00:10:31,068
pushing the image up to the Internet, right.

207
00:10:32,020 --> 00:10:35,350
So, a great way for Continuous Integration is to simply

208
00:10:35,410 --> 00:10:38,110
add your test into it's own stage.

209
00:10:38,710 --> 00:10:39,865
That stage here, we don't actually put the commands in.

210
00:10:41,230 --> 00:10:43,485
We save that for putting in the package.json.

211
00:10:43,810 --> 00:10:45,243
And you can see they go into the package.json.

212
00:10:45,520 --> 00:10:47,890
The test command has me running Mocha test.

213
00:10:47,920 --> 00:10:49,600
It might run a bunch of different tests.

214
00:10:49,840 --> 00:10:50,890
It might run multiple ones with ampersands between

215
00:10:52,810 --> 00:10:55,510
them. I won't have to go keep changing the

216
00:10:55,810 --> 00:10:56,818
Dockerfile each time I want to change my testing

217
00:10:57,430 --> 00:10:58,564
frameworks. I just know that the standard is npm test,

218
00:11:00,500 --> 00:11:02,710
and I can do the rest of it in package.json.

219
00:11:03,010 --> 00:11:04,930
So, I don't necessarily care.

220
00:11:05,140 --> 00:11:06,295
The npm is running on the test infrastructure inside of

221
00:11:08,110 --> 00:11:10,996
my Jenkins, or my Codeship, or CodeDeploy

222
00:11:11,880 --> 00:11:15,160
in AWS, or whatever is building your container images,

223
00:11:15,430 --> 00:11:18,220
because that thing is going to run the commands

224
00:11:18,520 --> 00:11:19,759
and it's all automated. I don't have to worry about running

225
00:11:20,890 --> 00:11:22,300
them locally myself.

226
00:11:23,140 --> 00:11:26,170
Now, the final proof here is to run and build

227
00:11:26,200 --> 00:11:28,000
these different images.

228
00:11:28,030 --> 00:11:29,206
We've got to build them first, so let's do that one at a

229
00:11:30,040 --> 00:11:32,950
time. I can go up here and do a docker

230
00:11:33,850 --> 00:11:35,660
build. Well, in fact, we just did that, right.

231
00:11:35,740 --> 00:11:36,916
We did a docker build of the multistage and targeted the

232
00:11:38,740 --> 00:11:41,680
prod. So, I could do

233
00:11:42,220 --> 00:11:44,800
that again and then add on docker run

234
00:11:45,340 --> 00:11:46,340
that same image.

235
00:11:51,020 --> 00:11:52,238
You'll see that it successfully ran my image, and in fact,

236
00:11:53,565 --> 00:11:54,636
if I went to a browser and I hit refresh, and I had

237
00:11:56,540 --> 00:11:57,737
published a port, which I didn't do, then I would see the

238
00:11:59,450 --> 00:12:00,450
web app.

239
00:12:00,740 --> 00:12:01,853
In this case, if you remember, we didn't add in tini.

240
00:12:02,912 --> 00:12:03,647
So tini, you could have put that in

241
00:12:05,870 --> 00:12:07,067
your Dockerfile for this assignment, and that's perfectly

242
00:12:07,790 --> 00:12:10,010
fine. Tini would have worked well here.

243
00:12:10,220 --> 00:12:11,459
I didn't put it in because it wasn't specifically necessary

244
00:12:13,160 --> 00:12:14,690
just to show off multistage.

245
00:12:14,720 --> 00:12:15,623
But, if you're doing that, you did it well.

246
00:12:17,150 --> 00:12:18,284
You did it right. And because I can't control c out of

247
00:12:19,580 --> 00:12:20,735
this. In fact, you know, it won't respond so I have the

248
00:12:22,250 --> 00:12:22,969
same problem.

249
00:12:22,970 --> 00:12:24,146
I'm going to need to open up another shell here and do a

250
00:12:25,100 --> 00:12:25,982
docker stop on that container just to quit

251
00:12:28,280 --> 00:12:29,393
it. So, for the second stage, you'll see that I did a

252
00:12:30,590 --> 00:12:33,320
docker build and I just gave it a tag here of dev

253
00:12:33,620 --> 00:12:36,860
so it would specify exactly this different image

254
00:12:37,160 --> 00:12:39,080
we would target. Now the dev stage.

255
00:12:39,440 --> 00:12:40,637
Then I'm adding the ampersands here just so that it'll do

256
00:12:42,530 --> 00:12:43,706
both commands at one time. It will build it and then run

257
00:12:44,570 --> 00:12:47,230
it. I'm throwing in the tini init

258
00:12:47,570 --> 00:12:48,746
process, just so I can control c properly out of it this

259
00:12:49,700 --> 00:12:51,380
time. Learning my lesson.

260
00:12:51,410 --> 00:12:52,790
Then I'm publishing a port 3000.

261
00:12:53,870 --> 00:12:55,004
If you were also doing this for local development, you

262
00:12:56,150 --> 00:12:58,820
would probably want to bind mount with the volume.

263
00:12:58,850 --> 00:13:00,140
That way, you get your code.

264
00:13:00,380 --> 00:13:02,043
We'll cover that in a later section.

265
00:13:05,510 --> 00:13:06,581
I can see now that my nodemon has started, and it's

266
00:13:08,090 --> 00:13:09,090
watching the files.

267
00:13:09,440 --> 00:13:12,440
If I hop over to my browser and go to localhost 3000,

268
00:13:13,640 --> 00:13:14,060
I should see the app

269
00:13:16,660 --> 00:13:17,773
running. Great. Okay. So we know that second stage is

270
00:13:19,000 --> 00:13:20,000
working.

271
00:13:21,010 --> 00:13:22,249
If I control c out of that, and I do the same thing for the

272
00:13:23,170 --> 00:13:25,300
third stage. We'll call this test.

273
00:13:25,780 --> 00:13:26,725
So, really all I need to do, and I don't need

274
00:13:28,830 --> 00:13:30,048
to publish the port because it's just going to run a quick

275
00:13:31,140 --> 00:13:32,140
test.

276
00:13:38,230 --> 00:13:40,570
Then we'll change the target, and we'll change the image

277
00:13:40,600 --> 00:13:41,600
name.

278
00:13:42,540 --> 00:13:43,737
You don't have to change the image name each time, but it

279
00:13:44,790 --> 00:13:46,200
will get confusing if you don't.

280
00:13:46,530 --> 00:13:47,748
Because you'll end up with one image and you're not really

281
00:13:48,090 --> 00:13:50,550
sure which stage that image has built into it.

282
00:13:50,580 --> 00:13:53,430
So, I always end up building different image

283
00:13:53,730 --> 00:13:56,490
tags, or just different image names altogether

284
00:13:56,730 --> 00:13:59,100
so that I know which one of these I'm using.

285
00:14:02,650 --> 00:14:05,740
You'll see that once it's run the docker run, it'll

286
00:14:05,800 --> 00:14:07,018
actually run the Mocha test just like the npm command told

287
00:14:08,920 --> 00:14:11,910
it to. It will run that sample check,

288
00:14:12,130 --> 00:14:13,130
and then we're good.

289
00:14:13,630 --> 00:14:14,764
I would actually see if it failed there at the command

290
00:14:16,240 --> 00:14:18,370
line, it would exit improperly.

291
00:14:18,400 --> 00:14:21,010
I could technically put this into my CI infrastructure.

292
00:14:21,310 --> 00:14:22,507
If I ran the docker build command and then the docker run

293
00:14:24,520 --> 00:14:27,700
command, I could do my test

294
00:14:27,760 --> 00:14:30,338
on my CI infrastructure. Now, another way you could do CI,

295
00:14:30,820 --> 00:14:33,100
which we'll talk a few times more throughout this course,

296
00:14:33,520 --> 00:14:34,381
is I could put that npm test as an actual

297
00:14:36,580 --> 00:14:38,020
line in the Dockerfile.

298
00:14:38,470 --> 00:14:41,530
So instead of it being the cmd that runs from

299
00:14:41,560 --> 00:14:44,830
the image, the idea is that while the image is building,

300
00:14:44,980 --> 00:14:47,410
it's doing the npm test command as well.

301
00:14:47,680 --> 00:14:50,660
And you could have that just be its own stage and

302
00:14:51,160 --> 00:14:52,407
how that would look is that would simply, up here,

303
00:14:55,010 --> 00:14:58,330
change this from a cmd to a run,

304
00:14:58,480 --> 00:14:59,480
and just do npm test there.

305
00:15:02,200 --> 00:15:03,334
Then down here, I could technically just not even have

306
00:15:05,200 --> 00:15:06,082
a different cmd because in this case, what

307
00:15:08,170 --> 00:15:11,590
I would do is I would have my test image build

308
00:15:11,800 --> 00:15:14,740
on my CI infrastructure and if it successfully built,

309
00:15:15,040 --> 00:15:16,150
I knew that it worked.

310
00:15:17,240 --> 00:15:18,416
You could also, if you have a production situation where

311
00:15:20,210 --> 00:15:21,407
you're just building the production image on your CI, you

312
00:15:22,970 --> 00:15:26,040
might move this layer all the way up here.

313
00:15:27,340 --> 00:15:30,430
So that right before it considers the image

314
00:15:30,460 --> 00:15:32,530
a good image, it's run all the tests.

315
00:15:32,910 --> 00:15:35,680
That's if you want your testing infrastructure to

316
00:15:36,040 --> 00:15:38,990
not complete building of your images if the tests fail.

317
00:15:39,370 --> 00:15:40,399
So, that's a little bit more of an automated way.

318
00:15:41,920 --> 00:15:44,230
That way, you could potentially have your CI infrastructure

319
00:15:44,590 --> 00:15:45,787
once it's successfully built the image, go ahead and push

320
00:15:46,900 --> 00:15:48,610
that image up into your registry.

