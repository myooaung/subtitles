WEBVTT
1
00:00:03.186 --> 00:00:06.509
Before we get to the command line stuff,

2
00:00:06.510 --> 00:00:09.350
we need to understand the Compose file format.

3
00:00:09.660 --> 00:00:12.080
Let's go over a few things and look at an example.

4
00:00:12.390 --> 00:00:15.629
First is that what we're talking about here is a Compose

5
00:00:15.630 --> 00:00:18.719
file format. It's written in YAML that we'll talk about the
standard of that

6
00:00:18.720 --> 00:00:22.280
in a second. This is really specific to Compose

7
00:00:22.320 --> 00:00:24.830
and other Dockor tools like Docker Swarm,

8
00:00:25.180 --> 00:00:26.960
Docker Enterprise Edition.

9
00:00:27.030 --> 00:00:30.119
Those tools all support this Compose file format,

10
00:00:30.120 --> 00:00:32.098
but it may look similar to other things like Kubernetes

11
00:00:33.180 --> 00:00:34.647
service definitions, and stuff like that,

12
00:00:34.648 --> 00:00:37.559
and it's not. It's totally a unique thing to Compose.

13
00:00:37.560 --> 00:00:39.120
It may look similar to other things.

14
00:00:39.540 --> 00:00:42.800
Second, the Compose file format is really designed

15
00:00:42.840 --> 00:00:45.659
to describe one or more containers

16
00:00:45.660 --> 00:00:48.389
and all the different settings you might set for running
that container.

17
00:00:48.390 --> 00:00:50.459
In Compose, it's called a service.

18
00:00:50.460 --> 00:00:53.930
It's called the service because you can run multiple
containers,

19
00:00:54.480 --> 00:00:55.880
or replicas,

20
00:00:55.980 --> 00:00:57.359
under that same service. So,

21
00:00:57.360 --> 00:01:00.659
in case you want to run multiple web apps of the same

22
00:01:00.660 --> 00:01:03.440
image, you can just create multiple replicas.

23
00:01:03.720 --> 00:01:05.488
Those are underneath what's called a service.

24
00:01:05.489 --> 00:01:08.249
You'll see that in a minute. Compose is good for many other
things,

25
00:01:08.250 --> 00:01:11.052
including documenting your networks that you want to
create,

26
00:01:11.940 --> 00:01:15.419
putting in the volumes, and all the other settings that
revolve around

27
00:01:15.420 --> 00:01:17.849
this container, or set of containers,

28
00:01:17.850 --> 00:01:20.849
that you want to create. As we'll see throughout this
course,

29
00:01:20.850 --> 00:01:24.050
there are lots of other things that this Compose YAML can
do.

30
00:01:24.240 --> 00:01:27.230
As we tend to get more advanced later on,

31
00:01:27.300 --> 00:01:30.329
we'll see things like using multiple YAML

32
00:01:30.330 --> 00:01:33.590
files and combining them together to get an output

33
00:01:33.660 --> 00:01:35.978
using templates known as YAML templating,

34
00:01:35.979 --> 00:01:38.669
and environment variables,

35
00:01:38.670 --> 00:01:40.550
and more. Just you know,

36
00:01:40.770 --> 00:01:41.866
we'll be using docker-compose.yml

37
00:01:44.550 --> 00:01:47.189
as the standard, or the default really,

38
00:01:47.190 --> 00:01:49.970
for our Compose files. But, you can use any name you want.

39
00:01:50.100 --> 00:01:53.069
You can just specify it manually during your Docker Compose

40
00:01:53.070 --> 00:01:56.238
commands, but it's way easier to just use a default
out-of-the-box

41
00:01:56.670 --> 00:02:00.119
and stick with that until you need more advanced setups

42
00:02:00.120 --> 00:02:02.420
where we create multiple types of Compose files.

43
00:02:02.780 --> 00:02:06.650
Your Compose files are going to be made using the YAML
specification,

44
00:02:06.750 --> 00:02:09.538
which stands for YAML Ain't Markup Language,

45
00:02:09.538 --> 00:02:11.159
which is kind of silly.

46
00:02:11.160 --> 00:02:13.310
It's actually a recursive acronym,

47
00:02:13.470 --> 00:02:16.499
which means that it has its own acronym name in the

48
00:02:16.500 --> 00:02:17.480
acronym itself.

49
00:02:18.050 --> 00:02:20.894
People have said it used to stand for Yet Another Markup
Language

50
00:02:21.420 --> 00:02:23.729
but supposedly that was either never the case,

51
00:02:23.730 --> 00:02:25.349
or changed at some point. Anyway,

52
00:02:25.350 --> 00:02:27.290
it doesn't really matter. We call it YAML.

53
00:02:27.870 --> 00:02:30.269
It's used with Docker command lines for Swarm

54
00:02:30.270 --> 00:02:31.850
and Kubernetes. It's used with Kubernetes itself

55
00:02:32.730 --> 00:02:34.139
and allow the Kubernetes tools.

56
00:02:34.140 --> 00:02:35.429
It's used by Amazon

57
00:02:35.430 --> 00:02:38.549
and just so many tools in the industry as a data

58
00:02:38.550 --> 00:02:40.190
serialization language.

59
00:02:40.740 --> 00:02:43.829
That really just means that it's a way for us to describe
data

60
00:02:43.830 --> 00:02:45.207
in simple values,

61
00:02:45.570 --> 00:02:48.599
that is then serialized and sent on to some other system
where

62
00:02:48.600 --> 00:02:49.952
it's processed. Really,

63
00:02:50.460 --> 00:02:52.469
YAML is the means to an end.

64
00:02:52.470 --> 00:02:54.059
It's the way we describe something

65
00:02:54.060 --> 00:02:56.390
and get it to the format that the computer can read it.

66
00:02:56.550 --> 00:02:59.519
The nice thing about YAML, unlike some other formats like

67
00:02:59.520 --> 00:03:00.551
XML, or SOAP,

68
00:03:00.840 --> 00:03:03.869
or even JSON, is that YAML is easy for humans to

69
00:03:03.870 --> 00:03:04.079
read.

70
00:03:04.080 --> 00:03:05.830
That's one of its primary goals.

71
00:03:05.850 --> 00:03:08.150
You'll notice that right away as we start to use it.

72
00:03:08.370 --> 00:03:11.819
The two big concepts here I want to make sure you
understand are

73
00:03:11.820 --> 00:03:13.169
the colon and the dash.

74
00:03:13.170 --> 00:03:15.290
So any time you see a colon,

75
00:03:15.300 --> 00:03:17.675
that indicates a key value pair.

76
00:03:17.850 --> 00:03:21.350
Sometimes that value may be other key value pairs

77
00:03:21.360 --> 00:03:24.080
or even a subset of information below it.

78
00:03:24.210 --> 00:03:27.350
We don't use tabs for indentation. We use spaces.

79
00:03:27.690 --> 00:03:30.689
I mostly will be using two spaces because I think

80
00:03:30.690 --> 00:03:32.550
that's just shorter and a little easier to read,

81
00:03:32.551 --> 00:03:34.619
but you may see me use four at times.

82
00:03:34.620 --> 00:03:36.840
It really doesn't matter. Certain files are in four,

83
00:03:36.841 --> 00:03:40.380
and certain are in two. There's no sort of set industry
standard.

84
00:03:40.830 --> 00:03:42.569
Anytime you see a list,

85
00:03:42.570 --> 00:03:44.939
and a list really is a single value,

86
00:03:44.940 --> 00:03:46.239
there's no key value.

87
00:03:46.240 --> 00:03:48.230
It's just list of values,

88
00:03:48.270 --> 00:03:49.619
you'll see us using a dash.

89
00:03:49.620 --> 00:03:51.779
If you open up the entire repository

90
00:03:51.780 --> 00:03:54.119
and then go into the sample01 directory,

91
00:03:54.120 --> 00:03:57.326
you'll see a really basic example of a node.js

92
00:03:57.750 --> 00:03:59.369
app with a Compose file

93
00:03:59.370 --> 00:04:01.169
and a Dockerfile. In most cases,

94
00:04:01.170 --> 00:04:02.849
you're going to need that Dockerfile obviously,

95
00:04:02.850 --> 00:04:05.339
but for now I want to just focus on the Compose file,

96
00:04:05.340 --> 00:04:06.940
which we have set at version 2.0.

97
00:04:08.010 --> 00:04:09.869
In a minute, I'll explain the difference between 2

98
00:04:09.870 --> 00:04:13.049
and 3. You'll see here that we have one service,

99
00:04:13.050 --> 00:04:14.510
and we can call it whatever we want.

100
00:04:14.640 --> 00:04:15.929
Some people might call it node.

101
00:04:15.930 --> 00:04:17.798
I would call it web, if it's a web frontend.

102
00:04:17.970 --> 00:04:19.302
Or API, if it's a Web API.

103
00:04:19.589 --> 00:04:20.660
Doesn't really matter.

104
00:04:20.970 --> 00:04:24.130
That's how you'll be referring to this container,

105
00:04:24.180 --> 00:04:27.410
or set of containers, when you're using a Docker Compose
command line.

106
00:04:27.510 --> 00:04:30.509
You'll notice that we have a great example on line 1

107
00:04:30.510 --> 00:04:31.820
of a key value,

108
00:04:31.950 --> 00:04:33.110
with the colon,

109
00:04:33.270 --> 00:04:34.739
and then you'll see under here,

110
00:04:34.740 --> 00:04:37.709
we have key values that are a

111
00:04:37.710 --> 00:04:39.389
subset of other keys.

112
00:04:39.390 --> 00:04:42.569
Technically, all of this is part of the value

113
00:04:42.570 --> 00:04:43.700
for services,

114
00:04:43.890 --> 00:04:45.209
and we create a hierarchy here

115
00:04:45.210 --> 00:04:46.260
with our tabs.

116
00:04:46.800 --> 00:04:48.779
Under services, you can have many services.

117
00:04:48.780 --> 00:04:50.909
Again, when you think of a service,

118
00:04:50.910 --> 00:04:54.239
you think one or more containers based on a single image.

119
00:04:54.240 --> 00:04:55.442
That's really what a service is.

120
00:04:56.090 --> 00:04:59.729
We're specifing the image we want it to make when we build

121
00:04:59.730 --> 00:05:02.990
this directory. That's what the dot inside the build means
is,

122
00:05:03.090 --> 00:05:04.579
build an image from this directory,

123
00:05:04.580 --> 00:05:07.070
is sort of shorthand for the current working directory.

124
00:05:07.320 --> 00:05:09.290
Then the ports is a list,

125
00:05:09.390 --> 00:05:11.720
because we can have many ports exposed.

126
00:05:12.000 --> 00:05:14.279
Rather than there being a key

127
00:05:14.280 --> 00:05:15.800
and value for each one,

128
00:05:15.840 --> 00:05:18.989
we just make it a list of entries that are then processed

129
00:05:18.990 --> 00:05:20.420
by the Docker Engine.

130
00:05:21.220 --> 00:05:24.225
Lastly, real quick, before we move on to the command line
stuff,

131
00:05:24.226 --> 00:05:27.489
let's talk about the versions of Compose files.

132
00:05:27.490 --> 00:05:29.559
And there's a little bit of confusion in the industry.

133
00:05:29.560 --> 00:05:31.329
I'm actually working with the Docker team,

134
00:05:31.330 --> 00:05:32.829
right now, while this course is being built,

135
00:05:32.830 --> 00:05:34.380
to kind of help clear this up.

136
00:05:34.630 --> 00:05:37.360
There's Version 2 and there's Version 3 of the Compose
file.

137
00:05:37.480 --> 00:05:40.890
Most common knowledge believes that the Version 3

138
00:05:40.900 --> 00:05:43.629
is the complete replacement for Version 2,

139
00:05:43.630 --> 00:05:45.830
and that we should all be using Version 3 from now on.

140
00:05:45.880 --> 00:05:47.040
That's not really true.

141
00:05:47.290 --> 00:05:50.093
I'm here to tell you that if you're just focusing on Docker
Compose

142
00:05:50.320 --> 00:05:51.819
for local dev and test,

143
00:05:51.820 --> 00:05:55.059
and you're not planning on using either the Swarm

144
00:05:55.060 --> 00:05:56.970
orchestrator on a server

145
00:05:57.010 --> 00:05:59.349
or using the Docker Enterprise Edition

146
00:05:59.350 --> 00:06:01.620
with a Kubernetes cluster,

147
00:06:01.750 --> 00:06:03.819
then there's no reason to use the V3.

148
00:06:03.820 --> 00:06:06.999
Because really, the V3 is focused on multi-node server

149
00:06:07.000 --> 00:06:08.739
orchestration features,

150
00:06:08.740 --> 00:06:10.427
such as secrets and configs,

151
00:06:11.080 --> 00:06:14.610
and deploying to an orchestrator type of concepts.

152
00:06:14.830 --> 00:06:17.829
Version 2 was really focused on the single node using

153
00:06:17.830 --> 00:06:19.200
the node you're on

154
00:06:19.270 --> 00:06:20.559
with a development workflow.

155
00:06:20.560 --> 00:06:23.649
It has some unique features that are not found in V3 that

156
00:06:23.650 --> 00:06:25.680
we'll talk about later in this course.

157
00:06:25.690 --> 00:06:27.699
For most cases, when we start out through this course,

158
00:06:27.700 --> 00:06:29.409
you'll see me focusing on V2

159
00:06:29.410 --> 00:06:31.569
and then whenever we get to any V3 stuff,

160
00:06:31.570 --> 00:06:33.400
I'll specifically call out why we're doing that.

