WEBVTT
1
00:00:02.610 --> 00:00:05.452
You've heard me talk about proxies several times before in

2
00:00:05.700 --> 00:00:08.850
this course. But right now, I want to focus on production

3
00:00:08.880 --> 00:00:11.640
architecture for your proxies if you need them.

4
00:00:12.000 --> 00:00:14.548
Specifically here, I'm talking about web proxies, or

5
00:00:14.790 --> 00:00:17.430
reverse proxies, for the HTTP protocol.

6
00:00:17.730 --> 00:00:19.385
The common ports there are port 80 and 443.

7
00:00:20.510 --> 00:00:23.099
As you might have imagined, or as you've probably had

8
00:00:23.100 --> 00:00:25.942
troubles with on your own machine, how do you get multiple

9
00:00:26.040 --> 00:00:28.075
containers to all list on 443 and 80?

10
00:00:28.500 --> 00:00:30.929
How do you get all these different containers to respond on

11
00:00:30.930 --> 00:00:33.037
that port? The answer is a proxy that looks

12
00:00:33.930 --> 00:00:36.630
at the URL, or the DNS name, or both.

13
00:00:37.020 --> 00:00:39.911
And then routes the request to the backend containers based

14
00:00:40.440 --> 00:00:41.790
on those incoming requests.

15
00:00:42.168 --> 00:00:44.275
In this scenario, Nginx and HAProxy are the

16
00:00:45.150 --> 00:00:47.845
two traditional options, and you can use those natively

17
00:00:48.630 --> 00:00:51.040
in sort of their pure, official format.

18
00:00:51.240 --> 00:00:54.119
But, you can also just search for Docker, or Kubernetes, or

19
00:00:54.120 --> 00:00:56.490
whatever you might be using, ECS, something like that.

20
00:00:56.700 --> 00:00:59.542
You might find proxy containers with those tools that have

21
00:00:59.730 --> 00:01:02.400
specific scripts, or other additional tools in them,

22
00:01:02.760 --> 00:01:05.700
to make it easier depending on your setup.

23
00:01:06.060 --> 00:01:07.702
You've seen in this course I've talked about Traefik.

24
00:01:09.000 --> 00:01:10.770
Traefik is sort of the new kid on the block.

25
00:01:11.190 --> 00:01:14.070
I really like it just because it has features

26
00:01:14.310 --> 00:01:16.739
that are specific to the problems that we're trying to face

27
00:01:16.740 --> 00:01:19.289
with all these different containers running on either a

28
00:01:19.290 --> 00:01:21.990
single host, or in a cluster, like with Swarm, or

29
00:01:22.220 --> 00:01:23.520
Kubernetes, or ECS.

30
00:01:24.630 --> 00:01:27.359
Traefik automatically does things like Let's Encrypt, SSL

31
00:01:27.360 --> 00:01:29.789
certificates. It allows you to easily configure from the

32
00:01:29.790 --> 00:01:32.690
command line without being forced to use a config file,

33
00:01:33.000 --> 00:01:35.548
and lots of other benefits. They're getting ready to

34
00:01:35.730 --> 00:01:37.530
release a new version at this point.

35
00:01:37.620 --> 00:01:40.500
The 2.0 is still not quite officially released.

36
00:01:40.710 --> 00:01:43.319
But, the 2.0 version of Traefik is going to have a lot more

37
00:01:43.320 --> 00:01:46.410
functionality, including non HTTP protocols.

38
00:01:46.710 --> 00:01:48.719
You definitely want to check that out even for your

39
00:01:48.720 --> 00:01:49.800
production workloads.

40
00:01:50.670 --> 00:01:53.880
I can't stress enough that early on in your design

41
00:01:54.060 --> 00:01:57.420
of whether you're building new Node.js apps, or converting

42
00:01:57.630 --> 00:01:59.737
from Node.js apps that are precontainer and

43
00:02:00.630 --> 00:02:03.150
putting them into containers, that you consider

44
00:02:03.600 --> 00:02:05.320
whether or not you need proxies at all.

45
00:02:05.340 --> 00:02:08.122
If you are going to use them, how they're going to be set

46
00:02:08.176 --> 00:02:08.797
up.

47
00:02:08.798 --> 00:02:11.199
Here's a couple of network diagrams and different

48
00:02:11.910 --> 00:02:14.605
ways you can go about considering your proxies when you

49
00:02:14.790 --> 00:02:16.252
deal with Node.js containers.

50
00:02:17.860 --> 00:02:20.731
If you were making Node.js apps before Docker,

51
00:02:21.550 --> 00:02:23.951
you might have a cloud server over here, and your

52
00:02:24.610 --> 00:02:25.810
users are over here.

53
00:02:26.410 --> 00:02:29.780
You would probably just be running Node straight on the VM.

54
00:02:30.870 --> 00:02:32.121
Then, a proxy app on

55
00:02:33.830 --> 00:02:36.027
that same machine. So, it might be HAProxy, Nginx,

56
00:02:36.028 --> 00:02:37.028
whatever.

57
00:02:38.210 --> 00:02:41.480
Then, users are talking directly to that server,

58
00:02:41.510 --> 00:02:44.000
and the proxy is listening on port 80.

59
00:02:44.700 --> 00:02:47.540
Then it's probably passing traffic over to Node using

60
00:02:47.620 --> 00:02:48.620
localhost.

61
00:02:49.900 --> 00:02:52.269
All right. That's a pretty traditional model for a single

62
00:02:52.270 --> 00:02:54.100
server, simplistic setup.

63
00:02:55.030 --> 00:02:58.180
As we change to Docker, that changes

64
00:02:58.240 --> 00:03:01.020
a little bit. If we just look at a single Docker

65
00:03:01.300 --> 00:03:04.410
server, same scenario, server and user,

66
00:03:05.140 --> 00:03:06.520
then we've got two containers.

67
00:03:07.210 --> 00:03:08.940
These aren't bundled in the same container, right.

68
00:03:08.980 --> 00:03:12.040
So, we have Node running in here in one container.

69
00:03:12.540 --> 00:03:14.843
We've got your proxy app running in a different

70
00:03:15.490 --> 00:03:16.490
container.

71
00:03:17.640 --> 00:03:20.820
That proxy is published on port 80

72
00:03:21.000 --> 00:03:22.000
and probably 443.

73
00:03:23.940 --> 00:03:26.642
Then, it's using Docker networking on the backend to

74
00:03:28.110 --> 00:03:30.000
pass the traffic over to the Node app.

75
00:03:30.390 --> 00:03:32.639
It's not using localhost because that, in the proxy

76
00:03:32.640 --> 00:03:34.500
container, would be the proxy itself.

77
00:03:34.530 --> 00:03:36.659
So, obviously it's going to be using Docker networking

78
00:03:36.660 --> 00:03:39.061
there. Then, the user would talk to the published

79
00:03:39.760 --> 00:03:42.670
port of the proxy there. So, not a whole lot of difference.

80
00:03:43.410 --> 00:03:45.830
But when you shift to multiple servers, that's

81
00:03:46.950 --> 00:03:48.480
when you start to consider clustering.

82
00:03:48.510 --> 00:03:50.369
When you need more than one server, and you don't want to

83
00:03:50.370 --> 00:03:52.230
have to individually control each one.

84
00:03:52.560 --> 00:03:54.659
I would note that in this situation, if you simply wanted a

85
00:03:54.660 --> 00:03:57.630
couple of servers, and they were going to run your Node app

86
00:03:57.840 --> 00:04:00.000
for redundancy on across a couple servers, you would just

87
00:04:00.300 --> 00:04:02.999
do this same thing on a couple of machines, and you would

88
00:04:03.000 --> 00:04:04.120
control them individually.

89
00:04:04.770 --> 00:04:05.970
But, that starts to get tedious.

90
00:04:06.060 --> 00:04:07.570
Let's look at a different example.

91
00:04:08.610 --> 00:04:11.610
In this case, we've got three servers running Docker,

92
00:04:12.480 --> 00:04:14.550
and the user needs to get that same website.

93
00:04:15.000 --> 00:04:17.760
So, multiple, different options exist here.

94
00:04:18.029 --> 00:04:20.850
You might have a container with Node running in it

95
00:04:21.149 --> 00:04:22.290
on each box.

96
00:04:23.190 --> 00:04:24.660
You might have a proxy on each

97
00:04:26.190 --> 00:04:29.226
one of those as well. We've got Node and proxy, Node

98
00:04:29.760 --> 00:04:32.560
and proxy, and that same setup, right.

99
00:04:32.610 --> 00:04:34.770
So, that's a simple design.

100
00:04:35.280 --> 00:04:38.569
It's probably not good for orchestration because typically,

101
00:04:39.210 --> 00:04:41.807
in an orchestrator like Kubernetes, ECS and Swarm,

102
00:04:42.780 --> 00:04:45.360
you're not going to have the exact, same number of Node

103
00:04:45.600 --> 00:04:46.920
processes as you would have proxies.

104
00:04:47.370 --> 00:04:49.839
You probably just want enough proxies to be redundant,

105
00:04:49.840 --> 00:04:51.480
maybe two or three.

106
00:04:51.810 --> 00:04:53.525
But, you might need eight or ten of

107
00:04:54.840 --> 00:04:57.239
your containers running your Node app, just for either

108
00:04:57.240 --> 00:04:58.980
performance or capacity reasons.

109
00:04:59.520 --> 00:05:02.880
Depending on which orchestrator you use, you might have

110
00:05:03.120 --> 00:05:05.330
one or two servers using DNS round-robin,

111
00:05:06.330 --> 00:05:08.829
where the user's browser would be getting different

112
00:05:09.180 --> 00:05:10.530
connections to different servers.

113
00:05:11.070 --> 00:05:13.199
Then, they would be connecting to the proxy there, just

114
00:05:13.200 --> 00:05:14.250
like we saw before.

115
00:05:14.530 --> 00:05:16.890
Then, the proxy on the backend would go to the Node there.

116
00:05:17.340 --> 00:05:19.169
But, when you're in a cluster like this, you really want to

117
00:05:19.170 --> 00:05:20.370
use all the Node apps.

118
00:05:20.610 --> 00:05:23.039
So, depending on your orchestrator, you're going to be

119
00:05:23.040 --> 00:05:25.586
using this backend network in the orchestration

120
00:05:26.520 --> 00:05:28.774
so that your proxies pass the connections into

121
00:05:29.670 --> 00:05:30.670
that network.

122
00:05:32.040 --> 00:05:35.036
Then, that network maybe has a load balancer, or

123
00:05:36.120 --> 00:05:38.429
something that's going to sit in front of your Node apps.

124
00:05:38.430 --> 00:05:39.510
So, it's another layer.

125
00:05:40.230 --> 00:05:42.925
Then, your traffic would pass to your Node apps on each

126
00:05:43.200 --> 00:05:45.405
individual box. Go back out, depending on the

127
00:05:46.320 --> 00:05:48.540
routing rules in round-robin and all that sort of thing.

128
00:05:49.200 --> 00:05:52.170
Again, how you set up that proxy is very specific

129
00:05:52.230 --> 00:05:54.389
to the orchestrator and tooling that you're using.

130
00:05:54.390 --> 00:05:56.160
So, you're definitely going to want to spend some time

131
00:05:56.520 --> 00:05:59.099
understanding whether there's a built-in proxy for that

132
00:05:59.100 --> 00:06:01.820
system, like Ingress for Kubernetes.

133
00:06:02.520 --> 00:06:03.870
Or, whether you're going to need to add something on your

134
00:06:03.960 --> 00:06:05.438
own, like with Swarm.

135
00:06:06.570 --> 00:06:08.873
Maybe you might have this other option where if

136
00:06:09.690 --> 00:06:12.780
you're using something like ECS, or Kubernetes with its

137
00:06:12.870 --> 00:06:14.977
Ingress with an external load balancer, you

138
00:06:15.930 --> 00:06:17.460
might have something up front.

139
00:06:18.270 --> 00:06:21.450
This is a different design where the user's hitting

140
00:06:21.510 --> 00:06:23.874
a load balancer that's external,

141
00:06:24.570 --> 00:06:26.820
Like an Amazon ALB or ELB,

142
00:06:27.750 --> 00:06:29.120
that sits in front of your servers.

143
00:06:29.680 --> 00:06:32.375
And, in this case, you may be able to get away with not

144
00:06:32.880 --> 00:06:36.050
running the proxy at all, depending on how you argue

145
00:06:36.060 --> 00:06:38.755
using your proxy. If you're simply using your proxy for

146
00:06:38.940 --> 00:06:41.820
port traffic, and you only really care about

147
00:06:42.090 --> 00:06:44.932
making sure that all your Node apps are responded to, your

148
00:06:45.000 --> 00:06:47.760
load balance can pass traffic over here.

149
00:06:47.790 --> 00:06:49.056
Maybe this one's running on 8080.

150
00:06:50.220 --> 00:06:52.490
Maybe this one over here is running on 4320.

151
00:06:53.970 --> 00:06:55.689
It can pass the traffic to these in

152
00:06:57.600 --> 00:06:58.610
a different fashion.

153
00:06:59.430 --> 00:07:01.889
I've just picked random ports here because depending on

154
00:07:01.890 --> 00:07:04.536
your design, these containers may spin up on different

155
00:07:04.650 --> 00:07:06.904
ports. It's the job of your orchestrator, back

156
00:07:07.860 --> 00:07:10.800
here, to let the load balancer know

157
00:07:11.130 --> 00:07:13.874
where all the Node containers are running and how to get

158
00:07:14.190 --> 00:07:16.983
to them. Of course, with the different designs I've shown

159
00:07:17.280 --> 00:07:19.142
here, there are lots of middle ground.

160
00:07:19.860 --> 00:07:22.070
There are options where you use an external load balancer

161
00:07:22.590 --> 00:07:24.480
and proxies inside your containers.

162
00:07:24.920 --> 00:07:27.566
Really, if you can make it up, it's probably been done

163
00:07:27.720 --> 00:07:30.330
before. This is important to understand.

164
00:07:30.390 --> 00:07:31.894
How are your connections coming in?

165
00:07:31.925 --> 00:07:33.493
Then also, how are your services

166
00:07:35.310 --> 00:07:37.859
inside your server, or cluster, reaching each other when

167
00:07:37.860 --> 00:07:38.230
they need to?

