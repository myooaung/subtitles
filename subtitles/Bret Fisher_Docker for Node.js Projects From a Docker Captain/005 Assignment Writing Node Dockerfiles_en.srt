1
00:00:02,590 --> 00:00:05,440
Now that we've covered lots of stuff in this section,

2
00:00:05,860 --> 00:00:06,989
let's have our first assignment.

3
00:00:07,780 --> 00:00:10,330
This one is going to be you building a Dockerfile from scratch.

4
00:00:10,530 --> 00:00:11,679
So, it's going to test your knowledge,

5
00:00:11,879 --> 00:00:15,130
a little bit, about what you remember from the previous lectures.

6
00:00:15,460 --> 00:00:17,860
If you look in the assignment Dockerfile directory,

7
00:00:18,160 --> 00:00:21,220
you'll see a mostly empty Dockerfile in there.

8
00:00:21,420 --> 00:00:23,739
It's got basically the Docker commands,

9
00:00:23,939 --> 00:00:25,119
the run, the copy,

10
00:00:25,319 --> 00:00:26,680
the cmd, the from,

11
00:00:26,980 --> 00:00:29,020
those things, but the rest of it's blank.

12
00:00:29,280 --> 00:00:32,319
So, I want you to kind of work at what you think that all needs to

13
00:00:32,519 --> 00:00:34,900
be based on the lectures you've taken in this section.

14
00:00:35,320 --> 00:00:38,799
So expect to have this be an iterative

15
00:00:38,999 --> 00:00:40,402
process where you're building,

16
00:00:40,602 --> 00:00:42,850
and maybe it doesn't work right away the first time.

17
00:00:43,090 --> 00:00:45,039
Maybe you try again, and then it fails,

18
00:00:45,239 --> 00:00:46,690
or maybe it doesn't work the way you expect.

19
00:00:46,930 --> 00:00:49,930
You definitely want to run this image to make sure it runs properly

20
00:00:50,130 --> 00:00:52,959
and successfully launches the sample app that's in

21
00:00:53,159 --> 00:00:54,639
that directory. That simple app,

22
00:00:54,839 --> 00:00:55,989
by the way, is a Happy app.

23
00:00:56,189 --> 00:00:57,919
It's just an API builder for JavaScript.

24
00:00:59,080 --> 00:01:01,069
It should just run out-of-the-box with that app,

25
00:01:01,269 --> 00:01:04,328
that js, you can look in the package file for any more info you need

26
00:01:04,529 --> 00:01:05,859
on what to run.

27
00:01:06,430 --> 00:01:09,118
This would be a great example of a real-world

28
00:01:09,580 --> 00:01:12,146
scenario of taking an app that you're...someone

29
00:01:12,640 --> 00:01:15,900
in your team has given you and you're playing the role of the DevOps person,

30
00:01:16,100 --> 00:01:18,340
and they're saying hey, make an image for this.

31
00:01:18,610 --> 00:01:20,120
This app that we already have.

32
00:01:20,380 --> 00:01:21,750
This happens to me all the time.

33
00:01:21,950 --> 00:01:24,310
It's a very common practice in DevOps where you're taking

34
00:01:24,910 --> 00:01:26,730
apps and migrating them in the containers.

35
00:01:26,930 --> 00:01:29,230
We call that a container image migration.

36
00:01:29,500 --> 00:01:32,620
So, your first step is usually learning about the app

37
00:01:32,860 --> 00:01:35,259
and then getting the Dockerfile to work so that it builds

38
00:01:35,459 --> 00:01:36,310
and runs properly,

39
00:01:36,730 --> 00:01:38,950
and that it's doing things like running on the right port.

40
00:01:39,280 --> 00:01:42,249
In this case, expect to have to look at the

41
00:01:42,449 --> 00:01:45,550
app.js file. Expect to look at the package JSON file.

42
00:01:45,880 --> 00:01:48,009
Look for the port you're gonna need,

43
00:01:48,209 --> 00:01:50,979
and stuff like that. Some other things to keep in mind is that you

44
00:01:51,179 --> 00:01:52,670
should start with Node 10.15.

45
00:01:53,620 --> 00:01:55,030
That's what I've tested this on.

46
00:01:55,230 --> 00:01:56,380
Expect to start

47
00:01:56,580 --> 00:01:57,790
with that on your from image

48
00:01:57,990 --> 00:01:59,200
and you're going to be using Alpine there.

49
00:01:59,400 --> 00:02:00,500
Look up the right image name.

50
00:02:00,810 --> 00:02:02,080
Like you previously learned,

51
00:02:02,410 --> 00:02:05,429
this is a legacy app that doesn't properly handle shutdown so you're

52
00:02:05,629 --> 00:02:06,880
going to need to install

53
00:02:07,080 --> 00:02:08,085
and then run with tini.

54
00:02:08,860 --> 00:02:10,418
In my previous lectures,

55
00:02:10,618 --> 00:02:12,904
you saw me using an entry point script to launch tini,

56
00:02:13,690 --> 00:02:16,839
and then Node runs in the cmd below

57
00:02:17,039 --> 00:02:18,990
that. That's what I've set up this Dockerfile for,

58
00:02:19,190 --> 00:02:20,200
so hopefully you can figure that out.

59
00:02:20,560 --> 00:02:23,866
Then also remember my tips around copying in your package

60
00:02:24,066 --> 00:02:25,510
JSON in your logfiles first.

61
00:02:25,810 --> 00:02:27,729
Then doing the npm install

62
00:02:27,929 --> 00:02:30,939
and the cleanup. Then copying in all of your files

63
00:02:31,139 --> 00:02:34,060
after that. So, you're going to follow that same practice here again.

64
00:02:34,260 --> 00:02:36,222
The Dockerfile kind of hints at that a little bit.

65
00:02:36,422 --> 00:02:38,170
Once you think you've got it running,

66
00:02:38,370 --> 00:02:39,228
or if you get stuck,

67
00:02:39,820 --> 00:02:41,878
check out my answer video as I walk through it step-by-step,

68
00:02:42,400 --> 00:02:43,720
explaining how I do it.

69
00:02:43,930 --> 00:02:46,060
Again, it may be a little bit different than yours,

70
00:02:46,260 --> 00:02:48,130
but if you get the same goals out of it

71
00:02:48,330 --> 00:02:49,540
and it does work properly,

72
00:02:49,840 --> 00:02:52,294
then there might be slight variances between your Dockerfile

73
00:02:52,510 --> 00:02:53,520
and mine. Have fun.

