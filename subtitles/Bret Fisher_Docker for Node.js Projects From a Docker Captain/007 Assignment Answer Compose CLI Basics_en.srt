1
00:00:02,600 --> 00:00:05,629
You've arrived at the assignment answers for

2
00:00:05,630 --> 00:00:07,390
the first assignment in the course.

3
00:00:07,520 --> 00:00:10,639
Hopefully, you're not cheating and that you've tried this
on your own a little

4
00:00:10,640 --> 00:00:13,639
bit and at least got as far as you can before

5
00:00:13,640 --> 00:00:16,120
reading this assignment or watching this assignment.

6
00:00:16,980 --> 00:00:19,909
I also note in the assignment itself,

7
00:00:19,910 --> 00:00:23,209
there's also a resource there that is going to have

8
00:00:23,210 --> 00:00:26,239
the information from the slides so that you can just pull
down a text file

9
00:00:26,240 --> 00:00:29,110
and that way you don't have to keep watching the assignment
video.

10
00:00:29,270 --> 00:00:30,580
Hopefully, you saw that.

11
00:00:30,650 --> 00:00:32,658
I'm going to run through this, just like I was you,

12
00:00:32,659 --> 00:00:35,629
and I'll pass along some information along the way on why
I'm doing what

13
00:00:35,630 --> 00:00:37,330
I'm doing and how it works.

14
00:00:37,370 --> 00:00:40,129
We're in the sample -O2 directory,

15
00:00:40,130 --> 00:00:43,249
and in here I have a Node

16
00:00:43,250 --> 00:00:45,280
app that you probably saw from Docker Mastery.

17
00:00:45,500 --> 00:00:48,100
It's similar to the one in Docker Mastery if you

18
00:00:48,530 --> 00:00:49,909
actually took that course.

19
00:00:49,910 --> 00:00:51,569
Then here, I'm really just going to run this

20
00:00:51,570 --> 00:00:52,960
with Docker Compose

21
00:00:53,120 --> 00:00:55,250
and go through the typical workflow of the day.

22
00:00:56,640 --> 00:00:58,709
You'll see that I have a Compose file already here

23
00:00:58,710 --> 00:01:01,769
and a Dockerfile for you, so we don't really need to change
those

24
00:01:01,770 --> 00:01:04,640
yet. I'm going to run a docker compose up.

25
00:01:05,160 --> 00:01:06,680
It'll build my image,

26
00:01:06,840 --> 00:01:10,250
running through each of the steps, including the npm
install that will take a second.

27
00:01:10,590 --> 00:01:12,059
This is running in the foreground,

28
00:01:12,060 --> 00:01:13,870
right. So, we're gonna see the logs,

29
00:01:13,980 --> 00:01:17,279
and if you wanted to actually

30
00:01:17,280 --> 00:01:19,439
see something, you're going to have to,

31
00:01:19,440 --> 00:01:20,842
at the command line, if you want to run other commands.

32
00:01:20,843 --> 00:01:22,719
Really, we need to run this in detach mode.

33
00:01:23,220 --> 00:01:25,220
I like you to hit control c,

34
00:01:25,290 --> 00:01:28,589
and then we're going to do a docker compose

35
00:01:28,590 --> 00:01:31,679
down. One thing you should note here is if you just kind of
wanted to dig around,

36
00:01:31,680 --> 00:01:33,630
is if I did a docker image ls

37
00:01:34,290 --> 00:01:37,071
and looked through my images, you see that I have the
sample 02

38
00:01:37,770 --> 00:01:38,625
image in there.

39
00:01:39,840 --> 00:01:43,460
If I do a docker compose down,

40
00:01:44,100 --> 00:01:45,659
it will delete the container

41
00:01:45,660 --> 00:01:46,850
and the network,

42
00:01:47,040 --> 00:01:48,719
but it won't delete the image.

43
00:01:48,720 --> 00:01:50,345
If I did a docker image ls,

44
00:01:50,550 --> 00:01:52,799
then you can see it's still there,

45
00:01:52,800 --> 00:01:56,360
right. You would have to run other docker compose down
commands

46
00:01:56,610 --> 00:01:57,929
to delete other things.

47
00:01:57,930 --> 00:02:00,540
If you just did a docker compose down --help,

48
00:02:00,541 --> 00:02:03,489
you will see that there's multiple options there.

49
00:02:03,490 --> 00:02:06,650
We talked about the -v in previous lectures.

50
00:02:06,780 --> 00:02:10,128
You also have the option here to remove images if you so
choose.

51
00:02:10,199 --> 00:02:13,349
If I wanted to delete all images for this

52
00:02:13,350 --> 00:02:17,210
project, I could do a --rmi space local,

53
00:02:17,340 --> 00:02:19,850
and that will be this line right here.

54
00:02:20,040 --> 00:02:23,129
That will basically tell it to delete all custom images it

55
00:02:23,130 --> 00:02:24,809
built as a part of the docker compose up.

56
00:02:24,810 --> 00:02:26,750
It won't delete ones it downloaded,

57
00:02:26,790 --> 00:02:27,890
but it will delete custom built ones.

58
00:02:28,310 --> 00:02:30,269
I don't normally do that, or have to do that,

59
00:02:30,270 --> 00:02:32,610
because I find that Docker's build process,

60
00:02:32,690 --> 00:02:35,609
it either works or it doesn't. The cache works correctly,

61
00:02:35,610 --> 00:02:39,059
so you don't need to delete images as a part of a
troubleshooting

62
00:02:39,060 --> 00:02:42,029
step. If I wanted to not use

63
00:02:42,030 --> 00:02:45,029
the cache, I would need to do a docker compose

64
00:02:45,030 --> 00:02:46,739
build no cache,

65
00:02:46,740 --> 00:02:49,390
which is similar to the docker build no cache option,

66
00:02:49,500 --> 00:02:52,260
and that will build it from scratch every time

67
00:02:52,770 --> 00:02:54,026
if I run that command. So,

68
00:02:54,040 --> 00:02:56,339
you don't need to delete the image manually.

69
00:02:56,340 --> 00:02:59,519
You could just use that no cache option if you think you
want to start from scratch.

70
00:02:59,520 --> 00:03:02,549
Maybe you had a run command that succeeded

71
00:03:02,550 --> 00:03:06,037
but you actually want it to force running that run command
anyway,

72
00:03:06,510 --> 00:03:09,029
you could do that. Again, it's not a common problem

73
00:03:09,030 --> 00:03:11,459
and a common issue, but there it is for you.

74
00:03:11,460 --> 00:03:13,385
We'll do another docker compose up

75
00:03:15,110 --> 00:03:17,659
with a -d this time so we get our command line back.

76
00:03:17,660 --> 00:03:19,909
Then, there's other common commands you'll run,

77
00:03:19,910 --> 00:03:20,906
like a docker compose ps.

78
00:03:23,210 --> 00:03:24,609
That's going to give me several things.

79
00:03:24,610 --> 00:03:26,599
It's going to tell me the name of the service.

80
00:03:26,600 --> 00:03:28,150
I can kind of tell over here,

81
00:03:28,190 --> 00:03:29,810
without even looking at the compose file,

82
00:03:30,140 --> 00:03:31,900
the name of the project is sample 02.

83
00:03:32,180 --> 00:03:35,209
Then here's an underscore that separates the different
parts of the image

84
00:03:35,210 --> 00:03:38,470
name. The second part there is just the name of the
service.

85
00:03:38,480 --> 00:03:41,650
Then the next one is the numerical number of the

86
00:03:41,810 --> 00:03:44,779
replica. By default, every service has one

87
00:03:44,780 --> 00:03:46,560
container or replica.

88
00:03:46,760 --> 00:03:50,089
If I told it to spin up multiple containers

89
00:03:50,090 --> 00:03:53,110
for that service and run basically multiple node

90
00:03:53,180 --> 00:03:55,360
containers at the same time off that same image,

91
00:03:56,390 --> 00:03:57,829
we would see 1, then 2.

92
00:03:57,830 --> 00:03:59,389
Then, of course, you have a random number after that,

93
00:03:59,390 --> 00:04:01,090
just to make sure that they're unique.

94
00:04:01,370 --> 00:04:05,080
Then on the right, I can see the port that's being

95
00:04:05,120 --> 00:04:08,209
redirected through publishing from my host into the
container

96
00:04:08,210 --> 00:04:11,224
itself. So, I could now go over to my browser

97
00:04:11,225 --> 00:04:13,823
and do a localhost

98
00:04:14,180 --> 00:04:15,280
3000,

99
00:04:16,220 --> 00:04:19,608
and I'll get the app. Note, if you're on Windows

100
00:04:19,610 --> 00:04:21,559
and you're using Docker Machine

101
00:04:21,560 --> 00:04:24,739
with an older version like Docker Toolbox where you can't
use

102
00:04:24,740 --> 00:04:27,889
localhost, remember that you'll have to use the IP address

103
00:04:27,890 --> 00:04:29,560
of the Docker Machine.

104
00:04:29,840 --> 00:04:31,189
You can get that from the command line.

105
00:04:31,190 --> 00:04:32,719
If you're on Windows 7, Windows 8.

106
00:04:32,720 --> 00:04:34,030
Windows 10 Home

107
00:04:34,130 --> 00:04:35,152
and using Docker Toolbox,

108
00:04:35,750 --> 00:04:38,989
you can just do a docker machine ls at the command

109
00:04:38,990 --> 00:04:40,849
line and it will show you your machine

110
00:04:40,850 --> 00:04:41,967
and the IP address for it.

111
00:04:42,200 --> 00:04:44,089
That's what you use in the browser along

112
00:04:44,090 --> 00:04:45,469
with port 3000.

113
00:04:45,470 --> 00:04:48,040
If you're already running something else on port 3000,

114
00:04:48,170 --> 00:04:51,339
then you'll get an error that says port already

115
00:04:51,340 --> 00:04:51,897
in use or address already in use.

116
00:04:53,450 --> 00:04:55,069
That means you're running some other container

117
00:04:55,070 --> 00:04:57,120
or some other application on that port.

118
00:04:57,170 --> 00:04:58,789
So, you would just need to go in the Compose file

119
00:04:58,790 --> 00:05:01,189
and change the port that it's publishing.

120
00:05:01,190 --> 00:05:03,409
Remember, the left side is what you would change.

121
00:05:03,410 --> 00:05:06,589
The right side of that port is what

122
00:05:06,590 --> 00:05:08,890
is used in the container by the node app.

123
00:05:09,440 --> 00:05:11,950
All right. I can also do docker compose logs.

124
00:05:12,260 --> 00:05:14,929
That will give me the logs. If I had multiple services,

125
00:05:14,930 --> 00:05:16,540
as we will throughout this course,

126
00:05:16,730 --> 00:05:18,499
I could do a docker compose logs

127
00:05:18,500 --> 00:05:20,359
and then the name of the service,

128
00:05:20,360 --> 00:05:21,780
web in this case.

129
00:05:22,430 --> 00:05:25,459
That would give me the logs just for that service in the

130
00:05:25,460 --> 00:05:28,219
Compose file. Often when you're running Docker Compose

131
00:05:28,220 --> 00:05:29,920
and you have active containers,

132
00:05:30,020 --> 00:05:31,369
you may want to troubleshoot something

133
00:05:31,370 --> 00:05:34,399
or get inside the container so that you can look at things
more

134
00:05:34,400 --> 00:05:37,190
closely if something's not behaving the way you expect.

135
00:05:37,490 --> 00:05:39,740
So, you can use the Docker Compose command to do that,

136
00:05:39,741 --> 00:05:42,448
docker compose exec web,

137
00:05:42,730 --> 00:05:44,290
since that's the name of the service.

138
00:05:44,420 --> 00:05:47,260
Then I can just do an sh shell here.

139
00:05:47,660 --> 00:05:49,399
I'll shell into the container

140
00:05:49,400 --> 00:05:51,889
and then I'll be right in that directory where the app runs
from.

141
00:05:51,890 --> 00:05:53,946
In this case, I was asking you to run a cURL,

142
00:05:54,110 --> 00:05:54,889
curl localhost.

143
00:05:55,610 --> 00:05:58,669
You'll notice that it says cURL not found because cURL is
not installed in

144
00:05:58,670 --> 00:06:00,940
the container. In this case,

145
00:06:00,980 --> 00:06:02,350
I could just do apk,

146
00:06:02,870 --> 00:06:06,130
which if you know this Compose file

147
00:06:06,230 --> 00:06:08,560
and you look at the Dockerfile for this app,

148
00:06:08,630 --> 00:06:11,059
you see in the Dockerfile that this is based on the Alpine
image

149
00:06:11,060 --> 00:06:14,119
and Alpine has a different package manager than you might
be used

150
00:06:14,120 --> 00:06:16,550
to. The Alpine images use apk,

151
00:06:16,880 --> 00:06:18,520
or Alpine Package Manager.

152
00:06:19,670 --> 00:06:22,522
Here, I would do an apk add update

153
00:06:23,060 --> 00:06:26,329
and then curl. That would update the package manager

154
00:06:26,330 --> 00:06:28,999
and then add the cURL package all in one go,

155
00:06:29,000 --> 00:06:31,883
right. I could do that, but I want to permanently have it
in the image,

156
00:06:31,884 --> 00:06:33,550
so I'm going to exit out.

157
00:06:33,890 --> 00:06:37,069
Then I'm going to go back over to my editor

158
00:06:37,070 --> 00:06:38,814
and inside my Dockerfile,

159
00:06:38,815 --> 00:06:41,730
I want to change this here.

160
00:06:50,800 --> 00:06:52,230
And save that file.

161
00:06:52,420 --> 00:06:55,110
While you're still running docker compose up,

162
00:06:55,180 --> 00:06:57,150
you can still run another up,

163
00:06:57,220 --> 00:07:00,369
and it will just make sure that everything is as it should
be.

164
00:07:00,370 --> 00:07:03,209
So you don't have to bring it down before you bring it up
again.

165
00:07:03,210 --> 00:07:04,260
So, docker compose up -d.

166
00:07:06,830 --> 00:07:08,775
You'll notice that even though I change the Dockerfile,

167
00:07:08,900 --> 00:07:10,479
it did not rebuild.

168
00:07:10,480 --> 00:07:13,060
And that's because if the image already exists,

169
00:07:13,070 --> 00:07:16,039
Docker Compose will not check for file changes unless you

170
00:07:16,040 --> 00:07:17,680
do a --build.

171
00:07:17,690 --> 00:07:19,339
So, we're going to have to do that same command again,

172
00:07:19,340 --> 00:07:22,369
but at the end add a --build for it to see the

173
00:07:22,370 --> 00:07:23,080
changes.

174
00:07:37,240 --> 00:07:39,099
If I hit my up arrow a couple of times,

175
00:07:39,100 --> 00:07:41,220
I can get back to that exec command

176
00:07:41,350 --> 00:07:42,669
and I can exec back in

177
00:07:42,670 --> 00:07:45,380
with a docker compose exec web sh.

178
00:07:45,880 --> 00:07:48,600
This time, I should be able to curl localhost

179
00:07:48,640 --> 00:07:49,790
and cURL works,

180
00:07:49,930 --> 00:07:51,630
but I'm on the wrong port.

181
00:07:51,940 --> 00:07:55,029
That's because you need to remember that the port in

182
00:07:55,030 --> 00:07:57,599
the container is different than the port on your host.

183
00:07:57,600 --> 00:07:59,940
So, if you were doing curl from your local machine,

184
00:08:00,100 --> 00:08:01,555
you're going to do the published port.

185
00:08:01,556 --> 00:08:04,719
You're going to curl the localhost of the published port.

186
00:08:04,720 --> 00:08:06,750
In this case, the nice thing is they are the same,

187
00:08:06,870 --> 00:08:09,660
right. If you go and check in the Compose file,

188
00:08:09,670 --> 00:08:12,680
you'll see that 3000 is what we're publishing on.

189
00:08:13,030 --> 00:08:15,539
We're also listening on 3000 inside the container.

190
00:08:15,540 --> 00:08:18,740
So, what I need to do here is curl localhost 3000.

191
00:08:20,030 --> 00:08:22,580
And there we go. We get back the cURL response.

192
00:08:22,650 --> 00:08:25,760
This is just a small example of some of the workflow you
might do.

193
00:08:25,980 --> 00:08:29,159
I don't normally need to cURL inside the container on a
daily basis,

194
00:08:29,160 --> 00:08:31,349
but it's a simple example of how you might want to jump in

195
00:08:31,350 --> 00:08:32,958
and run things inside the container.

196
00:08:34,500 --> 00:08:35,860
If you exit out of there

197
00:08:36,000 --> 00:08:39,119
and then do a docker compose down to clean

198
00:08:39,120 --> 00:08:41,049
everything up, you'll be ready for the next lecture.

