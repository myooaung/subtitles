1
00:00:02,630 --> 00:00:05,210
Next up, let's talk about logging

2
00:00:05,510 --> 00:00:08,869
and specifically how 12-factor rules

3
00:00:09,069 --> 00:00:12,059
for distributed in container apps apply in

4
00:00:12,259 --> 00:00:13,879
Node in this case, and specifically

5
00:00:14,079 --> 00:00:17,059
with Docker, right, in Node. If you want to go check

6
00:00:17,259 --> 00:00:19,760
out 12-factor on the log page,

7
00:00:19,960 --> 00:00:23,300
read that factor because it does talk about the principles,

8
00:00:23,500 --> 00:00:25,280
in depth, that we're going to cover here.

9
00:00:25,700 --> 00:00:28,759
But, the real rule of that whole page is that you

10
00:00:28,959 --> 00:00:32,119
shouldn't be creating a fancy part of your app

11
00:00:32,360 --> 00:00:33,730
to transport,

12
00:00:33,930 --> 00:00:36,739
or route, your logs out of your app into some other

13
00:00:36,939 --> 00:00:38,510
place. We know,

14
00:00:38,840 --> 00:00:40,189
based on previous lectures

15
00:00:40,389 --> 00:00:41,479
and just general Docker rules,

16
00:00:41,679 --> 00:00:44,569
that you shouldn't be writing your logs to a log file

17
00:00:44,769 --> 00:00:47,629
if you can help it, and Node definitely doesn't need

18
00:00:47,829 --> 00:00:49,370
to do that. In fact,

19
00:00:49,700 --> 00:00:52,475
the rule here is that you shouldn't be using any third-party

20
00:00:52,850 --> 00:00:54,919
tool in a way that would cause it to route

21
00:00:55,119 --> 00:00:57,949
or transport that log out of the

22
00:00:58,149 --> 00:00:59,570
container to some third-party system.

23
00:00:59,770 --> 00:01:01,130
Ideally, you're not doing that

24
00:01:01,370 --> 00:01:04,413
and hopefully you're able to use the Docker built-in

25
00:01:04,670 --> 00:01:06,649
methodology, which is to use standard out

26
00:01:06,849 --> 00:01:09,679
and standard error to get your logs into Docker

27
00:01:09,879 --> 00:01:12,650
and then have Docker use the logging driver

28
00:01:12,850 --> 00:01:14,779
to get your logs wherever you need them,

29
00:01:14,979 --> 00:01:16,940
right. So, think of Docker as your transport,

30
00:01:17,150 --> 00:01:18,710
or log routing system,

31
00:01:18,980 --> 00:01:20,660
and your app just doesn't care.

32
00:01:20,860 --> 00:01:23,359
It just needs to put things into the standard out,

33
00:01:23,559 --> 00:01:24,410
like it normally does,

34
00:01:24,890 --> 00:01:27,499
and you can use console log for that,

35
00:01:27,699 --> 00:01:27,710
right.

36
00:01:27,910 --> 00:01:31,099
I mean, if you're in super basic situations where you just need a basic

37
00:01:31,299 --> 00:01:33,049
logger, console log works,

38
00:01:33,249 --> 00:01:35,780
by default. It will put it out to standard out.

39
00:01:36,080 --> 00:01:38,810
If you put it in as an error type of

40
00:01:39,260 --> 00:01:42,220
console log, it will then go to standard error

41
00:01:42,420 --> 00:01:43,760
and that will work with Docker.

42
00:01:44,360 --> 00:01:47,000
But in most apps, you're going to need something more advanced.

43
00:01:47,200 --> 00:01:50,540
Something like Winston, which is definitely the most popular logging tool.

44
00:01:51,170 --> 00:01:52,527
There's Bunyan and Morgan,

45
00:01:52,727 --> 00:01:55,019
and other stuff out there that you might consider

46
00:01:55,219 --> 00:01:56,000
or might already be using.

47
00:01:56,360 --> 00:01:59,420
But in this course, I'm just going to default Winston because that's the one

48
00:01:59,620 --> 00:02:01,094
I have used and that's the default one,

49
00:02:01,940 --> 00:02:03,499
really, for most projects.

50
00:02:03,699 --> 00:02:04,758
It's definitely the most popular. It,

51
00:02:05,553 --> 00:02:08,449
out-of-the-box, has a transport

52
00:02:08,720 --> 00:02:11,416
that is console, which means put everything to stdout

53
00:02:12,410 --> 00:02:15,639
like it should. That's really the only one you should be using.

54
00:02:15,839 --> 00:02:18,649
Now, you might ask yourself, will do I even need those logging tools if

55
00:02:18,849 --> 00:02:19,999
I'm just doing standard out?

56
00:02:20,199 --> 00:02:22,396
Can't I just do something like console log?

57
00:02:22,596 --> 00:02:24,439
Well, if you're not too familiar

58
00:02:24,639 --> 00:02:26,686
with all those logging packages, they do a lot more than that.

59
00:02:26,886 --> 00:02:30,019
One of their best use features is to scale

60
00:02:30,219 --> 00:02:31,310
the logging. In other words,

61
00:02:31,610 --> 00:02:32,959
if you're in development,

62
00:02:33,159 --> 00:02:35,510
or you set node environment to development,

63
00:02:35,710 --> 00:02:38,749
you can control the logging to really dump a lot of information

64
00:02:38,949 --> 00:02:40,550
into your Docker logs.

65
00:02:40,880 --> 00:02:43,280
When you're in production, maybe you only want errors

66
00:02:43,480 --> 00:02:45,290
and warnings, or no warnings at all.

67
00:02:45,530 --> 00:02:48,619
One of the best features of those is to have different

68
00:02:48,819 --> 00:02:51,560
levels of logging so that when you create your logging

69
00:02:51,890 --> 00:02:54,110
rules inside your app code,

70
00:02:54,320 --> 00:02:56,489
you can say, hey this is only needed in test

71
00:02:56,689 --> 00:02:58,620
or development and not necessarily needed in production.

72
00:02:59,090 --> 00:03:00,770
That's not necessarily specific to Docker.

73
00:03:00,970 --> 00:03:03,440
It's just the rule here is if you're using Winston

74
00:03:03,860 --> 00:03:06,889
or others, only use the console transport

75
00:03:07,089 --> 00:03:08,651
so that it makes sure that it gets out to stdout.

