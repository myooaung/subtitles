WEBVTT
1
00:00:00.000 --> 00:00:01.134
I'm now going to go through the assignment for testing

2
00:00:04.900 --> 00:00:07.930
graceful shutdowns, and I'm going to do this twice.

3
00:00:08.189 --> 00:00:09.428
I'm going to do this on a Mac, which is very similar to the

4
00:00:10.420 --> 00:00:12.310
experience you would have on Linux.

5
00:00:12.680 --> 00:00:15.430
Then I'm going to do this in PowerShell on Windows 10.

6
00:00:15.790 --> 00:00:16.882
If you're running this on Windows 10, or any Windows

7
00:00:18.790 --> 00:00:19.756
version really, move forward, somewhere around

8
00:00:21.760 --> 00:00:22.840
half of the video.

9
00:00:23.200 --> 00:00:24.103
You'll see it shifts to be from this screen

10
00:00:26.380 --> 00:00:29.140
that I have now where it's a sort of typical looking

11
00:00:29.350 --> 00:00:32.769
Mac shell, to a PowerShell with the blue background,

12
00:00:32.800 --> 00:00:36.180
and skip to that. Then that'll be a similar experience.

13
00:00:36.190 --> 00:00:37.345
The control C experience is different on each operating

14
00:00:39.220 --> 00:00:42.370
system. So, I want you to sort of see what I'm going to see

15
00:00:42.760 --> 00:00:44.560
as I do this, so I'll go through it twice.

16
00:00:44.830 --> 00:00:47.350
This one will be for the Mac and Linux people.

17
00:00:48.010 --> 00:00:51.220
The first step in the assignment was to use the assignment

18
00:00:51.490 --> 00:00:52.288
Dockerfile and the Dockerfile that you

19
00:00:54.520 --> 00:00:55.360
just created in the previous assignment.

20
00:00:55.880 --> 00:00:57.098
So, if you haven't done that assignment first, you need to

21
00:00:57.550 --> 00:00:59.090
do that so that you will have a Dockerfile.

22
00:01:00.040 --> 00:01:01.153
Then, we're going to build that Dockerfile and run it

23
00:01:02.320 --> 00:01:05.349
several different ways, to see whether or not

24
00:01:05.379 --> 00:01:07.270
the proper exit is happening.

25
00:01:07.280 --> 00:01:07.826
Here, I've got an image of

26
00:01:10.300 --> 00:01:11.329
assignment1, and I built it as we built it in the

27
00:01:13.330 --> 00:01:14.740
last lecture.

28
00:01:14.860 --> 00:01:17.770
You can see here, in that assignment, we

29
00:01:18.430 --> 00:01:20.840
added tini into the image, right.

30
00:01:20.880 --> 00:01:23.733
We've got line 5 where I run the apk install tini,

31
00:01:24.010 --> 00:01:25.249
and then we're running tini as a part of the entry point in

32
00:01:26.550 --> 00:01:27.550
line 15.

33
00:01:27.880 --> 00:01:30.850
So, great. Let's now run that image

34
00:01:30.940 --> 00:01:32.170
and see what the experience is.

35
00:01:35.770 --> 00:01:36.967
I don't want to detach this because if I do, then I won't

36
00:01:38.980 --> 00:01:39.631
have that control C experience.

37
00:01:40.630 --> 00:01:43.245
I'll need to run it in the foreground and then try to exit

38
00:01:43.480 --> 00:01:44.480
out of it.

39
00:01:52.920 --> 00:01:54.138
Ok, so my server has started. I technically didn't need to

40
00:01:55.120 --> 00:01:57.970
run the port because we're not testing the port

41
00:01:58.510 --> 00:02:01.570
being open, but we are just testing the control C and the

42
00:02:01.630 --> 00:02:04.120
exiting out of it. If I control C here,

43
00:02:04.750 --> 00:02:05.800
that should work. If I do a docker ps, I shouldn't

44
00:02:07.720 --> 00:02:08.889
have anything running.

45
00:02:09.250 --> 00:02:10.258
So, that correctly stopped the container because

46
00:02:12.340 --> 00:02:13.306
tini was running in the foreground as the main

47
00:02:15.370 --> 00:02:18.490
process, or the PID1. It was

48
00:02:18.940 --> 00:02:21.273
then sending that signal to node.js

49
00:02:22.120 --> 00:02:23.212
and then exiting the application. You'll notice that

50
00:02:25.240 --> 00:02:26.374
did not take 10 seconds, so we didn't have to wait for

51
00:02:28.210 --> 00:02:31.444
it to send a signal and then wait

52
00:02:31.815 --> 00:02:34.660
seeing that it had ignored it, and then do a kill, right.

53
00:02:34.700 --> 00:02:35.876
Tini takes care of that for us, so we don't have to wait

54
00:02:36.550 --> 00:02:37.789
for the kill. Now if we do that same docker run command but

55
00:02:39.370 --> 00:02:40.370
we add in the -d, add it

56
00:02:47.170 --> 00:02:49.580
anywhere in the middle of the line there.

57
00:02:49.590 --> 00:02:50.590
So -d. So it will run as a daemon.

58
00:02:51.340 --> 00:02:53.580
Then it will run in detach mode, and I should build to see

59
00:02:53.590 --> 00:02:55.552
it running in the ps command.

60
00:02:56.970 --> 00:03:00.050
You'll see here that it is running and

61
00:03:00.060 --> 00:03:01.173
indeed it's running on the same port that I specified

62
00:03:02.760 --> 00:03:04.510
before because the other one has stopped.

63
00:03:04.530 --> 00:03:05.601
So, I'm going to need to stop this, so docker stop,

64
00:03:07.560 --> 00:03:09.522
and I can just type in the first couple of characters of

65
00:03:09.566 --> 00:03:11.670
the ID.

66
00:03:12.650 --> 00:03:13.847
So, in my case it's 3d. Obviously, it'll be different for

67
00:03:14.760 --> 00:03:17.570
you, and it should return right away, right.

68
00:03:17.610 --> 00:03:19.110
It shouldn't take 10 seconds.

69
00:03:19.290 --> 00:03:20.445
So that's again, tini doing its job correctly, shutting

70
00:03:22.200 --> 00:03:25.260
down the Node app. This still isn't it

71
00:03:25.470 --> 00:03:28.124
actually doing a healthy shutdown

72
00:03:28.530 --> 00:03:28.992
of connections, right.

73
00:03:30.060 --> 00:03:32.760
That still requires code in my application

74
00:03:33.360 --> 00:03:35.580
that we talked about as a bonus to this.

75
00:03:36.060 --> 00:03:36.984
So, before we get to that bonus layer, let's

76
00:03:39.210 --> 00:03:40.407
just talk about the difference between this and the entry

77
00:03:42.420 --> 00:03:43.575
point, right. We're going to shift the entry point, and

78
00:03:44.724 --> 00:03:47.000
we're just going to comment it out.

79
00:03:52.060 --> 00:03:55.150
Then, even though tini's installed,

80
00:03:55.180 --> 00:03:56.180
it won't run.

81
00:03:56.800 --> 00:03:59.970
Let me just save this and

82
00:04:00.000 --> 00:04:01.460
I'm going to do a docker build.

83
00:04:04.140 --> 00:04:05.211
I'm going to call it assignment1. I'm going to give

84
00:04:07.440 --> 00:04:08.940
it a tag of

85
00:04:11.830 --> 00:04:12.830
notini.

86
00:04:13.340 --> 00:04:14.117
So, I'll do that, and it will build a

87
00:04:16.519 --> 00:04:18.589
new image tag

88
00:04:20.570 --> 00:04:23.570
that won't have the tini executed

89
00:04:23.600 --> 00:04:24.600
during startup.

90
00:04:28.780 --> 00:04:31.990
If I run that all again, if I go back to here

91
00:04:32.020 --> 00:04:35.140
and I go back to this run, and

92
00:04:35.190 --> 00:04:35.946
I type in notini, then it should run

93
00:04:38.260 --> 00:04:39.884
the version without tini in the mix, right.

94
00:04:42.200 --> 00:04:44.610
But if I did a docker top on that

95
00:04:45.940 --> 00:04:46.940
container, so mine started with a 48.

96
00:04:48.220 --> 00:04:49.144
Your's would be something different, the ID.

97
00:04:49.550 --> 00:04:50.222
I would see there that it's only

98
00:04:52.600 --> 00:04:55.848
running the single process, right.

99
00:04:56.410 --> 00:04:57.791
If I went back to the other one.

100
00:04:58.150 --> 00:05:00.391
What's interesting here is if I took off the assignment1.

101
00:05:01.480 --> 00:05:02.614
Now, let's take out the port so that I can run both of

102
00:05:04.118 --> 00:05:05.315
these at the same time. It isn't really...we don't really

103
00:05:05.800 --> 00:05:06.800
need the port anyway.

104
00:05:07.160 --> 00:05:09.815
If I do that docker run -d there, and I do a docker

105
00:05:10.150 --> 00:05:11.503
top bd.

106
00:05:13.640 --> 00:05:14.438
Because that was the second container.

107
00:05:14.990 --> 00:05:16.145
You'll see that there's two processes and that's what's

108
00:05:17.300 --> 00:05:18.329
happening is tini is running first, and then it's

109
00:05:20.450 --> 00:05:21.059
executing the Node app binary

110
00:05:23.900 --> 00:05:24.900
for you, right.

111
00:05:25.220 --> 00:05:26.510
So, that was normal.

112
00:05:26.530 --> 00:05:27.530
That's what we expect.

113
00:05:27.950 --> 00:05:31.000
The problem comes into play here, though, on this notini

114
00:05:32.090 --> 00:05:33.119
container, so if I do a docker stop on that first

115
00:05:35.150 --> 00:05:38.038
one, on 48, which is the notini one.

116
00:05:38.900 --> 00:05:40.076
What you would expect to see here is it's trying to stop

117
00:05:41.900 --> 00:05:44.930
Node. Node's not listening for the

118
00:05:45.170 --> 00:05:46.280
shutdown signal.

119
00:05:46.610 --> 00:05:47.597
So Docker waits 10 seconds and then has to give

120
00:05:49.580 --> 00:05:50.580
it a kill.

121
00:05:51.180 --> 00:05:52.500
Ideally, we don't want that, right.

122
00:05:52.530 --> 00:05:55.230
Not only is it slower, right. Takes everything longer, but

123
00:05:55.620 --> 00:05:56.271
you're not only not looking for

124
00:05:58.590 --> 00:05:59.766
shutting down connections, but you're also shutting down

125
00:06:01.710 --> 00:06:02.802
Node hard. So, Node doesn't even have a chance to do

126
00:06:04.470 --> 00:06:05.470
anything properly.

127
00:06:06.240 --> 00:06:07.290
So, you definitely see the difference here, right.

128
00:06:08.192 --> 00:06:08.927
If I had that container, if someone

129
00:06:11.340 --> 00:06:12.348
had given me that image and I had to run it even

130
00:06:14.340 --> 00:06:14.970
without tini in it, I could do

131
00:06:17.340 --> 00:06:19.122
something like this. Now, this doesn't even require tini in

132
00:06:19.560 --> 00:06:22.860
the box, right. I could do a docker run

133
00:06:23.410 --> 00:06:26.550
init, and let's do that again

134
00:06:26.640 --> 00:06:27.640
on assignment notini. So,

135
00:06:31.250 --> 00:06:33.140
this doesn't even require tini to be installed.

136
00:06:33.390 --> 00:06:34.790
We talked about this a little bit earlier.

137
00:06:35.240 --> 00:06:36.395
This is sort of something if I get someone else's image

138
00:06:37.940 --> 00:06:40.820
where I need to run the image I'm just going to run that

139
00:06:41.090 --> 00:06:43.220
with it injecting it at runtime.

140
00:06:43.283 --> 00:06:46.280
That way, if I do a docker top on that

141
00:06:46.290 --> 00:06:46.521
one, 15, it

142
00:06:49.300 --> 00:06:51.303
does indeed have the init in it.

143
00:06:51.880 --> 00:06:53.320
You'll notice it's a different location.

144
00:06:53.360 --> 00:06:53.927
It's under /dev/init rather

145
00:06:56.440 --> 00:06:57.950
than /sbin/tini.

146
00:06:58.300 --> 00:07:01.300
So, that's a way that I could tell the difference between

147
00:07:01.630 --> 00:07:03.900
one that I injected at runtime with the --init

148
00:07:04.750 --> 00:07:07.630
and one that I installed and ran manually in the container

149
00:07:08.440 --> 00:07:09.540
with a proper build.

150
00:07:12.770 --> 00:07:13.988
This is the second part of the video where I do the exact,

151
00:07:14.900 --> 00:07:17.564
same thing on a Windows 10 Pro machine.

152
00:07:18.080 --> 00:07:19.214
I'm using PowerShell here, but you should get the same

153
00:07:20.420 --> 00:07:21.554
experience doing this if you're on an older version of

154
00:07:22.970 --> 00:07:25.520
Windows, or Windows 10 Home, and you're using the toolbox.

155
00:07:26.090 --> 00:07:28.320
The big difference really here is just control C.

156
00:07:29.300 --> 00:07:32.270
So, if I've already built the image again as assignment1

157
00:07:33.080 --> 00:07:36.110
from the first demonstration, I

158
00:07:36.230 --> 00:07:37.610
can do a docker run.

159
00:07:42.110 --> 00:07:43.286
I don't need to specify a port here really because we're

160
00:07:44.360 --> 00:07:45.690
not testing the website.

161
00:07:45.740 --> 00:07:46.748
We're just wanting to run it and try to stop it.

162
00:07:47.710 --> 00:07:49.721
So, I can do assignment1.

163
00:07:53.680 --> 00:07:54.478
Remember, this is the one with tini in

164
00:07:56.720 --> 00:07:59.200
it, and tini running in the entry point script, right.

165
00:07:59.330 --> 00:08:02.590
Just as a refresher, we...this is what it looks like.

166
00:08:02.600 --> 00:08:04.510
It was from the assignment last time.

167
00:08:04.880 --> 00:08:06.119
We were installing tini, and then we've got it down here in

168
00:08:07.210 --> 00:08:09.700
the entry point, and then it runs the node command for you.

169
00:08:10.405 --> 00:08:12.820
If I go back to PowerShell and I hit enter,

170
00:08:15.460 --> 00:08:17.680
it'll start up as it would on any OS.

171
00:08:17.950 --> 00:08:19.147
But when I hit control C, like I would normally do in Mac

172
00:08:21.070 --> 00:08:24.090
and Linux, this doesn't actually stop it.

173
00:08:24.100 --> 00:08:26.500
So I can do a docker ps and you'll see it's still running.

174
00:08:26.980 --> 00:08:29.850
So I'll need to do a docker stop to get it to quit.

175
00:08:30.280 --> 00:08:31.280
So docker stop 7a.

176
00:08:36.360 --> 00:08:38.789
Then I can do a docker ps and it should be stopped.

177
00:08:38.970 --> 00:08:40.980
You'll notice that it only took a second for it to quit.

178
00:08:41.010 --> 00:08:42.059
That's because tini is in there doing the work for

179
00:08:44.010 --> 00:08:47.430
us. If I did that same docker run again,

180
00:08:52.850 --> 00:08:55.520
and I control C out of that, and then

181
00:08:55.850 --> 00:08:56.850
docker ps.

182
00:08:58.460 --> 00:08:59.990
So, we've got this container running again, right.

183
00:09:00.290 --> 00:09:03.320
Same thing. But if I do a docker top

184
00:09:03.500 --> 00:09:06.432
on e8, so that's my ID, obviously different

185
00:09:06.860 --> 00:09:07.805
than yours, you'll see that tini is in there.

186
00:09:09.290 --> 00:09:11.423
And that's the route process, and then it runs the node.js

187
00:09:12.110 --> 00:09:14.030
for me, so there's actually two processes running.

188
00:09:15.230 --> 00:09:16.930
Cool. So, docker stop e8.

189
00:09:18.410 --> 00:09:21.830
Then if I do a docker build just like I did before,

190
00:09:22.040 --> 00:09:23.398
and I tag it with assignment1,

191
00:09:25.610 --> 00:09:27.520
and I give it the notini tag.

192
00:09:27.560 --> 00:09:28.631
That way I can tell the difference between the two,

193
00:09:30.050 --> 00:09:31.100
different images.

194
00:09:34.180 --> 00:09:36.722
Then if I do a docker run again, assignment1 notini,

195
00:09:43.000 --> 00:09:44.176
and this is going to run the same thing, but tini is not

196
00:09:45.940 --> 00:09:47.230
going to be involved, right.

197
00:09:47.470 --> 00:09:48.520
Now if I control C on Windows, it still won't quit

198
00:09:50.500 --> 00:09:51.298
it. And if I do a docker ps here, then

199
00:09:53.590 --> 00:09:55.513
I should see that one container running.

200
00:09:57.610 --> 00:09:59.430
I can stop it, but this time

201
00:10:01.620 --> 00:10:04.130
docker stop 8b. Of course, that will be different for you.

202
00:10:04.380 --> 00:10:06.180
But that's the ID there.

203
00:10:06.210 --> 00:10:07.176
If that stops, you'll notice that it's waiting

204
00:10:09.420 --> 00:10:10.260
10 seconds. That 10 seconds is a default

205
00:10:12.420 --> 00:10:15.120
timeout before Docker will kill the image.

206
00:10:15.240 --> 00:10:18.150
Or rather, kill the container, because the container

207
00:10:18.480 --> 00:10:19.830
wasn't listening for the signal.

208
00:10:20.520 --> 00:10:21.612
And that's a great example of how tini is helping us

209
00:10:23.370 --> 00:10:25.140
without having to put any additional code in.

210
00:10:26.010 --> 00:10:27.165
If I had an image like that, and I needed to run it but

211
00:10:29.070 --> 00:10:30.141
I couldn't get tini into the image, I could do that

212
00:10:32.160 --> 00:10:32.958
trick where I do a docker run with the

213
00:10:35.130 --> 00:10:38.450
init in there, and that injects

214
00:10:38.460 --> 00:10:41.160
at runtime the tini

215
00:10:41.470 --> 00:10:42.646
binary that's actually comes with Docker out-of-the-box.

216
00:10:43.690 --> 00:10:45.910
So, we wouldn't need even install it.

217
00:10:49.550 --> 00:10:50.550
Assignment1 notini.

218
00:10:55.120 --> 00:10:56.044
Then if I control C out of that, and then do

219
00:10:58.090 --> 00:11:00.880
a docker ps, and see that it's

220
00:11:01.470 --> 00:11:03.915
container ID 28. So do a docker stop 28.

221
00:11:05.390 --> 00:11:06.980
Then it should immediately quit.

222
00:11:07.190 --> 00:11:08.261
So, we know that tini is actually going in there at

223
00:11:09.470 --> 00:11:10.562
runtime, and we didn't actually need it in the image

224
00:11:12.470 --> 00:11:14.870
at all. Hopefully, you see the differences.

225
00:11:14.900 --> 00:11:16.097
It's very subtle. It's really just the difference between

226
00:11:16.820 --> 00:11:17.744
the control C on windows and that on Mac and

227
00:11:19.820 --> 00:11:20.820
Linux.

228
00:11:21.350 --> 00:11:22.870
All right. I'll see you in the next lecture.

