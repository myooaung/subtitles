WEBVTT
1
00:00:02.530 --> 00:00:04.961
For this next assignment, you're going to build a 3-stage

2
00:00:06.730 --> 00:00:09.639
Dockerfile. So, you're going to take the skills that I talked about

3
00:00:09.839 --> 00:00:11.950
with the multistage of the last couple of lectures,

4
00:00:12.340 --> 00:00:15.300
and you're going to do that sort of thing that you would do

5
00:00:15.500 --> 00:00:18.609
to a normal Dockerfile. What I've given you is a sample repository

6
00:00:18.809 --> 00:00:20.350
that we used earlier in the course,

7
00:00:20.710 --> 00:00:23.859
and I've given you a starter Dockerfile that has 3 stages

8
00:00:24.059 --> 00:00:26.829
I'd like you to build. It's only going to be a couple of lines each for

9
00:00:27.029 --> 00:00:28.270
you to add what you need.

10
00:00:28.690 --> 00:00:31.600
But, I want you to understand some of the benefits around the

11
00:00:31.990 --> 00:00:33.609
production, versus development,

12
00:00:33.809 --> 00:00:34.570
versus test.

13
00:00:34.960 --> 00:00:38.860
So, you'll look in the directory sample multistage,

14
00:00:39.060 --> 00:00:41.860
and that's where you'll have the sample app that we've used before.

15
00:00:42.130 --> 00:00:45.099
You'll have the package.json file that you can look

16
00:00:45.299 --> 00:00:48.279
at to see what commands are being used in potentially

17
00:00:48.479 --> 00:00:50.290
dev or test environments.

18
00:00:50.490 --> 00:00:53.500
You'll start in the Dockerfile from the top down using

19
00:00:53.700 --> 00:00:55.000
the production first,

20
00:00:55.200 --> 00:00:56.589
and then the dev second,

21
00:00:56.789 --> 00:00:56.980
and then the test third.

22
00:00:57.910 --> 00:01:01.119
They will actually build in order so usually your production

23
00:01:01.319 --> 00:01:03.430
will only have the necessary things you have in production,

24
00:01:03.630 --> 00:01:05.319
and development will have extra stuff.

25
00:01:05.519 --> 00:01:07.130
Like things that are dev dependencies.

26
00:01:07.630 --> 00:01:10.840
Your first stage will be production oriented.

27
00:01:11.040 --> 00:01:13.929
It will run the standard Node command that you need for this app that

28
00:01:14.129 --> 00:01:14.990
you can look up in the package.json.

29
00:01:15.730 --> 00:01:18.580
It will install just production dependencies in

30
00:01:19.000 --> 00:01:20.110
npm install.

31
00:01:20.310 --> 00:01:22.030
There's several ways you can do that.

32
00:01:22.330 --> 00:01:24.099
If you've been doing Node long enough,

33
00:01:24.299 --> 00:01:26.589
you know how to do an npm install,

34
00:01:26.789 --> 00:01:27.930
and there's a couple of options there.

35
00:01:28.130 --> 00:01:29.580
I'm not going to give them all the way to you,

36
00:01:29.780 --> 00:01:31.269
but you can use environment variables,

37
00:01:31.469 --> 00:01:34.510
and you can use options on the npm command line to install

38
00:01:34.710 --> 00:01:37.599
just the standard dependencies without the dev dependencies

39
00:01:37.799 --> 00:01:38.123
from the package.json.

40
00:01:39.100 --> 00:01:42.550
Then, on top of that, you'll have a new stage that is just for development

41
00:01:42.750 --> 00:01:44.170
that will also do another npm.

42
00:01:44.680 --> 00:01:47.709
And that npm install will install the

43
00:01:47.909 --> 00:01:49.580
dev dependencies from your package.json.

44
00:01:50.110 --> 00:01:52.509
In there, for this example project,

45
00:01:52.709 --> 00:01:55.060
will be nodemon, as well as some other stuff.

46
00:01:55.420 --> 00:01:58.020
That dev stage will have a different cmd

47
00:01:58.420 --> 00:02:01.240
so that if you target that stage when you run it,

48
00:02:01.450 --> 00:02:02.917
it will target that cmd

49
00:02:03.970 --> 00:02:05.990
and have a different executable by default.

50
00:02:06.190 --> 00:02:09.128
That you can pull from the dev line inside

51
00:02:09.329 --> 00:02:12.159
the package.json. So, this is a great example of how if you are

52
00:02:12.359 --> 00:02:13.569
taking an app that existed

53
00:02:13.769 --> 00:02:16.450
and you were migrating it into a multi-stage Docker setup,

54
00:02:16.840 --> 00:02:19.929
you would go through the package.json to look for the hints on how

55
00:02:20.129 --> 00:02:21.132
you need to build this out. Finally,

56
00:02:21.580 --> 00:02:23.170
the third stage will be test

57
00:02:23.370 --> 00:02:25.138
and that's going to run npm test.

58
00:02:25.510 --> 00:02:28.509
So, the cmd there would need to be the command that you would

59
00:02:28.709 --> 00:02:31.480
see inside of the npm file.

60
00:02:31.680 --> 00:02:34.749
You can either run npm test to execute

61
00:02:34.949 --> 00:02:36.198
the script inside the package.json,

62
00:02:36.580 --> 00:02:39.609
or you can manually type in the test

63
00:02:39.809 --> 00:02:40.517
command from the package.json.

64
00:02:40.900 --> 00:02:41.920
Either way works.

65
00:02:42.310 --> 00:02:45.363
I tend to lean towards running npm test

66
00:02:45.563 --> 00:02:48.699
just because that seems to be more of a standard for

67
00:02:48.899 --> 00:02:50.070
npm users. That way,

68
00:02:50.270 --> 00:02:53.350
if one of your developers changes the package.json file for testing,

69
00:02:53.770 --> 00:02:56.710
it then would automatically run differently in your

70
00:02:57.010 --> 00:02:57.160
Dockerfile.

71
00:02:57.730 --> 00:03:00.430
You'll notice some inconsistencies because I suggest that there,

72
00:03:00.630 --> 00:03:03.670
but I also don't suggest running npm in production.

73
00:03:04.020 --> 00:03:07.149
In production, that's mostly around just keeping the npm executable

74
00:03:07.349 --> 00:03:09.340
out of it. But when you're running test frameworks,

75
00:03:09.540 --> 00:03:12.609
you're not really so concerned around the root PID1 binary

76
00:03:12.809 --> 00:03:13.900
running and stuff like that. So,

77
00:03:14.200 --> 00:03:17.289
you'll see that these are a little bit different based on their use case

78
00:03:17.489 --> 00:03:19.240
for the cmd of each stage.

79
00:03:19.440 --> 00:03:21.500
Then once you've got your Dockerfile in a place you think will work,

80
00:03:21.910 --> 00:03:23.649
you're going to build each one of these,

81
00:03:23.849 --> 00:03:26.770
and you'll use the --target of the docker build command

82
00:03:27.070 --> 00:03:29.200
to target each stage

83
00:03:29.400 --> 00:03:31.779
and build a different image for each one.

84
00:03:31.979 --> 00:03:34.570
So, you can either do just 3 different named images,

85
00:03:34.770 --> 00:03:36.669
or you can use the same image name,

86
00:03:36.869 --> 00:03:38.680
with different tags at the end of it,

87
00:03:38.890 --> 00:03:41.250
for the different stages that you're building out.

88
00:03:41.450 --> 00:03:44.150
That way you can have all 3 images at the same time.

89
00:03:44.410 --> 00:03:46.840
Then you can run each one of those images,

90
00:03:47.040 --> 00:03:50.050
and it will effectively execute just the code

91
00:03:50.250 --> 00:03:53.229
and the command and just the internals of each one of those

92
00:03:53.429 --> 00:03:56.319
images. One of your goals here is to limit the number

93
00:03:56.519 --> 00:03:58.930
of lines that you have identical,

94
00:03:59.130 --> 00:04:00.820
repetitive lines between the different stages.

95
00:04:01.020 --> 00:04:03.400
Ideally, you have no repetitive lines

96
00:04:03.670 --> 00:04:06.400
and you only execute the copy commands once,

97
00:04:06.600 --> 00:04:09.519
or any npm commands that would install

98
00:04:09.719 --> 00:04:12.205
certain things or do certain things, that you only have those happening once.

99
00:04:13.540 --> 00:04:14.240
I will do this,

100
00:04:14.440 --> 00:04:15.820
of course, in the assignment answers.

101
00:04:16.209 --> 00:04:17.680
I've given this a lot of thought

102
00:04:17.880 --> 00:04:20.767
and I've been using it for years so your answers

103
00:04:20.968 --> 00:04:23.897
may not be exactly, or as small as my example

104
00:04:24.097 --> 00:04:27.309
will be. But, that's okay because if you're getting

105
00:04:27.509 --> 00:04:28.870
a roughly the same size as I am,

106
00:04:29.070 --> 00:04:30.639
and it's the output that you expect,

107
00:04:30.839 --> 00:04:33.820
with the right add ons, the npm dependencies that you expect,

108
00:04:34.300 --> 00:04:36.879
then it's fine. I think your process,

109
00:04:37.079 --> 00:04:40.239
and the art of this, will change over time as you get more preferences

110
00:04:40.439 --> 00:04:41.980
and the ways you do your multi stages.

111
00:04:42.180 --> 00:04:43.480
And similar to just regular Dockerfiles,

112
00:04:43.840 --> 00:04:46.540
every Dockerfile that someone builds will be slightly different.

113
00:04:46.810 --> 00:04:48.256
If two people build the same Dockerfile,

114
00:04:48.520 --> 00:04:49.540
it will be slightly different.

115
00:04:49.840 --> 00:04:52.809
Doesn't mean that it's wrong. It just means that some people have different

116
00:04:53.009 --> 00:04:56.280
preferences. Definitely check out the assignment once you get yours working

117
00:04:56.480 --> 00:04:58.420
to make sure that yours looks similar to mine.

118
00:04:59.080 --> 00:05:00.460
Good luck with the assignment.

