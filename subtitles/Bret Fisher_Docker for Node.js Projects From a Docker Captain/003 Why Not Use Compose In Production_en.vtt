WEBVTT
1
00:00:02.560 --> 00:00:05.304
If you're considering running Docker Compose the command

2
00:00:05.320 --> 00:00:07.427
line on a production server, this lecture's

3
00:00:08.380 --> 00:00:11.222
for you. Because I'm here to try to convince you to not do

4
00:00:11.470 --> 00:00:14.650
that. Docker Compose the command line is a great

5
00:00:14.680 --> 00:00:18.060
developer and testing tool, but it is not designed,

6
00:00:18.090 --> 00:00:20.410
and not ideal, for production deployments.

7
00:00:20.890 --> 00:00:23.830
To be clear, I'm not talking about the Docker Compose file.

8
00:00:23.860 --> 00:00:26.920
That file can be used in various ways with production

9
00:00:27.160 --> 00:00:28.972
clustering systems like Swarm and Kubernetes.

10
00:00:29.980 --> 00:00:31.780
That file is used in lots of places.

11
00:00:31.930 --> 00:00:34.527
It's just YAML describing your application and can be

12
00:00:34.870 --> 00:00:36.280
consumed by many things.

13
00:00:36.700 --> 00:00:39.478
What I am talking about is the Docker Compose CLI,

14
00:00:40.150 --> 00:00:42.249
that command line that you've learned so much about

15
00:00:42.250 --> 00:00:43.250
throughout this course.

16
00:00:43.660 --> 00:00:46.306
That is really designed as a dev and test tool, but it

17
00:00:46.630 --> 00:00:49.330
doesn't understand production concepts.

18
00:00:49.780 --> 00:00:52.840
First, it only understands the single engine,

19
00:00:52.870 --> 00:00:54.550
or server, that it's talking to.

20
00:00:54.910 --> 00:00:57.409
So, if you have more than one server, it can't help

21
00:00:58.030 --> 00:01:01.210
you. It would have to be run separately on each server,

22
00:01:01.510 --> 00:01:02.950
which becomes very tedious.

23
00:01:03.460 --> 00:01:06.009
The number two reason I don't recommend Docker Compose in

24
00:01:06.010 --> 00:01:08.509
production is that it doesn't understand production

25
00:01:09.100 --> 00:01:12.250
concerns like healthchecks, or rolling

26
00:01:12.280 --> 00:01:14.330
updates, or uptime.

27
00:01:14.560 --> 00:01:17.259
It doesn't realize that these things are necessary because

28
00:01:17.260 --> 00:01:20.110
it's not designed for that. So, it doesn't give you options

29
00:01:20.350 --> 00:01:22.419
for those kinds of scenarios and certainly doesn't give you

30
00:01:22.420 --> 00:01:24.772
flexibility like a lot of orchestrators and more

31
00:01:25.570 --> 00:01:27.465
advanced container run times do.

32
00:01:27.970 --> 00:01:30.039
You might be thinking, well, I have very simple

33
00:01:30.040 --> 00:01:32.637
requirements. I only need a single server and I don't

34
00:01:32.950 --> 00:01:34.530
really need crazy uptime.

35
00:01:34.630 --> 00:01:37.374
It's OK if I have a couple of minutes of downtime when I

36
00:01:37.540 --> 00:01:39.639
need to update my apps and maybe I don't update then very

37
00:01:39.640 --> 00:01:41.355
often. I'm here to argue that Swarm

38
00:01:43.120 --> 00:01:45.570
is still a great option for you, and it's not much

39
00:01:46.420 --> 00:01:47.980
more work than what you're already doing.

40
00:01:48.280 --> 00:01:50.559
If you're already using Docker Compose, you have created

41
00:01:50.560 --> 00:01:52.569
that Compose file and Swarm is built into

42
00:01:53.530 --> 00:01:56.372
the Docker command line itself, the Docker Engine, and can

43
00:01:56.710 --> 00:01:59.140
consume that same Compose file.

44
00:01:59.380 --> 00:02:01.330
Almost all the features you've been using with Compose

45
00:02:01.750 --> 00:02:04.445
throughout this course can translate into the Version 3

46
00:02:04.990 --> 00:02:07.990
file format that is compatible with Swarm

47
00:02:08.288 --> 00:02:10.809
and Kubernetes, if you're using something like Kubernetes

48
00:02:11.020 --> 00:02:13.530
on Compose, which is an extra Kubernetes add-on.

49
00:02:14.590 --> 00:02:17.383
My recommendation is even if you have a single server, or

50
00:02:17.560 --> 00:02:19.925
just three servers, try out Swarm first.

51
00:02:20.080 --> 00:02:22.873
If you don't have a requirement for a specific clustering

52
00:02:23.140 --> 00:02:25.952
technology or container deployment solution, give Swarm

53
00:02:26.470 --> 00:02:28.920
a try. It's really meant to be the easy button for

54
00:02:29.800 --> 00:02:32.642
orchestration, and it works out-of-the-box with Docker and

55
00:02:32.800 --> 00:02:33.910
works with your Compose files.

56
00:02:34.480 --> 00:02:37.224
If you want more information on the detailed reasons why

57
00:02:37.240 --> 00:02:40.082
you might consider Swarm over Docker Compose, and the pros

58
00:02:40.300 --> 00:02:42.848
and cons, there's a resource link included with this

59
00:02:43.330 --> 00:02:46.510
lecture to a GitHub post where I detailed

60
00:02:46.600 --> 00:02:49.270
my top 10 reasons...maybe its top 10.

61
00:02:49.300 --> 00:02:51.897
It's something around that. You can check that out at

62
00:02:52.300 --> 00:02:54.799
a later time. But, understand that really if you've

63
00:02:55.270 --> 00:02:57.369
taken any of my other courses, you've heard me talk about

64
00:02:57.370 --> 00:02:59.967
Swarm because it is a great, easy orchestrator to get

65
00:02:59.980 --> 00:03:00.980
started with.

66
00:03:01.225 --> 00:03:03.909
If you're considering Kubernetes and you keep hearing the

67
00:03:03.910 --> 00:03:06.609
buzz about Kubernetes, it is definitely the most popular

68
00:03:06.610 --> 00:03:09.011
orchestrator, but it may not be for you depending

69
00:03:09.700 --> 00:03:11.230
on your size and requirements.

70
00:03:11.470 --> 00:03:13.569
If you're thinking about a small deployment, something that

71
00:03:13.570 --> 00:03:16.372
may only need one to five servers, then Kubernetes

72
00:03:16.930 --> 00:03:19.030
is probably not recommended for you.

73
00:03:19.300 --> 00:03:21.819
In most of those cases, I would recommend Swarm because it

74
00:03:21.820 --> 00:03:25.180
will work well with one or even three servers.

75
00:03:25.410 --> 00:03:27.762
One server with Swarm would provide you no fault

76
00:03:28.360 --> 00:03:30.819
tolerance, but it would still work great and would provide

77
00:03:30.820 --> 00:03:32.935
you extra features over top of Docker Compose.

78
00:03:33.880 --> 00:03:37.030
If you had three servers, Swarm can provide you full

79
00:03:37.180 --> 00:03:39.060
encryption and fault tolerance and load balancing.

80
00:03:39.940 --> 00:03:41.979
With Kubernetes, you're going to need more infrastructure

81
00:03:41.980 --> 00:03:44.559
than that. If you're considering Kubernetes, my first

82
00:03:44.560 --> 00:03:46.765
recommendation is try one of the cloud hosted

83
00:03:47.620 --> 00:03:50.364
versions of Kubernetes. Whether it's Amazon, or Azure or

84
00:03:50.530 --> 00:03:53.380
DigitalOcean, they all now have a Kubernetes offering,

85
00:03:53.560 --> 00:03:55.863
and you can create deployment YAML files to use

86
00:03:56.800 --> 00:03:59.469
with those services. That way, you won't have to build your

87
00:03:59.470 --> 00:04:02.165
own Kubernetes infrastructure unless you really, really

88
00:04:02.380 --> 00:04:05.087
need it. If you're in a large team, with multiple DevOps

89
00:04:05.350 --> 00:04:07.539
members, and you know you need Kubernetes, then you

90
00:04:07.540 --> 00:04:09.999
probably already have a plan for that and you know what

91
00:04:10.000 --> 00:04:12.842
you're doing. You maybe have bought a product or are using

92
00:04:12.970 --> 00:04:15.670
something like Rancher, or Docker Enterprise, or OpenShift,

93
00:04:16.390 --> 00:04:18.760
and that's fine. Those are great distributions of

94
00:04:19.120 --> 00:04:21.766
Kubernetes that take a lot of the work out of building

95
00:04:22.330 --> 00:04:24.820
your cluster. Swarm doesn't require all of that.

96
00:04:24.850 --> 00:04:27.349
So, if you can get away with the simpler version of

97
00:04:27.550 --> 00:04:29.710
clustering, like Swarm, then check that out.

