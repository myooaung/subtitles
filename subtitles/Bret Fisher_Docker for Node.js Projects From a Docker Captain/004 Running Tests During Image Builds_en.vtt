WEBVTT
1
00:00:02.490 --> 00:00:04.842
Now whether or not you have your own CI solution

2
00:00:05.640 --> 00:00:07.943
for testing and continuous integration, you can

3
00:00:08.850 --> 00:00:11.820
use Dockerfiles as a way to do testing.

4
00:00:12.270 --> 00:00:14.039
You don't have to have a large, complicated CI

5
00:00:15.660 --> 00:00:18.300
pipeline system to just run tests.

6
00:00:18.930 --> 00:00:21.599
Dockerfiles are essentially their own build system, and so

7
00:00:21.600 --> 00:00:22.750
you can throw these in.

8
00:00:23.100 --> 00:00:25.844
Now with multistage, that even becomes easier because we

9
00:00:25.920 --> 00:00:28.500
can make a special stage just for these tests.

10
00:00:29.220 --> 00:00:31.859
If you're used to using npm to run your test, you can just

11
00:00:31.860 --> 00:00:35.130
do that. Add a special stage, just for testing,

12
00:00:35.340 --> 00:00:37.140
that is based on your development environment.

13
00:00:37.170 --> 00:00:39.629
Because you want all those dev dependencies, like the dev

14
00:00:39.630 --> 00:00:41.370
tools, right, for building and testing.

15
00:00:41.760 --> 00:00:44.720
Then you want to put in run npm test.

16
00:00:44.880 --> 00:00:46.170
That's as easy as it could be.

17
00:00:46.230 --> 00:00:48.239
You could just do that. But, there's a lot more you could

18
00:00:48.240 --> 00:00:49.240
do here.

19
00:00:49.560 --> 00:00:51.912
You could also do linting inside of this special

20
00:00:52.560 --> 00:00:54.618
stage. I would recommend you only run unit

21
00:00:55.860 --> 00:00:57.618
tests inside the Dockerfile.

22
00:00:58.140 --> 00:01:01.500
If you're talking about functional, or other types

23
00:01:01.530 --> 00:01:04.259
of full-feature testing where you're going to need other

24
00:01:04.260 --> 00:01:06.660
containers or other systems like databases to talk to,

25
00:01:06.661 --> 00:01:09.510
that's not really good to run inside a Dockerfile

26
00:01:09.750 --> 00:01:12.540
build because it's hard to get those other things started

27
00:01:12.550 --> 00:01:14.759
and to then tell the Docker build how to get to those

28
00:01:14.760 --> 00:01:16.942
things. That's more of a job for Docker Compose.

29
00:01:18.060 --> 00:01:20.608
Also, don't make the test stage part of your default

30
00:01:21.360 --> 00:01:22.380
stage workflow.

31
00:01:22.410 --> 00:01:25.105
In other words, have it be a one-off stage that doesn't

32
00:01:25.500 --> 00:01:27.769
run by default. It's not the last one in the list.

33
00:01:27.770 --> 00:01:30.269
It's not one that's depended on by any other things

34
00:01:30.840 --> 00:01:32.060
like production or dev.

35
00:01:32.400 --> 00:01:35.193
So, that way it won't run unless you specifically want it

36
00:01:35.250 --> 00:01:38.043
to run. When you're on your local machine and you want to

37
00:01:38.100 --> 00:01:40.670
do these tests, just do a docker compose exec

38
00:01:41.160 --> 00:01:43.512
or a docker compose run and do the commands that

39
00:01:44.250 --> 00:01:46.730
way instead of trying to build this stage.

40
00:01:48.180 --> 00:01:51.030
This special stage is really best for CI

41
00:01:51.570 --> 00:01:54.269
or automated systems that are just needing to run through a

42
00:01:54.270 --> 00:01:57.161
set of things to get them done before it completes the path

43
00:01:57.600 --> 00:02:00.089
of the workflow. When you're just doing stuff locally, you

44
00:02:00.090 --> 00:02:02.789
know what you want to run. You want to run npm test or you

45
00:02:02.790 --> 00:02:03.966
want to run an npm test.

46
00:02:04.170 --> 00:02:05.170
Something like that.

47
00:02:05.520 --> 00:02:07.829
So, you're typically just going to run those one-offs on

48
00:02:07.830 --> 00:02:10.084
your own and not rebuild the entire image just

49
00:02:10.889 --> 00:02:11.889
to get a test done.

50
00:02:12.270 --> 00:02:15.512
Let's take a look at a sample Dockerfile in the directory,

51
00:02:15.800 --> 00:02:17.160
multistage test.

52
00:02:18.770 --> 00:02:20.926
This example Dockerfile is based on the last

53
00:02:22.070 --> 00:02:24.896
lecture where we talked about development stages, and

54
00:02:25.400 --> 00:02:26.510
this is going to build on that.

55
00:02:26.900 --> 00:02:29.520
So, this first stage is mostly the same.

56
00:02:29.540 --> 00:02:32.235
You'll see that I added in the npm config list which we

57
00:02:32.330 --> 00:02:33.940
talked about in the previous lectures.

58
00:02:34.400 --> 00:02:36.950
I've added that it as a bonus in the first stage.

59
00:02:37.070 --> 00:02:39.769
But, this first stage again, is really just a jumping off

60
00:02:39.770 --> 00:02:41.360
stage the others will depend on.

61
00:02:42.010 --> 00:02:44.089
Then when we scroll down here to stage 2, this is

62
00:02:44.090 --> 00:02:45.670
specifically for development.

63
00:02:45.680 --> 00:02:48.770
So, this would be called from my Docker Compose file.

64
00:02:49.040 --> 00:02:50.960
This is the same one as we had in the last lecture.

65
00:02:52.040 --> 00:02:54.139
In stage 3, this is where things start to get a little bit

66
00:02:54.140 --> 00:02:57.080
different. We're now copying in the source code, but

67
00:02:57.110 --> 00:02:58.950
this is sort of an intermediate stage.

68
00:02:58.970 --> 00:03:00.979
It's not meant to be used directly by you

69
00:03:01.940 --> 00:03:04.439
or any system. It is there simply to get the source

70
00:03:04.970 --> 00:03:07.567
code in so that we have it as a jumping off point for

71
00:03:07.910 --> 00:03:08.960
future stages.

72
00:03:09.790 --> 00:03:12.770
In this next stage for stage 4, we're

73
00:03:12.860 --> 00:03:15.469
starting from that source. So, that's that previous tiny

74
00:03:15.470 --> 00:03:17.920
little stage. We're starting from there, and we're

75
00:03:18.470 --> 00:03:21.240
going to use test. So, we've got to set the node env up

76
00:03:21.740 --> 00:03:23.960
again, and the path for development, because we're not

77
00:03:23.990 --> 00:03:26.690
depending on that dev

78
00:03:26.960 --> 00:03:29.389
stage. We're actually skipping that dev stage for this

79
00:03:29.390 --> 00:03:31.693
testing one, and we're starting from the source

80
00:03:32.570 --> 00:03:35.000
code one, which started from the production one.

81
00:03:35.540 --> 00:03:38.480
Then we're copying all the Node modules in

82
00:03:38.810 --> 00:03:42.110
from the developer image in a manual copy line

83
00:03:42.170 --> 00:03:44.718
so that we get both production and dev dependencies.

84
00:03:45.530 --> 00:03:47.090
So, that's key that we do that.

85
00:03:47.630 --> 00:03:49.490
Then we start to run our tests.

86
00:03:49.700 --> 00:03:51.350
I'm doing an eslint here.

87
00:03:51.620 --> 00:03:53.510
I'm also doing an npm test.

88
00:03:53.630 --> 00:03:56.374
So, you might do several types of linting and testing on

89
00:03:56.420 --> 00:03:58.380
your own. Like I said before, unit tests

90
00:03:59.600 --> 00:04:01.249
are probably what you should be putting in here, not

91
00:04:01.250 --> 00:04:03.700
functional tests, because this is really meant for

92
00:04:04.220 --> 00:04:06.259
things that are just going to happen in this Dockerfile, in

93
00:04:06.260 --> 00:04:08.514
isolation with the source code, not for things

94
00:04:09.410 --> 00:04:12.057
that are going to be talking to databases or other API's

95
00:04:12.400 --> 00:04:14.530
for full functionality stuff, right.

96
00:04:14.810 --> 00:04:16.089
But, that's what you do with the cmd.

97
00:04:16.510 --> 00:04:18.862
You override the cmd here so that if you want to

98
00:04:19.519 --> 00:04:22.214
run this image that you just built for testing, it will

99
00:04:22.580 --> 00:04:25.550
then run a full integration testing like

100
00:04:25.580 --> 00:04:28.700
you do here. Maybe this is an imaginary npm run

101
00:04:28.970 --> 00:04:32.180
that would do a different test command than it would

102
00:04:32.270 --> 00:04:35.080
when it's running just unit tests a few lines earlier.

103
00:04:36.080 --> 00:04:39.410
Then my last stage here is the production stage.

104
00:04:39.440 --> 00:04:42.135
This is the one that will start from source, so it will

105
00:04:42.200 --> 00:04:44.699
skip the test and the dev stages, and it will start

106
00:04:45.320 --> 00:04:47.868
from source, and then just change the cmd to be what

107
00:04:48.320 --> 00:04:49.760
we expect to do in production.

108
00:04:50.300 --> 00:04:52.603
The key here is that my last stage is always my

109
00:04:53.420 --> 00:04:54.860
production stage.

110
00:04:55.160 --> 00:04:57.919
It's always the default. So, if you ever do a docker build

111
00:04:57.920 --> 00:05:00.321
and you forget to target a specific stage, you'll

112
00:05:00.980 --> 00:05:03.199
end up with a production-ready image that doesn't have a

113
00:05:03.200 --> 00:05:04.280
bunch of the extra stuff in it.

114
00:05:04.640 --> 00:05:07.531
I like to do it that way so that if anyone else is building

115
00:05:07.730 --> 00:05:10.189
my images, and they don't realize that they have to specify

116
00:05:10.190 --> 00:05:12.800
a special target, that it just works for them.

117
00:05:13.040 --> 00:05:15.500
Also, if you're building, by default, on Docker Hub or

118
00:05:15.560 --> 00:05:17.373
other places like that, they will, by

119
00:05:18.590 --> 00:05:21.285
default, unless you specify a target, build all the way

120
00:05:21.290 --> 00:05:23.869
through the file and then the last stage will be the end

121
00:05:23.870 --> 00:05:26.629
result. So there, you would also want to make sure you have

122
00:05:26.630 --> 00:05:28.810
this production-ready stage.

123
00:05:30.200 --> 00:05:32.846
Just to remind you that as you're at the command line,

124
00:05:32.990 --> 00:05:35.629
you're doing these Docker builds, you may or may not be

125
00:05:35.630 --> 00:05:38.570
enabling BuildKit like we've talked about earlier in this

126
00:05:38.840 --> 00:05:41.160
course, and it doesn't really matter here.

127
00:05:41.180 --> 00:05:43.669
BuildKit does give you advantages here because if you

128
00:05:43.670 --> 00:05:46.120
remember, these stages don't all go in consecutive

129
00:05:46.640 --> 00:05:49.340
order. If you have BuildKit enabled,

130
00:05:49.730 --> 00:05:51.641
then that will skip different stages of

131
00:05:52.760 --> 00:05:55.504
the build process if it doesn't need them for this stage

132
00:05:55.520 --> 00:05:56.520
you asked for.

133
00:05:57.230 --> 00:06:00.150
If I did a docker build here and I just called

134
00:06:00.180 --> 00:06:03.190
it test node, and I did just

135
00:06:03.200 --> 00:06:04.430
this, right here.

136
00:06:04.670 --> 00:06:07.071
This would skip the test, skip the dev and go all

137
00:06:07.700 --> 00:06:09.950
the way through the bottom of the production image because

138
00:06:10.190 --> 00:06:12.680
I didn't give it a target stage.

139
00:06:13.190 --> 00:06:15.469
That's not what we want here. I would want to build the

140
00:06:15.470 --> 00:06:17.899
test stage. I need to give it a target of test.

141
00:06:21.410 --> 00:06:24.360
And when I do that, it's going to spit all that stuff out.

142
00:06:24.390 --> 00:06:27.550
You'll see that it runs down here at the bottom on step 23,

143
00:06:28.410 --> 00:06:30.923
that it's changing the int to an npm, the eslint,

144
00:06:31.500 --> 00:06:33.470
but you will notice that it's caching.

145
00:06:34.020 --> 00:06:37.170
That means that really what's happening is

146
00:06:37.260 --> 00:06:40.260
I've already run this test for this

147
00:06:40.350 --> 00:06:41.790
set of files on my system.

148
00:06:42.120 --> 00:06:43.829
Technically, I don't need to run those again because

149
00:06:43.830 --> 00:06:46.191
nothing's changed, so why do I need to rerun the tests?

150
00:06:46.650 --> 00:06:49.155
But if you want to force the test or rerun anyway,

151
00:06:50.560 --> 00:06:53.046
you could type in a --no cache.

152
00:06:57.310 --> 00:07:00.310
What that'll do is it'll force it to build each

153
00:07:00.520 --> 00:07:02.872
line again, just in case you maybe want to rerun

154
00:07:03.580 --> 00:07:06.040
those tests for extra safety.

