WEBVTT
1
00:00:02.570 --> 00:00:05.300
Now you've seen me use a few editors in this course.

2
00:00:05.990 --> 00:00:07.330
Visual Studio Code, as well as Vim.

3
00:00:07.610 --> 00:00:09.860
Those are my sort of favorite editors.

4
00:00:10.070 --> 00:00:11.690
There's lots of editors out there, right.

5
00:00:12.110 --> 00:00:15.140
VS code tends to be an increasingly popular one

6
00:00:15.500 --> 00:00:16.639
because it's free.

7
00:00:17.150 --> 00:00:19.520
It's regularly updated, and it has tons of features,

8
00:00:19.580 --> 00:00:20.981
especially for Node and JavaScript.

9
00:00:22.250 --> 00:00:24.410
If you've not checked it out, definitely go check out

10
00:00:24.950 --> 00:00:26.440
Visual Studio Code on Microsoft's website.

11
00:00:26.810 --> 00:00:29.390
It runs on every platform. It actually runs the same

12
00:00:29.450 --> 00:00:31.880
backend as ADAM, if you've ever used ADAM from GitHub.

13
00:00:31.881 --> 00:00:34.820
It's really got more developer features

14
00:00:34.880 --> 00:00:37.729
in mind. I'm not going to go too deep into all the features

15
00:00:37.730 --> 00:00:40.129
of it, but I did want to highlight a couple of things, as

16
00:00:40.130 --> 00:00:42.874
well as debugging and other things like TypeScript, that

17
00:00:43.190 --> 00:00:45.739
might get in your way and complicate your setup if you

18
00:00:45.740 --> 00:00:48.199
don't have some good guidance. I can tell you that I've

19
00:00:48.200 --> 00:00:50.601
spent many hours trying to get all these tools to

20
00:00:51.260 --> 00:00:54.710
work together. When you start talking about Docker, plus

21
00:00:54.920 --> 00:00:57.608
Docker Compose, plus Visual Studio Code,

22
00:00:58.070 --> 00:01:00.235
plus node debugging, plus TypeScript, plus

23
00:01:01.160 --> 00:01:03.855
nodemon, you start to get this stack of tools that gets

24
00:01:04.220 --> 00:01:06.649
a little crazy. So, I'm going to give you a quick little

25
00:01:06.650 --> 00:01:09.530
sample of how a setup works that

26
00:01:10.550 --> 00:01:13.343
I've used in this course. So, it would work well with the

27
00:01:13.610 --> 00:01:15.439
setup and design of the way we're doing things in this

28
00:01:15.440 --> 00:01:17.569
course. It's not going to solve every problem or work in

29
00:01:17.570 --> 00:01:18.570
every scenario.

30
00:01:18.830 --> 00:01:21.019
But, you might want to check it out, and the source files

31
00:01:21.020 --> 00:01:22.020
will be in the repo.

32
00:01:22.529 --> 00:01:25.430
In case you've not yet debugged code with

33
00:01:25.610 --> 00:01:28.403
Node.js inside of Docker, the way you're going to do that

34
00:01:28.700 --> 00:01:31.009
is like you would normally do with Node, because Node is

35
00:01:31.010 --> 00:01:33.530
designed for TCP remote debugging out-of-the-box.

36
00:01:33.710 --> 00:01:35.870
It's pretty cool. That just works well with Docker.

37
00:01:36.260 --> 00:01:38.689
That means you can turn on the inspect, whether you're

38
00:01:38.690 --> 00:01:40.896
doing that with Node or nodemon.

39
00:01:41.540 --> 00:01:44.370
You can still just enable that and default port is 9229

40
00:01:45.140 --> 00:01:47.509
in the later versions of Node that we've had the last few

41
00:01:47.510 --> 00:01:50.457
years. That largely works out-of-the-box.

42
00:01:50.780 --> 00:01:53.671
You can expect that to work with Visual Studio Code, Chrome

43
00:01:53.840 --> 00:01:55.520
debugging, if you've ever used that.

44
00:01:55.850 --> 00:01:58.280
Or, any of the other major editors and debuggers.

45
00:01:58.470 --> 00:01:59.760
That stuff just kind of works.

46
00:02:00.080 --> 00:02:02.419
Once you start getting into wanting to use something like

47
00:02:02.420 --> 00:02:04.282
TypeScript, or other automated scripts

48
00:02:05.600 --> 00:02:08.439
that run with nodemon every time you change a file, then

49
00:02:08.690 --> 00:02:11.483
you would also like it to work with Docker Compose inside

50
00:02:12.350 --> 00:02:14.749
of something like Visual Studio Code, that can be a little

51
00:02:14.750 --> 00:02:17.710
tricky. There's, like a lot of things,

52
00:02:17.870 --> 00:02:19.270
various ways you can do this.

53
00:02:19.310 --> 00:02:21.384
You can have your Visual Studio Code, or

54
00:02:22.280 --> 00:02:24.240
your other editor, set up the tasking it

55
00:02:25.280 --> 00:02:27.436
needs to do, like TypeScript, maybe gulp, or

56
00:02:28.490 --> 00:02:30.920
some other automation on your files.

57
00:02:31.100 --> 00:02:34.490
You can have that set up in the tool of choice.

58
00:02:34.790 --> 00:02:36.554
The GUI that is. Then you can decide

59
00:02:38.120 --> 00:02:40.150
not to complex your setup in Docker.

60
00:02:40.430 --> 00:02:42.396
Your nodemon can stay simple and can just run Node.

61
00:02:43.070 --> 00:02:45.716
In this example I'll show in a minute, I'm choosing to

62
00:02:46.070 --> 00:02:48.667
do all of that in Docker Compose with nodemon, mostly

63
00:02:49.070 --> 00:02:51.709
because I want to be able to change editors and not lose

64
00:02:51.710 --> 00:02:54.120
functionality. If I tie stuff specifically to

65
00:02:54.740 --> 00:02:56.900
Visual Studio Code, that does make it really awesome

66
00:02:57.730 --> 00:02:59.059
in Visual Studio Code, and it actually has some pretty cool

67
00:02:59.060 --> 00:03:01.804
features around tasks, and running debug, and stuff like

68
00:03:01.910 --> 00:03:04.534
that. But, I'm not always using Visual Studio Code.

69
00:03:04.790 --> 00:03:06.848
I like to do it a little bit in Vim, and I

70
00:03:07.790 --> 00:03:11.120
want that same functionality so that when I change a file,

71
00:03:11.150 --> 00:03:13.960
for example TypeScript in Vim, I want nodemon

72
00:03:14.280 --> 00:03:16.459
to see that, and then recompile and make the changes

73
00:03:16.460 --> 00:03:18.134
itself. I'll give you plenty of resources on

74
00:03:19.610 --> 00:03:22.760
this lecture so that you can go check out other materials

75
00:03:22.820 --> 00:03:24.919
on how these things are set up. Because there's definitely

76
00:03:24.920 --> 00:03:27.469
a lot of different ways and different combinations, and

77
00:03:27.470 --> 00:03:29.629
we're all different in the way we like to develop and set

78
00:03:29.630 --> 00:03:31.610
up our environments. So, check those out.

79
00:03:31.630 --> 00:03:33.801
If you don't necessarily work the exact, same way that I'm

80
00:03:33.860 --> 00:03:34.860
going to give you in this example.

81
00:03:35.570 --> 00:03:38.570
If you check out, in the repo for this course, the

82
00:03:38.600 --> 00:03:41.990
TypeScript directory, it's a sample default

83
00:03:42.020 --> 00:03:44.764
Express app that isn't really there to do anything other

84
00:03:45.050 --> 00:03:46.819
than just to give us a hello world, because that isn't the

85
00:03:46.820 --> 00:03:49.580
focus here, right. We just need a running Node app to do

86
00:03:49.640 --> 00:03:50.840
all the bells and whistles on.

87
00:03:51.100 --> 00:03:54.310
Let's look at some of the files I have inside of

88
00:03:54.950 --> 00:03:57.743
VS Code. You'll notice some normal files in here that you

89
00:03:57.800 --> 00:03:59.770
would see in every project. I've got my package JSON.

90
00:04:00.770 --> 00:04:02.682
I've got my nodemon, Dockerfile, Docker Compose.

91
00:04:03.050 --> 00:04:04.990
That's all filled out. Dockerignore, gitignore.

92
00:04:05.540 --> 00:04:06.540
That stuff's all in there.

93
00:04:06.800 --> 00:04:08.956
I just have one sample file that is there as

94
00:04:09.800 --> 00:04:11.930
the sample app for Express.

95
00:04:12.230 --> 00:04:14.143
It's sitting in a source directory as TypeScript.

96
00:04:15.140 --> 00:04:17.360
A couple of things to note.

97
00:04:18.019 --> 00:04:21.349
The Dockerfile is set up in a multistage build

98
00:04:21.350 --> 00:04:24.192
so that I get a production one, or sort of a base image at

99
00:04:24.290 --> 00:04:27.500
the top. Then that flows into

100
00:04:27.950 --> 00:04:30.350
other things, specifically a dev build.

101
00:04:30.710 --> 00:04:33.890
Then it runs tsc for production build

102
00:04:33.920 --> 00:04:36.615
only, because in development, I'm not going to run this

103
00:04:36.890 --> 00:04:38.150
stuff by rebuilding, right.

104
00:04:38.170 --> 00:04:40.159
You never want to have to rebuild an image just to get your

105
00:04:40.160 --> 00:04:41.450
code to work in development.

106
00:04:41.750 --> 00:04:44.570
You really want that stuff running real time in your

107
00:04:44.690 --> 00:04:46.330
editor, and in our case, with nodemon.

108
00:04:47.540 --> 00:04:49.219
This stuff down at the bottom is really just for

109
00:04:49.220 --> 00:04:52.120
production. You'll see in the later sections of this course

110
00:04:52.480 --> 00:04:55.099
where I talk more about getting your images designed for

111
00:04:55.100 --> 00:04:56.809
production and getting all that set up properly.

112
00:04:56.810 --> 00:04:59.449
So, that's not necessarily the point here, but I did want

113
00:04:59.450 --> 00:05:02.720
to have that file here so that it will work as expected.

114
00:05:02.750 --> 00:05:05.102
Because when I'm in the Docker Compose, I choose

115
00:05:05.870 --> 00:05:08.870
a target and that gives me a target stage

116
00:05:09.140 --> 00:05:10.264
for just local development, right.

117
00:05:11.240 --> 00:05:13.819
Then the other stages I'm not using because they're really

118
00:05:13.820 --> 00:05:16.370
just for production. This allows me to have that single

119
00:05:16.640 --> 00:05:18.529
Dockerfile like we've seen in the past, in the beginning of

120
00:05:18.530 --> 00:05:21.140
this course, when we talked about multistage builds.

121
00:05:21.590 --> 00:05:24.570
I've got the debug port open, the default one of 9229.

122
00:05:25.130 --> 00:05:26.899
Of course, you can always make this whatever you want on

123
00:05:26.900 --> 00:05:27.900
your system.

124
00:05:27.920 --> 00:05:29.720
I'm mounting my code as usual.

125
00:05:30.020 --> 00:05:32.900
This is using the scenario one,

126
00:05:32.990 --> 00:05:35.659
simple setup from the previous lecture that we talked about

127
00:05:35.660 --> 00:05:36.660
different ways to bind mount.

128
00:05:37.400 --> 00:05:40.039
In my package JSON, I had the dev dependencies like you'd

129
00:05:40.040 --> 00:05:42.985
expect. In there are specific stuff for TypeScript

130
00:05:43.670 --> 00:05:46.470
and for TypeScript to be able to work in Visual Studio Code

131
00:05:46.760 --> 00:05:49.504
well. Especially the types here, at the top, that allows

132
00:05:49.760 --> 00:05:52.504
VS Code to understand what's going on, and the functions

133
00:05:53.030 --> 00:05:54.650
and stuff in my code.

134
00:05:54.680 --> 00:05:57.326
Then, TypeScript down at the bottom so that I can have

135
00:05:57.710 --> 00:05:59.131
that tsc command line tool to

136
00:06:00.680 --> 00:06:02.281
compile the code in the JavaScript.

137
00:06:03.170 --> 00:06:05.228
Then I've got ts node dev, which we'll see

138
00:06:06.260 --> 00:06:09.440
in a minute, helps me run my code in a one liner.

139
00:06:10.160 --> 00:06:12.739
If you're into TypeScript, and of course you can do all

140
00:06:12.740 --> 00:06:15.260
this debug and setup stuff without TypeScript, it's just

141
00:06:15.890 --> 00:06:18.585
I'm adding it on here to show how all these things work

142
00:06:18.600 --> 00:06:21.393
together. I have at the top a simple include statement in

143
00:06:21.560 --> 00:06:24.170
a ts config file. The rest of it is pretty much default

144
00:06:24.380 --> 00:06:25.380
out-of-the-box.

145
00:06:25.670 --> 00:06:28.365
Other than the fact that I include the source directory

146
00:06:28.370 --> 00:06:30.950
where all of my TypeScript is going to be.

147
00:06:31.010 --> 00:06:32.750
Then I set source map to true.

148
00:06:32.780 --> 00:06:34.370
That's going to help with the debugging and

149
00:06:34.970 --> 00:06:37.369
Visual Studio Code. You can see that information in the

150
00:06:37.370 --> 00:06:39.739
resources for this lecture, and it tells you how to set all

151
00:06:39.740 --> 00:06:42.019
this stuff up. A lot of the guides on the Internet will

152
00:06:42.020 --> 00:06:43.040
give you that information.

153
00:06:43.340 --> 00:06:44.810
Then the output directory.

154
00:06:45.110 --> 00:06:47.260
That's where the JavaScript is going to be after TypeScript

155
00:06:47.600 --> 00:06:49.805
is done. I'm using that standard dist as many

156
00:06:50.810 --> 00:06:52.160
different repos will show you.

157
00:06:52.700 --> 00:06:53.900
And away we go.

158
00:06:54.290 --> 00:06:57.200
The next step up is to look at our

159
00:06:57.640 --> 00:06:58.497
nodemon.

160
00:06:58.498 --> 00:07:01.340
Instead of me just running nodemon with a bunch of options

161
00:07:01.820 --> 00:07:04.129
on it at the command line, when I get a little more

162
00:07:04.130 --> 00:07:06.770
complicated setup with nodemon, I like to have it in the

163
00:07:07.130 --> 00:07:09.740
nodemon JSON. I've mentioned that before in other lectures.

164
00:07:10.100 --> 00:07:12.011
In here, I'm having it watch the source

165
00:07:13.190 --> 00:07:16.520
directory, ignoring files in case they're

166
00:07:16.550 --> 00:07:18.859
there that are spec files. I'm not using them in this

167
00:07:18.860 --> 00:07:21.830
project. The important line here is the exec line

168
00:07:22.170 --> 00:07:23.340
where I'm running Node.

169
00:07:24.200 --> 00:07:25.474
I'm enabling the debugger.

170
00:07:25.640 --> 00:07:27.559
That's the inspect part. Make sure that when you're

171
00:07:27.560 --> 00:07:30.055
enabling your debuggers, you're always putting in the four

172
00:07:30.056 --> 00:07:33.440
zeros for the IP address because by default,

173
00:07:33.740 --> 00:07:36.800
Node's inspector, like many other debuggers, will

174
00:07:36.830 --> 00:07:38.643
not run by default on all interfaces.

175
00:07:39.290 --> 00:07:40.550
They'll only run on localhost.

176
00:07:40.640 --> 00:07:42.894
As you recall, inside your container, you

177
00:07:44.120 --> 00:07:46.279
can't do that, right. Because localhost, in a container, is

178
00:07:46.280 --> 00:07:48.530
just a container. Then the debugger won't work.

179
00:07:48.560 --> 00:07:50.930
You won't be able to connect to it from your host machine.

180
00:07:51.680 --> 00:07:54.081
At the end here, I'm doing a -r ts node register.

181
00:07:54.650 --> 00:07:58.220
That gets me the feature set of ts node, which essentially.

182
00:07:58.610 --> 00:08:01.180
automatically compiles my TypeScript

183
00:08:01.730 --> 00:08:04.689
into JavaScript, and I tell it what the JavaScript

184
00:08:05.120 --> 00:08:07.880
file that runs my app is, right.

185
00:08:07.910 --> 00:08:10.820
So, that one little liner, you can actually find

186
00:08:10.880 --> 00:08:13.771
some of that information on the nodemon page, as well as in

187
00:08:13.880 --> 00:08:16.673
TypeScript examples on Microsoft's site, and other places

188
00:08:17.120 --> 00:08:20.120
as well. Once you've got all that set up,

189
00:08:20.420 --> 00:08:22.870
you're ready to enable debugging on your app.

190
00:08:22.890 --> 00:08:25.240
If I just open up this simple little thing.

191
00:08:25.550 --> 00:08:28.441
Of course in my case, I can go back to the command line and

192
00:08:28.580 --> 00:08:29.600
do a docker compose up.

193
00:08:30.002 --> 00:08:32.573
You can also have Visual Studio Code

194
00:08:33.340 --> 00:08:36.110
set up all your Docker and Docker Compose stuff.

195
00:08:36.169 --> 00:08:37.818
You can actually have it run different commands.

196
00:08:37.820 --> 00:08:39.020
You can give it tasks.

197
00:08:39.289 --> 00:08:41.080
That's a little bit beyond what I want to go through in

198
00:08:41.090 --> 00:08:43.730
this course because that's really very specific to

199
00:08:44.240 --> 00:08:46.789
Visual Studio Code. As you learn that tool, if you really

200
00:08:46.790 --> 00:08:49.669
want to get heavy into sticking with that one tool and even

201
00:08:49.670 --> 00:08:52.220
having your terminal window in that tool, that's fine.

202
00:08:52.260 --> 00:08:54.955
It'll all work the way that you would expect with these

203
00:08:54.980 --> 00:08:56.497
tools. I'm just going to run it here like usual, docker

204
00:08:56.498 --> 00:08:57.498
compose up. You'll

205
00:09:02.940 --> 00:09:05.490
see here that it's showing nodemon starting.

206
00:09:05.520 --> 00:09:06.520
It starts Node.

207
00:09:06.780 --> 00:09:09.720
It's got that extra little register on the end, and

208
00:09:09.750 --> 00:09:10.900
it enables the debugger.

209
00:09:11.020 --> 00:09:12.120
So, you see the debugger.

210
00:09:12.390 --> 00:09:15.119
Then of course, my app is doing a console log telling you

211
00:09:15.120 --> 00:09:16.480
that it's running on port 3000.

212
00:09:16.830 --> 00:09:18.548
If we jumped in our browser, we would see it running on

213
00:09:18.549 --> 00:09:21.081
port 3000 because that's the mapping I've done in Docker

214
00:09:21.360 --> 00:09:23.712
Compose. If I jump back over to my editor and go

215
00:09:24.480 --> 00:09:27.630
to debugging, I have set up a debugging

216
00:09:27.660 --> 00:09:30.480
option here. This is mine that I've put in.

217
00:09:30.690 --> 00:09:32.010
This will be a part of the repo.

218
00:09:32.610 --> 00:09:34.649
If you don't have one yet, you can click on the little

219
00:09:34.650 --> 00:09:38.280
widget. It will allow you to add configurations.

220
00:09:39.150 --> 00:09:42.330
When you start out, it'll give you this, all by default,

221
00:09:42.360 --> 00:09:44.399
except for two of these lines. I've added some comments in

222
00:09:44.400 --> 00:09:46.550
for you. It'll ask you for the remote root.

223
00:09:47.190 --> 00:09:50.190
That means the root inside of the container.

224
00:09:50.640 --> 00:09:53.249
Whenever you add a configuration, at least right now in

225
00:09:53.250 --> 00:09:56.520
2019 with Visual Studio Code, you can use

226
00:09:56.810 --> 00:09:58.130
this Docker Attach to Node.

227
00:09:58.770 --> 00:10:00.030
That's what I started with, right.

228
00:10:00.070 --> 00:10:02.489
Because you're going to use Docker, and you're going to

229
00:10:02.490 --> 00:10:03.900
attach to it rather than launch it.

230
00:10:03.930 --> 00:10:06.772
The launch configurations mean Visual Studio Code will run

231
00:10:07.170 --> 00:10:09.606
things for you. If you wanted to have Visual Studio Code

232
00:10:10.290 --> 00:10:13.370
run Docker Compose for you, you can do that as well.

233
00:10:13.410 --> 00:10:16.080
There's actually information on the

234
00:10:16.650 --> 00:10:18.149
Visual Studio Code website that will show you how to do

235
00:10:18.150 --> 00:10:19.150
that for the debugger.

236
00:10:19.410 --> 00:10:21.410
I don't want to do that. I just want to run Docker Compose

237
00:10:21.660 --> 00:10:24.061
myself. I'd rather have it in its own window, and

238
00:10:24.750 --> 00:10:26.940
have them, you know, on my screen. But, you can totally do

239
00:10:26.970 --> 00:10:29.180
whatever you want. All that stuff works in here.

240
00:10:29.190 --> 00:10:31.040
You would add just extra options here.

241
00:10:31.470 --> 00:10:33.659
The IntelliSense is really good for helping you figure out

242
00:10:33.660 --> 00:10:36.810
these options. I add in restart true here because

243
00:10:37.220 --> 00:10:40.080
when nodemon restarts Node every time I save a file,

244
00:10:40.380 --> 00:10:42.820
I want the debugger to reconnect automatically.

245
00:10:43.260 --> 00:10:45.217
Then lastly here, I have to set the outfiles.

246
00:10:45.900 --> 00:10:48.272
If you don't set the outfiles, because I'm using TypeScript

247
00:10:48.900 --> 00:10:51.546
here, I need to have my outfiles specified so it knows

248
00:10:52.170 --> 00:10:54.669
where the JavaScript is going once it's compiled by

249
00:10:54.870 --> 00:10:57.000
TypeScript. You've got to get to get that right.

250
00:10:57.030 --> 00:10:59.579
That took me a little while to figure out that you just

251
00:10:59.580 --> 00:11:00.930
need to point it to that folder.

252
00:11:01.350 --> 00:11:04.292
Once you've done that, you can then go back over to your

253
00:11:04.557 --> 00:11:05.790
debugger and hit play.

254
00:11:06.600 --> 00:11:08.805
It will connect to the remote debugging port.

255
00:11:09.300 --> 00:11:09.809
You'll know

256
00:11:09.810 --> 00:11:11.700
that's good when there's an orange bar at the bottom.

257
00:11:12.180 --> 00:11:13.740
You get your nice little debug window.

258
00:11:14.060 --> 00:11:16.584
Then I can go and do things like set breakpoints.

259
00:11:16.980 --> 00:11:19.890
When I go to the browser and refresh, it will properly

260
00:11:20.310 --> 00:11:22.350
identify that breakpoint and stop me there.

261
00:11:22.710 --> 00:11:25.319
Once you know that that is all working correctly, you'll

262
00:11:25.320 --> 00:11:28.350
know that it will work, because this red dot will actually

263
00:11:28.500 --> 00:11:30.630
stop the code whenever you get to that.

264
00:11:30.660 --> 00:11:32.244
In this case, I'm stopping the root URL.

265
00:11:33.600 --> 00:11:36.246
So, if I were to go there in my browser, it would stop

266
00:11:36.690 --> 00:11:38.822
that and it would see it pop up here, and

267
00:11:39.720 --> 00:11:41.580
it would identify correctly in this file.

268
00:11:41.880 --> 00:11:43.580
If you don't have your TypeScript stuff set up right, and

269
00:11:43.950 --> 00:11:46.645
paths right, you'll actually have it pop up a different

270
00:11:46.680 --> 00:11:49.608
window that says a read-only version of the app.ts.That

271
00:11:50.970 --> 00:11:53.159
usually means that you just don't have your paths quite

272
00:11:53.160 --> 00:11:55.289
right for your source and distribution in the various

273
00:11:55.290 --> 00:11:57.691
places. It can't quite figure out where the files

274
00:11:58.470 --> 00:11:59.550
are and where they're going.

275
00:12:00.120 --> 00:12:01.739
That can be a little tricky to do when you're dealing with

276
00:12:01.740 --> 00:12:04.350
Docker with Visual Studio Code on top of it.

