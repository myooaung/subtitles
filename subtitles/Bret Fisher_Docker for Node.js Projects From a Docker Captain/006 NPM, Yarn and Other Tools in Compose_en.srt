1
00:00:02,540 --> 00:00:04,583
Now that you've got your app running in Compose

2
00:00:05,689 --> 00:00:08,532
and things are going well, the first thing you're going to

3
00:00:08,660 --> 00:00:11,930
probably think of next is, how do I run all these

4
00:00:12,350 --> 00:00:15,280
other commands, like npm and Yarn, and application-specific

5
00:00:15,680 --> 00:00:18,770
commands, if I'm sitting outside on my command line and not

6
00:00:18,860 --> 00:00:20,210
inside the container?

7
00:00:20,600 --> 00:00:22,820
And, so you might think, well let me just do a docker exec,

8
00:00:22,821 --> 00:00:26,120
but remember, in Docker Compose, we have

9
00:00:26,180 --> 00:00:28,369
almost all of the standard Docker commands as

10
00:00:28,370 --> 00:00:30,900
docker-compose commands, and they're easier to use.

11
00:00:31,490 --> 00:00:34,700
There's two ways you normally run

12
00:00:34,730 --> 00:00:35,810
these commands in Docker Compose.

13
00:00:36,650 --> 00:00:39,079
The first one is "docker-compose run", which most people

14
00:00:39,080 --> 00:00:41,530
don't realize is quite convenient, and I use quite

15
00:00:42,230 --> 00:00:44,925
frequently when I don't necessarily have the containers

16
00:00:45,530 --> 00:00:48,079
running, and I just need it to spin up a container from my

17
00:00:48,080 --> 00:00:50,628
image, include my bind mount, and all my environment

18
00:00:50,840 --> 00:00:52,820
settings like I would have in the Docker Compose file.

19
00:00:53,210 --> 00:00:56,270
Then run something against the app, maybe

20
00:00:56,540 --> 00:00:57,961
a special command on the app.

21
00:00:58,250 --> 00:01:00,110
Maybe it's an "npm install" command.

22
00:01:00,170 --> 00:01:01,170
Something like that, right.

23
00:01:02,060 --> 00:01:04,069
That run will create a new container from

24
00:01:05,360 --> 00:01:08,900
the image. The other option is "docker-compose exec",

25
00:01:08,960 --> 00:01:10,790
and that's the one we're probably familiar with.

26
00:01:11,180 --> 00:01:14,300
That's the one that runs an existing container.

27
00:01:14,480 --> 00:01:17,750
It will create a new shell, or a new

28
00:01:18,020 --> 00:01:20,764
connection, for a command inside that running container.

29
00:01:20,780 --> 00:01:23,389
It does require that the container is already running.

30
00:01:23,390 --> 00:01:25,370
You've probably done a "docker-compose up" already.

31
00:01:25,700 --> 00:01:27,979
Now you would do a "docker-compose exec" to get inside

32
00:01:27,980 --> 00:01:28,459
there.

33
00:01:28,460 --> 00:01:32,030
I use this for one-off commands, as well as getting shells

34
00:01:32,120 --> 00:01:34,717
in this container just so that I can sit in there and

35
00:01:35,120 --> 00:01:37,260
do things on the fly while the app is running.

36
00:01:37,760 --> 00:01:40,009
Let me show you a couple of demos to see what I'm talking

37
00:01:40,010 --> 00:01:41,291
about here. I'm going to use Strapi.

38
00:01:42,170 --> 00:01:45,200
Strapi is a Node-based CMS tool, and it

39
00:01:45,440 --> 00:01:47,076
basically creates the backend for content.

40
00:01:47,077 --> 00:01:49,661
You would maybe put something like Vue.js or

41
00:01:50,060 --> 00:01:52,804
something else in front of it. It creates its own little

42
00:01:52,910 --> 00:01:55,507
web portal. Often, you need to do command line stuff.

43
00:01:56,030 --> 00:01:58,879
Like the first thing you might need to do, in this case, is

44
00:01:58,880 --> 00:02:01,069
"npm install". Then you might need to run some special

45
00:02:01,070 --> 00:02:03,667
strapi commands. We need to do all of that inside the

46
00:02:03,950 --> 00:02:06,204
container. In this project I have, you can see

47
00:02:07,040 --> 00:02:09,900
that I only have the raw project

48
00:02:10,160 --> 00:02:12,074
files from source code. I don't have the node_modules.

49
00:02:12,740 --> 00:02:14,629
So, if you remember from the previous lecture, we talked

50
00:02:14,630 --> 00:02:17,450
about different ways to do bind mounting.

51
00:02:17,810 --> 00:02:19,940
In this case, I'm using the first method.

52
00:02:20,000 --> 00:02:21,760
If I just cat out my docker-dompose.yml,

53
00:02:23,660 --> 00:02:26,630
you'll see that I'm bind mounting the

54
00:02:26,690 --> 00:02:29,990
app directory into /app inside the container.

55
00:02:30,380 --> 00:02:31,767
If you look at my Dockerfile, you'll

56
00:02:35,320 --> 00:02:37,721
see that I have the working directory as a single

57
00:02:38,500 --> 00:02:40,852
place. So, in this case I've chosen the previous

58
00:02:41,590 --> 00:02:44,650
lecture's Solution 1, where I'm only

59
00:02:45,010 --> 00:02:47,890
creating the bind mount in one place.

60
00:02:47,980 --> 00:02:51,130
I'm not moving the node_modules somewhere else, so

61
00:02:51,160 --> 00:02:52,360
this is a simpler setup.

62
00:02:52,780 --> 00:02:55,059
It turns out that with Strapi, it's one of the tools it

63
00:02:55,060 --> 00:02:57,608
doesn't work well with that second solution from the

64
00:02:57,670 --> 00:02:58,670
previous lecture.

65
00:02:58,720 --> 00:03:01,120
I have to do this. I have to keep the node modules as a

66
00:03:01,190 --> 00:03:03,580
subdirectory of my app for it to work.

67
00:03:03,700 --> 00:03:04,990
At least for me, I had to do that.

68
00:03:05,470 --> 00:03:07,980
Here, my first thing to do would be to run docker-compose.

69
00:03:08,770 --> 00:03:10,830
Instead of doing an up, it would just fail, right.

70
00:03:10,870 --> 00:03:13,840
It wouldn't work. So, I have to do an "npm install"

71
00:03:14,050 --> 00:03:17,620
against the API, which is the service,

72
00:03:17,740 --> 00:03:20,019
not the container, but the service that runs this

73
00:03:20,020 --> 00:03:22,269
container. That's one of the, you know, unique things about

74
00:03:22,270 --> 00:03:25,810
Docker Compose is I can run commands against services,

75
00:03:25,840 --> 00:03:27,490
and I don't have to know the specific container name.

76
00:03:28,210 --> 00:03:30,121
I do a "docker-compose run" against the

77
00:03:31,240 --> 00:03:32,510
API service.

78
00:03:33,170 --> 00:03:34,980
Then I just want to do an "npm install".

79
00:03:44,220 --> 00:03:46,319
The reason I chose to do the run command there is I didn't

80
00:03:46,320 --> 00:03:48,209
already have this running. In fact, I couldn't have this

81
00:03:48,210 --> 00:03:50,909
running because "docker-compose up" would have just failed

82
00:03:50,910 --> 00:03:52,340
with being no modules there.

83
00:03:52,350 --> 00:03:54,929
If I do an ls on this directory, you'll see I have the node

84
00:03:54,930 --> 00:03:56,820
modules as we would expect.

85
00:03:57,240 --> 00:03:58,738
Now I can do a "docker-compose up", which

86
00:04:02,850 --> 00:04:05,610
will bring up both the Mongo database in this solution,

87
00:04:06,000 --> 00:04:08,370
as well as the API.

88
00:04:13,700 --> 00:04:15,984
In this example, where you can look at the "sample-strapi"

89
00:04:16,560 --> 00:04:19,548
directory inside of my repo, I now have

90
00:04:19,550 --> 00:04:21,360
a server running. It's actually running on port 3030

91
00:04:21,920 --> 00:04:23,090
because of the Compose file.

92
00:04:23,360 --> 00:04:25,957
But, I need to do other things inside there, like run

93
00:04:26,390 --> 00:04:29,348
strapi commands. So, I can bring up another terminal,

94
00:04:29,960 --> 00:04:32,300
and I can run "docker-compose exec".

95
00:04:34,320 --> 00:04:36,000
I could do one-off commands here.

96
00:04:36,060 --> 00:04:38,358
I could actually say something like "docker-compose exec

97
00:04:39,060 --> 00:04:39,719
api".

98
00:04:39,720 --> 00:04:40,830
That's the name of the service.

99
00:04:41,160 --> 00:04:42,220
And then strapi.

100
00:04:44,830 --> 00:04:47,050
Just do a help in case I wasn't sure of the command

101
00:04:47,290 --> 00:04:50,110
structure there. Each one of these, it would

102
00:04:50,320 --> 00:04:52,540
connect into the application and then run the command.

103
00:04:53,080 --> 00:04:54,909
Obviously, a faster way, if you're going to run lots of

104
00:04:54,910 --> 00:04:57,080
commands, is to just get a shell into there.

105
00:04:57,430 --> 00:04:59,649
Because we're using default Debian, it's going to have the

106
00:04:59,650 --> 00:05:02,260
bash shell. So, I can just do exec API bash.

107
00:05:02,440 --> 00:05:05,260
Notice I don't have to do the -it because exec and run

108
00:05:05,350 --> 00:05:07,690
already assume that and give you those.

109
00:05:08,620 --> 00:05:10,779
This would be maybe something I would do more often.

110
00:05:10,780 --> 00:05:13,622
I would just sit in here, in one terminal, while the other

111
00:05:13,660 --> 00:05:15,190
terminal is running my logs.

112
00:05:15,460 --> 00:05:18,136
I could perform stuff against my application, like strapi

113
00:05:18,330 --> 00:05:20,350
commands, right from inside this terminal.

