1
00:00:02,590 --> 00:00:04,910
Hopefully you have finished the assignment.

2
00:00:05,200 --> 00:00:07,839
Maybe you've checked out the assignment answers, and then

3
00:00:07,840 --> 00:00:09,770
you've tried the bonus material.

4
00:00:09,850 --> 00:00:12,496
The reason I put the bonus in here was it's relying on

5
00:00:12,880 --> 00:00:15,428
two things. One is you've got to go back to previous

6
00:00:16,090 --> 00:00:18,883
lectures earlier in the course, and depending on how fast

7
00:00:19,390 --> 00:00:22,089
you're consuming all this content, it may have been days

8
00:00:22,090 --> 00:00:24,521
ago, could have been weeks ago, that you did that stuff.

9
00:00:24,522 --> 00:00:27,129
It's always hard to remember, and that's why I'm bringing

10
00:00:27,130 --> 00:00:29,090
it back. You're definitely going to need

11
00:00:30,100 --> 00:00:32,746
to repeat this stuff over and over to remember it long

12
00:00:32,890 --> 00:00:34,323
term. So, here's another chance.

13
00:00:34,324 --> 00:00:36,725
I'm glad you're checking out the bonus and you're

14
00:00:37,030 --> 00:00:38,949
considering doing that yourself. Hopefully, you've tried

15
00:00:38,950 --> 00:00:41,620
all that. You've gotten it to work, or maybe you got stuck,

16
00:00:41,650 --> 00:00:42,730
and you're here for that reason.

17
00:00:43,090 --> 00:00:45,442
That's all fine because this is, one part, going

18
00:00:46,050 --> 00:00:48,519
back to those other videos, and the other part is doing

19
00:00:48,520 --> 00:00:51,009
Internet research. A lot of these things, if you did it in

20
00:00:51,010 --> 00:00:53,259
a previous video, you maybe didn't do it exactly the same

21
00:00:53,260 --> 00:00:54,880
way as you'll do it here.

22
00:00:55,150 --> 00:00:57,094
Or, maybe it's something that we only mentioned and didn't

23
00:00:57,370 --> 00:00:58,772
practice in a previous video.

24
00:00:58,795 --> 00:01:01,147
That's all good stuff because in the real world,

25
00:01:01,850 --> 00:01:03,969
you are going to be doing stuff every day that you probably

26
00:01:03,970 --> 00:01:06,870
have never done before. That's the life of tech, right.

27
00:01:07,030 --> 00:01:09,010
Especially in DevOps where everything is new.

28
00:01:09,520 --> 00:01:11,380
So, that's a good pattern to practice.

29
00:01:11,410 --> 00:01:13,713
Here we go. I'm in the bonus area and the first

30
00:01:14,500 --> 00:01:16,210
thing it tells me is security scanner.

31
00:01:16,309 --> 00:01:18,820
We had a whole lecture on that earlier.

32
00:01:19,030 --> 00:01:21,627
I'm going to go ahead and do the same thing as we did

33
00:01:21,820 --> 00:01:24,159
before, only we're going to fit it in this Dockerfile we

34
00:01:24,160 --> 00:01:27,160
just built. You've got the Dockerfile that you built

35
00:01:27,580 --> 00:01:29,295
in the previous assignment answers.

36
00:01:29,335 --> 00:01:32,140
We're just going to keep rolling through that.

37
00:01:32,170 --> 00:01:34,480
We're basically building on that answer file.

38
00:01:34,840 --> 00:01:37,780
Down here in the test

39
00:01:37,810 --> 00:01:40,150
area, is where I probably want to put the scanner.

40
00:01:41,250 --> 00:01:43,932
I could make it it's own, separate

41
00:01:44,640 --> 00:01:46,943
stage. That way I could do code testing and not

42
00:01:47,910 --> 00:01:48,930
security scanning.

43
00:01:49,620 --> 00:01:51,750
And, you know, leave them a little bit flexible such you

44
00:01:51,760 --> 00:01:53,340
choose one or the other when you build the image.

45
00:01:53,370 --> 00:01:55,139
But, I'm just going to add it in here because it doesn't

46
00:01:55,140 --> 00:01:58,590
require, in the readme, that I do it in a separate stage.

47
00:01:59,250 --> 00:02:01,829
And since I'm going to use the MicroScanner, let me just go

48
00:02:01,830 --> 00:02:04,860
to the Web and go find that GitHub repo.

49
00:02:05,550 --> 00:02:08,940
Like all good GitHub repos, it's got the basic

50
00:02:09,060 --> 00:02:12,360
use and install stuff right here in the page,

51
00:02:12,780 --> 00:02:14,010
just like we used before.

52
00:02:14,700 --> 00:02:17,150
In fact, if we go back to that previous lecture in

53
00:02:17,760 --> 00:02:20,590
the course repo, I can probably cut and paste from there.

54
00:02:21,510 --> 00:02:23,617
That example was in the multistage scanning

55
00:02:24,600 --> 00:02:27,740
directory. The Dockerfile in there was a multistage

56
00:02:28,050 --> 00:02:30,360
Dockerfile that had the MicroScanner included.

57
00:02:31,020 --> 00:02:33,120
I'm going to copy and paste this out.

58
00:02:34,250 --> 00:02:35,591
We're going need to change something.

59
00:02:35,720 --> 00:02:38,600
You'll see it in a second that,

60
00:02:38,990 --> 00:02:40,520
what's wrong with this line.

61
00:02:41,240 --> 00:02:43,530
This is APK. This is for Alpine.

62
00:02:43,910 --> 00:02:46,773
But, what are we using in this example?

63
00:02:46,880 --> 00:02:48,200
We're using the Node slim.

64
00:02:48,740 --> 00:02:50,360
Node slim is Debian based.

65
00:02:50,480 --> 00:02:52,685
If it was going to be Alpine based, it would say Alpine

66
00:02:52,790 --> 00:02:55,318
somewhere in the name or tag there.

67
00:02:56,330 --> 00:02:58,190
We definitely can't use this line.

68
00:02:58,970 --> 00:03:01,973
When you go back and look at the repo though, the repo

69
00:03:02,210 --> 00:03:05,337
says, add ca-certificates if needed if you're on an apt-get

70
00:03:05,780 --> 00:03:07,080
based distribution.

71
00:03:07,100 --> 00:03:08,100
That's what we're using.

72
00:03:08,930 --> 00:03:09,930
We just need to get the ca-certificates.

73
00:03:11,540 --> 00:03:12,830
You might have remembered seeing that.

74
00:03:12,860 --> 00:03:15,748
If we go back into the repo here and

75
00:03:18,230 --> 00:03:20,299
scroll up in our Dockerfile, you'll notice that we

76
00:03:20,300 --> 00:03:23,030
installed the ca-certificates already in dev.

77
00:03:23,240 --> 00:03:25,100
That was for the dev dependencies.

78
00:03:25,430 --> 00:03:27,739
It just so happens we'll get to use that again here, so we

79
00:03:27,740 --> 00:03:29,060
don't even need this line.

80
00:03:29,330 --> 00:03:31,731
We can take out the APK, and we don't need to add

81
00:03:32,510 --> 00:03:35,401
back in an apt-get line because ca-certificates  is already

82
00:03:35,600 --> 00:03:37,560
there. We're going to use an argument in

83
00:03:38,600 --> 00:03:40,849
this case, which means we need to specify at the command

84
00:03:40,850 --> 00:03:43,429
line. What I've done at the command line, just like in the

85
00:03:43,430 --> 00:03:45,978
previous example, is I've created my own environment

86
00:03:46,130 --> 00:03:47,894
variable, in my session, that stores

87
00:03:49,280 --> 00:03:50,280
that key.

88
00:03:50,590 --> 00:03:52,610
Then I don't need to specify that key every time.

89
00:03:53,240 --> 00:03:55,669
I'll save this and we'll go run it and see if we can get

90
00:03:55,670 --> 00:03:56,780
the test to build.

91
00:03:57,560 --> 00:03:59,299
We're going to need to do a manual build here.

92
00:03:59,300 --> 00:04:00,590
So a docker build.

93
00:04:03,170 --> 00:04:05,329
I'm going to need to add in that build argument for the

94
00:04:05,330 --> 00:04:07,731
MicroScanner. So, inside the Dockerfile is called

95
00:04:07,850 --> 00:04:08,850
microscanner token.

96
00:04:12,478 --> 00:04:14,977
On my host, I've set it as an environment variable,

97
00:04:15,460 --> 00:04:17,230
just called microscanner. Your's might be different.

98
00:04:20,820 --> 00:04:23,417
Then I need to tag it, so we'll just call it ultimate

99
00:04:23,940 --> 00:04:24,940
node test. Then

100
00:04:27,000 --> 00:04:29,482
I need to target it to the stage

101
00:04:30,130 --> 00:04:32,620
test. Then I am building in this directory.

102
00:04:35,760 --> 00:04:38,730
All right. My scanner ran, and worked,

103
00:04:39,000 --> 00:04:40,000
and that's good.

104
00:04:40,800 --> 00:04:43,319
Moving on. Back in the readme, the third line here is about

105
00:04:43,320 --> 00:04:46,470
the best practices from that earlier section.

106
00:04:46,530 --> 00:04:48,930
So, let's enable BuildKit and try again.

107
00:04:49,650 --> 00:04:52,320
In order to use BuildKit, I could do something like

108
00:04:52,650 --> 00:04:54,267
export the docker buildkit equals

109
00:04:55,800 --> 00:04:59,010
1, but I could also just rerun that last command.

110
00:04:59,220 --> 00:05:01,285
Then add in the beginning of it docker

111
00:05:03,090 --> 00:05:06,460
buildkit equals 1.

112
00:05:09,020 --> 00:05:11,079
Then, yep. You'll see that it is now using the new

113
00:05:11,080 --> 00:05:13,490
interface to build that image.

114
00:05:17,440 --> 00:05:19,160
I'll assume that's going to finish properly.

115
00:05:19,270 --> 00:05:21,130
So, I'm going to go back over and check the next line.

116
00:05:22,090 --> 00:05:24,549
Add Tini to images so containers will receive shutdown

117
00:05:24,550 --> 00:05:27,460
signals. We could go look that up,

118
00:05:27,570 --> 00:05:30,363
right. We could just do docker runs or docker compose and

119
00:05:30,520 --> 00:05:33,610
manually add Tini in. But in this case, where you have

120
00:05:33,670 --> 00:05:35,942
an app that doesn't have signals in it, it's not accepting

121
00:05:36,910 --> 00:05:39,605
signals built into the code, Docker recommends that you

122
00:05:39,910 --> 00:05:42,605
install Tini into the image as a permanent part of your

123
00:05:43,000 --> 00:05:44,890
app, if you have no plans to update your app.

124
00:05:44,920 --> 00:05:47,174
Because your users, people that might run this

125
00:05:47,890 --> 00:05:51,100
container, or run Docker Compose, may forget to throw in

126
00:05:51,110 --> 00:05:53,217
Tini. So, you want to make sure it's always

127
00:05:54,070 --> 00:05:55,150
there and always working.

128
00:05:56,437 --> 00:05:59,450
Let's go back to the browser and go

129
00:05:59,510 --> 00:06:00,510
look up Tini.

130
00:06:01,460 --> 00:06:03,166
Down here, there

131
00:06:04,920 --> 00:06:06,070
is some install info.

132
00:06:06,190 --> 00:06:07,758
What I'd want to do here is copy

133
00:06:09,280 --> 00:06:12,230
this out, whatever version is the latest Tini version.

134
00:06:14,750 --> 00:06:16,099
Then add it in my Dockerfile.

135
00:06:17,750 --> 00:06:20,512
If I add it as an entry point up here

136
00:06:20,810 --> 00:06:21,810
at the very root, then

137
00:06:24,160 --> 00:06:26,302
it should be used in all future

138
00:06:28,060 --> 00:06:30,069
stages. Which means, that the entry point

139
00:06:31,090 --> 00:06:34,022
here, which essentially puts Tini on the front

140
00:06:34,600 --> 00:06:37,355
of any of your cmds, will always be in front of the cmds of

141
00:06:37,630 --> 00:06:38,630
future images.

142
00:06:39,930 --> 00:06:41,330
So, we only have to put it in once.

143
00:06:42,530 --> 00:06:44,989
It will, though, cause us to do a complete rebuild because

144
00:06:44,990 --> 00:06:46,868
it'll bust the cache and require all future stages

145
00:06:48,140 --> 00:06:50,750
to be built again. If we do that one more time, just hit

146
00:06:50,762 --> 00:06:51,932
the up arrow, do the BuildKit.

147
00:06:56,260 --> 00:06:59,160
All right. So, that built on the test with that new Tini in

148
00:06:59,560 --> 00:07:02,620
there. Let's build and run the production version

149
00:07:02,630 --> 00:07:04,710
with Tini, just to make sure it works as expected.

150
00:07:05,960 --> 00:07:06,960
I'm going to change this to prod.

151
00:07:07,300 --> 00:07:09,070
I'll change the tag to prod.

152
00:07:14,610 --> 00:07:16,800
All right. That should have built pretty quickly because

153
00:07:17,050 --> 00:07:20,170
BuildKit is more intelligent at caching the layers.

154
00:07:20,890 --> 00:07:23,290
Now I can do a docker run, and I shouldn't need to run

155
00:07:24,220 --> 00:07:26,726
--init. I can just run this ultimate

156
00:07:31,960 --> 00:07:32,960
node prod.

157
00:07:35,620 --> 00:07:37,839
Of course, it'll be waiting for the DB because it doesn't

158
00:07:37,840 --> 00:07:39,190
have a DB be running in the background.

159
00:07:39,610 --> 00:07:41,080
But, I can control c.

160
00:07:41,560 --> 00:07:44,402
And on Mac and Linux, it will actually stop the container.

161
00:07:44,740 --> 00:07:47,170
Remember on Windows, it doesn't actually stop it.

162
00:07:47,410 --> 00:07:48,656
The way you could test this on Windows,

163
00:07:48,940 --> 00:07:51,635
if you remember from the previous lecture, was you do a

164
00:07:51,730 --> 00:07:54,229
docker stop, and the name, or ID, of the container,

165
00:07:55,150 --> 00:07:57,992
and if it takes more than a few seconds, then you know you

166
00:07:58,150 --> 00:07:59,260
have a problem with signals.

167
00:07:59,680 --> 00:08:02,625
All right. Enable the non root Node user for all dev

168
00:08:02,830 --> 00:08:03,830
prod images.

169
00:08:04,330 --> 00:08:06,819
The next one after that is you might need root user for

170
00:08:06,820 --> 00:08:08,710
testing or scanning images, depending on what you're doing.

171
00:08:09,160 --> 00:08:10,780
This is an interesting conundrum.

172
00:08:11,070 --> 00:08:13,612
In this case, we're going to be in the Dockerfile.

173
00:08:13,950 --> 00:08:16,070
Let's say that up here at the top, I

174
00:08:17,410 --> 00:08:18,806
would want to add the user Node.

175
00:08:19,690 --> 00:08:21,944
Well, the problem with this is that any future

176
00:08:22,960 --> 00:08:25,569
stuff, like this apt-get down here, wouldn't work because

177
00:08:25,570 --> 00:08:26,990
it requires root.

178
00:08:27,220 --> 00:08:30,460
So, maybe I shouldn't be putting user Node up at the top.

179
00:08:30,820 --> 00:08:32,619
I should put it down closer to the bottom.

180
00:08:32,620 --> 00:08:34,972
Ideally in development, I'm also running as user

181
00:08:35,740 --> 00:08:39,010
Node. That way I find permission problems that are

182
00:08:39,308 --> 00:08:41,650
potentially going to cause production problems.

183
00:08:41,659 --> 00:08:43,635
So, let's go ahead and put that here

184
00:08:48,080 --> 00:08:49,580
right before nodemon runs.

185
00:08:50,830 --> 00:08:54,280
Unfortunately, that particular

186
00:08:54,730 --> 00:08:57,280
line right there is not going to be passed into production.

187
00:08:57,640 --> 00:09:00,310
So, we're going to need to repeat this line, but that's OK.

188
00:09:00,340 --> 00:09:01,750
It's just a metadata line.

189
00:09:01,810 --> 00:09:03,130
It's not a huge deal.

190
00:09:03,160 --> 00:09:05,380
It's not going to slow down anything in the building.

191
00:09:05,770 --> 00:09:07,093
It is not pure dry code, as

192
00:09:08,830 --> 00:09:11,084
you would call it. But I think we should allow

193
00:09:11,980 --> 00:09:13,646
it because it gets things working.

194
00:09:15,130 --> 00:09:18,140
So, we're back down here user Node.

195
00:09:19,270 --> 00:09:21,190
Then it will

196
00:09:22,150 --> 00:09:23,860
change the user to that Node right before it starts.

197
00:09:24,070 --> 00:09:26,049
So that means when the MicroScanner runs, it will run as

198
00:09:26,050 --> 00:09:28,941
root. What's interesting, though, is we got another problem

199
00:09:29,410 --> 00:09:31,690
here. At least I'm predicting a problem.

200
00:09:32,020 --> 00:09:34,127
Is that the user Node up here in the dev is

201
00:09:34,990 --> 00:09:36,607
going to be rolled into the test.

202
00:09:36,940 --> 00:09:39,194
Which means, all these things will run as user

203
00:09:40,090 --> 00:09:43,050
Node, including the MicroScanner.

204
00:09:43,990 --> 00:09:45,790
The MicroScanner probably needs root.

205
00:09:45,910 --> 00:09:48,670
I don't even know. I haven't checked, but most scanners

206
00:09:48,940 --> 00:09:51,850
need authorization to see all the files in the file system,

207
00:09:52,110 --> 00:09:53,890
and if they're not root, they usually can't do that.

208
00:09:54,190 --> 00:09:55,870
Let's go see if this actually works.

209
00:09:56,900 --> 00:09:59,350
I'm going to do my build again and do the production build.

210
00:09:59,380 --> 00:10:02,500
Which in the case of our Dockerfile, we'll end up building

211
00:10:02,530 --> 00:10:05,620
all stages, because it needs the test output

212
00:10:05,650 --> 00:10:07,090
in order to get the files.

213
00:10:07,510 --> 00:10:09,700
So, let's do that and see what happens.

214
00:10:13,120 --> 00:10:15,970
There we go. All right. We're getting a chmod issue

215
00:10:16,120 --> 00:10:17,908
because run can't change the mode, because

216
00:10:19,270 --> 00:10:20,440
that normally requires root.

217
00:10:20,770 --> 00:10:23,070
So, we are going to go back and forth a little bit.

218
00:10:23,080 --> 00:10:25,990
We've got the user Node for the nodemon command here.

219
00:10:26,770 --> 00:10:29,661
Down here, we're going to need to change user again to user

220
00:10:29,980 --> 00:10:30,980
root.

221
00:10:33,180 --> 00:10:36,690
Then that should mean this line will work properly.

222
00:10:37,110 --> 00:10:38,482
That's okay that it's there.

223
00:10:40,022 --> 00:10:42,449
It doesn't need to be set back to Node because we've

224
00:10:42,450 --> 00:10:44,580
already got the Node down here in production.

225
00:10:46,050 --> 00:10:47,699
All right. I'm just going to hit the up arrow and try again

226
00:10:47,700 --> 00:10:48,700
with the prod image.

227
00:10:50,090 --> 00:10:52,370
That time, the change mode worked.

228
00:10:52,940 --> 00:10:54,500
And there we go. A successfully built file.

229
00:10:55,440 --> 00:10:57,169
I'm going to hit the up arrow a couple of times back to

230
00:10:57,170 --> 00:10:58,170
that docker run.

231
00:10:58,490 --> 00:11:00,259
I'm going to run the production image just to make sure

232
00:11:00,260 --> 00:11:02,900
that it does run as expected with the new user.

233
00:11:04,810 --> 00:11:06,476
Here, you will see an interesting,

234
00:11:07,870 --> 00:11:09,250
new area that we haven't talked about.

235
00:11:09,640 --> 00:11:12,250
I kind of threw this in by accident

236
00:11:12,700 --> 00:11:14,920
when I ran through the material initially.

237
00:11:14,950 --> 00:11:17,560
But, then I realized this is a great example.

238
00:11:18,190 --> 00:11:21,640
In Linux, you may not know that you can't run

239
00:11:21,730 --> 00:11:25,000
non root applications on low ports.

240
00:11:25,390 --> 00:11:28,730
So, by default you need to be root to have the permissions

241
00:11:28,750 --> 00:11:29,750
to use port 80.

242
00:11:30,040 --> 00:11:31,577
A port like 4000, or 3000, works

243
00:11:33,130 --> 00:11:34,330
fine as a regular user.

244
00:11:34,510 --> 00:11:37,600
But, those low ports are reserved for root only.

245
00:11:37,900 --> 00:11:40,209
If you did some Googles, you would find out pretty quickly

246
00:11:40,210 --> 00:11:41,470
that this needs root to run.

247
00:11:41,500 --> 00:11:44,079
That doesn't mean we should be running our app as root in

248
00:11:44,080 --> 00:11:46,120
the container. That doesn't mean we should back up and just

249
00:11:46,330 --> 00:11:49,200
punt and say, I have to use the root

250
00:11:49,390 --> 00:11:50,390
user. That's not true.

251
00:11:50,650 --> 00:11:53,830
In the container, it doesn't really matter, in almost

252
00:11:53,860 --> 00:11:55,810
all cases, what port we use.

253
00:11:56,080 --> 00:11:59,350
Because if we're going to use it outside of that

254
00:11:59,530 --> 00:12:01,809
Docker network, we're just going to publish it on whatever

255
00:12:01,810 --> 00:12:04,260
port we want. So, it's going to do that translation.

256
00:12:04,510 --> 00:12:07,352
Inside the container network, we are probably able to tell

257
00:12:07,540 --> 00:12:09,190
other apps what port this is on.

258
00:12:09,220 --> 00:12:11,956
So, we just need to go over and change the default port

259
00:12:12,070 --> 00:12:13,070
it's using.

260
00:12:14,860 --> 00:12:17,770
If we scroll up, of course, we have the expose here.

261
00:12:18,250 --> 00:12:20,890
I'm just going to use 8080 in this case.

262
00:12:20,920 --> 00:12:23,140
But, that doesn't change what the app listens on.

263
00:12:23,410 --> 00:12:26,154
In this case, because it's a Node app, hopefully you can

264
00:12:26,470 --> 00:12:29,500
dig into the Server.js and find that

265
00:12:29,650 --> 00:12:31,600
the port, right here, is defined.

266
00:12:31,630 --> 00:12:35,020
If you're not receiving a port as the configuration,

267
00:12:35,050 --> 00:12:36,280
then it defaults to 80.

268
00:12:36,520 --> 00:12:39,600
What we want it to do is run on 8080.

269
00:12:42,250 --> 00:12:43,620
It'll default to that one.

270
00:12:43,990 --> 00:12:46,048
Between that and the Dockerfile, let's try

271
00:12:47,050 --> 00:12:48,100
to rebuild and run again.

272
00:12:55,810 --> 00:12:58,900
Then I'll try to run the same image.

273
00:13:01,110 --> 00:13:03,720
There we go. App is now running on port 8080.

274
00:13:04,230 --> 00:13:05,230
It's waiting for DB.

275
00:13:05,540 --> 00:13:08,330
If control c, or on Windows docker

276
00:13:08,580 --> 00:13:10,110
stop. There we go.

277
00:13:10,470 --> 00:13:11,910
Both of those things are working together.

278
00:13:12,970 --> 00:13:15,160
That kind of wraps up the bonus here.

279
00:13:15,250 --> 00:13:18,141
I hope you got through that. If you have time for the bonus

280
00:13:18,340 --> 00:13:21,039
because I think a couple of those scenarios, down at the

281
00:13:21,040 --> 00:13:23,784
end there, are pretty common dealing with going back and

282
00:13:23,890 --> 00:13:26,230
forth between the Node user and the root user.

283
00:13:26,500 --> 00:13:28,899
Dealing with low ports and Linux because a lot of people

284
00:13:28,900 --> 00:13:31,693
may not realize that. That once they locked down the user

285
00:13:31,720 --> 00:13:34,840
to non root, that they're restricted in that low port area.

286
00:13:34,870 --> 00:13:36,390
They can't necessarily use the low ports.

287
00:13:36,850 --> 00:13:39,790
That stuff is common in dealing with

288
00:13:39,940 --> 00:13:41,230
Docker containers day to day.

