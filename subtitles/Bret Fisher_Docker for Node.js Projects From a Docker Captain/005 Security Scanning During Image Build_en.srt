1
00:00:02,700 --> 00:00:05,248
Building on the last few lectures, the next thing we

2
00:00:05,700 --> 00:00:08,670
can add here is security scanning and

3
00:00:08,730 --> 00:00:11,425
auditing. This comes in many forms, and there's lots of

4
00:00:11,700 --> 00:00:13,080
tools out there that can do that.

5
00:00:13,410 --> 00:00:15,180
Your first choice is where to put it.

6
00:00:15,480 --> 00:00:18,420
You can put it in that test stage that we just built.

7
00:00:18,780 --> 00:00:21,599
Ideally, that stage is not run by default, and it's really

8
00:00:21,600 --> 00:00:24,089
something that you elect to choose as your target from the

9
00:00:24,090 --> 00:00:27,390
command line. But, you could also make a new stage

10
00:00:27,400 --> 00:00:29,520
based on the test stage.

11
00:00:29,600 --> 00:00:32,579
Then you're going to have it running tests and

12
00:00:32,580 --> 00:00:35,520
then if those succeed, assuming that your code is right

13
00:00:35,560 --> 00:00:38,249
and it's going to work, then you're going to do auditing

14
00:00:38,250 --> 00:00:39,250
and security scanning.

15
00:00:39,630 --> 00:00:42,325
You probably don't need to do those if your code is not

16
00:00:42,450 --> 00:00:44,949
correct, right. So, it seems to make sense to me to

17
00:00:45,420 --> 00:00:46,420
do the testing first.

18
00:00:46,740 --> 00:00:48,899
I think it's a little more flexible to just add that extra

19
00:00:48,900 --> 00:00:49,900
stage in.

20
00:00:50,160 --> 00:00:52,855
Some of these tools require that the image be built and

21
00:00:52,890 --> 00:00:55,650
that you test them from the outside, maybe by running them

22
00:00:55,830 --> 00:00:57,270
and doing stuff against them.

23
00:00:57,540 --> 00:01:00,239
In those cases, of course, you're going to want to change

24
00:01:00,240 --> 00:01:02,690
the cmd to do whatever you need to do and then run

25
00:01:03,300 --> 00:01:05,554
that image, maybe from Docker Compose and spin

26
00:01:06,253 --> 00:01:08,752
up the things you need in order to test it from the

27
00:01:09,030 --> 00:01:11,676
outside. I've given you lots of links in the resources

28
00:01:12,540 --> 00:01:15,235
here to go check out different security tools, scanning

29
00:01:15,750 --> 00:01:17,370
tools, all that stuff.

30
00:01:17,520 --> 00:01:19,949
Because if you're new to this in containers, it is a whole

31
00:01:19,950 --> 00:01:21,640
new world of stuff out there.

32
00:01:21,960 --> 00:01:25,310
I'm going to give you a quick little example here of one,

33
00:01:25,320 --> 00:01:27,809
but it doesn't necessarily mean it's the best or my

34
00:01:27,810 --> 00:01:30,015
favorite. Before we get started, a few things

35
00:01:31,110 --> 00:01:34,230
to remember. One is that most of these tools

36
00:01:34,320 --> 00:01:36,300
will fail by default.

37
00:01:36,360 --> 00:01:38,663
So, if you're introducing it into your existing

38
00:01:38,700 --> 00:01:41,346
applications and workflows, you probably want these to

39
00:01:41,370 --> 00:01:44,120
silently fail, or to continue on failure,

40
00:01:44,400 --> 00:01:47,640
so that they don't blow up your systems and automatically

41
00:01:47,940 --> 00:01:50,430
stop the production workflows that you may already have.

42
00:01:50,700 --> 00:01:52,649
You're going to want to take it easy at first.

43
00:01:52,650 --> 00:01:55,049
Just have it reporting so that you can see what the stats

44
00:01:55,050 --> 00:01:57,779
look like. Because a lot of these things, especially when

45
00:01:57,780 --> 00:02:00,083
you're talking about CVE vulnerabilities, those

46
00:02:00,750 --> 00:02:02,955
things are common to be in images, especially

47
00:02:03,960 --> 00:02:05,790
in the base images that you might be depending on.

48
00:02:06,060 --> 00:02:08,559
It's really hard to be perfect, and to be zero risk

49
00:02:09,300 --> 00:02:10,380
and zero vulnerability.

50
00:02:10,650 --> 00:02:13,410
It takes a little more methodical approach to decide

51
00:02:13,620 --> 00:02:15,780
which things you're going to consider pass or fail.

52
00:02:16,200 --> 00:02:18,757
Then as a part of this, consider just putting in a run npm

53
00:02:19,140 --> 00:02:21,470
audit. That gets you some free stuff right out-of-the-box.

54
00:02:22,030 --> 00:02:24,779
It's a great feature of npm that will simply make sure that

55
00:02:24,780 --> 00:02:26,593
your dependency Node.js modules don't

56
00:02:27,870 --> 00:02:29,340
have any known security vulnerabilities.

57
00:02:29,430 --> 00:02:32,125
That is above and beyond what an image scanner might do

58
00:02:32,430 --> 00:02:35,272
because not all image scanners, or code scanners, would be

59
00:02:35,400 --> 00:02:36,400
specific to Node.js.

60
00:02:36,720 --> 00:02:39,299
The nice thing is about npm audit is you get it right

61
00:02:39,300 --> 00:02:40,049
out-of-the-box.

62
00:02:40,050 --> 00:02:42,180
I definitely recommend that one first.

63
00:02:42,420 --> 00:02:45,600
Then if you want any third-party security scanning tools,

64
00:02:45,930 --> 00:02:47,792
add those in into this same stage at a

65
00:02:48,900 --> 00:02:50,190
later line.

66
00:02:50,730 --> 00:02:53,369
Let's go take a look at an example that I've given to you

67
00:02:53,370 --> 00:02:55,500
in the multistage scanning directory.

68
00:02:57,040 --> 00:02:59,580
In that directory, it's built on the last couple lectures,

69
00:02:59,680 --> 00:03:02,970
so it's the same example demo app, and it's the same

70
00:03:03,070 --> 00:03:05,500
multistage Dockerfile that we started with.

71
00:03:05,980 --> 00:03:08,260
This time, we've added a another stage.

72
00:03:08,590 --> 00:03:11,236
If we scroll down past the stage 1 and the stage 2 for

73
00:03:11,620 --> 00:03:13,531
development, stage 3 for the copying of

74
00:03:14,650 --> 00:03:17,950
source. That's that small little intermediate stage there.

75
00:03:18,520 --> 00:03:21,313
Then we see the testing stage like we had in the previous

76
00:03:21,550 --> 00:03:24,294
lecture. If we scroll down a little bit farther, we will

77
00:03:24,430 --> 00:03:27,580
see a new stage that I've added for you that is just

78
00:03:27,610 --> 00:03:29,380
about auditing and scanning.

79
00:03:29,650 --> 00:03:32,560
In this case, I've done the npm audit like I recommended.

80
00:03:32,600 --> 00:03:35,460
Do that first because it's usually very fast and it's an

81
00:03:35,920 --> 00:03:36,940
easy one liner.

82
00:03:37,540 --> 00:03:39,206
Next, I added in the Aqua Security

83
00:03:41,080 --> 00:03:43,210
MicroScanner from Aqua Security.

84
00:03:43,420 --> 00:03:46,540
MicroScanner is one of the many tools you can scan.

85
00:03:46,570 --> 00:03:48,699
There are other ones out there that I've listed in the

86
00:03:48,700 --> 00:03:51,279
resources that you can definitely check out all that stuff.

87
00:03:51,280 --> 00:03:52,280
Try different ones.

88
00:03:52,630 --> 00:03:54,610
They all are...it's kind of like antivirus scanners.

89
00:03:54,640 --> 00:03:57,139
All the different scanners have various success and

90
00:03:57,640 --> 00:04:00,286
failure ratios depending on what you're talking about,

91
00:04:00,830 --> 00:04:03,450
and the unique CVE vulnerabilities.

92
00:04:03,460 --> 00:04:05,567
So, you may eventually, if you're in a very

93
00:04:06,610 --> 00:04:09,501
secure environment, you might want to use multiple scanners

94
00:04:09,580 --> 00:04:10,870
or paid scanners.

95
00:04:11,140 --> 00:04:12,380
But this is an open source one.

96
00:04:12,670 --> 00:04:14,170
I've added some lines here.

97
00:04:14,200 --> 00:04:16,846
You'll notice that the ARG is first, and that requires

98
00:04:17,380 --> 00:04:20,271
me to then sign up with their scanner to get my own, unique

99
00:04:20,500 --> 00:04:23,195
API key that I would then maybe store as an environment

100
00:04:23,860 --> 00:04:26,520
variable in my CI system, or on my local box.

101
00:04:26,800 --> 00:04:29,620
Then I would need to build with that argument.

102
00:04:30,010 --> 00:04:31,010
We'll do that in a second.

103
00:04:31,360 --> 00:04:34,070
Then I'm downloading the scanner into this image.

104
00:04:34,390 --> 00:04:36,005
I'm changing it to be executable.

105
00:04:36,370 --> 00:04:39,340
I'm then adding dependencies that I need

106
00:04:39,640 --> 00:04:41,260
through the Alpine package manager.

107
00:04:41,290 --> 00:04:43,544
Then I'm running the scanner against the local

108
00:04:44,320 --> 00:04:45,670
code in that image.

109
00:04:46,480 --> 00:04:48,669
You'll notice that right past that is just the standard

110
00:04:48,670 --> 00:04:50,650
stage 6 that we use for production.

111
00:04:51,010 --> 00:04:54,100
If I wanted to do all

112
00:04:54,160 --> 00:04:57,340
testing and all scanning, I could just target

113
00:04:57,400 --> 00:04:59,556
the audit stage, and it would do the testing

114
00:05:00,610 --> 00:05:02,110
first and then the audit after that.

115
00:05:03,100 --> 00:05:05,140
Here's a sample command on how I would build that.

116
00:05:05,200 --> 00:05:07,490
I would build it. I'd call this maybe auditnode.

117
00:05:08,470 --> 00:05:10,840
I would target the audit stage.

118
00:05:11,110 --> 00:05:13,659
Then I would throw in a build argument to get that secret

119
00:05:13,660 --> 00:05:14,660
key in there.

120
00:05:15,070 --> 00:05:17,667
I'm using a local environment variable I've set in my

121
00:05:18,040 --> 00:05:20,637
shell already called microscanner, so that's going to

122
00:05:21,010 --> 00:05:22,480
pass that in as a build argument.

123
00:05:22,510 --> 00:05:24,960
Then that build argument will pass it into the run

124
00:05:25,510 --> 00:05:26,595
command for the MicroScanner.

125
00:05:39,300 --> 00:05:40,770
All right. So, my build finished.

126
00:05:40,800 --> 00:05:42,907
It probably took about a minute or so on my

127
00:05:43,770 --> 00:05:44,770
machine.

128
00:05:45,150 --> 00:05:47,099
Of course, the size of the project, and the amount of

129
00:05:47,100 --> 00:05:49,379
scanners and things you want to run, will affect that

130
00:05:49,380 --> 00:05:52,110
speed. You can see here that I've got at least

131
00:05:52,350 --> 00:05:53,890
30 steps in this Dockerfile.

132
00:05:54,060 --> 00:05:56,430
Now we're getting to real world Dockerfiles.

133
00:05:56,860 --> 00:05:59,506
Once you get to complicated projects, be okay with the

134
00:05:59,850 --> 00:06:01,840
fact that you're going to have 30 steps, right.

135
00:06:01,906 --> 00:06:03,600
It will cache a lot of this stuff.

136
00:06:03,960 --> 00:06:06,459
You can see here that I've got some output from the

137
00:06:06,540 --> 00:06:09,930
MicroScanner and above that, we have some output

138
00:06:09,960 --> 00:06:12,606
from the audit security report that says it found zero

139
00:06:12,750 --> 00:06:14,010
vulnerabilities. That's good.

140
00:06:15,300 --> 00:06:18,240
So this stuff really either works or it doesn't.

141
00:06:18,390 --> 00:06:21,209
You have to kind of get to get used to the different things

142
00:06:21,210 --> 00:06:23,905
that it will trip up, and you might have to make custom

143
00:06:24,330 --> 00:06:26,909
config files to make sure that it fits your project and

144
00:06:26,910 --> 00:06:27,910
your needs.

145
00:06:28,740 --> 00:06:29,990
It's an easy add.

146
00:06:30,120 --> 00:06:32,716
It doesn't require a whole lot of new learning and tooling,

147
00:06:32,940 --> 00:06:34,829
especially if you using just the open source stuff and then

148
00:06:34,830 --> 00:06:37,109
later, you can consider maybe buying one of the scanners

149
00:06:37,110 --> 00:06:39,570
out there. Docker Enterprise has a scanner.

150
00:06:39,840 --> 00:06:42,330
Lots of other security companies offer scanners as well.

151
00:06:42,600 --> 00:06:44,969
Again, I've listed those in the resources, so go check that

152
00:06:44,970 --> 00:06:45,400
stuff out.

