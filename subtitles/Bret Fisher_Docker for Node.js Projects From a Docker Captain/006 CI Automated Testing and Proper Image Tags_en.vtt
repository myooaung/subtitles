WEBVTT
1
00:00:03.370 --> 00:00:06.065
Now this course is not going to be heavy CI/CD.

2
00:00:06.520 --> 00:00:09.400
We're not learning how to build CI systems here

3
00:00:09.640 --> 00:00:11.320
or do Continuous Deployment.

4
00:00:11.590 --> 00:00:14.530
That is really not anything Node specific.

5
00:00:14.560 --> 00:00:17.375
Those things just work the way they work with all Docker

6
00:00:17.710 --> 00:00:19.360
images and containers.

7
00:00:19.630 --> 00:00:22.419
Again, I've got to give you some tips because I see so many

8
00:00:22.420 --> 00:00:25.480
people out there working on projects and

9
00:00:25.570 --> 00:00:28.250
learning the hard way like I had to do years ago.

10
00:00:28.440 --> 00:00:30.460
I want to give you some of my experience.

11
00:00:30.520 --> 00:00:33.720
Here's some quick hit items that you want to check on

12
00:00:33.730 --> 00:00:36.616
if you're working on CI and CD solutions with your Node

13
00:00:36.760 --> 00:00:38.320
apps. Or really any apps.

14
00:00:39.010 --> 00:00:40.529
Ideally, you have something set

15
00:00:42.310 --> 00:00:45.510
up so that these images, at least on some branches,

16
00:00:45.520 --> 00:00:48.264
maybe the master branch, maybe like a staging branch, at

17
00:00:48.430 --> 00:00:51.400
least some of the major branches, if not all branches, are

18
00:00:51.460 --> 00:00:54.340
automatically building, testing, and then

19
00:00:54.610 --> 00:00:57.670
uploading your images into an image registry of some kind.

20
00:00:58.000 --> 00:01:00.570
That can be anywhere on a cloud, that could be using Docker

21
00:01:00.820 --> 00:01:03.399
Hub, that could be using private stuff inside your data

22
00:01:03.400 --> 00:01:05.050
center. It doesn't really matter.

23
00:01:05.230 --> 00:01:08.079
But, the key is the automation there because you don't want

24
00:01:08.080 --> 00:01:10.922
to need a developer to have to build and test these images

25
00:01:11.200 --> 00:01:13.540
locally before they upload into a registry.

26
00:01:13.570 --> 00:01:16.216
That's just a lot of work, and it puts a lot of burden

27
00:01:16.570 --> 00:01:18.490
on people and there's a lot of chance for mistakes there.

28
00:01:19.090 --> 00:01:21.638
Of course, as a part of this, you're testing, you're

29
00:01:22.210 --> 00:01:25.050
scanning, you're doing all these things in the image.

30
00:01:25.270 --> 00:01:27.970
But, you don't want to push those images to a registry

31
00:01:28.010 --> 00:01:29.810
unless all that stuff passes.

32
00:01:29.840 --> 00:01:32.584
So, you want to wait for the flying colors before images

33
00:01:32.950 --> 00:01:34.714
show up inside of your Hub registry,

34
00:01:36.490 --> 00:01:37.870
or whatever registry you're using.

35
00:01:37.900 --> 00:01:40.930
Imagine that registry as being the official,

36
00:01:41.200 --> 00:01:43.382
certified passing of your CI solution.

37
00:01:45.130 --> 00:01:47.972
You might even consider, as a part of your workflow inside

38
00:01:48.280 --> 00:01:50.850
of your Continuous Integration system, to do linting

39
00:01:51.400 --> 00:01:54.100
on the Dockerfile and the Compose file themselves.

40
00:01:54.130 --> 00:01:55.855
Maybe do a YAML linter on the Compose.

41
00:01:56.680 --> 00:01:58.600
Maybe do a Docker linting.

42
00:01:59.110 --> 00:02:02.080
I've given you links in the resources for this

43
00:02:02.110 --> 00:02:04.854
video so that you can find some of those popular choices

44
00:02:05.440 --> 00:02:07.870
there for that. This would be stuff outside of the

45
00:02:08.199 --> 00:02:11.070
Dockerfile because it's actually checking the Dockerfile

46
00:02:11.230 --> 00:02:12.730
and the Compose files themselves.

47
00:02:13.360 --> 00:02:16.320
If you're going to use Docker Compose NCI,

48
00:02:16.330 --> 00:02:18.927
which is fine to do, because it would be great to use

49
00:02:18.970 --> 00:02:21.861
Docker Compose to set up all that stuff for your functional

50
00:02:22.300 --> 00:02:25.260
testing, anything that you need a database, or

51
00:02:25.270 --> 00:02:28.160
full, front-to-back end solution for, it

52
00:02:28.270 --> 00:02:30.459
would be great to have Docker Compose to set all that up

53
00:02:30.460 --> 00:02:33.302
for you. But you've got to be wary of exit codes because a

54
00:02:33.370 --> 00:02:36.250
lot of CI solutions depend on

55
00:02:36.460 --> 00:02:38.959
whatever the application you're running to return a

56
00:02:39.430 --> 00:02:41.880
1 or 0, or some other error, whether or not it was

57
00:02:42.130 --> 00:02:45.310
successful. So, you want Docker Compose to do that as well.

58
00:02:45.700 --> 00:02:48.129
The trick with Docker Compose is that when you just do a

59
00:02:48.130 --> 00:02:51.160
docker compose up, it's running lots of different

60
00:02:51.340 --> 00:02:54.520
containers for you. It doesn't know if one of them fails,

61
00:02:54.610 --> 00:02:57.570
what you want it to do. Does it exit 1

62
00:02:58.000 --> 00:03:00.744
for an error if just one container has a problem and the

63
00:03:00.760 --> 00:03:01.760
other ones are all fine?

64
00:03:02.231 --> 00:03:05.170
That could be a little confusing, but there's a solution.

65
00:03:05.420 --> 00:03:08.570
Inside of Docker Compose options when you run that command,

66
00:03:08.860 --> 00:03:11.650
use the --exit-code-from

67
00:03:11.920 --> 00:03:14.321
and that will tell Docker Compose which container

68
00:03:14.890 --> 00:03:17.529
you're really testing right now, so that it will monitor

69
00:03:17.530 --> 00:03:20.274
that one and then return the proper error codes for that

70
00:03:20.500 --> 00:03:21.640
specific container.

71
00:03:22.150 --> 00:03:24.399
Of course, it will be used in the depends on that you

72
00:03:24.400 --> 00:03:26.979
learned about earlier. It'll be using that to make sure

73
00:03:26.980 --> 00:03:28.899
that all the other containers that it depends on are

74
00:03:28.900 --> 00:03:32.220
started up before it runs the one you really want to test.

75
00:03:32.770 --> 00:03:35.591
If you're using Docker Hub, Docker Hub is a lightweight CI

76
00:03:36.440 --> 00:03:39.099
solution. It doesn't have all the bells and whistles of a

77
00:03:39.100 --> 00:03:41.830
fancy, full feature Continuous Integration platform,

78
00:03:42.160 --> 00:03:45.002
but it does work. If you're using something like Bitbucket

79
00:03:45.070 --> 00:03:47.422
or GitHub, you can have those send webhooks over

80
00:03:48.130 --> 00:03:50.972
to Docker Hub to automatically build your images for every

81
00:03:51.010 --> 00:03:53.860
commit of specific branches, or all branches,

82
00:03:54.130 --> 00:03:55.702
or some custom config in between.

83
00:03:56.590 --> 00:03:59.590
Docker Hub has its own functionality for

84
00:03:59.620 --> 00:04:02.710
running Docker Compose files to do specific testing,

85
00:04:02.950 --> 00:04:05.620
as well as just the testing you do inside a build.

86
00:04:05.950 --> 00:04:08.204
What you get at the end here is a really nice,

87
00:04:09.310 --> 00:04:11.920
free little CI system for open source.

88
00:04:12.200 --> 00:04:14.660
Once you go more advanced, you're probably going to want to

89
00:04:14.680 --> 00:04:17.289
use something like Codeship or Travis CI, or

90
00:04:19.000 --> 00:04:21.790
your own built system like Jenkins,

91
00:04:21.970 --> 00:04:23.371
or Drone, or Go CI.

92
00:04:24.230 --> 00:04:26.589
There's just so many of them out there, but that's really

93
00:04:26.590 --> 00:04:27.590
up to you.

94
00:04:27.850 --> 00:04:30.200
Docker Hub is obviously free and you know I talk about it

95
00:04:30.230 --> 00:04:31.230
in my other courses.

96
00:04:32.350 --> 00:04:34.947
I've put some links in here for you to check out that

97
00:04:35.260 --> 00:04:38.050
solution specifically and how you can do testing

98
00:04:38.380 --> 00:04:41.710
and build stage testing inside of Docker Hub,

99
00:04:42.070 --> 00:04:45.000
coming out of public Get repos like GitHub

100
00:04:45.790 --> 00:04:46.790
and Bitbucket.

101
00:04:47.380 --> 00:04:50.410
A part of these tips, I want to talk about image tagging,

102
00:04:50.620 --> 00:04:53.168
especially if you're new to production image tagging

103
00:04:53.410 --> 00:04:55.419
because it's going to be a little different than the

104
00:04:55.420 --> 00:04:57.331
casual, just building things on my own,

105
00:04:58.390 --> 00:04:59.650
on my own little box here.

106
00:05:00.010 --> 00:05:02.440
The latest is not always latest.

107
00:05:02.860 --> 00:05:06.040
So, you can go and read some resources I've linked in this

108
00:05:06.370 --> 00:05:08.428
lecture, but the latest tag is the default

109
00:05:09.700 --> 00:05:11.590
tag, but there's nothing really special about it.

110
00:05:11.770 --> 00:05:13.720
It doesn't guarantee the latest.

111
00:05:13.960 --> 00:05:16.629
It doesn't certainly mean that you always get the latest

112
00:05:16.630 --> 00:05:19.610
commit. That's really up to you and how you build out

113
00:05:19.630 --> 00:05:22.227
your workflow. If you're using Docker official images

114
00:05:22.960 --> 00:05:25.510
from Docker Hub, the latest is,

115
00:05:25.960 --> 00:05:28.840
as I've always seen it, set to the latest

116
00:05:28.930 --> 00:05:30.860
stable version of that app.

117
00:05:31.060 --> 00:05:32.560
But, that's just by convention.

118
00:05:32.590 --> 00:05:34.893
That is how Docker, and the teams running those

119
00:05:35.560 --> 00:05:37.390
applications, that's how they set it up.

120
00:05:37.690 --> 00:05:40.479
That doesn't mean that Docker inherently understands what

121
00:05:40.480 --> 00:05:43.371
latest really is. It just knows that that's what it's going

122
00:05:43.420 --> 00:05:45.580
to try to use if you don't specify a tag.

123
00:05:46.150 --> 00:05:48.061
Due to that, and various reasons around

124
00:05:49.120 --> 00:05:51.909
making it really difficult if you're always using the same

125
00:05:51.910 --> 00:05:54.444
tag to know what you're truly running on your servers, most

126
00:05:55.780 --> 00:05:57.759
of us have all come to the conclusion that you just

127
00:05:57.760 --> 00:05:59.980
shouldn't use latest on servers.

128
00:06:00.250 --> 00:06:02.504
It's fine to have latest, or maybe even branch

129
00:06:03.430 --> 00:06:05.978
tags for specific branches, just for the convenience

130
00:06:06.610 --> 00:06:09.279
of humans in your team to be able to download images and

131
00:06:09.280 --> 00:06:11.920
run them and know that they have the latest commits.

132
00:06:12.250 --> 00:06:15.190
But, I would not use those tags in production.

133
00:06:15.220 --> 00:06:17.919
Basically, the golden rule here is if it's going run on a

134
00:06:17.920 --> 00:06:20.860
server, the tag can never be used twice.

135
00:06:21.580 --> 00:06:23.769
That means you're going to have to learn how to tag your

136
00:06:23.770 --> 00:06:26.830
images on your Continuous Integration and build platforms

137
00:06:27.190 --> 00:06:30.040
using things like date/time stamps,

138
00:06:30.220 --> 00:06:33.040
or Git commits, which tends to be people's favorite

139
00:06:33.220 --> 00:06:35.654
since you're building and committing in Git.

140
00:06:36.370 --> 00:06:39.520
Why not use that same commit ID as a tag?

141
00:06:39.670 --> 00:06:42.071
You can always go back later and then use Simverse

142
00:06:42.072 --> 00:06:45.550
(sim-vert?) tags to specially label releases

143
00:06:45.640 --> 00:06:48.335
of other tags. You know, because an image can have many

144
00:06:48.430 --> 00:06:50.880
tags so when you're doing the automation, you tend

145
00:06:51.490 --> 00:06:53.820
to want to have something that's not repeatable, like a Git

146
00:06:54.010 --> 00:06:55.010
commit ID.

147
00:06:56.260 --> 00:06:59.004
This is not some hard, fast rule that you always have to

148
00:06:59.080 --> 00:07:01.750
follow, but every team that I've worked with

149
00:07:02.080 --> 00:07:04.355
that has gone to production with images in Docker

150
00:07:05.080 --> 00:07:07.869
has learned, the hard way, that they definitely do not want

151
00:07:07.870 --> 00:07:10.222
to reuse tags. It becomes really hard on servers

152
00:07:10.990 --> 00:07:14.410
to determine exactly what you're running and to guarantee

153
00:07:14.710 --> 00:07:17.216
that everything is running that exact same release

154
00:07:17.770 --> 00:07:20.890
if the tag, itself, potentially could have been reused.

