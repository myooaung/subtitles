1
00:00:02,600 --> 00:00:04,950
Now, what about ARM in production?

2
00:00:04,950 --> 00:00:06,689
We've got lots of options out there now.

3
00:00:06,689 --> 00:00:12,810
It used to be, just a couple of years ago, that you had to find a sort of one-off cloud hoster to see if

4
00:00:12,810 --> 00:00:13,450
you can find ARM.

5
00:00:13,560 --> 00:00:21,540
Now, we have multiple options, including last year, 2018, AMD announced their A1 instances based

6
00:00:21,540 --> 00:00:23,930
on their new Graviton processors.

7
00:00:23,940 --> 00:00:29,250
These are basically ARM processors that AWS is building themselves.

8
00:00:29,250 --> 00:00:31,510
There's several reasons you might consider this.

9
00:00:31,620 --> 00:00:37,980
The instances are cheaper. You technically get a little bit more RAM, and maybe better networking, for the

10
00:00:37,980 --> 00:00:40,080
same price out-of-the-box.

11
00:00:40,110 --> 00:00:41,260
They're not super cheap

12
00:00:41,270 --> 00:00:47,010
on AWS right now. But, they are something that you should consider and weigh if you're thinking about

13
00:00:47,190 --> 00:00:52,590
running a very small solution, or you just want to scale out a whole lot of small instances. Because right

14
00:00:52,590 --> 00:00:57,780
now, the ARM ones are pretty slow compared to their standard Intel counterparts. But, everyone expects

15
00:00:57,780 --> 00:01:00,360
that to change over the next few years as ARM gets faster.

16
00:01:01,020 --> 00:01:10,230
For me, the big angle here is testing my IoT, or embedded code. Which basically means that if I'm running

17
00:01:10,230 --> 00:01:17,040
Node eventually on something like a quadcopter drone or something, or some sensors that are out in the

18
00:01:17,040 --> 00:01:22,440
field. Those things, I don't necessarily have to have them on my desk to test everything out.

19
00:01:22,440 --> 00:01:27,040
Unless I'm testing those specialized sensors or things that are hardware specific.

20
00:01:27,120 --> 00:01:32,520
The cool thing about having something like AWS ARM stuff is that I can put my code in GitHub.

21
00:01:32,520 --> 00:01:34,400
I can develop it locally with Docker Desktop

22
00:01:34,410 --> 00:01:37,820
that's using the ARM emulation with QEMU.

23
00:01:37,830 --> 00:01:44,760
Then, when I'm in the cloud, I can have my CI solutions, my automated testing and stuff, all be running

24
00:01:44,760 --> 00:01:47,880
on ARM there, on real ARM bare metal.

25
00:01:47,940 --> 00:01:53,070
There's a few gotchas because when you start thinking about all the stuff that you're doing in your

26
00:01:53,070 --> 00:01:59,020
code. Maybe it's on GitHub. Maybe you're building images on Docker Hub. Maybe you're doing other things in

27
00:01:59,020 --> 00:02:00,410
Continuous Integration.

28
00:02:00,450 --> 00:02:06,300
Each one of those steps is going to need to support ARM, or at least allow you some way to get QEMU

29
00:02:06,300 --> 00:02:09,240
running so that you can emulate ARM if you want to.

30
00:02:09,240 --> 00:02:14,340
For right now, Docker Hub doesn't officially support ARM right out-of-the-box.

31
00:02:14,460 --> 00:02:19,950
It doesn't technically have ARM servers sitting there ready to build your Docker images. You can

32
00:02:19,950 --> 00:02:25,730
still technically use QEMU there with the features that they have in Docker Hub for using Docker

33
00:02:25,740 --> 00:02:26,820
Compose,

34
00:02:26,820 --> 00:02:31,830
you can kind of set stuff up. I've linked to some resources here where can go check out other people

35
00:02:31,830 --> 00:02:32,990
solving this problem.

36
00:02:33,030 --> 00:02:37,800
You can sort of set stuff up so that it will build with emulation using QEMU.

37
00:02:38,010 --> 00:02:42,810
Of course, if you have your own CI solution, you might consider whether or not you want to run some

38
00:02:42,810 --> 00:02:49,860
of those things natively on ARM hardware. Or, if you're okay with the QEMU emulation for building and

39
00:02:49,860 --> 00:02:57,150
testing. The cool thing here is that Docker Engine is supported on ARM, and the Docker documentation

40
00:02:57,150 --> 00:03:00,520
for something like Ubuntu, works the same way on ARM.

41
00:03:00,520 --> 00:03:06,120
If you're on the doc site, you just select the little option for ARM, and it'll give you the, more or

42
00:03:06,120 --> 00:03:10,410
less, the 99 percent of the same commands. You'll just need to change the architecture in one of the

43
00:03:10,410 --> 00:03:13,770
commands. Then, it all works. The Docker Engine installs.

44
00:03:13,860 --> 00:03:14,730
And guess what?

45
00:03:14,730 --> 00:03:19,150
Swarm orchestration is there too. It's in Docker Engine on every architecture.

46
00:03:19,170 --> 00:03:27,510
So, it doesn't really matter whether Swarm is running on Windows, or Mainframe, or Linux or ARM. It's all the

47
00:03:27,510 --> 00:03:29,490
same to Docker.

48
00:03:29,590 --> 00:03:35,130
I'd like to show you how similar this setup is when you're using Docker, regardless that its ARM.

49
00:03:35,260 --> 00:03:39,780
I'm on AWS, and I simply created a new instance in EC2.

50
00:03:39,880 --> 00:03:47,370
I just searched for Ubuntu ARM, and found a marketplace official image. I created an A1 medium.

51
00:03:47,380 --> 00:03:51,620
That's the smallest instance size for the ARM that they have right now.

52
00:03:51,670 --> 00:03:57,190
If you jump over to the Docker documentation like I was saying, on the Ubuntu install page, if you scroll

53
00:03:57,190 --> 00:03:59,550
down, it's something that most people may not realize,

54
00:03:59,800 --> 00:04:04,290
but, when you get down there, the instructions change because you have all these tabs.

55
00:04:04,450 --> 00:04:07,870
One of them is ARM64.

56
00:04:07,870 --> 00:04:12,010
It changes basically a little bit of the commands that you have the right architecture there when

57
00:04:12,010 --> 00:04:13,140
you're installing Docker.

58
00:04:13,360 --> 00:04:19,660
The rest is the same. I've taken the image that we previously built from my local Node by just changing

59
00:04:19,660 --> 00:04:21,100
the from command, right.

60
00:04:21,100 --> 00:04:23,060
Then, I built the image and it was ARM.

61
00:04:23,080 --> 00:04:25,920
Now, I've tagged that to my account on Docker Hub.

62
00:04:25,930 --> 00:04:32,860
I'm just going to push that up real quick. Then, I'm going to SSH into that ARM server in AWS.

63
00:04:36,620 --> 00:04:41,200
Now, on this server, I have installed Docker already, per the instructions on the Docker website.

64
00:04:41,210 --> 00:04:45,710
It's just running standard Ubuntu. Let's check Docker version real quick.

65
00:04:48,460 --> 00:04:49,870
All right that looks good.

66
00:04:49,870 --> 00:04:55,330
Now, I'm going to do a docker run. I'm going to publish the port again. Let's do 3000 this time.

67
00:04:58,820 --> 00:05:11,770
We'll attach it on bretfisher arm64 node and it's going to pull down my image and run it on

68
00:05:11,770 --> 00:05:17,110
this ARM platform. I'll do a quick docker ps to make sure everything is running. Let's go check it

69
00:05:17,110 --> 00:05:18,880
in the browser. All right.

70
00:05:18,930 --> 00:05:23,920
On the IP address of that box, I've gone to port 3000, and the Node app is there as we expect.

71
00:05:23,920 --> 00:05:28,660
Really, this is just a choice. You might have different reasons for those choices.

72
00:05:28,660 --> 00:05:33,520
The goal here with Docker is that regardless of your architecture, even if it's something like Windows

73
00:05:33,520 --> 00:05:37,810
or Mainframe, that you're having to change as little as possible to be able to run this.

