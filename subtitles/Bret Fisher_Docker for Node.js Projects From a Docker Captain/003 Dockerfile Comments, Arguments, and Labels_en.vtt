WEBVTT
1
00:00:02.450 --> 00:00:04.459
This lecture is not specific to Node, but

2
00:00:05.480 --> 00:00:07.730
it is important when you're talking about production

3
00:00:07.760 --> 00:00:10.219
images. It's a lot of things that people leave out, or they

4
00:00:10.220 --> 00:00:12.560
forget, when they first start getting started.

5
00:00:12.800 --> 00:00:15.319
I just want to give you some tips so that you have the

6
00:00:15.320 --> 00:00:17.721
knowledge to make sure that your images are truly

7
00:00:17.840 --> 00:00:18.840
production ready.

8
00:00:19.420 --> 00:00:21.576
The first thing I tend to harp on with teams

9
00:00:22.490 --> 00:00:25.550
that I'm working with is documentation in these files.

10
00:00:25.850 --> 00:00:27.600
They all support commenting.

11
00:00:27.680 --> 00:00:28.850
So, do that.

12
00:00:29.060 --> 00:00:31.879
Make sure you're commenting in your Dockerfile when things

13
00:00:31.880 --> 00:00:32.880
aren't obvious.

14
00:00:33.590 --> 00:00:35.689
When you start to get into multistage and you're getting

15
00:00:35.690 --> 00:00:38.140
complex Dockerfiles that potentially are 100 lines

16
00:00:38.720 --> 00:00:41.600
or larger, it's definitely worth commenting

17
00:00:41.780 --> 00:00:43.640
on why stages exist.

18
00:00:43.940 --> 00:00:47.210
Or maybe what stages that stage is coming from.

19
00:00:47.420 --> 00:00:49.670
Because sometimes, it's not obvious to read through a

20
00:00:50.030 --> 00:00:53.480
Dockerfile that has three, four or five or more stages

21
00:00:53.510 --> 00:00:56.370
and figure out which stages depend on other ones.

22
00:00:56.660 --> 00:00:58.969
We don't really have a great tool, yet, that will show us

23
00:00:58.970 --> 00:01:01.028
exactly which stages are in which order so

24
00:01:01.940 --> 00:01:04.699
that you know what's really going to happen when you build

25
00:01:04.700 --> 00:01:07.250
an image. Make sure you put that in comments.

26
00:01:07.760 --> 00:01:10.039
I wouldn't comment on easy things, like maybe just a

27
00:01:10.040 --> 00:01:12.319
standard copy command. Those don't usually need any

28
00:01:12.320 --> 00:01:14.270
explanation or a work directory.

29
00:01:14.630 --> 00:01:16.812
But, run commands that are fairly complex, definitely

30
00:01:17.930 --> 00:01:21.380
comment on them and why they do what they do.

31
00:01:21.920 --> 00:01:24.790
Then add labels, which we'll get to in the next slide.

32
00:01:25.250 --> 00:01:27.259
A little thing that I do for Node is that

33
00:01:28.490 --> 00:01:31.038
when I'm building my production images, I add in the

34
00:01:31.580 --> 00:01:32.952
npm config list command into

35
00:01:34.580 --> 00:01:37.010
my runs right before I do an npm install.

36
00:01:37.460 --> 00:01:39.371
This actually dumps out a little config

37
00:01:40.460 --> 00:01:42.905
info on exactly how the Node in npm

38
00:01:43.460 --> 00:01:45.760
is set up. That's good for my logging.

39
00:01:45.890 --> 00:01:48.781
In case I ever have any problems, I can make sure that yes,

40
00:01:49.130 --> 00:01:50.930
the Node version I expect is there.

41
00:01:51.080 --> 00:01:54.230
Yes, the config options are set as I expect them to be,

42
00:01:54.620 --> 00:01:56.930
and so on. Just throw that in your run lines.

43
00:01:56.960 --> 00:01:59.660
It takes a second to run during the build, so it's sort of

44
00:01:59.960 --> 00:02:01.250
additional bonus info.

45
00:02:01.840 --> 00:02:04.290
I want to take just a second to update you on your

46
00:02:04.820 --> 00:02:06.300
label knowledge.

47
00:02:06.380 --> 00:02:09.076
Those are things that aren't required in Dockerfiles.

48
00:02:09.320 --> 00:02:10.880
Often we forget about them.

49
00:02:11.240 --> 00:02:13.939
Then when we get into production, it gets harder for us to

50
00:02:13.940 --> 00:02:16.488
see what's going on because we're lacking the proper

51
00:02:16.670 --> 00:02:18.826
metadata. If you've known about labels for a

52
00:02:19.670 --> 00:02:21.924
while, there was a previous attempt at a label

53
00:02:22.640 --> 00:02:24.020
spec years back.

54
00:02:24.050 --> 00:02:26.255
But here in 2019, we're now following the OCI

55
00:02:27.320 --> 00:02:29.540
standard for labeling.

56
00:02:29.720 --> 00:02:32.690
So, there's a reference link in this video, and

57
00:02:32.720 --> 00:02:35.600
I want to show you a file, in a second, that shows

58
00:02:35.690 --> 00:02:38.150
the real labels that you might use.

59
00:02:38.540 --> 00:02:40.489
The resource links, obviously, is going to give you lots of

60
00:02:40.490 --> 00:02:42.076
detail about all the options.

61
00:02:42.470 --> 00:02:44.270
Then you can make your own labels as well.

62
00:02:44.990 --> 00:02:47.479
If you need some of those labels to be dynamic, then that's

63
00:02:47.480 --> 00:02:49.390
when you use build arguments, or ARGs,

64
00:02:50.280 --> 00:02:52.485
in your Dockerfiles that you would set during

65
00:02:53.510 --> 00:02:56.660
the build commands that would then put that information

66
00:02:56.690 --> 00:02:59.238
into your Dockerfile, set those labels and then that

67
00:02:59.480 --> 00:03:01.520
becomes a permanent part of the image metadata.

68
00:03:02.030 --> 00:03:04.774
In case you're using Docker Hub for some of your images,

69
00:03:05.000 --> 00:03:06.911
or any other registry, those registries

70
00:03:07.970 --> 00:03:10.490
may build images for you like Docker Hub does.

71
00:03:10.970 --> 00:03:13.639
Docker Hub has its own set of environment variables that

72
00:03:13.640 --> 00:03:16.760
you can put into build ARGs and then put

73
00:03:16.790 --> 00:03:17.790
into labels.

74
00:03:18.050 --> 00:03:21.110
Check out the reference links on this video for links

75
00:03:21.170 --> 00:03:23.899
over to the Docker Hub documentation on what environment

76
00:03:23.900 --> 00:03:26.595
variables they give you so that you can put more detail

77
00:03:27.050 --> 00:03:29.719
into your labels and know what was going on at the time of

78
00:03:29.720 --> 00:03:32.072
your builds. Let's jump real quick into a sample

79
00:03:32.870 --> 00:03:35.980
directory I created for you called dockerfile labels.

80
00:03:37.010 --> 00:03:39.980
Really, the only purpose I have for you here, on this

81
00:03:40.070 --> 00:03:42.986
sample directory and Dockerfile, is to see some real-world

82
00:03:43.700 --> 00:03:44.780
labels in action.

83
00:03:45.440 --> 00:03:47.839
You'll see here, at the top, that I have set two build

84
00:03:47.840 --> 00:03:50.870
arguments. The created date and then the source commit.

85
00:03:50.930 --> 00:03:53.780
You'll see that I've actually set those to not set.

86
00:03:54.380 --> 00:03:57.350
Those are the defaults. That way, if you don't set them

87
00:03:57.380 --> 00:04:00.530
at Docker build command time, you will get

88
00:04:00.650 --> 00:04:01.826
not set as their values.

89
00:04:02.150 --> 00:04:04.010
That way, at least something is in there.

90
00:04:04.520 --> 00:04:06.872
Then below, I have set some of the labels that I

91
00:04:07.610 --> 00:04:08.930
think are the most common.

92
00:04:09.110 --> 00:04:10.639
There's obviously lots of other options.

93
00:04:10.640 --> 00:04:12.920
There's description, and other things that you can do, that

94
00:04:12.980 --> 00:04:15.260
aren't in this particular example.

95
00:04:15.380 --> 00:04:16.786
But, you'll see that they start with org.opencontainers.image. That

96
00:04:19.220 --> 00:04:21.970
is the OCI standard that we're all now agreeing to.

97
00:04:23.060 --> 00:04:25.804
The little parts after that, including authors, created,

98
00:04:26.360 --> 00:04:27.360
revision,

99
00:04:27.470 --> 00:04:29.270
those are all premade labels by them.

100
00:04:29.300 --> 00:04:32.191
So, these are basically the standards that we can expect to

101
00:04:32.240 --> 00:04:33.367
start seeing in images.

102
00:04:34.280 --> 00:04:36.709
So, if you start putting this in your public images, as

103
00:04:36.710 --> 00:04:39.258
well as in your team's private images, you will have

104
00:04:39.860 --> 00:04:42.259
consistent standards. Then you can start relying on these

105
00:04:42.260 --> 00:04:45.470
labels in production and in your CI systems.

106
00:04:45.980 --> 00:04:48.214
So, I think that just kind of makes sense, right.

107
00:04:49.010 --> 00:04:51.109
Once you jump into the next part down here at the bottom,

108
00:04:51.110 --> 00:04:54.590
is the cool part, where you can label custom labels.

109
00:04:54.770 --> 00:04:57.470
Of course, you can put anything you want in a label, but

110
00:04:57.740 --> 00:04:59.600
we're trying to all agree on a standard.

111
00:04:59.630 --> 00:05:02.079
That way, when you're sharing things, other people

112
00:05:02.080 --> 00:05:03.550
understand where that's coming from.

113
00:05:03.850 --> 00:05:07.090
In my example, if I had my own Node project here,

114
00:05:07.390 --> 00:05:10.770
I would use maybe the domain name of the website,

115
00:05:10.780 --> 00:05:13.622
or the organization, and you do it in reverse format, just

116
00:05:13.750 --> 00:05:15.160
like you do with open containers.

117
00:05:15.450 --> 00:05:18.250
I made my own label here, per their spec

118
00:05:18.550 --> 00:05:20.974
of com.bretfisher.node version.

119
00:05:21.400 --> 00:05:24.610
I'm pulling the Node version environment variable

120
00:05:24.850 --> 00:05:27.940
from the previous image, or the from image

121
00:05:27.970 --> 00:05:29.090
in my line 1.

122
00:05:29.400 --> 00:05:31.899
That's something else you can do, obviously, with anything

123
00:05:31.900 --> 00:05:34.330
in your Dockerfile. You can pull environment variables out

124
00:05:34.390 --> 00:05:36.370
of images that it comes from.

125
00:05:36.730 --> 00:05:39.730
So, that's what I'm doing here. That way, in my labels,

126
00:05:39.760 --> 00:05:42.400
I have the exact Node version that I'm coming from.

127
00:05:43.030 --> 00:05:45.729
If you want to get more information on labels, check out

128
00:05:45.730 --> 00:05:48.474
the references that takes you to the GitHub link for the

129
00:05:48.760 --> 00:05:52.120
spec. That spec may change, or be expanded, over time.

130
00:05:52.390 --> 00:05:54.420
So, it might be slightly different once you look at it

131
00:05:54.430 --> 00:05:57.160
based on what's going on in the industry.

132
00:05:57.430 --> 00:06:00.125
Hopefully, we'll see a lot more of the images accepting

133
00:06:00.370 --> 00:06:02.859
this standard. Because right now, I don't see a lot of

134
00:06:02.860 --> 00:06:05.740
commitment from the community or the official images.

135
00:06:05.920 --> 00:06:08.049
But, it would be really nice if we could all rely on these

136
00:06:08.050 --> 00:06:10.354
labels and start using them as a consistent metadata

137
00:06:11.230 --> 00:06:12.230
experience.

138
00:06:12.790 --> 00:06:14.652
One, last little suggestion is to also

139
00:06:15.820 --> 00:06:18.520
add comments to your Compose files.

140
00:06:18.670 --> 00:06:22.000
The nice thing about YAML vs JSON is that YAML supports

141
00:06:22.030 --> 00:06:23.735
inline comments, which is great.

142
00:06:24.340 --> 00:06:27.760
I often put comments into my real-world Compose files

143
00:06:28.060 --> 00:06:30.216
on a few key areas. One of those is anything

144
00:06:31.540 --> 00:06:34.137
that I'm doing to override, or something that's quite

145
00:06:34.240 --> 00:06:37.330
custom, I like to put in comments on volumes that aren't

146
00:06:37.390 --> 00:06:39.840
obvious. That way, people know why the volumes are

147
00:06:40.420 --> 00:06:41.560
being mapped there.

148
00:06:41.770 --> 00:06:43.989
I also like to put in any time I override something, like a

149
00:06:43.990 --> 00:06:46.636
command, the cmd, when I override that, I will comment

150
00:06:46.960 --> 00:06:49.390
on it, if it's not completely obvious to someone.

151
00:06:49.740 --> 00:06:52.089
If you start using templates, which I really suggest you

152
00:06:52.090 --> 00:06:54.785
do, templates is in a previous lecture when you learned

153
00:06:55.270 --> 00:06:56.710
about Compose files.

154
00:06:56.740 --> 00:06:59.141
There was a lecture around templating at the very

155
00:06:59.890 --> 00:07:02.260
top of your YAML and using YAML templating.

156
00:07:02.560 --> 00:07:05.199
Up there, when you have that template, maybe just talk

157
00:07:05.200 --> 00:07:07.710
about why that template exists, or one or two lines.

158
00:07:08.020 --> 00:07:10.519
Then, if you use override files, which is a feature

159
00:07:11.440 --> 00:07:14.620
of Docker Compose where you can have multiple files

160
00:07:14.680 --> 00:07:17.032
chained, or an official one that's called docker

161
00:07:17.156 --> 00:07:18.156
compose.override.yaml.

162
00:07:19.600 --> 00:07:22.393
Those types of files, I like to put in there, comments at

163
00:07:22.540 --> 00:07:24.670
the very top, why those files even exist.

164
00:07:24.700 --> 00:07:27.248
Why are they separate from the standard file of just

165
00:07:27.760 --> 00:07:28.760
Docker Compose YAML.

166
00:07:29.380 --> 00:07:31.070
So, more documentation, the better.

167
00:07:31.360 --> 00:07:33.957
Hopefully, these comments and documentation tips will

168
00:07:34.390 --> 00:07:36.987
help your Docker experience be more awesome, help you

169
00:07:37.480 --> 00:07:39.750
share more with others, which is all about DevOps.

170
00:07:40.190 --> 00:07:41.290
It's all about sharing.

171
00:07:41.560 --> 00:07:44.950
That's what we want to get across here is definitely

172
00:07:45.160 --> 00:07:47.855
be sharing everything you can, whether it's open source

173
00:07:48.190 --> 00:07:50.689
or in your team. Next up, we're going to talk about

174
00:07:50.740 --> 00:07:51.250
testing.

