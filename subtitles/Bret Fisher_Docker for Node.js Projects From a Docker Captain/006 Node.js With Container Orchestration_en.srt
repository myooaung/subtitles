1
00:00:02,550 --> 00:00:05,700
Once you've started using Node.js in production, you're

2
00:00:05,760 --> 00:00:08,520
eventually, if not already, going to be using

3
00:00:08,550 --> 00:00:09,550
orchestration.

4
00:00:09,810 --> 00:00:11,967
Orchestration is something that lets us use many

5
00:00:13,080 --> 00:00:16,379
different nodes, one or more, to act

6
00:00:16,410 --> 00:00:18,240
like one, single Docker engine.

7
00:00:18,360 --> 00:00:19,360
You might be using Swarm, ECS, Kubernetes,

8
00:00:21,800 --> 00:00:23,400
Mesos, Nomad.

9
00:00:23,750 --> 00:00:24,990
There's a lot of options.

10
00:00:25,200 --> 00:00:27,920
The two most popular are the distributions of Kubernetes,

11
00:00:28,260 --> 00:00:31,380
whether that's OpenShift, or Amazon's option,

12
00:00:31,410 --> 00:00:33,630
or DigitalOcean's option, or Azure.

13
00:00:34,110 --> 00:00:37,200
Really, all those Kubernetes options use standard

14
00:00:37,540 --> 00:00:39,930
Kubernetes deployment files and configurations.

15
00:00:40,080 --> 00:00:42,029
We're going to be able to look at that in a couple of

16
00:00:42,030 --> 00:00:44,676
lectures, as well as the next lecture where we'll talk

17
00:00:44,850 --> 00:00:46,701
about Swarm specifics for Docker Swarm.

18
00:00:47,430 --> 00:00:50,076
Right now, I just want to get you refocused on the few

19
00:00:50,430 --> 00:00:53,436
things that really matter when you're dealing with Node

20
00:00:53,850 --> 00:00:56,609
in orchestration. When I say orchestration, what I really

21
00:00:56,610 --> 00:00:58,472
mean is using more than one container,

22
00:00:59,610 --> 00:01:02,940
from the same image, whether that's on the same host

23
00:01:03,000 --> 00:01:04,010
or multiple hosts.

24
00:01:04,440 --> 00:01:07,230
Because then you usually have to deal with things like load

25
00:01:07,260 --> 00:01:09,073
balancers, or concurrency, or storing

26
00:01:10,500 --> 00:01:13,169
state, depending on what type of app you're running in your

27
00:01:13,170 --> 00:01:15,620
Node container. The big, three areas that you need

28
00:01:16,200 --> 00:01:18,018
to focus on, which we've covered in this course, are

29
00:01:19,770 --> 00:01:22,890
the startup and making sure that you have healthchecks,

30
00:01:22,920 --> 00:01:26,160
or readiness checks, to ensure that your container

31
00:01:26,460 --> 00:01:29,610
doesn't go live for whatever clients it needs,

32
00:01:29,760 --> 00:01:31,320
before it's ready to be live.

33
00:01:31,590 --> 00:01:33,270
Second, is dealing with state.

34
00:01:33,300 --> 00:01:35,309
That's common even before containers when

35
00:01:36,300 --> 00:01:37,770
we had multiple server setups.

36
00:01:37,980 --> 00:01:39,780
You had to worry about state of your apps.

37
00:01:39,790 --> 00:01:42,142
Usually you store the web state, or your session

38
00:01:43,020 --> 00:01:45,599
state, or whatever the state of the container, you usually

39
00:01:45,600 --> 00:01:46,770
store that in a database.

40
00:01:47,370 --> 00:01:49,970
In an example in a minute, I'll talk about sockets I/O

41
00:01:50,460 --> 00:01:53,204
and how even that requires state if you're using a multi

42
00:01:53,220 --> 00:01:55,590
container setup. So, sockets I/O, we'll need to use

43
00:01:56,310 --> 00:01:58,809
Redis backend or something to store your web socket

44
00:01:58,830 --> 00:02:00,790
sessions. Then most importantly, is when

45
00:02:01,950 --> 00:02:04,499
you shut down the containers, or replace them in most

46
00:02:04,500 --> 00:02:06,901
cases. We're not often getting rid of containers.

47
00:02:07,590 --> 00:02:09,598
We're usually replacing them with a new version or

48
00:02:09,600 --> 00:02:12,610
something else. When you do that, you're going

49
00:02:12,620 --> 00:02:15,089
to need to make sure that you have proper shutdown so that

50
00:02:15,090 --> 00:02:17,940
your healthchecks, your liveness, your readiness.

51
00:02:18,090 --> 00:02:20,130
All these different types of checks, whether it's Swarm, or

52
00:02:20,370 --> 00:02:21,420
Kubernetes, or just regular Docker.

53
00:02:22,320 --> 00:02:24,140
All those things properly shut down.

54
00:02:24,490 --> 00:02:27,390
You properly close database connections and tell clients

55
00:02:27,460 --> 00:02:29,789
that they need to reestablish their connection so that the

56
00:02:29,790 --> 00:02:31,550
load balancer can move them to the proper node.

57
00:02:32,100 --> 00:02:33,539
There's all sorts of stuff to worry about there.

58
00:02:33,540 --> 00:02:36,780
These are the three areas that you need to work on and test

59
00:02:37,050 --> 00:02:39,539
thoroughly to make sure your app works right before you go

60
00:02:39,540 --> 00:02:42,088
production. You've seen us use the voting app before

61
00:02:42,840 --> 00:02:45,437
in this course. I wanted to give you one, last little

62
00:02:45,450 --> 00:02:48,341
glimpse of what result the result app, if you remember that

63
00:02:48,510 --> 00:02:50,323
web app, it was using angular sockets

64
00:02:51,540 --> 00:02:53,745
I/O, Express, sort of standard stuff that you

65
00:02:54,510 --> 00:02:56,510
might see in a Node web app setup.

66
00:02:56,730 --> 00:02:58,984
That result app, for the voting example app, I

67
00:02:59,730 --> 00:03:02,340
have updated it inside this directory.

68
00:03:02,730 --> 00:03:05,279
So, you go check this one out, and I basically have put a

69
00:03:05,280 --> 00:03:07,380
few of the production concerns in there.

70
00:03:07,710 --> 00:03:10,617
I've created a healthcheck URL, a

71
00:03:10,922 --> 00:03:12,934
liveness and readiness check URL for Kubernetes.

72
00:03:13,710 --> 00:03:16,356
I've added Stoppable, so it will track connections and

73
00:03:16,440 --> 00:03:17,670
properly shut them down.

74
00:03:17,970 --> 00:03:19,859
I have a whole shutdown process in there that will

75
00:03:19,860 --> 00:03:22,169
disconnect clients through Stoppable and then shut down the

76
00:03:22,170 --> 00:03:24,473
database connection, and then properly tell the

77
00:03:24,600 --> 00:03:27,510
healthchecks to stop allowing connections.

78
00:03:27,780 --> 00:03:30,132
And other things like using Redis as our storage

79
00:03:30,810 --> 00:03:31,830
backend for sockets I/O.

80
00:03:32,400 --> 00:03:35,050
And on and on and on. There's stuff in there that you

81
00:03:35,100 --> 00:03:37,210
definitely should check out. I would not say that this is

82
00:03:37,230 --> 00:03:38,460
production quality code.

83
00:03:38,690 --> 00:03:41,490
There is very little error checking, but I've at least

84
00:03:41,550 --> 00:03:43,902
added some of the concerns, like the termination

85
00:03:44,880 --> 00:03:47,550
signals received from Docker and dealing with those.

86
00:03:47,760 --> 00:03:48,760
Let's go check it out.

87
00:03:49,020 --> 00:03:52,260
Jump in the sample result orchestration

88
00:03:52,380 --> 00:03:55,200
directory and then open up the server.js file.

89
00:03:55,230 --> 00:03:56,850
That's where I'm going to be looking at this.

90
00:03:57,210 --> 00:03:59,709
From the top, I'm just going to scroll through this

91
00:04:00,180 --> 00:04:02,973
really quickly to show you, in case you're not looking at

92
00:04:03,030 --> 00:04:04,860
it yourself. You're maybe just watching this on the go.

93
00:04:05,370 --> 00:04:07,799
Some of the things that I've added in here to a standard

94
00:04:07,800 --> 00:04:10,380
Node app that maybe was precontainer like this one.

95
00:04:10,950 --> 00:04:12,110
This is a Legacy app.

96
00:04:12,330 --> 00:04:14,780
This was actually built on Node 6, so I've updated

97
00:04:15,600 --> 00:04:18,480
the Dockerfile to 10, but that's not really important here.

98
00:04:18,959 --> 00:04:21,059
I could have changed some of these things to be more modern

99
00:04:21,060 --> 00:04:23,020
JavaScript and ES6 ready, but that's not

100
00:04:24,060 --> 00:04:26,159
the case. I just really wanted to plug in here some of the

101
00:04:26,160 --> 00:04:28,757
features that were probably necessary in a production

102
00:04:29,100 --> 00:04:30,100
cluster.

103
00:04:30,300 --> 00:04:32,897
You'll see that I have added Stoppable, and then I've

104
00:04:33,360 --> 00:04:36,090
added the Redis option to

105
00:04:36,480 --> 00:04:39,660
socket I/O because in a single server setup, socket

106
00:04:39,690 --> 00:04:41,789
I/O doesn't really need to worry about sessions.

107
00:04:41,790 --> 00:04:44,550
It keeps session state of your connections in memory.

108
00:04:44,850 --> 00:04:48,270
Like many different web apps and other apps with session,

109
00:04:48,600 --> 00:04:51,389
you need to deal with them in a database if you're going to

110
00:04:51,390 --> 00:04:53,550
run multiple copies of that same app, right.

111
00:04:53,560 --> 00:04:56,250
In this case, we're definitely to be running two or more

112
00:04:56,370 --> 00:04:59,065
containers of this in the cluster for redundancy, so we

113
00:04:59,100 --> 00:05:00,170
need that sort of setup.

114
00:05:00,940 --> 00:05:03,418
As you'll see later, I add a simple little true/false

115
00:05:04,000 --> 00:05:05,620
on whether the database is connected.

116
00:05:05,890 --> 00:05:08,517
That will allow me to add that to part of my healthcheck

117
00:05:09,100 --> 00:05:11,060
for a simple setup of, is my app talking

118
00:05:12,340 --> 00:05:14,949
to the database so that it can be ready for clients to talk

119
00:05:14,950 --> 00:05:15,950
to it.

120
00:05:16,390 --> 00:05:19,134
Down here under my database connection, under this async

121
00:05:19,390 --> 00:05:22,098
retry, I will add the DB connected true once

122
00:05:23,140 --> 00:05:25,480
the client has connected to the database.

123
00:05:25,870 --> 00:05:27,729
So, this will just mark it as true. It's a pretty simple

124
00:05:27,730 --> 00:05:29,984
little example, but it gets the job done here.

125
00:05:30,160 --> 00:05:32,859
It makes sure that essentially, my connections don't start

126
00:05:32,860 --> 00:05:35,020
going to this app before it's ready.

127
00:05:35,920 --> 00:05:38,800
If we scroll down a little farther, you'll see that we're

128
00:05:38,830 --> 00:05:41,721
looking at healthchecks. This is me adding URLs, or routes,

129
00:05:42,160 --> 00:05:44,414
to this Express app for the different types of

130
00:05:44,560 --> 00:05:47,620
healthchecks. I talked earlier about the difference between

131
00:05:47,710 --> 00:05:49,425
Docker and Kubernetes healthchecks.

132
00:05:49,480 --> 00:05:51,879
Docker has a single one that you can use either in a

133
00:05:51,880 --> 00:05:53,529
Dockerfile, which is the case here.

134
00:05:53,530 --> 00:05:56,079
I've updated the Dockerfile with a healthcheck, or in the

135
00:05:56,080 --> 00:05:57,370
stack or Compose files.

136
00:05:57,977 --> 00:06:00,574
This one, I've just set the single URL that has to do

137
00:06:01,030 --> 00:06:03,129
everything. In other words, it has to make sure that the

138
00:06:03,130 --> 00:06:05,139
app is healthy, as well as make sure that

139
00:06:06,090 --> 00:06:08,230
it's up and started, and all that stuff.

140
00:06:08,260 --> 00:06:10,449
I give some information here in the comments that you can

141
00:06:10,450 --> 00:06:13,145
read on your own around what different things this does

142
00:06:13,870 --> 00:06:15,040
or what it should do.

143
00:06:15,430 --> 00:06:18,223
If you're running this in production and simply scrolling

144
00:06:18,820 --> 00:06:21,670
down, it just makes sure that if I'm

145
00:06:22,090 --> 00:06:25,110
DB connected, then return a positive, or

146
00:06:25,130 --> 00:06:26,992
a 200 result, on that URL, or an error

147
00:06:28,170 --> 00:06:30,160
state if something else is wrong and a database isn't

148
00:06:30,190 --> 00:06:33,480
connected. If you keep going, I've got one for readiness

149
00:06:33,490 --> 00:06:35,842
that's very similar to that, and another one for

150
00:06:36,490 --> 00:06:39,880
liveness. Those are the two types of connections that

151
00:06:39,940 --> 00:06:42,609
you can use for Kubernetes because since Kubernetes has

152
00:06:42,610 --> 00:06:44,668
two, the liveness really is about, is this

153
00:06:45,610 --> 00:06:46,610
container working?

154
00:06:47,470 --> 00:06:50,583
And readiness is, is it ready for connections?

155
00:06:51,220 --> 00:06:53,529
When you start up a Kubernetes container, you want to make

156
00:06:53,530 --> 00:06:55,980
sure that the database is connected and it's ready

157
00:06:56,740 --> 00:06:59,141
to listen for incoming ingress connections before

158
00:06:59,920 --> 00:07:01,635
the pod starts to return a positive

159
00:07:02,890 --> 00:07:03,890
result to readiness.

160
00:07:04,450 --> 00:07:06,879
Then past the healthchecks, you'll see that I've added the

161
00:07:06,880 --> 00:07:09,669
SIGINT and SIGTERM from a previous lecture where we talked

162
00:07:09,670 --> 00:07:12,512
about signals, making sure that Docker takes those signals

163
00:07:12,520 --> 00:07:13,610
and does certain things.

164
00:07:13,990 --> 00:07:16,870
You can see that for both of those, I am simply doing a

165
00:07:16,980 --> 00:07:18,891
shutdown function, and that function is

166
00:07:19,960 --> 00:07:22,750
below where we do a server stop.

167
00:07:22,760 --> 00:07:23,760
In this case,

168
00:07:24,070 --> 00:07:26,949
if you saw at the very top, I'm using Stoppable, which will

169
00:07:26,950 --> 00:07:30,070
track the connections and then properly give those sections

170
00:07:30,160 --> 00:07:31,160
a FIN packet.

171
00:07:31,480 --> 00:07:33,879
It doesn't work with websocket so it's a little iffy in

172
00:07:33,880 --> 00:07:36,520
this particular app because it is using long polling

173
00:07:36,880 --> 00:07:38,470
and websocket type connections.

174
00:07:39,040 --> 00:07:41,379
So, it doesn't work in all the cases of this app, but it

175
00:07:41,380 --> 00:07:44,710
will help with anyone who's not websocket based to properly

176
00:07:44,860 --> 00:07:47,310
give them a FIN packet to tell them to reset their

177
00:07:47,650 --> 00:07:50,289
connection, or re-establish it to the load balancer, giving

178
00:07:50,290 --> 00:07:52,989
them the opportunity to go to a new server without being

179
00:07:52,990 --> 00:07:53,990
hard disconnected.

180
00:07:54,820 --> 00:07:57,564
Then we set our little flag for DB connected to false so

181
00:07:57,580 --> 00:08:00,130
that our readiness check, and our healthchecks, will stop

182
00:08:00,190 --> 00:08:01,190
turning true.

183
00:08:01,510 --> 00:08:04,540
Then, it will do a pool in to stop the database

184
00:08:04,570 --> 00:08:06,920
connection and then properly exit the app.

185
00:08:08,070 --> 00:08:10,814
And that's the end of the file. Again, not really a full

186
00:08:10,990 --> 00:08:13,780
production setup, but it does give you the requirements,

187
00:08:14,020 --> 00:08:16,449
making sure you have healthchecks and you're ready for

188
00:08:16,450 --> 00:08:19,270
proper startup. Making sure that you have

189
00:08:19,570 --> 00:08:22,000
the connection tracking so you know how to shut those down.

190
00:08:22,030 --> 00:08:24,774
Then, and most importantly, for proper shut down, you're

191
00:08:25,060 --> 00:08:27,700
dealing with connections appropriately so that when you

192
00:08:27,960 --> 00:08:29,846
recreate this new container on, presumably

193
00:08:31,090 --> 00:08:33,279
an updated image as you're constantly deploying new

194
00:08:33,280 --> 00:08:36,429
versions of your app, that this app will have a much better

195
00:08:36,669 --> 00:08:38,840
rolling update or blue-green update deployment.

