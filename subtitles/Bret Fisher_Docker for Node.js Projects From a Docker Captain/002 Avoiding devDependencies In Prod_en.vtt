WEBVTT
1
00:00:02.610 --> 00:00:04.720
Now that you're thinking about making your images

2
00:00:04.740 --> 00:00:07.631
production ready, one of the first concerns you're probably

3
00:00:08.130 --> 00:00:10.923
thinking about is how to keep all that extra, unnecessary

4
00:00:11.550 --> 00:00:13.260
stuff out of these production images.

5
00:00:13.800 --> 00:00:17.040
Things like dev dependencies, sample data,

6
00:00:17.400 --> 00:00:19.801
test framework stuff, like anything that you just

7
00:00:20.370 --> 00:00:21.630
don't need in production.

8
00:00:22.320 --> 00:00:24.231
Some of the stuff might be for testing.

9
00:00:24.240 --> 00:00:26.189
Some of this might be stuff you might use locally for

10
00:00:26.190 --> 00:00:27.989
development. I mean, there's just a bunch of stuff in

11
00:00:27.990 --> 00:00:31.080
there. You can solve most of these problems with

12
00:00:31.110 --> 00:00:32.790
multistage images.

13
00:00:32.850 --> 00:00:35.300
Your Dockerfile should be multistage in almost all

14
00:00:35.970 --> 00:00:38.190
cases except for the most simple examples.

15
00:00:38.550 --> 00:00:40.379
Of course, throughout this course, I've shown you

16
00:00:40.380 --> 00:00:42.090
multistage in various ways.

17
00:00:42.540 --> 00:00:45.270
Mostly, we've been solving small little problems with short

18
00:00:45.600 --> 00:00:48.420
Dockerfiles. Now, we're getting into more real,

19
00:00:48.690 --> 00:00:51.540
life like Dockerfiles where you're going to be using

20
00:00:51.840 --> 00:00:54.170
both for dev and production.

21
00:00:54.330 --> 00:00:56.700
Then even later in this section for testing.

22
00:00:56.970 --> 00:01:00.060
The way that you really do that with Node is you

23
00:01:00.120 --> 00:01:02.276
control the npm installations for production

24
00:01:03.330 --> 00:01:05.602
and development separately. You can use npm

25
00:01:06.300 --> 00:01:09.248
install with the --only option, and you

26
00:01:10.320 --> 00:01:12.217
can use that for production and development.

27
00:01:12.218 --> 00:01:14.940
But, you might be someone who's aware of the new

28
00:01:16.080 --> 00:01:18.179
npm ci command which came out in the last few years.

29
00:01:18.180 --> 00:01:21.360
That command is specifically designed for

30
00:01:21.630 --> 00:01:24.293
build servers where you want to control everything,

31
00:01:24.309 --> 00:01:26.241
specifically with the ;pcl file.

32
00:01:26.970 --> 00:01:29.970
You really don't want to allow anything to change

33
00:01:30.420 --> 00:01:32.391
in the package JSON to change your install.

34
00:01:32.500 --> 00:01:35.670
So, you're going to use maybe the npm ci which

35
00:01:35.970 --> 00:01:38.616
does install things faster, and it does guarantee that

36
00:01:39.030 --> 00:01:41.541
it's using the package lock file in case there's any

37
00:01:41.760 --> 00:01:43.760
discrepancies between the package and the package lock.

38
00:01:44.400 --> 00:01:47.190
So, I think as we go forward, we're probably going to be

39
00:01:47.460 --> 00:01:50.204
all using more and more of the npm ci command since that

40
00:01:50.220 --> 00:01:52.954
does guarantee that we're using the exact

41
00:01:53.610 --> 00:01:56.045
builds of our dependencies from the lock file.

42
00:01:56.940 --> 00:01:59.369
The way that command determines whether it's using

43
00:01:59.370 --> 00:02:02.460
production or development dependencies

44
00:02:02.550 --> 00:02:05.460
is using the Node env environment variable.

45
00:02:05.730 --> 00:02:07.799
You want to make sure that you're setting that and it's

46
00:02:07.800 --> 00:02:10.529
consistent with what you want to do.

47
00:02:10.650 --> 00:02:13.492
If you're in a build stage for production, you're going to

48
00:02:13.500 --> 00:02:15.470
want to set that Node env to production.

49
00:02:15.840 --> 00:02:18.990
If you're using the npm traditional install command,

50
00:02:19.050 --> 00:02:22.020
you're going to want to use that --only with production,

51
00:02:22.320 --> 00:02:24.360
and vice versa for the development part.

52
00:02:24.750 --> 00:02:27.353
Let's go take a look at a sample that's in the course repo,

53
00:02:27.386 --> 00:02:30.570
inside the multistage deps

54
00:02:30.780 --> 00:02:31.780
directory.

55
00:02:32.790 --> 00:02:35.475
For this example, I've given you a three-stage

56
00:02:36.570 --> 00:02:39.363
Dockerfile, and it starts out with the base that just has

57
00:02:39.750 --> 00:02:40.770
production dependencies.

58
00:02:41.070 --> 00:02:44.040
You'll see that on line 3, I have given an alias

59
00:02:44.070 --> 00:02:46.961
to this from line so it's called base, and we'll refer back

60
00:02:46.980 --> 00:02:47.980
to that later.

61
00:02:48.390 --> 00:02:50.970
Then I set some of the obvious stuff like the expose.

62
00:02:51.300 --> 00:02:53.220
I set my Node env to production.

63
00:02:53.820 --> 00:02:55.080
And my working directory.

64
00:02:55.110 --> 00:02:58.110
This is, by the way, using the second

65
00:02:58.170 --> 00:03:00.081
option for how to install Node modules.

66
00:03:00.330 --> 00:03:02.699
So, I'm installing the Node modules up a directory in the

67
00:03:02.700 --> 00:03:05.090
parent. So, it's a little more complicated.

68
00:03:05.610 --> 00:03:07.350
Then I'm copying in my package file.

69
00:03:07.410 --> 00:03:09.419
Then I'm using that npm ci command that's

70
00:03:10.440 --> 00:03:13.950
relatively new. Then after that, doing a cache clean

71
00:03:14.130 --> 00:03:15.210
to keep the image small.

72
00:03:15.750 --> 00:03:17.367
Once that image is done, it's not

73
00:03:18.720 --> 00:03:21.562
really meant for that particular stage, or image, that you

74
00:03:21.780 --> 00:03:24.720
can technically build with the Docker build command.

75
00:03:24.990 --> 00:03:27.419
That particular stage is not really meant to be used on its

76
00:03:27.420 --> 00:03:30.320
own. It's designed to be used with the next two stages.

77
00:03:30.330 --> 00:03:31.860
The first one is for development.

78
00:03:32.610 --> 00:03:35.720
That one, we're giving an alias of dev on line 21

79
00:03:35.730 --> 00:03:37.944
there. Then we're changing things to set the Node

80
00:03:38.160 --> 00:03:39.690
environment to develop.

81
00:03:40.200 --> 00:03:43.234
Setting a custom path for our Node modules in the bin

82
00:03:43.455 --> 00:03:46.470
directory there. We're doing an npm install

83
00:03:46.500 --> 00:03:48.460
of the development options on top of the

84
00:03:49.470 --> 00:03:51.528
npm ci. The reason I went with npm install

85
00:03:52.800 --> 00:03:55.348
here is that maybe for local development, you're not

86
00:03:55.830 --> 00:03:58.470
specifically looking for the ci functionality,

87
00:03:58.830 --> 00:04:01.169
and you're not wanting to guarantee the package in the

88
00:04:01.170 --> 00:04:02.790
package lock matching.

89
00:04:03.030 --> 00:04:05.249
You really just want to be able to get stuff done on local

90
00:04:05.250 --> 00:04:06.769
development. This stage is only

91
00:04:08.400 --> 00:04:09.930
going to be running on your local machine.

92
00:04:09.960 --> 00:04:12.570
This is not a stage that would run, or be built,

93
00:04:12.990 --> 00:04:15.391
inside of your Jenkins or continuous integration,

94
00:04:16.050 --> 00:04:17.069
or anything for production.

95
00:04:17.399 --> 00:04:20.000
In fact, you'll see in the stage 3, the next one here,

96
00:04:20.820 --> 00:04:23.250
that it skips, it comes from base.

97
00:04:23.340 --> 00:04:26.070
Which means it skips that second stage.

98
00:04:26.400 --> 00:04:29.090
So, the third stage is built from the first stage.

99
00:04:29.610 --> 00:04:32.354
If you can imagine your servers of where you would build

100
00:04:32.610 --> 00:04:35.730
this production image, it will target

101
00:04:35.790 --> 00:04:37.897
this third stage and then basically ignore,

102
00:04:39.120 --> 00:04:40.680
or throw out, the second stage.

103
00:04:41.070 --> 00:04:43.980
You'll also notice that I don't copy in the code.

104
00:04:44.250 --> 00:04:46.409
I put a couple of comments in there for you so you can

105
00:04:46.410 --> 00:04:48.220
check out why that is.

106
00:04:48.240 --> 00:04:50.030
Because when we're doing local development, we're bind

107
00:04:50.340 --> 00:04:52.860
mounting the code anyway inside the app directory.

108
00:04:53.190 --> 00:04:55.297
So, we don't really need to copy it in just

109
00:04:56.340 --> 00:04:58.796
for development purposes. If you go into the Docker Compose

110
00:04:59.190 --> 00:05:01.052
file, you'll see that I do that there.

111
00:05:01.740 --> 00:05:03.360
I map the volume.

112
00:05:03.560 --> 00:05:05.667
I'm using a custom build target, and you'll

113
00:05:06.510 --> 00:05:08.760
see there that it's pointing to the dev stage.

114
00:05:09.060 --> 00:05:11.706
That means for local development, I'm only going to be

115
00:05:12.090 --> 00:05:13.740
using that second stage.

116
00:05:13.800 --> 00:05:16.379
I won't need the third stage for local development unless I

117
00:05:16.380 --> 00:05:18.990
want to do a custom build command on my own.

118
00:05:19.170 --> 00:05:21.779
We'll see later in this section how we're going to add

119
00:05:21.780 --> 00:05:25.020
testing to this. How we're going to use it in ci for

120
00:05:25.050 --> 00:05:27.390
potential production images and more.

