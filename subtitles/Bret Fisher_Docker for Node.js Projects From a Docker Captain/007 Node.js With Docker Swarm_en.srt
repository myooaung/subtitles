1
00:00:02,570 --> 00:00:05,069
In the last lecture, we talked about the basics for

2
00:00:05,420 --> 00:00:07,378
orchestration and what you need to really be focused on.

3
00:00:07,970 --> 00:00:10,490
The three phases of a lifetime of a container, the

4
00:00:11,050 --> 00:00:12,758
startup, the running and then the shutdown.

5
00:00:13,610 --> 00:00:16,210
I just want to give you an example of what a Swarm stack

6
00:00:16,730 --> 00:00:19,160
might look like. That's similar to a Compose file.

7
00:00:19,490 --> 00:00:22,400
If you check out the sample swarm directory here,

8
00:00:22,700 --> 00:00:25,542
we're going to go through basically some of the things you

9
00:00:25,670 --> 00:00:27,829
might see in that file that's a little bit different than

10
00:00:27,830 --> 00:00:29,330
what you've seen throughout this course.

11
00:00:29,870 --> 00:00:33,470
Most of the things you put in a Compose file are compatible

12
00:00:33,500 --> 00:00:36,139
with a stack. In fact, Docker has designed it this way so

13
00:00:36,140 --> 00:00:38,786
that when you're using Compose locally, that same file

14
00:00:39,500 --> 00:00:41,120
can just be set to Version 3.

15
00:00:41,360 --> 00:00:44,150
Version 3.7 is the latest as of this recording.

16
00:00:44,450 --> 00:00:46,910
Then you can add some new features to it.

17
00:00:46,940 --> 00:00:49,466
The nice thing is is that Swarm will ignore anything that

18
00:00:49,580 --> 00:00:52,177
doesn't work. Then, if you use that same file back in

19
00:00:52,490 --> 00:00:54,340
Docker Compose, Docker Compose will ignore it.

20
00:00:54,350 --> 00:00:55,967
So, they have their own concerns.

21
00:00:56,150 --> 00:00:57,620
For instance, Swarm doesn't build.

22
00:00:57,980 --> 00:00:59,450
Compose doesn't deploy.

23
00:00:59,480 --> 00:01:02,060
Those are concerns, different, you know, for the two tools.

24
00:01:02,330 --> 00:01:04,549
Let's go check out that file real quick and just see a

25
00:01:04,550 --> 00:01:07,270
couple of examples of what you might use in a Node.js

26
00:01:08,270 --> 00:01:09,270
Swarm app.

27
00:01:09,640 --> 00:01:12,139
In the sample swarm directory, you'll see one file in

28
00:01:12,140 --> 00:01:14,835
there, and it's similar to the voting app stack that we

29
00:01:15,200 --> 00:01:17,929
had before. But, I've changed it to a Version 3 and added

30
00:01:17,930 --> 00:01:20,576
some things to the result app that are more production

31
00:01:21,170 --> 00:01:21,949
specific.

32
00:01:21,950 --> 00:01:23,749
Let's take a look. You'll notice that I have changed the

33
00:01:23,750 --> 00:01:25,040
version to 3.7 in Swarm.

34
00:01:25,580 --> 00:01:27,160
You'll take your Compose file and the first thing you'll

35
00:01:27,170 --> 00:01:28,603
want to do is change it to at least Version 3.0.

36
00:01:30,590 --> 00:01:33,432
That was the very first version of the Compose file format

37
00:01:33,890 --> 00:01:35,213
that works in Swarm stacks.

38
00:01:35,408 --> 00:01:38,089
You'll notice some things that I use up at the top that I

39
00:01:38,090 --> 00:01:40,687
mentioned in an earlier lecture around templating and

40
00:01:40,820 --> 00:01:42,350
getting more out your Compose files.

41
00:01:42,680 --> 00:01:45,326
I have that templating here to set the logging for all

42
00:01:45,650 --> 00:01:48,130
the services to a limited size of 1MB.

43
00:01:49,280 --> 00:01:51,259
That's a common thing when you're in production if you

44
00:01:51,260 --> 00:01:53,629
don't have a centralized logging system, is to limit logs

45
00:01:53,630 --> 00:01:54,790
from filling up your hard drives.

46
00:01:55,270 --> 00:01:57,640
You'll notice that I've added the Traefik app from earlier

47
00:01:57,650 --> 00:02:00,296
so that we have a proxy in front of our result app, as

48
00:02:00,620 --> 00:02:02,510
well as the other ones that are web based, like vote.

49
00:02:02,930 --> 00:02:04,106
I've added that in here.

50
00:02:04,700 --> 00:02:06,530
It's the same example we saw before.

51
00:02:06,560 --> 00:02:08,779
I'm just saying that maybe if you're going to be using

52
00:02:08,780 --> 00:02:11,371
something like Swarm, which doesn't have a built-in ingress

53
00:02:11,372 --> 00:02:14,385
HTTP sort of router

54
00:02:14,710 --> 00:02:16,339
like Kubernetes does, you're going to need something in

55
00:02:16,340 --> 00:02:18,079
there, and Traefik might be what you would choose.

56
00:02:18,080 --> 00:02:19,250
So, I've thrown that in.

57
00:02:19,700 --> 00:02:22,069
We're at the result app part, which is where I wanted to

58
00:02:22,070 --> 00:02:24,814
focus your attention because this is where you would see

59
00:02:25,010 --> 00:02:26,402
some of the specific things related to Node.

60
00:02:27,020 --> 00:02:30,260
We are using, from the previous lecture, the example app

61
00:02:30,320 --> 00:02:32,329
of result that I added with the Stoppable

62
00:02:33,710 --> 00:02:36,503
option, where I did a couple of things like healthchecks,

63
00:02:36,530 --> 00:02:39,610
and readiness, and added Stoppable in to control connection

64
00:02:39,620 --> 00:02:40,429
shutdown.

65
00:02:40,430 --> 00:02:43,076
I have a specific version of that image, which is just

66
00:02:43,400 --> 00:02:45,010
the code from the previous lecture.

67
00:02:45,590 --> 00:02:48,199
You'll notice the first, new thing here is a stop grace

68
00:02:48,200 --> 00:02:51,100
period. That is related to how long Docker

69
00:02:51,350 --> 00:02:53,454
will wait, by default 10 seconds, for

70
00:02:54,850 --> 00:02:57,259
an app to shut down. In this case, I'm giving it five

71
00:02:57,260 --> 00:02:59,612
minutes. This is so that Stoppable can shut down

72
00:03:00,440 --> 00:03:03,233
any client connections. If I have a lot of connections to

73
00:03:03,260 --> 00:03:05,900
an app, it may take some time, so I want to let Docker

74
00:03:06,260 --> 00:03:08,629
give it plenty of time to properly shut down those

75
00:03:08,630 --> 00:03:10,394
connections before it terminates, or

76
00:03:11,690 --> 00:03:14,000
kills, the application outright.

77
00:03:14,450 --> 00:03:16,069
Your app is going to be different, so you definitely want

78
00:03:16,070 --> 00:03:18,912
to test how long it typically takes on your load, and then

79
00:03:19,130 --> 00:03:22,021
give a little bit more time for Docker before it kills your

80
00:03:22,040 --> 00:03:24,490
app. Ultimately, you really want to be on the safe

81
00:03:25,220 --> 00:03:28,100
side with this particular setting because the worst case,

82
00:03:28,250 --> 00:03:31,240
if you set it too short, is that it will kill client

83
00:03:31,250 --> 00:03:32,990
connections before they're ready to be killed.

84
00:03:33,410 --> 00:03:36,079
If you set it too long, that just means that it might take

85
00:03:36,080 --> 00:03:38,270
longer to restart than normal if

86
00:03:39,380 --> 00:03:41,859
it's going to be killed. In other words, it's never

87
00:03:41,860 --> 00:03:44,604
going to hit this limit unless it's already not shutting

88
00:03:44,690 --> 00:03:47,581
down fast enough, so it's perfectly fine to make it a large

89
00:03:47,630 --> 00:03:50,090
value. The deploy section is new.

90
00:03:50,330 --> 00:03:52,105
If you haven't been using Docker Compose locally, the

91
00:03:52,217 --> 00:03:54,305
deploy section is specific to Swarm.

92
00:03:54,980 --> 00:03:58,190
It has got replicas of two, so we're running

93
00:03:58,220 --> 00:04:00,349
two containers here, whether they're on a single host or

94
00:04:00,350 --> 00:04:02,270
multi host, doesn't really matter.

95
00:04:02,930 --> 00:04:05,980
We're adding some labels just to make it easier to find

96
00:04:06,140 --> 00:04:08,247
or filter. Then we have this update config.

97
00:04:08,750 --> 00:04:11,209
You heard me talk about updates before and how important

98
00:04:11,210 --> 00:04:13,807
those are to get right. In this case, I'm saying only

99
00:04:14,150 --> 00:04:17,180
update one at a time, which happens to be the default.

100
00:04:17,269 --> 00:04:19,160
But, I'm just reiterating the default here.

101
00:04:19,250 --> 00:04:21,909
With failure action, this allows me to control how I roll

102
00:04:21,949 --> 00:04:23,930
back, if there's a problem with an update.

103
00:04:24,010 --> 00:04:26,480
If I'm rolling out a new version of my image and there's

104
00:04:26,510 --> 00:04:29,358
any sort of hiccups, maybe the healthcheck never passes, or

105
00:04:30,320 --> 00:04:33,096
maybe something else is a problem. It will then roll back,

106
00:04:33,410 --> 00:04:35,468
per this setting, to the previous version.

107
00:04:35,600 --> 00:04:38,150
That's what you usually want. The default is pause.

108
00:04:38,450 --> 00:04:41,239
Typically in a production setting, I just want to get back

109
00:04:41,240 --> 00:04:43,579
to a working version. I don't want to troubleshoot in

110
00:04:43,580 --> 00:04:46,226
production. I'll probably set pause on my dev and test

111
00:04:46,520 --> 00:04:49,362
machines. If you're interested more in how this works with

112
00:04:49,460 --> 00:04:52,302
Swarm, go check out my other Swarm courses and information

113
00:04:52,430 --> 00:04:55,099
on my website. Order start first means that it will start

114
00:04:55,100 --> 00:04:57,260
the new container before it gets rid of the old one.

115
00:04:57,620 --> 00:04:59,989
That is not the default. That is something that you need to

116
00:04:59,990 --> 00:05:03,410
usually set if you have only one container,

117
00:05:03,680 --> 00:05:05,719
and you want to make sure that it never takes everything

118
00:05:05,720 --> 00:05:08,366
down all at once, right. If you only have one, in this

119
00:05:08,690 --> 00:05:10,579
case, of course, I have two, so, I technically didn't need

120
00:05:10,580 --> 00:05:13,030
to set this. But, I always like preferring this ay

121
00:05:13,670 --> 00:05:16,219
so that it tries to start the new one first before even

122
00:05:16,220 --> 00:05:17,630
messes with my existing ones.

123
00:05:17,810 --> 00:05:19,545
That way, if the new one doesn't work right,

124
00:05:19,850 --> 00:05:22,099
it just kills that one. It doesn't mess with the old ones

125
00:05:22,100 --> 00:05:24,893
ever. Then we had those labels that we've seen before for

126
00:05:24,920 --> 00:05:26,640
Traefik. That's really it.

127
00:05:26,710 --> 00:05:29,307
There is a ton of other stuff for controlling rolling

128
00:05:29,870 --> 00:05:31,640
updates, and shutdown and stuff like that.

129
00:05:31,790 --> 00:05:34,219
But, that's really more specific to Swarm itself and not so

130
00:05:34,220 --> 00:05:36,430
much Node.js. If you're wondering where the healthcheck is,

131
00:05:36,440 --> 00:05:38,912
by the way, the healthcheck was specified in the Dockerfile

132
00:05:39,650 --> 00:05:42,130
in that particular image, so I don't need to specify it

133
00:05:42,140 --> 00:05:44,150
here again. Hopefully, that helps.

134
00:05:44,360 --> 00:05:46,490
You understand a little bit of what you would use to deploy

135
00:05:46,520 --> 00:05:47,520
this with Swarm.

136
00:05:47,900 --> 00:05:50,020
Next up, we'll talk about doing this and Kubernetes.

