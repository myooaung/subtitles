WEBVTT
1
00:00:02.610 --> 00:00:05.640
For this next assignment in this section,

2
00:00:05.840 --> 00:00:08.969
I want you to experience some of the bad

3
00:00:09.169 --> 00:00:10.919
and good shutdown stuff

4
00:00:11.119 --> 00:00:13.620
with Node. We're going to actually build this

5
00:00:13.950 --> 00:00:16.470
Dockerfile and do it in different ways,

6
00:00:16.670 --> 00:00:19.560
just like I showed you in the previous lectures for the different shutdown options,

7
00:00:19.830 --> 00:00:21.540
so that you can see how it reacts,

8
00:00:21.740 --> 00:00:25.050
how it behaves and have some real-world understanding

9
00:00:25.250 --> 00:00:26.460
of what's really going on there.

10
00:00:26.790 --> 00:00:29.309
We're using the assignment answer file,

11
00:00:29.509 --> 00:00:31.211
your Dockerfile, from this previous assignment.

12
00:00:31.411 --> 00:00:34.199
Make sure you've done that assignment first because we're going to

13
00:00:34.399 --> 00:00:36.330
use the assignment Dockerfile directory.

14
00:00:36.920 --> 00:00:38.190
You're going to take that Dockerfile

15
00:00:38.940 --> 00:00:40.080
and you'll change it,

16
00:00:40.380 --> 00:00:43.739
and build it, and then run it so that we can experience

17
00:00:43.939 --> 00:00:46.770
the three, different options that I previously talked about in

18
00:00:46.980 --> 00:00:47.940
the shutdown lectures.

19
00:00:48.330 --> 00:00:50.759
First up, if you've completed the previous assignment,

20
00:00:50.959 --> 00:00:53.879
you then have tini in the Dockerfile so it's added into

21
00:00:54.079 --> 00:00:56.880
the container, and you're running it through the entry point.

22
00:00:57.180 --> 00:01:00.000
So, that should be good, right. You'll be able to build that new image

23
00:01:00.200 --> 00:01:03.420
and run it as a container, just like you did in the previous assignment

24
00:01:03.620 --> 00:01:06.310
without any changes, and it should exhibit this kind of behavior.

25
00:01:06.630 --> 00:01:07.794
If you're on Windows,

26
00:01:07.994 --> 00:01:09.810
realize that when you control c,

27
00:01:10.200 --> 00:01:12.179
it's not sending a termination

28
00:01:12.379 --> 00:01:14.202
or stop signal. It's actually doing a detach signal.

29
00:01:15.660 --> 00:01:17.370
That's just because on Windows,

30
00:01:17.730 --> 00:01:19.620
that control c sends different signals.

31
00:01:19.820 --> 00:01:22.470
It's a Windows thing. It's not related to Docker in any way.

32
00:01:23.010 --> 00:01:25.740
It really just detaches the running container.

33
00:01:25.950 --> 00:01:28.020
So, you're going to see a different experience on Windows.

34
00:01:28.380 --> 00:01:31.170
But if you're on Mac and Windows, I want you to try the control c,

35
00:01:31.420 --> 00:01:32.820
then start up the container again

36
00:01:33.020 --> 00:01:34.170
and try the docker stop.

37
00:01:34.590 --> 00:01:37.830
If you're on Windows, you're going to only be able to do a docker stop.

38
00:01:38.140 --> 00:01:39.870
The reason I want you to do both of these,

39
00:01:40.070 --> 00:01:41.310
especially if you're on Mac and Linux,

40
00:01:41.510 --> 00:01:42.720
because the Control c

41
00:01:42.990 --> 00:01:46.300
and the docker stop are different signals.

42
00:01:46.500 --> 00:01:47.729
They actually do different things,

43
00:01:47.929 --> 00:01:50.120
so I want to make sure that you see both sides of it.

44
00:01:50.530 --> 00:01:51.690
In all those cases,

45
00:01:51.990 --> 00:01:55.260
the app should stop. It just so happens that we can't see the app

46
00:01:55.650 --> 00:01:58.799
shutting down properly inside it because it's not really...it's not really

47
00:01:58.999 --> 00:02:00.539
waiting for connections to end

48
00:02:00.739 --> 00:02:02.400
and properly, gracefully shutting down.

49
00:02:02.760 --> 00:02:04.050
Remember we're going to need code for that.

50
00:02:04.710 --> 00:02:07.680
So once you've played around with that tini inside there,

51
00:02:08.130 --> 00:02:10.550
then take out the entry point command in the Dockerfile.

52
00:02:11.130 --> 00:02:12.060
Build it again

53
00:02:12.450 --> 00:02:14.460
and run it just like you did before.

54
00:02:14.690 --> 00:02:15.600
Then Control c,

55
00:02:16.140 --> 00:02:17.370
if you're on Mac and Windows.

56
00:02:17.570 --> 00:02:19.859
Do a docker stop if you're on either one of them.

57
00:02:20.059 --> 00:02:20.970
Like try both of those.

58
00:02:21.210 --> 00:02:24.269
You should see where the app doesn't respond right away

59
00:02:24.469 --> 00:02:27.299
and it maybe takes 10 seconds, and that is the termination

60
00:02:27.499 --> 00:02:30.420
happening. That's basically showing that the signals aren't getting captured.

61
00:02:30.690 --> 00:02:33.629
Docker is not listening and so it's waiting 10 seconds

62
00:02:33.829 --> 00:02:34.640
and then finally shutting it down.

63
00:02:35.400 --> 00:02:38.310
Lastly here, I want you to imagine if you're in a

64
00:02:38.640 --> 00:02:41.490
Dockerfile that you can't edit, or it's an image that you've already downloaded,

65
00:02:41.690 --> 00:02:44.579
and you have to do the --init inside your

66
00:02:44.779 --> 00:02:45.510
docker run command.

67
00:02:45.900 --> 00:02:46.730
Which, in this case,

68
00:02:47.130 --> 00:02:50.099
sure, it's the same thing as what we did earlier where we put

69
00:02:50.299 --> 00:02:51.796
tini in the Dockerfile.

70
00:02:52.290 --> 00:02:54.930
But maybe you have a case where you can't modify the image

71
00:02:55.130 --> 00:02:57.330
and you have to shove in the tini at runtime.

72
00:02:57.570 --> 00:02:59.220
So, I want you to experience that as well.

73
00:02:59.490 --> 00:03:00.441
You're going to run with a --init,

74
00:03:01.530 --> 00:03:03.149
and you're going to do a Control c on Mac

75
00:03:03.349 --> 00:03:05.190
and Windows. And then on every OS,

76
00:03:05.430 --> 00:03:06.959
also do a docker stop.

77
00:03:07.159 --> 00:03:08.710
So we see how both of those behave.

78
00:03:09.390 --> 00:03:11.250
For a bonus on this assignment,

79
00:03:11.450 --> 00:03:13.290
if you wanted to get into actual code,

80
00:03:13.620 --> 00:03:16.800
you could take my sample graceful shutdown code

81
00:03:17.040 --> 00:03:19.684
from the sample graceful shutdown

82
00:03:20.040 --> 00:03:21.090
directory. That's

83
00:03:23.070 --> 00:03:25.820
sample-graceful-shutdown directory. You can bring that in your app.

84
00:03:26.020 --> 00:03:26.946
You can actually plug that into the app.js.

85
00:03:28.320 --> 00:03:29.820
This requires, you know,

86
00:03:30.020 --> 00:03:31.736
to understand the JavaScript obviously a little bit more.

87
00:03:31.936 --> 00:03:35.190
Because this course isn't necessarily about JavaScript heavily,

88
00:03:35.430 --> 00:03:38.580
but you should be able to figure that out if you have some background in Node.

89
00:03:38.850 --> 00:03:42.030
See how that behaves because when you use that code,

90
00:03:42.420 --> 00:03:43.680
you're going to Control c

91
00:03:43.980 --> 00:03:47.039
and you're going to do a docker stop, and it will capture each one of those

92
00:03:47.239 --> 00:03:48.870
shutdown signals separately

93
00:03:49.070 --> 00:03:50.850
and then give you a different exit.

94
00:03:51.050 --> 00:03:52.200
Sort of echo to the console.

95
00:03:52.440 --> 00:03:54.660
You'll know that it's capturing the correct signal.

96
00:03:55.080 --> 00:03:56.849
Of course if you have any questions,

97
00:03:57.049 --> 00:03:59.070
or if you just want to see me walk through this assignment,

98
00:03:59.270 --> 00:04:02.380
jump to the next lecture as I do this the same way you should.

