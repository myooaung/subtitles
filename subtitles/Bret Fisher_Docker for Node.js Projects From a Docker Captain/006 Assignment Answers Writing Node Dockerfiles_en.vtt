WEBVTT
1
00:00:02.590 --> 00:00:05.193
Hopefully you have done the assignment for writing a Node

2
00:00:05.740 --> 00:00:08.620
Dockerfile for your own applications and that has gone

3
00:00:08.650 --> 00:00:09.847
well. You've probably had to do some Internet research to

4
00:00:11.080 --> 00:00:13.780
get exactly the lines. I'm going to do the same thing.

5
00:00:13.990 --> 00:00:15.187
This is actually my first time running through it since I

6
00:00:16.149 --> 00:00:17.506
created the assignment a little bit ago.

7
00:00:17.620 --> 00:00:20.230
So, I may not get everything right on the first time.

8
00:00:20.260 --> 00:00:21.394
I will be talking out loud, as usual, about my thought

9
00:00:22.810 --> 00:00:25.750
process for what I need and why I need it.

10
00:00:26.500 --> 00:00:27.718
Of course, the first thing we need to do is go through the

11
00:00:29.170 --> 00:00:30.367
from line and figure out what Node image we need to start

12
00:00:31.840 --> 00:00:33.190
from as our base image.

13
00:00:33.220 --> 00:00:36.400
Let me go over here to

14
00:00:36.790 --> 00:00:37.210
Docker Hub and go to

15
00:00:39.820 --> 00:00:42.670
the Node image on Docker Hub just to make sure

16
00:00:43.570 --> 00:00:46.210
that I need to use the Alpine

17
00:00:47.600 --> 00:00:48.920
base image.

18
00:00:49.850 --> 00:00:52.887
At the time here we're doing the 10 track, 10 15.

19
00:00:53.032 --> 00:00:54.032
So, it looks like

20
00:00:57.810 --> 00:01:00.920
there's the 10 15 Alpine right there.

21
00:01:02.200 --> 00:01:03.418
One way when it's really hard for me to see all this stuff

22
00:01:04.450 --> 00:01:07.060
and I can't find the thing I'm looking for, is I will do

23
00:01:07.270 --> 00:01:08.425
either a control f or a command f, depending on what OS

24
00:01:10.000 --> 00:01:11.134
you're on, and I will do something like a 10, like the

25
00:01:13.150 --> 00:01:16.270
main version I'm looking for dash and then alpine

26
00:01:16.390 --> 00:01:17.314
knowing that that's basically like an alias.

27
00:01:19.600 --> 00:01:20.839
It's another tag, but it's an alias for whatever the latest

28
00:01:22.900 --> 00:01:23.900
is in the 10 track.

29
00:01:24.610 --> 00:01:27.250
If I want to do the same thing for 10 15, I could just

30
00:01:27.840 --> 00:01:29.040
10.15 -alpine.

31
00:01:29.530 --> 00:01:30.727
That would help me find the right one to make sure that I

32
00:01:32.110 --> 00:01:33.110
have the right tag.

33
00:01:33.880 --> 00:01:35.014
Now if you're doing this in a few months from the time

34
00:01:36.910 --> 00:01:38.900
I've created it, and we're probably on 10.16

35
00:01:39.910 --> 00:01:40.910
or 10.17.

36
00:01:41.410 --> 00:01:44.590
So, at that time, you can still always use back

37
00:01:45.130 --> 00:01:48.090
tags. So, old tags are around forever

38
00:01:48.100 --> 00:01:49.129
as far as I know. Docker does not delete old base

39
00:01:51.310 --> 00:01:53.560
official images because quite frankly,

40
00:01:54.340 --> 00:01:57.100
all of our apps don't get updated all at the same time and

41
00:01:57.180 --> 00:01:58.314
you can imagine the havoc it would cause if you had an

42
00:02:00.130 --> 00:02:01.348
older Dockerfile that you tried to build, and then because

43
00:02:02.980 --> 00:02:04.177
it's a couple of years old, that from image was no longer

44
00:02:05.830 --> 00:02:07.500
available, and it basically failed the pull.

45
00:02:08.530 --> 00:02:09.769
If that happened, then a lot of our deployments, especially

46
00:02:11.380 --> 00:02:14.020
Enterprise deployments that are slower to update,

47
00:02:14.380 --> 00:02:15.451
would start to fail. So, Docker keeps all those old

48
00:02:17.080 --> 00:02:20.100
versions around. Those are up here under tags.

49
00:02:21.040 --> 00:02:23.519
You can even look through here and even if....you

50
00:02:24.130 --> 00:02:26.530
can see there's dozens, probably, of pages.

51
00:02:27.160 --> 00:02:29.920
In fact, if I go to the very last page, there's 75 pages

52
00:02:30.490 --> 00:02:33.130
of tags just for the Node image.

53
00:02:33.160 --> 00:02:34.240
Obviously, there's a lot.

54
00:02:34.440 --> 00:02:35.637
There's no real way to search through them, at least that

55
00:02:37.330 --> 00:02:39.490
I'm aware of to search through all the tags.

56
00:02:39.880 --> 00:02:42.184
So, it's best to either just try to pull

57
00:02:43.060 --> 00:02:43.837
to see if you can pull that image and

58
00:02:46.060 --> 00:02:48.130
if it works, then you know that tag is available.

59
00:02:49.750 --> 00:02:52.360
So, let's let's give that a shot.

60
00:02:52.390 --> 00:02:54.760
We're going to be back over here.

61
00:02:55.180 --> 00:02:56.188
Because I'm using Visual Studio code, and I have

62
00:02:58.210 --> 00:03:00.690
the Docker plugin, the advantage

63
00:03:01.000 --> 00:03:03.520
there is that I get automatic image

64
00:03:03.970 --> 00:03:05.954
searching capabilities. So, I can type in here node:10.15

65
00:03:11.770 --> 00:03:15.000
and you can see it's already pre-populated the Alpine part,

66
00:03:15.700 --> 00:03:17.770
so that helps. If I backed up, you could see that

67
00:03:18.340 --> 00:03:19.340
10.15...it

68
00:03:24.870 --> 00:03:27.360
may not return anything unless I get very specific.

69
00:03:31.150 --> 00:03:31.864
Yeah. So it doesn't doesn't return

70
00:03:34.100 --> 00:03:35.255
me a thousand results, right. It will only get me a few

71
00:03:36.197 --> 00:03:37.960
when I do that. So, alpine.

72
00:03:39.810 --> 00:03:41.960
All right. So, that's our first line.

73
00:03:43.860 --> 00:03:47.010
Next, I know that we're supposed to expose something and

74
00:03:48.080 --> 00:03:51.080
in this app, I'll need to go and look for

75
00:03:51.350 --> 00:03:53.290
the package.json files.

76
00:03:53.590 --> 00:03:54.472
So now that I'm in the package.json, I can

77
00:03:56.630 --> 00:03:57.575
see...well it doesn't really tell me anything

78
00:03:59.600 --> 00:04:00.797
about what ports. So, then the next thing I would want to

79
00:04:01.730 --> 00:04:03.800
look at is the app itself.

80
00:04:03.830 --> 00:04:04.754
So, this being a Node app, I'm going to pull

81
00:04:06.830 --> 00:04:09.740
up the...what it says here is the main,

82
00:04:10.250 --> 00:04:11.153
right, app.js, and I'll hopefully find what

83
00:04:13.220 --> 00:04:14.417
port it's on there. This is part of the discovery process

84
00:04:15.950 --> 00:04:17.063
of you having to basically deploy someone else's app.

85
00:04:18.709 --> 00:04:20.300
You got to figure out what port it's on.

86
00:04:20.779 --> 00:04:21.829
You know whether it's running on all IP addresses,

87
00:04:24.200 --> 00:04:26.140
which is hopefully what it's doing.

88
00:04:26.730 --> 00:04:29.510
In this particular app, it's running an app.js

89
00:04:30.110 --> 00:04:31.349
file which was correctly identified in the package file, so

90
00:04:32.780 --> 00:04:33.557
I knew that this was the startup one.

91
00:04:34.130 --> 00:04:35.327
And that's usually if you're doing something like Express

92
00:04:36.980 --> 00:04:39.860
or Hapi, or some the other more common web frameworks,

93
00:04:39.890 --> 00:04:41.045
they'll usually have the server creation there with the

94
00:04:41.930 --> 00:04:44.510
port. So, you could also just search all your code for the

95
00:04:44.750 --> 00:04:46.670
word port and see if that comes up with something.

96
00:04:47.090 --> 00:04:49.943
So, this launches on port 3000 on host 0000,

97
00:04:50.600 --> 00:04:53.780
which is good because that's the default, meaning every

98
00:04:54.680 --> 00:04:57.430
IP address on the machine, and when you're in a container,

99
00:04:57.440 --> 00:04:59.390
the machine is essentially the container itself.

100
00:04:59.450 --> 00:05:00.626
So, we want to make sure that it's not just listening on

101
00:05:02.320 --> 00:05:04.940
localhost because that won't work in

102
00:05:05.660 --> 00:05:08.600
a container. A container's localhost is basically

103
00:05:08.690 --> 00:05:11.690
only in the container, not the physical host.

104
00:05:12.020 --> 00:05:13.733
Now that we know port 3000.

105
00:05:16.070 --> 00:05:17.940
All right. Now we're onto the next line.

106
00:05:18.300 --> 00:05:21.210
According to the assignment, we're supposed to install tini

107
00:05:21.570 --> 00:05:22.095
and start Node with tini.

108
00:05:22.832 --> 00:05:23.609
I have a suspicion here that this run

109
00:05:26.070 --> 00:05:27.246
line is probably where I need to use the package manager

110
00:05:29.250 --> 00:05:29.880
to install tini before we copy

111
00:05:32.400 --> 00:05:35.130
in source code. Because again, the idea of best practice

112
00:05:35.430 --> 00:05:36.585
Dockerfile is that you're doing any sort of apt get, or

113
00:05:38.100 --> 00:05:38.709
yum, or apk package installer

114
00:05:41.490 --> 00:05:43.920
stuff, you're doing that before you copy in code.

115
00:05:44.780 --> 00:05:45.780
Up here, I

116
00:05:49.130 --> 00:05:51.740
can run the package manager for tini.

117
00:05:53.460 --> 00:05:56.570
Maybe I don't know everything about Alpine's

118
00:05:56.580 --> 00:05:57.798
package manager. Or maybe I don't know exactly the package

119
00:05:59.280 --> 00:06:01.470
name for tini, so I'm going to have to go explore that.

120
00:06:01.740 --> 00:06:04.320
It just so happens with tini, that if I just google

121
00:06:05.400 --> 00:06:06.114
tini Docker, I'll come up with the

122
00:06:08.640 --> 00:06:10.890
repo that uses this.

123
00:06:11.430 --> 00:06:13.735
If I kind of search

124
00:06:14.610 --> 00:06:17.625
around, I could actually do a control f and look for apk.

125
00:06:20.100 --> 00:06:22.730
This shows how to pull the actual binary.

126
00:06:26.320 --> 00:06:27.538
We don't need that. We can try to use the package manager.

127
00:06:27.900 --> 00:06:29.520
Look at that. Alpine Linux package.

128
00:06:30.240 --> 00:06:33.620
So run this apk install

129
00:06:33.660 --> 00:06:35.030
no cache tini.

130
00:06:35.840 --> 00:06:38.820
The no cache part makes sure that it's nice

131
00:06:38.850 --> 00:06:41.160
and small. So, I can just delete this line and

132
00:06:43.340 --> 00:06:45.110
copy that in, or paste that in rather.

133
00:06:45.470 --> 00:06:46.369
Great.

134
00:06:46.370 --> 00:06:47.382
Now we're onto the workdir.

135
00:06:48.380 --> 00:06:50.810
The workdir here can be whatever you're comfortable with.

136
00:06:50.840 --> 00:06:53.540
But, I would say make it consistent across your projects

137
00:06:53.630 --> 00:06:54.848
and your company so that each one doesn't have a different

138
00:06:56.750 --> 00:06:57.989
location. That way you can just get used to where the files

139
00:06:59.750 --> 00:07:00.905
need to be. The sort of, some of the official standards

140
00:07:02.720 --> 00:07:04.390
you might see, some standards under home/node.

141
00:07:05.930 --> 00:07:08.690
Or, in my case you might have seen something under opt,

142
00:07:09.260 --> 00:07:10.373
which is some sort of Linux standard around where you

143
00:07:12.050 --> 00:07:13.100
should put these kind of files.

144
00:07:13.400 --> 00:07:15.874
But honestly, I've seen /source, I've seen /node,

145
00:07:16.820 --> 00:07:18.100
I've seen just about anything, /app.

146
00:07:19.220 --> 00:07:20.165
Because it's inside a container, not everyone

147
00:07:22.340 --> 00:07:23.558
is really obeying the traditional Linux rules, because you

148
00:07:25.130 --> 00:07:28.340
don't necessarily need to worry about

149
00:07:28.610 --> 00:07:29.744
file conflicts like you would on a massive file system

150
00:07:31.850 --> 00:07:33.047
of a big server where you might have dozens and dozens of

151
00:07:34.250 --> 00:07:35.410
applications installed, right.

152
00:07:35.660 --> 00:07:38.540
This is just one container, with just one file system.

153
00:07:38.900 --> 00:07:39.908
In my case, I'm going to make it simple and just

154
00:07:41.870 --> 00:07:42.870
call it /app.

155
00:07:48.090 --> 00:07:48.741
Typically, I would do copy copy

156
00:07:51.090 --> 00:07:52.266
here like this. I would just do the dot dot, which means

157
00:07:53.430 --> 00:07:56.130
everything from my working directory on the host to

158
00:07:56.400 --> 00:07:57.400
everything in the container.

159
00:07:57.750 --> 00:07:58.947
But then I'm realizing that part of the requirements is I

160
00:07:59.850 --> 00:08:01.005
need to do the npm, right. I need to do the npm install

161
00:08:02.430 --> 00:08:04.330
before I copy in all the source code.

162
00:08:04.830 --> 00:08:06.509
So, I know that this one can't be the dot dot.

163
00:08:07.980 --> 00:08:09.440
That one must be down here.

164
00:08:10.920 --> 00:08:13.770
So this needs to be the npm install

165
00:08:14.130 --> 00:08:15.270
and I'll come back to that in a minute.

166
00:08:15.360 --> 00:08:16.599
And then this one's going to be copying in the package.json

167
00:08:17.512 --> 00:08:18.512
files.

168
00:08:19.320 --> 00:08:20.700
So, there are several ways to do this.

169
00:08:24.290 --> 00:08:26.390
Probably the most literal is

170
00:08:33.570 --> 00:08:34.710
package-lock.json and then something like that.

171
00:08:35.190 --> 00:08:37.640
In fact, I could even put a little wildcard here.

172
00:08:37.650 --> 00:08:40.080
That way, if the lock doesn't exist, it won't error out.

173
00:08:40.200 --> 00:08:42.900
That's kind of what that wildcard would do for us there.

174
00:08:43.320 --> 00:08:44.900
You could possibly just do a package*.json.That's

175
00:08:47.400 --> 00:08:48.400
a shorter way.

176
00:08:48.660 --> 00:08:50.255
When you're going to copy in multiple files though, this

177
00:08:50.700 --> 00:08:53.850
back...this forward slash rather, is required.

178
00:08:55.300 --> 00:08:56.434
So, that's why I have to put the dot and forward slash

179
00:08:57.699 --> 00:08:58.699
here.

180
00:08:59.470 --> 00:09:01.460
For the first run line, we know that we need to do the npm

181
00:09:01.840 --> 00:09:03.580
install, and

182
00:09:05.860 --> 00:09:06.994
we also need to clean up, just like we saw in the last

183
00:09:08.740 --> 00:09:11.690
section when I talked about making efficient Dockerfiles.

184
00:09:13.090 --> 00:09:16.100
We do an npm cache

185
00:09:16.550 --> 00:09:19.190
clean force

186
00:09:19.730 --> 00:09:22.730
and this will ensure that there's no leftover files

187
00:09:22.790 --> 00:09:25.400
that are downloaded from the npm package repositories.

188
00:09:26.490 --> 00:09:28.940
If I didn't say this before, the double ampersand

189
00:09:29.460 --> 00:09:30.573
here means that the first command has to successfully

190
00:09:32.910 --> 00:09:34.890
install before it will do a clean.

191
00:09:34.920 --> 00:09:37.800
So, that's different than if you've ever seen a semicolon

192
00:09:38.220 --> 00:09:39.312
there. A semicolon doesn't care if the first command

193
00:09:41.250 --> 00:09:42.489
finishes correctly. It will just go ahead to the second one

194
00:09:43.470 --> 00:09:44.646
and we definitely care when we are building to make sure

195
00:09:45.840 --> 00:09:46.638
that every command works successfully.

196
00:09:47.310 --> 00:09:49.201
So, that's why you always see double ampersands there.

197
00:09:50.280 --> 00:09:51.420
Next, we're up to the entry point.

198
00:09:51.690 --> 00:09:53.510
Now the entry point here is due to tini.

199
00:09:53.880 --> 00:09:57.030
So, let's go back over to the tini documentation, and

200
00:09:57.060 --> 00:09:59.820
we'll see that it talks about

201
00:10:00.060 --> 00:10:01.257
that if you just put that entry point like this, then you

202
00:10:02.940 --> 00:10:04.560
can run your app normally.

203
00:10:05.040 --> 00:10:07.380
We had talked about that in the last sections.

204
00:10:07.470 --> 00:10:09.990
Let's go ahead and paste that in there

205
00:10:10.660 --> 00:10:13.290
like so and then at the end here,

206
00:10:13.620 --> 00:10:14.958
we can simply run our node

207
00:10:17.880 --> 00:10:19.680
app.js, right.

208
00:10:19.710 --> 00:10:22.120
That's what we got from the package.json file.

209
00:10:22.170 --> 00:10:24.810
If we go and double check that, it should be the

210
00:10:25.380 --> 00:10:26.880
app.js as the main. Yep. So there we go.

211
00:10:28.020 --> 00:10:29.850
We should be able to save

212
00:10:31.120 --> 00:10:32.410
and let's see if we can build it.

213
00:10:38.560 --> 00:10:41.170
docker build. We'll just do a tag

214
00:10:41.740 --> 00:10:42.740
of assignment1.

215
00:10:58.400 --> 00:11:00.620
All right. It looks like we built successfully.

216
00:11:00.980 --> 00:11:02.010
So, let's try to run it.

217
00:11:04.650 --> 00:11:07.620
docker run. I need to open up port 80

218
00:11:07.830 --> 00:11:08.830
to 3000.

219
00:11:10.810 --> 00:11:13.860
Then we're going to do assignment1 as

220
00:11:13.870 --> 00:11:14.870
the image.

221
00:11:19.300 --> 00:11:20.560
The server says it started.

222
00:11:20.590 --> 00:11:22.150
Let's jump over to the browser.

223
00:11:23.890 --> 00:11:26.270
Go to localhost port 80.

224
00:11:27.040 --> 00:11:28.663
Now, you don't have to run yours on port 80 if it...if

225
00:11:30.010 --> 00:11:31.207
you get a conflict on port 80, you can always map it to a

226
00:11:32.140 --> 00:11:33.883
different port, like 8080 or 8888.

227
00:11:34.540 --> 00:11:35.779
Basically, if you get any sort of error around permissions,

228
00:11:37.300 --> 00:11:40.510
or bind mount, or port availability, or anything like that,

229
00:11:41.280 --> 00:11:42.351
there's a lot of different errors depending on your

230
00:11:43.150 --> 00:11:46.202
operating system and the version of Docker.

231
00:11:46.680 --> 00:11:47.680
So, localhost

232
00:11:52.250 --> 00:11:53.195
port 80. All right. I got my hello world, and

233
00:11:55.250 --> 00:11:56.363
you can see that I'm getting the metadata in the logs

234
00:11:57.980 --> 00:11:59.640
there, so it looks all great.

235
00:12:00.230 --> 00:12:01.385
Hopefully it worked as well for you and I'll see in the

236
00:12:02.780 --> 00:12:03.340
next lecture.

