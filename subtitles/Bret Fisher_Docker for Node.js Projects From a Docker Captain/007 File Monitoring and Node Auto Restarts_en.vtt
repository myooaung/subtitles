WEBVTT
1
00:00:02.660 --> 00:00:05.239
The next thing you're going to need to worry about when

2
00:00:05.240 --> 00:00:07.669
you've got your app finally running in Docker Compose and

3
00:00:07.670 --> 00:00:10.159
everything worked out in your Dockerfile, is to make sure

4
00:00:10.160 --> 00:00:12.770
that your Compose file is set up for file monitoring.

5
00:00:13.190 --> 00:00:15.885
I am a fan of nodemon, which has been around for a long

6
00:00:16.280 --> 00:00:17.480
time in the Node space.

7
00:00:18.170 --> 00:00:19.880
And, nodemon should work in most situations.

8
00:00:20.060 --> 00:00:22.609
There's obviously lots of other tools out there, like

9
00:00:22.610 --> 00:00:25.700
Webpack DevServer and various others that all

10
00:00:25.750 --> 00:00:28.670
set up servers and do monitoring of files.

11
00:00:28.850 --> 00:00:30.530
But, this example is really just going to be focused on

12
00:00:30.700 --> 00:00:33.139
nodemon because it has all the features that I really see

13
00:00:33.140 --> 00:00:35.924
people needing. If you've been using nodemon

14
00:00:36.140 --> 00:00:38.786
a while, then you're probably thinking, maybe I should

15
00:00:39.170 --> 00:00:41.816
have my nodemon watching Docker Compose and restarting

16
00:00:42.500 --> 00:00:45.800
Docker Compose. But, that actually adds a little extra time

17
00:00:45.860 --> 00:00:48.506
to every restart. Because Docker stopping a container,

18
00:00:48.890 --> 00:00:51.438
creating a new one in Docker Compose everytime files

19
00:00:51.590 --> 00:00:53.989
change, that extra couple of hundred milliseconds can

20
00:00:53.990 --> 00:00:56.209
really add up. So, what we're going to do is we're going to

21
00:00:56.210 --> 00:00:59.060
have Docker Compose running nodemon inside it.

22
00:00:59.450 --> 00:01:01.998
We're going to use Docker Compose's YAML to override

23
00:01:02.540 --> 00:01:04.016
the cmd from our Dockerfile.

24
00:01:04.519 --> 00:01:07.010
This won't be changed in the Dockerfile's command.

25
00:01:07.280 --> 00:01:09.559
This will be overriding it with the Docker Compose YAML

26
00:01:09.560 --> 00:01:12.370
command to run nodemon in Node's place.

27
00:01:12.740 --> 00:01:14.290
If you're developing on Windows,

28
00:01:14.990 --> 00:01:17.839
the bad news here is that you need to enable polling on any

29
00:01:17.840 --> 00:01:20.930
of these solutions. Because the file events

30
00:01:20.990 --> 00:01:23.783
on the native file system of your host, in Windows, won't

31
00:01:24.200 --> 00:01:26.503
be sent over the wire of the file networking in

32
00:01:27.290 --> 00:01:29.419
order to get to that Samba share that's running in that

33
00:01:29.420 --> 00:01:32.110
Linux VM. This doesn't matter if you're running Docker

34
00:01:32.300 --> 00:01:34.849
Desktop or Toolbox. Both of those are going to require you

35
00:01:34.850 --> 00:01:36.650
to enable the polling feature.

36
00:01:36.680 --> 00:01:39.020
In some tools, it might be called legacy mode.

37
00:01:39.270 --> 00:01:41.630
Others, it might be called polling, or polling mode.

38
00:01:41.930 --> 00:01:44.760
Really what it is is the Docker Compose just

39
00:01:45.410 --> 00:01:48.139
searching the files that you asked it to to see if they've

40
00:01:48.140 --> 00:01:50.780
changed recently. It's a little more taxing on a system.

41
00:01:51.030 --> 00:01:53.823
It's, in theory, a little bit slower than file I/O events

42
00:01:53.960 --> 00:01:55.400
like we get on Mac and Linux.

43
00:01:55.700 --> 00:01:58.730
In real-world scenarios, with a reasonable set of files,

44
00:01:58.760 --> 00:02:00.410
I don't notice much difference at all.

45
00:02:00.680 --> 00:02:03.081
If you get really large projects, the polling may

46
00:02:03.740 --> 00:02:05.929
affect performance and actually cause a little bit of delay

47
00:02:05.930 --> 00:02:08.949
between saving a file and it noticing the file change.

48
00:02:09.470 --> 00:02:11.479
But, I don't see a lot of complaints in the community about

49
00:02:11.480 --> 00:02:13.580
that yet. Your mileage may vary.

50
00:02:13.880 --> 00:02:16.669
If you have other things you need to do when you're writing

51
00:02:16.670 --> 00:02:19.666
code on your host, maybe you're using minification

52
00:02:20.120 --> 00:02:21.120
tools. Maybe you're doing Sass

53
00:02:23.380 --> 00:02:25.672
CSS. Maybe you're doing TypeScript and you need TypeScript

54
00:02:25.940 --> 00:02:27.250
to be compiled into JavaScript.

55
00:02:27.680 --> 00:02:30.340
All these kind of tools can be run on a nodemon

56
00:02:30.770 --> 00:02:33.340
restart. So, any time you save a file, nodemon would

57
00:02:33.440 --> 00:02:35.988
restart, and you can use a nodemon YAML to configure

58
00:02:36.860 --> 00:02:38.450
those various other tools.

59
00:02:38.630 --> 00:02:40.910
I'm sure there's plenty of examples for each of those tools

60
00:02:41.240 --> 00:02:43.250
in nodemon, given nodemon's popularity.

61
00:02:43.460 --> 00:02:45.679
You can just find those examples online for whatever tools

62
00:02:45.680 --> 00:02:46.680
you need to run.

63
00:02:47.210 --> 00:02:49.789
I'm going to walk you through an example of how I would

64
00:02:49.790 --> 00:02:51.652
use nodemon in a standard environment.

65
00:02:52.040 --> 00:02:54.392
This is an Express example similar to ones we've

66
00:02:55.070 --> 00:02:57.050
used in the past in these lectures.

67
00:02:57.290 --> 00:02:59.598
You can see this example inside the sample nodemon

68
00:03:00.050 --> 00:03:01.540
directory of the course repo.

69
00:03:02.030 --> 00:03:04.921
In here, I have a standard Dockerfile, a sort of a standard

70
00:03:04.970 --> 00:03:06.790
Docker Compose and a package JSON.

71
00:03:07.100 --> 00:03:09.550
I have not yet put nodemon in here to make it work

72
00:03:10.280 --> 00:03:12.889
on my local machine. To get nodemon fully set up on this

73
00:03:12.890 --> 00:03:15.050
system, we will need to do three things.

74
00:03:15.080 --> 00:03:18.290
We're not, again, installing nodemon on the host.

75
00:03:18.320 --> 00:03:20.629
We're installing it inside the container as a dev

76
00:03:20.630 --> 00:03:22.730
dependency. That's kind of how I like to do it.

77
00:03:23.210 --> 00:03:24.979
You might have a preference, and you might see examples

78
00:03:24.980 --> 00:03:27.740
online, where you would add a line to your Dockerfile here.

79
00:03:27.790 --> 00:03:30.338
Just do a run somewhere up top and do an npm install

80
00:03:30.980 --> 00:03:32.990
global of nodemon.

81
00:03:33.110 --> 00:03:35.330
You can certainly do that, and that can be a part of your

82
00:03:35.630 --> 00:03:38.810
Dockerfile. I don't prefer to do it that way just because

83
00:03:38.870 --> 00:03:41.443
I've been around Node a while and I'm used to controlling

84
00:03:41.670 --> 00:03:44.269
nodemon, as well as the other development tools, as a part

85
00:03:44.270 --> 00:03:46.944
of my dev dependencies in my package JSON with npm.

86
00:03:48.170 --> 00:03:50.960
I prefer to control it that way and to install it with my

87
00:03:51.200 --> 00:03:53.899
dependencies there, than doing it in the Dockerfile as a

88
00:03:53.900 --> 00:03:54.900
global install.

89
00:03:55.220 --> 00:03:57.080
There's really no rhyme or reason for either one.

90
00:03:57.100 --> 00:03:58.930
It just depends on which one you want to track the nodemon

91
00:03:59.240 --> 00:04:00.890
version and to worry about that.

92
00:04:01.100 --> 00:04:02.810
You're probably going to have other development

93
00:04:02.840 --> 00:04:03.649
dependencies.

94
00:04:03.650 --> 00:04:05.449
You're going to have to deal with those anyway in the

95
00:04:05.450 --> 00:04:08.029
package JSON. So, you might as well just lump them all

96
00:04:08.030 --> 00:04:10.676
together because ideally, we don't want nodemon in our

97
00:04:11.060 --> 00:04:13.729
production image. We really only want it installed when

98
00:04:13.730 --> 00:04:14.760
we're working locally.

99
00:04:15.850 --> 00:04:18.428
The first thing I want to do here is install nodemon into

100
00:04:18.430 --> 00:04:21.399
my package JSON.  I can use docker compose run to do that.

101
00:04:23.860 --> 00:04:27.090
The name of my service here is express.

102
00:04:30.010 --> 00:04:33.300
Then I can do an npm install of nodemon here.

103
00:04:33.840 --> 00:04:35.310
I want to do a --save dev just

104
00:04:36.930 --> 00:04:39.380
like you would in a normal npm environment to save

105
00:04:40.110 --> 00:04:41.171
it automatically to the package JSON.

106
00:04:42.450 --> 00:04:44.819
As that's running, you can see that my dev dependencies has

107
00:04:44.820 --> 00:04:46.740
been updated with the nodemon package.

108
00:04:47.310 --> 00:04:50.005
Now, I need to have my Docker Compose automatically run

109
00:04:50.310 --> 00:04:52.221
it instead of the Node command when I'm

110
00:04:53.310 --> 00:04:54.310
running Docker Compose.

111
00:04:58.230 --> 00:05:00.925
Instead of typing nodemon directly here, we're going to

112
00:05:01.020 --> 00:05:03.764
have to give it a full path name here because we did not

113
00:05:03.870 --> 00:05:05.460
install nodemon globally.

114
00:05:05.880 --> 00:05:08.062
That's one of the advantages of doing global is that npm

115
00:05:08.580 --> 00:05:11.610
will automatically set up a global link

116
00:05:11.640 --> 00:05:13.290
so that it's accessible from anywhere.

117
00:05:13.410 --> 00:05:15.690
But in our case, I just need to provide the full path.

118
00:05:21.860 --> 00:05:23.990
Then the name of our express starter file.

119
00:05:27.680 --> 00:05:30.049
You'll notice, by the way, that I have my environment set

120
00:05:30.050 --> 00:05:31.519
to node environment development.

121
00:05:31.520 --> 00:05:33.431
That's key because when I run Node, and

122
00:05:34.550 --> 00:05:37.512
I run the npm commands inside my Docker Compose

123
00:05:37.880 --> 00:05:40.575
environment, it needs to be set for development mode so

124
00:05:40.820 --> 00:05:43.432
that those dev dependencies are installed

125
00:05:43.730 --> 00:05:45.260
when I do something like npm install.

126
00:05:47.660 --> 00:05:49.939
If you remember, back in the Dockerfile, the default is

127
00:05:49.940 --> 00:05:52.519
production, which won't install those dev dependencies, by

128
00:05:52.520 --> 00:05:53.540
default, in the image.

129
00:05:54.080 --> 00:05:55.969
So, we are simply going to override that, as well, with the

130
00:05:55.970 --> 00:05:57.930
Docker Compose. One little helper tidbit

131
00:05:59.000 --> 00:06:01.515
here is that if I want to run one-off nodemon commands just

132
00:06:03.620 --> 00:06:07.000
inside the package, or any other standard dev tool,

133
00:06:07.200 --> 00:06:09.944
it's going to be inside my apps Node modules, and not in

134
00:06:10.100 --> 00:06:12.354
the global Node modules, then I need to update

135
00:06:13.250 --> 00:06:14.900
my environment variable for my path.

136
00:06:15.150 --> 00:06:17.180
It's a simple one liner you can put in all your

137
00:06:17.480 --> 00:06:20.720
Dockerfiles. You just do an env path here to override

138
00:06:20.780 --> 00:06:21.858
the path environment variable, with

139
00:06:26.170 --> 00:06:28.930
the bin directory inside your apps Node modules.

140
00:06:29.140 --> 00:06:31.602
Then you just add that to the path variable so

141
00:06:32.380 --> 00:06:33.700
it will see it.

142
00:06:33.730 --> 00:06:35.347
Then once that's done, any time I

143
00:06:36.850 --> 00:06:38.761
rebuild and run this image, I will then

144
00:06:39.880 --> 00:06:42.190
be able to run any of the tools that I have installed as

145
00:06:42.290 --> 00:06:44.600
dev dependencies without having to specify their full path.

146
00:06:45.890 --> 00:06:48.259
I could also do this in the Docker Compose, but I tend to

147
00:06:48.260 --> 00:06:50.479
do this one in a Dockerfile so that it's just easy

148
00:06:50.480 --> 00:06:51.769
regardless of where I'm running the image.

149
00:06:51.770 --> 00:06:54.514
Lastly, I want to do a docker compose build just to make

150
00:06:54.860 --> 00:06:57.380
sure that my image has all the changes I need in it.

151
00:07:01.330 --> 00:07:03.669
Now, we can do a docker compose up, and instead of running

152
00:07:03.670 --> 00:07:04.680
Node, this will run nodemon.

153
00:07:16.910 --> 00:07:18.943
You'll notice over in our Docker Compose,

154
00:07:19.400 --> 00:07:20.660
I did the bind mount.

155
00:07:20.700 --> 00:07:23.029
If you remember from a previous lecture on bind mounting, I

156
00:07:23.030 --> 00:07:24.920
use the simple option.

157
00:07:24.950 --> 00:07:27.498
The scenario one, where I'm simply bind mounting the

158
00:07:27.920 --> 00:07:30.360
entire app and its Node modules to the host.

159
00:07:30.710 --> 00:07:32.894
So, all of those Node modules are stored in the host, and

160
00:07:33.230 --> 00:07:34.580
it's a simple example here.

161
00:07:35.030 --> 00:07:37.774
Now that I've got this set up, I should be able to go in

162
00:07:38.090 --> 00:07:39.720
and change something in my app.

163
00:07:44.200 --> 00:07:45.960
Even just a comment here.

164
00:07:51.280 --> 00:07:52.848
Once I save this file, we'll see

165
00:07:54.250 --> 00:07:55.970
that nodemon restarted my app.

166
00:07:57.030 --> 00:07:58.210
Hopefully, this works for you.

167
00:07:58.620 --> 00:08:00.560
It's not a whole lot more complicated that for nodemon.

168
00:08:00.920 --> 00:08:02.439
It just kind of works that way.

169
00:08:02.490 --> 00:08:05.069
As long as you get it installed and found in your path, you

170
00:08:05.070 --> 00:08:05.700
should be good to go.

