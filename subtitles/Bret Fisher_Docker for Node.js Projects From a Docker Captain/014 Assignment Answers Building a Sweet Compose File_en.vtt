WEBVTT
1
00:00:02.540 --> 00:00:05.300
Hopefully you've spent some time on this big assignment

2
00:00:05.689 --> 00:00:08.071
for the section. I know it's big. There's lots to do.

3
00:00:08.071 --> 00:00:10.609
There's lots of little things, and you probably had to

4
00:00:10.610 --> 00:00:12.790
reference a lot of videos, and maybe even some Internet

5
00:00:13.040 --> 00:00:15.784
resources. That's fine. That's really, I think, the best

6
00:00:16.190 --> 00:00:17.570
way to learn is by doing.

7
00:00:17.870 --> 00:00:20.450
If you weren't doing the stuff in each individual lecture,

8
00:00:20.480 --> 00:00:23.322
this assignment is definitely going to help you retain all

9
00:00:23.480 --> 00:00:24.890
of that talking I did.

10
00:00:25.460 --> 00:00:27.500
This is me going through it myself.

11
00:00:28.020 --> 00:00:30.550
I've done it a couple of times just to build the assignment

12
00:00:30.890 --> 00:00:33.589
up, but I haven't necessarily memorized, and I'm not using

13
00:00:33.590 --> 00:00:36.620
a cheat sheet. I may not get things right the first time,

14
00:00:36.980 --> 00:00:39.799
but we'll see how it goes. The readme starts with the idea

15
00:00:39.800 --> 00:00:42.490
around this fictional narrative that you are the Node.js

16
00:00:42.860 --> 00:00:46.370
developer, on a multi-application environment,

17
00:00:46.400 --> 00:00:49.130
and they've given you this sort of generic Compose file.

18
00:00:49.400 --> 00:00:51.605
Your responsibility is the result service and

19
00:00:52.490 --> 00:00:54.083
the app behind that that's running Node.js.

20
00:00:54.770 --> 00:00:57.563
Then you just need everything else there in order to help

21
00:00:57.590 --> 00:00:59.870
test and use this thing, right, when you're developing it.

22
00:01:00.290 --> 00:01:02.446
It's a great model for common scenarios that

23
00:01:03.290 --> 00:01:04.580
you're going to run into in the real world.

24
00:01:05.300 --> 00:01:07.669
I'm just going to scroll down and start working on these

25
00:01:07.670 --> 00:01:08.930
bullets one at a time.

26
00:01:09.290 --> 00:01:12.320
Of course, there is no real order to these things.

27
00:01:12.600 --> 00:01:14.727
It doesn't really matter the order you do them in.

28
00:01:14.728 --> 00:01:17.389
It's just a matter of getting your Compose file good enough

29
00:01:17.390 --> 00:01:19.669
that you can try to start it and then see where maybe the

30
00:01:19.670 --> 00:01:22.520
bugs lie, or the things that you haven't set up properly

31
00:01:22.640 --> 00:01:25.090
are. I will probably run into some of that.

32
00:01:27.660 --> 00:01:29.879
The first one there is set for Compose file version to the

33
00:01:29.880 --> 00:01:31.399
latest 2.x I've done for us, so

34
00:01:32.880 --> 00:01:35.610
it's 2.4 as of this video that was the latest.

35
00:01:36.090 --> 00:01:38.930
Healthcheck for Postgres taken from the depends on lecture.

36
00:01:39.720 --> 00:01:40.720
That healthcheck can

37
00:01:42.720 --> 00:01:45.877
go down here as a new line, healthcheck.

38
00:01:50.170 --> 00:01:51.880
Then I need to add in the test.

39
00:01:52.740 --> 00:01:55.690
If I go back to that sample file for

40
00:01:56.050 --> 00:01:57.670
the depends on, I get the

41
00:01:59.180 --> 00:02:00.180
pg_isready script.

42
00:02:01.280 --> 00:02:04.730
I'm just going to copy and paste that from that healthy

43
00:02:04.880 --> 00:02:07.134
Compose file inside the depends on folder from

44
00:02:07.910 --> 00:02:08.910
that depends on video.

45
00:02:10.258 --> 00:02:12.513
An interesting thing of note here on the PG is

46
00:02:13.320 --> 00:02:15.133
that the user...you don't necessarily

47
00:02:16.620 --> 00:02:19.199
need to have it, but if you don't have the right user in

48
00:02:19.200 --> 00:02:22.200
there, then you will get a little warning.

49
00:02:22.400 --> 00:02:25.700
It'll actually say fatal inside of your log

50
00:02:25.710 --> 00:02:28.349
saying that that user doesn't exist or that role doesn't

51
00:02:28.350 --> 00:02:29.820
exist. That's not a huge deal.

52
00:02:30.150 --> 00:02:32.610
It doesn't actually affect the test at all.

53
00:02:32.640 --> 00:02:34.240
It just shows up stuff in the log.

54
00:02:34.380 --> 00:02:36.498
You may or may not need to have the user in there.

55
00:02:36.499 --> 00:02:38.420
All right.

56
00:02:38.450 --> 00:02:40.111
The second one here is the healthcheck for Redis, which

57
00:02:40.850 --> 00:02:43.610
I've given to you since that wasn't in any examples.

58
00:02:44.000 --> 00:02:46.597
If you remember, going back to the lecture on depends

59
00:02:47.150 --> 00:02:50.630
on stuff, I sent you a resource for

60
00:02:50.690 --> 00:02:53.238
finding these various types of healthchecks from the

61
00:02:53.720 --> 00:02:56.562
Docker official repo that they have on GitHub that shows a

62
00:02:56.720 --> 00:02:59.030
bunch of samples. That's kind of where I pulled this from.

63
00:02:59.390 --> 00:03:02.450
I made it a little shorter so that it doesn't need to be

64
00:03:02.690 --> 00:03:05.203
an if then statement. It just is a simple little Redis CLI.

65
00:03:06.110 --> 00:03:07.200
I just do a healthcheck here.

66
00:03:13.600 --> 00:03:15.859
There we go. Now that we have both of our healthchecks

67
00:03:15.860 --> 00:03:18.506
here, we can use the depends on on all the other stuff

68
00:03:18.980 --> 00:03:20.660
that needs these applications.

69
00:03:21.020 --> 00:03:23.890
Then they will be checking themselves to make sure they're

70
00:03:23.920 --> 00:03:26.468
available. If you've got a dependency diagram, which

71
00:03:26.870 --> 00:03:29.239
we don't have in this example, but if you did, you would

72
00:03:29.240 --> 00:03:31.788
see that things like the vote, depends on, the Redis

73
00:03:32.181 --> 00:03:34.778
image, and so I've given those as one liners in here.

74
00:03:35.270 --> 00:03:38.080
On line 16, the vote service depends on the Redis

75
00:03:38.280 --> 00:03:40.880
service. I need to add the depends on,

76
00:03:43.350 --> 00:03:44.350
and then Redis.

77
00:03:45.060 --> 00:03:47.940
Remember that we need to add in that condition.

78
00:03:48.390 --> 00:03:50.399
Just putting in Redis alone doesn't cause

79
00:03:51.720 --> 00:03:52.800
any startup delays.

80
00:03:52.980 --> 00:03:55.626
It just starts things, you know, within a second or so

81
00:03:55.920 --> 00:03:59.250
after each other. It technically starts them later

82
00:03:59.280 --> 00:04:01.975
but not in a way that's going to benefit us in terms of

83
00:04:02.160 --> 00:04:04.980
availability. I need to add in the

84
00:04:06.060 --> 00:04:07.060
condition.

85
00:04:09.100 --> 00:04:11.010
Service healthy.

86
00:04:18.890 --> 00:04:21.890
Then I can copy that into other apps, so I can just

87
00:04:26.200 --> 00:04:28.660
copy that out because the

88
00:04:29.620 --> 00:04:32.740
result app depends on other ones, so I can

89
00:04:33.100 --> 00:04:34.270
add that in.

90
00:04:38.350 --> 00:04:40.069
The result app depends on the db.

91
00:04:44.740 --> 00:04:47.043
Then the worker app needs both because it pulls

92
00:04:48.040 --> 00:04:50.350
things from Redis and adds them into the database.

93
00:05:11.030 --> 00:05:12.710
Let's focus on the result app.

94
00:05:12.830 --> 00:05:14.860
Up here where we need to worry about things, it

95
00:05:15.890 --> 00:05:18.536
says on line 20, result is a node app and subdirectory

96
00:05:19.280 --> 00:05:19.679
result.

97
00:05:19.680 --> 00:05:22.540
Let's bind mount it. I need to add

98
00:05:22.630 --> 00:05:25.460
a volumes here,

99
00:05:26.030 --> 00:05:27.745
and then add in....I know result is

100
00:05:29.120 --> 00:05:30.200
the subdirectory.

101
00:05:30.650 --> 00:05:32.540
That needs to go into the container.

102
00:05:33.110 --> 00:05:36.268
How did I know that that was app inside the container?

103
00:05:37.290 --> 00:05:38.290
That's by looking at the Dockerfile.

104
00:05:39.260 --> 00:05:41.959
If I just go inside the result directory and look at the

105
00:05:41.960 --> 00:05:43.234
Dockerfile, I can see that

106
00:05:44.910 --> 00:05:48.060
it copies the app into the app directory

107
00:05:48.420 --> 00:05:50.789
inside the container, and that's the one I need to mount

108
00:05:50.790 --> 00:05:51.790
over here in the volume.

109
00:05:53.370 --> 00:05:55.771
Next, on line 21, result should be built from the

110
00:05:56.310 --> 00:05:58.480
Dockerfile in results.

111
00:05:58.490 --> 00:06:01.780
That's already done for us up here on line 31 and 32.

112
00:06:02.130 --> 00:06:05.070
I have the build and the context result, so it

113
00:06:05.310 --> 00:06:07.423
knows to go into that result directory to build the

114
00:06:07.424 --> 00:06:09.237
Dockerfile to make me a custom image.

115
00:06:09.720 --> 00:06:11.060
That's done for us.

116
00:06:13.730 --> 00:06:16.033
Line 22, add a traffic proxy service from proxy

117
00:06:16.970 --> 00:06:19.940
lecture example. Have it running on a published port

118
00:06:20.150 --> 00:06:22.442
of your choosing and direct the vote.localhost

119
00:06:23.390 --> 00:06:26.750
and result.local host to their respective services

120
00:06:27.020 --> 00:06:28.250
so that you can use Chrome.

121
00:06:29.090 --> 00:06:31.849
That's a long one. The easy thing to do here is really just

122
00:06:31.850 --> 00:06:35.150
copy and paste from the example in the proxy lecture.

123
00:06:37.050 --> 00:06:39.353
I simply pasted in the example for traffic from

124
00:06:40.200 --> 00:06:42.359
the previous lecture. It'll work here with a few

125
00:06:42.360 --> 00:06:43.360
modifications.

126
00:06:45.850 --> 00:06:48.760
If I go down to the labels, I want to remove

127
00:06:48.820 --> 00:06:49.820
the vcap.me.

128
00:06:50.020 --> 00:06:52.629
It's not going to harm anything, but for this example, we

129
00:06:52.630 --> 00:06:53.950
were going to try to use Chrome.

130
00:06:54.400 --> 00:06:57.340
We can use the localhost feature of Chrome

131
00:06:57.400 --> 00:06:59.045
to send our stuff here.

132
00:06:59.290 --> 00:07:01.600
Then I'm going to leave the ports

133
00:07:02.320 --> 00:07:05.470
at 8080, but you might want to change yours to

134
00:07:05.860 --> 00:07:09.190
8088, or 9000, or something that was a little more

135
00:07:09.220 --> 00:07:11.289
open, maybe, if you already have something else running on

136
00:07:11.290 --> 00:07:14.580
port 80. For me, I'm just going to leave it at port 80.

137
00:07:15.490 --> 00:07:17.960
Then I'm going to copy the labels area.

138
00:07:18.030 --> 00:07:20.186
Then that's what I'm going to paste into the

139
00:07:21.060 --> 00:07:22.775
services that need the redirection.

140
00:07:24.000 --> 00:07:25.050
That's vote

141
00:07:27.570 --> 00:07:29.220
and result. Both of them need that.

142
00:07:31.050 --> 00:07:33.353
Then I know for the result app, it runs on port

143
00:07:34.020 --> 00:07:35.927
80. The way I can kind of tell that is a cheat.

144
00:07:36.060 --> 00:07:38.760
It's up here. The ports are open on port 80.

145
00:07:38.940 --> 00:07:40.709
It's pointing to that port in the container.

146
00:07:40.710 --> 00:07:42.809
I can also go look at the Dockerfile or just in the app

147
00:07:42.810 --> 00:07:43.810
itself.

148
00:07:44.310 --> 00:07:46.466
Then I want to change this host traffic rule

149
00:07:47.520 --> 00:07:49.200
here to result.

150
00:07:52.390 --> 00:07:53.880
The same up here with vote.

151
00:07:53.950 --> 00:07:56.580
If I go up, I see that the vote app is also running on port

152
00:07:56.700 --> 00:07:59.450
80. I will change this port.

153
00:08:01.270 --> 00:08:02.700
Change this to vote.

154
00:08:06.690 --> 00:08:08.819
An interesting thing to note here is that you can leave

155
00:08:08.820 --> 00:08:11.515
these ports here in case you want direct access to your

156
00:08:11.880 --> 00:08:12.880
applications.

157
00:08:13.290 --> 00:08:14.460
Maybe for better troubleshooting.

158
00:08:14.790 --> 00:08:17.097
Maybe it's convenient to go through the proxies so that you

159
00:08:17.098 --> 00:08:18.929
can have the nice friendly names and have everything

160
00:08:18.930 --> 00:08:19.940
listening on one port.

161
00:08:20.850 --> 00:08:23.251
But, when you're doing troubleshooting, you might

162
00:08:24.030 --> 00:08:26.480
think that maybe the proxy is part of the problem.

163
00:08:26.550 --> 00:08:28.859
Maybe it's not submitting the proper headers or maybe

164
00:08:28.860 --> 00:08:31.229
there's something getting lost in the translation of the

165
00:08:31.230 --> 00:08:34.320
proxy. I always tend to leave the extra high ports

166
00:08:34.350 --> 00:08:34.938
open.

167
00:08:34.940 --> 00:08:37.048
I don't use them by default and they're there in case I

168
00:08:37.049 --> 00:08:39.842
need them. You can take this out if you don't really want

169
00:08:40.110 --> 00:08:42.928
those ports, and then it all goes through that single proxy

170
00:08:42.929 --> 00:08:43.929
published port.

171
00:08:44.610 --> 00:08:47.720
All right in line 25, let's add nodemon to the results

172
00:08:47.730 --> 00:08:49.770
service based on file watching lecture.

173
00:08:50.190 --> 00:08:53.170
You may need to get nodemon into the result image somehow.

174
00:08:54.210 --> 00:08:56.484
If I go and I actually check the Dockerfile,

175
00:08:57.860 --> 00:08:58.950
nodemon is actually in there.

176
00:08:59.220 --> 00:09:00.683
I didn't put it but it was already there by default.

177
00:09:00.684 --> 00:09:02.520
That's an interesting thing.

178
00:09:02.570 --> 00:09:05.610
If I didn't have the ability to edit

179
00:09:05.640 --> 00:09:07.730
the Dockerfile. Maybe someone else controls the Dockerfile

180
00:09:07.920 --> 00:09:09.580
and I'm on a project where I don't have that permission.

181
00:09:10.170 --> 00:09:13.067
I could technically, in the command in my Compose

182
00:09:13.440 --> 00:09:16.430
file, I could make that command npm

183
00:09:16.440 --> 00:09:19.530
install -g nodemon and then do

184
00:09:20.070 --> 00:09:21.390
2 ampersands.

185
00:09:21.660 --> 00:09:24.567
Then the command that I needed to run like nodemon.

186
00:09:24.600 --> 00:09:26.490
That would essentially, whenever the container starts up,

187
00:09:26.790 --> 00:09:28.899
install nodemon and then run nodemon.

188
00:09:30.270 --> 00:09:31.649
I don't need to do that here because they've already

189
00:09:31.650 --> 00:09:32.730
installed nodemon for me.

190
00:09:33.430 --> 00:09:36.160
If I go down to the result, I can change the command.

191
00:09:40.260 --> 00:09:42.892
Because it's global, I can just specify nodemon.

192
00:09:44.630 --> 00:09:47.129
Because I know there's another bullet coming up for

193
00:09:47.750 --> 00:09:50.151
turning on debugging, I'm just going do that here

194
00:09:50.780 --> 00:09:51.780
now.

195
00:09:54.840 --> 00:09:57.584
You always remember that you need to put the four 0's in

196
00:09:57.670 --> 00:10:00.550
there for nodemon to have it listen on all interfaces.

197
00:10:00.610 --> 00:10:03.440
That way, it's accessible from my host.

198
00:10:05.390 --> 00:10:06.390
9229.

199
00:10:06.740 --> 00:10:09.658
Then the app's file server.js,

200
00:10:10.490 --> 00:10:12.380
which I can find from the Dockerfile for that.

201
00:10:20.890 --> 00:10:21.379
Now

202
00:10:21.380 --> 00:10:22.819
an interesting little problem that I tend to have sometimes

203
00:10:22.820 --> 00:10:25.515
as I get the nodemon stuff out of order, I'll often put

204
00:10:25.850 --> 00:10:28.104
nodemon server.js and then the nodemon options

205
00:10:28.940 --> 00:10:31.880
after that. They don't work, but it won't error out.

206
00:10:31.910 --> 00:10:34.115
It won't throw you an error necessarily so you won't

207
00:10:35.190 --> 00:10:37.983
know that. The way to always make sure that inspection is

208
00:10:38.210 --> 00:10:39.979
working, because that's the common one that I throw in

209
00:10:39.980 --> 00:10:42.470
there, is that when you launch the app, it will say

210
00:10:42.500 --> 00:10:45.097
debugging is enabled and it'll show you the debugging

211
00:10:45.590 --> 00:10:46.590
URL.

212
00:10:47.180 --> 00:10:49.309
So I always look for that to make sure that my debugging

213
00:10:49.310 --> 00:10:50.310
ports are working.

214
00:10:55.350 --> 00:10:57.285
I also now need to, on line 27,

215
00:10:58.500 --> 00:11:00.450
put the node environment variable in.

216
00:11:12.920 --> 00:11:15.169
Then I need to enable debugging, which I've already done in

217
00:11:15.170 --> 00:11:17.800
the command line here on 51.

218
00:11:18.140 --> 00:11:20.100
Then I need to publish the ports, so you

219
00:11:21.170 --> 00:11:22.170
can't forget about that.

220
00:11:22.610 --> 00:11:24.325
Need to get port 9229, which is the

221
00:11:25.610 --> 00:11:26.610
default.

222
00:11:28.940 --> 00:11:32.180
All right. I'm at a point now where I think I can save

223
00:11:32.300 --> 00:11:34.144
and try to do a docker compose up.

224
00:11:39.120 --> 00:11:41.766
It's giving me a YAML error which is probably the most

225
00:11:41.890 --> 00:11:44.585
common type of error that I have because I'm not always

226
00:11:45.040 --> 00:11:46.810
correct in my proper YAML typing.

227
00:11:46.840 --> 00:11:49.640
Sometimes, it's actually the editor causing improper

228
00:11:49.690 --> 00:11:52.209
indentation or different settings that you maybe don't want

229
00:11:52.210 --> 00:11:54.072
in your YAML. Let me go back in there.

230
00:11:54.490 --> 00:11:56.110
It's saying it's on line 5.

231
00:11:56.530 --> 00:11:58.600
That's my problem, so that's easy.

232
00:12:05.690 --> 00:12:08.770
Aha! It looks like I have forgotten

233
00:12:08.800 --> 00:12:11.680
the name. I didn't properly paste this in.

234
00:12:12.320 --> 00:12:13.510
I'm going to call this proxy.

235
00:12:15.200 --> 00:12:17.330
I can already see another problem here that I've got.

236
00:12:17.720 --> 00:12:18.798
When you're putting in the proxy,

237
00:12:19.130 --> 00:12:22.070
now what's interesting about this container is that

238
00:12:22.460 --> 00:12:25.106
this container needs to have access to all the ones it

239
00:12:25.130 --> 00:12:26.130
needs to proxy.

240
00:12:26.630 --> 00:12:29.570
I haven't added any networks to it because on

241
00:12:29.600 --> 00:12:32.419
the previous example for the previous lecture, we just used

242
00:12:32.420 --> 00:12:33.430
the default network.

243
00:12:33.740 --> 00:12:35.970
But, in this application, we have custom networks.

244
00:12:35.990 --> 00:12:38.449
In fact, if you scroll down to the bottom, you'll see

245
00:12:38.450 --> 00:12:39.938
there's the frontend and backend.

246
00:12:40.610 --> 00:12:43.160
If you were to look at the result

247
00:12:43.580 --> 00:12:46.385
and the voting app, you'll find that one is on the frontend

248
00:12:46.710 --> 00:12:48.979
and one is on the backend. So, technically my proxy needs

249
00:12:48.980 --> 00:12:51.349
to be on both of those networks to be able to access those

250
00:12:51.350 --> 00:12:53.800
apps. I need to add the proxy to those or it's not

251
00:12:54.410 --> 00:12:57.289
going to work. In fact, it'll just say gateway not found or

252
00:12:57.290 --> 00:12:59.630
something like that if it can't access the backend

253
00:12:59.900 --> 00:13:02.509
containers. Another way you could do this is to create a

254
00:13:02.510 --> 00:13:04.960
dedicated proxy network and then add an additional

255
00:13:05.510 --> 00:13:08.330
network to all the containers called proxy

256
00:13:08.660 --> 00:13:11.257
where you basically isolate the proxy traffic to just

257
00:13:11.750 --> 00:13:12.750
that network.

258
00:13:13.010 --> 00:13:14.929
I'm going to do the first option here where I'm just going

259
00:13:14.930 --> 00:13:16.560
to add it simply to the backend and frontend

260
00:13:19.120 --> 00:13:21.340
instead of creating the new network called proxy.

261
00:13:30.210 --> 00:13:31.240
All right. Let's try it again.

262
00:13:33.260 --> 00:13:36.320
Here's a great one is that if you misspell things,

263
00:13:36.590 --> 00:13:39.187
they're going to show up in the error is usually when

264
00:13:39.620 --> 00:13:43.010
you come out. Now that's only for the YAML option.

265
00:13:43.250 --> 00:13:45.739
The objects themselves, not necessarily the value of the

266
00:13:45.740 --> 00:13:47.400
objects, but the object names themselves.

267
00:13:47.600 --> 00:13:49.164
It looks like I've misspelled healthcheck.

268
00:13:50.300 --> 00:13:51.380
That is helpful.

269
00:13:52.640 --> 00:13:54.698
It would not be easy to find the different

270
00:13:55.700 --> 00:13:56.700
misspellings.

271
00:13:56.990 --> 00:13:59.293
It says If I go to Redis, that I should see the

272
00:13:59.750 --> 00:14:00.750
healthcheck. Yep.

273
00:14:01.100 --> 00:14:02.100
That's misspelled.

274
00:14:11.030 --> 00:14:12.160
Try it one more time. All right. So far, so good.

275
00:14:13.980 --> 00:14:15.860
All right, looks like my app is fully booted.

276
00:14:15.870 --> 00:14:18.830
The databases have been created and my result and

277
00:14:18.930 --> 00:14:21.659
worker apps are nice enough that they actually tell us when

278
00:14:21.660 --> 00:14:23.660
they're connected to the database. That's handy.

279
00:14:25.120 --> 00:14:27.309
In order to ensure everything is going to work well, there

280
00:14:27.310 --> 00:14:30.160
are four bullets at the bottom of the

281
00:14:30.340 --> 00:14:32.679
readme, so I can go through those and make sure that they

282
00:14:32.680 --> 00:14:33.680
work as expected.

283
00:14:33.970 --> 00:14:36.280
The first one here is I just need to go to make sure file

284
00:14:36.610 --> 00:14:37.930
watching is working.

285
00:14:37.940 --> 00:14:40.292
I need to go edit one of the files in result, so

286
00:14:40.960 --> 00:14:44.410
I'll go into the server.js and save that file,

287
00:14:44.740 --> 00:14:46.038
and make sure that my nodemon restarts.

288
00:14:46.039 --> 00:14:47.852
If yours doesn't do that, the chances

289
00:14:49.180 --> 00:14:51.924
are you're probably on Windows, and you need to add into

290
00:14:51.970 --> 00:14:53.734
your nodemon line the Legacy polling

291
00:14:55.060 --> 00:14:57.755
option. You can simply look that up on the nodemon home

292
00:14:57.820 --> 00:15:00.700
page or the readme on nodemon's

293
00:15:01.090 --> 00:15:02.090
GitHub repo.

294
00:15:02.660 --> 00:15:05.080
That'll tell you the option that you need to add into your

295
00:15:05.500 --> 00:15:07.705
nodemon line or in your nodemon configuration

296
00:15:08.500 --> 00:15:09.690
if you use in the config file.

297
00:15:10.180 --> 00:15:13.071
That will make sure that it's seeing the files and whenever

298
00:15:13.450 --> 00:15:14.980
you write a file, it restarts.

299
00:15:20.020 --> 00:15:22.663
Next on the list, ensure that I never see waiting for db

300
00:15:23.140 --> 00:15:25.443
in the Docker Compose logs, which happens if my

301
00:15:25.540 --> 00:15:26.880
healthchecks aren't working correctly.

302
00:15:27.520 --> 00:15:29.970
I don't think I saw that which means we're working

303
00:15:31.000 --> 00:15:31.949
correctly.

304
00:15:31.950 --> 00:15:34.645
I would see that multiple times, typically, if I didn't

305
00:15:34.930 --> 00:15:37.749
have the healthchecks and that depends on stuff all set up

306
00:15:37.750 --> 00:15:40.540
correctly. Then the apps themselves wouldn't

307
00:15:41.020 --> 00:15:43.780
connect. The nice thing is, is in this demo app,

308
00:15:44.140 --> 00:15:46.480
the application, the result, and the vote apps both have

309
00:15:47.170 --> 00:15:49.509
retries. If it can't connect to the database the first

310
00:15:49.510 --> 00:15:52.156
time, it will put that waiting for db message and then

311
00:15:52.210 --> 00:15:54.160
retry a few seconds later.

312
00:15:54.490 --> 00:15:55.989
Not every app is going to have that.

313
00:15:55.990 --> 00:15:57.290
Some apps will just crash.

314
00:15:57.580 --> 00:15:59.890
Some apps will just freeze and not do anything.

315
00:16:00.370 --> 00:16:02.770
The nice thing is these apps will warn you properly.

316
00:16:02.950 --> 00:16:04.240
Ideally, we don't want that.

317
00:16:04.270 --> 00:16:07.112
We want to fix it with the depends on and the healthchecks

318
00:16:07.270 --> 00:16:08.980
stuff, and that's what we did.

319
00:16:09.320 --> 00:16:10.320
Hopefully, you don't see those.

320
00:16:10.640 --> 00:16:13.286
In line 35, we have use the VS code, or another editor

321
00:16:13.870 --> 00:16:15.700
with debugger, to connect to the debugger.

322
00:16:16.270 --> 00:16:18.922
You've seen a previous example in the previous lectures of

323
00:16:18.998 --> 00:16:21.252
VS code. Another option we have is since we've

324
00:16:21.940 --> 00:16:24.130
started debugging, is to just go into Chrome,

325
00:16:26.230 --> 00:16:27.850
which has a built-in debugger.

326
00:16:28.450 --> 00:16:31.233
You get there by typing chrome://inspect.

327
00:16:37.350 --> 00:16:39.180
I can never remember if it's inspect or devices.

328
00:16:39.450 --> 00:16:42.243
It actually shows chrome inspect, and it'll show anything

329
00:16:42.510 --> 00:16:43.510
on your network.

330
00:16:43.770 --> 00:16:46.230
Then anything on your local machine.

331
00:16:46.260 --> 00:16:47.565
So, remote target localhost.

332
00:16:48.360 --> 00:16:50.770
You can see the server there. I can click inspect and it'll

333
00:16:50.790 --> 00:16:53.459
pull up the debug window, and you can see the debug stuff

334
00:16:53.460 --> 00:16:55.567
coming out from the logging, and that means

335
00:16:56.580 --> 00:16:57.580
it works.

336
00:16:58.890 --> 00:17:00.920
The last one here is use my browser to go to vote.localhost

337
00:17:01.950 --> 00:17:04.460
and result.localhost and make sure they work.

338
00:17:10.720 --> 00:17:13.109
All right. vote.localhost is working for me.

339
00:17:16.520 --> 00:17:17.849
result.localhost is working for me.

340
00:17:17.910 --> 00:17:20.459
You'll know the full app is functioning correctly in all

341
00:17:20.460 --> 00:17:23.068
the different parts if you click on one of these, and then

342
00:17:23.069 --> 00:17:25.290
go over here, and it changes the votes.

343
00:17:25.470 --> 00:17:27.998
I voted 100% for cats and if I click on dogs, it's

344
00:17:28.800 --> 00:17:31.620
now voting 100% dogs. That means that

345
00:17:31.890 --> 00:17:34.585
the data is getting from the voting app into the Redis.

346
00:17:34.693 --> 00:17:36.163
Redis gets it into the worker.

347
00:17:36.724 --> 00:17:39.810
Worker then sends it into the Postgres database,

348
00:17:39.840 --> 00:17:42.633
and then the result app properly pulls it from the result

349
00:17:42.780 --> 00:17:43.780
database.

350
00:17:44.510 --> 00:17:46.279
If you wanted, you could also go, of course, to the

351
00:17:46.280 --> 00:17:47.280
traffic.localhost

352
00:17:51.000 --> 00:17:53.891
and see the dashboard of all the frontends and backends and

353
00:17:53.970 --> 00:17:55.410
then the health, stuff like that.

354
00:17:55.710 --> 00:17:58.209
Hopefully you got similar results to what I did and

355
00:17:59.100 --> 00:18:00.100
that it all makes sense.

356
00:18:00.690 --> 00:18:01.890
I'll see you in the next section.

