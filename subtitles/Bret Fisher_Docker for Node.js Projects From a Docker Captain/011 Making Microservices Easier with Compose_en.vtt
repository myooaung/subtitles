WEBVTT
1
00:00:02.600 --> 00:00:05.393
Once your Compose projects get bigger, and you might even

2
00:00:05.450 --> 00:00:06.482
be considering microservices,

3
00:00:07.370 --> 00:00:09.170
you're going to end up with a lot of services.

4
00:00:09.200 --> 00:00:11.797
That sort of magnifies a lot of the problems that you

5
00:00:12.140 --> 00:00:14.599
traditionally would have with just a bunch of things

6
00:00:14.600 --> 00:00:16.879
running that you're trying to all get working together for

7
00:00:16.880 --> 00:00:18.938
development. There's lots of little issues

8
00:00:20.360 --> 00:00:22.418
that have their own workarounds or ways to

9
00:00:23.390 --> 00:00:24.410
go about solving them.

10
00:00:24.680 --> 00:00:27.571
They may or may not be Compose specific, but I just want to

11
00:00:27.650 --> 00:00:30.345
throw those in here so that you have the tools you need

12
00:00:30.860 --> 00:00:33.050
to go check this stuff out when you need it.

13
00:00:33.080 --> 00:00:35.869
You may not have all these problems today, but I wanted to

14
00:00:35.870 --> 00:00:37.849
give you some resources to jump off with them and then show

15
00:00:37.850 --> 00:00:40.400
you a quick example of using a local proxy.

16
00:00:40.910 --> 00:00:43.605
One of the challenges of microservices is that assuming

17
00:00:43.820 --> 00:00:45.829
you're using API or HTTP based endpoints,

18
00:00:46.970 --> 00:00:48.170
is you end up with a lot of them.

19
00:00:48.680 --> 00:00:50.910
So, you need to be able to manage those locally.

20
00:00:50.930 --> 00:00:53.380
If you're just using Compose by default, Docker is

21
00:00:53.900 --> 00:00:56.359
going to want to have a published port for every one of

22
00:00:56.360 --> 00:00:58.609
these containers, which means you end up with a whole bunch

23
00:00:58.610 --> 00:01:01.339
of ports that you have to manage across all the different

24
00:01:01.340 --> 00:01:02.550
microservices you might have.

25
00:01:03.140 --> 00:01:05.835
That's fine at first, but you may want a more optimized

26
00:01:06.560 --> 00:01:09.157
design where you're using DNS names to access various

27
00:01:09.830 --> 00:01:12.133
things, various microservices, instead of ports

28
00:01:13.100 --> 00:01:14.100
for each one.

29
00:01:14.570 --> 00:01:16.534
That's where a proxy will come into play.

30
00:01:16.548 --> 00:01:18.214
That's really, I think nowadays, a

31
00:01:19.550 --> 00:01:22.330
very standard part of your local Docker Compose

32
00:01:22.790 --> 00:01:25.044
setup is putting in a container that's using a

33
00:01:25.820 --> 00:01:27.976
reverse proxy to make it easier for all your

34
00:01:28.850 --> 00:01:31.545
various endpoints, and parts of your app, to run behind

35
00:01:32.030 --> 00:01:35.450
that. Then you can use nice things like friendly DNS names.

36
00:01:35.480 --> 00:01:37.610
You don't have to have a bunch of random ports open.

37
00:01:38.000 --> 00:01:40.400
It just scales better, I think, as you grow.

38
00:01:41.560 --> 00:01:44.280
Standard options here are Nginx, HAProxy and Traefik.

39
00:01:45.130 --> 00:01:47.629
In a minute, I'll show you a demo of using Nginx or

40
00:01:47.980 --> 00:01:50.626
Traefik, two of, I think, the most popular choices for

41
00:01:50.770 --> 00:01:53.410
doing this. It's really not that much work to set up.

42
00:01:53.980 --> 00:01:56.439
Another problem is if you have CORS failures in local

43
00:01:56.440 --> 00:01:58.841
development. That's cross origin issues where you

44
00:01:59.500 --> 00:02:02.342
maybe have an app that's locked down a little bit to where

45
00:02:02.500 --> 00:02:04.779
it can be accessed from, and another one of your

46
00:02:04.780 --> 00:02:07.524
container's is failing at accessing it locally basically

47
00:02:07.810 --> 00:02:10.180
because you've got the wrong setting setup there.

48
00:02:10.389 --> 00:02:12.888
Instead of trying to go customize your app, you can

49
00:02:13.540 --> 00:02:15.100
use a proxy for this as well.

50
00:02:15.550 --> 00:02:18.340
I put some links in the resources for this lecture

51
00:02:18.700 --> 00:02:21.542
that if you're into a CORS issue, just go check that stuff

52
00:02:21.610 --> 00:02:24.129
out. If you don't have to worry about CORS yet, then don't

53
00:02:24.130 --> 00:02:26.874
bother because it's a very specific problem, with a very

54
00:02:27.040 --> 00:02:28.780
specific way of going about solving it.

55
00:02:29.800 --> 00:02:32.111
If you're interested at all in developing locally with

56
00:02:32.112 --> 00:02:34.219
HTTPS, that's also it's own set of problems

57
00:02:35.530 --> 00:02:37.959
on how you go about getting certificates, and how do you

58
00:02:37.960 --> 00:02:39.790
get easy trust in your browsers.

59
00:02:40.180 --> 00:02:43.330
I've put a great resource link in

60
00:02:43.390 --> 00:02:46.330
this lecture's resources to Let's Encrypt.

61
00:02:46.390 --> 00:02:49.380
Let's Encrypt itself is not really ideal

62
00:02:49.390 --> 00:02:51.279
for local development. It is really designed as a

63
00:02:51.280 --> 00:02:53.709
production tool. But, this article that I'd like you to

64
00:02:53.710 --> 00:02:56.454
read from Let's Encrypt, and if you're not aware of them

65
00:02:56.530 --> 00:02:59.029
they're the big open source project that allows you

66
00:02:59.530 --> 00:03:02.000
to get free real certificates for real websites.

67
00:03:02.230 --> 00:03:03.961
They're fantastic. You should definitely look at it.

68
00:03:03.978 --> 00:03:07.420
But, that is not really a tool for local

69
00:03:07.600 --> 00:03:09.970
development with SSL or TLS certs.

70
00:03:10.240 --> 00:03:12.670
They have a great article talking about the problems of it

71
00:03:12.700 --> 00:03:16.030
and the best solution, which I adopt as well.

72
00:03:16.240 --> 00:03:18.237
In that case, essentially the solution is creating

73
00:03:19.300 --> 00:03:21.849
your own localhost certificates, on your local machine, and

74
00:03:21.850 --> 00:03:23.590
then just connecting those into your proxy.

75
00:03:24.430 --> 00:03:27.027
Before I get to a quick demo on this, one of the last

76
00:03:27.130 --> 00:03:30.100
problems is just how to deal with DNS names locally.

77
00:03:30.310 --> 00:03:32.907
Of course, if you're on a Mac or Linux machine, or on

78
00:03:33.370 --> 00:03:36.880
Docker Desktop for Windows 10, you get to use localhost

79
00:03:37.180 --> 00:03:39.581
if you're using that setup, and they sort of hide

80
00:03:40.360 --> 00:03:41.830
the fact that Docker is running in the background.

81
00:03:41.890 --> 00:03:44.030
That's great. If you're on another setup like Docker

82
00:03:44.031 --> 00:03:46.670
Toolbox, or a remote server, or just simply your

83
00:03:47.020 --> 00:03:49.617
own custom VM, you have to use an IP address for that

84
00:03:49.930 --> 00:03:52.772
machine, probably if it's locally running in VirtualBox or

85
00:03:52.900 --> 00:03:55.497
something. So, you might wonder what your options are

86
00:03:55.900 --> 00:03:58.160
for DNS names locally.

87
00:03:58.450 --> 00:04:01.420
Well, the first that I'm going to suggest here is

88
00:04:01.600 --> 00:04:04.360
really the easiest because Chrome itself, out-of-the-box,

89
00:04:04.630 --> 00:04:07.366
the Chrome browser, allows you to use something.localhost

90
00:04:08.680 --> 00:04:11.320
for any name, for some website you have locally.

91
00:04:11.350 --> 00:04:13.779
And that's great. Honestly, if you can get away with doing

92
00:04:13.780 --> 00:04:16.478
that, and if you're only developing for stuff that's web

93
00:04:16.480 --> 00:04:19.418
based in Chrome, and you're not using command line tools or

94
00:04:19.420 --> 00:04:21.519
other browsers, then great.

95
00:04:21.579 --> 00:04:22.840
You can get away with that.

96
00:04:22.900 --> 00:04:25.546
But, it doesn't scale to other tools and other problem

97
00:04:25.810 --> 00:04:28.600
areas. So, it's really just a Chrome-specific feature.

98
00:04:29.020 --> 00:04:31.479
I tried it in Safari. I haven't tried it in every browser,

99
00:04:31.480 --> 00:04:32.770
and I don't know if it works everywhere.

100
00:04:32.800 --> 00:04:35.169
But, Chrome does support it. So, essentially you get that

101
00:04:35.170 --> 00:04:37.450
out-of-the-box. You don't have to set up anything custom

102
00:04:37.750 --> 00:04:39.963
for that to work. That would allow you to have website

103
00:04:39.964 --> 00:04:42.330
a.localhost, website b.localhost,

104
00:04:43.420 --> 00:04:46.000
and those would work in Chrome and automatically go to your

105
00:04:46.300 --> 00:04:47.300
localhost IP address.

106
00:04:47.650 --> 00:04:50.229
Then you could have a proxy running there, which I'll show

107
00:04:50.230 --> 00:04:52.582
you in a minute, on routing those connections to

108
00:04:53.230 --> 00:04:54.700
wherever they need go in your containers.

109
00:04:55.180 --> 00:04:57.699
The next option here, which I've used in the past, is to

110
00:04:57.700 --> 00:04:58.900
use a wildcard domain.

111
00:04:59.230 --> 00:05:01.680
The jury is a little bit undecided on the security

112
00:05:02.650 --> 00:05:05.469
risk with this and what you need to worry about in terms of

113
00:05:05.470 --> 00:05:08.320
maybe someone that's hosting a domain name that you have

114
00:05:08.710 --> 00:05:10.000
redirecting locally.

115
00:05:10.720 --> 00:05:13.121
I feel like it's safe, especially if you're using

116
00:05:13.930 --> 00:05:15.010
names that you can trust.

117
00:05:15.400 --> 00:05:17.556
I use the vcap.me, which is owned by VMware.

118
00:05:18.044 --> 00:05:20.837
It's a part of their VMware platform, so it's been around

119
00:05:21.370 --> 00:05:23.165
for a probably a decade I think at this point.

120
00:05:23.166 --> 00:05:24.195
It's pretty standard.

121
00:05:24.880 --> 00:05:27.250
It's trusted, at least, that they're not going to go and

122
00:05:27.490 --> 00:05:29.799
randomly cause that name to be redirected to other

123
00:05:29.800 --> 00:05:30.800
websites.

124
00:05:31.060 --> 00:05:33.165
You can also look at xip.io.

125
00:05:33.940 --> 00:05:36.369
That's a slightly different solution where it allows you to

126
00:05:36.370 --> 00:05:38.085
have a DNS name for each IP address

127
00:05:39.640 --> 00:05:41.060
of any private subnet.

128
00:05:41.080 --> 00:05:43.200
It's pretty interesting in case you have local servers.

129
00:05:43.570 --> 00:05:46.265
These two solutions are just like the first one, really

130
00:05:46.660 --> 00:05:48.767
about you using DNS names to access a bunch

131
00:05:49.990 --> 00:05:51.999
of different local containers all running

132
00:05:53.230 --> 00:05:56.250
on your localhost without having to edit your host file.

133
00:05:56.750 --> 00:05:59.592
The last little option here is dnsmasq, which you will see

134
00:05:59.950 --> 00:06:01.929
if you go searching around for this problem, you'll see

135
00:06:01.930 --> 00:06:03.184
people suggesting dnsmasq.

136
00:06:04.120 --> 00:06:07.000
That's an interesting little mini DNS server

137
00:06:07.330 --> 00:06:09.980
that sits on either Mac or Linux.

138
00:06:10.000 --> 00:06:11.890
It doesn't, at this point, run on Windows.

139
00:06:12.190 --> 00:06:14.559
But on Mac and Linux, it will sit there and you can

140
00:06:14.560 --> 00:06:17.030
customize it for any domains you want.

141
00:06:17.060 --> 00:06:19.771
Like something.bret, or something.docker.

142
00:06:20.770 --> 00:06:23.416
You could have that going to a local machine or really

143
00:06:23.470 --> 00:06:26.440
wherever you want. This little thing then does

144
00:06:26.680 --> 00:06:29.326
the DNS request and answers them for that, and then it

145
00:06:29.710 --> 00:06:32.349
spins off the rest of them to whatever your normal DNS host

146
00:06:32.350 --> 00:06:35.020
is. It's a little bit more of a setup process that

147
00:06:35.260 --> 00:06:36.870
typically runs on the host.

148
00:06:37.120 --> 00:06:38.350
So, you would have to set up some things.

149
00:06:38.640 --> 00:06:40.150
It doesn't solve every problem.

150
00:06:40.180 --> 00:06:42.460
So, I typically only use that when I absolutely have to.

151
00:06:42.940 --> 00:06:45.268
Then, of course, your last resort is using the host file.

152
00:06:45.269 --> 00:06:48.270
You might ask, well, that seems like the easiest choice.

153
00:06:48.280 --> 00:06:49.280
Why don't I just do that?

154
00:06:49.600 --> 00:06:51.879
Well, a couple of reasons. One, you have to have local

155
00:06:51.880 --> 00:06:54.147
admin, and you have to be willing to go in and edit that

156
00:06:54.148 --> 00:06:56.244
host file. It doesn't work with wildcard.

157
00:06:56.690 --> 00:06:59.532
So, that means for every name, for every microservice that

158
00:06:59.680 --> 00:07:02.439
you would want to have it's own DNS name, you'd have to add

159
00:07:02.440 --> 00:07:05.282
a separate thing into the host file, and that just becomes

160
00:07:05.590 --> 00:07:06.590
very tedious.

161
00:07:06.850 --> 00:07:09.741
People have created scripts and tools over time to manually

162
00:07:10.060 --> 00:07:12.902
edit your localhost file to do all of this, but it's still

163
00:07:13.090 --> 00:07:14.560
not within the Docker workflow.

164
00:07:14.570 --> 00:07:16.200
It's not something that can be automated with Docker

165
00:07:16.390 --> 00:07:18.644
Compose. It just adds extra work, and it tends

166
00:07:19.420 --> 00:07:21.950
to be my last option or preference.

167
00:07:22.660 --> 00:07:24.620
If you go looking in the repo for sample

168
00:07:25.630 --> 00:07:27.786
local proxy, you'll see two Compose examples

169
00:07:28.870 --> 00:07:30.929
that are pretty simple that I just want to run you through

170
00:07:30.930 --> 00:07:33.719
real quick, so you can play with those and see if they'll

171
00:07:33.720 --> 00:07:34.890
work in your workflow.

172
00:07:35.490 --> 00:07:37.744
They're designed so you can copy out the proxy

173
00:07:38.700 --> 00:07:41.395
config for the service that will run a local proxy, and

174
00:07:41.730 --> 00:07:44.120
then just paste that into your existing Docker Compose

175
00:07:44.460 --> 00:07:46.923
files, and then start configuring your services so that

176
00:07:46.924 --> 00:07:48.982
they'll all work behind this single proxy.

177
00:07:49.536 --> 00:07:52.470
This by no way is a production-like

178
00:07:52.770 --> 00:07:55.229
setup. These aren't designed for production the way that

179
00:07:55.230 --> 00:07:56.230
I've configured them.

180
00:07:56.580 --> 00:07:59.226
This is simply for local setups so that you can have a

181
00:07:59.490 --> 00:08:02.332
single endpoint, maybe running on port 80, or whatever you

182
00:08:02.370 --> 00:08:05.250
want. Then have a whole bunch different containers

183
00:08:05.610 --> 00:08:07.650
running websites behind them on different names.

184
00:08:08.580 --> 00:08:11.340
The first one here Nginx-proxy YAML

185
00:08:11.580 --> 00:08:13.442
is using an Nginx variant and a couple

186
00:08:14.550 --> 00:08:17.147
of tools built into a single container by a community

187
00:08:17.850 --> 00:08:20.489
leader, jwilder, who has been around the Docker scene for

188
00:08:20.490 --> 00:08:23.234
quite some time. This is probably the most popular local

189
00:08:23.490 --> 00:08:25.352
proxy setup around, and it just works.

190
00:08:26.280 --> 00:08:29.237
It has lots and lots of info on his GitHub

191
00:08:29.460 --> 00:08:31.350
page. You can definitely go check all that out.

192
00:08:31.680 --> 00:08:33.933
It hasn't changed a whole lot since he created

193
00:08:34.650 --> 00:08:37.198
it around 2014, which at this point, was a long time

194
00:08:37.710 --> 00:08:39.866
ago. You can see I've added a single service

195
00:08:40.679 --> 00:08:43.890
here, Nginx proxy, and then it's sitting in front

196
00:08:43.950 --> 00:08:46.980
of my services. So, let's say I have an app that's running

197
00:08:47.260 --> 00:08:49.500
Nginx on one server, and then a ghost

198
00:08:50.580 --> 00:08:52.290
Node.js server running on another container.

199
00:08:52.740 --> 00:08:55.533
These are separate apps. If I didn't have the Nginx proxy

200
00:08:55.710 --> 00:08:57.659
sitting in front of them, they'd have to be published on

201
00:08:57.660 --> 00:08:59.865
their own ports. But, in this case, the proxy

202
00:09:00.720 --> 00:09:03.330
sits in front of them. It's listening on my local port 80,

203
00:09:03.750 --> 00:09:05.740
and it's mounted to my Docker socket.

204
00:09:05.790 --> 00:09:07.550
So, it's reading information coming out of the Docker

205
00:09:07.830 --> 00:09:10.620
Engine. Then it's able to

206
00:09:10.830 --> 00:09:13.740
respond to anything coming at it at port 80

207
00:09:14.100 --> 00:09:16.860
based on the DNS names, or the virtual hosts,

208
00:09:17.100 --> 00:09:18.480
that I give each one of my apps.

209
00:09:18.570 --> 00:09:21.461
So, if you had 20 different microservices, you would simply

210
00:09:21.630 --> 00:09:24.420
add an environment variable for each that would be the name

211
00:09:24.630 --> 00:09:27.180
that you'd want to use from your local browser,

212
00:09:27.600 --> 00:09:29.639
or from cURL, or whatever you are using on your local

213
00:09:29.640 --> 00:09:32.260
machine, to get into those apps, right.

214
00:09:32.790 --> 00:09:35.519
If I spin this up, you would see that I would just be able

215
00:09:35.520 --> 00:09:38.610
to go to either the dude.localhost or the

216
00:09:38.640 --> 00:09:40.502
ghost.localhost, and I would see those

217
00:09:41.790 --> 00:09:44.093
websites because the Nginx proxy is redirecting

218
00:09:45.210 --> 00:09:48.420
the traffic, or reverse proxying it, from

219
00:09:48.480 --> 00:09:49.840
that port that it's listening on.

220
00:09:50.160 --> 00:09:52.398
This does support a lot of other things, like wildcards

221
00:09:53.160 --> 00:09:56.190
and SSL, and you name it, there's a bunch of stuff in it,

222
00:09:56.400 --> 00:09:58.752
and it's all on his GitHub repo that you can see

223
00:09:59.400 --> 00:10:00.730
in the resources for this lecture.

224
00:10:00.731 --> 00:10:03.083
The other way I'm going to show you here is with

225
00:10:03.420 --> 00:10:05.527
Traefik.Traefik is a proxy that's exclusive

226
00:10:07.080 --> 00:10:08.850
to just doing reverse proxy.

227
00:10:09.300 --> 00:10:11.760
It's only goal in life is to be the best

228
00:10:12.390 --> 00:10:15.810
container-based dynamic distributed computing

229
00:10:15.840 --> 00:10:17.040
type of proxy.

230
00:10:17.560 --> 00:10:20.304
It's got a lot of really interesting features because it

231
00:10:20.310 --> 00:10:23.130
was based and born in the cloud world.

232
00:10:23.140 --> 00:10:25.530
It was designed for containers and cloud native stuff.

233
00:10:25.550 --> 00:10:28.440
So, it's got some really easy ways to get around using it.

234
00:10:28.610 --> 00:10:30.930
You can see here that the setup is a little bit different,

235
00:10:30.960 --> 00:10:32.640
but its purpose is the same.

236
00:10:33.150 --> 00:10:35.610
You have the image that I've specified here.

237
00:10:35.640 --> 00:10:38.600
I'm using the Docker volume to mount the sockets so it

238
00:10:38.640 --> 00:10:40.950
can read information coming out of your Docker Engine.

239
00:10:41.250 --> 00:10:42.840
I have it listening on port 80.

240
00:10:43.170 --> 00:10:46.012
Then I basically am setting it up to know that it needs to

241
00:10:46.170 --> 00:10:47.170
work with Docker.

242
00:10:47.910 --> 00:10:50.507
Then it has its own web-based interface where you can

243
00:10:50.670 --> 00:10:52.979
actually see stuff about what's going on, and that's pretty

244
00:10:52.980 --> 00:10:54.660
cool because I can give it a name.

245
00:10:55.080 --> 00:10:57.677
You'll see, in this example, that I'm giving it these

246
00:10:57.870 --> 00:11:00.449
labels. The labels, rather than environment variables with

247
00:11:00.450 --> 00:11:03.194
the Nginx one, the labels are how you tell this to work.

248
00:11:03.660 --> 00:11:05.250
So, it's using container labels.

249
00:11:05.670 --> 00:11:07.610
In this case, I'm telling it traefik.localhost.

250
00:11:08.760 --> 00:11:09.975
That's what will work in Chrome.

251
00:11:10.680 --> 00:11:13.330
But, if I don't have Chrome, or I can't use Chrome, or I

252
00:11:13.340 --> 00:11:16.132
need to use something more suitable in my situation, then

253
00:11:16.340 --> 00:11:19.430
I'm using the vcap wildcard domain from VMware

254
00:11:19.740 --> 00:11:22.484
that I mentioned earlier, so I could also use this name,

255
00:11:22.650 --> 00:11:25.345
which would redirect locally to my machine and bring up

256
00:11:25.620 --> 00:11:26.930
that monitoring website.

257
00:11:27.420 --> 00:11:29.968
The other things for my Nginx and my ghosts are very

258
00:11:30.180 --> 00:11:31.230
similar to before.

259
00:11:31.920 --> 00:11:34.890
You can see my two services that are sitting behind it.

260
00:11:34.950 --> 00:11:36.737
The Nginx example, and the ghost example, and I've

261
00:11:38.130 --> 00:11:41.510
got both names in there in case I want to use the localhost

262
00:11:41.520 --> 00:11:44.010
in Chrome. Or, if I want to use the vcap me.

263
00:11:44.480 --> 00:11:47.725
The comma there allows me to put multiple host names.

264
00:11:48.060 --> 00:11:50.609
I'm sure that the Nginx proxy example has that feature as

265
00:11:50.610 --> 00:11:52.897
well. I'm just showing you different ways of doing it.

266
00:11:52.919 --> 00:11:54.562
Both of these work out-of-the-box.

267
00:11:54.930 --> 00:11:57.149
You can cut and paste them, and play with them in your own

268
00:11:57.150 --> 00:12:00.120
apps. If you're using more than two or three

269
00:12:00.150 --> 00:12:02.670
websites, and you're growing, especially if you're building

270
00:12:02.910 --> 00:12:04.800
microservices and you know you're going to keep adding new

271
00:12:04.830 --> 00:12:07.785
API endpoints and stuff like that in different containers,

272
00:12:08.190 --> 00:12:09.959
you're definitely going to have to build one of these two

273
00:12:09.960 --> 00:12:12.870
types of solutions into your Compose files

274
00:12:13.140 --> 00:12:15.649
so that you'll at least have a sane way of managing it all

275
00:12:15.650 --> 00:12:16.410
on your local machine.

