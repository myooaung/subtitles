WEBVTT
1
00:00:01.627 --> 00:00:07.637
Next up in our tour of device software to take a look at is AWS IoT Greengrass.

2
00:00:07.637 --> 00:00:12.205
AWS IoT Greengrass extends AWS to edge devices so they can

3
00:00:12.205 --> 00:00:14.839
act locally on the data they generate,

4
00:00:14.839 --> 00:00:17.270
while still using the cloud for management,

5
00:00:17.270 --> 00:00:19.177
analytics, and durable storage.

6
00:00:19.177 --> 00:00:22.251
Now I've mentioned edge devices before,

7
00:00:22.251 --> 00:00:26.008
so let's go and take a look at what exactly edge devices are.

8
00:00:26.008 --> 00:00:28.991
Well, edge devices have full operating systems,

9
00:00:28.991 --> 00:00:33.127
in contrast to microcontroller and Amazon FreeRTOS,

10
00:00:33.127 --> 00:00:36.880
these are actually things that run something like Linux,

11
00:00:36.880 --> 00:00:39.071
Android, or iOS.

12
00:00:39.071 --> 00:00:41.662
They also differ in terms of their hardware.

13
00:00:41.662 --> 00:00:44.544
They usually have more memory and storage than microcontrollers

14
00:00:44.544 --> 00:00:48.233
that allows them to run these operating systems.

15
00:00:48.233 --> 00:00:50.352
Further, they'll have IoT connections,

16
00:00:50.352 --> 00:00:56.702
so they're going to be able to interact with IoT devices and the AWS IoT Core.

17
00:00:56.702 --> 00:01:00.466
So not just one or the other, but both.

18
00:01:00.466 --> 00:01:03.021
So why might we use edge devices?

19
00:01:03.021 --> 00:01:06.113
One of the first reasons is because of the laws of physics.

20
00:01:06.113 --> 00:01:10.033
Barring any advancements in quantum entanglement and quantum computing,

21
00:01:10.033 --> 00:01:13.476
we're always going to be bound by the speed of light.

22
00:01:13.476 --> 00:01:16.322
Information itself can't be transmitted faster than that,

23
00:01:16.322 --> 00:01:20.422
and therefore will have some latency when we're trying to interact with

24
00:01:20.422 --> 00:01:22.998
different locations that are far away from each other.

25
00:01:22.998 --> 00:01:27.087
And sometimes when these Internet of Things devices are relatively far away,

26
00:01:27.087 --> 00:01:30.085
they're going to have to deal with that latency.

27
00:01:30.085 --> 00:01:30.321
Also,

28
00:01:30.321 --> 00:01:34.582
because of the nature of IoT devices potentially being in

29
00:01:34.582 --> 00:01:36.816
situations where intermittent connections are a thing,

30
00:01:36.816 --> 00:01:40.658
we're going to need some way to actually deal with this.

31
00:01:40.658 --> 00:01:44.718
Now think of a few situations surrounding potentially self driving cars.

32
00:01:44.718 --> 00:01:46.908
You don't want to have to go and make a connection to the

33
00:01:46.908 --> 00:01:50.318
cloud in order to determine whether or not you should stop

34
00:01:50.318 --> 00:01:53.100
suddenly to avoid hitting a pedestrian.

35
00:01:53.100 --> 00:01:57.354
You're going to want to take input from different sensors and process it there

36
00:01:57.354 --> 00:02:01.293
locally on site and make decisions based on that information.

37
00:02:01.293 --> 00:02:04.425
And then eventually you might want to send more information on to continue to

38
00:02:04.425 --> 00:02:07.099
improve the algorithms that are running that self driving car.

39
00:02:07.099 --> 00:02:09.046
Now those are just a few examples,

40
00:02:09.046 --> 00:02:12.564
but another big reason is because of economics.

41
00:02:12.564 --> 00:02:18.933
It's expensive to store worthless data and the volume of data created by

42
00:02:18.933 --> 00:02:23.746
IoT is massive with the billions and billions of devices that are

43
00:02:23.746 --> 00:02:26.776
continually being added to the IoT landscape,

44
00:02:26.776 --> 00:02:32.034
creating and storing all of that data is exorbitantly expensive.

45
00:02:32.034 --> 00:02:35.075
And it's being created at a faster rate than the

46
00:02:35.075 --> 00:02:38.292
reduction in price for storage is going down.

47
00:02:38.292 --> 00:02:41.275
So essentially this means that you're going to have a very expensive

48
00:02:41.275 --> 00:02:44.810
situation on your hands if you don't start thinking about how to throw

49
00:02:44.810 --> 00:02:48.533
away worthless data or process it and get the relevant components out on

50
00:02:48.533 --> 00:02:50.956
those devices as it's being generated.

51
00:02:50.956 --> 00:02:54.915
Now finally, we might also use edge devices because of regulation.

52
00:02:54.915 --> 00:02:59.123
There are frequently becoming more regulations surrounding the Internet of

53
00:02:59.123 --> 00:03:03.314
Things and restrictions on moving and storing data already exist,

54
00:03:03.314 --> 00:03:06.856
thinking of things like GDPR and other requirements along those lines.

55
00:03:06.856 --> 00:03:09.923
And so you're going to need some flexibility when it comes to

56
00:03:09.923 --> 00:03:13.780
how you interact and deal with IoT data.

57
00:03:13.780 --> 00:03:15.939
So now hopefully you're convinced that edge devices and

58
00:03:15.939 --> 00:03:18.695
AWS IoT Greengrass are a good way to go.

59
00:03:18.695 --> 00:03:20.099
What's the next step here?

60
00:03:20.099 --> 00:03:23.393
Well that's the AWS IoT Greengrass Core.

61
00:03:23.393 --> 00:03:26.916
Now this is the actual software that runs on Linux systems.

62
00:03:26.916 --> 00:03:30.383
And it'll take at least 128 MB of memory,

63
00:03:30.383 --> 00:03:34.877
as well as a 1 GHz processor or better.

64
00:03:34.877 --> 00:03:37.798
So what exactly does the AWS IoT Greengrass Core

65
00:03:37.798 --> 00:03:43.000
offer to people who are using it? Well let's take a look in the next videos.

