WEBVTT
1
00:00:01.111 --> 00:00:05.066
So to start looking at device software, let's look at Amazon FreeRTOS.

2
00:00:05.066 --> 00:00:10.251
Amazon FreeRTOS is an operating system for microcontrollers that makes small,

3
00:00:10.251 --> 00:00:13.102
low-power edge devices easy to program, deploy,

4
00:00:13.102 --> 00:00:15.952
secure, connect, and manage.

5
00:00:15.952 --> 00:00:18.360
Now this comes directly from Amazon's own documentation.

6
00:00:18.360 --> 00:00:22.889
But what's so special about microcontrollers that makes us need an

7
00:00:22.889 --> 00:00:25.984
entirely separate operating system for them?

8
00:00:25.984 --> 00:00:27.312
Well, before we talk about that specifically,

9
00:00:27.312 --> 00:00:31.660
let's take a look at what's actually going on with microcontrollers generally.

10
00:00:31.660 --> 00:00:36.173
Now in 2018 there were 23 billion IoT devices in operation,

11
00:00:36.173 --> 00:00:42.044
and also in 2018, there were 30.5 billion microcontrollers sold.

12
00:00:42.044 --> 00:00:49.111
Over in 2022, there are forecasted to be 43.7 billion microcontrollers sold,

13
00:00:49.111 --> 00:00:55.988
and in 2025, there are expected to be 75 billion IoT devices in operation.

14
00:00:55.988 --> 00:00:59.282
So these microcontrollers are growing along exponential lines in the

15
00:00:59.282 --> 00:01:02.624
same way that IoT itself is growing exponentially.

16
00:01:02.624 --> 00:01:06.094
Now what are some of the challenges you face when you're using

17
00:01:06.094 --> 00:01:08.339
these microcontrollers that makes them have special requirements

18
00:01:08.339 --> 00:01:11.191
for the operating systems that they use?

19
00:01:11.191 --> 00:01:15.449
Well one of the first ones is that there's a limited amount of storage space.

20
00:01:15.449 --> 00:01:19.323
Now this means that there's smaller amounts of actual capacity on the

21
00:01:19.323 --> 00:01:23.111
microcontrollers to store things like files or programs that they run.

22
00:01:23.111 --> 00:01:26.106
Now in addition to that, there's a smaller amount of memory,

23
00:01:26.106 --> 00:01:29.633
not just the hard drive space you might think of on your own machine,

24
00:01:29.633 --> 00:01:32.725
but also the RAM that it's actually going to use when

25
00:01:32.725 --> 00:01:34.060
it's running different programs.

26
00:01:34.060 --> 00:01:36.761
So it doesn't have as much of that available.

27
00:01:36.761 --> 00:01:37.308
And finally,

28
00:01:37.308 --> 00:01:40.943
there's also a limited functionality and it can be hard to program

29
00:01:40.943 --> 00:01:44.245
effectively with the restraints that are placed by the storage space in

30
00:01:44.245 --> 00:01:46.557
memory because you don't get many of the same tools,

31
00:01:46.557 --> 00:01:47.016
libraries,

32
00:01:47.016 --> 00:01:51.555
and other things that you might get in other operating system environments.

33
00:01:51.555 --> 00:01:55.581
So what's the relationship between Amazon FreeRTOS and microcontrollers?

34
00:01:55.581 --> 00:01:57.940
Well, before FreeRTOS was acquired by Amazon,

35
00:01:57.940 --> 00:02:02.232
FreeRTOS was the leading Real-Time Operating System,

36
00:02:02.232 --> 00:02:04.325
RTOS, for microcontrollers.

37
00:02:04.325 --> 00:02:08.177
It was used when you needed to put an operating system on a tiny

38
00:02:08.177 --> 00:02:10.958
device that couldn't fit the full Android,

39
00:02:10.958 --> 00:02:13.389
Linux or Windows operating system.

40
00:02:13.389 --> 00:02:16.373
And this meant that it was useful when you had devices that had

41
00:02:16.373 --> 00:02:20.865
between 10 kB and 100 kB of data memory and potentially between

42
00:02:20.865 --> 00:02:25.019
100 kB and 0.5 MB of storage.

43
00:02:25.019 --> 00:02:26.844
Now it not only fit these needs,

44
00:02:26.844 --> 00:02:29.924
but it went head and actually did other things too.

45
00:02:29.924 --> 00:02:35.847
It created an entire ecosystem of the FreeRTOS community that had support,

46
00:02:35.847 --> 00:02:36.458
libraries,

47
00:02:36.458 --> 00:02:39.568
and carefully-managed intellectual property and licensing

48
00:02:39.568 --> 00:02:42.968
so that many different organizations and companies were

49
00:02:42.968 --> 00:02:45.041
able to effectively use this.

50
00:02:45.041 --> 00:02:45.537
Furthermore,

51
00:02:45.537 --> 00:02:48.525
Amazon FreeRTOS also has connectivity libraries that

52
00:02:48.525 --> 00:02:51.704
allows it to use things like Wi-Fi, Ethernet,

53
00:02:51.704 --> 00:02:53.490
and Bluetooth Low Energy.

54
00:02:53.490 --> 00:02:58.355
Additionally, it has added functionality that supports things like MQTT messages,

55
00:02:58.355 --> 00:03:00.826
adds additional security features,

56
00:03:00.826 --> 00:03:04.467
and allows for updates of software on Amazon FreeRTOS devices,

57
00:03:04.467 --> 00:03:08.798
as well as effectively integrating with other local devices.

58
00:03:08.798 --> 00:03:11.434
Now let's go ahead and visualize Amazon FreeRTOS and how it

59
00:03:11.434 --> 00:03:14.326
works inside of a real world scenario.

60
00:03:14.326 --> 00:03:19.582
Well, we might start with a microcontroller that has Amazon FreeRTOS installed.

61
00:03:19.582 --> 00:03:21.935
Now it's going to be able to take advantage of some libraries,

62
00:03:21.935 --> 00:03:25.664
like connectivity libraries, for Bluetooth Low Energy or Wi-Fi,

63
00:03:25.664 --> 00:03:27.791
and that might allow it to connect to something like

64
00:03:27.791 --> 00:03:30.112
a router using the Wi-Fi library.

65
00:03:30.112 --> 00:03:33.768
You could also take advantage of other libraries on the Amazon FreeRTOS device,

66
00:03:33.768 --> 00:03:35.642
like the Device Defender library,

67
00:03:35.642 --> 00:03:39.573
which could ship bits of information over to the AWS cloud.

68
00:03:39.573 --> 00:03:42.439
Now that might actually integrate with the Device Defender

69
00:03:42.439 --> 00:03:45.590
in the AWS cloud and allow you to monitor your

70
00:03:45.590 --> 00:03:48.050
microcontroller devices more effectively.

71
00:03:48.050 --> 00:03:50.540
But there's lots of other things in here too.

72
00:03:50.540 --> 00:03:53.046
There're libraries for interacting with the shadows of devices,

73
00:03:53.046 --> 00:03:55.733
which I'll talk more about in later sections,

74
00:03:55.733 --> 00:03:58.163
but that effectively allows you to send updates about the state

75
00:03:58.163 --> 00:04:02.003
of a device into the AWS cloud and then retrieve those states

76
00:04:02.003 --> 00:04:03.856
later on and update them further.

77
00:04:03.856 --> 00:04:07.427
Now you can also use MQTT libraries and connectivity

78
00:04:07.427 --> 00:04:10.352
libraries to send updates over to the AWS cloud and interact

79
00:04:10.352 --> 00:04:12.602
with something like the Message Broker,

80
00:04:12.602 --> 00:04:15.254
or even do things like over-the-air updates,

81
00:04:15.254 --> 00:04:19.349
which would allow you to interact with an AWS service to update the

82
00:04:19.349 --> 00:04:23.305
software on the microcontroller with Amazon FreeRTOS.

83
00:04:23.305 --> 00:04:25.863
Now in addition to just these few libraries that are included,

84
00:04:25.863 --> 00:04:28.279
there's also other libraries that allow you to do

85
00:04:28.279 --> 00:04:30.723
other things with Amazon FreeRTOS.

86
00:04:30.723 --> 00:04:32.882
So with all of this functionality and the integrations

87
00:04:32.882 --> 00:04:36.065
that you can make with the AWS cloud,

88
00:04:36.065 --> 00:04:39.524
what are some of the benefits of Amazon FreeRTOS?

89
00:04:39.524 --> 00:04:41.706
One of the first ones is that it enables connectivity

90
00:04:41.706 --> 00:04:44.668
easily to Amazon Greengrass or the IoT Core.

91
00:04:44.668 --> 00:04:46.744
Now we'll talk more about Greengrass later on,

92
00:04:46.744 --> 00:04:50.815
but the IoT Core is essentially all the functionality inside the

93
00:04:50.815 --> 00:04:54.385
AWS cloud that integrates with IoT devices.

94
00:04:54.385 --> 00:04:58.004
It'll also allow us to do things like increase security from TLS support,

95
00:04:58.004 --> 00:05:00.136
it'll also do things like key management,

96
00:05:00.136 --> 00:05:05.581
so allowing us to create and rotate and effectively store keys in safe ways,

97
00:05:05.581 --> 00:05:07.644
and deal with encryption when we're sending messages

98
00:05:07.644 --> 00:05:10.171
to and from the different areas.

99
00:05:10.171 --> 00:05:15.262
Now also, we're going to be able to add multithreading on these local devices.

100
00:05:15.262 --> 00:05:18.671
Now what this basically means is that we can have some management tasks

101
00:05:18.671 --> 00:05:24.105
that are automated by Amazon FreeRTOS itself to free up developer time so

102
00:05:24.105 --> 00:05:29.035
that they can focus on the actual important functionality that they're

103
00:05:29.035 --> 00:05:32.137
writing for their applications and not have to deal with many of these

104
00:05:32.137 --> 00:05:34.815
overhead management tasks.

105
00:05:34.815 --> 00:05:42.000
So hopefully this gives you a high level understanding of Amazon FreeRTOS and some of the features and benefits that it offers.

