1
00:00:00,992 --> 00:00:04,158
So we're able to deal with a lot of information when we're working with IoT,

2
00:00:04,158 --> 00:00:06,738
but how do we take a look at a lot of that data and actually do

3
00:00:06,738 --> 00:00:09,698
something with it after we've started to collect it?

4
00:00:09,698 --> 00:00:13,006
Well to answer that question, let's take a look at the Rules Engine.

5
00:00:13,006 --> 00:00:16,347
The Rules Engine is a component of AWS IoT that allows

6
00:00:16,347 --> 00:00:20,544
you to filter data from IoT topics, transform the data,

7
00:00:20,544 --> 00:00:24,532
and send it along to other AWS and non-AWS services.

8
00:00:24,532 --> 00:00:26,959
So let's try and visualize the Rules Engine a little bit.

9
00:00:26,959 --> 00:00:29,974
Let's start with a thermometer and let's say this is trying to

10
00:00:29,974 --> 00:00:33,953
publish information to the topic of thermometer/1.

11
00:00:33,953 --> 00:00:36,290
Now let's imagine that every time the temperature is

12
00:00:36,290 --> 00:00:40,019
warmer than 0 degrees Celsius, so above freezing,

13
00:00:40,019 --> 00:00:42,138
we actually don't care too much about the temperature.

14
00:00:42,138 --> 00:00:43,479
So if we have a temperature of 23 degrees Celsius,

15
00:00:43,479 --> 00:00:44,377
it's relatively warm,

16
00:00:44,377 --> 00:00:48,227
and we don't have to worry about things like roads freezing over.

17
00:00:48,227 --> 00:00:50,425
Now let's imagine that we wanted to create something,

18
00:00:50,425 --> 00:00:52,463
in this case an IoT rule,

19
00:00:52,463 --> 00:00:56,993
to actually say when we're finding the temperature below 0,

20
00:00:56,993 --> 00:01:00,009
to get that information so we can act upon it.

21
00:01:00,009 --> 00:01:01,226
So here's how we would do this.

22
00:01:01,226 --> 00:01:04,487
We would create an IoT rule and we'd have a rule query statement,

23
00:01:04,487 --> 00:01:08,305
which essentially is a flavor of SQL that will select information

24
00:01:08,305 --> 00:01:11,255
from the IoT topic that we're interacting with,

25
00:01:11,255 --> 00:01:14,307
and we can also apply conditions to that topic.

26
00:01:14,307 --> 00:01:17,240
In this case, we're going to say where the temperature is less than 0,

27
00:01:17,240 --> 00:01:20,079
so anything underneath the freezing point,

28
00:01:20,079 --> 00:01:22,326
and we want to get all the information that this matches.

29
00:01:22,326 --> 00:01:26,096
So what this will is as we continue to generate information and

30
00:01:26,096 --> 00:01:28,274
maybe the weather starts dropping and dropping,

31
00:01:28,274 --> 00:01:29,786
closer and closer to 0,

32
00:01:29,786 --> 00:01:33,946
until it gets to the winter months and finally becomes underneath 0,

33
00:01:33,946 --> 00:01:37,036
then this means we will start to actually see this data and this

34
00:01:37,036 --> 00:01:40,795
rule will pick up information in this topic.

35
00:01:40,795 --> 00:01:41,596
Now as soon as it does that,

36
00:01:41,596 --> 00:01:44,749
it's going to start selecting this data and then we can act on it.

37
00:01:44,749 --> 00:01:49,027
So what we'll do next is actually set up either one or

38
00:01:49,027 --> 00:01:50,759
more actions to take with this data.

39
00:01:50,759 --> 00:01:52,121
Now we could, for example,

40
00:01:52,121 --> 00:01:54,673
just pass this information along to a database so we had

41
00:01:54,673 --> 00:01:57,306
a record of when things were below 0,

42
00:01:57,306 --> 00:02:00,537
but maybe we wanted to alert different drivers or alert different

43
00:02:00,537 --> 00:02:03,699
vehicles that might be interacting with this temperature.

44
00:02:03,699 --> 00:02:05,491
Now this could help us actually to prevent traffic accidents

45
00:02:05,491 --> 00:02:07,525
or to do something else along those lines.

46
00:02:07,525 --> 00:02:11,331
So this is how the Rules Engine really starts to help us

47
00:02:11,331 --> 00:02:14,427
because it allows us to go in there and whenever we see some

48
00:02:14,427 --> 00:02:16,693
information coming in from an IoT device,

49
00:02:16,693 --> 00:02:18,902
we can take action on that information.

50
00:02:18,902 --> 00:02:22,868
Now these are just two examples of potential actions we could take.

51
00:02:22,868 --> 00:02:24,404
In addition to these two actions,

52
00:02:24,404 --> 00:02:27,030
there's a lot of other actions we can interact with.

53
00:02:27,030 --> 00:02:30,978
There's direct integrations with AWS services that we could use.

54
00:02:30,978 --> 00:02:33,867
There's also direct integrations with non-AWS services.

55
00:02:33,867 --> 00:02:38,809
Integrations with AWS services through existing integrations with AWS services,

56
00:02:38,809 --> 00:02:42,713
so kind of a leapfrog over one service into another one.

57
00:02:42,713 --> 00:02:45,725
And then there's integrations with non-AWS services that we

58
00:02:45,725 --> 00:02:49,047
can use through AWS services as well.

59
00:02:49,047 --> 00:02:52,103
So what are some of the specific integrations that we can use?

60
00:02:52,103 --> 00:02:55,361
Well, one of the first ones is we can send data to a data store,

61
00:02:55,361 --> 00:02:56,805
like Amazon S3 or DynamoDB,

62
00:02:56,805 --> 00:03:00,992
for durable long term storage that we can reference later on.

63
00:03:00,992 --> 00:03:04,822
We can send either files to S3 or entries inside of a DynamoDB table.

64
00:03:04,822 --> 00:03:08,708
We can also send data to Amazon Kinesis.

65
00:03:08,708 --> 00:03:11,520
Now this is going to allow us to actually stream data through

66
00:03:11,520 --> 00:03:15,475
Amazon Kinesis to any destinations we want and also building

67
00:03:15,475 --> 00:03:18,429
custom applications off of Kinesis streams.

68
00:03:18,429 --> 00:03:21,388
We can do things like publishing messages to simple notification

69
00:03:21,388 --> 00:03:24,507
service topics or simple queue service queues.

70
00:03:24,507 --> 00:03:28,433
And we can process those information in fan out scenarios where we

71
00:03:28,433 --> 00:03:31,328
have multiple applications pick them up or we simply queue things up

72
00:03:31,328 --> 00:03:33,197
for some sort of processing down the line.

73
00:03:33,197 --> 00:03:36,369
We can also use Amazon Elasticsearch service to make all the

74
00:03:36,369 --> 00:03:40,469
information that we're processing searchable very easily,

75
00:03:40,469 --> 00:03:43,511
and integrate things with AWS Lambda functions in a way that will allow

76
00:03:43,511 --> 00:03:45,895
us to essentially do anything we want with the data.

77
00:03:45,895 --> 00:03:48,882
Because AWS Lambda allows us to write our own code,

78
00:03:48,882 --> 00:03:53,097
we can basically do anything we can imagine with our own code.

79
00:03:53,097 --> 00:03:55,955
Finally, there's also a built in integration for CloudWatch metrics and alarms,

80
00:03:55,955 --> 00:04:00,087
which will allow us to both aggregate metrics based on the data that's coming

81
00:04:00,087 --> 00:04:03,934
in or trigger alarms if that's the appropriate thing to do.

82
00:04:03,934 --> 00:04:05,662
These are a lot of the direct AWS integrations,

83
00:04:05,662 --> 00:04:07,551
but if you want a full list of integrations,

84
00:04:07,551 --> 00:04:09,550
you can take a look at this link here.

85
00:04:09,550 --> 00:04:12,711
Now in addition to these direct AWS integrations,

86
00:04:12,711 --> 00:04:15,400
we also have other integrations we can use with IoT rules.

87
00:04:15,400 --> 00:04:19,891
One of the first ones is actually a Salesforce IoT input streams.

88
00:04:19,891 --> 00:04:23,930
Now AWS has a strategic partnership with Salesforce that allows them to

89
00:04:23,930 --> 00:04:27,274
work with them and send data directly into Salesforce.

90
00:04:27,274 --> 00:04:31,844
You can also do things like using AWS Lambda to push data to third party APIs.

91
00:04:31,844 --> 00:04:35,771
And this hints at what I was saying before with the flexibility of AWS Lambda,

92
00:04:35,771 --> 00:04:39,229
for you to write your own code and basically do anything you'd like.

93
00:04:39,229 --> 00:04:41,592
In addition to that, you could use Amazon Kinesis Firehose,

94
00:04:41,592 --> 00:04:44,027
which could process data if you needed to,

95
00:04:44,027 --> 00:04:48,022
and then you could send it to any of Kinesis Firehose's destinations.

96
00:04:48,022 --> 00:04:52,281
That could be anything from a storage bucket inside of Amazon S3,

97
00:04:52,281 --> 00:04:56,015
to other locations like Splunk or Elasticsearch.

98
00:04:56,015 --> 00:04:56,343
Again,

99
00:04:56,343 --> 00:04:59,369
either internally inside of AWS services or potentially

100
00:04:59,369 --> 00:05:01,599
externally outside of AWS entirely.

101
00:05:01,599 --> 00:05:02,469
And finally,

102
00:05:02,469 --> 00:05:06,555
you could also do things like loading data into a relational database,

103
00:05:06,555 --> 00:05:09,244
or Amazon Redshift, using S3 or Lambda.

104
00:05:09,244 --> 00:05:11,823
So these other services allowing you a little bit more

105
00:05:11,823 --> 00:05:14,138
flexibility lf where you put that data down the line,

106
00:05:14,138 --> 00:05:17,302
even within the AWS ecosystem.

107
00:05:17,302 --> 00:05:24,000
So hopefully now you feel confident knowing what you could do with the AWS IoT Rules Engine.

