WEBVTT
1
00:00:01.395 --> 00:00:03.371
Now we've already gone ahead and taken a look at

2
00:00:03.371 --> 00:00:06.369
different services that AWS IoT offers.

3
00:00:06.369 --> 00:00:08.126
But now let's compare some of these services to what we

4
00:00:08.126 --> 00:00:11.031
otherwise might have to do on our own if we were managing our

5
00:00:11.031 --> 00:00:14.510
own infrastructure and rolling our own IoT.

6
00:00:14.510 --> 00:00:16.859
Now first off, I want to just repeat that IoT is complex.

7
00:00:16.859 --> 00:00:20.083
There's a lot of different parts that are moving around that

8
00:00:20.083 --> 00:00:24.943
we need to actually have to create a secure and useful IoT

9
00:00:24.943 --> 00:00:27.529
system for our organization.

10
00:00:27.529 --> 00:00:31.011
And AWS is going to allow us to actually simplify a lot of this by taking

11
00:00:31.011 --> 00:00:35.308
some of these responsibilities on themselves and allowing us to leverage

12
00:00:35.308 --> 00:00:38.322
their services without having to do it all ourselves.

13
00:00:38.322 --> 00:00:40.944
Now all these grayed out services are examples of things

14
00:00:40.944 --> 00:00:42.917
that AWS can actually help us with here.

15
00:00:42.917 --> 00:00:47.533
So let's go ahead and take a look at how AWS does this.

16
00:00:47.533 --> 00:00:49.924
One of the first ways that it does this is by

17
00:00:49.924 --> 00:00:52.908
providing us a serverless IoT platform.

18
00:00:52.908 --> 00:00:53.939
So what is serverless,

19
00:00:53.939 --> 00:00:57.344
just really quickly so we understand what we're talking about here?

20
00:00:57.344 --> 00:01:01.952
Well, something that is serverless is having infrastructure managed for you.

21
00:01:01.952 --> 00:01:05.385
You can also have infrastructure that scales with the requirements that you

22
00:01:05.385 --> 00:01:07.967
have and you're only going to pay for what you're using.

23
00:01:07.967 --> 00:01:08.368
Additionally,

24
00:01:08.368 --> 00:01:11.805
you can focus on the application code and developing new products

25
00:01:11.805 --> 00:01:15.936
rather than having to manage your own infrastructure.

26
00:01:15.936 --> 00:01:19.324
Also the code that you're writing can be triggered by different events,

27
00:01:19.324 --> 00:01:21.237
and this just prevents the code that you write from

28
00:01:21.237 --> 00:01:23.425
just running idly all the time.

29
00:01:23.425 --> 00:01:23.699
Instead,

30
00:01:23.699 --> 00:01:27.016
you're just paying for the code that's actually running in the

31
00:01:27.016 --> 00:01:29.852
given moment when it's triggered by an event.

32
00:01:29.852 --> 00:01:31.858
So what are some examples of not serverless things?

33
00:01:31.858 --> 00:01:34.452
Well this could be anything from having to manage your

34
00:01:34.452 --> 00:01:37.074
own hardware or operating systems,

35
00:01:37.074 --> 00:01:39.889
or maybe you have to over-provision capacity to

36
00:01:39.889 --> 00:01:42.358
make sure that you don't run out.

37
00:01:42.358 --> 00:01:42.532
Further,

38
00:01:42.532 --> 00:01:45.240
you might have to spend some time focused on managing infrastructure

39
00:01:45.240 --> 00:01:48.121
rather than actually writing application code.

40
00:01:48.121 --> 00:01:51.877
Or maybe you have applications that are always running and waiting to

41
00:01:51.877 --> 00:01:54.755
be used and you're getting some waste from that.

42
00:01:54.755 --> 00:01:58.544
Well, these are examples of serverless versus not serverless computing.

43
00:01:58.544 --> 00:02:00.617
When we're actually trying to use AWS IoT,

44
00:02:00.617 --> 00:02:03.274
we're taking advantage of many of the paradigms on the

45
00:02:03.274 --> 00:02:05.805
left side with serverless applications.

46
00:02:05.805 --> 00:02:09.410
But why is serverless so important for IoT applications?

47
00:02:09.410 --> 00:02:10.900
Well let's take a look at this.

48
00:02:10.900 --> 00:02:15.840
One of the first reasons is that there's been a rapid expansion of IoT.

49
00:02:15.840 --> 00:02:20.796
There are expected to be about 75 billion IoT devices by 2025.

50
00:02:20.796 --> 00:02:22.971
This means that you're going to have a lot of important

51
00:02:22.971 --> 00:02:25.728
work to do on trying to keep your applications able to

52
00:02:25.728 --> 00:02:28.128
scale with this amount of expansion.

53
00:02:28.128 --> 00:02:28.518
Additionally,

54
00:02:28.518 --> 00:02:33.007
there's a lot of quick iteration that's expected within IoT and IoT development.

55
00:02:33.007 --> 00:02:37.619
Now it's harder to do that if you have to manage your own infrastructure.

56
00:02:37.619 --> 00:02:38.109
And in fact,

57
00:02:38.109 --> 00:02:40.411
having that infrastructure managed for you is going to allow

58
00:02:40.411 --> 00:02:43.439
you to develop more quickly on top of that.

59
00:02:43.439 --> 00:02:43.669
Additionally,

60
00:02:43.669 --> 00:02:47.490
you're also going to want to reduce the overhead that you're using when

61
00:02:47.490 --> 00:02:51.562
you're developing these applications and rapidly scaling to try and meet the

62
00:02:51.562 --> 00:02:53.872
demand of whatever IoT devices you're working with.

63
00:02:53.872 --> 00:02:57.733
This is going to allow you to actually save money if you're only paying what you

64
00:02:57.733 --> 00:03:02.224
need and not have to spend tons and tons of money provisioning your own hardware

65
00:03:02.224 --> 00:03:05.599
or your own servers or things along those lines.

66
00:03:05.599 --> 00:03:07.722
So outside of being serverless,

67
00:03:07.722 --> 00:03:12.273
AWS IoT also offers other services related to security.

68
00:03:12.273 --> 00:03:15.736
Now we mentioned a few of these earlier relating to authentication,

69
00:03:15.736 --> 00:03:17.671
to permissions, to managing certificates,

70
00:03:17.671 --> 00:03:19.176
and to monitoring and logging.

71
00:03:19.176 --> 00:03:21.715
But I just wanted to point out that trying to do all of

72
00:03:21.715 --> 00:03:24.221
these on your own in your own environments,

73
00:03:24.221 --> 00:03:28.527
on-premises or in other locations, would become a significant burden.

74
00:03:28.527 --> 00:03:29.036
In AWS,

75
00:03:29.036 --> 00:03:32.156
you get this all out of the box and integrated directly

76
00:03:32.156 --> 00:03:34.579
and easily with your IoT applications.

77
00:03:34.579 --> 00:03:38.478
Now kind of because of this and because of other services,

78
00:03:38.478 --> 00:03:41.847
AWS also allows you to have some resilience in your

79
00:03:41.847 --> 00:03:44.718
applications and integrate them with other things.

80
00:03:44.718 --> 00:03:49.440
Now in relation to resilience, the hardware management that AWS offers,

81
00:03:49.440 --> 00:03:51.706
similar to the serverlessness,

82
00:03:51.706 --> 00:03:54.553
essentially means that you 1) don't need to pay for hardware,

83
00:03:54.553 --> 00:03:59.883
and 2) don't have to fix it yourself if and when it does break.

84
00:03:59.883 --> 00:04:02.142
So in the case of disaster or catastrophe,

85
00:04:02.142 --> 00:04:04.593
rather than having to deal with that all on your own,

86
00:04:04.593 --> 00:04:08.777
you have AWS there to help you repair things that go wrong.

87
00:04:08.777 --> 00:04:09.227
Now don't get me wrong,

88
00:04:09.227 --> 00:04:10.948
you still have to make sure that you're dealing with

89
00:04:10.948 --> 00:04:15.663
bugs in your own applications, but the underlying layers of the hardware layer,

90
00:04:15.663 --> 00:04:19.211
for example, are handled for you by AWS effectively,

91
00:04:19.211 --> 00:04:22.171
and it gives you options to do things like distribute your

92
00:04:22.171 --> 00:04:26.185
applications across AWS regions or availability zones so that you

93
00:04:26.185 --> 00:04:30.169
don't have to worry about one particular data center going down and

94
00:04:30.169 --> 00:04:32.302
ruining everything you're doing.

95
00:04:32.302 --> 00:04:34.492
Now in addition to this all being managed for you,

96
00:04:34.492 --> 00:04:37.388
there are lots of other AWS services.

97
00:04:37.388 --> 00:04:40.727
You can use these services to do things like cloud backups,

98
00:04:40.727 --> 00:04:45.060
stream data processing, and many other kinds of workloads.

99
00:04:45.060 --> 00:04:46.944
And these are going to allow you to not only be flexible

100
00:04:46.944 --> 00:04:49.063
with what you want to build on AWS,

101
00:04:49.063 --> 00:04:53.050
but also just do it more quickly and effectively by

102
00:04:53.050 --> 00:04:54.608
leveraging these integrations.

103
00:04:54.608 --> 00:04:55.044
Now finally,

104
00:04:55.044 --> 00:04:57.873
I want to point out that all of these AWS services are

105
00:04:57.873 --> 00:05:01.142
usually going to scale up with your needs.

106
00:05:01.142 --> 00:05:02.060
Now because of this,

107
00:05:02.060 --> 00:05:05.051
those serverless services are going to not need to be provisioned.

108
00:05:05.051 --> 00:05:08.285
You'll just use what you need and be able to do that going forward

109
00:05:08.285 --> 00:05:11.787
when you're writing your AWS IoT applications.

110
00:05:11.787 --> 00:05:16.842
So let's really quickly recap everything we've covered inside of this module.

111
00:05:16.842 --> 00:05:18.788
Now at the very beginning, we looked at what is IoT?

112
00:05:18.788 --> 00:05:22.411
We took a look at some IoT basics and terminology.

113
00:05:22.411 --> 00:05:26.096
We also looked at purposes of IoT and how we can leverage the

114
00:05:26.096 --> 00:05:29.212
Internet of Things effectively in our organizations.

115
00:05:29.212 --> 00:05:31.650
We also looked at risks and responsibilities that we had when

116
00:05:31.650 --> 00:05:34.926
working with IoT to make sure that we're not jumping into it

117
00:05:34.926 --> 00:05:36.656
without knowing what we're in for.

118
00:05:36.656 --> 00:05:41.977
Another portion that we talked about is how AWS fit in with our IoT needs,

119
00:05:41.977 --> 00:05:45.079
specifically how it could do things for us when we needed to

120
00:05:45.079 --> 00:05:47.241
run device software on our IoT devices.

121
00:05:47.241 --> 00:05:51.002
How we could use management services to do things like authentication,

122
00:05:51.002 --> 00:05:55.528
certificate management, and managing devices and things themselves.

123
00:05:55.528 --> 00:05:58.812
And also how we could analyze and enrich some of the data that we

124
00:05:58.812 --> 00:06:02.370
might have coming into IoT using some AWS services.

125
00:06:02.370 --> 00:06:05.779
Now we'll dive into those specific areas more in future modules,

126
00:06:05.779 --> 00:06:09.981
but we just took a quick highlight of them in this module.

127
00:06:09.981 --> 00:06:14.951
We also took a look and compared AWS IoT to self-managed IoT.

128
00:06:14.951 --> 00:06:19.177
And we looked at how AWS IoT is serverless and how this effectively helps us

129
00:06:19.177 --> 00:06:22.642
scale up and down and develop applications more rapidly.

130
00:06:22.642 --> 00:06:27.537
We looked at security and resilience in AWS IoT and how many of the

131
00:06:27.537 --> 00:06:30.978
services that AWS IoT provides are going to leverage that sense of

132
00:06:30.978 --> 00:06:34.482
security that AWS builds into their entire platform.

133
00:06:34.482 --> 00:06:34.753
Finally,

134
00:06:34.753 --> 00:06:37.538
we looked briefly at some integrations and benefits of

135
00:06:37.538 --> 00:06:42.205
why integrations are important for using AWS IoT versus

136
00:06:42.205 --> 00:06:45.031
managing our own IoT platform.

137
00:06:45.031 --> 00:06:47.396
So hopefully this gives you a good starting point to look

138
00:06:47.396 --> 00:06:53.000
at AWS IoT services in more detail. I look forward to seeing you in the next module.

