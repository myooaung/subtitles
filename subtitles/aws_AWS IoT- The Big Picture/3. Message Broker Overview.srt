1
00:00:01,685 --> 00:00:04,409
Let's take a look at the Message Broker.

2
00:00:04,409 --> 00:00:08,752
The AWS IoT Message Broker is a publish/subscribe broker service that enables

3
00:00:08,752 --> 00:00:13,621
the sending and receiving of messages to and from AWS IoT.

4
00:00:13,621 --> 00:00:16,465
Let's go ahead and visualize the IoT Message Broker now.

5
00:00:16,465 --> 00:00:18,529
We'll start with some IoT things,

6
00:00:18,529 --> 00:00:23,717
in this case just two devices that we want to connect to the Message Broker.

7
00:00:23,717 --> 00:00:24,582
Once we're going to do that,

8
00:00:24,582 --> 00:00:27,947
we'll need to have a Message Broker topic inside of there.

9
00:00:27,947 --> 00:00:28,317
In this case,

10
00:00:28,317 --> 00:00:32,749
our light bulb is going to establish an MQTT connection to our topic.

11
00:00:32,749 --> 00:00:34,323
Now this will create something called the persistent session.

12
00:00:34,323 --> 00:00:36,851
I'll talk about that more in just a moment.

13
00:00:36,851 --> 00:00:39,253
But in addition to being able to connect with MQTT,

14
00:00:39,253 --> 00:00:41,558
we could also connect with HTTP,

15
00:00:41,558 --> 00:00:46,375
and we could also connect with MQTT over the WebSocket protocol.

16
00:00:46,375 --> 00:00:48,357
Now each of these different methods would allow us

17
00:00:48,357 --> 00:00:50,098
to connect to the Message Broker.

18
00:00:50,098 --> 00:00:53,240
Though technically with HTTP, we can only publish to the topic,

19
00:00:53,240 --> 00:00:55,451
we can't actually subscribe from it.

20
00:00:55,451 --> 00:00:57,829
So after we've established some kind of connection

21
00:00:57,829 --> 00:00:59,664
and we want to send information in,

22
00:00:59,664 --> 00:01:04,483
we could send a message through the connection we've created to the topic.

23
00:01:04,483 --> 00:01:05,751
Now, when we do this,

24
00:01:05,751 --> 00:01:10,006
we'll likely have some sort of subscribe to this topic that

25
00:01:10,006 --> 00:01:11,682
we'll want to receive this information.

26
00:01:11,682 --> 00:01:15,477
In this case, we have an IoT thing which is an application, not a device.

27
00:01:15,477 --> 00:01:18,361
As I mentioned previously, IoT things can be devices,

28
00:01:18,361 --> 00:01:22,030
but they can also be applications that want to interact with the

29
00:01:22,030 --> 00:01:24,540
Message Broker and other parts of the IoT Core.

30
00:01:24,540 --> 00:01:25,939
In this case,

31
00:01:25,939 --> 00:01:29,968
this application has created an MQTT persistent session that is going to

32
00:01:29,968 --> 00:01:34,183
receive the messages from that topic and then process them inside of the

33
00:01:34,183 --> 00:01:37,253
application and do something with them later on.

34
00:01:37,253 --> 00:01:39,509
So it can go ahead and get these messages,

35
00:01:39,509 --> 00:01:41,155
but it will be relying on some sort of connection to

36
00:01:41,155 --> 00:01:45,780
the Message Broker to do this, usually over Wi-Fi or something else.

37
00:01:45,780 --> 00:01:48,865
Now this would continue to work effectively if we sent in other

38
00:01:48,865 --> 00:01:52,160
messages over any sort of protocol into a topic that was subscribed

39
00:01:52,160 --> 00:01:55,729
to by the IoT thing that is the application.

40
00:01:55,729 --> 00:01:57,832
It would continue to receive the messages from those

41
00:01:57,832 --> 00:01:59,626
topics that it's subscribed to.

42
00:01:59,626 --> 00:02:03,489
But what were to happen if we actually had a connection go down and it's

43
00:02:03,489 --> 00:02:06,336
unable temporarily to connect to the Message Broker?

44
00:02:06,336 --> 00:02:11,332
Well in this case, we fortunately have the MQTT persistent session.

45
00:02:11,332 --> 00:02:14,547
Now the persistent session will store some metadata about which

46
00:02:14,547 --> 00:02:17,939
subscriptions it had before it disconnected.

47
00:02:17,939 --> 00:02:19,544
So because we have the session,

48
00:02:19,544 --> 00:02:24,685
we know that two of these topics were subscribed to by the IoT application.

49
00:02:24,685 --> 00:02:27,640
Now this means that when additional messages start to come through,

50
00:02:27,640 --> 00:02:29,018
they'll start to pile up,

51
00:02:29,018 --> 00:02:32,756
up to about an hour before that persistent session is finally

52
00:02:32,756 --> 00:02:35,446
removed and those messages go to the trash.

53
00:02:35,446 --> 00:02:37,688
Now in this case, all of those messages,

54
00:02:37,688 --> 00:02:39,253
once the connection is reestablished,

55
00:02:39,253 --> 00:02:43,748
will be sent over to that IoT application because of that

56
00:02:43,748 --> 00:02:47,152
MQTT persistent session and the subscriptions that it had

57
00:02:47,152 --> 00:02:48,233
inside of the Message Broker.

58
00:02:48,233 --> 00:02:52,401
So this is one massive benefit that the Message Broker gives us.

59
00:02:52,401 --> 00:02:56,268
It's going to allow us to continue to tolerate failed connections and

60
00:02:56,268 --> 00:02:59,208
intermittent connections and it's going to be able to use those

61
00:02:59,208 --> 00:03:02,908
persistent sessions to eventually deliver messages that maybe were

62
00:03:02,908 --> 00:03:05,522
delayed because of disconnections.

63
00:03:05,522 --> 00:03:08,637
So let's really quickly recap what we can do with some

64
00:03:08,637 --> 00:03:10,286
of these Message Broker protocols.

65
00:03:10,286 --> 00:03:11,225
Let's start with MQTT,

66
00:03:11,225 --> 00:03:16,733
and we can use this to publish and subscribe to AWS IoT Message Broker topics.

67
00:03:16,733 --> 00:03:22,551
Now we also have HTTP, which we'll only be able to use to publish to a topic,

68
00:03:22,551 --> 00:03:26,860
and finally we have MQTT over the WebSocket protocol.

69
00:03:26,860 --> 00:03:31,187
Now this will allow us to do both publishing and subscribing to topics.

70
00:03:31,187 --> 00:03:33,188
So let's take a look at some examples of topics,

71
00:03:33,188 --> 00:03:36,023
so we have a clearer understanding of how they work.

72
00:03:36,023 --> 00:03:38,615
We'll start with two light bulbs and we'll say that the

73
00:03:38,615 --> 00:03:42,016
first light bulb has a topic called bulb/1.

74
00:03:42,016 --> 00:03:45,435
The second light bulb has a topic of bulb/2.

75
00:03:45,435 --> 00:03:48,052
Now if we have an application that wants to get information

76
00:03:48,052 --> 00:03:51,174
from both of these two different topics and receive any

77
00:03:51,174 --> 00:03:56,558
updates that are made to these topics, then we could subscribe it to bulb/#.

78
00:03:56,558 --> 00:03:59,200
Now technically we could instead subscribe this to

79
00:03:59,200 --> 00:04:01,598
bulb/1 and subscribe it to bulb/2,

80
00:04:01,598 --> 00:04:05,794
but because we used this wildcard character of #,

81
00:04:05,794 --> 00:04:09,326
this will actually allow us to subscribe it simultaneously

82
00:04:09,326 --> 00:04:12,231
to any other bulbs that get added later,

83
00:04:12,231 --> 00:04:16,343
like bulb/3 or maybe we just have a completely different kind of bulb,

84
00:04:16,343 --> 00:04:17,328
like bulb/new.

85
00:04:17,328 --> 00:04:22,983
Now any of those topics will be subscribed to when we use this format.

86
00:04:22,983 --> 00:04:26,448
So now this application could receive any updates from these bulbs

87
00:04:26,448 --> 00:04:29,783
and also interact with a mobile application to support changing

88
00:04:29,783 --> 00:04:31,818
and working with those bulbs as well.

89
00:04:31,818 --> 00:04:36,075
But we'll dive into that later when we're talking about device shadows.

90
00:04:36,075 --> 00:04:38,336
So let's take a look at another example.

91
00:04:38,336 --> 00:04:40,012
Let's pretend we have a series of factories,

92
00:04:40,012 --> 00:04:43,345
and in factory 1 we have either one or multiple machine arms

93
00:04:43,345 --> 00:04:47,033
that are doing some work for us and publishing data to the

94
00:04:47,033 --> 00:04:50,418
topic of data/factory1/arms.

95
00:04:50,418 --> 00:04:52,258
Now in the other factory we have,

96
00:04:52,258 --> 00:04:54,177
we're publishing information to data/factory2/arms.

97
00:04:54,177 --> 00:04:58,717
So what if we wanted to subscribe to all the arms in these different factories,

98
00:04:58,717 --> 00:05:02,572
but we didn't want to subscribe to all the other devices?

99
00:05:02,572 --> 00:05:05,397
Maybe we had other levers and actuators inside of our

100
00:05:05,397 --> 00:05:07,805
factory and we only wanted to get these arms.

101
00:05:07,805 --> 00:05:10,647
Now because we situated our topics in a way where we have

102
00:05:10,647 --> 00:05:13,665
the factory before the actual device type,

103
00:05:13,665 --> 00:05:17,042
if we replaced factory 1 or factor 2 with the pound symbol,

104
00:05:17,042 --> 00:05:21,545
we actually wouldn't be able to delineate between the arms and other devices.

105
00:05:21,545 --> 00:05:24,101
So here's what we would use instead.

106
00:05:24,101 --> 00:05:27,773
We'd match just the single component inside of the topic,

107
00:05:27,773 --> 00:05:31,474
so we'd have data/, and then the plus symbol,

108
00:05:31,474 --> 00:05:33,053
another slash, and arms.

109
00:05:33,053 --> 00:05:35,605
Now this would match us anything in between those slashes.

110
00:05:35,605 --> 00:05:40,577
So it would match the data/factory1 and the data/factory2,

111
00:05:40,577 --> 00:05:42,701
both of those ending with arms.

112
00:05:42,701 --> 00:05:45,429
Now this would allow us to then integrate with some sort of application that

113
00:05:45,429 --> 00:05:47,969
subscribes to this particular topic with the wildcard,

114
00:05:47,969 --> 00:05:51,104
and then it would be able to send that information on to a

115
00:05:51,104 --> 00:05:54,105
database or do whatever else it needs to.

116
00:05:54,105 --> 00:05:55,866
So hopefully this gives you a good start on what

117
00:05:55,866 --> 00:06:01,000
topics are and how we can use them, and we'll take a closer look at them in future videos.

