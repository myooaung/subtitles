WEBVTT
1
00:00:00.840 --> 00:00:04.850
So we have seen that Git is a map where the keys are

2
00:00:04.850 --> 00:00:08.540
hashes, and the values are pieces of content.

3
00:00:08.540 --> 00:00:14.540
But I also said that Git is not just a map, it's a persistent map.

4
00:00:14.540 --> 00:00:17.240
Where does persistent come from?

5
00:00:17.240 --> 00:00:22.190
Let's go back to the git hash‑object command that we used a few minutes

6
00:00:22.190 --> 00:00:26.250
ago. If I want the Apple Pie content to be persistent,

7
00:00:26.250 --> 00:00:32.540
I can add the ‑w argument to this command. ‑w stands for write.

8
00:00:32.540 --> 00:00:36.540
So now, besides generating the hash, Git will also save this

9
00:00:36.540 --> 00:00:39.710
piece of content in its repository. However,

10
00:00:39.710 --> 00:00:45.300
now we don't have a repository yet, so if I try this command straight away,

11
00:00:45.300 --> 00:00:49.560
Git complaints. We're not in a Git project. We don't have a

12
00:00:49.560 --> 00:00:53.040
repository. I don't know where to save the content.

13
00:00:53.040 --> 00:00:56.670
So, let's turn this directory into a Git project.

14
00:00:56.670 --> 00:01:00.670
There is a command for that, and you probably used it already.

15
00:01:00.670 --> 00:01:08.910
It's a high‑level persistence command, git init. There. A brief aside here,

16
00:01:08.910 --> 00:01:12.280
depending on your Git version and configuration, at this point,

17
00:01:12.280 --> 00:01:17.510
you might get a message like this that says that I created an initial branch

18
00:01:17.510 --> 00:01:23.010
called the master, and you can change that name, if you wish. These days, Git,

19
00:01:23.010 --> 00:01:27.760
like other technologies, is revisiting its vocabulary to remove divisive

20
00:01:27.760 --> 00:01:32.580
language. So, it displays this message in case you want to rename the branch

21
00:01:32.580 --> 00:01:35.140
from master to something else.

22
00:01:35.140 --> 00:01:39.750
And, in fact, I could rename it using this command that Git suggested.

23
00:01:39.750 --> 00:01:42.440
I'll rename it to main.

24
00:01:42.440 --> 00:01:45.370
I think that besides being more inclusive,

25
00:01:45.370 --> 00:01:49.930
it's just a more accurate name for reasons that will be clear later

26
00:01:49.930 --> 00:01:54.590
when we talk about branches. We'll get to that in the next module. And

27
00:01:54.590 --> 00:01:58.040
now, our initial branch is called main.

28
00:01:58.040 --> 00:02:01.440
So, we created a new repository, and Git is saying,

29
00:02:01.440 --> 00:02:01.930
look,

30
00:02:01.930 --> 00:02:06.460
the new empty repository is in this directory, .git. That's a

31
00:02:06.460 --> 00:02:10.320
hidden directory. On this operating system, I can visualize

32
00:02:10.320 --> 00:02:14.340
hidden directories with the ‑a switch.

33
00:02:14.340 --> 00:02:19.740
So now Git has the .git directory, a place to save stuff.

34
00:02:19.740 --> 00:02:25.350
And if you run the hash‑object command again with ‑w, we get

35
00:02:25.350 --> 00:02:29.240
the hash, and we also save the content.

36
00:02:29.240 --> 00:02:31.060
Let's see where exactly.

37
00:02:31.060 --> 00:02:34.640
Let's peek inside the .git directory.

38
00:02:34.640 --> 00:02:38.570
There are a few files and folders here, but for now, just

39
00:02:38.570 --> 00:02:41.940
look at this directory here, objects.

40
00:02:41.940 --> 00:02:44.860
This is called the object database.

41
00:02:44.860 --> 00:02:48.100
It's the place where Git saves all these objects like

42
00:02:48.100 --> 00:02:50.440
storing the Apple Pie we just saved.

43
00:02:50.440 --> 00:02:55.710
Let's peek inside. Ignore this too, the info and pack

44
00:02:55.710 --> 00:02:58.340
subdirectories, for now. We'll come to this later.

45
00:02:58.340 --> 00:03:01.240
Instead, look at this subdirectory here.

46
00:03:01.240 --> 00:03:06.350
Its name is 23, and these are the first two hexidecimal digits

47
00:03:06.350 --> 00:03:09.340
of the hash of the content we just saved.

48
00:03:09.340 --> 00:03:14.480
And if we look inside 23, there is a file in here, and the name of

49
00:03:14.480 --> 00:03:18.040
this file is the remaining digits of the hash.

50
00:03:18.040 --> 00:03:22.950
Git uses this scheme to organize content and spread it over multiple

51
00:03:22.950 --> 00:03:27.750
directories. It's just a trick to avoid piling up all the content

52
00:03:27.750 --> 00:03:31.240
into a single huge clutter directory.

53
00:03:31.240 --> 00:03:35.740
Our original storing Apple Pie is inside this file.

54
00:03:35.740 --> 00:03:39.170
This is what Git calls a blob of data.

55
00:03:39.170 --> 00:03:43.230
A blob is a generic piece of content; however, the original

56
00:03:43.230 --> 00:03:47.350
storing has been mangled a bit. Inside the file, Git added a

57
00:03:47.350 --> 00:03:51.970
small header and compressed the content to save space, so we

58
00:03:51.970 --> 00:03:54.640
cannot just open the file and read it.

59
00:03:54.640 --> 00:03:59.140
But we can use another low‑level plumbing command to look at the content.

60
00:03:59.140 --> 00:04:02.240
It's called git cat‑file.

61
00:04:02.240 --> 00:04:02.980
Once again,

62
00:04:02.980 --> 00:04:07.470
don't worry if you don't remember this command. It's rarely used. I'm using it

63
00:04:07.470 --> 00:04:11.640
now just because I want to show you how Git saves content.

64
00:04:11.640 --> 00:04:16.440
Git cat‑file takes the hash of an object and an argument.

65
00:04:16.440 --> 00:04:19.670
If we run it with the ‑t argument,

66
00:04:19.670 --> 00:04:24.020
it stands for type, Git tells us what this piece of content

67
00:04:24.020 --> 00:04:30.110
is. It's a blob. And if we run it again with ‑p for pretty

68
00:04:30.110 --> 00:04:32.990
printing, then Git unzips the object,

69
00:04:32.990 --> 00:04:37.850
removes the header, and it prints out the actual content of the blob.

70
00:04:37.850 --> 00:04:43.240
And here it is, the storing Apple Pie there.

71
00:04:43.240 --> 00:04:47.620
So, so far we have seen that Git can take any piece of content,

72
00:04:47.620 --> 00:04:52.250
generate the key for it, as shown hash, and then persists

73
00:04:52.250 --> 00:04:55.540
the content into the repository as a blob.

74
00:04:55.540 --> 00:05:05.000
A persistent map, this is the very basic of the Git model. Let's build on this and move on to the next layer of the onion.

