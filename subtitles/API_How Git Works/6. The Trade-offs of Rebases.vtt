WEBVTT
1
00:00:00.840 --> 00:00:01.870
Now let's look at rebasing.

2
00:00:01.870 --> 00:00:07.240
A rebased history looks really simple and neat.

3
00:00:07.240 --> 00:00:11.090
There is no reason for commands such as git logs to squash

4
00:00:11.090 --> 00:00:14.450
commits into a single timeline because the commits are

5
00:00:14.450 --> 00:00:16.800
arranged in a single timeline already,

6
00:00:16.800 --> 00:00:21.900
so a project that uses a lot of rebasing generally looks more streamlined

7
00:00:21.900 --> 00:00:25.260
and clean than a project that uses a lot of merging,

8
00:00:25.260 --> 00:00:26.670
history wise.

9
00:00:26.670 --> 00:00:27.500
Essentially,

10
00:00:27.500 --> 00:00:33.510
rebasing helps you refactor your project history so that it always looks nice.

11
00:00:33.510 --> 00:00:36.590
This neatness, however, comes at a cost.

12
00:00:36.590 --> 00:00:40.540
This nicely designed history is not real.

13
00:00:40.540 --> 00:00:45.440
It was forged by a rebasing, which is a destructive operation.

14
00:00:45.440 --> 00:00:48.820
Rebasing creates new commits and leaves behind existing

15
00:00:48.820 --> 00:00:51.400
commits that might get garbage collected.

16
00:00:51.400 --> 00:00:57.610
So a rebased history looks cleaner, but it is a lie, in a way. For example,

17
00:00:57.610 --> 00:01:02.790
in this case, it looks like the orange commits were created first, and

18
00:01:02.790 --> 00:01:06.650
light blue commits were created later on top of them,

19
00:01:06.650 --> 00:01:08.940
but this is not what really happened.

20
00:01:08.940 --> 00:01:13.940
The orange and blue commits were created in parallel and in different branches.

21
00:01:13.940 --> 00:01:19.640
So, in contrast to merges, rebases change the project history.

22
00:01:19.640 --> 00:01:24.180
This might not sound like a problem at all. You might say, who

23
00:01:24.180 --> 00:01:28.050
cares what the history looked like originally? Surely, you

24
00:01:28.050 --> 00:01:30.340
only care about the final result.

25
00:01:30.340 --> 00:01:30.800
Well,

26
00:01:30.800 --> 00:01:34.550
actually there are a few situations when you do care about history.

27
00:01:34.550 --> 00:01:37.980
There are some advanced git commands, for example,

28
00:01:37.980 --> 00:01:42.130
that becomes less useful if you tamper with the product history.

29
00:01:42.130 --> 00:01:43.490
But most importantly,

30
00:01:43.490 --> 00:01:49.240
there is a common scenario when this rewriting of history can become painful.

31
00:01:49.240 --> 00:01:53.400
That scenario has to do with distribution, so I have to ask you to be

32
00:01:53.400 --> 00:01:57.520
patient. I will talk about it in the next module. For now, just to

33
00:01:57.520 --> 00:02:01.280
remember this, rebases make your history cleaner,

34
00:02:01.280 --> 00:02:05.240
but they can also cause unwanted side effects.

35
00:02:05.240 --> 00:02:08.700
If I had to condense the differences between mergers and

36
00:02:08.700 --> 00:02:11.330
rebases in just a single recommendation,

37
00:02:11.330 --> 00:02:17.950
it would be this, when in doubt, just merge. Rebasing is a power tool.

38
00:02:17.950 --> 00:02:19.330
It is quite useful,

39
00:02:19.330 --> 00:02:22.890
but you should only use it if you know what you're doing and you understand

40
00:02:22.890 --> 00:02:27.950
the consequences. And that's it about merging and rebasing for now. I

41
00:02:27.950 --> 00:02:35.000
promise that in the next module I will show you a concrete example of how mindless rebasing can land you in trouble.

