WEBVTT
1
00:00:00.840 --> 00:00:04.310
We have seen that Git is a persistent map,

2
00:00:04.310 --> 00:00:06.560
but you probably don't see it as a map.

3
00:00:06.560 --> 00:00:10.010
You see it as something more than that, something that

4
00:00:10.010 --> 00:00:14.260
tracks your files and your directories, a content tracker.

5
00:00:14.260 --> 00:00:16.140
Let's see what that means.

6
00:00:16.140 --> 00:00:21.430
We need an example project, so I built a very simple one, a cookbook.

7
00:00:21.430 --> 00:00:27.540
In the root of the project there is a file named menu.txt.

8
00:00:27.540 --> 00:00:32.040
This is supposed to be a menu, at list of all the recipes in the cookbook.

9
00:00:32.040 --> 00:00:37.040
Right now it only contains a single recipe, Apple Pie.

10
00:00:37.040 --> 00:00:44.030
Then we have a recipes directory that contains a README that tells you that you

11
00:00:44.030 --> 00:00:48.740
are supposed to add one separate file for each recipe here.

12
00:00:48.740 --> 00:00:53.940
And indeed, we have one file here with the recipe of the apple pie.

13
00:00:53.940 --> 00:00:56.660
This file is supposed to contain the entire recipe.

14
00:00:56.660 --> 00:01:03.240
For now it's just a placeholder, actually, and it contains the string Apple Pie.

15
00:01:03.240 --> 00:01:05.220
I'm using this string a lot here.

16
00:01:05.220 --> 00:01:07.540
I like apple pie.

17
00:01:07.540 --> 00:01:10.440
We'll fill in the real recipe later.

18
00:01:10.440 --> 00:01:16.440
So we have three files, one in the root, and two in the recipes folder.

19
00:01:16.440 --> 00:01:19.500
It's a very simple project, but that's what we want for now.

20
00:01:19.500 --> 00:01:22.660
We want to understand how Git stores these files and folders,

21
00:01:22.660 --> 00:01:25.640
so it's better if we start simple.

22
00:01:25.640 --> 00:01:30.340
Let's make this a Git project with git init.

23
00:01:30.340 --> 00:01:35.040
There, now we have a .git directory here.

24
00:01:35.040 --> 00:01:37.940
And because it's a brand‑new project,

25
00:01:37.940 --> 00:01:44.000
the object database in the objects folder here is empty,

26
00:01:44.000 --> 00:01:46.750
apart from the info and pack subdirectories.

27
00:01:46.750 --> 00:01:49.840
We can ignore those as usual.

28
00:01:49.840 --> 00:01:54.950
Now that we have a project, let's create our first commit for this project.

29
00:01:54.950 --> 00:01:58.820
Let's use the git status command to see the files

30
00:01:58.820 --> 00:02:00.970
and folders in the project root.

31
00:02:00.970 --> 00:02:03.840
You've probably used git status before.

32
00:02:03.840 --> 00:02:06.500
I configured my Git installation to use color,

33
00:02:06.500 --> 00:02:10.320
so we can see that both the menu.txt and the recipes

34
00:02:10.320 --> 00:02:13.480
directories are red because they are untracked.

35
00:02:13.480 --> 00:02:17.740
That is, Git doesn't yet know what to do with them.

36
00:02:17.740 --> 00:02:21.310
You know that to commit a file I have to put it in

37
00:02:21.310 --> 00:02:24.150
the so‑called staging area first.

38
00:02:24.150 --> 00:02:25.880
It's like a launchpad.

39
00:02:25.880 --> 00:02:29.990
Whatever is in the staging area will get into the next commit.

40
00:02:29.990 --> 00:02:35.940
We can add these files to the staging area with the git add command.

41
00:02:35.940 --> 00:02:43.440
Let's add the menu.txt and then the recipes folder and all of its content.

42
00:02:43.440 --> 00:02:45.280
Now the files are green.

43
00:02:45.280 --> 00:02:47.570
It means that they have been staged.

44
00:02:47.570 --> 00:02:49.140
Let's commit them.

45
00:02:49.140 --> 00:02:53.550
I will use the ‑m argument to git commit so that I can

46
00:02:53.550 --> 00:02:57.140
give a commit message right here.

47
00:02:57.140 --> 00:03:03.280
There, now the staging area is clean, and we can use another popular command,

48
00:03:03.280 --> 00:03:07.460
git log, to look at the list of existing commits.

49
00:03:07.460 --> 00:03:12.640
There is only one, and its hash starts with these digits.

50
00:03:12.640 --> 00:03:14.040
Okay, good to know.

51
00:03:14.040 --> 00:03:18.620
So far, this was business as usual for any Git user.

52
00:03:18.620 --> 00:03:20.120
Now let's go deeper.

53
00:03:20.120 --> 00:03:24.890
Let's open the hood and look inside the Git object database.

54
00:03:24.890 --> 00:03:28.930
This is going to be short but intense, so hold on through.

55
00:03:28.930 --> 00:03:33.250
If you look in the .git directory under objects,

56
00:03:33.250 --> 00:03:37.570
you will see that we have a bunch of subdirectories in here now.

57
00:03:37.570 --> 00:03:42.290
One of these is named with the first two digits of the commit,

58
00:03:42.290 --> 00:03:48.040
and here are the remaining digits, so this file must be the commit.

59
00:03:48.040 --> 00:03:50.920
A commit is compressed, just like a blob,

60
00:03:50.920 --> 00:03:54.010
but by now we know how to peek inside compressed files,

61
00:03:54.010 --> 00:03:57.440
so we can use git cat‑file for that.

62
00:03:57.440 --> 00:04:04.280
I will git cat‑file the commit's SHA‑1 with ‑p so that

63
00:04:04.280 --> 00:04:10.040
it prints the content of the commit, and here it is.

64
00:04:10.040 --> 00:04:11.940
So what's a commit?

65
00:04:11.940 --> 00:04:16.410
It's a simple and very short piece of text, nothing else.

66
00:04:16.410 --> 00:04:18.640
It's truly as simple as this.

67
00:04:18.640 --> 00:04:20.740
Git generates this text,

68
00:04:20.740 --> 00:04:25.110
and then it stores it pretty much the same way it stores a blob.

69
00:04:25.110 --> 00:04:28.810
It adds a small letter to this text to say this is a

70
00:04:28.810 --> 00:04:33.820
commit, it generates its hash, it compresses the text,

71
00:04:33.820 --> 00:04:37.430
and it stores the result in a file in the object database.

72
00:04:37.430 --> 00:04:42.050
The commit text contains all the metadata about the commit,

73
00:04:42.050 --> 00:04:46.150
the name of the author, the committer, both are myself,

74
00:04:46.150 --> 00:04:48.970
the date of the commit, and the message.

75
00:04:48.970 --> 00:04:54.440
And then it contains something more, the hash of a tree.

76
00:04:54.440 --> 00:04:55.320
What's a tree?

77
00:04:55.320 --> 00:05:00.160
Well, just like a blob is the content of a file stored in Git,

78
00:05:00.160 --> 00:05:03.940
a tree is a directory stored in Git.

79
00:05:03.940 --> 00:05:07.750
The commit is pointing at the root directory of the project.

80
00:05:07.750 --> 00:05:12.240
That's what this tree is, the root of the project.

81
00:05:12.240 --> 00:05:14.180
If you look in the object database,

82
00:05:14.180 --> 00:05:19.080
you will see a directory named with the first two digits of the tree's hash,

83
00:05:19.080 --> 00:05:25.480
and inside it is the tree, a file named with the remaining digits of the hash,

84
00:05:25.480 --> 00:05:26.400
as usual.

85
00:05:26.400 --> 00:05:28.340
It's just like a commit, see,

86
00:05:28.340 --> 00:05:32.350
a piece of content that is generated by Git and then

87
00:05:32.350 --> 00:05:35.940
hashed and stored in the object database.

88
00:05:35.940 --> 00:05:37.860
So what's inside this tree?

89
00:05:37.860 --> 00:05:39.620
What does it look like?

90
00:05:39.620 --> 00:05:42.230
Let's cat‑file it.

91
00:05:42.230 --> 00:05:48.130
Just like a commit, a tree is a tiny piece of text.

92
00:05:48.130 --> 00:05:49.460
That's all it is.

93
00:05:49.460 --> 00:05:52.980
And it contains a list of the content of the directory,

94
00:05:52.980 --> 00:05:55.270
a list of hashes, actually.

95
00:05:55.270 --> 00:06:01.240
In this case, we have a blob and another tree with their names.

96
00:06:01.240 --> 00:06:04.440
The blob is the menu.txt file that's in the root,

97
00:06:04.440 --> 00:06:10.440
and the tree is the recipes directly that's also in the root.

98
00:06:10.440 --> 00:06:13.020
There is also some additional data for the files' and

99
00:06:13.020 --> 00:06:16.030
directories' access permissions, but otherwise,

100
00:06:16.030 --> 00:06:16.930
that is it.

101
00:06:16.930 --> 00:06:20.840
That's all it takes for Git to store a directory.

102
00:06:20.840 --> 00:06:25.210
Now, if you have a great memory for hexadecimal numbers,

103
00:06:25.210 --> 00:06:30.410
I don't really, then you might find a hash of this blob familiar.

104
00:06:30.410 --> 00:06:35.340
It's the same hash as the Apple Pie string that we've seen earlier.

105
00:06:35.340 --> 00:06:36.830
Let me prove it for you.

106
00:06:36.830 --> 00:06:43.540
I will use cat‑file ‑p as usual, pass it the hash of the blob,

107
00:06:43.540 --> 00:06:45.910
and there it is, the string Apple Pie.

108
00:06:45.910 --> 00:06:49.140
That's what's inside menu.txt.

109
00:06:49.140 --> 00:06:52.710
So to recap, the commit points to a tree,

110
00:06:52.710 --> 00:06:56.430
the root, and this tree points to a blob,

111
00:06:56.430 --> 00:07:00.360
menu.txt, and another tree, recipes.

112
00:07:00.360 --> 00:07:07.140
And the blob is just a piece of content, the string Apple Pie.

113
00:07:07.140 --> 00:07:08.870
Now let's finish the job.

114
00:07:08.870 --> 00:07:12.440
Let's look at this other tree and see what's in there.

115
00:07:12.440 --> 00:07:17.350
Let's use cat‑file again to peek inside the recipes

116
00:07:17.350 --> 00:07:20.840
tree, and there you are, two blobs.

117
00:07:20.840 --> 00:07:27.370
One of these blobs is the README file. I will cat‑file it. Here,

118
00:07:27.370 --> 00:07:33.230
there it is, the content of the README. The other blob, well, this

119
00:07:33.230 --> 00:07:35.000
one looks familiar even to me now,

120
00:07:35.000 --> 00:07:38.060
even if I can't remember numbers, because it's the

121
00:07:38.060 --> 00:07:41.240
same hash as the menu.txt blob.

122
00:07:41.240 --> 00:07:45.990
That's because these two files have exactly the same content, so Git

123
00:07:45.990 --> 00:07:49.360
will not create two separate objects for them.

124
00:07:49.360 --> 00:07:54.040
It will just reuse the existing object that is already in the database.

125
00:07:54.040 --> 00:07:58.110
So to be picky, a blob is not really a file.

126
00:07:58.110 --> 00:08:02.520
A blob is the content of a file. The file name and the file

127
00:08:02.520 --> 00:08:06.200
permissions are not stored in the blob; they are stored in

128
00:08:06.200 --> 00:08:09.240
the tree that points to the blob.

129
00:08:09.240 --> 00:08:12.920
You will see in a few minutes why this is a good thing. For now

130
00:08:12.920 --> 00:08:15.920
let's update our diagram of the object database.

131
00:08:15.920 --> 00:08:20.630
The recipes tree is pointing at the blob with the content of the README

132
00:08:20.630 --> 00:08:24.990
file, and it's also pointing at the blob with the content of

133
00:08:24.990 --> 00:08:30.650
apple_pie.txt, which is the same content as the menu.txt file, so it's

134
00:08:30.650 --> 00:08:35.590
actually the same blob. And there you are, the whole object database, all

135
00:08:35.590 --> 00:08:39.280
of it. One small note about this.

136
00:08:39.280 --> 00:08:43.180
If you try building this exact same project and you use the

137
00:08:43.180 --> 00:08:46.100
exact same commands that I used here,

138
00:08:46.100 --> 00:08:49.060
then you will see that you get the same hashes for

139
00:08:49.060 --> 00:08:51.230
all the trees and all the blobs.

140
00:08:51.230 --> 00:08:51.880
However,

141
00:08:51.880 --> 00:08:55.500
the hash of the commit, that one will be different, because

142
00:08:55.500 --> 00:08:57.640
you have different data in your commit,

143
00:08:57.640 --> 00:09:01.140
a different author, and a different commit date.

144
00:09:01.140 --> 00:09:03.810
The important thing to understand here is that there

145
00:09:03.810 --> 00:09:06.840
is no magic behind SHA‑1 hashes.

146
00:09:06.840 --> 00:09:11.040
If you have the same content I do, then you get the same hash.

147
00:09:11.040 --> 00:09:14.050
A commit is also just a piece of content, and your

148
00:09:14.050 --> 00:09:21.000
commit has different content than mine, so you get a different hash. It's as simple as that.

