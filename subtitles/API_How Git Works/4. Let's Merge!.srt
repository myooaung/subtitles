1
00:00:00,840 --> 00:00:06,570
Let's switch back to the main branch. There. Now the branches

2
00:00:06,570 --> 00:00:10,650
didn't move, remember, but HEAD did move.

3
00:00:10,650 --> 00:00:17,220
It's now pointing at main. And if we look into the apple pie recipe, we find our

4
00:00:17,220 --> 00:00:23,340
own version of the recipe here, not the alternate version.

5
00:00:23,340 --> 00:00:27,180
Now, let's say that I tried the two apple pie recipes.

6
00:00:27,180 --> 00:00:32,980
I actually baked both apple pies, and I liked the alternate version a bit more,

7
00:00:32,980 --> 00:00:35,340
the one in the ideas branch.

8
00:00:35,340 --> 00:00:41,940
So I want to merge changes from the ideas branch into the main branch.

9
00:00:41,940 --> 00:00:49,060
Let's do the magic, git merge, and there you are, we have a conflict.

10
00:00:49,060 --> 00:00:54,380
We want to have both our changes and the changes from

11
00:00:54,380 --> 00:00:58,300
ideas in main, but Git is warning us that at least some of

12
00:00:58,300 --> 00:01:00,390
those changes are conflicting.

13
00:01:00,390 --> 00:01:04,390
We need to solve the conflicts manually, and chances are, you

14
00:01:04,390 --> 00:01:08,220
probably got in this situation already, either while using Git

15
00:01:08,220 --> 00:01:10,940
or some other version control system.

16
00:01:10,940 --> 00:01:15,990
If we look inside the apple pie file, we will see that this line,

17
00:01:15,990 --> 00:01:21,730
this one, was changed in divergent ways in our recipe and in the

18
00:01:21,730 --> 00:01:25,240
alternate recipe in the ideas branch.

19
00:01:25,240 --> 00:01:30,520
So now we need to take a stand and decide how many apples to use in the pie.

20
00:01:30,520 --> 00:01:34,190
I can't decide which version is better, so let's go for one of

21
00:01:34,190 --> 00:01:38,710
those compromises that usually work fine in the kitchen and add

22
00:01:38,710 --> 00:01:42,340
just one more apple, middle ground.

23
00:01:42,340 --> 00:01:44,740
Okay, there.

24
00:01:44,740 --> 00:01:46,810
Now, if we get the status,

25
00:01:46,810 --> 00:01:50,770
we see that this file is not staged for the next commit.

26
00:01:50,770 --> 00:01:52,770
We need to add it explicitly.

27
00:01:52,770 --> 00:01:57,910
This is our way to tell Git that the conflict has been fixed.

28
00:01:57,910 --> 00:02:01,360
There. And now we can complete the merge.

29
00:02:01,360 --> 00:02:03,260
If we hadn't had conflicts,

30
00:02:03,260 --> 00:02:06,660
then Git would have done this last step automatically,

31
00:02:06,660 --> 00:02:09,970
but because we did have conflicts, so we have to say,

32
00:02:09,970 --> 00:02:16,740
okay, we are done fixing all the conflicts, and we do that with a commit.

33
00:02:16,740 --> 00:02:19,210
We don't even need to give it a commit message.

34
00:02:19,210 --> 00:02:22,730
Git knows that we are in the middle of a merge, so it will

35
00:02:22,730 --> 00:02:25,740
create a suitable message automatically.

36
00:02:25,740 --> 00:02:29,150
We could change the message, but I won't, I will just

37
00:02:29,150 --> 00:02:34,240
approve it by saving and quitting the editor.

38
00:02:34,240 --> 00:02:39,070
If you look at the log now, you will see a brand new commit, and

39
00:02:39,070 --> 00:02:42,860
if you look inside this commit with cat‑file,

40
00:02:42,860 --> 00:02:47,220
remember cat‑file? The low‑level command that we used to

41
00:02:47,220 --> 00:02:50,640
peek inside the objects in the database.

42
00:02:50,640 --> 00:02:56,120
There it is. It's just like any other commit that we've seen so far. A

43
00:02:56,120 --> 00:03:02,230
merge is just a commit, with one exception; it has two parents, that's what

44
00:03:02,230 --> 00:03:07,290
makes it a merge. A commit in Git usually has one parent, but it can have

45
00:03:07,290 --> 00:03:10,340
as many parents as you like, actually.

46
00:03:10,340 --> 00:03:16,420
So let's update the diagram. Git created a new commit with two parents to

47
00:03:16,420 --> 00:03:24,000
represent the merge and moved the main to point at the new commit. That's how merging works.

