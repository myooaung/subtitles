1
00:00:00,840 --> 00:00:04,110
Imagine that you have a Git repository on your computer

2
00:00:04,110 --> 00:00:08,500
somewhere. It's this orange repository here, and you also want

3
00:00:08,500 --> 00:00:11,660
the same repository somewhere else, probably on a different

4
00:00:11,660 --> 00:00:15,240
machine. Here, I made it purple.

5
00:00:15,240 --> 00:00:19,620
Now, the machine that hosts the purple repository must be able to

6
00:00:19,620 --> 00:00:23,960
connect to the machine that hosts the orange repository, so you

7
00:00:23,960 --> 00:00:26,810
might have some technical setup to do here.

8
00:00:26,810 --> 00:00:31,390
You have to run a Git daemon process on the orange repo so that the

9
00:00:31,390 --> 00:00:35,440
purple repo can connect to it, and so on and so forth.

10
00:00:35,440 --> 00:00:38,770
But in this training, we don't care about these technical details.

11
00:00:38,770 --> 00:00:40,840
So, let's make it easier.

12
00:00:40,840 --> 00:00:44,450
I just moved the whole cookbook project to GitHub

13
00:00:44,450 --> 00:00:47,240
and removed it from my computer.

14
00:00:47,240 --> 00:00:49,920
So now the orange repo is in the cloud,

15
00:00:49,920 --> 00:00:54,330
right? A service hosted on the GitHub servers, and the

16
00:00:54,330 --> 00:00:57,640
purple repo will be on my own computer.

17
00:00:57,640 --> 00:01:01,820
So I want to get a copy of the project on this computer inside this empty

18
00:01:01,820 --> 00:01:05,540
directory. You probably know which command to use here.

19
00:01:05,540 --> 00:01:08,680
It's the git clone command.

20
00:01:08,680 --> 00:01:11,380
It takes the address of a Git repository,

21
00:01:11,380 --> 00:01:18,340
which I can copy‑paste from GitHub. There, and now I have the project.

22
00:01:18,340 --> 00:01:22,750
All the files are here, but I didn't just get the files,

23
00:01:22,750 --> 00:01:27,080
I got the entire .git directory as well and all the files it

24
00:01:27,080 --> 00:01:32,190
contains. Here is what git clone did. It created an empty

25
00:01:32,190 --> 00:01:37,260
directory for the cookbook, and it copied the .git directory from

26
00:01:37,260 --> 00:01:40,540
the GitHub project to this directory.

27
00:01:40,540 --> 00:01:41,820
I'm simplifying here.

28
00:01:41,820 --> 00:01:45,850
It didn't literally copy each and every file. For example,

29
00:01:45,850 --> 00:01:49,570
unless you're using a very old version of Git, git clone

30
00:01:49,570 --> 00:01:53,040
only copies one branch, the main branch.

31
00:01:53,040 --> 00:01:56,370
If I want to work with the other branches on the remote repo

32
00:01:56,370 --> 00:02:00,000
I need to give specific commands to do so, but that's a

33
00:02:00,000 --> 00:02:02,340
detail, an optimization if you wish.

34
00:02:02,340 --> 00:02:07,640
The important part is Git did copy over the objects in the object database.

35
00:02:07,640 --> 00:02:13,040
They are in here. After copying this stuff, Git checked out the main

36
00:02:13,040 --> 00:02:16,740
branch to rebuild these files in the working area.

37
00:02:16,740 --> 00:02:19,970
Remember, the working area in Git is not very important.

38
00:02:19,970 --> 00:02:25,200
You can always rebuild it on the fly from the content of the .git directory.

39
00:02:25,200 --> 00:02:30,640
And since the .git directory contains the entire repository, now we have a copy

40
00:02:30,640 --> 00:02:34,040
of the project and its history on this computer.

41
00:02:34,040 --> 00:02:37,650
This is an important point, so it's worth repeating it.

42
00:02:37,650 --> 00:02:40,400
Now that we have two clones of the repo,

43
00:02:40,400 --> 00:02:45,570
one on GitHub and one on this computer, both clones are equally good.

44
00:02:45,570 --> 00:02:49,520
Git is not like Subversion or other traditional revision control

45
00:02:49,520 --> 00:02:54,290
systems that need a centralized server and everyone else is just

46
00:02:54,290 --> 00:02:57,350
talking to that one server. Instead,

47
00:02:57,350 --> 00:03:00,320
both computers now contain the whole project and its

48
00:03:00,320 --> 00:03:04,060
history. We could have as many of these clones as we want

49
00:03:04,060 --> 00:03:06,340
synchronizing with each other.

50
00:03:06,340 --> 00:03:11,040
Of course, you can still decide that one clone is the most important one.

51
00:03:11,040 --> 00:03:11,840
For example,

52
00:03:11,840 --> 00:03:15,740
if you have multiple developers working on the same software project,

53
00:03:15,740 --> 00:03:18,930
then you will probably decide that the repo on GitHub is the

54
00:03:18,930 --> 00:03:22,600
reference repo, the one that you build the releases from, and

55
00:03:22,600 --> 00:03:25,540
everybody must synchronize with that one.

56
00:03:25,540 --> 00:03:30,270
That's why I drew the GitHub repo on top. You can still synchronize the

57
00:03:30,270 --> 00:03:34,670
developers' repos directly with each other, but even then you probably

58
00:03:34,670 --> 00:03:39,290
want to appoint a well‑known reference copy that is visible to everybody,

59
00:03:39,290 --> 00:03:41,940
and everybody synchronizes with it.

60
00:03:41,940 --> 00:03:53,000
However, in Git that's not really a technical issue, it's more of a social issue. It's a convention. From a technical standpoint, all of these clones are peers.

