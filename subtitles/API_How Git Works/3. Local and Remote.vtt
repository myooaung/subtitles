WEBVTT
1
00:00:00.840 --> 00:00:05.740
Now we have the same project in two separate repos, orange and purple.

2
00:00:05.740 --> 00:00:10.820
We're working on purple, so it would be useful if purple could remember

3
00:00:10.820 --> 00:00:15.520
the address of orange, because we decided that orange is an important

4
00:00:15.520 --> 00:00:19.240
copy, and we want to stay synchronized with it.

5
00:00:19.240 --> 00:00:22.650
Indeed, when we issued the git clone command,

6
00:00:22.650 --> 00:00:26.800
Git added a few lines to the configuration of our repository.

7
00:00:26.800 --> 00:00:29.840
It's here in the config file.

8
00:00:29.840 --> 00:00:34.180
We never looked at this configuration file before, but now that we cloned

9
00:00:34.180 --> 00:00:38.040
the repo, we can find some useful information here.

10
00:00:38.040 --> 00:00:42.410
Each Git repository such as this one, can remember information

11
00:00:42.410 --> 00:00:46.140
about other copies of the same repository.

12
00:00:46.140 --> 00:00:49.240
Each other copy is called a remote.

13
00:00:49.240 --> 00:00:53.440
You can define as many remotes as you want, but when you clone the project,

14
00:00:53.440 --> 00:00:57.860
Git immediately defines a default remote and calls it with a

15
00:00:57.860 --> 00:01:03.160
conventional name, origin. Here is the configuration of origin, and it

16
00:01:03.160 --> 00:01:07.240
points to the URL that we cloned the project from.

17
00:01:07.240 --> 00:01:10.030
The rest of the configuration is more complicated.

18
00:01:10.030 --> 00:01:13.850
We don't need to look at the details here. Just know that the

19
00:01:13.850 --> 00:01:18.530
default configuration says that we have one main branch that maps

20
00:01:18.530 --> 00:01:21.040
over the main branch of the remote.

21
00:01:21.040 --> 00:01:24.230
You can tweak this configuration to change the policies

22
00:01:24.230 --> 00:01:27.700
that you use to synchronize with the remotes, but this

23
00:01:27.700 --> 00:01:30.240
configuration here is the default.

24
00:01:30.240 --> 00:01:35.010
So, now Git remembers which other repo or repos we want to

25
00:01:35.010 --> 00:01:37.970
synchronize with, but to synchronize,

26
00:01:37.970 --> 00:01:41.560
Git also needs to know the current state of origin, which

27
00:01:41.560 --> 00:01:45.220
branches are there on the remote, which commits those branches

28
00:01:45.220 --> 00:01:48.040
are currently pointing at, and so on.

29
00:01:48.040 --> 00:01:51.410
And in fact, Git does store that information.

30
00:01:51.410 --> 00:01:53.420
If we ask it for branches,

31
00:01:53.420 --> 00:01:58.790
it shows the local branches. We only have main now, but if you

32
00:01:58.790 --> 00:02:02.760
list the branches with the ‑‑all switch,

33
00:02:02.760 --> 00:02:04.750
then you see all the references,

34
00:02:04.750 --> 00:02:08.640
including the ones on the remote, the remote branches.

35
00:02:08.640 --> 00:02:11.540
and the current position of HEAD.

36
00:02:11.540 --> 00:02:16.190
Git tracks remote branches exactly like it tracks the local branches,

37
00:02:16.190 --> 00:02:21.120
by writing those branches as the references in the refs folder. If you

38
00:02:21.120 --> 00:02:25.770
look inside that folder, you will see an origin folder here that

39
00:02:25.770 --> 00:02:30.700
contains the references to branches, tags, and the current HEAD pointer

40
00:02:30.700 --> 00:02:35.150
of origin. Git will automatically update this information when we

41
00:02:35.150 --> 00:02:37.640
connect to a remote.

42
00:02:37.640 --> 00:02:39.510
There is one wrinkle here.

43
00:02:39.510 --> 00:02:42.560
If you look inside this folder, you might find that

44
00:02:42.560 --> 00:02:44.920
some of the branches are missing.

45
00:02:44.920 --> 00:02:50.290
In this case, I can only see the remote's HEAD here, not the branches. That's

46
00:02:50.290 --> 00:02:55.540
because of a low‑level optimization in Git. To avoid maintaining one small file

47
00:02:55.540 --> 00:03:00.930
for each branch, Git sometimes compacts some of them into a single file called

48
00:03:00.930 --> 00:03:07.420
packed‑refs, here. There is no simple command to unpack these files, o you will

49
00:03:07.420 --> 00:03:12.290
have to take my word for it that the branches that are not in the refs directory

50
00:03:12.290 --> 00:03:13.840
must be in this file.

51
00:03:13.840 --> 00:03:17.710
This can happen for both local and remote branches,

52
00:03:17.710 --> 00:03:20.960
but in both cases, whether the branches are still individual

53
00:03:20.960 --> 00:03:24.260
files or packaged together in packed‑refs,

54
00:03:24.260 --> 00:03:26.690
they are still conceptually the same thing.

55
00:03:26.690 --> 00:03:30.630
All branches, local or remote, are still references to a

56
00:03:30.630 --> 00:03:34.040
commit, and Git tracks all of them.

57
00:03:34.040 --> 00:03:38.200
Since we cannot peek inside the files for some of these branches because

58
00:03:38.200 --> 00:03:43.710
they've been packed, let's use this plumbing command, git show‑ref, to see

59
00:03:43.710 --> 00:03:49.470
which commits they're pointing at. Git show‑ref main lists all of the

60
00:03:49.470 --> 00:03:52.570
branches that have main in their names,

61
00:03:52.570 --> 00:03:57.310
which means the local main branch and the remote main branch.

62
00:03:57.310 --> 00:04:01.460
And as you can see, they're pointing to the same commit, while the

63
00:04:01.460 --> 00:04:06.040
ideas branch is still pointing to an older commit.

64
00:04:06.040 --> 00:04:07.300
So, bottom line,

65
00:04:07.300 --> 00:04:11.720
you know that the local branch in Git is just the reference to commit.

66
00:04:11.720 --> 00:04:15.520
Well, a remote branch is exactly the same thing.

67
00:04:15.520 --> 00:04:17.740
Whenever you synchronize with a remote,

68
00:04:17.740 --> 00:04:25.000
Git updates the remote branches. Let's see how that synchronization happens in practice.

