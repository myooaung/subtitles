1
00:00:00,840 --> 00:00:05,210
This module is mostly about rebases, but I'm cheating a bit.

2
00:00:05,210 --> 00:00:10,940
I'm squeezing a few minutes about another topic in here: tags, because tags

3
00:00:10,940 --> 00:00:15,120
are one of the features that turn Git into a revision control system, so we

4
00:00:15,120 --> 00:00:18,540
need tags to complete this layer of the onion.

5
00:00:18,540 --> 00:00:21,880
And you might remember that when we talked about the four types of

6
00:00:21,880 --> 00:00:26,520
objects in the object database, I said that annotated tags are one of

7
00:00:26,520 --> 00:00:32,040
them, and I promised more details. Here they come.

8
00:00:32,040 --> 00:00:35,130
A tag is like a label for a commit.

9
00:00:35,130 --> 00:00:35,810
For example,

10
00:00:35,810 --> 00:00:40,400
let's say that I just released the first version of this cookbook project and I

11
00:00:40,400 --> 00:00:44,240
want to put a tag on the commit where the release happens.

12
00:00:44,240 --> 00:00:48,150
I can do git tag to create a tag on the current commit and

13
00:00:48,150 --> 00:00:53,040
give it a name for the tag, like release_1.

14
00:00:53,040 --> 00:00:54,510
I have an option here.

15
00:00:54,510 --> 00:01:00,310
I can create a simple tag with just a name, like a simple label, or an

16
00:01:00,310 --> 00:01:04,840
annotated tag, that is a tag with also additional metadata,

17
00:01:04,840 --> 00:01:09,250
like a message, for example. Let's go for the second option. To

18
00:01:09,250 --> 00:01:14,410
create an annotated tag, you use this option ‑a for annotated,

19
00:01:14,410 --> 00:01:17,520
and we can add a message with ‑m,

20
00:01:17,520 --> 00:01:23,340
like we do for commits. First release, still unstable as far

21
00:01:23,340 --> 00:01:26,940
as a cookbook can be unstable I guess.

22
00:01:26,940 --> 00:01:32,640
And now if I type git tag without any option, I get a list of tags.

23
00:01:32,640 --> 00:01:36,270
We just have the one in this project. And in the future

24
00:01:36,270 --> 00:01:41,530
if I want to move back to this commit, I can do git checkout release_1.

25
00:01:41,530 --> 00:01:44,840
It's checkout in this case, because switch doesn't

26
00:01:44,840 --> 00:01:48,240
work with tags, only branches.

27
00:01:48,240 --> 00:01:52,090
So, that's how tags work, but what's a tag under the

28
00:01:52,090 --> 00:01:55,980
hood? Let's go to the .git directory.

29
00:01:55,980 --> 00:02:01,460
We feel right at home there now. I'll show you where this tag is.

30
00:02:01,460 --> 00:02:02,910
If we look into refs,

31
00:02:02,910 --> 00:02:06,750
you remember this is the directory that contains branches

32
00:02:06,750 --> 00:02:12,230
and tags are here in a tags subdirectory. And here is a

33
00:02:12,230 --> 00:02:16,940
file named release_1, our tag.

34
00:02:16,940 --> 00:02:22,140
And if we peek inside this file, we find a hash.

35
00:02:22,140 --> 00:02:23,450
What hash is this?

36
00:02:23,450 --> 00:02:27,510
Let's copy it and use the cat‑file ‑t command.

37
00:02:27,510 --> 00:02:31,840
Remember it means show me the type of this object,

38
00:02:31,840 --> 00:02:35,240
and I'll paste the hash in here.

39
00:02:35,240 --> 00:02:38,940
So, this file is pointing to a tag object.

40
00:02:38,940 --> 00:02:43,560
Let's check the content of this tag object with cat‑file ‑p

41
00:02:43,560 --> 00:02:47,580
and this hash. Here is the tag object.

42
00:02:47,580 --> 00:02:51,220
It contains information similar to a commit: the tagger,

43
00:02:51,220 --> 00:02:51,920
that's me,

44
00:02:51,920 --> 00:02:56,120
the date, and the message, and also a reference to another

45
00:02:56,120 --> 00:03:00,130
database object that is a commit. And this is finally the

46
00:03:00,130 --> 00:03:02,720
commit that the tag is pointing at.

47
00:03:02,720 --> 00:03:08,640
If we do git log, see, this is the commit we tagged earlier.

48
00:03:08,640 --> 00:03:12,070
So this might have been more complicated than you expected.

49
00:03:12,070 --> 00:03:15,950
Let's recap. A tag is actually two things.

50
00:03:15,950 --> 00:03:18,340
It's made up of two parts.

51
00:03:18,340 --> 00:03:21,370
One is a branch‑like thing, a reference.

52
00:03:21,370 --> 00:03:25,460
Actually this thing is so similar to a branch that Git places it

53
00:03:25,460 --> 00:03:30,820
in a folder just aside branches. But this thing is a reference, so

54
00:03:30,820 --> 00:03:33,400
it cannot contain data, just a name.

55
00:03:33,400 --> 00:03:38,180
So the reference points to a database object of type tag and

56
00:03:38,180 --> 00:03:42,240
that's where the tag metadata is, like the message.

57
00:03:42,240 --> 00:03:47,340
And in turn, this database object points to a commit.

58
00:03:47,340 --> 00:03:51,510
I also told you that in Git there are actually two types of tags, because in

59
00:03:51,510 --> 00:03:55,510
some cases you might decide that you don't need the metadata.

60
00:03:55,510 --> 00:04:00,260
Maybe all you want is a simple label, you want to put a name on a commit.

61
00:04:00,260 --> 00:04:03,520
In that case, you can create a simpler kind of tag by

62
00:04:03,520 --> 00:04:07,940
using git tag without the ‑a option.

63
00:04:07,940 --> 00:04:12,740
Let's say that I want to tag the current commit with the dinner tag.

64
00:04:12,740 --> 00:04:16,740
In this case I cannot provide a message or any other data.

65
00:04:16,740 --> 00:04:22,020
So now we have another tag, there it is, and like before, this tag

66
00:04:22,020 --> 00:04:26,940
is another small file in the tags directory.

67
00:04:26,940 --> 00:04:28,900
And if we look into this tag,

68
00:04:28,900 --> 00:04:33,190
it still contains a hash; only this time, the hash isn't the

69
00:04:33,190 --> 00:04:35,490
hash of the tag object in the database.

70
00:04:35,490 --> 00:04:43,060
It's directly the hash of this commit. See? So that's the difference

71
00:04:43,060 --> 00:04:48,700
between annotated tags and lightweight tags. Annotated tags are a

72
00:04:48,700 --> 00:04:54,440
branch‑like object that points to a tag object that points to a commit.

73
00:04:54,440 --> 00:04:59,770
While lightweight tags just point to a commit, that's all, because a

74
00:04:59,770 --> 00:05:03,740
lightweight tag doesn't need a place to put those additional metadata, so

75
00:05:03,740 --> 00:05:08,540
it doesn't need the tag object, it just needs a name.

76
00:05:08,540 --> 00:05:11,510
So I told you that tags are similar to branches,

77
00:05:11,510 --> 00:05:16,830
but actually lightweight tags in particular are almost identical to branches.

78
00:05:16,830 --> 00:05:20,800
The only difference is that the lightweight tags and branches are in different

79
00:05:20,800 --> 00:05:26,340
directories and Git knows that it needs to treat them differently. Namely, if

80
00:05:26,340 --> 00:05:29,360
I'm on a branch and I create a new commit,

81
00:05:29,360 --> 00:05:33,710
the branch will move to track the new commit, but a tag will just

82
00:05:33,710 --> 00:05:37,020
stay there and stick to the same object forever.

83
00:05:37,020 --> 00:05:41,060
So, branches move and tags don't, but that's the only difference.

84
00:05:41,060 --> 00:05:44,200
I could literally turn this tag into a branch by

85
00:05:44,200 --> 00:05:47,040
moving it to this other directory.

86
00:05:47,040 --> 00:05:53,000
Don't do it, but you could. And that is all I had to tell you about tags.

