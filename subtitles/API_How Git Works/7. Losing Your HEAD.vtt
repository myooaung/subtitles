WEBVTT
1
00:00:00.840 --> 00:00:04.640
The second and last corner case I want to tell you about is a

2
00:00:04.640 --> 00:00:08.660
feature that turns out to be quite useful in practice.

3
00:00:08.660 --> 00:00:11.030
I will simplify the diagram for this.

4
00:00:11.030 --> 00:00:16.940
I will switch to main and forget about the ideas branch for a while.

5
00:00:16.940 --> 00:00:17.490
Actually,

6
00:00:17.490 --> 00:00:22.840
let's forget about everything for the moment except for the very latest commit.

7
00:00:22.840 --> 00:00:27.890
So far, I always told you that HEAD is a reference to a branch,

8
00:00:27.890 --> 00:00:30.760
which in turn is a reference to a commit.

9
00:00:30.760 --> 00:00:33.980
When you switch to a branch or you checkout a branch,

10
00:00:33.980 --> 00:00:39.040
you can use either switch or checkout, that means that you're changing HEAD.

11
00:00:39.040 --> 00:00:39.740
However,

12
00:00:39.740 --> 00:00:42.780
you can also do something different. You can directly

13
00:00:42.780 --> 00:00:45.840
checkout a commit instead of a branch.

14
00:00:45.840 --> 00:00:48.220
In this case you have to use checkout,

15
00:00:48.220 --> 00:00:51.510
you cannot do a switch. Switch is only for branches.

16
00:00:51.510 --> 00:00:59.140
So I will checkout this commit. I will just use the commit's hash. There.

17
00:00:59.140 --> 00:01:05.050
Now, if you look inside HEAD, it's not pointing to a branch,

18
00:01:05.050 --> 00:01:08.540
it's pointing directly to a commit, and indeed,

19
00:01:08.540 --> 00:01:10.750
there is no current branch at all.

20
00:01:10.750 --> 00:01:13.040
We're not on a branch.

21
00:01:13.040 --> 00:01:17.240
This is a situation that is called detached HEAD.

22
00:01:17.240 --> 00:01:19.720
How is this useful in practice?

23
00:01:19.720 --> 00:01:25.080
Well, let me work a little bit more so I can show it to you.

24
00:01:25.080 --> 00:01:30.660
Let's make some experiments in the apple pie recipe, something

25
00:01:30.660 --> 00:01:33.990
that I'm not sure I want to keep around. There.

26
00:01:33.990 --> 00:01:37.130
It's good with 9 apples, it must be even better with

27
00:01:37.130 --> 00:01:44.640
20, right? And I will commit this.

28
00:01:44.640 --> 00:01:46.250
What happens when I commit?

29
00:01:46.250 --> 00:01:49.670
Well, in this case, Git cannot move the current branch as

30
00:01:49.670 --> 00:01:53.430
usual. There is no current branch. So it will track the

31
00:01:53.430 --> 00:01:56.940
latest commit by moving HEAD directly.

32
00:01:56.940 --> 00:02:00.740
HEAD is working like a branch here.

33
00:02:00.740 --> 00:02:03.900
Okay, let me hack in a few more changes.

34
00:02:03.900 --> 00:02:10.740
Let's make the pie sugar free, it's healthy.

35
00:02:10.740 --> 00:02:16.040
Another commit, another HEAD movement.

36
00:02:16.040 --> 00:02:18.930
Okay, now let's say that we had enough of this.

37
00:02:18.930 --> 00:02:23.570
I tried baking an apple pie with all these extra apples and no sugar.

38
00:02:23.570 --> 00:02:27.340
It tasted like cooked apples.

39
00:02:27.340 --> 00:02:30.830
I don't like that, so, we'll abandon the experiment.

40
00:02:30.830 --> 00:02:34.340
I will switch to main again.

41
00:02:34.340 --> 00:02:39.550
Okay, now HEAD is back where it belongs on the main branch, so

42
00:02:39.550 --> 00:02:44.140
are our files. Everything is business as usual.

43
00:02:44.140 --> 00:02:48.930
We rolled back the latest two commits. But there is a nagging

44
00:02:48.930 --> 00:02:52.340
question here. What happened to these commits?

45
00:02:52.340 --> 00:02:56.710
Well, they're still in the object database somewhere, together with all their

46
00:02:56.710 --> 00:03:01.060
trees and blobs, but unless I took note of their hashes,

47
00:03:01.060 --> 00:03:05.080
these commits and their connected objects are now unreachable.

48
00:03:05.080 --> 00:03:09.240
They cannot be reached by starting from a branch or a tag

49
00:03:09.240 --> 00:03:11.840
and walking the objects in the database.

50
00:03:11.840 --> 00:03:14.740
They are effectively isolated.

51
00:03:14.740 --> 00:03:18.310
I can only reach them directly by their hashes, and I'll

52
00:03:18.310 --> 00:03:21.040
probably forget those hashes soon.

53
00:03:21.040 --> 00:03:24.570
If you have any experience with object‑oriented languages,

54
00:03:24.570 --> 00:03:27.090
then you know what happens to an object when it

55
00:03:27.090 --> 00:03:30.040
can't be reached by any reference.

56
00:03:30.040 --> 00:03:34.520
It gets garbage collected. At some point, the system decides

57
00:03:34.520 --> 00:03:38.350
that the object is wasting precious memory, and it deletes the

58
00:03:38.350 --> 00:03:40.620
object and recovers the memory.

59
00:03:40.620 --> 00:03:43.640
And this is exactly what happens in Git as well.

60
00:03:43.640 --> 00:03:47.650
Every now and then in the course of other operations, Git decides

61
00:03:47.650 --> 00:03:51.040
that it's worth running a garbage collection.

62
00:03:51.040 --> 00:03:54.430
The garbage collector will look for objects in the database that

63
00:03:54.430 --> 00:04:00.020
cannot be ultimately reached from a branch, or HEAD, or a tag, and

64
00:04:00.020 --> 00:04:03.740
it will remove them to save disk space.

65
00:04:03.740 --> 00:04:07.560
Remember, each object is just a file in the object database, so

66
00:04:07.560 --> 00:04:12.040
removing them is as easy as deleting those files.

67
00:04:12.040 --> 00:04:15.220
So, these commits I created will likely stay in the

68
00:04:15.220 --> 00:04:18.790
database for some time and then disappear.

69
00:04:18.790 --> 00:04:23.410
If I want to save them, I must act now. How do I do that?

70
00:04:23.410 --> 00:04:27.630
One thing that I can do is move back to the lost commits.

71
00:04:27.630 --> 00:04:31.990
I can still do it because I have their hashes here and the garbage

72
00:04:31.990 --> 00:04:35.710
collector didn't run yet, so these objects are still in the

73
00:04:35.710 --> 00:04:41.340
database. There, that was a last‑minute save.

74
00:04:41.340 --> 00:04:44.890
And now that I have the commit, I can put a branch on it.

75
00:04:44.890 --> 00:04:49.640
Here, let's create a branch called nogood.

76
00:04:49.640 --> 00:04:55.630
Now I can switch to main again, and this time around, the commits are safe.

77
00:04:55.630 --> 00:04:59.800
There is a branch now that acts as the entry point to this section

78
00:04:59.800 --> 00:05:03.390
of the object graph, so these objects will never be garbage

79
00:05:03.390 --> 00:05:08.400
collected, and I can easily get back to them by checking out nogood

80
00:05:08.400 --> 00:05:13.570
if I wish. This is a common way to use a detached HEAD. When you

81
00:05:13.570 --> 00:05:18.150
want to try out something, go down a detour and, in general,

82
00:05:18.150 --> 00:05:21.210
experiment with your code, you don't have to leave

83
00:05:21.210 --> 00:05:23.260
behind the convenience of using Git.

84
00:05:23.260 --> 00:05:29.040
You can detach HEAD, do your experiment, still commit the experiment as much as

85
00:05:29.040 --> 00:05:33.120
you wish so that you won't lose data, and then you decide whether to keep the

86
00:05:33.120 --> 00:05:41.000
experiment or do away with it. Just remember to put a branch on the stuff that you care about before you leave it behind.

