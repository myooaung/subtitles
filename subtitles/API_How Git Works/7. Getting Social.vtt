WEBVTT
1
00:00:00.840 --> 00:00:03.750
We're almost done with our discussion of Git distribution,

2
00:00:03.750 --> 00:00:07.030
but it's worth taking a few minutes to discuss two

3
00:00:07.030 --> 00:00:11.660
distribution‑related features that are not features of Git.

4
00:00:11.660 --> 00:00:14.240
Instead, they are features of GitHub,

5
00:00:14.240 --> 00:00:17.580
but they are so essential for modern development,

6
00:00:17.580 --> 00:00:20.240
especially modern open‑source development,

7
00:00:20.240 --> 00:00:23.380
that it's a good idea to talk about them here very quickly,

8
00:00:23.380 --> 00:00:25.640
just to avoid confusion.

9
00:00:25.640 --> 00:00:30.540
Imagine that there is this project on GitHub that we want to contribute to.

10
00:00:30.540 --> 00:00:33.940
It belongs to a user named pluralsight.

11
00:00:33.940 --> 00:00:38.020
We could simply clone this project, and then we could modify it,

12
00:00:38.020 --> 00:00:42.350
but we couldn't send our contributions back to the project because we

13
00:00:42.350 --> 00:00:45.410
don't have write access to pluralsight's repository,

14
00:00:45.410 --> 00:00:47.640
so we can't push to it.

15
00:00:47.640 --> 00:00:51.740
What we can do from the GitHub web interface is to create

16
00:00:51.740 --> 00:00:55.060
our own copy of the project on GitHub.

17
00:00:55.060 --> 00:00:57.960
This is the first feature I wanted to tell you about.

18
00:00:57.960 --> 00:00:59.840
It's called a fork.

19
00:00:59.840 --> 00:01:04.030
It's kind of like a clone, but it's a remote clone.

20
00:01:04.030 --> 00:01:07.290
We are cloning the project from someone else's GitHub

21
00:01:07.290 --> 00:01:11.140
account to our own GitHub account.

22
00:01:11.140 --> 00:01:14.290
So now we have a new project in the cloud, and we can

23
00:01:14.290 --> 00:01:17.940
clone that one on our local machine.

24
00:01:17.940 --> 00:01:19.270
When we do a clone,

25
00:01:19.270 --> 00:01:24.940
Git automatically creates a remote in our local repo, pointing at origin.

26
00:01:24.940 --> 00:01:30.230
So just to be clear, origin is our own GitHub project, our fork,

27
00:01:30.230 --> 00:01:32.540
not the original project.

28
00:01:32.540 --> 00:01:34.390
Actually, from Git's point of view,

29
00:01:34.390 --> 00:01:37.650
there is no connection at all between our project and the

30
00:01:37.650 --> 00:01:42.010
original project that we forked from. GitHub does know that

31
00:01:42.010 --> 00:01:46.240
the two projects are connected, but Git doesn't.

32
00:01:46.240 --> 00:01:50.290
So if we want to track changes to the original project,

33
00:01:50.290 --> 00:01:53.770
we need to add another remote pointing at it.

34
00:01:53.770 --> 00:01:56.950
This is not something that Git does automatically.

35
00:01:56.950 --> 00:01:59.040
We have to do it ourselves.

36
00:01:59.040 --> 00:02:04.140
A common convention is to call this remote upstream.

37
00:02:04.140 --> 00:02:09.420
Now we have our local project with two remotes. We can work on it, and

38
00:02:09.420 --> 00:02:13.440
we can synchronize all our local changes with origin.

39
00:02:13.440 --> 00:02:18.940
If we commit local changes, we can just push those changes to origin.

40
00:02:18.940 --> 00:02:21.560
If there are changes on upstream,

41
00:02:21.560 --> 00:02:24.860
we can pull them into our local project, solve any

42
00:02:24.860 --> 00:02:29.340
conflicts, and then push them to origin.

43
00:02:29.340 --> 00:02:35.040
One thing that we still cannot do, however, is to push changes to upstream.

44
00:02:35.040 --> 00:02:35.750
For example,

45
00:02:35.750 --> 00:02:40.180
we might like to contribute our green commit to the original project,

46
00:02:40.180 --> 00:02:43.740
but we still do not have write access to upstream.

47
00:02:43.740 --> 00:02:46.640
So GitHub gives us an alternative.

48
00:02:46.640 --> 00:02:50.630
We can send a message to the maintainers of upstream

49
00:02:50.630 --> 00:02:53.640
and ask them to pull our changes.

50
00:02:53.640 --> 00:02:56.740
This is called a pull request.

51
00:02:56.740 --> 00:03:00.170
Once again, pull requests are not a Git feature.

52
00:03:00.170 --> 00:03:02.660
They're not even a version control feature,

53
00:03:02.660 --> 00:03:07.340
strictly speaking. In a way, they are a social network feature.

54
00:03:07.340 --> 00:03:10.340
You're just sending a message to people.

55
00:03:10.340 --> 00:03:12.450
If those people like your changes,

56
00:03:12.450 --> 00:03:17.300
then GitHub and makes it easy for them to do a pull and get your changes from

57
00:03:17.300 --> 00:03:22.240
origin. And other services similar to GitHub, like GitLab,

58
00:03:22.240 --> 00:03:22.970
for example,

59
00:03:22.970 --> 00:03:27.460
have their own version of this same feature. And that's

60
00:03:27.460 --> 00:03:35.000
all about forks and pull requests, two of the most important tools in modern open‑source development.

