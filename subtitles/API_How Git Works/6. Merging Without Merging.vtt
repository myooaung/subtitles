WEBVTT
1
00:00:00.840 --> 00:00:04.060
We have seen how branches and merges work,

2
00:00:04.060 --> 00:00:08.310
but there are a couple of interesting corner cases that we didn't consider.

3
00:00:08.310 --> 00:00:12.340
They are quite important in practice, so let's look at them.

4
00:00:12.340 --> 00:00:15.720
The first corner case is a special case of a merge.

5
00:00:15.720 --> 00:00:22.940
Let's switch to the ideas branch. There, HEAD moves to point at ideas.

6
00:00:22.940 --> 00:00:25.640
Now we are on this branch again.

7
00:00:25.640 --> 00:00:30.910
Now, let's say that we made up our mind on this whole apple pie debate, and

8
00:00:30.910 --> 00:00:36.060
we decided that the recipe that's currently in main is the best. We baked it

9
00:00:36.060 --> 00:00:39.600
and having one less apple really worked great.

10
00:00:39.600 --> 00:00:43.900
So now we want to make this apple pie from main the official

11
00:00:43.900 --> 00:00:48.620
apple pie, and we want the same recipe in ideas so that it can

12
00:00:48.620 --> 00:00:51.540
be the basis for future experiments.

13
00:00:51.540 --> 00:00:55.520
In other words, earlier on we merged ideas in main,

14
00:00:55.520 --> 00:00:59.640
now we want to merge main in ideas.

15
00:00:59.640 --> 00:01:02.820
Now, how does Git handle this merge?

16
00:01:02.820 --> 00:01:07.550
It could do it in the usual way, like it did when we merged in the

17
00:01:07.550 --> 00:01:12.370
other direction. It could create a new commit that has two parents,

18
00:01:12.370 --> 00:01:17.700
these two commits here would be the parents, and then move ideas to

19
00:01:17.700 --> 00:01:20.040
point at the new commit.

20
00:01:20.040 --> 00:01:24.870
This new commit would be guaranteed not to have conflicts, because we already

21
00:01:24.870 --> 00:01:28.050
solved the conflicts when we merged in the other direction.

22
00:01:28.050 --> 00:01:32.450
So it would be easy for Git to create this commit, but it would also be

23
00:01:32.450 --> 00:01:36.080
wasteful. Think about what we're trying to achieve here.

24
00:01:36.080 --> 00:01:40.810
We want a commit that contains the latest version of all the stuff in

25
00:01:40.810 --> 00:01:45.270
main and the latest version of all the stuff in ideas.

26
00:01:45.270 --> 00:01:48.460
That's what we want. But we already have such a

27
00:01:48.460 --> 00:01:51.880
commit, it's the latest commit of main.

28
00:01:51.880 --> 00:01:56.120
It contains all the latest objects in main, of course, and also the

29
00:01:56.120 --> 00:02:00.380
latest objects in ideas, because the latest commit in ideas is an

30
00:02:00.380 --> 00:02:04.580
ancestor commit of main, and all the conflicts have already been solved

31
00:02:04.580 --> 00:02:11.720
in main. We learned by now that Git is frugal, it doesn't like waste, so

32
00:02:11.720 --> 00:02:18.060
it can spare a commit and just do this instead. It moves ideas to point

33
00:02:18.060 --> 00:02:20.020
to the same commit as main.

34
00:02:20.020 --> 00:02:23.240
So, Git didn't have to create a new commit.

35
00:02:23.240 --> 00:02:26.440
This trick happens all the time in practice.

36
00:02:26.440 --> 00:02:29.040
It's called a fastâ€‘forward.

37
00:02:29.040 --> 00:02:32.620
Whenever you see this message on the screen, this is Git bragging

38
00:02:32.620 --> 00:02:36.970
about being able to spare a few objects in the object database and

39
00:02:36.970 --> 00:02:42.000
making your project's history less complicated. Good Git.

