1
00:00:00,840 --> 00:00:04,050
I didn't tell you the whole story about rebases.

2
00:00:04,050 --> 00:00:06,940
Let's take a small step back.

3
00:00:06,940 --> 00:00:11,340
I told you that when you rebase, Git detaches the current branch from

4
00:00:11,340 --> 00:00:16,640
its base and moves it to the top of the target branch.

5
00:00:16,640 --> 00:00:20,740
But actually, this process cannot happen literally like that.

6
00:00:20,740 --> 00:00:23,010
That would be impossible in Git.

7
00:00:23,010 --> 00:00:26,690
You cannot detach a commit from another commit and move it

8
00:00:26,690 --> 00:00:30,600
elsewhere because commits are database objects, and

9
00:00:30,600 --> 00:00:32,940
database objects are immutable.

10
00:00:32,940 --> 00:00:36,040
Remember what we said in the beginning of this training,

11
00:00:36,040 --> 00:00:39,720
if you change anything in a commit, then you get a different

12
00:00:39,720 --> 00:00:43,020
shown hash, which means a different commit.

13
00:00:43,020 --> 00:00:47,580
And if you want to move commits around, then you must change at least

14
00:00:47,580 --> 00:00:50,670
one piece of data inside the commit, its parent.

15
00:00:50,670 --> 00:00:52,240
So you cannot do that.

16
00:00:52,240 --> 00:00:53,850
Let's take a step back.

17
00:00:53,850 --> 00:00:57,740
Imagine what happens if you change the parent of this commit.

18
00:00:57,740 --> 00:01:02,520
The parent's hash is stored inside the commit, so the commit

19
00:01:02,520 --> 00:01:07,710
data must change, and the commit must get a new hash. Now

20
00:01:07,710 --> 00:01:10,060
that this commit has a new hash,

21
00:01:10,060 --> 00:01:14,460
this other commit also has to change because its own parent has

22
00:01:14,460 --> 00:01:18,870
changed, so it gets a new hash, and so on for all the commits in the

23
00:01:18,870 --> 00:01:24,340
branch. So, Git cannot just move the commits. The commits in the

24
00:01:24,340 --> 00:01:27,390
rebase branch must have different hashes,

25
00:01:27,390 --> 00:01:31,960
so there must be different objects in the database, in other words,

26
00:01:31,960 --> 00:01:38,200
new commits, and indeed, that's what they are. Here is how rebasing really

27
00:01:38,200 --> 00:01:43,340
works. When you rebase, Git makes copies of the commits.

28
00:01:43,340 --> 00:01:46,910
It creates new commits with mostly the same data,

29
00:01:46,910 --> 00:01:52,290
actually exactly the same data, except for their parents and also except for

30
00:01:52,290 --> 00:01:56,340
any conflicts that you might have to fix during the rebase.

31
00:01:56,340 --> 00:01:57,960
Aside from those changes,

32
00:01:57,960 --> 00:02:01,890
these new commits look almost exactly like the original commits,

33
00:02:01,890 --> 00:02:06,430
but they are new objects with new hashes, so they are new files

34
00:02:06,430 --> 00:02:11,540
with new file names in the database directory. And finally, Git

35
00:02:11,540 --> 00:02:15,130
moves the rebase branch to the new commits,

36
00:02:15,130 --> 00:02:17,740
leaving the old commits behind.

37
00:02:17,740 --> 00:02:21,540
Keep this in mind because, as we will see in the rest of this training,

38
00:02:21,540 --> 00:02:32,000
sometimes rebases can be tricky, and you can avoid some confusion if you remember that rebasing is an operation that creates new commits.

