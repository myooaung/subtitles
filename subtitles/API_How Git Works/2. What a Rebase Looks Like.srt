1
00:00:00,840 --> 00:00:03,390
Here is our cookbook project again.

2
00:00:03,390 --> 00:00:06,370
I worked on it for a bit since the last module,

3
00:00:06,370 --> 00:00:09,020
and this is the situation that we have now.

4
00:00:09,020 --> 00:00:11,340
There are two branches.

5
00:00:11,340 --> 00:00:16,590
The main branch got a couple of new commits since the last time we looked at it,

6
00:00:16,590 --> 00:00:20,250
and these commits changed the apple pie recipe a bit,

7
00:00:20,250 --> 00:00:21,210
just minor changes.

8
00:00:21,210 --> 00:00:28,340
The other branch, spaghetti, is brand new.

9
00:00:28,340 --> 00:00:30,700
It also has a couple of new commits,

10
00:00:30,700 --> 00:00:35,940
and these commits introduce a new recipe for spaghetti alla carbonara.

11
00:00:35,940 --> 00:00:39,230
I just had to sneak an Italian dish into this training,

12
00:00:39,230 --> 00:00:44,240
at least one thing that I can pronounce properly.

13
00:00:44,240 --> 00:00:46,590
So, here is that situation again.

14
00:00:46,590 --> 00:00:50,000
We have two branches that diverged.

15
00:00:50,000 --> 00:00:52,230
To make the diagram simpler,

16
00:00:52,230 --> 00:00:56,150
I also used different colors for the commits in the two branches.

17
00:00:56,150 --> 00:01:02,340
The apple pie commits are orange and the spaghetti commits are light‑blue.

18
00:01:02,340 --> 00:01:05,260
Also because the spaghetti is the current branch,

19
00:01:05,260 --> 00:01:10,640
I drew it in green instead of drawing a separate head pointer.

20
00:01:10,640 --> 00:01:15,000
Now, we want to put the content of the two branches together.

21
00:01:15,000 --> 00:01:19,400
We already know one way to do this, we can merge the two branches.

22
00:01:19,400 --> 00:01:24,470
We are already on the spaghetti branch, so we could merge it with main.

23
00:01:24,470 --> 00:01:29,010
I will not do this, however, but if I did, here is what would happen.

24
00:01:29,010 --> 00:01:31,540
We would have a new commit,

25
00:01:31,540 --> 00:01:37,440
and the parents of this new commit would be the former tips of the two branches.

26
00:01:37,440 --> 00:01:42,540
Also, the current branch would move to this new merged commit.

27
00:01:42,540 --> 00:01:46,630
This is the usual merge thing that we already know about.

28
00:01:46,630 --> 00:01:47,280
In this case,

29
00:01:47,280 --> 00:01:52,240
it should also be an easy merge because we're not expecting any conflicts.

30
00:01:52,240 --> 00:01:54,630
However, I will not complete this merge.

31
00:01:54,630 --> 00:01:59,180
Instead, I will use another way to put two branches together.

32
00:01:59,180 --> 00:02:04,040
I will rebase the current branch over the other branch.

33
00:02:04,040 --> 00:02:08,540
If we rebase the spaghetti on main, then here is what happens.

34
00:02:08,540 --> 00:02:14,300
Git looks for the first commit in spaghetti that is also a commit in main.

35
00:02:14,300 --> 00:02:16,240
It's this commit here.

36
00:02:16,240 --> 00:02:18,980
This is the base of the spaghetti branch.

37
00:02:18,980 --> 00:02:23,360
All the history before this commit is already shared between the two branches,

38
00:02:23,360 --> 00:02:26,240
so it's not relevant here.

39
00:02:26,240 --> 00:02:30,850
Now, Git detaches the entire spaghetti branch from this

40
00:02:30,850 --> 00:02:38,470
commit and moves it on top of main, so it changes the base of this branch.

41
00:02:38,470 --> 00:02:41,340
That's why it's called a rebase.

42
00:02:41,340 --> 00:02:45,580
Like in a merge, we might have to solve conflicts to complete the rebase,

43
00:02:45,580 --> 00:02:48,200
but in this case, there are no conflicts.

44
00:02:48,200 --> 00:02:53,700
The changes in the two branches impact different files, so we're done already.

45
00:02:53,700 --> 00:02:54,470
Now,

46
00:02:54,470 --> 00:02:58,010
the spaghetti branch contains all the commits from the

47
00:02:58,010 --> 00:03:03,740
main branch plus the spaghetti stuff, which is what we wanted.

48
00:03:03,740 --> 00:03:07,060
What happens if we want it to work the other way as well,

49
00:03:07,060 --> 00:03:11,540
and we want the stuff from spaghetti in the main branch?

50
00:03:11,540 --> 00:03:17,040
Just like in a merge, we can just switch to main and rebase the other way.

51
00:03:17,040 --> 00:03:21,520
Let's switch to main, here, main is now the current branch,

52
00:03:21,520 --> 00:03:27,240
it changed to green in the diagram, and now let's rebase.

53
00:03:27,240 --> 00:03:30,490
Actually, in this particular case, I could either rebase or

54
00:03:30,490 --> 00:03:34,800
merge, and it would make no difference whatsoever. In both cases,

55
00:03:34,800 --> 00:03:37,970
Git can just fast‑forward the branch.

56
00:03:37,970 --> 00:03:42,140
A rebase can be fast‑forwarded just like a merge.

57
00:03:42,140 --> 00:03:45,290
So this is what we have now. Like in a merge,

58
00:03:45,290 --> 00:03:49,660
we have all the commits that deal with the spaghetti and all the commits

59
00:03:49,660 --> 00:03:53,070
that deal with the pie in the same history; however,

60
00:03:53,070 --> 00:03:54,580
different than a merge,

61
00:03:54,580 --> 00:04:00,020
we got that result not by having multiple branches flow together, but by

62
00:04:00,020 --> 00:04:06,340
rearranging the branches so that they look like one single branch.

63
00:04:06,340 --> 00:04:10,560
The way I just described it, a rebase is pretty simple; however,

64
00:04:10,560 --> 00:04:11,660
to be honest,

65
00:04:11,660 --> 00:04:15,310
I'm making it a bit too simple maybe. It's actually

66
00:04:15,310 --> 00:04:20,000
slightly more complicated than that. Let's see why.

