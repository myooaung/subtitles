WEBVTT
1
00:00:00.840 --> 00:00:04.250
Take one last look at this object model because there is

2
00:00:04.250 --> 00:00:07.240
something interesting to say about it.

3
00:00:07.240 --> 00:00:12.640
Look at the whole model from an abstract point of view. What do we have here?

4
00:00:12.640 --> 00:00:13.010
Well,

5
00:00:13.010 --> 00:00:18.980
we have a structure where somethings contain data, blobs, and then there are

6
00:00:18.980 --> 00:00:24.220
other things called trees that contain blobs and other trees.

7
00:00:24.220 --> 00:00:29.190
So the entire structure is recursive. And the names of the blobs and

8
00:00:29.190 --> 00:00:32.030
trees, they are not in the objects themselves.

9
00:00:32.030 --> 00:00:34.930
Instead, they are stored in the containing tree.

10
00:00:34.930 --> 00:00:37.140
So, you can have the same object,

11
00:00:37.140 --> 00:00:40.880
say the same blob or the same tree, pointed at by

12
00:00:40.880 --> 00:00:43.840
different trees with different names.

13
00:00:43.840 --> 00:00:48.140
Does this structure remind you of anything?

14
00:00:48.140 --> 00:00:53.540
Well, to me, it looks an awful lot like a file system.

15
00:00:53.540 --> 00:00:55.460
Just like in a file system,

16
00:00:55.460 --> 00:01:00.450
you have content, files, or blobs, and nested containers,

17
00:01:00.450 --> 00:01:05.460
directories, or trees in this case, and you can have links.

18
00:01:05.460 --> 00:01:08.970
The same file or directory can be reached from different

19
00:01:08.970 --> 00:01:11.240
places with different names.

20
00:01:11.240 --> 00:01:14.940
It's like links in Linux or shortcuts in Windows.

21
00:01:14.940 --> 00:01:18.640
In fact, you might argue that that's what Git is.

22
00:01:18.640 --> 00:01:24.040
It's a high‑level file system built on top of your native file system.

23
00:01:24.040 --> 00:01:26.790
This shouldn't surprise us. After all,

24
00:01:26.790 --> 00:01:30.830
Git was written by Linus Torvalds who wrote Linux. He is an

25
00:01:30.830 --> 00:01:34.420
operating system kind of person, so when he built a version

26
00:01:34.420 --> 00:01:37.950
control system he built it like a file system.

27
00:01:37.950 --> 00:01:42.560
That's just the way he thinks. It's a version file system, of course,

28
00:01:42.560 --> 00:01:47.420
because it also has commits, which have versioning. And that's what

29
00:01:47.420 --> 00:01:51.840
we mean when we say that Git is a content tracker.

30
00:01:51.840 --> 00:01:58.030
So, we have seen that Git is a persistent map at its core. And layered on top

31
00:01:58.030 --> 00:02:02.990
of that is a stupid content tracker that looks a lot like a versioned file

32
00:02:02.990 --> 00:02:08.400
system. In the next module, we will put this theory to work to understand the

33
00:02:08.400 --> 00:02:11.330
all‑important next layer of the onion.

34
00:02:11.330 --> 00:02:15.380
You will see how easy Git branches are and how easy

35
00:02:15.380 --> 00:02:23.000
branch‑related operations are once you know the basic model of Git. See you in the next module.

