1
00:00:00,840 --> 00:00:03,810
So, we want to wrap our head around Git.

2
00:00:03,810 --> 00:00:07,580
Let's start by talking about what Git really is.

3
00:00:07,580 --> 00:00:10,840
It's not necessarily what you think.

4
00:00:10,840 --> 00:00:14,540
Imagine that Git is layered like an onion.

5
00:00:14,540 --> 00:00:17,430
We won't try to understand the whole onion at once.

6
00:00:17,430 --> 00:00:21,340
That would be very ambitious to eat the whole onion.

7
00:00:21,340 --> 00:00:21,940
Instead,

8
00:00:21,940 --> 00:00:27,740
we will peel off the layers of the onion until we reach Git's conceptual core.

9
00:00:27,740 --> 00:00:33,440
One common definition of Git is a distributed revision control system.

10
00:00:33,440 --> 00:00:34,620
That's a mouthful.

11
00:00:34,620 --> 00:00:37,890
Not only Git does what other revision control systems

12
00:00:37,890 --> 00:00:40,760
do; it does that in a distributed way.

13
00:00:40,760 --> 00:00:44,300
That's harder to understand than traditional client server or

14
00:00:44,300 --> 00:00:47,640
revision control systems like Subversion.

15
00:00:47,640 --> 00:00:52,160
So let's make things easier for ourselves and peel off one layer.

16
00:00:52,160 --> 00:00:53,730
Let's remove distribution.

17
00:00:53,730 --> 00:00:59,070
In this first part of this training, imagine that Git is not distributed at all.

18
00:00:59,070 --> 00:01:03,000
If you can, imagine that there is only one computer in the world,

19
00:01:03,000 --> 00:01:05,300
and there is a repository on that computer.

20
00:01:05,300 --> 00:01:08,340
That's all you want to think about for the moment.

21
00:01:08,340 --> 00:01:14,140
So, Git becomes just a revision control system, no distribution.

22
00:01:14,140 --> 00:01:18,500
However, a revision control system is still a complex beast.

23
00:01:18,500 --> 00:01:22,080
It includes things such as history, branches,

24
00:01:22,080 --> 00:01:26,340
merges, and these features make things more complicated.

25
00:01:26,340 --> 00:01:28,710
So again, let's simplify things.

26
00:01:28,710 --> 00:01:31,020
Let's remove one more layer.

27
00:01:31,020 --> 00:01:35,530
What happens if you forget about branches, history, and the like.

28
00:01:35,530 --> 00:01:37,890
Now we have a smaller onion.

29
00:01:37,890 --> 00:01:42,370
You can call it a stupid content tracker, because that's all it does.

30
00:01:42,370 --> 00:01:45,940
It tracks content, files, or directories.

31
00:01:45,940 --> 00:01:48,370
And if you look at Git's documentation,

32
00:01:48,370 --> 00:01:51,520
you will see that this is actually Git's definition of itself,

33
00:01:51,520 --> 00:01:54,940
Git â€‘ the stupid content tracker.

34
00:01:54,940 --> 00:01:59,560
If you look at it as a content tracker, then Git is easier to understand.

35
00:01:59,560 --> 00:02:02,820
But let's take this one step further.

36
00:02:02,820 --> 00:02:05,450
Forget even about tracking files.

37
00:02:05,450 --> 00:02:07,410
Forget about the notion of a commit.

38
00:02:07,410 --> 00:02:08,990
Forget about versioning.

39
00:02:08,990 --> 00:02:13,970
Let's look at the very core of the onion, the basic idea behind Git.

40
00:02:13,970 --> 00:02:18,540
And let us say that at its core, Git is just a map,

41
00:02:18,540 --> 00:02:22,170
a simple structure that maps keys to values.

42
00:02:22,170 --> 00:02:27,180
And this structure is persistent; it's stored on your disk.

43
00:02:27,180 --> 00:02:30,260
Now we've reached the core of Git.

44
00:02:30,260 --> 00:02:31,600
During this training,

45
00:02:31,600 --> 00:02:34,880
we will rebuild the onion from the inside out and

46
00:02:34,880 --> 00:02:36,920
understand each layer in depth.

47
00:02:36,920 --> 00:02:39,920
In this module of the training we'll talk about the

48
00:02:39,920 --> 00:02:42,140
first two layers of the onion.

49
00:02:42,140 --> 00:02:44,550
This information will be pretty technical.

50
00:02:44,550 --> 00:02:48,020
You might even wonder why I will go into so many details,

51
00:02:48,020 --> 00:02:50,990
but this is the groundwork we're laying here.

52
00:02:50,990 --> 00:02:54,580
Be assured that by the time we get to the second module and

53
00:02:54,580 --> 00:02:56,960
we get to the outer layers of the onion,

54
00:02:56,960 --> 00:03:00,700
you will be surprised by how concretely useful this

55
00:03:00,700 --> 00:03:03,140
deep understanding turns how to be.

56
00:03:03,140 --> 00:03:09,000
Even things you've been doing every day with Git might look different and simpler.

