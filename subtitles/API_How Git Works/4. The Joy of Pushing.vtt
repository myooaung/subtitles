WEBVTT
1
00:00:00.840 --> 00:00:03.030
In the very first module of this training,

2
00:00:03.030 --> 00:00:09.140
we said that each Git object is just a sequence of bytes identified by hash.

3
00:00:09.140 --> 00:00:13.330
I also insisted a lot that shown hashes are unique.

4
00:00:13.330 --> 00:00:16.540
I said unique in the universe.

5
00:00:16.540 --> 00:00:17.220
Finally,

6
00:00:17.220 --> 00:00:20.650
this is the point in our training where we can see how

7
00:00:20.650 --> 00:00:23.840
that uniqueness is strongly useful.

8
00:00:23.840 --> 00:00:27.530
Look back at our two repositories. When we cloned,

9
00:00:27.530 --> 00:00:32.140
we copied the objects from the orange repo to the purple repo.

10
00:00:32.140 --> 00:00:36.550
Now imagine that we add a few new objects to the purple repo, for example,

11
00:00:36.550 --> 00:00:40.740
a new commit and the associated blobs and trees.

12
00:00:40.740 --> 00:00:44.520
Synchronization is mostly about getting the same objects on all the

13
00:00:44.520 --> 00:00:49.300
clones, but now it's easy for Git to synchronize those objects because

14
00:00:49.300 --> 00:00:52.630
each object is immutable and has a unique hash.

15
00:00:52.630 --> 00:00:55.040
So Git will never get confused.

16
00:00:55.040 --> 00:01:00.040
It can just copy the missing objects from one repo to the other.

17
00:01:00.040 --> 00:01:00.670
Well, okay,

18
00:01:00.670 --> 00:01:06.070
it's not quite that simple because copying the objects around is not

19
00:01:06.070 --> 00:01:10.280
enough. Git also has to keep the branches synchronized on the various

20
00:01:10.280 --> 00:01:14.350
clones, and that's where things get a bit tricky.

21
00:01:14.350 --> 00:01:16.640
Let's see how this works.

22
00:01:16.640 --> 00:01:20.840
I will make a change to this repo. After some experimentation, I

23
00:01:20.840 --> 00:01:25.170
realize that having just a little bit of lemon juice in my apple

24
00:01:25.170 --> 00:01:28.140
pie makes it taste even better.

25
00:01:28.140 --> 00:01:36.940
I will add this to the recipe and commit it.

26
00:01:36.940 --> 00:01:37.830
There we are.

27
00:01:37.830 --> 00:01:42.470
So now we have a few new objects in the database, a new blob to represent

28
00:01:42.470 --> 00:01:48.020
the file I changed, a new tree that represents the updated project route

29
00:01:48.020 --> 00:01:53.940
folder that is appointed to that blob, and this new commit here. And the

30
00:01:53.940 --> 00:02:00.050
local main branch is pointing at the new commit while the main branch on

31
00:02:00.050 --> 00:02:04.480
origin is still pointing at the previous commit, of course. Nobody changed

32
00:02:04.480 --> 00:02:05.660
that branch yet.

33
00:02:05.660 --> 00:02:08.920
And origin doesn't even have this commit and neither does

34
00:02:08.920 --> 00:02:12.340
it have the other new database objects.

35
00:02:12.340 --> 00:02:18.200
So let's send both the new objects and the updated branch to origin. You

36
00:02:18.200 --> 00:02:23.880
probably know the command that does that, git push. There we are.

37
00:02:23.880 --> 00:02:27.940
Now our new objects have been pushed to the remote.

38
00:02:27.940 --> 00:02:33.120
And let's do showâ€‘ref again. The branches and origin

39
00:02:33.120 --> 00:02:42.000
moved to point at the latest commit. Git updated our remote branches to align with the current state of origin.

