WEBVTT
1
00:00:01.940 --> 00:00:06.030
[Autogenerated] It's also important to lock down your I am users.

2
00:00:06.030 --> 00:00:10.190
They will be subject to any password policy you set on the AWS account,

3
00:00:10.190 --> 00:00:14.840
and I am users can also enable multi factor authentication.

4
00:00:14.840 --> 00:00:18.240
You can even add conditions to policies that check if a user

5
00:00:18.240 --> 00:00:21.890
authenticated with M F A and how long it's been since they

6
00:00:21.890 --> 00:00:24.030
authenticated with the M F A.

7
00:00:24.030 --> 00:00:32.540
The conditions are AWS multi factor off present and AWS multi factor off age.

8
00:00:32.540 --> 00:00:37.170
You want to keep track of access keys that error issued to I am users and

9
00:00:37.170 --> 00:00:41.640
track usage to detect and disable any compromised keys.

10
00:00:41.640 --> 00:00:41.980
Keys.

11
00:00:41.980 --> 00:00:46.140
That error not used should also be set to inactive or removed.

12
00:00:46.140 --> 00:00:49.290
It is very easy to generate new keys and each user

13
00:00:49.290 --> 00:00:51.580
can have up to two keys at a time.

14
00:00:51.580 --> 00:00:52.500
Finally,

15
00:00:52.500 --> 00:00:55.150
exercise the principle of least privilege when

16
00:00:55.150 --> 00:00:58.340
assigning permissions to I am users.

17
00:00:58.340 --> 00:01:04.600
Every user does not need access to all 175 plus AWS services,

18
00:01:04.600 --> 00:01:09.200
nor do they always need access to all actions within a service.

19
00:01:09.200 --> 00:01:12.770
By limiting the services and actions a user can perform,

20
00:01:12.770 --> 00:01:16.950
you also limit the attack surface for that user as well as the

21
00:01:16.950 --> 00:01:20.040
potential cost of any unauthorized activity.

22
00:01:20.040 --> 00:01:25.020
For example, suppose you wanted to limit all actions to a certain region.

23
00:01:25.020 --> 00:01:29.780
This statement denies all actions on all resource is if

24
00:01:29.780 --> 00:01:34.070
the AWS requested region is not us West.

25
00:01:34.070 --> 00:01:40.000
To suppose you wanted to limit all actions to a certain region except E.

26
00:01:40.000 --> 00:01:41.090
C two.

27
00:01:41.090 --> 00:01:45.550
In other words, you'd like to allow easy to actions in any region.

28
00:01:45.550 --> 00:01:53.440
You can use the not action element to exclude easy to actions from the Deny

29
00:01:53.440 --> 00:01:57.550
note that a not action does not grant any permissions.

30
00:01:57.550 --> 00:02:01.380
It just blocks these effect of the deny you would need to

31
00:02:01.380 --> 00:02:04.770
allow the action you are excluding in a separate statement

32
00:02:04.770 --> 00:02:07.820
or policy for administrators.

33
00:02:07.820 --> 00:02:12.280
You will usually grant all actions for a service by using an asterisk.

34
00:02:12.280 --> 00:02:15.760
However, for most non administrator users,

35
00:02:15.760 --> 00:02:18.900
granting all actions for a service does not follow

36
00:02:18.900 --> 00:02:21.040
the principle of least privilege.

37
00:02:21.040 --> 00:02:23.790
To limit the actions available in a service,

38
00:02:23.790 --> 00:02:26.180
you could take a couple of different approaches.

39
00:02:26.180 --> 00:02:30.920
The first would be to allow all actions for a service in one statement,

40
00:02:30.920 --> 00:02:36.200
but then deny certain actions of that service with a separate deny statement.

41
00:02:36.200 --> 00:02:40.080
This is a blacklist approach where you are identifying only those

42
00:02:40.080 --> 00:02:43.930
actions you want to deny while allowing everything else.

43
00:02:43.930 --> 00:02:47.240
The other approach would be to list only those actions you

44
00:02:47.240 --> 00:02:50.540
want to allow or a white list approach.

45
00:02:50.540 --> 00:02:54.420
This leverages Thebe Aeneid by default policy evaluation rule in

46
00:02:54.420 --> 00:02:59.040
I Am So you're only allowing users to perform actions that error

47
00:02:59.040 --> 00:03:01.740
explicitly listed in the statement.

48
00:03:01.740 --> 00:03:06.460
For example, here is a statement that only allows a few different,

49
00:03:06.460 --> 00:03:11.730
easy to actions any action that starts with describe reboot,

50
00:03:11.730 --> 00:03:17.040
start and stop instances when creating policies for your users.

51
00:03:17.040 --> 00:03:21.260
Look at the job a user needs to perform in your AWS account than

52
00:03:21.260 --> 00:03:25.020
create a policy that gives them only the permissions they need

53
00:03:25.020 --> 00:03:29.780
to do that job and nothing more, depending on the nature of their job duties.

54
00:03:29.780 --> 00:03:37.000
Sometimes a white list approach makes more sense, and in other cases, a blacklist approach is a better fit

