1
00:00:01,040 --> 00:00:04,550
[Autogenerated] securing accounts with roles is another great way to limit

2
00:00:04,550 --> 00:00:08,660
what can happen in an account when a user assumes a role,

3
00:00:08,660 --> 00:00:12,870
they only have the permissions granted by the role we talked about.

4
00:00:12,870 --> 00:00:18,220
Cross account access using roles in the designing for complexity on AWS course

5
00:00:18,220 --> 00:00:22,730
and how Rolls can do help you avoid creating dozens of I am users in your AWS

6
00:00:22,730 --> 00:00:26,110
organization for a single employees to do their job.

7
00:00:26,110 --> 00:00:28,940
You can also use rolls to allow third parties to

8
00:00:28,940 --> 00:00:31,240
perform actions in your account.

9
00:00:31,240 --> 00:00:35,340
When you allow third-party access, you should also protect your account.

10
00:00:35,340 --> 00:00:39,640
By requiring an external, I'd to assume the role.

11
00:00:39,640 --> 00:00:43,930
Suppose you hired Globomantics to monitor your AWS

12
00:00:43,930 --> 00:00:46,940
account for some performance improvements.

13
00:00:46,940 --> 00:00:52,040
You created a role called perf monitor with limited permissions and added

14
00:00:52,040 --> 00:00:56,340
the AWS account for Globomantics in the role trust policy.

15
00:00:56,340 --> 00:00:59,870
You provide the role error N two Globomantics who can then

16
00:00:59,870 --> 00:01:03,140
access your account by assuming the role.

17
00:01:03,140 --> 00:01:07,970
Suppose a bad actor also signs up for Globomantics services and

18
00:01:07,970 --> 00:01:11,660
gives the same role error end to Globomantics either through

19
00:01:11,660 --> 00:01:13,680
guessing it or some other means.

20
00:01:13,680 --> 00:01:17,880
The bad actor can now trick Globomantics into providing access

21
00:01:17,880 --> 00:01:20,840
or information to your account for them.

22
00:01:20,840 --> 00:01:24,340
This is known as the confused deputy problem.

23
00:01:24,340 --> 00:01:29,290
Using an external IDE to assume a role can combat this problem.

24
00:01:29,290 --> 00:01:31,570
When you create the role trust policy,

25
00:01:31,570 --> 00:01:35,200
add a condition to check for an external I'd

26
00:01:35,200 --> 00:01:37,050
Globomantics would provide you with this.

27
00:01:37,050 --> 00:01:41,040
I'd as it should be unique for each of their customers.

28
00:01:41,040 --> 00:01:44,060
Now, if the bad actor guesses the error N,

29
00:01:44,060 --> 00:01:49,590
any requests to your account would have the external I'd for the bad actors

30
00:01:49,590 --> 00:01:54,240
account instead of your account as assigned by Globomantics,

31
00:01:54,240 --> 00:01:58,250
and any attempts to assume the role in your account would fail.

32
00:01:58,250 --> 00:02:01,940
Note that if you are in the position of providing services to other

33
00:02:01,940 --> 00:02:05,540
AWS accounts like Globomantics in this example,

34
00:02:05,540 --> 00:02:09,820
you should always test that your customers policies error correct and that

35
00:02:09,820 --> 00:02:18,000
requests that do not include an external IDE actually fail. Otherwise, their account could still be vulnerable.

