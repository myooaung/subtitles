WEBVTT
1
00:00:01.140 --> 00:00:05.620
[Autogenerated] AWS Cloudhsm is the service to use If you require a

2
00:00:05.620 --> 00:00:10.250
single tenant hardware security module to manage your keys or if you

3
00:00:10.250 --> 00:00:17.180
need to interact directly with the HSM, cloudhsm launches into your own vpc.

4
00:00:17.180 --> 00:00:21.140
So you have total control over access to the device.

5
00:00:21.140 --> 00:00:25.340
You pay an hourly charge for each cloudhsm you launch.

6
00:00:25.340 --> 00:00:28.500
This is different than the previous generation where you had

7
00:00:28.500 --> 00:00:31.370
to pay an upfront fee for each device.

8
00:00:31.370 --> 00:00:37.400
Now you simply pay an hourly charge for each device you use with cloudhsm.

9
00:00:37.400 --> 00:00:40.120
AWS automates the hardware provisioning,

10
00:00:40.120 --> 00:00:44.370
patching and backups of the underlying hs ems so you can

11
00:00:44.370 --> 00:00:48.390
interact with your cluster as one logical HSM.

12
00:00:48.390 --> 00:00:52.540
You can add and remove HS EMS from your cluster on demand and

13
00:00:52.540 --> 00:00:57.250
cloudhsm will automatically load balance requests and securely

14
00:00:57.250 --> 00:01:01.240
duplicate keys to all HSM in the cluster.

15
00:01:01.240 --> 00:01:06.460
Some example use cases for cloudhsm include using a cloudhsm

16
00:01:06.460 --> 00:01:09.480
cluster has a custom key store for A W.

17
00:01:09.480 --> 00:01:09.770
S.

18
00:01:09.770 --> 00:01:09.990
K.

19
00:01:09.990 --> 00:01:10.900
M s.

20
00:01:10.900 --> 00:01:13.690
This can do give you the flexibility and integration

21
00:01:13.690 --> 00:01:16.200
of kms while ensuring your keys.

22
00:01:16.200 --> 00:01:18.180
Stay on your own single tenant.

23
00:01:18.180 --> 00:01:23.970
HSM is performing SSL acceleration by offloading some of the SSL and

24
00:01:23.970 --> 00:01:29.450
TLS computation from your Web servers to the Cloud HSM cluster and

25
00:01:29.450 --> 00:01:33.910
securing the servers private key in the HSM,

26
00:01:33.910 --> 00:01:37.500
protecting the private keys For a issuing certificate authority.

27
00:01:37.500 --> 00:01:41.970
You can store the private key on your Cloud HSM cluster and used the

28
00:01:41.970 --> 00:01:46.340
HSM to perform the cryptographic signing operations.

29
00:01:46.340 --> 00:01:50.050
You'll run a cloudhsm client on your application hosts.

30
00:01:50.050 --> 00:01:56.120
To establish a secure connection to the HSM is you can then use various software

31
00:01:56.120 --> 00:02:01.330
libraries to allow your applications to perform cryptographic operations on the

32
00:02:01.330 --> 00:02:08.950
HSM is let's look at the cost to run CloudWatch HSM versus Kms to run a cloudhsm

33
00:02:08.950 --> 00:02:12.130
cluster with two HS EMS for one month.

34
00:02:12.130 --> 00:02:15.820
We're running two for high availability and durability would cost

35
00:02:15.820 --> 00:02:20.050
you a flat fee of a dollar 60 per hour per device,

36
00:02:20.050 --> 00:02:22.040
which may vary by region.

37
00:02:22.040 --> 00:02:25.960
You can store up to 3800 keys per device and you can

38
00:02:25.960 --> 00:02:28.680
utilize the full capacity of the device.

39
00:02:28.680 --> 00:02:31.360
In other words, you're not charged per call.

40
00:02:31.360 --> 00:02:37.240
So for two hs EMS, you would pay about $2380 per month.

41
00:02:37.240 --> 00:02:37.520
K.

42
00:02:37.520 --> 00:02:43.970
M s charges you $1 per month for each customer managed key Until you delete it,

43
00:02:43.970 --> 00:02:48.660
you're then charged per request for encryption and decryption.

44
00:02:48.660 --> 00:02:52.340
So if you had one key and made one million requests,

45
00:02:52.340 --> 00:02:54.940
you would pay about $4 per month.

46
00:02:54.940 --> 00:02:58.290
Kms is extremely low cost if you're dealing with

47
00:02:58.290 --> 00:03:01.140
smaller numbers of keys and requests.

48
00:03:01.140 --> 00:03:02.060
However,

49
00:03:02.060 --> 00:03:08.540
if you used Kms to manage 2500 keys and had the same one million requests,

50
00:03:08.540 --> 00:03:12.190
then you would be paying about 25 04 per month.

51
00:03:12.190 --> 00:03:16.480
Or if you had one key with one billion requests,

52
00:03:16.480 --> 00:03:21.670
then you would pay about 3000 and $1 per month for cost comparison.

53
00:03:21.670 --> 00:03:25.100
It really depends on how many keys you're managing and

54
00:03:25.100 --> 00:03:28.240
how Maney requests you make each month.

55
00:03:28.240 --> 00:03:32.620
Let's look at a few more differences between CloudWatch, HSM and Kms.

56
00:03:32.620 --> 00:03:36.100
We've mentioned that Cloud HSM is single tenant.

57
00:03:36.100 --> 00:03:40.430
You are the only user of the device, while Kms is multi tenant,

58
00:03:40.430 --> 00:03:46.540
with each user operating in an isolated partition of a shared HSM device.

59
00:03:46.540 --> 00:03:51.910
With Cloudhsm, you can export master keys to other locations,

60
00:03:51.910 --> 00:03:56.440
but with kms you cannot export master keys.

61
00:03:56.440 --> 00:04:01.840
Cloudhsm is certified at a level three of Phipps 1 42

62
00:04:01.840 --> 00:04:06.940
while Kms is a Level two overall, with some Level three components.

63
00:04:06.940 --> 00:04:11.940
Cloudhsm may give you better performance depending on your usage as it is

64
00:04:11.940 --> 00:04:17.780
dedicated hardware directly connected to your VPC while kms is going to be on

65
00:04:17.780 --> 00:04:22.140
shared hardware access via of regional endpoint.

66
00:04:22.140 --> 00:04:22.940
Finally,

67
00:04:22.940 --> 00:04:26.850
if you need direct access to the HSM for your application

68
00:04:26.850 --> 00:04:30.550
iCloud HSM has APIs to let you do that while K.

69
00:04:30.550 --> 00:04:35.860
M s is a service only you have no access to the underlying HSM.

70
00:04:35.860 --> 00:04:40.950
Only the kms service will directly interact with the underlying HSM.

71
00:04:40.950 --> 00:04:53.000
Overall, iCloud HSM is designed for direct integration with your application, while K M s is designed for easy integration with other AWS services.

