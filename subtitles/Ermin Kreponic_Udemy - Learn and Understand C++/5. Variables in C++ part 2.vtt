WEBVTT

00:00:00.000 --> 00:00:03.064
Ok so, now let's go
ahead and begin our

00:00:03.089 --> 00:00:05.850
variable declaration
and some general

00:00:05.850 --> 00:00:08.524
things. So usually one
of the most common

00:00:08.549 --> 00:00:10.530
variables and one
of the first ones

00:00:10.530 --> 00:00:18.170
that you will learn about is int, so
we can type in int, year we will assign a

00:00:20.170 --> 00:00:24.090
value of 2016 but anyway
this is a variable

00:00:24.115 --> 00:00:28.010
year of type int.
So, variable year

00:00:28.010 --> 00:00:35.090
of type int, the value of this variable is
not yet defined that is. This variable is

00:00:37.190 --> 00:00:43.219
not initialized it however it does have
a value believe it or not regardless of

00:00:43.219 --> 00:00:49.160
whether we assign it or not it has the
value of whatever whatever was in the

00:00:49.160 --> 00:00:52.655
memory in that
particular location for

00:00:52.680 --> 00:00:56.050
the variable was
declared, so we have

00:00:56.149 --> 00:01:01.570
occupied a certain amount of memory
space and whatever was within that

00:01:01.570 --> 00:01:04.271
memory space is now
now belongs to this

00:01:04.296 --> 00:01:07.030
variable you can do
a printout of this

00:01:07.130 --> 00:01:10.640
variable without the
initialisation you will

00:01:10.665 --> 00:01:13.540
get some some random
things basically to

00:01:13.540 --> 00:01:17.097
an extent anyway now
we can go ahead

00:01:17.122 --> 00:01:20.959
and set the value
of a variable so we

00:01:21.059 --> 00:01:23.273
can set the value
of a variable down

00:01:23.298 --> 00:01:25.000
below if you want
somewhere along the

00:01:25.100 --> 00:01:32.200
way on your code year equals 2016 you can read it clear your

00:01:32.200 --> 00:01:36.620
variable by typing
in year equals 2017

00:01:36.645 --> 00:01:40.549
somewhere later a long
the code so at this

00:01:40.549 --> 00:01:46.049
point I don't know you have to have some
code in between them and here, the year

00:01:46.049 --> 00:01:51.530
had the variable year had the value of
2016 and somewhere down the road you

00:01:51.530 --> 00:01:56.909
decided to change the value of the
variable year to 2017 and now it will

00:01:56.909 --> 00:02:00.120
have the value of 2017

00:02:00.120 --> 00:02:04.250
so just wanted to clear it out.
Now, we

00:02:04.275 --> 00:02:07.780
can write it we can
actually use this

00:02:07.780 --> 00:02:14.860
variable and we can write it to standard
output like this so std cout and

00:02:19.160 --> 00:02:24.335
certain up here and we
can type in I don't

00:02:24.360 --> 00:02:29.040
know year is space
and there should

00:02:29.040 --> 00:02:33.930
operate every year so we will simply use
the variable and it will print out the

00:02:33.930 --> 00:02:36.507
value of the variable
the value that is

00:02:36.532 --> 00:02:38.380
contained within the
variable but I do

00:02:38.480 --> 00:02:43.727
like this, ok come on, here we go.
So year

00:02:43.752 --> 00:02:48.640
is 2016 as you can see
year is 2016 because

00:02:48.640 --> 00:02:54.880
year contains the value of the variable
here just let me go ahead and added

00:02:59.980 --> 00:03:07.740
find properties BufferSize font to be
like 24, ok,

00:03:10.840 --> 00:03:14.098
yep they're we go so
this must be much

00:03:14.123 --> 00:03:17.060
better as you can
see it a lot easier

00:03:17.060 --> 00:03:21.970
because I know actually it sealed it
all the printouts it says year is

00:03:21.970 --> 00:03:29.190
2016 just as it says here year and
then the variable year but the variable

00:03:29.190 --> 00:03:33.209
year won't get printed out its value
will be taken and that will be printed

00:03:33.209 --> 00:03:37.564
out on the screen we can declare

00:03:37.589 --> 00:03:40.930
multiple variables
of the same type in

00:03:41.030 --> 00:03:48.840
one line so for example if I do this I
don't know down below we can type in int

00:03:49.540 --> 00:03:53.060
a equals I don't know 10
we can say b, we don't

00:03:53.085 --> 00:03:57.030
need to clear b and
there we can say like c

00:03:57.030 --> 00:03:59.815
equals 14 you don't
need these bases

00:03:59.840 --> 00:04:02.600
that I'm making here,
I'm just making

00:04:02.600 --> 00:04:03.830
them so that you can

00:04:03.830 --> 00:04:07.610
see it better doesn't make a difference
to computer, it doesn't make a difference

00:04:07.940 --> 00:04:15.790
to the machine and d equals 5, e equals a keep in mind, f equals to whatever five and

00:04:22.590 --> 00:04:26.409
then we can say G we
don't need to clear

00:04:26.434 --> 00:04:29.650
G initialize G. So,
a equals to 10, b is

00:04:29.750 --> 00:04:36.350
initialized, c is equal to 14, d is equal
to 5 and you see that we are separating days

00:04:36.350 --> 00:04:39.406
initializations this
declaration and

00:04:39.431 --> 00:04:43.550
initialization with a
coma so in between

00:04:43.650 --> 00:04:47.089
each variable we have
a coma and here we

00:04:47.114 --> 00:04:50.890
see e is equal to a,
which is a perfectly

00:04:50.890 --> 00:04:54.617
valid statement, so
one variable e is

00:04:54.642 --> 00:04:57.880
initialized to the
value of another

00:04:57.980 --> 00:05:02.089
variable a, so e will
be effectively equal

00:05:02.114 --> 00:05:06.420
to 10 so let's take
a look at a rather

00:05:06.520 --> 00:05:13.640
simple example and see what happens here
so we shall leave year and then we

00:05:16.440 --> 00:05:19.521
should go ahead and begin our

00:05:19.546 --> 00:05:22.210
declaration so mon
for month, so month

00:05:22.210 --> 00:05:29.669
let's say 3, day shall be equal to
16, semicolon here so we have, I'm sorry

00:05:34.169 --> 00:05:38.490
don't need to semi colons and so we shall
initialize all three of these variables

00:05:38.490 --> 00:05:40.960
here as well

00:05:40.960 --> 00:05:46.360
2016 so they're all initialize now let's
go ahead and use them

00:05:47.210 --> 00:05:54.240
std, colon colon, cout,
insertion, today is, colon,

00:05:54.265 --> 00:06:01.130
close the quote marks
so because C++ ignores

00:06:01.130 --> 00:06:04.077
white spaces, they
do not matter, we can

00:06:04.102 --> 00:06:06.990
write our command
on several lines in

00:06:07.090 --> 00:06:12.269
order to just to increase
the clarity level so to say, I mean I

00:06:12.269 --> 00:06:13.670
doesn't matter perhaps

00:06:13.670 --> 00:06:15.668
that much now, it's
truly for aesthetic

00:06:15.693 --> 00:06:17.910
purposes but later on in
the code you will see

00:06:17.910 --> 00:06:20.660
how sometimes this can help you out

00:06:20.660 --> 00:06:24.070
make your code look a
lot nicer and a lot and

00:06:24.095 --> 00:06:27.480
makes it more readable
so to say, let's go

00:06:27.480 --> 00:06:30.850
ahead and place our in insertion variable
insertion over here

00:06:30.850 --> 00:06:37.570
std, colon colon, setw, 2, so we're
setting with here it's going to be day

00:06:44.170 --> 00:06:48.195
so let's go into
the next line, we

00:06:48.220 --> 00:06:52.220
could have actually
they could have

00:06:52.220 --> 00:06:55.180
placed these insertion operators

00:06:55.180 --> 00:06:59.185
this is all the same
as this so we're

00:06:59.210 --> 00:07:02.870
simply putting it in
the next line that

00:07:02.870 --> 00:07:10.325
is all there is to it, so
let's place a dot here,

00:07:10.350 --> 00:07:16.990
not big deal, it's go
down and std colon colon

00:07:16.990 --> 00:07:23.116
setw, 2 again,
insertion, mon, so

00:07:23.141 --> 00:07:29.124
for mon, let's put another dot

00:07:33.120 --> 00:07:37.335
and at last should type
in year, insertion,

00:07:37.360 --> 00:07:41.550
insertion and then we'll
put a dot here so we could

00:07:41.550 --> 00:07:43.553
have placed this dot
in next line you

00:07:43.578 --> 00:07:45.410
can see this would
be pretty much

00:07:45.510 --> 00:07:50.300
the same but I just wanted to make a bit
of a demonstration here of how you can

00:07:50.300 --> 00:07:54.584
have different variants
of this and if I

00:07:54.609 --> 00:07:58.510
build and run this, I
should get an error of

00:07:58.610 --> 00:08:04.670
course so let's go
ahead and see where

00:08:04.695 --> 00:08:10.753
the problem lies so
day as equal to 16

00:08:12.419 --> 00:08:17.566
that doesn't seem to be a
problem so am I missing a

00:08:17.591 --> 00:08:22.644
semicolon somewhere? So
there's a semicolon here

00:08:24.479 --> 00:08:28.432
ok here we go semicolon
at the end, excelent!

00:08:28.457 --> 00:08:32.210
that let's go ahead and
build and run this

00:08:32.310 --> 00:08:39.529
come on my good man do not torment me
so I have not so much for all

00:08:39.529 --> 00:08:42.529
or harm

00:08:43.649 --> 00:08:47.091
setup leave is not
recognized right once

00:08:47.116 --> 00:08:50.869
again why did I delete this one?
I have no idea

00:08:52.559 --> 00:09:00.529
include Iomanip when you do
some manipulation so obviously

00:09:03.070 --> 00:09:06.300
and happen yes there we go

00:09:06.300 --> 00:09:11.936
so today is 16 dot
space 3 dot 2016 dot.

00:09:11.961 --> 00:09:17.050
So let's follow this
through the day is ok.

00:09:18.500 --> 00:09:25.777
colon, space,
excellent, all is there

00:09:25.802 --> 00:09:32.261
setw 2 and then it
says day so they

00:09:32.360 --> 00:09:37.528
today is ok 16 sorry yes so

00:09:37.553 --> 00:09:42.820
setw 2, so one two,16, then we

00:09:42.920 --> 00:09:48.180
have a dot again we have setw 2
and we're supposed to print out

00:09:48.180 --> 00:09:53.762
the month, the month is
the 3, so 1, 2 so two,

00:09:53.787 --> 00:09:59.760
positions dot again
and year 2016 and dot

00:09:59.860 --> 00:10:02.831
at the end, so what if
we for example wanted

00:10:02.856 --> 00:10:05.130
to place a zero here
instead of empty

00:10:05.230 --> 00:10:07.754
space so that we
would actually get a

00:10:07.779 --> 00:10:10.480
more formatted output
so let's go ahead

00:10:10.480 --> 00:10:17.530
and modify this code and make that
happen for us, we will now modified this

00:10:17.530 --> 00:10:25.350
in a sort of printing out like I don't
know, this format of day 16

00:10:28.350 --> 00:10:32.652
space 3 dot 2016 were
gonna go ahead and

00:10:32.677 --> 00:10:36.340
print out 16 dot zero
3 and 2016 which is

00:10:36.340 --> 00:10:40.398
actually more meaningful
output, to do

00:10:40.423 --> 00:10:43.910
this we will use std
setfill from iomanip

00:10:43.910 --> 00:10:51.880
library which we have included here setfill allows us to fill in the empty

00:10:51.880 --> 00:10:57.270
places with whatever we pretty much one
or specify its rather simple but very

00:10:57.270 --> 00:11:00.305
useful in the long
run so we can leave

00:11:00.330 --> 00:11:03.340
the variables to be
initialized as they

00:11:03.340 --> 00:11:08.670
are we don't really need to change
anything there this part we can also

00:11:08.670 --> 00:11:14.880
pretty much leave as it is and then as
it begins here so it says that said std setw

00:11:16.170 --> 00:11:21.139
2, we will inserted here so insertion up
here

00:11:21.750 --> 00:11:27.927
std, colon, colon,
setfill, space, 0 so

00:11:27.952 --> 00:11:33.610
we want to fill the
empty space with

00:11:33.610 --> 00:11:41.081
zero and so down below
shall also state

00:11:41.106 --> 00:11:48.089
that std, colon, colon,
setfill, because

00:11:48.189 --> 00:11:49.799
why my placing is
you're up there because

00:11:49.824 --> 00:11:51.700
you can also have days which are

00:11:51.800 --> 00:11:59.460
123456789 and then after 10 they begin
to go they go into two-digit numbers so

00:12:01.260 --> 00:12:06.709
setfill and we should have a zero here as
well

00:12:07.860 --> 00:12:11.921
excellent so we don't
actually need to

00:12:11.946 --> 00:12:15.670
do anything else
really we can just

00:12:15.670 --> 00:12:18.670
leave it as it is we can just go ahead
and run it

00:12:21.100 --> 00:12:23.475
I don't know whys is
taking so long to actually

00:12:23.500 --> 00:12:25.730
run these programs ok so
there you go see it says

00:12:25.730 --> 00:12:30.026
today is colon 16,
03, 2016 we can in

00:12:30.051 --> 00:12:34.950
fact change these
variables to be like ok

00:12:34.950 --> 00:12:38.250
let's say that today is the sixth day of the
month

00:12:38.250 --> 00:12:43.203
what would happen then?
you see, it says 06

00:12:43.228 --> 00:12:47.950
just feels the empty
spaces with whatever we

00:12:48.050 --> 00:12:50.313
specify we have
specified that we want

00:12:50.338 --> 00:12:52.260
the empty space to
be filled with zero

00:12:52.260 --> 00:12:56.462
and so indeed they are.
Anyway that would

00:12:56.487 --> 00:13:00.350
be it for the basics
of variables, we

00:13:00.450 --> 00:13:02.314
will be using variables
throughout our

00:13:02.339 --> 00:13:04.090
code I don't think
it will be a single

00:13:04.190 --> 00:13:09.660
example with all the variables included. This subject

00:13:09.660 --> 00:13:12.847
will expand to a
rather large extent

00:13:12.872 --> 00:13:16.110
that anyway we're pretty much

00:13:16.110 --> 00:13:21.640
done and over with this initial chapter.
And now, we're gonna go ahead and go to

00:13:21.640 --> 00:13:22.640
chapter 2.