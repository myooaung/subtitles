WEBVTT

00:00.330 --> 00:02.030
Dar una buena acogida.

00:02.460 --> 00:05.220
Entonces, vamos a seguir adelante y comenzar el Capítulo 12.

00:05.220 --> 00:13.500
Y aquí hablaremos sobre conceptos de clase avanzada y principalmente nos enfocaremos en constructores que básicamente objetan estado

00:13.560 --> 00:21.540
inicial al ser creados o tres reglas básicas que tienen regla de regla cero de tres y

00:21.540 --> 00:23.200
regla de cinco.

00:23.430 --> 00:30.000
Te van a parecer un poco abstractos mientras los explico ahora, pero verás a

00:30.000 --> 00:34.980
través de una serie de ejemplos cómo se verá realmente.

00:35.040 --> 00:42.130
Entonces tienes una regla de cero que dice que el usuario no define constructores o destructores.

00:42.960 --> 00:50.390
Para los destructores ni la deuda de los operadores de asignación es básicamente esa sería nuestra fecha de clase.

00:50.860 --> 01:01.050
Si recuerda de todos modos, la regla de tres dice que si definimos un constructor de copia entonces probablemente

01:01.080 --> 01:06.810
también tengamos que definir el destructor y el operador de asignación.

01:06.810 --> 01:08.190
Regla de 5.

01:08.190 --> 01:15.300
Por otro lado, se trata de una extensión de la regla de tres que implica el constructor de movimientos y el operador de

01:15.330 --> 01:16.250
asignación de movimientos.

01:16.560 --> 01:22.860
Y no se preocupe si no entendió estas tres reglas para la primera se extiende solo siga a lo

01:22.860 --> 01:24.540
largo de la editorial y.

01:24.570 --> 01:29.790
Eventualmente lo hará o debería ser bastante claro.

01:30.830 --> 01:34.330
De todos modos vamos adelante y saltamos a los constructores.

01:34.340 --> 01:37.790
Hay partes especiales de A.

01:37.790 --> 01:44.660
Ah, por cierto, antes de que tengamos la libertad de verificar estas tres reglas en la red, también tenemos definiciones

01:44.660 --> 01:51.230
para ellas y creo que no sería una mala idea solo leer sobre ellas un poco, pero solo usar

01:51.230 --> 01:56.940
su motor de búsqueda favorito. escriba la regla de cero C ++ y las clases C ++.

01:56.970 --> 01:59.210
Encontrarás una tonelada de material allí.

01:59.270 --> 02:02.010
Lo mismo aplica para la regla de tres y la regla de cinco.

02:02.010 --> 02:04.510
No vayas demasiado por la documentación.

02:04.520 --> 02:11.240
Realmente no hay necesidad de leer las definiciones básicas y tratar de entenderlas un poco mejor.

02:11.240 --> 02:16.420
Pero como dije, si sigues los ejemplos que también deberían estar bien.

02:16.470 --> 02:26.690
De todos modos, los constructores son partes especiales de una clase que básicamente será ejecutada cuando se crea una

02:26.750 --> 02:29.150
instancia de la clase.

02:29.150 --> 02:36.310
Es entonces cuando el usuario crea una variable de esa clase como tipo.

02:36.350 --> 02:41.700
Hemos hecho esto, hemos hecho esto antes, así que nada, nada todavía.

02:41.740 --> 02:44.660
Quiero decir que hemos hecho esto hasta cierto punto antes.

02:44.690 --> 02:50.240
En cualquier caso, la sintaxis general para un constructor sería así.

02:53.510 --> 02:54.490
Clase.

02:54.740 --> 03:01.610
Y entonces tendrías algunos parámetros aquí.

03:01.670 --> 03:04.770
Entonces este es el nombre del constructor.

03:06.500 --> 03:12.440
Ese es el nombre del constructor que es el mismo que el nombre de la clase, por lo que el

03:12.440 --> 03:16.250
nombre de la clase y el nombre del constructor son prácticamente los mismos.

03:16.250 --> 03:20.000
Permítanme seguir y mostrarles lo que quiero decir con esto en la mayor medida posible para que

03:20.000 --> 03:22.960
realmente puedan verlo en el código real y no en el pseudo código.

03:23.440 --> 03:30.840
Solo vamos a eliminar esto y escribir en clase y le daremos el nombre de esta

03:34.260 --> 03:35.910
clase ficticia y abajo.

03:38.750 --> 03:49.010
Sigamos adelante y escriba en público y luego el constructor debe ser el constructor debe ser público.

03:49.500 --> 03:53.750
Clase ficticia y ahí vamos.

03:53.770 --> 04:01.660
Entonces, el nombre del constructor es el mismo que el nombre de la Clase C, el nombre del

04:01.660 --> 04:06.210
constructor es el mismo que el nombre de la clase.

04:06.250 --> 04:15.530
OK, entonces el constructor básicamente no tiene parámetros aunque lo tenga.

04:15.590 --> 04:21.530
Quiero decir que este es simplemente el ejemplo más básico, por

04:21.530 --> 04:30.940
lo que no tiene parámetros que vayan a tipear llamadas SDD y códigos C y algo estúpido.

04:31.210 --> 04:32.570
Es

04:36.740 --> 04:39.970
como hola constructor aquí.

04:41.390 --> 04:42.880
Ahí tienes.

04:43.010 --> 04:44.440
Eso debería ser

04:46.840 --> 04:48.010
suficiente y.

04:48.470 --> 04:56.140
Hurra una hora más abajo de la tubería principal, podemos seguir adelante y

05:00.810 --> 05:05.530
escribir el maniquí ficticio simulado de dos cuartos.

05:05.550 --> 05:11.370
Así que esto es declarar una variable ficticia de tipo A clase ficticia.

05:11.540 --> 05:17.090
Tienen una variable variable y su tipo es una clase ficticia.

05:17.130 --> 05:23.120
Esta declaración llamará al constructor el.

05:23.210 --> 05:29.750
Este ejemplo en particular dará salida a esta línea aquí.

05:30.020 --> 05:34.550
Y sigamos adelante y veamos cómo funciona eso para nosotros.

05:34.790 --> 05:37.000
Construir y correr

05:37.010 --> 05:37.500
Aquí vamos.

05:37.520 --> 05:39.700
Hola constructor aquí.

05:39.930 --> 05:41.510
Simple simple como eso.

05:41.510 --> 05:43.940
No hay nada demasiado complicado.

05:43.940 --> 05:53.450
Podemos ver que podemos tomar algunas medidas, como imprimir esto o realizar algún tipo de

05:53.450 --> 05:55.640
inicialización de variables particulares.

05:55.640 --> 05:59.180
Sobre la creación del objeto.

05:59.330 --> 06:03.810
Para que podamos obtener un objeto que se adapte a nuestras necesidades.

06:03.810 --> 06:06.530
Tan pronto como es creado.

06:07.040 --> 06:10.110
Entonces sigamos y veamos.

06:10.420 --> 06:18.590
Avancemos y veamos un programa correcto que sea similar al anterior, pero no hace lo que

06:18.680 --> 06:20.530
se espera de él.

06:21.980 --> 06:33.770
Entonces, si hacemos esto y si ejecutamos el programa de esta manera, no obtendremos ningún resultado.

06:33.780 --> 06:40.010
Permíteme mostrarte que eso es tan cierto que ves que no hay nada en la pantalla.

06:40.100 --> 06:41.600
Ahora, ¿por qué es esto?

06:41.600 --> 06:42.440
Cuál es el problema.

06:42.460 --> 06:44.380
No parece haber ningún error.

06:44.390 --> 06:46.950
El programa es técnicamente correcto.

06:47.120 --> 06:49.300
El problema son los paréntesis.

06:49.310 --> 06:56.740
Básicamente al declarar la variable al declarar la variable básicamente.

06:56.950 --> 07:06.310
Entonces este dubby aquí no es una variable de la clase ficticia tipo.

07:06.360 --> 07:13.550
Este es un prototipo de función que no acepta nada más que devuelve una clase ficticia.

07:13.760 --> 07:19.120
Entonces, prototipo de función que no acepta nada más que devuelve una clase ficticia.

07:19.140 --> 07:31.600
El ejemplo de arriba es básicamente uno con esto, con phunk el que tiene la función, no el anterior,

07:32.050 --> 07:43.840
también se llama y el más para la mayoría de las frases molestas y este es el ejemplo

07:43.840 --> 07:49.430
más trivial de V B si es MVP.

07:49.510 --> 07:54.860
No dude en buscarlo en la red en términos de definiciones un poco más.

07:54.880 --> 08:01.690
No es obligatorio, pero si solo quiere un poco de conocimiento adicional que está escrito, debería ser más fácil

08:01.690 --> 08:04.680
de entender si no solo sigue los ejemplos.

08:04.690 --> 08:11.890
Voy a hacer demos de todos modos, así que vamos a tener público y luego será una clase ficticia y

08:12.010 --> 08:13.690
tendremos una copia impresa aquí.

08:13.720 --> 08:15.760
Y adivina qué.

08:15.760 --> 08:20.000
Abajo voy a escribir en la clase

08:24.380 --> 08:25.320
ficticia ficticia.

08:25.380 --> 08:29.580
Y luego escribiré el parámetro.

08:29.610 --> 08:33.180
No sé si algún número entero se pasará

08:35.870 --> 08:43.480
a esto y vamos a hacer otra impresión solo porque son las cosas más simples que podemos usar

08:43.570 --> 08:46.830
para demostraciones y realmente no hay otra razón.

08:48.450 --> 08:49.690
DE ACUERDO.

08:49.930 --> 08:55.220
Segundo constructor aquí.

08:56.820 --> 08:59.910
Y establecemos esto a igual.

08:59.910 --> 09:06.510
Ahora vamos a ngi para insertar el parámetro donde el entero que se está pasando va a ser

09:06.510 --> 09:07.110
un CD.

09:07.170 --> 09:07.650
Y

09:11.240 --> 09:11.860
Del OK.

09:11.960 --> 09:16.400
Entonces ahora podemos seguir y crear otro.

09:16.400 --> 09:22.910
Pero antes de hacerlo, vamos a tener que tomar la iniciativa y le daremos el nombre de uno ficticio.

09:25.630 --> 09:34.920
Y sigamos adelante y seleccione esta copia y péguelo en la siguiente línea y cambie esto a dos.

09:35.020 --> 09:38.870
Pero ve que dos tendrán siete.

09:39.370 --> 09:42.480
Entonces esto debería pasar el parámetro siete.

09:42.520 --> 09:46.670
Esto llama al segundo constructor y pasa 7 como argumento.

09:46.690 --> 09:49.470
Y esto está llamando al primer constructor.

09:49.480 --> 09:50.730
¿Cómo sabemos cuál?

09:50.740 --> 09:53.300
¿Cómo sabe la máquina a cuál se está llamando?

09:53.540 --> 09:55.540
Bueno, este toma un parámetro.

09:55.540 --> 09:56.460
Este no.

09:56.500 --> 10:00.220
Obviamente, estamos pasando un parámetro aquí, así que tomará este.

10:00.280 --> 10:04.600
Y si no pasas un parámetro, tomará este.

10:04.660 --> 10:10.040
OK, sigamos adelante y compilaremos y ejecutaremos, y aquí dice hola constructor.

10:10.080 --> 10:14.930
Y el segundo constructor aquí por termómetro es igual a siete.

10:15.000 --> 10:15.900
Simple como eso.

10:15.900 --> 10:17.830
No hay gran problema allí.

10:17.850 --> 10:29.470
Podemos agregar tantos constructores como deseemos, pero el número o el tipo de parámetros tiene que

10:29.470 --> 10:30.760
ser diferente.

10:31.060 --> 10:37.830
Entonces, o bien el número o el tipo de parámetros debe ser diferente o ambos.

10:37.910 --> 10:46.230
Y al igual que en las funciones cuando las sobrecarga, podemos básicamente agregar dos atributos y

10:46.350 --> 10:48.700
el método a nuestra clase.

10:48.720 --> 10:51.090
Vamos a hacer esto un poco más complejo.

10:51.180 --> 10:53.680
Pero solo son estos constructores.

10:53.760 --> 10:59.340
Las mismas reglas para la sobrecarga aplican la misma regla que se aplica para la sobrecarga y las

10:59.340 --> 11:00.970
funciones se aplican prácticamente aquí.

11:00.990 --> 11:08.250
Debe darles como diferentes parámetros de tipo para dar más o menos de cualquier manera.

11:09.010 --> 11:13.900
Esto necesita esta parte aquí donde los parámetros se pasan al const donde

11:13.900 --> 11:18.960
se pasan los parámetros que el constructor necesita ser diferente de un constructor

11:18.960 --> 11:26.510
al siguiente. No se pueden tener dos constructores con la misma estructura en términos de parámetros que serían muy imprudente.

11:26.930 --> 11:34.830
OK, vamos a salir del público y sigamos adelante en el jugador, dos atributos serán.

11:34.850 --> 11:39.170
Y vamos a crear dos atributos para nosotros.

11:39.180 --> 11:46.870
Va a ser tonto, vamos a ser una entrevista y vamos a tener un char.

11:47.130 --> 11:51.720
Así que char será un tonto o

11:54.700 --> 12:05.210
un Titi y vamos a seguir adelante y al final para escuchar un espacio Space dummy.

12:05.690 --> 12:09.560
T. T. son uno esto va a ser.

12:09.620 --> 12:18.060
Vamos a configurar esto para que sea cero y simulado gatito o dos.

12:18.090 --> 12:21.150
Vamos a seguir adelante y configurar esto para ser.

12:21.690 --> 12:22.540
No lo sé.

12:22.710 --> 12:25.930
Entonces, vamos a ponerlo, vamos a dejarlo así.

12:26.020 --> 12:36.110
Así que tenemos tenemos este constructor ahora también inicializando estos dos atributos a cero y E.

12:36.720 --> 12:38.080
Inicializando

12:38.130 --> 12:41.270
Básicamente el atributo dummy uno para devaluar.

12:41.310 --> 12:41.710
Vamonos.

12:41.730 --> 12:47.640
Avancemos y cambiemos cómo funciona el segundo e inicialicemos el atributo ficticio uno al

12:47.640 --> 12:52.560
valor del parámetro que se pasa a la función aquí al constructor.

12:52.550 --> 12:54.060
Aquí mis disculpas allí.

12:55.240 --> 12:57.480
Sigamos adelante y escriba mi dos puntos.

12:57.580 --> 13:03.810
Solo sepárelos para que pueda ver las cosas un poco mejor.

13:03.820 --> 13:06.320
Muy importante para mantenerlo claro y ordenado.

13:09.180 --> 13:10.290
DE ACUERDO.

13:10.840 --> 13:11.660
Aquí vamos.

13:11.710 --> 13:30.510
Así que, ficticio, somos uno, esta va a ser la variable Petrum y esta será la variable ficticia 880 o no, y no sé si podemos inicializar

13:30.510 --> 13:33.080
esto en otra cosa.

13:33.090 --> 13:36.830
Podemos ser un personaje P.

13:36.960 --> 13:37.510
Excelente.

13:37.620 --> 13:48.030
Entonces, sigamos adelante y creemos un método para imprimir y explotar un vacío B.

13:48.660 --> 13:53.230
Imprimir y va a ser conc.

13:53.570 --> 14:00.060
No va a cambiar nada, solo imprime y, literalmente, sigue y copia estos

14:00.060 --> 14:00.380
dos.

14:00.450 --> 14:09.250
Bueno, en realidad no, no puedo porque no configuré copiar y pegar entre SDD de mi volumen,

14:12.520 --> 14:15.320
Conconi see out y Shaabi ficticio.

14:15.590 --> 14:20.260
HEG son uno igual a

14:23.160 --> 14:32.730
maniquí subrayado 83 o una columna C D y todo.

14:33.190 --> 14:38.880
De acuerdo, sigamos adelante y copiemos esta línea para no tener que pasar por

14:38.880 --> 14:47.280
el minucioso proceso de tipear todo y simplemente cambiar algunas cosas, básicamente cambiar solo dos y cambiar esto a dos.

14:47.310 --> 14:49.400
Simple como eso.

14:49.500 --> 14:50.100
Y ahí vamos.

14:50.100 --> 14:53.550
Clase y la clase show y allí.

14:54.030 --> 14:54.280
DE ACUERDO.

14:54.300 --> 15:05.610
Ahora podemos volver a Main y echar un vistazo para ver qué podemos hacer. Podemos dejar que llame a la primera

15:05.850 --> 15:12.210
llamada al primer constructor donde el atributo ficticio será llamado a cero

15:12.210 --> 15:16.250
y usted atribuye a será igual a Eva.

15:16.560 --> 15:27.640
Y luego podemos seguir adelante y crear una copia impresa para que cualquier impresión de un punto, si es que vamos.

15:28.110 --> 15:37.740
Así que esto es lo que llamará a esta línea, llamaremos a este método de la clase ficticia OK.

15:37.780 --> 15:40.060
Entonces, separemos esto.

15:40.180 --> 15:47.250
Y ahora vamos a llamar a un número que va a seguir adelante y llamar al

15:49.640 --> 15:53.730
segundo constructor y que voy a cambiar esto a 100.

15:53.750 --> 15:55.500
Realmente no importa.

15:55.520 --> 16:03.030
Mostramos maniquí a punto por pulgada y ahí vamos.

16:03.040 --> 16:04.570
Dejémoslo así.

16:05.850 --> 16:08.670
Justo para asegurarse de que todo esté bien construido y ejecutarlo.

16:08.670 --> 16:09.240
Ahí tienes.

16:09.240 --> 16:15.900
Así que hola constructor aquí el atributo ficticio uno equivale a cero atributos ficticios iguales a hacer el segundo constructor

16:15.900 --> 16:18.080
aquí Thuram es igual a 100.

16:18.090 --> 16:25.240
El atributo 1 es 100 y el atributo to es beat justo como hemos llegado a la figura anterior.

16:26.900 --> 16:32.560
OK para que podamos ver que también podemos inicializar atributos dentro de los constructores.

16:32.890 --> 16:34.870
Saltemos a nuestra clase.

16:34.870 --> 16:39.540
Vamos a nuestra clase y la fecha.

16:39.550 --> 16:49.420
Declaramos las variables del tipo fecha como básicamente como el espacio de datos D. T. Sabai colon si recuerdas que podemos sacarlo

16:49.420 --> 16:54.180
de antes si lo tienes guardado sería muy agradable.

16:54.220 --> 16:57.160
No tuvimos que inicializar.

16:57.160 --> 16:57.870
No teníamos.

16:57.910 --> 17:01.900
No teníamos el estado inicial del objeto.

17:02.250 --> 17:10.060
Es decir, no teníamos la fecha inicial, por lo que la fecha debería ser la inicial al declarar

17:10.060 --> 17:12.270
la variable de tipo fecha.

17:12.270 --> 17:19.330
Bueno, no sé si puede establecer la fecha actual que no está mal o podemos hacer algo más con

17:19.330 --> 17:19.840
ella.

17:19.870 --> 17:27.130
Realmente no importa, pero mientras puedas tener algo ahí que tenga algún tipo de lógica en el próximo en el

17:28.720 --> 17:33.500
próximo tutorial, vamos a echarle un vistazo a la fecha de la clase.

17:33.550 --> 17:36.810
Y vamos a jugar un poco con esto un poco.

17:36.850 --> 17:41.200
Entonces, si lo tienes, estoy bastante seguro de que sientes la libertad de agarrarlo.

17:41.230 --> 17:44.320
De lo contrario, puedes seguirlo también.

17:44.330 --> 17:46.270
Lo veré en la pantalla.

17:46.300 --> 17:49.910
De todos modos, me despido de usted y espero ver en el seguimiento.
