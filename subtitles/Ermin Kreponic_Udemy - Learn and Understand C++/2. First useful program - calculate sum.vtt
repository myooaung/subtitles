WEBVTT

1
00:00:00.881 --> 00:00:04.080
Let's go ahead and have
a look at an example

2
00:00:04.241 --> 00:00:07.225
which shows us how to write a program.

3
00:00:07.456 --> 00:00:11.000
It calculates the sum and
the average of five numbers

4
00:00:11.161 --> 00:00:14.120
which are actually
entered from a keyboard.

5
00:00:16.021 --> 00:00:17.163
So, let's begin.

6
00:00:18.481 --> 00:00:21.920
First thing's first, let's
declare five integers.

7
00:00:22.081 --> 00:00:22.898
So, int

8
00:00:23.591 --> 00:00:25.915
n1, n2,

9
00:00:28.651 --> 00:00:29.655
n3

10
00:00:31.091 --> 00:00:31.930
n4

11
00:00:32.531 --> 00:00:34.205
n5.

12
00:00:35.571 --> 00:00:36.085
There we go.

13
00:00:36.246 --> 00:00:40.040
We are just declaring this variable
and now we are going to go ahead

14
00:00:40.201 --> 00:00:41.795
and prompt the user to enter them.

15
00:00:42.260 --> 00:00:44.376
So std::

16
00:00:44.556 --> 00:00:45.700
cout

17
00:00:46.646 --> 00:00:47.810
and

18
00:00:49.295 --> 00:00:50.341
Enter

19
00:00:50.871 --> 00:00:51.850
five

20
00:00:52.381 --> 00:00:55.331
integers.

21
00:00:58.996 --> 00:01:00.995
Yup, there we go.

22
00:01:03.041 --> 00:01:08.848
Seperated by

23
00:01:09.286 --> 00:01:11.263
by space

24
00:01:12.190 --> 00:01:16.240
: for aesthetic resources and
we're going to go ahead

25
00:01:16.401 --> 00:01:19.390
and place a line
terminated for example.

26
00:01:19.805 --> 00:01:23.661
10 20 30 40

27
00:01:23.936 --> 00:01:25.880
etc.

28
00:01:31.761 --> 00:01:32.370
Ok, so next up

29
00:01:32.621 --> 00:01:33.856
we will

30
00:01:34.735 --> 00:01:36.851
basically accept the value

31
00:01:37.056 --> 00:01:38.918
that the user gives us.

32
00:01:39.446 --> 00:01:41.240
std::

33
00:01:42.256 --> 00:01:43.260
cin

34
00:01:44.440 --> 00:01:45.906
and Oops!

35
00:01:47.041 --> 00:01:48.298
n1

36
00:01:49.595 --> 00:01:50.760
and 2

37
00:01:52.080 --> 00:01:54.961
n3

38
00:01:58.976 --> 00:01:59.955
n4

39
00:02:00.160 --> 00:02:03.080
n5

40
00:02:03.551 --> 00:02:07.060
Makes me wonder why on earth
did I actually

41
00:02:07.426 --> 00:02:11.536
include five numbers here instead of
two or three or something like that.

42
00:02:11.701 --> 00:02:13.350
So, this is just the input from
the keyboard.

43
00:02:13.511 --> 00:02:17.320
thus far, I've shown you how to enter
one number from the keyboard

44
00:02:17.526 --> 00:02:20.965
but you can put it in a line
like this and enter them

45
00:02:21.150 --> 00:02:21.940
one by one

46
00:02:22.101 --> 00:02:23.380
no big deal.

47
00:02:23.541 --> 00:02:26.330
Next up, so we'll type int

48
00:02:26.581 --> 00:02:27.490
sum

49
00:02:27.651 --> 00:02:28.860
=

50
00:02:29.021 --> 00:02:34.610
n1 + n2 + n3

51
00:02:35.290 --> 00:02:36.546
+ n4

52
00:02:36.776 --> 00:02:38.480
+ n5

53
00:02:40.071 --> 00:02:44.741
Ok, this will be variable sum, which
will contain the sum

54
00:02:44.901 --> 00:02:46.480
of all of these numbers obviously,

55
00:02:46.641 --> 00:02:48.840
so we
will just add them one by one and place

56
00:02:49.001 --> 00:02:49.685
them into this

57
00:02:49.850 --> 00:02:50.570
variable.

58
00:02:50.731 --> 00:02:53.520
Again, I'm sorry if I'm explaining
quite literally

59
00:02:53.681 --> 00:02:55.180
the most basic of things

60
00:02:55.341 --> 00:02:56.960
but hey

61
00:02:58.206 --> 00:03:01.901
It didn't say from beginner to advanced

62
00:03:02.226 --> 00:03:04.560
If you feel like you know most of these
things,

63
00:03:04.721 --> 00:03:07.430
or that I'm boring you with these things

64
00:03:07.681 --> 00:03:11.120
I would advise you then to just
skip down to more advanced things

65
00:03:11.281 --> 00:03:11.905
which you are

66
00:03:12.071 --> 00:03:14.765
more interested in as the course

67
00:03:14.926 --> 00:03:16.670
is pretty much separated

68
00:03:16.851 --> 00:03:19.680
by subjects one after the other.

69
00:03:21.216 --> 00:03:22.148
So we have

70
00:03:22.311 --> 00:03:25.120
declared this variable, we have
used +

71
00:03:25.511 --> 00:03:29.325
+ is a binary operator
for addition.

72
00:03:31.991 --> 00:03:35.408
Now, let's do this in the completely
wrong way.

73
00:03:35.776 --> 00:03:37.266
We will type in

74
00:03:38.075 --> 00:03:38.775
float

75
00:03:40.141 --> 00:03:41.720
average

76
00:03:42.326 --> 00:03:46.090
and this will be equal to sum
divided by 5.

77
00:03:47.291 --> 00:03:48.225
So, hey

78
00:03:49.056 --> 00:03:50.755
Why is this wrong?

79
00:03:51.101 --> 00:03:52.730
We have the sum

80
00:03:53.121 --> 00:03:57.420
and 5 is the number of integers we have
added in such a way

81
00:03:57.601 --> 00:04:02.155
we find the average. We take this sum and
then we

82
00:04:02.361 --> 00:04:03.850
divide it by the number

83
00:04:04.011 --> 00:04:07.216
of integers we have included
into that sum.

84
00:04:07.771 --> 00:04:10.400
Why is this wrong? Well, let me go
ahead and show you.

85
00:04:11.071 --> 00:04:13.435
std

86
00:04:14.576 --> 00:04:16.440
::cout

87
00:04:18.035 --> 00:04:19.641
let's go ahead and do this.

88
00:04:21.216 --> 00:04:22.265
Average value

89
00:04:22.750 --> 00:04:24.445
value is

90
00:04:24.606 --> 00:04:25.353
:

91
00:04:27.136 --> 00:04:28.800
Let's close it.

92
00:04:30.596 --> 00:04:31.575
average

93
00:04:32.106 --> 00:04:35.080
actually you can go ahead and do this
manually

94
00:04:35.241 --> 00:04:38.470
on your calculators if you want as well.

95
00:04:38.631 --> 00:04:43.020
And you will see that you will
most likely get different results.

96
00:04:43.506 --> 00:04:44.855
So, std

97
00:04:45.016 --> 00:04:46.041
::

98
00:04:46.735 --> 00:04:48.480
endl

99
00:04:49.636 --> 00:04:52.426
Ok, so this is going to give
us a wrong output.

100
00:04:52.631 --> 00:04:53.306
Why?

101
00:04:53.466 --> 00:04:54.795
Well, I'll explain soon enough.

102
00:04:55.651 --> 00:04:58.880
But as I say, if you just take
your calculator, and if you bear with me

103
00:04:59.041 --> 00:05:02.040
you will see that mine is
different from yours. If I type in

104
00:05:02.801 --> 00:05:03.685
1

105
00:05:03.846 --> 00:05:05.360
2

106
00:05:05.681 --> 00:05:06.771
thats, ok that's

107
00:05:06.935 --> 00:05:07.635
3

108
00:05:08.281 --> 00:05:10.186
and if I type in

109
00:05:10.346 --> 00:05:12.860
4, that's 7

110
00:05:14.226 --> 00:05:16.458
and if I type in 6 that's

111
00:05:17.056 --> 00:05:19.336
that's 13,

112
00:05:20.101 --> 00:05:22.310
and if I type in, I don't know,

113
00:05:23.931 --> 00:05:26.721
4, that should be 20,

114
00:05:27.621 --> 00:05:28.740
No,

115
00:05:30.106 --> 00:05:32.501
that would be 17. I'm so sorry.

116
00:05:33.101 --> 00:05:34.800
So, the sum of these numbers
is 17.

117
00:05:34.961 --> 00:05:39.395
1 and 2 that's 3, 4 that would be 7, plus
6 thats 13

118
00:05:40.021 --> 00:05:43.436
+ 4 that's 17.

119
00:05:43.901 --> 00:05:46.873
So, 17 divided

120
00:05:47.035 --> 00:05:47.871
by 5.

121
00:05:48.031 --> 00:05:51.585
That's not the result would
definitely not be an integer.

122
00:05:52.026 --> 00:05:53.376
So, if I press enter,

123
00:05:53.651 --> 00:05:57.301
It says, value is 3. There is no way
that the value is 3.

124
00:05:57.761 --> 00:06:00.131
3 times

125
00:06:03.056 --> 00:06:07.933
3 times whatever is not going
to give you 17. Any integer whatever.

126
00:06:08.096 --> 00:06:12.276
3 times any integer will not give you
17. 3 times 5?

127
00:06:12.551 --> 00:06:13.600
Is 15,

128
00:06:13.830 --> 00:06:15.180
3 times

129
00:06:15.386 --> 00:06:17.035
6 is 18

130
00:06:17.196 --> 00:06:22.480
and no integer multiplied by 3 is
going to give you 17.

131
00:06:22.641 --> 00:06:26.206
So, what is going on here? Why
are we getting this

132
00:06:26.461 --> 00:06:27.926
wrong result?

133
00:06:29.340 --> 00:06:31.080
Let's close this.

134
00:06:32.080 --> 00:06:34.658
So, what we're doing here is
integer division.

135
00:06:34.820 --> 00:06:36.168
Sum is an integer

136
00:06:36.330 --> 00:06:38.561
and all of these numbers are integers.

137
00:06:38.881 --> 00:06:39.371
and

138
00:06:39.531 --> 00:06:40.926
5 is an integer.

139
00:06:41.090 --> 00:06:42.831
So, if we divide one integer,

140
00:06:43.246 --> 00:06:45.176
by another integer,

141
00:06:45.616 --> 00:06:50.360
We will also get a result that
is also an integer

142
00:06:50.521 --> 00:06:51.725
regardless of whether it is
correct or not.

143
00:06:52.211 --> 00:06:55.070
Because if the answer was
that we know

144
00:06:55.485 --> 00:06:56.650
is 3.

145
00:06:57.201 --> 00:06:59.595
It doesn't matter, I don't know,
let's say it's 3.23.

146
00:07:00.881 --> 00:07:02.451
Again incorrect, it doesn't matter.

147
00:07:04.031 --> 00:07:05.168
Integer division

148
00:07:05.331 --> 00:07:07.676
will yield an integer number

149
00:07:07.931 --> 00:07:10.950
and what that means is that
the decimal portions

150
00:07:11.111 --> 00:07:12.251
will get

151
00:07:12.411 --> 00:07:13.878
truncated.

152
00:07:14.106 --> 00:07:15.085
They will be gone.

153
00:07:15.406 --> 00:07:18.960
And only the integer will remain.
Henceforth, we will

154
00:07:19.121 --> 00:07:21.006
receive a wrong

155
00:07:21.256 --> 00:07:22.920
result.

156
00:07:24.371 --> 00:07:28.200
When two entries are divided,
the decimal part is truncated.

157
00:07:28.361 --> 00:07:31.360
and the result is
an integer.

158
00:07:32.426 --> 00:07:40.590
How do we solve this? Instead of 5,
which is an int, we need to write 5.0f

159
00:07:41.940 --> 00:07:42.645
f is

160
00:07:42.806 --> 00:07:43.970
for float

161
00:07:44.456 --> 00:07:47.000
or 5.f

162
00:07:48.495 --> 00:07:49.705
No need for the zero.

163
00:07:50.911 --> 00:07:52.815
So, let's calculate
the average corrently.

164
00:07:53.416 --> 00:07:57.086
We will now declare
our variable like this.

165
00:07:57.411 --> 00:07:57.971
Well

166
00:07:58.291 --> 00:08:02.120
not the clear variable. But just
changed the division number.

167
00:08:02.611 --> 00:08:05.203
So, it's 5.0

168
00:08:06.536 --> 00:08:08.070
f lower casef

169
00:08:08.231 --> 00:08:10.160
or we could... yeah.

170
00:08:11.506 --> 00:08:14.986
What this means is that we are
dividing and integer

171
00:08:15.150 --> 00:08:17.751
by a floating point number

172
00:08:17.960 --> 00:08:21.980
which will result in a floating point
number result.

173
00:08:22.510 --> 00:08:26.200
So, now we are going to get a
correct result, hopefullly.

174
00:08:26.830 --> 00:08:28.800
And

175
00:08:29.011 --> 00:08:30.106
let's go ahead and run it.

176
00:08:30.286 --> 00:08:31.405
And see what happens.

177
00:08:33.816 --> 00:08:37.095
It's 1, 2, 3

178
00:08:38.066 --> 00:08:39.045
4,

179
00:08:40.320 --> 00:08:42.015
5, so this is like,

180
00:08:42.176 --> 00:08:44.616
3 and 3 that's 6

181
00:08:44.916 --> 00:08:46.775
and 4 that's

182
00:08:46.936 --> 00:08:49.750
10 and 5 and it is not good.

183
00:08:52.926 --> 00:08:54.856
I don't know, this is like yeah,

184
00:08:55.481 --> 00:08:56.460
4 again.

185
00:08:57.221 --> 00:09:00.035
So, this is 8, this is 3

186
00:09:00.335 --> 00:09:01.125
that's 11.

187
00:09:01.286 --> 00:09:05.470
and 2 that's 13 and 1
that's 14.

188
00:09:06.046 --> 00:09:07.255
So, if you

189
00:09:07.416 --> 00:09:09.578
press Enter now, you will
get the result

190
00:09:09.761 --> 00:09:14.385
2.8, so now we are
getting the correct result

191
00:09:14.685 --> 00:09:16.635
We're getting the

192
00:09:16.796 --> 00:09:19.680
integer portion and we're getting the
decimal portion as well.

193
00:09:19.841 --> 00:09:24.520
between, this is a floating point
number. Excellent!

194
00:09:25.271 --> 00:09:28.035
This is one of the most common
mistakes that you can make.

195
00:09:28.196 --> 00:09:31.495
You divide two integers.
You store them into the float

196
00:09:31.656 --> 00:09:34.640
into a floating point number. And It
doesn't matter integer division

197
00:09:34.801 --> 00:09:37.975
will yield another integer

198
00:09:38.181 --> 00:09:42.015
and you will get a mistake
which will not reported by the debugger.

199
00:09:42.196 --> 00:09:47.680
And it is kind of a logical mistake so
it will be kind of difficult to actually

200
00:09:48.051 --> 00:09:49.955
find it. You need to be very
careful

201
00:09:50.116 --> 00:09:50.698
when

202
00:09:50.860 --> 00:09:51.745
writing

203
00:09:51.996 --> 00:09:53.640
this number.

204
00:09:53.876 --> 00:09:57.430
So, anyway, this is the average value and
down below,

205
00:09:57.846 --> 00:09:59.220
we can actually up

206
00:09:59.381 --> 00:10:00.963
I think we should actually write it
up above

207
00:10:01.376 --> 00:10:02.705
std

208
00:10:02.910 --> 00:10:05.445
::cout

209
00:10:09.040 --> 00:10:10.296
Sum of

210
00:10:12.546 --> 00:10:14.940
these numbers is

211
00:10:20.346 --> 00:10:21.420
sum

212
00:10:23.921 --> 00:10:24.530
endl

213
00:10:26.616 --> 00:10:27.898
Let's run it one more time.

214
00:10:28.961 --> 00:10:30.243
Ah! What now?

215
00:10:31.540 --> 00:10:33.003
Ah, right right right!

216
00:10:33.165 --> 00:10:34.165
ok std

217
00:10:34.326 --> 00:10:35.211
::

218
00:10:35.951 --> 00:10:38.120
that's it!

219
00:10:40.061 --> 00:10:42.198
Ah! Come on!

220
00:10:42.360 --> 00:10:45.660
Today is just not my day!
Or night, or whatever!

221
00:10:46.541 --> 00:10:51.855
Like I said, there are five
integers. Let's go and 3 4, 5

222
00:10:52.016 --> 00:10:53.041
1

223
00:10:53.830 --> 00:10:54.831
7

224
00:10:56.386 --> 00:10:59.335
Ok, some of these numbers is 20.

225
00:10:59.681 --> 00:11:01.403
Average value is

226
00:11:01.725 --> 00:11:02.331
4.

227
00:11:02.861 --> 00:11:03.470
There we go.

228
00:11:03.696 --> 00:11:04.445
So,

229
00:11:04.626 --> 00:11:06.370
Even though it is a floating point number,

230
00:11:06.671 --> 00:11:09.666
It will take integers and floating points

231
00:11:09.946 --> 00:11:14.635
as a result. So we do not necessarily
need to have a

232
00:11:14.821 --> 00:11:17.841
decimal space here at all.

233
00:11:18.605 --> 00:11:20.346
Because, 3 or 4 that is 7.

234
00:11:20.506 --> 00:11:22.436
And 7 that is 14.

235
00:11:22.596 --> 00:11:25.665
and 1 that is 15. And 5 that is 20.

236
00:11:25.826 --> 00:11:27.430
20 divided by 5,

237
00:11:27.591 --> 00:11:28.151
is

238
00:11:28.331 --> 00:11:29.380
4 so this is

239
00:11:29.541 --> 00:11:31.680
completely correct.

240
00:11:33.511 --> 00:11:37.480
I am going to bid you farewell here. And
we're going to go ahead and continue

241
00:11:37.641 --> 00:11:39.990
in the follow up tutorial.

