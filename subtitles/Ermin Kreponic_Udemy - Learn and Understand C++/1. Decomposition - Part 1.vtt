WEBVTT

00:00.120 --> 00:00.680
DE ACUERDO.

00:00.780 --> 00:03.480
Así que bienvenidos todos a este capítulo.

00:03.480 --> 00:06.170
Creo que es el Capítulo 13 aquí.

00:06.180 --> 00:09.040
Trataremos con la descomposición.

00:09.150 --> 00:17.520
En resumen, este capítulo abarcaremos principalmente partes sobre el proceso de desarrollo de software que

00:17.520 --> 00:19.810
básicamente se llama descomposición.

00:19.890 --> 00:27.400
Verá por qué es tan útil porque separaremos nuestro código en diferentes archivos.

00:28.200 --> 00:34.500
Básicamente, la descomposición significa segmentar el código en partes más pequeñas sobre todo para facilitar la lectura y el mantenimiento.

00:34.500 --> 00:37.980
Ya hemos visto la descomposición en el trabajo.

00:38.050 --> 00:38.860
Decirte la verdad.

00:38.880 --> 00:43.220
En nuestros tutoriales anteriores donde básicamente hemos segmentado la función.

00:43.240 --> 00:48.840
¿Recuerdas cuando escribí el prototipo de función arriba y luego debajo de Dumaine con el que

00:48.840 --> 00:49.610
estoy ahora?

00:49.860 --> 00:58.230
Pero el cuerpo de la función que era eso era un ejemplo de descomposición porque teníamos una descripción clara de todas

00:58.230 --> 01:01.250
las funciones que teníamos arriba y abajo.

01:01.250 --> 01:05.220
Teníamos los cuerpos de la de esas funciones.

01:05.910 --> 01:10.870
Ahora las estructuras de las clases se dividen en dos partes.

01:10.890 --> 01:16.250
Tiene definición e implementación en la parte de definición.

01:16.250 --> 01:20.270
Escribimos los prototipos de la clase y, de hecho, la parte de la alimentación.

01:20.310 --> 01:26.160
Implementamos esas clases en un concepto bastante similar al que tiene las funciones en las

01:26.160 --> 01:31.260
que creamos un conjunto de funciones por tipo, luego lo creamos y luego

01:31.260 --> 01:36.570
implementamos las funciones donde creamos los cuerpos. para esas funciones en la parte de definición.

01:36.600 --> 01:43.870
Escribimos los prototipos de productos de clase y en la parte de implementación, pero básicamente

01:43.870 --> 01:45.190
implementamos esas clases.

01:45.190 --> 01:52.300
Hacemos todo esto solo para hacer que nuestro código sea más legible, por lo que significa muy

01:52.300 --> 01:55.630
poco o nada de diferencia para la máquina.

01:55.630 --> 02:03.610
Entonces, cuando el usuario echa un vistazo a la parte que contiene las definiciones, puede comprender qué es

02:03.730 --> 02:08.860
y qué se puede usar para saber qué contiene realmente esa clase.

02:10.570 --> 02:18.190
Sin embargo, si el if por si están interesados ​​en cómo funciona una determinada parte, pueden simplemente

02:18.190 --> 02:20.410
comprobar esa parte en particular.

02:20.410 --> 02:26.890
Pueden ver la implementación de esa parte, sin embargo, puede ocurrir que el usuario no tenga acceso a

02:26.890 --> 02:28.510
la parte de implementación.

02:28.510 --> 02:33.310
Esto suele ser porque está oculto, protegido o patentado.

02:33.460 --> 02:37.920
En ese caso, es necesario hacer la descomposición del código.

02:39.000 --> 02:46.100
Entonces, por simplicidad, usaremos nuestra versión simple de la fecha de la clase.

02:46.320 --> 02:47.680
Entonces está aquí.

02:47.780 --> 02:48.870
Espero que no lo hayas eliminado.

02:48.870 --> 02:50.050
No lo he dejado aquí.

02:50.070 --> 02:58.830
Te he pedido que lo dejes y luego vamos a seguir adelante y dividirlo en dos partes.

02:58.830 --> 03:03.480
Tendrás el encabezado y tendrás el archivo CPB.

03:03.480 --> 03:08.710
Por lo tanto, tendremos que crear una fecha que H y necesitemos crear una fecha.

03:08.770 --> 03:15.710
Dodd CVP donde escribiremos donde lo hagamos.

03:15.720 --> 03:16.140
Derecha.

03:16.150 --> 03:21.250
Esas dos partes integrales de la descomposición.

03:21.260 --> 03:30.260
De todos modos, vamos a seguir adelante y explicar algunas cosas básicas sobre la fecha en que cada uno de nosotros

03:30.260 --> 03:31.540
debemos hacerlo bien.

03:31.550 --> 03:31.910
Adelante.

03:31.910 --> 03:44.230
Haga clic derecho en el clic derecho sobre el proyecto y luego debería ser como árbol de proyectos eliminar agregar archivos.

03:44.960 --> 03:48.950
No lo siento, no debería haber una creación para gritar en voz alta.

03:49.040 --> 03:52.860
Por lo general, no trabajo en bloques de código ni en propiedades de opciones de compilación.

03:52.860 --> 03:57.130
Abra la carpeta del proyecto desde el formato del navegador.

03:57.210 --> 03:59.160
Yo vengo así.

03:59.160 --> 04:00.210
Dónde está.

04:00.210 --> 04:04.700
No, no quiero encontrar

04:04.910 --> 04:07.700
¿Puedo decir que no puedo creer que no esté aquí?

04:07.700 --> 04:15.400
En serio, se trata de esta nueva clase nueva.

04:15.400 --> 04:16.080
Por supuesto.

04:16.300 --> 04:17.170
Así que adelante.

04:17.170 --> 04:18.460
Va a ser automatizado.

04:18.460 --> 04:23.200
Recuerde correctamente en el bloque de código va a crear DCP y el punto de cada archivo de forma predeterminada.

04:23.350 --> 04:28.680
Pero en caso de que esté usando alguna otra ID donde simplemente no sucede, puede simplemente crear

04:28.750 --> 04:30.070
esos dos archivos manualmente.

04:30.070 --> 04:35.020
Así que solo sigue y haz clic en el archivo, luego ve a lo nuevo y ve a la clase.

04:35.620 --> 04:42.870
Y vamos a necesitar un nombre de clase que será fecha punto C. Perdón por nombrarlo fecha.

04:43.450 --> 04:45.820
Y como pueden ver abajo, realmente hace esto por nosotros.

04:46.480 --> 04:49.830
No he usado Goldblatt para siempre de esta manera.

04:49.840 --> 04:52.120
Es por eso que estoy un poco oxidado.

04:52.120 --> 04:53.590
Entonces dice nombre de archivo fecha punto H.

04:53.890 --> 04:57.750
Ok, va a crear los guardias para nosotros. Lo explicaré en un momento.

04:57.860 --> 05:00.450
Y luego dice generar archivo de implementación.

05:00.460 --> 05:04.040
Y este es el archivo de encabezado para que tenga el

05:04.150 --> 05:09.100
archivo de encabezado y el archivo de implementación sea el archivo de encabezado a medida

05:09.100 --> 05:16.180
que envejece y el archivo de implementación es la fecha Dotsie P-P y de forma predeterminada incluirá la fecha punto h.

05:16.270 --> 05:17.590
Este es el proceso automatizado y el lote del código.

05:17.590 --> 05:20.720
Pero estos archivos también se pueden crear manualmente simplemente yendo

05:20.740 --> 05:25.870
al proyecto, básicamente, haga clic con el botón secundario en Crear archivo nuevo que inician C. P y fecha punto h.

05:25.930 --> 05:29.820
Así que sigamos adelante

05:29.830 --> 05:37.670
y haga clic en crear la nueva clase que se ha creado. ¿Desea agregarla al proyecto actual?

05:37.670 --> 05:38.110
Sí, nos gustaría mucho hacer eso y hacer clic en Aceptar aquí.

05:38.120 --> 05:42.520
De acuerdo, ahora dice que Heather está aquí.

05:43.860 --> 05:46.140
Mm hmm.

05:46.190 --> 05:46.730
Incluye una fecha punto h fuente SIRC.

05:47.040 --> 05:50.770
Simplemente hago clic en el signo más y verá

05:50.840 --> 05:58.280
que contiene datos de fecha. CTP OK, hagamos un acercamiento un poco y aumentemos un poco el encabezado.

05:58.370 --> 06:02.520
Ahora bien, es muy bueno que los bloques de código hagan estas cosas por nosotros.

06:02.870 --> 06:07.780
Pero vamos a seguir adelante y eliminar todo eso y

06:07.940 --> 06:13.820
en el RCP de datos lo eliminaremos también, aunque no haremos nada

06:13.820 --> 06:20.510
drásticamente diferente de lo que los bloques de código han hecho por defecto.

06:20.510 --> 06:21.700
Por lo tanto, es importante que cree estos dos archivos de la manera en que los crea.

06:21.700 --> 06:25.320
Realmente depende de ti.

06:25.350 --> 06:28.230
Entonces, lo primero que tendremos que

06:30.020 --> 06:40.610
hacer en el archivo de encabezado será básicamente hacer esto si y def espacio fecha subrayar H y va a hacerlo de

06:41.270 --> 06:49.790
manera automatizada crear el producto final y luego vamos a ir adelante y escriba Definir fecha subrayado h.

06:50.390 --> 06:57.370
Entonces si no, si escribo así que si no

06:57.770 --> 06:58.530
defino

07:03.460 --> 07:15.170
definir yy así lo anterior es lo que ves aquí lo que estás viendo ahora.

07:15.170 --> 07:15.880
Este es el protector de inclusión.

07:15.890 --> 07:17.800
Impide incluir el mismo archivo

07:17.840 --> 07:24.770
varias veces, lo que daría lugar a múltiples clases de funciones de variables con los mismos nombres.

07:24.770 --> 07:26.540
Bastante malo, por supuesto, el programa no compilaría.

07:26.630 --> 07:30.390
En ese caso también.

07:30.410 --> 07:31.980
Entonces, incluir guardia consiste en lo siguiente.

07:32.450 --> 07:34.820
Por lo tanto, si los datos de la fecha de auditoría y la fecha de def defiman subrayan la antigüedad.

07:34.820 --> 07:38.810
Este es un comando de preprocesador que verifica si hay una constante definida.

07:38.810 --> 07:44.040
Entonces si y def significa si no está definido.

07:44.090 --> 07:47.930
Así que aquí si en profundidad if y def

07:48.020 --> 07:57.170
si no está definido, el nombre de la constante es arbitrario, pero tiene que ser único para asegurarse de que tengamos nombres únicos.

07:57.230 --> 08:01.210
Se considera una práctica muy buena y sólida

08:01.210 --> 08:08.600
nombrar la constante de la misma manera que el archivo en el que está definida.

08:08.600 --> 08:10.520
Sabemos que podemos tener dos

08:10.520 --> 08:17.510
archivos del mismo nombre en una carpeta, de esa manera si el nombre de la manera si el nombre de

08:17.510 --> 08:24.630
la constante es el mismo que el nombre del archivo simplemente cambiamos el punto Indy en el guión bajo .

08:24.740 --> 08:26.360
Oh sí, mira

08:26.670 --> 08:27.820
la fecha.

08:31.520 --> 08:32.310
Subrayado H.

08:32.470 --> 08:33.760
En lugar de escribir la fecha, punto h.

08:33.960 --> 08:36.320
Entonces date el punto h aquí sería la fecha subrayada h de tal manera.

08:36.330 --> 08:41.030
Nos aseguramos de que el nombre sea único.

08:41.040 --> 08:44.590
Si tenemos varios archivos que son iguales pero tienen diferentes carpetas.

08:45.750 --> 08:50.610
No lo sé.

08:50.610 --> 08:50.970
Entonces podrías entonces simplemente escribir algo como esta carpeta uno.

08:50.970 --> 08:56.950
Digamos que eso podría ser.

08:57.180 --> 08:58.440
Eso podría ser.

08:58.440 --> 08:59.550
Mientras el nombre sea único, deberías ser bueno para ir, por supuesto.

09:00.270 --> 09:04.710
Como dije, estas son solo recomendaciones.

09:04.710 --> 09:06.880
Los nombres constantes son arbitrarios, siempre y cuando sean únicos.

09:06.900 --> 09:10.640
Usted debería ser.

09:10.640 --> 09:11.430
Como dije, bueno para ir.

09:11.430 --> 09:14.520
Además, debido a que estos son comandos macro, generalmente

09:14.740 --> 09:21.250
se escriben en letras mayúsculas, por lo general como dije antes y abajo, donde dice definir el subrayado H.

09:21.250 --> 09:27.440
Aquí es donde definimos la constante única abajo, dice.

09:27.450 --> 09:32.430
Y si esto indica el final del protector de inclusión.

09:32.430 --> 09:37.850
Entonces, ahora que conocemos estos conceptos básicos, podemos seguir adelante y comenzar a escribir nuestro código.

09:38.360 --> 09:44.540
Lo mismo que antes.

09:45.120 --> 09:48.820
Incluir incluir helado.

09:48.870 --> 09:49.470
&nbsp;

09:56.760 --> 09:58.770
Está bien, pero esto

09:58.860 --> 10:08.400
es básicamente ahora vamos a escribir nuestra clase, pero los métodos no tendrán cuerpos, solo habrá prototipos.

10:08.420 --> 10:11.780
Esto también se llama interfaz de clase.

10:11.780 --> 10:14.330
Si lo encuentra en alguna parte

10:14.330 --> 10:19.550
de la clase de la clase de literatura y abajo, comenzaremos a escribir.

10:22.910 --> 10:25.630
Por lo tanto, queremos que nuestras variables sean

10:25.630 --> 10:31.720
privadas, por lo que participaremos de una vez en ese año y todos entraremos en el lugar público.

10:34.780 --> 10:45.060
Entonces diga OK proceso

10:45.130 --> 10:45.900
&nbsp;

10:48.630 --> 10:49.040
minucioso.

10:53.400 --> 10:57.380
Por qué estás haciendo esto.

10:57.600 --> 10:58.860
No quería que te comportaras de esta manera.

10:58.860 --> 11:00.870
Exxon.

11:03.080 --> 11:03.730
Entonces aquí haremos el método.

11:03.790 --> 11:06.830
Crearemos los simios perfectos para los métodos.

11:06.880 --> 11:10.830
Escriba una fecha de configuración de FOID.

11:10.840 --> 11:16.210
Estará ahí.

11:16.340 --> 11:17.980
De eso, establece la fecha.

11:21.310 --> 11:23.610
Va a estar en

11:23.610 --> 11:26.580
D y dentro y iremos.

11:32.890 --> 11:34.500
Pero eso trae.

11:34.520 --> 11:36.050
Por qué algunos están llamando aquí, así que voy a cortar una tortuga aquí porque no quiero que sea demasiado larga.

11:36.240 --> 11:43.670
Y luego continuaremos.

11:43.690 --> 11:46.900
Pero simplemente continuaremos escribiendo el resto de las funciones aquí.

11:47.140 --> 11:53.640
De todos modos nos vemos en el seguimiento.

11:53.640 --> 11:55.360
&nbsp;
