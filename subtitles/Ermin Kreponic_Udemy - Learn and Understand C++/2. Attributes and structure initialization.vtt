WEBVTT

1
00:00:00.021 --> 00:00:00.995
Welcome back.

2
00:00:01.580 --> 00:00:02.466
So, I've

3
00:00:02.601 --> 00:00:04.045
just created a new

4
00:00:04.181 --> 00:00:06.265
project here in code blocks.

5
00:00:07.371 --> 00:00:08.420
Anyway.

6
00:00:09.566 --> 00:00:10.865
So what we are going
to do here

7
00:00:11.001 --> 00:00:14.225
is take a look in it
at an example.

8
00:00:14.421 --> 00:00:17.366
So real example, not just

9
00:00:17.901 --> 00:00:19.640
a conceptual syntax.

10
00:00:20.826 --> 00:00:21.591
So, we will

11
00:00:21.826 --> 00:00:23.078
define a structure

12
00:00:23.546 --> 00:00:24.616
called date.

13
00:00:24.751 --> 00:00:26.290
And we will give it

14
00:00:26.426 --> 00:00:29.121
three attributes. So you will
have day, month,

15
00:00:29.256 --> 00:00:30.416
and a year.

16
00:00:30.996 --> 00:00:32.411
Let's go ahead and type in

17
00:00:32.971 --> 00:00:34.038
struct

18
00:00:35.271 --> 00:00:35.986
date

19
00:00:36.385 --> 00:00:37.481
and it's going to be

20
00:00:37.616 --> 00:00:38.148
int

21
00:00:38.821 --> 00:00:39.795
day

22
00:00:40.516 --> 00:00:42.696
int month

23
00:00:44.231 --> 00:00:44.701
and

24
00:00:44.836 --> 00:00:45.370
int

25
00:00:46.901 --> 00:00:47.736
year

26
00:00:48.576 --> 00:00:51.961
Excellent. So you have
three attributes here.

27
00:00:52.686 --> 00:00:54.680
Attribute day is of
type int

28
00:00:55.051 --> 00:00:57.820
and all three of them
pretty much are of

29
00:00:57.956 --> 00:00:58.935
type int here but

30
00:00:59.070 --> 00:00:59.856
I mean, you could have

31
00:01:00.441 --> 00:01:03.270
placed a string or
whatever it doesn't really,

32
00:01:03.621 --> 00:01:06.428
they can be of different types.

33
00:01:08.150 --> 00:01:08.641
So above,

34
00:01:08.776 --> 00:01:11.165
we have this particular
structure.

35
00:01:11.606 --> 00:01:13.555
In my comments here,
it's actually above

36
00:01:14.000 --> 00:01:15.120
so we have a

37
00:01:15.255 --> 00:01:18.786
defined structure date with
three attributes.

38
00:01:18.921 --> 00:01:21.665
Sometimes these attributes
are also called fields.

39
00:01:21.801 --> 00:01:23.565
So if you're reading some
documentation

40
00:01:23.751 --> 00:01:24.746
out there on the net,

41
00:01:25.051 --> 00:01:28.996
keep in mind that they are sometimes
referred to as fields as well.

42
00:01:29.395 --> 00:01:30.723
All these attributes are

43
00:01:30.856 --> 00:01:31.365
public.

44
00:01:31.601 --> 00:01:35.105
That is they are visible outside
the structure.

45
00:01:36.151 --> 00:01:39.865
So, I don't know, function
or something inside of main,

46
00:01:40.001 --> 00:01:43.230
etc. Depends on where the
structure is, I guess

47
00:01:43.556 --> 00:01:45.295
can actually access,

48
00:01:45.696 --> 00:01:48.530
can actually see what's in
the structure, can access

49
00:01:48.666 --> 00:01:51.451
the attributes within the structure.

50
00:01:53.171 --> 00:01:53.680
Anyway.

51
00:01:54.311 --> 00:01:57.371
This structure is now a
user defined type.

52
00:01:57.561 --> 00:02:01.625
That is we can create a
variable of type date.

53
00:02:01.761 --> 00:02:05.370
However, the structure
is only defined.

54
00:02:05.640 --> 00:02:07.705
It does not take memory space.

55
00:02:07.891 --> 00:02:10.310
Only after we create a variable

56
00:02:10.446 --> 00:02:12.075
of type date.

57
00:02:12.211 --> 00:02:14.986
The structure will actually
take up memory space

58
00:02:15.121 --> 00:02:17.060
then we can access
its attributes.

59
00:02:17.901 --> 00:02:20.180
It sounds really confusing
with what I've just had,

60
00:02:20.315 --> 00:02:21.216
what I've just said.

61
00:02:21.591 --> 00:02:22.146
But

62
00:02:22.451 --> 00:02:23.105
don't worry about it,

63
00:02:23.241 --> 00:02:25.026
once I'll write the code
you'll see it.

64
00:02:25.161 --> 00:02:27.510
So when we create a variable
of type date,

65
00:02:27.745 --> 00:02:29.676
we say that we instanciate

66
00:02:29.811 --> 00:02:31.110
the structure date.

67
00:02:31.461 --> 00:02:33.035
So it's just one of those terms

68
00:02:33.805 --> 00:02:36.131
that you should have
in mind

69
00:02:36.266 --> 00:02:37.170
and that you should remember.

70
00:02:37.636 --> 00:02:41.365
That is we will create
an object of type date.

71
00:02:41.536 --> 00:02:44.830
This is a declaration of
a structure variable.

72
00:02:45.161 --> 00:02:45.851
So,

73
00:02:46.066 --> 00:02:47.146
look fully here what I'm about
to do.

74
00:02:47.281 --> 00:02:49.500
I'm going to basically
go ahead and

75
00:02:49.661 --> 00:02:50.425
take this.

76
00:02:50.801 --> 00:02:51.820
Control x

77
00:02:52.196 --> 00:02:53.075
and place it here,

78
00:02:53.241 --> 00:02:54.000
above the main.

79
00:02:56.001 --> 00:02:57.136
Well, outside of the main.

80
00:02:57.651 --> 00:03:00.276
That's the idea here.

81
00:03:00.576 --> 00:03:02.920
And then I'm going to go
back into the main.

82
00:03:07.736 --> 00:03:08.506
There we go.

83
00:03:08.641 --> 00:03:10.116
And I'm going to type in

84
00:03:10.466 --> 00:03:11.140
date

85
00:03:11.305 --> 00:03:12.145
space

86
00:03:12.281 --> 00:03:12.835
d

87
00:03:13.021 --> 00:03:13.575
t

88
00:03:14.206 --> 00:03:14.855
;

89
00:03:15.345 --> 00:03:17.081
So this creates a variable

90
00:03:17.366 --> 00:03:20.106
dt of type date.

91
00:03:20.986 --> 00:03:23.098
Sounds rather strange
but look at this.

92
00:03:23.446 --> 00:03:27.090
It's not really that much different
from me typing int.

93
00:03:27.556 --> 00:03:29.225
dt
you see.

94
00:03:29.556 --> 00:03:32.130
I mean there is highlighting
sure, but the concept

95
00:03:32.411 --> 00:03:33.426
is fairly similar.

96
00:03:34.821 --> 00:03:35.980
Excellent.

97
00:03:36.681 --> 00:03:39.835
So we will access the attributes
day, month

98
00:03:40.376 --> 00:03:40.936
and

99
00:03:41.071 --> 00:03:41.700
a year

100
00:03:41.836 --> 00:03:46.130
using a special operator called
member access operator.

101
00:03:46.761 --> 00:03:49.890
And this is a dot operator, so
just place a dot basically.

102
00:03:51.566 --> 00:03:53.283
We will write a variable name

103
00:03:53.771 --> 00:03:54.681
followed by a dot

104
00:03:54.816 --> 00:03:55.680
and then the name

105
00:03:55.816 --> 00:03:56.486
of the attribute.

106
00:03:59.161 --> 00:04:00.600
You have a variable name

107
00:04:01.111 --> 00:04:02.080
which is dt

108
00:04:02.226 --> 00:04:03.406
and then you place a dot

109
00:04:03.710 --> 00:04:05.270
and then you place a name of

110
00:04:05.405 --> 00:04:07.546
one of these variables
and that's how you basically

111
00:04:07.681 --> 00:04:08.975
that's how you

112
00:04:09.331 --> 00:04:10.305
would access

113
00:04:10.441 --> 00:04:11.670
one of the attributes here.

114
00:04:14.346 --> 00:04:17.385
So let's go ahead and have
some fun with it.

115
00:04:19.105 --> 00:04:20.356
So let's type in std.

116
00:04:21.101 --> 00:04:22.168
I don't know,
cout

117
00:04:24.721 --> 00:04:25.486
enter

118
00:04:25.721 --> 00:04:26.300
month

119
00:04:27.045 --> 00:04:27.576
okay.

120
00:04:28.391 --> 00:04:29.923
So this is fairly simple.

121
00:04:30.551 --> 00:04:31.385
std

122
00:04:31.526 --> 00:04:33.821
::cin
nothing new here,

123
00:04:34.221 --> 00:04:36.080
all the same.
And now we write

124
00:04:36.216 --> 00:04:39.731
dt.day

125
00:04:40.186 --> 00:04:42.586
You see, it even actually,
code blocks even helps you out.

126
00:04:42.721 --> 00:04:44.640
It gives you the set
of possibilities.

127
00:04:44.776 --> 00:04:46.666
So you can basically,
day, month, year

128
00:04:46.801 --> 00:04:48.360
and it even tells you

129
00:04:48.755 --> 00:04:49.866
their ints.

130
00:04:50.450 --> 00:04:52.050
It could have told you
that there were

131
00:04:52.191 --> 00:04:53.165
floats or whatever,

132
00:04:53.536 --> 00:04:54.210
doesn't matter.

133
00:04:55.951 --> 00:04:56.995
And that is how

134
00:04:57.230 --> 00:04:58.296
we shall

135
00:04:58.436 --> 00:04:59.371
fill day up.

136
00:04:59.506 --> 00:05:00.370
We will initialize it.

137
00:05:00.505 --> 00:05:01.476
We will give it a value.

138
00:05:03.546 --> 00:05:05.516
Okay so, std ::

139
00:05:06.866 --> 00:05:08.280
We shall repeat the process.

140
00:05:08.840 --> 00:05:09.626
I know that

141
00:05:10.071 --> 00:05:10.841
repetition

142
00:05:10.976 --> 00:05:13.133
can be a little bit boring

143
00:05:14.201 --> 00:05:14.805
but

144
00:05:16.316 --> 00:05:18.451
it's really not bad for learning,
so to say.

145
00:05:19.821 --> 00:05:22.720
Some things you memorize,
most things you understand,

146
00:05:23.051 --> 00:05:25.300
at the end of the day
you're able to code.

147
00:05:25.881 --> 00:05:27.135
That's the important part.

148
00:05:28.691 --> 00:05:31.105
So, same thing we shall do
for the year and

149
00:05:31.531 --> 00:05:35.425
it's like enter day and
then I have a year here.

150
00:05:36.446 --> 00:05:37.170
It's going to be,

151
00:05:39.046 --> 00:05:39.795
it should be month,

152
00:05:39.931 --> 00:05:41.183
day, year, right?

153
00:05:43.670 --> 00:05:44.271
month

154
00:05:47.616 --> 00:05:48.171
month

155
00:05:51.331 --> 00:05:52.141
day

156
00:05:55.741 --> 00:05:57.040
and we will try to be

157
00:05:57.275 --> 00:05:58.736
cheeky here and

158
00:05:58.946 --> 00:05:59.756
copy this.

159
00:06:01.780 --> 00:06:03.055
And we shall simply

160
00:06:03.636 --> 00:06:04.425
rename this to

161
00:06:04.796 --> 00:06:05.421
year

162
00:06:06.166 --> 00:06:07.140
and up here

163
00:06:07.491 --> 00:06:09.795
it will be year.

164
00:06:10.231 --> 00:06:10.810
There we go.

165
00:06:12.090 --> 00:06:14.361
So now, our variable dt

166
00:06:14.621 --> 00:06:17.313
holds information about date.

167
00:06:19.566 --> 00:06:21.676
Date is our structure above.

168
00:06:23.396 --> 00:06:24.905
We can print them out

169
00:06:26.181 --> 00:06:27.900
pretty much any format
that you want.

170
00:06:28.156 --> 00:06:28.990
But let's

171
00:06:29.131 --> 00:06:31.125
just go ahead and
do it like this.

172
00:06:32.591 --> 00:06:33.966
Well actually you can do
it anyway you want.

173
00:06:34.101 --> 00:06:35.748
I'm just going to go ahead and

174
00:06:35.890 --> 00:06:36.700
write it

175
00:06:36.841 --> 00:06:38.233
in this fashion, so.

176
00:06:41.206 --> 00:06:41.948
Entered

177
00:06:43.086 --> 00:06:43.735
date

178
00:06:45.341 --> 00:06:46.080
;

179
00:06:49.496 --> 00:06:51.075
and we're going to separate this.

180
00:06:51.211 --> 00:06:54.485
Keep in mind that this is purely
for aesthetic reasons in my opinion.

181
00:06:55.231 --> 00:06:57.805
This is not going to go
into a new line.

182
00:06:58.040 --> 00:06:58.463
So,

183
00:06:58.596 --> 00:07:00.785
this is all going to be
printed out on the same line.

184
00:07:00.921 --> 00:07:04.445
There is no endl or new line
character here anything like that.

185
00:07:04.821 --> 00:07:05.751
It's all on the same line

186
00:07:05.886 --> 00:07:07.585
except I'm writing different
lines of code.

187
00:07:07.721 --> 00:07:08.995
But when it gets printed out,

188
00:07:09.975 --> 00:07:11.065
it's going to be on the same line.

189
00:07:11.925 --> 00:07:12.348
So,

190
00:07:12.481 --> 00:07:13.361
dt.

191
00:07:13.761 --> 00:07:16.640
month. You see we're
accessing attributes in this fashion.

192
00:07:16.776 --> 00:07:18.200
dt variable name

193
00:07:18.335 --> 00:07:19.151
and then dot

194
00:07:19.286 --> 00:07:20.095
attribute name.

195
00:07:23.371 --> 00:07:25.675
I've showered you a little bit
with some

196
00:07:25.811 --> 00:07:26.991
technical terms,

197
00:07:27.576 --> 00:07:28.571
names basically

198
00:07:30.546 --> 00:07:32.680
or technical terms, however
you wish to call them.

199
00:07:34.586 --> 00:07:35.885
Make sure

200
00:07:36.026 --> 00:07:38.700
that you remember at least

201
00:07:38.836 --> 00:07:39.763
some of them.

202
00:07:39.926 --> 00:07:41.906
Because if ever you read
any material,

203
00:07:42.041 --> 00:07:45.290
etc. you will find, you will
encouter these terms and

204
00:07:45.521 --> 00:07:47.426
it's going to save you a lot
of time by just knowing

205
00:07:47.561 --> 00:07:49.630
what they are as supposed to

206
00:07:50.931 --> 00:07:53.695
going about every time and
looking it up on the net.

207
00:07:56.786 --> 00:07:59.150
But on the more important side
of notes, it will make,

208
00:07:59.316 --> 00:08:02.570
it will help you out
in reading form post

209
00:08:02.706 --> 00:08:05.790
in regards to C++ and in regard
to some solutions to code.

210
00:08:07.626 --> 00:08:08.950
Because let's be honest

211
00:08:09.531 --> 00:08:11.140
if there is a coding problem,

212
00:08:11.276 --> 00:08:14.265
you always go to the forums.
You never go to the books.

213
00:08:15.336 --> 00:08:20.380
Okay so this will create a print out.
So keep in mind

214
00:08:20.516 --> 00:08:23.940
that we can access the structure
attributes only

215
00:08:24.076 --> 00:08:25.186
when it is declared.

216
00:08:25.321 --> 00:08:26.248
So keep that in mind.

217
00:08:26.736 --> 00:08:29.545
You can only access the attributes
when it is declared

218
00:08:30.011 --> 00:08:30.520
that is.

219
00:08:31.171 --> 00:08:32.035
When we create

220
00:08:32.171 --> 00:08:33.121
a variable

221
00:08:33.401 --> 00:08:34.166
of

222
00:08:34.611 --> 00:08:35.301
its type,

223
00:08:35.516 --> 00:08:37.786
we cannot write for example,

224
00:08:40.876 --> 00:08:42.265
I don't know let's put
it like this.

225
00:08:42.401 --> 00:08:43.175
So we cannot write this.

226
00:08:43.996 --> 00:08:45.171
date.

227
00:08:45.451 --> 00:08:46.006
day

228
00:08:46.521 --> 00:08:48.355
equals 10.

229
00:08:48.771 --> 00:08:49.490
So this is

230
00:08:50.026 --> 00:08:50.473
not

231
00:08:50.606 --> 00:08:53.606
going to work, so yeah
you see.

232
00:08:53.741 --> 00:08:54.721
date.day

233
00:08:54.856 --> 00:08:55.365
equals 10.

234
00:08:55.806 --> 00:08:58.575
Date is the structure name
and this not going to work.

235
00:08:58.711 --> 00:09:00.525
Here let me just try
to compile it.

236
00:09:00.661 --> 00:09:02.725
If I didn't make any errors
and I didn't.

237
00:09:03.216 --> 00:09:03.931
So this,

238
00:09:04.066 --> 00:09:06.506
you cannot utilize it
in this fashion.

239
00:09:06.641 --> 00:09:08.970
Okay semi-colon,
fine, whatever.

240
00:09:09.251 --> 00:09:10.385
Let's go ahead and
run it again.

241
00:09:10.926 --> 00:09:12.626
But I'm going to get an
error again, it doesn't matter.

242
00:09:12.761 --> 00:09:14.520
It will not work.

243
00:09:15.080 --> 00:09:16.060
So you cannot do

244
00:09:16.195 --> 00:09:17.145
like write a date

245
00:09:17.331 --> 00:09:17.871
and

246
00:09:18.006 --> 00:09:20.161
as it is here and then
place a dot.

247
00:09:20.466 --> 00:09:22.300
And then access
and attribute

248
00:09:22.556 --> 00:09:23.948
from the structure.

249
00:09:24.181 --> 00:09:25.161
You need to do this.

250
00:09:25.296 --> 00:09:26.045
Date and then

251
00:09:28.246 --> 00:09:31.308
create this variable here.
And by using that variable

252
00:09:31.496 --> 00:09:35.558
you will be accessing attributes
of the structure in this fashion.

253
00:09:35.691 --> 00:09:37.370
See, easy as that.

254
00:09:39.321 --> 00:09:40.805
Okay so, let's run this.

255
00:09:42.920 --> 00:09:43.591
Okay so.

256
00:09:44.706 --> 00:09:45.450
Tenth

257
00:09:45.940 --> 00:09:46.471
of the tenth

258
00:09:46.726 --> 00:09:47.351
of

259
00:09:47.771 --> 00:09:49.905
2016.

260
00:09:51.606 --> 00:09:55.105
Okay, entered date is tenth
of the tenth 2016.

261
00:09:55.241 --> 00:09:57.915
You see the print out
is on the same line,

262
00:09:58.316 --> 00:10:00.356
regardless of me spreading

263
00:10:00.521 --> 00:10:04.490
this write out onto
two lines of code here.

264
00:10:07.461 --> 00:10:08.205
Okay then.

265
00:10:08.671 --> 00:10:12.220
We can take a look at
another short example.

266
00:10:12.455 --> 00:10:14.706
This is not going to be
anything complicated.

267
00:10:14.841 --> 00:10:16.050
So just go ahead

268
00:10:16.656 --> 00:10:17.190
and

269
00:10:17.401 --> 00:10:18.420
well, I can recycle that.

270
00:10:19.396 --> 00:10:19.843
But I am

271
00:10:19.976 --> 00:10:20.741
going to

272
00:10:21.021 --> 00:10:22.415
remove all of these.

273
00:10:24.206 --> 00:10:27.160
And we're going to have like
date, dt

274
00:10:28.196 --> 00:10:29.550
1 and then

275
00:10:29.686 --> 00:10:32.101
dt2

276
00:10:32.656 --> 00:10:33.630
What could this be?

277
00:10:34.461 --> 00:10:37.065
Well, this is awesome.

278
00:10:37.206 --> 00:10:39.131
Because it allows you
to recycle

279
00:10:39.390 --> 00:10:40.781
variable names

280
00:10:41.271 --> 00:10:42.126
a lot

281
00:10:42.710 --> 00:10:44.541
in a way, I guess.

282
00:10:44.731 --> 00:10:46.911
Take that with a grain of salt
and here's why.

283
00:10:47.166 --> 00:10:49.346
So you type in dt1.

284
00:10:50.186 --> 00:10:51.398
year and

285
00:10:51.531 --> 00:10:54.430
you can say that, let's say
that this is 2016.

286
00:10:56.131 --> 00:10:59.585
But then you can type in
dt2.

287
00:10:59.961 --> 00:11:01.771
year equals

288
00:11:02.376 --> 00:11:04.140
2020.

289
00:11:06.231 --> 00:11:07.095
So what is this?

290
00:11:07.231 --> 00:11:09.346
It seems that we have
2 years and yet

291
00:11:09.481 --> 00:11:12.426
there was only 1 attribute
here in this struct date.

292
00:11:12.561 --> 00:11:14.355
Well,

293
00:11:14.776 --> 00:11:16.840
yes, you can do this.

294
00:11:17.006 --> 00:11:18.006
You can have

295
00:11:18.141 --> 00:11:19.580
different variables here

296
00:11:19.886 --> 00:11:21.790
and each one of this
variables can be

297
00:11:21.926 --> 00:11:25.200
use to give a value
to one of these attributes.

298
00:11:25.550 --> 00:11:26.706
And if you call

299
00:11:27.500 --> 00:11:30.570
dt1.year, you're going to
get 2016.

300
00:11:30.706 --> 00:11:33.863
If you call dt2.year, you're
going to get 2020.

301
00:11:33.996 --> 00:11:35.111
Here, let me just actually

302
00:11:35.811 --> 00:11:36.513
create a

303
00:11:36.646 --> 00:11:39.130
print out and then will
round this tutorial up.

304
00:11:41.616 --> 00:11:43.570
So...

305
00:11:43.706 --> 00:11:45.121
how shall we do this.

306
00:11:45.311 --> 00:11:47.745
Well, let's just do it
like this.

307
00:11:48.001 --> 00:11:48.741
dt

308
00:11:49.326 --> 00:11:50.206
1.

309
00:11:51.555 --> 00:11:52.250
year

310
00:11:52.436 --> 00:11:54.645
is equal

311
00:11:55.201 --> 00:11:55.780
to

312
00:11:57.311 --> 00:11:58.170
dt1.

313
00:11:59.055 --> 00:11:59.701
dt1

314
00:12:01.096 --> 00:12:01.630
.year

315
00:12:05.905 --> 00:12:06.831
std::

316
00:12:07.226 --> 00:12:07.805
endl

317
00:12:09.156 --> 00:12:10.386
Fantastic. So now here,

318
00:12:10.521 --> 00:12:12.865
std cout

319
00:12:17.281 --> 00:12:19.161
We have to see what
I'm writing.

320
00:12:20.231 --> 00:12:21.065
dt

321
00:12:21.740 --> 00:12:22.526
2.

322
00:12:23.526 --> 00:12:24.586
year

323
00:12:24.721 --> 00:12:28.245
shall be equal to

324
00:12:28.451 --> 00:12:29.355
dt

325
00:12:29.820 --> 00:12:30.631
2.

326
00:12:31.236 --> 00:12:31.908
year

327
00:12:33.165 --> 00:12:34.901
std::

328
00:12:35.186 --> 00:12:35.786
endl

329
00:12:36.885 --> 00:12:39.626
Okay, so. You will see that
these two contain

330
00:12:39.761 --> 00:12:43.400
completely different values.
So 2016 and 2020.

331
00:12:45.166 --> 00:12:46.241
There you go,

332
00:12:46.376 --> 00:12:48.440
2016, 2020.

333
00:12:48.676 --> 00:12:51.220
So I just wanted to,
as a last note of this tutorial,

334
00:12:51.356 --> 00:12:54.175
I just want to show you
that you can actually even do

335
00:12:54.526 --> 00:12:55.645
this without

336
00:12:55.780 --> 00:12:56.271
any

337
00:12:56.406 --> 00:12:57.656
problems of whatsoever.

338
00:12:58.236 --> 00:12:59.785
Anyway, I bid you
farewell.

339
00:12:59.921 --> 00:13:01.325
And we shall hopefully
see

340
00:13:01.746 --> 00:13:03.300
each other in the
follow up tutorial.

