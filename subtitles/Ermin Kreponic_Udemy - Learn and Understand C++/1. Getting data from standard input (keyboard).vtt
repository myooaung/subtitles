WEBVTT

1
00:00:00.191 --> 00:00:01.371
Welcome back all!

2
00:00:01.536 --> 00:00:05.170
Today we're going to go ahead
jump into a next chapter

3
00:00:06.081 --> 00:00:07.840
So, we're still sticking to some basic
stuff

4
00:00:08.001 --> 00:00:12.720
and today we're going to have a look
at interaction with the user

5
00:00:12.881 --> 00:00:16.605
so we will attempt to make some
sort of an interactive program

6
00:00:16.766 --> 00:00:18.970
basic as it may be,

7
00:00:19.456 --> 00:00:24.881
it is still a form of interaction between
a user and the program itself.

8
00:00:26.261 --> 00:00:30.153
So, in this particular chapter,
I will show you how to input values

9
00:00:30.316 --> 00:00:31.325
from a keyboard.

10
00:00:31.486 --> 00:00:35.320
We will also talk about some advanced
things regarding variables

11
00:00:35.481 --> 00:00:37.000
and their declaration.

12
00:00:37.441 --> 00:00:42.245
Our first example will illustrate
basically how to write a program

13
00:00:42.431 --> 00:00:46.300
that prompts a user to enter
an integer as an input.

14
00:00:47.166 --> 00:00:51.760
And then, I don't know, outputs a
squared value of that number or something

15
00:00:51.921 --> 00:00:53.760
like that. It doesn't really matter.

16
00:00:54.146 --> 00:00:58.566
So, let's go ahead and create
ourselves a new project for a new chapter.

17
00:00:59.626 --> 00:01:02.425
So, just go ahead and go
into new projects

18
00:01:02.976 --> 00:01:05.095
console application,

19
00:01:05.686 --> 00:01:08.210
next make sure you
select C++

20
00:01:08.651 --> 00:01:10.280
click on next again.

21
00:01:10.526 --> 00:01:15.205
And I'm going to let it stay
on desktop

22
00:01:15.691 --> 00:01:17.275
but you can basically put it anyway
you want

23
00:01:17.866 --> 00:01:21.200
and I shall be naming this one.

24
00:01:22.861 --> 00:01:24.680
We shall name it

25
00:01:24.971 --> 00:01:25.641
Oops!

26
00:01:25.801 --> 00:01:27.506
Sorry, my bad!

27
00:01:29.536 --> 00:01:31.185
I just messed up my notes
but it's ok.

28
00:01:31.436 --> 00:01:34.001
Let's just call it interaction
with the users.

29
00:01:37.496 --> 00:01:42.261
Interaction

30
00:01:44.766 --> 00:01:45.333
with the user

31
00:01:45.496 --> 00:01:47.911
Hopefully I spelled that in a
proper way.

32
00:01:48.266 --> 00:01:49.915
Go ahead and click on next.

33
00:01:50.121 --> 00:01:51.520
Finished, that's it!

34
00:01:52.556 --> 00:01:56.976
Plus on sources, main.cpp
and already you are given

35
00:01:57.141 --> 00:01:58.001
this template

36
00:01:58.401 --> 00:02:02.880
at a certain point in time,
we might actually be using

37
00:02:03.041 --> 00:02:04.655
a template or
creating our own but for the time being,

38
00:02:04.991 --> 00:02:08.320
we will be typing everything
ourselves.

39
00:02:08.481 --> 00:02:11.225
We're not skipping one thing at all.

40
00:02:11.946 --> 00:02:13.620
So, let's begin

41
00:02:13.781 --> 00:02:16.965
with the inclusion of a library,

42
00:02:17.281 --> 00:02:20.680
a library whose resources we will
need.

43
00:02:20.841 --> 00:02:22.495
And on top of that let's go ahead

44
00:02:22.656 --> 00:02:25.120
and do a bit of a zoom in as well.

45
00:02:30.060 --> 00:02:30.876
include

46
00:02:31.126 --> 00:02:37.405
and here we shall include iostream.

47
00:02:37.781 --> 00:02:39.986
So, input output stream.

48
00:02:41.250 --> 00:02:45.640
Down below, we'll go ahead and
declare our main function.

49
00:02:47.426 --> 00:02:48.176
main

50
00:02:49.281 --> 00:02:50.333
do this.

51
00:02:50.686 --> 00:02:54.255
Give it a scope and now let's begin.
Type it int

52
00:02:55.231 --> 00:03:01.640
number; So, first of all, we are
declaring a variable number of type int.

53
00:03:01.866 --> 00:03:05.520
This number will hold the user input.

54
00:03:06.601 --> 00:03:08.788
Next up, we will type in std.

55
00:03:08.951 --> 00:03:13.221
So, we will use something
from std namespace

56
00:03:13.985 --> 00:03:15.036
cout

57
00:03:15.306 --> 00:03:17.025
insertion operator.

58
00:03:17.186 --> 00:03:20.026
and we will write something simple here
like,

59
00:03:20.555 --> 00:03:21.565
Enter

60
00:03:22.220 --> 00:03:23.141
an

61
00:03:23.541 --> 00:03:26.251
integer.

62
00:03:27.061 --> 00:03:27.686
Excellent.

63
00:03:27.871 --> 00:03:29.245
So, let's go ahead and close it.

64
00:03:29.901 --> 00:03:31.040
A line terminator and

65
00:03:31.201 --> 00:03:36.560
with this we are going to prompt
the user to enter an integer.

66
00:03:37.151 --> 00:03:40.760
Basically, this is basically
going to be printed out into the screen

67
00:03:40.921 --> 00:03:41.445
and say to the user "Hey

68
00:03:41.696 --> 00:03:43.600
enter and integer."

69
00:03:43.956 --> 00:03:48.320
Very well, but now we need a method for
accepting what the user inputs.

70
00:03:48.481 --> 00:03:51.150
Again we will use something
from namespace std

71
00:03:51.401 --> 00:03:54.501
type in std::cin

72
00:03:55.030 --> 00:03:58.535
and we will do greater and greater than
sign.

73
00:03:59.595 --> 00:04:00.731
number; that's it.

74
00:04:01.151 --> 00:04:02.320
So,

75
00:04:02.666 --> 00:04:04.910
input from the keyboard

76
00:04:05.376 --> 00:04:06.365
and

77
00:04:06.616 --> 00:04:10.560
this greater greater than sign is
basically the opposite of lesser than

78
00:04:10.721 --> 00:04:11.380
lesser than sign.

79
00:04:11.541 --> 00:04:16.113
It is called and referred to as
extraction operator.

80
00:04:16.556 --> 00:04:19.295
It extracts the value from a variable

81
00:04:19.456 --> 00:04:20.316
so

82
00:04:20.651 --> 00:04:23.005
you have std::

83
00:04:23.255 --> 00:04:23.966
cin

84
00:04:24.126 --> 00:04:26.310
we will present our standard

85
00:04:26.476 --> 00:04:27.595
input from

86
00:04:27.756 --> 00:04:28.380
the keyboard.

87
00:04:28.566 --> 00:04:31.430
And then puts into a variable number.

88
00:04:32.151 --> 00:04:35.505
So we will accept some sort of an input
from the keyboard

89
00:04:35.711 --> 00:04:40.795
and then we will use the extraction
operator and then we will place that value

90
00:04:41.001 --> 00:04:45.186
within the variable number.

91
00:04:48.661 --> 00:04:55.155
cin is basically short for character input
c - character in- input.

92
00:04:55.316 --> 00:04:57.030
As simple as that, no big deal
there.

93
00:04:58.046 --> 00:04:59.720
Ok, so now,

94
00:04:59.881 --> 00:05:04.050
we are going to go ahead and square
that particular number.

95
00:05:04.621 --> 00:05:06.000
Let's go ahead and declare
a variable

96
00:05:06.161 --> 00:05:09.800
in which we will store that number.

97
00:05:13.471 --> 00:05:14.395
squared

98
00:05:14.775 --> 00:05:16.060
=

99
00:05:17.226 --> 00:05:18.130
number

100
00:05:19.441 --> 00:05:20.416
*number

101
00:05:20.576 --> 00:05:22.520
basically this is a square

102
00:05:25.866 --> 00:05:27.430
one times itself.

103
00:05:29.686 --> 00:05:32.560
Simple enough, I don't think I need
to explain what the square of a number is.

104
00:05:32.781 --> 00:05:34.001
; here

105
00:05:34.401 --> 00:05:36.880
We have declared a variable square here.

106
00:05:37.041 --> 00:05:39.360
I have only named it squared.

107
00:05:39.521 --> 00:05:41.440
It is up to you
as I have explained it before

108
00:05:41.601 --> 00:05:43.280
to name variables

109
00:05:43.681 --> 00:05:45.738
pretty much whichever way you want
but

110
00:05:45.900 --> 00:05:49.791
it is a standard and a good
programming practice to name them

111
00:05:49.951 --> 00:05:52.370
in some sort of a meaningful way.

112
00:05:54.326 --> 00:05:55.760
So, I have declared it as variable

113
00:05:55.921 --> 00:06:00.585
and directly I will assign
the result of multiplying

114
00:06:00.746 --> 00:06:04.571
two numbers or multiplying
a number with itself.

115
00:06:05.076 --> 00:06:10.640
You have an asterisk sign in between.
This is a binary operator. So, this is

116
00:06:10.801 --> 00:06:12.850
the asterisk sign in between

117
00:06:13.036 --> 00:06:17.541
which is a binary operator and is
used for multiplication.

118
00:06:18.751 --> 00:06:22.810
Keep in mind that the value
of the variable number has not

119
00:06:23.061 --> 00:06:24.583
changed at all.

120
00:06:25.536 --> 00:06:30.153
We have simply multiplied by itself but
we haven't stored this into

121
00:06:30.315 --> 00:06:34.181
number. We are storing this to
the variable squared.

122
00:06:34.686 --> 00:06:38.793
So the value of the variable
number still stays the same.

123
00:06:38.955 --> 00:06:40.640
No change there.

124
00:06:41.321 --> 00:06:42.290
Ok, next up.

125
00:06:43.030 --> 00:06:44.741
std::

126
00:06:45.246 --> 00:06:46.150
cout

127
00:06:46.826 --> 00:06:48.261
lesser and lesser than sign,

128
00:06:53.420 --> 00:06:54.321
Squared

129
00:06:54.935 --> 00:06:55.621
number

130
00:06:56.621 --> 00:06:59.720
quotation marks of course and we're going
to do this.

131
00:06:59.881 --> 00:07:03.155
We're basically just formatting
the output unto the screen

132
00:07:03.316 --> 00:07:05.180
you want to make it as pretty as

133
00:07:05.346 --> 00:07:05.930
as you can.

134
00:07:06.091 --> 00:07:08.680
So, that people can actually read it.

135
00:07:11.041 --> 00:07:17.960
is and we're going to do this a bit
unnecessary. All of this could have been

136
00:07:18.121 --> 00:07:21.136
placed in one and in one line
but it's ok fine

137
00:07:21.406 --> 00:07:22.920
no problems.

138
00:07:24.416 --> 00:07:27.133
And we're going to go ahead and do this
again.

139
00:07:27.896 --> 00:07:31.160
Now, we shall insert a variable here.

140
00:07:32.926 --> 00:07:33.871
Squared

141
00:07:34.295 --> 00:07:36.071
do this std

142
00:07:36.511 --> 00:07:37.520
::

143
00:07:37.876 --> 00:07:39.120
endl

144
00:07:39.905 --> 00:07:41.898
meaning, we are going into the next

145
00:07:42.060 --> 00:07:42.726
line

146
00:07:42.936 --> 00:07:46.720
and it is not only used to go into the next line

147
00:07:46.881 --> 00:07:49.320
but it flushes the current buffer.

148
00:07:49.481 --> 00:07:51.640
it empties it completely.

149
00:07:52.126 --> 00:07:56.080
That's why you also use
a /n

150
00:07:56.286 --> 00:07:59.260
/n which is a character
for a new line

151
00:08:00.041 --> 00:08:03.950
but in a lot of cases, it is better
to use endl as it is a buffer

152
00:08:04.286 --> 00:08:05.426
New Entry 143

153
00:08:05.586 --> 00:08:06.645
It's a buffer

154
00:08:06.806 --> 00:08:08.640
basically. It just flushes the entire
buffer.

155
00:08:08.801 --> 00:08:11.000
there is nothing that remains in it.

156
00:08:12.715 --> 00:08:15.686
So, this will print out
the squared number.

157
00:08:16.150 --> 00:08:19.356
down below, we can again use
std

158
00:08:20.246 --> 00:08:21.173
cout

159
00:08:21.335 --> 00:08:24.520
which will be of course printed out
to the next line due to the usage

160
00:08:24.831 --> 00:08:26.280
of endl

161
00:08:27.776 --> 00:08:28.828
Squared

162
00:08:29.741 --> 00:08:31.520
number

163
00:08:32.831 --> 00:08:34.266
&lt;&lt;

164
00:08:34.625 --> 00:08:36.720
number here, we're using the variable

165
00:08:36.881 --> 00:08:40.880
number whose value is going to be
placed here.

166
00:08:42.581 --> 00:08:45.170
and let's go ahead and type in "is"

167
00:08:45.420 --> 00:08:46.388
space

168
00:08:46.551 --> 00:08:47.661
do this.

169
00:08:48.471 --> 00:08:49.440
number

170
00:08:49.601 --> 00:08:50.716
*

171
00:08:51.265 --> 00:08:54.090
number because you can also
form operations

172
00:08:54.251 --> 00:08:58.185
here directly. You don't need
to perform them separately

173
00:08:58.346 --> 00:09:00.295
from this. In such a way
where we would actually

174
00:09:00.460 --> 00:09:03.880
save ourselves the trouble
of declaring this variable

175
00:09:04.041 --> 00:09:06.351
to store this value.

176
00:09:06.625 --> 00:09:10.920
But if we do it like this, this value
won't be stored anywhere and

177
00:09:11.081 --> 00:09:12.430
we won't be able to reuse it
later.

178
00:09:13.086 --> 00:09:14.440
Anywhere is a relative term.

179
00:09:14.601 --> 00:09:17.490
But I'm just saying that
we won't be able to reuse this value

180
00:09:17.656 --> 00:09:21.800
elsewhere, unless we store it
to some sort of a variable.

181
00:09:22.601 --> 00:09:26.040
and now we can
basically just do this.

182
00:09:26.826 --> 00:09:28.070
I don't want to

183
00:09:29.111 --> 00:09:30.200
do it like that.

184
00:09:31.286 --> 00:09:32.231
Let's just do it here,

185
00:09:33.591 --> 00:09:35.925
endl

186
00:09:36.086 --> 00:09:36.818
;

187
00:09:37.601 --> 00:09:39.805
Excellent, so this will once again

188
00:09:39.990 --> 00:09:42.086
print out the square number.

189
00:09:42.721 --> 00:09:47.800
But we can directly print it out, we
can directly print out the squared value

190
00:09:47.961 --> 00:09:50.920
without declaring the value squared
as I said because

191
00:09:51.081 --> 00:09:52.431
then we can actually

192
00:09:52.596 --> 00:09:53.371
store it.

193
00:09:53.706 --> 00:09:59.110
And once this squared value is stored,
within the variable squared,

194
00:09:59.296 --> 00:10:02.600
then it can be reused elsewhere
in the code as many times as we want.

195
00:10:02.761 --> 00:10:07.750
We won't need to type in number of times
some number of times, some number

196
00:10:08.041 --> 00:10:08.606
and

197
00:10:08.766 --> 00:10:11.975
then calculate that every single time.

198
00:10:12.246 --> 00:10:13.066
So, not only

199
00:10:13.226 --> 00:10:14.960
that we actually

200
00:10:15.766 --> 00:10:16.480
save space

201
00:10:16.641 --> 00:10:19.420
like this. But we also,

202
00:10:19.626 --> 00:10:21.915
save the processor type.

203
00:10:22.271 --> 00:10:24.710
If we were to do this every
single time,

204
00:10:25.046 --> 00:10:27.400
we would occupy more processer time

205
00:10:27.561 --> 00:10:28.320
than we do it like this.

206
00:10:28.481 --> 00:10:31.240
So we just multiply
them once, we store them into a variable

207
00:10:31.401 --> 00:10:33.140
and then we reuse the variable

208
00:10:33.301 --> 00:10:36.480
on and later on
to our hearts content.

209
00:10:37.016 --> 00:10:39.005
But if we needed the square number

210
00:10:39.531 --> 00:10:41.480
of this particular variable,

211
00:10:41.641 --> 00:10:44.560
then we would need
to multiply every single time

212
00:10:44.721 --> 00:10:45.620
down the

213
00:10:45.781 --> 00:10:46.706
road

214
00:10:46.976 --> 00:10:48.666
without actually

215
00:10:48.856 --> 00:10:50.920
storing it anywhere.

216
00:10:51.541 --> 00:10:52.960
Anyway, I'm pretty sure you get the idea,

217
00:10:53.121 --> 00:10:57.080
if you don't the discussion section
is always open

218
00:10:57.241 --> 00:10:58.610
and is always most welcoming to you.

219
00:10:59.841 --> 00:11:01.575
Now at the end of it we shall type in

220
00:11:01.825 --> 00:11:02.645
return

221
00:11:02.806 --> 00:11:03.733
0

222
00:11:03.895 --> 00:11:06.011
; and

223
00:11:06.176 --> 00:11:08.920
let's go ahead and end this.

224
00:11:10.036 --> 00:11:12.390
Have I done this? Yes, ok,
its' already there.

225
00:11:13.686 --> 00:11:14.880
No big deal.

226
00:11:15.436 --> 00:11:18.281
So, let's go ahead and run our code
and see

227
00:11:18.441 --> 00:11:20.560
what actually happens

228
00:11:21.791 --> 00:11:25.275
you build and run, oh there's a
problem somewhere.

229
00:11:26.295 --> 00:11:27.600
What could it be?

230
00:11:28.171 --> 00:11:30.525
So, it's stating that it is
on this line.

231
00:11:31.180 --> 00:11:32.101
Oh, right right right.

232
00:11:32.521 --> 00:11:33.770
endl was not declared

233
00:11:33.931 --> 00:11:35.515
so std ::

234
00:11:35.721 --> 00:11:37.141
there we go.

235
00:11:37.301 --> 00:11:38.630
Let's go ahead and run again.

236
00:11:40.631 --> 00:11:43.151
and there you go, it says
enter an integer.

237
00:11:44.511 --> 00:11:45.711
10.

238
00:11:45.921 --> 00:11:48.805
So square of 10 is 100.

239
00:11:49.206 --> 00:11:50.470
Press enter, there you go.

240
00:11:50.846 --> 00:11:55.480
Square number is 100. I seem to have
an extra space here.

241
00:11:55.641 --> 00:11:58.215
But no big deal, we can fix
that rather fast.

242
00:11:58.526 --> 00:11:59.753
and square number

243
00:11:59.915 --> 00:12:01.205
10 is

244
00:12:01.366 --> 00:12:02.268
100.

245
00:12:02.710 --> 00:12:05.170
Ok, I could have written this in a better
fashion.

246
00:12:05.396 --> 00:12:09.625
The square of the number 10
is 100 or something like that

247
00:12:10.111 --> 00:12:12.165
but it really doesn't matter.

248
00:12:13.036 --> 00:12:16.260
I just want you to make a point
here. So, let's go ahead and make this

249
00:12:16.621 --> 00:12:17.333
short

250
00:12:17.496 --> 00:12:19.570
fix where there is an extra space

251
00:12:19.776 --> 00:12:21.400
and it's right here.

252
00:12:24.171 --> 00:12:25.671
square number

253
00:12:27.541 --> 00:12:29.760
this number squared is

254
00:12:35.351 --> 00:12:36.720
This number

255
00:12:38.826 --> 00:12:41.200
squared.

256
00:12:41.641 --> 00:12:43.743
This number squared is

257
00:12:43.905 --> 00:12:45.000
and we shall

258
00:12:45.826 --> 00:12:47.360
do this.

259
00:12:48.831 --> 00:12:51.720
I don't even know I wrote
it like this originally, so

260
00:12:51.881 --> 00:12:52.615
the squared

261
00:12:53.101 --> 00:12:55.760
This number squared

262
00:12:59.391 --> 00:13:01.240
Nah!

263
00:13:03.190 --> 00:13:03.921
This number

264
00:13:05.495 --> 00:13:06.396
this number and

265
00:13:07.326 --> 00:13:09.880
number

266
00:13:14.561 --> 00:13:15.401
squared

267
00:13:15.561 --> 00:13:16.276
is

268
00:13:16.436 --> 00:13:17.125
tralala

269
00:13:17.396 --> 00:13:17.898
Let's go ahead and

270
00:13:18.061 --> 00:13:20.960
do this.

271
00:13:22.155 --> 00:13:23.210
Again,

272
00:13:23.371 --> 00:13:24.298
so this number

273
00:13:24.461 --> 00:13:27.026
squared is 100. This number

274
00:13:27.510 --> 00:13:31.720
10 squared is100.

275
00:13:39.646 --> 00:13:40.656
Ok, there we go.

276
00:13:40.926 --> 00:13:45.650
So, this number squared is 100,
N squared is 100.

277
00:13:46.156 --> 00:13:50.280
Really irrelevant, this is just the
formatting. I just wanted to show you

278
00:13:50.441 --> 00:13:52.645
this two main things here

279
00:13:53.111 --> 00:13:54.335
that you can

280
00:13:54.496 --> 00:13:56.190
form some sort of operation,

281
00:13:56.351 --> 00:13:57.235
get a result

282
00:13:57.396 --> 00:13:59.135
store it into a variable,

283
00:13:59.296 --> 00:14:04.210
and then recycle that variable later on.
Use it on the rest of your code.

284
00:14:04.481 --> 00:14:07.153
For example, print it out
like this.

285
00:14:07.401 --> 00:14:12.315
Or you could actually do the math
immediately in the print out

286
00:14:13.246 --> 00:14:14.133
in the

287
00:14:14.296 --> 00:14:17.560
print out statement and we will
actually get a value from this

288
00:14:17.721 --> 00:14:18.416
and this would

289
00:14:18.666 --> 00:14:20.571
get printed out unto the screen

290
00:14:20.926 --> 00:14:25.180
Anyway, I bid you farewell.
And I shall see you in the part...

291
00:14:26.646 --> 00:14:29.991
in the next part... in the next tutorial
of this

292
00:14:30.336 --> 00:14:31.281
mini chapter

