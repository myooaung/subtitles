WEBVTT

00:00:00.000 --> 00:00:03.440
Welcome back next up
we will learn dq so

00:00:03.465 --> 00:00:06.780
is very similar to
vector accepted the

00:00:06.879 --> 00:00:12.410
elements are not continuous in the
memory so in RAM they're not one after

00:00:12.410 --> 00:00:16.024
another and due to the
internal representation

00:00:16.049 --> 00:00:19.930
dq organizes them,
basically dq is

00:00:19.930 --> 00:00:23.603
organized as a list
of lists so to say

00:00:23.628 --> 00:00:27.509
and differs from
vector in with push

00:00:27.609 --> 00:00:30.605
front and pop front
methods which add and

00:00:30.630 --> 00:00:33.540
remove elements from
the top and off the top

00:00:34.260 --> 00:00:37.202
respectively depends
so let's go ahead

00:00:37.227 --> 00:00:39.889
and take a look i've
actually written up

00:00:39.989 --> 00:00:43.670
written the entirety
of the code here and I've been making a

00:00:43.670 --> 00:00:48.219
very stupid mistakes in my recordings
and I couldn't figure out what it was so

00:00:48.219 --> 00:00:51.774
basically I have an
empty dq I'll explain

00:00:51.799 --> 00:00:56.020
how they function
etc but I've been

00:00:56.020 --> 00:00:58.433
using be pushed back
method and I wanted

00:00:58.458 --> 00:01:00.649
to add integer 100
at the end of the

00:01:00.649 --> 00:01:06.900
line at the end of the dq and then I wanted to print out onto the

00:01:06.900 --> 00:01:09.346
screen but basically
I was printing it

00:01:09.371 --> 00:01:12.020
out onto the screen
before I have added

00:01:12.020 --> 00:01:17.240
it to the end of the line and I
continuously kept on getting random

00:01:17.240 --> 00:01:24.420
things I think I lost an hour with this stupid mistake, when I saw what

00:01:24.420 --> 00:01:28.415
the problem was I like
are you kidding me?

00:01:28.440 --> 00:01:32.600
but anyway the reason
why I've actually said

00:01:32.700 --> 00:01:38.659
this is not to make a joke or to
humiliate myself more than I need to but

00:01:38.659 --> 00:01:41.610
rather instead, I want
to state this because I

00:01:41.635 --> 00:01:44.560
talk to myself that
something like this will

00:01:44.560 --> 00:01:47.585
probably happen to
you and I know a lot

00:01:47.610 --> 00:01:50.479
of my friends were
also developers

00:01:50.479 --> 00:01:56.170
sometimes you create a piece of code and
you keep on running at them and

00:01:56.170 --> 00:01:58.793
something that just
doesn't work you

00:01:58.818 --> 00:02:01.479
look at the code a
hundred times and you

00:02:01.479 --> 00:02:04.180
can't figure out what
the problem is, the

00:02:04.205 --> 00:02:07.350
compiler doesn't tell
you if it's an error of

00:02:07.350 --> 00:02:11.610
logic but you just can't it doesn't have
to be it can be can be

00:02:12.160 --> 00:02:16.460
something that the compiler can detect
as well but in general you can fix the

00:02:16.460 --> 00:02:19.920
problem you looking at the code you
really don't understand you spend hours

00:02:19.920 --> 00:02:24.510
and you go on to forums and you look at
it looking at it all over the best

00:02:24.510 --> 00:02:28.750
solution is just to get a fresh pair of
eyes to take a look at it

00:02:28.750 --> 00:02:31.103
for example, this stupid
thing I was doing

00:02:31.128 --> 00:02:33.140
here because I was really
tired a friend came

00:02:33.140 --> 00:02:38.800
along and she was like what are you
doing? are you nuts? and in the first

00:02:38.800 --> 00:02:43.540
three seconds basically off looking at
the code she figured out hey you're

00:02:43.540 --> 00:02:48.140
you're calling it
before the pushback method

00:02:48.140 --> 00:02:50.640
you're printing it
out onto the screen

00:02:50.665 --> 00:02:53.090
before the pushback method.
anyway the

00:02:53.090 --> 00:02:55.236
moral of the story
is if you're stuck

00:02:55.261 --> 00:02:57.600
get a fresh pair of
eyes to have a look

00:02:57.600 --> 00:03:00.405
at it believe me you
will benefit from

00:03:00.430 --> 00:03:03.210
it a great deal.
Anyway let's go over

00:03:03.210 --> 00:03:07.182
this so this is very
similar to vectors

00:03:07.207 --> 00:03:10.740
just include dq here
and the syntax is

00:03:10.740 --> 00:03:16.740
more or less the same if not the same
except for the actual name so we have

00:03:16.740 --> 00:03:19.766
declared one of 10
one of 5, one has no

00:03:19.791 --> 00:03:23.050
elements, one has 3
elements and all 3 elemens

00:03:23.050 --> 00:03:26.430
are initialized to
number 7, so the same

00:03:26.455 --> 00:03:29.550
as in vectors, no
difference there this is

00:03:29.550 --> 00:03:33.039
basically a print out
for the contents of a

00:03:33.064 --> 00:03:36.330
dq for so it'll printout
three 7 onto the

00:03:36.330 --> 00:03:43.170
screen and this is the preferred method
of referring to the elements of dq same

00:03:43.170 --> 00:03:44.960
as for vectors I've
already explained this

00:03:44.985 --> 00:03:46.750
in vectors, it's
exactly the same here

00:03:46.750 --> 00:03:50.018
no difference pretty
much again the

00:03:50.043 --> 00:03:53.209
check the bool and
emp1 and emp2 bools

00:03:53.209 --> 00:03:57.860
basically just checking whether they are
empty or not one will be empty the

00:03:57.860 --> 00:04:02.959
other one will not be empty the dq3
will be empty the dq2 will not

00:04:02.959 --> 00:04:07.640
because you can see the dq3 is
indeed empty

00:04:07.640 --> 00:04:11.310
we didn't find like a size of the
elements or anything like that we haven't

00:04:11.310 --> 00:04:14.428
initialized any of the
elements either and

00:04:14.453 --> 00:04:17.480
down below, i've printed,
during the demo of

00:04:17.480 --> 00:04:22.340
the pushback method so you have std, endl this is
just

00:04:22.340 --> 00:04:23.861
for formatting purposes
because you're gonna

00:04:23.886 --> 00:04:25.460
have three 7 that are
printed out onto

00:04:25.460 --> 00:04:29.550
the screen from here and then we're
going to print out the size of the dq3

00:04:29.550 --> 00:04:35.680
then we're going to use the
pushback method to add 100 at the last

00:04:35.680 --> 00:04:43.660
position and afterwards we will
request for the size one more time in

00:04:43.860 --> 00:04:51.110
addition we will print out
the last element of the array basically

00:04:51.110 --> 00:04:55.680
which also happens to be
the first because we've added only one

00:04:55.680 --> 00:05:01.111
so let's go ahead and
run this and there

00:05:01.136 --> 00:05:06.139
you go, so basically
here says 777 as we

00:05:06.139 --> 00:05:09.941
have it initialized so
down below it says 0

00:05:09.966 --> 00:05:13.039
think I have one too
many in your lines but that's fine

00:05:14.139 --> 00:05:20.580
this line see here says the dq3
dot size it's a zero the size is 0

00:05:20.580 --> 00:05:23.403
indeed we do the push
back and the integer

00:05:23.428 --> 00:05:26.289
is 100 that is
what we are adding

00:05:26.289 --> 00:05:29.058
into the end of the
line so to say and

00:05:29.083 --> 00:05:31.660
down below we want to
print out the size

00:05:31.660 --> 00:05:37.630
again as you can see from the code and
then we will print out the integer that

00:05:37.630 --> 00:05:41.120
we've added to the end of the line as
well which is also the first of the

00:05:41.120 --> 00:05:45.848
the last element
because the size is

00:05:45.873 --> 00:05:50.284
1 so let's close
this and move on

00:05:53.129 --> 00:05:58.209
sorry but that my throat is
tormenting me today a little bit because

00:05:58.209 --> 00:06:02.550
god knows how many videos I don't
know I just felt like in the mood or

00:06:02.550 --> 00:06:10.479
something. Anyway that's it but we can
also create an initialized

00:06:12.629 --> 00:06:17.814
basically this what you
have here would be

00:06:17.839 --> 00:06:22.999
the same for this
basically the ints if you

00:06:22.999 --> 00:06:26.969
have a type int and if you have
then elements of type int and if you

00:06:26.969 --> 00:06:30.559
haven't initializing yourself there will
be zeros for doubled it will be like

00:06:30.559 --> 00:06:33.365
0.0 , 0.0 etc but if you want to

00:06:33.390 --> 00:06:37.399
initialize them you
can go ahead and do

00:06:37.399 --> 00:06:44.719
that as well so std,
colon colon, dq and

00:06:44.744 --> 00:06:51.699
we're gonna go ahead
and let's say it gonna

00:06:51.699 --> 00:06:57.451
be int I don't know
integer seems the most

00:06:57.476 --> 00:07:04.189
convenient dq this is
gonna be again the

00:07:04.189 --> 00:07:06.419
names are arbitrary
that's just how I've

00:07:06.444 --> 00:07:08.649
chosen to name the
dq's for the sake

00:07:08.649 --> 00:07:16.549
of demonstration 4321 so I don't think there is a need to add

00:07:21.749 --> 00:07:27.269
anymore and now let's not use the for
loop which is a longer version of the

00:07:27.269 --> 00:07:31.729
print out but rather instead let's go
ahead and try to print out

00:07:31.729 --> 00:07:39.639
with the for each loop that is new in
C++ 11 you'll see how

00:07:41.139 --> 00:07:49.070
to code will be simplified just type in
for int I dq 5 there you go

00:07:51.670 --> 00:07:59.580
simple as that, std, cout, I, so they will rotate and they
will be printed out onto the screen

00:08:11.080 --> 00:08:16.640
there you go 54321 simple as that

00:08:16.640 --> 00:08:24.120
so another way of printing it out and a
way of initializing it, not big deal and

00:08:24.120 --> 00:08:28.081
what we have also used
the push front and the

00:08:28.106 --> 00:08:31.900
pop front method so
let's take a look at

00:08:31.900 --> 00:08:36.830
those just two last methods that I
wanted to go over with you

00:08:36.830 --> 00:08:42.000
just to go over with you
and then we're gonna move on to the next

00:08:42.000 --> 00:08:49.950
tutorial so if I type in dq dot pop
back, this will basically

00:08:53.550 --> 00:08:56.775
delete the last element
and after deleting the

00:08:56.800 --> 00:08:59.940
last element that the
outlook of this will

00:08:59.940 --> 00:09:02.786
change so we need to
basically just printed

00:09:02.811 --> 00:09:05.470
out one more time into
the screen because we

00:09:05.470 --> 00:09:11.260
we need to see how it
actually looks like I'm just type in

00:09:11.260 --> 00:09:14.260
std, cout

00:09:20.019 --> 00:09:26.439
yeah maybe there are other ways but
really don't feel that creative tonight

00:09:26.439 --> 00:09:34.389
so there we go

00:09:35.089 --> 00:09:39.742
will compare the two
outputs now we shall

00:09:39.767 --> 00:09:45.374
compared the outputs, what?
oh right dq tere you go

00:09:51.959 --> 00:09:56.118
basically 54321 and
we have removed the

00:09:56.143 --> 00:10:00.549
last element its 5432
as you can see in

00:10:00.549 --> 00:10:03.889
like vectors dq has
push front method as

00:10:03.914 --> 00:10:06.939
well so we can put
something up to the

00:10:06.939 --> 00:10:14.740
front that I mean it's nothing
to bring your head against the wall with

00:10:17.540 --> 00:10:22.600
so it's very very simple just type in
push_front I just have a

00:10:22.600 --> 00:10:24.735
you have a certain
amount of these

00:10:24.760 --> 00:10:26.869
methods and you might
think ohh how will

00:10:26.869 --> 00:10:30.470
I remember all of these things? etc.
believe me you won't have problems

00:10:30.470 --> 00:10:34.259
remembering anything as long as it is
that you know what it is that you want

00:10:34.259 --> 00:10:37.179
to do and what it is that you need to do
it

00:10:37.179 --> 00:10:40.709
the names for these things in the forms
of the function they are embedded into

00:10:40.709 --> 00:10:42.979
IDs so if you just
start typing at the ID

00:10:43.004 --> 00:10:45.249
the integrated
development environment

00:10:45.249 --> 00:10:47.213
will help you out with
suggestions if you

00:10:47.238 --> 00:10:49.009
can't really remember
even the first

00:10:49.009 --> 00:10:52.850
thing about the function you can always
look it up on the net it's fairly easy

00:10:52.850 --> 00:10:55.581
there are a good
amount of forums out

00:10:55.606 --> 00:10:58.429
there we can find a
ton lot of useful

00:10:58.429 --> 00:11:01.429
information so as long as you're
actually using it as long as you're

00:11:01.429 --> 00:11:05.839
actually coding developing some sort of
application or doing something useful

00:11:05.839 --> 00:11:10.037
you will always be
able to pretty much, I

00:11:10.062 --> 00:11:14.139
won't say to say
remember but you will

00:11:14.139 --> 00:11:17.419
always be able to find what you're
looking for and the more could you write

00:11:17.419 --> 00:11:22.470
greater your fluency with it will it
will be so the more you write to the

00:11:22.470 --> 00:11:26.410
faster you will be able to write cause
you'll save a lot of time by not having

00:11:26.410 --> 00:11:30.049
to look for look up the names anyway did
you push up front 100

00:11:30.940 --> 00:11:36.319
can go ahead and create
a print out again

00:11:36.344 --> 00:11:41.190
and we will like another
end line so I went

00:11:41.190 --> 00:11:44.785
to go into the next
line as well let's

00:11:44.810 --> 00:11:48.450
go ahead and run
it ok so it's 54

00:11:48.450 --> 00:11:55.400
321 5432 and
then it pushes 100 to the beginning and its 100 5432

00:11:55.400 --> 00:12:00.840
so put something in the back, put something in

00:12:00.840 --> 00:12:03.809
the front remove
something from the back

00:12:03.834 --> 00:12:06.400
etc, no big deal
you can use all of

00:12:06.400 --> 00:12:11.650
these methods basically to manipulate
the contents of your dq's. Anyway

00:12:11.650 --> 00:12:17.910
I'm gonna go ahead and bid you farewell here
and we will continue to follow tutorial

00:12:17.910 --> 00:12:23.023
we will talk about string,
pay close attention

00:12:23.048 --> 00:12:27.510
to the next tutorial
string is a type

00:12:27.510 --> 00:12:32.300
which you will use quite often and
you should understand it to the maximum

00:12:32.300 --> 00:12:34.865
extent in my opinion.
Anyway now I bid you

00:12:34.890 --> 00:12:37.390
farewell again and hope
to see you in the follow up.