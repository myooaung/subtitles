WEBVTT

00:00:00.000 --> 00:00:03.205
Ok so let's go ahead
and take a look

00:00:03.230 --> 00:00:06.410
at break and continue
we can I am just

00:00:06.410 --> 00:00:08.817
gonna go ahead and
reopened the chapter

00:00:08.842 --> 00:00:11.104
because I have lefted
closed but anyway

00:00:11.880 --> 00:00:13.735
I think it's gonna open
up the same product,

00:00:13.760 --> 00:00:15.490
yeah get there we
go, gonna go ahead

00:00:15.589 --> 00:00:19.890
and be kind enough to delete all of this
I don't think that we shall need to see

00:00:19.890 --> 00:00:23.552
math either so let's
go ahead and delete

00:00:23.577 --> 00:00:27.179
this is as well, anyway
sometimes we want to

00:00:27.279 --> 00:00:32.219
stop the execution of the loop and start
the execution of the code after the loop

00:00:32.219 --> 00:00:39.899
body, well we can achieve that by using break which

00:00:39.899 --> 00:00:41.982
breaks out of the
loop so we'll

00:00:42.007 --> 00:00:43.790
get to continue but
let's first deal

00:00:43.790 --> 00:00:48.620
with break, you can get out of the loop

00:00:48.620 --> 00:00:52.367
prematurely and go
to the next line of

00:00:52.392 --> 00:00:55.930
code outside of the
loop, so go ahead and

00:00:56.030 --> 00:00:59.600
enter some program I don't know, just for

00:00:59.600 --> 00:01:03.855
just for demo purposes
int sum equals

00:01:03.880 --> 00:01:08.110
equals zero and we're
gonna go ahead and

00:01:08.110 --> 00:01:15.920
type int for, int, I equals 1, to 50 plus plus

00:01:26.640 --> 00:01:33.320
int, number I'm sure we have
seen very similar example to this one

00:01:33.320 --> 00:01:41.180
before, std, cout, colon
colon, enter number, -1

00:01:44.105 --> 00:01:51.940
to end or 2 to exit.
it doesn't really

00:01:54.840 --> 00:01:56.507
matter, it doesn't make
a difference at all

00:01:56.532 --> 00:01:58.610
let's provide a way
for user to put it

00:01:58.610 --> 00:02:06.589
on a number, std, colon colon,
number, and then down below

00:02:09.614 --> 00:02:17.459
number. I'll explain in a
millisecond but let me go

00:02:19.959 --> 00:02:25.500
ahead and write some of the code.
Sometimes I explained it as I write it,

00:02:25.500 --> 00:02:27.219
sometimes I just
write what I've just

00:02:27.344 --> 00:02:29.080
explained and sometimes
I just have it

00:02:29.180 --> 00:02:36.918
written and then explained
this is gonna be the

00:02:37.743 --> 00:02:45.443
last line so no worries
on what I do right now,

00:02:48.520 --> 00:02:52.224
sum thank you very much.
Ok so, nothing

00:02:52.249 --> 00:02:55.570
strange here we have
our standard loop

00:02:55.670 --> 00:03:03.550
where you will iterate over 50 numbers
and we will prompt the user to enter

00:03:05.150 --> 00:03:11.760
some sort of a number here or to enter
minus 1, 2 to go out of the

00:03:11.760 --> 00:03:15.491
loop to end the program,
prematurely that

00:03:15.516 --> 00:03:18.970
is. Anyway so it says
if number equals

00:03:18.970 --> 00:03:23.610
two if the number is the same as minus
one and if this condition of evaluates the

00:03:23.610 --> 00:03:26.172
true within the for
loop break statement

00:03:26.197 --> 00:03:28.880
will execute meaning
that anything below

00:03:28.980 --> 00:03:33.180
the break statement will not be taken
into consideration at, all which is

00:03:33.180 --> 00:03:37.440
within the loop, it will go immediately
to the first line of code outside of the

00:03:37.440 --> 00:03:44.410
loop and it will print out the Sum, but
until then it will just go ahead, unless

00:03:44.410 --> 00:03:46.807
unless we type in -1
it will just go ahead

00:03:46.832 --> 00:03:49.100
and keep on prompting
us for like 50

00:03:49.100 --> 00:03:53.943
time is to enter a
number and for, you

00:03:53.968 --> 00:03:58.040
know that number will
be added to itself

00:03:58.140 --> 00:04:02.690
continuously added to itself because
every time we will enter some number and

00:04:02.690 --> 00:04:06.140
that number will be added to the
previous some of the numbers that we

00:04:06.140 --> 00:04:08.679
have added and we will
get the total sum

00:04:08.704 --> 00:04:11.110
of all the numbers
that we have actually

00:04:11.110 --> 00:04:18.430
imputed, if we want to exit before you
reach 50

00:04:18.430 --> 00:04:21.118
before this condition
here becomes false

00:04:21.143 --> 00:04:23.491
we can enter minus
one and be done with

00:04:23.590 --> 00:04:31.507
it so let's go ahead and
build and run control+s

00:04:32.332 --> 00:04:40.240
to save, yes, no
don't do that to me,

00:04:40.540 --> 00:04:43.540
quick save

00:04:45.490 --> 00:04:50.729
whatever yes, I would like to replace it

00:04:50.729 --> 00:04:58.612
thank you. Now. what?
Ok so, once again I am

00:05:01.037 --> 00:05:08.890
not as stupid as I look
and as I sound. You

00:05:11.490 --> 00:05:19.440
build, run, oh this is interesting. Ok let's
go about it this way

00:05:23.000 --> 00:05:26.990
build

00:05:29.740 --> 00:05:32.908
click built, yes, I did,
Ok now that's right.

00:05:32.933 --> 00:05:36.139
how are you do? why
are you doing this?

00:05:36.139 --> 00:05:38.858
Ok must say I need
to figure this one

00:05:38.883 --> 00:05:41.240
out let's figure
out what on earth

00:05:41.340 --> 00:05:44.611
is going on. No I don't
need both points

00:05:44.636 --> 00:05:47.669
there. I'm just
gonna go ahead and

00:05:47.669 --> 00:05:54.934
control+c this, file,
new, project, now

00:05:54.959 --> 00:06:01.909
actually I just go
ahead and close this,

00:06:01.909 --> 00:06:09.870
delete this, in fact I'm gonna go
ahead and delete everything in this

00:06:11.370 --> 00:06:18.139
chapter excellent. So now, I'm gonna open up the same project

00:06:18.139 --> 00:06:20.240
it just won't have anything in it

00:06:20.240 --> 00:06:25.802
open existing project,
oh actually I deleted

00:06:25.827 --> 00:06:31.050
it sorry. We're just
gonna go ahead and say

00:06:31.050 --> 00:06:39.010
new projects and yes, it's gonna be
console application on C++ and we shall

00:06:43.110 --> 00:06:51.101
place it in desktop, so,
chapter four, loops. Ok

00:06:53.126 --> 00:07:00.959
so this will be like I
should name it fix, next

00:07:02.259 --> 00:07:04.040
finish

00:07:04.040 --> 00:07:11.860
Oh my god it works! Only to
figure this out this is I'm doing

00:07:15.160 --> 00:07:17.396
something incredibly
stupid on my own,

00:07:17.421 --> 00:07:19.530
It just is not
occurring to me at

00:07:19.530 --> 00:07:21.430
the moment. I'm sorry for that,

00:07:21.430 --> 00:07:25.256
So let's go ahead and
type in number 10

00:07:25.281 --> 00:07:29.300
in number 10 thats 20
and 11 thats 31 and

00:07:29.400 --> 00:07:31.712
9 that's 40, that
should be better

00:07:31.737 --> 00:07:33.970
to display into the
screen, so minus

00:07:33.970 --> 00:07:36.985
once dominated, yeah,
there you go, 40 now I

00:07:37.010 --> 00:07:39.940
really don't feel like
typing in all the fifty

00:07:39.940 --> 00:07:47.620
numbers if you want feel free to do so
but I am not going to because it's 50

00:07:48.020 --> 00:07:50.595
numbers and I really
don't feel like

00:07:50.620 --> 00:07:53.590
typing in 15 numbers
anyway if you type

00:07:53.590 --> 00:08:00.810
in -1, this condition will
evaluate to true and you shall have a

00:08:02.310 --> 00:08:05.089
execution of the break
and then it will

00:08:05.114 --> 00:08:08.140
go in immediately and
print out this out.

00:08:08.140 --> 00:08:10.705
so once again in
summary, what is it

00:08:10.730 --> 00:08:13.270
that we do? we use
a break when we

00:08:13.270 --> 00:08:18.900
want to stop the execution of the loop
and now we will jump into continue, so

00:08:18.900 --> 00:08:23.530
to continue is when we want to
skip one loop iteration or something

00:08:23.530 --> 00:08:26.430
like that but I will go ahead

00:08:26.430 --> 00:08:28.817
actually I'm gonna go
ahead and explain it

00:08:28.842 --> 00:08:31.320
now or no, in the
next tutorial I don't

00:08:31.420 --> 00:08:34.790
want to make this longer that I need to.
Anyway

00:08:34.790 --> 00:08:39.690
break is used to break out of the loop
I don't know for whatever reason if

00:08:39.690 --> 00:08:43.840
certain condition is met or if you want
to prematurely terminate the loop or

00:08:43.840 --> 00:08:48.960
something like that in general what will
happen here is one more time

00:08:48.960 --> 00:08:51.232
briefly execute
everything below the

00:08:51.257 --> 00:08:53.450
break within the loop
until the closing

00:08:53.450 --> 00:08:59.200
bracket will get a minute it will be
executed and it will decode program the

00:08:59.200 --> 00:09:04.320
machine will go to the next line of code
below the for loop so far below

00:09:04.320 --> 00:09:06.495
the loop in general, It
doesn't need to be a for

00:09:06.520 --> 00:09:08.370
loop, it can be a while
loop it can be for each

00:09:08.370 --> 00:09:10.336
loop it can be whatever
here you will be

00:09:10.361 --> 00:09:12.070
able to use the break
statement in order

00:09:12.170 --> 00:09:15.750
to break out of the loop. that's why it's
called break

00:09:15.750 --> 00:09:18.066
and it will do whatever
it is down below

00:09:18.091 --> 00:09:20.230
it won't just execute
one line it will

00:09:20.330 --> 00:09:21.862
execute all the lines that are

00:09:21.887 --> 00:09:23.494
below unless stated otherwise.

00:09:24.350 --> 00:09:26.624
Anyway I bet you
farewell here and in the

00:09:26.649 --> 00:09:28.834
follow tutorial we
will go into continue.