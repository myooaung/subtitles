WEBVTT
1
00:00:01.140 --> 00:00:03.120
[Autogenerated] alright back in visual studio code.

2
00:00:03.120 --> 00:00:07.090
And remember the files that we committed to the repository came from this

3
00:00:07.090 --> 00:00:10.520
seven dash code cache commit cache File's directory.

4
00:00:10.520 --> 00:00:14.540
So let's expand that out and see what's going on in here.

5
00:00:14.540 --> 00:00:18.410
It's probably most instructive to look at what's in build spec 0.0,

6
00:00:18.410 --> 00:00:23.200
1st, the build spec syntax is pretty well documented by A W S,

7
00:00:23.200 --> 00:00:26.140
and some of it is fairly intuitive.

8
00:00:26.140 --> 00:00:28.920
The things that I want to call out here is we're setting environment

9
00:00:28.920 --> 00:00:32.430
variables within our builds back for terra form to let it know it's in

10
00:00:32.430 --> 00:00:36.740
an automation environment that t f underscore input that tells terra

11
00:00:36.740 --> 00:00:39.410
form Don't prompt me for information.

12
00:00:39.410 --> 00:00:41.680
If you run a command and it needs more info,

13
00:00:41.680 --> 00:00:44.220
just fail the command because it's running an automation,

14
00:00:44.220 --> 00:00:47.640
there's no one there to enter the information.

15
00:00:47.640 --> 00:00:50.650
Setting it to t F in automation also does some other things

16
00:00:50.650 --> 00:00:52.460
in the back end that just lets terra form.

17
00:00:52.460 --> 00:00:56.640
No, you're in an automation environment, so make some assumptions there.

18
00:00:56.640 --> 00:01:00.740
Under phases, we have two phases of our build process.

19
00:01:00.740 --> 00:01:03.470
The first phase is to install terra form.

20
00:01:03.470 --> 00:01:08.230
Now every installation requires a runtime version of some kind.

21
00:01:08.230 --> 00:01:10.850
And even though we're not using Node.js,

22
00:01:10.850 --> 00:01:13.580
we have to install something and Node.js installs really fast.

23
00:01:13.580 --> 00:01:15.540
So I went with Node.js.

24
00:01:15.540 --> 00:01:18.040
These important stuff is under commands.

25
00:01:18.040 --> 00:01:23.350
The first thing we do is going to usr slash been and copy the version of

26
00:01:23.350 --> 00:01:28.100
Terra Form that we want from the releases site for Hashish Corp If we

27
00:01:28.100 --> 00:01:32.640
scroll over and look at this full curl command,

28
00:01:32.640 --> 00:01:35.420
we can, see that we are using the environment.

29
00:01:35.420 --> 00:01:39.690
Variable t f underscore versioning underscore Install to determine what

30
00:01:39.690 --> 00:01:44.320
version of terra form is downloaded from the hash corpse site and that

31
00:01:44.320 --> 00:01:46.900
value is submitted through the build process.

32
00:01:46.900 --> 00:01:48.740
We saw that a moment ago.

33
00:01:48.740 --> 00:01:52.040
Let's scroll back, and the next thing we do is unzip terra form.

34
00:01:52.040 --> 00:01:53.960
And once ______ forms on gzip.

35
00:01:53.960 --> 00:01:56.140
Now we're ready to use ______ form.

36
00:01:56.140 --> 00:01:59.570
Next, we're going to go into the CodeBuild Source directory,

37
00:01:59.570 --> 00:02:01.750
and that's an environment variable that's populated

38
00:02:01.750 --> 00:02:04.640
by a W S that's always available.

39
00:02:04.640 --> 00:02:10.940
And we're gonna modify any scripts that end in dot as h two b executable.

40
00:02:10.940 --> 00:02:13.560
And then we're going to copy Terra form.

41
00:02:13.560 --> 00:02:16.130
Underscore actions dot as H to the U.

42
00:02:16.130 --> 00:02:16.320
S.

43
00:02:16.320 --> 00:02:20.510
Are BIN directory Now we're ready to run our actual

44
00:02:20.510 --> 00:02:24.540
initialization and our plan or are apply.

45
00:02:24.540 --> 00:02:27.340
So let's scroll down to the build phase.

46
00:02:27.340 --> 00:02:30.940
In the build phase, we go back to our source directory.

47
00:02:30.940 --> 00:02:32.400
We run terra form version.

48
00:02:32.400 --> 00:02:33.800
So that's in the build logs.

49
00:02:33.800 --> 00:02:34.040
We can.

50
00:02:34.040 --> 00:02:38.230
See what version was actually being used and then we'll run terra form in it.

51
00:02:38.230 --> 00:02:41.350
And this should seem pretty familiar because we just went over how you

52
00:02:41.350 --> 00:02:45.240
could do a back end config with terra form in it.

53
00:02:45.240 --> 00:02:49.700
We're specifying the bucket that we want to use from our environment variables.

54
00:02:49.700 --> 00:02:52.820
We scroll over some more were specifying the region that we want

55
00:02:52.820 --> 00:02:55.510
to use ________ over a little bit more were specifying the

56
00:02:55.510 --> 00:02:58.170
dynamo db table that we want to use.

57
00:02:58.170 --> 00:03:01.860
It would probably a good idea now to look at what's in RBAC end

58
00:03:01.860 --> 00:03:04.840
config for this terra form configuration.

59
00:03:04.840 --> 00:03:09.090
Let's go ahead and open that and we put in a partial configuration here.

60
00:03:09.090 --> 00:03:12.840
All we have is that the back end is S3 and that the key we want

61
00:03:12.840 --> 00:03:17.040
to use is going to be networking slash terra form .NET TF state

62
00:03:17.040 --> 00:03:18.480
because we're using workspaces.

63
00:03:18.480 --> 00:03:22.230
The workspace name is going to be appended to that key,

64
00:03:22.230 --> 00:03:27.340
so we don't have to worry about conflicting state files in our S3 bucket.

65
00:03:27.340 --> 00:03:28.520
That's what's in the back end.

66
00:03:28.520 --> 00:03:32.110
So everything else we need for that S3 back end is specified

67
00:03:32.110 --> 00:03:34.590
in line as part of the Terra form in it,

68
00:03:34.590 --> 00:03:37.940
Command, let's go back to builds back here.

69
00:03:37.940 --> 00:03:42.240
And the next thing we're gonna do is echo out what action were planning to do.

70
00:03:42.240 --> 00:03:43.290
So from that environment,

71
00:03:43.290 --> 00:03:48.720
variable were probably either planning to do a plan and apply or a destroy.

72
00:03:48.720 --> 00:03:50.410
And that's a way to clean up this environment.

73
00:03:50.410 --> 00:03:56.040
When you're done, there is an option to specify destroy instead of plan or apply.

74
00:03:56.040 --> 00:03:57.720
And then we're gonna run the script.

75
00:03:57.720 --> 00:03:59.350
Terra form actions .NET.

76
00:03:59.350 --> 00:03:59.970
S H.

77
00:03:59.970 --> 00:04:03.640
Let's go ahead and open that up and see what's going on in here.

78
00:04:03.640 --> 00:04:05.060
So this is a bash script,

79
00:04:05.060 --> 00:04:07.870
and the idea here is to either create a workspace

80
00:04:07.870 --> 00:04:10.110
or select an existing workspace.

81
00:04:10.110 --> 00:04:13.380
The first thing the script does is either create a new terra

82
00:04:13.380 --> 00:04:15.700
form workspace or select an existing one.

83
00:04:15.700 --> 00:04:18.820
So it's gonna look at what's in the remote state data,

84
00:04:18.820 --> 00:04:21.950
and if it finds an existing workspace, it'll just use that.

85
00:04:21.950 --> 00:04:25.040
If it doesn't find that workspace, that's going to create it.

86
00:04:25.040 --> 00:04:28.320
So we're running an if statement here where it lists out all the

87
00:04:28.320 --> 00:04:32.040
work spaces and then looks for the workspace name we've submitted

88
00:04:32.040 --> 00:04:34.040
through our environment Variable.

89
00:04:34.040 --> 00:04:36.580
If it doesn't find it in the list of workspaces,

90
00:04:36.580 --> 00:04:41.440
then it will run terra form workspace new and create that new workspace.

91
00:04:41.440 --> 00:04:45.430
If it does find it in the list, then it will run terra form workspace.

92
00:04:45.430 --> 00:04:47.840
Select and select that workspace.

93
00:04:47.840 --> 00:04:49.890
Now that we have our workspace selected,

94
00:04:49.890 --> 00:04:52.910
it checks to see which action we want to perform.

95
00:04:52.910 --> 00:04:58.440
So let's scroll down a little bit and we see that if the action is plan,

96
00:04:58.440 --> 00:05:01.310
then the first thing we need to do is make a directory where we're going

97
00:05:01.310 --> 00:05:05.840
to store our plan so we'll make the directory plans.

98
00:05:05.840 --> 00:05:09.740
Then we'll check again to see if the TF action is plan

99
00:05:09.740 --> 00:05:11.640
and we'll run our terra form plan.

100
00:05:11.640 --> 00:05:16.600
So we're gonna run terra form plan dash out DPC dot t f plan and we're

101
00:05:16.600 --> 00:05:20.460
gonna pipe the output to t f underscore output dot txt.

102
00:05:20.460 --> 00:05:24.170
So we have a record of the output from that plan We may want to

103
00:05:24.170 --> 00:05:27.340
use that to check the plan before we approve it.

104
00:05:27.340 --> 00:05:32.240
And then finally, we're going to copy that TF plan to our S3 state bucket,

105
00:05:32.240 --> 00:05:36.240
and that gives us the opportunity to retrieve that plan file when we

106
00:05:36.240 --> 00:05:39.820
run the apply process because this is in a container.

107
00:05:39.820 --> 00:05:40.920
This is ephemeral.

108
00:05:40.920 --> 00:05:45.460
Once this plan is done, that container is destroyed along with our plan file.

109
00:05:45.460 --> 00:05:48.500
If we don't save it out somewhere, if instead,

110
00:05:48.500 --> 00:05:51.540
the TF action is equal to apply,

111
00:05:51.540 --> 00:05:57.300
we are going to retrieve the plan file from the S3 bucket and then simply

112
00:05:57.300 --> 00:06:02.430
run terra form apply against that plan and pipe that to t f underscore

113
00:06:02.430 --> 00:06:05.130
output so that we have a record of what happened.

114
00:06:05.130 --> 00:06:07.940
And we can look at it if we need to.

115
00:06:07.940 --> 00:06:11.340
Finally, I do have the action destroy.

116
00:06:11.340 --> 00:06:14.480
If you need to clean up from this build process and

117
00:06:14.480 --> 00:06:18.900
you want to remove the environment, you can specify the action as destroy,

118
00:06:18.900 --> 00:06:21.910
and it will run terra form destroy with auto approved and

119
00:06:21.910 --> 00:06:23.720
pipe that to t f underscore output.

120
00:06:23.720 --> 00:06:26.200
So because auto approved is in there,

121
00:06:26.200 --> 00:06:29.070
it's not gonna prompt anyone for whether or not you

122
00:06:29.070 --> 00:06:31.310
want to destroy this environment, it's just going to do it.

123
00:06:31.310 --> 00:06:35.440
So obviously use this portion with some care.

124
00:06:35.440 --> 00:06:38.430
So that's everything that's in the terra form action script

125
00:06:38.430 --> 00:06:40.840
that gets kicked off by the build spec.

126
00:06:40.840 --> 00:06:45.180
If you go back to build spec, the last thing it does is generate an artifact.

127
00:06:45.180 --> 00:06:48.890
So it takes that t f underscore output dot txt file,

128
00:06:48.890 --> 00:06:52.680
and it writes it to our build log S3 buckets so that we

129
00:06:52.680 --> 00:06:54.430
could review it later if we want it.

130
00:06:54.430 --> 00:06:59.510
So finally, we have the terra form main dot T f file.

131
00:06:59.510 --> 00:07:03.740
This is a very simple configuration were creating a VPC

132
00:07:03.740 --> 00:07:06.370
and we're specifying to public sub nets.

133
00:07:06.370 --> 00:07:07.660
If we scroll down to providers,

134
00:07:07.660 --> 00:07:11.210
you'll note that there's no authentication information specified,

135
00:07:11.210 --> 00:07:13.600
and that's because the container is going to assume a

136
00:07:13.600 --> 00:07:15.760
role that has permissions to create.

137
00:07:15.760 --> 00:07:19.790
A VPC and terra form will see that that role has been assumed

138
00:07:19.790 --> 00:07:23.040
and use those credentials for authentication.

139
00:07:23.040 --> 00:07:26.910
Data sources were grabbing our availability zones and then in resources.

140
00:07:26.910 --> 00:07:28.790
We are creating a V P.

141
00:07:28.790 --> 00:07:32.710
C and the VPC will have the name that corresponds to the

142
00:07:32.710 --> 00:07:38.290
workspace were currently in dash VPC and in the tags will set the

143
00:07:38.290 --> 00:07:41.540
environment equal to the workspace value.

144
00:07:41.540 --> 00:07:44.150
And then we will output the VPC IDE.

145
00:07:44.150 --> 00:07:46.640
So that's the entire configuration.

146
00:07:46.640 --> 00:07:48.340
In a nutshell.

147
00:07:48.340 --> 00:07:55.000
Why don't we now look at what's going on with our code pipeline, because that's the last piece of this puzzle.

