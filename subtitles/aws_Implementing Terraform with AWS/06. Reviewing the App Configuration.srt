1
00:00:01,040 --> 00:00:01,340
[Autogenerated] Alright,

2
00:00:01,340 --> 00:00:04,990
so I've opened up main dot t f and we've got some variables in here.

3
00:00:04,990 --> 00:00:08,360
The first thing is the region were using us East one,

4
00:00:08,360 --> 00:00:10,210
which is where the dead VPC is.

5
00:00:10,210 --> 00:00:13,710
And then we are referencing the network state bucket,

6
00:00:13,710 --> 00:00:17,640
the network state key and the network state region.

7
00:00:17,640 --> 00:00:20,760
The only one that doesn't have a default value is the network state bucket,

8
00:00:20,760 --> 00:00:23,540
because that's going to depend on your deployment.

9
00:00:23,540 --> 00:00:26,870
But the network state key and region were coded

10
00:00:26,870 --> 00:00:29,710
into how we deployed the Dev Vpc.

11
00:00:29,710 --> 00:00:31,600
Now, if you changed those settings,

12
00:00:31,600 --> 00:00:34,430
then you could just submit different values for the variable.

13
00:00:34,430 --> 00:00:36,990
But if we look in terra form dot t f bars,

14
00:00:36,990 --> 00:00:41,080
I have set the network state bucket to the name of the bucket that

15
00:00:41,080 --> 00:00:44,670
we created for the remote state of our Dev Vpc.

16
00:00:44,670 --> 00:00:45,740
It's Globo!

17
00:00:45,740 --> 00:00:48,440
12251 Excellent.

18
00:00:48,440 --> 00:00:52,030
Now let's go ahead and close that terra form dot t f vars scrolling

19
00:00:52,030 --> 00:00:55,450
down we get into our providers and the only thing to point out here

20
00:00:55,450 --> 00:00:57,650
is that the profile is equal to app.

21
00:00:57,650 --> 00:00:58,420
So once again,

22
00:00:58,420 --> 00:01:03,440
we're using Joshua McGee's credentials to deploy all of this infrastructure.

23
00:01:03,440 --> 00:01:06,890
Now we get into data sources and in data sources.

24
00:01:06,890 --> 00:01:12,140
The first thing is this terra form remote state for the networking information.

25
00:01:12,140 --> 00:01:15,420
This is exactly like the example that we saw in the presentation,

26
00:01:15,420 --> 00:01:17,420
So I'm not going to go into too much detail.

27
00:01:17,420 --> 00:01:20,510
You might wonder how Joshua Magee has permissions to read

28
00:01:20,510 --> 00:01:22,070
information out of the network state.

29
00:01:22,070 --> 00:01:27,740
And if you'll remember back to when we deployed the S3 bucket for remote state,

30
00:01:27,740 --> 00:01:31,760
we created a read only users group and added Joshua Magee to that.

31
00:01:31,760 --> 00:01:35,640
So he has read only access to the contents of that bucket.

32
00:01:35,640 --> 00:01:37,270
Scrolling down a little bit more.

33
00:01:37,270 --> 00:01:40,300
We get into the data source for R A W s,

34
00:01:40,300 --> 00:01:43,160
am I So since we're deploying ec2 instances,

35
00:01:43,160 --> 00:01:45,050
we needed, am I to do that?

36
00:01:45,050 --> 00:01:48,720
We could hard code the AM IDE, but that doesn't work very well,

37
00:01:48,720 --> 00:01:50,460
especially if you move to a different region.

38
00:01:50,460 --> 00:01:52,300
The am I IDE is totally different.

39
00:01:52,300 --> 00:01:54,940
So instead we're using this data source.

40
00:01:54,940 --> 00:01:57,650
We're setting the argument most recent equal to truth,

41
00:01:57,650 --> 00:02:01,940
so it's going to give us the most recent version of the Am I that's available.

42
00:02:01,940 --> 00:02:06,620
We're setting the owners number to the Amazon owners IDE.

43
00:02:06,620 --> 00:02:10,810
So that's a unique IDE that corresponds to images managed by Amazon.

44
00:02:10,810 --> 00:02:12,110
Then we have two filters.

45
00:02:12,110 --> 00:02:16,640
If you've ever used the AWS CLI to filter am I images,

46
00:02:16,640 --> 00:02:18,360
this will seem very familiar.

47
00:02:18,360 --> 00:02:19,500
The first one is the name,

48
00:02:19,500 --> 00:02:22,600
and we know that the name for the Amazon Linux type that

49
00:02:22,600 --> 00:02:26,930
we want has the value am zn am I H p m.

50
00:02:26,930 --> 00:02:28,630
And then and then some strength.

51
00:02:28,630 --> 00:02:33,610
We have the star in there, and then it ends in that x 86 64 dash GP two.

52
00:02:33,610 --> 00:02:37,240
So that should retrieve a single image ID.

53
00:02:37,240 --> 00:02:40,580
We're also adding a filter where the owner alias is Amazon.

54
00:02:40,580 --> 00:02:44,100
It should already only the Amazon because we're specifying owners but

55
00:02:44,100 --> 00:02:48,050
no harm in specifying it twice so that will give us our am I that

56
00:02:48,050 --> 00:02:51,040
we're going to use for the two instances.

57
00:02:51,040 --> 00:02:53,340
Now let's scroll down into resources.

58
00:02:53,340 --> 00:02:56,050
We're building a random into jury that could be used wherever we

59
00:02:56,050 --> 00:02:59,800
need a globally unique ID and then for RDS.

60
00:02:59,800 --> 00:03:01,940
We need to create a security group.

61
00:03:01,940 --> 00:03:05,900
So we're going to create an RDS security group And where

62
00:03:05,900 --> 00:03:07,970
is that security group going to live?

63
00:03:07,970 --> 00:03:11,870
Because security groups need to be associated with the VPC.

64
00:03:11,870 --> 00:03:15,970
We want to associate this with networking VPC and here's where we

65
00:03:15,970 --> 00:03:19,340
use our terra form remote state data source.

66
00:03:19,340 --> 00:03:22,880
You'll note the PATH is data dot terra form remote ST

67
00:03:22,880 --> 00:03:26,540
dot network dot outputs dot vpc.

68
00:03:26,540 --> 00:03:30,920
The outputs refers to any outputs that we created with the

69
00:03:30,920 --> 00:03:34,940
configuration that's being stored by this remote state.

70
00:03:34,940 --> 00:03:39,390
The important thing to understand is that the only attributes

71
00:03:39,390 --> 00:03:42,330
that are available when you reference remote state are those

72
00:03:42,330 --> 00:03:48,840
that were exposed via and output, and in this case we're referencing vpc IDE.

73
00:03:48,840 --> 00:03:49,310
But first,

74
00:03:49,310 --> 00:03:54,840
let me expand the Dev VPC configuration and we'll look at main real quick.

75
00:03:54,840 --> 00:03:58,410
Here's the outputs that we defined for the Dev VPC.

76
00:03:58,410 --> 00:04:01,540
We defined three outputs vpc, IDE,

77
00:04:01,540 --> 00:04:05,390
the D B Sub Net group and public sub nets when we

78
00:04:05,390 --> 00:04:07,920
reference the remote state as a data source,

79
00:04:07,920 --> 00:04:11,240
these are the only outputs available to us if we want to

80
00:04:11,240 --> 00:04:14,370
references other attributes Within this configuration,

81
00:04:14,370 --> 00:04:17,470
those also need to be exposed as outputs,

82
00:04:17,470 --> 00:04:22,140
so that's very important to understand getting back to our configuration.

83
00:04:22,140 --> 00:04:25,240
Once we create that RDS security group will create a

84
00:04:25,240 --> 00:04:29,590
security group rule that allows 3306 and then an egress

85
00:04:29,590 --> 00:04:31,940
rule that allows all traffic out.

86
00:04:31,940 --> 00:04:33,250
That all seems fine.

87
00:04:33,250 --> 00:04:38,040
Let's scroll down a little bit more in order to deploy our my SQL environment.

88
00:04:38,040 --> 00:04:42,040
We're going to use the RDS module that's available on the Terra form registry.

89
00:04:42,040 --> 00:04:43,190
I mean, why not?

90
00:04:43,190 --> 00:04:45,440
I don't want to code all this myself.

91
00:04:45,440 --> 00:04:48,970
The main thing to call out here is under instantiate class.

92
00:04:48,970 --> 00:04:51,990
We're sending it to D B t too large.

93
00:04:51,990 --> 00:04:55,500
So this is gonna be a T two large instantiate ploy ID in your vpc.

94
00:04:55,500 --> 00:04:58,510
Obviously, that costs some money, so I just want to call that out.

95
00:04:58,510 --> 00:05:01,420
It's probably a good idea to clean up after yourself when you're

96
00:05:01,420 --> 00:05:05,010
done deploying this so it doesn't keep charging you money for

97
00:05:05,010 --> 00:05:07,540
having this rds instance running.

98
00:05:07,540 --> 00:05:11,980
Now let's scroll down a little bit more and we see under DB Sub Net Group,

99
00:05:11,980 --> 00:05:16,390
we are again referencing our terra form remote state data source

100
00:05:16,390 --> 00:05:20,840
and we're pulling the output db sub net group.

101
00:05:20,840 --> 00:05:23,940
That's pretty much everything for our my SQL deployment.

102
00:05:23,940 --> 00:05:27,620
So we can scroll past all of that and get into our launch

103
00:05:27,620 --> 00:05:32,410
configuration and auto scale group for R E C two instances to the

104
00:05:32,410 --> 00:05:34,530
all scale group needs a security group.

105
00:05:34,530 --> 00:05:39,040
So we're going to create a security group and put it in that same VPC.

106
00:05:39,040 --> 00:05:42,090
And then we're gonna add some rules to that security group.

107
00:05:42,090 --> 00:05:45,490
We're gonna add one that allows Port 80 and then we're gonna add

108
00:05:45,490 --> 00:05:48,240
an egress rule that allows all traffic out.

109
00:05:48,240 --> 00:05:52,240
So now we have our security groups for our auto scale group.

110
00:05:52,240 --> 00:05:55,830
The next thing we need to do is create a launch configuration and a target

111
00:05:55,830 --> 00:06:00,030
group for our Web servers in the launch configuration.

112
00:06:00,030 --> 00:06:04,690
That's where you set the AM I IDE that you want to use So under image IDE

113
00:06:04,690 --> 00:06:09,850
were referencing our data source data dot a w s a m i dot amazon Linux dot

114
00:06:09,850 --> 00:06:13,160
i dy perfect The instance type is t to micro.

115
00:06:13,160 --> 00:06:14,630
So I tried to keep this pretty small.

116
00:06:14,630 --> 00:06:17,290
The micro could be in the free tier, but again,

117
00:06:17,290 --> 00:06:19,430
probably a good idea to clean up after yourself when

118
00:06:19,430 --> 00:06:21,640
you're done and then under user data,

119
00:06:21,640 --> 00:06:26,110
we are specifying some user data by using the file function to pull

120
00:06:26,110 --> 00:06:30,670
in information from these user data dot txt file That's in the same

121
00:06:30,670 --> 00:06:35,270
directory Let's take a look at what's in there real quick in the

122
00:06:35,270 --> 00:06:37,100
user data down to the bottom.

123
00:06:37,100 --> 00:06:39,540
After all the comments, all we're doing is running.

124
00:06:39,540 --> 00:06:43,120
Yum update installing engine NICs starting the engine X

125
00:06:43,120 --> 00:06:45,560
service and then setting it to auto start.

126
00:06:45,560 --> 00:06:49,400
So we're gonna get the default engine X page when we visit this website,

127
00:06:49,400 --> 00:06:50,060
and that's fine.

128
00:06:50,060 --> 00:06:52,740
This is purely for demonstration purposes.

129
00:06:52,740 --> 00:06:57,670
You can put whatever configuration you need in here to load a config for this.

130
00:06:57,670 --> 00:06:59,300
Easy to instantiate.

131
00:06:59,300 --> 00:07:01,940
I'll go ahead and close out user data.

132
00:07:01,940 --> 00:07:05,320
The next thing we need to do is create a target group that will associate

133
00:07:05,320 --> 00:07:09,170
with the load balancer and that is our Web servers.

134
00:07:09,170 --> 00:07:10,950
And we're referencing port 80.

135
00:07:10,950 --> 00:07:14,740
So that's where traffic should come in to hit our target group

136
00:07:14,740 --> 00:07:19,160
using the HTTP protocol and what vpc IDE should this target

137
00:07:19,160 --> 00:07:22,970
group be associated with why the same dead VPC we've been using

138
00:07:22,970 --> 00:07:25,140
for all our other resources?

139
00:07:25,140 --> 00:07:27,630
Now we get into the auto scale group for the Web.

140
00:07:27,630 --> 00:07:31,420
Servers for the auto scale group were setting the max

141
00:07:31,420 --> 00:07:34,390
size 24 and the desired capacity to two,

142
00:07:34,390 --> 00:07:38,040
so it should spend up to instances by default.

143
00:07:38,040 --> 00:07:40,200
If we look under vpc zone,

144
00:07:40,200 --> 00:07:44,170
identify are This is where we tell it what sub nets should it spin up?

145
00:07:44,170 --> 00:07:47,150
The instances in and we want it in the public sub nets.

146
00:07:47,150 --> 00:07:51,340
So we're using the public sub nets output from our Dev VPC

147
00:07:51,340 --> 00:07:54,060
configuration Scrolling down a little bit more.

148
00:07:54,060 --> 00:07:57,640
We get into the application load balancer side of things,

149
00:07:57,640 --> 00:07:58,830
the application load bouncer.

150
00:07:58,830 --> 00:08:00,860
We also need to set up a security group.

151
00:08:00,860 --> 00:08:03,140
So we create the security group.

152
00:08:03,140 --> 00:08:07,770
We have an ingress rule that allows port 80 in and we have an egress rule

153
00:08:07,770 --> 00:08:10,620
that allows all traffic out and then scrolling down.

154
00:08:10,620 --> 00:08:13,640
We get into the actual load balancer itself.

155
00:08:13,640 --> 00:08:17,660
In our case, we are deploying an application load balancer.

156
00:08:17,660 --> 00:08:22,240
So if you look under load balancer type, we have it set to application.

157
00:08:22,240 --> 00:08:26,400
We refer to the security group that we just created, and then for sub nets.

158
00:08:26,400 --> 00:08:28,710
What sub nets are covered by this load bouncer.

159
00:08:28,710 --> 00:08:29,090
Well,

160
00:08:29,090 --> 00:08:31,840
it's the same public sub nets that we referenced for our

161
00:08:31,840 --> 00:08:34,560
auto scale group because those are the easy to instances

162
00:08:34,560 --> 00:08:36,640
that we want to connect to.

163
00:08:36,640 --> 00:08:40,180
It's going down a little bit more once we have our load balancer created.

164
00:08:40,180 --> 00:08:41,140
We need a listener.

165
00:08:41,140 --> 00:08:44,160
Needs to know to listen for requests on the front end.

166
00:08:44,160 --> 00:08:47,730
We want to listen on Port 80 for http protocol.

167
00:08:47,730 --> 00:08:53,020
And when we get a request on that port 80 we want afford that request to

168
00:08:53,020 --> 00:08:56,640
the target group of web servers that we have created.

169
00:08:56,640 --> 00:09:02,000
So that's everything in the configuration. Let's go ahead and get it deployed.

