1
00:00:01,540 --> 00:00:04,450
[Autogenerated] there's a principle in software development that is

2
00:00:04,450 --> 00:00:09,040
continuous integration and continuous deployment.

3
00:00:09,040 --> 00:00:12,780
Again, there are multiple platforms that support this C I.

4
00:00:12,780 --> 00:00:13,170
C D.

5
00:00:13,170 --> 00:00:14,970
Pipeline idea.

6
00:00:14,970 --> 00:00:21,150
Some of the most commonly known ones are Jenkins, AWS, code Pipeline and Bamboo.

7
00:00:21,150 --> 00:00:26,420
You've probably heard of at least one of those continuous integration.

8
00:00:26,420 --> 00:00:32,010
The C I component of this is usually performed when code is checked in,

9
00:00:32,010 --> 00:00:36,470
and it's basically a process by which the code is checked against a series

10
00:00:36,470 --> 00:00:39,600
of tests to make sure that it's good and ready to go.

11
00:00:39,600 --> 00:00:44,540
And it could also be integrated into the existing code base.

12
00:00:44,540 --> 00:00:49,330
Continuous delivery is the process of building and executable or something

13
00:00:49,330 --> 00:00:53,000
similar a package based off of the code that was checked in.

14
00:00:53,000 --> 00:00:55,700
Now that obviously doesn't map directly to terra form.

15
00:00:55,700 --> 00:01:01,140
But we'll see how well use the continuous delivery side of things in a moment.

16
00:01:01,140 --> 00:01:05,220
As part of the continuous integration and delivery process,

17
00:01:05,220 --> 00:01:08,840
there is going to be a significant amount of automated testing and

18
00:01:08,840 --> 00:01:13,350
validation of the code and the builds that come out of that code to make

19
00:01:13,350 --> 00:01:16,940
sure that they're valid and working as expected.

20
00:01:16,940 --> 00:01:22,740
CLI see the pipelines also tend to deploy to multiple environments in stages.

21
00:01:22,740 --> 00:01:27,190
What you'll see is that the initial deployment might be against a Q environment,

22
00:01:27,190 --> 00:01:28,680
and then it has to be validated.

23
00:01:28,680 --> 00:01:31,370
And then once it moves past that stage,

24
00:01:31,370 --> 00:01:36,160
it could be deployed to a user acceptance testing environment and tested

25
00:01:36,160 --> 00:01:39,740
there and then moved to staging and then moved to production.

26
00:01:39,740 --> 00:01:43,660
So the pipeline is a series of stages,

27
00:01:43,660 --> 00:01:46,700
some of which are deployments to different environments and some

28
00:01:46,700 --> 00:01:50,040
of which are automated testing and validation.

29
00:01:50,040 --> 00:01:54,860
Now, how does Terra form DLL with these software development concepts,

30
00:01:54,860 --> 00:01:58,140
and especially the concept of multiple environments?

31
00:01:58,140 --> 00:02:01,340
It does that through workspaces.

32
00:02:01,340 --> 00:02:05,910
Terra form workspaces are a feature in terra form meant

33
00:02:05,910 --> 00:02:08,840
to support multiple environments.

34
00:02:08,840 --> 00:02:11,850
It all starts with a common configuration.

35
00:02:11,850 --> 00:02:15,100
So all of the different environments are workspaces in terra

36
00:02:15,100 --> 00:02:18,300
form are using the same configuration.

37
00:02:18,300 --> 00:02:23,440
The key difference here is that the state data for each workspace is separate.

38
00:02:23,440 --> 00:02:28,240
So if you created multiple workspaces and looked at the state storage,

39
00:02:28,240 --> 00:02:32,040
you would see a different state file for each workspace.

40
00:02:32,040 --> 00:02:35,030
That allows terra form to use the same configuration for

41
00:02:35,030 --> 00:02:36,950
all of these different work spaces.

42
00:02:36,950 --> 00:02:39,440
But keep the state data separate.

43
00:02:39,440 --> 00:02:44,140
That leads to the support of multiple environments.

44
00:02:44,140 --> 00:02:46,700
Within the configuration of terra form,

45
00:02:46,700 --> 00:02:49,910
you can references what works based you're currently using,

46
00:02:49,910 --> 00:02:53,390
and that's really useful if you want to make configuration decisions

47
00:02:53,390 --> 00:02:55,960
based off of which environment you've deployed to.

48
00:02:55,960 --> 00:02:58,240
For instance, if you deployed to development,

49
00:02:58,240 --> 00:03:00,640
you might use one size E C two instance,

50
00:03:00,640 --> 00:03:03,240
whereas production might get a different one,

51
00:03:03,240 --> 00:03:06,780
you can also use the value stored in terra form that works space.

52
00:03:06,780 --> 00:03:10,440
So you know what environment your resource was deployed to.

53
00:03:10,440 --> 00:03:13,450
Now let's tie it all together by looking at how we can

54
00:03:13,450 --> 00:03:15,680
use the code family of tools in A.

55
00:03:15,680 --> 00:03:22,000
W S to achieve source control management and the automated deployment of our infrastructure.

