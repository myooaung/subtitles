WEBVTT
1
00:00:01.040 --> 00:00:01.740
[Autogenerated] all right.

2
00:00:01.740 --> 00:00:03.800
If you think about infrastructures code,

3
00:00:03.800 --> 00:00:07.720
probably the first thing that occurs to you is you are now defining

4
00:00:07.720 --> 00:00:11.160
your infrastructure in a software defined way.

5
00:00:11.160 --> 00:00:14.590
You are expressing your infrastructure as code,

6
00:00:14.590 --> 00:00:16.910
and then you're deploying it through software,

7
00:00:16.910 --> 00:00:19.350
so there's no manual process anymore.

8
00:00:19.350 --> 00:00:21.770
That would be a fundamental component of I.

9
00:00:21.770 --> 00:00:22.100
A.

10
00:00:22.100 --> 00:00:23.340
C.

11
00:00:23.340 --> 00:00:26.560
Another thing that's slightly less obvious is your

12
00:00:26.560 --> 00:00:31.150
configurations are now able to adopt software development

13
00:00:31.150 --> 00:00:35.040
principles like reusability and repeatability.

14
00:00:35.040 --> 00:00:38.430
The reusability of your code means there's going to be snippets of your

15
00:00:38.430 --> 00:00:41.590
configuration that could be used across multiple configurations.

16
00:00:41.590 --> 00:00:45.640
In fact, that's the whole point of terra form modules.

17
00:00:45.640 --> 00:00:48.870
The repeatable aspect is, once you have a configuration,

18
00:00:48.870 --> 00:00:51.380
you can deploy it once and then again and again,

19
00:00:51.380 --> 00:00:54.120
and it's gonna give you the same thing every time across.

20
00:00:54.120 --> 00:00:56.540
Multiple environments.

21
00:00:56.540 --> 00:00:58.970
Another key component of infrastructures code.

22
00:00:58.970 --> 00:01:00.590
And this isn't a hard requirement,

23
00:01:00.590 --> 00:01:03.640
but I don't see why you wouldn't use it is source control.

24
00:01:03.640 --> 00:01:07.530
Your code can be checked in and managed by source control,

25
00:01:07.530 --> 00:01:12.340
and that's highly recommended will delve more into that topic in a moment,

26
00:01:12.340 --> 00:01:16.060
and then finally, once you have all that code in source control.

27
00:01:16.060 --> 00:01:20.860
Why not leverage some automation to get it deployed to multiple environments?

28
00:01:20.860 --> 00:01:23.440
So we'll take a look at that as well.

29
00:01:23.440 --> 00:01:27.140
But first, let's focus on source control.

30
00:01:27.140 --> 00:01:31.370
Source control management, or sometimes referred to as SCM,

31
00:01:31.370 --> 00:01:37.940
is a way of storing your code in a controlled repository.

32
00:01:37.940 --> 00:01:42.650
And the way that you manage that code is going to be through some sort of tool.

33
00:01:42.650 --> 00:01:44.730
And there's multiple formats to do that.

34
00:01:44.730 --> 00:01:48.840
The one that you're probably most familiar with is get.

35
00:01:48.840 --> 00:01:50.230
And there's a reason for that.

36
00:01:50.230 --> 00:01:54.530
It's used by the most popular repository platforms online.

37
00:01:54.530 --> 00:01:56.570
But there are other formats out there.

38
00:01:56.570 --> 00:02:00.640
For instance, team foundation version, control and subversion.

39
00:02:00.640 --> 00:02:03.550
Now what are the platforms out there that you can

40
00:02:03.550 --> 00:02:05.280
use for source control management?

41
00:02:05.280 --> 00:02:10.040
Well, there are a lot, but let me just highlight a few off the top of my head.

42
00:02:10.040 --> 00:02:14.520
GitHub is probably the most popular one in the best well known.

43
00:02:14.520 --> 00:02:18.640
In fact, you got the exercise files for this course from GitHub.

44
00:02:18.640 --> 00:02:23.330
Other examples are bit bucket, get lab and AWS code commit,

45
00:02:23.330 --> 00:02:24.340
and we'll be using code.

46
00:02:24.340 --> 00:02:26.640
Commit a little bit later.

47
00:02:26.640 --> 00:02:30.870
What does source control management allow you to do it allows

48
00:02:30.870 --> 00:02:33.520
you to collaborate with other team members.

49
00:02:33.520 --> 00:02:37.040
You're putting your code in a centralized repository.

50
00:02:37.040 --> 00:02:40.300
Your fellow team members can check that code out,

51
00:02:40.300 --> 00:02:43.780
create their own branch, make changes, test those changes,

52
00:02:43.780 --> 00:02:46.960
push those changes back up to the central repository and then

53
00:02:46.960 --> 00:02:50.340
potentially merge it into the master branch.

54
00:02:50.340 --> 00:02:53.490
That level of collaboration is difficult to achieve if you

55
00:02:53.490 --> 00:02:56.910
don't have that centralized repository to begin with that

56
00:02:56.910 --> 00:02:58.750
centralized repository and in fact,

57
00:02:58.750 --> 00:03:02.440
your local repository have versioning control enabled.

58
00:03:02.440 --> 00:03:05.800
That means every time you make a commit to your branch,

59
00:03:05.800 --> 00:03:07.980
you're also able to undo that.

60
00:03:07.980 --> 00:03:10.430
Commit and roll it back to the previous version.

61
00:03:10.430 --> 00:03:12.040
And that could be very useful.

62
00:03:12.040 --> 00:03:14.820
When one of your commit ends up breaking something,

63
00:03:14.820 --> 00:03:18.390
it's easy to roll back or selectively remove commits

64
00:03:18.390 --> 00:03:20.540
until you get to a good state.

65
00:03:20.540 --> 00:03:24.640
Versioning troll is very important for that reason.

66
00:03:24.640 --> 00:03:27.540
Now you Once you have your stuff in source control management,

67
00:03:27.540 --> 00:03:34.000
you may want to automate the deployment of your infrastructure. How would you go about that?

