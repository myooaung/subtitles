1
00:00:01,300 --> 00:00:02,380
In this demo,

2
00:00:02,380 --> 00:00:05,750
we'll look at creating a CodeCommit user and repository

3
00:00:05,750 --> 00:00:07,740
and getting it set up on our machine.

4
00:00:07,740 --> 00:00:13,130
We'll start by creating a CodeCommit repository by using an AWS identity and

5
00:00:13,130 --> 00:00:18,570
access management admin user, then we'll create a specific developer user

6
00:00:18,570 --> 00:00:23,780
for AWS CodeCommit, and we'll create credentials using that user that we can

7
00:00:23,780 --> 00:00:27,990
access the CodeCommit repository with. From there, we'll clone the

8
00:00:27,990 --> 00:00:31,920
repository to our local machine, and then we'll be ready to start working

9
00:00:31,920 --> 00:00:33,500
with it in the next demo.

10
00:00:33,500 --> 00:00:39,250
So let's go over to the AWS console now. Over here in the AWS console,

11
00:00:39,250 --> 00:00:41,560
we're going to go to this Services drop‑down and start by

12
00:00:41,560 --> 00:00:45,280
creating our CodeCommit repository by searching for CodeCommit in

13
00:00:45,280 --> 00:00:48,120
the search bar here and clicking on it.

14
00:00:48,120 --> 00:00:50,950
Now in here in the CodeCommit section of the AWS console,

15
00:00:50,950 --> 00:00:55,040
we'll click Create repository and then give this repository a name.

16
00:00:55,040 --> 00:00:58,020
Now I'm going to call this repository flasky because we'll

17
00:00:58,020 --> 00:01:01,590
be working with the Python library, Flask, to create our

18
00:01:01,590 --> 00:01:03,450
application later in this course.

19
00:01:03,450 --> 00:01:05,820
So let's leave that repository name as is.

20
00:01:05,820 --> 00:01:08,740
We could also give it an optional description, and we could also

21
00:01:08,740 --> 00:01:12,160
add tags to attribute this repository to a particular part of

22
00:01:12,160 --> 00:01:15,790
our organization or for dealing with other billing purposes or

23
00:01:15,790 --> 00:01:17,440
organizational purposes.

24
00:01:17,440 --> 00:01:19,940
And if we were coding in Java instead of Python,

25
00:01:19,940 --> 00:01:23,290
we could also enable Amazon CodeGuru to automatically

26
00:01:23,290 --> 00:01:25,210
make recommendations on our code.

27
00:01:25,210 --> 00:01:29,390
But because CodeGuru, as of this recording, doesn't have support for Python,

28
00:01:29,390 --> 00:01:30,950
we're not going to check that off.

29
00:01:30,950 --> 00:01:34,110
So let's click Create here, and let's see how we would

30
00:01:34,110 --> 00:01:36,410
actually interact with the repository.

31
00:01:36,410 --> 00:01:36,550
Well,

32
00:01:36,550 --> 00:01:39,320
you'll notice that we have this warning down here that's saying

33
00:01:39,320 --> 00:01:41,410
that we're currently signed into the root account,

34
00:01:41,410 --> 00:01:44,890
and we can't configure SSH connections from the root account because it's

35
00:01:44,890 --> 00:01:48,140
not tied to a particular developer or a particular user.

36
00:01:48,140 --> 00:01:51,470
So in order to create SSH connections to our repository,

37
00:01:51,470 --> 00:01:55,260
we're going to need to go in and create a new IAM user.

38
00:01:55,260 --> 00:01:56,190
So to do this,

39
00:01:56,190 --> 00:01:58,690
let's go over to the Services drop‑down and search

40
00:01:58,690 --> 00:02:01,840
for identity and access management, or IAM.

41
00:02:01,840 --> 00:02:04,500
We'll click on that, and that will create a new user.

42
00:02:04,500 --> 00:02:07,090
So I'm going to click Users here, click Add user,

43
00:02:07,090 --> 00:02:09,160
and I'm going to give this user a name,

44
00:02:09,160 --> 00:02:12,950
which is specific to the developer that's going to be interacting with this

45
00:02:12,950 --> 00:02:17,240
repository, not a generic name like admin or something else because we want

46
00:02:17,240 --> 00:02:21,110
to tie all the commits that are being made to our repository to a specific

47
00:02:21,110 --> 00:02:23,040
developer and a specific person.

48
00:02:23,040 --> 00:02:24,240
So from here, we'll click,

49
00:02:24,240 --> 00:02:27,660
enable Programmatic access and AWS Management Console access,

50
00:02:27,660 --> 00:02:31,460
and we'll click Next. And then in this section, this is where we

51
00:02:31,460 --> 00:02:34,310
determine what permissions we want our user to have.

52
00:02:34,310 --> 00:02:36,670
We could either add them to a group to give them

53
00:02:36,670 --> 00:02:38,960
permissions associated with a particular group,

54
00:02:38,960 --> 00:02:41,870
or we could attach policies directly to a user.

55
00:02:41,870 --> 00:02:45,400
Now the best practice is generally to have a group that we put all of

56
00:02:45,400 --> 00:02:48,000
our users with the same types of permissions in.

57
00:02:48,000 --> 00:02:50,730
And in this case, I'm imagining I'm Fernando the developer,

58
00:02:50,730 --> 00:02:52,540
not Fernando the administrator.

59
00:02:52,540 --> 00:02:54,710
Administrators might have full access to everything,

60
00:02:54,710 --> 00:02:57,230
including managing IAM. In this case,

61
00:02:57,230 --> 00:03:01,270
we probably just want our developers to have a slightly more restrictive access.

62
00:03:01,270 --> 00:03:03,000
So I clicked Create group there,

63
00:03:03,000 --> 00:03:06,340
and now we're going to create a new group called developers.

64
00:03:06,340 --> 00:03:08,800
Now these developers will need a lot of permissions to interact

65
00:03:08,800 --> 00:03:11,800
with many different AWS services, and we're not going to lock our

66
00:03:11,800 --> 00:03:14,620
environment down too much because we'll be working with so many

67
00:03:14,620 --> 00:03:16,040
of them in this course.

68
00:03:16,040 --> 00:03:17,630
So I'll leave the developers name there,

69
00:03:17,630 --> 00:03:20,100
and then we're going to search for two different policies.

70
00:03:20,100 --> 00:03:23,470
We could use a combination of many different managed policies in the

71
00:03:23,470 --> 00:03:26,280
process, but for right now, I'm going to search for power user, and then

72
00:03:26,280 --> 00:03:30,470
I'm going to scroll down. You'll see that we have power user access as one

73
00:03:30,470 --> 00:03:32,740
of the managed policies that AWS provides.

74
00:03:32,740 --> 00:03:36,110
I'm going to check this off, and then I'm going to look down at the policy

75
00:03:36,110 --> 00:03:39,670
summary that this has. Then you'll notice we have permissions for a lot of

76
00:03:39,670 --> 00:03:44,100
different AWS services, 238 of them actually.

77
00:03:44,100 --> 00:03:47,700
Now basically, the only thing that this power user can't do is

78
00:03:47,700 --> 00:03:51,450
start to manage the IAM users, groups, roles, and permissions

79
00:03:51,450 --> 00:03:53,840
associated with all of those different things.

80
00:03:53,840 --> 00:03:56,770
So we're one step down from being an administrator.

81
00:03:56,770 --> 00:03:59,590
So, let's make sure that that box is checked and that we are

82
00:03:59,590 --> 00:04:03,590
associating this PowerUserAccess policy with our new developers

83
00:04:03,590 --> 00:04:06,910
group. From here, in environments that are a little more locked

84
00:04:06,910 --> 00:04:09,060
down, instead of using power user,

85
00:04:09,060 --> 00:04:13,360
we might want to end up using a policy specific to CodeCommit.

86
00:04:13,360 --> 00:04:14,210
So, for example,

87
00:04:14,210 --> 00:04:16,470
if we wanted to grant people full access to manage

88
00:04:16,470 --> 00:04:21,540
everything inside of CodeCommit, we could use the AWSCodeCommitFullAccess policy,

89
00:04:21,540 --> 00:04:24,710
which would allow us to do basically anything inside of here,

90
00:04:24,710 --> 00:04:28,340
including managing other services that interact with CodeCommit.

91
00:04:28,340 --> 00:04:28,740
Now,

92
00:04:28,740 --> 00:04:32,770
if we wanted to use other policies that only grant a little bit less than that,

93
00:04:32,770 --> 00:04:36,300
we could use something like the AWSCodeCommitPowerUser policy,

94
00:04:36,300 --> 00:04:39,980
which is, again, one step down just like the power user policy was from an

95
00:04:39,980 --> 00:04:43,240
administrator policy that we were looking at earlier.

96
00:04:43,240 --> 00:04:47,840
So with both of these two policies checked off, let's click Create group.

97
00:04:47,840 --> 00:04:51,950
Now in this developers group, if we click on it, it has two different policies.

98
00:04:51,950 --> 00:04:56,760
The AWSCodeCommitPowerUser and the PowerUserAccess policy.

99
00:04:56,760 --> 00:04:59,350
And these policies will both be plenty to allow our new

100
00:04:59,350 --> 00:05:01,580
user to interact with CodeCommit.

101
00:05:01,580 --> 00:05:03,170
So let's close this out.

102
00:05:03,170 --> 00:05:03,770
In addition,

103
00:05:03,770 --> 00:05:07,370
these policies will help us work in future demos when we're interacting

104
00:05:07,370 --> 00:05:10,840
with other AWS services that we need for DevOps tooling.

105
00:05:10,840 --> 00:05:13,860
So let's make sure we add our user to this developers group by checking

106
00:05:13,860 --> 00:05:17,030
that box, and then we'll click the Next: Tags button.

107
00:05:17,030 --> 00:05:18,620
We won't add any tags in this case,

108
00:05:18,620 --> 00:05:21,770
but we could again if we wanted to work with tags for the purposes I mentioned

109
00:05:21,770 --> 00:05:25,710
earlier. Then finally, we'll review the user we're about to create, and you'll

110
00:05:25,710 --> 00:05:28,850
see that it's in the developers group, and it's going to give us both

111
00:05:28,850 --> 00:05:32,220
programmatic access and AWS console access.

112
00:05:32,220 --> 00:05:33,930
Now we'll click Create user.

113
00:05:33,930 --> 00:05:35,470
Now on this next page,

114
00:05:35,470 --> 00:05:37,600
we'll need to make sure that we copy down all of the

115
00:05:37,600 --> 00:05:39,170
credentials that are shown here,

116
00:05:39,170 --> 00:05:43,840
both the Access key ID, and also the Secret access key, and the Password.

117
00:05:43,840 --> 00:05:47,760
Now if we navigate away from this page at any point before we copy those down,

118
00:05:47,760 --> 00:05:49,720
we'll have to do this process all over again.

119
00:05:49,720 --> 00:05:53,780
So make sure you click the Show buttons next to Secret access key and Password,

120
00:05:53,780 --> 00:05:58,540
and copy all this information down so we can sign into our AWS account.

121
00:05:58,540 --> 00:06:01,050
After you've copied down all the credentials below,

122
00:06:01,050 --> 00:06:08,000
make sure to also copy this sign‑in link so you can sign in with a non‑root user to your AWS account.

