1
00:00:01,440 --> 00:00:04,590
Now that we know some of the basic concepts around CodePipeline,

2
00:00:04,590 --> 00:00:07,930
let's take a closer look at actions and artifacts.

3
00:00:07,930 --> 00:00:10,730
There's several different action types that you might have

4
00:00:10,730 --> 00:00:12,660
when you're working with CodePipeline.

5
00:00:12,660 --> 00:00:14,880
The first one is a source action.

6
00:00:14,880 --> 00:00:17,530
This could be something like CodeCommit or other source

7
00:00:17,530 --> 00:00:19,440
providers that CodePipeline supports.

8
00:00:19,440 --> 00:00:22,340
But there's also other actions, like a build action,

9
00:00:22,340 --> 00:00:25,120
a test action, and a deploy action.

10
00:00:25,120 --> 00:00:28,530
And these all do about what you'd expect and can work with many of the

11
00:00:28,530 --> 00:00:30,730
services we've already discussed in this course,

12
00:00:30,730 --> 00:00:33,060
as well as other third‑party services.

13
00:00:33,060 --> 00:00:36,240
But there's also two other options, an approval action,

14
00:00:36,240 --> 00:00:40,130
which allows you to require an approval of a deployment or other

15
00:00:40,130 --> 00:00:42,640
part of your pipeline before it goes forward,

16
00:00:42,640 --> 00:00:44,740
and an invoke action,

17
00:00:44,740 --> 00:00:48,240
which allows you to customize your pipelines a little bit further.

18
00:00:48,240 --> 00:00:52,130
Now for source actions, we have several different options, like I mentioned.

19
00:00:52,130 --> 00:00:56,820
There's a source code option for either BitBucket, CodeCommit, or GitHub.

20
00:00:56,820 --> 00:00:59,420
And there's also an option to use containers using

21
00:00:59,420 --> 00:01:01,810
Amazon's Elastic Container Registry.

22
00:01:01,810 --> 00:01:04,740
But you can also use Amazon's S3 service to host

23
00:01:04,740 --> 00:01:06,900
your files inside of an S3 bucket.

24
00:01:06,900 --> 00:01:08,140
In addition to source actions,

25
00:01:08,140 --> 00:01:10,940
we also have all the testing options that we could use.

26
00:01:10,940 --> 00:01:13,830
We could use AWS CodeBuild in a pretty similar way to

27
00:01:13,830 --> 00:01:16,050
how we used it in earlier modules.

28
00:01:16,050 --> 00:01:19,730
But there's also options for other tools like Jenkins, if you want an open

29
00:01:19,730 --> 00:01:24,810
source option. Or other AWS services like AWS DeviceFarm to go out and test

30
00:01:24,810 --> 00:01:27,660
your code against a bunch of different device types.

31
00:01:27,660 --> 00:01:30,530
And there's third‑party tools like Ghost Inspector,

32
00:01:30,530 --> 00:01:32,840
StormRunner Load, and Runscope.

33
00:01:32,840 --> 00:01:36,520
In addition to these testing actions, we also have the build actions.

34
00:01:36,520 --> 00:01:38,940
Now there's two main options for build actions.

35
00:01:38,940 --> 00:01:43,470
The first is AWS CodeBuild, and the second is Jenkins. Though in the future,

36
00:01:43,470 --> 00:01:44,010
who knows?

37
00:01:44,010 --> 00:01:47,340
AWS might decide to add a lot more to build actions or to any of the

38
00:01:47,340 --> 00:01:51,080
other action types. For deployment actions, we have the option to use

39
00:01:51,080 --> 00:01:55,560
AWS CodeDeploy, Amazon S3 if we want to store information inside of S3

40
00:01:55,560 --> 00:01:56,680
that we're going to make available,

41
00:01:56,680 --> 00:02:01,410
such as in the case of static websites on S3, or AWS CloudFormation, if we're

42
00:02:01,410 --> 00:02:05,940
deploying using the infrastructure as code style of deployment There's even the

43
00:02:05,940 --> 00:02:10,480
option to deploy to the Alexa Skills Kit if we're creating an Alexa skill that

44
00:02:10,480 --> 00:02:12,530
we want to integrate with CodePipeline.

45
00:02:12,530 --> 00:02:15,940
Finally, there's the option to deploy to Amazon ECS,

46
00:02:15,940 --> 00:02:19,440
and there's also two other actions that we might end up working with.

47
00:02:19,440 --> 00:02:21,410
The manual approval stage, like I mentioned,

48
00:02:21,410 --> 00:02:24,890
requires human approval steps with optional push notifications

49
00:02:24,890 --> 00:02:28,230
configured through the Simple Notification Service, SNS.

50
00:02:28,230 --> 00:02:31,960
With the invoke stage, we actually have two different options.

51
00:02:31,960 --> 00:02:35,990
We can either use AWS Lambda to do a bunch of custom logic on our own, or

52
00:02:35,990 --> 00:02:40,440
we can have a slightly more customized workflow using AWS Step Functions,

53
00:02:40,440 --> 00:02:44,170
which could integrate Lambda functions inside of that or even other tasks

54
00:02:44,170 --> 00:02:46,240
outside of Lambda functions.

55
00:02:46,240 --> 00:02:53,000
So now that we know how all these actions come together into our pipelines, let's try and create a pipeline of our own.

