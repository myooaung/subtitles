1
00:00:00,840 --> 00:00:04,240
So now that we understand how these different deployment types work,

2
00:00:04,240 --> 00:00:08,430
let's look at how we actually configure them inside of AppSpec files.

3
00:00:08,430 --> 00:00:13,680
AppSpec files or application specification files are YAML file or JSON‑formatted

4
00:00:13,680 --> 00:00:17,340
files that will help us manage our CodeDeploy deployments.

5
00:00:17,340 --> 00:00:19,980
Let's look at some of the different contents of these files,

6
00:00:19,980 --> 00:00:22,660
depending on the different services that we're working with.

7
00:00:22,660 --> 00:00:26,640
With ECS, we'll have to determine what the ECS services,

8
00:00:26,640 --> 00:00:28,430
the container name that we're working with,

9
00:00:28,430 --> 00:00:31,980
port details if we're allowing traffic on particular ports,

10
00:00:31,980 --> 00:00:34,620
Lambda function validation tests if we want to run

11
00:00:34,620 --> 00:00:37,010
these after our ECS has deployed,

12
00:00:37,010 --> 00:00:40,600
and also lifecycle details of the entire process.

13
00:00:40,600 --> 00:00:45,840
So let's look at how this would actually come into a YAML file as an example.

14
00:00:45,840 --> 00:00:51,220
So in this AppSpec file here, we're defining resources like our ECS service,

15
00:00:51,220 --> 00:00:53,770
and giving the details around the task definition,

16
00:00:53,770 --> 00:00:57,280
the load balancer information, and the port that it's operating on.

17
00:00:57,280 --> 00:01:00,080
And we also have a hook section, which we'll talk about in a moment,

18
00:01:00,080 --> 00:01:02,430
that will allow us to run our Lambda functions at

19
00:01:02,430 --> 00:01:04,300
particular points in this installation.

20
00:01:04,300 --> 00:01:09,350
With AppSpec files for AWS Lambda, we're really going to only have two parts,

21
00:01:09,350 --> 00:01:12,140
details about the Lambda function's deployment

22
00:01:12,140 --> 00:01:14,460
version and other details about it,

23
00:01:14,460 --> 00:01:16,970
and the Lambda function's validation tests that we might

24
00:01:16,970 --> 00:01:18,910
want to run after it's been deployed.

25
00:01:18,910 --> 00:01:20,940
An example of this file would look like this,

26
00:01:20,940 --> 00:01:23,540
where we have the definition of our Lambda function,

27
00:01:23,540 --> 00:01:26,240
the name and the alias and the versions that we're working with,

28
00:01:26,240 --> 00:01:28,620
as well as a hook section for the tests that I mentioned that

29
00:01:28,620 --> 00:01:31,340
we can run with other Lambda functions.

30
00:01:31,340 --> 00:01:33,870
AppSpec files also look a little different when working

31
00:01:33,870 --> 00:01:36,750
with EC2 or on‑premises environments.

32
00:01:36,750 --> 00:01:39,570
We'll have a source file and destination mappings.

33
00:01:39,570 --> 00:01:42,040
So all the files we're copying into EC2 instances,

34
00:01:42,040 --> 00:01:45,470
we'll need to map from wherever they are inside of our deployment

35
00:01:45,470 --> 00:01:49,240
package to wherever they should go on the EC2 instance.

36
00:01:49,240 --> 00:01:51,040
For example, in different directories,

37
00:01:51,040 --> 00:01:54,200
we might have different contents of those directories that we want on the

38
00:01:54,200 --> 00:01:57,460
instance that will be different from what's in the file. We'll also have

39
00:01:57,460 --> 00:01:59,900
custom permissions for the deployed files.

40
00:01:59,900 --> 00:02:03,020
So if one file should be more accessible than another or have

41
00:02:03,020 --> 00:02:05,760
executable permissions or other things like that.

42
00:02:05,760 --> 00:02:06,540
And finally,

43
00:02:06,540 --> 00:02:10,340
we'll also define custom scripts that we want to run during

44
00:02:10,340 --> 00:02:13,580
different deployment lifecycle hook sections. Again, we'll

45
00:02:13,580 --> 00:02:15,250
talk about hooks in just a moment,

46
00:02:15,250 --> 00:02:18,270
but here's an example of EC2 instances and what the

47
00:02:18,270 --> 00:02:20,200
AppSpec file might look like for them.

48
00:02:20,200 --> 00:02:24,580
The first part would look like the file section saying the source where the

49
00:02:24,580 --> 00:02:29,310
file exists inside of our deployment artifact and the destination where we

50
00:02:29,310 --> 00:02:32,540
want it to go on the machine that we're deploying to.

51
00:02:32,540 --> 00:02:33,350
So, for example,

52
00:02:33,350 --> 00:02:36,600
our config file might start in config.txt inside of

53
00:02:36,600 --> 00:02:38,240
a config folder in our artifact,

54
00:02:38,240 --> 00:02:44,140
but then we deploy it to a /webapps/config directory and file location.

55
00:02:44,140 --> 00:02:47,940
Now also in the same AppSpec file, we might have hooks that look like

56
00:02:47,940 --> 00:02:51,540
this, where we have different scripts to run at particular parts of

57
00:02:51,540 --> 00:02:54,800
the installation step; before installation, after installation, and so

58
00:02:54,800 --> 00:02:58,450
forth, and these would do things like install or unzip different

59
00:02:58,450 --> 00:03:02,140
pieces of our application artifacts or go get additional dependencies

60
00:03:02,140 --> 00:03:03,440
we might need.

61
00:03:03,440 --> 00:03:06,320
So now that we know what some of these files look like, in the next

62
00:03:06,320 --> 00:03:13,000
section, let's take a closer look at how AppSpec hooks help us tie together the installation process.

