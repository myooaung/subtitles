1
00:00:01,140 --> 00:00:03,750
So now that we're ready to start working with CodeBuild,

2
00:00:03,750 --> 00:00:05,410
I need to point out one thing to you.

3
00:00:05,410 --> 00:00:08,510
We're currently signed in as the user I created in the

4
00:00:08,510 --> 00:00:11,080
CodeCommit demo earlier in this course,

5
00:00:11,080 --> 00:00:13,020
which means if I click on the drop‑down here,

6
00:00:13,020 --> 00:00:16,020
you'll notice that my IAM username is fernando.

7
00:00:16,020 --> 00:00:19,640
We're not underneath the root account for this AWS account.

8
00:00:19,640 --> 00:00:21,200
And if I go to the Services drop‑down,

9
00:00:21,200 --> 00:00:24,320
you can tell this pretty clearly if I go to a service like IAM.

10
00:00:24,320 --> 00:00:26,700
When we created this account in that section,

11
00:00:26,700 --> 00:00:30,670
we Limited the IAM permissions pretty heavily for this user.

12
00:00:30,670 --> 00:00:35,150
What this means is that we won't necessarily be able to create an IAM

13
00:00:35,150 --> 00:00:38,560
role that CodeBuild can use to build our project.

14
00:00:38,560 --> 00:00:39,810
So to fix this,

15
00:00:39,810 --> 00:00:43,170
we can either give this user more permissions or we can set up

16
00:00:43,170 --> 00:00:46,240
a build pipeline using a higher‑permissioned user like an

17
00:00:46,240 --> 00:00:49,620
administrator or the root account, probably an administrator,

18
00:00:49,620 --> 00:00:51,370
since that's the best practice.

19
00:00:51,370 --> 00:00:53,740
So in order to set up CodeBuild,

20
00:00:53,740 --> 00:00:56,810
I'm going to instead sign into an administrator account

21
00:00:56,810 --> 00:00:59,540
in AWS in the exact same AWS account.

22
00:00:59,540 --> 00:01:04,180
We'll double‑check I'm there by going to CodeCommit, and then we'll check that

23
00:01:04,180 --> 00:01:08,200
are flasky2 repo is currently listed inside of the repos.

24
00:01:08,200 --> 00:01:09,030
Looks like it is,

25
00:01:09,030 --> 00:01:12,440
and we have all the code that we just pushed from the command line.

26
00:01:12,440 --> 00:01:13,140
So from here,

27
00:01:13,140 --> 00:01:15,780
we should be able to use this higher‑privileged user

28
00:01:15,780 --> 00:01:17,550
to create a CodeBuild project.

29
00:01:17,550 --> 00:01:19,480
We'll collapse the Source section here,

30
00:01:19,480 --> 00:01:23,120
go over to Build, and click Getting started and Create project.

31
00:01:23,120 --> 00:01:25,870
From here we'll be able to give this project to name.

32
00:01:25,870 --> 00:01:30,730
I'll call it flasky‑build, let me make sure I add the y there,

33
00:01:30,730 --> 00:01:33,340
and then we'll need to select the source where the code

34
00:01:33,340 --> 00:01:35,270
comes from in order to build our project.

35
00:01:35,270 --> 00:01:38,130
We'll keep CodeCommit selected as the source provider,

36
00:01:38,130 --> 00:01:42,090
and then we'll click flasky2, which is the repo that I push my code to.

37
00:01:42,090 --> 00:01:44,840
But if you're sticking with flasky just without the 2,

38
00:01:44,840 --> 00:01:46,280
you can also select that here.

39
00:01:46,280 --> 00:01:48,330
We'll pick the branch that we're using.

40
00:01:48,330 --> 00:01:52,520
For flasky2, I kept the master branch, but when I was working with flasky,

41
00:01:52,520 --> 00:01:54,430
it had the name of main.

42
00:01:54,430 --> 00:01:55,300
But either way,

43
00:01:55,300 --> 00:01:58,220
select the branch that you'll be merging everything into and pushing

44
00:01:58,220 --> 00:02:01,240
your changes into when you want builds to happen.

45
00:02:01,240 --> 00:02:02,740
So with master selected,

46
00:02:02,740 --> 00:02:05,710
I'll scroll down and we'll set up the environment section.

47
00:02:05,710 --> 00:02:08,280
Instead of a custom image, for example,

48
00:02:08,280 --> 00:02:12,600
if we wanted custom stuff inside of a Docker container that ran our build,

49
00:02:12,600 --> 00:02:14,910
we'll instead use a managed image,

50
00:02:14,910 --> 00:02:17,590
which means that AWS CodeBuild will deal with all the

51
00:02:17,590 --> 00:02:20,020
dependencies and everything else inside of it for us,

52
00:02:20,020 --> 00:02:23,440
and it'll make it a little bit easier to get off the ground with our build.

53
00:02:23,440 --> 00:02:25,220
We'll then select the operating system.

54
00:02:25,220 --> 00:02:27,850
By the fault you do have Amazon Linux 2,

55
00:02:27,850 --> 00:02:30,310
Windows Server, and Windows Server 2019,

56
00:02:30,310 --> 00:02:33,300
but Ubuntu is typically the most recommended build

57
00:02:33,300 --> 00:02:35,610
process inside of AWS CodeBuild.

58
00:02:35,610 --> 00:02:37,790
So we'll select that, click the runtimes,

59
00:02:37,790 --> 00:02:41,540
click Standard, click the Image and click Standard:4.0.

60
00:02:41,540 --> 00:02:44,640
And if we wanted to pick a very particular version of the image,

61
00:02:44,640 --> 00:02:48,090
we could go into these image versions and pick the one we wanted,

62
00:02:48,090 --> 00:02:50,470
but we're going to use the latest image for this runtime

63
00:02:50,470 --> 00:02:51,930
version and just leave it at that.

64
00:02:51,930 --> 00:02:56,710
We could also specify if we wanted Linux or Linux GPU to run our environment,

65
00:02:56,710 --> 00:02:58,900
but Linux should be fine for us for here.

66
00:02:58,900 --> 00:03:02,140
From there, we'll scroll down and you'll see this Service role section.

67
00:03:02,140 --> 00:03:05,940
We have the option to click an existing service role or a new service role.

68
00:03:05,940 --> 00:03:06,560
In this case,

69
00:03:06,560 --> 00:03:10,470
I logged in as the administrator user in order to create this new service

70
00:03:10,470 --> 00:03:13,210
role without having to go get additional permissions.

71
00:03:13,210 --> 00:03:17,470
Now if you're managing an organization of people that sets up build pipelines,

72
00:03:17,470 --> 00:03:20,340
it's possible you might already as an administrator want to

73
00:03:20,340 --> 00:03:24,220
create a role that they can then reference and use inside of

74
00:03:24,220 --> 00:03:27,910
AWS CodeBuild without having to go out and create their own

75
00:03:27,910 --> 00:03:29,750
roles for CodeBuild themselves.

76
00:03:29,750 --> 00:03:32,460
This'll get around a permissions issue we might have faced if we

77
00:03:32,460 --> 00:03:35,420
tried to do this as our lower‑privileged user.

78
00:03:35,420 --> 00:03:39,870
That's just fernando that we created in the IAM console in earlier demos.

79
00:03:39,870 --> 00:03:42,060
So now that we've clicked the new service role,

80
00:03:42,060 --> 00:03:45,060
it should automatically populate a CodeBuild role for us,

81
00:03:45,060 --> 00:03:47,240
given the name of our service.

82
00:03:47,240 --> 00:03:50,250
So now that it's done that, I can scroll down to the Buildspec section.

83
00:03:50,250 --> 00:03:51,250
In here,

84
00:03:51,250 --> 00:03:53,270
we could write our own custom build commands if we

85
00:03:53,270 --> 00:03:55,110
click the insert build commands button,

86
00:03:55,110 --> 00:03:57,570
and then we could also switch to the editor if we wanted to do

87
00:03:57,570 --> 00:03:59,940
this manually and write out every single command.

88
00:03:59,940 --> 00:04:03,830
But because we already have a buildspec file, we'll leave that option selected.

89
00:04:03,830 --> 00:04:05,070
Now by default,

90
00:04:05,070 --> 00:04:09,540
CodeBuild is going to look for a buildspec.yml file in the root level directory.

91
00:04:09,540 --> 00:04:11,500
And inside of our code here,

92
00:04:11,500 --> 00:04:15,890
that's exactly what we have, a buildspec.ymlfile at the top level

93
00:04:15,890 --> 00:04:18,940
of our directory that we pushed into CodeCommit.

94
00:04:18,940 --> 00:04:22,190
So because we're using the default configuration we can leave this

95
00:04:22,190 --> 00:04:26,060
section blank too and scroll down to the Artifacts section.

96
00:04:26,060 --> 00:04:28,190
We're not going to do anything with this one either,

97
00:04:28,190 --> 00:04:29,900
because since we're working with Python,

98
00:04:29,900 --> 00:04:33,300
and we're not actually outputting any deployment artifacts to go

99
00:04:33,300 --> 00:04:36,340
anywhere after we've run this testing build,

100
00:04:36,340 --> 00:04:38,820
we'll leave this section configured with the type of No

101
00:04:38,820 --> 00:04:41,320
artifacts and just leave it it as is.

102
00:04:41,320 --> 00:04:46,580
From here we can scroll down to the bottom and click the Create build project.

103
00:04:46,580 --> 00:04:49,010
We don't need to configure anything with logs because

104
00:04:49,010 --> 00:04:51,040
all the defaults will be good for us.

105
00:04:51,040 --> 00:04:51,380
Now,

106
00:04:51,380 --> 00:04:54,460
once we're done creating this build project we'll have a few

107
00:04:54,460 --> 00:04:58,190
different options for how we can interact with CodeBuild.

108
00:04:58,190 --> 00:05:02,630
Immediately, we have the option to start the build right off,

109
00:05:02,630 --> 00:05:04,480
so let's give that a try immediately.

110
00:05:04,480 --> 00:05:07,820
From here we should have the ability to just kick off the

111
00:05:07,820 --> 00:05:09,980
build with some basic configuration.

112
00:05:09,980 --> 00:05:12,090
We shouldn't need to change any of this,

113
00:05:12,090 --> 00:05:15,050
as we've already set up a lot of it in the steps we just did,

114
00:05:15,050 --> 00:05:17,240
so we'll click Start build.

115
00:05:17,240 --> 00:05:20,780
Now this build will start up and follow all the steps inside of

116
00:05:20,780 --> 00:05:24,490
our buildspec.yml file and work with all the code that we

117
00:05:24,490 --> 00:05:27,010
included in our CodeCommit repository.

118
00:05:27,010 --> 00:05:28,730
If we want to see what's going on inside of this

119
00:05:28,730 --> 00:05:30,710
build we can review the build status,

120
00:05:30,710 --> 00:05:33,460
or we can scroll down to the Build logs section.

121
00:05:33,460 --> 00:05:35,770
If we click the Tail logs button here,

122
00:05:35,770 --> 00:05:38,120
this will allow us to see everything that's happening

123
00:05:38,120 --> 00:05:40,490
inside the container as it happens.

124
00:05:40,490 --> 00:05:43,060
So since we just started, there's not much here yet,

125
00:05:43,060 --> 00:05:46,000
but you can start to see the information appear as it goes

126
00:05:46,000 --> 00:05:49,230
through the PRE_BUILD stage and entering into the INSTALL

127
00:05:49,230 --> 00:05:52,550
stage and the other stages, all the way to the POST_BUILD stage.

128
00:05:52,550 --> 00:05:55,920
Now this happens pretty quickly because our tests don't take very long to run.

129
00:05:55,920 --> 00:05:59,840
And you can see that the build has succeeded with a message in the top left.

130
00:05:59,840 --> 00:06:00,930
So let's close this out.

131
00:06:00,930 --> 00:06:01,210
now.

132
00:06:01,210 --> 00:06:03,890
And let's see the reports for this build,

133
00:06:03,890 --> 00:06:08,440
not just the build logs, but the actual reports from our pytest tests.

134
00:06:08,440 --> 00:06:10,860
And if we click into them to see them in more detail,

135
00:06:10,860 --> 00:06:14,330
we'll have an actual summary of all the tests that ran

136
00:06:14,330 --> 00:06:17,060
and how many of them passed or failed.

137
00:06:17,060 --> 00:06:19,520
In this case, we only had one test and it passed,

138
00:06:19,520 --> 00:06:21,640
so we have a pass rate of 100%.

139
00:06:21,640 --> 00:06:24,150
And we can even scroll down and see the different

140
00:06:24,150 --> 00:06:26,640
test cases that passed or failed.

141
00:06:26,640 --> 00:06:29,140
Now as you add more complexity to your applications,

142
00:06:29,140 --> 00:06:32,250
having full reports like this can help you see what's going

143
00:06:32,250 --> 00:06:35,320
correctly and what's failing and point you to what you need

144
00:06:35,320 --> 00:06:37,350
to fix or update immediately,

145
00:06:37,350 --> 00:06:41,340
so you can resolve it without having to do too much back and forth.

146
00:06:41,340 --> 00:06:43,880
You can also set up CodeBuild to prevent builds from

147
00:06:43,880 --> 00:06:46,560
going forward if they fail your tests,

148
00:06:46,560 --> 00:06:50,350
meaning that if you're trying to deploy immediately after a successful build,

149
00:06:50,350 --> 00:06:52,130
you could do it, but if you're tests fail,

150
00:06:52,130 --> 00:06:56,640
you'll prevent yourself from deploying anything that has failing tests.

151
00:06:56,640 --> 00:06:58,850
Now if you want to see what a failed build looks like,

152
00:06:58,850 --> 00:07:01,490
let's go back over to our flasky2 application.

153
00:07:01,490 --> 00:07:05,240
Inside of the tests folder, let's go to our test_routes section,

154
00:07:05,240 --> 00:07:07,130
and let's add a new test.

155
00:07:07,130 --> 00:07:09,230
Instead of def test_get_user_profile,

156
00:07:09,230 --> 00:07:14,640
let's just copy this here and add another line to the end.

157
00:07:14,640 --> 00:07:17,140
In this case, we're going to add an assert statement here,

158
00:07:17,140 --> 00:07:20,230
but instead of asserting that something is true,

159
00:07:20,230 --> 00:07:25,010
we're going to assert just false, meaning this will fail every time it runs.

160
00:07:25,010 --> 00:07:30,240
And let's change this from test_get_user_profile to just test_failure.

161
00:07:30,240 --> 00:07:33,840
Now this is going to fail every time, so we'll leave it with that name.

162
00:07:33,840 --> 00:07:34,960
We'll do git status,

163
00:07:34,960 --> 00:07:38,660
make sure that our changes are saved inside of the test_routes file,

164
00:07:38,660 --> 00:07:42,550
git add . to make sure that we added to our staging environment,

165
00:07:42,550 --> 00:07:44,830
git status one more time to see it there,

166
00:07:44,830 --> 00:07:48,180
and then we'll commit these changes from staging into our branch.

167
00:07:48,180 --> 00:07:51,680
We'll call this add failing tests.

168
00:07:51,680 --> 00:07:56,250
And after this commit has been made, we can do git push origin,

169
00:07:56,250 --> 00:07:58,440
and in this case to our master branch,

170
00:07:58,440 --> 00:08:02,500
which is the main branch that we're using and pushing all our code into.

171
00:08:02,500 --> 00:08:05,630
If we go back over to CodeBuild and we make sure that we're in our

172
00:08:05,630 --> 00:08:09,650
flasky‑build project we can start a new build here.

173
00:08:09,650 --> 00:08:12,710
Now there are ways to make this happen automatically,

174
00:08:12,710 --> 00:08:13,360
but in this case,

175
00:08:13,360 --> 00:08:15,500
we have to go all the way through everything and click

176
00:08:15,500 --> 00:08:17,740
Start build manually one more time.

177
00:08:17,740 --> 00:08:21,260
Usually those ways when we're working with CodeCommit and CodeBuild

178
00:08:21,260 --> 00:08:24,700
directly will either involve creating a lambda function to

179
00:08:24,700 --> 00:08:29,350
automatically trigger builds based on a commit to a pull request, or

180
00:08:29,350 --> 00:08:32,150
maybe if you're merging into a particular branch like the master

181
00:08:32,150 --> 00:08:33,400
branch or the main branch.

182
00:08:33,400 --> 00:08:34,070
However,

183
00:08:34,070 --> 00:08:36,510
there are are other ways we'll cover later in the course of

184
00:08:36,510 --> 00:08:39,790
doing this with services like CodePipeline, so stay tuned for

185
00:08:39,790 --> 00:08:42,940
that and putting these pieces together.

186
00:08:42,940 --> 00:08:46,230
Now once CodeBuild has started this back off, we should be able to go

187
00:08:46,230 --> 00:08:50,020
down to the build logs one more time and see the entire build process.

188
00:08:50,020 --> 00:08:53,670
If we scroll through everything, we can see exactly what's happening

189
00:08:53,670 --> 00:08:55,230
inside of it. But in this case,

190
00:08:55,230 --> 00:08:59,040
we're going to start to expect it to fail once we get to the bottom. You'll

191
00:08:59,040 --> 00:09:03,300
notice that we had an error when running this pytest command, so let's see what

192
00:09:03,300 --> 00:09:06,670
the actual error was inside of the pytest report.

193
00:09:06,670 --> 00:09:11,000
Let's go over to the Reports section and click into this report right here.

194
00:09:11,000 --> 00:09:13,970
It looks like only 50% of our tests pass,

195
00:09:13,970 --> 00:09:15,400
which kind of makes sense,

196
00:09:15,400 --> 00:09:19,440
since we just added one failed test to this repository.

197
00:09:19,440 --> 00:09:20,590
Now, if we wanted to fix this,

198
00:09:20,590 --> 00:09:24,650
we could go back to that repository and update the test so it passes.

199
00:09:24,650 --> 00:09:27,070
But now you should feel pretty comfortable with getting your

200
00:09:27,070 --> 00:09:30,140
project set up with CodeCommit and CodeBuild.

201
00:09:30,140 --> 00:09:30,870
But don't worry.

202
00:09:30,870 --> 00:09:34,400
We'll integrate these to services a little bit more in later modules.

203
00:09:34,400 --> 00:09:38,220
So let's recap what we've learned. In this module we covered a

204
00:09:38,220 --> 00:09:41,020
bunch of information around AWS CodeBuild,

205
00:09:41,020 --> 00:09:44,860
including its purposes and some basic concepts that it requires.

206
00:09:44,860 --> 00:09:48,870
We also created our own custom buildspec file for our testing

207
00:09:48,870 --> 00:09:52,880
project with a Flask application and some Python code. From there

208
00:09:52,880 --> 00:09:55,640
we ran some automated tests with CodeBuild,

209
00:09:55,640 --> 00:09:58,540
and we reviewed the results inside of the CodeBuild console.

210
00:09:58,540 --> 00:10:06,000
In later modules we'll look at how we can integrate CodeBuild into a larger CI/CD workflow.

