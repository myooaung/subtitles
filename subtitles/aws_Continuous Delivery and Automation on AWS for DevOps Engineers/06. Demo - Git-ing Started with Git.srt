1
00:00:01,740 --> 00:00:04,940
In this demo, we'll be Git‑ing started with Git.

2
00:00:04,940 --> 00:00:08,200
We'll start by installing it on our machines, if we haven't

3
00:00:08,200 --> 00:00:10,580
already had it installed on our machine by default.

4
00:00:10,580 --> 00:00:14,170
And then we'll look at how we can initialize a repository with

5
00:00:14,170 --> 00:00:16,240
a new command that I haven't mentioned yet.

6
00:00:16,240 --> 00:00:19,490
And we'll look at creating and adding files using those

7
00:00:19,490 --> 00:00:21,540
previous commands that I talked about earlier,

8
00:00:21,540 --> 00:00:24,350
and how to commit them to our repository locally.

9
00:00:24,350 --> 00:00:26,940
Finally, after we've made a few commits,

10
00:00:26,940 --> 00:00:29,780
we'll see how we can use another new command to review our Git

11
00:00:29,780 --> 00:00:33,540
history and the series of commits that we've made.

12
00:00:33,540 --> 00:00:34,530
Now, throughout this,

13
00:00:34,530 --> 00:00:36,490
I'll be taking you through some of the options that

14
00:00:36,490 --> 00:00:37,690
you can use with these commands,

15
00:00:37,690 --> 00:00:41,610
so get ready to learn a few more things about Git.

16
00:00:41,610 --> 00:00:43,870
If you don't already have Git on your machine,

17
00:00:43,870 --> 00:00:50,130
you can download it by going to git‑scm.com/download and downloading the

18
00:00:50,130 --> 00:00:53,370
appropriate Git version for your operating system.

19
00:00:53,370 --> 00:00:56,000
Now it's pretty likely that, depending on your machine,

20
00:00:56,000 --> 00:00:57,740
you might already have it.

21
00:00:57,740 --> 00:01:02,700
You can check by typing in git ‑‑version, and then seeing

22
00:01:02,700 --> 00:01:05,150
if you get a responding version number.

23
00:01:05,150 --> 00:01:10,230
In my case, I have git version 2.28.0. Now,

24
00:01:10,230 --> 00:01:12,290
if we want to start working with Git,

25
00:01:12,290 --> 00:01:14,860
the first thing we'll need to do is either to initialize a

26
00:01:14,860 --> 00:01:18,960
repository with an empty folder or initialize a repository

27
00:01:18,960 --> 00:01:21,140
with some files already inside of it.

28
00:01:21,140 --> 00:01:25,500
If I clear the screen here and ls the contents of this project directory,

29
00:01:25,500 --> 00:01:28,510
you'll notice that there's nothing in it right now. So we could go

30
00:01:28,510 --> 00:01:30,970
over to the project directory and add a new file.

31
00:01:30,970 --> 00:01:36,610
Let's call this file1.txt, and we'll just put a little bit of content in it,

32
00:01:36,610 --> 00:01:41,570
like hello. Let's save this, and then let's go back to our terminal here and ls

33
00:01:41,570 --> 00:01:44,440
again to make sure we have it in the right directory.

34
00:01:44,440 --> 00:01:47,750
Now from here we can initialize a Git repository with a new

35
00:01:47,750 --> 00:01:51,390
command called git init, for initialize.

36
00:01:51,390 --> 00:01:52,490
Once we've done this,

37
00:01:52,490 --> 00:01:56,600
you'll notice that some of the styling for my terminal has changed a little bit.

38
00:01:56,600 --> 00:02:00,760
This is because my terminal automatically supports Git and gives me more

39
00:02:00,760 --> 00:02:04,640
information about the repository that I'm working with.

40
00:02:04,640 --> 00:02:06,450
So now that we've initialized this,

41
00:02:06,450 --> 00:02:10,290
let's clear the screen. If we run the git status command,

42
00:02:10,290 --> 00:02:13,530
you'll notice that we have one untracked file that could

43
00:02:13,530 --> 00:02:15,670
be added to the staging environment.

44
00:02:15,670 --> 00:02:18,090
This is file1.txt.

45
00:02:18,090 --> 00:02:19,250
If we wanted to add it,

46
00:02:19,250 --> 00:02:23,190
we could use the git add command, and then we'd have to specify the name of

47
00:02:23,190 --> 00:02:27,740
the file that we wanted to add, in this case, file1.txt.

48
00:02:27,740 --> 00:02:30,940
Now, if we had multiple files in here and we wanted to add them all,

49
00:02:30,940 --> 00:02:34,640
we could also use git add dot, or git add period.

50
00:02:34,640 --> 00:02:34,820
Now,

51
00:02:34,820 --> 00:02:37,700
this would add every single file to the staging environment.

52
00:02:37,700 --> 00:02:41,630
And you'll notice if I do git status again, we now have a

53
00:02:41,630 --> 00:02:45,640
file that's ready to be committed, so let's go ahead and commit it.

54
00:02:45,640 --> 00:02:51,940
We'll use git commit, and then we'll pass a git message with a ‑m flag.

55
00:02:51,940 --> 00:02:55,490
This will allow us to specify the message that's associated with

56
00:02:55,490 --> 00:02:58,410
this file. And if we're making specific changes,

57
00:02:58,410 --> 00:03:01,470
this will let developers know what's happening inside of the file

58
00:03:01,470 --> 00:03:04,760
and why you're making changes. In this case, we'll just call this

59
00:03:04,760 --> 00:03:09,540
first commit. Now that we've done this, we'll have a commit history

60
00:03:09,540 --> 00:03:12,990
for our local repository, and we could make more changes and

61
00:03:12,990 --> 00:03:14,340
continue to iterate.

62
00:03:14,340 --> 00:03:15,210
So, for example,

63
00:03:15,210 --> 00:03:17,970
if we wanted this text to be fixed and be a little bit more

64
00:03:17,970 --> 00:03:22,650
formal, we could type out Hello and Welcome Everyone! And then we

65
00:03:22,650 --> 00:03:26,300
could save this file, and we could go through this process again.

66
00:03:26,300 --> 00:03:29,970
Go back to the command line, git status to see what's going on.

67
00:03:29,970 --> 00:03:30,500
Currently,

68
00:03:30,500 --> 00:03:34,960
we have to add file1.txt to our staging environment because it hasn't been

69
00:03:34,960 --> 00:03:39,360
added yet, and then we could commit it with git commit ‑m.

70
00:03:39,360 --> 00:03:44,040
In this case, our message might be something like Formalize the greeting.

71
00:03:44,040 --> 00:03:48,900
Now, this is going to allow us to tell what we're changing inside of Git history.

72
00:03:48,900 --> 00:03:53,600
So let me clear this screen here, and let's use a new command called git log.

73
00:03:53,600 --> 00:03:56,900
This will log out all the commits for our repository.

74
00:03:56,900 --> 00:03:59,620
You'll notice if I make this section of the screen a little bit

75
00:03:59,620 --> 00:04:03,200
bigger, then it's going to tell us every commit we've committed

76
00:04:03,200 --> 00:04:07,170
in this repository. It will also give them a unique hash for

77
00:04:07,170 --> 00:04:08,380
each of those commits.

78
00:04:08,380 --> 00:04:12,840
So, we have our first commit and then where we formalize the greeting. Later on,

79
00:04:12,840 --> 00:04:13,700
when working with Git,

80
00:04:13,700 --> 00:04:18,040
we could go back to earlier versions that contain the changes that we want. In

81
00:04:18,040 --> 00:04:21,740
order to get out of the git log, you can press Q for quit.

82
00:04:21,740 --> 00:04:23,260
And now that you're out of the git log,

83
00:04:23,260 --> 00:04:26,230
you've just used Git for the first time successfully. We'll be using

84
00:04:26,230 --> 00:04:33,000
all of these basic skills in later demos when we work with all the developer tools that we'll need in this course.

