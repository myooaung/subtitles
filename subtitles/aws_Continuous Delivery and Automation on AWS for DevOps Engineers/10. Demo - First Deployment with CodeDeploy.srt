1
00:00:01,040 --> 00:00:02,990
Now that our ECS service is created,

2
00:00:02,990 --> 00:00:06,740
we'll move on to step eight where we create our CodeDeploy app.

3
00:00:06,740 --> 00:00:09,790
We could do this in the AWS console, but for consistency,

4
00:00:09,790 --> 00:00:12,340
I'm just going to do it through the AWS CLI.

5
00:00:12,340 --> 00:00:15,290
We'll copy this command here that'll create an application

6
00:00:15,290 --> 00:00:17,940
with the name of tutorial‑bluegreen‑app.

7
00:00:17,940 --> 00:00:21,310
We'll paste this into our command line, and then we'll copy our applicationId,

8
00:00:21,310 --> 00:00:25,440
as this is another one of those values that we'll be using later on.

9
00:00:25,440 --> 00:00:28,580
Next, we'll skip on to step nine.

10
00:00:28,580 --> 00:00:29,540
Inside of here,

11
00:00:29,540 --> 00:00:34,890
we should be able to create a bucket that will host our appspec.yml file.

12
00:00:34,890 --> 00:00:38,860
And this will point to the TASK_DEFINITION_ARN that we got from earlier,

13
00:00:38,860 --> 00:00:40,810
as well as having a container name,

14
00:00:40,810 --> 00:00:45,470
which we already included in that task definition and the container port,

15
00:00:45,470 --> 00:00:47,240
which we also included there.

16
00:00:47,240 --> 00:00:49,710
So we only need to update one thing inside of here,

17
00:00:49,710 --> 00:00:52,100
which is the TASK_DEFINITION_ARN.

18
00:00:52,100 --> 00:00:56,260
We'll replace that with the TASK_DEFINITION_ARN we got from earlier.

19
00:00:56,260 --> 00:00:58,150
Now, this should be the first one,

20
00:00:58,150 --> 00:01:01,200
but we'll be creating a second TASK_DEFINITION_ARN later

21
00:01:01,200 --> 00:01:03,410
on and using that in a later section.

22
00:01:03,410 --> 00:01:03,830
Right now,

23
00:01:03,830 --> 00:01:07,670
this one should have a :1 at the end of it because it's the first

24
00:01:07,670 --> 00:01:10,840
version of this task definition that we created.

25
00:01:10,840 --> 00:01:12,630
Next, we'll go to the command section,

26
00:01:12,630 --> 00:01:16,650
and we'll upload the appspec.yml file to our own S3 bucket.

27
00:01:16,650 --> 00:01:18,990
We'll create a new one just for this purpose.

28
00:01:18,990 --> 00:01:22,480
So I'm going to use the aws S3 mb, or make bucket,

29
00:01:22,480 --> 00:01:27,740
command, and then I'll pass an s3:// for the S3 prefix here.

30
00:01:27,740 --> 00:01:28,890
Then, for my case,

31
00:01:28,890 --> 00:01:30,820
I'm going to call this bucket something like

32
00:01:30,820 --> 00:01:34,220
fernando‑unicorn for my favorite animal,

33
00:01:34,220 --> 00:01:37,740
and then I'll have some gibberish letters and numbers at the end of it.

34
00:01:37,740 --> 00:01:40,650
You'll need to create a unique bucket name for you,

35
00:01:40,650 --> 00:01:44,240
so it won't be able to be the same as this bucket name here.

36
00:01:44,240 --> 00:01:46,630
Make sure that you use your name, your favorite animal,

37
00:01:46,630 --> 00:01:48,940
and some of your own unique letters and numbers.

38
00:01:48,940 --> 00:01:49,570
I'll hit Enter,

39
00:01:49,570 --> 00:01:53,680
and then we should have this bucket created so we can copy it into our

40
00:01:53,680 --> 00:01:58,080
output_values.txt file right underneath UNIQUE_BUCKET_NAME.

41
00:01:58,080 --> 00:01:58,990
From there,

42
00:01:58,990 --> 00:02:02,580
we should be able to upload the appspec.yml file from

43
00:02:02,580 --> 00:02:06,420
the p9 folder here into our S3 bucket.

44
00:02:06,420 --> 00:02:09,210
So let's replace this part of the command here with our

45
00:02:09,210 --> 00:02:11,340
bucket name and copy the entire thing.

46
00:02:11,340 --> 00:02:13,760
And then because I'm in the p8 folder now,

47
00:02:13,760 --> 00:02:15,770
which is where we started in this section,

48
00:02:15,770 --> 00:02:17,520
we'll need to change directories up,

49
00:02:17,520 --> 00:02:21,040
and then we'll change directories into the p9 folder.

50
00:02:21,040 --> 00:02:25,840
And as you can see, that has the commands.txt file and the appspec.yml file.

51
00:02:25,840 --> 00:02:26,970
So let's clear this screen,

52
00:02:26,970 --> 00:02:31,040
and let's copy this appspec.yml file into our S3 bucket.

53
00:02:31,040 --> 00:02:36,080
With this done, we have our appspec.yml set up to use for our first deployment.

54
00:02:36,080 --> 00:02:39,950
So we can go to p10 for using CodeDeploy.

55
00:02:39,950 --> 00:02:41,960
Now these instructions will guide you through everything

56
00:02:41,960 --> 00:02:44,060
I'm about to do in the AWS console.

57
00:02:44,060 --> 00:02:46,790
You'll essentially be clicking a bunch of different sections of the

58
00:02:46,790 --> 00:02:51,120
CodeDeploy console in order to integrate that appspec.yml file we just put

59
00:02:51,120 --> 00:02:54,050
in S3 with everything in the CodeDeploy console.

60
00:02:54,050 --> 00:02:57,800
So I'll go over to the AWS console now, go over to the Services section,

61
00:02:57,800 --> 00:03:00,140
and let's look for CodeDeploy.

62
00:03:00,140 --> 00:03:01,630
We'll go to that section of the console,

63
00:03:01,630 --> 00:03:04,740
and we'll click on the Applications section.

64
00:03:04,740 --> 00:03:07,250
Here, we should have the application we just created,

65
00:03:07,250 --> 00:03:08,760
which we can click on there.

66
00:03:08,760 --> 00:03:13,440
And now we need to create a deployment group, so let's click that button here.

67
00:03:13,440 --> 00:03:17,640
Once we're in this section, we can give this deployment group a name.

68
00:03:17,640 --> 00:03:22,410
Let's call this ecs‑demo‑dg for deployment group,

69
00:03:22,410 --> 00:03:24,310
and then we need to give it a service role.

70
00:03:24,310 --> 00:03:26,910
We should see our service role that we created in the very

71
00:03:26,910 --> 00:03:30,060
first step of this demo appear here, so we can click that.

72
00:03:30,060 --> 00:03:32,620
Go to the ECS cluster, and our cluster should appear.

73
00:03:32,620 --> 00:03:34,750
Make sure you're using the one we created in this demo

74
00:03:34,750 --> 00:03:36,540
just in case you have more than one,

75
00:03:36,540 --> 00:03:39,440
and then we'll use the service inside of that cluster.

76
00:03:39,440 --> 00:03:41,410
From here, we'll click on a load balancer.

77
00:03:41,410 --> 00:03:44,850
I'll be using the bluegreen‑alb, which we created earlier,

78
00:03:44,850 --> 00:03:49,140
and the Production listener port should be HTTP:80.

79
00:03:49,140 --> 00:03:51,010
We'll skip the Test listener section,

80
00:03:51,010 --> 00:03:54,820
and we'll go straight to the Target group 1 and Target group 2 configuration.

81
00:03:54,820 --> 00:03:57,700
Both of these target groups we created earlier should appear,

82
00:03:57,700 --> 00:03:59,740
and then we're onto the deployment settings.

83
00:03:59,740 --> 00:04:03,570
For this deployment, we're going to use the Reroute traffic immediately option,

84
00:04:03,570 --> 00:04:04,650
and we're going to leave the

85
00:04:04,650 --> 00:04:08,840
CodeDeployDefault.ECSAllAtOnce deployment configuration selected.

86
00:04:08,840 --> 00:04:12,580
We will need to definitely change the time it takes for this

87
00:04:12,580 --> 00:04:16,250
deployment to finish from 1 hour to 5 minutes.

88
00:04:16,250 --> 00:04:16,980
Basically,

89
00:04:16,980 --> 00:04:20,840
we're reducing the time it takes to delete the original task set

90
00:04:20,840 --> 00:04:23,420
when we're doing these deployments so we don't have to wait for an

91
00:04:23,420 --> 00:04:25,740
hour before we can do a second deployment.

92
00:04:25,740 --> 00:04:29,080
So now that we're done with this, let's click the Create deployment group,

93
00:04:29,080 --> 00:04:33,640
and then let's create a deployment with this deployment group.

94
00:04:33,640 --> 00:04:34,500
Now that we've done this,

95
00:04:34,500 --> 00:04:38,330
we'll be able to select the S3 file location for the

96
00:04:38,330 --> 00:04:40,560
appspec.yml file we just uploaded.

97
00:04:40,560 --> 00:04:41,750
Now if we don't know what this is,

98
00:04:41,750 --> 00:04:44,510
we can go back to where we just ran the command.

99
00:04:44,510 --> 00:04:49,990
We'll need to copy everything from the beginning of the s3:// all the way to

100
00:04:49,990 --> 00:04:53,440
the end of the appspec.yml, and we can paste it in here.

101
00:04:53,440 --> 00:04:56,570
Really, it should just be the name of our bucket and then a / and

102
00:04:56,570 --> 00:05:01,380
the appspec.yml all following the s3:// prefix.

103
00:05:01,380 --> 00:05:05,490
The final step will be to select the .yml revision file type after

104
00:05:05,490 --> 00:05:09,340
we've pasted in the URL for our revision location, and then we can

105
00:05:09,340 --> 00:05:13,280
click Create deployment. From here, this should start our very first

106
00:05:13,280 --> 00:05:16,550
CodeDeploy deployment, and we can see the status of this deployment

107
00:05:16,550 --> 00:05:18,390
right now is in progress.

108
00:05:18,390 --> 00:05:22,090
It will go through the process of creating all the containers inside of

109
00:05:22,090 --> 00:05:26,280
our ECS cluster and then moving the application through the steps that it

110
00:05:26,280 --> 00:05:28,740
needs to get everything deployed properly.

111
00:05:28,740 --> 00:05:29,230
Now right now,

112
00:05:29,230 --> 00:05:31,740
if we take a moment and go to the Services drop‑down and look

113
00:05:31,740 --> 00:05:35,410
for EC2, we should be able to see some of the services that are

114
00:05:35,410 --> 00:05:38,540
actually being worked with here. Specifically, if we go to the

115
00:05:38,540 --> 00:05:39,850
Load balancers section,

116
00:05:39,850 --> 00:05:42,780
I only have one load balancer right now, which is related

117
00:05:42,780 --> 00:05:44,740
to the application we're deploying.

118
00:05:44,740 --> 00:05:47,580
So if I copy this DNS name for the load balancer and

119
00:05:47,580 --> 00:05:50,320
paste it into my browser here, you can see that we have

120
00:05:50,320 --> 00:05:52,630
this ECS service up and running,

121
00:05:52,630 --> 00:05:56,740
and it's been successfully deployed inside of ECS using CodeDeploy.

122
00:05:56,740 --> 00:06:00,700
Now if we wanted to change this to a new version of the application,

123
00:06:00,700 --> 00:06:02,140
we could do that, too.

124
00:06:02,140 --> 00:06:06,470
So let's go back to the management console here and go back over to our

125
00:06:06,470 --> 00:06:10,660
CodeDeploy section, as we'll be doing one more thing here. We can find

126
00:06:10,660 --> 00:06:14,680
CodeDeploy in the drop‑down here and review the rest of the application

127
00:06:14,680 --> 00:06:15,930
deployment that we just did.

128
00:06:15,930 --> 00:06:17,590
It looks like it's still in progress,

129
00:06:17,590 --> 00:06:20,530
so it's still shifting the traffic from the original

130
00:06:20,530 --> 00:06:22,550
task set to the replacement task set.

131
00:06:22,550 --> 00:06:25,630
It's a little bit weird for this first deployment because,

132
00:06:25,630 --> 00:06:28,930
technically, we're deploying the initial deployment,

133
00:06:28,930 --> 00:06:31,540
and then we're deploying the replacement deployment,

134
00:06:31,540 --> 00:06:33,140
and it's the exact same thing.

135
00:06:33,140 --> 00:06:35,150
But in subsequent deployments, we'll be able to tell

136
00:06:35,150 --> 00:06:37,640
the difference between the two.

137
00:06:37,640 --> 00:06:40,740
If you scroll a little bit further down in this deployment section,

138
00:06:40,740 --> 00:06:43,920
you'll see we have this process taking place where we have all the traffic

139
00:06:43,920 --> 00:06:48,830
on the original primary task set, and currently, the Desired count of ECS

140
00:06:48,830 --> 00:06:51,610
instances there is 1, and the Running count is 1,

141
00:06:51,610 --> 00:06:55,200
and we also have the replacement task set that is currently active.

142
00:06:55,200 --> 00:06:57,640
Eventually, we'll switch some of that traffic over,

143
00:06:57,640 --> 00:07:00,540
and this process will complete.

144
00:07:00,540 --> 00:07:02,130
After waiting for a few minutes,

145
00:07:02,130 --> 00:07:05,460
our traffic should've shifted to our replacement task set.

146
00:07:05,460 --> 00:07:08,410
So we can see it moved over from the original environment to

147
00:07:08,410 --> 00:07:09,910
the replacement environment.

148
00:07:09,910 --> 00:07:14,230
Now when this happened, it moved over from 0 to 100 right away,

149
00:07:14,230 --> 00:07:17,380
and then it immediately went into the next step in step three,

150
00:07:17,380 --> 00:07:21,540
which is waiting for 5 minutes before it removes the original test set.

151
00:07:21,540 --> 00:07:22,970
Once this process completes,

152
00:07:22,970 --> 00:07:26,200
it will remove everything in the original task set so we don't have to

153
00:07:26,200 --> 00:07:29,140
keep managing that infrastructure or paying for it.

154
00:07:29,140 --> 00:07:32,420
But what if we wanted to take this same sort of deployment,

155
00:07:32,420 --> 00:07:37,340
but only shift over a few pieces of the traffic as it goes through?

156
00:07:37,340 --> 00:07:39,160
Well, we'll do that in the next section,

157
00:07:39,160 --> 00:07:41,770
but make sure before going on to that that you wait for this

158
00:07:41,770 --> 00:07:45,710
deployment to complete and wait for the original set of tasks

159
00:07:45,710 --> 00:07:55,000
to be removed by CodeDeploy. Once CodeDeploy is finished, It should look something like this.

