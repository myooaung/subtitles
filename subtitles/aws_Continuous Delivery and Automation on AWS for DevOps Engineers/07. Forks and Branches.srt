1
00:00:01,040 --> 00:00:06,040
Let's look at two more concepts related to Git, forks and branches.

2
00:00:06,040 --> 00:00:08,900
There's a few common use cases when we're using forks,

3
00:00:08,900 --> 00:00:12,190
which are essentially just copies of our repository that

4
00:00:12,190 --> 00:00:14,940
we control instead of somebody else.

5
00:00:14,940 --> 00:00:18,160
Now these commonly come up using GitHub when you're

6
00:00:18,160 --> 00:00:20,130
working with open‑source projects,

7
00:00:20,130 --> 00:00:23,140
and GitHub is just a place where you store a lot of your code.

8
00:00:23,140 --> 00:00:26,270
You can propose changes using forks without any

9
00:00:26,270 --> 00:00:28,780
permissions on the original repository,

10
00:00:28,780 --> 00:00:31,670
and this can be very helpful when you want to propose

11
00:00:31,670 --> 00:00:34,230
changes using something called pull requests.

12
00:00:34,230 --> 00:00:37,040
It integrates pretty effectively when you have projects you

13
00:00:37,040 --> 00:00:39,400
don't want to give permissions to everybody on,

14
00:00:39,400 --> 00:00:41,930
to change or to do specific actions on,

15
00:00:41,930 --> 00:00:44,140
but you still want to allow people to see it,

16
00:00:44,140 --> 00:00:47,990
to copy your code, and make their own changes and eventually integrate them.

17
00:00:47,990 --> 00:00:52,640
And you can sync your forks with the original remote repository.

18
00:00:52,640 --> 00:00:55,570
Now there's two different names when it comes to forks

19
00:00:55,570 --> 00:00:57,940
that'll come up pretty frequently.

20
00:00:57,940 --> 00:01:00,000
The first is upstream.

21
00:01:00,000 --> 00:01:02,070
Now usually when you're dealing with forks,

22
00:01:02,070 --> 00:01:06,960
upstream is the original remote repository; then there's also origin,

23
00:01:06,960 --> 00:01:11,340
which is usually the fork that you yourself are working on that you own

24
00:01:11,340 --> 00:01:14,540
inside of your own account on something like GitHub.

25
00:01:14,540 --> 00:01:16,360
Now you can have other names for forks,

26
00:01:16,360 --> 00:01:18,820
but these are two of the most common ones you'll see.

27
00:01:18,820 --> 00:01:21,240
Let's look at a forking workflow.

28
00:01:21,240 --> 00:01:23,740
Imagine you have an upstream remote repository,

29
00:01:23,740 --> 00:01:25,790
which has all the code that we want to work with.

30
00:01:25,790 --> 00:01:29,220
The first thing you'd do is you'd fork that repository and create

31
00:01:29,220 --> 00:01:31,920
your own version of that upstream repository.

32
00:01:31,920 --> 00:01:32,480
Usually,

33
00:01:32,480 --> 00:01:35,090
this will eventually be called origin on your local file

34
00:01:35,090 --> 00:01:36,770
system when you're working with Git.

35
00:01:36,770 --> 00:01:41,340
Then you'd clone the origin repository to your development environment,

36
00:01:41,340 --> 00:01:44,230
and you'd start working with it the same way you would before,

37
00:01:44,230 --> 00:01:47,810
adding files in your working directory, Git adding them to the staging area,

38
00:01:47,810 --> 00:01:50,240
Git committing them to your local repository,

39
00:01:50,240 --> 00:01:54,740
and then Git pushing them up to the origin when you're done making changes.

40
00:01:54,740 --> 00:01:57,240
Now this process will have one additional step.

41
00:01:57,240 --> 00:01:59,350
Once you've pushed your changes to the origin,

42
00:01:59,350 --> 00:02:02,520
you'll open up something called a pull request to the upstream

43
00:02:02,520 --> 00:02:05,740
repository to integrate your changes there.

44
00:02:05,740 --> 00:02:09,080
This will allow the maintainers of the upstream repository to take

45
00:02:09,080 --> 00:02:12,310
a look at all the proposals that you're making and integrate them

46
00:02:12,310 --> 00:02:15,140
or ask for some additional changes.

47
00:02:15,140 --> 00:02:17,650
So let's look at pull requests a little bit more.

48
00:02:17,650 --> 00:02:19,860
These will be integrated with repository hosting

49
00:02:19,860 --> 00:02:21,930
tools like CodeCommit and GitHub,

50
00:02:21,930 --> 00:02:24,330
and they can trigger things like automated builds,

51
00:02:24,330 --> 00:02:26,660
test code, and report results.

52
00:02:26,660 --> 00:02:29,010
They're also going to allow you to do things like converse

53
00:02:29,010 --> 00:02:30,310
about the code that you're proposing,

54
00:02:30,310 --> 00:02:34,660
and review each line of code potentially with inline comments to talk

55
00:02:34,660 --> 00:02:37,870
back and forth about the benefits or the drawbacks of specific things

56
00:02:37,870 --> 00:02:40,340
that you're doing inside of your code.

57
00:02:40,340 --> 00:02:43,130
We'll be using pull requests later on in order to do a lot

58
00:02:43,130 --> 00:02:46,140
of these things here with AWS CodeCommit.

59
00:02:46,140 --> 00:02:49,970
Another important concept we'll need to understand is working with branches.

60
00:02:49,970 --> 00:02:53,220
Now it's common that you'll have a remote repository and a

61
00:02:53,220 --> 00:02:56,130
branch that's the default branch that you're merging the code

62
00:02:56,130 --> 00:02:58,270
into on that remote repository.

63
00:02:58,270 --> 00:03:01,270
And you'll see this frequently called either main or master,

64
00:03:01,270 --> 00:03:04,240
though main is becoming the normal convention nowadays.

65
00:03:04,240 --> 00:03:06,720
Now you'll do the exact same things you were doing before where

66
00:03:06,720 --> 00:03:09,250
you'll clone the code from the remote repository.

67
00:03:09,250 --> 00:03:13,120
The only difference is I kind of skimmed over the details of using branches.

68
00:03:13,120 --> 00:03:14,760
In all the previous examples,

69
00:03:14,760 --> 00:03:17,570
we only really had one branch that we were working with,

70
00:03:17,570 --> 00:03:19,600
and I obscured it behind the scenes.

71
00:03:19,600 --> 00:03:20,150
However,

72
00:03:20,150 --> 00:03:23,800
you could also use multiple branches to make sure that all the changes

73
00:03:23,800 --> 00:03:26,240
that you're working on are discrete from one another,

74
00:03:26,240 --> 00:03:28,420
and that you're not stomping on other people's toes

75
00:03:28,420 --> 00:03:30,140
when you're merging code around.

76
00:03:30,140 --> 00:03:33,080
So, for example, after you've cloned your local repository,

77
00:03:33,080 --> 00:03:37,210
you might then take it from main and change it to a new branch.

78
00:03:37,210 --> 00:03:40,690
You can do this using a command called checkout or checkout ‑b,

79
00:03:40,690 --> 00:03:43,440
which would create a new branch at the same time as

80
00:03:43,440 --> 00:03:45,540
you're actually switching to it.

81
00:03:45,540 --> 00:03:48,760
So in this case, we're checking out a new branch called my‑feature,

82
00:03:48,760 --> 00:03:51,810
and we'd have the exact same code on both branches,

83
00:03:51,810 --> 00:03:55,560
but we'd then be able to work on it independently of the main branch.

84
00:03:55,560 --> 00:03:58,360
So if we wanted to add files to our working directory,

85
00:03:58,360 --> 00:03:59,390
we could do this,

86
00:03:59,390 --> 00:04:02,970
and then we could add them to the staging area again, and then add

87
00:04:02,970 --> 00:04:06,440
them by committing them to the my‑feature branch.

88
00:04:06,440 --> 00:04:07,620
Now, later on,

89
00:04:07,620 --> 00:04:11,720
we could push this feature up into a remote repository with git push

90
00:04:11,720 --> 00:04:15,580
origin my‑feature, and this would allow us to have this feature

91
00:04:15,580 --> 00:04:17,880
branch be then merged into the main branch,

92
00:04:17,880 --> 00:04:21,990
thus keeping any specific changes we did for a particular feature separate

93
00:04:21,990 --> 00:04:25,490
from other changes others might be working on. Now this would look a little

94
00:04:25,490 --> 00:04:28,120
bit different from the fork workflow we had before,

95
00:04:28,120 --> 00:04:31,140
because there's only one remote, but we have two different branches.

96
00:04:31,140 --> 00:04:32,740
We could still have a pull request,

97
00:04:32,740 --> 00:04:36,490
then merge the changes from my‑feature to main, and then those

98
00:04:36,490 --> 00:04:40,140
files would be present on that same main branch.

99
00:04:40,140 --> 00:04:43,730
After we merge the changes in, the pull request will typically close,

100
00:04:43,730 --> 00:04:47,360
and then we can also remove the feature branch from the remote repository,

101
00:04:47,360 --> 00:04:50,710
because we've already merged those changes into the main branch.

102
00:04:50,710 --> 00:04:51,560
Similarly,

103
00:04:51,560 --> 00:04:55,380
we might then take the code from the main branch and git pull it down from the

104
00:04:55,380 --> 00:05:00,260
main branch to update the files we have on our local main branch, and because we

105
00:05:00,260 --> 00:05:04,440
already merged all the changes from my feature, we then also delete that local

106
00:05:04,440 --> 00:05:06,740
branch on our development environment.

107
00:05:06,740 --> 00:05:08,750
So while this seems a bit complicated,

108
00:05:08,750 --> 00:05:11,640
let's look at some of the benefits we get from feature branching.

109
00:05:11,640 --> 00:05:14,440
One of the first ones is that the history of changes are

110
00:05:14,440 --> 00:05:16,850
now tied to a specific new feature.

111
00:05:16,850 --> 00:05:20,610
So we see that pull request from us merging in those changes,

112
00:05:20,610 --> 00:05:23,040
and it's tied to a specific feature name that might have a

113
00:05:23,040 --> 00:05:26,450
particular project or set of tickets tracking the work that

114
00:05:26,450 --> 00:05:28,640
we're doing in there, associated with it.

115
00:05:28,640 --> 00:05:32,940
We can also then squash commits to make a clean commit history.

116
00:05:32,940 --> 00:05:35,310
Now this means that we kind of fudge all the work that we've

117
00:05:35,310 --> 00:05:38,230
been doing, if we've been making multiple iterative commits on a

118
00:05:38,230 --> 00:05:41,670
feature branch. Say it took us 16 commits to get the code where

119
00:05:41,670 --> 00:05:43,480
we wanted it to go, well,

120
00:05:43,480 --> 00:05:46,920
we could then have all of the code in that state on the feature branch

121
00:05:46,920 --> 00:05:50,640
be merged into the main branch with just one commit.

122
00:05:50,640 --> 00:05:55,040
Additionally, pull requests can be focused on those new features this way,

123
00:05:55,040 --> 00:05:57,660
and this will allow us to merge everything into

124
00:05:57,660 --> 00:05:59,500
main all at once for that feature,

125
00:05:59,500 --> 00:06:03,140
rather than every single step we took to get there.

126
00:06:03,140 --> 00:06:09,000
Later on, we'll be using feature branching as we integrate it with our developer tools.

