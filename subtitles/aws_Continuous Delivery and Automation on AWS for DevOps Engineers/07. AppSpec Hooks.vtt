WEBVTT
1
00:00:01.040 --> 00:00:04.550
AppSpec hooks are something that allow us to customize the deployment of

2
00:00:04.550 --> 00:00:07.940
our applications at different stages in their deployment.

3
00:00:07.940 --> 00:00:10.290
So when we're working with AppSpec hooks,

4
00:00:10.290 --> 00:00:14.490
there's two kinds of things we might call hooks in our deployment process.

5
00:00:14.490 --> 00:00:18.780
The first applies when we're working with EC2 or on‑premises deployments.

6
00:00:18.780 --> 00:00:21.710
These are going to be links to scripts that we run during

7
00:00:21.710 --> 00:00:24.110
different deployment lifecycle events, so,

8
00:00:24.110 --> 00:00:27.740
for example, an installation script or a post deployment script,

9
00:00:27.740 --> 00:00:30.940
whereas when we're working with Lambda or ECS deployments,

10
00:00:30.940 --> 00:00:34.430
we're going to reference Lambda functions that will validate our

11
00:00:34.430 --> 00:00:38.250
deployments in different ways, not have custom scripts running

12
00:00:38.250 --> 00:00:40.740
against our deployments are doing any setup.

13
00:00:40.740 --> 00:00:43.370
So let's look at some example hooks when we're working with

14
00:00:43.370 --> 00:00:46.400
Lambda deployments. Then we'll look at particular things

15
00:00:46.400 --> 00:00:49.320
that are allowed at those steps, for example,

16
00:00:49.320 --> 00:00:50.130
at particular steps,

17
00:00:50.130 --> 00:00:53.690
we might have a rollback be allowed or not allowed. With the

18
00:00:53.690 --> 00:00:57.070
BeforeAllowTraffic section of Lambda deployments, we can validate

19
00:00:57.070 --> 00:00:59.400
the function has been deployed correctly,

20
00:00:59.400 --> 00:01:00.190
and if it hasn't,

21
00:01:00.190 --> 00:01:04.120
we can roll it back. In the AfterAllowTraffic section, we can

22
00:01:04.120 --> 00:01:07.130
validate that the function is behaving as expected and it's

23
00:01:07.130 --> 00:01:10.330
continuing to serve traffic as normal. And both of these could be

24
00:01:10.330 --> 00:01:13.190
used to roll back our deployment if there's something that's going

25
00:01:13.190 --> 00:01:19.220
wrong. In the ECS deployment scenario, we have a before installation step,

26
00:01:19.220 --> 00:01:21.670
which would allow us to run Lambda functions before the

27
00:01:21.670 --> 00:01:23.770
replacement task that is created.

28
00:01:23.770 --> 00:01:26.350
But this won't allow us to do any rollbacks.

29
00:01:26.350 --> 00:01:29.340
We can do rollbacks in the after installation step,

30
00:01:29.340 --> 00:01:32.500
which would run a Lambda function after the replacement task set is

31
00:01:32.500 --> 00:01:35.240
created and a target group is associated there.

32
00:01:35.240 --> 00:01:37.210
And if you're not very familiar with ECS,

33
00:01:37.210 --> 00:01:40.080
don't worry, these are just different steps and different pieces of

34
00:01:40.080 --> 00:01:43.140
ECS that we could work with during this process.

35
00:01:43.140 --> 00:01:46.180
There's additional steps after the AfterInstall step,

36
00:01:46.180 --> 00:01:50.840
though. There's also an AfterAllowTestTraffic and a BeforeAllowTraffic

37
00:01:50.840 --> 00:01:54.620
step, and both of these allow us to run Lambda functions at different

38
00:01:54.620 --> 00:01:58.400
points of the deployment process. With AfterAllowTestTraffic, after the

39
00:01:58.400 --> 00:02:02.020
replacement task set starts getting traffic from a test listener and the

40
00:02:02.020 --> 00:02:06.270
BeforeAllowTraffic step is after the replacement task set is associated

41
00:02:06.270 --> 00:02:07.940
with the second target group,

42
00:02:07.940 --> 00:02:11.040
and it's about to start getting real traffic. And finally,

43
00:02:11.040 --> 00:02:14.990
there's a last step here in the AfterAllowTraffic section,

44
00:02:14.990 --> 00:02:18.660
which will run a Lambda function after the replacement task set starts

45
00:02:18.660 --> 00:02:22.040
getting real traffic from the second target group, basically,

46
00:02:22.040 --> 00:02:26.650
when you start setting it live in production. In any of these three steps,

47
00:02:26.650 --> 00:02:29.830
you can roll back to an earlier version if you test and

48
00:02:29.830 --> 00:02:32.240
see that something is going wrong.

49
00:02:32.240 --> 00:02:35.360
There's also lifecycle hooks for in‑place deployments.

50
00:02:35.360 --> 00:02:37.670
When we're working with classic load balancers,

51
00:02:37.670 --> 00:02:41.090
they start at the BeforeBlockTraffic section and then go through

52
00:02:41.090 --> 00:02:44.460
a BlockTraffic and an AfterBlockTraffic step.

53
00:02:44.460 --> 00:02:44.670
Now,

54
00:02:44.670 --> 00:02:47.200
when we're not using a classic load balancer, we

55
00:02:47.200 --> 00:02:50.240
actually start at the ApplicationStop step,

56
00:02:50.240 --> 00:02:52.630
and then we go through several other steps throughout this

57
00:02:52.630 --> 00:02:55.680
deployment process. At any of these blue sections,

58
00:02:55.680 --> 00:02:58.090
we can write our own custom scripts to do things that'll

59
00:02:58.090 --> 00:02:59.950
help us with this deployment process.

60
00:02:59.950 --> 00:03:00.470
Now,

61
00:03:00.470 --> 00:03:03.660
when we're not working with in‑place deployments and we're working with

62
00:03:03.660 --> 00:03:07.620
blue/green deployments in EC2, there's a few different steps that happen

63
00:03:07.620 --> 00:03:11.160
on the original set of instances and on the replacement set of

64
00:03:11.160 --> 00:03:14.900
instances. And if you see how we start at the top right here with the

65
00:03:14.900 --> 00:03:19.350
ApplicationStop step, this will start the process on our replacement

66
00:03:19.350 --> 00:03:21.040
environment instances.

67
00:03:21.040 --> 00:03:24.220
And then it will go through the process of downloading information,

68
00:03:24.220 --> 00:03:28.080
doing a PreInstall step, an AfterInstall step, and several other steps

69
00:03:28.080 --> 00:03:31.870
to start the service, validate it, and allow traffic. Eventually, once

70
00:03:31.870 --> 00:03:34.180
we get to the AfterAllowTraffic section,

71
00:03:34.180 --> 00:03:38.640
so our green application, version 2 of our application starts getting traffic.

72
00:03:38.640 --> 00:03:42.340
We can then start a BeforeBlockTraffic section on our original

73
00:03:42.340 --> 00:03:46.650
instance, so something right before we stop allowing traffic to our

74
00:03:46.650 --> 00:03:49.350
original, or are blue version of our application.

75
00:03:49.350 --> 00:03:51.630
Then we block the traffic from that instance,

76
00:03:51.630 --> 00:03:55.370
and we have an AfterBlockTraffic step before we finish this blue/green

77
00:03:55.370 --> 00:03:59.400
deployment. And in many of these steps we have the chance to roll back

78
00:03:59.400 --> 00:04:02.540
into the earlier version of the application or to run our own custom

79
00:04:02.540 --> 00:04:06.240
scripts to help assist with this process of installing the application

80
00:04:06.240 --> 00:04:07.840
and switching over.

81
00:04:07.840 --> 00:04:10.310
So I know this is a bit of a mouthful for each of

82
00:04:10.310 --> 00:04:11.980
these different lifecycle hooks.

83
00:04:11.980 --> 00:04:15.770
What I would say for these different hooks is that when you're working in a

84
00:04:15.770 --> 00:04:19.240
production environment you'll probably be only working with one,

85
00:04:19.240 --> 00:04:22.140
maybe two of these platforms, and if you're working with CodeDeploy,

86
00:04:22.140 --> 00:04:24.270
you'll have time to learn them in a bit more detail.

87
00:04:24.270 --> 00:04:26.530
But if you're studying for an AWS exam,

88
00:04:26.530 --> 00:04:29.880
I definitely recommend peeking over these workflow

89
00:04:29.880 --> 00:04:32.260
diagrams and making sure that you understand,

90
00:04:32.260 --> 00:04:33.530
at least generally,

91
00:04:33.530 --> 00:04:36.310
how you work through these different steps to get to the

92
00:04:36.310 --> 00:04:42.000
ending of the deployment process, and what some of the possibilities are within each of these.

