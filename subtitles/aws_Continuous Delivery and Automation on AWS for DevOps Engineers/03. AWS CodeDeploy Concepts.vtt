WEBVTT
1
00:00:01.140 --> 00:00:05.340
Let's take a closer look at some concepts related to AWS CodeDeploy.

2
00:00:05.340 --> 00:00:08.010
Some of the first concepts we'll need to understand are that

3
00:00:08.010 --> 00:00:11.310
of an application and a compute platform.

4
00:00:11.310 --> 00:00:15.530
The application is the larger container for all of the configuration

5
00:00:15.530 --> 00:00:17.980
that we use when we're working with CodeDeploy.

6
00:00:17.980 --> 00:00:20.550
And the compute platform, like we discussed earlier,

7
00:00:20.550 --> 00:00:25.530
is either something like EC2, AWS Lambda or the Amazon ECS service or

8
00:00:25.530 --> 00:00:28.540
even on‑premises servers that we're deploying to.

9
00:00:28.540 --> 00:00:30.560
Now there's some other concepts we need to understand

10
00:00:30.560 --> 00:00:32.370
around deployment configuration.

11
00:00:32.370 --> 00:00:34.770
The first one is deployment rules.

12
00:00:34.770 --> 00:00:37.130
These will help determine the success or failure

13
00:00:37.130 --> 00:00:39.490
conditions of our deployments, for example,

14
00:00:39.490 --> 00:00:43.180
if we run tests to determine whether or not something has successfully

15
00:00:43.180 --> 00:00:47.320
deployed. We also have different kinds of deployment types.

16
00:00:47.320 --> 00:00:50.330
Now these could fall into different categories like an all at once

17
00:00:50.330 --> 00:00:54.110
deployment or a blue/green deployment, where all at once would simply

18
00:00:54.110 --> 00:00:57.120
change the traffic over on the same set of servers,

19
00:00:57.120 --> 00:01:00.970
immediately flipping it over to a new application, whereas a blue/green

20
00:01:00.970 --> 00:01:04.810
deployment would change the traffic between one set of infrastructure

21
00:01:04.810 --> 00:01:08.970
that's running the application to another set of infrastructure and then

22
00:01:08.970 --> 00:01:11.340
eventually retire the original.

23
00:01:11.340 --> 00:01:14.450
We also need to understand the concept of deployment groups,

24
00:01:14.450 --> 00:01:16.650
and these vary by the compute platform.

25
00:01:16.650 --> 00:01:20.560
But they could also be something like on‑premises instances, or if we're

26
00:01:20.560 --> 00:01:23.450
working with Lambda, different lambda function versions.

27
00:01:23.450 --> 00:01:26.600
Finally, they could also be things like ECS tasks,

28
00:01:26.600 --> 00:01:30.440
basically what we're targeting for our deployment and what's

29
00:01:30.440 --> 00:01:32.920
going to be running our code and eventually be switched

30
00:01:32.920 --> 00:01:35.340
between from one version to another.

31
00:01:35.340 --> 00:01:37.270
In addition to the compute platform,

32
00:01:37.270 --> 00:01:39.490
we also need to understand there's other configuration here,

33
00:01:39.490 --> 00:01:40.070
too.

34
00:01:40.070 --> 00:01:41.960
We might configure different rollbacks,

35
00:01:41.960 --> 00:01:45.320
depending on if something fails in our deployment or different triggers

36
00:01:45.320 --> 00:01:49.050
to trigger things in our deployment, as well as alarms, where we might

37
00:01:49.050 --> 00:01:52.570
have a notification when something goes correctly or incorrectly and

38
00:01:52.570 --> 00:01:56.370
then be notified of it usually through something like an Amazon Simple

39
00:01:56.370 --> 00:01:58.540
Notification Service topic.

40
00:01:58.540 --> 00:02:00.070
In addition to deployment groups,

41
00:02:00.070 --> 00:02:04.010
there's also the concept of revisions, and revisions change a little bit

42
00:02:04.010 --> 00:02:08.150
depending on the compute platform you're working with. With AWS Lambda,

43
00:02:08.150 --> 00:02:10.490
revisions are really just the AppSpec file,

44
00:02:10.490 --> 00:02:13.600
which we'll take a closer look at in a little bit. With Amazon

45
00:02:13.600 --> 00:02:16.540
ECS, they're also just the AppSpec file; however,

46
00:02:16.540 --> 00:02:20.770
with EC2 or on‑premises deployments, they're an archive with all

47
00:02:20.770 --> 00:02:23.940
the code you're deploying, as well as the AppSpec file so that

48
00:02:23.940 --> 00:02:27.010
you know how to proceed with the deployment of the code you're

49
00:02:27.010 --> 00:02:29.510
shipping to that service.

50
00:02:29.510 --> 00:02:32.230
Now let's look at two more concepts related to CodeDeploy.

51
00:02:32.230 --> 00:02:36.620
The first is repositories, and these can be things like Amazon S3 buckets,

52
00:02:36.620 --> 00:02:39.620
GitHub repositories, or Bitbucket repositories.

53
00:02:39.620 --> 00:02:42.590
And each of these allows us to have the source for the code

54
00:02:42.590 --> 00:02:45.070
that we're deploying into our application.

55
00:02:45.070 --> 00:02:47.240
So if we're moving code from GitHub,

56
00:02:47.240 --> 00:02:50.690
it could go into something like EC2, ECS, or Lambda.

57
00:02:50.690 --> 00:02:52.840
Now, in addition to repositories,

58
00:02:52.840 --> 00:02:55.290
we have to think about the permissions that are applied to

59
00:02:55.290 --> 00:02:58.040
everything in our CodeDeploy services.

60
00:02:58.040 --> 00:03:00.260
We could have the service role first,

61
00:03:00.260 --> 00:03:02.880
which is the role that's used by the CodeDeploy service

62
00:03:02.880 --> 00:03:05.710
itself to deploy our applications.

63
00:03:05.710 --> 00:03:07.940
And this would need permissions depending on the

64
00:03:07.940 --> 00:03:10.280
different platforms that we're working with.

65
00:03:10.280 --> 00:03:12.860
So if we are deploying our code to EC2, it would need

66
00:03:12.860 --> 00:03:15.800
permissions to act on EC2 and related services.

67
00:03:15.800 --> 00:03:18.550
But if we're deploying to AWS Lambda, it might need permissions

68
00:03:18.550 --> 00:03:21.740
to act on AWS Lambda and its related services.

69
00:03:21.740 --> 00:03:22.990
In addition to the service role,

70
00:03:22.990 --> 00:03:26.460
there's also something called an IAM instance profile.

71
00:03:26.460 --> 00:03:29.270
This will typically be used by EC2 instances to

72
00:03:29.270 --> 00:03:31.460
access where applications are stored.

73
00:03:31.460 --> 00:03:36.130
So if the EC2 instance needs to get information from Amazon S3, for example,

74
00:03:36.130 --> 00:03:39.340
it might need an instance profile to give it those permissions.

75
00:03:39.340 --> 00:03:41.310
But in addition to these two concepts,

76
00:03:41.310 --> 00:03:45.180
there are other IAM roles and policies that will come into play when

77
00:03:45.180 --> 00:03:48.270
deploying our applications when we're working in AWS.

78
00:03:48.270 --> 00:03:52.760
And these will determine how EC2 and any other services get additional AWS

79
00:03:52.760 --> 00:03:57.500
permissions such as to interact with the Amazon S3 service or the Simple

80
00:03:57.500 --> 00:04:01.880
Queue Service or Simple Notification Service or any other AWS service that

81
00:04:01.880 --> 00:04:03.940
our applications need to access.

82
00:04:03.940 --> 00:04:06.450
So be aware of these different concepts when you're

83
00:04:06.450 --> 00:04:12.000
permissioning things with CodeDeploy, and we'll look at some of them when we work in the demos for CodeDeploy.

