WEBVTT
1
00:00:01.340 --> 00:00:03.250
Back in our CodePipeline console,

2
00:00:03.250 --> 00:00:05.670
we can select the repository that we just created.

3
00:00:05.670 --> 00:00:05.920
Now,

4
00:00:05.920 --> 00:00:09.820
we might need to press Previous and then Next one time before we do this to

5
00:00:09.820 --> 00:00:13.080
make sure that the new CodeCommit repository gets loaded in.

6
00:00:13.080 --> 00:00:15.190
From there, we'll be able to select flasky3,

7
00:00:15.190 --> 00:00:18.150
and then we can click the master branch because that's

8
00:00:18.150 --> 00:00:19.470
where we'll be pushing our code.

9
00:00:19.470 --> 00:00:21.400
When we push commits to the master branch,

10
00:00:21.400 --> 00:00:23.940
the build pipeline will kick off automatically.

11
00:00:23.940 --> 00:00:24.340
From there,

12
00:00:24.340 --> 00:00:28.200
we'll leave Amazon CloudWatch Events selected for the detection option

13
00:00:28.200 --> 00:00:30.940
and then click Next to configure our build provider,

14
00:00:30.940 --> 00:00:32.970
in this case, AWS CodeBuild.

15
00:00:32.970 --> 00:00:36.210
We'll need to create a new project for this because we don't want to interfere

16
00:00:36.210 --> 00:00:38.560
with any other projects we were working on in this course.

17
00:00:38.560 --> 00:00:41.340
So we'll call this project flasky3,

18
00:00:41.340 --> 00:00:43.840
and then we'll scroll down and configure the environment.

19
00:00:43.840 --> 00:00:46.770
We'll do this pretty quickly just by selecting Ubuntu,

20
00:00:46.770 --> 00:00:50.390
selecting the Runtime as Standard and the Image as 4.0,

21
00:00:50.390 --> 00:00:52.510
and then we'll have the option to create a new

22
00:00:52.510 --> 00:00:54.480
service role or use an existing one.

23
00:00:54.480 --> 00:00:57.740
It's probably fine for us to use the new service role,

24
00:00:57.740 --> 00:01:00.580
and it should be able to create everything for us by default.

25
00:01:00.580 --> 00:01:01.430
So once we're done,

26
00:01:01.430 --> 00:01:05.960
we can scroll down to the Buildspec section and type in buildspec.yml,

27
00:01:05.960 --> 00:01:08.080
which is the location of where the buildspec file will

28
00:01:08.080 --> 00:01:10.540
be in the root of our repository.

29
00:01:10.540 --> 00:01:13.630
From here, we'll scroll down and click Continue to CodePipeline.

30
00:01:13.630 --> 00:01:16.960
This should create our CodeBuild project and allow us to go back to

31
00:01:16.960 --> 00:01:20.140
CodePipeline in order to finish configuring everything.

32
00:01:20.140 --> 00:01:21.590
So now that we're here,

33
00:01:21.590 --> 00:01:24.070
we have successfully created our CodeBuild project and

34
00:01:24.070 --> 00:01:25.750
we can scroll down to the next step,

35
00:01:25.750 --> 00:01:29.040
which is to determine how we deploy this project.

36
00:01:29.040 --> 00:01:31.800
So let's go to the Deploy provider, and in this case,

37
00:01:31.800 --> 00:01:36.160
we're not going to use CodeDeploy or any of the other AWS deployment services.

38
00:01:36.160 --> 00:01:39.970
We're going to deploy directly to AWS Elastic Beanstalk,

39
00:01:39.970 --> 00:01:43.020
and we don't have any intermediary here other than

40
00:01:43.020 --> 00:01:45.940
CodePipeline and the Elastic Beanstalk service.

41
00:01:45.940 --> 00:01:48.920
Now, to do this, we're going to need to create a new application,

42
00:01:48.920 --> 00:01:54.040
so let's go to the services drop‑down and go to Elastic Beanstalk.

43
00:01:54.040 --> 00:01:56.200
We'll open this up in a new tab so we don't lose our

44
00:01:56.200 --> 00:01:58.340
spot from creating our pipeline.

45
00:01:58.340 --> 00:02:00.180
Now, let's click Create Application,

46
00:02:00.180 --> 00:02:04.260
and we'll create an application that we call flasky3,

47
00:02:04.260 --> 00:02:06.670
and we'll go down and select the platform,

48
00:02:06.670 --> 00:02:10.640
in this case, we'll use Python because that's what Flask is based on,

49
00:02:10.640 --> 00:02:13.230
and we'll leave everything else as the defaults.

50
00:02:13.230 --> 00:02:17.300
This will create a sample application, which will not be our application,

51
00:02:17.300 --> 00:02:20.840
but will be a place that we can then deploy our application to.

52
00:02:20.840 --> 00:02:23.880
You're going to probably have to wait for about 5 to 10

53
00:02:23.880 --> 00:02:26.050
minutes for this entire process to finish up.

54
00:02:26.050 --> 00:02:28.030
If it happens faster, good for you.

55
00:02:28.030 --> 00:02:29.340
Once it's done,

56
00:02:29.340 --> 00:02:33.540
we'll be able to override this application with our own custom application.

57
00:02:33.540 --> 00:02:34.770
After several minutes,

58
00:02:34.770 --> 00:02:37.470
our environment and the Elastic Beanstalk application

59
00:02:37.470 --> 00:02:38.820
should have finished deploying.

60
00:02:38.820 --> 00:02:39.790
If you scroll down,

61
00:02:39.790 --> 00:02:42.550
you should see that there's a health check that's running okay.

62
00:02:42.550 --> 00:02:45.240
And if we click the URL to visit our application,

63
00:02:45.240 --> 00:02:47.110
you should see a welcome screen, like this.

64
00:02:47.110 --> 00:02:50.600
Now, we're going to override this with our own Flask application.

65
00:02:50.600 --> 00:02:53.540
So let's go back to CodePipeline and do this now.

66
00:02:53.540 --> 00:02:55.580
If we don't see our application name in the drop‑down,

67
00:02:55.580 --> 00:02:57.840
we'll have to do the same thing I mentioned before where we

68
00:02:57.840 --> 00:03:00.750
press Previous and then we press Next to now see the

69
00:03:00.750 --> 00:03:04.040
refreshed options for Elastic Beanstalk.

70
00:03:04.040 --> 00:03:07.490
Now, we should be able to select flasky3 and the Environment name,

71
00:03:07.490 --> 00:03:11.540
which by default, is capital Flasky3‑env.

72
00:03:11.540 --> 00:03:16.040
Next, we'll click Next, and finally, we'll create the pipeline.

73
00:03:16.040 --> 00:03:17.300
With our pipeline created,

74
00:03:17.300 --> 00:03:20.760
it'll automatically start the release process for our pipeline,

75
00:03:20.760 --> 00:03:25.410
starting by going to the source in the AWS CodeCommit repository and then

76
00:03:25.410 --> 00:03:30.320
moving that code over to our build stage to get tested and built. Inside

77
00:03:30.320 --> 00:03:32.060
of CodeBuild, if we wanted to review this,

78
00:03:32.060 --> 00:03:35.040
we could click the Details of this section, and this would

79
00:03:35.040 --> 00:03:37.330
move us over to the CodeBuild console,

80
00:03:37.330 --> 00:03:40.940
and we could review all the logs for this build.

81
00:03:40.940 --> 00:03:42.230
And as this happens,

82
00:03:42.230 --> 00:03:45.520
we can go back to the CodePipeline console. We can then see the

83
00:03:45.520 --> 00:03:48.950
Build step finish and move on to the Deploy step if the tests

84
00:03:48.950 --> 00:03:51.860
succeed. After waiting for a minute,

85
00:03:51.860 --> 00:03:54.270
you'll see that the Build step has been finished, and

86
00:03:54.270 --> 00:03:56.210
we've moved on to the Deploy step.

87
00:03:56.210 --> 00:04:00.290
It's now deploying all of our application over to the Flasky3

88
00:04:00.290 --> 00:04:03.630
environment in the Elastic Beanstalk console.

89
00:04:03.630 --> 00:04:07.030
And if we open up the window for Flasky3 right here, we should

90
00:04:07.030 --> 00:04:11.290
eventually see this URL change from what it appears as now to what our

91
00:04:11.290 --> 00:04:14.160
application will have it appear as, so let's wait until this

92
00:04:14.160 --> 00:04:17.440
CodePipeline finishes and see the results.

93
00:04:17.440 --> 00:04:18.790
After a few more minutes,

94
00:04:18.790 --> 00:04:21.820
our deployment should have succeeded to Elastic Beanstalk,

95
00:04:21.820 --> 00:04:25.620
and we can go back to the URL that we had earlier and refresh the screen.

96
00:04:25.620 --> 00:04:28.940
Now we have are fairly boring, but completely automated

97
00:04:28.940 --> 00:04:31.640
build and deployment of our application.

98
00:04:31.640 --> 00:04:33.120
If we wanted to test out that it works,

99
00:04:33.120 --> 00:04:35.870
we could go to the URL bar and add something like our

100
00:04:35.870 --> 00:04:38.000
name here to get a custom greeting.

101
00:04:38.000 --> 00:04:39.600
Now that we've done this deployment,

102
00:04:39.600 --> 00:04:42.190
we can go back to VS code and make a change that will

103
00:04:42.190 --> 00:04:45.340
automatically kick off a new release for our pipeline.

104
00:04:45.340 --> 00:04:50.700
Let's go into the application.py file, and let's change the greeting.

105
00:04:50.700 --> 00:04:51.310
In this case,

106
00:04:51.310 --> 00:04:55.560
let's move it from Hello to Greetings, and then let's

107
00:04:55.560 --> 00:04:57.460
save this and add a new commit.

108
00:04:57.460 --> 00:04:58.710
We'll do git status,

109
00:04:58.710 --> 00:05:06.360
git add dot, and then git commit ‑m, and we'll do greetings as our

110
00:05:06.360 --> 00:05:11.760
commit, and then we'll do git push origin master to send all those

111
00:05:11.760 --> 00:05:15.950
changes up into CodeCommit. Now that we've done this, we quickly

112
00:05:15.950 --> 00:05:17.600
go back to CodePipeline,

113
00:05:17.600 --> 00:05:21.580
go over to the Pipelines section. In a moment, we should see this change

114
00:05:21.580 --> 00:05:25.580
from the first commit that we had a minute ago. And if we refresh it, it

115
00:05:25.580 --> 00:05:28.250
should show us an in‑progress execution.

116
00:05:28.250 --> 00:05:31.340
So let's go into flasky3 now to see the new execution.

117
00:05:31.340 --> 00:05:34.560
It's evaluating the changes we just made the AWS CodeCommit in our

118
00:05:34.560 --> 00:05:37.800
source and then sending them along to the build step that it's

119
00:05:37.800 --> 00:05:40.290
currently running through. A minute or 2 later,

120
00:05:40.290 --> 00:05:43.320
the build process will finish and our new deployment will kick off

121
00:05:43.320 --> 00:05:45.950
to Elastic Beanstalk. And a minute after that,

122
00:05:45.950 --> 00:05:48.800
Elastic Beanstalk should finish deploying our application.

123
00:05:48.800 --> 00:05:50.940
So let's refresh the screen one more time.

124
00:05:50.940 --> 00:05:54.570
Now, it's saying Greetings instead of Hello, so this means our application

125
00:05:54.570 --> 00:05:58.040
has successfully gone through an entire release pipeline.

126
00:05:58.040 --> 00:06:00.040
Nice work on everything you've done so far.

127
00:06:00.040 --> 00:06:00.830
But remember,

128
00:06:00.830 --> 00:06:03.330
we might want to tear all these resources back down

129
00:06:03.330 --> 00:06:08.000
so we don't get charged for them. Let's look at that in the next section.

