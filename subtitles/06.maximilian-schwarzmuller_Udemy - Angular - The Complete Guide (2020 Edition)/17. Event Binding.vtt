WEBVTT
1
00:00:03.180 --> 00:00:09.110
In the last lectures, we learned a lot about how we can use property binding and string interpolation to output

2
00:00:09.110 --> 00:00:10.750
data in the template,

3
00:00:10.760 --> 00:00:12.160
let's now react to events.

4
00:00:12.170 --> 00:00:14.010
For example we have a button here

5
00:00:14.180 --> 00:00:20.090
and after two seconds, this button is enabled, so it would be nice we could do something once we clicked the

6
00:00:20.090 --> 00:00:20.890
button.

7
00:00:21.200 --> 00:00:27.470
Now I will soon show you how we can actually add a new server, how we can add a new replication of our

8
00:00:27.560 --> 00:00:30.920
server selector, of our server component here,

9
00:00:30.980 --> 00:00:35.440
for now what I want to do is I want to output something.

10
00:00:35.450 --> 00:00:41.180
I will remove this text here and instead here, I want to output the value of a property. I'll create this

11
00:00:41.180 --> 00:00:42.060
property

12
00:00:42.100 --> 00:00:45.680
and again you may ignore ngOnInit for now, I will come back to this,

13
00:00:45.740 --> 00:00:55.660
I will name it serverCreationStatus and initially I will set it to no server was created, like this.

14
00:00:55.660 --> 00:01:00.620
Now this property can be output via string interpolation, serverCreationStatus

15
00:01:00.640 --> 00:01:03.930
and I just told you I don't want to continue outputting data,

16
00:01:03.940 --> 00:01:05.330
we want to listen to events.

17
00:01:05.380 --> 00:01:07.720
So I promised it, we'll do it.

18
00:01:07.870 --> 00:01:16.360
I will add another method below here and I will name this method onCreateServer, the on at the beginning

19
00:01:16.360 --> 00:01:20.750
to kind of make clear that this will be triggered from within my template,

20
00:01:20.770 --> 00:01:26.830
you don't have to name it on something but it kind of makes it easier to understand who will call this

21
00:01:26.830 --> 00:01:27.600
method.

22
00:01:27.790 --> 00:01:33.370
Well, the user will basically by doing something, some event will call it, that is what I want to symbolize

23
00:01:33.370 --> 00:01:34.230
with that.

24
00:01:34.510 --> 00:01:39.770
So in here, I will set the serverCreationStatus to server was created.

25
00:01:40.270 --> 00:01:43.570
So the missing piece of course is to call this method

26
00:01:43.570 --> 00:01:50.340
and now here is where event binding comes into play. We want to listen to this click event here

27
00:01:50.470 --> 00:01:56.740
and typically, you have the onClick attribute on the HTML element where you can now execute some Javascript

28
00:01:56.730 --> 00:01:57.550
code.

29
00:01:57.670 --> 00:01:59.690
We won't use that with Angular though,

30
00:01:59.860 --> 00:02:08.800
here we have the syntax Angular offers us, event binding which uses parentheses, like property binding

31
00:02:08.830 --> 00:02:11.800
used square brackets, for events

32
00:02:11.800 --> 00:02:15.190
parentheses are the signal that we're using event binding

33
00:02:15.490 --> 00:02:19.630
and here, we have to specify the name of the event between the parentheses,

34
00:02:19.750 --> 00:02:28.090
for example click and you can basically bind to all the events made available by the HTML attribute

35
00:02:28.150 --> 00:02:29.740
you're placing this on.

36
00:02:29.800 --> 00:02:37.600
So if you have onClick, onMouseEnter, you could bind to click mouse enter without the on at the beginning.

37
00:02:37.600 --> 00:02:40.000
So we bind to the click event

38
00:02:40.090 --> 00:02:45.070
and now between the quotation marks, we put the code we want to execute

39
00:02:45.160 --> 00:02:50.290
once this event occurs. Now oftentimes, you will call a method here,

40
00:02:50.320 --> 00:02:58.690
so let's do this. Let's point to the method we want to execute which is onCreateServer with parentheses,

41
00:02:58.810 --> 00:03:02.830
so this method will now get executed whenever we click the button.

42
00:03:03.220 --> 00:03:06.390
As a side note, you don't have to execute a method here,

43
00:03:06.430 --> 00:03:11.140
you could also put the code you want to execute right between the quotation marks.

44
00:03:11.300 --> 00:03:18.100
Oftentimes this is not very good because you want to execute more code if some event happens

45
00:03:18.100 --> 00:03:23.510
but if all you want to do is set some boolean property to true for example, well

46
00:03:23.620 --> 00:03:30.100
you can definitely do this inline the template, as a general rule though, you shouldn't put too much logic

47
00:03:30.130 --> 00:03:32.200
into your templates though.

48
00:03:32.230 --> 00:03:39.270
So now we're binding the click event and we execute onCreateServer method when it occurs,

49
00:03:39.270 --> 00:03:42.090
so let's see this in action. In our application,

50
00:03:42.100 --> 00:03:43.470
let's reload the page,

51
00:03:43.510 --> 00:03:47.530
the button gets enabled and now watch this part here,

52
00:03:47.560 --> 00:03:55.620
if I click the button, it changes to server was created because we are triggering our own method here.

53
00:03:55.720 --> 00:03:58.270
And this is how a simple event binding works,

54
00:03:58.270 --> 00:03:59.870
use parentheses, the

55
00:04:00.040 --> 00:04:04.910
event name in between and then between the quotation marks, the code you want to execute

56
00:04:05.020 --> 00:04:06.580
when this event occurs.
