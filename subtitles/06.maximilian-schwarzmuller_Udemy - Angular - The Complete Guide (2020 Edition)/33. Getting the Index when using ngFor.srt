1
00:00:02,670 --> 00:00:10,870
In the last assignment, we created this solution with our log here where we could add items which get an

2
00:00:10,920 --> 00:00:17,250
incrementing number and this number then determines whether we have a background color which is blue

3
00:00:17,460 --> 00:00:21,400
or this white text CSS class attached to it.

4
00:00:21,400 --> 00:00:27,300
Now in the assignment, I said that it is one option to use an incrementing number in our log,

5
00:00:27,300 --> 00:00:31,460
another option might be to use any other content,

6
00:00:31,510 --> 00:00:35,230
for example a timestamp but it could be any other text.

7
00:00:35,260 --> 00:00:45,120
So I'll first of all change this here in my app.component.ts file and I will no longer push this number,

8
00:00:45,370 --> 00:00:49,360
instead I will use timestamp here which we can get with new date,

9
00:00:49,420 --> 00:00:51,720
date is a built-in object

10
00:00:51,730 --> 00:00:53,160
Javascript ships with,

11
00:00:53,260 --> 00:00:55,690
so there is no need to add any import.

12
00:00:55,690 --> 00:01:01,150
Now with that, we're pushing new timestamps on this array, we can demonstrate this with ng serve running

13
00:01:01,390 --> 00:01:03,690
by simply clicking this button here

14
00:01:03,790 --> 00:01:10,450
but now everything is blue of course because our check here now always returns true, because the string

15
00:01:10,480 --> 00:01:14,910
and this is just a string as always, deemed as being greater than 5.

16
00:01:15,430 --> 00:01:18,080
So our check doesn't work anymore,

17
00:01:18,370 --> 00:01:24,270
we can add something to ngFor here too. Separate with a semicolon,

18
00:01:24,520 --> 00:01:28,010
you can extract some extra information,

19
00:01:28,090 --> 00:01:36,460
the current index or the index of the current iteration. With let, you can bind it to any variable

20
00:01:36,460 --> 00:01:41,950
name of your choice like i or index, whatever you like, I will set it to i

21
00:01:42,400 --> 00:01:45,800
and then you set equal to index.

22
00:01:45,880 --> 00:01:52,390
Now equal to index kind of is also like a reserved expression you could say, it gives you access to the

23
00:01:52,390 --> 00:01:54,490
index of the current iteration.

24
00:01:54,490 --> 00:02:00,910
So in the first loop, this will be zero, in the second loop, so in the second element in this array, i will

25
00:02:00,910 --> 00:02:02,870
be one and so on.

26
00:02:02,920 --> 00:02:08,890
Now with this information, you can of course update your solution here to no longer check if logItem

27
00:02:08,890 --> 00:02:10,620
is greater or equal than 5

28
00:02:10,810 --> 00:02:16,740
but if i is greater or equal than 4 because remember, the index starts at zero.

29
00:02:17,020 --> 00:02:18,870
So let's update both

30
00:02:18,880 --> 00:02:24,820
checks like this and now with that, this should work with any content and not just with incrementing

31
00:02:24,820 --> 00:02:25,560
numbers,

32
00:02:25,750 --> 00:02:28,480
this looks pretty good.

33
00:02:28,480 --> 00:02:30,970
So that's a tiny addition,

34
00:02:30,970 --> 00:02:36,040
extracting the index of ngFor just like that. With that,

35
00:02:36,070 --> 00:02:37,560
enough about the basics,

36
00:02:37,570 --> 00:02:40,620
we got a lot of solid knowledge right now,

37
00:02:40,780 --> 00:02:47,830
let's use it to set up our course project in the next section before we then dive deeper into components

38
00:02:47,920 --> 00:02:49,020
and data binding.

39
00:02:49,030 --> 00:02:50,580
Can't wait to see you there.
