WEBVTT
1

00:00:02.640  -->  00:00:09.560
In the last lecture, we created our first pipe, the ShortenPipe and it's already working quite well

2

00:00:09.860  -->  00:00:16.970
but it would be nice if we could allow the user to specify the number of characters at which point you

3

00:00:16.970  -->  00:00:20.090
want to shorten the pipe or shorten the value.

4

00:00:20.120  -->  00:00:23.330
Right now, we're always using 10 characters as a limit,

5

00:00:23.330  -->  00:00:28.580
this is hardcoded into the pipe and this might not be the best pipe you can build,

6

00:00:28.670  -->  00:00:36.110
instead it would be nice if we would receive a second argument in the transform method, the let's say limit

7

00:00:37.130  -->  00:00:41.060
and this should simply be a number.

8

00:00:41.360  -->  00:00:44.720
Now limit would be what you then use here in the check,

9

00:00:44.730  -->  00:00:50.330
so only if it's greater or if it has more characters than you want to shorten it

10

00:00:50.400  -->  00:00:54.580
and then of course you use limit here in your substring method too.

11

00:00:54.660  -->  00:01:00.840
Now with this little change, you allow the user to pass a parameter to the pipe because now you receive

12

00:01:00.840  -->  00:01:03.350
a second argument in the transform method

13

00:01:03.570  -->  00:01:10.230
and since you receive this second argument here, the user may pass one parameter to the pipe.

14

00:01:10.320  -->  00:01:14.160
You don't need to change anything else, don't need to change anything in the decorator,

15

00:01:14.190  -->  00:01:15.320
this is all.

16

00:01:15.390  -->  00:01:21.300
Now with this, we can go to our app component and if we would leave it like this, you see it's not shortened

17

00:01:21.380  -->  00:01:26.450
at all because we're not passing any limits, therefore it's undefined, therefore we always fail this

18

00:01:26.460  -->  00:01:31.170
check whether it is too long, therefore we always return the original value

19

00:01:31.440  -->  00:01:38.400
but if we do pass a parameter and remember, we do this by adding a colon and then the value, let's say

20

00:01:38.520  -->  00:01:41.760
five, if we do this and save this,

21

00:01:41.790  -->  00:01:45.370
now you see we're shortening after five characters

22

00:01:45.660  -->  00:01:51.930
and if we pick 15, now you see the first two names go through quite well because they are short enough

23

00:01:52.140  -->  00:01:55.170
but these last two names are shortened.

24

00:01:55.380  -->  00:01:57.980
And this is how you can of course add multiple parameters,

25

00:01:58.170  -->  00:02:04.080
you would add another parameter simply by adding another argument here.

26

00:02:04.170  -->  00:02:09.840
So this would be another arg of the type you want it to be, whatever it is

27

00:02:10.320  -->  00:02:16.310
and then with that added, you could simply add another colon and your second parameter.

28

00:02:16.330  -->  00:02:18.540
This is how you parameterize your own pipes

29

00:02:18.570  -->  00:02:22.980
and of course you could also chain them with built-in types and so on, you can use it like a built-in

30

00:02:22.980  -->  00:02:23.550
pipe,

31

00:02:23.550  -->  00:02:25.560
it's just your own pipe.

32

00:02:25.560  -->  00:02:26.850
So this is awesome,

33

00:02:26.940  -->  00:02:33.630
let's now go on to an advanced use case and to some limitations you might face when using pipes.
