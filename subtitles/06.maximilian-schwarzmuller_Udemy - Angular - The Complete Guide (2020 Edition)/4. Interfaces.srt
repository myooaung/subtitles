1

00:00:02,050  -->  00:00:03,480
I went to bed.

2

00:00:03,780  -->  00:00:11,970
So when I look at typing classes and just with you I will introduce two more concepts interfaces and

3

00:00:11,970  -->  00:00:13,240
generics.

4

00:00:13,240  -->  00:00:18,640
Now you might know them from other programming languages and they were basically in the same way.

5

00:00:18,810  -->  00:00:21,680
So here let's start with interfaces.

6

00:00:21,780  -->  00:00:23,520
My interface folder here.

7

00:00:23,910  -->  00:00:33,090
And as you can see here at the beginning I'm defining such interface now an interface is like a contract

8

00:00:33,090  -->  00:00:33,530
.

9

00:00:33,630  -->  00:00:42,390
I'm saying what ever implements this user interface whatever option for example needs to have a username

10

00:00:42,570  -->  00:00:51,270
and password and optionally it may have a code for a password property but by adding questionmark here

11

00:00:51,510  -->  00:00:54,070
I'm saying this is not required.

12

00:00:54,090  -->  00:01:00,120
You may implement this interface successfully without providing this code from past property but the

13

00:01:00,120  -->  00:01:03,500
first two properties here have to be provided.

14

00:01:03,510  -->  00:01:10,890
Now why would you search your faces in phrases allow us to create a secure form of communication between

15

00:01:10,890  -->  00:01:12,490
several options.

16

00:01:12,510  -->  00:01:20,040
So to say because we know that a certain object implements a certain method or property we can safely

17

00:01:20,130  -->  00:01:23,370
access this magical property in the schools.

18

00:01:23,370  -->  00:01:31,110
We will see this for example when using the all in and interface which was introduced by anguage you

19

00:01:31,740  -->  00:01:41,670
by doing this we can again safely tell our objects that they can safely access certain properties or

20

00:01:41,670  -->  00:01:52,710
methods can also use it too well to get our own type without creating a class for it.

21

00:01:52,710  -->  00:01:53,630
Maybe we don't need it.

22

00:01:53,630  -->  00:02:01,500
Class We don't want to instantiate it but we want to make sure that we will create our own type blueprint

23

00:02:01,500  -->  00:02:01,730
.

24

00:02:01,860  -->  00:02:08,310
For example here and creating this user with a username and password as required fields and a confirmed

25

00:02:08,310  -->  00:02:14,820
password as an optional field then I'm creating a variable here and I'm assigning this user tied to

26

00:02:14,820  -->  00:02:18,720
it or a custom type we create here with this interface.

27

00:02:18,900  -->  00:02:25,920
So know that whatever I'm assigning as a value to this user variable it has to be an object which contains

28

00:02:25,920  -->  00:02:30,270
at least username and password and might contain password.

29

00:02:30,990  -->  00:02:35,670
So here my sign is that you object and this does not prove the error because I have a user name I have

30

00:02:35,670  -->  00:02:40,510
a password and I will not confirm password which is OK because it is optional.

31

00:02:40,950  -->  00:02:46,290
Let me come in and that out and try to add this value.

32

00:02:46,440  -->  00:02:49,210
A number of checked with anything and any number.

33

00:02:49,380  -->  00:02:53,010
So our fields then username and password.

34

00:02:53,010  -->  00:02:58,240
I don't have a username password here but I require them for my interface.

35

00:02:58,500  -->  00:03:04,040
So this is not a valid user type here and therefore we can always get this error.

36

00:03:04,230  -->  00:03:10,550
And if I try to compile these apps I'm in the wrong order.

37

00:03:10,710  -->  00:03:13,640
Let me jump into this.

38

00:03:14,370  -->  00:03:23,820
So if I try to compile interfaces you can see I get an error because well basically it says this is

39

00:03:24,000  -->  00:03:27,370
not implementing the interface you specified here.

40

00:03:27,810  -->  00:03:30,990
So I'm going to comment that out again.

41

00:03:31,320  -->  00:03:32,700
Now this is valid again.

42

00:03:32,890  -->  00:03:39,120
And then down here I get a numbered interface which is called can drive and which says what ever implements

43

00:03:39,120  -->  00:03:48,120
can drive should have a method called accelerate which will take speed or number as an argument and

44

00:03:48,120  -->  00:03:49,890
does not return anything.

45

00:03:49,890  -->  00:03:56,530
So you're just grabbing a function method and how it should look like when implementing this can drive

46

00:03:56,550  -->  00:03:57,740
interface.

47

00:03:57,750  -->  00:04:04,860
So here my car which uses as a can drive interface which type can drive as well and you charge the object

48

00:04:04,860  -->  00:04:14,670
created with this little notation and it is valid because well I have this accelerate method here with

49

00:04:14,880  -->  00:04:20,120
which is a function which takes a number and does not return anything in its body.

50

00:04:20,580  -->  00:04:24,640
OK so this is how we create interfaces and how we use them.

51

00:04:24,660  -->  00:04:32,460
And I hope it's clear why we used to do this from time to time throughout this course and with this

52

00:04:32,460  -->  00:04:35,390
you should be able to understand what we're doing.

53

00:04:35,670  -->  00:04:41,790
Now here's an interesting question what do you think happens if I compiled this file which is valid

54

00:04:41,820  -->  00:04:42,650
in this state.

55

00:04:42,660  -->  00:04:45,180
How would our child script file look like.

56

00:04:45,570  -->  00:04:49,000
Well a lot cleaner than you might expect.

57

00:04:49,440  -->  00:04:54,720
Indeed it's just a user variable and well it is a scientists value.

58

00:04:55,020  -->  00:05:03,330
But all this interface stuff is gone because Javascript has no equivalent for interfaces and this is

59

00:05:03,330  -->  00:05:05,800
kind of related typewritten right.

60

00:05:06,000  -->  00:05:11,570
If we don't have typing and Javascript does not have that it tell me to assign mechanical side types

61

00:05:11,580  -->  00:05:20,220
there are Windows interfaces because we've got no way of telling that this variable Shippey of type

62

00:05:20,520  -->  00:05:22,080
this interface anyway.

63

00:05:22,440  -->  00:05:25,790
Therefore this is purely for typescript.

64

00:05:25,860  -->  00:05:32,520
But you will be able to check if all code is followed up with compilation but it does not compile because

65

00:05:32,520  -->  00:05:34,090
there is no equivalent.

66

00:05:34,610  -->  00:05:37,290
That's interface.

67

00:05:38,220  -->  00:05:41,190
Next that you will have a look at generics there by
