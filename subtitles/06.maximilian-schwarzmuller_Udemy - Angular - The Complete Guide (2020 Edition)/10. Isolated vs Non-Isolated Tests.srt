1

00:00:01,830  -->  00:00:03,330
This is our example app.

2

00:00:03,360  -->  00:00:07,950
And as you can see we got a user component and they use a service and both are connected because we

3

00:00:07,950  -->  00:00:10,880
inject the user service and the user component.

4

00:00:10,890  -->  00:00:18,650
Now let's say we have a rewords pipe which reverses any string that pipe can be tested isolated.

5

00:00:18,690  -->  00:00:26,940
We do have to use English to package all these two utilities Usul test bed azing Tig and so on.

6

00:00:27,000  -->  00:00:32,580
There are a couple of utilities in this package and actually you already saw most of them.

7

00:00:32,700  -->  00:00:36,170
The address can be seen in the reference link and the next lecture.

8

00:00:36,420  -->  00:00:42,470
But anyways a pipe can be tested totally independent of English too.

9

00:00:42,480  -->  00:00:43,280
Why.

10

00:00:43,530  -->  00:00:45,150
Because how does a pipe work.

11

00:00:45,150  -->  00:00:51,620
It has this transformed function where you pass a string in and get a string out.

12

00:00:51,870  -->  00:00:55,620
No need to involve Englad to for such a basic pipe.

13

00:00:55,620  -->  00:00:58,570
You might have other tasks in your application where the same is true.

14

00:00:58,710  -->  00:01:04,440
If you get a service and then the service you get a method which only transforms some data or at say

15

00:01:04,470  -->  00:01:08,300
doubles the number Well then you can tested isolate isolated.

16

00:01:08,340  -->  00:01:10,880
You don't need to testing package for dead.

17

00:01:10,890  -->  00:01:15,930
You can write a normal unit test and does well I'll show you an example of a reverse pipe.

18

00:01:15,930  -->  00:01:21,200
Now I look at the pipe in the shared folder and I'll treat it manually.

19

00:01:21,210  -->  00:01:30,720
I'll name it rewords the pipe dot TS and in there we of course export a class which is named rewords

20

00:01:31,790  -->  00:01:32,880
pipe.

21

00:01:33,870  -->  00:01:38,110
And on this class we attach the pipe decorate decorator.

22

00:01:38,110  -->  00:01:43,830
As he learned to be imported from an angular co-worker and there I pass an object where I give it a

23

00:01:43,830  -->  00:01:45,700
name of rewords.

24

00:01:46,260  -->  00:01:54,600
Well on the inside of this class I therefore need to have the transform function and Tristram's form

25

00:01:54,600  -->  00:02:03,090
function expects to get a string or de-value lets say which is a string and possibly some parens though

26

00:02:03,180  -->  00:02:05,140
I won't pass some here.

27

00:02:05,520  -->  00:02:10,550
Well and then I can simply return the value splitters

28

00:02:12,930  -->  00:02:13,830
by.

29

00:02:14,190  -->  00:02:21,090
Well nothing so that each character is separated so split it by each character basically call reverse

30

00:02:21,090  -->  00:02:21,590
on that.

31

00:02:21,610  -->  00:02:26,260
That's a normal function vailable on an array and the string is just an array of characters.

32

00:02:26,520  -->  00:02:33,240
And then join them again with nothing in between joining them so that each character is attached to

33

00:02:33,240  -->  00:02:37,040
the code before it without a whitespace in between or something like that.

34

00:02:37,110  -->  00:02:39,370
That is what my rewords pipe does.

35

00:02:39,720  -->  00:02:50,820
Well and now for testing this I can really ride my own rewords pipe spec Dadds TS file.

36

00:02:50,820  -->  00:02:56,390
Now if we have a look at the user components back file How does a spec a look like.

37

00:02:56,640  -->  00:03:01,810
Well if I copy it which is a bit overkill we start here here.

38

00:03:02,100  -->  00:03:08,310
I of course want to get rid of all the IT statements except for one maybe get rid of all these imports

39

00:03:08,400  -->  00:03:12,870
and I can also get rid of the angular to testing utilities because I don't need them.

40

00:03:12,870  -->  00:03:15,070
I also don't need it for each.

41

00:03:15,120  -->  00:03:17,880
There is no set up to be run before each pipe.

42

00:03:17,880  -->  00:03:25,980
All I want to do here for example is I want to create my rebirths pipe which is a new rewords pipe and

43

00:03:25,980  -->  00:03:31,070
that's why it's called isolator that doesn't depend on any other piece of my application.

44

00:03:31,080  -->  00:03:33,140
It doesn't even depend on English to.

45

00:03:33,510  -->  00:03:40,740
And all I want to do is I want to expect rewords pipe trends for them if I pass let's say Hello in there

46

00:03:41,650  -->  00:03:50,600
to equal well and then this should be O L L E H that is all.

47

00:03:50,610  -->  00:03:59,280
And if I save this we should now have 11 successful tests because this clearly should succeed and we

48

00:03:59,370  -->  00:04:03,740
Duzee 11 successful tests indeed after rerunning enty test.

49

00:04:03,750  -->  00:04:09,140
Or if you still had it running after saving this as an isolated test.

50

00:04:09,180  -->  00:04:13,720
Of course you could have some pipe which depends on what you or something like that.

51

00:04:13,860  -->  00:04:16,120
And it really comes down to this question.

52

00:04:16,200  -->  00:04:22,440
Does the thing you want to test depend on Angola two or three pieces of your English two application

53

00:04:22,460  -->  00:04:22,680
.

54

00:04:22,920  -->  00:04:28,650
If yes well then you get these testing utilities like test bed which allows you to create components

55

00:04:28,710  -->  00:04:32,560
exista injector set up the module for testing and so on.

56

00:04:32,580  -->  00:04:39,810
You got to azing fake azing and take two well-handled asynchronous tasks and so on in the lecture at

57

00:04:39,810  -->  00:04:45,750
the end of this module you will learn more about Abu resource about Obert tests you could write are

58

00:04:45,780  -->  00:04:51,770
things you can test if you don't have that if you don't have a dependency on angular 2 or upper pieces

59

00:04:51,860  -->  00:04:57,080
in the app while then an isolated task like this might be all you need.

60

00:04:57,510  -->  00:05:06,170
And with that we had a good introduction to how testing works how we can use the Angua to testing package

61

00:05:06,220  -->  00:05:08,480
the features that offers us to write.

62

00:05:08,500  -->  00:05:10,510
It has to use services.

63

00:05:10,770  -->  00:05:16,290
And as I already said at the beginning I could continue for a couple of hours here but this is not what

64

00:05:16,290  -->  00:05:20,130
this course is about and not what I want to make discourse about.

65

00:05:20,490  -->  00:05:21,950
It is a good introduction.

66

00:05:22,000  -->  00:05:28,070
With Dad you should be able to dive really deeper into it with the article in the next lecture.

67

00:05:28,230  -->  00:05:34,140
You should be able to use your general unit testing knowledge you already have to take advantage of

68

00:05:34,140  -->  00:05:38,780
these tools and you Office you to create components to access to Ranzo on.

69

00:05:38,920  -->  00:05:40,500
And with that that is all I can do.

70

00:05:40,500  -->  00:05:47,070
I can encourage you to dive deeper into it and I hope this introduction was at least helpful to understand

71

00:05:47,430  -->  00:05:54,090
how you might decide when to test the connection to when your component or whatever and when to test

72

00:05:54,120  -->  00:05:55,120
it isolated.

73

00:05:55,320  -->  00:05:58,200
Why unit tests are helpful in the first place.

74

00:05:58,320  -->  00:06:04,740
How to get started with the test and you tell his English to gives you and how to create these example

75

00:06:04,740  -->  00:06:05,130
tests.

76

00:06:05,130  -->  00:06:08,010
We create a two year zone the modules by
