WEBVTT
1
00:00:02.270 --> 00:00:08.360
Transforming data is of course something we could also do here inside of subscribe and that would generally

2
00:00:08.360 --> 00:00:14.570
not be a problem but it is a good practice to use observable operators because it simply allows us to

3
00:00:14.570 --> 00:00:17.120
write cleaner code with different steps

4
00:00:17.120 --> 00:00:23.120
we funnel our data through that can easily be swapped or adjusted, so that you have a lean subscribe

5
00:00:23.120 --> 00:00:28.190
function here and have other steps that focus on other parts. Therefore

6
00:00:28.210 --> 00:00:33.800
here before we subscribe, we can now call pipe because pipe as you learned is a method that allows you

7
00:00:33.800 --> 00:00:41.990
to funnel your observable data through multiple operators before they reach the subscribe method.

8
00:00:42.010 --> 00:00:49.640
Now the operator I need here is the map operator and therefore, I will import map from

9
00:00:49.670 --> 00:00:51.440
rxjs/operators.

10
00:00:51.650 --> 00:00:58.850
The map operator allows us to get some data and return new data which is then automatically re-wrapped

11
00:00:58.910 --> 00:01:01.920
into an observable so that we can still subscribe to it,

12
00:01:02.000 --> 00:01:06.090
if it would not be wrapped into an observable again, we could not subscribe.

13
00:01:06.290 --> 00:01:07.630
So let's map here and

14
00:01:07.640 --> 00:01:14.340
let's add map as an argument to pipe and map is a function which we call and that function now again takes

15
00:01:14.360 --> 00:01:20.810
another function as an input, a function which will get our response data and that should now return

16
00:01:20.840 --> 00:01:22.850
the converted response data

17
00:01:22.910 --> 00:01:29.240
and here the idea is that we return an array of posts instead of an object with that cryptic key which

18
00:01:29.240 --> 00:01:36.930
then holds our actual post. Now to convert a Javascript object which we have here to an array,

19
00:01:36.930 --> 00:01:43.410
we have to manually loop through all the keys and create a new array.

20
00:01:43.530 --> 00:01:50.010
So here, I'll create a new post array constant which is empty initially and then I'll use a for/in loop

21
00:01:50.400 --> 00:02:00.510
to go through all my keys in response data, which I know will be an object and then I want to push each

22
00:02:00.510 --> 00:02:02.370
piece of data into my posts array.

23
00:02:03.180 --> 00:02:12.260
So here, I will then use posts array and push response data key, so I'm accessing the key we're currently

24
00:02:12.260 --> 00:02:19.070
looking at in response data and therefore I'm accessing the nested Javascript object and i'm pushing

25
00:02:19.070 --> 00:02:29.560
that nested Javascript object into my posts array. However I don't just want to push that object like

26
00:02:29.560 --> 00:02:30.690
this in there,

27
00:02:30.760 --> 00:02:33.140
instead I want to push a new object in there,

28
00:02:33.140 --> 00:02:37.340
so let me add curly braces and let's use the spread operator now.

29
00:02:37.390 --> 00:02:43.420
This will pull out all the key-value pairs of that nested object we're accessing here and let's close

30
00:02:43.420 --> 00:02:50.680
this with curly braces too because this now allows me to also add one new key-value pair to that object

31
00:02:50.680 --> 00:02:56.620
we're adding to posts array and that should be an ID field which actually stores the key because

32
00:02:56.620 --> 00:03:02.940
that key here, that cryptic string is a perfect ID and it is a unique ID generated by Firebase.

33
00:03:03.010 --> 00:03:08.860
Therefore of course, I want to keep that so that we have this, for example if you wanted to delete a single

34
00:03:08.860 --> 00:03:12.180
post or anything like that.

35
00:03:12.230 --> 00:03:15.630
So now we're pushing this new object into our posts array here,

36
00:03:15.710 --> 00:03:20.810
now it is a good practice to wrap this with an if statement if you're using a for/in loop where you

37
00:03:20.810 --> 00:03:28.400
check if response data has key as its own property so that you're not trying to access the property

38
00:03:28.400 --> 00:03:29.530
of some prototype

39
00:03:30.340 --> 00:03:34.520
and with that, post here now really is an array of posts

40
00:03:34.520 --> 00:03:41.810
and now we only need to make sure that we return posts array here in map, so that this is now forwarded

41
00:03:41.870 --> 00:03:44.270
to our subscribe function. With that

42
00:03:44.270 --> 00:03:48.800
if that now reloads, indeed here, we see we have an array, we have square brackets and in there we have

43
00:03:48.800 --> 00:03:50.250
an element which has a content,

44
00:03:50.270 --> 00:03:56.840
the ID we added and the title and this is how we use observable operators to transform our data.
