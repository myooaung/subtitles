WEBVTT
1
00:00:02.640 --> 00:00:04.340
We added our recipe model,

2
00:00:04.350 --> 00:00:05.360
now let's use it.

3
00:00:05.400 --> 00:00:08.500
So back to the recipe-list component, here

4
00:00:08.610 --> 00:00:14.910
I added my recipes array and now that we created the model, we can also define a type for this. So we

5
00:00:14.910 --> 00:00:20.670
can add colon to inform TypeScript that now we will define the type for this property and the title

6
00:00:20.670 --> 00:00:29.130
will be recipe, so that will use our own model and not just a recipe but an array of recipes which is

7
00:00:29.130 --> 00:00:31.550
indicated by adding square brackets after it.

8
00:00:31.590 --> 00:00:32.970
So now TypeScript knows

9
00:00:33.090 --> 00:00:38.310
the only thing which will ever get stored in this recipes property is an array which holds a couple

10
00:00:38.310 --> 00:00:40.140
of recipe object

11
00:00:40.220 --> 00:00:45.780
or also no such objects, that would be a possibility too but certainly not a couple of strings or numbers

12
00:00:45.930 --> 00:00:49.730
but objects like this, like you find in our model.

13
00:00:49.960 --> 00:00:56.180
Now to inform TypeScript where this type is coming from, we need to add an import.

14
00:00:56.230 --> 00:01:02.440
So I'll import recipe, that is what we named it in here, right,

15
00:01:02.440 --> 00:01:08.250
that's our class name so that's what we have to specify between the curly braces here, from

16
00:01:08.260 --> 00:01:10.160
and now we have to move up one folder,

17
00:01:10.160 --> 00:01:14.680
since we're in the recipe-list folder right now, we have to go to the recipes folder because that is

18
00:01:14.680 --> 00:01:16.490
where our recipe model lives,

19
00:01:16.720 --> 00:01:23.020
so now I navigated up one folder just like with the cd command in your terminal and then it's in the

20
00:01:23.030 --> 00:01:26.310
recipe model file, again without the file extension.

21
00:01:26.440 --> 00:01:29.240
So with that, we can now use this model

22
00:01:29.470 --> 00:01:32.570
and now we can manage our array of recipes here

23
00:01:32.920 --> 00:01:36.370
and let's start with one recipe, one dummy recipe.

24
00:01:36.520 --> 00:01:42.760
So in this array, I will create a new recipe and I can use the new keyword to create a new object based

25
00:01:42.820 --> 00:01:46.330
on this recipe blueprint, based on our class

26
00:01:46.330 --> 00:01:51.550
and now when executing this like a method, we're actually calling the constructor,

27
00:01:51.550 --> 00:01:57.370
so now here we need to pass the arguments we're expecting in this constructor, so name, description and image

28
00:01:57.370 --> 00:01:58.510
path.

29
00:01:58.540 --> 00:02:05.530
Now you may choose any data you want here, I'll name this a test recipe, so that will be the title, the

30
00:02:05.530 --> 00:02:08.560
name of the recipe, then description,

31
00:02:08.560 --> 00:02:12.080
this is simply a test maybe and the imagePath,

32
00:02:12.090 --> 00:02:15.990
now as I said, I'm going to use images from the web here,

33
00:02:16.210 --> 00:02:18.610
so we're going to use a URL.

34
00:02:18.700 --> 00:02:25.820
Now let's simply search for an image and I will search for recipe,

35
00:02:26.050 --> 00:02:34.640
let's use google image search, I also want to make sure that I may use whatever I find here.

36
00:02:34.670 --> 00:02:41.040
So let's find a recipe, maybe this one here,

37
00:02:42.110 --> 00:02:50.750
let's see. If we take this and deep linking like of course shall be done in a real app, this is just for testing

38
00:02:50.750 --> 00:02:51.800
this.

39
00:02:51.800 --> 00:02:56.570
So if we take this image here and paste the path in here as a string,

40
00:02:56.690 --> 00:03:03.170
now we should be able to use this later on once we output this. So with that, we are using our own model,

41
00:03:03.170 --> 00:03:05.780
we're using it here in the recipe-list component,

42
00:03:05.810 --> 00:03:08.580
of course we won't be able to see anything for now,

43
00:03:08.780 --> 00:03:15.410
so to see that, we should actually do something in the template of the recipe-list component. Here I'm

44
00:03:15.450 --> 00:03:21.440
right now only outputting my recipe-item and I want to loop through all these items and use them to

45
00:03:21.440 --> 00:03:26.800
display my recipes. For now, what I will do is I will add a Bootstrap row

46
00:03:26.800 --> 00:03:33.110
first of all, like that and in that row, I want to add a column with the class col-xs-12 to have

47
00:03:33.110 --> 00:03:34.870
it span over the full width

48
00:03:35.240 --> 00:03:41.330
and here I will later add a button or I will add the button do right now but I will later add the functionality

49
00:03:41.600 --> 00:03:43.200
to create a new recipe.

50
00:03:43.490 --> 00:03:52.400
So here, I'll simply set up a button with the classes btn and then btn-success where I say new

51
00:03:52.550 --> 00:03:54.500
recipe, like this.

52
00:03:54.590 --> 00:03:57.290
Now again, this will be hooked up later.

53
00:03:57.650 --> 00:04:02.460
So I'll add another row below this which should now actually hold my list of recipes, here I'll

54
00:04:02.480 --> 00:04:04.390
again use col-xs-12

55
00:04:04.410 --> 00:04:09.920
to have this span over the full width and keep in mind, this will already be nested inside of this

56
00:04:09.920 --> 00:04:10.710
md-5 columns,

57
00:04:10.710 --> 00:04:13.420
so it's only that wide to begin with

58
00:04:13.670 --> 00:04:17.210
but inside this column, I wanted to span over the full width

59
00:04:17.210 --> 00:04:21.010
and now here, we will later output my recipe items.

60
00:04:21.170 --> 00:04:30.820
For now though let's put the code we will later put into app-recipe-item into this component here directly

61
00:04:30.920 --> 00:04:37.540
because right now, we will have no way of getting our recipe data down to the recipe-item.

62
00:04:37.580 --> 00:04:42.840
So that's something I will actually do after the next section once we learned this

63
00:04:43.130 --> 00:04:45.230
but so that we're able to see something,

64
00:04:45.440 --> 00:04:52.920
I will add the code for a single recipe-item here into the recipe-list directly. A single recipe-item

65
00:04:52.940 --> 00:04:53.950
should be clickable,

66
00:04:53.960 --> 00:04:59.020
so it's going to be an anchor tag because later once we click it, we want to select it

67
00:04:59.390 --> 00:05:06.950
and here, I will then actually assign another class which will be a list-group-item to make it look like

68
00:05:06.950 --> 00:05:09.960
a list-group-item in Bootstrap,

69
00:05:10.040 --> 00:05:11.950
also add clearFix,

70
00:05:12.150 --> 00:05:15.100
otherwise it will probably look wrong

71
00:05:16.550 --> 00:05:22.760
and then I'll add a div which will receive the class pull-left since I want to have this on the left

72
00:05:22.760 --> 00:05:26.080
of this list item. In there, a h4 tag

73
00:05:26.090 --> 00:05:32.600
maybe with the recipe name, this should receive the class list-group-item-heading,

74
00:05:32.600 --> 00:05:39.330
again these are all Bootstrap classes I'm using here and there, I will later output the name of the recipe,

75
00:05:39.330 --> 00:05:41.010
so recipe name for now,

76
00:05:41.030 --> 00:05:45.560
we will soon replace this with dynamic content. Below this,

77
00:05:45.650 --> 00:05:49.370
I want to have a paragraph with a class of

78
00:05:49.520 --> 00:06:00.000
list-group-item-text and here, we will have a description of the recipe

79
00:06:00.700 --> 00:06:09.110
and on the other side, I'll add a span with a class of pull-right, in this span,

80
00:06:09.110 --> 00:06:16.450
I want to output my image. So here, what I'll do is I'll add a class, img-responsive so that Bootstrap

81
00:06:16.450 --> 00:06:19.790
will resize to image automatically for me

82
00:06:19.790 --> 00:06:26.210
and again all that content will go into the app-recipe-item component after the next course section.

83
00:06:26.210 --> 00:06:30.780
One more thing I want to set on the image though, I want to add my own style,

84
00:06:30.800 --> 00:06:38.600
I'll simply add an inline style here to set the maximum height of that item to 50 pixels, so that we can't

85
00:06:38.600 --> 00:06:43.760
go above that and Bootstrap will handle the rest and resize the image appropriately.

86
00:06:43.880 --> 00:06:45.670
So that's my set up for a single item,

87
00:06:45.680 --> 00:06:49.970
of course feel free to fine tune this to your needs.

88
00:06:49.970 --> 00:06:57.170
Now with that, the goal is to replicate this item, again we will later put it into its own component

89
00:06:57.530 --> 00:07:03.620
and then fill these spaces here with dynamic data.

90
00:07:03.850 --> 00:07:05.450
This is your challenge,

91
00:07:05.450 --> 00:07:10.360
we got a recipe-list component with our recipes array,

92
00:07:10.460 --> 00:07:14.750
the array only holds one item for now, you of course are free to add more

93
00:07:14.960 --> 00:07:21.680
but even with that one item, you should be able to replicate this part here as often as needed to

94
00:07:21.680 --> 00:07:29.190
create one section of this code for each item in this recipe array and then fill name, description and

95
00:07:29.190 --> 00:07:35.080
the source attribute here, property, with the right values for this recipe.

96
00:07:35.300 --> 00:07:36.900
I will do this in the next lecture but

97
00:07:36.920 --> 00:07:39.350
definitely try doing this on your own first.
