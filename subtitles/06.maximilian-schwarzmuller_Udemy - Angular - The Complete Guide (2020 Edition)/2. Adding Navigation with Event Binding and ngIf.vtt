WEBVTT
1
00:00:02.440 --> 00:00:11.320
The thing with which I want to start in this course is to hook up navigation, to either load recipes or

2
00:00:11.340 --> 00:00:13.070
the shopping list.

3
00:00:13.290 --> 00:00:19.630
Now we will later learn a way to do this in the way it is meant to be done but the solution we will

4
00:00:19.630 --> 00:00:22.180
agree is now also is very creative and

5
00:00:22.220 --> 00:00:23.400
not bad.

6
00:00:23.590 --> 00:00:24.670
I will use ngIf

7
00:00:24.700 --> 00:00:28.840
to only load one of the two sections at a time,

8
00:00:28.930 --> 00:00:36.630
so somehow in my app component probably because that is where I include both, here

9
00:00:36.670 --> 00:00:43.660
I will need to manage which one should be displayed and I should determine which one is displayed in the

10
00:00:43.660 --> 00:00:44.970
header component,

11
00:00:45.250 --> 00:00:52.120
so I should kind of pass the information which link was clicked there to my app component, so that

12
00:00:52.120 --> 00:00:58.280
I can then switch a property there to only display one of these two components.

13
00:00:58.300 --> 00:01:02.200
I will admit that this task involves multiple steps,

14
00:01:02.200 --> 00:01:07.840
it doesn't cover anything you haven't learnt thus far though, so definitely take this as a challenge

15
00:01:08.230 --> 00:01:12.250
to implement such a navigation on your own,

16
00:01:12.550 --> 00:01:18.730
emitting some event in the header which allows us to determine which component should be displayed here

17
00:01:18.730 --> 00:01:20.060
in the app component.

18
00:01:20.230 --> 00:01:27.600
Now's your chance to pause the video, we'll do it together thereafter.

19
00:01:27.630 --> 00:01:29.520
So were you successful?

20
00:01:29.520 --> 00:01:34.840
Here is my solution, how we could get this to work the way we want it to work.

21
00:01:34.960 --> 00:01:38.490
I'll start in the header component template, here

22
00:01:38.610 --> 00:01:44.030
we got these two links and I want to attach some click listeners to these links.

23
00:01:44.430 --> 00:01:48.740
Here I will say onSelect and I will pass a string

24
00:01:48.740 --> 00:01:55.830
here, recipe maybe, we can of course pass our own data to the methods we execute here and here,

25
00:01:55.830 --> 00:02:03.990
I will select another one or add another click listener and I will say onSelect shopping list.

26
00:02:04.090 --> 00:02:09.940
Now you could of course also work with numbers there or fire two totally different methods.

27
00:02:10.480 --> 00:02:13.620
So that is my onSelect method,

28
00:02:13.780 --> 00:02:20.460
now in the header component, I of course need to implement onSelect and we get an argument here,

29
00:02:20.510 --> 00:02:22.580
we pass it here right,

30
00:02:22.570 --> 00:02:25.030
we get a string on what to select.

31
00:02:25.210 --> 00:02:30.770
So maybe let's name it feature and that will be a string,

32
00:02:30.910 --> 00:02:36.550
so let's assign the type string here by adding a colon and string thereafter and now as I said, I want

33
00:02:36.550 --> 00:02:38.160
to emit my own event.

34
00:02:38.330 --> 00:02:40.250
Hey, we learned how to do this,

35
00:02:40.270 --> 00:02:48.120
first of all I'll need to add a new property which I'll name feature selected,

36
00:02:48.310 --> 00:02:51.760
you can of course choose another name if you want.

37
00:02:51.760 --> 00:03:02.090
This should be a new event emitter and now remember, event emitter is imported from @angular/core,

38
00:03:02.170 --> 00:03:05.920
that's a generic type and we will pass string here,

39
00:03:05.950 --> 00:03:11.010
the feature which was selected in the end and we have to add parentheses to instantiate this,

40
00:03:11.020 --> 00:03:17.080
so to create an object based on the event emitter class. That is our feature

41
00:03:17.080 --> 00:03:18.840
selected event,

42
00:03:18.850 --> 00:03:25.930
now I want to use this property which now holds this event emitter as a value to emit an event whenever

43
00:03:25.930 --> 00:03:30.000
we click one of the buttons and I will then emit feature,

44
00:03:30.040 --> 00:03:37.780
so this string we receive from these method calls here in our template. Well with that in place, the

45
00:03:37.780 --> 00:03:44.400
missing piece is to enable this event to be listened to from outside of this component.

46
00:03:44.590 --> 00:03:49.960
So we have to attach something to this property to make it listenable from the parent component,

47
00:03:50.080 --> 00:03:57.550
the app component in this case, that something is the @output decorator, don't forget the parentheses

48
00:03:57.700 --> 00:04:04.180
which also needs to be imported from @angular/core, @output enables us to use this event or

49
00:04:04.210 --> 00:04:07.230
to listen to it from the parent component.

50
00:04:07.540 --> 00:04:14.050
So in the app component which is the parent component which adds app header here, I will listen

51
00:04:14.050 --> 00:04:21.230
to the feature selected event and then here, I will execute onNavigate let's say and of course, I'm

52
00:04:21.250 --> 00:04:24.970
interested in the data I'm receiving from feature selected,

53
00:04:25.300 --> 00:04:28.000
so I can get access to it with $event,

54
00:04:28.120 --> 00:04:35.680
this protected name we could use in the template to get access to any data an event passes to us.

55
00:04:36.060 --> 00:04:43.400
Now just because this might be confusing, if you don't specify $event here but other data

56
00:04:44.800 --> 00:04:47.400
like we did here right,

57
00:04:47.410 --> 00:04:52.300
we kind of overrode $event, that doesn't actually override it,

58
00:04:52.330 --> 00:04:59.200
you simply determine which data you want to pass to your own method and $event may also be

59
00:04:59.200 --> 00:05:06.880
used as a second argument here, $event will always refer to the event data anywhere between

60
00:05:06.880 --> 00:05:08.480
these quotation marks here,

61
00:05:08.590 --> 00:05:14.040
so no matter which place it has in the method argument list here.

62
00:05:14.320 --> 00:05:18.580
So I just wanted to make sure that this doesn't lead to any confusion.

63
00:05:18.580 --> 00:05:23.620
So let's turn this back to $event to get access to the data we actually pass in our

64
00:05:23.620 --> 00:05:32.230
own event and now in the app.component.ts file, I will add onNavigate and here, I will receive

65
00:05:32.230 --> 00:05:37.040
the where should we navigate to information. So you may choose any name you want,

66
00:05:37.040 --> 00:05:43.960
I'll go with feature again, this is the feature we want to navigate to and now we should make sure that we

67
00:05:43.960 --> 00:05:46.900
actually store this feature.

68
00:05:47.140 --> 00:05:53.620
So maybe here, we should say loaded feature because we store which feature should be displayed

69
00:05:53.980 --> 00:06:01.670
and initially, that might be our recipes and maybe to make sure that we always use the same string, let's

70
00:06:01.680 --> 00:06:02.090
check it

71
00:06:02.090 --> 00:06:06.020
here, recipe is the name here, recipe feature,

72
00:06:06.220 --> 00:06:09.950
so let's go with recipe here too

73
00:06:10.250 --> 00:06:17.390
and then in onNavigate, I will set this loaded feature equal to the feature we receive here as an argument.

74
00:06:17.720 --> 00:06:24.370
And you could even omit this method and directly set loaded feature equal $event here

75
00:06:24.470 --> 00:06:28.740
but I will go for the longer approach to be very explicit about what's happening here.

76
00:06:29.150 --> 00:06:33.170
So with that, we're getting this loaded feature,

77
00:06:33.170 --> 00:06:38.960
now we can use ngIf to determine which of the two components should be displayed.

78
00:06:39.110 --> 00:06:49.820
App recipes should be displayed if loaded feature equals recipe and shopping list should be displayed

79
00:06:49.970 --> 00:06:56.510
whenever loaded feature let's say does not equal recipe,

80
00:06:56.610 --> 00:07:00.510
so that will also catch cases where it somehow is set to something else.

81
00:07:01.740 --> 00:07:04.650
So with that, we're using ngIf,

82
00:07:04.770 --> 00:07:06.450
now let's see if that works.

83
00:07:06.510 --> 00:07:08.470
We only see the recipe now

84
00:07:08.630 --> 00:07:13.420
and if I click on a shopping list, we see the shopping list and the other way around.

85
00:07:13.680 --> 00:07:17.160
So now navigation is kind of working, again

86
00:07:17.190 --> 00:07:21.270
we will later improve this but for now, that is a great solution.

87
00:07:21.540 --> 00:07:29.730
Now let's move on to making the list items here real list items living in their own component.
