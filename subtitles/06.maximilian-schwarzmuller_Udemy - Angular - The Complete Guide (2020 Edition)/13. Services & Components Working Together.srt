1
00:00:02,520 --> 00:00:06,690
Now to fix that, we have two possible ways of doing that.

2
00:00:06,690 --> 00:00:15,270
The first alternative is that we use a subject in the post service where we next our posts when we

3
00:00:15,270 --> 00:00:18,960
got them and we subscribe to that subject in the app component

4
00:00:18,960 --> 00:00:20,550
and this would be a fine pattern,

5
00:00:20,550 --> 00:00:22,480
nothing wrong with that.

6
00:00:22,530 --> 00:00:28,440
The alternative and maybe a bit more suited here because the subject would be perfect if we have multiple

7
00:00:28,440 --> 00:00:30,250
components interested in the posts,

8
00:00:30,270 --> 00:00:31,860
that's not the case here,

9
00:00:32,160 --> 00:00:40,830
so a simpler and for this scenario, a better solution would be to simply return the result of our get

10
00:00:40,830 --> 00:00:43,990
method and of the pipe method thereafter

11
00:00:44,310 --> 00:00:46,550
and that would be our observable.

12
00:00:46,620 --> 00:00:49,320
So I don't want to subscribe here,

13
00:00:49,320 --> 00:00:55,530
instead I only return the prepared observable here in fetch posts and therefore right now no

14
00:00:55,530 --> 00:01:01,260
HTTP request gets sent because as you learned, requests are only sent when someone is interested.

15
00:01:01,260 --> 00:01:08,790
So here I'm not subscribing but now that I return this here, I can and I have to subscribe in the app

16
00:01:08,790 --> 00:01:10,080
component.

17
00:01:10,080 --> 00:01:15,420
So here where I call fetch posts, I can now subscribe again and I get my posts

18
00:01:15,600 --> 00:01:17,090
and now here we can set

19
00:01:17,220 --> 00:01:22,680
this is fetching to false and I want to set

20
00:01:22,680 --> 00:01:28,920
this is fetching to true here right before I start sending that request and even more importantly, we

21
00:01:28,920 --> 00:01:32,940
can set this loaded post equal to the posts we get back and

22
00:01:33,580 --> 00:01:37,860
this is now the code snippet I can also copy to onFetchPosts

23
00:01:37,950 --> 00:01:43,650
and yes you could of course also outsource this into a separate private method again to avoid this code

24
00:01:43,680 --> 00:01:46,020
duplication here if you want to.

25
00:01:46,020 --> 00:01:52,150
So now we moved the result handling so to say into the component

26
00:01:52,350 --> 00:01:59,010
but the more heavy lifting, the part detached from the template and from the UI which is the sending

27
00:01:59,010 --> 00:02:03,980
of the request and the transformation of the data, that now lives in the service

28
00:02:04,170 --> 00:02:09,610
and this is a best practice when working with Angular and HTTP requests. Move

29
00:02:09,630 --> 00:02:15,390
the part that is related to your template, which in my case here is managing the loading status and managing

30
00:02:15,390 --> 00:02:22,500
the loaded data, move that into the component and be informed about the result of your HTTP request

31
00:02:22,740 --> 00:02:29,460
by subscribing in the component but move the rest into the service and simply return the observable

32
00:02:29,460 --> 00:02:36,730
there so that you set up everything in the service but you can subscribe in the component. Now of course

33
00:02:36,730 --> 00:02:39,670
I'm using a different pattern for creating a post, there

34
00:02:39,700 --> 00:02:46,480
I am subscribing in the service and this can be fine too. If your component doesn't care about

35
00:02:46,660 --> 00:02:52,600
the response and about whether the request is done or not, as it is the case here in our application,

36
00:02:52,600 --> 00:02:57,730
if the component doesn't care about it, then there is no reason to subscribe in the component,

37
00:02:57,730 --> 00:03:01,070
then you can just subscribe in the service as we're doing it here

38
00:03:01,210 --> 00:03:07,600
but if it does care about the response and the response status as it does for fetching posts, then having

39
00:03:07,600 --> 00:03:10,720
that service component split is great.

40
00:03:10,720 --> 00:03:17,620
And now with that if this reloads, you see the loading indicator again, you see the posts again and now

41
00:03:17,620 --> 00:03:22,900
we have the best of both worlds and we have a setup which you will see a lot and which you will work

42
00:03:22,900 --> 00:03:25,540
with a lot when you're working with Angular.
