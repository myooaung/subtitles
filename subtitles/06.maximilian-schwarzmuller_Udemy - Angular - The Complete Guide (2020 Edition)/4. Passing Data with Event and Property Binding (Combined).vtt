WEBVTT
1
00:00:02.350 --> 00:00:07.350
So with all these features added, let's make sure that we can click on a single item here and load it in

2
00:00:07.360 --> 00:00:09.490
the recipe details section.

3
00:00:09.490 --> 00:00:11.610
Again this is the challenge for you,

4
00:00:11.620 --> 00:00:14.140
it only uses tools we learned thus far,

5
00:00:14.320 --> 00:00:23.350
you somehow need to emit an event on the single recipe item component, that it was clicked and then get

6
00:00:23.380 --> 00:00:32.410
this event somehow to the recipes component which then also holds the recipe detail to pass down the

7
00:00:32.410 --> 00:00:37.780
event data, which recipe was selected to that component.

8
00:00:38.260 --> 00:00:41.750
Now you're going to have to work with property and event binding for this,

9
00:00:41.770 --> 00:00:43.980
again only things you learned thus far

10
00:00:44.110 --> 00:00:49.420
and if you're getting stuck or something like this, of course we will solve it together in a couple

11
00:00:49.420 --> 00:00:50.210
of seconds,

12
00:00:50.230 --> 00:00:54.600
here's your chance to pause.

13
00:00:54.690 --> 00:00:57.440
So were you successful? Now

14
00:00:57.450 --> 00:01:03.890
the approach we're going to do now, we're going to follow now is only a temporary approach.

15
00:01:03.960 --> 00:01:08.030
We'll later learn how to do this more elegantly and easier

16
00:01:08.250 --> 00:01:12.470
but it's also a great approach because it uses the things we learned thus far

17
00:01:12.630 --> 00:01:17.650
and it gives us an impression on when a different approach might be useful.

18
00:01:17.670 --> 00:01:25.290
So what's our goal? Here in the single recipe item component, here we got this link and we want to make

19
00:01:25.290 --> 00:01:32.730
sure that whenever this link is clicked, we emit an event informing our parent component that this recipe

20
00:01:32.730 --> 00:01:34.610
was selected.

21
00:01:35.160 --> 00:01:43.770
So for this to work, I'll add a click listener to this link and I will say onSelected here, of course

22
00:01:43.770 --> 00:01:46.630
you can choose any method name you want.

23
00:01:47.000 --> 00:01:49.180
I'll implement onSelected here

24
00:01:50.140 --> 00:01:52.450
and there I want to emit my own event,

25
00:01:52.900 --> 00:02:00.650
so I will name it recipe selected and this will use the event emitter as you'll learn,

26
00:02:00.780 --> 00:02:09.220
again make sure to import it from @angular/core. The event emitter here won't pass any information,

27
00:02:09.220 --> 00:02:18.160
so I'll set the type to void because it will contain no information and we have to add @output so

28
00:02:18.160 --> 00:02:22.090
that we can listen to this event from outside, @output 

29
00:02:22.120 --> 00:02:25.100
also needs to be imported from @angular/core.

30
00:02:25.720 --> 00:02:33.620
In onSelected, I then want to trigger recipe selected and call emit, not error, emit.

31
00:02:33.620 --> 00:02:37.380
Again we don't pass any error because here we specify that we won't,

32
00:02:37.480 --> 00:02:38.990
we don't need to pass any.

33
00:02:39.280 --> 00:02:44.500
You could argue that you want to pass the recipe on which this was emitted but you don't need to do

34
00:02:44.500 --> 00:02:51.540
this because what is the parent component listening to that? That of course is our recipe list component,

35
00:02:51.620 --> 00:02:54.680
that is where we use the single recipe item.

36
00:02:54.680 --> 00:03:01.860
Now if we implement our own event here and listen to recipe selected, well we already got information

37
00:03:01.860 --> 00:03:06.940
of which recipe this will be because we have it here from the ngFor loop.

38
00:03:06.980 --> 00:03:10.340
Keep in mind, this will replicate this element, so for each element, 

39
00:03:10.340 --> 00:03:11.930
it's absolutely clear

40
00:03:12.080 --> 00:03:19.400
which element this is. In recipe selected, we again need to emit an event though because we're

41
00:03:19.400 --> 00:03:26.510
not there, where we want to be, we have to go up one level because we want to reach our recipes component,

42
00:03:26.510 --> 00:03:29.060
we're just the one implementing the recipe list.

43
00:03:29.060 --> 00:03:35.030
This is probably where you see that as a kind of complex to simply inform another component that we

44
00:03:35.030 --> 00:03:38.600
clicked something. For now it's the only method we have

45
00:03:38.750 --> 00:03:43.470
and it's a great practice but no worries, we will improve this in the future.

46
00:03:43.970 --> 00:03:49.840
So in recipe list, we need to emit another event, so here I'll execute onRecipeSelected, of course

47
00:03:49.850 --> 00:03:56.170
choose any name you want and that method of course has to be implemented here.

48
00:03:56.420 --> 00:04:04.190
Now here, we need to get some extra information, which recipe was selected and therefore, I will pass the

49
00:04:04.190 --> 00:04:05.960
recipe element here,

50
00:04:06.140 --> 00:04:10.890
so that is the recipe which we did select.

51
00:04:11.160 --> 00:04:16.690
Now with that we have that information, we know here we will get the selected recipe which will be of type

52
00:04:16.710 --> 00:04:17.970
recipe,

53
00:04:18.090 --> 00:04:24.060
we are already importing the model therefore we can easily use the type and then we, as I mentioned, want

54
00:04:24.060 --> 00:04:25.560
to emit another event.

55
00:04:25.710 --> 00:04:32.640
So here we need to find a fitting name, before we used recipe selected, that would be a fitting name

56
00:04:32.640 --> 00:04:38.790
here too but to make it super clear that this is a different event because custom events don't propagate

57
00:04:38.790 --> 00:04:44.400
up so we can't listen to the event of a child of a child,

58
00:04:44.970 --> 00:04:46.250
I want to choose a different name,

59
00:04:46.260 --> 00:04:54.440
recipe was selected maybe, which also uses the event emitter, so make sure to import it from @angular/core

60
00:04:54.900 --> 00:04:58.880
and here I will pass my recipe as a type. Here

61
00:04:58.950 --> 00:05:05.790
I will pass the recipe which was selected because that is the information the recipes component will need in

62
00:05:05.790 --> 00:05:07.200
the end.

63
00:05:07.200 --> 00:05:14.550
Now as before, we need to add @output here and import this from @angular/core, so that we can listen

64
00:05:14.550 --> 00:05:23.690
to this event from outside and then here in onRecipeSelected, we can use recipe was selected emitted

65
00:05:24.000 --> 00:05:27.830
and pass the recipe as data.

66
00:05:27.870 --> 00:05:30.700
Now with that, we can go to our recipe component,

67
00:05:30.780 --> 00:05:37.110
our main component for this feature area and on the list, we can now listen to recipe was selected,

68
00:05:37.160 --> 00:05:40.000
the custom event we created a second ago

69
00:05:40.320 --> 00:05:44.550
and here, I now want to store this selected recipe.

70
00:05:44.550 --> 00:05:53.850
So in my TypeScript file, I will create a selected recipe property which will be of type recipe,

71
00:05:53.850 --> 00:05:57.680
make sure to import recipe from your model file then

72
00:05:57.990 --> 00:06:02.080
and initially, this is undefined because I'm not assigning a value.

73
00:06:02.700 --> 00:06:04.140
I will assign a value here

74
00:06:04.140 --> 00:06:05.740
once this event here occurs,

75
00:06:05.790 --> 00:06:10.130
so then I will have set selected recipe equal to $event

76
00:06:10.350 --> 00:06:15.120
and of course you could also put this into a method but since this is all I want to do, I can put it

77
00:06:15.120 --> 00:06:16.610
into the template here.

78
00:06:16.620 --> 00:06:21.510
Generally though, you should try to put as little logic as possible into your template.

79
00:06:21.840 --> 00:06:27.390
So here, I'm referring to the selected recipe property of my recipes component and $event

80
00:06:27.420 --> 00:06:32.050
as you learned refers to the data we passed with an event,

81
00:06:32.100 --> 00:06:42.640
now we can pass this information to the recipe detail component. First of all though, I will add ngIf to

82
00:06:42.640 --> 00:06:49.510
this detail component to determine if we want to display it because I only want to display it if selected

83
00:06:49.570 --> 00:06:51.490
recipe is set.

84
00:06:51.490 --> 00:06:58.520
So here, I will check if selected recipe and if it is undefined, that will resolve to false

85
00:06:59.020 --> 00:07:07.360
and if it is not set, I want to say a dummy text, so I will use ng-template for this to define a paragraph

86
00:07:07.360 --> 00:07:19.670
where I say please select a recipe and ng-template will receive a local reference of info text

87
00:07:19.780 --> 00:07:26.680
and now with that placed on ng-template, we can use this ngIf else syntax where I add a semi-colon

88
00:07:27.010 --> 00:07:34.040
and then else info text, so that else the content of this template should be displayed.

89
00:07:34.410 --> 00:07:42.130
If we save this, we see please select the recipe here, so that it's working as it should,

90
00:07:42.130 --> 00:07:47.080
now if we select a recipe by clicking here, we see the recipe detail.

91
00:07:47.080 --> 00:07:51.430
Now of course we don't see the detail data because we're right now not passing this recipe down to

92
00:07:51.430 --> 00:07:59.170
the component but at least our if check is working and we're passing the recipe, this event successfully.

93
00:07:59.200 --> 00:08:05.800
Now as a final step, let's pass the selected recipe to the app recipe detail. For that

94
00:08:05.800 --> 00:08:11.610
we have to go to that component and add a property for this, here

95
00:08:11.650 --> 00:08:17.170
I'm going to name this recipe again which will be of type recipe and make sure to import this from

96
00:08:17.170 --> 00:08:19.040
your recipe.model file.

97
00:08:19.060 --> 00:08:26.560
It's not set initially but I will add @input so that we may set it from outside, input of course as

98
00:08:26.560 --> 00:08:35.110
always has to be imported from @angular/core and with that, we can now go back to the recipes component

99
00:08:35.440 --> 00:08:37.840
and bind to that recipe

100
00:08:37.930 --> 00:08:43.930
and of course we want to bind our selected recipe and keep in mind, this whole component will only be

101
00:08:43.930 --> 00:08:46.630
rendered, only be attached to the DOM

102
00:08:46.840 --> 00:08:51.760
if this condition is true, so if selected recipe is not undefined.

103
00:08:51.760 --> 00:08:58.720
Therefore once we pass this down to the recipe detail component, we know that we can safely output

104
00:08:58.720 --> 00:09:02.500
the recipe name here, so recipe name,

105
00:09:02.530 --> 00:09:05.530
keep in mind recipe is the property name in this component,

106
00:09:05.590 --> 00:09:11.940
the one to which we're binding to from outside and this will never fail because recipe will always be

107
00:09:11.940 --> 00:09:12.620
set

108
00:09:12.630 --> 00:09:17.020
otherwise this component wouldn't be rendered due to ngIf. Here

109
00:09:17.040 --> 00:09:24.690
I also want to use property binding to display my image, so recipe imagePath then and here, I'll use

110
00:09:24.690 --> 00:09:27.600
string interpolation to display the name 

111
00:09:27.600 --> 00:09:32.330
if we can't load the image for some reason. The buttons are fine

112
00:09:32.490 --> 00:09:38.010
but below in the description, I will set the recipe description.

113
00:09:38.200 --> 00:09:44.880
Now with this, if we save that and we click on the recipe, we see the recipe here.

114
00:09:45.010 --> 00:09:47.630
Now the image is a little bit too big,

115
00:09:47.830 --> 00:09:56.860
so maybe on this image, let's simply add some styling to it, an inline style where we set the maximum height

116
00:09:57.190 --> 00:10:01.870
to 300 pixels maybe, like that.

117
00:10:01.910 --> 00:10:03.960
Now with that, that looks better.

118
00:10:03.980 --> 00:10:06.140
So now we got this working,

119
00:10:06.140 --> 00:10:09.340
looks like nothing changed because we get the same text here,

120
00:10:09.350 --> 00:10:17.630
so let's quickly go to our recipe list component and name this another test recipe so that we can

121
00:10:17.630 --> 00:10:19.940
actually see if we correctly switch

122
00:10:20.090 --> 00:10:21.070
and we do.

123
00:10:21.200 --> 00:10:22.700
So that is working,

124
00:10:22.700 --> 00:10:28.310
the missing piece now is the shopping list where I want to make these input fields here work, at least in

125
00:10:28.310 --> 00:10:29.650
a basic way.
