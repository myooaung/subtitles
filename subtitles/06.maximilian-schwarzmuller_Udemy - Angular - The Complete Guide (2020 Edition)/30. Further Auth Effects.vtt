WEBVTT
1
00:00:02.500 --> 00:00:07.200
We're missing the loading spinner because in the auth reducer, I'm setting loading

2
00:00:07.240 --> 00:00:14.230
when we do start the login process but I'm not setting it when we start the sign-up process.

3
00:00:14.230 --> 00:00:17.250
Good thing is we can simply register a second case here,

4
00:00:17.470 --> 00:00:23.650
thanks to switch case statements falling through automatically, so we can group multiple cases and run

5
00:00:23.650 --> 00:00:24.990
the same code

6
00:00:25.060 --> 00:00:27.960
and here, we can also handle sign-up start,

7
00:00:28.090 --> 00:00:33.310
so that should set loading to true. Another thing I'm not liking is that in auth component,

8
00:00:33.310 --> 00:00:38.950
we're setting this error to null when we handle the error, we call handle error when we click that button

9
00:00:38.950 --> 00:00:40.970
in the modal we open,

10
00:00:41.050 --> 00:00:46.740
also, we have our subscription to our store which we're not unsubscribing from.

11
00:00:46.810 --> 00:00:52.740
First of all, let's handle that subscription to the storeSub which is of type subscription,

12
00:00:52.810 --> 00:00:54.740
let's set up the subscription here,

13
00:00:54.760 --> 00:01:01.610
this storeSub is equal to our subscription we create here and in ngOnDestroy,

14
00:01:01.870 --> 00:01:08.650
if we have a storeSub which we should, so this check is kind of not required,

15
00:01:08.800 --> 00:01:11.170
we can unsubscribe here.

16
00:01:11.170 --> 00:01:12.000
So that's one thing, now

17
00:01:12.010 --> 00:01:19.030
regarding the error handling, resetting the error here in the component and not doing it in the NgRx

18
00:01:19.030 --> 00:01:25.600
state is not really that great because it means that our NgRx state is not in sync with the state

19
00:01:25.600 --> 00:01:29.140
in this component, NgRx should be the only source of truth

20
00:01:29.140 --> 00:01:34.750
however, at least for all the state it manages, so kind of duplicating state management is something

21
00:01:34.750 --> 00:01:36.170
you should avoid.

22
00:01:36.200 --> 00:01:48.870
Therefore let's add a new action, clear error or handle error, which also has that auth prefix, clear error,

23
00:01:48.870 --> 00:01:50.120
something like that.

24
00:01:50.290 --> 00:02:01.070
Let's create an object for that action, clear error implements an action, has a readonly type which is

25
00:02:01.070 --> 00:02:08.440
equal to clear error, so to this identifier. We need no constructor because no payload needs to be added

26
00:02:08.530 --> 00:02:15.160
but I do want to add it here to this union type and now we can handle it in the reducer, here in the

27
00:02:15.160 --> 00:02:17.390
reducer,

28
00:02:17.430 --> 00:02:26.670
I add a new case, auth actions clear error in which case I want to return the old state but set the auth

29
00:02:26.860 --> 00:02:32.260
error to null, so that we have no error here in the NgRx state

30
00:02:32.490 --> 00:02:38.060
and now we can dispatch this from inside the auth component instead of setting this error here.

31
00:02:38.070 --> 00:02:43.570
So here, I will instead call this store dispatch auth actions,

32
00:02:43.620 --> 00:02:49.120
a new auth actions

33
00:02:49.350 --> 00:02:51.630
clear error like that

34
00:02:51.630 --> 00:02:56.880
and this is now the cleaner approach for handling this because now, the NgRx state and the local

35
00:02:56.880 --> 00:02:58.680
state are in sync.

36
00:02:58.710 --> 00:03:04.680
So now if I try logging in with wrong credentials again, we get an error and I can still handle it and

37
00:03:04.680 --> 00:03:05.940
it works as before

38
00:03:06.030 --> 00:03:08.060
but now it's a bit cleaner.

39
00:03:08.670 --> 00:03:14.640
With that, we're almost done with managing all effects that are related to NgRx,

40
00:03:14.640 --> 00:03:20.280
the remaining pieces are that I also want to redirect when I do logout,

41
00:03:20.490 --> 00:03:25.980
I do redirect but I do that with the help of my auth service and that's not how I want to do it anymore.

42
00:03:27.270 --> 00:03:33.210
Instead of redirecting here in the logout function in the auth service, I want to do that with the help of

43
00:03:33.210 --> 00:03:40.230
my effects and then we'll also have to find a solution for all the local storage management here.

44
00:03:40.230 --> 00:03:47.370
So first of all, let's add an effect for logging out that redirects us and actually, we already have an effect

45
00:03:47.370 --> 00:03:49.140
here that redirects us.

46
00:03:49.140 --> 00:03:56.510
Currently, it's called auth success but we can rename this, we can name it auth redirect because that is really

47
00:03:56.510 --> 00:03:58.540
what we do in this effect.

48
00:03:58.550 --> 00:04:05.810
Now we do react to the authenticate success action but as I mentioned, you can react to multiple actions

49
00:04:05.810 --> 00:04:13.760
here, so we can also react to auth actions, logout and call redirect there as well,

50
00:04:13.760 --> 00:04:19.620
this allows me to remove that here from auth service logout.

51
00:04:19.640 --> 00:04:24.820
In addition, I'm currently dispatching logout here from inside logout,

52
00:04:24.860 --> 00:04:27.530
well that is not really what I want to do, instead

53
00:04:27.800 --> 00:04:33.140
let's dispatch this from inside the component where we do trigger logout and that would be our header

54
00:04:33.170 --> 00:04:34.140
component.

55
00:04:34.340 --> 00:04:41.480
So here instead of calling this auth service logout, let's use this store dispatch and now dispatch a

56
00:04:41.480 --> 00:04:45.720
new auth action, for which we need to import it first of all.

57
00:04:45.720 --> 00:04:54.330
So import everything as auth actions from the auth folder, store auth actions

58
00:04:54.460 --> 00:05:01.580
and with that, I'll import it into the header, here we can create a new logout action.

59
00:05:01.610 --> 00:05:03.750
Now we don't use the service for that.

60
00:05:03.770 --> 00:05:09.560
This also means that since we now skip the service, we are not setting

61
00:05:09.740 --> 00:05:15.680
removing that from a local storage but we already have the problem that we're not setting anything in

62
00:05:15.680 --> 00:05:21.350
local storage, which is, if you watch closely, why we always restart in unauthenticated mode.

63
00:05:21.350 --> 00:05:27.710
If I do login and I reload, we're back unauthenticated because we're not storing anything in local storage

64
00:05:27.980 --> 00:05:34.010
and therefore our auto login logic doesn't succeed because the parts where we would have accessed local

65
00:05:34.010 --> 00:05:42.990
storage, here in handle authentication, we're not calling this anymore. Handle authentication was called

66
00:05:43.260 --> 00:05:49.810
from inside login and from inside sign-up but we're not using these methods anymore,

67
00:05:49.830 --> 00:05:56.520
indeed we can actually remove these methods here and our application will still work because we're not

68
00:05:56.520 --> 00:05:58.370
using them. Hence

69
00:05:58.380 --> 00:06:07.850
now the goal will be to kind of transfer this existing logic for managing our user data in the local

70
00:06:07.850 --> 00:06:11.360
storage into the @ngrx/effects world as well.
