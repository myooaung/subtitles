WEBVTT
1
00:00:02.840 --> 00:00:08.690
Now with our pipes being added and parameterized, it's also important to know that you can combine pipes

2
00:00:08.690 --> 00:00:09.640
in Angular.

3
00:00:09.890 --> 00:00:16.990
So far, we only use pipes on their own, so we added the date pipe to our server started output here

4
00:00:17.180 --> 00:00:20.300
and we added the uppercase pipe to the instance type.

5
00:00:20.300 --> 00:00:24.860
Now what if we wanted to yes, format the date like this

6
00:00:25.040 --> 00:00:29.050
but then for some reason, also make it all uppercase?

7
00:00:29.390 --> 00:00:37.330
Now you can simply chain pipes by adding a pipe symbol after a pipe, so we could add uppercase here.

8
00:00:37.400 --> 00:00:40.210
Now the order might be important,

9
00:00:40.370 --> 00:00:44.250
generally it will be parsed from left to right.

10
00:00:44.510 --> 00:00:48.410
So server started gets into this pipe here,

11
00:00:48.440 --> 00:00:54.020
so the date pipe gets applied to our server started property output here, to the string interpolation.

12
00:00:54.800 --> 00:01:00.030
The uppercase pipe then gets applied to the result of this operation

13
00:01:00.110 --> 00:01:03.880
and I can show this if I save it like this,

14
00:01:04.010 --> 00:01:07.520
you see that the date indeed is uppercase.

15
00:01:07.520 --> 00:01:18.440
Now if I switch positions here and put the uppercase pipe first and then parse the date, you see we get

16
00:01:18.440 --> 00:01:19.360
an error

17
00:01:19.670 --> 00:01:27.950
and if we open up the console and view this error, you see that this argument here is not correct

18
00:01:27.950 --> 00:01:29.060
for the uppercase pipe,

19
00:01:29.120 --> 00:01:33.080
it doesn't know how to parse it because it is a date and not a string

20
00:01:33.290 --> 00:01:37.010
and there are elements which can't be turned into uppercase.

21
00:01:37.220 --> 00:01:42.500
So this is why it's important to watch the order,

22
00:01:42.500 --> 00:01:49.100
you should apply the pipes in the order you want to transform your input. So transforming the date into

23
00:01:49.100 --> 00:01:52.280
something which can be parsed first is absolutely fine

24
00:01:52.280 --> 00:01:59.240
and as you will see, will work correctly, you see it here but the other way around wouldn't work in this

25
00:01:59.240 --> 00:02:00.170
example.

26
00:02:00.170 --> 00:02:04.640
So again always keep this order in mind, from left to right,

27
00:02:04.670 --> 00:02:09.740
this is how it gets executed and how pipes get applied. With that out of the way,

28
00:02:09.800 --> 00:02:16.700
let's create our own pipe in case there is some functionality we need which is not available in one

29
00:02:16.700 --> 00:02:17.900
of the built-in pipes.
