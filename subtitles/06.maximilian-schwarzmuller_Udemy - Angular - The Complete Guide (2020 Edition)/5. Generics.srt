1

00:00:01,630  -->  00:00:02,700
Whatever.

2

00:00:02,910  -->  00:00:10,590
So we had a lot of interface's Let's jump to the next point generic as well this is a rather short file

3

00:00:10,950  -->  00:00:19,500
because I could talk a lot about generics but we don't use them that often and this really will be something

4

00:00:19,500  -->  00:00:21,790
for real Types Of course.

5

00:00:21,840  -->  00:00:25,390
So you might look up documentation if you want to learn more about generics.

6

00:00:25,400  -->  00:00:27,570
Here is a quick introduction.

7

00:00:27,570  -->  00:00:37,210
Generics allow us to well be flexible regarding the time certain objects use.

8

00:00:37,220  -->  00:00:40,750
So to say might sound strange.

9

00:00:40,860  -->  00:00:46,630
Let's look at the example here I've got an area of number theory and I'm assigning it to type 3.

10

00:00:46,920  -->  00:00:54,100
No area on its own is a type but it's a really useful type if we say what should be inside this area

11

00:00:54,300  -->  00:00:56,110
because it's just an object.

12

00:00:56,190  -->  00:00:57,630
Classes say.

13

00:00:57,840  -->  00:01:04,810
But it has to be something inside this error that values this area holds no general and the Array class

14

00:01:04,810  -->  00:01:11,970
theory is able to hold numbers or strings or whatever we like or we might feel the need to explicitly

15

00:01:12,000  -->  00:01:17,070
tell it that it should only except let's say numbers in this example.

16

00:01:17,070  -->  00:01:26,180
So the class area is a generic class which will work for a broad band with for basically all types are

17

00:01:26,190  -->  00:01:34,740
able to limit it to on runtime say this Pacific area we store in this variable should only be all able

18

00:01:34,740  -->  00:01:36,580
to note numbers.

19

00:01:36,640  -->  00:01:41,840
Therefore this is valid an area where we assign just a number every.

20

00:01:42,110  -->  00:01:49,320
But if I comment this out and comment this in this area holding a string on and you can already see

21

00:01:49,320  -->  00:01:50,460
it's red.

22

00:01:50,820  -->  00:01:52,860
It's having this red underline.

23

00:01:52,920  -->  00:02:03,990
And if I'm copilot's generics file here you can see we get we're getting an error because well we're

24

00:02:03,990  -->  00:02:09,960
trying to assign a string value to an area which should only be able to hold numbers.

25

00:02:10,020  -->  00:02:14,530
That's really it about race or about generics.

26

00:02:14,640  -->  00:02:20,980
There is more to it than the one side but this is how we will use Trotter's words to tell certain objects

27

00:02:21,000  -->  00:02:31,870
like an array or an event emitter or an observable which kind of value will you hold or turn or which

28

00:02:31,930  -->  00:02:35,620
ever interaction is that we have with this value.

29

00:02:36,150  -->  00:02:41,700
I hope this is clear why and how we used to generics you see in the next video by
