WEBVTT
1
00:00:02.220 --> 00:00:05.520
This is our project and there, we have the app module.

2
00:00:05.520 --> 00:00:07.850
Actually this is not the only module

3
00:00:07.890 --> 00:00:12.480
and again, with module, I mean things with that NgModule decorator,

4
00:00:12.720 --> 00:00:17.440
we got a one other module in this app and that would be the app routing module. Here,

5
00:00:17.550 --> 00:00:20.120
we also have an NgModule.

6
00:00:20.280 --> 00:00:26.730
So we already do use two modules and we use these modules to set certain things up and group certain

7
00:00:26.730 --> 00:00:27.660
things together.

8
00:00:27.660 --> 00:00:29.950
Now let's start with the app module,

9
00:00:29.970 --> 00:00:33.420
there we have a long list of declarations for example.

10
00:00:33.570 --> 00:00:39.690
As I mentioned, when we added things to that list, declarations is in the end an array of all the components,

11
00:00:39.870 --> 00:00:44.540
directives and custom pipes you're using in your application.

12
00:00:44.580 --> 00:00:50.520
So all these things have to go into declarations, otherwise you can't use them in your templates or in

13
00:00:50.520 --> 00:00:52.070
your routes.

14
00:00:52.080 --> 00:00:59.040
We also have that imports array. The imports array here is important because that allows you to import

15
00:00:59.280 --> 00:01:01.470
other modules into this module,

16
00:01:01.560 --> 00:01:07.150
so the imports array here is important to split your app into multiple modules.

17
00:01:07.170 --> 00:01:09.900
Thus far we created only one extra module,

18
00:01:09.900 --> 00:01:15.600
the app routing module but we're using a couple of modules that ship with Angular, like the forms

19
00:01:15.600 --> 00:01:18.630
module, the reactive forms module and so on.

20
00:01:18.630 --> 00:01:24.810
Now if we were to look into such a module, like the forms module, we would find a module with

21
00:01:24.810 --> 00:01:30.990
@NgModule as well and in there, we would have a declarations array with all the form related directives Angular

22
00:01:30.990 --> 00:01:31.860
supports,

23
00:01:31.860 --> 00:01:38.250
so things like automatically detecting a form element to create a form with the template driven approach

24
00:01:38.430 --> 00:01:41.010
or the required or the email directives.

25
00:01:41.010 --> 00:01:44.160
So all of that is basically included in the forms module

26
00:01:44.160 --> 00:01:48.940
and so that you don't have to add all these features individually to your declarations array,

27
00:01:49.050 --> 00:01:56.530
we can simply import the forms module which speeds this up. The providers array here then is another important

28
00:01:56.580 --> 00:01:58.470
key in our NgModule,

29
00:01:58.530 --> 00:02:02.340
here we define all the services we want to provide,

30
00:02:02.460 --> 00:02:06.920
however I'll come back to services and modules because that's kind of special.

31
00:02:06.960 --> 00:02:12.870
It's not the case that you can only use a service in the module where you provide it or at least that's

32
00:02:12.870 --> 00:02:15.440
not always the case but I will come back to that.

33
00:02:15.570 --> 00:02:20.580
For now it's important to know any service you plan on injecting needs to be provided

34
00:02:20.820 --> 00:02:27.790
and typically, you do this in the app module or you do that by adding that provided in root

35
00:02:27.990 --> 00:02:31.410
key here into that object you pass to @injectable,

36
00:02:31.410 --> 00:02:36.540
this is an alternative to adding that service to your app module providers array

37
00:02:36.540 --> 00:02:41.010
and this is actually the way I would use because it's faster but you could also add a service here to

38
00:02:41.010 --> 00:02:49.020
providers and it would also be available application-wide. Now the bootstrap array is important for starting

39
00:02:49.050 --> 00:02:49.860
your app.

40
00:02:49.860 --> 00:02:56.220
It defines which component is available right in that index.html file and typically, you only

41
00:02:56.220 --> 00:02:58.200
have one component there.

42
00:02:58.230 --> 00:03:02.070
You could have multiple components which is why bootstrap is also an array,

43
00:03:02.070 --> 00:03:07.050
you could define multiple components but each component would then kind of be detached from the other

44
00:03:07.050 --> 00:03:12.560
components, you would be creating different root component trees in your application

45
00:03:12.630 --> 00:03:18.010
and that is rarely what you want because it makes working between these components way harder.

46
00:03:18.120 --> 00:03:23.220
So therefore, you typically have one root component and you add that to the bootstrap array.

47
00:03:23.520 --> 00:03:25.900
Well and then we have the entry components here,

48
00:03:25.950 --> 00:03:33.100
that simply is important for components you create in code, as you learned in the section on dynamic components,

49
00:03:33.120 --> 00:03:39.150
this allows Angular to be aware of this component when it needs to create it programmatically.

50
00:03:39.180 --> 00:03:44.370
Now as I mentioned, we do have one other module right now and that's the app routing module which we also

51
00:03:44.370 --> 00:03:45.750
added to imports.

52
00:03:45.870 --> 00:03:51.660
The app routing module is simply there to hold our route configuration.

53
00:03:51.660 --> 00:03:55.050
We could absolutely add this into our app module,

54
00:03:55.050 --> 00:04:01.040
we only outsourced it because that's quite a lot of code and it keeps our app module a bit leaner

55
00:04:01.170 --> 00:04:06.540
and that is already one reason for why you might want to split your application into multiple modules.

56
00:04:06.600 --> 00:04:13.350
It can make your existing modules leaner and more focused and easier to edit and to maintain.

57
00:04:13.350 --> 00:04:21.060
Now the app routing module simply imports the router module Angular offers us and uses a special method offered

58
00:04:21.060 --> 00:04:28.020
by that module, which then takes our route configuration to configure the Angular router with our route

59
00:04:28.060 --> 00:04:30.840
config and then something important happens,

60
00:04:30.840 --> 00:04:35.910
we export that router module here from the app routing module.

61
00:04:35.910 --> 00:04:42.390
We need to do that because every module and now that is something you have to memorize, every module

62
00:04:42.510 --> 00:04:47.010
works on its own in Angular, they don't communicate with each other.

63
00:04:47.040 --> 00:04:52.200
If you declare a component in a certain component, in a certain module like app module,

64
00:04:52.200 --> 00:04:56.880
if we declare recipes component here, then we can only use it in here,

65
00:04:56.880 --> 00:04:57.700
nowhere else,

66
00:04:57.720 --> 00:05:03.840
we can only use it in here. So we can use the selector in our other components we declared here

67
00:05:03.840 --> 00:05:09.630
but if we would have another module with other components, then we could not use selectors of components

68
00:05:09.630 --> 00:05:14.650
defined here in components of that other module and we'll see this in action very soon.

69
00:05:14.760 --> 00:05:20.340
And therefore here, we have to export the router module with our route configuration, so that it really

70
00:05:20.340 --> 00:05:25.890
is not just available in this module which would not be helpful at all but that it is available in

71
00:05:25.890 --> 00:05:33.000
the app module where we now import app routing module and when we import another module, we import everything

72
00:05:33.180 --> 00:05:37.180
that module exports, which in this case is our configured router module

73
00:05:37.290 --> 00:05:42.740
and this is how the configured router module ends up in the app module and is available there.

74
00:05:42.810 --> 00:05:48.080
So that is generally what we're already doing and what we're already using in our application.

75
00:05:48.270 --> 00:05:54.210
We're using these modules and everything works. Now for smaller applications,

76
00:05:54.210 --> 00:05:57.240
you can absolutely leave it that way,

77
00:05:57.240 --> 00:05:58.600
nothing wrong with that,

78
00:05:58.620 --> 00:06:02.760
this app module also is not too big, it's certainly manageable

79
00:06:02.760 --> 00:06:08.730
but the bigger your application grows, you might want to split your code to have leaner modules that

80
00:06:08.730 --> 00:06:15.480
are easier to manage, easier to understand and also as you will learn later, to enhance performance, not

81
00:06:15.510 --> 00:06:20.670
automatically by splitting components but splitting components will be an important prerequisite to

82
00:06:20.670 --> 00:06:22.350
then also enhance performance.
