WEBVTT
1
00:00:02.640 --> 00:00:08.660
In the last lecture, we made our routing work, we added routes and we gave Angular a place to load our

2
00:00:08.660 --> 00:00:10.410
currently active component

3
00:00:10.850 --> 00:00:16.910
but one issue we have is right now we can only navigate around by manually typing it here in the address

4
00:00:16.910 --> 00:00:17.630
bar.

5
00:00:17.660 --> 00:00:19.100
Not super convenient

6
00:00:19.090 --> 00:00:25.250
and while it is important to be able to load a route directly from the address bar, it would also be

7
00:00:25.250 --> 00:00:30.030
nice to have some working links here in our navigation to have these tabs work.

8
00:00:30.290 --> 00:00:37.640
So let's add some links to our application and if we go to our app component, we see here's our navigation.

9
00:00:37.640 --> 00:00:43.220
The first thing you might think about is, hey we can or we already have this ref attribute here to be

10
00:00:43.220 --> 00:00:44.090
precise,

11
00:00:44.270 --> 00:00:48.670
so here we could have ref, well just slash to load our root route,

12
00:00:48.920 --> 00:00:53.800
here we could have /servers and here we could have /users

13
00:00:53.810 --> 00:01:00.740
and if we now save this, we added all the routes, the paths we set up in our routes configuration to our

14
00:01:00.860 --> 00:01:02.110
navigation here

15
00:01:02.270 --> 00:01:06.510
and hence if this reloads and we click the tabs, hey this is indeed working,

16
00:01:06.560 --> 00:01:09.740
now we are correctly loading the route we want to load.

17
00:01:09.880 --> 00:01:10.150
OK

18
00:01:10.150 --> 00:01:13.240
this tab is not updated but I will come back to this later

19
00:01:13.340 --> 00:01:16.360
but the reloading is working and that's the issue,

20
00:01:16.460 --> 00:01:21.420
it's reloading the app. Watch this reload icon here, do you see this?

21
00:01:21.530 --> 00:01:25.070
We refreshed the app with every link we click

22
00:01:25.280 --> 00:01:30.680
and that's the natural behavior because with every link we click, a new request gets sent to the server

23
00:01:31.070 --> 00:01:32.750
and it returns as a new page

24
00:01:32.750 --> 00:01:37.330
and since this page is still our Angular app with the routes registered on it,

25
00:01:37.370 --> 00:01:39.590
it is able to give us the correct route.

26
00:01:39.620 --> 00:01:43.740
So the same thing happens as if we enter this manually here.

27
00:01:43.760 --> 00:01:50.110
That however is not the best behavior because it means it restarts our app on every navigation,

28
00:01:50.150 --> 00:01:55.160
that of course means our whole application state will be lost and it might not really be the behavior

29
00:01:55.160 --> 00:01:57.010
we want to offer to the user.

30
00:01:57.260 --> 00:02:01.880
So this is not how you should implement navigation. How should you implement it then?

31
00:02:01.880 --> 00:02:10.030
There is a special directive Angular gives us, let's get rid of all these ref attributes here,

32
00:02:10.040 --> 00:02:12.760
so this is not how we will navigate around.

33
00:02:13.040 --> 00:02:16.410
Instead let's use this special directive,

34
00:02:16.460 --> 00:02:19.250
it's called routerLink.

35
00:02:19.300 --> 00:02:26.660
Now routerLink, like this simply is able to parse a string where we could pass just slash, so just this

36
00:02:26.750 --> 00:02:29.660
string slash to routerLink here.

37
00:02:29.660 --> 00:02:35.870
Now this will tell Angular that this element on which routerLink is placed here, this anchor tag here

38
00:02:36.320 --> 00:02:42.060
will serve as a link in the end but it will handle a click differently as you will see in a second.

39
00:02:42.230 --> 00:02:47.790
Let's now also add this to the service links, so routerLink equals /servers

40
00:02:47.970 --> 00:02:54.470
and I will come back to how you may write the path here in the next lecture. Another way of using

41
00:02:54.470 --> 00:03:00.310
routerLink is with property binding, so you can enclose it in square brackets

42
00:03:00.440 --> 00:03:06.260
and now of course you can't just pass /users here because this would now search for a property with

43
00:03:06.260 --> 00:03:09.560
that name which would even be an invalid name in Javascript.

44
00:03:09.560 --> 00:03:13.390
So now you have to pass a string here with single quotation marks

45
00:03:13.580 --> 00:03:19.970
or better, an array which gives you a more finegrained control over routerLink and I will come back

46
00:03:19.970 --> 00:03:20.900
to this later

47
00:03:20.900 --> 00:03:24.500
when this is especially useful. Here in this array,

48
00:03:24.540 --> 00:03:29.830
you now specify all the segments of your path as elements in this array.

49
00:03:30.020 --> 00:03:35.670
So the first segment in this case is only a string/users

50
00:03:35.840 --> 00:03:42.590
and if you had /users slash something, you would have a second element here which is then just something

51
00:03:42.590 --> 00:03:48.220
without a slash. The leading slash here is only needed to make this an absolute path and I will come back

52
00:03:48.220 --> 00:03:49.590
to this in the next lecture.

53
00:03:49.610 --> 00:03:51.140
For now, I will get rid of this,

54
00:03:51.230 --> 00:03:57.020
now this array notation is not super convenient but soon you will see when it really gives you an advantage

55
00:03:57.020 --> 00:04:03.070
or when you need this notation, it allows you to construct more complex paths very easily.

56
00:04:03.080 --> 00:04:08.930
So with this, we set up our three links using routerLink either by passing a string or this array which

57
00:04:08.930 --> 00:04:16.170
allows us to define our individual path elements. With that if we save this and have a look at our application,

58
00:04:17.000 --> 00:04:22.490
now you see it's still reloads or it still gives us the components but it doesn't reload the

59
00:04:22.490 --> 00:04:23.090
page.

60
00:04:23.090 --> 00:04:24.740
If you watch this reload icon,

61
00:04:24.770 --> 00:04:31.580
nothing is happening there because routerLink catches the click on the element, prevents the default

62
00:04:31.610 --> 00:04:38.180
which would be to send a request and instead analyzes what we passed here to the routerLink directive,

63
00:04:38.240 --> 00:04:45.230
so this path or this array of path elements and then parses it and checks if it finds a fitting

64
00:04:45.230 --> 00:04:51.740
route in our configuration which it of course does because we defined all the paths we're using here.

65
00:04:51.740 --> 00:04:55.380
And this is how we can navigate around with a routerLink

66
00:04:55.430 --> 00:05:00.760
and this actually is how we should navigate around because it gives us the better user experience,

67
00:05:00.800 --> 00:05:06.890
it doesn't restart our app, therefore it keeps the app state and it's much faster than reloading the

68
00:05:06.890 --> 00:05:08.180
page all the time.

69
00:05:08.210 --> 00:05:11.170
You can of course still type something here manually,

70
00:05:11.180 --> 00:05:12.500
so that will still work

71
00:05:12.590 --> 00:05:16.430
but if you are inside of the app, using routerLink is much better.
