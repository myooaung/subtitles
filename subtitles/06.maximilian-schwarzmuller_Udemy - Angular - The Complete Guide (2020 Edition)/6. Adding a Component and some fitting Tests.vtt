WEBVTT
1

00:00:01.700  -->  00:00:08.080
I want to dive deeper by quitting this process and creating a new component so I'll create and you come

2

00:00:08.080  -->  00:00:12.810
in with NGC and I'll name it to user a user component.

3

00:00:13.320  -->  00:00:20.600
So I'll hit enter to LeDuff trade and use subfolder here in the app folder user folder and then we get

4

00:00:20.730  -->  00:00:20.810
.

5

00:00:20.810  -->  00:00:28.560
SH Tim Althea's and is Specht filed as testing file in user composed HTML file and want to change this

6

00:00:28.970  -->  00:00:37.920
a one a treat any day of the year where I have a H-1 tag whereas say user logged in and add a paragraph

7

00:00:37.920  -->  00:00:44.210
or is a user is and then some data which we're going to fetch from a service.

8

00:00:44.210  -->  00:00:50.700
Actually So here I want to output the user name I will have to create this property.

9

00:00:50.700  -->  00:00:58.440
Now I'm copying this to basically later on check with NGF which div to display here I will say user

10

00:00:58.440  -->  00:00:59.890
are not locked in.

11

00:00:59.890  -->  00:01:05.690
Well let's make this a lowercase L here and lowercase I as a user are not logged in.

12

00:01:05.820  -->  00:01:11.930
And then here of course we don't display the user instead we have Please log in first.

13

00:01:12.030  -->  00:01:18.750
So this is my template code here in the typescript file I want to alter the justice you don't want to

14

00:01:18.750  -->  00:01:25.620
have a user which has a name field which is of type string like this so that I know this is how a user

15

00:01:25.620  -->  00:01:27.750
object looks like.

16

00:01:27.750  -->  00:01:33.810
I also want to have it is locked in variable or property here which is fault's by default.

17

00:01:34.170  -->  00:01:41.040
And with that I can go back to the component here and basically say display the first one with Engy

18

00:01:41.100  -->  00:01:44.300
if it is locked in is true.

19

00:01:44.430  -->  00:01:51.450
And the second one of course whoops here Engy if displayed if it is not true.

20

00:01:51.450  -->  00:01:53.070
So if not locked in.

21

00:01:53.070  -->  00:01:55.040
That is my user component.

22

00:01:55.050  -->  00:01:59.320
Now of course this should be added to the module it is done so automatically by DC.

23

00:01:59.340  -->  00:02:05.510
But check that you have to import any addition to declarations here and then we can go to our app compute

24

00:02:05.520  -->  00:02:08.310
the HMO file and included here.

25

00:02:08.340  -->  00:02:12.300
But I won't even do this because I won't watch this app in the browser.

26

00:02:12.300  -->  00:02:14.450
Instead I will only test it.

27

00:02:14.850  -->  00:02:16.480
So I will leave this year.

28

00:02:16.500  -->  00:02:25.650
Close all these files and now we want to write some tests for this new created user component here.

29

00:02:25.650  -->  00:02:29.530
Actually we already have a spec file but this is very very simple.

30

00:02:29.550  -->  00:02:36.400
It includes the task that an async task though it doesn't use it and then it only describes that.

31

00:02:36.420  -->  00:02:41.450
It should create an instance and you we try to create a new user instance like this.

32

00:02:41.610  -->  00:02:43.770
Well let's remove this test here.

33

00:02:43.770  -->  00:02:45.390
It's not really that helpful.

34

00:02:45.410  -->  00:02:51.970
Let's write our own tests instead using the two testing environment and not creating some well known

35

00:02:52.000  -->  00:02:53.700
Englad two tests.

36

00:02:53.700  -->  00:02:58.200
So here I first want to declare a module again.

37

00:02:58.200  -->  00:03:06.390
So I will set up the bill for each method here which takes a callback your six function in this case

38

00:03:06.390  -->  00:03:15.120
here where I simply say test bed and test bed is really just his main testing object giving us access

39

00:03:15.120  -->  00:03:16.140
to all this.

40

00:03:16.140  -->  00:03:20.260
Configure my Englad to application for testing utilities.

41

00:03:20.580  -->  00:03:23.760
And here I want to call configure.

42

00:03:24.000  -->  00:03:32.250
Testing module This expects to get a javascript object where I add my declarations like and while in

43

00:03:32.250  -->  00:03:34.850
the engine module which is an array.

44

00:03:34.890  -->  00:03:38.670
And here I will set up to user component because that's the component I want to test.

45

00:03:38.670  -->  00:03:41.350
Make sure you also have that import up here.

46

00:03:41.760  -->  00:03:51.750
Now important if you were not using DCL or any other web based setup you don't need to compile components

47

00:03:51.760  -->  00:03:51.840
.

48

00:03:51.880  -->  00:03:58.900
Thereafter you need to execute compile components to well compiled him only when using well-packed does

49

00:03:58.900  -->  00:04:05.280
is not needed because web pick has a different workflow built process where we'll will do this anyways

50

00:04:05.490  -->  00:04:10.480
because of the way imports were external HDMI all files are NCSA as false.

51

00:04:10.500  -->  00:04:16.380
It will do as well as bundling or producing your app in a system set up for example it won't do this

52

00:04:16.380  -->  00:04:21.240
automatically you will have to do that since the angular 2 compiler which would do this in the browser

53

00:04:21.240  -->  00:04:22.490
won't run here.

54

00:04:22.860  -->  00:04:30.420
So if that we have our compiled components or our set up here and next I want actuary to test so we

55

00:04:30.450  -->  00:04:34.120
write it and then give it some description of your choice.

56

00:04:34.120  -->  00:04:38.800
It's just something for you to read to understand these tests if you see them and the log.

57

00:04:39.240  -->  00:04:42.900
So here we want to check that the app last created.

58

00:04:42.900  -->  00:04:50.670
So it should treat the app that does what we're checking and there we then have a second function which

59

00:04:50.670  -->  00:05:00.540
is the ESX function here with the arrow and there I want to create my fixture again where I use the

60

00:05:00.630  -->  00:05:09.410
test bed and then create component and create a user component like that.

61

00:05:09.420  -->  00:05:15.680
Now we created this component in the testing environment so it is like if it were added with a selector

62

00:05:15.690  -->  00:05:20.550
in some HTL template and we browsed student page then Englad you would create it in the background.

63

00:05:20.550  -->  00:05:22.440
Now here we're creating it.

64

00:05:22.440  -->  00:05:25.770
Now here we are creating it and we have this fixture.

65

00:05:25.770  -->  00:05:33.240
I can now get my app from this fixture and there we typically do this by accessing the debug element

66

00:05:33.240  -->  00:05:39.420
which is the element exposed to asked for testing purposes where I can access my component instance

67

00:05:39.440  -->  00:05:39.510
.

68

00:05:39.570  -->  00:05:46.470
So this is my application just running component instance and I can then say well I expect this app

69

00:05:46.800  -->  00:05:47.920
to be truthy.

70

00:05:47.940  -->  00:05:50.000
We saw that before.

71

00:05:50.110  -->  00:05:51.660
Does it just checks well.

72

00:05:51.660  -->  00:05:53.390
Does it kind of exist.

73

00:05:53.790  -->  00:05:58.430
Well if I safeties and I now run and you test let's see if this works.

74

00:05:58.560  -->  00:06:05.010
It'll take a couple of seconds to start up and then we see four successful tests down there.

75

00:06:05.190  -->  00:06:06.410
So this worked.

76

00:06:06.480  -->  00:06:08.080
It's a very simple test though.

77

00:06:08.100  -->  00:06:12.650
We only checked if the test or if the applications actually starting up
