1
00:00:02,150 --> 00:00:08,270
With the environment variables added, it's now time to build the project and you already saw the command

2
00:00:08,270 --> 00:00:16,010
for that, it's ng build --prod and this builds the entire Angular application for production,

3
00:00:16,340 --> 00:00:21,650
optimizes everything and gives you an output which you can deploy onto a static server.

4
00:00:21,650 --> 00:00:27,660
Now again, let me highlight here that what this does is, it compiles your TypeScript code to Javascript,

5
00:00:27,680 --> 00:00:29,360
that's one important step,

6
00:00:29,360 --> 00:00:36,290
it also compiles all your templates to Javascript instructions so that in the end, only Javascript code

7
00:00:36,410 --> 00:00:43,010
is generated, Javascript code that runs in the browser and contains all the logic for updating the DOM

8
00:00:43,130 --> 00:00:50,060
in the way you defined it in your multiple components and all the logic you added in your application.

9
00:00:50,060 --> 00:00:55,310
This is all done by the bundled up application which takes advantage of the Angular framework that of

10
00:00:55,310 --> 00:00:57,680
course powers all of that.

11
00:00:57,680 --> 00:01:02,780
Now after running ng build --prod, you get this dist folder and in there, you have a folder of your

12
00:01:02,780 --> 00:01:06,080
project name and in that project name folder,

13
00:01:06,080 --> 00:01:13,190
now you have bunch of assets that you might have included and you also got your main polyfill runtime

14
00:01:13,190 --> 00:01:18,950
file and a couple of other files, the exact names will differ for you but you've got a couple of Javascript

15
00:01:18,950 --> 00:01:23,550
files which essentially contain your Javascript code, your Angular app,

16
00:01:23,570 --> 00:01:27,110
this is how it looks like in the optimized form, quite unreadable right

17
00:01:27,110 --> 00:01:33,440
but that is in the end all the logic of the Angular framework and of your code and you will find some

18
00:01:33,440 --> 00:01:40,400
elements here which you have stored in your template files. So you can definitely also search these files

19
00:01:40,400 --> 00:01:43,070
for some snippets of your templates

20
00:01:43,070 --> 00:01:48,950
but this is now the code, so everything in the project name folder, in the dist folder, all of that is

21
00:01:48,950 --> 00:01:50,570
the code which you need to deploy.

22
00:01:50,570 --> 00:01:56,120
It's the HTML file with a bunch of script imports as you can see and these script imports in the end

23
00:01:56,240 --> 00:02:01,870
make up all your app that starts, it's all these Javascript files that make up your app and the styles.css

24
00:02:01,870 --> 00:02:08,200
file which with some general styling, in this case with all the bootstrap styles.

25
00:02:08,250 --> 00:02:11,100
So now, we just have to deploy this,

26
00:02:11,130 --> 00:02:12,150
how does this work?

27
00:02:13,160 --> 00:02:18,630
As I mentioned, you now need a static website hosts and of course there are many options for that.

28
00:02:18,650 --> 00:02:26,420
You can google for a static website host to find many articles and examples, to learn where you can host

29
00:02:26,420 --> 00:02:28,360
such a static website.

30
00:02:28,370 --> 00:02:35,660
I particularly want to highlight AWS S3 which uses a special service of the AWS, so of the

31
00:02:35,660 --> 00:02:41,240
Amazon Web Services, that allows you to host static websites, that is definitely worth a look.

32
00:02:41,270 --> 00:02:47,450
You need an AWS account for that but thereafter, it's pretty straightforward to use, pretty powerful

33
00:02:47,450 --> 00:02:49,170
and pretty popular

34
00:02:49,310 --> 00:02:51,660
and I also want to point you at Firebase Hosting.

35
00:02:51,680 --> 00:02:57,110
Now you don't need to have the rest of your back-end on Firebase to use that. It's a coincidence that

36
00:02:57,110 --> 00:03:02,720
here in this course we used Firebase for the authentication and for the database because it was easy

37
00:03:02,720 --> 00:03:06,360
to use and it is intended to be an all-in-one package

38
00:03:06,500 --> 00:03:12,440
but even if you use your own back-end or if you use a totally different API, you can always use Firebase

39
00:03:12,440 --> 00:03:14,930
hosting to host static websites

40
00:03:15,110 --> 00:03:20,920
and indeed, it is what I want to use here because it's particularly easy to use. Now

41
00:03:20,930 --> 00:03:26,850
here you can learn more about that in the official docs and you see how you can get started with Firebase

42
00:03:26,850 --> 00:03:28,020
hosting.

43
00:03:28,020 --> 00:03:34,380
You need the Firebase CLI for that which simply is a tool you have to install to automatically deploy

44
00:03:34,380 --> 00:03:37,480
your Firebase application. For that,

45
00:03:37,500 --> 00:03:43,030
you need to install the Firebase CLI first, for which you need NodeJS and NPM which we already got

46
00:03:43,050 --> 00:03:48,540
because the Angular CLI needed that as well and therefore you can dive right in and run this command

47
00:03:48,600 --> 00:03:53,310
to install the Firebase tools, which is you Firebase CLI in the end.

48
00:03:53,310 --> 00:03:59,100
So here in a terminal, doesn't have to be your project terminal here, it could be any terminal or a command

49
00:03:59,100 --> 00:04:00,660
prompt on your machine,

50
00:04:00,660 --> 00:04:07,560
you simply run npm install -g firebase-tools, on Mac and Linux you probably need to add a sudo

51
00:04:07,560 --> 00:04:15,470
in front of this to avoid permission errors and now what this will do is it will install the Firebase

52
00:04:15,560 --> 00:04:22,830
CLI on your machine so that you can use it in every project, not just in this project, to deploy the

53
00:04:22,870 --> 00:04:32,530
application. So with that all run, you next have to run Firebase login, to log into your Firebase account.

54
00:04:32,530 --> 00:04:35,020
Now I already am logged in here,

55
00:04:35,020 --> 00:04:40,390
if you are and you will be prompted for an e-mail and password combination for your Firebase account,

56
00:04:40,390 --> 00:04:42,470
so you need a Firebase account for that.

57
00:04:42,550 --> 00:04:47,710
If you followed through that course, you probably already have one or a Google account to be precise,

58
00:04:47,710 --> 00:04:52,510
if you followed through the course you already have one because we used Firebase already,

59
00:04:52,510 --> 00:04:57,400
otherwise you have to create one or simply look into one of the other static hosts you can use,

60
00:04:57,400 --> 00:05:02,050
you'll find deployment instructions in the official docs of every host of course.

61
00:05:02,050 --> 00:05:04,490
So here, we'll continue with Firebase,

62
00:05:04,690 --> 00:05:10,660
we logged in and the next step then is to run Firebase init to connect this project here with one of

63
00:05:10,660 --> 00:05:12,250
your Firebase projects

64
00:05:12,250 --> 00:05:16,150
and for that, you now should be in your Angular project folder,

65
00:05:16,210 --> 00:05:17,400
so cd into it

66
00:05:17,440 --> 00:05:24,310
if you're not using the terminal built into your IDE. Firebase init now asks you what you want

67
00:05:24,310 --> 00:05:24,610
to use,

68
00:05:24,610 --> 00:05:26,640
so which Firebase feature you want to use

69
00:05:26,650 --> 00:05:32,290
because you could use the Firebase CLI for other things too, not just for hosting but I'm only interested

70
00:05:32,290 --> 00:05:32,980
in hosting,

71
00:05:33,040 --> 00:05:39,070
so let's take that. Side note, we are of course using the database here as well but we're not using it

72
00:05:39,070 --> 00:05:45,910
through Firebase SDK, so we don't need to add that, as you see it works without the CLI. For hosting however,

73
00:05:45,910 --> 00:05:51,940
we need the CLI, so tick hosting here by hitting space next to it and then hit enter.

74
00:05:51,940 --> 00:05:57,550
Now you need to choose a project to which you want to connect and for me, that's this project,

75
00:05:57,570 --> 00:06:02,300
simply choose the project you created for the recipe book.

76
00:06:02,310 --> 00:06:05,070
So here we need a Firebase project for the hosting,

77
00:06:05,070 --> 00:06:10,050
if you haven't created one yet, you need to create one now, though of course the question then is where

78
00:06:10,050 --> 00:06:12,270
did you store your recipes?

79
00:06:12,270 --> 00:06:15,210
But let's now choose this project.

80
00:06:15,210 --> 00:06:20,850
Now you are asked what your public directory is and here you should not use the default which would

81
00:06:20,850 --> 00:06:28,410
be public but the public directory simply is the directory that contains all your files that you want

82
00:06:28,410 --> 00:06:31,200
to deploy and in our case, that's in a dist folder,

83
00:06:31,230 --> 00:06:37,670
this ng-complete-guide-update folder in my case or whatever this folder name is in your case.

84
00:06:37,740 --> 00:06:45,810
So here, we want to use dist/ng-complete-guide-update or whatever folder name you have in the

85
00:06:45,810 --> 00:06:49,430
dist folder, so your project name essentially.

86
00:06:49,630 --> 00:06:54,400
Now you're asked whether you want to configure this as a single page app and you should definitely choose

87
00:06:54,400 --> 00:06:54,810
y

88
00:06:54,820 --> 00:07:01,600
for yes here to ensure that all requests that you sent to that back-end are always redirected

89
00:07:01,600 --> 00:07:05,080
to index.html because that is a common gotcha indeed,

90
00:07:05,230 --> 00:07:11,110
you need to have a server configured such that it always serves the index.html, no matter which

91
00:07:11,110 --> 00:07:11,660
URL

92
00:07:11,680 --> 00:07:17,860
you entered into the browser and the reason for that is that by default, the server always handles an incoming

93
00:07:17,860 --> 00:07:23,340
request first and if it's a URL that's unknown to the server, you would normally get an error.

94
00:07:23,380 --> 00:07:29,320
Of course we have the Angular router handling our different routes but that, always keep in mind, runs

95
00:07:29,410 --> 00:07:30,170
on the client,

96
00:07:30,190 --> 00:07:35,950
so in the browser and that only gets a chance to run if the server serves your app.

97
00:07:36,130 --> 00:07:39,640
So any requests have to reach the server first,

98
00:07:39,700 --> 00:07:45,400
there they are all redirected to index.html, which in the end is our starting point for the single

99
00:07:45,400 --> 00:07:52,240
page application and since any request, no matter which URL you entered reaches that page, that

100
00:07:52,240 --> 00:07:53,480
HTML page,

101
00:07:53,480 --> 00:08:00,280
now the Angular app can take over for any incoming request with any URL on your server and can then

102
00:08:00,280 --> 00:08:05,470
use the Angular router to load the correct content in your Angular app,

103
00:08:05,470 --> 00:08:07,320
that's why this redirection is important,

104
00:08:07,480 --> 00:08:09,590
so choose y for yes here.

105
00:08:09,860 --> 00:08:14,460
Now the existing HTML file should not be overwritten, so choose no here

106
00:08:14,470 --> 00:08:15,960
and with that, you're done

107
00:08:16,180 --> 00:08:22,270
and the next and last step then is that you run Firebase deploy and this will now deploy the content

108
00:08:22,380 --> 00:08:25,360
of this folder onto Firebase.

109
00:08:25,400 --> 00:08:28,960
Now this can take a couple of seconds, so let's wait for this to finish

110
00:08:31,970 --> 00:08:37,250
and once it is done, it should give you a URL where you can find your application.

111
00:08:37,400 --> 00:08:46,910
So let's grab that URL and enter it in the browser and there, you should be on your application

112
00:08:46,910 --> 00:08:54,950
that should work just the way it worked locally but now on a real server. And we're still interacting

113
00:08:54,950 --> 00:08:59,670
with our back-end API and everything but now, this is our deployed application.
