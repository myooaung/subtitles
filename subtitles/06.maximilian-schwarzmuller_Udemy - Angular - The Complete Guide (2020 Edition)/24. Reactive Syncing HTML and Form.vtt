WEBVTT
1
00:00:02.660 --> 00:00:05.890
In the last lecture, we created our form here in TypeScript.

2
00:00:05.930 --> 00:00:12.110
The issue is it's nice to have it here but our actual form you could say lives in the HTML

3
00:00:12.110 --> 00:00:13.150
template.

4
00:00:13.310 --> 00:00:20.450
So we somehow need to synchronize our HTML inputs and our own form or this form in general with

5
00:00:20.450 --> 00:00:21.550
our own form.

6
00:00:21.680 --> 00:00:28.580
Right now, Angular doesn't know which of our TypeScript controls here relates to which input in our

7
00:00:28.580 --> 00:00:34.610
template code, it actually doesn't even know that our form, signupForm here should be attached to

8
00:00:34.610 --> 00:00:35.780
this form.

9
00:00:35.960 --> 00:00:41.900
Right now, the one thing it is doing is it is autodetecting that this is a form and it creates a form

10
00:00:41.900 --> 00:00:42.820
for us.

11
00:00:42.830 --> 00:00:44.700
Now we don't want it to do that,

12
00:00:44.960 --> 00:00:52.250
so we have to add some directives to overwrite this default behavior to give Angular different instructions.

13
00:00:52.550 --> 00:00:54.100
For these directives to work,

14
00:00:54.140 --> 00:01:00.640
you definitely need to make sure that you add the import to reactive forms module in your app module

15
00:01:00.680 --> 00:01:02.970
otherwise you will get errors.

16
00:01:03.350 --> 00:01:10.970
Now the first directive we need to add is here on the form itself via property binding, the 

17
00:01:11.180 --> 00:01:13.500
formGroup directive.

18
00:01:13.520 --> 00:01:17.690
Now this simply tells Angular, hey please take my formGroup,

19
00:01:17.750 --> 00:01:18.990
don't infer one,

20
00:01:19.010 --> 00:01:21.050
don't create a form for me,

21
00:01:21.050 --> 00:01:27.950
use my formGroup and we need to set up property binding here because we need to pass our form as an

22
00:01:27.950 --> 00:01:29.530
argument to the directive.

23
00:01:29.720 --> 00:01:36.530
So here we should reference our signupForm, the property we created here which stores our form.

24
00:01:36.800 --> 00:01:43.370
We're passing this via property binding to the formGroup and now this form is actually synchronized

25
00:01:43.370 --> 00:01:50.360
with the form we created in TypeScript but we still need to tell Angular which controls should be connected

26
00:01:50.360 --> 00:01:52.630
to which inputs in the template code,

27
00:01:52.760 --> 00:01:56.860
for this we get another directive. On this input here

28
00:01:56.870 --> 00:02:05.500
for example, the username, we add the formControlName directive to tell Angular,

29
00:02:05.540 --> 00:02:09.030
hey what's the name of this input in my form,

30
00:02:09.050 --> 00:02:10.500
in my TypeScript form.

31
00:02:10.820 --> 00:02:16.520
Well the name is username, this name here because that's the control I want to connect to this input,

32
00:02:16.910 --> 00:02:19.390
so I simply pass username here.

33
00:02:19.430 --> 00:02:24.830
If you're wondering why I'm not using property binding, I'm passing a string here.

34
00:02:24.830 --> 00:02:30.800
So if you want to use property binding, you can do this by wrapping this in square brackets and then enclosing

35
00:02:30.830 --> 00:02:32.940
the username in single quotation marks

36
00:02:32.960 --> 00:02:38.540
otherwise it would search for a property named username but this is overly complicated,

37
00:02:38.540 --> 00:02:43.620
if you just want to pass a string, simply omit the square brackets and you're good to go.

38
00:02:43.970 --> 00:02:49.910
So with this we're telling Angular hey my form should be connected to the form stored in the signupForm

39
00:02:49.910 --> 00:02:51.030
property

40
00:02:51.410 --> 00:02:57.440
and in this form, this input here should be connected to the control with the name username.

41
00:02:57.440 --> 00:03:04.920
Well now I can simply repeat this for the e-mail, here the name was e-mail, the name we set up here,

42
00:03:04.940 --> 00:03:06.910
now this control is connected

43
00:03:07.490 --> 00:03:09.530
and for the gender of course.

44
00:03:09.620 --> 00:03:11.130
So in this input here,

45
00:03:11.300 --> 00:03:13.910
I will bind this to gender.

46
00:03:14.120 --> 00:03:17.850
Now with this, let's save this so that it compiles

47
00:03:18.050 --> 00:03:20.140
and now let's have a look at it.

48
00:03:20.180 --> 00:03:22.400
We don't see any errors which looks good,

49
00:03:22.610 --> 00:03:27.980
we see that mail is preselected, looks promising because that was the default value we set when

50
00:03:27.980 --> 00:03:33.690
we created the control in TypeScript and if we now switch to female, only one of the two is selected.

51
00:03:33.860 --> 00:03:40.490
We also see if we select e-mail here, that the Angular classes are untouched, pristine,

52
00:03:40.490 --> 00:03:41.680
valid and so on.

53
00:03:41.900 --> 00:03:49.910
So it indeed looks like our inputs in HTML are correctly synchronized to our form we created in TypeScript.

54
00:03:49.910 --> 00:03:51.580
So this was successful,

55
00:03:51.620 --> 00:03:55.980
the next step is to actually submit the form to see how this works.
