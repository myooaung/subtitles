1
00:00:02,330 --> 00:00:07,100
Of course the obvious first question is, what is application state?

2
00:00:07,130 --> 00:00:14,210
Why do we need a state management solution? Doesn't Angular already have one? What is this state thing?

3
00:00:14,210 --> 00:00:17,680
Well, consider this simple Angular application,

4
00:00:17,690 --> 00:00:23,270
it's not the application we worked on in this course but of course this could be just another application

5
00:00:23,270 --> 00:00:29,090
you have where you have the welcome component, then a couple of the training components here because

6
00:00:29,120 --> 00:00:35,420
maybe you're building like a training application, something where people can do workouts and save them

7
00:00:35,750 --> 00:00:38,330
and you have your training service.

8
00:00:38,330 --> 00:00:43,950
Now in this application, the service would be there to manage the core data

9
00:00:43,970 --> 00:00:47,180
these different components need to work correctly,

10
00:00:47,180 --> 00:00:52,980
for example you could be fetching exercises or once the user is done with the exercise,

11
00:00:53,000 --> 00:00:58,090
you could store that exercise result here. Well and all that data

12
00:00:58,100 --> 00:01:04,520
which kind of is important for your application because this data is in the end controlling what's visible

13
00:01:04,520 --> 00:01:12,890
on the screen, that is your application state and this application state is lost whenever your application

14
00:01:12,890 --> 00:01:13,730
refreshes,

15
00:01:13,760 --> 00:01:17,640
so whenever you reload your Angular app, your website.

16
00:01:17,690 --> 00:01:22,940
Now this simply is the case because this entire data here is managed in a service and in components

17
00:01:22,970 --> 00:01:29,660
but all that together is just a Javascript app in the end, right, your entire Angular application is

18
00:01:29,660 --> 00:01:35,990
compiled into a Javascript bundle in the end. So it's all in Javascript and therefore, it's managed in

19
00:01:35,990 --> 00:01:43,160
memory by Javascript and therefore whenever your page is reloaded, the Angular app restarts and the other

20
00:01:43,220 --> 00:01:48,220
app is basically dumped, it's lost and the memory is cleared, that's why it's refreshed

21
00:01:48,250 --> 00:01:50,380
but that's not the problem

22
00:01:50,540 --> 00:01:54,740
NgRx helps you deal with because that is not per say a problem,

23
00:01:54,740 --> 00:02:01,580
that's just how Javascript works and to solve that refreshing problem, we typically work with a backend.

24
00:02:01,880 --> 00:02:08,600
Like in this course, when we added our recipes and we don't have a database on the backend where we store

25
00:02:08,620 --> 00:02:09,550
that data,

26
00:02:09,650 --> 00:02:15,410
well then we would lose all our recipes and all the changes we made to them whenever our application

27
00:02:15,410 --> 00:02:22,020
reloads and therefore, we typically also interact with such a backend where we store and fetch data too.

28
00:02:22,070 --> 00:02:29,120
This is so-called persistent state and it's persistent because it survives our page refreshes as it

29
00:02:29,120 --> 00:02:37,670
is stored on the backend. So state in a nutshell could be translated with data that's important to your

30
00:02:37,670 --> 00:02:42,440
application and that influences what's visible on the screen.

31
00:02:42,450 --> 00:02:49,820
State is not just data like stored exercises or recipes, state could also be things like "this app is currently

32
00:02:49,820 --> 00:02:56,400
waiting for some data to be fetched", so the app is in a loading state, it's showing a spinner maybe.

33
00:02:56,420 --> 00:03:04,730
So basically, any data, any information that controls what should be visible on the screen, that is state.

34
00:03:04,820 --> 00:03:13,100
OK, so that is state and thus far in this course we already managed such state, typically in services but

35
00:03:13,150 --> 00:03:17,120
tiny pieces of state are even getting managed inside of components,

36
00:03:17,330 --> 00:03:19,220
let me show you examples.

37
00:03:19,220 --> 00:03:25,460
Here is our application as we built it and if we have a look at the shopping list service, this would

38
00:03:25,460 --> 00:03:29,180
be an example of a service being used for managing state.

39
00:03:29,180 --> 00:03:34,160
Here, our ingredients which we have here, which we can fetch, where we can add new ingredients,

40
00:03:34,160 --> 00:03:35,200
that's in the end data

41
00:03:35,210 --> 00:03:41,720
our application needs to work correctly or at least parts of our application need that to work correctly

42
00:03:41,720 --> 00:03:44,370
but that's not the only kind of state we have.

43
00:03:44,720 --> 00:03:48,230
If we have a look at our auth component here, there

44
00:03:48,260 --> 00:03:49,890
we also have some state.

45
00:03:50,000 --> 00:03:56,690
Here we have the isLoading property inside of that component, not stored in a service and we use that

46
00:03:56,750 --> 00:03:58,850
isLoading component to change it

47
00:03:58,940 --> 00:04:05,380
once we are starting the sign-up or the sign-in process and then we use it in a template to show a spinner

48
00:04:05,390 --> 00:04:07,300
for example, here.

49
00:04:07,400 --> 00:04:14,600
Now that's also state, maybe not application state because it doesn't affect the entire application or

50
00:04:14,840 --> 00:04:19,200
larger parts of the application but still, it is state,

51
00:04:19,310 --> 00:04:25,490
you could call it local state, it's local to this component but to this component, it doesn't matter

52
00:04:25,580 --> 00:04:27,190
but again it's data,

53
00:04:27,290 --> 00:04:30,410
it's information that controls what we see on the screen and therefore

54
00:04:30,410 --> 00:04:38,360
this would also be state. Well and if we have a look at the recipes service, there we also manage state,

55
00:04:38,390 --> 00:04:45,590
we manage our recipes and we also store these recipes, not in the recipes service but in the data storage

56
00:04:45,590 --> 00:04:53,770
service, we store the recipes on a server and there we persist that data so that it doesn't get lost.

57
00:04:53,810 --> 00:04:56,000
This is how all these things work together and

58
00:04:56,000 --> 00:04:59,840
that is how we already use state in our application.

59
00:05:00,080 --> 00:05:03,110
Now what's the problem with this approach?

60
00:05:03,110 --> 00:05:07,370
Well simpler apps and that includes our course project to

61
00:05:07,370 --> 00:05:08,110
be very honest

62
00:05:08,180 --> 00:05:14,840
so I should maybe say smaller apps. Typically are fine with how we already manage state, by using components

63
00:05:14,870 --> 00:05:18,730
and services and actually, you can get very far with this approach only,

64
00:05:18,920 --> 00:05:25,610
even bigger apps can be managed with just services and components but the bigger your app gets and the

65
00:05:25,610 --> 00:05:28,010
more complex your state gets,

66
00:05:28,010 --> 00:05:33,930
so maybe an app like this where we have a lot of components and service that interact with each other,

67
00:05:34,040 --> 00:05:40,070
if you have an app that becomes bigger and bigger and your state depends on many components at the same

68
00:05:40,070 --> 00:05:49,170
time and many components depend on the service and so on, then you could end up in state management nightmare.

69
00:05:49,200 --> 00:05:54,000
So you could end up in an application where it's hard to maintain the app because it's hard for you

70
00:05:54,000 --> 00:05:54,670
to tell

71
00:05:54,720 --> 00:05:58,300
where exactly am I managing this piece of information

72
00:05:58,410 --> 00:06:04,170
and maybe you're even changing a piece of information, like the isLoading state of a component accidentally

73
00:06:04,170 --> 00:06:10,830
from another place in the application simply because your code is structured such that this is possible.

74
00:06:11,090 --> 00:06:18,950
Well we already have a remedy to that and that is rxjs, at least partly. RxJS already allows

75
00:06:18,950 --> 00:06:25,610
us to create a streamlined state management experience. With RxJS and there specifically with

76
00:06:25,610 --> 00:06:33,590
subjects, we can react to user events in the user interface or to application events like some data fetching

77
00:06:33,590 --> 00:06:39,200
finishing, we can react to such a state changing event, so to an event where we want to update some

78
00:06:39,200 --> 00:06:47,090
data or some information in our app by using observables or as I said, subjects and we can emit or next a

79
00:06:47,090 --> 00:06:53,000
new data piece there and maybe use operators to even transform data in the way we want it and then

80
00:06:53,000 --> 00:06:59,150
listen to such state changes in other parts of the application where we need it to then update the UI

81
00:06:59,900 --> 00:07:02,500
and we're doing this already as well.

82
00:07:02,570 --> 00:07:09,980
If I dive back into the code and back into the recipes service, there indeed, recipes are managed

83
00:07:10,100 --> 00:07:14,270
with the help of these recipes changed subject here.

84
00:07:14,330 --> 00:07:21,200
Now keep in mind that this subject in the end is used to emit a new copy of all recipes whenever the

85
00:07:21,200 --> 00:07:22,530
recipes did change,

86
00:07:22,670 --> 00:07:28,550
so for example when we overwrote our existing recipes or whenever we added a recipe.

87
00:07:28,820 --> 00:07:30,240
And why does this matter?

88
00:07:30,260 --> 00:07:33,340
Because this then can be used in other components,

89
00:07:34,590 --> 00:07:41,670
like the recipe list component where we set up a subscription to that recipes changed subject to update

90
00:07:41,700 --> 00:07:47,550
our recipes in that component and therefore indirectly update the user interface of that component

91
00:07:47,820 --> 00:07:50,070
whenever our recipes do change.

92
00:07:50,070 --> 00:07:57,180
So here we are already using a quite good pattern of managing our state by using subjects and using

93
00:07:57,180 --> 00:08:06,140
that push subscribe mechanism where we have a clear stream of data, a unidirectional data stream. It's

94
00:08:06,150 --> 00:08:13,980
for example not really possible or not easily possible to update our recipes outside of that predefined

95
00:08:13,980 --> 00:08:19,410
flow of using these methods in the recipes service where we then emit a new event where we then subscribe

96
00:08:19,410 --> 00:08:19,910
to.

97
00:08:19,980 --> 00:08:24,840
Yes, you can always hack your way around this but of course if you want to break your app, you can always

98
00:08:24,840 --> 00:08:25,720
do that.

99
00:08:25,800 --> 00:08:31,920
But what I want to say here is that this approach of managing state using RxJS and subjects is

100
00:08:32,010 --> 00:08:36,690
already pretty good, it might be all you need and that includes bigger apps,

101
00:08:36,690 --> 00:08:43,140
so even bigger and very large apps, you can definitely work with a setup that only uses services, components

102
00:08:43,500 --> 00:08:51,330
and such subjects to manage this state but that can of course be tricky because it really forces you

103
00:08:51,330 --> 00:08:59,010
to have an eye on providing a good structure and a clean setup and ensuring that really all services

104
00:08:59,100 --> 00:09:02,700
and all pieces of state are implemented in a good way

105
00:09:02,880 --> 00:09:05,400
and that is where NgRx steps in.
