0
1
00:00:02,150 --> 00:00:07,030
In the last lecture, we created our first Angular app but we haven't changed anything there.
1

2
00:00:07,130 --> 00:00:13,600
So it's time to do that. For that you need an IDE or editor where you can write and edit your code.
2

3
00:00:13,610 --> 00:00:17,860
Now I'm using WebStorm here. Webstorm is a great IDE,
3

4
00:00:17,860 --> 00:00:24,740
great for Angular development; but it's not free. A great free alternative would be Visual Studio Code which
4

5
00:00:24,740 --> 00:00:28,160
you can find on https://code.visualstudio.com/
5

6
00:00:28,160 --> 00:00:29,940
This is a great IDE and it is free.
6

7
00:00:29,940 --> 00:00:33,400
You can simply download and install it both for Mac and Windows
7

8
00:00:33,620 --> 00:00:39,670
and then you can start developing Angular with that. Whichever IDE or editor you install,
8

9
00:00:39,740 --> 00:00:48,290
you'll always have to open a new folder (in WebStorm's case it's just called Open) and then simply navigate
9

10
00:00:48,350 --> 00:00:50,300
to the folder you created.
10

11
00:00:50,300 --> 00:00:52,500
So in my case here it's my-first-app.
11

12
00:00:52,550 --> 00:00:58,610
Select that folder and open it and now it will load that folder and all the files into the ID on your
12

13
00:00:58,610 --> 00:00:59,630
system.
13

14
00:00:59,630 --> 00:01:02,320
So in my case, it now looks like that.
14

15
00:01:02,720 --> 00:01:05,750
Now this is the project loaded into the ID.
15

16
00:01:05,770 --> 00:01:09,260
It's still indexing it here but it'll be done in a second.
16

17
00:01:09,350 --> 00:01:11,690
These are all the folders and files
17

18
00:01:11,780 --> 00:01:16,260
The Angular CLI created for you. This is your entire Angular project.
18

19
00:01:16,580 --> 00:01:21,690
Now as I said, this might look intimidating because you've got so many files in there.
19

20
00:01:21,770 --> 00:01:26,060
Most of these files are just doing some configuration work and you don't really need to touch them.
20

21
00:01:26,060 --> 00:01:28,550
One interesting file is the package.json file.
21

22
00:01:28,610 --> 00:01:34,670
Here you can see all the dependencies of your project like Angular 6 and these are third-party
22

23
00:01:34,670 --> 00:01:35,670
packages
23

24
00:01:35,690 --> 00:01:37,810
your project needs to run correctly.
24

25
00:01:37,820 --> 00:01:40,710
All devDependencies are only required for development;
25

26
00:01:40,760 --> 00:01:46,000
for this build workflow I was talking about. But we're here to edit our code right?
26

27
00:01:46,010 --> 00:01:49,880
So let's jump into the src folder because that is where our code is.
27

28
00:01:49,960 --> 00:01:54,950
e2e is for end-to-end testing (we'll ignore this) and node_modules is where all these dependencies you
28

29
00:01:54,950 --> 00:01:58,340
see in the package.json file actually were installed.
29

30
00:01:58,340 --> 00:02:01,120
But we're interested in the source code so let's go to src.
30

31
00:02:01,280 --> 00:02:03,950
Then we got a bunch of other configuration files and
31

32
00:02:04,280 --> 00:02:10,720
then here, we've got this app folder and in this app folder we see some other files.
32

33
00:02:10,820 --> 00:02:14,500
Of course I'll dive into what they all do in detail in this course.
33

34
00:02:14,630 --> 00:02:17,840
For now let's open the app.component.html file.
34

35
00:02:18,200 --> 00:02:23,590
Here we indeed see something which looks deceivingly like what we saw in the browser.
35

36
00:02:23,850 --> 00:02:27,130
Do you remember? It's Welcome to app! and so on.
36

37
00:02:27,230 --> 00:02:29,440
We see that here too. By the way,
37

38
00:02:29,480 --> 00:02:33,350
make sure you keep the localhost:4200 process running
38

39
00:02:33,500 --> 00:02:37,160
(the ng serve process you started here in the terminal).
39

40
00:02:37,160 --> 00:02:40,600
Make sure to keep that running, but if you're done with development for the day
40

41
00:02:40,610 --> 00:02:46,280
You can quit it with Ctrl-C and you'll get out of there, but as long as you are developing you should
41

42
00:02:46,280 --> 00:02:51,800
keep it running because it will automatically watch your files and rebuild your project whenever you
42

43
00:02:51,800 --> 00:02:53,240
change and save something.
43

44
00:02:53,350 --> 00:02:54,080
Now since I quit it
44

45
00:02:54,140 --> 00:02:58,640
I'll need to restart it and I will actually restart it here in my IDE.
45

46
00:02:58,640 --> 00:03:01,700
In here there is a built in terminal but it's the normal system terminal.
46

47
00:03:01,730 --> 00:03:04,700
So here I can also run ng serve to bring that back up.
47

48
00:03:05,000 --> 00:03:07,700
But back to the app.component.html file, we're
48

49
00:03:07,700 --> 00:03:08,790
outputting something here
49

50
00:03:08,930 --> 00:03:11,680
and if we change anything here, like,
50

51
00:03:11,750 --> 00:03:19,830
'Hi, this' (instead of 'Welcome to') and we save it with ng serve running, then if we go back,
51

52
00:03:20,120 --> 00:03:21,790
you'll see it automatically updated;
52

53
00:03:21,890 --> 00:03:24,050
Hi, this app!
53

54
00:03:24,260 --> 00:03:28,210
Now, one strange thing we see is this 'app' here, but
54

55
00:03:28,500 --> 00:03:35,450
we actually only see these curly braces and title in the app.component.html file and therefore,
55

56
00:03:35,450 --> 00:03:38,450
we can already see some of the work Angular does here.
56

57
00:03:38,860 --> 00:03:44,000
Angular is, of course, not a tool to allow us to write static HTML files.
57

58
00:03:44,030 --> 00:03:46,440
We wouldn't need a framework for that.
58

59
00:03:46,520 --> 00:03:53,840
It allows us to mix static HTML code and dynamic things we want to output in that code and actually,
59

60
00:03:53,840 --> 00:03:56,020
what we have here is one of these components
60

61
00:03:56,030 --> 00:04:03,950
Angular works with; the app component. A component always has a template,  the HTML code, possibly has some
61

62
00:04:03,950 --> 00:04:07,170
styling in the CSS file (though it's empty here as you can see)
62

63
00:04:07,430 --> 00:04:10,060
and importantly, it has a Typescript (.ts) file.
63

64
00:04:10,160 --> 00:04:16,740
If we enter this, this is Typescript and this is now the definition of the component. This is what will
64

65
00:04:16,740 --> 00:04:20,150
be converted to normal JavaScript by the build workflow.
65

66
00:04:20,400 --> 00:04:25,680
And in this file, we see a couple of interesting things like @Component. I'll come back to that and what
66

67
00:04:25,680 --> 00:04:28,230
in detail is happening here in the next module.
67

68
00:04:28,260 --> 00:04:30,650
We also see title = 'app'.
68

69
00:04:30,750 --> 00:04:32,380
Now, what's that?
69

70
00:04:32,730 --> 00:04:40,020
If you go back to the app.component.html file, we also saw title here right; between the curly braces.
70

71
00:04:40,020 --> 00:04:45,330
So an assumption would be that the title in the Typescript file is related to that.
71

72
00:04:45,660 --> 00:04:52,430
So let's maybe change this to 'my app' and now if we save this it recompiles and if we go back, we see
72

73
00:04:52,510 --> 00:04:59,580
'Hi, this my app!'. Now this might not be perfect English, but we can definitely see that something changed.
73

74
00:04:59,730 --> 00:05:02,320
This is so-called data binding in action;
74

75
00:05:02,340 --> 00:05:08,520
a concept we'll also dive into deeply in this course. This is how we can output dynamic
75

76
00:05:08,520 --> 00:05:09,390
content.
76

77
00:05:09,660 --> 00:05:14,910
This could of course be content that is calculated dynamically or retrieved from a server in our
77

78
00:05:14,910 --> 00:05:16,640
HTML code.
78

79
00:05:16,650 --> 00:05:23,580
Now interestingly, if we right-click on the loaded page and inspect the page source we don't actually see
79

80
00:05:23,580 --> 00:05:24,650
that code there.
80

81
00:05:24,840 --> 00:05:30,570
We just see a bunch of script imports at the bottom. That is our build code and the Angular framework
81

82
00:05:30,600 --> 00:05:33,330
code, the head tag here
82

83
00:05:33,540 --> 00:05:41,790
and then this strange app-root part. Now, app-root is also something we see in the app.component.ts
83

84
00:05:41,790 --> 00:05:44,810
file here in the selector.
84

85
00:05:44,810 --> 00:05:49,750
So it looks like this is basically like our own HTML tag we're creating
85

86
00:05:49,770 --> 00:05:51,930
and that's indeed what's happening here.
86

87
00:05:51,930 --> 00:05:55,230
The page we're viewing here, to which this source belongs,
87

88
00:05:55,230 --> 00:06:01,830
actually is this index.html file in the src folder. Here we also see app-root. The script imports
88

89
00:06:01,830 --> 00:06:04,400
are missing because they are injected dynamically.
89

90
00:06:04,770 --> 00:06:06,540
Now, what Angular does in the the end is
90

91
00:06:06,660 --> 00:06:08,360
always load this page.
91

92
00:06:08,430 --> 00:06:14,540
Then we have these dynamically-injected script imports and these script imports will dynamically replace
92

93
00:06:14,550 --> 00:06:16,650
app-root with our own component.
93

94
00:06:16,740 --> 00:06:19,740
And of course we can have more than one component in Angular apps.
94

95
00:06:19,770 --> 00:06:23,160
Again, these are all things we'll dive into in this course.
95

96
00:06:23,160 --> 00:06:23,920
Now that's nice, but
96

97
00:06:23,970 --> 00:06:25,380
let's do something more fancy.
97

98
00:06:25,380 --> 00:06:27,160
Let's change title dynamically.
98

99
00:06:27,300 --> 00:06:32,580
So back in the app component, I'll actually get rid of the entire code in here and I'll add an input instead;
99

100
00:06:32,660 --> 00:06:38,820
a normal HTML input (type="text"). Below that I'll add a paragraph where I want to output, let's say,
100

101
00:06:38,850 --> 00:06:40,010
a name.
101

102
00:06:40,230 --> 00:06:43,390
Now, name is not something we've defined yet, we'll do so in a second.
102

103
00:06:43,530 --> 00:06:44,950
Let's go to app.component.ts and
103

104
00:06:44,950 --> 00:06:51,390
change title to name and I'll say Max here (because that is my name) and if I save that and go back,
104

105
00:06:52,490 --> 00:06:55,100
we see the input and we see the name.
105

106
00:06:55,120 --> 00:06:59,890
Now I want to be able to enter something in the input and automatically change the name. We can do
106

107
00:06:59,890 --> 00:07:05,560
this with a tool provided by Angular; a so-called directive which is called ngModel.
107

108
00:07:05,560 --> 00:07:07,890
Now, you'll learn the exact syntax throughout the course.
108

109
00:07:07,930 --> 00:07:12,430
For now, let's simply add [(ngModel)],
109

110
00:07:12,460 --> 00:07:13,360
written like that.
110

111
00:07:13,360 --> 00:07:15,190
Make sure to get the casing correct.
111

112
00:07:15,190 --> 00:07:17,610
There is no dash in between or anything like that.
112

113
00:07:17,860 --> 00:07:25,050
So ngModel in square brackets and parentheses on the input and set it equal to name.
113

114
00:07:25,150 --> 00:07:27,490
So, to the same name you're outputting here.
114

115
00:07:27,490 --> 00:07:34,480
Now this is a so-called directive and what it does is it basically tells Angular to listen to anything
115

116
00:07:34,480 --> 00:07:42,190
you enter here and store it in this name property, in this name model, but also on the other hand, output
116

117
00:07:42,220 --> 00:07:44,960
the value of the name model in this input.
117

118
00:07:45,190 --> 00:07:48,380
This is what we're doing here. Now,
118

119
00:07:48,830 --> 00:07:57,740
if we save this we don't see anything on the page and if we open the developer tools, which you can simply
119

120
00:07:57,740 --> 00:08:02,090
do from the menu or with the shortcut. You reach it under View ->
120

121
00:08:02,300 --> 00:08:07,400
Developer -> Developer Tools (in Chrome) and I strongly recommend using Chrome for this course since it has
121

122
00:08:07,400 --> 00:08:09,230
the best developer tools.
122

123
00:08:09,230 --> 00:08:12,600
So, then we see here in the console-part there is an error.
123

124
00:08:12,740 --> 00:08:16,640
Can't bind to 'ngModel' since it isn't a known property of 'input'.
124

125
00:08:16,640 --> 00:08:19,830
So somehow Angular doesn't understand ngModel.
125

126
00:08:19,870 --> 00:08:25,550
Now that's strange, because as I said it's built-in right? Angular is actually split up into multiple modules;
126

127
00:08:25,790 --> 00:08:27,760
sub-packages you could say.
127

128
00:08:27,950 --> 00:08:31,820
We need to add them if you want to use a certain feature from them.
128

129
00:08:31,820 --> 00:08:36,530
And in this course you will learn about the different packages and which features they contain. To add
129

130
00:08:36,530 --> 00:08:39,520
such a feature, we go to another file that we haven't had a look at yet;
130

131
00:08:39,710 --> 00:08:46,970
the app.module.ts file. This is basically where we tell Angular which pieces belong to our app and there we have
131

132
00:08:46,970 --> 00:08:51,250
to add something to imports to import another package from Angular.
132

133
00:08:51,530 --> 00:08:56,630
So we need to import it at the top of the file first because Typescript always needs to know where things
133

134
00:08:56,720 --> 00:08:57,680
are.
134

135
00:08:57,680 --> 00:09:03,200
So, import { FormsModule } from '@angular/forms';
135

136
00:09:03,200 --> 00:09:10,070
This is one package from the Angular framework and from that package we can import the Forms Module; written
136

137
00:09:10,070 --> 00:09:11,090
like this: import { FormsModule } from '@angular/forms';
137

138
00:09:11,090 --> 00:09:12,760
So make sure to add this import.
138

139
00:09:12,770 --> 00:09:15,630
This is not an Angular feature; it's a Typescript feature.
139

140
00:09:15,710 --> 00:09:19,250
As I said Typescript needs to know where things are.
140

141
00:09:19,610 --> 00:09:24,980
But now with that imported we can add it to this imports array down here (which is not related to the
141

142
00:09:25,000 --> 00:09:26,300
imports up there).
142

143
00:09:26,300 --> 00:09:31,460
This is simply a feature understood by Angular since it's part of an Angular module.
143

144
00:09:31,640 --> 00:09:35,650
And now it tells Angular that we want to import some form features.
144

145
00:09:35,930 --> 00:09:39,380
And this directive we're using (ngModel) is such a form feature.
145

146
00:09:39,410 --> 00:09:46,400
So now if we save that, our app will rebuild and once it's done, we can go back and see our input
146

147
00:09:46,790 --> 00:09:48,490
with Max inside of it.
147

148
00:09:48,590 --> 00:09:54,610
And if I start typing there, you'll see that the text below it automatically updates.
148

149
00:09:54,620 --> 00:09:56,730
This is some magic done by ngModel.
149

150
00:09:56,750 --> 00:09:59,470
We'll dive much deeper into everything we learned here.
150

151
00:09:59,540 --> 00:10:02,710
But this is now our first app; with some changes.
