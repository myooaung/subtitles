1

00:00:01,570  -->  00:00:07,250
Back comeback last year we had a look at typing in this with you.

2

00:00:07,350  -->  00:00:13,210
We'll have a look at classes which is another important thing typescript introduces the class.

3

00:00:13,230  -->  00:00:19,860
You know I am aware that with the most recent charges from specifications we will be able to use the

4

00:00:19,860  -->  00:00:24,560
Klasky word pure javascript but we're also able to do it in time.

5

00:00:24,780  -->  00:00:33,030
And the benefit here is it automatically compiles down into well old shuttlers script which is well

6

00:00:33,120  -->  00:00:37,400
readable or usable by all browsers.

7

00:00:37,430  -->  00:00:44,970
So here in my class all types that file which are prepared I'm creating such a class that this might

8

00:00:45,120  -->  00:00:50,040
look a bit complex but that's really only because I added a lot of stuff into the class.

9

00:00:50,040  -->  00:00:51,650
Let's start at the basics.

10

00:00:51,690  -->  00:00:55,840
We're creating a class by using the class keyword followed by the name.

11

00:00:55,950  -->  00:01:00,070
And then this is the body of our class describing class.

12

00:01:00,090  -->  00:01:04,360
Now I'm not going into object oriented programming here in all that.

13

00:01:04,360  -->  00:01:04,860
Sure.

14

00:01:04,880  -->  00:01:12,210
Look it up if you're interested in this but the class basically will be like a plu print of an object

15

00:01:12,270  -->  00:01:17,580
you can create later based on this class and we'll see this in this file.

16

00:01:17,580  -->  00:01:21,900
So here we what you're creating such a class.

17

00:01:22,110  -->  00:01:27,630
Now I'm creating a such object excuse me Basin's class for creating such a car object.

18

00:01:27,960  -->  00:01:36,750
I do this by using the new keyword and the new car creates will and you car object based on this car

19

00:01:36,780  -->  00:01:38,110
blueprint.

20

00:01:38,970  -->  00:01:45,660
So each object will have these methods here these properties and so on.

21

00:01:46,050  -->  00:01:53,550
I'm also passing an argument into this constructor here because I set up my constructor to get in one

22

00:01:53,550  -->  00:01:56,650
argument the speed of the car here.

23

00:01:56,790  -->  00:02:00,800
Will this speech be a number and inside the constructor.

24

00:02:00,930  -->  00:02:10,800
Well assigning the speed I pass in or zero if it somehow is invalid to just private speech property

25

00:02:10,800  -->  00:02:11,360
.

26

00:02:11,490  -->  00:02:19,470
So as you can see MRV this property this field here as private it's only accessible from within this

27

00:02:19,470  -->  00:02:20,880
class.

28

00:02:20,880  -->  00:02:23,340
Javascript does not know this.

29

00:02:23,420  -->  00:02:28,900
It does no private class members but your typescript.

30

00:02:28,930  -->  00:02:35,700
The compiler would not allow us or would yell at us if we tried x a private member from outside of this

31

00:02:35,700  -->  00:02:36,520
class.

32

00:02:36,720  -->  00:02:43,350
So here are passing the initial speed in the constructor and setting it to my private property of this

33

00:02:43,350  -->  00:02:44,690
class.

34

00:02:44,970  -->  00:02:50,850
Then I got two methods accelerator throttle or free methods get speed will accelerate just cruising

35

00:02:50,850  -->  00:02:53,660
speed or decrease it.

36

00:02:53,790  -->  00:02:57,190
So always refer to my private property by the way.

37

00:02:57,210  -->  00:02:59,100
These first two properties here.

38

00:02:59,340  -->  00:03:00,980
Well they don't do anything.

39

00:03:01,020  -->  00:03:06,720
I just added them to show up at public properties which are accessible from outside and private properties

40

00:03:06,780  -->  00:03:11,390
which are well only accessible from inside the class.

41

00:03:11,550  -->  00:03:12,820
They get speed.

42

00:03:13,050  -->  00:03:20,940
Well it prints out our current speeds or protect a property and as a way we can kind of access this

43

00:03:21,180  -->  00:03:27,930
private property from outside through a method which again then has access to this property estimate

44

00:03:27,990  -->  00:03:29,490
lives inside this class.

45

00:03:29,510  -->  00:03:39,000
But we also get the static method which means this method is callable without instantiating a new object

46

00:03:39,000  -->  00:03:39,430
.

47

00:03:39,450  -->  00:03:46,200
We're doing this year cons. long car number of wheels recognize that a capital C here.

48

00:03:46,260  -->  00:03:49,470
So you're not calling we're not using the card or cheque.

49

00:03:49,470  -->  00:03:58,350
I created I used car plus all it's all I can do this here for a number of wheels because it is marked

50

00:03:58,410  -->  00:04:06,060
as static which means you don't have to have an instance of this object you don't need to have created

51

00:04:06,060  -->  00:04:06,590
it.

52

00:04:06,750  -->  00:04:13,440
You can access this method whenever you want because it provides a certain functionality that does not

53

00:04:13,440  -->  00:04:22,320
depend on a specific instance but well that provides some general utility for example does how we use

54

00:04:22,320  -->  00:04:31,260
classes in typescript course is classes in a nutshell if you want to put it like that but it's basically

55

00:04:31,290  -->  00:04:34,980
all functional if you were going to use this course.

56

00:04:35,310  -->  00:04:37,260
And if you want to learn more.

57

00:04:37,280  -->  00:04:43,050
Again documentation is attached which will allow you to dive deeper into it.

58

00:04:43,050  -->  00:04:44,690
CNN next with you on
