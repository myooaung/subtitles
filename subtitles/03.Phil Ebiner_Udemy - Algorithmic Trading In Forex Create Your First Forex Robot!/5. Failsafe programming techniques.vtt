WEBVTT
1
00:00:07.860 --> 00:00:10.450
Hello this is Kiril from for Expo dot com.

2
00:00:10.470 --> 00:00:15.680
And welcome to the 17th tutorial on em kill for for beginners.

3
00:00:15.690 --> 00:00:21.510
Frankly I think that the word beginners is not really that relevant anymore and that's because we've

4
00:00:21.510 --> 00:00:27.330
studied so much and we've actually learned so much we've learned how to code and Corum kill for We've

5
00:00:27.330 --> 00:00:36.360
learned how to design basic algorithmic trading strategies and we've even successfully sent our first

6
00:00:37.200 --> 00:00:44.640
orders through an algorithmic trading strategy and personally to me that means quite a lot when studying

7
00:00:44.670 --> 00:00:46.270
a new programming language.

8
00:00:47.250 --> 00:00:54.170
We'll probably keep the word beginners just because it's part of the course title.

9
00:00:54.270 --> 00:01:03.090
But I really do hope that you are noticing progress and you can feel how you're getting better and better

10
00:01:03.090 --> 00:01:06.810
and better with every tutorial that we have.

11
00:01:08.410 --> 00:01:16.960
And in today's tutorial we're going to be studying a quite interesting and quite important topic at

12
00:01:16.960 --> 00:01:28.540
the same time and it's called Fail-Safe programming and simply put Fail-Safe programming is a set of

13
00:01:28.840 --> 00:01:41.380
techniques that allows you to design your code in such a way that will allow you to prevent and account

14
00:01:41.380 --> 00:01:45.440
for any errors that can possibly occur.

15
00:01:45.820 --> 00:01:54.820
And it is always imperative for us to program a hour or two for us to code our programs in such a way

16
00:01:54.820 --> 00:02:05.950
that they don't contain any inherent errors or bugs within the code itself but sometimes programs run

17
00:02:06.040 --> 00:02:14.630
in such an environment that will cause can cause potential errors.

18
00:02:15.250 --> 00:02:19.960
Regardless of how well the program the code is

19
00:02:22.630 --> 00:02:25.690
how good the code is inside the program itself.

20
00:02:25.960 --> 00:02:34.570
And let's be honest here we working in the foreign exchange market and it is very dynamic it is very

21
00:02:34.570 --> 00:02:35.550
fast.

22
00:02:35.650 --> 00:02:44.140
It can be very volatile at times and all of those things mean that the programs are often put to their

23
00:02:44.140 --> 00:02:53.320
limits put to the test and sometimes things can not go as planned and your program has to account for

24
00:02:53.320 --> 00:03:02.890
that your program has to make sure that whatever happens on the market it has a response and it has

25
00:03:02.890 --> 00:03:11.290
failsafe mechanism put in place because this is very important because at the end of the day we're working

26
00:03:11.830 --> 00:03:19.810
with money here we're working with thousands or even tens of thousands of dollars of people's money

27
00:03:19.810 --> 00:03:30.820
of investors money and we have to make sure that we it is our responsibility to take you to show you

28
00:03:30.820 --> 00:03:40.470
care and make sure that our our programs have responds to anything that occurs in the market in order

29
00:03:40.470 --> 00:03:45.720
to protect this money from any potential

30
00:03:48.770 --> 00:03:53.760
mis happenings in the programs or during the runtime of the program.

31
00:03:54.210 --> 00:03:56.870
So that's basically what we're going to be studying today.

32
00:03:56.880 --> 00:04:05.740
And before we do go ahead with that we'll quick recap on what we talked about in tutorial 16 and 15.

33
00:04:05.760 --> 00:04:16.320
So in total 16 we had to look at functions and we understood how functions are structured and what exactly

34
00:04:16.320 --> 00:04:19.680
they do that they can have inputs and they have outputs.

35
00:04:19.710 --> 00:04:25.380
We even built a function of our own which was called my addition and basically just added two values

36
00:04:25.380 --> 00:04:27.420
together and returned the result.

37
00:04:27.990 --> 00:04:35.940
The bottom line of this Tauriel or take away from this Tauriel is the fundamental

38
00:04:38.370 --> 00:04:44.790
structure behind any function and that is that it has it always a function always has a name.

39
00:04:44.910 --> 00:04:52.920
Then after the name it is followed by brackets within which you should list the input parameters into

40
00:04:52.920 --> 00:04:58.410
the function in this case it was just and B two integers separated by a comma and then the function

41
00:04:58.410 --> 00:05:08.220
always has not always but often has a return value and then that return value can be assigned to a variable

42
00:05:08.220 --> 00:05:15.450
of your choice and it can then later be used further down the track in your program.

43
00:05:16.020 --> 00:05:24.060
And that's that's basically what everything we needed from this tutorial into turtle 15 Choe 15 was

44
00:05:24.060 --> 00:05:34.530
the one where we made a major breakthrough and we sent our first successful order using and algorithmic

45
00:05:34.530 --> 00:05:35.770
trading system.

46
00:05:36.030 --> 00:05:45.050
And this is the line of code that allowed us to send the order and we did use the order send function

47
00:05:45.060 --> 00:05:46.060
in that case.

48
00:05:46.290 --> 00:05:50.530
So what we're going to do now is we'll just copy this part between the two comments.

49
00:05:50.580 --> 00:05:51.780
The main part of the code.

50
00:05:51.800 --> 00:05:56.310
And so we'll paste it into totals 17.

51
00:05:56.460 --> 00:06:02.070
That way we can close 15 and 16 and just focus on this one now.

52
00:06:02.190 --> 00:06:06.320
So first thing we need to remember is we have to add a property up here at the top

53
00:06:12.100 --> 00:06:21.800
and it's called properties a script show inputs and as you can remember we need to add this property

54
00:06:21.800 --> 00:06:29.660
because we are working off a script here and scripts and am killed for I originally are designed to

55
00:06:29.750 --> 00:06:36.690
show that popup window when you launch them which allows which arm allows a trader to set the inputs.

56
00:06:36.830 --> 00:06:43.850
However in this particular script we do have inputs which we want the trader to be able to modify and

57
00:06:43.940 --> 00:06:51.060
so therefore we do need that pop up window so we have to put that property back in place.

58
00:06:51.260 --> 00:06:58.460
So we'll go ahead and compile that as you can see we are getting that same warning that we used to get

59
00:06:58.460 --> 00:07:03.960
into 2015 and that this warning is related to the order sent function.

60
00:07:04.010 --> 00:07:07.510
It's telling us the return value of order send should be checked.

61
00:07:07.520 --> 00:07:11.260
And that's something that we're not doing at this stage.

62
00:07:11.540 --> 00:07:15.200
So we'll look into that just now.

63
00:07:15.200 --> 00:07:23.030
But before we do I would like to say that we it is time that we delete these two lines we hear these

64
00:07:23.030 --> 00:07:31.880
two alerts because the main purpose of these alerts was to tell the trader what values what take profit

65
00:07:31.910 --> 00:07:41.660
and Stop-Loss level values had been calculated and now there now because these two values will be actually

66
00:07:41.660 --> 00:07:46.900
reflected in the order that we send these alerts and not reason that is necessary.

67
00:07:46.920 --> 00:07:49.170
So go ahead and delete them.

68
00:07:49.640 --> 00:07:57.530
And now we're going to deal with this warning so to deal with the warning we need to find out what was

69
00:07:57.530 --> 00:08:00.180
going on with that return value of orders sent.

70
00:08:00.200 --> 00:08:05.890
So what I'd like you to do is just highlight or to send the word and click a one on your keyboard.

71
00:08:05.900 --> 00:08:14.990
This will bring up an M kill for reference which describes the function in more detail and just taken

72
00:08:14.990 --> 00:08:20.540
out of this that you can do that with any function or keyword.

73
00:08:20.550 --> 00:08:26.690
I'm kill for you just highlight it and click up one and you will get them killed for reference which

74
00:08:26.690 --> 00:08:29.320
can help you out sometimes.

75
00:08:29.330 --> 00:08:36.590
So right away we can notice that the orders and function has quite a lot of inputs.

76
00:08:36.890 --> 00:08:44.720
And what we should be fairly comfortable with these by now because we have used them before to send

77
00:08:44.720 --> 00:08:50.820
our first order and I'll just remind you that we use these first few.

78
00:08:51.290 --> 00:08:59.780
And we know in the last three because the last three were not really vital to us and they do have default

79
00:08:59.780 --> 00:09:02.150
values which we were totally comfortable with.

80
00:09:02.150 --> 00:09:06.320
So we just limited ourselves to the first few.

81
00:09:06.590 --> 00:09:14.380
At this stage and the order center function also has an integer value that it returns.

82
00:09:14.380 --> 00:09:24.250
So if we scroll down and we look for that we'll see a return value section and here text reads returns

83
00:09:24.260 --> 00:09:31.490
number of ticket assigned to the order by the trade server or minus one if it's if it fails.

84
00:09:31.550 --> 00:09:38.760
So we don't need this other part that's just going a bit into more detail and so here what we should

85
00:09:38.760 --> 00:09:47.520
focus on is that the return value is the number of the ticket assigned to the order or it is minus one.

86
00:09:47.520 --> 00:09:48.420
If it fails.

87
00:09:48.450 --> 00:09:56.550
So let's quickly put that into our code as a commentary so we can just see it in front of our eyes here

88
00:09:56.550 --> 00:10:12.290
will just write order and can turn ticket number or minus one if order send failed

89
00:10:16.240 --> 00:10:17.050
so there we go.

90
00:10:17.050 --> 00:10:21.340
We know that this function will return an integer which will be one of those two.

91
00:10:21.370 --> 00:10:26.470
So some account for that down ticket.

92
00:10:26.630 --> 00:10:29.610
Would create a integer variable ticket.

93
00:10:29.630 --> 00:10:35.250
We all want to say anything right away but we will assign the return value of order sent.

94
00:10:35.470 --> 00:10:44.170
Now we know that ticket is either an actual ticket number of an order that was sent and that has been

95
00:10:44.170 --> 00:10:51.840
created and as an integer greater than zero or it is minus 1.

96
00:10:51.910 --> 00:10:54.870
If if orders send failed if all of this failed or here.

97
00:10:54.880 --> 00:10:59.250
Then the ticket value will be minus one.

98
00:10:59.350 --> 00:11:07.060
So no let's use this variable ticket to create a failsafe mechanism and that basically means that we

99
00:11:07.060 --> 00:11:17.200
have to branch out of code to account for any situation possible and then means we have to account for

100
00:11:17.230 --> 00:11:20.170
this situation and we have to account for the situation.

101
00:11:20.170 --> 00:11:21.580
So we know what to do.

102
00:11:21.670 --> 00:11:24.320
In either case or the program knows what to do.

103
00:11:24.430 --> 00:11:30.920
So if it is less than zero they will do something and I'm writing less than zero here.

104
00:11:31.000 --> 00:11:34.390
This is basically the same as saying If a ticket is minus one.

105
00:11:34.570 --> 00:11:41.200
And that's that value but them kill for coding convention for checking this particular value of the

106
00:11:41.200 --> 00:11:47.740
order send function which is if it is less than zero.

107
00:11:47.740 --> 00:11:53.150
So we basically check if it's less than zero and that the only possible option is when it's minus one

108
00:11:53.150 --> 00:11:57.580
is just dumb just the way it has historically developed.

109
00:11:57.700 --> 00:12:03.100
So if it is less than zero then we have to tell the trader that something went wrong and that there

110
00:12:03.100 --> 00:12:04.030
has been an error.

111
00:12:04.030 --> 00:12:13.250
So what we will do is we will send an alert or a message to the traders screen saying error.

112
00:12:13.720 --> 00:12:20.710
And that basically prompts a trader to have a look and understand try to understand what happened and

113
00:12:20.710 --> 00:12:22.510
what went wrong.

114
00:12:23.560 --> 00:12:31.390
Then if you remember from the if and else tutorials maybe we can branch out a code in the other direction

115
00:12:31.480 --> 00:12:34.590
by using the else operator.

116
00:12:34.780 --> 00:12:43.150
And that means that if so this block of code will be executed if it is less than zero and whatever is

117
00:12:43.240 --> 00:12:48.250
within these brackets this block of code will be executed in every other case.

118
00:12:48.250 --> 00:12:50.940
So basically if it is not less than zero.

119
00:12:51.340 --> 00:12:59.180
And in this particular instance we're just going to tell the trader that everything is OK and that they

120
00:12:59.190 --> 00:13:01.780
are actually their ticket number.

121
00:13:02.050 --> 00:13:11.360
They're taking their order has been created and we'll actually tell them their ticket number is.

122
00:13:11.390 --> 00:13:12.890
So here we wrote some text.

123
00:13:12.890 --> 00:13:21.130
Now we are going to concatenate the ticket number by first turning it into a string.

124
00:13:21.160 --> 00:13:27.380
We learned how to do that in one of the first tutorials so we'll quickly compile that and see no errors

125
00:13:27.380 --> 00:13:27.930
or warnings.

126
00:13:27.950 --> 00:13:31.400
And now we'll give that a go and see how it works in the terminal.

127
00:13:35.450 --> 00:13:36.340
So there we go.

128
00:13:36.340 --> 00:13:37.910
That's all terminal.

129
00:13:37.940 --> 00:13:44.510
And now if we look for tutorial 17 if we drag and drop we're only changing the parameters.

130
00:13:44.510 --> 00:13:45.560
Click OK.

131
00:13:47.320 --> 00:13:57.840
As you can see the order has been created by order take profits stop loss and it's telling us the message

132
00:13:57.840 --> 00:14:01.810
just saying your ticket number is 1 7 0 7 1 9 7.

133
00:14:01.810 --> 00:14:02.680
Or not.

134
00:14:02.740 --> 00:14:08.490
So let's go ahead and check that this is the correct number down here in the trade tab.

135
00:14:08.500 --> 00:14:14.050
We can see all of the orders that are currently currently exist and there's only one order by order

136
00:14:14.050 --> 00:14:16.480
for your adult or sizes one lot.

137
00:14:16.780 --> 00:14:21.970
And it's Coleman is my first order so that's a hint that that is probably order.

138
00:14:22.060 --> 00:14:26.310
And now let's go look at the order number.

139
00:14:26.380 --> 00:14:34.000
And over here the order number is 1 7 0 7 1 9 7 0 9 which is exactly the same as in our alert statement

140
00:14:34.960 --> 00:14:37.830
and that basically sums it up.

141
00:14:37.890 --> 00:14:46.900
That that means that our code has created an order and it checked for an error.

142
00:14:46.900 --> 00:14:47.840
There was no error.

143
00:14:47.860 --> 00:14:54.980
And it just told the trader that their order has been created and their ticket numbers such and such.

144
00:14:55.030 --> 00:15:01.640
So that is how we create failsafe mechanisms in programming.

145
00:15:02.110 --> 00:15:08.550
And this is a basic example and it does it is pretty simple in essence.

146
00:15:08.650 --> 00:15:14.310
It just it can just get a bit might be more like them.

147
00:15:14.320 --> 00:15:22.060
They can be a bit more code if a bit more failsafe mechanisms are required in a larger code but that's

148
00:15:22.060 --> 00:15:29.470
basically the idea behind it just to account for any possible outcome of trading operations and other

149
00:15:29.470 --> 00:15:31.500
operations that you do in your code.

150
00:15:32.140 --> 00:15:38.780
So I hope that was useful and that will definitely help us to progress faster going forward.

151
00:15:38.850 --> 00:15:41.180
That's going to be enough for today's.

152
00:15:41.180 --> 00:15:51.490
Have a play around with that and see see how you can use that in your code and I'll see you at the next

153
00:15:51.490 --> 00:15:52.250
Tauriel.

154
00:15:52.300 --> 00:15:53.850
Until then happy coding.
