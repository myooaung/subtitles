WEBVTT
1
00:00:07.840 --> 00:00:10.330
Hello this is Carol from following Spode dot com.

2
00:00:10.330 --> 00:00:17.860
And welcome to this 18th tutorial in our series of tutorials on algorithmic trading for beginners.

3
00:00:17.950 --> 00:00:24.940
And in this article we're going to be talking about the close function the oracles function is very

4
00:00:24.940 --> 00:00:29.770
similar to the order center function but it actually allows us to do the opposite.

5
00:00:29.770 --> 00:00:37.150
It allows us to close orders which already exist in the market and what we're going to do now is we're

6
00:00:37.150 --> 00:00:39.310
going to open to showreel 17.

7
00:00:39.460 --> 00:00:46.390
And because we are going to be building upon this practice code we're going to take it and we'll save

8
00:00:46.420 --> 00:00:55.840
as the save save it as tutorial 18 and we'll just change a number up here and that will save us a lot

9
00:00:55.840 --> 00:00:56.880
of time.

10
00:00:56.890 --> 00:00:58.330
So now we've compiled it.

11
00:00:58.330 --> 00:01:07.500
It is the same working code that we had in total 17 but now we can just continue building upon it.

12
00:01:07.510 --> 00:01:16.130
So if you remember in this code we have some extra parameters that the trader can change that will set

13
00:01:16.130 --> 00:01:19.060
0 take profit and stop loss levels.

14
00:01:19.060 --> 00:01:32.440
Then we send an order we use order send function to send a Eurodollar by order for one last and then

15
00:01:32.710 --> 00:01:41.650
we use ticket to implement the use the variable ticket to implement some a safe failsafe mechanism here

16
00:01:42.040 --> 00:01:50.260
which allows us to account for any possible errors that could occur while the order is being sent.

17
00:01:50.410 --> 00:01:52.030
So that's that part.

18
00:01:52.030 --> 00:01:59.020
So if there were any order then any errors and the order wasn't sent then the trader will get a message

19
00:01:59.020 --> 00:02:00.340
saying error.

20
00:02:00.430 --> 00:02:08.800
Otherwise if everything is OK then this code will be executed which is between these two brackets after

21
00:02:08.800 --> 00:02:09.550
else.

22
00:02:09.550 --> 00:02:17.080
So that's exactly where we want to add our new code because that's what that's where the program will

23
00:02:17.080 --> 00:02:21.940
go if everything's OK and the order was sent successfully.

24
00:02:22.210 --> 00:02:29.710
So the code we want to add is we want to now after that order has been opened and we've told the trade

25
00:02:29.710 --> 00:02:35.220
of what the order number is we want to close the order.

26
00:02:35.320 --> 00:02:43.870
This does make does seem like it doesn't make much sense in real life because why would we close an

27
00:02:43.870 --> 00:02:45.750
order which we've just opened.

28
00:02:45.920 --> 00:02:54.790
But we're doing this only for practice purposes and of course in a proper algorithmic trading system

29
00:02:54.790 --> 00:02:57.400
we wouldn't do this right away.

30
00:02:57.400 --> 00:03:03.340
We would close the order on certain conditions but at this stage this is just a way for us to practice

31
00:03:03.340 --> 00:03:06.610
how to correctly use the corporate close function.

32
00:03:06.970 --> 00:03:11.860
So we've opened the order we've told the trader that we have opened it and now we're going to close

33
00:03:11.860 --> 00:03:24.200
a and to do that we will use the order close function function and there it is will every function starts

34
00:03:24.200 --> 00:03:32.250
of a bracket and we'll just click f one to see the tooltip for this function.

35
00:03:32.250 --> 00:03:42.180
And here we can see right away that the or reclose function accepts some five variables and returns

36
00:03:42.200 --> 00:03:45.260
one output value.

37
00:03:45.630 --> 00:03:49.010
And so let's go ahead and program this.

38
00:03:49.500 --> 00:03:57.630
So order close needs a ticket and we'll go through these for input values one by one and they'll all

39
00:03:57.630 --> 00:03:58.190
make sense.

40
00:03:58.190 --> 00:04:05.310
So order close needs tickets so that's basically telling this function which order it needs to close.

41
00:04:05.410 --> 00:04:11.250
And at this stage we only have one ticket the ticket of the order that's just been opened and that's

42
00:04:11.250 --> 00:04:22.560
exactly what we will supply toward Aquos next order clothes function requires a value of excuse me the

43
00:04:22.560 --> 00:04:31.260
number of lots that have to be closed so this tells you that you don't have to close the entire order

44
00:04:31.260 --> 00:04:34.730
right away you can close half of it or you can close a fraction of the order.

45
00:04:34.920 --> 00:04:39.990
But in this particular instance we're going to close the whole order so it's going to be one lot double

46
00:04:39.990 --> 00:04:42.480
prices the price at which we would need to close.

47
00:04:42.480 --> 00:04:43.860
We want to close the order.

48
00:04:44.070 --> 00:04:51.860
And because this is a buy order and buy orders are opened at the ask price which is a dear price.

49
00:04:51.890 --> 00:04:55.360
They're always close at the cheaper price so we get less money.

50
00:04:55.380 --> 00:04:58.680
They're closed at big price.

51
00:04:59.130 --> 00:05:02.980
So here we will type in bid slippage is the

52
00:05:05.660 --> 00:05:14.220
allowed threshold or basically acceptable deviation in Pip's from this price and we're just going to

53
00:05:14.240 --> 00:05:20.980
sell 10 Pipps and we're not going to bother about heroic color because just the color of the arrow.

54
00:05:21.000 --> 00:05:25.380
And it does have a default value so we'll just finish with it isn't there.

55
00:05:25.470 --> 00:05:29.290
And as you can see all reclose is much smaller than order send.

56
00:05:29.460 --> 00:05:37.310
And that basically reflects that it doesn't have to take profits and stop losses and doesn't take calm.

57
00:05:38.010 --> 00:05:40.120
It still has full parameters which quite a lot.

58
00:05:40.130 --> 00:05:42.690
But it just does look a bit smaller.

59
00:05:43.080 --> 00:05:51.540
And so that's that will compile that as you can see we're getting a warning again saying that

60
00:05:55.200 --> 00:05:59.900
order clothes the return value of articles should be checked.

61
00:06:00.000 --> 00:06:07.680
So let's go ahead and look at that because that's prompting us to create a failsafe mechanism just like

62
00:06:07.680 --> 00:06:10.050
we did four orders sent over here.

63
00:06:10.140 --> 00:06:12.380
So we're going to do a very similar thing now.

64
00:06:12.420 --> 00:06:18.820
So we'll go into a reclosed back in there and we'll see that reclose has a returns and Puli unbearable.

65
00:06:19.050 --> 00:06:25.660
And if we look at the descriptions as returns true if successful otherwise false we don't need this

66
00:06:25.710 --> 00:06:26.700
other part.

67
00:06:26.700 --> 00:06:29.050
So much simpler than order send.

68
00:06:29.050 --> 00:06:32.730
There's no tickets involved because it is actually getting closed.

69
00:06:32.760 --> 00:06:41.810
So what we need to do is we need to create a boolean local address for result and here will type in

70
00:06:42.210 --> 00:06:49.650
rez equals order clause meaning that the return value will now be stored in the rest variable.

71
00:06:49.860 --> 00:07:03.330
And here we will implement failsafe mechanism if Raz is equal to Folse then something went wrong and

72
00:07:03.330 --> 00:07:06.230
we need to tell that trader that there has been an error.

73
00:07:06.240 --> 00:07:16.080
This is very important because if the trader doesn't look at this then the order will stay open and

74
00:07:16.500 --> 00:07:26.240
can cause substantial damage to the funds that can't otherwise else.

75
00:07:26.340 --> 00:07:32.670
Everything has been done successfully and the order has been closed.

76
00:07:32.820 --> 00:07:42.500
So we need to tell the trader we just gave him a friendly message say order close access for we we don't

77
00:07:42.500 --> 00:07:47.810
need an exclamation mark because that's how we expect things to progress so we don't need to attract

78
00:07:47.810 --> 00:07:49.360
attention to that.

79
00:07:49.400 --> 00:07:53.870
So we'll compile that as you can see no more errors or warnings.

80
00:07:53.990 --> 00:08:01.610
That is because we are accounting for the result of the return value of order clause and we have put

81
00:08:01.610 --> 00:08:04.320
in place a failsafe mechanism.

82
00:08:04.490 --> 00:08:17.170
And now if we go to the terminal and in scripts we look for Tauriel 18 and we drag that onto the chart.

83
00:08:17.500 --> 00:08:21.380
We will then change the inputs you'll see it come up.

84
00:08:21.380 --> 00:08:25.460
Now and right away it was closed.

85
00:08:25.460 --> 00:08:31.610
So your ticket is that number and then a closing order and order close successfully.

86
00:08:31.610 --> 00:08:38.900
So if we go to account history here we can see the only order that ever existed is that order which

87
00:08:38.900 --> 00:08:48.500
we opened and we closed right away so we can do that again just to see how it works we'll maybe change

88
00:08:48.500 --> 00:08:54.830
this to 40 and 30 take profit 40 plus 30.

89
00:08:54.890 --> 00:08:56.000
See what happens then.

90
00:08:56.980 --> 00:08:59.580
Orders opened or it is closed.

91
00:08:59.620 --> 00:09:01.280
Is that one more time.

92
00:09:01.880 --> 00:09:05.780
One hundred and fifty.

93
00:09:05.870 --> 00:09:06.930
I was making 80

94
00:09:11.040 --> 00:09:14.230
or is open orders closed.

95
00:09:14.430 --> 00:09:16.200
And there you go.

96
00:09:16.200 --> 00:09:18.520
That's that's how it works.

97
00:09:18.580 --> 00:09:25.560
Just go back to the code quickly and you can see that the code is starting to grow that it's getting

98
00:09:25.560 --> 00:09:35.370
some flesh to itself and it's it's growing quite quickly and that you'll see that that's what naturally

99
00:09:35.370 --> 00:09:37.690
happens when you build and build upon program.

100
00:09:37.860 --> 00:09:44.700
But the best part about it is that we've literally gone through every line of this code and we know

101
00:09:44.700 --> 00:09:45.990
exactly what's happening.

102
00:09:45.990 --> 00:09:55.820
So that's some very good groundwork that we've done and that will help us in our future tracking systems.

103
00:09:56.160 --> 00:09:58.590
And I'll see at the next tutorial.

104
00:09:58.600 --> 00:09:59.790
Until then coding.
