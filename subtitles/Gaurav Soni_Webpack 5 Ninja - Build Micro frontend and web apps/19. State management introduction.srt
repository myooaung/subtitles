1
00:00:00,330 --> 00:00:03,090
Welcome to another topic on the micro frank discussion.

2
00:00:03,450 --> 00:00:06,870
Now we have already seen how to be doing the routing between the applications.

3
00:00:07,200 --> 00:00:09,930
Now we also need to know how do we doing this data management?

4
00:00:10,350 --> 00:00:15,270
First, let's just get a brief of what exactly is state management and in our application, where will

5
00:00:15,270 --> 00:00:17,040
we be needing the state management?

6
00:00:17,730 --> 00:00:23,190
So for example, we have this homepage application running here and we had this quick booking component

7
00:00:23,190 --> 00:00:23,940
running on top.

8
00:00:24,420 --> 00:00:28,410
Now in the quick booking comprend, you can select the date and you can select the time and the movie

9
00:00:28,410 --> 00:00:29,880
and then click on the book button.

10
00:00:30,330 --> 00:00:33,990
Now, once you click on the book button, you are redirected to the seed selection page.

11
00:00:34,290 --> 00:00:36,300
So everything was working fine until here.

12
00:00:36,750 --> 00:00:42,180
Now the question is, how do we pass this data which we have selected or here to this component running

13
00:00:42,180 --> 00:00:44,130
in a separate application altogether?

14
00:00:44,580 --> 00:00:46,980
So we need some sort of mechanism to do this, right?

15
00:00:47,370 --> 00:00:51,870
Now, the purpose of getting the data loaded over here is so that we can show the movie name, the date

16
00:00:51,870 --> 00:00:54,480
selected, as well as the time selected for that movie.

17
00:00:54,990 --> 00:00:59,820
Now, once that is done, you can just come here and select the seats and then click on the book button.

18
00:00:59,820 --> 00:01:01,320
And that's how you're going to be doing the booking.

19
00:01:02,070 --> 00:01:02,460
Okay.

20
00:01:02,670 --> 00:01:05,640
The same thing also needs to be implemented on another page.

21
00:01:05,670 --> 00:01:06,840
That's our detail page.

22
00:01:07,020 --> 00:01:12,360
So if I just come down over here, we will navigate to the detail page when we click on any of the movie

23
00:01:12,360 --> 00:01:12,690
cards.

24
00:01:13,050 --> 00:01:16,290
Now, again, we have the movie, we have the date and the time.

25
00:01:16,290 --> 00:01:21,300
And when we click on this, we need to be taken to the movie booking page or our seat selection page.

26
00:01:21,540 --> 00:01:23,700
And in here we need to be passing all the data.

27
00:01:24,330 --> 00:01:27,540
So this data is basically the state that we need to be passing.

28
00:01:27,840 --> 00:01:33,990
Now, state can also be things such as maybe noting a data from your server or any sort of JavaScript

29
00:01:33,990 --> 00:01:35,790
object can be considered as a state.

30
00:01:36,120 --> 00:01:40,680
And when you want to be passing the state between applications, you need some sort of mechanism for

31
00:01:40,680 --> 00:01:41,160
doing that.

32
00:01:42,170 --> 00:01:42,470
Okay.

33
00:01:42,470 --> 00:01:46,550
So that is about what is this state that we need to be managing in our application.

34
00:01:46,970 --> 00:01:49,760
Now, let me show you how it works using one of the libraries.

35
00:01:50,180 --> 00:01:53,750
Now, when you are accessing the data in JavaScript, generally two ways of accessing it.

36
00:01:54,020 --> 00:01:55,970
So let me just switch over to my diagram here.

37
00:01:56,480 --> 00:02:00,440
And there are two mechanisms are either the push mechanism or the pull mechanism.

38
00:02:00,920 --> 00:02:05,660
So for example, in the pull mechanism, just consider a simple JavaScript function.

39
00:02:06,020 --> 00:02:07,730
You just have like a helloworld function.

40
00:02:08,000 --> 00:02:13,310
And when you invoked that function or when you explicitly call that function, only then that function

41
00:02:13,310 --> 00:02:16,400
is executed and whatever's written within the function gets called.

42
00:02:16,820 --> 00:02:19,430
So this is the consumer who is going to be calling that function.

43
00:02:19,760 --> 00:02:21,260
Similar thing can be done for objects.

44
00:02:21,270 --> 00:02:24,110
Suppose you have some object that needs to be initialized and so on.

45
00:02:24,410 --> 00:02:28,820
Again, it's somewhat like a pull mechanism where you're going to be initializing it only when the consumer

46
00:02:28,820 --> 00:02:29,330
wants it.

47
00:02:29,810 --> 00:02:33,920
So this is sort of a mechanism in which the function does not really know when it's going to be called.

48
00:02:33,920 --> 00:02:35,780
And it all depends on the consumer.

49
00:02:36,170 --> 00:02:41,300
Now, in the case of push mechanism, we have a very popular implementation and that is using the promise

50
00:02:41,300 --> 00:02:41,720
button.

51
00:02:42,140 --> 00:02:46,190
So if you have already worked in JavaScript, you might have heard of promises and we have used them

52
00:02:46,190 --> 00:02:49,910
already when you are supposed calling your APIs from a server.

53
00:02:50,180 --> 00:02:51,620
That is all wire promises.

54
00:02:52,070 --> 00:02:55,760
So it takes some time and then the promise resolves and that's how you get the data.

55
00:02:56,240 --> 00:03:00,950
So generally when you have the promise, you have like a promise object and that object might either

56
00:03:00,950 --> 00:03:02,930
resolve or reject after some time.

57
00:03:03,530 --> 00:03:05,750
So this is, again, a synchronous pattern.

58
00:03:06,050 --> 00:03:10,550
And the consumer really does not know when the data is going to be returned from this promise object.

59
00:03:10,850 --> 00:03:14,510
It might be after a couple of seconds or it might be within a few milliseconds.

60
00:03:14,870 --> 00:03:19,850
So this is a push mechanism in which the data is sort of pushed to the consumer after the consumer sort

61
00:03:19,940 --> 00:03:20,900
subscribed to it.

62
00:03:21,530 --> 00:03:21,890
All right.

63
00:03:22,280 --> 00:03:24,470
So this is the promise mechanism.

64
00:03:24,650 --> 00:03:29,510
Now, one another approach of implementing the push mechanism is using observables.

65
00:03:29,930 --> 00:03:32,210
So in here we can see how it works.

66
00:03:32,720 --> 00:03:39,260
So in this, we have a observable object and this can be also considered somewhat like a normal JavaScript

67
00:03:39,260 --> 00:03:39,650
object.

68
00:03:40,190 --> 00:03:45,260
Now, the difference away here is now this object is sort of connected to a producer and a consumer.

69
00:03:45,650 --> 00:03:47,980
So you can sort of consider this like an attic.

70
00:03:48,230 --> 00:03:50,330
So let me just, you know, probably type it out here.

71
00:03:51,050 --> 00:03:55,610
So let's suppose we have like an array here and let's suppose they have a couple of numbers here.

72
00:03:56,270 --> 00:03:59,600
Now, this can be sort of considered like an observable object.

73
00:04:00,170 --> 00:04:03,080
Now, in this, the producer is going to be modifying this object.

74
00:04:03,410 --> 00:04:08,390
And as soon as someone is going to be modifying this object, all the consumers who are subscribed to

75
00:04:08,390 --> 00:04:13,070
this observable object are going to be notified that, hey, there's some change in this object and

76
00:04:13,070 --> 00:04:14,660
you can go ahead and access this data.

77
00:04:15,200 --> 00:04:20,240
So this is, again, a push mechanism in which the consumer does not really know when the data is going

78
00:04:20,240 --> 00:04:24,110
to be sent and the producer can push the data as and when required.

79
00:04:24,740 --> 00:04:27,350
So this is the pattern that we are going to be using.

80
00:04:27,620 --> 00:04:32,450
Now, just to put this into the implementation as how this is going to be implemented on our previous

81
00:04:32,450 --> 00:04:32,710
page.

82
00:04:32,720 --> 00:04:37,370
So if I just switch back here now, as soon as we click on this book button, we are going to be updating

83
00:04:37,370 --> 00:04:38,810
a observable object.

84
00:04:39,200 --> 00:04:43,730
Now, as soon as the updated observe rule object, it is going to be subscribed on the seed selection

85
00:04:43,730 --> 00:04:47,750
page and automatically all the data is going to be pushed to the seed selection page.

86
00:04:48,320 --> 00:04:53,480
Similarly, when we make any changes to the same observable object from the details page, again, the

87
00:04:53,480 --> 00:04:57,020
data is going to be updated and sent back to the seed selection page.

88
00:04:57,350 --> 00:05:02,330
So this is on a very high level how things are going to be implemented using the observable pattern.

89
00:05:03,080 --> 00:05:04,640
Now, there might be one question here.

90
00:05:04,640 --> 00:05:11,240
If you already worked with single page application, maybe React will Angular that many of those applications

91
00:05:11,240 --> 00:05:15,470
generally give inbuilt or an external library for managing the state.

92
00:05:15,860 --> 00:05:21,170
So for example, in React, you got like Redux and in Angular you got its own state management simply

93
00:05:21,170 --> 00:05:23,330
in view or so you have its own state management.

94
00:05:23,660 --> 00:05:26,350
So you can sort of leverage those state management libraries.

95
00:05:26,360 --> 00:05:31,550
But since you are working on the micro frontend architecture, you are not really guaranteed that all

96
00:05:31,550 --> 00:05:35,810
the applications that are running in the micro frontend are all react angular of you.

97
00:05:36,260 --> 00:05:41,330
So you need to be using some sort of library that can be used across all the kind of frameworks that

98
00:05:41,330 --> 00:05:42,230
you have to.

99
00:05:42,230 --> 00:05:47,840
For example, if you have one application running on React, the second application working on Angular

100
00:05:48,140 --> 00:05:52,940
if using this library called are yes, you do not really have to worry about it because it's going to

101
00:05:52,940 --> 00:05:55,430
be supported by anything that can run JavaScript.

102
00:05:55,850 --> 00:05:57,650
And that is exactly what we are going to be using.

103
00:05:58,370 --> 00:05:58,640
Okay.

104
00:05:58,640 --> 00:06:00,890
So that was on a very high level, the theory.

105
00:06:00,950 --> 00:06:05,990
So let's just get overview of what is this audio test library and how do we using some of the methods

106
00:06:05,990 --> 00:06:07,310
that are implemented by it?
