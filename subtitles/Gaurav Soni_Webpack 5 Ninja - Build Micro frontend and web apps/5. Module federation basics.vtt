WEBVTT
1
00:00:00.120 --> 00:00:02.880
In the last video we got the three applications started.

2
00:00:03.180 --> 00:00:08.850
Now to implement the micro frontend approach, we need to be going over a bit of theory of module federation.

3
00:00:09.210 --> 00:00:10.500
Now what is Module Federation?

4
00:00:10.950 --> 00:00:17.250
Module Federation is a plugin that's been provided by Part five that helps us to implement the concept

5
00:00:17.250 --> 00:00:18.210
of micro frontend.

6
00:00:18.600 --> 00:00:19.890
So let's see how this works.

7
00:00:20.430 --> 00:00:23.460
Let's suppose we have the application one and application two.

8
00:00:23.790 --> 00:00:26.910
Both of the applications are running on different ports, as you can see here.

9
00:00:26.910 --> 00:00:30.120
One is on 3000, the second one is on the 3001.

10
00:00:30.720 --> 00:00:35.070
Now what are the basic configuration that we need to be doing for the Module Federation to work?

11
00:00:35.520 --> 00:00:38.610
Well, we need to be implementing two very important properties here.

12
00:00:39.060 --> 00:00:42.450
The first property is going to be called as the exposes property.

13
00:00:42.810 --> 00:00:48.720
The second property is called as the remote exposes, as the name suggests, is thing that I want to

14
00:00:48.720 --> 00:00:54.180
be exposing some modules from this application so that other people or other applications can consume

15
00:00:54.180 --> 00:00:54.360
it.

16
00:00:54.900 --> 00:01:00.750
Now, for example, we have like module one, module two, three and four, and this has been exposed

17
00:01:00.780 --> 00:01:02.640
using this exposed object.

18
00:01:03.240 --> 00:01:09.090
Now on the other hand, on the consumer side, we have the application two which has the remote object.

19
00:01:09.210 --> 00:01:10.590
Now remote basically does.

20
00:01:10.950 --> 00:01:14.700
Hey, these are the application from that I'm going to be pulling up component.

21
00:01:15.000 --> 00:01:18.990
So for example, one of the remotes has been setup we had as application one.

22
00:01:19.260 --> 00:01:24.720
And in this we actually specify localhost, 3000 slash remote entry, Node.js.

23
00:01:25.230 --> 00:01:30.240
And similarly, we also have another application too in which you can be having the other port number

24
00:01:30.240 --> 00:01:31.710
on which that application is running.

25
00:01:31.950 --> 00:01:34.210
So it can be pulling up component from there as well.

26
00:01:34.860 --> 00:01:39.870
Now, one interesting fact to note we heard is we do not really need to be telling each and every component

27
00:01:39.870 --> 00:01:41.250
that we are going to be using.

28
00:01:41.730 --> 00:01:45.390
So, for example, this might be exposing four components or maybe just one component.

29
00:01:45.840 --> 00:01:49.380
We are just going to be mentioning this same line in either cases.

30
00:01:50.350 --> 00:01:50.710
Okay.

31
00:01:50.710 --> 00:01:51.880
So that's great.

32
00:01:51.910 --> 00:01:55.960
Now, one question that might be coming in your head is what is remote entry?

33
00:01:56.200 --> 00:01:57.640
We have never used something like this.

34
00:01:57.640 --> 00:02:03.850
Right now when we re users exposes or the Marine Federation plug in, we're going to be exposing a special

35
00:02:03.850 --> 00:02:10.180
file called as the Remote Entry Dodgers Remote and reads basically references all the components that

36
00:02:10.180 --> 00:02:11.590
are there in this application.

37
00:02:12.070 --> 00:02:17.830
So basically this application to goes to this remote entry Dodgers and remote entry Dodgers helps us

38
00:02:17.830 --> 00:02:20.140
to figure out, okay, this component needs to be loaded.

39
00:02:20.140 --> 00:02:24.690
So it sort of pulls design over here and returns it back to the application, too.

40
00:02:25.150 --> 00:02:27.730
So this is sort of how it works in the background.

41
00:02:28.660 --> 00:02:31.630
Similarly, we also need to be naming this application.

42
00:02:31.630 --> 00:02:36.350
So for example, we have this application one, so we need to be giving it appropriate names.

43
00:02:36.370 --> 00:02:37.660
We are going to be seeing that shortly.

44
00:02:38.080 --> 00:02:42.070
So we are going to be referencing those application name in the application too.

45
00:02:42.370 --> 00:02:46.120
So we are going to be referencing this applications using the application name.

46
00:02:46.720 --> 00:02:53.440
So it's going to be more like we are going to be having whereas maybe app one actor it and then localhost

47
00:02:53.440 --> 00:02:55.980
3000 and then the remote entry Dodgers.

48
00:02:56.350 --> 00:03:01.300
So it says that okay there's going to be an application called application one this is going to be defined

49
00:03:01.300 --> 00:03:02.200
or here basically.

50
00:03:02.530 --> 00:03:08.770
So we are going to be having another property called as file name and in here will see app one.

51
00:03:09.370 --> 00:03:14.350
And this is basically saying that the my name is app one and I'm exposing all this components.

52
00:03:14.980 --> 00:03:18.040
So this is on a very high level how things are going to be working.

53
00:03:18.310 --> 00:03:21.760
So the main concept to remember all here is this remote entry dodgers.

54
00:03:22.330 --> 00:03:26.530
Most of the times, if we're getting error, that we know the module is not found or cannot be accessed.

55
00:03:26.920 --> 00:03:30.280
Make sure that this file is being exposed properly from your application.

56
00:03:31.320 --> 00:03:31.740
Okay.

57
00:03:31.740 --> 00:03:36.060
So that might seem a little odd because we have not done all of this so far in practical.

58
00:03:36.330 --> 00:03:41.580
So I'm just going to be taking a short break and implementing all this concept in the application that

59
00:03:41.580 --> 00:03:43.530
we just got started on our computer.
