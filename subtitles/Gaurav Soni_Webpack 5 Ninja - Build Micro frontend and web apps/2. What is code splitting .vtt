WEBVTT
1
00:00:00.390 --> 00:00:04.800
I'll write down before we start optimizing things in other back, let's try to figure out what are the

2
00:00:04.800 --> 00:00:06.780
problems and what are we trying to optimize exactly.

3
00:00:07.230 --> 00:00:10.760
So this was the graph that we worked in earlier, the plug ins.

4
00:00:10.770 --> 00:00:13.200
So we saw how the dependency graph was maintained.

5
00:00:13.620 --> 00:00:17.190
We saw how we using the back loaders to load external files.

6
00:00:17.640 --> 00:00:20.580
Then we applied a couple of plug ins to optimize our build further.

7
00:00:21.090 --> 00:00:26.220
Okay, so we got the Webpack output and we were also able to output multiple bundle files.

8
00:00:26.340 --> 00:00:31.710
As you saw in the last section, we were outputting the index start bundle file and also the courses

9
00:00:31.740 --> 00:00:33.660
are bundle for the two separate pages.

10
00:00:33.990 --> 00:00:35.640
So things were looking pretty good.

11
00:00:36.120 --> 00:00:37.590
So what is the next part?

12
00:00:38.010 --> 00:00:40.380
The next part is going to be about code splitting.

13
00:00:40.920 --> 00:00:42.270
So what is called splitting?

14
00:00:42.720 --> 00:00:46.230
Well, we have seen the index start as HTML had a lot of dependencies.

15
00:00:46.230 --> 00:00:51.620
It had dependencies such as low dash, bootstrap type and so on and courses.

16
00:00:51.930 --> 00:00:53.850
HTML also had a couple of dependencies.

17
00:00:54.240 --> 00:00:59.820
So as you can see, we had the equity validate toaster and so on and a couple of the dependencies were

18
00:00:59.820 --> 00:01:00.600
actually shared.

19
00:01:00.750 --> 00:01:06.090
So for example, you can see that loads has been added in both places and similar thing has been done

20
00:01:06.090 --> 00:01:07.260
for bootstrap as well.

21
00:01:07.830 --> 00:01:12.560
Now when the bundle was created, these dependencies are getting added in both the bundles.

22
00:01:12.570 --> 00:01:16.860
So it was there in the index start bundle as well as in the courses dot bundle.

23
00:01:17.550 --> 00:01:19.110
So what is called splitting?

24
00:01:19.590 --> 00:01:24.780
Well, code splitting is the technique of bringing out this common dependencies into a separate bundle.

25
00:01:25.200 --> 00:01:29.490
So what I mean by that is off the code, splitting our code will look something like this.

26
00:01:29.820 --> 00:01:35.070
So instead of having these dependencies in both tables, we're going to be having a third build here.

27
00:01:35.100 --> 00:01:38.040
So maybe something like a common dependencies.

28
00:01:38.040 --> 00:01:40.380
So let me just name it as common.

29
00:01:40.920 --> 00:01:43.920
And this is going to be housing all the common dependencies.

30
00:01:44.430 --> 00:01:48.480
So what we are going to be having all we had is this location is going to be moved over here.

31
00:01:49.200 --> 00:01:51.330
So let me just quickly fix that.

32
00:01:52.470 --> 00:01:54.900
So this is going to be moved right here.

33
00:01:55.500 --> 00:02:00.510
And similarly, we can see that this dependency is no more required and similar things are going to

34
00:02:00.510 --> 00:02:01.770
be happening for bootstrap as well.

35
00:02:02.130 --> 00:02:07.500
So bootstrap can also be brought to this entire block and we can remove bootstrap from here.

36
00:02:08.220 --> 00:02:10.370
Now this common bundle ignores that.

37
00:02:10.380 --> 00:02:14.070
Okay, I need to be loading both of these dependencies for both of these pages.

38
00:02:14.430 --> 00:02:19.560
So instead of loading it multiple times is going to be using this common burden, and then we are going

39
00:02:19.560 --> 00:02:23.830
to be injecting this common bundle into our main index start estimate.

40
00:02:23.840 --> 00:02:26.070
And so it's going to be something like this.

41
00:02:26.670 --> 00:02:31.560
So we have our two bundle files created, one, the common bundle and the courses bundle.

42
00:02:31.800 --> 00:02:34.890
And this is going to be used in the course dart HTML file.

43
00:02:35.490 --> 00:02:38.340
So in this way we are loading the dependencies only ones.

44
00:02:39.330 --> 00:02:39.690
Okay.

45
00:02:39.690 --> 00:02:41.730
So that is the multiple bundles.

46
00:02:41.760 --> 00:02:44.850
So what are the advantages of doing this splitting, first of all?

47
00:02:45.150 --> 00:02:48.270
We are going to be having multiple bundles and no need to be loading all the bundles.

48
00:02:48.270 --> 00:02:50.640
We can be loading bundles only when they are required.

49
00:02:51.240 --> 00:02:52.950
So that is one of the requirements.

50
00:02:53.310 --> 00:02:55.200
And we also prevent duplication.

51
00:02:55.230 --> 00:02:59.010
So as you saw, we are not loading the launch dependency multiple times.

52
00:02:59.430 --> 00:03:01.290
And that's how we are preventing the duplication.

53
00:03:02.160 --> 00:03:02.520
Okay.

54
00:03:02.520 --> 00:03:04.230
And then we have the dynamic import.

55
00:03:04.560 --> 00:03:09.900
Now, dynamic import is something really cool in which you only load the dependencies as and when they're

56
00:03:09.900 --> 00:03:11.040
required dynamically.

57
00:03:11.490 --> 00:03:14.520
And I'm not going to be covering a lot in depth right now.

58
00:03:14.520 --> 00:03:19.080
When we go over to that section, we are going to be seeing a lot in depth and also with some practical

59
00:03:19.080 --> 00:03:19.680
examples.

60
00:03:20.820 --> 00:03:21.150
Okay.

61
00:03:21.150 --> 00:03:23.880
With that said, this is about code splitting.

62
00:03:23.880 --> 00:03:26.460
We can do code splitting not just for the JavaScript.

63
00:03:26.460 --> 00:03:32.080
We are also going to be splitting our CSIS files into the Xs bundles, and that is also going to be

64
00:03:32.190 --> 00:03:33.390
our part of the section.

65
00:03:34.140 --> 00:03:34.410
All right.

66
00:03:34.410 --> 00:03:37.130
So that's talked about the theory of what we're going to be implementing.

67
00:03:37.380 --> 00:03:41.730
Let's take a short break and analyze our code and see exactly how we're going to be implementing all

68
00:03:41.730 --> 00:03:42.180
of this.
