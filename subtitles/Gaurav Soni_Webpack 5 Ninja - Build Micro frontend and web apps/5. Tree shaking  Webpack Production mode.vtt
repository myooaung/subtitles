WEBVTT
1
00:00:00.090 --> 00:00:04.770
Welcome back to another video in this we are going to be seeing how do we removing the dead JavaScript?

2
00:00:05.160 --> 00:00:07.830
Now, in the previous video we saw how to be doing this.

3
00:00:07.830 --> 00:00:08.400
Yes.

4
00:00:08.400 --> 00:00:10.920
And this time is going to be the similar thing for JavaScript.

5
00:00:11.460 --> 00:00:14.370
Now, let me try to first explain the concept of tree shaking.

6
00:00:14.940 --> 00:00:17.960
So, for example, I'm going to be taking a practical clear.

7
00:00:18.360 --> 00:00:21.540
So let's try for example, the tree is a map tree.

8
00:00:21.900 --> 00:00:26.610
And when I say tree, you can consider this something like a module, maybe like a decoding module or

9
00:00:26.610 --> 00:00:27.450
a dash module.

10
00:00:27.870 --> 00:00:30.780
So in this module you're going to be having a lot of functions, right?

11
00:00:31.170 --> 00:00:36.960
So you have like the mod function by you have multiplication, subtract, average sum and so on.

12
00:00:37.620 --> 00:00:42.420
Now you might not be using the entire code, you might be using just a couple of functions of example

13
00:00:42.420 --> 00:00:47.430
the ones marked in green, or we're just three of them being used and all the other functions are not

14
00:00:47.430 --> 00:00:49.410
really used part of this math tree.

15
00:00:49.980 --> 00:00:55.980
So the concept is when I do the tree checking, all the unused dependencies should be thrown out from

16
00:00:55.980 --> 00:00:56.190
here.

17
00:00:56.520 --> 00:00:58.950
So it should look something like this.

18
00:00:59.430 --> 00:01:05.430
So in the end, when I do my build, my module should only be containing these functions which are being

19
00:01:05.430 --> 00:01:07.350
used actually in my application.

20
00:01:07.830 --> 00:01:10.230
So that is basically the concept of tree shaking.

21
00:01:10.920 --> 00:01:11.310
Okay.

22
00:01:11.310 --> 00:01:15.900
So there are a couple of rules to be implemented when you are following the tree shaking.

23
00:01:16.410 --> 00:01:17.940
So the rules are listed right here.

24
00:01:18.450 --> 00:01:23.040
The first rule is that we need to be implementing the modules in the ESX format.

25
00:01:23.400 --> 00:01:28.470
Now when I say yes, that basically means using the import and the export syntax we should not be doing

26
00:01:28.470 --> 00:01:30.420
using the common format of required.

27
00:01:30.990 --> 00:01:31.290
Okay.

28
00:01:31.290 --> 00:01:32.190
So that's the first one.

29
00:01:32.190 --> 00:01:35.520
And the second one is we need to be using the Webpack production mode.

30
00:01:35.940 --> 00:01:40.440
So far, we have been running all of this from the start till now in the development mode.

31
00:01:40.800 --> 00:01:43.650
And finally, we are going to be seeing the production mode as well.

32
00:01:44.010 --> 00:01:49.010
We can sort of implement tree shaking in the development mode, but it does not really matter.

33
00:01:49.020 --> 00:01:53.670
And I would suggest you to do it all in the production mode, because once you go into the production

34
00:01:53.670 --> 00:01:57.960
mode, your output is not going to be readable and it's going to be harder to debug in development.

35
00:01:58.890 --> 00:01:59.250
Okay.

36
00:01:59.250 --> 00:02:04.890
So with that said, let's go back to our code and see how do we implementing this and what exactly are

37
00:02:04.890 --> 00:02:05.880
the problems currently.

38
00:02:06.510 --> 00:02:09.030
So I already have a new folder created here.

39
00:02:09.030 --> 00:02:12.240
9.3 and in this I'm going to be implementing CLI shaking.

40
00:02:12.510 --> 00:02:14.470
You can continue on with the last folder.

41
00:02:14.490 --> 00:02:15.510
No major changes.

42
00:02:16.500 --> 00:02:16.770
Okay.

43
00:02:16.770 --> 00:02:20.280
With that said, let's move on and open up our lives folder.

44
00:02:20.520 --> 00:02:22.680
And in this we have a function called us.

45
00:02:22.710 --> 00:02:23.310
Sure did.

46
00:02:24.000 --> 00:02:26.820
Now I'm going to be exporting another function from here.

47
00:02:26.850 --> 00:02:30.960
So let's call that function, dummy function.

48
00:02:32.010 --> 00:02:33.510
So it's not going to be doing a lot.

49
00:02:33.510 --> 00:02:34.950
Just console dialogue.

50
00:02:35.640 --> 00:02:39.870
I'm a dummy function, so that's pretty much it.

51
00:02:40.560 --> 00:02:42.740
So with that done, let me just try to run the build.

52
00:02:42.750 --> 00:02:51.420
I need to be moving up a folder, so I'll go to the 9.3 folder and see and PM run def and try to analyze

53
00:02:51.420 --> 00:02:52.680
how baby looks like.

54
00:02:53.400 --> 00:02:54.690
So this is the function name.

55
00:02:54.690 --> 00:02:56.040
Let me just go ahead and copy that.

56
00:02:56.670 --> 00:03:00.900
So with that, let's just open our disk folder and try to find the particular build.

57
00:03:00.900 --> 00:03:06.120
So for example, it's not going to be in the course bundle for sure, but let's try to go to this index

58
00:03:06.120 --> 00:03:06.720
target.

59
00:03:06.750 --> 00:03:09.600
I'm going to go doing a control F and search for dummy function.

60
00:03:10.170 --> 00:03:13.200
And you can see here that it's actually being imported.

61
00:03:13.560 --> 00:03:15.680
So we have this dummy function right here.

62
00:03:15.690 --> 00:03:17.340
So that's the function definition.

63
00:03:17.340 --> 00:03:20.700
And this was the console dot log that was supposed to be printed by that function.

64
00:03:21.090 --> 00:03:24.600
In short, this function is being imported, although it's not being used anywhere.

65
00:03:25.110 --> 00:03:29.580
Now just imagine, instead of just a consolidated log, this was an entire library, or maybe like a

66
00:03:29.580 --> 00:03:30.540
really big function.

67
00:03:30.810 --> 00:03:33.570
So this is just going to be wastage of resources, right?

68
00:03:33.720 --> 00:03:35.190
Your bundle size is going to increase.

69
00:03:35.730 --> 00:03:37.350
So how do we get rid of this?

70
00:03:37.860 --> 00:03:41.820
So to get rid of this, we are going to be leveraging the production mode of the pack.

71
00:03:42.150 --> 00:03:43.530
So how does that work?

72
00:03:44.010 --> 00:03:45.000
Well, it's quite simple.

73
00:03:45.360 --> 00:03:48.180
We just have to go to our package, Jason.

74
00:03:48.510 --> 00:03:53.640
And in this, you can see when we are running our NPM run dev, we run it in the development mode.

75
00:03:54.000 --> 00:03:56.760
So for the first time, we are going to be switching over to the production mode.

76
00:03:57.120 --> 00:03:58.410
So as a production.

77
00:03:59.580 --> 00:04:00.330
Just like that.

78
00:04:00.330 --> 00:04:03.030
So just make sure your spelling is right for production.

79
00:04:03.630 --> 00:04:05.250
And let's go ahead and save that.

80
00:04:05.430 --> 00:04:08.070
And I'm going to be running NPM run dev once again.

81
00:04:08.580 --> 00:04:10.770
So let's say NPM run Dev.

82
00:04:11.460 --> 00:04:15.270
Okay, let's just give that a second because this time it's running in production.

83
00:04:15.270 --> 00:04:18.240
So there are a lot of optimizations that are going to be happening behind the scene.

84
00:04:18.630 --> 00:04:20.370
So it's going to take slightly longer as well.

85
00:04:21.450 --> 00:04:21.930
Okay.

86
00:04:21.960 --> 00:04:25.290
So with that done, let's see how our file looks like.

87
00:04:25.800 --> 00:04:27.340
So there are a lot of changes here.

88
00:04:27.360 --> 00:04:31.710
So you can see that the file names has been changed as well and is more optimized.

89
00:04:32.100 --> 00:04:35.730
And this was the bundle in which you had that consolidated log earlier.

90
00:04:36.510 --> 00:04:41.730
Now, if I tried to find the consolidated log, I might not be finding it by the exact name of the function.

91
00:04:41.730 --> 00:04:46.050
But if I just try to find the log using the exact log message.

92
00:04:46.470 --> 00:04:51.750
So if I do a control F and just try to find it, I see that it's no longer available.

93
00:04:52.350 --> 00:04:57.600
So this is exactly how tree shaking works and it's automatically been implemented in the production

94
00:04:57.600 --> 00:05:01.500
world, although you did not really have to do a lot of configuration here.

95
00:05:01.860 --> 00:05:07.170
But I just wanted to show you behind the scene as what is the problem that was there and how it was

96
00:05:07.170 --> 00:05:08.730
being solved in the production mode.

97
00:05:09.060 --> 00:05:12.870
And this is also going to be very important if you're like taking some interview and they ask you about

98
00:05:12.870 --> 00:05:15.720
tree shaking or how you can be optimizing your base.

99
00:05:16.020 --> 00:05:18.660
So this is a very good answer to be saying to your interviewer.

100
00:05:18.990 --> 00:05:19.290
All right.

101
00:05:19.290 --> 00:05:20.280
So that was a prototype.

102
00:05:20.280 --> 00:05:22.860
And that's about it, what we're going to be doing in the production mode.

103
00:05:23.160 --> 00:05:27.600
Let's take a look at the differences between the production and the development mode in the next video

104
00:05:27.870 --> 00:05:30.930
and how we can be segregating our pack mode based on this mode.
