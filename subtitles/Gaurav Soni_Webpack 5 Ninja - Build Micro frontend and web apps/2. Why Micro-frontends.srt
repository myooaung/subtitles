1
00:00:00,090 --> 00:00:00,390
All right.

2
00:00:00,400 --> 00:00:05,220
Now, before we start off and do anything related to my girlfriend and let's let's try to understand

3
00:00:05,220 --> 00:00:06,370
what is this concept?

4
00:00:06,390 --> 00:00:07,260
Why do we need it?

5
00:00:07,320 --> 00:00:08,580
And what is this trying to solve?

6
00:00:09,030 --> 00:00:15,180
So I've developed a diagram here and I've taken the example of a normal e-commerce website, done development

7
00:00:15,180 --> 00:00:17,010
without any micro random concept.

8
00:00:17,310 --> 00:00:22,410
So we are maybe using a React application or Angular application, any other single page application

9
00:00:22,410 --> 00:00:23,970
that might be coming up in the future.

10
00:00:24,510 --> 00:00:25,840
So let's take the example here.

11
00:00:26,250 --> 00:00:30,900
You can see that I've denoted this entire application by this yellow box that shows that it's a single

12
00:00:30,900 --> 00:00:31,650
application here.

13
00:00:32,160 --> 00:00:35,490
And in this application, you might be having multiple single components.

14
00:00:35,790 --> 00:00:39,870
So, for example, you have like this header component, you might be having a couple of image components,

15
00:00:40,200 --> 00:00:45,900
then you have some components to render these boxes along with the title of the product and many more

16
00:00:45,900 --> 00:00:46,170
here.

17
00:00:46,770 --> 00:00:47,040
Okay.

18
00:00:47,040 --> 00:00:48,510
So that's the general approach.

19
00:00:48,870 --> 00:00:54,540
Now, if I just scroll down, we can see that we have sort of given an overview of how things work here.

20
00:00:55,140 --> 00:00:57,150
Now generally you're going to be having a package.

21
00:00:57,190 --> 00:01:01,920
Dodgson Now, in this package or design, it's going to be containing all the dependencies that are

22
00:01:01,920 --> 00:01:03,690
required for your application to work.

23
00:01:03,990 --> 00:01:06,120
So, for example, I've taken three dependencies here.

24
00:01:06,480 --> 00:01:10,200
You have your components, the dependency utils and your auto library.

25
00:01:10,740 --> 00:01:15,450
Now the components might be something like your material UI components or maybe some components that

26
00:01:15,450 --> 00:01:17,130
have been developed within your company.

27
00:01:17,640 --> 00:01:19,080
Now, let's take the example here.

28
00:01:19,740 --> 00:01:23,730
Your repository, your e-commerce repository depends on three other repositories.

29
00:01:24,150 --> 00:01:27,000
So you have the frontend and the utils repository.

30
00:01:27,300 --> 00:01:30,420
And there was a version bump up on the frontend component.

31
00:01:30,450 --> 00:01:32,520
There was a new component that was released.

32
00:01:32,820 --> 00:01:35,640
And you would like to use that component in your repository.

33
00:01:36,150 --> 00:01:37,260
So not even that list.

34
00:01:37,260 --> 00:01:39,540
For example, there was a bug in one of the components.

35
00:01:39,540 --> 00:01:43,890
Maybe they had a component here and things were not aligned within that component.

36
00:01:44,370 --> 00:01:46,020
Now how are you going to be fixing it?

37
00:01:46,380 --> 00:01:50,910
So generally the team who's going to be working on the frontend component library, they're going to

38
00:01:50,910 --> 00:01:52,050
be fixing that issue.

39
00:01:52,380 --> 00:01:54,390
And they're going to be doing a version bump up.

40
00:01:54,630 --> 00:01:58,590
They're going to be doing the testing, basically pipeline and finally, a deployment.

41
00:01:58,860 --> 00:02:03,120
And then you finally have the version two of that frontend component repository.

42
00:02:03,630 --> 00:02:04,890
So things looks good here.

43
00:02:05,280 --> 00:02:10,110
Now my e-commerce team comes up and says that, okay, I need to be fixing this in my application as

44
00:02:10,110 --> 00:02:10,380
well.

45
00:02:10,770 --> 00:02:15,690
So what they need to be doing is they need to be sort of pulling this new version, too, into their

46
00:02:15,960 --> 00:02:17,130
e-commerce repository.

47
00:02:17,340 --> 00:02:22,560
They need to come to this package audition and probably make this version as version two.

48
00:02:22,740 --> 00:02:25,450
And that's when the issue is going to be fixed.

49
00:02:25,470 --> 00:02:28,380
That was released by the frontend component repository team.

50
00:02:29,100 --> 00:02:32,520
So if you understand here, there's a big dependency.

51
00:02:33,060 --> 00:02:38,340
First dependency is I need to be informing this e-commerce team that he thinks has been fixed and you

52
00:02:38,340 --> 00:02:40,350
need to be updating your application as well.

53
00:02:41,870 --> 00:02:44,360
Now we know the problem arises right here.

54
00:02:44,810 --> 00:02:50,720
Now, as soon as I do that, I need to be going through the entire CD pipeline myself as also being

55
00:02:50,720 --> 00:02:52,610
the part of the ecommerce repository.

56
00:02:53,030 --> 00:02:56,390
So in the e-commerce repository also, I need to do a version bump up.

57
00:02:56,480 --> 00:02:58,510
I need to be doing the testing, this CD.

58
00:02:59,030 --> 00:03:04,010
Finally, the deployment and then release to the production environment so that my customers get the

59
00:03:04,010 --> 00:03:06,140
latest fix to ocean of that component.

60
00:03:06,560 --> 00:03:09,410
Now, as you can imagine, this is a lot of tedious work.

61
00:03:09,710 --> 00:03:15,470
Just for a small upgrade, you need to be going through the entire CSC pipeline for both of the repository.

62
00:03:15,740 --> 00:03:19,010
And this is exactly where Michael Franklin can be very useful.

63
00:03:19,430 --> 00:03:24,680
You do not have a very tight dependency on the different repositories that you're working with, and

64
00:03:24,680 --> 00:03:26,360
things are very loosely coupled here.

65
00:03:26,960 --> 00:03:30,740
So let's see how the same thing would work in a micro frontend approach.

66
00:03:31,370 --> 00:03:32,870
Now let me switch my page.

67
00:03:33,110 --> 00:03:36,950
Now let's see how things work in the micro frontend approach when we're doing the deployment.

68
00:03:37,190 --> 00:03:41,600
So let's say for example again we arrived at the same problem that there was some issue in the header

69
00:03:41,600 --> 00:03:42,830
and that needed to be fixed.

70
00:03:43,280 --> 00:03:49,370
So if we go to the architecture, we are going to be having the e-commerce applications running separately.

71
00:03:49,380 --> 00:03:55,040
So this might be having a domain such as this homepage dot e-commerce dot com, and you have another

72
00:03:55,040 --> 00:03:59,840
repository or another application running separately called the components repository.

73
00:04:00,140 --> 00:04:04,460
And this would be hosted on another endpoint called component dot e-commerce dot com.

74
00:04:05,120 --> 00:04:11,510
Now e-commerce is having its own deployment cycle and it gets deployed on a separate namespace and the

75
00:04:11,510 --> 00:04:16,610
components get deployed on a different namespace following a different or the same development cycle.

76
00:04:17,270 --> 00:04:23,030
Now, once this is done, we are going to be merging both of them on a single website called the e-commerce

77
00:04:23,030 --> 00:04:23,600
dot com.

78
00:04:24,020 --> 00:04:29,030
And as you can imagine, if there's any issue in the components repository, the components team can

79
00:04:29,030 --> 00:04:34,670
just pick up that particular issue, do the fixes, do the deployment on this particular end point and

80
00:04:34,670 --> 00:04:37,460
things are going to be automatically merged on the main website.

81
00:04:37,820 --> 00:04:42,140
They do not even really need to be telling the e-commerce team that there was an issue in the header.

82
00:04:42,380 --> 00:04:44,510
They can just go ahead and fix it by themselves.

83
00:04:45,200 --> 00:04:50,750
Now this is a very big advantage and it can really speed up your development cycle of your application.

84
00:04:51,680 --> 00:04:54,950
So with that said, let's just see from the competitive perspective as well.

85
00:04:54,980 --> 00:05:02,000
So if I just come down here, I have the homepage here so you can see we have the homepage on the homepage

86
00:05:02,000 --> 00:05:03,320
dot e-commerce dot com.

87
00:05:03,680 --> 00:05:08,660
And by this, I want to sort of tell you that it's not really mandatory that you need to be dividing

88
00:05:08,660 --> 00:05:10,700
your application by components.

89
00:05:10,700 --> 00:05:16,220
And as an application, you might even be deciding in your company that you need to be managing your

90
00:05:16,220 --> 00:05:17,870
components page perspective.

91
00:05:18,230 --> 00:05:21,440
So for example, let's suppose one team is going to be maintaining the homepage.

92
00:05:21,740 --> 00:05:24,800
They can be under the team that can be managing the accounts page.

93
00:05:25,130 --> 00:05:28,160
So you can make your application not just components but perspective.

94
00:05:28,160 --> 00:05:29,390
You one page perspective.

95
00:05:29,690 --> 00:05:31,910
So different teams can be managing different pages.

96
00:05:32,210 --> 00:05:36,950
And in the end, all the pages are going to be missed and a single website is going to be created.

97
00:05:37,310 --> 00:05:42,260
So internally, these pages can be using more comprehensive example as homepage dot e-commerce, which

98
00:05:42,260 --> 00:05:47,800
itself is a different application, is internally using this component dot e-commerce com.

99
00:05:48,200 --> 00:05:51,890
And similarly, if you can see that we have this account page.

100
00:05:52,100 --> 00:05:57,460
So this is using the comprehensive e-commerce as well as another application called auto e-commerce

101
00:05:57,470 --> 00:05:58,040
dot com.

102
00:05:58,730 --> 00:06:03,140
So as you can see, we can really mix and match and gives us a lot of flexibility when you're doing

103
00:06:03,140 --> 00:06:03,830
the development.

104
00:06:04,400 --> 00:06:08,000
Now, this might seem really daunting, but so do not really worry about this.

105
00:06:08,000 --> 00:06:11,960
We are going to be actually implementing all of this and things are going to get really clear.

106
00:06:13,490 --> 00:06:19,460
Now, finally, before we close off, I would just like to really go over the advantages and disadvantages

107
00:06:19,460 --> 00:06:20,540
of doing all of this.

108
00:06:21,080 --> 00:06:22,640
So I have that listed here as well.

109
00:06:23,360 --> 00:06:28,310
So the advantages of following the micro frontend approach is first of all performance.

110
00:06:28,490 --> 00:06:33,430
Since we're sharing a lot of code among the pages, there is definitely a performance boost.

111
00:06:33,440 --> 00:06:35,940
Here you have the faster production rollout.

112
00:06:35,960 --> 00:06:40,550
So since you do not have a tight dependency on the other teams, you can roll out the application to

113
00:06:40,550 --> 00:06:41,750
production much faster.

114
00:06:42,530 --> 00:06:44,700
Then you have the easier code usability.

115
00:06:44,720 --> 00:06:50,060
So since you can sort of share the components or the code between the pages, you can have a very good

116
00:06:50,060 --> 00:06:51,260
code reusability.

117
00:06:52,040 --> 00:06:55,460
Then finally you have the reduced dependency, as I mentioned earlier.

118
00:06:55,490 --> 00:06:58,700
You do not have to wait on the teams for follow up and so on.

119
00:06:59,300 --> 00:07:02,990
But there is a couple of drawbacks associated with the micro frontend approach.

120
00:07:03,260 --> 00:07:05,330
First of all is the lack of control.

121
00:07:05,810 --> 00:07:10,460
Now let's say for example, there is some UI upgrade that's happening in one team and the other team

122
00:07:10,460 --> 00:07:11,750
is not really aware of it.

123
00:07:12,020 --> 00:07:16,640
So once you are in the production environment, you might be seeing sort of different devices on the

124
00:07:16,640 --> 00:07:17,330
two pages.

125
00:07:17,540 --> 00:07:23,210
So you need to really have a better communication between the teams and at the organization level itself

126
00:07:23,210 --> 00:07:24,680
as what needs to be implemented.

127
00:07:25,310 --> 00:07:29,840
Then you also need more coordination between the teams and that is the contract.

128
00:07:30,080 --> 00:07:34,580
So let's suppose there's communication between the two pages and this is maintained by two different

129
00:07:34,580 --> 00:07:34,850
team.

130
00:07:35,120 --> 00:07:40,730
So let's suppose the API contract or the communication contract has been changed, then things can definitely

131
00:07:40,730 --> 00:07:41,020
feel.

132
00:07:41,120 --> 00:07:45,410
So you need to be taking care and also have a very good coordination between the teams.

133
00:07:46,310 --> 00:07:52,430
The final drawback is basically the complexity of the overall application sort of increases since you

134
00:07:52,430 --> 00:07:55,940
need to be maintaining multiple pipelines for each of the applications.

135
00:07:56,270 --> 00:08:00,440
So this can again, sort of add the complexity of your final application.

136
00:08:00,800 --> 00:08:05,840
So I confronted is generally very good if you are working on a bigger application but but does not have

137
00:08:05,840 --> 00:08:09,080
a lot of advantages if you're just trying to build a smaller application.

138
00:08:09,830 --> 00:08:13,300
So if that information was a lot, do not really worry about it.

139
00:08:13,310 --> 00:08:17,630
We are going to be seeing all of this impractical and things are going to get really clear about it.

140
00:08:18,110 --> 00:08:21,680
Again, I'm just going to take a break and then present to you what is the project that we're going

141
00:08:21,680 --> 00:08:24,260
to be working on using the micro frontend approach?
