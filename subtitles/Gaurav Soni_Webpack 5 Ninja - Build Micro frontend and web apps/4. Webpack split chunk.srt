1
00:00:00,210 --> 00:00:03,540
In the last video, we were able to analyze what's happening in our bundle.

2
00:00:03,870 --> 00:00:07,290
Now, just to give a recap, let's see what was our bundle looking like?

3
00:00:07,620 --> 00:00:13,140
So let me go to my browser and we saw that we had two bundles and there were a lot of dependencies that

4
00:00:13,140 --> 00:00:15,150
were getting replicated across the bundles.

5
00:00:15,600 --> 00:00:18,900
So in this video, we're going to be seeing how to be optimizing all of this.

6
00:00:19,620 --> 00:00:21,330
So let's go back to our code.

7
00:00:21,960 --> 00:00:24,610
And in this, I've already created a new folder here.

8
00:00:24,630 --> 00:00:26,160
As you can see, it's 8.6.

9
00:00:26,430 --> 00:00:30,960
If you want, you can just continue on with the previous folder and you're going to be using this optimization

10
00:00:30,960 --> 00:00:32,490
base as your root folder.

11
00:00:33,390 --> 00:00:33,620
Okay.

12
00:00:33,720 --> 00:00:34,380
But that's it.

13
00:00:34,650 --> 00:00:36,990
Let's start ahead and do the optimization.

14
00:00:37,620 --> 00:00:40,890
Now, surprisingly, the optimization is quite straightforward.

15
00:00:41,250 --> 00:00:44,070
You do not need to install any plugin as such.

16
00:00:44,430 --> 00:00:45,600
So how does it work?

17
00:00:46,020 --> 00:00:49,710
Now in the back it gives in-built optimization tool.

18
00:00:50,070 --> 00:00:52,800
So this is specific for Webpack five.

19
00:00:53,160 --> 00:00:55,860
So make sure you're using the latest version of a pack.

20
00:00:56,220 --> 00:00:58,890
Now what I'm going to be doing here, we have seen the plugin section.

21
00:00:58,920 --> 00:01:00,240
I'll just minimize this for now.

22
00:01:00,870 --> 00:01:03,060
And I'm going to be adding a new section here.

23
00:01:03,540 --> 00:01:06,060
So this is called as optimization.

24
00:01:06,660 --> 00:01:08,460
So that's optimization right there.

25
00:01:08,760 --> 00:01:11,070
And this is, again, going to be of type object.

26
00:01:11,520 --> 00:01:14,220
Now, we are going to be adding some optimizations here.

27
00:01:14,640 --> 00:01:19,080
And the optimization that we're looking for is called split chunks.

28
00:01:20,010 --> 00:01:23,400
So as the name suggest, we are going to be splitting and creating additional chunks.

29
00:01:23,540 --> 00:01:23,840
We yeah.

30
00:01:24,510 --> 00:01:30,240
Now we also need to be specifying one additional property within it, and that is which are the chunks

31
00:01:30,240 --> 00:01:31,350
that we need to split.

32
00:01:31,650 --> 00:01:34,890
So by default, we are going to be splitting all the chunks that were created.

33
00:01:35,160 --> 00:01:39,420
So in our case, there were two chunks that were created or two bundles that were created, I would

34
00:01:39,420 --> 00:01:39,660
say.

35
00:01:40,080 --> 00:01:43,080
And those are the courses and the index bundle ideas.

36
00:01:43,500 --> 00:01:49,230
So any of you would say as chunks and this is going to be of type string and we are putting up here

37
00:01:49,230 --> 00:01:55,680
as all now this property takes in multiple values so you can pass in all, you can pass it async and

38
00:01:55,680 --> 00:01:56,040
so on.

39
00:01:56,340 --> 00:01:58,200
And we are going to be seeing that later on.

40
00:01:58,200 --> 00:01:59,280
What are the differences?

41
00:01:59,640 --> 00:02:02,220
But for the most part, they are going to be just setting it as on.

42
00:02:02,490 --> 00:02:07,500
Now, believe it or not, that's all we need to be doing for getting started with the optimization.

43
00:02:07,890 --> 00:02:13,530
Now what I'm going to do here is I just open up my console, save my Webpack file, and we're going

44
00:02:13,530 --> 00:02:15,840
to be running NPM run dev.

45
00:02:16,470 --> 00:02:21,390
Now, before we go ahead and Randy, NPM run Dev, I want to be disabling one of the plugin.

46
00:02:21,780 --> 00:02:26,280
And that is going to be our plugin for analyzing the bundle.

47
00:02:26,760 --> 00:02:27,750
So this is the blog in.

48
00:02:27,750 --> 00:02:28,890
I'm going to be disabling for now.

49
00:02:28,950 --> 00:02:32,220
So let's just save that and C and B, Imran Dev.

50
00:02:33,710 --> 00:02:34,070
Okay.

51
00:02:34,070 --> 00:02:35,840
Let's just give that a second.

52
00:02:36,440 --> 00:02:36,790
Okay.

53
00:02:36,800 --> 00:02:38,450
So my Brendan was successful.

54
00:02:38,450 --> 00:02:40,250
You can see it compiled successfully.

55
00:02:40,640 --> 00:02:43,340
And let's check out what's that in our test folder?

56
00:02:44,030 --> 00:02:46,820
This folder is going to be quite different than what we had seen earlier.

57
00:02:47,210 --> 00:02:52,670
Now, as you can see earlier, we used to be having a bundle called us course dot bundle dodgers and

58
00:02:52,670 --> 00:02:54,220
we had the index start bundle not.

59
00:02:54,950 --> 00:02:56,960
Now you can see things have shifted quite a lot.

60
00:02:57,260 --> 00:03:02,090
We do have the coaster bundle, but it does not have any of the duplicate dependencies.

61
00:03:02,510 --> 00:03:08,030
For example, if I tried to search for Lord Edge, I do not really see the Lord Ash Library getting

62
00:03:08,030 --> 00:03:08,360
loaded.

63
00:03:08,690 --> 00:03:13,400
The one that we are seeing or here is the implementation of the Lord Edge, but not the actual library,

64
00:03:13,400 --> 00:03:14,510
which we're seeing earlier.

65
00:03:15,200 --> 00:03:16,280
Now, where is Lord Ash?

66
00:03:16,670 --> 00:03:19,970
Well, Lord Ash is going to be present in another bundle of example.

67
00:03:19,970 --> 00:03:24,470
Let's check out this bundle over here and let's try to find Lord Ash in this bundle.

68
00:03:24,800 --> 00:03:27,440
And you can see that it's loaded in this bundle.

69
00:03:27,800 --> 00:03:31,580
So this is the node module's Lord Ash Library getting loaded right here.

70
00:03:32,360 --> 00:03:36,650
Similarly, if you check out our index store bundle, this should not also contain the Lord Ash.

71
00:03:37,070 --> 00:03:38,810
So let's just quickly search for Lord.

72
00:03:39,140 --> 00:03:41,750
And we do not see Lord Ash getting implemented here as well.

73
00:03:42,110 --> 00:03:43,190
And that's fantastic.

74
00:03:43,400 --> 00:03:45,770
That means our bundle is now sort of optimized.

75
00:03:46,370 --> 00:03:49,740
Now, let's just make sure that things are still working in our solo.

76
00:03:50,060 --> 00:03:52,700
So I'm just going to be running as NPM run search.

77
00:03:53,690 --> 00:03:55,700
So let's just get our bill started.

78
00:03:56,000 --> 00:04:03,230
Browser opens up and let's just give it a second and we can see our application is loading as before.

79
00:04:03,740 --> 00:04:10,130
But this time if I go to the inspector, let's open that up and go to a network and give it a refresh

80
00:04:10,130 --> 00:04:12,170
so that we can see the dependencies getting loaded.

81
00:04:12,860 --> 00:04:16,280
Now in here you can see that the index start bundle is getting loaded.

82
00:04:16,670 --> 00:04:21,020
We have the vendor access and we have the node modules of the dependencies.

83
00:04:21,440 --> 00:04:25,460
So our indicator bundles are split into two other bundles over here.

84
00:04:25,910 --> 00:04:28,670
And this is exactly where optimization comes into place.

85
00:04:29,270 --> 00:04:32,330
Now, these are the bundles which are going to be shared with other files as well.

86
00:04:32,750 --> 00:04:38,720
So for example, if I go to the courses page, we can see that Courses page is loading like before and

87
00:04:38,720 --> 00:04:41,780
this time we have the additional bundles getting loaded over here as well.

88
00:04:42,290 --> 00:04:46,460
Now you might be wondering what the advantage I mean, what's the point of splitting it into different

89
00:04:46,460 --> 00:04:46,910
bundles?

90
00:04:47,390 --> 00:04:50,150
Well, this is where the caching of the browser comes into place.

91
00:04:50,540 --> 00:04:55,880
Now, when our our browser recognizes that, okay, there is a file that I already have earlier and

92
00:04:55,880 --> 00:04:57,260
there's nothing changed in the file.

93
00:04:57,560 --> 00:05:01,820
So instead of going into questing the file from the server, it's just going to be loading it from the

94
00:05:01,820 --> 00:05:02,180
cache.

95
00:05:02,360 --> 00:05:03,770
And that's extremely fast.

96
00:05:03,950 --> 00:05:05,870
And this is exactly what's happening over here.

97
00:05:06,260 --> 00:05:11,450
Now, since this contains the vendor dependencies, for example, like bootstrap, now you might be

98
00:05:11,450 --> 00:05:13,010
changing the style on your page.

99
00:05:13,190 --> 00:05:18,350
So for example, if I change this styling or here, so I'm using the bootstrap library, but there's

100
00:05:18,350 --> 00:05:20,720
no change in the bootstrap library itself.

101
00:05:21,110 --> 00:05:24,110
So it does not really make sense to be updating this bundle.

102
00:05:24,530 --> 00:05:29,480
So in that case, it's just going to be loading it from cache and only the course bundle radius is going

103
00:05:29,480 --> 00:05:32,870
to be pulled from the server so that you have the new dependencies pulled in.

104
00:05:33,320 --> 00:05:35,210
And this is going to be saving a lot of time.

105
00:05:35,600 --> 00:05:38,990
And this is the beauty of how these split chunks plug in work.

106
00:05:39,710 --> 00:05:41,090
Now, let's do one more thing.

107
00:05:41,300 --> 00:05:43,100
Let me go back to my VS code.

108
00:05:43,610 --> 00:05:49,160
What are we stopping this out by saying control C and then we're going to be enabling the bundle analyzer

109
00:05:49,160 --> 00:05:49,550
plugin.

110
00:05:50,150 --> 00:05:53,120
So let's have that and then see NPM run dev.

111
00:05:55,340 --> 00:05:55,700
All right.

112
00:05:55,700 --> 00:06:00,500
My plugin shows the all the dependencies and you can see things have changed dramatically over here.

113
00:06:01,010 --> 00:06:03,950
So here we have this huge bundle vendor bundle area.

114
00:06:04,190 --> 00:06:06,380
And this contains all the Lord Ash Library.

115
00:06:06,650 --> 00:06:07,760
It contains the equity.

116
00:06:08,030 --> 00:06:11,330
And it contains all the things that are going to be shared across the files.

117
00:06:11,810 --> 00:06:17,690
Similarly, it also created another bundle for index start theses that are bundle ideas and this contains

118
00:06:17,690 --> 00:06:18,920
the excess files.

119
00:06:19,310 --> 00:06:24,740
So as you can see, it has the vendor access, it has default to some and also our index uses.

120
00:06:25,250 --> 00:06:26,540
So it is very smart.

121
00:06:26,540 --> 00:06:28,630
It knows how to be categorizing the files as well.

122
00:06:28,880 --> 00:06:30,860
So all the JavaScript is in one bundle.

123
00:06:31,040 --> 00:06:37,100
You got like your CSRs in another bundle and you can see that they were like some individual bundles

124
00:06:37,100 --> 00:06:43,400
like this one right here, index, start, bundle, and it contains all the JavaScript that is specific

125
00:06:43,400 --> 00:06:48,920
to the course bundle and this contains all the JavaScript that is specific to the index bundle.

126
00:06:49,100 --> 00:06:51,320
There's no sharing required between these bundles.

127
00:06:51,770 --> 00:06:57,290
And this gives a very good overview of how well we have optimized our bundles using Webpack.

128
00:06:57,650 --> 00:06:58,010
All right.

129
00:06:58,160 --> 00:06:59,870
I hope you learned a lot from this.

130
00:06:59,870 --> 00:07:02,960
And we're going to be seeing further how to be optimizing it more.

131
00:07:03,350 --> 00:07:08,180
And right now, as you can see, we are loading the entire load library, although we are just using

132
00:07:08,180 --> 00:07:09,560
one or two functions of load.

133
00:07:10,100 --> 00:07:12,110
So how well, we're going to be optimizing that.

134
00:07:12,350 --> 00:07:14,870
We're going to be seeing that soon in the upcoming videos.

135
00:07:15,560 --> 00:07:16,010
All right.

136
00:07:16,010 --> 00:07:19,640
So let's take a short break and continue on becoming of Apache Ninja.
