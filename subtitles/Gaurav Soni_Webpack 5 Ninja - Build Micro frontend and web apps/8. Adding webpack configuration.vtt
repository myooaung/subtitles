WEBVTT
1
00:00:03.820 --> 00:00:05.590
Continue on from the last video.

2
00:00:05.830 --> 00:00:10.000
In the last video we just had created a stimuli file and index start to yes file.

3
00:00:10.330 --> 00:00:12.640
But now it's time to start adding that back to it.

4
00:00:13.120 --> 00:00:15.040
Now do we starting off with the pack?

5
00:00:15.040 --> 00:00:17.680
We need to be first installing the dependencies of that pack.

6
00:00:17.680 --> 00:00:19.150
And that's the most important part.

7
00:00:19.540 --> 00:00:24.310
As you can see right now, we do not have any package load, Jason and it's just a plain repository

8
00:00:24.310 --> 00:00:26.740
right now to be adding the dependencies.

9
00:00:26.740 --> 00:00:30.250
What I'm going to be doing is opening up the terminal now for using the code.

10
00:00:30.250 --> 00:00:35.080
You can just go to the terminal and say New terminal right here and we're going to be initializing.

11
00:00:35.080 --> 00:00:37.030
This has a NPM repository.

12
00:00:37.660 --> 00:00:43.390
So as you can see here, I'm in the web back here to meet 2022 folder and I'm going to be shifting over

13
00:00:43.390 --> 00:00:46.390
to the one dot getting started.

14
00:00:46.390 --> 00:00:53.410
So this CD one getting started now I need to be initializing this as NPM repository so I see NPM in

15
00:00:53.410 --> 00:00:56.560
it dash white and then enter.

16
00:00:58.090 --> 00:00:58.450
All right.

17
00:00:58.450 --> 00:01:02.740
Once that is done, if I just expand my folder, you can see that a new file has been created for us

18
00:01:02.740 --> 00:01:03.610
called Package Dot.

19
00:01:03.610 --> 00:01:07.570
Jason Now in the package or JSON, we are going to be adding all our dependencies.

20
00:01:07.990 --> 00:01:10.960
Now the main dependency that we need is that back.

21
00:01:10.960 --> 00:01:14.830
So I'll say npm, i save Dev.

22
00:01:15.840 --> 00:01:17.460
And in here we'll see that pack.

23
00:01:18.120 --> 00:01:21.600
We also need one more dependency that will be used by the pack internally.

24
00:01:21.780 --> 00:01:23.520
It's called US Pack CLIA.

25
00:01:23.910 --> 00:01:26.550
So you'll save a pack CLIA.

26
00:01:27.630 --> 00:01:31.080
All right, so these are the only two dependencies that are required for now.

27
00:01:31.560 --> 00:01:36.720
We also need another dependency, which is going to be moved from DML to our JavaScript.

28
00:01:36.750 --> 00:01:37.710
That is the load ash.

29
00:01:38.190 --> 00:01:38.580
So what?

30
00:01:38.580 --> 00:01:40.800
That I can just see npm I.

31
00:01:42.120 --> 00:01:44.340
And I just saved our dependency as well.

32
00:01:44.520 --> 00:01:46.080
And see, Lord Ash.

33
00:01:49.370 --> 00:01:49.760
All right.

34
00:01:49.760 --> 00:01:53.030
So that's pretty much it for all the dependencies that we need for now.

35
00:01:53.270 --> 00:01:58.190
If I just check here, we have the VAT pack and the load dependencies installed.

36
00:01:58.940 --> 00:02:00.650
All right, so that is pretty much it.

37
00:02:00.770 --> 00:02:06.440
Now, we can just go over to our index cards and start importing those dependencies.

38
00:02:06.830 --> 00:02:12.170
So the change that I need to be making here is I'm going to say import underscore from.

39
00:02:12.680 --> 00:02:14.870
And then in here you say Lord Ashe.

40
00:02:15.820 --> 00:02:19.590
All right, so this time the Lord is going to be imported directly into the JavaScript file.

41
00:02:19.600 --> 00:02:23.970
So I can just go over to the index, start HTML and remove the load dependency from here.

42
00:02:25.470 --> 00:02:25.950
Perfect.

43
00:02:25.950 --> 00:02:26.880
So that looks good.

44
00:02:26.910 --> 00:02:29.100
Now let's start creating our back file.

45
00:02:29.820 --> 00:02:34.350
Now, when you're creating a web file, it starts off with of a pack configuration.

46
00:02:34.710 --> 00:02:42.000
So we can just right click on a folder and say new file and this is called as the back dot config dot

47
00:02:42.090 --> 00:02:42.720
jess.

48
00:02:43.830 --> 00:02:45.030
So that's pretty much it.

49
00:02:45.030 --> 00:02:49.230
It's a simple JavaScript file and it needs to be exporting those configurations.

50
00:02:49.590 --> 00:02:50.580
So what are you going to be putting here?

51
00:02:50.580 --> 00:02:55.170
This module dot exports equals to an object.

52
00:02:55.860 --> 00:03:00.780
Now, as you remember in our previous diagram, we said that there's one entry file, so we need to

53
00:03:00.780 --> 00:03:03.900
be specifying the entry file that is there file that back.

54
00:03:04.380 --> 00:03:06.630
So that is called us entry right here.

55
00:03:07.440 --> 00:03:13.140
And we need to be passing in the location offering to file and this is under the parameter called US

56
00:03:13.170 --> 00:03:13.770
output.

57
00:03:13.950 --> 00:03:15.510
So that's output right there.

58
00:03:15.870 --> 00:03:20.250
And this is where we're going to be specifying whether pack should be giving the output bundles.

59
00:03:20.820 --> 00:03:22.950
So let's enter our entry file first.

60
00:03:22.980 --> 00:03:28.620
So the entry file is going to be in our source directory and it has these index dogs.

61
00:03:28.770 --> 00:03:35.010
So we'll say a dart slash ASIC slash index dot G's.

62
00:03:35.640 --> 00:03:36.630
So that's quite simple.

63
00:03:37.170 --> 00:03:40.110
Now for the output we have to pass in an object.

64
00:03:40.500 --> 00:03:43.290
So as an object we are going to be saying file name.

65
00:03:44.310 --> 00:03:48.180
So this is going to be the file name that is going to be outputted by the back.

66
00:03:48.540 --> 00:03:51.180
And let's call this as bundle.

67
00:03:53.420 --> 00:03:54.500
DART Yes.

68
00:03:54.510 --> 00:03:57.290
So that is the name that I want there to be outputting.

69
00:03:57.770 --> 00:04:00.380
Now we also need to be telling the location of this file.

70
00:04:00.830 --> 00:04:07.400
So for telling the location, we specify the path and the path is going to be but not resolve.

71
00:04:08.000 --> 00:04:09.500
Now, what is port or resolve?

72
00:04:09.530 --> 00:04:14.300
Well, basically, we need to be importing one of the Node.js libraries called US Bot, and this is

73
00:04:14.300 --> 00:04:16.490
how we are really specifying the part of the output.

74
00:04:17.060 --> 00:04:23.210
So I'll say or here as conceived port equals to require port.

75
00:04:25.220 --> 00:04:25.730
All right.

76
00:04:26.210 --> 00:04:28.820
So as you can see, a fundamental difference here.

77
00:04:29.120 --> 00:04:34.220
When I was doing the importing of external modules in my Webpack file, I was using the required fuel.

78
00:04:34.640 --> 00:04:40.580
Whereas if you went to the index tags because severe using the newer format of modules using the import

79
00:04:40.580 --> 00:04:41.000
keyword.

80
00:04:41.540 --> 00:04:46.340
Now since the pack file is going to be loaded by directly node.js totally understands required.

81
00:04:46.610 --> 00:04:48.410
So import will not work over here.

82
00:04:49.250 --> 00:04:53.270
So for that reason we are just going to be using the required keyword save but not resolve.

83
00:04:53.540 --> 00:04:59.240
And in the you are going to be resolving the past by saying underscore, underscore directory name the

84
00:04:59.510 --> 00:05:01.740
name, comma, dist.

85
00:05:02.600 --> 00:05:08.850
So what we are telling all headers here, go and create this output of the file name call bundle Rogers.

86
00:05:09.230 --> 00:05:13.700
In this particular directory called DIST, we do not have a disk directory, but this is going to be

87
00:05:13.700 --> 00:05:15.620
created automatically by webpack.

88
00:05:16.670 --> 00:05:20.540
And believe it or not, this is the basic configuration that you need to get started.

89
00:05:21.290 --> 00:05:23.360
Now, how do you run this Webpack file?

90
00:05:23.900 --> 00:05:28.910
Well, to run this Webpack file, we're going to be creating an additional script so we can go to the

91
00:05:28.910 --> 00:05:30.020
package load, Jason.

92
00:05:30.410 --> 00:05:33.530
And in this, we have something called the script stack.

93
00:05:34.010 --> 00:05:37.430
Now, we do not really need the test one, so we just can do it.

94
00:05:37.460 --> 00:05:39.410
And let's call this as build.

95
00:05:40.070 --> 00:05:42.980
And in here, we're going to be passing up double configurations.

96
00:05:43.460 --> 00:05:45.340
So we're going to be seeing that back.

97
00:05:45.380 --> 00:05:47.590
So this is the command for executing the pack.

98
00:05:48.080 --> 00:05:51.050
And we also need to be specifying this configuration file.

99
00:05:51.560 --> 00:05:55.790
So we'll put it as dash dash config and then the file name.

100
00:05:55.790 --> 00:05:59.500
So that's packed out configs.

101
00:06:00.770 --> 00:06:01.300
All right.

102
00:06:01.310 --> 00:06:02.900
So that is pretty much it.

103
00:06:02.930 --> 00:06:05.030
We are just going to be seeing a couple of outputs here.

104
00:06:05.060 --> 00:06:06.170
As soon as I run this file.

105
00:06:06.710 --> 00:06:11.030
Now, for running this file, you can come back to your terminal, make sure you are in the right folder,

106
00:06:11.510 --> 00:06:15.080
and then you can put in NPM, run, build.

107
00:06:18.020 --> 00:06:18.440
All right.

108
00:06:18.440 --> 00:06:20.050
So the build has been done.

109
00:06:20.060 --> 00:06:21.140
Congratulations.

110
00:06:21.440 --> 00:06:25.700
And if you check out on the left hand side, you can see that we have a new directory created coldest.

111
00:06:26.090 --> 00:06:28.130
Within that we have this bundle, Rogers.

112
00:06:28.640 --> 00:06:32.660
Now, if you check out this, there's a lot of code written over here and we do not really understand

113
00:06:32.660 --> 00:06:33.500
what it is.

114
00:06:33.890 --> 00:06:34.940
No one heads up here.

115
00:06:35.180 --> 00:06:41.270
Whenever you run the pack without any additional parameter called as mode, it's going to be running

116
00:06:41.270 --> 00:06:42.530
everything in production mode.

117
00:06:43.070 --> 00:06:46.850
Are going to be seeing later in the videos what is the difference between production and the development

118
00:06:46.850 --> 00:06:47.150
mode.

119
00:06:47.720 --> 00:06:52.520
So for now, what I want you to be doing is coming here and putting up an additional perimeter saying

120
00:06:52.520 --> 00:06:53.660
dash, dash mode.

121
00:06:54.050 --> 00:06:55.790
And in here, type in development.

122
00:06:58.260 --> 00:06:59.040
Just like that.

123
00:06:59.670 --> 00:07:00.030
All right.

124
00:07:00.030 --> 00:07:02.380
With that set up, let me run the blade once again.

125
00:07:02.400 --> 00:07:05.810
So let's run NPM, run, build and click on Enter.

126
00:07:06.570 --> 00:07:13.200
And as soon as I do that and if I open up the bundle radius again, you can see that the file is different.

127
00:07:13.530 --> 00:07:14.760
Things have changed a lot.

128
00:07:15.180 --> 00:07:16.140
It's more readable.

129
00:07:16.680 --> 00:07:17.670
So what's happening here?

130
00:07:17.670 --> 00:07:21.060
Let's try to analyze the bundle before we go ahead and start using this bundle.

131
00:07:21.630 --> 00:07:25.620
Now, in the bundle you can see that we have the dependency of Lord Dash included.

132
00:07:26.040 --> 00:07:28.200
Now you can see where the dependency graph comes in.

133
00:07:28.530 --> 00:07:31.350
It basically went to our index dodgers file first.

134
00:07:31.680 --> 00:07:34.590
Then you said, okay, do you need the load as dependency?

135
00:07:34.600 --> 00:07:38.490
So all right, I'll just go ahead and pull that and put it in the bundle, Node.js as well.

136
00:07:39.090 --> 00:07:41.280
So that's how the bundle logs was created.

137
00:07:41.730 --> 00:07:44.280
And if you try to search the custom code that we had added.

138
00:07:44.280 --> 00:07:50.490
So for example, let me just copy this text and try to find it in the bundle by saying F you can see

139
00:07:50.490 --> 00:07:52.260
that our code is present as well.

140
00:07:52.560 --> 00:07:56.400
So the bundle contains everything that is required for running this application.

141
00:07:57.210 --> 00:07:58.470
So what do we do now?

142
00:07:58.860 --> 00:07:59.940
Well, it's quite simple.

143
00:07:59.940 --> 00:08:05.850
We go to our index, start estimate and replace our index, starts dependency with the bundle that just

144
00:08:05.850 --> 00:08:06.480
got created.

145
00:08:06.930 --> 00:08:11.100
So now instead of saying dot slash index, we are going to be moving up one folder.

146
00:08:11.280 --> 00:08:14.190
So if you just see the directory structure, we have indexed charges.

147
00:08:14.520 --> 00:08:21.390
We need to be moving up one folder so we'll say dot, dot, slash and in here we are going to be finding

148
00:08:21.390 --> 00:08:25.980
the best folder and within that we have the bundle dogs.

149
00:08:26.910 --> 00:08:27.360
Awesome.

150
00:08:27.360 --> 00:08:28.890
So that is pretty much it.

151
00:08:28.890 --> 00:08:32.610
Let's head over to the browser and see this is loaded as expected.

152
00:08:33.270 --> 00:08:39.780
So if I go to my browser, hit refresh and you can see that instead of load dash, we are loading the

153
00:08:39.780 --> 00:08:45.960
entire bundle this time and if I click on click me, nothing works well.

154
00:08:45.960 --> 00:08:46.680
Why is that?

155
00:08:46.980 --> 00:08:48.630
Let's find out in the next video.
