1
00:00:00,210 --> 00:00:05,450
In this video, we're just going to get a very high level overview of what is optics and how to be using

2
00:00:05,460 --> 00:00:07,950
few of the functions that is given by context years.

3
00:00:08,430 --> 00:00:12,000
Now you can just come to this website called as called Sandbox Studio.

4
00:00:12,360 --> 00:00:16,230
So this is online editor we can where you can be running JavaScript very easily.

5
00:00:16,680 --> 00:00:20,340
So in this, once you open it up, you should see something like this and we're just going to be starting

6
00:00:20,340 --> 00:00:21,810
off with the raw JavaScript.

7
00:00:21,810 --> 00:00:26,610
So again, just click on the script button and you're going to be taken up to the sample page.

8
00:00:27,030 --> 00:00:29,790
Now I'm just going to be clearing of all of this content.

9
00:00:29,790 --> 00:00:31,350
We do not really need to be working with that.

10
00:00:31,350 --> 00:00:36,540
Stephen For now, and just open up your console to see what's happening when we write some code.

11
00:00:37,600 --> 00:00:37,990
Okay.

12
00:00:37,990 --> 00:00:38,810
So this is done.

13
00:00:38,830 --> 00:00:42,730
We also need to be installing a dependency but are going to be using and that is audit.

14
00:00:42,920 --> 00:00:43,420
Yes.

15
00:00:43,990 --> 00:00:47,610
So let me just add the dependency and this is going to be called as I text.

16
00:00:47,620 --> 00:00:48,010
Yes.

17
00:00:48,400 --> 00:00:49,930
And just get this thing installed.

18
00:00:51,320 --> 00:00:51,680
Okay.

19
00:00:51,680 --> 00:00:52,870
So just give it a second.

20
00:00:52,870 --> 00:00:54,470
Now we have the dependency area.

21
00:00:54,890 --> 00:00:57,170
Now we can go ahead and import this dependency.

22
00:00:57,680 --> 00:01:02,330
So as they import curly braces from Oryx Gas.

23
00:01:03,200 --> 00:01:05,180
Okay, so what are we trying to import from our text?

24
00:01:05,180 --> 00:01:05,480
Yes.

25
00:01:05,960 --> 00:01:08,210
Now, I do support a lot of things.

26
00:01:08,210 --> 00:01:13,250
You can do things such as adding observables, you can add subject, you can add some delays, you can

27
00:01:13,250 --> 00:01:13,970
add bounds.

28
00:01:13,970 --> 00:01:17,060
There are a lot of things which can be added using the RTX dev library.

29
00:01:17,450 --> 00:01:20,240
I'm not going to be going a lot into depth into year.

30
00:01:20,240 --> 00:01:23,480
We're just going to be seeing those things that we will be needing for our project.

31
00:01:23,990 --> 00:01:29,300
So just to give you an overview, let's see, the first one is called as observable.

32
00:01:29,870 --> 00:01:31,940
So how do you be using this observable?

33
00:01:32,450 --> 00:01:35,810
So first of all, we need to be creating a observable object.

34
00:01:35,990 --> 00:01:43,490
So let's say const, let's say all be s observable in chart equals to new observable.

35
00:01:43,880 --> 00:01:44,300
All right.

36
00:01:44,300 --> 00:01:46,730
And then we need to be passing in something.

37
00:01:47,270 --> 00:01:48,830
So what are we passing here?

38
00:01:49,040 --> 00:01:52,520
So this is going to be just one parameter here and that's called as subscriber.

39
00:01:53,000 --> 00:01:56,990
So let's just busty subscriber and this is going to be a function.

40
00:01:57,530 --> 00:01:59,960
So this is the pattern that we need to be following.

41
00:02:00,110 --> 00:02:01,400
So it's new observable.

42
00:02:01,400 --> 00:02:05,180
And in this we were passing a function with one parameter which is the subscriber.

43
00:02:05,840 --> 00:02:09,350
Now this subscriber can be used for sort of publishing any of the data.

44
00:02:09,770 --> 00:02:11,090
So let's see how that works.

45
00:02:11,270 --> 00:02:18,410
So I can see a subscriber dot next to next is used when we want to be pushing a new data to that event.

46
00:02:18,410 --> 00:02:24,740
Q So when I see this, you can consider something like an added as before, and when you say next is

47
00:02:24,740 --> 00:02:29,750
going to be pushing a value into that area so it can be one, then you say next, then again two and

48
00:02:29,750 --> 00:02:30,080
so on.

49
00:02:30,140 --> 00:02:31,610
So let's do the exact same thing.

50
00:02:31,940 --> 00:02:39,080
So I say next one, then I'm just going to be saying subscriber dot next to and this is all the values

51
00:02:39,080 --> 00:02:41,390
that I want to be adding to this observable object.

52
00:02:42,050 --> 00:02:44,330
Okay, so we have the object right now.

53
00:02:44,330 --> 00:02:45,740
Let's suppose you have some file.

54
00:02:45,950 --> 00:02:52,370
I'm just going to be adding some dummy file here to let's call this as file a or file consumer probably

55
00:02:52,370 --> 00:02:53,720
that's going to be more apt name.

56
00:02:54,260 --> 00:02:58,820
And in this I want to be observing all the things that are happening in this observable object.

57
00:02:59,240 --> 00:03:07,520
So what I can do is I can say obs dart subscribe and in this I can be passing an observer and observer

58
00:03:07,520 --> 00:03:08,810
is basically an object.

59
00:03:09,140 --> 00:03:11,630
Now in this object we need a couple of keys.

60
00:03:12,050 --> 00:03:15,740
So one of the keys that we want to be subscribing on is the next function.

61
00:03:15,740 --> 00:03:18,020
So as you saw, we have used this next function here.

62
00:03:18,440 --> 00:03:20,150
So we are going to passing that as the key.

63
00:03:20,150 --> 00:03:22,130
So we'll say next, that's the property name.

64
00:03:22,610 --> 00:03:26,900
And in this we can pass in our function just like that.

65
00:03:27,650 --> 00:03:27,980
Okay.

66
00:03:27,980 --> 00:03:32,420
So what we are trying to say is I want to be subscribing to this object called observable.

67
00:03:32,780 --> 00:03:37,670
And in this whenever the next function is called, just like it's called or here I want to be executing

68
00:03:37,670 --> 00:03:39,650
this function that we are going to be typing here.

69
00:03:40,100 --> 00:03:41,810
So for example, let's say console.

70
00:03:42,910 --> 00:03:44,500
Consolidate log.

71
00:03:44,920 --> 00:03:46,660
Then we say subscribed.

72
00:03:48,520 --> 00:03:49,600
And I received.

73
00:03:50,620 --> 00:03:55,840
So in this policy, I'm going to be putting some value so I can just put up the back picks and per dollar,

74
00:03:56,380 --> 00:03:58,360
and then we need to be adding the value here.

75
00:03:58,840 --> 00:04:00,280
Now, where do we get the value from?

76
00:04:00,520 --> 00:04:03,040
The value is received in this function itself.

77
00:04:03,280 --> 00:04:07,720
So I can just put up as value and then we can type in Val here as well.

78
00:04:08,560 --> 00:04:08,860
Okay.

79
00:04:08,860 --> 00:04:13,840
So let me just clear off my console and in this and what are we just refreshing this page once so that

80
00:04:13,840 --> 00:04:14,800
it picks up the latest?

81
00:04:14,800 --> 00:04:15,100
Good.

82
00:04:16,590 --> 00:04:20,910
And as you can see over here, we received the two events that were published from here.

83
00:04:21,300 --> 00:04:22,980
So these were the two events right here.

84
00:04:23,580 --> 00:04:26,790
Now I can do things such as also delayed even publishing.

85
00:04:26,880 --> 00:04:32,490
So for example, let's say I want to be publishing event after couple of seconds or less of 3 seconds

86
00:04:32,910 --> 00:04:37,800
so I can see again subscriber dot next and then I can see let's say delayed.

87
00:04:38,870 --> 00:04:39,560
Message.

88
00:04:40,490 --> 00:04:40,880
All right.

89
00:04:41,360 --> 00:04:42,530
So that can also be done.

90
00:04:42,590 --> 00:04:46,550
Now, if I just clear off the console, log in and let's give this a refresh.

91
00:04:47,670 --> 00:04:50,490
And we can see those two messages were published immediately.

92
00:04:50,790 --> 00:04:53,580
And the last message was published after 3 seconds.

93
00:04:54,060 --> 00:04:56,190
So this is how the things work over here.

94
00:04:56,880 --> 00:05:02,610
And you can also see that since we have used set interval is publishing this message after every 3 seconds.

95
00:05:03,120 --> 00:05:06,120
Now, this is the difference between promises and observables.

96
00:05:06,600 --> 00:05:10,890
In the case of promise, once you do the publishing of the message or once you resolve the promise,

97
00:05:11,220 --> 00:05:13,500
the entire scope of that function is done.

98
00:05:13,890 --> 00:05:15,960
You cannot be doing something like set interval.

99
00:05:15,960 --> 00:05:20,820
In the case of promises, you cannot be resolving the promise again and again once that the result is

100
00:05:20,820 --> 00:05:21,120
done.

101
00:05:21,600 --> 00:05:23,640
So that's the main difference between an observable.

102
00:05:23,880 --> 00:05:27,630
Observable is basically observing what's happening in this and that object.

103
00:05:28,230 --> 00:05:30,470
Now you can use a subscriber in multiple places.

104
00:05:30,480 --> 00:05:32,910
It's not necessary that there should be just one subscriber.

105
00:05:33,330 --> 00:05:36,590
So let's say, for example, you have a file consumer over here.

106
00:05:37,080 --> 00:05:43,080
Then in the case of, let's say movie about booking application, you also need to be collecting the

107
00:05:43,080 --> 00:05:44,940
analytics whenever a movie is booked.

108
00:05:45,270 --> 00:05:48,300
So let's say, for example, this was your movie booking object, right?

109
00:05:48,750 --> 00:05:53,400
So in your analytics, so let's suppose you had like a analytics file.

110
00:05:53,790 --> 00:05:57,180
So in this also you can be observing any changes done over here.

111
00:05:57,630 --> 00:06:00,030
So let's suppose we just copy and paste the same thing.

112
00:06:00,450 --> 00:06:03,480
And over here you can see that, you know, I'm going to be publishing.

113
00:06:03,810 --> 00:06:08,790
So you publish analytics data, something that, you know.

114
00:06:09,180 --> 00:06:14,790
So basically one, one subscriber is used for maybe checking out your customer, whatever the movie

115
00:06:14,790 --> 00:06:15,180
is booked.

116
00:06:15,480 --> 00:06:20,820
And the second observer is basically doing a publishing or collecting the analytics and publishing it

117
00:06:20,820 --> 00:06:21,510
to this hour.

118
00:06:22,200 --> 00:06:25,140
So one observer can have multiple consumers.

119
00:06:25,980 --> 00:06:26,340
Okay.

120
00:06:26,340 --> 00:06:31,380
So that was about observable, but we are not going to be using observable in our case.

121
00:06:31,800 --> 00:06:37,710
The reason for that is once this observable is made, the next function can only be called within it.

122
00:06:38,220 --> 00:06:42,210
We need a feature wherein I can see or be bought next.

123
00:06:42,450 --> 00:06:46,560
Something like this so that, you know, I can sort of publish the message from any of the files.

124
00:06:47,160 --> 00:06:48,480
So this is my requirement.

125
00:06:49,020 --> 00:06:52,290
So what I'm going to be doing for that is we're not going to be using observable.

126
00:06:52,290 --> 00:06:52,980
Exactly.

127
00:06:53,010 --> 00:06:58,710
I just told about this because this is the main concept on which the other function also depends on.

128
00:06:59,340 --> 00:07:01,830
So for now, I can just probably comment all of this out.

129
00:07:01,830 --> 00:07:02,940
I'm not going to be deleting it.

130
00:07:04,110 --> 00:07:08,340
And instead what I'll do is I'm going to be importing a new object.

131
00:07:08,730 --> 00:07:12,750
So the other named export given by next year is called US subject.

132
00:07:14,150 --> 00:07:15,050
So what a subject.

133
00:07:15,500 --> 00:07:21,050
Well, let's say we have concert movie data equals to a new subject.

134
00:07:21,440 --> 00:07:26,030
So once you declare it as a new subject, it behind the scene becomes like an observable object.

135
00:07:26,390 --> 00:07:30,590
So you can sort of add value to this object as well as subscribe to this object.

136
00:07:30,980 --> 00:07:35,090
So let me just, first of all, refresh my screen so that it stops running the old record.

137
00:07:35,630 --> 00:07:36,740
Okay, so that looks good.

138
00:07:37,370 --> 00:07:41,420
Now, what I can do over here is I can say movie data dot next.

139
00:07:41,780 --> 00:07:43,460
And then it can just pass any value.

140
00:07:43,460 --> 00:07:47,900
So let's say movie booked, something like that.

141
00:07:48,620 --> 00:07:54,380
Okay, so all here, what happened is we just published some message to this movie data object.

142
00:07:54,770 --> 00:07:56,840
Now, we can also have a consumer on this.

143
00:07:56,900 --> 00:07:59,480
So I can also say movie data, not subscribe.

144
00:08:00,020 --> 00:08:02,420
And then this I can pass in the observable.

145
00:08:03,140 --> 00:08:06,020
So again, I can see or here as next.

146
00:08:06,110 --> 00:08:08,510
And I can pass in a asynchronous function.

147
00:08:09,050 --> 00:08:12,320
So I can see we had us console dart log.

148
00:08:13,640 --> 00:08:16,280
And then data received.

149
00:08:17,620 --> 00:08:18,040
Is.

150
00:08:18,250 --> 00:08:23,950
And then again I replaced it with back picks and in here I'll put up the value that was received.

151
00:08:23,950 --> 00:08:28,390
So again, we can put Toyota's value and then we put the value here as well.

152
00:08:29,260 --> 00:08:29,620
Okay.

153
00:08:30,250 --> 00:08:37,090
So if I just clear the console, if I just give this a refresh and we see that no data was received.

154
00:08:37,360 --> 00:08:42,670
Well, the problem over here as I'm passing in the next before subscribing, so basically what happened,

155
00:08:42,670 --> 00:08:47,590
it just pushed it over here and there was no subscribers or they did not really consume it.

156
00:08:47,980 --> 00:08:51,190
So for that reason, I need to actually be publishing it afterwards.

157
00:08:51,190 --> 00:08:55,780
So once you have the subscription done, then we can be publishing some data and then we get the data

158
00:08:55,780 --> 00:08:57,340
was received in the movie booked.

159
00:08:57,880 --> 00:08:58,150
All right.

160
00:08:58,150 --> 00:09:02,620
So you need to have the subscriptions ready and only then you should be publishing the data so that

161
00:09:02,830 --> 00:09:07,000
all the subscriptions are going to be getting your data that you have just published.

162
00:09:07,690 --> 00:09:10,870
And again, as we had seen earlier, you can also have multiple subscribers.

163
00:09:10,870 --> 00:09:13,520
So I can just basically have this in multiple places.

164
00:09:13,570 --> 00:09:16,810
If I would like in two places, I should be seeing the two logs.

165
00:09:16,900 --> 00:09:19,540
So let's just say we had as log to.

166
00:09:20,590 --> 00:09:23,590
And we can see that the log to movie power was booked.

167
00:09:23,980 --> 00:09:27,970
So basically, if you want to have in multiple files, that is also possible.

168
00:09:28,750 --> 00:09:33,010
Now, I just wanted to show this because once we have the full fledged application, it might get a

169
00:09:33,010 --> 00:09:33,790
little confusing.

170
00:09:34,240 --> 00:09:38,650
So just to show you on a very small application as what we are going to be doing and implementing in

171
00:09:38,650 --> 00:09:39,490
the micro frontend.

172
00:09:39,880 --> 00:09:41,380
So that's that's pretty much it.

173
00:09:41,800 --> 00:09:45,730
We are going to be publishing the all the movie that is booked when we are clicking on the book button

174
00:09:46,060 --> 00:09:50,740
and we are going to be having this subscription in the seat booking application and then we are going

175
00:09:50,740 --> 00:09:52,630
to be getting all the data of the booking.

176
00:09:53,560 --> 00:09:53,890
Okay.

177
00:09:53,890 --> 00:09:56,170
So that's about it for our next year.

178
00:09:56,230 --> 00:10:00,880
Let's move on back to our micro frontend application and see how to be implementing this in the.
