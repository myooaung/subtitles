1
00:00:00,450 --> 00:00:00,780
All right.

2
00:00:00,780 --> 00:00:01,460
Welcome back.

3
00:00:01,470 --> 00:00:05,670
And in this video, we're going to be starting off some integration between our different applications

4
00:00:05,670 --> 00:00:09,600
that have been started off to give you an overview of what is our objective.

5
00:00:09,600 --> 00:00:11,770
So we have already this page loaded up.

6
00:00:11,790 --> 00:00:12,900
This is our homepage.

7
00:00:13,290 --> 00:00:18,840
And in this homepage we are trying to load all this movies list to follow trending all this movie list.

8
00:00:19,110 --> 00:00:23,370
We need to first of all, get the list of movies from our soap that's running locally.

9
00:00:23,820 --> 00:00:25,620
So let's see how we can be implementing that.

10
00:00:26,400 --> 00:00:31,560
I'm just going to be switching all to my code base and in this, just make sure that you have the three

11
00:00:31,560 --> 00:00:32,110
applications.

12
00:00:32,110 --> 00:00:32,760
So is running.

13
00:00:33,150 --> 00:00:34,410
We have it already here.

14
00:00:34,410 --> 00:00:38,730
We have the Mozilla, we have the homepage as well as the React component.

15
00:00:39,150 --> 00:00:41,940
Okay, let's open up the homepage component.

16
00:00:42,360 --> 00:00:49,410
And in this we have the SRT folder component, home page content and the home content dot gsx.

17
00:00:50,160 --> 00:00:54,000
Now you do not really need to worry about what all is happening over here.

18
00:00:54,000 --> 00:00:59,220
This is just some rendering logic that's happening for rendering that page, some component in some

19
00:00:59,220 --> 00:01:00,420
cases, and so on.

20
00:01:00,870 --> 00:01:03,840
The thing that we are interested in is this right here.

21
00:01:03,840 --> 00:01:09,360
I've already read the comment, so we need to add the logical here to load all the data from this over

22
00:01:09,360 --> 00:01:11,160
to our React application.

23
00:01:12,060 --> 00:01:16,950
Okay, now I'm not going to be using some external service and there's a particular reason for that.

24
00:01:16,950 --> 00:01:20,040
So I'm not going to be using a package called as Axios and so on.

25
00:01:20,280 --> 00:01:22,470
And what are we using the native fetch API?

26
00:01:23,870 --> 00:01:27,380
So let's see how we can be implementing the get logic using that.

27
00:01:27,980 --> 00:01:29,720
So I'm just going to be saying convert.

28
00:01:31,470 --> 00:01:33,600
A response he called to fetch.

29
00:01:33,930 --> 00:01:37,320
Now, in here, I need to be entering the location of my API.

30
00:01:37,680 --> 00:01:43,170
So that's going to be as SDP double column slash slash local host.

31
00:01:43,530 --> 00:01:45,060
And that's five, five, five.

32
00:01:46,200 --> 00:01:47,790
Slash movies.

33
00:01:48,300 --> 00:01:49,980
So this is our end point.

34
00:01:50,460 --> 00:01:54,600
Now, when you get the response, we need to actually be making it into adjacent format.

35
00:01:54,960 --> 00:01:59,430
So what I'll do is I'll say const data equal to.

36
00:02:00,510 --> 00:02:03,420
Response dot Jason.

37
00:02:04,570 --> 00:02:04,980
All right.

38
00:02:05,470 --> 00:02:07,300
So this is how it's going to be loaded.

39
00:02:07,600 --> 00:02:09,520
Now fetches a async API.

40
00:02:09,550 --> 00:02:12,160
That means we need to use promises in this case.

41
00:02:12,490 --> 00:02:14,860
Now, I'm going to be using the easing of it for this.

42
00:02:15,190 --> 00:02:22,300
So what I see here is after use effect and this starting of this function, I'll put in async and we'll

43
00:02:22,300 --> 00:02:22,600
hear.

44
00:02:22,600 --> 00:02:24,910
And what do we think of it, this response.

45
00:02:25,450 --> 00:02:28,900
Now, the response to Jason is also going to be returning a promise.

46
00:02:29,080 --> 00:02:30,700
So I need to await this as well.

47
00:02:31,210 --> 00:02:33,560
So as they await the response start, Jason.

48
00:02:34,150 --> 00:02:37,780
Now, once we get the data, I'm just going to be controlling and logging this funnel.

49
00:02:37,780 --> 00:02:39,850
So I also consolidate log data.

50
00:02:40,480 --> 00:02:42,040
And that's pretty much it.

51
00:02:42,430 --> 00:02:45,760
Now we can just verify on which board this application is running by coming here.

52
00:02:45,790 --> 00:02:48,310
So we this is our homepage application.

53
00:02:48,310 --> 00:02:53,260
So if I just come here homepage, I can see that is running on port number 3000.

54
00:02:53,680 --> 00:02:58,550
So let me just go to my browser and have this localhost port 3000 open up.

55
00:02:58,570 --> 00:03:01,360
Hit refresh and nothing really loads up.

56
00:03:01,900 --> 00:03:03,520
So let's try to inspect what's happening.

57
00:03:03,520 --> 00:03:07,450
Why are we not seeing our quick looking part over here, which was working earlier?

58
00:03:07,450 --> 00:03:07,750
Right.

59
00:03:08,260 --> 00:03:11,980
So just right click and inspect over console.

60
00:03:12,670 --> 00:03:18,460
And in the console you can see that I've got an error called as regenerator runtime not defined.

61
00:03:18,760 --> 00:03:21,160
Then we also got some error in the home content.

62
00:03:21,190 --> 00:03:25,120
This is the one that we're trying to modify where we had put our you think of it and so on.

63
00:03:25,690 --> 00:03:27,850
And things are not really working as expected.

64
00:03:28,480 --> 00:03:30,670
Now, let me try to explain why this is happening.

65
00:03:31,210 --> 00:03:37,270
If I just go back to my code views, this is think of it now you think of it is not really understood

66
00:03:37,270 --> 00:03:38,020
by Webpack.

67
00:03:38,440 --> 00:03:44,490
If I just go to my Webpack configurations and if you just check it out over here, we have all these

68
00:03:44,500 --> 00:03:47,230
files and in this we are using our be able loader.

69
00:03:47,770 --> 00:03:52,060
Now just to sort of transpire this you think of it into the language that it understands.

70
00:03:52,540 --> 00:03:57,610
So for that, if I just go back to my homepage content now to make things work, I need to be adding

71
00:03:57,610 --> 00:04:02,830
a new Babel configuration that will help us to transport all this async, await into the thing that

72
00:04:02,830 --> 00:04:03,580
it understands.

73
00:04:04,030 --> 00:04:10,060
So for that, I need to be going to the index dogs and in the index dogs I'm going to be importing one

74
00:04:10,060 --> 00:04:16,600
of the policies to right on top of before all the other component import I'm going to say import and

75
00:04:16,600 --> 00:04:20,740
then it will here you say it Babel and then slash by level.

76
00:04:21,340 --> 00:04:23,320
So this is the configuration that is required.

77
00:04:23,740 --> 00:04:26,440
Now, you might be wondering why in the index dogs file.

78
00:04:26,830 --> 00:04:29,070
Well, it's because this is our entry file.

79
00:04:29,080 --> 00:04:33,910
So if I just go to developer configuration and if you just check it out over here, what is our entry

80
00:04:33,910 --> 00:04:34,160
file?

81
00:04:34,180 --> 00:04:35,570
So this is the index dog.

82
00:04:35,570 --> 00:04:35,890
This.

83
00:04:36,430 --> 00:04:39,100
So you are this Babel polypill has to be at the entry.

84
00:04:39,100 --> 00:04:39,460
Fine.

85
00:04:39,820 --> 00:04:43,360
If it is anywhere else, your application might not work as expected.

86
00:04:44,380 --> 00:04:44,710
Okay.

87
00:04:44,710 --> 00:04:46,660
So we have to just be a bit powerful.

88
00:04:46,780 --> 00:04:50,590
And one more point to note over here, this has already been installed in the package.

89
00:04:50,740 --> 00:04:51,910
Jason, that's why it is working.

90
00:04:52,240 --> 00:04:55,840
So if I just search for ADD, that'd be built by little.

91
00:04:55,840 --> 00:04:56,740
You can see it right here.

92
00:04:57,280 --> 00:05:01,990
So in case you're starting off with a new project, make sure that you have this dependency installed.

93
00:05:03,780 --> 00:05:04,080
Okay.

94
00:05:04,080 --> 00:05:09,720
With that configuration updated, let me go to my browser and if I just give it a refresh, you can

95
00:05:09,720 --> 00:05:15,570
see that we have the quick bookings again back loaded here and in my console I also see that the data

96
00:05:15,570 --> 00:05:16,080
is coming.

97
00:05:16,500 --> 00:05:20,430
So here you can expand and we see all the JSON data available to us.

98
00:05:20,910 --> 00:05:21,990
So that's pretty cool.

99
00:05:22,020 --> 00:05:27,840
We got to know how do we using the table policy and how do we using the async await syntax along with

100
00:05:27,840 --> 00:05:28,920
the fetch API?

101
00:05:29,820 --> 00:05:30,120
Okay.

102
00:05:30,120 --> 00:05:34,170
I'm just going to be taking a short break so we won't be using all this data that has been returned

103
00:05:34,170 --> 00:05:38,130
to us and load the cards using the React Components application.
