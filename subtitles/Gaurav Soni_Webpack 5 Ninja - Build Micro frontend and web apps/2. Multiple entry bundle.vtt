WEBVTT
1
00:00:04.150 --> 00:00:04.960
Welcome back.

2
00:00:04.990 --> 00:00:09.520
In this video, we are going to be starting off with the journey of exploring plug ins in the park.

3
00:00:09.970 --> 00:00:12.910
So far, we have seen one of the important concept that was off Florida.

4
00:00:13.120 --> 00:00:15.580
Now plug in is going to be announcing the build for the.

5
00:00:16.180 --> 00:00:21.370
Now, before we go ahead and dive deep into plug in, let's take the consideration of this particular

6
00:00:21.370 --> 00:00:22.600
application that I've developed.

7
00:00:23.140 --> 00:00:26.470
So as you can see, here we are on the index start in Milpitas.

8
00:00:26.800 --> 00:00:28.730
And this is a very simple application.

9
00:00:28.750 --> 00:00:29.960
It just has one page.

10
00:00:29.980 --> 00:00:33.940
So as you can see, it just has like a header, the content and some data here.

11
00:00:34.420 --> 00:00:38.440
So in the data, we can also filter it by using this select box right here.

12
00:00:39.130 --> 00:00:41.320
And we also have another page created.

13
00:00:41.350 --> 00:00:47.080
So if I click on View our Product, I can see that it takes us to another page which has a couple of

14
00:00:47.080 --> 00:00:47.980
products here.

15
00:00:48.460 --> 00:00:50.770
Well, the content of this page is not really important.

16
00:00:51.100 --> 00:00:53.170
The important part is the optimization.

17
00:00:53.680 --> 00:00:55.690
So what are we trying to optimize here?

18
00:00:56.110 --> 00:01:01.140
Well, so far, all the build that we had created, it had a single entry page in here.

19
00:01:01.150 --> 00:01:02.860
You can see that we have multiple pages.

20
00:01:03.130 --> 00:01:06.670
So we had the index page and now we have the product HTML pages.

21
00:01:07.090 --> 00:01:10.750
Now when you have multiple pages, you need to be having multiple entry points.

22
00:01:11.200 --> 00:01:15.340
Now, this is true when you have our traditional SDM as uses application.

23
00:01:15.700 --> 00:01:20.980
So if you're using a framework such as React or maybe Angular, then this is not going to be the case.

24
00:01:21.340 --> 00:01:25.510
But if you're using some traditional approach, you are going to be having multiple bundle files and

25
00:01:25.510 --> 00:01:26.800
multiple entry files.

26
00:01:27.190 --> 00:01:30.700
So let's go to the code and see what exactly has been implemented here.

27
00:01:30.880 --> 00:01:36.460
So if I go back to our code base now, you can see that I have another folder created here called Multiple

28
00:01:36.460 --> 00:01:37.270
Bundle Base.

29
00:01:37.600 --> 00:01:42.130
Now, this is going to be the starting point for our application, so you can just go ahead and download

30
00:01:42.130 --> 00:01:43.570
this entire project.

31
00:01:43.840 --> 00:01:48.670
And this is from where we're going to be building our application or creating the web content of it.

32
00:01:49.150 --> 00:01:53.800
Now, I've done this so that we do not really have to write the stimulus, he says, and spend time

33
00:01:53.800 --> 00:01:54.060
here.

34
00:01:54.070 --> 00:01:55.810
Instead, we can start learning that back.

35
00:01:56.260 --> 00:01:59.270
Now, just to give you an overview of what all is dead in this file.

36
00:01:59.290 --> 00:02:01.840
So we have the index and product HTML files.

37
00:02:02.140 --> 00:02:05.320
We have the associated services and the JavaScript files as well.

38
00:02:05.890 --> 00:02:11.350
Now, just to give you an overview of what's happening in the Gaza Strip files, we alluding to dependencies.

39
00:02:11.350 --> 00:02:16.120
We have the Lord Edge dependency, an adjacent file which is used for loading the data.

40
00:02:16.810 --> 00:02:18.790
Similar thing is happening in the product.

41
00:02:18.850 --> 00:02:22.240
So we have the load as dependency and some products status here.

42
00:02:22.930 --> 00:02:25.630
The product data comes from the product JSON file.

43
00:02:25.900 --> 00:02:28.120
So we have two Jason files attached as well.

44
00:02:29.240 --> 00:02:29.610
Okay.

45
00:02:29.630 --> 00:02:34.520
And the final thing that we have we had is that in the assets folder, which the couple of images that,

46
00:02:34.520 --> 00:02:37.430
as you can see here, was loaded on the estimate page.

47
00:02:38.480 --> 00:02:38.750
Okay.

48
00:02:38.750 --> 00:02:41.300
So that's about it of what's going on here.

49
00:02:41.600 --> 00:02:43.880
Now, let's go ahead and create the rap backfield.

50
00:02:44.420 --> 00:02:49.260
Now in the backfield, we're just going to be adding the back dart config.

51
00:02:49.260 --> 00:02:50.120
Gorgeous.

52
00:02:51.180 --> 00:02:54.120
And in this, we are going to be exporting our pack configurations.

53
00:02:54.510 --> 00:02:56.760
So it's a module, not export.

54
00:02:57.730 --> 00:02:59.190
Equals to an object.

55
00:02:59.230 --> 00:03:03.970
And in this we need the entry and we also need the output.

56
00:03:04.390 --> 00:03:07.180
So these are the basic things that we need for any of back file.

57
00:03:07.930 --> 00:03:10.030
Now the changes come here in the entry.

58
00:03:10.360 --> 00:03:13.810
Previously we used to be defining the entry point using the screen tool.

59
00:03:13.810 --> 00:03:19.270
We used to see something like dot slash, then as RC and then maybe like a mean Dodgers or an indexed

60
00:03:19.270 --> 00:03:19.600
audience.

61
00:03:19.600 --> 00:03:21.220
So this used to be our entry file.

62
00:03:21.580 --> 00:03:26.460
Now that things are a little bit different, we are having multiple entry files for each of the normal

63
00:03:26.500 --> 00:03:26.980
files.

64
00:03:26.980 --> 00:03:28.240
So how do we define that?

65
00:03:28.720 --> 00:03:32.980
Well, for defining that, instead of putting up a string here, we're going to be replacing this with

66
00:03:32.980 --> 00:03:33.580
an object.

67
00:03:33.940 --> 00:03:37.930
So in this, we are going to be putting up an object and we are going to be defining that.

68
00:03:37.930 --> 00:03:39.490
We have two entry points here.

69
00:03:40.180 --> 00:03:46.300
The first entry point is our index, and the second entry point is always going to be our product page.

70
00:03:46.300 --> 00:03:47.980
So we can just put it as product.

71
00:03:48.930 --> 00:03:49.320
All right.

72
00:03:49.320 --> 00:03:50.200
So that was done.

73
00:03:50.220 --> 00:03:53.720
Now we can be actually specifying where are the main files for this?

74
00:03:53.730 --> 00:03:56.250
Where is the files for each of these pages?

75
00:03:56.730 --> 00:04:03.450
So in case of the index page or our main page, you can just see dark slash as our C slash.

76
00:04:03.450 --> 00:04:06.600
And then we have our index dot G's.

77
00:04:06.630 --> 00:04:07.290
That's right here.

78
00:04:07.860 --> 00:04:11.280
So we can just put in here as index dot G's.

79
00:04:11.940 --> 00:04:13.440
Same thing can be done for the product.

80
00:04:13.440 --> 00:04:18.060
So you'll see a dot as our C slash products start.

81
00:04:18.330 --> 00:04:18.930
Yes.

82
00:04:20.010 --> 00:04:20.400
Okay.

83
00:04:20.760 --> 00:04:22.650
And please note these are the keys.

84
00:04:22.680 --> 00:04:27.420
It does not really have to match with your file name, so it does not necessarily have to be index.

85
00:04:27.420 --> 00:04:28.910
You can just call it as you wish.

86
00:04:28.920 --> 00:04:30.270
So it does not really matter.

87
00:04:30.960 --> 00:04:33.920
Now we also need to be defining our output object.

88
00:04:33.930 --> 00:04:36.630
So in the output we need to be defining the file name.

89
00:04:37.140 --> 00:04:39.180
So I'll put up the file name.

90
00:04:39.720 --> 00:04:44.430
And ideally what we used to be doing over here, we used to just say the file name is going to be like

91
00:04:44.430 --> 00:04:45.470
bundled tortillas.

92
00:04:46.020 --> 00:04:47.360
Now let's try to do that.

93
00:04:47.370 --> 00:04:51.950
So I'm just going to be putting it as bundle dot JS.

94
00:04:52.800 --> 00:04:53.150
Okay.

95
00:04:53.310 --> 00:04:57.250
We also need to be defining the path as where the file is going to be kept.

96
00:04:57.270 --> 00:05:02.760
So we put up the path and in here we are going to be saying but not resolve.

97
00:05:03.890 --> 00:05:04.480
Now I see.

98
00:05:04.550 --> 00:05:08.450
Need to be importing the part modules so we can see Gonzales.

99
00:05:08.630 --> 00:05:11.030
But he calls to the choir.

100
00:05:11.510 --> 00:05:11.930
But.

101
00:05:13.220 --> 00:05:18.860
All right, then we have to be citing the locations or the location is going to be directory name,

102
00:05:18.860 --> 00:05:20.330
comma, test.

103
00:05:21.710 --> 00:05:23.300
All right, let me just fix that.

104
00:05:23.900 --> 00:05:24.590
That looks good.

105
00:05:25.520 --> 00:05:28.940
Okay, so we have the output and the key file fixed.

106
00:05:28.940 --> 00:05:31.670
So I think we are pretty good to go right now.

107
00:05:31.670 --> 00:05:34.580
We just need to be making sure that the things are being installed.

108
00:05:34.910 --> 00:05:39.500
So since this is just the base package, we need to be installing the node dependencies.

109
00:05:39.800 --> 00:05:42.620
So what you can do here is just go to this particular folder.

110
00:05:42.890 --> 00:05:45.500
So in my case, the folder number is seven.

111
00:05:46.010 --> 00:05:49.040
So I'd say CD seven, multiple bundle base.

112
00:05:49.340 --> 00:05:54.950
Now in this, I'm going to be installing the dependencies to the NPM install, so that should pull up

113
00:05:54.950 --> 00:05:57.170
all our Webpack dependencies and so on.

114
00:05:57.650 --> 00:06:01.850
So once we have that done, let's try to run our Webpack file.

115
00:06:02.360 --> 00:06:06.590
So for running the Webpack, as usual, we are going to be going to our package, Jason.

116
00:06:06.890 --> 00:06:11.660
And in this you can see I already have the script created, so we do not really need to worry about

117
00:06:11.660 --> 00:06:12.230
that as well.

118
00:06:12.240 --> 00:06:16.520
So what I can do here is I can just type in NPM, run, build.

119
00:06:18.300 --> 00:06:18.540
Okay.

120
00:06:18.600 --> 00:06:20.890
So I expected to break for some reason.

121
00:06:20.940 --> 00:06:23.820
Now I can see the multiple issue that has been presented to us.

122
00:06:24.270 --> 00:06:27.600
The first major issue is this conflict of the files.

123
00:06:27.930 --> 00:06:33.690
So it seems that there are multiple chunks to be omitted and they both have the same file in that bundle

124
00:06:33.690 --> 00:06:35.220
bundled years, which is not possible.

125
00:06:35.640 --> 00:06:37.020
So what's happening here?

126
00:06:37.440 --> 00:06:41.640
So if you go back to our Webpack config, you can see that for two entry files.

127
00:06:41.640 --> 00:06:46.140
We have said that the bundle output should be as bundle Rogers, which does not really work.

128
00:06:46.770 --> 00:06:50.160
So in this case, what we are going to be doing is we are going to be using the variables.

129
00:06:50.640 --> 00:06:54.630
So by default that gives us the variable called as name.

130
00:06:55.350 --> 00:06:57.120
And then we can put up a dot.

131
00:06:57.510 --> 00:07:01.980
So what is going to be happening now is we are going to be creating a bundle with the name and the name

132
00:07:01.980 --> 00:07:05.730
is going to be called US Index and then it is going to be bundle.

133
00:07:06.100 --> 00:07:10.680
So it will be two bundles index, start, bundle, Rogers and Product Dot bundle dodgers.

134
00:07:11.370 --> 00:07:11.670
Okay.

135
00:07:11.670 --> 00:07:12.360
So that's fixed.

136
00:07:12.360 --> 00:07:14.660
Let's try to run our build once again.

137
00:07:14.670 --> 00:07:15.720
So NPM, run, build.

138
00:07:16.110 --> 00:07:19.580
Now, as you can see, we have successfully committed the files.

139
00:07:19.610 --> 00:07:23.820
We have the two bundles created, indexed are bundle and the product are bundles.

140
00:07:24.030 --> 00:07:27.270
Now if I go to the dist folder, I should be seeing the two bundles.

141
00:07:27.270 --> 00:07:29.340
So we have the index and the product bundle.

142
00:07:29.700 --> 00:07:31.800
Now let's try to run our mill files.

143
00:07:31.920 --> 00:07:34.820
So if I click on my index, start estimates the reveal and find it.

144
00:07:35.290 --> 00:07:39.540
Let's double click and open the SD mill file and things works pretty much.

145
00:07:39.870 --> 00:07:42.600
But you can see that the new auto section is not working.

146
00:07:42.930 --> 00:07:45.390
And this is because we are using the JavaScript here.

147
00:07:45.750 --> 00:07:47.940
So let's try to inspect and see what's going on.

148
00:07:48.630 --> 00:07:54.180
So if you go to the inspect and see the console, try to refresh the page once again, we do not see

149
00:07:54.180 --> 00:07:55.110
any error as such.

150
00:07:55.500 --> 00:08:01.020
Now the problem over here is our JavaScript is not being loaded and hence that's why the load is not

151
00:08:01.020 --> 00:08:02.640
being presented over here as well.

152
00:08:03.360 --> 00:08:08.880
So to fix this, if I go back to the code and in our code, if we go to the index dot estimate, we

153
00:08:08.880 --> 00:08:11.760
can see that we have not really imported the bundle here.

154
00:08:12.120 --> 00:08:15.060
So what we need to be doing is we need to be adding the script tags here.

155
00:08:15.450 --> 00:08:16.770
So I say script.

156
00:08:17.800 --> 00:08:23.890
And here I'm going to be putting these swords and then we can put the sword says, go to the dust folder

157
00:08:23.920 --> 00:08:26.110
and this is the index dart panel.

158
00:08:26.710 --> 00:08:28.960
The same thing can be done for the products as well.

159
00:08:28.960 --> 00:08:33.340
So if I go to the product quality body section, it's all below the body section.

160
00:08:33.340 --> 00:08:35.470
We can put up the script tag.

161
00:08:35.560 --> 00:08:41.860
So I'll do the script as our C and this is going to be as DIST and product card one.

162
00:08:42.730 --> 00:08:43.030
Okay.

163
00:08:43.030 --> 00:08:48.160
So with that done, let's try to see our page once again so I can just go back to the browser, hit

164
00:08:48.160 --> 00:08:50.590
refresh and things work as expected.

165
00:08:51.010 --> 00:08:54.610
So we have the products listed here and my filter is working as well.

166
00:08:55.420 --> 00:08:55.840
Awesome.

167
00:08:55.840 --> 00:08:56.470
So thanks.

168
00:08:56.470 --> 00:08:57.280
Looks pretty good.

169
00:08:57.370 --> 00:09:02.170
You saw how to be creating the multiple bundles, but there's one thing that I would like to really

170
00:09:02.170 --> 00:09:05.080
fix, and this is where plugins are going to be helping us a lot.

171
00:09:05.350 --> 00:09:10.100
Now, as you saw when we wanted to be adding this bundles, we had to manually come in the estimate

172
00:09:10.160 --> 00:09:13.720
files and create the bundle and this is not really efficient.

173
00:09:14.170 --> 00:09:18.340
There's also another problem where I need to be again and again reloading my build.

174
00:09:18.340 --> 00:09:20.650
So I have to come here and see NPM, run, build.

175
00:09:21.040 --> 00:09:24.940
And these are the kind of problems that is going to be solved by using the plugins.

176
00:09:25.390 --> 00:09:28.570
So let's take a short break and see how do we resolving this problems.
