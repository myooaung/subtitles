1
00:00:00,510 --> 00:00:01,170
Welcome back.

2
00:00:01,200 --> 00:00:04,890
In this video, we're going to be seeing how to be taking the excess to the production level.

3
00:00:05,400 --> 00:00:10,560
So far, when we are loading any of the excess, it will automatically getting injected into the diamond

4
00:00:10,590 --> 00:00:10,950
file.

5
00:00:11,250 --> 00:00:12,570
And things were working pretty well.

6
00:00:12,570 --> 00:00:14,790
We saw website loading with all this, he says.

7
00:00:15,270 --> 00:00:16,530
But there are a couple of issues here.

8
00:00:17,010 --> 00:00:22,860
Since our CSF is bundled with our estimate, we cannot really leverage the functionality of caching

9
00:00:22,860 --> 00:00:23,610
of our browser.

10
00:00:24,000 --> 00:00:27,090
So just to give you a recap of how things work at the browser level.

11
00:00:27,450 --> 00:00:32,760
So for example, we have our index statistical file here, which has the HTML markup as well as the

12
00:00:32,760 --> 00:00:34,350
access that needs to be applied.

13
00:00:34,800 --> 00:00:39,090
Now, let's suppose we are going to be changing some text on the Steamvr file.

14
00:00:39,450 --> 00:00:43,080
So let's suppose there's some heading like this and you're just going to be updating the text value.

15
00:00:43,680 --> 00:00:47,940
What will happen here is the browser is going to be sending the request back to the server, and since

16
00:00:47,940 --> 00:00:53,190
there's a change in the DML file, the entire estimated file is going to be coming back to the browser.

17
00:00:53,610 --> 00:00:58,200
Now, as you can imagine, we did not make any access changes, so what's the point of bringing this

18
00:00:58,200 --> 00:00:58,920
S's back?

19
00:00:59,340 --> 00:01:04,420
So for that reason, if you are able to sort of split the XHTML in this here says we need to be just

20
00:01:04,440 --> 00:01:06,630
bringing back the part which has got changed.

21
00:01:06,930 --> 00:01:11,100
So for example, if you updated the estimate, we would be fighting the estimate from the server.

22
00:01:11,460 --> 00:01:16,500
And if you made some changes on this basis, we are just going to be putting that CSEs from the browser

23
00:01:16,830 --> 00:01:19,230
and this is how you can really optimize your website.

24
00:01:19,440 --> 00:01:22,410
So this was one of the reasons why we need to be splitting the sixes.

25
00:01:22,770 --> 00:01:24,150
And there's also one more reason.

26
00:01:24,480 --> 00:01:26,310
So for that I need to be getting my web back.

27
00:01:26,310 --> 00:01:26,910
So we're running.

28
00:01:26,910 --> 00:01:33,690
So let me just switch back to my code and type in here as an open brand serve, and let's just give

29
00:01:33,690 --> 00:01:37,380
that a second how browser opens up so we can see how things are loading currently.

30
00:01:38,040 --> 00:01:40,800
Okay, so going to our website, this was our page.

31
00:01:40,800 --> 00:01:41,700
Everything looks good.

32
00:01:42,000 --> 00:01:47,400
Now if I go to the courses page now if you noticed, we just got a flicker while loading this page.

33
00:01:47,880 --> 00:01:48,780
So what happened?

34
00:01:48,780 --> 00:01:54,330
All we had was all the email content got loaded and after a delay only this has got applied.

35
00:01:54,630 --> 00:01:58,620
Similarly, if I just to go back to the home, you can see that there's a small flicker here as well.

36
00:01:59,250 --> 00:02:03,240
Now, just to make it really apparent, I can also slow down the internet settings just by going to

37
00:02:03,240 --> 00:02:06,750
the network and throttle the Internet, make it like slow 3D.

38
00:02:07,140 --> 00:02:12,750
And now if I try to read the navigation, you can really see that, you know, I would I still be loaded

39
00:02:12,750 --> 00:02:14,250
here without access.

40
00:02:14,910 --> 00:02:20,940
So once we have DC S's in a different file, the loading of this is going to happen asynchronously in

41
00:02:20,940 --> 00:02:24,960
the browser and is going to be applied and we should not be able to see this flicker anymore.

42
00:02:25,830 --> 00:02:28,170
Okay, so these are the two things that we're looking to solve.

43
00:02:28,440 --> 00:02:30,420
Let's see how we can be doing that in our code.

44
00:02:31,140 --> 00:02:32,880
Let me switch back to my code here.

45
00:02:33,810 --> 00:02:39,660
Stop this out from running and let's clear that and let me just give an overview of from there.

46
00:02:39,660 --> 00:02:41,190
We're going to be starting now.

47
00:02:41,190 --> 00:02:46,100
If you are following along with me, you can just continue on in the same folder, if not or if you

48
00:02:46,100 --> 00:02:47,070
will, facing some issues.

49
00:02:47,070 --> 00:02:50,550
You can just use this folder called as production build underscore bit.

50
00:02:50,850 --> 00:02:54,870
And this is going to be the starting point for the section where we are going to be doing all the production

51
00:02:54,870 --> 00:02:56,040
level optimization.

52
00:02:56,700 --> 00:03:01,890
I've also created another folder with the split and course at the end, and in this we are going to

53
00:03:01,890 --> 00:03:04,500
be adding the configurations for splitting boxes.

54
00:03:05,310 --> 00:03:11,190
Okay, let's get started now for doing the splitting of the sixes, we need to install additional plug

55
00:03:11,190 --> 00:03:11,370
in.

56
00:03:11,850 --> 00:03:13,080
So what's the plug in?

57
00:03:13,290 --> 00:03:21,300
We can just come to the terminal and see npm install save dev and the plug in is called us mini dash

58
00:03:21,300 --> 00:03:25,530
60 dash extract dash plug in.

59
00:03:25,860 --> 00:03:26,610
So that's the name.

60
00:03:26,820 --> 00:03:28,230
Okay, let's get that installed.

61
00:03:29,380 --> 00:03:31,260
And let's give that a second.

62
00:03:31,450 --> 00:03:32,920
Let me just quickly fix the name.

63
00:03:32,920 --> 00:03:39,430
So my plug in spelling was wrong, so I'll just put it as plug in and let's keep that installation running.

64
00:03:40,120 --> 00:03:42,280
Now, I got my plug in successfully installed too.

65
00:03:42,280 --> 00:03:43,690
Let's go ahead and use this plug in.

66
00:03:44,140 --> 00:03:45,400
I'm going to be importing it first.

67
00:03:45,400 --> 00:03:55,270
So as a caused many CCS extract plug in equals two required and then many as this extract plug in.

68
00:03:56,020 --> 00:03:57,730
Okay, we got the plug in, import it.

69
00:03:57,730 --> 00:03:59,470
Let's go ahead and use that as usual.

70
00:03:59,470 --> 00:04:01,870
We need to be going to our plug in section.

71
00:04:02,470 --> 00:04:06,850
Let's come here and see new mini CST extract plug in.

72
00:04:07,750 --> 00:04:08,140
Okay.

73
00:04:08,140 --> 00:04:09,130
So that's done.

74
00:04:09,550 --> 00:04:13,810
I'm just going to be disabling my module analyzer plug in for now since we're not using it.

75
00:04:13,810 --> 00:04:14,200
Really.

76
00:04:14,260 --> 00:04:16,000
So let's disable that as well.

77
00:04:17,070 --> 00:04:17,340
Okay.

78
00:04:17,340 --> 00:04:19,740
So that's pretty much it for the plug in configuration.

79
00:04:19,740 --> 00:04:22,890
We do not really need to be passing an additional configuration over here.

80
00:04:23,550 --> 00:04:27,690
Now, if I do see NPM run Dev, let's see what happens.

81
00:04:28,670 --> 00:04:28,970
Okay.

82
00:04:28,970 --> 00:04:32,240
My build was successful and I also got the disk folder here.

83
00:04:32,720 --> 00:04:38,180
But if I open up my disk folder, we do not really see any Stasi SS files here.

84
00:04:38,180 --> 00:04:40,280
So if you notice there are no CAC files here.

85
00:04:40,790 --> 00:04:41,900
So what is the problem?

86
00:04:42,530 --> 00:04:46,970
Do you remember how we loaded our cases when we uses the CAC loader?

87
00:04:46,970 --> 00:04:47,300
Right.

88
00:04:47,720 --> 00:04:50,880
And then we also used one additional loader there, if you remember.

89
00:04:51,350 --> 00:04:53,600
So the loader was called as the style loader.

90
00:04:54,080 --> 00:04:55,790
Now, what was the purpose of this day loader?

91
00:04:56,060 --> 00:05:02,180
The purpose of the style loader was to get all the compile seizes from the CFS loader and inject it

92
00:05:02,180 --> 00:05:03,410
to the steam file.

93
00:05:03,980 --> 00:05:07,580
Now, in our case, we do not want to be injecting it anymore to the steam.

94
00:05:07,730 --> 00:05:09,650
Instead, we want a separate CSS file here.

95
00:05:09,650 --> 00:05:13,820
Right to what we are going to be doing over here is actually be removing the style loader.

96
00:05:14,360 --> 00:05:15,500
So let's get rid of that.

97
00:05:15,860 --> 00:05:21,230
And we ought to be using the Minix extract plugin in the loader section for the first time.

98
00:05:21,620 --> 00:05:23,690
And in here we'll say dart loader.

99
00:05:24,080 --> 00:05:26,720
So that's one of the property provided by this plugin.

100
00:05:26,840 --> 00:05:31,220
And Estee Lauder, similar thing we are going to be doing for the SS as well.

101
00:05:31,610 --> 00:05:36,110
So let's get rid of this and see how many cases extract plug in dart loader.

102
00:05:36,860 --> 00:05:39,170
So just to give a recap of what's going to happen here.

103
00:05:39,530 --> 00:05:46,640
So for example, in the Explorer, we compile all the SPSS files and once it's compiled, we give it

104
00:05:46,640 --> 00:05:47,840
to the access loaders.

105
00:05:48,140 --> 00:05:53,940
And once that is done and we get the compile results, we pass it to the exit extract plugin.

106
00:05:54,290 --> 00:05:58,370
So it can just create a new cases file with all that loaded status.

107
00:05:59,370 --> 00:05:59,700
Okay.

108
00:05:59,700 --> 00:06:01,220
So that's all the configuration required.

109
00:06:01,230 --> 00:06:05,030
Let's see if that file cleared the console and see and beam run dev.

110
00:06:05,820 --> 00:06:06,810
Let's give that a second.

111
00:06:07,710 --> 00:06:08,100
Okay.

112
00:06:08,100 --> 00:06:08,790
With that done.

113
00:06:08,800 --> 00:06:12,150
Now you can see that we have actually got two additional case files.

114
00:06:12,450 --> 00:06:16,950
So we got like this model dot cases and also a bundle cases.

115
00:06:17,310 --> 00:06:18,390
Now, this is really cool.

116
00:06:18,720 --> 00:06:24,120
Our plugin also identifies what all of these cases that it needs to be combining and can be used in

117
00:06:24,120 --> 00:06:24,950
multiple places.

118
00:06:24,960 --> 00:06:28,230
So the bundles are also optimized over here.

119
00:06:29,310 --> 00:06:29,690
Okay.

120
00:06:29,700 --> 00:06:32,490
So with that said, let's try to run this in our browser.

121
00:06:32,910 --> 00:06:38,140
So I'm just going to be saying and PM ran serve to get our browser opened up.

122
00:06:38,970 --> 00:06:39,320
Okay.

123
00:06:39,330 --> 00:06:41,080
Our website works like before.

124
00:06:41,100 --> 00:06:47,190
If I go to the inspect and if I go to the network during a refresh, we should be seeing the new CSIS

125
00:06:47,190 --> 00:06:48,240
files loaded here.

126
00:06:48,900 --> 00:06:54,120
And I can see here that we have this as our C underscore render and this is the CSIS file that just

127
00:06:54,120 --> 00:06:54,690
got loaded.

128
00:06:55,230 --> 00:06:56,040
So that's great.

129
00:06:56,040 --> 00:06:56,970
That's really good.

130
00:06:57,330 --> 00:07:01,980
And let's see if it also solve the issue where we are having the flickering when we are switching between

131
00:07:01,980 --> 00:07:02,490
the pages.

132
00:07:02,940 --> 00:07:04,410
So let me just clear that off.

133
00:07:04,420 --> 00:07:05,970
Go to the process page.

134
00:07:07,370 --> 00:07:13,100
And in here you can see that we are on the slow 3D, so we do not really see any flicker and the page

135
00:07:13,100 --> 00:07:17,210
was loaded as it should, and this gives a much better user experience.

136
00:07:17,630 --> 00:07:22,820
So just going back to the homepage as well, we should not be seeing any flicker and things are working

137
00:07:22,820 --> 00:07:24,020
pretty well here as well.

138
00:07:24,650 --> 00:07:29,810
Okay, so that's about it, how you're going to be splitting your scissors into a separate file.

139
00:07:30,140 --> 00:07:34,670
Let's take a short break and see what other optimizations we can be doing at the production level.
