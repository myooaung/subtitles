WEBVTT
1
00:00:03.040 --> 00:00:04.990
Welcome to another video on that back.

2
00:00:05.410 --> 00:00:08.560
In this video, we're going to be seeing what exactly is the dependency graph?

3
00:00:08.920 --> 00:00:14.470
Now, dependency graph is very important concept on Webpack and based on this particular concept, the

4
00:00:14.470 --> 00:00:17.530
entire dependency and the bundle summit in the back.

5
00:00:17.920 --> 00:00:21.070
So I've made a small diagram to understand this exact feature.

6
00:00:21.730 --> 00:00:25.990
So when we're doing our development environment, we have a lot of files that float around.

7
00:00:26.290 --> 00:00:28.110
We have a lot of these files.

8
00:00:28.120 --> 00:00:30.910
We have a lot of theses files and as well as assets.

9
00:00:31.390 --> 00:00:35.620
Now the assets mentioned here are all PNG and JPG images assets.

10
00:00:35.830 --> 00:00:37.390
But it can be any sort of asset.

11
00:00:37.600 --> 00:00:40.690
It can be one forms or maybe a music file and so on.

12
00:00:41.440 --> 00:00:45.760
Well, once we start bundling things with Webpack, let's see how things transform.

13
00:00:46.450 --> 00:00:51.310
Now, once you have the Webpack installed and once you have all the configurations done, this is what

14
00:00:51.310 --> 00:00:52.810
is going to be happening behind the scene.

15
00:00:53.930 --> 00:00:55.220
So we have a better idea.

16
00:00:55.700 --> 00:00:59.990
And once they do the configuration, the most important part is the entry of your application.

17
00:01:00.350 --> 00:01:05.090
The entry of the application specifies exactly which file is going to be bootstrapping you and their

18
00:01:05.090 --> 00:01:05.730
application.

19
00:01:06.110 --> 00:01:09.410
So let's say, for example, you're making like a server based application.

20
00:01:09.710 --> 00:01:14.930
Then it might be an index store which contains things such as starting off the database connections,

21
00:01:14.930 --> 00:01:17.180
maybe starting your server and so on.

22
00:01:17.900 --> 00:01:21.290
Now in case of website, this might be the homepage of your entire website.

23
00:01:21.590 --> 00:01:25.910
So this is exactly which is going to be loading all the other dependencies in your website.

24
00:01:26.360 --> 00:01:30.620
So this is a really important file and this is what is going to be pointed in the back.

25
00:01:31.610 --> 00:01:31.940
All right.

26
00:01:31.940 --> 00:01:35.140
So once your Webpack has the entry file, what is it going to be doing?

27
00:01:35.150 --> 00:01:40.100
It's going to be searching all the import, all the require statements that you have in that file and

28
00:01:40.100 --> 00:01:41.780
start vetting all those content.

29
00:01:42.170 --> 00:01:42.650
So let's see.

30
00:01:42.650 --> 00:01:47.090
For example, in our index dogs file, we have mentioned import guard dog years.

31
00:01:47.570 --> 00:01:51.980
So once you have that import card, this is going to be pulling up the dependencies or all the export

32
00:01:51.980 --> 00:01:56.930
statements that are there in cartridges and pull it right back into your index dogs.

33
00:01:57.800 --> 00:02:03.140
Now let's suppose card dogs has an internal dependency of ordered orders, so it's going to be pulling

34
00:02:03.140 --> 00:02:04.010
up orders as well.

35
00:02:04.550 --> 00:02:09.290
Then orders has a dependency of admin gauges, so it follows that same dependency graph.

36
00:02:09.920 --> 00:02:14.870
Now order dogs might also be pulling up additional assets of example or here, as you can see by the

37
00:02:14.870 --> 00:02:19.160
arrow, the order duty is is connecting to the add icon dot png.

38
00:02:19.850 --> 00:02:25.460
Now once you are doing this import, it's also going to be pulling up this asset as a dependency of

39
00:02:25.460 --> 00:02:26.660
this entire application.

40
00:02:27.410 --> 00:02:31.190
Now indexed START has a dependency on this particular user's file.

41
00:02:31.490 --> 00:02:33.830
So this is going to be pulled up as a dependency as well.

42
00:02:34.700 --> 00:02:39.260
Now filter files, you can see here are a few of the boxes that you can see here are all orphaned.

43
00:02:39.590 --> 00:02:44.210
So for example, this dogs home docs, the SS and one image right here.

44
00:02:44.900 --> 00:02:51.080
Now the pack is very smart and it is able to identify that, okay, I do not really need all these files

45
00:02:51.080 --> 00:02:53.810
for running my application because nobody has been importing them.

46
00:02:54.470 --> 00:02:56.840
Now, this is a very powerful feature of the pack.

47
00:02:57.290 --> 00:03:01.010
Now using this feature we are able to eliminate code which is not going to be used.

48
00:03:01.220 --> 00:03:06.350
Obviously there are few configurations that need to be done, but Webpack is very smart in identifying

49
00:03:06.350 --> 00:03:07.610
these kind of dependencies.

50
00:03:08.680 --> 00:03:14.200
Now once internal lever back has made all this dependency graph, what is going to be doing is going

51
00:03:14.200 --> 00:03:15.880
to be creating output folder.

52
00:03:16.360 --> 00:03:21.580
Now this is also specified as the output configuration in your Webpack configurations.

53
00:03:22.240 --> 00:03:28.690
Now in the output we are going to be having on the basic side, a bundle charges Aventador JS and a

54
00:03:28.690 --> 00:03:29.740
bundle proteases users.

55
00:03:30.220 --> 00:03:35.200
Now this is not specific files that are going to be outputted, but I am giving you on a very high level

56
00:03:35.200 --> 00:03:37.990
as what is the default output that we are going to be expecting.

57
00:03:38.650 --> 00:03:41.980
So bundle radius might be having all the code that is written by us.

58
00:03:42.310 --> 00:03:47.290
So for example, we have written the card Dodgers, pay Dodgers or the Dodgers, but maybe there's a

59
00:03:47.290 --> 00:03:52.660
bootstrap Dodgers that is a vendor specific file and we are going to be putting that into the vendor

60
00:03:52.660 --> 00:03:53.350
dodgers.

61
00:03:54.480 --> 00:03:59.100
Now, there are a couple of reasons for splitting this into two separate bundles, and we're going to

62
00:03:59.100 --> 00:04:01.620
be covering that shortly in the future videos.

63
00:04:02.160 --> 00:04:07.890
But for now, just remember that we can be outputting multiple JavaScript files based on the dependencies

64
00:04:07.890 --> 00:04:09.240
that have been identified.

65
00:04:10.020 --> 00:04:12.270
The same thing is going to be done for the CSA as well.

66
00:04:12.810 --> 00:04:18.680
So as you can see, we have just used two of the cases files that are the bootstrap and the admin cases.

67
00:04:19.050 --> 00:04:23.280
Solely these dependencies are going to be pulled up in your main bundle, Dot says.

68
00:04:23.610 --> 00:04:26.790
And we're just going to be ignoring the home Nazi dependency.

69
00:04:27.880 --> 00:04:28.210
All right.

70
00:04:28.210 --> 00:04:33.550
So once you have the entire output file, you'll be generally having an index start estimate file.

71
00:04:33.850 --> 00:04:38.260
This is going to be your main file that is going to be starting off your website, doing the index start

72
00:04:38.260 --> 00:04:38.730
estimate.

73
00:04:38.780 --> 00:04:44.620
We are going to be pointing up not all the GC files that we had used for development, but instead just

74
00:04:44.620 --> 00:04:45.670
the over pack output.

75
00:04:46.000 --> 00:04:48.310
So in this, we are going to be just pointing these script tags.

76
00:04:48.310 --> 00:04:51.760
So we have two scripts here, which is the bundle and the render gorgeous.

77
00:04:52.150 --> 00:04:55.660
And the thesis file, which is the bundle dot thesis file.

78
00:04:56.290 --> 00:05:00.010
So these are all the dependencies that are required for running your application.

79
00:05:01.350 --> 00:05:01.760
Arrest.

80
00:05:01.790 --> 00:05:07.050
This is a very high level of the dependency graph and the couple of more thing that happens behind the

81
00:05:07.050 --> 00:05:07.350
scene.

82
00:05:07.530 --> 00:05:10.890
But we're going to be covering them as and when we are going to be covering those sections.

83
00:05:11.730 --> 00:05:12.060
All right.

84
00:05:12.060 --> 00:05:15.300
So I hope you get an understanding of what's happening behind the pack.

85
00:05:15.630 --> 00:05:17.760
Let's dive in and start writing some code.
