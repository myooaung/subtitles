WEBVTT
1
00:00:00.360 --> 00:00:04.710
Right from the last we we did some configuration update for making our routing work, but things were

2
00:00:04.710 --> 00:00:05.970
not going as expected.

3
00:00:05.970 --> 00:00:08.520
And we got this error message on the port 9000.

4
00:00:08.940 --> 00:00:12.960
If I just go back to my original application, which is the home page, it still works fine.

5
00:00:13.380 --> 00:00:14.640
So what is the problem here?

6
00:00:15.210 --> 00:00:17.430
Let's try to debug what the error is shown here.

7
00:00:17.670 --> 00:00:21.420
So as you can see, it shows that invalid hook calls and couple of messages here.

8
00:00:21.960 --> 00:00:25.060
The one that you're really aware of is the message that is right here.

9
00:00:25.080 --> 00:00:28.320
You might be having more than one copy of React in the same application.

10
00:00:28.830 --> 00:00:34.050
Now what's happening with it is multiple copies of React is getting loaded on this same browser.

11
00:00:34.380 --> 00:00:37.530
Now most of the single page application frameworks need that.

12
00:00:37.530 --> 00:00:40.830
Only one copy of those frameworks should be present at one page.

13
00:00:41.160 --> 00:00:44.310
And in this particular case, we can see that it's loading multiple of them.

14
00:00:44.820 --> 00:00:46.050
So how do we fix this?

15
00:00:46.410 --> 00:00:50.550
Well, for fixing this, the back module federation gives us an inbuilt parameter.

16
00:00:50.730 --> 00:00:51.870
So let's have a look at that.

17
00:00:52.740 --> 00:00:57.860
Now, if I just switch over to the homepage application that's right here, and if I go to the Webpack

18
00:00:57.870 --> 00:01:01.860
config and let's check out the module federation configurations.

19
00:01:03.230 --> 00:01:04.400
So all this is fine.

20
00:01:04.760 --> 00:01:09.230
But we also need to specify one more property here, and that property is called as shared.

21
00:01:09.860 --> 00:01:14.660
Now, what share does is it tell us, what are the libraries that I'm going to be sharing with the host

22
00:01:14.660 --> 00:01:15.290
application?

23
00:01:15.560 --> 00:01:19.940
So whenever any application is going to be calling any of this component, I'm going to be trying to

24
00:01:19.940 --> 00:01:20.370
share it.

25
00:01:20.380 --> 00:01:23.420
If the library if it's already present in the host application.

26
00:01:23.960 --> 00:01:25.790
So what are the libraries that we're trying to share?

27
00:01:26.300 --> 00:01:30.950
The first library is going to be react and the second library is React, Dom.

28
00:01:31.490 --> 00:01:33.890
So these are the two libraries that we're trying to share.

29
00:01:34.610 --> 00:01:38.750
Okay, so let's save this and try to run and see if things work as expected.

30
00:01:39.250 --> 00:01:41.680
So I'm just going to be starting off my solo once again.

31
00:01:41.690 --> 00:01:44.180
So let's stop that and say and parents of.

32
00:01:46.250 --> 00:01:46.580
Okay.

33
00:01:46.580 --> 00:01:52.100
So our application opens up once again, and this time we see that even our original application is

34
00:01:52.100 --> 00:01:52.640
not working.

35
00:01:52.640 --> 00:01:57.230
So we want the homepage application, which was loading earlier on this tap stopped working.

36
00:01:57.680 --> 00:01:58.880
So what's the problem now?

37
00:01:59.180 --> 00:02:01.670
Let me try to inspect that and see what's the problem here.

38
00:02:02.240 --> 00:02:05.220
So I'll go to the console and now we get a new error.

39
00:02:05.240 --> 00:02:08.990
It says that the shared module is not available for eager consumption.

40
00:02:09.590 --> 00:02:16.020
Now, what this basically means is when our application starts off, it's not able to sort of find us

41
00:02:16.040 --> 00:02:17.360
react and react, Dom.

42
00:02:17.540 --> 00:02:22.850
So we need to sort of delay the entire initialization or the bootstrapping of the entire application.

43
00:02:23.390 --> 00:02:25.370
Now, there's a very easy way of doing that.

44
00:02:26.000 --> 00:02:30.350
Now, for doing that, what we're going to do is we're going to be creating a new file and moving things

45
00:02:30.350 --> 00:02:32.420
around, not adding really any new code.

46
00:02:32.780 --> 00:02:35.540
But this is going to help us sort of change the way we react.

47
00:02:35.540 --> 00:02:36.560
Application Bootstrap.

48
00:02:37.340 --> 00:02:42.210
So what I'm going to do over here is let's minimize all of this in this homepage application.

49
00:02:42.230 --> 00:02:44.660
Let's go to the source folder and create a new file.

50
00:02:44.660 --> 00:02:48.830
And we won't be calling this file as Bootstrap dot.

51
00:02:48.910 --> 00:02:51.290
Yes, the name does not really matter.

52
00:02:51.290 --> 00:02:55.280
We just need another file that's going to help us bootstrap this application.

53
00:02:55.790 --> 00:02:59.450
So right now, the entire application is getting bootstrap via this index started.

54
00:03:00.230 --> 00:03:05.390
And if you remember in our Webpack config, we have this indexed order setup as our initial application.

55
00:03:06.080 --> 00:03:09.920
So basically when it's trying to initialize, it's not finding React and that's why everything is failing.

56
00:03:10.400 --> 00:03:16.100
So what we need to do is from this index, start this, just select all, cut it from here and paste

57
00:03:16.100 --> 00:03:17.690
it in your bootstrap dodges.

58
00:03:17.900 --> 00:03:18.710
Just like that.

59
00:03:18.920 --> 00:03:19.670
Save the file.

60
00:03:20.330 --> 00:03:23.930
And in the next hour, guys, we are going to be importing that bootstrap file.

61
00:03:23.930 --> 00:03:28.820
So I'll say import and then I'll say dot slash bootstrap.

62
00:03:30.280 --> 00:03:30.610
All right.

63
00:03:30.610 --> 00:03:32.380
So that's that's pretty much it, actually.

64
00:03:32.380 --> 00:03:33.970
That's all the change that you need to do.

65
00:03:34.240 --> 00:03:39.430
So if I just go back to my browser, you know, refresh and my application is back online.

66
00:03:39.880 --> 00:03:43.450
So that was not a very difficult fix, quite easy fix, actually.

67
00:03:43.660 --> 00:03:47.260
But you should understand why that particular issue came in and how it'll be fixing it.

68
00:03:48.010 --> 00:03:48.430
Okay.

69
00:03:48.670 --> 00:03:54.220
So now that we have this application running on Port 3000, let's check out if things are working on

70
00:03:54.220 --> 00:03:59.020
our port 9000 as well, which is our main container application or a movie application.

71
00:03:59.470 --> 00:04:00.870
So let me give that a refresh.

72
00:04:01.270 --> 00:04:03.610
And we see that things are not working here as well.

73
00:04:04.060 --> 00:04:07.540
So we need to be following the same strategy since we're getting the same error here as well.

74
00:04:08.080 --> 00:04:14.170
So what I'll do is go to my we scored, let's minimize this, go to our movie application and make the

75
00:04:14.170 --> 00:04:15.700
changes in Webpack config.

76
00:04:16.390 --> 00:04:22.270
So in the back config, I'm going to be saying that if any application comes in or I'm loading any application,

77
00:04:22.270 --> 00:04:23.830
we're going to be trying to share this stuff.

78
00:04:24.280 --> 00:04:27.430
So we're going to be trying to share the react and react.

79
00:04:27.430 --> 00:04:29.050
Dom if it is already present.

80
00:04:29.620 --> 00:04:31.270
So I'll say react, react, done.

81
00:04:31.960 --> 00:04:36.730
Now redacting this, I also need to be creating the bootstrap application for my movie app.

82
00:04:37.300 --> 00:04:45.790
So let's just go on the ACR C folder, lets right click and see new file and let's call this at Bootstrap

83
00:04:45.790 --> 00:04:53.560
dot d's as usual, just cut all the logic that is there in your indexed ideas, paste it in your bootstrap

84
00:04:53.560 --> 00:05:01.240
Georges and just call your bootstrap file from the index file side of the import dart slash bootstrap.

85
00:05:02.200 --> 00:05:07.030
You can also notice I do not need that dodgy extension here because by default it will be picking up

86
00:05:07.030 --> 00:05:09.940
Dodgers only if the file type is different.

87
00:05:09.940 --> 00:05:10.180
Maybe.

88
00:05:11.020 --> 00:05:13.060
Then you need to be specifying the extension.

89
00:05:14.080 --> 00:05:14.410
Okay.

90
00:05:14.410 --> 00:05:17.740
So I just saved that file and I'm just going to be stopping myself.

91
00:05:17.950 --> 00:05:22.060
The movie application server so that it picks up the change we did in the back.

92
00:05:22.720 --> 00:05:25.450
So let's stop that and try to underscore once again.

93
00:05:27.540 --> 00:05:31.560
And this time we get the error that the regenerator run time is not defined.

94
00:05:31.890 --> 00:05:34.800
Now, this is basically because of the Babel polypill.

95
00:05:34.860 --> 00:05:39.180
And if I just check out what the configuration on my movie application.

96
00:05:39.600 --> 00:05:43.950
So in our bootstrap logs, we do not have that label polypill imported here.

97
00:05:44.160 --> 00:05:45.960
And that's exactly why we're facing this error.

98
00:05:46.440 --> 00:05:51.210
So I just come here and I say import, and then we can see at Babel.

99
00:05:51.660 --> 00:05:53.820
And I don't have Babel pilot or here.

100
00:05:53.850 --> 00:05:55.470
So let's just go ahead and install that.

101
00:05:56.070 --> 00:06:01.680
So let me just stop my solo once and say NPM install, dash to save.

102
00:06:02.100 --> 00:06:06.420
And here I'll put it as Babel slash by lethal.

103
00:06:07.630 --> 00:06:08.020
All right.

104
00:06:08.620 --> 00:06:10.720
So just get that library installed.

105
00:06:11.170 --> 00:06:13.660
So once you have that installed, we can go ahead and import it.

106
00:06:14.140 --> 00:06:15.730
So I'd say import at Babel.

107
00:06:17.140 --> 00:06:21.040
And once you have that, save the file and tried to start of this hour once again.

108
00:06:21.730 --> 00:06:23.110
So I say npm ran of.

109
00:06:26.110 --> 00:06:31.600
And this time you see that our application indeed loads of and this time it is in the main application

110
00:06:31.600 --> 00:06:35.680
that is our movie app in which we are actually loading the and that homepage application.

111
00:06:36.040 --> 00:06:40.950
We can verify that by going to the inspect tab and we should be seeing two networks.

112
00:06:40.960 --> 00:06:45.700
So if I just go to resources, so we have multiple servers from where all the data is coming in.

113
00:06:46.120 --> 00:06:49.300
We have a port 9000, which is our main movie application.

114
00:06:49.480 --> 00:06:55.090
So the application running on port number 3002, if I'm not wrong, it is this movie card application.

115
00:06:55.090 --> 00:07:00.730
So the entire homepage application, then we also got this port number five, five, five, five and

116
00:07:00.730 --> 00:07:05.590
this is from where we're getting the main node so is running and we're pulling down the page from there.

117
00:07:06.220 --> 00:07:10.810
So as you can see, a lot of coordination is happening between the application and this is the true

118
00:07:10.810 --> 00:07:12.340
power of micro frontend.

119
00:07:12.880 --> 00:07:16.300
So I'm really excited about this and I'm going to be taking it more further.

120
00:07:16.300 --> 00:07:18.250
And what are we setting up the different routes as well.

121
00:07:18.640 --> 00:07:23.620
So right now if I just go to the other out, for example, the devs wrote it does not really have anything.

122
00:07:23.950 --> 00:07:25.870
So let's just go ahead and fix that as well.
