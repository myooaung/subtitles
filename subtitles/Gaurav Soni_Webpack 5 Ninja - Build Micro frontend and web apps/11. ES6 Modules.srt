1
00:00:04,230 --> 00:00:04,950
Welcome back.

2
00:00:05,400 --> 00:00:07,230
You continue on from the last video.

3
00:00:07,560 --> 00:00:12,600
In the last year, we had created couple of functions and we exported them using the module dot exports.

4
00:00:13,020 --> 00:00:17,790
Now we're going to be moving on to the newer format, which is the S6 format of using the import and

5
00:00:17,790 --> 00:00:18,690
export keyword.

6
00:00:19,050 --> 00:00:20,400
So let's see how that works.

7
00:00:20,910 --> 00:00:23,910
Now we're going to be just transforming all the things that we had done earlier.

8
00:00:24,360 --> 00:00:26,970
So we more to the actor just fighting.

9
00:00:27,000 --> 00:00:32,790
Now, when we want to be exporting, using the ES6 format instead of putting module or export, you

10
00:00:32,820 --> 00:00:38,160
will say export default, and then you put up the name of the function.

11
00:00:38,550 --> 00:00:39,990
So that's pretty much it.

12
00:00:40,590 --> 00:00:43,980
So this is how you're going to be exporting using the ESX format.

13
00:00:44,280 --> 00:00:48,240
So let me just go ahead and do the same thing for this attract file as well.

14
00:00:48,630 --> 00:00:50,850
So remove all of this and see.

15
00:00:52,010 --> 00:00:55,370
Export default and then subtract.

16
00:00:56,810 --> 00:00:57,220
All right.

17
00:00:57,230 --> 00:00:58,310
So that is done.

18
00:00:58,400 --> 00:01:00,940
Let me close both of this hard and subtract.

19
00:01:00,950 --> 00:01:03,260
And let's head over to our main roads.

20
00:01:03,890 --> 00:01:08,090
Now, whenever you want to be importing these functions, using the import keyword.

21
00:01:08,570 --> 00:01:15,410
So what you're going to be doing is you say import ad from and then the name of the file.

22
00:01:15,470 --> 00:01:18,140
So in this case, the file name is Slash and.

23
00:01:19,490 --> 00:01:19,850
Okay.

24
00:01:19,850 --> 00:01:21,350
So that is pretty much it.

25
00:01:21,440 --> 00:01:24,500
Let me just quickly remove this from here.

26
00:01:25,570 --> 00:01:26,750
Well, actually, we can keep this.

27
00:01:26,770 --> 00:01:32,680
We can just remove and make it as and remove this additional function that we created earlier and remove

28
00:01:32,680 --> 00:01:33,430
the function call.

29
00:01:34,450 --> 00:01:36,790
So that is all the change that you have to do.

30
00:01:37,270 --> 00:01:40,240
But if you try to execute this right now, let's see what happens.

31
00:01:40,960 --> 00:01:42,960
So I'm going to be again running the same thing.

32
00:01:42,970 --> 00:01:43,810
Node means mean.

33
00:01:43,930 --> 00:01:45,760
Just make sure you are in the right folder.

34
00:01:46,360 --> 00:01:49,420
So once you have that go, nothing works.

35
00:01:49,750 --> 00:01:50,650
Well, why is that?

36
00:01:51,130 --> 00:01:55,480
Well, because the import keyword is not understood natively by Node.js.

37
00:01:55,930 --> 00:02:01,440
Node.js only understands the common JS format by default, and we need to sort of teach Node.js.

38
00:02:01,450 --> 00:02:04,330
How do we dealing with all this import and export keywords?

39
00:02:04,840 --> 00:02:06,490
Now this observer back comes in.

40
00:02:06,940 --> 00:02:11,550
Now, if you have used React or Angular, you might be very familiar with the import and export keywords.

41
00:02:11,830 --> 00:02:16,120
And generally you'll be having some sort of compiler behind the scene, which is going to be helping

42
00:02:16,120 --> 00:02:20,830
to compile all of the import and export keywords to the native format with JavaScript.

43
00:02:20,830 --> 00:02:21,460
Understand.

44
00:02:22,180 --> 00:02:25,210
Alright, to be fixing this, we are going to be creating of a pack file.

45
00:02:25,450 --> 00:02:30,010
Now I would highly advise you to go ahead and create the pack file with me because this is going to

46
00:02:30,010 --> 00:02:34,000
be helping you understand and revise SteveA pack concepts again and again.

47
00:02:34,600 --> 00:02:38,080
So what we need to be creating the web back file acted all of our folder.

48
00:02:38,090 --> 00:02:42,050
So in this case the two dot module is our root folder.

49
00:02:42,070 --> 00:02:47,530
So just right click here, give it a file name as Webpack, not config digests.

50
00:02:48,340 --> 00:02:48,880
All right.

51
00:02:49,240 --> 00:02:54,130
Now we're going to be using the format we had seen in the last video, which is the common format for

52
00:02:54,130 --> 00:02:55,420
exporting the modules.

53
00:02:55,420 --> 00:03:00,490
So it's a module not exports equals to an object.

54
00:03:00,970 --> 00:03:05,350
Now in this, we need to be giving the two key perimeters most of the entry.

55
00:03:05,920 --> 00:03:09,340
And in this case, the entry is dot slash.

56
00:03:10,600 --> 00:03:12,340
Mean Darth Jesus.

57
00:03:13,840 --> 00:03:14,200
Okay.

58
00:03:14,210 --> 00:03:16,860
And we also need to be specifying the output.

59
00:03:16,870 --> 00:03:18,790
So output file name.

60
00:03:19,300 --> 00:03:22,300
And the second thing we need to be specifying is the path.

61
00:03:22,930 --> 00:03:26,800
So we'll say path and we need to be importing that port module.

62
00:03:27,160 --> 00:03:31,210
So again, milliseconds apart equals to require.

63
00:03:32,300 --> 00:03:32,750
But.

64
00:03:33,050 --> 00:03:33,530
All right.

65
00:03:34,720 --> 00:03:35,170
Now.

66
00:03:35,170 --> 00:03:39,910
If you do not really understand the concept of part, I would hardly advise you to go to the section

67
00:03:39,940 --> 00:03:43,630
of JavaScript introduction in which you are going to be discussing this part module.

68
00:03:44,630 --> 00:03:44,980
Okay.

69
00:03:44,990 --> 00:03:49,400
Now we have the part module exported so we can see but not resolve.

70
00:03:49,970 --> 00:03:54,410
And in this filter directory name, this is underscore two times.

71
00:03:55,010 --> 00:03:57,910
And then we put up a comma and see this.

72
00:03:59,080 --> 00:03:59,470
All right.

73
00:03:59,470 --> 00:04:01,410
And we are going to be giving the filing.

74
00:04:01,420 --> 00:04:05,560
So let's call this as bundle, Lord, Lord Code.

75
00:04:06,220 --> 00:04:07,270
So that's done.

76
00:04:07,660 --> 00:04:13,180
Now, since we have the part, we also need to be initializing this as a NPM repository.

77
00:04:13,630 --> 00:04:18,610
So what I would do is again, going back to our two modules, we need to be initializing this, so I'll

78
00:04:18,610 --> 00:04:19,810
see NPM in it.

79
00:04:20,090 --> 00:04:21,190
BASH Why?

80
00:04:22,800 --> 00:04:23,430
Okay.

81
00:04:23,460 --> 00:04:26,370
So our NPM repository is now initialized.

82
00:04:26,400 --> 00:04:34,410
Now we can install the mandatory dependencies against NPM, install that and PMI in chart and dash dash

83
00:04:34,740 --> 00:04:35,850
save dev.

84
00:04:36,270 --> 00:04:38,460
So it's going to be saving it as a dev dependency.

85
00:04:38,460 --> 00:04:42,720
And the two dependency that we need is Webpack and Webpack Theola.

86
00:04:44,730 --> 00:04:47,010
Let's give it a quick minute to install.

87
00:04:47,640 --> 00:04:48,060
All right.

88
00:04:48,420 --> 00:04:50,160
Both the dependencies are now installed.

89
00:04:50,490 --> 00:04:53,940
Now, what we can be doing is we can be start running this back file.

90
00:04:54,420 --> 00:04:59,310
Now, last time we ran the web back file, we went to the package or Jason and created some script to

91
00:04:59,310 --> 00:05:00,450
run the Web back file.

92
00:05:00,780 --> 00:05:03,210
Let me show you another way of running the Web packed file.

93
00:05:03,720 --> 00:05:08,970
So instead of using the script in the package or Jason, we are going to be using this here for running

94
00:05:08,970 --> 00:05:09,570
the Web back.

95
00:05:10,080 --> 00:05:11,310
Now, how do you run this relay?

96
00:05:11,610 --> 00:05:14,460
Well, you can just see and be exe that back.

97
00:05:14,970 --> 00:05:17,730
And in this we can pass in the configuration file.

98
00:05:17,760 --> 00:05:24,900
So I'll just put in a dash dash config and the file is that back door config dot.

99
00:05:25,200 --> 00:05:25,770
Yes.

100
00:05:26,910 --> 00:05:27,270
All right.

101
00:05:27,270 --> 00:05:29,850
So this is the first parameter that we need to be passing.

102
00:05:29,850 --> 00:05:32,640
The second parameter we need to be passing is the mode.

103
00:05:33,030 --> 00:05:36,390
So we'll say mode as development.

104
00:05:36,990 --> 00:05:41,670
So this is exactly the thing that we had written in our package, not Jason earlier, but now instead

105
00:05:41,670 --> 00:05:44,590
of writing it or whatever, just running it as a command.

106
00:05:45,180 --> 00:05:48,840
Now let's click on and don't make sure you are in the right folder once again.

107
00:05:52,220 --> 00:05:52,580
Okay.

108
00:05:52,580 --> 00:05:58,650
So as you can see, I made up a mistake in my package and my configuration of a pack solicitors booklet.

109
00:05:58,700 --> 00:05:59,600
Go and fix that.

110
00:06:00,110 --> 00:06:04,070
Now I'm just doing all of this life and I will make mistakes.

111
00:06:04,070 --> 00:06:05,660
And I hope you learn from my mistakes.

112
00:06:06,140 --> 00:06:10,340
I like what a mistake I did over here is we created an object and added a semicolon.

113
00:06:10,340 --> 00:06:12,380
So you cannot have semicolons in an object.

114
00:06:12,380 --> 00:06:13,490
So let's remove that.

115
00:06:14,150 --> 00:06:14,960
Save the file.

116
00:06:15,560 --> 00:06:17,840
Clear the console and run that once again.

117
00:06:19,550 --> 00:06:19,930
All right.

118
00:06:19,940 --> 00:06:20,570
That is done.

119
00:06:20,570 --> 00:06:22,640
We can see that it compiles successfully.

120
00:06:22,670 --> 00:06:29,460
If we have the disk folder in that, we have the bundle dogs now to be running this, we can just see

121
00:06:29,480 --> 00:06:32,740
Node and we can go to the folder called List.

122
00:06:32,780 --> 00:06:34,430
And in that we have the bundle.

123
00:06:34,610 --> 00:06:36,590
So we'll say slash bundle radius.

124
00:06:37,490 --> 00:06:37,940
Awesome.

125
00:06:37,950 --> 00:06:39,860
Now we can see the output is three.

126
00:06:40,010 --> 00:06:46,400
And if I go to my main file, you can see that we are now running using the import and the export keyword.

127
00:06:46,730 --> 00:06:51,170
Now the pack knows exactly how to be handling all this import and export and it's not really dependent

128
00:06:51,170 --> 00:06:52,540
on what Node knows.

129
00:06:53,570 --> 00:06:53,990
Cool.

130
00:06:53,990 --> 00:06:58,880
So we learn something really exciting and new and this is all happening behind the scene and I hope

131
00:06:58,880 --> 00:07:01,910
now you understand how things happen behind the scene, which is very important.

132
00:07:02,780 --> 00:07:05,300
Okay, one more thing I would like to show you.

133
00:07:05,330 --> 00:07:11,000
Let's head over to our files so we have the functions add and subtract.

134
00:07:11,360 --> 00:07:17,510
Now, similar to how we are exported named export in the required order, we can also do it in the newer

135
00:07:17,510 --> 00:07:19,040
format, which is ESX format.

136
00:07:19,310 --> 00:07:20,480
So let's see how that works.

137
00:07:20,930 --> 00:07:26,440
Now if I want to be doing that, what I will do is let's probably do it from the index dojo system.

138
00:07:26,870 --> 00:07:29,690
So we are going to be replacing all this required with import.

139
00:07:30,020 --> 00:07:40,070
So I can say import add from add and import subtract from the local file.

140
00:07:40,070 --> 00:07:40,700
Subtract.

141
00:07:41,690 --> 00:07:42,920
One more point to note here.

142
00:07:42,920 --> 00:07:44,240
We do not really add.

143
00:07:44,240 --> 00:07:46,550
The dog's extension goes by default.

144
00:07:46,820 --> 00:07:48,830
It takes it as Dodger's file.

145
00:07:49,700 --> 00:07:53,470
Okay, now as we learn to live, we are not going to be using module that export and we're going to

146
00:07:53,470 --> 00:07:55,040
be writing here as export.

147
00:07:55,820 --> 00:07:59,710
And this time we are not going to be putting up the default keywords.

148
00:07:59,720 --> 00:08:03,800
Instead we are just going to be putting up object and say add, comma, subtract.

149
00:08:04,840 --> 00:08:05,960
So that's pretty much it.

150
00:08:05,980 --> 00:08:11,370
Now, if I go back to I mean, Dodgers file, I'm not going to be importing it from the file as percent.

151
00:08:11,530 --> 00:08:13,510
Instead we'll say import.

152
00:08:14,350 --> 00:08:19,450
And then we have the named imports from Dada slash functions.

153
00:08:20,410 --> 00:08:20,790
All right.

154
00:08:20,800 --> 00:08:21,970
That's pretty much it.

155
00:08:22,100 --> 00:08:24,220
And they can have the ad right here.

156
00:08:25,180 --> 00:08:31,840
Now, if I just compile my file using the pack once again so we can see using the CLIA.

157
00:08:33,330 --> 00:08:35,030
So is our client executed?

158
00:08:35,040 --> 00:08:42,720
Now, if I type in our run commands so I can say node and just slash bundle dogs.

159
00:08:43,200 --> 00:08:45,180
Alright, things still work as expected.

160
00:08:45,720 --> 00:08:51,030
Now let's suppose you going to be importing all of the functions that are exported by this, you know,

161
00:08:51,030 --> 00:08:52,970
functions our indexed ideas.

162
00:08:52,980 --> 00:08:53,670
How do you do that?

163
00:08:54,180 --> 00:09:00,270
So what you can do for that is you can be removing all of this and say import star as.

164
00:09:00,800 --> 00:09:04,050
Let's suppose I want to be giving this alias name as maybe a dollar sign.

165
00:09:04,050 --> 00:09:04,500
Why not?

166
00:09:05,130 --> 00:09:07,380
So once I have that done.

167
00:09:07,620 --> 00:09:13,140
So what I can do now is instead of saying just add, I can say dollar dot.

168
00:09:13,290 --> 00:09:19,230
And so basically we are aliasing the all the functions that are there in that library to a dollar sign

169
00:09:19,230 --> 00:09:23,760
and then we are saying dollar on that object and then calling the function called ADD.

170
00:09:24,360 --> 00:09:30,330
So things should still work as expected, running the CLIA once again, clearing the console and saying

171
00:09:30,330 --> 00:09:34,470
Node well and as you can see, things still work as expected.

172
00:09:35,220 --> 00:09:37,340
So that is pretty much about it.

173
00:09:37,350 --> 00:09:43,980
All the basics about the new format, the six format, and this is going to be very useful irrespective

174
00:09:43,980 --> 00:09:49,050
of what they are using, whether you're using for Webpack or maybe for some other project that is dependent

175
00:09:49,050 --> 00:09:50,730
on modules of JavaScript.

176
00:09:51,300 --> 00:09:54,810
Alright, let's take a short break and continue on in the next video.
