WEBVTT
1
00:00:04.030 --> 00:00:06.550
Hey, guys, welcome to our first video on Web Back.

2
00:00:06.910 --> 00:00:12.010
In this video, let's see what exactly is Webpack, what is the problem that is trying to solve and

3
00:00:12.010 --> 00:00:15.640
what are the facilities or the tools that were available before Webpack?

4
00:00:15.760 --> 00:00:18.070
How the website used to function before that back.

5
00:00:19.120 --> 00:00:19.540
All right.

6
00:00:19.540 --> 00:00:21.940
So let's see the good old days now.

7
00:00:21.940 --> 00:00:26.500
In the good old days, let's take the example of a website called as awesome website dot com.

8
00:00:26.950 --> 00:00:33.310
In this we created multiple JavaScript files, so you have your warmed ideas, admin copy and so on.

9
00:00:33.910 --> 00:00:40.420
We also had a lot of styling files represented by the thesis files here, so we have the home bootstrap

10
00:00:40.420 --> 00:00:45.760
admin, CSS files and all this used to be loaded on the activity document.

11
00:00:45.760 --> 00:00:51.400
So used to have a lot of script tags and link tags floating around and that is how the things used to

12
00:00:51.400 --> 00:00:52.930
loaded on the email file.

13
00:00:53.650 --> 00:00:56.980
Now everything used to work, but there were a lot of problems with it.

14
00:00:58.520 --> 00:01:01.280
The first and the major problem was the network load.

15
00:01:01.790 --> 00:01:05.420
Since you have a lot of files and not a very good internet connection.

16
00:01:05.450 --> 00:01:09.050
It used to take a lot of time to load the resources from the Internet.

17
00:01:09.860 --> 00:01:14.900
They were also difficult to manage because all the import statement were in the single estimate file

18
00:01:15.170 --> 00:01:20.240
and sometimes even messing up the order of the import statement used to bring down the website.

19
00:01:21.280 --> 00:01:27.040
Then we had another approach, which was a lesser phased approach in which we had a single Jia's files

20
00:01:27.340 --> 00:01:28.870
on multiple bigger files.

21
00:01:29.320 --> 00:01:34.600
So this helped reducing the network load because the website does not have to go to this or every time

22
00:01:34.600 --> 00:01:37.030
any of the resources have to be loaded.

23
00:01:37.510 --> 00:01:39.520
And you also had like an external file.

24
00:01:39.970 --> 00:01:45.290
So the external file contained data regarding the external resources, such as your bootstrap or the

25
00:01:45.320 --> 00:01:46.300
adequately library.

26
00:01:47.110 --> 00:01:50.110
Now this was slightly better, but it was not perfect.

27
00:01:50.500 --> 00:01:55.840
There were a couple of drawbacks to this as well, and the main drawback was the difficulty to debug

28
00:01:55.840 --> 00:01:58.570
devices because the file size had exploded.

29
00:01:58.780 --> 00:02:00.420
And it was also difficult to read.

30
00:02:00.430 --> 00:02:04.630
So any new developer coming in used to find it very difficult to go through these files.

31
00:02:05.440 --> 00:02:09.370
There was the challenges maintaining the scope of your variables in that file.

32
00:02:09.940 --> 00:02:12.400
Now let's take the example of G equity.

33
00:02:12.700 --> 00:02:15.940
So I have opened up G equity was in one in one of the tabs here.

34
00:02:16.330 --> 00:02:20.650
So as you can see, this is version one on GitHub released back in 2006.

35
00:02:21.250 --> 00:02:25.660
Now, the main thing that I would like to show you over here is this claim document is your g equity

36
00:02:25.660 --> 00:02:29.530
dot years and it consists of 2674 lines.

37
00:02:29.980 --> 00:02:33.130
So all of the equity functions were bundled into a single file.

38
00:02:33.430 --> 00:02:36.460
So if I scroll down, we can see that we have like a filter function.

39
00:02:36.880 --> 00:02:40.420
If we scroll more down, you can see that we have like this each function.

40
00:02:40.840 --> 00:02:44.290
So this is basically how they were maintaining code in the equity was in one.

41
00:02:44.830 --> 00:02:48.430
Now things have improved a lot if you move on to the latest version of the equity.

42
00:02:48.430 --> 00:02:52.480
So I'm in the main branch and this was committed just nine days ago.

43
00:02:52.990 --> 00:02:59.260
And if you see this particular file, you can see that if you go to the ASIC and in the code folder,

44
00:02:59.830 --> 00:03:04.570
we have a lot of JavaScript file and everything has been organized in a very modular way.

45
00:03:05.170 --> 00:03:08.220
Now the equity does not really use their baffle bundling.

46
00:03:08.230 --> 00:03:10.690
Instead they use another tool called as grunt.

47
00:03:10.720 --> 00:03:16.420
So if I go back to the home folder and we can see that we have like a granddaddy's file, this is used

48
00:03:16.420 --> 00:03:18.220
for bundling in the case of the equity.

49
00:03:19.420 --> 00:03:19.750
All right.

50
00:03:19.750 --> 00:03:24.460
So this was just a brief of how difficult it used to function and how the good old days were.

51
00:03:25.060 --> 00:03:26.230
Things improved a lot.

52
00:03:26.260 --> 00:03:31.090
So if you go to the bottom, we can see that there were the concept of modules introduced.

53
00:03:31.810 --> 00:03:38.320
Now this gave birth to a pattern called as the common JS module pattern in which we had a very unique

54
00:03:38.320 --> 00:03:39.700
keyword called as required.

55
00:03:40.510 --> 00:03:45.100
Using the required keyword, we were able to import the call from one file to another file.

56
00:03:45.490 --> 00:03:51.280
So, for example, if I wanted some code of the Edmonds years, I could be exporting it from here and

57
00:03:51.280 --> 00:03:53.440
importing it into the home dogs file.

58
00:03:53.980 --> 00:03:57.700
And this really improved the modularity of your entire code base.

59
00:03:58.300 --> 00:04:03.390
We were able to import modules, share code, and reduce the dependencies among the files.

60
00:04:04.830 --> 00:04:05.160
All right.

61
00:04:05.160 --> 00:04:07.860
So there was also another problem with this approach.

62
00:04:08.310 --> 00:04:13.710
Now, you were using this unique keyword called REQUIR, but in a browser, our browser did not understand

63
00:04:13.710 --> 00:04:17.280
what to be doing with this required keyword now to resolve that problem.

64
00:04:17.610 --> 00:04:21.780
There were tools introduced such as called the browser file all the required years.

65
00:04:22.230 --> 00:04:27.510
These tools were able to understand the required keyword, build up the dependencies and make it readable

66
00:04:27.540 --> 00:04:28.740
to your web browser.

67
00:04:29.490 --> 00:04:33.480
So this was how the module pattern begin in the world of the browsers.

68
00:04:34.680 --> 00:04:35.030
All right.

69
00:04:35.040 --> 00:04:38.040
Moving forward, we have got that back finally.

70
00:04:38.490 --> 00:04:42.210
Now, that park was a very blown up version of the modules.

71
00:04:42.690 --> 00:04:45.570
We were able to work with different kind of module types.

72
00:04:45.570 --> 00:04:50.340
You will be able to work with the common JS modules as well as with the ES6 modules.

73
00:04:51.000 --> 00:04:56.220
Now we were also able to use different kind of file formats to be imported in your JavaScript file.

74
00:04:57.000 --> 00:05:00.090
You can use your JavaScript file itself to be imported.

75
00:05:00.300 --> 00:05:03.510
You can be loading your styles, images as well as font.

76
00:05:05.190 --> 00:05:09.390
There were also additional functionality that was provided by Webpack, which were very appealing.

77
00:05:09.960 --> 00:05:15.330
We had the dynamic building of the dependency graph, so that PAC was really able to understand, okay,

78
00:05:15.390 --> 00:05:19.500
what all the dependency that there and I mean my entire application.

79
00:05:19.770 --> 00:05:21.410
What are the files that are being used?

80
00:05:21.450 --> 00:05:23.070
Which are the files which are not used?

81
00:05:23.400 --> 00:05:25.950
All this was controlled using the dependency graph.

82
00:05:26.400 --> 00:05:29.910
You're going to be seeing a little bit more about the dependency graph in the future videos.

83
00:05:30.810 --> 00:05:34.050
There was also the removal of the unused gold from the library.

84
00:05:34.410 --> 00:05:40.150
So for example, if you take the example of the equity and we just use one function of equity now without

85
00:05:40.150 --> 00:05:41.520
Webpack, what is going to be happening?

86
00:05:41.520 --> 00:05:46.740
The entire codebase of the equity is going to be loaded in the browser without it being ever used.

87
00:05:47.160 --> 00:05:52.160
Now, if you're using tools like that, you can actually be removing a lot of dependencies and only

88
00:05:52.200 --> 00:05:55.350
loading the part that is required by your application.

89
00:05:56.320 --> 00:06:00.790
We also see that there's another important feature of removing the duplication of code.

90
00:06:01.450 --> 00:06:05.410
Now, let's say, for example, two of your files are using a particular library.

91
00:06:05.860 --> 00:06:10.060
Now, this file is going to be loaded multiple times in your browser, which is, again, a vestige

92
00:06:10.060 --> 00:06:11.410
of your network resources.

93
00:06:12.040 --> 00:06:12.770
And this is.

94
00:06:12.790 --> 00:06:15.870
Well, so this is one of the please remember pack chains.

95
00:06:15.880 --> 00:06:20.680
And it is going to be helping us removing all the duplication of the code and help share the duplicate

96
00:06:20.680 --> 00:06:22.510
code among multiple files.

97
00:06:23.320 --> 00:06:29.320
And finally, we also have another important feature that is requiring offsetting the modules at runtime.

98
00:06:30.010 --> 00:06:31.240
Now, what is this?

99
00:06:31.270 --> 00:06:36.160
This is basically, in short, the module federation, which is also a very important topic in this

100
00:06:36.160 --> 00:06:36.910
entire course.

101
00:06:38.130 --> 00:06:38.460
All right.

102
00:06:38.460 --> 00:06:39.780
So that is about it.

103
00:06:39.900 --> 00:06:43.950
Once you have all your back modules done, this is what we are going to be looking at.

104
00:06:44.220 --> 00:06:48.390
So you're going to be having your new website and this is going to be really optimized.

105
00:06:48.720 --> 00:06:51.720
You're going to be having multiple bundles, as you can see here.

106
00:06:52.110 --> 00:06:54.930
We have like a calculator bundle, which is also minified.

107
00:06:55.440 --> 00:07:00.810
We have you mean Dodger's bundle library and your courses is minified and compressed as well.

108
00:07:01.590 --> 00:07:03.520
And there's also important factor here.

109
00:07:03.540 --> 00:07:09.630
You can see that the unused dependencies is also clubbed as a separate file and it's not imported in

110
00:07:09.630 --> 00:07:13.470
the entire application, thus saving the space and your network resources.

111
00:07:14.510 --> 00:07:17.900
So I hope you get to understand as why we are using the.

112
00:07:18.500 --> 00:07:23.150
What are the features and the advantages that we're going to be getting after optimizing and building

113
00:07:23.150 --> 00:07:24.830
our application using Webpack?

114
00:07:25.100 --> 00:07:25.460
All right.

115
00:07:25.460 --> 00:07:27.150
So that's about it for this video.

116
00:07:27.170 --> 00:07:31.520
Let's take a short break and continue on in the next video and start setting up our system.

117
00:07:31.790 --> 00:07:33.830
Ready for the usage of Webpack.
