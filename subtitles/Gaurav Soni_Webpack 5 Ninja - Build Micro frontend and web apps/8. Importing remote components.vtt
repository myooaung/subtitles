WEBVTT
1
00:00:00.270 --> 00:00:00.930
Welcome back.

2
00:00:01.260 --> 00:00:05.670
In the last we did, we were able to load the data that we need for rendering all the movie cards,

3
00:00:05.970 --> 00:00:09.900
but we need to be importing this component into the homepage application.

4
00:00:10.140 --> 00:00:11.430
So let's see how that can be done.

5
00:00:11.910 --> 00:00:13.560
I'm going to be opening up my voice.

6
00:00:13.560 --> 00:00:13.890
Good.

7
00:00:14.250 --> 00:00:17.520
And let's open up our homepage, Florida.

8
00:00:17.910 --> 00:00:21.330
So let me just minimize all the other things so that we don't get confused.

9
00:00:21.660 --> 00:00:25.890
Now, in the homepage application, I have this web back configuration opened up right here.

10
00:00:26.490 --> 00:00:28.830
So we are going to be doing the same thing as before.

11
00:00:28.860 --> 00:00:31.200
We are going to be importing the module federation plugin.

12
00:00:31.560 --> 00:00:32.790
So as a concept.

13
00:00:34.220 --> 00:00:40.210
Then the collaborators equals to required and then we save our back guard container.

14
00:00:41.000 --> 00:00:42.650
So that seemed like before.

15
00:00:42.650 --> 00:00:45.170
And then we import the module federation plugin.

16
00:00:45.710 --> 00:00:48.440
Now, as usual, we need to also implement the configurations.

17
00:00:48.920 --> 00:00:55.220
So in the plug in section, I would say a new module federation plug in and pass in an object, and

18
00:00:55.220 --> 00:00:56.540
then we define the properties.

19
00:00:57.530 --> 00:00:59.030
The first property is the name.

20
00:00:59.480 --> 00:01:02.290
Now, in this case, I'm going to be giving this a name as home.

21
00:01:02.420 --> 00:01:03.640
So it's the homepage.

22
00:01:03.650 --> 00:01:04.160
That's right.

23
00:01:04.880 --> 00:01:06.110
So that's right there.

24
00:01:06.560 --> 00:01:07.970
And then we have the file name.

25
00:01:08.390 --> 00:01:09.920
Now, final name is going to be the same.

26
00:01:09.920 --> 00:01:12.150
That is remote entry dot.

27
00:01:12.200 --> 00:01:12.740
Yes.

28
00:01:13.250 --> 00:01:15.470
This is a convention that's followed across.

29
00:01:15.470 --> 00:01:17.750
And this is going to be following it here as well.

30
00:01:18.620 --> 00:01:19.010
Okay.

31
00:01:19.220 --> 00:01:21.570
So the same things are done so far.

32
00:01:21.590 --> 00:01:27.020
And last name, if you remember, we used a property called As Exposes when we wanted to expose any

33
00:01:27.020 --> 00:01:27.770
of the components.

34
00:01:28.160 --> 00:01:33.380
Now, when you want to be importing, unfortunately, it's not called as import, but it's called as

35
00:01:33.390 --> 00:01:33.890
remote.

36
00:01:34.250 --> 00:01:36.350
So we have the remote section here.

37
00:01:36.980 --> 00:01:38.870
Now, remote is again going to be an object.

38
00:01:39.200 --> 00:01:44.060
And in the object we are going to be defining the keeper of the remote that we are going to use.

39
00:01:44.540 --> 00:01:51.110
So in this case, the remote is component and we need to think where is this component coming from?

40
00:01:51.530 --> 00:01:57.530
Now, remember, if I just open up the React components and if I just open up the configuration file

41
00:01:57.530 --> 00:02:04.430
here so that back config, we were running this application on the port 3002 and if I just go to the

42
00:02:04.430 --> 00:02:07.820
browser, we go to the port number 3002.

43
00:02:08.660 --> 00:02:09.480
That's right there.

44
00:02:09.500 --> 00:02:12.020
We had the React component application running here.

45
00:02:12.440 --> 00:02:16.880
And if I just put up a slash and say remote and radius, we had the remote.

46
00:02:16.880 --> 00:02:22.100
And if I look at it here now, this is the exact location that you need to be using when you want to

47
00:02:22.100 --> 00:02:24.410
be importing any of the remote applications.

48
00:02:24.860 --> 00:02:32.150
So I just take control C and go back to my configuration and in the remote or here I'm pasting that

49
00:02:32.210 --> 00:02:32.780
over here.

50
00:02:33.380 --> 00:02:35.030
So we are seeing we're defining remote.

51
00:02:35.390 --> 00:02:40.190
The name of the remote is going to be called as component and this is the location of the component.

52
00:02:40.700 --> 00:02:43.020
Now, there's just one more thing that we need to define here.

53
00:02:43.040 --> 00:02:47.930
That is the name of this remote or name of this application where this remote is located.

54
00:02:48.470 --> 00:02:51.340
Now we're just going back to the React components, Webpack config.

55
00:02:51.770 --> 00:02:58.730
We had given this a name as component, so I can just copy this name component, come back to my home

56
00:02:58.730 --> 00:03:01.400
page configuration and paste it right here.

57
00:03:01.880 --> 00:03:03.800
Then we need to put up actor ID.

58
00:03:04.430 --> 00:03:10.180
So we are saying the name of the application is component, which is hosted at this location.

59
00:03:10.190 --> 00:03:13.250
So this is the remote entry of this component application.

60
00:03:14.250 --> 00:03:17.350
Now the key that is defined here component can be anything.

61
00:03:17.580 --> 00:03:19.020
It can be called a component.

62
00:03:19.020 --> 00:03:22.670
It can be called as react component as you wish.

63
00:03:22.680 --> 00:03:23.850
So it does not really matter.

64
00:03:24.300 --> 00:03:27.780
Just do remain consistent so that we do not have to keep coming back in front.

65
00:03:27.780 --> 00:03:29.820
I'm just going to be keeping it the same.

66
00:03:29.820 --> 00:03:36.150
So I'm just going to be calling this as a component, and that's pretty much it for setting up a remote.

67
00:03:36.960 --> 00:03:39.820
Okay, so now we need to be using this component, right?

68
00:03:39.840 --> 00:03:41.580
We need to be using it in our homepage.

69
00:03:41.970 --> 00:03:45.790
So if I just scroll up, open up this home content dot.

70
00:03:46.980 --> 00:03:52.980
So this is in our homepage application and if I just scroll down, I have put up a comment where we

71
00:03:52.980 --> 00:03:55.290
need to be loading this movie card component.

72
00:03:55.710 --> 00:03:57.540
So let me just make this a bit smaller.

73
00:03:57.540 --> 00:03:58.710
So we have place to work with.

74
00:03:59.830 --> 00:04:00.140
Okay.

75
00:04:00.280 --> 00:04:04.570
Now, things are going to get a little bit confusing, but let me try to explain what happens.

76
00:04:05.110 --> 00:04:07.000
So we need to be using the component, right?

77
00:04:07.000 --> 00:04:09.070
So that for that, we need to be importing it first.

78
00:04:09.370 --> 00:04:14.140
So, for example, we have this quick booking component which is created within the same application.

79
00:04:14.140 --> 00:04:17.740
So we just say import, quick booking, and we specify the location.

80
00:04:18.310 --> 00:04:23.680
But in case of remote components which are loaded dynamically from under the application, we do not

81
00:04:23.680 --> 00:04:26.950
really know when this is going to be responding with that component.

82
00:04:26.950 --> 00:04:27.250
Right.

83
00:04:27.790 --> 00:04:29.230
This is all asynchronous.

84
00:04:29.560 --> 00:04:33.640
So for that reason, we need to be loading this component also in a asynchronous manner.

85
00:04:33.970 --> 00:04:35.320
So in React, how do you do that?

86
00:04:35.830 --> 00:04:38.080
Well, for that, we are going to say convert.

87
00:04:39.110 --> 00:04:40.130
Movie card.

88
00:04:41.140 --> 00:04:42.790
Equals to react.

89
00:04:43.920 --> 00:04:45.170
Dot levy.

90
00:04:45.570 --> 00:04:50.100
So react not lazy head starts to load components which are loaded dynamically.

91
00:04:50.580 --> 00:04:52.830
So in here what are we passing in a function?

92
00:04:52.950 --> 00:04:54.720
So we'll see a function.

93
00:04:55.050 --> 00:04:56.130
That's the arrow function.

94
00:04:56.550 --> 00:04:58.230
And in here we'll say import.

95
00:04:58.920 --> 00:05:01.380
And then we specify the location of the import.

96
00:05:01.890 --> 00:05:03.480
Now, how do we specify the location?

97
00:05:03.990 --> 00:05:08.730
For that, I'm just going to be opening up all that back configuration and the gsx side by side so that

98
00:05:08.730 --> 00:05:09.940
things don't get confusing.

99
00:05:09.960 --> 00:05:13.770
Let me minimize that and let's see how to be building this import part.

100
00:05:14.430 --> 00:05:17.940
Now, for building the import part, we need to specify a string for sure.

101
00:05:18.600 --> 00:05:20.070
And how do you build a string?

102
00:05:20.760 --> 00:05:25.050
So for building the string, we need to be coming to our homepage applications, webpack config.

103
00:05:25.410 --> 00:05:28.830
And in this we can see that we have specified a remote called component.

104
00:05:29.370 --> 00:05:31.260
So let me first of all, fix the spelling.

105
00:05:34.140 --> 00:05:34.470
Okay.

106
00:05:34.470 --> 00:05:35.400
So that looks better.

107
00:05:36.580 --> 00:05:41.650
And I'm just going to be saving this file and we need to copy this remote and put it right here.

108
00:05:42.340 --> 00:05:45.670
So now we have the remote start up from where we need to be loading the component.

109
00:05:45.970 --> 00:05:48.370
Then we need to specify the name of the component.

110
00:05:48.880 --> 00:05:50.590
So where do we find the name of the component?

111
00:05:50.770 --> 00:05:53.800
Well, that's in the React component, that file.

112
00:05:54.100 --> 00:05:55.930
So if I just go to that, that backfired.

113
00:05:56.470 --> 00:06:00.520
We can see that we're exposing two components from here, the movie card and the bi button.

114
00:06:00.910 --> 00:06:06.820
So let me just go ahead and copy this movie card and paste it right here.

115
00:06:07.660 --> 00:06:09.730
So make sure you have the format correct.

116
00:06:09.760 --> 00:06:14.200
We have the remote name Slash, then the movie car component name.

117
00:06:14.650 --> 00:06:17.440
And when you copy it, we do not need this dot slash.

118
00:06:17.440 --> 00:06:19.840
We just type in the name of the component directly.

119
00:06:20.830 --> 00:06:22.260
Okay, so we can do that.

120
00:06:22.270 --> 00:06:23.170
Save the file.

121
00:06:23.620 --> 00:06:25.540
Then we can start using this movie card.

122
00:06:26.800 --> 00:06:29.260
Let me make this better.

123
00:06:29.290 --> 00:06:31.450
We don't need to be refereeing both of these fights together.

124
00:06:31.450 --> 00:06:31.660
Now.

125
00:06:32.380 --> 00:06:33.800
Now, if I just scroll down.

126
00:06:34.390 --> 00:06:39.850
We had this place where we need to be loading this movie component so I can just remove this and start

127
00:06:39.850 --> 00:06:40.360
loading it.

128
00:06:40.780 --> 00:06:46.120
Now, generally, when you use a component, you just put it like a movie card and things should work,

129
00:06:46.120 --> 00:06:46.420
right?

130
00:06:46.960 --> 00:06:53.050
Well, since this is a dynamic component, React specifies a way of loading dynamic components.

131
00:06:53.230 --> 00:06:55.180
So you cannot just use it like this.

132
00:06:55.540 --> 00:07:00.340
So what do you need to do for that limit to be using a built in react component called suspense?

133
00:07:01.000 --> 00:07:02.920
So that suspense right there.

134
00:07:03.580 --> 00:07:07.330
And within the suspense, you need to be putting up this movie card component.

135
00:07:07.960 --> 00:07:10.990
So suspense need to be loaded from the React library.

136
00:07:11.020 --> 00:07:14.020
So once I did that, you can see it automatically loaded for me.

137
00:07:14.020 --> 00:07:14.470
My ID.

138
00:07:15.070 --> 00:07:20.140
So from react we are loading named import called suspense and we're using it right here.

139
00:07:20.980 --> 00:07:27.430
Now suspense also needs a mandatory parameter called fallback and that we are going to be specifying

140
00:07:27.430 --> 00:07:28.300
as null.

141
00:07:28.780 --> 00:07:31.330
Make sure you have the null within the code liberty sets.

142
00:07:31.870 --> 00:07:33.250
Now, what is this fallback?

143
00:07:33.490 --> 00:07:39.010
Well, basically to start, since this is a dynamic component, we do not really know exactly when this

144
00:07:39.010 --> 00:07:40.360
component is going to be loaded.

145
00:07:40.720 --> 00:07:44.470
So until then, you can just go ahead and use a component for fallback.

146
00:07:45.100 --> 00:07:47.770
Now, we are not going to be implementing that additional component.

147
00:07:47.770 --> 00:07:52.720
You can probably have on the component colluding, which is going to be shown to the time this movie

148
00:07:52.720 --> 00:07:53.950
component does not get loaded.

149
00:07:54.430 --> 00:07:56.530
But for simplicity, let's just keep it like this.

150
00:07:57.400 --> 00:07:57.700
Okay.

151
00:07:57.700 --> 00:08:03.700
Let me just see if this file and if I just open up my terminal, you can see that the application is

152
00:08:03.700 --> 00:08:05.260
failing this home page application.

153
00:08:05.590 --> 00:08:10.720
So it does not really understand what's happening because we have not yet reloaded our application after

154
00:08:10.720 --> 00:08:12.330
making the changes in the back.

155
00:08:12.940 --> 00:08:19.540
So I'm just going to stop this over by saying control C, then clear off my console and see NPM run

156
00:08:19.690 --> 00:08:21.250
search once again.

157
00:08:23.080 --> 00:08:23.590
Okay.

158
00:08:23.590 --> 00:08:26.620
Let's give that a second and congratulations.

159
00:08:26.620 --> 00:08:28.900
You have created your first micro frontend.

160
00:08:29.350 --> 00:08:35.260
Now this component is being loaded dynamically from this application hosted on port number 3002.

161
00:08:35.650 --> 00:08:41.350
So if I just clear that off and see that this is the exact component, now, you might have some trust

162
00:08:41.350 --> 00:08:42.010
issues at me.

163
00:08:42.010 --> 00:08:42.760
I understand.

164
00:08:43.000 --> 00:08:44.380
So let me prove that for you.

165
00:08:44.740 --> 00:08:46.780
So I'm just going to right click and see inspect.

166
00:08:47.260 --> 00:08:54.070
And if I go to the sources, we see that we have this application or this page load from couple of places.

167
00:08:54.430 --> 00:09:00.070
So we have this localhost 3000 in which we load this index.html file, we have this main bundle and

168
00:09:00.070 --> 00:09:00.970
the means, he says.

169
00:09:01.360 --> 00:09:06.640
And if you check, in the end, we also have a few things being loaded from the port number 3002 on

170
00:09:06.640 --> 00:09:08.290
which our react components add on.

171
00:09:08.680 --> 00:09:13.390
And in this we added three a remote entry and a couple of things related to the movie card.

172
00:09:13.660 --> 00:09:16.780
And we also have this vendor bundle, which also has a couple of things in there.

173
00:09:17.590 --> 00:09:17.950
Okay.

174
00:09:17.950 --> 00:09:22.840
Just to prove you additionally, what I'm going to do now is I'm going to open up my React component

175
00:09:22.840 --> 00:09:23.290
speech.

176
00:09:23.350 --> 00:09:30.100
So this is on port number 3002 and let's go to a code and let's open up the React components application.

177
00:09:30.910 --> 00:09:32.110
So that's right.

178
00:09:32.110 --> 00:09:33.880
Here we have the movie card.

179
00:09:34.360 --> 00:09:38.470
And in this, you can see that we have this title card as Avenger.

180
00:09:38.860 --> 00:09:40.330
So that is printed over here.

181
00:09:40.840 --> 00:09:42.490
I'm just going to be renaming this title.

182
00:09:42.490 --> 00:09:48.610
So let's make this maybe like Avengers two and let's see if that component and let's go back to a browser,

183
00:09:48.820 --> 00:09:54.610
give this a refresh so you can see that my component library has now been updated with the new title

184
00:09:54.610 --> 00:09:59.710
of Avengers two and the magical part or not so magical now since we know how it works.

185
00:10:00.070 --> 00:10:05.830
If I go to my port 3000, give it a refresh and we see that it also shows Avengers two.

186
00:10:06.280 --> 00:10:07.510
So that's really cool.

187
00:10:07.540 --> 00:10:11.650
Now I hope you are getting an idea of how much advantage is that of using micro frontend.

188
00:10:12.190 --> 00:10:16.210
So let's just take a short break and make sure that all the other cards are still being rendered.

189
00:10:16.220 --> 00:10:20.020
So right now things are just hardcoded, this image as well as the name of the movie.

190
00:10:20.260 --> 00:10:25.120
So we're going to be passing all of that data we got from the server to this component and make sure

191
00:10:25.120 --> 00:10:27.070
that things are rendered dynamically.
