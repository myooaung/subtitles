WEBVTT
1
00:00:00.180 --> 00:00:00.510
He goes.

2
00:00:00.510 --> 00:00:01.110
We'll come back.

3
00:00:01.110 --> 00:00:05.850
In the last video, we were successfully able to optimize our website using the split chunk plugin.

4
00:00:06.330 --> 00:00:09.090
Now we're going to be taking it one step further.

5
00:00:09.540 --> 00:00:12.660
So what I've done, all we heard is I've added a new functionality.

6
00:00:12.870 --> 00:00:15.330
So we have this button here called our C pricing.

7
00:00:15.990 --> 00:00:18.540
When you click on this button, you'll be seeing this pop up here.

8
00:00:18.900 --> 00:00:22.700
So it does not really show the pricing, but this is going to be sufficient for the demo.

9
00:00:22.710 --> 00:00:23.750
I would like to show it to you.

10
00:00:24.510 --> 00:00:24.870
All right.

11
00:00:24.880 --> 00:00:26.640
So what am I trying to prove over here?

12
00:00:26.880 --> 00:00:32.700
Well, if we try to inspect this current page and if I just go to the network tab, let's hit on refresh.

13
00:00:33.210 --> 00:00:38.370
Now, when I click on this see pricing plan, you can see that nothing really changed in my network.

14
00:00:38.730 --> 00:00:42.990
We just have three bundles loading in and that's how the entire page is getting loaded.

15
00:00:43.500 --> 00:00:48.540
Now this is great, but let's say, for example, this was a really complex button.

16
00:00:48.540 --> 00:00:52.860
You know, when you click on the button, you're loading some charting library of maybe some kind of

17
00:00:52.860 --> 00:00:55.170
heavy library that takes up a lot of resource.

18
00:00:55.620 --> 00:01:00.390
So in that case, what will happen is until the person has not really clicked on the button, you're

19
00:01:00.390 --> 00:01:02.790
simply loading all the resource in this bundle.

20
00:01:03.060 --> 00:01:04.480
So it does not really make sense, right?

21
00:01:04.500 --> 00:01:06.720
Maybe the person you want does not even click on this button.

22
00:01:07.140 --> 00:01:09.540
In that case, you're simply wasting your resources.

23
00:01:09.810 --> 00:01:14.640
So we want a solution wherein when I click on this button, only then the libraries that are required

24
00:01:14.640 --> 00:01:16.590
to show this component should be loaded.

25
00:01:17.040 --> 00:01:19.320
So how can we implement such a functionality?

26
00:01:20.280 --> 00:01:20.630
Okay.

27
00:01:20.640 --> 00:01:23.430
To implement this functionality, let's go to our coding section.

28
00:01:24.150 --> 00:01:24.480
Okay.

29
00:01:24.480 --> 00:01:25.020
I'm back in.

30
00:01:25.040 --> 00:01:26.130
Re is called nova.

31
00:01:26.130 --> 00:01:27.050
Following along with me.

32
00:01:27.060 --> 00:01:33.780
You will have to use this 8.74 to 8 points and folder contains the logic for showing this model window.

33
00:01:34.050 --> 00:01:36.220
It was not there in the previous folders.

34
00:01:36.780 --> 00:01:39.240
So for that reason, this use this 8.7 folder.

35
00:01:40.170 --> 00:01:40.540
Okay.

36
00:01:40.560 --> 00:01:46.140
In my case, I have used the 8.74 to as the base and I've replicated it in the 8.8, which I'm going

37
00:01:46.140 --> 00:01:48.600
to be writing and it's going to be containing this solution.

38
00:01:48.810 --> 00:01:49.770
What we're doing right now.

39
00:01:50.730 --> 00:01:51.150
Okay.

40
00:01:51.150 --> 00:01:52.380
So how do we proceed?

41
00:01:53.010 --> 00:01:55.440
Well, let's just have a look at what's happening here.

42
00:01:55.800 --> 00:01:59.520
Now, if I just open up the SRT and go to my index page.

43
00:02:00.120 --> 00:02:05.010
Now, in the index page, you can see that I've added a new functionality by adding this function called

44
00:02:05.010 --> 00:02:05.700
show model.

45
00:02:06.450 --> 00:02:10.210
If we just inspect what the show model does, it doesn't do a lot.

46
00:02:10.230 --> 00:02:11.700
It's basically a function.

47
00:02:12.150 --> 00:02:18.060
It's adding a couple of HTML elements on your page, and then you also have some click listeners, which

48
00:02:18.060 --> 00:02:20.220
is used for closing that particular window.

49
00:02:21.160 --> 00:02:21.490
Okay.

50
00:02:21.490 --> 00:02:22.050
So that's it.

51
00:02:22.060 --> 00:02:26.260
We are just exporting this function and it is being imported in this index dog years.

52
00:02:27.040 --> 00:02:33.370
Now when you click on this button, which was our CE pricing plan and when we click on their C pricing

53
00:02:33.370 --> 00:02:36.460
plan, that is when this particular block of code is called.

54
00:02:36.850 --> 00:02:41.500
So when you click on it, you are calling the show model and then users are adding some users to show

55
00:02:41.500 --> 00:02:42.460
the particular window.

56
00:02:42.790 --> 00:02:43.840
So nothing fancy here.

57
00:02:45.090 --> 00:02:45.410
Okay.

58
00:02:45.420 --> 00:02:47.640
So let's see how we can make it fancy, right?

59
00:02:48.120 --> 00:02:52.230
So in this, what I'm going to be doing is I'm going to be implementing dynamic inputs.

60
00:02:52.680 --> 00:02:56.070
Now federalism, I'm going to be removing the import that was there on top.

61
00:02:56.220 --> 00:02:58.440
So we do not need this as a no.

62
00:02:58.450 --> 00:03:02.600
So I'm just comment this out and instead we're going to be adding the import.

63
00:03:02.910 --> 00:03:05.040
As soon as we click on that button.

64
00:03:05.040 --> 00:03:07.560
So right now on this particular piece of code.

65
00:03:07.740 --> 00:03:11.100
So when we're clicking on the button, we're going to be importing that particular file, which was

66
00:03:11.100 --> 00:03:12.330
this chore model function.

67
00:03:12.570 --> 00:03:14.120
So how do we do that then?

68
00:03:14.130 --> 00:03:16.800
We're going to be changing the syntax of import a little.

69
00:03:16.830 --> 00:03:19.590
So just have a look first and then I'll explain it.

70
00:03:19.980 --> 00:03:23.120
So I say import and in this I'm what are we putting up?

71
00:03:23.160 --> 00:03:24.330
Dash Star.

72
00:03:24.330 --> 00:03:24.750
Star.

73
00:03:25.260 --> 00:03:26.940
So it's just going to be like a command block.

74
00:03:26.970 --> 00:03:33.360
So with just one stars on each of the ends and in this, we're going to be putting the name as that

75
00:03:33.360 --> 00:03:35.400
back junk name.

76
00:03:36.270 --> 00:03:37.830
That name is going to be capital.

77
00:03:38.310 --> 00:03:40.620
And in this, we give this junk a name.

78
00:03:40.950 --> 00:03:44.150
So, for example, let's call this junk a name as model.

79
00:03:44.880 --> 00:03:46.660
So that's going to be the junk name.

80
00:03:46.680 --> 00:03:50.340
And we also need to make sure that the junk name is in order, comma.

81
00:03:50.340 --> 00:03:52.590
So just put the double inverted commas here.

82
00:03:53.220 --> 00:03:53.520
All right.

83
00:03:53.520 --> 00:03:55.130
So we have given the name of the junk.

84
00:03:55.140 --> 00:03:58.080
Now we also need to specify the file that needs to be imported.

85
00:03:58.290 --> 00:04:00.330
So for that, we can just put up a space.

86
00:04:00.330 --> 00:04:02.130
Then again, have the inverted commas.

87
00:04:02.430 --> 00:04:06.570
And in this I'll say a dot slash component slash model.

88
00:04:07.560 --> 00:04:07.920
Okay.

89
00:04:07.920 --> 00:04:09.950
So this is what we are trying to import.

90
00:04:09.960 --> 00:04:13.080
And this is the name of the junk that Webpack is supposed to make.

91
00:04:13.830 --> 00:04:14.120
Okay.

92
00:04:14.130 --> 00:04:19.020
Now, the cool part of it is when we are using dynamic import, it returns a promise.

93
00:04:19.530 --> 00:04:23.190
A promise in JavaScript is a function that results after some time.

94
00:04:23.190 --> 00:04:25.320
So it's basically something like a web request.

95
00:04:25.590 --> 00:04:27.060
So it does not resolve immediately.

96
00:04:27.060 --> 00:04:28.410
It resolves after some time.

97
00:04:28.800 --> 00:04:31.380
So for resolving the promise, we use DART then.

98
00:04:31.740 --> 00:04:35.430
So that's what's written when the promise is returned successfully.

99
00:04:35.490 --> 00:04:38.550
And in here we want to be putting up as module.

100
00:04:39.240 --> 00:04:44.850
So what happens here is basically once the promise as a result is going to be returning the entire module.

101
00:04:45.270 --> 00:04:47.820
So that means it's returning this right here.

102
00:04:47.850 --> 00:04:49.980
So as you can see, this is what's returned.

103
00:04:51.270 --> 00:04:51.550
Okay.

104
00:04:51.570 --> 00:04:56.670
So once we have the module, we need to be getting this show module function right from this module.

105
00:04:57.060 --> 00:05:01.350
So what we'll do here is music concert show model.

106
00:05:02.450 --> 00:05:05.420
Equals to module dot default.

107
00:05:06.410 --> 00:05:06.770
Okay.

108
00:05:06.770 --> 00:05:12.500
So yes, I know it's a little bit weird syntax, but let me just try to explain what's here once again.

109
00:05:13.010 --> 00:05:15.020
So we are trying to do a dynamic import.

110
00:05:15.020 --> 00:05:21.080
First, we specify the web back chunk name, then we specify the file from where it's going to be loading.

111
00:05:21.470 --> 00:05:27.080
Then we're resolving the promise that's been done by the import statement and in the promise we get

112
00:05:27.080 --> 00:05:28.070
back to module.

113
00:05:28.280 --> 00:05:31.670
And in the module we know that there's a function called us show model.

114
00:05:32.300 --> 00:05:33.410
Now we have the function.

115
00:05:33.710 --> 00:05:34.920
So things are pretty simple.

116
00:05:35.240 --> 00:05:39.110
We can just move all of this sort of block inside this.

117
00:05:40.170 --> 00:05:41.970
So that's that's pretty much it.

118
00:05:42.420 --> 00:05:43.960
So let me just quickly save this.

119
00:05:44.280 --> 00:05:45.710
Now, since I have my back.

120
00:05:45.720 --> 00:05:50.430
Bev So we're running against, I'd like to automatically picked up all the changes.

121
00:05:50.940 --> 00:05:55.680
Now, if I just go back to my browser and in this, let's give it a refresh.

122
00:05:56.950 --> 00:05:57.300
Okay.

123
00:05:57.310 --> 00:06:02.530
Now please know that what's happening in the browser, we have the vendor, we have the vendor as the

124
00:06:02.560 --> 00:06:04.840
SS and the index bundle dogs.

125
00:06:05.410 --> 00:06:11.020
But as soon as I click on the C pricing, you can see that a new bundle just got loaded and this is

126
00:06:11.020 --> 00:06:12.760
exactly what is dynamic import.

127
00:06:12.760 --> 00:06:14.770
Or you can also call it as lazy loading.

128
00:06:15.220 --> 00:06:20.310
So in this case, if this is a big library, it's going to be loaded only when a user interacts with

129
00:06:20.320 --> 00:06:20.470
it.

130
00:06:20.710 --> 00:06:25.810
And this can be really useful to be optimizing the performance of your website as basically this is

131
00:06:25.810 --> 00:06:30.760
true when you are on the first page of your website, you want minimum resources to be loaded on your

132
00:06:30.760 --> 00:06:32.170
first page of the website.

133
00:06:32.590 --> 00:06:37.540
I hope you found that really cool and useful, and I hope you use that in your next project.

134
00:06:37.990 --> 00:06:38.320
All right.

135
00:06:38.320 --> 00:06:40.540
That's about it for Dynamic Inputs.

136
00:06:40.660 --> 00:06:43.870
Let's move on to the next feature in the Webpack optimization section.
