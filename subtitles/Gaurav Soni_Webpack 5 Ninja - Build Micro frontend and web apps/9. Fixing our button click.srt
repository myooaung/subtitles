1
00:00:03,670 --> 00:00:06,520
Let's continue on from where we left off in the last video.

2
00:00:06,520 --> 00:00:07,930
We got Ivar back running.

3
00:00:07,930 --> 00:00:12,280
But there was one problem that we were facing when I was trying to click on this button, nothing worked.

4
00:00:12,640 --> 00:00:15,460
So let's try to understand what exactly is happening behind the scene.

5
00:00:16,180 --> 00:00:18,340
Now check out the console right here.

6
00:00:18,700 --> 00:00:21,130
We can see that the button clicked is undefined.

7
00:00:21,580 --> 00:00:23,140
Well, why this is happening?

8
00:00:23,560 --> 00:00:26,680
Well, this is one of the more core concepts of the script.

9
00:00:27,010 --> 00:00:28,720
And let's see exactly why this happens.

10
00:00:29,230 --> 00:00:31,840
So I'm just going to be switching over to my voice code.

11
00:00:32,230 --> 00:00:37,150
And you do not really need to be coding along with me, but do take note of what's happening here.

12
00:00:37,660 --> 00:00:40,410
So I'm just going to switch over to another code base.

13
00:00:40,420 --> 00:00:41,500
So that's right here.

14
00:00:41,500 --> 00:00:45,220
And we're going to be exploring what is immediately in what functions in JavaScript.

15
00:00:45,730 --> 00:00:48,070
Now, if you check over here, it's nothing fancy.

16
00:00:48,340 --> 00:00:50,590
We just have like a button called ADD.

17
00:00:50,890 --> 00:00:53,890
And when you click on that, a function is going to be called as sum.

18
00:00:54,370 --> 00:00:58,240
Now if I open up the main dodges, this is the file right here.

19
00:00:58,930 --> 00:01:04,030
We can see that we have defined a function called sum and it does nothing, just the consolidated log

20
00:01:04,030 --> 00:01:05,170
of two variables.

21
00:01:05,650 --> 00:01:06,880
So it's quite straightforward.

22
00:01:06,880 --> 00:01:09,340
Let's open up this file in our browser.

23
00:01:09,820 --> 00:01:13,110
So what are we seeing as short in browser?

24
00:01:13,120 --> 00:01:16,390
Where is it really in finder and double click to open it up?

25
00:01:17,260 --> 00:01:17,560
All right.

26
00:01:17,560 --> 00:01:18,730
So that's a button right there.

27
00:01:19,000 --> 00:01:20,110
Let's click on Inspect.

28
00:01:20,590 --> 00:01:25,180
And if we check out our console when we click on ADD, we can see that this is five.

29
00:01:25,780 --> 00:01:28,330
Now let's make some changes in the code.

30
00:01:29,080 --> 00:01:32,110
I'm just going to be zooming in a little bit more clear.

31
00:01:32,530 --> 00:01:32,920
All right.

32
00:01:33,370 --> 00:01:37,570
Now in here, what I'm going to be doing is I'm going to be creating a immediately invoked function.

33
00:01:38,050 --> 00:01:41,650
So I'm going to be putting up two brackets, then create a function within it.

34
00:01:41,950 --> 00:01:45,670
And this is going to be having the braces in the end to invoke this function.

35
00:01:46,240 --> 00:01:49,240
And I'm one of them moving all of this within this.

36
00:01:49,570 --> 00:01:50,110
Great now.

37
00:01:51,070 --> 00:01:51,370
All right.

38
00:01:51,370 --> 00:01:53,350
So that's all things that are made.

39
00:01:53,500 --> 00:01:59,410
So what happens here exactly is as soon as they start a stimulus called this JavaScript file is going

40
00:01:59,410 --> 00:02:04,840
to be loaded in our browser, and this function gets executed in which we have defined another function

41
00:02:04,840 --> 00:02:05,380
called sum.

42
00:02:05,620 --> 00:02:07,000
And this is going to be initialized.

43
00:02:07,600 --> 00:02:12,760
Now, if I try to run this again in the browser, so if I go back to my browser, click on refresh and

44
00:02:12,760 --> 00:02:17,680
click on Add, we can see exactly the same error that the same function is not defined.

45
00:02:18,280 --> 00:02:23,200
Well, this is what happens when you have immediately invoke functions immediately and work functions

46
00:02:23,200 --> 00:02:28,480
have a separate scope in the browser and this is done so that it does not pollute the entire namespace

47
00:02:28,480 --> 00:02:30,730
or the entire global space in your browser.

48
00:02:31,150 --> 00:02:34,990
So for example, suppose someone has defined a function called sum as well.

49
00:02:35,260 --> 00:02:37,630
It's going to be conflicting with that particular function.

50
00:02:37,960 --> 00:02:41,230
So for that purpose, we define it as we immediately invoke function.

51
00:02:41,650 --> 00:02:44,920
This was a very popular approach back in the equity days as well.

52
00:02:45,250 --> 00:02:48,900
They used to be loading the equity library using the immediately invoked function.

53
00:02:49,600 --> 00:02:49,960
All right.

54
00:02:50,080 --> 00:02:54,880
So that was a quick overview of what exactly are immediately invoked function the switch back to our

55
00:02:54,880 --> 00:02:55,780
actual code base.

56
00:02:56,290 --> 00:02:57,400
So that's right here.

57
00:02:58,150 --> 00:03:02,050
Now in this, we should be looking up in the bundle dogs.

58
00:03:02,560 --> 00:03:09,610
And if I scroll all the way to the top and as you can see or here is the exact same thing text that

59
00:03:09,610 --> 00:03:14,710
we saw earlier, if you have this bracket here, then we have the immediately invoked function being

60
00:03:14,710 --> 00:03:15,250
created.

61
00:03:15,670 --> 00:03:20,860
And if you scroll all the way to the bottom, we can see that is closed and then executed in the browser.

62
00:03:21,400 --> 00:03:27,640
So what Webpack is doing is creating an entire scope of its own so that it isolates itself from all

63
00:03:27,640 --> 00:03:29,410
the other things that are running in the browser.

64
00:03:29,800 --> 00:03:33,880
Now, this is a good approach, actually, so that it does not create conflict with any of the files

65
00:03:33,880 --> 00:03:39,220
that are loaded other than Webpack or any other JavaScript file that's being loaded in the mail file.

66
00:03:40,090 --> 00:03:40,480
All right.

67
00:03:40,780 --> 00:03:45,340
Now, if I just see how can be solving this, there's a couple of ways to be solving it.

68
00:03:45,760 --> 00:03:50,020
So for that, let's head over to our indexed ideas and you can follow along with me now.

69
00:03:50,740 --> 00:03:55,450
So to fix this, what we're going to be doing is we're going to be binding it directly to a HTML element.

70
00:03:56,440 --> 00:04:02,650
Now to do that, I need to be opening up the mail file first so that right here we had attached a click

71
00:04:02,650 --> 00:04:04,300
listener that is called Button Clicked.

72
00:04:04,420 --> 00:04:08,260
So instead of this, I'm going to be removing all of this and I'm just going to be assigning an idea

73
00:04:08,260 --> 00:04:08,590
to it.

74
00:04:09,040 --> 00:04:13,480
So let's assign it called as button one.

75
00:04:13,690 --> 00:04:18,640
So it's quite simple, and let's go back to our indexed ideas and make the changes.

76
00:04:19,120 --> 00:04:26,470
Now I'm going to be changing this into a document or get element by already put in the ID of the button

77
00:04:26,470 --> 00:04:29,080
and then say add event listener.

78
00:04:29,590 --> 00:04:34,330
And the event that we are going to be listening for is the Click Event, and then we can define our

79
00:04:34,330 --> 00:04:37,510
callback function when this click event gets executed.

80
00:04:38,050 --> 00:04:43,150
Now we can just take up all the code that was there earlier in that function and put it right here and

81
00:04:43,150 --> 00:04:45,310
delete of that previous function that we had.

82
00:04:46,330 --> 00:04:48,220
So that is all the change that we need.

83
00:04:48,250 --> 00:04:53,280
So what will happen here is when we create stability, it is going to be adding all of this into that

84
00:04:53,290 --> 00:04:54,490
immediately invoked function.

85
00:04:54,880 --> 00:04:59,650
And as soon as this function gets executed, it's going to be trying to find that button, which has

86
00:04:59,680 --> 00:05:00,370
an idea of.

87
00:05:00,410 --> 00:05:04,100
Button one and artist, event listener and everything should work as expected.

88
00:05:04,760 --> 00:05:08,750
Now, to make sure that things do work as expected, let me clear off the console.

89
00:05:09,080 --> 00:05:13,790
Let me just see if this index strategy has failed and let's try to run the build once again.

90
00:05:13,970 --> 00:05:19,820
So I'll say NPM, run, build, and we have the new build created for us.

91
00:05:19,940 --> 00:05:21,710
Let's switch back to our browser.

92
00:05:22,620 --> 00:05:27,750
And in our browser we can just go back to our application and click on refresh and let's try to click

93
00:05:27,750 --> 00:05:28,680
on the button this time.

94
00:05:29,100 --> 00:05:32,310
And in fact, this time our application works as expected.

95
00:05:32,820 --> 00:05:37,380
Now, this was a very small point that was there, but it was very important to understand why did that

96
00:05:37,380 --> 00:05:38,190
button not work?

97
00:05:38,550 --> 00:05:42,780
And this is going to be somewhat painful for you if you do not really understand the concept behind

98
00:05:42,780 --> 00:05:42,930
it.

99
00:05:43,230 --> 00:05:47,120
And now we hope it's clear how actually that back works behind the scene.

100
00:05:47,130 --> 00:05:50,310
And we will be seeing what it wants, the usage of all of this very soon.

101
00:05:50,820 --> 00:05:51,090
All right.

102
00:05:51,090 --> 00:05:52,760
So that's about it for this.

103
00:05:52,770 --> 00:05:56,460
Let's move on to the next video and explore a few more concepts of that back.
