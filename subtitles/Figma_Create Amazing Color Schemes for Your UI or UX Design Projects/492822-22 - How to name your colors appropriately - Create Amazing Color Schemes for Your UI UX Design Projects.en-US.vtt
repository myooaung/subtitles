WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:04.250 --> 00:00:07.020
Naming conventions, one of

00:00:07.020 --> 00:00:09.180
the most important topics when

00:00:09.180 --> 00:00:11.759
it comes to creating
design systems.

00:00:11.759 --> 00:00:13.365
As a sole designer,

00:00:13.365 --> 00:00:15.420
you may consider naming colors

00:00:15.420 --> 00:00:17.520
as the least
important factor that

00:00:17.520 --> 00:00:19.530
you can think of
when you work on

00:00:19.530 --> 00:00:21.750
a project, it's understandable,

00:00:21.750 --> 00:00:24.269
but let me give you an
example to understand

00:00:24.269 --> 00:00:26.910
the importance of naming
conventions truly,

00:00:26.910 --> 00:00:29.610
let's suppose you're
working on a project with

00:00:29.610 --> 00:00:33.330
a small color palette that
includes four to ten colors.

00:00:33.330 --> 00:00:34.830
These are your colors.

00:00:34.830 --> 00:00:36.085
How do you name them?

00:00:36.085 --> 00:00:38.915
Well, most of you
may name them blue,

00:00:38.915 --> 00:00:41.765
blue, light green, and yellow.

00:00:41.765 --> 00:00:44.000
And it's totally fine
if you're working on

00:00:44.000 --> 00:00:46.310
a small project
as a solid liner.

00:00:46.310 --> 00:00:48.170
Now let's imagine
that you work on

00:00:48.170 --> 00:00:51.965
a large scale project with
more colors to work with,

00:00:51.965 --> 00:00:54.890
and you should collaborate
with other designers.

00:00:54.890 --> 00:00:56.960
Can you use the
same approach here?

00:00:56.960 --> 00:00:58.940
Of course not, But why?

00:00:58.940 --> 00:01:01.655
When you name colors
in a design system,

00:01:01.655 --> 00:01:03.170
the main goal is to make

00:01:03.170 --> 00:01:05.585
the colors role as
vivid as possible.

00:01:05.585 --> 00:01:06.680
So why do you think

00:01:06.680 --> 00:01:10.790
blue slash slash two
is a logical name?

00:01:10.790 --> 00:01:12.230
It makes no sense to

00:01:12.230 --> 00:01:14.570
other collaborators
unless you want to

00:01:14.570 --> 00:01:16.789
go and explain your
naming conventions

00:01:16.789 --> 00:01:18.665
to all other designers,

00:01:18.665 --> 00:01:21.725
developers, and
marketers in your team,

00:01:21.725 --> 00:01:24.185
you should use an
approach that works for

00:01:24.185 --> 00:01:28.025
everyone without the need to
explain the logic behind it.

00:01:28.025 --> 00:01:30.875
Let's suppose you have
a primary color and

00:01:30.875 --> 00:01:32.810
three shades of this color for

00:01:32.810 --> 00:01:34.910
different states
of your elements,

00:01:34.910 --> 00:01:38.900
like default, active,
press, et cetera.

00:01:38.900 --> 00:01:41.600
What's the best way
to name these colors?

00:01:41.600 --> 00:01:45.020
First, start with the
usage of this color.

00:01:45.020 --> 00:01:47.405
In this case, it's primary.

00:01:47.405 --> 00:01:51.290
Then use a hyphen or a
forward slash and write

00:01:51.290 --> 00:01:56.810
the variations like active,
inactive, default, etc.

00:01:56.810 --> 00:01:58.700
This way, we could describe

00:01:58.700 --> 00:02:01.535
colors without even
mentioning their names.

00:02:01.535 --> 00:02:04.430
This is called a functional
naming convention.

00:02:04.430 --> 00:02:07.250
So no matter who uses
our design system,

00:02:07.250 --> 00:02:08.570
whether that person is

00:02:08.570 --> 00:02:12.110
a colorblind designer or a
new member of your team,

00:02:12.110 --> 00:02:15.110
he or she can easily understand

00:02:15.110 --> 00:02:18.365
how those colors should
be used in the project.

00:02:18.365 --> 00:02:22.400
This approach is clear,
scalable, and universal.

00:02:22.400 --> 00:02:24.980
Of course, there are
different naming conventions,

00:02:24.980 --> 00:02:27.995
but this is the one that
works well for small,

00:02:27.995 --> 00:02:31.590
medium, and large
scale projects.
