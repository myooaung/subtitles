WEBVTT
ï»¿1
00:00:00.000 --> 00:00:00.320
Hey,

2
00:00:00.320 --> 00:00:00.620
guys,

3
00:00:00.620 --> 00:00:05.100
welcome back in this video we're going to speak about public and private variables,

4
00:00:05.100 --> 00:00:09.390
so we're going to see how to declare variables the public so that it would be applicable

5
00:00:09.390 --> 00:00:15.050
throughout your whole workbook and you can run it from any module and we will also see how

6
00:00:15.050 --> 00:00:15.630
to declare.

7
00:00:15.630 --> 00:00:19.530
Private variables are specific to certain modules.

8
00:00:19.530 --> 00:00:24.300
So here at the moment I've got two procedures one called public variables one and the other

9
00:00:24.300 --> 00:00:27.530
one called public variables to now.

10
00:00:27.530 --> 00:00:28.100
Currently,

11
00:00:28.100 --> 00:00:32.960
I've got a variable called X in each of them and it's declared,

12
00:00:32.960 --> 00:00:39.000
is an integer and it will take a value of two on the 1st 1 and it will take a value of

13
00:00:39.000 --> 00:00:42.250
three on the 2nd 1 However,

14
00:00:42.250 --> 00:00:48.050
let me just tell you that the variable X here is different than the variable X here.

15
00:00:48.050 --> 00:00:54.530
So actually each of the two macro XYZ speaking currently about a different variable,

16
00:00:54.530 --> 00:00:58.470
so X at the top is not the same as acts at the bottom,

17
00:00:58.470 --> 00:00:59.980
although they're both called acts.

18
00:00:59.980 --> 00:01:05.420
So how do we make X at the top be the same acts at the bottom?

19
00:01:05.420 --> 00:01:10.610
How do we make the to micro's speak about the same variable.

20
00:01:10.610 --> 00:01:16.950
We can do that by declaring public X as integer,

21
00:01:16.950 --> 00:01:17.680
for example.

22
00:01:17.680 --> 00:01:22.680
And I'm just going to delete this line of code here and delete this line of code because

23
00:01:22.680 --> 00:01:25.260
the type of the variable has been declared at the top.

24
00:01:25.260 --> 00:01:26.620
So in this case,

25
00:01:26.620 --> 00:01:30.590
both set procedures would be speaking about the same variable.

26
00:01:30.590 --> 00:01:32.750
So how do we very find that?

27
00:01:32.750 --> 00:01:33.710
Okay,

28
00:01:33.710 --> 00:01:34.110
well,

29
00:01:34.110 --> 00:01:37.180
we can actually create a watch window for X here,

30
00:01:37.180 --> 00:01:40.450
So I'm going to right click here and click on add watch.

31
00:01:40.450 --> 00:01:42.500
And the expression is gonna be X.

32
00:01:42.500 --> 00:01:48.740
And the context of forex actually is gonna be not a certain sir procedure,

33
00:01:48.740 --> 00:01:53.950
But it's gonna be all procedures since it's a public variable and is gonna be throughout.

34
00:01:53.950 --> 00:01:54.190
Oh,

35
00:01:54.190 --> 00:01:55.120
modules.

36
00:01:55.120 --> 00:02:01.800
Because X being public means that it can run on any module.

37
00:02:01.800 --> 00:02:03.030
Okay?

38
00:02:03.030 --> 00:02:05.860
Or it can be called from any module.

39
00:02:05.860 --> 00:02:07.890
So I'm gonna press.

40
00:02:07.890 --> 00:02:08.330
Okay,

41
00:02:08.330 --> 00:02:12.850
here and now we've got a watch window for X as a variable.

42
00:02:12.850 --> 00:02:15.260
Now I'm going to run through the first procedure here.

43
00:02:15.260 --> 00:02:18.750
So the first visitor is going to set the value of X to be equal to two.

44
00:02:18.750 --> 00:02:22.850
And as you can see here the value of excess to currently on the watch window.

45
00:02:22.850 --> 00:02:28.790
Now watch what happens when I press and sub the value of X is still too okay,

46
00:02:28.790 --> 00:02:30.860
so it's not being cleared from system memory,

47
00:02:30.860 --> 00:02:33.060
as we've seen on the previous lesson.

48
00:02:33.060 --> 00:02:36.220
This is because it's been declared as a public variable,

49
00:02:36.220 --> 00:02:39.530
so it's not specific to a certain macro,

50
00:02:39.530 --> 00:02:41.150
but it's actually public.

51
00:02:41.150 --> 00:02:46.780
So this means that it will retain its value after the macro runs its course.

52
00:02:46.780 --> 00:02:48.000
And now,

53
00:02:48.000 --> 00:02:49.660
if we run the second macro,

54
00:02:49.660 --> 00:02:53.010
so if you step through it step by step by pressing F eight,

55
00:02:53.010 --> 00:02:53.920
you can see Aaron.

56
00:02:53.920 --> 00:02:59.590
Now when we run this step that the value of exchanges to three So actually the second macro

57
00:02:59.590 --> 00:03:03.360
managed to change the same variable as the first macro.

58
00:03:03.360 --> 00:03:04.480
So currently,

59
00:03:04.480 --> 00:03:05.600
in this current state,

60
00:03:05.600 --> 00:03:09.370
they're both speaking about the same variable.

61
00:03:09.370 --> 00:03:12.950
So when you declare a variable as a public,

62
00:03:12.950 --> 00:03:18.760
this means that any procedure in any ma jewel in your workbook can speak about that

63
00:03:18.760 --> 00:03:19.360
variable.

64
00:03:19.360 --> 00:03:19.980
Okay,

65
00:03:19.980 --> 00:03:24.150
so that is the bottom line of this part of this lesson.

66
00:03:24.150 --> 00:03:24.880
Okay,

67
00:03:24.880 --> 00:03:26.860
so when you declare variables public,

68
00:03:26.860 --> 00:03:28.340
you can speak about it from any.

69
00:03:28.340 --> 00:03:32.430
It's appreciator from any module in your workbook.

70
00:03:32.430 --> 00:03:39.400
Now you can actually make a variable be specific to a certain module in your workbook by

71
00:03:39.400 --> 00:03:42.350
actually declaring as private so private.

72
00:03:42.350 --> 00:03:43.180
Why,

73
00:03:43.180 --> 00:03:44.470
as integer,

74
00:03:44.470 --> 00:03:45.250
for example,

75
00:03:45.250 --> 00:03:46.970
this will make variable.

76
00:03:46.970 --> 00:03:50.940
Why be just specific to module one?

77
00:03:50.940 --> 00:03:51.620
Now,

78
00:03:51.620 --> 00:03:57.070
let's say I'm going to set here y to be equal to five on this procedure.

79
00:03:57.070 --> 00:04:00.510
I'm going to set it to be equal to 10 on the other side procedure.

80
00:04:00.510 --> 00:04:03.230
And I'm gonna actually add a watch with no for Roy.

81
00:04:03.230 --> 00:04:06.520
So I'm going to right click here and click on add watch,

82
00:04:06.520 --> 00:04:09.190
and then I'm gonna actually watch why.

83
00:04:09.190 --> 00:04:11.340
And here the procedure,

84
00:04:11.340 --> 00:04:14.870
the context is gonna be throughout old procedures in module one.

85
00:04:14.870 --> 00:04:18.520
We cannot monitor why throughout all the modules,

86
00:04:18.520 --> 00:04:20.250
because currently it's a private,

87
00:04:20.250 --> 00:04:23.500
so it's gonna be only monitored through model one.

88
00:04:23.500 --> 00:04:24.060
If I said like,

89
00:04:24.060 --> 00:04:24.230
oh,

90
00:04:24.230 --> 00:04:25.680
modules and press OK,

91
00:04:25.680 --> 00:04:27.080
watch what happens here.

92
00:04:27.080 --> 00:04:29.180
It says expression not defined in context.

93
00:04:29.180 --> 00:04:34.650
That means that it's currently defined out of its context because it's context.

94
00:04:34.650 --> 00:04:36.060
It's only module one,

95
00:04:36.060 --> 00:04:37.310
not all the modules.

96
00:04:37.310 --> 00:04:37.990
So for right,

97
00:04:37.990 --> 00:04:42.820
click again it it watch to edit that and put it back to module one and click.

98
00:04:42.820 --> 00:04:43.350
OK,

99
00:04:43.350 --> 00:04:47.820
currently has a value of zero because we haven't changed its value yet,

100
00:04:47.820 --> 00:04:50.050
but now we can actually monitor its value.

101
00:04:50.050 --> 00:04:52.060
So if I run the first procedure,

102
00:04:52.060 --> 00:04:52.850
for example here,

103
00:04:52.850 --> 00:04:55.470
why is five and the end sub Because here,

104
00:04:55.470 --> 00:04:57.710
that why still retains the value of five.

105
00:04:57.710 --> 00:05:01.330
Why is currently specific to just module one?

106
00:05:01.330 --> 00:05:02.920
If I run the 2nd 1 here,

107
00:05:02.920 --> 00:05:08.380
you can see here that when I run the line when y equals 10 F eight through that,

108
00:05:08.380 --> 00:05:10.750
you can see here that its value has changed.

109
00:05:10.750 --> 00:05:11.180
So actually,

110
00:05:11.180 --> 00:05:13.380
both of them are speaking about this same variable.

111
00:05:13.380 --> 00:05:13.690
Why,

112
00:05:13.690 --> 00:05:17.410
If I go to module to for double click on it here,

113
00:05:17.410 --> 00:05:18.900
that's a different module,

114
00:05:18.900 --> 00:05:24.020
and I'm going to create a macro called Public Variables three.

115
00:05:24.020 --> 00:05:29.870
And I'm gonna assign a value for why to be equal to seven.

116
00:05:29.870 --> 00:05:30.520
For example,

117
00:05:30.520 --> 00:05:30.860
here.

118
00:05:30.860 --> 00:05:32.990
If I try to run this macro,

119
00:05:32.990 --> 00:05:34.610
what's what's gonna happen here?

120
00:05:34.610 --> 00:05:35.820
Actually,

121
00:05:35.820 --> 00:05:40.110
the value of why at the bottom does not change,

122
00:05:40.110 --> 00:05:40.630
Okay,

123
00:05:40.630 --> 00:05:41.640
I'm going to do it again.

124
00:05:41.640 --> 00:05:45.660
Watch the value for the variable that we're watching,

125
00:05:45.660 --> 00:05:46.570
which is why.

126
00:05:46.570 --> 00:05:52.430
And this is a private variable specific to model one When I read this line of code the

127
00:05:52.430 --> 00:05:55.990
value there's not changed because this why variable is different from this.

128
00:05:55.990 --> 00:05:57.440
Why variable that we're watching.

129
00:05:57.440 --> 00:05:59.400
If I wanna watch this,

130
00:05:59.400 --> 00:05:59.780
why,

131
00:05:59.780 --> 00:06:00.420
variable,

132
00:06:00.420 --> 00:06:05.370
I gotta add another watch and the watch that I'm gonna add is going to be for public

133
00:06:05.370 --> 00:06:05.830
variables.

134
00:06:05.830 --> 00:06:07.160
Three in module to this.

135
00:06:07.160 --> 00:06:11.950
Why variable here is actually specific to just module to.

136
00:06:11.950 --> 00:06:17.400
So if I run it and it's actually a very in because I haven't declared its type if I run it

137
00:06:17.400 --> 00:06:17.400
,

138
00:06:17.400 --> 00:06:17.910
you can see it.

139
00:06:17.910 --> 00:06:23.520
This one changes because this is the one that we should be monitoring because this one is

140
00:06:23.520 --> 00:06:27.930
specific to the sub procedure called public variables.

141
00:06:27.930 --> 00:06:28.480
Three.

142
00:06:28.480 --> 00:06:28.910
So,

143
00:06:28.910 --> 00:06:29.420
basically,

144
00:06:29.420 --> 00:06:37.330
the bottom line is that if you need your variable to be able to be cold from any procedure

145
00:06:37.330 --> 00:06:41.430
from any module in your workbook than declare as a public variable,

146
00:06:41.430 --> 00:06:42.820
if you need your variable to be,

147
00:06:42.820 --> 00:06:47.990
just be able to get cold from just a specific module.

148
00:06:47.990 --> 00:06:51.870
So from any procedure in that specific module,

149
00:06:51.870 --> 00:06:54.640
just declare as a private if you need to be,

150
00:06:54.640 --> 00:07:00.650
just be specific to a search and step procedure than don't make it a public or private just

151
00:07:00.650 --> 00:07:02.950
Dimmitt inside the sir procedure.

152
00:07:02.950 --> 00:07:07.530
And it will be just specific to that particular sub procedure.

153
00:07:07.530 --> 00:07:09.050
So that's it,

154
00:07:09.050 --> 00:07:09.430
guys,

155
00:07:09.430 --> 00:07:10.830
for this lesson.

156
00:07:10.830 --> 00:07:11.580
Thank you very much.

157
00:07:11.580 --> 00:07:13.680
Watching this video I'll see on the next one.

