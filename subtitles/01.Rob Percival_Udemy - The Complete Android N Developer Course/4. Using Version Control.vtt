WEBVTT
1
00:00:00.600 --> 00:00:05.460
Here in the second of our actors we're going to be seeing how you can use version control with your

2
00:00:05.460 --> 00:00:12.800
Android apps and specifically going to be using it which is a very widely used version control system.

3
00:00:13.080 --> 00:00:18.750
I'd thoroughly recommend using version control if you're working with particularly a large project.

4
00:00:18.750 --> 00:00:22.030
It enables you to go back to previous versions of your app.

5
00:00:22.260 --> 00:00:28.130
And it also makes it much easier for lots of people to work on the same app and then merge their results.

6
00:00:28.260 --> 00:00:31.890
And the work that they've done into a final product.

7
00:00:31.890 --> 00:00:39.240
So if you want to read more about it then go to get dash SBM dot com and check out the about pages and

8
00:00:39.240 --> 00:00:40.770
the documentation if you like.

9
00:00:40.920 --> 00:00:45.810
But really I'll show you all the basics of what you'll need in this video.

10
00:00:46.500 --> 00:00:52.240
You might also need to download kits if you haven't already worked with any kind of version control.

11
00:00:52.350 --> 00:00:59.240
Then it will detect the system that your own so just clicked download for Mac or download from windows

12
00:00:59.520 --> 00:01:03.940
and just download the latest version and follow the instructions to install it.

13
00:01:04.050 --> 00:01:05.620
That's pretty straightforward.

14
00:01:06.090 --> 00:01:11.400
All right so working with get an android studio will create a new project

15
00:01:15.230 --> 00:01:20.620
to do that.

16
00:01:20.650 --> 00:01:26.650
I remember the name of this project is not to actually get an app that does anything but to see how

17
00:01:26.650 --> 00:01:34.750
we can use version control to make our development process smoother and to allow us to revert to previous

18
00:01:34.750 --> 00:01:35.230
versions.

19
00:01:35.230 --> 00:01:47.570
If you've done something horrendously bad which happens to the best of us occasionally.

20
00:01:47.700 --> 00:02:01.000
Ok so I'll make all my changes in main java file but you can use version control on all of the files

21
00:02:01.360 --> 00:02:03.550
within your app.

22
00:02:03.550 --> 00:02:15.410
So to start off we get a yes or version control system and enable version control integration.

23
00:02:15.410 --> 00:02:16.200
Simple as that.

24
00:02:16.250 --> 00:02:25.080
And then select the version control system you want to use and we're going to use get.

25
00:02:25.360 --> 00:02:26.070
And there we go.

26
00:02:26.200 --> 00:02:34.360
So already we now have a good repository in our folder and this will then save all of the versions of

27
00:02:34.360 --> 00:02:36.950
our app that we work with.

28
00:02:36.970 --> 00:02:38.240
So how do we set this up.

29
00:02:38.340 --> 00:02:42.940
Well first of all you'll notice that everything is read at the moment and this is because we haven't

30
00:02:43.030 --> 00:02:48.850
added anything to our version control repository so if we just click on version control that we've got

31
00:02:49.380 --> 00:02:49.810
nothing.

32
00:02:49.810 --> 00:02:53.890
In default there would be thirty five unverse files.

33
00:02:54.250 --> 00:03:00.700
So the first thing we're going to do is select our whole app and add it to our version control system

34
00:03:01.510 --> 00:03:03.440
to get VTES and then get.

35
00:03:03.640 --> 00:03:15.040
And then at now you can see everything goes green and it's all been added to our version control system.

36
00:03:15.040 --> 00:03:17.080
In fact there are some files which haven't.

37
00:03:17.320 --> 00:03:24.860
And these are ones which were going to opt not to have invention control because that can cause problems.

38
00:03:24.970 --> 00:03:30.620
We're going to be working with a default there which are all the sort of files that we work with anyway.

39
00:03:33.190 --> 00:03:33.500
OK

40
00:03:36.270 --> 00:03:40.970
so a key aspect of working with version control is committing.

41
00:03:41.060 --> 00:03:49.430
So once you've added all your files with them want to commit and it says commit changes we haven't actually

42
00:03:49.430 --> 00:03:50.350
made any changes yet.

43
00:03:50.360 --> 00:03:54.310
But this is our initial commit to get everything started.

44
00:03:54.680 --> 00:04:03.410
So this is all of the different code and whenever we commit in it we give a commit message which is

45
00:04:03.410 --> 00:04:07.340
an instruction that just sort of lists the details of the particular commits.

46
00:04:07.400 --> 00:04:16.510
So this is our initial commit which just means that way of stating our first version essentially of

47
00:04:16.510 --> 00:04:21.260
our app which in our case obviously is just the default app.

48
00:04:21.620 --> 00:04:27.210
Then we can have a little look at that if we go over to log so we can see what we've done so far.

49
00:04:27.980 --> 00:04:31.480
So you can see we've got a head which is why we're working out at the moment.

50
00:04:31.670 --> 00:04:36.740
We've got the master which is the main branch that we're working on will talk about branches in a minute

51
00:04:37.370 --> 00:04:39.740
and then we've got our initial commit

52
00:04:42.590 --> 00:04:45.840
all right so how does this then work.

53
00:04:45.960 --> 00:04:51.990
So let's say we write a little bit of code and create a string

54
00:04:55.190 --> 00:04:56.540
user he calls.

55
00:04:56.790 --> 00:04:58.110
So very simple.

56
00:04:58.110 --> 00:05:02.670
Probably not something that you would want to commit after you've probably confident enough that you

57
00:05:02.670 --> 00:05:05.070
could undo that line of code if necessary.

58
00:05:05.070 --> 00:05:11.750
First off notice now as we're writing code this green bar is coming down to shows this is new code that

59
00:05:11.760 --> 00:05:13.520
has not been committed yet.

60
00:05:13.740 --> 00:05:17.100
And if we write some code in here as well we'll get a similar

61
00:05:22.720 --> 00:05:26.270
rewrite some code in there that will appear there too.

62
00:05:26.860 --> 00:05:29.660
So this shows us the new code that we haven't committed yet.

63
00:05:30.040 --> 00:05:34.420
So let's pretend we've written some fantastic code we're pretty happy with it we've tested it and we

64
00:05:34.420 --> 00:05:36.160
want to commit it.

65
00:05:36.190 --> 00:05:42.850
So once again we just go to VTES and commit changes or indeed command K probably control K on Windows

66
00:05:43.630 --> 00:05:46.900
and then we commit that and

67
00:05:49.960 --> 00:05:51.660
I'll call it added use.

68
00:05:51.700 --> 00:05:56.090
Rob and then we'll commit that change.

69
00:05:58.330 --> 00:06:04.020
And if we have a look at the Loek Now you can see we've got our initial commit and then we've got a

70
00:06:04.020 --> 00:06:06.020
later added user.

71
00:06:06.030 --> 00:06:12.320
Rob commit and hopefully you can start to see that then looking at this get log.

72
00:06:12.510 --> 00:06:20.610
You'll then get a nice picture of how your app is developed and maybe if you think back to say our Instagram

73
00:06:20.610 --> 00:06:26.430
app we might have had that the first commit connected successfully to pass the second one added the

74
00:06:26.430 --> 00:06:27.480
log in screen.

75
00:06:27.540 --> 00:06:32.820
The third one added They use a table et cetera et cetera and then you can see each stage of the app

76
00:06:32.910 --> 00:06:37.070
and very usefully go back to them if you want to.

77
00:06:38.070 --> 00:06:40.260
So let's say for example that

78
00:06:43.070 --> 00:06:44.680
I now write some more code

79
00:06:49.070 --> 00:06:58.420
so I'll create another user is Caston blah blah blah and I might even delete my initial code and then

80
00:06:58.690 --> 00:07:03.400
further down the line I decide I actually want to get that initial code back.

81
00:07:03.400 --> 00:07:04.860
How do I do that.

82
00:07:05.260 --> 00:07:09.880
Well if you weren't using gets you may have saved its saved another version or you may be able to use

83
00:07:09.880 --> 00:07:15.010
commands as if the memory is long enough and you haven't gone forward too far.

84
00:07:15.130 --> 00:07:21.610
But if you're using gets then you can revert to a previous version which is extremely useful so to do

85
00:07:21.610 --> 00:07:28.060
that you just go to local changes here and a version control click on the file that you want and then

86
00:07:28.060 --> 00:07:32.720
control click or right click and then with it.

87
00:07:32.740 --> 00:07:41.420
And that will then take you back to our previous comments and you can breathe a sigh of relief and you've

88
00:07:41.420 --> 00:07:43.110
got your code back as it was.

89
00:07:44.290 --> 00:07:49.450
So that's one great use of version control to be able to go back to a previous version and undo the

90
00:07:49.450 --> 00:07:51.260
changes that you've made.

91
00:07:51.550 --> 00:07:59.530
The other the version control that I want to show you is how to use branches now branches are controlled

92
00:07:59.560 --> 00:08:00.640
down here.

93
00:08:00.640 --> 00:08:05.830
So at the moment we're on the master approach which is the kind of default branch which you should always

94
00:08:05.830 --> 00:08:07.410
stick with in the long run.

95
00:08:08.050 --> 00:08:16.010
But we might want to create a new branch so let's say we want to test some kind of integration.

96
00:08:16.500 --> 00:08:18.840
So this might be testing Facebook

97
00:08:21.860 --> 00:08:23.680
integration.

98
00:08:24.740 --> 00:08:32.390
So then I might go off on some wild tangent and see if I can make Facebook integrate with the main app

99
00:08:32.630 --> 00:08:35.040
and that might not involve just adding code.

100
00:08:35.060 --> 00:08:40.610
It might involve getting rid of some code changing code changing things all over the place but I want

101
00:08:40.610 --> 00:08:44.340
to still be able to revert back if I want to.

102
00:08:44.840 --> 00:08:48.960
So this is a grander thing than just doing a never commit.

103
00:08:49.190 --> 00:08:54.570
And if we if we now look there you can see we're on this testing Facebook branch.

104
00:08:54.710 --> 00:09:06.580
So if I now do a couple of commits I'm just going to the comments this time.

105
00:09:06.780 --> 00:09:07.990
So we'll do a quick

106
00:09:14.000 --> 00:09:20.300
give it a message pay is great comments and then commit

107
00:09:24.930 --> 00:09:26.980
I think I manage to type there too.

108
00:09:29.980 --> 00:09:31.720
And maybe later on I decide

109
00:09:36.890 --> 00:09:38.110
it's not so good.

110
00:09:40.160 --> 00:09:52.360
So let's commit that.

111
00:09:52.530 --> 00:09:53.180
There we go.

112
00:09:53.200 --> 00:10:00.460
Now if I now have a look at the log you can see hopefully what's going on there said that the monster

113
00:10:00.460 --> 00:10:07.020
branch ended there and then we switched over to the testing Facebook integration branch.

114
00:10:07.110 --> 00:10:14.410
So as always I could revert back to the added use of Rob but the really useful thing is if I eventually

115
00:10:14.410 --> 00:10:24.250
decide say that I've completed my testing Facebook integration say I'm done.

116
00:10:27.310 --> 00:10:30.490
And then commit that

117
00:10:38.170 --> 00:10:47.470
then once the testing phase integration is completed I can then merge this with the master branch so

118
00:10:47.470 --> 00:10:49.800
we can do this here.

119
00:10:50.110 --> 00:10:56.160
And you can see that will when you tap on the branch button there then you get all of the other branches

120
00:10:56.170 --> 00:11:00.130
so we want to take the master branch and we could.

121
00:11:00.130 --> 00:11:02.330
One option is to check that out.

122
00:11:02.620 --> 00:11:07.330
So if we check out the master branch it'll take us back to the master branch and we could start working

123
00:11:07.330 --> 00:11:08.450
on that if we wanted to

124
00:11:11.600 --> 00:11:14.780
but let's just go back to our Facebook Braj for the moment.

125
00:11:15.080 --> 00:11:20.480
So if we want to merge this with the master branch we get back over to master

126
00:11:23.210 --> 00:11:32.110
and then we can click on the other branch and then merge and then you can see that's brought the testing

127
00:11:32.120 --> 00:11:35.310
Facebook integration branch into the master branch.

128
00:11:35.360 --> 00:11:40.440
So we're now back working on master again and everything has been brought together.

129
00:11:40.670 --> 00:11:46.550
So it's a great way to work on a specific feature on the side of the master branch and then only to

130
00:11:46.550 --> 00:11:49.250
bring everything back in together again.

131
00:11:49.340 --> 00:11:54.770
When you're convinced that the new feature work well and you do want to integrate it into your final

132
00:11:54.770 --> 00:12:01.490
app so those are the basics of using get version control with Android studio.

133
00:12:01.540 --> 00:12:02.950
There's a lot more that you can do with it.

134
00:12:02.950 --> 00:12:07.740
So you do a bit of googling and work out how it might be most useful to you.

135
00:12:07.930 --> 00:12:12.460
But those are the features that most developers use most commonly.

136
00:12:12.470 --> 00:12:17.140
I hope that made sense and I hope that version control saves you from some disasters and helps you to

137
00:12:17.140 --> 00:12:20.030
work more collaboratively in your have development career.
