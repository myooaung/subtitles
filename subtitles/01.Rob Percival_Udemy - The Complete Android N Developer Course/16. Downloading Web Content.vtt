WEBVTT
1
00:00:00.630 --> 00:00:06.540
Now that we know how to use try and catch to look for exceptions in our code we're going to go back

2
00:00:06.540 --> 00:00:13.380
over to Android studio and create a new application which will download content from the web.

3
00:00:13.380 --> 00:00:18.270
Now this is a really powerful thing to be able to do because it's the beginnings of connecting our apps

4
00:00:18.300 --> 00:00:25.230
to online services such as Google Maps Twitter Facebook any publicly available service that we can work

5
00:00:25.230 --> 00:00:30.640
into our apps to add power and great features beyond what we could just code ourselves.

6
00:00:30.780 --> 00:00:35.970
So it's a really cool thing to be able to do and it will show us a number of new ways to work with Android

7
00:00:35.970 --> 00:00:36.740
apps as well.

8
00:00:36.750 --> 00:00:41.220
By the end of this lecture you'll know a lot more about threads and how to use a different application

9
00:00:41.220 --> 00:00:43.830
thread to have two threads going at once.

10
00:00:43.830 --> 00:00:44.350
All right.

11
00:00:44.520 --> 00:00:46.210
So let's do it.

12
00:00:46.620 --> 00:00:56.820
We'll call it downloading web content and we'll use all the usual settings blank activity.

13
00:00:57.190 --> 00:00:58.330
And here we are.

14
00:00:58.390 --> 00:01:05.570
So we're going to ignore the layout completely and all of our code here is going to be in the main activity

15
00:01:05.630 --> 00:01:07.460
our java file.

16
00:01:07.480 --> 00:01:07.970
All right.

17
00:01:08.080 --> 00:01:13.390
So just to be really clear what we're trying to do here let's look for example at a great Web site.

18
00:01:13.660 --> 00:01:19.940
If you haven't worked with web sites before you might not know that behind every Web site is some DML

19
00:01:20.020 --> 00:01:25.870
code and you can get that by right clicking or control clicking in your browser and going to something

20
00:01:25.870 --> 00:01:35.870
like view page source and then that will show you the actual H-G AML code which is behind that web page.

21
00:01:35.930 --> 00:01:39.680
So there's a lot of code that makes up this particular web page and that's what we're going to try and

22
00:01:39.680 --> 00:01:40.180
download.

23
00:01:40.200 --> 00:01:42.650
And we're just going to put it in the console for the moment.

24
00:01:42.740 --> 00:01:46.930
So all our aim is is to get this content and put it in the console.

25
00:01:47.030 --> 00:01:53.600
That's not particularly useful but if we use it in conjunction with what is known as API or application

26
00:01:53.600 --> 00:01:58.670
programming interfaces which allow you to download useful information and then process it and give it

27
00:01:58.670 --> 00:02:03.510
to the user in exciting ways then that is extremely powerful.

28
00:02:03.530 --> 00:02:09.080
So that's kind of the first step onto being able to do a whole bunch of exciting things with your apps

29
00:02:09.890 --> 00:02:10.990
or read them.

30
00:02:11.060 --> 00:02:14.720
There are quite a few steps to this or when Year in advance but you are going to learn a lot of stuff

31
00:02:14.960 --> 00:02:20.520
about Android as we go and we're going to start off by creating a new class

32
00:02:23.390 --> 00:02:26.770
so we're going to use public class to create our class.

33
00:02:26.780 --> 00:02:27.860
I remember a class.

34
00:02:27.950 --> 00:02:34.070
Nothing to be scared of is just a collection of methods and variables that we can use in our app and

35
00:02:34.070 --> 00:02:36.330
really although what we're creating here is a class.

36
00:02:36.380 --> 00:02:38.390
It's basically just a method.

37
00:02:38.420 --> 00:02:45.390
So to be using it just to run the process of downloading some web content.

38
00:02:46.790 --> 00:02:50.700
So I'm going to call it download task.

39
00:02:50.700 --> 00:02:55.640
It's a task because we're doing something and I've used a capital D that because classes normally start

40
00:02:55.910 --> 00:03:00.650
the first word with a capital letter unlike variables.

41
00:03:00.650 --> 00:03:12.950
Now this class is going to be a special class which is going to extend another class called async task.

42
00:03:12.980 --> 00:03:13.430
There it is.

43
00:03:13.440 --> 00:03:16.520
Now before I lose you don't worry about async task.

44
00:03:16.550 --> 00:03:23.790
All it is is a way of running your code on a different thread to the thread that we're used to.

45
00:03:24.020 --> 00:03:27.270
So we run most of our code so far in the uncreate method.

46
00:03:27.410 --> 00:03:30.420
This is known as the main thread or the UI thread.

47
00:03:30.440 --> 00:03:35.780
Now it's advised by Google and it's generally a very good idea to run any code which could take a fair

48
00:03:35.780 --> 00:03:39.880
bit of time on a different thread to the main thread.

49
00:03:40.130 --> 00:03:45.260
Now that's simply for the reason that we don't want to delay the running of the UI thread because that's

50
00:03:45.260 --> 00:03:48.540
the bit that displays the app itself to the user.

51
00:03:48.830 --> 00:03:53.930
So really what we're doing here is just creating some code that will be run in the background.

52
00:03:53.950 --> 00:03:57.160
That's what async task allows us to do.

53
00:03:57.440 --> 00:04:02.320
Now I think task takes three variables.

54
00:04:02.390 --> 00:04:05.520
The first is usually of a type string.

55
00:04:05.540 --> 00:04:08.540
The second I'm going to call void.

56
00:04:08.780 --> 00:04:12.260
And the third again is usually of a type string.

57
00:04:12.260 --> 00:04:15.440
Now these three do very different things.

58
00:04:16.190 --> 00:04:22.610
So this first one is the type of variable that we're going to send to this class to instruct it what

59
00:04:22.610 --> 00:04:23.740
to do.

60
00:04:23.780 --> 00:04:29.960
So as you might anticipate we're going to send a u r l a particular location which in this case is going

61
00:04:29.960 --> 00:04:32.400
to be this string here.

62
00:04:32.720 --> 00:04:37.130
CBS dot either way posting Ducrot UK.

63
00:04:37.250 --> 00:04:42.480
So this is the type of data that we want to send to our download task.

64
00:04:42.950 --> 00:04:50.300
This middle tribute is the name of the method that we may or may not use to show the progress of this

65
00:04:50.300 --> 00:04:50.990
task.

66
00:04:51.170 --> 00:04:55.430
So if we were downloading a big file for example that we knew was going to take five or ten minutes

67
00:04:55.670 --> 00:04:58.990
we might have a separate method which shows on a progress bar.

68
00:04:59.120 --> 00:05:04.160
How far along that is and that's where we would put the name of that particular method.

69
00:05:04.400 --> 00:05:05.450
But we're not going to do that here.

70
00:05:05.480 --> 00:05:07.080
So we're just going to void.

71
00:05:07.640 --> 00:05:15.440
And finally this third variable type is the type of variable that's going to be returned by the download

72
00:05:15.440 --> 00:05:16.750
task force.

73
00:05:17.030 --> 00:05:18.450
And actually we don't need this.

74
00:05:18.470 --> 00:05:21.980
We're going to return the well content has a string.

75
00:05:21.980 --> 00:05:22.790
All right.

76
00:05:22.790 --> 00:05:24.070
Hopefully that makes sense.

77
00:05:24.230 --> 00:05:30.410
If not feel free to go back and have another listen to that and also feel free to google izing task

78
00:05:30.500 --> 00:05:33.810
get some more information about it as a load of stuff that you can do with it.

79
00:05:33.860 --> 00:05:37.610
I'm just giving you the information that you need right now if you're curious.

80
00:05:37.610 --> 00:05:41.180
Feel free to post the video and go and find out more.

81
00:05:41.840 --> 00:05:48.380
Now you can see we've got some red underlining there that's just because we're not using yet a critical

82
00:05:48.380 --> 00:05:51.360
method in this task.

83
00:05:51.650 --> 00:05:57.890
So I just tapped on the light bulb and selected implement methods and that's going to implement the

84
00:05:57.890 --> 00:05:59.730
default method that we need.

85
00:06:01.240 --> 00:06:02.550
Which is this one here.

86
00:06:02.680 --> 00:06:05.020
It's actually implemented outside of our class.

87
00:06:05.020 --> 00:06:08.000
I'm just going to pop it back in.

88
00:06:08.080 --> 00:06:08.930
There we go.

89
00:06:09.370 --> 00:06:10.850
So now we've lost that area.

90
00:06:11.320 --> 00:06:12.950
So now we've got some more weirdness.

91
00:06:12.970 --> 00:06:17.930
We've got this do in background protected string and a string dot dot dot.

92
00:06:17.950 --> 00:06:19.590
Don't worry I'm going to talk you through that.

93
00:06:19.630 --> 00:06:22.830
And that is I think the last bit of major weirdness in this lecture.

94
00:06:22.840 --> 00:06:24.390
So don't panic too much.

95
00:06:25.120 --> 00:06:32.080
So this protected key word here is a bit like public but it means that this string can be accessed from

96
00:06:32.110 --> 00:06:38.770
anywhere in the package not just this class and not even just this java file it can be accessed anywhere

97
00:06:38.770 --> 00:06:40.000
in the package.

98
00:06:40.000 --> 00:06:42.380
So basically any way in your app.

99
00:06:42.490 --> 00:06:49.320
And that's because this do in background bearable is a built in part of async task which is this back

100
00:06:49.320 --> 00:06:53.820
up thread that I was talking about which again can be accessed anywhere in your app.

101
00:06:53.920 --> 00:06:55.930
So that's all the protected means.

102
00:06:56.260 --> 00:07:02.970
And and now we've got this last bit of strangeness the string dot dot dot.

103
00:07:03.130 --> 00:07:08.040
Now that's known as var OGs and it's a relatively new variable type in Java.

104
00:07:08.220 --> 00:07:11.260
Now you can more or less think of it as an array.

105
00:07:11.470 --> 00:07:15.890
It's very very similar to an array in that this will contain a bunch of strings.

106
00:07:15.950 --> 00:07:18.960
We have sent to this download task.

107
00:07:19.420 --> 00:07:20.530
Why don't we just use an array.

108
00:07:20.530 --> 00:07:21.430
I hear you ask.

109
00:07:21.580 --> 00:07:27.390
Well mostly because doing background forces us to use Vohra dogs but it is reasonably useful.

110
00:07:27.550 --> 00:07:29.540
I'll show you how.

111
00:07:30.760 --> 00:07:36.310
So now that we've created our download task obviously it doesn't really do anything yet but we can call

112
00:07:36.310 --> 00:07:45.640
it from our own create method as usual and we do something like this will create a new variable of type

113
00:07:45.640 --> 00:07:53.370
download task and we'll call it task and it's going to be a new download task

114
00:07:56.500 --> 00:08:00.500
then we're going to take our task and execute it.

115
00:08:03.230 --> 00:08:09.010
And because we said that we wanted to send some strings into it let's do that.

116
00:08:09.530 --> 00:08:14.430
So the string that we wanted to send to our

117
00:08:18.480 --> 00:08:20.940
download task was this one.

118
00:08:21.540 --> 00:08:27.240
So if we run this we will in a minute with a couple of slight tweaks but if we run this we would be

119
00:08:27.240 --> 00:08:35.400
sending the string everywhere eco representing the UK to the download task would be stored as an array

120
00:08:36.150 --> 00:08:38.430
called paradigms.

121
00:08:38.430 --> 00:08:44.130
Now as I mentioned it's not quite an array it's a Ogg's but that just works differently because it allows

122
00:08:44.130 --> 00:08:48.330
us to do something like this.

123
00:08:48.610 --> 00:08:57.670
So let's say I wanted to download to you our L's so you can get this thing and stack overflow dot com

124
00:08:57.670 --> 00:08:59.850
for example.

125
00:09:00.000 --> 00:09:07.730
So the difference to an array because this wouldn't quite work in if the parameter variable was an array.

126
00:09:07.750 --> 00:09:14.830
I would have to create it as an array like that which wouldn't work here.

127
00:09:15.280 --> 00:09:21.970
So really it's an it's a way of being able to add as many parameters as we like in how cool to the task

128
00:09:22.300 --> 00:09:26.390
without having to specify at this point how many there are.

129
00:09:26.680 --> 00:09:30.450
But other than that you really can think of our dogs as just like an array.

130
00:09:31.870 --> 00:09:34.150
Again I don't want to go into that in too much detail.

131
00:09:34.150 --> 00:09:36.850
Now if you want to learn more about frogs have a quick google.

132
00:09:37.000 --> 00:09:39.080
V I R G S.

133
00:09:39.220 --> 00:09:41.700
But for now I'm going to focus on this.

134
00:09:42.250 --> 00:09:47.980
So before we actually create the code to download the Web site let's just see how this all fits together

135
00:09:48.010 --> 00:09:53.470
and just run this to display this variable in the logs.

136
00:09:54.160 --> 00:09:57.910
So if I want to access this variable here I would

137
00:10:02.280 --> 00:10:06.030
something like log dot I

138
00:10:11.960 --> 00:10:18.010
you r l and then primes zero.

139
00:10:20.580 --> 00:10:20.910
There we go.

140
00:10:21.030 --> 00:10:29.400
So just like an array I would take the zeroth member of the array of strings that has been sent and

141
00:10:29.400 --> 00:10:36.380
then I did say up here that this was going to return a string.

142
00:10:36.430 --> 00:10:39.310
So I'll just return done for now.

143
00:10:40.910 --> 00:10:43.390
And then how do we get the value that's written down here.

144
00:10:43.420 --> 00:10:43.890
What we do

145
00:10:46.910 --> 00:10:56.670
is we create a string that I'll call result said he called to task don't execute and then we add don't

146
00:10:56.760 --> 00:10:59.000
get on the end.

147
00:10:59.280 --> 00:11:08.500
So this then gets the result of this task and puts it in the variable result we get to then see the

148
00:11:08.500 --> 00:11:09.190
result.

149
00:11:09.430 --> 00:11:10.780
So let's just log it

150
00:11:18.360 --> 00:11:19.010
that we get.

151
00:11:19.110 --> 00:11:22.150
And you can see we've got another error here.

152
00:11:22.170 --> 00:11:25.490
If we just have a look and see where that is haha.

153
00:11:25.860 --> 00:11:31.050
We need to surround it with try and catch.

154
00:11:31.080 --> 00:11:35.530
So this is because we're calling a task within async task.

155
00:11:35.700 --> 00:11:38.910
And whenever you do that you have to use try and catch.

156
00:11:39.060 --> 00:11:45.070
And in fact it's given us two different catches the interrupted exception and the execution exception.

157
00:11:45.270 --> 00:11:47.630
So this is because it's happening on a different thread.

158
00:11:47.850 --> 00:11:52.470
So we have to keep track of the fact that it could go wrong.

159
00:11:52.560 --> 00:11:54.840
I'm just going to give that a little bit more space.

160
00:11:56.590 --> 00:11:59.340
You can see we've got those two types of exception there.

161
00:11:59.680 --> 00:12:05.080
And we've also got this method that we haven't seen before print stack trace.

162
00:12:05.170 --> 00:12:10.810
So that's a method that's just very useful it prints all the information that we might want about the

163
00:12:10.810 --> 00:12:13.950
error that occurred or the exception that occurred.

164
00:12:13.960 --> 00:12:17.630
So it's a good way to send an error to your logs.

165
00:12:18.430 --> 00:12:19.190
Right.

166
00:12:19.240 --> 00:12:23.170
So a lot of new stuff there but hopefully that mostly makes sense.

167
00:12:23.710 --> 00:12:33.710
Let's just run that and we should then get the R L printed in the console and then the string that's

168
00:12:33.710 --> 00:12:40.410
returned from that class also printed in the can so on the results there.

169
00:12:40.980 --> 00:12:47.220
So what we have so far is really just a kind of default async task set up which doesn't really do anything

170
00:12:47.220 --> 00:12:53.040
interesting but it does run some code in the background thread.

171
00:12:53.250 --> 00:12:58.410
So if ever you need to do that then this is your kind of structure for setting that up.

172
00:12:58.500 --> 00:12:59.400
And here we.

173
00:12:59.550 --> 00:13:05.970
I just go back up there you can see we've got two important lines difficult to find a little bit inside

174
00:13:06.420 --> 00:13:07.100
the rest of everything.

175
00:13:07.110 --> 00:13:10.170
But there they are.

176
00:13:10.170 --> 00:13:17.240
So there's our u r l TPSAC K repasting And there's our result done.

177
00:13:17.550 --> 00:13:18.160
All right.

178
00:13:18.450 --> 00:13:24.930
So nothing on the surface of it particularly novel that but we have done something pretty critical and

179
00:13:24.930 --> 00:13:32.050
that is we've run a task on the background thread within async task.

180
00:13:32.070 --> 00:13:33.830
So generally a very powerful thing today.

181
00:13:33.990 --> 00:13:39.150
Specifically a very important thing to do if we're going to be doing something that runs for potentially

182
00:13:39.150 --> 00:13:43.500
quite a long time like dühring downloading some content from the web.

183
00:13:43.500 --> 00:13:43.970
All right.

184
00:13:43.980 --> 00:13:52.090
So now finally we're in a position to write our code to download this web content if we get them.

185
00:13:52.170 --> 00:13:59.400
We're going to start by creating a string called result which is going to be where we store the actual

186
00:13:59.400 --> 00:14:11.750
HDMI content of eco reposting to the UK then we're going to create a u r l variable called u r l which

187
00:14:11.750 --> 00:14:13.400
initially is going to be empty.

188
00:14:15.430 --> 00:14:21.850
And a u r l is a little bit different to a string even though it is basically a string.

189
00:14:21.850 --> 00:14:27.370
It has to be in the right format to be able to make it a u r l and it needs to have a variable type

190
00:14:27.370 --> 00:14:31.210
of u r l to allow us to use it as a u r l.

191
00:14:31.930 --> 00:14:40.510
And finally while we're creating variables we need a variable of type h t t p u r l connection and we'll

192
00:14:40.510 --> 00:14:42.300
call it u r l connection.

193
00:14:42.910 --> 00:14:46.060
And initially it's going to be null.

194
00:14:46.300 --> 00:14:52.300
So just empty you can think of p u r l connection as being a bit like a browser.

195
00:14:52.450 --> 00:14:57.790
So we're kind of opening up a browser here and we're going to use it to fetch the contents of a u r

196
00:14:57.790 --> 00:15:00.590
l that's more or less what's going on.

197
00:15:00.590 --> 00:15:05.160
And now we're going to do a couple of things which could result in errors.

198
00:15:05.320 --> 00:15:12.700
So we're going to surround this with our try and catch.

199
00:15:12.810 --> 00:15:21.210
And I'm just going to have a general exception a as my catch.

200
00:15:21.210 --> 00:15:27.090
And then if we do get an exception I'm going to print the stack trace which of course just gives the

201
00:15:27.090 --> 00:15:29.820
details of the exception.

202
00:15:30.780 --> 00:15:34.350
So the first thing that we're going to do which could possibly result in an era is again to try and

203
00:15:34.350 --> 00:15:44.710
convert the string that we've passed to the do in background method as a u r l.

204
00:15:45.100 --> 00:15:53.840
So we're going to take you around and create a new U R L and we're going to do that from the variables

205
00:15:53.840 --> 00:15:56.750
that was passed to the different background method.

206
00:15:56.750 --> 00:16:00.990
Now this is previous so called parens which is a little bit vague so I'm going to call it.

207
00:16:01.010 --> 00:16:03.140
You are Elle's.

208
00:16:03.140 --> 00:16:06.050
So we know that this is only ever going to contain one.

209
00:16:06.050 --> 00:16:08.740
U r l it could possibly contain more.

210
00:16:08.990 --> 00:16:12.080
So just to make it clear that this is not quite an array.

211
00:16:12.080 --> 00:16:15.690
Remember it's a Vargus but we can think of it as an array.

212
00:16:15.740 --> 00:16:21.500
And so I'm going to call you or else because it could contain many different you or else but we obviously

213
00:16:21.530 --> 00:16:23.620
only interested in the first one.

214
00:16:23.960 --> 00:16:26.760
So we're going to create you ourselves.

215
00:16:26.810 --> 00:16:28.000
Zero right.

216
00:16:28.550 --> 00:16:34.740
So this could possibly give us an era or an exception if this was malformed for example.

217
00:16:34.740 --> 00:16:42.140
So if I just sent it like that then we'd get an exception because that's not a valid you are el.

218
00:16:42.500 --> 00:16:46.340
But we can rely on our code so we're very unlikely to get this exception.

219
00:16:46.370 --> 00:16:50.440
But we've got it there just in case we do.

220
00:16:50.480 --> 00:16:51.180
All right.

221
00:16:51.380 --> 00:16:57.680
So now that we've got you are all set up we're going to set up our u r l connection which is a bit like

222
00:16:57.680 --> 00:17:09.850
opening our browser window and we do this from you r l and then within our YOU Arel we open a connection.

223
00:17:09.920 --> 00:17:19.940
Now that doesn't have a type of HTP connection so we need to cast it as an h t t p u r l connection

224
00:17:20.060 --> 00:17:28.010
so that it matches up with the type that we created a real connection with him.

225
00:17:28.040 --> 00:17:34.770
So now we've effectively opened the browser window and started to attempt the load of u r l.

226
00:17:34.850 --> 00:17:40.210
Now we need to actually do that load and we do that using an input stream

227
00:17:43.570 --> 00:17:54.910
and we normally call that input stream in have the necessary code for that and we get that from our

228
00:17:55.060 --> 00:18:01.400
connection at get input stream.

229
00:18:01.630 --> 00:18:02.710
So you can imagine what that is.

230
00:18:02.710 --> 00:18:09.130
This is just a stream to hold the input of data as it comes in.

231
00:18:09.130 --> 00:18:11.610
We then need to be able to read that data.

232
00:18:11.950 --> 00:18:20.580
So we're going to create an input stream reader which I'm just going to go read up like that.

233
00:18:20.830 --> 00:18:32.650
And that's going to be a new input stream Rita and we're going to create it with our input stream which

234
00:18:32.650 --> 00:18:41.600
is in so we're kind of building up our system to read the contents of that you are l and we actually

235
00:18:41.600 --> 00:18:44.410
do that one character at a time.

236
00:18:44.870 --> 00:18:56.530
So we're going to create a variable called data which is going to be equal to a reader dot red which

237
00:18:56.740 --> 00:19:04.180
will keep track of the location through the DML content that we're currently on.

238
00:19:04.180 --> 00:19:12.630
So we're going to have a WHILE loop which will keep on going as long as data is not equal t minus 1

239
00:19:13.840 --> 00:19:20.140
and that's slightly weird but what happens is data will count three so 0 1 2 3 4 5 etc. then just keep

240
00:19:20.140 --> 00:19:26.440
on going while it's reading characters through the contents of the U R L and it will keep going.

241
00:19:26.440 --> 00:19:31.020
And then once it gets to the end it will have a value of minus one.

242
00:19:32.170 --> 00:19:35.740
So that's why we can use this wildly to read our data.

243
00:19:36.190 --> 00:19:44.620
Then we're going to create a char character which will call current because it's the current character

244
00:19:44.620 --> 00:19:50.630
that's being read from the file and that's getting to be equal to data.

245
00:19:51.040 --> 00:19:51.500
But

246
00:19:54.890 --> 00:20:04.490
because data is an integer we want to cast that as a character that will essentially get whatever the

247
00:20:04.490 --> 00:20:09.840
current character is that's being downloaded from the stream from the RL.

248
00:20:10.640 --> 00:20:16.390
Then almost finally we're going to append that to result

249
00:20:20.510 --> 00:20:20.930
like that.

250
00:20:20.930 --> 00:20:26.390
So what we're essentially doing is we're continually reading characters from the input stream reader

251
00:20:26.690 --> 00:20:28.290
and adding them to results.

252
00:20:28.320 --> 00:20:34.790
Results are going to end up being a big string containing all of the characters of the HVM all of that

253
00:20:34.790 --> 00:20:37.060
site.

254
00:20:37.090 --> 00:20:49.020
Finally we tell data to move on to the next character.

255
00:20:49.160 --> 00:20:50.330
So like that.

256
00:20:50.510 --> 00:20:56.790
So this just means data is going to keep on going and looping through all the characters in this stream.

257
00:20:56.810 --> 00:21:02.000
So in the contents of the RL until it gets to the last one at which point it will have a value of minus

258
00:21:02.000 --> 00:21:03.970
one and it will be finished.

259
00:21:04.520 --> 00:21:06.480
And believe it or not we're now there.

260
00:21:06.680 --> 00:21:11.860
So what we can do is return

261
00:21:15.590 --> 00:21:16.380
results.

262
00:21:17.970 --> 00:21:27.360
So that means the result of this is we're turned back to the original task and then we can print it

263
00:21:27.360 --> 00:21:29.540
out here.

264
00:21:33.380 --> 00:21:41.280
So I'll just change the label to have contents of you Arel and then I'm going to get rid of this returned

265
00:21:41.300 --> 00:21:42.350
done.

266
00:21:42.350 --> 00:21:45.470
Actually that might well cause problems where it is because

267
00:21:48.730 --> 00:21:51.580
and I'm just going to pop in I return

268
00:21:55.930 --> 00:22:04.210
failed to catch this exception so if we go back here then we could do a check to see if results equals

269
00:22:04.220 --> 00:22:09.830
failed then do something show the user that this failed but we didn't need to do that this time because

270
00:22:09.830 --> 00:22:11.640
we're just checking the logs anyway.

271
00:22:13.150 --> 00:22:13.610
All right.

272
00:22:13.630 --> 00:22:18.580
There was one more thing that we need to do before we run out and that is we have to request permission

273
00:22:18.820 --> 00:22:26.980
to use the internet connection because that's a special privilege that the user may deny us and we do

274
00:22:26.980 --> 00:22:32.330
that over in manifests and then in the Android manifest file.

275
00:22:32.380 --> 00:22:33.910
So we haven't really looked in here before.

276
00:22:33.970 --> 00:22:38.450
But if you've done any iOS development this is very similar to the info Doppie list file.

277
00:22:38.530 --> 00:22:44.080
Essentially it contains a bunch of information about your app like the name of the app and a few other

278
00:22:44.080 --> 00:22:44.560
pieces.

279
00:22:44.650 --> 00:22:49.120
And it's also the place where you ask for specific permissions.

280
00:22:49.120 --> 00:22:53.830
So if you were to ask for permission than you normally do up here just before the application section

281
00:22:53.860 --> 00:22:54.520
there.

282
00:22:54.820 --> 00:22:57.400
And we do it like this.

283
00:22:57.400 --> 00:23:08.790
So we have it uses dash permission and then the name of the permission is Android Daut permission dot

284
00:23:10.400 --> 00:23:12.230
Let's get that right.

285
00:23:12.520 --> 00:23:19.000
Internet and then we close that tag like that.

286
00:23:19.000 --> 00:23:22.380
So you have to obviously get that exactly right.

287
00:23:22.660 --> 00:23:26.160
And then this will pop up if your app ever makes it into Google Play.

288
00:23:26.180 --> 00:23:31.570
Then this will pop up in Google Play and it will show the user that this app is going to use their internet

289
00:23:31.570 --> 00:23:32.210
connection.

290
00:23:33.400 --> 00:23:39.640
So generally it's a good idea to show the user that you have a good reason for using their internet

291
00:23:39.640 --> 00:23:46.100
connection rather than just putting that permission in that right.

292
00:23:46.560 --> 00:23:47.630
So fingers crossed

293
00:23:51.580 --> 00:23:52.850
let's see what we get.

294
00:23:53.380 --> 00:23:55.900
OK there we go you might just be able to make out that.

295
00:23:55.900 --> 00:24:08.010
Here is the full contents of the web posting to current UK fantastic.

296
00:24:08.030 --> 00:24:08.360
All right.

297
00:24:08.360 --> 00:24:09.940
And so that's it.

298
00:24:10.100 --> 00:24:16.340
You may feel that we've got to work harder than you expected to get this built but we've done a lot

299
00:24:16.340 --> 00:24:20.870
of really quite complex stuff that we've learned about this try and catch set up.

300
00:24:21.050 --> 00:24:29.270
And we've learned how to use this quite complicated async task idea to run a task in the background.

301
00:24:29.750 --> 00:24:34.460
Fortunately it's all been well worth it because we're now able to do something really powerful namely

302
00:24:34.460 --> 00:24:37.790
grab content from anywhere on the Web.

303
00:24:38.090 --> 00:24:43.910
We're now going to take that a step further and see how to download images and display them directly

304
00:24:44.150 --> 00:24:44.780
in our apps.
