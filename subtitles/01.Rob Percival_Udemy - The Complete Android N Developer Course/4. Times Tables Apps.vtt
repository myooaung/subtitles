WEBVTT
1
00:00:00.620 --> 00:00:06.950
So now that we know how to work with array lists and list views we're going to put that knowledge together

2
00:00:06.950 --> 00:00:12.700
with what we learnt about sequels in the previous section to create a times table app.

3
00:00:12.920 --> 00:00:18.530
So the idea here is that if you've got a young child who is learning their times tables then you could

4
00:00:18.530 --> 00:00:25.370
give them this app or use it yourself to generate the first 20 times tables to display those to the

5
00:00:25.370 --> 00:00:26.250
user.

6
00:00:26.810 --> 00:00:31.270
So I'm going to show you what we're going to make and this is it.

7
00:00:31.280 --> 00:00:37.120
We're going to have a slide along the top or seek bar along the top and then when you up to date they

8
00:00:37.130 --> 00:00:39.000
seek bar by dragging it back and forth.

9
00:00:39.050 --> 00:00:44.450
You get the appropriate times table and notice we're not particularly interested in a zero time table

10
00:00:44.450 --> 00:00:45.860
so I've stopped it going there.

11
00:00:46.070 --> 00:00:51.170
And it minimizes out at the first times table.

12
00:00:51.210 --> 00:00:52.740
So that's what we're creating.

13
00:00:52.770 --> 00:00:58.280
I definitely think you have all the skills to make this yourself so do your absolute best to do that.

14
00:00:58.290 --> 00:00:59.730
I wish you the best of luck.

15
00:00:59.780 --> 00:01:06.520
Go for.

16
00:01:06.580 --> 00:01:07.270
All right.

17
00:01:07.600 --> 00:01:13.050
Well I'm going to start Of course by creating a new project.

18
00:01:14.430 --> 00:01:17.070
I'll call it times tables.

19
00:01:18.670 --> 00:01:27.940
And all the folds and I'm going to create the slides first and then the list view so that it nicely

20
00:01:27.940 --> 00:01:30.950
appears underneath the slider.

21
00:01:31.570 --> 00:01:34.480
So let's get rid of Helliwell text view.

22
00:01:36.310 --> 00:01:39.180
And then bring in our seat about

23
00:01:43.760 --> 00:01:44.420
here we go.

24
00:01:44.460 --> 00:01:51.030
So I'm going to make it the same with as the parent.

25
00:01:51.060 --> 00:01:53.980
So that should stretch it out to the full width.

26
00:01:54.090 --> 00:01:54.930
Fantastic.

27
00:01:58.410 --> 00:02:04.710
And then all I'm going to do is change the ID and because this sick bar is going to keep track of which

28
00:02:04.710 --> 00:02:06.220
times table we're on.

29
00:02:06.330 --> 00:02:12.430
I'm going to call it times table seek about

30
00:02:15.720 --> 00:02:17.970
quite tricky to see all of that.

31
00:02:18.160 --> 00:02:19.150
I'll just try that again.

32
00:02:22.330 --> 00:02:24.020
Times table see Bob every day.

33
00:02:24.040 --> 00:02:27.630
I just want to capitalize the s.

34
00:02:27.760 --> 00:02:28.580
All right.

35
00:02:28.580 --> 00:02:34.240
And while we're here we're at the list view as well.

36
00:02:34.500 --> 00:02:38.320
So just underneath the seat bar there we go.

37
00:02:38.340 --> 00:02:45.290
And by default it's going to stretch out nicely.

38
00:02:45.310 --> 00:02:54.750
So once again I'll just change the ID to times table list few smushing.

39
00:02:55.270 --> 00:02:58.960
So let's deal with our seek first and make that interactive

40
00:03:01.980 --> 00:03:05.390
and then we'll work with the list you.

41
00:03:05.900 --> 00:03:08.510
Say let's find it first off.

42
00:03:09.600 --> 00:03:12.630
So seek to import that

43
00:03:17.930 --> 00:03:20.860
times table seek.

44
00:03:22.250 --> 00:03:30.320
And we're going to want to cast it to a sick bar and we'll get it using find view by id resources dot

45
00:03:30.440 --> 00:03:37.210
ID dot times table seatback.

46
00:03:37.600 --> 00:03:43.480
And while we're here I think I'll create the this view as well.

47
00:03:49.160 --> 00:03:53.220
Kind of makes sense to put the two together.

48
00:03:53.540 --> 00:03:59.660
So this is going to be a list the fine view by ID.

49
00:04:00.590 --> 00:04:03.230
We should be pretty good at this by now.

50
00:04:03.290 --> 00:04:05.290
Times table list.

51
00:04:06.860 --> 00:04:07.550
All right.

52
00:04:07.880 --> 00:04:12.800
Now I want my times tables to go from 1 to 20.

53
00:04:12.800 --> 00:04:23.470
So let's take our time table seek ball and set the max to 20.

54
00:04:23.480 --> 00:04:24.100
Great.

55
00:04:24.410 --> 00:04:30.050
Unfortunately there's no set to mean method to set the minimum So we're going to have to add some code

56
00:04:30.050 --> 00:04:37.000
in manually in our own progress changed method to put in our minimum.

57
00:04:37.190 --> 00:04:46.910
I would like to set an initial value so that we can do very easily using times table seek bar set progress.

58
00:04:46.910 --> 00:04:50.900
Remember progress is what we use to refer to the value of the seat.

59
00:04:50.910 --> 00:04:55.840
So if you think of it as a progress bar going from left to right that makes a bit more sense.

60
00:04:55.910 --> 00:05:01.570
So we're going to start in the middle with the progress value of 10.

61
00:05:01.640 --> 00:05:03.420
Now we'll set our methods.

62
00:05:03.770 --> 00:05:09.980
So times table seek bar don't set on Seek bar change listener.

63
00:05:10.550 --> 00:05:14.600
So remember this sets up a listener which will call the methods within.

64
00:05:14.600 --> 00:05:20.300
Whenever the Sikh is updated by the user or indeed by our app as well.

65
00:05:20.990 --> 00:05:28.360
So we are going to want a new on Seek kabar change Lisner gives us all that lovely code.

66
00:05:28.610 --> 00:05:34.910
We're going to ignore the on start tracking touch and stop tracking touch methods because we don't need

67
00:05:34.910 --> 00:05:35.800
to do anything there.

68
00:05:35.840 --> 00:05:40.200
We only need to do something when the progress is actually changed.

69
00:05:40.190 --> 00:05:45.580
And this is why we're going to add in my code to set the minimum.

70
00:05:45.600 --> 00:05:49.850
I'm going to do this in a more general way so that you can use

71
00:05:52.830 --> 00:05:57.780
this code whenever you want to have a minimum value in your belt.

72
00:05:57.960 --> 00:06:02.190
So we're going to have a minimum of one and then we're just going to check if

73
00:06:05.480 --> 00:06:12.370
progress is less than 1.

74
00:06:12.540 --> 00:06:18.880
Then we want to actually essentially use a progress of one.

75
00:06:18.990 --> 00:06:22.460
So what I'm going to do is bring in a another variable called times

76
00:06:26.530 --> 00:06:26.940
table

77
00:06:29.860 --> 00:06:36.700
which is not going to have a value initially but if progress is less than sorry by one I mean the minimum

78
00:06:37.180 --> 00:06:38.560
to make it more general.

79
00:06:38.660 --> 00:06:49.310
So if progress is less than the minimum we can at times table equal to the minimum otherwise we can

80
00:06:49.360 --> 00:06:57.530
set times table equal to progress so hopefully that makes sense.

81
00:06:57.550 --> 00:07:02.920
We've got a minimum here that we could change to any value and we've got a times table which is going

82
00:07:02.920 --> 00:07:06.520
to be the name of the times table that we're going to use.

83
00:07:06.520 --> 00:07:12.310
And then if they progress turns out to be less than the minimum then we're going to set times table

84
00:07:12.310 --> 00:07:19.860
equity a.m. so you can use that whenever you want a certain minimum value to be used within your seat.

85
00:07:20.800 --> 00:07:22.950
So for now we'll just log

86
00:07:27.520 --> 00:07:29.200
the seek by valley

87
00:07:34.990 --> 00:07:35.690
import that

88
00:07:39.090 --> 00:07:41.100
and remember we're going to log.

89
00:07:41.100 --> 00:07:42.580
Times table.

90
00:07:43.800 --> 00:07:49.430
And we do that using integer to string and then times table

91
00:07:54.450 --> 00:07:55.000
that we get.

92
00:07:55.110 --> 00:08:01.560
So we're running the app now I think if we've done everything right we should see that the progress

93
00:08:01.560 --> 00:08:06.690
is in the middle of the sequel and initially has a value of 10 and then we drank when we drag it up

94
00:08:06.690 --> 00:08:07.430
and down.

95
00:08:07.470 --> 00:08:09.060
We'll see in the logs that the value

96
00:08:11.940 --> 00:08:24.270
goes all the way up to 20 but only down to 1.

97
00:08:24.350 --> 00:08:24.710
Yep.

98
00:08:24.720 --> 00:08:26.110
So values nicely in the middle.

99
00:08:26.120 --> 00:08:35.810
And then as I drag it up 11 12 13 14 15 16 to 20 and then drag it all the way down and it stops at 1

100
00:08:37.320 --> 00:08:38.540
fantastic.

101
00:08:38.580 --> 00:08:43.290
One small thing that you might be thinking that you don't actually want the seat bar to go all the way

102
00:08:43.290 --> 00:08:51.000
down to zero when your value is one that's fairly easy to fix.

103
00:08:51.000 --> 00:08:56.980
We just update the sick bar when the user tries to drag it down and set it back to 1.

104
00:08:57.900 --> 00:09:09.280
So we can do that using time saved will seek Bob does set progress again to the minimum.

105
00:09:09.830 --> 00:09:17.040
So let's just have a quick look and make sure that that works in the way that we wanted to use it should

106
00:09:17.040 --> 00:09:19.600
now not be able to drag it all the way to the left

107
00:09:25.720 --> 00:09:26.390
you'll be gay.

108
00:09:26.440 --> 00:09:29.210
So I'm dragging dragging dragging and there you go.

109
00:09:29.470 --> 00:09:30.980
I can't drag it anymore.

110
00:09:31.030 --> 00:09:34.260
To the left.

111
00:09:35.410 --> 00:09:37.830
So now we've got our Sipah up and running.

112
00:09:38.550 --> 00:09:39.330
Let's get our

113
00:09:43.480 --> 00:09:44.780
list view in place.

114
00:09:44.790 --> 00:09:46.250
We need one of them.

115
00:09:51.810 --> 00:10:04.840
Down here so let's start with a time table family of 10 which we're going to see because I seek power

116
00:10:04.870 --> 00:10:09.310
initially on 10 so it's going to be confusing if we start with anything else.

117
00:10:09.460 --> 00:10:12.320
So I have a timetable value of 10.

118
00:10:12.390 --> 00:10:18.700
So now to create our times table we're going to create it of course as an array list.

119
00:10:18.700 --> 00:10:25.270
And I want an array list of strings even though they're going to be numbers because I'm going to be

120
00:10:25.270 --> 00:10:28.360
displaying them on the table.

121
00:10:28.450 --> 00:10:32.740
So we're going to convert each of our into just strings before we put it in the array.

122
00:10:34.890 --> 00:10:38.730
I'll call it times table content.

123
00:10:38.790 --> 00:10:45.620
And it is a new array list of strings

124
00:10:50.320 --> 00:10:50.810
that we get.

125
00:10:50.830 --> 00:10:58.750
Now we need to add the content to our list and I'm going to do that using a for loop could use any kind

126
00:10:58.750 --> 00:11:02.500
of leap really but I think four makes the most sense here.

127
00:11:03.160 --> 00:11:09.780
So we'll start by creating our accounts of variable i which is going to have an initial value of 1.

128
00:11:10.420 --> 00:11:14.750
We're going to keep going as long as I is less than or equal to 10.

129
00:11:15.040 --> 00:11:19.520
If you want to display a longer times table you can of course change that to 20 or something.

130
00:11:19.600 --> 00:11:29.980
But I'll leave it as 10 for now and then each time we want to increment by one which we do by I plus

131
00:11:29.980 --> 00:11:31.650
plus.

132
00:11:32.170 --> 00:11:34.060
All right now we've got our follow up.

133
00:11:34.090 --> 00:11:42.270
So all we have to do in each round of this loop is to add an item to times table content.

134
00:11:43.160 --> 00:11:58.840
So times table content don't add and then we want to had I times times table.

135
00:11:59.510 --> 00:12:02.000
So that will give us the number that we want.

136
00:12:02.000 --> 00:12:09.830
So when I goes from 1 to 3 then in this case we'll get 1 times 10 two times 10 three times 10 etc. which

137
00:12:09.830 --> 00:12:15.530
will give us the 10 times table if we change that to 9 then we would get 1 times 9 2 times 9 is such

138
00:12:15.530 --> 00:12:18.170
a way to give us the nine times table.

139
00:12:18.260 --> 00:12:20.520
So that's all good but this is going to be an integer.

140
00:12:20.840 --> 00:12:26.810
So we need to convert it to a string using integer Daut to string.

141
00:12:27.980 --> 00:12:34.530
And then the thing that we want to convert to a string is by Times time table.

142
00:12:34.610 --> 00:12:39.520
So this will give us the times table in the format that we want which is a string.

143
00:12:39.830 --> 00:12:48.630
So all that remains is to add this content to our list view which we of course do with an array adapter.

144
00:12:52.300 --> 00:12:57.230
You're going to create an array adapter of strings and we'll call it array adapter.

145
00:12:58.030 --> 00:13:08.090
And this is going to be a new array adapter of strings for the context of this type of Android.

146
00:13:08.180 --> 00:13:15.070
Dot dot lay out a simple list item one.

147
00:13:15.820 --> 00:13:20.560
And then we're going to get it from times table content

148
00:13:25.700 --> 00:13:33.680
and then all we need to do is apply that to our list view which if you remember was times table list

149
00:13:33.680 --> 00:13:35.790
view.

150
00:13:35.950 --> 00:13:44.540
So we'll set the adapter to be array adapter so let's just check that that works.

151
00:13:44.540 --> 00:13:49.920
We should now have what we do have a slide of the works and returns the correct value.

152
00:13:50.450 --> 00:13:56.390
We should have a table that shows the first 10 items in the 10 times table.

153
00:13:56.390 --> 00:14:03.500
Of course our final change will then be to actually update the table when the slider is moved.

154
00:14:03.700 --> 00:14:11.130
If we get say fantastic so our slides are looking good at times table is looking good.

155
00:14:11.300 --> 00:14:19.250
We can of course scroll that up and down and out slide out still hopefully returns values to the logs

156
00:14:19.430 --> 00:14:20.600
when we move it.

157
00:14:20.720 --> 00:14:21.400
Just take a look.

158
00:14:21.400 --> 00:14:24.400
There they are.

159
00:14:24.860 --> 00:14:30.320
So now we just need to update the times table when we move the slide up.

160
00:14:30.450 --> 00:14:39.240
So one option there would be to copy and paste the code for our times table produce production to where

161
00:14:40.020 --> 00:14:46.080
they seek par value is updated and that would be fine that would work but we don't really like duplicating

162
00:14:46.080 --> 00:14:52.590
code because then we have to update it twice etc. and it just looks a bit messier than it has to be.

163
00:14:52.710 --> 00:15:00.330
So instead of that I'm going to cut that code and then create a method

164
00:15:05.220 --> 00:15:11.240
say public FOID because it's returning nothing.

165
00:15:11.240 --> 00:15:12.370
I'll call it generate.

166
00:15:12.370 --> 00:15:14.150
Times table.

167
00:15:17.450 --> 00:15:20.810
And it's going to need an integer

168
00:15:25.140 --> 00:15:26.560
which will be the times table.

169
00:15:26.580 --> 00:15:28.590
That's actually being generated

170
00:15:32.310 --> 00:15:34.120
them we can paste that code in.

171
00:15:34.340 --> 00:15:36.470
And now we don't need to

172
00:15:39.330 --> 00:15:46.720
create that each time because it's going to be passed to the method by the script that calls that method.

173
00:15:48.530 --> 00:15:50.600
And that's a very good point here.

174
00:15:50.840 --> 00:15:57.680
So times table list view we can access that in a method up here because it's created in our own create

175
00:15:57.680 --> 00:15:59.120
method.

176
00:15:59.200 --> 00:16:00.880
So that's simple enough.

177
00:16:01.000 --> 00:16:05.710
We just need to create it outside here in the class

178
00:16:10.950 --> 00:16:11.520
and then

179
00:16:14.280 --> 00:16:22.720
it will just set its value in the create method.

180
00:16:22.720 --> 00:16:28.520
OK so now we just need to call that method down here.

181
00:16:29.130 --> 00:16:38.050
So I generate times table with the times table of 10 and then here instead of logging

182
00:16:42.630 --> 00:16:49.990
the value of the seek part we want to of course generate the times table and the times table that we

183
00:16:49.990 --> 00:16:55.470
want to generate Is times table which is essentially the value of the sequel.

184
00:16:55.930 --> 00:17:00.120
As long as it's one or more all right.

185
00:17:00.120 --> 00:17:04.210
So fingers crossed the app should now work exactly as we wanted to.

186
00:17:04.710 --> 00:17:11.610
So when we move the slider Well the seek bar back and forth should update the contents of the table

187
00:17:12.000 --> 00:17:20.310
with the appropriate times table.

188
00:17:21.760 --> 00:17:22.740
Fantastic.

189
00:17:22.740 --> 00:17:30.790
So if you've got a kid who's needing to learn that times tables this app might work very well both for

190
00:17:30.790 --> 00:17:32.330
you and for them.

191
00:17:34.200 --> 00:17:40.580
I hope you enjoy that as now go on and move away from list views and onto timer's.
