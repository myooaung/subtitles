1
00:00:00,810 --> 00:00:07,170
Android where apps are not generally aiming to be massive apps that you spend a lot of time on primarily

2
00:00:07,350 --> 00:00:12,630
smartwatch apps are to show the user quick bits of information or allow them to do quick tasks without

3
00:00:12,630 --> 00:00:15,140
taking their phone out of their pockets.

4
00:00:15,150 --> 00:00:21,210
That's the idea and that's why cards are so central to how Android Wear works.

5
00:00:21,210 --> 00:00:25,760
So a card is something very simple that looks more or less like this.

6
00:00:25,770 --> 00:00:29,120
So it's how you would show a quick bit of information to the user.

7
00:00:29,460 --> 00:00:34,520
So in this video we're going to see how to create cards and customize them a little bit.

8
00:00:34,520 --> 00:00:40,020
And by the way this site developed the Android dot com slash training site wearables is really useful

9
00:00:40,410 --> 00:00:44,390
if you want to figure out how to do anything with Android Wear.

10
00:00:44,400 --> 00:00:48,030
So I would recommend checking this out if you have any problems.

11
00:00:48,030 --> 00:00:52,440
All right so let's go and create our card fragment.

12
00:00:52,530 --> 00:00:58,540
I'm going to go back to our Android where demo app and work on that one for now.

13
00:00:58,650 --> 00:01:00,700
Get rid of the code that we added before.

14
00:01:01,170 --> 00:01:08,480
And let's head to the rectangular activity and this is where we're going to be doing most of our work.

15
00:01:09,120 --> 00:01:15,240
So first off you may have noticed that in the developing guide here we started off with something called

16
00:01:15,240 --> 00:01:17,570
a box inset layout.

17
00:01:17,860 --> 00:01:26,880
If I just jump over to again the Android training materials here in the box inset layout basically looks

18
00:01:27,480 --> 00:01:28,490
like this.

19
00:01:28,500 --> 00:01:33,600
So it's not the most efficient use of space but it will reasonably cleverly you fill in the gaps around

20
00:01:33,600 --> 00:01:39,720
the edge so it doesn't just look like a box like that but it is a convenient way to get a square layout

21
00:01:39,750 --> 00:01:46,550
on both screens so you could use exactly the same layout on your square and round screens.

22
00:01:47,100 --> 00:01:52,220
And that's what Google are recommending here so I'm going to use that as well.

23
00:01:52,500 --> 00:01:54,220
So let's just copy this carried over

24
00:01:57,120 --> 00:02:02,750
and replace our rectangular activity mine with that.

25
00:02:02,770 --> 00:02:04,490
I'm just going to get rid of that background there.

26
00:02:04,520 --> 00:02:06,180
We're not using that.

27
00:02:06,570 --> 00:02:07,920
You can see it's pretty straightforward.

28
00:02:07,920 --> 00:02:12,690
The only two options there are match parent for layout width and height.

29
00:02:12,960 --> 00:02:20,590
And similarly here we've now got a frame layout which simply matches the parent as well.

30
00:02:20,590 --> 00:02:26,040
So so far that doesn't actually show us anything because there's no content in there is only the frame

31
00:02:26,040 --> 00:02:26,820
layout.

32
00:02:27,300 --> 00:02:32,790
But that's when we need our Java.

33
00:02:32,850 --> 00:02:34,790
So let's copy this down.

34
00:02:39,680 --> 00:02:43,260
And we'll put it in the on lay out inflated method.

35
00:02:45,450 --> 00:02:46,440
And we'll just bring in

36
00:02:49,290 --> 00:02:50,750
all the necessary classes

37
00:02:53,710 --> 00:02:55,530
then let's just see what this is doing.

38
00:02:55,530 --> 00:03:01,570
So we're creating a fragment manager which we've seen manages a lot before obviously allows us to manage

39
00:03:01,630 --> 00:03:07,330
our fragment and that in this case we're creating a card fragment.

40
00:03:07,630 --> 00:03:14,170
Then we begin what's known as a fragment transaction which allows us to work with the fragment.

41
00:03:14,470 --> 00:03:23,730
Then we create a card fragment variable which is created with two strings and an image.

42
00:03:24,460 --> 00:03:26,700
So let's create those ourselves.

43
00:03:27,160 --> 00:03:28,660
We've got the title.

44
00:03:29,720 --> 00:03:32,500
So I'm just going to put.

45
00:03:32,500 --> 00:03:33,780
Hello Rob.

46
00:03:34,000 --> 00:03:34,900
We've got a message

47
00:03:37,760 --> 00:03:38,600
something like that.

48
00:03:38,690 --> 00:03:40,030
Hello how are you today.

49
00:03:40,040 --> 00:03:48,600
And you can see we can just leave it at that but we can also add an image which will be shown just that.

50
00:03:48,680 --> 00:03:52,540
So we're just looking for a small kind of icon image there.

51
00:03:53,750 --> 00:03:55,130
Just find one of the built in

52
00:03:57,700 --> 00:03:58,450
Icons

53
00:04:01,230 --> 00:04:01,980
how shall use

54
00:04:04,700 --> 00:04:10,510
plus.

55
00:04:10,530 --> 00:04:16,290
OK so now we've created al-Qadi fragment and then we're adding that to the frame layout which has an

56
00:04:16,290 --> 00:04:22,960
ID frame underscore layout which we've added here.

57
00:04:24,210 --> 00:04:25,610
So we don't need to change that.

58
00:04:25,650 --> 00:04:37,280
And then we commit the fragment transaction which essentially just means apply this to our layout.

59
00:04:37,370 --> 00:04:39,610
OK so let's check that out.

60
00:04:39,670 --> 00:04:42,120
I'm going to run it on the rectangular screen.

61
00:04:42,130 --> 00:04:47,740
Notice that what we've done so far will crash if we try and run it on a round screen because we haven't

62
00:04:47,740 --> 00:04:52,660
got the frame layout ID while that's running.

63
00:04:52,660 --> 00:04:58,590
I'm just going to copy and paste everything down to round activity.

64
00:04:59,320 --> 00:05:05,060
So now it would work fine on both a round or a rectangular watch.

65
00:05:05,080 --> 00:05:10,900
So I've got my round one running but I want to test that out on a rectangular.

66
00:05:11,840 --> 00:05:14,650
So let's get the square one running as well.

67
00:05:14,680 --> 00:05:20,860
Generally when you're testing Android where apps it's a good idea to have both emulators open at once

68
00:05:21,130 --> 00:05:26,230
because you're probably going to want to be fairly constantly testing on both to make sure that it looks

69
00:05:26,230 --> 00:05:33,820
and works well on both screen layouts and then you can see we've got our nice card out there.

70
00:05:33,820 --> 00:05:39,160
The icon that we chose was probably a little large and makes it all look a little bit strange but you

71
00:05:39,160 --> 00:05:41,860
can see how that would all fit together.

72
00:05:41,860 --> 00:05:45,400
While we're here let's just try it on the round screen as well.

73
00:05:48,450 --> 00:05:53,560
Make sure it looks good on that screen size too.

74
00:05:53,730 --> 00:05:54,440
And there you go.

75
00:05:54,450 --> 00:05:57,490
You can see that even though we're inside the box inside out.

76
00:05:57,600 --> 00:05:59,420
We've got this nice rounded.

77
00:05:59,550 --> 00:06:02,210
It doesn't just block it off at a box.

78
00:06:02,220 --> 00:06:04,650
It's more intelligent than that.

79
00:06:04,650 --> 00:06:04,970
All right.

80
00:06:04,980 --> 00:06:07,480
So that's how you work with cards in your apps.

81
00:06:07,500 --> 00:06:15,570
I'll just show you very briefly the card frame if you want to customize this layout then you can do

82
00:06:15,570 --> 00:06:18,540
that pretty easily by just adding a.

83
00:06:18,570 --> 00:06:24,160
For example here a card scroll view which will allow you to scroll 3 content within your card.

84
00:06:24,270 --> 00:06:28,000
And then once you've added a card frame you can add whatever you like in there.

85
00:06:28,050 --> 00:06:34,140
So they've added a linear layout with two text views so they've more or less recreated the default layout

86
00:06:34,920 --> 00:06:36,060
about themselves.

87
00:06:36,240 --> 00:06:40,360
But you could have whatever you like that images text anything.

88
00:06:40,430 --> 00:06:45,600
So that's pretty straightforward and works in exactly the same way as the card fragment that we just

89
00:06:45,600 --> 00:06:47,070
created.

90
00:06:47,070 --> 00:06:47,620
All right.

91
00:06:48,030 --> 00:06:53,360
So now we're finished with cards and we're going to look at another very handy map object.

92
00:06:53,370 --> 00:06:53,910
The list.
