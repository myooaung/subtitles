1
00:00:00,630 --> 00:00:08,220
Lists another user interface type that's really handy for displaying information and getting interaction

2
00:00:08,220 --> 00:00:08,850
with the user.

3
00:00:08,910 --> 00:00:10,100
In Android where.

4
00:00:10,520 --> 00:00:15,540
So they look something like that and they're pretty easy to create mostly because they work in exactly

5
00:00:15,540 --> 00:00:18,320
the same way as list views.

6
00:00:18,930 --> 00:00:26,940
So I'm just going to copy the code for the wearable list view down here and the next it goes inside

7
00:00:26,940 --> 00:00:28,020
frame layouts.

8
00:00:32,020 --> 00:00:39,700
So we can leave it frame layout as it is but we can add in our list view.

9
00:00:39,700 --> 00:00:46,480
That is the idea of wearable underscore list and I'll just do the same for our rectangular layout as

10
00:00:46,480 --> 00:00:47,410
well.

11
00:00:51,700 --> 00:00:59,290
There we go and I'll get rid of the fragment code from the previous video and also get rid of text view

12
00:00:59,320 --> 00:01:02,140
as we're not using that anymore.

13
00:01:03,820 --> 00:01:10,330
The process of setting up a wearable list view is a little bit different and rather more convoluted

14
00:01:10,330 --> 00:01:12,870
than setting up a normal Android list.

15
00:01:13,270 --> 00:01:22,910
So let's go over to our guide here and use the sample code to get this all set up.

16
00:01:22,960 --> 00:01:28,230
So we've already added to the wearable list view in our lay out CML.

17
00:01:28,390 --> 00:01:36,730
We now need to set up a layout implementation which is simply which essentially will just define the

18
00:01:36,730 --> 00:01:40,310
layout of each of the items in the list view.

19
00:01:40,960 --> 00:01:46,700
So I'm going to copy this code and then we'll run through it and see what it means.

20
00:01:48,810 --> 00:01:55,200
So this will be a new class so I'll add it here.

21
00:01:56,190 --> 00:01:58,260
So we just want a new Java class

22
00:02:00,900 --> 00:02:07,740
and we'll call it the same thing as it did up here so wearable list item lay out

23
00:02:15,130 --> 00:02:20,030
OK I'm going to keep a package at the top but I'm going to paste in everything else.

24
00:02:24,030 --> 00:02:28,520
So we're going to simplify this AFAB it will just add everything in

25
00:02:31,670 --> 00:02:33,240
to get started.

26
00:02:46,340 --> 00:02:46,980
OK.

27
00:02:47,620 --> 00:02:48,840
So let's take a look.

28
00:02:48,910 --> 00:02:55,810
We've created a class called wearable list item layout which extends linearly outskirts based upon linear

29
00:02:55,820 --> 00:03:04,150
layouts and it uses the on center proximity Lisner which essentially looks to check which item in the

30
00:03:04,300 --> 00:03:06,090
list view is in the center.

31
00:03:06,100 --> 00:03:11,360
So you can see that we've got a different layout for the center item.

32
00:03:11,380 --> 00:03:18,130
It's got a different color circle it's bigger and bolder than the other list items as well.

33
00:03:18,130 --> 00:03:25,870
So that's what the on center proximity listener is then we've got our image view and text view the image

34
00:03:25,870 --> 00:03:34,670
view is the icon there and the texture is obviously contains the text list item one list item 2 etc..

35
00:03:35,240 --> 00:03:44,300
Then we've got some numbers here to represent how much the faded text should be faded.

36
00:03:45,750 --> 00:03:50,970
The faded circle color and the chosen circle color it's all reasonably self-explanatory.

37
00:03:51,300 --> 00:03:59,550
This defines the context for the item lay out which is going to be the wearable list view and this defines

38
00:03:59,640 --> 00:04:03,190
the attributes for the list item layout.

39
00:04:03,490 --> 00:04:09,750
Now in this method we're defining the style which essentially involves defining the colors and faded

40
00:04:09,750 --> 00:04:11,970
ness of the circle.

41
00:04:12,000 --> 00:04:14,250
So we've got our grey and blue here.

42
00:04:14,700 --> 00:04:22,640
Now that's fine but we don't have the actual text faded Alpha integer built in to this version of Android.

43
00:04:22,800 --> 00:04:30,260
So I'm just going to change that to say no point seven and we'll see how that looks.

44
00:04:30,270 --> 00:04:33,520
I mean you need to specify that that's a flight.

45
00:04:33,570 --> 00:04:38,640
So the bigger the number here the darker the faded text will be the smaller the number the lighter it

46
00:04:38,640 --> 00:04:39,660
will be.

47
00:04:40,930 --> 00:04:47,120
All right working our way down now the finish inflate method is called When The View has been inflated

48
00:04:47,120 --> 00:04:52,940
which you'll remember means either selected to be a rectangular or round view and then created sets

49
00:04:52,940 --> 00:05:00,790
the same as the what will happen when the on lay out inflated listener is called.

50
00:05:00,860 --> 00:05:08,600
It just means it's chosen the rectangular and round all round layout and then created the views within

51
00:05:08,600 --> 00:05:09,470
those.

52
00:05:09,470 --> 00:05:16,280
Now you can see we're expecting an image view and a text view in those layouts but we haven't added

53
00:05:16,280 --> 00:05:17,060
those yet.

54
00:05:17,150 --> 00:05:19,070
So that's why we've got this area here.

55
00:05:19,070 --> 00:05:24,020
Don't worry about that we'll add them in a minute and then we've got on center position that this will

56
00:05:24,020 --> 00:05:30,170
be called when a certain item in the list view becomes central and that essentially just changes the

57
00:05:30,170 --> 00:05:34,280
circle to blue and sets the Alpha to 1.

58
00:05:34,300 --> 00:05:40,190
So it's going to be fully dark and then when it goes off center the circle becomes the circle color

59
00:05:40,190 --> 00:05:43,640
which is gray and sets the Alpha to our.

60
00:05:43,790 --> 00:05:46,690
Now for that we set up there which is no point 7.

61
00:05:47,250 --> 00:05:47,560
OK.

62
00:05:47,570 --> 00:05:51,760
So that's what this new class is doing for us.

63
00:05:51,770 --> 00:05:52,820
Let's now at

64
00:05:55,910 --> 00:05:57,970
the lay out.

65
00:05:58,110 --> 00:06:02,510
So this is where we add our image view and our text view.

66
00:06:03,350 --> 00:06:09,470
So we're going to create this as a new layout and we'll use the same lie naming.

67
00:06:09,530 --> 00:06:12,480
Here's a list underscore item to SML.

68
00:06:13,040 --> 00:06:21,890
So let's add our new layout a new Windows file and list underscore item axonal.

69
00:06:22,000 --> 00:06:26,240
It doesn't matter all of the settings because we're going to get rid of the default code anyway.

70
00:06:28,220 --> 00:06:32,950
And then let's scrap all of that and paste in what we've got here.

71
00:06:33,570 --> 00:06:34,140
OK.

72
00:06:35,460 --> 00:06:37,830
So all of this should more or less make sense.

73
00:06:37,830 --> 00:06:44,550
We've got less width and height there and then in each list item which is what this is it's a list item

74
00:06:44,550 --> 00:06:45,120
layouts.

75
00:06:45,180 --> 00:06:47,630
We've got an image view and a text view.

76
00:06:48,250 --> 00:06:55,440
Now errors here are to do with that particular text follow color which isn't in our strings because

77
00:06:55,440 --> 00:06:59,070
we haven't added it so I'm just going to get rid of the text color.

78
00:06:59,100 --> 00:07:00,920
Now this circle doesn't exist either.

79
00:07:00,960 --> 00:07:04,790
And so we're actually going to need to create it which is something that we haven't done before.

80
00:07:04,800 --> 00:07:06,360
But I'll show you how to do it here.

81
00:07:06,750 --> 00:07:15,540
We can actually create shapes inside the drawable directory so we can create a horrible resource file

82
00:07:16,760 --> 00:07:24,380
I'll call it circle or SML and then we can use SML to draw certain shapes.

83
00:07:25,010 --> 00:07:27,140
So if for example we want a circle

84
00:07:30,100 --> 00:07:34,530
we can look for Android SML or circle something like that.

85
00:07:35,260 --> 00:07:36,670
And then this start one here.

86
00:07:36,670 --> 00:07:43,240
How can I draw a circle through Ex-Im eligible.

87
00:07:43,300 --> 00:07:44,130
Let's find out.

88
00:07:44,140 --> 00:07:46,960
So that one's got a gradient which we don't want.

89
00:07:47,050 --> 00:07:50,160
So let's try and keep it simpler.

90
00:07:50,300 --> 00:07:53,380
No I think that one is quite the answer that we're after.

91
00:07:53,590 --> 00:07:55,530
So let's go for the second one.

92
00:07:57,470 --> 00:07:58,200
Here we go.

93
00:07:58,250 --> 00:08:00,130
This looks more straightforward.

94
00:08:04,920 --> 00:08:07,510
So this will create a general oval shape.

95
00:08:07,510 --> 00:08:14,100
But if we don't set different widths and heights then it will just be a circle and we'll leave for the

96
00:08:14,110 --> 00:08:19,060
moments the color width and height setting we might need to change those later on.

97
00:08:19,320 --> 00:08:25,770
But the important thing is now we can go back to list item and select drawable circle and that will

98
00:08:25,770 --> 00:08:32,400
then link up to this circle Torex metafile that we created up there.

99
00:08:32,400 --> 00:08:39,170
So that's how you add a general circle to your apps without having the need for a circle image.

100
00:08:39,590 --> 00:08:46,950
OK so now we specified the layout of each individual list item.

101
00:08:46,980 --> 00:08:50,330
So next we need an adapter.

102
00:08:50,700 --> 00:08:57,160
And it's a fair bit more complicated than how simple array adapter that we created last time.

103
00:08:57,240 --> 00:09:02,220
So we need a separate class for it.

104
00:09:02,220 --> 00:09:05,560
So I'm going to add that in the same way here.

105
00:09:07,650 --> 00:09:13,620
So a new Java class and we'll call it adapter

106
00:09:19,060 --> 00:09:26,130
and then again Alief the package definition and then paste in everything else.

107
00:09:28,420 --> 00:09:32,180
That all of the classes

108
00:09:42,180 --> 00:09:45,690
nearly that you'll run through and see what this code is doing.

109
00:09:54,560 --> 00:10:01,600
And we don't need that to be private or static so it will just define it there.

110
00:10:01,780 --> 00:10:03,800
We can make it public.

111
00:10:04,690 --> 00:10:05,180
OK.

112
00:10:05,320 --> 00:10:14,230
So this class adapter is similar to a re adapter but it takes the wearable list view adapter and provides

113
00:10:14,230 --> 00:10:16,960
some customizations.

114
00:10:16,960 --> 00:10:21,340
So first off it's got an array of strings called data set.

115
00:10:21,340 --> 00:10:24,180
That's what we're going to use to contain our content.

116
00:10:24,190 --> 00:10:31,810
It's also got a context and I lay out inflata which will use a little bit later on here.

117
00:10:31,840 --> 00:10:34,170
We're defining a constructor.

118
00:10:34,210 --> 00:10:42,300
So this is a definition of how we would create an adapter and we're saying that the code would need

119
00:10:42,310 --> 00:10:47,270
two things that would need to know the context of the adapter and it would need to know the data set.

120
00:10:47,560 --> 00:10:54,310
So the array of strings with which we want to populate our list view then it takes the context from

121
00:10:54,310 --> 00:11:01,590
that it takes the lamp infer data from the context the context of course would just be our main activity

122
00:11:02,680 --> 00:11:10,000
and then it takes its data set from the set that we passed to it right.

123
00:11:10,100 --> 00:11:18,270
Then it creates a number class called item view holder which is how we work with the list item direct

124
00:11:18,270 --> 00:11:24,140
XML which is what controls the layout of each individual list item.

125
00:11:26,010 --> 00:11:26,670
And then

126
00:11:29,760 --> 00:11:37,170
the main thing that we're doing here is finding the text view within that view holder or just within

127
00:11:37,170 --> 00:11:38,640
that list item.

128
00:11:39,270 --> 00:11:42,930
And the reason that we're not finding the image view here is because we don't need to do anything with

129
00:11:42,930 --> 00:11:47,640
the image the image is just built in to each list item and doesn't change from one list item to the

130
00:11:47,640 --> 00:11:48,470
other.

131
00:11:48,840 --> 00:11:54,990
But we do want to try and change the text view for each item member the image view does change but it

132
00:11:54,990 --> 00:12:00,840
changes here when they send to position on the nonsense position is detected.

133
00:12:03,130 --> 00:12:06,660
So now that we've got the text view we're going to be able to do something with it.

134
00:12:07,480 --> 00:12:14,530
So here we are inflating our item view holder which is just another way of saying create the individual

135
00:12:14,530 --> 00:12:20,890
list item and it creates it with a layout of the generic list item which allows us to put whatever we

136
00:12:20,890 --> 00:12:23,520
like inside it.

137
00:12:23,580 --> 00:12:32,820
Then this method is called when the individual list item is created and what it's doing is create creating

138
00:12:32,820 --> 00:12:40,240
an item holder which is this class up here which you can say has just got a text view inside it and

139
00:12:40,240 --> 00:12:49,950
then it finds the text view and replaces its contents with the item in that dataset which is the data

140
00:12:49,950 --> 00:12:53,780
that we passed to this class to appear on the list view.

141
00:12:54,270 --> 00:13:01,970
And it also sets a tag which is quite handy so the tag is going to be the position 0 1 2 3 etc..

142
00:13:02,820 --> 00:13:09,300
And then finally it's got a method which is required for adapter's get item count which obviously just

143
00:13:09,300 --> 00:13:12,460
returns the number of items in M dataset.

144
00:13:12,960 --> 00:13:15,410
So the number of items in our list view.

145
00:13:16,550 --> 00:13:17,100
OK.

146
00:13:17,130 --> 00:13:18,090
A lot to get to grips with.

147
00:13:18,090 --> 00:13:19,670
We will miss them.

148
00:13:19,860 --> 00:13:23,010
So that's our adapter to populate the list.

149
00:13:23,280 --> 00:13:28,570
And then finally we have our code in the own create method.

150
00:13:28,950 --> 00:13:30,480
So I'm going to copy that first

151
00:13:33,340 --> 00:13:36,930
and we'll deal with the last bits afterwards.

152
00:13:37,300 --> 00:13:41,620
So that goes back in main activity and we'll do it here.

153
00:13:43,630 --> 00:13:48,720
So we tracked down our list view which is out wearable list so that's what we're working with.

154
00:13:48,970 --> 00:13:55,090
And then we set our adapter so this is we're now creating our adapter class or our custom adapter class

155
00:13:55,090 --> 00:13:57,480
that we've just made and we're passing to it.

156
00:13:57,490 --> 00:14:07,050
The context this and this is where we create our list of items that we want to appear on our list view.

157
00:14:07,510 --> 00:14:10,200
There's a code for that.

158
00:14:10,360 --> 00:14:12,940
So they've defined it up there which is fine

159
00:14:17,550 --> 00:14:19,740
I think I'll make it a little bit more custom

160
00:14:22,440 --> 00:14:25,340
I'll have the usual suspects.

161
00:14:25,420 --> 00:14:33,630
Rob Caston Tommy and Ralphie and we got a couple of issues here.

162
00:14:33,750 --> 00:14:42,690
The first is actually I've made a mistake creating this adapter class where I did it should actually

163
00:14:42,690 --> 00:14:48,060
be inside the main activity class so that we can access it from there.

164
00:14:48,060 --> 00:14:58,560
So I'm just going to cut everything from there and then delete that class and then I'm going to paste

165
00:14:58,560 --> 00:15:11,610
it just inside main activity there and it does indeed actually need to be private and static so that

166
00:15:11,610 --> 00:15:14,750
we can instantiate it down here.

167
00:15:16,310 --> 00:15:16,750
OK.

168
00:15:17,000 --> 00:15:18,900
So you move your code over to there.

169
00:15:19,010 --> 00:15:27,280
Now I've got an issue here because there are various built in classes called adapter as you can see

170
00:15:27,280 --> 00:15:28,150
there.

171
00:15:28,720 --> 00:15:38,440
So I'm actually going to rename it to my adapter capital M because it's a class just so that I can

172
00:15:41,150 --> 00:15:48,840
be very clear which one way using.

173
00:15:48,850 --> 00:15:51,600
So now we've got my adapter instead of adapter.

174
00:15:51,880 --> 00:16:02,470
One remaining issue is that the this here refers to the on Louds inflated listener because we're inside

175
00:16:02,470 --> 00:16:04,360
that method at the moment.

176
00:16:04,390 --> 00:16:10,630
We want to refer to main activity so we'll use main activity at this.

177
00:16:10,750 --> 00:16:19,480
And similarly here for the set click listener we want main activity this but that will give us an issue

178
00:16:19,480 --> 00:16:29,160
because we need to implement the click listener to main activity but we can do that automatically.

179
00:16:34,020 --> 00:16:34,770
There we go.

180
00:16:35,040 --> 00:16:42,150
So our main activity now implements wearable list view Topcliffe listener and that gives it two methods

181
00:16:42,210 --> 00:16:45,710
on click and on top empty region click.

182
00:16:46,020 --> 00:16:51,200
And if we just go back over to the code that we didn't copy there it is.

183
00:16:51,210 --> 00:16:54,050
So there's a on click.

184
00:16:54,090 --> 00:17:04,680
So this is what's going to happen when the user taps on one of the items in the table.

185
00:17:04,840 --> 00:17:13,240
So they're using the we're using View holda So that will get the tag of the item that was tapped.

186
00:17:13,340 --> 00:17:17,510
And I think we'll just log it for now.

187
00:17:19,870 --> 00:17:21,910
Say in Faye

188
00:17:25,600 --> 00:17:28,060
Ambleside item tappets

189
00:17:33,570 --> 00:17:39,780
is an integer so we'll convert it to a string and get the tag.

190
00:17:40,900 --> 00:17:48,760
And then on top empty region click it's just if the user clicks on the empty region at the top of the

191
00:17:48,760 --> 00:17:49,720
screen.

192
00:17:49,870 --> 00:17:53,650
And as they did we'll just leave that blank because we're not interested in that.

193
00:17:53,680 --> 00:17:56,560
We're only interested in them clicking on the list.

194
00:17:56,560 --> 00:17:57,300
Fear Itself

195
00:18:00,020 --> 00:18:00,870
OK.

196
00:18:01,460 --> 00:18:06,070
So let's just move these imports to where they should be up here.

197
00:18:06,500 --> 00:18:08,730
And then let's get this again.

198
00:18:09,920 --> 00:18:15,700
So we've written a lot of code then unfortunately because of the way it all interacts with each other

199
00:18:15,700 --> 00:18:19,720
there wasn't an easy point at which we could test it.

200
00:18:19,760 --> 00:18:23,510
So we'll test it now and keep our fingers crossed.

201
00:18:25,030 --> 00:18:28,170
To check that we haven't made any mistakes.

202
00:18:28,390 --> 00:18:34,500
We've done quite a lot of advance work with classes there and we've also created our circle drawable.

203
00:18:34,570 --> 00:18:39,670
So there's a few new things going on and we do have an area I'm afraid.

204
00:18:39,670 --> 00:18:45,100
I thought I'd leave that in for you because it's a reasonably used for one to debug So if we have a

205
00:18:45,100 --> 00:18:50,760
quick look at the error message didn't find class condoled example the Android support wearables occasions

206
00:18:51,150 --> 00:18:53,650
don't wear list item.

207
00:18:53,650 --> 00:19:01,000
And if we scroll up to see where that's actually being generated it's when we're trying to inflate an

208
00:19:01,030 --> 00:19:03,130
SML file.

209
00:19:03,220 --> 00:19:13,390
So my suspicions go towards this list item which you remember we just copy and pasted right in and there.

210
00:19:13,380 --> 00:19:18,110
In fact you can see we've got an example the Android support et cetera.

211
00:19:18,130 --> 00:19:20,590
That's the wrong package name.

212
00:19:20,720 --> 00:19:26,500
So all we need to do is change that to our package name rather than the example one which of course

213
00:19:26,500 --> 00:19:27,830
we should have done earlier.

214
00:19:28,240 --> 00:19:36,600
So Conder example the Ropers of older Android where demo where a list item lay out so that's the one

215
00:19:36,600 --> 00:19:40,280
that we want and then we need to change the closing tag as well.

216
00:19:40,530 --> 00:19:42,410
Let's do that automatically.

217
00:19:42,980 --> 00:19:48,750
So now down at the bottom we've got the right closing tag to.

218
00:19:48,900 --> 00:19:50,080
All right let's try that again

219
00:19:54,190 --> 00:20:06,070
and there we get we've got our really nicely laid out list and we can browse through it and see what

220
00:20:06,070 --> 00:20:07,660
happens when we do our topping

221
00:20:12,510 --> 00:20:13,620
or tap on.

222
00:20:13,640 --> 00:20:20,930
We get item number one tapped noticed that we can only tap on the central item if I tap on Tommy then

223
00:20:20,930 --> 00:20:27,110
it just selects Tommy in the middle it doesn't actually consider that a tap as far as we were concerned

224
00:20:27,110 --> 00:20:27,360
there.

225
00:20:27,380 --> 00:20:31,200
I'd have to tap on it again to get actually something to happen.

226
00:20:31,340 --> 00:20:32,820
That's just how the UI works.

227
00:20:34,480 --> 00:20:36,900
All right so I hope you managed to follow me through with all of that.

228
00:20:36,910 --> 00:20:41,770
A lot of new stuff that you might want to watch that video again if you want some clarification on some

229
00:20:41,770 --> 00:20:48,980
of the issues or have a read of the Android Developer material on lists.

230
00:20:49,060 --> 00:20:54,250
So I wanted to do a separate video on that one because it is such a big set up process but hopefully

231
00:20:54,280 --> 00:20:56,800
that makes reasonable sense now.

232
00:20:57,010 --> 00:21:02,620
And you can see how to use lists which are a really useful user interface element on Android where.
