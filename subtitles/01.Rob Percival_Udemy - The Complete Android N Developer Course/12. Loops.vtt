WEBVTT
1
00:00:00.620 --> 00:00:03.580
So I hope you enjoyed making the higher or lower.

2
00:00:03.670 --> 00:00:09.120
We're now back in borowe x y to look at two more important programming constructs.

3
00:00:09.230 --> 00:00:12.080
The first of which is the loop.

4
00:00:12.080 --> 00:00:18.740
So I'm just going to close down those windows and create a new one with some hello world code

5
00:00:22.240 --> 00:00:26.050
and then just say that.

6
00:00:26.160 --> 00:00:30.500
We're ready to game.

7
00:00:30.530 --> 00:00:31.650
All right.

8
00:00:31.880 --> 00:00:37.820
So a loop is simply a way of running the same chunk of code over and over again and again that might

9
00:00:37.820 --> 00:00:42.350
be controlling the behavior of a character that repeats again and again in an app.

10
00:00:42.380 --> 00:00:47.720
It might be displaying the contents of an array that contains a bunch of the user's photos something

11
00:00:47.720 --> 00:00:48.250
like that.

12
00:00:48.440 --> 00:00:52.760
It's very fundamental to programming and there's a number of different ways that we can do it in Java

13
00:00:52.990 --> 00:00:55.930
and we're going to look at three of them here in this video.

14
00:00:56.600 --> 00:01:01.000
So the first one is very simple and it's known as a WHILE loop.

15
00:01:01.190 --> 00:01:06.500
So let's pretend that we want to print out the numbers 1 to 10 on the console.

16
00:01:06.500 --> 00:01:07.410
So nice and simple.

17
00:01:07.430 --> 00:01:11.060
We could of course just print those out but then if we wanted to change that to print up numbers 1 to

18
00:01:11.060 --> 00:01:13.470
100 that would take a very long time.

19
00:01:13.490 --> 00:01:20.270
So a loop allows us to do that with minimal code so we're going to start by creating an integer which

20
00:01:20.270 --> 00:01:29.270
I'll call X and initially X will be set to 1 and this is going to be our counter variable that counts

21
00:01:29.270 --> 00:01:41.220
up from 1 to 10 and then we're going to use the Y all keyword and we're going to continue doing our

22
00:01:41.220 --> 00:01:49.380
loop as long as X is less than or equal to 10.

23
00:01:49.500 --> 00:01:56.790
So that statement means while X is less than or equal to 10 fairly straightforward and then we just

24
00:01:56.790 --> 00:01:58.830
have our Kelli brackets.

25
00:01:59.360 --> 00:02:03.090
So we're going to do whatever's inside these curly brackets.

26
00:02:03.600 --> 00:02:06.160
As long as X is less than or equal to 10.

27
00:02:06.600 --> 00:02:11.450
And I think that we're getting today is print x to the console.

28
00:02:11.670 --> 00:02:20.920
So system out print line and we just want to print X that's it.

29
00:02:20.920 --> 00:02:22.330
Beware that if you run that code.

30
00:02:22.320 --> 00:02:24.310
Now think about what's going to happen.

31
00:02:27.520 --> 00:02:31.240
Hopefully you realize that this is going to go on for ever and ever and ever because X is going to remain

32
00:02:31.240 --> 00:02:37.060
one and probably crash your browser or give you some kind of error.

33
00:02:37.090 --> 00:02:44.110
So what we actually want to do is add one to X and there's two ways we can do that longhand way of doing

34
00:02:44.110 --> 00:02:54.310
it is to use the command x is equal to x plus one which will just increment X by one or we can use a

35
00:02:54.310 --> 00:02:57.790
nice shortcut X plus plus.

36
00:02:58.240 --> 00:03:02.500
So this set up is used in a number of coding languages so you may well have seen it before but this

37
00:03:02.500 --> 00:03:06.250
is how it works in Java and whenever you want to add one to a number.

38
00:03:06.300 --> 00:03:10.960
Generally I would recommend using X plus plus just because it's shorter and easier to use then X equals

39
00:03:10.960 --> 00:03:13.020
x plus one.

40
00:03:13.030 --> 00:03:16.990
So let's take a look again.

41
00:03:17.330 --> 00:03:18.890
Nice and easy.

42
00:03:18.930 --> 00:03:21.530
So one two three four five six seven eight nine ten.

43
00:03:21.560 --> 00:03:23.180
So here's a quick challenge for you.

44
00:03:23.240 --> 00:03:27.370
Can you print just the even numbers from 1 to 10.

45
00:03:27.590 --> 00:03:31.430
So just the even numbers between 1 and 10 inclusive.

46
00:03:31.650 --> 00:03:32.230
Go for it

47
00:03:38.050 --> 00:03:40.830
I hope you figured it out as a number of different ways to do it.

48
00:03:40.830 --> 00:03:48.660
Probably the simplest is to change the command here so we're printing two times x to the console rather

49
00:03:48.660 --> 00:03:51.630
than just X and that's going to give us 2 4 6 8 etc..

50
00:03:51.900 --> 00:03:58.200
But that of course would take us all the way to 20 and we want the even numbers from 1 to 10.

51
00:03:58.200 --> 00:04:07.840
So we just change x to go up to and include five you manage that two four six eight 10.

52
00:04:07.860 --> 00:04:08.960
There we go.

53
00:04:09.660 --> 00:04:11.400
So that's a while loop.

54
00:04:11.670 --> 00:04:17.280
The next one we're going to look at is a for loop which is very similar but it just keeps everything

55
00:04:17.280 --> 00:04:21.630
together in quite a neat way.

56
00:04:21.660 --> 00:04:26.880
I'm going to leave the wild leap there because we're going to create this same thing but in a.

57
00:04:27.390 --> 00:04:37.410
So if you use a follow up we use the for keyword and then this time we create our counter variable inside

58
00:04:37.410 --> 00:04:38.880
the instruction for the loop.

59
00:04:39.120 --> 00:04:48.540
So this time we're going to create a variable int I'll call it y this time and we'll set it to 1 initially.

60
00:04:48.690 --> 00:04:50.930
So why is it close to 1.

61
00:04:51.360 --> 00:04:54.890
And then we use a semi-colon even though it's not quite the end of the command yet.

62
00:04:54.960 --> 00:04:57.810
It's just the end of that bit of the command.

63
00:04:57.840 --> 00:05:00.640
So initially we're going to set Y to 1.

64
00:05:00.720 --> 00:05:05.370
We're going to carry on as long as Y is less than or equal to 5.

65
00:05:05.550 --> 00:05:07.330
So exactly the same as before.

66
00:05:08.190 --> 00:05:19.300
And each time we run the leap we're going to add 1 to y y plus plus and that's all that we need to set

67
00:05:19.300 --> 00:05:21.170
up our for loop.

68
00:05:22.160 --> 00:05:26.320
And we have our curly brackets and same as before.

69
00:05:26.450 --> 00:05:30.820
We're going to have system out.

70
00:05:30.960 --> 00:05:37.520
Print line Y Times to.

71
00:05:37.550 --> 00:05:38.420
There we go.

72
00:05:38.960 --> 00:05:41.810
And if we just run that we'll see that it applies to physics.

73
00:05:41.810 --> 00:05:47.780
I tend to for six eight 10 I can so almost always you can choose whether you want to use a while loop

74
00:05:47.810 --> 00:05:49.270
or a for loop.

75
00:05:49.350 --> 00:05:54.310
To be honest I find myself using while loops most of the time but you'll probably have your favorite.

76
00:05:54.590 --> 00:05:58.850
And you really can choose whichever you like depending on the situation.

77
00:05:58.850 --> 00:06:01.040
So let's just mess with these a little bit.

78
00:06:01.040 --> 00:06:04.210
I'm going to get rid of the while loop for now.

79
00:06:04.460 --> 00:06:06.820
So what if we wanted to do things in the opposite order.

80
00:06:06.980 --> 00:06:10.070
So we wanted to go 10 8 6 4 2.

81
00:06:10.580 --> 00:06:15.430
Well as you can imagine we start with why is equal to 5.

82
00:06:15.470 --> 00:06:19.540
We keep going as long as why here.

83
00:06:19.550 --> 00:06:22.130
I'm going to put greater than zero g.

84
00:06:22.250 --> 00:06:25.600
So we keep going as long as Y is greater than zero.

85
00:06:26.360 --> 00:06:32.800
And instead of adding one to White time we subtract one from White each time.

86
00:06:33.140 --> 00:06:36.470
And then if we run that we'll find that we start off with 10.

87
00:06:36.470 --> 00:06:37.060
There we go.

88
00:06:37.070 --> 00:06:43.930
And then we subtract two each time because we're subtracting 1 but then doubling it.

89
00:06:44.090 --> 00:06:44.390
All right.

90
00:06:44.390 --> 00:06:47.920
Say I'm going to give you a couple of challenges this time you can choose which one to do.

91
00:06:48.110 --> 00:06:53.480
There's an easier challenge and then a harder challenge the easier challenge is to choose which ever

92
00:06:54.080 --> 00:07:00.370
loop system you like and display the first 10 multiples of three.

93
00:07:00.880 --> 00:07:01.210
OK.

94
00:07:01.220 --> 00:07:02.150
Fairly straightforward.

95
00:07:02.150 --> 00:07:08.090
You can do that if you like if you want a bigger challenge then create a loop that will display the

96
00:07:08.090 --> 00:07:13.730
first 10 triangular numbers and I'm not even going to tell you what the triangular numbers are part

97
00:07:13.730 --> 00:07:16.740
of the challenge is to go and find that out for yourself.

98
00:07:16.760 --> 00:07:20.600
So if you want a nice basic challenge go for the first time multiples of three if you want more of a

99
00:07:20.600 --> 00:07:26.800
challenge then create a loop to display the first 10 triangular numbers.

100
00:07:26.790 --> 00:07:27.790
Whichever one you go for.

101
00:07:27.860 --> 00:07:28.730
Good luck.

102
00:07:29.160 --> 00:07:29.760
Go for it.

103
00:07:37.150 --> 00:07:37.750
All right.

104
00:07:38.200 --> 00:07:44.860
Well I'm going to go for a follow up and I'm going to do it slightly differently to the way we did it

105
00:07:45.550 --> 00:07:46.230
before.

106
00:07:46.450 --> 00:07:48.870
I'm going to create an integer.

107
00:07:49.090 --> 00:07:49.900
I'm going to call it.

108
00:07:50.020 --> 00:07:53.890
This time I is usually the counter variable that we use.

109
00:07:53.890 --> 00:08:00.310
You can use absolutely any letter or whether you like it is quite common and I'm going to start off

110
00:08:00.310 --> 00:08:08.950
with I being three I'm going to keep going as long as I is less than or equal to 30 because the tenth

111
00:08:08.950 --> 00:08:16.510
multiple of three is of course 30 Hoopes I'm going to change that from a comma to a semicolon and then

112
00:08:17.290 --> 00:08:23.500
I'm going to use I equals I plus three has my rule.

113
00:08:24.070 --> 00:08:28.470
Every time the loop goes round there we go.

114
00:08:28.560 --> 00:08:29.460
So hopefully that makes sense.

115
00:08:29.460 --> 00:08:31.030
We start with eyes 3.

116
00:08:31.050 --> 00:08:32.550
We add three every time.

117
00:08:32.550 --> 00:08:36.920
And we keep going as long as I is less than or equal to 30.

118
00:08:37.470 --> 00:08:45.580
And if we do it that way then this line just becomes system out parental and I simple that

119
00:08:48.990 --> 00:08:49.500
take a look.

120
00:08:49.500 --> 00:08:53.390
3 6 9 12 fantastic all the way up to 30 billion.

121
00:08:53.460 --> 00:09:00.360
So whichever way you did that well them for the tougher challenge then let's get rid of that and we

122
00:09:00.360 --> 00:09:03.710
want to now print the first hand triangular numbers.

123
00:09:03.960 --> 00:09:11.370
So I hope you did something like googled triangular numbers and if you didn't know before the triangle

124
00:09:11.370 --> 00:09:16.200
numbers are numbers that represent triangles or that triangles can easily be made from.

125
00:09:16.200 --> 00:09:19.960
So we start with 1 3 6 10.

126
00:09:20.280 --> 00:09:25.540
And the key thing about triangular numbers is they the difference between them goes up by 1 each time.

127
00:09:25.560 --> 00:09:29.550
So for the first Wrangler number to the second we add two from the second to the third.

128
00:09:29.550 --> 00:09:32.990
We at three from the third to the fourth we add four.

129
00:09:33.010 --> 00:09:34.120
Cetera et cetera.

130
00:09:34.530 --> 00:09:40.490
So there's a great number of ways that we could do this because I used to fall asleep last time around.

131
00:09:40.500 --> 00:09:44.000
I'm going to use a wild leap this time.

132
00:09:44.190 --> 00:09:54.140
So let's start by defining my X will start with x as equal to 1.

133
00:09:54.410 --> 00:10:02.630
And this time I'm going to keep going as long as X itself is less than or equal to 10.

134
00:10:02.630 --> 00:10:07.460
So X is not going to be my triangular number.

135
00:10:07.460 --> 00:10:12.350
X is going to be my count variable and that helps because I don't know what the tenth triangled number

136
00:10:12.350 --> 00:10:14.530
is and if I do it this way I don't need to know.

137
00:10:14.690 --> 00:10:17.570
At least not while I'm writing the code.

138
00:10:17.990 --> 00:10:23.200
So let's not forget to increment X at the end of that portion of the loop.

139
00:10:23.210 --> 00:10:24.830
Otherwise it will go on forever.

140
00:10:25.250 --> 00:10:29.200
And then I'm going to create another integer.

141
00:10:29.600 --> 00:10:37.350
I'm going to call it triangular number and my first triangular number is equal to 1.

142
00:10:37.610 --> 00:10:39.250
So I'll save that then.

143
00:10:39.500 --> 00:10:41.980
And then in my loop I'm going to

144
00:10:44.800 --> 00:10:48.010
print triangular number

145
00:10:51.130 --> 00:10:53.180
to the console.

146
00:10:53.200 --> 00:10:57.490
So so far this is just going to print one 10 times.

147
00:10:57.580 --> 00:11:04.120
So to make this into the triangle the numbers remember I need to add on to first time three the next

148
00:11:04.120 --> 00:11:06.550
time for the next time five.

149
00:11:06.580 --> 00:11:09.150
The next time etc..

150
00:11:09.310 --> 00:11:18.040
So if I go down below the point where I incremented X say X first time round is now 2 and then it's

151
00:11:18.040 --> 00:11:20.200
going to be three and then four and then five.

152
00:11:20.320 --> 00:11:25.970
And that is of course the number that I need to add to triangular number to get the next try and get

153
00:11:25.970 --> 00:11:33.480
the number so I can just use triangular number equals what it was before.

154
00:11:33.560 --> 00:11:41.000
So a triangular number plus X and then next time round when it loops round it will print the new triangular

155
00:11:41.020 --> 00:11:45.040
number which will be the next one in the sequence.

156
00:11:45.040 --> 00:11:45.830
That's it.

157
00:11:45.910 --> 00:11:46.900
That's my solution.

158
00:11:46.900 --> 00:11:49.350
Let's just have a look and make sure that that works.

159
00:11:49.570 --> 00:11:52.120
1 3 6 10 15 21:28.

160
00:11:52.150 --> 00:11:53.300
Fantastic.

161
00:11:53.320 --> 00:11:57.450
Those are indeed the first 10 triangular numbers.

162
00:11:57.470 --> 00:11:57.750
Great.

163
00:11:57.760 --> 00:11:59.920
I hope you manage to do one of those two challenges.

164
00:11:59.920 --> 00:12:04.760
Particular Congratulations if you managed to do the trickier one.

165
00:12:04.780 --> 00:12:09.580
Now let's get rid of that because I'm going to show you the third type of leap and that is looping through

166
00:12:09.580 --> 00:12:13.920
the contents of an array and that's a really useful thing to be able to do.

167
00:12:13.930 --> 00:12:19.570
Do you use the example that I said earlier but have an array of uses photos and display all of those

168
00:12:19.570 --> 00:12:20.630
using a loop.

169
00:12:21.010 --> 00:12:22.590
So very many challenge for you.

170
00:12:22.590 --> 00:12:27.520
Can you create an array containing the names of the people in your family.

171
00:12:27.610 --> 00:12:28.650
So just three or four.

172
00:12:28.930 --> 00:12:29.550
If you've got more.

173
00:12:29.540 --> 00:12:34.970
Feel free to put them in but just three or four names to be working with.

174
00:12:35.090 --> 00:12:35.650
Go for it.

175
00:12:42.780 --> 00:12:44.400
I remembered how to do that.

176
00:12:44.880 --> 00:12:53.110
So are strings and we use these square brackets to show that we want to create an array.

177
00:12:54.790 --> 00:13:00.130
I'm going to call my family members and then we said equal t and

178
00:13:02.820 --> 00:13:06.500
we to use Kelly brackets to create the array.

179
00:13:06.900 --> 00:13:10.470
And here I go.

180
00:13:10.470 --> 00:13:19.620
So Rob Keston told me and Ralphy and then a semi-colon.

181
00:13:20.340 --> 00:13:24.990
So hopefully you remember that construct from last video.

182
00:13:24.990 --> 00:13:31.890
Now to loop through that's one thing that we could do would be to use a for loop and just keep going

183
00:13:32.190 --> 00:13:33.460
as long as we were in the loop.

184
00:13:33.470 --> 00:13:35.640
But there's a much quicker way of doing it.

185
00:13:35.880 --> 00:13:40.510
And that's to use what you might know as a foreach loop.

186
00:13:40.560 --> 00:13:44.130
So it just loops through everything in the array.

187
00:13:44.550 --> 00:13:51.540
So way we do that is we use our full command and then we want to create a variable that will be the

188
00:13:51.540 --> 00:13:54.030
name each time round.

189
00:13:54.360 --> 00:13:57.580
Each time we go through a particular member of the array.

190
00:13:57.780 --> 00:13:59.250
So that's going to be a string

191
00:14:01.920 --> 00:14:04.080
and I'll call it name.

192
00:14:04.560 --> 00:14:11.510
And we're going to get it from the array family members.

193
00:14:12.000 --> 00:14:17.250
So that's a new kind of construct that we haven't seen before and it's quite specific to this particular

194
00:14:17.250 --> 00:14:18.690
set up so for.

195
00:14:18.840 --> 00:14:25.410
And then we create our variable name which is a string and we're going to get that from the family members

196
00:14:25.590 --> 00:14:29.190
array by looping through its.

197
00:14:29.310 --> 00:14:37.340
And then we can access the variable name in the middle of the loop just in the usual way.

198
00:14:37.980 --> 00:14:48.170
So system out print line and 9 that's it.

199
00:14:51.810 --> 00:14:52.920
So let's take a look.

200
00:14:52.930 --> 00:14:53.430
There we go.

201
00:14:53.530 --> 00:14:59.950
So that loops through the whole of the array and allowed us to access each value within it.

202
00:14:59.980 --> 00:15:03.500
The last thing I want to show you is how to do this with an array list.

203
00:15:03.790 --> 00:15:05.760
So a fun little challenge for this video.

204
00:15:05.830 --> 00:15:11.350
Can you change this code so instead of creating an array like we've got here it creates an array list

205
00:15:11.350 --> 00:15:18.550
called family members and then adds your family members to that list and then run the code and see what

206
00:15:18.550 --> 00:15:20.410
happens.

207
00:15:20.410 --> 00:15:21.090
Good luck.

208
00:15:27.910 --> 00:15:33.410
Write I hope you saw what happened and you got some kind of error message.

209
00:15:33.960 --> 00:15:41.790
So to create our array list just like we did in the previous video we would use list and then family

210
00:15:43.500 --> 00:15:44.670
members.

211
00:15:45.830 --> 00:15:54.820
And that's a new array list you're very familiar.

212
00:15:54.870 --> 00:15:59.330
Before we get any nasty errors let's make sure that we import what we need.

213
00:15:59.910 --> 00:16:08.250
So Java Java to you tail taught stuff and then we add all members to our list.

214
00:16:08.330 --> 00:16:14.510
So family members taught that.

215
00:16:15.740 --> 00:16:21.350
And then Rob and I'm just going to copy that so you don't have to watch me type it four times.

216
00:16:24.900 --> 00:16:32.280
Keston tell me Rafi.

217
00:16:33.310 --> 00:16:38.890
OK so you may think that all looks fine but we're going to get an hara.

218
00:16:38.920 --> 00:16:39.830
There it is.

219
00:16:40.090 --> 00:16:41.630
So incompatible types.

220
00:16:41.730 --> 00:16:47.730
So we needed a string here when we created that name but the actual variable type that we found is an

221
00:16:47.850 --> 00:16:51.990
object which is slightly strange because these are all strings you would have thought that would all

222
00:16:51.990 --> 00:16:52.910
be fine.

223
00:16:53.130 --> 00:16:55.080
But it's not.

224
00:16:55.080 --> 00:17:01.170
And that's because when we created our list we didn't define what type of variable was going to be stored

225
00:17:01.230 --> 00:17:02.440
in our list.

226
00:17:02.640 --> 00:17:09.570
And that means that we end up with an object which is a kind of generic type of variable which doesn't

227
00:17:09.570 --> 00:17:11.590
allow us to create a string from it.

228
00:17:11.820 --> 00:17:19.080
So to get round that we need to specify the type of variable that we want to have in our list and we

229
00:17:19.080 --> 00:17:21.340
do that using angle brackets.

230
00:17:21.450 --> 00:17:26.520
When we create a list so we won't have strings.

231
00:17:26.520 --> 00:17:30.420
So we use list and then angle brackets with string afterwards.

232
00:17:30.840 --> 00:17:35.400
And similarly we put that in our array list command as well.

233
00:17:37.430 --> 00:17:38.720
So just like that.

234
00:17:38.960 --> 00:17:44.270
So now we've created exactly what we had before but this time that all strings rather than the more

235
00:17:44.270 --> 00:17:48.380
generic objects and let's now run that.

236
00:17:48.380 --> 00:17:52.080
And we should find that it all works fine that we get.

237
00:17:52.080 --> 00:17:59.250
So it is conventional If you know what type of object is going to be in your list to define it right

238
00:17:59.250 --> 00:18:00.110
at the start.

239
00:18:00.210 --> 00:18:03.400
And that then stops you having to have problems later on.

240
00:18:04.720 --> 00:18:05.100
Brilliant.

241
00:18:05.100 --> 00:18:11.140
So now we've covered our three loop types in the next video we're going to check out classes and objects

242
00:18:11.140 --> 00:18:16.030
in a bit more detail so hopefully you'll finally understand what all this object oriented programming

243
00:18:16.270 --> 00:18:17.200
is all about.
