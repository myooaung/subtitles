1
00:00:00,570 --> 00:00:06,570
We're now going to move on from list views and look at times which will allow us to consider some rather

2
00:00:06,570 --> 00:00:12,970
more complicated Android concepts such as threading handlers and Ronalds.

3
00:00:13,110 --> 00:00:14,430
So don't worry too much about those.

4
00:00:14,430 --> 00:00:15,740
We'll explain them when we get them.

5
00:00:15,990 --> 00:00:22,430
But for now let's create a new project called time a demo.

6
00:00:24,250 --> 00:00:31,570
So we actually saw Timon's a few videos ago in the previous section but we didn't look at them in much

7
00:00:31,570 --> 00:00:33,480
detail so that they're very useful.

8
00:00:33,490 --> 00:00:40,720
They allow us to delay the running of a particular activity whatever that might be and do it say two

9
00:00:40,720 --> 00:00:45,390
or three seconds in the future which we're going to use a lot in the next couple of apps.

10
00:00:45,400 --> 00:00:48,370
There are lots of different ways to make timers in Android.

11
00:00:48,370 --> 00:00:50,100
I'm going to show you two of them here.

12
00:00:50,320 --> 00:00:58,390
So one will be used primarily to run a certain bunch of code every second and then the other will be

13
00:00:58,390 --> 00:01:03,110
used as a countdown to a particular event.

14
00:01:03,160 --> 00:01:08,110
So let's jump straight over to main activity took Java because we're not going to be adding anything

15
00:01:08,110 --> 00:01:11,030
to the user interface in this video.

16
00:01:12,380 --> 00:01:14,720
So you guys are in on create.

17
00:01:14,720 --> 00:01:22,790
We're going to start by creating a handler and I'm going to call it handler and it's going to be a new

18
00:01:23,510 --> 00:01:23,900
handler

19
00:01:27,160 --> 00:01:33,560
and make sure you use Android OS and Levante to get the right framework.

20
00:01:33,870 --> 00:01:39,930
So our handler does a couple of things but one that's relevant to us here is allows chunks of code to

21
00:01:39,930 --> 00:01:42,010
be run in a delayed way.

22
00:01:42,090 --> 00:01:45,840
So possibly every second every five seconds every 10 minutes.

23
00:01:45,900 --> 00:01:52,830
However you want to do it and the handler controls the timing of these events or chunks of code.

24
00:01:52,830 --> 00:01:59,010
Now these events or chunks of code have names themselves and they are called runnable.

25
00:01:59,390 --> 00:02:10,330
So we normally call them just run and say our run runnable is going to be a new runnable like that.

26
00:02:10,340 --> 00:02:14,550
And you can see that we've got the default code set up for us.

27
00:02:17,770 --> 00:02:30,180
So in here insert code to be run every second so it's overriding the default run method I can think

28
00:02:30,210 --> 00:02:37,910
really of runnable as being methods that can be run every second or every five seconds or whatever.

29
00:02:38,430 --> 00:02:43,680
So once you've entered your code that you want to be run every second you then have to give it instructions

30
00:02:43,680 --> 00:02:49,410
to run that every second and it's the handler that takes care of that.

31
00:02:49,500 --> 00:02:59,180
And what we can do is händler top post delayed and then we want to post this.

32
00:02:59,250 --> 00:03:07,620
So in this context this refers to the Runnable here the run method and then the number of milliseconds

33
00:03:07,620 --> 00:03:16,540
that we want delayed if we wanted to run every second then we wanted to be delayed every thousand milliseconds.

34
00:03:18,060 --> 00:03:22,560
So we got quite a complicated chunk of code there but just to run through again what's going on we've

35
00:03:22,560 --> 00:03:28,480
created a handler which can control the timing of certain methods.

36
00:03:28,800 --> 00:03:34,500
We've then created one of those methods which has a special name called a runnable and then we've added

37
00:03:34,500 --> 00:03:44,360
the code to be run every second and then we use the handler to run this again one second later.

38
00:03:44,800 --> 00:03:50,660
So then each time this is being run it's being instructed to run again as a second later.

39
00:03:51,070 --> 00:03:57,190
So this will essentially run every second say let's just do a simple log post

40
00:04:01,870 --> 00:04:03,360
runnable has run

41
00:04:07,630 --> 00:04:14,790
a second must have passed.

42
00:04:14,930 --> 00:04:15,780
Simple as that.

43
00:04:17,220 --> 00:04:24,900
And then we have to actually initialize the Runnable in the first place which we do in a very similar

44
00:04:24,900 --> 00:04:27,350
way to how we made it run.

45
00:04:27,660 --> 00:04:37,090
One second later we just use händler dots post and then run.

46
00:04:38,050 --> 00:04:41,850
And that will then execute the Runnable right from the start.

47
00:04:42,050 --> 00:04:47,480
And then as soon as that's run the first time then it will cool it's run the second time and keep on

48
00:04:47,480 --> 00:04:49,370
going forever.

49
00:04:50,660 --> 00:04:51,900
So let's take a look.

50
00:04:52,040 --> 00:04:56,530
We should find now that this is posted to the logs every second

51
00:04:59,270 --> 00:05:04,580
we run it in the emulator even though we don't actually need to open the emulator this time.

52
00:05:04,580 --> 00:05:12,280
Everything that we're interested in will appear in the logs that we can so it's running every second

53
00:05:14,260 --> 00:05:19,850
fantastic said that's more or less all we're going to say about cannibal's for now.

54
00:05:20,920 --> 00:05:23,460
But I'm going to show you another way of

55
00:05:26,380 --> 00:05:27,820
doing time as an android.

56
00:05:27,820 --> 00:05:32,260
I'm just commenting that out so I won't run the second time.

57
00:05:32,530 --> 00:05:41,090
The other useful way to do a task Reguly is to use a countdown timer so let's see how they work.

58
00:05:41,370 --> 00:05:52,630
We'll create a new count down time up and then we need to give that to numbers which is the number of

59
00:05:52,630 --> 00:05:59,620
milliseconds until the countdown has run out and the frequency with which we want the counter to tick

60
00:05:59,620 --> 00:06:00,700
down.

61
00:06:00,700 --> 00:06:10,920
So if we wanted to count down for 10 seconds then we would use 10000 for 10000 milliseconds for our

62
00:06:10,920 --> 00:06:21,120
whole countdown and then 1000 for the time for each tick as it were.

63
00:06:21,120 --> 00:06:30,060
So this is you are then going to count down from 10 seconds to zero or and then we add our code for

64
00:06:30,060 --> 00:06:34,210
our countdown timer which is going to create two methods.

65
00:06:35,580 --> 00:06:39,660
So the first is on tick.

66
00:06:40,380 --> 00:06:43,460
So this will happen every time we get a tick.

67
00:06:43,500 --> 00:06:47,370
So in our case every 1000 milliseconds or every second

68
00:06:52,530 --> 00:07:03,760
and that will receive a variable which is a long which is essentially a big integer and we'll call that

69
00:07:05,590 --> 00:07:11,520
milliseconds until done because that's what it is.

70
00:07:11,860 --> 00:07:18,670
So this method here will give us this variable milliseconds until done that we can use if we want to

71
00:07:21,050 --> 00:07:28,110
and the other method we can use is public FOID on finish.

72
00:07:29,000 --> 00:07:33,110
And not surprisingly that will happen.

73
00:07:35,930 --> 00:07:38,600
When the countdown is finished.

74
00:07:38,600 --> 00:07:39,560
Whereas this one happens

75
00:07:45,040 --> 00:07:45,720
count down

76
00:07:50,590 --> 00:07:51,630
is counting down.

77
00:07:51,630 --> 00:07:59,720
So in our case it will be every second and this will be off to 10 seconds.

78
00:08:02,260 --> 00:08:07,100
They I'll just put in a semi-colon at the end.

79
00:08:08,440 --> 00:08:12,090
So just to see what this is doing.

80
00:08:12,550 --> 00:08:13,690
Let's just quickly log

81
00:08:16,800 --> 00:08:30,930
this is going to give us seconds left and then we can get that from milliseconds until done Eva 1000

82
00:08:31,830 --> 00:08:35,090
because that will give us the number of seconds left rather than number of milliseconds.

83
00:08:35,280 --> 00:08:44,490
And then we will need to convert that to a string and we can do that using string and then dot value

84
00:08:44,640 --> 00:08:45,120
of

85
00:08:50,310 --> 00:08:55,410
and that will then convert our long to a string and allow us to log it.

86
00:08:56,680 --> 00:09:00,440
And then just so that we can see how it looks.

87
00:09:00,760 --> 00:09:02,070
We'll log

88
00:09:09,710 --> 00:09:16,620
count down timer finished.

89
00:09:16,840 --> 00:09:27,400
And then finally we just need to start that which we do using dot start.

90
00:09:27,510 --> 00:09:29,840
So hopefully that makes sense what we've done there.

91
00:09:29,920 --> 00:09:36,840
We've created a countdown timer that will last for 10 seconds and tick down every second and then each

92
00:09:36,840 --> 00:09:38,670
tick it will log that.

93
00:09:38,670 --> 00:09:48,090
And then at the end we get 3 to 1 and finally count on time a finished that we get.

94
00:09:48,510 --> 00:09:54,100
And the advantage of this is the countdown time object is then destroyed when it's finished.

95
00:09:54,150 --> 00:10:00,420
If you only need it temporarily then a countdown timer is probably preferable to using a handler like

96
00:10:00,420 --> 00:10:03,910
that which will continue to exist even when it's finished.

97
00:10:06,440 --> 00:10:07,110
OK.

98
00:10:07,550 --> 00:10:12,470
So that's where we're going to do for now with countdown timers and handlers and run tables in the next

99
00:10:12,470 --> 00:10:12,970
video.

100
00:10:13,060 --> 00:10:18,330
We'll be using countdown timer specifically to make our time app so you can.
