WEBVTT
1
00:00:00.870 --> 00:00:02.420
So we're looking pretty good so far.

2
00:00:02.550 --> 00:00:05.090
We've got our bed he moves in the way that we want him to.

3
00:00:05.280 --> 00:00:08.160
And we've got our choose which repeat forever.

4
00:00:08.490 --> 00:00:17.970
And our randomly given heights so that makes it quite difficult to get the bed through them.

5
00:00:18.000 --> 00:00:22.780
So our next challenge is to work out how to do collision detection.

6
00:00:23.040 --> 00:00:32.880
So we want to take out bird and make it so that when he or she bumps into a pipe that the game is over.

7
00:00:33.420 --> 00:00:34.280
So let's do that.

8
00:00:34.470 --> 00:00:43.320
But first there is just one small hitch that I've noticed and that is that we want the Chib offset to

9
00:00:43.320 --> 00:00:45.660
be reset whenever

10
00:00:48.620 --> 00:00:53.890
the tube moves to the right of the screen.

11
00:00:53.930 --> 00:00:58.100
So when we do that jump we want the cheeps to be in a different place and at the moment you can see

12
00:00:58.100 --> 00:01:03.520
we've just got the same four locations repeating again and again which is not what we want so very easy.

13
00:01:03.530 --> 00:01:08.330
We just have a cheap offset creator over here as well.

14
00:01:08.330 --> 00:01:08.630
Right.

15
00:01:08.630 --> 00:01:10.390
So how do we do collision detection.

16
00:01:10.610 --> 00:01:19.250
Well essentially what we need to do is create shapes for our bird and our rectangles so that we know

17
00:01:20.030 --> 00:01:27.130
where they are in space and then we look using GDX for a collision between those shapes.

18
00:01:27.710 --> 00:01:32.600
So let's start off by creating a shape for the bird and a pretty good approximation to the shape of

19
00:01:32.600 --> 00:01:34.010
the bird is a circle.

20
00:01:34.010 --> 00:01:39.500
So I'm going to create a circle for the shape of the bird which is just going to overlap on top of the

21
00:01:39.500 --> 00:01:41.760
bird essentially.

22
00:01:41.780 --> 00:01:46.980
So let's create that up here.

23
00:01:47.550 --> 00:01:49.070
And this is going to be a circle

24
00:01:53.610 --> 00:01:59.680
I'll call it Bird circle.

25
00:01:59.710 --> 00:02:02.650
This is going to be a new circle.

26
00:02:06.050 --> 00:02:07.410
If I can spell it right.

27
00:02:08.330 --> 00:02:15.590
And then we just want to create a circle that overlaps where the bird is.

28
00:02:15.620 --> 00:02:17.700
So it's got to be quite similar to this.

29
00:02:18.350 --> 00:02:24.370
But instead of using a batch we're going to use a shape renderer.

30
00:02:24.410 --> 00:02:26.520
In fact we'll create our shape render up his

31
00:02:30.040 --> 00:02:32.470
eye shape render

32
00:02:38.330 --> 00:02:43.780
call shape Brender which is a new shape render so you should think of this just like a batch.

33
00:02:43.850 --> 00:02:51.110
It enables us to draw shapes but batches just draw textures and we can't do collision detection directly

34
00:02:51.110 --> 00:02:52.070
on textures.

35
00:02:52.160 --> 00:02:55.490
We need to do collision direct detection on shapes.

36
00:02:55.850 --> 00:02:56.130
So

37
00:02:59.610 --> 00:03:01.380
let's do that down here.

38
00:03:03.360 --> 00:03:11.820
So shaped renderer dot begin just as before and this time we're going to specify a type of shape and

39
00:03:11.820 --> 00:03:14.180
all our shapes are going to be filled in.

40
00:03:14.820 --> 00:03:15.720
So we use shape

41
00:03:18.350 --> 00:03:22.440
render shape type dot filled.

42
00:03:22.460 --> 00:03:28.610
You can see there's a few other options there that you can imagine you might want in a different situation

43
00:03:30.060 --> 00:03:30.680
then.

44
00:03:30.730 --> 00:03:33.460
For now we're going to have a color as well.

45
00:03:41.990 --> 00:03:45.270
So that we can see the shapes are all in the right place.

46
00:03:48.240 --> 00:03:52.420
Use that GDX versions of those whenever you get the choice.

47
00:03:52.750 --> 00:04:03.270
And then we're going to take our bird circle and set it up to match the actual bird itself.

48
00:04:03.880 --> 00:04:10.960
So we used bed circle dot set and we're going to set the center of the circle.

49
00:04:10.960 --> 00:04:14.120
So that's going to be just the center of the screen and the x coordinate.

50
00:04:14.470 --> 00:04:18.880
So GDX dot graphics.

51
00:04:19.030 --> 00:04:20.050
Get with

52
00:04:24.220 --> 00:04:28.050
Haverty the y coordinate is going to be bird y.

53
00:04:28.260 --> 00:04:32.370
But remember bird Y is the y coordinate of the bottom of the bird.

54
00:04:32.430 --> 00:04:48.760
So we need to add half of the height of the bird to get the center of the circle so we want that's flap

55
00:04:48.760 --> 00:04:56.650
States to get height over to and then the radius of the circle.

56
00:04:56.650 --> 00:05:05.680
We also want to be redstart flaps state to get height over to my we can use height or weight.

57
00:05:05.680 --> 00:05:07.080
It doesn't really matter.

58
00:05:07.080 --> 00:05:13.040
The width is slightly bigger than the height so I'm going to go for.

59
00:05:13.450 --> 00:05:18.060
So I'm going to go for width so this will give us the center of the circle.

60
00:05:18.310 --> 00:05:23.720
The x corner of the center of where the bird is the y coordinates of the center of where the bird is.

61
00:05:23.860 --> 00:05:28.300
And then the radius of the bird so the distance from the center of the bird to the edge of the bed which

62
00:05:28.300 --> 00:05:31.840
will just approximate has half the width.

63
00:05:31.870 --> 00:05:34.330
I've got a couple of brief problems as well.

64
00:05:34.330 --> 00:05:36.720
First I'll spell circle wrong.

65
00:05:41.150 --> 00:05:47.250
And I also think I've brought in the wrong second class.

66
00:05:47.390 --> 00:05:50.050
So yeah you can see I've chosen Java eFax there.

67
00:05:51.800 --> 00:05:53.650
That Stephanie not the one I once

68
00:05:59.230 --> 00:06:00.600
say we definitely want.

69
00:06:00.670 --> 00:06:05.160
As I mentioned earlier we always want the bad logic ones the GDX ones.

70
00:06:07.260 --> 00:06:07.590
Kate

71
00:06:11.730 --> 00:06:13.670
lovely so now I can say that correctly.

72
00:06:13.830 --> 00:06:16.230
Great.

73
00:06:16.290 --> 00:06:26.400
And I can now take my shape render and render a circle and I'm going to get the x y and radius from

74
00:06:26.400 --> 00:06:27.960
my bird circle.

75
00:06:28.050 --> 00:06:43.420
So it's just bird circle toward X but circle dot Y and but circle dot radius there again and then shape

76
00:06:43.420 --> 00:06:48.730
render dots and lovely.

77
00:06:48.740 --> 00:06:52.770
So now we should find we have a red circle on top of our.

78
00:06:53.630 --> 00:06:54.550
But all the time.

79
00:06:54.550 --> 00:06:58.310
Obviously we're not going to have that there permanently but it will just show us that our bird circle

80
00:06:58.310 --> 00:07:00.060
is in the right place.

81
00:07:00.790 --> 00:07:06.580
I actually just can to me that up to the top I think makes little more sense there area.

82
00:07:06.770 --> 00:07:12.180
And just before we run that there is one or two actual small changes we need to make.

83
00:07:12.260 --> 00:07:18.940
We need t create our shape renderer and circle down here in the create method.

84
00:07:18.940 --> 00:07:23.930
It won't like it if we try and create it in the general class.

85
00:07:25.120 --> 00:07:30.870
I'll just copy those instructions down and then remove them from here.

86
00:07:35.320 --> 00:07:35.860
OK.

87
00:07:37.540 --> 00:07:44.550
So now we should find that we've got a big red circle on top of our bird and that red circle moves exactly

88
00:07:44.550 --> 00:07:49.240
with our bird and we can use that red circle for collision detection.

89
00:07:49.240 --> 00:07:56.090
Obviously we're going to remove the actual appearance of the circle when we're done testing but find

90
00:07:56.090 --> 00:07:56.400
out.

91
00:07:56.410 --> 00:07:56.900
There we go.

92
00:07:56.920 --> 00:08:06.170
There's a circle and you can hear me in a sort of slightly odd way there alongside our bird.

93
00:08:06.190 --> 00:08:07.330
Wonderful.

94
00:08:07.390 --> 00:08:15.990
So a challenge for you now you're going to need to create a rectangle this time not a circle so it works

95
00:08:15.990 --> 00:08:19.140
in exactly the same way but it's a rectangle rather than a circle.

96
00:08:19.140 --> 00:08:23.540
And I want your rectangles to be on top of the pipes.

97
00:08:23.940 --> 00:08:28.320
So for each set of pipes you're going to need to create a rectangle at the top and a rectangle at the

98
00:08:28.320 --> 00:08:31.010
bottom and for now make them red.

99
00:08:31.090 --> 00:08:32.860
Make them go over the top.

100
00:08:32.880 --> 00:08:37.000
I'm not going to worry about the slight sort of shape there.

101
00:08:37.110 --> 00:08:42.180
You might want to create two rectangles for each pipe if you want if you want to be super accurate but

102
00:08:42.180 --> 00:08:44.990
to be honest if the bird is there it's going to be dead anyway.

103
00:08:45.180 --> 00:08:48.850
So I'm just going to create one rectangle for each pipe.

104
00:08:49.380 --> 00:08:49.880
OK.

105
00:08:50.070 --> 00:08:51.510
Best of luck then go for it.

106
00:08:56.940 --> 00:08:57.450
OK.

107
00:08:57.600 --> 00:08:59.150
That was a fairly big challenge.

108
00:08:59.150 --> 00:09:02.770
I hope you managed to at least give it a shot.

109
00:09:03.270 --> 00:09:08.250
And we're going to need four rectangles at the top and four at the bottom.

110
00:09:08.250 --> 00:09:11.700
So I'm going to create an array of rectangles

111
00:09:16.070 --> 00:09:19.600
and let's make sure I choose the right one this time so bad logic.

112
00:09:19.710 --> 00:09:20.920
There it is.

113
00:09:21.510 --> 00:09:26.670
So an array of rectangles called Top cube rectangles

114
00:09:29.570 --> 00:09:39.120
and another array of rectangles called bottom Chib rectangles.

115
00:09:39.310 --> 00:09:42.970
And then I'll define them down here.

116
00:09:45.380 --> 00:09:57.970
With my cube stuff so top Chib rectangles is going to be a new array of rectangles and there's going

117
00:09:57.970 --> 00:09:59.560
to be four of them in it.

118
00:09:59.620 --> 00:10:07.110
But I don't want to use for I want to use number of troops and exactly the same for bottom Chib rectangles

119
00:10:09.930 --> 00:10:12.100
going to be a new array of rectangles.

120
00:10:12.330 --> 00:10:17.680
And there's going to be number of cube objects in there.

121
00:10:18.180 --> 00:10:26.490
And then for each of those We're going to define the rectangle to be a new rectangle.

122
00:10:27.350 --> 00:10:39.860
So we'll just take top cheap rectangles I use a new rectangle and the same for bottom three rectangles

123
00:10:42.950 --> 00:10:47.600
is a rectangle and that would just mean that everything is correctly initialized in the create method

124
00:10:47.660 --> 00:10:54.400
and then we'll actually add the correct location of the rectangles down here.

125
00:10:55.310 --> 00:11:01.560
So we can do that here and it's going to be very similar to drawing the rectangle to drawing the Choop

126
00:11:01.580 --> 00:11:10.620
sorry it's just going to be creating a rectangle for each one which overlaps the cheap graphic itself.

127
00:11:10.760 --> 00:11:14.170
So let's create top G rectangles.

128
00:11:16.460 --> 00:11:18.830
And that's going to be a new rectangle.

129
00:11:19.910 --> 00:11:21.550
And we create rectangles

130
00:11:24.440 --> 00:11:26.640
if I can get the predicts there for us.

131
00:11:26.880 --> 00:11:31.440
But the simplest way is to use an x and y coordinates of the bottom left and then the width and the

132
00:11:31.440 --> 00:11:38.950
height so the x and y coordinate the bottom left are going to be exactly the same as the x and y coordinate

133
00:11:38.980 --> 00:11:42.890
at the bottom left of the cube.

134
00:11:43.350 --> 00:11:49.760
And then the width of the rectangle is going to be the same as the width of top tube.

135
00:11:50.460 --> 00:11:56.430
So that's just topped You don't get width and the height is going to be the same as the height of top

136
00:11:56.430 --> 00:11:58.590
tube top tube.

137
00:11:58.620 --> 00:12:01.950
Don't get hyped.

138
00:12:02.220 --> 00:12:08.020
And I think I actually missed that the x coordinate of the y coordinate that it's popped out in

139
00:12:13.340 --> 00:12:14.840
cheap x.

140
00:12:14.840 --> 00:12:23.980
I got the x coordinates the y coordinates the width and the height and then as you can imagine bottom

141
00:12:24.310 --> 00:12:28.990
G rectangles I is also going to be a new rectangle.

142
00:12:31.120 --> 00:12:39.210
Using cheap hex I again.

143
00:12:39.800 --> 00:12:44.120
And then the y coordinates is going to be the same as the y coordinates

144
00:12:47.560 --> 00:12:53.150
of the bottom of the bottom cheap and then width and height as before.

145
00:12:53.170 --> 00:13:05.630
It's just going to be bottom Chib get width and bottom Chib don't get height.

146
00:13:05.680 --> 00:13:06.070
There we go.

147
00:13:06.070 --> 00:13:11.450
So with any luck those rectangles should overlap exactly the existing cheeps.

148
00:13:11.890 --> 00:13:14.250
So now it's just a matter of displaying them.

149
00:13:14.680 --> 00:13:19.000
So remember we're only displaying them so that we can be sure temporarily that they're in the right

150
00:13:19.000 --> 00:13:19.610
place.

151
00:13:19.630 --> 00:13:22.230
We don't need to display them in the real thing.

152
00:13:25.230 --> 00:13:28.670
So we'll actually delete this code later on but it will be useful for us.

153
00:13:28.680 --> 00:13:32.750
Now I'm actually going to copy the for loop again.

154
00:13:39.040 --> 00:13:49.660
So each time we loop through we want to take out the raw and render a rectangle of x y width and height

155
00:13:49.690 --> 00:14:00.180
again so we can get those straight from here because it's exactly the same.

156
00:14:00.240 --> 00:14:03.960
That's what we had.

157
00:14:04.010 --> 00:14:08.330
In fact we want to copy and paste them because we want to be sure that the red rectangles that we're

158
00:14:08.330 --> 00:14:10.220
displaying are

159
00:14:12.910 --> 00:14:19.220
exactly the same as the rectangles that we created.

160
00:14:22.430 --> 00:14:26.260
OK so let's have a look.

161
00:14:26.460 --> 00:14:35.160
We should now have red rectangles on top of all of the tubes as they move from right to left.

162
00:14:35.160 --> 00:14:36.150
OK this is looking good.

163
00:14:36.150 --> 00:14:39.130
We've got a red rectangle already.

164
00:14:39.990 --> 00:14:42.140
And there we go.

165
00:14:43.230 --> 00:14:43.950
So wonderful.

166
00:14:43.950 --> 00:14:47.360
Now we're playing a game with no sprites just rectangles and circles.

167
00:14:47.880 --> 00:14:50.800
But now we can do our collision detection and this.

168
00:14:50.820 --> 00:14:54.540
Now that we've got our rectangles in circles it's it's super easy.

169
00:14:54.540 --> 00:14:57.230
So let's do this after they shape Brender.

170
00:14:57.450 --> 00:15:01.670
Actually I'm going to do it in this loop here because I need a loop anyway.

171
00:15:01.780 --> 00:15:06.510
I need to check whether the circle is colliding with any of the cheaps

172
00:15:09.240 --> 00:15:18.700
So our check is if and then there's a GDX method called into sector or GDL class called interceptor

173
00:15:20.420 --> 00:15:22.450
which obviously we use to intersect things

174
00:15:27.180 --> 00:15:36.770
and we want intersect dots overlaps and then you can see we can overlap circles and rectangles second

175
00:15:36.770 --> 00:15:38.890
circles or rectangles and rectangles.

176
00:15:39.230 --> 00:15:41.720
So we want to overlap

177
00:15:44.530 --> 00:15:54.340
bird circle and top achieve rectangles I or why we don't want to overlap them we want to test whether

178
00:15:54.340 --> 00:16:08.200
they are overlapped and we want to do the same with bottom rectangles as well say intersect dot overlaps

179
00:16:10.850 --> 00:16:11.830
that circle

180
00:16:14.390 --> 00:16:29.690
and bottom G rectangles I and for now will just log TDX dot dot log collision

181
00:16:32.280 --> 00:16:33.180
Yes.

182
00:16:35.070 --> 00:16:37.190
And it's as simple as that.

183
00:16:37.230 --> 00:16:44.100
So we should now be able to detect whether the bird has collided with any of the rectangles and if it

184
00:16:44.100 --> 00:16:44.800
has.

185
00:16:44.820 --> 00:16:47.530
We'll get this log.

186
00:16:49.380 --> 00:16:54.640
In the locks.

187
00:16:54.760 --> 00:16:56.100
Let's take a look.

188
00:16:56.800 --> 00:16:58.300
So here we go.

189
00:16:58.300 --> 00:17:08.350
Stop playing and you can see that if I try and get through this one I fail and you can see the new collisions

190
00:17:08.980 --> 00:17:13.300
wonderfully appearing that beryllium.

191
00:17:13.360 --> 00:17:18.290
So now we've got our collision detection going on merrily there.

192
00:17:18.640 --> 00:17:21.690
So now we no longer need our shape render.

193
00:17:22.150 --> 00:17:25.470
So I'm actually going to get rid of all our Shabir under a carrot.

194
00:17:25.540 --> 00:17:36.190
I think I actually just commented out so that you can still view it later if you want.

195
00:17:36.190 --> 00:17:38.010
But the point is we don't need it.

196
00:17:38.470 --> 00:17:44.650
And so let's just make sure that without the Shabir and are carried this works in exactly the same way

197
00:17:44.680 --> 00:17:52.630
except we are the actual games graphics rather than the rectangles in circles just to keep things neat

198
00:17:52.630 --> 00:17:53.260
as well.

199
00:17:53.440 --> 00:17:56.510
Or comments out of shape Brender are carried up here.

200
00:17:59.890 --> 00:18:04.040
OK here we go.

201
00:18:05.050 --> 00:18:06.790
So now we're playing along merrily.

202
00:18:06.940 --> 00:18:07.670
Let's see.

203
00:18:07.670 --> 00:18:13.520
And just make sure that we're still getting the collision detection that we get.

204
00:18:13.600 --> 00:18:21.370
So in collisions lots of collisions collisions lots of collisions etc..

205
00:18:24.260 --> 00:18:24.950
Brilliant.

206
00:18:24.990 --> 00:18:27.580
So one small change before we finish this video.

207
00:18:27.790 --> 00:18:35.880
Well now I'm going to get rid of the fact that the initial Choop you remember starts off in the middle.

208
00:18:35.910 --> 00:18:38.060
We don't want that to be the case.

209
00:18:38.280 --> 00:18:40.740
We wanted to start off on the right of the screen.

210
00:18:41.010 --> 00:18:55.290
So I'm going to add to that GDX don't get with GPS graphics don't get with.

211
00:18:55.480 --> 00:18:59.530
And that will mean that the first Jeep starts off on the right of the screen as we want.

212
00:18:59.530 --> 00:19:05.380
And then it will just come into the screen beryllium sort of go down collision detection we we're pretty

213
00:19:05.380 --> 00:19:11.860
much done all we need now is a kind of game management system so we want to display the score and we

214
00:19:11.860 --> 00:19:16.150
want to start and stop the game when they use the dice.

215
00:19:16.210 --> 00:19:19.440
So we'll deal with the first of those to the score in the next video.

216
00:19:19.530 --> 00:19:20.070
See if that.
