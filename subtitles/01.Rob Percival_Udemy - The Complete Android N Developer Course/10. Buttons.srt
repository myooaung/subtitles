1
00:00:00,310 --> 00:00:06,630
In the previous video we saw how to create text views and edit them to our heart's desire.

2
00:00:07,050 --> 00:00:10,580
In this video we're going to move on from that to see how to add buttons.

3
00:00:10,800 --> 00:00:15,780
And more importantly use those buttons to make our apps interactive so that the user can start doing

4
00:00:15,780 --> 00:00:20,230
something you know app rather than just admiring our lovely text views.

5
00:00:20,610 --> 00:00:24,230
So let's drag in a button.

6
00:00:24,240 --> 00:00:29,500
I'm going to go for one that scented and a little bit underneath my great app text view.

7
00:00:29,850 --> 00:00:33,290
So you can see we've got that default Android styled them.

8
00:00:33,840 --> 00:00:42,480
If you've got the buttons selected you'll be able to do all the standard customizing like setting the

9
00:00:42,480 --> 00:00:48,840
hour for changing the background etc. etc. just like we did with text views but I'm actually going to

10
00:00:48,840 --> 00:00:54,850
ignore all of that this time and go straight to this new property called the on click property.

11
00:00:55,440 --> 00:01:03,390
And what this does is it allows us to do something when this button is clicked and all we have to type

12
00:01:03,390 --> 00:01:09,250
in here is the name of the chunk of code also known as a function or method.

13
00:01:09,330 --> 00:01:14,130
We want to run when this button is clicked.

14
00:01:14,130 --> 00:01:22,050
So I'm going to call it click function like that and you'll notice that I've used something called camel

15
00:01:22,050 --> 00:01:22,880
case.

16
00:01:23,190 --> 00:01:30,030
So we've got a lower case everywhere apart from this f function and this is our standard way of defining

17
00:01:30,030 --> 00:01:35,850
functions and indeed variable names as well to use lowercase everywhere except for the first letter

18
00:01:35,850 --> 00:01:36,790
of the second.

19
00:01:36,900 --> 00:01:42,240
And if there was a third fourth fifth word and it just makes it quite readable without putting in spaces

20
00:01:42,240 --> 00:01:44,570
or hyphens or anything nasty like that.

21
00:01:45,270 --> 00:01:49,620
So I press enter to keep that.

22
00:01:49,680 --> 00:01:54,760
So now I know that when this button is clicked the click function will be run.

23
00:01:55,080 --> 00:01:59,700
What I haven't done yet of course is write the actual code for click function and that's what we're

24
00:01:59,700 --> 00:02:01,050
going to do now.

25
00:02:02,070 --> 00:02:04,450
So go back over to the Java folder.

26
00:02:04,800 --> 00:02:11,410
And then the top option neither of the test ones and double click on main activity.

27
00:02:11,940 --> 00:02:17,790
So we saw this first a couple of videos ago just to remind you it's got the package name at the top

28
00:02:18,150 --> 00:02:22,200
and then a couple of default classes here.

29
00:02:22,470 --> 00:02:25,020
Don't worry too much about me using the word class.

30
00:02:25,020 --> 00:02:25,910
Think of it for now.

31
00:02:25,920 --> 00:02:31,280
Just as a chunk of code will be looking at much more detail of what a class is in the next section.

32
00:02:31,320 --> 00:02:37,750
So you've got two classes there for compatibility and to interact with the operating system itself.

33
00:02:37,840 --> 00:02:42,810
And now just before we write our button code let's look at this in a bit more detail and see what's

34
00:02:42,810 --> 00:02:44,030
going on here.

35
00:02:44,040 --> 00:02:50,400
So it sense of the word public which is essentially a Java keyword to say that this class can be accessed

36
00:02:50,610 --> 00:02:54,190
from anywhere within the app it's public.

37
00:02:54,600 --> 00:02:56,840
And then it's a class.

38
00:02:56,880 --> 00:03:04,580
So we use the word class to define a class and then it's called main activity and then it extends up

39
00:03:04,740 --> 00:03:06,480
compact activity.

40
00:03:06,480 --> 00:03:08,700
So that's the same as what we've got here.

41
00:03:08,820 --> 00:03:15,900
And that just means that our main activity class which controls our main activity which is the screen

42
00:03:15,900 --> 00:03:18,680
that the user can currently see.

43
00:03:19,770 --> 00:03:26,880
And what we're saying with this extends is that the main activity will take the code for app compact

44
00:03:26,970 --> 00:03:30,470
activity and extend it add some code to it.

45
00:03:30,720 --> 00:03:37,070
So essentially that's a way of getting our backward compatibility into our main activity class.

46
00:03:37,410 --> 00:03:39,270
And again don't worry too much about this.

47
00:03:39,270 --> 00:03:45,280
This is quite high level Java code and we're only very much dipping our toes into Java at this point

48
00:03:45,660 --> 00:03:51,100
but I want you to have a reasonable idea of what's going on in this boilerplate code.

49
00:03:51,330 --> 00:03:54,740
Then further down we've got this override command.

50
00:03:55,350 --> 00:04:03,830
And that's because what we're doing is customizing a method or function here called on create a method

51
00:04:03,830 --> 00:04:05,930
or function again it's just a chunk of code.

52
00:04:06,110 --> 00:04:14,420
And this one is called On create because it's run whenever the activity is created i.e. when the app

53
00:04:14,480 --> 00:04:21,130
is run but this uncreate method is one that already exists and we're just adding some code to it.

54
00:04:21,320 --> 00:04:23,950
And that's what this override message is saying.

55
00:04:24,140 --> 00:04:28,130
So it's saying that we know that on create already exists.

56
00:04:28,130 --> 00:04:29,730
We're not trying to recreate it.

57
00:04:29,840 --> 00:04:32,790
We're just adding some code to it.

58
00:04:33,290 --> 00:04:42,560
And then we've got protected instead of public which means it's only accessible to code within this

59
00:04:42,620 --> 00:04:43,940
package.

60
00:04:43,980 --> 00:04:45,560
Again don't worry too much about that.

61
00:04:45,560 --> 00:04:47,260
It really doesn't matter at this point.

62
00:04:47,300 --> 00:04:51,610
It's just the default state of the create method.

63
00:04:51,860 --> 00:04:58,310
Then we have this void keyword which essentially means that this method does some stuff but it doesn't

64
00:04:58,310 --> 00:05:00,680
return any information.

65
00:05:00,680 --> 00:05:05,780
So you might at some point create a method that adds two numbers together for example and then that

66
00:05:05,780 --> 00:05:09,120
would return the result of those two numbers added together.

67
00:05:09,440 --> 00:05:11,530
But this method doesn't return anything.

68
00:05:11,540 --> 00:05:13,500
It does just some stuff.

69
00:05:13,790 --> 00:05:21,530
And then what is that stuff that it does well it sets up the activity itself using the saved instance

70
00:05:21,530 --> 00:05:21,880
state.

71
00:05:21,890 --> 00:05:27,890
So if there is I saved state for this app within the user's phone and it will restore that and then

72
00:05:27,890 --> 00:05:37,220
finally it sets the content view using the dot layout dot activity main So are short for resources lay

73
00:05:37,230 --> 00:05:44,240
out is this layout folder here and then activity main is the activity main axonal files are essentially

74
00:05:44,240 --> 00:05:50,210
linking up the main activity with this particular layout.

75
00:05:50,990 --> 00:05:52,280
So that's what's going on.

76
00:05:52,310 --> 00:05:58,070
Again don't expect to fully understand every aspect of that but you very much will by the end of the

77
00:05:58,070 --> 00:05:58,640
course.

78
00:05:58,760 --> 00:06:06,340
All we're going to do is to create our little method to do something when the button is clicked.

79
00:06:06,500 --> 00:06:14,690
So I'm going to start by creating my method as a public method so it's accessible from anywhere and

80
00:06:14,690 --> 00:06:16,800
it's not going to return anything.

81
00:06:17,450 --> 00:06:25,400
So I use the keyword voit and then I need to add the name of my method and I'm going jump back over

82
00:06:25,400 --> 00:06:31,880
to activity main for example to remind myself what that was click function.

83
00:06:31,940 --> 00:06:34,030
So I'm just going to copy that and paste it in.

84
00:06:34,130 --> 00:06:36,470
It's obviously critical that we get the name right.

85
00:06:36,650 --> 00:06:42,710
Otherwise when we press the button the app will try and run a function which isn't there and your app

86
00:06:42,710 --> 00:06:43,570
will crash.

87
00:06:45,350 --> 00:06:53,390
So now this function is called by the button and the button is a type of object called a view.

88
00:06:53,450 --> 00:06:59,060
You may have noticed we had text views down here we've got Image views essentially a view is anything

89
00:06:59,300 --> 00:07:06,950
that appears on the screen so a button is a view a checkbox has a view switches a view etc..

90
00:07:07,850 --> 00:07:17,210
So over in my code to reflect the fact that this has been called by a view I'm going to create a view

91
00:07:17,270 --> 00:07:25,490
variable and I create a view variable using View with a capital V and you can see that this is requiring

92
00:07:25,490 --> 00:07:35,060
me to add a new class to my app which I can do using that shortcut which is old enter and then adds

93
00:07:35,450 --> 00:07:42,950
the import statement for me so I can now run all the view related code so view with a capital V creates

94
00:07:43,040 --> 00:07:50,970
a view and I'm going to call this view view so you can use any name you like there.

95
00:07:51,110 --> 00:07:58,010
But the kind of standard thing is to use the name of the type of thing that it is.

96
00:07:58,040 --> 00:08:03,230
So in this case it's a view a view with a capital V says I'm going to create a view and I'm going to

97
00:08:03,230 --> 00:08:05,460
call it view with a little V.

98
00:08:05,720 --> 00:08:12,830
And that view will refer to the button that called this method hope that makes sense.

99
00:08:12,830 --> 00:08:14,400
Listen to it again if it didn't.

100
00:08:14,660 --> 00:08:18,400
And if you're still confused again don't worry too much.

101
00:08:18,470 --> 00:08:23,930
We're diving quite quickly into some Java code just so that we can get a feel for how it works.

102
00:08:24,080 --> 00:08:27,590
But we will look at it in much more detail later on.

103
00:08:27,590 --> 00:08:32,600
Now you notice I put in some curly brackets then they are the standard way in many many programming

104
00:08:32,600 --> 00:08:35,870
languages to contain some code.

105
00:08:35,870 --> 00:08:42,890
So this means that the click function will start at this curly bracket and it will finish at this curly

106
00:08:42,890 --> 00:08:44,170
bracket.

107
00:08:45,140 --> 00:08:47,400
So what we want our method to actually do.

108
00:08:47,430 --> 00:08:52,360
Well there's not much we can make it do with the level of knowledge that we have so far.

109
00:08:52,640 --> 00:09:00,230
What we're going to do is display some information in the logs so you remember we had these logs down

110
00:09:00,230 --> 00:09:00,660
here.

111
00:09:00,710 --> 00:09:02,300
We haven't really used them yet.

112
00:09:02,300 --> 00:09:05,250
This is where we're going to start using them.

113
00:09:05,270 --> 00:09:15,080
So to put a bit of information in the logs we use log with a capital L dot and then we've got a couple

114
00:09:15,080 --> 00:09:23,840
of different letters that we can use say lock dot D E I V W et cetera and therefore different types

115
00:09:23,930 --> 00:09:24,920
of locks.

116
00:09:25,100 --> 00:09:31,580
So warnings errors etc. We've just got some information.

117
00:09:31,820 --> 00:09:34,270
So I'm going to use a log dot.

118
00:09:34,880 --> 00:09:41,210
And you can see that that top function which is what I'm going to be using is expecting a tag and a

119
00:09:41,210 --> 00:09:42,760
message.

120
00:09:42,910 --> 00:09:49,250
So I'm going to press enter to get the parentheses in there and then the tag is just kind of a type

121
00:09:49,250 --> 00:09:50,540
of message that we're doing here.

122
00:09:50,540 --> 00:09:58,550
So I'm just going to use info and then to give the actual message itself.

123
00:09:58,950 --> 00:10:05,570
I'm going to add a comma and then button pressed like that.

124
00:10:05,750 --> 00:10:14,390
And notice I've put both of those in double quotes because they're strings they're bits of text that

125
00:10:14,390 --> 00:10:19,430
we want to appear in the Lokes and whenever we want to define a bit of text in Java or indeed in pretty

126
00:10:19,430 --> 00:10:23,720
much any programming language we use double quotes to do that.

127
00:10:24,590 --> 00:10:28,660
And then we're almost done but you can see I've got a little red wavy line here.

128
00:10:28,700 --> 00:10:32,200
That's because I'm missing my semi-colon.

129
00:10:32,750 --> 00:10:37,150
So Java requires semi-colons at the end of each line.

130
00:10:37,670 --> 00:10:45,360
But now that that's done we should be able to run our app and press a button and have the button actually

131
00:10:45,360 --> 00:10:46,210
do something.

132
00:10:46,350 --> 00:10:46,630
OK.

133
00:10:46,650 --> 00:10:47,450
There it is.

134
00:10:47,670 --> 00:10:54,190
I'll just bring up the Lokes so that we can see the result hopefully.

135
00:10:54,570 --> 00:10:58,410
And then let's press the button and there we go.

136
00:10:58,410 --> 00:10:59,390
Hurrah.

137
00:10:59,580 --> 00:11:02,730
Might not look like much but that's actually something very significant.

138
00:11:02,730 --> 00:11:12,880
We've just created our first interactive Android app so you press the button and you get a response

139
00:11:12,970 --> 00:11:15,220
in the logs don't worry.

140
00:11:15,210 --> 00:11:22,450
By the way about getting all these other bits of info the logs often give a lot of info that we don't

141
00:11:22,450 --> 00:11:23,810
really need.

142
00:11:23,860 --> 00:11:31,190
If you want to look for a particular item in the logs then you can always use the search function here.

143
00:11:31,550 --> 00:11:36,610
So if I look for button for example then I will only see the ones that I'm interested in and that can

144
00:11:36,610 --> 00:11:41,540
be useful for filtering out all of the rubbish that you're not interested in.

145
00:11:41,970 --> 00:11:42,840
OK.

146
00:11:42,970 --> 00:11:48,180
So congratulations you built your first interactive Android app.

147
00:11:48,190 --> 00:11:50,840
Now of course I want you to do it yourself.

148
00:11:50,950 --> 00:11:57,490
So what we're going to do now is actually close this app down when to create a whole new app which simply

149
00:11:57,490 --> 00:12:00,810
contains a button and then display something in the logs.

150
00:12:00,820 --> 00:12:05,990
When that button is pressed so it's more or less recreating the functionality that we've got here.

151
00:12:06,160 --> 00:12:12,390
But practicing recreating an app from scratch will get all those ideas into your head.

152
00:12:12,390 --> 00:12:17,540
So the unclick function adding in the Baton creating the activity et cetera.

153
00:12:17,680 --> 00:12:20,610
Definitely a good idea to give it a go yourself.

154
00:12:21,100 --> 00:12:26,650
So you're recreating a new app from scratch with a button that then displays anything you like in the

155
00:12:26,650 --> 00:12:29,260
logs when that button is tapped.

156
00:12:29,260 --> 00:12:30,520
Best of luck.

157
00:12:30,580 --> 00:12:32,460
The video and go for it.

158
00:12:39,540 --> 00:12:42,160
K I hope you manage that.

159
00:12:42,230 --> 00:12:42,710
Here I go.

160
00:12:42,720 --> 00:12:51,620
So I'm going to close down the existing project and then I'm going to start a new Android studio project

161
00:12:53,000 --> 00:12:56,240
and I'm just going to get through the process much as we did before.

162
00:12:57,960 --> 00:13:04,470
I'm going to call this click demo or leave the company domain the same and the location the same next

163
00:13:04,910 --> 00:13:09,840
leave all that as the default and we'll have an empty activity just as before.

164
00:13:09,900 --> 00:13:18,790
Next I'm going to leave the activity name the same and then this will get created just as it did before.

165
00:13:19,470 --> 00:13:20,650
And here we go.

166
00:13:21,060 --> 00:13:24,220
So I'm going to bring out my project files.

167
00:13:24,220 --> 00:13:28,080
It's already got mine activity selected.

168
00:13:28,470 --> 00:13:37,060
I'm going to go to Raz for resources and open up activity main darksome else and every day.

169
00:13:37,440 --> 00:13:48,800
So I'm going to drag in my button I'll just pop them and I'm going to change the text this time to click.

170
00:13:48,810 --> 00:13:56,460
Me that we go and I'll get rid of the text here as well because we don't need them.

171
00:13:56,550 --> 00:14:03,630
And one thing you can do is once you've got that set up is just run the app and then it will run nicely

172
00:14:03,630 --> 00:14:04,540
in the background.

173
00:14:04,690 --> 00:14:11,040
And then when you're ready to actually do something with it you can use the quick launch to run it very

174
00:14:11,040 --> 00:14:11,670
quickly again.

175
00:14:11,670 --> 00:14:13,750
So that's quite a neat thing to do.

176
00:14:13,800 --> 00:14:19,650
As soon as you've created your app run it and then it'll be ready to run much quicker when you actually

177
00:14:19,650 --> 00:14:21,600
need it.

178
00:14:21,600 --> 00:14:32,510
So let's go down to the on click option game I'll call it something different now we'll just call it

179
00:14:32,510 --> 00:14:38,510
button clicked on I'll copy that to keyboard.

180
00:14:38,620 --> 00:14:40,310
So I've got it in the memory.

181
00:14:40,990 --> 00:14:41,470
All right.

182
00:14:41,490 --> 00:14:48,020
And then back over to the main activity the logs clicking in there.

183
00:14:48,790 --> 00:14:50,280
I don't need them yet.

184
00:14:51,530 --> 00:14:59,450
And then remember I write my code inside the main activity class but outside the uncreate method and

185
00:14:59,480 --> 00:15:03,860
I'm going to create a public method which doesn't return anything.

186
00:15:04,010 --> 00:15:08,600
It's void and it's going to be called button clicked.

187
00:15:08,600 --> 00:15:11,550
And just as before it's going to be called by a view.

188
00:15:11,690 --> 00:15:16,030
So I'm going to create a new view using View with a capital V.

189
00:15:16,520 --> 00:15:28,120
I mean the old enter to automatically import the view class and then I'm going to call my button or

190
00:15:28,120 --> 00:15:32,190
the element that called the method view with a little of

191
00:15:35,180 --> 00:15:39,610
and I'm going to use curly brackets to define the limits of my method.

192
00:15:40,130 --> 00:15:47,950
And finally I'm going to send a message to blogs using Logo.

193
00:15:48,560 --> 00:15:58,500
And then I use old enter again to import the LOEG class.

194
00:15:58,550 --> 00:16:03,930
So just to have a quick look at page you can see what we've imported there and if you do have problems

195
00:16:03,930 --> 00:16:07,390
with the old Enter method you can just type in import Android.

196
00:16:07,410 --> 00:16:11,180
Don't you tell Dot log.

197
00:16:11,260 --> 00:16:21,230
And again I'll just call this I'll give it a tag of info and the message I'll give is the button was

198
00:16:21,480 --> 00:16:29,790
clique's slightly different to before but the code is essentially the same rights that we gave you.

199
00:16:29,790 --> 00:16:30,640
I hope you manage that.

200
00:16:30,640 --> 00:16:33,100
Let's just check make sure everything is running

201
00:16:36,920 --> 00:16:37,930
as needed.

202
00:16:40,270 --> 00:16:41,170
So there we go.

203
00:16:41,290 --> 00:16:44,550
Instant run has happens.

204
00:16:44,560 --> 00:16:48,820
I will click the button and with any luck there we go.

205
00:16:48,820 --> 00:16:50,250
The button was clicked.

206
00:16:50,470 --> 00:16:57,070
So just down the bottom there click it again and you can see that working great.

207
00:16:57,640 --> 00:16:58,480
Brilliant.

208
00:16:58,480 --> 00:17:04,450
So now we got our first a bit of interactivity but of course infectivity at the moment is only one way.

209
00:17:04,450 --> 00:17:06,970
The user doesn't actually see the results of this.

210
00:17:06,970 --> 00:17:13,820
It's only appears in our logs and also the user can't do anything other than click the button itself.

211
00:17:13,900 --> 00:17:18,640
So we're going to fix this first in the next video by seeing how the user can enter some information

212
00:17:18,850 --> 00:17:24,220
and how we can access that information using a text field.

213
00:17:24,730 --> 00:17:29,240
And then we'll follow one from that to see how we can give the user some feedback.

214
00:17:29,270 --> 00:17:31,530
Display something on the screen.

215
00:17:32,010 --> 00:17:34,210
All right so let's today let's get straight to it.

216
00:17:34,240 --> 00:17:35,960
Text fields in the next video.
