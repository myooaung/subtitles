1
00:00:00,460 --> 00:00:05,670
This video we're going to go back to our x y dot com because we're going to be looking at something

2
00:00:05,670 --> 00:00:09,560
which is pure Java and not really to do with Android specifically.

3
00:00:09,570 --> 00:00:14,670
Having said that we're going to use what we're about to learn in Android to download some web content

4
00:00:15,000 --> 00:00:22,140
and we'll use the same structure in lots of the lectures and projects throughout the course try and

5
00:00:22,140 --> 00:00:24,120
catch might sound like a fun ball game.

6
00:00:24,240 --> 00:00:29,820
But actually it's a way of stopping our app from crashing if it experiences an era.

7
00:00:30,030 --> 00:00:33,480
So let's jump straight in and see how it works.

8
00:00:33,480 --> 00:00:39,660
So click try next to Hello World to get our basic hello world code which you should remember from the

9
00:00:39,660 --> 00:00:40,570
first few videos.

10
00:00:40,590 --> 00:00:47,230
And then just run that code clicking Start and you can see we get the output Hello world.

11
00:00:50,030 --> 00:00:52,560
So now I'm going to give you a couple of very small challenges.

12
00:00:52,680 --> 00:00:59,830
And the first is to create an integer array which has room for three different objects.

13
00:01:00,440 --> 00:01:03,980
So an integer array that has room for three different numbers.

14
00:01:03,980 --> 00:01:06,490
Remember it's an array not an array list.

15
00:01:06,640 --> 00:01:08,540
So if you can remember how to do that.

16
00:01:08,640 --> 00:01:09,230
Go for it.

17
00:01:13,760 --> 00:01:17,430
I hope you managed to create an integer array we use it.

18
00:01:17,660 --> 00:01:23,870
And then the square brackets to show that we want an array and then I'll call it array but of course

19
00:01:23,870 --> 00:01:26,000
you can call it whatever you like.

20
00:01:26,000 --> 00:01:31,600
And then it's going to be a new integer array.

21
00:01:31,880 --> 00:01:38,260
And we're going to specify that it has room for three numbers like that.

22
00:01:38,750 --> 00:01:44,390
So remember an array is different to an array list because it has a fixed number of items in it whereas

23
00:01:44,390 --> 00:01:47,810
an array list we can have as many different items as we want.

24
00:01:47,810 --> 00:01:48,270
All right.

25
00:01:48,350 --> 00:01:51,890
I'll forgive you if you didn't remember that because we haven't used arrays since we first met them

26
00:01:52,130 --> 00:01:53,960
back in chapter 3.

27
00:01:53,990 --> 00:01:55,790
This next bit though should be fine.

28
00:01:55,790 --> 00:02:05,130
Can you create a for loop which sets the values of the three integers in our array to 0 1 and 2 respectively.

29
00:02:05,400 --> 00:02:06,000
Go for it

30
00:02:12,330 --> 00:02:12,790
OK.

31
00:02:12,870 --> 00:02:13,980
How do you manage that one.

32
00:02:14,260 --> 00:02:16,520
So we're going to use a for loop.

33
00:02:16,900 --> 00:02:22,490
And in our follow up we're going to create an integer i which is initially going to be 0.

34
00:02:23,140 --> 00:02:27,960
We're going to keep going as long as I have less than three.

35
00:02:28,060 --> 00:02:33,010
You could have used less than or equal to two there but OK for the Possibly simpler option of less than

36
00:02:33,010 --> 00:02:33,980
three.

37
00:02:34,180 --> 00:02:38,000
And we're going to increase I each time.

38
00:02:38,000 --> 00:02:39,430
So I plus plus

39
00:02:42,800 --> 00:02:47,970
10 we use our Kelli brackets to contain our folly.

40
00:02:48,020 --> 00:02:55,010
And we're just getting to set array by equal to.

41
00:02:56,240 --> 00:02:57,770
Simple as that.

42
00:02:58,940 --> 00:03:08,090
And then just to make sure it's worked I'm going to use a system out to print line and to print that

43
00:03:08,090 --> 00:03:08,860
to the console.

44
00:03:08,870 --> 00:03:17,850
We're going to need to convert it to a string which we do with arrays dot to string and then our array.

45
00:03:18,650 --> 00:03:23,410
So that just converts the array to a string so we can view it in the console in order for that to work

46
00:03:23,420 --> 00:03:27,060
we're going to need to import the arrays package.

47
00:03:27,080 --> 00:03:29,400
So that's import.

48
00:03:29,420 --> 00:03:35,720
Java don't you tell Dot arrays OK.

49
00:03:37,020 --> 00:03:37,750
Let's take a look.

50
00:03:37,770 --> 00:03:42,620
We should now see our array is filled with 0 1 2.

51
00:03:42,810 --> 00:03:46,260
Fantastic so all all well and good so far all fairly straightforward.

52
00:03:46,260 --> 00:03:54,690
What if for some reason in our code we've decided to try and add four items into this integer array.

53
00:03:54,690 --> 00:03:58,570
Now obviously that's not going to work because we are only allowed three.

54
00:03:58,650 --> 00:04:05,640
So let's just see what happens if we run our code now we get what's known as an exception which is essentially

55
00:04:05,640 --> 00:04:07,500
just an error in our code.

56
00:04:07,830 --> 00:04:12,660
And if we got this in one of our Android apps the whole app would crash just really the one user experience

57
00:04:12,660 --> 00:04:14,750
we want to avoid at all costs.

58
00:04:14,940 --> 00:04:18,150
So obviously the best solution for that is to not get the error in the first place.

59
00:04:18,270 --> 00:04:23,490
But there are some cases in which we can't guarantee that we won't get an error if for example we try

60
00:04:23,490 --> 00:04:27,240
and download some information from the Internet and the user doesn't have their Internet connection

61
00:04:27,510 --> 00:04:28,280
up and running.

62
00:04:28,290 --> 00:04:29,870
We're going to get an exception.

63
00:04:29,880 --> 00:04:32,820
We don't want our app to crash just because that happens.

64
00:04:33,330 --> 00:04:36,390
So this is where I try and catch come in.

65
00:04:36,390 --> 00:04:38,460
And the way it works is quite simple.

66
00:04:40,520 --> 00:04:44,100
We take a try.

67
00:04:44,570 --> 00:04:51,000
And then we put curly brackets around the code that we want to try.

68
00:04:51,140 --> 00:04:58,150
So we are literally trying out this code and we accept that there's a chance that this may fail.

69
00:04:58,790 --> 00:05:08,510
So what we then D is catch the exception or catch the error essentially and we normally put it like

70
00:05:08,510 --> 00:05:19,280
that say catch and then we create a variable of a type of exception so exception with a capital A.

71
00:05:19,560 --> 00:05:25,160
And then we normally call the exception literally to keep things simple.

72
00:05:26,130 --> 00:05:35,480
And then what we then do is put our code that we want to happen if we get an error in here so for now

73
00:05:36,560 --> 00:05:43,290
we'll just print it to this console system out to print line.

74
00:05:46,480 --> 00:05:47,080
There we go.

75
00:05:47,290 --> 00:05:49,870
So let's run that now.

76
00:05:50,650 --> 00:05:53,440
And you can see I've got a separate area.

77
00:05:54,190 --> 00:06:02,980
Maybe you spotted that I actually put my try curly brackets around the whole thing rather than just

78
00:06:02,980 --> 00:06:04,830
the folder.

79
00:06:05,150 --> 00:06:09,190
So leave that in because some of you might have done that.

80
00:06:09,190 --> 00:06:10,150
There we go.

81
00:06:10,630 --> 00:06:17,710
So you can see what's happened now is that we've printed out era just there but crucially the app hasn't

82
00:06:17,710 --> 00:06:18,250
crashed.

83
00:06:18,250 --> 00:06:23,680
We haven't actually had an exception because we caught the exception and in this way in this case we

84
00:06:23,680 --> 00:06:27,430
just printed it to the logs but we could have done something that we could have alerted the user to

85
00:06:27,430 --> 00:06:28,630
something that went wrong.

86
00:06:28,630 --> 00:06:31,580
If for example they didn't have their internet connection.

87
00:06:32,200 --> 00:06:35,010
So the most important thing is that it hasn't crashed.

88
00:06:35,110 --> 00:06:41,440
But we've also been able to alert the user to a problem and hopefully they can change whatever it is

89
00:06:41,440 --> 00:06:44,970
about their system that caused that problem in the first place.

90
00:06:45,010 --> 00:06:50,560
So this try catch system is really useful when you're doing things in your apps that you know have a

91
00:06:50,560 --> 00:06:54,050
chance of failing like downloading content from the Internet.

92
00:06:54,060 --> 00:06:56,730
How are we doing in the next lecture.

93
00:06:56,740 --> 00:07:01,870
One last thing I'd like to show you is that you can catch specific exceptions as well rather than just

94
00:07:01,870 --> 00:07:03,890
catching a generic exception.

95
00:07:04,000 --> 00:07:10,690
You could catch the specific objection exception that we're getting here which is this array index out

96
00:07:10,690 --> 00:07:11,990
of bounds exception.

97
00:07:12,040 --> 00:07:17,170
So if you want to catch a specific exception then you use then

98
00:07:20,200 --> 00:07:27,480
array index out of bounds exception.

99
00:07:27,940 --> 00:07:36,870
So that would then catch that specific exception and then if you wanted you could have a general catch

100
00:07:40,060 --> 00:07:44,630
exception there that just caught any other exception that you hadn't anticipated.

101
00:07:45,250 --> 00:07:49,630
So for this one we could say index

102
00:07:52,810 --> 00:07:55,390
out of bounds like that.

103
00:07:55,830 --> 00:07:57,460
Try spelling bounds right.

104
00:07:59,020 --> 00:08:04,120
So then we've caught that specific exception but we still have a backup in case there was another problem

105
00:08:04,120 --> 00:08:05,410
that we didn't foresee.

106
00:08:05,740 --> 00:08:13,330
But the show does go on and the script or our app will keep on running even though we've had an exception

107
00:08:13,330 --> 00:08:14,250
in our code here.

108
00:08:15,370 --> 00:08:18,310
So that's what we use to try and catch for in the next lecture.

109
00:08:18,310 --> 00:08:23,370
We'll apply that directly when we try and download some content from the web see it there.
