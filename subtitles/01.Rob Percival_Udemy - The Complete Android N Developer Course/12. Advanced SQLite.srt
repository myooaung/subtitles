1
00:00:00,750 --> 00:00:06,090
This we we're going to look at as you liked and a bit more detail and see some more advanced things

2
00:00:06,090 --> 00:00:07,430
that we can do with it.

3
00:00:07,440 --> 00:00:08,900
The First off very quick challenge.

4
00:00:09,000 --> 00:00:16,880
Can you change this code back into the users database and add two more users with any name and age you

5
00:00:16,890 --> 00:00:24,910
like go for it.

6
00:00:25,050 --> 00:00:27,510
I'm sure you manage that one.

7
00:00:27,510 --> 00:00:32,430
So all we need to do is change everything back.

8
00:00:32,430 --> 00:00:39,310
In fact we don't need this line at all anymore because the table that we need definitely exists.

9
00:00:40,980 --> 00:00:48,760
And then we want to insert was just name wasn't it that we had and H.

10
00:00:49,720 --> 00:00:56,920
And then we will add cost and we'll give her the young age of 21.

11
00:01:00,400 --> 00:01:04,560
And we mustn't forget Ralphy of course

12
00:01:08,010 --> 00:01:11,680
we get.

13
00:01:12,130 --> 00:01:15,400
And then we just take these two name

14
00:01:17,920 --> 00:01:18,850
and age

15
00:01:21,730 --> 00:01:28,200
and name and age should probably update as well although of course it will work fine.

16
00:01:30,460 --> 00:01:31,000
I use

17
00:01:34,810 --> 00:01:38,170
That's what they were.

18
00:01:38,190 --> 00:01:42,420
OK so just checking that we've got all of the uses.

19
00:01:42,880 --> 00:01:49,510
I'll probably have a couple of other uses as well for my testing and it would be good to update this

20
00:01:49,520 --> 00:01:54,730
as well to the correct table name.

21
00:01:55,000 --> 00:01:56,080
And there we go.

22
00:01:56,080 --> 00:01:57,410
We've got our users there.

23
00:01:57,520 --> 00:02:04,650
We've got Kirsten a couple of times which is not a problem and all I'm going to do is apply this to

24
00:02:05,640 --> 00:02:09,970
use the results so we can get exactly what we need.

25
00:02:09,970 --> 00:02:15,900
All right so the first thing we're going to see is some more advanced queries.

26
00:02:16,420 --> 00:02:23,140
So let's say we wanted to get everyone below the age of 18.

27
00:02:23,390 --> 00:02:29,380
That's very easy today using ask you Will we just put a command at the end of how queried that says

28
00:02:29,530 --> 00:02:38,710
where and then we want age to be less than 18.

29
00:02:38,710 --> 00:02:39,760
Simple as that.

30
00:02:40,330 --> 00:02:48,070
And this general welfare clause we can use to restrict the search for any particular type of data in

31
00:02:48,100 --> 00:02:50,990
our database.

32
00:02:53,910 --> 00:03:00,460
And you can see it's only returned Tommy and Ralphy that we could search for a particular user name.

33
00:03:00,460 --> 00:03:05,640
That's obviously very useful if you're trying to lock someone in or something like that.

34
00:03:06,370 --> 00:03:11,860
So we would just say where name is equal to a Keston

35
00:03:15,580 --> 00:03:17,430
and then we check that out.

36
00:03:17,890 --> 00:03:22,310
And that should just return the to Keston entries.

37
00:03:23,150 --> 00:03:24,620
And there they are.

38
00:03:25,490 --> 00:03:26,330
OK.

39
00:03:26,770 --> 00:03:34,410
If you want to combine more than one search criteria you can do that with the end command.

40
00:03:34,930 --> 00:03:43,240
So if we wanted to look for the name being cast and the age being say 22 we know that that's not going

41
00:03:43,240 --> 00:03:44,370
to return anything.

42
00:03:46,760 --> 00:03:49,970
So we get no new results there every day.

43
00:03:50,030 --> 00:04:00,240
But if we search for a name is and age is 21 then we should get to cast on results.

44
00:04:00,240 --> 00:04:08,470
There again we can also do fancy things and for example if we wanted everyone that had a user name that

45
00:04:08,480 --> 00:04:21,080
started with k then we can do names like and then K and then a percent symbol and the percent symbol

46
00:04:21,080 --> 00:04:23,050
essentially means anything.

47
00:04:23,160 --> 00:04:29,710
So that will search for anyone who has a user name with a K at the beginning and then anything.

48
00:04:29,720 --> 00:04:37,150
So we've got cast and again that we could also search for anyone who had a user name with an O in it

49
00:04:38,230 --> 00:04:43,330
for example never got 2 percent signs present at the beginning and said percent at the end and that

50
00:04:43,330 --> 00:04:46,030
just searches for anything and then an O.

51
00:04:46,240 --> 00:04:52,090
And then anything else that should return me and tell me there we go.

52
00:04:52,360 --> 00:04:56,480
So Rob and Tommy returned we can limit the number of results here.

53
00:04:56,680 --> 00:05:03,820
So let's say we just want one person with an 0 in their in their name.

54
00:05:03,820 --> 00:05:10,660
We just put limits one there so that should return just me began

55
00:05:13,630 --> 00:05:15,730
so that basic database queries.

56
00:05:15,760 --> 00:05:17,920
There's much more advanced stuff that you can do.

57
00:05:18,310 --> 00:05:20,810
But that should cover the vast majority of what you need.

58
00:05:20,970 --> 00:05:25,930
And if you need to do anything else just search for Eskew well and then whatever you want to do because

59
00:05:25,930 --> 00:05:31,810
this is as I say a standard server query language that has been around for a long time and is well-documented

60
00:05:32,110 --> 00:05:33,000
on the Web.

61
00:05:33,340 --> 00:05:33,880
OK.

62
00:05:34,150 --> 00:05:36,580
So a couple of other things then.

63
00:05:36,700 --> 00:05:39,680
First off let's see how we delete a user.

64
00:05:40,000 --> 00:05:46,310
So for example we've got these duplicate caissons him I begin to get rid of one of those so there's

65
00:05:46,330 --> 00:05:49,890
any one of them so we can do that.

66
00:05:53,830 --> 00:05:57,210
Using events D-B exec as well.

67
00:05:57,400 --> 00:06:01,510
And we're still using events maybe I think that's not a major problem even though we're using the user's

68
00:06:01,510 --> 00:06:13,180
D.B and the commands to delete from a database it just delete from and then the table name so users

69
00:06:14,070 --> 00:06:17,580
and then you just pick your limitations.

70
00:06:18,130 --> 00:06:20,800
So I'm going to say when name is equal to

71
00:06:24,970 --> 00:06:29,290
Keston if I do that of course it will delete both of them.

72
00:06:29,290 --> 00:06:35,570
So I'm going to put a limit one on the end and that will delete only one Caston.

73
00:06:35,740 --> 00:06:39,970
In fact whenever you're updating or deleting a database I would always recommend putting a limit on

74
00:06:39,970 --> 00:06:46,960
the end because if there's a tiny chance that you've forgotten your where clause or there's just some

75
00:06:46,960 --> 00:06:47,960
bad code.

76
00:06:48,070 --> 00:06:53,590
If it ends up deleting your whole database by mistake or updating a value to the same thing for every

77
00:06:53,590 --> 00:06:56,120
row for example that can be a bit of a disaster.

78
00:06:56,230 --> 00:06:57,390
It's happened to me before.

79
00:06:57,580 --> 00:07:04,120
And so I would always strongly recommend putting limit one at the end of all your delete or update statements

80
00:07:04,180 --> 00:07:08,120
where you expect a new one row to be deleted.

81
00:07:09,150 --> 00:07:09,610
OK.

82
00:07:09,880 --> 00:07:11,230
So we'll just run that again.

83
00:07:11,260 --> 00:07:15,140
And we should now get all of those users.

84
00:07:15,550 --> 00:07:19,060
But we'll have just the one Caston.

85
00:07:19,750 --> 00:07:24,220
Now it's actually getting a little bit tricky to see which are the results from this running of the

86
00:07:24,220 --> 00:07:31,150
app which are previous ones so I'm going to show you a way to clear the logs every time we run the app.

87
00:07:31,170 --> 00:07:38,610
So I just went to run and edit configurations and then I'm going to click like cat and click log before

88
00:07:38,610 --> 00:07:41,530
launch.

89
00:07:41,630 --> 00:07:47,030
So that's probably quite a good default setting because it's unlikely you're going to want the logs

90
00:07:47,300 --> 00:07:50,360
of previous launches for very long anyway.

91
00:07:51,110 --> 00:07:57,650
So let's say we wanted to update one of these values and say change the age of someone in our database.

92
00:07:58,130 --> 00:08:08,020
Then we take events TV and execute execute and Eskew statement which would look like this.

93
00:08:08,150 --> 00:08:18,580
So we update users and then let's say we want to update after being to say we set

94
00:08:21,060 --> 00:08:23,320
age is equal to 2.

95
00:08:23,670 --> 00:08:25,650
And then we give our limit.

96
00:08:25,680 --> 00:08:35,330
So where name equals Ralphy.

97
00:08:35,900 --> 00:08:37,160
Simple as that.

98
00:08:37,340 --> 00:08:39,620
And that as I say is very standard as well.

99
00:08:41,780 --> 00:08:50,100
So let's have a look now you can see I've got the same results but Ralphy is now two and we can use

100
00:08:50,100 --> 00:08:56,220
exactly the same where clauses as we looked at when we did they select statements.

101
00:08:56,280 --> 00:09:03,120
So now we know how to update existing records add new ones do quite advanced queries and loop through

102
00:09:03,120 --> 00:09:06,630
the result of them as just a couple more things I want to show you.

103
00:09:06,630 --> 00:09:09,810
And first of all is deleting from the database.

104
00:09:10,080 --> 00:09:18,420
So let's say for example we want to delete Ralphy for some reason then all we do is delete from

105
00:09:21,040 --> 00:09:22,170
uses.

106
00:09:22,390 --> 00:09:28,470
And then I wear clothes so I wear name equals Ralphy

107
00:09:31,630 --> 00:09:32,380
simple as that.

108
00:09:32,420 --> 00:09:36,460
Now when we run that we should get the same results as before.

109
00:09:37,900 --> 00:09:42,090
But with no Ralphy that we get.

110
00:09:42,310 --> 00:09:47,970
So Rob told Tommy and Keston one slightly odd thing or at least I think it's slightly odd about eschewing

111
00:09:47,970 --> 00:09:54,320
light is that you can't just pop a limit on the end of a delete query.

112
00:09:54,340 --> 00:10:03,450
So for example I wanted to get rid of one of the questions there then you might think I do that.

113
00:10:03,450 --> 00:10:05,840
And indeed that works fine in my school.

114
00:10:06,030 --> 00:10:09,870
But we can't do that on a school like so before we see how to do that.

115
00:10:09,870 --> 00:10:16,410
I'm going to introduce the idea of an ID and really recommend having an ID in any table that you use

116
00:10:16,440 --> 00:10:23,070
because it's a way of referring to each row uniquely which may be difficult if you've got two rows that

117
00:10:23,070 --> 00:10:25,510
are identical like we have here.

118
00:10:27,040 --> 00:10:32,620
So before we try and delete Caston or at least one other.

119
00:10:33,200 --> 00:10:39,320
Unfortunately we can't add a primary key column to a table after it's been created.

120
00:10:39,320 --> 00:10:44,230
So we're going to need to create a new table which is fine.

121
00:10:44,630 --> 00:10:46,840
Reminds us how to do it.

122
00:10:46,910 --> 00:10:52,870
So we want to create a table if it doesn't exist.

123
00:10:54,410 --> 00:11:00,330
And I'll just call it new uses and this is going to have the same as before.

124
00:11:00,560 --> 00:11:03,990
So it's going to have a name which is a.

125
00:11:06,570 --> 00:11:09,830
And integer.

126
00:11:09,830 --> 00:11:10,190
Sorry.

127
00:11:10,250 --> 00:11:11,990
H.

128
00:11:12,450 --> 00:11:16,170
Which is going to be an integer with three digits.

129
00:11:16,550 --> 00:11:27,320
But now we're also going to have an ID which is going to be an integer and also a primary key.

130
00:11:27,410 --> 00:11:34,220
So this primary key will auto increment which means it will start at 1 and then increase by 1.

131
00:11:34,220 --> 00:11:38,910
Every time we add a new row to the table.

132
00:11:39,020 --> 00:11:40,920
So let's just add a couple of ways.

133
00:11:52,340 --> 00:11:52,920
OK.

134
00:11:52,970 --> 00:11:55,270
That all remains the same.

135
00:11:57,140 --> 00:12:05,720
And then we just close that bracket so if we take a look now we should find that we have Kasson and

136
00:12:05,720 --> 00:12:07,580
Ralphy in our table and

137
00:12:10,410 --> 00:12:16,200
nobody else but they will also have primary keys

138
00:12:19,410 --> 00:12:21,140
so that they are Keston Ralphy

139
00:12:24,630 --> 00:12:34,010
let's just create a column here so that we can see our primary key.

140
00:12:34,010 --> 00:12:35,310
So is the idea.

141
00:12:41,000 --> 00:12:44,730
And I'm happy to add them again because I'm going to delete one of them anyway.

142
00:12:51,040 --> 00:12:51,620
There we go.

143
00:12:51,640 --> 00:12:54,020
So you can see we've got cast and Ralphie cast and Ralphie.

144
00:12:54,160 --> 00:12:58,060
But this time they've got an ID which is always unique.

145
00:12:58,310 --> 00:13:04,680
So even if I started eating or messing around with various that ID will always be unique.

146
00:13:05,290 --> 00:13:12,100
So now if I wanted to get rid of one of those curtains instead of having to refer to their name or age

147
00:13:12,460 --> 00:13:13,060
I can

148
00:13:18,230 --> 00:13:26,070
refer to the idea which is a much better way of deleting anyway.

149
00:13:26,370 --> 00:13:34,680
So if I delete where ID equals one then that will only delete the one user.

150
00:13:35,320 --> 00:13:43,010
And so because the ID key is unique that will only ever delete one item in the table.

151
00:13:44,680 --> 00:13:46,490
So lets take a look.

152
00:13:46,960 --> 00:13:59,250
We should now have just one Keston and two Rafi's but it would help if I change this to new users.

153
00:13:59,390 --> 00:14:02,950
Otherwise I'm deleting from the wrong table.

154
00:14:06,190 --> 00:14:07,740
So checking that now.

155
00:14:07,840 --> 00:14:12,040
We really should just have one Caston and two Rafi's And there you go.

156
00:14:12,160 --> 00:14:18,070
You can see the first one is gone but we're left with the rest and that's probably all you'll need to

157
00:14:18,070 --> 00:14:20,890
do with databases in your apps.

158
00:14:20,950 --> 00:14:28,370
We can now create them we can create tables within them we can add items to those tables.

159
00:14:28,480 --> 00:14:36,670
We can update and delete items as we need to and then we can select the items using a range of criteria

160
00:14:37,060 --> 00:14:39,650
and then loop through the results and do something with them.

161
00:14:40,940 --> 00:14:45,380
All right so we're going to be using all of that and how how can you use app that we can make at the

162
00:14:45,380 --> 00:14:46,350
end of this section.

163
00:14:46,580 --> 00:14:49,640
But we've got one more thing to learn about before we can do that.

164
00:14:49,790 --> 00:14:54,670
And that is where the views and we'll see what they are and how we can use them in the next lecture.
