WEBVTT
1
00:00:03.900 --> 00:00:06.880
I'm sure we'll never tire of hearing that sound.

2
00:00:06.910 --> 00:00:12.270
So now we're going to move on and add a couple of new features to our sound demo app.

3
00:00:12.370 --> 00:00:15.460
The first of which is going to be adding a volume slider.

4
00:00:15.640 --> 00:00:20.980
So very simply this will be a slider that the user can manipulate up and down and change the volume

5
00:00:21.010 --> 00:00:22.540
of the sound within our app.

6
00:00:22.750 --> 00:00:28.810
Then we'll bring in a second slide which will allow the user to seek back and forth between different

7
00:00:28.810 --> 00:00:31.090
parts of our audio file.

8
00:00:31.090 --> 00:00:37.240
This will give us a chance to use the seek bar in Android and also will come across the slightly mysterious

9
00:00:37.450 --> 00:00:39.190
override command.

10
00:00:39.190 --> 00:00:40.450
And I'll explain what that is.

11
00:00:40.450 --> 00:00:41.720
When we get there.

12
00:00:42.700 --> 00:00:45.680
All right let's get straight to it.

13
00:00:45.700 --> 00:00:54.180
So we're going to start by bringing in our sick pal so we did that over in activity Maine at ex-MIL.

14
00:00:54.550 --> 00:00:57.690
And here it is justin.

15
00:00:57.840 --> 00:00:59.260
So let's drag that in.

16
00:01:01.260 --> 00:01:04.620
Just underneath the pause button and there it is.

17
00:01:05.310 --> 00:01:08.310
I'm going to see if I can just enlarge that a little bit.

18
00:01:10.620 --> 00:01:17.130
And you can see when I drag that to the end it picked up the A-line parent and tick box.

19
00:01:17.140 --> 00:01:24.250
So if I take a line parents start then that will align it with the start of the parent the parent being

20
00:01:24.250 --> 00:01:25.190
the relative lay out.

21
00:01:25.210 --> 00:01:29.780
So this part here you can see it's just dotted there.

22
00:01:30.360 --> 00:01:30.770
OK.

23
00:01:30.820 --> 00:01:34.000
So now we have our full with Ceiba.

24
00:01:34.480 --> 00:01:36.010
I'm just going to give that an ID.

25
00:01:38.150 --> 00:01:40.210
By double clicking on them.

26
00:01:40.430 --> 00:01:46.200
So the idea is seek but in fact just keep it like that that's perfectly reasonable.

27
00:01:46.940 --> 00:01:47.550
OK.

28
00:01:47.720 --> 00:01:57.940
So now we're going to allow us to do something with that seek power either in our Java activity file.

29
00:01:57.980 --> 00:02:06.260
So before we actually integrate our sick bar into our volume control I'm going to just see how we work

30
00:02:06.260 --> 00:02:09.550
with I seek power independently of Audiard.

31
00:02:09.860 --> 00:02:17.240
So what we'll do we'll make it so that when the user moves the bar the result of the resulting value

32
00:02:17.540 --> 00:02:19.690
is displayed in the logs.

33
00:02:19.790 --> 00:02:21.080
Simple as that.

34
00:02:21.800 --> 00:02:28.850
So first of all we create our seek bar variable and to be able to use that we will of course need to

35
00:02:28.850 --> 00:02:37.820
import the seek by widget so we can do that with import Android dot widget dot

36
00:02:42.240 --> 00:02:46.170
seek PA.

37
00:02:46.190 --> 00:02:46.540
Here it is.

38
00:02:46.580 --> 00:02:54.600
So now we can create the seek bar var. and I'll call it volume control.

39
00:02:54.640 --> 00:02:57.550
Even though as yet it's not doing any volume control.

40
00:02:59.700 --> 00:03:05.700
And we're going to find that in just the same way that we found the buttons and labels earlier on in

41
00:03:05.700 --> 00:03:06.740
the course.

42
00:03:06.900 --> 00:03:16.620
So we're going to use find view by id and then our original series ID to get together all the IDs.

43
00:03:16.650 --> 00:03:26.280
And there's my seek power there that by default will be a view and we want it to be a seek power.

44
00:03:26.570 --> 00:03:35.970
So we're going to need to cast it to a bar by putting seat bar in brackets like that every we.

45
00:03:36.030 --> 00:03:38.960
That still in red because it needs to be a capital B.

46
00:03:43.280 --> 00:03:49.250
We got it to now we can use the volume control variable to reference the seek bar that we've created.

47
00:03:49.780 --> 00:03:56.180
So if we want to kind of catch the event that when the user drags and takes their finger off the seek

48
00:03:56.200 --> 00:04:05.250
bar what we do is we take our volume control variable and we had a Sikh bar change listener.

49
00:04:05.860 --> 00:04:10.930
So we use set on seat bar change listener.

50
00:04:11.200 --> 00:04:11.910
There we go.

51
00:04:12.130 --> 00:04:18.850
So this is a listener so it will listen for the event that they seek by has been changed I that the

52
00:04:18.850 --> 00:04:21.540
user has dragged it one way or the other.

53
00:04:22.740 --> 00:04:24.470
And then this will be created.

54
00:04:26.070 --> 00:04:27.180
As a new

55
00:04:29.990 --> 00:04:35.420
and then seek bá on Seek bá change listener

56
00:04:39.470 --> 00:04:41.520
and something's going wrong with the auto.

57
00:04:41.520 --> 00:04:53.560
I predict that I want that to be that and then we're going to have a bunch of carried in the middle

58
00:04:53.560 --> 00:04:54.670
of all of that.

59
00:04:57.400 --> 00:04:58.330
There we go.

60
00:04:58.850 --> 00:05:07.100
So what we've done is added a Sikh bar change listener and that has a type of seatback dot on C-card

61
00:05:07.100 --> 00:05:08.070
change listener.

62
00:05:08.150 --> 00:05:15.010
And then we can implement our code that we want to happen when the bar is changed here.

63
00:05:15.020 --> 00:05:24.490
And I think we just need to import the seek bar on seek by change listener to pick that up.

64
00:05:26.200 --> 00:05:26.920
OK.

65
00:05:27.570 --> 00:05:32.350
So now there are a few possible events that could get us here.

66
00:05:32.640 --> 00:05:33.800
This will be called.

67
00:05:33.810 --> 00:05:40.590
This listener will be called whenever they seek bar starts to be changed or stops being changed by the

68
00:05:40.590 --> 00:05:41.110
user.

69
00:05:41.310 --> 00:05:43.400
But we don't really care about either of those events.

70
00:05:43.440 --> 00:05:52.930
We want the one event when it has completely been changed and that event is on progress changed.

71
00:05:54.410 --> 00:05:55.160
There it is.

72
00:05:55.160 --> 00:05:57.700
So we've got some lovely diethyl CODEL.

73
00:05:57.700 --> 00:06:02.890
We don't have to type out which is very handy and the main new thing that we're seeing there is overwrite.

74
00:06:02.930 --> 00:06:05.610
So this at symbol and then overwrite what does that mean.

75
00:06:05.870 --> 00:06:12.560
Well this on progress changed method that we've just created here is not a new method it's a method

76
00:06:12.560 --> 00:06:19.190
that already exists and some things within the Android system will happen every time the bar is changed.

77
00:06:19.190 --> 00:06:24.710
So what we're doing here is not creating a method but we're adding our own code to a method that already

78
00:06:24.710 --> 00:06:25.680
exists.

79
00:06:26.000 --> 00:06:28.700
And that's when you need the override command.

80
00:06:29.000 --> 00:06:36.620
So in fact we've seen it up here and here as well and here so we've seen this override but we haven't

81
00:06:36.620 --> 00:06:39.170
really talked about what it is and that's what's going on.

82
00:06:39.170 --> 00:06:44.050
So this uncreate method is one that already exists within the Android system.

83
00:06:44.180 --> 00:06:50.510
And when the app runs a bunch of stuff happens that we don't command it too but what we're doing here

84
00:06:50.510 --> 00:06:53.590
is adding our own code to the uncreate method.

85
00:06:53.720 --> 00:06:56.020
And that's when you use override.

86
00:06:56.120 --> 00:06:59.170
So similarly down here these methods already exist.

87
00:06:59.180 --> 00:07:02.060
We're just adding to them.

88
00:07:02.180 --> 00:07:10.610
So now we're finally at the stage where we can write our code that we want to run when the bar is moved.

89
00:07:10.610 --> 00:07:17.600
Just have a quick look at this method on progress changed it turns three variables the seek bar itself

90
00:07:17.600 --> 00:07:25.490
so which seek bar has been moved the progress integer which is the number that we're particularly interested

91
00:07:25.490 --> 00:07:29.480
in which is going to give us the value that we want which is how far up or down.

92
00:07:29.480 --> 00:07:31.780
The second part the user has left it.

93
00:07:32.120 --> 00:07:37.760
And then finally we get a true or false Boullion from user which tells us whether or not it was the

94
00:07:37.760 --> 00:07:39.590
use of that change to seek power.

95
00:07:39.710 --> 00:07:44.140
Or maybe we wrote some code to update the sequel which we actually will a little bit later on.

96
00:07:44.390 --> 00:07:52.360
And then if it was our code that updated the seek bar value then this billion will be fals OK.

97
00:07:52.780 --> 00:07:54.990
So let's now print that to the logs.

98
00:07:55.690 --> 00:07:58.670
We'll do that using LOEG dot.

99
00:07:59.380 --> 00:08:05.910
So I for info and then we'll call it seek by valley

100
00:08:09.340 --> 00:08:16.010
and we want to know the value of this progress variable that we got.

101
00:08:16.060 --> 00:08:25.530
And of course we want to add the log to our imports up here so that we can use it.

102
00:08:25.560 --> 00:08:27.230
All right let's take a look.

103
00:08:30.590 --> 00:08:37.720
So we should now finds that we have our Siba and when we drag it up and down the value of the Sikh bar

104
00:08:37.730 --> 00:08:46.190
is displayed in the Lawks And then what we want to see here is progress but remember progress is an

105
00:08:46.190 --> 00:08:47.010
integer.

106
00:08:47.240 --> 00:08:52.250
And when we send things to the logs they need to be strings so we can convert that to a string using

107
00:08:52.280 --> 00:08:56.110
integer dot to string.

108
00:08:56.720 --> 00:09:03.750
And then the thing we want to convert to a string is progress as we go.

109
00:09:03.760 --> 00:09:05.320
So we now pretty much done.

110
00:09:05.380 --> 00:09:08.340
But if we try and run this we will see an error.

111
00:09:08.350 --> 00:09:13.890
You can see I've got this red wiggly line so something's gonna go wrong if we try and run it.

112
00:09:14.200 --> 00:09:17.280
Let's just see what that error is and then we'll fix it.

113
00:09:19.040 --> 00:09:27.810
There we go I say this class here is not abstract and does not overwrite abstract method on stock tracking

114
00:09:27.810 --> 00:09:32.900
touch and in and on Seek bar changelessness.

115
00:09:33.260 --> 00:09:40.040
So what that means is as I mentioned before there are a couple of possibilities that can get us to this

116
00:09:40.730 --> 00:09:41.790
chunk of code here.

117
00:09:41.990 --> 00:09:47.270
Either the progress is changed or the user has just taken their finger off and not changed anything

118
00:09:47.510 --> 00:09:51.840
or the user has just started to change his seat.

119
00:09:52.240 --> 00:09:58.040
And what we need to do is implement methods for the other two possibilities even though we're not actually

120
00:09:58.040 --> 00:10:01.270
going to be using them.

121
00:10:01.380 --> 00:10:02.560
So let's just do that now.

122
00:10:03.470 --> 00:10:08.570
So the first one is on start tracking touch.

123
00:10:09.020 --> 00:10:11.510
So it's all been import imported for us.

124
00:10:11.540 --> 00:10:16.970
So if we wanted to know when the user started tracking on the seat back then we would write some code

125
00:10:16.970 --> 00:10:19.520
there but we don't so we can just leave that blank.

126
00:10:19.670 --> 00:10:26.180
And the other one you may have seen it is on stop tracking touch.

127
00:10:26.180 --> 00:10:31.430
There it is again if we wanted to know when the user stopped tracking on the search bar then we could

128
00:10:31.430 --> 00:10:31.910
use that there.

129
00:10:31.910 --> 00:10:34.760
But notice this one doesn't give you the actual value.

130
00:10:34.760 --> 00:10:39.480
This is just a generic method for you to do something when they stop tracking on the seat.

131
00:10:39.500 --> 00:10:44.750
So really the one that we're interested in here is they on progress changed because that gives you the

132
00:10:44.750 --> 00:10:46.780
value that we're interested in.

133
00:10:47.510 --> 00:10:53.300
OK so now we've given all the methods that are required for on Seek about change listener you can see

134
00:10:53.300 --> 00:10:55.920
that the red wiggly line has gone away.

135
00:10:56.540 --> 00:11:05.860
So now we should find that when we run this it will update the logs with the value of the symbol and

136
00:11:05.860 --> 00:11:09.530
it will in fact do that while the user is moving the seat back.

137
00:11:09.530 --> 00:11:15.490
So whenever the Sikh bar is changed that's when it will update the locks not just when the user removes

138
00:11:15.490 --> 00:11:16.560
their finger from it.

139
00:11:18.440 --> 00:11:21.710
So let's just get those logs showing.

140
00:11:21.840 --> 00:11:29.900
And now if we jump over to the emulator there we see you can see it's now showing the valley and it

141
00:11:29.900 --> 00:11:33.470
goes all the way up to 100 epitope

142
00:11:36.620 --> 00:11:37.470
fantastic.

143
00:11:37.700 --> 00:11:41.080
So that's how we work without Bob.

144
00:11:41.300 --> 00:11:48.570
Now it's a matter of integrating this with the volume of our sound.

145
00:11:48.750 --> 00:11:55.770
So to do this we're going to need an audio manager which allows us to interact with the android audio

146
00:11:55.770 --> 00:11:58.480
system and change volume and things like that.

147
00:11:58.530 --> 00:12:00.760
So I'm going to create it up here.

148
00:12:01.470 --> 00:12:09.480
It's going to have a type of ODI manager and we'll call it audio manager

149
00:12:12.600 --> 00:12:21.300
every day we need to import the class and it's not doing that automatically.

150
00:12:21.780 --> 00:12:36.650
So I'll just add that manually it's import Android dot media dot Wardy I manage the there we get it

151
00:12:36.670 --> 00:12:41.290
so now we've created out video manager variable and we can use it wherever we like.

152
00:12:41.290 --> 00:12:46.250
So in the set up of our app we're going to want to do two things.

153
00:12:46.440 --> 00:12:51.870
We're going to want to establish the maximum volume of the phone that we're working with and we want

154
00:12:51.870 --> 00:12:57.630
to establish the current volume and then we'll use those to update the seek bar to start with.

155
00:12:57.630 --> 00:13:06.960
So first off let's take out audio manager and set it up so that we can use it to work with the audio

156
00:13:06.960 --> 00:13:09.770
system on the phone that the app is running on.

157
00:13:10.160 --> 00:13:25.560
And we do this using GET system service and we get it from the context it's Boudia service.

158
00:13:26.130 --> 00:13:30.250
And this allows us to work as I say with the audio on our device.

159
00:13:30.990 --> 00:13:34.540
But we do need to cost this to the right type.

160
00:13:34.710 --> 00:13:41.120
So we want to cast it to Audio Manager because that's the type of the variable that we have.

161
00:13:41.910 --> 00:13:47.390
So now we can use that video manager to get information about the volume on the device at the moment.

162
00:13:47.430 --> 00:13:49.740
And then we can change that manually as well.

163
00:13:49.830 --> 00:13:55.080
So let's get first of all the maximum volume for our particular device that's going to be an integer

164
00:13:55.940 --> 00:14:06.070
we'll call it max volume and to get that we use Odeo manager don't get stream at max volume.

165
00:14:06.170 --> 00:14:17.460
There it is and the stream that we want to get is Odeo manager top stream music.

166
00:14:17.470 --> 00:14:23.470
So this is the generic stream for playing sound and music within your apps.

167
00:14:23.470 --> 00:14:28.720
So you may have seen there was another one there for alarms and phone volume etc. but we're interested

168
00:14:28.720 --> 00:14:30.810
in essentially the media volume.

169
00:14:31.030 --> 00:14:37.820
So that gives us the max volume for the music stream within our app which is what we're interested in.

170
00:14:37.840 --> 00:14:39.210
Next we'll get the current volume

171
00:14:42.980 --> 00:14:48.100
I'll call it curve volume and we get that in a very similar way.

172
00:14:48.100 --> 00:14:53.810
So all the manager don't get stream volume everyday.

173
00:14:53.870 --> 00:14:57.620
So that just gets the current volume.

174
00:14:58.070 --> 00:15:06.430
And again we'll get that from Odai manager don't stream music as we go.

175
00:15:06.440 --> 00:15:11.100
So now we know the maximum volume of our system and the current volume of our system.

176
00:15:11.330 --> 00:15:17.390
So we need to set the maximum volume of our system to be the maximum value of the seatback because we

177
00:15:17.390 --> 00:15:24.230
don't want them to be able to set the volume bigger than the maximum possible value.

178
00:15:24.440 --> 00:15:26.950
So let's do that once we've gone to seek power.

179
00:15:27.260 --> 00:15:30.250
We can then set the maximum.

180
00:15:30.770 --> 00:15:40.040
So sick ball remember is called Volume control volume control don't set max and the max that we want

181
00:15:40.040 --> 00:15:45.500
to set is max volume.

182
00:15:45.570 --> 00:15:46.920
So now we've set the maximum.

183
00:15:46.920 --> 00:15:51.960
Remember it was 100 by default but now it's going to be set to whatever the maximum volume of our system

184
00:15:51.960 --> 00:15:53.610
is.

185
00:15:53.800 --> 00:15:56.590
And we're also going to set the current value.

186
00:15:57.040 --> 00:16:01.950
So volume control not set progress.

187
00:16:02.050 --> 00:16:06.230
That's called progress because it's kind of considered to be a progress bar.

188
00:16:07.180 --> 00:16:11.890
So if we want to set the current value that's setting the progress and we want to set that to the current

189
00:16:11.890 --> 00:16:12.830
volume.

190
00:16:12.850 --> 00:16:19.210
So if they've got the current volume at 70 percent of maximum then that will set our Sikh bar to 70

191
00:16:19.210 --> 00:16:22.250
percent of the way along.

192
00:16:22.270 --> 00:16:26.920
So that should set up our seek bar to work with the volume.

193
00:16:26.920 --> 00:16:33.220
So the only thing we need to add now is instead of just printing to the logs we want to actually change

194
00:16:33.490 --> 00:16:35.090
the volume.

195
00:16:35.980 --> 00:16:47.920
So we will do that using Odeo manager don't set stream stream volume there it is and the stream that

196
00:16:47.920 --> 00:16:55.290
we want to set is once again audion manager dot stream music and we want to set it to

197
00:16:59.390 --> 00:17:00.370
progress.

198
00:17:02.400 --> 00:17:08.550
And then my parents see that we need to add a flag variable which is why we can give some more information

199
00:17:08.850 --> 00:17:10.290
if we want to but we don't.

200
00:17:10.290 --> 00:17:15.170
We just want to set the volume so we just put a zero there.

201
00:17:15.180 --> 00:17:16.410
All right.

202
00:17:16.410 --> 00:17:17.670
So hopefully that will make sense.

203
00:17:17.680 --> 00:17:23.400
We've created an audio manager variable which allows us to work with the volume and audio in general

204
00:17:23.400 --> 00:17:24.480
on our system.

205
00:17:24.690 --> 00:17:30.060
And we've worked out the maximum volume for the music stream and the current volume for the music stream

206
00:17:30.330 --> 00:17:34.040
the music stream being the audio within our app Stream.

207
00:17:34.410 --> 00:17:38.520
And then we've set the seek our maximum to the maximum volume of our system.

208
00:17:38.700 --> 00:17:44.980
We've set the seek value to the current volume of our system and then we've changed it.

209
00:17:44.970 --> 00:17:52.920
So when they use the updates they seek bar that will in turn update the stream volume.

210
00:17:52.920 --> 00:17:55.920
All right let's check it out.

211
00:17:55.930 --> 00:18:01.000
So that's a good sign First of all you can see that the sick bar is not at zero but it's around 70 80

212
00:18:01.000 --> 00:18:02.020
percent there.

213
00:18:02.470 --> 00:18:06.500
So if I now just play that every day.

214
00:18:06.610 --> 00:18:07.960
So now if I crank it up

215
00:18:11.350 --> 00:18:12.880
hopefully you can tell it that was loud.

216
00:18:12.910 --> 00:18:20.620
And if I take it right down here there's no audio at all so I'll just play it quietly and then hopefully

217
00:18:20.620 --> 00:18:29.360
you can just about hear the way we get we are changing the volume in real time that fantastic So now

218
00:18:29.360 --> 00:18:32.600
we've got our seek power which changes the volume.

219
00:18:32.600 --> 00:18:36.980
The last thing we're going to do in this video then is to create a new sleek ball which allows us to

220
00:18:37.010 --> 00:18:42.440
scrub or seek to particular points within our audio file.

221
00:18:43.010 --> 00:18:44.520
So here's a quick challenge for you.

222
00:18:44.570 --> 00:18:50.420
Can you create a second seek out and give it a separate ID and then create all the necessary methods

223
00:18:50.420 --> 00:18:52.190
for it just like we did here.

224
00:18:52.610 --> 00:18:53.810
And for bonus points.

225
00:18:53.810 --> 00:19:01.010
See if you can set the maximum value of this sequel to the length of the audio file that we've created

226
00:19:01.310 --> 00:19:04.800
up here in the player so that we haven't seen how to do before.

227
00:19:04.850 --> 00:19:08.950
You can either google it or try and figure it out from the possible within any player.

228
00:19:08.960 --> 00:19:10.310
Don't do that but don't worry.

229
00:19:10.310 --> 00:19:15.680
But that first challenge create a Sikh bar and set up all the methods for it should be fairly straightforward.

230
00:19:15.680 --> 00:19:16.760
I'll give you a moment to do that.

231
00:19:23.290 --> 00:19:24.820
All right here we go.

232
00:19:24.820 --> 00:19:27.270
I am so over.

233
00:19:28.710 --> 00:19:36.460
Activity mainsail exactly as before will take out Seek about and will drag it in.

234
00:19:36.710 --> 00:19:41.910
There it is and offset the parent end and start as before.

235
00:19:44.070 --> 00:19:45.700
And then seek Butsu.

236
00:19:45.720 --> 00:19:48.900
It's not particularly instructive say

237
00:19:51.870 --> 00:19:58.410
I'm going to call it scrub scrubbing being the general name for something that allows you to go back

238
00:19:58.410 --> 00:20:01.570
and forth within an audio file.

239
00:20:01.830 --> 00:20:09.130
So there we get we now have our scrubber So let's go back over to our java file and I'm not going to

240
00:20:09.130 --> 00:20:15.340
copy and paste this time just so that we can see all the code again.

241
00:20:15.940 --> 00:20:21.750
Let's start by the fact I'm going to Heidel that code that.

242
00:20:22.680 --> 00:20:31.260
Let's start by finding our new Cederbaum create a variable called scrubber which will have a type of

243
00:20:31.280 --> 00:20:32.340
seek power.

244
00:20:33.220 --> 00:20:40.710
And I'm going to find it by its ID but I'll only to cast it as a seek bar and then find a view by id

245
00:20:41.210 --> 00:20:49.740
resources dot ID dot scrubber.

246
00:20:49.750 --> 00:20:50.600
There it is.

247
00:20:50.720 --> 00:20:53.180
Now let's set the changes.

248
00:20:53.920 --> 00:21:00.550
So scrub the dots set on seek change listener.

249
00:21:00.840 --> 00:21:01.830
There it is.

250
00:21:02.160 --> 00:21:04.140
And then we're going to do that with a new

251
00:21:07.830 --> 00:21:10.530
on seek by change listener.

252
00:21:10.670 --> 00:21:14.790
Now this time it's very kindly given us all of the methods that we need.

253
00:21:15.130 --> 00:21:20.560
Fabulous I must have messed up the way to predict in some way to not get those last time but it gave

254
00:21:20.560 --> 00:21:23.800
us the opportunity to take them out ourselves at least.

255
00:21:24.310 --> 00:21:28.560
And then what I'm going to do is just to make sure that it's working.

256
00:21:28.600 --> 00:21:34.280
I'm going to get rid of the log command from the previous

257
00:21:37.240 --> 00:21:40.350
seek and then copy that in here.

258
00:21:41.730 --> 00:21:47.250
And we'll change this to screw up the value just so that we know the part about getting the value of

259
00:21:48.420 --> 00:21:55.080
and then the little bonus challenge was to set the maximum of our scrubber to the length of the audio

260
00:21:55.080 --> 00:21:55.720
file.

261
00:21:57.330 --> 00:22:02.100
And we do that using scrubber dot set max.

262
00:22:02.130 --> 00:22:03.720
So exactly like we did before.

263
00:22:03.910 --> 00:22:11.270
And then we're going to use player and if we just type don't afterwards.

264
00:22:11.350 --> 00:22:17.910
You can see it predicts get duration that looks like it's going to be exactly what we want.

265
00:22:17.950 --> 00:22:23.260
So that's what I was hoping you might do to figure out how to get the length of that audio file but

266
00:22:23.260 --> 00:22:25.120
really don't worry if you didn't find that

267
00:22:27.880 --> 00:22:28.560
OK.

268
00:22:29.030 --> 00:22:31.800
So we'll just run that and make sure that that's all connected up nicely.

269
00:22:33.240 --> 00:22:38.580
And we should of course find that we've now got a second seek bar with a maximum value equal to the

270
00:22:38.580 --> 00:22:41.130
duration of the audio file.

271
00:22:41.400 --> 00:22:45.600
And then when we move it up and down we can see the location

272
00:22:50.600 --> 00:22:51.950
of the

273
00:22:56.420 --> 00:23:00.060
so that we get fantastic.

274
00:23:00.070 --> 00:23:00.890
So it's quite a big one

275
00:23:04.930 --> 00:23:13.730
every guy we are lacking the small horizontal line there to show the limit of the CGC but I'm not sure

276
00:23:13.730 --> 00:23:18.650
whether that's an error in my simulator or something to do with the height of that particular seat but

277
00:23:18.800 --> 00:23:21.140
I'm not too worried about that.

278
00:23:21.170 --> 00:23:22.550
So now the tricky bit.

279
00:23:22.910 --> 00:23:32.550
We want to update this week about with the location of our audio file and there are a couple of ways

280
00:23:32.550 --> 00:23:33.350
that we can do this.

281
00:23:33.360 --> 00:23:42.590
But the simplest is to use a timer so we do that by creating a new timer.

282
00:23:45.560 --> 00:23:52.120
And let's add that automatically for us so new timer.

283
00:23:52.120 --> 00:24:02.330
And we want to create a shed Joe at fixed rate there we get.

284
00:24:02.660 --> 00:24:08.730
And then within this time we want to create a new timer.

285
00:24:09.610 --> 00:24:12.870
Task.

286
00:24:12.980 --> 00:24:13.500
There we go.

287
00:24:13.510 --> 00:24:15.670
It's done quite a bit of what they're predicting for us there.

288
00:24:16.020 --> 00:24:18.840
And I'm just going to add in a couple of numbers to get rid of those errors.

289
00:24:19.050 --> 00:24:25.160
But all of this is doing so there and a thousand does what we want.

290
00:24:25.380 --> 00:24:25.950
OK.

291
00:24:26.100 --> 00:24:30.990
So what's going on here is we're creating a shared pool at fixed rate which means we're scheduling a

292
00:24:30.990 --> 00:24:37.530
certain task to be done at a fixed schedule so in our case every second and that task is a new time

293
00:24:37.530 --> 00:24:44.130
a task which is created with what's known as a runnable which is essentially just a method which we

294
00:24:44.130 --> 00:24:48.420
run regularly which is by default called Run and it's an override.

295
00:24:48.420 --> 00:24:53.400
As we've seen before because we're adding to it rather than creating it and then down here these two

296
00:24:53.400 --> 00:24:58.600
numbers give us the number of seconds before this time runs for the first time.

297
00:24:58.620 --> 00:25:03.260
So we want zero seconds there because we don't need a delay before we want to start the timer.

298
00:25:03.540 --> 00:25:09.140
And then this is the number of milliseconds between successive calls to the timer.

299
00:25:09.540 --> 00:25:16.170
So basically all of this says run the code that we're going to run in here immediately.

300
00:25:16.350 --> 00:25:18.310
And then every second.

301
00:25:18.690 --> 00:25:26.400
So that's what this whole chunk of code is doing and what we want to do here is update our scrubber

302
00:25:26.640 --> 00:25:31.780
seek power to show the location of the audio file.

303
00:25:31.920 --> 00:25:38.900
So we just use scrubber to set progress just as before.

304
00:25:39.420 --> 00:25:47.340
And then to get the progress we use mplayer don't and then you can see right there get current position

305
00:25:48.480 --> 00:25:48.920
perfect

306
00:25:51.670 --> 00:25:52.960
and that's it.

307
00:25:52.960 --> 00:26:01.290
So this timer will run every second and we'll update the value of our scriber or the progress of our

308
00:26:01.290 --> 00:26:06.160
seek Bob and show the current position of the audiophile

309
00:26:09.020 --> 00:26:16.880
Let's take a look if we now click play make sure we've got some sound.

310
00:26:16.910 --> 00:26:17.570
There we go.

311
00:26:17.810 --> 00:26:19.910
So you can see it ran every seconds there.

312
00:26:20.210 --> 00:26:24.260
Because we've got a very short order Europhile every second might not make sense.

313
00:26:24.350 --> 00:26:27.830
So let's just update that to every tenth of a second.

314
00:26:29.610 --> 00:26:30.510
And we should find

315
00:26:33.290 --> 00:26:35.310
that the update is a bit more smooth.

316
00:26:40.450 --> 00:26:46.070
There we get that up to you in terms of how efficient you needed that to be in your particular case.

317
00:26:46.080 --> 00:26:50.380
But generally every second I would have thought would be fine but more media player app.

318
00:26:50.400 --> 00:26:56.640
All right so we're nearly that what we don't have yet is the facility to actually scrub the music as

319
00:26:56.640 --> 00:27:00.990
we drag this back and forth but that's pretty straightforward to add.

320
00:27:01.320 --> 00:27:08.780
So this remember is the code that is called when our scrubber is changed.

321
00:27:08.860 --> 00:27:18.400
So we want to do is update the current position of the video file so it will do that using player and

322
00:27:18.400 --> 00:27:22.150
then seek to there we go.

323
00:27:22.150 --> 00:27:30.820
So this will seek to a particular location or position and that position of course we want to be progress

324
00:27:31.300 --> 00:27:36.460
which is the value of the seek power.

325
00:27:36.470 --> 00:27:36.820
All right.

326
00:27:36.830 --> 00:27:43.430
So with any luck they should now do everything that we want and will allow the user to seek back and

327
00:27:43.430 --> 00:27:48.060
forth through the audio file as well as change the volume.

328
00:27:48.060 --> 00:27:48.850
Let's give it a go.

329
00:27:51.840 --> 00:27:59.170
If I can grab that very guy it sounds pretty horrendous with our particular file

330
00:28:02.360 --> 00:28:06.680
but it is in fact working.

331
00:28:06.700 --> 00:28:07.800
So here we go.

332
00:28:08.350 --> 00:28:08.980
Let's play.

333
00:28:09.000 --> 00:28:12.420
And if I can grab that guy.

334
00:28:12.860 --> 00:28:18.330
That sounds pretty horrendous without particular audio file.

335
00:28:20.820 --> 00:28:25.100
And I think my emulator is struggling to keep up with all of that.

336
00:28:25.410 --> 00:28:31.880
And you might want to implement some kind of pool system which all set as a little challenge here.

337
00:28:32.220 --> 00:28:39.120
You might just want to pause the audio when the user starts tracking and then restarted again when they

338
00:28:39.120 --> 00:28:40.040
stop tracking.

339
00:28:40.170 --> 00:28:45.030
And that will prevent that nasty effect of the audio playing during the week.

340
00:28:45.420 --> 00:28:47.060
So just a little challenge there for you.

341
00:28:47.220 --> 00:28:52.230
And then we're going to take a brief break from audio before we make the final lap of this section.
