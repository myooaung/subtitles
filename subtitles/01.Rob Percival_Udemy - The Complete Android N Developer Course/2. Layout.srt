1
00:00:00,570 --> 00:00:05,670
So welcome again to Section 4 of The Complete Android and develop of course they join in the section

2
00:00:05,670 --> 00:00:11,210
will be working with animations making a game and working with video and audio.

3
00:00:11,430 --> 00:00:16,680
But for now we're going to revisit layouts because they are such a fundamental way of making your app

4
00:00:16,680 --> 00:00:17,850
look good.

5
00:00:17,880 --> 00:00:23,010
Developing the Android means that you have to be ready for many different screen sizes and resolutions

6
00:00:23,100 --> 00:00:26,190
flexible layouts are the best way to do that.

7
00:00:26,220 --> 00:00:31,040
So let's dive right in with a button I've created just a blank app here.

8
00:00:32,320 --> 00:00:39,850
So if we drag our button in as we have seen before we can send to the button in the Senza of the app

9
00:00:39,850 --> 00:00:43,650
and that will be in the center of the screen regardless of screen size.

10
00:00:43,660 --> 00:00:54,740
We can also position that relativity for example that label that we can position it at the top right

11
00:00:55,550 --> 00:01:04,890
or a certain margin from the top again from the center or similarly bottom right bottom left et cetera.

12
00:01:05,150 --> 00:01:10,760
If I popped it down there and it would be aligned to the bottom left of the screen regardless of how

13
00:01:10,760 --> 00:01:12,600
big the screen was.

14
00:01:13,160 --> 00:01:16,350
This is it because it's within a relative layout.

15
00:01:16,550 --> 00:01:21,320
So everything is positioned relative to everything else.

16
00:01:21,320 --> 00:01:30,050
Now you may have noticed this text tab down at the bottom of the page which actually gives you the SML

17
00:01:30,070 --> 00:01:37,190
code which describes that layout and how in Android studio to we can edit the code and we can see the

18
00:01:37,190 --> 00:01:39,300
layout update with it.

19
00:01:39,620 --> 00:01:46,670
So so far we've been dragging and dropping and changing properties from the Properties menu on the right

20
00:01:46,670 --> 00:01:46,930
there.

21
00:01:46,940 --> 00:01:49,780
But we can do all of this with code.

22
00:01:50,180 --> 00:01:56,000
So for example this is the code that defines the text view in the top left.

23
00:01:56,030 --> 00:02:03,190
If I change the text here to help Rob that we'll update the text itself.

24
00:02:03,650 --> 00:02:09,470
Similarly this code defines my button if I changed the width to

25
00:02:12,480 --> 00:02:20,640
if you remember we can change the width to either match parent fill parent or wrap content.

26
00:02:22,120 --> 00:02:23,380
OK for Phil

27
00:02:26,580 --> 00:02:35,290
parents and we can now see that the button is stretched out all the way across the screen and we can

28
00:02:35,290 --> 00:02:39,700
do a similar thing for the height if we wanted a massive button for some reason as try this time.

29
00:02:39,700 --> 00:02:45,160
Match parent can see we still get the auto predicts well just like with coding then that will stretch

30
00:02:45,160 --> 00:02:48,300
the button out all the way across our screen.

31
00:02:49,480 --> 00:02:58,270
So let's experiment a little if we get rid of the loud alignment code and then we'll change the width

32
00:02:58,270 --> 00:03:02,560
as well-packed to wrap content and the height.

33
00:03:04,150 --> 00:03:05,070
And let's see what happens.

34
00:03:05,070 --> 00:03:11,220
So the button will just display itself over the top of the text then.

35
00:03:11,360 --> 00:03:18,840
So say we want to change that to be aligned just below the text field.

36
00:03:19,000 --> 00:03:20,840
We can do that by dragging it down there.

37
00:03:20,900 --> 00:03:23,420
And then let's see what that looks like in terms of text.

38
00:03:23,550 --> 00:03:24,230
We're now

39
00:03:27,150 --> 00:03:30,900
have a Lao guide below the text view.

40
00:03:31,170 --> 00:03:36,030
And it's also given an ID to the text so we can refer to it as well.

41
00:03:36,030 --> 00:03:38,130
One advantage of using the text

42
00:03:40,990 --> 00:03:51,520
method to work with layouts is that it's very easy to create copies of existing objects and then just

43
00:03:51,610 --> 00:03:58,900
edit things so we could change the ID to to you for example and maybe we want this to be below.

44
00:04:01,340 --> 00:04:05,840
The first button and you can see we've now got a new button.

45
00:04:05,840 --> 00:04:10,570
Obviously we could have just dragged the New button but have we had lots of complicated formatting or

46
00:04:10,580 --> 00:04:12,260
layout here with this button.

47
00:04:12,260 --> 00:04:18,200
We can recreate that very easily just by copying and pasting the text and then editing it to behave

48
00:04:18,230 --> 00:04:20,090
as we want it to.

49
00:04:20,840 --> 00:04:25,190
So really this is just a quick introduction to seeing that there are two ways to work with design on

50
00:04:25,190 --> 00:04:31,670
Android we can either do the drag and drop method as we've been doing so far or we can create items

51
00:04:31,850 --> 00:04:34,190
and edit them using code.

52
00:04:34,250 --> 00:04:41,030
Generally speaking the code method is more powerful but the design drag and drop method is generally

53
00:04:41,030 --> 00:04:47,450
quicker if you just want to create a quick design so it will mostly be working on the drag and drop

54
00:04:47,450 --> 00:04:47,930
view.

55
00:04:48,080 --> 00:04:54,660
But you may prefer working with the tech especially if you've worked with SML or similar languages before.

56
00:04:57,170 --> 00:05:00,410
Ok now I'm going to give you a quick challenge.

57
00:05:00,410 --> 00:05:07,130
I would like you to see if you can create a layout where these two buttons are next to each other but

58
00:05:07,310 --> 00:05:09,430
centered in the middle of the screen.

59
00:05:09,440 --> 00:05:14,630
So a bit like an OK and a cancel button centered in the screen next to each other.

60
00:05:14,630 --> 00:05:15,590
Now it might be tricky.

61
00:05:15,590 --> 00:05:17,170
So don't just give it a couple of minutes.

62
00:05:17,180 --> 00:05:19,520
See if you can figure out how to do it.

63
00:05:19,520 --> 00:05:20,440
Go for it.

64
00:05:27,270 --> 00:05:28,670
Did you manage it.

65
00:05:28,740 --> 00:05:31,040
Probably trickier than you thought it was going to be.

66
00:05:31,050 --> 00:05:33,770
It's one of those lay out tricks that's actually quite difficult.

67
00:05:34,020 --> 00:05:39,540
One way to solve it is to have a third invisible item in the middle and then position those two relative

68
00:05:39,540 --> 00:05:40,250
to that one.

69
00:05:40,410 --> 00:05:47,710
But with Android we've got a much better way to do it using a horizontal linear layout.

70
00:05:47,850 --> 00:05:50,540
And this is the first of these layouts that we'll look at.

71
00:05:50,940 --> 00:05:54,470
So let's drag in a linear layout and see what it looks like.

72
00:05:56,300 --> 00:05:58,980
So in itself a layout is just a box.

73
00:05:59,240 --> 00:06:02,920
But then when we start dragging things into this box such as a button

74
00:06:05,890 --> 00:06:10,390
then the first one positioned itself as would expect top left.

75
00:06:10,460 --> 00:06:16,070
The second one will position to the right of the first like that.

76
00:06:16,070 --> 00:06:23,490
And that's what linear layout is designed for simply to have things in a horizontal line.

77
00:06:23,510 --> 00:06:26,010
Now if we change the width

78
00:06:28,660 --> 00:06:34,200
to wrap content and we'll change the height to wrap content as well.

79
00:06:35,650 --> 00:06:41,790
Then we have a a layout or a box essentially that contains our two buttons and I can drag them around

80
00:06:42,920 --> 00:06:47,780
I select my layout and I can then send to

81
00:06:50,630 --> 00:06:51,410
my layout

82
00:06:54,660 --> 00:06:55,750
like that.

83
00:06:55,950 --> 00:07:00,240
And now those two buttons will be centered regardless of the screen size.

84
00:07:00,380 --> 00:07:04,820
So if I have a quick click on a Nexus 10 there we go.

85
00:07:04,830 --> 00:07:09,620
You can see they're still centered relative to the whole screen but then left and right.

86
00:07:09,630 --> 00:07:15,540
So it's great for things like OK and Cancel buttons that you want to be centered but next to each other.

87
00:07:16,380 --> 00:07:17,040
All right.

88
00:07:17,040 --> 00:07:23,070
So we've got a vertical linear out there as well which is exactly the same just for vertical lists of

89
00:07:23,070 --> 00:07:25,080
objects rather than horizontal ones.

90
00:07:25,110 --> 00:07:29,850
And then these other layouts we're going to be looking at later on in the course so feel free to play

91
00:07:29,850 --> 00:07:31,530
around and experiment with layouts.

92
00:07:31,710 --> 00:07:37,460
But the main thing going forward from this video is to be aware that we can use both text that is SML

93
00:07:37,770 --> 00:07:44,010
and the drag and drop method to create and edit our layouts depending on which one we prefer or is best

94
00:07:44,010 --> 00:07:45,310
for that particular job.

95
00:07:45,510 --> 00:07:52,740
And to be aware that we can use some layouts especially linear layouts to contain small groups of buttons

96
00:07:52,770 --> 00:07:57,510
or text views or whatever it is to be aligned in a certain way.

97
00:07:57,690 --> 00:07:59,060
All right that was useful.

98
00:07:59,070 --> 00:08:03,230
Now we're going to move on and see how we can work with animation in Android.
