WEBVTT
1
00:00:00.540 --> 00:00:05.910
Congratulations on making it to the end of section 3 of The Complete Android develop because you've

2
00:00:05.910 --> 00:00:11.090
covered a lot of stuff already in the course as well as making your currency converter app.

3
00:00:11.100 --> 00:00:16.230
In the previous section in this section we've looked in Java in a lot more detail and we've covered

4
00:00:16.230 --> 00:00:22.500
variable's arrays lists maps loops we've created random numbers as well as our little higher or lower

5
00:00:22.500 --> 00:00:23.050
app.

6
00:00:23.130 --> 00:00:26.400
And then we've looked at classes as well.

7
00:00:26.530 --> 00:00:34.470
And also if statements so we're going to try and put as much of this together in this little app and

8
00:00:34.470 --> 00:00:36.640
I've called this app number shapes.

9
00:00:36.690 --> 00:00:41.640
There are two types of numbers that generally have shapes and they are triangular numbers and square

10
00:00:41.640 --> 00:00:42.450
numbers.

11
00:00:42.840 --> 00:00:48.630
And what we're going to do is create an app which allows the user to put in a number and it will tell

12
00:00:48.630 --> 00:00:55.050
them whether it's a triangular number or square number both or neither.

13
00:00:55.050 --> 00:00:59.910
Now this may not be the most useful app in the world but it will allow us to practice almost everything

14
00:00:59.970 --> 00:01:00.740
we've covered.

15
00:01:01.080 --> 00:01:06.120
And also does require you to do a little bit of searching online as well to find a couple of new techniques

16
00:01:06.120 --> 00:01:07.900
that we haven't looked at yet.

17
00:01:08.010 --> 00:01:12.530
You may even need to look up what a square number is if it's been a while since you've worked with them.

18
00:01:12.630 --> 00:01:13.440
So that's it.

19
00:01:13.470 --> 00:01:18.990
If you don't really sure where to get started then just follow along with my explanation but otherwise

20
00:01:19.320 --> 00:01:19.980
give it a go.

21
00:01:19.980 --> 00:01:26.670
Best of luck and remember to try and do it in an object oriented way with classes if you possibly can.

22
00:01:26.670 --> 00:01:34.720
Best of luck.

23
00:01:34.730 --> 00:01:35.590
All right.

24
00:01:35.780 --> 00:01:37.120
I hope you managed it.

25
00:01:37.280 --> 00:01:42.740
You may notice that I've actually settled in the browser rather than going over to Android studio and

26
00:01:42.740 --> 00:01:49.430
that's because I'm actually going to create the logic for the app in the browser and then move it over

27
00:01:49.430 --> 00:01:50.940
into Android studio.

28
00:01:51.260 --> 00:01:56.480
And that's slightly more straightforward for me here because I can then run the logic several times

29
00:01:56.480 --> 00:01:59.300
without having to compile the app every time.

30
00:01:59.300 --> 00:02:08.690
So let's start afresh with a new hello world program get rid of that one line that we don't want and

31
00:02:08.690 --> 00:02:13.530
then say as number shapes

32
00:02:16.710 --> 00:02:22.980
so remember our main aim here is to work out whether a particular number is a triangle a number a square

33
00:02:22.980 --> 00:02:26.570
number neither or both.

34
00:02:26.580 --> 00:02:31.930
So let's start off with a number class.

35
00:02:32.340 --> 00:02:39.360
You may notice now that I gave you a bit of a clue as to how we might set this out in the final example

36
00:02:39.390 --> 00:02:41.160
of the previous video.

37
00:02:41.460 --> 00:02:45.980
So here's our number class which is going to have our number variable contained within it.

38
00:02:46.110 --> 00:02:49.830
And then our tests for is it a square number.

39
00:02:49.890 --> 00:02:51.710
Is it a triangular number.

40
00:02:53.590 --> 00:02:59.110
So let's start by creating a variable number.

41
00:03:01.630 --> 00:03:06.050
And then all work first on whether it's a triangular number.

42
00:03:06.050 --> 00:03:12.950
So let's create a public method that returns a boolean

43
00:03:15.740 --> 00:03:20.150
and we'll call it is triangular.

44
00:03:23.140 --> 00:03:24.260
Here we go.

45
00:03:25.040 --> 00:03:31.170
Now let's just remind ourselves what is a triangular number.

46
00:03:34.710 --> 00:03:35.170
Here we go.

47
00:03:35.220 --> 00:03:39.100
So it's the sequence 1 3 6 10.

48
00:03:39.150 --> 00:03:43.130
So the difference goes up by one every time.

49
00:03:43.140 --> 00:03:50.420
So the way I'm going to test for a triangular number and you can of course do this many different ways.

50
00:03:50.480 --> 00:03:54.570
I'm going to have a count of variable x.

51
00:03:54.910 --> 00:04:06.720
So it acts with initials which is initially 1 and just like we had when we displayed the first 10 triangular

52
00:04:06.720 --> 00:04:08.880
numbers a few videos ago.

53
00:04:09.510 --> 00:04:17.290
I'm going to have a triangular number integer as well which will work my way up through the triangular

54
00:04:17.290 --> 00:04:18.220
numbers.

55
00:04:18.220 --> 00:04:24.400
And essentially what I'm going to do is keep generating triangular numbers until we get to the number

56
00:04:25.390 --> 00:04:29.500
and either the number will be equal to a triangular number or white.

57
00:04:29.770 --> 00:04:32.050
If it is then it is a triangular number.

58
00:04:32.050 --> 00:04:35.940
If it's not then it's not.

59
00:04:36.120 --> 00:04:40.060
So we want to keep going as long as.

60
00:04:40.260 --> 00:04:43.960
So while how triangular number

61
00:04:47.610 --> 00:04:59.220
is less than how number that we're working with and essentially we want to keep going up the triangular

62
00:04:59.220 --> 00:05:02.700
numbers as long as this is the case.

63
00:05:02.730 --> 00:05:06.160
So how do we build triangular numbers.

64
00:05:08.710 --> 00:05:17.800
What we did before was increment our counter variable so X is now two and then take our triangular number

65
00:05:20.260 --> 00:05:27.660
and add X to it.

66
00:05:27.710 --> 00:05:34.730
So this will create a series of triangular numbers and it will keep on going until either triangular

67
00:05:34.730 --> 00:05:40.600
number is greater than the number or triangular number is equal to number.

68
00:05:41.180 --> 00:05:51.440
So once we're there we can check to see if triangular number is equal to number.

69
00:05:51.480 --> 00:05:57.720
That means how number must be a triangular number because it's in the sequence of triangular numbers.

70
00:05:57.870 --> 00:05:58.910
So if that's the case

71
00:06:01.860 --> 00:06:04.050
then we guarantee return true.

72
00:06:07.020 --> 00:06:13.390
But if it's not we're going to return false

73
00:06:16.320 --> 00:06:16.800
and that's it.

74
00:06:16.800 --> 00:06:22.800
That's how method for testing where the number is triangular or not.

75
00:06:22.850 --> 00:06:26.110
Of course we should definitely test that.

76
00:06:26.180 --> 00:06:27.200
So let's create our

77
00:06:30.300 --> 00:06:31.940
new number.

78
00:06:32.910 --> 00:06:36.240
Call it my number which has a new number.

79
00:06:39.450 --> 00:06:45.120
Hopefully you're writing out this object oriented code quite smoothly now which is a big step forward

80
00:06:45.780 --> 00:06:48.650
because it's by no means easy to get to grips with.

81
00:06:49.290 --> 00:06:52.950
And then we'll set my number number initially.

82
00:06:53.040 --> 00:06:57.530
Let's set it to a triangular number so say six for example.

83
00:07:01.330 --> 00:07:14.810
And then because we're just testing I'm going to just output the result to the locks to the console.

84
00:07:15.390 --> 00:07:25.060
So my number is triangular and then brackets.

85
00:07:25.850 --> 00:07:31.910
And with any luck then that will return true because six is indeed triangular.

86
00:07:32.710 --> 00:07:33.620
Let's take a look.

87
00:07:33.910 --> 00:07:34.400
OK.

88
00:07:34.450 --> 00:07:35.430
Looking good.

89
00:07:35.770 --> 00:07:38.200
Let's try it on a non triangular number.

90
00:07:40.660 --> 00:07:41.570
False.

91
00:07:41.610 --> 00:07:42.110
Brilliant.

92
00:07:42.210 --> 00:07:42.950
OK.

93
00:07:43.260 --> 00:07:44.520
Just a couple more.

94
00:07:44.820 --> 00:07:46.630
Ten is triangular.

95
00:07:46.920 --> 00:07:47.950
So that's true.

96
00:07:48.390 --> 00:07:53.370
20 isn't Fultz fabulous.

97
00:07:53.680 --> 00:07:54.130
OK.

98
00:07:54.200 --> 00:07:57.800
So we've got our is triangular test up and running.

99
00:07:58.100 --> 00:08:01.790
Now we need to create an is square test.

100
00:08:02.060 --> 00:08:03.790
So I'm going to do that up here.

101
00:08:05.070 --> 00:08:07.340
So same as before public.

102
00:08:08.340 --> 00:08:13.790
And we're returning a boolean and we'll call it is square

103
00:08:16.500 --> 00:08:22.790
so already hopefully you can see the sensibleness of keeping all this logic in one place.

104
00:08:22.870 --> 00:08:24.450
It just makes a lot of sense.

105
00:08:24.450 --> 00:08:29.510
And then when we're working down here we don't really need to refer to the logic much at all.

106
00:08:33.320 --> 00:08:43.420
Square number let's just have a quick Google is a squid number so square number is the product of a

107
00:08:43.420 --> 00:08:45.040
number multiplied by itself.

108
00:08:45.040 --> 00:08:47.550
So one is a square number because it's one times one.

109
00:08:47.590 --> 00:08:51.700
Four is a square number because it's two times t nine is a square number because it's three times three

110
00:08:51.920 --> 00:08:52.910
etc..

111
00:08:53.380 --> 00:08:58.780
So probably the best way to test whether a number is a square number or not is to find the square root

112
00:08:58.780 --> 00:09:01.510
of that number and see if it's a whole number.

113
00:09:01.990 --> 00:09:03.870
So the square root of 4 is 2.

114
00:09:03.880 --> 00:09:09.200
For example because two times two is four square root of 9 is 3 because three times three is nine.

115
00:09:09.220 --> 00:09:10.170
Cetera.

116
00:09:10.870 --> 00:09:13.820
So how do we find the squares of a number.

117
00:09:14.230 --> 00:09:20.100
Well that's one thing we haven't covered yet so I would expect you to search for something like Java.

118
00:09:20.340 --> 00:09:24.290
You can see I've already done it just to check that it's their Java.

119
00:09:24.310 --> 00:09:26.060
There's a square root method.

120
00:09:26.230 --> 00:09:26.910
Perfect.

121
00:09:26.920 --> 00:09:28.140
That's exactly what we want.

122
00:09:31.480 --> 00:09:38.500
So it looks like the method that we want is math not square square x.

123
00:09:39.140 --> 00:09:47.480
So I'm just going to copy that and jump back over now just to check that this works.

124
00:09:47.600 --> 00:09:48.340
I'm going say

125
00:09:51.550 --> 00:09:52.700
do a quick test.

126
00:09:54.390 --> 00:09:54.750
Say

127
00:09:57.900 --> 00:10:02.970
let's take the square root of my number number.

128
00:10:03.270 --> 00:10:03.740
We get.

129
00:10:03.790 --> 00:10:05.090
Let's take a look.

130
00:10:05.110 --> 00:10:07.460
So that should give us the square root of 20.

131
00:10:08.110 --> 00:10:08.540
OK.

132
00:10:08.620 --> 00:10:09.170
Fair enough.

133
00:10:09.190 --> 00:10:10.920
Perfectly reasonable request.

134
00:10:10.930 --> 00:10:17.930
I've said this is going to return a boolean and it doesn't say that's just for now returned true so

135
00:10:17.970 --> 00:10:23.210
that we can run our code.

136
00:10:23.440 --> 00:10:26.150
That looks like the square root of 20 to me.

137
00:10:26.250 --> 00:10:27.080
Brilliant.

138
00:10:27.100 --> 00:10:30.540
So that is exactly the function or method that we need.

139
00:10:30.970 --> 00:10:32.440
So let's copy it again.

140
00:10:34.120 --> 00:10:38.150
Here in.

141
00:10:38.400 --> 00:10:40.650
So let's create a double

142
00:10:45.870 --> 00:10:48.910
The square root like that.

143
00:10:49.410 --> 00:10:52.560
And that's going to be math dot squirt.

144
00:10:52.740 --> 00:10:56.690
And here I just want to square that number.

145
00:10:57.950 --> 00:10:58.630
All right.

146
00:10:58.860 --> 00:11:04.140
So if you're still with me the main thing I want to test about this is whether or not it's a whole number

147
00:11:04.560 --> 00:11:06.920
because if it is then we're dealing with a square number.

148
00:11:06.990 --> 00:11:08.960
If it's not then we're not.

149
00:11:09.180 --> 00:11:11.380
That's another thing we haven't worked out how to do.

150
00:11:11.780 --> 00:11:16.390
So let's do a quick google Java test.

151
00:11:16.530 --> 00:11:22.290
Well again you can say I've been there just to make sure that everything is available on line.

152
00:11:22.310 --> 00:11:25.150
So how to test if a double is an integer.

153
00:11:25.150 --> 00:11:28.330
That's a perfect question for us.

154
00:11:28.400 --> 00:11:30.960
So yes that's exactly what we want.

155
00:11:31.750 --> 00:11:32.580
OK.

156
00:11:33.690 --> 00:11:35.890
Let's say it looks like we use the math.

157
00:11:35.890 --> 00:11:38.730
Top floor method.

158
00:11:39.030 --> 00:11:40.400
So math top floor.

159
00:11:40.570 --> 00:11:48.130
If you don't want to read that is a method that finds the integer below the number that we're looking

160
00:11:48.130 --> 00:11:48.460
at.

161
00:11:48.460 --> 00:11:51.260
So at the moment we've got say four point four seven.

162
00:11:51.310 --> 00:11:53.660
So the integer below that is four.

163
00:11:54.010 --> 00:11:55.810
So actually that makes a lot of sense.

164
00:11:55.840 --> 00:12:01.630
If the number that we're looking at is the same as the number when rounded down then it must be an integer

165
00:12:01.840 --> 00:12:03.490
or whole number.

166
00:12:03.490 --> 00:12:06.090
So that's what we want.

167
00:12:06.090 --> 00:12:12.060
I think if we have a look at the other part that tests whether it's infinite or not which probably is

168
00:12:12.060 --> 00:12:13.290
not going to be relevant for us.

169
00:12:13.290 --> 00:12:14.700
I'm just going to leave that bit out.

170
00:12:14.790 --> 00:12:21.190
But if you want to just copy that in and it's not a major problem OK.

171
00:12:23.110 --> 00:12:35.000
So this is our test so we want to test if we have one variable this time we want square root is equal

172
00:12:35.000 --> 00:12:38.440
to a math top floor of the square root

173
00:12:43.960 --> 00:12:49.670
then it is a square number so it returns true.

174
00:12:52.350 --> 00:12:53.650
If that's not the case

175
00:12:56.280 --> 00:12:57.150
returned false

176
00:13:00.150 --> 00:13:01.440
There we go.

177
00:13:01.460 --> 00:13:05.010
So just to recap we've found the square root of our number.

178
00:13:05.360 --> 00:13:10.700
And then we've done a test to see whether that number is equal to that number when it's rounded down

179
00:13:10.880 --> 00:13:17.030
which is just another way of saying is that number a whole number an integer and if it is then our original

180
00:13:17.030 --> 00:13:19.490
number must have been a square number.

181
00:13:19.610 --> 00:13:24.110
If not then return false OK.

182
00:13:25.540 --> 00:13:38.420
So now let's use my number dot is square and of course we don't need anything in those parentheses anymore.

183
00:13:39.220 --> 00:13:41.640
So 20 is not a square number.

184
00:13:42.070 --> 00:13:53.570
So when we run this should give us false raw Let's try a square number then nine nine is a square number

185
00:13:53.600 --> 00:13:54.970
and it's giving us true.

186
00:13:55.130 --> 00:13:56.950
Fantastic.

187
00:13:57.080 --> 00:13:59.090
I think I'll just try a couple more.

188
00:13:59.450 --> 00:14:03.070
Fifty is not a square number so that's false.

189
00:14:03.080 --> 00:14:08.690
But 49 is a square number and that's true.

190
00:14:08.750 --> 00:14:10.020
So that's pretty good.

191
00:14:10.490 --> 00:14:17.630
So now we've got a bunch of code that we can just copy straight into our app because it's so nicely

192
00:14:17.660 --> 00:14:18.690
set out.

193
00:14:18.740 --> 00:14:24.450
It doesn't involve any buttons or getting the value of text edit fields or anything like that.

194
00:14:24.470 --> 00:14:27.350
It's nice and clean as far as that's concerned.

195
00:14:27.350 --> 00:14:29.470
Which means we can just use it straight away.

196
00:14:29.600 --> 00:14:34.310
And of course we could copy it into another app if we wanted to use this somewhere else as well.

197
00:14:34.310 --> 00:14:39.170
So that's one of the advantages of this nice clean class structure.

198
00:14:39.770 --> 00:14:46.470
So let's take this code and make number shapes.

199
00:14:46.710 --> 00:14:48.230
So the Android studio

200
00:14:51.680 --> 00:14:52.230
here we go.

201
00:14:52.280 --> 00:14:55.530
So it's it a higher or lower app or I have at least.

202
00:14:55.790 --> 00:14:58.910
So let's create a new project

203
00:15:01.900 --> 00:15:03.520
we'll call this number shape's

204
00:15:06.930 --> 00:15:13.260
and then all the usual default options that we get.

205
00:15:13.270 --> 00:15:14.330
And here we are.

206
00:15:14.350 --> 00:15:17.440
So this bit of the app should be relatively straightforward for you now.

207
00:15:17.440 --> 00:15:22.410
It's very similar to what we've been doing in the previous two apps we just need to set up our layout

208
00:15:22.720 --> 00:15:29.930
have our button and our text field and then run our class methods when the user presses the button.

209
00:15:29.950 --> 00:15:31.180
So let's do a quick set up

210
00:15:34.360 --> 00:15:41.010
I say will change that to the title number shapes and then

211
00:15:44.600 --> 00:15:46.300
give it an ID as well.

212
00:15:48.950 --> 00:16:02.100
Say number shapes and increase their size to maybe 30 espie and I'll just track that to the middle.

213
00:16:02.120 --> 00:16:07.440
Lovely site number shape's.

214
00:16:07.950 --> 00:16:10.340
And then we'll just have a bit of introductory text

215
00:16:13.900 --> 00:16:27.220
to enter a number below to find out if it is a triangular number square number or both

216
00:16:30.460 --> 00:16:35.710
we just change the ID to.

217
00:16:36.200 --> 00:16:38.240
And we want that to be a little larger.

218
00:16:43.320 --> 00:16:44.200
Try 18

219
00:16:47.070 --> 00:16:47.400
fine

220
00:16:51.100 --> 00:16:57.500
and we'll just stretch that out drag it down attach.

221
00:16:58.000 --> 00:17:01.870
Natalie obviously we're not going for a great design at this stage.

222
00:17:01.870 --> 00:17:05.580
We just want an app that functions and makes sense.

223
00:17:06.160 --> 00:17:12.350
So let's drag in our number textfield and that's before

224
00:17:16.350 --> 00:17:17.660
we can drag it out that way.

225
00:17:17.850 --> 00:17:24.600
And we can also just change the width here as we've done before.

226
00:17:24.870 --> 00:17:25.190
Great.

227
00:17:25.200 --> 00:17:28.900
Which is a better way to do it if you're working with different screen sizes.

228
00:17:29.070 --> 00:17:30.810
As you probably are.

229
00:17:31.740 --> 00:17:35.440
And finally let's have our button

230
00:17:39.140 --> 00:17:46.940
will change the text that the test number every day.

231
00:17:47.380 --> 00:17:55.470
And so the ID by default of our added text is just text.

232
00:17:55.780 --> 00:17:59.700
I'm going to change it to users number.

233
00:18:01.030 --> 00:18:01.620
There we go.

234
00:18:01.750 --> 00:18:10.590
And as usual our last thing is just to set the on click method.

235
00:18:10.670 --> 00:18:18.640
Here we go and I'll call it test number make sense everything's the same.

236
00:18:18.700 --> 00:18:19.280
OK.

237
00:18:19.450 --> 00:18:20.050
All right.

238
00:18:20.080 --> 00:18:28.510
So back over now to main activity Java and let's just get the basic logic of our apps in as we're fairly

239
00:18:28.510 --> 00:18:30.140
used to doing now.

240
00:18:31.090 --> 00:18:39.900
So we're going to create a public method which is not going to return anything and is called Test number.

241
00:18:40.570 --> 00:18:44.820
It's going to be called by the button which has a type of view.

242
00:18:45.170 --> 00:18:51.970
So that's going to send a new variable to our method.

243
00:18:51.970 --> 00:18:56.560
Not that we're particularly interested in that but we have to be prepared to take it.

244
00:18:57.520 --> 00:19:02.090
And this requires the view import over here.

245
00:19:02.270 --> 00:19:06.500
So Android VI our view.

246
00:19:06.970 --> 00:19:14.320
Hopefully this is becoming almost second nature to you now setting up the basic logic for an app and

247
00:19:14.320 --> 00:19:21.550
then all I'm going to do here is get the value of the the edit text the text field that these is and

248
00:19:21.550 --> 00:19:24.270
to then number into and then put it in the logs.

249
00:19:24.550 --> 00:19:31.400
So if you remember we called the text field uses number.

250
00:19:32.400 --> 00:19:47.400
So we're going to create an edit text or call it uses number and we're going to find a few by id and

251
00:19:47.400 --> 00:19:55.070
we use resources dot ID dot users number every day.

252
00:19:55.290 --> 00:20:03.360
And remember this is a view that we want to convert it to and edit text so we put that text in parentheses

253
00:20:03.810 --> 00:20:15.080
before hand they would go and now can you remember how the LOEG using Android will stick with the Android

254
00:20:15.080 --> 00:20:18.350
specific LOEG command.

255
00:20:19.710 --> 00:20:21.740
They were locked out high and then

256
00:20:25.800 --> 00:20:32.860
put users number in the first field and then we want to get the users number for the second field that's

257
00:20:32.920 --> 00:20:37.980
just put in the import log framework.

258
00:20:38.110 --> 00:20:47.350
An android you tail topped Loek and then to get the number.

259
00:20:48.140 --> 00:20:55.790
We use our users number variable which is the added text itself and then get text and then convert it

260
00:20:55.790 --> 00:20:57.060
to a string.

261
00:20:57.380 --> 00:20:59.730
So we can put it in the logs.

262
00:20:59.860 --> 00:21:00.940
There we go.

263
00:21:01.220 --> 00:21:04.950
So let's just run that and make sure that we've set up everything correctly.

264
00:21:04.950 --> 00:21:12.020
Always a good idea to do that before we start doing anything too complicated just so that we can make

265
00:21:12.020 --> 00:21:22.620
sure that the errors in our complicated code not in our simple code precursor game will launch emulator

266
00:21:22.680 --> 00:21:24.320
as usual.

267
00:21:24.660 --> 00:21:25.750
And here we go.

268
00:21:25.900 --> 00:21:28.530
Still it's open up right.

269
00:21:28.560 --> 00:21:30.010
There it is looking good.

270
00:21:30.060 --> 00:21:35.240
So let's just pop five and then test number and there it is fantastic.

271
00:21:35.280 --> 00:21:37.270
So everything's fitting together nicely.

272
00:21:37.710 --> 00:21:40.550
So I back over to our Java file.

273
00:21:41.150 --> 00:21:44.580
I hopefully still have my class

274
00:21:47.630 --> 00:21:55.350
code in the clipboard so I've just pasted it right in there so there's my number class.

275
00:21:55.390 --> 00:22:03.810
Now this time I don't want to have those bits there but I am going to want them here.

276
00:22:06.370 --> 00:22:09.440
At least to remind myself how I actually use the class.

277
00:22:09.790 --> 00:22:15.760
So I'm going to create a new number and all I'm going to change here is instead of setting the number

278
00:22:15.760 --> 00:22:22.750
to 49 every time I'm going to change the number to the value of the edit text field that the user has

279
00:22:22.840 --> 00:22:23.670
entered.

280
00:22:24.190 --> 00:22:28.710
So we're going to do the same as we did above.

281
00:22:28.710 --> 00:22:32.200
So users number get text

282
00:22:35.120 --> 00:22:37.820
and we're even going to convert it to a string.

283
00:22:38.240 --> 00:22:42.610
But from that we want to convert it to an integer.

284
00:22:42.980 --> 00:22:45.310
So you can see actually we've got the error there for horror.

285
00:22:45.340 --> 00:22:50.290
Hover over that you can see that which required an integer which is excellent.

286
00:22:50.290 --> 00:22:51.430
That's what we'd expect.

287
00:22:51.580 --> 00:22:54.210
So let's give it one.

288
00:22:54.310 --> 00:22:58.160
So we saw this a couple of years ago we use Integer Daut pass in

289
00:23:01.070 --> 00:23:01.730
there we go.

290
00:23:01.780 --> 00:23:06.460
And then we take out the string and we put that into that method.

291
00:23:06.460 --> 00:23:11.430
So we're getting the text field and we're getting the text from that.

292
00:23:11.560 --> 00:23:16.080
We're converting that to a string and then we're converting that to an integer

293
00:23:18.780 --> 00:23:19.410
excellent.

294
00:23:19.620 --> 00:23:26.210
And then that should just print straightaway to the Lokes whether or not it's a square number.

295
00:23:26.520 --> 00:23:35.460
So let's test that as it is and if that works then we can be pretty sure that that's class code has

296
00:23:35.460 --> 00:23:40.770
been correctly implemented in our app and all we need to do is get the user interface

297
00:23:43.450 --> 00:23:47.560
working say that it displays something as a toast to the user

298
00:23:51.140 --> 00:23:52.320
and take a look.

299
00:23:52.580 --> 00:23:53.770
So let's do a square number.

300
00:23:53.780 --> 00:23:56.830
First of all 14:9 true.

301
00:23:56.930 --> 00:24:00.510
So you can get to 40 that's not a square number.

302
00:24:00.530 --> 00:24:01.630
False.

303
00:24:01.640 --> 00:24:02.360
Fantastic.

304
00:24:02.360 --> 00:24:08.840
So you can see that that was a really smooth integration there that we just took our class code and

305
00:24:08.840 --> 00:24:12.550
copied it straight in and started using it straight away.

306
00:24:13.580 --> 00:24:21.870
So all that remains is to check whether the number is square is triangular is both or neither.

307
00:24:22.370 --> 00:24:27.040
That's a little bit of a challenge to work out how to do it with the minimum number of if statements.

308
00:24:27.290 --> 00:24:30.250
But as always there's a fair few ways to do it.

309
00:24:30.260 --> 00:24:31.580
I'm going to do it like this.

310
00:24:31.850 --> 00:24:37.060
So I'm going to start off to see whether it's a square or not.

311
00:24:37.130 --> 00:24:37.730
And remember

312
00:24:40.590 --> 00:24:45.370
because our square method returns a boolean.

313
00:24:45.410 --> 00:24:52.150
I can just put it straight into an IF statement which is really nice.

314
00:24:52.250 --> 00:24:59.260
So if the number is a square I'm then going to have another if statement directly in there and then

315
00:24:59.260 --> 00:25:01.880
as nested if statements.

316
00:25:02.390 --> 00:25:10.160
So I'm now going to check for it being a triangle and you can see that is predicting all methods which

317
00:25:10.160 --> 00:25:11.510
is really nice.

318
00:25:11.710 --> 00:25:19.850
The methods that we went are being incorporated into the ID itself.

319
00:25:19.850 --> 00:25:27.110
So if we get to here that means that the number that we've got is square and triangular.

320
00:25:27.110 --> 00:25:29.770
So let's have a message like we did before.

321
00:25:30.050 --> 00:25:31.800
That reflects this.

322
00:25:31.810 --> 00:25:37.670
And then we can have a single TOSed command happy at the end of the if statements.

323
00:25:37.670 --> 00:25:51.760
So let's have a string message which is initially blank and then the message here is that the number

324
00:25:53.620 --> 00:25:58.350
which you'll remember is my number number

325
00:26:02.460 --> 00:26:09.190
and we're going to say is both triangular and square.

326
00:26:10.010 --> 00:26:16.450
And I think a little exclamation mark would be would be fitting that.

327
00:26:16.970 --> 00:26:23.100
And now before I do the rest of my if statements I'm going to set up our taste so that we can just check

328
00:26:23.130 --> 00:26:24.670
this and make sure everything's working.

329
00:26:24.810 --> 00:26:34.090
And then we'll put in the rest of the necessary IF statements say taste or make text and then we get

330
00:26:34.090 --> 00:26:34.960
the context

331
00:26:38.170 --> 00:26:51.830
the message is message and as usual we use length long and then we want to show that every I don't think

332
00:26:51.830 --> 00:26:55.200
we need our log message anymore either.

333
00:26:58.920 --> 00:27:02.980
So while this is compiling I'm going to need to think of a number which is both Square and triangular.

334
00:27:04.610 --> 00:27:06.490
Fortunately there's a nice easy one.

335
00:27:06.840 --> 00:27:14.450
But number one is both Square and triangular so I'm going to check that to see if this is displaying

336
00:27:14.480 --> 00:27:15.130
as it should.

337
00:27:18.470 --> 00:27:21.620
So if I put one in I should get my message.

338
00:27:21.660 --> 00:27:23.600
One is by triangular and square.

339
00:27:23.820 --> 00:27:25.340
Fantastic.

340
00:27:25.350 --> 00:27:30.420
Out of interest what do you think will happen if I put two in at the moment.

341
00:27:30.420 --> 00:27:35.270
We get a blank text because we haven't put in the options for other numbers yet.

342
00:27:35.940 --> 00:27:38.310
So we're looking good so far.

343
00:27:39.060 --> 00:27:42.380
So let's put an else statement here.

344
00:27:43.380 --> 00:27:46.980
So I have a quick think what situation are we at here.

345
00:27:47.130 --> 00:27:55.260
We know that it's square because this one told us it was square but we also know that it's not triangular.

346
00:27:55.390 --> 00:27:58.230
So that's what our situation is.

347
00:27:58.230 --> 00:28:04.710
So the message is my number number plus concatenated with

348
00:28:07.740 --> 00:28:12.900
is square but not triangular.

349
00:28:14.610 --> 00:28:15.210
Full stop.

350
00:28:15.360 --> 00:28:18.240
That's not quite as exciting as being both triangular and square.

351
00:28:18.250 --> 00:28:20.080
So I'm just going have a full stop there.

352
00:28:20.310 --> 00:28:22.240
You can choose what you like.

353
00:28:23.070 --> 00:28:25.530
So that's the first two options.

354
00:28:25.570 --> 00:28:29.190
We've got both triangular and square and we've got square covered.

355
00:28:29.190 --> 00:28:32.680
Now I'm going to put an else statement here.

356
00:28:33.300 --> 00:28:41.070
So if we're in this chunk of code that means that the number is not square because this if statement

357
00:28:41.970 --> 00:28:42.840
is not true.

358
00:28:42.990 --> 00:28:49.540
So the numbers definitely not square so let's just have in fact we can just copy that code because our

359
00:28:49.540 --> 00:28:51.280
code here is going to be very similar.

360
00:28:52.660 --> 00:28:54.760
So if the number is triangular.

361
00:28:54.760 --> 00:29:03.820
Now here we know that it is triangular but not square.

362
00:29:04.370 --> 00:29:06.140
And again full stop them.

363
00:29:06.480 --> 00:29:08.540
So here with Stephani triangular.

364
00:29:08.550 --> 00:29:09.960
But it's not square.

365
00:29:11.640 --> 00:29:17.520
And here means it's not triangular and it's not square.

366
00:29:19.450 --> 00:29:32.740
So is neither square nor triangular I'm not saying if I run that it should give me a correct answer

367
00:29:33.610 --> 00:29:35.110
for every number.

368
00:29:42.140 --> 00:29:43.670
Let's take a look.

369
00:29:43.670 --> 00:29:44.980
Keep your fingers crossed.

370
00:29:49.210 --> 00:29:50.400
So I will try one.

371
00:29:50.400 --> 00:29:51.360
Same as last time.

372
00:29:51.450 --> 00:29:52.440
Both triangular and square.

373
00:29:52.440 --> 00:29:52.910
Great.

374
00:29:52.920 --> 00:29:56.460
Still working two should be neither.

375
00:29:57.210 --> 00:29:59.020
Either triangular no square.

376
00:29:59.040 --> 00:30:04.740
Fantastic three is triangular but not square.

377
00:30:04.740 --> 00:30:05.610
There it is.

378
00:30:05.610 --> 00:30:10.310
Fantastic Four should be square but not triangular.

379
00:30:10.320 --> 00:30:11.040
Fantastic.

380
00:30:11.040 --> 00:30:14.340
So that's all the different possibilities that we've had there.

381
00:30:14.550 --> 00:30:18.650
And let's just check a few more that should be square but not triangular.

382
00:30:18.920 --> 00:30:24.080
Gay and 28 should be triangular but not square.

383
00:30:24.110 --> 00:30:25.200
Brilliant.

384
00:30:25.260 --> 00:30:27.470
There's one extra feature I'm going to add here.

385
00:30:27.720 --> 00:30:34.190
And that's to avoid this crash that we saw last time.

386
00:30:34.320 --> 00:30:43.330
But I said as a challenge for you to do to fix I think there's a fairly easy way really to avoid that.

387
00:30:43.470 --> 00:30:46.730
There are more technical ways as well which I'll see which we'll see later on.

388
00:30:46.860 --> 00:30:54.960
But for now we're going to keep it very simple and we're going to just test at this point.

389
00:30:54.960 --> 00:30:55.400
Thanks.

390
00:30:55.400 --> 00:30:56.760
That's slightly earlier.

391
00:30:57.890 --> 00:31:05.510
We're going to do a test here to see whether the user has entered anything and that will work because

392
00:31:05.510 --> 00:31:08.060
we chose the number type.

393
00:31:08.120 --> 00:31:14.250
Remember when we added the text field we chose the number type which doesn't allow even decimals.

394
00:31:14.300 --> 00:31:16.730
It doesn't allow anything which isn't a digit.

395
00:31:16.730 --> 00:31:20.560
So if the user enters anything here they can only enter a number.

396
00:31:20.630 --> 00:31:27.470
So all we have to do is check to make sure that the user has entered something so we can create an if

397
00:31:27.470 --> 00:31:28.940
statement here.

398
00:31:29.330 --> 00:31:31.740
And we can get the the value of what they've entered.

399
00:31:31.740 --> 00:31:39.000
So uses number to get text and then convert it to a string.

400
00:31:39.170 --> 00:31:42.610
Now we need a way to test whether this is empty or not.

401
00:31:42.620 --> 00:31:47.090
So whether it's an empty string that's not something we have officially seen before.

402
00:31:47.150 --> 00:31:51.960
So let's jump over to Google and find out.

403
00:31:52.000 --> 00:31:57.450
So Java test if string is empty.

404
00:31:59.270 --> 00:32:00.000
Maybe gay

405
00:32:03.530 --> 00:32:06.020
that looks like what we want to know.

406
00:32:06.050 --> 00:32:08.490
Let's find an answer.

407
00:32:08.510 --> 00:32:09.570
Here we go.

408
00:32:10.040 --> 00:32:12.430
Now we know that the string is not going to be No.

409
00:32:12.440 --> 00:32:15.650
Because we're getting the string from the edit text.

410
00:32:15.680 --> 00:32:21.410
So there's definitely going to be a string there it's not going to be an existent but the string could

411
00:32:21.410 --> 00:32:22.440
be empty.

412
00:32:22.700 --> 00:32:28.230
So that's what we want we want to test the is empty method.

413
00:32:30.400 --> 00:32:41.510
There we go back to android studio and pop is empty and then so if it's empty then all we need to do

414
00:32:41.510 --> 00:32:43.150
is set the message.

415
00:32:45.590 --> 00:32:50.510
He called to please enter a number

416
00:32:53.290 --> 00:33:00.570
and if it's not then we can do everything else in the usual way that we get.

417
00:33:00.580 --> 00:33:03.540
You can see it's done a really nice job of inventing things for me.

418
00:33:03.970 --> 00:33:08.540
And it's also alerting me to a problem which hopefully you can see what it is.

419
00:33:08.590 --> 00:33:16.440
The problem is we've defined the message down there and then used it up here.

420
00:33:16.440 --> 00:33:23.810
So I just need to move the definition to the top.

421
00:33:23.810 --> 00:33:24.190
There we go.

422
00:33:24.180 --> 00:33:31.760
So now we've got a nice test to see if the string is empty or if they've entered nothing and if so we

423
00:33:31.760 --> 00:33:33.390
give them a relevant message.

424
00:33:33.410 --> 00:33:36.850
Otherwise we process that number.

425
00:33:36.860 --> 00:33:37.970
So let's take a look.

426
00:33:42.150 --> 00:33:46.290
Probably worth mentioning at this point that there are more advanced ways of doing this test and you

427
00:33:46.290 --> 00:33:51.960
can essentially do the pass it and test whether that's been successful.

428
00:33:51.960 --> 00:33:57.240
And that's a better method really than doing what we're doing here because this relies on the user only

429
00:33:57.240 --> 00:34:02.000
being able to enter an integer and there may be some other options that we haven't thought of here.

430
00:34:02.160 --> 00:34:05.970
So really the best thing to do is check that but we'll see how to do that later on.

431
00:34:06.120 --> 00:34:10.930
If you want to jump ahead a bit there then google the Java try command.

432
00:34:10.980 --> 00:34:16.830
That's the way to test whether a function or method has been successful or not.

433
00:34:16.980 --> 00:34:18.120
But this should do for now.

434
00:34:18.150 --> 00:34:19.340
Let's just have a look.

435
00:34:19.770 --> 00:34:27.140
So now if we enter nothing we get a nice friendly message rather than an app crash which isn't great.

436
00:34:27.480 --> 00:34:28.980
And just one more quick check.

437
00:34:29.000 --> 00:34:30.570
Just make sure everything is still working.

438
00:34:30.580 --> 00:34:33.540
49 is square but not triangular.

439
00:34:34.770 --> 00:34:35.780
Fantastic.

440
00:34:35.850 --> 00:34:40.710
So I hope you manage to do at least a good portion of that yourself.

441
00:34:40.710 --> 00:34:47.820
It's quite a step up from what we were doing just a few videos ago really where we're creating our own

442
00:34:47.820 --> 00:34:50.590
class with a variable within it.

443
00:34:50.640 --> 00:34:58.410
And then two methods which we then use quite neatly down here to tell whether our number is triangular

444
00:34:58.410 --> 00:35:01.360
square neither or both.

445
00:35:01.380 --> 00:35:02.340
So that was fun.

446
00:35:02.340 --> 00:35:04.030
I hope you are enjoying yourself so far.

447
00:35:04.140 --> 00:35:07.950
You'll be pleased to hear that we are going to be an android studio for pretty much the rest of the

448
00:35:07.950 --> 00:35:15.290
course and in the next chapter we'll be seeing how to work with images animation and sound.

449
00:35:15.300 --> 00:35:16.200
I'll see you there.
