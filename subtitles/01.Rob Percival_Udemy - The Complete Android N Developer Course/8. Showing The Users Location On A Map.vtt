WEBVTT
1
00:00:00.300 --> 00:00:06.860
Now you know how to get the users location and also how to display a map showing any location.

2
00:00:06.870 --> 00:00:12.840
The next step should be fairly obvious and that is to create an app with a map that's centered on the

3
00:00:12.840 --> 00:00:14.350
user's location.

4
00:00:14.680 --> 00:00:16.260
That's what we're going to be doing in this video.

5
00:00:16.260 --> 00:00:18.980
And in fact I'm going to set it as a challenge.

6
00:00:19.170 --> 00:00:26.430
So I would recommend starting with the Google Maps activity as a new app and then setting up the location

7
00:00:26.670 --> 00:00:33.930
code so that it asks the user for permission and then when it has it displays the user's location on

8
00:00:33.930 --> 00:00:35.070
the map.

9
00:00:35.070 --> 00:00:35.890
Best of luck.

10
00:00:36.000 --> 00:00:36.760
Go for it.

11
00:00:42.180 --> 00:00:42.640
All right.

12
00:00:42.810 --> 00:00:43.990
I hope you manage that.

13
00:00:44.010 --> 00:00:53.020
It was just a combination of the last two videos worth of code so I show you how I would have done it.

14
00:00:53.070 --> 00:00:54.530
So we'll start with a new project

15
00:00:57.580 --> 00:01:00.530
I'll call it map and location demo.

16
00:01:02.400 --> 00:01:04.890
And we'll stick with marshmallow

17
00:01:07.630 --> 00:01:09.310
and a Google Maps activity

18
00:01:13.630 --> 00:01:16.630
and we get.

19
00:01:17.110 --> 00:01:19.120
So I'm going to start by grabbing

20
00:01:21.660 --> 00:01:28.010
my map Deemer app which contains my Google Maps API key as I mentioned.

21
00:01:28.020 --> 00:01:33.480
I wouldn't recommend sharing keys between apps for apps that are actually going onto the App Store but

22
00:01:33.480 --> 00:01:37.670
if you're just testing things out it's perfectly fine.

23
00:01:37.670 --> 00:01:44.820
So over in my Google Maps demo app I'm going to go to the Google Maps API so the Excel file and then

24
00:01:46.290 --> 00:01:55.950
just copy my Google Maps keep and then I'll head back over to my new app map on location demo and paste

25
00:01:55.950 --> 00:01:57.340
the key in there.

26
00:02:00.870 --> 00:02:02.140
Great.

27
00:02:02.340 --> 00:02:04.290
I'll set the app running on

28
00:02:07.150 --> 00:02:09.370
my android 6 device.

29
00:02:09.850 --> 00:02:19.060
And while that's carrying our jump over to the map was activity code and remind myself what's going

30
00:02:19.060 --> 00:02:20.570
on here.

31
00:02:20.620 --> 00:02:23.530
So remember we've got the create method as we're used to.

32
00:02:23.560 --> 00:02:26.300
We also have the on map ready method.

33
00:02:27.510 --> 00:02:31.980
So I'm going to be writing my code in that because I don't want to be updating the center of the map

34
00:02:32.250 --> 00:02:34.790
until the map is ready to be updated.

35
00:02:37.330 --> 00:02:39.610
I have had an error installing the API.

36
00:02:39.730 --> 00:02:48.070
The IP I did just get an error installing the IP K-Bitch which I do get occasionally when that happens

37
00:02:48.400 --> 00:02:56.280
I usually shut down the emulator and restart it.

38
00:02:56.430 --> 00:02:58.740
So I'll do that when the app is ready.

39
00:02:59.480 --> 00:03:00.680
OK.

40
00:03:00.690 --> 00:03:15.170
Code wise we're going to need a location manager location manager and also our location listener cold

41
00:03:15.320 --> 00:03:16.160
location listener

42
00:03:22.040 --> 00:03:36.470
and then can automatically include the losses for those and also location listener.

43
00:03:36.480 --> 00:03:42.480
OK so now down here in on map ready we'll set up our location

44
00:03:45.060 --> 00:03:46.880
manager.

45
00:03:46.950 --> 00:03:51.110
So this is going to be cast as a location manager.

46
00:03:51.160 --> 00:03:53.350
How are we're going to get it from this context.

47
00:03:54.650 --> 00:04:06.310
And get system service and the system service that we want is context dot locations that this in fact

48
00:04:07.150 --> 00:04:13.100
does remind me I need to add the permission in the manifest.

49
00:04:13.220 --> 00:04:14.350
That's very handy.

50
00:04:14.450 --> 00:04:22.460
So the Google Maps activity automatically puts the access find location permission in the manifest for

51
00:04:22.460 --> 00:04:23.040
you.

52
00:04:23.210 --> 00:04:23.720
Very useful

53
00:04:28.820 --> 00:04:29.130
OK.

54
00:04:29.130 --> 00:04:31.200
Now we set up our location listener

55
00:04:34.650 --> 00:04:36.720
this is going to be a new location listener

56
00:04:39.280 --> 00:04:44.560
and on location change this time just for a bit of variety.

57
00:04:44.710 --> 00:04:45.790
I'm going to TOSed

58
00:04:48.750 --> 00:04:55.910
the location rather than putting it in the locks.

59
00:04:56.250 --> 00:05:02.000
Obviously once we've convinced ourselves that everything's working we'll update the map with the location.

60
00:05:02.010 --> 00:05:04.790
But I'll leave that till a little later.

61
00:05:05.010 --> 00:05:07.590
We're not going to edit any of those.

62
00:05:07.620 --> 00:05:11.610
We'll leave those as is and will do our check to see if

63
00:05:14.400 --> 00:05:23.310
the build version STK is less than 23.

64
00:05:23.620 --> 00:05:33.720
Then we want to take out a location manager and request location updates using location manager talked

65
00:05:34.120 --> 00:05:44.120
G.P.A. provider and we'll stick to 0 so update it in zero seconds and zero meters.

66
00:05:44.120 --> 00:05:52.360
So essentially any change of location will be made aware of how we use our location listener to process

67
00:05:52.360 --> 00:05:52.630
that

68
00:05:55.850 --> 00:06:07.500
and then if that's not the case we need to ask for permission and we do that using context compact compatibility

69
00:06:08.940 --> 00:06:19.000
check self permission and the context is this and the permission we want to check is manifest so just

70
00:06:19.000 --> 00:06:19.830
manifest

71
00:06:23.230 --> 00:06:34.930
got permission access fine location and we want to check to see if that's not equal to the package manager

72
00:06:35.170 --> 00:06:38.920
got permission granted.

73
00:06:39.880 --> 00:06:50.050
So if it's not granted we need to check for permission using activity compacts don't request permissions

74
00:06:50.900 --> 00:07:00.870
and we want to request them for this activity and they string array that we want to request.

75
00:07:00.870 --> 00:07:11.850
It's just a single string which is manifest but permission to access find location

76
00:07:14.630 --> 00:07:22.560
and then we add a little number one on the end to that kind of ID number.

77
00:07:23.720 --> 00:07:29.280
And if that's not the case then we must have permission.

78
00:07:29.370 --> 00:07:37.120
So that's kick off our location listener.

79
00:07:37.120 --> 00:07:38.500
All right we're nearly there.

80
00:07:38.860 --> 00:07:39.430
Well that's happening.

81
00:07:39.430 --> 00:07:41.240
I'm just going to run the app again.

82
00:07:44.590 --> 00:07:45.830
To get the device carrying

83
00:07:48.570 --> 00:08:03.050
and then up here we're going to add our code to the on request permissions result.

84
00:08:03.100 --> 00:08:04.920
There we go.

85
00:08:05.980 --> 00:08:13.990
And again just for a bit of a will do a little check to see if request code is equal to one which we

86
00:08:13.990 --> 00:08:17.040
know it will be because there's only a single request in this app.

87
00:08:17.290 --> 00:08:21.210
But just to show you how we would use request code if we wanted to.

88
00:08:21.910 --> 00:08:25.680
Well then do a check to see if.

89
00:08:25.880 --> 00:08:39.550
And just to show you why we do a double check if we're used Grant results 3 is equal to package manager

90
00:08:39.630 --> 00:08:45.990
not permission granted if we just use that we might get an error because there might not be a zeroth

91
00:08:46.060 --> 00:08:47.320
item in grot results.

92
00:08:47.320 --> 00:08:49.080
It might be an empty array.

93
00:08:49.150 --> 00:09:01.180
So to check that use Grant results don't length and check that that is greater than zero first and then

94
00:09:01.210 --> 00:09:05.010
we check that the first result is permission granted.

95
00:09:05.640 --> 00:09:14.810
And if that's the case then we can take our location manager and request location updates using

96
00:09:19.830 --> 00:09:37.290
location manager it's gas provider zero for time zero for meters and location listener.

97
00:09:37.420 --> 00:09:39.400
There we go.

98
00:09:39.700 --> 00:09:43.260
In fact I have something I need to check.

99
00:09:47.130 --> 00:09:52.020
If we have the permission again so I'll copy that up just as we did before

100
00:09:55.220 --> 00:10:04.150
but remembering that we now need to check that permission is granted rather than is not granted and

101
00:10:04.150 --> 00:10:05.300
that should do it.

102
00:10:05.710 --> 00:10:10.880
So I'm going to press the run button again to restart the app.

103
00:10:14.610 --> 00:10:15.970
Use that device.

104
00:10:16.850 --> 00:10:21.450
And unless I've forgotten something which is very easy to do when you're working with either location

105
00:10:21.720 --> 00:10:30.390
we should now get the dialog box to request the users location and then when they say yes and we update

106
00:10:30.390 --> 00:10:34.470
the location we get this TOSed appearing on the screen.

107
00:10:34.530 --> 00:10:36.540
Let's see.

108
00:10:36.700 --> 00:10:41.740
It looks like I've forgotten a few semi-colons.

109
00:10:41.760 --> 00:10:42.480
Easily done.

110
00:10:42.490 --> 00:10:43.690
So let's have a quick look.

111
00:10:47.190 --> 00:10:47.880
Where there is an

112
00:10:58.270 --> 00:10:59.830
actually it looks like

113
00:11:02.880 --> 00:11:06.340
I don't have enough closing parentheses then.

114
00:11:06.430 --> 00:11:12.470
So I actually wanted a closing parenthesis to match that one.

115
00:11:12.600 --> 00:11:14.600
I suspect that will solve the problem.

116
00:11:16.430 --> 00:11:21.840
So notice the error message isn't necessarily a correct description of what the error is.

117
00:11:21.840 --> 00:11:24.630
It can be caused by something a few lines above.

118
00:11:25.140 --> 00:11:29.530
It's actually different to what Android studio is claiming.

119
00:11:30.220 --> 00:11:31.700
OK let's try this again.

120
00:11:31.980 --> 00:11:32.950
And here we go.

121
00:11:33.000 --> 00:11:35.300
Just a quick word of warning on the Mac.

122
00:11:35.310 --> 00:11:38.990
I had to rename the folder name without the sign in it.

123
00:11:39.000 --> 00:11:45.390
So if you have problems with that just closed down the project rename the folder to remove the and sign

124
00:11:45.410 --> 00:11:47.970
and then load it up again and it should be fine.

125
00:11:48.480 --> 00:11:49.160
So here we go.

126
00:11:49.200 --> 00:11:57.250
Let's allow the app access to my location so you can see the map is appearing as expected.

127
00:11:57.610 --> 00:12:00.540
And then let's update the location.

128
00:12:00.550 --> 00:12:06.820
And we should see the new location as a toast.

129
00:12:06.840 --> 00:12:07.660
Fingers crossed.

130
00:12:07.680 --> 00:12:08.440
There it is.

131
00:12:08.530 --> 00:12:09.570
Rob.

132
00:12:10.420 --> 00:12:11.020
Excellent.

133
00:12:11.190 --> 00:12:13.080
So that's all working well.

134
00:12:13.140 --> 00:12:20.430
Now we just need to change the code so that instead of displaying a taste we update the location of

135
00:12:20.430 --> 00:12:23.130
the map.

136
00:12:23.240 --> 00:12:36.510
So let's move these lines of code up to taste and then we want to get the location here.

137
00:12:36.510 --> 00:12:42.390
So it's going to be location don't get latitude.

138
00:12:42.450 --> 00:12:46.650
Now you haven't seen before but hopefully you could have figured that out.

139
00:12:46.650 --> 00:12:47.750
It's not too tricky.

140
00:12:47.820 --> 00:12:58.390
And then location gets long into and let's change that from Sydney to use a location

141
00:13:04.790 --> 00:13:11.500
and then we'll just change the title to your location.

142
00:13:13.680 --> 00:13:15.100
All right let's give it a try.

143
00:13:16.490 --> 00:13:20.140
So we should now find that the app centers on the users location

144
00:13:25.350 --> 00:13:26.850
let's find out.

145
00:13:30.600 --> 00:13:32.950
OK so let's update the location.

146
00:13:35.860 --> 00:13:37.120
And there we go.

147
00:13:37.600 --> 00:13:42.590
And of course if the user is traveling around then this would update every second or so.

148
00:13:42.680 --> 00:13:46.580
It's a gradual movement of the map as the user moves around.

149
00:13:46.810 --> 00:13:50.200
Now you may have noticed one slight issue there when we launched the app.

150
00:13:50.230 --> 00:13:56.650
It didn't zero in on the users current location and that's because our code so far only updates the

151
00:13:56.650 --> 00:13:59.190
map when the location is changed.

152
00:13:59.290 --> 00:14:03.510
So we want to add a little bit of code that gets users current location.

153
00:14:03.520 --> 00:14:08.550
When the app is launched so we'll do that here.

154
00:14:08.650 --> 00:14:14.890
So if the app is launched and we can get the user's location so we can do that by finding the users

155
00:14:14.980 --> 00:14:17.510
last known location.

156
00:14:17.740 --> 00:14:29.470
So let's create a location variable of call it last known location and we can get that from our location

157
00:14:29.470 --> 00:14:39.250
manager and get the last known location that we got using the provider that we're used to location manager

158
00:14:41.030 --> 00:14:43.520
talk GPS provider.

159
00:14:44.590 --> 00:14:47.350
So that will give us the last known location and we can then

160
00:14:52.180 --> 00:14:54.680
use exactly the same carried here.

161
00:14:58.480 --> 00:15:10.650
Except instead of location we use last known location with an eye on the end to show that valley

162
00:15:13.930 --> 00:15:14.980
so let's have a look.

163
00:15:14.980 --> 00:15:17.880
Now when we run that it should start the app

164
00:15:21.290 --> 00:15:22.890
in the appropriate location

165
00:15:26.290 --> 00:15:31.130
and then we get in exactly the same location it was before.

166
00:15:31.160 --> 00:15:32.000
And of course

167
00:15:37.140 --> 00:15:44.240
as we update the location updates the app haha but it has shown us a slight issue with our app that

168
00:15:44.250 --> 00:15:51.150
every time we add a marker we really need to delete the existing markets and we can do that very easily

169
00:15:51.780 --> 00:15:55.530
by simply taking our Google map

170
00:15:59.090 --> 00:16:03.370
and clearing it simple as that.

171
00:16:03.390 --> 00:16:05.900
Obviously you want to do that before you add the new market.

172
00:16:06.120 --> 00:16:09.790
Otherwise you're clear that as well.

173
00:16:09.890 --> 00:16:10.640
There we go.

174
00:16:10.970 --> 00:16:22.480
So that will now clear all the existing markets from Europe and only at the latest one excellent.

175
00:16:22.490 --> 00:16:28.880
So we now have a great boiler plate app that you can use for any app that requires a map centered on

176
00:16:28.910 --> 00:16:31.460
the user's location.

177
00:16:31.610 --> 00:16:36.080
It's just said and actions are out.

178
00:16:36.830 --> 00:16:46.260
If I change that to 30 then that will update the map every day and move the market down.

179
00:16:48.150 --> 00:16:48.640
Fantastic.

180
00:16:48.640 --> 00:16:54.450
So it is time to put our new found gas related knowledge into action by building an app that I like

181
00:16:54.450 --> 00:16:56.670
to call hiker's watch.

182
00:16:56.910 --> 00:16:58.350
We'll do that in the next video.
