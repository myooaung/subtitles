1
00:00:00,590 --> 00:00:05,940
As you are making the Notes app or following along to the notes that video you probably thought that's

2
00:00:06,180 --> 00:00:11,040
the way we were doing things with shared preferences worked a bit but it was a bit of a fiddle to get

3
00:00:11,070 --> 00:00:16,350
all of our data into there and then to update it regularly was a bit of a hassle and that's because

4
00:00:16,350 --> 00:00:20,250
share preferences isn't really designed for that kind of data storage.

5
00:00:20,250 --> 00:00:26,280
It is really designed for just one of variables that are stored and updated rarely.

6
00:00:26,280 --> 00:00:31,440
So what's the way then of storing data in your app which is relatively complex which needs to be updated

7
00:00:31,440 --> 00:00:36,000
regularly and maybe which needs to be searched queried in a certain way.

8
00:00:36,440 --> 00:00:38,500
Well to do that in Android we use something good.

9
00:00:38,550 --> 00:00:48,400
Su like su l is a server query language and it's a very standard language for interacting with databases.

10
00:00:48,420 --> 00:00:52,500
If you've done any work on the web you may well have worked with Majeski well which is a slightly different

11
00:00:52,500 --> 00:00:57,570
version and if you've never seen as you well before you might want to do a quick google introduction

12
00:00:57,570 --> 00:01:01,300
to Eskew Well something like that is to get a little bit of background.

13
00:01:01,440 --> 00:01:07,630
But of course I'll talk you through everything you need and we'll do it in a new project.

14
00:01:10,040 --> 00:01:18,820
So I will call this database demo and all the usual settings we can be working completely in the console

15
00:01:18,820 --> 00:01:19,740
here anyway.

16
00:01:21,150 --> 00:01:27,210
So all we're going to do in this video is create a database and then create a table in that database

17
00:01:27,810 --> 00:01:35,220
which will store some data and then we'll pull some data out from that table.

18
00:01:35,280 --> 00:01:40,320
So it's all the basic stuff that you might want to do with the database essentially.

19
00:01:40,320 --> 00:01:45,810
And as we go through the process it will become hopefully a lot clearer how these databases work and

20
00:01:45,810 --> 00:01:48,200
what indeed they are.

21
00:01:49,110 --> 00:01:50,120
All right.

22
00:01:51,030 --> 00:02:00,620
So first off we're going to surround everything we do with I try and catch the Jemal exception

23
00:02:05,250 --> 00:02:08,890
because there's lots of things that could potentially go wrong here.

24
00:02:10,790 --> 00:02:19,910
Stage one is to create our database so we do this by creating a variable of a type as well like database

25
00:02:20,970 --> 00:02:32,510
and I'll call it my database and then we open it from our current context to this and then we can do

26
00:02:32,510 --> 00:02:33,860
this in a number of different ways.

27
00:02:33,860 --> 00:02:37,940
I normally go for open or create database.

28
00:02:38,510 --> 00:02:44,030
So this is handy because it will open the database if it already exists and if it doesn't then it will

29
00:02:44,030 --> 00:02:44,850
create it.

30
00:02:45,080 --> 00:02:49,700
So it does both jobs first in one command.

31
00:02:49,700 --> 00:02:53,040
And I'm going to create a database of users.

32
00:02:53,210 --> 00:02:55,220
So this is the name of my database.

33
00:02:55,280 --> 00:03:00,550
Call it uses a couple of other settings we need.

34
00:03:00,560 --> 00:03:07,090
Again we've got a mode just like we had with shared preferences and I usually go for mode private.

35
00:03:07,130 --> 00:03:12,020
That means that it will only be accessible to your app if you want to share your data with other apps

36
00:03:12,020 --> 00:03:13,520
then you might want to have a different mode.

37
00:03:13,580 --> 00:03:18,240
But the vast majority of the time you're probably going to want mode underscore private.

38
00:03:18,950 --> 00:03:25,010
And then we can have a special error catching method there.

39
00:03:25,100 --> 00:03:27,110
But I don't normally bother with that.

40
00:03:27,110 --> 00:03:28,790
I'll just put no

41
00:03:31,550 --> 00:03:32,170
OK.

42
00:03:32,230 --> 00:03:33,410
Now you have a database.

43
00:03:33,460 --> 00:03:35,220
Congratulations.

44
00:03:35,320 --> 00:03:38,470
The next step is to put a table in your database.

45
00:03:38,530 --> 00:03:44,410
So if you imagine your database a bit like being an Excel file with lots of different tabs along the

46
00:03:44,410 --> 00:03:47,460
bottom then the table is like one of those tabs.

47
00:03:47,710 --> 00:03:51,760
So it contains a certain type of information.

48
00:03:52,390 --> 00:04:00,500
So my database and we're going to execute some rescue el.

49
00:04:00,630 --> 00:04:05,790
So now most of our code from now on is going to be Eskew well-coached which is a completely different

50
00:04:05,790 --> 00:04:10,970
language to Java but it's one that's fairly easy to get the hang of.

51
00:04:10,980 --> 00:04:19,050
So what we'll do is we'll create a table and we'll do that.

52
00:04:19,050 --> 00:04:23,230
If it doesn't exist.

53
00:04:23,460 --> 00:04:26,040
So the grammar there isn't great but you get the idea.

54
00:04:26,040 --> 00:04:29,080
So we'll only create the table if it doesn't exist.

55
00:04:29,090 --> 00:04:35,170
So a bit like this open or create database will only create the database if it doesn't exist.

56
00:04:35,190 --> 00:04:42,480
Otherwise we'll open it and he will only create this table if it doesn't exist and the table name is

57
00:04:42,480 --> 00:04:47,710
going to be uses to the table name doesn't have to be the same as the database name.

58
00:04:47,730 --> 00:04:49,070
And generally they won't be the same.

59
00:04:49,230 --> 00:04:52,970
But in this case it's probably going to be a database with just one table.

60
00:04:52,980 --> 00:04:55,190
So it's both about the same sort of thing.

61
00:04:57,100 --> 00:05:03,860
And then we have to specify the types of data that we're going to store in our database.

62
00:05:03,910 --> 00:05:13,870
So I'm going to store the name and the age of my users say the first variable we're going to store is

63
00:05:13,890 --> 00:05:14,620
name.

64
00:05:14,970 --> 00:05:21,920
And this is going to have a type of var chaw which is basically a string.

65
00:05:22,140 --> 00:05:26,500
It's a it's a string of characters char variables all put together.

66
00:05:26,730 --> 00:05:28,940
So basically it's another way of saying string.

67
00:05:29,760 --> 00:05:36,140
And then we can have a page which is going to be in.

68
00:05:36,370 --> 00:05:39,290
And we then have to specify the number of digits it.

69
00:05:39,850 --> 00:05:43,950
I'm assuming that's going to be no one in my database older than 999.

70
00:05:44,000 --> 00:05:46,720
So I think it 3 is quite safe.

71
00:05:48,480 --> 00:05:51,050
And then we're just closing that bracket there.

72
00:05:52,110 --> 00:05:57,470
So we're creating a table if it doesn't exist the table is called uses and it has two variables in its

73
00:05:57,690 --> 00:06:02,490
name and age name is Vachel which is basically a string.

74
00:06:02,790 --> 00:06:06,930
And age is an integer with three digits.

75
00:06:06,930 --> 00:06:13,770
Notice the capitalization then generally in Eskew Well we capitalize everything except for the specific

76
00:06:13,770 --> 00:06:20,820
names of tables databases and variables and that just makes it a little bit more readable.

77
00:06:20,820 --> 00:06:22,080
Believe it or not.

78
00:06:22,890 --> 00:06:27,590
But notice also that Android studio is not passing out as well.

79
00:06:27,600 --> 00:06:33,450
So you have to be a lot more careful than usual if you've got an era now as well then Android studio

80
00:06:33,450 --> 00:06:37,890
is not going to tell us and we won't find out until the app itself is actually run.

81
00:06:38,010 --> 00:06:41,550
And this Kemang just fails.

82
00:06:41,760 --> 00:06:44,730
OK so now hopefully we've got our table.

83
00:06:44,990 --> 00:06:55,410
So let's execute a nother skewl command and this one is going to insert some data into that table.

84
00:06:55,490 --> 00:06:58,660
So basically we're creating a user.

85
00:06:59,860 --> 00:07:07,130
So we're going to insert into uses and the variables that we're going to create for this user name and

86
00:07:07,190 --> 00:07:12,030
age and the values we're going to give to them.

87
00:07:12,830 --> 00:07:19,950
Rob and 34 just

88
00:07:23,920 --> 00:07:24,470
every hour

89
00:07:28,610 --> 00:07:31,750
so I notice that Rob has got the single

90
00:07:34,990 --> 00:07:37,670
quote around it to show that it's a string.

91
00:07:37,690 --> 00:07:40,390
We don't need that with the integer.

92
00:07:40,720 --> 00:07:46,120
So very quick challenge then can you create your own su l statement which inserts your own data into

93
00:07:46,120 --> 00:07:47,570
your database.

94
00:07:47,570 --> 00:07:54,590
Go for it.

95
00:07:54,600 --> 00:07:56,820
All right I'm sure you manage that.

96
00:07:56,910 --> 00:08:06,140
I'm just going to insert one more item so insert into the user's name.

97
00:08:06,180 --> 00:08:07,430
H.

98
00:08:09,440 --> 00:08:15,870
And then values and we'll have Tommy I'm sure he won't mind me telling you his age.

99
00:08:18,100 --> 00:08:18,910
There we go.

100
00:08:19,270 --> 00:08:26,340
There were two people in the database now each with a name and an age.

101
00:08:26,350 --> 00:08:28,690
Now it's time to get that data out of the database

102
00:08:31,700 --> 00:08:42,620
so to do that we use what's called a cursor object and we normally use C to represent the cursor and

103
00:08:42,620 --> 00:08:50,630
the cursor essentially allows us to loop through all of the results of a particular query and do something

104
00:08:50,630 --> 00:08:51,640
with them.

105
00:08:51,980 --> 00:08:55,310
So it will make more sense when we've got a query going.

106
00:08:55,970 --> 00:09:05,300
So my database dots and then we want a row query and again we're going to use them as fuel to run our

107
00:09:05,300 --> 00:09:06,080
query.

108
00:09:06,710 --> 00:09:18,570
And I'm just going to select everything from the database so you select store staff everything from

109
00:09:19,740 --> 00:09:21,270
uses.

110
00:09:21,500 --> 00:09:30,410
And then if we want we can have a signal or a method which will cancel the query while it's in progress.

111
00:09:30,410 --> 00:09:35,240
That's only really necessary if you're likely to have really big queries which we definitely don't hear.

112
00:09:35,300 --> 00:09:46,600
So we can just put no ok then we need to get the column indexes for name and age.

113
00:09:47,020 --> 00:09:53,440
And this is the main part that's different too if you've worked with as well on a web system for example

114
00:09:53,440 --> 00:09:58,910
with my ask you well you don't need to deal with column indexes but we do here.

115
00:09:59,800 --> 00:10:09,160
So what we'll do is creates an name index which is going to be the cursor.

116
00:10:09,160 --> 00:10:19,140
See to get column index and that's going to be the column index for the name column.

117
00:10:19,390 --> 00:10:24,090
And this just allows us to access those columns later on.

118
00:10:24,160 --> 00:10:33,960
Similarly we're going to use each index and let's see don't get column index and H.

119
00:10:36,570 --> 00:10:39,040
All right we're almost there.

120
00:10:40,720 --> 00:10:45,540
Next we take our cursor and we move to the first result.

121
00:10:48,300 --> 00:10:49,950
Which presumably is going to be

122
00:10:52,750 --> 00:11:02,840
then we keep going we keep looping through the results as long as see is not know.

123
00:11:03,060 --> 00:11:11,970
So if for example we didn't have these two lines in there and we run this card then C would be no right

124
00:11:11,970 --> 00:11:19,540
from the start because there's nothing in the Users table but we are expecting this to happen twice

125
00:11:20,110 --> 00:11:23,040
once for Rob and once for Tommy.

126
00:11:23,140 --> 00:11:29,240
So then we just want to get the content of that.

127
00:11:29,250 --> 00:11:39,170
So for now we'll log the name and we use Z for Kassa to get string.

128
00:11:39,210 --> 00:11:43,080
And notice again we need to specify the correct data type

129
00:11:46,100 --> 00:11:50,720
and we're going to get the string from fake name index

130
00:11:54,660 --> 00:12:00,070
OK very quick challenge then can you get the H and printed to the locks.

131
00:12:00,120 --> 00:12:00,400
For it

132
00:12:08,310 --> 00:12:10,490
I'm sure you manage that.

133
00:12:10,550 --> 00:12:13,610
So we're just going to log each and then see.

134
00:12:13,690 --> 00:12:16,870
I get it.

135
00:12:17,200 --> 00:12:22,130
And then page index that is of course an integer.

136
00:12:22,150 --> 00:12:33,060
So we need to convert it to a string using integer to string and then brackets around our code.

137
00:12:33,410 --> 00:12:37,130
And then finally we tell C to move onto the next

138
00:12:40,870 --> 00:12:41,740
result.

139
00:12:43,530 --> 00:12:52,020
And then that will loop round and round until it's all done and then it will stop and that's it.

140
00:12:52,620 --> 00:12:58,800
So in just under 10 minutes or so that we've done pretty well we've created our database we've created

141
00:12:58,800 --> 00:13:05,640
a table within that database inserted to users into it selected all the users from it and then got the

142
00:13:05,640 --> 00:13:14,130
indexes of the various columns in the table and then we have looped through all of the results and printed

143
00:13:14,130 --> 00:13:17,660
them to the logs.

144
00:13:17,730 --> 00:13:22,210
I shouldn't say that too confidently until we've actually done it.

145
00:13:23,640 --> 00:13:25,120
But I think we should be OK.

146
00:13:25,430 --> 00:13:27,790
So we'll run that on the emulator.

147
00:13:32,220 --> 00:13:38,300
But we don't really need to actually say emulator screen or we're interested in is the locks

148
00:13:44,350 --> 00:13:45,630
changed inside

149
00:13:54,050 --> 00:14:01,500
a lot of carry that lets just search for name first of all.

150
00:14:01,580 --> 00:14:06,830
And then we get you've got sporangia which is from a test I did earlier and then rob and Tony

151
00:14:09,460 --> 00:14:11,430
fantastic and then H.

152
00:14:13,350 --> 00:14:15,730
There we got 34 and full

153
00:14:19,650 --> 00:14:22,160
OK.

154
00:14:22,270 --> 00:14:23,970
So you probably know what's coming.

155
00:14:24,460 --> 00:14:29,920
I want you to preferably without looking at this although you probably need to look back once or twice

156
00:14:29,920 --> 00:14:32,280
especially if you haven't worked with as well before.

157
00:14:32,680 --> 00:14:40,150
I want you to create a database called events which will have the name of a historical event of some

158
00:14:40,150 --> 00:14:46,870
sort along with the year that it happened and then insert to historical events and get the details of

159
00:14:46,870 --> 00:14:49,320
them and put them to the logs.

160
00:14:49,330 --> 00:14:50,370
Simple as that.

161
00:14:50,410 --> 00:14:50,770
Go for

162
00:15:00,620 --> 00:15:01,130
OK.

163
00:15:01,240 --> 00:15:05,110
And you guys them so much the same as before.

164
00:15:05,120 --> 00:15:06,590
Just a little bit quicker.

165
00:15:06,670 --> 00:15:12,440
What creates How try and catch with an exception.

166
00:15:12,460 --> 00:15:19,430
He and then will print a stack trace.

167
00:15:19,470 --> 00:15:30,770
If something bad happens then we'll create as you like a database of cool events this time just to change

168
00:15:30,770 --> 00:15:39,190
things up a little bit and we'll create it from the app context or open or create database

169
00:15:41,710 --> 00:15:52,490
and we'll call it events private mode again and we won't have our lot or anything that

170
00:15:55,580 --> 00:15:57,700
then we'll execute some asks yourself old

171
00:16:00,960 --> 00:16:03,850
which will create a table.

172
00:16:04,800 --> 00:16:10,340
If it doesn't exist and that table will be events.

173
00:16:10,450 --> 00:16:15,360
Now once again don't be fooled into thinking the database names and table names are all the same.

174
00:16:15,360 --> 00:16:20,170
You might well have a big database and then lots of little tables within it.

175
00:16:20,330 --> 00:16:21,930
That's when things are very simple.

176
00:16:21,930 --> 00:16:26,230
Often the database name and the table name are very similar

177
00:16:30,910 --> 00:16:34,420
and we're going to have the event which is a natural

178
00:16:37,060 --> 00:16:40,870
and the year which isn't it.

179
00:16:41,050 --> 00:16:43,380
This time we're going to need four digits

180
00:16:46,310 --> 00:16:47,730
for obvious reasons.

181
00:16:50,660 --> 00:16:50,960
All right

182
00:16:53,960 --> 00:16:55,910
now let's execute some minuscule

183
00:16:59,290 --> 00:17:02,710
and we're going to insert into events

184
00:17:05,270 --> 00:17:08,160
event and.

185
00:17:11,910 --> 00:17:26,850
With the values I'm going to have end of World War 2 and 1945 mostly because it's one of the few historical

186
00:17:26,850 --> 00:17:27,990
dates that I actually know

187
00:17:31,930 --> 00:17:33,000
and then another one

188
00:17:35,990 --> 00:17:44,750
to insert into events and then event and your family's

189
00:17:49,820 --> 00:17:52,820
wham split up is what we're going to have this time.

190
00:17:52,820 --> 00:17:53,640
We don't know who I am.

191
00:17:53,750 --> 00:17:56,660
You must go and look them up.

192
00:17:56,660 --> 00:18:00,800
And it happened very sadly in 1986.

193
00:18:00,800 --> 00:18:04,630
And you can decide for yourself whether you think I had to look that data up.

194
00:18:04,640 --> 00:18:06,410
All right so now we've got our data in there.

195
00:18:06,680 --> 00:18:08,260
We now need to get it out.

196
00:18:08,840 --> 00:18:11,600
So we're going to create our cursor see

197
00:18:14,600 --> 00:18:16,850
who's going to be a real query.

198
00:18:19,830 --> 00:18:22,890
And again we're just going to select everything from

199
00:18:25,640 --> 00:18:26,470
the events table

200
00:18:29,490 --> 00:18:37,070
and we're not going to need to cancel that query while it's happening we can just put in all that then

201
00:18:37,650 --> 00:18:40,130
create our column indexes.

202
00:18:40,800 --> 00:18:54,180
So we've got event index which is going to be see don't get column index event and same for your index

203
00:18:55,670 --> 00:18:58,880
see get column index Yeah.

204
00:19:02,320 --> 00:19:15,210
And we'll move to the first result in the result set and we'll keep going as long as C is not know which

205
00:19:15,210 --> 00:19:16,580
will hopefully be twice

206
00:19:20,270 --> 00:19:22,310
and then more log.

207
00:19:22,310 --> 00:19:23,780
This time I'm going to put results

208
00:19:26,920 --> 00:19:30,180
event so that I can do a nice easy search for them.

209
00:19:32,940 --> 00:19:35,000
And then see get string

210
00:19:38,110 --> 00:19:39,600
eventa next.

211
00:19:42,550 --> 00:19:43,180
And

212
00:19:45,850 --> 00:19:48,420
of course results.

213
00:19:48,910 --> 00:19:50,780
Yeah.

214
00:19:51,220 --> 00:19:53,740
See it gets through.

215
00:19:54,210 --> 00:19:55,530
So you don't get it

216
00:19:57,890 --> 00:20:00,650
index.

217
00:20:00,900 --> 00:20:06,170
And we're going to convert that to a string in the usual way.

218
00:20:09,420 --> 00:20:10,610
There we go.

219
00:20:11,310 --> 00:20:12,090
All right.

220
00:20:12,090 --> 00:20:13,110
Fingers crossed.

221
00:20:15,810 --> 00:20:18,190
That should give us exactly

222
00:20:21,290 --> 00:20:22,850
the results that we want.

223
00:20:26,150 --> 00:20:28,150
So in a search for results this time

224
00:20:31,030 --> 00:20:32,130
nothing yet.

225
00:20:34,320 --> 00:20:36,300
Whoops looks like I do have an error.

226
00:20:36,300 --> 00:20:37,650
Did you spot it.

227
00:20:37,830 --> 00:20:38,610
Create table.

228
00:20:38,610 --> 00:20:40,600
If not exists.

229
00:20:41,100 --> 00:20:43,570
And actually while we're there I can see another one.

230
00:20:45,660 --> 00:20:48,150
We need to close those brackets there.

231
00:20:49,050 --> 00:20:55,850
So this is how easy it is to make mistakes with ask you could you get so used to the automatic error

232
00:20:55,850 --> 00:20:56,980
handling.

233
00:20:57,180 --> 00:20:58,810
All right.

234
00:20:59,700 --> 00:21:07,170
As another small mistake.

235
00:21:07,220 --> 00:21:13,990
Don't forget to move C to the next result.

236
00:21:14,600 --> 00:21:17,850
Otherwise your results will go on forever.

237
00:21:18,080 --> 00:21:20,070
And there we go.

238
00:21:20,210 --> 00:21:23,060
You can see I've got definitely more than two results there.

239
00:21:23,240 --> 00:21:28,280
That's because I ran it several times to fix my errors but that's fine.

240
00:21:28,280 --> 00:21:30,430
It is all at least working now.

241
00:21:32,180 --> 00:21:32,570
OK.

242
00:21:32,570 --> 00:21:37,690
So that's how you create a database create a table in it.

243
00:21:37,690 --> 00:21:42,120
If it doesn't exist in sets some data into it and then get the data out.

244
00:21:42,380 --> 00:21:45,090
So there's infinitely more that you can do with databases.

245
00:21:45,230 --> 00:21:50,810
And we're going to go into quite a bit more detail in the next video particularly with queries which

246
00:21:50,810 --> 00:21:55,190
are really powerful ways of extracting data from databases.

247
00:21:55,370 --> 00:21:55,980
So you the.
