1
00:00:00,900 --> 00:00:07,200
Something else that's pretty critical for watch to be able to do is send and receive information from

2
00:00:07,260 --> 00:00:09,090
the user's phone.

3
00:00:09,090 --> 00:00:14,400
Now what chaps generally are an extension of a phone app in some way so being able to send that data

4
00:00:14,400 --> 00:00:16,540
back and forth is pretty critical.

5
00:00:16,860 --> 00:00:21,020
Fortunately you don't have to worry about the bluetooth connection or anything like that.

6
00:00:21,060 --> 00:00:24,290
That's all managed for you by Android.

7
00:00:24,420 --> 00:00:30,490
You just need to write the code to send and receive the data changes.

8
00:00:30,540 --> 00:00:36,750
So let's create a new project to see how that works.

9
00:00:37,100 --> 00:00:39,550
Call it communicating with phone.

10
00:00:39,660 --> 00:00:48,070
Now this time we're going to create some code on both the phone and tablet and an Android Wear device.

11
00:00:48,180 --> 00:00:55,050
So we have a blank activity which is main activity and a blank where activity which is main activity

12
00:00:55,050 --> 00:00:57,940
as well.

13
00:00:57,950 --> 00:01:02,330
So once again we won't be able to get this actually working on the simulator unfortunately but I'll

14
00:01:02,330 --> 00:01:06,050
give you all the code and this will work straight off.

15
00:01:06,050 --> 00:01:08,600
Once you try it on real devices.

16
00:01:09,200 --> 00:01:09,590
All right.

17
00:01:09,590 --> 00:01:10,440
So here we go.

18
00:01:10,640 --> 00:01:15,810
You can see now we've got two sections of app the mobile section and the web section.

19
00:01:16,070 --> 00:01:18,180
Fairly obvious what they're for.

20
00:01:18,390 --> 00:01:24,960
We're going to be working in the main activity files of both.

21
00:01:26,480 --> 00:01:28,600
But this is a pretty reversible process.

22
00:01:28,610 --> 00:01:33,380
Anything that we run on the phone and could be on the watch and vice versa.

23
00:01:33,800 --> 00:01:41,720
So we'll start off on the watch or the Android Wear device imagining that we've got a user name that

24
00:01:41,720 --> 00:01:45,180
we want to pass to the user.

25
00:01:45,170 --> 00:01:49,380
So let's just get rid of this carry that we don't need.

26
00:01:49,730 --> 00:01:57,690
So let's say we've got a strong user name which is currently Rob.

27
00:01:58,340 --> 00:02:03,800
So say the user somehow is logged in on their watch and they are Rob and we want to communicate that

28
00:02:03,800 --> 00:02:07,730
fact to our phone app.

29
00:02:08,120 --> 00:02:17,270
What we would do is create a data map request which is just a way of passing data from the Android Wear

30
00:02:17,270 --> 00:02:21,120
device to the phone or tablet.

31
00:02:22,310 --> 00:02:32,180
And because we want to put some data we use I put data map request that puts data in that request and

32
00:02:32,180 --> 00:02:41,090
this is going to be a put statement request dot create and then we need a path where the data is going

33
00:02:41,090 --> 00:02:42,300
to be stored.

34
00:02:42,710 --> 00:02:46,790
I'm just going to put something doing something generic like Slash data.

35
00:02:47,240 --> 00:02:53,900
But if you were storing lots of data you might want to have a use a data folder and then an images folder

36
00:02:53,960 --> 00:02:57,050
or something like that to separate up your data.

37
00:02:57,920 --> 00:03:05,810
Then we take output data map request and get the data map from it and then on that data map we're going

38
00:03:05,810 --> 00:03:13,570
to put a strain on that string of course he's going to be using name

39
00:03:18,020 --> 00:03:26,400
and the key that we'll use for it is use name.

40
00:03:26,840 --> 00:03:32,990
So be saving Raub under the string username and you saw that there were all sorts of options to put

41
00:03:33,130 --> 00:03:35,760
the different variable types as well.

42
00:03:38,290 --> 00:03:42,250
Then we create a put data request

43
00:03:45,430 --> 00:03:46,840
call data request

44
00:03:49,940 --> 00:03:58,180
which will create with put data map request dot as put data request.

45
00:03:59,090 --> 00:04:06,110
So we've taken output data map request and we've converted it into a more generic put data request which

46
00:04:06,110 --> 00:04:08,580
is the format that we need to actually send it in.

47
00:04:08,990 --> 00:04:15,280
And then we create what's known as a pending result.

48
00:04:15,820 --> 00:04:24,490
And this is going to have a type of data API Daut data item results and that first

49
00:04:27,750 --> 00:04:35,380
which is a special class for transferring data between Android devices we'll call it pending result

50
00:04:36,330 --> 00:04:50,580
and it's going to be equal to wearable Dorte data API to put data item and we need to specify the client

51
00:04:50,580 --> 00:05:00,980
first which I haven't created yet so let's just create that it's just going to be a Google API client

52
00:05:02,910 --> 00:05:10,840
to call Google API client.

53
00:05:11,260 --> 00:05:17,440
So I will use Google API client and then they put data request

54
00:05:22,290 --> 00:05:22,630
OK.

55
00:05:22,640 --> 00:05:30,010
So I that more or less makes sense when setting up pending result equal to the outcome of this warbled

56
00:05:30,090 --> 00:05:39,110
data API put data item request so where essentially in this bit attempting to do the data request and

57
00:05:39,240 --> 00:05:45,330
we're setting pending results equal to whatever the result of that is.

58
00:05:45,680 --> 00:05:50,490
Now actually I think that pending result is of the wrong type.

59
00:05:50,490 --> 00:05:54,630
It's not broadcast receive it or pending result that we need.

60
00:05:54,630 --> 00:06:00,780
We need a stay pending results.

61
00:06:00,810 --> 00:06:03,960
Now you might be wondering how do we deal with this pending result.

62
00:06:03,960 --> 00:06:08,310
How do we get the output of that because it might take a while to be transferred back and forth if the

63
00:06:08,310 --> 00:06:09,990
phone is not connected for example.

64
00:06:10,440 --> 00:06:18,020
Well to do that we need to implement some classes here.

65
00:06:18,390 --> 00:06:34,490
And first off we've got data API Daut data listener and we've also got Google API client dot connection

66
00:06:34,490 --> 00:06:43,050
callbacks and Google API client dots on connection failt listener.

67
00:06:43,490 --> 00:06:51,850
So you can imagine all of these allow us to access or listen for events which would affect this pending

68
00:06:51,850 --> 00:06:53,080
result here.

69
00:06:54,190 --> 00:06:59,970
We're going to need some methods that get sued for methods

70
00:07:04,470 --> 00:07:08,180
and we're not going to go into these in great detail but it's fairly obvious what they do.

71
00:07:08,200 --> 00:07:15,090
So unconnected will be called when the connection between the Android Wear device and the phone happens

72
00:07:16,440 --> 00:07:22,740
on connections suspended will be called when that connection is broken on data changed will be called

73
00:07:22,800 --> 00:07:31,380
when this data request was successful on the phone and then on connection failed will be called if it

74
00:07:31,380 --> 00:07:34,500
didn't change for some reason and something went wrong.

75
00:07:35,280 --> 00:07:39,900
So that's how you process a data variable change from the Watch site.

76
00:07:39,960 --> 00:07:45,600
We have to do a similar thing to receive that data request on the phone.

77
00:07:46,080 --> 00:07:49,130
So let's now jump in and do that side of things.

78
00:07:49,230 --> 00:07:53,450
Once again we need the same classes.

79
00:07:53,550 --> 00:07:55,220
Here's I'm just going to copy that over

80
00:08:01,360 --> 00:08:13,980
to import those classes and then that will instruct us to implement all the methods.

81
00:08:14,560 --> 00:08:20,410
And then as before we create a Google API client

82
00:08:25,680 --> 00:08:32,280
to work with the data and the data transfer and then we'll set this up here.

83
00:08:32,760 --> 00:08:43,840
So this is going to be a new Google API client tot builder and we're building it within this context.

84
00:08:45,740 --> 00:08:54,160
And then we're going to set a few options we're going to add an API which is going to be the wearable

85
00:08:54,160 --> 00:08:55,260
API.

86
00:08:59,780 --> 00:09:05,480
We're going to add a connection callbacks which will allow us to listen for

87
00:09:08,530 --> 00:09:12,900
events like variables being changed.

88
00:09:13,040 --> 00:09:15,640
We're going to add on connection failed listener

89
00:09:18,370 --> 00:09:19,710
which is what it looks like.

90
00:09:19,900 --> 00:09:23,030
And then we're going to build it.

91
00:09:23,860 --> 00:09:27,010
So this allows us to manage all of that data.

92
00:09:27,190 --> 00:09:32,260
If you're wondering why we didn't create that at the other end that's because we've not set this up

93
00:09:32,260 --> 00:09:34,020
for receiving data.

94
00:09:34,030 --> 00:09:39,770
We've only set this up for sending data and when you've got sending data you don't need this Google

95
00:09:39,790 --> 00:09:41,870
API client set up in the same way.

96
00:09:42,100 --> 00:09:46,660
But if we wanted to receive data on the watch which you probably would because you're going to want

97
00:09:46,660 --> 00:09:53,060
to synchronize information between the phone and the watch then you would need to set up as well.

98
00:09:53,860 --> 00:09:59,560
OK so now we've created the Google API client everything else we actually do in these methods down here

99
00:09:59,560 --> 00:10:00,640
that we met before.

100
00:10:01,920 --> 00:10:04,460
So first off on connected.

101
00:10:05,610 --> 00:10:14,530
So once we connect from the phone to the Android device we add our listener and we do that using wearable

102
00:10:14,850 --> 00:10:18,430
data API docs add listener.

103
00:10:19,650 --> 00:10:30,960
And they listen to that we use the Google API client and then we're using the main activity when we've

104
00:10:30,960 --> 00:10:32,210
added Our listener.

105
00:10:32,430 --> 00:10:36,650
We don't need to do anything in particular on connection suspended but we might want to remove the listener

106
00:10:37,140 --> 00:10:37,650
if we

107
00:10:40,410 --> 00:10:41,150
wanted to.

108
00:10:41,340 --> 00:10:44,300
Although will likely happen automatically.

109
00:10:44,340 --> 00:10:51,000
The important method for us is this on data changed method which will be called when an item of data

110
00:10:51,000 --> 00:10:52,390
is changed.

111
00:10:52,410 --> 00:10:55,280
So how do we get that information on our phone.

112
00:10:55,710 --> 00:10:59,530
Well you got a thing called the Data event buffer.

113
00:10:59,790 --> 00:11:02,230
So that's where all our data is contained.

114
00:11:02,490 --> 00:11:04,160
So let's loop through it.

115
00:11:08,990 --> 00:11:16,790
It contains a bunch of data events which we'll call each of which will call event

116
00:11:24,010 --> 00:11:24,480
like that.

117
00:11:24,520 --> 00:11:27,680
And we're particularly interested in where the data has changed.

118
00:11:27,690 --> 00:11:43,000
So we'll check to see if event dot net type is equal to a data event type changed which means that if

119
00:11:43,000 --> 00:11:48,490
this event that we're looking at here is a change of data which is what we want then we want to get

120
00:11:48,490 --> 00:11:50,830
the information.

121
00:11:51,320 --> 00:12:05,990
So it will create a data item called lightsome which will get from event get data item and then we'll

122
00:12:05,990 --> 00:12:10,440
check to see if item.

123
00:12:10,490 --> 00:12:20,340
And then we want get you are I which is the location of the item and then the path which is the precise

124
00:12:20,340 --> 00:12:24,680
location of the item and then we want to compare that to

125
00:12:31,660 --> 00:12:38,980
and then we want to make that equal to the path that we set over here which will slash data

126
00:12:45,130 --> 00:12:55,440
and that compared to method here returns a zero if it is the same.

127
00:12:56,200 --> 00:13:00,910
Say if this is the case and the item is changed in the path that we're particularly interested in and

128
00:13:00,910 --> 00:13:05,170
this is where paths might become useful because you might want to do slightly different things depending

129
00:13:05,170 --> 00:13:07,510
on what type of data has changed.

130
00:13:07,540 --> 00:13:10,710
So that's where the path would fit into that.

131
00:13:10,720 --> 00:13:17,470
So if this is the case we want to extract the data that we've got and we do that using data map

132
00:13:20,540 --> 00:13:31,420
to create a data map and we get the data map item from the data write him and the data item.

133
00:13:31,490 --> 00:13:36,530
So we're going to get it from is item which remember we got from event which we got from the data event

134
00:13:36,530 --> 00:13:38,990
buffer when the data was changed.

135
00:13:42,110 --> 00:13:43,840
And we want to get a data map

136
00:13:47,500 --> 00:13:48,840
that's it.

137
00:13:48,850 --> 00:13:54,290
Then the very specific item that we want is the user 9.

138
00:13:54,540 --> 00:14:01,960
And we would get that from data map get and then which is our variable type.

139
00:14:02,040 --> 00:14:03,490
We want to string here.

140
00:14:03,990 --> 00:14:10,110
And we want the user name string.

141
00:14:10,420 --> 00:14:16,550
And then finally do something with username.

142
00:14:17,620 --> 00:14:24,470
So if we want to change something in our app now that the user name has been changed we could do that

143
00:14:24,550 --> 00:14:28,410
back but that's basically it.

144
00:14:28,440 --> 00:14:35,310
So what we've done that is on the wearable device we've taken the use of the string rope and we've saved

145
00:14:35,310 --> 00:14:46,110
it as a potato request and then we've received it on the other end using on data changed.

146
00:14:46,110 --> 00:14:50,730
Similarly if you wanted to change something on the phone then you would just use this code on the phone

147
00:14:51,440 --> 00:14:55,900
and this code on the wearable device and that's it.

148
00:14:56,040 --> 00:14:59,660
As I say I can't run it on a simulator or at least if I do it won't do anything.

149
00:14:59,880 --> 00:15:04,730
But that's how you work with data and transferring it between the watch and the phone.

150
00:15:05,280 --> 00:15:08,730
And now we're almost there with our tour of Android web.

151
00:15:08,850 --> 00:15:13,800
But we've got a couple of more things that I want to show you first and the first of those is another

152
00:15:13,890 --> 00:15:18,040
important aspect of Android Wear and that is notifications.
