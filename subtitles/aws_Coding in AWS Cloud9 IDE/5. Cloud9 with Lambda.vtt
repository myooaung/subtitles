WEBVTT
1
00:00:00.980 --> 00:00:04.840
The last service mentioned before is AWS Lambda.

2
00:00:04.840 --> 00:00:06.710
If you've used AWS before,

3
00:00:06.710 --> 00:00:10.470
you're likely familiar with Lambda because it's one of AWS's mostâ€‘used

4
00:00:10.470 --> 00:00:16.310
offerings. In AWS Lambda, you can create code without having to provision

5
00:00:16.310 --> 00:00:19.720
or do the administration of physical servers.

6
00:00:19.720 --> 00:00:23.550
This concept is called serverless because as a user,

7
00:00:23.550 --> 00:00:28.550
you aren't responsible for provisioning or maintaining virtual servers.

8
00:00:28.550 --> 00:00:29.970
In AWS Lambda,

9
00:00:29.970 --> 00:00:34.730
AWS takes care of all the scaling and highly available features to

10
00:00:34.730 --> 00:00:38.720
make sure that Lambda functions are fully usable and you only pay

11
00:00:38.720 --> 00:00:42.130
for the compute time that you consume.

12
00:00:42.130 --> 00:00:44.020
Lambda functions, when executed,

13
00:00:44.020 --> 00:00:47.330
provision a server behind the scenes to run your code,

14
00:00:47.330 --> 00:00:52.200
and then they automatically get decommissioned after a specified time period.

15
00:00:52.200 --> 00:00:56.080
This is a powerful concept because as a user of AWS,

16
00:00:56.080 --> 00:00:59.980
you're only paying for resources as your application is using them,

17
00:00:59.980 --> 00:01:02.680
and you're not paying for anything when your application is

18
00:01:02.680 --> 00:01:07.640
idle or doesn't have any active users.

19
00:01:07.640 --> 00:01:13.440
AWS Lambda is my personal favorite service to use in conjunction with Cloud9.

20
00:01:13.440 --> 00:01:15.120
In the AWS dashboard,

21
00:01:15.120 --> 00:01:20.370
you can access Cloud9 to write code for a lambda function. Then, your

22
00:01:20.370 --> 00:01:25.500
lambda function can be accessed or invoked via a REST API when it is

23
00:01:25.500 --> 00:01:28.540
linked to a service called API Gateway.

24
00:01:28.540 --> 00:01:32.040
When an API Gateway REST endpoint is called, either

25
00:01:32.040 --> 00:01:34.480
by a user or by an application,

26
00:01:34.480 --> 00:01:38.970
it can invoke a lambda function that will be executed on a temporary server

27
00:01:38.970 --> 00:01:44.340
that AWS automatically provisions for the lambda function.

28
00:01:44.340 --> 00:01:48.270
If you have lambda functions that need to be invoked by web applications,

29
00:01:48.270 --> 00:01:51.190
native apps, or external services,

30
00:01:51.190 --> 00:01:55.980
creating an API Gateway with this setup is usually the way to go.

31
00:01:55.980 --> 00:01:59.840
The main reason I love using Cloud9 with lambda functions is that you

32
00:01:59.840 --> 00:02:04.220
can write, edit, and actually have live debugging sessions of your

33
00:02:04.220 --> 00:02:09.530
lambda functions directly in the AWS console. Linking Lambda with

34
00:02:09.530 --> 00:02:13.740
Cloud9 really accelerates the development of lambda functions by

35
00:02:13.740 --> 00:02:21.000
leveraging all of the key Cloud9 IDE features we've highlighted earlier in this course.

