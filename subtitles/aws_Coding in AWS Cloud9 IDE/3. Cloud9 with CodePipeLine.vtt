WEBVTT
1
00:00:01.040 --> 00:00:04.020
CodePipeline is an AWS service for continuous

2
00:00:04.020 --> 00:00:07.020
delivery of solutions in the cloud.

3
00:00:07.020 --> 00:00:08.160
With CodePipeline,

4
00:00:08.160 --> 00:00:11.580
you can visually model the automated processes that release

5
00:00:11.580 --> 00:00:14.340
software changes to your environments.

6
00:00:14.340 --> 00:00:18.870
CodePipeline connects to source control repositories of your application,

7
00:00:18.870 --> 00:00:25.120
such as CodeCommit, Git, and S3. CodeCommit, if you're unfamiliar with it,

8
00:00:25.120 --> 00:00:29.240
is AWS's fully managed source control service.

9
00:00:29.240 --> 00:00:34.710
CodeCommit hosts Git‑based repositories in AWS and can be easily integrated

10
00:00:34.710 --> 00:00:39.340
with CodePipeline for automated deployment of code updates.

11
00:00:39.340 --> 00:00:44.390
Cloud9 and CodePipeline can be used together, as Cloud9 can be connected to

12
00:00:44.390 --> 00:00:48.540
your repository and be used to make updates to your code base.

13
00:00:48.540 --> 00:00:52.100
CodePipeline is also connected to your code repository, and

14
00:00:52.100 --> 00:00:54.860
then it can be used to automate the release processes

15
00:00:54.860 --> 00:00:57.990
required when making new updates.

16
00:00:57.990 --> 00:01:00.680
CodePipeline can be triggered to release changes

17
00:01:00.680 --> 00:01:04.940
automatically or manually when code changes are made.

18
00:01:04.940 --> 00:01:08.690
With CodePipeline, you can configure automated testing,

19
00:01:08.690 --> 00:01:13.640
building, and deploying of applications immediately when a CodeCommit‑based

20
00:01:13.640 --> 00:01:19.300
change is made. A common practice is to have CodePipeline configured so that

21
00:01:19.300 --> 00:01:23.430
development or test environments automatically have changes released to them

22
00:01:23.430 --> 00:01:29.130
when updates are made. Then, a manual approval is required to push the new

23
00:01:29.130 --> 00:01:31.730
changes to the production environment.

24
00:01:31.730 --> 00:01:33.120
By using CodePipeline,

25
00:01:33.120 --> 00:01:37.160
you can easily model and visualize this setup simplistically with a

26
00:01:37.160 --> 00:01:41.570
continuous release chain. With Cloud9 and CodePipeline, you can

27
00:01:41.570 --> 00:01:46.160
develop cloud‑native solutions with continuous delivery chains all

28
00:01:46.160 --> 00:01:49.440
directly in the AWS console.

29
00:01:49.440 --> 00:01:52.440
From your computer, you can access Cloud9 to read,

30
00:01:52.440 --> 00:01:56.340
write, and debug your code, as we've shown before.

31
00:01:56.340 --> 00:02:00.380
Then, you can link Cloud9 with CodeCommit so that you can push new code

32
00:02:00.380 --> 00:02:05.440
updates directly to your Git‑based repository hosted in AWS.

33
00:02:05.440 --> 00:02:08.950
Your continuous delivery chain can be configured such that when

34
00:02:08.950 --> 00:02:11.770
updates are made to your CodeCommit repository,

35
00:02:11.770 --> 00:02:14.840
it automatically triggers an application build.

36
00:02:14.840 --> 00:02:16.710
After the application is built,

37
00:02:16.710 --> 00:02:21.240
automated tests can be run to ensure the quality of the new application.

38
00:02:21.240 --> 00:02:25.720
The automated building and testing of software in AWS can be easily

39
00:02:25.720 --> 00:02:30.740
done with another AWS service called CodeBuild.

40
00:02:30.740 --> 00:02:33.150
Once our code has been built and tested,

41
00:02:33.150 --> 00:02:37.540
another AWS service can be used to automatically release our updates

42
00:02:37.540 --> 00:02:41.720
to a variety of AWS compute services, such as EC2,

43
00:02:41.720 --> 00:02:44.590
or even to our on‑premise servers.

44
00:02:44.590 --> 00:02:49.930
This AWS service is called CodeDeploy. Looking at our entire

45
00:02:49.930 --> 00:02:52.930
continuous delivery chain, this is modeled,

46
00:02:52.930 --> 00:02:59.670
created, and visualized by using CodePipeline directly in our AWS console.

47
00:02:59.670 --> 00:03:04.200
CodePipeline basically is orchestrating the automated deployment, testing,

48
00:03:04.200 --> 00:03:11.320
and building of AWS solutions by using other AWS services.

49
00:03:11.320 --> 00:03:15.540
That can sound a little confusing, but let me try and explain it more concisely.

50
00:03:15.540 --> 00:03:18.350
I would say that you can use Cloud9 to read,

51
00:03:18.350 --> 00:03:23.700
write, and debug your code, and then use CodePipeline to automate the building,

52
00:03:23.700 --> 00:03:26.600
testing, and releasing of it.

53
00:03:26.600 --> 00:03:31.480
CodePipeline is basically an orchestrator of other AWS services

54
00:03:31.480 --> 00:03:39.000
that makes the entire continuous delivery pipeline easily visualized and modeled in the AWS console.

