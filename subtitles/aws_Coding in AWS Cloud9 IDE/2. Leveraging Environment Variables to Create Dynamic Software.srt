1
00:00:01,040 --> 00:00:04,250
The next concept we are going to introduce is environment

2
00:00:04,250 --> 00:00:08,700
variables. Environment variables are named values that are dynamic

3
00:00:08,700 --> 00:00:11,940
and change the way a program is executed.

4
00:00:11,940 --> 00:00:14,520
Environment variables are commonly used in enterprise

5
00:00:14,520 --> 00:00:17,790
systems to create more dynamic applications.

6
00:00:17,790 --> 00:00:21,730
It's important to have a solid understanding of what environment variables are

7
00:00:21,730 --> 00:00:25,410
and how to use them if you're going to create applications in an enterprise

8
00:00:25,410 --> 00:00:30,740
environment. Let's take a quick look at what a standard web application might

9
00:00:30,740 --> 00:00:36,360
look like. A user connects to a website via a URL, which is hosted via content

10
00:00:36,360 --> 00:00:39,040
delivery network, or CDN.

11
00:00:39,040 --> 00:00:43,220
In AWS, this would be a service called CloudFront. The CDN is

12
00:00:43,220 --> 00:00:46,430
synced within object storage to reduce latency and provide a

13
00:00:46,430 --> 00:00:48,940
more widely available website.

14
00:00:48,940 --> 00:00:52,940
The objects stored holds compiled website code and static assets,

15
00:00:52,940 --> 00:00:55,340
which are then served through the CDN and loaded

16
00:00:55,340 --> 00:00:57,540
directly onto the user's browser.

17
00:00:57,540 --> 00:01:00,520
This type of system for a front‑end application is how a

18
00:01:00,520 --> 00:01:03,140
lot of modern websites work today.

19
00:01:03,140 --> 00:01:06,240
In order for the application to grab live data,

20
00:01:06,240 --> 00:01:11,490
the website uses REST APIs to communicate with the backend web server.

21
00:01:11,490 --> 00:01:14,750
This concept works well when a website needs to point to the exact

22
00:01:14,750 --> 00:01:18,430
same backend server every time, but what if we have the same

23
00:01:18,430 --> 00:01:21,010
application that has multiple environments,

24
00:01:21,010 --> 00:01:24,200
for example, a test and production environment?

25
00:01:24,200 --> 00:01:25,530
In this situation,

26
00:01:25,530 --> 00:01:28,230
how would our front‑end know if it was supposed to hit

27
00:01:28,230 --> 00:01:31,640
either the test or production backend server, depending on

28
00:01:31,640 --> 00:01:34,280
which environment it was running on?

29
00:01:34,280 --> 00:01:38,240
This issue is commonly solved with environment variables.

30
00:01:38,240 --> 00:01:39,640
For this example,

31
00:01:39,640 --> 00:01:44,480
our website contained an environment variable called BACKEND_API, r something

32
00:01:44,480 --> 00:01:49,250
similar, that could be updated dynamically to contain the location of either

33
00:01:49,250 --> 00:01:53,030
the test or production backend server endpoint.

34
00:01:53,030 --> 00:01:56,120
This enables us to have the exact same code build for

35
00:01:56,120 --> 00:01:59,850
multiple environments that execute differently due to the

36
00:01:59,850 --> 00:02:03,540
environment variable set within them.

37
00:02:03,540 --> 00:02:06,380
So once our website has hit our backend server, the

38
00:02:06,380 --> 00:02:09,420
backend will process our business logic and gather or

39
00:02:09,420 --> 00:02:13,040
update information from a database.

40
00:02:13,040 --> 00:02:15,880
We've yet again encountered an environment variable problem,

41
00:02:15,880 --> 00:02:19,700
as we will likely need to have different database connections for both our

42
00:02:19,700 --> 00:02:23,950
production and test environments. In this use case, our backend could have an

43
00:02:23,950 --> 00:02:28,750
environment variable called DATABASE_CONNECTION, or something similar, that can

44
00:02:28,750 --> 00:02:33,390
dynamically serve the backend proper information to connect to the database

45
00:02:33,390 --> 00:02:36,300
that's specific to the environment.

46
00:02:36,300 --> 00:02:37,520
This is fairly high‑level,

47
00:02:37,520 --> 00:02:40,970
but this is a common example of how an enterprise application

48
00:02:40,970 --> 00:02:48,000
can leverage environment variables to control execution of a dynamic three‑tiered application.

