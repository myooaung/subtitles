WEBVTT
1
00:00:01.040 --> 00:00:04.840
Time to dive back into the AWS Cloud9 IDE.

2
00:00:04.840 --> 00:00:07.730
This go‑around, we are going to integrate a Git project with

3
00:00:07.730 --> 00:00:10.840
Cloud9 and highlight some of Cloud9's features that are

4
00:00:10.840 --> 00:00:13.740
useful for larger scale projects.

5
00:00:13.740 --> 00:00:16.400
Now that we're back in the Cloud9 console,

6
00:00:16.400 --> 00:00:19.900
the first thing we are going to do is integrate a Git project to pull

7
00:00:19.900 --> 00:00:24.110
external source code from a Git repository into our local Cloud9

8
00:00:24.110 --> 00:00:29.640
environment. In the Cloud9 general starting page, there is a quick link

9
00:00:29.640 --> 00:00:34.820
to Clone from GitHub, so let's select that. So we can see this

10
00:00:34.820 --> 00:00:38.970
automatically initiates a bash terminal session for us with the git

11
00:00:38.970 --> 00:00:41.340
clone command auto‑populated.

12
00:00:41.340 --> 00:00:41.980
From here,

13
00:00:41.980 --> 00:00:44.620
we just need to plop in the URL for our Git environment that

14
00:00:44.620 --> 00:00:47.840
we want to clone into our Cloud9 session.

15
00:00:47.840 --> 00:00:51.130
I've created a single Git project for use of this course,

16
00:00:51.130 --> 00:00:54.740
and I'll insert that URL here for a quick demo.

17
00:00:54.740 --> 00:00:55.990
Now that I pressed Enter,

18
00:00:55.990 --> 00:01:00.020
we can see that the Git project is downloaded and we now have a

19
00:01:00.020 --> 00:01:04.370
Pluralsight‑Cloud9Demo folder in our working directory with our new

20
00:01:04.370 --> 00:01:09.090
project downloaded. When developing with Cloud9 using Git,

21
00:01:09.090 --> 00:01:11.930
you can leave this terminal open and then later use it to

22
00:01:11.930 --> 00:01:14.440
commit code updates to your Git project.

23
00:01:14.440 --> 00:01:18.210
However, since I'm only using it to clone an environment for this demonstration,

24
00:01:18.210 --> 00:01:21.270
I'm going to go ahead and close it out.

25
00:01:21.270 --> 00:01:25.100
Now let's open up the index.js file from our project,

26
00:01:25.100 --> 00:01:29.570
which in the Node.js world is the first file that gets executed by default.

27
00:01:29.570 --> 00:01:31.640
We have 21 lines of code here,

28
00:01:31.640 --> 00:01:35.940
so let's break this down to dissect what this code snippet is actually doing.

29
00:01:35.940 --> 00:01:39.840
We have an execute function defined in the body of our file,

30
00:01:39.840 --> 00:01:44.210
and then we can see that on line 21 that this execute function is called so

31
00:01:44.210 --> 00:01:49.120
that it will execute when our index.js file is ran. At the top of our

32
00:01:49.120 --> 00:01:52.910
program, we are importing in three different files which contain player

33
00:01:52.910 --> 00:01:56.740
rosters of Dallas professional sports teams.

34
00:01:56.740 --> 00:01:59.760
So let's say we want to view one of our imported files to see what

35
00:01:59.760 --> 00:02:03.630
code it contains. We can use the File Explorer on the left‑hand side

36
00:02:03.630 --> 00:02:08.310
of our screen to select the dallasMavericks.js file and then drag it

37
00:02:08.310 --> 00:02:17.610
into our Cloud9 IDE. Our dallasMavericks.js file is open as a new tab

38
00:02:17.610 --> 00:02:19.740
within our primary pane.

39
00:02:19.740 --> 00:02:23.840
If we want to view this and the index.js file at the same time,

40
00:02:23.840 --> 00:02:28.370
we can grab our dallasMavericks.js tab and drag it in one direction

41
00:02:28.370 --> 00:02:32.540
or the other to create a new pane within Cloud9.

42
00:02:32.540 --> 00:02:34.760
We now have two different panes,

43
00:02:34.760 --> 00:02:38.300
one that contains the index.js file and the one on the right

44
00:02:38.300 --> 00:02:41.240
containing our dallasMavericks.js file.

45
00:02:41.240 --> 00:02:45.100
We can arbitrarily drag multiple files in this same method to

46
00:02:45.100 --> 00:02:50.720
create an arbitrary configuration of visual panes.

47
00:02:50.720 --> 00:02:54.090
So now that we have both files visible and easy for reference,

48
00:02:54.090 --> 00:02:56.540
let's take a look at what this code is doing.

49
00:02:56.540 --> 00:03:01.640
So on the left‑hand side, let's take a look at the index.js execute command.

50
00:03:01.640 --> 00:03:05.490
The first thing our execute function does is on line 5 it grabs the

51
00:03:05.490 --> 00:03:10.040
value from an environment variable named CURRENT_TEAM.

52
00:03:10.040 --> 00:03:10.590
Now,

53
00:03:10.590 --> 00:03:13.630
if you remember from our graphic earlier, environment variables are

54
00:03:13.630 --> 00:03:17.240
used to dynamically change the execution of a program.

55
00:03:17.240 --> 00:03:18.280
So in this case,

56
00:03:18.280 --> 00:03:22.210
we can see that the current team environment variable value is grabbed

57
00:03:22.210 --> 00:03:25.730
and then used in a switch statement to determine which external file is

58
00:03:25.730 --> 00:03:31.130
called. In the case our environment variable has the value Mavericks, our

59
00:03:31.130 --> 00:03:35.310
switch statement would run the getPlayerRoster function from our external

60
00:03:35.310 --> 00:03:36.850
dallasMavericks file,

61
00:03:36.850 --> 00:03:39.120
which we currently have open in our right‑hand pane. Our

62
00:03:39.120 --> 00:03:43.840
getPlayerRoster function is fairly straightforward.

63
00:03:43.840 --> 00:03:44.700
Essentially,

64
00:03:44.700 --> 00:03:49.510
it just returns a hard‑coded array of values that contain the name and number of

65
00:03:49.510 --> 00:03:53.840
several players from the Dallas Mavericks basketball team.

66
00:03:53.840 --> 00:03:57.610
It looks like our execute function can actually call one of three different

67
00:03:57.610 --> 00:04:01.470
external files, so let's go ahead and open up the other two so we can see

68
00:04:01.470 --> 00:04:06.070
what they look like. Again, by dragging the file by name on our left‑hand

69
00:04:06.070 --> 00:04:08.320
File Explorer into our Cloud9 editor,

70
00:04:08.320 --> 00:04:15.030
we can place it into an existing pane or arbitrarily create a new one.

71
00:04:15.030 --> 00:04:19.110
If we place our dallasStars and dallasCowboy files in our right‑hand pane,

72
00:04:19.110 --> 00:04:22.730
we can see that we have three tabs within that pane that represent

73
00:04:22.730 --> 00:04:27.140
all of our files imported by the index.js file.

74
00:04:27.140 --> 00:04:30.400
Now that we have a pretty basic understanding of what this code does

75
00:04:30.400 --> 00:04:35.220
and how we can arbitrarily set up panes and tabs within Cloud9, let's

76
00:04:35.220 --> 00:04:39.990
go ahead and use the Play button to run this code. Quickly we can see

77
00:04:39.990 --> 00:04:43.300
that we have an output in our terminal window that says no environment

78
00:04:43.300 --> 00:04:45.040
variable specified.

79
00:04:45.040 --> 00:04:48.460
So it's fairly obvious based on this error message that we don't have a

80
00:04:48.460 --> 00:04:52.710
current team environment variable set in this environment.

81
00:04:52.710 --> 00:04:56.340
A quick glance at our execute commands in our index.js file

82
00:04:56.340 --> 00:04:59.120
shows that if our current team environment variable is not set

83
00:04:59.120 --> 00:05:01.190
to one of the three accepted values,

84
00:05:01.190 --> 00:05:04.160
it will hit the default, setting in the switch statement,

85
00:05:04.160 --> 00:05:08.480
which will basically output no environment very well‑specified to our console,

86
00:05:08.480 --> 00:05:11.240
which is the message we are seeing.

87
00:05:11.240 --> 00:05:14.330
So let's go ahead and set our current team environment variable

88
00:05:14.330 --> 00:05:17.640
to get this up and running properly. In the bottom of our

89
00:05:17.640 --> 00:05:22.540
screen where our program output is, we have our run configuration displayed.

90
00:05:22.540 --> 00:05:24.420
If we select the ENV button,

91
00:05:24.420 --> 00:05:28.540
we can pull up a quick environment variables Quick Access menu.

92
00:05:28.540 --> 00:05:31.410
Here we can type a name and value of an environment

93
00:05:31.410 --> 00:05:34.640
variable to add it to this run configuration.

94
00:05:34.640 --> 00:05:37.940
I'm going to add the CURRENT_TEAM environment variable with

95
00:05:37.940 --> 00:05:41.660
the value of mavericks to our run configuration here, so the

96
00:05:41.660 --> 00:05:43.480
next time we execute our program,

97
00:05:43.480 --> 00:05:47.780
it will be available. With our environment variable set up and ready to go,

98
00:05:47.780 --> 00:05:52.000
let's run this program one more time. And boom, we can quickly see that now

99
00:05:52.000 --> 00:05:56.030
that our program execution had an environment variable available that it

100
00:05:56.030 --> 00:05:59.310
outputted the roster of the Dallas Mavericks.

101
00:05:59.310 --> 00:06:02.570
Let's go ahead and try changing our variable to get a different team roster

102
00:06:02.570 --> 00:06:06.420
on our next execution. If we update the run configuration environment

103
00:06:06.420 --> 00:06:09.960
variable to a new value of cowboys and hit Run,

104
00:06:09.960 --> 00:06:15.740
we can see that we now get the values from our dallasCowboys.js file.

105
00:06:15.740 --> 00:06:18.040
If we wanted to debug this session,

106
00:06:18.040 --> 00:06:21.280
we could click a line number in our gutter, as we did in the previous

107
00:06:21.280 --> 00:06:25.760
demo, and then rerun our debug configuration to pause the execution on

108
00:06:25.760 --> 00:06:29.550
that specific line. For a quick demo, let's go ahead and put a

109
00:06:29.550 --> 00:06:40.640
breakpoint on line 5 and 6 to rerun this.

110
00:06:40.640 --> 00:06:44.830
Now that our program has ceased execution on line number 5, a useful tool

111
00:06:44.830 --> 00:06:48.440
within Cloud9 we mentioned earlier is the Immediate window,

112
00:06:48.440 --> 00:06:51.020
which basically allows us to quickly run code

113
00:06:51.020 --> 00:06:53.640
snippets within our current environment.

114
00:06:53.640 --> 00:06:57.370
We can select the Immediate button on the bottom right of our screen to

115
00:06:57.370 --> 00:07:02.170
pull up the Immediate window into the bottom of our screen. On line 5 of

116
00:07:02.170 --> 00:07:06.820
our code, we can see that we use the process.env command to access

117
00:07:06.820 --> 00:07:09.240
environment variables in our system,

118
00:07:09.240 --> 00:07:13.340
which this is the default method within Node.js to access environment

119
00:07:13.340 --> 00:07:18.070
variables. Depending on the programming language you're using, the syntax

120
00:07:18.070 --> 00:07:20.490
for grabbing environment variables will vary some,

121
00:07:20.490 --> 00:07:25.120
but essentially the concept will be the same. In the Immediate window, we can

122
00:07:25.120 --> 00:07:29.900
type process.env and press Enter to view the current value of all of our

123
00:07:29.900 --> 00:07:34.280
environment variables within our current running session. You can see that a

124
00:07:34.280 --> 00:07:38.430
lot of environment variables are created by default that contain metadata

125
00:07:38.430 --> 00:07:41.540
related to our current running environment.

126
00:07:41.540 --> 00:07:45.630
I often use the Immediate window when debugging if I want to run quick code

127
00:07:45.630 --> 00:07:50.070
snippets or view specific properties and variable data specific to my

128
00:07:50.070 --> 00:07:53.810
running environment that aren't clearly visible based on my current

129
00:07:53.810 --> 00:07:58.670
debugging setup or active panes. I recommend using the Immediate window

130
00:07:58.670 --> 00:08:00.770
whenever the opportunity presents itself,

131
00:08:00.770 --> 00:08:05.520
as it can be a quick way to run code within your executing environment.

132
00:08:05.520 --> 00:08:07.360
If we look back at our debugger,

133
00:08:07.360 --> 00:08:10.730
we can select the Step Over debugging option to continue

134
00:08:10.730 --> 00:08:14.240
execution within this current file.

135
00:08:14.240 --> 00:08:15.750
Now that we're in a switch statement,

136
00:08:15.750 --> 00:08:19.870
we can see that using the Step Over command has taken us to line 14,

137
00:08:19.870 --> 00:08:24.090
where the Cowboys PlayerRoster function is called.

138
00:08:24.090 --> 00:08:26.710
Since we know this is calling an external function,

139
00:08:26.710 --> 00:08:30.810
let's review the debugging options that we have available to us.

140
00:08:30.810 --> 00:08:35.420
Pressing the Continue Play button would execute the program until completion,

141
00:08:35.420 --> 00:08:38.430
since no other breakpoints would be hit.

142
00:08:38.430 --> 00:08:41.470
Selecting the Step Over command would take us to the next

143
00:08:41.470 --> 00:08:45.300
line of execution within the current file.

144
00:08:45.300 --> 00:08:48.230
And if we use the Step Into command,

145
00:08:48.230 --> 00:08:51.030
we would take us to the getPlayerRoster function

146
00:08:51.030 --> 00:08:54.520
within our imported dallasCowboys file.

147
00:08:54.520 --> 00:08:56.710
Since we haven't tested it out before,

148
00:08:56.710 --> 00:09:00.430
I'm going to go ahead and select the Step Into command to take us inside the

149
00:09:00.430 --> 00:09:06.380
Cowboys getPlayerRoster function. We can see in our active execution that we're

150
00:09:06.380 --> 00:09:11.700
now in the dallasCowboys.js file, and we can see the hard‑coded player array

151
00:09:11.700 --> 00:09:15.110
that is going to be returned by the function.

152
00:09:15.110 --> 00:09:17.450
This is a good opportunity for us to test the Step

153
00:09:17.450 --> 00:09:20.040
Out of debugger command in Cloud9.

154
00:09:20.040 --> 00:09:21.430
If we remember from earlier,

155
00:09:21.430 --> 00:09:24.900
the Step Out of command will take us up one level within our

156
00:09:24.900 --> 00:09:28.690
current call stack. When debugging in Cloud9,

157
00:09:28.690 --> 00:09:32.210
you can easily view the active call stack list by referring to the

158
00:09:32.210 --> 00:09:37.040
right‑hand debug windowpane. We can see that our active function,

159
00:09:37.040 --> 00:09:40.740
getPlayerRoster, is at the top of our call stack,

160
00:09:40.740 --> 00:09:46.340
and directly beneath it is our execute function from our index.js file.

161
00:09:46.340 --> 00:09:49.440
Selecting the Step Out command would step out of our current

162
00:09:49.440 --> 00:09:53.140
function and go up one level down the call stack.

163
00:09:53.140 --> 00:09:54.870
When you select the Step Out button here,

164
00:09:54.870 --> 00:09:58.340
we can see that it takes us back to the index.js file,

165
00:09:58.340 --> 00:10:02.640
which outputs the results of the getPlayerRoster function.

166
00:10:02.640 --> 00:10:04.070
With this simple example,

167
00:10:04.070 --> 00:10:08.860
we just covered many Cloud9 run configuration and debugging concepts,

168
00:10:08.860 --> 00:10:12.580
as well as how to create arbitrary configurations of

169
00:10:12.580 --> 00:10:15.940
your working area using panes and tabs.

170
00:10:15.940 --> 00:10:17.860
Leveraging these simple concepts,

171
00:10:17.860 --> 00:10:26.000
you can better optimize your development and create more advanced applications more efficiently using Cloud9.

