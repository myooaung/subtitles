WEBVTT
1
00:00:00.240 --> 00:00:03.770
Now that we've got our feet wet and covered the basics of Cloud9,

2
00:00:03.770 --> 00:00:06.100
let's take a little bit of a deeper look at some of the more

3
00:00:06.100 --> 00:00:10.090
advanced functionality available to us.

4
00:00:10.090 --> 00:00:12.620
The Cloud9 user interface is quite configurable,

5
00:00:12.620 --> 00:00:15.380
and you can customize your display and even make ad hoc

6
00:00:15.380 --> 00:00:18.460
displays to display different blocks of code from different

7
00:00:18.460 --> 00:00:21.510
files at the exact same time.

8
00:00:21.510 --> 00:00:23.740
There are three distinct dimensions within the

9
00:00:23.740 --> 00:00:28.160
Cloud9 user interface for reading, writing, and debugging code,

10
00:00:28.160 --> 00:00:31.430
which are called editors, tabs, and panes.

11
00:00:31.430 --> 00:00:35.320
The editor is the section of the IDE that allows you to code, run

12
00:00:35.320 --> 00:00:39.020
terminal sessions, and even change the IDE settings.

13
00:00:39.020 --> 00:00:44.190
The editor essentially encapsulates the entire Cloud9 user interface.

14
00:00:44.190 --> 00:00:46.540
Within the editor, we have tabs.

15
00:00:46.540 --> 00:00:49.370
Cloud9, similar to most web browsers,

16
00:00:49.370 --> 00:00:52.210
can have multiple tabs that enable you to quickly navigate

17
00:00:52.210 --> 00:00:55.650
between code files with a single click.

18
00:00:55.650 --> 00:00:59.050
Users can add and remove files from their active tabs by

19
00:00:59.050 --> 00:01:01.940
selecting them in the leftâ€‘hand file navigation, shown

20
00:01:01.940 --> 00:01:04.510
earlier. You might be wondering,

21
00:01:04.510 --> 00:01:07.740
what if I need to view multiple files at the same time?

22
00:01:07.740 --> 00:01:08.190
Well,

23
00:01:08.190 --> 00:01:11.890
this can easily be accomplished by arranging files within a concept called

24
00:01:11.890 --> 00:01:18.080
panes in Cloud9. Panes are visual groupings of files that can be created and

25
00:01:18.080 --> 00:01:22.370
arranged arbitrarily. With panes, you can create a visual arrangement of

26
00:01:22.370 --> 00:01:26.920
files and tabs within your editor to view multiple blocks of your code from

27
00:01:26.920 --> 00:01:30.940
different files simultaneously.

28
00:01:30.940 --> 00:01:35.220
Aside from the visual aesthetics of the IDE, knowing in more detail how to run

29
00:01:35.220 --> 00:01:40.020
and debug code will better equip you to create solutions within Cloud9 more

30
00:01:40.020 --> 00:01:43.400
easily. When it comes to running and debugging,

31
00:01:43.400 --> 00:01:46.240
we have three important concepts to consider,

32
00:01:46.240 --> 00:01:50.780
which are builders, runners, and debuggers. You can probably

33
00:01:50.780 --> 00:01:53.800
get away with using Cloud9 initially without having a solid

34
00:01:53.800 --> 00:01:58.880
grasp of these concepts; however, when creating larger solutions in Cloud9,

35
00:01:58.880 --> 00:02:01.490
you'll quickly learn that knowing how to leverage these features

36
00:02:01.490 --> 00:02:04.840
will unlock a much better user coding experience.

37
00:02:04.840 --> 00:02:08.410
Builders contain the instructions that enable Cloud9 to

38
00:02:08.410 --> 00:02:12.020
build your project's files before execution.

39
00:02:12.020 --> 00:02:15.170
Cloud9 has builders that work out of the box for most common

40
00:02:15.170 --> 00:02:19.020
programming languages that require little to no customization to

41
00:02:19.020 --> 00:02:21.740
work for various standard projects.

42
00:02:21.740 --> 00:02:25.570
However, if you have a project that requires custom build scripts,

43
00:02:25.570 --> 00:02:28.850
you'll likely need to configure your project's JSON builder to

44
00:02:28.850 --> 00:02:33.370
get things up and running properly. A runner is used to run and

45
00:02:33.370 --> 00:02:36.100
potentially debug your code in Cloud9.

46
00:02:36.100 --> 00:02:36.800
With runners,

47
00:02:36.800 --> 00:02:40.710
you can specify the programming language of the application and custom

48
00:02:40.710 --> 00:02:44.780
runtime configurations to meet your needs. With runners,

49
00:02:44.780 --> 00:02:48.640
you can specify the working directory, root file,

50
00:02:48.640 --> 00:02:52.410
debugging port number, and environment variables needed to get your

51
00:02:52.410 --> 00:02:56.020
application running directly in your browser.

52
00:02:56.020 --> 00:02:58.570
A debugger can be created by a runner.

53
00:02:58.570 --> 00:03:01.740
A debugger attaches to a runner and unlocks Cloud9's

54
00:03:01.740 --> 00:03:05.740
debugging features for the user, as shown in the last demo.

55
00:03:05.740 --> 00:03:06.770
Using debuggers,

56
00:03:06.770 --> 00:03:10.270
you can view local variables and periodically pause and step

57
00:03:10.270 --> 00:03:14.750
through your code during execution to better diagnosis issues

58
00:03:14.750 --> 00:03:18.030
and build resilient solutions.

59
00:03:18.030 --> 00:03:21.370
The debugger window has four primary commands that will allow you to

60
00:03:21.370 --> 00:03:25.210
control the execution flow of a debugged program.

61
00:03:25.210 --> 00:03:28.800
These four commands are fairly universal across standard IDEs,

62
00:03:28.800 --> 00:03:32.590
and understanding the distinction between each of them will better enable you

63
00:03:32.590 --> 00:03:37.190
to rapidly navigate through executed code to debug issues.

64
00:03:37.190 --> 00:03:40.740
The Play button, as I like to call it, is the Resume command.

65
00:03:40.740 --> 00:03:41.890
When using this command,

66
00:03:41.890 --> 00:03:45.480
it will indefinitely execute the program until one of two things

67
00:03:45.480 --> 00:03:50.870
happen, either another breakpoint or exception is hit, or the

68
00:03:50.870 --> 00:03:53.940
program finishes its execution entirely.

69
00:03:53.940 --> 00:03:58.140
The Step Over command will step over the current line.

70
00:03:58.140 --> 00:04:01.670
This command should be used when you want to stay in the current file being

71
00:04:01.670 --> 00:04:05.900
debugged, as it will not go inside of a function call.

72
00:04:05.900 --> 00:04:09.940
The Step Into command will advance app execution directly

73
00:04:09.940 --> 00:04:12.840
into the next line of code being executed.

74
00:04:12.840 --> 00:04:17.420
If the current line of code being debugged calls an external function,

75
00:04:17.420 --> 00:04:21.860
it will open that file and go inside of that function call. If you've

76
00:04:21.860 --> 00:04:24.860
narrowed down a bug in your code to a specific line,

77
00:04:24.860 --> 00:04:33.000
you should often use the Step Into function to get a better understanding of what is occurring during that executed line.

