1
00:00:02,050 --> 00:00:07,930
Now, let's start implementing the normal count and throttling functionality in this lecture.

2
00:00:11,140 --> 00:00:18,370
Let me, first of all, show you some code where I have implemented the CSIS for the division and for

3
00:00:18,580 --> 00:00:21,490
each student body, it's easy to understand.

4
00:00:23,270 --> 00:00:31,490
Also, I have placed a division and on the division, the on mouse event is configured with a function

5
00:00:31,490 --> 00:00:35,380
called show counts, getting called on every mouse small.

6
00:00:36,440 --> 00:00:41,090
Also, there are two actors I have already taken four total and rebounds.

7
00:00:42,330 --> 00:00:49,130
And for each edge, too, I have given normal count that is N.S.A. total count, that is D.C. in the

8
00:00:49,140 --> 00:00:52,050
end, the bounce count that is D.C. and.

9
00:00:53,390 --> 00:00:59,930
There are three variables which are going to keep the counter, I'm going to increment these counters

10
00:01:00,200 --> 00:01:03,680
when we implement title and bonds, respectively.

11
00:01:04,220 --> 00:01:07,220
But first of all, let's configure the normal count.

12
00:01:07,880 --> 00:01:08,680
Very simple.

13
00:01:08,690 --> 00:01:12,830
I'm going to create a function called normal count.

14
00:01:16,170 --> 00:01:23,820
And inside of this, I'm implementing the value of N.S.A. now I can either write, document or get element

15
00:01:23,820 --> 00:01:29,140
by I.D. to refer this edge to what I can take a separate variable as well.

16
00:01:29,160 --> 00:01:33,150
Let me take a variable that is an object I'll say normal edge to.

17
00:01:33,420 --> 00:01:38,190
This will contain the normal count and I'll say document art.

18
00:01:38,230 --> 00:01:41,520
Get element by I.D. and CMT.

19
00:01:42,420 --> 00:01:46,980
Let me also configure this for throttle and bounce as well.

20
00:01:48,020 --> 00:01:57,530
So I'll it two and two, and here, let me just say D.C. MP and DC A..

21
00:01:58,970 --> 00:01:59,390
All right.

22
00:01:59,400 --> 00:02:01,340
So now we have some configuration here.

23
00:02:02,420 --> 00:02:08,300
Now, when the normal count function is executed, I warned that and I stood out in our estimate should

24
00:02:08,300 --> 00:02:10,580
contain the value of N.S.A..

25
00:02:11,570 --> 00:02:16,190
Let me also assign the same label so it doesn't change it.

26
00:02:16,370 --> 00:02:20,330
I'll say normal, not normal, of course.

27
00:02:22,250 --> 00:02:25,910
Normal count and N.S.A..

28
00:02:26,950 --> 00:02:33,490
All right, now, this function needs to be called, and I'm going to use the Showgrounds method, which

29
00:02:33,490 --> 00:02:36,010
is called on mouse model of the division.

30
00:02:36,790 --> 00:02:39,310
So I'll say normal count, that's it.

31
00:02:40,330 --> 00:02:42,520
Let's save this and check the output.

32
00:02:43,080 --> 00:02:50,440
Now let me refresh and just moving the mouse and you see that on the mouse move, the normal counties

33
00:02:50,440 --> 00:02:51,520
getting incremented.

34
00:02:52,740 --> 00:02:55,020
Now, let us implement the total count.

35
00:02:56,240 --> 00:03:04,760
The important point you need to remember about Hertling is Turtle will execute the code after a certain

36
00:03:04,760 --> 00:03:05,870
period of time.

37
00:03:06,500 --> 00:03:08,240
That is after a certain duration.

38
00:03:08,990 --> 00:03:13,610
So let me, first of all, create the throttle count function.

39
00:03:16,740 --> 00:03:19,140
So I'll function total count.

40
00:03:20,610 --> 00:03:31,890
Certainly, the TCN should be incremental here as well, and the to ordinary HDMI should have throttle

41
00:03:32,310 --> 00:03:34,600
count value in it.

42
00:03:34,680 --> 00:03:39,900
So TXNIP, but if you observe this code, it is similar to normal.

43
00:03:40,200 --> 00:03:41,130
What's the difference?

44
00:03:41,280 --> 00:03:42,120
No difference.

45
00:03:43,020 --> 00:03:44,550
Let's make the difference now.

46
00:03:45,880 --> 00:03:50,530
Total count, whenever it is executed, I'm going to generate a timer.

47
00:03:51,070 --> 00:03:58,150
Now, if you remember, I mentioned that when throttling is to implement, the process should be executed

48
00:03:58,150 --> 00:04:01,030
after every certain period or duration.

49
00:04:01,810 --> 00:04:04,630
For that, I'm going to use the said timeout.

50
00:04:05,050 --> 00:04:08,770
So what I'll do, I'll say, said timeout.

51
00:04:10,210 --> 00:04:11,890
I'm going to call the function here.

52
00:04:14,270 --> 00:04:21,560
And also put the milliseconds, let's after every 500 milliseconds, I want this process to execute.

53
00:04:22,560 --> 00:04:25,840
But I'm not going to put this process inside this time out.

54
00:04:26,290 --> 00:04:34,140
Instead, let me show you another way I'll say fire throttle, which is initially true.

55
00:04:36,420 --> 00:04:37,050
Now.

56
00:04:38,400 --> 00:04:50,310
When this turtle count is executed, I'll say, if Firestarter is true, then we want to execute this

57
00:04:50,310 --> 00:04:50,930
process.

58
00:04:53,250 --> 00:05:00,450
Not only that, I just switched the Firestarter off, that is I'm going to assign false.

59
00:05:01,980 --> 00:05:11,100
Now practically this means once the event is fired, I'm setting the value of Firestarter to false.

60
00:05:11,340 --> 00:05:13,530
So next time, this will never execute.

61
00:05:14,710 --> 00:05:18,880
When do you want this fire throttle to be true again?

62
00:05:20,080 --> 00:05:22,560
That is where I use the set timeout.

63
00:05:23,380 --> 00:05:29,110
I'll say after 500 milliseconds, only make this fires are true.

64
00:05:31,000 --> 00:05:34,240
Now this means initially the fire throttle is true.

65
00:05:34,420 --> 00:05:37,900
It's going to increment the value, but then it will make it false.

66
00:05:39,170 --> 00:05:43,550
Also, the time out has been set after five hundred milliseconds.

67
00:05:44,670 --> 00:05:51,210
Next time, whenever the mouse moves, fire, throttle anyway contains value falls, so it will not

68
00:05:51,210 --> 00:05:51,810
execute.

69
00:05:52,560 --> 00:05:59,130
But because we have the set timeout which is going to execute after 500 milliseconds, it will switch

70
00:05:59,550 --> 00:06:02,970
the value of Firestarter to true.

71
00:06:04,780 --> 00:06:11,500
So let's save this and check the output again and refresh.

72
00:06:12,880 --> 00:06:18,910
Now, if you observe the code, the normal count is incremental at a very high rate, whereas total

73
00:06:18,910 --> 00:06:23,560
count is just incrementing only after 500 milliseconds.

74
00:06:24,700 --> 00:06:28,660
The advantage of this is right now we have very less score.

75
00:06:28,840 --> 00:06:33,490
But imagine you have API calls placed instead of these lines.

76
00:06:33,970 --> 00:06:36,370
That's where the difference will be very noticeable.

77
00:06:37,600 --> 00:06:40,030
This is how throttling can be implemented.

78
00:06:40,360 --> 00:06:48,370
You use the timer and you just switch on the fire throttle flag to true after 500 milliseconds.

79
00:06:49,300 --> 00:06:51,310
Imagine I make this as 1000.

80
00:06:52,670 --> 00:06:59,510
Then it will be even lesser, because now after every 1000 milliseconds, there is after one second,

81
00:06:59,510 --> 00:07:03,670
if the mouse is moved, then it is going to fire the event.

82
00:07:05,940 --> 00:07:08,280
Let me change this back to 500.

83
00:07:09,940 --> 00:07:10,990
And save this.

84
00:07:12,160 --> 00:07:15,910
Go back to the code refresh and throttling is implemented.

