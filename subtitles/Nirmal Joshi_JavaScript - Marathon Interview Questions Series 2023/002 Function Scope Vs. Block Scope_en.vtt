WEBVTT
1
00:00:00.120 --> 00:00:03.450
In this section, we are discussing a very basic question.

2
00:00:03.630 --> 00:00:07.530
That is the difference between function scope and block scope.

3
00:00:07.800 --> 00:00:13.380
The category is the JavaScript language, and there are three related questions which can be asked with

4
00:00:13.560 --> 00:00:14.280
this topic.

5
00:00:14.610 --> 00:00:19.860
So before we start discussing the difference between function and block school, we must understand

6
00:00:20.130 --> 00:00:22.740
what is the scope of a variable.

7
00:00:23.190 --> 00:00:26.760
Now the scope can be off variable and function.

8
00:00:27.150 --> 00:00:28.940
So the logic remains.

9
00:00:28.950 --> 00:00:29.430
See?

10
00:00:29.760 --> 00:00:36.510
When I say scope of a variable, that means it is a lifetime or availability of a variable.

11
00:00:37.050 --> 00:00:44.010
For example, if you declare a variable in one function, then it won't be available in the other function.

12
00:00:48.070 --> 00:00:49.840
Let's try with an example.

13
00:00:49.960 --> 00:00:53.800
I'm going to define a function here and declaring a variable in it.

14
00:00:55.460 --> 00:01:00.110
Now I have another function, function B and I'm trying to display the value of X.

15
00:01:00.740 --> 00:01:02.780
Let's try to call both and B.

16
00:01:07.410 --> 00:01:07.740
Here.

17
00:01:07.740 --> 00:01:15.450
When we run the code, it is giving an error that X is not defined, that is X is not available because

18
00:01:15.450 --> 00:01:23.250
variable x is declared in function E and I'm trying to access I'll refer to it in function B.

19
00:01:23.730 --> 00:01:32.610
This means the scope off of variable X is limited to function e in other words, variable x is local

20
00:01:32.790 --> 00:01:38.520
to function a scope of a variable can be local or global.

21
00:01:39.000 --> 00:01:47.910
At the moment, variable x is local to function e let's make the variable x global global variable will

22
00:01:47.910 --> 00:01:50.250
be accessible for all functions.

23
00:01:50.370 --> 00:01:55.820
And to make a variable global, we declare it outside all the functions.

24
00:01:55.950 --> 00:02:00.060
This variable I'm going to declare above function a.

25
00:02:02.130 --> 00:02:03.540
Now I'm changing the value.

26
00:02:03.540 --> 00:02:10.229
I'm adding file to variable X in function E and then I'm referring value of X in function B.

27
00:02:10.410 --> 00:02:11.400
Let's run the code.

28
00:02:14.300 --> 00:02:16.070
So now the output is 15.

29
00:02:16.640 --> 00:02:20.720
Both function E and B are referring to the same variable.

30
00:02:21.140 --> 00:02:25.400
So X is global and available to the entire piece of code.

31
00:02:25.610 --> 00:02:33.380
Now coming to the discussion of difference between function school and block school years five has function

32
00:02:33.380 --> 00:02:36.020
scope and that is because of hoisting.

33
00:02:36.140 --> 00:02:38.660
But S6 does not have hoisting.

34
00:02:41.080 --> 00:02:47.130
Remember, if you are declaring a variable with var keyword, then hoisting will be there.

35
00:02:47.340 --> 00:02:52.410
Let's try to understand that term hoisting and block scope.

36
00:02:52.560 --> 00:02:55.200
Separately, we will begin with hoisting.

37
00:02:55.470 --> 00:03:00.210
Let's see, we have a variable called variable X.

38
00:03:00.570 --> 00:03:07.620
Now, if I tried to display this variable before it is declared, let me first of all try some other

39
00:03:07.620 --> 00:03:10.680
variable which is not existing anywhere in the code.

40
00:03:11.040 --> 00:03:12.090
If I run this.

41
00:03:13.360 --> 00:03:15.820
It says that Y is not defined.

42
00:03:16.000 --> 00:03:18.550
That is a problem because why is not existing?

43
00:03:18.820 --> 00:03:20.590
Now on this line one.

44
00:03:20.770 --> 00:03:22.330
What if I see x?

45
00:03:22.720 --> 00:03:25.120
This also doesn't exist on this line.

46
00:03:25.240 --> 00:03:31.870
But still, if I run this code instead of giving any error, it says it is undefined.

47
00:03:32.080 --> 00:03:38.200
Let me also try to assign a value to variable x and I run it again.

48
00:03:39.130 --> 00:03:40.930
Then also it is undefined.

49
00:03:41.170 --> 00:03:49.630
The reason is that internally the JavaScript compiler finds all the variable declarations which are

50
00:03:49.630 --> 00:03:54.210
declared with the var keyword and it brings all the declarations.

51
00:03:54.220 --> 00:03:57.370
Remember only the declaration and not the assignments.

52
00:03:57.520 --> 00:04:00.160
So internally, what happens internally?

53
00:04:00.580 --> 00:04:06.310
It actually says var x like this and internally it will be something like this.

54
00:04:06.640 --> 00:04:10.180
So naturally it has to show undefined at this point.

55
00:04:10.330 --> 00:04:17.290
Remember, I am showing you in this code window, but this actually happens internally behind the scene,

56
00:04:17.440 --> 00:04:18.730
so you do not see it.

57
00:04:19.060 --> 00:04:25.770
Earlier, when JavaScript was introduced, there was no specific way of writing the language.

58
00:04:25.780 --> 00:04:30.850
It was not very rigid about rules of declaring variables at that time.

59
00:04:31.060 --> 00:04:38.110
The compiler used to search through entire function and it used to bring all the declarations on top.

60
00:04:38.290 --> 00:04:46.450
That means if you have declared, let's say var X somewhere in the function here and you have ten lines

61
00:04:46.450 --> 00:04:49.420
after that you have one more var x just in case.

62
00:04:49.750 --> 00:04:49.990
Right?

63
00:04:50.020 --> 00:04:53.930
Even though there is a curly bracket that is there is a block, right?

64
00:04:53.950 --> 00:04:55.150
Let's say you have a far loop.

65
00:04:55.360 --> 00:05:01.380
Imagine that you have a far loop and that you have declared variable x once again.

66
00:05:02.050 --> 00:05:03.040
What will happen?

67
00:05:03.190 --> 00:05:07.330
The feature of hoisting will search through entire code.

68
00:05:07.360 --> 00:05:10.600
In the function for that function only remember.

69
00:05:10.600 --> 00:05:12.010
Only for one function.

70
00:05:12.010 --> 00:05:13.070
For each function.

71
00:05:13.480 --> 00:05:15.460
It will search through all the variables.

72
00:05:15.640 --> 00:05:15.910
Right?

73
00:05:15.910 --> 00:05:17.220
And it will bring it on top.

74
00:05:17.230 --> 00:05:18.160
So what happens here?

75
00:05:18.400 --> 00:05:20.860
X x x also comes on top.

76
00:05:21.010 --> 00:05:27.550
So at a time in EA's file, that is with var keyword, you can declare only one variable in a function.

77
00:05:28.000 --> 00:05:29.650
This is what hoisting is.

78
00:05:29.920 --> 00:05:35.590
Hoisting means it is bringing the declaration on top, not the assignment.

79
00:05:35.590 --> 00:05:40.180
So if you have var x is equal to nine, nine remains that only.

80
00:05:40.540 --> 00:05:43.330
So this is about variable hoisting, right?

81
00:05:43.600 --> 00:05:46.300
Now let's talk about block scope.

82
00:05:46.840 --> 00:05:53.250
BLOCK scope is introduced from year six onwards and we are using the left keyword there.

83
00:05:53.320 --> 00:05:58.780
So, for example, I have to declare, let's say let X is equal to nine.

84
00:05:59.680 --> 00:06:04.330
Now again, I am having a block, a block which is just a curly bracket.

85
00:06:04.330 --> 00:06:06.790
You may have an F condition, you may have a for loop.

86
00:06:06.790 --> 00:06:07.390
Doesn't matter.

87
00:06:07.510 --> 00:06:11.380
Even just like this, curly brackets, that's also a block.

88
00:06:11.590 --> 00:06:18.100
Now I declare let x the same name I am using and seeing that let's say eight.

89
00:06:18.580 --> 00:06:20.140
So now there are two different values.

90
00:06:20.140 --> 00:06:22.130
Also, let me also refer the values.

91
00:06:22.150 --> 00:06:24.790
I'll say console.log x, right.

92
00:06:25.120 --> 00:06:28.450
So we have the same name in the same scope, in the same function.

93
00:06:28.480 --> 00:06:37.330
And if I run this, this is running absolutely fine because the let keyword doesn't do hoisting the

94
00:06:37.330 --> 00:06:42.850
JavaScript compiler doesn't hoist variables declared with the lat keyword.

95
00:06:43.060 --> 00:06:43.440
Right.

96
00:06:43.450 --> 00:06:45.610
So we do not use var keyword anymore.

97
00:06:45.640 --> 00:06:48.930
But still, if you are using var keyword, hoisting will happen.

98
00:06:49.240 --> 00:06:49.570
Right.

99
00:06:49.900 --> 00:06:55.360
So here we have variable x declared in the same school, but it is working fine because it's not going

100
00:06:55.360 --> 00:06:56.500
to be hoisted on top.

101
00:06:56.830 --> 00:07:04.830
The way we tried with hoisting, let's say I display the value of X and then I declare x, right?

102
00:07:04.840 --> 00:07:06.640
If I do this, see what happens.

103
00:07:07.120 --> 00:07:10.360
It is it cannot access x before initialization.

104
00:07:10.360 --> 00:07:12.220
Now it is not showing undefined.

105
00:07:12.430 --> 00:07:14.410
So hoisting is not happening here.

106
00:07:14.800 --> 00:07:22.210
So now you know what is block scope and what is variable hoisting odd you can see function scope because

107
00:07:22.210 --> 00:07:28.330
when hoisting is there, you have a function scope that is one variable for each function.

108
00:07:28.330 --> 00:07:34.090
You cannot have another variable with same name in years five or with var keyword.

109
00:07:36.040 --> 00:07:39.010
Let's discuss about related questions of this topic.

110
00:07:39.760 --> 00:07:43.630
Question one There can be a question that what is hoisting.

111
00:07:43.810 --> 00:07:48.820
We have already discussed that it is about a process which is happening behind the scene.

112
00:07:48.850 --> 00:07:53.500
We do not see that as a developer, as an end user, we do not see that internally.

113
00:07:53.510 --> 00:07:55.750
It is bringing the declarations on top.

114
00:07:56.020 --> 00:07:57.640
That's what hoisting is.

115
00:08:00.030 --> 00:08:03.510
The second question is how does block scope work?

116
00:08:03.630 --> 00:08:09.810
So we have already seen that a block scope is nothing but the brackets, any way you put it, whether

117
00:08:09.810 --> 00:08:17.370
it is an if condition for loop dowell or even just curly brackets to put that is a block created and

118
00:08:17.370 --> 00:08:24.360
that creates a separate world, separate scope for those declarations existing in that particular block.

119
00:08:26.090 --> 00:08:29.990
The third question can be what is scope of a variable?

120
00:08:29.990 --> 00:08:35.900
So scope is nothing but the availability or visibility or lifetime of a variable.

121
00:08:36.110 --> 00:08:40.309
So this is all about variable scope, hoisting and block scope.

