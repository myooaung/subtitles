1
00:00:00,150 --> 00:00:07,560
That is one more important topic called automatic semicolon insertion, which we are discussing in this

2
00:00:07,560 --> 00:00:08,250
lecture.

3
00:00:08,280 --> 00:00:17,460
The question I'm raising here is what is automatic semi colon insertion or what is a ACI in JavaScript?

4
00:00:17,490 --> 00:00:23,010
The category of this question is just programming language that is just language.

5
00:00:23,010 --> 00:00:27,060
And there will be three related questions with this topic.

6
00:00:27,240 --> 00:00:31,890
You must have used semicolon many times in JavaScript code.

7
00:00:32,070 --> 00:00:39,910
Almost all lines are terminated by a semicolon if you have practice of ending with a semicolon.

8
00:00:39,930 --> 00:00:40,770
Of course.

9
00:00:41,310 --> 00:00:48,480
Also you must have observed that when you do not write a semicolon, I mean if you forget to write then

10
00:00:48,480 --> 00:00:52,170
also JavaScript is not going to give you any error.

11
00:00:53,760 --> 00:01:01,980
And the reason for not showing error is that the compiler automatically adds a semicolon at the end

12
00:01:01,980 --> 00:01:03,240
of those lines.

13
00:01:04,860 --> 00:01:06,850
Let's try a simple code here.

14
00:01:06,870 --> 00:01:09,780
I will simply say console.log.

15
00:01:09,810 --> 00:01:10,560
Hi.

16
00:01:11,520 --> 00:01:13,650
Now, I don't write a semi-colon here.

17
00:01:14,400 --> 00:01:17,790
The next line is console.log test.

18
00:01:17,790 --> 00:01:19,860
And I put a semicolon here.

19
00:01:20,980 --> 00:01:27,530
So here in this code, both the lines are executed properly after the end of first line.

20
00:01:27,550 --> 00:01:31,310
A semicolon is automatically inserted.

21
00:01:31,330 --> 00:01:41,260
This means writing a semicolon at the end of line is optional in JavaScript, and it also means that

22
00:01:41,260 --> 00:01:50,170
when there is a line break like on this line console.log, JavaScript inserts a semicolon at the end

23
00:01:50,170 --> 00:01:56,830
of line and this very feature is called as automatic semicolon insertion.

24
00:01:56,830 --> 00:02:06,670
Or as I remember, JavaScript does not insert a semicolon on every line break that is on every new line.

25
00:02:06,700 --> 00:02:10,990
Let's try one more example To understand that I will declare a variable.

26
00:02:10,990 --> 00:02:16,710
I'll say let a is equal to I will say four into the multiplication sign.

27
00:02:16,720 --> 00:02:24,850
Now I press enter here and I say five and console.log I try to display value of a.

28
00:02:28,460 --> 00:02:35,570
Here the output is 20, which is correct without any error, whereas I have already added a line break

29
00:02:35,570 --> 00:02:40,050
after the multiplication sign as it finds an operator alone.

30
00:02:40,070 --> 00:02:43,490
It understands that there is something more remaining.

31
00:02:44,030 --> 00:02:49,490
So this means in some cases JavaScript does not add a semicolon.

32
00:02:49,580 --> 00:02:53,360
And that's where JavaScript creates a problem.

33
00:02:53,360 --> 00:02:57,350
And as a developer, you must know this behavior.

34
00:02:57,500 --> 00:03:00,140
Let's create one more code to understand.

35
00:03:00,170 --> 00:03:03,170
I'm going to create a function function test.

36
00:03:03,620 --> 00:03:07,640
Now, here I want to return an object literal, right?

37
00:03:07,790 --> 00:03:13,370
So I'll say return, but I'm pressing an enter here and opening the curly bracket on a new line.

38
00:03:13,370 --> 00:03:15,320
I'll say a colon five.

39
00:03:15,680 --> 00:03:16,310
That's it.

40
00:03:16,310 --> 00:03:20,090
And I'll say const obj is equal to test.

41
00:03:20,090 --> 00:03:21,290
I'm calling the function.

42
00:03:21,290 --> 00:03:25,850
So now the function test should return the object literal and we try to display it.

43
00:03:25,850 --> 00:03:28,220
Let's say console.log object.

44
00:03:28,340 --> 00:03:29,750
Let's run the code.

45
00:03:30,050 --> 00:03:35,540
But now the output is undefined, whereas the function is returning the object literal.

46
00:03:35,780 --> 00:03:43,430
The output is undefined because internally a semicolon is added after return statement, which means

47
00:03:43,430 --> 00:03:46,610
this function does not return anything.

48
00:03:46,640 --> 00:03:52,850
Now let's bring this opening curly bracket on same line of return and run the code.

49
00:03:56,460 --> 00:03:59,480
Now you see that it is working as we want.

50
00:03:59,490 --> 00:04:01,620
It is returning the object literal.

51
00:04:01,620 --> 00:04:07,410
So test is returning proper object literal which is received by object and we are displaying it.

52
00:04:07,740 --> 00:04:15,630
So this is the overall behavior of AC and you have to take care if you don't have practice to terminate

53
00:04:15,630 --> 00:04:23,730
lines with semicolon or even in this case where we use a curly bracket on new line while returning an

54
00:04:23,730 --> 00:04:24,690
object literal.

55
00:04:24,990 --> 00:04:29,160
Now let's discuss a few relative questions of this topic.

56
00:04:29,490 --> 00:04:34,350
The first question is should you terminate all lines by a semicolon?

57
00:04:34,350 --> 00:04:39,720
Now, as I mentioned, it's a good practice to have a semicolon at the end, though it is optional because

58
00:04:39,720 --> 00:04:44,460
JavaScript does insert a semicolon, but if you put it, it's a good practice.

59
00:04:44,460 --> 00:04:52,740
At least you have to make sure that if you do not put semicolon, then also the line should not be terminated

60
00:04:52,740 --> 00:04:54,990
in an improper way like return.

61
00:04:54,990 --> 00:04:58,530
And then if you are returning an object literal, then put a bracket.

62
00:04:58,530 --> 00:05:04,890
Even this is a common practice that when we write if condition, then we open the curly bracket on the

63
00:05:04,890 --> 00:05:05,760
same line.

64
00:05:08,030 --> 00:05:12,980
The second question is a piece of code is shown like this, which we have already tried.

65
00:05:12,980 --> 00:05:20,210
And the question can be that why this code is returning undefined in spite of function, returning a

66
00:05:20,210 --> 00:05:21,610
valid object literal.

67
00:05:21,620 --> 00:05:24,560
So we have already discussed why this happens.

68
00:05:24,560 --> 00:05:30,200
Or there can be another question that what will be the output for this piece of code?

69
00:05:32,040 --> 00:05:39,540
The third question we can think of is can use strict statement or the strict mode change the behavior

70
00:05:39,540 --> 00:05:40,740
of ACI.

71
00:05:40,770 --> 00:05:44,640
No, it doesn't change the behavior if you write you strict.

72
00:05:44,670 --> 00:05:48,060
That does not mean that you have to end all lines with a semicolon.

73
00:05:48,060 --> 00:05:50,040
I mean the respective lines anyway.

74
00:05:50,040 --> 00:05:56,370
Like if condition is never terminated with a semicolon, but lines which are to be terminated with a

75
00:05:56,370 --> 00:06:04,410
semicolon that also even if you use use strict, it doesn't force you to put a semicolon on all lines.

