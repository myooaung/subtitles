WEBVTT
1
00:00:00.090 --> 00:00:06.630
In this section, we are discussing another important concept that is the difference between arrest

2
00:00:06.630 --> 00:00:08.310
and the spread operator.

3
00:00:09.000 --> 00:00:15.660
The category of this question is JavaScript language, and there will be four related questions we are

4
00:00:15.660 --> 00:00:17.340
discussing with this topic.

5
00:00:18.310 --> 00:00:19.840
From year six onwards.

6
00:00:20.020 --> 00:00:23.740
There are these three dots used in many places.

7
00:00:24.430 --> 00:00:28.360
Also, sometimes they are called as the rest operator.

8
00:00:28.480 --> 00:00:34.350
And sometimes the very same three dots are called spread operator VI.

9
00:00:34.360 --> 00:00:36.220
So let's check it out.

10
00:00:36.460 --> 00:00:39.460
We will begin with the rest operator first.

11
00:00:39.880 --> 00:00:46.590
Imagine a situation where you have to create a function called sum, which can take any number of arguments

12
00:00:46.600 --> 00:00:52.450
and at the end it should return the sum of all the parameters passed to it.

13
00:00:52.750 --> 00:00:54.120
Let's start practically.

14
00:00:54.130 --> 00:00:55.810
Here I am creating the function.

15
00:00:56.200 --> 00:00:57.130
Function sum.

16
00:00:58.830 --> 00:01:03.930
Now I do not warn that there are two parameters passed or maybe three parameters passed.

17
00:01:04.530 --> 00:01:12.330
What I just want is that I should be able to pass any number of parameters and that should be received

18
00:01:12.330 --> 00:01:13.260
by this function.

19
00:01:13.380 --> 00:01:20.280
So for that I can use three dots and this is called as a rest operator.

20
00:01:20.880 --> 00:01:24.870
So I would say rest, for example, numbers.

21
00:01:25.170 --> 00:01:27.960
So this will create an array of numbers.

22
00:01:27.990 --> 00:01:34.590
Let's first of all, try to display this array of numbers.

23
00:01:36.200 --> 00:01:45.510
Now I'm calling the function with two parameters another call with, let's say, more parameters.

24
00:01:46.780 --> 00:01:53.050
So now, as a user of this function, I do not have any restriction for passing number of parameters.

25
00:01:53.980 --> 00:01:57.280
I'm saving this and running the code here.

26
00:02:01.480 --> 00:02:09.190
So you see that we have to add is now one contains two members, whereas the other contains four members.

27
00:02:09.699 --> 00:02:12.400
Because we have used the rest operator.

28
00:02:13.820 --> 00:02:19.880
Now, if we want some, we can put a loop and we can add the numbers and return at the end.

29
00:02:21.110 --> 00:02:24.500
So this is the purpose of using the rest operator.

30
00:02:25.590 --> 00:02:34.980
Also in case if you want that, here I go, let's say, and B, just in case this function has to parameters.

31
00:02:35.310 --> 00:02:39.630
But the first parameter, I want to have a rest parameter.

32
00:02:41.220 --> 00:02:43.140
Let's try this and see what happens.

33
00:02:45.230 --> 00:02:47.330
As you can see, it gives the edit.

34
00:02:48.020 --> 00:02:54.650
The reason is that is a condition that whenever you give the rest parameter operator, it has to be

35
00:02:54.830 --> 00:02:55.280
last.

36
00:02:55.280 --> 00:03:01.010
In fact, that actually means that you passed the first parameter in.

37
00:03:01.670 --> 00:03:06.320
And for the rest of the parameters, you have this rest parameter.

38
00:03:06.800 --> 00:03:10.490
That's the significance of name called rest parameters.

39
00:03:11.240 --> 00:03:14.780
So now you can understand why we use three dots.

40
00:03:15.650 --> 00:03:20.590
Remember, the rest operator is part of E6 in S5.

41
00:03:20.590 --> 00:03:27.080
So we have an array like object called arguments which does not work with arrow function.

42
00:03:27.200 --> 00:03:28.130
So we avoid.

43
00:03:28.550 --> 00:03:32.360
But let's just have a look at the arguments object also.

44
00:03:32.690 --> 00:03:34.670
Let's say we don't have any parameter here.

45
00:03:35.600 --> 00:03:38.750
And here directly I see arguments.

46
00:03:38.990 --> 00:03:40.190
I'm saving this.

47
00:03:41.270 --> 00:03:42.470
Clearing the terminal.

48
00:03:42.950 --> 00:03:46.790
Now I will run the same program.

49
00:03:48.050 --> 00:03:56.060
When I say arguments is an error like object, what it means is it is not an ADI with rest operator.

50
00:03:56.180 --> 00:04:00.110
We are creating an ADI, whereas here with arguments object.

51
00:04:00.590 --> 00:04:06.380
We have a kind of object literal which has a key and value.

52
00:04:06.380 --> 00:04:09.620
Key is the index number and then the value.

53
00:04:10.130 --> 00:04:14.570
Now, in case if I convert this function into arrow function, it will stop working.

54
00:04:14.720 --> 00:04:15.500
Let's do that.

55
00:04:17.500 --> 00:04:20.829
I will say concert some is equal to.

56
00:04:22.990 --> 00:04:23.620
An arrow.

57
00:04:26.430 --> 00:04:27.810
Now if I try to run.

58
00:04:30.350 --> 00:04:32.930
Then it's going to give me the error arguments.

59
00:04:32.930 --> 00:04:39.680
Object in chart doesn't work with arrow function so with arrow function anyway you do not have any choice.

60
00:04:39.800 --> 00:04:44.900
If you want that any number of parameters are passed to function and you want to deal with it.

61
00:04:45.170 --> 00:04:53.000
So now if I just set order that nums again here the numbers added that is and I display with console.log.

62
00:04:54.080 --> 00:04:54.860
Let's save this.

63
00:04:57.240 --> 00:04:58.230
And I ran it.

64
00:04:59.100 --> 00:05:01.530
So again, we are back to the working piece of code.

65
00:05:02.130 --> 00:05:02.580
All right.

66
00:05:02.580 --> 00:05:09.630
So whenever you use three dots with function to deal with any number of parameters, then you call it

67
00:05:09.930 --> 00:05:10.920
rest operator.

68
00:05:11.130 --> 00:05:14.640
That is for the rest of parameters.

69
00:05:15.150 --> 00:05:17.550
Now let's talk about spread operator.

70
00:05:17.820 --> 00:05:25.860
As the rest operator puts the separate data values in one area, the spread does exactly the opposite.

71
00:05:26.220 --> 00:05:29.670
It spreads the array into separate data values.

72
00:05:30.750 --> 00:05:34.070
Let's try one more practical example to understand this.

73
00:05:35.010 --> 00:05:36.720
I'm creating one add a here.

74
00:05:36.730 --> 00:05:39.960
Let's say let add out one is equal to I have a few values.

75
00:05:39.960 --> 00:05:42.480
Let's say one, two, three, four and five.

76
00:05:44.160 --> 00:05:46.680
Now assume that you have another at a.

77
00:05:48.060 --> 00:05:51.090
This ad has its own elements as well.

78
00:05:51.150 --> 00:05:55.740
Let's say from six, seven and eight we have in this ad.

79
00:05:56.890 --> 00:06:05.320
Now what I want is that all these elements in everyone we need to put here before six, but those added

80
00:06:05.320 --> 00:06:10.850
elements should be kind of spreading the values, not the entire Adi.

81
00:06:11.230 --> 00:06:17.650
Here we have six, seven, eight of Edit2 and when you say dot, dot, dot, that is the spread operator

82
00:06:17.650 --> 00:06:20.990
added one, it means added error.

83
00:06:21.070 --> 00:06:24.850
One is now passed as individual elements.

84
00:06:24.940 --> 00:06:25.200
Right.

85
00:06:25.220 --> 00:06:27.700
There is no data structure given here.

86
00:06:28.150 --> 00:06:30.760
Simple individual elements are passed.

87
00:06:30.760 --> 00:06:36.730
So one, two, three, four, five is kind of spreading in the ADI and then six, seven, eight.

88
00:06:37.510 --> 00:06:46.690
Let me just save this and also display the added to I'll say spread out.

89
00:06:48.010 --> 00:06:48.700
Jesus.

90
00:06:49.390 --> 00:06:54.910
Now you see, when I display added to it does display all the elements together.

91
00:06:55.450 --> 00:07:02.170
So in a way we have now separated those values of Adi one and we hope us to add it to.

92
00:07:02.560 --> 00:07:09.850
Let's take one more example for this matter, assume that you have this Adi where you have various values

93
00:07:09.850 --> 00:07:15.160
in it, let's say four, 78, 90, 34 and so on.

94
00:07:15.160 --> 00:07:17.170
Let me say four or five nine.

95
00:07:17.950 --> 00:07:21.940
Now I want to find a max value among all these add elements.

96
00:07:22.480 --> 00:07:27.010
The metadata max function takes values separately.

97
00:07:27.010 --> 00:07:31.780
So ideally what you should do is you should write for common 78, common 90 and so on.

98
00:07:32.260 --> 00:07:36.610
That means you are going to pass separate data values, right?

99
00:07:36.850 --> 00:07:43.720
But here we want that this array which we are having now of values, we want to find the max from this

100
00:07:43.720 --> 00:07:43.930
add.

101
00:07:43.930 --> 00:07:48.880
Even if I write everyone directly, let's do this first cancel out log.

102
00:07:50.730 --> 00:07:51.150
And.

103
00:07:53.460 --> 00:07:54.240
So this.

104
00:07:58.290 --> 00:08:04.230
As you see that it is giving men that is an ad is displayed man is basically not a number.

105
00:08:04.770 --> 00:08:07.680
So this is invalid way of passing the data.

106
00:08:07.680 --> 00:08:15.030
We have to pass it separately or we have now the spread operator which will take care of passing individual

107
00:08:15.030 --> 00:08:15.420
values.

108
00:08:15.420 --> 00:08:20.430
So now if I run this, now we have the value that is the max value for 59.

109
00:08:21.090 --> 00:08:24.570
So this is how the rest and spread operator do.

110
00:08:24.570 --> 00:08:30.300
They are three dots only, but with the context where they have used, they behave.

111
00:08:30.750 --> 00:08:33.360
Now let's discuss related questions of this topic.

112
00:08:33.750 --> 00:08:38.010
First question is can we use argument object in arrow function?

113
00:08:38.280 --> 00:08:44.220
We have seen that it cannot be used if it is the traditional way of writing function, it can work,

114
00:08:44.340 --> 00:08:45.720
otherwise it will not work.

115
00:08:47.970 --> 00:08:53.670
The second question is, which is the best way to create new areas with assignments?

116
00:08:54.210 --> 00:08:55.830
That is assignment operator.

117
00:08:55.980 --> 00:08:58.200
Now how will you assign edit?

118
00:08:58.230 --> 00:09:00.220
Let's say everyone is equal to edit two.

119
00:09:00.240 --> 00:09:06.870
If you write, that is not a very preferable way because both ADI one and edit two will be objects.

120
00:09:07.080 --> 00:09:10.980
So when you are assigning you can use the spread operator.

121
00:09:10.980 --> 00:09:14.670
So the better way to assign edit is using the spread operator.

122
00:09:14.670 --> 00:09:18.120
So you can say let error two is equal to add one.

123
00:09:20.350 --> 00:09:25.840
The third question is how can you handle the number of parameters passed to a function?

124
00:09:26.260 --> 00:09:33.550
Or the question can be create a function which can take any number of parameters that returns some or

125
00:09:33.550 --> 00:09:37.010
maybe max value or any other such calculated values.

126
00:09:37.450 --> 00:09:43.900
So you can use the rest operator to deal with such situation, which we tried in one of the example

127
00:09:43.900 --> 00:09:49.310
earlier, though we did not try to find us because that's a very basic thing which anyone can do.

128
00:09:49.750 --> 00:09:52.240
But the idea is to deal with the rest operator.

129
00:09:54.910 --> 00:10:00.490
Fourth question can the rest operator be placed anywhere in the function parameter list?

130
00:10:00.730 --> 00:10:03.250
Or there can be a core sample like this.

131
00:10:03.790 --> 00:10:06.610
One may ask you, is this piece of code valid?

132
00:10:07.210 --> 00:10:08.050
Give the reason.

133
00:10:08.380 --> 00:10:13.930
So as we discussed earlier, we cannot have a rest parameter in the beginning of parameter list.

134
00:10:13.930 --> 00:10:15.430
We have to put it at last.

135
00:10:15.730 --> 00:10:18.070
If we have just a parameter list, it's okay.

136
00:10:18.070 --> 00:10:24.640
But if we have more parameters then the rest parameter should be at last position because it is the

137
00:10:24.640 --> 00:10:26.170
rest of the parameters.

