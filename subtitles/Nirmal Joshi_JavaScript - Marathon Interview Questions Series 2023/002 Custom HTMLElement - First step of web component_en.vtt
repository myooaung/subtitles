WEBVTT
1
00:00:07.810 --> 00:00:13.750
So now this is the output which we want to achieve with web components, and we are going to do that

2
00:00:13.750 --> 00:00:15.100
step by step.

3
00:00:15.870 --> 00:00:19.170
Let's create a new project here.

4
00:00:19.170 --> 00:00:20.910
I'll create a new folder.

5
00:00:22.020 --> 00:00:22.980
Product card.

6
00:00:24.030 --> 00:00:28.470
And inside this folder, I will create the related files just to segregate.

7
00:00:28.920 --> 00:00:32.940
So here I'm going to create the index dot XHTML.

8
00:00:34.410 --> 00:00:40.230
Now inside this index, let me insert some predefined HTML exclamation and tab.

9
00:00:41.070 --> 00:00:45.090
Let's change the title to web component.

10
00:00:46.800 --> 00:00:47.910
And in the body.

11
00:00:47.910 --> 00:00:52.170
Let's add an H1 saying header section.

12
00:00:53.050 --> 00:00:55.000
In real world applications.

13
00:00:55.000 --> 00:01:01.420
This section may contain a menu, but I'm just fixing it to header section text only.

14
00:01:02.210 --> 00:01:02.570
Now.

15
00:01:02.570 --> 00:01:06.270
Next, I want to have four product cards.

16
00:01:06.290 --> 00:01:08.630
So let's say product card.

17
00:01:09.200 --> 00:01:17.030
Now, this product card is a custom HTML element which we want to create and we are supposed to have

18
00:01:17.030 --> 00:01:20.900
it for four times because we are showing the four products.

19
00:01:22.750 --> 00:01:26.200
This is the web component we have to create.

20
00:01:26.380 --> 00:01:35.140
Remember, by creating a web component in a way, you are creating a custom HTML tag as well.

21
00:01:35.410 --> 00:01:39.400
Because there is nothing like a product card in HTML.

22
00:01:40.120 --> 00:01:45.610
So let's create this custom HTML element inside JavaScript.

23
00:01:45.610 --> 00:01:55.120
So I will add one JavaScript file here in the product card, I will add a new file product card, dart

24
00:01:55.120 --> 00:01:56.080
js.

25
00:01:58.420 --> 00:02:01.810
Now let me add a script tag here in the HTML.

26
00:02:03.430 --> 00:02:06.670
And I'm going to import the product card.

27
00:02:06.760 --> 00:02:07.960
J is here.

28
00:02:08.050 --> 00:02:10.720
So in the current folder, we have this file.

29
00:02:11.530 --> 00:02:18.070
Now let's go to the JavaScript file because we have to create a custom HTML element.

30
00:02:18.100 --> 00:02:22.750
We will have to use the base class HTML element.

31
00:02:24.540 --> 00:02:28.620
So I will say class product card.

32
00:02:30.000 --> 00:02:33.750
Extends HTML element.

33
00:02:33.750 --> 00:02:43.050
So product card component that is the class is created and which is taking all the behavior from base

34
00:02:43.050 --> 00:02:43.710
class.

35
00:02:44.040 --> 00:02:45.270
HTML element.

36
00:02:47.330 --> 00:02:55.850
This also means product card is the class which will be instantiated every time you use the HTML tag.

37
00:02:55.880 --> 00:03:02.720
In our case, the HTML tag is going to be product dash card, not this product card, which you see

38
00:03:02.720 --> 00:03:03.710
on the screen.

39
00:03:03.980 --> 00:03:12.320
This is just the class name and I will show you how to define the HTML tag and bind this class with

40
00:03:12.320 --> 00:03:15.320
the particular custom HTML element.

41
00:03:17.330 --> 00:03:21.960
Remember, this class name can be anything you can name it.

42
00:03:21.980 --> 00:03:23.660
Jackie Chan No problem.

43
00:03:23.660 --> 00:03:26.000
But we try to make it meaningful.

44
00:03:26.420 --> 00:03:31.700
What I mean to say is this class name is in the tag name.

45
00:03:32.500 --> 00:03:34.690
Few more things we need to add.

46
00:03:34.750 --> 00:03:44.050
I will add a constructor and inside the first line is super, which refers to the parent class.

47
00:03:44.470 --> 00:03:46.700
Now let me just add one line.

48
00:03:46.720 --> 00:03:48.580
I will say this.

49
00:03:49.000 --> 00:03:53.440
That is the current class dot inner HTML tactic.

50
00:03:54.930 --> 00:03:57.720
And I'll just say product component.

51
00:03:58.710 --> 00:04:04.020
So at the moment, this is the HTML of the component.

52
00:04:05.500 --> 00:04:10.750
Now let's define a custom HTML element product card.

53
00:04:10.810 --> 00:04:14.440
I will say window, which is a global object.

54
00:04:14.470 --> 00:04:19.360
Dot custom elements dot define.

55
00:04:21.170 --> 00:04:26.990
Because window is a global object, you can simply write custom elements as well.

56
00:04:27.590 --> 00:04:33.140
You can avoid writing window, but I am using it with window itself.

57
00:04:33.990 --> 00:04:42.530
Now inside the defined method, the first parameter is a string, which is the name of the HTML element.

58
00:04:42.540 --> 00:04:50.910
So I will say product dash card, and the second parameter is the class name.

59
00:04:51.060 --> 00:04:54.360
So in our case, it is product card.

60
00:04:55.570 --> 00:05:01.780
Now let me just run this code in the live server so you can immediately see the updates.

61
00:05:02.570 --> 00:05:08.990
And you see that the product component text is displaying four times.

62
00:05:08.990 --> 00:05:16.760
The reason is here on line number 11 to 14, the product car component is written.

63
00:05:16.880 --> 00:05:25.040
So it means the product component message is coming because of these lines, which is saying that this

64
00:05:25.040 --> 00:05:30.110
is a custom HTML element which does some job in our case.

65
00:05:30.110 --> 00:05:33.890
Later on it is going to display the product information.

66
00:05:35.690 --> 00:05:43.940
Let me also just add H1 tag in the inner HTML, so this gets displayed in a little better way.

67
00:05:44.030 --> 00:05:49.400
So here I'll say H1 the beginning and I'll end it.

68
00:05:50.390 --> 00:05:55.070
H1 Now you see that four times it is displayed in a sequence.

69
00:05:55.940 --> 00:06:04.160
So creating a component means you create a class like we have done here with product card extended from

70
00:06:04.490 --> 00:06:06.620
HTML element based class.

71
00:06:06.740 --> 00:06:15.340
Define the required HTML for your component in the constructor later with HTML template in fact.

72
00:06:15.350 --> 00:06:24.050
But at the moment you directly define the HTML and then define the custom element using the custom elements

73
00:06:24.050 --> 00:06:25.910
dot defined method.

74
00:06:27.080 --> 00:06:31.850
This is just the basic idea, the basic structure of creating a web component.

75
00:06:32.590 --> 00:06:39.550
There is a lot to do and a lot to know, but you can get the basic idea with these lines.

76
00:06:39.550 --> 00:06:41.140
That is the syntax.

77
00:06:41.950 --> 00:06:44.320
Now let's talk about relative questions.

78
00:06:44.320 --> 00:06:49.120
So explain what is a web component and how can you create it.

79
00:06:49.480 --> 00:06:58.570
So web component is basically the HTML, CSS and JavaScript combination, which you can combine or encapsulate

80
00:06:58.570 --> 00:07:04.780
inside a component, inside a container which can perform independently.

81
00:07:04.780 --> 00:07:07.210
Which can function independently.

82
00:07:08.040 --> 00:07:09.960
And to create the component.

83
00:07:10.140 --> 00:07:12.030
I've just listed out these points.

84
00:07:12.030 --> 00:07:18.540
That is, you create a class, extend it from HTML element based class.

85
00:07:18.660 --> 00:07:27.270
Define the required HTML for your component in the constructor later with HTML template in fact.

86
00:07:27.270 --> 00:07:35.970
But at the moment you directly define the HTML and then define the custom element using the custom elements

87
00:07:35.970 --> 00:07:37.860
dot defined method.

