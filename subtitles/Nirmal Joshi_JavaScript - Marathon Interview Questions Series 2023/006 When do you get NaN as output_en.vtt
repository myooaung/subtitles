WEBVTT
1
00:00:00.090 --> 00:00:05.400
As promised in the previous question, we are discussing men in this section.

2
00:00:05.640 --> 00:00:10.380
The main question is when do you get men as output?

3
00:00:10.740 --> 00:00:16.530
The category of this question is JavaScript language, and there are two related questions.

4
00:00:17.490 --> 00:00:21.390
Men is a global property representing not a number.

5
00:00:21.720 --> 00:00:25.920
You normally get this error when there is a non numerical value.

6
00:00:26.070 --> 00:00:27.660
Our operation performed.

7
00:00:27.990 --> 00:00:30.870
Let's run a very small sample code.

8
00:00:30.870 --> 00:00:38.970
To check this I will declare a variable which has a numeric value and declaring another variable which

9
00:00:38.970 --> 00:00:41.430
has a string say for example value.

10
00:00:43.080 --> 00:00:54.270
Now if I try to perform a mathematical that is an arithmetic operation here into B now it is a numeric

11
00:00:54.280 --> 00:00:56.460
value, whereas B is actually a string.

12
00:00:57.150 --> 00:01:02.190
So this operation cannot be performed in such cases.

13
00:01:02.490 --> 00:01:06.360
JavaScript will return not a number that is none.

14
00:01:07.240 --> 00:01:09.280
Let's run this code and see what happens.

15
00:01:12.910 --> 00:01:19.690
You see that the output is net because a string and a number cannot perform mathematical operations.

16
00:01:20.050 --> 00:01:22.210
It has returned then as output.

17
00:01:22.660 --> 00:01:24.550
This, in fact, is an error.

18
00:01:25.060 --> 00:01:33.850
How will you make sure that you always have validation on such values by using a matter called is Nan.

19
00:01:34.330 --> 00:01:39.520
Is Nan is a function which returns true or false depending on the expression?

20
00:01:40.150 --> 00:01:44.140
Let's add is then in this particular example, I'll see if.

21
00:01:46.430 --> 00:01:54.110
Is nine, which is a function and I'll give the expression into B now I'm comparing it whether it is

22
00:01:54.110 --> 00:01:55.250
true or false.

23
00:01:55.970 --> 00:01:57.410
If I say false.

24
00:01:59.980 --> 00:02:04.230
That means is nine is not a number is false.

25
00:02:04.240 --> 00:02:05.410
That means it's a number.

26
00:02:06.340 --> 00:02:10.300
Now, instead of writing this way, we can also write.

27
00:02:12.500 --> 00:02:13.220
Like this.

28
00:02:14.240 --> 00:02:15.500
It is one and the same thing.

29
00:02:15.950 --> 00:02:19.760
These are the tricks of JavaScript programming language, right?

30
00:02:20.180 --> 00:02:30.560
Because if you want to say if is than let's say what our expression is, that is equal to true.

31
00:02:32.000 --> 00:02:38.870
So instead of writing this, you can simply say nothing is nan expression.

32
00:02:38.870 --> 00:02:41.570
That means if it is true, then you proceed further.

33
00:02:42.110 --> 00:02:47.750
Similarly, when you want to negate this condition, you can say this is equivalent to is nan equals

34
00:02:47.750 --> 00:02:48.800
to false.

35
00:02:49.460 --> 00:02:53.960
So let's try this syntax rather than saying equal to end false.

36
00:02:54.290 --> 00:02:58.040
So if it is false, I just want to display.

37
00:03:00.870 --> 00:03:02.220
That it's a valid number.

38
00:03:04.650 --> 00:03:05.370
Else.

39
00:03:08.450 --> 00:03:10.430
I will say invalid.

40
00:03:12.050 --> 00:03:16.440
I'm saving this and running the code again at the moment.

41
00:03:16.460 --> 00:03:17.960
Certainly it is invalid.

42
00:03:18.140 --> 00:03:25.400
Now if I change the value here in B, let's say four and then we run it.

43
00:03:26.030 --> 00:03:28.760
So it says that it is a valid number.

44
00:03:28.970 --> 00:03:37.550
So is it then gives you this facility to check whether it is returning nine or it is a valid number?

45
00:03:37.910 --> 00:03:41.780
Ideally, if you want to check a value is number or not.

46
00:03:41.900 --> 00:03:45.800
Then you have the global property called nine.

47
00:03:46.190 --> 00:03:50.060
It means you can write it into B.

48
00:03:50.060 --> 00:03:51.320
That is the expression.

49
00:03:56.150 --> 00:04:00.200
Is equal to Nan because Nan is a global property.

50
00:04:00.440 --> 00:04:02.820
But this is not a very preferable way.

51
00:04:02.840 --> 00:04:03.950
We don't write this.

52
00:04:03.950 --> 00:04:07.990
The reason is Nan does not match with itself.

53
00:04:08.000 --> 00:04:09.770
Also, it's a unique value.

54
00:04:09.950 --> 00:04:13.430
Nan returns a unique value each time you refer it.

55
00:04:14.030 --> 00:04:16.910
But it is a nan just to check that practically.

56
00:04:17.420 --> 00:04:18.440
Let me write this.

57
00:04:19.850 --> 00:04:23.660
I'll say console.log instead of a thing to be.

58
00:04:23.660 --> 00:04:28.730
I'll change it to is nan is equal to Nan or not?

59
00:04:30.170 --> 00:04:30.470
Right.

60
00:04:30.500 --> 00:04:31.400
Let's try this.

61
00:04:35.220 --> 00:04:37.410
You see, it returns false.

62
00:04:38.340 --> 00:04:42.520
That means it does not match with itself all the times.

63
00:04:42.780 --> 00:04:46.140
So better not use this in to be is equal to nan.

64
00:04:46.470 --> 00:04:46.710
Right.

65
00:04:46.710 --> 00:04:48.960
This is not a very preferable way.

66
00:04:49.170 --> 00:04:52.140
You should always use is Nan instead.

67
00:04:53.040 --> 00:05:01.410
Sometimes we prefer to write is finite method which not only checks for Nan but also checks for positive

68
00:05:01.410 --> 00:05:04.800
infinity and negative infinity as well.

69
00:05:05.130 --> 00:05:11.190
In short, is finite method checks whether the value is a regular number or not.

70
00:05:11.550 --> 00:05:13.230
Let's see this practically.

71
00:05:13.770 --> 00:05:17.220
We will again keep this b is equal to string that is value.

72
00:05:18.720 --> 00:05:22.530
And now we are going to try a few console.log to see this.

73
00:05:23.430 --> 00:05:29.400
Also console.log is finite and to be let's try a valid value find to four.

74
00:05:29.610 --> 00:05:31.950
I will say max value into four.

75
00:05:31.950 --> 00:05:35.850
So this should return the infinity and even infinity itself.

76
00:05:36.720 --> 00:05:40.680
I'll clear the screen and run the code here.

77
00:05:40.680 --> 00:05:44.310
It returns false because and B will return then.

78
00:05:44.490 --> 00:05:45.630
So it is false.

79
00:05:47.010 --> 00:05:49.410
I say fine too for this returns true.

80
00:05:49.410 --> 00:05:52.260
So this is a regular number which is returned by it.

81
00:05:52.860 --> 00:05:59.310
When you see a situation where there is an infinite return like number dot maxwell, you hear that returns

82
00:05:59.310 --> 00:05:59.790
false.

83
00:05:59.970 --> 00:06:01.170
And of course infinity.

84
00:06:01.170 --> 00:06:02.790
Anyway, returns false.

85
00:06:03.780 --> 00:06:11.970
So is finite is one of the function which can be used, which checks for man and the infinity thing.

86
00:06:12.600 --> 00:06:15.750
This does not mean you use infinite everywhere.

87
00:06:15.960 --> 00:06:22.230
It's just that if you expect certain values might return from a function, then you use it.

88
00:06:22.920 --> 00:06:26.100
Now let's discuss the relative questions of this topic.

89
00:06:26.400 --> 00:06:31.140
The first question is what will be the output of the below statement?

90
00:06:32.670 --> 00:06:35.750
So now here I'm using nan equals to Nan.

91
00:06:35.760 --> 00:06:40.620
Remember, either I you do equal to sign or even three equal to sign.

92
00:06:41.310 --> 00:06:46.350
That doesn't matter because strict equality or non strict equality.

93
00:06:46.860 --> 00:06:49.650
Either way, it is not going to match with Nan.

94
00:06:50.070 --> 00:06:55.410
So Nan doesn't match with itself because there is always a unique value for each nan.

95
00:06:55.860 --> 00:06:59.060
That's why this will return false.

96
00:06:59.070 --> 00:07:03.660
Even though we say nan equals to nan is going to return false.

97
00:07:06.400 --> 00:07:12.990
The second question is what is the difference between is then and is finite matter?

98
00:07:13.750 --> 00:07:20.440
So we have already seen that is then is just going to check whether the value is not a number or not

99
00:07:20.830 --> 00:07:26.890
and is finite checks for man as well as infinity values also.

