1
00:00:00,150 --> 00:00:04,320
Now we are going to see one more method used with regular expression.

2
00:00:04,680 --> 00:00:12,690
This method not only finds a value, but it replaces, so it does both fine and replacement functionality

3
00:00:12,690 --> 00:00:13,380
together.

4
00:00:13,800 --> 00:00:15,600
It returns a new string.

5
00:00:16,140 --> 00:00:18,090
Let's check the syntax first.

6
00:00:18,360 --> 00:00:25,110
In this syntax, the new string is a new string returned by the replace method.

7
00:00:25,140 --> 00:00:30,810
After search and replace is performed on the string.

8
00:00:31,260 --> 00:00:37,140
A string, which is actually a value in which you want to perform the search.

9
00:00:37,650 --> 00:00:46,050
It takes two parameters, so you pass the search regular expression pattern or the search string itself.

10
00:00:46,440 --> 00:00:52,260
And the second is the string you want to replace, which can be returned directly.

11
00:00:52,260 --> 00:00:58,200
Or you can have a function which is invoked when the replace operation is performed.

12
00:00:59,070 --> 00:01:01,980
At the end, it's going to return a new string.

13
00:01:02,220 --> 00:01:06,810
So when you use the replace method, there are various combinations which you can try.

14
00:01:07,200 --> 00:01:10,860
We are going to check each and every syntax one by one.

15
00:01:11,280 --> 00:01:15,780
First, we will try a simple example without regular expression.

16
00:01:16,490 --> 00:01:22,010
I'll say that SDR is equal to this method is working.

17
00:01:22,010 --> 00:01:23,060
This is a string.

18
00:01:23,870 --> 00:01:29,810
Of course I'm going to create a new string also where I say string struct replace.

19
00:01:30,570 --> 00:01:37,110
I want to find the is word and I want to replace each is word with it.

20
00:01:37,440 --> 00:01:39,400
Now let's try to display the value.

21
00:01:39,420 --> 00:01:41,820
I'll say console.log new string.

22
00:01:42,930 --> 00:01:44,190
Let's run the code.

23
00:01:46,790 --> 00:01:50,540
As you can see, the first word which we had this.

24
00:01:50,570 --> 00:01:55,160
Now it is converted into that because is is replaced with ADD.

25
00:01:56,650 --> 00:02:01,510
Now, in the very same example, we will try regular expression pattern.

26
00:02:02,050 --> 00:02:08,470
I will simply change is with a pattern and also apply the global modifier.

27
00:02:10,300 --> 00:02:11,770
Let's run the code now.

28
00:02:15,420 --> 00:02:19,080
So the pattern with the global modifier has done the job.

29
00:02:19,410 --> 00:02:23,460
All the is words are now replaced with ET.

30
00:02:23,820 --> 00:02:26,910
So the second is word is also changed.

31
00:02:27,120 --> 00:02:34,680
Now we will see a very important way of using the replace method that is giving a function as an argument.

32
00:02:34,980 --> 00:02:41,040
To understand clearly, we will change the code step by step in the existing code.

33
00:02:41,070 --> 00:02:45,920
Let's try to first give a function instead of add.

34
00:02:46,440 --> 00:02:48,430
Now let's define the function.

35
00:02:48,450 --> 00:02:52,500
I will add a few arguments in the function.

36
00:02:53,010 --> 00:02:58,590
Let's say A, B, and C, and also we will display all arguments.

37
00:02:59,460 --> 00:03:03,540
Don't worry about what this A, B, and C should be or will be.

38
00:03:03,570 --> 00:03:05,190
You will get it in a moment.

39
00:03:05,580 --> 00:03:07,140
Let's examine the output.

40
00:03:07,680 --> 00:03:11,390
First of all, there are two console log executed.

41
00:03:11,400 --> 00:03:15,780
It means function r is called for each match found.

42
00:03:16,350 --> 00:03:23,990
That is for this is and this is because there are two is matches found.

43
00:03:24,000 --> 00:03:27,120
You can see two lines of output.

44
00:03:28,270 --> 00:03:28,960
Here.

45
00:03:28,960 --> 00:03:36,760
If we compare the output, then each argument is filled with some value automatically in function.

46
00:03:36,760 --> 00:03:40,210
R Let's examine each argument.

47
00:03:40,240 --> 00:03:51,460
A Is the search string or pattern that is passed as first parameter B is two or 12 shows the index or

48
00:03:51,460 --> 00:03:58,720
position on which the word is found and C contains the actual or input string.

49
00:03:58,720 --> 00:04:04,480
So by passing the function as an argument, it will automatically receive arguments.

50
00:04:04,960 --> 00:04:10,630
There can be more arguments in the function if there are multiple search patterns.

51
00:04:10,630 --> 00:04:14,260
So it is not necessary to have just three arguments.

52
00:04:14,260 --> 00:04:23,110
For example, it can be function r you may have a BCD anything where each argument can have different

53
00:04:23,110 --> 00:04:24,640
information pieces.

54
00:04:25,180 --> 00:04:32,500
Those pieces where we have given A, B and C can have more meaningful names.

55
00:04:32,500 --> 00:04:35,080
It actually looks something like this.

56
00:04:35,080 --> 00:04:36,940
You have a function, let's say.

57
00:04:36,940 --> 00:04:41,440
R The first parameter is the match.

58
00:04:41,830 --> 00:04:44,440
Match is the matched substring.

59
00:04:44,920 --> 00:04:49,900
Then you can have multiple parameters like P, one, p two up to p n.

60
00:04:50,170 --> 00:04:53,050
These are the contents of captured group.

61
00:04:53,050 --> 00:04:58,390
If that is any captured group available, then we have the offset.

62
00:04:58,420 --> 00:05:04,180
That is the position of the match and of course we do have the input string as well.

63
00:05:04,540 --> 00:05:11,770
So all the parameters are automatically generated when you give that function as an argument inside

64
00:05:11,770 --> 00:05:17,470
the replace method, let's now try to print the value of new string.

65
00:05:17,470 --> 00:05:21,490
Also, let's add console.log new string.

66
00:05:23,270 --> 00:05:31,160
Now, if you see the output there is word is replaced with undefined and the reason is the function

67
00:05:31,160 --> 00:05:36,850
r should return a value which will be a replacement of A's world.

68
00:05:36,860 --> 00:05:38,240
So let's do that.

69
00:05:38,480 --> 00:05:41,900
I will say return at.

70
00:05:44,120 --> 00:05:45,560
Now let's run the code.

71
00:05:46,550 --> 00:05:49,220
Now we have the desired output.

72
00:05:49,430 --> 00:05:55,580
Of course, this code does not make much sense for a practical world example, but it is important to

73
00:05:55,580 --> 00:06:02,150
understand the behavior of replace method with a function as a parameter.

74
00:06:02,330 --> 00:06:08,660
We will be looking at more practical examples as we move on in this series of tutorial.

