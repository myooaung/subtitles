WEBVTT
1
00:00:00.120 --> 00:00:06.490
In this section I am discussing two more data collection or data structures that is weak map and Weak

2
00:00:06.510 --> 00:00:06.930
said.

3
00:00:07.410 --> 00:00:13.200
There are two related questions, though there are many other minor questions I'm discussing in this

4
00:00:13.200 --> 00:00:13.680
topic.

5
00:00:13.950 --> 00:00:20.310
So let's begin with weak map and weak said weak map and weak set are two more data structures provided

6
00:00:20.310 --> 00:00:21.360
by E6.

7
00:00:21.630 --> 00:00:28.590
Before we move ahead, let me inform you that you must know the concept of garbage collection.

8
00:00:28.770 --> 00:00:35.940
To get a good understanding on the topics of this section, please check the garbage collection chapter

9
00:00:35.940 --> 00:00:40.200
in the JavaScript language category before you move ahead with this section.

10
00:00:40.500 --> 00:00:42.300
All right, so I will discuss a weak map.

11
00:00:42.300 --> 00:00:46.740
First, let's assume a situation where you have a map like this.

12
00:00:47.190 --> 00:00:51.840
Inside this map, you just want to put an object as a key.

13
00:00:52.050 --> 00:01:00.780
Say, for example, like this now this key in case, which is an object at a later stage, if you set

14
00:01:00.780 --> 00:01:05.160
it to null or for some reason this object gets free.

15
00:01:05.760 --> 00:01:13.260
So internally it will be something like this where you have this object and the location of this value,

16
00:01:13.260 --> 00:01:17.370
for example, name will be something like this.

17
00:01:17.700 --> 00:01:24.810
So when the object is set to null, this value which is added as a key inside the map, will not be

18
00:01:24.810 --> 00:01:28.200
removed even if the garbage collection is executed.

19
00:01:28.500 --> 00:01:34.080
Actually, this value is a kind of value which has lost the parent reference.

20
00:01:34.080 --> 00:01:36.900
This object is set to know so the reference is gone.

21
00:01:37.170 --> 00:01:42.570
But still, because you have added it to map collection, when the garbage collection is executed,

22
00:01:42.750 --> 00:01:49.110
this will not be removed because it is strongly held by map that is weak.

23
00:01:49.110 --> 00:01:52.860
Map holds these keys weakly.

24
00:01:53.010 --> 00:01:55.590
That is, these keys are held weekly.

25
00:01:55.740 --> 00:02:04.680
So what happens if you set this as a weak map instead of map, then this particular value when it is

26
00:02:04.920 --> 00:02:11.670
set to null and if the garbage collection is executed, this value will also be removed from the collection,

27
00:02:12.000 --> 00:02:13.590
which doesn't happen with the map.

28
00:02:13.980 --> 00:02:19.830
So this is the whole concept of holding the keys vertically or in a strong manner.

29
00:02:20.130 --> 00:02:21.240
Map and set.

30
00:02:21.540 --> 00:02:28.920
Hold the keys in a strong way, whereas weak map and weak set are basically holding it weekly.

31
00:02:28.920 --> 00:02:33.510
That's the only difference we see while using weak map and Weak said.

32
00:02:33.750 --> 00:02:38.760
Let's discuss about few points where the weak map is really different.

33
00:02:39.030 --> 00:02:42.810
Number one, keys in the weak map are only objects.

34
00:02:43.020 --> 00:02:50.340
You cannot have primitive keys like string number, etc., which we did with map number two.

35
00:02:50.520 --> 00:02:58.410
Keys are weak or weakly held, and it means if the keys are garbage collector, so do the values.

36
00:02:58.620 --> 00:03:07.560
Number three because of weak keys, weak map collection does not have iterable methods like keys, values

37
00:03:07.560 --> 00:03:08.550
or entries.

38
00:03:08.760 --> 00:03:14.760
And number four, weak collections do not hold values when the garbage is collected.

39
00:03:15.720 --> 00:03:16.950
This is very handy.

40
00:03:17.130 --> 00:03:24.960
With the dome there dom nodes are removed and garbage collector locations will be free as they are not

41
00:03:24.960 --> 00:03:26.100
held strongly.

42
00:03:26.430 --> 00:03:29.250
Just to have an example, let's see this score.

43
00:03:31.810 --> 00:03:33.000
If I run this code.

44
00:03:34.660 --> 00:03:40.630
As you can see, that it is giving the error because the key here, the pickle is a string and is not

45
00:03:40.630 --> 00:03:41.260
an object.

46
00:03:41.740 --> 00:03:45.250
So if I want to create a weak map, this is how I'm going to do it.

47
00:03:45.610 --> 00:03:47.890
Like product is equal to new weak map.

48
00:03:49.040 --> 00:03:50.600
Now I'm going to have an object.

49
00:03:51.230 --> 00:03:57.650
And as you can see now I'm using product dot set and I'm writing the object itself and setting a value.

50
00:03:57.650 --> 00:04:03.860
Also, as long as getting a value values concerned, certainly we can have the get method with the vehicle

51
00:04:03.860 --> 00:04:04.130
map.

52
00:04:04.130 --> 00:04:11.580
Also we do have has method as well, but all those iteration methods, we cannot have it week, map,

53
00:04:11.580 --> 00:04:16.760
body when we said so let's try this, let's run the code and see what happens so we get the value here.

54
00:04:18.630 --> 00:04:24.300
Weak site is also weakly held collection of objects and that two unique ones.

55
00:04:24.540 --> 00:04:31.920
The behavior is the same as weak map values are removed on garbage collection if there is no direct

56
00:04:31.920 --> 00:04:33.270
reference of the object.

57
00:04:33.540 --> 00:04:36.120
Let's create one example with weak set.

58
00:04:36.960 --> 00:04:40.770
I'll select product is equal to new weak set.

59
00:04:41.920 --> 00:04:43.840
Let me try an object here.

60
00:04:48.280 --> 00:04:49.270
Let's run the court.

61
00:04:49.870 --> 00:04:52.480
As you can see that it displays the values here.

62
00:04:52.480 --> 00:04:53.620
But this is a weak set.

63
00:04:53.650 --> 00:05:00.280
Now, we cannot see that how a garbage collection happens and these values are lost because this process

64
00:05:00.280 --> 00:05:03.950
is something which is executed behind the scene.

65
00:05:03.970 --> 00:05:08.440
But you can get the idea, in which case you can use weak map.

66
00:05:08.800 --> 00:05:16.000
These weak collections are also used when you want to make sure that there is no memory leakages because

67
00:05:16.150 --> 00:05:23.530
whenever there is a garbage collection executed, the lost references value that is not reachable.

68
00:05:23.530 --> 00:05:25.270
Values are always cleared.

69
00:05:25.480 --> 00:05:27.160
They are cleared from the collection.

70
00:05:27.160 --> 00:05:29.260
Also, they are removed from the collection also.

71
00:05:29.680 --> 00:05:35.260
So in a way you are making sure by using the collections that that is no leakages.

72
00:05:35.470 --> 00:05:41.230
Of course, if your code is written in a proper way, the references are properly removed in a proper

73
00:05:41.230 --> 00:05:41.890
sequence.

74
00:05:42.070 --> 00:05:45.580
Then anyway, you will not face any memory leakage issue.

75
00:05:45.880 --> 00:05:53.440
And I have already mentioned in garbage collection discussion that the newer browsers are far better

76
00:05:53.800 --> 00:05:56.560
when it comes to dealing with memory management.

77
00:05:57.570 --> 00:05:59.970
There are two related questions to this topic.

78
00:06:00.120 --> 00:06:04.220
The first question is the difference between map and weak map.

79
00:06:04.230 --> 00:06:07.110
So we have already seen that these are the differences.

80
00:06:11.010 --> 00:06:14.970
And the second question is the difference between set and week set.

81
00:06:15.270 --> 00:06:18.540
So these are the points you can consider for the difference.

