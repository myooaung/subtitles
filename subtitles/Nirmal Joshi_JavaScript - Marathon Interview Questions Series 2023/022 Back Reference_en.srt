1
00:00:00,090 --> 00:00:04,290
In the previous section, we understood the concept of group capturing.

2
00:00:04,320 --> 00:00:12,480
We also learned about how do we access a captured group and refer to it with dollar and the number or

3
00:00:12,480 --> 00:00:16,710
with question mark and the group name that is the named group.

4
00:00:17,100 --> 00:00:23,880
Now, in this section we will see one more excellent feature called Back Reference of a captured group.

5
00:00:24,480 --> 00:00:28,200
Let's create a core sample and work on the concept.

6
00:00:28,500 --> 00:00:37,350
We will search for number divided by a dash, also creating a group as we want to try back references

7
00:00:37,350 --> 00:00:38,220
later on.

8
00:00:38,250 --> 00:00:40,650
Otherwise, group is not needed.

9
00:00:40,650 --> 00:00:43,830
In this example, I'll declare a variable.

10
00:00:43,830 --> 00:00:50,580
I'll say let str is equal to code is one, 235678.

11
00:00:50,700 --> 00:00:53,820
And here I say four or five six.

12
00:00:53,820 --> 00:00:55,650
Dash four, five, six.

13
00:00:56,700 --> 00:01:03,930
Let's first of all create a simple pattern where I have a group four digit before a dash and after the

14
00:01:03,930 --> 00:01:04,590
dash.

15
00:01:05,690 --> 00:01:08,780
And I'll try to console.log with the match method.

16
00:01:08,840 --> 00:01:10,160
Let's run the code.

17
00:01:10,790 --> 00:01:15,290
So it searched for two numbers and returned the output.

18
00:01:16,010 --> 00:01:17,780
The groups are created.

19
00:01:17,780 --> 00:01:26,450
And if we want to refer to a group on the next line, in any method, we use dollar and group number.

20
00:01:26,840 --> 00:01:31,610
But what if we want to use the group in the pattern itself?

21
00:01:31,820 --> 00:01:40,160
Let's say we want to find only those numbers where the digits before dash and after dash are same.

22
00:01:40,990 --> 00:01:48,010
For example, in the above code it should return only 456-456.

23
00:01:48,010 --> 00:01:52,960
That is, both the values before and after dash should be same.

24
00:01:52,960 --> 00:02:00,360
It means whatever is found with the first group should be there after the dash.

25
00:02:00,370 --> 00:02:07,690
It means the value of group one needs to be back referenced in the pattern itself.

26
00:02:08,199 --> 00:02:13,330
In such a case you can use backslash and the group number.

27
00:02:13,330 --> 00:02:17,350
So here we want to refer to the value of the first group.

28
00:02:17,350 --> 00:02:19,570
So we will write slash one.

29
00:02:19,930 --> 00:02:27,700
Let's change the pattern instead of second slash D Plus we will refer to the value of the first group

30
00:02:27,700 --> 00:02:29,500
in the pattern itself.

31
00:02:29,500 --> 00:02:39,820
So the pattern will be slash D plus dash backslash one where one is a back reference of value captured

32
00:02:39,820 --> 00:02:41,050
in group one.

33
00:02:41,880 --> 00:02:43,290
Now let's run the code.

34
00:02:46,110 --> 00:02:48,570
Now it finds only one number.

35
00:02:48,570 --> 00:02:56,010
As a result, in spite of two numbers existing in the string, because that is only one number which

36
00:02:56,010 --> 00:03:04,650
is having the same value before and after Daesh and this kind of search we can achieve using regular

37
00:03:04,650 --> 00:03:05,460
expression.

38
00:03:05,460 --> 00:03:13,980
If we have a back reference facility, remember using group with a number that is dollar curly brackets

39
00:03:13,980 --> 00:03:21,120
and the number is different as it cannot be used in the pattern itself, whereas the back reference

40
00:03:21,120 --> 00:03:28,710
allows you to refer the value found by the first group or the captured group in the pattern itself.

41
00:03:29,070 --> 00:03:33,750
You can also use the back reference feature with the named group as well.

42
00:03:33,750 --> 00:03:36,960
Let's check that too with a practical example.

43
00:03:37,990 --> 00:03:45,330
Assume that we give a name, zip code to the first group, then to refer the group name, we will use

44
00:03:45,330 --> 00:03:48,450
backslash K in the angled brackets.

45
00:03:48,450 --> 00:03:51,030
We are going to provide name of the group.

46
00:03:51,030 --> 00:03:53,490
So in our case it will be zip code.

47
00:03:53,670 --> 00:03:57,710
Let's change the pattern and run the code here in the pattern.

48
00:03:57,720 --> 00:03:58,480
What will I do?

49
00:03:58,500 --> 00:04:01,890
I'll use a question mark if you remember to name a group.

50
00:04:01,890 --> 00:04:05,400
So the group will be captured with zip code.

51
00:04:05,430 --> 00:04:07,260
That is the name of the group.

52
00:04:07,650 --> 00:04:15,570
Dash Now, instead of writing backslash one, I will say backslash K, and then I'm going to mention

53
00:04:15,570 --> 00:04:17,430
the name of the group here.

54
00:04:17,670 --> 00:04:18,550
That's it.

55
00:04:18,570 --> 00:04:19,890
Let's run the code.

56
00:04:21,410 --> 00:04:27,470
Still, the output is the same, whereas we have used group name instead of the group number.

57
00:04:28,010 --> 00:04:34,700
So this is how back reference facility can be useful when we capture the group and we try to use the

58
00:04:34,700 --> 00:04:38,870
search value by the captured group in the pattern itself.

