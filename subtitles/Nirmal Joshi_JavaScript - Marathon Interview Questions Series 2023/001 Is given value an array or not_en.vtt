WEBVTT
1
00:00:01.950 --> 00:00:07.560
This exercise is about checking whether the given value is at a or not.

2
00:00:08.010 --> 00:00:14.550
Now, when I mentioned this that you have to check the data type or the type of value, the first thing

3
00:00:14.550 --> 00:00:18.420
may come in your mind is the type of operator.

4
00:00:18.870 --> 00:00:22.230
Let's first of all, create an added, I'll say, error.

5
00:00:22.680 --> 00:00:24.510
Let's also put a few elements in it.

6
00:00:25.200 --> 00:00:28.740
If I cancel the type of error.

7
00:00:29.830 --> 00:00:31.060
Let's see what happens.

8
00:00:33.120 --> 00:00:34.200
It says object.

9
00:00:34.500 --> 00:00:41.910
So here you do not get the idea whether it is an ADI or not because Adi is considered as an object in

10
00:00:41.910 --> 00:00:43.110
JavaScript anyway.

11
00:00:43.620 --> 00:00:45.960
Then there is the two string method.

12
00:00:46.500 --> 00:00:54.870
If two string method is used with the call method, then you can get whether it is a number string A-D

13
00:00:55.050 --> 00:00:57.030
or different type of values.

14
00:00:57.300 --> 00:00:58.410
Let's check it once.

15
00:00:58.920 --> 00:01:01.740
I will say object dart.

16
00:01:02.970 --> 00:01:04.200
Prototype dot.

17
00:01:05.410 --> 00:01:08.500
To string Dodd Col.

18
00:01:10.610 --> 00:01:13.760
And inside the column, I'm going to pass the addy.

19
00:01:14.180 --> 00:01:16.580
Let's run the call and see what is the output.

20
00:01:18.200 --> 00:01:24.370
Now as you see that it doesn't only display it is an object, but it also displays that it is and adding,

21
00:01:25.220 --> 00:01:26.600
how come this has happened?

22
00:01:27.020 --> 00:01:28.790
It is the two string method.

23
00:01:29.210 --> 00:01:31.100
If it is used with the call.

24
00:01:31.220 --> 00:01:34.730
Now if you want to know more about call, apply and bind.

25
00:01:35.000 --> 00:01:37.670
I have already discussed that in one of the section.

26
00:01:38.090 --> 00:01:41.730
So you can just check what call apply and buying odd.

27
00:01:42.290 --> 00:01:45.050
So when you are using the two string matter with call.

28
00:01:45.230 --> 00:01:51.770
Ideally whenever you pass one, add a that is the reference given to this call method.

29
00:01:51.980 --> 00:01:59.300
So the object dot prototype dot to string with a call method can differentiate the data type in a more

30
00:01:59.300 --> 00:02:00.080
better way.

31
00:02:00.410 --> 00:02:03.410
In fact, because it is a global object.

32
00:02:03.470 --> 00:02:06.350
You can avoid writing this object or prototype.

33
00:02:06.530 --> 00:02:09.560
You can keep only the two string, not call.

34
00:02:09.800 --> 00:02:10.970
Then you passed the add.

35
00:02:11.600 --> 00:02:12.560
Let me run this.

36
00:02:13.980 --> 00:02:15.570
You see that the output is similar?

37
00:02:15.960 --> 00:02:19.620
Now, in this question, we have to check whether it is an ad or not.

38
00:02:19.650 --> 00:02:22.860
So the only thing remaining is that you have to put an if conditions.

39
00:02:22.860 --> 00:02:30.720
I am going to say if this is object add a, then I might say true or I can return.

40
00:02:30.720 --> 00:02:33.240
I can write this in a function and I can return it.

41
00:02:33.450 --> 00:02:35.430
But you get the gist of what I am saying.

42
00:02:35.430 --> 00:02:35.850
So.

43
00:02:36.820 --> 00:02:38.140
And he had, I'll say, false.

44
00:02:38.560 --> 00:02:41.920
Now I can create a function also, but we live with this for the moment.

45
00:02:42.250 --> 00:02:43.690
So let's run this code now.

46
00:02:45.450 --> 00:02:52.010
As you can see, it says now that it is true, let's change the value of adding the variable that decides

47
00:02:52.020 --> 00:02:54.510
the test only and run it.

48
00:02:55.380 --> 00:02:56.460
So you'd say it's false.

49
00:02:56.820 --> 00:03:02.730
So to string that call is very useful when you have to deal with more detailed type of values.

