WEBVTT
1
00:00:00.090 --> 00:00:05.430
In this section we are discussing questions are the concept about restructuring.

2
00:00:06.120 --> 00:00:08.390
This is about added restructuring.

3
00:00:08.400 --> 00:00:11.340
So I am putting this question into added category.

4
00:00:11.610 --> 00:00:14.130
There will be four related questions to this topic.

5
00:00:14.400 --> 00:00:19.140
As the name restructuring says that something is getting this structure.

6
00:00:19.440 --> 00:00:25.110
It also means that is already a structure which is getting broken.

7
00:00:25.290 --> 00:00:28.590
When I say structure, it means the data structure.

8
00:00:28.800 --> 00:00:37.680
So this structuring is a concept of breaking data structure like eddy or object literal into data pieces

9
00:00:37.830 --> 00:00:40.950
or in other words, individual variables.

10
00:00:41.040 --> 00:00:46.590
In this section we are discussing added restructuring for object, literally structuring.

11
00:00:46.740 --> 00:00:49.110
You can check the audio section.

12
00:00:49.290 --> 00:00:52.350
Added restructuring will look something like this.

13
00:00:52.920 --> 00:00:57.370
Now, if you observe this figure, that is an array of four elements.

14
00:00:57.720 --> 00:01:04.830
Generally, if you want to assign each element to a variable, you will write something like this where

15
00:01:04.830 --> 00:01:07.050
you see it is equal to adding name.

16
00:01:07.200 --> 00:01:08.910
In this square bracket you put zero.

17
00:01:08.910 --> 00:01:10.710
That is the index number, right?

18
00:01:10.950 --> 00:01:17.070
You go with B is equal to again adding name one and so on instead of that.

19
00:01:17.250 --> 00:01:19.320
That is a way to de structure.

20
00:01:19.500 --> 00:01:23.700
If you set the structure, that means you have a specific syntax of writing it.

21
00:01:24.000 --> 00:01:31.890
Then all the values are automatically extracted from the array and assign to individual variables.

22
00:01:32.140 --> 00:01:32.520
How?

23
00:01:32.760 --> 00:01:34.560
Let's try with a practical example.

24
00:01:34.860 --> 00:01:37.770
I'll create an array of four elements.

25
00:01:38.280 --> 00:01:44.910
Again, I'll say same values 80, 90, 93, and let's say 26.

26
00:01:45.150 --> 00:01:51.510
What I want is I want to have four variables in which I want these values to be extracted.

27
00:01:52.050 --> 00:01:54.480
So I say, let now see this.

28
00:01:55.050 --> 00:02:02.190
If I write a comma, B comma C comedy is equal to a sign that added to it, then this is not valid.

29
00:02:02.310 --> 00:02:08.009
The reason is you cannot have a list of variables where you are planning to assign individual values.

30
00:02:08.009 --> 00:02:14.160
And you also have to explain to the JavaScript that I am de structuring the ADD.

31
00:02:14.430 --> 00:02:19.890
So what you do is you put these list of variables into square brackets.

32
00:02:20.160 --> 00:02:24.660
Remember when you are looking at this, this is actually not an ad.

33
00:02:25.170 --> 00:02:27.330
This is the syntax of the structuring.

34
00:02:27.330 --> 00:02:34.440
Always remember that when you see square brackets on left hand side, that's actually not added.

35
00:02:34.500 --> 00:02:36.730
It's actually de structuring and adding.

36
00:02:37.020 --> 00:02:43.770
So now what will happen looking at the syntax array will be de structure and individual values will

37
00:02:43.770 --> 00:02:46.560
be assigned to A, B, C and D respectively.

38
00:02:46.770 --> 00:02:49.750
Let's try to display all variables here.

39
00:02:49.770 --> 00:02:52.270
I'll say a comma, become a C, comma, D.

40
00:02:52.890 --> 00:02:56.100
I'll save this and let's run the code.

41
00:02:57.000 --> 00:03:04.470
Now you see that we have tried to display individual variables and they all have these different values.

42
00:03:04.710 --> 00:03:07.920
So that's how a D structuring ad works.

43
00:03:08.280 --> 00:03:12.990
It might also happen that this add a is returned by a function.

44
00:03:12.990 --> 00:03:15.240
Let's say I have a function called.

45
00:03:17.040 --> 00:03:24.060
Function test and this returns and add I just cut this at from this place.

46
00:03:25.350 --> 00:03:30.720
And pasted here, there might be some variable which will have this added, but at the moment I just

47
00:03:30.810 --> 00:03:31.800
returned this addy.

48
00:03:31.980 --> 00:03:35.110
Now here I'm going to call the function.

49
00:03:35.130 --> 00:03:36.660
Now, what does this function return?

50
00:03:36.690 --> 00:03:37.620
It returns an ad.

51
00:03:37.980 --> 00:03:39.630
So now we are restructuring it.

52
00:03:39.630 --> 00:03:42.930
So again, you run the output, this very scene.

53
00:03:43.440 --> 00:03:48.390
So that's how you can return an array from a function which is directly this structure.

54
00:03:48.390 --> 00:03:51.750
So you might see that list of variables and a function.

55
00:03:51.780 --> 00:03:52.770
Don't get confused.

56
00:03:52.770 --> 00:03:58.530
It is just that you must be sure that this function is returning an array and getting the structure.

57
00:03:59.010 --> 00:04:04.590
Sometimes it might happen that you do not want this 90 to be part of B.

58
00:04:04.590 --> 00:04:07.980
Let's say you want this element to be blank right now.

59
00:04:07.980 --> 00:04:09.780
This could have been here as well.

60
00:04:09.810 --> 00:04:10.830
Or let me do that.

61
00:04:11.460 --> 00:04:13.710
Let me put this thing back.

62
00:04:15.830 --> 00:04:19.399
Right now, you just uncomment and remove the function.

63
00:04:22.400 --> 00:04:30.230
Let me put A2 here now in case if you do not want that this 90 should be assigned to be.

64
00:04:30.530 --> 00:04:35.480
Then you can keep this as a blank value.

65
00:04:35.840 --> 00:04:37.760
So 90 will not be stored anywhere.

66
00:04:38.090 --> 00:04:42.710
E, C and D will have 80, 93 and 26 respectively.

67
00:04:42.950 --> 00:04:47.580
I forgot to remove the B, so I'll do that because there is no such thing.

68
00:04:47.580 --> 00:04:48.110
Colby.

69
00:04:49.280 --> 00:04:52.400
So now you see 1893 and 26.

70
00:04:52.820 --> 00:04:55.520
So you may want to avoid assignment.

71
00:04:55.520 --> 00:04:58.340
In some case, it's possible with restructuring structuring.

72
00:04:58.850 --> 00:05:03.220
There is also one tricky example which we can try like swapping values.

73
00:05:03.230 --> 00:05:08.210
Let's say it is equal to four, let b is equal to five.

74
00:05:08.540 --> 00:05:10.250
So now you have two variables here.

75
00:05:10.490 --> 00:05:11.120
See this?

76
00:05:11.840 --> 00:05:14.480
I'll say E, comma b.

77
00:05:15.930 --> 00:05:22.050
Is equal to be comma and I'll display cancel out a comma b.

78
00:05:22.440 --> 00:05:29.730
So the tricky thing here is you have E and B two variables which you are putting as part of adding.

79
00:05:29.910 --> 00:05:36.690
And because you have this structuring, what you do is you assign B to A directly and A to B directly

80
00:05:36.690 --> 00:05:37.800
in traditional language.

81
00:05:37.800 --> 00:05:45.000
We used to have third variable which stores the value and then you swap it here with the structuring,

82
00:05:45.090 --> 00:05:46.530
you directly do it right.

83
00:05:46.530 --> 00:05:47.850
So if I just say.

84
00:05:49.290 --> 00:05:53.360
You see it is FIFO and B is for.

85
00:05:53.370 --> 00:05:56.610
So with restructuring you can play with the code like this.

86
00:05:57.060 --> 00:06:01.050
You can also use the rest operator with the restructuring.

87
00:06:01.470 --> 00:06:09.450
For example, the area which you have, let's say led era is equal to, you have four or five and six.

88
00:06:09.480 --> 00:06:16.140
Now what you want is you assign the era here, and in this case you will simply say, dot, dot, dot,

89
00:06:16.140 --> 00:06:16.680
that's it.

90
00:06:17.850 --> 00:06:21.750
And you are going to declare this with maybe a letter const keyword.

91
00:06:21.990 --> 00:06:22.500
That's it.

92
00:06:23.790 --> 00:06:31.770
So now it will become four and B will be an area containing two elements that is five and six.

93
00:06:32.070 --> 00:06:35.730
So these are various combinations you can try with the structuring.

94
00:06:36.000 --> 00:06:40.430
That is one more point, and that is about having a default value.

95
00:06:40.440 --> 00:06:46.260
Let's say this add a doesn't have the second value, it just has only one value.

96
00:06:46.620 --> 00:06:54.630
So now if I run this, it does have four, but b is undefined in case if it is undefined and you want

97
00:06:54.630 --> 00:06:56.550
to just have zero in B.

98
00:06:57.030 --> 00:06:59.560
So here you can assign equal to zero.

99
00:06:59.580 --> 00:07:00.090
That's it.

100
00:07:00.810 --> 00:07:02.920
This is how you define the default value.

101
00:07:02.940 --> 00:07:04.990
This is a very common thing in ethics.

102
00:07:05.010 --> 00:07:08.010
You also do the same thing with functions also.

103
00:07:08.280 --> 00:07:10.380
So let me run this.

104
00:07:11.220 --> 00:07:13.950
Now you see it has zero if there is no value.

105
00:07:13.980 --> 00:07:20.700
Now, if I add a value here, let's say six and run this, then it will have six.

106
00:07:20.700 --> 00:07:25.050
So this is a default value implementation you can do with this structuring as well.

107
00:07:25.980 --> 00:07:28.530
Now let's discuss related questions of this topic.

108
00:07:30.260 --> 00:07:33.620
So what is the restructuring assignment?

109
00:07:33.650 --> 00:07:37.670
It is actually called as the structuring assignment or restructuring.

110
00:07:37.850 --> 00:07:42.330
It's about extracting the databases from adding our object later.

111
00:07:42.350 --> 00:07:44.780
But in this section we are discussing only ADD.

112
00:07:44.930 --> 00:07:50.660
So we are extracting the databases from ADI and assigning it to individual variables.

113
00:07:50.690 --> 00:07:53.840
That's the process we do when we say structuring.

114
00:07:56.060 --> 00:07:59.900
The second question is swab values using restructuring.

115
00:08:00.200 --> 00:08:01.490
We have already seen this.

116
00:08:01.520 --> 00:08:05.210
This is the code which helps you to swab the values.

117
00:08:08.520 --> 00:08:12.150
So the third question is what will be the output of this score?

118
00:08:12.420 --> 00:08:18.570
So here we have A, B and C, but while assigning that only two values, one value is blank.

119
00:08:18.930 --> 00:08:23.610
So if there is no value, you, you know that JavaScript returns undefined.

120
00:08:23.610 --> 00:08:26.010
So we will have undefined in this case.

121
00:08:28.300 --> 00:08:34.600
And the fourth question is how will you set a default value vhile d structuring an ad.

122
00:08:34.730 --> 00:08:40.059
So here, let's say in this example, I just want to have a default value zero here, which we have

123
00:08:40.059 --> 00:08:40.780
already seen.

124
00:08:41.500 --> 00:08:45.430
So now if I run, we have zero as a default value.

125
00:08:46.030 --> 00:08:49.960
So this is how you assign a default value while D structuring and adding.

