1
00:00:00,060 --> 00:00:03,960
Welcome to the first asynchronous JavaScript section's question.

2
00:00:04,290 --> 00:00:10,890
The first question we are going to deal with is what is a callback function, which is a base of all

3
00:00:10,890 --> 00:00:12,270
asynchronous processes?

4
00:00:12,720 --> 00:00:15,420
That will be two related questions to this topic.

5
00:00:16,430 --> 00:00:24,890
Callback functions nowadays are replaced with promises and async await, but yet it's important to know

6
00:00:24,890 --> 00:00:28,320
and you do face a lot of questions regarding it.

7
00:00:28,340 --> 00:00:30,260
So let's begin with an example.

8
00:00:30,320 --> 00:00:35,060
Callback functions are used when that is an asynchronous process.

9
00:00:35,300 --> 00:00:39,980
So first of all, let's discuss what is an asynchronous process.

10
00:00:39,980 --> 00:00:41,690
Let's look at an example.

11
00:00:41,930 --> 00:00:45,620
Assume that we have a function fetch data.

12
00:00:46,130 --> 00:00:50,570
This has an API call which fetches data from a server.

13
00:00:50,690 --> 00:00:56,090
So the process which the fetch data function contains, it is going to take some time.

14
00:00:56,240 --> 00:01:01,730
A process which takes some time to execute is an asynchronous process.

15
00:01:01,820 --> 00:01:08,820
It means that that process doesn't execute immediately, but it needs some time to finish the job.

16
00:01:08,840 --> 00:01:16,340
At the moment I'm not attaching any API call, but at least we can fake the asynchronous process with

17
00:01:16,340 --> 00:01:18,340
a function called set timeout.

18
00:01:18,650 --> 00:01:25,100
This will have an arrow function and let's say whatever process we have inside this set timeout that

19
00:01:25,100 --> 00:01:30,230
will be executed after 2000 milliseconds, that is after 2 seconds.

20
00:01:30,560 --> 00:01:38,360
Assume that the fetch data has some API which is fetching the data and that is assigned to an object

21
00:01:38,360 --> 00:01:39,080
call data.

22
00:01:39,080 --> 00:01:40,070
Let me write this here.

23
00:01:40,070 --> 00:01:43,880
I'll say data is equal to, let's say product code.

24
00:01:45,330 --> 00:01:47,070
And product name.

25
00:01:49,510 --> 00:01:54,310
So this is a piece of data which I am just writing as a fixed value.

26
00:01:54,640 --> 00:02:00,910
But generally we will have an Ajax call which would be fetching some data from the server and that will

27
00:02:00,910 --> 00:02:03,070
be filled in this data object.

28
00:02:03,310 --> 00:02:08,289
Now there is one more function we assume that is for displaying data.

29
00:02:08,289 --> 00:02:09,550
So I will say display data.

30
00:02:10,180 --> 00:02:16,480
And what this function does is that the data, it is fetched that we want to display.

31
00:02:16,630 --> 00:02:17,170
That's it.

32
00:02:17,410 --> 00:02:20,820
Imagine that I'm having here a few lines.

33
00:02:20,830 --> 00:02:24,160
I'm just writing that this program starts here.

34
00:02:24,220 --> 00:02:26,770
Then we call the fetch data.

35
00:02:26,980 --> 00:02:30,850
After the data is fetched, we want to display the data.

36
00:02:30,860 --> 00:02:32,500
That's what we want to execute.

37
00:02:32,680 --> 00:02:39,190
And here, after the data is displayed, I just want to see console.log that the program ends here.

38
00:02:39,580 --> 00:02:40,090
That's it.

39
00:02:40,330 --> 00:02:42,490
I'll just start here and.

40
00:02:43,880 --> 00:02:44,600
And here.

41
00:02:45,290 --> 00:02:45,800
That's it.

42
00:02:46,340 --> 00:02:50,180
Now, let's try to execute this and see what happens.

43
00:02:54,360 --> 00:02:59,990
If you look at the output, it says that starts here, which is actually the first line of the core.

44
00:03:00,060 --> 00:03:01,680
Then it goes to fetch data.

45
00:03:01,710 --> 00:03:07,680
Now fetch data has said time out, which is going to take 2000 milliseconds.

46
00:03:07,680 --> 00:03:14,100
And by the time that display data is executed because it moves, the programming control moves on the

47
00:03:14,100 --> 00:03:18,090
next line and display data tries to display data.

48
00:03:18,270 --> 00:03:26,910
But by the time this assignment is not executed, so the data which we want to display displays undefined

49
00:03:27,030 --> 00:03:28,200
and ends here.

50
00:03:28,500 --> 00:03:32,220
Now, this process, the fetch data has asynchronous process.

51
00:03:32,220 --> 00:03:35,700
That is a process which is taking some time to execute.

52
00:03:35,880 --> 00:03:42,660
We warned that unless the fetch data is over, this display data should not be executed.

53
00:03:42,990 --> 00:03:45,810
This is where callback function comes in.

54
00:03:45,810 --> 00:03:46,110
Help.

55
00:03:46,470 --> 00:03:49,680
Let's try to write a callback function straightaway.

56
00:03:49,950 --> 00:03:52,510
Now I'm not going to call the display data here.

57
00:03:52,530 --> 00:03:56,460
Instead, the function which we have here, this entire function.

58
00:03:56,670 --> 00:04:01,770
This I will paste as a parameter of the fetch data.

59
00:04:01,950 --> 00:04:07,210
Now the display data function is passed to fetch data as a parameter.

60
00:04:07,230 --> 00:04:12,690
Let's say I take a variable here, which is actually not a variable, but it's an object of type function.

61
00:04:12,840 --> 00:04:16,950
So this CB that is callback will have reference of this function.

62
00:04:17,160 --> 00:04:21,010
Not only that, I don't even need to give a name to the function now.

63
00:04:21,029 --> 00:04:23,490
So we are writing an anonymous function here.

64
00:04:23,610 --> 00:04:30,510
So the fetch data, when the fetch data is executed, it's going to first of all, pass this function

65
00:04:30,960 --> 00:04:33,540
and this function is passed to CB.

66
00:04:33,720 --> 00:04:40,560
Now, unless this job is over, that exact timeout is over, we will wait and then we are going to call

67
00:04:40,560 --> 00:04:41,580
the CB.

68
00:04:41,580 --> 00:04:42,870
That is the callback function.

69
00:04:43,350 --> 00:04:43,860
That's it.

70
00:04:44,370 --> 00:04:45,450
So now what happens?

71
00:04:45,660 --> 00:04:47,790
Fetch data is called the function.

72
00:04:47,790 --> 00:04:49,850
The anonymous function is passed to CB.

73
00:04:49,860 --> 00:04:54,750
Now it will wait, the data will be assigned and then the callback function will be called.

74
00:04:55,020 --> 00:04:58,890
Now let's try to execute this and see how the output is.

75
00:04:59,250 --> 00:05:06,750
Now it is waiting for 2 seconds and then after the data is displayed here, then it is and here.

76
00:05:07,050 --> 00:05:08,730
So now the purpose is solved.

77
00:05:08,940 --> 00:05:12,090
This is the purpose of callback function.

78
00:05:12,240 --> 00:05:17,850
That because earlier the display data was not waiting for fetch data to finish.

79
00:05:18,000 --> 00:05:24,210
So what we did, we just wrote the function as a parameter in fetch data.

80
00:05:24,510 --> 00:05:26,430
This is a very practical example.

81
00:05:26,790 --> 00:05:32,430
The only thing is, instead of this data assignment, you can have an API call.

82
00:05:32,490 --> 00:05:36,150
In fact, we may not have this data here in the same scope.

83
00:05:36,210 --> 00:05:40,290
Assume that this fetch data does not belong to you.

84
00:05:40,290 --> 00:05:44,910
That is, you are writing just this calling of fetch data.

85
00:05:44,940 --> 00:05:48,060
But fetch data is written by some server side programmer.

86
00:05:48,360 --> 00:05:54,390
So this person, the fetch data programmer should do is he should pass the data here.

87
00:05:54,990 --> 00:06:00,710
So the data is locally defined and I can directly write it here.

88
00:06:00,780 --> 00:06:04,290
I say let data.

89
00:06:04,620 --> 00:06:09,150
So the callback, the data is received by this function.

90
00:06:10,270 --> 00:06:13,640
This function will receive the data and that gets displayed.

91
00:06:13,660 --> 00:06:17,320
This is a more appropriate way of writing a callback function.

92
00:06:17,320 --> 00:06:19,720
So let me just execute this.

93
00:06:22,340 --> 00:06:24,530
Now we have the desired output.

94
00:06:24,680 --> 00:06:31,340
We started with a practical example, but now let's try to understand the syntax of callback function.

95
00:06:31,760 --> 00:06:37,310
The syntax of callback function is that let's say you have a function function name, which you are

96
00:06:37,310 --> 00:06:38,240
calling actually.

97
00:06:38,840 --> 00:06:41,420
So I'll say function name inside that.

98
00:06:41,690 --> 00:06:46,850
If you have a function as a parameter, then that is a callback function.

99
00:06:46,970 --> 00:06:53,450
The general definition you see of callback function is that a function as a parameter in another function.

100
00:06:53,600 --> 00:06:55,010
But that's not the only thing.

101
00:06:55,010 --> 00:06:58,460
The purpose of callback is actually justified.

102
00:06:58,670 --> 00:07:05,240
When you are handling a kind of asynchronous process, otherwise just for the sake of writing callback

103
00:07:05,240 --> 00:07:07,820
function, it won't be of any use.

104
00:07:08,240 --> 00:07:13,400
Let us also one more time easily understand how do we deal with a callback function?

105
00:07:13,490 --> 00:07:21,590
Assume that I have a function called Custom Square which returns the square, but it takes some time.

106
00:07:21,590 --> 00:07:29,750
So again, I'm defining this custom square that is C scar as an asynchronous process function, right?

107
00:07:29,750 --> 00:07:31,490
So this will actually return.

108
00:07:31,490 --> 00:07:32,390
What will it return?

109
00:07:32,390 --> 00:07:35,810
It will return the number which is passed to this function.

110
00:07:35,960 --> 00:07:41,270
But after a few seconds, I'll say return and into end the number.

111
00:07:41,270 --> 00:07:41,840
Into number.

112
00:07:41,840 --> 00:07:51,470
Now let's call the function I'll select result is equal to C scar, custom square and two and then we

113
00:07:51,740 --> 00:07:53,120
display the result.

114
00:07:56,250 --> 00:07:56,800
Return.

115
00:07:57,360 --> 00:07:58,230
Let's run this.

116
00:07:59,280 --> 00:08:02,220
So again, the same problem is executed.

117
00:08:02,220 --> 00:08:06,180
That result will have undefined because it goes on the next line.

118
00:08:06,420 --> 00:08:10,050
By the time the values return, the next line is executed.

119
00:08:10,260 --> 00:08:13,790
Now to resolve this again, we can create a callback function.

120
00:08:13,800 --> 00:08:15,360
Let me try that in a simple way.

121
00:08:15,840 --> 00:08:18,600
I will say I'm going to call the as you are.

122
00:08:18,780 --> 00:08:20,580
The number you are passing is fine.

123
00:08:21,060 --> 00:08:24,240
The second thing is that you are going to pass a callback function.

124
00:08:24,510 --> 00:08:31,860
So now this function will be called by the C as you are after some process is done.

125
00:08:32,100 --> 00:08:38,070
So now instead of returning this, I can directly see here, first of all, I'll write that there will

126
00:08:38,070 --> 00:08:39,210
be a second function.

127
00:08:39,840 --> 00:08:42,020
Let me remind you that this is just a parameter.

128
00:08:42,030 --> 00:08:46,080
You can name whatever you want to, but I am giving CB because it's a callback function.

129
00:08:46,260 --> 00:08:53,370
So now here I can see CB and inside of that I will have an into n.

130
00:08:54,980 --> 00:09:01,540
And that is passed to this callback function because function this anonymous function is called by C

131
00:09:01,700 --> 00:09:06,470
you are so CB will pass these and into N here and we just see a result here.

132
00:09:06,950 --> 00:09:11,420
Now if I say cancel, log the result.

133
00:09:12,260 --> 00:09:15,560
Now this should give us the desired output instead of undefined.

134
00:09:17,360 --> 00:09:22,250
Now the catch here is that I did not give any value in said time out.

135
00:09:22,460 --> 00:09:29,780
Then also it actually went to a callback stack and that's why I knew it's going to take some time.

136
00:09:29,970 --> 00:09:33,920
Whether I give 2000 milliseconds or I do not give anything right?

137
00:09:33,940 --> 00:09:36,290
So once again, we ran this.

138
00:09:36,590 --> 00:09:39,410
Now, after 2 seconds, we get the output.

139
00:09:39,710 --> 00:09:47,120
So you do make sure that whenever you have an asynchronous process, you do deal it in a better way

140
00:09:47,120 --> 00:09:48,290
with a callback function.

141
00:09:48,320 --> 00:09:51,500
Of course, callback nowadays is not used a lot.

142
00:09:51,530 --> 00:09:55,490
There are even better ways that is promises and async await.

143
00:09:55,610 --> 00:09:57,590
But that discussion is for some other day.

144
00:09:57,770 --> 00:10:01,700
At the moment we are focusing to understand callback function.

145
00:10:02,250 --> 00:10:07,130
Let's create one more situation that is actually a term called callback.

146
00:10:07,130 --> 00:10:09,710
Hell are pyramid of doom.

147
00:10:10,040 --> 00:10:10,970
Why is it so?

148
00:10:11,480 --> 00:10:14,300
That means that callback is difficult to deal with.

149
00:10:14,720 --> 00:10:20,600
That is what the DOM see is all these two terminologies that is callback hell and Pyramid of Doom.

150
00:10:20,780 --> 00:10:23,480
They say that it's difficult to deal with callback.

151
00:10:23,490 --> 00:10:24,530
Why is it so?

152
00:10:24,650 --> 00:10:27,470
Let's try to understand that also here.

153
00:10:27,470 --> 00:10:28,220
What happens?

154
00:10:28,520 --> 00:10:32,800
Assume that the result which we received, we want to process it further.

155
00:10:32,810 --> 00:10:39,410
At the moment we are taking this simple square example, but you can think of any API, third party

156
00:10:39,410 --> 00:10:45,890
API you are calling and that is returning a value and the returned value you need to process for that.

157
00:10:46,070 --> 00:10:51,890
Right now we are just giving this set timeout and I'll say the result which we retrieved that further

158
00:10:51,890 --> 00:10:53,870
needs to be squared.

159
00:10:54,140 --> 00:10:57,560
So the result is passed here and we will get result one.

160
00:10:58,670 --> 00:11:00,200
Again, I'll say console.log.

161
00:11:00,710 --> 00:11:01,880
Result one.

162
00:11:02,330 --> 00:11:05,450
Let me also place the first console as it is.

163
00:11:09,060 --> 00:11:09,900
Let's say it isn't.

164
00:11:10,590 --> 00:11:11,160
That's it.

165
00:11:11,640 --> 00:11:12,430
Now, see this.

166
00:11:12,720 --> 00:11:19,410
You just have to level off callback functions, and now the code will start looking clumsy.

167
00:11:19,530 --> 00:11:24,570
These situations are difficult, especially when you are dealing with error handling.

168
00:11:24,690 --> 00:11:26,160
And there are many other things.

169
00:11:26,400 --> 00:11:27,900
It looks something like this.

170
00:11:28,140 --> 00:11:32,550
If you have more processes to deal with, let's say you have three levels of or would be more level

171
00:11:32,550 --> 00:11:33,660
of callback functions.

172
00:11:33,900 --> 00:11:38,010
The picture will look something like this with callback function.

173
00:11:38,250 --> 00:11:39,930
Let me run this code first though.

174
00:11:40,410 --> 00:11:42,540
The output will be as desired.

175
00:11:42,560 --> 00:11:47,200
Then after every 2 seconds we are going to get the squared off the result.

176
00:11:47,220 --> 00:11:53,770
But this way of writing is difficult to handle when you have at least three or maybe four level or maybe

177
00:11:53,770 --> 00:11:54,480
a little more.

178
00:11:54,750 --> 00:12:01,570
And especially with added handling, it becomes really a hassle to manage and to correct these issues.

179
00:12:01,590 --> 00:12:04,920
That is, to write the callback in a better way.

180
00:12:04,950 --> 00:12:11,280
We have promises in JavaScript, but that we are going to discuss in next section.

181
00:12:11,520 --> 00:12:14,700
Now for the callback, let's come to the related questions.

182
00:12:14,730 --> 00:12:18,120
The first question is what is an asynchronous process?

183
00:12:18,420 --> 00:12:21,660
So the thing is, let's say you have four or five lines.

184
00:12:21,780 --> 00:12:27,090
Like, for example, you have this code fetch data and display data where factually it is taking some

185
00:12:27,090 --> 00:12:27,540
time.

186
00:12:27,840 --> 00:12:32,730
A process which takes some time is called as an asynchronous process.

187
00:12:32,880 --> 00:12:36,840
So the process will return the data after the job is finished.

188
00:12:37,170 --> 00:12:39,630
That's what an asynchronous process is.

189
00:12:41,860 --> 00:12:47,830
The second question is what is the meaning of callback hell or Pyramid of Doom?

190
00:12:47,830 --> 00:12:52,270
Or rather why it is called callback hell or Pyramid of doom?

191
00:12:52,270 --> 00:12:54,640
Because the shape is of pyramid like this.

192
00:12:54,790 --> 00:12:55,450
That's why.

193
00:12:55,600 --> 00:13:01,330
And it is very difficult when you have multiple API calls, that is one call within another, then it

194
00:13:01,330 --> 00:13:02,860
becomes really difficult.

195
00:13:03,070 --> 00:13:07,270
So that's what a callback hell or pyramid of Doom is.

