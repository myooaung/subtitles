WEBVTT
1
00:00:02.390 --> 00:00:06.110
So let's solve the problem with the help of Shadow Dom.

2
00:00:07.880 --> 00:00:15.830
First I will create the element using create element method and then I will add it to the shadow dom.

3
00:00:15.860 --> 00:00:17.780
I will say const.

4
00:00:18.260 --> 00:00:22.760
Each one is equal to document dot.

5
00:00:23.450 --> 00:00:25.160
Create element.

6
00:00:26.060 --> 00:00:29.540
And I'll say one inside the parentheses.

7
00:00:30.750 --> 00:00:35.400
And instead of this object, I will say each one.

8
00:00:36.060 --> 00:00:39.720
Let me also remove the electron from this place.

9
00:00:41.870 --> 00:00:44.360
Now the H1 element is created.

10
00:00:44.870 --> 00:00:54.230
Next I will attach the component to the shadow dom using this dot attach shadow.

11
00:00:54.320 --> 00:01:01.880
In the brackets we need to pass an object literal mode colon in the single coats.

12
00:01:01.880 --> 00:01:03.020
I'll say open.

13
00:01:04.300 --> 00:01:07.990
You can have open or close as options.

14
00:01:08.850 --> 00:01:14.640
Open means the current page can access the shadow dom via JavaScript.

15
00:01:14.640 --> 00:01:22.890
For example, element dot shadow root will return the dom, but if you give close instead of open,

16
00:01:22.890 --> 00:01:24.930
then it will return null.

17
00:01:26.720 --> 00:01:27.410
Anyway.

18
00:01:27.410 --> 00:01:30.860
So now the component is attached with the shadow dom.

19
00:01:30.890 --> 00:01:33.620
Now let's add the H1 element to it.

20
00:01:34.070 --> 00:01:35.600
I will say this.

21
00:01:36.050 --> 00:01:40.790
Dot shadow root dot append child.

22
00:01:41.530 --> 00:01:44.260
The object which we have created is the H1.

23
00:01:45.390 --> 00:01:53.430
And now you can see that the header section and product component, they both have different colors.

24
00:01:55.210 --> 00:01:56.830
So this is the solution.

25
00:01:56.830 --> 00:01:59.680
We applied using the shadow dom.

26
00:01:59.680 --> 00:02:08.110
Because the shadow dom is activated, we are able to have different scope for the web component.

27
00:02:08.830 --> 00:02:13.510
Now let me switch to Chrome and let's open the developer tool.

28
00:02:13.900 --> 00:02:21.670
If you are using Chrome, you have to make sure that you go to the settings in the preferences.

29
00:02:23.530 --> 00:02:25.920
Make sure that you have this option.

30
00:02:25.930 --> 00:02:29.860
Show user agent shadow dom is checked.

31
00:02:30.780 --> 00:02:34.740
Now let's go to the elements in the developer tool.

32
00:02:35.100 --> 00:02:36.510
Let me expand.

33
00:02:37.450 --> 00:02:38.740
These components.

34
00:02:41.740 --> 00:02:47.390
And you see here the component elements are part of Shadow Dom.

35
00:02:47.410 --> 00:02:52.270
It sees the shadow root, which has the elements of the component.

36
00:02:54.100 --> 00:02:58.930
So this means I did show you the component to lectures back.

37
00:02:58.930 --> 00:03:07.210
But in reality, unless this shadow dom is not attached, you cannot say that it's your proper web component.

38
00:03:09.100 --> 00:03:15.160
In fact, when you use any third party component, it will certainly have shadow dom.

39
00:03:15.430 --> 00:03:20.520
Let me quickly go to the code and let me add an input here.

40
00:03:20.530 --> 00:03:25.690
I'll say input type is equal to range.

41
00:03:26.620 --> 00:03:27.540
Let me close it.

42
00:03:27.550 --> 00:03:31.420
Let's save and go back to the browser and refresh.

43
00:03:31.930 --> 00:03:40.450
If you click on the developer tool, you can see that it also has its own shadow dom because this element

44
00:03:40.450 --> 00:03:43.090
has some extra user interface.

45
00:03:43.090 --> 00:03:49.030
So it's a kind of web component or a component which has its own dom.

46
00:03:50.450 --> 00:03:52.220
Let me remove the input now.

47
00:03:56.370 --> 00:03:59.040
And we are back to the original output.

48
00:03:59.850 --> 00:04:08.580
So with the help of Shadow Dom, we made sure that we have the DOM itself in a separate scope and the

49
00:04:08.580 --> 00:04:12.090
shadow dom as a separate scope for the web component.

50
00:04:13.970 --> 00:04:15.830
Now let's talk about related questions.

51
00:04:15.830 --> 00:04:19.070
The question is, what is Shadow Dom?

52
00:04:19.100 --> 00:04:20.690
Explain the need for it.

53
00:04:20.690 --> 00:04:22.170
So as discussed.

54
00:04:22.190 --> 00:04:30.260
Shadow Dom is its own scope for a web component in the DOM because we did see the problem we faced when

55
00:04:30.260 --> 00:04:37.760
we did not have Shadow Dom and that exactly is the need that when you want to have encapsulation for

56
00:04:37.760 --> 00:04:44.480
your web component so that it can have its own CSS, its own settings, which does not clash with the

57
00:04:44.480 --> 00:04:45.640
original pages.

58
00:04:45.650 --> 00:04:49.340
Dom And that's the reason why we use the shadow Dom.

59
00:04:50.180 --> 00:04:53.960
The second question is how do you add a component to a shadow?

60
00:04:53.960 --> 00:04:54.600
Dom.

61
00:04:54.620 --> 00:05:00.620
So it's about this line, this dot attach shadow which attaches the component to the DOM.

62
00:05:01.130 --> 00:05:08.930
When you have to add elements of the web component to the shadow dom, you are going to use the shadow

63
00:05:08.930 --> 00:05:09.470
root.

