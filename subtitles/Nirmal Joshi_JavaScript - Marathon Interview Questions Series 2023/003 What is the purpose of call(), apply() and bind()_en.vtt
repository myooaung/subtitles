WEBVTT
1
00:00:00.060 --> 00:00:03.560
Now we are discussing another question in all this category.

2
00:00:03.570 --> 00:00:08.370
That is, what is the purpose of call, apply or bind method?

3
00:00:08.730 --> 00:00:11.460
And there are two related questions for this topic.

4
00:00:12.730 --> 00:00:15.220
In a previous question, we discussed that.

5
00:00:15.280 --> 00:00:17.440
What is that, this object?

6
00:00:18.600 --> 00:00:21.210
Let's consider a scenario with an example.

7
00:00:22.760 --> 00:00:25.840
I have a function called function test.

8
00:00:28.890 --> 00:00:31.170
I want to display the value of this.

9
00:00:31.180 --> 00:00:32.250
I'm just referring it.

10
00:00:32.790 --> 00:00:36.030
There is no specific functionality I'm adding to this function.

11
00:00:36.600 --> 00:00:39.450
It's just that I have an object called object.

12
00:00:40.110 --> 00:00:44.910
And this object has, let's say, a member a where I'm seeing file.

13
00:00:46.000 --> 00:00:52.820
Now what I want is that when I call this function, I just want to pass this object at the moment anyway.

14
00:00:52.840 --> 00:00:54.910
Object is global, right?

15
00:00:55.240 --> 00:01:00.520
So it doesn't matter whether I pass it as a parameter or not, but assume that this is somewhere else.

16
00:01:00.520 --> 00:01:03.340
But right now I'm putting it for ease of understanding.

17
00:01:03.970 --> 00:01:06.070
Now that object I'm passing here.

18
00:01:06.430 --> 00:01:10.690
So the object I have passed is passed to this parameter.

19
00:01:11.820 --> 00:01:18.330
My concern is that if I call this function, certainly it's going to display the window object because

20
00:01:18.480 --> 00:01:23.940
it is written in the browser window and the function test is also directly in the browser.

21
00:01:25.150 --> 00:01:30.280
I've learned that the value of this should be this object.

22
00:01:30.280 --> 00:01:35.020
That means I want to assign the reference off object to this.

23
00:01:35.320 --> 00:01:39.460
So in a way, what I want to do is I want to say this is equal to object.

24
00:01:40.000 --> 00:01:43.960
So instead of window, let me first of all, run this.

25
00:01:45.170 --> 00:01:48.050
If I run test function, it displays window.

26
00:01:49.170 --> 00:01:49.680
Now.

27
00:01:50.010 --> 00:01:56.220
I warned that it should bind to this object and not the window object, which is the global object.

28
00:01:57.300 --> 00:02:05.940
So purpose of this function is at the moment I want to assign the object reference tool that this object.

29
00:02:07.070 --> 00:02:08.690
Lecture on this and see what happens.

30
00:02:09.770 --> 00:02:13.790
It says that invalid left hand side in assignment.

31
00:02:14.660 --> 00:02:20.600
The reason is JavaScript doesn't allow you to assign any value to this object.

32
00:02:21.710 --> 00:02:24.740
How will you change the context of this object in this case?

33
00:02:25.800 --> 00:02:31.140
That's where the call supply and buying methods come in handy.

34
00:02:32.140 --> 00:02:34.810
Let's first of all, begin with the call method.

35
00:02:35.940 --> 00:02:42.120
The call method takes first argument as the object to be passed to this.

36
00:02:42.690 --> 00:02:46.920
Then whatever parameters you want to pass, it's absolutely fine.

37
00:02:46.920 --> 00:02:49.040
Let's say I have a few more parameters.

38
00:02:49.050 --> 00:02:50.190
A call might be.

39
00:02:51.260 --> 00:02:52.610
Now when I say call.

40
00:02:52.910 --> 00:02:54.230
You don't even need to pass.

41
00:02:54.230 --> 00:02:56.330
This will be the now we don't need this.

42
00:02:56.690 --> 00:02:58.190
It's just a normal function.

43
00:02:58.190 --> 00:03:01.160
Let's say this function is expecting two parameters.

44
00:03:01.370 --> 00:03:03.590
So I'm going to write those two parameters here.

45
00:03:03.590 --> 00:03:04.730
Maybe five, comma six.

46
00:03:05.760 --> 00:03:10.170
Now when you are calling this function, actually, there are three parameters passed.

47
00:03:10.350 --> 00:03:14.910
And the function here shows that it is expecting only two parameters.

48
00:03:16.210 --> 00:03:22.180
This means when you say call, the first argument is always pass to this.

49
00:03:22.210 --> 00:03:27.310
So when you call this, the first parameter is always passed to this.

50
00:03:27.520 --> 00:03:33.880
That's why the syntax is like this that the first one is this argument and rest of the parameters like

51
00:03:33.880 --> 00:03:37.270
argument one, two and so on, like a normal function.

52
00:03:37.780 --> 00:03:40.510
Let's try this code and see what is the output.

53
00:03:41.140 --> 00:03:46.540
As you can see now that when you try to display the value of this, it doesn't display window.

54
00:03:46.720 --> 00:03:48.640
Instead, it displays the object.

55
00:03:49.620 --> 00:03:55.860
Remember, the parameters we have here are I mean, fire is passed to eight and six is passed.

56
00:03:55.860 --> 00:04:02.640
To be object is something which is automatically handled by JavaScript by the call method so that it

57
00:04:02.640 --> 00:04:04.770
is assigned to this object.

58
00:04:04.770 --> 00:04:11.790
So in short call is used to change the reference or context are in charge value of this object.

59
00:04:13.080 --> 00:04:16.170
In case if you pass, let's say, instead of object.

60
00:04:16.500 --> 00:04:23.010
If I pass five, comma, six right now, you know that parameter mismatch is not a problem in JavaScript.

61
00:04:23.010 --> 00:04:24.090
So here what will happen.

62
00:04:24.450 --> 00:04:30.690
Five will be passed to this, six will be passed to eight and nothing will be passed to be to b will

63
00:04:30.690 --> 00:04:31.530
be undefined.

64
00:04:32.470 --> 00:04:38.890
If I just try to display the value of both A and B, then you will realize that how it works.

65
00:04:39.580 --> 00:04:44.650
You see, the value five is passed to a here because size based class is number.

66
00:04:44.860 --> 00:04:49.480
So a number is displayed here it is six and B is undefined.

67
00:04:50.440 --> 00:04:52.650
Let's go back to the object self.

68
00:04:52.990 --> 00:04:55.480
So now we know that y call is used.

69
00:04:56.480 --> 00:04:59.450
Apply is actually used for the very same thing.

70
00:05:00.020 --> 00:05:05.210
Apply is also used for changing the reference of this object only.

71
00:05:05.360 --> 00:05:08.390
But there is a difference in terms of parameter passing.

72
00:05:08.840 --> 00:05:13.090
What Apply says is that you can pass only two parameters.

73
00:05:13.100 --> 00:05:21.080
One is the this argument, and second is one add a which actually is passed to all the parameters you

74
00:05:21.080 --> 00:05:21.680
have here.

75
00:05:22.100 --> 00:05:25.790
What I mean to say is that object is anyway passed to this.

76
00:05:26.270 --> 00:05:32.000
This one, ADI, is passed to this function where individual elements are assigned.

77
00:05:32.150 --> 00:05:35.150
So if you have, let's say, three elements here, five, common six.

78
00:05:35.150 --> 00:05:36.860
Common seven may be like this.

79
00:05:37.370 --> 00:05:37.760
Right.

80
00:05:37.940 --> 00:05:39.860
And if you have A, B and C.

81
00:05:41.020 --> 00:05:44.560
So five, six and seven is passed to ABC respectively.

82
00:05:45.100 --> 00:05:49.670
Here the important point is applied takes only two parameters.

83
00:05:49.690 --> 00:05:56.440
First is the this argument, and second is one ad which is passed to this function as individual element.

84
00:05:56.440 --> 00:05:58.690
So in a way it is getting the structure.

85
00:05:58.690 --> 00:06:02.650
You can say that that's the only difference between call and apply.

86
00:06:03.930 --> 00:06:06.120
The next method is bind.

87
00:06:06.180 --> 00:06:06.850
Now again.

88
00:06:06.870 --> 00:06:08.250
Bind is same.

89
00:06:08.910 --> 00:06:13.080
It means bind allows you to change the value of this.

90
00:06:13.380 --> 00:06:15.600
And the parameters are also similar.

91
00:06:15.750 --> 00:06:17.800
There is no ad or anything like that.

92
00:06:17.820 --> 00:06:18.570
Absolutely.

93
00:06:18.570 --> 00:06:19.710
Same as call.

94
00:06:20.010 --> 00:06:20.820
Let me remove this.

95
00:06:20.820 --> 00:06:21.180
See?

96
00:06:21.480 --> 00:06:27.150
So you can say bind and call are similar in terms of signature, but there is a difference.

97
00:06:27.240 --> 00:06:32.400
Let me run the call so you will realize that if I run this here, you will see that there is no output.

98
00:06:32.610 --> 00:06:39.570
The reason is that call must change the reference of this and it immediately calls the function that

99
00:06:39.570 --> 00:06:45.030
is bind does change the reference, but it does not execute the function.

100
00:06:45.030 --> 00:06:47.790
Instead it returns another function.

101
00:06:48.120 --> 00:06:50.970
That is, it acts like a function expression.

102
00:06:50.970 --> 00:06:56.610
So let's say for example, here I have maybe const function expression that is Effy.

103
00:06:57.330 --> 00:07:01.250
So it is executed and the reference is returned in Effy.

104
00:07:01.500 --> 00:07:04.260
So now if I run this, you'll see the output here.

105
00:07:05.640 --> 00:07:10.340
So bind is very similar to call, but it doesn't call to function immediately.

106
00:07:10.350 --> 00:07:15.690
Rather, it returns a function which you can later on call whenever you need it.

107
00:07:17.080 --> 00:07:19.240
There are various other purposes of buying.

108
00:07:19.450 --> 00:07:21.310
As we go on with more examples.

109
00:07:21.340 --> 00:07:24.070
You will get a clear idea how and when we are using it.

110
00:07:24.940 --> 00:07:30.070
But the basic purpose of call apply and bind is to change the reference of this.

111
00:07:30.070 --> 00:07:34.210
And they differ in terms of parameters or maybe the execution.

112
00:07:35.270 --> 00:07:37.490
Let's discuss the questions of this topic.

113
00:07:37.730 --> 00:07:42.200
The first question is what's the difference between call, apply and bind?

114
00:07:42.230 --> 00:07:49.940
So we have already discussed that call and apply basically takes different way of parameters and call

115
00:07:49.940 --> 00:07:53.690
and bind is similar, but mine doesn't execute the function immediately.

116
00:07:53.690 --> 00:07:58.520
Rather, it returns a function, expression or reference which can be called later on.

117
00:07:59.000 --> 00:08:02.480
The second question is what will be the output of this call?

118
00:08:03.260 --> 00:08:08.420
Or can you assign value to this object with assignment operator that is equal to?

119
00:08:08.780 --> 00:08:15.320
We have already seen that it is not possible to assign any value to this object invalid left hand side

120
00:08:15.320 --> 00:08:15.860
assignment.

121
00:08:15.860 --> 00:08:17.300
That's what data displays.

122
00:08:17.630 --> 00:08:22.550
So when you want to change the value of this, you have to use, call, apply or bind method.

