WEBVTT
1
00:00:00.090 --> 00:00:07.350
Now that we have seen, how do we execute the import and export statements with normal DML files?

2
00:00:07.710 --> 00:00:10.260
Now let's try to understand the syntax in detail.

3
00:00:10.530 --> 00:00:17.910
Let me remind you that to run import export with HTML and JavaScript only, you will need to configure

4
00:00:18.060 --> 00:00:18.980
a server IDE.

5
00:00:19.020 --> 00:00:22.410
If you upload on any live server, it will work.

6
00:00:22.890 --> 00:00:25.020
We have already seen in the previous section.

7
00:00:25.470 --> 00:00:29.220
So now let's proceed further with understanding the syntax.

8
00:00:29.760 --> 00:00:35.790
There are two ways of using export and import for a module in JavaScript.

9
00:00:36.420 --> 00:00:44.160
The first way is named export or import, and the second is the default, export and import.

10
00:00:45.180 --> 00:00:49.200
In this section, we will go through the named export syntax.

11
00:00:51.060 --> 00:00:51.480
All right.

12
00:00:51.480 --> 00:00:58.260
So now we have this index start adjustment file and I have already created a Kelsey dot years in which

13
00:00:58.260 --> 00:01:00.090
I am going to define two modules.

14
00:01:00.600 --> 00:01:02.760
So I'll go to Kelsey year first.

15
00:01:02.790 --> 00:01:10.920
Let's say I have a function called sum, which takes two parameters, very simple, and it returns A-plus.

16
00:01:10.920 --> 00:01:17.490
B And let's also assume that you have one more function cube, which is going to return cube of a number.

17
00:01:18.240 --> 00:01:27.300
So it will return eventually a into a into a so now if I want that this Kelsey Dodgers file should export

18
00:01:27.300 --> 00:01:28.830
these two modules.

19
00:01:29.010 --> 00:01:31.920
That is the sum module and the cube module.

20
00:01:32.340 --> 00:01:35.160
Then you can use the named export.

21
00:01:35.160 --> 00:01:39.690
Remember that that is one more key word called default, which we will see.

22
00:01:39.690 --> 00:01:42.180
That is the default export.

23
00:01:42.180 --> 00:01:46.950
But right now we are trying to understand the named export and import as well.

24
00:01:47.130 --> 00:01:52.050
So here what I am going to do, I write export function some.

25
00:01:52.950 --> 00:02:00.360
Similarly, if I want that this cube should also be exported, then I'll write export function.

26
00:02:00.570 --> 00:02:10.080
Q This means the Kelsi dogs has two modules some and Cube, which is exported with the name called Sum

27
00:02:10.080 --> 00:02:10.860
and Cube.

28
00:02:10.889 --> 00:02:13.290
That's why it is the named export.

29
00:02:13.710 --> 00:02:18.660
I'll go back to Index Dada DML Now let's say here I have some content of the page.

30
00:02:18.660 --> 00:02:26.190
I'm seeing the page content or something important point here is I'm going to use the script tag and

31
00:02:26.190 --> 00:02:29.820
I will say module type is equal to module.

32
00:02:29.820 --> 00:02:33.720
That is that means I am going to import the module here.

33
00:02:34.350 --> 00:02:39.330
That's what we have seen in the previous section where if you don't write this module, it won't work

34
00:02:39.630 --> 00:02:39.930
here.

35
00:02:39.930 --> 00:02:49.470
I'm going to say import now because the Kelsi Dodgers has a module called Sum and Cube.

36
00:02:49.620 --> 00:02:50.760
I can say some.

37
00:02:51.510 --> 00:02:55.770
The named import will always have a column bracket around the name.

38
00:02:56.220 --> 00:03:00.780
So here when you imported, if you avoid curly brackets, it will give you added.

39
00:03:01.230 --> 00:03:05.730
If you have default import, then certainly you don't need those curly braces.

40
00:03:05.730 --> 00:03:13.050
But that's the next section right now because we have the named export we need to import with the curly

41
00:03:13.050 --> 00:03:13.620
brackets.

42
00:03:13.740 --> 00:03:21.600
Now you can certainly import the Q module in the next line with our next import statement, but that's

43
00:03:21.600 --> 00:03:22.380
also fine.

44
00:03:22.560 --> 00:03:29.040
You can just say that you want to import some and cube and you may have more modules also which you

45
00:03:29.040 --> 00:03:30.750
can separate by a comma.

46
00:03:30.780 --> 00:03:32.490
But here we have just two modules.

47
00:03:32.490 --> 00:03:38.610
I'll say import some comma cube from what is the file name and the part.

48
00:03:38.610 --> 00:03:39.990
So it is in the current folder.

49
00:03:39.990 --> 00:03:43.290
So said our slash and the JavaScript file.

50
00:03:43.650 --> 00:03:45.540
So now the modules are imported.

51
00:03:45.690 --> 00:03:52.920
Next thing either I can execute this some and cube on some event like I can put a button and I can execute

52
00:03:52.920 --> 00:03:59.430
this, but instead of that I'll straightaway use the module code so I'll say console.log some which

53
00:03:59.430 --> 00:04:00.960
is taking two parameters.

54
00:04:01.440 --> 00:04:05.490
Next is cube, which is taking only one parameter.

55
00:04:05.490 --> 00:04:06.360
I'll say three here.

56
00:04:07.110 --> 00:04:08.160
I'll just save this.

57
00:04:08.700 --> 00:04:12.150
I'll go to the browser and I'm going to refresh this.

58
00:04:14.280 --> 00:04:15.510
Let me just correct this.

59
00:04:16.320 --> 00:04:17.029
Kelsey Dodds.

60
00:04:17.040 --> 00:04:17.519
Yes.

61
00:04:19.649 --> 00:04:20.940
Now I'm going to refresh this.

62
00:04:21.209 --> 00:04:24.420
You see that both the modules are executed the way we wanted.

63
00:04:24.720 --> 00:04:28.710
Again, I would like to remind you that I have configured the Chrome Web server.

64
00:04:28.920 --> 00:04:32.190
That's why I'm able to run the import and export locally.

65
00:04:32.190 --> 00:04:33.180
I have configured it.

66
00:04:33.720 --> 00:04:39.870
You can also try that or else you can upload these files on server and run it now because this is a

67
00:04:39.870 --> 00:04:41.880
named import and export.

68
00:04:42.180 --> 00:04:44.160
You have different syntax as well.

69
00:04:44.400 --> 00:04:50.280
For example, you want to export these modules with a single line.

70
00:04:50.640 --> 00:04:52.980
For example, like this I can say export.

71
00:04:53.580 --> 00:04:57.570
I can give a list of export I want, so I'll say some comma.

72
00:04:57.810 --> 00:05:00.270
Q That's what I want to export from this.

73
00:05:00.600 --> 00:05:04.090
Now, here, you may not have the export statement.

74
00:05:04.500 --> 00:05:11.520
What I mean to say is in this particular file, you may have many functions, but let's say from this

75
00:05:11.520 --> 00:05:16.230
file you just have to export only to maybe five functions as module.

76
00:05:16.410 --> 00:05:21.390
Not that all modules you want to export, so you do not write export in front of all functions.

77
00:05:21.540 --> 00:05:30.150
So what you can do is you may write export before specific functions in the file or at the later stage

78
00:05:30.480 --> 00:05:35.520
at the bottom of the file, you just give the list of modules you want to export.

79
00:05:35.890 --> 00:05:36.720
Let's save this.

80
00:05:37.740 --> 00:05:39.000
Let me also check here.

81
00:05:39.030 --> 00:05:40.800
Let me change the value so you get that.

82
00:05:40.800 --> 00:05:42.000
That is a different output.

83
00:05:42.660 --> 00:05:44.970
I'll say nine, comma five.

84
00:05:44.970 --> 00:05:46.590
So now there will be a different output.

85
00:05:47.070 --> 00:05:49.050
Let's go back to the browser now.

86
00:05:49.050 --> 00:05:53.160
Again, I'm going to refresh and it is working absolutely fine.

87
00:05:53.940 --> 00:05:58.570
So we tried one more way to export the module.

88
00:05:58.920 --> 00:06:05.080
That is also a choice whether you want to export a module with a specific name or not.

89
00:06:05.100 --> 00:06:11.730
Let's say inside of this, Kelsi is this is a some function, but when you want to export, you want

90
00:06:11.730 --> 00:06:13.110
to give the name total.

91
00:06:13.260 --> 00:06:16.890
So what you can do, you can see some as total.

92
00:06:17.730 --> 00:06:23.100
Now, if you do this, that means you will have to import it with the name total only.

93
00:06:23.100 --> 00:06:27.210
Let me just continue the current syntax and see what is the output.

94
00:06:27.900 --> 00:06:32.370
You see, it says that the Kelsi does not provide an export named Sum.

95
00:06:32.910 --> 00:06:38.490
So though the name of the function is some, but you are exporting it with the name total.

96
00:06:38.490 --> 00:06:40.980
That means I'll have to change this name here as well.

97
00:06:41.110 --> 00:06:42.660
I'll say total.

98
00:06:42.870 --> 00:06:46.020
And the same goes to this particular line as well.

99
00:06:46.380 --> 00:06:48.420
Now, if I run this, let me refresh.

100
00:06:49.380 --> 00:06:51.120
You see, it's running now.

101
00:06:52.530 --> 00:06:56.400
Now, let me just change this back to Sam and.

102
00:06:57.790 --> 00:06:58.150
Here.

103
00:06:58.150 --> 00:07:01.540
Also, I'll just say that I want to export the some.

104
00:07:02.140 --> 00:07:08.370
Next thing is, when you import the named exports, you have a choice.

105
00:07:08.380 --> 00:07:11.440
Assume that you have multiple exports here.

106
00:07:11.680 --> 00:07:17.470
Now you have a situation where you want to import all the modules which are exported there.

107
00:07:17.470 --> 00:07:19.330
By Kelcy Dages.

108
00:07:19.600 --> 00:07:25.480
This is the syntax which you can use to import all the modules from a specific file.

109
00:07:25.810 --> 00:07:30.580
In that case, the modules which are imported will become part of object.

110
00:07:30.610 --> 00:07:38.710
That is the object, and you can use the dart operator to access the members or exports of the module.

111
00:07:39.070 --> 00:07:40.330
Let's try that as well.

112
00:07:40.450 --> 00:07:44.190
We have already exported two modules from Kelsea Diaz.

113
00:07:44.470 --> 00:07:48.120
So the thing is, I'm going to just say, let me remove this.

114
00:07:48.130 --> 00:07:54.730
I'll say Star, that means I want everything to be imported star as and here is the name.

115
00:07:54.730 --> 00:07:58.180
Let's say I want to give name Kelcy only our calculator.

116
00:07:58.180 --> 00:07:58.720
What I would do.

117
00:07:58.900 --> 00:07:59.440
That's fine.

118
00:07:59.680 --> 00:08:00.730
I just said Kelcy.

119
00:08:01.060 --> 00:08:06.400
That means Kelcy becomes an object which will have this sum and cube as method of it.

120
00:08:06.670 --> 00:08:15.010
So now if I just save this and try to execute it, you'll see that sum is not defined in chart sum or

121
00:08:15.010 --> 00:08:20.320
Kub is not accessible because the import is now under this Kelcy Hood.

122
00:08:20.920 --> 00:08:24.520
So now the next thing is you will write Kelcy out some.

123
00:08:25.440 --> 00:08:27.660
And Kelsey docu.

124
00:08:28.170 --> 00:08:29.150
Let me save this.

125
00:08:29.580 --> 00:08:30.570
Go back to the browser.

126
00:08:31.460 --> 00:08:32.510
And refresh.

127
00:08:33.140 --> 00:08:34.340
So we get the output here.

128
00:08:35.299 --> 00:08:42.169
The idea of importing all the modules like this is when you have a file which contains many modules

129
00:08:42.169 --> 00:08:48.500
and all are to be imported, then you better use this in case if you are using the modern build tools

130
00:08:48.500 --> 00:08:55.340
like Webpack, then it might happen that, let's say in this particular code you have imported all the

131
00:08:55.340 --> 00:09:00.980
modules, let's say you have imported some and cube, but you do not use cube at any point of time.

132
00:09:01.310 --> 00:09:08.570
Then the modern build tools may remove the cube function from the imported library.

133
00:09:08.960 --> 00:09:11.120
So it's a kind of tree shaking happening.

134
00:09:11.660 --> 00:09:17.500
So you always make sure that if you are using all the modules, then this is a better syntax.

135
00:09:17.690 --> 00:09:21.650
But if you are not sure whether all the modules are to be used or not.

136
00:09:21.980 --> 00:09:25.880
Better to go with individual named imports only.

137
00:09:26.420 --> 00:09:30.430
So let's change this code back to the standard way.

138
00:09:30.440 --> 00:09:35.270
That is, I would say, some common cube anyway in this case, because we are using both the modules,

139
00:09:35.510 --> 00:09:41.150
this star as object syntax is equally applicable in this particular piece.

140
00:09:41.630 --> 00:09:49.190
The way we have exported with a specific name using as keyword, the same thing we can do with import

141
00:09:49.190 --> 00:09:49.640
as well.

142
00:09:49.910 --> 00:09:52.430
So I can see some as total.

143
00:09:52.760 --> 00:09:55.670
So let the sum be exported from this.

144
00:09:55.970 --> 00:09:57.290
Consider just fine.

145
00:09:57.410 --> 00:09:58.400
Let it be like this.

146
00:09:58.550 --> 00:10:01.310
But when I imported, I want the name total.

147
00:10:02.000 --> 00:10:04.490
So now again, you will have to use Total here.

148
00:10:04.880 --> 00:10:08.570
So the ASCII keyword can be used with both import and export.

149
00:10:08.630 --> 00:10:11.570
Let's also remove descalzi now because we don't need it.

150
00:10:11.900 --> 00:10:18.110
I'll just say when we go back to the browser and let me just refresh this now you see that even though

151
00:10:18.110 --> 00:10:19.520
the code is saying total.

152
00:10:20.800 --> 00:10:21.730
It is working fine.

153
00:10:22.330 --> 00:10:26.140
So these are the basic named important exports indexes.

154
00:10:26.170 --> 00:10:27.400
There are a few more things.

155
00:10:27.700 --> 00:10:33.790
But first of all, in the next section we'll begin with default, export and import, and then we'll

156
00:10:33.790 --> 00:10:38.830
try a few more things in this section to deal with modules in more, better way.

157
00:10:40.340 --> 00:10:43.250
Let's discuss the related questions for this topic.

158
00:10:43.760 --> 00:10:47.660
The first question is what is named export and import?

159
00:10:48.020 --> 00:10:52.640
We have already seen that we give a specific name to a module.

160
00:10:52.940 --> 00:11:00.050
Not only that, there is also multiple exports happening when you have named export.

161
00:11:00.500 --> 00:11:06.320
So when you have multiple exports per file, then you can use the named export.

162
00:11:07.340 --> 00:11:11.960
The next question is can you avoid college brackets while importing a named module?

163
00:11:12.230 --> 00:11:13.070
You cannot.

164
00:11:13.280 --> 00:11:17.900
The syntax while importing the named module is always used.

165
00:11:17.900 --> 00:11:18.800
Curly brackets.

166
00:11:18.830 --> 00:11:19.850
If you do not use.

167
00:11:20.000 --> 00:11:20.900
It won't work.

168
00:11:21.590 --> 00:11:26.750
So you have to have these curly brackets while importing the named modules.

169
00:11:27.140 --> 00:11:32.120
The next question is how can you import all named modules from a file?

170
00:11:33.020 --> 00:11:39.530
Well, when you have to import all the modules together, you use the star sign and you use the as as

171
00:11:39.530 --> 00:11:39.830
well.

172
00:11:40.160 --> 00:11:41.660
Right here is the syntax.

173
00:11:42.020 --> 00:11:49.670
So this is how you import all the modules under one name and then you use this object as an object dot

174
00:11:49.910 --> 00:11:54.470
whatever members you have which are exported from a specific file.

175
00:11:54.680 --> 00:11:57.470
Those are available with this DART operator.

176
00:11:57.770 --> 00:12:05.210
So you can say object the function name like in our case we tried Kelsey Dart some or Kelsey dot q.

177
00:12:06.940 --> 00:12:11.050
Next question is, is it a good practice to import all modules together?

178
00:12:11.530 --> 00:12:17.020
Well, as such, I have discussed this particular point about whether it is good practice or not.

179
00:12:17.020 --> 00:12:20.590
But here also I would like to rephrase all the things.

180
00:12:21.040 --> 00:12:24.850
The point here is when you say import, all that is import star.

181
00:12:25.570 --> 00:12:32.170
Let's say you are using the sum function, but you are not using the cube function with this particular

182
00:12:32.380 --> 00:12:33.460
JavaScript code.

183
00:12:33.850 --> 00:12:35.920
All the modules are imported.

184
00:12:36.430 --> 00:12:40.270
Now Cube is not used and still it is imported, which is not good.

185
00:12:40.630 --> 00:12:46.360
So ideally, when you know that you have all the modules used in the application, certainly you can

186
00:12:46.360 --> 00:12:47.290
use this syntax.

187
00:12:47.590 --> 00:12:53.860
But in case if you know that only two or three modules are used at specific level, the rest are used

188
00:12:53.860 --> 00:13:03.070
in some other file, then it's better to go with precise names to import the module in the newer approaches

189
00:13:03.070 --> 00:13:04.630
where we have build tools.

190
00:13:04.870 --> 00:13:09.390
There might be unwanted modules, removal internally happening.

191
00:13:09.610 --> 00:13:15.550
That is basically the tree shaking, but that doesn't happen when you are working without any build

192
00:13:15.550 --> 00:13:15.940
tool.

193
00:13:16.120 --> 00:13:19.060
You are just working with HTML JavaScript.

194
00:13:19.060 --> 00:13:24.670
That is the core approach and then you have to take care that you need the module in that particular

195
00:13:24.670 --> 00:13:26.110
page or file or not.

196
00:13:26.560 --> 00:13:33.550
The next question is do the modules hoist well in S6 as such, that is no hoisting.

197
00:13:33.820 --> 00:13:37.540
But for modules, yes, you do have hoisting.

198
00:13:37.750 --> 00:13:44.140
So you can have a module like this which is used before the import statement is executed and it is absolutely

199
00:13:44.140 --> 00:13:44.620
valid.

200
00:13:45.040 --> 00:13:47.740
So you do have hoisting with modules.

201
00:13:47.950 --> 00:13:53.140
It doesn't make much sense as such, but as long as the behavior is concerned, it does happen.

202
00:13:53.710 --> 00:13:58.480
You ideally always import the modules on top of your code.

203
00:13:58.480 --> 00:14:00.460
You don't do it at a later stage.

204
00:14:01.000 --> 00:14:06.070
The next question is do you need the same name while importing a named module?

205
00:14:06.310 --> 00:14:08.050
Or you can change that name.

206
00:14:08.290 --> 00:14:09.630
Certainly you can do that.

207
00:14:09.640 --> 00:14:12.870
You can use the as keyword and you can change the name.

208
00:14:12.880 --> 00:14:16.210
We have already tried this even with export.

209
00:14:16.210 --> 00:14:22.390
We tried this so you can see this syntax where we have the as and we are changing the name.

