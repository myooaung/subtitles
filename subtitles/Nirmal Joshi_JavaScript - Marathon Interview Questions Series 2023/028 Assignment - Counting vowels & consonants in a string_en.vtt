WEBVTT
1
00:00:10.800 --> 00:00:19.050
In this section, we are going to learn about how to count vowels and consonants in a string using regular

2
00:00:19.050 --> 00:00:19.890
expression.

3
00:00:20.800 --> 00:00:26.380
Many times you face such problems where you have to count vowels or consonants.

4
00:00:27.460 --> 00:00:34.810
With a traditional approach, you can loop through a string and check each and every character, whether

5
00:00:34.810 --> 00:00:44.140
it is a e, I, o, or U, and if it matches the condition, then you increment a counter to do so.

6
00:00:44.770 --> 00:00:51.400
But regular expression can also be used with minimum lines of code to achieve the same.

7
00:00:51.430 --> 00:00:57.550
In this case, we just have to use square brackets to give a range of characters.

8
00:00:58.060 --> 00:01:04.810
You just give the characters list in the range with a global modifier that is slash G.

9
00:01:05.530 --> 00:01:09.940
Also, this will check for all lowercase values.

10
00:01:09.940 --> 00:01:13.290
If you want that it should work for both the cases.

11
00:01:13.300 --> 00:01:18.280
Then you can ignore the case using one more modifier ie.

12
00:01:18.310 --> 00:01:21.640
That is the pattern will be a E or.

13
00:01:22.490 --> 00:01:22.930
G.

14
00:01:22.930 --> 00:01:25.090
And of course we add an AI here.

15
00:01:25.920 --> 00:01:32.190
And at the end you display the length of the match, the value array, and you get the desired output.

16
00:01:33.460 --> 00:01:41.290
For counting consonants, we will negate the condition using a correct sign inside the square bracket

17
00:01:41.290 --> 00:01:43.330
so the pattern will look like this.

18
00:01:44.800 --> 00:01:49.990
Let's check the code first for counting vowels without modifier I.

19
00:01:50.750 --> 00:01:56.090
I'll declare a string variable and just say, this is a test string.

20
00:01:56.930 --> 00:02:02.840
The pattern will be aei0u inside the square bracket range.

21
00:02:02.840 --> 00:02:05.810
And of course I'm giving the global modifier as well.

22
00:02:06.940 --> 00:02:12.490
Now, this will actually return an array of all the matched values.

23
00:02:12.490 --> 00:02:17.680
So using the match method, we will get that array, but we want the count of values.

24
00:02:17.680 --> 00:02:19.960
So I'm using the length property.

25
00:02:20.900 --> 00:02:22.190
Let's run the code.

26
00:02:23.420 --> 00:02:27.440
So you see that it has count of all vowels in the string.

27
00:02:28.010 --> 00:02:35.390
Now let's change the lowercase a to uppercase inside string and run the code.

28
00:02:36.620 --> 00:02:44.690
So now it has stopped counting the Uppercase A and now let's add Modifier A and run the code to see

29
00:02:44.690 --> 00:02:45.860
the correct output.

30
00:02:51.050 --> 00:02:57.920
Now in the same case, imagine that we want to count consonant with this kind of code.

31
00:02:58.340 --> 00:03:06.050
So in the same case, if you want to have consonants, you can use a carrot which negates the condition

32
00:03:06.050 --> 00:03:08.540
that is not equal to condition.

33
00:03:08.930 --> 00:03:11.840
Let's add a carrot and see the output.

34
00:03:17.460 --> 00:03:19.500
So now the output is 16.

35
00:03:20.070 --> 00:03:23.190
Here it calculates all white spaces as well.

36
00:03:23.640 --> 00:03:27.330
Imagine that you want to avoid all white spaces.

37
00:03:27.330 --> 00:03:32.760
Then in the range you can use a character class called Slash S.

38
00:03:33.480 --> 00:03:40.050
Let's add slash S and see the output which calculates only consonants.

39
00:03:40.470 --> 00:03:44.820
Now we have the count of all consonants in the output.

40
00:03:45.030 --> 00:03:52.470
So with the regular expression in two lines, you can achieve this solution which takes a loop and other

41
00:03:52.470 --> 00:03:56.250
logical code to compare vowels and consonants.

