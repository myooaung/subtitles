WEBVTT
1
00:00:00.090 --> 00:00:04.410
In this section we are discussing about what is a module in JavaScript.

2
00:00:04.890 --> 00:00:10.200
Normally when you create an application, there are huge number of lines of coding involved.

3
00:00:10.530 --> 00:00:14.070
Ideally, you try to divide the coding into meaningful pieces.

4
00:00:14.490 --> 00:00:22.170
JavaScript gives you a way where you can create a module which you can export or import as per your

5
00:00:22.170 --> 00:00:25.650
requirement, especially with the E6 version.

6
00:00:26.160 --> 00:00:28.080
There are two important statements.

7
00:00:28.590 --> 00:00:30.360
Export and import.

8
00:00:30.720 --> 00:00:35.010
Using these statements, you can work with module implementation.

9
00:00:35.490 --> 00:00:43.320
Before we discuss about variety of modules and importing and exporting, I would like to show you a

10
00:00:43.320 --> 00:00:48.900
practical way, the simpler way to configure how we can import or export modules.

11
00:00:49.170 --> 00:00:55.590
Normally when you are working with frameworks like React or Angular, you do use import or export directly.

12
00:00:55.740 --> 00:01:01.980
The reason is that is a development server running, but if you try to do it with core JavaScript,

13
00:01:02.190 --> 00:01:04.349
then it isn't that easy as well.

14
00:01:04.920 --> 00:01:06.870
Let me show you why am I seeing this?

15
00:01:08.240 --> 00:01:12.860
Let's say this is your index start estimate where you want to show some content.

16
00:01:12.860 --> 00:01:16.790
I'll see shown some content of the page.

17
00:01:17.390 --> 00:01:22.190
Now let's say we want to include the script, but not with the traditional way.

18
00:01:22.400 --> 00:01:25.310
But you want to use the import and export statement.

19
00:01:25.790 --> 00:01:30.860
Let's say I'm creating one Kelsey Dargis where I have a function called Kelsey.

20
00:01:31.400 --> 00:01:39.230
Now, inside of this, I just want to display a message that module code executed because we want that

21
00:01:39.230 --> 00:01:41.300
this should be treated as a module.

22
00:01:41.630 --> 00:01:43.040
You need to export this.

23
00:01:43.040 --> 00:01:44.750
So I'm going to write export here.

24
00:01:45.230 --> 00:01:48.560
So I'll say export function and the function name.

25
00:01:49.070 --> 00:01:56.360
The next thing is, if we need to use the function which is defined in the Kelsey Jays, then you need

26
00:01:56.360 --> 00:01:57.380
to import it here.

27
00:01:57.890 --> 00:02:03.440
But if you directly try to import using the import statement, let me try that here I'll say import.

28
00:02:03.830 --> 00:02:06.550
What is the name of the function that I can use?

29
00:02:06.550 --> 00:02:12.470
So I'm going to say, Kelsey, if you want to import with a different name, that is also possible.

30
00:02:12.770 --> 00:02:16.250
And that's what I said in the beginning about various others in Texas.

31
00:02:16.250 --> 00:02:18.920
But at the moment we assume that everything is same.

32
00:02:19.280 --> 00:02:20.390
So I would say import.

33
00:02:20.780 --> 00:02:24.470
What I want to import is something called Kelsey.

34
00:02:24.770 --> 00:02:30.230
Let me also remind you that this curly brackets which I am using is actually the named import.

35
00:02:30.230 --> 00:02:33.650
But we will see all these intricacies as we go on.

36
00:02:33.890 --> 00:02:39.980
At the moment, I want to show you the basic import statement which can work with your index card,

37
00:02:40.030 --> 00:02:41.570
HDMI file here.

38
00:02:41.570 --> 00:02:46.010
I just use curly brackets and then there is the file.

39
00:02:46.010 --> 00:02:50.600
It's file in the same folder and the file name is Kelsey.

40
00:02:50.960 --> 00:02:56.000
Now let's just try to call the Kelsey function and see what happens.

41
00:02:56.570 --> 00:02:59.000
I'll open the browser and try to open the index.

42
00:02:59.000 --> 00:02:59.810
Start DMA.

43
00:02:59.960 --> 00:03:06.890
So this is the folder where we have the file and this is the content which is displayed and you see

44
00:03:06.890 --> 00:03:08.210
that there is some error coming.

45
00:03:09.480 --> 00:03:13.260
It is that Canada's import statement outside the module.

46
00:03:13.920 --> 00:03:17.610
The reason behind this is when you are using the script tag.

47
00:03:17.940 --> 00:03:21.270
You have to mention that you are going to import the module here.

48
00:03:21.810 --> 00:03:23.880
So I'm going to say type is equal to module.

49
00:03:24.630 --> 00:03:28.350
Now let's try to run the code and see whether it is running or not.

50
00:03:29.420 --> 00:03:36.920
Now comes an error saying that access to the script at whichever party this from originator has been

51
00:03:36.920 --> 00:03:41.900
blocked by the course that is cross origin resource sharing policy.

52
00:03:42.230 --> 00:03:49.190
This means when you want to run the module file with the import and export, you need to run some server.

53
00:03:49.520 --> 00:03:51.500
So what you can do to try this?

54
00:03:52.190 --> 00:04:00.080
What I have done here is I have configured the web server for Chrome inside my Google Chrome application

55
00:04:00.560 --> 00:04:02.950
and I'm going to choose the folder here.

56
00:04:02.960 --> 00:04:06.540
So I'll say this is the folder which I want to make as a server.

57
00:04:06.560 --> 00:04:08.180
That will be my web server part.

58
00:04:08.690 --> 00:04:10.880
So and then I'm going to switch it on.

59
00:04:12.910 --> 00:04:16.459
Once I switch it on, it shows me the u r l as well.

60
00:04:16.690 --> 00:04:20.110
So what I can do, I can open this u r l let me do that.

61
00:04:20.410 --> 00:04:24.640
So I'm going to say 1 to 7 .0.0.1.

62
00:04:25.150 --> 00:04:27.280
The port number is 8887.

63
00:04:27.730 --> 00:04:30.700
So now we are running a web server.

64
00:04:30.970 --> 00:04:36.280
So there will not be any issue and you see that it displays module code executed.

65
00:04:36.790 --> 00:04:44.200
So first thing is that if you want to try import or export statement, which are normal HTML and JavaScript

66
00:04:44.200 --> 00:04:50.890
file, you'll have to make sure that you are running a web server, then it will work the way you expect.

67
00:04:51.400 --> 00:04:52.990
So this was the basic syntax.

68
00:04:53.410 --> 00:04:56.770
Now let's talk about the related questions of this topic.

69
00:04:56.920 --> 00:04:59.920
The first question is already what is a module?

70
00:05:00.310 --> 00:05:07.270
So when we say a module, that means that you have a provision in the newer version of E6.

71
00:05:07.300 --> 00:05:13.180
We also had provision in older versions, but there was no directly import or export statement.

72
00:05:13.540 --> 00:05:22.210
So now we have import and export statement which allows you to export a module which can be used as

73
00:05:22.210 --> 00:05:23.080
in rand acquired.

74
00:05:23.410 --> 00:05:30.010
When we say a module, that means you are dividing your code into various logical pieces and when required

75
00:05:30.010 --> 00:05:32.380
you just imported and start using it.

76
00:05:32.860 --> 00:05:34.780
That's what a module is all about.

77
00:05:36.040 --> 00:05:40.850
The second question is, can you import any module inside the script tag?

78
00:05:41.070 --> 00:05:42.120
Of course you can.

79
00:05:42.390 --> 00:05:49.470
The only thing is that if you write a script like this, then this is the error we faced to avoid this

80
00:05:49.470 --> 00:05:51.360
particular edit what we did.

81
00:05:51.540 --> 00:05:55.670
We write like this where you have script type is equal to module.

82
00:05:55.680 --> 00:06:02.310
Once you have this type equal to module attribute, that means now you have a provision to import the

83
00:06:02.640 --> 00:06:03.570
modules here.

84
00:06:05.020 --> 00:06:10.390
The next question is how will you run the import and export statements on a local machine?

85
00:06:10.750 --> 00:06:11.140
All right.

86
00:06:11.140 --> 00:06:17.050
So as long as import and export statements are running on local machines concern, you need to have

87
00:06:17.050 --> 00:06:17.590
a server.

88
00:06:17.680 --> 00:06:22.450
Normally, when you upload your site on respective servers, you do not have any problem running these

89
00:06:22.450 --> 00:06:23.170
statements.

90
00:06:23.320 --> 00:06:29.830
Also, when you work with frameworks like Angular or React, then there is something called Webpack

91
00:06:29.980 --> 00:06:33.970
or a related build tool which will run the development server.

92
00:06:34.150 --> 00:06:40.450
So you are not worried about running import export statement directly, but when you try this import

93
00:06:40.450 --> 00:06:48.340
and export statement with simple HTML and JavaScript, then yes, if you are running it on local machine,

94
00:06:48.670 --> 00:06:53.080
you have to have some or the other server to temporarily run this.

95
00:06:53.320 --> 00:06:58.060
You can simply configure the Chrome Web server and that will do the job.

96
00:06:58.480 --> 00:06:59.590
This is how we did it.

97
00:06:59.890 --> 00:07:06.190
So this can be the answer for the question of running the import and export on local machine.

