1
00:00:02,080 --> 00:00:06,250
This section is all about the bouncing and throttling.

2
00:00:10,140 --> 00:00:17,850
Before we begin, let me also tell you that the bouncing and throttling is not a JavaScript keyword

3
00:00:17,850 --> 00:00:18,930
or a command.

4
00:00:20,090 --> 00:00:23,750
It is the approach or the way you handle events.

5
00:00:24,050 --> 00:00:30,530
So basically it is a concept to improve the event handling and the application performance.

6
00:00:31,510 --> 00:00:35,680
Let's look at this sample application to get some idea.

7
00:00:36,500 --> 00:00:39,710
In this application, I have placed a division.

8
00:00:40,440 --> 00:00:44,310
There is a mouse mode event configured on this division.

9
00:00:45,250 --> 00:00:53,320
Every time a mouse move event is fired, I'm incrementing a counter to know how many times the event

10
00:00:53,320 --> 00:00:54,250
is fired.

11
00:00:55,010 --> 00:01:03,530
I have also implemented throttling and d bouncing with the same event to check the number of executions.

12
00:01:05,510 --> 00:01:11,360
Now let's check by moving the mouse and see how the counter gets incremented.

13
00:01:12,520 --> 00:01:20,110
The moment I start moving the mouse, you see that the normal count says 65.

14
00:01:20,200 --> 00:01:25,420
Throttle count stays eight and the bounce count is four.

15
00:01:25,720 --> 00:01:28,360
Let me again move the mouse for some time.

16
00:01:31,890 --> 00:01:35,490
And you see that the number differs a lot.

17
00:01:36,530 --> 00:01:46,190
This particular count shows that how many times the actual mouse move event is fired, that is 114 times.

18
00:01:47,070 --> 00:01:48,870
The total count shows.

19
00:01:48,870 --> 00:01:49,640
14.

20
00:01:49,650 --> 00:01:58,050
That means with the approach of throttling the mouse mode event fired only 14 times as compared to 114

21
00:01:58,050 --> 00:01:59,340
with normal count.

22
00:02:00,440 --> 00:02:06,470
At the same time, if you observe the bounce count, it just says eight times.

23
00:02:07,430 --> 00:02:15,890
It means that by implementing the bouncing approach, the mouse move event was executed only eight times.

24
00:02:16,930 --> 00:02:25,480
This is just an example to understand that you are controlling the events fired like a mouse moon event

25
00:02:25,480 --> 00:02:29,770
or maybe a scroll event or even a key press event.

26
00:02:30,940 --> 00:02:40,120
Throttling and d bouncing help you to control or to improvise the performance while the events are executed.

27
00:02:40,860 --> 00:02:41,340
Here.

28
00:02:41,340 --> 00:02:49,080
I have just shown the counter increment, but imagine that on an event you are making a call to an API,

29
00:02:49,110 --> 00:02:55,900
making an S&P call, or you may have some huge process to execute within a function.

30
00:02:55,920 --> 00:03:03,780
In such cases, if you use throttling or bouncing, it's going to improvise the overall performance.

31
00:03:04,740 --> 00:03:08,580
So this is what the bouncing and throttling is all about.

32
00:03:09,470 --> 00:03:14,750
We will create the same application step by step to master this concept.

33
00:03:14,750 --> 00:03:21,170
And also we will see use cases of the bouncing and throttling in detail.

34
00:03:22,070 --> 00:03:28,520
So let's begin with the conceptual understanding of throttling and the bouncing first.

