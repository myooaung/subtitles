1
00:00:00,060 --> 00:00:03,900
In this section we are going to discuss about capturing groups.

2
00:00:04,530 --> 00:00:11,640
Capturing group is one of those concepts of regular expression where developers think to find the solution

3
00:00:11,640 --> 00:00:17,610
online and paste it rather than understanding the workings or mechanism of it.

4
00:00:18,330 --> 00:00:24,000
But I assure you that after going through this section, you would not only love the capturing group

5
00:00:24,000 --> 00:00:31,020
concept, but you will realize that you can achieve very complex search and replace functionalities

6
00:00:31,020 --> 00:00:31,920
using it.

7
00:00:32,790 --> 00:00:37,560
Let's create a core sample and then we try to understand the whole concept.

8
00:00:38,310 --> 00:00:46,930
I am declaring a string where I want to find a number, where number is divided into two parts, separated

9
00:00:46,930 --> 00:00:55,360
with a dash like one, two, three, four, five, six, seven or 56789045.

10
00:00:56,020 --> 00:01:04,569
Naturally, the pattern for the same will be slash D for a digit plus quantifier for one or more digits,

11
00:01:04,750 --> 00:01:09,100
a dash and again slash D and plus sign.

12
00:01:09,430 --> 00:01:12,070
Let's first achieve this programmatically.

13
00:01:12,820 --> 00:01:17,530
I'll declare a variable where I say let string is equal to here.

14
00:01:18,450 --> 00:01:28,320
Any number is to test the pattern will be slash D plus dash, slash D plus, of course, I'm applying

15
00:01:28,320 --> 00:01:29,910
a global modifier as well.

16
00:01:30,510 --> 00:01:36,750
I'll say console or log pattern dot exec that is XY and the string.

17
00:01:40,790 --> 00:01:46,190
As you can see, the output, it found the number with a dash sign in the string.

18
00:01:46,400 --> 00:01:54,710
But if I expand the error result, there is a zero and the found value, the zeroth element is containing

19
00:01:54,710 --> 00:01:57,650
the entire pattern you want to search for.

20
00:01:57,680 --> 00:02:06,410
At the moment there is no group defined using parentheses, and that means there is one default group

21
00:02:06,410 --> 00:02:07,790
group number zero.

22
00:02:07,820 --> 00:02:10,310
That is the entire pattern.

23
00:02:10,460 --> 00:02:15,370
Now, without more discussion, let's create two groups in the search pattern.

24
00:02:15,380 --> 00:02:21,620
I'm simply adding parentheses around slash D plus and running the code again.

25
00:02:25,410 --> 00:02:29,570
Now you see zeroth element, which has the entire pattern.

26
00:02:29,580 --> 00:02:37,890
First element shows the first group that is the first slash, the plus and second element shows the

27
00:02:37,890 --> 00:02:40,590
second group that is the second slash D plus.

28
00:02:40,830 --> 00:02:48,900
So when you give parentheses, it creates a group and each group can be accessed using a dollar sign

29
00:02:48,900 --> 00:02:49,920
curly bracket.

30
00:02:49,920 --> 00:02:55,350
And you put the group number N where PN is the group number.

31
00:02:56,230 --> 00:02:57,860
Let's try it practically.

32
00:02:57,880 --> 00:03:04,980
Assume that we want that number before and after we have that we want to swap.

33
00:03:04,990 --> 00:03:07,070
So the code will be like this.

34
00:03:07,090 --> 00:03:09,680
Let's try the replace method here.

35
00:03:09,700 --> 00:03:15,940
So after the pattern, I'll say let new string is equal to string dot replace the pattern.

36
00:03:15,940 --> 00:03:19,930
And here I'll say dollar to dash dollar one.

37
00:03:19,930 --> 00:03:24,820
That means the second group should come first and the first group should go second.

38
00:03:24,820 --> 00:03:26,270
That is after the dash.

39
00:03:26,290 --> 00:03:28,210
Let's try to print the new string.

40
00:03:29,220 --> 00:03:30,450
And run the code.

41
00:03:31,770 --> 00:03:39,000
Now you can see that four, five, six, seven is shifted before the dash and one, two, three is shifted

42
00:03:39,000 --> 00:03:40,650
after the dash.

43
00:03:40,890 --> 00:03:43,380
Let's take a more practical example.

44
00:03:43,410 --> 00:03:50,900
Imagine you have a string of names where you have first name and surname, for example, like this.

45
00:03:50,910 --> 00:03:55,420
You want to bring the surname first with regular expression groups.

46
00:03:55,440 --> 00:03:56,700
It is really easy.

47
00:03:57,240 --> 00:04:06,000
The pattern will search for any word that is slash W having at least one value using quantifier plus.

48
00:04:06,000 --> 00:04:14,970
So the search of any word we use slash W plus and that we put inside parentheses to make a group.

49
00:04:15,450 --> 00:04:22,650
Then we use the replace method where we just mention that the second group will come first and then

50
00:04:22,650 --> 00:04:26,350
the first group, of course to change the value.

51
00:04:26,370 --> 00:04:31,830
I will also use the replace method, so let's write the code and see the output.

52
00:04:31,860 --> 00:04:34,470
I'll say let string is equal to first name.

53
00:04:34,470 --> 00:04:39,330
Putting a comma and surname the search pattern will be.

54
00:04:40,270 --> 00:04:46,600
Parentheses and w plus again after comma I put the same.

55
00:04:47,230 --> 00:04:51,490
Now I'll say string dot replace pattern.

56
00:04:52,420 --> 00:04:54,340
Dollar to dollar one.

57
00:04:54,610 --> 00:04:57,570
I'm not putting a comma inside the pattern.

58
00:04:57,580 --> 00:05:04,180
This means initially the string we have is first name, comma, surname, but because we are replacing

59
00:05:04,180 --> 00:05:11,650
it with dollar two space dollar one that means it'll come surname space first name.

60
00:05:11,650 --> 00:05:13,510
That will not be any comma.

61
00:05:13,720 --> 00:05:17,680
But if you want to put a comma, you can write it like this.

62
00:05:18,430 --> 00:05:20,140
Anyway, we do not want that.

63
00:05:20,140 --> 00:05:21,430
Let's run the code.

64
00:05:23,030 --> 00:05:26,630
As you see that we have the surname and first name without comma.

65
00:05:26,660 --> 00:05:27,380
Of course.

66
00:05:28,010 --> 00:05:31,190
Remember that the Zero Group is the entire pattern.

67
00:05:31,190 --> 00:05:33,970
Then we keep on adding parentheses.

68
00:05:33,980 --> 00:05:37,160
It creates new groups in the above code.

69
00:05:37,190 --> 00:05:46,370
The entire pattern is the zeroth group, which is by default first W plus reference dollars one second

70
00:05:46,370 --> 00:05:52,310
slash W plus is the second group referred as dollar two and so on.

71
00:05:52,430 --> 00:05:57,830
At the moment we see that each group is given a number automatically.

72
00:05:58,130 --> 00:06:02,600
We do also have a provision where we can name these groups.

73
00:06:02,600 --> 00:06:05,630
So that is a concept called named groups.

74
00:06:10,620 --> 00:06:14,610
Okay, So dollar number is sometimes difficult to remember.

75
00:06:14,790 --> 00:06:17,940
You can also give a name to each group.

76
00:06:18,120 --> 00:06:25,740
To give a name you can use question mark, angle brackets, and in the brackets you have to give the

77
00:06:25,740 --> 00:06:26,700
group name.

78
00:06:26,730 --> 00:06:34,500
Remember, these angle brackets are not to show the syntax they are required while you give the group

79
00:06:34,500 --> 00:06:35,100
name.

80
00:06:35,810 --> 00:06:39,470
You have to give the group name after opening parentheses.

81
00:06:40,350 --> 00:06:48,120
For example, I want to give a F name and s name group name respectively to first name and the surname.

82
00:06:48,540 --> 00:06:52,470
I'll use a question mark and giving F name here.

83
00:06:52,500 --> 00:06:54,960
Same is the case with s name.

84
00:06:55,230 --> 00:06:58,650
Let's also do the same with replace matter.

85
00:06:58,860 --> 00:07:03,810
Instead of saying dollar two, I will say s name and of course F name.

86
00:07:07,330 --> 00:07:11,710
As you can see, using dollar SE name and dollar F name.

87
00:07:11,710 --> 00:07:17,020
Now we can access the group values, which is easier when working with more groups.

88
00:07:17,410 --> 00:07:26,650
As the group names can be given, all groups can be referred by names using groups, property, the

89
00:07:26,650 --> 00:07:32,020
match and match all method return groups with groups property.

90
00:07:32,440 --> 00:07:36,580
Let's check it with some modification in the existing code.

91
00:07:37,330 --> 00:07:44,740
We will remove replace method and take a separate variable to retrieve groups using match method.

92
00:07:44,770 --> 00:07:50,650
I'll use the variable called group value is equal to string.

93
00:07:50,650 --> 00:07:56,560
Don't match the pattern dot groups which is a property returned by match method.

94
00:08:02,870 --> 00:08:09,230
Let's display the group value and also I'll say group value dot F name.

95
00:08:13,530 --> 00:08:21,720
As you can see that the group value is an object littoral with key of named group and value of the search

96
00:08:21,720 --> 00:08:22,350
string.

97
00:08:22,590 --> 00:08:30,060
You can certainly refer individual keys using object little dot key name that is group value F name

98
00:08:30,060 --> 00:08:32,309
here which returns the first name.

99
00:08:37,460 --> 00:08:44,510
In case if you want to exclude any of the group from being captured, then you can use a question mark

100
00:08:44,510 --> 00:08:45,530
and colon.

101
00:08:45,830 --> 00:08:48,740
In such a case, the search will execute.

102
00:08:48,740 --> 00:08:53,540
But the group, starting with question Mark Colon, will not be captured.

103
00:08:53,990 --> 00:08:57,190
Let's learn this using the replace code.

104
00:08:57,200 --> 00:08:58,070
We tried.

105
00:08:59,290 --> 00:09:05,470
I'm just going to add a question mark and Cologne before the second slash plus.

106
00:09:05,470 --> 00:09:09,520
That means I do not want to capture the second group.

107
00:09:09,520 --> 00:09:12,520
So there will be only one group which will be captured.

108
00:09:12,520 --> 00:09:17,710
And the second group is included in this search but not captured.

109
00:09:17,710 --> 00:09:20,080
So Dolor two will not have any value.

110
00:09:20,080 --> 00:09:26,890
As you see, that is only one group captured and that is why dollars two becomes a string as there is

111
00:09:26,890 --> 00:09:28,510
no second group created.

112
00:09:28,510 --> 00:09:34,420
So question mark and colon is generally useful when you want to search a string, but do not want to

113
00:09:34,450 --> 00:09:36,430
capture it as a group.

114
00:09:36,430 --> 00:09:40,900
So this is all about capturing name and non capturing groups.

115
00:09:40,900 --> 00:09:47,140
As we go on with the practical examples, you will have a better idea where exactly this is used.

116
00:09:47,140 --> 00:09:52,390
But one practical example we have seen is about shifting or swapping the values.

117
00:09:52,390 --> 00:09:57,310
So that is a very common practice we need in practical programming world.

