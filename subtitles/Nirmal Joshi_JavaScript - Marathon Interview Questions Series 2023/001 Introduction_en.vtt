WEBVTT
1
00:00:09.990 --> 00:00:17.550
In the modern web development, there is a very commonly used term called component based architecture.

2
00:00:18.470 --> 00:00:25.340
Component based architecture is the approach most of the modern frameworks also implement.

3
00:00:26.160 --> 00:00:28.530
Let me explain what it means.

4
00:00:28.710 --> 00:00:36.810
Consider this Web page, which has a menu, a search bar, title card and other cards.

5
00:00:37.410 --> 00:00:44.610
Now, with the traditional approach, you consider this as an entire page and develop or design in a

6
00:00:44.610 --> 00:00:45.450
sequence.

7
00:00:45.930 --> 00:00:53.370
But in component based approach, you divide all these in smaller components and they are eventually

8
00:00:53.370 --> 00:00:55.710
merged to make a web page.

9
00:00:56.040 --> 00:01:03.750
In short, the functionalities of a web page are divided into smaller segments, and that is what a

10
00:01:03.750 --> 00:01:06.060
component based architecture is.

11
00:01:06.800 --> 00:01:11.960
And to implement this architecture, you should create web components.

12
00:01:12.650 --> 00:01:17.090
Web component is a newer way for web development.

13
00:01:17.840 --> 00:01:26.450
The advantages of web components are unlimited, but to count a few, the code gets more manageable.

14
00:01:26.870 --> 00:01:34.310
Development becomes easy, especially for multiple developers working on a single page and parallelly

15
00:01:34.310 --> 00:01:36.620
they work on different components.

16
00:01:37.390 --> 00:01:44.320
Maintenance or error handling becomes more specific to a region or component.

17
00:01:45.140 --> 00:01:50.120
Less development time as the design is divided into smaller segments.

18
00:01:50.980 --> 00:01:54.100
They are easy to share among other developers.

19
00:01:54.100 --> 00:01:57.190
So it increases the reusability.

20
00:01:58.060 --> 00:02:01.710
It's done in JavaScript without any dependencies.

21
00:02:01.720 --> 00:02:10.120
It means your application uses more and more native features rather than depending on third party frameworks.

22
00:02:12.000 --> 00:02:14.250
To understand the web components.

23
00:02:14.250 --> 00:02:21.840
We are also going to implement this particular page where each product is displayed using a custom card

24
00:02:21.840 --> 00:02:22.770
component.

25
00:02:22.800 --> 00:02:24.870
You can see there is a header section.

26
00:02:24.870 --> 00:02:31.710
I have just shown this to illustrate that in the real life applications you will have some menu or header

27
00:02:31.710 --> 00:02:35.100
section, then you have some products to display.

28
00:02:35.100 --> 00:02:41.910
So each card is displaying the image of the product, some text, and maybe some option which allows

29
00:02:41.910 --> 00:02:42.870
you to buy.

30
00:02:44.150 --> 00:02:54.020
We will have our own custom HTML tag named product card, which will display this one product at a time.

31
00:03:13.120 --> 00:03:21.070
Now if we switch to the code window, you can see that for every card displayed we have a division.

32
00:03:21.610 --> 00:03:26.680
Each division is having somewhere around 9 to 10 lines.

33
00:03:28.570 --> 00:03:33.070
Those nine or ten lines are actually displaying one card.

34
00:03:33.610 --> 00:03:39.910
When we implement this web component, we will not need these lines.

35
00:03:41.190 --> 00:03:46.800
Instead of these lines, you will just have to write the custom HTML tag.

36
00:03:46.800 --> 00:03:51.360
That is, in our case, it will be product dash card.

37
00:03:52.410 --> 00:03:52.860
This.

38
00:03:52.860 --> 00:03:54.700
We have returned once.

39
00:03:54.720 --> 00:03:58.830
It means it is going to show the entire card.

40
00:03:59.570 --> 00:04:07.640
If you put this product card tag four times, it will display the product component, the product card

41
00:04:07.640 --> 00:04:08.810
four times.

42
00:04:10.640 --> 00:04:16.790
And here each product card is going to be a custom HTML element.

43
00:04:17.089 --> 00:04:20.990
Let's start implementing web components practically.

