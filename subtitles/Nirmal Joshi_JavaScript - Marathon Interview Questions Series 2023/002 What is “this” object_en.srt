1
00:00:00,090 --> 00:00:05,580
The second question in audience category is about what is this object?

2
00:00:05,970 --> 00:00:12,570
And there are two related questions for this topic that this object is a common object used at many

3
00:00:12,570 --> 00:00:14,460
places in day to day programming.

4
00:00:15,440 --> 00:00:20,510
The definition of this object is that it contains the current context.

5
00:00:21,640 --> 00:00:26,170
That this object can have different values depending on where it is placed.

6
00:00:27,280 --> 00:00:30,580
Let's check one simple example in the browser window.

7
00:00:31,730 --> 00:00:33,710
I will simply say cancelled out loud.

8
00:00:35,310 --> 00:00:39,270
And will try to display value of this letter on the code.

9
00:00:40,290 --> 00:00:45,810
As you can see right now, it is displaying the window object that is by default.

10
00:00:45,840 --> 00:00:51,750
If you refer to this object in the browser window, it is going to display the window object only.

11
00:00:53,080 --> 00:00:59,800
The reason is that this refers to the current context, the current context, or where exactly it is

12
00:00:59,800 --> 00:01:05,349
pointing to is the window object because window is the global object in the browser.

13
00:01:06,380 --> 00:01:10,940
Let's say, for example, I put this statement inside a function.

14
00:01:11,180 --> 00:01:17,240
For example, I create a function called test and I shift this in this function.

15
00:01:17,780 --> 00:01:24,380
Now, if I run the function test and if I run, this still uses the window object.

16
00:01:25,300 --> 00:01:25,720
Again.

17
00:01:25,720 --> 00:01:30,250
The reason is the test function is actually part of the window.

18
00:01:30,250 --> 00:01:33,250
Object window is the global object.

19
00:01:33,250 --> 00:01:40,360
So for example, if I just see window dart e is equal to five.

20
00:01:40,840 --> 00:01:44,980
This means I'm declaring one property e, which has value five.

21
00:01:45,580 --> 00:01:53,640
Now, in case if I try to display even in this function, for example, this dot e, it displays fi

22
00:01:53,650 --> 00:01:54,160
only.

23
00:01:54,760 --> 00:02:03,040
So because this binds to the window object, it is going to get the value of a the very same.

24
00:02:03,040 --> 00:02:13,060
E So at the moment the function test is also part of window object and this member is also part of window

25
00:02:13,060 --> 00:02:13,630
object.

26
00:02:13,630 --> 00:02:16,660
And this refers to the global scope in this case.

27
00:02:17,820 --> 00:02:20,150
Let's try to shift this.

28
00:02:20,160 --> 00:02:23,010
That is the object this into object literal.

29
00:02:23,400 --> 00:02:26,250
We have already seen object literally in the previous section.

30
00:02:27,060 --> 00:02:28,350
I hope you are clear with it.

31
00:02:28,920 --> 00:02:33,730
So if you haven't gone through the object literally video, please make sure that you do refer.

32
00:02:33,750 --> 00:02:34,380
Very well.

33
00:02:35,310 --> 00:02:39,510
Now I am creating an object literal here which has a method.

34
00:02:39,510 --> 00:02:41,340
For example, the test method.

35
00:02:42,150 --> 00:02:47,700
And here, if I try to display value of this, let's say object art test.

36
00:02:48,600 --> 00:02:52,230
Now the test function is actually part of this object.

37
00:02:52,770 --> 00:02:57,240
So now if I try to refer to it, it displays the value of object.

38
00:02:57,240 --> 00:02:57,840
That means.

39
00:02:57,870 --> 00:03:03,090
Now this is pointing to object at the same time.

40
00:03:03,360 --> 00:03:10,860
In case if I convert this test into arrow function, then the behavior of this will change in the traditional

41
00:03:10,860 --> 00:03:11,470
function.

42
00:03:11,490 --> 00:03:18,380
For example, I write the traditional way that is test is equal to I'm using colon for equal to right

43
00:03:18,390 --> 00:03:19,860
because we are an object literal.

44
00:03:20,220 --> 00:03:27,390
Now here if I say function and if we run this, it still sees the object.

45
00:03:28,400 --> 00:03:34,070
Imagine if you convert this into arrow function, let's say remove this function and put an arrow here.

46
00:03:35,270 --> 00:03:38,870
Now, if I run this again, it displays a window.

47
00:03:39,800 --> 00:03:45,020
So earlier when we did not use the arrow function, it was showing the reference off object.

48
00:03:45,020 --> 00:03:51,830
But the moment we converted the matter into arrow function, it started displaying window object.

49
00:03:52,010 --> 00:03:56,600
This means that this object does not work with arrow function.

50
00:03:57,410 --> 00:04:01,360
That is also a reason which I have already discussed in arrow function tutorials.

51
00:04:01,370 --> 00:04:07,070
But just to brief about it that earlier the function had a duty to behave as a class.

52
00:04:07,910 --> 00:04:11,210
This arrow function doesn't have to behave as a class.

53
00:04:11,450 --> 00:04:14,870
We are going to see what classes are in forthcoming questions.

54
00:04:15,080 --> 00:04:21,870
But here the arrow function is free from playing a role of class so it doesn't have to worry about handling

55
00:04:21,870 --> 00:04:23,660
the this with the current context.

56
00:04:24,840 --> 00:04:30,540
So when you say arrow function, this will not work the way you are expecting if you are comparing it

57
00:04:30,540 --> 00:04:31,800
with the traditional function.

58
00:04:32,160 --> 00:04:35,310
So you can see that this doesn't work with arrow function.

59
00:04:35,310 --> 00:04:37,140
And I have already mentioned the reason why.

60
00:04:38,050 --> 00:04:40,720
Let's discuss related questions of this topic.

61
00:04:41,380 --> 00:04:47,410
The first question is what will be the output of discord if you run in the browser and why now?

62
00:04:47,410 --> 00:04:48,400
Discord is same.

63
00:04:48,400 --> 00:04:49,420
What we tried here.

64
00:04:49,870 --> 00:04:52,000
The code is that you have a function test.

65
00:04:52,570 --> 00:04:58,500
You try to display the value of this and if you run this, it displays window.

66
00:04:58,510 --> 00:05:00,310
The reason is the current context.

67
00:05:00,310 --> 00:05:05,650
Whatever you declare in the browser window, if it is not inside any function, either wrapper or object

68
00:05:05,650 --> 00:05:09,910
literal or be a class, then it's going to refer the window object only.

69
00:05:09,910 --> 00:05:14,920
So when you try to display a value of this in a function which is written inside a browser window,

70
00:05:15,010 --> 00:05:20,860
it is going to refer the window object, which is actually the global object in the browser about the

71
00:05:20,860 --> 00:05:26,440
global object and the browser architecture we have already discussed in DOM related questions.

72
00:05:27,520 --> 00:05:33,490
The second question is what is the context of this inside arrow function or what will be the output

73
00:05:33,490 --> 00:05:34,180
of this core?

74
00:05:34,390 --> 00:05:39,990
We have already discussed that this object doesn't work with arrow functions, so actually it refers

75
00:05:40,000 --> 00:05:44,800
the global object, which our global reference is in their context.

76
00:05:44,810 --> 00:05:50,890
Say, for example, if I put this code in Node.js environment, then it will refer to the global this.

77
00:05:51,430 --> 00:05:55,210
So arrow function doesn't work with this object with a current context.

78
00:05:55,210 --> 00:06:00,430
So it's going to refer the global wrapper, whichever is the topmost global object that will be referred

79
00:06:00,430 --> 00:06:01,840
with this object.

