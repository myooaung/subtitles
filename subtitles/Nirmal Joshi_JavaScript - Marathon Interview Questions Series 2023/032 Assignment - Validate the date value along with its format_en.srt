1
00:00:03,950 --> 00:00:08,390
In the previous exercise, we tried to validate the date format.

2
00:00:09,910 --> 00:00:16,720
Now, in this exercise, we are validating the value entered as a date along with its format.

3
00:00:17,380 --> 00:00:28,870
Let's take the format for Wise three M's and D D where Y represents year and can start with 19 or 20

4
00:00:28,870 --> 00:00:32,020
because we are validating the value as well.

5
00:00:32,530 --> 00:00:39,820
We are considering character month in this example and d d is the date validation.

6
00:00:39,820 --> 00:00:43,360
So we are going to check the value of date as well.

7
00:00:43,930 --> 00:00:46,330
Let's take the year part first.

8
00:00:46,360 --> 00:00:48,040
Here we want to fix that.

9
00:00:48,040 --> 00:00:52,820
The year's first two digits can only be 19 or 20.

10
00:00:52,840 --> 00:00:56,860
Then the rest of the value can be two more digits.

11
00:00:57,070 --> 00:01:03,790
So for that I will use a correct sign, put a parentheses, and will use a pipe sign between 90 and

12
00:01:03,790 --> 00:01:04,390
20.

13
00:01:04,400 --> 00:01:09,040
So we decide that the first value will be either 19 or 20.

14
00:01:09,190 --> 00:01:11,320
Then we have two digits.

15
00:01:11,320 --> 00:01:14,560
So I'm going to use slash D two times.

16
00:01:14,560 --> 00:01:19,360
Then the next value can be a dash or a space.

17
00:01:19,690 --> 00:01:22,890
For space we can use slash s.

18
00:01:22,900 --> 00:01:28,520
So for this pattern we are going to add one more parentheses in square bracket.

19
00:01:28,540 --> 00:01:36,820
I will say dash or slash as that means after the year section there might be a dash or a white space.

20
00:01:37,000 --> 00:01:44,890
After the separator we need to have a character month which can be Jen February, March that is Ma,

21
00:01:45,070 --> 00:01:47,620
may y and so on.

22
00:01:47,650 --> 00:01:51,550
In short, it will be any three character valid month.

23
00:01:51,580 --> 00:01:59,260
Here we will use parentheses and we will put a list of 12 months separated by a pipe sign.

24
00:01:59,530 --> 00:02:06,790
In case, if you want to put these values in a variable, you can use the regex class itself and you

25
00:02:06,790 --> 00:02:07,840
can instantiate.

26
00:02:07,840 --> 00:02:10,660
But anyway, we are going to write it in the pattern.

27
00:02:10,930 --> 00:02:18,370
At the same time we will add modifier AI to ignore the case that we will see practically in one of the

28
00:02:18,370 --> 00:02:19,210
example.

29
00:02:19,690 --> 00:02:22,300
Now we need the separator again.

30
00:02:22,300 --> 00:02:26,740
That is a dash or maybe a whitespace after the month section.

31
00:02:26,740 --> 00:02:31,030
So we will use the very same pattern that is inside the square.

32
00:02:31,030 --> 00:02:34,720
Brackets will say dash or slash TSS.

33
00:02:34,750 --> 00:02:43,150
Remember this very same pattern we have used to segregate the year section and month section.

34
00:02:43,150 --> 00:02:50,650
So if you want you can use the back reference that is this pattern itself has back reference number

35
00:02:50,650 --> 00:02:56,050
two, because this is going to be the captured group because we have placed the parentheses here so

36
00:02:56,050 --> 00:03:01,210
we can use slash tool instead of writing dash and slash as again.

37
00:03:01,210 --> 00:03:08,140
But anyway we'll go with dash and slash as only and then we want to put this pattern.

38
00:03:08,260 --> 00:03:16,630
Of course there will be a one or two digit value so we can use slash DX, but that will not allow us

39
00:03:16,630 --> 00:03:19,300
to validate the value given as a date.

40
00:03:19,300 --> 00:03:21,850
It will just allow us to check the format.

41
00:03:21,850 --> 00:03:26,230
But in this example, we are trying to check the value as well.

42
00:03:26,230 --> 00:03:31,840
So in that case we will use few value validations with alteration.

43
00:03:31,840 --> 00:03:36,100
That is a pipe sign out of two digits of date.

44
00:03:36,100 --> 00:03:42,120
The first digit can have zero and then any number between one and nine.

45
00:03:42,130 --> 00:03:44,050
This is the first possibility.

46
00:03:44,050 --> 00:03:52,690
Or it can begin with one or two that is one to inside the square bracket and then the next digit can

47
00:03:52,690 --> 00:03:54,810
be between zero and nine.

48
00:03:54,820 --> 00:04:00,850
Or it may start with three and next digit can be zero or one.

49
00:04:01,480 --> 00:04:01,850
Hmm.

50
00:04:01,960 --> 00:04:04,360
So now the pattern looks quite something.

51
00:04:04,360 --> 00:04:06,040
Let's check it practically.

52
00:04:06,040 --> 00:04:09,730
I will use a variable where I'm going to add a valid date.

53
00:04:11,470 --> 00:04:13,000
Now, this is the pattern.

54
00:04:15,100 --> 00:04:22,600
And I'm using a test method to check whether it has successfully validated the value and format or not.

55
00:04:22,630 --> 00:04:24,130
Let me run this code.

56
00:04:25,770 --> 00:04:27,820
So now you see the output.

57
00:04:27,840 --> 00:04:33,540
It says true as there are valid values entered now instead of lowercase.

58
00:04:33,570 --> 00:04:40,660
Jan, let's try to make Jan an uppercase and run the code instead of making it in uppercase.

59
00:04:40,680 --> 00:04:44,700
You can simply make the j that is the first letter in uppercase.

60
00:04:44,700 --> 00:04:48,240
Then also it will run as the false test.

61
00:04:48,270 --> 00:04:50,460
Let's execute this and see the output.

62
00:04:51,940 --> 00:04:58,510
So now the pattern is not working as the month is a different case than expected in the pattern.

63
00:04:58,540 --> 00:05:03,460
To resolve this, we will add modifier AI which will ignore the case.

64
00:05:03,460 --> 00:05:05,560
Let's add AI and run the code.

65
00:05:09,450 --> 00:05:14,040
Now you see that because we have a case ignoring modifier.

66
00:05:14,070 --> 00:05:16,950
Now month name can be in any case.

67
00:05:17,250 --> 00:05:20,900
Now let's try to fail the output by adding invalid date.

68
00:05:20,910 --> 00:05:26,190
That is, I'm adding 45 in the day section and run the code.

69
00:05:28,300 --> 00:05:32,790
As you can see, it returns false when the day is invalid.

70
00:05:32,800 --> 00:05:37,840
So this is how you can check values of date along with the format.

71
00:05:37,870 --> 00:05:43,990
Of course, there are many other validations you need to check, like a leap year validation.

72
00:05:43,990 --> 00:05:49,840
Maybe for February you need to check that a number of days are correct or not, so there can be many

73
00:05:49,840 --> 00:05:54,430
date validations you will want to add in the very same example.

74
00:05:54,430 --> 00:06:02,230
But this core sample can be extended for more complex validations once you know the basics of this implementation.

