WEBVTT
1
00:00:00.210 --> 00:00:03.840
This new section is about regular expression methods.

2
00:00:04.410 --> 00:00:09.270
We are discussing methods used with the regular expression class.

3
00:00:10.220 --> 00:00:16.580
We have already used a few methods to try modifiers, qualifiers and character classes.

4
00:00:16.850 --> 00:00:20.660
But now we will learn the individual method in detail.

5
00:00:21.260 --> 00:00:26.690
The first method we are looking at is the x SC method.

6
00:00:27.260 --> 00:00:32.689
Along with this method we are going to learn about last index property as well.

7
00:00:33.980 --> 00:00:42.020
The syntax of this method is that we give the pattern because this method is applied on the pattern.

8
00:00:42.020 --> 00:00:43.730
So we say pattern dot.

9
00:00:43.760 --> 00:00:49.130
The method name and the string in which you want to perform the search.

10
00:00:49.850 --> 00:00:51.440
Let's try it practically.

11
00:00:52.130 --> 00:00:53.660
I'll create a variable.

12
00:00:56.800 --> 00:00:59.110
Creating a pattern where I want to search.

13
00:00:59.110 --> 00:01:00.760
There is word.

14
00:01:01.640 --> 00:01:04.069
Let's try to display the value.

15
00:01:06.460 --> 00:01:13.810
So here we are trying to search for the word is and the matter has returned the first match.

16
00:01:14.530 --> 00:01:20.470
Now I just want that X should find the next occurrence as well.

17
00:01:20.980 --> 00:01:25.540
So let's add one more XY to find the second occurrence.

18
00:01:27.910 --> 00:01:29.710
I will say console.log.

19
00:01:36.030 --> 00:01:39.480
As you see in the output, it has returned the same word.

20
00:01:39.900 --> 00:01:46.560
So if we want that it should search for the next word, then we will add the slash g modifier.

21
00:01:46.710 --> 00:01:49.170
So let's add it and see the output.

22
00:01:54.200 --> 00:01:57.170
Now it returns the desired output.

23
00:01:57.740 --> 00:02:05.840
What XY actually does is when we give slash g modifier, it searches for the first occurrence in the

24
00:02:05.840 --> 00:02:12.980
first call and then it stores the next search index in a property called last index.

25
00:02:13.550 --> 00:02:21.320
So in this case it found there is word on the second index and the word is of length to.

26
00:02:22.020 --> 00:02:27.120
So from the fourth index, the next search will begin to confirm.

27
00:02:27.120 --> 00:02:34.560
Let's try to print the value of last index property before the second exec matters execution.

28
00:02:35.220 --> 00:02:37.290
I will add the last index.

29
00:02:37.890 --> 00:02:39.590
I'll say console.log.

30
00:02:41.060 --> 00:02:45.260
Last index and pattern at last index.

31
00:02:45.680 --> 00:02:53.720
Now, you can make out that every time X executes it returns the source value and stores.

32
00:02:53.930 --> 00:02:59.930
Next, search is starting position in a property called last index.

33
00:03:00.620 --> 00:03:08.510
Let's try to print last index for all XY and also add to more x methods.

34
00:03:08.720 --> 00:03:14.090
I'm adding the last index property before every XY execution.

35
00:03:15.200 --> 00:03:18.080
Now let's run the code and understand the output.

36
00:03:21.900 --> 00:03:24.720
First, last index is zero.

37
00:03:25.470 --> 00:03:30.210
So that is the position from where the FCC started searching.

38
00:03:30.660 --> 00:03:36.520
It found its word on second position and length is two.

39
00:03:36.540 --> 00:03:39.480
So next last index is four.

40
00:03:39.600 --> 00:03:44.130
That is, it will start searching from fourth position.

41
00:03:44.490 --> 00:03:49.550
It found the next is word on fifth position and length is two.

42
00:03:49.560 --> 00:03:53.640
So next search will begin from seventh position.

43
00:03:53.640 --> 00:03:59.340
And this goes on, of course, for the last search that is no match.

44
00:03:59.340 --> 00:04:03.600
So at the end it returns null here.

45
00:04:03.600 --> 00:04:11.790
Instead of keeping the XY multiple times, we can certainly use a loop which searches till the end of

46
00:04:11.790 --> 00:04:12.420
string.

47
00:04:12.780 --> 00:04:21.820
Let's convert the above coding more logical where we put a loop which repeats xy until null.

48
00:04:21.839 --> 00:04:23.320
So what will I do?

49
00:04:23.340 --> 00:04:26.190
I will remove all the console.log at the moment.

50
00:04:27.150 --> 00:04:28.790
I will declare a variable.

51
00:04:28.800 --> 00:04:32.010
Let's say result is equal to space.

52
00:04:32.610 --> 00:04:34.610
Now I'm going to put a loop here.

53
00:04:34.620 --> 00:04:38.870
I will say while result is not null, I want to do something.

54
00:04:38.880 --> 00:04:40.000
What I want to do.

55
00:04:40.020 --> 00:04:42.830
I want to first print the last index.

56
00:04:42.840 --> 00:04:51.150
Then I'll execute the XY and whatever is returned that I'll store in the result variable.

57
00:04:51.150 --> 00:04:53.880
And let's try to print the value of result.

58
00:04:55.000 --> 00:04:56.230
Let's run the code.

59
00:04:58.300 --> 00:05:05.230
Now you see that this code looks better and the output is the same as the previous output.

60
00:05:05.800 --> 00:05:11.410
Last index is a kind of property that is not only a read only property.

61
00:05:11.770 --> 00:05:19.270
You can also set this property to decide from which position the search should begin.

62
00:05:19.720 --> 00:05:25.690
Let's try one of the codes which we have seen where we were displaying last index.

63
00:05:25.720 --> 00:05:29.980
Let's run the code again without setting last index.

64
00:05:31.470 --> 00:05:32.640
Here is the code.

65
00:05:35.330 --> 00:05:43.370
So here in the output, we saw earlier also that the search started from the zeroth index and first

66
00:05:43.370 --> 00:05:46.610
is word was found on second position.

67
00:05:47.820 --> 00:05:53.220
Now let's try to set last index on the fourth position.

68
00:05:53.220 --> 00:06:00.630
That is, I do not want to begin the search from zero to index, but I want to start the search from

69
00:06:00.630 --> 00:06:01.950
fourth position.

70
00:06:02.580 --> 00:06:04.590
Let's try that and run the code.

71
00:06:04.890 --> 00:06:08.520
I will say pattern dot last index is equal to four.

72
00:06:12.430 --> 00:06:17.470
Now the output shows that the search started from fourth position.

73
00:06:17.470 --> 00:06:24.220
So the first is word is found on index five instead of two.

74
00:06:24.610 --> 00:06:26.770
As we saw in the previous output.

