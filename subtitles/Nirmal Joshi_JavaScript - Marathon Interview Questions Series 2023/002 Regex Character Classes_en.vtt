WEBVTT
1
00:00:00.120 --> 00:00:07.170
In this section, we are going to discuss about various character classes used with regular expressions.

2
00:00:07.380 --> 00:00:10.080
We will begin with DOT character class.

3
00:00:10.230 --> 00:00:19.680
A DOT represents any character in a search pattern except new line that is slash DN or the Unicode value

4
00:00:19.680 --> 00:00:27.300
for slash and is 2028 and slash R that is Unicode value 2029.

5
00:00:28.040 --> 00:00:29.570
Let's take an example.

6
00:00:29.600 --> 00:00:35.810
I have a string and want to search all words beginning with W.

7
00:00:36.170 --> 00:00:44.240
After W, there can be any character, and after that character there has to be n so the pattern can

8
00:00:44.240 --> 00:00:45.470
be returned.

9
00:00:45.500 --> 00:00:51.380
W dot n where dot means it can be any character.

10
00:00:52.670 --> 00:00:54.140
I'm going to type the code here.

11
00:00:54.140 --> 00:00:56.330
I'll say let str is equal to.

12
00:00:56.870 --> 00:01:00.580
I have this string where I have two words wonder and windy.

13
00:01:00.590 --> 00:01:07.130
So we'll try to search for w any character and there is an n after any character.

14
00:01:07.130 --> 00:01:11.420
So I'm going to write the pattern w dot n.

15
00:01:11.420 --> 00:01:20.810
Of course I'll say slash G for global search and let's use console.log and I will use the match method.

16
00:01:20.810 --> 00:01:23.270
So I'm specifying a pattern.

17
00:01:24.680 --> 00:01:26.240
Let's run the code now.

18
00:01:26.960 --> 00:01:33.350
As you see it returned to values w0n and w i n.

19
00:01:33.830 --> 00:01:38.570
Of course it did not return the entire world in both the cases.

20
00:01:38.720 --> 00:01:46.550
If you want that the word which begins with W then any character and it should have n after that.

21
00:01:46.580 --> 00:01:52.850
Then after n there can be any number of characters that also we want in the output.

22
00:01:52.850 --> 00:01:57.860
That is, we want to have entire words instead of these three characters.

23
00:01:57.860 --> 00:02:00.710
One and win what we can do.

24
00:02:00.740 --> 00:02:04.280
We can use a character class slash w.

25
00:02:05.100 --> 00:02:08.970
That is a class which we are going to see after some time.

26
00:02:08.970 --> 00:02:14.670
But at the moment, let's try the W and one more quantifier.

27
00:02:14.670 --> 00:02:18.690
We are going to add it with slash W and we'll run the code.

28
00:02:20.690 --> 00:02:22.060
Now you see the output.

29
00:02:22.070 --> 00:02:25.040
It has returned the entire world's.

30
00:02:26.340 --> 00:02:32.770
As mentioned, that DOT searches all the characters except for the new line.

31
00:02:32.790 --> 00:02:41.490
This I have already discussed in the tutorial where I explain slash se, but still we will try the same

32
00:02:41.490 --> 00:02:43.350
here with previous score.

33
00:02:43.380 --> 00:02:50.520
So let's add slash and instead of oh in the word vendor and run the code.

34
00:02:53.410 --> 00:02:57.430
Now you see that the output returned is windy.

35
00:02:58.030 --> 00:03:06.280
The vendor, which now has slash and instead of oh, is not returned because slash and is not treated

36
00:03:06.280 --> 00:03:07.900
as any character.

37
00:03:08.910 --> 00:03:09.510
So what?

38
00:03:09.510 --> 00:03:16.410
If you want that, DOD should consider slash and or slash R as a character?

39
00:03:17.070 --> 00:03:22.650
The solution to that is add slash as flag in the pattern.

40
00:03:23.930 --> 00:03:27.020
Let's try to add it after the global modifier.

41
00:03:28.490 --> 00:03:29.780
And we run the code.

42
00:03:32.560 --> 00:03:42.880
Now you see that the word W slash n and the R is also returned as the new line is treated as any character

43
00:03:42.880 --> 00:03:44.860
criteria by the dot.

44
00:03:45.800 --> 00:03:49.580
Let's try one more example with a different search pattern.

45
00:03:50.030 --> 00:03:56.810
Now I'm showing a search of words where the first character of word can be any character.

46
00:03:56.810 --> 00:04:02.840
Second character should be H, and then it can have any number of letters.

47
00:04:02.840 --> 00:04:05.810
So the pattern will be like this.

48
00:04:06.350 --> 00:04:07.480
I'll set dot.

49
00:04:07.490 --> 00:04:11.120
So the beginning of this word can be anything.

50
00:04:11.120 --> 00:04:12.860
The character can be anything.

51
00:04:12.890 --> 00:04:18.950
Then we have etch and then rest of the word, let's do the same thing in the coding also.

52
00:04:19.250 --> 00:04:21.579
And for that, I'm changing the string here.

53
00:04:21.589 --> 00:04:24.950
I'll say, This is what that is.

54
00:04:24.980 --> 00:04:26.420
Now let's run the code.

55
00:04:29.290 --> 00:04:34.900
So looking at the output, you can easily understand what actually happened.

56
00:04:35.470 --> 00:04:46.660
For all the words this wart and that the dot represents t, w or t second letter is h, and rest of

57
00:04:46.660 --> 00:04:50.980
the words are returned because we have given W plus.

58
00:04:52.120 --> 00:05:01.420
Dart is used to mention any single character whose position can be in the middle start or at the end.

59
00:05:01.990 --> 00:05:03.110
That doesn't matter.

60
00:05:03.130 --> 00:05:08.230
The next character class we are going to learn is slash D.

61
00:05:08.560 --> 00:05:12.380
The slash T searches for digits in the string.

62
00:05:12.400 --> 00:05:16.120
Let's directly jump into the example to understand.

63
00:05:17.070 --> 00:05:19.650
I will say that SDR is equal to.

64
00:05:20.250 --> 00:05:30.660
I teach HTML five, CSS three, REACT 16.8 and in fact it can be 16 16.1 and so on.

65
00:05:30.660 --> 00:05:34.260
Angular eight plus that is eight onwards.

66
00:05:34.260 --> 00:05:37.530
So six for whatever number you think of, that's fine.

67
00:05:37.530 --> 00:05:39.210
But we are just giving a number.

68
00:05:41.070 --> 00:05:43.110
Let's try the pattern here.

69
00:05:43.110 --> 00:05:49.290
So I'm going to say slash D, the console log will remain same.

70
00:05:50.880 --> 00:05:52.260
And let's run the code.

71
00:05:54.330 --> 00:05:58.220
Because Slash D is given in the search pattern.

72
00:05:58.230 --> 00:06:00.690
It started to search for digit.

73
00:06:00.990 --> 00:06:06.660
Though it returns only one digit because we haven't given a flag for global search.

74
00:06:06.990 --> 00:06:08.100
So let's do it.

75
00:06:08.850 --> 00:06:12.270
Let's add slash G and run the code.

76
00:06:13.640 --> 00:06:23.990
So now you can see that all the digits from variable str are returned in the output array because string

77
00:06:23.990 --> 00:06:28.360
contains six digits, the output array is of six elements.

78
00:06:28.370 --> 00:06:36.620
The next character class we are talking about is slash D, but this is uppercase and the purpose of

79
00:06:36.620 --> 00:06:41.450
this class is it searches for non digit values.

80
00:06:41.450 --> 00:06:47.060
The previous slash d that is lowercase slash D was searching for digits.

81
00:06:47.090 --> 00:06:49.310
This does the reverse of it.

82
00:06:50.110 --> 00:06:58.540
So in the same previous example, if we change lowercase slash dx to uppercase slash dx, it will do

83
00:06:58.540 --> 00:06:59.680
the reverse.

84
00:06:59.680 --> 00:07:04.840
That is, it will return all the characters other than digits.

85
00:07:05.290 --> 00:07:08.920
Let's use uppercase slash DX and run the code.

86
00:07:14.150 --> 00:07:19.190
As you can see, the output contains all the letters other than digits.

87
00:07:19.970 --> 00:07:20.420
All right.

88
00:07:20.420 --> 00:07:25.970
So the next character class is really very important, and that is slash W.

89
00:07:27.260 --> 00:07:29.900
It searches for word characters.

90
00:07:29.930 --> 00:07:31.060
Now, what does that mean?

91
00:07:31.070 --> 00:07:35.090
We have already seen W Plus, which returns the entire world.

92
00:07:35.360 --> 00:07:45.590
When you give this flag, it will return all characters between Capital A to Z, small A to Z, 0 to

93
00:07:45.590 --> 00:07:47.750
9 and an underscore.

94
00:07:48.570 --> 00:07:56.820
But let's say a string has an exclamation sign, a dot and M percent or other such characters, then

95
00:07:56.820 --> 00:07:58.320
those are ignored.

96
00:07:58.740 --> 00:08:05.010
To see this practically, let's create a string which has special and regular characters.

97
00:08:05.460 --> 00:08:10.410
I'll say let str is equal to yes, an exclamation.

98
00:08:10.440 --> 00:08:11.760
I do know.

99
00:08:12.210 --> 00:08:15.150
And that is n percent ten times.

100
00:08:15.150 --> 00:08:18.150
I'll also say I underscore say.

101
00:08:19.070 --> 00:08:24.410
Now the pattern will be w of course, the global modifier.

102
00:08:24.710 --> 00:08:27.890
Let's try to run this code and see what is the output.

103
00:08:28.760 --> 00:08:37.460
As you can see in the output, exclamation dot and ampersand are not returned, but the underscore is

104
00:08:37.460 --> 00:08:40.429
returned along with other word characters.

105
00:08:41.120 --> 00:08:49.130
Slash W is very useful and we can execute a search which returns only words which we have already seen

106
00:08:49.130 --> 00:08:53.360
using W plus that is the class and the quantifier.

107
00:08:54.110 --> 00:09:01.880
So here if I add a quantifier with slash W, then it will return words from a string.

108
00:09:01.880 --> 00:09:03.950
Let's try the same thing here.

109
00:09:04.160 --> 00:09:07.790
I'll just add a plus sign and we'll run the code.

110
00:09:08.480 --> 00:09:14.090
Now you can see that the output contains words and not individual characters.

111
00:09:14.450 --> 00:09:17.630
Now the next character class is uppercase W.

112
00:09:18.050 --> 00:09:26.180
Now again, it does absolutely reverse of the lowercase W the way lowercase W finds word characters.

113
00:09:26.750 --> 00:09:34.190
Uppercase W finds the other characters, meaning it finds non word characters.

114
00:09:35.210 --> 00:09:41.840
Let's simply change lowercase w to uppercase in the previous example and see the output.

115
00:09:44.740 --> 00:09:50.020
So now it has returned spaces exclamation and percent and dot.

116
00:09:50.230 --> 00:09:55.570
So all the non word characters are returned when you use uppercase W.

117
00:09:56.330 --> 00:10:03.890
One more useful character class is Slash s, which searches for whitespace characters.

118
00:10:04.610 --> 00:10:14.510
Whitespace includes a space, a tab, a carriage return that is slash are a new line that is slash DN

119
00:10:15.110 --> 00:10:21.620
vertical tab, which normally we don't use nowadays in JavaScript, but slash vs for vertical tab and

120
00:10:21.620 --> 00:10:23.880
form feed that is slash F.

121
00:10:23.900 --> 00:10:31.520
Let's try a simple example where we just say that we have a tab, a new line, and we try to run the

122
00:10:31.520 --> 00:10:31.820
code.

123
00:10:31.820 --> 00:10:39.350
So I'll say let s t r is equal to a string where I'm going to put slash t after this doo and slash DN

124
00:10:39.350 --> 00:10:40.520
before time.

125
00:10:40.540 --> 00:10:47.930
So now we have spaces slash T and slash and all these are whitespace characters.

126
00:10:47.930 --> 00:10:49.280
Let's run the code.

127
00:10:49.790 --> 00:10:55.490
As you can see, the tab and new line character is return along with spaces.

128
00:10:57.010 --> 00:11:05.260
If you use the next character class that is uppercase s, then it does absolutely opposite to the lowercase

129
00:11:05.260 --> 00:11:09.370
s that is, it searches for non white spaces.

130
00:11:10.380 --> 00:11:17.460
A non-white space means it doesn't fall under the criteria which I mentioned for white space that is

131
00:11:17.460 --> 00:11:21.660
slash and slash, TV and slash F, etc..

132
00:11:22.140 --> 00:11:28.800
Let's try the same code and we just change lowercase SX to uppercase and we just run the code.

133
00:11:28.980 --> 00:11:34.030
And now you see that all the characters are returned, but no spaces.

134
00:11:34.050 --> 00:11:37.500
No slash T slash n is returned in the output.

135
00:11:38.220 --> 00:11:41.100
So these are the character classes we have discussed.

136
00:11:41.520 --> 00:11:49.620
I also want to mention that slash and slash tea, all these can be treated as character classes as well.

137
00:11:50.040 --> 00:11:55.570
So, for example, when you want to search for New Line, then you may use slash N.

138
00:11:55.590 --> 00:12:03.090
If you want to search for only a tab in the string, you may use slash T slash R for carrier's return

139
00:12:03.090 --> 00:12:04.460
and so on.

140
00:12:04.470 --> 00:12:08.610
For example, I want to search all new lines in a string.

141
00:12:08.610 --> 00:12:17.130
Then the pattern can be slash dn and of course the global modifier in case if you want all the tabs

142
00:12:17.130 --> 00:12:23.430
and new lines to be searched in a string, then you can use the pattern slash and slash DX.

143
00:12:23.430 --> 00:12:30.510
But we're going to put that in square brackets if you just want to search slash DN, let's try to search

144
00:12:30.510 --> 00:12:33.870
Slash and only first, then we can write it like this.

145
00:12:40.970 --> 00:12:46.370
Let's say if you want both tab and new line to be searched and then you put a square bracket and you

146
00:12:46.370 --> 00:12:47.600
can write it like this.

147
00:12:47.870 --> 00:12:49.040
Let's run the code.

148
00:12:49.960 --> 00:12:55.000
Now as you see that it has returned tab and new line both in the output.

149
00:12:55.540 --> 00:12:59.810
So this was just a basic idea how to use character classes.

150
00:12:59.830 --> 00:13:07.540
Now we know that we use square brackets, we use quantifier, and we use character classes as well that

151
00:13:07.540 --> 00:13:11.690
are complex patterns as we move ahead in the tutorial.

152
00:13:11.710 --> 00:13:20.560
We'll try more practical, more complex patterns by combining 20 fires, maybe character classes and

153
00:13:20.560 --> 00:13:23.680
other options available in regular expression.

