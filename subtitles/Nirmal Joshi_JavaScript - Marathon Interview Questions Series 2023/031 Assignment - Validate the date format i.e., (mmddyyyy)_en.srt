1
00:00:05,460 --> 00:00:11,340
In this exercise, I'm explaining a way to check the valid date format.

2
00:00:11,550 --> 00:00:19,980
Using regular expression, we can not only check the format, but can also validate for year, month

3
00:00:19,980 --> 00:00:21,330
and day values.

4
00:00:21,330 --> 00:00:24,180
But we will achieve it in the next exercise.

5
00:00:24,420 --> 00:00:28,740
In this course sample we will simply try to check mdd.

6
00:00:28,770 --> 00:00:29,220
Y.

7
00:00:29,220 --> 00:00:29,550
Y.

8
00:00:29,550 --> 00:00:29,880
Y.

9
00:00:29,880 --> 00:00:30,120
Y.

10
00:00:30,150 --> 00:00:39,090
Format where m is month and d d is day, which can be one or two digit long and the year which has to

11
00:00:39,090 --> 00:00:44,820
be four digits and each value is separated by a forward slash.

12
00:00:45,390 --> 00:00:53,190
If we talk about the pattern, I will use a carat and slash D with curly brackets, and in the brackets

13
00:00:53,190 --> 00:00:55,390
I will use one or two.

14
00:00:55,410 --> 00:01:00,720
That is the first value can be number having one or two digits.

15
00:01:01,020 --> 00:01:07,410
The curly brackets are the qualifiers which we have already seen in one of our quantifier tutorial.

16
00:01:07,680 --> 00:01:15,330
Next, I want a forward slash and because it is a special character, I will use escape sequence that

17
00:01:15,330 --> 00:01:16,410
is a backslash.

18
00:01:16,410 --> 00:01:22,570
And then I will write the forward slash for next two digit value format.

19
00:01:22,590 --> 00:01:27,360
Again, I will use slash dx, curly brackets, one comma two.

20
00:01:27,360 --> 00:01:30,790
That is one or two digits again for the separator.

21
00:01:30,810 --> 00:01:34,500
I will be using backslash and forward slash.

22
00:01:34,740 --> 00:01:36,500
Now comes the year.

23
00:01:36,510 --> 00:01:45,090
I want to set a year for four digits, so I will use slash DX four, but only using the four in curly

24
00:01:45,090 --> 00:01:49,650
brackets will not force for fixed four digits at the end.

25
00:01:49,650 --> 00:01:51,690
So I will add one more anchor.

26
00:01:51,690 --> 00:01:53,310
That is a dollar sign.

27
00:01:53,310 --> 00:01:56,480
So this is how the entire pattern will look like.

28
00:01:56,490 --> 00:01:58,380
Let's practically try this.

29
00:01:58,800 --> 00:02:01,140
I will use a date value here.

30
00:02:01,140 --> 00:02:06,990
I'll say let string is equal to d, d is zero to month is zero three.

31
00:02:06,990 --> 00:02:09,220
And here I'm going to write 2020.

32
00:02:09,240 --> 00:02:13,260
Now, the pattern here, which we have already discussed, I'm going to put it here.

33
00:02:13,260 --> 00:02:21,960
That is a correct sign slash dx one comma, two forward slash again slash D, one comma, two forward

34
00:02:21,960 --> 00:02:24,900
slash again slash D, four digits.

35
00:02:24,900 --> 00:02:27,420
Now here I say four digits we want.

36
00:02:27,420 --> 00:02:31,410
And at the end we do not want more than four digits.

37
00:02:31,410 --> 00:02:34,010
So I'm adding a dollar sign at the end.

38
00:02:34,020 --> 00:02:40,350
Now here I'm using a test method which checks whether the pattern matches with the value or not.

39
00:02:40,350 --> 00:02:41,610
Let's run the code.

40
00:02:43,170 --> 00:02:45,750
As you can see, the output is true.

41
00:02:45,780 --> 00:02:48,420
That means we have the valid date format.

42
00:02:48,450 --> 00:02:52,710
Let's try to change the value here instead of slash.

43
00:02:52,980 --> 00:02:57,060
I will use dash sign and let's run the code again.

44
00:02:57,090 --> 00:03:04,050
Now you see that the output is false because the pattern is not matching with the value in case, let's

45
00:03:04,050 --> 00:03:11,400
say instead of a forward slash, you want to have a pattern where one can put a dash or slash.

46
00:03:11,730 --> 00:03:21,210
The format will be d, d slash and slash year part or a mm dash de dash.

47
00:03:21,210 --> 00:03:29,850
And then here, if you want to achieve this, then instead of this forward slash what we can do, we

48
00:03:29,850 --> 00:03:37,710
can use the set where I can decide that there can be a forward slash or there can be a dash.

49
00:03:37,740 --> 00:03:39,990
These two characters are valid.

50
00:03:40,470 --> 00:03:47,130
So now what will happen if you give Dash as a separator or forward slash as a separator?

51
00:03:47,130 --> 00:03:49,740
Then also the output will be true.

52
00:04:04,380 --> 00:04:09,140
So in this example, we just try to check the valid date format.

53
00:04:09,150 --> 00:04:16,589
Of course, if the user enters 14 in the month section, then it will not be validated because in that

54
00:04:16,589 --> 00:04:22,260
case we are expecting the pattern to validate the value and not only the format.

55
00:04:22,260 --> 00:04:29,520
So to check the value and format both, we are going to use various other patterns which we will see

56
00:04:29,520 --> 00:04:31,530
in the next coding exercise.

