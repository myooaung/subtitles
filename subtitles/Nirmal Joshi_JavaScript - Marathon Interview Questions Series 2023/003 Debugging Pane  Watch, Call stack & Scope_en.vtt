WEBVTT
1
00:00:00.120 --> 00:00:04.410
In this section, we will discuss tools inside the debugging pane.

2
00:00:05.070 --> 00:00:10.950
We will talk about what's called stack and scope used for debugging.

3
00:00:11.850 --> 00:00:17.100
The category is debugging techniques, and there will be two related questions for this topic.

4
00:00:18.380 --> 00:00:19.550
The Sources panel.

5
00:00:19.580 --> 00:00:21.320
UAE has three parts.

6
00:00:21.890 --> 00:00:28.070
So this is the file navigation pane that profiles every file that the page requests.

7
00:00:29.360 --> 00:00:31.880
The second is the code editor pane.

8
00:00:32.479 --> 00:00:36.580
The contents of the selected files are displayed here.

9
00:00:37.870 --> 00:00:45.700
And the third one is called the debugging pane that provides various tools for inspecting and debugging

10
00:00:45.910 --> 00:00:49.090
JavaScript code, which we are going to discuss here.

11
00:00:49.810 --> 00:00:53.470
So let us practically understand the debugging pane tools.

12
00:00:54.780 --> 00:00:57.240
Discord having two input fields.

13
00:00:57.570 --> 00:01:00.900
Performs addition of two numbers on the button.

14
00:01:00.900 --> 00:01:01.290
Click.

15
00:01:02.720 --> 00:01:05.690
Let me give you the values and click on this button.

16
00:01:06.750 --> 00:01:09.630
As you can see, it produces the wrong output.

17
00:01:10.170 --> 00:01:12.600
In fact, it did not add the values.

18
00:01:12.990 --> 00:01:16.290
To find out the bug, we need to debug this.

19
00:01:17.380 --> 00:01:24.940
Developer tool provides the feature to watch multiple variables and expressions throughout your code.

20
00:01:25.880 --> 00:01:28.430
The watch tool here lets you do this.

21
00:01:30.050 --> 00:01:36.320
To add the variable or expression you want to monitor, click on this add icon.

22
00:01:36.890 --> 00:01:39.590
I will see and when and press enter.

23
00:01:40.490 --> 00:01:42.980
Let me expand this tree here.

24
00:01:42.980 --> 00:01:51.860
It will list out all the information related to this variable like I'd read only tag name, value,

25
00:01:52.610 --> 00:01:54.890
children, nodes and all others.

26
00:01:54.890 --> 00:01:57.530
CSS and JavaScript applied to it.

27
00:01:58.190 --> 00:02:01.160
This is helpful for different development aspects.

28
00:02:02.800 --> 00:02:08.229
You can also check or evaluate the variable value to inspect the modification.

29
00:02:10.610 --> 00:02:13.610
Let me put a breakpoint here and click on the button.

30
00:02:14.450 --> 00:02:18.590
Let me change the value of and 1 to 8 then press enter.

31
00:02:20.030 --> 00:02:21.770
And here the result changes.

32
00:02:23.080 --> 00:02:28.630
If the variable does not exist, then it will show not available message.

33
00:02:30.320 --> 00:02:36.590
This refresh icon is used to update variables when their values evaluate.

34
00:02:36.980 --> 00:02:38.720
As it continues to run.

35
00:02:40.640 --> 00:02:44.600
Every watched item gets updated with the current value.

36
00:02:45.970 --> 00:02:48.430
Click here to remove the added variables.

37
00:02:50.630 --> 00:02:53.600
When the debugger is paused on a line of code.

38
00:02:54.260 --> 00:03:01.670
This scope pane shows the local and global scope of current values of the variables defined.

39
00:03:02.940 --> 00:03:05.940
Let me put a breakpoint here and click on the button.

40
00:03:07.150 --> 00:03:14.080
Observe here in the scope pane, it shows the block scope, local and global scope of the variables

41
00:03:14.260 --> 00:03:16.030
and their current values.

42
00:03:17.290 --> 00:03:22.480
This also shows the closure variables, if any, whenever applicable.

43
00:03:23.590 --> 00:03:25.570
To edit any variable value.

44
00:03:25.810 --> 00:03:26.950
Double click on it.

45
00:03:28.530 --> 00:03:34.740
The school pain will be empty in case the debugger is not paused on a line of code.

46
00:03:35.590 --> 00:03:41.170
There are many functions in a program that perform different tasks when they are called.

47
00:03:42.120 --> 00:03:47.190
To monitor that, on which function calls what action takes place.

48
00:03:47.460 --> 00:03:49.560
You can use the call stack being.

49
00:03:51.580 --> 00:03:59.500
Caustic can be seen as a data structure that provides information about the current subroutine or function

50
00:03:59.500 --> 00:04:01.120
of the program being debugged.

51
00:04:02.950 --> 00:04:04.470
Let me click on this button.

52
00:04:04.480 --> 00:04:10.840
As you can see, it displays that the sum function is scored when the on click event is fired.

53
00:04:11.680 --> 00:04:16.750
It displays the stack of all the functions called and currently executing.

54
00:04:18.010 --> 00:04:24.850
Using this stack of data when the debugging is performed, it is termed as stack tracing.

55
00:04:26.920 --> 00:04:28.720
Let us discuss two questions.

56
00:04:30.370 --> 00:04:34.600
The first question is how does the watch tool helping debugging?

57
00:04:35.110 --> 00:04:41.560
As we discussed, the watch tool helps in monitoring multiple variables and expressions throughout the

58
00:04:41.560 --> 00:04:41.950
code.

59
00:04:42.220 --> 00:04:48.880
You can check values and all of that information provided by it for the current and additional variables,

60
00:04:49.060 --> 00:04:53.080
along with inspecting the changes as the program continues to run.

61
00:04:55.260 --> 00:04:58.680
The second question is what is stack trace?

62
00:04:59.710 --> 00:05:06.580
A stack trace works on the call stack, which shows a stack of functions and subroutines currently under

63
00:05:06.580 --> 00:05:07.330
execution.

64
00:05:07.840 --> 00:05:14.650
Developers and software experts define it as a list of subroutine calls that are performed at the time

65
00:05:14.650 --> 00:05:15.580
of execution.

66
00:05:17.380 --> 00:05:24.430
The stag that is the called stag is used to analyse contents of each subroutine and how they run.

