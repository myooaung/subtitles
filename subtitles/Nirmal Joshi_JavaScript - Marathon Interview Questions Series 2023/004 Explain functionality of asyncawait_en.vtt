WEBVTT
1
00:00:00.360 --> 00:00:02.969
In this asynchronous JavaScript section.

2
00:00:03.600 --> 00:00:09.840
The next question we are discussing is about explain the functionality of async await.

3
00:00:10.620 --> 00:00:13.890
The question is still about asynchronous JavaScript.

4
00:00:15.070 --> 00:00:20.350
In simple words, async await is an easier way to deal with promises.

5
00:00:21.400 --> 00:00:28.420
Promise was an easier way of callback, but async await is even easy to deal with.

6
00:00:28.660 --> 00:00:30.040
Asynchronous process.

7
00:00:30.850 --> 00:00:34.720
It is handling promise only, but with simple syntax.

8
00:00:35.380 --> 00:00:37.630
So let's begin with a simple code.

9
00:00:38.510 --> 00:00:40.310
We have already seen that.

10
00:00:40.640 --> 00:00:46.340
To handle an asynchronous process, we return a promise object from a function.

11
00:00:47.270 --> 00:00:49.100
Let's check this with acing.

12
00:00:49.820 --> 00:00:53.890
For example, I have just a function called test.

13
00:00:54.770 --> 00:00:58.280
At the moment I want to check what the function returns.

14
00:00:58.280 --> 00:00:59.160
Side seconds.

15
00:00:59.900 --> 00:01:05.600
For example, if an function is equal to test, I'm calling the function.

16
00:01:05.600 --> 00:01:08.360
Now, the function doesn't have anything at the moment.

17
00:01:08.360 --> 00:01:08.630
Right.

18
00:01:09.320 --> 00:01:15.680
So if I try to display the value of F in, let's see what it shows.

19
00:01:17.670 --> 00:01:19.050
It says undefined here.

20
00:01:20.160 --> 00:01:26.200
So by default, any function you have in JavaScript returns undefined.

21
00:01:26.220 --> 00:01:28.200
If you do not have any return statement.

22
00:01:28.950 --> 00:01:36.000
Let me just add async before the function and just check what now it returns.

23
00:01:37.340 --> 00:01:38.510
I am running this.

24
00:01:40.660 --> 00:01:41.590
And it returns.

25
00:01:41.590 --> 00:01:42.250
Promise.

26
00:01:42.940 --> 00:01:43.630
You see this?

27
00:01:44.650 --> 00:01:52.540
This itself shows that earlier we were writing written new promise and all like this.

28
00:01:52.780 --> 00:02:00.850
But now if you make a function asynchronous, that means you do not need to write a return statement

29
00:02:00.850 --> 00:02:01.720
with promise.

30
00:02:02.770 --> 00:02:05.290
You do not need to return a promise.

31
00:02:06.100 --> 00:02:13.780
Now, if you check here, the promise which is returned is resolved and the promise value is undefined.

32
00:02:14.140 --> 00:02:21.130
So in case if you return a value like this, let's say I want return zero, for example.

33
00:02:23.090 --> 00:02:29.840
Now if I run, then the resolved promise has promise value zero.

34
00:02:30.050 --> 00:02:38.870
It also means that when you return a value like this, it is always with her resolve state and this

35
00:02:38.870 --> 00:02:41.480
value will be part of promise value.

36
00:02:41.510 --> 00:02:48.380
That is the message we had earlier when we were writing the then statement in case if you want to have

37
00:02:48.380 --> 00:02:54.350
a rejection, for example, when we were writing promise, we had resolved and reject.

38
00:02:54.440 --> 00:02:57.260
But how about rejecting a promise in this syntax?

39
00:02:57.890 --> 00:02:59.260
Certainly you can do that.

40
00:02:59.270 --> 00:03:01.250
You just have to say through.

41
00:03:02.170 --> 00:03:03.990
New era, right?

42
00:03:04.030 --> 00:03:05.290
We already have a class.

43
00:03:06.130 --> 00:03:11.320
Now, if you do this, let's say at a phone, something like this.

44
00:03:12.380 --> 00:03:12.710
Right.

45
00:03:13.370 --> 00:03:14.900
The moment I ran this.

46
00:03:16.090 --> 00:03:18.340
It's going to show me an error.

47
00:03:18.730 --> 00:03:25.120
Not only that, if I just continue with this error and go in the console, you will see that the promise

48
00:03:25.120 --> 00:03:25.980
is returned.

49
00:03:26.170 --> 00:03:28.330
But it says that it is rejected.

50
00:03:29.230 --> 00:03:31.900
And the error displayed here is error found.

51
00:03:32.200 --> 00:03:40.120
So by writing async statement with the function you are returning a promise that means you don't need

52
00:03:40.120 --> 00:03:44.620
to write a return statement for promise if the function is asynchronous.

53
00:03:44.650 --> 00:03:45.280
Number one.

54
00:03:45.790 --> 00:03:50.230
Number two, if you want that, it should return the rejected state.

55
00:03:50.470 --> 00:03:56.920
Then you always have the true statement which can be used to reject a promise.

56
00:03:57.700 --> 00:04:00.440
Let's also check the syntax with arrow function.

57
00:04:00.460 --> 00:04:04.480
I'll simply return zero here so that we don't see any error.

58
00:04:05.380 --> 00:04:09.430
If this was, let's say, an arrow function, then how would you write it?

59
00:04:09.820 --> 00:04:14.140
I'd say contest test is equal to asynchronous.

60
00:04:14.140 --> 00:04:20.709
You don't need this function or test anything, so I'll remove it and I'll put an arrow after these

61
00:04:20.709 --> 00:04:21.250
brackets.

62
00:04:21.250 --> 00:04:21.760
That's it.

63
00:04:22.720 --> 00:04:26.980
Let me clear and run it again so that you get the idea.

64
00:04:27.130 --> 00:04:30.880
How do you write an asynchronous function with an arrow function?

65
00:04:31.750 --> 00:04:37.270
So that's how an async is working and although it is used with async.

66
00:04:37.720 --> 00:04:38.680
So let's discuss.

67
00:04:38.680 --> 00:04:39.810
I'll wait away.

68
00:04:39.940 --> 00:04:50.470
It makes sure to wait till a promise is settled, be it resolved or rejected the way we write then for

69
00:04:50.680 --> 00:04:59.620
handling the promise so far now we have a void so we can remove that then and replace it with await

70
00:04:59.770 --> 00:05:01.030
something like this.

71
00:05:01.360 --> 00:05:09.130
As you see here that we have the function dot then then we have the result one, then we have more chaining.

72
00:05:09.130 --> 00:05:10.630
Also the same thing.

73
00:05:10.630 --> 00:05:17.650
Now if you have to use a weight, you can write like this, which is an easier way to deal with the

74
00:05:17.710 --> 00:05:19.150
chaining of promises.

75
00:05:19.540 --> 00:05:26.740
So looking at this illustration, you can easily make out the simplicity of await while coding.

76
00:05:27.520 --> 00:05:32.020
We already saw a code where we were trying to find square.

77
00:05:32.320 --> 00:05:33.910
Let's try that code here.

78
00:05:34.180 --> 00:05:37.690
This was the code we were trying to get the square.

79
00:05:37.690 --> 00:05:43.180
At the moment I'm not writing Cage and finally, all other things which we already saw with promises.

80
00:05:43.690 --> 00:05:48.100
So this code was showing the square of past value.

81
00:05:48.100 --> 00:05:52.690
Let me run this once to make sure that it is working the way we are expecting it.

82
00:05:55.200 --> 00:06:02.040
So we passed through here and it returns four that is squared off two after 2 seconds.

83
00:06:02.460 --> 00:06:09.150
Now let's convert the code with a think of it, as I mentioned, that you can simply replace the den

84
00:06:09.150 --> 00:06:09.990
with a weight.

85
00:06:10.530 --> 00:06:13.440
It means I may write like this.

86
00:06:13.440 --> 00:06:15.450
I'll say let the result.

87
00:06:16.610 --> 00:06:17.480
Is equal to?

88
00:06:17.750 --> 00:06:18.280
He said of.

89
00:06:18.350 --> 00:06:19.880
Then I'll say I'll wait.

90
00:06:20.360 --> 00:06:23.330
And now I'm going to call the function.

91
00:06:23.330 --> 00:06:27.170
And I just say the value to be passed that is to here.

92
00:06:28.010 --> 00:06:31.520
And the result I'm expecting in adds variable.

93
00:06:32.240 --> 00:06:32.750
That's it.

94
00:06:34.310 --> 00:06:34.860
Let's run.

95
00:06:36.650 --> 00:06:37.610
But there is an error.

96
00:06:38.450 --> 00:06:45.020
The reason is the error sees that although it is only valid in async function.

97
00:06:45.960 --> 00:06:53.250
That means if you are using a weed, it has to be within an asynchronous function only.

98
00:06:53.940 --> 00:06:55.140
So what will we do?

99
00:06:55.440 --> 00:06:56.580
We have two ways here.

100
00:06:56.820 --> 00:06:59.160
Let me show you the first way first.

101
00:06:59.580 --> 00:07:00.990
So I'll say function maybe.

102
00:07:02.040 --> 00:07:04.770
Let's say I named this as short result.

103
00:07:06.010 --> 00:07:11.680
But because I'm going to use it in this function, I'll write a thing before the function.

104
00:07:12.750 --> 00:07:16.950
These two lines I'm going to cut and pasted in this function.

105
00:07:17.990 --> 00:07:20.990
And the next thing is, I'm going to call the show Resolve Function.

106
00:07:21.830 --> 00:07:22.160
Right.

107
00:07:22.880 --> 00:07:25.310
So now if you run.

108
00:07:30.390 --> 00:07:32.100
You have the valid output.

109
00:07:32.640 --> 00:07:35.040
So I also mentioned about the second way.

110
00:07:35.370 --> 00:07:41.040
The second way is that this can further be fine tuned weekend, right?

111
00:07:41.040 --> 00:07:46.560
And asynchronous ifi so that you don't have to create a new function.

112
00:07:46.680 --> 00:07:50.490
Like, here we have created sure result, which was not a need.

113
00:07:50.700 --> 00:07:55.890
In any case, we wanted that these two lines should be executed.

114
00:07:56.040 --> 00:08:00.450
But because this needed a we needed an asynchronous function.

115
00:08:00.600 --> 00:08:02.360
You put it inside.

116
00:08:02.380 --> 00:08:02.610
Sure.

117
00:08:03.360 --> 00:08:09.440
But how about writing a function which doesn't have name and you do not have to call it?

118
00:08:09.450 --> 00:08:13.830
I have already discussed ifI in one of our sections, so you can just check.

119
00:08:13.830 --> 00:08:19.740
What if he is so right now I'm going to make and if he so I don't have to create a function like this,

120
00:08:20.040 --> 00:08:20.760
so I'll see.

121
00:08:21.240 --> 00:08:25.080
And if he so generally we put ifI inside.

122
00:08:26.070 --> 00:08:27.720
Bad off parentheses.

123
00:08:27.720 --> 00:08:32.309
And at the end, because it is going to get called automatically, you're going to put another pair

124
00:08:32.309 --> 00:08:33.210
of parentheses.

125
00:08:33.510 --> 00:08:35.549
Now, you don't need this name.

126
00:08:36.030 --> 00:08:36.600
That's it.

127
00:08:37.080 --> 00:08:39.360
Let's run and see what's the output.

128
00:08:41.240 --> 00:08:45.140
So you can see that now you have created asynchronous ify.

129
00:08:45.440 --> 00:08:52.890
Now the way we tried processing multiple results with promise, that is while calculating the square.

130
00:08:53.120 --> 00:08:55.190
We tried the multiple results.

131
00:08:55.520 --> 00:08:56.330
This we saw.

132
00:08:56.720 --> 00:09:02.240
So now if you want to do similar with asynchronous, how can we do that?

133
00:09:02.270 --> 00:09:05.210
So in this code right now we have used a wait.

134
00:09:05.840 --> 00:09:09.200
So I will create another variable result.

135
00:09:09.200 --> 00:09:10.760
108.

136
00:09:12.460 --> 00:09:13.020
KSDK.

137
00:09:13.070 --> 00:09:14.220
You're right.

138
00:09:14.620 --> 00:09:18.070
And then the result, which you have that you're going to pass here.

139
00:09:22.220 --> 00:09:23.270
So this is going to have.

140
00:09:23.900 --> 00:09:25.220
The result.

141
00:09:25.220 --> 00:09:25.520
One.

142
00:09:26.550 --> 00:09:28.350
And here, let's say you have resolve to.

143
00:09:29.390 --> 00:09:30.950
And you are passing this old one here.

144
00:09:31.890 --> 00:09:37.860
And one more time we are going to display the result to the next result, that is.

145
00:09:38.130 --> 00:09:43.470
So now I'm just displaying this result for the sake of getting the output clarity.

146
00:09:43.620 --> 00:09:48.210
Otherwise, you see a lot of weight together and you don't have to say anything else.

147
00:09:48.450 --> 00:09:55.680
So even when you say it then and then you put the code instead of that, this looks even easier compared

148
00:09:55.680 --> 00:09:58.320
to the -- chaining syntax that is.

149
00:09:58.710 --> 00:10:00.900
Let me run this code also.

150
00:10:01.050 --> 00:10:05.130
And this is going to take some time because each result will take 2 seconds.

151
00:10:05.340 --> 00:10:09.540
So we have 416 and 256 like this.

152
00:10:10.410 --> 00:10:13.200
So that's what asynchronous and away await is.

153
00:10:13.350 --> 00:10:20.580
We always make sure that when you use a tweet, you should have asynchronous and the asynchronous actually

154
00:10:20.580 --> 00:10:22.020
returns a promise.

155
00:10:22.200 --> 00:10:28.680
And when you write asynchronous before a function, that means the function is returning a promise only.

156
00:10:29.220 --> 00:10:35.610
I also want to add one more point here, that when a function is asynchronous, that is when we use

157
00:10:35.670 --> 00:10:36.340
async.

158
00:10:36.570 --> 00:10:38.970
That means it is returning a promise.

159
00:10:39.270 --> 00:10:44.220
And it also means that that function becomes deniable as well.

160
00:10:44.460 --> 00:10:50.730
So, for example, if I have a function test like this, write this which is not returning anything

161
00:10:51.090 --> 00:10:54.110
but the moment you have asynchronous with it.

162
00:10:54.540 --> 00:11:02.080
This means this function is then able, so you can write this function in this manner as well.

163
00:11:02.100 --> 00:11:04.870
This is also a valid syntax, right?

164
00:11:04.950 --> 00:11:08.910
Because any function which returns a promise is then able.

165
00:11:09.180 --> 00:11:12.680
And when you say async, it does return a promise only.

166
00:11:12.690 --> 00:11:18.840
So do make sure that you do have a function which is then able in case if you are creating your own

167
00:11:18.840 --> 00:11:19.410
function.

168
00:11:19.560 --> 00:11:24.330
And let's say you want to handle the result and reject or state with this syntax.

169
00:11:24.540 --> 00:11:28.980
You can use that then and catch with an asynchronous function.

170
00:11:29.250 --> 00:11:31.740
Let's discuss related questions of this topic.

171
00:11:34.190 --> 00:11:37.970
The first question is, can you write away without async?

172
00:11:38.510 --> 00:11:39.950
No, it's not possible.

173
00:11:40.370 --> 00:11:43.700
You always have to use async wrapper to use await.

174
00:11:46.720 --> 00:11:51.430
The second question do you need to return a promise from an async function?

175
00:11:52.000 --> 00:11:58.330
You do not need to return a promise because the moment a function is with async keyword, it means it

176
00:11:58.330 --> 00:12:01.300
is returning a promise which we saw in the beginning itself.

177
00:12:02.020 --> 00:12:04.360
Can you have an asynchronous ifI?

178
00:12:04.840 --> 00:12:06.540
Most certainly you can have it.

179
00:12:06.550 --> 00:12:08.350
It's just a normal function anyway.

180
00:12:08.350 --> 00:12:11.020
Any function can be an asynchronous function.

181
00:12:11.020 --> 00:12:17.410
So if he's also in a v function, so that can always have asynchronous with it like this.

182
00:12:21.500 --> 00:12:25.850
The fourth question is, which is the best way to handle errors with a weight?

183
00:12:26.690 --> 00:12:34.970
So now we have already seen like in discord, we have COVID earlier with promises we had then and catch.

184
00:12:35.240 --> 00:12:39.200
But when you have a way, you do not have catch configured with it.

185
00:12:39.290 --> 00:12:46.640
So the best way to handle the error is that you use to try and catch statement.

186
00:12:46.820 --> 00:12:51.470
So what you can do is if this is the let's say this is your regular code, right?

187
00:12:51.710 --> 00:12:53.090
So I will put a try here.

188
00:12:54.230 --> 00:12:58.040
And the code which I want, I'm going to shift this entire code.

189
00:13:00.130 --> 00:13:08.290
Into the tribe block and then we will configure the catch, right, which may have the error also.

190
00:13:08.950 --> 00:13:13.120
And here you're going to say whatever message, let's say handling the ad and whatever.

191
00:13:14.110 --> 00:13:19.060
So this is the best way to handle the error when it comes to async await.

192
00:13:19.660 --> 00:13:26.110
And the fifth question is explain the syntax of properly start all with async, I'll it.

193
00:13:26.470 --> 00:13:33.100
Now we already discussed in the previous section that whenever we are using promise, all that means

194
00:13:33.580 --> 00:13:37.000
the multiple promises you pass as an iterable.

195
00:13:37.210 --> 00:13:41.980
If that collection of promise is resolved, then it's going to return one promise.

196
00:13:42.190 --> 00:13:45.830
So this is how the syntax can be of promise.

197
00:13:45.830 --> 00:13:47.920
Start all with async await.

