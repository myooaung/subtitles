WEBVTT
1
00:00:00.120 --> 00:00:07.620
In this section, we are going to discuss questions about inheritance, subclasses and extending builtin

2
00:00:07.620 --> 00:00:11.250
class inheritance or subclasses.

3
00:00:11.700 --> 00:00:16.379
It is one and the same thing of object oriented JavaScript category.

4
00:00:16.740 --> 00:00:19.470
There will be five related questions of this topic.

5
00:00:20.800 --> 00:00:28.030
Inheritance or subleasing is very important concept and often used with object oriented patterns.

6
00:00:28.540 --> 00:00:37.750
With iOS five, there were different ways of inheritance, but in E6 existence is the keyword to inherit

7
00:00:37.750 --> 00:00:38.380
a class.

8
00:00:38.920 --> 00:00:43.480
Inheritance is needed when you have unique or common members.

9
00:00:43.930 --> 00:00:53.650
For example, you as a child have inherited properties from pattern and also you have your own unique

10
00:00:53.650 --> 00:01:00.250
properties, like you have your own height, you have your own colour, you have different properties

11
00:01:00.250 --> 00:01:01.630
on your own as well.

12
00:01:02.260 --> 00:01:05.170
Let me quickly show you a practical example.

13
00:01:05.770 --> 00:01:08.290
I create a class called Child.

14
00:01:09.070 --> 00:01:10.310
I see exchange.

15
00:01:10.330 --> 00:01:13.360
Now, this is the keyword to inherit a class.

16
00:01:13.810 --> 00:01:15.640
I am not creating a parent class.

17
00:01:15.640 --> 00:01:21.910
Rather, I am extending this child class from already available class called string.

18
00:01:22.000 --> 00:01:27.310
Now this is actually a built in class of JavaScript and that we are extending.

19
00:01:27.820 --> 00:01:35.380
That means whatever this string class has, the child class will receive at the same time.

20
00:01:35.410 --> 00:01:40.120
Child class can have its own properties or matters as well.

21
00:01:40.780 --> 00:01:51.460
Let me first of all, just create this class like this and also creating an object of this child only.

22
00:01:52.060 --> 00:01:53.500
Let me pass a string here.

23
00:01:53.530 --> 00:01:59.920
Now, when I pass a string inside of this constructor, this will eventually be passed to the string

24
00:01:59.920 --> 00:02:06.930
class that we will see in a moment when we understand a few other concepts of constructor calling and

25
00:02:06.930 --> 00:02:08.259
the related concepts.

26
00:02:08.979 --> 00:02:13.120
But here, right now, I am passing a string called test string.

27
00:02:14.020 --> 00:02:19.540
Now the string class has one matter called to lower case.

28
00:02:19.540 --> 00:02:19.850
Right.

29
00:02:19.870 --> 00:02:22.330
This is a matter which is of string.

30
00:02:22.330 --> 00:02:26.440
That is, this method belongs to the string class of JavaScript.

31
00:02:26.620 --> 00:02:34.480
But because we have extended this string class to child, that means the object of child class should

32
00:02:34.480 --> 00:02:35.560
have this method.

33
00:02:35.680 --> 00:02:36.670
Let's try this.

34
00:02:37.180 --> 00:02:40.060
I will simply write console.log.

35
00:02:40.180 --> 00:02:44.560
Then I will say object dot to lower case.

36
00:02:44.590 --> 00:02:47.260
Now you see, the list is already populated.

37
00:02:47.470 --> 00:02:53.800
So whatever methods we have with the string class or any string in JavaScript, all those matters now

38
00:02:53.800 --> 00:02:55.870
belong to object as well.

39
00:02:56.170 --> 00:02:59.890
So now object is a child of pattern class called string.

40
00:02:59.890 --> 00:03:06.070
Here let me say to lower case and I will just run the code.

41
00:03:06.070 --> 00:03:08.890
So I'll say node or JS.

42
00:03:08.890 --> 00:03:10.030
That's the file name, right.

43
00:03:10.030 --> 00:03:15.250
So I would say, oh geez, you see the entire string is now in lowercase.

44
00:03:16.000 --> 00:03:19.240
This is the practical way of inheritance.

45
00:03:19.570 --> 00:03:22.450
There are a lot of theories about extending the class.

46
00:03:22.450 --> 00:03:27.370
Then you have a vehicle class or animal class or human class and lot of things.

47
00:03:27.670 --> 00:03:33.730
But when you practically implement, this is a most common way of implementing the inheritance.

48
00:03:34.120 --> 00:03:36.760
But here we are extending the built in class.

49
00:03:36.910 --> 00:03:41.680
So we must see the basic syntax also, which we are discussing in a moment.

50
00:03:41.770 --> 00:03:48.910
But right now I also mentioned that the pattern class has its own properties and matters like this.

51
00:03:49.840 --> 00:03:55.120
Similarly, child can have its own matters or properties as well.

52
00:03:55.240 --> 00:03:59.230
For example, I see a number of characters now.

53
00:03:59.290 --> 00:04:04.240
We do have the length property, but let's say I just want to give a number of characters matter which

54
00:04:04.240 --> 00:04:06.190
belongs to the child class.

55
00:04:06.610 --> 00:04:12.730
Here there will be a string part to it and then at the end you may display console.log.

56
00:04:13.660 --> 00:04:20.339
Then whatever is the length of the string that we want to display.

57
00:04:20.350 --> 00:04:20.829
That's it.

58
00:04:21.550 --> 00:04:24.160
Now here we have the energy.

59
00:04:24.160 --> 00:04:25.540
That is number of character.

60
00:04:25.810 --> 00:04:28.090
This matter belongs to the child class.

61
00:04:28.690 --> 00:04:31.090
Let's try to call that as well.

62
00:04:31.090 --> 00:04:36.610
I'll say object or number of characters and I'm passing, let's say new string here.

63
00:04:37.030 --> 00:04:37.930
Something like this.

64
00:04:39.880 --> 00:04:46.720
So now as you see that the object has to lower case, which is actually a matter of string class, that

65
00:04:46.720 --> 00:04:50.560
is the parent class and the child also has its own matters.

66
00:04:50.800 --> 00:04:53.890
So the child now has patterns, properties or methods.

67
00:04:54.250 --> 00:04:58.330
And child also has its own properties and methods here.

68
00:04:58.450 --> 00:04:58.780
Right.

69
00:04:59.050 --> 00:05:02.410
So let's run this and see whether we get the proper output or not.

70
00:05:03.460 --> 00:05:04.600
So, yes, we do get it.

71
00:05:04.900 --> 00:05:05.820
We have 15.

72
00:05:06.070 --> 00:05:08.230
That is the length of this new string here.

73
00:05:08.680 --> 00:05:11.980
So this is one of the practical example of extending the class.

74
00:05:11.980 --> 00:05:14.470
But here I'm extending a built in class.

75
00:05:15.070 --> 00:05:22.360
Let's now try to see the basic syntax of how do we create or how do we extend the class.

76
00:05:23.050 --> 00:05:26.320
For example, you have the parent class.

77
00:05:28.450 --> 00:05:29.740
I'm writing a constructor.

78
00:05:29.740 --> 00:05:32.320
We have already seen constructor in previous question.

79
00:05:32.650 --> 00:05:37.420
So here I'll say console.log and I'll say Parent constructor call.

80
00:05:37.420 --> 00:05:38.260
Let's a pattern.

81
00:05:38.440 --> 00:05:39.310
That is enough.

82
00:05:40.270 --> 00:05:46.780
Now I'm extending another class LC class child extends parent.

83
00:05:49.150 --> 00:05:53.590
This means the parent is the parent class, of course, and this is the child class.

84
00:05:54.010 --> 00:05:59.820
Now, I do not write anything in the child class, but I straightaway create an object of child.

85
00:05:59.820 --> 00:06:03.010
So I'll say object is equal to new child.

86
00:06:04.840 --> 00:06:05.140
Right?

87
00:06:05.150 --> 00:06:12.050
So here we have the object which is creating an instance of child, but which is extended from pattern.

88
00:06:12.070 --> 00:06:15.810
This means this constructor will be called automatically.

89
00:06:15.820 --> 00:06:16.570
Let's see this.

90
00:06:17.710 --> 00:06:18.370
You see this?

91
00:06:18.940 --> 00:06:26.800
So it means that whatever member you have in the pattern are available or accessible for an object of

92
00:06:26.800 --> 00:06:27.890
the child class.

93
00:06:28.570 --> 00:06:31.510
Let's also try a matter, let's say parent method.

94
00:06:35.050 --> 00:06:39.460
Console log pattern matter.

95
00:06:40.000 --> 00:06:46.150
So this matter is also available because I can say object or pattern method.

96
00:06:46.510 --> 00:06:47.080
That's it.

97
00:06:48.370 --> 00:06:49.190
Let's run this.

98
00:06:50.380 --> 00:06:50.630
Right.

99
00:06:50.650 --> 00:06:52.870
Without any error, it is executing it.

100
00:06:53.080 --> 00:06:58.330
In fact, if you want to pass parameters to the Pattern constructor, you can do that as well, even

101
00:06:58.330 --> 00:07:00.430
by passing the members to the child class.

102
00:07:00.440 --> 00:07:01.330
Let's say pass here.

103
00:07:01.330 --> 00:07:01.660
12.

104
00:07:02.200 --> 00:07:02.440
Right.

105
00:07:02.440 --> 00:07:05.890
This value I want that it should be passed to the Pattern constructor.

106
00:07:06.310 --> 00:07:11.500
I can see a for example and let me also display this.

107
00:07:12.040 --> 00:07:15.580
First of all, I'll say this dot A is equal to A.

108
00:07:15.940 --> 00:07:16.420
That's it.

109
00:07:16.780 --> 00:07:20.590
So now we have a member called E, which I am displaying here.

110
00:07:20.710 --> 00:07:21.760
I said this dart.

111
00:07:22.030 --> 00:07:22.330
Hey.

112
00:07:25.160 --> 00:07:30.800
So we passed the parameter to the child class, but that is passed to constructor of pattern.

113
00:07:31.370 --> 00:07:37.040
Now let's talk about one more situation where you have constructor in the child class as well.

114
00:07:37.190 --> 00:07:39.500
Let me say constructor.

115
00:07:39.920 --> 00:07:40.250
Right.

116
00:07:40.550 --> 00:07:47.930
This also has a for example, or at the moment I don't need any A or B or anything because we want to

117
00:07:47.930 --> 00:07:49.580
have just simple constructor.

118
00:07:50.060 --> 00:07:51.380
No complications at all.

119
00:07:51.650 --> 00:07:54.620
Because I want to discuss one more situation here.

120
00:07:55.520 --> 00:07:57.230
We don't pass anything, right?

121
00:07:57.560 --> 00:08:02.660
Earlier, it was working fine, but now we have added a constructor in the child class.

122
00:08:02.690 --> 00:08:03.980
Now let's see what happens.

123
00:08:07.080 --> 00:08:08.340
It has stopped working.

124
00:08:08.340 --> 00:08:09.780
What is it saying?

125
00:08:10.200 --> 00:08:14.220
It saying that there is a reference that it must call super constructor.

126
00:08:14.580 --> 00:08:22.770
What it says is that if you have a constructor offer child class, then it should explicitly call the

127
00:08:22.770 --> 00:08:26.040
constructor of the parent class first.

128
00:08:26.400 --> 00:08:26.730
Right?

129
00:08:26.850 --> 00:08:30.060
Then only the instance of child less can be in picture.

130
00:08:30.150 --> 00:08:37.110
And for that to call the parent class constructor, you have a keyword call super.

131
00:08:37.380 --> 00:08:42.419
You just put pair of parentheses to call the parent class constructor like this.

132
00:08:43.020 --> 00:08:46.950
Now, if you run, there won't be any issue running the code.

133
00:08:46.950 --> 00:08:51.180
Of course we are trying to display this dot here, which is no values, which is undefined.

134
00:08:51.690 --> 00:08:54.000
Now, in fact, we can pass that parameter.

135
00:08:54.000 --> 00:08:55.590
Also, let me add value here.

136
00:08:55.980 --> 00:08:56.310
Right.

137
00:08:56.310 --> 00:09:00.450
And this you can further pass to the parent class constructor.

138
00:09:00.960 --> 00:09:05.100
You are actually calling the parent class constructor where you are passing the value.

139
00:09:05.100 --> 00:09:12.840
So here I can see E and I put this dot is equal to E, so that's a member which we are trying to refer

140
00:09:12.840 --> 00:09:13.770
in the parent class.

141
00:09:13.830 --> 00:09:16.560
Now you see that here in the new child.

142
00:09:16.560 --> 00:09:22.170
When you pass this as a parameter to the constructor, it actually got passed to the constructor of

143
00:09:22.170 --> 00:09:29.190
child and that is further passed to this constructor of parent by the super keyword.

144
00:09:29.190 --> 00:09:34.590
So super is the keyword which allows you to access parent class members.

145
00:09:34.860 --> 00:09:41.220
For example, this B method I want to access here in child class, let's say we have another method,

146
00:09:41.490 --> 00:09:45.120
child method, right?

147
00:09:45.120 --> 00:09:51.810
So I want to call this pattern class B method in the sea method that is child method.

148
00:09:51.810 --> 00:09:52.620
How will you do that?

149
00:09:52.830 --> 00:09:56.700
Can you see that pattern, dot B method, something like this.

150
00:09:56.820 --> 00:09:57.660
It's not allowed.

151
00:09:58.050 --> 00:09:58.350
Right?

152
00:09:58.350 --> 00:09:59.430
Let's try this first.

153
00:09:59.850 --> 00:10:01.770
I want to call the parent class matter.

154
00:10:01.770 --> 00:10:03.360
So I say parent or P method.

155
00:10:03.660 --> 00:10:03.960
Right.

156
00:10:04.500 --> 00:10:07.560
And let me call the child method here.

157
00:10:07.740 --> 00:10:09.360
Right, let's see what happens.

158
00:10:10.710 --> 00:10:11.760
It gives the add it.

159
00:10:12.330 --> 00:10:15.210
So how will you call the parent class member?

160
00:10:15.210 --> 00:10:20.610
That is matter here you will see super dark matter.

161
00:10:20.670 --> 00:10:21.780
That is parent matter.

162
00:10:21.780 --> 00:10:26.220
Whatever name is I me right now let's try to run the code again.

163
00:10:26.820 --> 00:10:28.530
Now it is running absolutely fine.

164
00:10:28.890 --> 00:10:36.450
So the way we have access, the constructor using the super keyword, we can use the super keyword to

165
00:10:36.450 --> 00:10:39.000
access the method as well in charge.

166
00:10:39.000 --> 00:10:45.960
You can see that super is the keyword which is used to call the super constructor called parent constructor

167
00:10:45.960 --> 00:10:59.190
like this or you call super dark matter right to call parent method are in fact super dot property to

168
00:10:59.190 --> 00:11:00.660
access parent properties.

169
00:11:01.560 --> 00:11:05.310
Right now in this class we have two names of the matter.

170
00:11:05.310 --> 00:11:08.100
That is, we have P method and we have C method.

171
00:11:08.370 --> 00:11:12.720
But what if we have the same name in both the classes?

172
00:11:12.720 --> 00:11:19.440
Let's say here you have p method, the same name you have here in this parent class also now by default,

173
00:11:19.470 --> 00:11:23.610
what it'll do when you say child object dot parent method.

174
00:11:24.120 --> 00:11:27.270
By default it's going to call the very same.

175
00:11:27.270 --> 00:11:28.800
That is the current scope matter.

176
00:11:28.800 --> 00:11:30.690
The object is of child eventually.

177
00:11:31.020 --> 00:11:33.840
So it's going to call this method, not the parent method.

178
00:11:34.230 --> 00:11:34.530
Right?

179
00:11:34.800 --> 00:11:39.420
In case if you want to call the pattern method, again, the super keyword is useful.

180
00:11:39.900 --> 00:11:43.470
So this actually is a process of overriding the matter.

181
00:11:44.100 --> 00:11:49.710
So when it comes to overriding a method, again, you use the super keyword only and you call the method

182
00:11:49.710 --> 00:11:50.820
of pattern class.

183
00:11:51.450 --> 00:11:54.000
Now let's discuss related questions of this topic.

184
00:11:54.270 --> 00:11:57.810
The first question is How can you inherit a class?

185
00:11:58.200 --> 00:12:04.200
We have already seen that if you are using the external keyword, it's going to inherit any class.

186
00:12:04.200 --> 00:12:07.080
Even the JavaScript classes can be inherited.

187
00:12:07.620 --> 00:12:11.790
The second question is what is subleasing now in E6?

188
00:12:11.790 --> 00:12:15.240
When we say inheritance, it is also called as subclass in.

189
00:12:15.270 --> 00:12:18.630
So you should not get confused by two different terms.

190
00:12:18.630 --> 00:12:24.870
Whether somebody refers only subclasses, that's also inheritance only which is implemented using the

191
00:12:24.870 --> 00:12:27.210
extents keyword as we have already seen.

192
00:12:27.450 --> 00:12:29.790
So subclasses is nothing but inheritance.

193
00:12:30.180 --> 00:12:33.900
The third question is what is the purpose of super keyword?

194
00:12:34.200 --> 00:12:40.650
We have already seen that super is the keyword which helps you to access members of the parent class

195
00:12:40.710 --> 00:12:41.340
like this.

196
00:12:41.340 --> 00:12:46.260
You can access a constructor you call a method, or maybe you access a property like this.

197
00:12:47.160 --> 00:12:50.520
The fourth question is how will you override a method?

198
00:12:51.000 --> 00:12:55.290
So to override a method in JavaScript, you use the super keyword, right?

199
00:12:55.380 --> 00:13:01.740
So even though you have same name in parent class, then also you are able to access the parent class

200
00:13:01.740 --> 00:13:03.690
method using the super keyword.

201
00:13:04.560 --> 00:13:09.360
And the fifth question is how can you extend a built in class?

202
00:13:09.900 --> 00:13:14.850
So we have already seen in the beginning that we tried to extend a built in class called string.

203
00:13:15.060 --> 00:13:17.940
We used its own method that is to lower case.

204
00:13:17.940 --> 00:13:24.030
And we also tried to create one more method of child class that is the number of characters and we could

205
00:13:24.030 --> 00:13:26.100
successfully extend the built in class.

