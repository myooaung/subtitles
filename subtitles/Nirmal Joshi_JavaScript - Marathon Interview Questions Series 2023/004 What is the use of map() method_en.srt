1
00:00:00,090 --> 00:00:03,770
This question is what is the use of map method?

2
00:00:03,960 --> 00:00:09,180
The category of this question is at ease and there will be three related questions.

3
00:00:09,510 --> 00:00:14,190
I have raised this question to highlight usage of the map method.

4
00:00:14,370 --> 00:00:21,450
Map method is one of those methods like find filters, splice, etc., which are must know methods.

5
00:00:21,480 --> 00:00:23,640
So let's begin with the map method.

6
00:00:23,850 --> 00:00:28,110
I will start with an example of it and then we will see the syntax as well.

7
00:00:28,290 --> 00:00:30,900
I will create and add a few values.

8
00:00:30,900 --> 00:00:35,280
Let's say two, maybe three, four and five.

9
00:00:37,450 --> 00:00:39,190
That said one more element in between.

10
00:00:39,790 --> 00:00:42,310
Now I will say added dot map.

11
00:00:45,010 --> 00:00:47,920
It takes a callback function, I can say function.

12
00:00:48,490 --> 00:00:55,570
And as we have seen in few questions where the callback function receives parameters here also we receive

13
00:00:55,870 --> 00:00:56,590
the element.

14
00:00:56,950 --> 00:01:01,630
We do also receive the index number and the array itself.

15
00:01:01,900 --> 00:01:08,650
It is the same thing element will receive, the individual value index will receive the index number

16
00:01:08,890 --> 00:01:11,830
and the ETA is the added reference itself.

17
00:01:12,190 --> 00:01:16,120
At the moment I just try element and index.

18
00:01:16,730 --> 00:01:20,860
Let's try to display the value of it and see what happens.

19
00:01:21,220 --> 00:01:22,930
Element and index.

20
00:01:23,350 --> 00:01:29,620
The map method will loop through the entire added and every element will be passed to this variable

21
00:01:29,830 --> 00:01:31,870
and index will receive the index number.

22
00:01:32,110 --> 00:01:34,510
Let's run this and see how it works.

23
00:01:38,020 --> 00:01:42,400
As you see that it shows all the elements along with the index number.

24
00:01:42,880 --> 00:01:49,000
Ideally, this method also returns a new ADI and that's where the charm comes in picture.

25
00:01:49,660 --> 00:01:56,560
Let's see with this Adi, I just want to get squared off all elements, right?

26
00:01:56,560 --> 00:02:01,360
So I can see return the value we will have in the elements.

27
00:02:01,360 --> 00:02:03,520
I'll say element into element.

28
00:02:03,850 --> 00:02:08,979
This means it is going to multiply the value with value itself and it will return.

29
00:02:08,979 --> 00:02:11,080
So it will return the square of it.

30
00:02:11,410 --> 00:02:13,420
Here, I'll get a new Adi.

31
00:02:14,080 --> 00:02:21,250
At the moment I don't need this index number and I will add the console.log here and will display the

32
00:02:21,610 --> 00:02:22,480
new ADI.

33
00:02:22,720 --> 00:02:23,440
Now let's see.

34
00:02:23,440 --> 00:02:24,430
What is the output?

35
00:02:27,960 --> 00:02:32,770
Just a single line code which is going to give you squared off all the elements.

36
00:02:32,790 --> 00:02:33,840
Isn't it fantastic?

37
00:02:34,140 --> 00:02:35,760
The map method does this.

38
00:02:35,910 --> 00:02:37,880
It returns the new added.

39
00:02:37,890 --> 00:02:43,870
Remember, it's very useful because map does not mutate or change the original added.

40
00:02:44,130 --> 00:02:45,660
It does return a new adding.

41
00:02:45,780 --> 00:02:50,640
So you can imagine the kind of functions you can implement with this kind of syntax.

42
00:02:50,730 --> 00:02:56,280
With the map method, I have used just the function, but you can use the arrow function also.

43
00:02:56,310 --> 00:02:57,600
Let's try arrow function.

44
00:02:57,990 --> 00:02:58,770
Let's see this.

45
00:02:58,800 --> 00:03:00,810
I'll put an arrow here and that's it.

46
00:03:01,200 --> 00:03:03,690
So now if I run the output, it's going to be the same.

47
00:03:03,700 --> 00:03:05,130
But the syntax has changed.

48
00:03:05,430 --> 00:03:11,280
As you all know, that arrow function can live with a single line because return when you have only

49
00:03:11,280 --> 00:03:14,670
one return, you don't need to write return or these brackets.

50
00:03:14,790 --> 00:03:15,800
So let's change that.

51
00:03:15,810 --> 00:03:21,990
Also, I'll remove these brackets will also remove the return statement and we don't even need this.

52
00:03:22,350 --> 00:03:24,610
Curly bracket will have this bracket only.

53
00:03:24,630 --> 00:03:25,140
That's it.

54
00:03:25,470 --> 00:03:29,340
You see single line and this is going to return square of all elements.

55
00:03:29,640 --> 00:03:33,540
Even we can remove this parentheses as well with arrow function.

56
00:03:33,810 --> 00:03:35,430
So this is how it is going to be.

57
00:03:35,730 --> 00:03:37,650
So the map method is very useful.

58
00:03:37,740 --> 00:03:44,550
That is a function, a callback function which receives the element index number and the edit also and

59
00:03:44,550 --> 00:03:46,550
it returns the new added.

60
00:03:46,980 --> 00:03:47,310
Right.

61
00:03:47,580 --> 00:03:49,110
This is how it works.

62
00:03:49,290 --> 00:03:51,150
Let's see the syntax of it.

63
00:03:51,480 --> 00:03:55,440
So the syntax is like this that we have the new added return.

64
00:03:55,680 --> 00:03:59,280
We say add a name dart map and it takes a callback function.

65
00:03:59,610 --> 00:04:01,410
So it can be an arrow function also.

66
00:04:01,410 --> 00:04:04,650
But we are writing function like this only at the moment.

67
00:04:04,800 --> 00:04:11,070
The first parameter is every element passed to the added optional is the index and the added self.

68
00:04:11,280 --> 00:04:15,810
It also takes this argument after the function, after the callback function.

69
00:04:15,990 --> 00:04:21,269
So this is also a reference of the callback function, but you have to take care whether you are using

70
00:04:21,269 --> 00:04:24,570
the arrow function or the traditional function depending on that.

71
00:04:24,810 --> 00:04:28,020
This value can be different directly.

72
00:04:28,020 --> 00:04:31,050
If you try to refer this argument, it is going to be undefined.

73
00:04:31,200 --> 00:04:34,080
Now let's discuss related questions of this topic.

74
00:04:34,440 --> 00:04:39,060
The first question is find length of each element in a new ADI.

75
00:04:39,540 --> 00:04:42,660
Let's say we have array of few elements.

76
00:04:43,300 --> 00:04:47,850
I'll say apple, banana and oranges.

77
00:04:48,390 --> 00:04:50,880
Now we want to find length of every element.

78
00:04:51,240 --> 00:04:52,020
Very easy.

79
00:04:52,530 --> 00:04:54,780
Let's try this with map method.

80
00:04:55,080 --> 00:04:57,280
I select land of array.

81
00:04:57,300 --> 00:05:02,970
I'll create a new article LIRR and here I'll say added or map.

82
00:05:03,360 --> 00:05:09,970
Now I'm not going to write the function the long way, but instead we will go with the sharpness index.

83
00:05:09,990 --> 00:05:12,150
So I'll say element arrow function.

84
00:05:12,750 --> 00:05:13,080
Right.

85
00:05:13,380 --> 00:05:15,680
And I'm not writing a return statement.

86
00:05:15,690 --> 00:05:19,480
Also, we have already seen in the example just before a few seconds.

87
00:05:19,800 --> 00:05:21,690
So I'll say element dot length.

88
00:05:22,020 --> 00:05:22,560
That's it.

89
00:05:22,800 --> 00:05:27,530
And I will display the LIRR that is length.

90
00:05:28,050 --> 00:05:30,000
Let us see what is the output here?

91
00:05:30,990 --> 00:05:33,720
You see, every element's length is displayed.

92
00:05:34,110 --> 00:05:40,380
The second question is find the square root of every element and store it in a new ADI.

93
00:05:40,710 --> 00:05:42,960
This again can be very easy.

94
00:05:42,990 --> 00:05:48,840
Let's say instead of these string values, let's make 25, maybe 16.

95
00:05:49,290 --> 00:05:53,130
Let's say 144 and 36.

96
00:05:53,550 --> 00:05:59,670
Right now, what we want is we want to have square root of each element and that we want in the new

97
00:05:59,670 --> 00:06:00,000
ADI.

98
00:06:00,210 --> 00:06:05,490
So instead of this element length, now I will say mad, not square root.

99
00:06:05,940 --> 00:06:09,330
And the only thing you have to pass is the element which is received.

100
00:06:09,750 --> 00:06:16,230
This is the received value which I'm passing here, and it will return the square root and it will create

101
00:06:16,230 --> 00:06:17,030
the new ADI.

102
00:06:17,640 --> 00:06:20,310
Let's run this and see whether we get the desired output.

103
00:06:20,910 --> 00:06:21,210
Right.

104
00:06:21,210 --> 00:06:26,880
So the square root of 25 is five and respectively it has displayed all the square roots.

105
00:06:28,370 --> 00:06:35,600
Third question is that is an addict called products as shown here get all product names that is p names

106
00:06:35,780 --> 00:06:36,770
in a new addict.

107
00:06:36,800 --> 00:06:43,280
Now here the question is that one wants to fetch all the products or a single key, in fact, of this

108
00:06:43,280 --> 00:06:47,010
object literally that is P name in this case in a separate addict.

109
00:06:47,120 --> 00:06:48,560
How can we do this again?

110
00:06:48,560 --> 00:06:54,890
We can use the map method to fetch all product names or all product codes or any key for that matter,

111
00:06:55,070 --> 00:06:57,090
and store it in a new A-D.

112
00:06:57,200 --> 00:06:58,070
Let's try this.

113
00:06:58,250 --> 00:07:00,800
I will have this in the court window.

114
00:07:01,070 --> 00:07:04,580
Let's go to the go to window and let's say we create this ad.

115
00:07:04,580 --> 00:07:06,200
If you have this ad it ready.

116
00:07:06,410 --> 00:07:13,010
Now, what I want is I just want to get this p names in one ad so I will create a new article B names,

117
00:07:13,010 --> 00:07:13,790
for example.

118
00:07:14,150 --> 00:07:17,120
And there I will say products dot map.

119
00:07:17,420 --> 00:07:17,750
Right?

120
00:07:17,960 --> 00:07:19,260
Every element is passed.

121
00:07:19,280 --> 00:07:24,650
Now, remember, when this every element is passed here, each element is an object literal.

122
00:07:24,800 --> 00:07:29,090
So this entire p gordon p name is passed in element.

123
00:07:29,300 --> 00:07:35,510
So in other words, element will have something like this one object literal every time till the end

124
00:07:35,510 --> 00:07:36,020
of adding.

125
00:07:36,200 --> 00:07:38,240
And now what it should return is.

126
00:07:38,240 --> 00:07:40,940
It should return the element.

127
00:07:42,160 --> 00:07:43,570
Not by name, isn't it?

128
00:07:43,570 --> 00:07:48,760
Because it's an object literal and we do not write this written statement because it's a single line.

129
00:07:48,760 --> 00:07:50,020
So I'll remove this written.

130
00:07:50,350 --> 00:07:50,890
That's it.

131
00:07:51,370 --> 00:07:55,150
And then we display the entire addy.

132
00:07:55,750 --> 00:07:56,950
So I'll say P names.

133
00:07:57,940 --> 00:07:59,470
That's the area we want to display.

134
00:07:59,470 --> 00:08:02,440
That's the new Adi created by Mad Method.

135
00:08:03,310 --> 00:08:11,110
Now if we run, we get all the P name that is a key from an object literal and we have assigned to the

136
00:08:11,110 --> 00:08:11,710
new ADI.

137
00:08:11,830 --> 00:08:18,040
We do also have B structuring in S6, which is already discussed in one of the section.

138
00:08:18,340 --> 00:08:21,460
But this is also kind of the structuring we have done.

139
00:08:21,460 --> 00:08:26,740
The only thing is we have changed from one structure to another that is object literal to ADI.

140
00:08:27,250 --> 00:08:29,950
Do make sure that you are clear with matter.

141
00:08:30,040 --> 00:08:35,409
It is a very useful matter and used in most of the real world applications.

142
00:08:35,559 --> 00:08:41,049
When we have to look through the ADI and we, we have to display the data maybe on a page or we draw

143
00:08:41,049 --> 00:08:42,669
the DOM at that time.

144
00:08:42,760 --> 00:08:44,530
We use map a lot.

