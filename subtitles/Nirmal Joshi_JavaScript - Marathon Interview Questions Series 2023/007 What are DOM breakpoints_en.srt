1
00:00:00,060 --> 00:00:03,300
In this lecture, we will learn about the DOM breakpoints.

2
00:00:04,290 --> 00:00:08,880
This itself is a question that what are DOM breakpoints and how do they function?

3
00:00:10,190 --> 00:00:16,760
DOM stands for document, object, model, and every element in the web page is called the DOM Node.

4
00:00:17,690 --> 00:00:22,880
This I have explained descriptively in a dedicated section on Domain Web.

5
00:00:24,210 --> 00:00:29,490
To break the execution in case of the dome structure, mutation or modification.

6
00:00:30,000 --> 00:00:35,400
We used the dam break points where the dam mutation can be subtree.

7
00:00:35,400 --> 00:00:35,940
Change.

8
00:00:36,540 --> 00:00:40,260
Change in the attributes or removal of nodes.

9
00:00:41,180 --> 00:00:43,550
Let us practically see these cases.

10
00:00:44,590 --> 00:00:48,370
Adam Breakpoint is set on a particular node or element.

11
00:00:50,650 --> 00:00:52,120
To put a down breakpoint.

12
00:00:52,270 --> 00:00:54,430
I will right click on the element.

13
00:00:54,820 --> 00:01:00,940
I will select inspect and it score gets highlighted here in the Elements panel.

14
00:01:02,000 --> 00:01:03,200
Let me right click on it.

15
00:01:04,250 --> 00:01:11,960
Now, however, on the brake on option, which shows the three types of DOM breakpoints that we can

16
00:01:11,960 --> 00:01:13,700
select as our requirement.

17
00:01:14,800 --> 00:01:18,700
The blue dot on the side shows that the breakpoint is set.

18
00:01:19,480 --> 00:01:26,080
The first type that is subtree modification breakpoint will be triggered whenever there are changes

19
00:01:26,080 --> 00:01:30,250
like adding, moving or removing the child nodes.

20
00:01:30,730 --> 00:01:33,220
That is modification in the subtree.

21
00:01:35,730 --> 00:01:40,260
In this code, that is a button that will add a child node on the click event.

22
00:01:42,060 --> 00:01:43,170
Going to the browser.

23
00:01:43,200 --> 00:01:46,440
I will right click on this and select inspect.

24
00:01:47,400 --> 00:01:52,470
It is highlighted here and now I'm setting the subtree modification breakpoint.

25
00:01:53,430 --> 00:02:01,470
In this side navigation here clicking on the DOM breakpoints shows the state offered before and after

26
00:02:01,470 --> 00:02:01,980
triggered.

27
00:02:02,890 --> 00:02:04,990
And let me click on add node.

28
00:02:05,050 --> 00:02:08,020
So the subtree modification breakpoint is triggered.

29
00:02:09,120 --> 00:02:10,470
In the debugging pane.

30
00:02:10,650 --> 00:02:16,080
It shows the call stack and the enabled state that is subtree modified.

31
00:02:16,380 --> 00:02:20,430
So the debugger parses when that is a modification in the subtree.

32
00:02:21,690 --> 00:02:25,230
Resuming the execution and a child is added.

33
00:02:26,130 --> 00:02:29,580
So this is how subtree modification breakpoints work.

34
00:02:30,780 --> 00:02:32,160
To remove the break point.

35
00:02:32,160 --> 00:02:35,490
You can deselect or simply right click and remove it.

36
00:02:36,500 --> 00:02:43,880
Moving on to the second time that is to break on attribute modifications implies that the debugger pauses

37
00:02:44,090 --> 00:02:51,350
when there are changes in the attributes of the node or elements that reboots of this paragraph change.

38
00:02:51,350 --> 00:02:59,810
When I click these buttons, let me expand these divisions to set a breakpoint right clicking and selecting

39
00:02:59,810 --> 00:03:01,790
the attribute modification option.

40
00:03:02,450 --> 00:03:04,400
And it is set now.

41
00:03:04,400 --> 00:03:11,000
As soon as I click on this button, the debugger pauses as the attribute of the selected element has

42
00:03:11,000 --> 00:03:11,570
changed.

43
00:03:12,350 --> 00:03:14,030
Let us resume and see.

44
00:03:16,050 --> 00:03:18,030
Similarly when I click on Bold.

45
00:03:20,020 --> 00:03:23,620
And also on reset the debugger positives.

46
00:03:24,900 --> 00:03:31,200
So attribute modification breakpoint is triggered when the attributes of the selected element change.

47
00:03:33,660 --> 00:03:40,500
The third one is the node removal that pauses the execution when a selected element or node is removed.

48
00:03:42,600 --> 00:03:44,550
Let me go back to the first example.

49
00:03:45,240 --> 00:03:47,250
Now I click here to add a node.

50
00:03:47,880 --> 00:03:49,410
Selecting this element.

51
00:03:50,370 --> 00:03:54,300
I will set a break point and select node removal.

52
00:03:55,250 --> 00:04:00,200
So in a click on the added node to remove it, the break point is triggered.

53
00:04:01,700 --> 00:04:05,390
I will resume the execution and the node is removed.

54
00:04:07,500 --> 00:04:14,310
This was all about how the DOM breakpoints work and help in debugging in relation to the DOM mutation.

