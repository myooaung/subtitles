1
00:00:00,120 --> 00:00:04,290
This question discusses about the structuring of object littoral.

2
00:00:04,800 --> 00:00:06,570
There are two related questions.

3
00:00:07,080 --> 00:00:13,200
We have already seen the concept of this structuring in the address section, but I will still repeat

4
00:00:13,200 --> 00:00:17,520
the same thing for clarification that what is the structuring?

5
00:00:18,090 --> 00:00:22,950
As the name structuring sees that something is getting the structure.

6
00:00:23,130 --> 00:00:27,780
It also means there is already a structure which is getting broken.

7
00:00:28,500 --> 00:00:32,159
When I say structure, it means the data structure.

8
00:00:32,820 --> 00:00:41,220
So restructuring is a concept of breaking data structure like eddy or object literal into data pieces

9
00:00:41,550 --> 00:00:44,250
or in other words, individual variables.

10
00:00:44,790 --> 00:00:50,640
In this section we are discussing the structuring of object literal for added structuring.

11
00:00:50,670 --> 00:00:52,320
You can check the add section.

12
00:00:52,590 --> 00:00:55,920
Object literal structuring will look something like this.

13
00:00:56,310 --> 00:01:00,030
For example, you have an object which has bigger than P name.

14
00:01:00,030 --> 00:01:05,010
That is product code and product name where we have values also 1001 and Apple.

15
00:01:05,640 --> 00:01:11,970
Now the thing is, if you want to bring product code and product name out of the structure and want

16
00:01:11,970 --> 00:01:16,410
to assign to individual variables, then you will write something like this.

17
00:01:16,860 --> 00:01:22,890
You will say let be code is equal to object becau or maybe p name is equal to object or be name.

18
00:01:23,160 --> 00:01:28,260
Now there are only two members at the moment, but when you have more members it is a cumbersome job.

19
00:01:28,800 --> 00:01:35,550
So instead of that you have an easier way in E6 like this where you can select in the curly brackets,

20
00:01:35,550 --> 00:01:39,210
you put list of all the variables and then you assign the object.

21
00:01:39,270 --> 00:01:45,120
You do have to take care here that the key name and here the variable name is similar.

22
00:01:45,150 --> 00:01:50,640
For example, in this figure you see that I have already given speaker and P name, which is the same

23
00:01:50,640 --> 00:01:52,530
key in the object as well.

24
00:01:53,340 --> 00:01:55,770
Let's try practically to get the clear idea.

25
00:01:56,400 --> 00:02:02,250
So here I can create const object is equal to and the same thing.

26
00:02:02,250 --> 00:02:06,510
I'm going to write b code and of course b name.

27
00:02:09,560 --> 00:02:10,370
After this.

28
00:02:10,370 --> 00:02:11,720
I just want to distract you.

29
00:02:11,720 --> 00:02:13,660
Remember the left hand side.

30
00:02:13,670 --> 00:02:16,880
What you are writing in curly brackets is not an object.

31
00:02:16,880 --> 00:02:17,300
Literally.

32
00:02:17,600 --> 00:02:24,740
This is just a list of variables which I am giving that is speaker and P name that equals two objects.

33
00:02:25,460 --> 00:02:32,390
You are giving these curly brackets to show that you are trying to structure an object literal.

34
00:02:32,660 --> 00:02:38,720
If it is an array, you put a square bracket which we have already seen in the added restructuring inside

35
00:02:38,720 --> 00:02:39,500
add a section.

36
00:02:40,100 --> 00:02:45,260
So now the only thing we have to check is whether this thing is destructor or not.

37
00:02:45,260 --> 00:02:49,670
So I will say console.log will try to display individual variables now.

38
00:02:50,420 --> 00:02:53,990
So product code and product name and let's run this.

39
00:02:56,760 --> 00:02:58,950
I added a semicolon by mistake.

40
00:02:59,250 --> 00:03:00,540
Let me do it again.

41
00:03:01,320 --> 00:03:02,550
I'm running the court again.

42
00:03:03,450 --> 00:03:10,170
So now you see that we have individual variables where 1001 and Apple, that is two values are the structure.

43
00:03:10,350 --> 00:03:12,810
So this is the whole concept of restructuring.

44
00:03:13,200 --> 00:03:17,550
Of course, in this case, right now we are de structuring an object literal.

45
00:03:17,640 --> 00:03:18,330
Same thing.

46
00:03:18,330 --> 00:03:21,810
A function can return an object and that can be the structure.

47
00:03:21,930 --> 00:03:25,110
Say, for example, I put this object inside a function.

48
00:03:25,110 --> 00:03:32,250
So as a function, let's say test and shift this object inside the function.

49
00:03:33,150 --> 00:03:38,070
And let's say this is returning an object that is the object.

50
00:03:38,580 --> 00:03:41,790
So now if you call the function, it is going to be the same thing.

51
00:03:42,090 --> 00:03:45,510
The similar example we tried with added restructuring as well.

52
00:03:45,510 --> 00:03:45,750
Right?

53
00:03:45,760 --> 00:03:47,880
So here I will have the same output.

54
00:03:48,480 --> 00:03:50,700
That is the value of individual variables.

55
00:03:51,690 --> 00:03:57,090
Even while restructuring the object literal, we do have default value assignment.

56
00:03:57,090 --> 00:04:03,060
For example, if there is no value assigned to pick or then what should be the default value?

57
00:04:03,070 --> 00:04:08,790
So if I say for example, 12 is the default value or maybe zero is the default value.

58
00:04:09,360 --> 00:04:14,070
So if that is no picture inside this object literal, let's see this.

59
00:04:16,120 --> 00:04:20,050
As you can see, if there is no value, then the peak is zero.

60
00:04:20,230 --> 00:04:27,310
But the moment I add a value, let's say Beaker is equal to 1002 at the moment and I'll put a comma.

61
00:04:27,970 --> 00:04:33,640
Now if I run, then yes, we do have the value which was assigned in the object literal.

62
00:04:34,450 --> 00:04:41,200
So this is a very basic idea of breaking the data structure like object literal or adding and getting

63
00:04:41,200 --> 00:04:44,260
the data pieces out of that data structure.

64
00:04:44,740 --> 00:04:47,080
Let's discuss the relative questions of this topic.

65
00:04:47,620 --> 00:04:52,750
The first question is explain a practical scenario of object literal restructuring.

66
00:04:53,470 --> 00:04:57,640
Object literal restructuring is often used in all programs.

67
00:04:57,880 --> 00:05:02,260
The reason is that you get the data from the server in adjacent format.

68
00:05:02,680 --> 00:05:09,040
When you receive it, you will always have that data assigned to a JavaScript object literal something

69
00:05:09,040 --> 00:05:09,580
like this.

70
00:05:10,120 --> 00:05:15,220
Now the data which is retrieved here that will always be needed to be de structure because you would

71
00:05:15,220 --> 00:05:17,530
not want that entire object literal like this.

72
00:05:17,530 --> 00:05:22,090
For example, you have, let's say, product detail, these many details you have like product code

73
00:05:22,090 --> 00:05:26,560
date, manufacturing date, I mean name price, vendor and what not.

74
00:05:26,920 --> 00:05:32,530
The data which you retrieve like this, that needs to be the structure because only few variables you

75
00:05:32,530 --> 00:05:33,220
want to use.

76
00:05:33,610 --> 00:05:35,620
So it's a very common way.

77
00:05:35,710 --> 00:05:41,920
So the practical scenario is like this that value how to use the restructuring of object later.

78
00:05:42,700 --> 00:05:46,480
The second question is explain the output of this call.

79
00:05:47,720 --> 00:05:48,070
So well.

80
00:05:48,080 --> 00:05:52,010
This is about default value assignment, which is possible with object later.

81
00:05:52,280 --> 00:05:59,600
So here we have the default value functionality with a so it will be 90 and B is going to be empty.

82
00:05:59,630 --> 00:06:01,660
That means it will not have any value.

83
00:06:01,670 --> 00:06:07,780
And by default inside JavaScript, if variable is not assigned with a value, it's going to be undefined.

84
00:06:07,790 --> 00:06:11,090
So if I run this, it should display as 90.

85
00:06:11,090 --> 00:06:12,290
That is the value of it.

86
00:06:12,710 --> 00:06:15,620
That is the default value and undefined for B.

