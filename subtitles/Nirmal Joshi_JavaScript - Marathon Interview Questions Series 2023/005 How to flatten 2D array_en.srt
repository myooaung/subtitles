1
00:00:00,120 --> 00:00:04,290
The next question is how to flatten a two dimensional eddy.

2
00:00:04,590 --> 00:00:08,340
Now, the purpose of this question is that we are going to use the reduced method.

3
00:00:08,430 --> 00:00:13,320
The question is of Adi's category, and there will be five related questions to this topic.

4
00:00:14,200 --> 00:00:20,140
Now flattening and adding is basically converting multi dimensional, maybe two dimensional, three

5
00:00:20,140 --> 00:00:24,810
dimensional area into a single dimensional eddy to flatten and eddy.

6
00:00:24,910 --> 00:00:26,710
We have to use the reduce method.

7
00:00:26,980 --> 00:00:33,220
We will begin with the basics and then I will discuss the flattening process as a first question in

8
00:00:33,220 --> 00:00:35,250
the related questions section.

9
00:00:35,260 --> 00:00:40,660
The reason is you need to know the basics of the reduce method, like the MAP method.

10
00:00:40,960 --> 00:00:48,130
Reduce is also asked in almost all interviews, and the reason is it's very useful in many places.

11
00:00:48,490 --> 00:00:56,650
We saw one example in map method about finding square, square root or length of each element in all

12
00:00:56,650 --> 00:00:57,730
these operations.

13
00:00:58,000 --> 00:00:59,410
That is one thing common.

14
00:00:59,770 --> 00:01:03,310
If you have ten elements, there will be ten results.

15
00:01:03,610 --> 00:01:04,569
But let's see.

16
00:01:04,720 --> 00:01:08,230
I ask you to get the sum of all elements.

17
00:01:08,350 --> 00:01:15,700
Then it's kind of an aggregate or accumulative operation that is the result is combined.

18
00:01:16,210 --> 00:01:25,480
So reduce method loops through all the elements and helps you to get one combined result like some or

19
00:01:25,480 --> 00:01:31,000
other accumulative calculations, for example, product or average.

20
00:01:31,330 --> 00:01:32,740
Let's check with an example.

21
00:01:32,980 --> 00:01:37,660
I will declare an array, for example, which has two, four, six, eight.

22
00:01:37,780 --> 00:01:39,400
That is four values we have here.

23
00:01:39,790 --> 00:01:41,110
I missed an equal to sign.

24
00:01:42,660 --> 00:01:46,590
I also like the result is equal to adequate reduce.

25
00:01:46,740 --> 00:01:52,770
Now this method also takes a callback function as an argument, but there is a major difference if you

26
00:01:52,770 --> 00:01:54,480
compare it with map or wattage.

27
00:01:54,480 --> 00:01:59,460
And this this has a different way to deal with the parameters.

28
00:01:59,550 --> 00:02:01,500
Yes, it does have a callback function.

29
00:02:01,710 --> 00:02:04,050
The first parameter is the accumulator.

30
00:02:04,050 --> 00:02:05,880
Now you name it, whatever you want to.

31
00:02:05,890 --> 00:02:12,180
But we call this as a kind of accumulator y because it accumulates all the values in it.

32
00:02:12,360 --> 00:02:15,420
Then comes the element value or the current value.

33
00:02:15,420 --> 00:02:16,620
We can name it element.

34
00:02:16,630 --> 00:02:17,280
Our current.

35
00:02:17,280 --> 00:02:18,390
Let's say I name it.

36
00:02:18,630 --> 00:02:19,380
Current value.

37
00:02:19,590 --> 00:02:21,030
Current value are just current.

38
00:02:21,270 --> 00:02:30,780
This means that every element of ETA goes to the current variable and accumulator will actually accumulate

39
00:02:30,780 --> 00:02:34,950
all the returned values, which I'm going to show you in a moment.

40
00:02:35,280 --> 00:02:37,590
So we are taking the arrow function.

41
00:02:37,590 --> 00:02:37,980
Let's see.

42
00:02:37,980 --> 00:02:42,320
What I want to return is I want to return whatever is the accumulator.

43
00:02:42,330 --> 00:02:45,300
I just want to add the current value in it.

44
00:02:45,630 --> 00:02:48,510
Right, and just display the result.

45
00:02:48,990 --> 00:02:50,520
I'll say console.log.

46
00:02:51,500 --> 00:02:53,330
And the result I want to display.

47
00:02:55,080 --> 00:02:56,190
Let's check what happens.

48
00:02:58,290 --> 00:03:00,030
It says 20, right?

49
00:03:00,720 --> 00:03:04,530
So accumulator holds the accumulator values.

50
00:03:04,770 --> 00:03:06,720
There are other parameters with this.

51
00:03:06,960 --> 00:03:16,230
The next parameter is actually the index of the current value and also it passes the ADI array on which

52
00:03:16,230 --> 00:03:17,490
this loop is going.

53
00:03:17,820 --> 00:03:18,150
Right.

54
00:03:18,480 --> 00:03:20,490
So we have these parameters.

55
00:03:21,000 --> 00:03:23,670
We also have one more parameter here.

56
00:03:23,910 --> 00:03:27,450
Not that this argument, but this is actually the initial value.

57
00:03:27,600 --> 00:03:29,100
Now there is a difference in this.

58
00:03:29,100 --> 00:03:34,500
Let's try this also and remove this add it and index because at the moment it is not needed and you

59
00:03:34,500 --> 00:03:39,870
can easily understand that if it is needed, you can use it wherever you want to index and added that

60
00:03:39,870 --> 00:03:40,080
is.

61
00:03:40,440 --> 00:03:43,710
But the initial value is something which we need to discuss.

62
00:03:44,310 --> 00:03:46,850
Earlier we did not give any initial value.

63
00:03:46,860 --> 00:03:50,220
This initial value parameter is for the accumulator.

64
00:03:50,370 --> 00:03:57,180
When it started, the accumulator was zero and then it started adding two, four, six and eight.

65
00:03:57,630 --> 00:04:01,320
Let's say I initialized the accumulator with ten.

66
00:04:01,890 --> 00:04:03,570
Then what will happen?

67
00:04:03,990 --> 00:04:12,150
It will give us the result 30 instead of 20 y because this total was anyway has to be 20.

68
00:04:12,270 --> 00:04:15,300
But then we initialize the accumulator with ten.

69
00:04:15,300 --> 00:04:18,360
So ten plus two plus four plus six plus eight.

70
00:04:18,480 --> 00:04:19,769
That's how it has gone.

71
00:04:20,010 --> 00:04:22,830
So this parameter is very useful.

72
00:04:23,070 --> 00:04:24,270
You may argue like this.

73
00:04:24,990 --> 00:04:29,250
That means from the beginning accumulator has become an object literal.

74
00:04:29,460 --> 00:04:34,860
If you give like this, only like this, the scribe records, the accumulator becomes an array.

75
00:04:35,280 --> 00:04:38,460
So you do take a value, assign that initial value.

76
00:04:38,910 --> 00:04:41,730
So we have seen that initial value makes the difference.

77
00:04:42,000 --> 00:04:46,070
Let's also practically understand that how this process goes on.

78
00:04:46,080 --> 00:04:51,510
So I will just show you the dry run off with and without initial value.

79
00:04:51,810 --> 00:04:55,940
Then there is no initial value given this is how the output will be.

80
00:04:55,950 --> 00:04:57,120
Let's check that run.

81
00:04:57,480 --> 00:04:59,790
Accumulator is zero on the first call.

82
00:05:00,090 --> 00:05:01,500
The current value will be two.

83
00:05:01,890 --> 00:05:08,670
Similarly, it goes on like this on second call, on third call and on the fourth call we have the current

84
00:05:08,670 --> 00:05:12,330
value eight and the output is 20.

85
00:05:12,690 --> 00:05:17,490
If we give this initial value, then the output will look something like this.

86
00:05:17,880 --> 00:05:21,450
So now the accumulator will begin with ten instead of zero.

87
00:05:21,690 --> 00:05:23,640
So that's how the initial value works.

88
00:05:23,940 --> 00:05:26,790
Now this is just adding some.

89
00:05:27,000 --> 00:05:28,640
How about getting product?

90
00:05:28,650 --> 00:05:34,230
If you want product, only thing you need to do is just put an asterisk sign here that is a multiplication

91
00:05:34,230 --> 00:05:39,600
sign and instead of showing the sum, it is going to give you the product of these values.

92
00:05:39,870 --> 00:05:42,960
In fact, we can calculate the average as well.

93
00:05:42,960 --> 00:05:50,490
Let's say we have four elements here and the sum is 20, so the average is actually 20 by total number

94
00:05:50,490 --> 00:05:52,650
of elements, so 20 by four.

95
00:05:52,650 --> 00:05:54,300
So the average should be five.

96
00:05:54,510 --> 00:05:55,830
There might be different values.

97
00:05:55,830 --> 00:06:00,450
So we will consider added length as number of elements.

98
00:06:00,750 --> 00:06:03,660
How we look down the average here, let's try that.

99
00:06:04,530 --> 00:06:07,650
We have the code inside this reduce method.

100
00:06:07,650 --> 00:06:09,570
We can put a condition.

101
00:06:09,570 --> 00:06:15,660
Now here I need the index number and I will take the add also to make sure that because this function

102
00:06:15,660 --> 00:06:17,580
may be part of some other process, right?

103
00:06:17,580 --> 00:06:23,490
So I'm passing the added and that array I'm going to check for example if index.

104
00:06:24,500 --> 00:06:27,050
Is equal to added length.

105
00:06:28,620 --> 00:06:31,080
Added Art lent minus one.

106
00:06:31,080 --> 00:06:40,950
That means when it reaches to the final stage, I want to return the accumulator by added length.

107
00:06:40,980 --> 00:06:46,830
Now every time your accumulator will have a total of new elements added to it.

108
00:06:47,340 --> 00:06:50,460
So at the end I want to return.

109
00:06:50,790 --> 00:06:57,750
Like I said, this will have 20 and I'm dividing it by the length that is four, so it should return

110
00:06:57,750 --> 00:06:58,620
me five.

111
00:06:58,860 --> 00:07:03,270
Now the only thing is when it comes to adding the value, right?

112
00:07:03,720 --> 00:07:04,560
How will you write?

113
00:07:04,560 --> 00:07:06,480
You'll say accumulator every time.

114
00:07:06,480 --> 00:07:07,770
Add accumulator.

115
00:07:08,940 --> 00:07:10,050
With the current value.

116
00:07:10,530 --> 00:07:16,140
The important point here is it should return the accumulator every time like this, right?

117
00:07:16,140 --> 00:07:19,620
So accumulator is return to the function.

118
00:07:19,800 --> 00:07:22,110
So it will have the sum all the times.

119
00:07:22,290 --> 00:07:28,980
But here we are not writing, plus we are just adding it separately so that after the last element is

120
00:07:28,980 --> 00:07:35,310
added to it, if this condition matches, then we are not going to return only accumulator.

121
00:07:35,310 --> 00:07:38,520
Instead we are going to return the average value saving it.

122
00:07:38,790 --> 00:07:39,810
Let's try this.

123
00:07:40,260 --> 00:07:41,190
Clearing the screen.

124
00:07:42,740 --> 00:07:43,530
There it is.

125
00:07:44,100 --> 00:07:46,860
Just to try one more thing we can add.

126
00:07:47,250 --> 00:07:48,060
Let's add ten.

127
00:07:48,570 --> 00:07:48,840
Right?

128
00:07:48,840 --> 00:07:52,560
So now we will have the sum as 30 and there are five elements.

129
00:07:52,710 --> 00:07:54,960
So that has to be six as an average.

130
00:07:55,890 --> 00:08:00,750
So there are various combinations you can try inside the reduced methods column.

131
00:08:01,620 --> 00:08:03,840
That is also a reduced right matter.

132
00:08:03,930 --> 00:08:08,640
The only difference is reduce loops through adding from left to right.

133
00:08:08,820 --> 00:08:16,050
That is from zero IT index to add a length minus one, whereas reduce right moves right to left.

134
00:08:16,110 --> 00:08:22,260
That is, the loop begins with added length minus one index and go still zero at the index.

135
00:08:22,680 --> 00:08:25,830
Now let's discuss related questions of this topic.

136
00:08:26,040 --> 00:08:32,580
The first question is, which was our main question, how will you flatten and add a that is, for example,

137
00:08:32,970 --> 00:08:39,390
we have an array like this which is a two dimensional addy and we want to convert it into a single dimensional

138
00:08:39,390 --> 00:08:39,720
addy.

139
00:08:40,020 --> 00:08:46,140
Let's first of all print this add to itself so you get the idea that this is a two dimensional area.

140
00:08:48,300 --> 00:08:51,960
So you see that every element itself is an Eddie.

141
00:08:52,200 --> 00:08:55,980
Now we want to convert it into a single dimensional ADI.

142
00:08:56,190 --> 00:08:58,320
This is where reduce can be used.

143
00:08:58,500 --> 00:09:01,860
So I can say let flatten Eddie.

144
00:09:01,890 --> 00:09:06,400
This process is also called less flattening and at a rate we are making it flat.

145
00:09:06,420 --> 00:09:13,620
So that's why I just take a variable F error that is flatten Eddie is equal to I'll say added or reduce.

146
00:09:14,190 --> 00:09:18,360
Now here I'm going to take the callback function with arrow only.

147
00:09:19,830 --> 00:09:22,470
Now there will be two parameters, as we have discussed.

148
00:09:22,920 --> 00:09:24,270
There will be an accumulator.

149
00:09:25,590 --> 00:09:28,320
And there will be a current value.

150
00:09:28,920 --> 00:09:29,430
All right.

151
00:09:29,880 --> 00:09:36,200
Now, the only thing you have to do is you just have to say return the accumulator with a concrete.

152
00:09:36,360 --> 00:09:39,480
That is, you want to upend the current value in it.

153
00:09:39,810 --> 00:09:40,280
That's it.

154
00:09:40,290 --> 00:09:41,250
So every time.

155
00:09:41,490 --> 00:09:47,370
The accumulator will make sure that a new value is added to it with a concrete method.

156
00:09:47,910 --> 00:09:52,800
Now the only thing remaining is that we just display the flattened add.

157
00:09:53,010 --> 00:09:53,580
That's it.

158
00:09:55,690 --> 00:09:58,530
So if I run, you get that it is a flat, an attic.

159
00:09:58,810 --> 00:10:06,340
Sometimes we also take care that accumulator is for short converted into an add.

160
00:10:06,700 --> 00:10:09,670
So initializing with a square bracket.

161
00:10:09,670 --> 00:10:13,840
That is, we make sure that from the beginning the accumulator is an.

162
00:10:14,620 --> 00:10:16,960
This will also give us the same output.

163
00:10:17,650 --> 00:10:20,560
This is a better practice when you are flattening an attic.

164
00:10:20,830 --> 00:10:24,820
So this is how you flatten and add a using the reduce method.

165
00:10:25,090 --> 00:10:29,590
The second question is get some of a key feel of an object literal.

166
00:10:29,860 --> 00:10:33,130
For example, this is the object literal employees.

167
00:10:33,130 --> 00:10:37,490
And you want to get salary of all the employees.

168
00:10:37,510 --> 00:10:38,440
How will you do this?

169
00:10:38,620 --> 00:10:40,360
Let's try in the court window.

170
00:10:40,600 --> 00:10:42,370
I have already declared the edit here.

171
00:10:42,430 --> 00:10:49,180
Let's say LED total salary is equal to employees, not reduce.

172
00:10:49,420 --> 00:10:52,990
Now again, the accumulator and the current value.

173
00:10:53,500 --> 00:10:55,540
And I'll put an arrow function.

174
00:10:55,930 --> 00:10:56,620
What will it be?

175
00:10:57,250 --> 00:11:05,290
Now, as we have seen the syntax, you might be thinking that writing the accumulator, right, and

176
00:11:05,470 --> 00:11:12,040
we are adding the current, which is going to be an object literal, not salary should style our purpose.

177
00:11:12,290 --> 00:11:14,740
Let's see what happens in this case.

178
00:11:14,740 --> 00:11:19,570
We will display the total salary and say total salary.

179
00:11:22,320 --> 00:11:23,160
See what happens.

180
00:11:24,480 --> 00:11:26,700
It has joined all the values.

181
00:11:27,780 --> 00:11:33,660
The reason is accumulator is filled with the first element.

182
00:11:33,960 --> 00:11:34,280
Right.

183
00:11:34,290 --> 00:11:36,330
It is initialized with the first element.

184
00:11:36,330 --> 00:11:39,710
And every element of this add is an object literal.

185
00:11:39,870 --> 00:11:42,990
So Accumulator joins the current large salary.

186
00:11:42,990 --> 00:11:46,710
So this itself is an object object plus current salary.

187
00:11:46,740 --> 00:11:49,980
This keeps on going so we don't get the output.

188
00:11:50,070 --> 00:11:55,920
So we have to make sure that the accumulator should be zero in the beginning.

189
00:11:55,920 --> 00:11:59,130
So it's going to handle the numeric operations now.

190
00:11:59,160 --> 00:11:59,520
Right.

191
00:11:59,520 --> 00:12:03,060
So now because we have given zero as initial value.

192
00:12:03,390 --> 00:12:05,580
Now let's try and see what happens.

193
00:12:05,640 --> 00:12:08,580
Now we have the sum of all the values.

194
00:12:08,580 --> 00:12:13,590
So you do have to take care using initial value when you have the object literal.

195
00:12:13,890 --> 00:12:19,790
Especially the third question is find average of all elements of an array.

196
00:12:20,010 --> 00:12:21,450
This we have already seen.

197
00:12:21,690 --> 00:12:23,100
This is the code we tried.

198
00:12:23,340 --> 00:12:26,280
So this is again an important question to deal with.

199
00:12:28,700 --> 00:12:35,210
The fourth question is find some or maybe product of all elements which we have seen while understanding

200
00:12:35,210 --> 00:12:36,950
this index of reduce.

201
00:12:39,260 --> 00:12:43,550
The fifth question is what is the difference between reduce and reduce?

202
00:12:43,550 --> 00:12:43,880
Right.

203
00:12:43,880 --> 00:12:51,080
So this we discussed that the reduced loops from the zeroth element till the last element but is reduced

204
00:12:51,080 --> 00:12:54,470
right starts the loop from the right side.

205
00:12:54,590 --> 00:12:56,990
That's the only difference between these two methods.

