1
00:00:00,060 --> 00:00:08,430
In this calling exercise, we are going to remove false zeros, not a number values undefined or may

2
00:00:08,430 --> 00:00:10,490
be blank spaces from an ADI.

3
00:00:10,500 --> 00:00:18,720
So eventually the ADI should contain only the values which are more than zero are proper data in element.

4
00:00:19,110 --> 00:00:22,320
Now there is a very simple way to do the same thing.

5
00:00:22,590 --> 00:00:28,950
We can use a loop, we can search for various values, we can compare it, but I'm going to use the

6
00:00:28,950 --> 00:00:29,850
filter method.

7
00:00:30,030 --> 00:00:38,310
So let me first of all just display the values using the filter, the value and the index number.

8
00:00:38,820 --> 00:00:40,470
Now inside of the filter method.

9
00:00:40,710 --> 00:00:48,960
What you can do is you can check whether the element has false, maybe zero nine instead of checking

10
00:00:48,960 --> 00:00:56,490
individual values like this, there is a mechanism in JavaScript which we call as the true the expression

11
00:00:56,640 --> 00:00:58,170
and false expression.

12
00:00:58,530 --> 00:01:07,470
Whenever there is a false zero nan undefined or blank, the JavaScript expression returns false.

13
00:01:08,340 --> 00:01:10,470
Otherwise it returns true.

14
00:01:10,470 --> 00:01:19,050
The So in case if I just write, let's see if v that means if it is true the then I'm going to display

15
00:01:19,500 --> 00:01:26,550
the value of v remember, I'm not saying V equals to true or false or anything.

16
00:01:26,550 --> 00:01:33,390
If I just say if V by default it means if it is true the expression, then only this condition will

17
00:01:33,390 --> 00:01:34,410
be executed.

18
00:01:34,800 --> 00:01:42,510
Now, when the value is false or any other like undefined or nan, certainly it will be false and this

19
00:01:42,510 --> 00:01:44,190
expression will not be displayed.

20
00:01:44,760 --> 00:01:46,830
Let's run this and see what is the output.

21
00:01:49,400 --> 00:01:53,150
As you can see from the ADI, though, there are many elements.

22
00:01:53,180 --> 00:02:02,720
It displays 690 and high only because for rest of the cases the V generate a false expression.

23
00:02:03,380 --> 00:02:06,170
So now this means if I just right.

24
00:02:06,710 --> 00:02:08,419
Return V.

25
00:02:09,410 --> 00:02:17,060
And if I take it in a new ad it because filter always returns a new ad let's say new ad and this new

26
00:02:17,060 --> 00:02:19,130
ad I'm going to display at the end.

27
00:02:19,610 --> 00:02:25,730
The very nature of filter is like this, that if the expression is true, then it will return.

28
00:02:25,730 --> 00:02:29,570
In case of false expression, the value won't be returned.

29
00:02:29,570 --> 00:02:30,710
It will be ignored.

30
00:02:31,010 --> 00:02:32,150
So here, if I run.

31
00:02:34,110 --> 00:02:40,650
You see that the NRA now has only those values which are valid values?

32
00:02:40,740 --> 00:02:42,960
I wouldn't say either values are invalid.

33
00:02:42,960 --> 00:02:46,980
It's just that the elements which has nine or undefined are such values.

34
00:02:46,980 --> 00:02:50,820
And let's say you want to remove from ADI, you don't have to write a lot of code.

35
00:02:51,090 --> 00:02:55,380
It is the true the end fallacy technique of JavaScript which will take care.

36
00:02:55,410 --> 00:02:58,800
The only concern is you use a filter like my third order.

37
00:02:58,800 --> 00:03:03,330
You can put a loop and check the values for true or false.

