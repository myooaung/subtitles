1
00:00:00,060 --> 00:00:05,070
The question we are discussing is explain Adi and traversal in ADI.

2
00:00:05,310 --> 00:00:07,710
Now this is added a related question.

3
00:00:07,710 --> 00:00:12,600
So the category is area, of course, and there will be three related questions.

4
00:00:13,140 --> 00:00:17,730
Normally when you have a variable, it can store only one value.

5
00:00:18,030 --> 00:00:23,130
For example, we have a variable like this where I say Let I is equal to ten.

6
00:00:23,370 --> 00:00:28,320
It means that is one location in which value ten is stored.

7
00:00:28,560 --> 00:00:34,680
If I say I is equal to 20 in the next line, it means the value is overwritten.

8
00:00:34,950 --> 00:00:38,190
So at a time only one value is stored.

9
00:00:38,700 --> 00:00:44,970
When you feel that you want to store more values under one name, then you can use an ADI.

10
00:00:45,240 --> 00:00:48,600
Adi is available in all programming languages.

11
00:00:48,960 --> 00:00:53,670
Few languages support only specific type of ADI.

12
00:00:53,670 --> 00:00:57,510
Let's say an array of integer cannot have a string value.

13
00:00:57,870 --> 00:01:03,180
But in JavaScript we have ADI, which can store any type of value.

14
00:01:03,510 --> 00:01:09,090
In fact, we have added class and eddies are the prototype of this class.

15
00:01:09,720 --> 00:01:14,380
Let's create an ADI and see a few fundamentals quickly.

16
00:01:14,610 --> 00:01:17,640
How do we create an ad in JavaScript like this?

17
00:01:17,670 --> 00:01:19,440
Let error is equal to.

18
00:01:20,100 --> 00:01:21,690
We have this square bracket.

19
00:01:21,720 --> 00:01:23,970
This is a shorter way to create an ad.

20
00:01:24,120 --> 00:01:26,130
Of course we can write like this.

21
00:01:26,130 --> 00:01:31,830
Also let error is equal to new Adi because Adi is the main class.

22
00:01:32,220 --> 00:01:33,510
But this is a better way.

23
00:01:33,720 --> 00:01:40,650
When we say square brackets and we give a list of data here, for example, I give four, comma seven,

24
00:01:40,650 --> 00:01:41,340
comma, nine.

25
00:01:41,640 --> 00:01:43,410
Let's create another ADI.

26
00:01:43,440 --> 00:01:48,690
Everyone here, I want to show that we can have any type of data in it.

27
00:01:48,720 --> 00:01:53,490
Like I have a string, then a boolean value and let's see some number.

28
00:01:54,420 --> 00:01:59,850
Let's print both the ads here and here are one.

29
00:02:01,200 --> 00:02:02,520
I will just run this code.

30
00:02:04,290 --> 00:02:07,590
As you see that both the ads are displayed here.

31
00:02:08,430 --> 00:02:12,870
Let's try to understand internally what actually happens internally.

32
00:02:12,870 --> 00:02:19,200
This ad, for example, where we have high tru and 900 looks something like this.

33
00:02:19,590 --> 00:02:21,390
Each location has this value.

34
00:02:21,720 --> 00:02:23,850
Now this location is given a number.

35
00:02:24,300 --> 00:02:27,150
This number is called as the index number.

36
00:02:27,810 --> 00:02:30,330
So this is the lower index.

37
00:02:30,480 --> 00:02:35,670
And here zero one and two two is the upper index or upper boundary.

38
00:02:36,030 --> 00:02:43,950
If you see each location like this high or maybe true or 900, this, each location is called as an

39
00:02:43,950 --> 00:02:44,460
element.

40
00:02:45,000 --> 00:02:47,490
So this area is of three elements.

41
00:02:47,790 --> 00:02:50,940
In fact, we can have console.log.

42
00:02:52,540 --> 00:02:56,890
What I can say at our at our one not length.

43
00:02:57,400 --> 00:03:02,230
This length property gives me total number of elements in an ad.

44
00:03:02,650 --> 00:03:07,300
So if I run this, we'll get three here because we have three elements in this ad.

45
00:03:08,260 --> 00:03:14,950
Now, if you want to refer only one element, then you can use the square bracket and the index number.

46
00:03:15,220 --> 00:03:19,750
So let's say I just want to have the first element of this ad.

47
00:03:20,530 --> 00:03:24,730
So I say added one of zero, that is square bracket and the index number.

48
00:03:25,720 --> 00:03:27,520
So if I save this and run.

49
00:03:28,700 --> 00:03:32,390
I'll get only the high value, not the entire Adi.

50
00:03:32,870 --> 00:03:35,480
So these are different indexes we use.

51
00:03:35,840 --> 00:03:36,170
Right.

52
00:03:36,530 --> 00:03:43,250
We can also see here, if I want to get the last element of every Adi, I can say console.log.

53
00:03:43,580 --> 00:03:44,940
Era off.

54
00:03:44,960 --> 00:03:45,470
Now here.

55
00:03:45,480 --> 00:03:49,430
What I'll do is I'll say error, not length minus one.

56
00:03:49,790 --> 00:03:50,090
Right?

57
00:03:50,090 --> 00:03:52,820
So this is going to refer the last index number.

58
00:03:53,780 --> 00:03:56,690
So this will display the last value.

59
00:03:56,690 --> 00:03:59,360
That is nine of the first ADI.

60
00:04:00,500 --> 00:04:05,330
So this is a common way to declare an area or access individual elements.

61
00:04:05,900 --> 00:04:09,740
We can, in fact have an array of object, literally.

62
00:04:10,010 --> 00:04:16,579
Say, for example, I'll declare one area where I just see that there will be multiple elements and

63
00:04:16,579 --> 00:04:18,709
each element will be an object literal.

64
00:04:18,709 --> 00:04:27,530
For example, as a particular product code, for example, value one product name, I'll say, for example,

65
00:04:27,680 --> 00:04:31,190
Apple, I'll copy this two more times.

66
00:04:32,710 --> 00:04:34,580
Now I'm going to assign different values here.

67
00:04:34,600 --> 00:04:36,880
Let's say instead of apple, I'll say banana.

68
00:04:39,000 --> 00:04:40,080
And orange.

69
00:04:40,560 --> 00:04:41,790
And he had in the picture.

70
00:04:42,300 --> 00:04:43,470
I'll say two and three.

71
00:04:44,040 --> 00:04:45,060
What does this mean?

72
00:04:45,090 --> 00:04:49,170
It means now each element of Eddie is an object literal.

73
00:04:49,920 --> 00:04:53,640
So let's try to print the value of this, Eddie.

74
00:04:53,880 --> 00:04:55,800
I'll say console.log era.

75
00:04:56,460 --> 00:04:57,540
And we run this.

76
00:04:58,350 --> 00:05:01,080
You see that this center ETA is displayed.

77
00:05:01,230 --> 00:05:07,750
It means if I see error of zero, let's say here I'm going to refer individual element.

78
00:05:08,130 --> 00:05:08,490
Right.

79
00:05:08,610 --> 00:05:12,750
So this will display the first object itself.

80
00:05:13,620 --> 00:05:16,140
Only the apple and product code is one.

81
00:05:16,560 --> 00:05:24,270
In case if you just want to refer the product name so you can say dot B name, let's see the output.

82
00:05:25,590 --> 00:05:27,000
Only apples return.

83
00:05:27,570 --> 00:05:29,180
So these are difference in taxes.

84
00:05:29,250 --> 00:05:31,170
We can try with Adi.

85
00:05:31,650 --> 00:05:33,840
Now let's talk about traversal.

86
00:05:34,350 --> 00:05:37,350
Traversal means we are going to navigate through an ADI.

87
00:05:37,830 --> 00:05:40,080
We will begin with the most traditional way.

88
00:05:40,320 --> 00:05:43,110
That is loop till the last element.

89
00:05:43,140 --> 00:05:44,070
How do we do that?

90
00:05:44,100 --> 00:05:52,320
For example, I create an added, let's say let error is equal to I'll create an area of few strings

91
00:05:52,320 --> 00:05:52,650
only.

92
00:05:52,650 --> 00:05:59,760
Let's say yes file we have E6 is seven and I put s eight.

93
00:06:00,150 --> 00:06:01,620
Now we have four elements here.

94
00:06:02,040 --> 00:06:08,580
If I want to traverse through this, Adi, the most common way is we declare a variable which begins

95
00:06:08,580 --> 00:06:09,810
with the zeroth index.

96
00:06:10,140 --> 00:06:15,360
We go to the last element and we increment this I by one.

97
00:06:15,360 --> 00:06:17,250
For example, this is the index number.

98
00:06:17,460 --> 00:06:23,550
And here let's try to refer so I'll say console.log area of I.

99
00:06:24,240 --> 00:06:32,220
So every time this statement is displayed right, it's going to refer zero, one, two, three and so

100
00:06:32,220 --> 00:06:32,550
on.

101
00:06:33,180 --> 00:06:38,280
So if I run this, we are going to add all the elements individually.

102
00:06:38,520 --> 00:06:41,400
This is one of the very common way to traverse through.

103
00:06:41,550 --> 00:06:47,700
But each language has its own way or method also to loop through the ADI.

104
00:06:47,910 --> 00:06:54,540
For example, in JavaScript E6 onwards we have far in and far off.

105
00:06:54,660 --> 00:06:57,200
There are two ways to look through an ADI.

106
00:06:57,330 --> 00:06:59,730
So let's try those two ways also.

107
00:06:59,970 --> 00:07:03,570
I'll save our loop, then let an element.

108
00:07:04,530 --> 00:07:08,130
At the moment I am not seeing element because this is kind of index number.

109
00:07:08,130 --> 00:07:13,350
So I'll say or let's say element only let element in error.

110
00:07:13,680 --> 00:07:16,350
So now this is going to look through individual element.

111
00:07:16,530 --> 00:07:22,110
But the thing is, when you use the in operator, it is going to return the index number and not the

112
00:07:22,110 --> 00:07:22,560
value.

113
00:07:22,740 --> 00:07:23,490
Let's try this.

114
00:07:23,490 --> 00:07:25,410
I'll say console.log element.

115
00:07:26,730 --> 00:07:29,070
I'll save this and run the code.

116
00:07:31,300 --> 00:07:34,500
As you see that it is zero, one, two, three and so on.

117
00:07:34,510 --> 00:07:36,550
If we have more values, it'll be more.

118
00:07:36,790 --> 00:07:39,970
But ideally it doesn't display the value.

119
00:07:40,090 --> 00:07:46,900
So in is not a very preferable we are not a very common way to use because generally when you look through

120
00:07:46,900 --> 00:07:50,920
the ADI, the concern is the value and not the index number.

121
00:07:51,400 --> 00:07:54,190
So you have the of operator.

122
00:07:54,430 --> 00:07:59,400
So if you use off, it's going to refer the value directly and not the index number.

123
00:07:59,410 --> 00:08:04,000
So right now, if I run the call now you see all the elements are displayed.

124
00:08:04,540 --> 00:08:11,500
So this is the difference between far in and far off in will display the index number and off will return

125
00:08:11,800 --> 00:08:15,370
the element directly, which is a faster way to loop through.

126
00:08:15,760 --> 00:08:22,660
But in our off, when you run with this kind of code, you are not going to see any difference as long

127
00:08:22,660 --> 00:08:23,890
as the speed is concerned.

128
00:08:24,280 --> 00:08:24,640
Right.

129
00:08:24,790 --> 00:08:29,230
But still, when it comes to referring the value you go with off also.

130
00:08:29,680 --> 00:08:33,309
So so far we have seen all the drivers always using loop.

131
00:08:33,730 --> 00:08:41,620
There are many methods who loop through the array and return a new array like map or filter, which

132
00:08:41,620 --> 00:08:43,840
we will discuss in some other questions.

133
00:08:43,840 --> 00:08:51,370
But at the moment we will see one method which is there to only traverse through the array and that

134
00:08:51,370 --> 00:09:00,460
matter is the for each method in this code I'm going to use for each, so I'll see added dot for each.

135
00:09:01,150 --> 00:09:06,070
Now this actually takes a callback function as an argument.

136
00:09:06,430 --> 00:09:10,540
At the moment our concern is that I write the function here.

137
00:09:10,990 --> 00:09:15,010
Now I'm using the traditional syntax, but I can use the arrow syntax also.

138
00:09:15,010 --> 00:09:18,610
Let me use arrow syntax so I'll remove this function and put an arrow.

139
00:09:18,880 --> 00:09:20,200
So we have the arrow here.

140
00:09:20,620 --> 00:09:25,210
Now this callback function is filled with a few parameters.

141
00:09:25,480 --> 00:09:27,730
The first parameter is the element itself.

142
00:09:27,970 --> 00:09:35,770
That means every time the for each is executed, the element that is this value is passed to element

143
00:09:35,770 --> 00:09:36,040
here.

144
00:09:36,400 --> 00:09:40,570
And if you want to refer the index number that is also passed.

145
00:09:41,020 --> 00:09:47,230
So every time the loop is executed, the element is parsed in first parameter.

146
00:09:47,350 --> 00:09:52,780
And if you have return index, let's say right index here, then the index is parsed here.

147
00:09:53,350 --> 00:09:57,520
We can illustrated like this that this value is passed here.

148
00:09:57,520 --> 00:10:05,080
Every time an index passed here, let's try to display both the values, I'll say console.log element

149
00:10:05,560 --> 00:10:08,440
and also the index number I want to display.

150
00:10:09,790 --> 00:10:12,550
Let's loop through the edit now let's see the output.

151
00:10:13,300 --> 00:10:17,410
As you see that we have both the element and index number return.

152
00:10:17,680 --> 00:10:24,010
In fact, it also takes two more arguments adding on which the four each is called.

153
00:10:24,370 --> 00:10:29,260
And this argument which is a dis for the callback function.

154
00:10:29,410 --> 00:10:34,600
But now when you add using arrow function, this will not refer to itself.

155
00:10:34,600 --> 00:10:34,870
Right?

156
00:10:34,870 --> 00:10:37,750
So you have to take care of which function you are using.

157
00:10:37,750 --> 00:10:40,720
You are going with the traditional function or arrow function.

158
00:10:41,020 --> 00:10:46,870
So it does matter with this argument for each cannot be stubbed in between.

159
00:10:46,960 --> 00:10:48,280
Like you break the loop.

160
00:10:48,460 --> 00:10:55,570
So if you have a situation where you want to come out of a loop in between, then for each is in the

161
00:10:55,570 --> 00:10:56,740
matter you should use.

162
00:10:57,580 --> 00:11:00,100
Now let's discuss related questions of this topic.

163
00:11:00,370 --> 00:11:05,620
The first question is what is the difference between far in and far off?

164
00:11:05,800 --> 00:11:11,590
We have already seen that far in will display the index, whereas far off will refer the value.

165
00:11:14,510 --> 00:11:17,600
What will be the output of the below code?

166
00:11:18,920 --> 00:11:23,540
Now see, as I mentioned earlier, you cannot break the for each loop.

167
00:11:23,570 --> 00:11:25,660
It's going to go through the entire ADI.

168
00:11:25,760 --> 00:11:30,260
So when you say index is equal to two, for example, then I want to come out.

169
00:11:30,470 --> 00:11:33,920
If you say break statement, it is going to give you an error.

170
00:11:34,130 --> 00:11:35,090
Let's try this here.

171
00:11:35,090 --> 00:11:40,520
I'll simply say if index is equal to two, then what happens?

172
00:11:40,520 --> 00:11:41,450
I want to come out.

173
00:11:41,570 --> 00:11:43,100
That's what my wish is.

174
00:11:43,580 --> 00:11:45,380
But it's not going to happen.

175
00:11:45,560 --> 00:11:45,850
Right.

176
00:11:45,860 --> 00:11:47,300
It gives you the error.

177
00:11:47,390 --> 00:11:48,140
It won't work.

178
00:11:48,170 --> 00:11:49,070
It's illegal.

179
00:11:49,070 --> 00:11:50,090
Break statement.

180
00:11:50,930 --> 00:11:55,040
The third question is what will be the output off below statements?

181
00:11:55,280 --> 00:12:02,720
So in this case, what are we trying to display is added or lended that is added off three because added

182
00:12:02,720 --> 00:12:05,660
or length will return three because there are three elements.

183
00:12:05,810 --> 00:12:13,370
This will display undefined because there is no such thing our array of three because we have zero one

184
00:12:13,370 --> 00:12:16,310
and two because index starts with zero.

185
00:12:16,700 --> 00:12:21,260
So if this code is run, then it's going to say undefined.

186
00:12:21,530 --> 00:12:27,830
So we have discussed various possibilities and questions of looping through the ADI in JavaScript.

187
00:12:27,950 --> 00:12:29,060
Next questions.

188
00:12:29,360 --> 00:12:33,170
We are going to deal with more advanced topics of ADI.

