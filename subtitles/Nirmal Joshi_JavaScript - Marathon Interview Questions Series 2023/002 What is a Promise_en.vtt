WEBVTT
1
00:00:00.120 --> 00:00:02.700
Now the question is what is a promise?

2
00:00:03.150 --> 00:00:09.630
The categories, of course, asynchronous JavaScript and there will be five related questions as discussed

3
00:00:09.630 --> 00:00:10.740
in the previous section.

4
00:00:10.770 --> 00:00:17.430
Callback functions are used when there is an asynchronous process, but when there are multilevel functions,

5
00:00:17.430 --> 00:00:18.720
it's a hell of a job.

6
00:00:18.870 --> 00:00:25.080
And that's why it's callback hell, our pyramid of Doom, which we saw in the previous section.

7
00:00:25.200 --> 00:00:29.370
And to save you from this hell, the promise object is invented.

8
00:00:29.580 --> 00:00:36.780
So in a very simple language, promise object is a better way to write those callback processes.

9
00:00:36.780 --> 00:00:43.710
And the best way to know this is by converting or rather refactoring the code we wrote in a callback

10
00:00:43.710 --> 00:00:45.810
function with a promise.

11
00:00:45.930 --> 00:00:52.080
But before we do that, let's get clear with the very basic syntax of the object promise.

12
00:00:52.230 --> 00:00:58.020
I'm opening the browser here and we try a few lines to understand the syntax.

13
00:00:58.020 --> 00:00:59.460
How do we write a promise?

14
00:00:59.610 --> 00:01:04.560
When I say promise, that is capital B, it's an object given by JavaScript.

15
00:01:04.560 --> 00:01:09.240
And we instantiate the promise by saying that I want to create a new promise.

16
00:01:09.240 --> 00:01:12.900
Also, I'm going to create an object, let's say name it PR.

17
00:01:13.050 --> 00:01:15.780
So I'll say like PR is equal to new promise.

18
00:01:15.780 --> 00:01:21.690
The constructor of Promise takes one callback function, which has two parameters.

19
00:01:21.780 --> 00:01:25.710
Let me first of all type the code without understanding anything.

20
00:01:25.710 --> 00:01:28.830
We just try to display the value of PR.

21
00:01:29.040 --> 00:01:31.860
PR is an instance of promise.

22
00:01:32.160 --> 00:01:38.220
The function which we give as a callback function in the constructor of Promise has two parameters.

23
00:01:38.220 --> 00:01:44.760
The first parameter refers to the results state and the second is the reject state.

24
00:01:44.970 --> 00:01:45.960
I'm coming to that.

25
00:01:46.200 --> 00:01:47.700
What is result and reject?

26
00:01:47.700 --> 00:01:52.320
But at the moment let me just run and see what is the output of PR.

27
00:01:54.770 --> 00:02:00.920
As you see that the object is displayed and that is a state displayed seeing pending.

28
00:02:01.160 --> 00:02:03.650
Let me expand and see what does it display?

29
00:02:03.680 --> 00:02:06.980
It displays that it's an object of type promise.

30
00:02:07.010 --> 00:02:09.650
The promise status is pending.

31
00:02:09.919 --> 00:02:17.690
This shows that by default, when you create a promise that is always a pending state or pending status.

32
00:02:17.840 --> 00:02:21.890
Ideally, when you think of a promise, it looks something like this.

33
00:02:22.040 --> 00:02:27.320
The promise object which you create will have by default, a pending status.

34
00:02:27.530 --> 00:02:34.190
So when there is a code inside a promise which let's say has done the job successfully, then you will

35
00:02:34.280 --> 00:02:35.930
return the results state.

36
00:02:36.050 --> 00:02:42.530
And if it is fail, if the job is fail or there is a failure, then you can return it with reject.

37
00:02:42.740 --> 00:02:48.740
So in case if it is resolved or reject, there will be a further process you want to execute, which

38
00:02:48.740 --> 00:02:50.720
you can write with then.

39
00:02:50.840 --> 00:02:56.780
DSG And then sometimes we do call that promises are --.

40
00:02:56.900 --> 00:03:04.460
So when you say that enable, it means you can write a chain of then statement and you can deal with

41
00:03:04.460 --> 00:03:07.820
various steps of a process which is taking time.

42
00:03:07.850 --> 00:03:14.960
What I mean to say is you will be dealing with multiple asynchronous processes with multiple thens,

43
00:03:14.960 --> 00:03:16.370
which you see in this figure.

44
00:03:16.580 --> 00:03:19.550
You see here right now, the status is pending.

45
00:03:20.030 --> 00:03:23.570
Now, let me just say that I resolved the returned value.

46
00:03:23.600 --> 00:03:28.500
I just see that after some job which we will add at the moment, we will add a few lines here.

47
00:03:28.520 --> 00:03:30.170
For example, there are statements.

48
00:03:30.350 --> 00:03:30.650
Right.

49
00:03:30.650 --> 00:03:35.430
And then eventually when the job is done successfully, we will say resolve.

50
00:03:35.750 --> 00:03:37.450
Let's run this and see what happens.

51
00:03:39.800 --> 00:03:42.070
Now the state is resolved.

52
00:03:42.080 --> 00:03:43.850
It is not pending anymore.

53
00:03:44.010 --> 00:03:48.980
Even if I expand this, you see, it says that the promise status is resolved.

54
00:03:49.220 --> 00:03:54.920
Don't worry about this pending resolved and reject the moment we convert the callback function code

55
00:03:54.920 --> 00:03:56.030
with promises.

56
00:03:56.030 --> 00:03:58.790
You will get the clear idea how it is done.

57
00:03:59.000 --> 00:04:03.800
But at the moment resolve is actually resolving the status.

58
00:04:03.950 --> 00:04:05.930
Now here it is undefined.

59
00:04:05.930 --> 00:04:08.860
In fact, this is actually the message which you want to pass.

60
00:04:08.870 --> 00:04:12.760
Like in our case, we can have data as well that we will see in a moment.

61
00:04:12.770 --> 00:04:19.700
But right now, let me just give a message that it is successful or may be data processed.

62
00:04:20.089 --> 00:04:20.630
That's it.

63
00:04:21.140 --> 00:04:26.510
And now if I run this, let me clear this again and run it so that we get the clear idea.

64
00:04:26.690 --> 00:04:31.460
Now you see that that is a state result and it says that data processed.

65
00:04:31.670 --> 00:04:37.970
So if I expand here, you see that the state is resolved and the promised value which we actually returned

66
00:04:37.970 --> 00:04:40.400
with a result that is retrieved here.

67
00:04:40.790 --> 00:04:43.700
Right now I'm not giving any then statement.

68
00:04:43.850 --> 00:04:44.180
Right.

69
00:04:44.390 --> 00:04:50.480
We are just trying to see how we create the object of promise and what is the behavior of a promise.

70
00:04:50.750 --> 00:04:54.170
Now, instead of resolve, you can certainly say.

71
00:04:55.120 --> 00:04:55.750
Reject.

72
00:04:56.200 --> 00:05:02.950
If you do that in case of failure, you may have a reject statement as you see that now because it is

73
00:05:03.130 --> 00:05:03.730
reject.

74
00:05:03.880 --> 00:05:04.240
Right.

75
00:05:04.450 --> 00:05:06.370
That is an error also generated.

76
00:05:08.520 --> 00:05:12.210
And we have the state as rejected.

77
00:05:12.480 --> 00:05:18.060
We do handle areas also with promises that also we are going to see in just a few moments.

78
00:05:18.360 --> 00:05:21.630
So this is the basic syntax of dealing with the promise.

79
00:05:21.960 --> 00:05:23.940
In short, when there is a success.

80
00:05:24.180 --> 00:05:27.510
You're done resolve and you return failure.

81
00:05:27.540 --> 00:05:34.620
You actually use the reject, which actually updates the state as resolved or rejected.

82
00:05:34.920 --> 00:05:38.640
Now let's see the syntax of promises in detail as well.

83
00:05:38.820 --> 00:05:41.550
Let's try to create an object with a promise.

84
00:05:42.120 --> 00:05:45.390
So I'll say let PR is equal to new promise.

85
00:05:45.840 --> 00:05:51.420
This has a callback function which we have already seen, where we further have two more functions resolve

86
00:05:51.420 --> 00:05:52.080
and reject.

87
00:05:52.110 --> 00:05:54.300
Mind you that this result and reject.

88
00:05:54.390 --> 00:05:58.440
Nowadays we don't use because we already have async await.

89
00:05:58.590 --> 00:06:01.350
That will be our discussion in few of the next sections.

90
00:06:01.560 --> 00:06:06.350
Let's say just resolve it, which we have seen that we resolve with a message.

91
00:06:06.360 --> 00:06:09.750
For example, I give success message just like this.

92
00:06:09.960 --> 00:06:16.380
Now, to deal with this promise, how do we actually write our how do we change the promise with the

93
00:06:16.380 --> 00:06:17.820
then method?

94
00:06:18.030 --> 00:06:20.040
So we write like this we are not.

95
00:06:20.040 --> 00:06:22.320
Then this also has a callback function.

96
00:06:22.320 --> 00:06:25.680
So I'll just write the message we want to display.

97
00:06:26.460 --> 00:06:28.330
Let's say the message.

98
00:06:28.560 --> 00:06:36.930
So when this result is called, it sends the data, this result data to this MSG variable which we can

99
00:06:36.930 --> 00:06:37.370
display.

100
00:06:37.380 --> 00:06:41.070
So I'll say console.log and I want to display the MSG.

101
00:06:41.100 --> 00:06:48.180
Now when it comes to error handling, we write catch along with then remember we can have more downs

102
00:06:48.180 --> 00:06:48.720
like this.

103
00:06:48.720 --> 00:06:50.040
We will see that later on.

104
00:06:50.220 --> 00:06:56.490
But right now, to deal with our handler, you can write a catch here, which again has a callback function.

105
00:06:56.670 --> 00:06:59.490
And inside of this let's display console.log.

106
00:06:59.660 --> 00:07:06.120
Edit That is also one more option with a promise and that is finally, finally does have a callback

107
00:07:06.120 --> 00:07:09.840
function, but it doesn't have any parameter within that callback function.

108
00:07:09.840 --> 00:07:10.740
Like in success.

109
00:07:10.740 --> 00:07:14.190
We have the message, in the catch, we have the adder.

110
00:07:14.430 --> 00:07:17.210
But then finally we don't have anything right.

111
00:07:17.220 --> 00:07:24.120
It's just that when the promise is executed, when the entire job is done, whether it is resolved or

112
00:07:24.120 --> 00:07:29.700
rejected at the end, if you still have some process to execute, you put it in the final section.

113
00:07:29.880 --> 00:07:32.040
So let me also have a console.log here.

114
00:07:32.280 --> 00:07:36.600
So I'll say console.log and the finishing process you can write here.

115
00:07:36.600 --> 00:07:38.610
So I'll say finishing process, that's it.

116
00:07:38.760 --> 00:07:43.170
Now let's try to execute this and see how does it behave.

117
00:07:43.590 --> 00:07:46.110
I'll say note the callback dodges.

118
00:07:47.370 --> 00:07:53.570
So when I say resolve it called back this line that is console.log, right?

119
00:07:53.910 --> 00:07:59.460
Instead of this, if I have to rejected this in some case, let's say, and I display the message here

120
00:07:59.490 --> 00:08:05.790
saying that this is the error right now, if I run, you see the error is displayed.

121
00:08:06.180 --> 00:08:09.660
So this error is actually the catch section execution.

122
00:08:09.660 --> 00:08:14.400
Let me just add one more string here, which shows that this is the error part.

123
00:08:14.700 --> 00:08:17.330
I'll just join this and run it again.

124
00:08:18.680 --> 00:08:22.460
So now you see this ad and it doesn't display the actual message.

125
00:08:22.670 --> 00:08:26.300
It displays the object, in fact, and finally is executed.

126
00:08:26.510 --> 00:08:28.550
So the finishing process is displayed.

127
00:08:28.790 --> 00:08:32.179
But this process is actually not an asynchronous process.

128
00:08:32.270 --> 00:08:32.580
Right.

129
00:08:32.600 --> 00:08:34.350
So let's put a set timeout here.

130
00:08:34.370 --> 00:08:36.080
I can say set timeout.

131
00:08:37.030 --> 00:08:42.880
I'll put a callback function with set timeout and let's see whether it is going to be resolved or rejected.

132
00:08:42.880 --> 00:08:51.370
But after 2000 milliseconds, let's resolve and we see success or maybe some message, let's say data.

133
00:08:51.640 --> 00:08:57.010
Now, if we ran this after 2 seconds, you will get the message.

134
00:08:57.130 --> 00:08:59.900
So this is a common syntax of writing a promise.

135
00:08:59.920 --> 00:09:04.510
At the moment we have configured the object PR and are handling the promise.

136
00:09:04.660 --> 00:09:10.370
It might also happen that you have a function which has an asynchronous process.

137
00:09:10.390 --> 00:09:17.230
Then you can return a promise and the function which returns a promise is also tenable.

138
00:09:17.500 --> 00:09:23.710
That means right now we have a return then with the PR object, which is actually of type promise.

139
00:09:23.770 --> 00:09:27.940
But if we have a function then that also becomes tenable.

140
00:09:28.330 --> 00:09:32.890
We already had the square function we defined with callback function.

141
00:09:33.040 --> 00:09:38.430
Let's change the CSS you are that is custom squared function with this syntax.

142
00:09:38.440 --> 00:09:41.770
So this callback function gets converted to promise.

143
00:09:41.920 --> 00:09:46.540
This conversion is also called as promise ification or I am promising.

144
00:09:46.540 --> 00:09:48.790
Fine are promising phi.

145
00:09:48.790 --> 00:09:50.230
All these terms are related.

146
00:09:50.230 --> 00:09:54.230
So I'm converting the code of callback to promise the CSS.

147
00:09:54.260 --> 00:09:57.910
Q are we had let me write the same way as a c askew.

148
00:09:57.910 --> 00:10:01.540
R This takes for example, one parameter.

149
00:10:01.570 --> 00:10:04.510
It's an arrow function, so I'll put an equal to an arrow.

150
00:10:05.600 --> 00:10:05.930
Right.

151
00:10:05.930 --> 00:10:08.810
And this has the parameter E in it.

152
00:10:09.020 --> 00:10:16.280
Now, this which I have here, I'm going to cut this and paste it inside this function.

153
00:10:16.520 --> 00:10:23.510
Now what I want is instead of PR, I should write C as you are and I should pass the value here.

154
00:10:23.840 --> 00:10:24.170
Right?

155
00:10:24.170 --> 00:10:29.600
So it should return me the result I can say msg, but let me say it is a more meaningful variable.

156
00:10:29.840 --> 00:10:30.920
So that's the result here.

157
00:10:31.100 --> 00:10:31.610
That's it.

158
00:10:31.790 --> 00:10:33.260
Is it going to work or not?

159
00:10:33.500 --> 00:10:36.380
Let me run this and show you why it's not working.

160
00:10:37.660 --> 00:10:40.700
The addresses that cannot read property.

161
00:10:40.720 --> 00:10:48.190
Then it means that still this function is not tenable because by default a function cannot be tenable.

162
00:10:48.460 --> 00:10:49.720
When will it be tenable?

163
00:10:49.750 --> 00:10:52.870
When can I add the then or catch?

164
00:10:53.230 --> 00:10:56.890
When this function returns a promise.

165
00:10:56.920 --> 00:11:01.090
So now the only thing I have to write is it returns a promise.

166
00:11:01.090 --> 00:11:02.770
I'll say return buyer.

167
00:11:02.800 --> 00:11:03.310
That's it.

168
00:11:03.730 --> 00:11:08.860
Now let's try to run and see whether we get the desired output or not.

169
00:11:10.470 --> 00:11:14.100
2 seconds waiting and then the data is displayed.

170
00:11:14.400 --> 00:11:14.730
Right.

171
00:11:14.910 --> 00:11:19.140
Unfortunately, I'm not giving the square, so let me do that.

172
00:11:19.440 --> 00:11:23.370
I'll say eight into a that's the data we want, not the data stream.

173
00:11:23.550 --> 00:11:24.600
Let's run this again.

174
00:11:25.950 --> 00:11:28.460
2 seconds waiting and we have four.

175
00:11:28.470 --> 00:11:32.530
That is the squared off the value we passed using the promise.

176
00:11:32.550 --> 00:11:34.710
We can still improvise this code.

177
00:11:34.980 --> 00:11:37.500
I do not need this PR object.

178
00:11:37.500 --> 00:11:37.770
Right.

179
00:11:37.770 --> 00:11:40.770
I can simply say let's not write this.

180
00:11:40.980 --> 00:11:42.240
I'll say return.

181
00:11:42.240 --> 00:11:45.690
It is one and the same thing and I don't need this return statement.

182
00:11:45.690 --> 00:11:52.260
This is a more appropriate and lesser line code that you write written new promise and that does the

183
00:11:52.260 --> 00:11:52.560
job.

184
00:11:52.710 --> 00:11:55.230
Let me run it again to show that there is no change.

185
00:11:55.530 --> 00:11:57.210
To make sure that it's a new code.

186
00:11:57.330 --> 00:11:58.620
I'll just change this value.

187
00:11:59.730 --> 00:12:00.930
And run it again.

188
00:12:03.730 --> 00:12:10.690
So we have nine here, which shows that it is perfectly configured in the same way we can change the

189
00:12:10.690 --> 00:12:16.090
code which we had which was fetching the data and displaying the data.

190
00:12:16.090 --> 00:12:16.370
Right.

191
00:12:16.390 --> 00:12:19.930
We converted that code into callback function earlier.

192
00:12:20.110 --> 00:12:26.260
Let's promise ify that fetch data and display data code with promise.

193
00:12:26.500 --> 00:12:29.050
So this is the code of callback, right?

194
00:12:29.080 --> 00:12:32.860
Let's run this once to make sure that everything is fine.

195
00:12:33.820 --> 00:12:38.800
So the program starts, the data is retrieved, and then the program ends because we had that callback

196
00:12:38.800 --> 00:12:39.250
function.

197
00:12:39.460 --> 00:12:45.340
Now, if we have to convert the score into promise, then the fetch data should return a promise.

198
00:12:45.340 --> 00:12:48.430
So certainly you can write an object.

199
00:12:48.430 --> 00:12:52.450
PR is equal to new promise and at the end you return this PR.

200
00:12:52.780 --> 00:12:58.450
But we have already seen that instead of writing this way, I can directly see that you written a new

201
00:12:58.450 --> 00:12:59.170
promise, right?

202
00:12:59.170 --> 00:13:01.000
So this I'm sure you are clear with.

203
00:13:01.600 --> 00:13:03.640
So I will have a callback function in it.

204
00:13:04.150 --> 00:13:06.940
And this said time out code.

205
00:13:07.180 --> 00:13:10.750
I'm simply shifting to this return statement.

206
00:13:12.620 --> 00:13:19.100
All right, so now this function is returning a promise which we need to configure it then.

207
00:13:19.310 --> 00:13:22.250
So now the fetch data will be called.

208
00:13:22.490 --> 00:13:27.800
And then we attach that, then matter with it, which will have a callback function.

209
00:13:30.970 --> 00:13:32.620
Let me also say resolve here.

210
00:13:34.220 --> 00:13:35.150
And reject.

211
00:13:35.930 --> 00:13:40.560
And when it is supposed to return something, I'll say resolve the data.

212
00:13:40.910 --> 00:13:46.700
So the data which we are passing is, let's say, retrieved here on this place.

213
00:13:47.180 --> 00:13:54.170
Now, this console log data I can put here because I want to display we don't need this function anymore.

214
00:13:54.170 --> 00:13:59.300
But there's see this line which we wrote earlier, which is executed at the end.

215
00:13:59.720 --> 00:14:05.780
Certainly I can see not catch, which will have again a similar syntax.

216
00:14:07.100 --> 00:14:09.290
And this will also have finally.

217
00:14:10.400 --> 00:14:15.820
And inside, finally, you can put this line, the last line.

218
00:14:15.830 --> 00:14:21.740
So this is something a kind of process which is executed at the end of the job.

219
00:14:21.740 --> 00:14:24.170
Whether it is successful or failure doesn't matter.

220
00:14:24.680 --> 00:14:26.870
Here in the catch we'll have the added object.

221
00:14:27.380 --> 00:14:28.940
So you display the add it.

222
00:14:29.150 --> 00:14:31.610
So I'll say console.log and add it.

223
00:14:32.060 --> 00:14:35.810
So now this function fetch data returns a promise, right?

224
00:14:35.810 --> 00:14:37.460
And it results with this data.

225
00:14:37.760 --> 00:14:42.770
And that data should be retrieved here and it should be displayed in case if there is any rejection,

226
00:14:43.520 --> 00:14:45.050
which is always conditional.

227
00:14:45.050 --> 00:14:50.270
Right now we are using result itself, but there might be a condition and on that you reject.

228
00:14:50.450 --> 00:14:58.040
So that will be retrieved here the rejected data and finally something which is getting executed.

229
00:14:58.040 --> 00:14:59.630
So now we have configured this.

230
00:15:00.140 --> 00:15:00.830
Now let's run.

231
00:15:04.890 --> 00:15:10.590
Now we have the same code written like this where we have the fetch data and which is returning the

232
00:15:10.590 --> 00:15:14.070
promise and it handles the asynchronous process.

233
00:15:14.520 --> 00:15:18.060
Let's go back to square function now in the callback section.

234
00:15:18.120 --> 00:15:25.260
We did see that if you have multiple processes, let's say this was the callback function where we were

235
00:15:25.260 --> 00:15:32.820
trying to find square of two and then whatever result we receive it is further squared and that can

236
00:15:32.820 --> 00:15:34.020
go on and on.

237
00:15:34.140 --> 00:15:36.990
So this is a multiple process we are doing right.

238
00:15:36.990 --> 00:15:41.430
One process, one asynchronous process does return a result.

239
00:15:41.730 --> 00:15:44.640
Then you go on the next asynchronous process.

240
00:15:44.820 --> 00:15:48.570
It again returns a result and you keep on adding this.

241
00:15:48.630 --> 00:15:51.990
The similar thing if you have to implement with promise.

242
00:15:52.350 --> 00:15:59.760
Then one way is that after the result is returned here you write this entire process like this finally

243
00:15:59.760 --> 00:16:00.300
and everything.

244
00:16:00.300 --> 00:16:06.240
For example, finally, not necessarily you write every time, but catch is something which you always

245
00:16:06.420 --> 00:16:06.900
right.

246
00:16:07.280 --> 00:16:14.580
Now, if you have more lines like this, let's say the result which we retrieved here that we are passing,

247
00:16:15.360 --> 00:16:15.690
right?

248
00:16:15.690 --> 00:16:22.020
So now after every 2 seconds, we should get the next square, right?

249
00:16:22.020 --> 00:16:25.440
So I can remove finally so that it doesn't confuse you a lot.

250
00:16:25.890 --> 00:16:30.480
I am being I am removing finally for the inner function, at least not for the outer promise.

251
00:16:30.750 --> 00:16:37.800
So now we have the first execution that will be executed and will return the result, and that will

252
00:16:37.800 --> 00:16:39.660
be retrieved here in this case.

253
00:16:39.750 --> 00:16:42.090
Let's run and see what is the output.

254
00:16:44.980 --> 00:16:46.240
The first value passed.

255
00:16:46.330 --> 00:16:51.760
It says that success and for the second promise in promise is executed.

256
00:16:51.910 --> 00:16:53.680
And then it says 16.

257
00:16:53.950 --> 00:16:55.720
But this is very clumsy.

258
00:16:55.720 --> 00:16:59.560
This code is not something which you would be comfortable with.

259
00:16:59.830 --> 00:17:03.460
So promise gives you a choice where you can change.

260
00:17:03.730 --> 00:17:06.400
So changing the promise is very important.

261
00:17:06.880 --> 00:17:07.839
How will you do that?

262
00:17:08.109 --> 00:17:08.980
Let's try that.

263
00:17:09.400 --> 00:17:11.859
I'm rewriting the entire thing, so I'll say.

264
00:17:12.240 --> 00:17:15.579
See, Scott, the two is supposed to be passed.

265
00:17:16.480 --> 00:17:18.819
Then you do have that function.

266
00:17:19.630 --> 00:17:21.220
And here you will get the result.

267
00:17:21.670 --> 00:17:21.970
Right.

268
00:17:21.970 --> 00:17:26.589
So inside this you will write console.log result.

269
00:17:27.190 --> 00:17:29.620
Now I want to change this further.

270
00:17:29.620 --> 00:17:30.970
So I'll say out then.

271
00:17:31.850 --> 00:17:32.170
Right.

272
00:17:32.450 --> 00:17:38.930
The next result which is passed that I want inside this so I might say result one.

273
00:17:38.930 --> 00:17:44.570
So I'll get a result one here, let's say console.log and I want to display the result one.

274
00:17:45.650 --> 00:17:45.950
Here.

275
00:17:47.540 --> 00:17:53.570
And at the end I have the sketch which will just display the error if that is any.

276
00:17:53.570 --> 00:17:57.800
So I'll say edit and console.log.

277
00:17:59.090 --> 00:18:00.480
Edit That's it.

278
00:18:00.530 --> 00:18:04.090
This is a proper way of changing the promise.

279
00:18:04.370 --> 00:18:06.860
So the earlier syntax was very complicated.

280
00:18:06.980 --> 00:18:08.240
But this one is not.

281
00:18:08.330 --> 00:18:10.070
But this will not work as well.

282
00:18:10.370 --> 00:18:10.790
Why?

283
00:18:11.120 --> 00:18:12.080
Let me discuss that.

284
00:18:12.080 --> 00:18:14.960
But first we execute it and see what is the output.

285
00:18:17.110 --> 00:18:20.380
So after 2 seconds, it did execute under Don Ford.

286
00:18:20.590 --> 00:18:24.190
But for the next promise, it did not give us the result.

287
00:18:24.790 --> 00:18:32.230
The reason is that we need to return the promise from this then as well, because you want to move ahead,

288
00:18:32.470 --> 00:18:36.970
you want to have a next goal of see as you are with this result.

289
00:18:37.420 --> 00:18:38.470
So what will you do?

290
00:18:38.560 --> 00:18:43.330
You will simply call this return the c QR.

291
00:18:43.750 --> 00:18:48.190
And here you are going to pass the result which you have retrieved in this first, then.

292
00:18:48.430 --> 00:18:50.410
So this will return the promise.

293
00:18:50.770 --> 00:18:53.920
And further it is going to change with this.

294
00:18:53.930 --> 00:18:57.340
Then let's run this and see how does it execute.

295
00:19:00.140 --> 00:19:00.950
We have four.

296
00:19:02.260 --> 00:19:03.120
And 16.

297
00:19:03.400 --> 00:19:10.600
So now you can properly chain this if you, let's say, want to add one more then then certainly you

298
00:19:10.600 --> 00:19:13.930
will say return the you are in chart.

299
00:19:14.170 --> 00:19:20.950
Every then should return a promise when you are changing the promise with multiple processes to make

300
00:19:20.950 --> 00:19:23.920
sure that you always write a return with her promise.

301
00:19:24.400 --> 00:19:27.700
So this is all about the basics of promise.

302
00:19:27.700 --> 00:19:29.470
And we have seen that.

303
00:19:29.470 --> 00:19:31.630
How do we return a promise?

304
00:19:31.780 --> 00:19:34.930
How do we convert the callback function to promise?

305
00:19:35.080 --> 00:19:41.020
And we have also seen that how do we chain the promise in a proper way?

306
00:19:41.320 --> 00:19:44.140
Let's discuss related questions of this topic.

307
00:19:44.320 --> 00:19:50.950
The first question is How will you configure a process which should be executed at the end of promise

308
00:19:50.950 --> 00:19:52.900
after a result or reject?

309
00:19:53.350 --> 00:19:54.970
So here you can use the finally.

310
00:19:55.150 --> 00:20:00.700
Putting the code in the final section will make sure that whether the promise is result or reject,

311
00:20:00.880 --> 00:20:03.130
but it does execute at the end.

312
00:20:05.740 --> 00:20:08.440
Second question, what is gaining the promise?

313
00:20:08.470 --> 00:20:09.880
Explain the syntax.

314
00:20:10.240 --> 00:20:16.870
This we have already seen that when it comes to chaining, we do not keep on writing multiple promises

315
00:20:16.870 --> 00:20:24.250
in a nested pattern, but instead we make sure that we return a promise inside every then so the next

316
00:20:24.250 --> 00:20:26.430
gen will be executed properly.

317
00:20:28.820 --> 00:20:32.450
The third question is what will be the output of the given goal?

318
00:20:32.690 --> 00:20:37.010
Now, discord does have a promise and there are two result statements.

319
00:20:37.430 --> 00:20:40.310
It is also changed with two dens here.

320
00:20:40.520 --> 00:20:46.940
So if you are thinking that first result will be for this and the second result will be for the set

321
00:20:46.940 --> 00:20:47.450
timeout.

322
00:20:47.660 --> 00:20:48.800
That won't happen.

323
00:20:48.890 --> 00:20:51.860
Result or reject is like a written statement.

324
00:20:51.980 --> 00:20:59.360
So once it is executed, even if you have more lines after result or reject, those are never executed.

325
00:20:59.540 --> 00:21:05.380
So this will only return the result with data over and that does the job.

326
00:21:05.390 --> 00:21:09.550
So it will wait for 2 seconds, but it will not resolve with this.

327
00:21:09.590 --> 00:21:12.510
It will just resolve with the over message.

328
00:21:12.530 --> 00:21:17.570
Let's save this and try executing it to get the clear idea.

329
00:21:17.750 --> 00:21:18.110
You see.

330
00:21:18.350 --> 00:21:19.880
Two times over is displayed.

331
00:21:20.150 --> 00:21:20.840
2 seconds.

332
00:21:20.840 --> 00:21:22.310
It waited and it came out.

333
00:21:22.580 --> 00:21:29.600
The reason is that once you have the result statement executed, it doesn't proceed further with any

334
00:21:29.600 --> 00:21:34.100
more results or rejects unless they are put in different if conditions.

335
00:21:34.580 --> 00:21:38.840
The fourth question is what is the status of promise by default?

336
00:21:38.870 --> 00:21:45.940
We already saw earlier that when you have the object created with promise, it has the pending status.

337
00:21:45.950 --> 00:21:48.260
That is the binding state by default.

338
00:21:50.570 --> 00:21:55.750
Fifth question is what will be the status of promise when results are rejected?

339
00:21:55.760 --> 00:22:01.700
In case of resolved and dejected, it will have a status fulfilled or rejected.

