WEBVTT
1
00:00:00.090 --> 00:00:08.520
We have seen quantify us in a simple way, but sometimes qualifiers can be greedy like few greedy people

2
00:00:08.940 --> 00:00:10.410
to see the greediness.

3
00:00:10.440 --> 00:00:12.540
We will begin with a small example.

4
00:00:12.990 --> 00:00:16.590
Imagine that I want to display a string with codes.

5
00:00:17.250 --> 00:00:18.630
Let's check the code.

6
00:00:19.260 --> 00:00:20.630
I'll declare a variable.

7
00:00:20.640 --> 00:00:22.530
Let str is equal to.

8
00:00:23.920 --> 00:00:25.000
JavaScript.

9
00:00:25.860 --> 00:00:29.700
S6 and S7 is not new anymore.

10
00:00:30.500 --> 00:00:35.750
Here I am trying to show both S6 and S7 with single coats.

11
00:00:36.600 --> 00:00:37.860
Let's run the code.

12
00:00:39.310 --> 00:00:45.440
So the output shows two values in the string, which are included in single codes.

13
00:00:45.460 --> 00:00:51.100
Now assume that we want to get all the words covered in codes.

14
00:00:51.100 --> 00:00:56.260
So the pattern for that you can think can be single code.

15
00:00:56.290 --> 00:01:03.400
Then one or more characters that is dot and plus, and then a single code at the end.

16
00:01:03.730 --> 00:01:06.070
Let's use the match method and try it.

17
00:01:06.070 --> 00:01:06.910
Practically.

18
00:01:06.910 --> 00:01:08.650
I'll define the pattern here.

19
00:01:09.100 --> 00:01:14.500
Let pattern is equal to single code dot plus a code.

20
00:01:14.500 --> 00:01:17.770
And of course we need the global modifier.

21
00:01:18.600 --> 00:01:19.860
Let's run the code.

22
00:01:23.060 --> 00:01:31.010
As you can see in the output, instead of returning S6 and S7 as two different values, it has returned

23
00:01:31.010 --> 00:01:39.740
only one value that is is six and is seven, including the world end in the result.

24
00:01:40.600 --> 00:01:42.290
So what has happened here?

25
00:01:42.310 --> 00:01:45.640
The search starts with the zero eight position.

26
00:01:46.090 --> 00:01:53.080
Now, when it finds the first single code, then the first condition is matched and it has to find the

27
00:01:53.080 --> 00:01:54.310
end single code.

28
00:01:54.700 --> 00:01:59.770
So it includes all the values till the very last single code is found.

29
00:02:00.190 --> 00:02:02.030
It means the plus.

30
00:02:02.050 --> 00:02:08.440
Quantifier is greedy to include everything unless it finds the last single code.

31
00:02:08.830 --> 00:02:18.040
In such a case, it includes E as six, space, E as seven, and then it finds the last single code.

32
00:02:18.430 --> 00:02:21.790
In fact, the search will go till the last character.

33
00:02:21.790 --> 00:02:26.500
But the one found as the last is the end of search pattern.

34
00:02:26.500 --> 00:02:35.410
Because there are no more codes, does it returns the single value and we do not get our desired output.

35
00:02:36.230 --> 00:02:39.680
This is called the greedy nature of the quantifier.

36
00:02:39.680 --> 00:02:47.720
And to avoid this, you just have to put a question mark after the plus quantifier to notify that don't

37
00:02:47.720 --> 00:02:52.910
be greedy, be happy with the immediate character you found in the result.

38
00:02:53.600 --> 00:02:58.610
And we will begin the new search next time we find a similar pattern.

39
00:02:59.340 --> 00:03:04.110
So let's put a question mark after the quantifier and see the output.

40
00:03:07.590 --> 00:03:11.670
Now you see that we get two values as a result here.

41
00:03:11.670 --> 00:03:16.530
Also, it starts from first position and the search proceeds.

42
00:03:16.530 --> 00:03:22.410
But as soon as it finds the next single code, the value is returned as a first result.

43
00:03:22.410 --> 00:03:28.020
Then it proceeds further with the string and returns the second value in a similar way.

44
00:03:28.050 --> 00:03:34.980
The use of question mark makes quantifier lazy, so it is called lazy quantifier.

45
00:03:35.610 --> 00:03:41.190
So this is the difference between greedy and lazy or non greedy quantifier.

