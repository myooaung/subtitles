WEBVTT
1
00:00:00.090 --> 00:00:06.930
In this exercise, we will create a function which checks whether the past string is palindrome or not.

2
00:00:07.140 --> 00:00:09.990
The function will return true or false.

3
00:00:10.670 --> 00:00:11.570
A palindrome.

4
00:00:11.570 --> 00:00:20.090
Word or string is a sequence of characters, which is the same if you read it from left to right or

5
00:00:20.090 --> 00:00:21.260
right to left.

6
00:00:21.940 --> 00:00:34.720
For example, Madam is palindrome because you read this from any side it is made a m only learn regex

7
00:00:34.720 --> 00:00:43.540
is not palindrome as it isn't the same When you read it from right to left, you must note that upper

8
00:00:43.540 --> 00:00:51.370
or lowercase punctuations, symbols or spaces are not considered while reading.

9
00:00:52.020 --> 00:00:58.570
For example, a man comma, a plan, comma, a channel, full stop.

10
00:00:58.590 --> 00:01:07.620
Panama is also palindrome because if I go from right to left, it is still the same.

11
00:01:07.620 --> 00:01:11.520
That is a man, a plan, a canal, Panama.

12
00:01:11.700 --> 00:01:19.470
So here this string is palindrome because the spaces, the comma, the period that is the full stop

13
00:01:19.470 --> 00:01:20.820
is not considered.

14
00:01:20.820 --> 00:01:23.660
While you check whether it is palindrome or not.

15
00:01:23.670 --> 00:01:26.180
For example, never or.

16
00:01:26.180 --> 00:01:27.330
Or even.

17
00:01:28.030 --> 00:01:36.130
Is also palindrome in that case, because we do not consider these spaces in between when we read from

18
00:01:36.130 --> 00:01:38.860
left to right or right to left.

19
00:01:38.860 --> 00:01:43.240
So it's easy to check by converting the reverse of the string as such.

20
00:01:43.570 --> 00:01:48.010
Then why am I discussing this exercise in the regex topic?

21
00:01:48.040 --> 00:01:57.460
The reason is you will use regular expression to remove or ignore symbols, punctuations, spaces and

22
00:01:57.460 --> 00:02:02.040
the conversion of case that is uppercase or lowercase.

23
00:02:02.050 --> 00:02:04.780
At least it's the easiest way.

24
00:02:04.810 --> 00:02:11.740
Though there are multiple ways to achieve the same, so we will use the replace method to remove symbols,

25
00:02:11.830 --> 00:02:14.200
punctuations and spaces.

26
00:02:15.050 --> 00:02:19.090
Let's create a sample code just for that purpose.

27
00:02:19.100 --> 00:02:22.670
Then we will write the rest of the coding for palindrome.

28
00:02:22.880 --> 00:02:28.880
For example, I just have a string in which I will write a few words.

29
00:02:29.390 --> 00:02:30.410
Keeping a space.

30
00:02:30.410 --> 00:02:33.050
Also a number comma.

31
00:02:33.440 --> 00:02:33.950
Right.

32
00:02:34.680 --> 00:02:39.420
Few special characters like DOT an underscore as well.

33
00:02:39.690 --> 00:02:43.860
So this is the string I want to check whether it is palindrome or not.

34
00:02:43.860 --> 00:02:51.240
But before that we are going to apply the regex to remove the special characters, the punctuations

35
00:02:51.240 --> 00:02:52.310
and symbols.

36
00:02:52.320 --> 00:02:53.940
So I will create a pattern here.

37
00:02:53.940 --> 00:02:57.720
I'll say let pattern is equal to now.

38
00:02:57.720 --> 00:03:06.510
You can have a character class where you can say that other than Capital A to Z, small A to Z, 0 to

39
00:03:06.510 --> 00:03:14.880
9 underscore dot and dash other than these characters are invalid for this string.

40
00:03:15.060 --> 00:03:17.940
Let's try this first and see what is the output.

41
00:03:17.940 --> 00:03:20.670
I'll create new string here.

42
00:03:23.180 --> 00:03:25.400
I'll say, Stringer, replace.

43
00:03:25.790 --> 00:03:26.630
What I want.

44
00:03:26.660 --> 00:03:32.030
Is that the pattern will be applied on the string.

45
00:03:32.330 --> 00:03:38.420
And wherever this condition of pattern matches, that is, if there is something which is not between

46
00:03:38.420 --> 00:03:44.070
A to Z or these list items, then I want nothing in that place.

47
00:03:44.090 --> 00:03:47.900
Let's try to display the an str that is new string.

48
00:03:47.930 --> 00:03:49.980
Let's try to run this code.

49
00:03:50.000 --> 00:03:59.450
So now we have this an SDR where you do not see the space and the comma, but still there is a dot and

50
00:03:59.450 --> 00:04:00.920
that is an underscore.

51
00:04:01.070 --> 00:04:09.950
Instead of this, you do also have a character class called Capital W, which will do the very same

52
00:04:09.950 --> 00:04:10.520
thing.

53
00:04:11.670 --> 00:04:13.500
Let me run the code again.

54
00:04:14.490 --> 00:04:22.830
So now you see that there is no dot, no space, no comma, but underscore is left because slash W will

55
00:04:22.830 --> 00:04:25.310
not remove this underscore.

56
00:04:25.320 --> 00:04:28.650
So for that we can give a specific character itself.

57
00:04:28.650 --> 00:04:32.070
So I'll say that you do not want this underscore as well.

58
00:04:32.430 --> 00:04:35.070
Let's run this now and see what's the output.

59
00:04:35.610 --> 00:04:41.610
Now you can see that the string does not have any space, comma, dot or underscore.

60
00:04:41.610 --> 00:04:48.690
In short, the pattern which we have, which is an easier way to remove symbols and punctuations and

61
00:04:48.690 --> 00:04:50.100
spaces and whatnot.

62
00:04:50.280 --> 00:04:52.620
Now we are ready with the pattern.

63
00:04:52.620 --> 00:04:59.160
Next thing is we have to convert the string into either uppercase or lowercase.

64
00:04:59.610 --> 00:05:01.350
Let's go with lowercase.

65
00:05:01.350 --> 00:05:02.490
So I'll say two.

66
00:05:03.400 --> 00:05:04.720
Lowercase.

67
00:05:05.230 --> 00:05:11.050
So whatever string you're are going to retrieve will be in lowercase now.

68
00:05:11.050 --> 00:05:18.640
So it will be easy to compare because while comparing the palindrome, we do make sure that the cases

69
00:05:18.640 --> 00:05:20.410
are also not considered.

70
00:05:20.440 --> 00:05:24.530
The next thing is we want reverse of this nsdl.

71
00:05:24.550 --> 00:05:32.100
So let's say I create one more variable called r str that is reverse string is equal to what do I want?

72
00:05:32.110 --> 00:05:35.380
I want whatever value we have in an STR.

73
00:05:35.410 --> 00:05:37.900
I want to reverse that value.

74
00:05:38.080 --> 00:05:41.880
But mind you, if you run this code it will give an error.

75
00:05:41.890 --> 00:05:46.570
The reason is reverse does not work with a string directly.

76
00:05:47.140 --> 00:05:50.740
You see that when I run this let me go to console.

77
00:05:51.040 --> 00:05:53.620
It says that reverse is not a function.

78
00:05:53.620 --> 00:05:56.890
The reason is reverse works on an array.

79
00:05:57.310 --> 00:06:01.600
So what we can do here is we will convert this into array.

80
00:06:01.630 --> 00:06:03.970
Using the split method.

81
00:06:04.210 --> 00:06:14.170
I will simply say that each character I want to split into an array and that again is reversed by reverse

82
00:06:14.170 --> 00:06:14.830
method.

83
00:06:15.310 --> 00:06:23.560
Not only that, the reversed array you want to convert back into the string also so you will say join.

84
00:06:24.760 --> 00:06:25.540
Like this.

85
00:06:27.160 --> 00:06:31.720
Now our sister will have the reverse string.

86
00:06:31.720 --> 00:06:35.110
So let me just say console here.

87
00:06:35.950 --> 00:06:37.120
Let's run the code.

88
00:06:39.540 --> 00:06:42.480
So now we have the reverse string as well.

89
00:06:42.510 --> 00:06:49.450
Now the only thing remaining is you compare whether an SDR equals to SDR or not.

90
00:06:49.470 --> 00:06:51.900
If yes, then it is palindrome.

91
00:06:51.900 --> 00:06:53.880
If no, then it is not.

92
00:06:54.120 --> 00:06:59.190
But I mentioned in the beginning that we should create a function which returns true or false.

93
00:06:59.310 --> 00:07:02.130
So let's convert this into a function.

94
00:07:02.460 --> 00:07:04.140
So I will simply say.

95
00:07:05.540 --> 00:07:06.350
Function.

96
00:07:06.350 --> 00:07:08.570
Let's say the name of the function is is.

97
00:07:09.500 --> 00:07:10.430
Palindrome.

98
00:07:11.410 --> 00:07:13.420
There will be a string past to it.

99
00:07:13.510 --> 00:07:20.830
So now we don't need this LED SDR here and we are going to shift the code in this function where we

100
00:07:20.830 --> 00:07:22.310
have the pattern defined.

101
00:07:22.330 --> 00:07:24.850
We have the nsdl, which is fine now.

102
00:07:24.850 --> 00:07:26.710
We don't need the console as well.

103
00:07:27.310 --> 00:07:30.820
It was just there to check the output, which is not needed.

104
00:07:31.330 --> 00:07:33.340
You already have the reverse string here.

105
00:07:34.310 --> 00:07:44.000
And then we are going to compare whether if an STR that is the new string or the string itself, I mean,

106
00:07:44.540 --> 00:07:47.260
is equal to the reverse string.

107
00:07:47.270 --> 00:07:47.570
Right.

108
00:07:47.570 --> 00:07:49.400
I'll use the strict equality here.

109
00:07:49.400 --> 00:07:51.740
Then we are going to say return true.

110
00:07:51.740 --> 00:07:57.020
So it is palindrome or else we will return.

111
00:07:58.220 --> 00:07:59.150
It is not.

112
00:08:00.660 --> 00:08:02.970
Now let's say console.log.

113
00:08:03.000 --> 00:08:12.120
Straight away is palindrome, which is a function I'll first of all, pass madam itself.

114
00:08:13.480 --> 00:08:16.250
And we'll run and see what is the output.

115
00:08:16.270 --> 00:08:17.750
So it is true.

116
00:08:17.770 --> 00:08:24.310
Now see this M this first M is capital, and this is the small one that is the upper and lower case.

117
00:08:24.310 --> 00:08:25.450
But that doesn't matter.

118
00:08:25.630 --> 00:08:30.220
Not only that, even if you have a space in between, that also doesn't matter.

119
00:08:30.250 --> 00:08:33.280
Let's try another string which is not palindrome.

120
00:08:33.280 --> 00:08:35.620
I'll say something else.

121
00:08:37.530 --> 00:08:38.789
And we run this.

122
00:08:39.030 --> 00:08:41.039
So it says it is false.

123
00:08:41.490 --> 00:08:45.450
Let's also try a palindrome string with punctuation.

124
00:08:45.450 --> 00:08:56.730
So I'll say man, comma, plan, comma, canal, dot, Panama.

125
00:08:57.810 --> 00:09:00.300
This is one of the very common sentence.

126
00:09:00.300 --> 00:09:01.770
People check for palindromes.

127
00:09:01.770 --> 00:09:03.600
So that's why I have shown here.

128
00:09:05.600 --> 00:09:06.590
We run this?

129
00:09:07.200 --> 00:09:15.360
It says that it is palindrome because you see this man and if you read it right to left, it will be

130
00:09:15.360 --> 00:09:16.250
the same.

131
00:09:16.260 --> 00:09:18.900
So we can use regex for palindrome.

132
00:09:18.930 --> 00:09:25.410
Though there are many ways of finding palindrome string, but regex is a very short way to find whether

133
00:09:25.410 --> 00:09:27.300
a string is palindrome or not.

