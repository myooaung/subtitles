WEBVTT
1
00:00:00.090 --> 00:00:04.680
In the previous chapter, we have seen look ahead assertion.

2
00:00:05.010 --> 00:00:12.480
Now we are going to try one more option that is look behind assertion the look ahead assertion which

3
00:00:12.480 --> 00:00:15.300
checks if something is following or not.

4
00:00:15.540 --> 00:00:20.670
But the look behind assertion checks if something is preceding or not.

5
00:00:20.880 --> 00:00:23.630
Let's begin with look behind assertion.

6
00:00:23.640 --> 00:00:29.400
We write this assertion with a bracket question mark a less than sign.

7
00:00:29.430 --> 00:00:31.910
Of course, the equal to sign and why?

8
00:00:31.920 --> 00:00:35.580
Which is the character or word you want to search for?

9
00:00:35.790 --> 00:00:41.790
If you give this, then it means it will check for why preceding x.

10
00:00:42.360 --> 00:00:45.350
Assume that you have a string.

11
00:00:45.360 --> 00:00:49.470
Dr. Java and Mr. Script are here now.

12
00:00:49.470 --> 00:00:54.030
You want to get the name of a person preceding with Dr..

13
00:00:54.300 --> 00:01:02.460
Then you can write a pattern, a question mark the less than sign the equality operator and I'll just

14
00:01:02.460 --> 00:01:04.620
say d r dot.

15
00:01:04.980 --> 00:01:11.760
Of course we want to search for words as well, so I'll say slash w plus let's write the code for the

16
00:01:11.760 --> 00:01:14.790
same and check what is the output.

17
00:01:15.180 --> 00:01:17.040
I'll declare the string.

18
00:01:17.970 --> 00:01:23.490
And the pattern will be a question mark, a less than sign, which we'll look behind.

19
00:01:23.520 --> 00:01:30.450
Then I'll say d r, dot w plus will console log width, match matter.

20
00:01:32.620 --> 00:01:37.000
So we have the output Java as it is proceeding with.

21
00:01:37.000 --> 00:01:37.870
Dr..

22
00:01:38.350 --> 00:01:45.840
Let's try one more example where we want to find all the numbers with currency sign dollar.

23
00:01:45.850 --> 00:01:52.210
So the pattern will be a question mark, a less than sine e quality.

24
00:01:52.450 --> 00:01:59.170
And I will write slash dollar because if I write dollar without the escape sequence, then dollar has

25
00:01:59.170 --> 00:02:02.350
a different meaning in regular expression pattern.

26
00:02:02.350 --> 00:02:05.140
So that's why I use the backslash here.

27
00:02:05.410 --> 00:02:07.480
That is the escape dollar.

28
00:02:07.960 --> 00:02:10.060
Now I want that after dollar.

29
00:02:10.090 --> 00:02:12.130
I want to have digits.

30
00:02:12.400 --> 00:02:18.400
So I'll say slash D plus let's write code for the same and run it.

31
00:02:19.690 --> 00:02:24.430
I'll declare a variable tolled ten times to pay dollars 30.

32
00:02:24.850 --> 00:02:25.840
So $30.

33
00:02:25.840 --> 00:02:35.260
I mean, then the pattern will be a question mark, a less than sine equal to slash dollar and of course,

34
00:02:35.260 --> 00:02:36.640
slash D plus.

35
00:02:36.850 --> 00:02:40.480
Let's use the match method and run the code.

36
00:02:42.220 --> 00:02:50.260
Now you see that value 30 is returned as it begins with a dollar, whereas the other number ten doesn't

37
00:02:50.260 --> 00:02:51.910
have preceding dollar.

38
00:02:51.910 --> 00:02:54.250
So it is not in the list of output.

39
00:02:55.540 --> 00:02:58.240
Let's try negative look behind.

40
00:02:58.390 --> 00:03:05.140
So in the same case of previous example, assume that we don't want to search for currency values in

41
00:03:05.140 --> 00:03:05.890
the list.

42
00:03:06.370 --> 00:03:13.480
Then you can use an exclamation instead of equal to let's change and run the code again.

43
00:03:13.750 --> 00:03:20.680
I will use the exclamation here so I'll remove equal to and we will run the code.

44
00:03:21.750 --> 00:03:29.520
So now the output shows all numbers not preceded by a dollar sign, but it returns the zero of dollars

45
00:03:29.550 --> 00:03:30.600
30 as well.

46
00:03:30.600 --> 00:03:35.580
So here also we can use slash B for word boundaries.

47
00:03:35.580 --> 00:03:38.910
Let's add it in the pattern and run the code again.

48
00:03:38.910 --> 00:03:42.450
I'll say slash B and again slash B.

49
00:03:45.780 --> 00:03:47.970
Now we have the expected result.

50
00:03:48.240 --> 00:03:53.260
So this is all about assertions as we try more practical examples.

51
00:03:53.280 --> 00:03:56.970
You will realize the importance of knowing assertions.

