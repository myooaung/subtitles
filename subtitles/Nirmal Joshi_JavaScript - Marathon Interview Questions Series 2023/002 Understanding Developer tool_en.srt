1
00:00:00,060 --> 00:00:06,390
In this section, we will understand the developer tool with practical examples for different purposes

2
00:00:06,390 --> 00:00:10,410
like debugging, testing and modifying the code, etc..

3
00:00:11,450 --> 00:00:14,690
The category of this question is debugging techniques.

4
00:00:15,290 --> 00:00:17,570
There will be two related questions in this topic.

5
00:00:18,440 --> 00:00:26,030
Here I have written this HTML code having one H1 tag a button with a click around and here is the JavaScript

6
00:00:26,030 --> 00:00:27,080
code for the scene.

7
00:00:27,950 --> 00:00:34,730
Let me open this in the browser and I will press control shift ie that is to open the developer tool.

8
00:00:35,570 --> 00:00:37,640
So here is its source code.

9
00:00:38,510 --> 00:00:45,200
Now if you want to modify any text or design and see how it will look without changing the code in your

10
00:00:45,200 --> 00:00:45,920
workspace.

11
00:00:45,920 --> 00:00:50,300
Our Code Editor Then it can be done here in the Elements Panel.

12
00:00:52,220 --> 00:00:57,860
For example, let's say here I want JavaScript developers instead of hello developers.

13
00:00:58,520 --> 00:01:01,760
So I will write JavaScript here and press enter.

14
00:01:02,390 --> 00:01:04,610
Now you can see the text changed.

15
00:01:06,140 --> 00:01:08,720
Similarly, let me click on this button code.

16
00:01:09,350 --> 00:01:13,400
And here on the right, you will see the CSS has applied to the button.

17
00:01:13,940 --> 00:01:16,310
This is the default cases of the element.

18
00:01:17,190 --> 00:01:24,450
But you can add or change your own success using this element or style that it applies the style to

19
00:01:24,450 --> 00:01:25,590
the selected element.

20
00:01:25,830 --> 00:01:28,080
And here we have selected this button.

21
00:01:30,160 --> 00:01:32,080
So let's try to change its color.

22
00:01:32,200 --> 00:01:35,860
I will say background color and select any of these colors.

23
00:01:36,670 --> 00:01:43,330
This is how you can test and modify the style, layout and design of the elements in the web page and

24
00:01:43,330 --> 00:01:44,500
preview them as well.

25
00:01:44,650 --> 00:01:46,150
Here in the browser itself.

26
00:01:47,240 --> 00:01:49,400
This will not change anything on the server.

27
00:01:49,640 --> 00:01:51,860
It is only for the help of developers.

28
00:01:54,080 --> 00:02:00,500
It is a common practice of developers to bring the logs here in the console panel, which is its main

29
00:02:00,500 --> 00:02:02,330
use along with running JavaScript.

30
00:02:03,020 --> 00:02:09,530
You can make changes in the web page using the console as well as it has full access to the page window.

31
00:02:10,190 --> 00:02:13,160
Here, let us practically log a message in the console.

32
00:02:14,070 --> 00:02:15,000
In Discord.

33
00:02:15,240 --> 00:02:23,100
This button calls the show console function on its click event, which will display a log in the console

34
00:02:23,550 --> 00:02:24,630
going to the browser.

35
00:02:24,660 --> 00:02:28,860
Let us click on the button and see the log is printed in the console.

36
00:02:29,280 --> 00:02:36,240
You can also write commands or expressions in the console like this simple addition or let me change

37
00:02:36,240 --> 00:02:39,270
the content of this action in the console.

38
00:02:39,270 --> 00:02:48,540
I will write, let's say document or get element by ID each one dot inner HDMI is equal to hello console

39
00:02:48,840 --> 00:02:49,980
and L'Express enter.

40
00:02:50,700 --> 00:02:53,190
You see the H1 text is modified.

41
00:02:54,600 --> 00:03:02,190
The console is considered as an interface, as we call it, as console API off the window object for

42
00:03:02,190 --> 00:03:03,000
the developers.

43
00:03:04,730 --> 00:03:12,500
That provides fundamental debugging functionalities like logging, stack traces, timers and counters,

44
00:03:12,500 --> 00:03:13,100
etc..

45
00:03:14,280 --> 00:03:22,290
The console object has many default methods like console that assert console or log console or debug

46
00:03:22,440 --> 00:03:27,510
dart error and many others which we will learn in a dedicated console object section.

47
00:03:30,200 --> 00:03:38,030
The sources panel is used for many purposes, like to view files added CSIS and JavaScript debugging

48
00:03:38,030 --> 00:03:43,370
to create and save JavaScript snippets or set up a workspace, etc..

49
00:03:45,260 --> 00:03:50,750
Let me open this sidebar, which shows the list of all the files here.

50
00:03:50,930 --> 00:03:52,490
Let me open the script.

51
00:03:52,490 --> 00:03:54,410
Dodgers file to see the code.

52
00:03:55,070 --> 00:03:56,960
Now let's run this file.

53
00:03:57,140 --> 00:04:01,070
On the button, click this action content will change to this.

54
00:04:03,730 --> 00:04:04,950
Let me click on the button.

55
00:04:06,000 --> 00:04:10,740
But it did not work and the console is not even showing any error message.

56
00:04:11,310 --> 00:04:16,860
To find out why, we need to debug the call and for that we can use breakpoints.

57
00:04:17,490 --> 00:04:25,410
Breakpoint is the point that we put on a line of code that we want the debugger to stop or pause the

58
00:04:25,410 --> 00:04:28,290
execution to find the error or exception.

59
00:04:30,770 --> 00:04:32,740
To put a breakpoint here.

60
00:04:32,810 --> 00:04:40,400
Just click once near the line number and you will see a breakpoint added here in the list of breakpoints.

61
00:04:41,150 --> 00:04:42,550
Now, let's run this again.

62
00:04:43,730 --> 00:04:47,390
As you can see, the debugger has paused the execution.

63
00:04:47,660 --> 00:04:54,230
And here on the same line where we put the breakpoint, I can figure out the mistake and that is the

64
00:04:54,230 --> 00:04:58,220
pair of parentheses is missing after the function name.

65
00:04:59,630 --> 00:05:01,880
Let me go to the score and correct it.

66
00:05:02,600 --> 00:05:04,400
Save the file and then run.

67
00:05:05,210 --> 00:05:06,650
And now it is working fine.

68
00:05:07,280 --> 00:05:10,250
You can put multiple break points like this.

69
00:05:11,300 --> 00:05:11,750
Here.

70
00:05:11,750 --> 00:05:18,770
We used break point and we will learn the process of debugging in detail using these options.

71
00:05:18,980 --> 00:05:25,820
That is with conditions with the help of watch called Stack Scope and other additional tools here in

72
00:05:25,820 --> 00:05:27,170
the forthcoming tutorials.

73
00:05:28,170 --> 00:05:35,250
Developer tool also provides mobile simulation, which means you can simulate to mobile devices appearance

74
00:05:35,670 --> 00:05:40,350
to inspect how the page looks and works on mobile devices.

75
00:05:41,700 --> 00:05:44,430
From this toggled device option.

76
00:05:45,820 --> 00:05:46,330
Again.

77
00:05:46,330 --> 00:05:47,910
I will open the site.

78
00:05:47,920 --> 00:05:54,010
Amazon, let me click here and take the developer tool to the right like this.

79
00:05:54,910 --> 00:05:57,640
As you can see, the page becomes responsive.

80
00:05:58,240 --> 00:06:01,630
Here it shows the iPad pro screen size.

81
00:06:01,870 --> 00:06:09,580
And when you open this dropdown, you can select any preferred device size like this.

82
00:06:11,000 --> 00:06:17,330
When you click on edit, you will find more device options and you can also add custom devices.

83
00:06:18,170 --> 00:06:24,620
You can also access many other settings like this if you want to customize the responsive page layout.

84
00:06:25,010 --> 00:06:30,650
Select responses from here and you can adjust the size the way you want.

85
00:06:31,460 --> 00:06:34,610
These are a few commonly used developer tool features.

86
00:06:35,540 --> 00:06:37,880
So now let's discuss related questions.

87
00:06:39,560 --> 00:06:43,940
The first question is what is responsive web design that is RW.

88
00:06:44,840 --> 00:06:52,490
Well, responsive web design is something where you design the website which you open on a computer

89
00:06:52,490 --> 00:06:53,180
screen.

90
00:06:53,210 --> 00:07:00,980
It looks that it is built for that screen only if you open it in a tablet, if you open it in a mobile

91
00:07:00,980 --> 00:07:01,460
device.

92
00:07:01,670 --> 00:07:08,870
So no matter in which screen you open, it will appear as if it is designed for that particular screen

93
00:07:08,870 --> 00:07:09,860
size only.

94
00:07:11,790 --> 00:07:14,280
There are many ways to make the responsive designs.

95
00:07:14,670 --> 00:07:20,730
The key points which make the site responsive is basically diseases, especially mediocrity.

96
00:07:21,060 --> 00:07:28,410
You can use bootstrap to make site responsive, and Flexbox is also widely used to make the layout responsive.

97
00:07:31,530 --> 00:07:35,490
The second question is what is a break point and how do you place it?

98
00:07:36,480 --> 00:07:43,650
A break point simply means a point that you place on a line of code where you want to break or pause

99
00:07:43,650 --> 00:07:50,610
the execution of code for debugging or just to evaluate the values of various variables.

100
00:07:51,690 --> 00:07:57,450
As we saw here in the solar panel by clicking on the line number, a breakpoint is placed.

101
00:07:57,690 --> 00:08:01,680
It means the execution of code will pause on this line.

102
00:08:02,730 --> 00:08:03,030
Here.

103
00:08:03,030 --> 00:08:05,850
It shows the list of break points in the code.

