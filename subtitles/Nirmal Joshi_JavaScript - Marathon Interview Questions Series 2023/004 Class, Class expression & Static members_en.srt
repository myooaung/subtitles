1
00:00:00,090 --> 00:00:05,100
So in this topic, we are going to discuss questions like how the class is created.

2
00:00:05,340 --> 00:00:07,140
What is class expression?

3
00:00:07,300 --> 00:00:09,630
And we are going to discuss starting members.

4
00:00:10,660 --> 00:00:13,600
There will be six related questions to these topics.

5
00:00:14,800 --> 00:00:21,010
I assume that you have already gone through previous questions of object literal and this object before

6
00:00:21,010 --> 00:00:22,730
you move on this section.

7
00:00:23,470 --> 00:00:28,540
Classes are very commonly used in various languages in JavaScript.

8
00:00:28,570 --> 00:00:30,850
Also, you can create classes.

9
00:00:31,360 --> 00:00:38,680
The whole concept of class is to create a blueprint or design, commonly referred as a prototype.

10
00:00:39,040 --> 00:00:43,810
Then off this prototype, you can create as many instances as you want.

11
00:00:44,350 --> 00:00:51,910
For example, on paper, you design a house which has a number of rooms, windows, doors and color

12
00:00:51,910 --> 00:00:52,660
properties.

13
00:00:53,140 --> 00:01:00,160
Now, in the actual houses created from this design, there can be different values for each of the

14
00:01:00,160 --> 00:01:01,280
actual house.

15
00:01:01,330 --> 00:01:05,920
Like this object has five rooms and different values.

16
00:01:06,400 --> 00:01:07,090
Gray color.

17
00:01:07,600 --> 00:01:14,410
And this house has seven rooms, different windows, doors, and let's say calories, maybe blue.

18
00:01:15,750 --> 00:01:16,140
Here.

19
00:01:16,140 --> 00:01:22,050
Each house is called as an object or instance of class house.

20
00:01:22,410 --> 00:01:23,550
This is the instance.

21
00:01:23,550 --> 00:01:28,440
Or you can say that you have created this house from this blueprint.

22
00:01:29,660 --> 00:01:36,110
The advantage of this pattern is reusability, but it's not something you can understand unless you

23
00:01:36,110 --> 00:01:41,990
implement it practically in a project which you will realize at a later stage of this tutorial.

24
00:01:42,260 --> 00:01:48,020
But in this section, we will still go through many concepts of classes and basics.

25
00:01:49,180 --> 00:01:59,080
In ESX we have a class keyword to create a class, whereas in S5 we were using a constructor function.

26
00:01:59,800 --> 00:02:06,850
We will at least once go through the S5 syntax, but let's concentrate on Essex at the moment.

27
00:02:07,540 --> 00:02:11,230
So let me create a class called House Itself.

28
00:02:14,880 --> 00:02:16,860
Now there is something called constructor.

29
00:02:18,210 --> 00:02:26,850
This constructor is basically a kind of method which is executed automatically when you create the instance

30
00:02:26,850 --> 00:02:27,790
of this class.

31
00:02:27,810 --> 00:02:33,980
Let's say I just want to put console.log and constructor called.

32
00:02:34,830 --> 00:02:38,040
Now how we like create the object of this class.

33
00:02:38,220 --> 00:02:40,440
I will say constructor may be led.

34
00:02:40,560 --> 00:02:45,360
Object is equal to new house.

35
00:02:45,390 --> 00:02:48,810
That means I'm creating a new instance of class house.

36
00:02:48,930 --> 00:02:53,970
I can create as many instances as I want, so I'm going to create a few more instances here.

37
00:02:55,230 --> 00:02:56,700
So I have two instances now.

38
00:02:56,940 --> 00:02:58,230
O'Bagy and O'Bagy.

39
00:02:58,470 --> 00:03:05,340
That's fine now because I'm creating two instances every time this new house is called.

40
00:03:05,640 --> 00:03:07,290
It's going to call the constructor.

41
00:03:08,040 --> 00:03:11,700
Constructor is a matter which is executed immediately.

42
00:03:11,820 --> 00:03:15,000
You create the instance of a class.

43
00:03:16,260 --> 00:03:17,340
Let me run this code.

44
00:03:18,870 --> 00:03:22,320
So you see that the constructor is called two times.

45
00:03:23,610 --> 00:03:29,910
For example, I warned that that has to be property as well, or maybe more properties.

46
00:03:30,180 --> 00:03:38,880
Then what I can do, I can say this door, let's say number of doors is equal to now I can say five

47
00:03:38,910 --> 00:03:39,840
here maybe.

48
00:03:40,050 --> 00:03:43,980
And I'll say this dot, let's say windows.

49
00:03:47,070 --> 00:03:49,320
Is equal to, for example, ten.

50
00:03:50,270 --> 00:03:57,560
Now, instead of giving fixed value, what I can do, I can pass parameters, I can pass arguments to

51
00:03:57,650 --> 00:03:58,550
the constructor.

52
00:03:58,940 --> 00:04:06,680
So what I will do, I will say A comma, B, for example, and then I say here and maybe B here instead

53
00:04:06,680 --> 00:04:07,190
of this.

54
00:04:07,460 --> 00:04:17,149
Generally, the practice is we use the same name, let's say number of doors and windows.

55
00:04:17,690 --> 00:04:25,010
So when you say this dot and doors and this dot windows, that means this is a property of class house.

56
00:04:25,280 --> 00:04:25,640
Right?

57
00:04:25,880 --> 00:04:31,070
And this is just a value which is received by the constructor, which I'm applying in a moment.

58
00:04:31,370 --> 00:04:32,270
But I'm going to say.

59
00:04:32,600 --> 00:04:37,340
And doors here and windows here.

60
00:04:38,540 --> 00:04:40,220
So remember this.

61
00:04:40,370 --> 00:04:45,650
And doors, this right hand side is this variable.

62
00:04:45,770 --> 00:04:49,340
And this left hand side that is member of Class House.

63
00:04:50,720 --> 00:04:56,990
So now I'm going to pass, let's say in the first house, there are five doors and ten windows.

64
00:04:57,230 --> 00:05:03,350
And in the second house, we have seven doors and 12 windows.

65
00:05:03,470 --> 00:05:03,890
That's it.

66
00:05:05,040 --> 00:05:07,770
Let's also create a matter here.

67
00:05:08,010 --> 00:05:13,980
Now we already know what is a property and matter because we have already seen all these things in object

68
00:05:13,980 --> 00:05:14,970
literal section.

69
00:05:16,040 --> 00:05:20,270
I'm going to create a method called show data.

70
00:05:21,960 --> 00:05:27,360
I say console.log and those number of doors come out this door.

71
00:05:27,390 --> 00:05:28,510
Number of windows.

72
00:05:28,530 --> 00:05:29,010
That's it.

73
00:05:30,350 --> 00:05:33,350
So now the prototype looks something like this.

74
00:05:36,840 --> 00:05:45,510
Now let me just say object or show data and object one art show data.

75
00:05:46,200 --> 00:05:47,460
Let me run this code now.

76
00:05:48,000 --> 00:05:52,260
So here we have two different values five and ten, seven and 12.

77
00:05:53,100 --> 00:05:58,620
So as you can see that both object and object one, they have different data set here.

78
00:05:59,610 --> 00:06:01,920
So that's how a basic class is created.

79
00:06:01,950 --> 00:06:06,510
And this is what the constructor is in the E6 syntax.

80
00:06:07,640 --> 00:06:15,200
The way we discussed about dynamic properties and dynamic method names that we can do with classes.

81
00:06:15,200 --> 00:06:20,960
Also, we have already discussed that in object literally that how can we have dynamic properties?

82
00:06:21,260 --> 00:06:23,870
Let's say here you want to have dynamic method name.

83
00:06:24,440 --> 00:06:32,690
So what you can do, for example, I can say let's get data is equal to the value I want to have is

84
00:06:32,990 --> 00:06:34,040
show data only.

85
00:06:36,050 --> 00:06:37,550
So now instead of.

86
00:06:39,780 --> 00:06:40,680
Show data.

87
00:06:41,820 --> 00:06:43,460
I want to write a variable here.

88
00:06:43,470 --> 00:06:45,480
I'll say get data.

89
00:06:47,040 --> 00:06:48,210
So this is great data.

90
00:06:48,360 --> 00:06:52,950
It is a variable and that has a value card show data.

91
00:06:53,340 --> 00:06:56,220
Now here I am calling show data only.

92
00:06:56,220 --> 00:06:56,490
Right?

93
00:06:56,880 --> 00:07:00,680
So if that is get it, I should display an error.

94
00:07:00,690 --> 00:07:01,740
Let's see what happens.

95
00:07:02,640 --> 00:07:03,780
It is still executing.

96
00:07:03,810 --> 00:07:07,150
The reason is this guard data is dynamic.

97
00:07:07,170 --> 00:07:10,320
That is because we have covered it into square brackets.

98
00:07:10,650 --> 00:07:16,800
It is going to consider that that is a variable which contains some value and that name is actually

99
00:07:16,800 --> 00:07:17,610
the valid name.

100
00:07:18,870 --> 00:07:21,420
Let's remove this air here and run it again.

101
00:07:22,380 --> 00:07:24,030
You see, now it has stopped working.

102
00:07:24,780 --> 00:07:29,260
So it is currently working because we have that dynamic matter.

103
00:07:29,280 --> 00:07:34,140
Similarly, you can have dynamic members this dot, you can put a square record and you can deal with

104
00:07:34,140 --> 00:07:34,410
it.

105
00:07:34,410 --> 00:07:41,220
Easy to understand that here you see that these are the members of the class and those is a numerical

106
00:07:41,220 --> 00:07:41,430
value.

107
00:07:41,430 --> 00:07:46,770
Of course, windows is also numeric, but these are the properties very this is the matter of a class.

108
00:07:46,770 --> 00:07:48,540
Let me remove this dynamic thing now.

109
00:07:48,780 --> 00:07:53,910
I'll just say show data and I don't need this data here.

110
00:07:55,370 --> 00:07:58,010
So here we have different types of members.

111
00:07:58,020 --> 00:08:03,800
That is, we have a method and also these numeric values we may have any type of value doesn't matter.

112
00:08:04,520 --> 00:08:10,280
What I want to highlight here is that the member that is, let's say I wanted to call may be show data

113
00:08:10,550 --> 00:08:14,360
or any other method or any other member for that matter.

114
00:08:14,600 --> 00:08:17,120
I have to instantiate the class.

115
00:08:17,450 --> 00:08:22,610
If I do not create an instance, I cannot access members of the class.

116
00:08:23,780 --> 00:08:29,390
There are situations where you want to have members, but you do not want to instantiate the class.

117
00:08:29,690 --> 00:08:35,659
The situations which you may not get right now, if you have exposure with Angular or maybe React,

118
00:08:35,900 --> 00:08:42,470
you get the idea that we create services, services which are called directly and we do not want to

119
00:08:42,470 --> 00:08:43,309
instantiate.

120
00:08:43,850 --> 00:08:50,750
In such case you can create static members if you cannot correlate with a practical situation.

121
00:08:51,060 --> 00:08:56,180
Doesn't matter at the moment, but at least you should know how to create a static member.

122
00:08:56,960 --> 00:09:00,260
So let's try to create a static member here.

123
00:09:00,260 --> 00:09:03,500
In this particular example, I will say static.

124
00:09:03,620 --> 00:09:05,810
Let's say the matter name is test.

125
00:09:06,110 --> 00:09:06,650
That's it.

126
00:09:07,610 --> 00:09:11,540
Now I will display any method inside.

127
00:09:12,050 --> 00:09:15,830
Let's say static method call.

128
00:09:16,760 --> 00:09:17,180
That's it.

129
00:09:18,390 --> 00:09:21,810
I do not need to instantiate these at the moment.

130
00:09:21,930 --> 00:09:28,020
Certainly I can remove the constructor as well if I want to and ensure that I matter also.

131
00:09:28,410 --> 00:09:31,710
So imagine that this is just the static method we have here.

132
00:09:32,890 --> 00:09:35,320
We are not going to instantiate this.

133
00:09:35,650 --> 00:09:36,060
See this?

134
00:09:36,070 --> 00:09:36,950
How am I calling?

135
00:09:37,090 --> 00:09:40,120
I'm using the class name and I'll say Test.

136
00:09:40,300 --> 00:09:40,870
That's it.

137
00:09:41,470 --> 00:09:43,960
So last name, dot method name.

138
00:09:44,110 --> 00:09:45,520
Our member name in short.

139
00:09:45,730 --> 00:09:48,280
That's how you access the starting member.

140
00:09:48,310 --> 00:09:51,520
Now, if I run this, you see that the output is there.

141
00:09:52,270 --> 00:09:57,160
So we don't need to have an instance of a class to refer a static member.

142
00:09:58,350 --> 00:10:03,540
Let me also create a static property, also a static maybe, let's say, application version.

143
00:10:03,570 --> 00:10:06,870
These are the things we put as static, maybe 1.2.

144
00:10:07,530 --> 00:10:11,450
So now if I want to refer it, I simply say console.log.

145
00:10:13,740 --> 00:10:16,980
How's dart the app version?

146
00:10:18,060 --> 00:10:18,570
That's it.

147
00:10:20,790 --> 00:10:23,070
We don't need to instantiate class yet.

148
00:10:23,130 --> 00:10:25,740
If you have a static method, let's say test one.

149
00:10:25,740 --> 00:10:29,580
One more static method inside the class.

150
00:10:30,390 --> 00:10:31,860
New method, for example.

151
00:10:32,430 --> 00:10:39,960
In case if you want to call this test one from this static method itself, then you can certainly write

152
00:10:39,960 --> 00:10:40,470
like this.

153
00:10:40,470 --> 00:10:41,550
This door test one.

154
00:10:41,760 --> 00:10:42,510
You can do that.

155
00:10:43,520 --> 00:10:46,010
See, generally this refers to an instance.

156
00:10:46,880 --> 00:10:51,830
But here, even though the instance is not that, certainly you can write how you start test one.

157
00:10:52,130 --> 00:10:52,520
But do you?

158
00:10:52,520 --> 00:10:55,610
Even if you write this door test one, it's going to work.

159
00:10:56,570 --> 00:11:01,220
So if I run this, you'll see that the starting matter card is displayed.

160
00:11:01,250 --> 00:11:03,070
New method and of course the version.

161
00:11:03,080 --> 00:11:06,950
So this test one is called with that this object also.

162
00:11:07,730 --> 00:11:13,520
So before we move to related question, in the beginning, I mentioned about constructor function syntax,

163
00:11:13,940 --> 00:11:21,650
as I say that the class keyword was introduced in E6, but before that that is in EA's file, the function

164
00:11:21,650 --> 00:11:23,240
was acting as a class.

165
00:11:23,360 --> 00:11:24,440
So let me show you that.

166
00:11:24,440 --> 00:11:26,570
Also, this is the E6 index.

167
00:11:26,840 --> 00:11:29,210
You have a function house right here.

168
00:11:29,210 --> 00:11:30,500
We don't need a constructor.

169
00:11:30,500 --> 00:11:35,540
If you write a line here, let's say console.log, then this is going to be the constructor itself,

170
00:11:35,990 --> 00:11:36,830
let's say called.

171
00:11:38,740 --> 00:11:43,180
Now if I just call like normally you see that we call the function like this.

172
00:11:43,540 --> 00:11:43,860
Right.

173
00:11:44,230 --> 00:11:50,680
But instead of writing the name of the function, if you call it with new keyword, let's say I would

174
00:11:50,680 --> 00:11:52,390
prefer s five syntax only.

175
00:11:52,390 --> 00:11:56,410
So I'll say var var obj is equal to new house.

176
00:11:56,410 --> 00:12:01,000
So if I do this, this means it's just the way you call the function.

177
00:12:01,540 --> 00:12:02,740
It changes the behavior.

178
00:12:02,740 --> 00:12:07,840
Now it is acting as a constructor function and this itself is a class.

179
00:12:07,840 --> 00:12:15,400
So I can see this dot, let's say windows at the moment, right, is equal to maybe you have parameters

180
00:12:15,400 --> 00:12:18,760
to the constructor so you can write windows here, right?

181
00:12:18,760 --> 00:12:21,970
And here you are passing the values again.

182
00:12:21,970 --> 00:12:27,310
Say var obj one is equal to new house and different number of windows.

183
00:12:27,640 --> 00:12:34,720
So the code which we saw with class in this case we have it with the constructor function syntax.

184
00:12:34,870 --> 00:12:38,170
This is S5 syntax, so just get the idea about it.

185
00:12:38,170 --> 00:12:39,760
That's why I mentioned it here.

186
00:12:39,850 --> 00:12:42,970
No, it's not needed now to know how it works.

187
00:12:42,970 --> 00:12:45,700
But still you have this way of writing function.

188
00:12:45,700 --> 00:12:50,350
So if you say new in function name, that is going to act as a class.

189
00:12:51,590 --> 00:12:54,290
Let's discuss related questions of this topic.

190
00:12:55,010 --> 00:12:57,890
The first question is how can you create a class?

191
00:12:58,700 --> 00:13:00,440
So this is how you create a class.

192
00:13:03,520 --> 00:13:06,940
The second question is when is the constructor called?

193
00:13:07,240 --> 00:13:12,040
So the constructor is called as soon as an instance of a class is created.

194
00:13:12,100 --> 00:13:18,790
So whatever you want to initialize, whatever process you want to have as initialization that you can

195
00:13:18,790 --> 00:13:20,380
put in the constructor method.

196
00:13:21,350 --> 00:13:26,300
The third question is, can we have dynamic property or matter names in a class?

197
00:13:26,900 --> 00:13:28,550
Yes, of course we can have it.

198
00:13:29,180 --> 00:13:30,380
This is how you can have it.

199
00:13:30,410 --> 00:13:36,560
Just put a square bracket and that matter name or a property name can be dynamic.

200
00:13:37,870 --> 00:13:41,140
First question what is a class expression?

201
00:13:42,350 --> 00:13:43,730
We have already seen.

202
00:13:44,030 --> 00:13:45,320
Function expression.

203
00:13:45,980 --> 00:13:48,380
So that is a function, for example, like this.

204
00:13:48,710 --> 00:13:52,850
Then if we want to convert it into function expression, then how do you do that?

205
00:13:53,060 --> 00:13:56,560
You put the name before the function keyword, right?

206
00:13:56,570 --> 00:13:57,800
And you write it like this.

207
00:13:58,220 --> 00:14:02,480
Of course, if you write an arrow function, that is a function expression only.

208
00:14:03,290 --> 00:14:06,110
Now here, when I say const test is equal to function.

209
00:14:06,380 --> 00:14:08,060
This is a function expression.

210
00:14:08,480 --> 00:14:13,280
Similarly, ES6 gives you class expression as well.

211
00:14:14,180 --> 00:14:17,870
When you say class expression, it means you write a class like this.

212
00:14:17,870 --> 00:14:19,400
You say class house.

213
00:14:20,330 --> 00:14:21,290
You write like this.

214
00:14:22,010 --> 00:14:23,210
This is what we have seen.

215
00:14:23,740 --> 00:14:29,550
Instead of this, you can say let house is equal to class.

216
00:14:30,620 --> 00:14:31,460
Maybe test.

217
00:14:32,580 --> 00:14:35,250
You can remove this name also doesn't matter.

218
00:14:35,370 --> 00:14:36,310
How do you give a name?

219
00:14:36,360 --> 00:14:37,590
It is one and the same thing.

220
00:14:38,220 --> 00:14:40,110
So here he said of late.

221
00:14:40,110 --> 00:14:41,910
I would prefer to have contact.

222
00:14:42,570 --> 00:14:49,890
Now let's say constructor and I'll say console.log only and got a message.

223
00:14:51,730 --> 00:14:53,430
Let's create an instance of this now.

224
00:14:53,440 --> 00:14:57,520
I'll say konst obj is equal to new house.

225
00:14:59,150 --> 00:15:00,020
Let's run this.

226
00:15:00,440 --> 00:15:02,630
So this is a class expression.

227
00:15:03,110 --> 00:15:09,500
Normally you do not write this way, but yes, you do have class expression, like a function expression

228
00:15:09,500 --> 00:15:10,430
in Essex.

229
00:15:11,210 --> 00:15:15,080
Fifth question is what are static members in a class?

230
00:15:15,560 --> 00:15:18,770
What is the purpose of defining them as static?

231
00:15:19,040 --> 00:15:24,560
So we have already seen that we write just a static keyword and we can create static members.

232
00:15:24,560 --> 00:15:31,460
And the purpose, as I mentioned, that when you are creating a module which has services where you

233
00:15:31,460 --> 00:15:37,460
do not need to instantiate the class, you do not need an object like application version or maybe few

234
00:15:37,460 --> 00:15:41,020
other services related to versioning or application name.

235
00:15:41,030 --> 00:15:44,450
Then generally we do not want to instantiate those classes.

236
00:15:44,630 --> 00:15:50,150
So we create a class and we create those members as static members.

237
00:15:50,930 --> 00:15:55,940
The sixth question is how can you call another static method from a class?

238
00:15:56,240 --> 00:16:03,500
So this we have already seen that you can say class named our method name or even this dart like in

239
00:16:03,500 --> 00:16:08,720
this case this dart test one did call the test one method.

