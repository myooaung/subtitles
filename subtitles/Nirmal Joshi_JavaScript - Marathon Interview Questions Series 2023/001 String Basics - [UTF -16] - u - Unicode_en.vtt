WEBVTT
1
00:00:00.880 --> 00:00:04.100
In this section I'm discussing about string basics.

2
00:00:04.120 --> 00:00:09.130
That is the string data type and also bit of Unicode do for Unicode.

3
00:00:09.130 --> 00:00:18.520
I have already discussed in detail in one of my Udemy tutorial, which is all the regex or regex string

4
00:00:18.520 --> 00:00:21.130
data type in JavaScript is easy to handle.

5
00:00:21.580 --> 00:00:28.120
JavaScript does not have a single character data type like we have in C, C++ or other traditional languages.

6
00:00:28.600 --> 00:00:34.600
String is a separate data type, but that can be used for single character and multiple characters.

7
00:00:35.110 --> 00:00:41.650
When it comes to declaring a variable as a string, you can use double code, single course or even

8
00:00:41.650 --> 00:00:45.570
back disks to deal with the string data types back tick.

9
00:00:45.580 --> 00:00:52.450
We will see in the next section as it is about a new feature called template literal or template string

10
00:00:52.570 --> 00:00:54.190
introduced in ESX.

11
00:00:54.790 --> 00:00:59.140
So let's tweak with double and single code syntax for this section.

12
00:00:59.560 --> 00:01:06.520
If I have to declare a string variable, normally what I do is I declare it with the variable name and

13
00:01:06.520 --> 00:01:08.590
for example I give double quotes.

14
00:01:08.830 --> 00:01:13.540
Let's say I am not new to JavaScript.

15
00:01:13.540 --> 00:01:14.680
That's what I want to say.

16
00:01:15.190 --> 00:01:20.110
Of course I'm going to use the console.log and I'm going to display this value.

17
00:01:20.320 --> 00:01:21.850
So this is a string data type.

18
00:01:22.480 --> 00:01:23.620
Let me just run this.

19
00:01:23.620 --> 00:01:27.370
Now you see that the output is I am not new to JavaScript.

20
00:01:27.880 --> 00:01:30.220
Now, for example, I want to display this.

21
00:01:30.400 --> 00:01:33.370
I am not new to JavaScript this way.

22
00:01:34.650 --> 00:01:39.660
So what I can do is I can use a single code in between.

23
00:01:40.410 --> 00:01:44.640
Now, if I run this, this will display it as it is.

24
00:01:45.180 --> 00:01:52.950
Now, imagine that if I declare this particular string with single codes, which is a valid syntax as

25
00:01:52.950 --> 00:01:56.010
such when you have to declare the string.

26
00:01:56.430 --> 00:02:02.970
But because you wanted to have a single code in between, then you will prefer to have double codes

27
00:02:03.240 --> 00:02:04.740
for the string declaration.

28
00:02:05.100 --> 00:02:11.760
Because if I use single codes here, then it will give me an error because this is the closing of this

29
00:02:11.760 --> 00:02:12.900
particular single code.

30
00:02:13.470 --> 00:02:16.790
So either you use double code to declare a string.

31
00:02:16.800 --> 00:02:19.710
Say for example, like this I am not new to JavaScript.

32
00:02:19.710 --> 00:02:21.900
Now this is single code and this is fine.

33
00:02:22.470 --> 00:02:22.800
Right.

34
00:02:22.800 --> 00:02:26.130
Because in between I am not using any single codes.

35
00:02:26.340 --> 00:02:31.740
Now, in this case, if I have to use, let's say, double codes in between, I can do that because

36
00:02:32.100 --> 00:02:36.930
the entire string begins with a single code and ends with a single code.

37
00:02:36.940 --> 00:02:40.320
So in between, if I have to display double codes, it's easy.

38
00:02:40.560 --> 00:02:43.080
So I use the single code to declare it.

39
00:02:43.110 --> 00:02:44.160
Now let's run this.

40
00:02:44.490 --> 00:02:45.930
You see, that is no issue.

41
00:02:46.470 --> 00:02:52.470
Normally in traditional languages or even in JavaScript, we have the escape sequences.

42
00:02:52.620 --> 00:02:58.140
Say, for example, when you have to display, let's say, in the same case, I want to display like

43
00:02:58.140 --> 00:03:00.930
this, I want to use this.

44
00:03:00.930 --> 00:03:03.660
Only then I can use the escape sequence.

45
00:03:03.660 --> 00:03:08.640
That is, I'll slash before the character, which is actually a special character.

46
00:03:08.940 --> 00:03:15.750
I'm giving an instruction by giving a slash that this character is not the end of the code.

47
00:03:15.990 --> 00:03:18.240
Read that as a normal character.

48
00:03:18.360 --> 00:03:20.730
So now if I run, there will not be any issue.

49
00:03:20.730 --> 00:03:23.760
Let me clear the console first and I'll run this.

50
00:03:24.450 --> 00:03:25.530
You see this now?

51
00:03:25.530 --> 00:03:26.610
There is no problem.

52
00:03:27.000 --> 00:03:34.470
But even if you do not want to use skip characters or skip sequences, suddenly you can tweak with double

53
00:03:34.470 --> 00:03:36.390
quotes are single code in between.

54
00:03:36.870 --> 00:03:44.340
Now, as I mentioned about this slash and code escape sequence is a very common way you must have known

55
00:03:44.340 --> 00:03:49.890
by C C++ are all traditional languages use escape sequence for example.

56
00:03:49.980 --> 00:03:51.940
I want to add a new line here.

57
00:03:51.960 --> 00:03:56.940
Let's say I'm again writing, I'm not sorry, I'm not new to JavaScript.

58
00:03:57.270 --> 00:03:59.940
Now let's say I want to have a new line here.

59
00:04:00.330 --> 00:04:03.300
So what I will say, I'll say slash.

60
00:04:03.300 --> 00:04:10.950
And so the slash end means that it's a special character, special instruction that is a new line.

61
00:04:11.100 --> 00:04:16.350
So now if I run, you'll see that the message is displayed on the new line.

62
00:04:17.550 --> 00:04:23.040
The way we have slash and we have slash for tab slash are for carriage return.

63
00:04:23.340 --> 00:04:30.510
If you want to display, for example, slash only like this, say for example, I want to display slash

64
00:04:30.510 --> 00:04:30.790
here.

65
00:04:31.650 --> 00:04:35.190
If I run, it does not display the slash, right?

66
00:04:35.490 --> 00:04:36.590
I want to display.

67
00:04:36.600 --> 00:04:38.760
So again, it begins with slash only.

68
00:04:38.760 --> 00:04:40.080
So this is that.

69
00:04:40.500 --> 00:04:44.370
This second slash is a special character but displayed as a string.

70
00:04:44.640 --> 00:04:46.080
So now if I run.

71
00:04:47.350 --> 00:04:48.850
A single slash is displayed.

72
00:04:49.720 --> 00:04:54.550
So when you have special characters which have some instruction, but you want to treat those characters

73
00:04:54.550 --> 00:05:00.670
as a normal character or a display character, you can begin that with a slash inside a string, which

74
00:05:00.670 --> 00:05:04.180
we call as an escape sequence or escape character.

75
00:05:04.540 --> 00:05:12.220
Now, as I mentioning about escape characters, I must mention one very useful escape sequence, and

76
00:05:12.220 --> 00:05:14.110
that is the slash you.

77
00:05:18.800 --> 00:05:25.400
Slash, who is also one of the sequence which will allow you to work with Unicode characters.

78
00:05:25.880 --> 00:05:33.740
As such, the string data type is stored in UTF 16 format, but in case if there is a special character

79
00:05:33.950 --> 00:05:41.360
to be displayed, then Unicode is represented with a four digit hexadecimal number to display this character.

80
00:05:41.450 --> 00:05:45.980
You can use slash u and there will be a four digit hexadecimal number.

81
00:05:46.490 --> 00:05:48.020
Let's practically try one.

82
00:05:48.530 --> 00:05:55.790
For example, you want to show the copyright sign, then the hex value for a copyright sign is double

83
00:05:55.790 --> 00:05:56.960
zero in nine.

84
00:05:56.960 --> 00:05:59.840
So I'm going to say here, I just remove this.

85
00:06:00.350 --> 00:06:03.260
I'll say 00a9.

86
00:06:03.710 --> 00:06:10.400
Now this is a value which I want to display as a copyright, but if I run this, this is directly 0089.

87
00:06:10.910 --> 00:06:17.270
Now I want to give an instruction that this is the hexadecimal value and I'm referring the Unicode.

88
00:06:17.900 --> 00:06:24.020
So now you see, I have given slash you if I ran this, that is a copyright sign displayed.

89
00:06:24.470 --> 00:06:30.290
Sometimes you may want to refer the longer Unicode numbers in long Unicode numbers.

90
00:06:30.290 --> 00:06:40.160
So for example, if you refer to the Unicode chart, you will see that the emoticon range is from 1f60121f6

91
00:06:40.160 --> 00:06:46.970
for F that means it is not four digit hexadecimal, but it's five digit long hexadecimal.

92
00:06:47.420 --> 00:06:55.100
Now if I give let's slash u, for example, the very first smiley is 1f601.

93
00:06:55.820 --> 00:06:59.420
So there are five which is one, two, three, four and five digits we have.

94
00:06:59.420 --> 00:06:59.750
Right.

95
00:07:00.260 --> 00:07:04.460
If I run this, it doesn't display the desired result.

96
00:07:04.730 --> 00:07:09.620
I want that it should display the smiley only when it comes to longer unicode.

97
00:07:09.680 --> 00:07:13.700
You have to cover the unique or hex value in curly brackets.

98
00:07:13.880 --> 00:07:15.890
Now let me just clear this and run.

99
00:07:16.460 --> 00:07:24.020
Now you see there is a smiley now C instead of 601, I'll just say 602 or maybe three because the range

100
00:07:24.020 --> 00:07:26.210
for emoticon is this one.

101
00:07:28.350 --> 00:07:30.360
So now I change this to three.

102
00:07:30.670 --> 00:07:31.230
Let me run.

103
00:07:31.230 --> 00:07:33.390
And you will see a different smiling.

104
00:07:34.430 --> 00:07:39.680
So you can deal with unicode using the slash you inside a stream.

105
00:07:40.910 --> 00:07:46.190
So these are a few very basic things about the string that our timetable coaching doesn't matter.

106
00:07:46.370 --> 00:07:48.800
In the next section will be dealing with back to back.

107
00:07:48.800 --> 00:07:51.380
Also, let's discuss few questions here.

108
00:07:52.820 --> 00:07:57.440
The first question is explain various ways to declare a string variable.

109
00:07:57.890 --> 00:08:01.670
So these are the different ways you can declare a string.

110
00:08:02.800 --> 00:08:05.950
That is also another way, which is a string class.

111
00:08:06.160 --> 00:08:09.820
So you can create an object of a string class, but that's a different discussion.

112
00:08:09.820 --> 00:08:14.890
So at the moment we are using these three ways to declare a core string variable.

113
00:08:16.960 --> 00:08:20.440
The second question is how will you deal with Unicode characters?

114
00:08:21.040 --> 00:08:23.380
So this is how you deal with Unicode.

115
00:08:23.380 --> 00:08:24.790
You use slash you like.

116
00:08:24.790 --> 00:08:30.640
Here we have displayed the copyright character and in this code we are displaying a smiley.

117
00:08:31.750 --> 00:08:34.840
So this is a way to display a unique character.

118
00:08:36.169 --> 00:08:40.970
The third question is show this index to display long Unicode characters.

119
00:08:41.090 --> 00:08:47.480
So in this core sample itself, you see that we need to use the curly brackets when we have to display

120
00:08:47.480 --> 00:08:49.460
the long Unicode character.

