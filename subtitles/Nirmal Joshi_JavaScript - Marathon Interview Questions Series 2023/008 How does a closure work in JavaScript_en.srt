1
00:00:00,150 --> 00:00:06,240
In this JavaScript language category, we are discussing one more question related to functions.

2
00:00:06,960 --> 00:00:10,770
The question is how does a closure work in JavaScript?

3
00:00:11,490 --> 00:00:13,230
There will be two related questions.

4
00:00:13,530 --> 00:00:14,370
So let's begin.

5
00:00:15,150 --> 00:00:19,710
Ideally, when a function comes under another function, a closure is created.

6
00:00:20,220 --> 00:00:27,810
Closure button remembers outer variable and also helps to access outer scope members.

7
00:00:28,470 --> 00:00:34,770
These terms might sound a little confusing, but as we go on, you will have a clear idea on it.

8
00:00:35,280 --> 00:00:37,290
We will start with a simple example.

9
00:00:37,800 --> 00:00:44,220
I will create a function called output and another function I am creating is in it.

10
00:00:44,850 --> 00:00:49,050
Let's try to display some value, let's say inner card.

11
00:00:49,710 --> 00:00:56,370
Now, if I want to call this function outside the outer function, this is not possible.

12
00:00:56,490 --> 00:01:00,360
The reason is outer function we have in the current scope.

13
00:01:00,600 --> 00:01:03,670
But inner is actually the child of outer.

14
00:01:03,690 --> 00:01:08,460
So even if you try to call this function outside outer, it won't be possible.

15
00:01:08,580 --> 00:01:09,620
Let's check this.

16
00:01:09,630 --> 00:01:10,920
What actually happens?

17
00:01:13,750 --> 00:01:15,920
As you see that it gives an error.

18
00:01:15,940 --> 00:01:23,200
It says that inner is not defined because the current scope for inner function is inside the outer.

19
00:01:24,010 --> 00:01:29,890
In any case, if you want to call this, you might write the inner function here.

20
00:01:30,040 --> 00:01:36,790
So what happens that when you call the outer function, it is going to call the inner and that will

21
00:01:36,790 --> 00:01:37,720
give you the output.

22
00:01:38,170 --> 00:01:43,090
Let's say I run the call and yes, it does execute.

23
00:01:44,220 --> 00:01:47,910
There is also another way to call the inner function here.

24
00:01:48,090 --> 00:01:49,020
Let's try that.

25
00:01:49,470 --> 00:01:54,000
In previous question, we discussed about function expression also.

26
00:01:54,330 --> 00:01:58,620
It will be somewhat like function expression and removing this inner.

27
00:01:59,950 --> 00:02:05,620
And what will I do is I will return the reference of inner function.

28
00:02:05,630 --> 00:02:08,080
Remember, I'm not writing parentheses here.

29
00:02:08,229 --> 00:02:15,160
Instead, I'm just seeing that I want to return that inner function and that function I can take in

30
00:02:15,160 --> 00:02:18,400
a variable called C, l, which is actually a constant.

31
00:02:18,460 --> 00:02:22,000
It is an object and I call the outer function.

32
00:02:22,480 --> 00:02:30,100
Now what outer does is outer calls the function and it returns the inner function to c l so you can

33
00:02:30,100 --> 00:02:37,570
see in other words, it is something like this that commands to c l is equal to function inner like

34
00:02:37,570 --> 00:02:38,650
or function expression.

35
00:02:38,860 --> 00:02:43,000
So now you can call this inner function using seal, isn't it?

36
00:02:43,270 --> 00:02:48,100
The same thing is happening then this line number seven is executed.

37
00:02:48,550 --> 00:02:50,890
Now I'm going to call the function c l.

38
00:02:52,470 --> 00:02:54,270
Let's run and see what happens now.

39
00:02:54,810 --> 00:02:56,880
Now the inner function is called.

40
00:02:57,090 --> 00:02:58,320
So what have we done here?

41
00:02:58,740 --> 00:03:01,020
We just try to return the inner.

42
00:03:01,260 --> 00:03:09,800
So inner was actually a private member, but we returned it in such a way that it can have access outside

43
00:03:09,820 --> 00:03:11,880
the outer functions school.

44
00:03:12,060 --> 00:03:15,620
The same thing you can write without a name as well.

45
00:03:15,630 --> 00:03:20,710
Like you can remove this name and even you can remove this return statement.

46
00:03:20,730 --> 00:03:24,000
We can say that I'm going to return the anonymous function.

47
00:03:24,420 --> 00:03:25,680
I can see the return here.

48
00:03:26,310 --> 00:03:28,230
This is also a valid syntax.

49
00:03:30,160 --> 00:03:31,150
Return, that is.

50
00:03:31,690 --> 00:03:34,600
So if I run, it's going to be the same.

51
00:03:35,140 --> 00:03:41,650
You can also try the ES6 syntax that is arrow function with this entire code.

52
00:03:41,650 --> 00:03:43,930
Let's convert this into E6.

53
00:03:44,260 --> 00:03:49,180
I'll say output is equal to we don't need function here.

54
00:03:49,180 --> 00:03:51,010
We don't even need the name here.

55
00:03:51,460 --> 00:03:52,630
I'll put an arrow here.

56
00:03:53,020 --> 00:03:56,290
In this return also, we won't need the function.

57
00:03:56,770 --> 00:03:58,690
And again, an arrow.

58
00:03:59,170 --> 00:04:04,840
If you compare the previous or this score, at least for this execution, that is no change.

59
00:04:05,530 --> 00:04:07,630
The output is going to be the same.

60
00:04:08,890 --> 00:04:11,830
But now we are using the S6 index.

61
00:04:12,460 --> 00:04:15,430
So these are the different ways of writing the same thing.

62
00:04:15,760 --> 00:04:19,329
But this returning the function is important to know.

63
00:04:19,540 --> 00:04:25,000
Now, in the beginning, I mentioned that the closure pattern can remember outer variables.

64
00:04:25,180 --> 00:04:25,790
How is it?

65
00:04:25,810 --> 00:04:28,210
So let's check with an example.

66
00:04:28,630 --> 00:04:36,730
I'm going to create a function called add counter where I have a counter zero and then I try to increment

67
00:04:36,730 --> 00:04:39,640
the value of counter and I want to return the counter.

68
00:04:39,970 --> 00:04:41,680
Let's also put a console.log.

69
00:04:42,520 --> 00:04:46,930
And because this function is returning the counter, I'm just going to call the function.

70
00:04:46,930 --> 00:04:53,410
So every time a console.log is executed with our counter, it's going to add the counter and it should

71
00:04:53,410 --> 00:04:54,910
give me the new reserve.

72
00:04:54,940 --> 00:04:56,140
That's what I'm expecting.

73
00:04:56,650 --> 00:05:02,110
Let's run this as you see the output every time it sees one.

74
00:05:02,380 --> 00:05:08,770
The reason is when you call the function, it's going to re initialize this counter with value zero

75
00:05:08,950 --> 00:05:11,290
and then we increment it and we return.

76
00:05:11,290 --> 00:05:15,100
So zero one is added and we return the counter.

77
00:05:15,520 --> 00:05:17,830
So every time we are going to get the same result.

78
00:05:18,400 --> 00:05:21,610
Now if you want that every time it should be added.

79
00:05:22,150 --> 00:05:23,890
Then what you can do?

80
00:05:23,920 --> 00:05:27,910
You can put this variable about all the functions.

81
00:05:27,910 --> 00:05:30,370
That is, you can make it global variable.

82
00:05:30,700 --> 00:05:37,540
But imagine that you do not want to make this variable global and still you want that the output should

83
00:05:37,540 --> 00:05:40,090
be 1 to 3 and so on.

84
00:05:40,570 --> 00:05:41,680
How can you do this?

85
00:05:42,280 --> 00:05:45,250
So this can be achieved using a closure?

86
00:05:45,550 --> 00:05:53,050
If we create an inner function, we can make a private variable counter act as a global variable.

87
00:05:53,560 --> 00:05:54,760
Let's implement this.

88
00:05:55,180 --> 00:05:57,310
I'm going to say return.

89
00:05:58,330 --> 00:05:59,830
So the function I'm returning.

90
00:06:00,940 --> 00:06:05,620
Remember that I'm using arrow functions in text, but it can be the traditional way.

91
00:06:05,620 --> 00:06:06,820
Also doesn't matter.

92
00:06:07,420 --> 00:06:13,720
I'm just putting these statements inside the inner function and here what will I do?

93
00:06:14,230 --> 00:06:20,890
I'll say const closure is equal to ad counter and instead of calling the add counter, I'm going to

94
00:06:20,890 --> 00:06:22,900
call now the seal.

95
00:06:23,650 --> 00:06:24,900
That is the inner function.

96
00:06:24,910 --> 00:06:26,280
You name it, whatever you want to.

97
00:06:26,300 --> 00:06:27,550
It's just a simple function.

98
00:06:28,570 --> 00:06:29,770
This is what the code is.

99
00:06:32,260 --> 00:06:35,620
Now I will run and see what is the output.

100
00:06:36,570 --> 00:06:39,570
Now you see that we have one, two and three.

101
00:06:39,720 --> 00:06:46,260
So in the beginning I mentioned that you can make local variables act as a global variable, which you

102
00:06:46,260 --> 00:06:47,820
see that it happens here.

103
00:06:48,630 --> 00:06:50,610
What exactly is happening?

104
00:06:51,330 --> 00:06:56,010
This function, which is the inner function of ad counter?

105
00:06:56,250 --> 00:07:04,200
Certainly this counter variable for this function is a global variable because the counter is above

106
00:07:04,200 --> 00:07:09,130
the inner function, because this is a global variable for inner function.

107
00:07:09,150 --> 00:07:15,240
Every time it increments, it is going to keep the value in the JavaScript environment.

108
00:07:15,240 --> 00:07:17,630
In fact, that is something like this environment.

109
00:07:18,700 --> 00:07:24,390
It's a variable which keeps the detail of current environment.

110
00:07:24,780 --> 00:07:31,680
So the variable is stored there and every time we call S.l, we are going to get the new value.

111
00:07:32,040 --> 00:07:34,140
So now the value is not reset.

112
00:07:34,620 --> 00:07:36,060
It is the previous value.

113
00:07:36,180 --> 00:07:37,560
It remembered the value.

114
00:07:37,680 --> 00:07:44,520
So ideally, when you use closure, that means you are making the private members globally available

115
00:07:44,670 --> 00:07:46,320
but with a cause.

116
00:07:46,440 --> 00:07:46,720
Right?

117
00:07:46,740 --> 00:07:49,260
You should have some idea why you do it.

118
00:07:49,800 --> 00:07:51,570
Not every time you put closure.

119
00:07:51,780 --> 00:07:56,550
Closure is useful when you have a few private members which you do not want.

120
00:07:56,940 --> 00:08:02,070
That outer function should access you keep it private and only when needed.

121
00:08:02,310 --> 00:08:09,420
Only in few situations you write a closure and you make the value global this way.

122
00:08:09,660 --> 00:08:11,910
Let's discuss about the related question.

123
00:08:12,810 --> 00:08:18,810
The first question is how can you access private variable or a function outside of the scope?

124
00:08:18,880 --> 00:08:21,630
So we can do that using closure.

125
00:08:22,230 --> 00:08:28,590
We have already seen earlier that we return the function without parentheses and we can achieve it.

126
00:08:30,790 --> 00:08:35,110
The second question is explain the advantages of a closure.

127
00:08:35,590 --> 00:08:37,940
Now, this is a very important question.

128
00:08:37,960 --> 00:08:44,440
You should have a clear idea about what a closure is, how we could achieve a few things, how we could

129
00:08:44,440 --> 00:08:48,500
achieve accessing of global variable that you can explain.

130
00:08:48,520 --> 00:08:55,090
That is the main advantage of closure is that any member, which is private for certain scope, can

131
00:08:55,090 --> 00:09:02,080
be accessed, keeping it private so that the variable is away from any accidental change of value.

132
00:09:03,380 --> 00:09:06,500
Accessing private members with a closure pattern.

133
00:09:06,590 --> 00:09:11,390
A sure better approach of making a variable global.

