WEBVTT
1
00:00:00.090 --> 00:00:05.250
In this section we are discussing about all the questions and the concept of Fetch API.

2
00:00:05.550 --> 00:00:11.220
This is a category of asynchronous JavaScript only, and there are only two related questions to this

3
00:00:11.220 --> 00:00:11.670
topic.

4
00:00:14.610 --> 00:00:22.290
We have already seen Ajax, that is the concept of Ajax and also we have gone through the example HDP

5
00:00:22.290 --> 00:00:25.650
request object in the newer version of JavaScript.

6
00:00:25.770 --> 00:00:31.940
That is a better way to deal with the network requests and we are going to discuss the same.

7
00:00:31.950 --> 00:00:33.420
That is the Fetch API.

8
00:00:33.570 --> 00:00:39.270
The Fetch API is a better, faster and more efficient way to deal with SDP.

9
00:00:39.270 --> 00:00:47.670
Our network requests EX Multiple requests was the object we were using before ESX, but E6 onwards now

10
00:00:47.670 --> 00:00:49.290
we have the fetch API.

11
00:00:49.560 --> 00:00:53.070
The syntax of the fetch api looks something like this.

12
00:00:53.400 --> 00:00:57.840
For example you have const response promise is equal to fetch.

13
00:00:57.840 --> 00:00:58.950
This is the API.

14
00:00:59.130 --> 00:01:04.950
Now the first parameter is you are which is not optional and the second one is optional.

15
00:01:05.220 --> 00:01:09.090
We call that as in it or you call it as optional object.

16
00:01:09.420 --> 00:01:15.720
So here the first parameter you are l is nothing but the resource where you want to make the request.

17
00:01:16.140 --> 00:01:23.340
The second parameter is optional object literal and if not given by default, the fetch API will make

18
00:01:23.340 --> 00:01:24.540
a get request.

19
00:01:24.930 --> 00:01:33.120
This optional object can have various keys which are information set with the SDP call, for example,

20
00:01:33.180 --> 00:01:34.710
to make a post request.

21
00:01:34.710 --> 00:01:40.200
Because, as I just mentioned, that if you do not have this second parameter mentioned, then it will

22
00:01:40.200 --> 00:01:41.340
be a get request.

23
00:01:41.340 --> 00:01:43.830
But let's say you want to make a post to request.

24
00:01:43.860 --> 00:01:50.700
So to make a post request, this optional object will look something like this where we have the method

25
00:01:50.820 --> 00:01:56.430
where you write the post or whichever request you want to make that you mentioned here the headers where

26
00:01:56.430 --> 00:02:03.090
you define the header related information for request and of course the body where you send the information

27
00:02:03.090 --> 00:02:06.990
to the you are added like the method headers and body.

28
00:02:07.200 --> 00:02:14.160
There are other options for example, mode, cache, redirect, etc. We won't be looking at all the

29
00:02:14.160 --> 00:02:19.920
options in this section, but you will come across many of them during this series of tutorials.

30
00:02:20.340 --> 00:02:21.660
Let's make an example.

31
00:02:21.840 --> 00:02:29.700
To get the data, we will use the same Jason placeholder for the API which we used with example SDP

32
00:02:29.700 --> 00:02:30.690
request object.

33
00:02:31.110 --> 00:02:33.540
I will create an asynchronous function.

34
00:02:35.460 --> 00:02:38.220
Let's say for example, the name is fetch data.

35
00:02:39.840 --> 00:02:47.070
I second response is equal to I'm using the weight and that's the reason why I mentioned async here.

36
00:02:47.400 --> 00:02:51.780
Then the fetch statement which is going to return a response promise in fact.

37
00:02:52.020 --> 00:02:57.840
So here I am going to give the you are l so this is the URL that is the user's you are aware we want

38
00:02:57.840 --> 00:03:00.340
to make a request and we want to get the data.

39
00:03:00.340 --> 00:03:04.020
And as I mentioned, this second option, we are not giving, right?

40
00:03:04.020 --> 00:03:06.180
So this is anyway a get request.

41
00:03:06.360 --> 00:03:14.040
But at the moment what I will do is I will simply display the value of the response object.

42
00:03:14.040 --> 00:03:15.600
Here, I'll say response.

43
00:03:15.870 --> 00:03:19.440
Now we are calling the fetch data and we run the code now.

44
00:03:20.310 --> 00:03:22.080
So now we have the output here.

45
00:03:22.080 --> 00:03:25.950
This is actually the response object, the entire response object itself.

46
00:03:26.400 --> 00:03:28.710
So this is the value of response object here.

47
00:03:28.860 --> 00:03:32.250
If I just expand this, you will see that that is body.

48
00:03:32.610 --> 00:03:35.490
If I click on the body, it sees that readable stream.

49
00:03:35.700 --> 00:03:43.650
It means if I read the response dot body, it will be the data constantly receiving from the server.

50
00:03:43.890 --> 00:03:47.520
So it is a chunk by chunk data we receive anyway.

51
00:03:47.520 --> 00:03:49.350
That's not the concern at the moment.

52
00:03:49.620 --> 00:03:50.940
Here we have the headers.

53
00:03:51.240 --> 00:03:54.330
We also have a status here and that is 200.

54
00:03:54.840 --> 00:03:59.220
We also have one more, a kind of status that is okay which says that it is true.

55
00:03:59.220 --> 00:04:04.020
That means everything was fine and we have received the data also.

56
00:04:04.380 --> 00:04:06.510
The reason is we have the status 200.

57
00:04:06.510 --> 00:04:08.580
That means it is this successful request.

58
00:04:09.030 --> 00:04:15.330
Now if I just display response dot okay, in fact it is already there that it is true.

59
00:04:15.660 --> 00:04:19.019
So let's try to display both response DART Okay.

60
00:04:19.019 --> 00:04:21.209
And Response DART status.

61
00:04:21.209 --> 00:04:29.160
So you already see here in the object the expanded values where it is showing the okay and 200.

62
00:04:29.520 --> 00:04:33.180
So here I'm going to say status and I'm going to run the code.

63
00:04:33.600 --> 00:04:37.530
So we have the value of okay and status that is 200.

64
00:04:37.800 --> 00:04:44.610
The concern here is that if the response is okay, that means it was 200, everything was successful,

65
00:04:45.090 --> 00:04:47.820
then I would like to show the data.

66
00:04:48.300 --> 00:04:49.200
So I will see.

67
00:04:49.890 --> 00:04:57.300
For example, I will declare a variable LED data and here I'm going to say data is equal to await the

68
00:04:57.300 --> 00:04:59.910
response we received from the server.

69
00:04:59.910 --> 00:05:08.130
That is, this object has the data in text format in Jason format in binary format.

70
00:05:08.400 --> 00:05:13.860
There are various ways at the moment the data we have received can be converted direct.

71
00:05:14.510 --> 00:05:16.760
From Jason to the reliable data.

72
00:05:16.770 --> 00:05:20.630
So in a way we are passing the data using this Jason method.

73
00:05:21.320 --> 00:05:24.800
So as you see that I have done a wait and response doc.

74
00:05:24.800 --> 00:05:29.000
Jason So the data will be transferred to this data variable.

75
00:05:29.510 --> 00:05:32.030
Now let's try to display this data only.

76
00:05:32.030 --> 00:05:35.480
So I will simply say console.log data.

77
00:05:35.480 --> 00:05:36.450
So this is going to read.

78
00:05:36.780 --> 00:05:41.330
It will make sure that it waits for the data to retrieve in the first call.

79
00:05:41.780 --> 00:05:48.140
In the second call, this is going to be passed and then we are displaying the data.

80
00:05:48.200 --> 00:05:50.990
So let's run this and see how it happens.

81
00:05:52.050 --> 00:05:57.090
Now you see that the data is displayed and it is in the object literal format only.

82
00:05:57.630 --> 00:06:02.130
In fact, instead of writing Jason, you can also see text.

83
00:06:02.580 --> 00:06:03.420
Let me do that.

84
00:06:04.230 --> 00:06:05.460
Let's run the code again.

85
00:06:06.380 --> 00:06:08.390
Now you see that we have the text data.

86
00:06:08.900 --> 00:06:13.880
If you have return text once the next line you cannot write response, not JSON, because this is the

87
00:06:13.880 --> 00:06:16.350
stream which is already read by this response.

88
00:06:16.350 --> 00:06:21.230
DA Jason our text from body and the entire chunk of data is stored in the data.

89
00:06:21.770 --> 00:06:26.360
It's not like a body readable stream where the data is coming in pieces.

90
00:06:26.930 --> 00:06:32.840
If you have to deal with images, then instead of writing this text already some you may also write

91
00:06:33.140 --> 00:06:34.280
Blob as well.

92
00:06:35.310 --> 00:06:35.700
All right.

93
00:06:35.730 --> 00:06:41.820
Now, one more thing I just want to mention here is this is a kind of lengthier way in sort of writing

94
00:06:41.820 --> 00:06:46.950
this, a way you can use simple the simple syntax of promises only.

95
00:06:47.370 --> 00:06:50.730
In that case, what we can do, let me just remove all these things.

96
00:06:50.970 --> 00:06:53.790
The first thing is that even you do not need this.

97
00:06:54.150 --> 00:06:56.670
Let's say you write the Fed statement directly.

98
00:06:57.090 --> 00:07:00.570
Once the fetch is called, it's going to anyway return the promise.

99
00:07:00.570 --> 00:07:01.920
So you can say then, right?

100
00:07:01.920 --> 00:07:04.410
What I'm going to put that then on the next line.

101
00:07:04.410 --> 00:07:05.240
So I'll say then.

102
00:07:05.250 --> 00:07:10.110
So I'm chaining and then the response is received.

103
00:07:10.860 --> 00:07:15.810
What I just want is that I will use the response dot.

104
00:07:15.810 --> 00:07:17.820
Jason So that's the first thing I want.

105
00:07:18.570 --> 00:07:24.570
This will again return a promise which I can handle with another, then where the data will be received

106
00:07:24.570 --> 00:07:28.140
and that I'm going to display, I'll say console.log data.

107
00:07:28.650 --> 00:07:33.530
Now if you compare the earlier code and these three lines, which is actually not terminated even,

108
00:07:33.550 --> 00:07:35.520
it's a single line only because it is changing.

109
00:07:35.760 --> 00:07:37.050
So now let's run the code.

110
00:07:37.290 --> 00:07:39.060
You're going to get the same output.

111
00:07:39.870 --> 00:07:46.080
So instead of writing the code with async await, you can go with this way of code as well.

112
00:07:46.350 --> 00:07:51.420
It all depends on what your program situation and how you are writing the code, how your calls are

113
00:07:51.420 --> 00:07:51.960
managed.

114
00:07:52.290 --> 00:07:55.010
Depending on that, you can follow the syntax.

115
00:07:55.020 --> 00:07:57.450
Anyway, the output is similar so that doesn't matter.

116
00:07:58.020 --> 00:08:05.400
As discussed earlier, the fetch API by default makes a get request in case if you want to make a post

117
00:08:05.400 --> 00:08:08.640
request, then the optional object parameter can be used.

118
00:08:09.120 --> 00:08:14.970
We already have a specific format on the adjacent placeholder where it is going to return success if

119
00:08:14.970 --> 00:08:16.950
we add the record properly.

120
00:08:17.310 --> 00:08:22.680
So the only thing I will do is I just want to make, let's say, a request to these sort of users.

121
00:08:22.680 --> 00:08:25.020
I just want to make a request to another.

122
00:08:25.020 --> 00:08:27.180
You are allowed to choose, right?

123
00:08:27.180 --> 00:08:29.430
And here now I want to make a post request.

124
00:08:29.440 --> 00:08:34.679
I'm going to put a comma here and I'll put the object literal inside this object literal.

125
00:08:34.980 --> 00:08:39.000
The first thing I want is that the method is going to be the post method.

126
00:08:39.390 --> 00:08:42.120
Then the headers.

127
00:08:42.570 --> 00:08:44.039
Here you are going to set the had this.

128
00:08:44.039 --> 00:08:45.950
Now I'm going to send the JSON data here.

129
00:08:45.960 --> 00:08:52.590
So I'll say content, dash type, what is going to be the content type?

130
00:08:52.590 --> 00:08:59.310
So it's going to be application JSON and the character set is going to be.

131
00:09:00.760 --> 00:09:01.510
UTF.

132
00:09:02.890 --> 00:09:03.280
Eight.

133
00:09:03.970 --> 00:09:04.450
That's it.

134
00:09:05.050 --> 00:09:08.260
And the next thing I'm going to say, the body.

135
00:09:09.130 --> 00:09:13.510
I'll say Jason, not string ify.

136
00:09:14.170 --> 00:09:17.500
And I'll say to do now this to do what is this?

137
00:09:17.500 --> 00:09:19.930
Doo doo doo doo is going to be the data.

138
00:09:19.930 --> 00:09:25.710
So here I'm going to define the data also, let's say constitutes an object where I have, let's say

139
00:09:25.720 --> 00:09:30.250
user ID, so I'll say user ID, which is let's say 1001.

140
00:09:31.120 --> 00:09:34.660
Then this structure is defined by the API programmer.

141
00:09:34.660 --> 00:09:34.930
Right?

142
00:09:34.930 --> 00:09:37.890
So on JSON placeholder, this is what the structure is.

143
00:09:37.890 --> 00:09:39.280
So I am following that structure.

144
00:09:39.850 --> 00:09:43.330
When you work with your own program, there will be a different way, different feels.

145
00:09:43.330 --> 00:09:44.260
You will have to enter.

146
00:09:45.400 --> 00:09:46.600
And of course, the.

147
00:09:46.600 --> 00:09:49.010
Let's say there is one more field completed.

148
00:09:49.030 --> 00:09:50.560
Well, I'll say false.

149
00:09:50.890 --> 00:09:51.550
True or false?

150
00:09:51.550 --> 00:09:51.970
Whatever.

151
00:09:52.600 --> 00:09:54.120
So this total is the data.

152
00:09:54.130 --> 00:09:57.550
And that data you are passing to Marty with strings.

153
00:09:57.550 --> 00:10:03.730
If I after this data, this request is made, the next thing is going to be this.

154
00:10:03.730 --> 00:10:07.180
Only that is the then response will be there.

155
00:10:07.450 --> 00:10:07.810
Right.

156
00:10:07.810 --> 00:10:10.870
And we just want to see what is the response.

157
00:10:10.870 --> 00:10:12.850
So I'll put a console.log here.

158
00:10:13.170 --> 00:10:15.370
Response I want to display and that's it.

159
00:10:15.370 --> 00:10:16.600
I don't want this line now.

160
00:10:17.050 --> 00:10:19.570
So this code will make a post request.

161
00:10:19.570 --> 00:10:21.040
That means it will add the data.

162
00:10:21.340 --> 00:10:23.530
Let's try to run this and see what is the output.

163
00:10:24.070 --> 00:10:28.630
So here, if you see that start is to zero and that is the post request is successfully made.

164
00:10:28.900 --> 00:10:33.760
The decent placeholder is a fake API, so it does not actually add any record.

165
00:10:34.030 --> 00:10:34.330
Right.

166
00:10:34.330 --> 00:10:42.040
But when you have your own APIs, then certainly you can call and modify this method with post to delete,

167
00:10:42.370 --> 00:10:43.750
put, patch or whatever.

168
00:10:44.680 --> 00:10:51.860
Now in this case, what you see these headers, this headers are set for the request or you can see

169
00:10:51.890 --> 00:10:53.500
these are the request headers.

170
00:10:53.950 --> 00:10:59.950
The way we have request headers, we do also have access to the response headers as well.

171
00:11:00.970 --> 00:11:05.620
So for example, I just go to the last code which we tried.

172
00:11:05.650 --> 00:11:11.770
Now in this code, before the response is received, let's say here I try to display in fact, I do

173
00:11:11.770 --> 00:11:13.180
not want to display any data.

174
00:11:13.180 --> 00:11:16.330
No, I do not want to check with the state as is okay or not.

175
00:11:16.660 --> 00:11:23.680
I just want that I want to display response dot headers, number one.

176
00:11:24.220 --> 00:11:28.660
Number two, what I want is headers dot get here.

177
00:11:28.660 --> 00:11:31.900
I'm going to get the direct content type this.

178
00:11:31.900 --> 00:11:34.990
We start with the example as UDP request as well.

179
00:11:34.990 --> 00:11:35.340
Right.

180
00:11:35.350 --> 00:11:39.880
But here with fetch also, it's possible because we have the response header data.

181
00:11:40.480 --> 00:11:44.730
So now if I run this, you get the object headers object which has the data.

182
00:11:44.740 --> 00:11:50.740
Of course if you expand it and if you directly see the content type, then it is application Jason and

183
00:11:50.740 --> 00:11:51.160
character.

184
00:11:51.160 --> 00:11:52.600
So this UTF eight.

185
00:11:53.740 --> 00:12:00.010
As mentioned earlier, the Fetch API can also work with images, but that is the discussion for the

186
00:12:00.010 --> 00:12:04.630
forthcoming dedicated fetch an image or blob section.

187
00:12:05.260 --> 00:12:13.450
So to conclude, the Fetch API is a better option to make AJAX or SDP calls and is a newer way introduced

188
00:12:13.450 --> 00:12:14.680
after ESX.

189
00:12:15.160 --> 00:12:17.740
Let's discuss related questions of this topic.

190
00:12:18.460 --> 00:12:21.850
The first question is explain the Fetch API functionality.

191
00:12:21.970 --> 00:12:27.460
So now you already know that when it comes to making any objects call right when you want to add data.

192
00:12:27.700 --> 00:12:33.940
In short, when you want to perform CRUD operations, then you can use the factory API apart from current

193
00:12:33.940 --> 00:12:39.110
operations when it comes to downloading and uploading files dealing with the images.

194
00:12:39.130 --> 00:12:42.280
Various other options you can try with fetch API nowadays.

195
00:12:44.820 --> 00:12:49.200
The second question is how will you make a delete request with fetch API?

196
00:12:49.470 --> 00:12:51.120
Well, very simple here.

197
00:12:51.120 --> 00:12:54.390
In this example, you see that the post request is made.

198
00:12:54.690 --> 00:13:00.840
You sort of post what you have to do is you just have to say delete and that will be a delete request.

