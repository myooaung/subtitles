WEBVTT
1
00:00:07.150 --> 00:00:13.270
In this exercise, we are going to check whether given IP address is valid or not.

2
00:00:13.480 --> 00:00:17.110
Every developer knows what an IP address is.

3
00:00:17.380 --> 00:00:20.860
It is a unique computer ID on the internet.

4
00:00:21.100 --> 00:00:26.680
The IP address is divided into four parts separated by a dot.

5
00:00:27.400 --> 00:00:33.910
Not only that, but each part can have value between zero 2 to 55.

6
00:00:34.060 --> 00:00:39.160
If we look at a few valid IP addresses, then they will look like this.

7
00:00:39.730 --> 00:00:42.550
The last one is actually the local host.

8
00:00:42.700 --> 00:00:43.150
That is.

9
00:00:43.150 --> 00:00:45.730
127.0.0.1.

10
00:00:46.660 --> 00:00:52.030
As you can see, each part has value between zero and 255.

11
00:00:52.060 --> 00:00:57.250
You cannot have an IP address which has any part beyond that range.

12
00:00:57.250 --> 00:00:58.300
For example.

13
00:00:58.300 --> 00:01:01.240
59.0.0.1.

14
00:01:01.270 --> 00:01:06.280
Here 590 is invalid value because it is beyond 255.

15
00:01:06.310 --> 00:01:14.770
Similarly, any part out of these four parts must have a value between 0 to 255.

16
00:01:15.100 --> 00:01:24.100
So to validate an IP address, we check that it has four parts each separated by a dot and value between

17
00:01:24.100 --> 00:01:25.660
zero 2 to 55.

18
00:01:25.690 --> 00:01:29.130
These three conditions will validate an IP address.

19
00:01:29.140 --> 00:01:35.990
So let's discuss the pattern for any numeric value separated in four parts by a dot.

20
00:01:36.010 --> 00:01:42.940
We can think of slash D along with the qualifiers where we use curly brackets and just say one comma

21
00:01:42.940 --> 00:01:49.420
three that is one, two or three digits and the same for three more times.

22
00:01:49.840 --> 00:01:55.870
But in that case it will not check the value, which should be between zero and 255.

23
00:01:55.990 --> 00:02:04.180
In this case, we will use the range that is the square brackets and pipe sign for the alterations.

24
00:02:04.600 --> 00:02:07.590
Let's understand only one part in detail.

25
00:02:07.600 --> 00:02:11.800
As for the rest of the three parts, the validation will be the same.

26
00:02:12.490 --> 00:02:19.270
We will start the pattern by giving boundaries, using anchors, a carat and a dollar.

27
00:02:19.810 --> 00:02:27.850
Now we may have value beginning with 25, and the next digit can be 0 to 5.

28
00:02:28.720 --> 00:02:30.970
Or it may begin with two.

29
00:02:31.180 --> 00:02:42.130
Next digit can be between 0 to 4 and last digit between 0 to 9, or there might be zero or one occurring

30
00:02:42.130 --> 00:02:45.460
zero times, or at least one time.

31
00:02:45.910 --> 00:02:52.870
Or there may be zero or one time two digits ranging between 0 to 9.

32
00:02:53.380 --> 00:02:56.020
And at the end there will be a dot.

33
00:02:56.290 --> 00:03:05.410
So I will use slash dot and this pattern is for one section, but we need to put it three more times

34
00:03:05.410 --> 00:03:07.630
to execute the same validation.

35
00:03:07.630 --> 00:03:11.170
So the entire pattern will be like this.

36
00:03:12.060 --> 00:03:13.240
Easy, isn't it?

37
00:03:13.260 --> 00:03:15.030
So let's try it practically.

38
00:03:15.060 --> 00:03:22.230
We will begin with local host IP that is 127.0.0.1.

39
00:03:23.190 --> 00:03:24.750
Let's declare a variable.

40
00:03:26.340 --> 00:03:27.660
And the pattern.

41
00:03:30.250 --> 00:03:32.440
And we use the test method.

42
00:03:37.720 --> 00:03:39.190
So it is true.

43
00:03:39.220 --> 00:03:42.190
So the output says it is a valid IP.

44
00:03:42.220 --> 00:03:44.950
Let's change to another valid IP.

45
00:03:45.310 --> 00:03:49.210
254.176.3.102.

46
00:03:50.080 --> 00:03:51.460
And run the code.

47
00:03:51.910 --> 00:03:55.030
This also returns true as it is a valid IP.

48
00:03:55.060 --> 00:04:06.200
Now let's change it to some invalid IP like 450 6.9.8.0 where 456 is beyond the value.

49
00:04:06.220 --> 00:04:10.210
255 So the first section is invalid.

50
00:04:10.540 --> 00:04:11.800
Let's run the code.

51
00:04:13.560 --> 00:04:14.790
It says false.

52
00:04:15.440 --> 00:04:21.800
Now instead of first section, let's make the third section invalid and try the same again.

53
00:04:25.890 --> 00:04:27.460
So now we see false.

54
00:04:27.480 --> 00:04:33.090
This means if any section of IP address is invalid, then it will be checked.

55
00:04:33.120 --> 00:04:40.200
Even if you have more or less than four sections, let's say you have five sections or maybe three sections,

56
00:04:40.290 --> 00:04:42.630
it will be an invalid IP.

57
00:04:42.630 --> 00:04:48.690
So let's keep three sections here with valid value and see what is the output.

58
00:04:48.690 --> 00:04:56.340
I'll say 45.90 point 255 where each section is a valid section, let's run the code.

59
00:04:57.510 --> 00:05:03.420
So here the rejects pattern did not find four parts so it gave it false.

60
00:05:03.420 --> 00:05:09.390
You can try various other combinations if you have any in your mind on the same pattern.

