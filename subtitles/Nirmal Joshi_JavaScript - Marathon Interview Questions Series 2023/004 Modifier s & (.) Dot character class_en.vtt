WEBVTT
1
00:00:00.180 --> 00:00:04.320
Welcome to the third section of regular expression.

2
00:00:05.400 --> 00:00:09.180
Let's begin with modifier se in this section.

3
00:00:10.130 --> 00:00:15.500
This modifier is used with a special character class called DOT.

4
00:00:16.070 --> 00:00:24.680
Ideally, when you use a dot in regular expression pattern, that means you want to search for any character.

5
00:00:25.560 --> 00:00:28.320
Dot represents any character.

6
00:00:28.650 --> 00:00:33.840
For example, I want to search a word which begins with H.

7
00:00:34.080 --> 00:00:38.940
There can be any character between H and L, for example.

8
00:00:38.970 --> 00:00:41.040
So it can be written like this.

9
00:00:41.490 --> 00:00:47.040
Let's say I will declare a string which has Hello and Ola.

10
00:00:47.550 --> 00:00:54.470
So I will say h e low and space h o Allah.

11
00:00:55.590 --> 00:01:00.810
Now I want to apply a pattern where the string begins with h.

12
00:01:01.170 --> 00:01:02.580
There can be any character.

13
00:01:02.580 --> 00:01:06.840
So here we have E in the first word and or in the second word.

14
00:01:07.170 --> 00:01:09.360
And the third character is L.

15
00:01:09.780 --> 00:01:15.120
So I'm going to say message dot match and the pattern will be.

16
00:01:16.210 --> 00:01:18.100
Each dot.

17
00:01:18.100 --> 00:01:19.630
That means any character.

18
00:01:19.630 --> 00:01:25.330
And of course, l and of course I want to go for global search.

19
00:01:25.840 --> 00:01:27.460
So I'll say slash G.

20
00:01:28.320 --> 00:01:32.910
Let's also console.log the output and run the code.

21
00:01:35.070 --> 00:01:45.030
Now you can see that it has returned h, e, l and h all so h and L is the characters which we know.

22
00:01:45.030 --> 00:01:50.430
But in between that is going to be one character, but it can be any character.

23
00:01:50.430 --> 00:01:53.070
In such case, you use the dot.

24
00:01:53.100 --> 00:01:57.090
That's a kind of character class we have in regular expression.

25
00:01:57.720 --> 00:02:02.760
So it has returned two values and both begin with H.

26
00:02:02.790 --> 00:02:08.310
Then any character in this case E or O, and next character is L.

27
00:02:09.150 --> 00:02:19.260
Now assume that after etch in Hello instead of E, we have a new line that is slash n, so let's change

28
00:02:19.260 --> 00:02:23.970
E to slash n and run the code.

29
00:02:26.340 --> 00:02:29.670
Now, as you see, that hole is returned.

30
00:02:29.670 --> 00:02:36.120
But the search did not work for etch then slash MN and O.

31
00:02:36.840 --> 00:02:44.730
The reason is DOT does search for any single character, but if there is a new line, then that new

32
00:02:44.730 --> 00:02:49.080
line character is not treated as any character by the dot.

33
00:02:49.440 --> 00:02:53.610
Suppose you want that even new line should be searched.

34
00:02:53.610 --> 00:03:01.200
When you say any character using dot, then you can use the slash as flag or modifier.

35
00:03:01.650 --> 00:03:06.510
Let's change the code by adding s modifier and run the code again.

36
00:03:09.320 --> 00:03:20.930
Now edge slash an l that is h new line l is also surged so modifier as tells the dot to consider the

37
00:03:20.930 --> 00:03:25.070
new line as any character in the search pattern.

38
00:03:26.170 --> 00:03:33.340
At the time of creating this tutorial slash s modifier works in chrome but doesn't work with Firefox

39
00:03:33.340 --> 00:03:34.510
and i.e..

