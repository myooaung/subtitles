WEBVTT
1
00:00:00.180 --> 00:00:04.320
We have seen various modifiers or flags so far.

2
00:00:04.530 --> 00:00:06.770
Now let's understand the slash.

3
00:00:06.780 --> 00:00:10.530
Why are sticky modifier or sticky flag?

4
00:00:10.830 --> 00:00:16.470
So before we understand this flag, there are a few important points we need to discuss.

5
00:00:17.160 --> 00:00:21.120
I will begin with the XY method first.

6
00:00:21.810 --> 00:00:29.340
This is a kind of method which performs a search and called on the regular expression pattern.

7
00:00:29.910 --> 00:00:34.830
For example, let's declare a string where I have some value here.

8
00:00:36.000 --> 00:00:40.260
Now I'm going to define another variable which will contain the pattern.

9
00:00:40.500 --> 00:00:42.960
The pattern I want to search the world.

10
00:00:42.960 --> 00:00:45.620
I want to search is OTI.

11
00:00:45.630 --> 00:00:48.840
So I'm going to put forward slashes.

12
00:00:48.840 --> 00:00:51.030
And in between I write this word.

13
00:00:51.330 --> 00:00:53.040
Now let's try to print this.

14
00:00:53.040 --> 00:00:59.250
I'll say pattern dot xy and inside that we are going to pass the string.

15
00:00:59.610 --> 00:01:06.390
Now, when we run this, you see that the output is oti and index one that is on the first index.

16
00:01:06.390 --> 00:01:11.220
Oti word is found because the search started from this string.

17
00:01:11.220 --> 00:01:18.270
The zeroth index contains n first index is oh two is t, and so on.

18
00:01:18.270 --> 00:01:22.740
In the above code oti actually occurs more than once.

19
00:01:22.770 --> 00:01:27.390
Of course we can put a loop for the string and we can search till the end.

20
00:01:27.390 --> 00:01:35.970
But at the moment let's add one more XY method which will actually search for the next occurrence of

21
00:01:35.970 --> 00:01:37.170
the word OTI.

22
00:01:37.260 --> 00:01:40.500
So I'm going to add console.log again.

23
00:01:40.500 --> 00:01:45.570
And of course I'm running the I'm executing the XY method one more time.

24
00:01:45.570 --> 00:01:49.380
So I'll say pattern dot xy and the string.

25
00:01:50.220 --> 00:01:51.390
Let's run the code.

26
00:01:53.040 --> 00:01:57.270
As you can see in the second line, it says index one.

27
00:01:58.020 --> 00:02:01.560
This means the search is not for the entire string.

28
00:02:01.980 --> 00:02:04.080
So how do we notify?

29
00:02:04.200 --> 00:02:10.830
You already know as there is a modifier called slash G which does the global search.

30
00:02:10.830 --> 00:02:15.060
So let's add slash G and run the code again.

31
00:02:16.390 --> 00:02:17.770
Now you see the output.

32
00:02:17.770 --> 00:02:20.650
In the first case, it says index one.

33
00:02:20.700 --> 00:02:29.290
Now, in the second case it says index nine, Y nine, because the second O.T. is on the ninth index

34
00:02:29.980 --> 00:02:33.430
because we want to search all the odds existing.

35
00:02:33.970 --> 00:02:39.190
As mentioned earlier, we can put a loop or here for this score.

36
00:02:39.220 --> 00:02:50.350
Let me add to more XY method so I'll say console.log execute the method again, the XY method.

37
00:02:50.950 --> 00:02:56.650
This means now that XY will search in the string four times.

38
00:02:57.010 --> 00:03:03.130
Of course it will begin with the zeroth index and it'll go till the very end of the string.

39
00:03:03.400 --> 00:03:09.550
Now, as you can see, the output that in the first case it says one that means on the first index or

40
00:03:09.550 --> 00:03:14.140
T was found, then on the ninth index or again found.

41
00:03:14.140 --> 00:03:18.940
And then the last found is on index number 29.

42
00:03:19.420 --> 00:03:21.340
After that it returns null.

43
00:03:21.340 --> 00:03:30.400
So for this last XY, the output is null because there is no more or T word to be searched in this string.

44
00:03:30.730 --> 00:03:36.700
So now we are executing the XY four times and oti x three times.

45
00:03:36.700 --> 00:03:40.540
So for the last console.log log the output is null.

46
00:03:40.840 --> 00:03:44.010
So this is the purpose of the XY method.

47
00:03:44.020 --> 00:03:47.230
Now let's try to understand one more property.

48
00:03:47.230 --> 00:03:50.590
The property name is last index property.

49
00:03:50.860 --> 00:03:55.540
Now because we add slash g that is global search.

50
00:03:55.570 --> 00:04:01.360
Every time you run XY, it will search from the next position.

51
00:04:01.930 --> 00:04:09.760
For example, the world was searched on one that means zero one and two.

52
00:04:09.760 --> 00:04:13.450
So one and two characters are searched and displayed.

53
00:04:13.450 --> 00:04:17.410
So the next search will begin from index number three.

54
00:04:17.649 --> 00:04:21.550
The next search of XY will begin from index number nine.

55
00:04:21.550 --> 00:04:22.750
Ten is the word.

56
00:04:22.750 --> 00:04:26.230
So from 11th, the next search will start.

57
00:04:27.210 --> 00:04:32.670
The last index property returns the index from which the next search will begin.

58
00:04:32.940 --> 00:04:39.000
Let's try to display a pattern dot last index before every FCC call.

59
00:04:39.240 --> 00:04:46.260
As I've just mentioned that the last index will display from which position the search will begin.

60
00:04:51.480 --> 00:04:54.120
Let's run this and you will realize this.

61
00:04:54.960 --> 00:04:59.190
As you can see from zero eight index, the search is going to begin.

62
00:04:59.190 --> 00:05:01.640
Then the HCC is executed.

63
00:05:01.650 --> 00:05:05.280
As you can see, the first last index value is zero.

64
00:05:05.280 --> 00:05:13.890
It means the search will begin from that position after the FCC call because the first order is searched

65
00:05:13.890 --> 00:05:16.650
and now it should begin with third position.

66
00:05:16.650 --> 00:05:19.650
The next last index returns three.

67
00:05:19.650 --> 00:05:23.970
And this goes on till the last word is found.

68
00:05:24.330 --> 00:05:29.250
Last index also allows to change the beginning of search.

69
00:05:29.250 --> 00:05:33.240
For example, let's begin the search from index number three.

70
00:05:34.260 --> 00:05:37.350
So what will I do in the same code?

71
00:05:37.380 --> 00:05:41.820
I will add pattern dot last index is equal to three.

72
00:05:41.970 --> 00:05:44.640
This will set last indexes three.

73
00:05:44.670 --> 00:05:51.000
It means search will begin from index three and not from the zeroth index.

74
00:05:51.120 --> 00:05:57.360
Now you see that the first string searched was at index nine, then 11.

75
00:05:58.270 --> 00:06:01.660
31 and then it surged from index zero.

76
00:06:01.900 --> 00:06:09.940
So last index is a property which can also decide from which position you want to search when the XY

77
00:06:09.940 --> 00:06:11.140
is executed.

78
00:06:11.410 --> 00:06:14.800
We have seen XY last index.

79
00:06:15.220 --> 00:06:20.110
One more pattern I want to explain before we go to the sticky flag.

80
00:06:20.110 --> 00:06:29.920
And that pattern is slash w when you write slash w plus it means this pattern searches for words in

81
00:06:29.920 --> 00:06:30.610
a string.

82
00:06:31.120 --> 00:06:38.950
For example, in the very same code, let's just say pattern is equal to W plus.

83
00:06:38.950 --> 00:06:41.680
And of course we need to have a global search.

84
00:06:42.550 --> 00:06:43.770
Let's run this.

85
00:06:45.500 --> 00:06:55.370
As you can see that if I have redone X method three times, it returns a word every time the XY is executed.

86
00:06:55.820 --> 00:07:03.320
Every time XY is called, it will search for a new word in the string because the regular expression

87
00:07:03.320 --> 00:07:10.190
pattern given is slash w plus and of course slash g modifier as well.

88
00:07:10.220 --> 00:07:17.690
If modifier G was not there, it would have returned a single word and stopped searching.

89
00:07:17.930 --> 00:07:26.750
Now we know sufficient prerequisite to understand the example of flag or modifier slash why we will

90
00:07:26.750 --> 00:07:29.660
change the previous example to understand it.

91
00:07:30.470 --> 00:07:30.860
Here.

92
00:07:30.860 --> 00:07:35.540
I'm using last index to change the index of search.

93
00:07:35.660 --> 00:07:38.770
So let's say I have this string.

94
00:07:38.780 --> 00:07:42.170
I'm going to say the pattern W plus slash G.

95
00:07:42.590 --> 00:07:45.770
The only line I'm adding here is I'll say pattern.

96
00:07:46.250 --> 00:07:48.500
Last index is equal to three.

97
00:07:51.120 --> 00:07:53.040
Let's try to console that log.

98
00:07:59.150 --> 00:08:07.160
As you can see, because the search started at position three due to pattern last index is equal to

99
00:08:07.160 --> 00:08:08.270
three statement.

100
00:08:08.270 --> 00:08:14.000
The output is easy, which is the next word from position three.

101
00:08:14.000 --> 00:08:17.360
But the important point is on index three.

102
00:08:17.360 --> 00:08:19.190
There isn't any word.

103
00:08:19.220 --> 00:08:20.650
It is a space.

104
00:08:20.660 --> 00:08:26.240
This means the search actually did not start with exact position.

105
00:08:26.480 --> 00:08:32.030
If it was started on the exact position then it would have been null.

106
00:08:32.059 --> 00:08:39.350
Assume that you want to give an instruction to the core that it should consider the exact position.

107
00:08:39.350 --> 00:08:43.909
Then you use the sticky flag that is slash y.

108
00:08:43.909 --> 00:08:48.140
So let's add slash y in the code and run it again.

109
00:08:51.120 --> 00:09:00.090
Now you can see the output is null because we have given that the search should begin on index number

110
00:09:00.090 --> 00:09:00.600
three.

111
00:09:00.600 --> 00:09:04.530
And we also expect that a word should be searched.

112
00:09:04.530 --> 00:09:12.090
But if there is no word in the previous example, it started from the fourth position and it displayed

113
00:09:12.090 --> 00:09:12.870
the word.

114
00:09:12.870 --> 00:09:21.990
But here when you say slash y, it means if there is no word on the position three, it returns null

115
00:09:21.990 --> 00:09:27.420
just to check it does a search word starting from exact position.

116
00:09:27.420 --> 00:09:33.810
Let's change the last index to four where there is a word existing and run the code.

117
00:09:37.260 --> 00:09:40.950
Now you see that it returns the word easy.

118
00:09:41.220 --> 00:09:47.280
And of course, this wire must be easy now for you to understand as well.

119
00:09:47.730 --> 00:09:54.840
So to conclude, we use slash Y when we want that the search should begin from the exact position.

120
00:09:55.260 --> 00:10:02.280
This modifier is newly introduced and does not work in all the browsers at the time of creating this

121
00:10:02.280 --> 00:10:03.030
tutorial.

