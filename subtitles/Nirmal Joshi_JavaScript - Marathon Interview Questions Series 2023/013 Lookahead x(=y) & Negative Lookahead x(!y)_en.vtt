WEBVTT
1
00:00:00.120 --> 00:00:05.190
We have already seen about anchors and word boundary assertions.

2
00:00:05.580 --> 00:00:11.610
In this chapter, we are going to discuss about look ahead and negative lookahead assertion.

3
00:00:11.880 --> 00:00:14.670
Let's begin with Lookahead assertion.

4
00:00:14.850 --> 00:00:19.140
To understand, we will directly jump into a practical example.

5
00:00:19.590 --> 00:00:27.420
Let's say we want to find all the words where the last character is a comma, that is word or character

6
00:00:27.420 --> 00:00:29.370
followed by a comma.

7
00:00:30.300 --> 00:00:33.480
If we have a string like this, then hi.

8
00:00:33.480 --> 00:00:38.460
And you are such words which are followed by a comma at the end.

9
00:00:38.760 --> 00:00:43.440
That is for each word we will use slash W plus.

10
00:00:43.440 --> 00:00:49.380
Then you look ahead for comma using question mark equals to comma.

11
00:00:49.380 --> 00:00:51.780
That is the character you want to search for.

12
00:00:52.600 --> 00:00:56.200
So the pattern will be slash W plus.

13
00:00:56.680 --> 00:00:58.540
Then I want to look ahead.

14
00:00:58.870 --> 00:01:01.240
So I will use parentheses.

15
00:01:02.200 --> 00:01:03.140
Question mark.

16
00:01:03.160 --> 00:01:05.590
Equal to and the comma.

17
00:01:06.310 --> 00:01:07.050
That's it.

18
00:01:07.060 --> 00:01:08.620
Let's try it practically.

19
00:01:09.100 --> 00:01:10.930
I will declare the string variable.

20
00:01:11.660 --> 00:01:12.380
Hi.

21
00:01:12.680 --> 00:01:14.930
Is it you or not?

22
00:01:14.930 --> 00:01:19.790
And the pattern will be slash W plus, which is to find a word.

23
00:01:20.300 --> 00:01:21.950
I'll put a parentheses.

24
00:01:21.980 --> 00:01:23.040
A question mark.

25
00:01:23.060 --> 00:01:26.810
Equals to that is I'm comparing the equality and a comma.

26
00:01:27.410 --> 00:01:31.220
Let's try console.log with a match method and run the code.

27
00:01:34.740 --> 00:01:38.670
And you have all those words having comma at the end.

28
00:01:39.330 --> 00:01:44.160
So now let's understand the negative look ahead assertion.

29
00:01:49.610 --> 00:01:53.540
In the previous example, we were comparing equality.

30
00:01:53.630 --> 00:02:01.550
But what if you want to apply not equality, that is finding all words not ending with a comma.

31
00:02:02.120 --> 00:02:09.650
So in that case you use question mark, exclamation and the character.

32
00:02:10.410 --> 00:02:15.300
So instead of using equal to sign, you are using an exclamation sign.

33
00:02:16.020 --> 00:02:19.320
Let's change the pattern and run the code again.

34
00:02:19.710 --> 00:02:22.020
I will say exclamation.

35
00:02:22.710 --> 00:02:24.030
And run the code.

36
00:02:26.090 --> 00:02:26.600
All right.

37
00:02:26.600 --> 00:02:35.210
So we get all the values not followed by a comma, but still we do not have our desired result as we

38
00:02:35.210 --> 00:02:37.640
are not getting complete words.

39
00:02:38.360 --> 00:02:43.310
How can you make sure that you get whole words only?

40
00:02:43.760 --> 00:02:44.990
It's very simple.

41
00:02:45.320 --> 00:02:48.620
Use the word boundary slash B.

42
00:02:48.830 --> 00:02:52.220
Let's add slash B and try running the code.

43
00:02:56.660 --> 00:02:59.580
And now we get the output we wanted.

44
00:02:59.600 --> 00:03:10.460
So if I write x parentheses question mark equals to Y, then it checks for y following x.

45
00:03:10.460 --> 00:03:18.380
And if I write x question mark, exclamation y, then it's a negative lookahead assertion which checks

46
00:03:18.380 --> 00:03:21.260
for y not following x.

47
00:03:21.500 --> 00:03:24.110
Let's try one more modification.

48
00:03:24.110 --> 00:03:31.130
In the above example, we want to avoid all words ending with comma and question mark.

49
00:03:31.130 --> 00:03:39.260
In that case, we can use the pipe sign to give or condition because question Mark is a special character.

50
00:03:39.260 --> 00:03:44.300
We will use escape sequence slash and the question mark.

51
00:03:48.420 --> 00:03:56.430
So the pattern will be question mark, exclamation then comma or the question mark, which you want

52
00:03:56.430 --> 00:03:57.390
to avoid.

53
00:03:57.750 --> 00:03:59.160
Let's run the code.

54
00:04:00.760 --> 00:04:07.300
And now we don't have a not word in the list which was appearing in the previous output.

55
00:04:08.260 --> 00:04:16.510
So here we have searched for all the words not ending with comma and question mark.

