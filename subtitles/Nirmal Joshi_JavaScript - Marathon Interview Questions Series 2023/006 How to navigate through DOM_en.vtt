WEBVTT
1
00:00:00.060 --> 00:00:04.320
In this question, we are discussing navigation through Dom.

2
00:00:04.650 --> 00:00:11.940
The category of this question is, of course, domain web and there will be six related questions we

3
00:00:11.940 --> 00:00:12.930
are going to discuss.

4
00:00:13.350 --> 00:00:19.830
We have already discussed what is Dom and how the DOM tree is in window and document object.

5
00:00:19.830 --> 00:00:27.720
Related questions are even in event bubbling though we also had a window object as a top element in

6
00:00:27.720 --> 00:00:28.440
that figure.

7
00:00:28.920 --> 00:00:37.050
But here we have to concentrate on everything below the document object as we are discussing navigation

8
00:00:37.050 --> 00:00:39.420
or traversal through the DOM tree.

9
00:00:39.930 --> 00:00:43.260
So the document object will be the entry point.

10
00:00:43.950 --> 00:00:49.260
Let's create a program and then we also see the same code as a DOM tree.

11
00:00:49.740 --> 00:00:53.370
This is the output of the code which I'm going to show you in a moment.

12
00:00:53.640 --> 00:00:57.000
We have two divisions, the first and second Division.

13
00:00:57.270 --> 00:01:05.280
Inside the first Division, we have an unordered list inside which we have to analyze, whereas in second

14
00:01:05.280 --> 00:01:08.100
division we have an input and a command button.

15
00:01:08.250 --> 00:01:09.240
Let's check the code.

16
00:01:09.240 --> 00:01:11.010
Now, it is the very same thing.

17
00:01:11.520 --> 00:01:18.810
The only thing is I have given an idea to the first division that is the one which we will use in future.

18
00:01:18.990 --> 00:01:25.890
And also I have configured a function on click event of the button where we can try a few statements.

19
00:01:26.070 --> 00:01:32.610
So discord, if we imagine as a DOM tree, this is how it looks below the document, we see that the

20
00:01:32.790 --> 00:01:37.500
DML is the main element inside which we have the head and the body.

21
00:01:37.920 --> 00:01:40.650
They are at the same level inside the body.

22
00:01:40.740 --> 00:01:43.080
We have division and also the script.

23
00:01:43.560 --> 00:01:45.450
So this is how the Dom tree looks.

24
00:01:45.810 --> 00:01:51.780
And inside each division you see that there are actions and allies and inputs and buttons.

25
00:01:52.050 --> 00:01:55.560
So this is what a dom tree would look for the same code.

26
00:01:55.980 --> 00:01:59.310
Now let's talk about few terminologies used.

27
00:01:59.310 --> 00:02:04.290
While we want to navigate through the DOM here on the button click.

28
00:02:04.380 --> 00:02:05.490
I will simply try.

29
00:02:05.490 --> 00:02:11.400
First of all, console dart log document, dart document element.

30
00:02:11.520 --> 00:02:17.250
Now this is one of the property which actually refers to the top element in the document object and

31
00:02:17.250 --> 00:02:18.510
that is the DML.

32
00:02:18.600 --> 00:02:24.600
So if I just save and try to see the output, I will open the developer tool here so we can see the

33
00:02:24.600 --> 00:02:32.430
console will refresh the screen and click on the button to see that what exactly this document element

34
00:02:32.430 --> 00:02:32.910
shows.

35
00:02:33.280 --> 00:02:40.470
Now you see that it displays the content of HDMI right from the beginning of HDMI till the end.

36
00:02:40.740 --> 00:02:49.620
So this means the document element property can refer to the topmost node in the DOM tree below the

37
00:02:49.620 --> 00:02:50.160
document.

38
00:02:50.170 --> 00:02:55.380
Remember now we can try one more property with document and that is the body.

39
00:02:55.730 --> 00:03:00.180
I can say body or even document art head.

40
00:03:01.430 --> 00:03:02.080
We can do this.

41
00:03:02.090 --> 00:03:08.330
Rather I should keep this head before body and we try to see what exactly it shows.

42
00:03:08.600 --> 00:03:11.300
Refreshing the screen and clicking the button.

43
00:03:11.810 --> 00:03:18.320
So now you see that while you see Document Art Head, it does display all the content of how to behave

44
00:03:18.770 --> 00:03:20.660
and also the body.

45
00:03:21.140 --> 00:03:23.450
The entire content of the body is displayed.

46
00:03:23.900 --> 00:03:32.090
So whenever you try to access any node, you do have body, head and various other ways to do it.

47
00:03:32.510 --> 00:03:39.680
But when it comes to navigation, you need to look through all the elements, or I should say all the

48
00:03:39.680 --> 00:03:47.600
nodes, because the tree which you see has various nodes, each is linked with parent and child relationship.

49
00:03:48.140 --> 00:03:52.630
So here that is a property called Dot Child Nodes.

50
00:03:52.640 --> 00:03:53.930
So let's begin with this.

51
00:03:54.260 --> 00:04:02.300
Now I'll just remove these two and now we try to see what exactly displays when you say body dot child

52
00:04:02.300 --> 00:04:07.100
nodes, as you see that it displays seven child nodes.

53
00:04:07.490 --> 00:04:10.750
In fact, I can also get the count of it.

54
00:04:10.760 --> 00:04:13.070
Let me also add one more statement here.

55
00:04:13.370 --> 00:04:20.660
I'll say child nodes, dot length, that will just show me the number of elements, rather number of

56
00:04:20.660 --> 00:04:22.490
nodes we have in the body.

57
00:04:22.820 --> 00:04:23.780
So here it is.

58
00:04:23.960 --> 00:04:24.860
There are seven.

59
00:04:24.860 --> 00:04:25.280
Right.

60
00:04:25.280 --> 00:04:28.490
And also it does display various nodes here.

61
00:04:28.940 --> 00:04:33.470
Now, the question is, do we really see that there are seven nodes or not?

62
00:04:33.830 --> 00:04:36.920
Or rather, I would say, where is this text node?

63
00:04:37.730 --> 00:04:38.090
Yes.

64
00:04:38.090 --> 00:04:39.350
Then there is a division.

65
00:04:39.680 --> 00:04:41.030
But again, that is a text.

66
00:04:41.240 --> 00:04:42.500
Then we have a division.

67
00:04:42.860 --> 00:04:43.790
We have a text.

68
00:04:44.000 --> 00:04:48.290
So the text which we see in between has no relevance in the output.

69
00:04:48.470 --> 00:04:49.490
Why is it so?

70
00:04:50.150 --> 00:04:57.470
The reason is that every tab, every new line, every whitespace you have in the HTML find.

71
00:04:57.680 --> 00:04:58.730
Right now we have it.

72
00:04:58.730 --> 00:05:02.660
You see this after the head we have an end to.

73
00:05:02.810 --> 00:05:04.340
That's why this is on the new line.

74
00:05:04.610 --> 00:05:07.220
Let's remove this new line after this body beginning.

75
00:05:07.790 --> 00:05:13.310
I just save this because the first node we see here is the text node, and that is because there was

76
00:05:13.310 --> 00:05:14.240
a new line here.

77
00:05:14.840 --> 00:05:15.040
Right?

78
00:05:15.440 --> 00:05:19.190
Now I will refresh and click.

79
00:05:20.060 --> 00:05:23.540
Now you see that there are only six that is six nodes.

80
00:05:24.020 --> 00:05:30.380
So every time you have an and turkey, maybe a whitespace or tab that will also be treated as a text

81
00:05:30.380 --> 00:05:32.300
node and that is displayed here.

82
00:05:32.750 --> 00:05:34.930
So don't worry about it just in case.

83
00:05:34.940 --> 00:05:41.780
Insert of all the nodes, let's say you want only those nodes which are HTML elements, then you can

84
00:05:41.780 --> 00:05:43.340
simply say children.

85
00:05:43.790 --> 00:05:45.980
Then you will get the reference of the children.

86
00:05:45.980 --> 00:05:49.610
That is all edge HTML that is regular elements here.

87
00:05:50.150 --> 00:05:54.350
Let's do this refreshing and clicking.

88
00:05:54.650 --> 00:06:00.630
Now you see you have division, you have scraped all such things, but there is no such normal text.

89
00:06:01.280 --> 00:06:07.070
So this is a better way in case if you just want to deal with all the element nodes.

90
00:06:07.460 --> 00:06:12.080
Also, the way we tried the script tag and we tried to display the body here.

91
00:06:12.500 --> 00:06:15.680
What if I tried to display body in the head section?

92
00:06:15.680 --> 00:06:17.390
Let's also have a look at it.

93
00:06:17.390 --> 00:06:24.240
I'll put a script tag here, which is a valid tag because generally we see that people do use head tag.

94
00:06:24.260 --> 00:06:26.300
Also, I'll say console.log.

95
00:06:26.990 --> 00:06:31.160
The first thing I want to displays document are body.

96
00:06:33.050 --> 00:06:33.220
Okay.

97
00:06:33.320 --> 00:06:34.010
Refreshing.

98
00:06:34.550 --> 00:06:35.450
And click here.

99
00:06:36.530 --> 00:06:42.110
In fact, the moment I refresh, you see that there is a null display because that console anyway,

100
00:06:42.110 --> 00:06:46.100
we did not put on any event, it was in the header section.

101
00:06:46.430 --> 00:06:48.080
So it does display null.

102
00:06:48.110 --> 00:06:49.040
Why is it so?

103
00:06:49.280 --> 00:06:54.350
Because when the page is loaded in this section we have return body.

104
00:06:54.350 --> 00:06:58.400
And at this point of time there is nothing added to the body.

105
00:06:58.820 --> 00:07:01.010
So that's why it returns null.

106
00:07:01.160 --> 00:07:04.100
NULL means there is nothing in the body as yet.

107
00:07:04.250 --> 00:07:10.160
So these were few properties related to child nodes and document object itself.

108
00:07:10.460 --> 00:07:16.310
But if you want to navigate through the tree, you must have some way to loop through the last node

109
00:07:16.310 --> 00:07:16.940
of the tree.

110
00:07:17.180 --> 00:07:21.380
And for the same thing, the document has several properties.

111
00:07:21.470 --> 00:07:28.190
You can navigate upward, downward, even sideways, using various types of properties.

112
00:07:28.370 --> 00:07:35.630
Let's first of all try one very important property, GA child nodes, and we are going to put a loop

113
00:07:35.810 --> 00:07:39.200
which will help us to go through all the children.

114
00:07:39.710 --> 00:07:48.050
Remember, when I say children of body, that means the child which is inside division is actually not

115
00:07:48.050 --> 00:07:50.570
a direct child of the document.

116
00:07:51.080 --> 00:07:58.040
So now I will remove this script which is not needed, and we are going to put a loop until the child

117
00:07:58.040 --> 00:07:59.510
nodes length.

118
00:07:59.540 --> 00:08:01.130
We are going to look through.

119
00:08:01.130 --> 00:08:02.450
So I'll have a for loop here.

120
00:08:02.690 --> 00:08:06.860
I'm being when I say led I is equal to zero.

121
00:08:07.130 --> 00:08:15.060
I less then document art body not child node start length then A-plus plus.

122
00:08:15.470 --> 00:08:25.340
And what we want to displays console.log document dart body dart child nodes because it's an array like

123
00:08:25.340 --> 00:08:28.910
object, which we saw earlier when we try to display all child nodes.

124
00:08:29.290 --> 00:08:29.460
Right.

125
00:08:29.480 --> 00:08:35.690
So this will also display the text division you well, whatever you have inside your body directly.

126
00:08:35.690 --> 00:08:39.980
In our case that is no UDL as a direct children to the body.

127
00:08:40.460 --> 00:08:41.309
Let's run this.

128
00:08:41.630 --> 00:08:47.410
So now you see that each and every node, whether it's a text node or a division or script even, right,

129
00:08:47.420 --> 00:08:51.050
everything is part of the body and that we have loop through.

130
00:08:51.890 --> 00:08:57.620
As I also mentioned, children is something which can allow you to access only the regular elements.

131
00:08:58.070 --> 00:09:01.940
JavaScript also has various other properties which we are going to try.

132
00:09:01.970 --> 00:09:08.630
Now, right now we have tried all these methods with body, but we can try all these methods for this

133
00:09:08.630 --> 00:09:09.440
division also.

134
00:09:09.440 --> 00:09:12.860
And that's the reason why I have already taken an idea of division.

135
00:09:12.870 --> 00:09:13.820
So let's do that.

136
00:09:14.060 --> 00:09:17.060
I will just get the reference of division all the time.

137
00:09:17.060 --> 00:09:19.790
I'll select or rather const this one.

138
00:09:19.790 --> 00:09:27.230
This is the reference of Division one and I will say document dot get element by ID and this one.

139
00:09:27.590 --> 00:09:29.000
So now we have the reference.

140
00:09:29.420 --> 00:09:31.940
Imagine that instead of document out body.

141
00:09:32.180 --> 00:09:34.510
I just want to give this one.

142
00:09:34.520 --> 00:09:35.000
That's it.

143
00:09:35.540 --> 00:09:40.220
So now this will give you all the details of division, all child nodes of this one.

144
00:09:40.400 --> 00:09:41.870
Let's save this and try it.

145
00:09:44.800 --> 00:09:46.450
So now what do we have in this one?

146
00:09:46.900 --> 00:09:49.930
We have the enter, that is the text nor we have each one.

147
00:09:50.260 --> 00:09:51.630
Again, that is a new lines.

148
00:09:51.630 --> 00:09:52.210
So text.

149
00:09:52.540 --> 00:09:55.060
Then we have a UL and then we have text.

150
00:09:55.270 --> 00:09:59.890
Now see, this ally is not a direct children of de one.

151
00:10:00.100 --> 00:10:00.410
Right?

152
00:10:00.430 --> 00:10:04.870
It is actually called as a descendant because it is a grandchild.

153
00:10:05.350 --> 00:10:09.130
So we call this as a direct child, whereas this is the descendant.

154
00:10:09.700 --> 00:10:15.520
So any level of children we may have in a dormitory, but when you say child knows, it's going to give

155
00:10:15.520 --> 00:10:19.480
you list of the direct children only to access the children.

156
00:10:19.630 --> 00:10:21.790
We do also have other properties.

157
00:10:22.000 --> 00:10:27.010
Let's try two properties here first child and last child and see what happens.

158
00:10:27.040 --> 00:10:32.550
Now we are going to try with this only rather than using the document our body we go with the.

159
00:10:32.800 --> 00:10:34.360
So here I'll say console.log.

160
00:10:34.910 --> 00:10:37.570
They want our first child now.

161
00:10:37.570 --> 00:10:39.100
Which is the first child.

162
00:10:39.100 --> 00:10:39.880
That's the question.

163
00:10:40.510 --> 00:10:43.570
The first child will be the text nought because there is an enter.

164
00:10:43.570 --> 00:10:44.590
That is a new line here.

165
00:10:44.590 --> 00:10:44.920
Right.

166
00:10:45.430 --> 00:10:48.580
So if I run this.

167
00:10:52.320 --> 00:10:54.090
It's going to tell me the text.

168
00:10:54.270 --> 00:10:57.680
You can explore this text to know that what does it contain?

169
00:10:57.690 --> 00:11:00.960
And as you can see that it contains only the new line character.

170
00:11:01.440 --> 00:11:02.900
So white spaces, right?

171
00:11:02.910 --> 00:11:07.590
All such things are actually the text nodes added in the DOM tree.

172
00:11:07.740 --> 00:11:09.030
But we don't want that.

173
00:11:09.210 --> 00:11:11.220
Let's say we want a proper element.

174
00:11:11.220 --> 00:11:14.320
Not every nor do we want to have as an output.

175
00:11:14.340 --> 00:11:19.080
Then we do also have first element child property.

176
00:11:19.170 --> 00:11:24.540
You would generally see that if there is a first child, then that is also first element child.

177
00:11:24.690 --> 00:11:28.500
If there is a lost child, you will see that last element change.

178
00:11:28.510 --> 00:11:34.560
So this element, when you add is going to return the proper element, not any other text.

179
00:11:34.560 --> 00:11:34.860
No.

180
00:11:35.070 --> 00:11:35.390
Right.

181
00:11:35.490 --> 00:11:36.420
Let's do this.

182
00:11:38.120 --> 00:11:42.500
Now if you click, you see the first proper element, right?

183
00:11:42.500 --> 00:11:46.340
Regular element we have in the day one is each one.

184
00:11:46.640 --> 00:11:47.630
So that is a return.

185
00:11:48.950 --> 00:11:55.520
Similarly, the way we have force chain, we do also have last mile and last element chain.

186
00:11:55.730 --> 00:12:02.930
So to access the children, to access the child, you have first child, first element child, last

187
00:12:02.930 --> 00:12:07.190
child and last element child properties of any DOM tree.

188
00:12:07.190 --> 00:12:14.210
Nor even with these elements you have a property called node name, right?

189
00:12:14.210 --> 00:12:18.620
If you say in your name it will return the node name of it.

190
00:12:18.620 --> 00:12:21.020
Let's run this and see how does it work.

191
00:12:23.170 --> 00:12:24.110
It is at home.

192
00:12:24.970 --> 00:12:30.310
There is also a property called Node type which returns type of Nord.

193
00:12:30.340 --> 00:12:33.250
There are various types which I will just list out in a moment.

194
00:12:34.980 --> 00:12:35.940
Sugiura turns one.

195
00:12:36.480 --> 00:12:41.550
There is a table which I will show at the end in the related questions where you will get the idea what

196
00:12:41.550 --> 00:12:43.080
are the different node types we have?

197
00:12:43.320 --> 00:12:45.180
But it does return the node type.

198
00:12:45.190 --> 00:12:51.720
So any element you access, like first child or first element child or even last child, you have node

199
00:12:51.720 --> 00:12:55.350
name, node type and various other properties which you can refer.

200
00:12:55.770 --> 00:13:02.490
These are actually properties which allow you to access the children the way we have used children property

201
00:13:02.760 --> 00:13:06.780
which allow you to access the child nodes by various means.

202
00:13:07.020 --> 00:13:09.720
You do have sibling related properties.

203
00:13:09.960 --> 00:13:11.230
Let's see with this one.

204
00:13:11.610 --> 00:13:16.500
I just want to say, which is the next sibling of this one.

205
00:13:16.950 --> 00:13:23.580
So here we have given the next sibling, which is the same level element that will be the sibling of

206
00:13:23.580 --> 00:13:24.270
Division one.

207
00:13:24.480 --> 00:13:27.840
So this division is the sibling of this, and that's the next sibling.

208
00:13:28.050 --> 00:13:34.320
So if you run this, you should get this one, but you are not getting it here.

209
00:13:34.560 --> 00:13:38.640
The reason is, again, after the this one, that is a new line.

210
00:13:38.640 --> 00:13:41.100
That is a text node, which is, again, a sibling of it.

211
00:13:41.670 --> 00:13:44.280
So now you do have the same thing here.

212
00:13:44.760 --> 00:13:48.450
Next element, sibling, which will return a proper element.

213
00:13:48.720 --> 00:13:51.270
So now if I click here, we have the division.

214
00:13:51.630 --> 00:13:53.040
It doesn't return the text node.

215
00:13:53.250 --> 00:13:57.400
So for accessing siblings, we have next element sibling.

216
00:13:57.420 --> 00:14:00.600
Previous sibling and previous element sibling also.

217
00:14:00.990 --> 00:14:07.650
And to access the parent nodes, we do have properties like parent node or parent element.

218
00:14:07.920 --> 00:14:13.320
For example, for this I just want to have which is the pattern node offered.

219
00:14:13.860 --> 00:14:17.910
A node can be anything but the element will be a proper element.

220
00:14:17.920 --> 00:14:20.610
So we do also have parent element as well.

221
00:14:20.820 --> 00:14:22.650
Now in our case, it might be the same.

222
00:14:22.890 --> 00:14:26.430
So let's just save this and see the output.

223
00:14:29.430 --> 00:14:29.760
Right.

224
00:14:29.880 --> 00:14:35.700
So this is the pattern node and this is the pattern element that is the body.

225
00:14:36.420 --> 00:14:42.600
So we have seen that there are various ways to access children's siblings, our parents.

226
00:14:42.870 --> 00:14:48.540
In the related questions, we'll still discuss few more possibilities while navigation.

227
00:14:49.630 --> 00:14:54.250
By looking at this figure, I would like to explain a few terminologies here.

228
00:14:54.430 --> 00:14:57.640
Like these two divisions here.

229
00:14:57.640 --> 00:15:01.360
Document is the pattern of all these elements.

230
00:15:01.750 --> 00:15:04.090
Now Division is a child.

231
00:15:04.450 --> 00:15:10.030
So you will see that these two divisions are children of the body.

232
00:15:10.300 --> 00:15:13.960
Now, these two divisions are also sibling.

233
00:15:14.230 --> 00:15:16.660
That is, they are at the same level.

234
00:15:16.840 --> 00:15:24.520
Like, for example, this H1 and UL is a sibling that is a next sibling like this or a previous sibling

235
00:15:24.670 --> 00:15:25.360
like this.

236
00:15:25.780 --> 00:15:30.580
Even in Division two, we have H1 input and button.

237
00:15:30.700 --> 00:15:32.140
They all are sibling.

238
00:15:32.440 --> 00:15:39.250
So the button is a next sibling of this input and each one is a previous sibling of input.

239
00:15:40.430 --> 00:15:43.490
Let's discuss the related questions of this topic.

240
00:15:43.940 --> 00:15:48.260
The first question is what is a node in DOM tree?

241
00:15:48.440 --> 00:15:51.410
And explain the different types of nodes.

242
00:15:51.830 --> 00:15:57.710
So following are the most important node types, each element, and also the text node which we have

243
00:15:57.710 --> 00:15:58.130
seen.

244
00:15:58.460 --> 00:16:05.210
Everything is actually a node in a DOM tree, but not every node is an element as well.

245
00:16:05.580 --> 00:16:05.790
Right.

246
00:16:05.810 --> 00:16:09.320
That is a text node or there is an element, an HTML element.

247
00:16:09.530 --> 00:16:11.210
These are the different node types.

248
00:16:11.330 --> 00:16:16.190
So when we try to display node type in one of the case, we received one.

249
00:16:16.370 --> 00:16:19.370
And the reason is that was the element node.

250
00:16:19.550 --> 00:16:20.900
That's why it was showing one.

251
00:16:23.900 --> 00:16:24.740
Next question.

252
00:16:25.370 --> 00:16:30.500
How can you access next same level element for a given node element?

253
00:16:31.100 --> 00:16:37.550
We have already seen that if we want to access the same level element, we have next element, sibling

254
00:16:37.730 --> 00:16:39.170
or next sibling.

255
00:16:39.260 --> 00:16:41.960
But here we want to access just the element.

256
00:16:42.050 --> 00:16:48.320
That's why we say next element sibling, which will allow us to access the same level node element.

257
00:16:51.370 --> 00:16:57.490
The third question is what is the difference between child nodes and children property?

258
00:16:58.030 --> 00:17:04.930
So child nodes actually returns all the nodes, whether it is a text or a regular element that is children

259
00:17:04.930 --> 00:17:09.099
returns only those which are regular HTML elements.

260
00:17:09.280 --> 00:17:10.420
That is the difference.

261
00:17:12.920 --> 00:17:18.230
Fourth question how can you check whether an element has a child node or not?

262
00:17:18.560 --> 00:17:22.270
So now we do use child nodes dot length also.

263
00:17:22.460 --> 00:17:23.990
But we have a matter.

264
00:17:23.990 --> 00:17:26.150
Carl has child nodes.

265
00:17:26.359 --> 00:17:31.250
This matter allows us to check whether the element has nodes or not.

266
00:17:34.070 --> 00:17:42.160
Fifth question is what is the purpose of dumb navigation or travel is a see the basic idea of traversal

267
00:17:42.260 --> 00:17:51.650
or navigation is v have access programmatically to all the nodes which we see in the HTML page.

268
00:17:51.920 --> 00:17:57.380
Let's say that you want to remove a specific node, or let's say you want to search through the document

269
00:17:57.380 --> 00:18:02.270
and you want to modify content or maybe some formatting of a node.

270
00:18:02.450 --> 00:18:07.820
In such case, you want to go through the node, you would want to traverse through the node.

271
00:18:07.940 --> 00:18:08.840
In such case.

272
00:18:09.080 --> 00:18:14.960
Dom Navigation and these type of properties and matters are useful we have not seen yet.

273
00:18:15.200 --> 00:18:20.390
How do we add or remove element that will be covered in few of the next questions?

274
00:18:20.510 --> 00:18:27.470
But at least you get idea that what is navigation and how do you go through every note if you want to,

275
00:18:27.470 --> 00:18:30.230
in case let's say you want to search or delete an element.

276
00:18:32.730 --> 00:18:37.110
Sixth question what will be the output of below given statement?

277
00:18:37.470 --> 00:18:39.810
Now the statement is that you have an element.

278
00:18:39.810 --> 00:18:47.250
For example, let's say in our case it was due once I can set new one dot last child, dot next sibling,

279
00:18:47.640 --> 00:18:49.020
what will be the output of it?

280
00:18:49.470 --> 00:18:52.020
So the output will always be null.

281
00:18:52.290 --> 00:18:57.630
The reason is that if that is a last chain, it cannot have any more sibling.

282
00:18:57.990 --> 00:19:01.650
So either you go next sibling or next element sibling.

283
00:19:01.830 --> 00:19:03.720
It's not going to return anything.

