1
00:00:00,090 --> 00:00:01,800
In this date and time category.

2
00:00:01,980 --> 00:00:05,010
Now I'm discussing about various date methods.

3
00:00:05,340 --> 00:00:08,580
There will be three related questions to this topic as well.

4
00:00:09,090 --> 00:00:15,480
We have already seen that the date object helps you to create the dates and also the time.

5
00:00:15,480 --> 00:00:17,670
We do not have a separate object for time.

6
00:00:17,670 --> 00:00:22,320
We use the date object only for better understanding of time.

7
00:00:22,710 --> 00:00:24,810
We are going to have one more session.

8
00:00:24,810 --> 00:00:26,400
That will be the very next session.

9
00:00:26,880 --> 00:00:31,710
So the date object has various methods for date and time related operations.

10
00:00:31,830 --> 00:00:37,410
In this section we will go through a few date related set and get methods.

11
00:00:37,740 --> 00:00:42,180
Let me first of all, create contact date is equal to new date.

12
00:00:42,810 --> 00:00:46,360
Then I just see console date log and.

13
00:00:47,680 --> 00:00:51,010
So when we run this, you see that the data is displayed.

14
00:00:54,010 --> 00:00:57,220
Now that is a matter called get full year.

15
00:00:57,580 --> 00:01:01,090
The get full year returns the four digit year.

16
00:01:05,970 --> 00:01:09,660
Similarly, let's also try console dialogue.

17
00:01:10,380 --> 00:01:12,060
They don't get month.

18
00:01:13,080 --> 00:01:16,560
This matter returns the month of the given date.

19
00:01:16,860 --> 00:01:19,960
So now you see that it returns seven.

20
00:01:19,980 --> 00:01:26,580
The reason we have already discussed in a previous section that the months are indexed from 0 to 11.

21
00:01:27,120 --> 00:01:29,610
Now let's also try one more method.

22
00:01:29,970 --> 00:01:31,800
Did not get date.

23
00:01:33,780 --> 00:01:36,390
Now this returns the day of the month.

24
00:01:36,570 --> 00:01:43,350
The value generally you will see between one and 31 and the next method we are trying is console.log.

25
00:01:43,380 --> 00:01:45,180
Did not get de.

26
00:01:48,180 --> 00:01:54,940
So this method, as you can see, it returns day of the week the way we have these get matters.

27
00:01:55,170 --> 00:01:58,710
We do also have get UTC matters.

28
00:01:58,920 --> 00:02:04,530
See for example, get UTC year, get UTC month and so on.

29
00:02:04,800 --> 00:02:07,800
So they return the UTC date and time values.

30
00:02:08,400 --> 00:02:15,090
Now let's also go through a few of these set methods which can be used to set the date values.

31
00:02:15,330 --> 00:02:21,690
The first method is set full, yet the syntax of this matter is like this.

32
00:02:21,960 --> 00:02:25,740
We have the date component, date date set full year.

33
00:02:25,860 --> 00:02:32,040
Now this method can have three parameters the year, month and the month, and they both are optional.

34
00:02:32,190 --> 00:02:33,960
So let me just type this call.

35
00:02:33,960 --> 00:02:36,860
I'll say let date is equal to new date.

36
00:02:36,870 --> 00:02:38,400
I'll have a console.log for the.

37
00:02:39,120 --> 00:02:42,360
Then I'm seeing that did not set full year.

38
00:02:42,390 --> 00:02:44,160
I'll simply say 2021.

39
00:02:45,530 --> 00:02:48,380
And again, I will display the value that is the date.

40
00:02:48,710 --> 00:02:50,690
Now let's run the code and see what happens.

41
00:02:51,970 --> 00:02:57,280
As you can see now, the date, the year is change and now it is 2021.

42
00:02:57,610 --> 00:03:00,070
We do also have set month.

43
00:03:00,910 --> 00:03:08,680
The syntax of said month is like this that we have a date component that is date date segment and then

44
00:03:08,710 --> 00:03:13,000
we have the month of it is not optional and here D is optional.

45
00:03:13,240 --> 00:03:15,070
So this helps you to set the month.

46
00:03:15,730 --> 00:03:19,540
Let's try to set the month in same coding after this console.log.

47
00:03:19,660 --> 00:03:24,130
I say did not set month and I will change the month again.

48
00:03:24,130 --> 00:03:25,660
We will say console.log d.

49
00:03:31,260 --> 00:03:33,890
And now you see that the money's different.

50
00:03:34,230 --> 00:03:38,820
The way we have settlement, we do also have set date.

51
00:03:39,270 --> 00:03:44,370
Here you can give a day and that will be the new day for this particular date.

52
00:03:44,760 --> 00:03:45,700
So let's do that.

53
00:03:45,720 --> 00:03:49,140
I'll say dot set date in the bracket.

54
00:03:49,200 --> 00:03:50,910
I'll you let's say 12.

55
00:03:53,540 --> 00:03:54,770
And now we run the code.

56
00:03:56,370 --> 00:03:58,520
Now you see that every time, said Fuller.

57
00:03:58,860 --> 00:04:04,770
Set month and set day changes the date and every time there are different values displayed.

58
00:04:05,100 --> 00:04:12,540
Another useful method is Date Dart Pass, which passes a string of date and returns milliseconds.

59
00:04:13,080 --> 00:04:18,779
This is how those indexes date dart pass and in the brackets you have the date string.

60
00:04:18,990 --> 00:04:25,290
You can also have another syntax where you can say new date and in the brackets you can have the pass

61
00:04:25,290 --> 00:04:25,650
date.

62
00:04:26,130 --> 00:04:28,340
Let's try a small example with this as well.

63
00:04:28,350 --> 00:04:30,900
I'm going to say let b t is equal to date.

64
00:04:30,900 --> 00:04:36,390
Dart Pass 2020, dash zero seven, dash 24.

65
00:04:36,660 --> 00:04:42,690
Let's just say console.log and you get the date value after the string has been passed.

66
00:04:42,990 --> 00:04:45,600
So these are the few getter and set methods.

67
00:04:47,720 --> 00:04:50,810
Now let's discuss relative questions of this topic.

68
00:04:51,050 --> 00:04:57,350
The first question is that get a character month now for any date if you want to get a character month.

69
00:04:57,590 --> 00:04:58,850
This is how you can do it.

70
00:04:58,940 --> 00:04:59,930
Let's try the code.

71
00:05:00,260 --> 00:05:03,620
I'll declare a variable saying ladies is equal to new date.

72
00:05:03,890 --> 00:05:07,040
So that's the current date we are going to get in the deep variable.

73
00:05:07,220 --> 00:05:12,260
Then I'm going to say let's add a months is equal to let's create the enter adding.

74
00:05:12,470 --> 00:05:19,400
Now the next thing is the get month returns index number of the month and fortunately starts with zero

75
00:05:19,400 --> 00:05:22,790
only, which actually is very much useful with ADD.

76
00:05:23,060 --> 00:05:29,420
So here now I'm going to say add a months the square bracket and I'll say did not get month.

77
00:05:29,510 --> 00:05:32,120
Now the get month will return the current month.

78
00:05:32,360 --> 00:05:34,400
So in this case, it will return the seven.

79
00:05:34,550 --> 00:05:36,650
That is the seventh element will be displayed.

80
00:05:36,800 --> 00:05:39,710
So we get the August as the output.

81
00:05:39,800 --> 00:05:40,940
As you can see here.

82
00:05:42,850 --> 00:05:47,920
The second question is find the date before 50 days of given date.

83
00:05:48,160 --> 00:05:52,640
Now, this question is that what was the date before given number of days.

84
00:05:52,780 --> 00:05:53,150
Right.

85
00:05:53,170 --> 00:05:54,430
That's again, very simple.

86
00:05:54,640 --> 00:05:56,680
I'll declare one date variable.

87
00:05:56,710 --> 00:05:59,260
I'll say let date is equal to new date.

88
00:05:59,530 --> 00:06:02,080
Then I'll say dot set date.

89
00:06:02,080 --> 00:06:03,340
I'm changing the date.

90
00:06:03,370 --> 00:06:06,460
Now what am I doing here is I'm changing the day.

91
00:06:06,490 --> 00:06:08,740
That is the target date.

92
00:06:08,740 --> 00:06:09,490
Now this what?

93
00:06:09,490 --> 00:06:11,020
This will return the get.

94
00:06:11,020 --> 00:06:18,760
It will return the day, for example, it is the current day and that we are detecting by the given

95
00:06:18,760 --> 00:06:19,540
number of days.

96
00:06:19,570 --> 00:06:23,920
Now this component can be variable, but at the moment I am fixing it because the question is, are

97
00:06:23,920 --> 00:06:25,150
50 days right?

98
00:06:25,300 --> 00:06:26,230
So what will happen?

99
00:06:26,530 --> 00:06:31,330
The set date is from the current day it is going to -50 days.

100
00:06:31,570 --> 00:06:31,930
Right.

101
00:06:32,140 --> 00:06:37,090
So that will automatically give you the new date before 50 days.

102
00:06:37,360 --> 00:06:43,120
So this is how you can find the date before given number of days.

103
00:06:44,730 --> 00:06:53,580
The third question is what will be the output if you add 35 as number of days or maybe date in date

104
00:06:53,580 --> 00:06:54,260
constructor?

105
00:06:54,390 --> 00:06:58,470
For example, what if you write like this, let data is equal to new date.

106
00:06:58,860 --> 00:07:04,170
I say 2020, August month, that is zero seven and I just had 35.

107
00:07:04,350 --> 00:07:08,130
Now here you do not have 35 days in a month.

108
00:07:08,490 --> 00:07:12,630
Still, it is going to go to the next month and it will add.

109
00:07:12,630 --> 00:07:17,910
So here you will have the output that is you will have for September as the output.

110
00:07:18,180 --> 00:07:19,050
Let's try this.

111
00:07:20,730 --> 00:07:26,610
As you can see here, this actually happens because of the auto correction feature of date object.

112
00:07:26,820 --> 00:07:31,920
Even if you have leap year, let's say you have February month, right, or whichever month you have

113
00:07:31,920 --> 00:07:37,980
it, does the validation automatically it does the auto correction and it adds the number of days and

114
00:07:37,980 --> 00:07:40,860
gives you the validate always.

