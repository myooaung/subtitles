WEBVTT
1
00:00:00.250 --> 00:00:03.180
This section I am discussing about date and time basics.

2
00:00:03.270 --> 00:00:06.540
There will be three related questions to this particular topic.

3
00:00:07.880 --> 00:00:11.180
The date object is used to deal with both date and time.

4
00:00:11.420 --> 00:00:15.140
There are different ways to use it with different arguments.

5
00:00:15.260 --> 00:00:18.650
Let's try different ways of using the date object.

6
00:00:18.890 --> 00:00:23.510
There are four ways to create a date or a date object instance.

7
00:00:23.660 --> 00:00:25.850
Let's try each one by one.

8
00:00:26.060 --> 00:00:33.230
The first way is that you use only the date object, which returns the current date and time along with

9
00:00:33.410 --> 00:00:34.640
the local time zone.

10
00:00:34.760 --> 00:00:36.710
So the syntax is like this.

11
00:00:36.800 --> 00:00:38.480
We just say new and date.

12
00:00:38.660 --> 00:00:40.730
Now let's try this code also.

13
00:00:40.760 --> 00:00:43.430
I'll create a variable or a constant saying.

14
00:00:45.060 --> 00:00:46.650
And I will write a new date.

15
00:00:47.430 --> 00:00:49.340
Let's display the value of D now.

16
00:00:50.690 --> 00:00:53.240
I'll just run the code and see what is the output.

17
00:00:53.690 --> 00:01:01.580
As you can see that it displays the date that is the day name, month, date year and the time as well

18
00:01:01.580 --> 00:01:03.410
along with the time zone.

19
00:01:03.470 --> 00:01:09.740
Now there are hundreds of time zones available in the world, but that can be two time zones in terms

20
00:01:09.740 --> 00:01:10.640
of definition.

21
00:01:10.760 --> 00:01:15.350
One is the local time zone and the second is the UTC time zone.

22
00:01:15.530 --> 00:01:19.670
UTC is basically the coordinated universal time zone.

23
00:01:20.120 --> 00:01:25.980
So incoming sections will be understanding about getting UTC time zone as well with few methods.

24
00:01:26.180 --> 00:01:31.430
But at the moment, as you can see, that the date is displayed with the local time zone.

25
00:01:31.730 --> 00:01:34.760
The same thing you can try with a different syntax as well.

26
00:01:34.760 --> 00:01:39.290
Let's say instead of writing or creating an object, you can directly write New Date here.

27
00:01:39.410 --> 00:01:42.270
So this will also return the current date and time.

28
00:01:42.290 --> 00:01:46.040
Let me just comment the first line and run the code again.

29
00:01:46.270 --> 00:01:48.650
Do you see that the output is same?

30
00:01:48.980 --> 00:01:51.020
Now let's try the second way.

31
00:01:51.200 --> 00:01:57.680
The second way is more preferable, though programmers do not choose, considering that this is a complicated

32
00:01:57.680 --> 00:02:00.350
way, but this is a better way to deal with dates.

33
00:02:00.590 --> 00:02:07.820
It takes seven arguments here Monday hours, minutes, seconds in milliseconds.

34
00:02:08.030 --> 00:02:12.830
So let me just quickly create context is equal to new date.

35
00:02:13.950 --> 00:02:16.350
Let's say 2020, the historical year.

36
00:02:16.770 --> 00:02:18.660
Now here, I'm going to give the month.

37
00:02:19.020 --> 00:02:20.700
Right now, it is the August month.

38
00:02:21.190 --> 00:02:22.440
I'm writing eight.

39
00:02:22.440 --> 00:02:24.840
And let's see what will be the output here.

40
00:02:24.870 --> 00:02:28.380
The date is 23 and we give the time now.

41
00:02:28.380 --> 00:02:29.430
So I will say 11.

42
00:02:31.650 --> 00:02:32.310
Minutes.

43
00:02:32.610 --> 00:02:33.540
And let's see.

44
00:02:33.540 --> 00:02:34.080
I right.

45
00:02:34.080 --> 00:02:36.180
The milliseconds also some number.

46
00:02:36.210 --> 00:02:38.960
Now I will display the value of D.

47
00:02:41.780 --> 00:02:43.490
Clear the console and run it again.

48
00:02:43.880 --> 00:02:45.530
So we have this data now.

49
00:02:45.530 --> 00:02:49.610
How come that it is showing September instead of August?

50
00:02:49.880 --> 00:02:53.730
The reason is that numbers are indexed with zero.

51
00:02:53.750 --> 00:02:56.450
So when you say zero, that means it is January.

52
00:02:56.660 --> 00:02:59.270
And when you say 11, that means it is December.

53
00:02:59.540 --> 00:03:03.680
So if you have to consider the August month, then I'm going to give seven.

54
00:03:04.730 --> 00:03:06.500
Now, let me just run this again.

55
00:03:07.860 --> 00:03:09.990
So now we have the desired output.

56
00:03:10.500 --> 00:03:14.430
So apart from this month, which is different, so it is important to discuss.

57
00:03:14.560 --> 00:03:17.260
Rest of the things are anyway easy to understand.

58
00:03:17.280 --> 00:03:23.250
In case if you do not like say include this milliseconds, then it will be treated as zero.

59
00:03:23.460 --> 00:03:26.700
If you avoid various sections, that is also fine.

60
00:03:26.700 --> 00:03:33.360
But in case if you avoid date also, then the date will be considered as the first day of that month.

61
00:03:33.480 --> 00:03:36.120
So this should display first August, right?

62
00:03:36.150 --> 00:03:37.200
Because it is seven.

63
00:03:37.200 --> 00:03:38.340
That is 0 to 7.

64
00:03:38.340 --> 00:03:39.870
The index numbers are.

65
00:03:40.050 --> 00:03:41.370
So seven is the August.

66
00:03:41.580 --> 00:03:47.760
And if no date section is defined, then it is considered as the first day of the month.

67
00:03:48.000 --> 00:03:52.560
Now you cannot avoid the month section and that is a big reason behind it.

68
00:03:52.860 --> 00:03:56.070
We are looking at the second way of date creation.

69
00:03:56.190 --> 00:04:02.010
If I write just one number inside the date, that actually is the third syntax.

70
00:04:02.010 --> 00:04:05.640
It is the milliseconds syntax which we are discussing right now.

71
00:04:05.820 --> 00:04:11.040
But at least one thing is for sure that you cannot avoid the month section if at all.

72
00:04:11.040 --> 00:04:11.720
You avoid it.

73
00:04:11.730 --> 00:04:17.490
That means it considers this as milliseconds and it will generate some date.

74
00:04:17.550 --> 00:04:20.399
Now, which date will it generate that I am coming to in a moment.

75
00:04:20.579 --> 00:04:23.730
Let's first of all, begin with the third way of the syntax.

76
00:04:24.000 --> 00:04:28.890
The syntax is like this that you give the new date and you give milliseconds in the brackets.

77
00:04:29.160 --> 00:04:34.280
Now they actually is a kind of millisecond value in JavaScript.

78
00:04:34.290 --> 00:04:34.980
That's a fact.

79
00:04:35.220 --> 00:04:42.550
And in JavaScript, this millisecond count started from the 1st January 1970.

80
00:04:42.570 --> 00:04:47.370
So in case, let's say, if I give just zero or maybe one write one also doesn't make any difference

81
00:04:47.370 --> 00:04:50.820
because that's a very small value in terms of days.

82
00:04:51.150 --> 00:04:56.520
So if I run this, you will see that it displays January 1st, 1970.

83
00:04:56.970 --> 00:05:00.750
So this is the first day when you give the serial number.

84
00:05:00.960 --> 00:05:06.540
It also means that if you want, let's say, for example, I just want to get the millisecond of today's

85
00:05:06.540 --> 00:05:06.870
date.

86
00:05:07.140 --> 00:05:07.470
Right.

87
00:05:07.770 --> 00:05:13.470
So the easier way is I might use one method, which we will see later on, but at the moment I'm just

88
00:05:13.470 --> 00:05:15.360
using a method called get time.

89
00:05:16.610 --> 00:05:18.740
This will return me the milliseconds.

90
00:05:18.920 --> 00:05:21.320
So let me just first of all, run this.

91
00:05:21.710 --> 00:05:23.170
I get the milliseconds here.

92
00:05:23.180 --> 00:05:28.910
I just copy this value and now I give this milliseconds inside the day.

93
00:05:28.910 --> 00:05:32.540
This is the third way that person takes off date creation.

94
00:05:32.720 --> 00:05:34.010
Now, I'll just remove this.

95
00:05:34.370 --> 00:05:35.180
Get time.

96
00:05:35.690 --> 00:05:36.740
Let's run this now.

97
00:05:37.280 --> 00:05:40.790
Now you see that it displays the today's date and the time as well.

98
00:05:41.060 --> 00:05:49.970
So the third syntax accepts milliseconds and that is converted into a date considering the first millisecond

99
00:05:50.000 --> 00:05:52.730
on 1st January 1970.

100
00:05:52.850 --> 00:05:53.720
Do remember that.

101
00:05:54.690 --> 00:05:58.650
Now, the fourth way of creating a date is that you give a string here.

102
00:05:58.950 --> 00:06:05.220
Whenever you give a string, you give the year dash, you give the month dash.

103
00:06:05.640 --> 00:06:07.710
Date lets it date is 23.

104
00:06:08.040 --> 00:06:11.700
Now I'll just run the score so you get this output.

105
00:06:12.450 --> 00:06:16.590
We can also give date and time, but so far time.

106
00:06:16.590 --> 00:06:17.160
What will I do?

107
00:06:17.160 --> 00:06:20.100
I'll give t this is a separator for time, right?

108
00:06:20.100 --> 00:06:26.520
Let's say it is 12:00, for example, and maybe 32 minutes, 0 seconds.

109
00:06:26.820 --> 00:06:29.580
And you have to end that with a Z.

110
00:06:29.580 --> 00:06:30.210
That is Z.

111
00:06:30.570 --> 00:06:33.300
The reason is we have the time and zone.

112
00:06:33.450 --> 00:06:41.370
If you do not do this DNC, then it generally happens that the value may vary from browser to browser.

113
00:06:41.460 --> 00:06:45.270
Like if I do not give some value in Chrome, it gives invalidate also.

114
00:06:45.420 --> 00:06:51.810
So always make sure that you give this TNC Right now let me run this and see what is the output and

115
00:06:51.810 --> 00:06:52.650
here is the output.

116
00:06:53.160 --> 00:07:00.030
So the format which I have given right now is the ISO 8601 extended date format, and this is the format

117
00:07:00.330 --> 00:07:06.480
now in the forthcoming sections, we are going to get information about various date methods and time

118
00:07:06.480 --> 00:07:07.320
methods as well.

119
00:07:07.770 --> 00:07:10.710
Let's discuss the related questions for this topic.

120
00:07:11.100 --> 00:07:16.350
The first question is explain different ways of creating date and time object.

121
00:07:16.410 --> 00:07:22.620
So we actually have the date object only, and these are the four different ways we have to deal with

122
00:07:22.800 --> 00:07:23.460
the dates.

123
00:07:25.600 --> 00:07:29.290
The second question is what will be the output of below code?

124
00:07:29.650 --> 00:07:35.110
Now looking at the code, if you assume that it is the month and it has to be August, then you are

125
00:07:35.260 --> 00:07:36.570
misunderstanding this, right?

126
00:07:36.580 --> 00:07:42.460
We have already discussed that the syntax in which we give values of month here, date and so on there,

127
00:07:42.670 --> 00:07:48.010
the number that is the month number is always indexed with zero in JavaScript.

128
00:07:48.010 --> 00:07:52.210
So when you say eight, that means it is going to consider September.

129
00:07:52.210 --> 00:07:58.330
It is actually the ninth month in calendar, but here in JavaScript function it will be eight.

130
00:07:58.480 --> 00:08:00.520
So let me just type the code here.

131
00:08:00.520 --> 00:08:04.420
I say 20, 20, zero eight and 23.

132
00:08:04.570 --> 00:08:06.850
I'll just clear console and run it.

133
00:08:07.060 --> 00:08:08.980
So you get the September month.

134
00:08:11.380 --> 00:08:16.930
The third question is explain various formats of ISO standard followed by JavaScript.

135
00:08:16.930 --> 00:08:24.040
So date for me, the ISO standard is that here is always for ways month is always to that is AMP date

136
00:08:24.050 --> 00:08:30.340
is also d d and the standard format for the entire date along with the time is like this.

