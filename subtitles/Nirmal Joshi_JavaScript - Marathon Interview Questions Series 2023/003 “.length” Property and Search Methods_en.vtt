WEBVTT
1
00:00:01.090 --> 00:00:07.630
Now in this section we are going to discuss about the length property of a string and few search methods,

2
00:00:08.230 --> 00:00:14.350
search methods we have already seen in a section called Array, but similar methods we can use with

3
00:00:14.350 --> 00:00:15.100
string as well.

4
00:00:15.370 --> 00:00:18.610
Also, there will be three really due questions to this topic.

5
00:00:19.770 --> 00:00:26.880
Normally properties or methods should be with objects, whereas string is a primitive type or JavaScript.

6
00:00:26.880 --> 00:00:30.960
Primitive types when executed behave like an object.

7
00:00:31.530 --> 00:00:35.760
It means you do have properties and methods with these primitive types as well.

8
00:00:36.300 --> 00:00:39.870
The string type has a length property which returns the length.

9
00:00:40.140 --> 00:00:41.880
That is number of characters.

10
00:00:42.420 --> 00:00:43.710
Let's check an example.

11
00:00:43.770 --> 00:00:45.150
I'm going to declare a variable.

12
00:00:45.150 --> 00:00:50.160
I'll say let SDR is equal to, let's say I technologies.

13
00:00:50.610 --> 00:00:52.200
Now I'm going to say console.log.

14
00:00:52.890 --> 00:00:53.970
Start out Lent.

15
00:00:54.660 --> 00:00:55.800
Now let's run this call.

16
00:00:57.210 --> 00:01:00.270
You see that it displays the number of characters.

17
00:01:00.690 --> 00:01:04.420
So land is a property which is always there with a string.

18
00:01:04.440 --> 00:01:11.160
As I mentioned earlier, normally properties are part of objects and this SDR is a primitive data type.

19
00:01:11.340 --> 00:01:19.080
But when executed, JavaScript treats this like an object and it allows to apply property like this.

20
00:01:19.230 --> 00:01:21.570
It also allows to apply methods.

21
00:01:21.960 --> 00:01:24.150
Let's talk about few matters of string.

22
00:01:24.540 --> 00:01:32.220
Two methods index off and last index of search for a character or string within a string and returns

23
00:01:32.220 --> 00:01:33.480
the index number.

24
00:01:33.990 --> 00:01:41.610
For example here, if I say led a STR is equal to let's say this is a test and now I'm going to say

25
00:01:41.610 --> 00:01:51.180
console.log SDR dot index off and I'm going to search for is let me also use the last index off here.

26
00:01:51.180 --> 00:01:52.350
I'll say console.log.

27
00:01:52.830 --> 00:01:58.740
Start out last index off and here I'm going to say is now let's run this score.

28
00:01:59.010 --> 00:02:03.270
So in case of index off it begins the search from the beginning.

29
00:02:03.450 --> 00:02:07.800
Whereas last index of starts the searching from the end.

30
00:02:07.980 --> 00:02:10.710
So that's why you see the different values in the output.

31
00:02:10.889 --> 00:02:17.940
It shows the index number that is the position on which is is found by index of last index of.

32
00:02:19.110 --> 00:02:23.400
These two matters return minus one if the value is not found.

33
00:02:23.670 --> 00:02:26.850
And you can also give the start position as well.

34
00:02:27.890 --> 00:02:30.500
Let me give you five here with the index off.

35
00:02:30.830 --> 00:02:35.120
It means that it is going to start the searching from the fifth index.

36
00:02:35.390 --> 00:02:37.550
So the index number starts with zero.

37
00:02:37.580 --> 00:02:40.130
So from this position, it will start searching.

38
00:02:40.760 --> 00:02:44.180
And let me also say for here with last index off.

39
00:02:44.660 --> 00:02:50.090
Now, when I say four here, it will start searching from the fourth position to the start.

40
00:02:50.100 --> 00:02:53.180
That is the beginning of the string in this direction.

41
00:02:54.290 --> 00:02:55.490
Now let's run this score.

42
00:02:56.550 --> 00:03:00.990
Now you see that in the index of it surges from the fifth position.

43
00:03:01.200 --> 00:03:09.720
So the second is searched, but as in last index of it's searched for the first is that is also a search

44
00:03:09.720 --> 00:03:14.670
method which does the same thing as index off but with a difference.

45
00:03:15.570 --> 00:03:18.780
Let me just replace this index off with search.

46
00:03:19.710 --> 00:03:22.230
Now I'm removing this five and four as well.

47
00:03:23.220 --> 00:03:26.400
And I am also removing this last index off.

48
00:03:27.930 --> 00:03:29.560
Let's run this now.

49
00:03:29.590 --> 00:03:33.360
See that with index of ah, this search method?

50
00:03:33.510 --> 00:03:40.260
The output seems simple, but there are two main differences between search and the index of index off

51
00:03:40.260 --> 00:03:46.080
can have a start position to perform this search like we have seen in this example.

52
00:03:47.040 --> 00:03:56.100
But index off cannot be used for advanced search operations like regex, whereas the search method can

53
00:03:56.100 --> 00:03:58.410
take regular expressions as well.

54
00:03:58.530 --> 00:04:00.780
But search method will not take this.

55
00:04:00.900 --> 00:04:03.300
Starting position with index of can t.

56
00:04:03.660 --> 00:04:06.390
So this is the fundamental difference between these two.

57
00:04:07.650 --> 00:04:09.300
Let's discuss about the questions.

58
00:04:09.810 --> 00:04:15.940
The first question is explain the index off and last index of matter which syntax?

59
00:04:15.960 --> 00:04:21.209
So index offering, last index of searches for the index number of the string given.

60
00:04:21.420 --> 00:04:25.080
You can also give the starting position here as a second parameter.

61
00:04:25.080 --> 00:04:32.190
So to start searching from that position, index of will search from beginning to end, whereas last

62
00:04:32.190 --> 00:04:37.260
index of will search from the end to the beginning of the string.

63
00:04:38.820 --> 00:04:44.160
The second question is what is the difference between such an index of method?

64
00:04:44.490 --> 00:04:51.060
Index of can have a start position to perform this search like we have seen in this example.

65
00:04:52.000 --> 00:05:01.060
But index off cannot be used for advanced search operations like regex, whereas the search method can

66
00:05:01.060 --> 00:05:03.370
take regular expressions as well.

67
00:05:03.490 --> 00:05:08.260
But search method will not take this starting position with index of can t.

68
00:05:08.620 --> 00:05:11.350
So this is the fundamental difference between these two.

69
00:05:12.940 --> 00:05:16.930
And the third question is what will be the output of the below given?

70
00:05:17.680 --> 00:05:18.940
Explain with the reason.

71
00:05:22.830 --> 00:05:24.090
So the output is five.

72
00:05:24.360 --> 00:05:28.740
The reason is index off is going to start the searching from the fifth position.

73
00:05:29.070 --> 00:05:36.200
It starts from this position and the first is found is actually on the fifth position of the string.

74
00:05:36.210 --> 00:05:42.570
So that's why it returns five in case of last index, because we are starting from the first position

75
00:05:42.570 --> 00:05:47.730
that is it will start searching from edge and it'll go in this direction.

76
00:05:47.730 --> 00:05:52.350
That is till the beginning of the string where it doesn't find any is.

77
00:05:52.500 --> 00:05:58.800
And because there is no string found, it returns minus one, as we have already discussed that index

78
00:05:58.800 --> 00:06:05.250
of our last index of in case of failure that is in case of no string found is going to return minus

79
00:06:05.250 --> 00:06:05.460
one.

