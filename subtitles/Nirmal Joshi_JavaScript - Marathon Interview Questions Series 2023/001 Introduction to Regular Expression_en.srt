1
00:00:00,330 --> 00:00:07,980
This section is very important because we are going to discuss a very useful and logical topic called

2
00:00:08,070 --> 00:00:09,780
regular expression.

3
00:00:09,990 --> 00:00:18,150
Regular expressions are very powerful way to search, replace or manipulate strings using pattern matching.

4
00:00:19,260 --> 00:00:24,900
Regular expression patterns are supported in various programming languages.

5
00:00:26,040 --> 00:00:34,620
Regular expression can be applied either with simple JavaScript string patterns in methods like search,

6
00:00:34,620 --> 00:00:43,530
replace, split, etc. or the patterns can be built using reg X class in JavaScript.

7
00:00:44,220 --> 00:00:49,680
Before diving deep in the concept, we will begin with very basic example.

8
00:00:50,690 --> 00:00:52,250
Let's take a variable.

9
00:00:52,730 --> 00:00:54,860
Let MSG is equal to.

10
00:00:55,970 --> 00:00:59,620
I will just say this is case sensitive.

11
00:00:59,630 --> 00:01:02,240
This is the string I'm assigning here.

12
00:01:02,240 --> 00:01:06,200
I'm making word cases C capital.

13
00:01:07,190 --> 00:01:13,860
Now I want to get the index or position of the word case in a variable.

14
00:01:13,880 --> 00:01:19,340
So I will say let price is equal to MSG dot search.

15
00:01:19,460 --> 00:01:23,570
And of course I'm going to search the Capital C case.

16
00:01:24,530 --> 00:01:27,830
Let's try to display the position.

17
00:01:27,830 --> 00:01:30,830
So I'll say console or log POS.

18
00:01:31,460 --> 00:01:32,960
Let's run the code.

19
00:01:34,550 --> 00:01:37,610
As you can see, that the output is eight.

20
00:01:38,420 --> 00:01:43,970
That means the word case is found at position eight in string MSG.

21
00:01:44,660 --> 00:01:49,250
Now let's change this uppercase C to lowercase.

22
00:01:50,100 --> 00:01:51,480
And run the code.

23
00:01:52,290 --> 00:01:55,900
Now you see that the search method is unable to find.

24
00:01:55,920 --> 00:01:57,990
So it returns minus one.

25
00:01:58,620 --> 00:02:03,360
It means the search is case sensitive by default.

26
00:02:03,780 --> 00:02:08,789
Let's assume that we want to make case in sensitive search.

27
00:02:08,820 --> 00:02:16,050
Meaning regardless of the case, if the word matches, then search method should find it.

28
00:02:16,770 --> 00:02:22,200
So let's try regular expressions for case insensitive search.

29
00:02:22,890 --> 00:02:25,890
I will add regular expression pattern.

30
00:02:26,820 --> 00:02:29,220
The patterns begin with Slash.

31
00:02:29,220 --> 00:02:32,190
So I'll say slash case.

32
00:02:35,000 --> 00:02:37,370
And I will add slash I.

33
00:02:38,240 --> 00:02:39,830
Now let's run the code.

34
00:02:42,760 --> 00:02:44,980
Now again, it returns eight.

35
00:02:45,010 --> 00:02:47,290
It means the case world.

36
00:02:47,320 --> 00:02:52,240
I can write in any case, even toggled case like this.

37
00:02:59,780 --> 00:03:01,250
Let's run the code.

38
00:03:02,000 --> 00:03:03,560
Still, it works fine.

39
00:03:04,610 --> 00:03:10,760
So with a search method of string, we have used regular expression pattern.

40
00:03:11,480 --> 00:03:16,160
Now let's talk about the syntax of regular expression.

41
00:03:16,610 --> 00:03:22,670
So when it comes to syntax of regular expression pattern, it is very simple.

42
00:03:23,120 --> 00:03:25,370
It begins with a forward slash.

43
00:03:25,850 --> 00:03:35,060
And then the pattern that is word or character, along with some search pattern like square brackets,

44
00:03:35,060 --> 00:03:36,560
star, etc..

45
00:03:36,560 --> 00:03:46,820
And then again one more slash and you give the modifier or flag If the same pattern is to be used using

46
00:03:46,820 --> 00:03:51,170
Reg X class, then one can write like this.

47
00:03:51,710 --> 00:03:57,960
First you specify the pattern and the second is flag or modifier.

48
00:03:57,980 --> 00:04:04,280
So if the same code is to be returned with the regular expression class of JavaScript, it will look

49
00:04:04,280 --> 00:04:05,150
like this.

50
00:04:05,940 --> 00:04:12,180
We will create the pattern using Reg X class, which takes two parameters.

51
00:04:12,180 --> 00:04:18,060
First is the pattern and second is the flag or the modifier.

52
00:04:18,329 --> 00:04:26,340
So here, because we want to perform case insensitive search, we are going to say I now we'll search

53
00:04:26,340 --> 00:04:27,300
the pattern.

54
00:04:27,750 --> 00:04:29,610
So I'll say pattern.

55
00:04:30,570 --> 00:04:32,970
Let's run the code and see the output.

56
00:04:33,840 --> 00:04:35,670
It still returns eight.

57
00:04:36,120 --> 00:04:42,870
So here I have taken beta and variable, which contains the pattern and flag details.

58
00:04:43,890 --> 00:04:48,910
So now we know that we can define patterns with two syntax.

59
00:04:48,930 --> 00:04:53,670
First is we use the pattern and the flag or modifier.

60
00:04:54,270 --> 00:05:03,210
Or we can use the regexp class that is the constructor where we specify the pattern and flag or modifier.

61
00:05:04,630 --> 00:05:09,580
Here in the example we saw that we did not give any complex pattern.

62
00:05:10,300 --> 00:05:13,750
It was just a simple word for a modifier.

63
00:05:13,780 --> 00:05:19,090
We have used AI, which is for case insensitive search.

64
00:05:19,510 --> 00:05:26,410
So before we dive deep into patterns, let's begin understanding flags or modifiers.

65
00:05:27,200 --> 00:05:32,240
Let's take a look at this table which contains list of modifiers or flags.

66
00:05:33,630 --> 00:05:39,210
We have already seen AI which performs the case insensitive search.

67
00:05:39,780 --> 00:05:46,440
G performs a global match and performs multi line search.

68
00:05:47,040 --> 00:05:55,140
S allows DOT to match new line characters and that is introduced after is 2018.

69
00:05:55,170 --> 00:05:57,960
Of course, it doesn't work with Firefox at the moment.

70
00:05:59,460 --> 00:06:06,210
You switches on the Unicode pattern matching and y switches on the sticky mode.

71
00:06:06,630 --> 00:06:13,470
Don't worry about these Unicode or sticky words we are going to discuss in detail about each and every

72
00:06:13,470 --> 00:06:14,340
modifier.

73
00:06:15,000 --> 00:06:20,880
So this is the table of all flags, but we need to understand all the flags individually.

74
00:06:24,270 --> 00:06:32,280
We have already seen case insensitive search using flag, i.e. let's start exploring other flags or

75
00:06:32,280 --> 00:06:33,390
modifiers.

76
00:06:33,480 --> 00:06:35,430
We will begin with g.

77
00:06:36,060 --> 00:06:38,450
G performs global match.

78
00:06:38,460 --> 00:06:42,750
It means it does not stop the search after the first occurrence.

79
00:06:43,290 --> 00:06:45,820
Let's try performing it practically.

80
00:06:45,840 --> 00:06:50,160
We will use the match method to try modifier g.

81
00:06:50,940 --> 00:06:57,030
Match method returns an array which contains matching string in an array.

82
00:06:57,600 --> 00:07:06,090
If we don't use G, then it returns additional information like index, original input, string, etc.

83
00:07:06,390 --> 00:07:07,980
So let's try the code.

84
00:07:08,430 --> 00:07:17,220
I will use the same code here, but instead of search I'm going to say message dot match and I'm specifying

85
00:07:17,220 --> 00:07:18,090
the pattern.

86
00:07:18,810 --> 00:07:22,200
Of course we want to search the case keyword.

87
00:07:22,980 --> 00:07:29,760
Also the match method and adding a pattern case without any flag at the moment.

88
00:07:29,760 --> 00:07:32,340
And let's print the str.

89
00:07:35,180 --> 00:07:38,360
Let's try to display the value of SDR.

90
00:07:42,030 --> 00:07:48,020
As you can see in the output that match returns error and first value is found.

91
00:07:48,030 --> 00:07:54,300
That is case word is returned as first element of the returned error.

92
00:07:55,680 --> 00:08:00,050
Now let's try to add more occurrences of case.

93
00:08:00,060 --> 00:08:05,490
I will add case word at the end of string and we will run the code again.

94
00:08:07,830 --> 00:08:15,240
Still, the output is the same because the search stops as soon as the first case word is found in the

95
00:08:15,240 --> 00:08:15,870
string.

96
00:08:15,990 --> 00:08:18,060
So here we want that.

97
00:08:18,060 --> 00:08:25,890
It should keep on searching through the entire string that is global search, which we can do by modifying

98
00:08:25,890 --> 00:08:28,200
that is using the G flag.

99
00:08:29,550 --> 00:08:33,120
So let's add g modifier and run the code.

100
00:08:33,940 --> 00:08:34,270
Here.

101
00:08:34,270 --> 00:08:36,460
I'll say slash G.

102
00:08:38,490 --> 00:08:39,809
Let's run this.

103
00:08:41,500 --> 00:08:48,610
Now, as you can see, by simply adding G, now it returns all occurrences of word case.

104
00:08:49,830 --> 00:08:57,840
In case if you want to apply two or more flags or modifiers, you can do that as well.

105
00:08:58,200 --> 00:08:59,130
Let's try.

106
00:08:59,160 --> 00:09:01,650
Case insensitive global search.

107
00:09:01,710 --> 00:09:07,410
Let's make last case with a capital C and run the code.

108
00:09:09,890 --> 00:09:18,020
Now you see that in the output in the array, it returns only one case because that is no case in sensitive

109
00:09:18,020 --> 00:09:18,740
search.

110
00:09:19,190 --> 00:09:24,440
Now, I want to add global as well as case insensitive search.

111
00:09:24,590 --> 00:09:28,700
So I'm going to say G and I.

112
00:09:29,480 --> 00:09:31,100
Now, let's run this score.

113
00:09:33,120 --> 00:09:39,030
So now it is performing both global and case insensitive search.

