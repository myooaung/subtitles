WEBVTT
1
00:00:01.920 --> 00:00:05.670
One more method we are discussing is the split method.

2
00:00:10.020 --> 00:00:14.970
This method is used with normal string or with regular expression.

3
00:00:15.330 --> 00:00:20.070
It converts string into an array with a given delimiter.

4
00:00:20.100 --> 00:00:21.900
The syntax looks like this.

5
00:00:22.110 --> 00:00:24.660
We give a string dot split.

6
00:00:26.160 --> 00:00:29.730
Here we give the regular expression or a separator.

7
00:00:29.730 --> 00:00:34.860
Character is a pattern or a separator by which string is split.

8
00:00:34.890 --> 00:00:37.280
Limit is an optional argument.

9
00:00:37.290 --> 00:00:41.640
If given, then limits number of returned values.

10
00:00:41.870 --> 00:00:44.460
Returns an array of string values.

11
00:00:44.970 --> 00:00:48.930
Let's try the split methods example without regular expression.

12
00:00:48.930 --> 00:00:53.130
First, I'll declare a variable and I'll say split.

13
00:00:53.490 --> 00:00:59.040
I'm giving a space that means this is a character I have given that is a separator character.

14
00:00:59.070 --> 00:01:00.390
Let's run the code.

15
00:01:01.670 --> 00:01:10.080
As you see the output, it has returned an array because the separator is a space given in split method.

16
00:01:10.100 --> 00:01:15.580
It has split the string by space instead of a space.

17
00:01:15.590 --> 00:01:20.870
If you give any other character, then split method will separate the string.

18
00:01:20.870 --> 00:01:29.210
Considering that given character as a separator, for example, if you give a comma then it will return

19
00:01:29.210 --> 00:01:32.780
individual values separated by comma.

20
00:01:33.170 --> 00:01:40.670
If you give multiple characters that is a word, then that word will be treated as a separator.

21
00:01:40.910 --> 00:01:46.820
Let's give the word is as an argument in the split method and see the output.

22
00:01:47.980 --> 00:01:56.920
So now every time it finds the is, it's treated as a separator and this is what we get when is is the

23
00:01:56.940 --> 00:01:57.820
separator.

24
00:01:57.940 --> 00:02:00.910
So this is a normal usage of split method.

25
00:02:00.910 --> 00:02:06.700
But as seen in the syntax, we can use split with regular expression as well.

26
00:02:06.700 --> 00:02:08.740
So let's try it with an example.

27
00:02:09.310 --> 00:02:13.990
I'm adding a digit after every word in the string.

28
00:02:13.990 --> 00:02:18.460
Now I will give a pattern as an argument in the split.

29
00:02:18.850 --> 00:02:22.000
I'll say slash D that is digit.

30
00:02:26.880 --> 00:02:35.940
Now you can see that split considers regular expression pattern as a separator and does the job of splitting

31
00:02:35.940 --> 00:02:36.750
the string.

32
00:02:36.750 --> 00:02:42.840
And thus we get individual words separated by a digit in the array.

33
00:02:43.290 --> 00:02:49.950
In case you want that, the digit should also be included in the results which you don't see in the

34
00:02:49.950 --> 00:02:51.330
output at the moment.

35
00:02:51.750 --> 00:02:56.920
Then you can use parentheses along with slash DX.

36
00:02:57.030 --> 00:02:59.250
Let's try that and see the output.

37
00:03:04.410 --> 00:03:11.610
Now we have the separator also included in the output or in the returned array.

38
00:03:12.270 --> 00:03:19.410
That is also an optional parameter called limit, which you can pass in the split method, which limits

39
00:03:19.410 --> 00:03:22.980
the number of elements or values returned.

40
00:03:23.400 --> 00:03:31.230
Let's add a limit in the current example that I want only three values to be returned and see the output.

41
00:03:33.430 --> 00:03:41.680
Now you see that only three values are returned in the output Split method with various patterns is

42
00:03:41.680 --> 00:03:45.040
a very useful feature in day to day programming.

