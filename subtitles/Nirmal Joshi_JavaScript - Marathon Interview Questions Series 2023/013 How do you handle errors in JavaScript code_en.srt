1
00:00:00,060 --> 00:00:03,960
In this section we are discussing about error handling in JavaScript.

2
00:00:04,080 --> 00:00:06,750
There will be six related questions to this topic.

3
00:00:10,000 --> 00:00:15,160
Error handling is one of the very important concepts in any programming language.

4
00:00:15,400 --> 00:00:19,510
When you write the code, it may have errors at runtime.

5
00:00:19,750 --> 00:00:23,540
In case if error appears, the program will break.

6
00:00:23,560 --> 00:00:26,110
It will stop the execution in between.

7
00:00:26,350 --> 00:00:33,970
Ideally, you should write the code with proper validations, but still there are some unforeseen situations

8
00:00:33,970 --> 00:00:36,100
where the program breaks in between.

9
00:00:36,250 --> 00:00:39,970
In such cases, the end user is stuck.

10
00:00:40,240 --> 00:00:47,890
Ideally, what should happen is that when the program faces errors, even after validations, it should

11
00:00:47,890 --> 00:00:55,660
handle it and notify the user with proper error details like add a number and description.

12
00:00:56,020 --> 00:00:57,130
Enough of lecture.

13
00:00:57,490 --> 00:00:59,830
Let's practically try a few codes here.

14
00:01:00,130 --> 00:01:04,450
Say for example, I am writing let is equal to ten.

15
00:01:05,530 --> 00:01:06,920
Then I'd say console.log.

16
00:01:06,970 --> 00:01:08,380
I want to display the value.

17
00:01:09,940 --> 00:01:14,230
Now here I select like B is equal to 50, but there is a space missing.

18
00:01:15,250 --> 00:01:15,610
Again.

19
00:01:15,610 --> 00:01:17,560
I say console.log and.

20
00:01:18,960 --> 00:01:21,360
We display the value lecture on the call.

21
00:01:23,850 --> 00:01:27,870
Now, as you can see, that the error is displayed.

22
00:01:28,110 --> 00:01:30,050
The code is broken in between.

23
00:01:30,060 --> 00:01:32,670
The code stops, the execution in between.

24
00:01:32,820 --> 00:01:39,750
To handle this kind of situation where you do not face any error at the compile time.

25
00:01:40,050 --> 00:01:45,600
But let's say at runtime, if you face any error, then you can use the try catch block.

26
00:01:46,110 --> 00:01:48,870
The syntax of try catch block is like this.

27
00:01:51,480 --> 00:01:53,490
So let's try the same thing here also.

28
00:01:53,790 --> 00:01:55,560
I'm going to use the Tribe blog here.

29
00:01:59,090 --> 00:02:03,140
Now I'm going to shift the call in the tri block and then we will have the catch.

30
00:02:03,740 --> 00:02:10,340
And here I just display a message that added found the error object is always passed with the catch

31
00:02:10,850 --> 00:02:12,920
block that we will see in a moment.

32
00:02:13,340 --> 00:02:15,860
Let's run the code and see now what happens.

33
00:02:17,650 --> 00:02:22,650
Now, as you can see, that it has displayed a message that the adder is found here.

34
00:02:22,660 --> 00:02:27,250
The catch block has one parameter past, which is an object.

35
00:02:27,460 --> 00:02:30,100
This we call as the added object.

36
00:02:30,310 --> 00:02:36,220
This object also has properties like name, message or even stack.

37
00:02:36,280 --> 00:02:37,990
Let's check all the properties here.

38
00:02:38,260 --> 00:02:39,610
I will say console.log.

39
00:02:40,210 --> 00:02:41,200
Added our name.

40
00:02:42,860 --> 00:02:45,260
Edited out message and.

41
00:02:46,120 --> 00:02:47,380
I did not stack.

42
00:02:49,830 --> 00:02:50,970
Now let's run the code.

43
00:02:54,250 --> 00:02:55,840
This displays the error name.

44
00:02:56,140 --> 00:03:01,960
This is the error message and this is the error stack where it gives you the idea, the link of all

45
00:03:01,960 --> 00:03:03,130
the codes executed.

46
00:03:03,370 --> 00:03:10,030
Now, in this case, still the error is of the language that is the JavaScript language, and it is

47
00:03:10,030 --> 00:03:15,160
generated by the system which you are handling using the tri catch block.

48
00:03:15,160 --> 00:03:21,970
It might also happen that you have a validation in the program, a custom validation which should generate

49
00:03:21,970 --> 00:03:22,480
the error.

50
00:03:22,750 --> 00:03:28,930
In short, you want to generate or throw your own custom errors.

51
00:03:29,140 --> 00:03:33,790
You have the true operator, which you can use to generate your own error.

52
00:03:34,000 --> 00:03:36,730
The syntax is like this we use the true.

53
00:03:37,420 --> 00:03:46,000
Then we have the error object where this added object can be of class error type error, syntax error

54
00:03:46,150 --> 00:03:48,220
or any other predefined error.

55
00:03:48,550 --> 00:03:51,070
Let's try this practically as well.

56
00:03:51,310 --> 00:03:55,360
For example, we need to have age greater than or equal to 18.

57
00:03:55,360 --> 00:03:59,560
If it is less than 18 then we want to generate a new error.

58
00:03:59,560 --> 00:04:04,960
Seeing Edge added so I'll select a is equal to eight late age error.

59
00:04:04,960 --> 00:04:08,560
Now this is going to be the object where I'll say equal to new error.

60
00:04:09,040 --> 00:04:13,750
Error is the class from which this age error object is created.

61
00:04:14,140 --> 00:04:16,390
Now I am going to put this code in try block.

62
00:04:16,390 --> 00:04:25,810
I will say try if it is less than 18, I'm going to say throw edge added else I'm going to display a

63
00:04:25,810 --> 00:04:27,850
message saying that it's a valid age.

64
00:04:28,120 --> 00:04:35,380
Let's have the catch block and inside this I'll say console.log invalid age it.

65
00:04:36,570 --> 00:04:38,400
Let's run the code and see what happens.

66
00:04:41,970 --> 00:04:42,450
Now.

67
00:04:42,450 --> 00:04:46,260
This is the new error raised by the true statement.

68
00:04:46,470 --> 00:04:51,300
You can also pass error message inside the error class constructor.

69
00:04:51,480 --> 00:04:58,230
Let's say instead of having this invalid age error here, I will pass a message saying invalid age,

70
00:04:58,230 --> 00:05:05,220
but I'm passing it in the constructor of error plus and then I'm going to display error, not message.

71
00:05:05,520 --> 00:05:06,450
Let's run the call.

72
00:05:09,460 --> 00:05:14,830
Now you see that the next which we passed in the outer class is the message of this ad.

73
00:05:14,830 --> 00:05:22,330
It instead of creating the object, you can directly use the true statement to generate an ad it.

74
00:05:22,570 --> 00:05:24,850
Let's try a type error example.

75
00:05:25,130 --> 00:05:31,330
Now I'm going to remove this age, add it through age error as well, and then I'll write here through

76
00:05:31,900 --> 00:05:34,110
new type error.

77
00:05:34,120 --> 00:05:36,100
And here I'm going to say invalid age.

78
00:05:36,580 --> 00:05:43,240
It's just that we are writing everything with the inline syntax and we are not creating any new object

79
00:05:43,240 --> 00:05:44,120
for this.

80
00:05:44,170 --> 00:05:46,180
So I'll say throw new type error.

81
00:05:46,180 --> 00:05:46,660
That's it.

82
00:05:47,170 --> 00:05:49,240
Let's also add one more statement here.

83
00:05:50,110 --> 00:05:50,950
Console.log.

84
00:05:51,100 --> 00:05:52,210
Added dot name.

85
00:05:52,390 --> 00:05:54,520
Now type error is a JavaScript error.

86
00:05:54,760 --> 00:05:57,790
So we will get both the name and message together.

87
00:05:58,240 --> 00:05:59,140
Let's run the code.

88
00:06:00,520 --> 00:06:01,210
Here it is.

89
00:06:02,400 --> 00:06:02,890
All right.

90
00:06:03,210 --> 00:06:06,360
The way we have tried the trai catch block.

91
00:06:06,480 --> 00:06:12,090
That is one more block which can be added with try, catch or even without catch.

92
00:06:12,210 --> 00:06:14,190
And that is the final block.

93
00:06:14,220 --> 00:06:15,900
The syntax is like this.

94
00:06:16,110 --> 00:06:23,580
You can have the try statements, catch statements, and finally or even without catch, that is something

95
00:06:23,580 --> 00:06:31,740
like this where we have try and finally block the code placed in the final block is executed at the

96
00:06:31,740 --> 00:06:34,710
end of the block and it is always executed.

97
00:06:35,100 --> 00:06:36,630
Let's try the same thing here.

98
00:06:36,750 --> 00:06:41,820
I'm going to add it just to finally block here and writing finally code.

99
00:06:42,180 --> 00:06:43,260
Now let's run the code.

100
00:06:45,580 --> 00:06:48,090
As you see, that error is thrown.

101
00:06:48,100 --> 00:06:53,260
But at the same time, after everything is done, the final block is executed.

102
00:06:53,560 --> 00:06:58,690
So finally is something which we use when we have the finishing code.

103
00:06:58,960 --> 00:07:00,580
Write the finalizing code.

104
00:07:00,730 --> 00:07:03,550
At that time we use the final block code.

105
00:07:03,760 --> 00:07:07,690
You can also put nested tri sketch if needed.

106
00:07:08,080 --> 00:07:08,740
Like this.

107
00:07:08,950 --> 00:07:13,240
Mostly try sketch is always handled at a specific code level.

108
00:07:13,450 --> 00:07:20,320
It's not advisable to have a global tri sketch though all the code structures and programmers approach

109
00:07:20,500 --> 00:07:27,550
vary, but generally we see that more and more validations we put in our program and then in some unexpected,

110
00:07:27,550 --> 00:07:31,690
unforeseen situations we try to have the try and catch.

111
00:07:32,000 --> 00:07:38,470
Sometimes we also see that we create an error log inside the catch block as well.

112
00:07:39,630 --> 00:07:41,850
Let's discuss the relative questions of this topic.

113
00:07:43,750 --> 00:07:46,960
The first question is when do you need try catch.

114
00:07:47,200 --> 00:07:48,640
So try catch something.

115
00:07:48,640 --> 00:07:52,690
Which of course, first of all is handled at runtime, right?

116
00:07:52,690 --> 00:08:00,670
So when you see that the code executed is expecting some unforeseen situations, some portion of code

117
00:08:00,820 --> 00:08:05,290
needs to be managed properly so that the program doesn't stop in between.

118
00:08:05,320 --> 00:08:07,360
Then you use the try catch block.

119
00:08:07,570 --> 00:08:11,710
It's all about handling the error without breaking the code execution.

120
00:08:14,800 --> 00:08:21,010
The second question is how can you generate an error so you can generate your custom edit using this

121
00:08:21,010 --> 00:08:21,910
true statement?

122
00:08:22,180 --> 00:08:22,510
Right.

123
00:08:22,720 --> 00:08:26,110
As I mentioned, error type error, syntax error, all these.

124
00:08:26,110 --> 00:08:32,860
So you have your customer with the error plus like this one or the type error and syntax error or any

125
00:08:32,860 --> 00:08:37,720
predefined JavaScript error class can also be generated using true statements.

126
00:08:39,419 --> 00:08:45,930
The third question is, can you generate syntax error or reference error kind of predefined JavaScript

127
00:08:45,930 --> 00:08:46,470
errors?

128
00:08:46,620 --> 00:08:54,180
Yes, as I just mentioned, these are the predefined JavaScript errors, but you can use the true statement

129
00:08:54,390 --> 00:08:58,020
to raise the JavaScript builtin errors as well.

130
00:09:00,320 --> 00:09:04,220
The fourth question is what is the purpose of the final block?

131
00:09:04,340 --> 00:09:08,960
So the final block contains the core, which is always executed.

132
00:09:09,110 --> 00:09:13,490
Whether that is an error or that is no error in the code.

133
00:09:13,580 --> 00:09:17,120
So if there is an error, the catch code is executed.

134
00:09:17,270 --> 00:09:20,270
But finally, code is something which is always executed.

135
00:09:20,450 --> 00:09:26,900
So finally contains code which does some finishing work or some code which ought to be executed.

136
00:09:27,020 --> 00:09:28,970
We put it in finally block.

137
00:09:32,270 --> 00:09:37,160
The fifth question is how can you refer to the name or description of added?

138
00:09:37,310 --> 00:09:43,610
So inside the Cat blog, we have seen that this is the era object or whatever you name it inside this

139
00:09:43,850 --> 00:09:46,640
that is always the added details past.

140
00:09:46,640 --> 00:09:54,590
So you can say add a dot that is this object dot name or object dot message to get the name and description.

141
00:09:58,230 --> 00:10:02,850
The sixth question is, can we have finally block without a catch block?

142
00:10:03,600 --> 00:10:07,710
Of course we can have, not necessarily that we always have a catch block.

143
00:10:07,740 --> 00:10:13,290
Now, when this kind of situation happens, let's say you have some piece of code where you just want

144
00:10:13,290 --> 00:10:15,270
to let go with the added right.

145
00:10:15,360 --> 00:10:17,430
You do not want the catch block to handle it.

146
00:10:17,670 --> 00:10:22,740
And then finally is there to execute something so you can have like this try.

147
00:10:22,860 --> 00:10:26,580
And finally, this is how you can write it without a catch block as well.

