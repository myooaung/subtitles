WEBVTT
1
00:00:00.060 --> 00:00:07.290
Now we are discussing multiple questions within a single question that is adding, removing, inserting

2
00:00:07.650 --> 00:00:09.890
or replacing elements in an edit.

3
00:00:09.930 --> 00:00:15.300
In short, we are covering all the questions related to edit element manipulation.

4
00:00:15.630 --> 00:00:18.000
The categories, of course, eddies.

5
00:00:18.270 --> 00:00:21.090
And there will be six related questions on this topic.

6
00:00:21.660 --> 00:00:24.690
Let's begin with adding and removing elements in an eddy.

7
00:00:25.560 --> 00:00:30.510
There are four most known methods one can use to add or remove elements.

8
00:00:31.200 --> 00:00:38.250
The methods are Bush Bob shift and shift, though splice can also be used.

9
00:00:38.460 --> 00:00:45.030
But at the moment we will see these four methods and then we will move to other method options.

10
00:00:45.570 --> 00:00:48.690
Push and shift are used to add elements.

11
00:00:49.200 --> 00:00:57.030
The syntax of push is like this that we have the added name which you push and whatever element you

12
00:00:57.030 --> 00:00:57.870
want to add.

13
00:00:58.050 --> 00:01:05.850
You can give any number of elements you can add to an eddy push method, add one or more element at

14
00:01:05.850 --> 00:01:11.620
the end of an eddy, and it returns the new land that is count of elements.

15
00:01:11.670 --> 00:01:19.890
After adding the elements that is unsafe, method adds one or more element at the beginning of an eddy

16
00:01:20.190 --> 00:01:25.740
and it returns the new length that is count of elements after adding those elements.

17
00:01:26.580 --> 00:01:30.630
Bob Method and shift method is used to remove elements.

18
00:01:30.960 --> 00:01:39.840
Bob Method removes last element from and add a and it returns that removed element, whereas shift removes

19
00:01:39.840 --> 00:01:44.340
first element of an eddy and it returns that removed element.

20
00:01:44.670 --> 00:01:55.080
All these things we can see practically in a single example I select error is equal to one, two, three

21
00:01:55.080 --> 00:01:56.070
and four.

22
00:01:56.940 --> 00:01:58.560
Let's add five also.

23
00:01:59.130 --> 00:02:01.110
Now I will say cancel out log.

24
00:02:03.560 --> 00:02:05.030
Added Art Bush.

25
00:02:07.000 --> 00:02:08.020
I lied six here.

26
00:02:09.070 --> 00:02:10.780
Why are we saying console.log?

27
00:02:10.780 --> 00:02:14.470
Because we want to see that after push is executed.

28
00:02:14.680 --> 00:02:15.840
What it returns.

29
00:02:16.120 --> 00:02:20.650
And then I will try to display the value of ADD also.

30
00:02:20.800 --> 00:02:24.100
I'll save this and let's run this code.

31
00:02:25.880 --> 00:02:28.090
It has returned number six.

32
00:02:28.110 --> 00:02:31.100
That is actually the count of elements.

33
00:02:31.310 --> 00:02:33.740
That is one, two, three, four, five.

34
00:02:33.980 --> 00:02:37.070
And now we have added the sixth element surgery down six.

35
00:02:37.760 --> 00:02:39.890
Let me change this so it doesn't confuse you.

36
00:02:40.470 --> 00:02:42.260
I'll say test doesn't matter.

37
00:02:47.220 --> 00:02:51.390
So now we have total six elements and the test is added.

38
00:02:52.170 --> 00:02:58.470
Similarly, instead of push, if I say OpenShift, let's say on shift.

39
00:03:02.120 --> 00:03:08.660
So this is going to add the element for sure, but it is going to add at the beginning, not in the

40
00:03:09.110 --> 00:03:09.470
end.

41
00:03:09.830 --> 00:03:15.020
And also, it hasn't done total number of elements after the element is added to it.

42
00:03:15.050 --> 00:03:16.690
So earlier we had five elements.

43
00:03:16.700 --> 00:03:18.680
Now we have six elements.

44
00:03:19.190 --> 00:03:23.930
So this is about adding the elements at the end or beginning.

45
00:03:24.260 --> 00:03:26.300
Now let's try the pulp method.

46
00:03:27.200 --> 00:03:29.030
So I'll say added art pulp.

47
00:03:29.030 --> 00:03:30.920
We don't need to pass any argument there.

48
00:03:31.520 --> 00:03:34.250
It is just that we say added our pulp.

49
00:03:34.820 --> 00:03:41.840
So this should remove the last element and it should return the removed element also.

50
00:03:42.140 --> 00:03:44.830
So the last element is file that will be returned.

51
00:03:44.840 --> 00:03:45.500
Let's see this.

52
00:03:49.360 --> 00:03:50.830
It has returned fire.

53
00:03:50.830 --> 00:03:56.860
And now our ad, it has only four elements, so it removed the last element.

54
00:03:57.250 --> 00:03:58.930
Now, if I say shift here.

55
00:04:00.950 --> 00:04:04.040
Then it is going to remove the first element.

56
00:04:05.030 --> 00:04:12.560
So the first element is one and that is removed and that removal element is returned by the shift method.

57
00:04:13.190 --> 00:04:21.290
Now adding or removing in the same edit is done, but these methods either work on last or the first

58
00:04:21.290 --> 00:04:21.769
element.

59
00:04:22.220 --> 00:04:27.500
What if you want to add or rather in certain element on a specific position?

60
00:04:27.710 --> 00:04:31.430
Or how about removing a specific element from the add?

61
00:04:31.820 --> 00:04:39.020
This is where a fantastic all rounder method is handy, and that method is the splice method.

62
00:04:39.380 --> 00:04:46.940
Depending on parameters past, it does different types of job like adding, inserting, replacing,

63
00:04:47.060 --> 00:04:49.790
or even removing one or more elements.

64
00:04:50.270 --> 00:04:54.920
This is the syntax of splice, adding name, dart splice.

65
00:04:55.340 --> 00:04:57.890
The first thing is you give the start number.

66
00:04:58.250 --> 00:04:59.570
This is the index number.

67
00:04:59.600 --> 00:05:05.540
From there it starts either deleting or basically it starts performing the operation.

68
00:05:05.690 --> 00:05:09.470
The second element, which is an optional one, is delete count.

69
00:05:09.830 --> 00:05:13.540
Now if you give one, that means you want to delete one element.

70
00:05:13.550 --> 00:05:18.130
If you give five, that means you want to remove five elements from an array.

71
00:05:18.170 --> 00:05:23.030
And the last is the value which you want to add or replace.

72
00:05:23.210 --> 00:05:25.730
But this we need to check in code itself.

73
00:05:25.910 --> 00:05:28.370
So let's do that in the very same area.

74
00:05:28.580 --> 00:05:33.740
I am going to use Splice and I'll say that from the second element.

75
00:05:33.740 --> 00:05:34.910
I want to do something.

76
00:05:35.220 --> 00:05:40.130
Assume that I do not want to give any other parameters here and let's see what happens.

77
00:05:40.490 --> 00:05:43.360
Our ETA is one, two, three, four and five.

78
00:05:43.370 --> 00:05:46.610
Right now I just run the code.

79
00:05:47.990 --> 00:05:53.380
So now what this has done is from this second, that is zero one and two.

80
00:05:53.390 --> 00:05:56.270
This is the second index number from second.

81
00:05:56.510 --> 00:05:59.030
It has deleted all the elements.

82
00:05:59.240 --> 00:06:05.870
So you can see that if you want to remove all the elements after a specific index number, you use place

83
00:06:05.870 --> 00:06:06.470
like this.

84
00:06:06.650 --> 00:06:10.050
So this has removed all the elements from second index.

85
00:06:10.070 --> 00:06:15.950
If I say zero here, that means I want to remove all the elements from zero index.

86
00:06:16.280 --> 00:06:19.670
That is an empty area as you can see here at the same time.

87
00:06:19.880 --> 00:06:24.770
When I say console.log on this, it returns the deleted element.

88
00:06:24.780 --> 00:06:31.940
So you can see that the syntax of splice is it takes start, it takes delete count, which is optional.

89
00:06:32.210 --> 00:06:37.250
Value is also optional, but it returns all the deleted items.

90
00:06:37.580 --> 00:06:44.320
Now here, if I say from second position, I do not want to remove all elements.

91
00:06:44.330 --> 00:06:48.670
What I want is I just want to remove maybe one element only.

92
00:06:48.680 --> 00:06:50.930
That's where delete count is useful.

93
00:06:51.290 --> 00:06:54.170
Let's save this and run it.

94
00:06:56.020 --> 00:07:02.410
Now the deleted element is only this one that is three that has returned and now the edit does not have

95
00:07:02.410 --> 00:07:05.620
three anywhere, but it has one, two, four and five.

96
00:07:05.980 --> 00:07:08.740
So here you can view any number of elements you want.

97
00:07:09.010 --> 00:07:14.230
Let's see, that is a third argument, which is actually and number of arguments you give here.

98
00:07:14.440 --> 00:07:14.680
Right?

99
00:07:14.680 --> 00:07:15.580
That is a value.

100
00:07:15.790 --> 00:07:17.320
What value is here?

101
00:07:17.320 --> 00:07:18.520
We have use two.

102
00:07:18.520 --> 00:07:22.600
That is the starting point number of elements you want to delete.

103
00:07:22.600 --> 00:07:28.810
So we say one only assume that we want to add at the same time instead of three.

104
00:07:28.930 --> 00:07:32.050
I just want to say new what this will do.

105
00:07:32.440 --> 00:07:40.720
This will remove the element, one element from second position, and on that position it will add this

106
00:07:40.720 --> 00:07:41.260
element.

107
00:07:41.290 --> 00:07:43.090
That means instead of three.

108
00:07:43.360 --> 00:07:46.630
Now we will have this new on this place.

109
00:07:47.170 --> 00:07:52.030
So in a way you can see that you have replaced an element, right?

110
00:07:52.300 --> 00:07:56.500
Let's save this and run to get the clear idea how it happens.

111
00:07:57.190 --> 00:08:02.650
So we have one, two and new three is removed and new is inserted.

112
00:08:02.740 --> 00:08:07.960
Imagine you give more items here and number of items, let's say another one.

113
00:08:09.880 --> 00:08:10.780
What this will do.

114
00:08:11.080 --> 00:08:15.190
This will remove one and add to on the second position.

115
00:08:16.090 --> 00:08:21.100
So it means you will have two items inserted and one removed.

116
00:08:22.330 --> 00:08:25.130
So we have one, two, three years removed.

117
00:08:25.780 --> 00:08:28.210
We have new another four and five.

118
00:08:28.870 --> 00:08:34.380
If you remove this one and see zero, that means you do not want to delete anything.

119
00:08:34.390 --> 00:08:39.730
Then naturally it won't do straight away insert and it will not replace in a way it will not delete.

120
00:08:40.000 --> 00:08:40.390
Three.

121
00:08:40.570 --> 00:08:41.830
Let's check this also.

122
00:08:42.610 --> 00:08:44.140
Now the RSI has grown.

123
00:08:44.320 --> 00:08:50.290
It returns empty, adding that means there is nothing to delete and it returns deleted items only.

124
00:08:50.860 --> 00:08:58.720
And here we have one two new from the second position new another three, four and five.

125
00:08:59.290 --> 00:09:05.740
So splice, depending on the type of argument, the way you pass the arguments, it behaves.

126
00:09:05.920 --> 00:09:09.850
So it's a fantastic method to perform all types of operation.

127
00:09:10.060 --> 00:09:14.710
Imagine that you want to add an item like a push method that is at the end.

128
00:09:14.950 --> 00:09:15.910
How will you do that?

129
00:09:16.390 --> 00:09:18.940
You will see added dot length.

130
00:09:20.170 --> 00:09:25.010
That means at last you want to add, let's say, a new element.

131
00:09:25.030 --> 00:09:26.080
I just want to say new.

132
00:09:26.320 --> 00:09:29.350
We don't add to element at the moment, just new.

133
00:09:29.770 --> 00:09:36.970
So when you say added length here, that means that's the last place where you want to insert this element.

134
00:09:37.360 --> 00:09:38.200
Let's do this.

135
00:09:41.280 --> 00:09:43.230
It adds the element at the end.

136
00:09:43.380 --> 00:09:48.480
Similarly, if you want it, it should work as an shift method that it should add at the beginning.

137
00:09:48.660 --> 00:09:49.950
Then you can say zero here.

138
00:09:50.400 --> 00:09:54.540
So from zero to index it'll start adding the list of items.

139
00:09:54.570 --> 00:09:58.050
Right now we have one item only, so that's added at the beginning.

140
00:09:58.500 --> 00:10:05.430
So Splice is a fantastic way to deal with various types of operations within an ADI.

141
00:10:05.790 --> 00:10:09.150
But yes, Splice does change the original ADI.

142
00:10:09.180 --> 00:10:09.540
Right?

143
00:10:09.540 --> 00:10:14.790
So it does mutate the ADI, which is not a very good practice in some cases.

144
00:10:15.030 --> 00:10:15.290
Right.

145
00:10:15.300 --> 00:10:17.430
You should not mutate the original object.

146
00:10:17.610 --> 00:10:19.620
But that's a different discussion.

147
00:10:19.620 --> 00:10:20.730
It's for some identity.

148
00:10:21.240 --> 00:10:23.610
At least right now you can get that.

149
00:10:23.670 --> 00:10:25.830
How useful the splice method is.

150
00:10:26.130 --> 00:10:28.740
Now let's discuss related questions of this topic.

151
00:10:29.400 --> 00:10:34.620
The first question is what is the difference between Bush and shift method?

152
00:10:35.040 --> 00:10:41.970
We have already seen that Bush is acting on the last element, whereas on shift is the beginning of

153
00:10:41.970 --> 00:10:42.430
the ADI.

154
00:10:42.450 --> 00:10:43.950
So on shift adds element.

155
00:10:44.190 --> 00:10:45.360
But at the beginning.

156
00:10:48.060 --> 00:10:51.930
The second question is what is the difference between pop and shift?

157
00:10:52.230 --> 00:10:56.730
So same thing that both the methods remove elements.

158
00:10:57.000 --> 00:11:02.880
But the thing is, Bob does it at the end, whereas shift works on the first element.

159
00:11:05.420 --> 00:11:09.980
Third question is how can you insert an element had given position?

160
00:11:10.340 --> 00:11:17.120
So splice is the method which we can use and we don't say delete count there and in place of start with

161
00:11:17.120 --> 00:11:20.000
you any index number and that will do the job.

162
00:11:22.360 --> 00:11:26.020
The fourth question is how can you remove a specific element?

163
00:11:26.260 --> 00:11:31.750
Again, you will not give any items and you will specify the index number.

164
00:11:31.960 --> 00:11:35.920
And in place of delete count you will have just one.

165
00:11:35.920 --> 00:11:38.590
So that will remove that specific element.

166
00:11:40.930 --> 00:11:44.410
The fifth question is what does splice method return?

167
00:11:45.070 --> 00:11:48.370
So splice method returns, deleted items.

168
00:11:48.550 --> 00:11:54.040
Remember, if there is nothing to delete, then it will return an empty Adi.

169
00:11:56.250 --> 00:12:02.940
And that is what the sixth question is, that if there is no element to be removed, then what will

170
00:12:03.210 --> 00:12:04.700
splice method return?

171
00:12:04.710 --> 00:12:11.680
And this is a kind of code which is Shawn and one can ask you that what will be the output for this?

172
00:12:11.700 --> 00:12:15.360
So there will be an empty area in this piece of code.

