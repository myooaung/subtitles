WEBVTT
1
00:00:03.140 --> 00:00:08.480
In this section, we will see you and listener breakpoints among different breakpoint types.

2
00:00:10.090 --> 00:00:15.160
There are different types of breakpoints available in the developer tools debugging pane.

3
00:00:16.040 --> 00:00:23.660
Let us begin with a very commonly used line point, also known as line of code breakpoint, which I

4
00:00:23.660 --> 00:00:24.770
have already mentioned.

5
00:00:25.990 --> 00:00:33.010
When the exact region of the code to debug is known, then we can use line breakpoints.

6
00:00:33.730 --> 00:00:37.840
We have already seen this by clicking near the line number.

7
00:00:38.110 --> 00:00:45.910
We can place a line breakpoint and at the time of execution, the debugger pauses when such breakpoints

8
00:00:45.910 --> 00:00:47.470
are encountered.

9
00:00:47.590 --> 00:00:48.310
Like this.

10
00:00:50.110 --> 00:00:52.480
To use event listener breakpoints.

11
00:00:52.480 --> 00:00:55.750
First, let us understand what is an event listener?

12
00:00:56.320 --> 00:01:03.310
Event listener is an internal process that waits for any event to occur so that the action which has

13
00:01:03.310 --> 00:01:08.110
to execute after that event is fired can be executed.

14
00:01:09.680 --> 00:01:16.220
We already have discussed about event listener and add event listener methods inside the Domme sections.

15
00:01:17.460 --> 00:01:25.080
The events here can be any key press on the keyboard or the mouse click single or double click by the

16
00:01:25.080 --> 00:01:25.680
user's.

17
00:01:27.500 --> 00:01:35.090
And even listener matter in JavaScript is an inbuilt function to add event listeners, which we have

18
00:01:35.090 --> 00:01:35.930
already seen.

19
00:01:37.130 --> 00:01:41.450
But here I have used the on click event handler directly on the button.

20
00:01:42.200 --> 00:01:49.580
So the event listener breakpoints are used when you want to pause the execution on the code that runs

21
00:01:49.580 --> 00:01:51.170
after an event is fired.

22
00:01:52.260 --> 00:01:55.260
In the debugging pane under this event.

23
00:01:55.260 --> 00:01:56.940
Listener Break Points Tree.

24
00:01:57.450 --> 00:02:01.740
That is a list of different types of events like animation.

25
00:02:02.070 --> 00:02:06.180
DOM Mutation that is modification of DOM structure.

26
00:02:06.630 --> 00:02:08.150
Drag and drop events.

27
00:02:08.160 --> 00:02:08.970
Device.

28
00:02:09.270 --> 00:02:10.320
Keyboard events.

29
00:02:10.530 --> 00:02:11.460
Lord Events.

30
00:02:11.550 --> 00:02:15.480
Mouse events, touch and window events, etc..

31
00:02:16.830 --> 00:02:23.010
As the edition is performed on the Button Click Event, let me put the event listener breakpoint.

32
00:02:23.280 --> 00:02:25.230
I will expand this mouse option.

33
00:02:25.620 --> 00:02:27.840
Under that check the click option.

34
00:02:28.530 --> 00:02:34.710
So when I click on the button, the click event is fired and the debugger pauses on it.

35
00:02:36.010 --> 00:02:42.970
Expand this past event listener option and select this set enriched DML option under it.

36
00:02:44.010 --> 00:02:46.710
This will pass when it finds enriched.

37
00:02:46.710 --> 00:02:47.670
HTML used.

38
00:02:48.660 --> 00:02:55.380
When I click on the button, it will pause on the click event as it is the first breakpoint and now

39
00:02:55.530 --> 00:02:56.910
resume the execution.

40
00:02:57.720 --> 00:03:02.340
It paused on this line with enriched HTML and not here.

41
00:03:03.330 --> 00:03:07.200
Because if the inputs are empty, it causes dysfunction.

42
00:03:08.210 --> 00:03:12.800
And if I resume again, it displays the interactive HTML content.

43
00:03:13.640 --> 00:03:18.950
If I provide the values and then click, it will pass on this line.

44
00:03:20.320 --> 00:03:28.510
So this is how you can place breakpoints for different events like mouse keyboard load, window animation,

45
00:03:28.510 --> 00:03:29.200
etc..

