WEBVTT
1
00:00:00.710 --> 00:00:09.590
In this section we are discussing questions and the concepts about Ajax and XML as to DP request object,

2
00:00:10.070 --> 00:00:12.410
which is also known as the X AJA.

3
00:00:12.890 --> 00:00:18.650
The category is of course, asynchronous JavaScript, and there are nine related questions discussed

4
00:00:18.650 --> 00:00:19.550
in this section.

5
00:00:20.590 --> 00:00:24.340
Assume a web page where you have a dropdown list of countries.

6
00:00:24.700 --> 00:00:28.000
On selection of country you are supposed to fill.

7
00:00:28.060 --> 00:00:32.140
The state data of the selected country in the next dropdown.

8
00:00:32.740 --> 00:00:35.380
It means on selection of country.

9
00:00:35.650 --> 00:00:43.600
That is a request sent on the server to fetch the data of states and those states will be filled in

10
00:00:43.600 --> 00:00:45.580
this next dropdown list.

11
00:00:46.120 --> 00:00:48.490
There are two main things in this example.

12
00:00:48.700 --> 00:00:57.700
Number one, make a call to the server or in other words, call a rest API or an API on the server.

13
00:00:58.480 --> 00:01:04.060
Number two, the data which is retrieved at the client end needs to be displayed.

14
00:01:05.060 --> 00:01:11.990
Now, when I say displaying the data in early days of web development, it used to refresh the entire

15
00:01:11.990 --> 00:01:20.090
page for each data retrieval because of Ajax are also called as an AJAX call.

16
00:01:20.420 --> 00:01:26.300
You can fetch the data from the server and display without refreshing the entire page.

17
00:01:26.930 --> 00:01:36.350
So Ajax is about making an SDP call to the web service API or rest API and that too.

18
00:01:36.350 --> 00:01:40.190
Without refreshing the entire page, you display the data.

19
00:01:41.120 --> 00:01:45.950
JavaScript gives the fetch API nowadays to make an Ajax call.

20
00:01:46.370 --> 00:01:54.740
But earlier there was an object called XML HDP request, which is still there but not used often.

21
00:01:55.720 --> 00:02:04.830
ExxonMobil as should be request object is often referred to as etc. The full form of Ajax is asynchronous

22
00:02:04.840 --> 00:02:06.700
JavaScript and ExxonMobil.

23
00:02:07.480 --> 00:02:17.080
This last word Excel in Ajax is not refer to the example data format, but it is the reference of ExxonMobil.

24
00:02:17.110 --> 00:02:19.450
SDP Request Object Only.

25
00:02:20.290 --> 00:02:27.130
In this section we are discussing ExxonMobil SDP request object, which you should know as an expert

26
00:02:27.130 --> 00:02:28.000
of JavaScript.

27
00:02:28.300 --> 00:02:35.710
But let me also tell you that these days we are using a far better option for Ajax, and that is the

28
00:02:35.710 --> 00:02:39.580
Fetch API, which we will discuss in our forthcoming sections.

29
00:02:40.380 --> 00:02:46.630
Let's practically try to code using XM allegedly request object, which now on I'm going to refer as

30
00:02:46.630 --> 00:02:47.380
an exit jar.

31
00:02:48.220 --> 00:02:53.230
I'm taking a commonly used fake API called Jason.

32
00:02:53.230 --> 00:02:54.250
Please hold placeholder.

33
00:02:55.430 --> 00:02:58.650
Because right now we are not creating any server side API.

34
00:02:58.670 --> 00:03:05.600
I'm using a site called Jason Placeholder, which has a way to call the fake API.

35
00:03:05.630 --> 00:03:08.080
They give you the fake API and the data.

36
00:03:08.090 --> 00:03:14.180
Say, for example, these are the resources we have posts, comments, albums, photos, tattoos, users,

37
00:03:14.180 --> 00:03:14.750
etc..

38
00:03:15.350 --> 00:03:16.790
Let's say click on comments.

39
00:03:18.330 --> 00:03:19.680
This is the data you get.

40
00:03:19.710 --> 00:03:23.160
Now this data, we want to get in our JavaScript code.

41
00:03:23.700 --> 00:03:29.790
So we are going to make an AJAX call, or we are going to call this rest API and we will get the data

42
00:03:29.790 --> 00:03:30.720
at client site.

43
00:03:31.940 --> 00:03:36.880
The first thing I'm going to do is I'm going to create an object of the exit.

44
00:03:36.950 --> 00:03:41.770
Ah, so I'll say SML as GDP request.

45
00:03:42.710 --> 00:03:49.210
So now we have the request object, which is an instance of this XML SDP request class.

46
00:03:50.180 --> 00:03:55.490
Now the next step is that you configure this request object with an open method.

47
00:03:56.180 --> 00:03:59.420
The syntax of open method is like this.

48
00:04:00.700 --> 00:04:09.890
Here the matter argument is any edge deep request method like get to fetch the data post to add or insert

49
00:04:09.920 --> 00:04:15.730
data put to edit the data or delete to delete the data.

50
00:04:16.450 --> 00:04:19.480
There are many other options with this method also.

51
00:04:20.320 --> 00:04:26.110
So in our code we will write request not open.

52
00:04:27.640 --> 00:04:30.160
What we want is that we want to get the data.

53
00:04:31.380 --> 00:04:35.850
The next parameter is you are an and is the easiest to understand.

54
00:04:36.740 --> 00:04:43.520
It is the you are the string or in other words, the part or location where the request will be sent.

55
00:04:44.240 --> 00:04:46.820
The other arguments are optional.

56
00:04:47.980 --> 00:04:55.060
Async is a boolean parameter and by default it is true this parameter decides whether the process of

57
00:04:55.060 --> 00:05:00.220
call will be asynchronous or synchronous anyway.

58
00:05:00.340 --> 00:05:05.440
By default it is true, and it means by default it will be asynchronous.

59
00:05:06.570 --> 00:05:13.230
If you give false, it means it will block the rest of the process unless the request is done with the

60
00:05:13.230 --> 00:05:18.600
job somewhat like the alert which stops the execution unless it is acknowledged.

61
00:05:19.230 --> 00:05:26.670
The user and password parameters are for the authentication purpose, but the values are null by default.

62
00:05:27.150 --> 00:05:32.970
So in our code we just want to add that you are told that you are l, which I am going to copy from

63
00:05:32.970 --> 00:05:33.780
this place.

64
00:05:34.970 --> 00:05:35.990
So I'll paste it here.

65
00:05:36.410 --> 00:05:37.400
Here is the URL.

66
00:05:38.180 --> 00:05:42.320
You can consider the open method as a kind of settings method.

67
00:05:42.740 --> 00:05:45.020
You have set the parameters.

68
00:05:45.260 --> 00:05:48.830
The actual connection is made with this send method.

69
00:05:49.160 --> 00:05:57.740
So once you open the next method, you have to call is this send method child to request, not send

70
00:05:59.600 --> 00:06:00.620
the syntax off.

71
00:06:00.680 --> 00:06:02.660
The send method is something like this.

72
00:06:03.290 --> 00:06:04.910
It has an optional body.

73
00:06:05.270 --> 00:06:10.840
If you do not specify any value in this send method, then it will pass a null value.

74
00:06:11.300 --> 00:06:17.570
Otherwise you can pass the data which you may want to send with the request, especially like post to

75
00:06:17.570 --> 00:06:20.300
request, maybe delete our added request as well.

76
00:06:20.750 --> 00:06:26.000
So here we are just going to make a get request will say send and no parameters in it.

77
00:06:26.480 --> 00:06:31.310
Now once you have sent the request to the server, you should receive the data.

78
00:06:31.730 --> 00:06:40.040
When the data is received, you need to show there is an event called Load which is fired when the exit

79
00:06:40.310 --> 00:06:42.860
transaction completes successfully.

80
00:06:43.460 --> 00:06:51.860
So on load event we can display the data and that's how I'm going to configure request dot on load.

81
00:06:52.850 --> 00:06:54.560
I'm going to assign a function here.

82
00:06:56.660 --> 00:06:58.790
Now how am I going to display the data?

83
00:06:58.790 --> 00:07:00.050
I'll say console.log.

84
00:07:01.040 --> 00:07:04.730
The request object will have a property called response.

85
00:07:05.230 --> 00:07:11.420
Early days we used to write response text also, but we just go with response nowadays.

86
00:07:11.780 --> 00:07:17.870
So the response property contains the body content of the response which is received.

87
00:07:18.480 --> 00:07:22.790
Let's run discord and see what happens in the console.

88
00:07:22.790 --> 00:07:26.690
We get the output because we try to display the response.

89
00:07:27.530 --> 00:07:36.200
So now you know, the exits are objects, methods like open and send our event like load and property

90
00:07:36.200 --> 00:07:37.520
like response.

91
00:07:38.090 --> 00:07:44.240
But there are other methods, events and properties which are equally important and useful.

92
00:07:44.810 --> 00:07:51.560
For example, when you received the data from the server, that is always a status returned by the server.

93
00:07:52.100 --> 00:07:55.250
The status has numbers as well as text.

94
00:07:55.820 --> 00:08:03.200
The S&P statuses dot com gives you an idea about how the codes are decided by the community.

95
00:08:03.470 --> 00:08:07.100
Here you see that starting from 100, there are various values.

96
00:08:07.460 --> 00:08:09.260
200 that means okay.

97
00:08:09.260 --> 00:08:15.560
So okay will be the text which you will receive and 200 is the value for that to zero one is when the

98
00:08:15.560 --> 00:08:17.720
successful post request is made.

99
00:08:18.170 --> 00:08:22.640
There are various codes we have listed here, so you can check it right now.

100
00:08:22.640 --> 00:08:29.690
Our concern is that we want to see that what is the status when we receive this response.

101
00:08:29.900 --> 00:08:38.240
So along with this I'm going to write console.log request, not the status.

102
00:08:38.990 --> 00:08:40.220
Let's try to run this.

103
00:08:40.850 --> 00:08:44.750
You see that the first value displayed is 200, which is the status.

104
00:08:45.230 --> 00:08:47.600
Imagine that that is an issue on the server.

105
00:08:47.600 --> 00:08:50.540
For example, I just changed the spelling of this comments.

106
00:08:51.470 --> 00:08:52.820
Now that is an invalid.

107
00:08:52.820 --> 00:08:53.500
You are ill.

108
00:08:53.510 --> 00:09:00.830
So when I run this, this is going to give me 404 and it also displays a message itself.

109
00:09:01.460 --> 00:09:05.030
As long as the response is concerned, there is no value in it.

110
00:09:05.540 --> 00:09:08.540
In this case, that is a better way to deal with coding.

111
00:09:08.540 --> 00:09:11.360
So what we can do is we can put any condition here.

112
00:09:11.840 --> 00:09:18.590
If the status is 200, that means it is successful, then we display the response.

113
00:09:20.180 --> 00:09:24.710
Otherwise we can display a proper message that

114
00:09:28.280 --> 00:09:31.760
invalid request or whatever the related messages.

115
00:09:32.150 --> 00:09:36.560
So now if you run is going to display the error message properly.

116
00:09:36.560 --> 00:09:42.590
And the moment you correct this or let's say the server is running fine, then we will have the data

117
00:09:42.590 --> 00:09:43.370
displayed here.

118
00:09:44.330 --> 00:09:47.360
Now let's try one more property named response type.

119
00:09:47.570 --> 00:09:54.260
I will add request dot response type is equal to let's add Jason.

120
00:09:54.950 --> 00:10:01.670
Now if we run the data format, the response which we have here is automatically converted into the

121
00:10:01.670 --> 00:10:03.890
JSON format by default.

122
00:10:03.890 --> 00:10:09.920
Earlier it was text, but when you see a response type is equal to Jason, it will take care.

123
00:10:10.190 --> 00:10:15.890
The response will automatically be a kind of object literal where you have the data here.

124
00:10:15.920 --> 00:10:19.610
If I expand this, you will get the idea how the data is presented.

125
00:10:19.610 --> 00:10:23.240
So you see that array and the object literal data we have here.

126
00:10:24.200 --> 00:10:31.640
The values for response type other than Jason are you can put simply blank audio and text.

127
00:10:31.700 --> 00:10:34.160
It means the data is text only.

128
00:10:34.840 --> 00:10:37.540
If you say blob, it means it is binary data.

129
00:10:38.020 --> 00:10:44.890
And if you see a document that is for HTML or SML document type of data, this is how you use the response

130
00:10:44.890 --> 00:10:45.700
type property.

131
00:10:46.540 --> 00:10:52.090
That is also a timeout property and timeout event related to this object.

132
00:10:52.720 --> 00:10:53.530
Let's try that.

133
00:10:53.530 --> 00:10:59.710
Also, for example, I'll just set a timeout saying request dot timeout.

134
00:10:59.800 --> 00:11:04.750
I want that the call should wait for 2000 milliseconds.

135
00:11:04.750 --> 00:11:05.920
That is 2 seconds.

136
00:11:06.580 --> 00:11:11.020
If the call exceeds 2 seconds, then it should come out of it.

137
00:11:11.350 --> 00:11:14.380
That is, the request is timed out in a way.

138
00:11:15.040 --> 00:11:17.050
We can also configure an event.

139
00:11:17.050 --> 00:11:20.460
I can see request dot on timeout.

140
00:11:20.470 --> 00:11:27.520
It means when the timeout is over, let's say, and still the request is not completed, then we display

141
00:11:27.520 --> 00:11:29.380
a message console.log.

142
00:11:30.640 --> 00:11:31.420
Timeout.

143
00:11:32.680 --> 00:11:39.310
Now if I run because we have given 2000 milliseconds, that is it is the sufficient time to fetch the

144
00:11:39.310 --> 00:11:39.760
data.

145
00:11:39.880 --> 00:11:43.150
2 seconds, but let me just reduce one zero.

146
00:11:43.240 --> 00:11:47.320
So now it is just 200 milliseconds and this takes more time.

147
00:11:47.560 --> 00:11:56.260
So now if I run it has executed the timed out and because the timeout was 200, it executed the on timeout

148
00:11:56.260 --> 00:11:57.280
event as well.

149
00:11:57.730 --> 00:12:04.510
So you can set the call timeout with the timeout property and you can handle it with the on timeout

150
00:12:04.510 --> 00:12:04.960
event.

151
00:12:06.040 --> 00:12:13.450
There is also an event on progress which is fired continuously when a request receives data.

152
00:12:14.500 --> 00:12:21.460
On Adder is one event which is fired when there is an error encountered while requesting.

153
00:12:21.880 --> 00:12:26.890
So you can see a request dart on progress and you have a function like this.

154
00:12:28.010 --> 00:12:33.680
There is also one more important and commonly used event called on red state change.

155
00:12:34.750 --> 00:12:39.580
This event is fired when a property called real estate changes.

156
00:12:40.600 --> 00:12:43.930
The real estate property can have these different values.

157
00:12:44.650 --> 00:12:49.540
So once the request is made, this real estate will keep on changing its value.

158
00:12:50.320 --> 00:12:52.300
Initially, it will be zero.

159
00:12:52.690 --> 00:12:54.890
Once the open is called, it will be one.

160
00:12:55.420 --> 00:12:57.730
When this scent is called, it will be true.

161
00:12:58.240 --> 00:13:01.440
When the data starts downloading, it will be three.

162
00:13:01.450 --> 00:13:04.390
And when everything is done, it will be four.

163
00:13:05.200 --> 00:13:07.150
That means the operation is complete.

164
00:13:07.990 --> 00:13:16.660
Let's try to configure on real estate change, so I'll just simply write on ready state change event

165
00:13:16.660 --> 00:13:16.990
here.

166
00:13:18.210 --> 00:13:22.530
So right now what I will do, I will remove this time out, which we don't need.

167
00:13:23.100 --> 00:13:25.860
We don't even need this else condition for the moment.

168
00:13:25.950 --> 00:13:28.650
And this timeout is also not required.

169
00:13:29.100 --> 00:13:38.130
Now, changing this to under state change and adding a request dot ready state is equal to full and

170
00:13:38.130 --> 00:13:39.870
the status should be 200.

171
00:13:40.110 --> 00:13:45.700
Now, if you run this, it has a validation that everything is done with a ready state and the state

172
00:13:45.720 --> 00:13:46.620
as is 200.

173
00:13:46.710 --> 00:13:53.850
Then we display the value in case if you want to abort the request, you can use the method.

174
00:13:54.360 --> 00:13:55.920
Request dot abort.

175
00:13:56.370 --> 00:13:57.420
This is how you write it.

176
00:13:58.730 --> 00:14:04.190
The extra object also allows you to set and get at UDP headers.

177
00:14:05.090 --> 00:14:11.720
The syntax is you have the object name dart set request header is the method name where you can decide

178
00:14:11.720 --> 00:14:15.380
which header you want to set and what is the value.

179
00:14:16.100 --> 00:14:24.410
You have to call this method immediately after open and before this send to set the headers to get the

180
00:14:24.410 --> 00:14:31.670
value of response headers you can use get all response headers method and get response header method

181
00:14:31.670 --> 00:14:32.110
as well.

182
00:14:32.330 --> 00:14:37.070
Let's try first of all, get all response headers.

183
00:14:37.070 --> 00:14:45.350
Also console log request, don't get all response headers.

184
00:14:46.610 --> 00:14:50.120
Now this should display all the headers which is with the response.

185
00:14:50.120 --> 00:14:51.140
So let me run this.

186
00:14:52.130 --> 00:14:57.620
As you can see, that cache control content type expires and program.

187
00:14:58.370 --> 00:15:01.310
Now, for example, let's take content type for the moment.

188
00:15:01.880 --> 00:15:10.400
Let's say you want to have this content type value so you can say console.log request dot get response

189
00:15:11.840 --> 00:15:17.150
header which header you want you want just content type, content, dash type.

190
00:15:18.170 --> 00:15:18.530
Right?

191
00:15:18.530 --> 00:15:20.090
So now let's run.

192
00:15:20.570 --> 00:15:21.230
You see this?

193
00:15:22.280 --> 00:15:26.330
It displays the only response header that is the content type.

194
00:15:26.810 --> 00:15:29.780
So two methods you have to get the response headers.

195
00:15:30.740 --> 00:15:37.550
The should be request object is something which is used for very few things now, like uploading files

196
00:15:37.550 --> 00:15:38.620
and stuff like that.

197
00:15:38.630 --> 00:15:44.090
Otherwise, nowadays people are using the Fetch API to make an AJAX call.

198
00:15:44.780 --> 00:15:52.880
If somebody is using the framework like React or Angular, Angular has SDP client or SDP services and

199
00:15:52.880 --> 00:15:56.630
React can use fetch api are also zero can be used.

200
00:15:56.840 --> 00:16:04.700
So XML SDP request object that is exigent is not often used nowadays, but still you should know how

201
00:16:04.700 --> 00:16:05.300
it works.

202
00:16:05.780 --> 00:16:11.330
In the forthcoming sections we are going to discuss about how the other ways that is the newer ways

203
00:16:11.330 --> 00:16:13.820
we have to deal with the AJAX calls.

204
00:16:14.510 --> 00:16:16.880
Now let's discuss related questions of this topic.

205
00:16:18.570 --> 00:16:22.890
The first question is what is an Ajax or what is Ajax call?

206
00:16:23.430 --> 00:16:29.610
So now we know that when we say Ajax, that means we are making a call to the server to maybe fetch,

207
00:16:29.610 --> 00:16:32.100
delete, retrieve or edit the data.

208
00:16:32.640 --> 00:16:35.280
We also make a HDP call for files.

209
00:16:35.280 --> 00:16:38.100
Also, we may download or upload a file.

210
00:16:38.250 --> 00:16:40.850
We explicitly make call to the servers.

211
00:16:40.890 --> 00:16:47.010
That is, SDP calls with Ajax and with the help of Ajax, the screen does not.

212
00:16:47.010 --> 00:16:52.440
The browser window does not refresh only the section of browser window gets a refresh.

213
00:16:52.680 --> 00:16:59.900
That is the use of Ajax, and to make any Ajax call we use the exit jar object or even fetch API.

214
00:16:59.910 --> 00:17:01.080
Nowadays we use it.

215
00:17:03.620 --> 00:17:08.060
Second question, how will you set a timeout with an exit request?

216
00:17:08.210 --> 00:17:10.250
So we have already seen that like this.

217
00:17:10.250 --> 00:17:15.560
We have the timeout property where we can decide number of milliseconds and of course we can attach

218
00:17:15.560 --> 00:17:20.150
the event timeout that is on timeout along with the exit our object.

219
00:17:22.579 --> 00:17:27.290
The third question is how can you set the data format for a response?

220
00:17:27.650 --> 00:17:33.890
So we already have the response type property where we can decide whether the data is binary or even

221
00:17:33.890 --> 00:17:35.240
JSON or text.

222
00:17:35.270 --> 00:17:39.590
So the data format can be decided using the response type property.

223
00:17:42.480 --> 00:17:47.070
The fourth question is explain ready state property of x AJA.

224
00:17:47.880 --> 00:17:50.910
So we have already discussed about the ready state property.

225
00:17:51.120 --> 00:17:52.600
These are the different values.

226
00:17:52.620 --> 00:17:58.710
That is zero one, two, three and four, depending on various stages of ADX call.

227
00:17:58.740 --> 00:18:01.590
We see that the ready state property changes.

228
00:18:04.240 --> 00:18:07.960
The fifth question, explain the honorary state change event.

229
00:18:08.230 --> 00:18:15.130
So honorary state change event is fired when there is a new value in the ready state property and it

230
00:18:15.130 --> 00:18:17.340
is a better way instead of on law.

231
00:18:17.560 --> 00:18:23.500
It is a better way that you use the honorary state change to deal with the data manipulation.

232
00:18:23.770 --> 00:18:28.060
So whenever there is a change in the registered property, this event will be fired.

233
00:18:28.210 --> 00:18:33.670
And depending on the state that is, you check the ready state and depending on the state you can take

234
00:18:33.670 --> 00:18:40.690
various actions though we have just tried ready state for because we wanted to show the data when everything

235
00:18:40.690 --> 00:18:41.140
is done.

236
00:18:41.290 --> 00:18:47.290
But let's say you want to show a progress bar so you can say that when ready state is three constantly

237
00:18:47.290 --> 00:18:48.150
it will be three.

238
00:18:48.160 --> 00:18:52.090
That means the data is received at client side constantly.

239
00:18:52.360 --> 00:18:56.530
Once it is four, that means the data is received and the job is done.

240
00:18:57.010 --> 00:19:02.890
The sixth question is how can you force the exit request to stop the execution?

241
00:19:03.070 --> 00:19:09.040
So we have the abort method, which helps us to stop the request in between any process.

242
00:19:11.570 --> 00:19:14.590
When is the Lord event called to the Lord?

243
00:19:14.600 --> 00:19:22.580
Event is called when the call to the server is completely successful at that time on load can be configured.

244
00:19:23.060 --> 00:19:27.350
Load event is executed when the Ajax call is successfully completed.

245
00:19:30.520 --> 00:19:34.450
Eight Question is how will you set the GDP headers?

246
00:19:34.630 --> 00:19:36.620
Also explain the sequence.

247
00:19:36.970 --> 00:19:43.990
So as GDP header, we have seen that we have set the request header method which helps us to set the

248
00:19:43.990 --> 00:19:45.130
SDP headers.

249
00:19:45.700 --> 00:19:52.660
It's just that you have to make sure that after open method you have to set the header and before the

250
00:19:52.670 --> 00:19:53.980
send method as well.

251
00:19:53.980 --> 00:19:55.600
So it will be something like this.

252
00:19:56.260 --> 00:20:00.400
The thing is that you have to use this method between this open and sign.

253
00:20:00.400 --> 00:20:01.420
That is the condition.

254
00:20:04.090 --> 00:20:09.100
The ninth question is explain different ways of getting response header values.

255
00:20:09.580 --> 00:20:11.110
So this is how we have done this.

256
00:20:11.110 --> 00:20:17.260
The get all response headers will display all the headers and if you want to get a specific header,

257
00:20:17.470 --> 00:20:20.590
then you can use the GetResponse header like this.

