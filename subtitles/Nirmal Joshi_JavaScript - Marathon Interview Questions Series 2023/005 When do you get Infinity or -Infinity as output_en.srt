1
00:00:00,060 --> 00:00:02,700
This section we are discussing about infinity.

2
00:00:03,180 --> 00:00:11,160
The question is when do you get infinity or minus that is negative infinity as output.

3
00:00:11,820 --> 00:00:18,150
The category of this question is JavaScript language, and there will be two related questions related

4
00:00:18,150 --> 00:00:19,320
to this topic.

5
00:00:20,040 --> 00:00:27,360
Infinity is a special integer value, which is greater than any value, or in other words, it is the

6
00:00:27,360 --> 00:00:30,660
highest possible value available in JavaScript.

7
00:00:31,140 --> 00:00:34,380
In fact, there are two possibilities for infinity.

8
00:00:34,830 --> 00:00:40,290
One is the positive infinity, and the second is negative infinity.

9
00:00:41,580 --> 00:00:44,430
Why have I written this positive underscore infinity?

10
00:00:44,790 --> 00:00:47,430
Because they are the constants available.

11
00:00:47,820 --> 00:00:49,470
Let's practically try.

12
00:00:49,500 --> 00:00:50,490
How does it work?

13
00:00:50,850 --> 00:00:53,490
I'll say console dot log.

14
00:00:53,940 --> 00:01:01,980
That is a class card number in JavaScript and that has this constant value, which is a kind of property,

15
00:01:02,550 --> 00:01:04,950
I'll say positive infinity here.

16
00:01:06,510 --> 00:01:08,280
And another console log.

17
00:01:10,430 --> 00:01:18,320
Well, I'm going to write a negative infinity letter on the score.

18
00:01:18,800 --> 00:01:21,750
I'll say no to infinity.

19
00:01:22,190 --> 00:01:25,190
Jesus, as you see the output.

20
00:01:25,490 --> 00:01:27,860
Only infinity is positive.

21
00:01:27,860 --> 00:01:29,720
Infinity and minus.

22
00:01:29,720 --> 00:01:30,620
That is negative.

23
00:01:30,620 --> 00:01:34,820
Infinity is the one which is displayed by this constant.

24
00:01:35,090 --> 00:01:38,210
We generated this with the help of constant.

25
00:01:39,120 --> 00:01:41,730
But when do we receive in the program?

26
00:01:42,180 --> 00:01:46,420
In JavaScript, the numbers are stored in 64 bit format.

27
00:01:47,100 --> 00:01:53,850
It means any value which cannot fit in this 64 bit format will return infinity.

28
00:01:54,420 --> 00:01:57,270
That means it cannot hold the value.

29
00:01:57,420 --> 00:02:00,450
The value is larger than 64 bit.

30
00:02:01,380 --> 00:02:03,810
At that time, you get infinity.

31
00:02:04,440 --> 00:02:09,850
Let's practically try this before we move to bigger values.

32
00:02:09,870 --> 00:02:13,260
I would just like to show you one feature of JavaScript.

33
00:02:14,610 --> 00:02:16,920
For example, I'll say console.log.

34
00:02:19,030 --> 00:02:21,460
I just want to have value.

35
00:02:21,460 --> 00:02:22,270
9000.

36
00:02:24,380 --> 00:02:31,580
Instead of adding a lot of zeros, what you can do is you can say small e, which actually multiplies

37
00:02:32,270 --> 00:02:38,380
this number, the one which I'm giving after E by one and four zeros.

38
00:02:38,420 --> 00:02:45,860
So this is something like this is actually one that is E and you have four zeros, right?

39
00:02:46,040 --> 00:02:48,080
So here what will happen in this case?

40
00:02:48,410 --> 00:02:51,230
It will be nine into one plus.

41
00:02:51,230 --> 00:02:52,640
These zeros will be added.

42
00:02:52,790 --> 00:02:55,130
That is 9 to 10000.

43
00:02:58,590 --> 00:02:59,400
So far this year.

44
00:02:59,400 --> 00:03:02,220
You should get 90,000.

45
00:03:02,370 --> 00:03:03,270
Let's try this.

46
00:03:07,720 --> 00:03:08,050
Right.

47
00:03:08,410 --> 00:03:13,090
So when you say E and for that means you want to add four zeros after nine.

48
00:03:14,050 --> 00:03:20,560
Similarly, I can have a minus value also because I want to generate negative infinity as well.

49
00:03:22,000 --> 00:03:24,040
So now we will have two values here.

50
00:03:26,350 --> 00:03:29,200
Plus 90,000 and -90,000.

51
00:03:30,010 --> 00:03:30,820
Imagine that.

52
00:03:30,820 --> 00:03:33,550
I want to add 400 zeros.

53
00:03:35,590 --> 00:03:39,040
And here also, I add 400 zeroes.

54
00:03:40,060 --> 00:03:41,140
Now, if I run.

55
00:03:41,320 --> 00:03:44,350
What happens now?

56
00:03:44,350 --> 00:03:51,670
You get that value infinity or negative infinity, because the value is so huge that it cannot fit in

57
00:03:52,480 --> 00:03:54,770
64 bit format.

58
00:03:54,790 --> 00:04:01,240
Also, that's why the output shows positive or negative infinity.

59
00:04:02,020 --> 00:04:05,350
We also have another way to simulate this situation.

60
00:04:05,620 --> 00:04:09,910
We can use number, dot, max, underscore value.

61
00:04:09,910 --> 00:04:13,450
That's the constant which returns the maximum available value.

62
00:04:13,630 --> 00:04:15,850
Let's try the same thing here.

63
00:04:17,380 --> 00:04:18,589
I'll say console.log.

64
00:04:18,589 --> 00:04:21,850
Log the number class.

65
00:04:23,090 --> 00:04:24,810
Not max value.

66
00:04:26,090 --> 00:04:27,800
Let's also try the same thing.

67
00:04:30,260 --> 00:04:32,840
With a negative value as well.

68
00:04:32,990 --> 00:04:37,370
But what I want is I just want that I want to multiply this by two.

69
00:04:39,610 --> 00:04:40,390
Even this one.

70
00:04:42,740 --> 00:04:48,320
Now you cannot have a value which is above max value and that you are multiplying it by two.

71
00:04:48,680 --> 00:04:51,080
Same is the case with the negative value.

72
00:04:51,320 --> 00:04:55,220
So this will also generate infinity and negative infinity.

73
00:04:55,370 --> 00:04:57,980
Let's save this and I will run the code.

74
00:05:00,080 --> 00:05:10,100
So now we have these two values generating infinity and these two values generating negative infinity.

75
00:05:10,820 --> 00:05:15,290
All these codes are generating the infinity, but this isn't the purpose.

76
00:05:15,800 --> 00:05:22,670
Ideally, when you expect that in some calculation, you might get some huge value and you want to put

77
00:05:22,670 --> 00:05:24,920
a validation, then it is useful.

78
00:05:25,430 --> 00:05:29,630
For example, you can have an if condition like this that I have.

79
00:05:29,660 --> 00:05:37,310
If there is a number which is a variable that I compare that is it negative infinity or not, or let's

80
00:05:37,310 --> 00:05:38,920
say positive infinity or not?

81
00:05:38,930 --> 00:05:42,080
If so, then you return the respective message.

82
00:05:42,320 --> 00:05:46,610
Otherwise, you may have some calculation which you do, and you return the value.

83
00:05:46,970 --> 00:05:54,710
So you actually check whether the value is in the fixed format, which JavaScript is expecting or not

84
00:05:55,190 --> 00:05:58,400
to check the finite or in finite value.

85
00:05:58,520 --> 00:06:03,650
There is also is finite matter in JavaScript, but we are checking it in.

86
00:06:03,650 --> 00:06:11,600
Next question where we also discuss one more numeric error situation called nine are also called as

87
00:06:11,750 --> 00:06:13,940
not a number at the moment.

88
00:06:14,210 --> 00:06:17,960
Let's discuss related questions of this topic.

89
00:06:19,010 --> 00:06:25,880
The first question How will you put a validation for positive or negative infinity?

90
00:06:26,570 --> 00:06:32,990
As we discussed, we can show number that positive or negative infinity we positive condition and we

91
00:06:32,990 --> 00:06:33,650
work with it.

92
00:06:36,390 --> 00:06:40,320
The second question is what will be the output of this code?

93
00:06:40,500 --> 00:06:46,590
Now, this is a situation where it shows divide by zero error in most of the programming languages.

94
00:06:46,800 --> 00:06:51,020
But here, if I try to do that, it's going to return infinitely only.

95
00:06:51,030 --> 00:06:52,440
Let's check that practically.

96
00:06:52,860 --> 00:06:58,170
I'll say simply consolidate log one divided by zero.

97
00:07:00,360 --> 00:07:07,710
I save this and running the code again and you see that we get the infinity.

98
00:07:07,920 --> 00:07:14,250
So this is also division by zero error situation where we get infinity in JavaScript.

