WEBVTT
1
00:00:00.060 --> 00:00:06.780
In this asynchronous JavaScript category, we are discussing one more asynchronous iterator end generator

2
00:00:06.780 --> 00:00:07.410
concept.

3
00:00:07.890 --> 00:00:13.560
The symbolic dot async iterator is the class which is used in this case.

4
00:00:13.920 --> 00:00:16.530
There are three related questions to this topic.

5
00:00:22.100 --> 00:00:28.820
We have already seen it writers and we also tried to iterate through object literal using symbol dot

6
00:00:28.820 --> 00:00:29.390
iterator.

7
00:00:29.600 --> 00:00:32.530
It means we use default off loop.

8
00:00:32.840 --> 00:00:41.150
The idea behind async iterator is about iterating through the data which is coming asynchronously or

9
00:00:41.210 --> 00:00:45.260
in chunks on demand instead of getting it together.

10
00:00:45.920 --> 00:00:52.280
It means you can use the four of eight of loop instead of four of loop.

11
00:00:52.850 --> 00:00:59.720
We have seen this example in the IT writers section where the object literally is converted into an

12
00:00:59.720 --> 00:01:00.890
iterable object.

13
00:01:01.280 --> 00:01:02.930
Let me first of all run the code.

14
00:01:03.800 --> 00:01:11.990
So we have this is equal to ten and B is equal to 20, and we are looping through from A to B, and

15
00:01:11.990 --> 00:01:15.230
for that we are using the far off loop.

16
00:01:16.100 --> 00:01:24.530
Now the same code we can convert to async iterator and in that case we will be able to use for a rate

17
00:01:24.530 --> 00:01:26.840
of instead of four off.

18
00:01:27.620 --> 00:01:30.950
So let's say that we are adding an asynchronous process.

19
00:01:31.280 --> 00:01:39.740
So inside this next what I can do, I can use an old statement here which will actually generate a new

20
00:01:39.740 --> 00:01:40.490
promise.

21
00:01:40.970 --> 00:01:47.460
And inside of this I will configure the promise with, let's say, some set timeout.

22
00:01:47.480 --> 00:01:52.520
That is, we are configuring a kind of asynchronous process which is going to take some time, let's

23
00:01:52.520 --> 00:02:00.800
say I'll say result after 1000 milliseconds now because I have added a promise here and a set timeout

24
00:02:00.800 --> 00:02:01.300
as well.

25
00:02:01.310 --> 00:02:06.950
That means it is going to take some time and then this data will be processed, which is the core concept

26
00:02:06.950 --> 00:02:09.020
of asynchronous processes.

27
00:02:09.919 --> 00:02:15.890
Now, because I have used it here, that means, as you already know, that we need to have an async

28
00:02:15.890 --> 00:02:16.340
wrapper.

29
00:02:16.550 --> 00:02:19.220
So the next thing I am going to write is async.

30
00:02:19.370 --> 00:02:20.000
Next.

31
00:02:20.950 --> 00:02:28.210
So now this process will actually increment the value, but after every second and in that case, we

32
00:02:28.210 --> 00:02:31.750
cannot use the form of the way we are using it right now.

33
00:02:32.020 --> 00:02:33.880
The next thing is this symbol.

34
00:02:33.880 --> 00:02:38.740
That iterator instead of iterator will have to use the async iterator.

35
00:02:38.740 --> 00:02:39.880
So here I'm going to say.

36
00:02:40.860 --> 00:02:42.960
Async iterator.

37
00:02:43.680 --> 00:02:46.740
Now, the next thing is that we have this loop.

38
00:02:47.460 --> 00:02:55.140
This loop will not work because this gets executed immediately and the counters are returned after every

39
00:02:55.140 --> 00:02:55.560
second.

40
00:02:56.610 --> 00:03:00.210
So in that case, we are going to use the form of aid.

41
00:03:01.430 --> 00:03:07.730
The moment you say, Ah, wait, as you know that we need to have an asynchronous wrapper, either I

42
00:03:07.730 --> 00:03:10.330
can create a function or I can use an iffy.

43
00:03:10.610 --> 00:03:11.900
So I'll go with iffy here.

44
00:03:12.830 --> 00:03:17.810
So that if you will go something like this and here I'll say async.

45
00:03:18.140 --> 00:03:21.560
I'll put an arrow function, but which will be having no name.

46
00:03:21.950 --> 00:03:25.760
And I will cut this far loop inside the asynchronous block.

47
00:03:26.510 --> 00:03:29.560
And also I'll just align the parentheses.

48
00:03:29.570 --> 00:03:32.240
So let's run the code and see what is the output.

49
00:03:32.600 --> 00:03:36.490
Now, as you can see that after every second the value is getting incremented.

50
00:03:36.830 --> 00:03:44.510
The object later, which is not a treble, we made it a treble and also we used this import async iterator

51
00:03:44.510 --> 00:03:45.500
to implement that.

52
00:03:45.830 --> 00:03:53.840
And of course with this we have used the for a white loop to loop through the async that is asynchronous

53
00:03:53.840 --> 00:04:01.760
iterator instead of this syntax with async next you can use simple next method and return a promise

54
00:04:01.760 --> 00:04:02.360
from it.

55
00:04:02.870 --> 00:04:09.590
This is also a valid way of making an asynchronous iterator in the generator function section.

56
00:04:09.590 --> 00:04:12.710
We tried to use asterisk and symbol, not iterator.

57
00:04:13.430 --> 00:04:20.779
That is, by making the function generator it was easier to execute the iterator when it comes to async

58
00:04:20.779 --> 00:04:25.220
iterator with generator function, you can do that as well.

59
00:04:26.030 --> 00:04:30.260
This was the code with generator function to iterate through the object.

60
00:04:30.260 --> 00:04:32.900
Literal software converting the code.

61
00:04:32.910 --> 00:04:34.460
It will be something like this.

62
00:04:35.670 --> 00:04:39.020
The function will be having asynchronous process, right?

63
00:04:39.150 --> 00:04:41.310
Because we are going to use our aid inside of that.

64
00:04:41.550 --> 00:04:45.990
Now, when we have this yield before that, again, I'm going to write the.

65
00:04:46.550 --> 00:04:46.890
Wait.

66
00:04:47.550 --> 00:04:51.390
Then the new promise will have the result.

67
00:04:51.930 --> 00:05:00.600
Let's set timeout and we'll call the result, which is a static matter after 1000 milliseconds.

68
00:05:01.080 --> 00:05:01.470
Right.

69
00:05:01.770 --> 00:05:05.180
And this iterator will be async iterator.

70
00:05:06.350 --> 00:05:09.320
The next thing is we'll have the iffy.

71
00:05:12.450 --> 00:05:13.110
Async.

72
00:05:16.830 --> 00:05:18.810
And this will have its own call.

73
00:05:19.150 --> 00:05:20.850
I'll write to parenthesis.

74
00:05:21.390 --> 00:05:27.030
And this far look will be shifted inside this Effie with the await statement.

75
00:05:28.380 --> 00:05:29.490
Let's run the code now.

76
00:05:29.760 --> 00:05:30.970
I'll say no.

77
00:05:31.770 --> 00:05:32.580
And the file name.

78
00:05:33.210 --> 00:05:38.310
So here again, it takes 1/2 and then it incrementally value the object.

79
00:05:38.310 --> 00:05:41.870
Little right now has stardust ten and as 15.

80
00:05:41.880 --> 00:05:44.520
So we have the data between ten and 15.

81
00:05:45.120 --> 00:05:51.030
So ideally, whenever you have a process of data where it's taking time, the asynchronous process you

82
00:05:51.030 --> 00:05:57.840
have and your object literally is converted into a treble object, then the generator function and it

83
00:05:57.840 --> 00:05:58.830
returns together.

84
00:05:58.860 --> 00:06:00.000
Make more sense.

85
00:06:00.600 --> 00:06:02.910
Let's discuss the related questions of this topic.

86
00:06:03.390 --> 00:06:06.780
The first question is what is similar async iterator.

87
00:06:07.230 --> 00:06:12.900
So similar async iterator is a way to implement iterator with asynchronous process.

88
00:06:13.230 --> 00:06:19.530
So here in this example, we have already seen that the object, which is not iterable, is converted

89
00:06:19.530 --> 00:06:20.970
into an iterable object.

90
00:06:21.060 --> 00:06:25.440
But the problem is that the data is retrieved in some interval.

91
00:06:25.470 --> 00:06:29.370
That's where this symbol dot async iterator comes very handy.

92
00:06:31.850 --> 00:06:36.470
The second question is can we use the spread operator with async iterator?

93
00:06:36.710 --> 00:06:38.180
For example, like this?

94
00:06:38.690 --> 00:06:39.890
Well, it is not possible.

95
00:06:40.220 --> 00:06:46.730
The reason is the spread operator is going to return, adding the adda is return when the values are

96
00:06:46.910 --> 00:06:53.840
retrieved, whereas in asynchronous process the data is retrieved in chunks, small chunks, and then

97
00:06:53.840 --> 00:06:54.500
it gathers.

98
00:06:54.950 --> 00:07:01.850
So using the spread operator the way we used to do it with the generator and iterate together, that

99
00:07:01.850 --> 00:07:04.400
is not possible with the async iterator.

100
00:07:06.760 --> 00:07:12.790
The third question is how will you handle the async iterator using generator function syntax?

101
00:07:12.940 --> 00:07:15.070
Well, this one is very easier.

102
00:07:15.460 --> 00:07:16.270
This is the core.

103
00:07:16.870 --> 00:07:18.070
We use the async.

104
00:07:18.310 --> 00:07:24.640
So when you say this asterisk and this symbol dot async iterator, you just have to use some promise

105
00:07:24.640 --> 00:07:30.100
to return and we have the yield which will return a value after this interval.

106
00:07:30.820 --> 00:07:35.920
So here is the syntax of implementing the generator function with asynchronous iterator.

