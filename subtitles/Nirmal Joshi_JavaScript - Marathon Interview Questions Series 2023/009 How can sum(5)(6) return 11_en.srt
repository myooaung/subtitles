1
00:00:00,060 --> 00:00:06,330
Now we are discussing this question where how can some five six return 11?

2
00:00:06,780 --> 00:00:08,940
Ideally, you see that five comma six.

3
00:00:08,940 --> 00:00:14,880
That is, we pass parameters in single set of parentheses, but here we have two different parentheses.

4
00:00:14,880 --> 00:00:18,690
So how can we have 11 in this kind of function call?

5
00:00:18,930 --> 00:00:24,900
The category of question is again JavaScript language, and there will be three related questions.

6
00:00:25,710 --> 00:00:26,130
All right.

7
00:00:26,130 --> 00:00:29,580
So this way is actually called as cutting.

8
00:00:29,760 --> 00:00:33,090
Cutting is supported by many programming languages.

9
00:00:33,450 --> 00:00:40,680
It's a unique way to call inner functions, where you can pass arguments partially or pass multiple

10
00:00:40,680 --> 00:00:44,730
arguments in a function, but one argument at a time.

11
00:00:44,910 --> 00:00:51,030
Now, this statement, which I mentioned, might be confusing, but you will be clear with this in just

12
00:00:51,030 --> 00:00:51,510
a moment.

13
00:00:51,900 --> 00:00:58,980
For example, when we see some five, comma, six, if this returns 11, it is logical.

14
00:00:59,160 --> 00:01:03,180
But how about some you have five and six.

15
00:01:03,480 --> 00:01:04,650
This returns 11.

16
00:01:05,129 --> 00:01:11,880
It means that here we have two arguments, but here we have one argument at a time.

17
00:01:12,990 --> 00:01:17,680
We will begin with exploring the carrying syntax and the basic steps.

18
00:01:18,270 --> 00:01:24,750
Make sure you have gone through arrow function and closure related sections before you proceed further

19
00:01:24,750 --> 00:01:26,040
with this explanation.

20
00:01:26,580 --> 00:01:32,190
I'm going to create a code where I implement the same thing, which I mentioned in the question.

21
00:01:32,400 --> 00:01:34,320
We are going to write function.

22
00:01:34,980 --> 00:01:37,920
Then we will see what is the practical use of cutting?

23
00:01:38,340 --> 00:01:40,810
Here I am writing a function called sum.

24
00:01:40,830 --> 00:01:51,390
Now the function has one parameter pass to it and that is an inner function which takes the second argument.

25
00:01:51,450 --> 00:01:53,580
That is one argument only as such.

26
00:01:54,390 --> 00:01:59,130
But at the end of this function, that is the inner function, it returns A-plus.

27
00:01:59,130 --> 00:02:05,220
B Now almost the same pattern we have already seen while discussing closure in a question.

28
00:02:05,550 --> 00:02:11,420
So here, if I just write, let's say closure only at the moment where I'll say sum.

29
00:02:11,700 --> 00:02:16,770
Now if I pass five here, it means in the first function that is this function.

30
00:02:17,070 --> 00:02:19,530
This file is pass to E.

31
00:02:20,130 --> 00:02:26,250
The next thing is because now this seal has a reference of this function that is inner function.

32
00:02:26,250 --> 00:02:32,760
Because when we call the sum function five is passed to E, and then this function also returns another

33
00:02:32,760 --> 00:02:35,190
function so that is assigned to seal.

34
00:02:35,430 --> 00:02:39,510
Now if I say c l, that means I am going to call this second function.

35
00:02:40,050 --> 00:02:44,790
So I will say c l I'll create a variable.

36
00:02:44,790 --> 00:02:48,750
Constant answer is equal to c l.

37
00:02:48,960 --> 00:02:52,680
Now that inner function is also taking one parameter.

38
00:02:52,770 --> 00:02:57,390
So let's say I passed six here when I write these two lines.

39
00:02:58,020 --> 00:03:04,320
It means that this function is this one that is we are calling this function.

40
00:03:04,470 --> 00:03:09,420
And when you are calling line number seven, you are actually calling this function.

41
00:03:09,450 --> 00:03:14,880
This means six is passed to B and then it should return A plus B.

42
00:03:15,000 --> 00:03:19,950
So the answer five plus six is assigned to this end as variable.

43
00:03:19,950 --> 00:03:20,700
That is answer.

44
00:03:21,300 --> 00:03:24,690
Let's try to display and see what is the output.

45
00:03:25,950 --> 00:03:26,970
I'll save this.

46
00:03:29,160 --> 00:03:32,490
And the me scurried out just so I run it here.

47
00:03:33,150 --> 00:03:36,870
Now you see that we have 11 as output.

48
00:03:37,380 --> 00:03:44,040
This means the first function that is the pattern function is called and it has returned the inner function

49
00:03:44,040 --> 00:03:49,360
and that is stored in the lexical environment in JavaScript.

50
00:03:49,380 --> 00:03:55,980
And then we are calling it now the same thing we can write with some change in the syntax, and that's

51
00:03:55,980 --> 00:03:58,800
where coding actually shows its own strength.

52
00:03:59,220 --> 00:04:04,400
What we can do is we can call this inner function like this only.

53
00:04:04,410 --> 00:04:10,860
So instead of writing some file, I can add another parentheses and I can say six here.

54
00:04:11,580 --> 00:04:18,209
Now, this also means that I am calling the pattern function and I am calling the child function.

55
00:04:18,209 --> 00:04:22,470
So pattern function is called and that returns this function also, right?

56
00:04:22,950 --> 00:04:26,700
This inner function that is stored in the lexical environment.

57
00:04:26,700 --> 00:04:31,560
And then eventually all these statements which we see here are called one by one.

58
00:04:31,800 --> 00:04:38,460
So ideally, if you write like this, let's say I'll remove this line now instead of C, a better right

59
00:04:38,460 --> 00:04:41,010
answer here saving it.

60
00:04:41,520 --> 00:04:44,250
Let's check the output once again and see what happens.

61
00:04:44,880 --> 00:04:47,160
It still says the output is 11.

62
00:04:47,610 --> 00:04:51,630
The reason is this some is calling the pattern function.

63
00:04:51,630 --> 00:04:57,370
And the second parentheses, which we have given here, actually calls the inner function.

64
00:04:57,390 --> 00:04:59,010
This is the carrying pattern.

65
00:04:59,820 --> 00:05:01,970
We will go to the advantage of carrying.

66
00:05:01,980 --> 00:05:08,050
But before that, the syntax which I have used right now is a kind of s five syntax.

67
00:05:08,070 --> 00:05:13,650
Of course I have use const that is off e6, but this function is of this weekend.

68
00:05:13,650 --> 00:05:14,130
Right.

69
00:05:14,280 --> 00:05:15,300
Arrow functions.

70
00:05:15,510 --> 00:05:18,450
So let me convert this same code into arrow function.

71
00:05:18,750 --> 00:05:23,350
As you all know that we do not need the function keyword and we put an arrow here.

72
00:05:23,580 --> 00:05:25,500
So let's first of all do that.

73
00:05:26,010 --> 00:05:29,820
We do not need the function keyword and I'll put an arrow here.

74
00:05:30,330 --> 00:05:34,380
I'll save this and check whether this thing is working fine or not.

75
00:05:34,680 --> 00:05:35,850
Yes, it does work.

76
00:05:36,480 --> 00:05:44,460
Now, we also discussed in arrow function question that we can avoid these brackets if we have a single

77
00:05:44,460 --> 00:05:44,880
line.

78
00:05:45,060 --> 00:05:48,080
So for the output function, this is just a single line.

79
00:05:48,090 --> 00:05:50,950
And for the inner function, this is the single line.

80
00:05:50,970 --> 00:05:53,460
So we don't need to write the return statement.

81
00:05:53,670 --> 00:05:54,750
What if I do that?

82
00:05:54,750 --> 00:05:58,260
See this now and remove this bracket and remove the return?

83
00:05:58,260 --> 00:06:00,420
Also, the first function is set.

84
00:06:01,140 --> 00:06:02,850
Now let's go to the inner function.

85
00:06:02,940 --> 00:06:04,650
We don't need the return statement.

86
00:06:04,650 --> 00:06:06,240
Also, that's it.

87
00:06:06,750 --> 00:06:10,650
We can also avoid these parents as we have just one parameter.

88
00:06:11,010 --> 00:06:13,860
So I can write just A and B.

89
00:06:16,220 --> 00:06:17,240
I'll save this.

90
00:06:17,870 --> 00:06:18,710
I run it here.

91
00:06:19,310 --> 00:06:20,300
Amazing, isn't it?

92
00:06:20,990 --> 00:06:23,450
Now we just have a single line.

93
00:06:23,630 --> 00:06:28,550
So looking at this line, if you have no exposure with inner functions are carrying.

94
00:06:28,670 --> 00:06:31,430
This is very confusing that you have two arrows here.

95
00:06:31,670 --> 00:06:32,030
Right.

96
00:06:32,060 --> 00:06:33,050
What does this mean?

97
00:06:33,300 --> 00:06:37,030
See, when you have two arrows, that means you have one inner function.

98
00:06:37,040 --> 00:06:38,330
One is the pattern function.

99
00:06:38,510 --> 00:06:42,530
Every arrow after the first arrow is the inner function.

100
00:06:42,710 --> 00:06:44,200
Imagine that you have three arrows.

101
00:06:44,210 --> 00:06:46,010
That means you have two inner function.

102
00:06:46,010 --> 00:06:48,080
That is parent, child and grandchild.

103
00:06:48,350 --> 00:06:50,270
That kind of pattern you will have.

104
00:06:51,170 --> 00:06:54,800
This is just about the syntax, but cutting is implemented here.

105
00:06:55,340 --> 00:06:59,030
But the question is, what is the practical use of it?

106
00:06:59,630 --> 00:07:07,700
For that, I'm going to create a piece of code where we are calculating product price and discount calculation.

107
00:07:08,150 --> 00:07:14,030
First of all, let's say I create a function called price calculation.

108
00:07:14,600 --> 00:07:17,660
Now, this function takes price as a parameter.

109
00:07:18,080 --> 00:07:22,100
And inside of this I'm defining discount percentage.

110
00:07:22,130 --> 00:07:24,210
Now I'll explain what exactly I'm doing.

111
00:07:24,230 --> 00:07:32,750
Once you see the output and here, what I'm going to do is I'm going to return the calculated discount.

112
00:07:32,930 --> 00:07:35,480
That is the discount amount return.

113
00:07:36,200 --> 00:07:44,000
If I just give you one example, let's say discount amount calculation I want every time I pass price,

114
00:07:44,000 --> 00:07:48,590
let's say I have a function which is going to get the product price from some API.

115
00:07:48,980 --> 00:07:55,190
And that price, once I have received here that I want to pass in discount amount.

116
00:07:55,430 --> 00:08:00,140
But first case I want to pass, let's say 3% discount.

117
00:08:00,560 --> 00:08:04,710
In second case, I want to pass 5% discount.

118
00:08:05,270 --> 00:08:11,360
So there are various percentage you are going to pass, but this price remains same.

119
00:08:11,690 --> 00:08:18,320
Now I'm giving one example where we have just single value, but there can be multiple parameters you

120
00:08:18,320 --> 00:08:20,990
want to pass with only one different value.

121
00:08:21,560 --> 00:08:23,540
This is where currying can be useful.

122
00:08:23,810 --> 00:08:24,790
Let me show you that.

123
00:08:24,800 --> 00:08:27,710
Let's say we have this discount amount as a function.

124
00:08:28,070 --> 00:08:31,040
I'm not having any get price function at the moment.

125
00:08:31,610 --> 00:08:34,429
So we assume that there is a fixed price called 300.

126
00:08:34,970 --> 00:08:40,130
So I'll say cons to discount amount is equal to the price calculation.

127
00:08:40,130 --> 00:08:44,420
I'm going to call that I'm passing just one value that is 300.

128
00:08:46,620 --> 00:08:47,370
Now this trio.

129
00:08:47,640 --> 00:08:53,430
Imagine that we received my get price that is calling some API and we are getting this data.

130
00:08:53,820 --> 00:09:00,690
So discount amount becomes a function which is going to return various discount amount depending on

131
00:09:00,720 --> 00:09:01,550
the percentage.

132
00:09:01,590 --> 00:09:03,860
But the price will remain 300 only.

133
00:09:03,870 --> 00:09:05,820
Let's try this in console.log.

134
00:09:05,820 --> 00:09:06,990
I'll save discount amount.

135
00:09:07,140 --> 00:09:07,830
See this now?

136
00:09:07,950 --> 00:09:14,730
I'm not passing any price now price is already given only once in the beginning this is carrying.

137
00:09:15,660 --> 00:09:21,540
I mentioned earlier that you are calling the function partially this is what it is.

138
00:09:21,720 --> 00:09:25,920
So we say discount amount which is going to return the discount amount.

139
00:09:25,920 --> 00:09:28,500
You can take it in some other variable and process it.

140
00:09:28,740 --> 00:09:33,600
But at the moment I just want to say 0.5, that is 50%, five or 50, whatever.

141
00:09:33,720 --> 00:09:34,980
I want to have 50%.

142
00:09:35,160 --> 00:09:36,420
So that's 50%.

143
00:09:36,660 --> 00:09:39,960
Now again, I put another discount amount.

144
00:09:40,260 --> 00:09:45,570
When I just say 30%, again, I say I want to have 20%.

145
00:09:45,600 --> 00:09:52,110
So now every time you call this discount amount, you are going to get percentage depending on the price

146
00:09:52,110 --> 00:09:53,550
which you earlier called.

147
00:09:54,270 --> 00:09:56,190
So the same thing is getting called here.

148
00:09:56,190 --> 00:09:56,850
That is price.

149
00:09:56,850 --> 00:10:02,460
Kelsey is called here, but every time you call discount amount, you're going to get the discount amount

150
00:10:02,460 --> 00:10:03,810
depending on this price.

151
00:10:04,200 --> 00:10:06,210
Let's save this and run the code.

152
00:10:07,710 --> 00:10:12,540
As you can see now that every time this is called, we have different values.

153
00:10:12,870 --> 00:10:15,080
So this is where cutting can be used.

154
00:10:15,240 --> 00:10:17,010
This is one simple situation.

155
00:10:17,250 --> 00:10:19,560
There can be multiple parameters you have.

156
00:10:19,710 --> 00:10:20,910
We just have price here.

157
00:10:21,360 --> 00:10:26,220
There can be multiple parameters and only one parameter is changing.

158
00:10:26,400 --> 00:10:32,570
So what you do is you just pass those parameters here once, which will return the inner function and

159
00:10:32,590 --> 00:10:37,200
rest of the partial execution is done by the return function.

160
00:10:37,470 --> 00:10:39,720
This is the advantage of cutting.

161
00:10:40,140 --> 00:10:43,140
Now let's discuss the latest questions of this topic.

162
00:10:43,620 --> 00:10:45,960
The first question is what is function carrying?

163
00:10:46,530 --> 00:10:49,260
So carrying is basically calling it partially.

164
00:10:49,410 --> 00:10:55,380
We have the inner function returning the function where we use this, some function like this, or we

165
00:10:55,380 --> 00:11:02,140
can have some advantage of using it in this way about we just call the main function once and then the

166
00:11:02,150 --> 00:11:05,220
rest of the functions are called again with different values.

167
00:11:07,460 --> 00:11:11,120
The second question is what will this statement do?

168
00:11:11,330 --> 00:11:12,560
Explain in detail.

169
00:11:13,130 --> 00:11:18,980
So this when you see this statement, it means you have one main function, then inner function, and

170
00:11:18,980 --> 00:11:23,420
inside that you have one more inner function like this, and that has a written statement.

171
00:11:23,430 --> 00:11:26,570
So in a way this is function carrying only, right?

172
00:11:26,750 --> 00:11:32,360
But with one more inner function then we saw earlier and it is going to return the multiplication of

173
00:11:32,360 --> 00:11:33,830
whatever value you pass.

174
00:11:36,240 --> 00:11:40,170
The third question is explain practical usage of function carrying.

175
00:11:40,680 --> 00:11:47,400
Well, carrying is an incredibly useful technique of functional programming which solves various purposes

176
00:11:47,400 --> 00:11:52,470
like parsing partial parameters or avoid unwanted reputations.

177
00:11:52,470 --> 00:11:56,460
Like we tried with product price, where price was passed only once.

178
00:11:56,640 --> 00:11:59,220
So it is very useful in such cases.

