WEBVTT
1
00:00:05.780 --> 00:00:09.720
In this exercise, we will implement email validation.

2
00:00:09.740 --> 00:00:16.910
There are many types of email IDs and we will create a pattern which can validate almost all types of

3
00:00:16.910 --> 00:00:18.090
email IDs.

4
00:00:18.110 --> 00:00:20.780
So let's start the email validation.

5
00:00:21.260 --> 00:00:25.940
The validation parameters we are considering are listed as below.

6
00:00:26.120 --> 00:00:30.300
The email value can be divided into two major parts.

7
00:00:30.320 --> 00:00:33.950
First is the user name, which is before the ADD sign.

8
00:00:34.200 --> 00:00:38.520
And second is the domain name, which is after the ID sign.

9
00:00:38.540 --> 00:00:45.800
So to understand in an easier way, we will discuss and understand these two parts separately and eventually

10
00:00:45.800 --> 00:00:47.430
we will merge the pattern.

11
00:00:47.450 --> 00:00:51.410
Let's discuss the user name part, which is before the ADD sign.

12
00:00:52.440 --> 00:00:59.730
So the first thing is that the user name will start with a word character that is a carat inside the

13
00:00:59.730 --> 00:01:00.540
square bracket.

14
00:01:00.540 --> 00:01:08.580
I can say uppercase A to Z, lowercase A to Z, 0 to 9 and underscore a dot or a dash.

15
00:01:08.790 --> 00:01:12.210
These are the valid characters in an email username.

16
00:01:12.660 --> 00:01:17.340
The same we can achieve using a carrot sign that is for the beginning.

17
00:01:17.610 --> 00:01:24.180
W Plus, when you say slash w plus it will consider underscores as well.

18
00:01:24.690 --> 00:01:34.800
So now for A to Z and 0 to 9, we will simply use slash W plus and we will add a dot because dot is

19
00:01:34.800 --> 00:01:35.850
a special character.

20
00:01:35.850 --> 00:01:39.540
We are going to say slash, dot and a dash.

21
00:01:40.590 --> 00:01:45.240
The second point is that width w plus dot and dash.

22
00:01:45.240 --> 00:01:52.050
We will add a question mark as we need that there can be zero or one dash or dot.

23
00:01:52.350 --> 00:02:02.040
So now the pattern is carat w plus inside the square brackets we have dot and dash and we put a question

24
00:02:02.040 --> 00:02:06.930
mark just to make sure that we have at least zero or one occurrence.

25
00:02:06.930 --> 00:02:13.470
That means there can be one occurrence or there may not be any dot or dash inside the user name.

26
00:02:14.130 --> 00:02:20.850
The next thing is that even after a dash or a dot, there can be word characters.

27
00:02:20.850 --> 00:02:24.810
So we will add one more slash W plus.

28
00:02:24.840 --> 00:02:28.290
Now, in this case, the pattern will look like this.

29
00:02:29.670 --> 00:02:36.390
Here in this point, we have one modification in the existing pattern that is a possibility that there

30
00:02:36.390 --> 00:02:40.560
may not be a dot or a dash in the username section.

31
00:02:40.560 --> 00:02:46.230
And then in that case, we will not have word characters after it.

32
00:02:46.500 --> 00:02:54.630
So the dot dash question mark and W plus pattern may be zero times or more.

33
00:02:54.720 --> 00:03:01.560
And to satisfy zero or more times we have an asterisk quantifier.

34
00:03:01.800 --> 00:03:07.770
So now we will make a group of this and we'll add an asterisk.

35
00:03:08.070 --> 00:03:13.320
Now the pattern looks like this, so we are done with the username section.

36
00:03:13.560 --> 00:03:18.930
The next thing we need to add is an edge sign to the pattern.

37
00:03:19.660 --> 00:03:21.910
Now we can discuss the part two.

38
00:03:21.910 --> 00:03:26.320
That is the domain name, which appears after the sign.

39
00:03:26.860 --> 00:03:33.460
The first validation after an ad sign is the same as we have discussed with username.

40
00:03:33.460 --> 00:03:41.710
That is, it may have word character before or after a dash or a dot, so we can add it as it is.

41
00:03:41.740 --> 00:03:46.780
Only the carrot will not be included as it is not about the beginning.

42
00:03:46.780 --> 00:03:49.240
So now the pattern looks like this.

43
00:03:49.630 --> 00:03:54.070
Next validation is that that has to be at least one dot.

44
00:03:54.070 --> 00:03:59.290
And also there can be two or four character words after the dot.

45
00:03:59.290 --> 00:04:07.180
For example, dot C0 is two characters, dot com is three characters and dot info is four characters.

46
00:04:07.390 --> 00:04:15.610
So for that we will use slash, dot will add a W inside the curly brackets will say 2 to 4 characters

47
00:04:15.610 --> 00:04:22.420
we may have and then I will add a plus sign just to show that there can be one or more occurrence of

48
00:04:22.420 --> 00:04:27.790
this pattern and a dollar sign at the end for closing the word boundary.

49
00:04:27.790 --> 00:04:30.670
That is a dollar after the plus sign.

50
00:04:31.000 --> 00:04:33.370
So now the pattern looks like this.

51
00:04:33.370 --> 00:04:41.770
To validate the email, let's try to apply this pattern on an email called ABCD 108 at gmail.com.

52
00:04:41.920 --> 00:04:44.800
I will declare a string, assign the value.

53
00:04:45.190 --> 00:04:51.910
Of course I'm going to add the pattern here and we'll use a test method to check whether it returns

54
00:04:51.910 --> 00:04:52.990
true or false.

55
00:04:53.350 --> 00:04:58.750
Let's run the code so it has validated this email as a valid email.

56
00:04:59.020 --> 00:05:02.230
Now let's remove the edge sign and test it.

57
00:05:06.040 --> 00:05:10.930
Now the output is false, so the pattern is checking each sign properly.

58
00:05:11.140 --> 00:05:14.410
Next, we can remove the dot and run the test.

59
00:05:14.440 --> 00:05:19.870
I'll add the edge sign again and we'll remove dot from gmail.com.

60
00:05:22.730 --> 00:05:28.460
It still says false as the dot is missing and making the domain name invalid.

61
00:05:29.390 --> 00:05:33.590
Now let's add dot com dot info and check the case.

62
00:05:33.800 --> 00:05:39.020
So I will first of all add gmail.com dot info and run the code.

63
00:05:41.340 --> 00:05:44.070
So it has successfully done the test.

64
00:05:45.150 --> 00:05:49.230
The next test will try is with a dot in user name.

65
00:05:49.230 --> 00:05:52.860
Let's add a dot after a BCD and run the code.

66
00:05:55.860 --> 00:05:59.730
This also is considered as a valid email ID.

67
00:06:00.060 --> 00:06:06.340
In the beginning I mentioned that you will be able to validate almost all email IDs.

68
00:06:06.360 --> 00:06:08.460
Why am I saying almost?

69
00:06:08.820 --> 00:06:15.030
Because in early days we had domains with single dot, for example, domain dot com.

70
00:06:15.060 --> 00:06:17.830
Now we also have two dots as well.

71
00:06:17.850 --> 00:06:21.000
For example, domain .0. UK.

72
00:06:21.030 --> 00:06:26.370
We also had only three letters after dot that is for example dot com.

73
00:06:26.370 --> 00:06:30.310
But now we have two letters like dot in R four.

74
00:06:30.330 --> 00:06:31.590
Like dot info.

75
00:06:31.620 --> 00:06:38.460
There were a few characters not allowed in early days of emailing, but now they are allowed in user

76
00:06:38.460 --> 00:06:42.000
name, so the rules may change as the time goes.

77
00:06:42.000 --> 00:06:48.360
But if you have understood the concept we have discussed, I'm sure you will handle any email ID validation

78
00:06:48.360 --> 00:06:50.850
depending on case to case.

