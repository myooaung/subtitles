WEBVTT
1
00:00:00.090 --> 00:00:06.180
In this section, I'm discussing few questions and topics related to memory management and the garbage

2
00:00:06.180 --> 00:00:06.720
collection.

3
00:00:07.230 --> 00:00:12.540
This topic is of JavaScript language, and I'm going to raise three questions with this topic.

4
00:00:13.080 --> 00:00:16.260
What is the concept of GC or garbage collection?

5
00:00:16.500 --> 00:00:24.360
Is the first thing I'm going to discuss when you declare a variable object added or function, all are

6
00:00:24.360 --> 00:00:26.220
stored somewhere in the memory.

7
00:00:26.700 --> 00:00:28.980
Assume that you have an object.

8
00:00:28.980 --> 00:00:35.880
A When your program starts, a location is created and data stored in this location.

9
00:00:36.510 --> 00:00:43.050
There are multiple locations, in fact, to hold huge values, but we are making one box as a location

10
00:00:43.050 --> 00:00:44.730
to simplify the presentation.

11
00:00:45.060 --> 00:00:45.570
All right.

12
00:00:45.690 --> 00:00:50.700
So this object is which has some data and stored in the location.

13
00:00:51.000 --> 00:00:54.600
In between there might be some read write operations.

14
00:00:54.720 --> 00:00:57.390
And what happens when the program ends?

15
00:00:57.660 --> 00:01:00.540
Once the program ends, the party is over.

16
00:01:00.690 --> 00:01:05.850
Now this location needs to be cleaned as it is of no use.

17
00:01:06.150 --> 00:01:10.260
So when the program ends, this is the garbage which needs to be cleared.

18
00:01:10.560 --> 00:01:15.990
Normal memory management or memory lifecycle can be thought of like this.

19
00:01:16.380 --> 00:01:23.370
You have led to an object, a variable or a function that is an allocation of memory happens first,

20
00:01:23.640 --> 00:01:26.280
then there might be some rewrite process.

21
00:01:26.580 --> 00:01:28.020
This is a continuous process.

22
00:01:28.020 --> 00:01:35.310
In fact, till the program ends and when the program ends free, these locations are releasing the memory.

23
00:01:35.550 --> 00:01:42.270
In some programming languages, you can call routines to clear this garbage and some languages manage

24
00:01:42.270 --> 00:01:43.440
it automatically.

25
00:01:43.650 --> 00:01:50.640
But in short, clearing these free locations is the process of collecting the garbage or garbage collection,

26
00:01:50.640 --> 00:01:53.340
or even sometimes referred as GC.

27
00:01:53.610 --> 00:01:57.090
So I guess now you know, what is garbage collection?

28
00:01:57.330 --> 00:02:01.710
And this explanation is general and applied to all programming languages.

29
00:02:01.980 --> 00:02:05.070
Now let's talk about how this thing happens in JavaScript.

30
00:02:05.520 --> 00:02:10.199
JavaScript is a high level language, so you do not need to allocate memory.

31
00:02:10.410 --> 00:02:17.100
Memory allocation and releasing happens automatically, making the memory free in the process of garbage

32
00:02:17.100 --> 00:02:17.730
collection.

33
00:02:17.850 --> 00:02:21.990
And there is a routine who does it called the garbage collector.

34
00:02:22.380 --> 00:02:29.430
And this GC process is also called Automatic Memory Management, with reference to JavaScript.

35
00:02:30.030 --> 00:02:36.990
The garbage collection considers references and it tries to release the memory if a location is not

36
00:02:36.990 --> 00:02:37.710
reachable.

37
00:02:38.250 --> 00:02:42.330
Let's try to understand what is this reachability in JavaScript?

38
00:02:42.660 --> 00:02:43.920
Let's take an example.

39
00:02:44.310 --> 00:02:45.210
You have an object.

40
00:02:45.210 --> 00:02:49.200
I select object is equal to that is a property I'm creating.

41
00:02:49.200 --> 00:02:50.790
I'll say name is equal to orange.

42
00:02:51.150 --> 00:02:55.890
Now what I will do, I will say let object is equal to null.

43
00:02:56.250 --> 00:02:59.190
Now, if I directly say null, then what happens?

44
00:02:59.460 --> 00:03:06.120
Object has a reference to name that is this orange and that reference is canceled now because object

45
00:03:06.120 --> 00:03:06.750
is null.

46
00:03:07.170 --> 00:03:11.010
So this name, this orange doesn't have any reference.

47
00:03:11.250 --> 00:03:13.890
So this is something which needs to be cleared.

48
00:03:14.130 --> 00:03:17.970
So this area which doesn't have any reference, nothing can exist.

49
00:03:17.970 --> 00:03:20.640
This value is actually unreachable.

50
00:03:20.670 --> 00:03:23.700
Or you can see that this location is not reachable.

51
00:03:23.760 --> 00:03:25.500
Let's expand this code.

52
00:03:25.740 --> 00:03:28.340
I say light object is equal to a value.

53
00:03:28.350 --> 00:03:29.910
Let's a name orange again.

54
00:03:30.240 --> 00:03:33.390
Then I will say light object one is equal to object.

55
00:03:33.690 --> 00:03:37.470
Now here I am assigning object one with the object.

56
00:03:37.800 --> 00:03:40.040
So here the reference will be passed.

57
00:03:40.050 --> 00:03:41.580
It will look something like this.

58
00:03:41.850 --> 00:03:43.020
This is the object.

59
00:03:43.020 --> 00:03:44.700
And here is the object one.

60
00:03:45.030 --> 00:03:48.480
The name Orange is shared by both the objects.

61
00:03:48.930 --> 00:03:53.940
Now, in case if I say object is equal to null, then this will be removed.

62
00:03:53.940 --> 00:03:59.150
This reference will be removed in case if we do the same thing with object one.

63
00:03:59.160 --> 00:04:03.270
If I say object one is equal to null, then this reference will also be removed.

64
00:04:03.270 --> 00:04:06.090
Then again, this name is unreachable.

65
00:04:07.590 --> 00:04:10.890
That is an algorithm called Mach and sweep.

66
00:04:11.160 --> 00:04:18.570
The logic is that the algorithm starts from the root object and checks for the reference is linked in

67
00:04:18.570 --> 00:04:18.899
case.

68
00:04:18.899 --> 00:04:24.780
If this algorithm finds unreachable locations, then those are the locations to be removed.

69
00:04:25.200 --> 00:04:27.120
It appears something like this.

70
00:04:27.510 --> 00:04:30.000
So what this mark and sweep logic will do?

71
00:04:30.010 --> 00:04:33.890
It will start searching which values have references?

72
00:04:33.900 --> 00:04:36.150
For example, it begins with global.

73
00:04:36.270 --> 00:04:37.860
Now let's say this has a reference.

74
00:04:37.870 --> 00:04:39.520
This value also has a reference.

75
00:04:39.540 --> 00:04:40.500
This has a reference.

76
00:04:40.740 --> 00:04:44.250
Further, there might be more references to other values as well.

77
00:04:44.260 --> 00:04:51.510
But in case I assume that these three do not have any link, that means some object now is set to null

78
00:04:51.540 --> 00:04:52.560
or some other way.

79
00:04:52.590 --> 00:04:54.900
These values have become unreachable.

80
00:04:55.230 --> 00:04:57.210
Then what Mark and Sweep will do?

81
00:04:57.210 --> 00:05:00.390
Mark will mark all the referenced items.

82
00:05:00.390 --> 00:05:06.450
But things which are unreachable, things which are not having any link to reference will be not marked.

83
00:05:06.450 --> 00:05:09.450
And then the mark and sweep algorithm runs.

84
00:05:09.450 --> 00:05:13.050
It will look for unmarked locations and it will clean it.

85
00:05:13.080 --> 00:05:15.120
That's how the garbage collection happens.

86
00:05:15.600 --> 00:05:22.950
All the modern browsers use mark and sweep algorithm in older browsers in case of circular reference.

87
00:05:23.040 --> 00:05:25.320
That was a situation of memory.

88
00:05:25.320 --> 00:05:29.070
Leaks assumed a situation where I have an object.

89
00:05:29.340 --> 00:05:34.950
I'll say let teacher is equal to new teacher, which is assumed that it's a class and we have student

90
00:05:34.950 --> 00:05:38.490
where I create another object called student and I just say New student.

91
00:05:38.760 --> 00:05:44.880
Now it might happen that teacher or student is equal to student and student or teacher that equals to

92
00:05:44.880 --> 00:05:45.330
teacher.

93
00:05:45.510 --> 00:05:50.550
So now here what happens is that the properties are with a circular reference.

94
00:05:51.030 --> 00:05:53.010
In this kind of situation.

95
00:05:53.220 --> 00:05:58.320
Older browsers used to leave the memory in case only one of the object is set to null.

96
00:05:58.470 --> 00:05:59.820
But now that's not the case.

97
00:05:59.820 --> 00:06:03.750
The newer browsers are competent enough to handle these situations as well.

98
00:06:04.410 --> 00:06:10.980
So to summarize, the concept of memory management and garbage collection in JavaScript, memory allocation

99
00:06:10.980 --> 00:06:12.630
is done automatically.

100
00:06:12.720 --> 00:06:17.880
As long as references exist, there will not be any cleaning or collecting the garbage.

101
00:06:18.090 --> 00:06:24.330
If a location is unreachable, then that will be collected as a garbage or that memory will be released.

102
00:06:24.870 --> 00:06:27.300
Let's discuss related questions of this topic.

103
00:06:29.760 --> 00:06:33.210
First question how does GC work in JavaScript so well?

104
00:06:33.210 --> 00:06:38.430
As long as JavaScript is concerned, whether it is in your environment or even in browser, right?

105
00:06:38.430 --> 00:06:45.330
That is always a process because like browser also has like Chrome has V8 and the same V8 is working

106
00:06:45.330 --> 00:06:46.020
with Node.

107
00:06:46.170 --> 00:06:50.670
So the logic remains same mark and sweep process goes the same way.

108
00:06:50.670 --> 00:06:56.640
The only thing is whichever global object is there from that global object, the mark and sweep process

109
00:06:56.640 --> 00:06:57.240
starts.

110
00:06:57.480 --> 00:07:01.560
It marks the values which are referenced and unreachable values.

111
00:07:01.560 --> 00:07:06.600
Unreachable locations are cleared by a process called garbage collector.

112
00:07:09.010 --> 00:07:12.910
Second question, explain mark and sweep algorithm's pattern.

113
00:07:13.240 --> 00:07:19.090
So as I just mentioned, Mark and sweep is something which begins with the root element and then it

114
00:07:19.090 --> 00:07:23.350
starts marking the reference to values and things which are not mugged.

115
00:07:23.620 --> 00:07:26.950
Those will be cleared by this mark and sweep algorithm.

116
00:07:29.220 --> 00:07:33.390
The third question is which situation can create a memory leak?

117
00:07:33.570 --> 00:07:38.940
So this is a situation where we have circular reference and one of the object is set to null, then

118
00:07:38.940 --> 00:07:40.260
the reference is lost.

119
00:07:40.500 --> 00:07:44.520
In this case, it doesn't have idea whether it is to be cleaned or not.

120
00:07:44.850 --> 00:07:49.470
This is the kind of situation where you can say that the memory leak happens, but it doesn't happen

121
00:07:49.470 --> 00:07:50.580
with newer browsers.

122
00:07:50.850 --> 00:07:52.620
So you do not have to worry anyway.

123
00:07:52.630 --> 00:07:57.990
JavaScript is a higher level language, so you do not need to do anything for garbage collection.

124
00:07:57.990 --> 00:08:00.870
But yes, you should know what garbage collection is.

