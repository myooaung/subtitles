1
00:00:01,540 --> 00:00:08,109
In this section we are going to discuss about the next modifier or flag and that is slash you.

2
00:00:10,020 --> 00:00:13,310
This modifier is used with Unicode values.

3
00:00:13,320 --> 00:00:19,890
So before we start discussing about this modifier, let's get clear with the Unicode concept.

4
00:00:20,750 --> 00:00:22,880
Why do we need Unicode?

5
00:00:23,690 --> 00:00:27,110
Imagine character a pressed on keyboard.

6
00:00:27,530 --> 00:00:31,250
Does it really say a directly to the computer?

7
00:00:31,280 --> 00:00:33,050
The answer is no.

8
00:00:33,770 --> 00:00:36,410
Let's look at some illustrations.

9
00:00:37,130 --> 00:00:40,370
Character A is stored in binary format.

10
00:00:40,700 --> 00:00:45,860
So actually the value of A is this binary value internally.

11
00:00:46,220 --> 00:00:50,090
Now the bigger question is how this binary value is derived.

12
00:00:51,020 --> 00:00:57,590
So we have Unicode table where each character is given a unique hexadecimal number.

13
00:00:58,100 --> 00:01:06,560
Double zero for one is the number of a in Unicode character table and the binary of double zero for

14
00:01:06,560 --> 00:01:09,290
one is this binary value.

15
00:01:10,540 --> 00:01:11,980
Before Unicode.

16
00:01:12,010 --> 00:01:17,410
There were many characters and coatings, but they were conflicting with one another.

17
00:01:17,890 --> 00:01:25,630
By accepting a standard or universal character encoding, it has become easy to manage various languages

18
00:01:25,630 --> 00:01:27,880
across various platforms.

19
00:01:28,570 --> 00:01:39,700
Unicode encoding covers letters of various languages, currency symbols, emojis, and much more.

20
00:01:40,700 --> 00:01:46,910
This means in the Unicode table that is a hex number given to each character.

21
00:01:47,420 --> 00:01:49,610
Let's check Capital A.

22
00:01:53,160 --> 00:01:55,860
And also check small a.

23
00:01:56,910 --> 00:01:59,460
Let's also try currency symbol.

24
00:01:59,790 --> 00:02:00,900
For example.

25
00:02:00,900 --> 00:02:08,940
If I select currency symbol from this list, it will show me all the symbols and also showing the range

26
00:02:08,940 --> 00:02:11,910
below the dropdown of category.

27
00:02:12,390 --> 00:02:19,440
In short, a letter in a language is a symbolic or pictorial presentation anyway, so there are many

28
00:02:19,440 --> 00:02:27,030
characters or symbols you see, like the one you see in the figure saying letting capital letter A.

29
00:02:27,820 --> 00:02:34,700
Other languages, currency symbols and various emojis like smileys or other emojis.

30
00:02:34,720 --> 00:02:40,660
You can also check Unicode dot org for Unicode characters and other details.

31
00:02:40,750 --> 00:02:48,880
So now we get some idea that Unicode is universal set of characters used by all programming languages,

32
00:02:48,880 --> 00:02:52,030
various platforms and software applications.

33
00:02:52,570 --> 00:02:58,390
There are few more terms which should be known to a programmer who wants to claim that.

34
00:02:58,420 --> 00:03:01,240
Yes, I know what is Unicode.

35
00:03:02,190 --> 00:03:06,510
Let's begin with first term known as Code Point.

36
00:03:07,400 --> 00:03:12,080
Gold Point is nothing but the hexadecimal number assigned to each character.

37
00:03:12,650 --> 00:03:19,340
We saw that for character A the number is you +00 for one.

38
00:03:19,970 --> 00:03:24,290
So this U +00 for one is called point.

39
00:03:24,650 --> 00:03:31,130
Normally we see that code point has the syntax of u plus the hex value.

40
00:03:31,610 --> 00:03:39,620
U plus prefixed code shows that it is a unicode and hex is the unique number given to respective character.

41
00:03:40,100 --> 00:03:47,240
Of course, not all code points are assigned a character as some are empty and can be assigned in the

42
00:03:47,240 --> 00:03:47,900
future.

43
00:03:48,680 --> 00:03:53,390
The next term, which we need to know is character and properties.

44
00:03:54,160 --> 00:03:56,980
It is a character assigned to each core point.

45
00:03:57,190 --> 00:04:00,800
You must have observed that with character A.

46
00:04:00,820 --> 00:04:04,660
It is also displaying Latin capital letter A.

47
00:04:05,290 --> 00:04:08,140
In a way it is kind of category.

48
00:04:08,170 --> 00:04:14,050
Another example you can observe in currency where the category is currency sign.

49
00:04:14,560 --> 00:04:18,790
So it is about the category and the property of a character.

50
00:04:19,360 --> 00:04:23,800
The next topic we are going to discuss is Unicode planes.

51
00:04:24,650 --> 00:04:32,330
A plane in Unicode standards is a group of 65,536 code points.

52
00:04:32,780 --> 00:04:40,240
There are 17 planes and each plane is given a number starting from 0 to 16.

53
00:04:40,250 --> 00:04:44,450
That is a hexadecimal number given to each plane.

54
00:04:45,020 --> 00:04:52,110
So first plane will be like you plus zero and the hexadecimal value.

55
00:04:52,130 --> 00:04:58,490
The zero is also a hexadecimal and the rest of the values are individual code points.

56
00:04:59,000 --> 00:05:08,390
For example, for second plane, it should be U plus one and then four zeros where one is the second

57
00:05:08,390 --> 00:05:09,770
plane number.

58
00:05:10,490 --> 00:05:16,790
Plane zero is called basic multilingual plane that is BNP.

59
00:05:17,330 --> 00:05:22,550
This plane contains most commonly used characters and symbols.

60
00:05:22,880 --> 00:05:28,010
Developers need characters from this plane most of the time.

61
00:05:28,490 --> 00:05:35,780
Higher planes above BNP are called supplementary planes or astral planes.

62
00:05:36,020 --> 00:05:48,050
So it means the last code point in 17 planes is U plus ten, which is a hexadecimal 16 and four FS.

63
00:05:48,470 --> 00:05:55,620
So code units of supplementary planes are called supplementary or astral.

64
00:05:55,640 --> 00:05:56,870
Code points.

65
00:05:57,740 --> 00:06:00,920
Another topic is code units.

66
00:06:01,370 --> 00:06:06,320
It is the number of bits used for the respective character encoding.

67
00:06:06,530 --> 00:06:19,280
We have UTF eight that is eight bits or one byte, UTF 16 that is 16 bits or two bytes and UTF 32 that

68
00:06:19,280 --> 00:06:23,720
is 32 bits or four bytes encoding available.

69
00:06:23,750 --> 00:06:34,760
It means a code unit can be off one, two or four bytes, as we now know that a code point is a character

70
00:06:34,760 --> 00:06:43,610
and each character can be represented by one or more code units depending on the type of character encoding.

71
00:06:43,790 --> 00:06:52,700
This also means when we consider character A in UTF eight, the core unit will be for one that is 41

72
00:06:52,700 --> 00:06:54,050
hexadecimal value.

73
00:06:54,380 --> 00:07:03,620
For UTF 16, it will be double zero for one that is for bytes hexadecimal value, and for UTF 32 it

74
00:07:03,620 --> 00:07:06,290
will be total eight bytes of course.

75
00:07:06,290 --> 00:07:08,570
41 hexadecimal value.

76
00:07:10,870 --> 00:07:15,310
The next concept in Unicode is surrogate pairs.

77
00:07:15,700 --> 00:07:22,670
So now we know that a code point represents one character and depending on the character encoding,

78
00:07:22,670 --> 00:07:24,790
a number of bytes are used.

79
00:07:25,270 --> 00:07:30,100
There are some characters who belong to the supplementary or astral plane.

80
00:07:31,000 --> 00:07:35,010
Normally, programming languages deal in UTF 16.

81
00:07:35,020 --> 00:07:36,940
That is 16 bits.

82
00:07:37,780 --> 00:07:43,050
A character which is in the astral plane needs 21 bits.

83
00:07:43,060 --> 00:07:47,500
For example, Smiley, which is in the second plane.

84
00:07:48,040 --> 00:07:54,100
It means it will require two UTF 16 code units to store Smiley.

85
00:07:54,700 --> 00:08:03,880
Smiley scored point is 1f600 where one is the plane number and f600 is the code point.

86
00:08:04,390 --> 00:08:11,800
Because this character needs 21 bits, it will need a pair of UTF 16 code unit.

87
00:08:17,110 --> 00:08:21,280
And this pair is known as a surrogate pair.

88
00:08:22,390 --> 00:08:30,550
The first section is leading our high surrogate code unit and second is trailing or low surrogate code

89
00:08:30,550 --> 00:08:31,120
unit.

90
00:08:32,000 --> 00:08:40,490
So if I try to print Smiley and because it belongs to astral plane or supplementary plane, which requires

91
00:08:40,490 --> 00:08:55,280
two code unit or a surrogate pair in UTF 16 for 1f600, the surrogate per used is D, 83d and de00.

92
00:08:56,190 --> 00:09:03,600
That is also a logic where you have a provision to convert the core unit into surrogate value.

93
00:09:03,930 --> 00:09:06,850
But that's a different topic to be discussed at the moment.

94
00:09:06,870 --> 00:09:10,380
You can imagine these values we already know.

95
00:09:10,530 --> 00:09:15,630
So let's try to print smiley using surrogate pair in GS fetal.

96
00:09:16,960 --> 00:09:24,820
I'll just say console.log and the high and low surrogate pair I'm going to mention here.

97
00:09:26,140 --> 00:09:27,850
Let's try to run the code now.

98
00:09:29,400 --> 00:09:32,520
As you can see, a smiley is displayed.

99
00:09:33,450 --> 00:09:38,040
BNP has unused code points so far, high surrogate.

100
00:09:38,070 --> 00:09:51,180
The range is da002 db, double F and for low surrogate code unit the range is DC 002df double F in sharp

101
00:09:51,210 --> 00:09:56,940
surrogate pair is used when we have characters above BNP plane.

102
00:09:57,270 --> 00:10:01,680
The next concept you need to know is graphing and glyph.

103
00:10:02,950 --> 00:10:10,330
A graffiti is actually a character, or you can say a code point, but sometimes you see sequence of

104
00:10:10,330 --> 00:10:12,220
characters for a graffiti.

105
00:10:12,250 --> 00:10:21,940
For example, we display console or log E and of course console log log E, and then I'm adding one

106
00:10:21,940 --> 00:10:25,150
more character which will be displayed on top of E.

107
00:10:26,650 --> 00:10:27,040
Here.

108
00:10:27,040 --> 00:10:34,330
The first line is a single character or code point, whereas the second takes combination of characters

109
00:10:34,330 --> 00:10:37,960
or code points to display a single graffiti.

110
00:10:38,920 --> 00:10:46,330
So both the displayed values are called graffiti, but the second is displayed using combination mark.

111
00:10:47,230 --> 00:10:54,940
If you think graphene as a character, then the actual image displayed, maybe with different formatting,

112
00:10:54,940 --> 00:10:56,560
is called a glyph.

113
00:10:56,590 --> 00:11:01,510
For example, graphene A may have glyphs like this.

114
00:11:01,510 --> 00:11:02,020
A.

115
00:11:02,770 --> 00:11:04,900
This one are like this.

116
00:11:05,080 --> 00:11:08,470
So glyph is the actual image which you see on the screen.

