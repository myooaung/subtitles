WEBVTT
1
00:00:00.180 --> 00:00:03.360
The question and concept we are discussing in this tutorial.

2
00:00:03.960 --> 00:00:07.020
Is it rebels and traitors?

3
00:00:07.500 --> 00:00:12.720
There will be three related questions to this JavaScript language category question.

4
00:00:13.530 --> 00:00:17.280
The iterator concept is newly introduced in S6.

5
00:00:17.520 --> 00:00:23.280
It's a kind of new mechanism to iterate or traverse through data structures.

6
00:00:23.490 --> 00:00:26.850
As you know, Adi is already iterable.

7
00:00:27.120 --> 00:00:34.110
It means if you want to put a far off loop on an array, then you can easily do that.

8
00:00:34.380 --> 00:00:37.920
For example, I create an attic error.

9
00:00:38.220 --> 00:00:40.860
And let me also put a few values in it.

10
00:00:42.910 --> 00:00:49.480
I just put the follow up, let maybe one variable I off era.

11
00:00:51.300 --> 00:00:55.850
And we say console.log the value of I.

12
00:00:57.120 --> 00:01:00.870
If I run this, then we get the output.

13
00:01:01.560 --> 00:01:04.940
Similarly, strings, maps, sets.

14
00:01:05.099 --> 00:01:07.920
All these data collections are iterable.

15
00:01:08.280 --> 00:01:11.970
But imagine that you have an object literally like this.

16
00:01:12.420 --> 00:01:16.920
Now you want to use for off loop on this object.

17
00:01:17.190 --> 00:01:22.470
In short, you want to make this object literal and iterable object.

18
00:01:22.830 --> 00:01:32.070
You can do that in E6 using symbol dot iterator and we are going to implement or rather convert an object

19
00:01:32.070 --> 00:01:35.370
literal into an iterable object as well.

20
00:01:35.520 --> 00:01:43.110
But before we do that, I'm going to explain step by step syntax of the symbol dot iterator.

21
00:01:43.620 --> 00:01:50.610
We will just see the basic syntax of the symbol that iterator with easier v that is the array.

22
00:01:50.880 --> 00:01:58.410
Let's dig the same code often Eddi and iterate through using symbol dot iterator.

23
00:01:58.710 --> 00:01:59.670
Let's try that.

24
00:01:59.670 --> 00:02:02.820
So here I am going to say idea.

25
00:02:02.850 --> 00:02:11.640
The reason I'm taking an object idea because the array should have a key called symbol dot iterator

26
00:02:12.270 --> 00:02:14.940
which returns the iterable object.

27
00:02:14.940 --> 00:02:22.350
So this is a kind of matter you are calling with g symbol dot iterator and that returns the iterable

28
00:02:22.350 --> 00:02:23.670
object in idea.

29
00:02:23.820 --> 00:02:27.030
Let's try to display the value of idea as we go on.

30
00:02:27.030 --> 00:02:28.260
You will have a clear idea.

31
00:02:28.470 --> 00:02:30.060
What exactly am I doing here?

32
00:02:30.750 --> 00:02:32.190
Let me save this.

33
00:02:33.820 --> 00:02:35.830
And run the core.

34
00:02:37.780 --> 00:02:42.130
As you can see, the value of ideas is that it is an added iterator.

35
00:02:42.340 --> 00:02:51.280
Now the next thing is that idea object will automatically have a next method which will iterate through

36
00:02:51.460 --> 00:02:56.680
every element one by one so I can either see idea or not next.

37
00:02:58.970 --> 00:03:04.370
Whatever it returns, I can store it in a variable and be displayed all weekend straightaway.

38
00:03:05.180 --> 00:03:09.050
Display as well as we move to the next element as well.

39
00:03:09.320 --> 00:03:14.120
So now if I run this, it'll start moving.

40
00:03:14.330 --> 00:03:21.470
So now if you see this that ideas value is this, that is object added iterator, the next is value

41
00:03:21.830 --> 00:03:29.300
and then the value is four, which is the zeroth element of added done is the status that it is not

42
00:03:29.300 --> 00:03:30.020
yet done.

43
00:03:30.290 --> 00:03:32.570
That is, the iteration is not over.

44
00:03:32.810 --> 00:03:36.680
If I write this statement four times, let me write it five times.

45
00:03:36.680 --> 00:03:37.160
In fact.

46
00:03:37.700 --> 00:03:38.570
One, two.

47
00:03:40.590 --> 00:03:41.180
And five.

48
00:03:41.460 --> 00:03:42.810
I'll remove this idea.

49
00:03:42.870 --> 00:03:46.080
Now again, we run to see what happens.

50
00:03:47.090 --> 00:03:49.970
See this, we have the value for five, six, seven.

51
00:03:50.270 --> 00:03:59.540
The last value is undefined every time dances false, but the last iterator returns this object itself.

52
00:03:59.540 --> 00:04:05.520
The iterator returns this object which has value and the next iteration status.

53
00:04:05.540 --> 00:04:06.410
So here we have.

54
00:04:06.590 --> 00:04:06.890
True.

55
00:04:06.890 --> 00:04:08.330
That means now it is done.

56
00:04:08.630 --> 00:04:16.700
So now we have used this symbol that iterator to iterate through adding though our purpose is to iterate

57
00:04:16.700 --> 00:04:19.040
through object literal as well.

58
00:04:19.339 --> 00:04:22.900
I mean iterating through something which is not a treble.

59
00:04:23.720 --> 00:04:26.090
So let's start doing that as well.

60
00:04:26.630 --> 00:04:30.620
Imagine that you have an object like this.

61
00:04:33.090 --> 00:04:39.270
Here you have two values, let's say START, which has, for example, whatever value it is.

62
00:04:39.630 --> 00:04:44.230
And you also have the end, which again has, let's say, 15.

63
00:04:44.670 --> 00:04:51.590
So now we want that we want to iterate through not the properties that is start and and so on.

64
00:04:51.600 --> 00:04:55.080
We want to iterate through 10 to 15.

65
00:04:55.350 --> 00:05:04.050
Now when I say iterate, it literally means that you should be able to have a far loop like this for

66
00:05:04.050 --> 00:05:06.810
ie off object.

67
00:05:07.230 --> 00:05:08.730
Now this is not possible.

68
00:05:09.000 --> 00:05:15.660
We want that every time this loop is executed, the object is executed.

69
00:05:15.840 --> 00:05:19.230
There has to be a value ten, 11, 12, and so on.

70
00:05:19.590 --> 00:05:22.830
And it should go till the end of this value.

71
00:05:23.130 --> 00:05:27.990
Let me just put the console also later on, it will give you the output.

72
00:05:27.990 --> 00:05:28.920
Not at the moment.

73
00:05:28.920 --> 00:05:36.330
At the moment, if I try to run this, certainly it will give me an error saying that object is not

74
00:05:36.330 --> 00:05:38.120
iterable right.

75
00:05:38.130 --> 00:05:40.020
It is not the iterable object.

76
00:05:40.020 --> 00:05:42.900
So I cannot have far off with object.

77
00:05:43.230 --> 00:05:44.580
And that's what we are going to do.

78
00:05:45.270 --> 00:05:45.660
How?

79
00:05:46.050 --> 00:05:47.880
Let's see the rules.

80
00:05:47.880 --> 00:05:56.550
First of all, when you want to make an object iterable, it should have method whose key is symbol

81
00:05:56.550 --> 00:05:57.630
dot iterator.

82
00:05:57.630 --> 00:06:03.240
That means I am supposed to put a method inside object.

83
00:06:03.270 --> 00:06:10.530
At the moment I'm defining the method separately, so I will say object.

84
00:06:13.260 --> 00:06:14.310
Symbol Dart.

85
00:06:15.710 --> 00:06:16.430
Iterator.

86
00:06:17.120 --> 00:06:18.770
I'm adding a function to it.

87
00:06:19.430 --> 00:06:28.910
Now, as I said, the object should have a symbol that iterator matter and that should return and iterable

88
00:06:28.910 --> 00:06:33.550
object that should also have the next method as well.

89
00:06:33.560 --> 00:06:36.470
So these are the rules you need to follow.

90
00:06:36.740 --> 00:06:40.760
So first thing, I'm going to create any table object.

91
00:06:42.600 --> 00:06:43.500
So I'll say it.

92
00:06:43.510 --> 00:06:44.190
We're in it.

93
00:06:44.640 --> 00:06:47.040
And this I'm going to return from this matter.

94
00:06:47.760 --> 00:06:48.660
So I also return.

95
00:06:48.660 --> 00:06:49.300
Idiot.

96
00:06:49.590 --> 00:06:54.240
Now, this iterable object should have a next method.

97
00:06:54.240 --> 00:06:56.000
So I'm going to put the next method.

98
00:06:56.010 --> 00:06:57.390
It has to be next like this.

99
00:06:57.390 --> 00:06:58.770
Only inside of this.

100
00:06:58.770 --> 00:07:10.590
What I want is that if the object dot stock is less than equal to object art and then it should return.

101
00:07:10.830 --> 00:07:18.240
As you saw in the ad, it also will return the value, which is going to be every time I'm going to

102
00:07:18.240 --> 00:07:20.040
increment the start value.

103
00:07:20.340 --> 00:07:23.580
So I'll say plus, plus do I am taking the same variable.

104
00:07:23.730 --> 00:07:30.840
I should take a separate variable, but that's fine at the moment and then is equal to false else at

105
00:07:30.840 --> 00:07:31.200
the end.

106
00:07:31.200 --> 00:07:33.570
What we want is we do not want to return a value.

107
00:07:33.840 --> 00:07:37.620
We just want to say none is true.

108
00:07:38.100 --> 00:07:38.610
That's it.

109
00:07:39.180 --> 00:07:44.390
Now let's try to run and see whether our object is it rebel or not.

110
00:07:44.400 --> 00:07:50.190
Let me remind you that we have kept a far loop where we are putting far off on object.

111
00:07:50.430 --> 00:07:51.660
So let's run this.

112
00:07:52.710 --> 00:07:53.610
And there it is.

113
00:07:54.240 --> 00:07:59.100
So now we have the value 10 to 15 right here.

114
00:07:59.970 --> 00:08:07.470
So the condition here is you put the matter inside the object which returns and it label object like

115
00:08:07.470 --> 00:08:08.670
here we have done this.

116
00:08:09.930 --> 00:08:10.290
This.

117
00:08:10.290 --> 00:08:16.470
If we want to simplify, then you can remove this return statement from this place.

118
00:08:16.740 --> 00:08:21.110
Now, instead of this, if you just say return here, this should also work, right?

119
00:08:21.120 --> 00:08:25.440
Because there is no difference as such in writing like this.

120
00:08:25.530 --> 00:08:27.420
So now if I just run.

121
00:08:28.700 --> 00:08:31.130
The output should be the same.

122
00:08:31.610 --> 00:08:32.809
So we have this output.

123
00:08:33.140 --> 00:08:34.909
The code is still running here.

124
00:08:35.870 --> 00:08:43.640
Not only that, I have intentionally kept the function outside the object, but we can just cut this

125
00:08:43.640 --> 00:08:45.380
function, the entire function.

126
00:08:47.010 --> 00:08:51.180
Which is actually a matter of object and I can put it in.

127
00:08:51.210 --> 00:08:54.870
The only difference will be we cannot have the Golan sign.

128
00:08:55.530 --> 00:08:57.240
We cannot have the equal to sign.

129
00:08:57.250 --> 00:09:01.770
So we'll put the Golan or we can go with the E6 index.

130
00:09:01.800 --> 00:09:02.430
Like this.

131
00:09:03.150 --> 00:09:04.170
This is also fine.

132
00:09:04.650 --> 00:09:09.180
And we do not need any object because we are inside the object itself.

133
00:09:09.630 --> 00:09:14.370
So now if you observe this, it is still going to be the same output.

134
00:09:18.310 --> 00:09:23.950
In this code, the object object does not have the next method.

135
00:09:24.130 --> 00:09:32.020
What I mean to say is that the next matter is actually a matter placed inside the symbol iterator method.

136
00:09:32.350 --> 00:09:38.620
You also can place the next method as a part of the object like this.

137
00:09:38.770 --> 00:09:42.730
Say for example, you are not going to return anything at the moment.

138
00:09:42.730 --> 00:09:46.510
And this next method I am going to cut from this.

139
00:09:48.050 --> 00:09:52.850
This is not needed at the moment, lest this is the end of symbology iterator method.

140
00:09:52.850 --> 00:09:54.530
So I'll bring the bracket here.

141
00:09:54.740 --> 00:09:55.490
Then come.

142
00:09:55.520 --> 00:10:00.060
I'm going to add that this is now the next method of object itself.

143
00:10:00.080 --> 00:10:05.750
Earlier, this next was part of symbol, not iterator.

144
00:10:05.960 --> 00:10:09.530
Now I'm keeping next as part of object only.

145
00:10:09.770 --> 00:10:15.620
Now, the only thing is when you write the symbol, that iterator, you must return the object itself.

146
00:10:15.620 --> 00:10:15.800
Right?

147
00:10:15.800 --> 00:10:17.900
Because there won't be any reference otherwise.

148
00:10:18.200 --> 00:10:19.820
Now, if I run.

149
00:10:21.610 --> 00:10:23.350
Still we get the output.

150
00:10:23.350 --> 00:10:25.840
So this is even a better way of writing code though.

151
00:10:25.840 --> 00:10:34.480
This has a limitation and the limitation is that this way is only possible when iterator and iterable

152
00:10:34.750 --> 00:10:37.150
are the same object.

153
00:10:37.450 --> 00:10:45.280
Also, if there are two or more for off running simultaneously, then this will not work.

154
00:10:45.280 --> 00:10:51.370
Because see this symbol, that iterator and next they both are placed inside object.

155
00:10:51.670 --> 00:10:55.090
So that will not be and it is returning the object itself.

156
00:10:55.600 --> 00:10:57.460
So earlier this wasn't the case.

157
00:10:57.470 --> 00:11:02.140
Earlier it was returning the iterator separately, but now they both are.

158
00:11:02.140 --> 00:11:05.890
That is iterator and iterable are the same object.

159
00:11:06.100 --> 00:11:11.290
So there cannot be two or more for of running simultaneously.

160
00:11:11.530 --> 00:11:14.710
But actually that is also a very rare case.

161
00:11:14.710 --> 00:11:17.890
So there is no harm in using this syntax.

162
00:11:18.250 --> 00:11:20.800
Let's discuss related questions of this topic.

163
00:11:21.160 --> 00:11:24.670
The first question is what is the purpose of iterator?

164
00:11:26.000 --> 00:11:33.260
The use of an iterator is to make a data structure iterable, which is not eddies, strings, maps or

165
00:11:33.260 --> 00:11:36.800
sets or other similar collections are already iterable.

166
00:11:36.980 --> 00:11:43.730
But when you create an object which should have facility of putting for off loop on it, then you need

167
00:11:43.730 --> 00:11:45.320
to create the iterator.

168
00:11:47.580 --> 00:11:50.700
The second question is how do you create an iterator?

169
00:11:50.970 --> 00:11:58.350
The symbol that iterator method must be implemented, which should return and iterator object and should

170
00:11:58.350 --> 00:12:06.570
also have a next method which returns the object like this where you have the value and the done status,

171
00:12:06.630 --> 00:12:10.740
or maybe the done status only like this when the iteration needs to end.

172
00:12:13.090 --> 00:12:20.620
Third question is explain a practical use of an iterator when the use of any trader is not very prompt,

173
00:12:20.620 --> 00:12:24.040
when you use it in the same scope like we have done that.

174
00:12:24.040 --> 00:12:27.070
OBJ is also that the for loop is also there.

175
00:12:27.250 --> 00:12:28.730
So it is in the same scope.

176
00:12:28.750 --> 00:12:33.730
But let's say you have your own data structure which is used by other programmers.

177
00:12:33.880 --> 00:12:40.240
Then the real charm comes into picture as the custom data structure which you have created needs to

178
00:12:40.240 --> 00:12:43.720
have a provision of far off that is kind of loop.

179
00:12:43.960 --> 00:12:48.790
Then if your object is not iterable, then it will not work.

180
00:12:49.060 --> 00:12:55.750
So you are in a way creating a pointer to more in the data structure which you have provided to the

181
00:12:55.750 --> 00:12:58.120
end user who is actually a programmer.

