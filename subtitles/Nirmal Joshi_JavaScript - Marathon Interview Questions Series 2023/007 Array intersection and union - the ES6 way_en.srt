1
00:00:02,140 --> 00:00:06,400
So in this section we are going to try one more exercise about Adi.

2
00:00:09,960 --> 00:00:15,000
There are two ads, for example, like this one you have at a one and added two.

3
00:00:15,420 --> 00:00:18,780
Both are numeric added, but they can be of any data type.

4
00:00:19,600 --> 00:00:23,400
The exercise is about finding the intersections.

5
00:00:23,410 --> 00:00:28,120
That is all the values which are present in both the ads.

6
00:00:28,600 --> 00:00:34,240
And the second question with this exercise is finding union of two ads.

7
00:00:34,990 --> 00:00:40,120
Now, when I say intersection, that means values which are present in both.

8
00:00:40,120 --> 00:00:46,120
The ad is so in this case it will be eight and two, which is present in both the ad.

9
00:00:46,210 --> 00:00:48,010
So that is the intersection.

10
00:00:48,520 --> 00:00:52,870
And if I say union, that means it's about all these elements.

11
00:00:52,870 --> 00:00:57,580
That is one, three, five, two, seven, eight, nine and ten, of course.

12
00:00:58,060 --> 00:01:01,870
But in case of union, it should not repeat the value.

13
00:01:01,870 --> 00:01:05,560
That means eight and two should not come multiple times.

14
00:01:06,280 --> 00:01:08,740
So let's try to practically implement.

15
00:01:09,160 --> 00:01:16,900
We have many ways again to do the same thing, but we are going to try more of the E6 we the shortest

16
00:01:16,900 --> 00:01:20,200
way to find the intersection and the union as well.

17
00:01:20,800 --> 00:01:22,630
We will begin with the intersection.

18
00:01:23,410 --> 00:01:27,640
So here we already have these two ads that is added one and added two.

19
00:01:28,390 --> 00:01:33,250
Now I'm going to declare another ad which is going to have the intersection values.

20
00:01:33,820 --> 00:01:37,600
The important point here is I'm going to use added one.

21
00:01:38,650 --> 00:01:43,020
Dart filter matter inside the filter.

22
00:01:43,030 --> 00:01:45,670
You already know that there are two parameters.

23
00:01:45,670 --> 00:01:48,570
One is the value, and the second is index number.

24
00:01:48,580 --> 00:01:50,290
I'm going to take the value here.

25
00:01:51,350 --> 00:01:58,160
And here I just want to return the value only if that value exists in the attic.

26
00:01:58,460 --> 00:02:08,330
So I can use the includes method and I can see why this means each value is passed to this V and that

27
00:02:08,330 --> 00:02:09,590
we are checking with.

28
00:02:09,590 --> 00:02:17,630
Added to that is if that value, this value which is of everyone existing in added to then it should

29
00:02:17,630 --> 00:02:18,320
be returned.

30
00:02:18,320 --> 00:02:20,510
Otherwise it should not be returned.

31
00:02:21,200 --> 00:02:30,080
So now all values of additive and if exist in additive, then only it will be part of every intersection.

32
00:02:30,770 --> 00:02:36,440
The only thing you will have to do now is you just display the adda intersection to see whether we have

33
00:02:36,440 --> 00:02:38,390
the intersection values or not.

34
00:02:39,170 --> 00:02:41,780
So if I click here, we have eight and two.

35
00:02:42,140 --> 00:02:45,770
These two values are also present in added to.

36
00:02:46,430 --> 00:02:50,030
All right, so this is a very easier way to deal with intersection.

37
00:02:50,390 --> 00:02:52,190
Now let's talk about union.

38
00:02:52,370 --> 00:02:57,980
As I mentioned in the beginning that when you find a union, that means it should find all the values.

39
00:02:58,220 --> 00:03:03,620
So actually, you can say that the ATI Union should have all the values.

40
00:03:03,650 --> 00:03:06,830
Let me just change this to add a union.

41
00:03:07,700 --> 00:03:10,070
Now it should actually have all the values.

42
00:03:10,070 --> 00:03:12,280
That means I can use the spread operator.

43
00:03:12,290 --> 00:03:13,650
I can say Dada Dot.

44
00:03:14,360 --> 00:03:18,290
They are one that is added one and added two as well.

45
00:03:19,950 --> 00:03:23,640
If you do this, then it actually joins both the ads.

46
00:03:23,970 --> 00:03:32,760
But the problem will be that it's going to join all the elements where eight 2 to 8 is actually a repeat

47
00:03:32,760 --> 00:03:33,210
value.

48
00:03:33,690 --> 00:03:35,370
This is something we do not want.

49
00:03:35,610 --> 00:03:42,240
When you say union, it does include all the values, but any value which is existing in first and second

50
00:03:42,240 --> 00:03:44,700
area should appear only once.

51
00:03:45,120 --> 00:03:49,230
Now you can use the logic to check if it exists.

52
00:03:49,230 --> 00:03:52,710
Then you push it to the ADI so you have various way to do that.

53
00:03:52,920 --> 00:03:57,900
But I did promise you that we are going to see the shortest way and with the E6 we.

54
00:03:58,170 --> 00:04:05,940
So I'm going to use the set that is the set collection here because set is something which keeps unique

55
00:04:05,940 --> 00:04:06,900
values only.

56
00:04:07,200 --> 00:04:09,290
So here I'm going to say new.

57
00:04:09,300 --> 00:04:11,670
Let me just use the spread operator here first.

58
00:04:11,670 --> 00:04:12,450
I'll say new.

59
00:04:12,840 --> 00:04:19,680
You can certainly check the set and map category for getting more information about this functionality.

60
00:04:19,709 --> 00:04:25,330
So I'm going to say new set and inside the set I'm going to pass these ads.

61
00:04:25,500 --> 00:04:29,370
So set will make sure that it creates a unique value collection.

62
00:04:30,000 --> 00:04:34,980
These two areas are passed inside of these set, and then I'm going to close it.

63
00:04:35,640 --> 00:04:36,750
Let's run this now.

64
00:04:36,770 --> 00:04:38,430
You already have two elements here.

65
00:04:38,430 --> 00:04:39,600
I'll keep it as it is.

66
00:04:39,600 --> 00:04:42,600
Not clearing this and running it again.

67
00:04:43,760 --> 00:04:44,460
There you are.

68
00:04:44,480 --> 00:04:46,730
Now you see, there are only ten elements.

69
00:04:47,240 --> 00:04:50,990
So this is how you can get the union of two eddies.

