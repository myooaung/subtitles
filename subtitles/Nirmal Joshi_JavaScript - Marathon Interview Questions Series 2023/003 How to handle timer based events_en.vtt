WEBVTT
1
00:00:00.030 --> 00:00:07.050
In this section, we are discussing a question that how will you handle timer based events in JavaScript?

2
00:00:07.200 --> 00:00:14.910
The category of this question is DOM and web related question, and we will discuss four different questions

3
00:00:14.910 --> 00:00:17.430
which can be asked related to this topic.

4
00:00:18.270 --> 00:00:19.440
Let's begin with the answer.

5
00:00:20.190 --> 00:00:22.350
So to handle the timer based events.

6
00:00:22.500 --> 00:00:28.620
There are two methods globally available called set timeout and set interval.

7
00:00:28.770 --> 00:00:35.790
When I say globally, it means that both said timeout and set interval are part of the window object.

8
00:00:36.000 --> 00:00:39.960
So these two methods can be used to handle timer based events.

9
00:00:40.950 --> 00:00:42.000
Set timeout.

10
00:00:42.030 --> 00:00:50.420
Execute only once after a given number of intervals that is set interval keeps on executing.

11
00:00:50.460 --> 00:00:52.890
Let's check both the methods practically.

12
00:00:52.980 --> 00:00:54.810
We will begin with set timeout.

13
00:00:55.700 --> 00:01:02.120
The syntax of said timeout is like this, that the first parameter is the function name, which you

14
00:01:02.120 --> 00:01:07.280
want to call, and the second parameter is the interval that is milliseconds.

15
00:01:07.310 --> 00:01:09.470
Let's say you give 1000 milliseconds.

16
00:01:09.620 --> 00:01:11.720
That means it will be 1/2.

17
00:01:12.200 --> 00:01:14.090
Let's try a code sample with this.

18
00:01:14.300 --> 00:01:22.570
I have a kind of template where I have an action and I have given an idea also to it and also a button.

19
00:01:22.580 --> 00:01:30.380
When I click on this button, then it's going to call a function called try timer and that will execute

20
00:01:30.380 --> 00:01:33.590
the set timeout when the set timeout is executed.

21
00:01:33.710 --> 00:01:37.070
We are going to change the text of this action.

22
00:01:37.820 --> 00:01:38.720
Let's try that.

23
00:01:39.320 --> 00:01:41.930
Here, I'll say set timeout.

24
00:01:42.800 --> 00:01:48.340
Assume that I'm going to call a function named list and that is after 2 seconds.

25
00:01:48.350 --> 00:01:50.780
That is 2000 milliseconds.

26
00:01:51.020 --> 00:01:52.780
Now, I'm going to write a function here.

27
00:01:52.790 --> 00:01:54.140
I'll say function test.

28
00:01:55.720 --> 00:01:59.770
And inside this because I want to change the text of Aaron.

29
00:01:59.920 --> 00:02:10.210
I will say document part get element by ID the name of the action is D, D, and the value of that H1

30
00:02:10.210 --> 00:02:12.210
is referred to with enriched HTML.

31
00:02:13.090 --> 00:02:15.310
And here I will say timed out.

32
00:02:17.480 --> 00:02:18.020
That's it.

33
00:02:18.230 --> 00:02:21.560
I will save this and let's execute the output.

34
00:02:22.520 --> 00:02:25.490
All right, so now I'm clicking on this button start timer.

35
00:02:26.840 --> 00:02:30.920
So as you can see that after 2 seconds, this message is changed.

36
00:02:31.250 --> 00:02:32.180
This is what I said.

37
00:02:32.180 --> 00:02:32.630
Time out.

38
00:02:32.630 --> 00:02:35.960
There's as I mention, it executes only once.

39
00:02:36.230 --> 00:02:37.880
It doesn't keep on executing.

40
00:02:38.150 --> 00:02:41.090
If you want that, it should execute constantly.

41
00:02:41.100 --> 00:02:43.160
Then we will use set interval.

42
00:02:43.430 --> 00:02:48.080
But before we move to set interval, I would also like to change the syntax here.

43
00:02:48.350 --> 00:02:53.360
The function which we have written here that has a name that is we have a named function.

44
00:02:53.660 --> 00:02:56.410
But let's say you have a small process to execute.

45
00:02:56.420 --> 00:02:58.850
Then you can go with anonymous function.

46
00:02:58.970 --> 00:03:01.130
That is a function without a name.

47
00:03:01.430 --> 00:03:05.730
So I can simply say function or I can go with arrow function also.

48
00:03:05.750 --> 00:03:07.340
Let me begin with function itself.

49
00:03:07.340 --> 00:03:08.690
First of all, the traditional way.

50
00:03:08.690 --> 00:03:14.840
I mean, I don't give a name of the function and this statement which we have written in this test function

51
00:03:14.960 --> 00:03:16.190
that I will shift.

52
00:03:17.640 --> 00:03:19.890
And pasted here and I will remove this.

53
00:03:20.900 --> 00:03:21.650
Best function.

54
00:03:22.250 --> 00:03:25.790
Saving the file and refresh.

55
00:03:26.150 --> 00:03:27.470
And we executed a.

56
00:03:29.310 --> 00:03:33.330
So we still have the same output compared to the previous score.

57
00:03:33.420 --> 00:03:38.700
What we have done here is we have just written an anonymous function.

58
00:03:38.820 --> 00:03:44.490
Of course, instead of writing the traditional function, I can go with arrow function as well.

59
00:03:44.760 --> 00:03:45.090
Right.

60
00:03:45.090 --> 00:03:48.270
So I can say I remove the function quiver and put an arrow.

61
00:03:48.270 --> 00:03:50.490
So this is converted into an arrow function.

62
00:03:50.520 --> 00:03:53.730
Let's write that time out with arrow function.

63
00:03:54.390 --> 00:03:56.130
Let's go to the browser.

64
00:03:56.370 --> 00:03:57.660
I will refresh the screen.

65
00:03:58.710 --> 00:04:00.000
Click on the start timer.

66
00:04:01.180 --> 00:04:03.760
And after 2 seconds, we have this message.

67
00:04:04.330 --> 00:04:05.770
So here said timeout.

68
00:04:05.950 --> 00:04:13.120
We have tried with a function with a name and an anonymous function is also a valid syntax.

69
00:04:13.480 --> 00:04:18.220
It all depends on your choice so that you have more lines to execute or you have few lines.

70
00:04:18.220 --> 00:04:23.830
If you have few lines, you can go with this anonymous syntax or you can try the function with her name.

71
00:04:23.980 --> 00:04:28.300
In short said Timeout will execute the process and the job is done.

72
00:04:28.750 --> 00:04:32.890
Set interval, on the other hand, keeps on executing the process.

73
00:04:33.100 --> 00:04:35.650
The syntax is similar to set timeout.

74
00:04:35.770 --> 00:04:42.970
That is, it can take a function with a name or an anonymous function and the second parameter is interval

75
00:04:42.970 --> 00:04:44.170
in milliseconds.

76
00:04:44.740 --> 00:04:47.320
Let's try set interval with an example.

77
00:04:47.620 --> 00:04:51.880
Now instead of said timeout, I'm just going to say set interval.

78
00:04:53.010 --> 00:04:54.840
Not because the message is same.

79
00:04:54.840 --> 00:04:59.540
We will not get the idea whether it is constantly executing it or not.

80
00:04:59.550 --> 00:05:02.120
So what we can do, we can take a variable here.

81
00:05:02.130 --> 00:05:06.990
Let's say I take variable LED counter is equal to zero, right?

82
00:05:07.170 --> 00:05:12.180
And here I'm going to assign the counter instead of a message.

83
00:05:12.420 --> 00:05:18.440
And every time the interval is executed, I'm going to increment the counter and let's change the milliseconds

84
00:05:18.450 --> 00:05:18.580
out.

85
00:05:18.610 --> 00:05:21.420
So instead of 2 seconds I will see 1/2.

86
00:05:21.630 --> 00:05:23.250
That is 1000 milliseconds.

87
00:05:23.670 --> 00:05:25.680
The rest of the code remains same.

88
00:05:25.830 --> 00:05:28.260
That is when I click on this start timer.

89
00:05:28.770 --> 00:05:33.970
This dry timer will be executed and it's going to update the counter in the action.

90
00:05:34.260 --> 00:05:35.490
Let's go to the browser.

91
00:05:36.390 --> 00:05:39.840
I will refresh and click on the start timers.

92
00:05:41.690 --> 00:05:49.310
Now, as you can see, we have this start timer button clicking and constantly the counter is getting

93
00:05:49.310 --> 00:05:49.880
updated.

94
00:05:50.210 --> 00:05:53.460
So this is the difference between said timeout and set interval.

95
00:05:53.480 --> 00:05:55.700
That set interval doesn't stop.

96
00:05:56.330 --> 00:05:58.070
But what if you want to stop it?

97
00:05:58.640 --> 00:06:06.140
If you want to stop it, then you can use a matter called clear interval, which can be used to stop

98
00:06:06.140 --> 00:06:06.740
the interval.

99
00:06:07.010 --> 00:06:07.880
Let's try that.

100
00:06:08.030 --> 00:06:09.500
Let's have another button.

101
00:06:12.920 --> 00:06:13.730
Here, we'll say.

102
00:06:14.150 --> 00:06:15.770
Let me stop the timer.

103
00:06:15.860 --> 00:06:18.500
And I can say stop.

104
00:06:18.500 --> 00:06:20.460
Timeout is the method I want to execute.

105
00:06:20.480 --> 00:06:22.280
That is the function we are going to create.

106
00:06:23.000 --> 00:06:26.990
So here I will create a function called stop timer.

107
00:06:28.670 --> 00:06:32.450
Now the question is, even if I write clear interval.

108
00:06:32.990 --> 00:06:39.320
The syntax is that we need to pass a timer reference inside this clear interval.

109
00:06:39.590 --> 00:06:46.520
So when we create this interval, we have to take it in an object that is the interval reference.

110
00:06:46.670 --> 00:06:48.740
We have to take it in an object.

111
00:06:48.830 --> 00:06:49.940
So what will we do?

112
00:06:50.390 --> 00:06:55.370
We will create a global object seeing, let's say timer object right here.

113
00:06:55.820 --> 00:07:00.680
I will say that the object is equal to set interval.

114
00:07:00.680 --> 00:07:01.730
So now what happens?

115
00:07:02.000 --> 00:07:09.110
The interval which we have created is assigned to this object and that we are going to pass here.

116
00:07:09.110 --> 00:07:12.230
I'll say I want to stop the D object.

117
00:07:12.470 --> 00:07:14.480
So clear interval anti object.

118
00:07:14.660 --> 00:07:17.810
I am saving this to go back to the output.

119
00:07:18.200 --> 00:07:19.400
Let's refresh this.

120
00:07:20.800 --> 00:07:24.520
As a start timer, which starts the timer.

121
00:07:24.970 --> 00:07:29.590
And now when I click on the stop timer, it has stopped again.

122
00:07:29.590 --> 00:07:37.120
If I want to say the start timer, it starts from the next counter and when I click on the stop timer

123
00:07:37.120 --> 00:07:41.530
it stops it because we are using the clear interval method here.

124
00:07:41.530 --> 00:07:47.890
One more important thing is when we are calling the get element by ID, we're using the document object.

125
00:07:47.890 --> 00:07:54.640
But here with a clear interval, set interval or set timeout, we are not using document object because

126
00:07:54.730 --> 00:08:00.840
these methods like clear interval are set interval or even set timeout for that matter is not part of

127
00:08:00.850 --> 00:08:01.840
document object.

128
00:08:01.840 --> 00:08:04.510
They are part of the global object call window.

129
00:08:04.630 --> 00:08:10.360
So certainly you can see window that said time out or window that set interval, but you don't need

130
00:08:10.360 --> 00:08:12.280
that because anyway, it's a global object.

131
00:08:12.430 --> 00:08:18.700
So now you know how you can deal with various time related events in JavaScript.

132
00:08:18.910 --> 00:08:21.850
Let's discuss related questions of this topic.

133
00:08:23.950 --> 00:08:29.830
The first question can be explained the difference between said timeout and set interval.

134
00:08:30.310 --> 00:08:36.280
So now you already know that set timeout executes only once, whereas the interval is something which

135
00:08:36.280 --> 00:08:37.450
keeps on executing.

136
00:08:39.870 --> 00:08:47.700
The second question is why can't we write, document or set time out our document set interval that

137
00:08:47.700 --> 00:08:53.190
also we have discussed that said interval or time out, they are actually part of window object and

138
00:08:53.190 --> 00:08:55.260
not the document object.

139
00:08:57.860 --> 00:09:00.950
Third question, how can you stop a timer?

140
00:09:01.490 --> 00:09:03.380
So we have used a clear interval.

141
00:09:03.590 --> 00:09:07.670
Remember that whenever you use set interval you can use.

142
00:09:07.940 --> 00:09:12.210
Let me share the code you can use without this diabetes.

143
00:09:12.230 --> 00:09:14.090
That is any reference we are taking.

144
00:09:14.330 --> 00:09:20.840
If you are using without reference, then you have no scope to stop the interval at a later stage.

145
00:09:21.110 --> 00:09:27.350
In case if you need to have a functionality to stop the interval, then certainly you will have to use

146
00:09:27.350 --> 00:09:28.460
an object, right?

147
00:09:28.460 --> 00:09:34.970
Which takes the reference off it and then you use clear interval on that object which will stop that

148
00:09:34.970 --> 00:09:35.480
interval.

149
00:09:35.510 --> 00:09:40.820
You can have multiple intervals and each interval can have different object which you can handle.

150
00:09:40.820 --> 00:09:43.280
That means you can start and stop any time.

151
00:09:43.970 --> 00:09:45.890
And the fourth question is.

152
00:09:46.040 --> 00:09:50.540
This is a kind of practical question that how will you create a digital clock?

153
00:09:50.840 --> 00:09:54.710
Now, when it comes to creating a digital clock, let me go back to the code.

154
00:09:55.580 --> 00:10:01.370
We have shown a counter now instead of this, if I simply say.

155
00:10:02.490 --> 00:10:05.790
New date, which will return date and time both.

156
00:10:05.790 --> 00:10:06.090
Right.

157
00:10:06.330 --> 00:10:13.230
You can format the time only, but at the moment I'm just saying new date every time after every second

158
00:10:13.230 --> 00:10:15.480
I just want to assign the new date.

159
00:10:15.900 --> 00:10:17.640
So let's go to the output.

160
00:10:17.970 --> 00:10:19.260
I'll say start timer.

161
00:10:20.540 --> 00:10:27.560
As you can see now, the clock is ticking because every second the new date is assigned and date also

162
00:10:27.560 --> 00:10:29.300
has the timer section.

163
00:10:29.360 --> 00:10:30.860
Of course, you can change this.

164
00:10:30.860 --> 00:10:37.040
You can give a format so that it shows only the clock, not the date along with it.

165
00:10:37.400 --> 00:10:37.760
Right.

166
00:10:37.790 --> 00:10:44.180
And certainly this has more functionality that is stopping the timer because we have already stopped

167
00:10:44.180 --> 00:10:45.290
the timer in the call.

168
00:10:45.590 --> 00:10:47.630
So this answers the fourth question.

169
00:10:47.840 --> 00:10:52.250
So this is it for this question related to the timer events.

