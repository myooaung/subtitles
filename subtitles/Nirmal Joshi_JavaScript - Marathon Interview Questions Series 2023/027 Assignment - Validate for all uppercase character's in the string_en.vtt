WEBVTT
1
00:00:10.060 --> 00:00:18.160
In this section, we are going to learn about how to validate for all uppercase characters in the entire

2
00:00:18.160 --> 00:00:18.910
string.

3
00:00:19.150 --> 00:00:25.300
We have already seen all the upper cases, but there was no space in between here.

4
00:00:25.300 --> 00:00:27.200
Even if we have words.

5
00:00:27.220 --> 00:00:32.470
Then also it should check that all the characters are in uppercase.

6
00:00:33.040 --> 00:00:39.670
So in this example, we have to check for uppercase letters, but that can be a space.

7
00:00:39.670 --> 00:00:45.160
Also, as we have to check that all the words are in uppercase.

8
00:00:45.460 --> 00:00:48.220
How will we create the pattern for this?

9
00:00:49.530 --> 00:00:55.600
We will use a carrot and a dollar anchor for the start and end of the string.

10
00:00:55.620 --> 00:01:03.570
We will also use range that is A to Z and slash s four spaces.

11
00:01:03.570 --> 00:01:07.230
That is A to Z slash s.

12
00:01:07.260 --> 00:01:16.440
As we have to consider all the words, we will use the plus quantifier with A to Z slash s for at least

13
00:01:16.440 --> 00:01:19.050
one or more occurrence of it.

14
00:01:19.050 --> 00:01:23.280
That is A to Z slash s plus.

15
00:01:23.280 --> 00:01:26.280
So the complete pattern will look like this.

16
00:01:28.130 --> 00:01:29.900
Let's try to code this now.

17
00:01:30.440 --> 00:01:32.690
Let's declare the string I'll select.

18
00:01:32.690 --> 00:01:34.000
STR is equal to.

19
00:01:34.010 --> 00:01:36.200
This is a test string.

20
00:01:37.500 --> 00:01:39.330
Now let's define the pattern.

21
00:01:39.690 --> 00:01:41.970
It's a slash, a carrot.

22
00:01:43.050 --> 00:01:45.210
A to Z slash s.

23
00:01:46.090 --> 00:01:50.140
Use a plus sign that is a quantifier and a dollar.

24
00:01:51.620 --> 00:01:55.700
Now we will say console.log and going to try the test.

25
00:01:57.430 --> 00:01:59.080
And let's run the code now.

26
00:02:01.130 --> 00:02:06.530
As you can see, the pattern has checked for all the characters, including words, and that's why it

27
00:02:06.530 --> 00:02:07.970
is returning true.

28
00:02:08.690 --> 00:02:13.190
Let's change a single character into lowercase and run the code again.

29
00:02:13.280 --> 00:02:17.210
I'm making e in lowercase in the test word.

30
00:02:19.530 --> 00:02:21.000
And now let's learn the code.

31
00:02:21.750 --> 00:02:24.360
Now it says that it is false.

32
00:02:25.230 --> 00:02:32.960
This pattern can also be used with few changes for other possibilities, like all digits in an entire

33
00:02:32.970 --> 00:02:36.150
string or maybe a lowercase validation.

