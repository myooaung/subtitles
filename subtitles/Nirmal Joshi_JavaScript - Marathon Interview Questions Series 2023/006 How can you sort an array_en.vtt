WEBVTT
1
00:00:00.060 --> 00:00:05.490
This question is about how can you start an ad which is off ad is category?

2
00:00:05.730 --> 00:00:08.250
There will be four related questions to this topic.

3
00:00:10.090 --> 00:00:13.750
Starting and added is a very common task in all programs.

4
00:00:13.960 --> 00:00:19.060
One may expect the arrangement of values in ascending or descending order.

5
00:00:19.330 --> 00:00:22.600
SART is the method used to sort elements.

6
00:00:22.870 --> 00:00:24.820
Let's check a code sample.

7
00:00:25.090 --> 00:00:27.280
Here I have an edit that I have written.

8
00:00:27.280 --> 00:00:29.170
Banana, orange grapes and apple.

9
00:00:29.410 --> 00:00:32.910
Now what I want to do is I want to start the array.

10
00:00:32.950 --> 00:00:37.630
So I'll say sorted, add a let etc. is equal to product.

11
00:00:37.630 --> 00:00:39.520
Start, start, start is the matter.

12
00:00:39.760 --> 00:00:42.250
Now let's display both etc..

13
00:00:44.360 --> 00:00:45.290
And products.

14
00:00:48.060 --> 00:00:49.350
And let's see what happens.

15
00:00:52.640 --> 00:00:56.100
So he has submitted returns sorted out.

16
00:00:56.450 --> 00:00:59.480
But at the same time, it starts the ad itself.

17
00:00:59.480 --> 00:01:05.960
That means that you can see that both SCADA and products are sorted.

18
00:01:06.290 --> 00:01:14.000
So as such, that is no meaning of the returned ADI, which is anyway is not a new copy.

19
00:01:14.030 --> 00:01:17.230
It actually is the reference of products A-D.

20
00:01:17.240 --> 00:01:21.260
So both Sarah and products, they are the same thing.

21
00:01:21.680 --> 00:01:25.730
So we better use only the product start.

22
00:01:25.730 --> 00:01:26.180
Start.

23
00:01:26.480 --> 00:01:30.470
That also serves the purpose because anyway, it's not returning a new ad.

24
00:01:30.770 --> 00:01:35.480
In case if you want to start in descending order, then that is a different way.

25
00:01:35.720 --> 00:01:43.610
In fact, there is a callback function back to the start method which we refer to as compare function.

26
00:01:43.940 --> 00:01:50.090
This compare function has two parameters between which the comparison happens.

27
00:01:50.390 --> 00:01:51.740
Let's check the code.

28
00:01:51.980 --> 00:01:56.030
With this compare function, I will see the function here.

29
00:01:56.870 --> 00:01:59.030
There will be two parameters and be.

30
00:02:00.670 --> 00:02:05.740
Now what I'm going to do is I'm going to display the value of A and B here.

31
00:02:06.160 --> 00:02:11.530
You can name whatever you want to, but there is always two parameter space to this callback function

32
00:02:11.530 --> 00:02:14.500
and this function we call as compare function.

33
00:02:14.500 --> 00:02:19.960
We have not given any name to this function, so it's a kind of anonymous function we are using.

34
00:02:20.350 --> 00:02:22.900
So now let's see the output.

35
00:02:24.800 --> 00:02:28.400
As you see, that orange banana is the first output.

36
00:02:28.430 --> 00:02:28.970
Grapes.

37
00:02:28.970 --> 00:02:30.890
Orange, apple grapes.

38
00:02:31.370 --> 00:02:34.910
So A and B does have different values passed to it.

39
00:02:35.150 --> 00:02:37.640
And internally it sorts the data.

40
00:02:37.940 --> 00:02:44.180
We do not need to get into that part what it does internally, but it must be going through a shortest

41
00:02:44.330 --> 00:02:45.860
method to sort the data.

42
00:02:46.430 --> 00:02:52.760
So we have two values and it compares and then it returns the sorted, adding That's how the start method

43
00:02:52.760 --> 00:02:53.270
works.

44
00:02:53.510 --> 00:02:58.310
Now this compare function can return three types of values.

45
00:03:00.230 --> 00:03:01.220
Less than zero.

46
00:03:01.610 --> 00:03:04.250
That is minus one more than zero.

47
00:03:04.700 --> 00:03:07.580
That is one or zero itself.

48
00:03:08.090 --> 00:03:17.750
For example, if compare function returns minus one, that means sarte will arrange ave before we are.

49
00:03:17.750 --> 00:03:23.180
In other words, it comes first and then the second value will be b.

50
00:03:23.450 --> 00:03:26.390
Let's check this with a practical example.

51
00:03:26.420 --> 00:03:32.360
I will say if A less than B, then I will return minus one.

52
00:03:32.390 --> 00:03:39.290
This means if the value of A there is a unique or core point comparison is happening here.

53
00:03:39.500 --> 00:03:45.110
So you don't need to worry about how the string is compared to string is also compared with greater

54
00:03:45.110 --> 00:03:50.420
than and less than sine because internally it has the unique called point values that those are checked.

55
00:03:50.930 --> 00:03:53.270
So here I say return minus one.

56
00:03:53.270 --> 00:04:00.320
That means if it is less, then b that means if banana is less than orange then it will be first value

57
00:04:00.320 --> 00:04:02.960
to be placed and B will be the second value.

58
00:04:03.110 --> 00:04:08.150
Similarly, you compare oranges and grapes, grapes and apple and so on.

59
00:04:08.450 --> 00:04:14.480
So here, if I run this, it does say that it has to be in ascending order.

60
00:04:14.720 --> 00:04:23.960
Now, in case if it is greater than B, that is if it is greater than B, then you return one.

61
00:04:24.320 --> 00:04:34.400
This means when you return, one becomes first and then E, and if you say if it is equal to be, that

62
00:04:34.400 --> 00:04:37.970
means they both are equal, then do not change the place.

63
00:04:38.660 --> 00:04:41.300
Let A and B remain unchanged.

64
00:04:41.630 --> 00:04:44.420
Now we have a kind of ascending order chord here.

65
00:04:44.570 --> 00:04:49.100
Let's run this chord again and see what is the output.

66
00:04:49.130 --> 00:04:53.960
It still says that the ETA is sorted in ascending order.

67
00:04:54.320 --> 00:04:58.520
Imagine that you want to start this, add it in descending order.

68
00:04:58.550 --> 00:04:59.420
What will you do?

69
00:04:59.510 --> 00:05:03.830
You will say that when it is less, then b return one.

70
00:05:03.980 --> 00:05:06.110
That means let me come first.

71
00:05:06.320 --> 00:05:08.780
That is, let the greater value come first.

72
00:05:09.050 --> 00:05:09.410
Right.

73
00:05:09.740 --> 00:05:15.650
In case of the second that is eager to then B again, I am going to do the reverse.

74
00:05:15.980 --> 00:05:16.370
Right.

75
00:05:16.880 --> 00:05:19.640
And of course, for equality it will be zero.

76
00:05:20.150 --> 00:05:23.390
Now let's run the code and see what is the output.

77
00:05:23.810 --> 00:05:24.470
You see this?

78
00:05:24.740 --> 00:05:27.800
It is sorted in a descending order.

79
00:05:28.250 --> 00:05:33.560
So by default, when you want to start the array in ascending order, you simply say, sorry, that's

80
00:05:33.560 --> 00:05:33.710
it.

81
00:05:34.340 --> 00:05:40.610
But the moment you want to add it to be sorted in descending order, you will use the compare function,

82
00:05:40.610 --> 00:05:43.430
which is a callback function of sort matter.

83
00:05:43.730 --> 00:05:49.820
Not only this, imagine that instead of this string we have a numeric add.

84
00:05:50.510 --> 00:05:55.640
Let's say I have 45, 23, ten.

85
00:05:57.010 --> 00:05:59.950
89 and five different values we have here.

86
00:06:00.820 --> 00:06:07.210
I'll just keep this score at the moment, but comment it and then I'll say console.log log.

87
00:06:08.300 --> 00:06:10.050
Products not sought.

88
00:06:10.790 --> 00:06:12.110
We want to sort the area.

89
00:06:12.620 --> 00:06:15.230
Let me change the name to price.

90
00:06:15.380 --> 00:06:16.910
Not products, but price.

91
00:06:17.480 --> 00:06:17.840
Okay.

92
00:06:17.840 --> 00:06:18.870
I'm saving this now.

93
00:06:19.460 --> 00:06:22.820
And the last statement I have console.log that also I removed.

94
00:06:23.330 --> 00:06:24.620
Now, here is the code we have.

95
00:06:25.100 --> 00:06:27.920
We have the price added and we are sorting it.

96
00:06:28.520 --> 00:06:35.810
Now, when you run this, the sorting is done, but you see file is not actually sorted properly.

97
00:06:35.810 --> 00:06:37.880
It should have been at the first place.

98
00:06:38.270 --> 00:06:45.170
The reason is, if you try to sort a numeric array with only smart method, then it is going to consider

99
00:06:45.500 --> 00:06:52.700
the Unicode string value if there is no compare function given and because all elements are treated

100
00:06:52.880 --> 00:06:56.600
as string, so the output will not be as desired.

101
00:06:56.900 --> 00:06:59.570
So this is not sorting as numeric values.

102
00:06:59.810 --> 00:07:03.050
Instead, it is sorted as a string.

103
00:07:03.170 --> 00:07:09.200
So now we are going to give the function that is the compare function and we will try it again.

104
00:07:09.200 --> 00:07:12.440
So I'll just remove this from this place, this line.

105
00:07:12.710 --> 00:07:13.550
I'll say Price.

106
00:07:13.550 --> 00:07:18.680
Nazar, I want to start the values in, of course, ascending order.

107
00:07:18.690 --> 00:07:23.060
So to say when is less, then be let it be the first.

108
00:07:23.750 --> 00:07:26.870
Otherwise, if it is greater, let me be the second.

109
00:07:26.870 --> 00:07:28.370
That is a be the first.

110
00:07:28.370 --> 00:07:37.460
And if is equal to beat, then I took return zero and at the end will simply display the ADI.

111
00:07:37.880 --> 00:07:39.170
That in name is Price.

112
00:07:40.650 --> 00:07:44.340
So now we have this address starting with numeric.

113
00:07:44.520 --> 00:07:45.540
Let's try to run.

114
00:07:48.080 --> 00:07:51.320
Now you see this is showing the pneumatic sorting.

115
00:07:51.680 --> 00:07:55.820
In case if you want to sort this ADI in reverse order, right.

116
00:07:55.820 --> 00:07:59.510
In descending order, then you can use minus one here.

117
00:07:59.930 --> 00:08:01.340
You can use positive.

118
00:08:01.340 --> 00:08:02.330
That is more than zero.

119
00:08:02.330 --> 00:08:05.130
That is one here and zero will remain as it is.

120
00:08:05.150 --> 00:08:08.570
So now you will have the sorting in descending.

121
00:08:08.570 --> 00:08:09.980
But this is the numeric sorting.

122
00:08:10.280 --> 00:08:15.020
So compare function is needed when you want to start a numeric add.

123
00:08:15.410 --> 00:08:18.860
Now let's discuss related questions of this topic.

124
00:08:19.070 --> 00:08:23.240
The first question is what will be the output in and add?

125
00:08:23.240 --> 00:08:26.300
It has undefined while sorting the values.

126
00:08:26.600 --> 00:08:29.840
So let's say this area has undefined value in between.

127
00:08:30.110 --> 00:08:31.580
What will happen in this case?

128
00:08:31.730 --> 00:08:35.380
Undefined is always placed at the end of the area.

129
00:08:35.570 --> 00:08:39.710
So if I simply say console.log products not start.

130
00:08:40.280 --> 00:08:40.789
That's it.

131
00:08:41.210 --> 00:08:42.799
Let's run this and see what happens.

132
00:08:43.309 --> 00:08:45.260
You see, undefined comes at the end.

133
00:08:45.470 --> 00:08:47.960
So undefined value is never sorted.

134
00:08:48.500 --> 00:08:52.940
Sort matter places are shifts, all the undefined at the end.

135
00:08:52.940 --> 00:08:56.420
And then it does the sorting for the rest of the array.

136
00:08:56.630 --> 00:09:01.100
Now the second question is how will you sort an object literal?

137
00:09:01.280 --> 00:09:02.840
So here is the object literal.

138
00:09:02.960 --> 00:09:05.510
Now, the next thing is we need to start.

139
00:09:05.720 --> 00:09:09.350
We are going to use compare function because this is not a normal value.

140
00:09:09.350 --> 00:09:09.650
Right.

141
00:09:09.650 --> 00:09:12.640
And anyway, we have to start the numeric value salary.

142
00:09:12.680 --> 00:09:20.330
Now, every time the sort method goes through, it is going to pass the first object literal to A and

143
00:09:20.330 --> 00:09:22.040
this second object later to be.

144
00:09:22.220 --> 00:09:26.810
So every time both A and B will have different object literals itself.

145
00:09:27.020 --> 00:09:33.890
So the only thing you have to take care about is you put the if condition, you say eight dot salary.

146
00:09:34.010 --> 00:09:35.860
If it is less then dart salary.

147
00:09:35.870 --> 00:09:38.540
Let's say we want to start right now in ascending order.

148
00:09:38.870 --> 00:09:45.770
So the same thing you are going to write, you'll see a return minus one if e dot salary is more than

149
00:09:46.070 --> 00:09:47.180
berhad's salary.

150
00:09:47.840 --> 00:09:51.230
Why do you want to do you want to return one?

151
00:09:51.680 --> 00:10:00.380
And if they are equal, Edward, salary equals to beat out salary, then you are going to return zero.

152
00:10:00.740 --> 00:10:02.690
Now this object literal.

153
00:10:02.690 --> 00:10:07.340
When this is sorted, it is going to start the entire object itself.

154
00:10:07.370 --> 00:10:12.170
It won't happen that only the salary field will be sorted and this will be changed.

155
00:10:12.290 --> 00:10:14.660
That is for employee number 1001.

156
00:10:14.840 --> 00:10:16.580
There might be this salary.

157
00:10:16.610 --> 00:10:21.590
It won't happen because both A and B are having the object literally itself.

158
00:10:21.770 --> 00:10:25.390
So when this thing is sorted, the entire object is sorted.

159
00:10:25.400 --> 00:10:26.990
Let's try this and see what happens.

160
00:10:27.170 --> 00:10:29.810
Let's try to display the employees at a.

161
00:10:31.850 --> 00:10:35.010
You see this 1002 is 2200.

162
00:10:35.030 --> 00:10:38.240
In the data also, we have one zero 0 to 2200.

163
00:10:38.390 --> 00:10:41.930
So this is how you can start a field of an object literal.

164
00:10:42.230 --> 00:10:45.310
Third question is how will you support a numeric addy?

165
00:10:45.650 --> 00:10:51.410
So we have already seen this that when it comes to starting a numeric addy, you have to make sure that

166
00:10:51.410 --> 00:10:55.580
you give the compiler function, otherwise it will be sorted as a string.

167
00:10:57.800 --> 00:11:03.020
And the fourth question is sort all values of ADI in descending order.

168
00:11:03.050 --> 00:11:08.450
So again, you will have to use the compare function and in case of returning the value wherever you

169
00:11:08.450 --> 00:11:09.650
return, minus one.

170
00:11:10.130 --> 00:11:16.010
Instead of that, you say return one and where you are returning one, just say returning minus one.

171
00:11:16.310 --> 00:11:19.670
And that's how you start the A2 in descending order.

