1
00:00:00,150 --> 00:00:06,720
In this section, we are discussing a newer way to declare a string, which is introduced with the newer

2
00:00:06,720 --> 00:00:08,700
version of Act Musgrave six.

3
00:00:08,700 --> 00:00:09,930
That is Essex.

4
00:00:10,410 --> 00:00:14,100
It is known as the template string or template literal.

5
00:00:14,550 --> 00:00:19,410
Let's talk about how can we declare a template string or template literal?

6
00:00:19,860 --> 00:00:25,740
If you have to declare a string variable with template literal, then you can use the back ticks.

7
00:00:26,010 --> 00:00:33,900
So I will say let STR is equal to and I am not new to JavaScript.

8
00:00:34,590 --> 00:00:35,850
Let me just display this.

9
00:00:35,850 --> 00:00:37,110
I'll say console.log.

10
00:00:38,140 --> 00:00:44,310
SDR So if I run this, it'll display the string as we normally expect.

11
00:00:44,700 --> 00:00:46,800
Then what's the advantage of using this?

12
00:00:47,220 --> 00:00:53,400
As long as the advantage of template string is concerned as it sees that it is a template literal.

13
00:00:53,940 --> 00:00:59,100
It gives you a way to display the expression inside the back itself.

14
00:00:59,640 --> 00:01:06,150
Let me show you that if I have a variable here, let's say I have a variable which is having a value

15
00:01:06,150 --> 00:01:06,720
90.

16
00:01:07,590 --> 00:01:11,580
Now I just want to display the value and let's say here I have some string.

17
00:01:11,580 --> 00:01:19,630
That value of a is ideally what happens when you have double quarter single code, you try to end and

18
00:01:19,650 --> 00:01:22,590
then you try to either put a comma or maybe you join it.

19
00:01:23,010 --> 00:01:28,290
If you are putting it inside console.log, you will add a comma, but if you have to join the string,

20
00:01:28,290 --> 00:01:33,210
you are going to use the plus sign or in a way you are going to concatenate the string.

21
00:01:33,780 --> 00:01:36,860
But here you don't need that inside the back date.

22
00:01:37,140 --> 00:01:41,880
If you have to display the value of E, you can write the E here.

23
00:01:42,120 --> 00:01:45,270
But if I write this way, it won't refer to the value.

24
00:01:45,510 --> 00:01:52,110
So what you have to do is you have to cover the expression inside the curly brackets and use a dollar

25
00:01:52,110 --> 00:01:54,180
sign before the curly bracket.

26
00:01:54,840 --> 00:01:57,570
If I run this, let me clear the console and run.

27
00:01:58,350 --> 00:02:01,770
You see that it displays value of a is 90.

28
00:02:02,040 --> 00:02:07,710
So this is one advantage that you can display the expression inside the back.

29
00:02:08,190 --> 00:02:12,390
You don't need to end the back dig and then you join the value.

30
00:02:13,080 --> 00:02:14,460
This is one advantage.

31
00:02:14,700 --> 00:02:20,880
The second advantage with back take that is the template literally is the way you have return inside

32
00:02:20,880 --> 00:02:23,100
of the string or inside a variable.

33
00:02:23,490 --> 00:02:25,110
It will appear as it is.

34
00:02:25,500 --> 00:02:26,910
Let me show you that as well.

35
00:02:27,210 --> 00:02:30,360
Say, for example, here, I'll say I'll remove.

36
00:02:30,360 --> 00:02:31,260
This is now.

37
00:02:33,310 --> 00:02:37,090
This is a line where I just want to say this is.

38
00:02:37,420 --> 00:02:40,690
Then I press enter, observe this in between.

39
00:02:40,690 --> 00:02:43,540
I have not yet closed it on the same line.

40
00:02:43,540 --> 00:02:45,580
I pressed Enter in between.

41
00:02:46,000 --> 00:02:49,090
Now I am not giving any space.

42
00:02:49,090 --> 00:02:51,040
So let's say you just two spaces here.

43
00:02:51,580 --> 00:02:54,070
This is second line.

44
00:02:54,610 --> 00:02:57,640
And now I give some space here.

45
00:02:58,450 --> 00:03:04,600
I say this is the third one, clearing the console and running this code.

46
00:03:04,600 --> 00:03:12,190
Again, as you see the way I have done, whatever spaces I give, whatever new line scatters, return

47
00:03:12,190 --> 00:03:13,390
stabs or whatever.

48
00:03:13,720 --> 00:03:19,870
Each and every format you have assigned to the string in the very same format, the string is displayed.

49
00:03:20,680 --> 00:03:28,120
So when you have to store the format, the special characters like spaces are new lines as it is.

50
00:03:28,240 --> 00:03:30,310
You don't need any skip sequence.

51
00:03:30,550 --> 00:03:31,720
Still, it works fine.

52
00:03:31,900 --> 00:03:35,500
So this is another advantage when you are using the template string.

53
00:03:35,830 --> 00:03:42,730
Ideally you see that when we followed the E6 index, programmers prefer to have this syntax that is

54
00:03:42,730 --> 00:03:43,810
using the back tick.

55
00:03:43,960 --> 00:03:49,660
It's easy to deal with the expressions and the string format as it is it refers.

56
00:03:51,730 --> 00:03:53,800
Let's discuss a few questions here.

57
00:03:53,800 --> 00:03:57,850
Anyway, I have answered the questions inside the call itself.

58
00:03:58,240 --> 00:04:01,090
The first question is what is a template literal?

59
00:04:01,540 --> 00:04:04,000
You call it template literal or template string.

60
00:04:04,480 --> 00:04:09,670
So it is basically a newer way to declare the string variable in JavaScript.

61
00:04:10,090 --> 00:04:14,950
Not only declaring a string variable, you can directly display a string with back to say.

62
00:04:14,950 --> 00:04:20,680
For example, let's say I don't declare any variable here this very string I just cut.

63
00:04:22,290 --> 00:04:24,570
And based inside this console log.

64
00:04:25,020 --> 00:04:26,430
I don't have any variable.

65
00:04:26,430 --> 00:04:26,940
That's fine.

66
00:04:28,200 --> 00:04:29,610
Let me clear this again.

67
00:04:29,610 --> 00:04:30,060
I run.

68
00:04:30,510 --> 00:04:32,100
The output is going to be the same.

69
00:04:32,520 --> 00:04:38,940
So the point is when you have to deal with strings, this is a newer way and that is the template literal

70
00:04:38,940 --> 00:04:40,320
or template string.

71
00:04:41,640 --> 00:04:47,880
The second question is how will you display a value or an expression inside a template string?

72
00:04:48,390 --> 00:04:54,780
Now, as you see in this piece of code that when you have to refer the value of a, you use the dollar

73
00:04:54,780 --> 00:04:56,340
and the curly brackets.

74
00:04:56,460 --> 00:04:58,740
So it will execute the expression.

75
00:05:00,280 --> 00:05:04,660
The third question is what is the advantage of using the template string?

76
00:05:05,290 --> 00:05:08,050
As I mentioned, these are the two advantages.

77
00:05:08,200 --> 00:05:12,390
One is that you can execute the expression without the end of the back deck.

78
00:05:12,580 --> 00:05:19,420
And the second is this one where the string was in a different format, the exact format of string,

79
00:05:19,420 --> 00:05:22,930
the way you have returned, the string it displays as it is.

