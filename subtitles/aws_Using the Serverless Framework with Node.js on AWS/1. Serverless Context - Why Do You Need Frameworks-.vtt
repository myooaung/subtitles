WEBVTT
1
00:00:00.000 --> 00:00:05.720
Hello, my name is Fernando Medina Corey, and I'm a data engineer.

2
00:00:05.720 --> 00:00:09.593
Welcome to my course on Using the Serverless Framework with Node.

3
00:00:09.593 --> 00:00:10.649
js on AWS.

4
00:00:10.649 --> 00:00:16.666
Let's take a look at what we'll be doing in module one, the State of Serverless.

5
00:00:16.666 --> 00:00:19.781
In this module, we'll start by looking at prerequisites for this course,

6
00:00:19.781 --> 00:00:23.039
so you know what to expect as you work on projects and listen to modules.

7
00:00:23.039 --> 00:00:23.516
After that,

8
00:00:23.516 --> 00:00:25.665
we'll look at some of the problems that serverless

9
00:00:25.665 --> 00:00:27.333
application developers commonly see,

10
00:00:27.333 --> 00:00:29.969
and how serverless frameworks can help with those.

11
00:00:29.969 --> 00:00:33.001
We'll touch on a few common serverless frameworks to give you an

12
00:00:33.001 --> 00:00:37.153
idea of the landscape before we really hone in on the benefits of

13
00:00:37.153 --> 00:00:38.764
the serverless framework itself.

14
00:00:38.764 --> 00:00:41.742
Then, we'll overview the concepts we'll be learning throughout this course,

15
00:00:41.742 --> 00:00:43.843
and how you can apply them to your work.

16
00:00:43.843 --> 00:00:46.473
And finally, we'll look at the schedule for the rest of the course,

17
00:00:46.473 --> 00:00:49.568
including the project we'll be building and what new skills

18
00:00:49.568 --> 00:00:51.821
we'll have by the end of this course.

19
00:00:51.821 --> 00:00:52.932
So let's get started.

20
00:00:52.932 --> 00:00:55.944
Though we will be going through demo projects at a granular level,

21
00:00:55.944 --> 00:00:59.486
it will be useful to have some background experience before taking this course.

22
00:00:59.486 --> 00:01:02.323
Specifically, you should already have an AWS account,

23
00:01:02.323 --> 00:01:04.396
and understand some AWS basics.

24
00:01:04.396 --> 00:01:07.649
You should also probably understand some basic JavaScript syntax,

25
00:01:07.649 --> 00:01:09.418
as we'll be working with Node.

26
00:01:09.418 --> 00:01:11.010
js heavily in this course.

27
00:01:11.010 --> 00:01:13.861
Because we'll be relying on AWS lambda heavily in this course,

28
00:01:13.861 --> 00:01:16.118
it will be useful for you to have a better understanding of it.

29
00:01:16.118 --> 00:01:17.190
If you haven't already,

30
00:01:17.190 --> 00:01:22.417
I'd suggest taking my Introduction to AWS Lambda course here on Pluralsight.

31
00:01:22.417 --> 00:01:22.951
And finally,

32
00:01:22.951 --> 00:01:25.352
some exposure to the command-line will really help you

33
00:01:25.352 --> 00:01:28.011
succeed when we're working on examples.

34
00:01:28.011 --> 00:01:31.261
I want to quickly clarify something that may already have some of you confused.

35
00:01:31.261 --> 00:01:33.733
There is a distinction between the serverless framework,

36
00:01:33.733 --> 00:01:36.594
which is the specific framework we'll be using in

37
00:01:36.594 --> 00:01:38.463
this course provided by serverless.

38
00:01:38.463 --> 00:01:41.946
com, and serverless frameworks more generally,

39
00:01:41.946 --> 00:01:44.597
which are a general term for any framework that focuses on the

40
00:01:44.597 --> 00:01:48.002
Functions as a Service or 'Serverless' paradigm.

41
00:01:48.002 --> 00:01:49.459
With that out of the way,

42
00:01:49.459 --> 00:01:54.846
let's take a really brief review of traditional versus serverless architectures.

43
00:01:54.846 --> 00:01:57.550
This course will cover very few of the basic

44
00:01:57.550 --> 00:01:58.752
concepts of serverless applications.

45
00:01:58.752 --> 00:02:01.736
For more on that, I'd suggest again my AWS developer course,

46
00:02:01.736 --> 00:02:03.267
An Introduction to AWS Lambda.

47
00:02:03.267 --> 00:02:07.682
But for now, here's some mandatory context on the need for serverless frameworks.

48
00:02:07.682 --> 00:02:11.563
In more traditional applications, you see a tendency to host entire applications,

49
00:02:11.563 --> 00:02:14.786
or at least particular application components,

50
00:02:14.786 --> 00:02:15.392
on managed servers.

51
00:02:15.392 --> 00:02:17.137
You might have business logic, a relational database,

52
00:02:17.137 --> 00:02:20.897
and even access keys all set up on the same physical or virtual server.

53
00:02:20.897 --> 00:02:22.203
In the serverless model,

54
00:02:22.203 --> 00:02:26.433
you might break up each component of your application into separate services,

55
00:02:26.433 --> 00:02:27.947
all handling particular tasks.

56
00:02:27.947 --> 00:02:31.652
One might manage notifications, another might deal with database updates,

57
00:02:31.652 --> 00:02:34.136
and another might manage file storage and retrieval.

58
00:02:34.136 --> 00:02:36.639
Now, each of these components would be isolated services,

59
00:02:36.639 --> 00:02:38.769
each running their own serverless functions.

60
00:02:38.769 --> 00:02:42.065
Now, this is a great benefit to interoperability in separation of concerns,

61
00:02:42.065 --> 00:02:45.942
but it does add some organizational challenges to application development.

62
00:02:45.942 --> 00:02:47.371
Now this is the interesting part,

63
00:02:47.371 --> 00:02:51.875
and where serverless frameworks start to show their utility in how they

64
00:02:51.875 --> 00:02:54.539
organize and standardize this development process.

65
00:02:54.539 --> 00:02:56.914
I'm going to assume that you're already on board with the

66
00:02:56.914 --> 00:02:57.819
benefits of serverless infrastructures,

67
00:02:57.819 --> 00:03:01.584
like only paying for what you use in terms of your server utilization,

68
00:03:01.584 --> 00:03:04.446
and decreased server configuration and management times.

69
00:03:04.446 --> 00:03:07.239
I will try and convince you that serverless frameworks can be a great

70
00:03:07.239 --> 00:03:10.314
way to help the architecture serverless applications.

71
00:03:10.314 --> 00:03:13.301
So what benefits do you get from using a serverless framework?

72
00:03:13.301 --> 00:03:17.190
The first is a common set of standards and organization for your code base.

73
00:03:17.190 --> 00:03:20.988
This is especially important in a micro-service-oriented world when you

74
00:03:20.988 --> 00:03:24.184
break out more and more pieces of code to operate separate,

75
00:03:24.184 --> 00:03:25.195
but cooperative services.

76
00:03:25.195 --> 00:03:27.909
With a standardized code base, it becomes easier to read,

77
00:03:27.909 --> 00:03:29.734
review, and maintain the code that you write,

78
00:03:29.734 --> 00:03:32.425
which is critical to the development process.

79
00:03:32.425 --> 00:03:33.637
The next benefit is tooling.

80
00:03:33.637 --> 00:03:36.134
Frameworks give you a powerful set of tools to

81
00:03:36.134 --> 00:03:39.691
interact with infrastructure providers, scaffold your code and services,

82
00:03:39.691 --> 00:03:43.098
and also add in functionality as you see fit.

83
00:03:43.098 --> 00:03:45.670
One of the other primary benefits of using frameworks

84
00:03:45.670 --> 00:03:47.246
is the community surrounding them.

85
00:03:47.246 --> 00:03:49.086
When building projects within a framework,

86
00:03:49.086 --> 00:03:51.601
you'll have the benefit of having a group of others to ask questions,

87
00:03:51.601 --> 00:03:55.441
share solutions, and springboard your development process.

88
00:03:55.441 --> 00:03:58.307
So this still leaves the question, why the serverless framework?

89
00:03:58.307 --> 00:03:59.650
What else is out there?

90
00:03:59.650 --> 00:04:03.099
Some companies develop and support their own frameworks, like Bustle.

91
00:04:03.099 --> 00:04:04.145
com's shep.

92
00:04:04.145 --> 00:04:07.111
You also have frameworks like Sparta,

93
00:04:07.111 --> 00:04:09.574
which is specifically for development in Go,

94
00:04:09.574 --> 00:04:12.073
or the AWS and Python-only framework, Zappa.

95
00:04:12.073 --> 00:04:14.542
There are certainly a variety of frameworks,

96
00:04:14.542 --> 00:04:17.115
and each of these might suit different use cases,

97
00:04:17.115 --> 00:04:20.272
so how do we settle on a single framework?

98
00:04:20.272 --> 00:04:22.835
One of the first things to consider when choosing a framework is

99
00:04:22.835 --> 00:04:25.061
whether or not it offers good core functionality,

100
00:04:25.061 --> 00:04:27.215
and does things like manage your code base,

101
00:04:27.215 --> 00:04:30.110
or manage the deployments to whatever infrastructure provider you're using.

102
00:04:30.110 --> 00:04:33.391
You'll also want to know the level of support for multiple

103
00:04:33.391 --> 00:04:34.672
languages that the framework covers,

104
00:04:34.672 --> 00:04:38.047
or at least know that it works well with your development language.

105
00:04:38.047 --> 00:04:38.304
Additionally,

106
00:04:38.304 --> 00:04:40.619
you want to make sure it integrates with the

107
00:04:40.619 --> 00:04:43.459
infrastructure as a service provider that you use.

108
00:04:43.459 --> 00:04:46.509
And finally, the framework itself should either offer significant functionality,

109
00:04:46.509 --> 00:04:51.529
or be able to improve and adapt itself through things like plug-ins.

110
00:04:51.529 --> 00:04:58.000
Next, let's take a look at why we might use the serverless framework specifically.

