WEBVTT
1
00:00:02.406 --> 00:00:06.116
If we want to design applications that are resilient to provider failure,

2
00:00:06.116 --> 00:00:09.554
we need to start thinking about how to use infrastructure providers redundantly.

3
00:00:09.554 --> 00:00:12.084
Let's take a look at what I mean.

4
00:00:12.084 --> 00:00:15.103
First, let's imagine we have a sample serverless service.

5
00:00:15.103 --> 00:00:20.110
This service relies on AWS DynamoDB tables and the API Gateway.

6
00:00:20.110 --> 00:00:23.750
Let's say we're running our application code one day and AWS has an

7
00:00:23.750 --> 00:00:25.962
outage related to the services that we're using.

8
00:00:25.962 --> 00:00:28.863
We decide that the outage is bad enough that next time we need to

9
00:00:28.863 --> 00:00:31.374
try and replicate our service on another provider.

10
00:00:31.374 --> 00:00:33.346
So what do we do to prepare for this?

11
00:00:33.346 --> 00:00:36.610
First, there's the issue of replicating the data between data stores.

12
00:00:36.610 --> 00:00:39.852
For now let's assume that we take advantage of a solution that dual

13
00:00:39.852 --> 00:00:42.194
writes the data and that we're able to do this.

14
00:00:42.194 --> 00:00:45.860
The next problem is that the function code we're using is written

15
00:00:45.860 --> 00:00:49.241
specific for AWS and relies on AWS libraries and SDKs.

16
00:00:49.241 --> 00:00:51.081
We can't assume that another provider will be able

17
00:00:51.081 --> 00:00:54.628
to work with our service code, so how do we solve this problem?

18
00:00:54.628 --> 00:00:57.352
Well, we need to abstract our code.

19
00:00:57.352 --> 00:01:00.643
Rather than writing functions and services that only work with specific writers,

20
00:01:00.643 --> 00:01:05.337
we can write more generalized code that relies on a build and configuration

21
00:01:05.337 --> 00:01:08.040
process to be bundled with infrastructure specific libraries.

22
00:01:08.040 --> 00:01:10.670
That way if one infrastructure provider goes under,

23
00:01:10.670 --> 00:01:14.152
we're still able to keep our service running on another provider.

24
00:01:14.152 --> 00:01:16.291
When we think about building applications like this that

25
00:01:16.291 --> 00:01:17.477
can integrate with multiple clouds,

26
00:01:17.477 --> 00:01:21.072
one of the key issues is how we get these clouds to work together.

27
00:01:21.072 --> 00:01:25.084
Fortunately for us, the folks at Serverless Inc have been working on that too.

28
00:01:25.084 --> 00:01:28.791
In August 2017, Serverless Inc, the company behind the serverless framework,

29
00:01:28.791 --> 00:01:32.007
announced a tool that they're backing called the event gateway.

30
00:01:32.007 --> 00:01:35.857
This tool allows you to share cross cloud functions and events with AWS Lambda,

31
00:01:35.857 --> 00:01:39.807
Microsoft Azure, IBM Open Whisk, and Google Cloud Platform.

32
00:01:39.807 --> 00:01:41.862
Now this sounds perfect for developing these

33
00:01:41.862 --> 00:01:42.904
infrastructure independent applications,

34
00:01:42.904 --> 00:01:45.527
but because this tool is so new,

35
00:01:45.527 --> 00:01:48.070
I won't be covering it in detail within this course.

36
00:01:48.070 --> 00:01:51.034
But let's quickly take a high level look at how it works.

37
00:01:51.034 --> 00:01:52.063
With the event gateway,

38
00:01:52.063 --> 00:01:54.157
you can collect events from multiple clouds and

39
00:01:54.157 --> 00:01:55.624
centralize them through the tool.

40
00:01:55.624 --> 00:01:58.409
This allows you to receive the events on any cloud,

41
00:01:58.409 --> 00:02:00.201
not just the one they originated on.

42
00:02:00.201 --> 00:02:03.549
This gives you some incredible flexibility when it comes to determining which

43
00:02:03.549 --> 00:02:07.321
cloud should deal with which events under what circumstances.

44
00:02:07.321 --> 00:02:09.600
It also allows you to trigger functions on any cloud to

45
00:02:09.600 --> 00:02:11.836
respond to events from any cloud.

46
00:02:11.836 --> 00:02:12.292
Additionally,

47
00:02:12.292 --> 00:02:16.766
it can centralize these events from disparate cloud providers to get a better

48
00:02:16.766 --> 00:02:18.863
understanding of all the data flowing through everywhere.

49
00:02:18.863 --> 00:02:23.432
Teams can take a closer look at whatever events they'd like and even add

50
00:02:23.432 --> 00:02:26.205
additional functions and services on top of those existing events.

51
00:02:26.205 --> 00:02:28.166
Now to me this all sounds super exciting,

52
00:02:28.166 --> 00:02:32.382
but be sure to check back in on this project after folks have started

53
00:02:32.382 --> 00:02:34.769
testing its abilities and adopting it for their purposes.

54
00:02:34.769 --> 00:02:38.257
As for any new project, only time will really tell how it evolves.

55
00:02:38.257 --> 00:02:38.509
Next,

56
00:02:38.509 --> 00:02:41.537
let's take a look at some components and tools that we'll need

57
00:02:41.537 --> 00:02:44.018
while developing multi-platform services.

58
00:02:44.018 --> 00:02:45.076
For any multi-platform service,

59
00:02:45.076 --> 00:02:47.954
you're going to need to start with generalized function code.

60
00:02:47.954 --> 00:02:51.347
The code will perform the core business logic of your application.

61
00:02:51.347 --> 00:02:54.196
It will need to be supported by platform-specific libraries,

62
00:02:54.196 --> 00:02:57.600
enrich the functionality on a platform-specific basis.

63
00:02:57.600 --> 00:03:00.897
This might range from libraries you develop to help work with

64
00:03:00.897 --> 00:03:03.775
infrastructure providers to tooling that you use to help monitor

65
00:03:03.775 --> 00:03:06.219
code on one provider versus another.

66
00:03:06.219 --> 00:03:09.473
You'll also likely need the set of SDKs specific to the

67
00:03:09.473 --> 00:03:10.684
infrastructure provider you're working with.

68
00:03:10.684 --> 00:03:13.762
You may need to use your own libraries to abstract these

69
00:03:13.762 --> 00:03:16.257
SDKs and make generalized code possible.

70
00:03:16.257 --> 00:03:16.937
And finally,

71
00:03:16.937 --> 00:03:20.326
you'll have to evaluate what specific IaaS services that you'll

72
00:03:20.326 --> 00:03:23.270
be able to use to substitute for one another.

73
00:03:23.270 --> 00:03:24.926
For example, you'll need to ask the question,

74
00:03:24.926 --> 00:03:27.904
what can you use to substitute for the API Gateway or

75
00:03:27.904 --> 00:03:29.523
DynamoDB on a separate provider?

76
00:03:29.523 --> 00:03:31.910
But right now all of this is kind of conceptual.

77
00:03:31.910 --> 00:03:32.817
So in a moment,

78
00:03:32.817 --> 00:03:40.000
we'll take a look at some specific ways we can improve the resilience of our applications.

