1
00:00:02,276 --> 00:00:03,477
Now if we go back to the terminal,

2
00:00:03,477 --> 00:00:07,389
let's take a look at how we can install the dependencies for this project.

3
00:00:07,389 --> 00:00:07,608
First,

4
00:00:07,608 --> 00:00:10,448
just double-check that you have the correct version of npm and Node running.

5
00:00:10,448 --> 00:00:14,315
You can use npm --version to see the version of npm.

6
00:00:14,315 --> 00:00:18,036
You can also use node --version to see the correct version of Node.

7
00:00:18,036 --> 00:00:20,433
You should be seeing Node version 6.

8
00:00:20,433 --> 00:00:20,776
10.

9
00:00:20,776 --> 00:00:22,488
3 and npm version 3.

10
00:00:22,488 --> 00:00:22,831
10.

11
00:00:22,831 --> 00:00:23,173
10.

12
00:00:23,173 --> 00:00:25,893
While it is possible that you'll be able to install the

13
00:00:25,893 --> 00:00:27,583
dependencies correctly using a different version,

14
00:00:27,583 --> 00:00:30,536
I'd suggest using these just to keep our system

15
00:00:30,536 --> 00:00:32,570
requirements as identical as possible.

16
00:00:32,570 --> 00:00:33,800
As with any npm package,

17
00:00:33,800 --> 00:00:36,420
you'll be able to install your dependencies using npm install.

18
00:00:36,420 --> 00:00:38,918
This will reference the information in the package.

19
00:00:38,918 --> 00:00:39,715
json file.

20
00:00:39,715 --> 00:00:42,448
This should install our dependencies fairly quickly,

21
00:00:42,448 --> 00:00:46,568
as the only dependency we're really using is the UUID dependency that we

22
00:00:46,568 --> 00:00:48,497
looked at earlier when reviewing our function code.

23
00:00:48,497 --> 00:00:51,163
Now you're ready to deploy your application.

24
00:00:51,163 --> 00:00:53,296
So go ahead and use sls deploy.

25
00:00:53,296 --> 00:00:55,125
You could also use serverless deploy.

26
00:00:55,125 --> 00:00:55,955
When this is completed,

27
00:00:55,955 --> 00:00:59,290
you should see a variety of endpoints that have been created by the framework.

28
00:00:59,290 --> 00:01:01,764
You should also see that these functions were created

29
00:01:01,764 --> 00:01:03,096
in accordance with the endpoints.

30
00:01:03,096 --> 00:01:05,049
Go ahead and copy down the API URL,

31
00:01:05,049 --> 00:01:08,134
because we'll be using that to test the API in a moment.

32
00:01:08,134 --> 00:01:10,836
Now let's take a quick look at the AWS console.

33
00:01:10,836 --> 00:01:15,023
I just want to show you that our DynamoDB table is created as expected.

34
00:01:15,023 --> 00:01:19,202
Now let's scroll down slightly and go to the DynamoDB section of the console.

35
00:01:19,202 --> 00:01:21,270
Then we'll click on the tables tab.

36
00:01:21,270 --> 00:01:24,364
When we load up the tables portion in the DynamoDB console,

37
00:01:24,364 --> 00:01:25,950
we should see our table name.

38
00:01:25,950 --> 00:01:26,965
If we scroll to the right,

39
00:01:26,965 --> 00:01:29,338
we'll see the total read and write capacity of that table.

40
00:01:29,338 --> 00:01:33,072
In a UNIX environment, you can test your API using curl.

41
00:01:33,072 --> 00:01:37,526
You can use -X to specify that you want to test it with a POST request.

42
00:01:37,526 --> 00:01:39,449
Then you'll paste your specific API URL.

43
00:01:39,449 --> 00:01:39,723
Next,

44
00:01:39,723 --> 00:01:42,571
you'll add in the --data flag and then use the single

45
00:01:42,571 --> 00:01:44,644
quote and add JSON that looks like this,

46
00:01:44,644 --> 00:01:48,220
and another single quote in order to specify the data that

47
00:01:48,220 --> 00:01:50,573
you'll be passing along to the API endpoint.

48
00:01:50,573 --> 00:01:53,535
After you hit Enter, you should see a response that looks something like this.

49
00:01:53,535 --> 00:01:55,839
This means that your data was posted successfully,

50
00:01:55,839 --> 00:01:59,420
but let's go ahead and check on that in the AWS console.

51
00:01:59,420 --> 00:02:00,295
In the AWS console,

52
00:02:00,295 --> 00:02:03,350
you should be able to navigate to the table that you created previously.

53
00:02:03,350 --> 00:02:06,826
After doing that, go ahead and take a look at the Items tab.

54
00:02:06,826 --> 00:02:07,612
On the Items tab,

55
00:02:07,612 --> 00:02:10,735
you should see that you've just added an item successfully to the table.

56
00:02:10,735 --> 00:02:11,846
If this wasn't successful,

57
00:02:11,846 --> 00:02:15,641
I'd suggest double-checking the format of the data that you're passing in,

58
00:02:15,641 --> 00:02:18,728
and also making sure that you have the correct API URL from the

59
00:02:18,728 --> 00:02:20,365
results of the serverless deploy command.

60
00:02:20,365 --> 00:02:24,697
You can always run serverless deploy again, and then copy down those API values.

61
00:02:24,697 --> 00:02:29,231
You can also use Postman in any environment in order to test your API.

62
00:02:29,231 --> 00:02:31,731
You can get Postman from getpostman.

63
00:02:31,731 --> 00:02:35,481
com, and use it on any mainstream operating system.

64
00:02:35,481 --> 00:02:39,688
The first thing you'll need to do will be to change the GET dropdown to POST.

65
00:02:39,688 --> 00:02:43,101
Then you'll paste in the specific API endpoint that you were using

66
00:02:43,101 --> 00:02:45,198
with the curl command into the section here.

67
00:02:45,198 --> 00:02:45,771
After that,

68
00:02:45,771 --> 00:02:49,860
you'll go to the headers section and specify a content type of application/json.

69
00:02:49,860 --> 00:02:54,156
Then you'll go to the body section, select the raw button,

70
00:02:54,156 --> 00:02:57,521
and make sure that you pick application/json from the dropdown menu.

71
00:02:57,521 --> 00:02:59,781
Now we'll enter in the JSON without the single quotes,

72
00:02:59,781 --> 00:03:00,967
and in doing this,

73
00:03:00,967 --> 00:03:05,922
we'll be able to add another entry to our database by pressing the Send button.

74
00:03:05,922 --> 00:03:10,359
If we scroll down slightly, we'll also see the results from the API.

75
00:03:10,359 --> 00:03:14,104
This should also indicate that we successfully wrote our data to DynamoDB.

76
00:03:14,104 --> 00:03:16,978
But let's go ahead and open up the console one more time in that Items tab,

77
00:03:16,978 --> 00:03:20,627
and also take a look after refreshing the page.

78
00:03:20,627 --> 00:03:24,430
As you can see, we've successfully written a second entry to our database.

79
00:03:24,430 --> 00:03:27,034
Now let's take a look at the next portion of our module,

80
00:03:27,034 --> 00:03:34,000
in which we'll be looking at how we can test and debug our CRUD applications in AWS.

