1
00:00:02,718 --> 00:00:04,787
Now if you take a look at how we structured our function code,

2
00:00:04,787 --> 00:00:08,331
you'll notice that all of it is within the pets directory,

3
00:00:08,331 --> 00:00:10,163
and this is reflective of our serverless.

4
00:00:10,163 --> 00:00:10,687
yml file.

5
00:00:10,687 --> 00:00:13,056
All of the configuration for the handlers had the

6
00:00:13,056 --> 00:00:14,603
pets/ at the beginning of them.

7
00:00:14,603 --> 00:00:16,875
This is because they're all in the pets directory.

8
00:00:16,875 --> 00:00:18,464
Now this is purely by convention.

9
00:00:18,464 --> 00:00:21,146
You could also have each of these functions one level up

10
00:00:21,146 --> 00:00:22,803
and not use the pets directory at all.

11
00:00:22,803 --> 00:00:23,195
Alternatively,

12
00:00:23,195 --> 00:00:27,597
you could spread them out into smaller and smaller directories and continue

13
00:00:27,597 --> 00:00:30,444
to add slashes to direct the path within the serverless.

14
00:00:30,444 --> 00:00:30,893
yml file.

15
00:00:30,893 --> 00:00:31,118
Really,

16
00:00:31,118 --> 00:00:34,292
it's just up to you to define the best way to actually structure

17
00:00:34,292 --> 00:00:36,308
your code for whatever example you're using.

18
00:00:36,308 --> 00:00:41,099
Now let's open up the pets directory and look at each of our function files.

19
00:00:41,099 --> 00:00:43,227
Now each of our functions has some similarities.

20
00:00:43,227 --> 00:00:44,221
In each of them,

21
00:00:44,221 --> 00:00:46,459
we bring in the required dependencies that we'll be

22
00:00:46,459 --> 00:00:47,766
using throughout the function.

23
00:00:47,766 --> 00:00:50,713
In the create function, we used the uuid dependency,

24
00:00:50,713 --> 00:00:54,079
which we'll be using to create consistently unique IDs for each

25
00:00:54,079 --> 00:00:56,250
of the items that we'll be adding to DynamoDB.

26
00:00:56,250 --> 00:00:59,758
In all of our functions, we also bring in the aws-sdk,

27
00:00:59,758 --> 00:01:01,917
which will allow us to interact with DynamoDB.

28
00:01:01,917 --> 00:01:04,348
We also always bring in the DynamoDB document client,

29
00:01:04,348 --> 00:01:07,513
which when we're working with JavaScript allows us to

30
00:01:07,513 --> 00:01:09,476
more easily interact with DynamoDB.

31
00:01:09,476 --> 00:01:11,262
In this case, whenever a create function is run,

32
00:01:11,262 --> 00:01:13,931
it saves the timestamp information of the first run.

33
00:01:13,931 --> 00:01:15,864
It also parses the JSON event.

34
00:01:15,864 --> 00:01:17,090
body and stores it as data.

35
00:01:17,090 --> 00:01:20,141
Then it checks to make sure that there's a petName and a petBreed,

36
00:01:20,141 --> 00:01:23,826
both of type string, in order to continue going through the function.

37
00:01:23,826 --> 00:01:24,945
When that results in a success,

38
00:01:24,945 --> 00:01:28,194
we can scroll down slightly and see that we'll be creating a params object,

39
00:01:28,194 --> 00:01:30,415
which we'll be using later in the function.

40
00:01:30,415 --> 00:01:34,037
That params objects models what's expected to pass into

41
00:01:34,037 --> 00:01:36,663
DynamoDB in order to create an entry in a table.

42
00:01:36,663 --> 00:01:39,909
First it passes in the DYNAMODB_TABLE name environment variable that

43
00:01:39,909 --> 00:01:42,516
we're getting from the configuration in serverless.

44
00:01:42,516 --> 00:01:46,365
yml, and it creates a new ID from UUID using the v1 method,

45
00:01:46,365 --> 00:01:48,812
and also adds in a petName and a petBreed,

46
00:01:48,812 --> 00:01:51,646
as well as the createdAt timestamp.

47
00:01:51,646 --> 00:01:54,007
Once it creates those params,

48
00:01:54,007 --> 00:01:56,122
it passes them through the DynamoDB put method in order

49
00:01:56,122 --> 00:01:58,013
to save that information in DynamoDB.

50
00:01:58,013 --> 00:02:03,164
Then, if successful, it passes back a successful response using the callback.

51
00:02:03,164 --> 00:02:06,897
The delete function essentially uses a bunch of the same information.

52
00:02:06,897 --> 00:02:10,537
It uses the same dependencies, also uses the process environment variable,

53
00:02:10,537 --> 00:02:12,068
the DynamoDB table name,

54
00:02:12,068 --> 00:02:15,923
and then takes the id value that's passed in through the event.

55
00:02:15,923 --> 00:02:18,541
It uses all of this to create a parameters object,

56
00:02:18,541 --> 00:02:21,864
which it then passes to the DynamoDB delete method,

57
00:02:21,864 --> 00:02:25,674
and then returns the response code depending on success or failure.

58
00:02:25,674 --> 00:02:28,848
The get function also does something fairly similar.

59
00:02:28,848 --> 00:02:33,300
It creates the same parameters object and then passes that into the dynamoDb.

60
00:02:33,300 --> 00:02:33,875
get method.

61
00:02:33,875 --> 00:02:37,724
Afterward, it processes that result and returns it with a response.

62
00:02:37,724 --> 00:02:40,936
The list function does something very similar.

63
00:02:40,936 --> 00:02:44,396
It passes in the DynamoDB TableName and then scans the entire table.

64
00:02:44,396 --> 00:02:48,319
The results of the entire scan are then passed back in the response.

65
00:02:48,319 --> 00:02:51,806
This includes all the items that are within the DynamoDB table,

66
00:02:51,806 --> 00:02:53,334
which means that as this table grows,

67
00:02:53,334 --> 00:02:57,086
this operation will become more expensive and contain a lot of additional data.

68
00:02:57,086 --> 00:02:58,023
And finally, update.

69
00:02:58,023 --> 00:03:01,382
js does something similar to what we were seeing in create.

70
00:03:01,382 --> 00:03:01,657
js.

71
00:03:01,657 --> 00:03:04,956
It creates a timestamp and loads the data in from the event.

72
00:03:04,956 --> 00:03:07,434
It then validates to make sure that we have the petName and

73
00:03:07,434 --> 00:03:09,093
petBreed correctly recorded as strings.

74
00:03:09,093 --> 00:03:13,309
And then it creates a params object and again uses the DynamoDB

75
00:03:13,309 --> 00:03:17,177
table name and some information of the event to specify the key

76
00:03:17,177 --> 00:03:19,313
that we see within the DynamoDB table.

77
00:03:19,313 --> 00:03:22,447
The only unique thing that this function does is that it uses some

78
00:03:22,447 --> 00:03:25,960
DynamoDB specific syntax in order to reference the petName,

79
00:03:25,960 --> 00:03:29,027
petBreed, and other values within the table.

80
00:03:29,027 --> 00:03:30,949
This essentially allows us to specify what values

81
00:03:30,949 --> 00:03:32,790
within the table will be updated,

82
00:03:32,790 --> 00:03:36,524
and makes sure to override all of these new values.

83
00:03:36,524 --> 00:03:36,896
Finally,

84
00:03:36,896 --> 00:03:39,876
it passes in that constructed parameters object to

85
00:03:39,876 --> 00:03:41,277
the DynamoDB update operation,

86
00:03:41,277 --> 00:03:50,000
and then returns the result as we expected with a success or failure using the callback.

