1
00:00:01,040 --> 00:00:04,970
In our first demo, we configured an InternalResourceViewResolver,

2
00:00:04,970 --> 00:00:06,540
and didn't even realize it.

3
00:00:06,540 --> 00:00:09,650
We've used that in all of our controllers since then.

4
00:00:09,650 --> 00:00:11,440
We simply return a string,

5
00:00:11,440 --> 00:00:16,330
and that is what's used by the ViewResolver to find the JSP page named

6
00:00:16,330 --> 00:00:19,540
and in the location specified with our resolver.

7
00:00:19,540 --> 00:00:22,870
We can also return a view object that wraps a string

8
00:00:22,870 --> 00:00:25,080
that is the view name as well.

9
00:00:25,080 --> 00:00:28,630
Our controller can build a model if necessary and return that to our

10
00:00:28,630 --> 00:00:32,550
ViewResolver with data that is needed in the view.

11
00:00:32,550 --> 00:00:34,440
We can also have multiple ViewResolvers,

12
00:00:34,440 --> 00:00:37,750
as well as multiple view types in our application.

13
00:00:37,750 --> 00:00:40,910
Let's look closer at that ViewResolver we've been using and

14
00:00:40,910 --> 00:00:44,290
not really realizing that we had created it.

15
00:00:44,290 --> 00:00:46,900
As we saw earlier in our controllers,

16
00:00:46,900 --> 00:00:52,000
I'm going to open up our RegistrationController, we're just returning a

17
00:00:52,000 --> 00:00:58,560
string of a name. On line 22 here we have return registration,

18
00:00:58,560 --> 00:01:02,400
and that's referring to our registration JSP.

19
00:01:02,400 --> 00:01:06,120
You may or may not recall that we configured two lines inside of our

20
00:01:06,120 --> 00:01:10,900
application.properties, the spring.mvc.view.prefix and the

21
00:01:10,900 --> 00:01:15,640
spring.mvc.view.suffix, and this tells it where those files are

22
00:01:15,640 --> 00:01:18,690
located and what extension to look for.

23
00:01:18,690 --> 00:01:21,920
So really it's taking that name that we have in our

24
00:01:21,920 --> 00:01:28,120
RegistrationController and pre‑appending the prefix and

25
00:01:28,120 --> 00:01:34,100
appending the suffix to that file to serve it back to our UI,

26
00:01:34,100 --> 00:01:36,710
so that's how it knows where to find this.

27
00:01:36,710 --> 00:01:38,470
Now how did it know how to do that?

28
00:01:38,470 --> 00:01:42,080
Well, in our ConferenceApplication configuration,

29
00:01:42,080 --> 00:01:46,480
we have this @SpringBootApplication, and we extend

30
00:01:46,480 --> 00:01:51,640
that SpringBootServletInitializer, and this configures it for us.

31
00:01:51,640 --> 00:01:54,740
But let's show you how to override that.

32
00:01:54,740 --> 00:01:57,500
Let's create a new class, and to do so we're going to put it

33
00:01:57,500 --> 00:02:00,480
alongside the ConferenceApplication. We're going to

34
00:02:00,480 --> 00:02:03,240
right‑click and say New Java Class.

35
00:02:03,240 --> 00:02:07,340
We're going to call this ConferenceConfig.

36
00:02:07,340 --> 00:02:09,320
You can honestly name it anything you want,

37
00:02:09,320 --> 00:02:13,490
it doesn't matter. And we're going to define a couple of things inside of here.

38
00:02:13,490 --> 00:02:18,010
First of all, we're going to designate this as a Configuration class,

39
00:02:18,010 --> 00:02:22,710
so we're going to annotate that with the @Configuration annotation. Then

40
00:02:22,710 --> 00:02:30,460
inside of here we want to create a Bean. We're going to create @Bean, and

41
00:02:30,460 --> 00:02:42,900
this Bean we're going to make a public ViewResolver, and this will just

42
00:02:42,900 --> 00:02:48,020
return an instance of viewResolver. It can be named anything we want. Inside

43
00:02:48,020 --> 00:02:55,650
of here, we're going to create an InternalResourceViewResolver, and this

44
00:02:55,650 --> 00:03:03,540
bean is nothing more than what's already being defined for us in that

45
00:03:03,540 --> 00:03:06,030
application.properties.

46
00:03:06,030 --> 00:03:08,570
So I'm going to show you the same code side by side

47
00:03:08,570 --> 00:03:10,440
here before we comment it out.

48
00:03:10,440 --> 00:03:17,830
I want to say bean.setPrefix, and we want to add in here

49
00:03:17,830 --> 00:03:34,390
WEB‑INF/jsp/, and then we want bean.setSuffix. We want to add

50
00:03:34,390 --> 00:03:39,040
quotes inside of there and say .jsp as well.

51
00:03:39,040 --> 00:03:42,080
Then we want to set the order, and this just tells it if we have

52
00:03:42,080 --> 00:03:47,790
multiple ViewResolvers, which one we want to fire in which order, and

53
00:03:47,790 --> 00:03:51,750
whichever one is first successful is what it will return. And then we

54
00:03:51,750 --> 00:03:57,240
want to return the bean at the end.

55
00:03:57,240 --> 00:03:58,830
Save this.

56
00:03:58,830 --> 00:04:01,980
This is all of the configuration that's done for us

57
00:04:01,980 --> 00:04:06,050
behind the scenes with that ConferenceApplication

58
00:04:06,050 --> 00:04:08,860
annotation being SpringBootApplication.

59
00:04:08,860 --> 00:04:12,280
So this main class that would launch our application if we had it

60
00:04:12,280 --> 00:04:16,210
self‑contained, it still gets read off the class path,

61
00:04:16,210 --> 00:04:19,980
and the SpringBootApplication has a component scanner in there that

62
00:04:19,980 --> 00:04:23,800
tells it to go look for any other class labeled as a configuration, and

63
00:04:23,800 --> 00:04:26,580
inside those configurations load up the beans.

64
00:04:26,580 --> 00:04:30,610
Now, these two lines, line 14 and 15, are the exact same

65
00:04:30,610 --> 00:04:33,420
lines inside of our application.properties.

66
00:04:33,420 --> 00:04:40,270
So I can now comment out line 1 and line 2, and save that, and you'll

67
00:04:40,270 --> 00:04:43,870
see that line 14 and 15 will take place of that.

68
00:04:43,870 --> 00:04:47,750
I'm going to restart my server, and now we can test that our

69
00:04:47,750 --> 00:04:49,260
ViewResolver is doing what it should be.

70
00:04:49,260 --> 00:04:51,910
I'm going to click on that registration link, and it

71
00:04:51,910 --> 00:04:54,290
did, it served those pages up for us.

72
00:04:54,290 --> 00:04:56,910
So looking back at our editor again,

73
00:04:56,910 --> 00:05:03,220
line 14 and 15, and really this whole method of 12 through 17, sets up

74
00:05:03,220 --> 00:05:05,870
the ViewResolver that's already preconfigured for us.

75
00:05:05,870 --> 00:05:10,230
And now we can override things and do various changes to this

76
00:05:10,230 --> 00:05:14,120
that aren't really exposed through those properties like we

77
00:05:14,120 --> 00:05:16,340
have in the application.properties.

78
00:05:16,340 --> 00:05:19,520
We started using that to begin with, we can convert it over to this.

79
00:05:19,520 --> 00:05:24,950
We are going to add other ViewResolvers inside that config as we do

80
00:05:24,950 --> 00:05:32,000
more things to our code. So we'll leave this here, and it's a good base for what we want to move forward with.

