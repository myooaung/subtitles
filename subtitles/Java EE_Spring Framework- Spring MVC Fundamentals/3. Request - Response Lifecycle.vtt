WEBVTT
1
00:00:01.110 --> 00:00:06.020
The request/response life cycle is actually a tricky one when you look at it.

2
00:00:06.020 --> 00:00:09.010
The big scope of everything that's going on here seems

3
00:00:09.010 --> 00:00:11.230
a little bit overwhelming at first.

4
00:00:11.230 --> 00:00:15.760
We have an incoming request that hits our front controller,

5
00:00:15.760 --> 00:00:19.020
that's just our dispatcher servlet inside of Spring,

6
00:00:19.020 --> 00:00:22.180
and that hands off the request and delegates our request over

7
00:00:22.180 --> 00:00:24.150
to one of the controllers that we've set up.

8
00:00:24.150 --> 00:00:27.870
So the dispatcher is just the router that comes in and says

9
00:00:27.870 --> 00:00:30.590
what controller's going to handle it?

10
00:00:30.590 --> 00:00:35.870
I'm going to delegate this request over to that controller over there.

11
00:00:35.870 --> 00:00:40.220
The controller just routes traffic to where it's supposed to go.

12
00:00:40.220 --> 00:00:44.940
So it says, I'm going to handle that request and hand it over to the back end.

13
00:00:44.940 --> 00:00:48.880
Now our back end could be composed of web services or

14
00:00:48.880 --> 00:00:52.150
a database or multiple databases,

15
00:00:52.150 --> 00:00:54.860
any number of things that we're gathering data from.

16
00:00:54.860 --> 00:00:59.490
And in turn what that does is it hands back a model object to us.

17
00:00:59.490 --> 00:01:02.680
So it creates that model and hands it back.

18
00:01:02.680 --> 00:01:05.290
The model is basically just our data,

19
00:01:05.290 --> 00:01:08.440
what we're trying to represent on our screen.

20
00:01:08.440 --> 00:01:11.790
Once that gets back to the controller, the controller says okay,

21
00:01:11.790 --> 00:01:15.020
I'm going to let somebody else now do the rendering.

22
00:01:15.020 --> 00:01:18.690
And the rendering is separate from the business logic.

23
00:01:18.690 --> 00:01:21.490
So we have this model‑view‑controller design pattern,

24
00:01:21.490 --> 00:01:25.640
and everything is doing its own specified functionality here.

25
00:01:25.640 --> 00:01:28.160
So coming back to the controller, we have our model now,

26
00:01:28.160 --> 00:01:32.510
or our data that we're going to try and represent the UI with.

27
00:01:32.510 --> 00:01:35.090
So we go back to our front controller and it says, oh,

28
00:01:35.090 --> 00:01:37.080
well, now who's going to handle this?

29
00:01:37.080 --> 00:01:39.600
Who's going to render this response?

30
00:01:39.600 --> 00:01:42.840
Let's pass our model down to some view template.

31
00:01:42.840 --> 00:01:45.010
For this course we're going to use JSP,

32
00:01:45.010 --> 00:01:49.840
but we also are going to look at examples using Thymeleaf.

33
00:01:49.840 --> 00:01:53.170
There's many other different technologies that integrate nicely

34
00:01:53.170 --> 00:01:56.010
with Spring MVC as well that you could use.

35
00:01:56.010 --> 00:01:59.300
Once it's gone to our view template, our JSP page,

36
00:01:59.300 --> 00:02:03.200
we're going to return control back to the front controller and

37
00:02:03.200 --> 00:02:05.940
then return back our response to the browser.

38
00:02:05.940 --> 00:02:09.200
Now this whole thing is kind of divided up into three different parts.

39
00:02:09.200 --> 00:02:10.140
We have our model,

40
00:02:10.140 --> 00:02:15.240
so where we get our model created and the data associated with it,

41
00:02:15.240 --> 00:02:19.180
our views, so our representing view, and our controller.

42
00:02:19.180 --> 00:02:25.000
That's where our model‑view‑controller is coming into play with our entire application.

