1
00:00:00,840 --> 00:00:03,760
You'll often hear people talk about applications in

2
00:00:03,760 --> 00:00:07,610
terms of a tiered architecture, or an n‑tier architecture,

3
00:00:07,610 --> 00:00:09,040
or layers.

4
00:00:09,040 --> 00:00:13,370
We try to build our applications in tiers more now in enterprise languages,

5
00:00:13,370 --> 00:00:15,740
and there are great reasons to do so.

6
00:00:15,740 --> 00:00:18,680
A few of these are separation of concerns.

7
00:00:18,680 --> 00:00:21,240
This just means that each layer is only concerned

8
00:00:21,240 --> 00:00:23,930
with the task that it's assigned to.

9
00:00:23,930 --> 00:00:28,840
So our presentation layer is only going to have presentation type things in it,

10
00:00:28,840 --> 00:00:32,370
and our business logic is going to be contained in a layer,

11
00:00:32,370 --> 00:00:36,930
and data access is going to also be contained in its own separate layer.

12
00:00:36,930 --> 00:00:39,470
Now there's another term called reusable layers,

13
00:00:39,470 --> 00:00:42,700
and that sounds very similar to separation of concerns,

14
00:00:42,700 --> 00:00:47,090
and in some ways it is, but its focus is different.

15
00:00:47,090 --> 00:00:50,840
If I have business logic in my presentation tier,

16
00:00:50,840 --> 00:00:55,420
I can't easily change my presentation tier or expose a web service,

17
00:00:55,420 --> 00:00:59,480
for example, without recreating some of that logic.

18
00:00:59,480 --> 00:01:02,640
If I have extracted it into its appropriate tier,

19
00:01:02,640 --> 00:01:05,450
then I'm not duplicating that logic.

20
00:01:05,450 --> 00:01:10,570
So if you ever notice yourself copying and pasting code in your application,

21
00:01:10,570 --> 00:01:14,220
it's probably not in the correct tier or it's not

22
00:01:14,220 --> 00:01:17,730
architected in the correct tier or way.

23
00:01:17,730 --> 00:01:19,950
Now, that's a little bit of a difference between the

24
00:01:19,950 --> 00:01:23,010
separation of concerns and the reusable layer.

25
00:01:23,010 --> 00:01:26,750
Separation of concerns is not about reuse.

26
00:01:26,750 --> 00:01:29,370
It's just about having things in the right layer,

27
00:01:29,370 --> 00:01:31,640
so I can re‑architect them later.

28
00:01:31,640 --> 00:01:34,920
Where reusable layers means that I have a purpose and

29
00:01:34,920 --> 00:01:37,410
a point that I'm trying to drive.

30
00:01:37,410 --> 00:01:42,520
I can expose the same data in multiple ways without having to worry about it,

31
00:01:42,520 --> 00:01:45,470
or I can replace my presentation tier without having

32
00:01:45,470 --> 00:01:48,340
to re‑architect my application.

33
00:01:48,340 --> 00:01:51,560
Another term is maintenance, or refactoring,

34
00:01:51,560 --> 00:01:54,410
that might be a better way to put it.

35
00:01:54,410 --> 00:01:57,330
The ability to change things without having those

36
00:01:57,330 --> 00:02:00,040
things ripple through all of our code.

37
00:02:00,040 --> 00:02:02,300
So if I have Hibernate in my application,

38
00:02:02,300 --> 00:02:05,100
and I have to change something in my UI based off the

39
00:02:05,100 --> 00:02:09,650
change I made in Hibernate, no, I'm not talking about a business need,

40
00:02:09,650 --> 00:02:13,310
but more of a I want to change how a table is structured or something like

41
00:02:13,310 --> 00:02:18,100
that, I'm not separating those into the right tiers correctly.

42
00:02:18,100 --> 00:02:19,350
If this is done correctly,

43
00:02:19,350 --> 00:02:22,940
we can change our code and not have to retest everything,

44
00:02:22,940 --> 00:02:25,930
but rather just the pieces that we changed.

45
00:02:25,930 --> 00:02:29,400
This leads into a much larger discussion about unit testing,

46
00:02:29,400 --> 00:02:32,100
but that's outside the focus of this course.

47
00:02:32,100 --> 00:02:36,290
Talking about those layers of our Spring MVC application, and this is

48
00:02:36,290 --> 00:02:38,740
important because of how we annotate our components,

49
00:02:38,740 --> 00:02:42,990
which we're going to talk about here in just a second, we first have a data

50
00:02:42,990 --> 00:02:46,800
model that we would be accessing using something like Hibernate,

51
00:02:46,800 --> 00:02:49,430
or JPA, Spring JDBC.

52
00:02:49,430 --> 00:02:53,740
This layer represents the data or model of our application.

53
00:02:53,740 --> 00:02:57,150
Next we have a controller that interprets the user's requests and

54
00:02:57,150 --> 00:03:01,670
selects the appropriate view based off of what we've requested or what

55
00:03:01,670 --> 00:03:04,740
information we got back from our data model.

56
00:03:04,740 --> 00:03:06,520
And then we have our view.

57
00:03:06,520 --> 00:03:11,090
For our class, we're going to be using the JSPs,

58
00:03:11,090 --> 00:03:15,500
and we'll also look at Thymeleaf, as well as exposing

59
00:03:15,500 --> 00:03:17,450
some things through web services.

60
00:03:17,450 --> 00:03:21,700
Now, one thing that's often misunderstood by people is that Spring

61
00:03:21,700 --> 00:03:25,240
MVC has nothing to do with regards to our database,

62
00:03:25,240 --> 00:03:28,120
but it has a model associated with it.

63
00:03:28,120 --> 00:03:32,180
So is the model talking about our database or the model talking about what

64
00:03:32,180 --> 00:03:36,340
our framework is going to represent to just our JSP page?

65
00:03:36,340 --> 00:03:37,650
It's actually the latter.

66
00:03:37,650 --> 00:03:41,340
It's referring to what we're going to represent in our JSP page,

67
00:03:41,340 --> 00:03:44,250
or our Thymeleaf page, or our web service.

68
00:03:44,250 --> 00:03:46,960
We always have to get that information from somewhere.

69
00:03:46,960 --> 00:03:52,000
So that's where our various components come in and what we're going to talk about next.

