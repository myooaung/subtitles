WEBVTT
1
00:00:01.040 --> 00:00:06.990
A template resolver is not the same as a view resolver. When first looking

2
00:00:06.990 --> 00:00:10.690
at the template resolver, it actually feels just like a view resolver that

3
00:00:10.690 --> 00:00:13.220
we've seen quite a few times in this course now.

4
00:00:13.220 --> 00:00:16.780
But this configuration in here is actually where to locate the

5
00:00:16.780 --> 00:00:20.170
template files and how they should be resolved.

6
00:00:20.170 --> 00:00:22.410
The view resolver, which we will configure later,

7
00:00:22.410 --> 00:00:27.030
just sets the order and references this template resolver we'll use.

8
00:00:27.030 --> 00:00:30.820
Let's configure the template resolver in our project now and then we'll

9
00:00:30.820 --> 00:00:35.250
configure the view resolver in a minute. We need to configure a couple of

10
00:00:35.250 --> 00:00:39.880
beans for our application to resolve those template files.

11
00:00:39.880 --> 00:00:43.100
I'm going to do that inside of our ConferenceConfig.

12
00:00:43.100 --> 00:00:47.560
So as I open that up, I'm going to just scroll to the bottom and go below our

13
00:00:47.560 --> 00:00:52.440
ViewResolver, but before our closing curly brace, and I'm going to add in this

14
00:00:52.440 --> 00:00:59.840
templateResolver. To do so, I want to go ahead and import all of these

15
00:00:59.840 --> 00:01:05.190
resources that I have. And you can see we created an instance of a Spring

16
00:01:05.190 --> 00:01:09.880
templateResolver just named the method templateResolver. And inside of there,

17
00:01:09.880 --> 00:01:15.260
we have a SpringResourceTemplateResolver. We set the applicationContext. Notice

18
00:01:15.260 --> 00:01:16.000
that's still red.

19
00:01:16.000 --> 00:01:17.380
We're going to fix that.

20
00:01:17.380 --> 00:01:22.370
And then we set the prefix of WEBâ€‘INF/views and

21
00:01:22.370 --> 00:01:28.820
templateResolver suffix of .html. Now to fix that

22
00:01:28.820 --> 00:01:33.450
applicationContext, I'm going to scroll up to the top.

23
00:01:33.450 --> 00:01:36.200
Now we haven't done this yet in our application,

24
00:01:36.200 --> 00:01:42.420
but it's really common to use an applicationContext inside of our file.

25
00:01:42.420 --> 00:01:46.200
So I'm going to import an annotation for @Autowired,

26
00:01:46.200 --> 00:01:51.640
and I'm going to create an instance of the application context

27
00:01:51.640 --> 00:01:56.740
for it to be autowired into our application,

28
00:01:56.740 --> 00:01:57.780
and that's all I have to do.

29
00:01:57.780 --> 00:02:00.470
I am going to make that private just so that nothing else in the

30
00:02:00.470 --> 00:02:04.330
package utilizes it because we'll want autowire and inject that

31
00:02:04.330 --> 00:02:06.150
wherever we're going to use it.

32
00:02:06.150 --> 00:02:10.280
Now if we scroll back down, that is purple instead of red,

33
00:02:10.280 --> 00:02:13.400
and the colors may not show up super good for you,

34
00:02:13.400 --> 00:02:15.450
but we've resolved that dependency.

35
00:02:15.450 --> 00:02:23.000
So we have our templateResolver in here now. Now we can go configure a template engine that will utilize this resolver.

